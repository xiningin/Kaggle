{"cell_type":{"2bab84c7":"code","d21ddfde":"code","9621a962":"code","3f55d506":"code","fe8a8491":"code","b1b995b6":"code","0eb2e8af":"code","f17bf7f4":"code","09863416":"code","41e8dc8a":"code","21a69927":"code","91365c54":"code","4f60aec5":"code","57636612":"code","f4267767":"code","0f5434e9":"code","24c043e0":"code","a301d35e":"code","4f8ca761":"code","ca0fe5b7":"code","01472710":"code","bd2ecf54":"code","1d13228e":"code","bb6e0bca":"code","ae996083":"code","0440e775":"code","73bd7b28":"code","ba9f4a45":"code","4a437bfa":"code","884f2642":"code","c0d766e0":"code","efa28842":"code","f6a3079a":"code","fd801a50":"code","db0d70f2":"markdown","cb1b2ca9":"markdown","9af9cb5b":"markdown","513ff307":"markdown","e31cb92c":"markdown","46e5070c":"markdown","092bff3e":"markdown","962bc06e":"markdown","fcf2c945":"markdown","bdaf35fb":"markdown"},"source":{"2bab84c7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d21ddfde":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set_style(\"whitegrid\")\nsns.set_palette(\"muted\")\nfrom datetime import datetime, date, time","9621a962":"columns_to_read = [\"id\",\n                   \"data_inversa\",\n                   \"horario\",\n                   \"uf\",                                \n                   \"br\",              \n                    \"km\",                                \n                    \"municipio\",                         \n                    \"causa_acidente\",                    \n                    \"tipo_acidente\",                     \n                    \"classificacao_acidente\",            \n                    \"fase_dia\",                          \n                    \"sentido_via\",                       \n                    \"condicao_metereologica\",            \n                    \"tipo_pista\",                        \n                    \"tracado_via\",                       \n                    \"uso_solo\",                                            \n                    \"pessoas\",                            \n                    \"mortos\",                             \n                    \"feridos_leves\",                      \n                    \"feridos_graves\",                     \n                    \"ilesos\",                             \n                    \"ignorados\",                          \n                    \"feridos\",                            \n                    \"veiculos\"] ","3f55d506":"datatran2020 = pd.read_csv('..\/input\/acidentes-rodovias-federais-brasil-jan07-a-jul19\/datatran2020.csv', sep = ';', decimal=\",\", encoding = \"ISO-8859-1\", usecols=columns_to_read)\ndatatran2019 = pd.read_csv('..\/input\/acidentes-rodovias-federais-brasil-jan07-a-jul19\/datatran2019.csv', sep = ';', decimal=\",\", encoding = \"ISO-8859-1\", usecols=columns_to_read)\ndatatran2018 = pd.read_csv('..\/input\/acidentes-rodovias-federais-brasil-jan07-a-jul19\/datatran2018.csv', sep = ';', decimal=\",\", encoding = \"ISO-8859-1\", usecols=columns_to_read)\ndatatran2017 = pd.read_csv('..\/input\/acidentes-rodovias-federais-brasil-jan07-a-jul19\/datatran2017.csv', sep = ';', decimal=\",\", encoding = \"ISO-8859-1\", usecols=columns_to_read)\ndatatran2016 = pd.read_csv('..\/input\/acidentes-rodovias-federais-brasil-jan07-a-jul19\/datatran2016.csv', sep = ';', decimal=\",\", encoding = \"ISO-8859-1\", usecols=columns_to_read)\ndatatran2015 = pd.read_csv('..\/input\/acidentes-rodovias-federais-brasil-jan07-a-jul19\/datatran2015.csv', sep = ';', decimal=\",\", encoding = \"ISO-8859-1\", usecols=columns_to_read)\ndatatran2014 = pd.read_csv('..\/input\/acidentes-rodovias-federais-brasil-jan07-a-jul19\/datatran2014.csv', sep = ';', decimal=\",\", encoding = \"ISO-8859-1\", usecols=columns_to_read)\ndatatran2013 = pd.read_csv('..\/input\/acidentes-rodovias-federais-brasil-jan07-a-jul19\/datatran2013.csv', sep = ';', decimal=\",\", encoding = \"ISO-8859-1\", usecols=columns_to_read)\ndatatran2012 = pd.read_csv('..\/input\/acidentes-rodovias-federais-brasil-jan07-a-jul19\/datatran2012.csv', sep = ';', decimal=\",\", encoding = \"ISO-8859-1\", usecols=columns_to_read)\ndatatran2011 = pd.read_csv('..\/input\/acidentes-rodovias-federais-brasil-jan07-a-jul19\/datatran2011.csv', sep = ';', decimal=\",\", encoding = \"ISO-8859-1\", usecols=columns_to_read)\ndatatran2010 = pd.read_csv('..\/input\/acidentes-rodovias-federais-brasil-jan07-a-jul19\/datatran2010.csv', sep = ';', decimal=\",\", encoding = \"ISO-8859-1\", usecols=columns_to_read)\ndatatran2009 = pd.read_csv('..\/input\/acidentes-rodovias-federais-brasil-jan07-a-jul19\/datatran2009.csv', sep = ';', decimal=\",\", encoding = \"ISO-8859-1\", usecols=columns_to_read)\ndatatran2008 = pd.read_csv('..\/input\/acidentes-rodovias-federais-brasil-jan07-a-jul19\/datatran2008.csv', sep = ';', decimal=\",\", encoding = \"ISO-8859-1\", usecols=columns_to_read)\ndatatran2007 = pd.read_csv('..\/input\/acidentes-rodovias-federais-brasil-jan07-a-jul19\/datatran2007.csv', sep = ';', decimal=\",\", encoding = \"ISO-8859-1\", usecols=columns_to_read)","fe8a8491":"acidentes = pd.concat([datatran2007,\n                   datatran2008,\n                   datatran2009,\n                   datatran2010,\n                   datatran2011,\n                   datatran2012,\n                   datatran2013,\n                   datatran2014,\n                   datatran2015,\n                   datatran2016,\n                   datatran2017,\n                   datatran2018,\n                   datatran2019,\n                   datatran2020], sort=False, ignore_index=True)","b1b995b6":"to_delete = [datatran2007,\n             datatran2008,\n                   datatran2009,\n                   datatran2010,\n                   datatran2011,\n                   datatran2012,\n                   datatran2013,\n                   datatran2014,\n                   datatran2015,\n                   datatran2016,\n                   datatran2017,\n                   datatran2018,\n                   datatran2019,\n                   datatran2020]\ndel datatran2007, datatran2008, datatran2009, datatran2010, datatran2011, datatran2012, datatran2013, datatran2014, datatran2015, datatran2016, datatran2017, datatran2018, datatran2019, datatran2020\ndel to_delete\nacidentes.info(memory_usage='deep')","0eb2e8af":"acidentes.id = acidentes.id.astype('int32')\nacidentes.pessoas = acidentes.pessoas.astype('uint8')\nacidentes.mortos = acidentes.mortos.astype('uint8')\nacidentes.feridos_leves = acidentes.feridos_leves.astype('uint8')\nacidentes.feridos_graves = acidentes.feridos_graves.astype('uint8')\nacidentes.ilesos = acidentes.ilesos.astype('uint8')\nacidentes.ignorados = acidentes.ignorados.astype('uint8')\nacidentes.feridos = acidentes.feridos.astype('uint8')\nacidentes.veiculos = acidentes.veiculos.astype('uint8')\nacidentes.uf = acidentes.uf.astype('category')\nacidentes.br = acidentes.br.astype('category')\nacidentes.municipio = acidentes.municipio.astype('category')\nacidentes.causa_acidente = acidentes.causa_acidente.astype('category')\nacidentes.tipo_acidente = acidentes.tipo_acidente.astype('category')\nacidentes.classificacao_acidente = acidentes.classificacao_acidente.astype('category')\nacidentes.fase_dia = acidentes.fase_dia.astype('category')\nacidentes.sentido_via = acidentes.sentido_via.astype('category')\nacidentes.condicao_metereologica = acidentes.condicao_metereologica.astype('category')\nacidentes.tipo_pista = acidentes.tipo_pista.astype('category')\nacidentes.tracado_via = acidentes.tracado_via.astype('category')\nacidentes.uso_solo = acidentes.uso_solo.astype('category')","f17bf7f4":"acidentes['data_hora'] = acidentes['data_inversa'].map(str) + ' ' + acidentes['horario']\nacidentes['data_hora'] = pd.to_datetime(acidentes['data_hora'])\nacidentes['ano'] = acidentes['data_hora'].dt.year\nacidentes['mes'] = acidentes['data_hora'].dt.month\nacidentes['hora'] = acidentes['data_hora'].dt.hour\nacidentes.drop(['data_inversa', 'horario'], axis=1, inplace = True)","09863416":"acidentes = acidentes.dropna()","41e8dc8a":"acidentes.info(memory_usage='deep')","21a69927":"acidentes['municipio'] = acidentes['municipio'].str.rstrip()\nacidentes['causa_acidente'] = acidentes['causa_acidente'].str.rstrip()\nacidentes['tipo_acidente'] = acidentes['tipo_acidente'].str.rstrip()\nacidentes['classificacao_acidente'] = acidentes['classificacao_acidente'].str.rstrip()\nacidentes['fase_dia'] = acidentes['fase_dia'].str.rstrip()\nacidentes['sentido_via'] = acidentes['sentido_via'].str.rstrip()\nacidentes['condicao_metereologica'] = acidentes['condicao_metereologica'].str.rstrip()\nacidentes['tipo_pista'] = acidentes['tipo_pista'].str.rstrip()\nacidentes['tracado_via'] = acidentes['tracado_via'].str.rstrip()\nacidentes['uso_solo'] = acidentes['uso_solo'].str.rstrip()\nacidentes['uf'] = acidentes['uf'].str.upper()\nacidentes['municipio'] = acidentes['municipio'].str.lower()\nacidentes['causa_acidente'] = acidentes['causa_acidente'].str.lower()\nacidentes['classificacao_acidente'] = acidentes['classificacao_acidente'].str.lower()\nacidentes['fase_dia'] = acidentes['fase_dia'].str.lower()\nacidentes['sentido_via'] = acidentes['sentido_via'].str.lower()\nacidentes['tipo_pista'] = acidentes['tipo_pista'].str.lower()\nacidentes['tracado_via'] = acidentes['tracado_via'].str.lower()\nacidentes['uso_solo'] = acidentes['uso_solo'].str.lower()","91365c54":"sorted(acidentes.causa_acidente.unique())","4f60aec5":"mapa_causa_acidente = {'(null)' : '(null)',\n    'agress\u00e3o externa' : 'agress\u00e3o externa',\n 'animais na pista' : 'animais na pista',\n 'avarias e\/ou desgaste excessivo no pneu' : 'avarias e\/ou desgaste excessivo no pneu',\n 'carga excessiva e\/ou mal acondicionada' : 'carga excessiva e\/ou mal acondicionada',\n 'condutor dormindo' : 'condutor dormindo',\n 'defeito mec\u00e2nico em ve\u00edculo' : 'defeito mec\u00e2nico no ve\u00edculo',\n 'defeito mec\u00e2nico no ve\u00edculo' : 'defeito mec\u00e2nico no ve\u00edculo',\n 'defeito na via' : 'defeito na via',\n 'defici\u00eancia ou n\u00e3o acionamento do sistema de ilumina\u00e7\u00e3o\/sinaliza\u00e7\u00e3o do ve\u00edculo' : 'defici\u00eancia ou n\u00e3o acionamento do sistema de ilumina\u00e7\u00e3o\/sinaliza\u00e7\u00e3o do ve\u00edculo',\n 'desobedi\u00eancia \u00e0 sinaliza\u00e7\u00e3o' : 'desobedi\u00eancia \u00e0 sinaliza\u00e7\u00e3o',\n 'desobedi\u00eancia \u00e0s normas de tr\u00e2nsito pelo condutor' : 'desobedi\u00eancia \u00e0s normas de tr\u00e2nsito pelo condutor',\n 'desobedi\u00eancia \u00e0s normas de tr\u00e2nsito pelo pedestre' : 'desobedi\u00eancia \u00e0s normas de tr\u00e2nsito pelo pedestre',\n 'dormindo' : 'condutor dormindo',\n 'falta de aten\u00e7\u00e3o' : 'falta de aten\u00e7\u00e3o \u00e0 condu\u00e7\u00e3o',\n 'falta de aten\u00e7\u00e3o do pedestre' : 'falta de aten\u00e7\u00e3o do pedestre',\n 'falta de aten\u00e7\u00e3o \u00e0 condu\u00e7\u00e3o' : 'falta de aten\u00e7\u00e3o \u00e0 condu\u00e7\u00e3o',\n 'fen\u00f4menos da natureza' : 'fen\u00f4menos da natureza',\n 'ingest\u00e3o de subst\u00e2ncias psicoativas' : 'ingest\u00e3o de subst\u00e2ncias psicoativas',\n 'ingest\u00e3o de \u00e1lcool' : 'ingest\u00e3o de \u00e1lcool',\n 'ingest\u00e3o de \u00e1lcool e\/ou subst\u00e2ncias psicoativas pelo pedestre' : 'ingest\u00e3o de \u00e1lcool e\/ou subst\u00e2ncias psicoativas pelo pedestre',\n 'mal s\u00fabito' : 'mal s\u00fabito',\n 'n\u00e3o guardar dist\u00e2ncia de seguran\u00e7a' : 'n\u00e3o guardar dist\u00e2ncia de seguran\u00e7a',\n 'objeto est\u00e1tico sobre o leito carro\u00e7\u00e1vel' : 'objeto est\u00e1tico sobre o leito carro\u00e7\u00e1vel',\n 'outras' : 'outras',\n 'pista escorregadia' : 'pista escorregadia',\n 'restri\u00e7\u00e3o de visibilidade' : 'restri\u00e7\u00e3o de visibilidade',\n 'sinaliza\u00e7\u00e3o da via insuficiente ou inadequada' : 'sinaliza\u00e7\u00e3o da via insuficiente ou inadequada',\n 'ultrapassagem indevida' : 'ultrapassagem indevida',\n 'velocidade incompat\u00edvel' : 'velocidade incompat\u00edvel'}\nacidentes.causa_acidente = acidentes.causa_acidente.map(mapa_causa_acidente)","57636612":"sorted(acidentes.tipo_acidente.unique())","f4267767":"mapa_tipo_acidente = {'Atropelamento de Animal' : 'Atropelamento de animal',\n 'Atropelamento de Pedestre' : 'Atropelamento de pedestre',\n 'Atropelamento de animal' : 'Atropelamento de animal',\n 'Atropelamento de pessoa' : 'Atropelamento de pedestre',\n 'Capotamento' : 'Capotamento',\n 'Colis\u00e3o Transversal' : 'Colis\u00e3o transversal',\n 'Colis\u00e3o com bicicleta' : 'Colis\u00e3o com bicicleta',\n 'Colis\u00e3o com objeto em movimento' : 'Colis\u00e3o com objeto em movimento',\n 'Colis\u00e3o com objeto est\u00e1tico' : 'Colis\u00e3o com objeto est\u00e1tico',\n 'Colis\u00e3o com objeto fixo' : 'Colis\u00e3o com objeto est\u00e1tico',\n 'Colis\u00e3o com objeto m\u00f3vel' : 'Colis\u00e3o com objeto em movimento',\n 'Colis\u00e3o frontal' : 'Colis\u00e3o frontal',\n 'Colis\u00e3o lateral' : 'Colis\u00e3o lateral',\n 'Colis\u00e3o transversal' : 'Colis\u00e3o transversal',\n 'Colis\u00e3o traseira' : 'Colis\u00e3o traseira',\n 'Danos Eventuais' : 'Danos eventuais',\n 'Danos eventuais' : 'Danos eventuais',\n 'Derramamento de Carga' : 'Derramamento de carga',\n 'Derramamento de carga' : 'Derramamento de carga',\n 'Engavetamento' : 'Engavetamento',\n 'Inc\u00eandio' : 'Inc\u00eandio',\n 'Queda de motocicleta \/ bicicleta \/ ve\u00edculo' : 'Queda de ocupante de ve\u00edculo',\n 'Queda de ocupante de ve\u00edculo' : 'Queda de ocupante de ve\u00edculo',\n 'Sa\u00edda de Pista' : 'Sa\u00edda de pista',\n 'Sa\u00edda de leito carro\u00e7\u00e1vel' : 'Sa\u00edda de pista',\n 'Tombamento' : 'Tombamento'}\nacidentes.tipo_acidente = acidentes.tipo_acidente.map(mapa_tipo_acidente)","0f5434e9":"acidentes.condicao_metereologica.unique()","24c043e0":"mapa_condicao_metereologica = {'Ceu Claro' : 'C\u00e9u Claro',\n                               'Chuva' : 'Chuva',\n                               'Nublado' : 'Nublado',\n                               'Sol' : 'Sol',\n                               'Nevoeiro\/neblina' : 'Nevoeiro\/Neblina',\n                               'Ignorada' : 'Ignorada',\n                               'Vento' : 'Vento',\n                               'Granizo' : 'Granizo',\n                               '(null)' : '(null)',\n                               'Neve' : 'Neve',\n                               'Garoa\/Chuvisco' : 'Garoa\/Chuvisco',\n                               'C\u00e9u Claro' : 'C\u00e9u Claro',\n                               'Ignorado' : 'Ignorada',\n                               'Nevoeiro\/Neblina' : 'Nevoeiro\/Neblina'}","a301d35e":"acidentes.condicao_metereologica = acidentes.condicao_metereologica.map(mapa_condicao_metereologica)","4f8ca761":"selecao = (acidentes.mortos != 0) | (acidentes.feridos_graves !=0)\nacidentes_com_mortos_ou_feridos_graves = acidentes[selecao]","ca0fe5b7":"df_ano_mes_acidentes_graves = acidentes_com_mortos_ou_feridos_graves.groupby(by=['ano', 'mes'])['mes'].count().reset_index(name='Quantidade')\ndf_ano_mes_acidentes_graves['ano_mes'] = df_ano_mes_acidentes_graves.ano.map(str) + \"-\" + df_ano_mes_acidentes_graves.mes.map(str)","01472710":"ax = sns.lineplot(x = 'ano_mes', y = 'Quantidade', data = df_ano_mes_acidentes_graves)\nax.figure.set_size_inches(22,8)\nax.xaxis.set_major_locator(plt.MaxNLocator(10))\nax.set_title(\"Quantidade de acidentes com mortos ou feridos graves - Geral Jan\/2007 a Dez\/2019\", fontsize=20)\nax.set_xlabel('M\u00eas-ano (Ex: 2013-1: Jan\/2013)')","bd2ecf54":"ax = sns.barplot(x=acidentes_com_mortos_ou_feridos_graves.causa_acidente.value_counts(),\n                 y=acidentes_com_mortos_ou_feridos_graves.causa_acidente.value_counts().index)\nax.set_title(\"Quantidade de acidentes com mortos ou feridos graves por Tipo de Causa - Geral Jan\/2007 a Dez\/2019\", fontsize=20)\nax.set_xlabel('')\nax.figure.set_size_inches(8,12)","1d13228e":"df_uf_causa_acidente = acidentes_com_mortos_ou_feridos_graves.groupby(by=['uf', 'causa_acidente'])['causa_acidente'].count().reset_index(name='Quantidade')\ndf_uf_causa_acidente.uf.unique()","bb6e0bca":"todas_ufs = ['AL', 'AM', 'AP', 'BA', 'CE', 'DF', 'ES', 'GO',\n       'MA', 'MG', 'MS', 'MT', 'PA', 'PB', 'PE', 'PI', 'PR', 'RJ', 'RN',\n       'RO', 'RR', 'RS', 'SC', 'SE', 'SP', 'TO']","ae996083":"df_uf_causa_acidente_top5 = df_uf_causa_acidente[df_uf_causa_acidente.uf == 'AC'].nlargest(5,'Quantidade')\nfor UF in todas_ufs:\n    df_uf_causa_acidente_top5 = pd.concat([df_uf_causa_acidente_top5, df_uf_causa_acidente[df_uf_causa_acidente.uf == UF].nlargest(5,'Quantidade')])","0440e775":"ax = sns.FacetGrid(df_uf_causa_acidente_top5, col=\"uf\", col_wrap = 3, height = 4)\nax.map(sns.barplot, \"Quantidade\", \"causa_acidente\")","73bd7b28":"df_br_uf_mortos = acidentes.groupby(by=['uf', 'br'])['mortos'].count().reset_index(name='Quantidade')\ndf2 = acidentes.groupby(by=['uf', 'br'])['mortos'].sum().reset_index(name='Mortos')\ndf_br_uf_mortos = df_br_uf_mortos.join(df2.Mortos)\ndf_br_uf_mortos['Mortos por 100 acidentes'] = 100*(df_br_uf_mortos.Mortos \/ df_br_uf_mortos.Quantidade)\ndf_br_uf_mortos.nlargest(10,'Mortos')","ba9f4a45":"df_br_uf_mortos[df_br_uf_mortos.Mortos > 100].nlargest(10,'Mortos por 100 acidentes')","4a437bfa":"df_municipio_mortos = acidentes.groupby(by=['municipio'])['mortos'].count().reset_index(name='Quantidade')\ndf2 = acidentes.groupby(by=['municipio'])['mortos'].sum().reset_index(name='Mortos')\ndf_municipio_mortos = df_municipio_mortos.join(df2.Mortos)\ndf_municipio_mortos['Mortos por 100 acidentes'] = 100*(df_municipio_mortos.Mortos \/ df_municipio_mortos.Quantidade)\ndf_municipio_mortos.nlargest(10,'Mortos')","884f2642":"df_municipio_mortos[df_municipio_mortos.Mortos > 100].nlargest(10,'Mortos por 100 acidentes')","c0d766e0":"df_hora_mortos = acidentes_com_mortos_ou_feridos_graves.groupby(by=['hora'])['mortos'].sum().reset_index(name='mortos')","efa28842":"ax = sns.barplot(x='hora',\n                 y='mortos',\n                 data = df_hora_mortos,\n                 palette=\"Blues_d\")\nax.set_title(\"Quantidade de mortos por hora do dia - Geral Jan\/2007 a Dez\/2019\", fontsize=20)\nax.set_xlabel('')\nax.figure.set_size_inches(12,8)","f6a3079a":"acidentes.tail(50)","fd801a50":"df_ano_mes_acidentes_graves.tail(24)","db0d70f2":"**Rodovias federais mais letais**","cb1b2ca9":"**Reduzindo uso de mem\u00f3ria**","9af9cb5b":"**Letalidade em fun\u00e7\u00e3o do per\u00edodo do dia**","513ff307":"**Acidentes com mortos ou feridos graves - Top 5 causas de acidente por Estado (UF)**","e31cb92c":"**Padronizando categorias**","46e5070c":"**Munic\u00edpios mais letais**","092bff3e":"**Removendo espa\u00e7os de strings e padronizando lowercase**","962bc06e":"**Importando Dados**","fcf2c945":"**Filtrando subsets**","bdaf35fb":"**Acidentes graves - Tend\u00eancia**"}}