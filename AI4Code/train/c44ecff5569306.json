{"cell_type":{"210d7fa7":"code","c733668d":"code","f2566fc3":"code","d9d8462f":"code","0059bd21":"code","0e8e5126":"code","23c9f191":"code","8dd32135":"code","f26a57b6":"code","2872a1c8":"code","85846fd0":"code","fce50ec9":"code","f3b12dc4":"code","4ae703b2":"code","11954027":"code","a99c5ea0":"code","dbed3eb3":"code","db522e36":"code","a56cf331":"code","cf2d907b":"code","aa5fff6b":"code","c0ffb944":"code","1d8cbcbe":"code","98d5c7cd":"code","97e00da5":"code","7a13232a":"code","d2c35996":"code","a58f7c26":"code","20c46ff1":"code","bac92e1f":"code","625d9242":"code","729c46cf":"code","acf85663":"code","acac537c":"code","cbd5a6d0":"code","7462fba6":"code","bece52ea":"code","21d4494d":"code","1f74bbd2":"code","5075bafa":"code","393d138b":"markdown","9054455e":"markdown","78fcb0d3":"markdown","3ae6d17d":"markdown","6e04f1a5":"markdown","9aaca584":"markdown","19c0e7cc":"markdown","d7444501":"markdown","26c10de1":"markdown","c6ff3676":"markdown","7a6e3d6d":"markdown","627ba637":"markdown","05ebb1bc":"markdown","1c0a944f":"markdown","c3da649b":"markdown","b7bfd8e3":"markdown","d98e6f62":"markdown","65fc939e":"markdown","08797eb5":"markdown"},"source":{"210d7fa7":"#import libraries\nimport numpy as np\n\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sb\n\n#supress warnings\nimport warnings\nwarnings.filterwarnings('ignore')","c733668d":"# read the dataset\ndataset=pd.read_csv('..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')\n\nprint(dataset.shape)\ndataset.head(10)","f2566fc3":"dataset.drop('id',axis=1)","d9d8462f":"print(dataset.isna().sum())","0059bd21":"# bmi has 201 missing values\ndataset['bmi'].fillna(dataset['bmi'].mean(), inplace=True)\ndataset.head(10)","0e8e5126":"print(dataset.isna().sum())","23c9f191":"# we will create a copy of our dataset for exploration \ndf=dataset.copy()","8dd32135":"plt.figure(figsize=(6,3))\nbase_color = sb.color_palette()[0]\nstroke = df.loc[df['stroke']==1]\nsb.countplot(data=stroke,x='gender',color=base_color)\nplt.title('Stroke based on gender',fontsize=20)\nplt.show()","f26a57b6":"plt.figure(figsize=(6,3))\nbase_color = sb.color_palette()[0]\nstroke = df.loc[df['stroke']==1]\nsb.countplot(data=stroke,x='hypertension',color=base_color)\nplt.title('Stroke based on hypertension',fontsize=20)\nplt.show()","2872a1c8":"plt.figure(figsize=(6,3))\nbase_color = sb.color_palette()[0]\nstroke = df.loc[df['stroke']==1]\nsb.countplot(data=stroke,x='heart_disease',color=base_color)\nplt.title('Stroke based on heart disease',fontsize=20)\nplt.show()","85846fd0":"plt.figure(figsize=(6,3))\nbase_color = sb.color_palette()[0]\nstroke = df.loc[df['stroke']==1]\nsb.countplot(data=stroke,x='ever_married',color=base_color)\nplt.title('Stroke based on marriage',fontsize=20)\nplt.show()","fce50ec9":"plt.figure(figsize=(6,3))\nbase_color = sb.color_palette()[0]\nstroke = df.loc[df['stroke']==1]\nsb.countplot(data=stroke,x='work_type',color=base_color)\nplt.title('Stroke based on work type',fontsize=20)\nplt.show()","f3b12dc4":"plt.figure(figsize=(6,3))\nbase_color = sb.color_palette()[0]\nstroke = df.loc[df['stroke']==1]\nsb.countplot(data=stroke,x='Residence_type',color=base_color)\nplt.title('Stroke based on residence type',fontsize=20)\nplt.show()","4ae703b2":"plt.figure(figsize=(10,5))\nbase_color = sb.color_palette()[0]\nstroke = df.loc[df['stroke']==1]\nsb.countplot(data=stroke,x='smoking_status',color=base_color)\nplt.title('Stroke based on smoking_status',fontsize=20)\nplt.show()","11954027":"base_color = sb.color_palette()[0]\nsb.boxplot(data = df, x = 'stroke', y = 'age', color = base_color)","a99c5ea0":"base_color = sb.color_palette()[0]\nsb.boxplot(data = df, x = 'stroke', y = 'avg_glucose_level', color = base_color)","dbed3eb3":"base_color = sb.color_palette()[0]\nsb.boxplot(data = df, x = 'stroke', y = 'bmi', color = base_color)","db522e36":"# Plot a pair plot\nplt.figure(figsize=(20,25))\nsb.pairplot(df)\nplt.show()","a56cf331":"dataset.head(10)","cf2d907b":"# we have to encode gender, marital status, work type, residence type, smoking status\n# Store the column names in one_hot_var list. 1-hot encoding of these features will be done\none_hot_var = ['work_type','Residence_type','smoking_status']\n\n# perform 1-hot encoding on each column present i n one_hot_var\nfor i in one_hot_var:\n    # perform 1-hot encoding for variable & store it in x_t dataframe\n    x_t = pd.get_dummies(dataset[i], prefix=i, prefix_sep='_', drop_first=True) # define new column name, separator and drop 1 of them.\n    \n    # join x_t to dataset\n    dataset = dataset.join(x_t)\n    \n    # drop original column from dataset as it is no longer needed\n    dataset.drop(i, axis = 1, inplace = True)","aa5fff6b":"# encoding gender and marital staus\ndataset.gender=dataset.gender.apply(lambda x :1 if x=='Female' else 0)\ndataset.ever_married=dataset.ever_married.apply(lambda x :1 if x=='Yes' else 0)","c0ffb944":"dataset.head(10)","1d8cbcbe":"X=dataset.drop('stroke', axis=1)\ny=dataset['stroke']","98d5c7cd":"from sklearn.model_selection import train_test_split \n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)","97e00da5":"# Save the training data in a separate df which will be used for finding coorelation\ndf_corr = X_train.copy()","7a13232a":"# plot a heatmap of correlation in training data\nplt.figure(figsize = (18,12))\nsb.heatmap(df_corr.corr(),cbar=True,annot=True)\nplt.show()","d2c35996":"df_corr['stroke'] = y_train","a58f7c26":"plt.figure(figsize=(18,8))\ndf_corr.corr()['stroke'].sort_values(ascending = False)[1:].plot(kind='bar')\nplt.title('Features collinearity with the target',fontsize=16)\nplt.ylabel('Collinearity',fontsize = 15)\nplt.xticks(rotation=45)\nplt.show()","20c46ff1":"X_train.head(10)","bac92e1f":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","625d9242":"X = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values","729c46cf":"print(X_train)","acf85663":"print(X_test)","acac537c":"print(y_train)","cbd5a6d0":"print(y_test)","7462fba6":"from sklearn.linear_model import LogisticRegression\nclassifier=LogisticRegression(random_state=0)\nclassifier.fit(X_train,y_train)\ny_pred = classifier.predict(X_test)","bece52ea":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\nprint('Accuracy  score : ' + str(round(accuracy_score(y_test,y_pred),3)))","21d4494d":"sb.heatmap(cm, cmap = 'Blues', annot = True, fmt = 'd', linewidths = 5, cbar = False, annot_kws = {'fontsize': 15},\n           yticklabels = ['No stroke', 'Stroke'], xticklabels = ['Predicted no stroke', 'Predicted stroke'])","1f74bbd2":"from sklearn.metrics import classification_report\n\nprint('Classification Report\\n',classification_report(y_test, y_pred))","5075bafa":"# Import auc, roc_curve\nfrom sklearn.metrics import auc, roc_curve\n\n# Get false positive rate, true positive rate and threshold\nfpr, tpr, threshold = roc_curve(y_test, y_pred)\n\n# Compute Area under curve\narea = auc(fpr, tpr)\n\n# plot the roc curve\n# Initialize Figure\nplt.figure(figsize=(18,5))\n\nplt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % area)\n\n# plot straight line\nplt.plot([0, 1], [0, 1],color='g', marker='_')\n\n# set plot title, xlabel, ylabel, legend\nplt.title('ROC Curve', fontsize=16)\nplt.ylabel('True Positive Rate', fontsize=14)\nplt.xlabel('False Positive Rate', fontsize=14)\nplt.legend(loc = 'lower right', fontsize = 12)\n\nplt.show()","393d138b":"**Our data is free of missing values now**","9054455e":"**People with heart disease are less prone to stroke**","78fcb0d3":"**People above the age of 60 are prone to stroke, with the highest being around 70**","3ae6d17d":"**Our model predictedone category of the target variable good but was not able to predict the other one well**","6e04f1a5":"**Split training and testing data**","9aaca584":"**No feature has a great correlation**","19c0e7cc":"**People in private sector are prone to stroke**","d7444501":"**bmi seems to not have a impact on stroke**","26c10de1":"**The accuracy of the model being 95% is good but the ROC curve with AUC of 0.51 is not good**","c6ff3676":"**People with hypertension are less prone to stroke**","7a6e3d6d":"# Encoding","627ba637":"**Surprisingly the people who never smoked have higher stroke count against the common belief that somkers are prone to diseases**","05ebb1bc":"# Missing values","1c0a944f":"**Married people have higher chance of stroke**","c3da649b":"**Their is not much difference between the counts of stroke based on residence type**","b7bfd8e3":"# Exploratory data analysis","d98e6f62":"**People with average glucose level around 80-200 are prone to stroke, with the highest near 100**","65fc939e":"**Females are slightly more prone to stroke**","08797eb5":"**Split feature and target**"}}