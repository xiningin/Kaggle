{"cell_type":{"b3c26527":"code","b90fbb7a":"code","e388a8c9":"code","54502f35":"code","7db0e8e2":"code","5ca2802c":"code","d7701858":"code","6674502b":"code","bde2b710":"code","f4f366a7":"code","f2fa62c6":"code","0542409b":"code","9a020fad":"code","3a861741":"code","61b9f8a5":"code","73f4146f":"code","e8283de4":"code","884d498f":"code","bb740aa1":"code","ffe5b5f6":"code","c94d6cdc":"code","6779f864":"code","8b279d65":"code","f1700e60":"code","b8862268":"code","4309b4ff":"code","d39c8b1e":"code","d412a499":"code","71b2b3ac":"code","743fb496":"code","a6b3bedc":"code","e5fdfc26":"code","eb7596b4":"code","50dbef37":"code","a6c77f7a":"code","101e7f1c":"code","d9432902":"code","a7486ef5":"code","028f0c7d":"code","930ea515":"code","6fb602c8":"code","6b11c72f":"code","9ba2b2b4":"code","d85574d2":"code","64991364":"code","91607946":"code","9c0ba1a3":"code","883b5e63":"code","0f4c2d41":"code","bbf74c57":"code","1740007c":"code","be5094ea":"code","d2e4d83c":"code","4e75eb68":"code","91fe3565":"code","a9da1984":"code","b294acae":"code","706e34bb":"code","73f8f249":"code","89f47042":"code","e4770719":"code","5e20dd57":"code","bd232855":"code","d452422a":"code","c881b71f":"code","2c8aa855":"code","3133f47f":"code","14c99300":"code","99cf9cd1":"code","ada2d8de":"code","d9cc102c":"code","05494733":"code","ea50a387":"code","21103115":"code","e5224d77":"code","de81f52b":"code","ddd9cc0e":"code","201b4b82":"code","1cb689ac":"code","51b2574d":"code","025f6339":"code","e646a48b":"markdown","0035c58b":"markdown","92a86d32":"markdown","ac892d52":"markdown","22619d26":"markdown","72195b2a":"markdown","a6e3597c":"markdown","c1ff1515":"markdown","e2490531":"markdown","636f5349":"markdown","44384769":"markdown","ac8b5abd":"markdown","2790f91e":"markdown","885a5d5e":"markdown","06246fc3":"markdown","3d05f3ec":"markdown","43c25ec8":"markdown","d090fa6f":"markdown"},"source":{"b3c26527":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b90fbb7a":"dataset = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ndataset.head()","e388a8c9":"dataset.shape","54502f35":"dataset.columns","7db0e8e2":"dataset.info()","5ca2802c":"# statistical summary\ndataset.describe()","d7701858":"# Numerical columns\ndataset.select_dtypes(include=['int64', 'float64']).columns","6674502b":"len(dataset.select_dtypes(include=['int64', 'float64']).columns)","bde2b710":"# categorical columns\ndataset.select_dtypes(include='object').columns","f4f366a7":"len(dataset.select_dtypes(include='object').columns)","f2fa62c6":"dataset.isnull().values.any()","0542409b":"dataset.isnull().values.sum()","9a020fad":"dataset.isnull().sum()","3a861741":"# columns with null values\ndataset.columns[dataset.isnull().any()]","61b9f8a5":"len(dataset.columns[dataset.isnull().any()])","73f4146f":"# null values with heatmap\nplt.figure(figsize=(16,9))\nsns.heatmap(dataset.isnull())\nplt.show()","e8283de4":"dataset.shape","884d498f":"null_percent = dataset.isnull().sum() \/ dataset.shape[0] * 100\n\n# (missing values \/ total values) * 100","bb740aa1":"# columns to drop (more than 50% null values)\ncols_to_drop = null_percent[null_percent > 50].keys()","ffe5b5f6":"cols_to_drop","c94d6cdc":"dataset = dataset.drop(columns=['Alley', 'PoolQC', 'Fence', 'MiscFeature'])","6779f864":"dataset.shape","8b279d65":"# columns with null values\ndataset.columns[dataset.isnull().any()]","f1700e60":"len(dataset.columns[dataset.isnull().any()])","b8862268":"# Numerical Columns\n# 'LotFrontage', 'MasVnrArea', 'GarageYrBlt'","4309b4ff":"dataset['LotFrontage'] = dataset['LotFrontage'].fillna(dataset['LotFrontage'].mean())\ndataset['MasVnrArea'] = dataset['MasVnrArea'].fillna(dataset['MasVnrArea'].mean())\ndataset['GarageYrBlt'] = dataset['GarageYrBlt'].fillna(dataset['GarageYrBlt'].mean())","d39c8b1e":"len(dataset.columns[dataset.isnull().any()])","d412a499":"dataset.select_dtypes(include='object').columns","71b2b3ac":"dataset.columns[dataset.isnull().any()]","743fb496":"len(dataset.columns[dataset.isnull().any()])","a6b3bedc":"dataset['MasVnrType'] = dataset['MasVnrType'].fillna(dataset['MasVnrType'].mode()[0])\ndataset['BsmtQual'] = dataset['BsmtQual'].fillna(dataset['BsmtQual'].mode()[0])\ndataset['BsmtCond'] = dataset['BsmtCond'].fillna(dataset['BsmtCond'].mode()[0])\ndataset['BsmtExposure'] = dataset['BsmtExposure'].fillna(dataset['BsmtExposure'].mode()[0])\ndataset['BsmtFinType1'] = dataset['BsmtFinType1'].fillna(dataset['BsmtFinType1'].mode()[0])\ndataset['BsmtFinType2'] = dataset['BsmtFinType2'].fillna(dataset['BsmtFinType2'].mode()[0])\ndataset['Electrical'] = dataset['Electrical'].fillna(dataset['Electrical'].mode()[0])\ndataset['FireplaceQu'] = dataset['FireplaceQu'].fillna(dataset['FireplaceQu'].mode()[0])\ndataset['GarageType'] = dataset['GarageType'].fillna(dataset['GarageType'].mode()[0])\ndataset['GarageFinish'] = dataset['GarageFinish'].fillna(dataset['GarageFinish'].mode()[0])\ndataset['GarageQual'] = dataset['GarageQual'].fillna(dataset['GarageQual'].mode()[0])\ndataset['GarageCond'] = dataset['GarageCond'].fillna(dataset['GarageCond'].mode()[0])","e5fdfc26":"len(dataset.columns[dataset.isnull().any()])","eb7596b4":"dataset.isnull().values.any()","50dbef37":"# distplot of the target variable\n\nplt.figure(figsize=(16,9))\nbar = sns.distplot(dataset['SalePrice'])\nbar.legend([\"Skewness: {:.2f}\".format(dataset['SalePrice'].skew())])\nplt.show()","a6c77f7a":"dataset_2 = dataset.drop(columns='SalePrice')","101e7f1c":"dataset_2.shape","d9432902":"dataset_2.corrwith(dataset['SalePrice']).plot.bar(\n    figsize=(16,9), title='Correlated with SalePrice', grid=True\n)","a7486ef5":"# heatmap\nplt.figure(figsize=(25, 25))\nax = sns.heatmap(data=dataset.corr(), cmap='coolwarm', annot=True, linewidths=2)","028f0c7d":"high_corr = dataset.corr()","930ea515":"high_corr_features = high_corr.index[abs(high_corr['SalePrice']) > 0.5]","6fb602c8":"high_corr_features","6b11c72f":"len(high_corr_features)","9ba2b2b4":"# heatmap\nplt.figure(figsize=(16,9))\nax = sns.heatmap(data=dataset[high_corr_features].corr(), cmap='coolwarm', annot=True, linewidths=2)","d85574d2":"dataset.shape","64991364":"# categorical columns\ndataset.select_dtypes(include='object').columns","91607946":"len(dataset.select_dtypes(include='object').columns)","9c0ba1a3":"dataset = pd.get_dummies(data=dataset, drop_first=True)","883b5e63":"dataset.shape","0f4c2d41":"# categorical columns\ndataset.select_dtypes(include='object').columns","bbf74c57":"len(dataset.select_dtypes(include='object').columns)","1740007c":"# independ variables \/ matrix of features\nx = dataset.drop(columns='SalePrice')","be5094ea":"# target variable \/ dependent variable\ny = dataset['SalePrice']","d2e4d83c":"from sklearn.model_selection import train_test_split","4e75eb68":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)","91fe3565":"x_train.shape","a9da1984":"y_train.shape","b294acae":"x_test.shape","706e34bb":"y_test.shape","73f8f249":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test = sc.transform(x_test)","89f47042":"x_train","e4770719":"x_test","5e20dd57":"from sklearn.linear_model import LinearRegression\nregressor_mlr = LinearRegression()\nregressor_mlr.fit(x_train, y_train)","bd232855":"y_pred = regressor_mlr.predict(x_test)","d452422a":"from sklearn.metrics import r2_score","c881b71f":"r2_score(y_test, y_pred)","2c8aa855":"from sklearn.ensemble import RandomForestRegressor\nregressor_rf = RandomForestRegressor()\nregressor_rf.fit(x_train, y_train)","3133f47f":"y_pred = regressor_rf.predict(x_test)","14c99300":"from sklearn.metrics import r2_score\nr2_score(y_test, y_pred)","99cf9cd1":"from xgboost import XGBRFRegressor\nregressor_xgb = XGBRFRegressor()\nregressor_xgb.fit(x_train, y_train)","ada2d8de":"    y_pred = regressor_xgb.predict(x_test)","d9cc102c":"from sklearn.metrics import r2_score\nr2_score(y_test, y_pred)","05494733":"from sklearn.model_selection import RandomizedSearchCV","ea50a387":"parameters = {\n    'n_estimators':[200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000],\n    'max_depth':[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, None],\n    'min_samples_split':[2, 5, 10],\n    'min_samples_leaf':[1, 2, 4],\n    'max_features':['auto', 'sqrt'],\n    'bootstrap':[True, False]    \n}","21103115":"parameters","e5224d77":"random_cv = RandomizedSearchCV(estimator=regressor_rf, param_distributions=parameters, n_iter=50, cv=5,\n                               verbose=2, n_jobs=-1, random_state=0)","de81f52b":"random_cv.fit(x_train, y_train)","ddd9cc0e":"random_cv.best_estimator_","201b4b82":"random_cv.best_params_","1cb689ac":"from sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse',\n                      max_depth=50, max_features='sqrt', max_leaf_nodes=None,\n                      max_samples=None, min_impurity_decrease=0.0,\n                      min_impurity_split=None, min_samples_leaf=1,\n                      min_samples_split=2, min_weight_fraction_leaf=0.0,\n                      n_estimators=1200, n_jobs=None, oob_score=False,\n                      random_state=None, verbose=0, warm_start=False)\nregressor.fit(x_train, y_train)","51b2574d":"y_pred = regressor.predict(x_test)","025f6339":"from sklearn.metrics import r2_score\nr2_score(y_test, y_pred)","e646a48b":"Importing the libraries and dataset","0035c58b":"**Add columns mode to categorical columns**","92a86d32":"**Splitting the dataset**","ac892d52":"**1) Multiple linear regression**","22619d26":"**Add columns mean to numerical columns**","72195b2a":"**Correlation matrix**","a6e3597c":"**Distplot**","c1ff1515":"**Feature scaling**","e2490531":"Data exploration","636f5349":"**Part 4: Final model (Random forest regressor)**","44384769":"**Part 2: Building the model**","ac8b5abd":"**Dealing with the categorical values**","2790f91e":"# Kernal is still under development!","885a5d5e":"If you have any suggestion please provide in comment section. Thank You!","06246fc3":"**Part 3: Hyper parameter tuning**","3d05f3ec":"**3) XGBoost regression**","43c25ec8":"**2) Random forest regression**","d090fa6f":"Dealing with null values"}}