{"cell_type":{"439c0864":"code","0a8b4a86":"code","e97e4889":"code","247e794c":"code","c802ab0b":"code","6d03c0c4":"code","5657774e":"code","fe02d365":"code","81c7b063":"code","9ddae439":"code","1e0ab1f7":"code","79ec65a4":"code","849cb40a":"code","8a098281":"code","65b68555":"code","1d0cc6c1":"code","846fc1f5":"code","4078d8f9":"code","46fb57e5":"code","319eb2c6":"code","c56e5e81":"code","410c191c":"code","3c5c7505":"markdown","1b75d21d":"markdown"},"source":{"439c0864":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","0a8b4a86":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom skimage.transform import rotate, resize\nimport tensorflow as tf","e97e4889":"## Create Function for Sampling and add data to DataFrame to fix imbalance category\ndef sampling_add_Xy(X, y):\n  diff = y[y == 0].shape[0] - y[y == 1].shape[0]\n  ind_one = np.where(y == 1)[0]\n  sampling_ind = np.random.choice(ind_one, diff)\n  X_to_add = X[sampling_ind]\n  y_to_add = y[sampling_ind]\n  X = np.append(X, X_to_add, axis = 0)\n  y = np.append(y, y_to_add, axis = 0)\n  return X, y","247e794c":"## Import Dataset\ntrn_set = pd.read_csv(\"..\/input\/super-ai-image-classification\/train\/train\/train.csv\")\n## Read Image\npath = '..\/input\/super-ai-image-classification\/train\/train\/images\/'\nfn = trn_set['id']\ntrn_set['path_fn'] = path + fn\ntrn_set['img'] = trn_set['path_fn'].apply(lambda x: plt.imread(x))\ntrn_set['img'] = trn_set['img'].apply(lambda x: resize(x, (224,224)))","c802ab0b":"trn_set.groupby(by = 'category').count()","6d03c0c4":"X = np.array(trn_set['img'].to_list())\ny = np.array(trn_set['category'].to_list())\n#y = tf.keras.utils.to_categorical(y, num_classes = 2)","5657774e":"## Train, Test Split\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1973)\nprint(X_train.shape, y_train.shape)","fe02d365":"## Oversampling to balance classes\nX_train, y_train = sampling_add_Xy(X_train, y_train)\nprint(X_train.shape, y_train.shape)","81c7b063":"## DenseNet121 - 3 epoch = 20\ndensenet = tf.keras.applications.densenet.DenseNet121(include_top = False, weights = 'imagenet', input_shape = (224, 224, 3),\n                                                     pooling = 'max')\n# fit output\nx = tf.keras.layers.Flatten()(densenet.output)\nx = tf.keras.layers.Dropout(rate = 0.8)(x)\nx = tf.keras.layers.Dense(3715, activation='relu')(x)\nx = tf.keras.layers.Dropout(rate = 0.7)(x)\nx = tf.keras.layers.Dense(2700, activation='relu')(x)\nx = tf.keras.layers.Dropout(rate = 0.6)(x)\nx = tf.keras.layers.Dense(300, activation='relu')(x)\nx = tf.keras.layers.Dropout(rate = 0.5)(x)\nx = tf.keras.layers.Dense(2, activation='softmax')(x)\nmodel = tf.keras.Model(densenet.input, x)\nmodel.compile(loss='sparse_categorical_crossentropy', optimizer= tf.keras.optimizers.Adam(lr=0.0001),metrics=['accuracy'])\nmodel.summary()","9ddae439":"## Data Augmentation\ndatagen = tf.keras.preprocessing.image.ImageDataGenerator(\n    #featurewise_center=True,\n    #featurewise_std_normalization=True,\n    rotation_range=20,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True)\n\ndatagen.fit(X_train)\n## fits the model on batches with real-time data augmentation:\nhistory = model.fit(datagen.flow(X_train, y_train, batch_size = 32),\n          steps_per_epoch = len(X_train) \/ 32, epochs = 42, validation_data = (X_test, y_test))","1e0ab1f7":"## version1\n#model.compile(loss='sparse_categorical_crossentropy', optimizer= tf.keras.optimizers.Adam(lr=1e-5),metrics=['accuracy'])\n#history = model.fit(X_train, y_train, epochs= 50, validation_data = (X_test,y_test))\n\n# summarize history for accuracy\n#plt.plot(history.history['accuracy'])\n#plt.plot(history.history['val_accuracy'])\n#plt.title('model accuracy')\n#plt.ylabel('accuracy')\n#plt.xlabel('epoch')\n#plt.legend(['train', 'test'], loc='upper left')\n#plt.show()\n# summarize history for loss\n#plt.plot(history.history['loss'])\n#plt.plot(history.history['val_loss'])\n#plt.title('model loss')\n#plt.ylabel('loss')\n#plt.xlabel('epoch')\n#plt.legend(['train', 'test'], loc='upper left')\n#plt.show()","79ec65a4":"# summarize history for accuracy\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n# summarize history for loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","849cb40a":"y_hat = model.predict(X_test)\n\nfrom sklearn.metrics import f1_score\n#y_hat_trnf = y_hat.round()\ny_hat_trnf = y_hat.argmax(axis=1)\n\nF_measure = f1_score(y_test, y_hat_trnf)\nprint(\"F1 :\", F_measure)","8a098281":"## Save Model\nimport pickle\n\nPkl_Filename = \"DensNet121_1.pkl\"  \nwith open(Pkl_Filename, 'wb') as file:  \n    pickle.dump(model, file)\n","65b68555":"## Import Test Set\nimport pathlib\n\ntest_set = []\nfnames = []\npath = pathlib.Path(\"..\/input\/super-ai-image-classification\/val\/val\/images\")\npath = path.glob(\"*.jpg\")\n\nfor imagepath in path:\n        fname = os.path.basename(str(imagepath))\n        fnames.append(fname)\n        img = plt.imread(str(imagepath))\n        img = resize(img,(224,224))\n        test_set.append(img)\n\ntest_set = np.array(test_set)","1d0cc6c1":"test_set.shape","846fc1f5":"y_hat_submission = model.predict(test_set)\ny_hat_submission = y_hat_submission.argmax(axis=1)","4078d8f9":"## Create Submission DataFrame\nsubmission_df = pd.DataFrame({'id': fnames,\n              'category':y_hat_submission})\n## Export .csv file\nsubmission_df.to_csv('val_final.csv', index = False)","46fb57e5":"## VGG16\nvgg = tf.keras.applications.vgg16.VGG16(include_top = False, weights = 'imagenet', input_shape = (224, 224, 3))\n# fit output\nx = tf.keras.layers.Flatten()(vgg.output)\nx = tf.keras.layers.Dropout(rate = 0.8)(x)\nx = tf.keras.layers.Dense(3715, activation='relu')(x)\nx = tf.keras.layers.Dropout(rate = 0.5)(x)\nx = tf.keras.layers.Dense(2700, activation='relu')(x)\nx = tf.keras.layers.Dropout(rate = 0.5)(x)\nx = tf.keras.layers.Dense(300, activation='sigmoid')(x)\nx = tf.keras.layers.Dropout(rate = 0.5)(x)\nx = tf.keras.layers.Dense(2, activation='softmax')(x)\nmodel = tf.keras.Model(vgg.input, x)\nmodel.compile(loss='sparse_categorical_crossentropy', optimizer= tf.keras.optimizers.Adam(lr=0.0001),metrics=['accuracy'])\nmodel.summary()","319eb2c6":"## DenseNet121 - F1_submision0.84, F1 notebook 0.82\ndensenet = tf.keras.applications.densenet.DenseNet121(include_top = False, weights = 'imagenet', input_shape = (224, 224, 3),\n                                                     pooling = 'max')\n# fit output\nx = tf.keras.layers.Flatten()(densenet.output)\nx = tf.keras.layers.Dropout(rate = 0.8)(x)\nx = tf.keras.layers.Dense(3715, activation='relu')(x)\nx = tf.keras.layers.Dropout(rate = 0.5)(x)\nx = tf.keras.layers.Dense(2700, activation='relu')(x)\nx = tf.keras.layers.Dropout(rate = 0.5)(x)\nx = tf.keras.layers.Dense(300, activation='sigmoid')(x)\nx = tf.keras.layers.Dropout(rate = 0.5)(x)\nx = tf.keras.layers.Dense(2, activation='softmax')(x)\nmodel = tf.keras.Model(densenet.input, x)\nmodel.compile(loss='sparse_categorical_crossentropy', optimizer= tf.keras.optimizers.Adam(lr=0.0001),metrics=['accuracy'])\nmodel.summary()","c56e5e81":"## DenseNet121 - F1 notebook 81\ndensenet = tf.keras.applications.densenet.DenseNet121(include_top = False, weights = 'imagenet', input_shape = (224, 224, 3),\n                                                     pooling = 'max')\n# fit output\nx = tf.keras.layers.Flatten()(densenet.output)\nx = tf.keras.layers.Dropout(rate = 0.8)(x)\nx = tf.keras.layers.Dense(3715, activation='relu')(x)\nx = tf.keras.layers.Dropout(rate = 0.5)(x)\nx = tf.keras.layers.Dense(2700, activation='relu')(x)\nx = tf.keras.layers.Dropout(rate = 0.5)(x)\nx = tf.keras.layers.Dense(300, activation='relu')(x)\nx = tf.keras.layers.Dropout(rate = 0.5)(x)\nx = tf.keras.layers.Dense(2, activation='softmax')(x)\nmodel = tf.keras.Model(densenet.input, x)\nmodel.compile(loss='sparse_categorical_crossentropy', optimizer= tf.keras.optimizers.Adam(lr=0.0001),metrics=['accuracy'])\nmodel.summary()\n## use epoch = 40","410c191c":"## DenseNet121 - 3 epoch = 20 F1 notebook \ndensenet = tf.keras.applications.densenet.DenseNet121(include_top = False, weights = 'imagenet', input_shape = (224, 224, 3),\n                                                     pooling = 'max')\n# fit output\nx = tf.keras.layers.Flatten()(densenet.output)\nx = tf.keras.layers.Dropout(rate = 0.8)(x)\nx = tf.keras.layers.Dense(3715, activation='relu')(x)\nx = tf.keras.layers.Dropout(rate = 0.7)(x)\nx = tf.keras.layers.Dense(2700, activation='relu')(x)\nx = tf.keras.layers.Dropout(rate = 0.6)(x)\nx = tf.keras.layers.Dense(300, activation='relu')(x)\nx = tf.keras.layers.Dropout(rate = 0.5)(x)\nx = tf.keras.layers.Dense(2, activation='softmax')(x)\nmodel = tf.keras.Model(densenet.input, x)\nmodel.compile(loss='sparse_categorical_crossentropy', optimizer= tf.keras.optimizers.Adam(lr=0.0001),metrics=['accuracy'])\nmodel.summary()","3c5c7505":"# **For Submission**","1b75d21d":"# Model Backup"}}