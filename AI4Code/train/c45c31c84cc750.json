{"cell_type":{"67121743":"code","ca7de581":"code","c00f4857":"code","ab8d6300":"code","4dcb50f4":"code","c88611d5":"code","e6dcc708":"code","413f354f":"code","b4f2ab00":"code","386e907c":"code","b8baa343":"code","4bd5fa13":"code","27d02a0f":"code","a733fd78":"code","a1994695":"code","5880528d":"code","cbbc644a":"code","41487a8c":"code","f45f89e7":"code","694ca62e":"code","f513c364":"code","c3bde850":"code","ab54a006":"code","d2db966c":"code","71993bad":"code","3c6a34ef":"code","beca6de8":"code","47cae221":"code","56ad0d96":"code","118cda55":"code","c7c97706":"code","9268ce4f":"code","230c9e77":"code","75a145f7":"code","02c8e8bf":"code","a49226d4":"code","c9ea69ae":"code","9fd049db":"code","42dbec60":"code","0ff33654":"code","cc7f0c83":"code","8e7627ee":"code","e5c03fd2":"code","d7398e7f":"code","ea7ebea7":"code","bbaaa735":"code","f5b391f4":"code","02317101":"code","66a34539":"code","242aed88":"code","058f7391":"code","8a454374":"code","cbd57e64":"code","3cb79aef":"code","57525434":"code","a622c6dc":"code","54d40061":"code","24371458":"code","cee4eabc":"code","4631e88e":"code","1d9a797e":"code","94d0f7ab":"code","acca3d43":"code","898a9bb8":"code","8031b9ce":"code","ab1417ca":"code","54dbe111":"code","a5ddca48":"code","206aa7ca":"code","8455b682":"code","a27e1664":"code","5cc38dac":"code","5067138d":"code","eaa3194d":"code","85314b2d":"code","6895924a":"code","b08b1ba6":"code","639a871b":"code","6c5c7f6e":"code","68054544":"code","00c528a0":"code","ba9187b7":"code","7652117a":"code","61a6c0b0":"code","2205b27e":"code","b39fb071":"code","99ec88a6":"code","0b7abcf7":"code","a8821578":"code","2be92000":"markdown","8818e146":"markdown","caec76b2":"markdown","0c2a5a3e":"markdown","5b637bcf":"markdown","e80522ae":"markdown","ab65fba8":"markdown","ccae0638":"markdown","5966e97e":"markdown","a63da467":"markdown","0311bc59":"markdown","3653b070":"markdown","2b181600":"markdown","99abbae7":"markdown","125acb1f":"markdown","7aa13f7f":"markdown","1d6dbce1":"markdown","dc80d462":"markdown","d7aa55fc":"markdown","1de96c1b":"markdown","93438f22":"markdown","ab53af94":"markdown","ca854213":"markdown","3a2117b2":"markdown","e6c7a54c":"markdown","44d649fb":"markdown","010ce17b":"markdown","8a20f7d9":"markdown","adaa2376":"markdown","a98d96cc":"markdown","380e21c5":"markdown","74e312bf":"markdown","0cd02b01":"markdown","3e1419ba":"markdown","a14feb2e":"markdown","4f575d7d":"markdown","4ef895c7":"markdown","48db35ff":"markdown","963a8bbe":"markdown","26b0b38c":"markdown","fdd476f7":"markdown","c48499d7":"markdown","a6ce1cf2":"markdown","579482dd":"markdown","a8323f5a":"markdown","7e7b0857":"markdown","fff76910":"markdown"},"source":{"67121743":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid')\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ca7de581":"train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_PassengerId = test_df['PassengerId']","c00f4857":"train_df.columns","ab8d6300":"train_df.head()","4dcb50f4":"train_df.describe()","c88611d5":"train_df.info()","e6dcc708":"def bar_plot(variable):\n    \"\"\"\n        input: variable ex: 'Sex'\n        output: bar plot & value count\n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    #count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    #visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))\n    ","413f354f":"category1 = [\"Survived\", \"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)","b4f2ab00":"category2 = [\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","386e907c":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distrubition with hist\".format(variable))\n    plt.show()","b8baa343":"numericVar = [\"Fare\", \"Age\", \"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","4bd5fa13":"# Pclass vs Survived \ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)","27d02a0f":"train_df[[\"Pclass\",\"Survived\"]]","a733fd78":"# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)","a1994695":"# Sibsp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)","5880528d":"# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)","cbbc644a":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","41487a8c":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","f45f89e7":"# drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop = True)","694ca62e":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)","f513c364":"train_df.head()","c3bde850":"train_df.columns[train_df.isnull().any()]","ab54a006":"train_df.isnull().sum()","d2db966c":"train_df[train_df[\"Embarked\"].isnull()]","71993bad":"train_df.boxplot(column=\"Fare\",by = \"Embarked\")\nplt.show()","3c6a34ef":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","beca6de8":"train_df[train_df[\"Fare\"].isnull()]","47cae221":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","56ad0d96":"train_df[train_df[\"Fare\"].isnull()]","118cda55":"list1 = [\"SibSp\", \"Parch\", \"Age\", \"Fare\", \"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot = True, fmt = \".2f\")\nplt.show()","c7c97706":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","9268ce4f":"g = sns.factorplot(x = \"Parch\", y = \"Survived\", kind = \"bar\", data = train_df, size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","230c9e77":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","75a145f7":"g = sns.FacetGrid(train_df, col = \"Survived\")\ng.map(sns.distplot, \"Age\", bins = 25)\nplt.show()","02c8e8bf":"g = sns.FacetGrid(train_df, col = \"Survived\", row = \"Pclass\", size = 3)\ng.map(plt.hist, \"Age\", bins = 25)\ng.add_legend()\nplt.show()","a49226d4":"g = sns.FacetGrid(train_df, row = \"Embarked\", size = 2)\ng.map(sns.pointplot, \"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","c9ea69ae":"g = sns.FacetGrid(train_df, row = \"Embarked\", col = \"Survived\", size = 2.5)\ng.map(sns.barplot, \"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","9fd049db":"train_df[train_df[\"Age\"].isnull()]","42dbec60":"sns.factorplot(x = \"Sex\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","0ff33654":"sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Pclass\",data = train_df, kind = \"box\")\nplt.show()","cc7f0c83":"sns.factorplot(x = \"Parch\", y = \"Age\", data = train_df, kind = \"box\")\nsns.factorplot(x = \"SibSp\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","8e7627ee":"#train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]","e5c03fd2":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(), annot = True)\nplt.show()","d7398e7f":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) &(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med\n","ea7ebea7":"train_df[train_df[\"Age\"].isnull()]","bbaaa735":"train_df[\"Name\"].head(10)","f5b391f4":"name = train_df[\"Name\"]  #strip gereksiz \u015feyleri siliyor.\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name] #virg\u00fclden sonra sonuncu eleman [-1], noktadan \u00f6nce string [0].","02317101":"train_df[\"Title\"].head(10)","66a34539":"sns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","242aed88":"# convert to categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]\ntrain_df[\"Title\"].head(20)","058f7391":"sns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","8a454374":"g = sns.factorplot(x = \"Title\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","cbd57e64":"train_df.drop(labels = [\"Name\"], axis = 1, inplace = True)","3cb79aef":"train_df.head()","57525434":"train_df = pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()","a622c6dc":"train_df.head()","54d40061":"train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1 #+1 mean is a person who doesn't have any parents and children.","24371458":"train_df.head()","cee4eabc":"g = sns.factorplot(x = \"Fsize\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()\n","4631e88e":"train_df[\"family_size\"] = [1 if i < 5 else 0 for i in train_df[\"Fsize\"]]","1d9a797e":"train_df.head(10)","94d0f7ab":"sns.countplot(x = \"family_size\", data = train_df)\nplt.show()","acca3d43":"g = sns.factorplot(x = \"family_size\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","898a9bb8":"train_df = pd.get_dummies(train_df, columns= [\"family_size\"])\ntrain_df.head()","8031b9ce":"train_df[\"Embarked\"].head()","ab1417ca":"sns.countplot(x = \"Embarked\", data = train_df)\nplt.show()","54dbe111":"train_df = pd.get_dummies(train_df, columns=[\"Embarked\"])\ntrain_df.head()","a5ddca48":"train_df[\"Ticket\"].head(20)","206aa7ca":"a = \"A\/5. 2151\"\na.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0]","8455b682":"tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","a27e1664":"train_df[\"Ticket\"].head(20)","5cc38dac":"train_df.head()","5067138d":"train_df = pd.get_dummies(train_df, columns= [\"Ticket\"], prefix = \"T\") #ticket _ olu\u015fturma t_ \u015feklinde olu\u015ftur.\ntrain_df.head(10)","eaa3194d":"sns.countplot(x = \"Pclass\", data = train_df)\nplt.show()","85314b2d":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns= [\"Pclass\"])\ntrain_df.head()","6895924a":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns=[\"Sex\"])\ntrain_df.head()","b08b1ba6":"train_df.drop(labels = [\"PassengerId\", \"Cabin\"], axis = 1, inplace = True)","639a871b":"train_df.columns","6c5c7f6e":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","68054544":"train_df_len","00c528a0":"test = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"],axis = 1, inplace = True)","ba9187b7":"test.head()","7652117a":"train = train_df[:train_df_len]\nX_train = train.drop(labels = \"Survived\", axis = 1)\ny_train = train[\"Survived\"]\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.33, random_state = 42)\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","61a6c0b0":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nacc_log_train = round(logreg.score(X_train, y_train)*100,2) \nacc_log_test = round(logreg.score(X_test,y_test)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","2205b27e":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),  #decision tree parameter\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],                     #support vector parameter\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],                #random forest parameter\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),             #logistic regression parameter\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","b39fb071":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1) #our code runs parallel (n_jobs)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","99ec88a6":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","0b7abcf7":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(X_train, y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","a8821578":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","2be92000":"* Age is not correlated with sex but it is correlated with parch, sibsp and pclass.","8818e146":"<a id = '23'><\/a>\n\n## Family Size","caec76b2":"<a id = '31'><\/a>\n## Simple Logistic Regression","0c2a5a3e":"<a id = '4'><\/a>\n## Categorical Variable","5b637bcf":"<a id= '21'><\/a>\n\n# Feature Engineering","e80522ae":"<a id = '19'><\/a>\n## Embarked -- Sex -- Fare -- Survived","ab65fba8":"# Introduction\nThe sinking of Titanic is one of the most notorious shipwrecks in the history. In 1992 during her voyage, the titanic sank after colliding with an iceberg, killing 1582 out of 2224 passengers and crew.\n\n<font color = 'orange'>\nContent:\n    \n1. [Load and Check Data](#1)\n2. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable](#4)\n        * [Numerical Variable](#5)\n3. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n1. [Visualization](#11)\n    * [Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived](#12)\n    * [SibSp -- Survived](#13)\n    * [Parch -- Survived](#14)\n    * [Pclass -- Survived](#15)\n    * [Age -- Survived](#16)\n    * [Pclass -- Survived -- Age](#17)\n    * [Embarked -- Sex -- Pclass -- Survived](#18)\n    * [Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill Missing: Age Feature](#20)\n1. [Feature Engineering](#21)\n    * [Name -- Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop Passenger ID and Cabin](#28)\n1.  [Modeling](#29)\n    * [Train - Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#32)\n    * [Ensemble Modeling](#33)\n    * [Prediction and Submission](#34)","ccae0638":"<a id = '34'><\/a>\n## Prediction and Submission","5966e97e":"<a id = '33'><\/a>\n## Ensemble Modeling","a63da467":"<a id = '7'><\/a>\n# Outlier Detection","0311bc59":"<a id = '29'><\/a>\n# Modeling","3653b070":"<a id = '11'><\/a>\n\n# Visualization","2b181600":"* Female passengers have much better survival rate than males.\n* males have better surv\u015fval rate in pclass 3 in C.\n* embarked and sex will be used in training.","99abbae7":"<a id = '13'><\/a>\n## SibSp -- Survived\n","125acb1f":"<a id = '25'><\/a>\n## Ticket","7aa13f7f":"* Passsengers who pay higher fare have better survival. Fare can be used as categorical for training.\n","1d6dbce1":"<a id = '28'><\/a>\n## Drop Passenger ID and Cabin","dc80d462":"* Sex is not informative for age prediction, age distribution seems to be same.","d7aa55fc":"<a id = '14'><\/a>\n## Parch -- Survived","1de96c1b":"<a id = '22'><\/a>\n## Name -- Title","93438f22":"* float64(2): Fare and Age\n* int64(5): Pclass, sibsp, parch, passengerId and survived\n* object(5): cabin, embarked, ticket, name and sex","ab53af94":"<a id = '6'><\/a>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex -Survived\n* SibSp - Survived\n* Parch - Survived","ca854213":"<a id = '32'><\/a>\n## Hyperparameter Tuning -- Grid Search -- Cross Validation\n\nWe will compare 5 ml classifier and evaluate mean accuracy of each of them by stratified cross validation.\n\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","3a2117b2":"<a id = '16'><\/a>\n## Age -- Survived","e6c7a54c":"<a id = '9'><\/a>\n\n## Find Missing Value\n\n   * Embarked has 2 missing value\n   * Fare has only 1","44d649fb":"<a id = '17'><\/a>\n## Pclass -- Survived -- Age","010ce17b":"<a id = '2'><\/a>\n# Variable Description\n<font color = 'blue'>1.<\/font> PassengerId: unique id number to each passenger\n<font color = 'blue'>2.<\/font> Survived: passenger survive(1) or died(0)\n<font color = 'blue'>3.<\/font> Pclass: passenger class \n<font color = 'blue'>4.<\/font> Name: name \n<font color = 'blue'>5.<\/font> Sex: gender of passenger \n<font color = 'blue'>6.<\/font> Age: age of passenger\n<font color = 'blue'>7.<\/font> SibSp: number of siblings\/spouses\n<font color = 'blue'>8.<\/font> Parch: number of parents\/children\n<font color = 'blue'>9.<\/font> Ticket: ticket number\n<font color = 'blue'>10.<\/font> Fare: amount of money spent on ticket\n<font color = 'blue'>11.<\/font> Cabin: cabin category \n<font color = 'blue'>12.<\/font> Embarked: port where passenger embarked(C = Cherbourg, Q = Queenstown, S = Southampton)\n      ","8a20f7d9":"Small families have more chance to survive than large families.","adaa2376":"<a id = '8'><\/a>\n# Missing Value\n* Find Missing Value\n* Fill Missing Value","a98d96cc":"<a id = '1'><\/a>\n# Load and Check Data","380e21c5":"* Having a lot of SibSp have less chance to survive.\n* if sibsp == 0 or 1 or 2, passenger has more chance to survive\n* we can consider a new feature describing these categories.\n","74e312bf":"* age <= 10 has a high survival rate,\n* oldest passengers (80) survived,\n* large number of 20 years old did not survive,\n* most passengers are in 15-35 age range,\n* use age feature in training\n* use age distribution for missing value of age","0cd02b01":"* Sibsp and parch can be used for new feature extraction with th = 3\n* Small familes have more chance to survive.\n* There is a std in survival of passenger with parch = 3\n","3e1419ba":"<a id = '20'><\/a>\n## Fill Missing: Age Feature","a14feb2e":"<a id = '30'><\/a>\n## Train - Test Split","4f575d7d":"<a id = '18'><\/a>\n## Embarked -- Sex -- Pclass -- Survived","4ef895c7":"* pclass is important feature for model training.","48db35ff":"<a id ='15'><\/a>\n## Pclass -- Survived","963a8bbe":"<a id = '5'><\/a>\n## Numerical Variable","26b0b38c":"<a id = '10'><\/a>\n## Fill Missing Value\n\n* Embarked has 2 missing value\n* Fare has only 1","fdd476f7":"Fare feature seems to have correlation with survived feature (0.26).","c48499d7":"<a id = '27'><\/a>\n## Sex","a6ce1cf2":"<a id = '12'><\/a>\n## Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived","579482dd":"<a id = '26'><\/a>\n## Pclass","a8323f5a":"* 1st class passengers are older than 2nd, and 2nd is older than 3rd class.","7e7b0857":"<a id = '24'><\/a>\n ## Embarked","fff76910":"<a id = '3'><\/a>\n# Univariate Variable Analysis\n* Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n* Numerical Variable: Age, PassengerId and Fare"}}