{"cell_type":{"09998d92":"code","481ee080":"code","8724b1bd":"code","f9e0c77d":"code","a7ddb52f":"code","27114e69":"code","5d24212e":"code","f4e63864":"code","f8d07f0a":"code","d82e90ca":"code","34fef810":"code","6421d0dd":"code","f26c518b":"code","adf77664":"code","e2eb3fab":"code","da4da153":"code","0d923f03":"code","062f7596":"markdown","c2e7de53":"markdown","fbf313bc":"markdown","4f7bd0d4":"markdown","2229018c":"markdown","ded6edfb":"markdown"},"source":{"09998d92":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom itertools import chain\n\n%matplotlib inline\n\nREDUCED = False # Reduce the data size for development and testing","481ee080":"def clean_train_data(news_df, market_df):\n    '''Clean and preprocess the news and market data for training.\n    \n    Parameters\n    ----------\n    news_df : dataframe\n        See https:\/\/www.kaggle.com\/c\/two-sigma-financial-news\/data for full description of the dataframe.\n    market_df : dataframe\n        See https:\/\/www.kaggle.com\/c\/two-sigma-financial-news\/data for full description of the dataframe.\n    \n    Returns\n    -------\n    dataframe \n        Cleaned data ready to be fed to the model.\n    \n    '''\n    # assetCode, time, volume, open, returnsOpenPrevMktres1, \n    # returnsOpenPrevMkres10, returnsOpenNextMktres10\n    # sentimentNegative, sentimentNeutral, sentimentPositive\n    cols = ['assetCode', 'time', 'volume', 'open', 'returnsOpenPrevMktres1', \n            'returnsOpenPrevMkres10', 'returnsOpenNextMktres10']\n    cleaned_df = market_df.loc[cols]\n    \n    return None","8724b1bd":"#TODO: Add cleaned data specifications\n#TODO: Define Returns\ndef train_model(train_df):\n    '''Train the model using the given trianing data.\n    \n    Parameters\n    ----------\n    train_data : dataframe\n        Cleaned data. (Specifications)\n        \n    Returns\n    -------\n\n    '''\n    \n    return None","f9e0c77d":"from kaggle.competitions import twosigmanews\nenv = twosigmanews.make_env()","a7ddb52f":"(market_train_df, news_train_df) = env.get_training_data()\n\nif REDUCED:\n    market_train_df = market_train_df.tail(100_000)\n    news_train_df = news_train_df.tail(300_000)","27114e69":"# Select columns and drop NA\ncols = ['assetCode', 'time', 'volume', 'open', 'returnsOpenPrevMktres1', \n        'returnsOpenPrevMktres10', 'returnsOpenNextMktres10']\nmarket_train_df = market_train_df.loc[:,cols]\nmarket_train_df.dropna(inplace=True)","5d24212e":"# Select columns and drop NA\ncols = ['time','assetCodes', 'sentimentNegative', 'sentimentNeutral', 'sentimentPositive']\nnews_train_df = news_train_df.loc[:,cols]\nnews_train_df.dropna(inplace=True)","f4e63864":"# Normalize time\nmarket_train_df.loc[:, 'time'] = market_train_df.time.dt.normalize()\nnews_train_df.loc[:, 'time'] = news_train_df.time.dt.normalize()\n\n# assetCodes from String to List\nnews_train_df['assetCodes'] = news_train_df['assetCodes'].str.findall(f\"'([\\w\\.\/]+)'\")","f8d07f0a":"# Explode news on assetCodes\nassetCodes_expanded = list(chain(*news_train_df['assetCodes']))\nassetCodes_index = news_train_df.index.repeat(news_train_df['assetCodes'].apply(len))\n\nassert len(assetCodes_expanded) == len(assetCodes_index)","d82e90ca":"assetCodes_df =  pd.DataFrame({'index': assetCodes_index, 'assetCode': assetCodes_expanded})\nnews_train_df_exploded = news_train_df.merge(assetCodes_df, 'right', right_on='index', left_index=True, validate='1:m')\nnews_train_df_exploded.drop(['assetCodes', 'index'], 1, inplace=True)","34fef810":"# Compute means for same date and assetCode\nnews_agg_dict = {\n    'sentimentNegative':'mean'\n    ,'sentimentNeutral':'mean'\n    ,'sentimentPositive':'mean'\n}\nnews_train_df_agg = news_train_df_exploded.groupby(['time', 'assetCode'], as_index=False).agg(news_agg_dict)","6421d0dd":"# Merge on market data\nX = market_train_df.merge(news_train_df_agg, 'left', ['time', 'assetCode'])","f26c518b":"train_model(train_df)","adf77664":"days = env.get_prediction_days()","e2eb3fab":"import numpy as np\ndef make_random_predictions(predictions_df):\n    predictions_df.confidenceValue = 2.0 * np.random.rand(len(predictions_df)) - 1.0","da4da153":"for (market_obs_df, news_obs_df, predictions_template_df) in days:\n    make_random_predictions(predictions_template_df)\n    env.predict(predictions_template_df)\nprint('Done!')","0d923f03":"env.write_submission_file()","062f7596":"## Make predictions on test data","c2e7de53":"# Vanilla Net","fbf313bc":"## Train the model","4f7bd0d4":"## Get training data","2229018c":"## Get competition environment","ded6edfb":"## Preprocess and clean the data"}}