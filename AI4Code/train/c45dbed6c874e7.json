{"cell_type":{"f8538e8e":"code","cca47b82":"code","9d2450d6":"code","8dd6cbf1":"code","e08c0ea6":"code","a90c93c5":"code","2c297521":"code","fbf4c3e0":"code","f413c421":"code","bce635a7":"code","d86f35b5":"code","15eb4eb2":"code","84f7c4e5":"code","065a60c6":"code","62122c00":"code","57ecd29e":"code","79ebbd46":"code","81de2ea3":"code","f395ee73":"code","01cb4a9a":"code","53c67701":"code","99f21909":"code","0796a8da":"code","16686935":"code","64817def":"code","8b38bd81":"code","49cf9ef1":"code","a34698f9":"code","2c2bf017":"code","10a9d36f":"code","a1a9ca8e":"code","f02bf2df":"code","a66a3e29":"code","2474947e":"code","749056d6":"code","7363e936":"code","ed7997c3":"code","6caf5a04":"code","b829bbac":"code","60c49c95":"code","93fb3758":"code","c37f88fe":"code","68d86ad6":"code","6686a6f1":"code","491a6bd0":"code","893809fc":"code","2d44121a":"code","d3d78d39":"code","c7d53b7d":"code","b0297bb7":"code","bb0249e1":"code","69758740":"code","792d40f3":"code","7dc2c0f9":"code","101048c5":"code","95700765":"code","3a109354":"code","9e16d50d":"code","90fc317c":"code","c610ef42":"code","2915e251":"code","ddb2a218":"code","c72da131":"code","4a31e669":"markdown","d0e4c4e9":"markdown","04ea4600":"markdown","7a1d5837":"markdown","0018bee1":"markdown","67a76f9a":"markdown","075b11c2":"markdown","c4cac092":"markdown","55b83f82":"markdown","ffe5a440":"markdown","db2041b5":"markdown","7c12e87a":"markdown","89b03ebd":"markdown","35cae50e":"markdown","7a6f0286":"markdown","dc6a08b6":"markdown","a259bfff":"markdown","e3b6b8f5":"markdown","a65e3f9e":"markdown","65263b97":"markdown","fcfb18dc":"markdown","77db5d17":"markdown","d779b226":"markdown","a2c1a293":"markdown","145dba8b":"markdown","b7aefb77":"markdown","7fb7fe34":"markdown","a11c5e87":"markdown","cd5765ab":"markdown","31032bfd":"markdown","45660eb0":"markdown","13636199":"markdown","8bd67880":"markdown","b4e2b5e3":"markdown","328280a1":"markdown","acea88bc":"markdown","2cc23402":"markdown","77214aa8":"markdown","d2105841":"markdown","259b53c8":"markdown","7b8567b7":"markdown","8064718e":"markdown","e5cc4c8c":"markdown","dee918b0":"markdown","a4d5daba":"markdown"},"source":{"f8538e8e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","cca47b82":"import pandas as pd\nimport numpy as np\nfrom scipy.stats import randint as sp_randint\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings","9d2450d6":"warnings.filterwarnings(\"ignore\")","8dd6cbf1":"heart_data = pd.read_csv('..\/input\/heart.csv')","e08c0ea6":"heart_data.head()","a90c93c5":"print('Number of Rows:', heart_data.shape[0])\nprint('Number of Features:', heart_data.shape[1])","2c297521":"heart_data.info()","fbf4c3e0":"heart_data.columns = ['Age', 'Sex',  'Chest_pain_type', 'Resting_blood_pressure', 'Serum_cholestoral(mg\/dl)', 'Fasting_blood_sugar(mg\/dl)', 'Resting_ECG_results', 'Max_heart_rate'\n                    , 'Exercise_induced_angina', 'Oldpeak', 'Slope', 'No.of_major_vessels', 'thalassemia','target']","f413c421":"data_sample = heart_data.copy()","bce635a7":"data_sample['Sex'][data_sample['Sex']==1]='Male' \ndata_sample['Sex'][data_sample['Sex']==0]='Female'\n\ndata_sample['Chest_pain_type'][data_sample['Chest_pain_type'] == 1] = 'typical angina' \ndata_sample['Chest_pain_type'][data_sample['Chest_pain_type'] == 2] = 'atypical angina' \ndata_sample['Chest_pain_type'][data_sample['Chest_pain_type'] == 3] = 'non-anginal pain' \ndata_sample['Chest_pain_type'][data_sample['Chest_pain_type'] == 4] = 'asymptomatic'\n\ndata_sample['Fasting_blood_sugar(mg\/dl)'][data_sample['Fasting_blood_sugar(mg\/dl)'] == 0] = 'lower than 120mg\/ml' \ndata_sample['Fasting_blood_sugar(mg\/dl)'][data_sample['Fasting_blood_sugar(mg\/dl)'] == 1] = 'greater than 120mg\/ml'\n\ndata_sample['Resting_ECG_results'][data_sample['Resting_ECG_results'] == 0] = 'normal' \ndata_sample['Resting_ECG_results'][data_sample['Resting_ECG_results'] == 1] = 'ST-T wave abnormality' \ndata_sample['Resting_ECG_results'][data_sample['Resting_ECG_results'] == 2] = 'left ventricular hypertrophy'\n\ndata_sample['Exercise_induced_angina'][data_sample['Exercise_induced_angina'] == 0] = 'no' \ndata_sample['Exercise_induced_angina'][data_sample['Exercise_induced_angina'] == 1] = 'yes'\n\ndata_sample['Slope'][data_sample['Slope'] == 1] = 'upsloping' \ndata_sample['Slope'][data_sample['Slope'] == 2] = 'flat' \ndata_sample['Slope'][data_sample['Slope'] == 3] = 'downsloping'\n\ndata_sample['thalassemia'][data_sample['thalassemia'] == 1] = 'normal' \ndata_sample['thalassemia'][data_sample['thalassemia'] == 2] = 'fixed defect' \ndata_sample['thalassemia'][data_sample['thalassemia'] == 3] = 'reversable defect'","d86f35b5":"heart_data.head()","15eb4eb2":"def plot1():\n  plt.figure(figsize=(7, 5))\n  target_count = [len(data_sample[data_sample['target'] == 0]),len(data_sample[data_sample['target'] == 1])]\n  labels = ['No Disease', 'Disease']\n  colors = ['lightgreen', 'lightblue']\n  explode = (0.05, 0.1)\n  plt.pie(target_count, explode=explode, labels=labels, \n        colors=colors,autopct='%4.2f%%',shadow=True, startangle=45)\n  plt.title('Target Percent')\n  plt.axis('equal')\n  plt.show()  \nplot1()","84f7c4e5":"def plot2():\n  plt.figure(figsize=(7, 5))\n  sex_count = [len(data_sample[data_sample['Sex'] == 'Female']),len(data_sample[data_sample['Sex'] == 'Male'])]\n  labels = ['Female', 'Male']\n  colors = ['pink', 'orange']\n  explode = (0.05, 0.1)\n  plt.pie(sex_count, explode=explode, labels=labels, \n        colors=colors,autopct='%4.2f%%',shadow=True, startangle=80)\n  plt.title('Sex Distribution')\n  plt.axis('equal')\n  plt.show()\n  \nplot2()","065a60c6":"def plot3():\n    plt.figure(figsize=(10,6))\n    sns.distplot(data_sample['Age'])\n    plt.title('Age Distribution')\n    plt.show()\nplot3()   ","62122c00":"def plot4():\n \n    plt.figure(figsize=(30,10))\n  \n    age_bins = [20,30,40,50,60,70,80]\n    data_sample['bin_age'] = pd.cut(data_sample['Age'], bins=age_bins)\n  \n    plt.subplot(1,3,1)\n    p1 = sns.countplot(x='Sex', data=data_sample, hue='target', palette='Set2')\n    p1.set_title('Sex type vs Heart Disease')\n    \n    plt.subplot(1,3,2)\n    p2 = sns.pointplot(x='Sex', y='Age', data=data_sample, hue='target', palette='Set2')\n    p1.set_title('Sex type vs Heart Disease')\n        \n    plt.subplot(1,3,3)\n    p3 = sns.countplot(x='bin_age', data=data_sample, hue='target', palette='Set2')\n    p3.set_title('Age vs Heart Disease')\n    \nplot4()","57ecd29e":"def plot5():\n  \n    plt.figure(figsize=(26,6))\n    chol_bins = [100,150,200,250,300,350,400,450]\n    max_hr_bins = [60,80,100,120,140,160,180,200,220]\n    \n    data_sample['bin_chol'] = pd.cut(data_sample['Serum_cholestoral(mg\/dl)'], bins=chol_bins)\n    data_sample['bin_max_hr'] = pd.cut(data_sample['Max_heart_rate'], bins=max_hr_bins)\n    \n    plt.subplot(1,3,1)\n    p1 = sns.countplot(x='Chest_pain_type', data=data_sample, hue='target', palette='OrRd')\n    p1.set_title('Chest Pain type vs Heart Disease')\n        \n    plt.subplot(1,3,2)\n    p2 = sns.countplot(x='bin_chol', data=data_sample, hue='target', palette='OrRd')\n    p2.set_title('Serum_Cholestrol vs Heart Disease')\n    \n    plt.subplot(1,3,3)\n    p3 = sns.countplot(x='bin_max_hr', data=data_sample, hue='target', palette='OrRd')\n    p3.set_title('Max Heart Rate vs Heart Disease')\n    \nplot5()","79ebbd46":"def plot6():\n    plt.figure(figsize=(26,6))\n    plt.subplot(1,3,1)\n    p1 = sns.countplot(x='Fasting_blood_sugar(mg\/dl)', data=data_sample, hue='target', palette='OrRd')\n    p1.set_title('Fasting_blood_sugar vs Heart Disease')\n        \n    plt.subplot(1,3,2)\n    p2 = sns.countplot(x='Slope', data=data_sample, hue='target', palette='OrRd')\n    p2.set_title('Slope vs Heart Disease')\n    \n    plt.subplot(1,3,3)\n    p3 = sns.countplot(x='thalassemia', data=data_sample, hue='target', palette='OrRd')\n    p3.set_title('Thalessemia vs Heart Disease')\nplot6()","81de2ea3":"def plot7():\n    plt.figure(figsize=(26,6))\n    plt.subplot(1,3,1)\n    p1 = sns.countplot(x='Fasting_blood_sugar(mg\/dl)', data=data_sample, hue='target', palette='OrRd')\n    p1.set_title('Fasting_blood_sugar vs Heart Disease')\n         \n  \n    p1 = sns.countplot(x='Resting_ECG_results', data=data_sample, hue='target', palette='OrRd')\n    p1.set_title('Resting_ECG_results vs Heart Disease')\n    \nplot7()","f395ee73":"def plot8():\n    plt.figure(figsize=(26,6))\n    \n    plt.subplot(1,3,1)\n    p1 = sns.swarmplot(x='Chest_pain_type', y='Age', data=data_sample, hue='target', palette='Set2')\n    p1.set_title('Age vs Chest Pain & Heart Disease')\n        \n    plt.subplot(1,3,2)\n    p2 = sns.swarmplot(x='bin_chol', y='Age', data=data_sample, hue='target', palette='Set2')\n    p2.set_title('Age vs Serum_Cholestrol & Heart Disease')\n    \n    plt.subplot(1,3,3)\n    p3 = sns.swarmplot(x='bin_max_hr',y='Age', data=data_sample, hue='target', palette='Set2')\n    p3.set_title('Age vs  Max Heart Rate & Heart Disease')\nplot8()","01cb4a9a":"def plot9():\n    plt.figure(figsize=(26,6))\n    \n    plt.subplot(1,3,1)\n    p1 = sns.swarmplot(x='Fasting_blood_sugar(mg\/dl)', y='Age', data=data_sample, hue='target', palette='Set2')\n    p1.set_title('Age vs Fasting_blood_sugar & Heart Disease')\n        \n    plt.subplot(1,3,2)\n    p2 = sns.swarmplot(x='Slope', y='Age', data=data_sample, hue='target', palette='Set2')\n    p2.set_title('Age vs Fasting Blodd Sugar level & Heart Disease')\n    \n    plt.subplot(1,3,3)\n    p3 = sns.swarmplot(x='thalassemia',y='Age', data=data_sample, hue='target', palette='Set2')\n    p3.set_title('Age vs  Cholestral & Heart Disease')\nplot9()","53c67701":"def plot10():\n    plt.figure(figsize=(14,6))\n    p1 = sns.swarmplot(x='Resting_ECG_results', y='Age', data=data_sample, hue='target', palette='Set2')\n    p1.set_title('Fasting_blood_sugar vs Heart Disease')           \nplot10()","99f21909":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\n\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\n\n\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import metrics","0796a8da":"X = heart_data.loc[:, heart_data.columns!='target']\nX.head()","16686935":"y = heart_data.loc[:, heart_data.columns=='target']\ny.head()","64817def":"X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1, test_size=0.30, stratify=y )","8b38bd81":"print(X_train.shape)\nprint(X_test.shape)","49cf9ef1":"print(y_train.shape)\nprint(y_test.shape)","a34698f9":"def tree1():\n  \n   return DecisionTreeClassifier(random_state=1)\n  \nModel1 = tree1()\nModel1.fit(X_train,y_train)","2c2bf017":"prediction_model1 = Model1.predict(X_test)\nprint('Decision Tree accuracy score', accuracy_score(y_test, prediction_model1))","10a9d36f":"def tree2():\n  \n  dtree = DecisionTreeClassifier(random_state=1)\n  params = {'splitter':['best'],  'max_depth': range(2,60),\n             'min_samples_split': [2,3,4,5,6,7,8,9,10],\n            'max_features':['sqrt','log2',None]}\n  \n  return GridSearchCV(dtree, params, cv=10)\n\nModel2 = tree2()\nModel2.fit(X_train,y_train)","a1a9ca8e":"prediction_model2 = Model2.predict(X_test)\nprint('Decision Tree with gridsearchcv accuracy score',accuracy_score(y_test,prediction_model2))","f02bf2df":"def tree3():\n  \n  return RandomForestClassifier(random_state=1)\n  \nModel3 = tree3()\nModel3.fit(X_train,y_train)  ","a66a3e29":"prediction_model3 = Model3.predict(X_test)\nprint('Random forest accuracy score', accuracy_score(y_test,prediction_model3))","2474947e":"def tree4():\n  \n  rf = RandomForestClassifier(random_state=1)\n  params = {\"max_depth\": range(2,5),\n              \"min_samples_split\": sp_randint(2, 11),\n              \"min_samples_leaf\": sp_randint(1, 11),\n              \"bootstrap\": [True, False],\n              \"n_estimators\": [100, 400, 700, 1000, 1500],\n              \"criterion\" : [\"gini\", \"entropy\"],\n              'max_features': ['sqrt', 'log2', None]\n             }\n  n_iter = 50\n\n  return RandomizedSearchCV(rf, param_distributions = params, n_iter = n_iter, n_jobs=-1)\n  \nModel4 = tree4()\nModel4.fit(X_train,y_train)","749056d6":"prediction_model4 = Model4.predict(X_test)\nprint('Random Forest with RandomizedSearchCV accuracy score:', accuracy_score(y_test,prediction_model4))","7363e936":"print('Best Prameters:', Model4.best_params_)\nprint('Best Score:', Model4.best_score_)","ed7997c3":"modle4_matrix = pd.DataFrame()\nmodel4_matrix = pd.DataFrame(confusion_matrix(y_test, prediction_model4))\nmodel4_matrix.index = ['Actual No Disease','Actual Disease']\nmodel4_matrix.columns = ['Predicted No Disease','Predicted Disease']\nmodel4_matrix","6caf5a04":"scaler = StandardScaler().fit(X)\nX1 = scaler.transform(X)","b829bbac":"X1 = pd.DataFrame(X1)\nX1.head()","60c49c95":"X1_train,X1_test,y_train,y_test = train_test_split(X1, y, random_state=1, test_size=0.30, stratify=y)","93fb3758":" accuracy_list = []\ndef knn1():\n    for i in range(1,30):\n        model = KNeighborsClassifier(n_neighbors=i)\n        model.fit(X1_train,y_train)\n        pred = model.predict(X1_test)\n        accuracy_list.append(accuracy_score(y_test,pred))\n       \n    print(\"Max accuracy and its k value is:\", max([(v,i+1) for i, v in enumerate(accuracy_list)])) \n\nknn1()","c37f88fe":"def k_plot():\n  plt.figure(figsize=(15,6))\n  plt.plot(range(1,30), accuracy_list, linestyle='dashed', marker='o', markerfacecolor='red', markersize='10')\n  plt.xlabel('K- values')\n  plt.ylabel('Accuracy of model')\n  plt.show()\nk_plot()   ","68d86ad6":"Model5 = KNeighborsClassifier(n_neighbors = 14)\nModel5.fit(X1_train, y_train)","6686a6f1":"prediction_model5 = Model5.predict(X1_test)\nprint('KNN accuracy score:', accuracy_score(y_test,prediction_model5))","491a6bd0":"modle5_matrix = pd.DataFrame()\nmodel5_matrix = pd.DataFrame(confusion_matrix(y_test, prediction_model5))\nmodel5_matrix.index = ['Actual No Disease','Actual Disease']\nmodel5_matrix.columns = ['Predicted No Disease','Predicted Disease']\nmodel5_matrix","893809fc":"def knn2():\n  \n  knn = KNeighborsClassifier()\n  params = {'n_neighbors':range(14,20),\n          'algorithm':['auto','ball_tree'],\n          'leaf_size':2**np.arange(10),\n          'metric':['euclidean','manhattan','minkowski','chebyshev']}\n  n_iter_search = 25\n\n  return RandomizedSearchCV(knn, random_state=0, param_distributions = params, n_iter = n_iter_search, n_jobs=-1)\n  \nModel6 = knn2()\nModel6.fit(X1_train,y_train)","2d44121a":"prediction_model6 = Model6.predict(X1_test)\nprint('KNN with RandomizedSearchCV accuracy score:', accuracy_score(y_test,prediction_model6))","d3d78d39":"modle6_matrix = pd.DataFrame()\nmodel6_matrix = pd.DataFrame(confusion_matrix(y_test, prediction_model6))\nmodel6_matrix.index = ['Actual No Disease','Actual Disease']\nmodel6_matrix.columns = ['Predicted No Disease','Predicted Disease']\nmodel6_matrix","c7d53b7d":"def svc():\n  \n  return  SVC(kernel='linear')\n\nModel7 = SVC()\nModel7.fit(X1_train, y_train)","b0297bb7":"prediction_model7 = Model7.predict(X1_test)\nprint('SVC accuracy score:', accuracy_score(y_test,prediction_model7))","bb0249e1":"modle7_matrix = pd.DataFrame()\nmodel7_matrix = pd.DataFrame(confusion_matrix(y_test, prediction_model7))\nmodel7_matrix.index = ['Actual No Disease','Actual Disease']\nmodel7_matrix.columns = ['Predicted No Disease','Predicted Disease']\nmodel7_matrix","69758740":"def naive():\n      return GaussianNB()\nModel8 = GaussianNB()\nModel8.fit(X_train,y_train)","792d40f3":"prediction_model8 = Model8.predict(X_test)\nprint('Naive Bayes accuracy score:', accuracy_score(y_test,prediction_model8))","7dc2c0f9":"def logreg():\n      return LogisticRegression()\nModel9 = logreg()\nModel9.fit(X_train,y_train)","101048c5":"prediction_model9 = Model9.predict(X_test)\nprint('Logistic Regression accuracy score:', accuracy_score(y_test,prediction_model9))","95700765":"def logreg2():\n  params = {'penalty': ['l1','l2'], 'C': np.logspace(0,4,10)}\n  logr = LogisticRegression()\n  model = GridSearchCV(logr, params, cv=10, verbose=0)\n  return model\nModel10 = logreg2()\nModel10.fit(X_train,y_train)  ","3a109354":"prediction_model10 = Model10.predict(X_test)\nprint('Logistic Regression 2 accuracy score:', accuracy_score(y_test,prediction_model10))","9e16d50d":"print('Best Penalty:', Model10.best_estimator_.get_params()['penalty'])\nprint('Best C:', Model10.best_estimator_.get_params()['C'])","90fc317c":"modle10_matrix = pd.DataFrame()\nmodel10_matrix = pd.DataFrame(confusion_matrix(y_test, prediction_model10))\nmodel10_matrix.index = ['Actual No Disease','Actual Disease']\nmodel10_matrix.columns = ['Predicted No Disease','Predicted Disease']\nmodel10_matrix","c610ef42":"def accuracy():\n  dtree = accuracy_score(y_test,prediction_model2)\n  rf = accuracy_score(y_test,prediction_model4)\n  knn = accuracy_score(y_test,prediction_model5)\n  svc = accuracy_score(y_test,prediction_model7)\n  nb = accuracy_score(y_test,prediction_model8)\n  log = accuracy_score(y_test,prediction_model10)\n  \n  methods = ['Decision Tree', 'Random Forest', 'KNN', 'SVM', 'Naive Bayes', 'Logistic Regression']\n  accuracy = [dtree*100, rf*100, knn*100, svc*100, nb*100, log*100]\n  \n  plt.figure(figsize=(14,5))\n  sns.barplot(x=methods,y=accuracy)\n  plt.xlabel('Models')\n  plt.ylabel('Accuracy %')\n  plt.title('Models and Accuracy')\n  plt.show()\n  print('Respective accuracy:', accuracy)\n  \naccuracy()","2915e251":"def pre_rec():\n  \n  print('KNN')\n  print('precision_score', metrics.precision_score(y_test, prediction_model5))\n  print('Recall_score', metrics.recall_score(y_test, prediction_model5))\n  print('----------------------------------------------------------------------')\n  \n  print('Random Forest')\n  print('precision_score', metrics.precision_score(y_test, prediction_model3))\n  print('Recall_score', metrics.recall_score(y_test, prediction_model3))\n  print('----------------------------------------------------------------------')\n  \n  print('Logistic regression')\n  print('precision_score', metrics.precision_score(y_test, prediction_model10))\n  print('Recall_score', metrics.recall_score(y_test, prediction_model10))\n  print('----------------------------------------------------------------------')\n  \n  print('SVC Bayes')\n  print('precision_score', metrics.precision_score(y_test, prediction_model7))\n  print('Recall_score', metrics.recall_score(y_test, prediction_model7))\n  print('----------------------------------------------------------------------')\n  \npre_rec()","ddb2a218":"def con_matrix():\n  \n  plt.figure(figsize=(12,12))\n\n  plt.subplots_adjust(wspace = 0.5, hspace=0.2)\n\n  plt.subplot(2,2,1)\n  plt.title('KNN Confusion Matrix')\n  sns.heatmap(model5_matrix, annot=True, cmap=\"Blues\", fmt=\"d\", cbar=False)\n\n  plt.subplot(2,2,2)\n  plt.title('Random Forest Confusion Matrix')\n  sns.heatmap(model4_matrix, annot=True, cmap=\"Blues\", fmt=\"d\", cbar=False)\n\n  plt.subplot(2,2,3)\n  plt.title('Logistic regression Confusion Matrix')\n  sns.heatmap(model10_matrix, annot=True, cmap=\"Blues\", fmt=\"d\", cbar=False)\n            \n  plt.subplot(2,2,4)\n  plt.title('SVC Confusion Matrix')\n  sns.heatmap(model7_matrix, annot=True, cmap=\"Blues\", fmt=\"d\", cbar=False)\n            \n  plt.show()\n            \ncon_matrix()            ","c72da131":"def metric():\n  probs1 = Model5.predict_proba(X1_test)\n  preds1 = probs1[:,1]\n  fpr1, tpr1, threshold1 = metrics.roc_curve(y_test, preds1)\n  roc_auc1 = metrics.auc(fpr1,tpr1)\n  \n  probs2 = Model4.predict_proba(X_test)\n  preds2 = probs2[:,1]\n  fpr2, tpr2, threshold2 = metrics.roc_curve(y_test, preds2)\n  roc_auc2 = metrics.auc(fpr2,tpr2)\n  \n  probs3 = Model10.predict_proba(X_test)\n  preds3 = probs3[:,1]\n  fpr3, tpr3, threshold3 = metrics.roc_curve(y_test, preds3)\n  roc_auc3 = metrics.auc(fpr3,tpr3)\n  \n  \n  plt.figure(figsize=(14,8))\n  plt.title('Receiver Operating Characteristic')\n  plt.plot(fpr1, tpr1, label = 'AUC_KNN = %0.2f' % roc_auc1)\n  plt.plot(fpr2, tpr2, label = 'AUC_Random_Forest = %0.2f' % roc_auc2)\n  plt.plot(fpr3, tpr3, label = 'AUC_Logistic = %0.2f' % roc_auc3)\n  plt.legend(loc = 'lower right')\n  plt.plot([0, 1], [0, 1],'r--')\n  plt.ylabel('True Positive Rate')\n  plt.xlabel('False Positive Rate')\n  plt.show()\n  print('0.90 - 1.00 = excellent')\n  print('0.80 - 0.90 = good')\n  print('0.70 - 0.80 = fair')\n  print('0.60 - 0.70 = poor')\n  print('0.50 - 0.60 = fail')\n   \nmetric()","4a31e669":"**Excellent Random Forest with RandomizedSearchCV has given good accuracy.**","d0e4c4e9":"**8. Atrributes asscicated with ages vs heart disease - 1 **","04ea4600":"Male Population is higher# Therefore Males are more likely to turn up diagnosis.","7a1d5837":"**10. Atrributes asscicated with ages vs heart disease - 3 **","0018bee1":"-----------------","67a76f9a":"# ** MACHINE LEARNING**","075b11c2":"**6. Atrributes asscicated with showing heart disease - 2**","c4cac092":"-------------------\n","55b83f82":"**Model 2: Decision tree with Gridsearchcv**","ffe5a440":"**Insights:**\n\n**Figure 1 : Shows Blood Sugar level lower than 120mg\/ml has resulted in more heart disease**\n\n**Figure 2 : Shows Slope type of flat have resulted in heart disease**\n\n**Figure 3 : Shows thalassemai type of fixed defect have resulted in heart disease**","db2041b5":"----------------------","7c12e87a":"----------","89b03ebd":"**Insights:**\n\n**Figure 1 : Shows atypical angina chest pain resulted in more heart disease**\n\n**Figure 2 : ShowsCholestrol Range of 200 - 300 have resulted in heart disease**\n\n**Figure 3 : Shows Max Heart rate between 140 to 180 have resulted in heart disease**","35cae50e":"**Insights: **\n\n**Figure1 shows that Male are more likely to get heart disease**\n\n**Figure 2 shows that mean age for female with heart disease is 54 and male with heart disease is 51 **\n\n**Figure 3  shows Ages between 40 to 70 are more likely to have heart disease**\n","7a6f0286":"# **EDA**","dc6a08b6":"**Model 8: Naive_bayes**","a259bfff":"**Insights:**\n\n**Figure 1 : Important note here - Most of our observation shows Blood sugar level lower than 120mg\/ml**\n\n**Figure 2 : Distribution of slope type with ages**\n\n**Figure 3 : Important note here - Thalassemia type of fixed defect that have led to heart disease are more likely to occur for age group of 40-55**","e3b6b8f5":"**9. Atrributes asscicated with ages vs heart disease - 2 **","a65e3f9e":"-----------------","65263b97":" **1. Distribution Of target**","fcfb18dc":"**Model 4: Random Forest with RandomizedSearchCV**","77db5d17":"**Model 3: Random Forest**","d779b226":"Age seems to be somewhat normally distributed.","a2c1a293":"**4. Sex Type and Age vs Heart Disease**","145dba8b":"**Model 7: SVC**","b7aefb77":"-------------","7fb7fe34":"**Model 6: Knn with RandomizedSearchCV**","a11c5e87":"#  **Basic Insights**","cd5765ab":"**Normalizing the values for certain models**","31032bfd":"Good We have found a K value with best accuracy so far","45660eb0":"-----------------","13636199":"-----","8bd67880":"**Insights:**\n\n**Figure 1 : Important note here - Chest pain type makes an important factor for having heart disesese because most of the cases with target 1 have chest                      pain**\n\n**Figure 2 : Cholestrol level 200-250 is more among the age range 40 - 60**\n\n**Figure 3 : Max heart rate between 160-180 that have led to heart disease are more likely to occur for age group of 40-50**","b4e2b5e3":"**7. Atrributes asscicated with showing heart disease - 3**","328280a1":"**Attribute Information: **\n\n*  **age: age in years**\n\n*   **sex: sex** (1 = male; 0 = female)\n\n*   **cp: chest pain type** -- Value 1: typical angina -- Value 2: atypical angina -- Value 3: non-anginal pain -- Value 4: asymptomatic 10\n\n*  **trestbps: resting blood pressure** (in mm Hg on admission to the hospital)\n\n*   **chol: serum cholestoral** in mg\/dl\n\n*  **fbs: (fasting blood sugar > 120 mg\/dl)** (1 = true; 0 = false)\n\n*   **restecg: resting electrocardiographic results** -- Value 0: normal -- Value 1: having ST-T wave abnormality \nValue 2: showing probable or definite left ventricular hypertrophy by Estes' criteria 20 ekgmo\n\n*   ** thalach: maximum heart rate achieved**\n*  **exang: exercise induced angina **(1 = yes; 0 = no)\n\n* ** oldpeak = ST depression induced by exercise relative to rest**\n\n\n*   **slope: the slope of the peak exercise ST segment** -- Value 1: upsloping -- Value 2: flat -- Value 3: downsloping\n\n\n*   **ca: number of major vessels** (0-3) colored by flourosopy\n\n\n*   ** thal: thalassemia**-- 3 = normal; 6 = fixed defect; 7 = reversable defect\n\n*    **target:** 0(no presence) 1(presence)","acea88bc":"**Model 1 : Decision Tree **","2cc23402":"**Model 9: Logistic Regression**","77214aa8":"**5. Atrributes asscicated with showing heart disease - 1**","d2105841":"**3. Age Distribution**","259b53c8":"-----------------","7b8567b7":"------","8064718e":"**2. Distribution of Sex**","e5cc4c8c":"* No Null Values found","dee918b0":"**Model 10: Logistic Regression with Gridsearchcv**","a4d5daba":"-----------------"}}