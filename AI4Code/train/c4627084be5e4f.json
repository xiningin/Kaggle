{"cell_type":{"a3c3adab":"code","0d2e4e31":"code","7c4dee1c":"code","9d19a9b2":"code","69f5bcef":"code","8d5bc26d":"code","8ed36df3":"code","c029273e":"code","b355c39b":"code","78bdadd6":"code","07227e7b":"code","4f9d8b69":"code","d733793c":"code","7dfc0062":"code","a6fe5c4e":"code","8d9bcf6b":"code","dc4e210e":"code","936a709d":"code","5e2740e3":"code","d9651cfa":"code","dd7fae03":"code","8db37095":"code","699a2175":"code","60d160d0":"code","f4c6637f":"code","4ac0cf8c":"code","bd28e012":"code","9c0cce69":"code","0698a6b4":"code","8b86645c":"code","8ab2c202":"code","32f648cf":"code","c07289ff":"code","b4770f5d":"code","9cccdff3":"code","c912f14c":"code","455607f8":"code","603ac82d":"code","8a9b5f2b":"code","8b1ce516":"code","2c17b8ad":"code","6b3c8b80":"code","8aa548b7":"code","7124ab10":"code","cea3c3dc":"code","5d11d534":"code","9bbe4fe1":"code","d47e56de":"code","9744c038":"code","0e31056b":"code","68c31e2c":"code","9ccdf76e":"code","27c6da18":"code","7bdfe5f7":"code","9d0f3f60":"code","287238d3":"code","72fba916":"code","09b674c0":"code","426d6070":"code","22ddaa0e":"code","31b3e87b":"code","0e3ad5a7":"code","fa0e5390":"code","8f88be46":"code","98fb73ef":"code","fabbe7f8":"code","e3c114f0":"code","5e4e6dad":"code","61fd5888":"code","7473fd6c":"markdown","ce42204f":"markdown","81a92c6c":"markdown","3cf49f57":"markdown","945da56d":"markdown","5dfa9047":"markdown","1d3433f4":"markdown","a99007a4":"markdown","a86d763a":"markdown","6f9daf3a":"markdown","2ea31343":"markdown","82875a93":"markdown","22611a0a":"markdown","550453c4":"markdown","4455f77f":"markdown","941c6ff5":"markdown","39e173d7":"markdown","53f59fd7":"markdown","6f402d3a":"markdown","017d90e0":"markdown","b81bfeca":"markdown","152a721d":"markdown","6cecf878":"markdown","cb4e8eb4":"markdown","be3ae083":"markdown","b2a2ff76":"markdown","31e8cfa6":"markdown","66ad80e6":"markdown","8a2a18c2":"markdown","edb54fcf":"markdown","7a3cd13d":"markdown","d26ff56a":"markdown","b800fd85":"markdown"},"source":{"a3c3adab":"!ls ..\/working\/","0d2e4e31":"import gc # \u0441\u0431\u043e\u0440\u0449\u0438\u043a \u043c\u0443\u0441\u043e\u0440\u0430 \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043e\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\n\nwarnings.filterwarnings(\"ignore\") # \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f\npd.set_option('display.float_format', lambda x: '%.5f' % x) # \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u043c \u0440\u0435\u0436\u0438\u043c \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0447\u0438\u0441\u0435\u043b","7c4dee1c":"# path = r\"drive\/My Drive\/Colab Notebooks\/data_sales_prediction\/\"\npath = r\"..\/input\/competitive-data-science-predict-future-sales\/\"\n\nitems_cat = pd.read_csv(path + \"item_categories.csv\")\nitems = pd.read_csv(path + \"items.csv\")\ntrain = pd.read_csv(path + \"sales_train.csv\")\nsample_sub = pd.read_csv(path + \"sample_submission.csv\")\nshops = pd.read_csv(path + \"shops.csv\")\ntest = pd.read_csv(path + \"test.csv\")","9d19a9b2":"items_cat.head()","69f5bcef":"items.head()","8d5bc26d":"train.head()","8ed36df3":"sample_sub.head()","c029273e":"shops.head()","b355c39b":"test.head()","78bdadd6":"items_cat.isnull().sum()","07227e7b":"items.isnull().sum()","4f9d8b69":"train.isnull().sum()","d733793c":"shops.isnull().sum()","7dfc0062":"test.isnull().sum()","a6fe5c4e":"test_shops = test.shop_id.unique() # \u0432 train \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u044b \u0438 \u0442\u043e\u0432\u0430\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0432 test \u0432\u044b\u0431\u043e\u0440\u043a\u0435\ntrain = train[train.shop_id.isin(test_shops)] # \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u044b \u0438\u0445 \u0443\u0434\u0430\u043b\u0438\u043c\ntest_items = test.item_id.unique()\ntrain = train[train.item_id.isin(test_items)]","8d9bcf6b":"def split_city(str):\n  return str.split(sep=\" \", maxsplit=1)[0]\n\ndef split_shop(str):\n  return str.split(sep=\" \", maxsplit=1)[1]\n\ndef split_item_cat1(str):\n  return str.split(sep=\"-\", maxsplit=1)[0]\n\ndef split_item_cat2(str):\n  splitted = str.split(sep=\"-\", maxsplit=1)\n  if len(splitted) == 1:\n    return \"No info\"\n  else:\n    return splitted[1]\n\ndef prepare_data(data): # \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446 \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438\u0437 \u0441\u0442\u0430\u0440\u044b\u0445\n  full_items = items.merge(items_cat, left_on=\"item_category_id\", right_on=\"item_category_id\")\n  full_data = data.merge(shops, left_on=\"shop_id\", right_on=\"shop_id\").merge(full_items, left_on=\"item_id\", right_on=\"item_id\")\n  del full_items\n  full_data['city'] = full_data['shop_name'].apply(split_city)\n  full_data['new_shop_name'] = full_data['shop_name'].apply(split_shop)\n  full_data['item_cat1'] = full_data['item_category_name'].apply(split_item_cat1)\n  full_data['item_cat2'] = full_data['item_category_name'].apply(split_item_cat2)\n  full_data.drop(['shop_id', 'item_id', 'shop_name', 'item_name', 'item_category_id', 'item_category_name'], axis=1, inplace=True)\n  return full_data","dc4e210e":"%%time\nnew_train = prepare_data(train.copy())\nnew_test = prepare_data(test.copy())","936a709d":"new_test['date_block_num'] = 34 # \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043c\u0435\u0441\u044f\u0446\u0430 \u0432 test\nnew_test.drop(['ID'], axis=1, inplace=True)\nnew_train.drop(['date'], axis=1, inplace=True)\nnew_train['item_cnt_day'] = new_train['item_cnt_day'].clip(0, 20) # \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f item_cnt_day \u0432 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442\nnew_train['month'] = new_train['date_block_num'] % 12 # \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043d\u043e\u043c\u0435\u0440 \u043c\u0435\u0441\u044f\u0446\u0430 \u0432 train\nnew_test['month'] = new_test['date_block_num'] % 12 # \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043d\u043e\u043c\u0435\u0440 \u043c\u0435\u0441\u044f\u0446\u0430 \u0432 test\nnew_train.drop(['item_price'], axis=1, inplace=True)","5e2740e3":"gc.collect()","d9651cfa":"new_train","dd7fae03":"new_test","8db37095":"new_train.info()","699a2175":"new_test.info()","60d160d0":"new_train.describe()","f4c6637f":"plt.figure(figsize=(20, 5))\ncity = sns.countplot(x='city', data=new_train)\ncity.set_xticklabels(city.get_xticklabels(), rotation=45);","4ac0cf8c":"plt.figure(figsize=(30, 5))\nshop_viz = sns.countplot(x='new_shop_name', data=new_train)\nshop_viz.set_xticklabels(shop_viz.get_xticklabels(), rotation=45);","bd28e012":"plt.figure(figsize=(20, 5))\nitem_name = sns.countplot(x='item_cat1', data=new_train)\nitem_name.set_xticklabels(item_name.get_xticklabels(), rotation=45);","9c0cce69":"plt.figure(figsize=(35, 5))\nitem_label = sns.countplot(x='item_cat2', data=new_train)\nitem_label.set_xticklabels(item_label.get_xticklabels(), rotation=45);","0698a6b4":"plt.figure(figsize=(20, 5))\nsns.countplot(x='month', data=new_train);","8b86645c":"X_train = new_train.drop(['item_cnt_day'], axis=1) # \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 X \u0438 Y\nY_train = new_train['item_cnt_day']\nX_test = new_test","8ab2c202":"cat_features = ['city', 'new_shop_name', 'item_cat1', 'item_cat2']\n\ndef into_numbers(data): # \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u043a \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u043c\u0443 \u0444\u043e\u0440\u043c\u0430\u0442\u0443 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n  num_data = pd.concat([data, pd.get_dummies(data['city'])], axis=1)\n  num_data = pd.concat([num_data, pd.get_dummies(data['item_cat1'])], axis=1)\n  num_data = pd.concat([num_data, pd.get_dummies(data['item_cat2'])], axis=1)\n  num_data = pd.concat([num_data, pd.get_dummies(data['new_shop_name'])], axis=1)\n  num_data.drop(cat_features, axis=1, inplace=True)\n  return num_data","32f648cf":"%%time\nX_train_num = into_numbers(X_train.copy())\nX_test_num = into_numbers(X_test.copy())","c07289ff":"X_train_num[' \u0413\u0430\u0440\u043d\u0438\u0442\u0443\u0440\u044b\/\u041d\u0430\u0443\u0448\u043d\u0438\u043a\u0438'] = 0\nX_train_num['PC ' ] = 0\nX_train_num['\u0418\u0433\u0440\u044b MAC '] = 0","b4770f5d":"X_train_num = X_train_num.reindex(sorted(X_train_num.columns), axis=1)\nX_test_num = X_test_num.reindex(sorted(X_test_num.columns), axis=1)","9cccdff3":"def transliterate(name):\n   \"\"\"\n   \u0410\u0432\u0442\u043e\u0440: LarsKort\n   \u0414\u0430\u0442\u0430: 16\/07\/2011; 1:05 GMT-4;\n   \"\"\"\n   # \u0421\u043b\u043e\u0432\u0430\u0440\u044c \u0441 \u0437\u0430\u043c\u0435\u043d\u0430\u043c\u0438\n   slovar = {'\u0430':'a','\u0431':'b','\u0432':'v','\u0433':'g','\u0434':'d','\u0435':'e','\u0451':'e',\n      '\u0436':'zh','\u0437':'z','\u0438':'i','\u0439':'i','\u043a':'k','\u043b':'l','\u043c':'m','\u043d':'n',\n      '\u043e':'o','\u043f':'p','\u0440':'r','\u0441':'s','\u0442':'t','\u0443':'u','\u0444':'f','\u0445':'h',\n      '\u0446':'c','\u0447':'cz','\u0448':'sh','\u0449':'scz','\u044a':'','\u044b':'y','\u044c':'','\u044d':'e',\n      '\u044e':'u','\u044f':'ja', '\u0410':'A','\u0411':'B','\u0412':'V','\u0413':'G','\u0414':'D','\u0415':'E','\u0401':'E',\n      '\u0416':'ZH','\u0417':'Z','\u0418':'I','\u0419':'I','\u041a':'K','\u041b':'L','\u041c':'M','\u041d':'N',\n      '\u041e':'O','\u041f':'P','\u0420':'R','\u0421':'S','\u0422':'T','\u0423':'U','\u0424':'F','\u0425':'H',\n      '\u0426':'C','\u0427':'CZ','\u0428':'SH','\u0429':'SCH','\u042a':'','\u042b':'y','\u042c':'','\u042d':'E',\n      '\u042e':'U','\u042f':'YA',',':'','?':'',' ':'_','~':'','!':'','@':'','#':'',\n      '$':'','%':'','^':'','&':'','*':'','(':'',')':'','-':'','=':'','+':'',\n      ':':'',';':'','<':'','>':'','\\'':'','\"':'','\\\\':'','\/':'','\u2116':'',\n      '[':'',']':'','{':'','}':'','\u0491':'','\u0457':'', '\u0454':'','\u0490':'g','\u0407':'i',\n      '\u0404':'e', '\u2014':''}\n        \n   # \u0426\u0438\u043a\u043b\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0432\u0441\u0435 \u0431\u0443\u043a\u0432\u044b \u0432 \u0441\u0442\u0440\u043e\u043a\u0435\n   for key in slovar:\n      name = name.replace(key, slovar[key])\n   return name","c912f14c":"eng_cols = {}\nfor i in X_train_num.columns:\n    eng_cols[str(i)] = transliterate(i)","455607f8":"X_train_num.rename(columns=eng_cols, inplace=True)\nX_test_num.rename(columns=eng_cols, inplace=True)","603ac82d":"gc.collect()","8a9b5f2b":"import xgboost\nfrom sklearn.ensemble import RandomForestRegressor\nfrom lightgbm import LGBMRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split","8b1ce516":"X_train_check, X_test_check, y_train_check, y_test_check = train_test_split(X_train_num, Y_train, test_size=0.33, random_state=42) # \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043c\u0435\u0442\u043e\u0434\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 - get_dummies","2c17b8ad":"del X_train_num\ndel Y_train\ndel X_train\ndel X_test\ndel items_cat\ndel items\ndel train\ndel sample_sub\ndel shops\ndel test\ndel new_train\ndel new_test\ngc.collect()","6b3c8b80":"model_error = {}","8aa548b7":"%%time\nmodel_lr = LinearRegression()\nmodel_lr.fit(X_train_check, y_train_check)","7124ab10":"pred_lr = model_lr.predict(X_test_check)\nlr_rmse = np.sqrt(mean_squared_error(y_test_check, pred_lr))\nmodel_error['LinearRegression'] = lr_rmse\nprint(lr_rmse)","cea3c3dc":"%%time\nmodel_sgd = SGDRegressor()\nmodel_sgd.fit(X_train_check, y_train_check)","5d11d534":"pred_sgd = model_sgd.predict(X_test_check)\nsgd_rmse = np.sqrt(mean_squared_error(y_test_check, pred_sgd))\nmodel_error['SGDRegressor'] = sgd_rmse\nprint(sgd_rmse)","9bbe4fe1":"%%time\nmodel_xgboost = xgboost.XGBRegressor()\nmodel_xgboost.fit(X_train_check, y_train_check)","d47e56de":"pred_xgb = model_xgboost.predict(X_test_check)\nxgboost_rmse = np.sqrt(mean_squared_error(y_test_check, pred_xgb))\nmodel_error['XGBoost'] = xgboost_rmse\nprint(xgboost_rmse)","9744c038":"xgboost.plot_importance(model_xgboost) # \u0433\u0440\u0430\u0444\u0438\u043a \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","0e31056b":"%%time\nmodel_rf = RandomForestRegressor()\nmodel_rf.fit(X_train_check, y_train_check)","68c31e2c":"pred_rf = model_rf.predict(X_test_check)\nrf_rmse = np.sqrt(mean_squared_error(y_test_check, pred_rf))\nmodel_error['RandomForest'] = rf_rmse\nprint(rf_rmse)","9ccdf76e":"model_lgbm = LGBMRegressor()\nmodel_lgbm.fit(X_train_check, y_train_check)","27c6da18":"pred_lgbm = model_lgbm.predict(X_test_check)\nlgbm_rmse = np.sqrt(mean_squared_error(y_test_check, pred_lgbm))\nmodel_error['LightGBM'] = lgbm_rmse\nprint(lgbm_rmse)","7bdfe5f7":"full_rmse = 0\nfor key, value in model_error.items():\n  full_rmse += value\n  print(\"RMSE \u043e\u0448\u0438\u0431\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 {} - {}\".format(key, str(value)))\nprint(\"\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u043e\u0434\u0435\u043b\u0435\u0439 - {}\".format(str(full_rmse \/ len(model_error))))","9d0f3f60":"from sklearn.model_selection import GridSearchCV","287238d3":"gs_model_error = {}","72fba916":"%%time\nparams_sgd = {\n    'epsilon':np.linspace(0.2, 0.01, 6), # \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0430 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0448\u0443\u043c\u0430 \u043c\u043e\u0434\u0435\u043b\u0438\n    'alpha': [0, 0.1, 1, 5], # \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438\n    'eta0': np.linspace(0.2, 0.01, 6), # \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n    'penalty':['l1', 'l2', 'elasticnet'], # \u0432\u0438\u0434 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438\n    'shuffle':[False]\n}\n\nbest_sgd = GridSearchCV(SGDRegressor(), params_sgd, cv=None, refit=True, n_jobs=-1)\nbest_sgd.fit(X_train_check, y_train_check)\n\nbest_sgd_params = best_sgd.best_params_\nprint(best_sgb_params)\n\npred_best_sgd = best_sgd.predict(X_test_check)\nbest_rmse_sgd = np.sqrt(mean_squared_error(y_test_check, pred_best_sgd))\ngs_model_error['SGDRegressor'] = best_rmse_sgd\nprint(best_rmse_sgd)","09b674c0":"%%time\nparams_lgbm = {\n    'num_leaves': [30, 50, 100, 1000], # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0438\u0441\u0442\u044c\u0435\u0432\n    'max_depth':[-1, 6, 10], # \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0433\u043b\u0443\u0431\u0438\u043d\u0430 \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432\n    'learning_rate':np.linspace(0.3, 0.01, 10), # \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n    'lambda_l1':[0, 0.1, 1, 5], # \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 l1 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438\n    'lambda_l2':[0, 0.1, 1, 5], # \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 l2 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438\n    'num_iterations':[100, 200, 500], # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439\n    'device_type':['gpu'] # \u043d\u0430 \u0447\u0435\u043c \u043e\u0431\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u043c\u043e\u0434\u0435\u043b\u044c\n}\n\nbest_lgbm = GridSearchCV(LGBMRegressor(), params_lgbm, cv=None, refit=True)\nbest_lgbm.fit(X_train_check, y_train_check)\n\nbest_lgbm_params = best_lgbm.best_params_\nprint(best_lgbm_params)\n\npred_best_lgbm = best_lgbm.predict(X_test_check)\nbest_rmse_lgbm = np.sqrt(mean_squared_error(y_test_check, pred_best_lgbm))\ngs_model_error['LightGBM'] = best_rmse_lgbm\nprint(best_rmse_lgbm)","426d6070":"%%time\nparams_xgboost = {\n    'booster'['dart', 'gbtree'], # \u0432\u0438\u0434 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u0431\u0443\u0441\u0442\u0438\u043d\u0433\u0430\n    'eta': np.linspace(0.5, 0.01, 6), # \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n    'max_depth':[6, 8, 10], # \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0433\u043b\u0443\u0431\u0438\u043d\u0430 \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432\n    'lambda': [0, 0.1, 1, 5], # \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 l2 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438\n    'alpha':[0, 0.1, 1, 5], # \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 l1 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438\n    'tree_method':['gpu_hist'], # \u0432\u0438\u0434 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432\n    'gpu_id':[0] # \u043d\u043e\u043c\u0435\u0440 \u0432\u0438\u0434\u0435\u043e\u043a\u0430\u0440\u0442\u044b\n    'eval_metric':['rmse'] # \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0430\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0430 \u043e\u0448\u0438\u0431\u043a\u0438\n}\n\nbest_xgboost = GridSearchCV(xgboost.XGBRegressor(), params_xgboost, cv=None, refit=True)\nbest_xgboost.fit(X_train_check, y_train_check)\n\nbest_xgboost_params = best_xgboost.best_params_\nprint(best_xgboost_params)\n\npred_best_xgboost = best_xgboost.predict(X_test_check)\nbest_rmse_xgboost = np.sqrt(mean_squared_error(y_test_check, pred_best_xgboost))\ngs_model_error['XGBoost'] = best_rmse_xgboost\nprint(best_rmse_xgboost)","22ddaa0e":"%%time\nparams_rf = {\n    'n_estimators': [10, 30, 50], # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432 \u0432 \u0430\u043d\u0441\u0430\u0431\u043b\u0435\n    'max_depth':[None, 6, 8, 10], # \u0433\u043b\u0443\u0431\u0438\u043d\u0430 \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432\n    'max_features': ['auto', 'sqrt'], # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u043f\u0440\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u0434\u0435\u0440\u0435\u0432\u0430\n    'n_jobs':[-1] # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0442\u043e\u043a\u043e\u0432\n}\n\nbest_rf = GridSearchCV(RandomForestRegressor(), params_rf, cv=None, refit=True)\nbest_rf.fit(X_train_check, y_train_check)\n\nbest_rf_params = best_rf.best_params_\nprint(best_rf_params)\n\npred_best_rf = best_rf.predict(X_test_check)\nbest_rmse_rf = np.sqrt(mean_squared_error(y_test_check, pred_best_rf))\ngs_model_error['RandomForest'] = best_rmse_rf\nprint(best_rmse_rf)","31b3e87b":"full_rmse_gs = 0\nfor key, value in gs_model_error.items():\n  full_rmse_gs += value\n  print(\"RMSE \u043e\u0448\u0438\u0431\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 {} - {}\".format(key, str(value)))\nprint(\"\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u043e\u0434\u0435\u043b\u0435\u0439 - {}\".format(str(full_rmse_gs \/ len(gs_model_error))))","0e3ad5a7":"gc.collect()","fa0e5390":"from sklearn.ensemble import StackingRegressor","8f88be46":"%%time\nestimators = [\n              ('lr', LinearRegression(n_jobs=-1)),\n              ('sgd', SGDRegressor(**best_sgd_params)),\n              ('xgboost', xgboost.XGBRegressor(**best_xgboost_params)),\n              ('rf', RandomForestRegressor(**best_rf_params))\n              ]\n\nstack = StackingRegressor(estimators=estimators, final_estimator=LGBMRegressor(**best_lgbm_params))\nstack.fit(X_train_check, y_train_check)","98fb73ef":"pred_stack = stack.predict(X_test_check)\nstack_error = np.sqrt(mean_squared_error(y_test_check, pred_stack))\nprint(\"RMSE \u043e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0441\u0442\u0435\u043a\u0438\u043d\u0433\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 - {}\".format(stack_error))","fabbe7f8":"gc.collect()","e3c114f0":"pred_for_sub = stack.predict(X_test_num)\nlen(pred_for_sub)","5e4e6dad":"sub = pd.DataFrame({'ID':test.ID, 'item_cnt_month':pred_for_sub})\nsub","61fd5888":"sub.to_csv(\"sub.csv\", index=False)","7473fd6c":"\u041f\u0440\u043e\u0431\u0443\u0435\u043c \u0440\u0430\u0437\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \"\u0438\u0437 \u043a\u043e\u0440\u043e\u0431\u043a\u0438\".","ce42204f":"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043c \u0432\u0441\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445","81a92c6c":"# GridSearch","3cf49f57":"\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043d\u0430\u0448\u0438 \u0434\u0430\u043d\u043d\u044b\u0435, \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0438\u0445 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043f\u0443\u0441\u0442\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439","945da56d":"\u0423\u0434\u0430\u043b\u0438\u043c \u0441\u0442\u0430\u0440\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0447\u0442\u043e\u0431\u044b \u043e\u0441\u0432\u043e\u0431\u043e\u0434\u0438\u0442\u044c \u041e\u0417\u0423.","5dfa9047":"\u0412 train \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 3 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0442\u043e\u0432\u0430\u0440\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0441\u0442\u044c \u0432 test \u0432\u044b\u0431\u043e\u0440\u043a\u0435, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u044b \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0438\u0445 \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u0432 train \u0432\u044b\u0431\u043e\u0440\u043a\u0435.","1d3433f4":"# LightGBM","a99007a4":"\u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0442\u0435\u0445\u043d\u0438\u043a\u0438 \u0441\u0442\u0435\u043a\u0438\u043d\u0433\u0430 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043d\u0430\u0448\u0443 \u043e\u0448\u0438\u0431\u043a\u0443 \u0435\u0449\u0435 \u043c\u0435\u043d\u044c\u0448\u0435.","a86d763a":"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043a\u0443\u043f\u043e\u043a \u043f\u043e \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c.","6f9daf3a":"\u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 train \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u043d\u0430 \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0434\u0435\u043b\u0435\u0439.","2ea31343":"# RandomForest","82875a93":"# SGDRegressor","22611a0a":"# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439","550453c4":"\u041c\u044b \u0434\u043e\u0431\u0438\u043b\u0438\u0441\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u043b\u0443\u0447\u0448\u0435, \u0447\u0435\u043c \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \"\u0438\u0437 \u043a\u043e\u0440\u043e\u0431\u043a\u0438\". ","4455f77f":"# XGBoost","941c6ff5":"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043a\u0443\u043f\u043e\u043a \u043f\u043e \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430\u043c.","39e173d7":"\u041e\u0447\u0435\u0432\u0438\u0434\u043d\u043e \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0435\u0440\u0435\u0431\u043e\u0440\u0430 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043f\u043e \u0441\u0435\u0442\u043a\u0435.","53f59fd7":"\u0418\u0437-\u0437\u0430 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e LightGBM \u043d\u0435 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0435 ascii-\u0441\u0438\u043c\u0432\u043e\u043b\u044b \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0434\u0435\u043b\u0430\u0442\u044c \u0442\u0440\u0430\u043d\u0441\u043b\u0438\u0442\u0435\u0440\u0430\u0446\u0438\u044e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u043a\u043e\u043b\u043e\u043d\u043e\u043a.","6f402d3a":"# LinearRegression","017d90e0":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0442\u043e \u043a\u0430\u043a \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \"\u0438\u0437 \u043a\u043e\u0440\u043e\u0431\u043a\u0438\"","b81bfeca":"# Stacking models","152a721d":"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043a\u0443\u043f\u043e\u043a \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c.","6cecf878":"# \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0434\u0430\u043d\u043d\u044b\u0445","cb4e8eb4":"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043a\u0443\u043f\u043e\u043a \u043f\u043e \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c.\n","be3ae083":"# \u041f\u043e\u0434\u0433\u043e\u0442\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439","b2a2ff76":"\u0414\u043b\u044f XGBoost \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0432 \u043e\u0434\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0438 \u0443 train, \u0438 test \u0432\u044b\u0431\u043e\u0440\u043e\u043a, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u044b \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u044b, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0439 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432.","31e8cfa6":"# Feature engineering","66ad80e6":"# Create submission","8a2a18c2":"# \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","edb54fcf":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043a\u0430\u0437\u043e\u0432 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c.","7a3cd13d":"# \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f","d26ff56a":"\u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043c \u043d\u0430\u0448\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043a \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u043c\u0443 \u0444\u043e\u0440\u043c\u0430\u0442\u0443, \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0442\u0430\u0431\u043b\u0438\u0446\u044b. \u0423\u0434\u0430\u043b\u0438\u043c \u0438\u0437 train \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0442\u043e \u0447\u0435\u0433\u043e \u043d\u0435\u0442 \u0432 test \u0432\u044b\u0431\u043e\u0440\u043a\u0435. \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438. \u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043c \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e item_cnt_day \u043a \u0444\u043e\u0440\u043c\u0430\u0442\u0443 0, 20.","b800fd85":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043d\u0430\u0448\u0435\u0433\u043e \u043f\u0435\u0440\u0435\u0431\u043e\u0440\u0430."}}