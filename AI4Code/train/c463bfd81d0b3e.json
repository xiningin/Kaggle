{"cell_type":{"3952954d":"code","a0f4370a":"code","151d95d0":"code","724f3080":"code","eb7028bc":"code","2df948cc":"code","2637729f":"code","2ba94c65":"code","fb21f4ef":"code","f7a4e663":"code","6a54029e":"code","a39ce74c":"code","fa9d64f6":"code","ebff1bff":"code","5d0be04b":"code","b25a1099":"code","74156a4d":"code","7ef72c19":"code","104f3fd0":"code","92dbe597":"code","0dfd8b19":"code","b1b0d0f1":"code","acf716be":"code","79475f1a":"code","e0e5bae8":"code","364f53d5":"code","c5c5619b":"code","401c1335":"code","98c06bbe":"code","97e0518f":"code","4c35fe6d":"code","ea2e7468":"code","2b7db066":"markdown","5a14ae73":"markdown","8ba95d08":"markdown","014db9d4":"markdown","c2536c33":"markdown"},"source":{"3952954d":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport category_encoders as ce\n\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold","a0f4370a":"data0 = pd.read_csv(\"..\/input\/fifa-20-complete-player-dataset\/players_20.csv\")\ndata0[0:2].T[0:30]","151d95d0":"data0.columns","724f3080":"year=[]\nfor item in data0['dob']:\n    year+=[int(item[0:4])]\ndata0['year']=year","eb7028bc":"df=data0\nfor c in df.columns:\n    if df[c].dtype!='object': \n        df[c] = df[c].fillna(0)","2df948cc":"from sklearn.preprocessing import LabelEncoder\nfor c in df.columns:\n    if df[c].dtype=='object': \n        df[c] = df[c].fillna('N')\n        lbl = LabelEncoder()\n        lbl.fit(list(df[c].values))\n        df[c] = lbl.transform(df[c].values)","2637729f":"data1=df\ndata1[0:2].T","2ba94c65":"data1.columns","fb21f4ef":"target=['overall','potential','value_eur','wage_eur','release_clause_eur']\ndatay=data1[target]\ndatax=data1.drop(target,axis=1)","f7a4e663":"print(datay[0:2].T)\nprint()\nprint(datax[0:2].T)","6a54029e":"train=np.array(datax)\ntrainy=np.array(datay)\nprint(train.shape)\nprint(trainy.shape)","a39ce74c":"df_columns = list(datax.columns)\nprint(df_columns)","fa9d64f6":"train_df=pd.DataFrame(train)\n#test_df=pd.DataFrame(test)","ebff1bff":"train_df.columns=df_columns\n#test_df.columns=df_columns","5d0be04b":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","b25a1099":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","74156a4d":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","7ef72c19":"train_feat_df = to_feature(train_df)\n#test_feat_df = to_feature(test_df)","104f3fd0":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","92dbe597":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n    'num_leaves': 62\n}","0dfd8b19":"y = trainy\nprint(y.shape)","b1b0d0f1":"ydf=pd.DataFrame(y)\nydf","acf716be":"from sklearn.model_selection import KFold\n\nfor i in range(5):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    \n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_xlabel('oof '+str(i),fontsize=12)\n    ax.set_ylabel('train_y '+str(i),fontsize=12)\n    ax.scatter(oof,y)\n","79475f1a":"print(target)","e0e5bae8":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    \n    ax.tick_params(axis='x', rotation=0)\n    #ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    \n    return fig,ax\n\n#fig, ax = visualize_importance(models, train_feat_df)","364f53d5":"for i in range(5):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    fig, ax = visualize_importance(models, train_feat_df)\n    ax.set_title(target[i]+' Imortance',fontsize=20)\n","c5c5619b":"from sklearn.cluster import AgglomerativeClustering\ndata0=pd.read_csv('..\/input\/fifa-20-complete-player-dataset\/players_20.csv')\ndata1=data0[['movement_reactions','skill_ball_control']]\ndata1","401c1335":"def doAgglomerative(X, nclust=2):\n    model = AgglomerativeClustering(n_clusters=nclust,affinity='euclidean',linkage='ward')\n    clust_labels1 = model.fit_predict(X)\n    return (clust_labels1)\n\nclust_labels1 = doAgglomerative(data1,50)\nagglomerative = pd.DataFrame(clust_labels1)\ndata1.insert((data1.shape[1]),'agglomerative',agglomerative)\ndata1","98c06bbe":"data2=data1.groupby('agglomerative').mean()\ndata2","97e0518f":"data2[data2['movement_reactions']==data2['movement_reactions'].max()]\n#data2[data2['skill_ball_control']==data2['skill_ball_control'].max()]","4c35fe6d":"fig = plt.figure()\nax = fig.add_subplot(111)\nscatter = ax.scatter(data1['movement_reactions'],data1['skill_ball_control'],c=agglomerative[0],s=50)\nax.set_title('Agglomerative Clustering')\nax.set_xlabel('movement_reactions')\nax.set_ylabel('skill_ball_control')\nplt.rcParams['figure.figsize'] = (10,8)\nplt.colorbar(scatter)","ea2e7468":"data0[data1['agglomerative']==18]","2b7db066":"* For 'overall', 1.'movement_reactions' and 2.'mentality_composure' are the most important factors.\n* For 'potential', 1.'skill_ball_control' and 2.'movement_reactions' are the most important factors.\n* For 'value_eur', 1.'movement_reactions' and 2.'skill_ball_control' are the most important factors.\n* For 'wage_eur', 1.'movement_reactions' and 2.'international_reputation' are the most important factors.\n* For 'release_clause_eur', 1.'movement_reactions' and 2.'skill_ball_control' are the most important factors.","5a14ae73":"# Data preparation","8ba95d08":"# Target setting","014db9d4":"# Visualize Importance","c2536c33":"# Model"}}