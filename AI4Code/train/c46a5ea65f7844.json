{"cell_type":{"b329d48d":"code","fb6644c4":"code","fa293d21":"code","6a29cf31":"code","b71209cb":"code","a5fae1aa":"code","c6f31395":"code","e05458bd":"code","5424e832":"code","3f8c5c1f":"code","0808e115":"code","76783e64":"markdown","3341e88f":"markdown","c24bb796":"markdown","b18d1bba":"markdown","de537a1e":"markdown","7f1a9002":"markdown","7b79a9b9":"markdown","c956ddf9":"markdown"},"source":{"b329d48d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport warnings\nimport seaborn as sns\nimport itertools\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\nfrom sklearn import metrics\n\nwarnings.filterwarnings('ignore')\n\n# Open the data\ndf_train = pd.read_csv(\"..\/input\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/test.csv\")\ndf_test_copy = df_test.copy()\ndf_train_copy = df_train.copy()","fb6644c4":"# print(df_train.columns)\n# print(df_train.describe())\n# print(df_train.shape)\n\n# check info for each column to see which lines are empty and then we will process the data\n# train data age, cabin and embarked has some missing data\nprint(df_train.info())\n\nprint('-' * 30)\n# test data age, fare, cabin and embarked has some missing data\nprint(df_test.info())","fa293d21":"# calculate average age by passenger class to fill empty age cells\nprint('Age breakdown by passenger class: ')\nprint(df_train.groupby('Pclass').mean()[['Age']])\n\n# Fill empty values in age column\ndf_train['Age'].fillna(df_train['Age'].median(), inplace=True)\ndf_test['Age'].fillna(df_test['Age'].median(), inplace=True)\n\n# fill empty data in embarked and fare column\ndf_train['Embarked'].fillna(df_train['Embarked'].mode()[0], inplace=True)\ndf_test['Fare'].fillna(df_test['Fare'].median(), inplace=True)\n\n# check out rows if there are any empty cell left in Age column\nprint('Number of empty cells in train data: ')\nprint(df_train.isnull().sum())\nprint('-' * 30)\nprint('Number of empty cells in test data: ')\nprint(df_test.isnull().sum())\n\n# drop Cabin, passenger ID and Ticket value from train and test data\ndrop_columns = ['Cabin', 'PassengerId', 'Ticket', 'Name']\ndf_train = df_train.drop(drop_columns, axis=1)\ndf_test = df_test.drop(drop_columns, axis=1)\n","6a29cf31":"# change non-numerical value to numerical values\ndf_train['Sex'] = df_train['Sex'].map({'female': 0, 'male': 1}).astype(int)\ndf_test['Sex'] = df_test['Sex'].map({'female': 0, 'male': 1}).astype(int)\n\ndf_train['Embarked'] = df_train['Embarked'].map({'S': 0, 'C': 1, 'Q': 2}).astype(int)\ndf_test['Embarked'] = df_test['Embarked'].map({'S': 0, 'C': 1, 'Q': 2}).astype(int)\n\n#check if non numerical values are converted\nprint(df_train.head())","b71209cb":"# correlation matrix\nplt.figure(figsize=(14, 12))\nplt.title('Pearson Correlation of Features', y=1.05, size=15)\nsns.heatmap(df_train.astype(float).corr(), linewidths=0.1, vmax=1.0,\n            square=True, cmap=\"BuPu\", linecolor='white', annot=True)","a5fae1aa":"# create scatter plot to check sex, Pclass, fare and embarked relationship with survived\nplt.figure(figsize=(10, 5))\nsns.boxplot(x='Survived', y='Age', data=df_train)\n\n# mean of ages by Survived\nprint(df_train.groupby('Survived').mean()[['Age']])\n\nplt.figure(figsize=(10, 5))\nsns.boxplot(x='Survived', y='Fare', data=df_train)\n\n# mean of ages by Survived\nprint(df_train.groupby('Survived').mean()[['Fare']])","c6f31395":"# as you may remember I changed female\/male value to 0 and 1 to create correlation matrix.\n# I reversed that action to create the plot and reversed again. This seems like repetitive task. Please advise how to improve my code\ndf_train['Sex'] = df_train['Sex'].map({0: 'female', 1: 'male'}).astype(str)\nsns.countplot(x='Sex', data=df_train, hue='Survived')\ndf_train['Sex'] = df_train['Sex'].map({'female': 0, 'male': 1}).astype(int)","e05458bd":"df_train['Embarked'] = df_train['Embarked'].map({0: 'S', 1: 'C', 2: 'Q'}).astype(str)\nsns.countplot(x='Embarked', data=df_train, hue='Survived')\ndf_train['Embarked'] = df_train['Embarked'].map({'S': 0, 'C': 1, 'Q': 2}).astype(int)","5424e832":"features = ['Age', 'Fare', 'Sex', 'Embarked']\n\n# split train and test data\nX = df_train[features]\n\n# Normalize Data\nX = preprocessing.StandardScaler().fit_transform(X)\n\ny = df_train['Survived']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20)","3f8c5c1f":"# try 3 different Ks to pick the best one to train the model\nneigh5 = KNeighborsClassifier(n_neighbors=5).fit(X_train, y_train)\nyhat5 = neigh5.predict(X_test)\ncm5 = metrics.confusion_matrix(y_test, yhat5)\nprint('Test set Accuracy of K=5:', metrics.accuracy_score(y_test, yhat5))\nprint(cm5)\n\nneigh17 = KNeighborsClassifier(n_neighbors=17).fit(X_train, y_train)\nyhat17 = neigh17.predict(X_test)\ncm17 = metrics.confusion_matrix(y_test, yhat17)\nprint('Test set Accuracy of K=17: ', metrics.accuracy_score(y_test, yhat17))\nprint(cm17)\n\n\nneigh29 = KNeighborsClassifier(n_neighbors=29).fit(X_train, y_train)\nyhat29 = neigh29.predict(X_test)\ncm29 = metrics.confusion_matrix(y_test, yhat29)\nprint('Test set Accuracy of K=29 : ', metrics.accuracy_score(y_test, yhat29))\nprint(cm29)","0808e115":"# use model to predict on test data and submit the file\nX_submit = np.array(df_test[features])\ny_submit = neigh29.predict(X_submit)\n\nsubmit = df_test_copy[['PassengerId']].copy()\nsubmit['Survived'] = y_submit\n\nprint('Length of an survived value array: ', len(y_submit))\nprint(submit.head())\n\nsubmit.to_csv('result_knn_titanic.csv', index=False)","76783e64":"# <a id=\"1\"><\/a> Data Exploration\nBefore get your hands dirty with data, it is essential to check and try to understand what your data looks like and what kind of cleaning action you need to take. <br>\nIn this data, you can see that some columns has missing data. Before you start working with the data, you have to fill those missing values. ","3341e88f":"# <a id=\"2\"><\/a> Data Cleaning\nAfter realizing some data are in columns are missing, we need to clean the data.\n* **Age** - empty data is filled with mean of age by passenger class breakdown\n* **Embarked** - empty data is filled with mode of rest of the data\n* **Fare** -  empty data is filled with median of rest of the data <br>\n<br>\nI also dropped 3 column because name, passenger ID and ticket is irrelevant to survival chance and cabin should also be inline with fare data so using only fare data should be sufficient\n\n","c24bb796":"In my 2nd kernel, I wanted to use my knowledge on kNN which I acquired just couple days ago on edx IBM Course. \nBy using kNN model, I tried to estimate survival chance of passengers based on different features such as age, fare, sex and embarked. \n\nFeel free to comment on my work. I can improve my skills with feedback\n\n1. [Data Exploration](#1) \n1. [Data Cleaning](#2)\n1. [Correlation Matrix](#3)\n1. [Train the Model](#4)\n1. [Model Usage and Submission](#5)","b18d1bba":"To use non numerical values in the model, we need to convert those values to numerical values.","de537a1e":"First related libraries and date are imported","7f1a9002":"# <a id=\"5\"><\/a> Model Usage and Submission\n","7b79a9b9":"# <a id=\"3\"><\/a> Correlation Matrix\nCreating correlation matrix is also helpful to see the relationship between all variables to effectively choose features. <br>\nAfter determining which variables are mostly correlating with survival rate, creating plot is helpful visually to better understand the relationship.","c956ddf9":"# <a id=\"4\"><\/a> Training the Model\nI tried 3 different K to see which one is the best to increase the accuracy\n"}}