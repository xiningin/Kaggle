{"cell_type":{"f10c211e":"code","4432c0fb":"code","fc7bed1b":"code","a6cae198":"code","28e093e6":"code","8d75aa97":"code","b90d5016":"code","c90048e8":"code","e44be829":"code","7ad57ac0":"code","4c2c5d92":"code","051ed980":"code","ea1022e6":"code","333371da":"code","8d807d78":"code","ca16d12f":"code","7ef522ce":"code","426b27fa":"code","4d4b0dc1":"code","1af9e60f":"code","8c34f6d0":"code","46573e12":"code","65649f9a":"code","cb3aa4c5":"code","f22843ce":"code","f21f3f88":"code","b16c342c":"code","97f23b65":"code","88508783":"code","17c48bca":"code","956e201f":"code","3c768758":"code","e9ca79a0":"code","45513278":"code","2b9b748f":"code","382294dd":"code","0df9a528":"code","c2730396":"code","e2e1eee8":"markdown"},"source":{"f10c211e":"from warnings import filterwarnings\nfilterwarnings('ignore')\n\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.neighbors import LocalOutlierFactor\nimport matplotlib.pyplot as plt\n\n\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import StandardScaler\n\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import mean_squared_error,r2_score\n\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge, Lasso, ElasticNet\nfrom sklearn.linear_model import RidgeCV, LassoCV,ElasticNetCV\n\n\n\nHitters=pd.read_csv(\"..\/input\/hitters\/Hitters.csv\")\ndf=Hitters.copy()\ndf.head()","4432c0fb":"df.info()","fc7bed1b":"df.isnull().sum().sum()","a6cae198":"print(\"New League= A\" ,df[df[\"NewLeague\"]==\"A\"].agg({\"Salary\":\"mean\"}))\nprint(\"New League= N\" ,df[df[\"NewLeague\"]==\"N\"].agg({\"Salary\":\"mean\"}))\nprint(\"League= A\" ,df[df[\"League\"]==\"A\"].agg({\"Salary\":\"mean\"}))\nprint(\"League= N\" ,df[df[\"League\"]==\"N\"].agg({\"Salary\":\"mean\"}))\nprint(\"Division= E\" ,df[df[\"Division\"]==\"E\"].agg({\"Salary\":\"mean\"}))\nprint(\"Division= W\" ,df[df[\"Division\"]==\"W\"].agg({\"Salary\":\"mean\"}))","28e093e6":"df.loc[(df[\"Salary\"].isnull())& (df['Division'] == 'E'),\"Salary\"]=624.27\ndf.loc[(df[\"Salary\"].isnull())& (df['Division'] == 'W'),\"Salary\"]=450.87\ndf.isnull().sum().sum()","8d75aa97":"# One hot Encoding\ndf = pd.get_dummies(df, columns = ['League', 'Division', 'NewLeague'], drop_first = True)\ndf.head()","b90d5016":"clf= LocalOutlierFactor(n_neighbors = 20, contamination = 0.1)\nclf.fit_predict(df)[0:10]","c90048e8":"df_scores=clf.negative_outlier_factor_\nnp.sort(df_scores)[0:20]","e44be829":"sns.boxplot(df_scores);","7ad57ac0":"threshold=np.sort(df_scores)[10]\nthreshold","4c2c5d92":"df.loc[df_scores < threshold].index","051ed980":"df.loc[df_scores == threshold]","ea1022e6":"df.iloc[[82, 113, 217, 236, 249, 274, 295, 302, 314, 315],:]=[[495,151,17,61,84,78,10,5624,1679,275,884,1015,709,1045,88,13,2460.0,0,0,0]]","333371da":"df.iloc[82,:]","8d807d78":"df.shape","ca16d12f":"plt.figure(figsize=(12,10))\ncor = df.corr()\nsns.heatmap(cor, annot=True, cmap=plt.cm.Reds)\nplt.show()","7ef522ce":"cor[cor>0.9]","426b27fa":"CRBI_cor=abs(cor[\"CRBI\"])\nCRBI_relevant_features = CRBI_cor[CRBI_cor>0.9]\nCRBI_relevant_features","4d4b0dc1":"df1=df.drop([\"CAtBat\",\"CHits\",\"CHmRun\",\"CRuns\"], axis=1)\nplt.figure(figsize=(12,10))\ncor = df1.corr()\nsns.heatmap(cor, annot=True, cmap=plt.cm.Reds)\nplt.show()","1af9e60f":"AtBat_cor=abs(cor[\"AtBat\"])\nAtBat_relevant_features = AtBat_cor[AtBat_cor>0.9]\nAtBat_relevant_features","8c34f6d0":"df2=df1.drop([\"AtBat\",\"Runs\"], axis=1)\nplt.figure(figsize=(12,10))\ncor = df2.corr()\nsns.heatmap(cor, annot=True, cmap=plt.cm.Reds)\nplt.show()","46573e12":"df2.shape","65649f9a":"# Regression\n\ny=df2[\"Salary\"]\nX=df2.drop(\"Salary\", axis=1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\nreg_model = LinearRegression()\nreg_model.fit(X_train, y_train)\ny_pred=reg_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","cb3aa4c5":"#Ridge Regression\n\nridge_model=Ridge().fit(X_train,y_train)\ny_pred= ridge_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","f22843ce":"# Ridge_tuned(alpha1)\nalphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)\nridge_cv = RidgeCV(alphas = alphas1, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)\nridge_cv.fit(X_train,y_train)\nprint(ridge_cv.alpha_)\nridge_tuned=Ridge(alpha=ridge_cv.alpha_).fit(X_train,y_train)\ny_pred=ridge_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","f21f3f88":"# Ridge_tuned(alpha2)\nalphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)\nridge_cv = RidgeCV(alphas = alphas2, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)\nridge_cv.fit(X_train,y_train)\nprint(ridge_cv.alpha_)\nridge_tuned=Ridge(alpha=ridge_cv.alpha_).fit(X_train,y_train)\ny_pred=ridge_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","b16c342c":"# Ridge_tuned(alpha3)\nalphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)\nridge_cv = RidgeCV(alphas = alphas3, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)\nridge_cv.fit(X_train,y_train)\nprint(ridge_cv.alpha_)\nridge_tuned=Ridge(alpha=ridge_cv.alpha_).fit(X_train,y_train)\ny_pred=ridge_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","97f23b65":"# Ridge_tuned(best alpha)\nalphas4 = np.linspace(0,0.01,10)\nridge_cv = RidgeCV(alphas = alphas4, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)\nridge_cv.fit(X_train,y_train)\nprint(ridge_cv.alpha_)\nridge_tuned=Ridge(alpha=ridge_cv.alpha_).fit(X_train,y_train)\ny_pred=ridge_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","88508783":"#Lasso Regression\nlasso_model = Lasso().fit(X_train, y_train)\ny_pred=lasso_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","17c48bca":"#Lasso Tuned(alpha1)\nalphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)\nlasso_cv_model = LassoCV(alphas = alphas1, cv = 10).fit(X_train, y_train)\nprint(lasso_cv_model.alpha_)\nlasso_tuned = Lasso(alpha = lasso_cv_model.alpha_).fit(X_train, y_train)\ny_pred = lasso_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_pred,y_test))","956e201f":"#Lasso Tuned(alpha2)\nlasso_cv_model = LassoCV(alphas = alphas2, cv = 10).fit(X_train, y_train)\nprint(lasso_cv_model.alpha_)\nlasso_tuned = Lasso(alpha = lasso_cv_model.alpha_).fit(X_train, y_train)\ny_pred = lasso_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_pred,y_test))","3c768758":"#Lasso Tuned(alpha3)\nlasso_cv_model = LassoCV(alphas = alphas3, cv = 10).fit(X_train, y_train)\nprint(lasso_cv_model.alpha_)\nlasso_tuned = Lasso(alpha = lasso_cv_model.alpha_).fit(X_train, y_train)\ny_pred = lasso_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_pred,y_test))","e9ca79a0":"# Lasso_tuned(best alpha)\nalphas4 = np.linspace(0,1,500)\nlasso_cv_model = LassoCV(alphas = alphas4, cv = 10).fit(X_train, y_train)\nprint(lasso_cv_model.alpha_)\nlasso_tuned = Lasso(alpha = lasso_cv_model.alpha_).fit(X_train, y_train)\ny_pred = lasso_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_pred,y_test))","45513278":"# Elastic Net Regression\nenet_model = ElasticNet().fit(X_train, y_train)\ny_pred = enet_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","2b9b748f":"#Elastic Net(alpha1)\nalphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)\nenet_cv_model = ElasticNetCV(alphas = alphas1, cv = 10).fit(X_train, y_train)\nprint(enet_cv_model.alpha_)\nenet_tuned = ElasticNet(alpha = enet_cv_model.alpha_).fit(X_train, y_train)\ny_pred = enet_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","382294dd":"#Elastic Net(alpha2)\nenet_cv_model = ElasticNetCV(alphas = alphas2, cv = 10).fit(X_train, y_train)\nprint(enet_cv_model.alpha_)\nenet_tuned = ElasticNet(alpha = enet_cv_model.alpha_).fit(X_train, y_train)\ny_pred = enet_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","0df9a528":"#Elastic Net(alpha3)\nenet_cv_model = ElasticNetCV(alphas = alphas3, cv = 10).fit(X_train, y_train)\nprint(enet_cv_model.alpha_)\nenet_tuned = ElasticNet(alpha = enet_cv_model.alpha_).fit(X_train, y_train)\ny_pred = enet_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","c2730396":"enet_params = {\"l1_ratio\": [0,0.01,0.05,0.1,0.2,0.4,0.5,0.6,0.8,1],\n               \"alpha\":[0.1,0.01,0.04,0.05,0.001,0.5,0.9,1,5,10,20,50,87,99,100,110,194,195,200,265,266,289,325,330,350,352,355,400]}\nenet_model = ElasticNet().fit(X, y)\nfrom sklearn.model_selection import GridSearchCV\ngs_cv_enet = GridSearchCV(enet_model, enet_params, cv = 10).fit(X, y)\nprint(gs_cv_enet.best_params_)\nenet_tuned = ElasticNet(**gs_cv_enet.best_params_).fit(X_train, y_train)\ny_pred = enet_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","e2e1eee8":"# 1) Eksik verilere k\u0131r\u0131l\u0131m ortalamalar\u0131 atand\u0131.\n# 2) Ayk\u0131r\u0131 g\u00f6zlemler LOF ile belirlendi,10.de\u011fer sonras\u0131na 10.de\u011ferin(e\u015fik de\u011ferin) verileri atand\u0131. \n# 3) Corr>0.9 olan de\u011fi\u015fkenlerden 1 tanesi b\u0131rak\u0131ld\u0131 kalanlar at\u0131ld\u0131(14 de\u011fi\u015fken kald\u0131)\n# 4) 322 veri ile; tune edilmi\u015f ve edilmemi\u015f, en iyi durumda:\n- Regression rmse: 333\n- Ridge rmse: 332\n- Lasso rmse: 331\n- Elastic Net rmse: 3330"}}