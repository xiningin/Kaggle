{"cell_type":{"418c5bbb":"code","511fd780":"code","5e37d76e":"code","0b7a8161":"code","306bec92":"code","8ab6a5ba":"code","9b82c8ae":"code","77c694be":"code","6dee06e3":"code","cd08db07":"code","866c3ccd":"code","f615d654":"code","99ea38b8":"code","cb3c366c":"code","3cad89b2":"code","e99b89e3":"code","59e8068a":"code","8041f209":"code","767a96cb":"code","56682e43":"code","ffe59442":"code","e054fffd":"markdown","4f0e1623":"markdown","1fe35d00":"markdown","8336d027":"markdown","ea09025d":"markdown"},"source":{"418c5bbb":"import os\nimport time\nimport json\nimport keras\nimport numpy as np\nimport pandas as pd\nimport seaborn as sn\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom PIL import Image\nfrom keras.utils import plot_model\nfrom keras.optimizers import RMSprop, Adam\nfrom keras.models import Sequential, load_model\nfrom sklearn.model_selection import train_test_split\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications import EfficientNetB3, EfficientNetB7\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\nfrom keras.layers import GlobalAveragePooling2D, Flatten, Dense, Dropout, BatchNormalization","511fd780":"# Importando csv do dataset\ndata = pd.read_csv('..\/input\/cassava-leaf-disease-classification\/train.csv', sep = ',')","5e37d76e":"data.head()","0b7a8161":"# Lendo json e crinado mapping para para classe\nwith open('..\/input\/cassava-leaf-disease-classification\/label_num_to_disease_map.json') as f:\n    mapping = json.loads(f.read())\n    mapping = {int(k): v for k, v in mapping.items()}\n\nmapping","306bec92":"# Adicionando label_name ao conjunto de dados, e ondenando colunas\ndata['label_name'] = data['label'].map(mapping)\ndata = data[['image_id', 'label_name', 'label']]","8ab6a5ba":"data.head()","9b82c8ae":"# Verificando frequencia\ndata.label_name.value_counts()","77c694be":"# Verificando propor\u00e7\u00e3o \ndata.label_name.value_counts(normalize = True) * 100","6dee06e3":"# Definindo paths de treino e teste\ntrain_path = '..\/input\/cassava-leaf-disease-classification\/train_images\/'\ntest_path = '..\/input\/cassava-leaf-disease-classification\/test_images\/'","cd08db07":"# Criando amostra para treino e teste estrafiticada\ntrain, test = train_test_split(data, test_size = 0.10, shuffle = True, random_state = 0, stratify = data['label_name'])","866c3ccd":"train.label_name.value_counts()","f615d654":"test.label_name.value_counts()","99ea38b8":"train_generator = ImageDataGenerator(\n    preprocessing_function = tf.keras.applications.efficientnet.preprocess_input,\n    rotation_range = 40,\n    width_shift_range = 0.2,\n    height_shift_range = 0.2,\n    shear_range = 0.2,\n    zoom_range = 0.2,\n    horizontal_flip = True,\n    vertical_flip = True,\n    fill_mode = 'nearest',\n)\n\ntest_generator = ImageDataGenerator(\n    preprocessing_function = tf.keras.applications.efficientnet.preprocess_input\n)","cb3c366c":"train_set = train_generator.flow_from_dataframe(\n    dataframe = train,\n    directory = train_path,\n    seed = 42,\n    x_col = 'image_id',\n    y_col = 'label_name',\n    target_size = (456, 456),\n    class_mode = 'categorical',\n    interpolation = 'nearest',\n    shuffle = True,\n    batch_size = 15\n)\n\ntest_set = test_generator.flow_from_dataframe(\n    dataframe = test,\n    directory= train_path,\n    seed = 42,\n    x_col = 'image_id',\n    y_col = 'label_name',\n    target_size = (456, 456),\n    class_mode = 'categorical',\n    interpolation = 'nearest',\n    shuffle = True,\n    batch_size = 15\n)","3cad89b2":"# Definindo par\u00e2metros para treino e teste\nSTEP_SIZE_TRAIN = train_set.n \/\/ train_set.batch_size\nSTEP_SIZE_TEST = test_set.n \/\/ test_set.batch_size\n\n# Definindo loss function\nloss = tf.keras.losses.CategoricalCrossentropy(from_logits = False, label_smoothing = 0.0001, name = 'categorical_crossentropy')\n# Pare de treinar quando o val_loss parar de diminuir por 3 \u00e9pocas\nes = EarlyStopping(monitor = 'val_loss', patience = 3, verbose = 1, mode = 'min', restore_best_weights = True)\n# Salve o modelo com o m\u00ednimo de perda de valida\u00e7\u00e3o\ncheckpoint = ModelCheckpoint(\"CassavaLeafDisease.h5\", monitor = 'val_loss', save_best_only = True, mode = 'min')\n# Reduza a taxa de aprendizagem quando a aprendizagem estagnar\nreduce_lr = ReduceLROnPlateau(monitor = 'val_loss', factor = 0.2, patience = 2, min_lr = 1e-6, mode = 'min', verbose = 1)","e99b89e3":"# Criando modelo de rede neural\nmodelo = Sequential()\n#modelo.add(EfficientNetB7(input_shape = (456, 456, 3), include_top = False, weights = 'imagenet', drop_connect_rate = 0.6))\nmodelo.add(EfficientNetB3(input_shape = (456, 456, 3), include_top = False, weights = 'imagenet', drop_connect_rate = 0.6))\nmodelo.add(GlobalAveragePooling2D())\nmodelo.add(Flatten())\nmodelo.add(Dense(256, activation = 'relu', bias_regularizer = tf.keras.regularizers.L1L2(l1 = 0.01, l2 = 0.001)))\nmodelo.add(Dropout(0.5))\nmodelo.add(Dense(5, activation = 'softmax'))\n# Compilando rede neural\nmodelo.compile(optimizer = Adam(lr = 0.001, decay = 0.0001, clipvalue = 0.5), loss = loss, metrics = ['categorical_accuracy'])","59e8068a":"# Informa\u00e7\u00f5es de par\u00e2metros do modelo \nmodelo.summary()","8041f209":"inicio = time.time()\n\n# Treinamento e teste do modelo\nresults = modelo.fit(\n        train_set, \n        validation_data = test_set, \n        epochs = 15, \n        batch_size = 15, \n        steps_per_epoch = STEP_SIZE_TRAIN,\n        validation_steps = STEP_SIZE_TEST, \n        callbacks = [es, checkpoint, reduce_lr]\n)\n\nprint()\nfim = time.time()\nprint(fim - inicio)\n\n# Salvando modelo\nmodelo.save('CassavaLeafDisease.h5')","767a96cb":"# Carregando modelo\nleaf_model = load_model('CassavaLeafDisease.h5')","56682e43":"# Realizando predi\u00e7\u00e3o com imagem teste \nTEST_DIR = '..\/input\/cassava-leaf-disease-classification\/test_images\/'\ntest_images = os.listdir(TEST_DIR)\npredictions = []\n\nfor image in test_images:\n    img = Image.open(TEST_DIR + image)\n    img = img.resize((456, 456), resample = Image.NEAREST) \n    img = np.expand_dims(img, axis = 0)\n    predictions.extend(leaf_model.predict(img).argmax(axis = 1))","ffe59442":"# Gerando arquivo submission.csv\nsubmit = pd.DataFrame({'image_id': test_images, 'label': predictions})\nsubmit.to_csv('submission.csv', index = False)\ndisplay(submit)","e054fffd":"# Dados\n## Explorando dados","4f0e1623":"## Tratamento das imagens\nNossas imagens n\u00e3o est\u00e3o no formato adequado para usarmos em uma rede neural, usaremos a classe **ImageDataGenerator** com o method **flow_from_dataframe** do keras. Ele irar percorrer nosso cvs e diret\u00f3rio de dados, carregando os dados de imagem e retornar a entrada (matrizes de pixels) e a sa\u00edda (n\u00famero inteiro de classe).","1fe35d00":"# Modelo","8336d027":"# Preparando os dados\n## HoldOut\nSeparando dados de treino e teste","ea09025d":"### Definindo par\u00e2metros para tratamnetos das imagens"}}