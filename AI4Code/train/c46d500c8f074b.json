{"cell_type":{"17f1b7ff":"code","05ad5811":"code","01312501":"code","d93da2ce":"code","ebe672f2":"code","a3c09441":"code","a711f5a3":"code","d2671eca":"code","ec6bdf60":"code","bc0685b4":"code","d6ee6ace":"code","f1e848e1":"code","fd3632db":"code","7fb32028":"code","107affe5":"code","ff8c21dc":"markdown","6b483a4e":"markdown","aef1674f":"markdown"},"source":{"17f1b7ff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","05ad5811":"import sys\nsys.path.append('..\/input\/iterativestratificationmaster')\nfrom iterstrat.ml_stratifiers import MultilabelStratifiedKFold","01312501":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport tensorflow.keras.backend as K\nimport tensorflow.keras.layers as L\nimport tensorflow.keras.models as M\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau, ModelCheckpoint\nimport tensorflow_addons as tfa\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import log_loss\nfrom tqdm.notebook import tqdm","d93da2ce":"train_features = pd.read_csv('..\/input\/lish-moa\/train_features.csv')\ntrain_targets = pd.read_csv('..\/input\/lish-moa\/train_targets_scored.csv')\ntest_features = pd.read_csv('..\/input\/lish-moa\/test_features.csv')\n\nss = pd.read_csv('..\/input\/lish-moa\/sample_submission.csv')","ebe672f2":"def preprocess(df):\n    df = df.copy()\n    df.loc[:, 'cp_type'] = df.loc[:, 'cp_type'].map({'trt_cp':0, 'ctl_vehicle':1})\n    df.loc[:, 'cp_dose'] = df.loc[:, 'cp_dose'].map({'D1':0, 'D2':1})\n    del df['sig_id']\n    return df","a3c09441":"train = preprocess(train_features)\ntest = preprocess(test_features)","a711f5a3":"# sig_id \u524a\u9664\ndel train_targets['sig_id']","d2671eca":"train_targets = train_targets.loc[train['cp_type'] == 0].reset_index(drop=True)\ntrain = train.loc[train['cp_type'] == 0].reset_index(drop=True)","ec6bdf60":"def create_model(num_columns):\n    model = tf.keras.Sequential([\n    tf.keras.layers.Input(num_columns), # keras tensor \u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\n    tf.keras.layers.BatchNormalization(), # input \u3092\u6b63\u898f\u5316and\u30b9\u30b1\u30fc\u30eb\u5316\n    tf.keras.layers.Dropout(0.2), # dropout \u3092input \u306b\u9069\u7528\n    tfa.layers.WeightNormalization(tf.keras.layers.Dense(2048, activation=\"relu\")), # \u91cd\u307f\u306e\u6b63\u898f\u5316\u3092\u5b9f\u884c\u3001\u3000\u5168\u7d50\u5408\u5c64Dense\u3067\u306f\u5f15\u6570activation\u3067\u6d3b\u6027\u5316\u95a2\u6570\u3092\u6307\u5b9a\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Dropout(0.5),\n    tfa.layers.WeightNormalization(tf.keras.layers.Dense(1048, activation=\"relu\")),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Dropout(0.5),\n    tfa.layers.WeightNormalization(tf.keras.layers.Dense(206, activation=\"sigmoid\"))\n    ])\n    # \u8a13\u7df4\u904e\u7a0b\u306e\u8a2d\u5b9a \u3069\u306e\u3088\u3046\u306a\u5b66\u7fd2\u51e6\u7406\u3092\u884c\u306a\u3046\u304b\n    model.compile(optimizer=tfa.optimizers.Lookahead(tf.optimizers.Adam(), sync_period=10),\n                  loss='binary_crossentropy', \n                  )\n    return model","bc0685b4":"top_feats = [  1,   2,   3,   4,   5,   6,   7,   9,  11,  14,  15,  16,  17,\n        18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  29,  30,  31,\n        32,  33,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  46,\n        47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  58,  59,  60,\n        61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,  73,\n        74,  75,  76,  78,  79,  80,  81,  82,  83,  84,  86,  87,  88,\n        89,  90,  91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101,\n       102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,\n       115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128,\n       129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143,\n       144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157,\n       158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170,\n       171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183,\n       184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197,\n       198, 199, 200, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212,\n       213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226,\n       227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239,\n       240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253,\n       254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266,\n       267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280,\n       281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294,\n       295, 296, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309,\n       310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323,\n       324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336,\n       337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349,\n       350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362,\n       363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 375, 376, 377,\n       378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391,\n       392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404,\n       405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418,\n       419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431,\n       432, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446,\n       447, 448, 449, 450, 453, 454, 456, 457, 458, 459, 460, 461, 462,\n       463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475,\n       476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489,\n       490, 491, 492, 493, 494, 495, 496, 498, 500, 501, 502, 503, 505,\n       506, 507, 509, 510, 511, 512, 513, 514, 515, 518, 519, 520, 521,\n       522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 534, 535, 536,\n       538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551,\n       552, 554, 557, 559, 560, 561, 562, 565, 566, 567, 568, 569, 570,\n       571, 572, 573, 574, 575, 577, 578, 580, 581, 582, 583, 584, 585,\n       586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599,\n       600, 601, 602, 606, 607, 608, 609, 611, 612, 613, 615, 616, 617,\n       618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630,\n       631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644,\n       645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 658, 659,\n       660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672,\n       673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685,\n       686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 699, 700,\n       701, 702, 704, 705, 707, 708, 709, 710, 711, 713, 714, 716, 717,\n       718, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732,\n       733, 734, 735, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747,\n       748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761,\n       762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774,\n       775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788,\n       789, 790, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803,\n       804, 805, 806, 808, 809, 811, 813, 814, 815, 816, 817, 818, 819,\n       821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835,\n       837, 838, 839, 840, 841, 842, 845, 846, 847, 848, 850, 851, 852,\n       854, 855, 856, 858, 859, 860, 861, 862, 864, 866, 867, 868, 869,\n       870, 871, 872, 873, 874]\nprint(len(top_feats))","d6ee6ace":"def metric(y_true, y_pred):\n    metrics = []\n    for _target in train_targets.columns:\n        metrics.append(log_loss(y_true.loc[:, _target], y_pred.loc[:, _target].astype(float), labels=[0,1]))\n    return np.mean(metrics)","f1e848e1":"N_STARTS = 7\n# tensorflow\ntf.random.set_seed(42)\n\nres = train_targets.copy()\n# ss\u63d0\u51fa\u7528\nss.loc[:, train_targets.columns] = 0\nres.loc[:, train_targets.columns] = 0\n\n\nfor seed in range(N_STARTS):\n    for n, (tr, te) in enumerate(MultilabelStratifiedKFold(n_splits=7, random_state=seed, shuffle=True).split(train_targets, train_targets)):\n        print(f'Fold {n}')\n        \n        model = create_model(len(top_feats))\n        checkpoint_path = f'repeat:{seed}_Fold:{n}.hdf5'\n        \n        # \u76e3\u8996\u3059\u308b\u8a55\u4fa1\u5024\u3001\u4f55\u30a8\u30dd\u30c3\u30af\u6539\u5584\u3057\u306a\u304b\u3063\u305f\u3089\u5b66\u7fd2\u7387\u3092\u843d\u3068\u3059\u304b\u3001\u305d\u306e\u5909\u5316\u306e\u5272\u5408\u3001\u6700\u5c0f\u5024\u306a\u3069\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u5b66\u7fd2\u306e\u9032\u307f\u306b\u5fdc\u3058\u3066\u8abf\u6574\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n        # # val_loss\u306e\u6539\u5584\u304c3\u30a8\u30dd\u30c3\u30af\u898b\u3089\u308c\u306a\u304b\u3063\u305f\u3089\u3001\u5b66\u7fd2\u7387\u30920.1\u500d\u3059\u308b\u3002\n        reduce_lr_loss = ReduceLROnPlateau(\n            monitor='val_loss',\n            factor=0.1, patience=3,\n            verbose=1,\n            epsilon=1e-4,\n            mode='min'\n        )\n        \n        # Epoch\u7d42\u4e86\u5f8c\u306e\u5404\u6570\u5024\uff08acc,loss,val_acc,val_loss)\u3092\u76e3\u8996\u3057\u3066\u6761\u4ef6\u304c\u63c3\u3063\u305f\u5834\u5408\u30e2\u30c7\u30eb\u3092\u4fdd\u5b58\u3057\u307e\u3059\n        # monitor:\u76e3\u8996\u3059\u308b\u5024, verbose=0: \u7d50\u679c\u975e\u8868\u793a, save_best_only: True=\u5224\u5b9a\u7d50\u679c\u304b\u3089\u4fdd\u5b58\u3092\u6c7a\u5b9a\u3002False=\u5f8c\u8ff0\u306e'period'\u306e\u9593\u9694\u3067\u4fdd\u5b58, period: \u4f55\u30a8\u30dd\u30c3\u30af\u3054\u3068\u306b\u4fdd\u5b58\u3059\u308b\u304b\n        # save_weights_only: True=\u30e2\u30c7\u30eb\u306e\u91cd\u307f\u304c\u4fdd\u5b58\u3002False=\u30e2\u30c7\u30eb\u5168\u4f53\u3092\u4fdd\u5b58\n        # mode: \u5224\u5b9a\u6761\u4ef6\uff08auto\u3001max\u3001min\uff09max=\u300cacc\u3001val_acc\u300d\u3001min=\u300closs\u3001val_loss\u300d\n        cb_checkpt = ModelCheckpoint(\n            checkpoint_path,\n            monitor='val_loss',\n            verbose=0,\n            save_best_only=True,\n            save_weights_only=True,\n            mode='min'\n        )\n        \n        model.fit(\n            train.values[tr][:, top_feats],\n            train_targets.values[tr],\n            validation_data = (train.values[te][:, top_feats], train_targets.values[te]),\n            epochs=50,\n            batch_size=128,\n            callbacks=[reduce_lr_loss, cb_checkpt],\n            verbose=2\n                 )\n        \n        model.load_weights(checkpoint_path)\n        test_predict = model.predict(test.values[:, top_feats])\n        val_predict = model.predict(train.values[te][:, top_feats])\n        \n        ss.loc[:, train_targets.columns] += test_predict\n        res.loc[te, train_targets.columns] += val_predict\n        print('')\n        \nss.loc[:, train_targets.columns] \/= ((n+1) * N_STARTS)\nres.loc[:, train_targets.columns] \/= N_STARTS","fd3632db":"print(f'OOF Metric: {metric(train_targets, res)}')","7fb32028":"ss.loc[test['cp_type'] == 1, train_targets.columns] = 0","107affe5":"ss.to_csv('submission.csv', index=False)","ff8c21dc":"TensorFlow\u306b\u304a\u3051\u308b\u30013\u7a2e\u985e\uff0f6\u901a\u308a\u306e\u30e2\u30c7\u30eb\u306e\u66f8\u304d\u65b9\u304c\u3042\u308b\u3002\n\n* Sequential\uff08\u7a4d\u5c64\u578b\uff09\u30e2\u30c7\u30eb\uff1a \u30b3\u30f3\u30d1\u30af\u30c8\u3067\u7c21\u5358\u306a\u66f8\u304d\u65b9\n* Functional\uff08\u95a2\u6570\u578b\uff09API\uff1a \u8907\u96d1\u306a\u30e2\u30c7\u30eb\u3082\u5b9a\u7fa9\u3067\u304d\u308b\u67d4\u8edf\u306a\u66f8\u304d\u65b9\n* Subclassing\uff08\u30b5\u30d6\u30af\u30e9\u30b9\u5316\uff09\u30e2\u30c7\u30eb\uff1a \u96e3\u6613\u5ea6\u306f\u5c11\u3057\u4e0a\u304c\u308b\u304c\u3001\u30d5\u30eb\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u304c\u53ef\u80fd\n\n\u3010Sequential\u30e2\u30c7\u30eb\u3011\uff08\u4eca\u56de\uff09\n\n\u3000 \uff081\uff09tf.keras.models.Sequential\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u30fc\u5229\u7528\uff1a \u30b3\u30f3\u30d1\u30af\u30c8\u3067\u7c21\u5358\u306a\u66f8\u304d\u65b9\u3002\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u5b66\u3073\u305f\u3044\u521d\u5fc3\u8005\u306b\u306f\u6700\u3082\u304a\u52e7\u3081\u3067\u304d\u308b\u3002\u4f8b\uff1a\u9023\u8f09\u7b2c2\u56de\n\n\u3000 \uff082\uff09tf.keras.models.Sequential\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306eadd\u30e1\u30bd\u30c3\u30c9\u3067\u8ffd\u52a0\uff1a \u30b7\u30f3\u30d7\u30eb\u3060\u304c\u3001\u3088\u308a\u67d4\u8edf\u6027\u306e\u3042\u308b\u66f8\u304d\u65b9\u3002\u521d\u5fc3\u8005\u5411\u304d\u3002\u4e0a\u8a18\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u30fc\u3067\u306f\u5bfe\u5fdc\u3067\u304d\u306a\u3044\u5834\u5408\u306b\u4f7f\u7528\n\n(https:\/\/www.atmarkit.co.jp\/ait\/articles\/2002\/27\/news021.html)","6b483a4e":"### \u306a\u3093\u3067\u3053\u3053\u3067\u3001\u7d5e\u3063\u305f\uff1f\uff1f loc\u3000ctl_vehicle\u306ftargets\u306a\u3044\u304b\u3089","aef1674f":"\u3053\u308c\u306a\u306b\uff1f\uff1f\u3000\u3069\u3053\u304b\u3067\u7279\u5fb4\u91cf\u6c7a\u5b9a\u3057\u305f\uff1f \u3053\u306e785\u306e\u6570\u3092\u3001create_model\u306e\u969b\u306einput()\u306b\u5165\u308c\u3066\u3044\u308b\u3002"}}