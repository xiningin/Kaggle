{"cell_type":{"b1efb159":"code","ee9c4a6b":"code","daaea739":"code","0d322efc":"code","2d5aa4a3":"code","553588d0":"code","e11a33c3":"code","53ad5349":"code","17f1c320":"code","c6cc235a":"code","0e631d7d":"code","82ff2145":"code","72aef90b":"code","ae4678e9":"code","88389e48":"code","08122bcb":"code","ab5f8713":"code","75d6f274":"code","a8fdca79":"code","b62d5ee9":"markdown","7fda072e":"markdown","a606a059":"markdown","a32749b4":"markdown","f4fe1125":"markdown","ee656fa2":"markdown","85e66c8f":"markdown","ca613aa9":"markdown"},"source":{"b1efb159":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","ee9c4a6b":"\nmatch_df = pd.read_csv(\"..\/input\/major-league-soccer-dataset\/matches.csv\")\nevent_df = pd.read_csv(\"..\/input\/major-league-soccer-dataset\/events.csv\")\ntable_df = pd.read_csv(\"..\/input\/major-league-soccer-dataset\/all_tables.csv\")\nplayer_df = pd.read_csv(\"..\/input\/major-league-soccer-dataset\/all_players.csv\")\ngk_df = pd.read_csv(\"..\/input\/major-league-soccer-dataset\/all_goalkeepers.csv\")","daaea739":"match_df.tail(3)","0d322efc":"# to get rid of the starting and bench columns\nmatch2_df = match_df[[item for item in match_df.columns.tolist() if 'starting' not in item and 'bench' not in item]]\nmatch2_df.head()","2d5aa4a3":"match2_df.columns.tolist()","553588d0":"# Depending on what you're doing, there's other columns you can safely drop\n# for example, unless you're merging this with other soccer data, 'league' can be dropped\n# for example, 'shootout' and 'game_status' won't really tell you anything for regular \n# ... season games as there are no shootouts\nmatch3_df = match2_df.drop(['time (utc)', 'venue', 'league', 'part_of_competition', 'shootout', 'game_status'], axis=1)\nmatch3_df.head()","e11a33c3":"# Using the 'id' column from '2020_matches.csv', you can get the events for a game\n# Note: This is the full commentary, not just key events\none_game_events_df = event_df[ event_df['id']==571931 ]\nprint(len(one_game_events_df))\none_game_events_df.head()","53ad5349":"# Specific events can be found by searching for keywords\n# The format for specific events, like goals and yellow cards seem to be consistent\none_game_events_df[ one_game_events_df['Event'].str.contains('Goal!')]","17f1c320":"# Similarly, all events for one team in a game\none_game_events_df[ one_game_events_df['Event'].str.contains('San Jose Earthquakes')]","c6cc235a":"# The table for each year has two 1s, two 2s, etc. as the teams are split into two conferences\n# Across the years, the Eastern Conference is first and the Western Conference is second\ntable_2003 = table_df[ table_df['Year']==2003 ].reset_index()","0e631d7d":"east, west = np.array_split(table_2003, [table_2003[ table_2003['Place'] == 1 ].index[1]])\neast","82ff2145":"west","72aef90b":"# Splitting the whole df into two lists, one for each conference\n# Note: Some teams have switched conferences at some point\nconferences = np.array_split(table_df, table_df[ table_df['Place'] == 1 ].index[1:].tolist())\neasts, wests = conferences[::2], conferences[1::2]\nprint('east len', len(easts))\nprint(easts[0])\nprint('west len', len(wests))\nprint(wests[-1])","ae4678e9":"player_df = player_df[ player_df['Year'] == 2020]\n\n# Default sorted by goals ('G')\nplayer_df.head()","88389e48":"# you can search through two columns at once like so\nplayer_df[ (player_df['SOG%'] > 50) & (player_df['SHTS'] > 10)].sort_values('SOG%', ascending=False)","08122bcb":"gk_df = gk_df[ gk_df['Year'] == 2020 ]\ngk_df.head()","ab5f8713":"# You can split the penalty kick column into two\ngk_df[['PKNS', 'PKF']] = gk_df['PKG\/A'].str.split('\/', expand=True) # penalties not saved, penalties faced\ngk_df.head()","75d6f274":"player_df = pd.read_csv(\"..\/input\/major-league-soccer-dataset\/all_players.csv\")\n\ng_90 = []\ng = []\nfor year in range(1996, 2020):\n    p_df = player_df[ player_df['Year']==year ]\n    g_90.append(p_df.iloc[0]['G\/90min'])\n    g.append(p_df.iloc[0]['G'])","a8fdca79":"fig, ax1 = plt.subplots(figsize=(8,6))\n\nplt.title('Goals per 90 Mins for the Highest Scorer each Season', fontdict={'fontsize':18})\nplt.xlabel('Season', fontdict={'fontsize':16})\nax1.set_ylabel('Goals per 90', fontdict={'fontsize':16})\nax1.plot(range(1996, 2020), g_90, c='r')\nax1.tick_params(axis='y', labelcolor='r', labelsize=14)\n\nax2 = ax1.twinx()\nax2.plot(range(1996, 2020), g, c='b')\nax2.set_ylabel('Goals', fontdict={'fontsize':16})\nax2.tick_params(axis='y', labelcolor='b', labelsize=14)\n\nfig.tight_layout()\nplt.show()","b62d5ee9":"# gk_df","7fda072e":"# event_df","a606a059":"# match_df","a32749b4":"Thank you for reading! If you have any questions about this kernel or the dataset feel free to leave them here or on the [dataset page](https:\/\/www.kaggle.com\/josephvm\/major-league-soccer-dataset\/discussion). ","f4fe1125":"# player_df","ee656fa2":"This is a quick introduction to my [MLS dataset](https:\/\/www.kaggle.com\/josephvm\/major-league-soccer-dataset). It will quickly show each file, show a few tricks, and then have one graph. ","85e66c8f":"# Quick Analysis","ca613aa9":"# table_df"}}