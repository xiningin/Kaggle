{"cell_type":{"573c034c":"code","9f673e19":"code","768c8c29":"code","424604b3":"code","77fe9099":"code","1e8e6d70":"code","638738f5":"code","2df2cbd7":"code","9efdfb7d":"code","0c57e0e8":"code","81203f4c":"code","7dc4769b":"code","8666e8a0":"code","c1cf6ee3":"code","29988983":"code","e8070b40":"code","be19c6e6":"code","5e209080":"code","48f1b1d1":"code","2885ca31":"code","5dab4034":"code","5417702a":"code","f05db02d":"code","94b094f0":"code","22fa67eb":"code","7c6a6cd1":"code","ddeff43b":"code","69d1626c":"code","940f5094":"code","9a456f36":"code","3ae76f8a":"code","14c94c0e":"code","d9e61f46":"code","6b09faee":"code","41e34343":"code","d26f25e5":"code","dbf248f2":"code","cb8c8472":"code","db8cfe56":"markdown","0e09cc37":"markdown","64e20b0a":"markdown","aebec1c6":"markdown","b22fe80d":"markdown","26fa5696":"markdown","b737bcfa":"markdown","761bd817":"markdown","723f1234":"markdown","97e3097e":"markdown","4a19ede2":"markdown","f10031ca":"markdown","5ffaa95a":"markdown","59b29394":"markdown","89310764":"markdown"},"source":{"573c034c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","9f673e19":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.arima_model import ARIMA","768c8c29":"df = pd.read_csv('..\/input\/prices-split-adjusted.csv', index_col=0)\ndf.head()","424604b3":"# Filter dataframe only for chosen ticker symbol\ndfa = df[df['symbol'] == 'AAPL']","77fe9099":"dfa.head()","1e8e6d70":"dfa.index.sort_values()","638738f5":"# Convert index to pandas datetime\ndfa.index = pd.to_datetime(dfa.index, format=\"%Y\/%m\/%d\")","2df2cbd7":"df_final = dfa.drop(['symbol','open','low','high','volume'], axis=1)","9efdfb7d":"# Conver to Series to run Dickey-Fuller test\ndf_final = pd.Series(df_final['close'])","0c57e0e8":"type(df_final)","81203f4c":"def check_stationarity(ts_data):\n    \n    # Rolling statistics\n    roll_mean = ts_data.rolling(30).mean()\n    roll_std = ts_data.rolling(5).std()\n    \n    # Plot rolling statistics\n    fig = plt.figure(figsize=(20,10))\n    plt.subplot(211)\n    plt.plot(ts_data, color='black', label='Original Data')\n    plt.plot(roll_mean, color='red', label='Rolling Mean(30 days)')\n    plt.legend()\n    plt.subplot(212)\n    plt.plot(roll_std, color='green', label='Rolling Std Dev(5 days)')\n    plt.legend()\n    \n    # Dickey-Fuller test\n    print('Dickey-Fuller test results\\n')\n    df_test = adfuller(ts_data, regresults=False)\n    test_result = pd.Series(df_test[0:4], index=['Test Statistic','p-value','# of lags','# of obs'])\n    print(test_result)\n    for k,v in df_test[4].items():\n        print('Critical value at %s: %1.5f' %(k,v))\n    ","7dc4769b":"check_stationarity(df_final)","8666e8a0":"# Log transform time series\ndf_final_log = np.log(df_final)\ndf_final_log.head()","c1cf6ee3":"# Check stationarity\ndf_final_log.dropna(inplace=True)\ncheck_stationarity(df_final_log)","29988983":"# Log Differencing\ndf_final_log_diff = df_final_log - df_final_log.shift()","e8070b40":"df_final_log_diff.dropna(inplace=True)\ncheck_stationarity(df_final_log_diff)","be19c6e6":"# Differencing\ndf_final_diff = df_final - df_final.shift()","5e209080":"df_final_diff.dropna(inplace=True)\ncheck_stationarity(df_final_diff)","48f1b1d1":"from statsmodels.tsa.stattools import acf, pacf","2885ca31":"df_acf = acf(df_final_diff)","5dab4034":"df_pacf = pacf(df_final_diff)","5417702a":"import statsmodels.api as sm","f05db02d":"fig1 = plt.figure(figsize=(20,10))\nax1 = fig1.add_subplot(211)\nfig1 = sm.graphics.tsa.plot_acf(df_acf, ax=ax1)\nax2 = fig1.add_subplot(212)\nfig1 = sm.graphics.tsa.plot_pacf(df_pacf, ax=ax2)","94b094f0":"model = ARIMA(df_final_diff, (1,1,0))","22fa67eb":"fit_model = model.fit(full_output=True)","7c6a6cd1":"predictions = model.predict(fit_model.params, start=1760, end=1769)","ddeff43b":"fit_model.summary()","69d1626c":"predictions","940f5094":"fit_model.predict(start=1760, end=1769)","9a456f36":"pred_model_diff = pd.Series(fit_model.fittedvalues, copy=True)\npred_model_diff.head()","3ae76f8a":"# Calculate cummulative sum of the fitted values (cummulative sum of differences)\npred_model_diff_cumsum = pred_model_diff.cumsum()\npred_model_diff_cumsum.head()","14c94c0e":"# Element-wise addition back to original time series\ndf_final_trans = df_final.add(pred_model_diff_cumsum, fill_value=0)\n# Last 5 rows of fitted values\ndf_final_trans.tail()","d9e61f46":"# Last 5 rows of original time series\ndf_final.tail()","6b09faee":"# Plot of orignal data and fitted values\nplt.figure(figsize=(20,10))\nplt.plot(df_final, color='black', label='Original data')\nplt.plot(df_final_trans, color='red', label='Fitted Values')\nplt.legend()","41e34343":"x = df_final.values\ny = df_final_trans.values","d26f25e5":"# Trend of error\nplt.figure(figsize=(20,8))\nplt.plot((x - y), color='red', label='Delta')\nplt.axhline((x-y).mean(), color='black', label='Delta avg line')\nplt.legend()","dbf248f2":"final_pred = []\nfor i in predictions:\n    t = df_final[-1] + i\n    final_pred.append(t)","cb8c8472":"final_pred = pd.Series(final_pred)\nfinal_pred","db8cfe56":"### The log transformation is not stationary as test statistic is greater than critical values and you can also visualize this on the 1st graph.","0e09cc37":"## Final step is to create a Series with ten prediction values","64e20b0a":"### This is my first kernel. As the data ends by 2016, you can compare it to actual share of the comapny chosen by the user to stock data from Google or Yahoo finance. Comments are welcome!","aebec1c6":"### Import other modules","b22fe80d":"### Time to re-transform data back to original scale","26fa5696":"### As simple differencing yields a test statistic much lower than critical values, we will use this for applying ARIMA.","b737bcfa":"### Log differencing transformation of original time series","761bd817":"#### As Test statistic is greater than all critical values, the time series is clearly not stationary. Testing different transformations for stationarity is required before applying ARIMA model to time series.","723f1234":"### Average error appears to be around $0.35 per share","97e3097e":"### Import data and check head","4a19ede2":"# ARIMA model for NYSE stock data","f10031ca":"### Log transformation of original time series","5ffaa95a":"## Function to check stationarity","59b29394":"### Input from user to select company for ARIMA model","89310764":"### Simple differencing transformation of original time series"}}