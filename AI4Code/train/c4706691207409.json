{"cell_type":{"fd1fef0d":"code","605c1f5e":"code","01be38f5":"code","7c7af402":"code","48e80ca9":"code","5ba0464a":"code","b6baff75":"code","ae60c174":"code","8c8043cf":"code","b7c68341":"code","2a5773a2":"code","3601bf04":"code","eab85555":"code","ad593de1":"code","7495bb7e":"code","1b40b29a":"code","9c92ab61":"code","2496553b":"code","a88d92d3":"code","ec842b75":"code","d84fdbe7":"code","2e634909":"code","97d86adc":"code","7673134e":"code","dd25579f":"code","6d65dcd8":"code","35240a4e":"code","98c1a66b":"code","cf08320d":"code","eb9fcac5":"code","8402321e":"code","cb1e7043":"code","3fc2c012":"code","6a692e8a":"code","55974700":"code","4f71d6b8":"code","8405290e":"code","1a1976bc":"code","99b66490":"code","a7db60ea":"markdown","c7f30408":"markdown","09ced017":"markdown","a344bb42":"markdown","1a23eaff":"markdown","a5c39607":"markdown","bdea463d":"markdown","53cbff1b":"markdown","75fd514a":"markdown","7828f295":"markdown","a502aa7c":"markdown","359e34a0":"markdown","dd435e95":"markdown","2f8d80c1":"markdown","02fb93e2":"markdown","c085d8ee":"markdown","77549abe":"markdown","9f80d4e2":"markdown","64cbf311":"markdown"},"source":{"fd1fef0d":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report","605c1f5e":"df = pd.read_csv('..\/input\/hotel-booking-demand\/hotel_bookings.csv')\ndf.head()","01be38f5":"# to print the full summary\ndf.info()","7c7af402":"# Print the short summary of the\n# dataframe by setting verbose = False\ndf.info(verbose = False)","48e80ca9":"df.describe()","5ba0464a":"df.isnull().sum()","b6baff75":"df.children.value_counts()","ae60c174":"df.country.value_counts()[:15]","8c8043cf":"df = df.drop('company',axis=1)\ndf['agent'] = df['agent'].fillna(0)\ndf['children'] = df['children'].fillna(0)","b7c68341":"df.isnull().sum()","2a5773a2":"counts = df.arrival_date_month.value_counts()\ncounts.sort_index(inplace=True)\nsns.barplot(x = counts.index, y = counts)\nplt.ylabel('counts')\nplt.xticks(rotation=45);","3601bf04":"counts = df.arrival_date_year.value_counts()\ncounts.sort_index(inplace=True)\nsns.barplot(x = counts.index, y = counts)\nplt.xlabel('arrival_date_year')\nplt.ylabel('counts')","eab85555":"counts = df.is_canceled.value_counts()\ncounts.sort_index(inplace=True)\nsns.barplot(x = counts.index, y = counts)\nplt.xlabel('is_canceled')\nplt.ylabel('counts')","ad593de1":"sns.barplot(y=\"is_canceled\", x=\"deposit_type\", data=df)","7495bb7e":"sns.countplot(data=df, x = 'reserved_room_type')\nplt.show()","1b40b29a":"char = df.select_dtypes(include='object')\nfor i in char:\n    print(i , df[i].nunique())","9c92ab61":"df.drop(['days_in_waiting_list', 'arrival_date_year', 'arrival_date_year', 'assigned_room_type', 'booking_changes',\n               'reservation_status', 'country', 'days_in_waiting_list'], axis = 1, inplace=True)","2496553b":"le=LabelEncoder()\ndf['reservation_status_date'] = pd.to_datetime(df['reservation_status_date'])\ndf['year'] = df['reservation_status_date'].dt.year\ndf['month'] = df['reservation_status_date'].dt.month\ndf['day'] = df['reservation_status_date'].dt.day\ndf.drop(['reservation_status_date','arrival_date_month'] , axis = 1, inplace = True)","a88d92d3":"a = df.select_dtypes(object).columns\ncat_list = []\nfor i in a:\n    print (i, df[i].nunique())\n    cat_list.append(i)","ec842b75":"for i in cat_list:\n    df[i] = le.fit_transform(df[i])\ndf['year'] = le.fit_transform(df['year'])\ndf['month'] = le.fit_transform(df['month'])\ndf['day'] = le.fit_transform(df['day'])","d84fdbe7":"y = df['is_canceled']\nX = df.drop('is_canceled', axis = 1)\nX_train, X_test, y_train, y_test = train_test_split(X,y,random_state=46,test_size=0.3)","2e634909":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","97d86adc":"log_reg = LogisticRegression()\nlog_reg.fit(X_train,y_train)\npred_log = log_reg.predict(X_test)\nacc_log= accuracy_score(pred_log,y_test)\nprint ('Test Accuracy : {:.2f}%'.format(acc_log*100))","7673134e":"print(classification_report(y_test,pred_log))","dd25579f":"model_dtc = DecisionTreeClassifier()\nmodel_dtc.fit(X_train, y_train)\ny_pred_dtc = model_dtc.predict(X_test)\nacc_dtc = accuracy_score(y_test, y_pred_dtc)\nprint ('Test Accuracy : {:.2f}%'.format(acc_dtc*100))","6d65dcd8":"print(classification_report(y_test, y_pred_dtc))","35240a4e":"model_svc = SVC()\nmodel_svc.fit(X_train, y_train)\npred_svc = model_svc.predict(X_test)\nacc_svc =  accuracy_score(y_test, pred_svc)\nprint ('Test Accuracy : {:.2f}%'.format(acc_svc*100))","98c1a66b":"print(classification_report(pred_svc, y_test))","cf08320d":"cf_matrix_svc = confusion_matrix(y_test, pred_svc)\nsns.heatmap(cf_matrix_svc\/np.sum(cf_matrix_svc), annot=True,fmt= '0.2%')","eb9fcac5":"model_rfc = RandomForestClassifier()\nmodel_rfc.fit(X_train, y_train)\npred_rfc = model_rfc.predict(X_test)\nacc_rfc = accuracy_score(pred_rfc, y_test)\nprint ('Test Accuracy : {:.2f}%'.format(acc_rfc*100))","8402321e":"print(classification_report(pred_rfc, y_test))","cb1e7043":"model_adaB = AdaBoostClassifier(learning_rate=0.5)\nmodel_adaB.fit(X_train, y_train)\npred_adaB = model_adaB.predict(X_test)\nacc_adaB = accuracy_score(y_test, pred_adaB)\nprint ('Test Accuracy : {:.2f}%'.format(acc_adaB*100))","3fc2c012":"print(classification_report(pred_adaB, y_test))","6a692e8a":"cf_matrix_adaB = confusion_matrix(y_test, pred_adaB)\nsns.heatmap(cf_matrix_adaB\/np.sum(cf_matrix_adaB), annot=True,fmt= '0.2%')","55974700":"model_neigh = KNeighborsClassifier()\nmodel_neigh.fit(X_train, y_train)\npred_neigh = model_neigh.predict(X_test)\nacc_neigh = accuracy_score(y_test, pred_neigh)\nprint ('Test Accuracy : {:.2f}%'.format(acc_neigh*100))","4f71d6b8":"print(classification_report(pred_neigh, y_test))","8405290e":"output = pd.DataFrame({\"Model\":['Logistic Regression','SVC','KNeighborsClassifier',\n                                'Decision Tree Classifier','RandomForestClassifier',\n                               'AdaBoostClassifier'],\n                      \"Accuracy\":[acc_log, acc_svc, acc_neigh, acc_dtc, acc_rfc, acc_adaB]})","1a1976bc":"output","99b66490":"sns.barplot(x='Accuracy', y='Model', data=output)","a7db60ea":"To get a quick overview of the dataset we use the dataframe.info() function","c7f30408":"# Load Datase","09ced017":"bar graph showing \"arrival_date_year\"","a344bb42":"# Decision Tree Classifier","1a23eaff":"bar graph showing \"deposit_type\" and \"is_canceled\"\n","a5c39607":"# KNeighbors Classifier","bdea463d":"# Feature Scaling\n","53cbff1b":"# Random Forest Classifier","75fd514a":"# Adaboost Classifier","7828f295":"# Train & Test Split","a502aa7c":"bar graph showing \"reserved_room_type\"","359e34a0":"bar graph showing \"arrival_date_month\"","dd435e95":"bar graph showing they cancel their reservation or not","2f8d80c1":"# Logistic Regression","02fb93e2":"# Final Report","c085d8ee":"# SVC","77549abe":"isnull()  methods are used to check and manage NULL values in a data frame.","9f80d4e2":"describe() is used to view some basic statistical details like percentile, mean, std etc. ","64cbf311":"# Importing Libraries"}}