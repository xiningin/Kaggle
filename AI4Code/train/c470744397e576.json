{"cell_type":{"c045b405":"code","63ade51a":"code","36908706":"code","7b09f655":"code","322e9125":"code","53f4aa61":"code","fb96b7cf":"code","fd0f633e":"code","d77ba0e8":"code","56d692a5":"code","573750e7":"code","a0b7c19d":"code","3fd16a5c":"code","a0f66cbf":"code","dc449fea":"code","bd9195b0":"code","abe8d474":"code","4686de69":"code","0d190a1b":"code","334dce6d":"code","b9cb60aa":"code","f8a21a39":"code","ebb43ab0":"code","428384f7":"code","5921ab1a":"markdown","a32f09db":"markdown","1f41fb85":"markdown"},"source":{"c045b405":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","63ade51a":"#loading in the csv data\ndf = pd.read_csv('\/kaggle\/input\/fashion-product-images-small\/myntradataset\/styles.csv',error_bad_lines=False)\n\ndf.head()","36908706":"df[1748:1754].head(6)","7b09f655":"print(df[540:541].id.values[0])","322e9125":"from matplotlib import pyplot as plt\nimport cv2\nfor i in range(1748, 1754):\n    \n    thisId = str(df[i:i+1].id.values[0])\n    \n    imageName = '\/kaggle\/input\/fashion-product-images-small\/myntradataset\/images\/'+ thisId +'.jpg'\n    image = cv2.imread(imageName)\n    image = RGB_im = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    \n    plt.imshow(image)\n    plt.title(f'Image {thisId}')\n    plt.show()","53f4aa61":"df = df.dropna()\ndf.nunique()\ndf.columns","fb96b7cf":"# Looking at all the unique labels in all categorical columns \ncat_columns = ['gender', 'masterCategory', 'subCategory', 'articleType','baseColour', 'season', 'year', 'usage']\n\nfor col in cat_columns:\n    print(col)\n    print(df[col].unique())\n    print('-------------------------')","fd0f633e":"value_counts = df['subCategory'].value_counts()\n\nindexes = value_counts.index\n\nvalues = value_counts.values\n\ntypes_used = indexes[:i]\nprint('Types used: ',types_used)","d77ba0e8":"# Taking a subset of 20000 images\nold_df = df\ndf = old_df[:25000]\nlen(df)","56d692a5":"df_trimmed = old_df[:15923]\n\ndf_extended = pd.concat([old_df, df_trimmed], ignore_index=True)\n\nlen(df_extended)","573750e7":"# AUGMENT\n\ndata = []\n\n# Reading all the images and processing the data in them \n\nfrom tensorflow.keras.preprocessing.image import img_to_array\nimport cv2\n\nIX = 80\nIY = 60\n\ninvalid_ids = []\n\ncount = 0\n\nfor name in df.id:\n\n    try:\n        count += 1\n        image = cv2.imread('\/kaggle\/input\/fashion-product-images-small\/myntradataset\/images\/'+str(name)+'.jpg')\n        imageResized = cv2.resize(image, (IX,IY) )\n        \n        # Flipping the image horizontally -> augmentation of the first 15923 image starts here\n        if (count >= 44077):\n            imageResized = cv2.flip(imageResized, 1)\n        \n        image = img_to_array(imageResized)\n        data.append(image)        \n    except: \n        # Images for certain ids are missing, so they are not added to the dataset  \n        invalid_ids.append(name)","a0b7c19d":"# NO AUGMENT\n\n#data = []\n\n# Reading all the images and processing the data in them \n\n#from tensorflow.keras.preprocessing.image import img_to_array\n#import cv2\n\n#IX = 80\n#IY = 60\n\n#invalid_ids = []\n\n#for name in df.id:\n\n#    try:\n#        image = cv2.imread('\/kaggle\/input\/fashion-product-images-small\/myntradataset\/images\/'+str(name)+'.jpg')\n#        imageResized = cv2.resize(image, (IX,IY) )\n#        image = img_to_array(imageResized)\n#        data.append(image)        \n#    except: \n        # Images for certain ids are missing, so they are not added to the dataset  \n#        invalid_ids.append(name)","3fd16a5c":"from tensorflow.keras.preprocessing.image import img_to_array\nimport cv2\n\nIX = 80\nIY = 60","a0f66cbf":"labelsInit = []\n\ncount = 0\n\nfor index, row in df.iterrows():\n    \n    count += 1\n    \n    if row['id'] in invalid_ids:\n        continue\n\n    labelsInit.append(row['subCategory'])\n    \nprint(count)\nlen(labelsInit)","dc449fea":"# Unique categories\ndf[\"subCategory\"].unique()","bd9195b0":"import numpy as np\n\n# converting data into numpy arrays\n\ndata = np.array(data, dtype=\"float\") \/ 255.0\nlabels = np.array(labelsInit)\n\nprint(labels)","abe8d474":"from sklearn.preprocessing import LabelBinarizer\n\n# creating a binary vector for the input labels \n\nmlb = LabelBinarizer()\nlabels = mlb.fit_transform(labels)\n\nprint(mlb.classes_)","4686de69":"from tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.layers import Dropout\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Activation, Flatten, Conv2D, MaxPooling2D\nfrom tensorflow.keras.optimizers import Adam\n\ninputShape = (IY, IX, 3)\n\nmodel = Sequential()\n\nmodel.add(Conv2D(32, (3, 3), padding=\"same\",input_shape=inputShape))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.4)) # Dropout increased from 0.3 to 0.4\n\nmodel.add(Conv2D(64, (3, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.4)) # Dropout increased from 0.3 to 0.4\n\nmodel.add(Flatten()) \n\nmodel.add(Dense(128))\nmodel.add(Activation('relu'))\n\n\nout = len(mlb.classes_)\n\nmodel.add(Dense(out))\nmodel.add(Activation('sigmoid'))\n\noptimizer = Adam(learning_rate=0.000875, beta_1=0.9, beta_2=0.999, epsilon=1e-07, amsgrad=True)\n\nmodel.compile(loss='binary_crossentropy',\n              optimizer=optimizer,\n              metrics=['mse'])","0d190a1b":"model.summary()","334dce6d":"from sklearn.model_selection import train_test_split\n\n# splitting data into testing and training set \n\n(trainX, testX, trainY, testY) = train_test_split(data,labels, test_size=0.2, random_state=42)","b9cb60aa":"batch = 32\nE = 100\n\n#training the model \nmodel.fit(x=trainX,y=trainY,\n          epochs=E ,verbose=1)","f8a21a39":"# TEST SET\nprint(\"Predicting on the test set\")\npreds = model.predict(testX)\n\n\n# since the predictions of the model are sigmoid, we will first binarize them to 0 or 1\npred_binarized = []\n\nfor pred in preds:\n    index = np.argmax(pred)\n    ar = np.zeros((pred.shape[0],), dtype=int)\n    ar[index] = 1\n    pred_binarized.append(ar)\n\npred_binarized = np.array(pred_binarized)   \n\n# we convert the output vectors to the predicted labels\ntrue_test_labels = mlb.inverse_transform(testY)\npred_test_labels = mlb.inverse_transform(pred_binarized)\n\ncorrect = 0\nwrong = 0\n\n# Evaluating the predictions of the model\n\nfor i in range(len(testY)):\n\n    true_labels = list(true_test_labels[i])\n\n    pred_labels = list(pred_test_labels[i])\n\n    label1 = true_labels[0]\n    label2 = true_labels[1]\n\n    if label1 in pred_labels:\n        correct+=1\n    else:\n        wrong+=1\n\n    if label2 in pred_labels:\n        correct+=1\n    else:\n        wrong+=1    \n\n\n\nprint('correct: ', correct)\nprint('missing\/wrong: ', wrong)\nprint('Accuracy: ',correct\/(correct+wrong))","ebb43ab0":"# TRAIN SET\nprint(\"Predicting on the train set\")\npredsTrain = model.predict(trainX)\n\n\n# since the predictions of the model are sigmoid, we will first binarize them to 0 or 1\npred_binarized_train = []\n\nfor pred in predsTrain:\n    index = np.argmax(pred)\n    ar = np.zeros((pred.shape[0],), dtype=int)\n    ar[index] = 1\n    pred_binarized_train.append(ar)\n\npred_binarized_train = np.array(pred_binarized_train)   \n\n# we convert the output vectors to the predicted labels\ntrue_train_labels = mlb.inverse_transform(trainY)\npred_train_labels = mlb.inverse_transform(pred_binarized_train)\n\ncorrect = 0\nwrong = 0\n\n# Evaluating the predictions of the model\n\nfor i in range(len(trainY)):\n\n    true_labels = list(true_train_labels[i])\n\n    pred_labels = list(pred_train_labels[i])\n\n    label1 = true_labels[0]\n    label2 = true_labels[1]\n    \n    if label1 in pred_labels:\n        correct+=1\n    else:\n        wrong+=1\n\n    if label2 in pred_labels:\n        correct+=1\n    else:\n        wrong+=1    \n\nprint('correct: ', correct)\nprint('missing\/wrong: ', wrong)\nprint('Accuracy: ',correct\/(correct+wrong))","428384f7":"for i in range(len(testY)):\n    if (true_test_labels[i] != pred_test_labels[i]):\n        print('True labels: ',true_test_labels[i],' Predicted labels: ',pred_test_labels[i])","5921ab1a":"Now we will create binary vectors as the outputs of the model","a32f09db":"Now we will load in all the images from the remaining rows, and convert them to numpy arrays with img_to_array function in keras.","1f41fb85":"The images in this Dataset are very low resolution (80x60). We will be using the categories that are visually distinct even at such a low resolution.\n\nThe categories year, usage, season, and gender mighht not be clearly visually distinct in some cases, so we wont be using them.\n\nThe categories, masterCategory and subCategory are distinct enough groups, but they are not specific enough for practical use. \n"}}