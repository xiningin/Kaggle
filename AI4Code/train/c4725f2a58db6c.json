{"cell_type":{"293a70f9":"code","b2d28715":"code","db7418dc":"code","362aaac8":"code","0d936c66":"code","43eaeba4":"code","beeb047d":"code","0e8470b0":"code","4d81ed78":"code","f8ed9154":"code","df5febeb":"code","30bdc0e7":"code","0e48c197":"code","b431c787":"code","fcd1748e":"code","07cccc52":"code","240d83a5":"code","13d1a364":"code","e03e24f0":"code","db21e3c9":"code","50959657":"code","77c80be1":"markdown","8d2625a5":"markdown","6c29a2a8":"markdown"},"source":{"293a70f9":"from __future__ import print_function\nimport keras\nfrom keras.datasets import mnist\nfrom keras.utils import np_utils\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras import backend as K\nfrom sklearn.model_selection import train_test_split\nimport pandas as pd\nimport seaborn as sns","b2d28715":"import matplotlib.pyplot as plt\nimport numpy as np\nimport time\ndef plt_dynamic(x, vy, ty, ax, colors=['b']):\n    ax.plot(x, vy, 'b', label=\"validation Loss\")\n    ax.plot(x, ty, 'r', label=\"Train Loss\")\n    plt.legend()\n    plt.grid()\n    fig.canvas.draw()","db7418dc":"batch_size = 128\nnum_classes = 10\nepochs = 12","362aaac8":"# input image dimensions\nimg_rows, img_cols = 28, 28","0d936c66":"# the data, split between train and test sets\n# Load the data\n(x_train, y_train), (x_test, y_test) = mnist.load_data()","43eaeba4":"if K.image_data_format() == 'channel_first':\n    x_train = x_train.reshape(x_train.shape[0], 1, img_rows, img_cols)\n    x_test = x_test.reshape(x_test.shape[0], 1, img_rows, img_cols)\n    input_shape = (img_rows, img_cols)\nelse:\n    x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)\n    x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)\n    input_shape = (img_rows, img_cols, 1)","beeb047d":"# Normalization\n'''We perform a grayscale normalization to reduce the effect of illumination's differences.\nMoreover the CNN converg faster on [0..1] data than on [0..255].'''\nx_train = x_train.astype('float32')\nx_test = x_test.astype('float32')\nx_train \/= 255\nx_test \/= 255\nprint('x_train shape:', x_train.shape)\nprint(x_train.shape[0], 'train samples')\nprint(x_test.shape[0], 'test samples')","0e8470b0":"# convert class vectors to binary class matrices\ny_train = keras.utils.to_categorical(y_train, num_classes)\ny_test = keras.utils.to_categorical(y_test, num_classes)","4d81ed78":"# The first layer will have 32-3 x 3 filters,\n# The second layer will have 64-3 x 3 filters,\n# The third layer will have 128-3 x 3 filters.\n# In addition, there are three max-pooling layers each of size 2 x 2.\n\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3, 3),activation='relu',input_shape=input_shape))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(64, (3, 3), activation='relu',padding='same'))\nmodel.add(MaxPooling2D(pool_size=(2, 2),padding='same'))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(128, (3, 3), activation='relu',padding='same'))                 \nmodel.add(MaxPooling2D(pool_size=(2, 2),padding='same'))\nmodel.add(Dropout(0.4))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))       \nmodel.add(Dropout(0.3))\nmodel.add(Dense(num_classes, activation='softmax'))","f8ed9154":"model.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer=keras.optimizers.Adadelta(),\n              metrics=['accuracy'])","df5febeb":"history = model.fit(x_train, y_train,\n          batch_size=batch_size,\n          epochs=epochs,\n          verbose=1,\n          validation_data=(x_test, y_test))\nscore = model.evaluate(x_test, y_test, verbose=0)","30bdc0e7":"print('Test score:', score[0])\nprint('Test accuracy:', score[1])\n\nfig, ax = plt.subplots(1, 1)\nax.set_xlabel('epoch')\nax.set_ylabel('Categorical Crossentropy Loss')\n\n#list of epoch numbers\nx = list(range(1, epochs+1))\nvy = history.history['val_loss']\nty = history.history['loss']\nplt_dynamic(x, vy, ty, ax)","0e48c197":"# The first layer will have 32-2 x 2 filters,\n# The second layer will have 64-2 x 2 filters,\n# The third layer will have 128-2 x 2 filters.\n# In addition, there are three max-pooling layers each of size 2 x 2.\n\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size=(2, 2),activation='relu',input_shape=input_shape))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(64, (2, 2), activation='relu',padding='same'))\nmodel.add(MaxPooling2D(pool_size=(2, 2),padding='same'))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(128, (2, 2), activation='relu',padding='same'))                 \nmodel.add(MaxPooling2D(pool_size=(2, 2),padding='same'))\nmodel.add(Dropout(0.4))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))       \nmodel.add(Dropout(0.3))\nmodel.add(Dense(num_classes, activation='softmax'))","b431c787":"model.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer=keras.optimizers.Adadelta(),\n              metrics=['accuracy'])","fcd1748e":"model.fit(x_train, y_train,\n          batch_size=batch_size,\n          epochs=epochs,\n          verbose=1,\n          validation_data=(x_test, y_test))\nscore = model.evaluate(x_test, y_test, verbose=0)","07cccc52":"print('Test score:', score[0])\nprint('Test accuracy:', score[1])\n\nfig, ax = plt.subplots(1, 1)\nax.set_xlabel('epoch')\nax.set_ylabel('Categorical Crossentropy Loss')\n\n#list of epoch numbers\nx = list(range(1, epochs+1))\nvy = history.history['val_loss']\nty = history.history['loss']\nplt_dynamic(x, vy, ty, ax)","240d83a5":"# The first layer will have 32-5 x 5 filters,\n# The second layer will have 64-5 x 5 filters,\n# The third layer will have 128-5 x 5 filters.\n# In addition, there are three max-pooling layers each of size 2 x 2.\n\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size=(5, 5),activation='relu',input_shape=input_shape))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(64, (5, 5), activation='relu',padding='same'))\nmodel.add(MaxPooling2D(pool_size=(2, 2),padding='same'))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(128, (5, 5), activation='relu',padding='same'))                 \nmodel.add(MaxPooling2D(pool_size=(2, 2),padding='same'))\nmodel.add(Dropout(0.4))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))       \nmodel.add(Dropout(0.3))\nmodel.add(Dense(num_classes, activation='softmax'))","13d1a364":"model.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer=keras.optimizers.Adadelta(),\n              metrics=['accuracy'])","e03e24f0":"model.fit(x_train, y_train,\n          batch_size=batch_size,\n          epochs=epochs,\n          verbose=1,\n          validation_data=(x_test, y_test))\nscore = model.evaluate(x_test, y_test, verbose=0)","db21e3c9":"print('Test score:', score[0])\nprint('Test accuracy:', score[1])\n\nfig, ax = plt.subplots(1, 1)\nax.set_xlabel('epoch')\nax.set_ylabel('Categorical Crossentropy Loss')\n\n#list of epoch numbers\nx = list(range(1, epochs+1))\nvy = history.history['val_loss']\nty = history.history['loss']\nplt_dynamic(x, vy, ty, ax)","50959657":"from prettytable import PrettyTable\nx = PrettyTable()\nx.field_names = [\"Filters\", \"Model\", \"Activation\", \"Epoch\", \"Accuracy\"]\nx.add_row([\"2 x 2\", \"Convnet\", \"Relu\", 12, \"99.21%\"])\nx.add_row([\"3 x 3\", \"Convnet\", \"Relu\", 12, \"99.3%\"])\nx.add_row([\"5 x 5\", \"Convnet\", \"Relu\", 12, \"99.36%\"])\nprint(x)","77c80be1":"# Conclusion","8d2625a5":"# The MNIST Database of handwritten digits\n* *The MNIST database of handwritten digits, available from this page, has a training set of 60,000 examples, and a test set of 10,000 examples. It is a subset of a larger set available from NIST. The digits have been size-normalized and centered in a fixed-size image.*\n\n<img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/2\/27\/MnistExamples.png\">","6c29a2a8":"<a href=\"https:\/\/ibb.co\/fLs97U\"><img src=\"https:\/\/preview.ibb.co\/cb6DZ9\/Screen_Shot_2018_09_25_at_12_49_23_AM.png\" alt=\"Screen_Shot_2018_09_25_at_12_49_23_AM\" border=\"0\"><\/a>"}}