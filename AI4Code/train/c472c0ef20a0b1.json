{"cell_type":{"424bcfa4":"code","3b1ecb6a":"code","c24844d6":"code","3e54e0fa":"code","6901016e":"code","f9561343":"code","6d67716c":"code","0c6235f1":"code","78b0b200":"code","61b27820":"code","11f4e728":"code","46eb0f31":"code","f6c7f26e":"code","9559a3d8":"code","9c6398c0":"code","05adfc1e":"code","0898e762":"code","87efeb5a":"code","34074095":"code","81f67fdc":"code","838394af":"code","efad825a":"code","5d450896":"code","35f01e93":"code","5c8a3981":"code","0c7c5450":"code","d2a6a69a":"code","26784fb1":"markdown","339b6049":"markdown","00df07f8":"markdown","84e29417":"markdown","01131014":"markdown","81ed70f8":"markdown","dcb8e9e2":"markdown","9f0139b6":"markdown","e90539d3":"markdown","cbec42ad":"markdown","2e97bd18":"markdown","464ca541":"markdown","7b58ecb4":"markdown","4515e4b6":"markdown","f5f6e20d":"markdown","c94c03d6":"markdown","548d7bec":"markdown","904f116a":"markdown","28573302":"markdown","752c078e":"markdown","be85feb2":"markdown","41f57b62":"markdown","25719030":"markdown","a7bcbc2c":"markdown","f0e37567":"markdown","783b4e36":"markdown","1c6f02e0":"markdown","464e2ef3":"markdown"},"source":{"424bcfa4":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom datetime import datetime\nimport math\n\nimport os\nfrom pathlib import Path\nprint(os.listdir(\"..\/input\"))\n","3b1ecb6a":"df_train = pd.read_csv('..\/input\/train.csv')\ndf_test = pd.read_csv('..\/input\/test.csv')","c24844d6":"df_train.head()","3e54e0fa":"# check data usage\nprint('Memory usage, Mb: {:.2f}\\n'.format(df_train.memory_usage().sum()\/2**20))\n\n# overall df info\nprint('---------------- DataFrame Info -----------------')\nprint(df_train.info())","6901016e":"print(df_train.isnull().sum())","f9561343":"print('----------------distance Outliers-------------------')\nprint('Latitude : {} to {}'.format(\n    max(df_train.pickup_latitude.min(), df_train.dropoff_latitude.min()),\n    max(df_train.pickup_latitude.max(), df_train.dropoff_latitude.max())\n))\nprint('Longitude : {} to {}'.format(\n    max(df_train.pickup_longitude.min(), df_train.dropoff_longitude.min()),\n    max(df_train.pickup_longitude.max(), df_train.dropoff_longitude.max())\n))\nprint('')\nprint('------------------Time Outliers---------------------')\nprint('Trip duration in seconds: {} to {}'.format(\n    df_train.trip_duration.min(), df_train.trip_duration.max()))\n\nprint('')\nprint('------------------Date Outliers---------------------')\nprint('Datetime range: {} to {}'.format(df_train.pickup_datetime.min(), \n                                        df_train.dropoff_datetime.max()))\nprint('')\nprint('----------------Passengers Outliers------------------')\nprint('Passengers: {} to {}'.format(df_train.passenger_count.min(), \n                                        df_train.passenger_count.max()))","6d67716c":"print('duplicates IDs: {}'.format(len(df_train) - len(df_train.drop_duplicates(subset='id'))))","0c6235f1":"def haversine(lat1, lon1, lat2, lon2):\n    R = 6371800  # Earth radius in meters  \n    phi1, phi2 = math.radians(lat1), math.radians(lat2) \n    dphi       = math.radians(lat2 - lat1)\n    dlambda    = math.radians(lon2 - lon1)\n    \n    a = math.sin(dphi\/2)**2 + \\\n        math.cos(phi1)*math.cos(phi2)*math.sin(dlambda\/2)**2\n    \n    return 2*R*math.atan2(math.sqrt(a), math.sqrt(1 - a))","78b0b200":"#trop LONG et peu pr\u00e9cis\n#%%time\n#df_train['distance'] = df_train[['pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude']].apply(haversine_distance, axis=1)\n#df_train.head()\n#df_test['distance'] = df_train[['pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude']].apply(haversine_distance, axis=1)","61b27820":"#rapide mais moins performant\n#from math import radians, cos, sin, asin, sqrt\n\n#def haversine(lon1, lat1, lon2, lat2):\n    # convert decimal degrees to radians \n    #lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])\n    # haversine formula \n    #dlon = lon2 - lon1 \n    #dlat = lat2 - lat1 \n    #a = sin(dlat\/2)**2 + cos(lat1) * cos(lat2) * sin(dlon\/2)**2\n    #c = 2 * asin(sqrt(a)) \n    # Radius of earth in kilometers is 6371\n    #km = 6371* c\n    #return km\n\n#def haversine_distance(x):\n    #x1, y1 = np.float64(x['pickup_longitude']), np.float64(x['pickup_latitude'])\n    #x2, y2 = np.float64(x['dropoff_longitude']), np.float64(x['dropoff_latitude'])    \n    #return haversine(x1, y1, x2, y2)","11f4e728":"df_train['distance'] = df_train.apply(lambda row: haversine(row['pickup_latitude'], row['pickup_longitude'], row['dropoff_latitude'], row['dropoff_longitude']), axis=1)\ndf_test['distance']  = df_test.apply(lambda row: haversine(row['pickup_latitude'], row['pickup_longitude'], row['dropoff_latitude'], row['dropoff_longitude']), axis=1)","46eb0f31":"df_train.head()","f6c7f26e":"#sns.set(rc={'figure.figsize':(15,10)})\n#sns.distplot(df_train['distance'],hist=False)","9559a3d8":"#RABDOM FOREST REGRESSOR <=> NO CLEAN\n\n\n#outliers temporels\n#duration_Proportion = ((df_train.trip_duration < 60) | # < 1 min \n#            (df_train.trip_duration > 8000)) # > 3 hours\n#print('Anomalies in trip duration, %: {:.2f}'.format(\n#    df_train[duration_Proportion].shape[0] \/ df_train.shape[0] * 100))\n\n#outliers passagers\n#df_train = df_train[df_train['passenger_count']>0]\n#df_train = df_train[df_train['passenger_count']<6]\n\n#outliers coordonn\u00e9s\n#df_train = df_train.loc[df_train['pickup_longitude']> -80]\n#df_train = df_train.loc[df_train['pickup_latitude']< 44]\n#df_train = df_train.loc[df_train['dropoff_longitude']> -90]\n#df_train = df_train.loc[df_train['dropoff_latitude']> 34]\n\n#outliers distances\n#df_train = df_train[df_train['distance']>1]\n#df_train = df_train[df_train['distance']<120000 ","9c6398c0":"#delete\n#df_train = df_train[~duration_Proportion]\n#Check\n#print('Trip duration in seconds: {} to {}'.format(\n#   df_train.trip_duration.min(), df_train.trip_duration.max()\n#))","05adfc1e":"plt.figure(figsize=(8,5))\nsns.distplot(df_train['trip_duration']).set_title(\"Distribution of Trip Duration\")\nplt.xlabel(\"Trip Duration\")","0898e762":"df_train['trip_duration'] = np.log(df_train['trip_duration'].values)","87efeb5a":"df_train[pd.isnull(df_train)].sum()","34074095":"df_train['pickup_datetime'] = pd.to_datetime(df_train['pickup_datetime'], format='%Y-%m-%d %H:%M:%S')\ndf_test['pickup_datetime'] = pd.to_datetime(df_test['pickup_datetime'], format='%Y-%m-%d %H:%M:%S')","81f67fdc":"df_train['hour'] = df_train.loc[:,'pickup_datetime'].dt.hour;\ndf_train['week'] = df_train.loc[:,'pickup_datetime'].dt.week;\ndf_train['weekday'] = df_train.loc[:,'pickup_datetime'].dt.weekday;\ndf_train['hour'] = df_train.loc[:,'pickup_datetime'].dt.hour;\ndf_train['month'] = df_train.loc[:,'pickup_datetime'].dt.month;\n\ndf_test['hour'] = df_test.loc[:,'pickup_datetime'].dt.hour;\ndf_test['week'] = df_test.loc[:,'pickup_datetime'].dt.week;\ndf_test['weekday'] = df_test.loc[:,'pickup_datetime'].dt.weekday;\ndf_test['hour'] = df_test.loc[:,'pickup_datetime'].dt.hour;\ndf_test['month'] = df_test.loc[:,'pickup_datetime'].dt.month;","838394af":"cat_vars = ['store_and_fwd_flag']\nfor col in cat_vars:\n    df_train[col] = df_train[col].astype('category').cat.codes\ndf_train.head()\n\nfor col in cat_vars:\n    df_test[col] = df_test[col].astype('category').cat.codes\ndf_test.head()","efad825a":"y_train = df_train[\"trip_duration\"]\nX_train = df_train[[\"vendor_id\", \"store_and_fwd_flag\",\"passenger_count\", \"pickup_longitude\", \"pickup_latitude\", \"distance\", \"dropoff_longitude\",\"dropoff_latitude\", \"hour\", \"week\", \"weekday\", \"month\" ]]","5d450896":"%%time\nfrom sklearn.ensemble import RandomForestRegressor\nm = RandomForestRegressor(n_estimators=100,min_samples_leaf=3, min_samples_split=15, n_jobs=-1, max_features=\"auto\")\nm.fit(X_train, y_train)","35f01e93":"X_test = df_test[[\"vendor_id\", \"store_and_fwd_flag\",\"passenger_count\",\"pickup_longitude\", \"pickup_latitude\", \"distance\",\"dropoff_longitude\",\"dropoff_latitude\", \"hour\", \"week\", \"weekday\", \"month\"]]\nprediction = m.predict(X_test)\nprediction","5c8a3981":"submit = pd.read_csv('..\/input\/sample_submission.csv')\nsubmit.head()","0c7c5450":"my_submission = pd.DataFrame({'id': df_test.id, 'trip_duration': np.exp(prediction)})\nmy_submission.head()","d2a6a69a":"my_submission.to_csv('submission.csv', index=False)","26784fb1":"# 6 S\u00e9lection de mod\u00e8les et\/ou datasets (si il y en a plusieurs)","339b6049":"## Data Fields\n\n- id - a unique identifier for each trip\n- vendor_id - a code indicating the provider associated with the trip record\n- pickup_datetime - date and time when the meter was engaged\n- dropoff_datetime - date and time when the meter was disengaged\n- passenger_count - the number of passengers in the vehicle (driver entered value)\n- pickup_longitude - the longitude where the meter was engaged\n- pickup_latitude - the latitude where the meter was engaged\n- dropoff_longitude - the longitude where the meter was disengaged\n- dropoff_latitude - the latitude where the meter was disengaged\n- store_and_fwd_flag - This flag indicates whether the trip record was held in vehicle memory before sending to the vendor because the vehicle did not have a connection to the server - Y=store and forward; N=not a store and forward trip\n- trip_duration - duration of the trip in seconds, target variable","00df07f8":"# Import\n","84e29417":"To make this calculation, has to be used Haversine Formula, instead Euclidean distance, because latitude and longitue are points in sphere and not in plain.\n\nThe implementation below to Haversine Formula it is from Aaron D, on StackOverflow. To extend precision of this calculation was used double precision, from numpy.","01131014":"#### 2.4 Distances calculator","81ed70f8":"#### 4.1 Features selection","dcb8e9e2":"# 3 Data preprocessing :","9f0139b6":"No missing Values","e90539d3":"#### 2.1 Check for N\/A values","cbec42ad":"## Trip duration","2e97bd18":"# 2 Data exploration","464ca541":"# 7 Entrainement du ou des mod\u00e8le(s)","7b58ecb4":"#### 4.2 Features extraction","4515e4b6":"**No N\/A values**","f5f6e20d":"#### 3.2 Missing values handling","c94c03d6":"# 1 Data loading","548d7bec":"#### 3.1 Gestion des Outliers","904f116a":"# 4 Features engineering :","28573302":"#### 3.3 Gestion des variables cat\u00e9goriques","752c078e":"Random Forest Regressor\n","be85feb2":"#### 2.2 Check for Outliers","41f57b62":"#### 2.3 Check duplicates values","25719030":"# 5 Choix d'un m\u00e9thode de validation","a7bcbc2c":"# 8 Pr\u00e9dictions","f0e37567":"Validation","783b4e36":"reduces the impact of outliers","1c6f02e0":"convert pickup dateime and dropoff datetime into date-time object","464e2ef3":"#### 4.3 Features creation"}}