{"cell_type":{"48a0243b":"code","5e98e0a5":"code","ff328760":"code","2ffed0dc":"code","68416dd2":"code","7044a870":"code","a84dc58f":"code","baed0c21":"code","ac6d8a7a":"code","a7c5f39e":"code","08a08f0e":"code","8228d87f":"code","fd5cd1b2":"code","58f43113":"code","30ccd82d":"markdown","001c6c32":"markdown","5c30c6e8":"markdown","9b4e9898":"markdown","4c35f44c":"markdown"},"source":{"48a0243b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom IPython.display import display\nimport random\nimport os\nimport seaborn as sns\nimport matplotlib.pyplot as plt","5e98e0a5":"# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ff328760":"def load_data():\n    training_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\n    test_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n    return training_data, test_data\n    ","2ffed0dc":"training_data, test_data = load_data()\ndisplay(training_data.head())\ndisplay(test_data.head())","68416dd2":"display(training_data.isnull().sum())\ndisplay(training_data.info())","7044a870":"f, ax = plt.subplots(1,1,figsize=(10, 6))\nsns.countplot(training_data.Survived, ax=ax)\nax.set_title('Survived')","a84dc58f":"f, ax = plt.subplots(1,3,figsize=(15, 6))\nsns.countplot(training_data.Sex, ax=ax[0])\nsns.countplot(training_data.Sex, hue=training_data.Survived, ax=ax[1])\nax[1].set_title('Sex <-->Survived')\ntraining_data[['Sex', 'Survived']].groupby(['Sex']).mean().plot.bar(ax=ax[2])\nax[2].set_title('Survival rate')","baed0c21":"f, ax = plt.subplots(1,3,figsize=(15, 6))\nsns.countplot(training_data.Pclass, ax=ax[0])\nsns.countplot(training_data.Pclass, hue=training_data.Survived, ax=ax[1])\nax[1].set_title('Pclass <-->Survived')\ntraining_data[['Pclass', 'Survived']].groupby(['Pclass']).mean().plot.bar(ax=ax[2])\nax[2].set_title('Survival rate')","ac6d8a7a":"training_data[['Age']].describe()","a7c5f39e":"f, ax = plt.subplots(1,3,figsize=(20, 6))\ntraining_data[['Age']].plot.hist(ax=ax[0],bins=20,edgecolor='black',color='blue')\n#training_data[['Age', 'Survived']].groupby(['Age']).mean().plot.hist(ax=ax[1],bins=20,edgecolor='black',color='red')\ntraining_data[training_data['Survived']==0].Age.plot.hist(ax=ax[1],bins=20,edgecolor='black',color='red')\nax[1].set_title('Survived= 0')\nax[1].set_xticks(list(range(0,85,5)))\ntraining_data[training_data['Survived']==1].Age.plot.hist(ax=ax[2],color='green',bins=20,edgecolor='black')\nax[2].set_title('Survived= 1')\nax[2].set_xticks(list(range(0,85,5)))","08a08f0e":"f, ax = plt.subplots(1,1,figsize=(10, 6))\nsns.countplot(training_data.Embarked, hue=training_data.Survived, ax=ax)\nax.set_title('Embarked <-->Survived')","8228d87f":"def flip_coin_model(test_data):\n    data_size = len(test_data)\n    return [random.randint(0, 1) for i in range(0, data_size)]\n    ","fd5cd1b2":"def submit_predictions(test_data, predictions):\n    output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\n    output.to_csv('submission.csv', index=False)\n    print(\"Your submission was successfully saved!\")","58f43113":"predictions = flip_coin_model(test_data)\nsubmit_predictions(test_data, predictions)","30ccd82d":"# **Pclass**","001c6c32":"# **Embarked**","5c30c6e8":"# **Sex**","9b4e9898":"# **Age**","4c35f44c":"# **Survived**"}}