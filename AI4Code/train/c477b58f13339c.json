{"cell_type":{"9582935b":"code","c93e05fe":"code","60ecc1b1":"code","408073b2":"code","28c76d68":"code","853ed709":"code","24bcaa5f":"code","d3e0592e":"code","914f6959":"code","785b7c1d":"code","e33e54de":"code","1bd2e562":"code","a0026a2b":"code","223fba5f":"code","dbfee662":"code","bb6d51b2":"code","6063cf40":"code","5ff1c8d4":"code","3ef8aeed":"code","d66463ed":"code","534b78fe":"code","dcb91ff4":"code","56ee7b21":"code","6879be37":"code","acecbba1":"code","d4d0c9ba":"code","b24a1549":"code","9e1ed980":"code","37aec00c":"code","6fa79064":"code","f1fed640":"code","601ef4f4":"code","47086b56":"code","fa4ad6ea":"code","08ff8faf":"code","b7729d4c":"code","a8f005e9":"code","dbf20040":"code","fbe78dc7":"code","64e8d2d1":"code","e13c8928":"code","3786aa27":"code","2868ac3c":"code","84dffcbf":"code","5fbb766f":"code","56b3e6ab":"code","b96d319f":"code","3094e803":"code","5fe54eed":"code","6cce397c":"code","d5680cc9":"code","a82d3e72":"code","c6bdf519":"code","34427f0e":"code","30f3cc19":"code","d655c74d":"code","10391235":"code","58c1a125":"code","44649b55":"code","163a8205":"code","5e740d6a":"code","419d6293":"code","69bd889e":"code","76bf285e":"code","ca282103":"code","49c6f058":"code","2a58a69b":"code","1c0195fa":"code","6c4f14f7":"code","c7b2c76f":"code","d34739d2":"code","0d451156":"markdown","5616633a":"markdown","2f6eb726":"markdown","ab5b7460":"markdown","68512103":"markdown","2c0e5142":"markdown","d0b557d7":"markdown","85b23cfb":"markdown","7b62a6e2":"markdown","b519daac":"markdown","08332b53":"markdown","830b279c":"markdown","0c96c07d":"markdown","d9d79cd5":"markdown","8e74f42d":"markdown","4f6fa8e1":"markdown","bc5ced82":"markdown","3800e88b":"markdown","42baa32e":"markdown","9faaebe5":"markdown","5d8a1011":"markdown","576319ae":"markdown","0b2ad303":"markdown","dae082e6":"markdown","160abd45":"markdown"},"source":{"9582935b":"import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nfrom datetime import datetime\nplt.style.use('default')\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","c93e05fe":"dataset = pd.read_csv('..\/input\/solarpanelspower\/PV_Elec_Gas3.csv')\n\ndataset['date']= pd.to_datetime(dataset['date'], format='%d\/%m\/%Y')\ndataset['day']= dataset['date'].dt.day\ndataset['month']= dataset['date'].dt.month\ndataset['year']= dataset['date'].dt.year\ndataset['Cumulative_electricity'] = dataset['kWh electricity\/day'].cumsum()\ndataset['Cumulative_gas'] = dataset['Gas\/day'].cumsum()\ndataset['Solar\/day']= dataset['Cumulative_solar_power'].diff()\ndataset.at[0,'Solar\/day'] = dataset['Cumulative_solar_power'][0]\n\nprint(dataset.shape)\ndataset.head()","60ecc1b1":"dataset.describe()","408073b2":"dataset.isnull().sum()","28c76d68":"dataset.info()","853ed709":"f, ax = plt.subplots(figsize=(20, 5))\nsns.lineplot(data=dataset, x=\"date\", y=\"Cumulative_solar_power\", label='Cumulative_solar_power')\nsns.lineplot(data=dataset, x=\"date\", y=\"Cumulative_electricity\", label='Cumulative_electricity')\nsns.lineplot(data=dataset, x=\"date\", y=\"Cumulative_gas\", label='Cumulative_gas')\n\nax.set_axisbelow(True)\nax.minorticks_on()\nax.grid(which='major', linestyle='-', linewidth=0.5, color='black',)\nax.grid(which='minor', linestyle=':', linewidth=0.5, color='black', alpha=0.7)\n\nax.set_xlim([datetime(2011,10,26), datetime(2020,11,10)])\n\nax.legend();","24bcaa5f":"from statsmodels.tsa.seasonal import seasonal_decompose\n# from pylab import rcParams\n\nresult = seasonal_decompose(dataset['Cumulative_solar_power'], model='additive', period=120)\n# result = seasonal_decompose(dataset['Cumulative_solar_power'], model='multiplicative', period=120)\n\n# rcParams['figure.figsize'] = 10,7\nresult.plot();","d3e0592e":"f, ax = plt.subplots(figsize=(20, 5))\nsns.lineplot(data=dataset, x=\"date\", y=\"Solar\/day\")\n\nmean_avg=dataset['Solar\/day'].mean()\nax.axhline(mean_avg, color='#d62728', linestyle='--', label=f\"Mean - {mean_avg:.2f}\")\n\nax.set_axisbelow(True)\nax.minorticks_on()\nax.grid(which='major', linestyle='-', linewidth=0.5, color='black',)\nax.grid(which='minor', linestyle=':', linewidth=0.5, color='black', alpha=0.7)\n\nax.set_xlim([datetime(2011,10,26), datetime(2020,11,10)])\n\nax.legend();","914f6959":"f, ax = plt.subplots(figsize=(20, 4))\ndata_resample_y = dataset.resample(rule='Y', on='date').mean()\ndata_resample_m = dataset.resample(rule='M', on='date').mean()\ndata_resample_w = dataset.resample(rule='W', on='date').mean()\n\nsns.lineplot(data=dataset, x=\"date\", y=\"Solar\/day\", label=\"day frequency\", alpha  = 0.4)\nsns.lineplot(data=data_resample_w, x=\"date\", y=\"Solar\/day\", label=\"week frequency\")\nsns.lineplot(data=data_resample_m, x=\"date\", y=\"Solar\/day\", label=\"month frequency\")\nsns.lineplot(data=data_resample_y, x=\"date\", y=\"Solar\/day\", label=\"year frequency\")\n\nax.set_axisbelow(True)\nax.minorticks_on()\nax.grid(which='major', linestyle='-', linewidth=0.5, color='black',)\nax.grid(which='minor', linestyle=':', linewidth=0.5, color='black', alpha=0.7)\n\nax.set_xlim([datetime(2011,10,26), datetime(2020,11,10)]);","785b7c1d":"f, ax = plt.subplots(figsize=(20, 4))\ndata_rolling = dataset.rolling(15, center=True, min_periods=7).mean()\n\nsns.lineplot(data=dataset, x=\"date\", y=\"Solar\/day\", alpha=0.4)\nsns.lineplot(data=dataset, x=\"date\", y=data_rolling[\"Solar\/day\"])\n\nax.set_axisbelow(True)\nax.minorticks_on()\nax.grid(which='major', linestyle='-', linewidth=0.5, color='black',)\nax.grid(which='minor', linestyle=':', linewidth=0.5, color='black', alpha=0.7)\n\nax.set_xlim([datetime(2011,10,26), datetime(2020,11,10)]);","e33e54de":"from statsmodels.tsa.filters.hp_filter import hpfilter\n\ncycle_6, trend_6 = hpfilter(dataset['Solar\/day'], lamb=6.25)\ncycle_1600, trend_1600 = hpfilter(dataset['Solar\/day'], lamb=1600)\ncycle_14400, trend_14400 = hpfilter(dataset['Solar\/day'], lamb=14400)\ncycle_129600, trend_129600 = hpfilter(dataset['Solar\/day'], lamb=129600)\n\nf, ax = plt.subplots(figsize=(20, 5))\nsns.lineplot(data=dataset, x=\"date\", y=\"Solar\/day\", alpha=0.4)\nsns.lineplot(x=dataset['date'], y=trend_6.to_list(), label=\"6.25\")\nsns.lineplot(x=dataset['date'], y=trend_1600.to_list(), label=\"1600\")\nsns.lineplot(x=dataset['date'], y=trend_14400.to_list(), label=\"14400\")\nsns.lineplot(x=dataset['date'], y=trend_129600.to_list(), label=\"129600\")\n\n\nax.set_axisbelow(True)\nax.minorticks_on()\nax.grid(which='major', linestyle='-', linewidth=0.5, color='black',)\nax.grid(which='minor', linestyle=':', linewidth=0.5, color='black', alpha=0.7)\n\nax.set_xlim([datetime(2011,10,26), datetime(2020,11,10)])\n\nax.legend(loc='upper left');","1bd2e562":"f, ax = plt.subplots(figsize=(20, 4))\ndata_expanding = dataset.expanding(min_periods=30).mean()\n\nsns.lineplot(data=dataset, x=\"date\", y=data_expanding[\"Solar\/day\"])\n\nax.set_axisbelow(True)\nax.minorticks_on()\nax.grid(which='major', linestyle='-', linewidth=0.5, color='black',)\nax.grid(which='minor', linestyle=':', linewidth=0.5, color='black', alpha=0.7)\n\nax.set_xlim([datetime(2011,10,26), datetime(2020,11,10)]);","a0026a2b":"f, ax = plt.subplots(figsize=(20, 4))\ndata_ewm = dataset.ewm(com=30, adjust=False).mean()\n\nsns.lineplot(data=dataset, x=\"date\", y=\"Solar\/day\", alpha=0.4)\nsns.lineplot(data=dataset, x=\"date\", y=data_ewm[\"Solar\/day\"])\n\nax.set_axisbelow(True)\nax.minorticks_on()\nax.grid(which='major', linestyle='-', linewidth=0.5, color='black',)\nax.grid(which='minor', linestyle=':', linewidth=0.5, color='black', alpha=0.7)\n\nax.set_xlim([datetime(2011,10,26), datetime(2020,11,10)]);","223fba5f":"from statsmodels.tsa.holtwinters import SimpleExpSmoothing\n\nspan = 12\nalpha = 2\/(span+1)\n\ndataset['EWMA12'] = dataset['Solar\/day'].ewm(alpha=alpha, adjust=False).mean()\ndataset['SES12'] = SimpleExpSmoothing(dataset['Solar\/day'], initialization_method='estimated').fit(smoothing_level=alpha, optimized=False).fittedvalues.shift(-1)\n\nf, ax = plt.subplots(figsize=(20, 4))\n\nsns.lineplot(data=dataset, x=\"date\", y=\"Solar\/day\", alpha=0.4)\nsns.lineplot(data=dataset, x=\"date\", y=dataset[\"EWMA12\"])\nsns.lineplot(data=dataset, x=\"date\", y=dataset[\"SES12\"])\n\nax.set_axisbelow(True)\nax.minorticks_on()\nax.grid(which='major', linestyle='-', linewidth=0.5, color='black',)\nax.grid(which='minor', linestyle=':', linewidth=0.5, color='black', alpha=0.7)\n\nax.set_xlim([datetime(2011,10,26), datetime(2020,11,10)]);","dbfee662":"from statsmodels.tsa.holtwinters import ExponentialSmoothing\n\ndataset['DESadd12'] = ExponentialSmoothing(dataset['Solar\/day'], initialization_method='estimated', trend='add').fit().fittedvalues.shift(-1)\n# dataset['DESmul12'] = ExponentialSmoothing(dataset['Solar\/day'], initialization_method='estimated', trend='mul').fit().fittedvalues.shift(-1)\n\nf, ax = plt.subplots(figsize=(20, 4))\n\nsns.lineplot(data=dataset, x=\"date\", y=\"Solar\/day\", alpha=0.4)\nsns.lineplot(data=dataset, x=\"date\", y=dataset[\"DESadd12\"])\n# sns.lineplot(data=dataset, x=\"date\", y=dataset[\"DESmul12\"])\n\nax.set_axisbelow(True)\nax.minorticks_on()\nax.grid(which='major', linestyle='-', linewidth=0.5, color='black',)\nax.grid(which='minor', linestyle=':', linewidth=0.5, color='black', alpha=0.7)\n\nax.set_xlim([datetime(2011,10,26), datetime(2020,11,10)]);","bb6d51b2":"dataset['TESadd12'] = ExponentialSmoothing(dataset['Solar\/day'], initialization_method='estimated', trend='add', seasonal='add', seasonal_periods=12).fit().fittedvalues\n# dataset['TESmul12'] = ExponentialSmoothing(dataset['Solar\/day'], initialization_method='estimated', trend='mul', seasonal='mul', seasonal_periods=12).fit().fittedvalues\n\nf, ax = plt.subplots(figsize=(20, 4))\n\nsns.lineplot(data=dataset, x=\"date\", y=\"Solar\/day\", alpha=0.4)\nsns.lineplot(data=dataset, x=\"date\", y=dataset[\"TESadd12\"])\n# sns.lineplot(data=dataset, x=\"date\", y=dataset[\"TESmul12\"])\n\nax.set_axisbelow(True)\nax.minorticks_on()\nax.grid(which='major', linestyle='-', linewidth=0.5, color='black',)\nax.grid(which='minor', linestyle=':', linewidth=0.5, color='black', alpha=0.7)\n\nax.set_xlim([datetime(2011,10,26), datetime(2020,11,10)]);","6063cf40":"f, ax = plt.subplots(figsize=(16, 5))\n\nsns.lineplot(data=dataset, x=\"date\", y=\"Solar\/day\", alpha=0.4)\nsns.lineplot(data=dataset, x=\"date\", y=dataset[\"EWMA12\"], label=\"EWMA12\")\nsns.lineplot(data=dataset, x=\"date\", y=dataset[\"SES12\"], label=\"SES12\")\nsns.lineplot(data=dataset, x=\"date\", y=dataset[\"DESadd12\"], label=\"DESadd12\")\nsns.lineplot(data=dataset, x=\"date\", y=dataset[\"TESadd12\"], label=\"TESadd12\")\n\nax.set_axisbelow(True)\nax.minorticks_on()\nax.grid(which='major', linestyle='-', linewidth=0.5, color='black',)\nax.grid(which='minor', linestyle=':', linewidth=0.5, color='black', alpha=0.7)\n\nax.set_xlim([datetime(2012,3,1), datetime(2012,11,1)])\n\nax.legend(loc='upper left');","5ff1c8d4":"f, ax = plt.subplots(figsize=(20, 5))\nsns.lineplot(data=dataset, x=\"date\", y=\"kWh electricity\/day\")\n\nmean_avg=dataset['kWh electricity\/day'].mean()\nax.axhline(mean_avg, color='#d62728', linestyle='--', label=f\"Mean - {mean_avg:.2f}\")\n\nax.set_axisbelow(True)\nax.minorticks_on()\nax.grid(which='major', linestyle='-', linewidth=0.5, color='black',)\nax.grid(which='minor', linestyle=':', linewidth=0.5, color='black', alpha=0.7)\n\nax.set_xlim([datetime(2011,10,26), datetime(2020,11,10)])\n\nax.legend();","3ef8aeed":"f, ax = plt.subplots(figsize=(20, 5))\nsns.lineplot(data=dataset, x=\"date\", y=\"Gas\/day\")\n\nmean_avg=dataset['Gas\/day'].mean()\nax.axhline(mean_avg, color='#d62728', linestyle='--', label=f\"Mean - {mean_avg:.2f}\")\n\nax.set_axisbelow(True)\nax.minorticks_on()\nax.grid(which='major', linestyle='-', linewidth=0.5, color='black',)\nax.grid(which='minor', linestyle=':', linewidth=0.5, color='black', alpha=0.7)\n\nax.set_xlim([datetime(2011,10,26), datetime(2020,11,10)])\n\nax.legend();","d66463ed":"f, ax = plt.subplots(figsize=(20, 5))\nsns.lineplot(data=dataset, x=\"date\", y=\"Solar\/day\", label='Solar\/day')\nsns.lineplot(data=dataset, x=\"date\", y=\"kWh electricity\/day\", label='kWh electricity\/day')\nsns.lineplot(data=dataset, x=\"date\", y=\"Gas\/day\", label='Gas\/day')\n\nax.set_axisbelow(True)\nax.minorticks_on()\nax.grid(which='major', linestyle='-', linewidth=0.5, color='black',)\nax.grid(which='minor', linestyle=':', linewidth=0.5, color='black', alpha=0.7)\n\nax.set_xlim([datetime(2011,10,26), datetime(2020,11,10)])\n\nax.legend();","534b78fe":"f, ax = plt.subplots(1,3,figsize=(20,4))\nsns.histplot(dataset['Solar\/day'], stat=\"density\", bins=25, ax=ax[0], color=\"#e77c8d\")\nsns.histplot(dataset['kWh electricity\/day'], stat=\"density\", bins=25, ax=ax[1], color=\"#4c72b0\")\nsns.histplot(dataset['Gas\/day'], stat=\"density\", bins=25, ax=ax[2], color=\"#55a868\");","dcb91ff4":"f, ax = plt.subplots(1,3,figsize=(20,4))\nsns.barplot(x=\"day\", y='Solar\/day', data=dataset, color=\"#c44e52\", ci=None, ax=ax[0])\nax[0].set_title('Mean Solar by Day')\n\nsns.barplot(x=\"day\", y='kWh electricity\/day', data=dataset, color=\"#1f77b4\", ci=None, ax=ax[1])\nax[1].set_title('Mean Electricity by Day')\n\nsns.barplot(x=\"day\", y='Gas\/day', data=dataset, color=\"#2ca02c\", ci=None, ax=ax[2])\nax[2].set_title('Mean Gas by Day');","56ee7b21":"f, ax = plt.subplots(1,3,figsize=(20,4))\nsns.barplot(x=\"month\", y='Solar\/day', data=dataset, color=\"#c44e52\", ci=None, ax=ax[0])\nax[0].set_title('Mean Solar by Month')\n\nsns.barplot(x=\"month\", y='kWh electricity\/day', data=dataset, color=\"#1f77b4\", ci=None, ax=ax[1])\nax[1].set_title('Mean Electricity by Month')\n\nsns.barplot(x=\"month\", y='Gas\/day', data=dataset, color=\"#2ca02c\", ci=None, ax=ax[2])\nax[2].set_title('Mean Gas by Month');","6879be37":"f, ax = plt.subplots(1,3,figsize=(20,4))\nsns.barplot(x=\"year\", y='Solar\/day', data=dataset, color=\"#c44e52\", ci=None, ax=ax[0])\nax[0].set_title('Mean Solar by Year')\n\nsns.barplot(x=\"year\", y='kWh electricity\/day', data=dataset, color=\"#1f77b4\", ci=None, ax=ax[1])\nax[1].set_title('Mean Electricity by Year')\n\nsns.barplot(x=\"year\", y='Gas\/day', data=dataset, color=\"#2ca02c\", ci=None, ax=ax[2])\nax[2].set_title('Mean Gas by Year');","acecbba1":"sns.jointplot(data=dataset, x='kWh electricity\/day', y='Gas\/day', kind='hex');","d4d0c9ba":"data_day=dataset[['kWh electricity\/day', 'Gas\/day', 'Solar\/day', 'day']].groupby('day', as_index=False).mean()\n\nf, ax = plt.subplots(figsize=(16, 5))\nsns.lineplot(data=data_day, x=\"day\", y='Solar\/day', label='Solar\/day')\nsns.lineplot(data=data_day, x=\"day\", y=\"kWh electricity\/day\", label='kWh electricity\/day')\nsns.lineplot(data=data_day, x=\"day\", y=\"Gas\/day\", label='Gas\/day')\n\nax.set_xlabel('Day')\nax.set_ylabel('Consumption')\n\nax.set_axisbelow(True)\nax.minorticks_on()\nax.grid(which='major', linestyle='-', linewidth=0.5, color='black',)\nax.grid(which='minor', linestyle=':', linewidth=0.5, color='black', alpha=0.7)\n\nax.set_xticks(range(1,32))\nax.set_xlim([1, 31])\n\nax.legend(bbox_to_anchor=(1.02, 1), loc='upper left', borderaxespad=0);","b24a1549":"data_month=dataset[['kWh electricity\/day', 'Gas\/day', 'Solar\/day', 'month']].groupby('month', as_index=False).sum()\n\nf, ax = plt.subplots(figsize=(10, 5))\nsns.lineplot(data=data_month, x=\"month\", y='Solar\/day', label='Solar\/day')\nsns.lineplot(data=data_month, x=\"month\", y=\"kWh electricity\/day\", label='kWh electricity\/day')\nsns.lineplot(data=data_month, x=\"month\", y=\"Gas\/day\", label='Gas\/day')\n\nax.set_xlabel('Month')\nax.set_ylabel('Consumption')\n\nax.set_axisbelow(True)\nax.minorticks_on()\nax.grid(which='major', linestyle='-', linewidth=0.5, color='black',)\nax.grid(which='minor', linestyle=':', linewidth=0.5, color='black', alpha=0.7)\n\nax.set_xticks(range(1,13))\nax.set_xlim([1, 12])\n\nax.legend();","9e1ed980":"data_month=dataset[['Solar\/day', 'month', 'year']].groupby(['month', 'year'], as_index=False).mean()\n\nf, ax = plt.subplots(figsize=(16, 5))\nsns.pointplot(data=data_month, x=\"month\", y='Solar\/day', hue='year', legend=\"full\")\n\nax.set_axisbelow(True)\nax.minorticks_on()\nax.grid(which='major', linestyle='-', linewidth=0.5, color='black',)\nax.grid(which='minor', linestyle=':', linewidth=0.5, color='black', alpha=0.7)\n\nax.set_xticks(range(0,12))\nax.set_xlim([0, 11])\n\nax.legend();","37aec00c":"data_year=dataset[['kWh electricity\/day', 'Gas\/day', 'Solar\/day', 'year']].groupby('year', as_index=False).sum()\n\nf, ax = plt.subplots(figsize=(16, 5))\nsns.lineplot(data=data_year, x=\"year\", y='Solar\/day', label='Solar\/day')\nsns.lineplot(data=data_year, x=\"year\", y=\"kWh electricity\/day\", label='kWh electricity\/day')\nsns.lineplot(data=data_year, x=\"year\", y=\"Gas\/day\", label='Gas\/day')\n\nax.set_xlabel('Year')\nax.set_ylabel('Consumption')\n\nax.set_axisbelow(True)\nax.minorticks_on()\nax.grid(which='major', linestyle='-', linewidth=0.5, color='black',)\nax.grid(which='minor', linestyle=':', linewidth=0.5, color='black', alpha=0.7)\n\nax.set_xlim([2011, 2020])\n\nax.legend();","6fa79064":"f, ax = plt.subplots(figsize=(16, 5))\n\nfor i in range(2011,2021):\n    y=dataset[dataset['year']==i]['Solar\/day'].cumsum()\n    y_list=y.to_list()\n\n    sns.lineplot(x=range(len(y_list)), y=y_list, label=f'{i} - {len(y_list)} days - {y_list[-1]:.1f} kWh')\n\nax.set_axisbelow(True)\nax.minorticks_on()\nax.grid(which='major', linestyle='-', linewidth=0.5, color='black',)\nax.grid(which='minor', linestyle=':', linewidth=0.5, color='black', alpha=0.7)\n\nax.set_xticks(range(0, 366, 30))\nax.set_xlim([0, 366])\n\nax.legend();","f1fed640":"train_data = dataset[:2600]\ntest_data = dataset[2600:]","601ef4f4":"fitted_model = ExponentialSmoothing(train_data[\"Solar\/day\"], initialization_method='estimated', trend='add', seasonal='add', seasonal_periods=365).fit()\n\ntest_prediction = fitted_model.forecast(704)\n\nf, ax = plt.subplots(figsize=(20, 4))\n\nsns.lineplot(data=train_data, x=\"date\", y=\"Solar\/day\", label='Train', alpha=0.6)\nsns.lineplot(data=test_data, x=\"date\", y=\"Solar\/day\", label='Test', alpha=0.6)\nsns.lineplot(data=test_data, x=\"date\", y=test_prediction, label='Prediction')\n\nax.set_axisbelow(True)\nax.minorticks_on()\nax.grid(which='major', linestyle='-', linewidth=0.5, color='black',)\nax.grid(which='minor', linestyle=':', linewidth=0.5, color='black', alpha=0.7)\n\nax.set_xlim([datetime(2011,10,26), datetime(2020,11,10)]);","47086b56":"from sklearn.metrics import mean_squared_error, mean_absolute_error, max_error, r2_score\n\nprint(\"r2_score: \", r2_score(test_data[\"Solar\/day\"], test_prediction))\nprint(\"mean_absolute_error: \", mean_absolute_error(test_data[\"Solar\/day\"], test_prediction))\nprint(\"mean_squared_error: \", mean_squared_error(test_data[\"Solar\/day\"], test_prediction))\nprint(\"root_mean_squared_error: \", mean_squared_error(test_data[\"Solar\/day\"], test_prediction, squared=False))\nprint(\"max_error: \", max_error(test_data[\"Solar\/day\"], test_prediction))","fa4ad6ea":"dataset[\"diff_1\"] = dataset[\"Solar\/day\"].diff()\ndataset[\"diff_2\"] = dataset[\"Solar\/day\"].diff().diff()\n\nf, ax = plt.subplots(figsize=(20, 4))\n\nsns.lineplot(data=dataset, x=\"date\", y=\"diff_2\", label=\"Second order difference\")\nsns.lineplot(data=dataset, x=\"date\", y=\"diff_1\", label=\"First order difference\")\n\nax.set_axisbelow(True)\nax.minorticks_on()\nax.grid(which='major', linestyle='-', linewidth=0.5, color='black',)\nax.grid(which='minor', linestyle=':', linewidth=0.5, color='black', alpha=0.7)\n\nax.set_xlim([datetime(2011,10,26), datetime(2020,11,10)]);","08ff8faf":"from statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom statsmodels.tsa.statespace.tools import diff\n\nfig, axes = plt.subplots(3, 2, sharex=True, figsize = (16,7))\nlags=100\n\nplot_acf(dataset[\"Solar\/day\"], title='Autocorrelation: Solar\/day', lags=lags, ax=axes[0][0])\nplot_acf(diff(dataset[\"Solar\/day\"], k_diff=1), title='1st order differencing', lags=lags, ax=axes[1][0])\nplot_acf(diff(dataset[\"Solar\/day\"], k_diff=2), title='2nd order differencing', lags=lags, ax=axes[2][0])\n\nplot_pacf(dataset[\"Solar\/day\"], title='Partial Autocorrelation: Solar\/day', lags=lags, ax=axes[0][1])\nplot_pacf(diff(dataset[\"Solar\/day\"], k_diff=1), title='1st order differencing', lags=lags, ax=axes[1][1])\nplot_pacf(diff(dataset[\"Solar\/day\"], k_diff=2), title='2nd order differencing', lags=lags, ax=axes[2][1]);","b7729d4c":"from statsmodels.tsa.ar_model import AR, ARResults\n\nAR_model = AR(train_data[\"Cumulative_solar_power\"]).fit(maxlag=27, method='mle')\nAR_pred = AR_model.predict(start=len(train_data), end=len(train_data)+len(test_data)-1, dynamic=False)\n\n# print(f'Lag: {AR_model.k_ar}')\n# print(f'Coefficients:\\n{AR_model.params}')\n\nf, ax = plt.subplots(figsize=(10, 5))\n\nsns.lineplot(data=train_data, x=\"date\", y=\"Cumulative_solar_power\", label='Train', alpha=0.6)\nsns.lineplot(data=test_data, x=\"date\", y=\"Cumulative_solar_power\", label='Test', alpha=0.6)\nsns.lineplot(data=test_data, x=\"date\", y=AR_pred, label='Prediction')\n\nax.set_axisbelow(True)\nax.minorticks_on()\nax.grid(which='major', linestyle='-', linewidth=0.5, color='black',)\nax.grid(which='minor', linestyle=':', linewidth=0.5, color='black', alpha=0.7)\n\nax.set_xlim([datetime(2018,1,1), datetime(2020,11,10)]);","a8f005e9":"from statsmodels.tsa.stattools import grangercausalitytests\n\ngrangercausalitytests(dataset[[\"Solar\/day\", \"Cumulative_solar_power\"]], maxlag=3);","dbf20040":"# !pip install pmdarima","fbe78dc7":"# from pmdarima import auto_arima\n\n# auto_arima(dataset[\"Solar\/day\"], error_action='ignore').summary()","64e8d2d1":"# auto_arima(dataset['Cumulative_solar_power'], start_p=0, start_q=0, max_p=4, max_q=3, m=12, seasonal=True, d=None, trace=True, error_action='ignore', suppress_warnings=True, stepwise=True).summary()","e13c8928":"# auto_arima(dataset['Cumulative_solar_power'], seasonal=True).summary()","3786aa27":"from statsmodels.tsa.arima_model import ARIMA,ARIMAResults\n\narima_model = ARIMA(train_data[\"Cumulative_solar_power\"], order=(4,1,0)).fit()\narima_model.summary()\n\narima_pred = arima_model.predict(start=len(train_data), end=len(train_data)+len(test_data)-1, dynamic=False, typ='levels')\n\nf, ax = plt.subplots(figsize=(10, 5))\n\nsns.lineplot(data=train_data, x=\"date\", y=\"Cumulative_solar_power\", label='Train', alpha=0.6)\nsns.lineplot(data=test_data, x=\"date\", y=\"Cumulative_solar_power\", label='Test', alpha=0.6)\nsns.lineplot(data=test_data, x=\"date\", y=arima_pred, label='Prediction')\n\nax.set_axisbelow(True)\nax.minorticks_on()\nax.grid(which='major', linestyle='-', linewidth=0.5, color='black',)\nax.grid(which='minor', linestyle=':', linewidth=0.5, color='black', alpha=0.7)\n\nax.set_xlim([datetime(2011,10,26), datetime(2020,11,10)]);","2868ac3c":"from statsmodels.tsa.statespace.sarimax import SARIMAX\n\nsarimax_model = SARIMAX(train_data[\"Cumulative_solar_power\"], order=(4,1,0), seasonal_order=(1,0,1,12)).fit()\nsarimax_model.summary()\n\nsarimax_pred = sarimax_model.predict(start=len(train_data), end=len(train_data)+len(test_data)-1, dynamic=False, typ='levels')\n\nf, ax = plt.subplots(figsize=(10, 5))\n\nsns.lineplot(data=train_data, x=\"date\", y=\"Cumulative_solar_power\", label='Train', alpha=0.6)\nsns.lineplot(data=test_data, x=\"date\", y=\"Cumulative_solar_power\", label='Test', alpha=0.6)\nsns.lineplot(data=test_data, x=\"date\", y=sarimax_pred, label='Prediction')\n\nax.set_axisbelow(True)\nax.minorticks_on()\nax.grid(which='major', linestyle='-', linewidth=0.5, color='black',)\nax.grid(which='minor', linestyle=':', linewidth=0.5, color='black', alpha=0.7)\n\nax.set_xlim([datetime(2011,10,26), datetime(2020,11,10)]);","84dffcbf":"arima_model = ARIMA(dataset[\"Cumulative_solar_power\"], order=(4,1,0)).fit()\narima_model.summary()\n\narima_pred = arima_model.predict(start=len(dataset[\"Cumulative_solar_power\"]), end=len(dataset[\"Cumulative_solar_power\"])+600, dynamic=False, typ='levels')\n\nf, ax = plt.subplots(figsize=(10, 5))\n\nlen_d=len(dataset[\"Cumulative_solar_power\"])\nsns.lineplot(x=range(len_d), y=dataset[\"Cumulative_solar_power\"])\nsns.lineplot(x=range(len_d,len_d+601), y=arima_pred)\n\nax.set_axisbelow(True)\nax.minorticks_on()\nax.grid(which='major', linestyle='-', linewidth=0.5, color='black',)\nax.grid(which='minor', linestyle=':', linewidth=0.5, color='black', alpha=0.7)","5fbb766f":"data_fb = dataset.copy()\ndata_fb = data_fb.rename(columns={'date':'ds','Cumulative_solar_power':'y'})\n\ntrain_fb = data_fb[:2600]\ntest_fb = data_fb[2600:]","56b3e6ab":"from fbprophet import Prophet\n\nmodel_fb = Prophet().fit(train_fb)\nfuture = model_fb.make_future_dataframe(periods=704)\nforecast_fb = model_fb.predict(future)\n\nf, ax = plt.subplots(figsize=(10, 5))\n\nsns.lineplot(data=train_fb, x=\"ds\", y=\"y\", label='Train', alpha=0.6)\nsns.lineplot(data=test_fb, x=\"ds\", y=\"y\", label='Test', alpha=0.6)\n\nsns.lineplot(data=forecast_fb, x=\"ds\", y='yhat', label='Prediction')\nsns.lineplot(data=forecast_fb, x=\"ds\", y='yhat_lower', label='Prediction lower')\nsns.lineplot(data=forecast_fb, x=\"ds\", y='yhat_upper', label='Prediction upper')\n\nsns.lineplot(data=forecast_fb, x=\"ds\", y='trend', label='Trend')\nsns.lineplot(data=forecast_fb, x=\"ds\", y='trend_lower', label='Trend lower')\nsns.lineplot(data=forecast_fb, x=\"ds\", y='trend_upper', label='Trend upper')\n\nax.set_axisbelow(True)\nax.minorticks_on()\nax.grid(which='major', linestyle='-', linewidth=0.5, color='black',)\nax.grid(which='minor', linestyle=':', linewidth=0.5, color='black', alpha=0.7)\n\nax.set_xlim([datetime(2011,10,26), datetime(2020,11,10)]);","b96d319f":"fig = model_fb.plot(forecast_fb)","3094e803":"from fbprophet.plot import add_changepoints_to_plot\n\nfig = model_fb.plot(forecast_fb)\na = add_changepoints_to_plot(fig.gca(), model_fb, forecast_fb)","5fe54eed":"fig = model_fb.plot_components(forecast_fb)","6cce397c":"from fbprophet.plot import plot_plotly, plot_components_plotly\n\nplot_plotly(model_fb, forecast_fb)","d5680cc9":"data_fb = dataset.copy()\ndata_fb = data_fb.rename(columns={'date':'ds','Solar\/day':'y'})\n\ntrain_fb = data_fb[:2600]\ntest_fb = data_fb[2600:]","a82d3e72":"model_fb = Prophet().fit(train_fb)\nfuture = model_fb.make_future_dataframe(periods=704)\nforecast_fb = model_fb.predict(future)\n\nf, ax = plt.subplots(figsize=(20, 4))\n\nsns.lineplot(data=train_fb, x=\"ds\", y=\"y\", label='Train', alpha=0.6)\nsns.lineplot(data=test_fb, x=\"ds\", y=\"y\", label='Test', alpha=0.6)\nsns.lineplot(data=forecast_fb, x=\"ds\", y='yhat', label='Prediction')\nsns.lineplot(data=forecast_fb, x=\"ds\", y='trend', label='Trend')\n\nax.set_axisbelow(True)\nax.minorticks_on()\nax.grid(which='major', linestyle='-', linewidth=0.5, color='black',)\nax.grid(which='minor', linestyle=':', linewidth=0.5, color='black', alpha=0.7)\n\nax.set_xlim([datetime(2011,10,26), datetime(2020,11,10)]);","c6bdf519":"plot_plotly(model_fb, forecast_fb)","34427f0e":"from sklearn.ensemble import RandomForestRegressor\n\n\ndef series_to_supervised(data, n_in=1, n_out=1, dropnan=True):\n    n_vars = 1 if type(data) is list else data.shape[1]\n    df = pd.DataFrame(data)\n    cols = list()\n    # input sequence (t-n, ... t-1)\n    for i in range(n_in, 0, -1):\n        cols.append(df.shift(i))\n    # forecast sequence (t, t+1, ... t+n)\n    for i in range(0, n_out):\n        cols.append(df.shift(-i))\n    agg = pd.concat(cols, axis=1)\n    if dropnan:\n        agg.dropna(inplace=True)\n        \n    return agg.values\n\n\ndef train_test_split(data, n_test):\n    return data[:-n_test, :], data[-n_test:, :]\n\n\ndef random_forest_forecast(train, testX):\n    train = np.asarray(train)\n    trainX, trainy = train[:, :-1], train[:, -1]\n\n    model = RandomForestRegressor(n_estimators=1000)\n    model.fit(trainX, trainy)\n\n    yhat = model.predict([testX])\n    return yhat[0]\n\ndef walk_forward_validation(data, n_test):\n    predictions = list()\n    \n    train, test = train_test_split(data, n_test)\n    \n    history = [x for x in train]\n\n    for i in range(len(test)):\n        testX, testy = test[i, :-1], test[i, -1]\n        \n        yhat = random_forest_forecast(history, testX)\n        \n        predictions.append(yhat)\n        history.append(test[i])\n        \n        print(f'{i}: expected={testy:.1f}, predicted={yhat:.1f}')\n\n    error = mean_absolute_error(test[:, -1], predictions)\n    return error, test[:, -1], predictions","30f3cc19":"data_ml = dataset[['date','Cumulative_solar_power']].copy()\ndata_ml.set_index('date', inplace=True)\n\nvalues = data_ml.values\n\ndata = series_to_supervised(values, n_in=7)\nprint(data.shape)\nprint(data)","d655c74d":"mae, y, yhat = walk_forward_validation(data, 30)\nprint(f'MAE: {mae:.3f}')","10391235":"f, ax = plt.subplots(figsize=(10, 4))\n\nsns.lineplot(x=range(len(y)), y=y, label='Expected')\nsns.lineplot(x=range(len(y)), y=yhat, label='Predicted')\n\nax.set_axisbelow(True)\nax.minorticks_on()\nax.grid(which='major', linestyle='-', linewidth=0.5, color='black',)\nax.grid(which='minor', linestyle=':', linewidth=0.5, color='black', alpha=0.7)\n\nax.set_xlim([0, len(y)-1]);","58c1a125":"future=values\n\ntrain = series_to_supervised(values, n_in=7)\ntrainX, trainy = train[:, :-1], train[:, -1]\nmodel = RandomForestRegressor(n_estimators=1000)\nmodel.fit(trainX, trainy)\n\nrow = values[-7:].flatten()\nyhat = model.predict(np.asarray([row]))\nprint('Input: %s, Predicted: %.3f' % (row, yhat))\n\nsteps=100\nfor i in range(steps):\n    future=np.append(future, [[yhat[0]]], axis=0)\n    row = future[-7:].flatten()\n    yhat = model.predict(np.asarray([row]))\n#     print('Input: %s, Predicted: %.3f' % (row, yhat))","44649b55":"f, ax = plt.subplots(figsize=(10, 4))\n\nsns.lineplot(x=range(len(values.flatten())), y=values.flatten())\nsns.lineplot(x=range(len(values.flatten()), len(future.flatten())), y=future.flatten()[-steps:]);\n\nax.set_axisbelow(True)\nax.minorticks_on()\nax.grid(which='major', linestyle='-', linewidth=0.5, color='black',)\nax.grid(which='minor', linestyle=':', linewidth=0.5, color='black', alpha=0.7)\n\nax.set_ylim(20000, 40000)\nax.set_xlim([len(values.flatten())-1000, len(values.flatten())+steps]);","163a8205":"# !pip install tsfresh","5e740d6a":"# from tsfresh import extract_features, extract_relevant_features, select_features\n# from tsfresh.utilities.dataframe_functions import impute, make_forecasting_frame\n# from tsfresh.feature_extraction import ComprehensiveFCParameters, settings\n\n# data_ts = dataset[['date','Cumulative_solar_power']].copy()\n\n# data_ts.index = data_ts['date']\n# df_air = data_ts.drop(['date'], axis = 1)\n\n# df_shift, y_air = make_forecasting_frame(df_air[\"Cumulative_solar_power\"], kind=\"Cumulative_solar_power\", \n#                                          max_timeshift=12, rolling_direction=1)\n# print(df_shift)","419d6293":"# extraction_settings = ComprehensiveFCParameters()\n# X = extract_features(df_shift, column_id=\"id\", column_sort=\"time\", column_value=\"value\", impute_function=impute,\n#                      show_warnings=False, default_fc_parameters=extraction_settings)\n# X.head()","69bd889e":"!pip install autots","76bf285e":"from autots import AutoTS\n\ndata_ats = dataset[['date','Cumulative_solar_power']].copy()\n\nmodel_list = [\n    'LastValueNaive',\n    'GLS',\n    'ETS',\n    'AverageValueNaive',\n#     'probabilistic', 'multivariate', 'fast', 'superfast', 'all'\n]\n\nmodel = AutoTS(forecast_length=365, \n               frequency='infer', ensemble='simple', \n               max_generations=3, num_validations=2, no_negatives=True, \n               model_list=model_list, transformer_list='all', models_to_validate=0.2, drop_most_recent=1,)\n\nmodel = model.fit(data_ats, date_col='date', value_col='Cumulative_solar_power', id_col=None)\nprint(model)","ca282103":"prediction = model.predict()\nforecast = prediction.forecast\n# prediction.long_form_results()\n# model.results()\n# model.results(\"validation\")\nforecast.head()","49c6f058":"f, ax = plt.subplots(figsize=(10, 4))\n\nsns.lineplot(data=data_ats, x='date', y='Cumulative_solar_power')\nsns.lineplot(data=forecast, x=forecast.index, y='Cumulative_solar_power');\n\nax.set_axisbelow(True)\nax.minorticks_on()\nax.grid(which='major', linestyle='-', linewidth=0.5, color='black',)\nax.grid(which='minor', linestyle=':', linewidth=0.5, color='black', alpha=0.7)\n\nax.set_ylim(20000, 42000)\nax.set_xlim([datetime(2018,1,1), datetime(2021,11,9)]);","2a58a69b":"!pip install kats","1c0195fa":"from kats.consts import TimeSeriesData\nfrom kats.models.prophet import ProphetModel, ProphetParams\n\ndata_kats = dataset[['date','Cumulative_solar_power']].copy()\ndata_kats = data_kats.rename(columns={'date':'time','Cumulative_solar_power':'value'})\n\ntrain_kats = data_kats[:2600]\ntest_kats = data_kats[2600:]\ndata_kats_ts = TimeSeriesData(data_kats)\n\nparams = ProphetParams(seasonality_mode='multiplicative')\nm = ProphetModel(data_kats_ts, params)\nm.fit()\nfcst = m.predict(steps=704)\n# fcst.head()\nm.plot()","6c4f14f7":"from kats.models.theta import ThetaModel, ThetaParams\n\nparams = ThetaParams(m=365)\nm = ThetaModel(data_kats_ts, params)\nm.fit()\nfcst = m.predict(steps=704, alpha=0.2)\nm.plot()","c7b2c76f":"from kats.detectors.outlier import OutlierDetector\n\nts_outlierDetection = OutlierDetector(data_kats_ts, 'additive')\nts_outlierDetection.detector()\nts_outlierDetection.outliers[0]","d34739d2":"data_kats_ts_outliers_removed = ts_outlierDetection.remover(interpolate = False)\ndata_kats_ts_outliers_interpolated = ts_outlierDetection.remover(interpolate = True)\n\nfig, ax = plt.subplots(figsize=(16,8), nrows=1, ncols=2)\n\ndata_kats_ts_outliers_removed.to_dataframe().plot(x = 'time',y = 'y_0', ax= ax[0])\nax[0].set_title(\"Outliers Removed : No interpolation\")\ndata_kats_ts_outliers_interpolated.to_dataframe().plot(x = 'time',y = 'y_0', ax= ax[1])\nax[1].set_title(\"Outliers Removed : With interpolation\")\nplt.show()","0d451156":"## Prophet","5616633a":"## Differencing","2f6eb726":"## Autoregressive Model","ab5b7460":"# Forecasting\n## Forecasting with the Holt-Winters Method","68512103":"## Triple Exponential Smoothing","2c0e5142":"## Granger Causality Tests","d0b557d7":"## Autocorrelation","85b23cfb":"## SARIMAX","7b62a6e2":"# Seasonal Decomposition","b519daac":"## Evaluation Metrics","08332b53":"## Double Exponential Smoothing","830b279c":"## Holt-Winters Methods\n## Simple Exponential Smoothing","0c96c07d":"## Hodrick-Prescott filter","d9d79cd5":"## Resampling","8e74f42d":"## Auto-ARIMA","4f6fa8e1":"## Cumulative data","bc5ced82":"# Data Preprocessing","3800e88b":"## Kats","42baa32e":"## tsfresh ","9faaebe5":"## Random Forest","5d8a1011":"## Expanding","576319ae":"## ARIMA","0b2ad303":"## Exponentially Weighted Moving Average","dae082e6":"## AutoTS","160abd45":"# Data visualization"}}