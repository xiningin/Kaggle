{"cell_type":{"7edaefef":"code","40d3d0b8":"code","30cab495":"code","14e8c856":"code","50dffff5":"code","fc02f515":"code","6daf13af":"code","0f40c772":"code","5fc715fe":"code","aec7656d":"code","3a6710b0":"markdown","9c1147d7":"markdown","7628cdbd":"markdown","aefc24dd":"markdown","6977ee2d":"markdown","737b4a71":"markdown","8407adec":"markdown","7fe48429":"markdown","f5ce3e88":"markdown","5f812704":"markdown","80f116b2":"markdown","77c85d4b":"markdown"},"source":{"7edaefef":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport cv2\nfrom matplotlib import pyplot as plt\nimport matplotlib.image as mpimg\nfrom PIL import Image\nimport random\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.python.keras.preprocessing import image\nfrom tensorflow.python.keras.layers import *\nfrom tensorflow.python.keras.models import * \nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n\n#set seed\nfrom numpy.random import seed\nseed(10)\ntf.random.set_seed(10)\n\nprint('Imported Successfully')\n\n\n\n%matplotlib inline","40d3d0b8":"img_folder='..\/input\/covid19-xray-dataset-train-test-sets\/xray_dataset_covid19\/train\/'\nplt.figure(figsize=(20,20))\nfor i in range(6):\n class_ = random.choice(os.listdir(img_folder))\n class_path= os.path.join(img_folder, class_)\n file=random.choice(os.listdir(class_path))\n image_path= os.path.join(class_path,file)\n print(image_path)\n img= mpimg.imread(image_path)\n ax=plt.subplot(1,6,(i+1))\n plt.imshow(img)\n ax.title.set_text(class_)\n","30cab495":"def create_dataset(img_folders,IMG_WIDTH,IMG_HEIGHT):\n    \n    \n    img_data_array=[]\n    class_name=[]\n    n=0\n    for dirname, _, filenames in os.walk(img_folders):\n        for filename in filenames:\n            img_path= os.path.join(dirname, filename)\n            #read the image\n            image = cv2.imread(img_path)\n            # BGR is converted to RGB\n            image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n            image = cv2.resize(image, (IMG_WIDTH,IMG_HEIGHT))\n            image=np.array(image)\n            image = image.astype('float32')\n            image \/= 255\n            img_data_array.append(image)\n            class_=str(dirname).split(\"\/\")[-1]\n            class_name.append(class_)\n            n+=1\n            \n            \n            \n    return img_data_array, class_name,n# extract the image array and class name\n\n\n","14e8c856":"IMG_WIDTH= 224\nIMG_HEIGHT=224\ntrain_path='\/kaggle\/input\/covid19-xray-dataset-train-test-sets\/xray_dataset_covid19\/train\/'\ntest_path='\/kaggle\/input\/covid19-xray-dataset-train-test-sets\/xray_dataset_covid19\/test\/'\ntrain_img,train_target,num_img=create_dataset(train_path,IMG_WIDTH,IMG_HEIGHT)\ntest_img,test_target,num_test_img=create_dataset(test_path,IMG_WIDTH,IMG_HEIGHT)\n","50dffff5":"plt.figure(figsize=(20,20))\nfor i in range(6):\n    random_num = random.randint(0,num_img)\n    ax=plt.subplot(1,6,(i+1))\n    plt.imshow(train_img[random_num])\n    ax.title.set_text(train_target[random_num])","fc02f515":"target_dict={k: v for v, k in enumerate(np.unique(train_target))}\nprint(target_dict)\ntrain_target= [target_dict[train_target[i]] for i in range(len(train_target))]\ntrain_target=np.array(train_target)\ntrain_img=np.array(train_img)\ntest_target= [target_dict[test_target[i]] for i in range(len(test_target))]\ntest_target=np.array(test_target)\ntest_img=np.array(test_img)","6daf13af":"#Saving best model while monitoring accuracy\nmodel_chkpt = ModelCheckpoint('best_mod.h5', save_best_only=True, monitor='accuracy')\n\n#early stopping for preventing overfitting\nearly_stopping = EarlyStopping(monitor='loss', restore_best_weights=False, patience=10)\n\n#Define a Sequential() model.\nmodel = Sequential()\n# Add the first layer: 32 is the number of filters; kernel_size specifies the size of our filters;\n# activation specifies the activation function;input_shape specifies what type of input we are going to pass to the network\nmodel.add(Conv2D(32, kernel_size=(3,3), activation=\"relu\",input_shape=(IMG_WIDTH,IMG_HEIGHT,3)))\n# Second layer: specified 64 filters(must be a power of 2)\nmodel.add(Conv2D(64, kernel_size=(3,3), activation=\"relu\"))\n#Deine a Max pooling: kernel_size, which specified the size of the pooling window.\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n#Dropout. This means that the model will not overfit, as some neurons randomly will not be selected for activation. \n#This prevents the model from overfitting.\nmodel.add(Dropout(0.25))\n#Repeate the above steps to make a deeper network.\nmodel.add(Conv2D(128, kernel_size=(3,3), activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n# Flatten layer\nmodel.add(Flatten())\nmodel.add(Dense(64, activation = \"relu\"))\nmodel.add(Dropout(0.5))\n# Create an output sigmoid function\nmodel.add(Dense(1, activation=\"sigmoid\"))\n#Compile the model: binary_crossentropy because this is a binary classification problem; adam as the optimizer; the metric that we want to monitor is accuracy.\nmodel.compile(loss=\"binary_crossentropy\", optimizer=\"adam\",metrics = [\"accuracy\"])\n# Printe the model architecture to take a look at the number of parameters that the model will learn.\nmodel.summary()","0f40c772":"history = model.fit(train_img, train_target, \n          validation_split=0.10, \n          epochs=20, \n          batch_size=32, \n          shuffle=True, \n          callbacks=[model_chkpt, early_stopping]\n        )","5fc715fe":"\nimport pandas as pd\n\nhistory_frame = pd.DataFrame(history.history)\nhistory_frame.loc[:, ['loss', 'val_loss']].plot()\nhistory_frame.loc[:, ['accuracy', 'val_accuracy']].plot();\n","aec7656d":"#prediction on test set\npred = model.predict(test_img,batch_size=32)\n\nlabel = [int(p>=0.5) for p in pred]\n\n#label\n#Performance Evaluation - Accuracy, Classification Report & Confusion Matrix\n#Accuracy Score\nprint ('Accuracy Score : ', accuracy_score(label, test_target), '\\n')\n\n#precision, recall report\nprint ('Classification Report :\\n\\n' ,classification_report(label, test_target))","3a6710b0":"<a id=\"8\"> <\/a>\n# 8. Run the model","9c1147d7":"<a id=\"9\"> <\/a>\n\n# 9. Plot the loss function and accuracy, for the train and validation sample\n","7628cdbd":"<a id=\"5\"> <\/a>\n# 5. Plot six random images\nThe new images plot shown the standarization of the same, after the preprocess function has been applied.\n","aefc24dd":"<a id=\"2\"><\/a>\n# 2. Plot six random images from the train folder","6977ee2d":"# **COVID 19 X-RAY CNN CLASSIFICATION**","737b4a71":"<a id=\"3\"><\/a>\n# 3. Preprocess the images, in order to create the dataset\n\n The following steps were tipycally applied to custom dataset for Deep Learning Models:\n \n  a) Open the image file. It is common that the source folder contains images of differents classes.\n  \n  b) Read the image file from the folder and convert it to the right color format.\n  \n  c) Resize the image to match the input size for the Input layer of the Deep Learning model.\n  \n  d) Convert the image pixels to float datatype.\n  \n  e) Normalize the image to have pixel values scaled down between 0 and 1, from 0 to 255,which helps with faster convergence.\n  \n  f) Convert the data into a numpy array or a tensor object.\n  \n  g) Create the folder structure of the custom image data\n","8407adec":"This is the first exercise of the Building Advanced Deep Learning and NLP Projects course. The following project consists on bulding a a deep learning model, which detect if a person is Coronoa virus positive, analyzing the X-ray tests.  A deeper Convolutional Neural Network, will be created \nin order to achive the goal.\n\nContent\n\n1. [Import the required libraries](#1)<br>\n2. [Plot six random images from the train folder](#2)<br>\n3. [Preprocess the images, in order to create the dataset](#3)<br>\n4. [Load the train and test data](#4)<br>\n5. [Plot six random images](#5)<br>\n6. [Convert text labels to numeric codes](#6)<br>\n7. [Define the model](#7)<br>\n8. [Run the model](#8)<br>\n9. [Plot the loss function and accuracy, for the train and validation sample](#9)<br>\n10. [Predict the results for the test sample](#10)<br>\n\n\n\n","7fe48429":"<a id=\"10\"> <\/a>\n# 10. Predict the results for the test sample\n\nAs it shown below, the model has a remarkable accuracy (95%) in order to predict if the person has corona virus. ","f5ce3e88":"<a id=\"1\"><\/a> \n# 1. Import required libraries\n\nAdditionally, a seed will be set in order to achive reproducible results","5f812704":"<a id=\"4\"><\/a>\n# 4. Load the train and test data","80f116b2":"<a id=\"7\"><\/a>\n# 7. Define the model","77c85d4b":"<a id=\"6\"> <\/a>\n# 6. Convert text labels to numeric codes"}}