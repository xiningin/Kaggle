{"cell_type":{"669a52d1":"code","055ca595":"code","9fa184e8":"code","1694dbd7":"code","a3ded577":"code","a5e68fd3":"code","8ae54837":"code","10620277":"code","c91000a1":"code","c339abab":"code","e1d8f4c2":"code","663d9085":"code","196e3df5":"code","a8093fea":"code","970bdfad":"code","32e7da36":"code","09db12dc":"code","3441cc99":"code","86fff6df":"markdown"},"source":{"669a52d1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\n\n\n\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","055ca595":"train=pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntrain ","9fa184e8":"train.values","1694dbd7":"tt=(train.drop('label',axis=1).values).reshape(train.shape[0],28,28,1)\nfor i in tt[1]:\n    for j in i:\n            print(j[0],end=' ')\n    print()","a3ded577":"tt=tt\/255","a5e68fd3":"from matplotlib import pyplot as plt\na=np.array(train.iloc[1,1:]).reshape(28,28)\nplt.imshow(a)","8ae54837":"test=pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\ntest","10620277":"tt_test=(test.values).reshape(test.shape[0],28,28,1)\ntt_test=tt_test\/255","c91000a1":"sample_submission=pd.read_csv('\/kaggle\/input\/digit-recognizer\/sample_submission.csv')\nsample_submission","c339abab":"train.label.value_counts()","e1d8f4c2":"import tensorflow as tf\nfrom tensorflow import keras\nfrom keras import models, layers","663d9085":"\nmodel_mnist = keras.models.Sequential([\n                                       layers.Conv2D(32, (3,3), activation=\"relu\", input_shape=(28,28,1)),\n                                       layers.MaxPooling2D(2,2),\n                                    layers.Conv2D(64, (3,3), activation=\"relu\"),\n                                       layers.MaxPooling2D(2,2),\n                                       layers.Flatten(),\n                                       # layers.Dropout(0.1),\n                                        layers.BatchNormalization(),\n                                       layers.Dense(128, activation=\"relu\"), #kernel_initializer=\"he_normal\"),\n                                        layers.BatchNormalization(),\n                                       layers.Dense(10, activation=\"softmax\")])","196e3df5":"model_mnist.compile(loss=\"sparse_categorical_crossentropy\", \n                    optimizer=\"adam\", \n                    metrics=[\"accuracy\"])","a8093fea":"model_history = model_mnist.fit(tt,train.label,verbose=1,epochs=5)","970bdfad":"prediction=model_mnist.predict(tt_test)","32e7da36":"y_test=[]\nfor i in prediction:\n    i=list(i)\n    label=i.index(max(i))\n    y_test.append(label)\ny_test","09db12dc":"result=pd.DataFrame({'ImageId':[i for i in range(1,len(y_test)+1)],'Label':y_test})\nresult","3441cc99":"result.to_csv('Predictions.csv',index=False,header=True)","86fff6df":"## This is how a 28X28 image looks like for label zero "}}