{"cell_type":{"f4a21410":"code","3510da41":"code","8690871a":"code","915e892a":"code","9047de7d":"code","d533461b":"code","72ad5bfd":"code","f6b9368e":"code","f6cd3da1":"code","4911e969":"code","d89dca1a":"code","d0285dab":"code","8c23a3a4":"code","05aac677":"code","a383f387":"code","b68b8d91":"code","31adee5a":"markdown","45bf4750":"markdown","0db090c1":"markdown","35ce4105":"markdown","1b38fe94":"markdown","23e58533":"markdown","40296a2f":"markdown"},"source":{"f4a21410":"#data preprocessing\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","3510da41":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPool2D, Dropout, Flatten, Dense\nfrom keras.utils.np_utils import to_categorical","8690871a":"# Details of dataset\n# http:\/\/yann.lecun.com\/exdb\/mnist\/\n# from keras.datasets import mnist\n# (X_train,y_train) , (X_test,y_test) = mnist.load_data()","915e892a":"import os\nprint(os.listdir(\"..\/input\"))","9047de7d":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","d533461b":"print('train_set shape : {}, test_set shape : {}'.format(train.shape,test.shape))","72ad5bfd":"print(train.head(3))\nprint(\"--------------------------------------\")\nprint(test.head(3))","f6b9368e":"X_train = train.drop(\"label\",axis=1)\nY_train = to_categorical(train.label)","f6cd3da1":"#Normalization\nX_train = X_train \/ 255.0\nY_train = Y_train \/ 255.0","4911e969":"blx_tr, blx_val, bly_tr, bly_val = train_test_split(X_train, Y_train, test_size=0.17, random_state=346)","d89dca1a":"baseline = Sequential()\nbaseline.add(Dense(X_train.values.shape[1] , input_dim=X_train.values.shape[1], activation = 'relu'))\nbaseline.add(Dense(256, activation = 'relu'))\nbaseline.add(Dropout(0.2))\nbaseline.add(Dense(64, activation = 'relu'))\nbaseline.add(Dense(10, activation = 'softmax'))\nbaseline.compile(optimizer='RMSprop',loss='categorical_crossentropy',metrics=['accuracy'])","d0285dab":"base_line = baseline.fit(blx_tr,bly_tr, validation_data=(blx_val,bly_val), batch_size=100,epochs=10)","8c23a3a4":"#CNN\nX_tr = X_train.values.reshape(-1,28,28,1)\nY_tr = Y_train","05aac677":"x_tr,x_val,y_tr,y_val = train_test_split(X_tr,Y_tr,test_size=0.1,random_state=346)","a383f387":"model = Sequential()\nmodel.add(Conv2D(filters = 32, kernel_size=(3,3), input_shape=(28,28,1), activation = 'relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(64, (3,3), activation = 'relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(56, activation = 'relu'))\nmodel.add(Dense(10, activation = 'softmax'))\nmodel.compile(optimizer = 'RMSprop', loss = 'categorical_crossentropy', metrics=['accuracy'])","b68b8d91":"model = model.fit(x_tr,y_tr,validation_data=(x_val,y_val),batch_size=100,epochs=10)","31adee5a":"Validation accuracy is greater than training accuracy, hence porceeding with this model, this model ","45bf4750":"Validation accuracy is good at 97.56%\n\nThe validation accuracy is greater than the training accuracy almost every time during the training. That means that **our model dosen't not overfit the training set.**","0db090c1":"Unable to use the dataset from Keras library - Got to know that kaggle kernels do not have network access https:\/\/www.kaggle.com\/data\/50566\n\nLoading data from the Digit Recognizer competition dataset\nhttps:\/\/www.kaggle.com\/c\/digit-recognizer\/kernels.","35ce4105":"We have 42k labelled images for training and validation, 28k images as unlabelled test set. \n\nI guess the test set is not labelled as the dataset is part of competition. Will have to split the given train set to test set too, or may be will add this note to the competition.! As of now will proceed considering the whole train data for** both training and testing**","1b38fe94":"** Model using CNN architectrue **","23e58533":"**Baseline model with Multi-layer Perceptrons **","40296a2f":"Developing a CNN model with already available dataset in Keras DL library."}}