{"cell_type":{"24ec9c30":"code","b14b7eff":"code","74196342":"code","168e4589":"code","5bb72a56":"code","cd4f3f61":"code","1f7a312c":"code","3a4e6287":"code","91ca7f48":"code","e73a0825":"code","f50c553e":"code","7589bab4":"code","ff63bfa6":"code","46972a48":"code","5a7706e2":"code","1475f55e":"code","7fa67d57":"code","fc09e84b":"code","6985d83c":"code","01bb5ade":"code","e2ef2a58":"code","62e8a92f":"code","13d94561":"code","b6572fc8":"code","8cb5b479":"code","d897db55":"code","0dd0e62e":"code","e09dfa14":"code","8813ffac":"code","ab6cd2a4":"code","6385d9ed":"code","68d010f4":"code","93ac9dcf":"code","13e3111c":"code","875f7d32":"code","508c9d34":"code","f2870b2a":"code","d016b269":"code","17cb8b39":"code","23ce2ebf":"code","e4ea6020":"markdown","1fd4f18f":"markdown","65c135c8":"markdown"},"source":{"24ec9c30":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")","b14b7eff":"df = pd.read_csv(\"\/kaggle\/input\/predict-red-wine-quality\/train.csv\")\ndft = pd.read_csv(\"\/kaggle\/input\/predict-red-wine-quality\/test.csv\")","74196342":"df","168e4589":"df['quality'].value_counts()","5bb72a56":"df.info()","cd4f3f61":"plt.subplots(figsize=(15,10))\nsns.heatmap(df.corr(),annot=True)","1f7a312c":"df.columns","3a4e6287":"df.drop([\"id\"],axis = 1,inplace = True)","91ca7f48":"ids = dft['id']\ndft.drop([\"id\"],axis = 1,inplace = True)","e73a0825":"df","f50c553e":"dft","7589bab4":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import f1_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import roc_auc_score\nimport statsmodels.api as sm\nfrom sklearn.metrics import accuracy_score","ff63bfa6":"X = df.drop( \"quality\",axis=1)\ny = df[\"quality\"]","46972a48":"# use 70% of the data for training and 30% for testing\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=.7, random_state=50)","5a7706e2":"lr = LogisticRegression(random_state = 101,class_weight='balanced')\nlr.fit(X_train,y_train)","1475f55e":"y_pred = lr.predict(X_test)","7fa67d57":"print(\"F1 Score :\",f1_score(y_pred,y_test,average = \"weighted\"))\nprint('Report:\\n',classification_report(y_test, y_pred))","fc09e84b":"confusion_matrix(y_test, y_pred)","6985d83c":"test = lr.predict(dft)","01bb5ade":"Predf = pd.DataFrame(columns=[\"id\",'quality'])\nPredf['id']= ids\nPredf['quality']= test","e2ef2a58":"Predf","62e8a92f":"#Predf.to_csv('Solution.csv',index=False)","13d94561":"from sklearn.ensemble import RandomForestClassifier","b6572fc8":"rfc = RandomForestClassifier(n_estimators=50,max_depth=10, random_state=101,class_weight='balanced')\nrfc.fit(X_train,y_train)","8cb5b479":"y_pred = rfc.predict(X_test)","d897db55":"print(\"F1 Score :\",f1_score(y_pred,y_test,average = \"weighted\"))\nprint('Report:\\n',classification_report(y_test, y_pred))","0dd0e62e":"confusion_matrix(y_test, y_pred)","e09dfa14":"test = rfc.predict(dft)\nPredf = pd.DataFrame(columns=[\"id\",'quality'])\nPredf['id']= ids\nPredf['quality']= test","8813ffac":"Predf.to_csv('Solution1.csv',index=False)","ab6cd2a4":"### Using Rfe\nfrom sklearn.feature_selection import RFE\nrfe = RFE(rfc, 4)\nrfe.fit(X_train,y_train)","6385d9ed":"X_train[list(X_train.columns[rfe.support_])]","68d010f4":"rfc.fit(X_train[list(X_train.columns[rfe.support_])],y_train)","93ac9dcf":"y_pred = rfc.predict(X_test[list(X_test.columns[rfe.support_])])","13e3111c":"print(\"F1 Score :\",f1_score(y_pred,y_test,average = \"weighted\"))\nprint('Report:\\n',classification_report(y_test, y_pred))","875f7d32":"confusion_matrix(y_test, y_pred)","508c9d34":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, average_precision_score\nfrom xgboost import XGBClassifier\nimport xgboost as xgb","f2870b2a":"model = XGBClassifier(random_state=7,class_weight='balanced')\nmodel.fit(X_train, y_train)","d016b269":"y_pred = model.predict(X_test)","17cb8b39":"print(\"F1 Score :\",f1_score(y_pred,y_test,average = \"weighted\"))\nprint('Report:\\n',classification_report(y_test, y_pred))","23ce2ebf":"confusion_matrix(y_test, y_pred)","e4ea6020":"# Wine Quality Prediction\n#### Practice Notebook","1fd4f18f":"## XGB","65c135c8":"## Random  Forest"}}