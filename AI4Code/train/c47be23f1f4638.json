{"cell_type":{"80760137":"code","ab1e455b":"code","1062dc4f":"code","b9a03398":"code","2424949b":"code","ea526f39":"code","68db653c":"code","eeb1565e":"code","d83e60df":"code","9caeba60":"code","251d3163":"code","a401e7f6":"code","ccc0a902":"code","a35016f4":"markdown","c024e93d":"markdown","36c0d1d7":"markdown","837697cf":"markdown","3c3d145f":"markdown","050c2f43":"markdown"},"source":{"80760137":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ab1e455b":"# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nimport json\nimport glob\nimport os\nfrom folium.plugins import MarkerCluster\nfrom folium import plugins\nfrom pandas.io.json import json_normalize\nfrom folium import FeatureGroup, LayerControl, Map, Marker\n# import calmap\nimport plotly.graph_objects as go\nimport folium","1062dc4f":"full_table = pd.read_csv('..\/input\/trajec\/train.csv' )\nfull_table","b9a03398":"# Create two lists for the loop results to be placed\nlat = []\nlon = []\n\nfor row in full_table['space']:\n    try:\n        lat.append(row.split(' ')[0])\n        lon.append(row.split(' ')[1])\n    except:\n        # append a missing value to lat\n        lat.append(np.NaN)\n        # append a missing value to lon\n        lon.append(np.NaN)\n       # y_data4 = ((2, 3, 4), (1, 2, \"hi\"))\n    \nf = [float(lat[i]) for i in range (0,len(lat))]\ntype(f[0])\ng = [float(lon[i]) for i in range (0,len(lon))]\ntype(f[0])\nfull_table['latitude'] = f\nfull_table['longitude'] = g\n\nfull_table \n\n    ","2424949b":"# Function Gather the lat and lon in a list into this form : [(lat,lon)]    \ndef merge(list1, list2): \n      \n    merged_list = [(list1[i], list2[i]) for i in range(0, len(list1))] \n    return merged_list\n\nmerged = merge(f,g)\nmerged\nfull_table['newspace']= merged\n\nfull_table\n\none = full_table[full_table['tid'] == 127]\ntwo = full_table[full_table['tid'] == 129]\nthree = full_table[full_table['tid'] == 130]\nfour = full_table[full_table['tid'] == 131]\nfive = full_table[full_table['tid'] == 132]\nsix = full_table[full_table['tid'] == 133]\nseven = full_table[full_table['tid'] == 135]\neight = full_table[full_table['tid'] == 137]\nnine = full_table[full_table['tid'] == 139]\n\n\n# Function to give a position number, an order \ndef position(lis):\n    bar = [i for i in range(1,len(lis)+1)]\n    lis['position'] = bar\n    return lis\n# Affecting every trajectories a position to give an order\nonep = position(one)\ntwop = position(two)\nthreep = position(three)\nfourp = position(four)\nfivep = position(five)\nsixp = position(six)\nsevenp = position(seven)\neightp = position(eight)\nninep = position(nine)\n\n# Adding in the dataframe the position order\ndf_new = pd.concat([onep['position'] , twop['position'] , threep['position'] ,fourp['position'] , fivep['position'] , sixp['position'] , sevenp['position'] , eightp['position'] , ninep['position']])\nfull_table['position']= df_new\nfull_table\n\n","ea526f39":"m = folium.Map(location=[40.8, -74], tiles='cartodbpositron',\n                   min_zoom=1, max_zoom=25, zoom_start=10)\n\n#marker_cluster = MarkerCluster().add_to(m)\n#mcg = folium.plugins.MarkerCluster(control=False)\n\nmcg = folium.FeatureGroup(name='groups')\nm.add_child(mcg)\n\ng1 = folium.plugins.FeatureGroupSubGroup(mcg, 'trajectory 127')\nm.add_child(g1)\ng2 = folium.plugins.FeatureGroupSubGroup(mcg, 'trajectory 129')\nm.add_child(g2)\ng3 = folium.plugins.FeatureGroupSubGroup(mcg, 'trajectory 130')\nm.add_child(g3)\ng4 = folium.plugins.FeatureGroupSubGroup(mcg, 'trajectory 131')\nm.add_child(g4)\ng5 = folium.plugins.FeatureGroupSubGroup(mcg, 'trajectory 132')\nm.add_child(g5)\ng6 = folium.plugins.FeatureGroupSubGroup(mcg, 'trajectory 133')\nm.add_child(g6)\ng7 = folium.plugins.FeatureGroupSubGroup(mcg, 'trajectory 135')\nm.add_child(g7)\ng8 = folium.plugins.FeatureGroupSubGroup(mcg, 'trajectory 137')\nm.add_child(g8)\ng9 = folium.plugins.FeatureGroupSubGroup(mcg, 'trajectory 139')\nm.add_child(g9)\n\n#CircleMarker\nfor i in range (0, len(one)):\n    folium.CircleMarker(\n            location=[one.iloc[i]['latitude'], one.iloc[i]['longitude']],\n            tooltip = '<li><bold>Position : '+str(one.iloc[i]['position'])\n                        +'<li><bold>Trajectory : '+str(one.iloc[i]['tid'])\n                        +'<li><bold>Date : '+str(one.iloc[i]['datetime'])\n                        +'<li><bold>Activity : '+str(one.iloc[i]['poi']),radius= int(one.iloc[i]['position'])\/2).add_to(g1)\n    \n    \nfor i in range (0, len(two)):\n    folium.Marker(\n            location=[two.iloc[i]['latitude'], two.iloc[i]['longitude']],\n            tooltip = '<li><bold>Position : '+str(two.iloc[i]['position'])\n                        +'<li><bold>Trajectory : '+str(two.iloc[i]['tid'])\n                        +'<li><bold>Date : '+str(two.iloc[i]['datetime'])\n                        +'<li><bold>Activity : '+str(two.iloc[i]['poi']),radius=0.1).add_to(g2)\n    \nfor i in range (0, len(three)):\n    folium.Marker(\n            location=[three.iloc[i]['latitude'], three.iloc[i]['longitude']],\n            tooltip = '<li><bold>Position : '+str(three.iloc[i]['position'])\n                        +'<li><bold>Trajectory : '+str(three.iloc[i]['tid'])\n                        +'<li><bold>Date : '+str(three.iloc[i]['datetime'])\n                        +'<li><bold>Activity : '+str(three.iloc[i]['poi']),radius=0.1).add_to(g3)\nfor i in range (0, len(four)):\n    folium.Marker(\n            location=[four.iloc[i]['latitude'], four.iloc[i]['longitude']],\n            tooltip = '<li><bold>Position : '+str(four.iloc[i]['position'])\n                        +'<li><bold>Trajectory : '+str(four.iloc[i]['tid'])\n                        +'<li><bold>Date : '+str(four.iloc[i]['datetime'])\n                        +'<li><bold>Activity : '+str(four.iloc[i]['poi']),radius=0.1).add_to(g4)\nfor i in range (0, len(five)):\n    folium.Marker(\n            location=[five.iloc[i]['latitude'], five.iloc[i]['longitude']],\n            tooltip = '<li><bold>Position : '+str(five.iloc[i]['position'])\n                        +'<li><bold>Trajectory : '+str(five.iloc[i]['tid'])\n                        +'<li><bold>Date : '+str(five.iloc[i]['datetime'])\n                        +'<li><bold>Activity : '+str(five.iloc[i]['poi']),radius=0.1).add_to(g5)\nfor i in range (0, len(six)):\n    folium.Marker(\n            location=[six.iloc[i]['latitude'], six.iloc[i]['longitude']],\n            tooltip = '<li><bold>Position : '+str(six.iloc[i]['position'])\n                        +'<li><bold>Trajectory : '+str(six.iloc[i]['tid'])\n                        +'<li><bold>Date : '+str(six.iloc[i]['datetime'])\n                        +'<li><bold>Activity : '+str(six.iloc[i]['poi']),radius=0.1).add_to(g6)\nfor i in range (0, len(seven)):\n    folium.Marker(\n            location=[seven.iloc[i]['latitude'], seven.iloc[i]['longitude']],\n            tooltip = '<li><bold>Position : '+str(seven.iloc[i]['position'])\n                        +'<li><bold>Trajectory : '+str(seven.iloc[i]['tid'])\n                        +'<li><bold>Date : '+str(seven.iloc[i]['datetime'])\n                        +'<li><bold>Activity : '+str(seven.iloc[i]['poi']),radius=0.1).add_to(g7)\nfor i in range (0, len(eight)):\n    folium.Marker(\n            location=[eight.iloc[i]['latitude'], eight.iloc[i]['longitude']],\n            tooltip = '<li><bold>Position : '+str(eight.iloc[i]['position'])\n                        +'<li><bold>Trajectory : '+str(eight.iloc[i]['tid'])\n                        +'<li><bold>Date : '+str(eight.iloc[i]['datetime'])\n                        +'<li><bold>Activity : '+str(eight.iloc[i]['poi']),radius=0.1).add_to(g8)\nfor i in range (0, len(nine)):\n    folium.Marker(\n            location=[nine.iloc[i]['latitude'], nine.iloc[i]['longitude']],\n            tooltip = '<li><bold>Position : '+str(nine.iloc[i]['position'])\n                        +'<li><bold>Trajectory : '+str(nine.iloc[i]['tid'])\n                        +'<li><bold>Date : '+str(nine.iloc[i]['datetime'])\n                        +'<li><bold>Activity : '+str(nine.iloc[i]['poi']),radius=0.1).add_to(g9)\n\nfolium.LayerControl(collapsed=False).add_to(m)\n\nplugins.Fullscreen(\n    position='topright',\n    title='Expand me',\n    title_cancel='Exit me',\n    force_separate_button=True\n).add_to(m)\n\nm","68db653c":"#import sys\n#sys.setrecursionlimit(100)\n# Add line to map\nfolium.PolyLine(one['newspace'],color=\"grey\", weight=2, opacity=0.5).add_to(g1)\nfolium.PolyLine(two['newspace'],color=\"grey\", weight=2, opacity=0.5).add_to(g2)\nfolium.PolyLine(three['newspace'],color=\"grey\", weight=2, opacity=0.5).add_to(g3)\nfolium.PolyLine(four['newspace'],color=\"grey\", weight=2, opacity=0.5).add_to(g4)\nfolium.PolyLine(five['newspace'],color=\"grey\", weight=2, opacity=0.5).add_to(g5)\nfolium.PolyLine(six['newspace'],color=\"grey\", weight=2, opacity=0.5).add_to(g6)\nfolium.PolyLine(seven['newspace'],color=\"grey\", weight=2, opacity=0.5).add_to(g7)\nfolium.PolyLine(eight['newspace'],color=\"grey\", weight=2, opacity=0.5).add_to(g8)\nfolium.PolyLine(nine['newspace'],color=\"grey\", weight=2, opacity=0.5).add_to(g9)\n\nm","eeb1565e":"full_table.to_csv('newtrain.csv', index = False)\n\n\ntraj = full_table\n#Change of the index\ntraj.index.name = 'Position'\n#Transpos of full_table\ntraj= full_table.T\ntraj","d83e60df":"#load json object\nwith open('..\/input\/newtraj\/moveletsOnTrain.json') as f:\n    d = json.load(f)\n\nnycphil = pd.json_normalize(d['shapelets'])\ndatas =nycphil['Data'][0]\n\ndf = pd.DataFrame()\nst = pd.DataFrame()\ncount = 1\n\nfor x in range(0, 27):\n    new = []\n    posi = d['shapelets'][x]['points_with_only_the_used_features']\n    new = pd.json_normalize(posi)\n    new['tid'] = d['shapelets'][x]['trajectory']\n    new['start'] = d['shapelets'][x]['start']\n    new['end'] = d['shapelets'][x]['end']\n    new['label'] = d['shapelets'][x]['label']\n    new['size'] = int(d['shapelets'][x]['quality']['size'])\n    new['quality'] = int(d['shapelets'][x]['quality']['quality'] * 100)\n    new['movelet_id'] = count\n    st = st.append(new)\n    count += 1\n\nst = st.sort_values(by = ['tid', 'movelet_id'])\n\nst.reset_index(drop = True, inplace = True)\n\n#st.set_index(['tid','Position'], inplace=True)\n\nst","9caeba60":"mov13 = st[st['movelet_id'] == 13]\nmov15 = st[st['movelet_id'] == 15]\nmov15 = st[st['movelet_id'] == 15]\nmov16 = st[st['movelet_id'] == 16]\nmov17 = st[st['movelet_id'] == 17]\nmov18 = st[st['movelet_id'] == 18]\nmov19 = st[st['movelet_id'] == 19]\nmov20 = st[st['movelet_id'] == 20]\n    \ntraj127 =full_table[full_table['tid'] == 127]\n\ndef mergee(list1, list2):\n    h = pd.DataFrame()\n    merged_list = [(list1[i], list2[i]) for i in range(0, len(list1))]\n    print(merged_list)\n    y = [(i) for i in range(merged_list[0][0],merged_list[0][-1]+1)]\n    h =h.append(yo)\n    return y\n\npl13 =mergee(mov13['start'],mov13['end'])\n\n\nmov13['place'] =pl13\n\nv13 = mov13['place']\nb13 = mov13['movelet_id']\n\n\nplt.plot(v13,b13)\n\nplt.legend()\n \n# Add title and axis names\nmy_range=range(1,len(traj127)+1)\nplt.xticks(my_range)\nplt.title(\"movelets in trajectories\", loc='left')\nplt.xlabel('Trajectory points')\nplt.ylabel('movelets')\ne = pd.DataFrame()\ng =pd.DataFrame()\ne =mov13['start']\ng =mov13['end']\nmerged_list = [(mov13['start'], mov13['end']) for i in range(0, len(mov13['start']))] \nmerged_list ","251d3163":"import pandas as pd\nimport matplotlib.pyplot as plt\n \n# Create a dataframe\nvalue1=np.random.uniform(size=20)\nvalue2=value1+np.random.uniform(size=20)\/4\ndf = pd.DataFrame({'group':list(map(chr, range(65, 85))), 'value1':value1 , 'value2':value2 })\n \n# Reorder it following the values of the first value:\nordered_df = df.sort_values(by='value1')\nmy_range=range(1,len(st.index)+1)\n \n# The vertical plot is made using the hline function\n# I load the seaborn library only to benefit the nice looking feature\nimport seaborn as sns\nplt.hlines(y=my_range, xmin=st['start'], xmax=st['end'], color='grey', alpha=0.4)\nplt.scatter(st['start'], my_range, color='skyblue', alpha=1, label='value1')\nplt.scatter(st['end'], my_range, color='green', alpha=0.4 , label='value2')\nplt.legend()\n \n# Add title and axis names\nplt.yticks(my_range, ordered_df['group'])\nplt.title(\"Comparison of the value 1 and the value 2\", loc='left')\nplt.xlabel('Trajectory points')\nplt.ylabel('movelets')\n","a401e7f6":"x=[2,17]\nfor i in range(x):\n    h=h.append(i)","ccc0a902":"# Function Gather the lat and lon in a list into this form : [(lat,lon)]    \ndef merge(list1, list2): \n      \n    merged_list = [(list1[i], list2[i]) for i in range(0, len(list1))] \n    return merged_list\ny= st['features.space.y']\nx = st['features.space.x']\nlove =merge(x,y)\nlove\n\nst['space']= love\nst\n\n\na = st[st['tid'] == 127]\nb = st[st['tid'] == 129]\nc = st[st['tid'] == 130]\nd = st[st['tid'] == 131]\ne = st[st['tid'] == 132]\nf = st[st['tid'] == 133]\ng = st[st['tid'] == 135]\nh = st[st['tid'] == 137]\ni = st[st['tid'] == 139]\ni\n\n\nfolium.PolyLine(a['space'],color=\"cyan\", weight=2, opacity=0.5).add_to(g1)\nfolium.PolyLine(b['space'],color=\"red\", weight=2, opacity=0.5).add_to(g2)\nfolium.PolyLine(c['space'],color=\"green\", weight=2, opacity=0.5).add_to(g3)\nfolium.PolyLine(d['space'],color=\"purple\", weight=2, opacity=0.5).add_to(g4)\nfolium.PolyLine(e['space'],color=\"magenta\", weight=2, opacity=0.5).add_to(g5)\nfolium.PolyLine(f['space'],color=\"yellow\", weight=2, opacity=0.5).add_to(g6)\nfolium.PolyLine(g['space'],color=\"blue\", weight=2, opacity=0.5).add_to(g7)\nfolium.PolyLine(h['space'],color=\"orange\", weight=2, opacity=0.5).add_to(g8)\nfolium.PolyLine(i['space'],color=\"black\", weight=2, opacity=0.5).add_to(g9)\n\nm","a35016f4":"# Map of locations with dots","c024e93d":"# Dataset","36c0d1d7":"# Cuting 'space' in two with 'lat' and 'long'","837697cf":"# Map of locations with dots and lines","3c3d145f":"# Every trajectories sorts by points","050c2f43":"# Libraries"}}