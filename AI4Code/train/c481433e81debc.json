{"cell_type":{"968b0016":"code","1e0a6351":"code","436dfb91":"code","8864e64d":"code","fcfa374a":"code","f15910d0":"code","b18365aa":"code","c1b65f0b":"code","4e8af435":"code","86f02339":"code","2fe41e9a":"code","1aece92a":"code","2f21f4a7":"code","fa4d4eea":"code","1ac5f862":"code","29fac9ff":"code","c138dc39":"code","bc16aa4e":"code","fd09a7b5":"code","4adc626c":"code","e8972f4f":"code","996887f0":"code","7511403b":"code","c0cd881f":"code","0d99b0c1":"code","61817bd4":"code","64a8ba51":"code","87f0394b":"markdown","d221af2d":"markdown","9561e408":"markdown","43f930b9":"markdown","d31b6518":"markdown","c1fa66bf":"markdown","11575df9":"markdown","23e6c183":"markdown","cfaaae0a":"markdown","bd72ce7d":"markdown"},"source":{"968b0016":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","1e0a6351":"df = pd.read_csv(\"..\/input\/gender-classifier-DFE-791531.csv\",encoding=\"latin1\")","436dfb91":"df.head()     # There might be some very useful columns but I will only work on text. So I am going to create simpler dataset","8864e64d":"work_data = pd.DataFrame()\nwork_data[\"tweet\"] = df.description\nwork_data[\"gender\"] = df.gender","fcfa374a":"work_data.head()            # this is one is much easy to read and work with.","f15910d0":"get_female = work_data[\"gender\"] == \"female\"\nget_male = work_data[\"gender\"] == \"male\"\nget_brand = work_data[\"gender\"] == \"brand\"","b18365aa":"female_rows = work_data[get_female]\nmale_rows = work_data[get_male]\nbrand_rows = work_data[get_brand]","c1b65f0b":"print(\"total female tweets: \",female_rows.tweet.count())\nprint(\"total male tweets:   \",male_rows.tweet.count())\nprint(\"total brand tweets:  \",brand_rows.tweet.count())           # they are evenly distributed. Which is good","4e8af435":"female_rows.gender = 0     # female\nmale_rows.gender = 1       # male\nbrand_rows.gender = 2      # brand","86f02339":"frames = [female_rows, male_rows, brand_rows]\ndata = pd.concat(frames,ignore_index=True)","2fe41e9a":"data.tail()","1aece92a":"data.info()   # I dont want the null values to became most used words in my bag of words. I will drop them.","2f21f4a7":"data.dropna(inplace=True)","fa4d4eea":"data.info()   # now we have much more clean and useful dataset","1ac5f862":"import re\nimport nltk as nlp","29fac9ff":"from nltk.corpus import stopwords\nlemma = nlp.WordNetLemmatizer()  ","c138dc39":"tweets_list = []            # empty list\nfor each in data.tweet:\n    each = re.sub(\"[^a-zA-Z]\",\" \", str(each))                                        # regex to clean unnecesarry chars\n    each = each.lower()                                                              # lowercase all\n    each = nlp.word_tokenize(each)                                                   # split all by tokenizing\n    each = [word for word in each if not word in set(stopwords.words(\"english\"))]    # delete stop words from your array\n    each = [lemma.lemmatize(word) for word in each]                                  # lemmatize \"memories\" -> \"memory\"\n    each = \" \".join(each)                                                            # make them one string again\n    tweets_list.append(each)                                                         # put them into big array","bc16aa4e":"print(\"Original version: \", data.tweet.iloc[2174])\nprint(\"New version:      \", tweets_list[2174])    # no unnecesary words or symbols","fd09a7b5":"from sklearn.feature_extraction.text import CountVectorizer\n\nmax_features = 600\n\ncount_vectorizer = CountVectorizer(max_features=max_features,stop_words = \"english\")\n\nsparce_matrix = count_vectorizer.fit_transform(tweets_list).toarray()\nwords = count_vectorizer.get_feature_names()","4adc626c":"print(\"Most used 600 words on all tweets (alphabetically first 100) :\", words[:100])","e8972f4f":"y = data.gender.values\nx = sparce_matrix","996887f0":"from sklearn.model_selection import train_test_split \n\ntrain_x, test_x, train_y, test_y = train_test_split(x,y,test_size=0.2)","7511403b":"from sklearn.ensemble import RandomForestClassifier\n\nrfc = RandomForestClassifier(n_estimators = 100)\n\nrfc.fit(train_x,train_y)","c0cd881f":"rfc.score(test_x,test_y)","0d99b0c1":"y_head_ml = rfc.predict(test_x)","61817bd4":"from sklearn.metrics import confusion_matrix\n\ncm = confusion_matrix(test_y,y_head_ml)","64a8ba51":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.heatmap(cm,cbar=False,annot=True,cmap=\"Blues\",fmt=\"d\")\nplt.show()","87f0394b":"### Concating the brand and person rows","d221af2d":"### Data PreProcessing","9561e408":"### Labelling","43f930b9":"## Bag of Words","d31b6518":"## Train & Test Split","c1fa66bf":"## Machine Learning Model","11575df9":"## ** Conclusion **\n\n### Brand is easy to seperate but genders are relatively more complex","23e6c183":"### EDA","cfaaae0a":"## Natural Language Processing","bd72ce7d":"## Hello, in this Notebook I will work on Natural Language Processing.\n## I will try classify Male Tweets from Female Tweets"}}