{"cell_type":{"85dbd946":"code","8ec513da":"code","3b810219":"code","bd646daf":"code","1e767fb6":"code","8cb44f90":"code","7a87dc82":"code","252675c1":"code","372905e7":"code","232e909d":"code","4c0e918c":"code","a8268116":"code","753c9760":"code","736ef8c3":"code","428da566":"code","0f905295":"code","d332bbc0":"code","275375eb":"code","e30221ab":"code","50162c41":"markdown","939b25de":"markdown","2429248f":"markdown","e2a12660":"markdown","ab0b351d":"markdown","15db60e9":"markdown","2fd01abb":"markdown","bb1d62e2":"markdown","153b7b46":"markdown","08f2bc92":"markdown","0c0674f6":"markdown","8748607d":"markdown","6d289436":"markdown","b9328e8f":"markdown","6251f184":"markdown","24961aaa":"markdown","8b236f9f":"markdown","ed0cf9fa":"markdown","908d80fe":"markdown","70508fb9":"markdown","fada6d61":"markdown","ba35ed35":"markdown","56c962a6":"markdown"},"source":{"85dbd946":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.svm import LinearSVC\nfrom sklearn import linear_model\nfrom sklearn.metrics import r2_score\nfrom sklearn.model_selection import TimeSeriesSplit\nimport seaborn as sns\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import Ridge\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.preprocessing import MinMaxScaler\nfrom pandas.plotting import scatter_matrix\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import mean_squared_error\nimport math\n","8ec513da":"test = pd.read_csv(\"..\/input\/cap-4611-2021-fall-assignment-1\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/cap-4611-2021-fall-assignment-1\/train.csv\")\n","3b810219":"train = train[train['Group']=='By Week']\ncolumns_drop_train = [\"id\",\"Data As Of\",\"End Date\",\"Group\",\"Year\",\"Month\",\"Week-Ending Date\",\"HHS Region\",\"Footnote\",\"Total Deaths\"]\ncolumns_drop_test =[\"id\",\"Data As Of\",\"End Date\",\"Group\",\"Year\",\"Month\",\"Week-Ending Date\",\"HHS Region\",\"Total Deaths\"]\nsaved_id = test['id']\ntrain = train.drop(columns_drop_train,axis=1)\ntest = test.drop(columns_drop_test,axis=1)","bd646daf":"train = train[train['COVID-19 Deaths'].notnull()]\ntrain = train[train['MMWR Week'].notnull()]\ntest = test[test['MMWR Week'].notnull()]","1e767fb6":"def ageStringToNum(ageString):\n    numArray = ageString.split()\n    ageString=numArray[0]\n    if ageString==\"85\":\n        return 85\n    else:\n        ageRange=ageString.split(\"-\")\n        avgAge= (int(ageRange[0])+int(ageRange[1]))\/2\n        return avgAge\n    \ntrain[\"Age Group\"] = train[\"Age Group\"].apply(ageStringToNum)\ntest[\"Age Group\"] = test[\"Age Group\"].apply(ageStringToNum)\ntest","8cb44f90":"train = pd.get_dummies(train, columns = ['Race and Hispanic Origin Group'])\ntest = pd.get_dummies(test, columns = ['Race and Hispanic Origin Group'])\n","7a87dc82":"def dayStringToNum(dayString):\n    numArray = dayString.split(\"\/\")\n    return int(numArray[1])+((int(numArray[0])-1)*30)+(int(numArray[2])-2019)*365\n\n               \ntrain[\"DateNum\"]= train[\"Start Date\"].apply(dayStringToNum)\ntest[\"DateNum\"]= test[\"Start Date\"].apply(dayStringToNum)\ndef getMonth(dayString):\n    numArray = dayString.split(\"\/\")\n    return int(numArray[0])\ntrain[\"Month\"] = train[\"Start Date\"].apply(getMonth)\ntest[\"Month\"] = test[\"Start Date\"].apply(getMonth)\n","252675c1":"train=train[train['DateNum']>470]\ncorr_matrix=train.corr()\nprint(corr_matrix[\"COVID-19 Deaths\"].sort_values(ascending=False))\ntrain","372905e7":"#train['Start Date']= pd.to_datetime(train['Start Date'])\ntrain.drop('Start Date',inplace=True,axis=1)\ntest.drop('Start Date',inplace=True,axis=1)","232e909d":"sns.scatterplot(x=train[\"Month\"],y = train[\"COVID-19 Deaths\"])\nplt.show()","4c0e918c":"sns.scatterplot(x=train[\"Age Group\"],y = train[\"COVID-19 Deaths\"])\nplt.show()","a8268116":"def isAtRisk(age):\n    if(age>50):\n        return 1\n    if(age>60):\n        return 2\n    if(age>70):\n        return 3\n    else:\n        return 0\ntrain[\"Risk Age\"]= train[\"Age Group\"].apply(isAtRisk)\ntest[\"Risk Age\"]= test[\"Age Group\"].apply(isAtRisk)\ntest=test.drop(\"Age Group\",axis=1)\ntrain= train.drop(\"Age Group\",axis=1)\n\ntest","753c9760":"X = train.drop('COVID-19 Deaths',axis=1)\ny = train['COVID-19 Deaths']\ntscv = TimeSeriesSplit(20)\n","736ef8c3":"def rmse(predictions,y):\n    mse= mean_squared_error(y,predictions)\n    return math.sqrt(mse)\n        \n    \n    ","428da566":"ordLSquares= linear_model.LinearRegression()\nordL_results=[]\n\nfor train_index, test_index in tscv.split(X):\n    X_train, X_test = X.iloc[train_index],X.iloc[test_index]\n    y_train, y_test = y.iloc[train_index],y.iloc[test_index]\n    ordLSquares.fit(X_train,y_train)\n    prediction = ordLSquares.predict(X_test)\n    ordL_results.append(rmse(prediction,y_test))\nsns.histplot(ordL_results,bins=10)\nplt.show()\nordL_df=pd.Series(ordL_results)\nprint(ordL_df.describe())\n","0f905295":"lasso= linear_model.Lasso(alpha=0.2)\nlasso_results=[]\nfor train_index, test_index in tscv.split(X):\n    X_train, X_test = X.iloc[train_index],X.iloc[test_index]\n    y_train, y_test = y.iloc[train_index],y.iloc[test_index]\n    lasso.fit(X_train,y_train)\n    prediction = lasso.predict(X_test)\n    lasso_results.append(rmse(prediction,y_test))\nsns.histplot(lasso_results,bins=10)\nplt.show()\nlasso_df=pd.Series(lasso_results)\nprint(lasso_df.describe())","d332bbc0":"ridge=Ridge()\nridge_results=[]\nfor train_index, test_index in tscv.split(X):\n    X_train, X_test = X.iloc[train_index],X.iloc[test_index]\n    y_train, y_test = y.iloc[train_index],y.iloc[test_index]\n    ridge.fit(X_train,y_train)\n    prediction = ridge.predict(X_test)\n    ridge_results.append(rmse(prediction,y_test))\nsns.histplot(ridge_results,bins=10)\nplt.show()\nridge_df=pd.Series(ridge_results)\nprint(ridge_df.describe())","275375eb":"elastic_net= ElasticNet(alpha=1.0, l1_ratio=0.5)\nelastic_results=[]\nfor train_index, test_index in tscv.split(X):\n    X_train, X_test = X.iloc[train_index],X.iloc[test_index]\n    y_train, y_test = y.iloc[train_index],y.iloc[test_index]\n    elastic_net.fit(X_train,y_train)\n    prediction = elastic_net.predict(X_test)\n    elastic_results.append(rmse(prediction,y_test))\nsns.histplot(elastic_results,bins=10)\nelastic_df=pd.Series(elastic_results)\nprint(elastic_df.describe())","e30221ab":"def negtozero(num):\n    if num>0:\n        return num\n    else :\n        return 0\n\nlasso.fit(X,y)\nfinal= lasso.predict(test)\nprediction_df=pd.DataFrame()\nprediction_df['id']=saved_id\nprediction_df['COVID-19 Deaths']=final\nprediction_df[\"COVID-19 Deaths\"]= prediction_df[\"COVID-19 Deaths\"].apply(negtozero)\nprediction_df.to_csv(\"submission.csv\",index=False)\nprint(prediction_df.to_string())","50162c41":"## Get Dummies for Demographics\nSo in order to make the demographic info into numerical data we use the get_dummies method to split the options into different columns.\n","939b25de":"### Import Useful Libraries\nHere we import useful libraries to use in our project","2429248f":"# Import Data\nHere We import our test and train datasets.","e2a12660":"## OUTLIER Drop Grouping By Month and year\nThere are groups of month and year which do not represent the vast majority dataset and would mess up our data if we didnt drop them.\n","ab0b351d":"## SUBMISSION\nSince my lasso model seems to be the best, lets turn that one in","15db60e9":"# MODELS","2fd01abb":"### Drop Old Date\nAfter this point we don't need the converted Start Date column since we arent plotting with dates. We drop them since the model can't interpret objects","bb1d62e2":"## Start of Pandemic Drops \nI don't know if these are considered outliers, but there is a period in the beginning of the dataset where there are close to 0 deaths.In our Test dataset, the data starts at around 450 in dateNum time. In order to get a better model we drop those. So using our datenum number(days+(month+year(in days)) we say if datenum is below 470 we drop","153b7b46":"## Ordinary Least Squares Model Training and Eval\nHere we train the Ordinary Least Squares Model","08f2bc92":"# Exploratory Plotting","0c0674f6":"# Turning Data into Numbers\n","8748607d":"## Plot Months and Deaths","6d289436":"## Missing Values\nThere are a Missing values for COVID-19 Deaths and MMWR Week. In order to fix this we drop the entire row .","b9328e8f":"# Feature Engineering\n## Age Risk\nInstead of storing everyone age we can store age risk which generalizes more. ","6251f184":"## RMSE Function\nTakes an array of predictions and returns an array of the RMSE for each one","24961aaa":"### Elastic Net Regression","8b236f9f":"### Ridge Regression Model\nHere we train our Ridge Regresion Model\n","ed0cf9fa":"# Cleaning The Data\nNow that we know that there are some discrepancies with the data, we must clean it to get the best results. There are excess columns that are not needed(primarily because they do not change as the data changes), lets drop those. We also drop covid deaths and MMWR weeks that are null. Finally we save the test dataset id column for our submission at the end","908d80fe":"### Lasso Model","70508fb9":"# Preparing data for models\nX is our training set without our target column and y is our Target Column\n","fada6d61":"## Plot age Group","ba35ed35":"## Turning Age into a Number\nSo in order to process age we turn it into a number using a function, this might help for some features down the line.","56c962a6":"## Turning Date into a number\nHere we use a function to convert a date string into a number. We simply add the day value for each unit of time(day,month,year). Not perfect but should work"}}