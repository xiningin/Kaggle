{"cell_type":{"6d9176f4":"code","f446f5ba":"code","9ff7f4c2":"code","5719ba7a":"code","041e8f0a":"code","ed73c73f":"code","7650ae0d":"code","eefcfcc6":"code","a8f09bb0":"code","4cd61f3c":"code","f914584b":"code","a21db8d2":"code","77e8a7f9":"code","cdd0be1b":"code","e0ddcc44":"code","ad1ca71a":"code","ab8ca59b":"code","d6951b13":"code","432d1774":"code","a6412021":"code","7143acf4":"code","36c24e48":"code","5c0b8b49":"code","32331aa9":"markdown","b1e267b5":"markdown","41725dea":"markdown","3c279643":"markdown","d01ba111":"markdown","efacc540":"markdown","0b993da5":"markdown","ef42a5db":"markdown","357f90df":"markdown","69c9d234":"markdown","5fdea900":"markdown","df02471c":"markdown","6f98b342":"markdown"},"source":{"6d9176f4":"#getting started...","f446f5ba":"\nfrom sklearn.datasets import load_iris\niris=load_iris()","9ff7f4c2":"x=iris.data\n\nx","5719ba7a":"y=iris.target\ny","041e8f0a":"feature_names = iris.feature_names\n","ed73c73f":"feature_names","7650ae0d":"target_names = iris.target_names","eefcfcc6":"target_names","a8f09bb0":"from sklearn.model_selection import train_test_split","4cd61f3c":"X_train,X_test,Y_train,Y_test =train_test_split(x,y,test_size=0.4)","f914584b":"print(X_train.shape)\nprint(X_test.shape)","a21db8d2":"from sklearn.neighbors import KNeighborsClassifier\nknn =KNeighborsClassifier(n_neighbors=3)","77e8a7f9":"knn.fit(X_train,Y_train)","cdd0be1b":"y_pred= knn.predict(X_test)","e0ddcc44":"from sklearn import metrics\nprint(metrics.accuracy_score(Y_test,y_pred))","ad1ca71a":"#import required packages\nfrom sklearn import neighbors\nfrom sklearn.metrics import mean_squared_error \nfrom math import sqrt\nimport matplotlib.pyplot as plt\n%matplotlib inline","ab8ca59b":"rmse_val = [] #to store rmse values for different k\nfor K in range(20):\n    K = K+1\n    model = neighbors.KNeighborsRegressor(n_neighbors = K)\n\n    model.fit(X_train, Y_train)  #fit the model\n    \n    pred=model.predict(X_test) #make prediction on test set\n    \n    error = sqrt(mean_squared_error(Y_test,pred)) #calculate rmse\n   \n    rmse_val.append(error) #store rmse values\n   \n    print('RMSE value for k= ' , K , 'is:', error)","d6951b13":"#plotting the rmse vals\n","432d1774":"import pandas as pd\ncurve=pd.DataFrame(rmse_val)#elbow curve\ncurve.plot()","a6412021":"knn =KNeighborsClassifier(n_neighbors=8)","7143acf4":"knn.fit(X_train,Y_train)\ny_pred= knn.predict(X_test)\n\nfrom sklearn import metrics\nprint(metrics.accuracy_score(Y_test,y_pred))","36c24e48":"#see,our score has improved well.....","5c0b8b49":"#thats it tada....","32331aa9":"# Creating the model","b1e267b5":"5.Check the output\n   ","41725dea":" 3.Split data(Training Set\/Test Set)\n    ","3c279643":"n_neighbors :it will tell me how many dtat points around me do i need to observe to decide which type of flower i am ?","d01ba111":"4.Create a Model\n   ","efacc540":"6.Improve","0b993da5":" 1.Import the data\n   ","ef42a5db":"> > # IRIS <>","357f90df":"Trying out sklearn inbuilt dataset..","69c9d234":"it splits my array into test and train datasets","5fdea900":" 2.Clean the data\n   ","df02471c":"Steps for me to remember:\n   ","6f98b342":"lets improve score"}}