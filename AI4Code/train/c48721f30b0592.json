{"cell_type":{"c7cac384":"code","d660a5ed":"code","f7095b49":"code","1447b98a":"code","3d6eec50":"code","5eec8c43":"code","7ba35cdf":"code","c4250cd0":"code","0ed5e870":"code","13da7c71":"code","794a2188":"code","da6ad6c5":"code","ba8739a7":"code","3f0dfc4c":"code","71f19e96":"code","30ce4301":"code","fe26f4d2":"code","99cacbdd":"code","c92e21ff":"markdown"},"source":{"c7cac384":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.io.wavfile import read, write\nfrom IPython.display import Audio\nfrom numpy.fft import fft, ifft\nfrom scipy.fftpack import fftfreq","d660a5ed":"# Read song and cough files\nfs1, song = read(\"\/kaggle\/input\/tlprojectx\/song.wav\")\nfs2, cough1 = read(\"\/kaggle\/input\/tlproject\/Cough1-1.wav\")\nfs3, cough2 = read(\"\/kaggle\/input\/tlproject\/Cough2.wav\")","f7095b49":"# Select one channel for analysis\nsong = song[:,0]\ncough1 = cough1[:,0]\ncough2 = cough2[:,0]\nsong = song * 1","1447b98a":"Audio(data = song, rate = fs1)","3d6eec50":"Audio(data = cough1, rate = fs1)","5eec8c43":"plt.plot(song)","7ba35cdf":"plt.plot(cough1)","c4250cd0":"t1 = 10\nsample_to_insert_to_1 = t1 * fs1\nsample_to_insert_to_2 = sample_to_insert_to_1 + len(cough1)\nsong[sample_to_insert_to_1 : sample_to_insert_to_2] = song[sample_to_insert_to_1 : sample_to_insert_to_2] + cough1[:]","0ed5e870":"t1 = 50\nsample_to_insert_to_1 = t1 * fs1\nsample_to_insert_to_2 = sample_to_insert_to_1 + len(cough2)\nsong[sample_to_insert_to_1 : sample_to_insert_to_2] = song[sample_to_insert_to_1 : sample_to_insert_to_2] + cough2[:]","13da7c71":"# Audio of song containing two coughs at 10s and 50, 51 s\nAudio(data = song, rate = fs1)","794a2188":"# Finding index of samples where amplitude is higher than 18000 indiacting impulse signal created by cough\nout1 = np.argwhere(song > 18000)\nout_time = np.unique(out1 \/\/ fs1)","da6ad6c5":"# Print cough detected times\nprint('Cough detected at', out_time[:], 's')","ba8739a7":"# Extract cough detected audio\nout_audio = []\nfor x in out_time:\n    out_audio.append(song[x*fs1:(x+2)*fs1])","3f0dfc4c":"Audio(data = out_audio[0], rate = fs1)","71f19e96":"Audio(data = out_audio[1], rate = fs1)","30ce4301":"song[sample_to_insert_to_1 : sample_to_insert_to_2] = cough2[:]","fe26f4d2":"data = song[sample_to_insert_to_1 : sample_to_insert_to_2]\nsamples = len(data)\nsamplerate = fs1\n\n\ndatafft = fft(data)\n#Get the absolute value of real and complex component:\nfftabs = abs(datafft)\nfreqs = fftfreq(samples,1\/samplerate)\nplt.xlim( [10, samplerate\/2] )\nplt.xscale( 'log' )\nplt.grid( True )\nplt.xlabel( 'Frequency (Hz)' )\nplt.ylabel( 'Amplitude' )\nplt.title( 'Spectrum where cough is present in song')\nplt.plot(freqs[:int(freqs.size\/2)],fftabs[:int(freqs.size\/2)])","99cacbdd":"data = cough2\nsamples = len(cough2)\nsamplerate = fs3\n\n\ndatafft = fft(data)\n#Get the absolute value of real and complex component:\nfftabs = abs(datafft)\nfreqs = fftfreq(samples,1\/samplerate)\nplt.xlim( [10, samplerate\/2] )\nplt.xscale( 'log' )\nplt.ylabel( 'Amplitude' )\nplt.grid( True )\nplt.title( 'Spectrum of cough')\nplt.xlabel( 'Frequency (Hz)' )\nplt.plot(freqs[:int(freqs.size\/2)],fftabs[:int(freqs.size\/2)])","c92e21ff":"Detected cough samples"}}