{"cell_type":{"821a4dff":"code","dddae3f3":"code","6f15d67e":"code","a766d4bb":"code","1c324411":"code","a8e7032f":"code","6a60ae55":"code","129a1e9d":"code","7e822b8c":"code","13dfab6d":"code","08482ff5":"code","dbb5b2b1":"code","bf806c98":"code","25256128":"code","d4077817":"code","98bf7b05":"code","9a15e94d":"code","498c1e6f":"code","0c7afe04":"code","6a68fe67":"code","640f0151":"code","cc337289":"code","1e092750":"code","a8ff3a70":"code","4e1ee4be":"code","73d2c709":"code","19c15c4c":"code","ac6564d3":"code","698d26fe":"code","126bb348":"code","ff468033":"code","aa52e126":"code","c7c4725c":"code","667bbd2a":"code","3d6a3b9d":"code","8484136a":"code","1192b7a1":"code","f843ad5d":"code","5623262f":"code","8eaafb55":"code","aa8f8cee":"code","572909e4":"code","eb32bc68":"code","2d6d2fe0":"code","2b2408ce":"code","f55a26ca":"code","5fa7b00a":"code","228e0827":"code","65dfdfe2":"code","3a3779b6":"code","c33b1b8f":"code","c3c5b8b9":"code","689d67e1":"code","17cd6f18":"code","9f5e680c":"code","fcfe5e04":"code","bba7a71b":"code","900e0242":"code","fa2a7f6f":"code","cc31ac36":"markdown","ae09b7f0":"markdown","87579697":"markdown","8289f971":"markdown","aa752a37":"markdown","2e0e8e3b":"markdown","5a172f26":"markdown","896c7392":"markdown","aa079360":"markdown","7143a2f7":"markdown","9658d538":"markdown","0a2d51ac":"markdown","e1682e62":"markdown","f7909fe1":"markdown","e38c477b":"markdown","ac2a4b68":"markdown","7d71d68d":"markdown","0de4d9f3":"markdown","29b7d0eb":"markdown","8fcfd936":"markdown","495edb21":"markdown","64ab4211":"markdown","4a07b8ef":"markdown","4adf2876":"markdown","a922c480":"markdown"},"source":{"821a4dff":"#Import libraries\nimport numpy as np\nimport pandas as pd\nimport sqlite3\nfrom datetime import timedelta\nimport datetime as dt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport matplotlib.cm\n\nfrom mpl_toolkits.basemap import Basemap\nfrom matplotlib.patches import Polygon\nfrom matplotlib.collections import PatchCollection\nfrom matplotlib.colors import Normalize\nimport mpl_toolkits\n#import folium\n#import folium.plugins\nfrom matplotlib import animation,rc\nimport io\nimport base64\nimport itertools\nfrom subprocess import check_output\nimport missingno as msno\nsns.set()","dddae3f3":"import os\nprint(os.listdir(\"..\/input\"))\nprint(os.listdir(\"..\/input\/soccer\"))\n\nprint(os.listdir(\"..\/input\/teams-image\"))\n\npathimage=\"..\/input\/teams-image\/english-premier-league-club-logos-english-premier-league-team-badges-20112012-season-soccer-news-ideas.jpg\"\npathimage","6f15d67e":"with sqlite3.connect('..\/input\/soccer\/database.sqlite') as con:\n    countries = pd.read_sql_query(\"SELECT * from Country\", con)\n    matches = pd.read_sql_query(\"SELECT * from Match\", con)\n    leagues = pd.read_sql_query(\"SELECT * from League\", con)\n    teams = pd.read_sql_query(\"SELECT * from Team\", con)\n    player = pd.read_sql_query(\"SELECT * from Player\",con)\n    player_attributes = pd.read_sql_query(\"SELECT * from Player_Attributes\",con)\n    sequence = pd.read_sql_query(\"SELECT * from sqlite_sequence\",con)\n    team_attributes = pd.read_sql_query(\"SELECT * from Team_Attributes\",con)\n","a766d4bb":"print (countries)\ncountries.info()","1c324411":"print (leagues)\nleagues.info()","a8e7032f":"matches.head()","6a60ae55":"matches.info()\n","129a1e9d":"matches.describe().T","7e822b8c":"msno.matrix(matches);","13dfab6d":"teams.head()\n# teams.describe()\n# teams.info()","08482ff5":"teams.info()","dbb5b2b1":"teams.describe()","bf806c98":"player.head()","25256128":"player.info()","d4077817":"player_attributes.head()","98bf7b05":"player_attributes.info()","9a15e94d":"sequence\n","498c1e6f":"team_attributes.head()","0c7afe04":"#Merge country and leauge data\ncountries_leagues = countries.merge(leagues,left_on=\"id\",right_on=\"id\",how=\"outer\")\ncountries_leagues = countries_leagues.drop(\"id\",axis = 1)\ncountries_leagues = countries_leagues.rename(columns={'name_x':\"country\", 'name_y':\"league\"})","6a68fe67":"matches.head()","640f0151":"matches_new = matches[[ 'country_id', 'league_id', 'season', 'stage', 'date',\n                   'match_api_id', 'home_team_api_id', 'away_team_api_id',\n                    'home_team_goal', 'away_team_goal']]\n\n#matches_new = matches_new.drop(\"id\",axis=1)","cc337289":"msno.matrix(matches_new);","1e092750":"matches_new.head()","a8ff3a70":"#merge leauge data with match data\ndata = matches_new.merge(countries_leagues,left_on=\"country_id\",right_on=\"country_id\",how=\"outer\")\n#chech null values\nprint (data.isnull().sum())\ndata.head()","4e1ee4be":"#Unique values in data\ndata.nunique()","73d2c709":"# you have to load or enter your API Key from google map \n# with open(\"..\/input\/my-key\/APIKEY.txt\") as f:\n#     api_key = f.readline()\n#     f.close\n\n","19c15c4c":"# !pip install gmaps\n\n\n\n# import gmaps\n# gmaps.configure(api_key=api_key)","ac6564d3":"countries","698d26fe":"from mpl_toolkits.basemap import Basemap\nimport matplotlib.pyplot as plt","126bb348":"# !jupyter nbextension enable --py gmaps","ff468033":"# europea_coordinates=(50.5, 4.4)\n# gmaps.figure(center=europea_coordinates, zoom_level=11)\n\n# locations = [[50.5, 4.469936],[52.355518, -1.174320],[46.227638, 2.213749],[51.165691, 10.451526],[41.871941, 12.567380],\n#              [52.132633, 5.291266],[51.919437, 19.145136],[39.399872, -8.224454],[56.490669, -4.202646],[40.463669, -3.749220],\n#              [46.818188, 8.227512]]\n             \n# fig = gmaps.figure()\n# marker_locations = locations\n\n# fig = gmaps.figure()\n# markers = gmaps.marker_layer(marker_locations)\n# fig.add_layer(markers)\n\n# fig.add_layer(gmaps.heatmap_layer(locations))\n# fig\n\n","aa52e126":"data['league'].value_counts()\ndata['league'].value_counts().plot.barh(figsize=(8,6),title='Match by league');\nplt.gca().invert_yaxis()","c7c4725c":"plt.figure(figsize=(8,8))\nax = sns.countplot(y = data[\"league\"],\n                   order=data[\"league\"].value_counts().index,\n                   linewidth = 1,\n                   edgecolor = \"k\"*data[\"league\"].nunique()\n                 )\nfor i,j in enumerate(data[\"league\"].value_counts().values):\n    ax.text(.7,i,j,weight = \"bold\")\nplt.title(\"Matches by league\")\nplt.show()","667bbd2a":"data.groupby(\"league\").agg({\"home_team_goal\":\"sum\",\"away_team_goal\":\"sum\"}).plot(kind=\"barh\",\n                                                                                 figsize = (10,8),\n                                                                                 edgecolor = \"k\",\n                                                                                 linewidth =1\n                                                                                )\nplt.title(\"Home and away goals by league\")\nplt.legend(loc = \"best\" , prop = {\"size\" : 14})\nplt.xlabel(\"total goals\")\nplt.show()","3d6a3b9d":"plt.figure(figsize=(12,12))\nsns.countplot(y = data[\"season\"],hue=data[\"league\"],\n              palette=[\"r\",\"g\",\"b\",\"c\",\"lime\",\"m\",\"y\",\"k\",\"gold\",\"orange\"])\nplt.title(\"MATCHES PLAYED IN EACH LEAGUE BY SEASON\")\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\nplt.show()","8484136a":"#Merge team data\ndata = data.merge(teams,left_on=\"home_team_api_id\",right_on=\"team_api_id\",how=\"left\")\ndata = data.drop([\"id\",\"team_api_id\",'team_fifa_api_id'],axis = 1)\ndata = data.rename(columns={ 'team_long_name':\"home_team_lname\",'team_short_name':\"home_team_sname\"})\ndata.columns\n","1192b7a1":"data = data.merge(teams,left_on=\"away_team_api_id\",right_on=\"team_api_id\",how=\"left\")\ndata = data.drop([\"id\",\"team_api_id\",'team_fifa_api_id'],axis = 1)\ndata = data.rename(columns={ 'team_long_name':\"away_team_lname\",'team_short_name':\"away_team_sname\"})\ndata.columns","f843ad5d":"h_t = data.groupby(\"home_team_lname\")[\"home_team_goal\"].sum().reset_index()\na_t = data.groupby(\"away_team_lname\")[\"away_team_goal\"].sum().reset_index()\nh_t = h_t.sort_values(by=\"home_team_goal\",ascending= False)\na_t = a_t.sort_values(by=\"away_team_goal\",ascending= False)\nplt.figure(figsize=(13,10))\nplt.subplot(121)\nax = sns.barplot(y=\"home_team_lname\",x=\"home_team_goal\",\n                 data=h_t[:20],palette=\"summer\",\n                 linewidth = 1,edgecolor = \"k\"*20)\nplt.ylabel('')\nplt.title(\"top teams by home goals\")\nfor i,j in enumerate(h_t[\"home_team_goal\"][:20]):\n    ax.text(.7,i,j,weight = \"bold\")\nplt.subplot(122)\nax = sns.barplot(y=\"away_team_lname\",x=\"away_team_goal\",\n                 data=a_t[:20],palette=\"winter\",\n                linewidth = 1,edgecolor = \"k\"*20)\nplt.ylabel(\"\")\nplt.subplots_adjust(wspace = .4)\nplt.title(\"top teams by away goals\")\nfor i,j in enumerate(a_t[\"away_team_goal\"][:20]):\n    ax.text(.7,i,j,weight = \"bold\")","5623262f":"data","8eaafb55":"data.groupby('league')['home_team_lname'].nunique()\n","aa8f8cee":"data.groupby('league')['home_team_lname'].nunique().plot.bar();\n","572909e4":"primerleague=data[data['league']=='England Premier League']\nprimerleague.groupby(['season'])['home_team_lname'].nunique().plot.bar()","eb32bc68":"a=data['home_team_goal']-data['away_team_goal']\ndata['a']=a\ndata.head()\ndata['win']='tie'\ndata['win']=np.where(data['a']>0,'home','away')\n# df['color'] = np.where(df['Set']=='Z', 'green', 'red')\ndata[['win','a']]\n\ncond=[data['a']==0,data['a']>0,data['a']<0]\nchoice=['Tie','Home','Away']\ndata['win'] = np.select(cond, choice)\n\n\ndata[['win','a']].head()","2d6d2fe0":"data.drop(['a'],axis=1,inplace=True)\ndata","2b2408ce":"fig, axs = plt.subplots(1, 2)\nPleag=data[data['league']=='England Premier League']\nHW=Pleag[Pleag['win']=='Home']\nAW=Pleag[Pleag['win']=='Away']\nHW.groupby(['home_team_lname'])['stage'].count().sort_values(ascending=False).head(10).plot.bar(figsize=(16,8),ax=axs[0])\nAW.groupby(['away_team_lname'])['stage'].count().sort_values(ascending=False).head(10).plot.bar(figsize=(16,8),ax=axs[1],color='red')","f55a26ca":"fig, axs = plt.subplots(1, 2)\nPleag=data[data['league']=='Spain LIGA BBVA']\nHW=Pleag[Pleag['win']=='Home']\nAW=Pleag[Pleag['win']=='Away']\n\n# print (HW.groupby(['home_team_lname'])['stage'].count().sort_values(ascending=False))\n# print (AW.groupby(['away_team_lname'])['stage'].count().sort_values(ascending=False))\n\nHW.groupby(['home_team_lname'])['stage'].count().sort_values(ascending=False).head(10).plot.bar(figsize=(16,8),ax=axs[0])\nAW.groupby(['away_team_lname'])['stage'].count().sort_values(ascending=False).head(10).plot.bar(figsize=(16,8),ax=axs[1],color='red')","5fa7b00a":"fig, axs = plt.subplots(1, 2)\nPleag=data\nHW=Pleag[Pleag['win']=='Home']\nAW=Pleag[Pleag['win']=='Away']\n\n# print (HW.groupby(['home_team_lname'])['stage'].count().sort_values(ascending=False))\n# print (AW.groupby(['away_team_lname'])['stage'].count().sort_values(ascending=False))\n\nHW.groupby(['home_team_lname'])['stage'].count().sort_values(ascending=False).head(10).plot.bar(figsize=(16,8),ax=axs[0])\nAW.groupby(['away_team_lname'])['stage'].count().sort_values(ascending=False).head(10).plot.bar(figsize=(16,8),ax=axs[1],color='red')\nlist=AW.groupby(['away_team_lname'])['stage'].count().sort_values(ascending=False).head(10)\nlist2=HW.groupby(['home_team_lname'])['stage'].count().sort_values(ascending=False).head(10)\nlist2.index\nlist.index\nlist=(set([i for i in list.index]+[i for i in list2.index]))\nlen(list)\ntype(list)","228e0827":"top=data[data['home_team_lname'].isin(list)]\ntop.groupby('home_team_lname')['stage'].count().sort_values(ascending=False).plot.bar();","65dfdfe2":"pd.DataFrame(top.groupby('home_team_lname')['stage'].count().sort_values(ascending=False))","3a3779b6":"fig, ax = plt.subplots(figsize=(10,20))\nmap = Basemap(projection='ortho', \n              lat_0=0, lon_0=0)\n\nmap.drawmapboundary(fill_color='aqua')\nmap.fillcontinents(color='coral',lake_color='aqua')\nmap.drawcoastlines()\n#x, y = m(-0.126240,51.500150 )\n#plt.plot(x, y, 'bo', markersize=100)\n\nx, y = map(-0.126240,51.500150 )\n\nmap.plot(x, y, marker='D',color='w',markersize=10)\n\nplt.show()\nx","c33b1b8f":"primerleague","c3c5b8b9":"primerleague['home_team_lname'].value_counts().head(20)\n#primerleague.groupby(['season'])['home_team_lname'].unique()\nplteams=primerleague['home_team_lname'].value_counts().head(20)\ntype(plteams)\nplteams=pd.DataFrame(plteams)\nplteams.drop(['home_team_lname'],axis=1,inplace=True)\n#data.drop(['a'],axis=1,inplace=True)\n#plteams=plteams.index.tolist()\nplteams=['Tottenham Hotspur',\n 'Stoke City',\n 'Manchester City',\n 'Sunderland',\n 'Everton',\n 'Chelsea',\n 'Aston Villa',\n 'Manchester United',\n 'Arsenal',\n 'Liverpool',\n 'West Bromwich Albion',\n 'West Ham United',\n 'Newcastle United',\n 'Fulham',\n 'Swansea City',\n 'Wigan Athletic',\n 'Bolton Wanderers',\n 'Blackburn Rovers',\n 'Southampton',\n 'Norwich City']\nplteams","689d67e1":"fig, ax = plt.subplots(figsize=(10,20))\nm = Basemap(resolution='l', # c, l, i, h, f or None\n            projection='merc',\n            lat_0=54.5, lon_0=-4.36,\n            llcrnrlon=-6., llcrnrlat= 49.5, urcrnrlon=2., urcrnrlat=55.2)\nm.drawmapboundary(fill_color='#46bcec')\nm.fillcontinents(color='#f2f2f2',lake_color='#46bcec')\n\nx, y = m(-2.234380, 53.480709)\nplt.plot(x, y, 'ok', markersize=5)\nplt.text(x, y, ' Manchester', fontsize=12);\n\nx, y = m(-2.977840, 53.410780)\nplt.plot(x, y, 'ok', markersize=5)\nplt.text(x, y, ' liverpool', fontsize=12);\n\nx, y = m(-1.439740, 53.390630)\nplt.plot(x, y, 'ok', markersize=5)\nplt.text(x, y, ' Stoke City', fontsize=12);\n\nx, y = m(-0.961370, 53.411460)\nplt.plot(x, y, 'ok', markersize=5)\nplt.text(x, y, ' Everton', fontsize=12);\n\nx, y = m(-1.863050,52.474730)\nplt.plot(x, y, 'ok', markersize=5)\nplt.text(x, y, ' Arsenal', fontsize=12);\n\n# x, y = m(-0.126240, 51.500150)\n# plt.plot(x, y, 'ok', markersize=5)\n# plt.text(x, y, ' London', fontsize=12);\n\nx, y = m( -0.168680,51.487470 )\nplt.plot(x, y, 'ok', markersize=5)\nplt.text(x, y, ' Chelsea', fontsize=12);\n\nx, y = m( -1.381450,54.904450)\nplt.plot(x, y, 'ok', markersize=5)\nplt.text(x, y, ' Sunderland', fontsize=12);\n\nx, y = m( -0.075230,51.598550)\nplt.plot(x, y, 'ok', markersize=5)\nplt.text(x, y, ' Tottenham Hotspur', fontsize=12);\n\nx, y = m( -0.608290,51.848579)\nplt.plot(x, y, 'ok', markersize=5)\nplt.text(x, y, ' Aston Villa', fontsize=12);\n\nx, y = m( 0.008640,51.534900)\nplt.plot(x, y, 'ok', markersize=5)\nplt.text(x, y, ' West Ham ', fontsize=12);\n\nx, y = m(-1.612920,54.977840)\nplt.plot(x, y, 'ok', markersize=5)\nplt.text(x, y, ' Newcastle ', fontsize=12);\n\nx, y = m(-1.403230,50.904970 )\nplt.plot(x, y, 'ok', markersize=5)\nplt.text(x, y, 'Southampton ', fontsize=12);\n\n\nx, y = m(-0.126240,51.500150 )\nplt.plot(x, y, 'bo', markersize=100)\n\nm.drawcoastlines()\n#Manchester 53.480709, -2.234380\n#Liverpool 53.410780, -2.977840\n# Stoke City',53.390630, -1.439740\n# 'Everton', 53.411460, -0.961370\n# 'Arsenal'-1.863050,52.474730 \n#london -0.126240,51.500150 \n#Chelsea', 51.487470, -0.168680\n#'Sunderland', , -1.381450,54.904450\n#'Tottenham Hotspur',-0.075230,51.598550\n#Aston Villa' -0.608290,51.848579\n#'West Ham United' 0.008640,51.534900\n#'Newcastle United'-1.612920,54.977840 \n#Southampton -1.403230,50.904970 ","17cd6f18":"#plteams\n\nfor i ,j in enumerate(plteams):\n    print (i+1 ,j)\n    \nimport matplotlib.image as mpimg\nimg=mpimg.imread('..\/input\/teams-image\/english-premier-league-club-logos-english-premier-league-team-badges-20112012-season-soccer-news-ideas.jpg')\nplt.show()\n\n\n\n","9f5e680c":"text=\"\"\"Please choose home team  from the list:\n1 Tottenham Hotspur\n2 Stoke City\n3 Manchester City\n4 Sunderland\n5 Everton\n6 Chelsea\n7 Aston Villa\n8 Manchester United\n9 Arsenal\n10 Liverpool\n11 West Bromwich Albion\n12 West Ham United\n13 Newcastle United\n14 Fulham\n15 Swansea City\n16 Wigan Athletic\n17 Bolton Wanderers\n18 Blackburn Rovers\n19 Southampton\n20 Norwich City\\n\"\"\"\n\ntext1=\"\"\"Please choose away team  from the list: (above)\\n\"\"\"\n\n\n\nprint (text)\n\na=int(input())\nprint (text1)\nb=int(input(text1))\n\nprint (plteams[a-1],\"against\",plteams[b-1])\n\n\n\n","fcfe5e04":"data.head()\ninternal=data[(data['home_team_lname']==plteams[a-1]) & (data['away_team_lname']==plteams[b-1])]\nH=internal[internal['win']=='Home'].date.count()\nA=internal[internal['win']=='Away'].date.count()\nT=internal[internal['win']=='Tie'].date.count()\nprint (H,A,T)\ndf = pd.DataFrame({'result': [H,A,T]},\n                 index=['1', '2', 'X'])\n\ndf.plot.pie(y='result', figsize=(5, 5));","bba7a71b":"print (text)\na=int(input())\n\nprint (text1)\nb=int(input())\n\nprint(\"if home team weans how much you get per each pound?\")\nc=input()\nprint (\"if away team weans how much you get per each pound?\")\nd=input()\nprint(\"if Tie how much you get per each pound?\")\ne=input()\nprint (plteams[a-1],\"against\",plteams[b-1])\nprint (\"i get {}Eur if {} wins {}Eur if {} wins and {}Eur for Tie\".format(c, plteams[a-1],d,plteams[b-1],e))\n\n\n\n","900e0242":"data.head()\ninternal=data[(data['home_team_lname']==plteams[a-1]) & (data['away_team_lname']==plteams[b-1])]\nH=internal[internal['win']=='Home'].date.count()\nA=internal[internal['win']=='Away'].date.count()\nT=internal[internal['win']=='Tie'].date.count()\nprint (H,A,T)\ndf = pd.DataFrame({'result': [H,A,T]},\n                 index=['1', '2', 'X'])\n\ndf.plot.pie(y='result', figsize=(5, 5));","fa2a7f6f":"fig, ax = plt.subplots(1, 2)\ninternal=data[(data['home_team_lname']==plteams[a-1]) & (data['away_team_lname']==plteams[b-1])]\nH=internal[internal['win']=='Home'].date.count()\nA=internal[internal['win']=='Away'].date.count()\nT=internal[internal['win']=='Tie'].date.count()\nprint (H,A,T)\ndf = pd.DataFrame({'result': [H,A,T]},\n                 index=['1', '2', 'X'])\n\ndf.plot.pie(y='result', figsize=(10, 5),ax=ax[0]);\ninternal=data[(data['home_team_lname']==plteams[a-1]) & (data['away_team_lname']==plteams[b-1])]\nH=internal[internal['win']=='Home'].date.count()\nA=internal[internal['win']=='Away'].date.count()\nT=internal[internal['win']=='Tie'].date.count()\ntotal=H+A+T\nH=(H\/total)*float(c)\nA=(A\/total)*float(d)\nT=(T\/total)*float(e)\nprint (H,A,T)\ndf = pd.DataFrame({'result': [H,A,T]},\n                 index=['1', '2', 'X'])\ndf1 = pd.DataFrame({'border': [1,1,1,1,1]},\n                 index=['0','1', '2', 'X','d2'])\ndf1.plot(figsize=(10, 5),ax=ax[1],color='black')\ndf.plot.bar(y='result', figsize=(10, 5),ax=ax[1],color=\"red\");\n#ax.hlines(1,1,3, linestyle='--', color='pink')","cc31ac36":"ZOOM in England Premier League\n==\n\n### where is it in the world?","ae09b7f0":"# Matches by League","87579697":"## matches data is clean now","8289f971":"#      take from matches the info we want \n         subsetting data with necessary columns","aa752a37":"# European countries playing football","2e0e8e3b":"TOP TEAMS BY THEIR HOME & AWAY GOALS\n==","5a172f26":"I know that there are 20 teams in England Premier League each season so i want to check it\n==","896c7392":"## and in Spain?","aa079360":"## and in Europe?","7143a2f7":"Betting tool for uk \n==","9658d538":"## Home and away goals by league\n","0a2d51ac":"*********since i was not able to see the map here i will save the image *","e1682e62":"![map.png](attachment:map.png)","f7909fe1":"# so this is correct\n![correct-clipart-1.jpg](attachment:correct-clipart-1.jpg)\n","e38c477b":"### Note sequence will not be used in my EDA","ac2a4b68":"Number of teams in each league\n==","7d71d68d":"## lots of Nulls i will clean it after mergers and keep only important columns ","0de4d9f3":"## !!!  Who won more games in Primer League","29b7d0eb":"## Import Data","8fcfd936":"### EDA + Prediction tool for UK Priemer league\n*** setting up the enviroments","495edb21":"# what are the teams","64ab4211":"## let's be fair\nand show the number of games in the league","4a07b8ef":"[](http:\/\/)# The ultimate Soccer database for data analysis and \n\n\n+25,000 matches\n\n+10,000 players\n\n11 European Countries with their lead championship\n\nSeasons 2008 to 2016\n\nPlayers and Teams' attributes* sourced from EA Sports' FIFA video game series,\n\nDetailed match events (goal types, possession, corner, cross, fouls, cards etc...) for +10,000 matches\n\n## insperation from Kaggale Kernel\nhttps:\/\/www.kaggle.com\/hugomathien\/soccer \n\nhttps:\/\/www.kaggle.com\/pavanraj159\/european-football-data-analysis","4adf2876":"#                                  ===     Tamir's  Ganor  Foot  ball  Project  ===\n\nEuropean Soccer Database\n25k+ matches, players & teams attributes for European Professional Football\n![z.jpg](attachment:z.jpg)","a922c480":" MATCHES PLAYED IN EACH LEAGUE BY SEASON\n==="}}