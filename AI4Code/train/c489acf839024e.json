{"cell_type":{"48eb08bc":"code","2367aadb":"code","7593fb29":"code","860f40f0":"code","80566012":"code","47bb78ba":"code","3455126b":"code","77f7dcbe":"code","4fb0e67a":"code","6dc9939d":"code","2c9e4072":"code","150f3bd3":"code","999e5a4f":"code","95771bc6":"code","1a065089":"code","93e3c2e4":"markdown","4876dbf1":"markdown","124da816":"markdown","868047aa":"markdown"},"source":{"48eb08bc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2367aadb":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import mean_squared_error\nimport plotly.express as px\nimport plotly.graph_objects as go","7593fb29":"df = pd.read_csv('\/kaggle\/input\/80-cereals\/cereal.csv')","860f40f0":"df.describe()","80566012":"df.info()","47bb78ba":"mfg = {'A':'American Home Food Products','G':'General Mills','K':'Kelloggs',\n       'N':'Nabisco','P':'Post','Q':'Quaker Oats','R':'Ralston Purina'}\ndf['mfr'] = df['mfr'].replace(mfg)","3455126b":"# Checking top 5 cereal from different manufacturers having highest customer rating\ntop_5_rating = df.sort_values(by='rating' ,ascending=False).reset_index(drop=True).head()\ntop_5_rating","77f7dcbe":"# Lets calculate top 5 cereal from unique manufacturers\nall_manufacturer = df.mfr.unique()\n\n# Using for loop\nfor i in range(0,len(all_manufacturer)):\n    print(all_manufacturer[i])\n    print('_'*50)\n    print(df.loc[df['mfr'] == all_manufacturer[i]].reset_index(drop=True).head())\n    print('_'*50)","4fb0e67a":"# Similarly we will see which cereal are kept on shelf's\nshelf = df.shelf.unique()\nfor i in range(0,len(shelf)):\n    print('shelf number: ',shelf[i])\n    print('_'*50)\n    print(df.loc[df['shelf'] == shelf[i]].reset_index(drop=True).head())\n    print('_'*50)","6dc9939d":"df.groupby('mfr')['rating'].mean().plot.bar()\nplt.show()","2c9e4072":"fig = px.line(df, x='name', y='rating', color='mfr', markers=True)\nfig.show()","150f3bd3":"df1 = df['mfr'].value_counts().to_frame().reset_index()\nfig = px.pie(df1, values='mfr', names ='index' ,title='Percentage of products as per manufacturer' , \n             color_discrete_sequence=px.colors.sequential.RdBu)\nfig.show()","999e5a4f":"rating_between_0_to_25 = df.loc[df['rating'] < 25]\nrating_between_25_to_50 = df[(df['rating'] >25.0) & (df['rating']<50.0)]\nrating_between_50_to_75 = df[(df['rating'] >50.0) & (df['rating']<75.0)]\nrating_between_75_to_100 = df[(df['rating'] >75.0) & (df['rating']<100.0)]","95771bc6":"def rating(shelf):\n    fig = px.scatter(shelf, x=\"rating\", y=\"calories\",\n                     size=\"fiber\", color=\"name\",\n                     hover_name=\"mfr\", size_max=60)\n    fig.show()\nrating(rating_between_0_to_25)\nrating(rating_between_25_to_50)\nrating(rating_between_50_to_75)\nrating(rating_between_75_to_100)","1a065089":"mfr_names = df.mfr.unique()\nmfr_names\ndef top_5(data):\n    for i in range(0,len(mfr_names)):\n        name = mfr_names[i]\n        plotting_data = data.loc[data['mfr'] == name].sort_values(by='rating',ascending=False).head()\n        print(\"Top 5 cereal of %s as per their rating from consumers\"%name)\n        fig = px.bar(plotting_data, x='name', y='rating' ,\n                    hover_name=\"name\")\n        fig.show()\ntop_5(df)","93e3c2e4":"#  ***DATA VISUALIZATION***","4876dbf1":"Instead of changing the data type of manufacturing company column we will rename it as it would be easy for us for visualization","124da816":"# > Importing libraries","868047aa":"**Loading the data**"}}