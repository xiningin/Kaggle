{"cell_type":{"19f2e00e":"code","b8154755":"code","b57a3b35":"code","63abc9fc":"code","292a6927":"code","a66dee34":"code","54cb6e37":"code","81b77a2f":"code","8e0105b7":"code","3cf6947f":"code","07b93f3d":"code","0fb579bc":"code","4b4f1716":"code","5ed269d0":"code","73825908":"code","7f7fd276":"code","b05086aa":"code","69327207":"code","06e3f3f2":"code","5d2496dd":"code","c1f4552a":"code","33aa4c2f":"code","b0c5f4b7":"code","1094077d":"code","8fa16d89":"code","6c8722cf":"code","02710800":"code","c80128d1":"code","76d66e07":"code","692f3427":"code","c20d9cd8":"code","32ed09d8":"code","4d61fcb6":"code","d7a0aafe":"code","aedc0b87":"code","e805079d":"code","3da3eab6":"code","5044fd20":"code","5438b2cb":"code","18f4e9e0":"code","eb28a3a6":"code","1a10f162":"code","ebddc982":"code","3cbf165e":"code","dccbe648":"code","f0c45b81":"code","8e7fb293":"code","bcde6a82":"code","91476a27":"code","7c484c01":"code","0b6f8708":"code","33bf5a52":"code","ddc4e543":"code","e63e10ff":"code","d218d056":"code","f0edac91":"code","26da3720":"code","dbb19046":"code","ba1cc6e3":"code","1961885e":"code","a846dcff":"code","ff3c840c":"code","b8f75fb4":"code","8cad4349":"code","40ba2665":"code","aae60be7":"markdown","670544e2":"markdown","93fdaa33":"markdown","bd83f680":"markdown","4874cde8":"markdown","36877968":"markdown","4ec41088":"markdown","aa343056":"markdown","c8895e02":"markdown","09c1d424":"markdown","748287ae":"markdown","bb41abb9":"markdown","44c9f27c":"markdown","0cd4b8e8":"markdown","b753e1cb":"markdown","16b5f02f":"markdown","f575c58f":"markdown","f72c7cd2":"markdown","7dceea2d":"markdown","204f77fd":"markdown","9103daba":"markdown","48442b4b":"markdown","2f6165dc":"markdown","a70d7c66":"markdown","fd3d0ed7":"markdown","5d43788c":"markdown","394d5e5c":"markdown","36a00f17":"markdown","8df3a4a3":"markdown","dd07a9ae":"markdown","48c19332":"markdown","ee28420e":"markdown","fc867ce5":"markdown","fbf1ed1a":"markdown","f9c6a57e":"markdown","4fd7e64c":"markdown","241f1927":"markdown","dbed11d8":"markdown","5fd37914":"markdown","289063de":"markdown"},"source":{"19f2e00e":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","b8154755":"data = pd.read_csv(\"..\/input\/california-housing-prices\/housing.csv\")\nprint(data.shape)\ndata.head()","b57a3b35":"data_explore = data.copy()","63abc9fc":"data_explore.info()","292a6927":"data_explore.describe()","a66dee34":"data_explore.hist(figsize=(15, 8))","54cb6e37":"columns = ['households', 'population', 'total_bedrooms', 'total_rooms']\nplt.figure(figsize=(15, 8))\nsns.boxplot(data=data_explore[columns])\nplt.ylim((-100, 7000))","81b77a2f":"Q1 = data_explore.quantile(0.25)\nQ3 = data_explore.quantile(0.75)\nIQR = Q3 - Q1\n((data_explore < (Q1 - 1.5 * IQR)) | (data_explore > (Q3 + 1.5 * IQR))).sum()","8e0105b7":"data_explore['total_bedrooms'].mean(), data_explore['total_bedrooms'].median()","3cf6947f":"median = data_explore['total_bedrooms'].median()\ndata_explore['total_bedrooms'].fillna(value=median, inplace=True)\ndata_explore['total_bedrooms'].isna().sum()","07b93f3d":"import matplotlib.image as mpimg\ncalifornia_img=mpimg.imread('..\/input\/images\/calfornia_img.jpg')\ncalifornia_state=mpimg.imread('..\/input\/images\/calfornia_state.jpg')","0fb579bc":"plt.figure(figsize=(15, 8))\nplt.subplot(1, 2, 1)\nplt.imshow(california_state)\nplt.axis('off')\nplt.subplot(1, 2, 2)\nax = plt.gca()\ndata_explore.plot(kind=\"scatter\", x=\"longitude\", y=\"latitude\", alpha=0.4, s=data_explore[\"population\"]\/100,\n             label=\"population\", figsize=(15,6), c=\"median_house_value\", cmap=plt.get_cmap(\"jet\"), ax=ax)\nax.imshow(california_img, extent=[-124.55, -113.80, 32.45, 42.05])","4b4f1716":"data_explore[\"rooms_per_household\"] = data_explore[\"total_rooms\"]\/data_explore[\"households\"]\ndata_explore[\"bedrooms_per_room\"] = data_explore[\"total_bedrooms\"]\/data_explore[\"total_rooms\"]","5ed269d0":"data_explore_dummies = pd.get_dummies(data_explore) \nplt.figure(figsize=(18, 10))\ncorr_matrix = data_explore_dummies.corr(method='pearson')\nsns.heatmap(corr_matrix, mask=np.zeros_like(corr_matrix, dtype=np.bool), square=True, annot=True)","73825908":"corr_matrix[\"median_house_value\"].sort_values(ascending=False)","7f7fd276":"from pandas.plotting import scatter_matrix\nattributes = [\"median_house_value\", \"median_income\", \"total_rooms\", \"housing_median_age\"]\nscatter_matrix(data_explore[attributes], figsize=(15, 10))\nplt.show()","b05086aa":"data_capped = data[data['median_house_value']>=500000]\ndata = data[data['median_house_value']<500000]\ndata_capped.shape, data.shape","69327207":"data[\"income_cat\"] = pd.cut(data[\"median_income\"], bins=[0., 1.5, 3.0, 4.5, 6., np.inf], labels=[1, 2, 3, 4, 5])","06e3f3f2":"data[\"income_cat\"].hist()","5d2496dd":"from sklearn.model_selection import StratifiedShuffleSplit\n\nsplit = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)","c1f4552a":"for train_index, test_index in split.split(data, data[\"income_cat\"]):\n    strat_train_set = data.iloc[train_index]\n    strat_test_set = data.iloc[test_index]\n\nstrat_train_set.drop(\"income_cat\", axis = 1, inplace=True)\nstrat_test_set.drop(\"income_cat\", axis = 1, inplace=True)\nstrat_train_set.shape, strat_test_set.shape","33aa4c2f":"X_train = strat_train_set.drop('median_house_value', axis=1)\ny_train = strat_train_set['median_house_value'].copy()\nX_test = strat_test_set.drop('median_house_value', axis=1)\ny_test = strat_test_set['median_house_value'].copy()","b0c5f4b7":"from sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import PowerTransformer, OneHotEncoder\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.base import BaseEstimator, TransformerMixin","1094077d":"rooms_ix, bedrooms_ix, households_ix = 3, 4, 6    # column ids\n\nclass CombineAttributesAdder(BaseEstimator, TransformerMixin):\n    def __init__(self):\n        pass\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        rooms_per_household = X[:, rooms_ix] \/ X[:, households_ix]\n        bedrooms_per_room = X[:, bedrooms_ix] \/ X[:, rooms_ix]\n        return np.c_[X, rooms_per_household, bedrooms_per_room]","8fa16d89":"num_attrs = list(X_train.columns)\nnum_attrs.remove('ocean_proximity')\ncat_attrs = ['ocean_proximity',]","6c8722cf":"num_pipeline = Pipeline([('imputer', SimpleImputer(strategy=\"median\")),\n                         ('attribs_adder', CombineAttributesAdder()),\n                         ('scaler', PowerTransformer(method='yeo-johnson', standardize=True))])\n\npre_process = ColumnTransformer([(\"nums\", num_pipeline, num_attrs),\n                                   (\"cat\", OneHotEncoder(handle_unknown='ignore'), cat_attrs)], remainder='passthrough')","02710800":"X_train_transformed = pre_process.fit_transform(X_train)\nX_test_transformed = pre_process.transform(X_test)\nX_train_transformed.shape, X_test_transformed.shape","c80128d1":"feature_columns = list(X_train.columns)\nfeature_columns.extend(['rooms_per_household','bedrooms_per_room'])\nnew_cols = list(X_train['ocean_proximity'].unique())\nfeature_columns.extend(new_cols)\nfeature_columns.remove('ocean_proximity')","76d66e07":"from sklearn.model_selection import cross_val_score\n\nresults=[]\n\ndef cv_results(model, X, y):\n    scores = cross_val_score(model, X, y, cv = 7, scoring=\"neg_root_mean_squared_error\", n_jobs=-1)\n    rmse_scores = -scores\n    rmse_scores = np.round(rmse_scores, 3)\n    print('CV Scores: ', rmse_scores)\n    print('rmse: {},  S.D.:{} '.format(np.mean(rmse_scores), np.std(rmse_scores)))\n    results.append([model.__class__.__name__, np.mean(rmse_scores), np.std(rmse_scores)])","692f3427":"from sklearn.linear_model import SGDRegressor","c20d9cd8":"sgd_reg = SGDRegressor(alpha=1, penalty='l1', random_state=42)\nsgd_reg.fit(X_train_transformed, y_train)","32ed09d8":"feature_imp = [ col for col in zip(feature_columns,sgd_reg.coef_)]\nfeature_imp.sort(key=lambda x:x[1], reverse=True)\nfeature_imp","4d61fcb6":"cv_results(sgd_reg, X_train_transformed, y_train)","d7a0aafe":"from sklearn.tree import DecisionTreeRegressor","aedc0b87":"tree_reg = DecisionTreeRegressor(criterion=\"mse\", random_state=42)\ntree_reg.fit(X_train_transformed, y_train)","e805079d":"cv_results(tree_reg, X_train_transformed, y_train)","3da3eab6":"from sklearn.ensemble import RandomForestRegressor","5044fd20":"forest_reg = RandomForestRegressor(criterion='mse', n_estimators=100, n_jobs=-1, random_state=42)\nforest_reg.fit(X_train_transformed, y_train)","5438b2cb":"feature_imp = [ col for col in zip(feature_columns,forest_reg.feature_importances_)]\nfeature_imp.sort(key=lambda x:x[1], reverse=True)\nfeature_imp","18f4e9e0":"cv_results(forest_reg, X_train_transformed, y_train)","eb28a3a6":"from xgboost import XGBRegressor","1a10f162":"xgb_reg = XGBRegressor(n_estimators=100, max_depth=8, learning_rate=0.1, objective='reg:squarederror', random_state=42)\nxgb_reg.fit(X_train_transformed, y_train)","ebddc982":"feature_imp = [ col for col in zip(feature_columns,xgb_reg.feature_importances_)]\nfeature_imp.sort(key=lambda x:x[1], reverse=True)\nfeature_imp","3cbf165e":"cv_results(xgb_reg, X_train_transformed, y_train)","dccbe648":"result_df = pd.DataFrame(data=results, columns=['Model', 'RMSE', 'S.D'])\nresult_df","f0c45b81":"from sklearn.model_selection import GridSearchCV","8e7fb293":"rf_grid_parm=[{'n_estimators':[50, 100, 300], 'max_depth':[8, 16, 24]}]\nrf_grid_search = GridSearchCV(RandomForestRegressor(random_state=42, n_jobs=-1), rf_grid_parm, cv=5, scoring=\"neg_root_mean_squared_error\", return_train_score=True, n_jobs=-1)\nrf_grid_search.fit(X_train_transformed, y_train)","bcde6a82":"rf_grid_search.best_params_, -rf_grid_search.best_score_","91476a27":"cvres = rf_grid_search.cv_results_\nprint(\"Results for each run of Random Forest Regression...\")\nfor train_mean_score, test_mean_score, params in zip(cvres[\"mean_train_score\"], cvres[\"mean_test_score\"], cvres[\"params\"]):\n    print(-train_mean_score, -test_mean_score, params)","7c484c01":"best_forest_reg = rf_grid_search.best_estimator_\nbest_forest_reg","0b6f8708":"xgb_grid_parm=[{'n_estimators':[50, 100, 300], 'max_depth':[6, 8, 12]}]\nxgb_grid_search = GridSearchCV(XGBRegressor(objective='reg:squarederror', learning_rate=0.1, n_jobs=-1, random_state=42), xgb_grid_parm, cv=5, scoring=\"neg_root_mean_squared_error\", return_train_score=True, n_jobs=-1)\nxgb_grid_search.fit(X_train_transformed, y_train)","33bf5a52":"xgb_grid_search.best_params_, -xgb_grid_search.best_score_","ddc4e543":"cvres = xgb_grid_search.cv_results_\nprint(\"Results for each run of XGBoost Regression...\")\nfor train_mean_score, test_mean_score, params in zip(cvres[\"mean_train_score\"], cvres[\"mean_test_score\"], cvres[\"params\"]):\n    print(-train_mean_score, -test_mean_score, params)","e63e10ff":"best_xgb_reg = xgb_grid_search.best_estimator_\nbest_xgb_reg","d218d056":"cv_results(best_forest_reg, X_test_transformed, y_test)","f0edac91":"cv_results(best_xgb_reg, X_test_transformed, y_test)","26da3720":"combine_data = pd.concat([strat_train_set, strat_test_set], axis=0)\ncombine_data.shape","dbb19046":"y_train_pred = best_xgb_reg.predict(X_train_transformed)\ny_test_pred = best_xgb_reg.predict(X_test_transformed)","ba1cc6e3":"y_pred = np.concatenate([y_train_pred, y_test_pred], axis=0)\ny_pred.shape","1961885e":"combine_data['predicted_value'] = y_pred","a846dcff":"combine_data.head()","ff3c840c":"combine_data.describe()","b8f75fb4":"plt.figure(figsize=(15, 6))\nplt.subplot(1, 2, 1)\ncombine_data['median_house_value'].hist()\nplt.title('Observed Median House Value')\nplt.subplot(1, 2, 2)\ncombine_data['predicted_value'].hist()\nplt.title('Predicted Median House Value')\nplt.show()","8cad4349":"plt.figure(figsize=(12, 8))\nplt.scatter(combine_data['median_income'], combine_data['median_house_value'], c='green', alpha=0.7, label=\"Observed\")\nplt.scatter(combine_data['median_income'], combine_data['predicted_value'], c='red', alpha=0.7, label=\"Predicted\")\nplt.xlabel('Median Income')\nplt.ylabel('Median House Value')\nplt.legend()\nplt.show()","40ba2665":"plt.figure(figsize=(18, 10))\nfig, ax = plt.subplots(nrows=1, ncols=2)\ncombine_data.plot(kind=\"scatter\", x=\"longitude\", y=\"latitude\", alpha=0.4, figsize=(15,8), c=\"median_house_value\", cmap=plt.get_cmap(\"jet\"), ax=ax[0], colorbar=False)\nax[0].imshow(california_img, extent=[-124.55, -113.80, 32.45, 42.05])\nax[0].set_title('Observed Median House Values')\ncombine_data.plot(kind=\"scatter\", x=\"longitude\", y=\"latitude\", alpha=0.4,figsize=(15,8), c=\"predicted_value\", cmap=plt.get_cmap(\"jet\"), ax=ax[1], colorbar=False)\nax[1].imshow(california_img, extent=[-124.55, -113.80, 32.45, 42.05])\nax[1].set_title('Predicted Median House Values')\nplt.show()","aae60be7":"Got better cross validation result for XGBoost than all previously implemented algorithms. Remember in Random Forest we have use full grown decision trees where as in XGBoost we have use Decision trees of height=8.\n\nNow, I will tune parameters of Random Forest and XGBoost. Once best models are obtained, I will evaluate each best model and then the model which give best results on test dataset will be the final model. ","670544e2":"## Step 2: Data Exploratoration","93fdaa33":"- Observations:\n    - We can see that there were many blocks for which median house value above 450000. But model has predicted the value lesser than the orignal median house value.\n    - For some block having median value less than 100000, model has predicted the value higher than the orignal value.\n    - Look at top left corner, For blocks where median house value is less than 3 and median observed value above 300000, model has predicted lesser value than orignal value.","bd83f680":"### Stochastic Gradient Descent","4874cde8":"- I will be trying out Linear as well as Ensemble learning techniques.\n- Following are the 5 models I will be using:\n    1. Stochastic Gradient Descent with L-2 Regularization.\n    2. Decision Tree\n    3. Random Forest\n    4. XGBoost Regression\n\n\n- I will be using RMSE as evaluation metric.","36877968":"- Observations:\n    - Median house value is highly correlated with median income. Other than median income no other feature is highly correlated with target variable.\n    - We can see that newly created features are somewhat correlated to target variable. This correlation is more than the correlation of those indivisual features with target variable.\n    - There is strong correlation among some of feature variables such as latitude & longitude, population & households etc.\n\n    \nLets explore more about the relationship between correlated features with median house value.","4ec41088":"### Decision Tree","aa343056":"- Observe the plot between median houseing value and median income, there is strong correlation between them and also the points are not too dispersed. Interesting observation is that we can see the horizontal line at top of chart(at 500,000). This is because of capping.\n- Having capped data is not good for training the model because there is possibility that model will learn that the maximum price of house will not go above 500k USD.","c8895e02":"- Observe the redness in both graph. Near the ocean region we can see that there is more redness in observed median house value than the predicted. \n\nNote: Redness indicates the high house value where as blue indicates low house values. ","09c1d424":"- Error is still large, but among both models XGBoost performs slightly better on both train and test dataset. So I will select XGBoost as final model.","748287ae":"## Step 6: Model Evaluation","bb41abb9":"### Outliers","44c9f27c":"Comparing mean, std or min, 25% or max 75%, we can see that there are some outliers in some columns.","0cd4b8e8":"I will define custom transformer, which will create the two extra columns.","b753e1cb":"### Correlation Plot","16b5f02f":"- Since dataset is not large enough and (As per experts) \"median income\" is a very important attribute to predict median housing prices, We have to ensure that the test set is representative of the various categories of incomes in the whole dataset.\n- The median income is a continuous numerical attribute, created an new income \"category\" attribute to use for stratisfied sampling. \n- I will generated train and test data using StratifiedShuffleSplit method.","f575c58f":"First we will find best Random Forest regression model.","f72c7cd2":"## Step 1: Frame the problem","7dceea2d":"- Looking at the coefficient values, model has given much importance to the median income attribute. Another most important attributes according this model are proximity of location from ocean and median age of house.","204f77fd":"- Objective: Predicting the median housing price for given block.\n- Problem Type: Supervise & Regression\n\nThe dataset contains information about houses in California district, obtained from 1990 California census.\nThere are around 20000 records along with 10 features in the dataset. Feature names are self explanatory: longitude,\tlatitude, housing_median_age, total_rooms, total_bedrooms, population, households, median_income, median_house_value, ocean_proximity\n\nImportant to remember that the each record in dataset is not about the house but it is about the block.\n\n1. longitude: A measure of how far west a house is; a higher value is farther west\n\n2. latitude: A measure of how far north a house is; a higher value is farther north\n\n3. housingMedianAge: Median age of a house within a block; a lower number is a newer building\n\n4. totalRooms: Total number of rooms within a block\n\n5. totalBedrooms: Total number of bedrooms within a block\n\n6. population: Total number of people residing within a block\n\n7. households: Total number of households, a group of people residing within a home unit, for a block\n\n8. medianIncome: Median income for households within a block of houses (measured in tens of thousands of US Dollars)\n\n9. medianHouseValue: Median house value for households within a block (measured in US Dollars)\n\n10. oceanProximity: Location of the house w.r.t ocean\/sea\n\n\n- Few thing to remeber about dataset:\n    - The median income, housing median age and the median house value were capped. \n    - Median income not expressed in US dollars. The data has been scaled and capped at 15 for higher median incomes, and at 0.5 for lower median incomes. \n    - Capping median house value may be a serious problem since it is the target attribute (your labels). Machine Learning algorithms may learn that prices never go beyond that limit.","9103daba":"Evaluate XGBoost regression model.","48442b4b":"Evaluate Random Forest regression model.","2f6165dc":"### Histograms","a70d7c66":"- Observations: \n    - We can see that the density is larger in Bay Area, Los Angeles, San Diego.\n    - It is observed that the housing prices are higher near ocean region and in high population area. This observed not hold true for north california region.\n    - As we go away from ocean there is decrease in housing prizes. Most housing prizes are below $20k.","fd3d0ed7":"- Observations:\n    - There are many blocks for which median housing prize lies in between 2.5 to 5.5\n    - Many histograms are tail heavy: they extend much farther to the right of the median than to the left. This may make it a bit harder for some Machine Learning algorithms to detect patterns.","5d43788c":"Only total_bedrooms column contain null values, total 207.","394d5e5c":"### XGBoost Regression","36a00f17":"Though RMSE is still high but we got better result compared to previous two models. ","8df3a4a3":"### Median Housing Value Accross Different Geo Locations","dd07a9ae":"# California Housing Price Prediction","48c19332":"During exploration, I performed two operations on data:\n1. Replace null values with median\n2. Added two new columns: bedrooms_per_room, rooms_per_household","ee28420e":"- RMSE is around than $60000. Which is huge. This indicates that model is poorely fitted with given data.\n- Either features included not providing the enough information or model is not powerfull.\n- We have observed the underfitting with Linear Regression.","fc867ce5":"There are more than 1000 outliers, I will replace them by median instead of mean.","fbf1ed1a":"## Step 4: Select and Train a Model","f9c6a57e":"Now lets find best XGBoost regression model.","4fd7e64c":"First lets get rid of those records for which median house value is capped to $500k.","241f1927":"## Step 3: Data Preprocessing","dbed11d8":"### Random Forest","5fd37914":"## Step 5: Fine Tune a Model","289063de":"Lets analyse model's prediciton on overall dataset. This will help to find out where the model is making many mistakes."}}