{"cell_type":{"5468deef":"code","e9756a7b":"code","1b9fc173":"code","1c9d2f0d":"code","12a00574":"code","4f82194d":"code","b49fbcf8":"code","272c1f93":"code","43244fff":"code","d42bb107":"markdown","23dbe55d":"markdown","01dd95d9":"markdown","84626f01":"markdown","01099ebb":"markdown","c08ba00c":"markdown"},"source":{"5468deef":"import matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport numpy as np\nimport pandas as pd\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.impute import SimpleImputer\nimport seaborn as sns","e9756a7b":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')","1b9fc173":"def displayCorrMatrix():\n    sns.set(font_scale=0.6)\n    correlation_train = train.corr()\n    correlation_train.drop('Id', axis=1, inplace=True)\n    correlation_train.drop(['Id'], inplace=True)\n    plt.figure(figsize=(17, 17))\n    sns.heatmap(correlation_train,\n                annot=True,\n                fmt='.1f',\n                cmap='coolwarm',\n                linewidths=0.2,\n                cbar=True,\n                cbar_kws={\"shrink\": 1.0, \"aspect\": 40})\n    plt.draw()\n    sns.reset_orig()\n\ndisplayCorrMatrix()","1c9d2f0d":"variablesForPrediction = ['OverallQual', 'GrLivArea', 'GarageArea', 'TotalBsmtSF', '1stFlrSF', 'FullBath','TotRmsAbvGrd','YearBuilt', 'YearRemodAdd', 'Fireplaces', 'BsmtFinSF1']\ntrain[variablesForPrediction].isnull().any()","12a00574":"def predictSalePrice(features, dataset):\n    y = dataset.SalePrice.values\n    my_imputer = SimpleImputer()\n    X = dataset[features]\n    # Dividimos datos en 80% para entrenamiento 20% para pruebas y realizamos\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=44)\n\n    model1 = LinearRegression()\n    model1.fit(X_train, y_train)\n\n    y_pred = model1.predict(X_test)\n\n    X_test = X_test.assign(SalePricePredicted=y_pred)\n    X_test = X_test.assign(SalePrice=y_test)\n    X_test.index.name = 'Id'\n    X_test = X_test.sort_values('Id')\n    print('Error Cuadratico Medio:', metrics.mean_squared_error(y_test, y_pred))\n\n    fig, ax = plt.subplots(figsize=(19,7))\n    X_test.plot(ax=ax, y=['SalePricePredicted', 'SalePrice'])\n    plt.xlabel(\"Id\")\n    plt.ylabel(\"SalePrice\")\n    plt.draw()","4f82194d":"predictSalePrice(variablesForPrediction, train)","b49fbcf8":"train.FullBath = np.power(train.FullBath, 10)  # fullbath = fullbath^10","272c1f93":"predictSalePrice(variablesForPrediction, train)","43244fff":"plt.show()","d42bb107":"# Comparamos resultados\n\nEs posible apreciar que antes de aplicar la tranformacion con el modelo que empleamos inicialmente obtuvimos un Error Cuadratico Medio de **931.497.037**, luego de aplicar la transformacion a una de las variables empleadas para la prediccion, obtuvimos un mejor resultado para Error Cuadratico Medio de **892.264.013**.\nPor lo tanto es posible concluir que el modelo con la transformacion es mejor al anterior.","23dbe55d":"# Realizamos una transformacion a los datos\n\nLe aplicamos la transformacion $$t(x)=x^{10}$$ a la variable FullBath \n\n","01dd95d9":"# Obtenemos otro modelo lineal luego de aplicar la transformacion y realizamos predicciones","84626f01":"# Seleccion de variables para el modelo\n\nSeleccionamos las siguientes variables ya que estas son las que poseen una mayor correlacion con respecto a la variable SalePrice y por tanto nos permitiran obtener un modelo preciso.","01099ebb":"# Obtenemos un modelo lineal y realizamos predicciones para los datos de prueba","c08ba00c":"# Calculamos la matriz de correlaciones train.corr()"}}