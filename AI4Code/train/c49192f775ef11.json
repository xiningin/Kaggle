{"cell_type":{"01921b30":"code","e635a94f":"code","cfd87dbb":"code","0709cb4d":"code","74b41d41":"code","c48266cf":"code","1b2a8e93":"code","11af7b03":"code","57af96c6":"code","71f459ba":"code","24d053cb":"code","3f255799":"code","612dad45":"code","a10b4c89":"code","181b391b":"code","8a98ebbc":"code","fa655918":"code","2299bee7":"code","be39d19b":"code","484620ca":"code","74a62f99":"code","3ac7ef9d":"code","092d7c96":"code","3e912ee0":"markdown","97f530ab":"markdown","b51c009b":"markdown","b5b29e27":"markdown","5c4b125b":"markdown","c18bc6c5":"markdown","272584b7":"markdown","6aa9e599":"markdown","639b7f1d":"markdown"},"source":{"01921b30":"%matplotlib inline\nimport os\nimport pandas as pd\nimport datetime as dt\nimport numpy as np\nfrom tqdm import tqdm\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = [16, 10]\nplt.rcParams['font.size'] = 14\nimport seaborn as sns\nsns.set_palette(sns.color_palette('tab20', 20))\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nfrom IPython.display import HTML\nfrom matplotlib import animation, rc\nimport matplotlib.image as mpimg\nimport warnings\n\ndef write_image(fig, filename, save=False):\n    if save:\n        try:\n            import plotly.io as pio\n            pio.write_image(fig, '.\/svgs\/' + filename)\n        except Exception:\n            pass","e635a94f":"C = ['#3D0553', '#4D798C', '#7DC170', '#F7E642']\nwarnings.filterwarnings('ignore')\nplt.rcParams['figure.figsize'] = [16, 10]\nplt.rcParams['font.size'] = 14\npd.set_option('display.max_columns', 99)\nstart = dt.datetime.now()\n\nNFL_DATA_DIR = '..\/input\/NFL-Punt-Analytics-Competition'\nALL_PLAYS_PATH = '..\/input\/nflplaybyplay2009to2016\/NFL Play by Play 2009-2017 (v4).csv'\nNGS_DIR = '..\/input\/next-gen-stats-by-play'\nEDA_DIR = '..\/input\/exploratory-data-analysis-external-data'\nEXT_DIR = '..\/input\/externalnfl\/'\n\nYARD = 0.9144\nMPH = 1.609344\nSPEED_LIMIT = 13\nMAX_SPEED = 11\nSMOOTHING_FACTOR = 3\nACCELERATION_BINS = [0, 10, 15, 100]\n\nPUNT_COVERAGE_ROLES = [\n    'GL', 'GR', 'P', 'PPL', 'PPR', 'PC', 'PLW', 'PRW', 'PLT', 'PLG', 'PLS', 'PRG', 'PRT']\nPUNT_RETURN_ROLES = ['PR', 'PFB', 'PLL', 'PDM', 'PLM', 'PLR', 'VL', 'VR', 'PDL', 'PDR']\n\ndef get_plays():\n    data = pd.read_csv(os.path.join(NFL_DATA_DIR, 'play_information.csv'),\n                       parse_dates=['Game_Date'])\n    data.columns = [col.replace('_', '') for col in data.columns]\n    data['PlayKey'] = data['GameKey'].apply(str) + '_' + data['PlayID'].apply(str)\n    data = data.drop(['PlayID', 'PlayType'], axis=1)\n    data = data.sort_values(['GameKey', 'Quarter', 'GameClock'])\n    data['PlayType'] = 'Punt'\n    return data\n\ndef get_ngs(playkey):\n    ngs = pd.read_csv(os.path.join(NGS_DIR, f'ngs_{playkey}.csv'), parse_dates=['Time'])\n    ngs['t'] = (ngs.Time - ngs.Time.min()) \/ np.timedelta64(1, 's')\n    ngs = ngs.sort_values(by='t')\n    return ngs\n\ndef get_punt_players():\n    player_role = pd.read_csv(os.path.join(NFL_DATA_DIR, 'play_player_role_data.csv'))\n    player_role.columns = [col.replace('_', '') for col in player_role.columns]\n    player_role['PlayKey'] = player_role['GameKey'].apply(str) + '_' + player_role[\n        'PlayID'].apply(str)\n    player_role['ShortRole'] = player_role['Role'].apply(\n        lambda s: s.replace('i', '').replace('o', '')[:3])\n    player_role['PuntCoverage'] = player_role['ShortRole'].apply(\n        lambda s: s in PUNT_COVERAGE_ROLES)\n    player_role['PuntReturn'] = player_role['ShortRole'].apply(lambda s: s in PUNT_RETURN_ROLES)\n\n    players = get_players()\n\n    return player_role.merge(players, how='left', on='GSISID')\n\ndef get_players():\n    players = pd.read_csv(os.path.join(NFL_DATA_DIR, 'player_punt_data.csv'))\n    players = players.groupby('GSISID').agg({\n        'Number': lambda x: ','.join(\n            x.replace(to_replace='[^0-9]', value='', regex=True).unique()),\n        'Position': lambda x: ','.join(x.unique())})\n    return players.reset_index()\n\ndef get_punt_player_speed():\n    player_punt_speed = pd.read_csv(os.path.join(NGS_DIR, 'player_ngs.csv'))\n    punt_player_speed = pd.merge(player_punt_speed, get_punt_players(),\n                                 on=['PlayKey', 'GSISID'])\n    punt_player_speed = punt_player_speed[punt_player_speed.MaxSpeed < SPEED_LIMIT]\n    punt_player_speed['CollisionId'] = np.digitize(-punt_player_speed.MinAcceleration,\n                                                   bins=ACCELERATION_BINS)\n    punt_player_speed['Collision'] = punt_player_speed['CollisionId'].replace(\n        {1: 'Mild', 2: 'Medium', 3: 'Serious'})\n    return punt_player_speed\n\ndef get_video_review():\n    data = pd.read_csv(os.path.join(NFL_DATA_DIR, 'video_review.csv'))\n    data.columns = [col.replace('_', '') for col in data.columns]\n    data['PlayKey'] = data['GameKey'].apply(str) + '_' + data['PlayID'].apply(str)\n\n    footage = pd.read_csv(os.path.join(NFL_DATA_DIR, 'video_footage-injury.csv'))\n    footage['PlayKey'] = footage['gamekey'].apply(str) + '_' + footage['playid'].apply(str)\n\n    footage = footage.rename(columns={'PREVIEW LINK (5000K)': 'VideoLink'})\n    data = data.merge(footage[['PlayKey', 'VideoLink', 'PlayDescription']],\n                      how='left',\n                      on=['PlayKey'])\n    data['PrimaryPartnerGSISID'] = data['PrimaryPartnerGSISID'].replace('Unclear', np.nan)\n    data = data.fillna({'PrimaryPartnerGSISID': -999})\n    data['PrimaryPartnerGSISID'] = data['PrimaryPartnerGSISID'].astype('int64')\n    return data\n\ndef calculate_speed_and_acceleration(ngs, smoothing_factor=5):\n    speed = ngs.pivot('t', 'GSISID', 'dis') * YARD\n    speed = speed.fillna(0)\n    speed = speed.rolling(smoothing_factor).mean() * 10\n    acc = speed.clip(0, MAX_SPEED).diff(smoothing_factor) * 10. \/ smoothing_factor\n    return speed, acc\n\ndef collect_ngs_player_stats():\n    plays = get_plays()\n    result = []\n    for playkey in tqdm(plays.PlayKey.values):\n        try:\n            ngs = get_ngs(playkey)\n\n            speed, acc = calculate_speed_and_acceleration(ngs, SMOOTHING_FACTOR)\n            max_speed = speed.max(axis=0).reset_index().rename(columns={0: 'MaxSpeed'})\n            min_acceleration = acc.min(axis=0).reset_index().rename(\n                columns={0: 'MinAcceleration'})\n\n            collision_coords = pd.DataFrame([[c, acc[c].argmin()] for c in acc.columns],\n                                            columns=['GSISID', 't'])\n            collision_coords = collision_coords.merge(ngs[['GSISID', 't', 'x', 'y']],\n                                                      how='left', on=['GSISID', 't'])\n            collision_coords['x'] = collision_coords['x'] - 10\n            collision_coords.columns = ['GSISID', 'CollisionTime', 'CollisionX', 'CollisionY']\n\n            stats = pd.merge(max_speed, min_acceleration, on='GSISID')\n            stats = stats.merge(collision_coords, on='GSISID', how='left')\n            stats['PlayKey'] = playkey\n            result.append(stats)\n        except Exception as e:\n            print(e)\n    return pd.concat(result)\n\ndef show_injured_player_speed_profile(playkey, a, b, smoothing_factor=5):\n    speed, acc = calculate_speed_and_acceleration(get_ngs(playkey), smoothing_factor)\n    fig, axs = plt.subplots(nrows=2, sharex=True)\n    axs[0].plot(speed[a], color=C[0], lw=3, alpha=0.8, label='Injured Player')\n    axs[0].plot(speed.mean(axis=1), color=C[-1], lw=2, alpha=0.5, label='All Player Average')\n    axs[0].set_ylabel('Speed (m\/s)')\n    axs[1].set_ylabel('Acceleration (m\/s2)')\n    axs[1].plot(acc[a], color=C[0], lw=3, alpha=0.8)\n    try:\n        axs[0].plot(speed[int(b)], color=C[1], lw=3, alpha=0.8, label='Primary Partner')\n        axs[1].plot(acc[int(b)], color=C[1], lw=3, alpha=0.8)\n    except Exception as e:\n        print(e)\n    plt.xlabel('Time (s)')\n    axs[0].grid()\n    axs[1].grid()\n    axs[0].legend(loc=0)\n    axs[0].set_ylim(0, 10)\n    axs[1].set_ylim(-15, 10)\n    plt.show()\n    fig.savefig(f'speed_profile_{playkey}.png', dpi=300)\n","cfd87dbb":"player_ngs = pd.read_csv(os.path.join(NGS_DIR, 'player_ngs.csv'))\nprint(player_ngs.shape)\nprint(player_ngs.count())","0709cb4d":"playkey = '274_3609'\nngs = get_ngs(playkey)\nngs.shape\nngs.head()\nspeed, acc = calculate_speed_and_acceleration(ngs, smoothing_factor=5)","74b41d41":"show_injured_player_speed_profile(playkey, 23742, 31785, 3)","c48266cf":"punt_player_speed = get_punt_player_speed()\npunt_player_speed.describe()","1b2a8e93":"punt_player_speed = get_punt_player_speed()\npunt_player_speed.shape\npunt_player_speed.head()\n\nvideo_info = get_video_review()\nvideo_info = video_info.merge(\n    punt_player_speed[['GSISID', 'PlayKey', 'MaxSpeed', 'MinAcceleration',\n                       'CollisionTime', 'CollisionX', 'CollisionY']],\n    on=['GSISID', 'PlayKey'],\n    how='left')\nvideo_info = video_info.merge(\n    punt_player_speed[['GSISID', 'PlayKey', 'MaxSpeed', 'MinAcceleration',\n                       'CollisionTime', 'CollisionX', 'CollisionY']],\n    left_on=['PrimaryPartnerGSISID', 'PlayKey'],\n    right_on=['GSISID', 'PlayKey'],\n    how='left',\n    suffixes=['', 'PrimaryPartner'])\nvideo_info['MaxMaxPSpeed'] = video_info[['MaxSpeed', 'MaxSpeedPrimaryPartner']].max(axis=1)\nvideo_info['MinMinAcc'] = video_info[\n    ['MinAcceleration', 'MinAccelerationPrimaryPartner']].min(axis=1)\nvideo_info.shape\nvideo_info.head()\nvideo_info.to_csv('video_info_collision.csv', index=False)\nvideo_info['Concussion'] = 1\n","11af7b03":"fig, ax = plt.subplots()\nsns.distplot(punt_player_speed.MaxSpeed, bins=20, kde_kws=dict(shade=True),\n             kde=True, color=C[1], ax=ax, label='MaxSpeed')\nplt.plot(video_info['MaxMaxPSpeed'].values, 0.01 * np.ones(len(video_info)),\n         'kx', alpha=0.8, markersize=10, lw=3, label='Injured player or partner max speed')\nplt.xlim(0, 12)\nplt.xticks(range(0, 12, 1))\nplt.legend(loc=0)\nplt.ylabel('Probability Density')\nplt.xlabel('Max Speed (m\/s)')\nplt.title('Player Max Speed Distribution')\nplt.grid()\nplt.show();\n","57af96c6":"fig, ax = plt.subplots()\nsns.distplot(punt_player_speed.MinAcceleration, bins=20, kde_kws=dict(shade=True),\n             kde=True, color=C[0], ax=ax, label='MinAcceleration')\nplt.plot(video_info['MinMinAcc'].values, 0.01 * np.ones(len(video_info)),\n         'kx', alpha=0.8, markersize=10, lw=3, label='Injured player or partner acceleration')\nplt.legend(loc=0)\nplt.ylabel('Probability Density')\nplt.xlabel('Min Acceleration (m\/s2)')\nplt.title('Player Acceleration Distribution')\nplt.grid()\nplt.show();\n","71f459ba":"play_acceleration = punt_player_speed.groupby('PlayKey')[['MinAcceleration']].min()\nplay_acceleration = play_acceleration.reset_index()\nplay_acceleration = play_acceleration.merge(video_info[['PlayKey', 'Concussion']],\n                                            on='PlayKey',\n                                            how='left')\nplay_acceleratiaon = play_acceleration.fillna(0)\nplay_acceleration['WorstCollisionId'] = np.digitize(-play_acceleration.MinAcceleration,\n                                                    bins=ACCELERATION_BINS)\nplay_acceleration['WorstCollision'] = play_acceleration['WorstCollisionId'].replace(\n    {1: 'Mild', 2: 'Medium', 3: 'Serious'})\n\nr = play_acceleration.groupby('WorstCollision')[['Concussion', 'MinAcceleration']].mean()\np = play_acceleration.groupby('WorstCollision')[['Concussion']].count()\nc = play_acceleration.groupby('WorstCollision')[['Concussion']].sum()\ncollisions = pd.concat([r, p, c], axis=1)\ncollisions.columns =['ConcussionRate', 'MinAcceleration', '#PuntPlays', '#Concussions']\ncollisions.sort_values(by='MinAcceleration')","24d053cb":"punts = pd.read_csv(os.path.join(EDA_DIR, 'punts.csv'))\npunts.shape\npunts.head()","3f255799":"punt_player_speed['SeriousCollision'] = 1 * punt_player_speed['Collision'] == 'Serious'\npunt_player_speed['MediumCollision'] = 1 * punt_player_speed['Collision'] == 'Medium'\nplay_collisions = punt_player_speed.groupby('PlayKey')[\n    ['SeriousCollision', 'MediumCollision']].sum()\nplay_collisions = play_collisions.merge(punts, on='PlayKey')\n\nc = play_collisions.groupby('PuntType')[['GameDate']].count()\ns = play_collisions.groupby('PuntType')[['SeriousCollision', 'MediumCollision']].sum()\nm = play_collisions.groupby('PuntType')[['SeriousCollision', 'MediumCollision']].mean()\n\npunt_type_collisions = pd.concat([c, s, m], axis=1)\npunt_type_collisions.columns = ['#Plays', '#SeriousCollision', '#MediumCollision',\n                                'SeriousCollision', 'MediumCollision']\npunt_type_collisions['#TotalCollisions'] = punt_type_collisions['#SeriousCollision'] + \\\n                                           punt_type_collisions['#MediumCollision']\npunt_type_collisions['TotalCollisions'] = punt_type_collisions['SeriousCollision'] + \\\n                                          punt_type_collisions['MediumCollision']\npunt_type_collisions = punt_type_collisions.sort_values(by='TotalCollisions', ascending=False)\npunt_type_collisions\npunt_type_collisions = punt_type_collisions[\n    ~punt_type_collisions.index.isin(['OTHER', 'NOPLAY'])]\npunt_type_collisions.sum()\n","612dad45":"data = [\n    go.Bar(\n        y=punt_type_collisions['MediumCollision'].values,\n        x=punt_type_collisions.index.values,\n        marker=dict(color=C[1]),\n        text=punt_type_collisions.index.values,\n        name='Medium'\n    ),\n    go.Bar(\n        y=punt_type_collisions['SeriousCollision'].values,\n        x=punt_type_collisions.index.values,\n        marker=dict(color=C[0]),\n        text=punt_type_collisions.index.values,\n        name='Serious'\n    ),\n]\nlayout = go.Layout(\n    title='Collisions per  punt play',\n    barmode='stack',\n    hovermode='closest',\n    xaxis=dict(title='Punt Type', ticklen=5, zeroline=False, gridwidth=2),\n    yaxis=dict(title='Average dangerous collision per punt', ticklen=5, gridwidth=2),\n    showlegend=True\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='PuntTypeCollisionBar')\n","a10b4c89":"data = [\n    go.Scatter(\n        y=punt_type_collisions['TotalCollisions'].values,\n        x=punt_type_collisions.index.values,\n        mode='markers',\n        marker=dict(sizemode='diameter',\n                    sizeref=1,\n                    size=np.sqrt(punt_type_collisions['#Plays'].values),\n                    color=punt_type_collisions['TotalCollisions'].values,\n                    colorscale='Viridis',\n                    reversescale=True,\n                    showscale=True\n                    ),\n        text=punt_type_collisions['#Plays'].values,\n    )\n]\nlayout = go.Layout(\n    autosize=True,\n    title='Collisions per punt play',\n    hovermode='closest',\n    xaxis=dict(title='Punt Type', ticklen=5, zeroline=False, gridwidth=2),\n    yaxis=dict(title='Average dangerous collisions per punt', ticklen=5, gridwidth=2),\n    showlegend=False\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='WeeklyTopTopics')\nwrite_image(fig, 'CollisionScatter.svg')\n","181b391b":"player_collisions = punt_player_speed.groupby(['ShortRole', 'PuntReturn'])[\n    ['SeriousCollision', 'MediumCollision']].mean()\nplayer_collisions['TotalCollisions'] = player_collisions['SeriousCollision'] + \\\n                                       player_collisions['MediumCollision']\nplayer_collisions = player_collisions.reset_index()\nplayer_collisions = player_collisions.sort_values(by=[\n    'PuntReturn', 'TotalCollisions'], ascending=False)\nplayer_collisions['color'] = player_collisions.PuntReturn.replace({True: C[1], False: C[0]})\nplayer_collisions\n","8a98ebbc":"data = [\n    go.Bar(\n        y=player_collisions['TotalCollisions'].values,\n        x=player_collisions.ShortRole.values,\n        marker=dict(color=player_collisions.color.values),\n        text=player_collisions.ShortRole.values,\n        name='Medium'\n    )]\nlayout = go.Layout(\n    title='Player Collisions',\n    barmode='stack',\n    hovermode='closest',\n    xaxis=dict(title='Punt Return and Punt Coverge Roles',\n               ticklen=5, zeroline=False, gridwidth=2),\n    yaxis=dict(title='Probablity of collision for each player', ticklen=5, gridwidth=2),\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='PlayerRoleCollisionBar')\nwrite_image(fig, 'PlayerRoleCollisionBar.svg')\n","fa655918":"collision_coords = punt_player_speed[punt_player_speed.Collision.isin(['Medium', 'Serious'])]\ncollision_coords = collision_coords[['CollisionX', 'CollisionY']].dropna()\ncollision_coords['CollisionX'] = collision_coords['CollisionX'].clip(0, 100)\ncollision_coords['CollisionY'] = collision_coords['CollisionY'].clip(0, 54)\ncollision_coords.shape\ncollision_coords.head(2)\ncollision_coords.describe()","2299bee7":"g = sns.jointplot(\"CollisionX\", \"CollisionY\", data=collision_coords,\n                  kind=\"kde\", space=0, color=C[1])\ng.ax_joint.plot(collision_coords.CollisionX, collision_coords.CollisionY, 'k+', alpha=0.1)\ng.ax_joint.set_xlim(0, 100)\ng.ax_joint.set_xticks(range(0, 101, 10))\ng.ax_joint.set_xticklabels(\n    ['GL', '10', '20', '30', '40', '50', '40', '30', '20', '10', 'GL'])\ng.ax_joint.set_ylim(-7, 60)\ng.ax_joint.set_yticks([0, 53.3])\ng.ax_joint.set_yticklabels(['Sideline', 'Sideline'])\ng.ax_joint.grid()\ng.fig.set_figheight(8)\ng.fig.set_figwidth(16)\ng.fig.savefig('CollisionCoords.svg')\nplt.show();\n","be39d19b":"playkey = '397_1526'\nngs = get_ngs(playkey)\nngs['PlayKey'] = playkey\nngs['x'] = ngs['x'] - 10\nngs['px'] = 244 + ngs['x'] \/ 100 * (1920 - 488)\nngs['py'] = 100 + (53.3 - ngs['y']) \/ 53.3 * (957 - 200)\np = punt_player_speed[['PlayKey', 'GSISID', 'ShortRole', 'PuntReturn',\n                       'CollisionX', 'CollisionY', 'MinAcceleration', 'Collision']]\nngs = ngs.merge(p, on=['PlayKey', 'GSISID'])\nngs = ngs[(ngs.t >= 8) & (ngs.t <= 17)]\n","484620ca":"rc('animation', html='jshtml', embed_limit=100)\nfig, c_ax = plt.subplots(1, 1, figsize=(20, 10))\nfield = mpimg.imread(os.path.join(EXT_DIR, 'field home1920.png'))\nc_ax.imshow(field)\nc_ax.axis('off')\nstep_count = 30\nstep_length = 10 * 1000 \/ step_count\ntime_steps = np.linspace(ngs['t'].min(), ngs['t'].max(), step_count + 1)\n\ndef update_frame(i):\n    n_rows = ngs[ngs['t'] <= time_steps[i + 1]]\n    n_rows = n_rows[n_rows['t'] > time_steps[i]]\n    for (player_id, punt_return_team, role), player_rows in n_rows.groupby(\n            ['GSISID', 'PuntReturn', 'ShortRole']):\n        player_rows = player_rows.sort_values('t')\n        color = C[0] if punt_return_team else C[-1]\n        alpha = 1. if player_id in (32894, 31763) else 0.2\n        c_ax.plot(player_rows['px'], player_rows['py'], color=color, alpha=alpha,\n                  label='_nolegend_', lw=2)\n\na = animation.FuncAnimation(fig, update_frame, range(step_count), interval=step_length)\nplt.close();\n","74a62f99":"HTML(a.to_jshtml())\n","3ac7ef9d":"HTML('''<video width=\"800\" height=\"450\" controls>\n  <source src=\"https:\/\/s3-eu-west-1.amazonaws.com\/nfl-punt-analytics\/BudapesPythonsFromRawDataToInsights.mp4\" type=\"video\/mp4\">\nYour browser does not support the video tag.<\/video>''')\n","092d7c96":"end = dt.datetime.now()\nprint('Latest run {}.\\nTotal time {}s'.format(end, (end - start).seconds))","3e912ee0":"# Animation","97f530ab":"![](https:\/\/s3-eu-west-1.amazonaws.com\/nfl-punt-analytics\/Speedacccollision.jpg)","b51c009b":"# Player Roles","b5b29e27":"# Player Speed and Acceleration\n\n*\u201cSpeed has never killed anyone. Suddenly becoming stationary, that's what gets you.\u201d*\n\n**\u2015 Jeremy Clarkson**\n\n","5c4b125b":"\n# References\n\n[1] https:\/\/nextgenstats.nfl.com\/stats\/top-plays\/fastest-ball-carriers\/2016\/all\n\n[2] https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/14519212\n\n[3] https:\/\/www.ncbi.nlm.nih.gov\/pmc\/articles\/PMC2943536\/\n\n[4] https:\/\/www.washingtonpost.com\/news\/early-lead\/wp\/2018\/01\/18\/a-new-study-shows-that-hits-to-the-head-not-concussions-cause-cte","c18bc6c5":"# Motivation\n\nWe have explored all the available datasets in our previous kernel. We would like to focus more on the NGS player movements as this is the most interesting part of dataset and it also requires some additional processing to derive insights.\n\n\n# Next Gen Stats\n\nNext Gen Stats (NGS) is processed by BIOCORE to produce player level data that describes the movement (speed and direction) of each player during a play.\n\nThe NGS data is in units of yards, which we converted to meters. All our reported speed calculations are in m\/s.\nThe processed dataset has 0.1s time resolution.\n\nPlease note that NFL athletes are surprisingly fast, they could reach 10 m\/s max velocity during the game [1]. This means that two consecutive records for the same player could be more than a yard away.\n\nKey findings that you need to be aware when using the Next Gen Stats data.\n\n* The actual punt play is just a subset of the ngs file.\n* We have all the player movements not just the players who play during punt event.\n* We have 0.1s time resolution which is fine for most usecases. Resampling or interpolation might be required to determine collisions.\n* We don't know the expected error range for the provided dataset.\n* Even with this granular data it is impossible to reconstruct exact collisions and estimate the impact on the head.\n\n\n# Medical Research\n\n**Concussion** is an acceleration\/deceleration injury resulting from biomechanical forces transmitted to the cerebral tissues from impacts to the head or torso. \n\nThanks to the increasing awareness there are plenty of available studies about concussions. \nWe found two studies [2], [3] that gave us useful ideas how to process the NGS data. The first study used a combination of video surveillance and laboratory reconstruction of game impacts to evaluate concussion biomechanics.\nThe second monitored all football related head impacts in high school athletes for years.\n\nBoth study had a chance to work with more precise (1000 Hz) head acceleration data. The actual impact took only 10 ms. [3] found that rotational acceleration (>5582.3 rad\/s2), linear acceleration (>96.1 g), and impact location (front, top, back) yielded the highest predictive value of concussion.\n\n**Be aware hidden code blocks!**\nMost of the source code is hidden by default to improve readability. Please click on the code buttons on the right if you would like to go deeper.","272584b7":"# Collisions\n\n*\"Football is not a contact sport, it's a collision sport - dancing is a contact sport.\"*\n\n**Vince Lombardi**\n\n\nUsing our acceleration measurements we are able to identify collisions as sudden decelerations. We used simple 10 m\/s2 threshold for Medium Collisions. It would mean that someone with full speed stops moving within a second. We used an additional 15 m\/s2 threshold for serious collisions. This is just a heuristic of course and a collision does not necessary lead to concussion. On the other hand any collision could cause injury or head trauma and recent studies also shown that subconcussive head injuries could lead to chronic traumatic encephalopathy as well [4].  ","6aa9e599":"# Collisions on the field","639b7f1d":"While the 100 ms temporal resolution is more than enough for most usecases (player position, speed). For accelaration calculation we need to differentiate the velocity. There is a natural trade-off in selecting time window for speed calculations. We found that using the lowest possible window (100 ms) gives noisy results while using 1 sec window would not allow us to locate the collsions accurately. Finally, we decided to use 300 ms smoothing window for our speed and acceleration calculations.\n\nPlease note that our acceleration measurements are not comparable with the above mentioned medical research measurements collected more precise (1000 Hz) accelerometer sensors."}}