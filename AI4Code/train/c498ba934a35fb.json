{"cell_type":{"3a3dbb2c":"code","6f9decff":"code","579eef40":"code","53198dc2":"code","a2fe5e1a":"code","c87d1f34":"code","8df578bb":"code","e625d4fc":"code","e87adc82":"code","48ed24a2":"code","627822b2":"code","00b8e0da":"code","6c51227b":"code","60fd90a3":"code","47e0978d":"code","34652d1a":"code","071faac7":"code","0d4c033b":"code","73d6c4ff":"code","a5fcca74":"code","b0a58516":"code","c8d1bfde":"code","64ac8383":"code","952906c4":"code","3af45417":"code","616ed4c8":"code","ddff2700":"code","d23f0f90":"code","21d972f4":"code","d970bc4e":"code","2bad44fb":"code","5c955247":"code","94fee5d0":"code","d09d1508":"code","aa59ce1b":"code","7e8f6773":"code","4b63dde8":"code","85cc77c7":"code","73e54605":"code","502e5cc5":"code","6f380290":"code","cfc2b10f":"code","a87927e5":"markdown","40782d6c":"markdown","8c856c26":"markdown","2dd6ce46":"markdown","503cead8":"markdown","5e23621e":"markdown","0a71cb8f":"markdown","d6af5bf7":"markdown","ce619a3c":"markdown","8d5c1a0b":"markdown","3eac3518":"markdown","749407fa":"markdown","182d80f3":"markdown","73010fac":"markdown"},"source":{"3a3dbb2c":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np \nimport pandas as pd \nimport os\nplt.style.use('seaborn-whitegrid')\nsns.set_style('whitegrid')\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6f9decff":"election_df=pd.read_csv('\/kaggle\/input\/indian-candidates-for-general-election-2019\/LS_2.0.csv')\nelection_df.head()","579eef40":"for i in election_df.columns:\n    x=i.lower().replace(' ','_').replace('\\n','_').replace('__','_')\n    election_df=election_df.rename(columns={i:x})","53198dc2":"election_df.info()","a2fe5e1a":"print('number of indian states: ',len(election_df['state'].unique()))","c87d1f34":"states=[]\nnum_constituency=[]\nfor i in election_df['state'].unique():\n    states.append(i)\n    num_constituency.append(len(election_df[election_df['state']==i]['constituency'].unique()))\nplt.figure(figsize=(20,8))\nplt.bar(x=states,height=num_constituency)\nplt.xlabel('states')\nplt.ylabel('number of constituencies')\nplt.title('number of constituencies in indian states in 2019')\nplt.xticks(rotation=90)\nplt.show()","8df578bb":"states=[]\nnum_candidates=[]\nfor i in election_df['state'].unique():\n    states.append(i)\n    num_candidates.append(len(election_df[election_df['state']==i]['name'].unique()))\nplt.figure(figsize=(20,8))\nplt.bar(x=states,height=num_candidates)\nplt.xlabel('states')\nplt.ylabel('number of candidates')\nplt.title('number of candidates in indian states in 2019')\nplt.xticks(rotation=90)\nplt.show()","e625d4fc":"plt.figure(figsize=(15,8))\nelection_df['winner'].value_counts().plot.pie(autopct='%.2f%%')\nplt.title('percentage of winners and losers')\nplt.ylabel('')\nplt.show()","e87adc82":"plt.figure(figsize=(20,8))\nsns.distplot(election_df['age'])\nplt.axvline(election_df['age'].mean(),color='red',label='mean')\nplt.axvline(election_df['age'].median(),color='blue',label='median')\nplt.axvline(election_df['age'].std(),color='green',label='std')\nplt.legend()\nplt.show()","48ed24a2":"print('number of parties: ',len(election_df['party'].unique()))","627822b2":"election_df['party'].value_counts()","00b8e0da":"plt.figure(figsize=(15,8))\nelection_df['gender'].value_counts().plot.pie(autopct='%.2f%%')\nplt.title('percentage of males and females')\nplt.ylabel('')\nplt.show()","6c51227b":"women_only=election_df[election_df['gender']=='FEMALE']\nwomen_only['winner'].value_counts().plot.bar()\nplt.show()","60fd90a3":"print('75 women succeded from ',str(len(women_only)))","47e0978d":"for i in women_only['state'].unique():\n    print('state is : ',i)\n    c=women_only[women_only['state']==i]\n    for j,k,z in zip(c['name'],c['winner'],c['constituency']):\n        if k==1:\n            print('winner woman: ',j,' constituency: ',z)","34652d1a":"election_df['education']=election_df['education'].str.replace('\\n','')","071faac7":"plt.figure(figsize=(15,8))\nelection_df['education'].value_counts().plot.pie(autopct='%.2f%%')\nplt.title('Percentage of each edcational level of the participants in 2019 election')\nplt.ylabel('')\nplt.show()","0d4c033b":"for i in election_df['education'].unique():\n    print('edcational level: ',i)\n    c=election_df[election_df['education']==i]\n    total=len(c)\n    winners=0\n    for j in c['winner']:\n        if j==1:\n            winners+=1\n    if total>0:\n        print(winners\/total)","73d6c4ff":"def change_val(x):\n    try:\n        c = (x.split('Rs')[1].split('\\n')[0].strip())\n        c_2 = ''\n        for i in c.split(\",\"):\n            c_2 = i+c_2\n        return c_2\n    except:\n        x = 0\n        return x\nelection_df['assets'] = election_df['assets'].apply(change_val).astype('int')\nelection_df['liabilities'] = election_df['liabilities'].apply(change_val).astype('int')","a5fcca74":"winner_only=election_df[election_df['winner']==1]\ncomp_dict={}\nfor i,j,k in zip(winner_only['name'],winner_only['assets'],winner_only['liabilities']):\n    comp_dict[i]=j-k\nprint(comp_dict)","b0a58516":"from sklearn.model_selection import train_test_split,GridSearchCV\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, MinMaxScaler\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nimport tensorflow as tf\nprint(\"We're using TF\", tf.__version__)\nimport keras\nprint(\"We are using Keras\", keras.__version__)\nfrom keras.layers import Dense, Activation\nfrom keras.models import Sequential\nfrom keras import backend as K","c8d1bfde":"x=election_df.drop('winner',axis=1)\ny=election_df['winner']\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=4)","64ac8383":"print(x_train.shape,y_train.shape)\nprint(x_test.shape,y_test.shape)","952906c4":"cols_to_remove=['name','general_votes','postal_votes','over_total_electors_in_constituency','over_total_votes_polled_in_constituency','total_electors']\nx_train=x_train.drop(cols_to_remove,axis=1)\nx_test=x_test.drop(cols_to_remove,axis=1)","3af45417":"def replacing(x):\n    if x=='Not Available':\n        x=x.replace('Not Available','0')\n        x=int(x)\n    else:\n        return x\n    return x\ndef convert_nan(x):\n    if x==0:\n        return np.nan\n    else:\n        return x \n    \nx_train['criminal_cases']=x_train['criminal_cases'].apply(replacing).apply(convert_nan)\nx_test['criminal_cases']=x_test['criminal_cases'].apply(replacing).apply(convert_nan)\nx_train['criminal_cases']=x_train['criminal_cases'].astype('float')\nx_test['criminal_cases']=x_test['criminal_cases'].astype('float')","616ed4c8":"for i,j in zip(x_train.columns,x_test.columns):\n    if x_train[i].dtype=='object':\n        x_train[i]=x_train[i].str.lower()\n    if x_test[j].dtype=='object':\n        x_test[j]=x_test[j].str.lower()","ddff2700":"x_train['age']=x_train['age'].fillna(x_train['age'].median())\nx_test['age']=x_test['age'].fillna(x_test['age'].median())\nx_train['symbol']=x_train['symbol'].fillna('Unknown')\nx_test['symbol']=x_test['symbol'].fillna('Unknown')","d23f0f90":"x_train['category']=x_train['category'].fillna('Unknown')\nx_test['category']=x_test['category'].fillna('Unknown')\nx_train['education']=x_train['education'].fillna('Not Available')\nx_test['education']=x_test['education'].fillna('Not Available')","21d972f4":"x_train['gender']=x_train['gender'].fillna('Unknown')\nx_test['gender']=x_test['gender'].fillna('Unknown')\nx_train['assets']=x_train['assets'].fillna(0)\nx_test['assets']=x_test['assets'].fillna(0)","d970bc4e":"x_train['liabilities']=x_train['liabilities'].fillna(0)\nx_test['liabilities']=x_test['liabilities'].fillna(0)\nx_train['criminal_cases']=x_train['criminal_cases'].fillna(0)\nx_test['criminal_cases']=x_test['criminal_cases'].fillna(0)","2bad44fb":"#Check categorical columns for cardinality\nfor i in x_train.columns:\n    if x_train[i].dtype=='object':\n        print(i,': ',str(len(x_train[i].unique())))","5c955247":"object_cols = [col for col in x_train.columns if x_train[col].dtype == \"object\"]\nnumeric_cols=[col for col in x_train.columns if x_train[col].dtype !='object']","94fee5d0":"low_card_cols = [col for col in object_cols if x_train[col].nunique() < 130]\nhigh_card_cols = list(set(object_cols)-set(low_card_cols))","d09d1508":"OH_encoder=OneHotEncoder(handle_unknown='ignore', sparse=False)\n\nOH_cols_train = pd.DataFrame(OH_encoder.fit_transform(x_train[low_card_cols]))\nOH_cols_test = pd.DataFrame(OH_encoder.transform(x_test[low_card_cols]))\nOH_cols_train.index = x_train.index\nOH_cols_test.index = x_test.index\nx_train = x_train.drop(low_card_cols, axis=1)\nx_test = x_test.drop(low_card_cols, axis=1)\n\n# Add one-hot encoded columns to numerical features\nx_train = pd.concat([x_train, OH_cols_train], axis=1)\nx_test = pd.concat([x_test, OH_cols_test], axis=1)","aa59ce1b":"good_label_cols=[i for i in high_card_cols if set(x_train[i])==set(x_test[i])]\nbad_label_cols=list(set(high_card_cols)-set(good_label_cols))","7e8f6773":"bad_label_cols","4b63dde8":"good_label_cols","85cc77c7":"x_train=x_train.drop('constituency',axis=1)\nx_test=x_test.drop('constituency',axis=1)","73e54605":"for i in numeric_cols:\n    x_train[i]=((x_train[i]-x_train[i].min())\/(x_train[i].max()-x_train[i].min()))\n    x_test[i]=((x_test[i]-x_test[i].min())\/(x_test[i].max()-x_test[i].min()))","502e5cc5":"def select_model():\n    models=[{\n        'name':'LogisticRegression',\n        'estimator':LogisticRegression(),\n        'hyperparameters':{\n            'solver':[\"newton-cg\", \"lbfgs\", \"liblinear\"]\n        }\n    },\n    {\n        'name':'KNeighborsClassifier',\n        'estimator':KNeighborsClassifier(),\n        'hyperparameters':{\n            \"n_neighbors\": range(1,20,2),\n            \"weights\": [\"distance\", \"uniform\"],\n            \"algorithm\": [\"ball_tree\", \"kd_tree\", \"brute\"],\n            \"p\": [1,2]\n        }\n    },\n    {\n        'name':'RandomForestClassifier',\n        'estimator':RandomForestClassifier(),\n        'hyperparameters':{\n            \"n_estimators\": [4, 6, 9],\n            \"criterion\": [\"entropy\", \"gini\"],\n            \"max_depth\": [2, 5, 10],\n            \"max_features\": [\"log2\", \"sqrt\"],\n            \"min_samples_leaf\": [1, 5, 8],\n            \"min_samples_split\": [2, 3, 5]\n        }\n    }\n        \n    ]\n    for i in models:\n        print(i['name'])\n        grid=GridSearchCV(i['estimator'],\n                          param_grid=i['hyperparameters'],\n                          cv=10,\n                          scoring='roc_auc')\n        grid.fit(x_train,y_train)\n        i[\"best_params\"] = grid.best_params_\n        i[\"best_score\"] = grid.best_score_\n        i[\"best_model\"] = grid.best_estimator_\n\n        print(\"Best Score: {}\".format(i[\"best_score\"]))\n        print(\"Best Parameters: {}\\n\".format(i[\"best_params\"]))\n\n    return models\n\nselect_model()","6f380290":"lr=LogisticRegression(solver='newton-cg')\nlr.fit(x_train,y_train)\npred=lr.predict(x_test)","cfc2b10f":"print('roc_auc_score is ',roc_auc_score(y_test,pred))","a87927e5":"<h1>Indian Candidates for General Election 2019 Analysis & Prediction of winning<\/h1>\n<img src='data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxAQEhAPEBAVDxUVFQ8QDxAPDw8PDw8PFRUWFhUWFRUYHSggGBolHRUVITEhJSktLi4uFx8zODMtNygtLisBCgoKDg0OFxAQGC0dHR0tLS0tKystLS0tLS0tLS0tLS0tLS0tLS0rLS0tLS0tLS0tLS0tLS0tLS0tKy0tLS0tLf\/AABEIALIBHAMBEQACEQEDEQH\/xAAbAAABBQEBAAAAAAAAAAAAAAABAAIDBAUGB\/\/EAEMQAAIBAgMEBgYHBwMEAwAAAAECAAMRBBIhBQYxQSJRYXGBkRMycqGxwQczQlJigtEUJEOSwuHwI1PxY4OishY0RP\/EABsBAQEBAQEBAQEAAAAAAAAAAAABAgMEBQYH\/8QAMBEBAAICAAUDAgUDBQEAAAAAAAECAxEEEiExQQUyURNhIoGRodEGcfAjQrHB4RT\/2gAMAwEAAhEDEQA\/AGifYfLGAYCgKAYAgRV8XSp29JVp0r8PSVEQnuBOsxfJWveW647W7QkoVkqDNTdag+9TdXXzBtLFot2lJrMd0oEqHCQHLCmFZUCEKAoBhQMIbKFAIgGQK8BXgKAoDbyggQH+ik2ujlp2k2ukqUpNrpKqzKnWkUCsor1Fm4lmTfRxs0rTTAwFAMBQFAUDV3XwKr+24jLSsEFWs9Wl6WoURDamhv0R0SefrTwcTXVtvZgtzRyuX2bhc1ari8gpekWmno0y5WIGb0htzOa1uztm+Gr05k4ievK1hPW8owDeArwGmECAoDoU0wgShQFAMgUoUgEBShQHrIqRGklUoAmWjgZArwHBoBBhTSIQLQM+dXMoBgKAoBkCgdZuQOjivZT+qeTifDvhc3j8OtLKaahVJrKVXQZ1qEn3Ms+Zk46\/C3jpusvu8N6dj43HPXV48\/yrU6gPDxHMd8+tw\/FYs8bpL5HFcBm4adZI\/PwfPQ8YQgwpQhQFAUAGAoAgGAoCgCUKQKUKQG8ArCpleZaPBkBMBXhRvAV4BgZ86OYwFAUAyBQDA6vcbhifZT+qeXifDvh8sLGrmp1\/wYkn8tRP1QT4nqdN44s\/Sei5OXLNfmGM1MG2YlT9lxoR4z4uPJak81Z1L9Pkx1yV5bRuDHxT0frRnX\/dQagfiX5jyn6Dg\/WIn8OX9X5rjf6fid24edfaf+pXKVVXAZSGHWJ9ymSt43WdvzGbBkw25b11J824lAUBQBAUBQFAUAQFAUAwBAMBQFeA8Qp4aTS7LPJpdiWgC5gSK8ijeBSnRzKQKUKAZAYCgdZuNwxPsp\/VPLxPh3w+WOoudoJ3VP5Cp+BM+dx1ebh5fW9PvycVX7sWoPGfl37eDFqldDqOV5dfCq1bZmpqYVvRt9pOCnvH+CenBxd8U73pxzYMWavLkrE\/3Q0dtFTkroUYcSB8ufhPv8P6rEx\/qR+cfw\/NcZ\/T3+7Bb8p\/lq0MQji6MGHZy7xyn1seWmSN1nb87n4bLgnlyVmEk6POVoCgCArQFAUBQFAUArAeFEipAgk2pxQSbXSFkmts6MvKFeAg0Gzw8i7Ozxo2YWjRs7OZNG0M2yUgUBQFAcIDrCFdVuOdMT7K\/wBU8nEeHbCysMv71XT74qp\/NTH6ThlrvBZ68N+XPSWDyvPx8xqdP6BWdxs11BHzHGSOjauLoRc6fZfmOw9k33NH1jTrdCsuvJrWI\/SK81etU7MnGbJq0TnpksOTKSGA8J6cXE6npOpZvipkry2iJj4k\/CbddejUGft0Vv0M+vh9UyV9\/wCL\/l8Lif6fwX6455J\/WGxhcfTqeqbH7raH+8+ni9QwZOm9T935\/ifRuKw9eXmj5jr\/AOrM9sTvs+XMTE6koQoCgHLAWWDRtoCEBQHgwohpNGz88i7LNAYVlNIzKyEA3gK8AXgHNChCFAMBQFAIgEQrrNx+GI9lf6p5OI8O2JlXy42\/\/US\/iAD8ZmI3imHWZ1esrGN3RfpGi4Yccj9E68geHwn5\/N6ZaZ5qTv7P03Det44iK5KzH3jqwcTgatHSrTZO0jo\/zDSfNyYcmOfxVmH28PFYs0fgtE\/58KrJcG2vWDOe3pV2w9xbUry+8ncersmosI1xFSh+NP8AOPVNarf+7Ojq2Ew+JF1sjeWvdEWvRd\/LGxmzatE6i45MP1norlrZdb7Fh8dVXhUPc3SHkZ3x5r4\/ZMw8ufg8OaP9SkS0KW2ag9ennHXSIB\/lM+hi9WyR0vET+3\/j4vEf07ht1xzNf3j+VqhtzDsbFzTPVUUr7+E+lj4\/Ffv0\/u+Ln9E4rH7Y5o+38d2pSIYXUhh1ggjzE9cWi0bidvl2x2pOrRMf3WFhAKCNmkdVJYlJhBNMlaAoDgYBzQoZoCzQbNMIUBQBAUAXgOgKAoCgKARAeJFdXuL\/APo7l+DTy8R4dsLF2gcuKY9T028rfpGOPwy1k7w7qgdJ547NpKYBBBF+w6gyzET3WJmJ3DK2juvhalyENI\/epaf+HA+U8WX0\/Dk8an7f5p9Lh\/V+JxdN80ff+e7m9obp10u1K1Yfg0e3sn5Ez5eb07LTrX8Ufu+7w3rWDJ0v+Gf2cxWDKSrKVOt0cEHyM8U1mOk9H163i0brO4UauGI6VO47L6r3dYnSL+JWU2Hxzjot0h1EXBmbUjvAixGzadXWkcjfcPA90tclq9J7N7+WRiMPUpmzKRPRW1bdkmvwrVKYfS4B5Zsw940850i0w5WqFBK1FgVZk19ZHBXxINrd860zTXrSdS45MFMscuSsTH3djsvE4gqC2WuPvUyFfy9VvAierH6zyzy5Y\/N8Xi\/QMdvxYbcv2ns1KVUNwPeCCGHeDPsYeIx5o3SdvzfE8Hm4e2sldffx+pOs7vLKApNbZ0FpQCIQoCgCAoCtAVoBywAVhdBCFAewhZNhCgKAYCgEQrrdxB9f3L8Gnk4jw7YWHtv6+p+X4S4e0rl8O4wzdEd088OizQgPMBguLkC\/WPmIEWMw1DELlqUlq9jL0h48Qe6c74qXjVo27YeIy4p3jtMOT2hughucO5Q\/7dU5l8G4+d587N6XE9cc6+z7fDeu3jpmrv7x3\/hzWP2LVp\/WUyv4hqv8wnzMnD5cXuj+H3cHHYM\/st1+O0qfoeseM4cz1wsFARlcZh28R4zO\/MG9M3F7GHrJr8Z1rmny10llnCsp4e75TvF4lJqiCVaR9LRJW3EDh5cxN81bdLJy6Wqe8lU+uAbfaUWYe+K4YpbmpMw5ZKVvXlmNxPhqbP28zXDJ6QD7VP6wDtp6X71n2MPqXLquX9X5vi\/QYtu2GdfaWxhsRTqjMjBhzsdVPURxB759bHlreN1nb85n4bLhty5K6OdJ124TCJpUCEK0BQEIDoUgJA4CFOyyKaUl2mjTTjZpNWSSFmEWWVnRZI2aNIlQIDssbXRFYHV7in6\/uX4NPJxHh2xMLbX19TlounhLg7SuXw7XZ7XRPZHwnn8y6LitlUnuhDWrHq8IU1at9P8AmUNdSNbXPXfXxgDNfjAQW+hF+3rghRxWwaFTjTHevRPunmycJhye6v8A09uH1DicXtvOvierPrbnUT6tWon8jr8j7547+lY59szH7vo4\/X80e+sT+zDxGyqdNsi4\/CO3D0bYmlSq36spPGeS\/peSPbMT+z6GL1zDb31mv7qm0diVlGZ6TKOTgB0\/mW4njvw+XF7qz\/n9n08HH4MvSt4n\/n9Jc5jcIy6+RFxFLxL2serhyTwHbwE9MXcrU8wbRspvcgjgV0175qesObZwuLSoQXvSqcFrUyFY+1ybuN5il8mGd45csuGmWvLeNpsbtLF4fpOiVqf+6l1P5rXC+Vp9TB6raek9f+Xxs\/oOC3tmaz+sI13soH1kqDuCsPO\/yn0K+o081mHy8voGWva8T+rSwO0qNa\/o2uRqVYFWt3HjPTi4nHknVZ6vm8RwGbBG7x0+YXDPQ8YQHAQCshAiRUiiFPkUoAvCHmRUTLNIZeVDTCGyoKmRUl5FdTuMv1\/cvwaebiPDtiYe3h\/rv3L85cHlc3h1Wx6ylaa5hmyKctxmtbjbjacJ7y01QNCOyQU3Yg\/5pKpjkjUeI6oEuHxV9Ce5v1hD69Ln7xwMKNHXTnAsLTMI802pXxO28ViMJh6jYbA4dmpYmtT1q4qupGamNQcvHh1X1uBMy7REVja6m52yKChBg6b2zsrVCarMSjtTOYnVSFcdWYW4gRqDcpcLu+KBzbKxL4Rg+X9nqM+JwVcmmtazU2a6DK\/FSLARo38pcMlHaGejVofsGMpgNWo3DKynQVEI0qUybjMNQRYzw8RwGPL1j8Nn0+E9WzcPqJnmr8T\/AC4\/b+71SixUrZuI+6461M+Pat8NuW8P13DcXi4mnNSf\/HL1cykqykdhFjO0amOjdoM1mnKYX8DtapS6J6a8Cra6TnbFE9Y6Sm\/lJiNlUaymph+ieLUTpr+Hq+HdFctqzq\/6pasa6I91sEzVPS3yinmVhaxLkeqe4fKfb9PxTa3P4h+a9Y4mKU+nru62faflzgJArQAIDwJFOziNKReDZZ4NmekjSbXAsxtompRsRGgJrmTSJ6Uu00YyzSGgwiQGRXWbj\/x+5fg08nEeHfEw9s\/\/AGag5ZUPvP8AaMM92svaHH7+m2JoEafu9CxBsR0n5zy390vPm7\/kbs\/ePG0R0MTUsPsu3pFt1Wa8zFpef6tqz0lt7L+kwBgmLSw4GrRBIHtJqfK\/dOkX+Xsx5JmOrvMHtGjiFFTD1UrL103DeBtwPYZqJh12kKniNOsSypLiXTj015j7SjrHWOyBqIKThSjDUAgXGvdCHhHX+8LDz76NjlwVclekcVjM+iqcwftZS1usNccOUzDpbux95tsCmaju7KqFWIyMGZi6kWuFzXcKSRYEqPxF63EI92NviqqtSZnH1TJZhVX1SR0QzAMBSBZQxsgC2JJAmHQ745kw67SpgU8RhMtVHag2HD4cevhyr9PKwPMcdQBJLEfDq8tDHYek9rpVRKtMj1lzKCCD16zlmwUzV5bOvD8Tk4fJzUlw2292KqkqafpVHqsq3Nu7iDPg5OCzYrfhiZj7P1\/D+rcPmpHNaKz8S5XE7DIJsGHYyyRe8e6s\/pL2RfHb22ifzhSOyqnV75r6seTl+7R2ZsZgc5JFuQ6u2cb5t9oaisR3lb2ZVGqkC5JuRzPDXwAn2fTeNik\/Tt2ns\/Oes+n2yR9WneO8NCfon5GTlMB0imEQh14DSZQLmAYAtA11ScNuglYVGyy7QwpLtDGo3l2TBhw3MS8yaRlJdpp1W4w+v7l+DTzcR4dsTD22bYmp7K\/EyYWsnaHG7\/fX0eyhQHvY\/OeXJ7pebNPWGaug1\/zSc3l8sdMCGOYOAb6i3Rt3zW3ecmo1pbQPTIZCabDgyMVPgRJtiL9dum2Nv7jqNlrFcSv\/AFRlqD\/uL8wZuLy7fXmHT4ff3CNY1FqYc8ww9IoPWHXl3gTUXh2rmrb7N3BV6OJ6eExCOeJCMrrfrKg3U\/5abiXXa\/Q2piaPRrWccM1vjGoGHtGsmC9NiqFBmpVX9LjsOgDujH1q+HVgVzcCykagXFiNZ2bid9JZuO2bSx9EYjDMuIo1QqkEmxLMERXtYCoXZBlVVyAMSSbCRuJ10llbG3YFO1OnRyKWzm96rOcoY2Bvey30sfUc5Wy2Ysy6TetKWF2XjnYKgNCpSUpTAzNVXIlinQcEsNQFsDewhiNzLe3JwBo4HBU3BDrQohxc3DZQSPC9vCVm3dr1kvz8x840kTpWNK5tbX\/OEy0acPfQjvgiU1OgtPVR38tJnTXNLnq2w6FZ3NRLMSxz0zkbs4aHxnPJwuPJ3jq9WHj8+HpW24+J6sLa+zhhzTUPnzU1e5tzJFu3hxn0OFiYpyzO9Pn8XeMl+aK8u1ACep5REgV4BEigRKgZZQICgbYE87qREBpWUNyxs0QSXaJAkztUdSjNRKab+5i2NYdi\/BpwzeHTG57eAfvL+z85cC5ezid+DfEKOqjhx7p5b+6Xmyz1\/JkeiL6ZrTDz80QmoYMLz7JGbZNn1rcND2Hh\/YwzCEUAfV8VPrD9RDXMjZSNOA5Hq7IaiVNsPlYVBdSNQyEqb9hGoM1t2rk+HQ7L3wx9MZUxJqjh6PFKK48z0vfLzTDX1bR3bmE+kh0stfCKes0ahUflVgbd2aai7rXPEqLY7AGq+K2djK2x69T61Ww\/pcNVPWVXMFPO\/ujmh2jPWekup3f3jxDXWq+zsQQEFOpQxVXDN0WLLmRkbW7Nwtx4TUTDXPSfK9R3Zxe0q9PEbSajTw9FzUoYHCVGqpUe4Iau+ga1uAAv2XNzXNER0d7YSuaq7cYETtzEaVKBfWZlVKsSt2Y5VHE8pFV9mVg5Zz0QVJ15AG36TSS5remuHqrb7NNU95Pznswdnny92OJ3chkAgFTAdCgRAaRCGyo27zzuxFoCvASwJAsypwEBFYG5uoutXuH9U5ZPDdXM7fX95b2PnN4e5kcJvcScSw4WWkvSFrdEfqJ5b+55c3SWR+2imOTdgYBvKYcfp80\/ArtVWGlx13FiI0fRmENSuT6pHjzhqKxHdewNMsOlxHCx1HjJLjkmI7LdSnyOvbDnE\/Cji0CgHlw4aDvMOtZmVJ0HGV1iU1Nr6G3jfWRJ6dTmpKOUJFpkBRvw07oOb5W8NWr0OlTrMh5FSUPmDG0i0eOjoMB9IO0KYyu4qfiqLnPjYgnzm4vLrGW9fO2zhPpKfhXw4YH7VGoV8lYG\/nNc7pHE\/MOgwG+GCrW\/1fRH7tYZLfm1X3yxaHWuek+XQUsULAowYHgwsQR85rW3aJZ+0cMzWYsX6r8B3dUjW1XEDMgXLbKQejzF+Y9\/hCS57a\/11QdRsJ7sPteXJ7lOdWBkAlBkBhREgeFvCjkjZpeDXnLTZ0ByiQPVZFSqJA60BWhW3usNavcPnOWRqrnttU74n8p+Ilxl+zNbZ1J9Xpq56S5mRScuY2Go4azdKxrrDF+ssnH7qYR9fR+jPXSYp7uHulnFSfDPZg43ci5\/0q9uyol7+Kn5TE8N8SRaFf8A+GYhdSfSDkKTKp83tOU4LwzM28RBzUa1BcowNc252V7nrupM5\/Sv8OE8Pe3WbQo1NruNHounYxsfJrTM1mD\/AObXlPRxSuNPI2kcppNVd6SqwIJC814jw\/SG4tuDXen9lx7LXH\/EixFvMJcNVBOpsO4tfxGkJasx2Xy6KL3Ejjq0qNXEITcknqHKV1iswheuOQtK3yyjp4gjtHMQs1hYSt4j3jvkYmF3AbYr4c5qNVqfMgHonvXgfGaiZhazNeztt3N\/87rRxQVcxCrVAsmY8Mw5d4903FtvVjzTPSzrMZXVEdh95VAOnK507pp6HKY581R26zcdx4T3Yva82TurzowMB9OneSZXSZcPM8y6H9mjmXlA4eOY0Ap2jaaGFSUzJIsKZmWkyySqRZkSCFIyIaTKNzdb+L3D4GcsjdGJtcfvA9lviJca2V6Y0E3WejE9wenNRLOkD4cTcWTRBCI2I6ksJKItyPlLpFWtg6TcaaHvRb+cTSs94ZnUsrH7v03B9GfRnqNyh8OInG\/DVn29GOSPDlsVhKtBwj0y1\/UI5\/msbieO+Oa9zUa6zoKuMqLpkI7yp8pjTEUrPlRxmJzevoO\/KZYh2pTXZntQvrSq3\/Dm198rvFtdLQbSxdVdGGbrB0MahZx0nsuHFgrcXB6jY+UmnH6epQjaTIdV8+cadJwRPldobSSp2HqJiYcLYbVOrNCVh6DuvvfQegtDGVRTdRlStU9V0HC78mtprxm4s9WO240nfaGHqOVpVqdUgXAp1FY5eHAH\/NZ6sF+uky16bOnrcBEgtUSJiWoWFMw0fCgwgQuJpEZlRIogTJMyqVTMyqVTMqkUyBMYDCZRu7qfxe4fAzlk8N0Y22B+8L7LRRqyvRPRXuBnSOznJxlQDKI2EqIKizcIidJYllEVmkJUvGzSLFYNailHUMDyPLtHUZmYi0akmHHbX2JiKN2plqyamwLekQd36TxZME16x1hnUfDicRgyWJLHtz5iwnJ7KZOmjFwR46+Cn52ja\/U8LmFpcS56rA6t4yS43n4LaDALpEGKJmWU3dabemAF+Pw0kWV\/C4y\/QqHTk3MSacL4\/MLPpCvRbUcAesQ5632aWxMMKNWlieOUk2W2qkWPuJ0lx5OW0Mzm\/wBsvR1YEAjUEAg9YM+pE7hzEQJaIuZJahdQWnOWzpFMYywiFmmkR5pUWgJho8SKkUyCRZJVIJATAYYG9usfrfD4GcsrdGNtu4xC+y0lWp7KyCwA6gB5TtEdHOe5FppkA0aBvAY4lhEBE0gBLxsPWnJtTaiSxKI8l5djNx2wqNc9NLH7y9Fv7znfFSzPK5vaH0fNctRqh\/w1WqJ5ML\/CeecE+Jda2mOjHxe7O0qQtTwgI+\/TanXbwvqPKc5xW8txSk9bTtze0MNiKZ\/eKdRDwvURkHhcW8pNadorEdlaxPK\/dCI6gIhuNFCL+BxKsBTq8PstzHYeyRyyUmPxVdTgKaomUMDxtn0HmLzEvm5LTNtzDqtgVg1FBmDFOg+U3AI4e4ifTwW3SHaJ6NGdhZw5tMWbhZBnNooVG81CIzKhhWXYtzCiDAkWRUqzKngyBXgAwN\/dX+J4fAzll7t0ZG8H1yfn+ElGpUmnohyky8qHCAryBNKGBYQoUTAiYyshKCqm8m1WUWZ2sJQJlQqUgwKsAwPFWAZT4GFYuM3TwFS+bCUh2ovoj5paZ5Kz4Xnt8sat9H+AJ0Sons1nI995fpVX6tkNX6OcEy5VNWm3J84b\/wASLSThqRllym2Po\/xdG7UiuJUck6NUD2TofAmc5xWjt1dK5az36Ofw2PdOg1zbSx0ZT1f2nHTN8UT1ekbk4Uphg541Gap+XRR8L+M9+CNVee\/fTftO7CSnMysJ6bzOmoSgzOlMYSoYRLAbaBLmjQQbWTQsIZlpIDICDIo3jQIMaHQ7q\/xPD4GccjdWPvEP9ZPz\/wDqZKNypMZ6IcEZlQbwBeFEGAYDTAUBhlQjAmpLMysJwJlTwJFIiUNaERMsqG2lDGWUc7tvdPCYkmo9Kzm93psUJPWbaE9pEzOOtmoyWg\/YuFalQoUn9ZaaK2t7MBqPlOtI1WIlzvO7TpdtNsAIEyLMzLSS8igWjQaYCgOvAIgTK0zMKfmkCzRpSzxpDleTSul3TOlTvHwnDL3boyd5PrU73\/8AUyUbnsz2M9EOISgMIQyUG8GxBgK0iiBAREBuWVFimJiVhMJFOkUIAMqGkQGMssBsIiqCagQMk1tnSKqk1EpKATTK2omGwYQIjeVCBgA3gSwCJA6FPEijIAJUESK6ndH1avePhPPl7ulGZvN9ZT7z8DM07uk9mbPS4FADQiOaQoBkD0kag6AZABKJaczKpRICYUIBgCBG0qImlREZUNM0IKssMoU4zaLS8JzaIwGSgNEBohH\/2Q=='>\n<h2>Description<\/h2>\n<p>With over 600 Million voters voting for 8500+ candidates across 543 constituencies, the general elections in the world's largest democracy are a potential goldmine of data. While there are existing separate datasets about the votes each candidate received and the personal information of each candidate, there was no comprehensive dataset that included both these information. Thus, this dataset will provide more usability than most existing datasets in this domain.<\/p>\n<h2>Inspiration of Dataset Author<\/h2>\n<p>There are 2 main tasks that can be performed on this dataset: Exploratory Data Analytics to visualize the impact of each feature of the candidate and the use of machine learning to predict the chances of winning of a candidate.<\/p>","40782d6c":"<p>the total number of parties registered was 2599, with 8 national parties, 53 state parties and 2538 unrecognised parties.<\/p>\n<a href='https:\/\/en.wikipedia.org\/wiki\/List_of_political_parties_in_India'>Wikipedia<\/a>","8c856c26":"<h1>Preprocessing & Feature Engineering<\/h1>","2dd6ce46":"<p>We can predict that as the number of constituencies increases, the Area and the density of citizens increase.<\/p>","503cead8":"<ul>\n    <li>number of states?,number of constituencies in each state?<\/li>\n    <li>number of candidates in each state<\/li>\n    <li>percentage of winners and losers<\/li>\n    <li>Age distribution of candidates<\/li>\n    <li>number of parties participate in the election<\/li>\n    <li>The percentage of participation of each party in each state<\/li>\n    <li>Percaentage of males and females in 2019 election<\/li>\n    <li>winner women in 2019 election<\/li>\n    <li>states that have women winners<\/li>\n    <li>Percentage of each edcational level of the participants in 2019 election<\/li>\n    <li>How many participant have a certain edcational level win, this question could give us an indicator if people in india choose participants who have higher educational background or not.<\/li>  \n    <li>Compare between assets and liabilities of the winners<\/li>","5e23621e":"<h1>Model Selection<\/h1>","0a71cb8f":"<h1>Data Cleaning<\/h1>","d6af5bf7":"<p>India is a federal union comprising 28 states and 8 union territories, for a total of 36 entities. The states and union territories are further subdivided into districts and smaller administrative divisions.<\/p>\n<a href='https:\/\/en.wikipedia.org\/wiki\/States_and_union_territories_of_India'>wikipedia<\/a>","ce619a3c":"<p>biggest 5 parties in 2019 election is BJP, INC, NOTA, IND, BSP<\/p>","8d5c1a0b":"<h1>Train and Predict<\/h1>","3eac3518":"<h2>Categorical Variables<\/h2>","749407fa":"<p>distribtion of ages approximately normal distribution<\/p>","182d80f3":"<h1>EDA<\/h1>","73010fac":"<p>We can say that most of winners have a higher edcational background, people loves those people.<\/p>  "}}