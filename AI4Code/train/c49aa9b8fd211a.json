{"cell_type":{"b0239d80":"code","32112105":"code","e4426a3c":"code","1bf42ffe":"code","6246e79b":"code","e65f22aa":"code","cca29203":"code","73c228d2":"code","1c0cdb72":"code","1c796b7d":"code","f2c009c2":"code","3d508c97":"code","16fc1a78":"code","6cc848fe":"code","fc754b30":"code","64ecee1b":"code","e534da41":"code","8c1fcf7a":"markdown","f0cad352":"markdown","ce24a640":"markdown","b9d9d882":"markdown","2c96433e":"markdown","2f6d7b92":"markdown","16865ddc":"markdown","b43bf7de":"markdown","e79c3f3d":"markdown","eeb6f3f9":"markdown","7c53ccdf":"markdown","e66bde9b":"markdown","7d906c3c":"markdown","e8dc99d2":"markdown","d31e70da":"markdown","92ad992f":"markdown","185d3dfb":"markdown"},"source":{"b0239d80":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","32112105":"import tensorflow as tf\nimport cv2 \nfrom keras.preprocessing.image import ImageDataGenerator\nimport matplotlib.pyplot as plt\nimport pandas as pd","e4426a3c":"plt.imshow(cv2.imread(\"\/kaggle\/input\/covid19-xray-dataset-train-test-sets\/xray_dataset_covid19\/train\/PNEUMONIA\/nejmoa2001191_f1-PA.jpeg\"))","1bf42ffe":"plt.imshow(cv2.imread(\"\/kaggle\/input\/covid19-xray-dataset-train-test-sets\/xray_dataset_covid19\/train\/NORMAL\/IM-0086-0001.jpeg\"))","6246e79b":"train_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True)\ntraining_set = train_datagen.flow_from_directory('\/kaggle\/input\/covid19-xray-dataset-train-test-sets\/xray_dataset_covid19\/train',\n                                                 target_size = (64, 64),\n                                                 batch_size = 32,\n                                                 class_mode = 'binary')","e65f22aa":"test_datagen = ImageDataGenerator(rescale = 1.\/255)\ntest_set = test_datagen.flow_from_directory(\n    \"\/kaggle\/input\/covid19-xray-dataset-train-test-sets\/xray_dataset_covid19\/test\", # same directory as training data\n    target_size=(64, 64),\n    batch_size=32,\n    class_mode='binary')","cca29203":"cnn = tf.keras.models.Sequential()","73c228d2":"cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu', input_shape=[64, 64, 3]))","1c0cdb72":"cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))","1c796b7d":"cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu'))\ncnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))","f2c009c2":"cnn.add(tf.keras.layers.Flatten())","3d508c97":"cnn.add(tf.keras.layers.Dense(units=128, activation='relu'))","16fc1a78":"cnn.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))","6cc848fe":"cnn.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])","fc754b30":"cnn.fit(x = training_set, validation_data = test_set, epochs = 25)","64ecee1b":"import numpy as np\nfrom keras.preprocessing import image\ntest_image = image.load_img('\/kaggle\/input\/covid19-xray-dataset-train-test-sets\/xray_dataset_covid19\/test\/PNEUMONIA\/streptococcus-pneumoniae-pneumonia-temporal-evolution-1-day2.jpg', target_size = (64, 64))\ntest_image = image.img_to_array(test_image)\ntest_image = np.expand_dims(test_image, axis = 0)\nresult = cnn.predict(test_image)\ntraining_set.class_indices\nif result[0][0] == 1:\n  prediction = 'covid risk'\nelse:\n  prediction = 'normal'","e534da41":"print(prediction)","8c1fcf7a":"**STEP-4 FULL CONNECTION**","f0cad352":"**PART-4 MAKING A SINGLE PREDICTION**","ce24a640":"**PREPROCESSING THE VALIDATION SET**","b9d9d882":"**TRAINING DATASET INTO TRAINING AND VALIDATION SET**","2c96433e":"**STEP-3 FLATTENING**","2f6d7b92":"**IMPORTING LIBRARIES**","16865ddc":"**STEP-1 CONVOLUTION**","b43bf7de":"**COMPILING THE CNN**","e79c3f3d":"**STEP-2 POOLING**","eeb6f3f9":"**TRAINING THE CNN ON THE TRAINING SET AND EVALUATING THE VALIDATION SET**","7c53ccdf":"**INITIALISING THE CNN**","e66bde9b":"**PART-2 BUILDING THE CNN**","7d906c3c":"**PART-3 TRAINING THE CNN**","e8dc99d2":"**CHECKING IMAGES FOR CONFIRMATION**","d31e70da":"**ADDING A SECOND CONVOLTION LAYER**","92ad992f":"**STEP-5 OUTPUT LAYER**","185d3dfb":"**PART-1 DATA PREPROCESSING**"}}