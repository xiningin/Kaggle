{"cell_type":{"75218907":"code","2cf6984f":"code","0be862d2":"code","b06f897a":"code","653e4ad9":"code","c720ab30":"code","77a91cff":"code","3f246e4b":"code","8b47b89d":"code","dba3fecf":"code","d77c0a37":"code","8a78f445":"code","4a844212":"code","a7e2a9e8":"code","d40d45aa":"code","8c012a52":"code","0157d957":"code","017d96c4":"code","abf1d023":"code","696b9c51":"code","fd67ec76":"code","40433e72":"code","4f05f28d":"code","f6d92955":"code","ef5b0450":"code","ac3b5942":"markdown","cb0b2319":"markdown","46a6ace9":"markdown","355f5ca8":"markdown","972db054":"markdown","f5c9eb98":"markdown","1d894fce":"markdown","0f1d282d":"markdown","df5b24eb":"markdown"},"source":{"75218907":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2cf6984f":"import fastai\nfastai.__version__ ","0be862d2":"from fastai import *\nfrom fastai.tabular.all import *\n\npd.options.display.max_rows = 20\npd.options.display.max_columns = None","b06f897a":"path = Path('\/kaggle\/input\/titanic-extended')","653e4ad9":"path.ls()","c720ab30":"df = pd.read_csv(path\/'train.csv', low_memory=False)\ndf_test = pd.read_csv(path\/'test.csv', low_memory=False)","77a91cff":"df","3f246e4b":"df = df.drop(columns=['WikiId','Body'])","8b47b89d":"procs = [Categorify, FillMissing] # RF does not need `Normalize`","dba3fecf":"splits = RandomSplitter(valid_pct=0.2)(range_of(df))","d77c0a37":"dep_var='Survived'","8a78f445":"cont,cat = cont_cat_split(df, 1, dep_var=dep_var)","4a844212":"cont","a7e2a9e8":"cat","d40d45aa":"to = TabularPandas(df, procs, cat, cont, y_names=dep_var, splits=splits, y_block=CategoryBlock())","8c012a52":"to.show(3)","0157d957":"X_train, y_train = to.train.xs,to.train.y\nX_valid, y_valid = to.valid.xs,to.valid.y","017d96c4":"from sklearn.ensemble import RandomForestClassifier\nm = RandomForestClassifier(n_estimators=100, n_jobs=-1)","abf1d023":"m.fit(X_train,y_train)","696b9c51":"from sklearn.metrics import accuracy_score","fd67ec76":"y_pred=m.predict(X_valid)","40433e72":"accuracy_score(y_valid, y_pred)","4f05f28d":"to_test = TabularPandas(df_test, procs, cat, cont)","f6d92955":"predicted_result = m.predict(to_test.xs.drop('Fare_na', axis=1)) # remove reduntant columns (training did not use this col)","ef5b0450":"output= pd.DataFrame({'PassengerId':df_test.PassengerId, 'Survived': predicted_result.astype(int)})\noutput.to_csv('submission_titanic.csv', index=False)\noutput.head()","ac3b5942":"# Test Dataset","cb0b2319":"## Create Training Set and Validation Set","46a6ace9":"Delete the 'WikiId', 'Body' coloumns to avoid possible data leakage","355f5ca8":"# Datasets Handling","972db054":"## Import library","f5c9eb98":"### Check fastai version","1d894fce":"# Random Forest Classifier Model","0f1d282d":"## Create TabularPandas","df5b24eb":"## Validate"}}