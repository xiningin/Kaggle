{"cell_type":{"c71f46dc":"code","f611f876":"code","48b3a574":"code","6a512a7e":"code","ef8f6a59":"code","7c73a326":"code","15097839":"code","1669f3b6":"code","4f605f49":"code","7196caf3":"code","b951c7e3":"code","daffc27f":"code","552c9d11":"code","c55073f1":"code","7b5264bd":"code","5e21f32e":"code","e45e5775":"code","4259c92b":"code","c5379306":"code","3bb5e3ac":"code","63f5a325":"code","bd1d8a1c":"code","290f1238":"code","6894dab1":"code","74305ec7":"code","7d270925":"code","bf51cde6":"code","0b5e78bf":"code","9cb62624":"code","708fa299":"code","c5004e7e":"code","427af623":"code","368b858b":"code","e11b5498":"code","18be6b29":"code","c28c977b":"code","5661aeec":"code","18cac3d5":"code","338f674d":"code","ff55cbaf":"code","1851467d":"code","77c45b5a":"code","6eb78378":"code","d89c25f9":"code","cd8b4002":"code","56fab2a7":"code","ace68862":"code","23a2c92d":"code","45758ada":"code","f8d50564":"markdown","38305d1c":"markdown","90365dda":"markdown","ba52c019":"markdown","c5fdd766":"markdown","385e8cf2":"markdown","78b54a9e":"markdown","32459248":"markdown","856b7e2b":"markdown","057bc65a":"markdown","5e6e3f04":"markdown","c51462f0":"markdown","93d18867":"markdown","c9630d45":"markdown","881a22b1":"markdown","cf5ce23c":"markdown","15b0c184":"markdown","c4484df7":"markdown","92e3beb2":"markdown","409f421a":"markdown","f2ca406e":"markdown","8de9b8a0":"markdown","edeff67c":"markdown","fc14f04c":"markdown","cc9bf4cc":"markdown","d37af522":"markdown","02f477dd":"markdown","d0af24b2":"markdown","c9170806":"markdown","a02d9b75":"markdown","9f20481a":"markdown","314a7756":"markdown","f4adf42d":"markdown","d94b2729":"markdown","4a9e3487":"markdown","ea89af32":"markdown","131e58d0":"markdown","74f857a6":"markdown","d35997af":"markdown","46a89980":"markdown","97cb6ee6":"markdown","98b562b0":"markdown","12fbd64b":"markdown"},"source":{"c71f46dc":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\npd.set_option('display.max_columns', None) \npd.set_option('display.max_rows', None)\npd.set_option('display.float_format', lambda x: '%.2f' % x)","f611f876":"df_2010_2011 = pd.read_excel(\"..\/input\/uci-online-retail-ii-data-set\/online_retail_II.xlsx\", sheet_name = \"Year 2010-2011\")\ndf = df_2010_2011.copy()","48b3a574":"df.head()","6a512a7e":"df[\"Description\"].nunique()\n","ef8f6a59":"df[\"Description\"].value_counts().head()","7c73a326":"df.groupby(\"Description\").agg({\"Quantity\":\"sum\"}).sort_values(\"Quantity\", ascending = False).head()","15097839":"df[\"Invoice\"].nunique()","1669f3b6":"df[\"TotalPrice\"] = df[\"Quantity\"]*df[\"Price\"]","4f605f49":"df.head()","7196caf3":"df.groupby(\"Description\").agg({\"Price\":\"max\"}).sort_values(\"Price\", ascending = False).head()","b951c7e3":"df.groupby(\"Country\").agg({\"TotalPrice\":\"sum\"}).sort_values(\"TotalPrice\", ascending = False).head()\n","daffc27f":"returned_product = df[df[\"Invoice\"].str.contains(\"C\",na=False)]\nreturned_product.sort_values(\"Quantity\", ascending = True).head()","552c9d11":"pure_df = df[~df[\"Invoice\"].str.contains(\"C\", na = False)]","c55073f1":"pure_df.head()","7b5264bd":"pure_df.isnull().sum()","5e21f32e":"pure_df.dropna(inplace = True)","e45e5775":"pure_df.isnull().sum()","4259c92b":"pure_df.describe([0.05,0.01,0.25,0.50,0.75,0.80,0.90,0.95,0.99]).T\n","c5379306":"def check_dataframe(dataframe):\n  \n    print(\"Data Frame Raws Lenght : \", dataframe.shape[0],\n          \"\\nData Frame Columns Lenght : \", dataframe.shape[1])\n\n    print(\"\\nData Frame Columns Names : \", list(dataframe.columns))\n\n    print(\"\\nIs data frame has null value? :\", dataframe.isnull().any())\n\n    print(\"\\nHow many missing values are in which columns? :\\n\", dataframe.isnull().sum())\n\n    cat_names = [col for col in dataframe.columns if dataframe[col].dtype == \"O\"]\n    num_names = [col for col in dataframe.columns if dataframe[col].dtype != \"O\"]\n\n    print(\"\\nHow many columns are in the object type? : \", len(cat_names), \"\\n\", cat_names)\n\n    print(\"\\nHow many columns are in the numerical type? : \", len(num_names), \"\\n\", num_names)","3bb5e3ac":"check_dataframe(pure_df)","63f5a325":"pure_df.info()","bd1d8a1c":"pure_df[\"InvoiceDate\"].min()","290f1238":"pure_df[\"InvoiceDate\"].max()","6894dab1":"import datetime as dt\ntoday_date = dt.datetime(2011,12,9)\ntoday_date","74305ec7":"pure_df.groupby(\"Customer ID\").agg({\"InvoiceDate\":\"max\"}).head()","7d270925":"pure_df[\"Customer ID\"] = pure_df[\"Customer ID\"].astype(int)\n","bf51cde6":"temp_df = (today_date - pure_df.groupby(\"Customer ID\").agg({\"InvoiceDate\":\"max\"}))\ntemp_df.head()","0b5e78bf":"temp_df.rename(columns={\"InvoiceDate\": \"Recency\"}, inplace = True)\ntemp_df.head()","9cb62624":"recency_df = temp_df[\"Recency\"].apply(lambda x: x.days)\nrecency_df.head()","708fa299":"freq_df = pure_df.groupby(\"Customer ID\").agg({\"Invoice\":\"count\"})\nfreq_df.rename(columns={\"Invoice\": \"Frequency\"}, inplace = True)\nfreq_df.head()","c5004e7e":"monetary_df = pure_df.groupby(\"Customer ID\").agg({\"TotalPrice\":\"sum\"})\nmonetary_df.rename(columns = {\"TotalPrice\": \"Monetary\"}, inplace = True)\nmonetary_df.head()","427af623":"print(recency_df.shape,freq_df.shape,monetary_df.shape)","368b858b":"rfm = pd.concat([recency_df, freq_df, monetary_df],  axis=1)\nrfm.head()","e11b5498":"rfm[\"RecencyScore\"] = pd.qcut(rfm[\"Recency\"], 5, labels = [5, 4 , 3, 2, 1])\n\nrfm[\"FrequencyScore\"]= pd.qcut(rfm[\"Frequency\"].rank(method=\"first\"),5, labels=[1,2,3,4,5])\n\nrfm[\"MonetaryScore\"] = pd.qcut(rfm['Monetary'], 5, labels = [1, 2, 3, 4, 5])\n\nrfm.head()","18be6b29":"rfm[\"RFM_SCORE\"] = (rfm['RecencyScore'].astype(str) + \nrfm['FrequencyScore'].astype(str) + \nrfm['MonetaryScore'].astype(str))\n\nrfm.head()","c28c977b":"rfm[rfm[\"RFM_SCORE\"]==\"555\"]\nrfm.head()","5661aeec":"rfm[rfm[\"RFM_SCORE\"]==\"555\"].head()","18cac3d5":"seg_map = {\n    r'[1-2][1-2]': 'Hibernating',\n    r'[1-2][3-4]': 'At Risk',\n    r'[1-2]5': 'Can\\'t Loose',\n    r'3[1-2]': 'About to Sleep',\n    r'33': 'Need Attention',\n    r'[3-4][4-5]': 'Loyal Customers',\n    r'41': 'Promising',\n    r'51': 'New Customers',\n    r'[4-5][2-3]': 'Potential Loyalists',\n    r'5[4-5]': 'Champions'\n}","338f674d":"rfm['Segment'] = rfm['RecencyScore'].astype(str) + rfm['FrequencyScore'].astype(str)\n\nrfm.head()","ff55cbaf":"rfm['Segment'] = rfm['Segment'].replace(seg_map, regex=True)\n\nrfm.head()","1851467d":"rfm[[\"Segment\",\"Recency\",\"Frequency\", \"Monetary\"]].groupby(\"Segment\").agg([\"mean\",\"median\",\"count\"])","77c45b5a":"new_customers = pd.DataFrame()\nnew_customers[\"NewCustomerID\"] = rfm[rfm[\"Segment\"] == \"New Customers\"].index  \nnew_customers.to_csv('new_customers.csv', index=False)                                  \nnew_customers.head()","6eb78378":"need_attention = pd.DataFrame()\nneed_attention[\"NeedAttentionID\"] = rfm[rfm[\"Segment\"] == \"Need Attention\"].index      \nneed_attention.to_csv('need_attentions.csv', index=False)                                  \nneed_attention.head()","d89c25f9":"champions = pd.DataFrame()\nchampions[\"ChampionsID\"] = rfm[rfm[\"Segment\"] == \"Champions\"].index      \nchampions.to_csv('champions.csv', index=False)                                   \nchampions.head()","cd8b4002":"rfm.groupby(\"Segment\")[\"Monetary\"].agg(\"mean\").head()","56fab2a7":"rfm.groupby(\"Segment\")[\"Monetary\"].sum()\n","ace68862":"rfm[rfm[\"Segment\"] == \"Champions\"][\"Monetary\"].sum()","23a2c92d":"champions = rfm[rfm[\"Segment\"] == \"Champions\"][\"Monetary\"].sum()\n\nneed_attentions = rfm[rfm[\"Segment\"] == \"Need Attention\"][\"Monetary\"].sum()\n\nnew_customers = rfm[rfm[\"Segment\"] == \"New Customers\"][\"Monetary\"].sum()\n\ntotal_amount = rfm[\"Monetary\"].sum()","45758ada":"print(\"Total Amount : \",total_amount)\nprint(\"Champions' expenditures: \",champions)\nprint(\"Need attention expenditures : \",need_attentions)\nprint(\"New customer expenditures: \",new_customers)","f8d50564":"**Data Understanding**","38305d1c":"The first purchase day","90365dda":"How much money  do we earn from countries?","ba52c019":"# RFM \n\n* **R**(ecency)\n    * The time from the last purchase of the customer to today        \n* **F**(requency)\n     * Total number of purchases\n* **M**(onetary)\n     *  The total expenditure made by the customer.","c5fdd766":"Lets see R-F-M together","385e8cf2":"If you want to look at the big picture and you know it means lots of thing because you have to decided which segment comes with the money! and which segment wants your campaign, coupon support! \n\nAs a e-commerce web-site, not only we need customer but also we need to loyal customers!","78b54a9e":"It is a technique that helps determine our customers' buying habits in marketing and sales strategies.\n* Recency Calculation = Today_date - last_purchase_data \n* Today day is based on maximum invoice date ","32459248":"How much unique number do we have?","856b7e2b":"We can use the new feature which is the defining as \"Segment\" to map our customers","057bc65a":"**This notebook has been created by e-commerce data analyst team. \nPlease, be sure for better understanding the notebook, you should the think and act like an e-commerce data analyst.**\n\n\nThere one different representation in this notebook which is beginning with the C- invoice number which is represents return product.\n","5e6e3f04":"Is there any missing data?","c51462f0":"# Frequency","93d18867":"More details","c9630d45":"Lets delete the returning invoices which is number starting with \"C\"","881a22b1":"Calculating Monetary from Totalprice","cf5ce23c":"The bills tell the truth","15b0c184":"The last purchase day.","c4484df7":"Let call InvoiceData to new Recency to better understanding.","92e3beb2":"The hour information does not require to calculate recency.","409f421a":"How much money do our e-commerce company have?","f2ca406e":"How looks like our data?","8de9b8a0":"# Monetary","edeff67c":"\nThe point that catches your attention here will be the Recency value. Because we will execute reverse scoring.\nThe one with low recency value is given 5 points, and the one with high recency value is given 1 point. (If you wonder why is that, please comment me under the notebook.) \n\nThe other two parameters will already increase the score values as the sales increase and the total money purchase increases.\n\n\n","fc14f04c":"The last purchase events with customer group by","cc9bf4cc":"There is a new guy end of our columns!","d37af522":"Be safe!","02f477dd":"Let them delete. This action causes negative effects but this time ignore it.","d0af24b2":"We mapped the our customers with Regular Expressions ","c9170806":"Who is our New Customer?","a02d9b75":"How many purchases did each customer make? When we are calcutating this invoice column rename as frequency.","9f20481a":"How much unique description do we have?","314a7756":"lets see who is the best customer!","f4adf42d":"Who is our NeedAttention customer?","d94b2729":"Finally, our Champions!","4a9e3487":"What is the returnable product? ","ea89af32":"This tells us \"best seller product\" ","131e58d0":"Deep dive into data","74f857a6":"Check the dataframe, Categorical? Numerical?","d35997af":"Added the new features, RecencyScore, FrequencyScore, MonetaryScore","46a89980":"# Recency ","97cb6ee6":"For analysis, set to max date time value is today_date. By doing this execution, we need datetime library import. ","98b562b0":"## **Data Preparation**","12fbd64b":"This tell us most valuable products"}}