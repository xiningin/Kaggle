{"cell_type":{"573a6a74":"code","1da2b842":"code","1797f8a8":"code","1cf6460c":"code","cef22b2d":"code","fa253c86":"code","aa2fb97d":"code","147702a1":"code","5a7d721d":"code","155320ac":"code","b256448e":"code","17585170":"code","82d416b2":"code","0c455aca":"code","db9a6b78":"code","6c58a1f0":"code","c9ba145f":"code","33997047":"code","69142325":"code","c16bbc54":"code","1bbf3966":"code","5ce4c07a":"markdown"},"source":{"573a6a74":"!pip install -q efficientnet","1da2b842":"import numpy as np\nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go\nfrom scipy import stats\nimport cv2\nimport glob\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.applications import MobileNetV2\nfrom keras.utils import to_categorical\nfrom keras.layers import Dense\nfrom keras import Model\nfrom keras.callbacks import ModelCheckpoint\nfrom keras.models import load_model\nfrom tensorflow.keras.applications.xception import Xception\nimport tensorflow as tf\nimport tensorflow.keras.layers as L\n\nimport tensorflow.keras.layers as L\nimport efficientnet.tfkeras as efn","1797f8a8":"train_df=pd.read_csv('..\/input\/landmark-recognition-2020\/train.csv')","1cf6460c":"landmark_count=pd.value_counts(train_df[\"landmark_id\"])\nlandmark_count=landmark_count.reset_index()\nlandmark_count.rename(columns={\"index\":'landmark_ids','landmark_id':'count'},inplace=True)\nlandmark_count","cef22b2d":"sample = landmark_count[0:50]\nsample.rename(columns={\"index\":'landmark_ids','landmark_id':'count'},inplace=True)\nsample.sort_values(by=['count'],ascending=False,inplace=True)\nsample['landmark_ids']=sample['landmark_ids'].map(str)\nsample.info()\nsample","fa253c86":"train_list = glob.glob('..\/input\/landmark-recognition-2020\/train\/*\/*\/*\/*')","aa2fb97d":"example = cv2.imread(train_list[10])\nplt.imshow(example)","147702a1":"train_df[\"filename\"] = train_df.id.str[0]+\"\/\"+train_df.id.str[1]+\"\/\"+train_df.id.str[2]+\"\/\"+train_df.id+\".jpg\"\ntrain_df[\"label\"] = train_df.landmark_id.astype(str)","5a7d721d":"from collections import Counter\n\nc = train_df.landmark_id.values\ncount = Counter(c).most_common(1000)\nprint(len(count), count[-1])","155320ac":"# only keep 3000 classes\nkeep_labels = [i[0] for i in count]\ntrain_keep = train_df[train_df.landmark_id.isin(keep_labels)]","b256448e":"val_rate = 0.2\nbatch_size = 32","17585170":"gen = ImageDataGenerator(validation_split=val_rate)\n\ntrain_gen = gen.flow_from_dataframe(\n    train_keep,\n    directory=\"\/kaggle\/input\/landmark-recognition-2020\/train\/\",\n    x_col=\"filename\",\n    y_col=\"label\",\n    weight_col=None,\n    target_size=(256, 256),\n    color_mode=\"rgb\",\n    classes=None,\n    class_mode=\"categorical\",\n    batch_size=batch_size,\n    shuffle=True,\n    subset=\"training\",\n    interpolation=\"nearest\",\n    validate_filenames=False)\n    \nval_gen = gen.flow_from_dataframe(\n    train_keep,\n    directory=\"\/kaggle\/input\/landmark-recognition-2020\/train\/\",\n    x_col=\"filename\",\n    y_col=\"label\",\n    weight_col=None,\n    target_size=(256, 256),\n    color_mode=\"rgb\",\n    classes=None,\n    class_mode=\"categorical\",\n    batch_size=batch_size,\n    shuffle=True,\n    subset=\"validation\",\n    interpolation=\"nearest\",\n    validate_filenames=False)","82d416b2":"model = tf.keras.Sequential([\n    efn.EfficientNetB2(\n        input_shape=(256, 256, 3),\n        weights='imagenet',\n        include_top=False\n    ),\n    L.GlobalAveragePooling2D(),\n    L.Dense(1000, activation='softmax')\n])\n\nmodel.compile(\n    optimizer='adam',\n    loss = 'categorical_crossentropy',\n    metrics=['categorical_accuracy']\n)","0c455aca":"# training parameters\nepochs = 5 # maximum number of epochs\ntrain_steps = int(len(train_keep)*(1-val_rate))\/\/batch_size\nval_steps = int(len(train_keep)*val_rate)\/\/batch_size\n\nmodel_checkpoint = ModelCheckpoint(\"model_efnB3.h5\", save_best_only=True, verbose=1)","db9a6b78":"history = model.fit_generator(train_gen, steps_per_epoch=train_steps, epochs=epochs,validation_data=val_gen, validation_steps=val_steps, callbacks=[model_checkpoint])\n\nmodel.save(\"model.h5\")","6c58a1f0":"sub = pd.read_csv(\"\/kaggle\/input\/landmark-recognition-2020\/sample_submission.csv\")\nsub[\"filename\"] = sub.id.str[0]+\"\/\"+sub.id.str[1]+\"\/\"+sub.id.str[2]+\"\/\"+sub.id+\".jpg\"\nsub","c9ba145f":"best_model = load_model(\"model_efnB3.h5\")\n\ntest_gen = ImageDataGenerator().flow_from_dataframe(\n    sub,\n    directory=\"\/kaggle\/input\/landmark-recognition-2020\/test\/\",\n    x_col=\"filename\",\n    y_col=None,\n    weight_col=None,\n    target_size=(256, 256),\n    color_mode=\"rgb\",\n    classes=None,\n    class_mode=None,\n    batch_size=1,\n    shuffle=True,\n    subset=None,\n    interpolation=\"nearest\",\n    validate_filenames=False)","33997047":"y_pred_one_hot = best_model.predict_generator(test_gen, verbose=1, steps=len(sub))","69142325":"y_pred = np.argmax(y_pred_one_hot, axis=-1)\ny_prob = np.max(y_pred_one_hot, axis=-1)\nprint(y_pred.shape, y_prob.shape)","c16bbc54":"y_uniq = np.unique(train_keep.landmark_id.values)\n\ny_pred = [y_uniq[Y] for Y in y_pred]","1bbf3966":"for i in range(len(sub)):\n    sub.loc[i, \"landmarks\"] = str(y_pred[i])+\" \"+str(y_prob[i])\nsub = sub.drop(columns=\"filename\")\nsub.to_csv(\"submission.csv\", index=False)\nsub","5ce4c07a":"### References\n\nhttps:\/\/www.kaggle.com\/socathie\/pre-trained-mobilenetv2-1000-classes-1-epoch\/output\n\nhttps:\/\/www.kaggle.com\/renjithrrkj\/land-mark\/notebook"}}