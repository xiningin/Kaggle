{"cell_type":{"e79ebdd2":"code","2a1dcfd1":"code","7fa8c8ed":"code","39044d83":"code","2098ac9f":"code","b81a092b":"code","42584727":"code","d342ca75":"code","17d13959":"code","2d527073":"code","acf68e74":"code","8c7af7e7":"code","337dbaa9":"code","f29b7899":"code","57b73806":"code","d75c571f":"code","053d6338":"code","c11c6d76":"code","1bd00a2b":"code","ba26d87f":"code","a39eb75c":"code","0b009d1e":"code","41b29c29":"code","5ad13fc3":"code","9a1160f4":"code","0e3cc0c6":"code","c617458b":"code","da4df313":"code","061c0f18":"code","b1a8088c":"code","01155f7b":"code","058a1e0f":"code","4a30d89a":"code","dc569168":"code","47e6fe71":"markdown","e3d55363":"markdown","4918db28":"markdown","63161109":"markdown","2e563b65":"markdown","0dd6433f":"markdown","59141ef8":"markdown","0cf8985d":"markdown","5955137c":"markdown","68a7f652":"markdown","2baeb054":"markdown","72f6f267":"markdown","e0ab4df7":"markdown","3e711454":"markdown","4a5940c8":"markdown","5622117b":"markdown","b7be2604":"markdown"},"source":{"e79ebdd2":"import pandas as pd\nimport numpy as np","2a1dcfd1":"df_credit = pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv')\ndf_credit.head()","7fa8c8ed":"df_credit.shape","39044d83":"df_credit.info()","2098ac9f":"df_movie = pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv')\ndf_movie.head()","b81a092b":"df_movie.shape","42584727":"df_movie.info()","d342ca75":"df_credit.columns = ['id', 'title', 'cast', 'crew']\ndf = df_movie.merge(df_credit, on='id')","17d13959":"df.head()","2d527073":"df.shape","acf68e74":"df.info()","8c7af7e7":"C = df['vote_average'].mean()\nC","337dbaa9":"m = df['vote_count'].quantile(0.9)\nm","f29b7899":"lists_movies = df.copy().loc[df['vote_count'] >= m]\nlists_movies.shape","57b73806":"lists_movies.head()","d75c571f":"def weighted_rating(x, m=m, C=C):\n    v = x['vote_count']\n    R = x['vote_average']\n    # Calculation based on the IMDB formulas (m=1838, c=6.09)\n    return (v\/(v+m) + (m\/(m+v) * C))","053d6338":"lists_movies['score'] = lists_movies.apply(weighted_rating, axis=1)","c11c6d76":"lists_movies.head(3)","1bd00a2b":"# Sort movies based on score calculated above\nlists_movies = lists_movies.sort_values('score', ascending=True)\n\n# Print top 10 movies\nlists_movies[['title_x', 'vote_count', 'vote_average', 'score']].head(10)","ba26d87f":"import matplotlib.pyplot as plt","a39eb75c":"pop = df.sort_values('popularity', ascending=False)\nplt.figure(figsize=(12,4))\nplt.barh(pop['title_x'].head(6), pop['popularity'].head(6), align='center', color='m')\nplt.gca().invert_yaxis()\nplt.xlabel(\"Popularity\")\nplt.title(\"Popular Movies\")","0b009d1e":"pop = df.sort_values('budget', ascending=False)\nplt.figure(figsize=(12,4))\nplt.barh(pop['title_x'].head(6), pop['budget'].head(6), align='center', color='r')\nplt.gca().invert_yaxis()\nplt.xlabel(\"Budget\")\nplt.title(\"High Budget Movies\")","41b29c29":"pop = df.sort_values('revenue', ascending=False)\nplt.figure(figsize=(12,4))\nplt.barh(pop['title_x'].head(6), pop['revenue'].head(6), align='center', color='b')\nplt.gca().invert_yaxis()\nplt.xlabel(\"Revenue\")\nplt.title(\"Based on Revenue Movies\")","5ad13fc3":"lists_movies.drop(['title_y'], axis=1, inplace=True)","9a1160f4":"lists_movies.shape","0e3cc0c6":"lists_movies.head(2)","c617458b":"df['overview'].head()","da4df313":"from sklearn.feature_extraction.text import TfidfVectorizer\n\n# Define a TF-IDF Vectorizer Object. Remove all english stop words such as 'the', 'a'\ntfidf = TfidfVectorizer(stop_words='english')\n\n# Replace NaN with an empty string\ndf['overview'] = df['overview'].fillna('')\n\n# Construct the required TF-IDF matrix by fitting and transforming the data\ntfidf_matrix = tfidf.fit_transform(df['overview'])\n\n# Output the shape of tfidf_matrix\ntfidf_matrix.shape","061c0f18":"# Import linear_kernel\nfrom sklearn.metrics.pairwise import linear_kernel\n\n# Compute the cosine similarity matrix\ncosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)","b1a8088c":"# Construct a reverse map of indices and movie titles\nindices = pd.Series(df.index, index=df['title_x']).drop_duplicates()","01155f7b":"# Function thtat takes in movie title as input and outputing the similar movies\ndef get_recommendations(title, cosine_sim=cosine_sim):\n    # Get the index of the movie that matches the thitle\n    idx = indices[title]\n    \n    # Get the pairwisesimilarity scores of all movies with that movies\n    sim_scores = list(enumerate(cosine_sim[idx]))\n    \n    # Sort the movies based on the similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x:x[1], reverse=True)\n    \n    # Get the scores of the 10 most similar movies\n    sim_scores = sim_scores[1:6]\n    \n    # Get the movie indices\n    movie_indices = [i[0] for i in sim_scores]\n    \n    # Return the top 5 most similar movies\n    return df['title_x'].iloc[movie_indices]","058a1e0f":"get_recommendations(\"Avatar\")","4a30d89a":"get_recommendations('Tears of the Sun')","dc569168":"get_recommendations('The Matrix')","47e6fe71":"## Import dataset","e3d55363":"## Defining function","4918db28":"## Sorting the movies","63161109":"## Minimum votes to be listed","2e563b65":"## Getting the list movies to be listed","0dd6433f":"## Import modules","59141ef8":"## Get the basic information","0cf8985d":"## Column overview","5955137c":"Define a new features 'score' and caclulate its value with `weighted_rating()`","68a7f652":"## Get Basic Information","2baeb054":"## Content-Based Recommendation System","72f6f267":"## Merge the two dataframes","e0ab4df7":"There are null value in homepage and tagline","3e711454":"## Movie Recommendation System\n\n[Priyanka Sharma](https:\/\/www.youtube.com\/watch?v=ZcDaULKAnJ8)","4a5940c8":"## Most Polular Movies","5622117b":"## Load second dataset: Movies Dataset","b7be2604":"Based on the description we can get the similarity among movies"}}