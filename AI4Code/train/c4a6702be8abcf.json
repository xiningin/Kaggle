{"cell_type":{"fdccc43f":"code","9703aeda":"code","4594ce6c":"code","49266102":"code","a26d57fa":"code","270b5533":"code","1b023fdf":"code","39472125":"code","58be59ba":"code","cf126a22":"code","a5ed3395":"code","421de608":"code","d84c59f1":"code","5a5cd002":"code","3ad624a4":"code","e81666b7":"code","4a907180":"code","e85c5bce":"code","6c74bee5":"code","05b501d6":"code","fee0ad94":"code","0978ca9e":"code","54ad195a":"code","f72ed360":"code","4f591866":"code","82ffd9fd":"code","1a8d2583":"code","dbafc577":"code","346c4a0c":"code","d8af5800":"code","2ded00e3":"code","f999d188":"code","76fb55e4":"markdown","cb33b265":"markdown","6ee618da":"markdown","6746e245":"markdown","f5c8fd57":"markdown","a459f715":"markdown","8ccc3421":"markdown","e4e66dba":"markdown","be18df8c":"markdown","9c9f689c":"markdown","5de8c8f3":"markdown","99ac1748":"markdown","7b1bfd2e":"markdown"},"source":{"fdccc43f":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom matplotlib import pyplot as plt\nplt.style.use('ggplot')\n\nimport seaborn as sns # for making plots with seaborn\ncolor = sns.color_palette()\nsns.set(rc={'figure.figsize':(25,15)})\n\nimport plotly\nplotly.offline.init_notebook_mode(connected=True)\n#connected=True means it will download the latest version of plotly javascript library.\nimport plotly.graph_objs as go\n\nimport plotly.figure_factory as ff\nimport cufflinks as cf\n\n\nimport warnings\nwarnings.filterwarnings('ignore')","9703aeda":"df=pd.read_csv(r'C:\\Users\\yadav\\Jupyter Projects\\Playstore App Reviews\\googleplaystore.csv')","4594ce6c":"df.head()","49266102":"#Total number of apps in the dataset\nprint('Number of apps in the dataset : ' , len(df))\ndf.sample(5)","a26d57fa":"df.shape","270b5533":"df.describe()                         # Summary Statistics","1b023fdf":"df.info()","39472125":"df.isnull()","58be59ba":"#Count the number of missing values in each column\ndf.isnull().sum()","cf126a22":"#Check how many ratings are more than 5 - Outliers\ndf[df.Rating > 5]","a5ed3395":"df.drop([10472],inplace=True)","421de608":"df[10470:10475]","d84c59f1":"threshold = len(df)* 0.1\nthreshold","5a5cd002":"df.dropna(thresh=threshold, axis=1, inplace=True)\n","3ad624a4":"df.isnull().sum()","e81666b7":"#Define a function impute_median \n#Fills the null values with median\ndef impute_median(series):\n    return series.fillna(series.median())","4a907180":"df.Rating = df['Rating'].transform(impute_median)","e85c5bce":"df.isnull().sum()","6c74bee5":"# modes of categorical values\nprint(df['Type'].mode())\nprint(df['Current Ver'].mode())\nprint(df['Android Ver'].mode())","05b501d6":"# Fill the missing categorical values with mode\ndf['Type'].fillna(str(df['Type'].mode().values[0]), inplace=True)\ndf['Current Ver'].fillna(str(df['Current Ver'].mode().values[0]), inplace=True)\ndf['Android Ver'].fillna(str(df['Android Ver'].mode().values[0]),inplace=True)","fee0ad94":"#Count the number of null values\ndf.isnull().sum()","0978ca9e":"# - Installs : Remove + and ,\n\ndf['Installs'] = df['Installs'].apply(lambda x: x.replace('+', '') if '+' in str(x) else x)\ndf['Installs'] = df['Installs'].apply(lambda x: x.replace(',', '') if ',' in str(x) else x)\ndf['Installs'] = df['Installs'].apply(lambda x: int(x))\n","54ad195a":"# - Size : Remove 'M','k',and divide by 10^3 \n\ndf['Size'] = df['Size'].apply(lambda x: str(x).replace('Varies with device', 'NaN') if 'Varies with device' in str(x) else x)\n\ndf['Size'] = df['Size'].apply(lambda x: str(x).replace('M', '') if 'M' in str(x) else x)\ndf['Size'] = df['Size'].apply(lambda x: str(x).replace(',', '') if 'M' in str(x) else x)\ndf['Size'] = df['Size'].apply(lambda x: float(str(x).replace('k', '')) \/ 1000 if 'k' in str(x) else x)\n\n\ndf['Size'] = df['Size'].apply(lambda x: float(x))\ndf['Installs'] = df['Installs'].apply(lambda x: float(x))\n\ndf['Price'] = df['Price'].apply(lambda x: str(x).replace('$', '') if '$' in str(x) else str(x))\ndf['Price'] = df['Price'].apply(lambda x: float(x))\n\ndf['Reviews'] = df['Reviews'].apply(lambda x: int(x))","f72ed360":"df.head()","4f591866":"number_of_apps_in_category = df['Category'].value_counts().sort_values(ascending=True)\n\ndata = [go.Pie(\n        labels = number_of_apps_in_category.index,\n        values = number_of_apps_in_category.values,\n        hoverinfo = 'label+value'\n    \n)]\n\nplotly.offline.iplot(data)","82ffd9fd":"grp = df.groupby('Category')\nx = grp['Rating'].agg(np.mean)\ny = grp['Price'].agg(np.sum)\nz = grp['Reviews'].agg(np.mean)\n#Grouping apps categorically and then getting mean of a particular type\n#of app's rating and total sum of price of a particular category and then plotting them.","1a8d2583":"plt.figure(figsize=(16,5))\nplt.plot(x,'ro', color='g')\nplt.xticks(rotation=90)\nplt.title('Category wise Rating')\nplt.xlabel('Categories-->')\nplt.ylabel('Rating-->')\nplt.show()","dbafc577":"plt.figure(figsize=(16,5))\nplt.plot(y,'r--', color='b')\nplt.xticks(rotation=90)\nplt.title('Category wise Pricing')\nplt.xlabel('Categories-->')\nplt.ylabel('Prices-->')\nplt.show()","346c4a0c":"plt.figure(figsize=(16,5))\nplt.plot(z,'bs', color='g')\nplt.xticks(rotation=90)\nplt.title('Category wise Reviews')\nplt.xlabel('Categories-->')\nplt.ylabel('Reviews-->')\nplt.show()","d8af5800":"data = [go.Histogram(\n        x = df.Rating,\n        xbins = {'start': 1, 'size': 0.1, 'end' :5}\n        \n)]\nlayout = {\"title\":\"Average rating\",\"xaxis\":{\"title\":\"abc\"}}\nprint('Average app rating = ', np.mean(df['Rating']))\nplotly.offline.iplot(data, filename='overall_rating_distribution')","2ded00e3":"paid_apps = df[df.Price>0]\np = sns.jointplot( \"Price\", \"Rating\", paid_apps)","f999d188":"trace0 = go.Box(\n    y=np.log10(df['Installs'][df.Type=='Paid']),\n    name = 'Paid',\n    marker = dict(\n        color = 'rgb(214, 12, 140)',\n    )\n\n)\ntrace1 = go.Box(\n    y=np.log10(df['Installs'][df.Type=='Free']),\n    name = 'Free',\n    marker = dict(\n        color = 'rgb(0, 128, 128)',\n    )\n)\nlayout = go.Layout(\n    title = \"Number of downloads of paid apps Vs free apps\",\n    yaxis= {'title': 'Number of downloads (log-scaled)'}\n)\ndata = [trace0, trace1]\nplotly.offline.iplot({'data': data, 'layout': layout})","76fb55e4":"__Convert all app sizes to MB__","cb33b265":"## Are paid apps downloaded as much as free apps?","6ee618da":"__1.Evidently,Family and Game apps have the highest market prevelance.__  \n__2.Tools, Business and Medical apps are also catching up.__","6746e245":"## Pricing Strategy - Free Vs Paid?\n__How do app prices impact app rating?__","f5c8fd57":"## Visualisation","a459f715":"Most top rated apps are optimally priced between 1dollar to 30dollar. There are only a very few apps priced above 40$","8ccc3421":"### Data Imputation and Manipulation\n__Fill the null values with appropriate values using aggregate functions such as mean, median or mode__","e4e66dba":"### __Data Cleaning__\n_Count the number of missing values in the Dataframe_\n","be18df8c":"### Android market breakdown\n__Which category has the highest share of (active) apps in the market?__","9c9f689c":"## Average rating of apps","5de8c8f3":"Paid apps have a relatively lower number of downloads than free apps,as expected.","99ac1748":"### __Remove columns that are 90% empty__","7b1bfd2e":"### __Data Cleaning__\n__Remove '+' from 'Number of Installs' to make it numeric__\n"}}