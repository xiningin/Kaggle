{"cell_type":{"bbb579ec":"code","73903939":"code","759dfac6":"code","a35488ff":"code","36e540fd":"code","b00ff8dd":"code","b87e1caa":"code","086844a1":"code","103d3399":"code","00fa77ed":"code","bfdbbcce":"code","44e0e763":"code","2d7536a1":"code","1949aad9":"code","3b5635d3":"code","e1d2b1f8":"code","2c20143c":"code","fea99b3c":"code","18690b73":"code","49b31985":"code","492398be":"code","44b2fd5b":"code","d3a802b8":"code","266bcf0e":"code","280205d2":"code","988b19d0":"code","b090d52c":"code","13434cff":"code","0e7909db":"code","a95de446":"code","31fa5e0b":"code","ed9fa0d6":"code","ab780816":"code","0c5638ee":"code","241692ea":"code","37cb1e71":"code","8161b77b":"code","9743d01d":"code","1a71b330":"code","e2650235":"code","636731b1":"code","79e9b16c":"code","7e732780":"code","a463bb92":"code","b6ee7f40":"code","e26da39a":"code","be72d59e":"code","a6ea187a":"code","6424e20a":"code","54a5d352":"code","f2fb3881":"code","3cd10774":"code","4ad51c47":"code","2e3ba81a":"code","32b8ebe6":"code","e554581d":"code","db8ebc84":"code","252dadef":"code","0e7619a7":"code","753eca3f":"code","c03712fe":"code","fa843db4":"code","e5992699":"code","07ac5487":"code","d5a67e5a":"code","a453a8f4":"code","d53ba8d2":"code","0f38f6ec":"code","9bda55c3":"code","234e3ff7":"markdown","643cb3b7":"markdown","d1e99ab8":"markdown","74a794ec":"markdown","dc921a62":"markdown","4b85c474":"markdown","3c362f1e":"markdown","0fd9797a":"markdown","34615baf":"markdown","f8e3da43":"markdown","0eea2a79":"markdown","6f09683a":"markdown","d81f50d9":"markdown","de7a68e1":"markdown","7bac46d0":"markdown","104ca5ff":"markdown","f8971ac1":"markdown","003142ea":"markdown","7e790fdb":"markdown","548fcd3f":"markdown","68342a58":"markdown","5f66bf74":"markdown","0a4307c5":"markdown","59aef93d":"markdown","ee07a1c3":"markdown","a6f5072d":"markdown","dbd59d19":"markdown","3437be7d":"markdown","9e0cb5cc":"markdown","896dab6c":"markdown","7f681833":"markdown","fbd15441":"markdown","c3e416f6":"markdown","47740e82":"markdown","ab2e321c":"markdown","6864c3bb":"markdown","f62d25bc":"markdown","9ba3f270":"markdown","f7b96212":"markdown","4dbf5e32":"markdown","0152a1bd":"markdown","e7ed27b4":"markdown","5a4c0b08":"markdown","927bd5d2":"markdown","874959e3":"markdown","277e37b7":"markdown","9b46206b":"markdown","dbe77807":"markdown","8506c4bb":"markdown","6aeb9763":"markdown","a5a6ad5c":"markdown","bcfd3de5":"markdown","1ad7b827":"markdown","15946319":"markdown","02284b79":"markdown","ae26b9bb":"markdown","a4693b7e":"markdown","f68dccd9":"markdown","a9248bfd":"markdown","73de9a49":"markdown","d89ee26d":"markdown","e28274d6":"markdown","2544f644":"markdown","72ad88d7":"markdown","19043fb9":"markdown","8defd52b":"markdown","c2068241":"markdown","e786d70c":"markdown","ccf2766e":"markdown","182c35ec":"markdown","446a5853":"markdown","bbf36f37":"markdown","f7be131b":"markdown","2865d4cf":"markdown","bbf843f9":"markdown","e513e047":"markdown","a4224cd5":"markdown","9899e928":"markdown","9b34eefb":"markdown","169bdc75":"markdown","7ceb2cde":"markdown","45eef0e5":"markdown","9aacbb80":"markdown"},"source":{"bbb579ec":"# the following are the important Package used for this EDA process\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom plotly.offline import init_notebook_mode, iplot\nfrom wordcloud import WordCloud\nimport plotly.graph_objs as go\nimport matplotlib.pyplot as plt\nimport plotly.plotly as py\nfrom plotly import tools\nfrom datetime import date\nimport seaborn as sns\nimport random \nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport matplotlib as matplot\n%matplotlib inline\nsns.set_style('whitegrid')\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\n#print(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","73903939":"application_train = pd.read_csv('..\/input\/application_train.csv')\napplication_test= pd.read_csv('..\/input\/application_test.csv')\nbureau = pd.read_csv('..\/input\/bureau.csv')\nbureau_balance = pd.read_csv('..\/input\/bureau_balance.csv')\nPOS_CASH_balance = pd.read_csv('..\/input\/POS_CASH_balance.csv')\ncredit_card_balance = pd.read_csv('..\/input\/credit_card_balance.csv')\nprevious_application = pd.read_csv('..\/input\/previous_application.csv')\ninstallments_payments = pd.read_csv('..\/input\/installments_payments.csv')","759dfac6":"print(\"The number of Features in application train dataset :\",application_train.shape[1])\nprint(\"The number of Rows in application Train dataset :\",application_train.shape[0])","a35488ff":"application_train.head()","36e540fd":"def type_features(data):\n    categorical_features = data.select_dtypes(include = [\"object\"]).columns\n    numerical_features = data.select_dtypes(exclude = [\"object\"]).columns\n    print( \"categorical_features :\",categorical_features)\n    print('-----'*40)\n    print(\"numerical_features:\",numerical_features)\n    \n","b00ff8dd":"type_features(application_train)","b87e1caa":"\ndef missingdata(data):\n    total = data.isnull().sum().sort_values(ascending = False)\n    percent = (data.isnull().sum()\/data.isnull().count()*100).sort_values(ascending = False)\n    ms=pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    ms= ms[ms[\"Percent\"] > 0]\n    f,ax =plt.subplots(figsize=(15,10))\n    plt.xticks(rotation='90')\n    fig=sns.barplot(ms.index, ms[\"Percent\"],color=\"green\",alpha=0.8)\n    plt.xlabel('Features', fontsize=15)\n    plt.ylabel('Percent of missing values', fontsize=15)\n    plt.title('Percent missing data by feature', fontsize=15)\n    #ms= ms[ms[\"Percent\"] > 0]\n    return ms","086844a1":"missingdata(application_test)","103d3399":"application_test.head(7)","00fa77ed":"print(\"the number columns in the application_test dataset\",application_test.shape[1])\nprint(\"the number rows in application_test dataset\",application_test.shape[0])","bfdbbcce":"type_features(application_test)","44e0e763":"missingdata(application_test)","2d7536a1":"bureau.head(6)","1949aad9":"print(\"The number of features is :\",bureau.shape[1],\"The number of row is:\",bureau.shape[0])","3b5635d3":"type_features(bureau)","e1d2b1f8":"missingdata(bureau)","2c20143c":"bureau_balance.head(7)","fea99b3c":"print(\"the number of columns\",bureau_balance.shape[1],\"the number of rows :\",bureau_balance.shape[0])","18690b73":"type_features(bureau_balance)","49b31985":"total = bureau_balance.isnull().sum().sort_values(ascending = False)\npercent = (bureau_balance.isnull().sum()\/bureau_balance.isnull().count()*100).sort_values(ascending = False)\nms=pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nms= ms[ms[\"Percent\"] > 0]\nms","492398be":"POS_CASH_balance.head(6)","44b2fd5b":"POS_CASH_balance.shape","d3a802b8":"type_features(POS_CASH_balance)","266bcf0e":"missingdata(POS_CASH_balance)","280205d2":"credit_card_balance.head()","988b19d0":"print(\"the number columns in dataset:\",credit_card_balance.shape[1],\"The number of rows:\",credit_card_balance.shape[0])","b090d52c":"type_features(credit_card_balance)","13434cff":"missingdata(credit_card_balance)","0e7909db":"previous_application.head(7)","a95de446":"type_features(previous_application)","31fa5e0b":"missingdata(previous_application)","ed9fa0d6":"installments_payments.head(7)","ab780816":"type_features(installments_payments)","0c5638ee":"missingdata(installments_payments)","241692ea":"f,ax=plt.subplots(1,2,figsize=(12,6))\napplication_train.TARGET.value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[0].set_title('Distribution of target variable')\nax[0].set_ylabel('')\nsns.countplot('TARGET',data=application_train,ax=ax[1])\nax[1].set_title('Count of Repayer VS defulter')\nplt.show()","37cb1e71":"def group_by(df,t1='',t2=''):\n    a1=df.groupby([t1,t2])[t2].count()\n    return a1","8161b77b":"def plot_re(df,t1='',t2=''):\n    f,ax=plt.subplots(1,2,figsize=(10,6))\n    df[[t1,t2]].groupby([t1]).count().plot.bar(ax=ax[0],color='Green')\n    ax[0].set_title('count of customer Based on'+t1)\n    sns.countplot(t1,hue=t2,data=df,ax=ax[1],palette=\"spring\")\n    ax[1].set_title(t1+': Repayer vs Defualter')\n    # Rotate x-labels\n    plt.xticks(rotation=-90)\n    a=plt.show()\n    return a","9743d01d":"plot_re(application_train,'NAME_EDUCATION_TYPE','TARGET')","1a71b330":"plot_re(application_train,'CODE_GENDER','TARGET')","e2650235":"plot_re(application_train,'NAME_INCOME_TYPE','TARGET')","636731b1":"plot_re(application_train,'OCCUPATION_TYPE','TARGET')","79e9b16c":"plot_re(application_train,'NAME_FAMILY_STATUS','TARGET')","7e732780":"plot_re(application_train,'NAME_HOUSING_TYPE','TARGET')","a463bb92":"plot_re(application_train,'NAME_TYPE_SUITE','TARGET')","b6ee7f40":"f, ax = plt.subplots(figsize=(20, 8))\n# Employee distri\n# Types of colors\ncolor_types = ['#78C850','#F08030','#6890F0','#A8B820','#A8A878','#A040A0','#F8D030',  \n                '#E0C068','#EE99AC','#C03028','#F85888','#B8A038','#705898','#98D8D8','#7038F8']\n\n# Count Plot (a.k.a. Bar Plot)\nsns.countplot(x='ORGANIZATION_TYPE', data=application_train, palette=color_types).set_title('count based on Organization type');\n \n# Rotate x-labels\nplt.xticks(rotation=-90)","e26da39a":"f, ax = plt.subplots(figsize=(15, 10))\nsns.countplot(y=\"ORGANIZATION_TYPE\", hue='TARGET', \n              data=application_train).set_title('REpayer VS Defaulter based on Organization type')","be72d59e":"plot_re(application_train,'FLAG_OWN_CAR','TARGET')","a6ea187a":"plot_re(application_train,'FLAG_OWN_REALTY','TARGET')","6424e20a":"plot_re(application_train,'NAME_CONTRACT_TYPE','TARGET')","54a5d352":"plot_re(application_train,'WEEKDAY_APPR_PROCESS_START','TARGET')","f2fb3881":"plot_re(application_train,'HOUSETYPE_MODE','TARGET')","3cd10774":"plot_re(application_train,'EMERGENCYSTATE_MODE','TARGET')","4ad51c47":"sns.set_style('whitegrid')\nf, ax = plt.subplots(3,1,figsize=(20,15))\n\n# Types of colors\ncolor_types = ['#78C850','#F08030','#6890F0','#A8B820','#A8A878','#A040A0','#F8D030',  \n                '#E0C068','#EE99AC','#C03028','#F85888','#B8A038','#705898','#98D8D8','#7038F8']\n\n# Count Plot (a.k.a. Bar Plot)\nsns.countplot(x='CNT_CHILDREN', data=application_train, ax=ax[0],palette=color_types).set_title('count based on Organization type');\nsns.countplot(\"CNT_CHILDREN\", hue='TARGET', \n              data=application_train,ax=ax[1]).set_title('REpayer VS Defaulter based on CNT_CHILDREN')\nax[2]=sns.kdeplot(application_train.loc[(application_train['TARGET'] == 0),'CNT_CHILDREN'] , color='b',shade=True,label='NON-PAYERS')\nax[2]=sns.kdeplot(application_train.loc[(application_train['TARGET'] == 1),'CNT_CHILDREN'] , color='r',shade=True, label='REPAYERS')\nax[2].set_title('Children count Distribution - Repayer V.S. Non Repayers')\n","2e3ba81a":"# Set up the matplotlib figure\nf, ax = plt.subplots(2,2, figsize=(15, 10))\n\n# Graph amt annutiy Satisfaction\nsns.distplot(application_test.AMT_ANNUITY.dropna(), kde=True, color=\"g\", ax=ax[0,0]).set_title('customer Amount Annual income Distribution')\n\n\n# Graph amt credit Evaluation\nsns.distplot(application_test.AMT_CREDIT.dropna(), kde=True, color=\"b\", ax=ax[0,1]).set_title('customer Amount credit Distribution')\n\n# Graph anaual GOOD PRICE  \nsns.distplot(application_test.AMT_GOODS_PRICE.dropna(), kde=True, color=\"r\", ax=ax[1,0]).set_title('customer GOOD PRICE Distribution')\n\n\nsns.distplot(application_test.AMT_INCOME_TOTAL.dropna(), kde=True, color=\"y\", ax=ax[1,1]).set_title('customer Amount Annual income Distribution')\n\n","32b8ebe6":"sns.set_style('whitegrid')\n# Set up the matplotlib figure\nf, ax = plt.subplots(2,2, figsize=(15, 10))\n\n# Graph amt annutiy Satisfaction\nsns.distplot(application_test.DAYS_BIRTH.dropna(), kde=True, color=\"g\", ax=ax[0,0]).set_title('customer Days birth Distribution')\n\nsns.distplot(application_test.DAYS_EMPLOYED.dropna(), kde=True, color=\"b\", ax=ax[0,1]).set_title('customer Employed Distribution')\n\nsns.distplot(application_test.DAYS_ID_PUBLISH.dropna(), kde=True, color=\"r\", ax=ax[1,0]).set_title('customer ID Publish Distribution')\n\n\nsns.distplot(application_test.DAYS_REGISTRATION.dropna(), kde=True, color=\"y\", ax=ax[1,1]).set_title('customer Days of Registration Distribution')\n","e554581d":"visual_dat= ['REGION_RATING_CLIENT',\n       'REGION_RATING_CLIENT_W_CITY', 'HOUR_APPR_PROCESS_START',\n       'REG_REGION_NOT_LIVE_REGION', 'REG_REGION_NOT_WORK_REGION',\n       'LIVE_REGION_NOT_WORK_REGION', 'REG_CITY_NOT_LIVE_CITY',\n       'REG_CITY_NOT_WORK_CITY', 'LIVE_CITY_NOT_WORK_CITY']\n\n\nfor i in visual_dat:\n    plt.figure(figsize = (10,5))\n    plt.subplot(1,3,1)\n    sns.countplot(application_train[i])\n    plt.subplot(1,3,2)\n    sns.countplot(application_train[i],hue=application_train['TARGET'],palette=\"spring\")\n    plt.subplot(1,3,3)\n    sns.distplot(application_train[i],bins= 20) \n    plt.title(i)\n    plt.xticks(rotation=-45)\n    plt.show()\n    \n","db8ebc84":"# Set up the matplotlib figure\nf, ax = plt.subplots(ncols=3,figsize=(10, 5))\n\n\nsns.distplot(application_test.EXT_SOURCE_1.dropna(), kde=True, color=\"g\", \n             ax=ax[0]).set_title('EXT source 1 Distribution')\n\n\n\nsns.distplot(application_test.EXT_SOURCE_2.dropna(), kde=True, color=\"b\",\n             ax=ax[1]).set_title(' EXT Source 2 Distribution')\n\n \nsns.distplot(application_test.EXT_SOURCE_3.dropna(), kde=True, \n             color=\"r\", ax=ax[2]).set_title('EXt Source 3 Distribution')\n\n\n","252dadef":"val_p=['APARTMENTS_AVG', 'BASEMENTAREA_AVG',\n       'YEARS_BEGINEXPLUATATION_AVG', 'YEARS_BUILD_AVG', 'COMMONAREA_AVG',\n       'ELEVATORS_AVG', 'ENTRANCES_AVG', 'FLOORSMAX_AVG', 'FLOORSMIN_AVG']\n#color_types = ['#78C850','#F08030','#6890F0','#A8B820','#A8A878','#A040A0','#F8D030',  \n #               '#E0C068','#EE99AC','#C03028','#F85888','#B8A038','#705898','#98D8D8','#7038F8']\nfor i in val_p:\n    plt.figure(figsize = (5,5))\n    sns.distplot(application_train[i].dropna(), kde=True, color='g')        \n    plt.title(i)\n    plt.xticks(rotation=-45)\n    plt.show()\n    ","0e7619a7":"#correlation heatmap of dataset\ndef correlation_heatmap(df):\n    _ , ax = plt.subplots(figsize =(20,15))\n    colormap = sns.diverging_palette(220, 10, as_cmap = True)\n    \n    _ = sns.heatmap(\n        df.corr(), \n        cmap = colormap,\n        square=True, \n        #cbar_kws={'shrink':.9 }, \n        #ax=ax,\n        #annot=True, \n        #linewidths=0.1,vmax=1.0, linecolor='white',\n        #annot_kws={'fontsize':16}\n    )\n    \n    plt.title('Pearson Correlation of Features')\n\ncorrelation_heatmap(application_train)\n\n","753eca3f":"# most correlated features\ncorrmat = application_train.corr()\ntop_corr_features = corrmat.index[abs(corrmat[\"TARGET\"])>=0.03]\nplt.figure(figsize=(20,10))\ng = sns.heatmap(application_train[top_corr_features].corr(),annot=True,cmap=\"Oranges\")","c03712fe":"ap_train=application_train\nbr_data=bureau","fa843db4":"print('Applicatoin train shape before merge: ', ap_train.shape)\nap_train = ap_train.merge(br_data, left_on='SK_ID_CURR', right_on='SK_ID_CURR', how='inner')\nprint('Applicatoin train shape after merge: ', ap_train.shape)","e5992699":"plot_re(ap_train,'CREDIT_ACTIVE','TARGET')","07ac5487":"plot_re(ap_train,'CREDIT_CURRENCY','TARGET')","d5a67e5a":"plot_re(ap_train,'CREDIT_TYPE','TARGET')","a453a8f4":"f, ax = plt.subplots(2,3,figsize=(13, 10))\n\n\nsns.distplot(bureau.DAYS_CREDIT.dropna(), kde=True, color=\"g\", \n             ax=ax[0,0]).set_title('DAYS CREDIT Distribution')\n\n\n\nsns.distplot(bureau.CREDIT_DAY_OVERDUE.dropna(), kde=True, color=\"b\",\n             ax=ax[0,1]).set_title(' CREDIT DAY OVERDUE Distribution')\n\n \nsns.distplot(bureau.DAYS_CREDIT_UPDATE.dropna(), kde=True, \n             color=\"r\", ax=ax[0,2]).set_title('DAYS CREDIT UPDATE Distribution')\n\nsns.distplot(bureau.AMT_CREDIT_SUM_LIMIT.dropna(), kde=True, color=\"g\", \n             ax=ax[1,0]).set_title(' Distribution')\n\n\n\nsns.distplot(bureau.AMT_CREDIT_SUM_DEBT.dropna(), kde=True, color=\"b\",\n             ax=ax[1,1]).set_title(' Distribution')\n\n \nsns.distplot(bureau.AMT_CREDIT_SUM_OVERDUE.dropna(), kde=True, \n             color=\"r\", ax=ax[1,2]).set_title('DAYS CREDIT UPDATE Distribution')\n","d53ba8d2":"\nf, ax = plt.subplots(figsize=(7,5))\n\n# Types of colors\ncolor_types = ['#78C850','#F08030','#6890F0','#A8B820','#A8A878','#A040A0','#F8D030',  \n                '#E0C068','#EE99AC','#C03028','#F85888','#B8A038','#705898','#98D8D8','#7038F8']\n\n# Count Plot (a.k.a. Bar Plot)\nsns.countplot(x='STATUS', data=bureau_balance,palette=color_types).set_title('count based on status type')\n","0f38f6ec":"f, ax = plt.subplots(5,3,figsize=(35,25))\n\n \n\nsns.countplot(previous_application.NAME_CONTRACT_TYPE.dropna(), palette='spring', \n             ax=ax[0,0]).set_title('Count Distribution')\n\n\n\nsns.countplot(previous_application.WEEKDAY_APPR_PROCESS_START.dropna(), palette='spring', \n             ax=ax[0,1]).set_title('Count Distribution')\n\n\n\nsns.countplot(previous_application.FLAG_LAST_APPL_PER_CONTRACT.dropna(), palette='spring', \n             ax=ax[0,2]).set_title('Count Distribution')\n\n\n\nsns.countplot(previous_application.NAME_CASH_LOAN_PURPOSE.dropna(), palette='spring', \n             ax=ax[1,0]).set_title('Count Distribution')\n\n\n\n \nsns.countplot(previous_application.NAME_CONTRACT_STATUS.dropna(), palette='spring', \n             ax=ax[1,1]).set_title('Count Distribution')\n\n\n\nsns.countplot(previous_application.NAME_PAYMENT_TYPE.dropna(), palette='spring', \n             ax=ax[1,2]).set_title('Count Distribution')\n\n\n\nsns.countplot(previous_application.CODE_REJECT_REASON.dropna(), palette='spring', \n             ax=ax[2,0]).set_title('Count Distribution')\n\n\n\nsns.countplot(previous_application.NAME_TYPE_SUITE.dropna(), palette='spring', \n             ax=ax[2,1]).set_title('Count Distribution')\n\n\n\nsns.countplot(previous_application.NAME_CLIENT_TYPE.dropna(), palette='spring', \n             ax=ax[2,2]).set_title('Count Distribution')\n\n\n\nsns.countplot(previous_application.NAME_GOODS_CATEGORY.dropna(), palette='spring', \n             ax=ax[3,0]).set_title('Count Distribution')\n\n\nsns.countplot(previous_application.NAME_PORTFOLIO.dropna(), palette='spring', \n             ax=ax[3,1]).set_title('Count Distribution')\n\n\nsns.countplot(previous_application.NAME_PRODUCT_TYPE.dropna(), palette='spring', \n             ax=ax[3,2]).set_title('Count Distribution')\n\n\n\nsns.countplot(previous_application.CHANNEL_TYPE.dropna(), palette='spring', \n             ax=ax[4,0]).set_title('Count Distribution')\n\n\n\nsns.countplot(previous_application.NAME_SELLER_INDUSTRY.dropna(), palette='spring', \n             ax=ax[4,1]).set_title('Count Distribution')\n\n\n\nsns.countplot(previous_application.NAME_YIELD_GROUP.dropna(), palette='spring', \n             ax=ax[4,2]).set_title('Count Distribution')\n\n\n\n\n,\n","9bda55c3":"val_p=['AMT_ANNUITY',\n       'AMT_CREDIT', 'AMT_GOODS_PRICE',\n       'HOUR_APPR_PROCESS_START']\n\nfor i in val_p:\n    plt.figure(figsize = (5,5))\n    sns.distplot(application_train[i].dropna(), kde=True, color='g')        \n    plt.title(i)\n    plt.xticks(rotation=-90)\n    plt.show()","234e3ff7":"### No missing data in Bureau Balance Dataset","643cb3b7":"### identifying the missing value in credit_card_balance dataset","d1e99ab8":"### its clear that  by looking at the above given plot and groupby function is clearly customer based Emergency state Mode and the customer has No  has high  count where not able to pay loan back compare to all other.","74a794ec":"### identifying the Catergical and numberical variables ","dc921a62":"### its clear that  by looking at the above given plot and groupby function is clearly customer based on owning car type and the customer with no car  has high  count where not able to pay loan back compare to all other.","4b85c474":"### its clear that  by looking at the above given plot and groupby function is clearly customer based application start on days and the customer registed  on tuesday  has high  count were not able to pay loan back compare to all other.\n\n### Analysis based House Type Mode","3c362f1e":"### identifying the Categerical and numerical Variable ","0fd9797a":"#### Analysis based on   REGION_RATING_CLIENT , REGION_RATING_CLIENT_W_CITY', HOUR_APPR_PROCESS_STAR',\n  REG_REGION_NOT_LIVE_REGION', 'REG_REGION_NOT_WORK_REGION',\n  LIVE_REGION_NOT_WORK_REGION', 'REG_CITY_NOT_LIVE_CITY\n REG_CITY_NOT_WORK_CITY', 'LIVE_CITY_NOT_WORK_CITY'","34615baf":"### its clear that  by looking at the above given plot and groupby function is clearly customer based on code gender type female  has high  count where not able to pay loan back compare to male.","f8e3da43":"### Analysis based on NAME_CONTRACT_TYPE","0eea2a79":"its clear that  by looking at the above given plots and groupby function is clearly customer based count of children and the customer with   has No  children has high  count and customer with more than  8   50% of non payer based on it own count where not able to pay loan back compare to all other.","6f09683a":"### EAD for bureau balance Dataset","d81f50d9":"### Exmaine the installments_payments dataset","de7a68e1":"### identifying the missing values","7bac46d0":"appliction_train & application_test\n\nThis is the main table, broken into two files for Train (with TARGET) and Test (without TARGET).\nStatic data for all applications. One row represents one loan in our data sample.\n\nbureau\n\nAll client's previous credits provided by other financial institutions that were reported to Credit Bureau (for clients who have a loan in our sample).\nFor every loan in our sample, there are as many rows as number of credits the client had in Credit Bureau before the application date.\n\nbureau_balance\n\nMonthly balances of previous credits in Credit Bureau.\nThis table has one row for each month of history of every previous credit reported to Credit Bureau \u2013 i.e the table has (#loans in sample * # of relative previous credits * # of months where we have some history observable for the previous credits) rows.\n\nPOS_CASH_balance\n\nMonthly balance snapshots of previous POS (point of sales) and cash loans that the applicant had with Home Credit.\nThis table has one row for each month of history of every previous credit in Home Credit (consumer credit and cash loans) related to loans in our sample \u2013 i.e. the table has (#loans in sample * # of relative previous credits * # of months in which we have some history observable for the previous credits) rows.\n\ncredit_card_balance\n\nMonthly balance snapshots of previous credit cards that the applicant has with Home Credit.\nThis table has one row for each month of history of every previous credit in Home Credit (consumer credit and cash loans) related to loans in our sample \u2013 i.e. the table has (#loans in sample * # of relative previous credit cards * # of months where we have some history observable for the previous credit card) rows.\n\nprevious_application\n\nAll previous applications for Home Credit loans of clients who have loans in our sample.\nThere is one row for each previous application related to loans in our data sample.\n\ninstallments_payments\n\nRepayment history for the previously disbursed credits in Home Credit related to the loans in our sample.\nThere is a) one row for every payment that was made plus b) one row each for missed payment.\nOne row is equivalent to one payment of one installment OR one installment corresponding to one payment of one previous Home Credit credit related to loans in our sample.\n\n","104ca5ff":"### Analysis based Averages values","f8971ac1":"### Analysis based on WEEKDAY_APPR_PROCESS_START","003142ea":"## Checking the Imbalance of Target Variable","7e790fdb":"### its clear that  by looking at the above given plot and groupby function is clearly customer based Housetype Mode and the customer registed  on Block of flats has high  count where not able to pay loan back compare to all other.","548fcd3f":"### identifying the missing value in installments_payments","68342a58":"### Analysis based on FLAG_OWN_REALTY","5f66bf74":"### if we see  the above given distrbution plot it clear say major distrbuiton  for amouth annuity is from 0 to 75000 and amount of anual income is from 0 to 1000000","0a4307c5":" ##  **Introducation**\n\nHome Credit strives to broaden financial inclusion for the unbanked population by providing a positive and safe borrowing experience. In order to make sure this underserved population has a positive loan experience, Home Credit makes use of a variety of alternative data--including telco and transactional information--to predict their clients' repayment abilities.\n\nWhile Home Credit is currently using various statistical and machine learning methods to make these predictions, they're challenging Kagglers to help them unlock the full potential of their data. Doing so will ensure that clients capable of repayment are not rejected and that loans are given with a principal, maturity, and repayment calendar that will empower their clients to be successful.\n","59aef93d":"### its clear that  by looking at the above given plot and groupby function is clearly customer based on Organization type and the Business type 3 customer  has high  count where not able to pay loan back compare to all other.","ee07a1c3":"It is evident that  many customer are able to pay the loan back i.e Only 91.9% of the total customer are repaying the loan.\nWe need to drill down more to get better insights from the data and see which categories of the customer are not able to pay back loan.\n\nWe will try to check the repayer and defualter rate by using the different features of the dataset. \nSome of the features being Gender,Education,Employment_type,etc. First let us understand the different types of features.","a6f5072d":"### identifying the catergical and numnerical features  ","dbd59d19":"### Examine the credit_card_balance dataset","3437be7d":"### Analysis Based on CREDIT ACTIVE, CREDIT_CURRENCY, CREDIT TYPE","9e0cb5cc":"## Data Description","896dab6c":"### Exmaine the bureau_balance DataSet","7f681833":"### Identifying Numerical and Categorical Features","fbd15441":"### its clear that  by looking at the above given plot and groupby function is clearly customer based on Housing type and the house type customer  has high  count where not able to pay loan back compare to all other.","c3e416f6":"## EDA of Bureau Data\n\nAll client's previous credits provided by other financial institutions that were reported to Credit Bureau (for clients who have a loan in our sample). For every loan in our sample, there are as many rows as number of credits the client had in Credit Bureau before the application date.","47740e82":"### Let us Examine application_test data set","ab2e321c":"### Analysis based on INCOME TYPE","6864c3bb":"## Exmaine the POS_CASH_balance DataSet","f62d25bc":"## Types Of Features\n\n### Categorical Features:\nA categorical variable is one that has two or more categories and each value in that feature can be categorised by them.For example, \nName Education Type is a categorical variable having Five categories. Now we cannot sort or give any ordering to such variables. They are also known as Nominal Variables.\n\nCategorical Features in the dataset: Education_type,occupation_type,Contract_type\n\n### Analysing The Features\n***Eduaction-----> Categorical Feature***","9ba3f270":"### identifying the missing value in bureau_balance","f7b96212":"### Checking the  Correlation Between The Features for Application Train Dataset","4dbf5e32":"### ANALYSIS THE NUMBERICAL FEATURES \n\n\n#### ANALYZSIS BASED ON  COUNT CHILDREN ","0152a1bd":"### Let Exmaine bureau dataset","e7ed27b4":"### EDA for previous application dataset","5a4c0b08":"![image.png](attachment:image.png)","927bd5d2":"### By looking at the above given we can clear get id of which loan Repayer vs NOn Payer  all features list in above plot","874959e3":"### identifying the Catergical and numerical variables ","277e37b7":"### Analysis based on OCCUPATION TYPE","9b46206b":"### Analysis based on TYPE SUITE","dbe77807":"### its clear that  by looking at the above given plot and groupby function is clearly customer based on code income type and the working  has high  count where not able to pay loan back compare to all other","8506c4bb":"### identying the missing data","6aeb9763":"### By looking at the above given plot its clear that which types has high count in each feature so we can easy out the root cause of the problem.","a5a6ad5c":"### Analysis Based on EMERGENCYSTATE MODE ","bcfd3de5":"## Analysis based on Code  Gender ","1ad7b827":"### Analysis Based on FAMILY STATUS","15946319":"### ABOVE given plots show distributions","02284b79":"### identifying the categerical and numerical Variable ","ae26b9bb":"\n### Analysis based HOUSING TYPE","a4693b7e":"### the proof is  edvined by looking at the above given plot and groupby function is clearly customer with education of secondary\/secondary special has high  count where not able to pay loan back.","f68dccd9":"### The above given figure which clear say about the which features has missing value and precentage of missing value avaiable in application_train DataSet","a9248bfd":" ## Importing The Dataset","73de9a49":"### its clear that  by looking at the above given plot and groupby function is clearly customer based on owning Reality type and the customer has Reality  has high  count where not able to pay loan back compare to all other.","d89ee26d":"### Exmaine the previous_application Dataset","e28274d6":"### Identifying Missing Value Present in Application Train Dataset","2544f644":"### analyzing the numerical features disturbion in previous application dataset","72ad88d7":"### BASED on above  given plot it clear that the Credit type consumer credit has high count of non payer of loan and credit currency customer with currency 1 has high count of non payer and based credit active customer with in group of closed customer has high count of non payer","19043fb9":"### If look at the above given plot is clear that all AVG featuers are high correleted values by seeing this plot we can easy find out the coorelated features","8defd52b":"## those are few EAD i have done please  vote for me which help my movitvation to increase to do a lot of work if there any imporvment can be done means please say in comments References This notebook has been created based on great work done solving the House Credit defult Risk competition and other sources.","c2068241":"### Merging the bureau dataset along with application train dataset to do more analysis","e786d70c":"2. ### Number of records and Features in the datasets\n2.1. ** Let Examine the Applaication Train DataSet**","ccf2766e":"### identifying the missing value in previous_application","182c35ec":"if we look at the above plot it is clear that customer register in city but not work in city based analysis we know that customer not city has high count.","446a5853":"### based  type its clear that status c, o,x has high count in bureau balnace dataset","bbf36f37":"1. 1. ### Analysis Based on EXter Source Types","f7be131b":"### Analysis Based on ORGANIZATION TYPE","2865d4cf":"### identifying the missing values","bbf843f9":"### its clear that  by looking at the above given plot and groupby function is clearly customer based on Suite type and the unaccompanied customer  has high  count where not able to pay loan back compare to all other.","e513e047":" ### identifying the catergical and numerical variable in previous application Data set.","a4224cd5":"## identifying Catergical and numerical variables","9899e928":"### its clear that  by looking at the above given plot and groupby function is clearly customer based on code Family type and the Married customer  has high  count where not able to pay loan back compare to all other.","9b34eefb":"### its clear that  by looking at the above given plot and groupby function is clearly customer based on Contract type and the customer with cash loans  has high  count where not able to pay loan back compare to all other.","169bdc75":"###  Function for  find out Numerical and categeical Variables","7ceb2cde":"#### **By see above given two  corelation plot  we can easy find out  the most corelated featuers along with they corelated values.  and all kind of analysis are done for the application train dataset.","45eef0e5":"### Analysis based on FLAG OWN CAR","9aacbb80":"###  its clear that  by looking at the above given plot and groupby function is clearly customer based on occupation  type. the working  has high  count where not able to pay loan back compare to all other."}}