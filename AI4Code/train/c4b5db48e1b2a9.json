{"cell_type":{"d1143d6d":"code","f7efa465":"code","1c2bc225":"code","b8effee9":"code","b86fa966":"code","9df9125a":"code","fec2a935":"code","b71a6e5c":"code","a626bbaf":"code","be71e3a1":"code","47c60d42":"code","93558ede":"code","61c4daa7":"code","a6d75460":"code","cd3e4350":"code","e8b009d2":"code","3aa21df0":"code","3eee3412":"code","a5b4fe9c":"code","376dc4a6":"code","103680b7":"code","6ba7653e":"code","6e950e39":"code","81668aac":"code","eff88a56":"code","0deedb15":"code","ecb0acf0":"code","e207f941":"code","4f070844":"code","ee2a9a72":"code","268b77c0":"code","19df7a44":"markdown","8ceffe93":"markdown","0e93db31":"markdown","95846bbd":"markdown","dbe85e04":"markdown","a3504828":"markdown","759ec2dd":"markdown","0e364520":"markdown"},"source":{"d1143d6d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n22\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f7efa465":"pd.options.display.float_format = '{:,.10f}'.format\npath = '\/kaggle\/input\/competicao-dsa-machine-learning-dec-2019\/'\n\n\ndftreino = pd.read_csv(path + 'dataset_treino.csv')\ndftreino.head()","1c2bc225":"dfteste = pd.read_csv(path + 'dataset_teste.csv')\ndfteste.head()","b8effee9":"dfsubmission = pd.read_csv(path + 'sample_submission.csv')\ndfsubmission.head()","b86fa966":"len(dftreino), len(dfteste), len(dfsubmission), len(dftreino.columns)","9df9125a":"dftreino.head()","fec2a935":"dftreino.info()","b71a6e5c":"dfteste.info()","a626bbaf":"dfcategorias_treino = dftreino.select_dtypes(include='object')\nprint(dfcategorias_treino.columns)\n\ncategorias_treino = list(dfcategorias_treino)\nprint(categorias_treino)","be71e3a1":"dfcategorias_teste = dfteste.select_dtypes(include='object')\nprint(dfcategorias_teste.columns)\n\ncategorias_teste = list(dfcategorias_teste)\nprint(categorias_teste)","47c60d42":"# Codificar os dados de treino\nfrom sklearn import preprocessing\n\n# varre o dataframe substituindo dados categ\u00f3ricos para inteiro \nfor atributo in categorias_treino:\n    print(atributo)\n    le = preprocessing.LabelEncoder()\n    dftreino[atributo] = le.fit_transform(dftreino[atributo].astype(str))\n    \ndftreino[categorias_treino].head()","93558ede":"# Codificar os dados de teste\nfrom sklearn import preprocessing\n\n# varre o dataframe substituindo dados categ\u00f3ricos para inteiro \nfor atributo in categorias_teste:\n    print(atributo)\n    le = preprocessing.LabelEncoder()\n    dfteste[atributo] = le.fit_transform(dfteste[atributo].astype(str))\n    \ndfteste[categorias_teste].head()","61c4daa7":"dftreino.info()","a6d75460":"dfteste.info()","cd3e4350":"# dados de treino\nnulos = dftreino.isna().sum().to_frame().reset_index()\nnulos.columns = ['atributo', 'num_nulos']\nnulos = nulos[ nulos.num_nulos > 0]\nnulos = nulos.sort_values('num_nulos', ascending=False)\nlen(nulos), len(dftreino.columns)","e8b009d2":"nulos = nulos.sort_values('num_nulos', ascending=False)\nnulos[:20]","3aa21df0":"# treino - Vers\u00e3o 1 - colocar a m\u00e9dia do atributo no valor nulo\natributos = list(dftreino.columns)\nfor atributo in atributos:\n    dftreino[atributo] = dftreino[atributo].fillna((dftreino[atributo].mean()))\n\nnulos = dftreino.isna().sum()\nnulos","3eee3412":"# dados de teste\nnulos = dfteste.isna().sum().to_frame().reset_index()\nnulos.columns = ['atributo', 'num_nulos']\nnulos = nulos[ nulos.num_nulos > 0]\nnulos = nulos.sort_values('num_nulos', ascending=False)\nlen(nulos), len(dfteste.columns)","a5b4fe9c":"# teste - Vers\u00e3o 1 - colocar a m\u00e9dia do atributo no valor nulo\natributos = list(dfteste.columns)\nfor atributo in atributos:\n    dfteste[atributo] = dfteste[atributo].fillna((dfteste[atributo].mean()))\n\nnulos = dfteste.isna().sum()\nnulos","376dc4a6":"atributos_x = list(dftreino.columns) \natributos_x.remove('target')\n#atributos_x.remove('ID') # ALTERACAO\nprint(atributos_x)","103680b7":"X = dftreino[atributos_x]\ny = dftreino['target']","6ba7653e":"X_treino = X\ny_treino = y","6e950e39":"X_treino.head()","81668aac":"y_treino.unique()","eff88a56":"X_teste = dfteste[atributos_x]","0deedb15":"X_teste.head()","ecb0acf0":"#%%time\n\n\n#best params\n{'colsample_bytree': 0.6, 'gamma': 0, 'learning_rate': 0.01, \n 'max_depth': 10, 'min_child_weight': 1, 'n_estimators': 300, 'subsample': 0.6}\n\n\nparameters_for_testing = {\n   'colsample_bytree': [0.6], \n    'gamma':[0], \n    'min_child_weight': [1], \n    'learning_rate': [0.01],\n    'max_depth':[10], # [5,10],\n    'n_estimators':[300],\n    'subsample':[0.6]  \n}\n\nfrom sklearn.model_selection import GridSearchCV\nfrom xgboost import XGBClassifier\n\nxgb_model = XGBClassifier(nthread=-1, seed=7)\n\ngsearch1 = GridSearchCV(estimator = xgb_model, param_grid = parameters_for_testing, n_jobs=-1, #6,\n                       iid=False, verbose=10) \n\ngsearch1.fit(X_treino.values, y_treino.values) \nprint('best params')\nprint (gsearch1.best_params_)\nprint('best score')\nprint (gsearch1.best_score_)","e207f941":"modelo = modelXGB = gsearch1","4f070844":"import gc\ngc.collect()","ee2a9a72":"# Gera arquivo para o Kaggle - PropertyId,Score\nfrom IPython.display import FileLink\nimport numpy as np\n\nnome_arquivo = 'Submissao-v02-XGBoost.csv'\ndf_saida = pd.DataFrame()  \ndf_saida['ID'] = dfteste.ID.values\n\nyteste_previsto = modelo.predict_proba(X_teste.values)[:,1] \n\ndf_saida['PredictedProb'] =   yteste_previsto\n# Salvando o arquivo\ndf_saida.to_csv(nome_arquivo, index=False)\n#!head Submissao-v02-XGBoost.csv\nFileLink(nome_arquivo)\n#FileLink(r'df_name.csv')","268b77c0":"import matplotlib.pyplot as plt\n#%matplotlib inline\n\nimport seaborn as sns\nsns.distplot(df_saida.PredictedProb)","19df7a44":"# verifica o tipo de dados e converte para inteiro\/real","8ceffe93":"# Leitura dos dados","0e93db31":"# X e y (treino e teste)","95846bbd":"# Competi\u00e7\u00e3o DSA de Machine Learning - Edi\u00e7\u00e3o Dezembro\/2019","dbe85e04":"# verifica e trata nulos","a3504828":"# Gera arquivo de sa\u00edda","759ec2dd":"# GridSearch","0e364520":"# Modelo"}}