{"cell_type":{"c4dda481":"code","041cc7f2":"code","44d6c706":"code","0be30626":"code","5987d0bd":"code","8fcde5f0":"code","1fa96514":"code","ac6047df":"code","65ef7989":"code","f8e9dbae":"code","aa7132ff":"code","5ca836a5":"code","5d50b5cc":"code","247ba8c8":"code","84665c1f":"code","b63a6f1b":"code","779f7977":"code","ea678602":"code","a35be0d4":"code","6f43f5c7":"code","4b40562a":"markdown","fbce07f3":"markdown","c8c66943":"markdown","2e18d2b7":"markdown","fb9d813d":"markdown","4d3d88b4":"markdown","79aa9d23":"markdown","7f5fb99d":"markdown","e69adf39":"markdown"},"source":{"c4dda481":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","041cc7f2":"data_dir='\/kaggle\/input\/disaster-tweets\/'\ndf = pd.read_csv(data_dir+'tweets.csv')\ndf.head(2)","44d6c706":"print (f\"The dataset has {df.shape[0]} rows and {df.shape[1]} columns\" )","0be30626":"print (f\"Columns in the data set: {df.columns.values}\")","5987d0bd":"print (f\"There are   are {len(df.keyword.unique())} unique keywords.\")","8fcde5f0":"print (f\"The unique keywords are \\n: {df.keyword.unique()}\")","1fa96514":"import pylab as plt\ndf.keyword.value_counts().plot(kind='bar', color='steelblue', figsize=(20, 4))\nplt.title('Value Counts of Different Keywords',fontsize=18)\nplt.xticks(fontsize=16, rotation=90, color='steelblue');","ac6047df":"import pylab as plt\nplt.figure(figsize=(20,12))\nplt.subplot(2,1,1)\ndf.keyword.value_counts()[:30].plot(kind='bar', color='steelblue')#, figsize=(20, 10))\nplt.title('Value Counts for Top 30 Keywords',fontsize=18)\nplt.xticks(fontsize=16, rotation=90, color='steelblue');\nplt.subplots_adjust(hspace=0.8)\n\nplt.subplot(2,1,2)\ndf.keyword.value_counts()[-30:].plot(kind='bar', color='steelblue')#, figsize=(20, 10))\nplt.title('Value Counts for Bottom 30 Keywords',fontsize=18)\nplt.xticks(fontsize=16, rotation=90, color='steelblue');\nplt.subplots_adjust(wspace=0.5)","65ef7989":"print ( df['text'][0], '\\n\\n', df['text'][123])","f8e9dbae":"df[df['target']==1]['text'].values[123]","aa7132ff":"df[df['target']==0]['text'].values[123]","5ca836a5":"import nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\n","5d50b5cc":"import re\n\nREPLACE_BY_SPACE_RE = re.compile('[\/(){}\\[\\]\\|@,;]')\nBAD_SYMBOLS_RE = re.compile('[^0-9a-z #+_]')\nSTOPWORDS = set(stopwords.words('english'))\n\ndef preprocess_text(text):\n    text = text.lower() # lowercase text\n    text = REPLACE_BY_SPACE_RE.sub(' ',text) # replace REPLACE_BY_SPACE_RE symbols by space in text\n    text = BAD_SYMBOLS_RE.sub('', text)# delete symbols which are in BAD_SYMBOLS_RE from text\n    text = ' '.join([word for word in text.split() if word not in STOPWORDS]) # delete stopwors from text\n    return text\n\ndf['text_processed']=df['text'].apply(lambda x:preprocess_text(x))","247ba8c8":"df.sample(2)","84665c1f":"from sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer\n\ndef split_vectorize_text(df, vec_method='tfidf'):\n    \n    # Fun Fact: 8848 is the height of Mt Everest (Nepal) in meters.\n    df_train_val, df_test  = train_test_split(df, test_size=0.2, random_state = 8848) \n    df_train    , df_valid = train_test_split(df_train_val, test_size=0.25, random_state = 8848)\n\n    if vec_method=='tfidf':\n        vectorizer = TfidfVectorizer(ngram_range=(1,2), max_df=0.95)\n    elif vec_method=='count':\n        vectorizer = CountVectorizer(max_df=0.95)\n        \n    x_field = 'text_processed'\n    y_field = 'target'    \n    \n    X_train = vectorizer.fit_transform(df_train[x_field])\n    X_valid = vectorizer.transform(df_valid[x_field])\n    X_test = vectorizer.transform(df_test[x_field])\n    \n    y_train = df_train[y_field]\n    y_valid = df_valid[y_field]\n    y_test  = df_test[y_field]\n    \n    return (X_train, y_train, X_valid, y_valid, X_test, y_test, vectorizer)\n\n(X_train, y_train, X_valid, y_valid, X_test, y_test, vectorizer) = split_vectorize_text(df)\n","b63a6f1b":"from sklearn.linear_model import LogisticRegression, RidgeClassifier\nfrom sklearn.ensemble import RandomForestClassifier \n\nfrom sklearn.metrics import accuracy_score, f1_score \n\n(X_train, y_train, X_valid, y_valid, X_test, y_test, vectorizer) = split_vectorize_text(df)\n    \ndef train_model(X_train, y_train, method='logistic_regression'):\n    if method =='logistic_regression':\n        log_reg = LogisticRegression(verbose=1, solver='liblinear',random_state=8848,max_iter=100)\n        model   = log_reg.fit(X_train, y_train)\n\n    elif method =='ridge_classifier':\n        clf = RidgeClassifier(solver='auto',random_state=8848, max_iter=100)\n        model   = clf.fit(X_train, y_train)\n\n    elif method =='random_forest':        \n        clf = RandomForestClassifier(max_depth=5, random_state=8848)        \n        model   = clf.fit(X_train, y_train)\n\n    return model\n\ndef calc_accuracy(model, X, y):\n    preds   = model.predict(X)\n    acc = accuracy_score(y, preds)\n    f1 = f1_score(y, preds, average='macro')\n    return (100*np.round(acc, 2), 100*np.round(f1, 2) )","779f7977":"#methods = [LogisticRegression, RidgeClassifier]\nresults = []\nmethods = ['logistic_regression', 'ridge_classifier', 'random_forest']\nfor method in methods:\n    model = train_model(X_train, y_train, method=method) \n    acc_train, f1_train= calc_accuracy(model, X_train, y_train)\n    acc_valid, f1_valid= calc_accuracy(model, X_valid, y_valid)\n    print (f\" Method: {method}, \\n Training data: accuracy: {acc_train}% and f1_score: {f1_train}% \\n \\\nValidation data: accuracy:  {acc_valid}%  and f1_score: {f1_valid}% \\n \")\n    results.append( [method, acc_train, acc_valid, f1_train, f1_valid ] )","ea678602":"df_results = pd.DataFrame(data=results, columns=['method',\n                                                 'Training Accuracy', 'Validation Accuracy', \n                                                 'F1 score (Train)', 'F1 score (Validation)'])\ndf_results.set_index('method')","a35be0d4":"results = []\n\nfor vm in ['tfidf', 'count']:\n    (X_train, y_train, X_valid, y_valid, X_test, y_test, vectorizer) = split_vectorize_text(df, vec_method=vm)\n    for method in ['logistic_regression', 'ridge_classifier', 'random_forest']:\n        model = train_model(X_train, y_train, method=method) \n        acc_train, f1_train= calc_accuracy(model, X_train, y_train)\n        acc_valid, f1_valid= calc_accuracy(model, X_valid, y_valid)\n        print (f\" Vectorizer: {vm}, Method: {method}, \\n Training data: accuracy: {acc_train}% and f1_score: {f1_train}% \\n \\\n    Validation data: accuracy:  {acc_valid}%  and f1_score: {f1_valid}% \\n \")\n        results.append( [method, vm, acc_train, acc_valid, f1_train, f1_valid ] )\n    \n    ","6f43f5c7":"df_results = pd.DataFrame(data=results, columns=['method', 'vectorizer',\n                                                 'Training Accuracy', 'Validation Accuracy', \n                                                 'F1 score (Train)', 'F1 score (Validation)'])\ndf_results.set_index('method')","4b40562a":"## Preprocessing the text\n\n### remove the unnecessary part from the text","fbce07f3":"### Some tweets that are not disaster tweets","c8c66943":"## Quick look at some of the tweets","2e18d2b7":"That looks a little messy. Let's plot only top 20 keywords.","fb9d813d":"# Model and training the data","4d3d88b4":"### Play with the different vectorizer","79aa9d23":"### Some tweets that are actually disaster tweets","7f5fb99d":"It makes sense that there are the least number of tweets for tsunami as it not that frequently occuring disaster.","e69adf39":"### Data splitting and Vectorizing\nlet's split the data into 60% training set, 20 % validation set and 20 % test set. and then vectorize the data using "}}