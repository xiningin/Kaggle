{"cell_type":{"57f44758":"code","16480b44":"code","060b970d":"code","93c8e7ef":"code","660b796a":"code","2cc99403":"code","6982abcb":"code","43340252":"code","19d24a56":"code","a54961e2":"code","c02d1a6b":"code","102f8aa9":"code","979c6b0a":"code","0d1096ba":"code","e935f4f6":"code","f3ddbe2f":"code","3549426f":"code","e41e01bb":"code","a4ffe534":"code","0fdfe409":"code","289005b6":"code","6a5ee4c4":"code","3fa85ef2":"code","84e0b573":"code","05c1d77d":"code","7e7ee108":"code","348af52a":"code","82c1f453":"code","63ba51fc":"code","3438cf8e":"code","02fe03b6":"code","182cf4a7":"code","babf994f":"code","ea9ef72f":"code","d7a9ccab":"code","395b78fb":"code","9870e8c5":"code","ac7eef71":"code","e81dc985":"code","0256adfa":"code","4530bd75":"code","f4c5bfca":"code","7d8c757d":"code","38ae9ad8":"code","d0264aee":"code","e161a2e8":"code","cde9c308":"code","7c8a08b7":"code","2966f9e1":"code","444fe1ac":"code","54deffac":"code","7d96a0f5":"code","a9746a3a":"code","d8517d8c":"markdown","57706983":"markdown","d61ea3d5":"markdown","f8ef641a":"markdown","cfaf0629":"markdown","8f735c17":"markdown","a2a8344f":"markdown","fd07c107":"markdown","24c8a546":"markdown","132f2175":"markdown","7f181afa":"markdown","6465b39a":"markdown","47b4683f":"markdown","297b061c":"markdown","97494d24":"markdown","901c511b":"markdown","395d9cbd":"markdown","ba7dd36e":"markdown","23f5053c":"markdown","5b4bdcde":"markdown","1bcad156":"markdown","d183cd4a":"markdown"},"source":{"57f44758":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nraw_data = pd.read_csv(\"..\/input\/cervical-cancer-risk-classification\/kag_risk_factors_cervical_cancer.csv\")\n\n","16480b44":"pd.options.display.max_columns = None\npd.options.display.max_rows = None\nraw_data.head()","060b970d":"raw_data.info()","93c8e7ef":"raw_data.isnull().sum()","660b796a":"raw_data['STDs'].value_counts()","2cc99403":"data_na = raw_data.replace('?', np.nan)\ndata_na = data_na.infer_objects()","6982abcb":"data_na.info()","43340252":"data_nona = data_na.drop(['STDs: Time since first diagnosis','STDs: Time since last diagnosis'],axis=1)\ndata_nona = data_nona.dropna(axis=0)","19d24a56":"#is there columns not informatives ?\nfor col in data_nona.columns:\n    print(col)\n    print(data_nona[col].unique())","a54961e2":"data_nona = data_nona.drop(['STDs:AIDS','STDs:cervical condylomatosis'],axis=1)","c02d1a6b":"data_nona.info()","102f8aa9":"data_nona[data_nona.duplicated()]","979c6b0a":"data_clean = data_nona.drop_duplicates()","0d1096ba":"data_clean.dtypes","e935f4f6":"# impossible to convert directly from string to int due to the string format\ndata_clean = data_clean.astype({'Number of sexual partners': 'float64','First sexual intercourse':'float64','Num of pregnancies':'float64', 'Smokes':'float64', 'Smokes (years)':'float64', 'Smokes (packs\/year)':'float64',\n       'Hormonal Contraceptives':'float64', 'Hormonal Contraceptives (years)':'float64', 'IUD':'float64',\n       'IUD (years)':'float64', 'STDs':'float64', 'STDs (number)':'float64', 'STDs:condylomatosis':'float64',\n       'STDs:vaginal condylomatosis':'float64', 'STDs:vulvo-perineal condylomatosis':'float64',\n       'STDs:syphilis':'float64', 'STDs:pelvic inflammatory disease':'float64',\n       'STDs:genital herpes':'float64', 'STDs:molluscum contagiosum':'float64', 'STDs:HIV':'float64',\n       'STDs:Hepatitis B':'float64', 'STDs:HPV':'float64', 'STDs: Number of diagnosis':'float64',\n       'Dx:Cancer':'float64', 'Dx:CIN':'float64', 'Dx:HPV':'float64', 'Dx':'float64', 'Hinselmann':'float64', 'Schiller':'float64',\n       'Citology':'float64', 'Biopsy':'float64'},copy=False)\ndata_clean = data_clean.astype({'Number of sexual partners': 'int64','First sexual intercourse':'int64','Num of pregnancies':'int64', 'Smokes':'int64',\n       'Hormonal Contraceptives':'int64', 'IUD':'int64',\n       'STDs':'int64', 'STDs (number)':'int64', 'STDs:condylomatosis':'int64',\n       'STDs:vaginal condylomatosis':'int64', 'STDs:vulvo-perineal condylomatosis':'int64',\n       'STDs:syphilis':'int64', 'STDs:pelvic inflammatory disease':'int64',\n       'STDs:genital herpes':'int64', 'STDs:molluscum contagiosum':'int64', 'STDs:HIV':'int64',\n       'STDs:Hepatitis B':'int64', 'STDs:HPV':'int64', 'STDs: Number of diagnosis':'int64',\n       'Dx:Cancer':'int64', 'Dx:CIN':'int64', 'Dx:HPV':'int64', 'Dx':'int64', 'Hinselmann':'int64', 'Schiller':'int64',\n       'Citology':'int64', 'Biopsy':'int64'},copy=False)\ndata_clean.info()","f3ddbe2f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.mlab as mlab\nimport seaborn as sns\nfrom scipy import stats\nfrom scipy.stats import norm\n# install pandas_profiling : pip install pandas_profiling\nimport pandas_profiling\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import Normalizer\nfrom scipy import stats as st\n#notebook's library\n%matplotlib inline","3549426f":"data_clean['Cancer']=np.where(data_clean.apply(lambda row: row.Hinselmann + row.Schiller + row.Citology + row.Biopsy, axis=1)>0,1,0)","e41e01bb":"pandas_profiling.ProfileReport(data_clean)","a4ffe534":"data_eda1 = data_clean.drop(['STDs (number)', 'STDs:condylomatosis',\n       'STDs:vaginal condylomatosis', 'STDs:vulvo-perineal condylomatosis',\n       'STDs:syphilis', 'STDs:pelvic inflammatory disease', 'STDs:genital herpes',\n       'STDs:molluscum contagiosum', 'STDs:HIV', 'STDs:Hepatitis B', 'STDs:HPV',\n       'STDs: Number of diagnosis','Smokes (years)', 'Smokes (packs\/year)','Dx:HPV','Citology','Hinselmann','Schiller','Biopsy'],axis=1)","0fdfe409":"#correlation matrix\nk = 14 #number of variables for heatmap\ncorrmat = data_eda1.corr()\ncols = corrmat.nlargest(k, 'Cancer')['Cancer'].index\ncm = np.corrcoef(data_eda1[cols].values.T)\nsns.set(font_scale=1.25)\n# increase the default heatmap size\nfig, ax = plt.subplots(figsize=(10,10))  \nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 8}, yticklabels=cols.values, xticklabels=cols.values, ax=ax)\nplt.show()","289005b6":"def display_corr_with_col(df,col):\n    corr_matrix = df.corr()\n    corr_type = corr_matrix[col].copy()\n    abs_corr_type = corr_type.apply(lambda x:abs(x))\n    desc_corr_values = abs_corr_type.sort_values(ascending=False)\n    y_values = list(desc_corr_values.values)[1:]\n    x_values = range(0,len(y_values))\n    xlabels = list(desc_corr_values.keys())[1:]\n    fig,ax = plt.subplots(figsize=(8,8))\n    ax.bar(x_values,y_values)\n    ax.set_title('the correlation of all features with {}'.format(col),fontsize=20)\n    ax.set_ylabel('Pearson correlatie coefficient [abs waarde]', fontsize=16)\n    plt.xticks(x_values,xlabels,rotation='vertical')\n    plt.show()\n\ndisplay_corr_with_col(data_eda1,'Cancer')","6a5ee4c4":"quant_cols = ['Age', 'Number of sexual partners', 'First sexual intercourse',\n       'Num of pregnancies','Hormonal Contraceptives (years)','IUD (years)']","3fa85ef2":"i = 1\nplt.figure(i,figsize=(15, 20), dpi=80)\nfor col in quant_cols:\n    plt.subplot(6,2,i)\n    plt.subplots_adjust(top=0.92, bottom=0.08, left=0.10, right=0.95, hspace=0.25,wspace=0.35)\n    sns.distplot(data_eda1[col],fit=norm)\n    plt.ylabel('Probability')\n    i+=1","84e0b573":"data_eda1.reset_index()\nnorm = preprocessing.normalize(data_eda1)\ndata_norm = pd.DataFrame(norm)\ndata_norm.columns = data_eda1.columns","05c1d77d":"from scipy.stats import norm\ni = 1\nplt.figure(i,figsize=(15, 20), dpi=80)\nfor col in quant_cols:\n    plt.subplot(6,2,i)\n    plt.subplots_adjust(top=0.92, bottom=0.08, left=0.10, right=0.95, hspace=0.25,wspace=0.35)\n    sns.distplot(data_norm[col],fit=norm)\n    plt.ylabel('Probability')\n    i+=1","7e7ee108":"data_eda2 = data_eda1.copy()\ndata_eda2.index = data_norm.index","348af52a":"data_eda2[quant_cols] = data_norm[quant_cols]","82c1f453":"data_eda2['Cancer'].loc[data_eda2['Cancer']==1].count()","63ba51fc":"data_eda2_bal = data_eda2.copy()","3438cf8e":"i = round(data_eda2['Cancer'].loc[data_eda2['Cancer']==0].count()\/data_eda2['Cancer'].loc[data_eda2['Cancer']==1].count())-2\nmodulo = data_eda2['Cancer'].loc[data_eda2['Cancer']==0].count() % data_eda2['Cancer'].loc[data_eda2['Cancer']==1].count()\nj=0\nwhile j < i:\n    data_eda2_bal = data_eda2_bal.append(data_eda2.loc[data_eda2['Cancer']==1], ignore_index=True)\n    j += 1\ndata_eda2_bal = data_eda2_bal.append(data_eda2.loc[data_eda2['Cancer']==1].sample(modulo), ignore_index=True)","02fe03b6":"data_eda2_bal['Cancer'].loc[data_eda2_bal['Cancer']==1].count()","182cf4a7":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import make_scorer, accuracy_score","babf994f":"data_eda2_bal.info()","ea9ef72f":"X = data_eda2_bal.drop('Cancer',axis=1)\ny = data_eda2_bal['Cancer']","d7a9ccab":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state = 29)","395b78fb":"X_train.sample(5)","9870e8c5":"model_lr = LogisticRegression(random_state = 29, solver = 'liblinear').fit(X_train,y_train)\npredict_lr = model_lr.predict(X_test)\nprint(accuracy_score(y_test, predict_lr))","ac7eef71":"from sklearn import svm","e81dc985":"model_svm = svm.SVC(kernel='linear').fit(X_train,y_train)","0256adfa":"predict_svm = model_svm.predict(X_test)","4530bd75":"print(accuracy_score(y_test, predict_svm))","f4c5bfca":"from sklearn import tree","7d8c757d":"model_tree = tree.DecisionTreeClassifier(criterion='gini').fit(X_train,y_train)","38ae9ad8":"predict_tree = model_tree.predict(X_test)","d0264aee":"print(accuracy_score(y_test, predict_tree))","e161a2e8":"from sklearn.naive_bayes import GaussianNB","cde9c308":"model_bayes = GaussianNB().fit(X_train,y_train)","7c8a08b7":"predict_bayes = model_bayes.predict(X_test)","2966f9e1":"print(accuracy_score(y_test, predict_bayes))","444fe1ac":"from sklearn.ensemble import RandomForestClassifier","54deffac":"model_rf = RandomForestClassifier().fit(X_train,y_train)","7d96a0f5":"predict_rf = model_rf.predict(X_test)","a9746a3a":"print(accuracy_score(y_test, predict_rf))","d8517d8c":"Check data type","57706983":"### 5. RandomForest","d61ea3d5":"The aim is to predict the likelihood of cancer.\n\nIdeally, we need to ask to the data provider what is the meaning of the \"biopsy\", \"hinselman\", \"Schiller\" and \"citology\" columns. For the purpose of this study, let's assume that these columns means \"the test returnes positive\/the patient has cancer\".\n\nSo we consider \"biopsy\", \"hinselman\", \"Schiller\" and \"citology\" as the target, and the other columns as the features.\n","f8ef641a":"## Duplicated rows","cfaf0629":"### 4. Bayes","8f735c17":"# Model","a2a8344f":"## 2. Detect Missing Values\n\nFind all columns which have null or wrong type values (like '?')","fd07c107":"### 3. Decision tree","24c8a546":"## Profiling\n\nLet's take a closer look to the features, checking correlations and properties.","132f2175":"# Data Cleaning\n\n## 1. Import Dataset","7f181afa":"## 4. Balancing\n\nWith such a imbalanced dataset, the accuracy is highly biased: the model quality can't be assessed this way.","6465b39a":"Correlation with target","47b4683f":"### Observations\n\n- This is a small dataset: 650 observations\n- The dataset is imbalanced: 85\/650 positives\n- After the purge, the correlation intra-features seams to be acceptable\n- some feature may be not valuable for the modeling: IUD and IUD year are correlated, Horm. contra. and horm. contra. year, the three Dx's are correlated\n- the correlation between the target and the features is not very encouraging...\n- the best correlated features are DxCancer and Dx, which seams logical\n\n","297b061c":"Remove duplicated rows","97494d24":"# EDA","901c511b":"### 2. SVM","395d9cbd":"Let's try basics model without any tuning.\n\n### 1. Logistic Regression","ba7dd36e":"## 2. Trends\n\nWe are working on a class prediction, and not a quantitative target, so we don't have to study the distribution of the target.\n\n### Univariate visualization\n\nFor the boolean columns, the profile report above is quite informative. Except the \"hormonal contraceptives\", the boolean features are all imbalanced.\n\nLet's check the others.","23f5053c":"Replace the '?' by NaN and update data type","5b4bdcde":"Drop missing values (rows).\n\nDrop non informative columns before (not enought values)","1bcad156":"## 3. Standardization\/Normalization\n\nSince some features are far from normal, let's normalize all quantitative features.","d183cd4a":"## Correlation\n\nDrop correlated columns"}}