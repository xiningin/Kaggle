{"cell_type":{"e6eb3912":"code","7d0cff88":"code","35278312":"code","1055b5c0":"code","13cafeff":"code","ad8d01a1":"code","8d908e88":"code","c8103a0a":"code","9ffdf28e":"code","c77f4800":"code","4d420fe0":"code","79b4ddc6":"code","545161cc":"code","f403e7b7":"code","5936b39a":"code","f40fbbf9":"code","6da1dcd5":"code","dddccc73":"code","1f95e490":"code","930f0d88":"code","3972e4d8":"code","f982e011":"code","b5e878ad":"code","8ca6d666":"code","981b68ca":"code","b8bf2257":"code","c33de865":"code","fb04f3fd":"code","dd3dae22":"code","5969442a":"code","4bdf2adf":"code","aab99a03":"code","3537dc8e":"code","38e643cf":"code","9d25964c":"code","ccec7e6e":"code","49c9a29b":"code","e290d114":"code","6a1554c4":"code","201ccb49":"code","d146b5bc":"code","a9ee420a":"code","ca28eb28":"markdown","7eb17cf1":"markdown","6a0743da":"markdown","7d089237":"markdown","595cf9ca":"markdown","cb7e7637":"markdown","c9f7b9c4":"markdown","de196ccb":"markdown","810089c3":"markdown","564fe930":"markdown","f84843fa":"markdown","bf3bd65f":"markdown","04360d0b":"markdown","8cee4d75":"markdown","ed3f477e":"markdown","b78f9f71":"markdown","d687ba8f":"markdown","8f852538":"markdown","7d988cca":"markdown","e4737f96":"markdown","714011a8":"markdown","769e532a":"markdown","26027a2b":"markdown","baf55ef2":"markdown","b3fd1482":"markdown","0992b796":"markdown","4bfaa9ec":"markdown","6690261e":"markdown","73f73a5d":"markdown"},"source":{"e6eb3912":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nimport os","7d0cff88":"cc_original_train_df = pd.read_csv('\/kaggle\/input\/fraud-detection\/fraudTrain.csv')\ncc_original_test_df = pd.read_csv('\/kaggle\/input\/fraud-detection\/fraudTest.csv')","35278312":"cc_original_train_df.head(5)","1055b5c0":"cc_original_train_df.info()","13cafeff":"cc_original_train_df.isnull().sum() #Count Null Value each feature","ad8d01a1":"fig, ax = plt.subplots(figsize=(20,10))\nsns.heatmap(cc_original_train_df.corr(), annot=True)\nplt.show()","8d908e88":"cc_original_train_df.loc[cc_original_train_df['is_fraud'] == 1].sort_values('amt', ascending=False).head(2)","c8103a0a":"# Gender\nplt.figure(figsize=(20,8))\nplt.title('Number of frauds by gender')\nsns.barplot(x=\"gender\", y='is_fraud' ,data=cc_original_train_df)","9ffdf28e":"# Category\nplt.figure(figsize=(20,8))\nplt.title('Number of frauds by category')\nsns.barplot(x=\"category\", y='is_fraud' ,data=cc_original_train_df)","c77f4800":"print(\"Number of is_fraud data\",cc_original_train_df['is_fraud'].value_counts())","4d420fe0":"from sklearn.utils import resample \ndf_minority = cc_original_train_df[cc_original_train_df.iloc[:,22].values==0] # .iloc[:,22] = is_fraud\ndf_majority = cc_original_train_df[cc_original_train_df.iloc[:,22].values==1] \n \n# Downsample majority class\ndf_minority_downsampled = resample(df_minority,\n                                 n_samples=7506,     # to match minority class\n                                 random_state=42)    # reproducible results\n \n# Combine minority class with downsampled majority class\ndf_downsampled = pd.concat([df_minority_downsampled, df_majority])\n \n# Display new class counts\ndf_downsampled.info()","79b4ddc6":"print(\"Number of is_fraud data\",df_downsampled['is_fraud'].value_counts())","545161cc":"# Train data\n# Change date to be date type\ndf_downsampled['trans_date_trans_time'] = pd.to_datetime(df_downsampled['trans_date_trans_time'])\n# Create column week number\ndf_downsampled['week_number'] = df_downsampled['trans_date_trans_time'].dt.dayofweek\nassert df_downsampled['week_number'].max() == 6\n# Create column month number\ndf_downsampled['month_number'] = df_downsampled['trans_date_trans_time'].dt.month\nassert df_downsampled['month_number'].max() == 12\n# Create column year\ndf_downsampled['year'] = df_downsampled['trans_date_trans_time'].dt.year\ndf_downsampled.head()","f403e7b7":"# Test Data\n# Change date to be date type\ncc_original_test_df['trans_date_trans_time'] = pd.to_datetime(cc_original_test_df['trans_date_trans_time'])\n# Create column week number\ncc_original_test_df['week_number'] = cc_original_test_df['trans_date_trans_time'].dt.dayofweek\nassert cc_original_test_df['week_number'].max() == 6\n# Create column month number\ncc_original_test_df['month_number'] = cc_original_test_df['trans_date_trans_time'].dt.month\nassert cc_original_test_df['month_number'].max() == 12\n# Create column year\ncc_original_test_df['year'] = cc_original_test_df['trans_date_trans_time'].dt.year\ncc_original_test_df.head()","5936b39a":"category_onehot = pd.get_dummies(df_downsampled.category, prefix='category')\ndf_downsampled = df_downsampled.join(category_onehot)\ndf_downsampled.head()","f40fbbf9":"category_onehot_test_data = pd.get_dummies(cc_original_test_df.category, prefix='category')\ncc_original_test_df = cc_original_test_df.join(category_onehot_test_data)\ncc_original_test_df.head()","6da1dcd5":"# Train data\ndf_downsampled['gender'] = df_downsampled['gender'].replace(['F','M'],[0,1])\n# Test data\ncc_original_test_df['gender'] = cc_original_test_df['gender'].replace(['F','M'],[0,1])\n\nprint('Gender of train dataset', df_downsampled['gender'].value_counts())\nprint('Gender of test dataset', cc_original_test_df['gender'].value_counts())","dddccc73":"# Train data\nfrom sklearn.preprocessing import LabelEncoder\nlabel_encoder = LabelEncoder()\nx_train = df_downsampled['merchant']\ndf_downsampled['merchant_number'] = label_encoder.fit_transform(x_train)\n\n# Test data\nx_test = cc_original_test_df['merchant']\ncc_original_test_df['merchant_number'] = label_encoder.fit_transform(x_test)\n\nprint('Merchant Number of train dataset',df_downsampled['merchant_number'])\nprint('Merchant Number of test dataset',cc_original_test_df['merchant_number'])","1f95e490":"from datetime import date\ndef calculate_age(row):\n    today = date.today()\n    return today.year - row['dob'].year - ((today.month, today.day) < (row['dob'].month, row['dob'].day))\n\n# Train data\ndf_downsampled['dob'] = pd.to_datetime(df_downsampled['dob'])\ndf_downsampled['age'] = df_downsampled['dob']\ndf_downsampled['age'] = df_downsampled.apply (lambda row: calculate_age(row), axis=1)\n\n# Test data\ncc_original_test_df['dob'] = pd.to_datetime(cc_original_test_df['dob'])\ncc_original_test_df['age'] = cc_original_test_df['dob']\ncc_original_test_df['age'] = cc_original_test_df.apply (lambda row: calculate_age(row), axis=1)\n\nprint('Age of train dataset', df_downsampled['age'].head(3))\nprint('Age of test dataset', cc_original_test_df['age'].head(3))","930f0d88":"from sklearn.preprocessing import LabelEncoder\nlabel_encoder = LabelEncoder()\n\n# Train data\nx_train = df_downsampled['job']\ndf_downsampled['job_number'] = label_encoder.fit_transform(x_train)\nprint(df_downsampled['job_number'])\n\n# Test data\nx_test = cc_original_test_df['job']\ncc_original_test_df['job_number'] = label_encoder.fit_transform(x_test)\nprint(cc_original_test_df['job_number'])","3972e4d8":"# Unselect converted data\nselect_data = df_downsampled\nselect_data.columns","f982e011":"select_data = select_data[['cc_num',\n       'amt', 'gender', 'zip',\n       'lat', 'long', 'city_pop', 'unix_time',\n       'merch_lat', 'merch_long', 'age', 'job_number',\n       'week_number', 'month_number', 'year', 'category_entertainment',\n       'category_food_dining', 'category_gas_transport',\n       'category_grocery_net', 'category_grocery_pos',\n       'category_health_fitness', 'category_home', 'category_kids_pets',\n       'category_misc_net', 'category_misc_pos', 'category_personal_care',\n       'category_shopping_net', 'category_shopping_pos', 'category_travel',\n       'merchant_number','is_fraud']]\nselect_data.head()","b5e878ad":"X = select_data.iloc[:,0:31]  #independent columns\ny = select_data.iloc[:,-1]    #target column i.e price range\nfrom sklearn.ensemble import ExtraTreesClassifier\nimport matplotlib.pyplot as plt\nmodel = ExtraTreesClassifier()\nmodel.fit(X,y)\nprint(model.feature_importances_) #use inbuilt class feature_importances of tree based classifiers\n#plot graph of feature importances for better visualization\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(15).plot(kind='barh')\nplt.show()","8ca6d666":"print(select_data.corr().abs().nlargest(15, 'is_fraud').index)","981b68ca":"#Select Train Data\nselect_data_train_extra_tree = df_downsampled[['amt','category_shopping_net','category_grocery_pos','category_home','category_misc_net',\n                                         'category_kids_pets','category_health_fitness','gender','age','month_number',\n                                         'category_food_dining','unix_time','category_personal_care','category_shopping_pos','is_fraud']]\n\nselect_data_train_abs_nlargest = df_downsampled[['amt', 'category_shopping_net', 'category_grocery_pos',\n                                        'category_home', 'category_misc_net', 'category_kids_pets',\n                                        'category_health_fitness', 'category_food_dining',\n                                        'category_personal_care', 'month_number', 'category_entertainment',\n                                        'age', 'category_misc_pos', 'gender','is_fraud']]","b8bf2257":"#Select Test Data\nselect_data_test_extra_tree = cc_original_test_df[['amt','category_shopping_net','category_grocery_pos','category_home','category_misc_net',\n                                         'category_kids_pets','category_health_fitness','gender','age','month_number',\n                                         'category_food_dining','unix_time','category_personal_care','category_shopping_pos','is_fraud']]\n\nselect_data_test_abs_nlargest = cc_original_test_df[['amt', 'category_shopping_net', 'category_grocery_pos',\n                                        'category_home', 'category_misc_net', 'category_kids_pets',\n                                        'category_health_fitness', 'category_food_dining',\n                                        'category_personal_care', 'month_number', 'category_entertainment',\n                                        'age', 'category_misc_pos', 'gender','is_fraud']]","c33de865":"# Prepare X_train y_train\nX_train_extra_tree = select_data_train_extra_tree[['amt','category_shopping_net','category_grocery_pos','category_home','category_misc_net',\n                                         'category_kids_pets','category_health_fitness','gender','age','month_number',\n                                         'category_food_dining','unix_time','category_personal_care','category_shopping_pos']]\ny_train_extra_tree = select_data_train_extra_tree['is_fraud']\n\nX_train_abs_nlargest = select_data_train_abs_nlargest[['amt', 'category_shopping_net', 'category_grocery_pos',\n                                        'category_home', 'category_misc_net', 'category_kids_pets',\n                                        'category_health_fitness', 'category_food_dining',\n                                        'category_personal_care', 'month_number', 'category_entertainment',\n                                        'age', 'category_misc_pos', 'gender']]\ny_train_abs_nlargest = select_data_train_abs_nlargest['is_fraud']","fb04f3fd":"# Prepare X_test y_test\nX_test_extra_tree = select_data_test_extra_tree[['amt','category_shopping_net','category_grocery_pos','category_home','category_misc_net',\n                                         'category_kids_pets','category_health_fitness','gender','age','month_number',\n                                         'category_food_dining','unix_time','category_personal_care','category_shopping_pos']]\ny_test_extra_tree = select_data_test_extra_tree['is_fraud']\n\nX_test_abs_nlargest = select_data_test_abs_nlargest[['amt', 'category_shopping_net', 'category_grocery_pos',\n                                        'category_home', 'category_misc_net', 'category_kids_pets',\n                                        'category_health_fitness', 'category_food_dining',\n                                        'category_personal_care', 'month_number', 'category_entertainment',\n                                        'age', 'category_misc_pos', 'gender']]\ny_test_abs_nlargest = select_data_test_abs_nlargest['is_fraud']","dd3dae22":"from sklearn import preprocessing","5969442a":"# Scale X_train\n# Extra Tree\nscaler = preprocessing.MinMaxScaler()\nnewValue = scaler.fit_transform(X_train_extra_tree)\nX_train_extra_tree_scaler = pd.DataFrame(newValue, columns=X_train_extra_tree.columns)\nX_train_extra_tree_scaler","4bdf2adf":"# Abs\nscaler = preprocessing.MinMaxScaler()\nnewValue = scaler.fit_transform(X_train_abs_nlargest)\nX_train_abs_nlargest_scaler = pd.DataFrame(newValue, columns=X_train_abs_nlargest.columns)\nX_train_abs_nlargest_scaler","aab99a03":"# Scale X_test\n# Extra Tree\nscaler = preprocessing.MinMaxScaler()\nnewValue = scaler.fit_transform(X_test_extra_tree)\nX_test_extra_tree_scaler = pd.DataFrame(newValue, columns=X_test_extra_tree.columns)\nX_test_extra_tree_scaler","3537dc8e":"# nlargest\nscaler = preprocessing.MinMaxScaler()\nnewValue = scaler.fit_transform(X_test_abs_nlargest)\nX_test_abs_nlargest_scaler = pd.DataFrame(newValue, columns=X_test_abs_nlargest.columns)\nX_test_abs_nlargest_scaler","38e643cf":"from sklearn.linear_model import LogisticRegression\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import  cross_val_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report, confusion_matrix","9d25964c":"# Extra Tree\nmodel_ext = LogisticRegression(random_state=42)\nmodel_ext.fit(X_train_extra_tree_scaler, y_train_extra_tree)\n\n# nlargest\nmodel_nr = LogisticRegression(random_state=42)\nmodel_nr.fit(X_train_abs_nlargest_scaler, y_train_abs_nlargest)","ccec7e6e":"# Extra Tree - Predict\ny_pred_extra_tree_scaler = model_ext.predict(X_test_extra_tree_scaler)\n\n# nlargest - Predict\ny_pred_abs_nlargest_scaler = model_nr.predict(X_test_abs_nlargest_scaler)","49c9a29b":"# Extra Tree - Confusion matrix\nprint(\"Select Data By Extra Tree\")\nprint(pd.DataFrame(confusion_matrix(y_test_extra_tree,y_pred_extra_tree_scaler), columns=['Predicted Positive', 'Predicted Nagative'], index=['Actual Positive', 'Actual Negative']))\n\n# nlargest - Confusion matrix\nprint(\"Select Data By Abs nlargest\")\nprint(pd.DataFrame(confusion_matrix(y_test_abs_nlargest,y_pred_abs_nlargest_scaler), columns=['Predicted Positive', 'Predicted Nagative'], index=['Actual Positive', 'Actual Negative']))","e290d114":"# Extra Tree - Classification Report\nprint(\"Classification report (Select Data By Extra Tree)\")\nprint(classification_report(y_test_extra_tree, y_pred_extra_tree_scaler))\n\n# nlargest - Classification Report\nprint(\"Classification report (Select Data By Abs nlargest)\")\nprint(classification_report(y_test_abs_nlargest, y_pred_abs_nlargest_scaler))","6a1554c4":"from sklearn.tree import DecisionTreeClassifier\ndt_clf = DecisionTreeClassifier(criterion = 'gini', max_depth = 20, random_state=42)\n\n# Extra Tree - Fit Model\ndt_clf.fit(X_train_extra_tree_scaler, y_train_extra_tree)\n\n# nlargest - Fit Model\ndt_clf.fit(X_train_abs_nlargest_scaler, y_train_abs_nlargest)","201ccb49":"#Extra Tree - Confusion matrix\nprint(\"Confusion Matrix(Select Data By Extra Tree)\")\npred_test_extrea_tree_scaler = dt_clf.predict(X_test_extra_tree_scaler)\npd.DataFrame(confusion_matrix(y_test_extra_tree,pred_test_extrea_tree_scaler), columns=['Predicted Positive', 'Predicted Nagative'], index=['Actual Positive', 'Actual Negative'])","d146b5bc":"# nlargest - Confusion matrix\nprint(\"Confusion Matrix(Select Data By Abs nlargest)\")\npred_test_abs_nlargest_scaler = dt_clf.predict(X_test_abs_nlargest_scaler)\npd.DataFrame(confusion_matrix(y_test_abs_nlargest,pred_test_abs_nlargest_scaler), columns=['Predicted Positive', 'Predicted Nagative'], index=['Actual Positive', 'Actual Negative'])","a9ee420a":"# Extra Tree - Classification report\nprint(\"Classification report (Select Data By Extra Tree)\")\nprint(classification_report(y_test_extra_tree, pred_test_extrea_tree_scaler))\n\n\n# nlargest - Classification report\nprint(\"Classification report (Select Data By nlargest)\")\nprint(classification_report(y_test_abs_nlargest, pred_test_abs_nlargest_scaler))","ca28eb28":"### Scaler Test Data","7eb17cf1":"is_fraud = 0 has 1289169 data\n\nis_fraud = 1 has 7506 data\n\nAmount of is_fraud is very different, it can make overfitting","6a0743da":"# Load Train and Test dataset","7d089237":"## Decision Tree","595cf9ca":"Note: From heatmap amount has highly correlated with is_fraud\n\n(Heatmap if value close to 1 and color close to white meaning 2 features have highly correlated)","cb7e7637":"## nlargest","c9f7b9c4":"# Credit Card Fraud Detection\n### Objectives\n* Find the best model of Credit Card Fraud Prediction\n* Compare Features importance\n* Resampling Data","de196ccb":"### Answers\n1. Who was scammed with the most amount and what is gender?: **Meagan Edwards, Female**\n2. How much amount that has been scammed the most?: **$1376.04**","810089c3":"### Questions\n1. Who was scammed with the most amount and what is gender?\n2. How much amount that has been scammed the most?\n3. What is gender that has been scammed the most?\n4. What type of category that has been scammed the most?","564fe930":"Note: Now is_fraud = 0 and is_fruad = 1 have amount = 7506 both","f84843fa":"## Gender\nChange gender from nominal to numerical","bf3bd65f":"# Pre-Processing\n## Downsampling Data\nUse downsampling solution because targets are imbalance data","04360d0b":"# Data Tranformation\n## Transaction date time\nAdd new columns week_number, month_number, year by trandform data fromtrans_date_trans_time feature\n\n### Train Data","8cee4d75":"Check data description and null value of train data","ed3f477e":"## Conclusion\nThe best accuracy from 4 models is a Decision Tree and Selection data is nlargest has 95% \nand has the best True Positive but for True Negative has value less than LogisticRegression but f1-score has a little different. So, Decision Tree and Selection data is nlargest medel is the best in this project.\n","b78f9f71":"### Job\nConvert Marchant to be numerical data","d687ba8f":"## Age\nFind Age from date of birth data","8f852538":"## Category (One-Hot Endcoding)\nCategory is Nominal Data that cannot work with model,So I will change category to numerical by One Hot Encoding\n\n### Train Data","7d988cca":"## Merchant\nConvert Marchant to be numerical data","e4737f96":"Note: This train data set don't have null value, All features and target have 1296675.","714011a8":"## ExtraTreesClassifier","769e532a":"### Answers\n3. What is gender that has been scammed the most?: **Male**\n4. What type of category that has been scammed the most?: **shopping_net**","26027a2b":"# Select Data\nFor select features I would like to do 2 experiments: ExtraTreesClassifier, .abs().nlargest(), because i would like to find the best acurrency and the best prediction\n\nSo, This project I will try and compare for my reader","baf55ef2":"# Model\n## LogisticRegression","b3fd1482":"### Scaler Train Data","0992b796":"### Test Data","4bfaa9ec":"# Scaler Data","6690261e":"### Test Data","73f73a5d":"# Data Visualization\nCheck relationship between features and target"}}