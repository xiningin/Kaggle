{"cell_type":{"007c20e2":"code","0053df4f":"code","34aa304f":"code","2e468d11":"code","e55a8df8":"code","07522013":"code","46fc2698":"code","e25a8a5b":"code","53eaf574":"code","7bacca05":"code","ddf78273":"code","1e3ac1ff":"code","755100f5":"code","1945b67e":"code","742b014a":"code","e2fcdbe7":"code","51993d97":"code","775bea82":"code","77fa82e1":"code","b0bd3f80":"code","ddce465c":"code","d0455ca2":"code","17cd0072":"code","c11b24a9":"code","c8381db3":"code","86098fab":"code","c56047d7":"code","c59e001e":"code","75efa33a":"code","a8415eef":"code","4d0d88b5":"code","32b2d7f9":"code","1ff9b6f3":"code","9df1255f":"code","3c5d72e7":"code","5e368d22":"code","21f0b9bc":"code","8b288935":"code","c11c31fb":"code","1b9f2381":"code","c8bc23bf":"code","cc8bcaeb":"code","8fef8963":"code","29a41a32":"code","bfacd1f0":"code","111341ae":"code","d1a7f825":"code","59bda256":"code","8827da2d":"code","5b4a97b6":"code","f71b4692":"code","76a9a8e2":"code","f5ac1a0b":"code","a30b49f1":"code","47e05d05":"code","1d45c47f":"code","54407cd3":"code","1fa6042c":"code","2fad9f15":"code","2122b6cd":"code","6b1b9785":"code","e8ca1c08":"code","dd8b9d48":"code","a903f02c":"code","d8dff1c0":"code","be105645":"code","b2defe08":"code","b8fae388":"code","63a73cac":"markdown","ff224cb7":"markdown","18ecea9a":"markdown","507da893":"markdown","93b0c68e":"markdown","29af6c28":"markdown","89221ede":"markdown","eafe6a87":"markdown","7d3a9dbd":"markdown","96a3fc6e":"markdown","90a89a79":"markdown","2cc590e6":"markdown","a2bccb37":"markdown","84934518":"markdown","946267d1":"markdown","11994521":"markdown"},"source":{"007c20e2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport matplotlib.pyplot as plt \nimport pandas as pd \nimport numpy as np \nimport seaborn as sns\nfrom scipy.stats.mstats import winsorize\nimport scipy.stats as stats\nimport warnings\nwarnings.filterwarnings('ignore')\n\npd.options.display.float_format= '{:.3f}'.format\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","0053df4f":"starts = pd.read_csv(\"..\/input\/kickstarter-projects\/ks-projects-201801.csv\")","34aa304f":"starts.isnull().sum()*100\/starts.shape[0]","2e468d11":"starts.columns","e55a8df8":"starts.info()","07522013":"starts.describe().T","46fc2698":"starts['goal'].unique()","e25a8a5b":"starts['usd pledged'].unique()","53eaf574":"starts['usd pledged'].fillna(starts['usd_pledged_real'], inplace=True)","7bacca05":"starts.isnull().sum()*100\/starts.shape[0]","ddf78273":"# Check missing values in the column \"name\"\nstarts[pd.isnull(starts['name'])].index","1e3ac1ff":"starts[starts.index == 166851]\nstarts[starts.index == 307234]","755100f5":"starts['name'].unique()","1945b67e":"starts.shape","742b014a":"# we have a lot data so we can delete mising value of name feature but we fill with 'unknown'\nstarts['name'].fillna('unknown',inplace=True)","e2fcdbe7":"starts.isnull().sum()*100\/starts.shape[0] # our data has correct values and no missing values.","51993d97":"starts.head()","775bea82":"plt.figure(figsize=(30,15))\ntitle_font = {'family': 'arial', 'color': 'darkred','weight': 'bold','size': 13 }\ncurve_font  = {'family': 'arial', 'color': 'darkblue','weight': 'bold','size': 10 }\n\nvariables = ['goal', 'pledged' , 'backers',\"usd pledged\",\"usd_pledged_real\",\"usd_goal_real\"]\n\nfor i in range(6):\n    plt.subplot(2, 6, i+1)\n    plt.hist(starts[variables[i]])\n    plt.title(variables[i], fontdict=title_font)\n    \nfor i in range(6):\n    plt.subplot(2, 6, i+7)\n    plt.hist(np.log(starts[variables[i]]+1))\n    plt.title(variables[i] + ' (logarithm expression)', fontdict=title_font)","77fa82e1":"plt.figure(figsize=(30,15))\ntitle_font = {'family': 'arial', 'color': 'darkred','weight': 'bold','size': 13 }\ncurve_font  = {'family': 'arial', 'color': 'darkblue','weight': 'bold','size': 10 }\n\nvariables = ['goal', 'pledged' , 'backers',\"usd pledged\",\"usd_pledged_real\",\"usd_goal_real\"]\n\nfor i in range(6):\n    plt.subplot(2, 6, i+1)\n    plt.boxplot(starts[variables[i]])\n    plt.title(variables[i], fontdict=title_font)\n    \nfor i in range(6):\n    plt.subplot(2, 6, i+7)\n    plt.boxplot(np.log(starts[variables[i]]+1))\n    plt.title(variables[i] + ' (logarithm expression)', fontdict=title_font)","b0bd3f80":"# IQR Method \n\nq75,q25= np.percentile(starts['goal'],[75,25])\ncaa= q75-q25","ddce465c":"threshold_variables=[]\nfor threshold_worth in np.arange(1,5):\n    min_worth=q25 - (caa*threshold_worth)\n    max_worth=q75 + (caa*threshold_worth)\n    \n    number_of_outliers=len((np.where((starts['goal']>max_worth) | (starts['goal']<min_worth))[0]))\n    threshold_variables.append((threshold_worth,number_of_outliers))\nthreshold_variables","d0455ca2":"log_threshold_variables= pd.DataFrame()\nvariables = ['goal', 'pledged' , 'backers',\"usd pledged\",\"usd_pledged_real\",\"usd_goal_real\"]\nfor j in variables:\n    for threshold_worth in np.arange(1,5,1):\n        q75_log, q25_log = np.percentile(np.log(starts[j]), [75 ,25])\n        caa_log = q75_log - q25_log\n        q75, q25 = np.percentile(starts[j], [75 ,25])\n        caa= q75 - q25\n        min_worth_log = q25_log - (caa_log*threshold_worth) \n        max_worth_log = q75_log + (caa_log*threshold_worth)\n        min_worth= q25 - (caa*threshold_worth) #logarithm expression\n        max_worth = q75 + (caa*threshold_worth) #logarithm expression\n        number_of_outliers_log = len((np.where((np.log(starts[j]) > max_worth_log)| \n                                               (np.log(starts[j]) < min_worth_log))[0]))\n        number_of_outliers = len((np.where((starts[j] > max_worth)| \n                                               (starts[j] < min_worth))[0]))\n        log_threshold_variables = log_threshold_variables.append({'threshold_worth': threshold_worth,\n                                                            'number_of_outliers' : number_of_outliers, #logarithm expression\n                                                            'number_of_outliers_log': number_of_outliers_log \n                                                            }, ignore_index=True)\n    print(\"-\"*10,\"\",j,\"-\"*10)\n    display(log_threshold_variables)\n    log_threshold_variables = pd.DataFrame()","17cd0072":"plt.boxplot(np.log(starts['goal']),whis=4)\nplt.show()","c11b24a9":"starts.head()","c8381db3":"starts_2= starts.copy()","86098fab":"starts_2['goal']= np.log(starts_2['goal'])\nstarts_2['pledged']= np.log(starts_2['pledged']+1) # we have 0.. if there is 0 log will write -inf\nstarts_2['usd pledged']= np.log(starts_2['usd pledged']+1)  \nstarts_2['usd_pledged_real']=np.log(starts_2['usd_pledged_real']+1) \nstarts_2['usd_goal_real']= np.log(starts_2['usd_goal_real'])","c56047d7":"np.log(starts_2['goal']).isnull().index # There is no empty value ","c59e001e":"starts_2['pledged']","75efa33a":"plt.figure(figsize=(28,18))\nlog_columns=['goal','pledged','usd pledged','usd_pledged_real','usd_goal_real']\n    \nfor i in range(5):\n    plt.subplot(2, 5, i+1)\n    plt.hist(starts_2[log_columns[i]])\n    plt.title(log_columns[i] + ' (logarithm expression)', fontdict=title_font)\nfor i in range(5):\n    plt.subplot(2, 5, i+6)\n    plt.boxplot(starts_2[log_columns[i]])\n    plt.title(log_columns[i] + ' (logarithm expression)', fontdict=title_font)","a8415eef":"from scipy.stats.mstats import winsorize\nwinsorize_starts = winsorize(starts_2[\"goal\"], (0.01, 0.01))\n\nwinsorize_starts","4d0d88b5":"plt.boxplot(winsorize_starts )\nplt.show()","32b2d7f9":"plt.hist(winsorize_starts)\nplt.show()","1ff9b6f3":"starts_2['goal']=winsorize(starts_2[\"goal\"], (0.01, 0.01))\nstarts_2['usd_goal_real']=winsorize(starts_2[\"usd_goal_real\"], (0.01, 0.01))","9df1255f":"plt.boxplot(starts_2['goal'])\nplt.show()","3c5d72e7":"plt.hist(starts_2['goal'])\nplt.show()","5e368d22":"from scipy.stats import jarque_bera\nfrom scipy.stats import normaltest\n\npd.options.display.float_format = '{:.5f}'.format\n\ncolumns = [\"goal\", \"pledged\", \"usd pledged\",\"usd_pledged_real\",\"usd_goal_real\"]\ndispersion_tests = pd.DataFrame(columns=['column', 'jarque_bera_stats', 'jarque_bera_p_value', \n                                         'normal_stats', 'normal_p_value'])\n\nfor column in columns:\n    jb_stats = jarque_bera(starts_2[column])\n    norm_stats = normaltest(starts_2[column])\n    dispersion_tests = dispersion_tests.append({\"column\": column,\n                                                \"jarque_bera_stats\" : jb_stats[0] ,\n                                                \"jarque_bera_p_value\" : jb_stats[1] ,\n                                                \"normal_stats\": norm_stats[0] , \n                                                \"normal_p_value\" : norm_stats[1]\n                                               }, ignore_index=True)\ndispersion_tests","21f0b9bc":"log_threshold_variables= pd.DataFrame()\nvariables = ['goal', 'pledged' , 'backers',\"usd pledged\",\"usd_pledged_real\",\"usd_goal_real\"]\nfor j in variables:\n    for threshold_worth in np.arange(1,5,1):\n        q75_log, q25_log = np.percentile(np.log(starts_2[j]), [75 ,25])\n        caa_log = q75_log - q25_log\n        q75, q25 = np.percentile(starts_2[j], [75 ,25])\n        caa= q75 - q25\n        min_worth_log = q25_log - (caa_log*threshold_worth) \n        max_worth_log = q75_log + (caa_log*threshold_worth)\n        min_worth= q25 - (caa*threshold_worth) #logarithm expression\n        max_worth = q75 + (caa*threshold_worth) #logarithm expression\n        number_of_outliers_log = len((np.where((np.log(starts_2[j]) > max_worth_log)| \n                                               (np.log(starts_2[j]) < min_worth_log))[0]))\n        number_of_outliers = len((np.where((starts_2[j] > max_worth)| \n                                               (starts_2[j] < min_worth))[0]))\n        log_threshold_variables = log_threshold_variables.append({'threshold_worth': threshold_worth,\n                                                            'number_of_outliers' : number_of_outliers, #logarithm expression\n                                                            'number_of_outliers_log': number_of_outliers_log \n                                                            }, ignore_index=True)\n    print(\"-\"*10,\"\",j,\"-\"*10)\n    display(log_threshold_variables)\n    log_threshold_variables = pd.DataFrame()","8b288935":"starts.head()","c11c31fb":"starts.isnull().sum()*100\/starts.shape[0]","1b9f2381":"from sklearn.preprocessing import normalize\n\nstarts[\"norm_goal\"] = normalize(np.array(starts[\"goal\"]).reshape(1,-1)).reshape(-1,1)\nstarts[\"norm_pledged\"] = normalize(np.array(starts[\"pledged\"]).reshape(1,-1)).reshape(-1,1)\nstarts[\"norm_usd_pledged_real\"] = normalize(np.array(starts[\"usd_pledged_real\"]).reshape(1,-1)).reshape(-1,1)\nstarts[\"norm_usd_goal_real\"] = normalize(np.array(starts[\"usd_goal_real\"]).reshape(1,-1)).reshape(-1,1)\n\nnormal_ozellikler=[\"goal\",\"norm_goal\",\"pledged\",\"norm_pledged\",\n                    \"usd_pledged_real\",\"norm_usd_pledged_real\",\"usd_goal_real\",\"norm_usd_goal_real\"]\n\n\nprint('Minimum Worths\\n-----------------',)\nprint(starts[normal_ozellikler].min())\nprint('\\nMaksimum Worths\\n-----------------',)\nprint(starts[normal_ozellikler].max())","c8bc23bf":"plt.figure(figsize=(22,5))\n\nfor i in range(4):\n    plt.subplot(1,4,i+1)\n    plt.scatter(starts[normal_ozellikler[2*i]], starts[normal_ozellikler[2*i+1]])\n    plt.title(\"Orjinal and Normalize Worths \\n ({})\".format(normal_ozellikler[2*i]), fontdict=title_font)\n    plt.xlabel(\"Orjinal Worths\", fontdict=curve_font)\n    plt.ylabel(\"Normalize Worths\", fontdict=curve_font)\n\nplt.show()","cc8bcaeb":"plt.hist(winsorize(starts['norm_goal'], (0,.05)))\nplt.show()","8fef8963":"plt.hist(starts['norm_goal'])\nplt.show()","29a41a32":"starts_2.head()","bfacd1f0":"plt.hist(starts_2['goal'])\nplt.show()","111341ae":"starts_2['success_pleged_ration']= (starts['pledged']*100)\/starts['goal']","d1a7f825":"starts_2.head()","59bda256":"plt.figure(figsize=(22,15))\nlog_columns=['goal','pledged','usd pledged','usd_pledged_real','usd_goal_real','success_pleged_ration']\n    \nfor i in range(5):\n    plt.subplot(2, 5, i+1)\n    plt.hist(starts_2[log_columns[i]])\n    plt.title(log_columns[i] + ' (logarithmic expression)', fontdict=title_font)\nfor i in range(5):\n    plt.subplot(2, 5, i+6)\n    plt.boxplot(starts_2[log_columns[i]])\n    plt.title(log_columns[i] + ' (logarithmic expression)', fontdict=title_font)","8827da2d":"corr_starts_2=starts_2.corr()\ndisplay(corr_starts_2)","5b4a97b6":"plt.figure(figsize=(18,5))\nsns.heatmap(corr_starts_2, square=True, annot=True, linewidths=.5, vmin=0, vmax=1, cmap='viridis')\nplt.title(\"Correlation Matrix (Starts_2)\", fontdict=title_font)\n\nplt.show()","f71b4692":"starts_2.head()","76a9a8e2":"starts_2.info()","f5ac1a0b":"def year_cut(string):\n    return string[0:4]\nstarts_2['year'] = starts_2['launched'].apply(year_cut)\nstarts_2['year'] = starts_2['year'].astype(int)","a30b49f1":"from datetime import datetime\nstarts_2['deadline']= pd.to_datetime(starts_2['deadline'])\nstarts_2['launched']= pd.to_datetime(starts_2['launched'])","47e05d05":"print('Categories in category: ', starts_2['category'].nunique())\nstarts_2['category'].value_counts()[:20].plot(kind='barh', \n                                        figsize=(14,6), \n                                        title='Top 20 most popular categories')","1d45c47f":"#In which category did investors mostly donate?\ndf=pd.DataFrame(starts_2.groupby('category')['pledged'].sum())\ndf=df.reset_index()\ndf\n\ndf2=pd.DataFrame()\ndf2= df[df.pledged>=40000]\ndf2.head()\ndf2.reset_index()\ndf2\nplt.figure(figsize=(30,20))\nsns.barplot(df2['category'], y= df2['pledged'],\n            palette=\"Blues_d\", saturation = 0.5)\nsns.despine(right = True, top = True)","54407cd3":"# In which year did investors invest the most?\ndf=pd.DataFrame(starts_2.groupby(\"year\")[\"pledged\"].sum(),columns=['pledged'])\ndf=df.reset_index()\ndf\nplt.figure(figsize=(20,10))\nsns.barplot(df['year'], y= df['pledged'] ,\n            palette=\"Blues_d\", saturation = 0.5)\nsns.despine(right = True, top = True)","1fa6042c":"#Which category has been the most successful?\ndf=pd.DataFrame(starts_2.groupby('category')['success_pleged_ration'].mean())\ndf=df.reset_index()\ndf\n\ndf2=pd.DataFrame()\ndf2= df[df.success_pleged_ration>=1000]\ndf2.head()\ndf2.reset_index()\ndf2\n\n\nplt.figure(figsize=(30,20))\nsns.barplot(df2['category'], y= df2['success_pleged_ration'],\n            palette=\"Blues_d\", saturation = 0.5)\nsns.despine(right = True, top = True)","2fad9f15":"# Which year has the most successful enterprise?\nadet_tablosu = pd.crosstab(starts_2[\"year\"], starts_2[\"state\"])\nadet_tablosu","2122b6cd":"#Which year has the most successful enterprise?\n\nplt.figure(figsize=(18,10))\nsns.countplot(y=\"year\", hue=\"state\", data=starts_2)\nplt.title(\"Successful Enterprise Amount by Years\", fontdict = title_font)\nplt.ylabel(\"YEARS\", fontdict = curve_font)\nplt.xlabel(\"STATE\", fontdict = curve_font)\nplt.show()","6b1b9785":"#How many of the startup have received the investment they targeted\ndf=pd.DataFrame()\ndf= starts_2[starts_2.success_pleged_ration<100]\ndf=df.reset_index()\ndf\n\ndf2=pd.DataFrame()\ndf2= starts_2[starts_2.success_pleged_ration>=100]\ndf2.head()\ndf2.reset_index()\ndf2\n\nplt.figure(figsize=(15,5))\nplt.subplot(1,2,1)\nplt.hist(df['success_pleged_ration'])\nplt.title(\"not receive their targeted investment\",fontdict=title_font)\nplt.subplot(1,2,2)\nplt.hist(df2['success_pleged_ration'])\nplt.title(\"reaching their targeted investment\",fontdict=title_font)\nplt.show()","e8ca1c08":"plt.hist(starts_2[starts_2[\"success_pleged_ration\"]>=100].iloc[:,16], density=True, alpha=0.6)\nplt.hist(starts_2[starts_2[\"success_pleged_ration\"]<100].iloc[:,16], density=True, alpha=0.6)\nplt.title('reaching\/not reaching their targeted investment',fontdict=title_font)\nplt.show()","dd8b9d48":"#How many ventures were successful despite collecting the money he had targeted?\ndf2=pd.DataFrame()\ndf2= starts_2[starts_2.success_pleged_ration>=100]\ndf2.reset_index()\n\nplt.figure(figsize=(20,10))\nsns.barplot(df2['state'], y= df2['success_pleged_ration'],\n            palette=\"Blues_d\", saturation = 0.5)\nplt.title(\"Startups that take the investment they target\",fontdict=title_font)\nsns.despine(right = True, top = True)","a903f02c":"#How many ventures were successful despite collecting the money he had not targeted?\n\ndf=pd.DataFrame()\ndf= starts_2[starts_2.success_pleged_ration<100]\ndf=df.reset_index()\n\nplt.figure(figsize=(20,10))\nsns.barplot(df['state'], y= df['success_pleged_ration'],\n            palette=\"Blues_d\", saturation = 0.5)\nplt.title(\"startups that Not take the investment they target\",fontdict=title_font)\nsns.despine(right = True, top = True)","d8dff1c0":"#which country has reached its targeted investment?\n\ndf2=pd.DataFrame()\ndf2= starts_2[starts_2.success_pleged_ration>=100]\ndf2.reset_index()\n\nplt.figure(figsize=(20,10))\nsns.barplot(df2['country'], y= df2['success_pleged_ration'],\n            palette=\"Blues_d\", saturation = 0.5)\nplt.title(\"Most invested countries\",fontdict=title_font)\nsns.despine(right = True, top = True)","be105645":"# t-test\ncountry = df2[\"country\"].unique()\ngrup_country = df2.groupby(\"country\")","b2defe08":"import scipy.stats as stats\nfor var in [\"success_pleged_ration\"]:\n    karsilastirma = pd.DataFrame(columns=['grup_1', 'grup_2','istatistik', 'p_degeri'])\n    print(\"{} i\u00e7in kar\u015f\u0131la\u015ft\u0131rma\".format(var),end='')\n    for i in range(0, len(country)):\n        for j in range(i+1, len(country)):\n            ttest = stats.ttest_ind(df2[df2[\"country\"]==country[i]][var], \n                                df2[df2[\"country\"]==country[j]][var])\n            grup_1 = country[i]\n            grup_2 = country[j]\n            istatistik = ttest[0]\n            p_degeri = ttest[1]\n            \n            karsilastirma = karsilastirma.append({\"grup_1\" : grup_1 ,\n                                                  \"grup_2\" : grup_2 ,\n                                                  \"istatistik\": istatistik , \n                                                  \"p_degeri\" : p_degeri}, ignore_index=True)\n    display(karsilastirma)","b8fae388":"#which countries have been successful?\nplt.figure(figsize=(20,15))\nsns.catplot(y=\"country\", hue=\"state\", kind=\"count\",\n            palette=\"pastel\", edgecolor=\".6\",\n            data=starts_2)\nplt.title(\"According to countries ; Success\/Fail\", fontdict = title_font)\nplt.show()","63a73cac":"### Let's apply the 'jarque bera' and 'normal test' methods to statistically prove whether our variables are normally distributed.","ff224cb7":"### Yes, as can be seen, after the normalization process, our target variable has moved far from its normal distribution. Rather than working over this data, we will work with the data set whose logarithm statement has been taken and the target variable has been winsorized. This data set will provide convenience to us.","18ecea9a":"# Outlier values","507da893":"We control the standard deviation distance that it will give to the column recognition, we will find out how much we need to keep our threshold high.","93b0c68e":"## Questions\n\n- Under what conditions an initiative was successful (main question)\n- Investors donated to which category most\n- Which year has the most investment \n- Which category has been the most successful\n- Which year is the number of successful ventures\n- How many of the startup have received the investment they targeted \n- How many ventures were successful despite collecting the money he had targeted or not targeted\n- how many ventures failed despite collecting the money he was aiming  \n- Which country got the most investment\n- which country has a higher success rate than others","29af6c28":"**Context**\n\nI'm a crowdfunding enthusiast and i'm watching kickstarter since its early days. Right now I just collect data and the only app i've made is this twitter bot which tweet any project reaching some milestone: @bloomwatcher . I have a lot of other ideas, but sadly not enough time to develop them\u2026 But I hope you can!\n\n**Content**\n\nYou'll find most useful data for project analysis. Columns are self explanatory except:\n\nusd_pledged: conversion in US dollars of the pledged column (conversion done by kickstarter).\n\nusd pledge real: conversion in US dollars of the pledged column (conversion from Fixer.io API).\n\nusd goal real: conversion in US dollars of the goal column (conversion from Fixer.io API).\n\n**Acknowledgements**\n\nData are collected from Kickstarter Platform\n\nusd conversion (usdpledgedreal and usdgoalreal columns) were generated from convert ks pledges to usd script done by tonyplaysguitar","89221ede":"## Filling Missing Values ","eafe6a87":"### Summary\n- We have examined how distributions of continuous variables are. We are not dealing with 'backers' here, because having realistic values. This situaiton will make easier our job.\n- We observed that columns of logistic expressions that they close to normal distribution, but the despite of  logarithmic expression of 'goal', which is one of our target variables, it contains that too much number of outliner values.\n- We will apply winsorized to the logarithmic expression of the 'goal' variable.\n- and then we will create a new column that called 'succes_pledged_ration'.","7d3a9dbd":"#### As it seems, the number of our outliers has decreased to a few. Now we can use winsorize here.","96a3fc6e":"#### As can be seen, we apply the goal variable both logarithm and winsorized, and we remove almost 'goal' of outliers. we also made it closer to normal distribution.","90a89a79":"### Now let's normalize all our variables and examine their distributions.","2cc590e6":"We implement IQR MEthod because we will learning how much has data outliner values.","a2bccb37":"# Visualization Process","84934518":"As it seems, the variables are not normally distributed because the p value is 0. let's see, is there any outlier value?","946267d1":"### Data Recognition","11994521":"# Explain Columns of Kickstarter Projects\n\n- ID: internal kickstarter id\n- name: name of project - A project is a finite work with a clear goal that you\u2019d like to bring to life. Think albums, books, or films.\n- category: category\n- main_category: category of campaign\n- currency: currency used to support\n- deadline: deadline for crowdfunding\n- goal: fundraising goal The funding goal is the amount of money that a creator needs to complete their project.\n- launched: date launched\n- pledged: amount pledged by \"crowd\"\n- state: Current condition the project is in\n- backers: number of backers\n- country: country pledged from\n- usd pledged: amount of money pledged"}}