{"cell_type":{"64b054f5":"code","f9badcc9":"code","c9b521b5":"code","50285d29":"code","c1a74b24":"code","a4384994":"code","26152f31":"code","954fd132":"code","130c56f4":"code","b28420ca":"code","4d6315a6":"code","a0dea989":"code","86000999":"code","cd52e34c":"code","1db3c1fd":"code","586fc440":"code","4476fb99":"code","b7e44c2d":"code","bf87a014":"code","4c82e716":"code","3655945f":"code","a399b2fc":"code","35755819":"code","96c13414":"code","0a3a4914":"code","ee462d8e":"code","ca57b83c":"code","cda4dde6":"code","ef5aeca0":"code","9cbe3970":"code","8dc3c670":"code","f4f53e90":"code","72dcafd9":"code","5a5a2c98":"code","77bc6e16":"code","bebc589d":"code","01203806":"code","575e15e9":"code","69eb6fe4":"markdown","28e6e6f5":"markdown","df91991a":"markdown","0b4d4595":"markdown","3a0380a3":"markdown","ff900851":"markdown","3fca468e":"markdown","345977d1":"markdown","f7052bd0":"markdown","f259f38a":"markdown","73a29775":"markdown","2928ef37":"markdown","8df1160b":"markdown","35b486f3":"markdown","516eadf7":"markdown","ae5e8ad8":"markdown","1380a01d":"markdown","d783477b":"markdown","b9dbe5c9":"markdown","d2bfa454":"markdown","35fb6382":"markdown"},"source":{"64b054f5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport seaborn as sns\nfrom operator import add\nimport matplotlib.pyplot as plt\nfrom numpy import array\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom keras import regularizers, initializers, optimizers\nfrom keras.layers import Input, Dense, BatchNormalization, Add, GaussianNoise, Dropout\nfrom keras.models import Model\nfrom keras import regularizers\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n","f9badcc9":"print(os.listdir(\"..\/input\"))","c9b521b5":"trainingData = pd.read_csv('..\/input\/titanic\/train.csv')\ntestData = pd.read_csv('..\/input\/titanic\/test.csv')\n\nprint(\"Train shape: \",trainingData.shape)\nprint(\"Test shape: \",testData.shape)\n","50285d29":"trainingData[0:5]","c1a74b24":"list2 = trainingData['Cabin']\nlist3= []\n\nfor l in list2:\n    if(pd.isnull(l)):\n        list3.append(False)\n    else:\n        list3.append(True)\n#print(list3)\n\ntrainingData2 = trainingData.copy(deep=True)\ntrainingData2['Cabin'] = list3\nsns.set(rc={'figure.figsize':(11.7,8.27)})\nsns.barplot(x='Cabin', y='Survived', data=trainingData2)\n\n","a4384994":"list3 = trainingData['Cabin']\nlist33 = testData['Cabin']\n#mySet = set(list3)\n#print(mySet)\n\n#agrupar segun letra con que empiezan a ver que data arroja\n\nlist4 = []\nfor l in list3:\n    if(pd.isnull(l)):\n        list4.append('n')\n    else:\n        list4.append(l[0])\n\nlist44 = []\nfor l in list33:\n    if(pd.isnull(l)):\n        list44.append('n')\n    else:\n        list44.append(l[0])\n    \ntrainingData3 = trainingData.copy(deep=True)\ntrainingData3['Cabin'] = list4 \n\ntrainingData['Cabin'] = list4\ntestData['Cabin'] = list44\n\n\n\nsns.set(rc={'figure.figsize':(11.7,8.27)})\nsns.barplot(x='Cabin', y='Survived', data=trainingData3)\n","26152f31":"list44 = trainingData['Cabin']\nlist444 = testData['Cabin']\nvalues = array(list44)\nvalues444 = array(list444)\n#print(values)\n\nlabel_encoder = LabelEncoder()\ninteger_encoded = label_encoder.fit_transform(values)\n#print(integer_encoded)\n\nlabel_encoder444 = LabelEncoder()\ninteger_encoded444 = label_encoder444.fit_transform(values444)\n\nonehot_encoder = OneHotEncoder(sparse=False)\ninteger_encoded = integer_encoded.reshape(len(integer_encoded),1)\nonehot_encoded = onehot_encoder.fit_transform(integer_encoded)\n\n\nonehot_encoder444 = OneHotEncoder(sparse=False)\ninteger_encoded444 = integer_encoded444.reshape(len(integer_encoded444),1)\nonehot_encoded444 = onehot_encoder444.fit_transform(integer_encoded444)\n\n\nlistA = []\nfor f in range(onehot_encoded.shape[0]):\n    listA.append(onehot_encoded[f][0])\n#print(listA)\n\nlistA2= []\nfor f in range(onehot_encoded444.shape[0]):\n    listA2.append(onehot_encoded444[f][0])\n\nlistB= []\nfor f in range(onehot_encoded.shape[0]):\n    listB.append(onehot_encoded[f][1])\n    \nlistB2 = []\nfor f in range(onehot_encoded444.shape[0]):\n    listB2.append(onehot_encoded444[f][1])\n    \nlistC = []\nfor f in range(onehot_encoded.shape[0]):\n    listC.append(onehot_encoded[f][2])\n    \nlistC2 =[]\nfor f in range(onehot_encoded444.shape[0]):\n    listC2.append(onehot_encoded444[f][2])\n    \nlistD = []\nfor f in range(onehot_encoded.shape[0]):\n    listD.append(onehot_encoded[f][3])\n    \nlistD2 = []\nfor f in range(onehot_encoded444.shape[0]):\n    listD2.append(onehot_encoded444[f][3])\n    \nlistE=[]\nfor f in range(onehot_encoded.shape[0]):\n    listE.append(onehot_encoded[f][4])\n    \nlistE2=[]\nfor f in range(onehot_encoded444.shape[0]):\n    listE2.append(onehot_encoded444[f][4])\n    \nlistF=[]\nfor f in range(onehot_encoded.shape[0]):\n    listF.append(onehot_encoded[f][5])\n    \nlistF2 = []\nfor f in range(onehot_encoded444.shape[0]):\n    listF2.append(onehot_encoded444[f][5])\n    \nlistG= []\nfor f in range(onehot_encoded.shape[0]):\n    listG.append(onehot_encoded[f][6])\n    \nlistG2=[]\nfor f in range(onehot_encoded444.shape[0]):\n    listG2.append(onehot_encoded444[f][6])\n\nlistT = []\nfor f in range(onehot_encoded.shape[0]):\n    listT.append(onehot_encoded[f][7])\n    \nlistT2 = []\nfor f in range(onehot_encoded444.shape[0]):\n    listT2.append(0)\n    \n    \n#T no hay para test set\n#listT2 =[]\n#for f in range(onehot_encoded444.shape[0]):\n    #listT2.append(onehot_encoded444[f][7])\n    \nlistN = []\nfor f in range(onehot_encoded.shape[0]):\n    listN.append(onehot_encoded[f][8])\n\nlistN2 =[]\nfor f in range(onehot_encoded444.shape[0]):\n    listN2.append(onehot_encoded444[f][7])\n    \ntrainingData['CabinA'] = listA\ntrainingData['CabinB'] = listB\ntrainingData['CabinC'] = listC\ntrainingData['CabinD'] = listD\ntrainingData['CabinE'] = listE\ntrainingData['CabinF'] = listF\ntrainingData['CabinN'] = listN\ntrainingData['CabinT'] = listT\n\ntestData['CabinA'] = listA2\ntestData['CabinB'] = listB2\ntestData['CabinC'] = listC2\ntestData['CabinD'] = listD2\ntestData['CabinE'] = listE2\ntestData['CabinF'] = listF2\ntestData['CabinN'] = listN2\ntestData['CabinT'] = listT2\n\n\n\n\ntrainingData = trainingData.drop(['Cabin'], axis = 1)\ntestData = testData.drop(['Cabin'], axis=1)\n\n#hay 9 categorias de letras que por las que empieza una cabina\n#print(onehot_encoded.shape)\n","954fd132":"trainingData","130c56f4":"list4 = trainingData['Name']\nlist42 = testData['Name']\n\n#chequear probabilidades de salvarse una persona segun su titulo (Mr, Mrs, Miss, etc)\n\n\n#lo que va despues de la coma y espacio hasta punto.\nlist5 = []\nfor l in list4:\n    #l.index(', ')\n    #print(l[l.index(', ')+2])\n    list5.append(l[l.index(', ')+2:])\n    #de ese substring quiero ver donde hay '. '\n    #l[l.index(', ')+2:].index('. ')\n\n#print(list5)\n    \nlist52 = []\nfor l in list42:\n    #print(l[l.index(', ')+2:])\n    list52.append(l[l.index(', ')+2:])\n    \n    \nlist6 = []\nfor l in list5:\n    #print(l[:l.index('. ')])\n    list6.append(l[:l.index('. ')])\n    \nlist62 = []\nfor l in list52:\n    list62.append(l[:l.index('. ')])\n    \n    \ntrainingData4 = trainingData.copy(deep=True)\ntrainingData4['Name'] = list6\ntrainingData ['Name'] = list6 \n\ntestData['Name'] = list62\n\n\nsns.set(rc={'figure.figsize':(25,8.27)})\nsns.barplot(x='Name', y='Survived', data=trainingData4)\n","b28420ca":"list20 = trainingData['Name']\n\ntrainingData['Name'] = trainingData['Name'].replace(['Lady', 'Capt', 'Col','Don'\n, 'Dr', 'Major', 'Rev','Jonkheer', 'Dona'], 'Rare')\ntrainingData['Name'] = trainingData['Name'].replace(['Countess', 'Lady', 'Sir'], 'Royal')\ntrainingData['Name'] = trainingData['Name'].replace('Mlle', 'Miss')\ntrainingData['Name'] = trainingData['Name'].replace('Ms', 'Miss')\ntrainingData['Name'] = trainingData['Name'].replace('Mme', 'Mrs')\n\nlist22 = testData['Name']\ntestData['Name'] = testData['Name'].replace(['Lady', 'Capt', 'Col','Don'\n, 'Dr', 'Major', 'Rev','Jonkheer', 'Dona'], 'Rare')\ntestData['Name'] = testData['Name'].replace(['Countess', 'Lady', 'Sir'], 'Royal')\ntestData['Name'] = testData['Name'].replace('Mlle', 'Miss')\ntestData['Name'] = testData['Name'].replace('Ms', 'Miss')\ntestData['Name'] = testData['Name'].replace('Mme', 'Mrs')\n","4d6315a6":"list21 = trainingData['Name']\nmySet = set(list21)\n\nprint('Numero de titulos diferentes en la data (entrenamiento): ',len(mySet))\n\nsns.barplot(x='Name', y='Survived', data=trainingData)\n","a0dea989":"list32 = trainingData['Name']\nvalues32 = array(list32)\n#print(values32)\nmySet = set(list32)\n#print(mySet)\n\nlist3232 = testData['Name']\nvalues3232 = array(list3232)\n\nlabel_encoder = LabelEncoder()\ninteger_encoded = label_encoder.fit_transform(values32)\n\nonehot_encoder = OneHotEncoder(sparse=False)\ninteger_encoded = integer_encoded.reshape(len(integer_encoded),1)\nonehot_encoded = onehot_encoder.fit_transform(integer_encoded)\n\n\nlabel_encoder3232 = LabelEncoder()\ninteger_encoded3232 = label_encoder3232.fit_transform(values3232)\n\nonehot_encoder3232 = OneHotEncoder(sparse=False)\ninteger_encoded3232 = integer_encoded3232.reshape(len(integer_encoded3232),1)\nonehot_encoded3232 = onehot_encoder3232.fit_transform(integer_encoded3232)\n\n#print('shape 1: ',onehot_encoded.shape)\n#print('shape 2: ',onehot_encoded3232.shape)\n\n#print('tituloss en data de training: ',mySet)\n#mySet2 = set(list3232)\n#print('titulos en data de test: ',mySet2)\n\n\nlistMaster = []\nfor f in range(onehot_encoded.shape[0]):\n    listMaster.append(onehot_encoded[f][0])\n#print(listMaster)\n\nlistMaster2 = []\nfor f in range(onehot_encoded3232.shape[0]):\n    listMaster2.append(onehot_encoded3232[f][0])\n\nlistMiss = []\nfor f in range(onehot_encoded.shape[0]):\n    listMiss.append(onehot_encoded[f][1])\n#print(listMiss)\n\nlistMiss2 = []\nfor f in range(onehot_encoded3232.shape[0]):\n    listMiss2.append(onehot_encoded3232[f][1])\n\nlistMr = []\nfor f in range(onehot_encoded.shape[0]):\n    listMr.append(onehot_encoded[f][2])\n#print(listMr)\n\nlistMr2 = []\nfor f in range(onehot_encoded3232.shape[0]):\n    listMr2.append(onehot_encoded3232[f][2])\n\nlistMrs = []\nfor f in range(onehot_encoded.shape[0]):\n    listMrs.append(onehot_encoded[f][3])\n#print(listMrs)\n\nlistMrs2 = []\nfor f in range(onehot_encoded3232.shape[0]):\n    listMrs2.append(onehot_encoded3232[f][3])\n\nlistRare = []\nfor f in range(onehot_encoded.shape[0]):\n    listRare.append(onehot_encoded[f][4])\n#print(listRare)\n\nlistRare2 = []\nfor f in range(onehot_encoded3232.shape[0]):\n    listRare2.append(onehot_encoded3232[f][4])\n\n    \n#en data entrenamiento no hay ni royal ni countess\nlistRoyal = []\nfor f in range(onehot_encoded.shape[0]):\n    listRoyal.append(onehot_encoded[f][5])\n\nlistRoyal2 = []\nfor f in range(onehot_encoded3232.shape[0]):\n    listRoyal2.append(0)\n    \n    \nlistTheCountess = []\nfor f in range(onehot_encoded.shape[0]):\n    listTheCountess.append(onehot_encoded[f][6])\n\nlistTheCountess2 = []\nfor f in range(onehot_encoded3232.shape[0]):\n    listTheCountess2.append(0)\n    \n    \ntrainingData['NameMaster'] = listMaster\ntrainingData['NameMiss'] = listMiss\ntrainingData['NameMr'] = listMr\ntrainingData['NameMrs'] = listMrs\ntrainingData['NameRare'] = listRare\ntrainingData['NameRoyal'] = listRoyal\ntrainingData['NameTheCountess'] = listTheCountess\n\ntestData['NameMaster'] = listMaster2\ntestData['NameMiss'] = listMiss2\ntestData['NameMr'] = listMr2\ntestData['NameMrs'] = listMrs2\ntestData['NameRare'] = listRare2\ntestData['NameRoyal'] = listRoyal2\ntestData['NameTheCountess'] = listTheCountess2\n\ntrainingData = trainingData.drop('Name', axis=1) \ntestData = testData.drop('Name', axis=1)\n","86000999":"submission = testData[['PassengerId']].copy()\ntrainingData = trainingData.drop(['Ticket'], axis = 1)\ntestData = testData.drop(['Ticket'], axis = 1)\ntrainingData = trainingData.drop(['PassengerId'], axis=1)\ntestData = testData.drop(['PassengerId'], axis=1)\n","cd52e34c":"trainingData","1db3c1fd":"list7 = trainingData['Pclass']\nlist72 = testData['Pclass']\n#se tiene que hacer onehotencoding de esta columna\nvalues = array(list7)\nvalues72 = array(list72)\n\nlabel_encoder = LabelEncoder()\ninteger_encoded = label_encoder.fit_transform(values)\n\nlabel_encoder72 = LabelEncoder()\ninteger_encoded72 = label_encoder72.fit_transform(values72)\n\nonehot_encoder = OneHotEncoder(sparse=False)\ninteger_encoded = integer_encoded.reshape(len(integer_encoded),1)\nonehot_encoded = onehot_encoder.fit_transform(integer_encoded)\n\nonehot_encoder72 = LabelEncoder()\ninteger_encoded72 = integer_encoded72.reshape(len(integer_encoded72),1)\nonehot_encoded72 = onehot_encoder.fit_transform(integer_encoded72)\n\n\nlistClass1=[]\nfor f in range(onehot_encoded.shape[0]):\n    listClass1.append(onehot_encoded[f][0])\n#print(listClass1)\n\nlist2Class1 = []\nfor f in range(onehot_encoded72.shape[0]):\n    list2Class1.append(onehot_encoded72[f][0])\n\nlistClass2 = []\nfor f in range(onehot_encoded.shape[0]):\n    listClass2.append(onehot_encoded[f][1])\n#print(listClass2)\n\nlist2Class2 = []\nfor f in range(onehot_encoded72.shape[0]):\n    list2Class2.append(onehot_encoded72[f][1])\n\nlistClass3 = []\nfor f in range(onehot_encoded.shape[0]):\n    listClass3.append(onehot_encoded[f][2])\n#print(listClass3)\n\nlist2Class3 = []\nfor f in range(onehot_encoded72.shape[0]):\n    list2Class3.append(onehot_encoded72[f][2])\n\n\n\ntrainingData['Pclass1'] = listClass1\ntrainingData['Pclass2'] = listClass2\ntrainingData['Pclass3'] = listClass3\n\ntestData['Pclass1'] = list2Class1\ntestData['Pclass2'] = list2Class2\ntestData['Pclass3'] = list2Class3\n\nsns.barplot(x='Pclass', y='Survived', data=trainingData)\ntrainingData = trainingData.drop('Pclass', axis=1)\ntestData = testData.drop('Pclass', axis=1)\n","586fc440":"trainingData","4476fb99":"list8 = trainingData['Sex']\nvalues = array(list8)\n\nlabel_encoder = LabelEncoder()\ninteger_encoded = label_encoder.fit_transform(values)\n\nonehot_encoder = OneHotEncoder(sparse=False)\ninteger_encoded = integer_encoded.reshape(len(integer_encoded),1)\nonehot_encoded = onehot_encoder.fit_transform(integer_encoded)\n\nlist56 = testData['Sex']\nvalues56 = array(list56)\n\nlabel_encoder56 = LabelEncoder()\ninteger_encoded56 = label_encoder56.fit_transform(values56)\n\nonehot_encoder56 = OneHotEncoder(sparse=False)\ninteger_encoded56 = integer_encoded56.reshape(len(integer_encoded56),1)\nonehot_encoded56 = onehot_encoder56.fit_transform(integer_encoded56)\n\n\nlistFemale=[]\nfor f in range(onehot_encoded.shape[0]):\n    listFemale.append(onehot_encoded[f][0])\n\nlist2Female = []\nfor f in range(onehot_encoded56.shape[0]):\n    list2Female.append(onehot_encoded56[f][0])\n    \nlistMale=[]\nfor f in range(onehot_encoded.shape[0]):\n    listMale.append(onehot_encoded[f][1])\n\nlist2Male = []    \nfor f in range(onehot_encoded56.shape[0]):\n    list2Male.append(onehot_encoded56[f][1])\n    \ntrainingData['SexFemale'] = listFemale\ntrainingData['SexMale'] = listMale\n    \ntestData['SexFemale'] = list2Female\ntestData['SexMale'] = list2Male\n\n\nsns.barplot(x='Sex', y='Survived', data=trainingData)\ntrainingData = trainingData.drop('Sex', axis=1)\ntestData = testData.drop('Sex', axis=1)\n","b7e44c2d":"trainingData","bf87a014":"list9 = trainingData['Embarked']\nmySet = set(list9)\n\n\nnullCounter=0\nfor l in list9:\n    if(pd.isnull(l)):\n        nullCounter=nullCounter+1        \n#print(\"the number of nulls: \",nullCounter)\n\n\nlist99 = testData['Embarked']\nmySet99 = set(list99)\n\nnullCounter99 = 0\nfor l in list99:\n    if(pd.isnull(l)):\n        nullCounter99=nullCounter99+1\n        \n#print('the number of nulls in the testdata: ',nullCounter99)\n#0 null\n\nvalues4 = array(list9)\n#print(values4)\n\n\nvalues99 = array(list99)\n\n\n#hay 2 null, los pongo en S\nfor f in range(len(values4)):\n    if pd.isnull(values4[f]):\n        values4[f]='S'\n        \n\nlabel_encoder = LabelEncoder()\ninteger_encoded = label_encoder.fit_transform(values4)\n#print(integer_encoded)\n\nonehot_encoder = OneHotEncoder(sparse=False)\ninteger_encoded = integer_encoded.reshape(len(integer_encoded),1)\nonehot_encoded = onehot_encoder.fit_transform(integer_encoded)\n#print(onehot_encoded)\n\n\nlabel_encoder99 = LabelEncoder()\ninteger_encoded99 = label_encoder99.fit_transform(values99)\n\nonehot_encoder99 = OneHotEncoder(sparse=False)\ninteger_encoded99 = integer_encoded99.reshape(len(integer_encoded99),1)\nonehot_encoded99 = onehot_encoder99.fit_transform(integer_encoded99)\n\n\n#print('trainingData shape: ',onehot_encoded.shape)\n#print('testData shape: ',onehot_encoded99.shape)\n\n\nlistC = []\nfor f in range(onehot_encoded.shape[0]):\n    listC.append(onehot_encoded[f][0])\n#print(listC)\n\nlistC2 = []\nfor f in range(onehot_encoded99.shape[0]):\n    listC2.append(onehot_encoded99[f][0])\n\nlistQ=[]\nfor f in range(onehot_encoded.shape[0]):\n    listQ.append(onehot_encoded[f][1])\n    \nlistQ2 = []\nfor f in range(onehot_encoded99.shape[0]):\n    listQ2.append(onehot_encoded99[f][1])\n    \nlistS=[]\nfor f in range(onehot_encoded.shape[0]):\n    listS.append(onehot_encoded[f][2])\n\nlistS2 = []\nfor f in range(onehot_encoded99.shape[0]):\n    listS2.append(onehot_encoded99[f][2])\n    \ntrainingData['EmbarkedC'] = listC\ntrainingData['EmbarkedQ'] = listQ\ntrainingData['EmbarkedS'] = listS\n    \n    \ntestData['EmbarkedC'] = listC2\ntestData['EmbarkedQ'] = listQ2\ntestData['EmbarkedS'] = listS2\n    \nsns.barplot(x='Embarked', y='Survived', data=trainingData)\ntrainingData = trainingData.drop('Embarked', axis=1)    \ntestData = testData.drop('Embarked', axis=1)\n","4c82e716":"trainingData","3655945f":"list10 = trainingData['SibSp']\nlist11 = trainingData['Parch']\n\nlist12 = list(map(add, list10, list11))\n\nlist100 = testData['SibSp']\nlist110 = testData['Parch']\n\nlist120 = list(map(add,list100,list110))\n\ntrainingData['FamilyMembers'] = list12 \n\ntestData['FamilyMembers'] = list120\n\ntrainingData = trainingData.drop('SibSp', axis=1)    \ntrainingData = trainingData.drop('Parch', axis=1)\ntestData = testData.drop('SibSp', axis=1)\ntestData = testData.drop('Parch', axis=1)\n","a399b2fc":"list15 = trainingData['Age']\n\nnullles = 0\nfor l in list15:\n    if(pd.isnull(l)):\n        nullles=nullles+1\n        \nprint(nullles)\n\nlist150 = testData['Age']\nnulles150 = 0\nfor l in list150:\n    if(pd.isnull(l)):\n        nulles150= nulles150+1\n\nprint('in test data',nulles150)\n","35755819":"trainingData['Age'].fillna(trainingData['Age'].median(skipna=True), inplace=True)\ntestData['Age'].fillna(testData['Age'].median(skipna=True),inplace=True)\n","96c13414":"trainingData","0a3a4914":"trainingData_X = trainingData.drop('Survived', axis=1)\ntrainingData_Y = trainingData['Survived']\n","ee462d8e":"sc = StandardScaler()\n\ntoNormalize = trainingData_X[['Age', 'Fare', 'FamilyMembers']]\n\ntoNormalize2 = sc.fit_transform(toNormalize)\n\n\ntoNormalize32 = testData[['Age','Fare','FamilyMembers']]\n\ntoNormalize322 = sc.fit_transform(toNormalize32)\n\n#print(toNormalize2.shape)\n\nlistAge = []\nfor f in range(toNormalize2.shape[0]):\n    listAge.append(toNormalize2[f][0])\n    \nlist2Age = []\nfor f in range(toNormalize322.shape[0]):\n    list2Age.append(toNormalize322[f][0])\n    \nlistFare = []\nfor f in range(toNormalize2.shape[0]):\n    listFare.append(toNormalize2[f][1])\n\nlist2Fare = []\nfor f in range(toNormalize322.shape[0]):\n    list2Fare.append(toNormalize2[f][1])\n    \nlistFamilyMembers = []\nfor f in range(toNormalize2.shape[0]):\n    listFamilyMembers.append(toNormalize2[f][2])\n\nlist2FamilyMembers = []\nfor f in range(toNormalize322.shape[0]):\n    list2FamilyMembers.append(toNormalize322[f][2])\n    \n    \ntrainingData_X['Age'] = listAge\ntrainingData_X['Fare'] = listFare\ntrainingData_X['FamilyMembers'] = listFamilyMembers\n \n    \ntestData['Age'] = list2Age\ntestData['Fare'] = list2Fare\ntestData['FamilyMembers'] = list2FamilyMembers\n","ca57b83c":"testData.shape","cda4dde6":"trainingData_X.shape","ef5aeca0":"def graf_model(train_history):\n    f = plt.figure(figsize=(15,10))\n    ax = f.add_subplot(121)\n    ax2 = f.add_subplot(122)\n    # summarize history for accuracy\n    ax.plot(train_history.history['binary_accuracy'])\n    ax.plot(train_history.history['val_binary_accuracy'])\n    ax.set_title('model accuracy')\n    ax.set_ylabel('accuracy')\n    ax.set_xlabel('epoch')\n    ax.legend(['train', 'test'], loc='upper left')\n    # summarize history for loss\n    ax2.plot(train_history.history['loss'])\n    ax2.plot(train_history.history['val_loss'])\n    ax2.set_title('model loss')\n    ax2.set_ylabel('loss')\n    ax2.set_xlabel('epoch')\n    ax2.legend(['train', 'test'], loc='upper left')\n    plt.show()\ndef precision(model, registrar=False):\n    y_pred = model.predict(train_dfX)\n    train_auc = roc_auc_score(train_dfY, y_pred)\n    y_pred = model.predict(val_dfX)\n    val_auc = roc_auc_score(val_dfY, y_pred)\n    print('Train AUC: ', train_auc)\n    print('Vali AUC: ', val_auc)\n    if registrar:\n        precisiones_globales.append([train_auc,val_auc])\n","9cbe3970":"def func_model(arquitectura): \n    np.random.seed(32)\n    random_seed = 32\n    first =True\n    inp = Input(shape=(trainingData_X.shape[1],))\n    for capa in arquitectura:        \n        if first:\n            x=Dense(capa, activation=\"relu\", kernel_initializer=initializers.RandomNormal(seed= random_seed), bias_initializer='zeros', kernel_regularizer=regularizers.l2(0.01))(inp)            \n            first = False\n        else:\n            x=Dense(capa, activation=\"relu\", kernel_initializer=initializers.RandomNormal(seed= random_seed), bias_initializer='zeros', kernel_regularizer=regularizers.l2(0.01))(x)  \n    x=Dense(1, activation=\"sigmoid\", kernel_initializer=initializers.RandomNormal(seed=random_seed), bias_initializer='zeros')(x)  \n    model = Model(inputs=inp, outputs=x)\n    model.compile(loss='binary_crossentropy', optimizer=optimizers.Adam(lr=0.0002), metrics=['binary_accuracy'])\n    return model\n","8dc3c670":"train_dfX,val_dfX,train_dfY, val_dfY = train_test_split(trainingData_X,trainingData_Y , test_size=0.1, stratify=trainingData_Y)","f4f53e90":"print('Entrenamiento: ', train_dfX.shape)\nprint('Validacion: ', val_dfX.shape)\n","72dcafd9":"arq1 = [1024, 1024, 512, 256]\nmodel1 = func_model(arq1)\nprint(model1.summary())\n","5a5a2c98":"train_history = model1.fit(train_dfX, train_dfY, batch_size=32, epochs= 30, validation_data = (val_dfX, val_dfY))\ngraf_model(train_history)\n","77bc6e16":"precision(model1, False)","bebc589d":"testData.shape","01203806":"y_test =model1.predict(testData)\nsubmission['Survived'] = np.rint(y_test).astype(int)\nprint(submission)\n","575e15e9":"submission.to_csv('submission.csv', index=False)","69eb6fe4":"Luego se pasa a hacer OneHotEncoding de los titulos","28e6e6f5":"Haciendo OneHotEncoding de la columna Pclass","df91991a":"Separando la data en X y Y","0b4d4595":"Mostrando la data","3a0380a3":"Rellenando valores null de columna Age con media de la data para esa columna","ff900851":"Haciendo separaci\u00f3n de la data en conjunto de entrenamiento y conjunto de validaci\u00f3n.","3fca468e":"Funciones para graficar modelo y calcular precision","345977d1":"Muestra de la data","f7052bd0":"Haciendo OneHotEncoding de la columna Embarked","f259f38a":"Reemplazando titulos poco comunes con t\u00edtulos comunes, para as\u00ed lograr tener menos t\u00edtulos en la data. Luego, graficando probabilidad de salvamiento seg\u00fan los nuevos t\u00edtulos.","73a29775":"Funci\u00f3n para crear modelo","2928ef37":"Juntando columnas SibSp y Parch en una sola columna FamilyMembers","8df1160b":"Contando n\u00famero de valores null en columna Age","35b486f3":"Haciendo normalizaci\u00f3n de las columnas que lo requieren: Age, Fare y FamilyMembers","516eadf7":"Visualizando la data","ae5e8ad8":"Haciendo drop de la columna Ticket","1380a01d":"Se puede apreciar que si se tiene t\u00edtulo de Nobleza (Royal) o The Countess se tiene probabilidad de salvarse de 1.0","d783477b":"Haciendo OneHotEncoding de la columna Sex","b9dbe5c9":"Probabilidades de que pasajero se salve segun letra con la que empieza su cabina\nHaciendo OneHotEncoding de las 9 categorias de las letras con las que empieza una cabina\n","d2bfa454":"Obteniendo la informaci\u00f3n de los nombres y dejando solamente la informacion del titulo (Miss, Mr, Lady, etc). Para luego hacer gr\u00e1fica de probabilidad de salvamiento seg\u00fan t\u00edtulo.","35fb6382":"Agrupando cabinas segun letra con la que empieza y haciendo grafica mostrando porcentaje de si se salvan los pasajeros o no"}}