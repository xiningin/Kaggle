{"cell_type":{"fee7fac4":"code","844143b9":"code","f1f4d57f":"code","7db43b74":"code","1b1c47d9":"code","3ef22367":"code","e3d955cc":"code","827d5e46":"code","7a9260b5":"code","57572ab4":"code","ae0cf37c":"code","15660f00":"code","47fb84ba":"code","5b228460":"code","f0e2bb6c":"code","ffada771":"code","c3b52cbd":"code","3f3d9e0f":"code","fccd5a2a":"markdown","6fd9c994":"markdown"},"source":{"fee7fac4":"# Import Libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport pandas_profiling as pp\nimport seaborn as sns\n\n# Other Libraries\nfrom sklearn.model_selection import train_test_split\n\n# Classifier Libraries\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\n#Metrices\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn import metrics","844143b9":"# Load the Data Set\n\ndf = pd.read_csv('..\/input\/creditcard.csv')","f1f4d57f":"# Check the Head of the Data Set\nprint(df.head())","7db43b74":"# Check the name of the Columns\ndf.columns","1b1c47d9":"# Check the Info of the Data set \ndf.info()","3ef22367":"# Check the Unique Values of the Data Set\ndf.nunique()","e3d955cc":"# Check the NULL Values of the Data \ndf.isnull().sum()","827d5e46":"# Check the Stats of the Data\n\ndf.describe(include ='all')","7a9260b5":"# Check the Class Imbalance of the Data \n\ndf['Class'].value_counts()","57572ab4":"# Histogram Visualtion of the Data\n\ndf.hist(bins=10, figsize=(20,15))\nplt.show()","ae0cf37c":"# find the number of prom samples so we can down sample our majority to it\nyes = len(df[df['Class'] ==1])\n\n# retrieve the indices of the non-prom and prom samples \nyes_ind = df[df['Class'] == 1].index\nno_ind = df[df['Class'] == 0].index\n\n# random sample the non-prom indices based on the amount of \n# promulent samples\nnew_no_ind = np.random.choice(no_ind, yes, \\\nreplace = False)\n\n# merge the two indices together\nundersample_ind = np.concatenate([new_no_ind, yes_ind])\n\n# get undersampled dataframe from the merged indices\nundersampled_data = df.loc[undersample_ind]","15660f00":"# divide undersampled_data into features and is_promoted label\n\nX = undersampled_data.loc[:, undersampled_data.columns != 'Class']\ny = undersampled_data.loc[:, undersampled_data.columns == 'Class']","47fb84ba":"# Split the Data into Train and Test \n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.3, random_state = 42)","5b228460":"# Import Random Forest and Logistic Regression Models\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression","f0e2bb6c":"# Logistic Regression \n\nlr = LogisticRegression()\n\nlr.fit(X_train, y_train)\n\nlr_Pred=lr.predict(X_test)\n\n#print(metrics.accuracy_score(y_test, y_pred))\nprint(classification_report(y_test, lr_Pred))","ffada771":"#Confusion Matrix\ncnf_matrix=metrics.confusion_matrix(y_test, lr_Pred)\ncnf_matrix\n\n#Visualize confusion matrix using heat map\n\nclass_names=[0,1] # name  of classes\nfig, ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\n\n# create heatmap\nsns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nax.xaxis.set_label_position(\"top\")\nplt.tight_layout()\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","c3b52cbd":"# Fir Random Forest Model\n\nrf = RandomForestClassifier(n_estimators = 1000)\n\nrf.fit(X_train, y_train)\n\nrf_Pred=rf.predict(X_test)\n\n#print(metrics.accuracy_score(y_test, y_pred))\nprint(classification_report(y_test, rf_Pred))","3f3d9e0f":"#Confusion Matrix\ncnf_matrix=metrics.confusion_matrix(y_test, rf_Pred)\ncnf_matrix\n#Visualize confusion matrix using heat map\n\nclass_names=[0,1] # name  of classes\nfig, ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\n\n# create heatmap\nsns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nax.xaxis.set_label_position(\"top\")\nplt.tight_layout()\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","fccd5a2a":"<h3 align='left' style='color:blue'>Sinivasa V<\/h3>","6fd9c994":"<h1 align='center' style='color:purple'>Credit Card Fraud Detection Imbalanced Data Set<\/h1>"}}