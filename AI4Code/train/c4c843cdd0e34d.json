{"cell_type":{"7b9e71e9":"code","69af4067":"code","14380b30":"code","585e42f6":"code","0f682170":"code","e00f2e3a":"code","ae742f0d":"code","607850f4":"code","c95f0b45":"code","6976f07c":"code","ce6b42be":"code","b79c6b33":"code","b1548334":"code","f779617c":"code","fcbb52bb":"code","050a6e78":"code","286e267b":"code","4bc5dd4b":"code","07d4350b":"code","024bdc75":"code","59eedebd":"code","bbc658f9":"code","023bb4e5":"code","4675c8e7":"code","076d6970":"code","1b65af9b":"code","6b816760":"code","5c83ddcf":"code","a6ca9656":"code","81145958":"code","b4a23601":"code","8be332d2":"code","e41f047e":"code","5866bab8":"code","624bfec2":"code","29f4621d":"code","b12cbf57":"code","731b4f2e":"code","f28502b9":"code","36668dee":"code","4a9d5c2d":"code","a16529cd":"code","d622280a":"code","0f1d0ce1":"markdown","16c3036a":"markdown","ca61dede":"markdown","f9a2e65d":"markdown","87a2bfd3":"markdown","dd7924d2":"markdown","7bd912e9":"markdown","abfb51ba":"markdown","ac594c96":"markdown","6c191b12":"markdown","739ac87d":"markdown"},"source":{"7b9e71e9":"import numpy as np\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style='white')\nimport warnings\nwarnings.filterwarnings('ignore')\nbins = range(0,100,10)\n%matplotlib inline\nimport os\nprint(os.listdir(\"..\/input\"))","69af4067":"df_raw = pd.read_csv('..\/input\/master.csv')","14380b30":"df_raw.head()","585e42f6":"df_feature = df_raw.copy()","0f682170":"df_feature.head()","e00f2e3a":"#Installing country_converter package\n!pip install country_converter --upgrade","ae742f0d":"#Creating a Continent Column\nimport country_converter as coco\ncc = coco.CountryConverter()\ncontinent = np.array([])\nfor i in range(0, len(df_feature)):\n    continent= np.append(continent, cc.convert(names=df_feature['country'][i], to='Continent' ))\ndf_feature['continent'] = pd.DataFrame(continent) \ndf_feature.columns\ndf_feature = df_feature[['country', 'continent','year', 'sex', 'age', 'suicides_no', 'population',\n       'suicides\/100k pop', 'country-year', 'HDI for year',\n       ' gdp_for_year ($) ', 'gdp_per_capita ($)', 'generation', ]]","607850f4":"#Deleting unnecessary columns\nsns.heatmap(df_feature.isnull(), yticklabels=False, cbar=False, cmap='viridis')\ndf_feature = df_feature.drop(['country-year', 'HDI for year'], axis=1)","c95f0b45":"df = df_feature.copy() ","6976f07c":"#Taking latitude and longitude\nfrom geopy.geocoders import Nominatim\nlat = np.array([])\nlon = np.array([])\ncountry = np.array([])\ncountries = df_feature.groupby('country')['country'].unique().sort_values()\n\nfor i in range(0, len(countries)):\n    geolocator = Nominatim(user_agent='tito', timeout=100)\n    location = geolocator.geocode(countries.index[i], timeout=100)\n    lat = np.append(lat, location.latitude)\n    lon = np.append(lon, location.longitude)\n    country = np.append(country, countries.index[i])","ce6b42be":"#Importing Map\nimport folium\ndata = pd.DataFrame({\n'lat':lat,\n'lon':lon,\n'name':country})\ndata.head()    \n\nm = folium.Map(location=[20, 0], tiles=\"Mapbox Bright\", zoom_start=2 , )\ncountry_map = list(zip(data['name'].values, data['lat'].values, data['lon'].values))\n# add features\nfor country_map in country_map:\n    folium.Marker(\n        location=[float(country_map[1]), float(country_map[2])],\n        popup=folium.Popup(country_map[0], parse_html=True),\n        icon=folium.Icon(icon='home')\n    ).add_to(m)  ","b79c6b33":"m","b1548334":"#Functions\ndef bar_chart(feature1, feature2):\n    from matplotlib import cm\n    total = df[feature2].sum()\n    color = cm.inferno_r(np.linspace(.4,.8, 30))\n    g = df.groupby(feature1)[feature2].sum().plot(kind='bar', figsize=(15,10), rot = 45, color= color)\n    ax = g.axes\n    for p in ax.patches:\n     ax.annotate(f\"{p.get_height() * 100 \/ total:.2f}%\", (p.get_x() + p.get_width() \/ 2., p.get_height()),\n         ha='center', va='center', fontsize=20, color='gray', rotation=0, xytext=(0, 10),\n         textcoords='offset points') \n    plt.grid(b=True, which='major', linestyle='--')\n    plt.title('Suicides per {}'.format(feature1), fontsize=20)\n    plt.xlabel('{}'.format(feature1), fontsize=20)\n    plt.xticks(fontsize=20)\n    plt.yticks(fontsize=20)\n    plt.tight_layout()\n    plt.ylabel('Quantity', fontsize=20)\n        \ndef bar_chart_group(feature1, feature2, feature3):\n    suic_sum_yr = pd.DataFrame(df[feature1].groupby([df[feature2],df[feature3]]).sum())\n    suic_sum_yr = suic_sum_yr.reset_index().sort_index(by=feature1,ascending=False)\n    most_cont_yr = suic_sum_yr\n    plt.figure(figsize=(20,5))\n    plt.title('Suicides per {} \/ {}'.format(feature2, feature3), fontsize=20)\n    plt.xticks(rotation=45, fontsize=20)\n    plt.yticks(fontsize=20)\n    sns.set(font_scale=1)\n    sns.barplot(y=feature1,x=feature3,hue=feature2,data=most_cont_yr,palette='viridis');\n    plt.ylabel('Quantity', fontsize=20)\n    plt.xlabel('{}'.format(feature3),fontsize=20)\n    plt.tight_layout()\n   \ndef bar_chart_continent(continent, continent_name, suicides, country):\n    from matplotlib import cm\n    df_new = df[df[continent] == continent_name]  \n    total = df_new[suicides].sum()\n    color = cm.inferno_r(np.linspace(.4,.8, 30))\n    df_new.groupby(country)[suicides].sum().sort_values(ascending=False).plot(kind='bar', figsize=(20,10), rot = 90, color= color)\n    plt.grid(b=True, which='major', linestyle='--')\n    plt.title('Suicides per {}'.format(continent), fontsize=20)\n    plt.xlabel('{}'.format(continent_name), fontsize=20)\n    plt.tight_layout()\n    plt.xticks(fontsize=20)\n    plt.yticks(fontsize=20)\n    plt.ylabel('Quantity', fontsize=20)    \n\ndef bar_chart_continent_mean(continent, continent_name, mean, country):\n    from matplotlib import cm\n    df_new = df[df[continent] == continent_name]  \n    color = cm.inferno_r(np.linspace(.4,.8, 30))\n    g = df_new.groupby(country)[mean].mean().sort_values(ascending=True).plot(kind='barh', figsize=(20,10), rot = 0, color= color)\n    plt.grid(b=True, which='major', linestyle='--')\n    plt.title('{} per {}'.format(mean,continent), fontsize=20)\n    plt.xlabel('{}'.format(mean), fontsize=20)\n    plt.tight_layout()\n    plt.xticks(fontsize=20)\n    plt.yticks(fontsize=20)\n    plt.ylabel('{}'.format(continent_name), fontsize=20)\n    \n\ndef bar_chart_continent_double(continent, continent_name, suicides, country, population):\n    from matplotlib import cm\n    df_new = df[df[continent] == continent_name]  \n    color = cm.inferno_r(np.linspace(.4,.8, 30))\n    fig = plt.figure()\n    ax1 = fig.add_subplot(211)\n    ax2 = fig.add_subplot(212)\n    df_new.groupby(country)[suicides].sum().sort_values(ascending=False).plot(kind='bar', figsize=(80,60), rot = 90, color= color, ax=ax1)\n    df_new.groupby(country)[population].sum().sort_values(ascending=False).plot(kind='bar', figsize=(80,60), rot = 90, color= color, ax= ax2)\n    ax1.grid(b=True, which='major', linestyle='--')\n    ax1.set_title('{} on {}'.format(suicides, continent_name), fontsize=60)\n    ax1.set_ylabel('Quantity', fontsize=60)\n    ax1.set_xlabel('{}'.format(country),fontsize=60)\n    ax1.xaxis.set_tick_params(labelsize=60)\n    ax1.yaxis.set_tick_params(labelsize=60)\n    ax2.grid(b=True, which='major', linestyle='--')\n    ax2.set_title('{} on {}'.format(population, continent_name), fontsize=60)\n    ax2.set_ylabel('Quantity', fontsize=60)\n    ax2.set_xlabel('{}'.format(country),fontsize=60)\n    ax2.xaxis.set_tick_params(labelsize=60)\n    ax2.yaxis.set_tick_params(labelsize=60)\n    plt.tight_layout()\n    ","f779617c":"bar_chart('continent','suicides_no')","fcbb52bb":"bar_chart('age','suicides_no')","050a6e78":"bar_chart('sex','suicides_no')","286e267b":"bar_chart('generation','suicides_no')","4bc5dd4b":"bar_chart('year','suicides_no')","07d4350b":"bar_chart_group('suicides_no', 'generation', 'year')","024bdc75":"bar_chart_group('suicides_no', 'continent', 'year')","59eedebd":"bar_chart_group('suicides_no', 'continent', 'sex')","bbc658f9":"bar_chart_group('suicides_no', 'generation', 'sex')","023bb4e5":"bar_chart_continent('continent', 'Europe', 'suicides_no', 'country')","4675c8e7":"bar_chart_continent('continent', 'America', 'suicides_no', 'country')","076d6970":"bar_chart_continent('continent', 'Africa', 'suicides_no', 'country')","1b65af9b":"bar_chart_continent('continent', 'Asia', 'suicides_no', 'country')","6b816760":"bar_chart_continent('continent', 'Oceania', 'suicides_no', 'country')","5c83ddcf":"bar_chart_continent_mean('continent', 'Europe', 'suicides\/100k pop', 'country')","a6ca9656":"bar_chart_continent_mean('continent', 'America', 'suicides\/100k pop', 'country')","81145958":"bar_chart_continent_mean('continent', 'Africa', 'suicides\/100k pop', 'country')","b4a23601":"bar_chart_continent_mean('continent', 'Asia', 'suicides\/100k pop', 'country')","8be332d2":"bar_chart_continent_mean('continent', 'Oceania', 'suicides\/100k pop', 'country')","e41f047e":"## Correlation with suicides_no \ndf2 = df_feature.drop('suicides_no', axis=1)\ndf2.corrwith(df_feature['suicides_no']).plot.bar(\n        figsize = (10, 10), title = \"Correlation with suicides_no\", fontsize = 15,\n        rot = 45, grid = True)","5866bab8":"bar_chart_continent_double('continent', 'Europe', 'suicides_no', 'country', 'population')","624bfec2":"bar_chart_continent_double('continent', 'America', 'suicides_no', 'country', 'population')","29f4621d":"bar_chart_continent_double('continent', 'Africa', 'suicides_no', 'country', 'population')","b12cbf57":"bar_chart_continent_double('continent', 'Asia', 'suicides_no', 'country', 'population')","731b4f2e":"bar_chart_continent_double('continent', 'Oceania', 'suicides_no', 'country', 'population')","f28502b9":"bar_chart_continent_double('continent', 'Europe', 'suicides_no', 'country', 'suicides\/100k pop')","36668dee":"bar_chart_continent_double('continent', 'America', 'suicides_no', 'country', 'suicides\/100k pop')","4a9d5c2d":"bar_chart_continent_double('continent', 'Africa', 'suicides_no', 'country', 'suicides\/100k pop')","a16529cd":"bar_chart_continent_double('continent', 'Asia', 'suicides_no', 'country', 'suicides\/100k pop')","d622280a":"bar_chart_continent_double('continent', 'Oceania', 'suicides_no', 'country', 'suicides\/100k pop')","0f1d0ce1":"# Importing Dataset","16c3036a":"The country converter (coco) - a Python package for converting country names between different classification schemes. More about country_converter [here](https:\/\/github.com\/konstantinstadler\/country_converter)","ca61dede":"# Group Visualization","f9a2e65d":"# Continent Visualization","87a2bfd3":"# Global Vizualization","dd7924d2":"Which feature has a correlation with suicides feature? As we can be seen, the population feature is a feature that has the biggest correlation with suicides feature. It makes a sense! Let\u00b4s check out it!!","7bd912e9":"Visually, the continent that has been a high frequency of suicides is Europe. Nevertheless, the African continent missing data to analyze.","abfb51ba":"# Feature Engineering","ac594c96":"It\u2019s often said that \u201cdata is the fuel of machine learning.\u201d This isn\u2019t quite true: data is like the crude oil of machine learning which means it has to be refined into features\u200a\u2014\u200apredictor variables\u200a\u2014\u200ato be useful for training a model. Without relevant features, you can\u2019t train an accurate model, no matter how complex the machine learning algorithm. The process of extracting features from a raw dataset is called feature engineering. More about Feature Engineering [here](https:\/\/towardsdatascience.com\/feature-engineering-what-powers-machine-learning-93ab191bcc2d)","6c191b12":"As we can be seen, there are such of bunch countries to analyze. Trying organized they, I will create a column called continent. ","739ac87d":"# Visualising Data"}}