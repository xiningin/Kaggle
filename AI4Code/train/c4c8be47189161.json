{"cell_type":{"1187fcaa":"code","4022a3f8":"code","3f67fede":"code","3ace0271":"code","1391df9e":"code","46fd948e":"code","705364bd":"code","22d91c7c":"code","7cbea463":"code","96c2ad13":"code","e8328194":"code","f74e0ecd":"code","51d71b61":"code","aadeedf3":"code","1f33a04f":"code","a7726838":"code","c52ba52e":"markdown","92ccbb9b":"markdown","42ed1cb8":"markdown","ac41cd72":"markdown"},"source":{"1187fcaa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4022a3f8":"import tensorflow as tf\nimport tensorflow_datasets as tfds\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\n%matplotlib inline","3f67fede":"print(tf.__version__, keras.__version__)","3ace0271":"fashion_mnist = tf.keras.datasets.fashion_mnist","1391df9e":"(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()\n","46fd948e":"train_images.shape, test_images.shape","705364bd":"train_images[0]","22d91c7c":"X_train, X_valid = train_images[:50000]\/255.0, train_images[50000:]\/255.0\ny_train, y_valid = train_labels[:50000],train_labels[50000:]","7cbea463":"class_names = ['T-shirt\/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']","96c2ad13":"print(class_names[y_train[100]])\nplt.imshow(X_train[100])","e8328194":"model = keras.models.Sequential()\nmodel.add(keras.layers.Flatten(input_shape=[28,28]))\nmodel.add(keras.layers.Dense(400,activation='relu'))\nmodel.add(keras.layers.Dense(200,activation='relu'))\nmodel.add(keras.layers.Dense(200,activation='relu'))\nmodel.add(keras.layers.Dense(10,activation='softmax'))\nmodel.summary()","f74e0ecd":"model.compile(loss='sparse_categorical_crossentropy',\n              optimizer ='sgd',\n              metrics = ['accuracy'])","51d71b61":"history = model.fit(X_train,y_train,epochs=30, \n                   validation_data = (X_valid, y_valid))","aadeedf3":"X_test = test_images\/255.0\ny_proba = model.predict(X_test)\ny_proba[:5].round(2)","1f33a04f":"y_pred = model.predict_classes(X_test)\nprint(y_pred[:5], test_labels[:5])","a7726838":"_, acc = model.evaluate(X_test, test_labels)","c52ba52e":"References:\n\n1. https:\/\/www.tensorflow.org\/tutorials\/keras\/classification","92ccbb9b":"Looks like we are overfitting the model.","42ed1cb8":"# Lets build an image classifier using the Sequential API","ac41cd72":"# Not bad!\nTry this yourself on the mnist dataset"}}