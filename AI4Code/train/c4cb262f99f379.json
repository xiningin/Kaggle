{"cell_type":{"c4b22741":"code","6b3ca2ee":"code","24f86451":"code","6f2adedb":"code","fbcc0eb2":"code","7873a870":"code","15453e20":"code","80dcbdef":"code","65287a80":"code","e37a74e7":"code","d4bc04d7":"code","c35f7c69":"code","14a8d8d4":"code","3823bbf5":"code","33a62482":"code","eda51c2a":"code","e367f5da":"code","d468447b":"code","ba0de591":"code","6b7951bf":"code","768d4ed6":"code","bda60cf1":"code","5cdd5a4f":"code","d5806457":"code","0f0ad72f":"code","a1b943b0":"code","2692340c":"code","eabb1241":"code","66f252d6":"code","a978e6cd":"code","afd6c6cd":"code","3d7a4101":"code","91b318bd":"code","6220cddf":"code","4ffb72be":"code","09b6b833":"code","8317ba65":"code","39e11875":"code","4f85cb95":"code","3ed49b21":"code","0033fb8c":"code","fa68ff91":"code","46701f2a":"code","8e836202":"code","80e3ff57":"code","5568d25a":"code","a0a6f6fe":"code","3aaf96e2":"code","ebccc07d":"code","d8177911":"code","ea9ee8d6":"code","cef3931e":"code","f3ea00f3":"code","6b133e66":"code","ae9c0c3a":"code","d6fabe6e":"code","e4bc7496":"code","fc14d342":"code","b50f84fe":"code","695dbcb7":"code","c510a435":"code","411d399c":"code","376cc9de":"code","8d4acaf0":"code","6c1613eb":"code","8eb90b31":"code","66cb04f4":"code","5686cc78":"code","2a408cf0":"code","a8c389fd":"code","65dbe65a":"code","0dfa0389":"code","0b1d5c1f":"code","ae028508":"code","b27d092e":"code","093c62cd":"code","a4bff993":"code","646cc4a8":"code","2a400726":"code","fc5109c5":"code","d30fffe0":"code","622fa138":"code","f6e4b783":"code","d85f1f97":"code","6cc35661":"code","699adc07":"code","4621673d":"code","e2025614":"code","854de1b6":"code","70ff46aa":"code","8a8deb85":"code","0e0f996b":"code","fdc4c2df":"code","3a27cc6f":"code","8b0e16da":"code","16bee6a2":"code","a2b8b4cd":"code","fbdd254a":"code","aed3fc9e":"code","818e977c":"code","696a025e":"code","9000c1d7":"code","87106dd4":"code","9769a7d3":"code","1dc63e57":"code","031c3d14":"code","557be349":"code","b4700e55":"code","c8ac1bd5":"code","907d2065":"code","5de26680":"code","d46de832":"code","ce6d86f5":"code","30ddbf2f":"code","14f6bb2a":"code","cbe5dc2f":"code","7e9b0f1b":"code","18afe1b1":"code","ec4d323a":"code","7efbc779":"code","e5369b60":"code","fb382d83":"markdown","a2de0185":"markdown","d6f518a5":"markdown","fb8a32e1":"markdown","70418b57":"markdown","ea351b17":"markdown","ded957cb":"markdown","107974a0":"markdown","15f122e4":"markdown","7e2249a8":"markdown","74097fa2":"markdown","5d4dbd01":"markdown"},"source":{"c4b22741":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","6b3ca2ee":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","24f86451":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","6f2adedb":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","fbcc0eb2":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (-0.5, 0.5), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.xticks(rotation=90)\n    plt.show()\n","7873a870":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# Control.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/Control.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'Control.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","15453e20":"df1.head(5)","80dcbdef":"# plotPerColumnDistribution(df1, 10, 5)","65287a80":"# plotCorrelationMatrix(df1, 24)","e37a74e7":"# plotScatterMatrix(df1, 20, 10)","d4bc04d7":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# Quality.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf2 = pd.read_csv('\/kaggle\/input\/Quality.csv', delimiter='\\t', nrows = nRowsRead)\ndf2.dataframeName = 'Quality.csv'\nnRow, nCol = df2.shape\nprint(f'There are {nRow} rows and {nCol} columns')","c35f7c69":"# df1 = df1.drop('Unnamed: 0', axis=1)\n","14a8d8d4":"df2[['Stippe_-3000','Stippe_-3000.1','Stippe_-3000.2','Stippe_-3000.3','Stippe_-3000.4']].median()","3823bbf5":"df_quality = df2\ndf_control = df1","33a62482":"df_quality.shape , df_control.shape\n","eda51c2a":"df_control.head()\ndf_control = df_control.drop(['Unnamed: 0'], axis=1)","e367f5da":"df_quality = df_quality.fillna(0)\ndf_control = df_control.fillna(0)\n# df_control = df_control.drop('date', axis=1)","d468447b":"df_quality.shape , df_control.shape","ba0de591":"df_quality = df_quality.drop(['Unnamed: 0'], axis=1)","6b7951bf":"df_control = df_control.drop('date', axis=1)","768d4ed6":"df_quality.head()","bda60cf1":"df_quality = df_quality.set_index('date')","5cdd5a4f":"stp_str = 'Stippe_-3000'","d5806457":"treshold = 47.5\ndf_quality[df_quality[stp_str] > treshold][stp_str]","0f0ad72f":"# df_quality[stp_str] > 55\n\ncolor = np.where(df_quality[stp_str] > treshold ,'r','black')","a1b943b0":"from sklearn.preprocessing import StandardScaler, MinMaxScaler\nsc = StandardScaler()\narr_control = sc.fit_transform(df_control)\narr_quality = sc.fit_transform(df_quality)","2692340c":"df_control = pd.DataFrame(arr_control, columns=df_control.columns, index= df_control.index)\ndf_quality = pd.DataFrame(arr_quality, columns=df_quality.columns, index= df_quality.index)","eabb1241":"df_quality.shape , df_control.shape","66f252d6":"# df_quality.head(), df_control.head()","a978e6cd":"import umap\nimport seaborn as sns\n%matplotlib inline\nsns.set(context='notebook', style='white', rc={'figure.figsize':(9,10)})\nfit = umap.UMAP(n_neighbors=40, min_dist=0.05, random_state=42)\n%time embedding = fit.fit_transform(df_control)","afd6c6cd":"plt.scatter(embedding[:, 0], embedding[:, 1], c=color)\nplt.title('df_control \u0441\u0436\u0430\u0442\u044b\u0435 UMAP', fontsize=24);\nplt.show()\n","3d7a4101":"df_stippe = df_quality[stp_str]","91b318bd":"df_stippe.shape","6220cddf":"df_stippe.head()","4ffb72be":"from sklearn import linear_model,metrics\n# from sklearn.model_selection import cross_validate\nfrom sklearn.model_selection import train_test_split","09b6b833":"lasso = linear_model.Lasso(alpha=0.1, tol=0.2)\nlasso.fit(df_control,df_stippe)\n# predictions_lasso = lasso.predict(test_data)","8317ba65":"# lasso.coef_","39e11875":"ridge = linear_model.Ridge(alpha=0.1)\nridge.fit(df_control,df_stippe)","4f85cb95":"top_param_lasso = pd.DataFrame([df_control.columns, lasso.coef_]).T\ntop_param_lasso.columns = ['param', 'coef']\n\ntop_param_ridge = pd.DataFrame([df_control.columns, ridge.coef_]).T\ntop_param_ridge.columns = ['param', 'coef']","3ed49b21":"top_param_lasso[top_param_lasso['coef']>0]","0033fb8c":"top_param_lasso['coef'].min(), top_param_lasso['coef'].max()","fa68ff91":"top_param_ridge","46701f2a":"top_param_ridge['coef'].min(), top_param_ridge['coef'].max()","8e836202":"top_param_lasso =  top_param_lasso[top_param_lasso['coef'] > 0 ]\n# top_param_lasso.head()\n\ndf_select_lasso = df_control[top_param_lasso['param']]\n\n\ntop_param_ridge =  top_param_ridge[top_param_ridge['coef'] > 0 ]\n# top_param_ridge.head()\n\ndf_select_ridge = df_control[top_param_ridge['param']]","80e3ff57":"df_select_lasso.head()","5568d25a":"df_select_lasso.columns, df_select_ridge.columns","a0a6f6fe":"df_stippe = pd.DataFrame(df_stippe)","3aaf96e2":"df_stippe.head()\n# color","ebccc07d":"import umap\nimport seaborn as sns\n%matplotlib inline\nsns.set(context='notebook', style='white', rc={'figure.figsize':(9,10)})","d8177911":"n_neighbors=15","ea9ee8d6":"fit = umap.UMAP(n_neighbors=50, min_dist = 0.99, random_state=42)\n%time embedding_lasso = fit.fit_transform(df_select_lasso)","cef3931e":"plt.scatter(embedding_lasso[:, 0], embedding_lasso[:, 1], c=color)\nplt.title('\u0414\u0430\u043d\u043d\u044b\u0435 \u0441\u0436\u0430\u0442\u044b\u0435 UMAP lasso', fontsize=24);\nplt.show()","f3ea00f3":"fit = umap.UMAP(n_neighbors=15, min_dist = 0.99, random_state=42)\n%time embedding_ridge  = fit.fit_transform(df_select_ridge)","6b133e66":"plt.scatter(embedding_ridge[:, 0], embedding_ridge[:, 1], c=color)\nplt.title('\u0414\u0430\u043d\u043d\u044b\u0435 \u0441\u0436\u0430\u0442\u044b\u0435 UMAP ridge', fontsize=24);\nplt.show()","ae9c0c3a":"from sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier","d6fabe6e":"df2[stp_str] > treshold-2.5","e4bc7496":"X = embedding\ny = df2[stp_str] > (treshold-2.5)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","fc14d342":"from sklearn.metrics import roc_curve, auc","b50f84fe":"neighbors = list(range(1,30))\ntrain_results = []\ntest_results = []\nfor n in neighbors:\n   model = KNeighborsClassifier(n_neighbors=n)\n   model.fit(X_train, y_train)\n   train_pred = model.predict(X_train)\n   false_positive_rate, true_positive_rate, thresholds = roc_curve(y_train, train_pred)\n   roc_auc = auc(false_positive_rate, true_positive_rate)\n   train_results.append(roc_auc)\n   y_pred = model.predict(X_test)\n   false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_pred)\n   roc_auc = auc(false_positive_rate, true_positive_rate)\n   test_results.append(roc_auc)\nfrom matplotlib.legend_handler import HandlerLine2D\nline1, = plt.plot(neighbors, train_results, 'b', label=\"Train AUC\")\nline2, = plt.plot(neighbors, test_results, 'r', label=\"Test AUC\")\nplt.legend(handler_map={line1: HandlerLine2D(numpoints=2)})\nplt.ylabel('AUC score')\nplt.xlabel('n_neighbors')\nplt.show()","695dbcb7":"neigh = KNeighborsClassifier(n_neighbors=21, n_jobs=-1)\nneigh.fit(X_train, y_train)","c510a435":"pred = neigh.predict(X)","411d399c":"res = pd.DataFrame(data=[y, pred], ).T\nres.columns = columns=['black', 'claster']","376cc9de":"res[res['black'] == 1]","8d4acaf0":"color = np.where(res['claster'],'red','black')\nplt.scatter(embedding[:, 0], embedding[:, 1], c=color,cmap='Spectral')\nplt.title('\u0414\u0430\u043d\u043d\u044b\u0435 \u0441\u0436\u0430\u0442\u044b\u0435 UMAP KNN', fontsize=24);\nplt.show()","6c1613eb":"from sklearn.cluster import KMeans\nfrom sklearn.model_selection import train_test_split","8eb90b31":"X = df_control\ny = df2[stp_str] > treshold\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","66cb04f4":"kmeans = KMeans(n_clusters=2, random_state=42).fit(X)\npred = kmeans.predict(X)","5686cc78":"res = pd.DataFrame(data=[y, pred], ).T\nres.columns = columns=['black', 'claster']","2a408cf0":"res[res['black'] == 1]","a8c389fd":"color = np.where(res['claster'] == 0,'r','black')\nplt.scatter(embedding[:, 0], embedding[:, 1], c=color,cmap='Spectral')\nplt.title('\u0414\u0430\u043d\u043d\u044b\u0435 \u0441\u0436\u0430\u0442\u044b\u0435 UMAP KMeans', fontsize=24);\nplt.show()","65dbe65a":"X = embedding_lasso\ny = df2[stp_str] > treshold","0dfa0389":"\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","0b1d5c1f":"kmeans = KMeans(n_clusters=2, random_state=42).fit(X_train)\npred = kmeans.predict(X)","ae028508":"res = pd.DataFrame(data=[y, pred], ).T\nres.columns = columns=['black', 'claster']","b27d092e":"res[res['claster'] == 1]","093c62cd":"color = np.where(res['claster'] == 1,'r','black')\nplt.scatter(embedding_lasso[:, 0], embedding_lasso[:, 1], c=color,cmap='Spectral')\nplt.title('\u0414\u0430\u043d\u043d\u044b\u0435 \u0441\u0436\u0430\u0442\u044b\u0435 UMAP lasso KMeans', fontsize=24);\nplt.show()","a4bff993":"X = embedding_ridge\ny = df2[stp_str] > treshold","646cc4a8":"len(X), len(y)","2a400726":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","fc5109c5":"kmeans = KMeans(n_clusters=2, random_state=42).fit(X_train)","d30fffe0":"pred = kmeans.predict(X)","622fa138":"res = pd.DataFrame(data=[y, pred], ).T\nres.columns = columns=['black', 'claster']","f6e4b783":"res[res['black'] == 1]","d85f1f97":"color = np.where(res['claster'] == 1,'r','black')\nplt.scatter(embedding_ridge[:, 0], embedding_ridge[:, 1], c=color,cmap='Spectral')\nplt.title('\u0414\u0430\u043d\u043d\u044b\u0435 \u0441\u0436\u0430\u0442\u044b\u0435 UMAP ridge KMeans', fontsize=24);\nplt.show()","6cc35661":"embedding_ridge","699adc07":"embedding = pd.","4621673d":"control_claster = df1[pred == 1]","e2025614":"control_claster = control_claster.drop('Unnamed: 0', axis=1)","854de1b6":"control_claster.head()","70ff46aa":"# plotScatterMatrix(control_claster, 20, 10)","8a8deb85":"df_stippe[predictions]","0e0f996b":"control_claster[stp_str] = df_stippe[predictions]","fdc4c2df":"plotScatterMatrix(control_claster, 20, 10)","3a27cc6f":"sns.pairplot(control_claster, hue=\"species\", palette=\"husl\")","8b0e16da":"def plot_(clf_name, predictions):\n    color = np.where(predictions,'r','black')\n    plt.scatter(embedding_ridge[:, 0], embedding_ridge[:, 1], c=color)\n    plt.title('\u0414\u0430\u043d\u043d\u044b\u0435 \u0441\u0436\u0430\u0442\u044b\u0435 UMAP ridge '+clf_name, fontsize=24);\n    plt.show()","16bee6a2":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV","a2b8b4cd":"# rf = RandomForestClassifier(random_state = 42)\n# n_estimators = [int(x) for x in np.linspace(start = 20, stop = 50, num = 5)]\n# params = {'bootstrap': [True, False],\n#  'max_depth': [10, 20, 30, 40, None],\n#  'max_features': ['auto', 'sqrt'],\n#  'min_samples_leaf': [1, 2, 4, 5],\n#  'min_samples_split': [2, 5, 10, 15],\n#  'n_estimators': n_estimators}","fbdd254a":"# clf = GridSearchCV(rf, params, cv = 3, n_jobs = -1, verbose = 2)","aed3fc9e":"# %time clf.fit(X_train, y_train)","818e977c":"# best_clf = clf.best_estimator_","696a025e":"# predictions = clf.best_estimator_.predict(X_test)\n# scores = cross_val_score(best_clf, X, y, cv=5)\n# scores.mean()","9000c1d7":"# predictions = best_clf.predict(X)","87106dd4":"# plot_('randomforest', predictions)","9769a7d3":"from sklearn.metrics import confusion_matrix\n# confusion_matrix(y, predictions), ","1dc63e57":"# y = y.astype(numpy.float32)\n# predictions = predictions.astype(numpy.float32)","031c3d14":"from sklearn.metrics import accuracy_score, r2_score\n# accuracy_score(y, predictions), r2_score(y, np.array(predictions))","557be349":"# def svc_estimator_selection(X, y, nfolds):\n#     Cs = [0.001, 0.01, 0.1, 1, 10]\n#     gammas = [0.001, 0.01, 0.1, 1]\n#     param_grid = {'C': Cs, 'gamma' : gammas}\n#     grid_search = GridSearchCV(svm.SVC(kernel='rbf'), param_grid, cv=nfolds, n_jobs = -1)\n#     grid_search.fit(X, y)\n#     return grid_search.best_estimator_","b4700e55":"# best_svc = svc_estimator_selection(X_train, y_train, 5)","c8ac1bd5":"# predictions = best_svc.predict(X_test)","907d2065":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\n\n# param_grid = {\"base_estimator__criterion\" : [\"gini\", \"entropy\"],\n#               \"base_estimator__splitter\" :   [\"best\", \"random\"],\n#               \"n_estimators\": [1, 2,3,4,5,6]\n#              }\n\n\n# DTC = DecisionTreeClassifier(random_state = 11, max_features = \"auto\")\n\n# ABC = AdaBoostClassifier(base_estimator = DTC)\n\n# # run grid search\n# grid_search_ABC = GridSearchCV(ABC, param_grid=param_grid, scoring = 'roc_auc', n_jobs = -1, verbose = 2)","5de26680":"# grid_search_ABC.fit(X_train, y_train)","d46de832":"# ada_best = grid_search_ABC.best_estimator_","ce6d86f5":"# predicts = ada_best.predict(X)","30ddbf2f":"# accuracy_score(np.array(y), predictions)","14f6bb2a":"# predictions\/","cbe5dc2f":"# plot_('ADA', predicts)","7e9b0f1b":"# clf.best_params_","18afe1b1":"# best_params = {'bootstrap': True,\n#  'max_depth': 10,\n#  'max_features': 'auto',\n#  'min_samples_leaf': 1,\n#  'min_samples_split': 10,\n#  'n_estimators': 28}","ec4d323a":"# from sklearn.manifold import TSNE","7efbc779":"# %time tsne_embedding = TSNE(n_components=2, random_state=42).fit_transform(df_select_ridge)\n","e5369b60":"# plt.scatter(tsne_embedding[:, 0], tsne_embedding[:, 1], s= 20, c=color)\n# plt.title('\u0414\u0430\u043d\u043d\u044b\u0435 \u0441\u0436\u0430\u0442\u044b\u0435 TSNE', fontsize=24);","fb382d83":"\u0427\u0438\u0441\u0442\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u043b\u043e\u0441\u044c","a2de0185":"Distribution graphs (histogram\/bar graph) of sampled columns:","d6f518a5":"### Let's check 1st file: \/kaggle\/input\/Control.csv","fb8a32e1":"Scatter and density plots:","70418b57":"df_quality","ea351b17":"There are 2 csv files in the current version of the dataset:\n","ded957cb":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","107974a0":"\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043a\u043b\u0430\u0441\u0442\u0435\u0440(\u0420\u043e\u0437\u043e\u0432\u044b\u0439). \n\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435","15f122e4":"### Let's check 2nd file: \/kaggle\/input\/Quality.csv","7e2249a8":"\u0427\u0438\u0441\u0442\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c","74097fa2":"Correlation matrix:","5d4dbd01":"K_means embedding_ridge"}}