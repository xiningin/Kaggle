{"cell_type":{"f4b8383b":"code","b299a759":"code","33587363":"code","e00f917a":"code","c6a627ba":"code","6b84870b":"code","b62faaf3":"code","3e8383b3":"code","5b0fb43c":"code","5cdbf07d":"code","6aa3b2f8":"code","c6b2baa4":"code","df52d8ef":"code","b60686fb":"code","5b6b73cb":"code","daa2dcde":"code","a3d2c307":"code","b7160867":"code","2e59cde5":"code","bc81325f":"code","befc5022":"code","3456c198":"code","03ddc427":"code","7f390351":"code","f1866e9a":"code","0688f022":"code","9fdc25b7":"code","6c8ae8e9":"code","f6219809":"code","c7e09035":"code","33e71dd4":"code","6b2be42e":"code","a686e0ea":"markdown","537fb118":"markdown","a7839003":"markdown","9d1a1295":"markdown","7edb1d06":"markdown","99e3030e":"markdown","cc0aec3d":"markdown","b19824e9":"markdown","e74974a1":"markdown","deeabd20":"markdown","bf686a66":"markdown","344c9957":"markdown","578358dd":"markdown","79196a5d":"markdown"},"source":{"f4b8383b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sn\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.feature_selection import SelectFromModel\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom sklearn.metrics import *\nfrom tpot import TPOTClassifier\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b299a759":"df = pd.read_excel(\"\/kaggle\/input\/covid19\/dataset.xlsx\")\ndf.head()","33587363":"df.describe()","e00f917a":"null_series = df.isnull().sum()","c6a627ba":"null_series[null_series > 0]","6b84870b":"good_cols = null_series[null_series < df.shape[0]\/20].reset_index()\ngood_cols.head(10)","b62faaf3":"df_goods = df[good_cols[\"index\"]]\ndf_goods.head()","3e8383b3":"df_goods.describe(include=\"all\")","5b0fb43c":"sn.heatmap(df_goods.corr(), annot=True)\nplt.show()","5cdbf07d":"corr_matrix = df.corr().abs()\n\n#the matrix is symmetric so we need to extract upper triangle matrix without diagonal (k = 1)\nsol = (corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(np.bool))\n                 .stack()\n                 .sort_values(ascending=False))\nsol[sol > 0.5]","6aa3b2f8":"df.groupby(\"SARS-Cov-2 exam result\").count()","c6b2baa4":"df['Urine - pH'].replace('N\u00e3o Realizado', np.nan, inplace=True)","df52d8ef":"df['Urine - Leukocytes'].replace('<1000', '999', inplace=True)","b60686fb":"df['Urine - pH'] = df['Urine - pH'].astype(\"float64\")","5b6b73cb":"df['Urine - Leukocytes'] = df['Urine - Leukocytes'].astype(\"float64\")","daa2dcde":"df.dtypes[(df.dtypes == \"object\")].index","a3d2c307":"df_nop = df.drop([\n    \"Patient ID\",\n    'Patient addmited to regular ward (1=yes, 0=no)',\n    'Patient addmited to semi-intensive unit (1=yes, 0=no)',\n    'Patient addmited to intensive care unit (1=yes, 0=no)'\n], axis=1)","b7160867":"df_result = pd.concat([df_nop, pd.get_dummies(df_nop[df_nop.dtypes[(df_nop.dtypes == \"object\")].index])], axis=1).drop(\n    df_nop.dtypes[(df_nop.dtypes == \"object\")].index, axis=1).drop([\n    'SARS-Cov-2 exam result_negative',\n    'Respiratory Syncytial Virus_not_detected',\n    'Influenza A_not_detected',\n    'Influenza B_not_detected',\n    'Parainfluenza 1_not_detected',\n    'CoronavirusNL63_not_detected',\n    'Rhinovirus\/Enterovirus_not_detected',\n    'Coronavirus HKU1_not_detected',\n    'Parainfluenza 3_not_detected',\n    'Chlamydophila pneumoniae_not_detected',\n    'Adenovirus_not_detected',\n    'Parainfluenza 4_not_detected',\n    'Coronavirus229E_not_detected',\n    'CoronavirusOC43_not_detected',\n    'Inf A H1N1 2009_not_detected',\n    'Bordetella pertussis_not_detected',\n    'Metapneumovirus_not_detected',\n    'Influenza B, rapid test_negative',\n    'Influenza A, rapid test_negative',\n    'Urine - Esterase_not_done',\n    'Urine - Hemoglobin_not_done',\n    'Urine - Hemoglobin_absent',\n    'Strepto A_not_done',\n    'Urine - Bile pigments_not_done',\n    'Urine - Ketone Bodies_not_done',\n    'Urine - Nitrite_not_done',\n    'Urine - Urobilinogen_not_done',\n    'Urine - Protein_not_done'\n], axis=1)","2e59cde5":"list(df_result.columns)","bc81325f":"def make_pipeline(x, y, model=RandomForestClassifier(random_state=42)):\n\n    pipeline = Pipeline([\n        ('inputer', SimpleImputer(missing_values=np.nan, strategy='median')),\n        ('normalizer', StandardScaler()),\n        ('feature', SelectFromModel(RandomForestClassifier(random_state=42))),\n        ('clf', model)\n    ])\n    sampler = RandomUnderSampler(random_state=42)\n    X_resampled, y_resampled = sampler.fit_resample(x, y)\n    X_train, X_test, y_train, y_test = train_test_split(X_resampled,\n                                                   y_resampled,\n                                                   test_size = 0.3,\n                                                   random_state = 42)\n    return (pipeline.fit(X_train, y_train), X_test, y_test)","befc5022":"x, y = (df_result.drop('SARS-Cov-2 exam result_positive', axis=1), df_result['SARS-Cov-2 exam result_positive'])","3456c198":"rfmodel, X_test, y_test = make_pipeline(x, y)","03ddc427":"rfmodel.score(X_test, y_test)","7f390351":"print(classification_report(rfmodel.predict(X_test), y_test))","f1866e9a":"tpot = TPOTClassifier(generations=1, verbosity=2, random_state=42, scoring=\"precision\")\ntmodel, X_test, y_test = make_pipeline(x, y, tpot)","0688f022":"tmodel.score(X_test, y_test)","9fdc25b7":"print(classification_report(tmodel.predict(X_test), y_test))","6c8ae8e9":"tmodel[\"clf\"].export(\"best_model.py\")","f6219809":"with open(\"best_model.py\") as best_model:\n    print(best_model.read())","c7e09035":"from sklearn.linear_model import SGDClassifier\nbest_model = SGDClassifier(\n    alpha=0.01, eta0=1.0, fit_intercept=True, l1_ratio=1.0, learning_rate=\"invscaling\", loss=\"modified_huber\", penalty=\"elasticnet\", power_t=0.0)\nbmodel, X_test, y_test = make_pipeline(x, y, best_model)","33e71dd4":"bmodel.score(X_test, y_test)","6b2be42e":"print(classification_report(bmodel.predict(X_test), y_test))","a686e0ea":"## Removing columns not useful","537fb118":"## Making dummies from categorical","a7839003":"# Data Preparation","9d1a1295":"## Fixing some columns","7edb1d06":"## Trying with Random Forest","99e3030e":"# Analysing data","cc0aec3d":"## Using genetic algoritms","b19824e9":"A lot of missing values...","e74974a1":"## With Best Model 94% precision","deeabd20":"With more values have low correlation","bf686a66":"I believe that precision is better than accuracy to optimize in the case of covid.","344c9957":"# Predicting covid-19","578358dd":"Very unbalanced dataset ","79196a5d":"Need a pipeline with undersampling, scaler, imputer and feature selection"}}