{"cell_type":{"c643cfcf":"code","8ccc2086":"code","e1250f18":"code","cb9c5b93":"code","e101a271":"code","386468b7":"code","7958f18a":"code","89525788":"code","055f0ce2":"code","1b0cf850":"code","6e34086e":"code","01f697d9":"code","17276802":"code","6d419cb2":"code","84956093":"code","3c735709":"code","9a83cd14":"code","33064ea0":"code","5e3469f8":"code","9b1df215":"code","0b4b45ee":"code","0e19d173":"code","03d0c93f":"code","4358aee2":"code","c698e23d":"code","88ee59a9":"code","f38e5a6a":"code","fa555ced":"code","bb826d8b":"code","5702f325":"code","3d8538b0":"code","dcf9ef91":"code","f7fb5abf":"code","2aca4b03":"code","5bb080f4":"code","496e791d":"code","5e6a83c0":"code","aafbc002":"code","58654043":"code","fa017b5f":"code","01e6adc9":"code","f7e8d876":"code","c2bdc951":"code","e82f82e1":"code","8beaeac8":"code","eadd629a":"code","dc22e830":"code","3e74b21f":"markdown","b72eb797":"markdown","b3dc52d2":"markdown","7736234f":"markdown","de754035":"markdown","a4d937f2":"markdown","7605c9c1":"markdown","b5feb77e":"markdown","0851e264":"markdown","f72ea2f7":"markdown","23163768":"markdown","80cbda00":"markdown","c15d70fe":"markdown","7559ade3":"markdown","86977e43":"markdown","bfcfd460":"markdown","0d45bea9":"markdown"},"source":{"c643cfcf":"!pip install transformers","8ccc2086":"import torch\nfrom transformers import *\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom torch.utils.data import Dataset, DataLoader\nfrom sklearn.model_selection import train_test_split","e1250f18":"df = pd.read_csv(\"..\/input\/imdb-dataset-of-50k-movie-reviews\/IMDB Dataset.csv\")\ndf['sentiment'] = df['sentiment'].apply(lambda x: 1 if x=='positive' else 0)\ndf.head()","cb9c5b93":"#dataset dimensions\ndf.shape","e101a271":"#Labeled reviews barplot\nsns.countplot(df.sentiment)\nplt.xlabel('sentiments')","386468b7":"#Selecting the bert-base-cased\nPRE_TRAINED_MODEL_NAME = '..\/input\/bert-base-cased\/'","7958f18a":"# Load pre-trained model tokenizer (vocabulary)\ntokenizer = BertTokenizer.from_pretrained(PRE_TRAINED_MODEL_NAME)","89525788":"#Let's see how Bertencoder is encoding a sentence\nsample_txt = 'When was I last outside? I am stuck at home for 2 weeks.'\ntokens = tokenizer.tokenize(sample_txt)\ntoken_ids = tokenizer.convert_tokens_to_ids(tokens)\n\nprint(f' Sentence: {sample_txt}')\nprint(f'   Tokens: {tokens}')\nprint(f'Token IDs: {token_ids}')","055f0ce2":"tokenizer.sep_token, tokenizer.sep_token_id","1b0cf850":"tokenizer.cls_token, tokenizer.cls_token_id","6e34086e":"tokenizer.pad_token, tokenizer.pad_token_id","01f697d9":"tokenizer.unk_token, tokenizer.unk_token_id","17276802":"#To do all preprocessing you specify some parameters in the encod_plus() method of the tokenizer\nencoding = tokenizer.encode_plus(\n  sample_txt,\n  max_length=32,\n  add_special_tokens=True, # Add '[CLS]' and '[SEP]'\n  return_token_type_ids=False,\n  pad_to_max_length=True,\n  return_attention_mask=True,\n  return_tensors='pt',  # Return PyTorch tensors\n)\n\nencoding.keys()","6d419cb2":"#The tokens ids list\nprint(len(encoding['input_ids'][0]))\nencoding['input_ids'][0]","84956093":"#The attentions masked tokens\nprint(len(encoding['attention_mask'][0]))\nencoding['attention_mask']","3c735709":"#let's see how the sentence is tokenized with bert tokenizer\ntokenizer.convert_ids_to_tokens(encoding['input_ids'][0])","9a83cd14":"token_lens = []\n\nfor txt in df.review:\n  tokens = tokenizer.encode(txt, max_length=512)\n  token_lens.append(len(tokens))\nsns.distplot(token_lens)\nplt.xlim([0, 500]);\nplt.xlabel('Token count')","33064ea0":"MAX_LEN = 200      #for not consuming much resources\nRANDOM_SEED = 42\ndevice = torch.device( 'cuda' if torch.cuda.is_available() else 'cpu' )","5e3469f8":"#doing the split of the dataset into training, validation and testing sets\ndf_train, df_test = train_test_split(df, test_size=0.1, random_state=RANDOM_SEED)\ndf_val, df_test = train_test_split(df_test, test_size=0.5, random_state=RANDOM_SEED)","9b1df215":"df_train.shape, df_val.shape, df_test.shape","0b4b45ee":"class IMDBDataset(Dataset):\n\n  def __init__(self, reviews, sentiments, tokenizer, max_len):\n    self.reviews = reviews\n    self.sentiments = sentiments\n    self.tokenizer = tokenizer\n    self.max_len = max_len\n  \n  def __len__(self):\n    return len(self.reviews)\n  \n  def __getitem__(self, item):\n    review = str(self.reviews[item])\n    sentiment = self.sentiments[item]\n\n    encoding = self.tokenizer.encode_plus(\n      review,\n      add_special_tokens=True,\n      max_length=self.max_len,\n      return_token_type_ids=False,\n      pad_to_max_length=True,\n      return_attention_mask=True,\n      return_tensors='pt',\n    )\n\n    return {\n      'review': review,\n      'input_ids': encoding['input_ids'].flatten(),\n      'attention_mask': encoding['attention_mask'].flatten(),\n      'sentiments': torch.tensor(sentiment, dtype=torch.long)\n    }","0e19d173":"def create_data_loader(df, tokenizer, max_len, batch_size):\n  ds = IMDBDataset(\n    reviews=df.review.to_numpy(),\n    sentiments=df.sentiment.to_numpy(),\n    tokenizer=tokenizer,\n    max_len=max_len\n  )\n\n  return DataLoader(\n    ds,\n    batch_size=batch_size,\n    num_workers=4\n  )","03d0c93f":"BATCH_SIZE = 16\n\ntrain_data_loader = create_data_loader(df_train, tokenizer, MAX_LEN, BATCH_SIZE)\nval_data_loader = create_data_loader(df_val, tokenizer, MAX_LEN, BATCH_SIZE)\ntest_data_loader = create_data_loader(df_test, tokenizer, MAX_LEN, BATCH_SIZE)","4358aee2":"data = next(iter(train_data_loader))\ndata.keys()","c698e23d":"print(data['input_ids'].shape)\nprint(data['attention_mask'].shape)\nprint(data['sentiments'].shape)","88ee59a9":"import torch.nn as nn\nimport torch.nn.functional as F\nimport numpy as np","f38e5a6a":"class IMDBClassifier(nn.Module):\n\n  def __init__(self, n_classes):\n    super(IMDBClassifier, self).__init__()\n    self.bert = BertModel.from_pretrained(PRE_TRAINED_MODEL_NAME)\n    self.drop = nn.Dropout(p=0.3)\n    self.out = nn.Linear(self.bert.config.hidden_size, n_classes)\n  \n  def forward(self, input_ids, attention_mask):\n    _, pooled_output = self.bert(\n      input_ids=input_ids,\n      attention_mask=attention_mask\n    )\n    output = self.drop(pooled_output)\n    return self.out(output)","fa555ced":"model = IMDBClassifier(len(df['sentiment'].unique()))\nmodel = model.to(device)","bb826d8b":"input_ids = data['input_ids'].to(device)\nattention_mask = data['attention_mask'].to(device)\n\nprint(input_ids.shape) # batch size x seq length\nprint(attention_mask.shape) # batch size x seq length","5702f325":"F.softmax(model(input_ids, attention_mask), dim=1)","3d8538b0":"EPOCHS = 4\n\noptimizer = AdamW(model.parameters(), lr=2e-5, correct_bias=False)\ntotal_steps = len(train_data_loader) * EPOCHS\n\nscheduler = get_linear_schedule_with_warmup(\n  optimizer,\n  num_warmup_steps=0,\n  num_training_steps=total_steps\n)\n\nloss_fn = nn.CrossEntropyLoss().to(device)","dcf9ef91":"def train_epoch(\n  model, \n  data_loader, \n  loss_fn, \n  optimizer, \n  device, \n  scheduler, \n  n_examples\n):\n  model = model.train()\n\n  losses = []\n  correct_predictions = 0\n  \n  for d in data_loader:\n    input_ids = d[\"input_ids\"].to(device)\n    attention_mask = d[\"attention_mask\"].to(device)\n    sentiments = d[\"sentiments\"].to(device)\n\n    outputs = model(\n      input_ids=input_ids,\n      attention_mask=attention_mask\n    )\n\n    _, preds = torch.max(outputs, dim=1)\n    loss = loss_fn(outputs, sentiments)\n\n    correct_predictions += torch.sum(preds == sentiments)\n    losses.append(loss.item())\n\n    loss.backward()\n    nn.utils.clip_grad_norm_(model.parameters(), max_norm=1.0)\n    optimizer.step()\n    scheduler.step()\n    optimizer.zero_grad()\n\n  return correct_predictions.double() \/ n_examples, np.mean(losses)","f7fb5abf":"def eval_model(model, data_loader, loss_fn, device, n_examples):\n  model = model.eval()\n\n  losses = []\n  correct_predictions = 0\n\n  with torch.no_grad():\n    for d in data_loader:\n      input_ids = d[\"input_ids\"].to(device)\n      attention_mask = d[\"attention_mask\"].to(device)\n      sentiments = d[\"sentiments\"].to(device)\n\n      outputs = model(\n        input_ids=input_ids,\n        attention_mask=attention_mask\n      )\n      _, preds = torch.max(outputs, dim=1)\n\n      loss = loss_fn(outputs, sentiments)\n\n      correct_predictions += torch.sum(preds == sentiments)\n      losses.append(loss.item())\n\n  return correct_predictions.double() \/ n_examples, np.mean(losses)","2aca4b03":"%%time\n\ntrain_a = []\ntrain_l = []\nval_a = []\nval_l = []\nbest_accuracy = 0\n\nfor epoch in range(EPOCHS):\n\n  print(f'Epoch {epoch + 1}\/{EPOCHS}')\n  print('-' * 10)\n\n  train_acc, train_loss = train_epoch(\n    model,\n    train_data_loader,    \n    loss_fn, \n    optimizer, \n    device, \n    scheduler, \n    len(df_train)\n  )\n\n  print(f'Train loss {train_loss} accuracy {train_acc}')\n\n  val_acc, val_loss = eval_model(\n    model,\n    val_data_loader,\n    loss_fn, \n    device, \n    len(df_val)\n  )\n\n  print(f'Val   loss {val_loss} accuracy {val_acc}')\n  print()\n\n  train_a.append(train_acc)\n  train_l.append(train_loss)\n  val_a.append(val_acc)\n  val_l.append(val_loss)\n\n  if val_acc > best_accuracy:\n    torch.save(model.state_dict(), 'best_model_state.bin')\n    best_accuracy = val_acc","5bb080f4":"plt.plot(train_a, label='train accuracy')\nplt.plot(val_a, label='validation accuracy')\n\nplt.title('Training history')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend()\nplt.ylim([0, 1]);","496e791d":"test_acc, _ = eval_model(\n  model,\n  test_data_loader,\n  loss_fn,\n  device,\n  len(df_test)\n)\n\ntest_acc.item()","5e6a83c0":"def get_predictions(model, data_loader):\n  model = model.eval()\n  \n  review = []\n  predictions = []\n  prediction_probs = []\n  real_values = []\n\n  with torch.no_grad():\n    for d in data_loader:\n\n      reviews = d[\"review\"]\n      input_ids = d[\"input_ids\"].to(device)\n      attention_mask = d[\"attention_mask\"].to(device)\n      sentiments = d[\"sentiments\"].to(device)\n\n      outputs = model(\n        input_ids=input_ids,\n        attention_mask=attention_mask\n      )\n      _, preds = torch.max(outputs, dim=1)\n\n      probs = F.softmax(outputs, dim=1)\n\n      review.extend(reviews)\n      predictions.extend(preds)\n      prediction_probs.extend(probs)\n      real_values.extend(sentiments)\n\n  predictions = torch.stack(predictions).cpu()\n  prediction_probs = torch.stack(prediction_probs).cpu()\n  real_values = torch.stack(real_values).cpu()\n  return review, predictions, prediction_probs, real_values","aafbc002":"y_review_texts, y_pred, y_pred_probs, y_test = get_predictions(\n  model,\n  test_data_loader\n)","58654043":"from sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nclass_names = ['negative', 'positive']","fa017b5f":"print(classification_report(y_test, y_pred, target_names=class_names))","01e6adc9":"def show_confusion_matrix(confusion_matrix):\n  hmap = sns.heatmap(confusion_matrix, annot=True, fmt=\"d\", cmap=\"Blues\")\n  hmap.yaxis.set_ticklabels(hmap.yaxis.get_ticklabels(), rotation=0, ha='right')\n  hmap.xaxis.set_ticklabels(hmap.xaxis.get_ticklabels(), rotation=30, ha='right')\n  plt.ylabel('True sentiment')\n  plt.xlabel('Predicted sentiment')\n\ncm = confusion_matrix(y_test, y_pred)\ndf_cm = pd.DataFrame(cm, index=class_names, columns=class_names)\nshow_confusion_matrix(df_cm)","f7e8d876":"idx = 2\n\nreview_text = y_review_texts[idx]\ntrue_sentiment = y_test[idx]\npred_df = pd.DataFrame({\n  'class_names': class_names,\n  'values': y_pred_probs[idx]\n})","c2bdc951":"print(review_text)\nprint()\nprint(f'True sentiment: {class_names[true_sentiment]}')","e82f82e1":"sns.barplot(x='values', y='class_names', data=pred_df, orient='h')\nplt.ylabel('sentiment')\nplt.xlabel('probability')\nplt.xlim([0, 1])","8beaeac8":"review_text = \"The film is too terrible I hate the characters actions and there's a lot of language mistakes\"","eadd629a":"encoded_review = tokenizer.encode_plus(\n  review_text,\n  max_length=MAX_LEN,\n  add_special_tokens=True,\n  return_token_type_ids=False,\n  pad_to_max_length=True,\n  return_attention_mask=True,\n  return_tensors='pt',\n)","dc22e830":"input_ids = encoded_review['input_ids'].to(device)\nattention_mask = encoded_review['attention_mask'].to(device)\n\noutput = model(input_ids, attention_mask)\n_, prediction = torch.max(output, dim=1)\n\nprint(f'Review text: {review_text}')\nprint(f'Sentiment  : {class_names[prediction]}')","3e74b21f":"# Training (fine-tuning of BERT for classification task)\n\nHow to come up with all hyperparameters? The BERT authors in this [paper](https:\/\/arxiv.org\/pdf\/1810.04805.pdf) have some recommendations for fine-tuning:\n\n* Batch size: 16, 32\n* Learning rate (Adam): 5e-5, 3e-5, 2e-5\n* Number of epochs: 2, 3, 4","b72eb797":"As it's shown by the figure above the dataset is perfectly balanced with equal number of reviews text for the two classes.\n0 means that the review is negative and 1 for positive","b3dc52d2":"We use the IMDB reviews dataset available from kaggle datasets through this link:\nhttps:\/\/www.kaggle.com\/lakshmi25npathi\/imdb-dataset-of-50k-movie-reviews","7736234f":"# Performance report ","de754035":"As you see here we get a training data tensor of size (batch_size * max_length) ","a4d937f2":"If you like it help with a simple up clic","7605c9c1":"# Predictions","b5feb77e":"In order to get the suitable sequence length we need to take a look at all reviews length and then select the most appropriate one","0851e264":"# Data exploration & visualization","f72ea2f7":"The Transformers library provides a wide variety of Transformer models (including BERT). It works with TensorFlow and PyTorch! It also includes prebuild tokenizers to do the heavy work required for bert model input.","23163768":"# Creating Dataset and Dataloader","80cbda00":"Some special tokens id:","c15d70fe":"# Reviews Classification with BERT and Hugging Face","7559ade3":"# Setup and imports\n\nLet's start with installing the transformers library and some required imports for the rest of the notebook","86977e43":"Here is a statring kernel that aims to do sentiment prediction on IMDB dataset using the famous BERT model in a simple way that allow everyone of you to understand how to apply it.\nI hope you'll enjoy this\nThis notebook is inspired from this tuto:\nhttps:\/\/www.curiousily.com\/posts\/sentiment-analysis-with-bert-and-hugging-face-using-pytorch-and-python\/","bfcfd460":"# BERT (Bidirectional Encoder Representations from Transformers)","0d45bea9":"# Predict on raw text"}}