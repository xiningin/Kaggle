{"cell_type":{"886ef143":"code","ff2be916":"code","91f3ce40":"code","c354ba52":"code","96bede14":"code","bbee4544":"code","bd95abe6":"code","c692f351":"code","27aa1a73":"code","6acc2188":"code","2b98c097":"code","8e5896fa":"code","18a3b797":"code","7641cabd":"code","fcf6535e":"code","fd4d4c60":"code","fb1ad2d5":"code","ee254ae0":"code","cba7ed7b":"code","99070f69":"code","78ac6583":"markdown"},"source":{"886ef143":"import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error","ff2be916":"bmw=pd.read_csv(\"..\/input\/used-car-dataset-ford-and-mercedes\/bmw.csv\")\nbmw.head()","91f3ce40":"bmw.isnull().sum()","c354ba52":"bmw.shape","96bede14":"bmw.dtypes","bbee4544":"bmw.describe","bd95abe6":"bmw.info","c692f351":"encoder = LabelEncoder()\nbmw['model'] = encoder.fit_transform(bmw['model'])\nmodel_mapping = {index : label for index, label in enumerate(encoder.classes_)}\nmodel_mapping","27aa1a73":"bmw['transmission'] = encoder.fit_transform(bmw['transmission'])\ntransmission_mapping = {index : label for index, label in enumerate(encoder.classes_)}\ntransmission_mapping","6acc2188":"bmw['fuelType'] = encoder.fit_transform(bmw['fuelType'])\nfuelType_mapping = {index : label for index, label in enumerate(encoder.classes_)}\nfuelType_mapping","2b98c097":"x = bmw.drop('price', axis=1)\ny = bmw['price']","8e5896fa":"scaler = MinMaxScaler(copy=True, feature_range=(0, 1))\nX = scaler.fit_transform(x)\n\n#showing data\nprint('x \\n' , X[:10])\nprint('y \\n' , y[:10])","18a3b797":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=30,random_state=0)","7641cabd":"print(\"x_train shape is:\",x_train.shape)","fcf6535e":"print(\"x_test shape is:\",x_test.shape)","fd4d4c60":"print(\"y_train shape is:\",y_train.shape)","fb1ad2d5":"print(\"y_test shape is:\",y_test.shape)","ee254ae0":"DecisionTreeRegressorModel = DecisionTreeRegressor( max_depth=3,random_state=33)\nDecisionTreeRegressorModel.fit(x_train, y_train)\n\nprint('DecisionTreeRegressor Train Score is : ' , DecisionTreeRegressorModel.score(x_train, y_train))\nprint('DecisionTreeRegressor Test Score is : ' , DecisionTreeRegressorModel.score(x_test, y_test))\nprint('----------------------------------------------------')\n\ny_pred = DecisionTreeRegressorModel.predict(x_test)\nprint('Predicted Value for DecisionTreeRegressorModel is : ' , y_pred[:10])","cba7ed7b":"RandomForestRegressorModel = RandomForestRegressor(n_estimators=100,max_depth=3, random_state=33)\nRandomForestRegressorModel.fit(x_train, y_train)\n\nprint('Random Forest Regressor Train Score is : ' , RandomForestRegressorModel.score(x_train, y_train))\nprint('Random Forest Regressor Test Score is : ' , RandomForestRegressorModel.score(x_test, y_test))\nprint('Random Forest Regressor No. of features are : ' , RandomForestRegressorModel.n_features_)\nprint('----------------------------------------------------')\n\ny_pred = RandomForestRegressorModel.predict(x_test)\nprint('Predicted Value for Random Forest Regressor is : ' , y_pred[:10])\n","99070f69":"MSEValue = mean_squared_error(y_test, y_pred, multioutput='uniform_average') # it can be raw_values\nprint('Mean Squared Error Value is : ', MSEValue)\n","78ac6583":"APLYING MINMAXSCALAR\n"}}