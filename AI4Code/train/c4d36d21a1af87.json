{"cell_type":{"9b32cc52":"code","7a01032d":"code","02a5ceee":"code","d0a1336b":"code","64417265":"code","0f4980e5":"code","20b90e33":"code","4bc43e03":"code","4e8b538b":"code","c328afb0":"code","bffa2424":"code","1bcbce9a":"code","f99097c0":"code","9adc4b57":"code","6d093e39":"code","95c49364":"code","a4604bff":"code","2b98259f":"code","da110463":"code","c83542cb":"code","5489a5d5":"code","65414a58":"code","cc2ca09a":"code","7a9d7232":"code","fff3f8a7":"code","cef0e261":"code","acc03993":"code","35491c32":"code","b24dcabf":"code","455aa2c4":"code","65cf8355":"code","73a956ea":"code","bb131160":"code","03f2dcd6":"code","ff24d62c":"code","3067b201":"code","09db1813":"code","47123825":"code","7cf0d88b":"code","5a49683f":"code","2809a0c1":"code","6a7d0e26":"code","d11dd7ca":"code","196d969f":"code","0aa916d0":"code","dc3cd2df":"code","ebdccc9a":"code","75c5c280":"code","cb4efc0e":"code","d06aa1da":"code","4bb0659d":"code","475482db":"code","b84e143d":"code","035d2348":"code","b1e22a90":"code","be04b036":"code","37d5eeaf":"code","a20d3eb3":"code","bc281d0a":"code","10c0169f":"code","1727b597":"code","ef45feb9":"code","f2d6e46c":"code","9bfea48a":"code","aa058b3a":"code","7cfd8392":"code","36d0c826":"code","71b36e69":"code","e0b14c84":"code","9c875ac4":"code","ee7ff547":"code","2bb5ba94":"code","bdfa1dbc":"code","5c815b25":"code","9b40aaa4":"code","887dfa3f":"code","601bc5fa":"code","07f94728":"code","68dae2d6":"code","9e84c7da":"code","1a71b6dd":"code","350f14c8":"code","d906afc7":"code","7eff216b":"code","6bec5530":"code","f848af5c":"code","702468bd":"code","d11eb266":"code","6762cbdb":"code","e8cc687c":"code","7fd5089e":"code","acec332d":"code","a8334072":"code","7608eac4":"code","e888732b":"code","5de575c1":"code","96978d7d":"code","d3fea17d":"code","3b85755d":"code","249f63f6":"code","10f41893":"markdown","f88346bc":"markdown","eab31bcb":"markdown","83b79dfa":"markdown","33c4c659":"markdown","ed978597":"markdown","065ad9ed":"markdown","910f8f82":"markdown","d51ac2c9":"markdown","582eddd0":"markdown","a1611d8f":"markdown","3bddaebf":"markdown","121f647a":"markdown","92c0ab91":"markdown","adf538f7":"markdown","8305cf6b":"markdown","236f34f0":"markdown","42697891":"markdown","a874d8dc":"markdown","912cfa29":"markdown","85f66800":"markdown","667a1a40":"markdown","2f3f6707":"markdown","48b1a738":"markdown","ac7ffc3d":"markdown","8eff8ff7":"markdown","fa6a746e":"markdown","ec815133":"markdown","620d2db1":"markdown","dcca0812":"markdown","1dec0fae":"markdown","b5dffe8a":"markdown","16d71910":"markdown","f6378df5":"markdown","89b3e263":"markdown","cb2a8256":"markdown","2cb90510":"markdown","0625470b":"markdown","5ed6ad5f":"markdown","68b6afca":"markdown","f312525b":"markdown","bbee6fbf":"markdown","9b23e724":"markdown","952e4140":"markdown","622d541f":"markdown","19c87be7":"markdown","ccdb3177":"markdown","9a68fd01":"markdown","eb1c8ade":"markdown","aff587b2":"markdown","85246a0a":"markdown","1f753abe":"markdown","4246c601":"markdown","4ca5a23e":"markdown","9f98bdb6":"markdown","0c74b59f":"markdown","28957535":"markdown","c7f5741d":"markdown","793d7e9b":"markdown","3bcd3478":"markdown","3d7fdc3c":"markdown","fb997960":"markdown","77600129":"markdown","eb895660":"markdown","41f0f809":"markdown","36530999":"markdown","71fe2634":"markdown","ab24273f":"markdown","5d3eb4e6":"markdown","a2ff32de":"markdown","40a2de72":"markdown","7725fe86":"markdown","0e314e3b":"markdown","a805bb88":"markdown","57f2ad94":"markdown","3b372d60":"markdown","93aa3c32":"markdown","4fbcdc8f":"markdown","f411fab1":"markdown","5a66e70c":"markdown","5d09a6fd":"markdown","49d3dc5e":"markdown","18076a00":"markdown","dbc5a586":"markdown","74bcbc0a":"markdown","5b564029":"markdown","70296ea5":"markdown","8bb5ae07":"markdown","db35c06d":"markdown","c8dcca34":"markdown","a26071bc":"markdown","cdf6defc":"markdown","d67814dd":"markdown","ad64d543":"markdown","00a22aa5":"markdown","63dd2850":"markdown","18bdd0d1":"markdown","d07da350":"markdown","470e9e3b":"markdown","0fb8d161":"markdown","42f24b80":"markdown"},"source":{"9b32cc52":"import numpy as np","7a01032d":"print(np.__version__)\nnp.show_config()","02a5ceee":"Z = np.zeros(10)\nprint(Z)","d0a1336b":"Z = np.zeros((10,10))\nprint(\"%d bytes\" % (Z.size * Z.itemsize))","64417265":"%run `python -c \"import numpy; numpy.info(numpy.add)\"`","0f4980e5":"Z = np.zeros(10)\nZ[4] = 1\nprint(Z)","20b90e33":"Z = np.arange(10,50)\nprint(Z)","4bc43e03":"Z = np.arange(50)\nZ = Z[::-1]\nprint(Z)","4e8b538b":"Z = np.arange(9).reshape(3,3)\nprint(Z)","c328afb0":"nz = np.nonzero([1,2,0,0,4,0])\nprint(nz)","bffa2424":"Z = np.eye(3)\nprint(Z)","1bcbce9a":"Z = np.random.random((3,3,3))\nprint(Z)","f99097c0":"Z = np.random.random((10,10))\nZmin, Zmax = Z.min(), Z.max()\nprint(Zmin, Zmax)","9adc4b57":"Z = np.random.random(30)\nm = Z.mean()\nprint(m)","6d093e39":"Z = np.ones((10,10))\nZ[1:-1,1:-1] = 0\nprint(Z)","95c49364":"Z = np.ones((5,5))\nZ = np.pad(Z, pad_width=1, mode='constant', constant_values=0)\nprint(Z)","a4604bff":"print(0 * np.nan)\nprint(np.nan == np.nan)\nprint(np.inf > np.nan)\nprint(np.nan - np.nan)\nprint(np.nan in set([np.nan]))\nprint(0.3 == 3 * 0.1)","2b98259f":"Z = np.diag(1+np.arange(4),k=-1)\nprint(Z)","da110463":"Z = np.zeros((8,8),dtype=int)\nZ[1::2,::2] = 1\nZ[::2,1::2] = 1\nprint(Z)","c83542cb":"print(np.unravel_index(100,(6,7,8)))","5489a5d5":"Z = np.tile( np.array([[0,1],[1,0]]), (4,4))\nprint(Z)","65414a58":"Z = np.random.random((5,5))\nZ = (Z - np.mean (Z)) \/ (np.std (Z))\nprint(Z)","cc2ca09a":"color = np.dtype([(\"r\", np.ubyte, 1),\n                  (\"g\", np.ubyte, 1),\n                  (\"b\", np.ubyte, 1),\n                  (\"a\", np.ubyte, 1)])","7a9d7232":"Z = np.dot(np.ones((5,3)), np.ones((3,2)))\nprint(Z)\n\n# Alternative solution, in Python 3.5 and above\nZ = np.ones((5,3)) @ np.ones((3,2))","fff3f8a7":"# Author: Evgeni Burovski\n\nZ = np.arange(11)\nZ[(3 < Z) & (Z <= 8)] *= -1\nprint(Z)","cef0e261":"# Author: Jake VanderPlas\n\nprint(sum(range(5),-1))\nfrom numpy import *\nprint(sum(range(5),-1))","acc03993":"Z**Z\n2 << Z >> 2\nZ <- Z\n1j*Z\nZ\/1\/1\nZ<Z>Z","35491c32":"print(np.array(0) \/ np.array(0))\nprint(np.array(0) \/\/ np.array(0))\nprint(np.array([np.nan]).astype(int).astype(float))","b24dcabf":"# Author: Charles R Harris\n\nZ = np.random.uniform(-10,+10,10)\nprint (np.copysign(np.ceil(np.abs(Z)), Z))","455aa2c4":"Z1 = np.random.randint(0,10,10)\nZ2 = np.random.randint(0,10,10)\nprint(np.intersect1d(Z1,Z2))","65cf8355":"# Suicide mode on\ndefaults = np.seterr(all=\"ignore\")\nZ = np.ones(1) \/ 0\n\n# Back to sanity\n_ = np.seterr(**defaults)\n\nAn equivalent way, with a context manager:\n\nwith np.errstate(divide='ignore'):\n    Z = np.ones(1) \/ 0","73a956ea":"np.sqrt(-1) == np.emath.sqrt(-1)","bb131160":"yesterday = np.datetime64('today', 'D') - np.timedelta64(1, 'D')\ntoday     = np.datetime64('today', 'D')\ntomorrow  = np.datetime64('today', 'D') + np.timedelta64(1, 'D')","03f2dcd6":"Z = np.arange('2016-07', '2016-08', dtype='datetime64[D]')\nprint(Z)","ff24d62c":"A = np.ones(3)*1\nB = np.ones(3)*2\nC = np.ones(3)*3\nnp.add(A,B,out=B)\nnp.divide(A,2,out=A)\nnp.negative(A,out=A)\nnp.multiply(A,B,out=A)","3067b201":"Z = np.random.uniform(0,10,10)\n\nprint (Z - Z%1)\nprint (np.floor(Z))\nprint (np.ceil(Z)-1)\nprint (Z.astype(int))\nprint (np.trunc(Z))","09db1813":"Z = np.zeros((5,5))\nZ += np.arange(5)\nprint(Z)","47123825":"def generate():\n    for x in range(10):\n        yield x\nZ = np.fromiter(generate(),dtype=float,count=-1)\nprint(Z)","7cf0d88b":"Z = np.linspace(0,1,11,endpoint=False)[1:]\nprint(Z)","5a49683f":"Z = np.random.random(10)\nZ.sort()\nprint(Z)","2809a0c1":"# Author: Evgeni Burovski\n\nZ = np.arange(10)\nnp.add.reduce(Z)","6a7d0e26":"A = np.random.randint(0,2,5)\nB = np.random.randint(0,2,5)\n\n# Assuming identical shape of the arrays and a tolerance for the comparison of values\nequal = np.allclose(A,B)\nprint(equal)\n\n# Checking both the shape and the element values, no tolerance (values have to be exactly equal)\nequal = np.array_equal(A,B)\nprint(equal)","d11dd7ca":"Z = np.zeros(10)\nZ.flags.writeable = False\nZ[0] = 1","196d969f":"Z = np.random.random((10,2))\nX,Y = Z[:,0], Z[:,1]\nR = np.sqrt(X**2+Y**2)\nT = np.arctan2(Y,X)\nprint(R)\nprint(T)","0aa916d0":"Z = np.random.random(10)\nZ[Z.argmax()] = 0\nprint(Z)","dc3cd2df":"Z = np.zeros((5,5), [('x',float),('y',float)])\nZ['x'], Z['y'] = np.meshgrid(np.linspace(0,1,5),\n                             np.linspace(0,1,5))\nprint(Z)","ebdccc9a":"# Author: Evgeni Burovski\n\nX = np.arange(8)\nY = X + 0.5\nC = 1.0 \/ np.subtract.outer(X, Y)\nprint(np.linalg.det(C))","75c5c280":"for dtype in [np.int8, np.int32, np.int64]:\n   print(np.iinfo(dtype).min)\n   print(np.iinfo(dtype).max)\nfor dtype in [np.float32, np.float64]:\n   print(np.finfo(dtype).min)\n   print(np.finfo(dtype).max)\n   print(np.finfo(dtype).eps)","cb4efc0e":"np.set_printoptions(threshold=np.nan)\nZ = np.zeros((16,16))\nprint(Z)","d06aa1da":"Z = np.arange(100)\nv = np.random.uniform(0,100)\nindex = (np.abs(Z-v)).argmin()\nprint(Z[index])","4bb0659d":"Z = np.zeros(10, [ ('position', [ ('x', float, 1),\n                                  ('y', float, 1)]),\n                   ('color',    [ ('r', float, 1),\n                                  ('g', float, 1),\n                                  ('b', float, 1)])])\nprint(Z)","475482db":"Z = np.random.random((10,2))\nX,Y = np.atleast_2d(Z[:,0], Z[:,1])\nD = np.sqrt( (X-X.T)**2 + (Y-Y.T)**2)\nprint(D)\n\n# Much faster with scipy\nimport scipy\n# Thanks Gavin Heverly-Coulson (#issue 1)\nimport scipy.spatial\n\nZ = np.random.random((10,2))\nD = scipy.spatial.distance.cdist(Z,Z)\nprint(D)","b84e143d":"Z = np.arange(10, dtype=np.float32)\nZ = Z.astype(np.int32, copy=False)\nprint(Z)","035d2348":"from io import StringIO\n\n# Fake file \ns = StringIO(\"\"\"1, 2, 3, 4, 5\\n\n                6,  ,  , 7, 8\\n\n                 ,  , 9,10,11\\n\"\"\")\nZ = np.genfromtxt(s, delimiter=\",\", dtype=np.int)\nprint(Z)","b1e22a90":"Z = np.arange(9).reshape(3,3)\nfor index, value in np.ndenumerate(Z):\n    print(index, value)\nfor index in np.ndindex(Z.shape):\n    print(index, Z[index])","be04b036":"X, Y = np.meshgrid(np.linspace(-1,1,10), np.linspace(-1,1,10))\nD = np.sqrt(X*X+Y*Y)\nsigma, mu = 1.0, 0.0\nG = np.exp(-( (D-mu)**2 \/ ( 2.0 * sigma**2 ) ) )\nprint(G)","37d5eeaf":"# Author: Divakar\n\nn = 10\np = 3\nZ = np.zeros((n,n))\nnp.put(Z, np.random.choice(range(n*n), p, replace=False),1)\nprint(Z)","a20d3eb3":"# Author: Warren Weckesser\n\nX = np.random.rand(5, 10)\n\n# Recent versions of numpy\nY = X - X.mean(axis=1, keepdims=True)\n\n# Older versions of numpy\nY = X - X.mean(axis=1).reshape(-1, 1)\n\nprint(Y)","bc281d0a":"# Author: Steve Tjoa\n\nZ = np.random.randint(0,10,(3,3))\nprint(Z)\nprint(Z[Z[:,1].argsort()])","10c0169f":"# Author: Warren Weckesser\n\nZ = np.random.randint(0,3,(3,10))\nprint((~Z.any(axis=0)).any())","1727b597":"Z = np.random.uniform(0,1,10)\nz = 0.5\nm = Z.flat[np.abs(Z - z).argmin()]\nprint(m)","ef45feb9":"A = np.arange(3).reshape(3,1)\nB = np.arange(3).reshape(1,3)\nit = np.nditer([A,B,None])\nfor x,y,z in it: z[...] = x + y\nprint(it.operands[2])","f2d6e46c":"class NamedArray(np.ndarray):\n    def __new__(cls, array, name=\"no name\"):\n        obj = np.asarray(array).view(cls)\n        obj.name = name\n        return obj\n    def __array_finalize__(self, obj):\n        if obj is None: return\n        self.info = getattr(obj, 'name', \"no name\")\n\nZ = NamedArray(np.arange(10), \"range_10\")\nprint (Z.name)","9bfea48a":"# Author: Brett Olsen\n\nZ = np.ones(10)\nI = np.random.randint(0,len(Z),20)\nZ += np.bincount(I, minlength=len(Z))\nprint(Z)\n\n# Another solution\n# Author: Bartosz Telenczuk\nnp.add.at(Z, I, 1)\nprint(Z)","aa058b3a":"# Author: Alan G Isaac\n\nX = [1,2,3,4,5,6]\nI = [1,3,9,3,4,1]\nF = np.bincount(I,X)\nprint(F)","7cfd8392":"# Author: Nadav Horesh\n\nw,h = 16,16\nI = np.random.randint(0,2,(h,w,3)).astype(np.ubyte)\n#Note that we should compute 256*256 first. \n#Otherwise numpy will only promote F.dtype to 'uint16' and overfolw will occur\nF = I[...,0]*(256*256) + I[...,1]*256 +I[...,2]\nn = len(np.unique(F))\nprint(n)","36d0c826":"A = np.random.randint(0,10,(3,4,3,4))\n# solution by passing a tuple of axes (introduced in numpy 1.7.0)\nsum = A.sum(axis=(-2,-1))\nprint(sum)\n# solution by flattening the last two dimensions into one\n# (useful for functions that don't accept tuples for axis argument)\nsum = A.reshape(A.shape[:-2] + (-1,)).sum(axis=-1)\nprint(sum)","71b36e69":"# Author: Jaime Fern\u00e1ndez del R\u00edo\n\nD = np.random.uniform(0,1,100)\nS = np.random.randint(0,10,100)\nD_sums = np.bincount(S, weights=D)\nD_counts = np.bincount(S)\nD_means = D_sums \/ D_counts\nprint(D_means)\n\n# Pandas solution as a reference due to more intuitive code\nimport pandas as pd\nprint(pd.Series(D).groupby(S).mean())","e0b14c84":"# Author: Mathieu Blondel\n\nA = np.random.uniform(0,1,(5,5))\nB = np.random.uniform(0,1,(5,5))\n\n# Slow version  \nnp.diag(np.dot(A, B))\n\n# Fast version\nnp.sum(A * B.T, axis=1)\n\n# Faster version\nnp.einsum(\"ij,ji->i\", A, B)","9c875ac4":"# Author: Warren Weckesser\n\nZ = np.array([1,2,3,4,5])\nnz = 3\nZ0 = np.zeros(len(Z) + (len(Z)-1)*(nz))\nZ0[::nz+1] = Z\nprint(Z0)","ee7ff547":"A = np.ones((5,5,3))\nB = 2*np.ones((5,5))\nprint(A * B[:,:,None])","2bb5ba94":"# Author: Eelco Hoogendoorn\n\nA = np.arange(25).reshape(5,5)\nA[[0,1]] = A[[1,0]]\nprint(A)","bdfa1dbc":"# Author: Nicolas P. Rougier\n\nfaces = np.random.randint(0,100,(10,3))\nF = np.roll(faces.repeat(2,axis=1),-1,axis=1)\nF = F.reshape(len(F)*3,2)\nF = np.sort(F,axis=1)\nG = F.view( dtype=[('p0',F.dtype),('p1',F.dtype)] )\nG = np.unique(G)\nprint(G)","5c815b25":"# Author: Jaime Fern\u00e1ndez del R\u00edo\n\nC = np.bincount([1,1,2,3,4,4,6])\nA = np.repeat(np.arange(len(C)), C)\nprint(A)","9b40aaa4":"# Author: Jaime Fern\u00e1ndez del R\u00edo\n\ndef moving_average(a, n=3) :\n    ret = np.cumsum(a, dtype=float)\n    ret[n:] = ret[n:] - ret[:-n]\n    return ret[n - 1:] \/ n\nZ = np.arange(20)\nprint(moving_average(Z, n=3))","887dfa3f":"# Author: Joe Kington \/ Erik Rigtorp\nfrom numpy.lib import stride_tricks\n\ndef rolling(a, window):\n    shape = (a.size - window + 1, window)\n    strides = (a.itemsize, a.itemsize)\n    return stride_tricks.as_strided(a, shape=shape, strides=strides)\nZ = rolling(np.arange(10), 3)\nprint(Z)","601bc5fa":"# Author: Nathaniel J. Smith\n\nZ = np.random.randint(0,2,100)\nnp.logical_not(Z, out=Z)\n\nZ = np.random.uniform(-1.0,1.0,100)\nnp.negative(Z, out=Z)","07f94728":"def distance(P0, P1, p):\n    T = P1 - P0\n    L = (T**2).sum(axis=1)\n    U = -((P0[:,0]-p[...,0])*T[:,0] + (P0[:,1]-p[...,1])*T[:,1]) \/ L\n    U = U.reshape(len(U),1)\n    D = P0 + U*T - p\n    return np.sqrt((D**2).sum(axis=1))\n\nP0 = np.random.uniform(-10,10,(10,2))\nP1 = np.random.uniform(-10,10,(10,2))\np  = np.random.uniform(-10,10,( 1,2))\nprint(distance(P0, P1, p))","68dae2d6":"# Author: Italmassov Kuanysh\n\n# based on distance function from previous question\nP0 = np.random.uniform(-10, 10, (10,2))\nP1 = np.random.uniform(-10,10,(10,2))\np = np.random.uniform(-10, 10, (10,2))\nprint(np.array([distance(P0,P1,p_i) for p_i in p]))","9e84c7da":"# Author: Nicolas Rougier\n\nZ = np.random.randint(0,10,(10,10))\nshape = (5,5)\nfill  = 0\nposition = (1,1)\n\nR = np.ones(shape, dtype=Z.dtype)*fill\nP  = np.array(list(position)).astype(int)\nRs = np.array(list(R.shape)).astype(int)\nZs = np.array(list(Z.shape)).astype(int)\n\nR_start = np.zeros((len(shape),)).astype(int)\nR_stop  = np.array(list(shape)).astype(int)\nZ_start = (P-Rs\/\/2)\nZ_stop  = (P+Rs\/\/2)+Rs%2\n\nR_start = (R_start - np.minimum(Z_start,0)).tolist()\nZ_start = (np.maximum(Z_start,0)).tolist()\nR_stop = np.maximum(R_start, (R_stop - np.maximum(Z_stop-Zs,0))).tolist()\nZ_stop = (np.minimum(Z_stop,Zs)).tolist()\n\nr = [slice(start,stop) for start,stop in zip(R_start,R_stop)]\nz = [slice(start,stop) for start,stop in zip(Z_start,Z_stop)]\nR[r] = Z[z]\nprint(Z)\nprint(R)","1a71b6dd":"# Author: Stefan van der Walt\n\nZ = np.arange(1,15,dtype=np.uint32)\nR = stride_tricks.as_strided(Z,(11,4),(4,4))\nprint(R)","350f14c8":"# Author: Stefan van der Walt\n\nZ = np.random.uniform(0,1,(10,10))\nU, S, V = np.linalg.svd(Z) # Singular Value Decomposition\nrank = np.sum(S > 1e-10)\nprint(rank)","d906afc7":"Z = np.random.randint(0,10,50)\nprint(np.bincount(Z).argmax())","7eff216b":"# Author: Chris Barker\n\nZ = np.random.randint(0,5,(10,10))\nn = 3\ni = 1 + (Z.shape[0]-3)\nj = 1 + (Z.shape[1]-3)\nC = stride_tricks.as_strided(Z, shape=(i, j, n, n), strides=Z.strides + Z.strides)\nprint(C)","6bec5530":"# Author: Eric O. Lebigot\n# Note: only works for 2d array and value setting using indices\n\nclass Symetric(np.ndarray):\n    def __setitem__(self, index, value):\n        i,j = index\n        super(Symetric, self).__setitem__((i,j), value)\n        super(Symetric, self).__setitem__((j,i), value)\n\ndef symetric(Z):\n    return np.asarray(Z + Z.T - np.diag(Z.diagonal())).view(Symetric)\n\nS = symetric(np.random.randint(0,10,(5,5)))\nS[2,3] = 42\nprint(S)","f848af5c":"# Author: Stefan van der Walt\n\np, n = 10, 20\nM = np.ones((p,n,n))\nV = np.ones((p,n,1))\nS = np.tensordot(M, V, axes=[[0, 2], [0, 1]])\nprint(S)\n\n# It works, because:\n# M is (p,n,n)\n# V is (p,n,1)\n# Thus, summing over the paired axes 0 and 0 (of M and V independently),\n# and 2 and 1, to remain with a (n,1) vector.","702468bd":"# Author: Robert Kern\n\nZ = np.ones((16,16))\nk = 4\nS = np.add.reduceat(np.add.reduceat(Z, np.arange(0, Z.shape[0], k), axis=0),\n                                       np.arange(0, Z.shape[1], k), axis=1)\nprint(S)","d11eb266":"# Author: Nicolas Rougier\n\ndef iterate(Z):\n    # Count neighbours\n    N = (Z[0:-2,0:-2] + Z[0:-2,1:-1] + Z[0:-2,2:] +\n         Z[1:-1,0:-2]                + Z[1:-1,2:] +\n         Z[2:  ,0:-2] + Z[2:  ,1:-1] + Z[2:  ,2:])\n\n    # Apply rules\n    birth = (N==3) & (Z[1:-1,1:-1]==0)\n    survive = ((N==2) | (N==3)) & (Z[1:-1,1:-1]==1)\n    Z[...] = 0\n    Z[1:-1,1:-1][birth | survive] = 1\n    return Z\n\nZ = np.random.randint(0,2,(50,50))\nfor i in range(100): Z = iterate(Z)\nprint(Z)","6762cbdb":"Z = np.arange(10000)\nnp.random.shuffle(Z)\nn = 5\n\n# Slow\nprint (Z[np.argsort(Z)[-n:]])\n\n# Fast\nprint (Z[np.argpartition(-Z,n)[:n]])","e8cc687c":"# Author: Stefan Van der Walt\n\ndef cartesian(arrays):\n    arrays = [np.asarray(a) for a in arrays]\n    shape = (len(x) for x in arrays)\n\n    ix = np.indices(shape, dtype=int)\n    ix = ix.reshape(len(arrays), -1).T\n\n    for n, arr in enumerate(arrays):\n        ix[:, n] = arrays[n][ix[:, n]]\n\n    return ix\n\nprint (cartesian(([1, 2, 3], [4, 5], [6, 7])))","7fd5089e":"Z = np.array([(\"Hello\", 2.5, 3),\n              (\"World\", 3.6, 2)])\nR = np.core.records.fromarrays(Z.T, \n                               names='col1, col2, col3',\n                               formats = 'S8, f8, i8')\nprint(R)","acec332d":"# Author: Ryan G.\n\nx = np.random.rand(5e7)\n\n%timeit np.power(x,3)\n%timeit x*x*x\n%timeit np.einsum('i,i,i->i',x,x,x)","a8334072":"# Author: Gabe Schwartz\n\nA = np.random.randint(0,5,(8,3))\nB = np.random.randint(0,5,(2,2))\n\nC = (A[..., np.newaxis, np.newaxis] == B)\nrows = np.where(C.any((3,1)).all(1))[0]\nprint(rows)","7608eac4":"# Author: Robert Kern\n\nZ = np.random.randint(0,5,(10,3))\nprint(Z)\n# solution for arrays of all dtypes (including string arrays and record arrays)\nE = np.all(Z[:,1:] == Z[:,:-1], axis=1)\nU = Z[~E]\nprint(U)\n# soluiton for numerical arrays only, will work for any number of columns in Z\nU = Z[Z.max(axis=1) != Z.min(axis=1),:]\nprint(U)","e888732b":"# Author: Warren Weckesser\n\nI = np.array([0, 1, 2, 3, 15, 16, 32, 64, 128])\nB = ((I.reshape(-1,1) & (2**np.arange(8))) != 0).astype(int)\nprint(B[:,::-1])\n\n# Author: Daniel T. McDonald\n\nI = np.array([0, 1, 2, 3, 15, 16, 32, 64, 128], dtype=np.uint8)\nprint(np.unpackbits(I[:, np.newaxis], axis=1))","5de575c1":"# Author: Jaime Fern\u00e1ndez del R\u00edo\n\nZ = np.random.randint(0,2,(6,3))\nT = np.ascontiguousarray(Z).view(np.dtype((np.void, Z.dtype.itemsize * Z.shape[1])))\n_, idx = np.unique(T, return_index=True)\nuZ = Z[idx]\nprint(uZ)\n\n# Author: Andreas Kouzelis\n# NumPy >= 1.13\nuZ = np.unique(Z, axis=0)\nprint(uZ)","96978d7d":"# Author: Alex Riley\n# Make sure to read: http:\/\/ajcr.net\/Basic-guide-to-einsum\/\n\nA = np.random.uniform(0,1,10)\nB = np.random.uniform(0,1,10)\n\nnp.einsum('i->', A)       # np.sum(A)\nnp.einsum('i,i->i', A, B) # A * B\nnp.einsum('i,i', A, B)    # np.inner(A, B)\nnp.einsum('i,j->ij', A, B)    # np.outer(A, B)","d3fea17d":"# Author: Bas Swinckels\n\nphi = np.arange(0, 10*np.pi, 0.1)\na = 1\nx = a*phi*np.cos(phi)\ny = a*phi*np.sin(phi)\n\ndr = (np.diff(x)**2 + np.diff(y)**2)**.5 # segment lengths\nr = np.zeros_like(x)\nr[1:] = np.cumsum(dr)                # integrate path\nr_int = np.linspace(0, r.max(), 200) # regular spaced path\nx_int = np.interp(r_int, r, x)       # integrate path\ny_int = np.interp(r_int, r, y)","3b85755d":"# Author: Evgeni Burovski\n\nX = np.asarray([[1.0, 0.0, 3.0, 8.0],\n                [2.0, 0.0, 1.0, 1.0],\n                [1.5, 2.5, 1.0, 0.0]])\nn = 4\nM = np.logical_and.reduce(np.mod(X, 1) == 0, axis=-1)\nM &= (X.sum(axis=-1) == n)\nprint(X[M])","249f63f6":"# Author: Jessica B. Hamrick\n\nX = np.random.randn(100) # random 1D array\nN = 1000 # number of bootstrap samples\nidx = np.random.randint(0, X.size, (N, X.size))\nmeans = X[idx].mean(axis=1)\nconfint = np.percentile(means, [2.5, 97.5])\nprint(confint)","10f41893":"#### 76. Consider a one-dimensional array Z, build a two-dimensional array whose first row is (Z\\[0\\],Z\\[1\\],Z\\[2\\]) and each subsequent row is  shifted by 1 (last row should be (Z\\[-3\\],Z\\[-2\\],Z\\[-1\\]) (\u2605\u2605\u2605)","f88346bc":"#### 16. How to add a border (filled with 0's) around an existing array? (\u2605\u2606\u2606)","eab31bcb":"#### 20. Consider a (6,7,8) shape array, what is the index (x,y,z) of the 100th element?","83b79dfa":"#### 98. Considering a path described by two vectors (X,Y), how to sample it using equidistant samples (\u2605\u2605\u2605)?","33c4c659":"#### 77. How to negate a boolean, or to change the sign of a float inplace? (\u2605\u2605\u2605)","ed978597":"#### 57. How to randomly place p elements in a 2D array? (\u2605\u2605\u2606)","065ad9ed":"#### 12. Create a 3x3x3 array with random values (\u2605\u2606\u2606)","910f8f82":"#### 6.  Create a null vector of size 10 but the fifth value which is 1 (\u2605\u2606\u2606)","d51ac2c9":"#### 73. Consider a set of 10 triplets describing 10 triangles (with shared vertices), find the set of unique line segments composing all the  triangles (\u2605\u2605\u2605)","582eddd0":"#### 83. How to find the most frequent value in an array?","a1611d8f":"#### 67. Considering a four dimensions array, how to get sum over the last two axis at once? (\u2605\u2605\u2605)","3bddaebf":"#### 25. Given a 1D array, negate all elements which are between 3 and 8, in place. (\u2605\u2606\u2606)","121f647a":"#### 3. Create a null vector of size 10 (\u2605\u2606\u2606)","92c0ab91":"# 100 numpy exercises\n\nThis is a collection of exercises that have been collected in the numpy mailing list, on stack overflow and in the numpy documentation. The goal of this collection is to offer a quick reference for both old and new users but also to provide a set of exercises for those who teach.\n\n\nIf you find an error or think you've a better way to solve some of them, feel free to open an issue at <https:\/\/github.com\/rougier\/numpy-100>","adf538f7":"#### 58. Subtract the mean of each row of a matrix (\u2605\u2605\u2606)","8305cf6b":"#### 72. How to swap two rows of an array? (\u2605\u2605\u2605)","236f34f0":"#### 75. How to compute averages using a sliding window over an array? (\u2605\u2605\u2605)","42697891":"#### 17. What is the result of the following expression? (\u2605\u2606\u2606)","a874d8dc":"#### 15. Create a 2d array with 1 on the border and 0 inside (\u2605\u2606\u2606)","912cfa29":"#### 49. How to print all the values of an array? (\u2605\u2605\u2606)","85f66800":"#### 27. Consider an integer vector Z, which of these expressions are legal? (\u2605\u2606\u2606)","667a1a40":"#### 9.  Create a 3x3 matrix with values ranging from 0 to 8 (\u2605\u2606\u2606)","2f3f6707":"#### 8.  Reverse a vector (first element becomes last) (\u2605\u2606\u2606)","48b1a738":"#### 85. Create a 2D array subclass such that Z\\[i,j\\] == Z\\[j,i\\] (\u2605\u2605\u2605)","ac7ffc3d":"#### 94. Considering a 10x3 matrix, extract rows with unequal values (e.g. \\[2,2,3\\]) (\u2605\u2605\u2605)","8eff8ff7":"#### 51. Create a structured array representing a position (x,y) and a color (r,g,b) (\u2605\u2605\u2606)","fa6a746e":"#### 21. Create a checkerboard 8x8 matrix using the tile function (\u2605\u2606\u2606)","ec815133":"#### 10. Find indices of non-zero elements from \\[1,2,0,0,4,0\\] (\u2605\u2606\u2606)","620d2db1":"#### 34. How to get all the dates corresponding to the month of July 2016? (\u2605\u2605\u2606)","dcca0812":"#### 71. Consider an array of dimension (5,5,3), how to mulitply it by an array with dimensions (5,5)? (\u2605\u2605\u2605)","1dec0fae":"#### 60. How to tell if a given 2D array has null columns? (\u2605\u2605\u2606)","b5dffe8a":"#### 97. Considering 2 vectors A & B, write the einsum equivalent of inner, outer, sum, and mul function (\u2605\u2605\u2605)","16d71910":"#### 79. Consider 2 sets of points P0,P1 describing lines (2d) and a set of points P, how to compute distance from each point j (P\\[j\\]) to each line i (P0\\[i\\],P1\\[i\\])? (\u2605\u2605\u2605)","f6378df5":"#### 35. How to compute ((A+B)\\*(-A\/2)) in place (without copy)? (\u2605\u2605\u2606)","89b3e263":"#### 50. How to find the closest value (to a given scalar) in a vector? (\u2605\u2605\u2606)","cb2a8256":"#### 62. Considering two arrays with shape (1,3) and (3,1), how to compute their sum using an iterator? (\u2605\u2605\u2606)","2cb90510":"#### 52. Consider a random vector with shape (100,2) representing coordinates, find point by point distances (\u2605\u2605\u2606)","0625470b":"#### 95. Convert a vector of ints into a matrix binary representation (\u2605\u2605\u2605)","5ed6ad5f":"#### 84. Extract all the contiguous 3x3 blocks from a random 10x10 matrix (\u2605\u2605\u2605)","68b6afca":"#### 13. Create a 10x10 array with random values and find the minimum and maximum values (\u2605\u2606\u2606)","f312525b":"#### 24. Multiply a 5x3 matrix by a 3x2 matrix (real matrix product) (\u2605\u2606\u2606)","bbee6fbf":"#### 5.  How to get the documentation of the numpy add function from the command line? (\u2605\u2606\u2606)","9b23e724":"#### 44. Consider a random 10x2 matrix representing cartesian coordinates, convert them to polar coordinates (\u2605\u2605\u2606)","952e4140":"#### 31. How to ignore all numpy warnings (not recommended)? (\u2605\u2606\u2606)","622d541f":"#### 61. Find the nearest value from a given value in an array (\u2605\u2605\u2606)","19c87be7":"#### 41. How to sum a small array faster than np.sum? (\u2605\u2605\u2606)","ccdb3177":"#### 56. Generate a generic 2D Gaussian-like array (\u2605\u2605\u2606)","9a68fd01":"#### 30. How to find common values between two arrays? (\u2605\u2606\u2606)","eb1c8ade":"#### 82. Compute a matrix rank (\u2605\u2605\u2605)","aff587b2":"#### 74. Given an array C that is a bincount, how to produce an array A such that np.bincount(A) == C? (\u2605\u2605\u2605)","85246a0a":"#### 19. Create a 8x8 matrix and fill it with a checkerboard pattern (\u2605\u2606\u2606)","1f753abe":"#### 29. How to round away from zero a float array ? (\u2605\u2606\u2606)","4246c601":"#### 54. How to read the following file? (\u2605\u2605\u2606)","4ca5a23e":"#### 46. Create a structured array with `x` and `y` coordinates covering the \\[0,1\\]x\\[0,1\\] area (\u2605\u2605\u2606)","9f98bdb6":"#### 65. How to accumulate elements of a vector (X) to an array (F) based on an index list (I)? (\u2605\u2605\u2605)","0c74b59f":"#### 66. Considering a (w,h,3) image of (dtype=ubyte), compute the number of unique colors (\u2605\u2605\u2605)","28957535":"#### 100. Compute bootstrapped 95% confidence intervals for the mean of a 1D array X (i.e., resample the elements of an array with replacement N times, compute the mean of each sample, and then compute percentiles over the means). (\u2605\u2605\u2605)","c7f5741d":"#### 80. Consider an arbitrary array, write a function that extract a subpart with a fixed shape and centered on a given element (pad with a `fill` value when necessary) (\u2605\u2605\u2605)","793d7e9b":"#### 81. Consider an array Z = \\[1,2,3,4,5,6,7,8,9,10,11,12,13,14\\], how to generate an array R = \\[\\[1,2,3,4\\], \\[2,3,4,5\\], \\[3,4,5,6\\], ..., \\[11,12,13,14\\]\\]? (\u2605\u2605\u2605)","3bcd3478":"#### 14. Create a random vector of size 30 and find the mean value (\u2605\u2606\u2606)","3d7fdc3c":"#### 59. How to sort an array by the nth column? (\u2605\u2605\u2606)","fb997960":"#### 48. Print the minimum and maximum representable value for each numpy scalar type (\u2605\u2605\u2606)","77600129":"#### 18. Create a 5x5 matrix with values 1,2,3,4 just below the diagonal (\u2605\u2606\u2606)","eb895660":"#### 33. How to get the dates of yesterday, today and tomorrow? (\u2605\u2606\u2606)","41f0f809":"#### 93. Consider two arrays A and B of shape (8,3) and (2,2). How to find rows of A that contain elements of each row of B regardless of the order of the elements in B? (\u2605\u2605\u2605)","36530999":"#### 89. How to get the n largest values of an array (\u2605\u2605\u2605)","71fe2634":"#### 99. Given an integer n and a 2D array X, select from X the rows which can be interpreted as draws from a multinomial distribution with n degrees, i.e., the rows which only contain integers and which sum to n. (\u2605\u2605\u2605)","ab24273f":"#### 26. What is the output of the following script? (\u2605\u2606\u2606)","5d3eb4e6":"#### 92. Consider a large vector Z, compute Z to the power of 3 using 3 different methods (\u2605\u2605\u2605)","a2ff32de":"#### 86. Consider a set of p matrices wich shape (n,n) and a set of p vectors with shape (n,1). How to compute the sum of of the p matrix products at once? (result has shape (n,1)) (\u2605\u2605\u2605)","40a2de72":"#### 4.  How to find the memory size of any array (\u2605\u2606\u2606)","7725fe86":"#### 69. How to get the diagonal of a dot product? (\u2605\u2605\u2605)","0e314e3b":"#### 11. Create a 3x3 identity matrix (\u2605\u2606\u2606)","a805bb88":"#### 2. Print the numpy version and the configuration (\u2605\u2606\u2606)","57f2ad94":"#### 64. Consider a given vector, how to add 1 to each element indexed by a second vector (be careful with repeated indices)? (\u2605\u2605\u2605)","3b372d60":"#### 96. Given a two dimensional array, how to extract unique rows? (\u2605\u2605\u2605)","93aa3c32":"#### 90. Given an arbitrary number of vectors, build the cartesian product (every combinations of every item) (\u2605\u2605\u2605)","4fbcdc8f":"#### 63. Create an array class that has a name attribute (\u2605\u2605\u2606)","f411fab1":"####  47. Given two arrays, X and Y, construct the Cauchy matrix C (Cij =1\/(xi - yj))","5a66e70c":"#### 91. How to create a record array from a regular array? (\u2605\u2605\u2605)","5d09a6fd":"#### 87. Consider a 16x16 array, how to get the block-sum (block size is 4x4)? (\u2605\u2605\u2605)","49d3dc5e":"#### 32. Is the following expressions true? (\u2605\u2606\u2606)","18076a00":"#### 78. Consider 2 sets of points P0,P1 describing lines (2d) and a point p, how to compute distance from p to each line i  (P0\\[i\\],P1\\[i\\])? (\u2605\u2605\u2605)","dbc5a586":"#### 23. Create a custom dtype that describes a color as four unsigned bytes (RGBA) (\u2605\u2606\u2606)","74bcbc0a":"#### 45. Create random vector of size 10 and replace the maximum value by 0 (\u2605\u2605\u2606)","5b564029":"#### 70. Consider the vector \\[1, 2, 3, 4, 5\\], how to build a new vector with 3 consecutive zeros interleaved between each value? (\u2605\u2605\u2605)","70296ea5":"#### 36. Extract the integer part of a random array using 5 different methods (\u2605\u2605\u2606)","8bb5ae07":"#### 68. Considering a one-dimensional vector D, how to compute means of subsets of D using a vector S of same size describing subset  indices? (\u2605\u2605\u2605)","db35c06d":"#### 42. Consider two random array A and B, check if they are equal (\u2605\u2605\u2606)","c8dcca34":"#### 38. Consider a generator function that generates 10 integers and use it to build an array (\u2605\u2606\u2606)","a26071bc":"#### 22. Normalize a 5x5 random matrix (\u2605\u2606\u2606)","cdf6defc":"#### 55. What is the equivalent of enumerate for numpy arrays? (\u2605\u2605\u2606)","d67814dd":"#### 37. Create a 5x5 matrix with row values ranging from 0 to 4 (\u2605\u2605\u2606)","ad64d543":"#### 1. Import the numpy package under the name `np` (\u2605\u2606\u2606)","00a22aa5":"#### 53. How to convert a float (32 bits) array into an integer (32 bits) in place?","63dd2850":"#### 39. Create a vector of size 10 with values ranging from 0 to 1, both excluded (\u2605\u2605\u2606)","18bdd0d1":"#### 40. Create a random vector of size 10 and sort it (\u2605\u2605\u2606)","d07da350":"#### 88. How to implement the Game of Life using numpy arrays? (\u2605\u2605\u2605)","470e9e3b":"#### 28. What are the result of the following expressions?","0fb8d161":"#### 7.  Create a vector with values ranging from 10 to 49 (\u2605\u2606\u2606)","42f24b80":"#### 43. Make an array immutable (read-only) (\u2605\u2605\u2606)"}}