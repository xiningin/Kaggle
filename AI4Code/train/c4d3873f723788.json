{"cell_type":{"ee8cc0fb":"code","a7c60260":"code","1f5d4d19":"code","3fe06765":"code","f616f64d":"code","3ce47bf2":"code","411b0f67":"code","ced5cb85":"code","ea2c4ca9":"code","d74aa56f":"code","6209cf69":"code","77623d19":"code","be86cc95":"code","b0c4315b":"code","c50f3704":"code","95990728":"markdown","844cbd2f":"markdown","64269561":"markdown","8a50a973":"markdown","876962db":"markdown","43364502":"markdown","65a282ed":"markdown","f48a567e":"markdown","a889d5c4":"markdown","bb390a7d":"markdown","34aa854b":"markdown","08a52161":"markdown"},"source":{"ee8cc0fb":"# This Python 3 environment comes with many helpful analytics libraries installedimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport numpy as np\n# plotly\n# import plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# word cloud library\nfrom wordcloud import WordCloud\n\n# matplotlib\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n# import warnings library\nimport warnings        \n# ignore filters\nwarnings.filterwarnings(\"ignore\") # if there is a warning after some codes, this will avoid us to see them.\nplt.style.use('ggplot') # style of plots. ggplot is one of the most used style, I also like it.\n# Any results you write to the current directory are saved as output.","a7c60260":"dataset=pd.read_csv(\"\/kaggle\/input\/us-counties-covid-19-dataset\/us-counties.csv\")","1f5d4d19":"dataset.info()","3fe06765":"dataset.drop(columns=\"fips\",inplace=True)","f616f64d":"dataset.info()","3ce47bf2":"dataset.describe()","411b0f67":"\ndata=dataset.groupby(\"state\").sum().reset_index()\n\ndat=[dict(\n    type=\"choropleth\",\n    locations=['AL', 'AK', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE',\"DC\", 'FL', 'GA',\"GU\", 'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MD', 'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NC', 'ND',\"NM\", 'OH', 'OK', 'OR', 'PA',\"PR\", 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT',\"VI\", 'VA', 'WA','WV', 'WI', 'WY'],\n    locationmode='USA-states',\n    z=data[\"cases\"],\n    text=data[\"state\"],\n    colorscale = [[0,\"rgb(5, 10, 172)\"],[0.85,\"rgb(40, 60, 190)\"],[0.9,\"rgb(70, 100, 245)\"],\n            [0.94,\"rgb(90, 120, 245)\"],[0.97,\"rgb(106, 137, 247)\"],[1,\"rgb(220, 220, 220)\"]],\n    autocolorscale=False,\n    reversescale=True,\n    marker=dict(\n        line=dict(\n            width=0.5,\n            color='rgba(100,100,100)',\n            ),\n        ),\n    colorbar=dict(\n        #autotick = False,\n        #tickprefix=\"\",\n        title=\"Total Cases\",\n        )  \n    )]\n\nlayout=dict(\n    title={\n        'text': \"Total Cases of States\",\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n    geo=dict(\n        showframe=False,\n        showcoastlines=True,\n        projection=dict(\n            type=\"albers usa\"\n            ),\n        scope=\"usa\"\n        )\n    \n    )\n\n\nfig=go.Figure(data=dat,layout=layout)\niplot(fig)","ced5cb85":"f = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(data.sort_values('cases')[\"state\"][-10:],data.sort_values('cases')[\"cases\"].values[-10:],color=\"darkcyan\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Confirmed Cases\",fontsize=18)\nplt.title(\"Top 10 States (Confirmed Cases)\",fontsize=20)\nplt.grid(alpha=0.3)\n","ea2c4ca9":"f = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(data.sort_values('deaths')[\"state\"][-10:],data.sort_values(\"deaths\")[\"deaths\"].values[-10:],color=\"crimson\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Death Cases\",fontsize=18)\nplt.title(\"Top 10 States (Death Cases)\",fontsize=20)\nplt.grid(alpha=0.3)","d74aa56f":"a=data.sort_values(\"deaths\")\nsizes=a[\"cases\"][-6:]\nlabels=a[\"state\"][-6:]\nexplode=[0,0,0,0,0,0]\ncolors=[\"orange\",\"red\",\"blue\",\"green\",\"yellow\",\"violet\"]\nplt.figure(figsize=(7,7))\nplt.pie(sizes,explode=[0.1]*6,labels=labels,colors=colors,autopct='%1.1f%%')\nplt.title('Death Rate Top 6 States',color = 'blue',fontsize = 15)","6209cf69":"a=[]\nfor x in dataset[\"date\"]:\n    a.append(x.split(\"-\")[1])\ndataset[\"Month\"]=a   \ndata=dataset.groupby(\"Month\").sum().reset_index()\ndata.replace(\"01\",\"January\",inplace=True)\ndata.replace(\"02\",\"February\",inplace=True)\ndata.replace(\"03\",\"March\",inplace=True)\ndata.replace(\"04\",\"April\",inplace=True)\ndata.replace(\"05\",\"Mai\",inplace=True)\ndata.replace(\"06\",\"June\",inplace=True)\ncases=[each for each in data.cases]\ndeaths=[each for each in data.deaths]\n\n\npie_list=[each for each in data.cases]\nlabels=data.Month\nfig={\n     \"data\":[\n         {\n         \"values\":pie_list,\n         \"labels\":labels,\n         \"domain\":{\"x\":[0,0.5]},\n         \"name\":\"Cases per Month\",\n         \"hoverinfo\":\"label+percent+name\",\n         \"hole\":.3,\n         \"type\":\"pie\"},],\n     \n     \"layout\":{\n          \"title\":\"Cases per Month\",\n          \"annotations\": [\n            { \"font\": { \"size\": 20},\n              \"showarrow\": False,\n              \"text\": \"Number of Cases\",\n                \"x\": 0.20,\n                \"y\": 1.19\n             },]\n     }\n    }\niplot(fig)            \n","77623d19":"from ipywidgets import widgets\n\ngd = dataset.groupby([\"date\",\"state\"])\n# Function for updating barplot with new values\ndef update_bar(change):\n    bar_out.clear_output()\n    try:\n        cases = gd.get_group((dates_sl.value, state_dr.value))[\"cases\"].sum()\n        deaths = gd.get_group((dates_sl.value, state_dr.value))[\"deaths\"].sum()\n    except:\n        cases = 0\n        deaths = 0\n    with bar_out:\n        bar_out.clear_output()\n        sns.barplot(data = pd.DataFrame({\n            \"cases\":[cases],\n            \"deaths\":[deaths]\n        }),palette = [\"blue\",\"red\"])\n        plt.show()\n\n# Dates Slider\ndates = np.sort(dataset[\"date\"].unique())\ndates_sl = widgets.SelectionSlider(options = dates,continuous_update=False)\ndates_sl.observe(update_bar, names = \"value\")\n\n# States Dropdown\nstate_dr = widgets.Dropdown(options = np.sort(dataset[\"state\"].unique()))\nstate_dr.observe(update_bar, names = \"value\")\n\nbar_out = widgets.Output()\n\nbar_container = widgets.VBox([\n    widgets.HBox([state_dr, dates_sl]),\n    bar_out\n])\n\nbar_container","be86cc95":"a=[]\nfor x in dataset[\"date\"]:\n    a.append(x.split(\"-\")[1])\ndataset[\"Month\"]=a   \ndata=dataset.groupby([\"Month\",\"state\"]).sum().reset_index()\ndata.replace(\"01\",\"January\",inplace=True)\ndata.replace(\"02\",\"February\",inplace=True)\ndata.replace(\"03\",\"March\",inplace=True)\ndata.replace(\"04\",\"April\",inplace=True)\ndata.replace(\"05\",\"Mai\",inplace=True)\ndata.replace(\"06\",\"June\",inplace=True)\n\n\n\nMonths = [str(each) for each in list(data.Month.unique())] # str unique years\n# make list of types\ncustom_colors = {\n    'cases': 'rgb(189, 2, 21)'\n}\n# make figure\nfigure = {\n    'data': [],\n    'layout': {},\n    'frames': []\n}\n\nfigure['layout']['geo'] = dict(\n        showframe=False,\n        showcoastlines=True,\n        projection=dict(\n            type=\"albers usa\"\n            ),\n        scope=\"usa\"\n        )\nfigure['layout']['hovermode'] = 'closest'\nfigure['layout']['sliders'] = {\n    'args': [\n        'transition', {\n            'duration': 400,\n            'easing': 'cubic-in-out'\n        }\n    ],\n    'initialValue': 'January',\n    'plotlycommand': 'animate',\n    'values': Months,\n    'visible': True\n}\nfigure['layout']['updatemenus'] = [\n    {\n        'buttons': [\n            {\n                'args': [None, {'frame': {'duration': 500, 'redraw': False},\n                         'fromcurrent': True, 'transition': {'duration': 300, 'easing': 'quadratic-in-out'}}],\n                'label': 'Play',\n                'method': 'animate'\n            },\n            {\n                'args': [[None], {'frame': {'duration': 0, 'redraw': False}, 'mode': 'immediate',\n                'transition': {'duration': 0}}],\n                'label': 'Pause',\n                'method': 'animate'\n            }\n        ],\n        'direction': 'left',\n        'pad': {'r': 10, 't': 87},\n        'showactive': False,\n        'type': 'buttons',\n        'x': 0.1,\n        'xanchor': 'right',\n        'y': 0,\n        'yanchor': 'top'\n    }\n]\n\nsliders_dict = {\n    'active': 0,\n    'yanchor': 'top',\n    'xanchor': 'left',\n    'currentvalue': {\n        'font': {'size': 20},\n        'prefix': 'Year:',\n        'visible': True,\n        'xanchor': 'right'\n    },\n    'transition': {'duration': 300, 'easing': 'cubic-in-out'},\n    'pad': {'b': 10, 't': 50},\n    'len': 0.9,\n    'x': 0.1,\n    'y': 0,\n    'steps': []\n}\n\n# make data\nMonth = \"January\"\n\ndataset_by_month = data[data['Month'] == Month]\ndata_dict = dict(\n    type=\"choropleth\",\n    locations=['AL', 'AK', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE',\"DC\", 'FL', 'GA',\"GU\", 'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MD', 'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NC', 'ND',\"NM\", 'OH', 'OK', 'OR', 'PA',\"PR\", 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT',\"VI\", 'VA', 'WA','WV', 'WI', 'WY'],\n    locationmode='USA-states',\n    z=data[\"cases\"],\n    colorscale = [[0,\"rgb(5, 10, 172)\"],[0.30,\"rgb(40, 60, 190)\"],[0.60,\"rgb(70, 100, 245)\"],\n            [0.80,\"rgb(90, 120, 245)\"],[0.97,\"rgb(106, 137, 247)\"],[1,\"rgb(220, 220, 220)\"]],\n    autocolorscale=False,\n    reversescale=True,\n    marker=dict(\n        line=dict(\n            width=0.5,\n            color='rgba(100,100,100)',\n            ),\n        ),\n    colorbar=dict(\n        #autotick = False,\n        #tickprefix=\"\",\n        title=\"Total Cases\",\n        )  \n    )\nfigure['data'].append(data_dict)\n    \n# make frames\nfor Month in Months:\n        frame = {'data': [], 'name': str(Month)}\n        dataset_by_year = data[data['Month'] == Month]\n        data_dict = dict(\n            type=\"choropleth\",\n            locations=['AL', 'AK', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE',\"DC\", 'FL', 'GA',\"GU\", 'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MD', 'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NC', 'ND',\"NM\", 'OH', 'OK', 'OR', 'PA',\"PR\", 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT',\"VI\", 'VA', 'WA','WV', 'WI', 'WY'],\n            locationmode='USA-states',\n            z=dataset_by_year[\"cases\"],\n            colorscale = [[0,\"rgb(5, 10, 172)\"],[0.30,\"rgb(40, 60, 190)\"],[0.60,\"rgb(70, 100, 245)\"],\n                    [0.80,\"rgb(90, 120, 245)\"],[0.97,\"rgb(106, 137, 247)\"],[1,\"rgb(220, 220, 220)\"]],\n            autocolorscale=False,\n            reversescale=True,\n            marker=dict(\n                line=dict(\n                    width=0.5,\n                    color='rgba(100,100,100)',\n                    ),\n                ),\n            colorbar=dict(\n                #autotick = False,\n                #tickprefix=\"\",\n                title=\"Total Cases\",\n                )  \n            )\n        frame['data'].append(data_dict)\n        figure['frames'].append(frame)\n        slider_step = {'args': [\n            [Month],\n            {'frame': {'duration': 500, 'redraw': True},\n             'mode': 'immediate',\n           'transition': {'duration': 300}}\n         ],\n         'label': Month,\n         'method': 'animate'}\n        sliders_dict['steps'].append(slider_step)\n\n\nfigure[\"layout\"][\"autosize\"]= True\nfigure[\"layout\"][\"title\"] = \"Animation Map Plot\"       \n\nfigure['layout']['sliders'] = [sliders_dict]\n\niplot(figure)","b0c4315b":"data = dataset.copy()\ndef cnvrt_month(num):\n    return {\n        1 : 'Jan',2:'Feb',\n        3 : 'Mar',4 : 'Apr',5 : 'May',\n        6 : 'Jun',7 : 'Jul',8 : 'Aug',\n        9 : 'Sep', 10 : 'Oct',11 : 'Nov',\n        12 : 'Dec'\n    }[num]\ndata[\"Month\"] = pd.DatetimeIndex(data[\"date\"]).month\ndata[\"Month\"] = data[\"Month\"].apply(cnvrt_month)\nmonths = {\n        1 : 'Jan',2:'Feb',\n        3 : 'Mar',4 : 'Apr',5 : 'May',\n        6 : 'Jun'#,7 : 'Jul',8 : 'Aug',\n        #9 : 'Sep', 10 : 'Oct',11 : 'Nov',\n        #12 : 'Dec'\n    }\n\nframe_dict = {}\nfor k,v in months.items():\n    df = data[data[\"Month\"] == v].groupby(\"state\")[\"cases\"].sum().nlargest(n = 5)\n    df = df.reset_index()\n    frame_dict[k] = df.sort_values(by = [\"cases\"])","c50f3704":"fig = go.Figure(\n    data = [\n            go.Bar(\n                x = frame_dict[1][\"cases\"], y = frame_dict[1][\"state\"],orientation = \"h\",\n                text = frame_dict[1][\"cases\"], textposition = \"inside\",\n                insidetextanchor = \"middle\"\n            )\n    ],\n    layout = go.Layout(\n        xaxis = dict(range=[0,100],autorange = True),\n        yaxis = dict(range = [-0.5,5.5],autorange = True),\n        title = dict(text = \"Top 5 states for total cases in Jan\",xanchor = \"left\"),\n        updatemenus=[dict(\n            type=\"buttons\",\n            buttons=[dict(label=\"Play\",\n                          method=\"animate\",\n                          args=[None,\n                          {\"frame\": {\"duration\": 1250, \"redraw\": True},\n                          \"transition\": {\"duration\":250}}]\n            )]\n        )]\n    ),\n    frames = [\n              go.Frame(\n                  data = [go.Bar(\n                            x = frame_dict[k][\"cases\"], y = frame_dict[k][\"state\"],orientation = \"h\",\n                            text = frame_dict[k][\"cases\"], textposition = \"inside\",\n                            insidetextanchor = \"middle\"\n                          )\n                  ],\n                  layout = go.Layout(\n                            xaxis = dict(range=[14,frame_dict[k][\"cases\"][0]+frame_dict[k][\"cases\"][3]],autorange = True),\n                            yaxis = dict(range = [-0.5,5],autorange = False),\n                            title = dict(text = \"Top 5 states for total cases in \"+months[k],xanchor = \"left\"),\n                          )\n              )\n              for k,v in frame_dict.items() \n    ]\n\n)\nfig.show()","95990728":"<a id = \"10\"><\/a><br>\n# Animation","844cbd2f":"<a id = \"2\"><\/a><br>\n# Variable Description\n1. Date: It show Date\n1. County: Name of County\n1. State: Name of State\n1. Cases: Case of each day\n1. Death: death of each day\n","64269561":"<a id = \"9\"><\/a><br>\n# \u0130pywidget Bar Plot","8a50a973":"<a id = \"4\"><\/a><br>\n# Visualition","876962db":"<a id = \"8\"><\/a><br>\n# Plotly Pie","43364502":"<a id = \"5\"><\/a><br>\n# USA MAP","65a282ed":"<a id = \"7\"><\/a><br>\n# Pie Plot","f48a567e":"<a id = \"1\"><\/a><br>\n# Load and Check Data","a889d5c4":"# Introduction\nThe COVID-19 pandemic, also known as the coronavirus pandemic, is an ongoing pandemic of coronavirus disease 2019 (COVID\u201119), caused by severe acute respiratory syndrome coronavirus 2 (SARS\u2011CoV\u20112). The outbreak was first identified in Wuhan, China, in December 2019. The World Health Organization declared the outbreak a Public Health Emergency of International Concern on 30 January 2020, and a pandemic on 11 March. As of 15 June 2020, more than 7.9 million cases of COVID-19 have been reported in more than 188 countries and territories, resulting in more than 433,000 deaths; more than 3.76 million people have recovered.\n\n\n<font color = 'blue'>\nContent: \n\n1. [Load and Check Data](#1)\n1. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n1. [Visualization](#4)\n   * [USA MAP](#5)   \n   * [Bar Plot](#6)\n   * [Pie Plot](#7)\n   * [Plotly Pie](#8) \n   * [Ipywidget Bar Plot](#9)\n   * [Map Animation](#10)\n   * [Animation Bar plot](#11)","bb390a7d":"<a id = \"6\"><\/a><br>\n# Bar Plot","34aa854b":"<a id = \"3\"><\/a><br>\n# Univariate Variable Analysis\n* Categorical Variable: County State \n* Numerical Variable: Deaths, Cases","08a52161":"<a id = \"11\"><\/a><br>\n# Animation Bar Plot"}}