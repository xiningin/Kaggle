{"cell_type":{"1a470cca":"code","10492613":"code","deb60bdd":"code","17b883c1":"code","a11f6cda":"code","f2ee8e36":"code","73f69a75":"code","cd8c18a7":"code","bb5f2749":"code","5539a816":"code","93b14c79":"markdown","df70ab38":"markdown","6d7dba41":"markdown","71c5e201":"markdown","06f28c2d":"markdown","b224ec76":"markdown","b5fb1218":"markdown","85fc4159":"markdown","65de9d07":"markdown"},"source":{"1a470cca":"!pip install modin[dask]\n!pip install modin[ray]\n!pip install -U ipykernel\n\n","10492613":"import time#creates a time comparison report for modin and pandas\nimport numpy as np\nimport pandas as pd\nimport modin.pandas as md\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","deb60bdd":"s = time.time()\ndf_pandas = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ne = time.time()\nprint(\"Pandas Loading Time = {}\".format(e-s))","17b883c1":"s = time.time()\ndf_modin = md.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ne = time.time()\nprint(\"Modin Loading Time = {}\".format(e-s))","a11f6cda":"s = time.time()\ndf_pandas_concat = pd.concat([df_pandas for _ in range(5)])\ne = time.time()\nprint(\"Pandas Concat Time = {}\".format(e-s))","f2ee8e36":"s = time.time()\ndf_modin_concat = md.concat([df_modin for _ in range(5)])\ne = time.time()\nprint(\"Modin Concat Time = {}\".format(e-s))","73f69a75":"s = time.time()\nt_pandas = df_pandas_concat.isnull()\ne = time.time()\nprint(\"Pandas Null Time Check = {}\".format(e-s))","cd8c18a7":"s = time.time()\nt_modin = df_modin_concat.isnull()\ne = time.time()\nprint(\"Modin Null Time Check = {}\".format(e-s))","bb5f2749":"s = time.time()\nmax_pandas = df_pandas_concat[\"Fare\"].max()\ne = time.time()\nprint (\"Max value in Pandas Dataframe = {}\".format(max_pandas))\nprint(\"Pandas Count Time = {}\".format(e-s))","5539a816":"s = time.time()\nmax_modin = df_modin_concat[\"Fare\"].max()\ne = time.time()\nprint (\"Max value in Modin Dataframe = {}\".format(max_modin))\nprint(\"Modin Count Time = {}\".format(e-s))","93b14c79":"# If you found this notebook helpful or you just liked it , some upvotes would be very much appreciated - That will keep me motivated to update it on a regular basis :-)","df70ab38":"Here based on filesize of titanic data, pandas takes a lesser amount of time to load data file into data frame..Now let's check if concat operation follows the same pattern or not","6d7dba41":"# Null Check Comparision","71c5e201":"# Exploring with dataset\nYou can try on any dataset .I used the kaggle Titanic: Machine Learning from Disaster.Just for hands on purpose\nRefer the link :https:\/\/www.kaggle.com\/c\/titanic\/data","06f28c2d":"Modin concat time is much lesser than Pandas concat time","b224ec76":"# Max Value Comparision","b5fb1218":"\nModin uses Ray to provide an effortless way to speed up your pandas notebooks, scripts, and libraries. Unlike other distributed DataFrame libraries, Modin provides seamless integration and compatibility with existing pandas code. Even using the DataFrame constructor is identical.\nModin accelerates Pandas queries by 4x on an 8-core machine, only requiring users to change a single line of code in their notebooks.\n\nLink to the Modin Library : https:\/\/github.com\/modin-project\/modin\n\nFor more information related to Modin refer to:https:\/\/modin.readthedocs.io\/en\/latest\/","85fc4159":"Summmary: Why dont we use Modin instead of Pandas in our Workflow?\nThe reason is all mathematical operations performed using Modin are not as fast as compared with Pandas df.Here max value of fare was founded quickly using Pandas df as compared to a Modin df","65de9d07":"# Concat time Comparison"}}