{"cell_type":{"463b1b09":"code","14b59935":"code","18243573":"code","cec8c6cf":"code","1d892c4a":"code","e1354ae4":"code","4e1f6861":"code","4cd389de":"code","5f19168b":"code","db41a4ce":"markdown","058a572d":"markdown","748ffdf7":"markdown","23222088":"markdown","e785859d":"markdown"},"source":{"463b1b09":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport plotly as py\nimport plotly_express as px\nimport plotly.graph_objects as go\nfrom matplotlib import pyplot as plt\nimport folium\nfrom folium import plugins\nfrom plotly.offline import init_notebook_mode, iplot\nimport os\ninit_notebook_mode()\n\ndf = pd.read_csv('\/kaggle\/input\/beat-bobby-flay-results-of-over-300-episodes\/beatbobbyflay.csv')","14b59935":"df.winner.value_counts()['Bobby Flay'] \/ df.shape[0]","18243573":"judges = list(df.judge1.unique())\njudges.extend(list(df.judge2.unique()))\njudges.extend(list(df.judge3.unique()))\njudges = list(set(judges))\n\nappearances = []\nbobby_win = []\nbobby_lose = []\nbobby_win_percentage = []\n\nfor judge in judges:\n    results = df[df[['judge1', 'judge2','judge3']].isin([judge]).any(axis=1)].winner.value_counts()\n    appearances.append(results.sum())\n    if \"Bobby Flay\" in results:\n        bwin = results[\"Bobby Flay\"]\n        blose = results.sum() - bwin\n    else:\n        bwin = 0\n        blose = results.sum()\n    bobby_win.append(bwin)\n    bobby_lose.append(blose)\n    bobby_win_percentage.append(bwin\/results.sum())\n    \ndf_judge = pd.DataFrame.from_dict({\n    'judge':judges,\n    'appearances':appearances,\n    'bobby_win':bobby_win,\n    'bobby_lose':bobby_lose,\n    'bobby_win_percentage':bobby_win_percentage\n})\n    \ndf_judge = df_judge[df_judge.appearances >= 5]\ndf_judge.sort_values(by = ['bobby_win_percentage'], inplace=True, ascending=False)\nfig = px.bar(df_judge, x = 'judge', y = 'bobby_win_percentage', color = 'appearances', hover_data = ['appearances','bobby_win_percentage'])\nfig.update_layout(xaxis_title ='Judge',\n                  yaxis_title = 'Bobby Flay Win Percentage',\n                 yaxis_tickformat = ',.0%')\nfig.show()","cec8c6cf":"guests = list(df.guest1.unique())\nguests.extend(list(df.guest2.unique()))\nguests.extend(list(df.guest3.unique()))\nguests = list(set(guests))\nguests = [x for x in guests if str(x) != 'nan']\n\nappearances = []\nbobby_win = []\nbobby_lose = []\ncontestant_win_percentage = []\n\nfor guest in guests:\n    results = df[df[['guest1', 'guest2','guest3']].isin([guest]).any(axis=1)].winner.value_counts()\n    appearances.append(results.sum())\n    if \"Bobby Flay\" in results:\n        bwin = results[\"Bobby Flay\"]\n        blose = results.sum() - bwin\n    else:\n        bwin = 0\n        blose = results.sum()\n    bobby_win.append(bwin)\n    bobby_lose.append(blose)\n    contestant_win_percentage.append(blose\/results.sum())\n    \ndf_guest = pd.DataFrame.from_dict({\n    'guest_judge':guests,\n    'appearances':appearances,\n    'bobby_win':bobby_win,\n    'bobby_lose':bobby_lose,\n    'contestant_win_percentage':contestant_win_percentage\n})\n    \ndf_guest = df_guest[df_guest.appearances >= 5]\ndf_guest.sort_values(by = ['contestant_win_percentage'], inplace=True, ascending=False)\nfig = px.bar(df_guest, x = 'guest_judge', y = 'contestant_win_percentage', color = 'appearances', hover_data = ['appearances','contestant_win_percentage'])\nfig.update_layout(xaxis_title ='Guest Judge',\n                  yaxis_title = 'Contestant Win Percentage',\n                 yaxis_tickformat = ',.0%')\nfig.show()\n","1d892c4a":"def check_bobby_win(winner):\n    if winner == 'Bobby Flay':\n        return 1\n    else:\n        return 0\n\ndf['bobby_win'] = df['winner'].apply(lambda x: check_bobby_win(x))\ndf_season = df[['season','bobby_win']].groupby(['season']).agg('mean').reset_index()\nfig = px.bar(df_season, x = 'season', y = 'bobby_win', color = 'bobby_win')\nfig.update_layout(xaxis_title ='Season',\n                  yaxis_title = 'Bobby Flay Win Percentage',\n                 yaxis_tickformat = ',.0%')\nfig.show()","e1354ae4":"df_ingredients = pd.read_json('\/kaggle\/input\/recipe-ingredients-dataset\/train.json')","4e1f6861":"def get_cuisine(ingredient):\n    cuisine_makeup = dict.fromkeys(list(df_ingredients.cuisine.unique()),0)\n    for i in range(df_ingredients.shape[0]):\n        ingredients = df_ingredients.loc[i, 'ingredients']\n        if ingredient in ingredients:\n            cuisine_makeup[df_ingredients.loc[i, 'cuisine']] = cuisine_makeup[df_ingredients.loc[i, 'cuisine']] + 1\n    return cuisine_makeup\n\ndef create_cuisine_feature(cuisine_makeup, cuisine):\n    return cuisine_makeup[cuisine]\n\n\ndf['cuisine'] = df['ingredients'].apply(lambda x: get_cuisine(x))\n\nfor cuisine in list(df_ingredients.cuisine.unique()):\n    df[cuisine] = df['cuisine'].apply(lambda x: create_cuisine_feature(x, cuisine))        ","4cd389de":"train_columns = list(df_ingredients.cuisine.unique())\n\ndf_train = df[train_columns]\ndf_train = df_train.div(df_train.sum(axis=1), axis=0)\n\ndf_label = df['bobby_win']","5f19168b":"from sklearn.linear_model import LogisticRegression\n\ndf_label = df_label[df_train.italian.notnull()]\ndf_train = df_train[df_train.italian.notnull()]\n\nclf = LogisticRegression(random_state=0).fit(df_train, df_label)\nprint(\"Logistic Regression score:\")\nprint(clf.score(df_train, df_label))\nfig = px.bar(x = list(df_train.columns), y= list(clf.coef_))\nfig.show()","db41a4ce":"Which judges are favorable\/unfavorable towards Bobby Flay? Let's only look at judges with 5 or more appearances on the show.","058a572d":"Which seasons did Bobby Flay fare the best\/worst?","748ffdf7":"Logistic Regression model indicates that when the ingredient of the first round is predominately found in chinese and french dishes, that predicts Bobby Flay will lose. When the ingredient of the first round is predominately found in southern us or mexican dishes, that predicts Bobby Flay will win.","23222088":"How good\/bad are the guest judges at picking competitors who can beat Bobby Flay?","e785859d":"What is Bobby Flay's Win Percentage?"}}