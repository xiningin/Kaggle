{"cell_type":{"7d0416f2":"code","cacd7e76":"code","083931eb":"code","444bd733":"code","b8954809":"code","6e8bdabe":"code","f6c4e38c":"code","f17eadb4":"code","593f539d":"code","6ce9e307":"code","b5d72ff3":"code","208be21b":"code","0b8c9195":"code","73fe50d0":"code","cc3255a5":"markdown"},"source":{"7d0416f2":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","cacd7e76":"train_df=pd.read_csv(\"..\/input\/seti-breakthrough-listen\/train_labels.csv\")\nsubmission=pd.read_csv(\"..\/input\/seti-breakthrough-listen\/sample_submission.csv\")\nleak_train=pd.read_csv(\"..\/input\/leak-seti\/leak_train.csv\")\nleak_test=pd.read_csv(\"..\/input\/leak-seti\/leak_test.csv\")\n","083931eb":"leak_train","444bd733":"leak_test","b8954809":"columns = [\"st_mtime\"]\n# leak_train.drop(\"id\",axis=1, inplace=True)\nleak_train = pd.DataFrame(leak_train,columns = columns)\n# leak_test.drop(\"id\",axis=1, inplace=True)\nleak_test = pd.DataFrame(leak_test, columns = columns)","6e8bdabe":"leak_train.head()","f6c4e38c":"leak_test.head()","f17eadb4":"####extract file created time for the numpy files stored in train\/test\n#code to extract the leak - it ONLY WORKS IF YOU DOWNLOAD THE DATA LOCALLY - IT DOES NOT WORK INSIDE THE KERNEL\n# I have provided these files as leak_train.csv and leak_test.csv\n\n\"\"\"\nimport pathlib \n\n#create path column\ntrain_ids=train_df.id.values.tolist()\nnumerical_train=[]\nfor j in range(len(train_ids)):\n            this_id=str(train_ids[j])\n            paths=\"..\/input\/seti-breakthrough-listen\/train\/\" +  this_id[0] +\"\/\" + this_id + \".npy\"\n            fname = pathlib.Path(paths) # <------- extract file created date and other stats related with the file\n            stats=fname.stat()# <------- extract file created date and other stats related with the file\n            stats=[float(j) for j in stats]\n            numerical_train.append(stats)\n            #path_ids.append(paths)\n            \nX=np.array(numerical_train)    \n#train_df[\"path\"]=path_ids\n\n\ntest_ids=submission.id.values.tolist()\nnumerical_test=[]\nfor j in range(len(test_ids)):\n            this_id=str(test_ids[j])\n            paths=\"..\/input\/seti-breakthrough-listen\/test\/\" +  this_id[0] +\"\/\" + this_id + \".npy\"\n            fname = pathlib.Path(paths) # <------- extract file created date and other stats related with the file\n            stats=fname.stat() # <------- extract file created date and other stats related with the file\n            stats=[float(j) for j in stats]            \n            numerical_test.append(stats)\n            \nX_test=np.array(numerical_test) \n\"\"\"","593f539d":"y=train_df.target","6ce9e307":"leak_test_values = leak_test.values\nleak_test.values.shape","b5d72ff3":"leak_train_values = leak_train.values.transpose([1, 0])\nleak_train_values.shape","208be21b":"results = []","0b8c9195":"leak_values = np.abs(leak_test_values[:10000] - leak_train_values)\nleak_values = leak_values.argmin(axis=1)\ntest_preds = y.values[leak_values]\nresults.append(test_preds)\n\n\nleak_values = np.abs(leak_test_values[10000:20000] - leak_train_values)\nleak_values = leak_values.argmin(axis=1)\ntest_preds = y.values[leak_values]\nresults.append(test_preds)\n\nleak_values = np.abs(leak_test_values[20000:] - leak_train_values)\nleak_values = leak_values.argmin(axis=1)\ntest_preds = y.values[leak_values]\nresults.append(test_preds)\n\ntest_preds = np.concatenate(results, axis=0).astype(np.float32)\n\ntest_preds.shape","73fe50d0":"submission[\"target\"]=test_preds\nsubmission.to_csv(\"submission.csv\" , index=False)","cc3255a5":"## based on the work from https:\/\/www.kaggle.com\/kazanova\/leak-submission-lb-0-991"}}