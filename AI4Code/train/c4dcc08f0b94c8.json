{"cell_type":{"b0880261":"code","eb672b92":"code","a2403fd2":"code","4791725f":"code","b0ca0466":"code","2159d034":"code","0ebf633a":"code","5678d28b":"code","de2a4b7c":"code","14aab918":"markdown","0837dbe7":"markdown","24fb1f76":"markdown","8092e099":"markdown","2a79f76a":"markdown","0dcfbe0c":"markdown","b18dca76":"markdown","cc8730d3":"markdown","1d927a49":"markdown","7441dce8":"markdown","230983bb":"markdown"},"source":{"b0880261":"from IPython.display import display, clear_output\nimport ipywidgets as ipy\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\n\nimport numpy as np","eb672b92":"def plot_one(input_matrix, title='Image', size=(5, 5)):\n    cmap = colors.ListedColormap(\n        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\n    norm = colors.Normalize(vmin=0, vmax=9)\n    \n    _, ax = plt.subplots(1, 1, figsize=size)\n\n    ax.imshow(input_matrix, cmap=cmap, norm=norm)\n    ax.grid(True,which='both',color='lightgrey', linewidth=0.5)    \n    ax.set_yticks([x-0.5 for x in range(1+len(input_matrix))])\n    ax.set_xticks([x-0.5 for x in range(1+len(input_matrix[0]))])     \n    ax.set_xticklabels([])\n    ax.set_yticklabels([])\n    ax.set_title(title)","a2403fd2":"# Initial matrix\nA = np.zeros((10, 10))\nA[1:2, 6:9] = 1\nA[3:4, 6:9] = 1\nA[2, 6]=1\nA[2, 8] = 1\nA[4:9, 0:1] = 1\nA[4:9, 4:5] = 1\nA[4:5, 1:4] = 1\nA[8:9, 1:4] = 1\nA[6, 2] = 1","4791725f":"plot_one(A)","b0ca0466":"# Sequential filling\ngreen = 3\npink = 6\nfills = [(5, 1, green), (5, 2, green), (5, 3, green), (6, 3, green), (7, 3, green), \n         (7, 2, green), (7, 1, green), (6, 1, green), (2, 7, pink)]","2159d034":"# Generate evolution of original matrix\nsteps = [A.copy()]\nfor (i, j, color) in fills:\n    A[i, j] = color\n    steps.append(A.copy())","0ebf633a":"# Not a mandatory param, but maybe you want to link the state of a matrix to a specific strategy\nstrategies = ['Initial stage'] + ['Fill green']*8 + ['Fill pink']","5678d28b":"class PlayerAndImage():\n    \n    def __init__(self, steps, strategies=[], pause=500, start_step=0):\n        self.steps = steps\n        self.n = len(steps)\n        self.pause = pause\n        self.start_step = start_step\n\n    def update(self, idx):\n        with self.out:\n            clear_output(wait=True)\n            title = (strategies and f\"Strategy: {strategies[idx]}\") or None\n            plot_one(steps[idx], title=title)\n            plt.show()\n\n    def make_player_and_image(self):\n\n        self.out = ipy.Output(layout=ipy.Layout(width='400px', height='400px'))\n\n        # Slider widget\n        slider = ipy.IntSlider(min=0, max=self.n-1, orientation='horizontal')\n        ipy.interactive(self.update, idx=slider)\n        \n        # Play widget\n        play = ipy.Play(\n            value=self.start_step,\n            min=0,\n            max=self.n-1,\n            step=1,\n            interval=self.pause,\n            description=\"Press play\",\n            disabled=False\n        )\n        \n        # Linking the Play widget and the Slider widget so they get updated together.\n        ipy.jslink((play, 'value'), (slider, 'value'))\n\n        # Some layout specs.\n        layout = ipy.Layout(\n            display = 'flex',\n                        flex_flow = 'col',\n                        justify_content = 'space-between',\n                        align_items = 'center',\n            )\n        \n        # Image initialization, show the initial step.\n        self.update(self.start_step)\n        \n        # Pairing Play and Slide widgets horizontally\n        h_box = ipy.HBox(children=(play, slider))\n\n        # Pairing Vertically with the output\n        widgets = ipy.VBox(children=(h_box, self.out), layout = layout)\n        \n        return widgets","de2a4b7c":"s = PlayerAndImage(steps, strategies=strategies, pause=500)\nslider = s.make_player_and_image()\ndisplay(slider)","14aab918":"The usual...","0837dbe7":"## Let's give it a try!","24fb1f76":"![Screenshot%202020-04-01%20at%2014.06.21.png](attachment:Screenshot%202020-04-01%20at%2014.06.21.png)","8092e099":"## Widget definition","2a79f76a":"## Imports","0dcfbe0c":"# Visualize your strategies","b18dca76":"## Creating the data","cc8730d3":"## Plot One Sample","1d927a49":"Hi everyone! \ud83d\udc4b\n\nI'm \ud83d\ude05ing \u26bd\u26bd with this competition... \n\nOne issue I'm having is that I start with an initial Matrix as a problem, and my _trained babies_ give me a final state on that Matrix as a solution **that I cannot understand**, \"How the F*** did they get there?\" \ud83d\ude15\ud83e\udd14\n\nSo I decided to plot all the steps with a `Player` from `Ipywidgets`. Everything is very dumb, the player only receives a list of intermediate states of the Matrix and plots them one by one, but so far it has been really useful!!! (I hope you enjoy it too \ud83e\udd7a)","7441dce8":"Dumb example.","230983bb":"The magic \ud83e\uddd9\u200d\u2642\ufe0f! Actually I'm just gathering a few widgets and putting them together..."}}