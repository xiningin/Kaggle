{"cell_type":{"244de055":"code","9533490b":"code","7f801824":"code","633bf160":"code","fce747a3":"code","636f0cbb":"code","887d2db5":"code","6ace513d":"code","4e5adf7c":"code","f2c8ab46":"code","670fdea6":"code","c3d968b1":"code","76c320df":"code","c18f628d":"code","ae7cc8aa":"code","d53e1cbf":"code","3725868a":"code","ac9d0699":"code","6661832a":"code","117ed452":"code","d57473db":"code","24da94a9":"code","070f18c3":"code","6afbfaef":"code","d5016625":"code","abab9086":"code","b13263a2":"code","f33216e0":"code","828203e4":"code","4d4579bf":"code","32d19de8":"code","971362f3":"code","8f0dac34":"code","5583356a":"code","8f486115":"code","c0a290ae":"code","d89a7b24":"code","7c205507":"code","fdf07419":"code","f2029cf6":"code","c5a5f3f3":"code","485d86f2":"code","ed8923aa":"code","ac111e2f":"code","ce479d56":"code","6423fa0b":"code","71dd1ccc":"code","96b6002a":"code","42a2a665":"code","ac8437bd":"code","6911bd39":"code","4e1aa48c":"code","484fcbd4":"code","13d505dd":"code","dc555e11":"code","9073d142":"code","052ab1b3":"code","3c947db5":"code","0cd9c83a":"code","f4858481":"code","c5f7af36":"code","ac58c3d3":"code","43b5168b":"code","65f0dc5e":"code","10542dbb":"code","05c893ce":"code","1daa40d9":"code","2db1ea9a":"code","7b8d274e":"code","37661cbb":"code","b534a63a":"code","87769932":"code","cc6e62ac":"code","91b99d4a":"code","bc03a344":"code","a94e7473":"code","e4f74f9f":"code","43045748":"code","52f81434":"code","9e9d45b9":"code","ef9c56af":"code","ba04fe52":"code","69483a23":"code","2dd47145":"code","228a2505":"code","42f07535":"code","53a80381":"code","2e05554f":"code","e05b5f54":"code","f5a34cd5":"code","832aa3f1":"code","2410404f":"code","49cf3f72":"code","417eff7c":"code","ad6c2418":"code","b288f440":"code","767af26c":"code","dd4c7d3e":"code","312e2bb3":"code","97a262e9":"code","ab917e97":"code","0b0f67ee":"code","db631617":"code","af9f9fe8":"code","c4bf99a5":"code","419ec64d":"code","dbdd13eb":"code","e53942f4":"code","1a3fa7bc":"code","70f3d684":"code","1d3dbe9a":"code","fd58c3ff":"code","9bc07292":"code","25ea838f":"code","ab7b04a6":"code","a4e60e8f":"code","cbaad734":"code","eb9b9936":"code","307c36d8":"code","d0dbfe0e":"code","06d08542":"code","269b1dd6":"code","6e96dbd5":"code","3ac84ff7":"code","5a08bd25":"code","f3ac47fa":"code","bec7a415":"code","a1479932":"code","829b2247":"code","cc220033":"code","6e7b8216":"code","f8260366":"code","9bf7b1db":"code","cf31b5d5":"code","6d59c1f9":"code","a4dc2c13":"code","5c47b211":"code","7b16a0e8":"code","37314063":"code","47b6ed16":"code","91d32ace":"code","8dfa66e9":"code","3fc5d98d":"code","f5b1b8ae":"code","0c5a0796":"code","22139ef1":"code","bdba757c":"code","11ef5e01":"code","bc7f723d":"code","de375f48":"code","aa1b9443":"code","26529f1a":"code","9851675f":"code","f655dea9":"code","dee2085d":"code","a1b6fcf6":"markdown","fde728b2":"markdown","85b97666":"markdown","db39cc54":"markdown","96c5808a":"markdown","a31d376f":"markdown","99f26871":"markdown","95dcb915":"markdown","36c59d19":"markdown","ffe15aff":"markdown","1fac35cd":"markdown","df654101":"markdown","a68b0b4d":"markdown","bb61eff6":"markdown","92fd2421":"markdown","9f7997bf":"markdown","00e19681":"markdown","f7bddf98":"markdown","314c44f4":"markdown","e2dc7311":"markdown","494c4e68":"markdown","eadd71b8":"markdown","10aaa889":"markdown","69c64eb1":"markdown","2c6fe84a":"markdown","a298c8a7":"markdown","35ad3087":"markdown","80a41a18":"markdown","088f1445":"markdown","69216698":"markdown","986d8cac":"markdown","d7f7d723":"markdown","348058f7":"markdown","d153ffc0":"markdown","4a5f8736":"markdown","8ffe3cb2":"markdown","b0e7c112":"markdown","7d198a25":"markdown","a41acb9b":"markdown","fe977bef":"markdown","a972bf28":"markdown","de70aecd":"markdown","b10a4ea7":"markdown","5fa9ca6f":"markdown","b5eb6415":"markdown","aa94fc14":"markdown","836787f3":"markdown","50f010b0":"markdown","ebb71da1":"markdown","d4fb0e20":"markdown","33bb8475":"markdown","a89a4220":"markdown","11d88925":"markdown","a399306f":"markdown","50a8d1d5":"markdown","f2fbe15b":"markdown","5cb6d7dd":"markdown","91f4a211":"markdown","488bd2ba":"markdown","653b0d58":"markdown","ca0fd800":"markdown","d60cb707":"markdown","a5fffa2a":"markdown","205d1af8":"markdown","d54ddd1c":"markdown","f9ae221a":"markdown","08a29887":"markdown"},"source":{"244de055":"#Import the libraries we are going to use\nimport numpy as np\nimport pandas as pd\nimport math\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport random\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.cluster import KMeans\nfrom sklearn.linear_model import LinearRegression\nfrom xgboost import XGBRegressor\nfrom sklearn.ensemble import RandomForestRegressor","9533490b":"#Import the train and test tables into pandas DataFrames\npath = \"\/Users\/humanrobot\/Documents\/dev\/data_sets\/house-prices-advanced-regression-techniques\/\"\nTrain = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\",index_col='Id')\nTest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\",index_col='Id')","7f801824":"#Separation of independent variables\nX = Train.drop(columns=['SalePrice'])\ny = Train.SalePrice","633bf160":"Full = pd.concat([X,Test],axis=0)\n#Index of the train and test sets\ntrain_idx = [i for i in range(1,1461)]\ntest_idx = [i for i in range(1461,2920)]","fce747a3":"#Houses table columns info\nFull.info()","636f0cbb":"#Numerical variables description\nFull.describe()","887d2db5":"#Categorical variables description\nFull.describe(include=['O'])","6ace513d":"#Checking for duplicated values\nFull.duplicated().sum()","4e5adf7c":"#Table shape\nn_rows = Full.shape[0]\nn_cols = Full.shape[1]\nFull.shape","f2c8ab46":"Full['MSZoning'].unique()","670fdea6":"index = Full.loc[Full['MSZoning'] == 'C (all)'].index\nfor i, idx in enumerate(index):\n    Full.loc[idx,'MSZoning'] = 'C'","c3d968b1":"var = 'BldgType'\naux_df = pd.DataFrame(Full[var].unique(),columns=[var])\naux_df = aux_df.sort_values(by=[var])\naux_df","76c320df":"index = Full.loc[Full[var] == 'Twnhs'].index\nfor i, idx in enumerate(index):\n    Full.loc[idx,var] = 'TwnhsI'","c18f628d":"index = Full.loc[Full[var] == '2fmCon'].index\nfor i, idx in enumerate(index):\n    Full.loc[idx,var] = '2FmCon'","ae7cc8aa":"var = 'Exterior2nd'\naux_df = pd.DataFrame(Full[var].unique(),columns=[var])\naux_df = aux_df.sort_values(by=[var])\naux_df","d53e1cbf":"index = Full.loc[Full[var] == 'Brk Cmn'].index\nfor i, idx in enumerate(index):\n    Full.loc[idx,var] = 'BrkComm'","3725868a":"var = 'GarageYrBlt'\nFull.loc[Full[var] > 2010]","ac9d0699":"index = Full.loc[Full[var] == 2207].index\nFull.loc[idx,var] = 2007","6661832a":"#Percentage of missing values bye row, showing rows with more than 15% of missing entries\nmissing_val_count_by_row = pd.DataFrame([Full.iloc[r,:].isnull().sum() for r in range(Full.shape[0])],columns=['row_n_missing'])\nmissing_val_count_by_row['row_perc_missing'] = round(100*(missing_val_count_by_row.row_n_missing\/n_cols),2)\nmissing_val_count_by_row[missing_val_count_by_row.row_perc_missing > 15.0].sort_values(by=['row_perc_missing'],ascending=False)","117ed452":"missing_val_count_by_column = pd.DataFrame(Full.isnull().sum(),columns=['col_n_missing'])\nmissing_val_count_by_column['col_perc_missing'] = round(100*(missing_val_count_by_column.col_n_missing\/n_rows),2)\nmissing_val_count_by_column['type'] = [Test[c].dtype for c in missing_val_count_by_column.index]\nmissing_val_count_by_column[missing_val_count_by_column.col_perc_missing > 0.0].sort_values(by=['col_perc_missing'],ascending=False)","d57473db":"garage_cols = [col for col in Full.columns if col.find('Garage') > -1]\nFull[garage_cols].loc[(Full.GarageType.isnull() == True) & \n                               (Full.GarageYrBlt.isnull() == True) &\n                               (Full.GarageFinish.isnull() == True) &\n                               (Full.GarageQual.isnull() == True) &\n                               (Full.GarageCond.isnull() == True) &\n                               (Full.GarageCars == 0) &\n                               (Full.GarageArea == 0)\n                              ]","24da94a9":"Full[garage_cols].loc[(Full.GarageType.isnull() == False) & \n                               (Full.GarageYrBlt.isnull() == True) &\n                               (Full.GarageFinish.isnull() == True) &\n                               (Full.GarageQual.isnull() == True) &\n                               (Full.GarageCond.isnull() == True)\n                              ]","070f18c3":"bsmt_cols = [col for col in Full.columns if col.find('Bsmt') > -1]\nFull[bsmt_cols].loc[(Full.BsmtExposure.isnull() == True) & \n                    (Full.BsmtCond.isnull() == True) &\n                    (Full.BsmtQual.isnull() == True) &\n                    (Full.BsmtFinType1.isnull() == True) &\n                    (Full.BsmtFinType2.isnull() == True) |\n                    (Full.BsmtFinSF1.isnull() == True) |\n                    (Full.BsmtFullBath.isnull() == True) |\n                    (Full.BsmtHalfBath.isnull() == True) |\n                    (Full.BsmtUnfSF.isnull() == True) |\n                    (Full.BsmtFinSF2.isnull() == True) |\n                    (Full.TotalBsmtSF.isnull() == True)\n                   ]","6afbfaef":"Full[bsmt_cols].loc[((Full.BsmtFinType1.isnull() == False) & (Full.BsmtExposure.isnull() == True)) | #3\n                    ((Full.BsmtFinType1.isnull() == False) & (Full.BsmtCond.isnull() == True)) |     #3\n                    ((Full.BsmtFinType1.isnull() == False) & (Full.BsmtQual.isnull() == True)) |     #2\n                    ((Full.BsmtFinType1.isnull() == False) & (Full.BsmtFinType2.isnull() == True))   #1\n                   ]","d5016625":"Full[['MasVnrArea','MasVnrType']].loc[(Full.MasVnrType.isnull() == True) &\n                                      (Full.MasVnrArea.isnull() == True)\n                                     ]","abab9086":"Full[['MasVnrArea','MasVnrType']].loc[(Full.MasVnrType.isnull() == True) &\n                                      (Full.MasVnrArea.isnull() == False)\n                                     ]","b13263a2":"cols_complete = missing_val_count_by_column[missing_val_count_by_column.col_perc_missing == 0.0].index\ncols_num_w_missing = missing_val_count_by_column.loc[(missing_val_count_by_column.col_perc_missing > 0.0) & (missing_val_count_by_column.type != 'object')].index\ncols_cat_w_missing = missing_val_count_by_column.loc[(missing_val_count_by_column.col_perc_missing > 0.0) & (missing_val_count_by_column.type == 'object')].index","f33216e0":"misc_cols = ['PoolQC','MiscFeature','Alley','Fence','FireplaceQu']\nFull.drop(columns = misc_cols, inplace=True)","828203e4":"garage_cat_cols = [col for col in cols_cat_w_missing if col.find('Garage') > -1]\ngarage_num_cols = [col for col in cols_num_w_missing if col.find('Garage') > -1]\ngarage_missing_index = Full[garage_cols].loc[(Full.GarageType.isnull() == True) & \n                               (Full.GarageYrBlt.isnull() == True) &\n                               (Full.GarageFinish.isnull() == True) &\n                               (Full.GarageQual.isnull() == True) &\n                               (Full.GarageCond.isnull() == True) &\n                               (Full.GarageCars == 0) &\n                               (Full.GarageArea == 0)\n                              ].index","4d4579bf":"Full.loc[garage_missing_index,garage_cat_cols] = Full.loc[garage_missing_index,garage_cat_cols].fillna(value='NA')\nFull.loc[garage_missing_index,garage_num_cols] = Full.loc[garage_missing_index,garage_num_cols].fillna(value=0)","32d19de8":"Full[garage_cols].loc[(Full.GarageYrBlt.isnull() == True) |\n                       (Full.GarageFinish.isnull() == True) |\n                       (Full.GarageQual.isnull() == True) |\n                       (Full.GarageCond.isnull() == True) |\n                       (Full.GarageArea.isnull() == True) |\n                       (Full.GarageCars.isnull() == True)\n                              ]","971362f3":"aux_cols = garage_cat_cols + garage_num_cols + ['YearBuilt','YearRemodAdd','OverallQual','OverallCond','LotArea','BldgType']","8f0dac34":"yrblt_notmissing_index = Full[aux_cols].loc[(Full.GarageType != 'NA') & (Full.GarageYrBlt.isnull() == False)].index\nyrblt = Full.loc[yrblt_notmissing_index,aux_cols]\nyrblt['years_after_built'] = yrblt.GarageYrBlt - yrblt.YearBuilt\nyrblt['years_before_remod'] = yrblt.YearRemodAdd - yrblt.GarageYrBlt\naux_df=yrblt.years_after_built\naux_df.describe()","5583356a":"sns.distplot(a=aux_df, kde=False)","8f486115":"yrblt_missing_index = Full[aux_cols].loc[(Full.GarageYrBlt.isnull() == True)].index\nyrblt_missing = Full.loc[yrblt_missing_index,aux_cols]\nyrblt_missing","c0a290ae":"Full.loc[2127,'GarageYrBlt'] = Full.loc[2127,'YearBuilt']\nFull.loc[2577,'GarageYrBlt'] = Full.loc[2577,'YearBuilt']","d89a7b24":"finish_missing_index = Full[aux_cols].loc[(Full.GarageType != 'NA') & (Full.GarageFinish.isnull() == True)].index\nFull.loc[finish_missing_index,aux_cols]","7c205507":"finish_notmissing_index = Full[aux_cols].loc[(Full.GarageType != 'NA') & (Full.GarageFinish.isnull() == False) & (Full.GarageType == 'Detchd') & (Full.OverallQual > 4) & (Full.OverallQual < 7)].index\nfinish = Full.loc[finish_notmissing_index,aux_cols]\nfinish","fdf07419":"aux_finish = finish.GarageFinish.value_counts()\naux_finish.plot.pie(autopct=\"%.1f%%\")","f2029cf6":"aux_qual = finish.GarageQual.value_counts()\naux_qual.plot.pie(autopct=\"%.1f%%\")","c5a5f3f3":"Full.GarageFinish.fillna(value = 'Unf', inplace = True)\nFull.GarageQual.fillna(value = 'TA', inplace = True)","485d86f2":"cond_missing_index = Full[aux_cols].loc[(Full.GarageType != 'NA') & (Full.GarageCond.isnull() == True)].index\nFull.loc[finish_missing_index,aux_cols]","ed8923aa":"cond_notmissing_index = Full[aux_cols].loc[(Full.GarageType != 'NA') & (Full.GarageCond.isnull() == False) & (Full.GarageType == 'Detchd') & (Full.OverallCond > 5) & (Full.OverallCond < 9)].index\ncond = Full.loc[cond_notmissing_index,aux_cols]\ncond","ac111e2f":"aux_cond = cond.GarageCond.value_counts()\naux_cond.plot.pie(autopct=\"%.1f%%\")","ce479d56":"Full.GarageCond.fillna(value = 'TA', inplace = True)","6423fa0b":"area_missing_index = Full[aux_cols].loc[(Full.GarageType != 'NA') & (Full.GarageArea.isnull() == True)].index\nFull.loc[area_missing_index,aux_cols]","71dd1ccc":"area_notmissing_index = Full[aux_cols].loc[(Full.GarageType != 'NA') & (Full.GarageArea.isnull() == False) & (Full.GarageType == 'Detchd') & (Full.LotArea < 10000) & (Full.BldgType == '1Fam')].index\narea = Full.loc[area_notmissing_index,aux_cols]\narea","96b6002a":"sns.regplot(x=area['LotArea'], y=area['GarageArea'])","42a2a665":"area['GarageArea'].describe()","ac8437bd":"sns.distplot(a=area['GarageArea'], kde=False)","6911bd39":"sns.distplot(a=area['GarageCars'], kde=False)","4e1aa48c":"Full.GarageArea.fillna(value = 390, inplace = True)\nFull.GarageCars.fillna(value = 1, inplace = True)","484fcbd4":"bsmt_cat_cols = [col for col in cols_cat_w_missing if col.find('Bsmt') > -1]\nbsmt_num_cols = [col for col in cols_num_w_missing if col.find('Bsmt') > -1]\nbsmt_missing_index = Full[bsmt_cols].loc[(Full.BsmtExposure.isnull() == True) & \n                    (Full.BsmtCond.isnull() == True) &\n                    (Full.BsmtQual.isnull() == True) &\n                    (Full.BsmtFinType1.isnull() == True) &\n                    (Full.BsmtFinType2.isnull() == True) |\n                    (Full.BsmtFinSF1.isnull() == True) |\n                    (Full.BsmtFullBath.isnull() == True) |\n                    (Full.BsmtHalfBath.isnull() == True) |\n                    (Full.BsmtUnfSF.isnull() == True) |\n                    (Full.BsmtFinSF2.isnull() == True) |\n                    (Full.TotalBsmtSF.isnull() == True)\n                   ].index\nFull.loc[bsmt_missing_index,bsmt_cat_cols] = Full.loc[bsmt_missing_index,bsmt_cat_cols].fillna(value='NA')\nFull.loc[bsmt_missing_index,bsmt_num_cols] = Full.loc[bsmt_missing_index,bsmt_num_cols].fillna(value=0)","13d505dd":"aux_cols = bsmt_cat_cols + bsmt_num_cols + ['OverallQual','OverallCond']\nbsmt_missing_index = Full[aux_cols].loc[(Full.BsmtCond.isnull() == True)].index\nFull.loc[bsmt_missing_index,aux_cols]","dc555e11":"bsmt_notmissing_index = Full[aux_cols].loc[(Full.BsmtCond.isnull() == False) & (Full.OverallCond > 5) & (Full.OverallCond < 10)].index\ncond = Full.loc[bsmt_notmissing_index,aux_cols]\ncond","9073d142":"aux_cond = cond.BsmtCond.value_counts()\naux_cond.plot.pie(autopct=\"%.1f%%\")","052ab1b3":"Full.BsmtCond.fillna(value='TA',inplace=True)","3c947db5":"bsmt_missing_index = Full[aux_cols].loc[(Full.BsmtExposure.isnull() == True)].index\nFull.loc[bsmt_missing_index,aux_cols]","0cd9c83a":"bsmt_notmissing_index = Full[aux_cols].loc[(Full.BsmtExposure.isnull() == False) & (Full.BsmtExposure != 'NA') & (Full.BsmtCond == 'TA') & (Full.BsmtFinType1 == 'Unf')].index\ncond = Full.loc[bsmt_notmissing_index,aux_cols]\ncond","f4858481":"aux_cond = cond.BsmtExposure.value_counts()\naux_cond.plot.pie(autopct=\"%.1f%%\")","c5f7af36":"Full.BsmtExposure.fillna(value='No',inplace=True)","ac58c3d3":"bsmt_missing_index = Full[aux_cols].loc[(Full.BsmtQual.isnull() == True)].index\nFull.loc[bsmt_missing_index,aux_cols]","43b5168b":"bsmt_notmissing_index = Full[aux_cols].loc[(Full.BsmtQual.isnull() == False) & (Full.BsmtQual != 'NA') & (Full.OverallQual >= 3) & (Full.OverallQual <= 5)].index\ncond = Full.loc[bsmt_notmissing_index,aux_cols]\ncond","65f0dc5e":"aux_cond = cond.BsmtQual.value_counts()\naux_cond.plot.pie(autopct=\"%.1f%%\")","10542dbb":"Full.BsmtQual.fillna(value='TA',inplace=True)","05c893ce":"bsmt_missing_index = Full[aux_cols].loc[(Full.BsmtFinType2.isnull() == True)].index\nFull.loc[bsmt_missing_index,aux_cols]","1daa40d9":"bsmt_notmissing_index = Full[aux_cols].loc[(Full.BsmtFinType2.isnull() == False) & (Full.BsmtFinType2 != 'NA')].index\ncond = Full.loc[bsmt_notmissing_index,aux_cols]\ncond","2db1ea9a":"aux_cond = cond.BsmtFinType2.value_counts()\naux_cond.plot.pie(autopct=\"%.1f%%\")","7b8d274e":"Full.BsmtFinType2.fillna(value='Unf',inplace=True)","37661cbb":"masvnr_cat_cols = [col for col in cols_cat_w_missing if col.find('MasVnr') > -1]\nmasvnr_num_cols = [col for col in cols_num_w_missing if col.find('MasVnr') > -1]\nmasvnr_missing_index = Full[['MasVnrArea','MasVnrType']].loc[(Full.MasVnrType.isnull() == True) &\n                                      (Full.MasVnrArea.isnull() == True)\n                                     ].index\nFull.loc[masvnr_missing_index,masvnr_cat_cols] = Full.loc[masvnr_missing_index,masvnr_cat_cols].fillna(value='NA')\nFull.loc[masvnr_missing_index,masvnr_num_cols] = Full.loc[masvnr_missing_index,masvnr_num_cols].fillna(value=0)","b534a63a":"aux_cols = masvnr_cat_cols + masvnr_num_cols + ['ExterQual', 'ExterCond']\nvnr_missing_index = Full[aux_cols].loc[(Full.MasVnrType.isnull() == True)].index\nFull.loc[vnr_missing_index,aux_cols]","87769932":"vnr_notmissing_index = Full[aux_cols].loc[(Full.MasVnrType.isnull() == False) & (Full.MasVnrType != 'NA') & (Full.ExterQual == 'TA') & (Full.ExterCond == 'TA') & (Full.MasVnrArea > 0)].index\ncond = Full.loc[vnr_notmissing_index,aux_cols]\ncond","cc6e62ac":"aux_cond = cond.MasVnrType.value_counts()\naux_cond.plot.pie(autopct=\"%.1f%%\")","91b99d4a":"Full.MasVnrType.fillna(value='BrkFace',inplace=True)","bc03a344":"cols = ['MSZoning','Neighborhood']\nmissing_index = Full[cols].loc[(Full.MSZoning.isnull() == True)].index\nFull.loc[missing_index,cols]","a94e7473":"IDOTRR_notmissing_index = Full[cols].loc[(Full.MSZoning.isnull() == False) & (Full.Neighborhood == 'IDOTRR')].index\nIDOTRR = Full.loc[IDOTRR_notmissing_index,cols]\nIDOTRR_count = IDOTRR.MSZoning.value_counts()\nIDOTRR_count","e4f74f9f":"IDOTRR_count.plot.pie(autopct=\"%.1f%%\")","43045748":"Mitch_notmissing_index = Full[cols].loc[(Full.MSZoning.isnull() == False) & (Full.Neighborhood == 'Mitchel')].index\nMitch = Full.loc[Mitch_notmissing_index,cols]\nMitch_count = Mitch.MSZoning.value_counts()\nMitch_count","52f81434":"Mitch_count.plot.pie(autopct=\"%.1f%%\")","9e9d45b9":"indexIDOTRR = [1916,2217,2251]\nindexMitch = [2905]\nFull.loc[indexIDOTRR,'MSZoning'] = Full.loc[indexIDOTRR,'MSZoning'].fillna(value='RM')\nFull.loc[indexMitch,'MSZoning'] = Full.loc[indexMitch,'MSZoning'].fillna(value='RL')","ef9c56af":"aux_cols = ['Utilities','Neighborhood','OverallQual','OverallCond']\nutl_missing_index = Full[aux_cols].loc[(Full.Utilities.isnull() == True)].index\nFull.loc[utl_missing_index,aux_cols]","ba04fe52":"utl_notmissing_index = Full[aux_cols].loc[(Full.Utilities.isnull() == False) ].index\ncond = Full.loc[utl_notmissing_index,aux_cols]\ncond","69483a23":"aux_cond = cond.Utilities.value_counts()\naux_cond.plot.pie(autopct=\"%.1f%%\")","2dd47145":"Full.Utilities.fillna(value='AllPub',inplace=True)","228a2505":"aux_cols = ['Functional', 'Utilities','Neighborhood','OverallQual','OverallCond']\nfun_missing_index = Full[aux_cols].loc[(Full.Functional.isnull() == True)].index\nFull.loc[fun_missing_index,aux_cols]","42f07535":"fun_notmissing_index = Full[aux_cols].loc[(Full.Functional.isnull() == False) ].index\ncond = Full.loc[fun_notmissing_index,aux_cols]\ncond","53a80381":"aux_cond = cond.Functional.value_counts()\naux_cond.plot.pie(autopct=\"%.1f%%\")","2e05554f":"Full.Functional.fillna(value='Typ',inplace=True)","e05b5f54":"aux_cols = ['Exterior1st', 'Exterior2nd','ExterQual', 'ExterCond','OverallQual','OverallCond', 'Neighborhood']\next_missing_index = Full[aux_cols].loc[(Full.Exterior1st.isnull() == True)].index\nFull.loc[ext_missing_index,aux_cols]","f5a34cd5":"ext_notmissing_index = Full[aux_cols].loc[(Full.Exterior1st.isnull() == False) & (Full.ExterQual == 'TA') & (Full.ExterCond == 'TA') & (Full.OverallQual > 4) & (Full.OverallQual < 6) & (Full.OverallCond > 6) & (Full.OverallCond < 8) & (Full.Neighborhood == 'Edwards')].index\ncond = Full.loc[ext_notmissing_index,aux_cols]\ncond","832aa3f1":"aux_cond1 = cond.Exterior1st.value_counts()\naux_cond2 = cond.Exterior2nd.value_counts()\naux_cond1.plot.pie(autopct=\"%.1f%%\")","2410404f":"aux_cond2.plot.pie(autopct=\"%.1f%%\")","49cf3f72":"Full.Exterior1st.fillna(value='MetalSd',inplace=True)\nFull.Exterior2nd.fillna(value='Wd Sdng',inplace=True)","417eff7c":"aux_cols = ['Electrical','ExterQual', 'ExterCond','OverallQual','OverallCond', 'Neighborhood']\nelectrical_missing_index = Full[aux_cols].loc[(Full.Electrical.isnull() == True)].index\nFull.loc[electrical_missing_index,aux_cols]","ad6c2418":"electrical_notmissing_index = Full[aux_cols].loc[(Full.Electrical.isnull() == False)].index\ncond = Full.loc[electrical_notmissing_index,aux_cols]\ncond","b288f440":"aux_cond = cond.Electrical.value_counts()\naux_cond.plot.pie(autopct=\"%.1f%%\")","767af26c":"Full.Electrical.fillna(value='SBrkr',inplace=True)","dd4c7d3e":"aux_cols = ['KitchenQual','KitchenAbvGr','OverallQual']\nkq_missing_index = Full[aux_cols].loc[(Full.KitchenQual.isnull() == True)].index\nFull.loc[kq_missing_index,aux_cols]","312e2bb3":"kq_notmissing_index = Full[aux_cols].loc[(Full.KitchenQual.isnull() == False) & (Full.KitchenAbvGr == 1) & (Full.OverallQual < 6)].index\ncond = Full.loc[kq_notmissing_index,aux_cols]\ncond","97a262e9":"aux_cond = cond.KitchenQual.value_counts()\naux_cond.plot.pie(autopct=\"%.1f%%\")","ab917e97":"Full.KitchenQual.fillna(value='TA',inplace=True)","0b0f67ee":"aux_cols = ['SaleType','SaleCondition','Neighborhood']\nsale_missing_index = Full[aux_cols].loc[(Full.SaleType.isnull() == True)].index\nFull.loc[sale_missing_index,aux_cols]","db631617":"sale_notmissing_index = Full[aux_cols].loc[(Full.SaleType.isnull() == False) & (Full.SaleCondition == 'Normal')].index\ncond = Full.loc[sale_notmissing_index,aux_cols]\ncond","af9f9fe8":"aux_cond = cond.SaleType.value_counts()\naux_cond.plot.pie(autopct=\"%.1f%%\")","c4bf99a5":"Full.SaleType.fillna(value='WD',inplace=True)","419ec64d":"aux_df = Full[['LotArea', 'LotFrontage']]\naux_df.corr()","dbdd13eb":"aux_cols = ['LotArea', 'LotFrontage', 'MSZoning', 'LotShape', 'LandContour', 'LotConfig', 'Neighborhood']\naux_index = Full[aux_cols].loc[(Full.LotFrontage.isnull() == False) & (Full.LotArea < 30000)].index\naux = Full.loc[aux_index,aux_cols]\nplt.figure(figsize=(15,7))\nsns.scatterplot(x=aux['LotArea'], y=aux['LotFrontage'], hue=aux['LotConfig'])","e53942f4":"lot_missing_index = Full[aux_cols].loc[(Full.LotFrontage.isnull() == True)].index\nFull.loc[lot_missing_index,aux_cols]","1a3fa7bc":"lotinside_notmissing_index = Full[aux_cols].loc[(Full.LotFrontage.isnull() == False) & (Full.LotConfig == 'Inside') & (Full.LotArea < 30000)].index\nlotfr2_notmissing_index = Full[aux_cols].loc[(Full.LotFrontage.isnull() == False) & (Full.LotConfig == 'FR2') & (Full.LotArea < 30000)].index\nlotfr3_notmissing_index = Full[aux_cols].loc[(Full.LotFrontage.isnull() == False) & (Full.LotConfig == 'FR3') & (Full.LotArea < 30000)].index\nlotcorner_notmissing_index = Full[aux_cols].loc[(Full.LotFrontage.isnull() == False) & (Full.LotConfig == 'Corner') & (Full.LotArea < 30000)].index\nlotsac_notmissing_index = Full[aux_cols].loc[(Full.LotFrontage.isnull() == False) & (Full.LotConfig == 'CulDSac') & (Full.LotArea < 30000)].index","70f3d684":"lot_inside = Full.loc[lotinside_notmissing_index,aux_cols]\nlot_fr2 = Full.loc[lotfr2_notmissing_index,aux_cols]\nlot_fr3 = Full.loc[lotfr3_notmissing_index,aux_cols]\nlot_corner = Full.loc[lotcorner_notmissing_index,aux_cols]\nlot_sac = Full.loc[lotsac_notmissing_index,aux_cols]","1d3dbe9a":"lot_inside.corr()","fd58c3ff":"lot_fr2.corr()","9bc07292":"lot_fr3.corr()","25ea838f":"lot_corner.corr()","ab7b04a6":"lot_sac.corr()","a4e60e8f":"X1 = np.array([lot_inside['LotArea'].values]).reshape((1849,1))\ny1 = np.array(lot_inside['LotFrontage'].values).reshape((1849,1))\nX2 = np.array([lot_fr2['LotArea'].values]).reshape((64,1))\ny2 = np.array(lot_fr2['LotFrontage'].values).reshape((64,1))\nX3 = np.array([lot_fr3['LotArea'].values]).reshape((10,1))\ny3 = np.array(lot_fr3['LotFrontage'].values).reshape((10,1))\nX4 = np.array([lot_corner['LotArea'].values]).reshape((405,1))\ny4 = np.array(lot_corner['LotFrontage'].values).reshape((405,1))\nX5 = np.array([lot_sac['LotArea'].values]).reshape((84,1))\ny5 = np.array(lot_sac['LotFrontage'].values).reshape((84,1))","cbaad734":"reg1 = LinearRegression().fit(X1, y1)\ny1_pred = reg1.predict(X1)\nstd1 = math.sqrt(mean_squared_error(y1, y1_pred))\nr1 = np.random.normal(0, std1, y1.shape[0]).reshape(y1.shape)\ny1_aux = y1_pred + r1\n\nreg2 = LinearRegression().fit(X2, y2)\ny2_pred = reg2.predict(X2)\nstd2 = math.sqrt(mean_squared_error(y2, y2_pred))\nr2 = np.random.normal(0, std2, y2.shape[0]).reshape(y2.shape)\ny2_aux = y2_pred + r2\n\nreg3 = LinearRegression().fit(X3, y3)\ny3_pred = reg3.predict(X3)\nstd3 = math.sqrt(mean_squared_error(y3, y3_pred))\nr3 = np.random.normal(0, std3, y3.shape[0]).reshape(y3.shape)\ny3_aux = y3_pred + r3\n\nreg4 = LinearRegression().fit(X4, y4)\ny4_pred = reg4.predict(X4)\nstd4 = math.sqrt(mean_squared_error(y4, y4_pred))\nr4 = np.random.normal(0, std4, y4.shape[0]).reshape(y4.shape)\ny4_aux = y4_pred + r4\n\nreg5 = LinearRegression().fit(X5, y5)\ny5_pred = reg5.predict(X5)\nstd5 = math.sqrt(mean_squared_error(y5, y5_pred))\nr5 = np.random.normal(0, std5, y5.shape[0]).reshape(y5.shape)\ny5_aux = y5_pred + r5","eb9b9936":"l_lim1 = lot_inside['LotFrontage'].min()\nu_lim1 = lot_inside['LotFrontage'].max()\nl_lim2 = lot_fr2['LotFrontage'].min()\nu_lim2 = lot_fr2['LotFrontage'].max()\nl_lim3 = lot_fr3['LotFrontage'].min()\nu_lim3 = lot_fr3['LotFrontage'].max()\nl_lim4 = lot_corner['LotFrontage'].min()\nu_lim4 = lot_corner['LotFrontage'].max()\nl_lim5 = lot_sac['LotFrontage'].min()\nu_lim5 = lot_sac['LotFrontage'].max()","307c36d8":"fig, axs = plt.subplots(5, 2, figsize=(15,15))\nplt.subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=None, hspace=0.8)\n\nsns.regplot(ax=axs[0][0],x=lot_inside['LotArea'], y=lot_inside['LotFrontage'])\naxs[0][0].set_ylim(l_lim1,u_lim1)\naxs[0][0].set_title('Inside')\nsns.scatterplot(ax=axs[0][1],x=X1.reshape((1849)),y=y1_aux.reshape((1849)))\naxs[0][1].set_ylim(l_lim1,u_lim1)\naxs[0][1].set_title('Model prediction Inside')\n\nsns.regplot(ax=axs[1][0],x=lot_fr2['LotArea'], y=lot_fr2['LotFrontage'])\naxs[1][0].set_ylim(l_lim2,u_lim2)\naxs[1][0].set_title('FR2')\nsns.scatterplot(ax=axs[1][1],x=X2.reshape((64)),y=y2_aux.reshape((64)))\naxs[1][1].set_ylim(l_lim2,u_lim2)\naxs[1][1].set_title('Model prediction FR2')\n\nsns.regplot(ax=axs[2][0],x=lot_fr3['LotArea'], y=lot_fr3['LotFrontage'])\naxs[2][0].set_ylim(l_lim3,u_lim3)\naxs[2][0].set_title('FR3')\nsns.scatterplot(ax=axs[2][1],x=X3.reshape((10)),y=y3_aux.reshape((10)))\naxs[2][1].set_ylim(l_lim3,u_lim3)\naxs[2][1].set_title('Model prediction FR3')\n\nsns.regplot(ax=axs[3][0],x=lot_corner['LotArea'], y=lot_corner['LotFrontage'])\naxs[3][0].set_ylim(l_lim4,u_lim4)\naxs[3][0].set_title('Corner')\nsns.scatterplot(ax=axs[3][1],x=X4.reshape((405)),y=y4_aux.reshape((405)))\naxs[3][1].set_ylim(l_lim4,u_lim4)\naxs[3][1].set_title('Model prediction Corner')\n\nsns.regplot(ax=axs[4][0],x=lot_sac['LotArea'], y=lot_sac['LotFrontage'])\naxs[4][0].set_ylim(l_lim5,u_lim5)\naxs[4][0].set_title('CulDSac')\nsns.scatterplot(ax=axs[4][1],x=X5.reshape((84)),y=y5_aux.reshape((84)))\naxs[4][1].set_ylim(l_lim5,u_lim5)\naxs[4][1].set_title('Model prediction CulDSac')\nplt.show()","d0dbfe0e":"lotinside_missing_index = Full[aux_cols].loc[(Full.LotFrontage.isnull() == True) & (Full.LotConfig == 'Inside')].index\nlotfr2_missing_index = Full[aux_cols].loc[(Full.LotFrontage.isnull() == True) & (Full.LotConfig == 'FR2')].index\nlotfr3_missing_index = Full[aux_cols].loc[(Full.LotFrontage.isnull() == True) & (Full.LotConfig == 'FR3')].index\nlotcorner_missing_index = Full[aux_cols].loc[(Full.LotFrontage.isnull() == True) & (Full.LotConfig == 'Corner')].index\nlotsac_missing_index = Full[aux_cols].loc[(Full.LotFrontage.isnull() == True) & (Full.LotConfig == 'CulDSac')].index","06d08542":"lot_inside_missing = Full.loc[lotinside_missing_index,aux_cols]\nlot_fr2_missing = Full.loc[lotfr2_missing_index,aux_cols]\nlot_fr3_missing = Full.loc[lotfr3_missing_index,aux_cols]\nlot_corner_missing = Full.loc[lotcorner_missing_index,aux_cols]\nlot_sac_missing = Full.loc[lotsac_missing_index,aux_cols]","269b1dd6":"X1_missing = np.array([lot_inside_missing['LotArea'].values]).reshape((271,1))\nX2_missing = np.array([lot_fr2_missing['LotArea'].values]).reshape((20,1))\nX3_missing = np.array([lot_fr3_missing['LotArea'].values]).reshape((4,1))\nX4_missing = np.array([lot_corner_missing['LotArea'].values]).reshape((104,1))\nX5_missing = np.array([lot_sac_missing['LotArea'].values]).reshape((87,1))","6e96dbd5":"y1_missing_pred = reg1.predict(X1_missing)\nr1 = np.random.normal(0, std1, y1_missing_pred.shape[0]).reshape(y1_missing_pred.shape)\ny1_impute = y1_missing_pred + r1\n\ny2_missing_pred = reg2.predict(X2_missing)\nr2 = np.random.normal(0, std2, y2_missing_pred.shape[0]).reshape(y2_missing_pred.shape)\ny2_impute = y2_missing_pred + r2\n\ny3_missing_pred = reg3.predict(X3_missing)\nr3 = np.random.normal(0, std3, y3_missing_pred.shape[0]).reshape(y3_missing_pred.shape)\ny3_impute = y3_missing_pred + r3\n\ny4_missing_pred = reg4.predict(X4_missing)\nr4 = np.random.normal(0, std4, y4_missing_pred.shape[0]).reshape(y4_missing_pred.shape)\ny4_impute = y4_missing_pred + r4\n\ny5_missing_pred = reg5.predict(X5_missing)\nr5 = np.random.normal(0, std5, y5_missing_pred.shape[0]).reshape(y5_missing_pred.shape)\ny5_impute = y5_missing_pred + r5","3ac84ff7":"dummy = pd.DataFrame(np.zeros((Full.shape[0])),columns=['LotFrontageDummy'],index=Full.index)","5a08bd25":"for i, idx in enumerate(lotinside_missing_index):\n    Full.loc[idx,'LotFrontage'] = y1_impute[i]\n    dummy.loc[idx,'LotFrontageDummy'] = 1\nfor i, idx in enumerate(lotfr2_missing_index):\n    Full.loc[idx,'LotFrontage'] = y2_impute[i]\n    dummy.loc[idx,'LotFrontageDummy'] = 1\nfor i, idx in enumerate(lotfr3_missing_index):\n    Full.loc[idx,'LotFrontage'] = y3_impute[i]\n    dummy.loc[idx,'LotFrontageDummy'] = 1\nfor i, idx in enumerate(lotcorner_missing_index):\n    Full.loc[idx,'LotFrontage'] = y4_impute[i]\n    dummy.loc[idx,'LotFrontageDummy'] = 1\nfor i, idx in enumerate(lotsac_missing_index):\n    Full.loc[idx,'LotFrontage'] = y5_impute[i]\n    dummy.loc[idx,'LotFrontageDummy'] = 1","f3ac47fa":"Full = pd.concat([Full,dummy],axis=1)","bec7a415":"Full['YrsSinceBuilt'] = 2021 - Full['YearBuilt']\nFull['YrsSinceRemod'] = 2021 - Full['YearRemodAdd']\nFull['YrsSinceBltGrg'] = 2021 - Full['GarageYrBlt']\nFull['YrsSinceSale'] = 2021 - Full['YrSold']","a1479932":"subset_nominal_columns = ['Street','LandContour','LotConfig','Neighborhood','Condition1',\n                          'Condition2','BldgType', 'HouseStyle','RoofStyle','RoofMatl',\n                          'Foundation','Heating','SaleCondition']\nsubset_ordinal_columns = ['LotShape','LandSlope','ExterQual','ExterCond','HeatingQC','CentralAir','PavedDrive']\nsubset_numerical_columns = ['MSSubClass','LotArea','OverallQual','OverallCond','1stFlrSF','2ndFlrSF','LowQualFinSF',\n                            'GrLivArea','FullBath','HalfBath','BedroomAbvGr','KitchenAbvGr','TotRmsAbvGrd',\n                            'Fireplaces','WoodDeckSF','OpenPorchSF','EnclosedPorch','3SsnPorch','ScreenPorch',\n                            'PoolArea','MiscVal','YrsSinceBuilt','YrsSinceRemod','YrsSinceSale']","829b2247":"nominal_columns = ['MSZoning','Street','LandContour','LotConfig','Neighborhood','Condition1',\n                    'Condition2','BldgType', 'HouseStyle','RoofStyle','RoofMatl','Exterior1st','Exterior2nd',\n                   'MasVnrType','Foundation','Heating','Electrical','GarageType','SaleType',\n                   'SaleCondition']\nordinal_columns = ['LotShape','Utilities','LandSlope','ExterQual','ExterCond','BsmtQual','BsmtCond','BsmtExposure',\n                   'BsmtFinType1','BsmtFinType2','HeatingQC','CentralAir','KitchenQual','Functional',\n                   'GarageFinish','GarageQual','GarageCond','PavedDrive']\nnumerical_columns = ['MSSubClass','LotArea','LotFrontage','LotFrontageDummy','OverallQual','OverallCond','MasVnrArea',\n                     'BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF','1stFlrSF','2ndFlrSF','LowQualFinSF',\n                     'GrLivArea','BsmtFullBath','BsmtHalfBath','FullBath','HalfBath','BedroomAbvGr','KitchenAbvGr',\n                     'TotRmsAbvGrd','Fireplaces','GarageCars','GarageArea','WoodDeckSF','OpenPorchSF',\n                     'EnclosedPorch','3SsnPorch','ScreenPorch','PoolArea','MiscVal','YrsSinceBuilt','YrsSinceRemod',\n                     'YrsSinceBltGrg','YrsSinceSale'\n                    ]","cc220033":"incomplete_df = pd.DataFrame()\ncomplete_df = pd.DataFrame()","6e7b8216":"def insertDummies(variables, extract_df, insert_df):\n    for c in variables:\n        aux = extract_df[c]\n        aux = c + '_' + aux\n        dummies = pd.get_dummies(aux)\n        insert_df = pd.concat([insert_df, dummies],axis=1)\n    return insert_df","f8260366":"incomplete_df = insertDummies(subset_nominal_columns, Full, incomplete_df)\ncomplete_df = insertDummies(nominal_columns, Full, complete_df)","9bf7b1db":"def insertNumerical(variables, extract_df, insert_df):\n    for c in variables:\n        aux = extract_df[c]\n        mean = aux.mean()\n        std = aux.mean()\n        num = (((aux-mean)\/std)+1)\/2\n        num = pd.DataFrame(num)\n        insert_df = pd.concat([insert_df, num],axis=1)\n    return insert_df","cf31b5d5":"incomplete_df = insertNumerical(subset_numerical_columns, Full, incomplete_df)\ncomplete_df = insertNumerical(numerical_columns, Full, complete_df)","6d59c1f9":"#LotShape\ndef LotShape(string):\n    if(string == 'IR3'):\n        out = 0\n    elif(string == 'IR2'):\n        out = 1\n    elif(string == 'IR1'):\n        out = 2\n    else:\n        out = 3\n    return out\nincomplete_df['LotShape'] = Full['LotShape'].map(lambda shape: LotShape(shape))\ncomplete_df['LotShape'] = Full['LotShape'].map(lambda shape: LotShape(shape))","a4dc2c13":"#Utilities\ndef Utilities(string):\n    if(string == 'ELO'):\n        out = 0\n    elif(string == 'NoSeWa'):\n        out = 1\n    elif(string == 'NoSewr'):\n        out = 2\n    else:\n        out = 3\n    return out\ncomplete_df['Utilities'] = Full['Utilities'].map(lambda x: Utilities(x))","5c47b211":"#LandSlope\ndef LandSlope(string):\n    if(string == 'Sev'):\n        out = 0\n    elif(string == 'Mod'):\n        out = 1\n    else:\n        out = 2\n    return out\nincomplete_df['LandSlope'] = Full['LandSlope'].map(lambda x: LandSlope(x))\ncomplete_df['LandSlope'] = Full['LandSlope'].map(lambda x: LandSlope(x))","7b16a0e8":"#ExternalQual, ExternalCond, HeatingQC, KitchenQual, FireplaceQu, GarageQual, GarageCond, PoolQC\ndef External(string):\n    if(string == 'Po'):\n        out = 0\n    elif(string == 'Fa'):\n        out = 1\n    elif(string == 'TA'):\n        out = 2\n    elif(string == 'Gd'):\n        out = 3\n    else:\n        out = 4\n    return out\nincomplete_df['ExterQual'] = Full['ExterQual'].map(lambda x: External(x))\nincomplete_df['ExterCond'] = Full['ExterCond'].map(lambda x: External(x))\nincomplete_df['HeatingQC'] = Full['HeatingQC'].map(lambda x: External(x))\n\n\ncomplete_df['ExterQual'] = Full['ExterQual'].map(lambda x: External(x))\ncomplete_df['ExterCond'] = Full['ExterCond'].map(lambda x: External(x))\ncomplete_df['HeatingQC'] = Full['HeatingQC'].map(lambda x: External(x))\ncomplete_df['KitchenQual'] = Full['KitchenQual'].map(lambda x: External(x))\n#complete_df['FireplaceQu'] = Full['FireplaceQu'].map(lambda x: External(x))\ncomplete_df['GarageQual'] = Full['GarageQual'].map(lambda x: External(x))\ncomplete_df['GarageCond'] = Full['GarageCond'].map(lambda x: External(x))\n#incomplete_df['PoolQC'] = Full['PoolQC'].map(lambda x: External(x))","37314063":"#BsmntQual, BsmntCond and BsmntExposure \ndef Bsmt(string):\n    if(string == 'NA'):\n        out = 0\n    elif(string == 'Po'):\n        out = 1\n    elif(string == 'Fa'):\n        out = 2\n    elif(string == 'TA'):\n        out = 3\n    elif(string == 'Gd'):\n        out = 4\n    else:\n        out = 5\n    return out\n\ncomplete_df['BsmtQual'] = Full['BsmtQual'].map(lambda x: Bsmt(x))\ncomplete_df['BsmtCond'] = Full['BsmtCond'].map(lambda x: Bsmt(x))\ncomplete_df['BsmtExposure'] = Full['BsmtExposure'].map(lambda x: Bsmt(x))","47b6ed16":"#BsmntFinType1 and BsmntFinType2\ndef BsmtFin(string):\n    if(string == 'NA'):\n        out = 0\n    elif(string == 'Unf'):\n        out = 1\n    elif(string == 'LwQ'):\n        out = 2\n    elif(string == 'BLQ'):\n        out = 3\n    elif(string == 'ALQ'):\n        out = 4\n    else:\n        out = 5\n    return out\ncomplete_df['BsmtFinType1'] = Full['BsmtFinType1'].map(lambda x: BsmtFin(x))\ncomplete_df['BsmtFinType2'] = Full['BsmtFinType2'].map(lambda x: BsmtFin(x))","91d32ace":"#CentralAir\ndef Air(string):\n    if(string == 'N'):\n        out = 0\n    else:\n        out = 1\n    return out\nincomplete_df['CentralAir'] = Full['CentralAir'].map(lambda x: Air(x))\ncomplete_df['CentralAir'] = Full['CentralAir'].map(lambda x: Air(x))","8dfa66e9":"#Functional\ndef Functional(string):\n    if(string == 'Sal'):\n        out = 0\n    elif(string == 'Sev'):\n        out = 1\n    elif(string == 'Maj2'):\n        out = 2\n    elif(string == 'Maj1'):\n        out = 3\n    elif(string == 'Mod'):\n        out = 4\n    elif(string == 'Min2'):\n        out = 5\n    elif(string == 'Min1'):\n        out = 6\n    else:\n        out = 7\n    return out\ncomplete_df['Functional'] = Full['Functional'].map(lambda x: Functional(x))","3fc5d98d":"#GarageFinish\ndef GarageFinish(string):\n    if(string == 'NA'):\n        out = 0\n    if(string == 'Unf'):\n        out = 1\n    if(string == 'RFn'):\n        out = 2\n    else:\n        out = 3\n    return out\ncomplete_df['GarageFinish'] = Full['GarageFinish'].map(lambda x: GarageFinish(x))","f5b1b8ae":"#PavedDrive\ndef PavedDrive(string):\n    if(string == 'N'):\n        out = 0\n    if(string == 'P'):\n        out = 1\n    else:\n        out = 2\n    return out\nincomplete_df['PavedDrive'] = Full['PavedDrive'].map(lambda x: PavedDrive(x))\ncomplete_df['PavedDrive'] = Full['PavedDrive'].map(lambda x: PavedDrive(x))","0c5a0796":"#Fence\ndef Fence(string):\n    if(string == 'NA'):\n        out = 0\n    if(string == 'MnWw'):\n        out = 1\n    if(string == 'GdWd'):\n        out = 2\n    if(string == 'MnPrv'):\n        out = 3\n    else:\n        out = 4\n    return out\n#incomplete_df['Fence'] = Full['Fence'].map(lambda x: Fence(x))","22139ef1":"def normalize(variables, df):\n    for c in variables:\n        df[c] = (((df[c] - aux.mean())\/aux.std())+1)\/2\n    return None\ndef scaling(df):\n    for c in df.columns:\n        df[c] = (df[c] - df[c].min())\/(df[c].max() - df[c].min())\n    return None","bdba757c":"normalize(subset_ordinal_columns,incomplete_df)\nnormalize(ordinal_columns,complete_df)\nscaling(incomplete_df)\nscaling(complete_df)","11ef5e01":"incomplete_train_df = incomplete_df.loc[train_idx]\nincomplete_test_df = incomplete_df.loc[test_idx]\n\ncomplete_train_df = complete_df.loc[train_idx]\ncomplete_test_df = complete_df.loc[test_idx]\ny = pd.DataFrame(y)","bc7f723d":"X_train_i, X_valid_i, y_train_i, y_valid_i = train_test_split(incomplete_train_df, y, random_state=0)\nX_train_c, X_valid_c, y_train_c, y_valid_c = train_test_split(complete_train_df, y, random_state=0)","de375f48":"def get_mae_XGB(n_estimators, train_X, val_X, train_y, val_y):\n    model = XGBRegressor(n_estimators=n_estimators,learning_rate=0.05,random_state=0)\n    model.fit(train_X, train_y)\n    preds_val = model.predict(val_X)\n    mae = mean_absolute_error(val_y, preds_val)\n    return(mae)","aa1b9443":"for max_estimators in [700,750,800,850,900,950,1000,1050,1100]:\n    my_mae = get_mae_XGB(max_estimators, X_train_i, X_valid_i, y_train_i, y_valid_i)\n    print(\"Max estimators: %d  \\t\\t Mean Absolute Error:  %d\" %(max_estimators, my_mae))","26529f1a":"for max_estimators in [700,750,800,850,900,950,1000,1050,1100]:\n    my_mae = get_mae_XGB(max_estimators, X_train_c, X_valid_c, y_train_c, y_valid_c)\n    print(\"Max estimators: %d  \\t\\t Mean Absolute Error:  %d\" %(max_estimators, my_mae))","9851675f":"my_model_final = XGBRegressor(n_estimators=1100,learning_rate=0.05,random_state=0)\nmy_model_final.fit(complete_train_df, y)","f655dea9":"predictions = my_model_final.predict(complete_test_df)","dee2085d":"output = pd.DataFrame({'Id': complete_test_df.index,\n                       'SalePrice': predictions})\noutput.to_csv('submission.csv', index=False)","a1b6fcf6":"Complete and imputed columns subset","fde728b2":"#### 5.4 Ordinal variables encoding","85b97666":"BsmtFinType2 variable imputation","db39cc54":"<ul style=\"list-style-type:none;\"> \n    <li>1 Introduction<\/li>\n        <ul style=\"list-style-type:none;\">\n            <li>1.1 Types of missing data<\/li>\n            <li>1.2 Techniques for handling missing data<\/li>\n                <ul style=\"list-style-type:none;\">\n                    <li>1.2.1 Deletion methods<\/li>\n                    <li>1.2.2 Imputation methods<\/li>\n                <\/ul>\n        <\/ul>\n    <li>2 Data load and exploration<\/li>\n        <ul style=\"list-style-type:none;\">\n            <li>2.1 Data load<\/li>\n            <li>2.2 Basic data exploration<\/li>\n        <\/ul>\n    <li>3 Missing entries analysis<\/li>\n        <ul style=\"list-style-type:none;\">\n            <li>3.1 Percentage of missing entries by row<\/li>\n            <li>3.2 Percentage of missing entries by column<\/li>\n        <\/ul>\n    <li>4 Imputation<\/li>\n        <ul style=\"list-style-type:none;\">\n            <li>4.1 Deletion of variables with more than 40% of missing values<\/li>\n            <li>4.2 Imputation for the garage related variables<\/li>\n            <li>4.3 Imputation for the basement related variables<\/li>\n            <li>4.4 Imputation for the masonry veneer related variables<\/li>\n            <li>4.5 Imputation for variables with less than 5 missing entries<\/li>\n        <\/ul>\n    <li>5 Encoding<\/li>\n        <ul style=\"list-style-type:none;\">\n            <li>5.1 Columns subseting<\/li>\n            <li>5.2 Nominal variables encoding<\/li>\n            <li>5.3 Normalization of numerical variables<\/li>\n            <li>5.4 Ordinal variables encoding<\/li>\n            <li>5.5 Train, valid, test sets split<\/li>\n        <\/ul>\n    <li>6 Model performance comparison<\/li>\n        <ul style=\"list-style-type:none;\">\n            <li>6.1 Model definition<\/li>\n            <li>6.2 Data subsets model performance<\/li>\n            <li>6.3 Best model fit, predictions and submission<\/li>\n        <\/ul>\n    <li>7 Conclusion<\/li>\n<\/ul>","96c5808a":"From the pie charts we see that almost all garages finish are Unf, and almost all the garage Quality is TA for the cohort group so we are going to impute those values at those variables.","a31d376f":"BsmtCond variable imputation","99f26871":"## 1. Introduction\n \nVery often in data analysis, the analyst is going to find missing entries no matter which is the field of research or data sources. Missing data can produced biased estimate and increments of the sample variance because of the reduction of sample size, leading to invalid conclusion. For a data scientist is very important to know how to identify and clasify the mechanisms by wich missinga data occurs and how to handling them. \n\n### 1.1 Types of missing data\n\nBasically there are three types of missing data according to the assumptions based on the reasons for the missing data:\n\n##### Missing completely at random (MCAR)\n\nMissing completely at random (MCAR) is defined as when the probability that the data are missing is not related to either the specific value which is supposed to be obtained or the set of observed responses. MCAR is an ideal but unreasonable assumption for many studies performed in the field of anesthesiology. However, if data are missing by design, because of an equipment failure or because the samples are lost in transit or technically unsatisfactory, such data are regarded as being MCAR.\n\nThe statistical advantage of data that are MCAR is that the analysis remains unbiased. Power may be lost in the design, but the estimated parameters are not biased by the absence of the data.\n\n##### Missing at random (MAR)\n\nMissing at random (MAR) is a more realistic assumption for the studies performed in the anesthetic field. Data are regarded to be MAR when the probability that the responses are missing depends on the set of observed responses, but is not related to the specific missing values which is expected to be obtained.\n\nAs we tend to consider randomness as not producing bias, we may think that MAR does not present a problem. However, MAR does not mean that the missing data can be ignored. If a dropout variable is MAR, we may expect that the probability of a dropout of the variable in each case is conditionally independent of the variable, which is obtained currently and expected to be obtained in the future, given the history of the obtained variable prior to that case.\n\n##### Missing not at random (MNAR)\n\nIf the characters of the data do not meet those of MCAR or MAR, then they fall into the category of missing not at random (MNAR).\n\nThe cases of MNAR data are problematic. The only way to obtain an unbiased estimate of the parameters in such a case is to model the missing data. The model may then be incorporated into a more complex one for estimating the missing values.\n\n### 1.2 Techniques for handling missing data\n\nThere are many different techniques for handling missing values, but basically they are divided in two main groups, deletion methods and imputation methods. The most common approach in practice are the different deletion methods but sometimes when we are working with a small dataset or with a small percentage of missing data, deletion methods maybe are not the most convenient approach. The main reason for using the imputation methods is to obtain a complete and consistent dataset which can be used for the clasical statistical analysis techniques.\n\n#### 1.2.1 Deletion methods\n\n##### Listwise or case deletion\nBy far the most common approach to the missing data is to simply omit those cases with the missing data and analyze the remaining data. This approach is known as the complete case (or available case) analysis or listwise deletion.\n\nListwise deletion is the most frequently used method in handling missing data, and thus has become the default option for analysis in most statistical software packages. Some researchers insist that it may introduce bias in the estimation of the parameters. However, if the assumption of MCAR is satisfied, a listwise deletion is known to produce unbiased estimates and conservative results. When the data do not fulfill the assumption of MCAR, listwise deletion may cause bias in the estimates of the parameters.\n\nIf there is a large enough sample, where power is not an issue, and the assumption of MCAR is satisfied, the listwise deletion may be a reasonable strategy. However, when there is not a large sample, or the assumption of MCAR is not satisfied, the listwise deletion is not the optimal strategy.\n\n##### Pairwise deletion\nPairwise deletion eliminates information only when the particular data-point needed to test a particular assumption is missing. If there is missing data elsewhere in the data set, the existing values are used in the statistical testing. Since a pairwise deletion uses all information observed, it preserves more information than the listwise deletion, which may delete the case with any missing data. This approach presents the following problems: 1) the parameters of the model will stand on different sets of data with different statistics, such as the sample size and standard errors; and 2) it can produce an intercorrelation matrix that is not positive definite, which is likely to prevent further analysis.\n\nPairwise deletion is known to be less biased for the MCAR or MAR data, and the appropriate mechanisms are included as covariates. However, if there are many missing observations, the analysis will be deficient.\n\n#### 1.2.1 Imputation methods\n\n##### Most frequent value imputation\nMost Frequent value is another statistical strategy to impute missing values. It works with categorical features (strings or numerical representations) by replacing missing data with the most frequent values within each column. Works well with categorical features. On the other hand it can introduce bias in the data.\n\n\n##### Mean substitution\nIn a mean substitution, the mean value of a variable is used in place of the missing data value for that same variable. This allows the researchers to utilize the collected data in an incomplete dataset. The theoretical background of the mean substitution is that the mean is a reasonable estimate for a randomly selected observation from a normal distribution. However, with missing values that are not strictly random, especially in the presence of a great inequality in the number of missing values for the different variables, the mean substitution method may lead to inconsistent bias. Furthermore, this approach adds no new information but only increases the sample size and leads to an underestimate of the errors. Thus, mean substitution is not generally accepted.\n\n##### Regression imputation\nImputation is the process of replacing the missing data with estimated values. Instead of deleting any case that has any missing value, this approach preserves all cases by replacing the missing data with a probable value estimated by other available information. After all missing values have been replaced by this approach, the data set is analyzed using the standard techniques for a complete data.\n\nIn regression imputation, the existing variables are used to make a prediction, and then the predicted value is substituted as if an actual obtained value. This approach has a number of advantages, because the imputation retains a great deal of data over the listwise or pairwise deletion and avoids significantly altering the standard deviation or the shape of the distribution. However, as in a mean substitution, while a regression imputation substitutes a value that is predicted from other variables, no novel information is added, while the sample size has been increased and the standard error is reduced.\n\nThese are only a few approaches we can follow to impute values at missing entries.","95dcb915":"Number of rows and columns","36c59d19":"#### 5.1 Columns subseting\n\nComplete columns subset","ffe15aff":"#### 4.2 Imputation for the garage related variables\n\nWe are assuming here that the missing values for those indexes are Missing Not At Random (MNAR) this is because we are assuming that the values are missing because there is no garage at those houses. So we decided to fill those entries with the NA option for categorical variables and 0 for numerical variables.","1fac35cd":"#### 5.2 Nominal variables encoding","df654101":"GarageYrBlt variable Imputation","a68b0b4d":"This table has 79 independent variables, 36 numeric variables, 43 categorical variables, the dependent variable SalesPrice, and has 2919 rows. There are missing values in some variables, PoolQC and MiscFeature has only 10 and 105 non-null values respectively, this has to be address in some way.","bb61eff6":"### 5. Encoding\n\nYear related variables transformation","92fd2421":"GarageCond variable Imputation","9f7997bf":"From this table we can see that the 157 out of 159 missing values from all the Garage related variables appear at the same rows, so we can think this missing values are because there is no Garage at those houses.","00e19681":"#### 5.3 Normalization of numerical variables","f7bddf98":"After the segmentation we see that when the variable Neighborhood values is IDOTRR the most frequent value for the MSzoning variable is RM, and when the Neighborhood value is Mitchel the most frequent value for MSZoning is RL, so we are going to impute those values.","314c44f4":"Imputation for the KitchenQual variable\n\nWe are assuming the missing value here is Missing Completely At Random (MCAR) and we decide to use the mode or the most frequent observed value for the imputation.","e2dc7311":"This table presents some missing entries at the BsmtQual, BsmtCond, BsmtExposure and BsmtFinType2 that cannot be consider because of absense of basement, so we have to treat them diffently.","494c4e68":"Basic statistical description for numerical valued columns","eadd71b8":"At the data_description.txt file appear two categories 'TwnhsE' and 'TwnhsI', we can assume 'Twnhs' corresponds to 'TwnhsI' so we are going to change that, and also there is a little typo at '2fmCon' that should be '2FmCon' we are going to change that too.","10aaa889":"At this row we cannot assume there is no Masonry venner, so we should treat this row differently.\n\nThe variables MSZoning, Functional, Utilities, Electrical, KitchenQual, Exterior1st, Exterior2nd and SaleType has at most 4 missing values, so we can consider those as Missing completely at random (MCAR).\n\nThis leaves us with only one remaining variable, LotFrontage with 259 missing values, this variable make reference to the number of linear feet of street connected to the property, we cannot treat this variable the same way we treat the other variables. Maybe we need to make imputation in other ways, like mean regression, linear regression or K-nearest neighbors imputation.\n\n### 4. Imputation","69c64eb1":"Imputation for the Functional variable\n\nWe are assuming the missing value here is Missing Completely At Random (MCAR) and we decide to use the mode or the most frequent observed value for the imputation.","2c6fe84a":"### 2. Data load and exploration","a298c8a7":"There is no a clear linear relation between GarageLot and LotArea variables, contrary to what we expected.","35ad3087":"#### 4.5 Imputation for variables with less than 5 missing entries\n\nMSZoning variable imputation\n\nWe are assuming that for this variable the missing values are Missing Completely At Random (MCAR), and the MSZoning variable can be related with the Neighborhood variable, so we are going to use it for a segmentation and imput the most frequent value.","80a41a18":"BsmtExposure variable imputation","088f1445":"#### 6.3 Best model fit, predictions and submission","69216698":"#### 6.2 Data subsets model performance","986d8cac":"Finally at the GarageYrBlt variable we found an inconsistent value of 2207, so we assume it should be a value of 2007","d7f7d723":"Imputation for the SaleType variable\n\nWe are assuming the missing value here is Missing Completely At Random (MCAR) and we decide to use the mode or the most frequent observed value for the imputation.","348058f7":"At the Exterior2nd variable we found one more typo at the data_description.txt file appear a category named BrkComm, but at the data appear as Brk Cmn, so we change that.","d153ffc0":"### 7. Conclusion\n\nAs we see, the model exhibited better performance under the imputed dataset, in this case it was better to impute values and keep as much variables as we could than drop variables, maybe we introduce some bias into the data but the trade off worth it.\n\nWe could model impute the missing entries of the LotFrontage variable but we left that for another occasion.","4a5f8736":"At the data_description.txt file appear a category 'C' so we change 'C (all)' for 'C'","8ffe3cb2":"From this table we can see that the 23 out of 24 missing values from both Masonry veneer related variables appear at the same rows, so we can think this missing values are because there is no Masonry veneer at those houses.","b0e7c112":"Imputation for the Exterior1st and Exterior2nd variables\n\nWe are assuming the missing value here is Missing Completely At Random (MCAR) and we decide to use the mode or the most frequent observed value for the imputation.","7d198a25":"From the pie chart we see that almost all garages cond are TA for the cohort group so we are going to impute that value at this variable.","a41acb9b":"All the rows have a missing values percentage below of 25% so we don't have to delete any row.\n\n#### 3.2 Percentage of missing entries by column","fe977bef":"From the histogram we see that almost all garages were built the same year the house was built, so we are going to impute that value at this variable.","a972bf28":"Looking for duplicated values","de70aecd":"#### 2.2 Basic data exploration\n\nName, data type and number of non missing values for each column","b10a4ea7":"The last deletion and imputation was easy and leaves us with only 519 missing entries at different columns, the column LotFrontage is the column in which most of these missing entries are located, and the rest are in other columns having at most 4 missing entries for each column.\n\nImputation for the MasVnrType variable","5fa9ca6f":"### 3. Missing entries analysis\n\nFirst we are going to look for rows with a high (above 40%) missing values percentage in those cases we are going to remove those rows. Then we are going to look at the missing values percentage by column, to see how many entries are missing and the columns with most missing entries.\n\n####    3.1 Percentage of missing entries by row","b5eb6415":"Since there wasn't a linear relation between GarageArea and LotArea, ee decide to input the mean and the most frequent value for those variables.\n\n#### 4.3 Imputation for the basement related variables\n\nWe are assuming here that the missing values fro those indexes are Missing not at random (MNAR) this is because we are assuming that the values are missing because there is no basement at those houses. So we decided to fill those entries with the NA option for categorical variables and 0 for numerical variables.","aa94fc14":"The variable GarageYrBlt has to be related with the variables YrBuilt and  YrRemodAdd.                               \nThe variables GarageFinish and GarageQual has to be related with the variable OverallQual.                           \nThe variable GarageCond has to be related with the variable OverallCond.                                             \nThe variable GarageArea has to be related with the variable LotArea.                                                 \nThe variable GarageCars has to be related with the variable GarageArea.","836787f3":"GarageFinish and GarageQual variable imputation","50f010b0":"#### 2.1 Data load","ebb71da1":"#### 4.6 Imputation for the LotFrontage variable\n\nThe correlation coeficient is 0.4898 we can see that exists a linear relation between the variables LotArea and LotFrontage, and from the scatterplot we can confirm tha idea and we can make that relationship stronger stratificating over the LotConfig variable.","d4fb0e20":"#### 4.1 Deletion of variables with more than 40% of missing values\n\nWe are assuming here that the missing values are Missing not at random (MNAR) this is because the values are missing because there is no pool, alley, fence, fireplace and the other features at those houses or maybe the person who fill the data don't consider that information important. We don't know what is the real reason so we decided to drop those columns from the table.","33bb8475":"From this table we can see that for the remaining 2 rows we can't say there is no Garage at those houses, so we have to treat these two rows with a different approach.","a89a4220":"From the above correlation matrix we confirm that the linear relation is stronger in groups stratified over the LotConfig variable. So we decided to do a linear regression model imputation for the missing values at the LotFrontage variable.","11d88925":"#### 2.3 Data cleaning\n\nWe found a little thing to change at the MSZoning variable","a399306f":"#### 4.4 Imputation for the masonry veneer realted variables\n\nWe are assuming here that the missing values for those indexes are Missing not at random (MNAR) this is because we are assuming that the values are missing because there is no masonry veneer at those houses. So we decided to fill those entries with the NA option for categorical variables and 0 for numerical variables.","50a8d1d5":"Basic statistical description for catogorical valued columns","f2fbe15b":"Separation of the independet variables","5cb6d7dd":"Imputation for the Electrical variable\n\nWe are assuming the missing value here is Missing Completely At Random (MCAR) and we decide to use the mode or the most frequent observed value for the imputation.","91f4a211":"BsmtQual variable imputation","488bd2ba":"There are two more rows left with missing values at the Garage related columns but those values we are assuming are Missing Completely At Random (MCAR) so we are going to treat them differently.","653b0d58":"At the BldgType variable we found two typos","ca0fd800":"There are 5 variables with a high (above 40%) missing entries percentage, PoolQC, MiscFeature (Elevator, 2nd garage, Shed and others), Alley, Fence and FireplaceQu, we can consider that those missing values are because of the absence of the feature that are referenced to, Pool, Alley, Fence, Fireplace, etc. But we can't be sure, so it's better not use them.\n\nThere are some groups which can be analysed together, at least there are three groups, one makes reference to the Garage, another to the Basement and another to Masonry veneer, the number of missing values is the same for each variable inside of each group, that leads us to think that the missing values are correlated for each group and maybe the reason for those missing values is because the absense of the Garage, Basement and Masonry veneer. ","d60cb707":"#### 5.5 Train, valid, test sets split","a5fffa2a":"From this table we can see that the 79 out of 82 missing values from all the Basement related variables appear at the same rows, so we can think this missing values are because there is no Basements at those houses.","205d1af8":"### 6. Model performance comparison\n\nWe are going to measure the model performance over two different data subsets, the first we are using the pairwise deletion approach, at this subset we left out all variables with missing entries. The second we are using the deductive imputation and the pairwise deletion approach, at this subset we only left out variables with more than 40% of missing entries and for the rest of missing entries we use the most frequent value imputation method.\n\n#### 6.1 Model definition","d54ddd1c":"Imputation for the Utilities variable\n\nWe are assuming the missing value here is Missing Completely At Random (MCAR) and we decide to use the mode or the most frequent observed value for the imputation.","f9ae221a":"# Missing data handling tutorial for the House Prices dataset","08a29887":"GarageArea and GarageCars variable Imputation"}}