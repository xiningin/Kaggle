{"cell_type":{"4e42bdbd":"code","2895de3b":"code","72762e8f":"code","9ec30556":"code","bf377f89":"code","05f93e72":"code","734a5b7f":"code","9741404e":"code","dd8c3279":"code","64394ba7":"code","9cbc5cae":"code","d7ed71e5":"code","9743477e":"code","c89e5d37":"markdown","2655ee60":"markdown","948e9641":"markdown","518d8ec7":"markdown","fc8d6b43":"markdown","9d6dd9f5":"markdown","61cf9002":"markdown","48054c6e":"markdown","4cc95dd5":"markdown","5e13824a":"markdown","b15fbe2f":"markdown","0fa326e4":"markdown","4298e999":"markdown","9cb93d9b":"markdown","cbe4e277":"markdown","f73a94a4":"markdown"},"source":{"4e42bdbd":"import math\nimport pandas as pd\nimport numpy as np\nimport os\nimport matplotlib.pyplot as plt\nimport warnings \nimport seaborn as sns\nimport calendar\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.ensemble import RandomForestRegressor","2895de3b":"data = pd.read_csv('..\/input\/20000-boardgames-dataset\/boardgames1.csv', converters={'boardgamemechanic': eval,\n                                                  'boardgamecategory': eval})","72762e8f":"data=data.drop(['label', 'boardgamedesigner', 'boardgameartist', 'boardgameversion','boardgamefamily',\n                'boardgamehonor', 'boardgameexpansion', 'description', 'gamelink', 'boardgamepublisher',\n                'min_community', 'max_community', 'baverage', 'sortindex'], axis=1)","9ec30556":"cats = data['boardgamecategory'].str.join('|').str.get_dummies()\nmecs=data['boardgamemechanic'].str.join('|').str.get_dummies()","bf377f89":"cats.drop([col for col, val in cats.sum().iteritems() if val < 10], axis=1, inplace=True)\nmecs.drop([col for col, val in mecs.sum().iteritems() if val < 10], axis=1, inplace=True)","05f93e72":"data=pd.concat([data, cats], axis=1)\ndata=pd.concat([data, mecs], axis=1).drop(['boardgamecategory', 'boardgamemechanic'], axis=1)","734a5b7f":"data.index=data.name","9741404e":"X = data.drop(['average','name','objectid'], axis=1).select_dtypes(['number'])\ny= data.average","dd8c3279":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)","64394ba7":"estimators = [] \nestimators.append(('standardize', StandardScaler())) \nestimators.append(('rf', RandomForestRegressor()))\npipeline = Pipeline(estimators)\npipeline.fit(np.array(X_train), np.array(y_train))","9cbc5cae":"y_pred=pipeline.predict(np.array(X_test))","d7ed71e5":"r2=r2_score(y_test, y_pred, multioutput='raw_values')","9743477e":"plt.scatter(y_test, y_pred)\nplt.show()\nrf = RandomForestRegressor()\nrf.fit(X_train, y_train)\nfeat_importances = pd.Series(rf.feature_importances_, index=X_train.columns)\nfeat_importances.nlargest(25).plot(kind='barh')","c89e5d37":"Move the name to index","2655ee60":"We'll use the R^2 score which represents the proportion of variance that has been explained by the <br>\nfeatures (see: https:\/\/scikit-learn.org\/stable\/modules\/model_evaluation.html#regression-metrics)","948e9641":"Predict the test data","518d8ec7":"Load packages","fc8d6b43":"Split to train\/test","9d6dd9f5":"Add these into the main df and drop the list cols","61cf9002":"Some potentially useful variables are in list form, lets break these up into dummies","48054c6e":"Get our features and labels (and drop some pointless cols)","4cc95dd5":"objectid - the identifier on boardgamegeeks.com<br>\nname - name of the game<br>\nyearpublished - the year the game was published<br>\nortindex - rank of the game on bbg.com<br>\nminplayer - minumum number of players per the publishers<br>\nmaxplayers - maximum number of players per the publishers<br>\nminplaytime - minimum playtime required per the publishers<br>\nmaxplaytime - maximum playtime per the publishers<br>\nminage - minimum age requiremnet per the publishers<br>\nmin_community - minimum players per the community<br>\nmax_community - max players per the community<br>\ntotalvotes - total number of community vote<br>\nlayerage - minimum age requirement per the community<br>\nlanguagedependence - a rank of amount of in-game text is required during game play<br>\n1: none, 5: unplayable in other language<br>\nserrated - number of users that have rated the game<br>\naverage - user average rating from 1-10<br>\naverage - from the site, determined to be an anti-skewing effort by bgg<br>\nwith system added mid range ratings (from 1-10)<br>\nstddev - average standard deviation of a rating<br>\navgweight - a complexity rating from 1-5 Weight<br>\nnumweights - number of weight votes<br>\nnumgeeklists - number of geeks with game on list<br>\nnumtrading - number of people trading the game<br>\nnumwanting - number of people wanting the game<br>\nnumcomments - number of comments on the site on this game<br>\niteviews - number of views on the site<br>\nnumplays - number of times game was played (according to site users?)<br>\nnumplays_month - number of plays per month<br>\nnews - number news articles on game<br>\nlogs - number of blogs regarding game<br>\nweblink - number of weblinks for the game<br>\npodcast - number of podcasts on the game<br>\nlabel - category of game (mostly boardgame)<br>\nboardgamedesigner_cnt - count of designers<br>\nboardgameartist_cnt - artist count<br>\nboardgamepublisher_cnt - publisher count<br>\nboardgamehonor_cnt - awards count<br>\nboardgamecategory_cnt - category count<br>\nboardgamemechanic_cnt - game mechanics count<br>\nboardgameexpansion_cnt - expansion count<br>\nboardgameversion_cnt - version count (languages)<br>\nboardgamefamily_cnt - game family count<br>\nboardgamedesigner - list of game designers<br>\nboardgameartist - list of game artists<br>\nboardgamepublisher - list of publishers<br>\nboardgamehonor - list of awards<br>\nboardgamecategory - list of categories<br>\nboardgameversion - list of versions<br>\nboardgamemechanic - a list of mechanics<br>\nboardgameexpansion - a list of expansions<br>\nboardgamefamily - a list of boardgames family<br>\ndescription - full text description of game<br>\ngamelink - a link to the game on bgg#=","5e13824a":"First, lets drop some columns which arent containing much info (or too much info, such as baverage and sortindex)","b15fbe2f":"Set up a scale and regression (RF) pipeline","0fa326e4":"Set WD and read data","4298e999":"I am going to start with prediction of score, and begin to build this into a recommender system. This is the initial script.\n\nThe following Data are available to us:","9cb93d9b":"# Building a recommender system for recommending board games","cbe4e277":"Some categories appear too infrequently, lets set a minimum of 10 occurences to keep","f73a94a4":"R^2 is high at around 90%, suggesting the model has a good fit."}}