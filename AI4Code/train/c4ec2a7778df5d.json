{"cell_type":{"925d6b9b":"code","83311705":"code","2e997861":"code","1bf40362":"code","0e98884c":"code","2041a45b":"code","39cc9b88":"code","85ceca74":"code","30750cbc":"code","96003365":"code","9b964d5c":"code","13bbbaff":"code","9326c770":"code","8d889dd8":"code","973ff2af":"markdown","6009fd64":"markdown","d909f34f":"markdown","473e96d6":"markdown"},"source":{"925d6b9b":"import math\nimport random\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\n\nnum_agents = 100\nnum_raster = 10\nnum_wealth = 1000\nseller_loose = 0.20\nbuyer_loose = 0.20\nrounds = 1000\ncount_rounds = 0\n\nagents = np.full(num_agents, num_wealth)\n# uncomment next line, to simulate a wealthy casino playing against guests\n# agents[0] = num_agents*num_wealth*10\n# collect the number of rich agent's per round\nrich_agents_per_round = list()\n# collec the wallet size of all agent's per round\nwallet_agent_per_round = list()\n\n# ensure always the same \"random\" numbers to compare different parameter\nnp.random.seed(3432432432)","83311705":"def gamble(buyer_wealth, seller_wealth) -> int:\n    \"\"\" form perspective buyer: positive means buyer wins, negative buyer looses\"\"\"\n    if buyer_wealth >= seller_wealth:\n        budget = seller_wealth\n    else:\n        budget = buyer_wealth\n    if np.random.randint(0, 1 + 1) == 1:\n        # seller wins\n        return -int(budget * buyer_loose)\n    else:\n        # buyer wins\n        return int(budget * seller_loose)","2e997861":"def draw_agents():\n    global count_rounds, agents\n    # print(\"Agent wallets:\",agents)\n    fig = plt.figure(figsize=(15, 10))\n\n    # draw the agent world as matrix\n    fig.subplots_adjust(wspace=0.25)\n    ax1 = fig.add_subplot(1, 2, 1)\n    axins1 = inset_axes(ax1,\n                        width=\"5%\",  # width = 50% of parent_bbox width\n                        height=\"100%\",  # height : 5%\n                        loc='lower right',\n                        bbox_to_anchor=(0.18, 0., 1, 1),\n                        bbox_transform=ax1.transAxes,\n                        borderpad=0, )\n    im = ax1.matshow(np.resize(agents, (num_raster, num_raster)), interpolation='nearest', vmin=0, vmax=10000)\n    plt.colorbar(im, cax=axins1)\n    axins1.yaxis.tick_left() # draw ticks of colorbar left side\n    ax1.set_title(\"Wealth round \" + str(count_rounds))\n\n    # draw the histogram\n    ax2 = fig.add_subplot(1, 2, 2)\n    bins = np.arange(0, 10000, 100)\n    ax2.set_ylim(0, 10000)\n    ax2.set_ylabel('Wallet size')\n    ax2.set_xlim(0, num_agents)\n    ax2.set_xlabel('Number of agents with same wallet size')\n    ax2.yaxis.set_label_position(\"left\")\n    ax2.tick_params(axis='y', direction='in', length=6, width=2, colors='r',\n                   grid_color='r', grid_alpha=0.5)\n    #ax2.yaxis.tick_left()\n    ax2.set_yticklabels([]) # hide tick labels\n    ax2.hist(agents, bins=bins, orientation='horizontal')\n    # resize axes\n    asp = np.diff(ax2.get_xlim())[0] \/ np.diff(ax2.get_ylim())[0]\n    ax2.set_aspect(asp)\n    plt.show()","1bf40362":"def calc_round(rounds: int):\n    global count_rounds, agents\n    for round in range(rounds):\n        # print(\"Round %i --------\"%round)\n        #print(\".\", end=\"\")\n        count_rounds += 1\n        round_partners = np.arange(num_agents)\n        np.random.shuffle(round_partners)\n        for buyer in range(num_agents):\n            buyer_wealth = agents[buyer]\n            seller = round_partners[buyer]\n            seller_wealth = agents[seller]\n            if buyer != seller:\n                if (buyer_wealth >= 1) & (seller_wealth >= 1):\n                    delta = gamble(buyer_wealth, seller_wealth)\n                    agents[buyer] += delta\n                    agents[seller] -= delta\n                    #print(\"B:%i(%i) <- S: %i(%i): %f\" % (buyer, buyer_wealth, seller, seller_wealth, delta))\n                else:\n                    #print(\"%i skipped\" % (buyer))\n                    pass\n        # log the rich agents per round\n        rich_agents_per_round.append((agents >= num_wealth).sum())\n        wallet_agent_per_round.append(agents.tolist())\n    print(\"Wealth sum:\", agents.sum())\n    print(\"Wealthier>=1000\",(agents >=num_wealth).sum())\n    #print(agents)\n    draw_agents()","0e98884c":"# initial world, were everyone has the same wallet size of num_wallet\ncalc_round(0)","2041a45b":"# after the first round, there are already loosers and winners\ncalc_round(1)","39cc9b88":"calc_round(1)","85ceca74":"# now let's speed up\ncalc_round(5)","30750cbc":"calc_round(13)","96003365":"calc_round(80)","9b964d5c":"calc_round(900)","13bbbaff":"calc_round(1000)","9326c770":"\"\"\"\nShow the history of rich wallets count\n\"\"\"\n#print(rich_agents_per_round)\n#print(wallet_agent_per_round)\n#print(agents)\nrich_agents_per_round_ = np.asarray(rich_agents_per_round)\nfig = plt.figure(figsize=(15, 10))\nax = fig.add_subplot(1,1,1)\ncax = ax.plot(np.arange(rich_agents_per_round_.size),rich_agents_per_round_)\nax.set_ylim(0,num_agents\/2)\nax.set_title(\"Wealth per round: \")\nplt.show()","8d889dd8":"\"\"\"\nShow the history of all wallets\n\"\"\"\nwallet_agent_per_round_ = np.asarray(wallet_agent_per_round).transpose()\n#print(wallet_agent_per_round_)\nfig = plt.figure(figsize=(15, 10))\nax = fig.add_subplot(1,1,1)\nxaxis = np.arange(wallet_agent_per_round_[0].size)\nfor i in range(num_agents):\n    cax = ax.plot(xaxis,wallet_agent_per_round_[i])\n#ax.set_ylim(0,num_agents\/2)\nax.set_title(\"Wealth per round: \")\nplt.show()","973ff2af":"Now let's start the simulation rounds. \n* Left side you see the world populated with agents. The color relates to their wealth (the money the have in their wallet). We start with 1000 Units for all agents. For simplicity reason there are no fractions of Units. \n* To the right side you see the distribution of the size of the wallets of all agents","6009fd64":"# Summary\nEven in a fair gambling\/trading environment statistics always wins = the bigger your wallet, you always win on the long run","d909f34f":"# Simulate the distribution of wealth of an economy with few parameters\nSpektrum der Wissenschaft 1.20, Artikel \"Gefangen im Kasino\" by Bruce M. Boghosian\nInspired from the articel I wrote a small simulation to follow the articel.","473e96d6":"## Conditions for the simulation\nThe actual gambling or bargaining is reflected in this function. You can either think of \n* a buyer how either get's more \"value\" for his money from the seller, e.g. because the bottle of vine is sold under it's value (or vice versa) or \n* a guest in a casino with a starting budget. In that case the wallet size of one player should be set to several times of the initial wallet size of all agent's\n\nConditions & Limitations:\n* buyer or seller can't loose more unit's then they have in the wallet\n* if a buyer has no unit's in his wallet, he can't gamble any more\n* the amount of units an agent wins or loose is a given percentage of the smaller wallet of both players"}}