{"cell_type":{"c1d6aa3c":"code","6ae99146":"code","4fe3cdc6":"code","295778ff":"code","d2924eff":"code","2e836372":"code","0f97904b":"code","9161aedc":"code","8c24aeee":"code","1fe5b474":"code","a663489e":"code","6fc20fbd":"code","31818847":"code","355b89f8":"code","bbd33c70":"code","21a84fff":"code","21f04d1a":"code","ad821858":"code","6ef094fa":"code","9cb37719":"code","84a6fb72":"code","c09ce15a":"code","e86e7da5":"code","e23e0b09":"code","2993beaf":"code","10b90bd8":"code","57bd6936":"code","d2a2c01a":"code","f8380088":"code","c30e8e5d":"code","0c0910ef":"code","f3fce3a4":"code","47a529d2":"code","e4301e14":"code","6b22a2a7":"markdown","ac8383be":"markdown","6a7e063d":"markdown","e70ca003":"markdown","2c9dfeac":"markdown","c8e884ea":"markdown","cc211c47":"markdown","92213a22":"markdown","b06ab786":"markdown","b036abf0":"markdown","3a750eb2":"markdown","8b0e2d0a":"markdown","8a8319bc":"markdown","493c8e22":"markdown","c52528e6":"markdown","c40577cb":"markdown","1d64536b":"markdown","f14cd981":"markdown","9d76693d":"markdown","447dda4c":"markdown","29282f3c":"markdown","7c05026d":"markdown","8002982d":"markdown","7fdde743":"markdown"},"source":{"c1d6aa3c":"#Importing Libraries\nimport numpy as np #NumPy is a general-purpose array-processing package.\nimport pandas as pd #It contains high-level data structures and manipulation tools designed to make data analysis fast and easy.\nimport matplotlib.pyplot as plt #It is a Plotting Library\nimport seaborn as sns #Seaborn is a Python data visualization library based on matplotlib.\nfrom sklearn.linear_model import LogisticRegression #Logistic Regression is a Machine Learning classification algorithm\nfrom sklearn.linear_model import LinearRegression #Linear Regression is a Machine Learning classification algorithm\nfrom sklearn.model_selection import train_test_split #Splitting of Dataset\nfrom sklearn.metrics import classification_report \nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import r2_score\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6ae99146":"# Add path to the dataset directory\ndf = pd.read_csv('..\/input\/zomato-bangalore-restaurants\/zomato.csv')\ndf.head()","4fe3cdc6":"df.shape","295778ff":"df.info()","d2924eff":"df.isna().sum()","2e836372":"#dropping irrelevant columns\nzomato=df.drop(['url','address','phone','dish_liked', 'menu_item', 'reviews_list'],axis=1) ","0f97904b":"#Removing the Duplicates\nzomato.duplicated().sum()\nzomato.drop_duplicates(inplace=True)","9161aedc":"#Remove the NaN values from the dataset\nzomato.isnull().sum()\nzomato.dropna(how='any',inplace=True)\nzomato.info()","8c24aeee":"#Changing the Columns Names\nzomato.columns\nzomato = zomato.rename(columns={'approx_cost(for two people)':'cost','listed_in(type)':'type',\n                                  'listed_in(city)':'city', 'rate':'rating'})\nzomato.columns","1fe5b474":"#Some Transformations\nzomato['cost'] = zomato['cost'].astype(str)\nzomato['cost'] = zomato['cost'].apply(lambda x: x.replace(',','.'))\nzomato['cost'] = zomato['cost'].astype(float)\nzomato.info()","a663489e":"#Removing '\/5' from Rates\nzomato['rating'].unique()\nzomato = zomato.loc[zomato.rating !='NEW']\nzomato = zomato.loc[zomato.rating !='-'].reset_index(drop=True)\nremove_slash = lambda x: x.replace('\/5', '') if type(x) == np.str else x\nzomato.rating = zomato.rating.apply(remove_slash).str.strip().astype('float')\nzomato['rating'].head()","6fc20fbd":"# Adjust the column names\nzomato.name = zomato.name.apply(lambda x:x.title())\nzomato.online_order.replace(('Yes','No'),(True, False),inplace=True)\nzomato.book_table.replace(('Yes','No'),(True, False),inplace=True)\nzomato.head()","31818847":"from collections import Counter\nr_type=zomato['rest_type'].value_counts()[:10]\nsns.barplot(x=r_type,y=r_type.index)\nplt.title(\"Most In-Demand Restaurant Types\")\nplt.xlabel(\"count\")","355b89f8":"zomato.online_order.value_counts().plot(kind='pie')\nw_circle=plt.Circle((0,0),0.7,color='white')\np=plt.gcf()\np.gca().add_artist(w_circle)","bbd33c70":"zomato.book_table.value_counts().plot(kind='pie')\nw_circle=plt.Circle((0,0),0.7,color='white')\np=plt.gcf()\np.gca().add_artist(w_circle)","21a84fff":"ax=df.name.value_counts()[:10].plot(kind='bar')\nplt.xlabel(\"Restaurant Name\")\nplt.ylabel(\"No. of branches\")\nplt.title(\"Top 10 Chain Restaurants\")","21f04d1a":"sns.set_style('white')\ny=pd.crosstab(zomato.rating,zomato.online_order)\ny.plot(kind='bar',stacked=True)","ad821858":"sns.set_style('white')\ny=pd.crosstab(zomato.rating,zomato.book_table)\ny.plot(kind='bar',stacked=True)","6ef094fa":"sns.set_style('darkgrid')\nch=zomato['location'].value_counts()[:10]\nsns.barplot(x=ch,y=ch.index,palette='viridis')\nplt.xlabel('Number of Outlets')\nplt.ylabel('Location')\nplt.show()","9cb37719":"def Encode(zomato):\n    for column in zomato.columns[~zomato.columns.isin(['rating', 'cost', 'votes'])]:\n        zomato[column] = zomato[column].factorize()[0]\n    return zomato\n\nencodedZomato = Encode(zomato.copy())","84a6fb72":"#Get Correlation between different variables\ncorr = encodedZomato.corr(method='kendall')\nplt.figure(figsize=(15,8))\nsns.heatmap(corr, annot=True)","c09ce15a":"#Defining X and Y for model, Train-test split\nx = encodedZomato[[\"online_order\",\"book_table\",\"votes\",\"location\",\"rest_type\",\"cuisines\",\"cost\",\"type\"]]\ny = encodedZomato['rating']\n#Getting Test and Training Set, change test_size to change the train-test split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.2,random_state=353)\nx_train.shape, y_train.shape","e86e7da5":"#Extra Tree Regression\nfrom sklearn.ensemble import  ExtraTreesRegressor\nETree=ExtraTreesRegressor(n_estimators = 200)\nETree.fit(x_train,y_train)\ny_predict=ETree.predict(x_test)\nr2_score(y_test,y_predict)","e23e0b09":"#DTree Regression\nfrom sklearn.tree import DecisionTreeRegressor\nDTree=DecisionTreeRegressor(min_samples_leaf=.00001)\nDTree.fit(x_train,y_train)\ny_predict=DTree.predict(x_test)\nr2_score(y_test,y_predict)","2993beaf":"#Some LinReg Model\nreg=LinearRegression()\nreg.fit(x_train,y_train)\ny_pred=reg.predict(x_test)\nr2_score(y_test,y_pred)","10b90bd8":"from sklearn.ensemble import GradientBoostingRegressor\ngbr = GradientBoostingRegressor()\ngbr.fit(x_train, y_train)\ny_predict=gbr.predict(x_test)\nr2_score(y_test,y_predict)","57bd6936":"from xgboost import XGBRegressor\n\nxgb = XGBRegressor(booster = 'gbtree', learning_rate = 0.1, max_depth = 15, n_estimators = 200)\nxgb.fit(x_train, y_train)\ny_predict=xgb.predict(x_test)\n\nr2_score(y_test,y_predict)","d2a2c01a":"from sklearn.ensemble import RandomForestRegressor\n# tuning=dict()\nrf=RandomForestRegressor(n_estimators=200,random_state=50,min_samples_leaf=.00001)\nrf.fit(x_train,y_train)\ny_pred=rf.predict(x_test)\nr2_score(y_test,y_pred)","f8380088":"models = pd.DataFrame({\n    'Model' : ['Linear Regression', 'Decision Tree', 'Random Forest','Extra Tree Regressor', 'Gradient Boost', 'XgBoost'],\n    'Score' : [reg.score(x_test, y_test), DTree.score(x_test, y_test), rf.score(x_test, y_test), ETree.score(x_test, y_test),\n               gbr.score(x_test, y_test), xgb.score(x_test, y_test)]\n})\n\n\nmodels.sort_values(by = 'Score', ascending = False)","c30e8e5d":"# Add path to the prediction dataset directory\ndf_new = pd.read_csv('..\/input\/zomato-prediction\/Zomato_predictions.csv')\n#Converting cost to float\ndf_new['cost'] = df_new['cost'].astype(float)\ndf_new","0c0910ef":"zomatoNew = Encode(df_new.copy())\nzomatoNew","f3fce3a4":"# To predict the ratings, change xgb to any one of rf, gbr, DTree, Etree, reg to try a different model\nx_pred = zomatoNew[[\"online_order\",\"book_table\",\"votes\",\"location\",\"rest_type\",\"cuisines\",\"cost\",\"type\"]]\ny_predict=xgb.predict(x_pred)\ny_pred_list = [ round(elem, 1) for elem in y_predict ]\ny_pred_list","47a529d2":"df_new[\"rating\"] = y_pred_list\ndf_new","e4301e14":"#Write to path\ndf_new.to_csv(\"..\/working\/zomato_predicted_ratings.csv\", index = False)","6b22a2a7":"## **Extra Tree Regressor**\n\nExtra Trees Regressor is an ensemble learning method fundamentally based on decision trees. Extra Trees Regressor, like RandomForest, randomizes certain decisions and subsets of data to minimize over-learning from the data and overfitting\n\nFor more details, visit https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.ExtraTreesRegressor","ac8383be":"**Proportion of Restaurants that provide online service**","6a7e063d":"**Proportion of restaurants that allow booking tables**","e70ca003":"# **Predicting Ratings for New Restaurants**","2c9dfeac":"# **EDA and Cleaning**","c8e884ea":"# **Conclusions**\n\nWe have successfully trained and built multiple models on the dataset. We also found that the XGBoost regressor works incredibly well for this data. This analysis shows that once the model has been trained and tested on the data, we can actually predict the ratings for new restaurants as well with the independent variables being available to us.","cc211c47":"**Impact of Online Ordering on Ratings**\n\nIt can be seen from the chart below that restaurants that allow ordering online tend to have higher ratings","92213a22":"# **Visualization**","b06ab786":"## **Decision Tree Regressor**\n\nDecision Trees (DTs) are a non-parametric supervised learning method used for classification and regression. The goal is to create a model that predicts the value of a target variable by learning simple decision rules inferred from the data features. A tree can be seen as a piecewise constant approximation.\n\nFor more details, visit https:\/\/scikit-learn.org\/stable\/modules\/tree.html\n\nalso, https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.tree.DecisionTreeRegressor","b036abf0":"Now let us compare and contrast the performance of each of our models by arranging their r-squared scores in a tabulated format","3a750eb2":"## **Linear Regression Model**\n\nIn statistics, linear regression is a linear approach for modelling the relationship between a scalar response and one or more explanatory variables. The case of one explanatory variable is called simple linear regression.\n\nVisit: https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.LinearRegression","8b0e2d0a":"## **Random Forest Regressor**\n\nA random forest is a meta estimator that fits a number of classifying decision trees on various sub-samples of the dataset and uses averaging to improve the predictive accuracy and control over-fitting.\n\nVisit https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.RandomForestRegressor to learn more","8a8319bc":"# **Introduction**\nPredictive models are often used by investors to decide whether a budding business would be profitable in their domain. The success of a new restaurant can be similarly predicted based on past data relating to the location and services offered. We will develop a predictor model to find out the popularity and success a new restaurant can generate with an extensive study. This study aims to offer huge insights on which factors determine the success of a new restaurant and predict ratings for newer restaurants","493c8e22":"**Top 10 retaurant locations**","c52528e6":"# **Inferences**\n\nIt is clearly visible that the XGBoost regressor works the best with our dataset, which means that we'll be using this model to predict the ratings of the our future dataset.","c40577cb":"## **XGBoost Regressor**\n\nXGBoost is a decision-tree-based ensemble Machine Learning algorithm that uses a gradient boosting framework. In prediction problems involving unstructured data (images, text, etc.) artificial neural networks tend to outperform all other algorithms or frameworks. However, when it comes to small-to-medium structured\/tabular data, decision tree based algorithms are considered best-in-class right now.\nVisit https:\/\/xgboost.readthedocs.io\/en\/latest\/python\/python_api.html?highlight=xgbregressor#xgboost.XGBRegressor to learn more","1d64536b":"# **Predictive Models**\n\nWe now proceed to build a model that can predict ratings for new restaurants on the market to enable informed decision making by the stakeholders. The first step for this is to encode the columns containing string types into some sort of code.","f14cd981":"## **Splitting the Dataset**\n\nNext up is the very important step of the deciding the train-test split for the different models. In this, after careful consideration, a train-test split of 4:1 is chosen. Also, the dependent and independent variables are declared for the models. The target variable here is rating which is what we aim to predict for future restaurants.","9d76693d":"## **Gradient Boosting Regressor**\n\nGB builds an additive model in a forward stage-wise fashion; it allows for the optimization of arbitrary differentiable loss functions. In each stage a regression tree is fit on the negative gradient of the given loss function.\n\nFor more details, visit https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.GradientBoostingRegressor","447dda4c":"Now we need to use our model, the XGBoost regressor, to predict the ratings for new restaurants","29282f3c":"Next we try to plot a heatmap to get the correlation between the various available variables","7c05026d":"**Impact of Table Booking on Ratings**\n\nIt can be seen from the chart below that restaurants that allow table bookings tend to have higher ratings.","8002982d":"**Top 10 most popular restaurant types**","7fdde743":"**Most popular restaurant chains**"}}