{"cell_type":{"995dcdc4":"code","51310ae8":"code","07b2807d":"code","56a2fbd0":"code","da9ee4ee":"code","522aa4dd":"code","1ab82847":"code","dcd4b5d3":"code","4b7c76d8":"code","7fdcfa54":"code","c0945e21":"code","10348d9b":"code","d3cbc5b0":"code","2ad66a18":"code","eb876e0d":"code","04286ae9":"markdown","7aa603aa":"markdown","39050965":"markdown","33f63d4e":"markdown","8b17907a":"markdown","16b0ee7b":"markdown","ba46fad0":"markdown","c18812b3":"markdown","fee58f25":"markdown","f59d2c04":"markdown","e537d86c":"markdown","a128dc09":"markdown","0e35eeb1":"markdown","d6dc883f":"markdown","7495348a":"markdown","449ac303":"markdown","38c38475":"markdown","20a42445":"markdown","c081427c":"markdown","a164af20":"markdown","7956f438":"markdown","7cde8cac":"markdown","01b7f212":"markdown"},"source":{"995dcdc4":"!pip install dataprep by\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom warnings import filterwarnings\nfrom datetime import datetime\nfrom mpl_toolkits.mplot3d import Axes3D\nimport statsmodels.api as sm\nimport missingno as msno\nimport statsmodels.stats.api as sms\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import scale\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom scipy.stats import levene\nfrom scipy.stats import shapiro\nfrom scipy.stats.stats import pearsonr\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict\nfrom sklearn.preprocessing import scale\nfrom sklearn.model_selection import ShuffleSplit, GridSearchCV\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn import model_selection\nfrom sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.cross_decomposition import PLSRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import ElasticNetCV\nfrom sklearn import linear_model\nfrom sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingRegressor, GradientBoostingClassifier\nimport xgboost as xgb\nfrom xgboost import XGBRegressor, XGBClassifier\nfrom lightgbm import LGBMRegressor, LGBMClassifier\nfrom catboost import CatBoostRegressor, CatBoostClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn import tree\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, roc_auc_score, roc_curve\nfrom yellowbrick.cluster import KElbowVisualizer\nfrom sklearn.cluster import KMeans\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.manifold import Isomap,TSNE\nfrom sklearn.feature_selection import mutual_info_classif\nfrom tqdm.notebook import tqdm\nfrom scipy.stats import ttest_ind\nimport plotly.offline as pyo\nimport scipy.stats as stats\nimport pymc3 as pm\nfrom dataprep.eda import *\nfrom dataprep.eda import plot\nfrom dataprep.eda import plot_diff\nfrom dataprep.eda import plot_correlation\nfrom dataprep.eda import plot_missing\nimport plotly.figure_factory as ff\nfrom collections import Counter\nimport pandas_profiling as pp\nfrom mpl_toolkits.basemap import Basemap\nimport datetime as dt\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.io as pio\nimport folium\nfrom folium import plugins","51310ae8":"YEAR_2000 = pd.read_csv(\"..\/input\/20002020-turkey-wildfire-data-nasa\/2000-2020 TURKEY\/modis_2000_Turkey.csv\")\nYEAR_2001 = pd.read_csv(\"..\/input\/20002020-turkey-wildfire-data-nasa\/2000-2020 TURKEY\/modis_2001_Turkey.csv\")\nYEAR_2002 = pd.read_csv(\"..\/input\/20002020-turkey-wildfire-data-nasa\/2000-2020 TURKEY\/modis_2002_Turkey.csv\")\nYEAR_2003 = pd.read_csv(\"..\/input\/20002020-turkey-wildfire-data-nasa\/2000-2020 TURKEY\/modis_2003_Turkey.csv\")\nYEAR_2004 = pd.read_csv(\"..\/input\/20002020-turkey-wildfire-data-nasa\/2000-2020 TURKEY\/modis_2004_Turkey.csv\")\nYEAR_2005 = pd.read_csv(\"..\/input\/20002020-turkey-wildfire-data-nasa\/2000-2020 TURKEY\/modis_2005_Turkey.csv\")\nYEAR_2006 = pd.read_csv(\"..\/input\/20002020-turkey-wildfire-data-nasa\/2000-2020 TURKEY\/modis_2006_Turkey.csv\")\nYEAR_2007 = pd.read_csv(\"..\/input\/20002020-turkey-wildfire-data-nasa\/2000-2020 TURKEY\/modis_2007_Turkey.csv\")\nYEAR_2008 = pd.read_csv(\"..\/input\/20002020-turkey-wildfire-data-nasa\/2000-2020 TURKEY\/modis_2008_Turkey.csv\")\nYEAR_2009 = pd.read_csv(\"..\/input\/20002020-turkey-wildfire-data-nasa\/2000-2020 TURKEY\/modis_2009_Turkey.csv\")\nYEAR_2010 = pd.read_csv(\"..\/input\/20002020-turkey-wildfire-data-nasa\/2000-2020 TURKEY\/modis_2010_Turkey.csv\")\nYEAR_2011 = pd.read_csv(\"..\/input\/20002020-turkey-wildfire-data-nasa\/2000-2020 TURKEY\/modis_2011_Turkey.csv\")\nYEAR_2012 = pd.read_csv(\"..\/input\/20002020-turkey-wildfire-data-nasa\/2000-2020 TURKEY\/modis_2012_Turkey.csv\")\nYEAR_2013 = pd.read_csv(\"..\/input\/20002020-turkey-wildfire-data-nasa\/2000-2020 TURKEY\/modis_2013_Turkey.csv\")\nYEAR_2014 = pd.read_csv(\"..\/input\/20002020-turkey-wildfire-data-nasa\/2000-2020 TURKEY\/modis_2014_Turkey.csv\")\nYEAR_2015 = pd.read_csv(\"..\/input\/20002020-turkey-wildfire-data-nasa\/2000-2020 TURKEY\/modis_2015_Turkey.csv\")\nYEAR_2016 = pd.read_csv(\"..\/input\/20002020-turkey-wildfire-data-nasa\/2000-2020 TURKEY\/modis_2016_Turkey.csv\")\nYEAR_2017 = pd.read_csv(\"..\/input\/20002020-turkey-wildfire-data-nasa\/2000-2020 TURKEY\/modis_2017_Turkey.csv\")\nYEAR_2018 = pd.read_csv(\"..\/input\/20002020-turkey-wildfire-data-nasa\/2000-2020 TURKEY\/modis_2018_Turkey (1).csv\")\nYEAR_2019 = pd.read_csv(\"..\/input\/20002020-turkey-wildfire-data-nasa\/2000-2020 TURKEY\/modis_2019_Turkey.csv\")\nYEAR_2020 = pd.read_csv(\"..\/input\/20002020-turkey-wildfire-data-nasa\/2000-2020 TURKEY\/modis_2020_Turkey.csv\")","07b2807d":"YEAR_LIST = [YEAR_2000,YEAR_2001,YEAR_2002,YEAR_2003,\n            YEAR_2004,YEAR_2005,YEAR_2006,YEAR_2007,YEAR_2008,\n            YEAR_2009,YEAR_2010,YEAR_2011,YEAR_2012,YEAR_2013,\n            YEAR_2014,YEAR_2015,YEAR_2016,YEAR_2017,YEAR_2018,\n            YEAR_2019,YEAR_2020]","56a2fbd0":"index_counting = 2000\nfor x_list in YEAR_LIST:\n    print(\"---\"*10+\"\\n\")\n    print(str(index_counting))\n    print(\"\\n\")\n    print(x_list[\"type\"].value_counts())\n    print(\"---\"*10+\"\\n\")\n    index_counting = index_counting+ 1","da9ee4ee":"YEAR_2000 = YEAR_2000[YEAR_2000[\"type\"] == 0].reset_index(drop=True)\nYEAR_2000.sort_values(by=[\"acq_date\"],inplace=True,ascending=True)\n\nYEAR_2001 = YEAR_2001[YEAR_2001[\"type\"] == 0].reset_index(drop=True)\nYEAR_2001.sort_values(by=[\"acq_date\"],inplace=True,ascending=True)\n\nYEAR_2002 = YEAR_2002[YEAR_2002[\"type\"] == 0].reset_index(drop=True)\nYEAR_2002.sort_values(by=[\"acq_date\"],inplace=True,ascending=True)\n\nYEAR_2003 = YEAR_2003[YEAR_2003[\"type\"] == 0].reset_index(drop=True)\nYEAR_2003.sort_values(by=[\"acq_date\"],inplace=True,ascending=True)\n\nYEAR_2004 = YEAR_2004[YEAR_2004[\"type\"] == 0].reset_index(drop=True)\nYEAR_2004.sort_values(by=[\"acq_date\"],inplace=True,ascending=True)\n\nYEAR_2005 = YEAR_2005[YEAR_2005[\"type\"] == 0].reset_index(drop=True)\nYEAR_2005.sort_values(by=[\"acq_date\"],inplace=True,ascending=True)\n\nYEAR_2006 = YEAR_2006[YEAR_2006[\"type\"] == 0].reset_index(drop=True)\nYEAR_2006.sort_values(by=[\"acq_date\"],inplace=True,ascending=True)\n\nYEAR_2007 = YEAR_2007[YEAR_2007[\"type\"] == 0].reset_index(drop=True)\nYEAR_2007.sort_values(by=[\"acq_date\"],inplace=True,ascending=True)\n\nYEAR_2008 = YEAR_2008[YEAR_2008[\"type\"] == 0].reset_index(drop=True)\nYEAR_2008.sort_values(by=[\"acq_date\"],inplace=True,ascending=True)\n\nYEAR_2009 = YEAR_2009[YEAR_2009[\"type\"] == 0].reset_index(drop=True)\nYEAR_2009.sort_values(by=[\"acq_date\"],inplace=True,ascending=True)\n\nYEAR_2010 = YEAR_2010[YEAR_2010[\"type\"] == 0].reset_index(drop=True)\nYEAR_2010.sort_values(by=[\"acq_date\"],inplace=True,ascending=True)\n\nYEAR_2011 = YEAR_2011[YEAR_2011[\"type\"] == 0].reset_index(drop=True)\nYEAR_2011.sort_values(by=[\"acq_date\"],inplace=True,ascending=True)\n\nYEAR_2012 = YEAR_2012[YEAR_2012[\"type\"] == 0].reset_index(drop=True)\nYEAR_2012.sort_values(by=[\"acq_date\"],inplace=True,ascending=True)\n\nYEAR_2013 = YEAR_2013[YEAR_2013[\"type\"] == 0].reset_index(drop=True)\nYEAR_2013.sort_values(by=[\"acq_date\"],inplace=True,ascending=True)\n\nYEAR_2014 = YEAR_2014[YEAR_2014[\"type\"] == 0].reset_index(drop=True)\nYEAR_2014.sort_values(by=[\"acq_date\"],inplace=True,ascending=True)\n\nYEAR_2015 = YEAR_2015[YEAR_2015[\"type\"] == 0].reset_index(drop=True)\nYEAR_2015.sort_values(by=[\"acq_date\"],inplace=True,ascending=True)\n\nYEAR_2016 = YEAR_2016[YEAR_2016[\"type\"] == 0].reset_index(drop=True)\nYEAR_2016.sort_values(by=[\"acq_date\"],inplace=True,ascending=True)\n\nYEAR_2017 = YEAR_2017[YEAR_2017[\"type\"] == 0].reset_index(drop=True)\nYEAR_2017.sort_values(by=[\"acq_date\"],inplace=True,ascending=True)\n\nYEAR_2018 = YEAR_2018[YEAR_2018[\"type\"] == 0].reset_index(drop=True)\nYEAR_2018.sort_values(by=[\"acq_date\"],inplace=True,ascending=True)\n\nYEAR_2019 = YEAR_2019[YEAR_2019[\"type\"] == 0].reset_index(drop=True)\nYEAR_2019.sort_values(by=[\"acq_date\"],inplace=True,ascending=True)\n\nYEAR_2020 = YEAR_2020[YEAR_2020[\"type\"] == 0].reset_index(drop=True)\nYEAR_2020.sort_values(by=[\"acq_date\"],inplace=True,ascending=True)","522aa4dd":"index_counting = 2000\nfor x_list in YEAR_LIST:\n    print(\"---\"*10+\"\\n\")\n    print(str(index_counting))\n    print(\"\\n\")\n    print(x_list.describe().T)\n    print(\"---\"*10+\"\\n\")\n    index_counting = index_counting + 1","1ab82847":"index_counting = 2000\nfor x_list in YEAR_LIST:\n    print(\"---\"*10+\"\\n\")\n    print(str(index_counting))\n    print(\"\\n\")\n    print(x_list[\"acq_date\"].value_counts())\n    print(\"---\"*10+\"\\n\")\n    index_counting = index_counting + 1","dcd4b5d3":"index_counting = 2000\nfor x_list in YEAR_LIST:\n    print(\"---\"*10+\"\\n\")\n    print(str(index_counting))\n    print(\"\\n\")\n    print(x_list[x_list[\"frp\"] == x_list[\"frp\"].max()])\n    print(\"---\"*10+\"\\n\")\n    index_counting = index_counting + 1","4b7c76d8":"MAP_FUNCTION = folium.Map(location=[38.9637,35.2433],\n                  tiles='openstreetmap',\n                  zoom_start=6.4)\n\n\nfolium.CircleMarker(\n    location=[37.7996,42.9991],\n    radius=20,\n    popup=\"<b>MAXIMUM FRP (2000)<b>\",\n    tooltip=\"Click me\",\n    color='#FF0000',\n    fill=True,\n    fill_color='#FF0000',\n).add_to(MAP_FUNCTION)\n\nfolium.CircleMarker(\n    location=[37.0389,39.8116],\n    radius=20,\n    popup=\"<b>MAXIMUM FRP (2001)<b>\",\n    tooltip=\"Click me\",\n    color='#FF0000',\n    fill=True,\n    fill_color='#FF0000',\n).add_to(MAP_FUNCTION)\n\nfolium.CircleMarker(\n    location=[39.5647,28.2107],\n    radius=20,\n    popup=\"<b>MAXIMUM FRP (2002)<b>\",\n    tooltip=\"Click me\",\n    color='#FF0000',\n    fill=True,\n    fill_color='#FF0000',\n).add_to(MAP_FUNCTION)\n\nfolium.CircleMarker(\n    location=[36.7185,32.0718],\n    radius=20,\n    popup=\"<b>MAXIMUM FRP (2003)<b>\",\n    tooltip=\"Click me\",\n    color='#FF0000',\n    fill=True,\n    fill_color='#FF0000',\n).add_to(MAP_FUNCTION)\n\nfolium.CircleMarker(\n    location=[38.0985,26.9208],\n    radius=20,\n    popup=\"<b>MAXIMUM FRP (2004)<b>\",\n    tooltip=\"Click me\",\n    color='#FF0000',\n    fill=True,\n    fill_color='#FF0000',\n).add_to(MAP_FUNCTION)\n\nfolium.CircleMarker(\n    location=[37.0856,30.9599],\n    radius=20,\n    popup=\"<b>MAXIMUM FRP (2005)<b>\",\n    tooltip=\"Click me\",\n    color='#FF0000',\n    fill=True,\n    fill_color='#FF0000',\n).add_to(MAP_FUNCTION)\n\nfolium.CircleMarker(\n    location=[37.0248,27.7112],\n    radius=20,\n    popup=\"<b>MAXIMUM FRP (2006)<b>\",\n    tooltip=\"Click me\",\n    color='#FF0000',\n    fill=True,\n    fill_color='#FF0000',\n).add_to(MAP_FUNCTION)\n\nfolium.CircleMarker(\n    location=[38.3489,26.4999],\n    radius=20,\n    popup=\"<b>MAXIMUM FRP (2007)<b>\",\n    tooltip=\"Click me\",\n    color='#FF0000',\n    fill=True,\n    fill_color='#FF0000',\n).add_to(MAP_FUNCTION)\n\nfolium.CircleMarker(\n    location=[40.045,26.3685],\n    radius=20,\n    popup=\"<b>MAXIMUM FRP (2008)<b>\",\n    tooltip=\"Click me\",\n    color='#FF0000',\n    fill=True,\n    fill_color='#FF0000',\n).add_to(MAP_FUNCTION)\n\nfolium.CircleMarker(\n    location=[37.9534,40.3292],\n    radius=20,\n    popup=\"<b>MAXIMUM FRP (2009)<b>\",\n    tooltip=\"Click me\",\n    color='#FF0000',\n    fill=True,\n    fill_color='#FF0000',\n).add_to(MAP_FUNCTION)\n\nfolium.CircleMarker(\n    location=[39.8157,42.5162],\n    radius=20,\n    popup=\"<b>MAXIMUM FRP (2010)<b>\",\n    tooltip=\"Click me\",\n    color='#FF0000',\n    fill=True,\n    fill_color='#FF0000',\n).add_to(MAP_FUNCTION)\n\nfolium.CircleMarker(\n    location=[37.2631,39.6451],\n    radius=20,\n    popup=\"<b>MAXIMUM FRP (2011)<b>\",\n    tooltip=\"Click me\",\n    color='#FF0000',\n    fill=True,\n    fill_color='#FF0000',\n).add_to(MAP_FUNCTION)\n\nfolium.CircleMarker(\n    location=[35.8782,36.163],\n    radius=20,\n    popup=\"<b>MAXIMUM FRP (2012)<b>\",\n    tooltip=\"Click me\",\n    color='#FF0000',\n    fill=True,\n    fill_color='#FF0000',\n).add_to(MAP_FUNCTION)\n\nfolium.CircleMarker(\n    location=[40.2606,26.4552],\n    radius=20,\n    popup=\"<b>MAXIMUM FRP (2013)<b>\",\n    tooltip=\"Click me\",\n    color='#FF0000',\n    fill=True,\n    fill_color='#FF0000',\n).add_to(MAP_FUNCTION)\n\nfolium.CircleMarker(\n    location=[39.8813,38.1183],\n    radius=20,\n    popup=\"<b>MAXIMUM FRP (2014)<b>\",\n    tooltip=\"Click me\",\n    color='#FF0000',\n    fill=True,\n    fill_color='#FF0000',\n).add_to(MAP_FUNCTION)\n\nfolium.CircleMarker(\n    location=[37.043,40.0467],\n    radius=20,\n    popup=\"<b>MAXIMUM FRP (2015)<b>\",\n    tooltip=\"Click me\",\n    color='#FF0000',\n    fill=True,\n    fill_color='#FF0000',\n).add_to(MAP_FUNCTION)\n\nfolium.CircleMarker(\n    location=[39.7397,44.6392],\n    radius=20,\n    popup=\"<b>MAXIMUM FRP (2016)<b>\",\n    tooltip=\"Click me\",\n    color='#FF0000',\n    fill=True,\n    fill_color='#FF0000',\n).add_to(MAP_FUNCTION)\n\nfolium.CircleMarker(\n    location=[36.458,32.3077],\n    radius=20,\n    popup=\"<b>MAXIMUM FRP (2017)<b>\",\n    tooltip=\"Click me\",\n    color='#FF0000',\n    fill=True,\n    fill_color='#FF0000',\n).add_to(MAP_FUNCTION)\n\nfolium.CircleMarker(\n    location=[36.9329,35.4883],\n    radius=20,\n    popup=\"<b>MAXIMUM FRP (2018)<b>\",\n    tooltip=\"Click me\",\n    color='#FF0000',\n    fill=True,\n    fill_color='#FF0000',\n).add_to(MAP_FUNCTION)\n\nfolium.CircleMarker(\n    location=[36.8772,40.1193],\n    radius=20,\n    popup=\"<b>MAXIMUM FRP (2019)<b>\",\n    tooltip=\"Click me\",\n    color='#FF0000',\n    fill=True,\n    fill_color='#FF0000',\n).add_to(MAP_FUNCTION)\n\nfolium.CircleMarker(\n    location=[38.4069,26.5102],\n    radius=20,\n    popup=\"<b>MAXIMUM FRP (2020)<b>\",\n    tooltip=\"Click me\",\n    color='#FF0000',\n    fill=True,\n    fill_color='#FF0000',\n).add_to(MAP_FUNCTION)\n\nMAP_FUNCTION","7fdcfa54":"index_counting = 2000\nfor x_list in YEAR_LIST:\n    print(\"---\"*10+\"\\n\")\n    print(str(index_counting))\n    print(\"\\n\")\n    print(x_list[x_list[\"frp\"] == x_list[\"frp\"].max()][\"acq_date\"].values)\n    print(\"---\"*10+\"\\n\")\n    index_counting = index_counting + 1","c0945e21":"index_counting = 2000\nfor x_list in YEAR_LIST:\n    print(\"---\"*10+\"\\n\")\n    print(str(index_counting))\n    print(\"\\n\")\n    print(x_list[x_list[\"frp\"] == x_list[\"frp\"].max()][\"acq_time\"].values)\n    print(\"---\"*10+\"\\n\")\n    index_counting = index_counting + 1","10348d9b":"index_counting = 2000\nfor x_list in YEAR_LIST:\n    print(\"---\"*10+\"\\n\")\n    print(str(index_counting))\n    print(\"\\n\")\n    print(x_list[x_list[\"frp\"] == x_list[\"frp\"].max()][\"bright_t31\"].values)\n    print(\"---\"*10+\"\\n\")\n    index_counting = index_counting + 1","d3cbc5b0":"index_counting = 2000\nfor x_list in YEAR_LIST:\n    print(\"---\"*10+\"\\n\")\n    print(str(index_counting))\n    print(\"\\n\")\n    print(x_list[x_list[\"frp\"] == x_list[\"frp\"].max()][\"brightness\"].values)\n    print(\"---\"*10+\"\\n\")\n    index_counting = index_counting + 1","2ad66a18":"index_counting = 2000\nfor x_list in YEAR_LIST:\n    figure = plt.figure(figsize=(17,6))\n    sns.lineplot(x=x_list[\"acq_date\"],y=x_list[\"frp\"])\n    plt.title(str(index_counting))\n    plt.axis(\"off\")\n    plt.tight_layout()\n    plt.show()\n\n\n    index_counting = index_counting + 1","eb876e0d":"index_counting = 2000\nfor x_list in YEAR_LIST:\n    figure = plt.figure(figsize=(17,6))\n    sns.lineplot(x=x_list[\"acq_date\"],y=x_list[\"brightness\"])\n    plt.title(str(index_counting))\n    plt.axis(\"off\")\n    plt.tight_layout()\n    plt.show()\n\n\n    index_counting = index_counting + 1","04286ae9":"### INFORMATIONS","7aa603aa":"#### #### DATE-BRIGHTNESS","39050965":"# INVESTIGATION BASED YEARS","33f63d4e":"#### MAX DATE","8b17907a":"#### MAX FRP","16b0ee7b":"#### **ATTENTION**\n* THE HIGH POINT OF THE BRIGHTNESS GRAPH MEANS THAT THE TEMPERATURE IS RISING.","ba46fad0":"#### **ATTENTION**\n* TYPE 0 INDICATES FOREST FIRES\n\n#### **ATTENTION**\n* MOST FIRE RECORDED IN 2009","c18812b3":"#### MAX FRP \/ DATE","fee58f25":"#### DESCRIBE","f59d2c04":"#### MAX FRP \/ BRIGHT T 31","e537d86c":"#### MAX FRP \/ TIME","a128dc09":"#### **ATTENTION**\n* THE DATES ARE ORDERED FROM LOWEST TO LARGEST.","0e35eeb1":"#### MAX FRP MAP","d6dc883f":"#### **ATTENTION**\n* HIGH FRP VALUES HAVE BEEN COLLECTING TO THE COASTLINE OVER THE YEARS\n* THIS SITUATION SHOWS THE EFFECT OF GLOBAL WARMING","7495348a":"### FRP PLOT","449ac303":"#### ATTENTION\n* OBSERVE DATES RECORDED\n* THIS INDICATES THAT THE MOST AMOUNT OF HEAT RISE (HOTPOINTS) HAS HAPPENED AT THAT DATE\n* HEAT DETECTED MOSTLY IN JUNE AND OCTOBER\n* TOWARDS 2020, THE AMOUNT OF HEAT DETECTED IN THE WINTER MONTHS INCREASED","38c38475":"#### MAX FRP \/ BRIGHTNESS","20a42445":"#### DATE-FRP","c081427c":"#### **ATTENTION**\n* FRP AVERAGE VALUES INCREASED FROM 2008 TO 2020.","a164af20":"# HISTORY\n\n#### 2000-2020 TURKEY WILDFIRE DATA \/ NASA\n\n**BE CAREFUL OF THE FILE NAMES.**\n\n**IT CONTAINS THE DATA NEEDED TO RESEARCH LATEST FOREST FIRES IN TURKEY.**\n\n**PAY ATTENTION TO THE DATE INTERVALS.**\n\n#### Content\n\nData on recent forest fires in Turkey, published with permission from NASA Portal.\n\nThe data was created based on the hotspots and obtained from the satellite.\n\n3 SEPARATE SATELLITE DATA:\n\n* MODIS C6.1\n* SUOMI VIIRS C2\n* J1 VIIRS C1\n\n#### GENERAL ATTRIBUTES\n\n* Latitude\n\nCenter of nominal 375 m fire pixel\n\n* Longitude\n\nCenter of nominal 375 m fire pixel\n\n* Bright_ti4\n\n(Brightness temperature I-4)\n\nVIIRS I-4: channel brightness temperature of the fire pixel measured in Kelvin.\n\n* Scan\n\n(Along Scan pixel size)\n\nThe algorithm produces approximately 375 m pixels at nadir. Scan and track reflect actual pixel size.\n\n* Track\n\n(Along Track pixel size\n\nThe algorithm produces approximately 375 m pixels at nadir. Scan and track reflect actual pixel size.\n\n* Acq_Date\n\n(Acquisition Date)\n\nDate of VIIRS acquisition.\n\n* Acq_Time\n\n(Acquisition Time)\n\nTime of acquisition\/overpass of the satellite (in UTC).\n\nSatellite N Suomi National Polar-orbiting Partnership (Suomi NPP)\n\n* Confidence\n\nThis value is based on a collection of intermediate algorithm quantities used in the detection process. It is intended to help users gauge the quality of individual hotspot\/fire pixels. Confidence values are set to low, nominal and high. Low confidence daytime fire pixels are typically associated with areas of sun glint and lower relative temperature anomaly (15K) temperature anomaly in either day or nighttime data. High confidence fire pixels are associated with day or nighttime saturated pixels.\n\n#### Please note:\n\nLow confidence nighttime pixels occur only over the geographic area extending from 11\u00b0 E to 110\u00b0 W and 7\u00b0 N to 55\u00b0 S. This area describes the region of influence of the South Atlantic Magnetic Anomaly which can cause spurious brightness temperatures in the mid-infrared channel I4 leading to potential false positive alarms. These have been removed from the NRT data distributed by FIRMS.\n\n* Version\n\nVersion identifies the collection (e.g. VIIRS Collection 1) and source of data processing: Near Real-Time (NRT suffix added to collection) or Standard Processing (collection only).\n\n\"1.0NRT\" - Collection 1 NRT processing.\n\n\"1.0\" - Collection 1 Standard processing.\n\n* Bright_ti5\n\n(Brightness temperature I-5)\n\nI-5 Channel brightness temperature of the fire pixel measured in Kelvin.\n\n* FRP\n\n(Fire Radiative Power)\n\nFRP depicts the pixel-integrated fire radiative power in MW (megawatts). Given the unique spatial and spectral resolution of the data, the VIIRS 375 m fire detection algorithm was customized and tuned in order to optimize its response over small fires while balancing the occurrence of false alarms. Frequent saturation of the mid-infrared I4 channel (3.55-3.93 \u00b5m) driving the detection of active fires requires additional tests and procedures to avoid pixel classification errors. As a result, sub-pixel fire characterization (e.g., fire radiative power [FRP] retrieval) is only viable across small and\/or low-intensity fires. Systematic FRP retrievals are based on a hybrid approach combining 375 and 750 m data. In fact, starting in 2015 the algorithm incorporated additional VIIRS channel M13 (3.973-4.128 \u00b5m) 750 m data in both aggregated and unaggregated format.\n\nSatellite measurements of fire radiative power (FRP) are increasingly used to estimate the contribution of biomass burning to local and global carbon budgets. Without an associated uncertainty, however, FRP-based biomass burning estimates cannot be confidently compared across space and time, or against estimates derived from alternative methodologies. Differences in the per-pixel FRP measured near-simultaneously in consecutive MODIS scans are approximately normally distributed with a standard deviation (\u03c3\u03b7) of 26.6%. Simulations demonstrate that this uncertainty decreases to less than ~5% (at \u00b11 \u03c3\u03b7) for aggregations larger than ~50 MODIS active fire pixels. Although FRP uncertainties limit the confidence in flux estimates on a per-pixel basis, the sensitivity of biomass burning estimates to FRP uncertainties can be mitigated by conducting inventories at coarser spatiotemporal resolutions.\n\nhttp:\/\/cedadocs.ceda.ac.uk\/770\/1\/SEVIRI_FRP_documentdesc.pdf\n\n* Type\n\n(Inferred hot spot type)\n\n0 = presumed vegetation fire\n\n1 = active volcano\n\n2 = other static land source\n\n3 = offshore detection (includes all detections over water)\n\n* DayNight\n\n(Day or Night)\n\nD= Daytime fire\n\nN= Nighttime fire\n\n#### WHAT IS LONGITUDE AND LATITUDE\n\nLatitude and longitude are a system of lines used to describe the location of any place on Earth. Lines of latitude run in an east-west direction across Earth. Lines of longitude run in a north-south direction. Although these are only imaginary lines, they appear on maps and globes as if they actually existed.\n\n#### ACQUISITION TIME EXAMPLE\n\nBased on UTC time. You have to think in decimal.","7956f438":"# PACKAGES AND LIBRARIES","7cde8cac":"#### **ATTENTION**\n* MOSTLY HIGH FRP VALUES WERE SEEN BETWEEN 22-28 AUGUST.","01b7f212":"#### READING"}}