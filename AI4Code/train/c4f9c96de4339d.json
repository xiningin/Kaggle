{"cell_type":{"6ec897d1":"code","f1f29ef8":"code","25c5b7bf":"code","f1ecaad2":"code","ed088a48":"code","60c489f1":"code","598cac89":"code","d864e5fc":"code","cc652805":"code","9ca7dc84":"code","6cd10f84":"code","44ca7446":"code","c9503326":"code","8ffbe1c9":"code","30e84816":"code","678c8cd4":"code","d09b111c":"code","0ab2e11e":"code","0a382510":"code","deb428cc":"code","c4e0a3e1":"code","afb2e20d":"code","f9bd7bae":"code","e1e0a811":"code","bc754916":"code","a880c20a":"code","dc8c63e6":"code","108a885e":"code","06ffc753":"code","f5854803":"code","0ba14dd2":"code","4fdd66cb":"code","f3846e3a":"code","1207b853":"code","bf4c498b":"code","a6d33f7c":"code","93913d62":"code","4e1f6bb5":"code","785cd609":"code","99d12732":"code","ccf56d60":"code","a53bed78":"code","bab071bb":"code","6e7fe3ce":"code","067b840b":"code","b0b13723":"code","50c2587b":"code","e35a3bbf":"code","ab5814ee":"code","47792d5f":"code","af22b268":"code","e6267277":"code","ba5a24b3":"code","55e15102":"code","63999978":"code","b027b4a1":"code","6c7d0f61":"code","e4165bd3":"code","369698ff":"code","29270144":"code","ac256733":"code","21fae5d6":"code","fee0ff46":"code","62e44f1d":"code","e08a0770":"code","d4fc89e4":"code","5ff6c52d":"code","47a2a4a2":"markdown","b17d792d":"markdown","54c76f4a":"markdown","419137e1":"markdown","936783d1":"markdown","4550856f":"markdown","d2db38ef":"markdown","d080039b":"markdown","5a354a21":"markdown","dbc5f7c9":"markdown","579c2f7c":"markdown","ca1fc130":"markdown","abc9f096":"markdown"},"source":{"6ec897d1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\nimport warnings\nwarnings.filterwarnings('ignore')\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning) \nimport logging\nlogger = logging.getLogger()\nlogger.setLevel(logging.CRITICAL)\n# Any results you write to the current directory are saved as output.","f1f29ef8":"train=pd.read_csv(\"..\/input\/yds_train2018.csv\")\ntest=pd.read_csv(\"..\/input\/yds_test2018.csv\")\ntrain.head()","25c5b7bf":"trainx=train.drop(['S_No','Week','Merchant_ID'],axis=1)\ntrainx['yearMonth']=trainx['Year'].astype(str)+\"-\"+trainx['Month'].astype(str)\n","f1ecaad2":"trainx.yearMonth=pd.to_datetime(trainx.yearMonth,format='%Y-%m')","ed088a48":"trainx.drop(['Year','Month'],axis=1,inplace=True)\ntrainx.head()","60c489f1":"countries=list(set(trainx.Country))\nproducts=list(set(trainx.Product_ID))","598cac89":"def smape(y_truth,y_forecasted):\n    denominator = (np.abs(y_truth) + np.abs(y_forecasted))\n    diff = np.abs(y_truth - y_forecasted) \/ denominator\n    diff[denominator == 0] = 0.0\n    print(200 * np.mean(diff))","d864e5fc":"trainx.info()","cc652805":"X=trainx[(trainx.Country=='Argentina') & (trainx.Product_ID==1)].drop(['Product_ID','Country'],axis=1).set_index('yearMonth').sort_values('yearMonth')\nX.head()","9ca7dc84":"X=X.groupby('yearMonth').sum()\nX.head()\nplt.figure(figsize=(15,9))\nplt.plot(X)","6cd10f84":"x1=X[:30]\ny1=X[:10]","44ca7446":"#Moving Average  \ndef MA(df, n):  \n    name = 'SMA_' + str(n)\n    #MA = pd.Series(pd.rolling_mean(df['Close'], n), name = 'SMA_' + str(n))  \n    #df = df.join(MA)  \n    df[name]=df['Sales'].rolling(n).mean()\n    return df\n\n#Exponential Moving Average  \ndef EMA(df, n):\n    name = 'EMA_' + str(n)\n    #MA = pd.Series(pd.rolling_mean(df['Close'], n), name = 'SMA_' + str(n))  \n    #df = df.join(MA)  \n    df[name]=df['Sales'].ewm(span = n, min_periods = n - 1).mean()\n    return df\n\nsdf=X.copy()\nfor i in [3,5,12]:\n    \n    MA(sdf,i)\n    \nfor i in [3,5,12]:\n    \n    EMA(sdf,i)\n","c9503326":"dates = np.array(sdf.index)\n#print(dates)\ndates_check = dates[-12:]\ndates = dates[:-12]","8ffbe1c9":"dates","30e84816":"sdf.fillna( value=0, inplace=True)\nsdf.isnull().sum()\nsdf.shape","678c8cd4":"# pick a forecast column\nforecast_col = 'Sales'\n\n# Chosing 30 days as number of forecast days\nforecast_out = int(12)\nprint('length =',len(sdf), \"and forecast_out =\", forecast_out)","d09b111c":"# Creating label by shifting 'Sales' according to 'forecast_out'\nsdf['label'] = sdf[forecast_col].shift(-forecast_out)\nprint(sdf.head())\nprint('\\n')\n# If we look at the tail, it consists of n(=forecast_out) rows with NAN in Label column \nprint(sdf.tail(2))","0ab2e11e":"# Define features Matrix X by excluding the label column which we just created \nfrom sklearn import preprocessing\nXf = np.array(sdf.drop(['label'], 1))\n\n# Using a feature in sklearn, preposessing to scale features\nXf = preprocessing.scale(Xf)\nprint(Xf.shape)","0a382510":"X_forecast_out = Xf[-forecast_out:]\nXf = Xf[:-forecast_out]\nprint (\"Length of X_forecast_out:\", len(X_forecast_out), \"& Length of Xf :\", len(Xf))","deb428cc":"# A good test is to make sure length of X and y are identical\nyf = np.array(sdf['label'].values)\nyf = yf[:-forecast_out]\nprint('Length of yf: ',len(yf))\nprint(yf)","c4e0a3e1":"from sklearn.model_selection import train_test_split\nX_trainf, X_testf, y_trainf, y_testf = train_test_split(Xf, yf, test_size = 0.2)\n\nprint('length of X_train and x_test: ', len(X_trainf), len(X_testf))","afb2e20d":"# Train\nfrom sklearn.ensemble import RandomForestRegressor\nclf = RandomForestRegressor()\nclf.fit(X_trainf,y_trainf)\n# Test\naccuracy = clf.score(X_testf, y_testf)\nprint(\"Accuracy of RF Regression: \", accuracy)\nforecast_prediction = clf.predict(X_testf)\nsmape(y_testf,forecast_prediction)","f9bd7bae":"forecast_predictionmain = clf.predict(X_forecast_out)","e1e0a811":"#Make the final DataFrame containing Dates, ClosePrices, and Forecast values\nactual = pd.DataFrame(dates, columns = [\"Date\"])\nactual[\"Sales\"] =sdf.iloc[:len(dates),0].values\nactual[\"Forecast\"] = np.nan\nactual.set_index(\"Date\", inplace = True)\nforecast = pd.DataFrame(dates_check, columns=[\"Date\"])\nprint(forecast)\nforecast[\"Forecast\"] = forecast_predictionmain\nforecast[\"Sales\"] = np.nan\nforecast.set_index(\"Date\", inplace = True)\nvar = [actual, forecast]\nresult = pd.concat(var)  #This is the final DataFrame\nresult.info()","bc754916":"#Plot the results\nresult.plot(figsize=(20,10), linewidth=1.5)\nplt.legend(loc=2, prop={'size':20})\nplt.xlabel('Date')\nplt.ylabel('Price')","a880c20a":"series = X\n# display first few rows\n# line plot of dataset\n\nseries.plot()","dc8c63e6":"# seasonal difference\ndifferenced = X.diff(12)\n# trim off the first year of empty data\ndifferenced = differenced[12:]\n# save differenced dataset to file\n# plot differenced dataset\ndifferenced.plot()","108a885e":"X.shape","06ffc753":"from statsmodels.graphics.tsaplots import plot_acf\nplt.figure(figsize=(15,9))\nplot_acf(X)","f5854803":"# reframe as supervised learning\nfrom pandas import DataFrame\ndataframe=DataFrame(index=X.index)\nfor ii in range(12,0,-1):\n    dataframe['t-'+str(ii)] = X.shift(ii)\ndataframe['t'] = X.values\ndataframe.head(13)\n","0ba14dd2":"dataframe = dataframe[12:]","4fdd66cb":"from sklearn.ensemble import RandomForestRegressor\n# load data\ndataframe\narray = dataframe.values\n# split into input and output\nXX = array[:,0:-1]\nyy = array[:,-1]\n# fit random forest model\nmodel = RandomForestRegressor(n_estimators=500, random_state=1)\nmodel.fit(XX, yy)\n# show importance scores\nprint(model.feature_importances_)\n# plot importance scores\nnames = dataframe.columns.values[0:-1]\nticks = [i for i in range(len(names))]\nplt.figure(figsize=(15,9))\nplt.bar(ticks, model.feature_importances_)","f3846e3a":"from pandas.tools.plotting import autocorrelation_plot\nautocorrelation_plot(X)","1207b853":"from statsmodels.tsa.arima_model import ARIMA\nmodel = ARIMA(X, order=(2,1,0))\nmodel_fit = model.fit(disp=0)\nprint(model_fit.summary())\n# plot residual errors\nresiduals = DataFrame(model_fit.resid)\nresiduals.plot()\nresiduals.plot(kind='kde')\nprint(residuals.describe())","bf4c498b":"size = int(len(X) * 0.66)\ntrainxx, testxx = X[0:size], X[size:len(X)]\nhistory = [x for x in trainxx.Sales]\npredictions = list()\nfor t in range(len(testxx)):\n    model = ARIMA(history, order=(5,1,0))\n    model_fit = model.fit(disp=0)\n    output = model_fit.forecast()\n    yhat = output[0]\n    predictions.append(yhat)\n    obs = testxx.Sales[t]\n    history.append(obs)\n    print('predicted=%f, expected=%f' % (yhat, obs))\nerror = smape(testxx.Sales.values, predictions)\n# plot\nplt.figure(figsize=(15,9))\nplt.plot(testxx.Sales.values)\nplt.plot(predictions, color='red')","a6d33f7c":"import matplotlib.pyplot as plt\n%matplotlib inline\nfrom statsmodels.tsa.stattools import adfuller\ndef test_stationarity(timeseries):\n    \n    #Determing rolling statistics\n    rolmean = timeseries.rolling( window=12).mean()\n    rolstd = timeseries.rolling(window=12).std()\n\n    #Plot rolling statistics:\n    plt.figure(figsize=(15,9))\n    orig = plt.plot(timeseries, color='blue',label='Original')\n    mean = plt.plot(rolmean, color='red', label='Rolling Mean')\n    std = plt.plot(rolstd, color='black', label = 'Rolling Std')\n    plt.legend(loc='best')\n    \n    plt.title('Rolling Mean & Standard Deviation')\n    plt.show(block=False)\n    \n    #Perform Dickey-Fuller test:\n    print ('Results of Dickey-Fuller Test:')\n    dftest = adfuller(timeseries.Sales.values, autolag='AIC')\n    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\n    for key,value in dftest[4].items():\n        dfoutput['Critical Value (%s)'%key] = value\n    print (dfoutput)","93913d62":"test_stationarity(X)","4e1f6bb5":"ts_log = np.log(X)\nplt.figure(figsize=(15,9))\nplt.plot(ts_log)","785cd609":"moving_avg = ts_log.rolling(12).mean()\nplt.figure(figsize=(15,9))\nplt.plot(ts_log)\nplt.plot(moving_avg, color='red')","99d12732":"ts_log_moving_avg_diff = ts_log - moving_avg\n","ccf56d60":"ts_log_moving_avg_diff.dropna(inplace=True)\ntest_stationarity(ts_log_moving_avg_diff)","a53bed78":"expwighted_avg = ts_log.ewm( halflife=12).mean()\nplt.figure(figsize=(15,9))\nplt.plot(ts_log)\nplt.plot(expwighted_avg, color='red')","bab071bb":"ts_log_ewma_diff = ts_log - expwighted_avg\ntest_stationarity(ts_log_ewma_diff)","6e7fe3ce":"ts_log_diff = ts_log - ts_log.shift()\nplt.figure(figsize=(15,9))\nplt.plot(ts_log_diff)","067b840b":"ts_log_diff.dropna(inplace=True)\ntest_stationarity(ts_log_diff)","b0b13723":"from statsmodels.tsa.seasonal import seasonal_decompose\ndecomposition = seasonal_decompose(ts_log)\n\ntrend = decomposition.trend\nseasonal = decomposition.seasonal\nresidual = decomposition.resid\nplt.figure(figsize=(15,9))\nplt.subplot(411)\nplt.plot(ts_log, label='Original')\nplt.legend(loc='best')\nplt.subplot(412)\nplt.plot(trend, label='Trend')\nplt.legend(loc='best')\nplt.subplot(413)\nplt.plot(seasonal,label='Seasonality')\nplt.legend(loc='best')\nplt.subplot(414)\nplt.plot(residual, label='Residuals')\nplt.legend(loc='best')\nplt.tight_layout()","50c2587b":"ts_log_decompose = residual\nts_log_decompose.dropna(inplace=True)\ntest_stationarity(ts_log_decompose)","e35a3bbf":"#ACF and PACF plots:\n\nfrom statsmodels.tsa.stattools import acf, pacf\nlag_acf = acf(ts_log_diff, nlags=20)\nlag_pacf = pacf(ts_log_diff, nlags=20, method='ols')","ab5814ee":"#Plot ACF: \nplt.figure(figsize=(15,9))\nplt.subplot(121) \nplt.plot(lag_acf)\nplt.axhline(y=0,linestyle='--',color='gray')\nplt.axhline(y=-1.96\/np.sqrt(len(ts_log_diff)),linestyle='--',color='gray')\nplt.axhline(y=1.96\/np.sqrt(len(ts_log_diff)),linestyle='--',color='gray')\nplt.title('Autocorrelation Function')\n#Plot PACF:\nplt.subplot(122)\nplt.plot(lag_pacf)\nplt.axhline(y=0,linestyle='--',color='gray')\nplt.axhline(y=-1.96\/np.sqrt(len(ts_log_diff)),linestyle='--',color='gray')\nplt.axhline(y=1.96\/np.sqrt(len(ts_log_diff)),linestyle='--',color='gray')\nplt.title('Partial Autocorrelation Function')\nplt.tight_layout()","47792d5f":"from statsmodels.tsa.arima_model import ARIMA\nmodel = ARIMA(ts_log, order=(2, 1, 0))  \nresults_AR = model.fit(disp=-1)  \nplt.figure(figsize=(15,9))\nplt.plot(ts_log_diff)\nplt.plot(results_AR.fittedvalues, color='red')\nplt.title('RSS: %.4f'% sum((results_AR.fittedvalues.values-ts_log_diff.Sales.values)**2))","af22b268":"model = ARIMA(ts_log, order=(0, 1, 2))  \nresults_MA = model.fit(disp=-1)  \nplt.figure(figsize=(15,9))\nplt.plot(ts_log_diff)\nplt.plot(results_MA.fittedvalues, color='red')\nplt.title('RSS: %.4f'% sum((results_MA.fittedvalues.values-ts_log_diff.Sales.values)**2))","e6267277":"# model = ARIMA(ts_log, order=(2, 1, 2))  \n# results_ARIMA = model.fit(disp=0)  \n# plt.figure(figsize=(12,9))\n# plt.plot(ts_log_diff)\n# plt.plot(results_ARIMA.fittedvalues, color='red')\n# plt.title('RSS: %.4f'% sum((results_ARIMA.fittedvalues.values-ts_log_diff.Sales.values)**2))\n\npredictions_ARIMA_diff = pd.Series(results_MA.fittedvalues, copy=True)\npredictions_ARIMA_diff.head()","ba5a24b3":"predictions_ARIMA_diff_cumsum = predictions_ARIMA_diff.cumsum()\npredictions_ARIMA_diff_cumsum.head()","55e15102":"predictions_ARIMA_log = pd.Series(ts_log.ix[0], index=ts_log.index)\npredictions_ARIMA_log = predictions_ARIMA_log.add(predictions_ARIMA_diff_cumsum,fill_value=0)\npredictions_ARIMA_log.head()","63999978":"from fbprophet import Prophet\nXd = pd.DataFrame(index=range(0,len(x1)))\nXd['ds'] = x1.index\nXd['y'] = x1['Sales'].values\nXd.head()","b027b4a1":"m = Prophet()\nm.fit(Xd)\nfuture = m.make_future_dataframe(periods=12,freq='MS')\nfuture.tail()","6c7d0f61":"forecast=m.predict(future)","e4165bd3":"forecast.head()","369698ff":"y_truth = y1['Sales'].values\ny_forecasted = forecast.iloc[0:10,-1].values\nplt.figure(figsize=(15,9))\nm.plot(forecast)\nplt.plot(x1,c='r')","29270144":"# print(y1['2013'])\nforecast[forecast['ds']==pd.to_datetime('2013-01-01')]['yhat'].values","ac256733":"print(y_truth.shape)\nprint(y_forecasted.shape)","21fae5d6":"smape(y_truth,y_forecasted)","fee0ff46":"test.head()","62e44f1d":"testx=test.drop('S_No',axis=1)\ntestx['yearMonth']=testx['Year'].astype(str)+\"-\"+testx['Month'].astype(str)\ntestx.yearMonth=pd.to_datetime(testx.yearMonth,format='%Y-%m')\ntestx.drop(['Year','Month'],axis=1,inplace=True)\ntestx.head()","e08a0770":"YtestSales = pd.DataFrame(index=range(0,len(testx)))\nd={}\ndh={}\nfor c in countries:\n    for p in products:\n        XX=trainx[(trainx.Country==c) & (trainx.Product_ID==p)].drop(['Product_ID','Country'],axis=1).set_index('yearMonth').sort_values('yearMonth')\n        \n        XX=XX.groupby('yearMonth').sum()\n        XdX = pd.DataFrame(index=range(0,len(XX)))\n        XdX['ds'] = XX.index\n        XdX['y'] = XX['Sales'].values\n        if len(XdX)!=0:\n            m = Prophet()\n            m.fit(XdX)\n            \n            future = m.make_future_dataframe(periods=20,freq='MS')\n            forecast = m.predict(future)\n            print(\"Done for country \"+c+\" and Product id \"+str(p))\n            m.plot(forecast)\n            plt.title(\"For country \"+c+\" and Product id \"+str(p))\n            Y=testx[(testx.Country==c) & (testx.Product_ID==p)].drop(['Product_ID','Country'],axis=1).sort_values('yearMonth')\n            sale=[]\n            saleh=[]\n            for j in Y.yearMonth.values:\n                sale.append(forecast[forecast['ds']==j]['yhat'].values[0])\n                saleh.append(forecast[forecast['ds']==j]['yhat_upper'].values[0])\n                \n            d[str(c)+\"-\"+str(p)]=sale\n            dh[str(c)+\"-\"+str(p)]=saleh","d4fc89e4":"sales_tot=np.hstack(d.values())\ntest.Sales=sales_tot\ntest.to_csv(\"yds_submission2018.csv\",index=False)\nsales_toth=np.hstack(dh.values())\ntest.Sales=sales_toth\ntest.to_csv(\"yds_submission2018h.csv\",index=False)","5ff6c52d":"test.to_csv(\"yds_submission2018.csv\",index=False)","47a2a4a2":"Basic **EDA** using **Simple Moving Averages** and **Exponential MA**","b17d792d":"**Prophet** EDA","54c76f4a":"**sMAPE** error metric for calculations and accuracy","419137e1":"**Concusion:**\n1. **ARIMA** provides results which are great and authentic but after *filtering for Country and Product_ID* we dont have much data to go with it.\n2. **Prophet** was a great tool which considers **trends** and **seasonality** well and also provides good and proper results but unable to provide the best prediction as per error metric **sMAPE** for few use cases which have **randomness** and **level** in data.","936783d1":"**Feature selection** and **engineering** for a particular Country and Product ID","4550856f":"** TRY 1**\n\n\n** EDA for particular Coounty and Product type**\nTaking for only 1 country i.e. **Argentina** with **Product_ID** as **1**","d2db38ef":"Converting the data set and taking the sum of **Sales** for a particular Month","d080039b":"**AutoCorrelation Plots**","5a354a21":"**ARIMA configuration**","dbc5f7c9":"Taking 12 Months as the forecasting Value","579c2f7c":"****Final TRY with Prophet****","ca1fc130":"**Arima** model","abc9f096":"Dropping **S_No**, **Week** and **Merchant ID** as its not required in forecasting methods"}}