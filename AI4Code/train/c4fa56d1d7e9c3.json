{"cell_type":{"14e0cba0":"code","373c3def":"code","0a906fde":"code","d32fd650":"code","b07eb16f":"code","dff8a16a":"code","7d1a9068":"code","aedf8ff4":"code","6b69b57d":"code","810f77c7":"code","7c2ad660":"code","b0c558d7":"code","2acc50e8":"code","0bf1e566":"code","3195fb44":"code","9b61d2c8":"code","db24bbbb":"code","d456ebcd":"code","98320895":"code","22643de5":"code","e3563c59":"code","f5906080":"markdown","b7532d9f":"markdown","15879383":"markdown"},"source":{"14e0cba0":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport math\nimport seaborn as sns\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Dense , LSTM , Dropout","373c3def":"data = pd.read_csv('..\/input\/colombo-stock-exchange\/CSE.csv' , date_parser=True)","0a906fde":"data.isnull().sum()","d32fd650":"data = data.dropna()","b07eb16f":"# here we are printing shape of data\ndata.shape","dff8a16a":"plt.figure(figsize=(15,7))\nsns.lineplot(data=data[['Open', 'High', 'Low','Close']],linewidth=2)\nplt.grid(True)\nplt.show()","7d1a9068":"# here we are Visualising the closing price history\nplt.figure(figsize=(14,5))\nplt.title('Close Price History')\nplt.plot(data['Close'])\nplt.xlabel('Date')\nplt.ylabel('Close Price USD ($)')\nplt.show()","aedf8ff4":"#Creating a new dataframe with only the 'Close' column\ndf = data.filter(['Close'])\n#Converting the dataframe to a numpy array\ndataset = df.values\n#Get \/Compute the number of rows to train the model on\ntraining_data_len = math.ceil( len(dataset) *.8)\ntraining_data_len","6b69b57d":"# here we are Scaling the all of the data to be values between 0 and 1 \nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler(feature_range=(0, 1)) \nscaled_data = scaler.fit_transform(dataset)\nscaled_data","810f77c7":"#Creating the scaled training data set\ntrain_data = scaled_data[0:training_data_len  , : ]\n#Spliting the data into x_train and y_train data sets\nx_train=[]\ny_train = []\nfor i in range(60,len(train_data)):\n    x_train.append(train_data[i-60:i,0])\n    y_train.append(train_data[i,0])\n    if i<= 61:\n        print(x_train)\n        print(y_train)\n        print()","7c2ad660":"#Here we are Converting x_train and y_train to numpy arrays\nx_train, y_train = np.array(x_train), np.array(y_train)","b0c558d7":"# Here we are reshaping the data into the shape accepted by the LSTM\nx_train = np.reshape(x_train, (x_train.shape[0],x_train.shape[1],1))","2acc50e8":"#now we are Building the LSTM network model\nmodel = Sequential()\nmodel.add(LSTM(units=50, return_sequences=True,input_shape=(x_train.shape[1],1)))\nmodel.add(LSTM(units=50, return_sequences=False))\nmodel.add(Dense(units=25))\nmodel.add(Dense(units=1))","0bf1e566":"# here we are Compiling the model\nmodel.compile(optimizer='adam', loss='mean_squared_error')","3195fb44":"# here we are training the model\nmodel.fit(x_train, y_train, batch_size=1, epochs=1)","9b61d2c8":"# here we are testing data set\ntest_data = scaled_data[training_data_len - 60: , : ]\n#Creating the x_test and y_test data sets\nx_test = []\ny_test =  dataset[training_data_len : , : ] #Get all of the rows from index 1603 to the rest and all of the columns (in this case it's only column 'Close'), so 2003 - 1603 = 400 rows of data\nfor i in range(60,len(test_data)):\n    x_test.append(test_data[i-60:i,0])","db24bbbb":"# here we are converting x_test to a numpy array  \nx_test = np.array(x_test)","d456ebcd":"# here we are reshaping the data into the shape accepted by the LSTM  \nx_test = np.reshape(x_test, (x_test.shape[0],x_test.shape[1],1))","98320895":"# now we are getting the models predicted price values\npredictions = model.predict(x_test) \npredictions = scaler.inverse_transform(predictions)#Undo scaling","22643de5":"# here we are calculaing the value of RMSE \nrmse=np.sqrt(np.mean(((predictions- y_test)**2)))\nrmse","e3563c59":"#Plot\/Create the data for the graph\ntrain = data[:training_data_len]\nvalid = data[training_data_len:]\nvalid['Predictions'] = predictions\n#Visualize the data\nplt.figure(figsize=(16,8))\nplt.title('Model')\nplt.xlabel('Date')\nplt.ylabel('Close Price USD ($)')\nplt.plot(train['Close'])\nplt.plot(valid[['Close', 'Predictions']])\nplt.legend(['Train', 'Val', 'Predictions'], loc='lower right')\nplt.show()","f5906080":"Create a new data frame with only the closing price and convert it to an array. Then create a variable to store the length of the training data set. I want the training data set to contain about 80% of the data.","b7532d9f":"# **Predict the Colombo Stock Exchange Prices using Recurrent Neural Network (RNN) and Long Short-Term Memory (LSTM).**","15879383":"Now scale the data set to be values between 0 and 1 inclusive, I do this because it is generally good practice to scale your data before giving it to the neural network."}}