{"cell_type":{"1171dc9d":"code","f53e8b1e":"code","03127fce":"code","35fa0a77":"code","d9d81a4b":"code","c667296d":"code","785277e7":"code","bcc953f8":"code","69b661f5":"code","a038ad17":"code","a717989f":"code","3dc9919d":"code","96adef8b":"code","7bc974c8":"code","cfc3d29f":"code","e4a9e6cd":"code","9658abde":"code","f6be81e6":"code","240bc54b":"code","c234ea8d":"code","9a303dfe":"code","7ef4c4a9":"code","54a90400":"code","77a33a9d":"code","6fb07c48":"code","3549b019":"code","3d2b128d":"code","1f698052":"code","5c03f627":"code","04c0abf1":"code","e7496b51":"code","fd189e94":"code","ce6b5248":"code","62cfa5e1":"code","ca56daae":"code","0cc631a0":"code","cb0f02e4":"code","fe4c224a":"code","ca11edda":"code","f5298bdb":"code","4f0079a0":"code","3690f985":"code","d7d1cfec":"code","6b484478":"code","bdf60be3":"code","47d63cdc":"code","2d495629":"code","b0432980":"code","a048cc5f":"code","8b84f7a7":"code","287e948b":"code","56669af7":"code","ba330cde":"code","0f655fc1":"code","55b6b4f7":"code","b57e46e6":"code","16cf9908":"code","39f3dea9":"code","74740d5c":"markdown","297a7a4b":"markdown","78a8b48f":"markdown","31ad8707":"markdown","ef4c355d":"markdown","c494752e":"markdown","17ac19ac":"markdown","1fcdadbf":"markdown"},"source":{"1171dc9d":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n%matplotlib inline","f53e8b1e":"# Creating DataFrame from dictionary\ndf = pd.DataFrame({'A':[1,2,np.nan],'B':[5,np.nan,np.nan],'C':[1,2,3]})\ndf['States']=\"CA NV AZ\".split()\ndf.set_index('States',inplace=True)\nprint(df)","03127fce":"print(\"\\nDropping any rows with a NaN value\\n\",'-'*35, sep='')\nprint(df.dropna(axis=0))","35fa0a77":"print(\"\\nDropping any column with a NaN value\\n\",'-'*35, sep='')\nprint(df.dropna(axis=1))","d9d81a4b":"print(\"\\nDropping a row with a minimum 2 NaN value using 'thresh' parameter\\n\",'-'*68, sep='')\nprint(df.dropna(axis=0, thresh=2))","c667296d":"print(\"\\nFilling values with a default value\\n\",'-'*35, sep='')\nprint(df.fillna(value='FILL VALUE'))","785277e7":"print(\"\\nFilling values with a computed value (mean of column A here)\\n\",'-'*60, sep='')\nprint(df.fillna(value=df['A'].mean()))","bcc953f8":"# Create dataframe\ndata = {'Company':['GOOG','GOOG','MSFT','MSFT','FB','FB'],\n       'Person':['Sam','Charlie','Amy','Vanessa','Carl','Sarah'],\n       'Sales':[200,120,340,124,243,350]}\ndf = pd.DataFrame(data)\ndf","69b661f5":"byComp = df.groupby('Company')\nprint(\"\\nGrouping by 'Company' column and listing mean sales\\n\",'-'*55, sep='')\nprint(byComp.mean())\n","a038ad17":"print(\"\\nGrouping by 'Company' column and listing sum of sales\\n\",'-'*55, sep='')\nprint(byComp.sum())\n","a717989f":"print(\"\\nAll in one line of command (Stats for 'FB')\\n\",'-'*65, sep='')\nprint(pd.DataFrame(df.groupby('Company').describe().loc['FB']).transpose())","3dc9919d":"(pd.DataFrame(df.groupby('Company').describe().loc['FB'])).transpose()","96adef8b":"(pd.DataFrame(df.groupby('Company').describe().loc['GOOG'])).transpose()","7bc974c8":"print(\"\\nSame type of extraction with little different command\\n\",'-'*68, sep='')\nprint(df.groupby('Company').describe().loc[['GOOG', 'MSFT']])","cfc3d29f":"# Merging two data frames\n# Creating data frames\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'],\n                        'B': ['B0', 'B1', 'B2', 'B3'],\n                        'C': ['C0', 'C1', 'C2', 'C3'],\n                        'D': ['D0', 'D1', 'D2', 'D3']},\n                        index=[0, 1, 2, 3])","e4a9e6cd":"df2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'],\n                        'B': ['B4', 'B5', 'B6', 'B7'],\n                        'C': ['C4', 'C5', 'C6', 'C7'],\n                        'D': ['D4', 'D5', 'D6', 'D7']},\n                         index=[0, 1, 2, 3])","9658abde":"df3 = pd.DataFrame({'A': ['A8', 'A9', 'A10', 'A11'],\n                        'B': ['B8', 'B9', 'B10', 'B11'],\n                        'C': ['C8', 'C9', 'C10', 'C11'],\n                        'D': ['D8', 'D9', 'D10', 'D11']},\n                        index=[8,9,10,11])","f6be81e6":"print(\"\\nThe DataFrame number 1\\n\",'-'*30, sep='')\nprint(df1)","240bc54b":"print(\"\\nThe DataFrame number 2\\n\",'-'*30, sep='')\nprint(df2)\n","c234ea8d":"print(\"\\nThe DataFrame number 3\\n\",'-'*30, sep='')\nprint(df3)","9a303dfe":"\ndf_cat1 = pd.concat([df1,df2,df3], axis=0)\nprint(\"\\nAfter concatenation along row\\n\",'-'*30, sep='')\nprint(df_cat1)","7ef4c4a9":"df_cat1.loc[2]","54a90400":"df_cat1.iloc[4]","77a33a9d":"df_cat2 = pd.concat([df1,df2,df3], axis=1)\nprint(\"\\nAfter concatenation along column\\n\",'-'*60, sep='')\nprint(df_cat2)","6fb07c48":"df_cat2.fillna(value=0, inplace=True)\nprint(\"\\nAfter filling missing values with zero\\n\",'-'*60, sep='')\nprint(df_cat2)","3549b019":"left = pd.DataFrame({'key': ['K0', 'K8', 'K2', 'K3'],\n                     'A': ['A0', 'A1', 'A2', 'A3'],\n                     'B': ['B0', 'B1', 'B2', 'B3']})\n   \nright = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3'],\n                          'C': ['C0', 'C1', 'C2', 'C3'],\n                          'D': ['D0', 'D1', 'D2', 'D3']})","3d2b128d":"print(\"\\nThe DataFrame 'left'\\n\",'-'*30, sep='')\nprint(left)","1f698052":"print(\"\\nThe DataFrame 'right'\\n\",'-'*30, sep='')\nprint(right)","5c03f627":"merge1= pd.merge(left,right,how='inner',on='key')\nprint(\"\\nAfter simple merging with 'inner' method\\n\",'-'*50, sep='')\nprint(merge1)","04c0abf1":"left = pd.DataFrame({'key1': ['K0', 'K0', 'K1', 'K2'],\n                     'key2': ['K0', 'K1', 'K0', 'K1'],\n                        'A': ['A0', 'A1', 'A2', 'A3'],\n                        'B': ['B0', 'B1', 'B2', 'B3']})\n    \nright = pd.DataFrame({'key1': ['K0', 'K1', 'K1', 'K2'],\n                               'key2': ['K0', 'K0', 'K0', 'K0'],\n                                  'C': ['C0', 'C1', 'C2', 'C3'],\n                                  'D': ['D0', 'D1', 'D2', 'D3']})","e7496b51":"left","fd189e94":"right","ce6b5248":"pd.merge(left, right, on=['key1', 'key2'])","62cfa5e1":"pd.merge(left, right, how='left',on=['key1', 'key2'])","ca56daae":"pd.merge(left, right, how='right',on=['key1', 'key2'])","0cc631a0":"\nleft = pd.DataFrame({'A': ['A0', 'A1', 'A2'],\n                     'B': ['B0', 'B1', 'B2']},\n                      index=['K0', 'K1', 'K2']) \n\nright = pd.DataFrame({'C': ['C0', 'C2', 'C3'],\n                    'D': ['D0', 'D2', 'D3']},\n                      index=['K0', 'K2', 'K3'])","cb0f02e4":"left","fe4c224a":"right","ca11edda":"left.join(right)","f5298bdb":"left.join(right, how='outer')","4f0079a0":"# Define a function\ndef testfunc(x):\n    if (x> 500):\n        return (10*np.log10(x))\n    else:\n        return (x\/10)","3690f985":"df = pd.DataFrame({'col1':[1,2,3,4,5,6,7,8,9,10],\n                   'col2':[444,555,666,444,333,222,666,777,666,555],\n                   'col3':'aaa bb c dd eeee fff gg h iii j'.split()})\ndf","d7d1cfec":"# we can apply any functions to any columns for data manuplation \ndf['FuncApplied'] = df['col2'].apply(lambda x : np.log(x))\nprint(df)","6b484478":"# applying length function\ndf['col3length']= df['col3'].apply(len)\nprint(df)","bdf60be3":"df['FuncApplied'].apply(lambda x: np.sqrt(x))","47d63cdc":"print(\"\\nSum of the column 'FuncApplied' is: \",df['FuncApplied'].sum())\n","2d495629":"print(\"Mean of the column 'FuncApplied' is: \",df['FuncApplied'].mean())","b0432980":"print(\"Std dev of the column 'FuncApplied' is: \",df['FuncApplied'].std())","a048cc5f":"print(\"Min and max of the column 'FuncApplied' are: \",df['FuncApplied'].min(),\"and\",df['FuncApplied'].max())","8b84f7a7":"print(\"\\nName of columns\\n\",'-'*20, sep='')\nprint(df.columns)","287e948b":"l = list(df.columns)\nprint(\"\\nColumn names in a list of strings for later manipulation:\",l)","56669af7":"print(\"\\nDeleting last column by 'del' command\\n\",'-'*50, sep='')\ndel df['col3length']\nprint(df)\ndf['col3length']= df['col3'].apply(len)","ba330cde":"# Sorting the DataFrame on the basis of 'col2'\ndf.sort_values(by='col2') #inplace=False by default","0f655fc1":"df.sort_values(by='FuncApplied',ascending=False) #inplace=False by default","55b6b4f7":"df = pd.DataFrame({'col1':[1,2,3,np.nan],\n                   'col2':[None,555,666,444],\n                   'col3':['abc','def','ghi','xyz']})\ndf.head()","b57e46e6":"# Checking for null values\ndf.isnull()","16cf9908":"# checking how many null values present in which column\ndf.isna().sum()","39f3dea9":"df.fillna('FILL')","74740d5c":"## joining","297a7a4b":"## Dropping NaN values","78a8b48f":"## merging by a common key","31ad8707":"## Filling NaN Values","ef4c355d":"## concatenation","c494752e":"## apply functions","17ac19ac":"## Deletion, sorting, list of column and row names","1fcdadbf":"## Groupby Operation"}}