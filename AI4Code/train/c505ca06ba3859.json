{"cell_type":{"5dfd13db":"code","550af4bc":"code","44c4cfaf":"code","869e1847":"code","91032579":"code","90d888ff":"code","1f1abf67":"code","b3ebf0e6":"code","f0627557":"code","738e8e8b":"code","b7b58cfc":"code","6b7a320a":"code","6a69d7bd":"code","c60fbcf9":"code","e75a6323":"code","4585e7e4":"code","6c7f5a72":"code","372ef51b":"code","ddab0e42":"code","60e43bae":"code","9007cdea":"code","5adcfef5":"code","37aca1e9":"code","98be23a9":"code","5e4521b3":"code","ef0d4c32":"code","016f488b":"code","8d37d80d":"code","42b8ea75":"code","081b0999":"code","6065642c":"code","c678f4dc":"code","f0d13826":"code","9e983d9d":"markdown","7ec62c4b":"markdown","b67aa2fa":"markdown","831e2995":"markdown","d207d1d8":"markdown","01e29e89":"markdown","6af1506d":"markdown","d45b188f":"markdown"},"source":{"5dfd13db":"import numpy as np\nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom pylab import rcParams\nfrom pandas.api.types import CategoricalDtype\nimport warnings\nimport os \nimport folium\nfrom folium.plugins import HeatMap\nimport pandas_profiling\n\nrcParams[\"figure.figsize\"] = 20,9\nwarnings.filterwarnings(\"ignore\")\n\nprint(os.listdir(\"..\/input\/crimes-in-boston\"))","550af4bc":"df = pd.read_csv('..\/input\/crimes-in-boston\/crime.csv', encoding='latin-1')\ndf.head()","44c4cfaf":"df.info()","869e1847":"df.describe().T","91032579":"def missing_zero_values_table(df):\n        zero_val = (df == 0.00).astype(int).sum(axis=0)\n        mis_val = df.isnull().sum()\n        mis_val_percent = 100 * df.isnull().sum() \/ len(df)\n        mz_table = pd.concat([zero_val, mis_val, mis_val_percent], axis=1)\n        mz_table = mz_table.rename(\n        columns = {0 : 'Zero Values', 1 : 'Missing Values', 2 : '% of Total Values'})\n        mz_table['Total Zero Missing Values'] = mz_table['Zero Values'] + mz_table['Missing Values']\n        mz_table['% Total Zero Missing Values'] = 100 * mz_table['Total Zero Missing Values'] \/ len(df)\n        mz_table['Data Type'] = df.dtypes\n        mz_table = mz_table[\n            mz_table.iloc[:,1] != 0].sort_values(\n        '% of Total Values', ascending=False).round(1)\n        print (\"Your selected dataframe has \" + str(df.shape[1]) + \" columns and \" + str(df.shape[0]) + \" Rows.\\n\"      \n            \"There are \" + str(mz_table.shape[0]) +\n              \" columns that have missing values.\")\n        return mz_table\n\nmissing_zero_values_table(df)","90d888ff":"figure = plt.figure(figsize=(13,6))\nsns.heatmap(df.isnull(),yticklabels='')","1f1abf67":"df.drop(\"SHOOTING\", axis=1, inplace = True)","b3ebf0e6":"df['OCCURRED_ON_DATE'] = pd.to_datetime(df['OCCURRED_ON_DATE'])\n\n#df.MONTH.replace([1,2,3,4,5,6,7,8,9,10,11,12], \n#                 ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'], \n#                 inplace = True)\n\ndf.OFFENSE_CODE_GROUP    = df.OFFENSE_CODE_GROUP.astype(CategoricalDtype())\ndf.OFFENSE_DESCRIPTION    = df.OFFENSE_DESCRIPTION.astype(CategoricalDtype())\ndf.DISTRICT    = df.DISTRICT.astype(CategoricalDtype())\ndf.DAY_OF_WEEK    = df.DAY_OF_WEEK.astype(CategoricalDtype())\ndf.UCR_PART    = df.UCR_PART.astype(CategoricalDtype())","f0627557":"rename = {'OFFENSE_CODE_GROUP':'Group',\n          'SHOOTING':'Shooting',\n          'OFFENSE_DESCRIPTION':'Description',\n          'DISTRICT':'District',\n          'STREET':'Street',        \n          'OCCURRED_ON_DATE':'Date',\n          'YEAR':'Year',\n          'MONTH':'Month',\n          'DAY_OF_WEEK':'Day',\n          'HOUR':'Hour'}\n\ndf.rename(index=str, columns=rename, inplace=True)","738e8e8b":"def create_features(df):\n    df['dayofweek'] = df['Date'].dt.dayofweek\n    df['quarter'] = df['Date'].dt.quarter\n    df['dayofyear'] = df['Date'].dt.dayofyear\n    df['dayofmonth'] = df['Date'].dt.day\n    df['weekofyear'] = df['Date'].dt.weekofyear\n    \n    X = df[['dayofweek','quarter','dayofyear',\n            'dayofmonth','weekofyear']]\n    return X\ncreate_features(df).head()\n\ndf.quarter    = df.quarter.astype(CategoricalDtype())\ndf.dayofweek    = df.dayofweek.astype(CategoricalDtype())\ndf.dayofyear    = df.dayofyear.astype(CategoricalDtype())\ndf.dayofmonth    = df.dayofmonth.astype(CategoricalDtype())","b7b58cfc":"df.columns","6b7a320a":"df.info()","6a69d7bd":"sns.countplot(data=df, x='Year');","c60fbcf9":"sns.countplot(data=df, x='Month')","e75a6323":"sns.countplot(data=df, x='Hour');","4585e7e4":"rcParams[\"figure.figsize\"] = 20,9\norder = df['Group'].value_counts().head(5).index\nsns.countplot(data = df, x='Group',hue='District', order = order);","6c7f5a72":"mask = ((df['Year'] == 2016) | (df['Year'] == 2017) | (df['Year'] == 2018))\ngrouped = df[mask].groupby(['Month','District']).count()\nsns.lineplot(data = grouped.reset_index(), x='Month', y='Group',hue='District')","372ef51b":"order = df['Group'].value_counts().head(5).index\nsns.countplot(data = df, x='Group',hue='quarter', order = order);","ddab0e42":"sns.catplot(y='Group',\n            kind='count',\n            height=11, \n            aspect=2,\n            order=df.Group.value_counts().index,\n            data=df)","60e43bae":"labels = df['Group'].astype('category').cat.categories.tolist()\ncounts = df['Group'].value_counts()\nsizes = [counts[var_cat] for var_cat in labels]\nfig1, ax1 = plt.subplots(figsize = (22,12))\nax1.pie(sizes, labels=labels, autopct='%1.1f%%', shadow=True, startangle=140) \nax1.axis('equal')\nplt.show()","9007cdea":"sns.catplot(y='Day',\n            kind='count',\n            height=6, \n            aspect=1,\n            order=df.Day.value_counts().index,\n            data=df)","5adcfef5":"grouped = df.groupby(['Month','District']).count()\nsns.boxplot(x =\"Month\", y = \"Group\", data = grouped.reset_index(), palette=\"ch:.25\");","37aca1e9":"sns.FacetGrid(data = grouped.reset_index(), \n             hue = \"Month\",\n             height = 5).map(sns.kdeplot, \"Group\", shade = True).add_legend();","98be23a9":"def eda_object(df,feature):\n    a = len(df[feature].unique())\n    plt.figure(figsize = [20,min(max(8,a),12)])\n\n    plt.subplot(1,2,1)\n    x_ = df.groupby([feature])[feature].count()\n    x_.plot(kind='pie')\n    plt.title(feature)\n\n    plt.subplot(1,2,2)\n    cross_tab = pd.crosstab(df['Year'],df[feature],normalize=0).reset_index()\n    x_ = cross_tab.melt(id_vars=['Year'])\n    x_['value'] = x_['value']\n\n    sns.barplot(x=feature,y='value',hue ='Year',data=x_,palette = ['b','r','g'],alpha =0.7)\n    plt.xticks(rotation='vertical')\n    plt.title(feature + \" - \")\n\n\n    plt.tight_layout()\n    plt.legend()\n    plt.show()\n\nrm_list = ['UCR_PART', 'INCIDENT_NUMBER', 'Location', 'Street']\ntype_list = ['object']\nfeature_list = []\n\nfor feature in df.columns:\n    if (feature not in rm_list) & (df[feature].dtypes in type_list):\n        feature_list.append(feature)\n","5e4521b3":"B2_district=df.loc[df.District=='B2']\nfor feature in feature_list:\n    eda_object(B2_district,feature)","ef0d4c32":"df.info()","016f488b":"def eda_numeric(df,feature):\n    x_ = df[feature]\n    y_ = df['District']\n    data = pd.concat([x_,y_],1)\n    plt.figure(figsize=[20,5])\n\n    ax1 = plt.subplot(1,2,1)\n    sns.boxplot(x='District',y=feature,data=data)\n    plt.title(feature + \" - Boxplot\")\n\n    ax2 = plt.subplot(1,2,2)\n    plt.title(feature+ \" - Density\")\n    \n    p1=sns.kdeplot(data[data['District']==\"D4\"][feature].apply(np.log), color=\"b\",legend=False)\n    \n    plt.legend(loc='upper right', labels=['0'])\n\n    plt.tight_layout()\n    plt.show()\n    \nrm_list = ['lat', 'long']\ntype_list = ['int32','int64']\nfeature_list = []\n\nfor feature in df.columns:\n    if (feature not in rm_list) & (df[feature].dtypes in type_list) & (len(df[feature].unique()) > 2):\n        feature_list.append(feature)","8d37d80d":"df_drop = df.dropna().copy()\n\nfor feature in feature_list:\n    eda_numeric(df_drop,feature)","42b8ea75":"def get_redundant_pairs(df):\n    pairs_to_drop = set()\n    cols = df.columns\n    for i in range(0, df.shape[1]):\n        for j in range(0, i+1):\n            pairs_to_drop.add((cols[i], cols[j]))\n    return pairs_to_drop\n\ndef get_top_abs_correlations(df, n=5):\n    au_corr = df.corr().abs().unstack()\n    labels_to_drop = get_redundant_pairs(df)\n    au_corr = au_corr.drop(labels=labels_to_drop).sort_values(ascending=False)\n    return au_corr[0:n]\n\nprint(\"Top Absolute Correlations !\")\nprint(get_top_abs_correlations(df.select_dtypes(include=['int32','int64']), 10))","081b0999":"df.Lat.replace(-1, None, inplace=True)\ndf.Long.replace(-1, None, inplace=True)\n\nrcParams[\"figure.figsize\"] = 21,11\n\nplt.subplots(figsize=(11,6))\nsns.scatterplot(x='Lat',\n                y='Long',\n                hue='District',\n                alpha=0.1,\n                data=df)\nplt.legend(loc=2)","6065642c":"B2_district=df.loc[df.District=='B2'][['Lat','Long']]\nB2_district.Lat.fillna(0, inplace = True)\nB2_district.Long.fillna(0, inplace = True) \n\nmap_1=folium.Map(location=[42.356145,-71.064083], \n                 tiles = \"OpenStreetMap\",\n                zoom_start=11)\n\nfolium.CircleMarker([42.319945,-71.079989],\n                        radius=70,\n                        fill_color=\"#b22222\",\n                        popup='Homicide',\n                        color='red',\n                       ).add_to(map_1)\n\n\nHeatMap(data=B2_district, radius=16).add_to(map_1)\n\nmap_1","c678f4dc":"ballistic_crimes=df.loc[df.Group=='Ballistics'][['Lat','Long']]\nballistic_crimes.Lat.fillna(0, inplace = True)\nballistic_crimes.Long.fillna(0, inplace = True) \n\nmap_1=folium.Map(location=[42.356145,-71.064083], \n                 tiles = \"Stamen Toner\",\n                zoom_start=11)\n\nfolium.CircleMarker([42.307945,-71.069989],\n                        radius=90,\n                        fill_color=\"#b22222\",\n                        popup='Homicide',\n                        color='red',\n                       ).add_to(map_1)\n\n\nHeatMap(data=ballistic_crimes, radius=16).add_to(map_1)\n\nmap_1","f0d13826":"pandas_profiling.ProfileReport(df)","9e983d9d":"## Missing data and new features","7ec62c4b":"# GIS (Geographic Information System)","b67aa2fa":"# Crimes in Boston\n## Load libraries","831e2995":"# EDA","d207d1d8":"# Thank You, Please Upvote !","01e29e89":"## Import Data","6af1506d":"Using the Boston Crime dataset, let's try to visualize the data and do some analysis.","d45b188f":"## Data Manipulation"}}