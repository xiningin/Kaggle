{"cell_type":{"addbafaa":"code","9b6891ab":"code","a0c6622a":"code","8de0960f":"code","078808a3":"code","ff2802ca":"code","f8fa4a6b":"code","f6543d55":"code","a28e20fe":"code","fe52e54e":"code","941bc896":"code","d938a859":"code","c8501097":"code","9301fcca":"code","6b820a56":"code","0496c7b6":"code","1797df3b":"code","78c8719d":"code","b192e9f1":"code","15d214cf":"code","f8adea10":"code","9b152a2a":"code","948eab9f":"code","50ffe8e6":"code","cbafe8f7":"code","c76b1feb":"code","d5bc970f":"code","f504d5a1":"code","30134098":"code","5781db69":"code","7730729c":"code","e8a53f51":"code","c9a15cc5":"code","a4bcbee2":"code","b3d6e5fc":"code","c2010ca2":"code","2dd2385e":"code","444b88ca":"code","1a0a416f":"code","735e85c1":"code","7f2a867f":"code","53738615":"code","b6bfb226":"code","cadf853d":"code","432ba24d":"code","e0143b95":"code","58593ae6":"code","90534734":"code","199fbe7e":"code","1a8a7372":"code","d45766c3":"code","3dbc0a87":"code","c3b1a2e0":"code","6844b754":"code","c6aa337f":"code","53f96805":"code","a00a12ea":"code","86175367":"code","7f105b52":"code","c3c49fae":"code","a4d089de":"code","b9a04ab2":"code","1f403e26":"code","5afda73d":"code","38de7990":"code","8c43743a":"code","feb7d62d":"code","62c31fed":"code","400f0dc9":"code","c57fc61c":"code","9254503c":"code","ed427b16":"code","08dde32c":"code","0054dfce":"code","b995b19d":"code","e49ee7b2":"code","b8adb2dd":"code","3ff4cc39":"code","465ed5e9":"code","96ad2270":"code","332f1905":"code","0d23fcb1":"code","c6a4769f":"code","9f6d1bb6":"code","72a31576":"code","ebd3a6d7":"code","cb882b6f":"code","d9f15f56":"code","44f2e033":"code","1bbc9cfa":"code","353ba7ff":"code","eec2cccb":"code","244c82db":"code","9d36c60a":"code","e9180853":"code","4791eed8":"code","6295ebd6":"code","f8f98b94":"code","44b46084":"code","cf1ba252":"code","936faaac":"code","c9b8743b":"code","11e61a09":"code","b6e16522":"code","b124e87b":"code","aec17b94":"code","692b08cc":"code","17aed916":"code","bd7496f5":"code","cc2300b0":"code","61adee58":"code","e98d0e14":"code","8b05b728":"code","f2278256":"code","451c93e4":"code","91b48cff":"code","0a19adb3":"code","a074c6e3":"code","f4a3f6a4":"code","0bf7fb91":"code","5f4fe35c":"code","b7879765":"code","a75ccced":"code","8a68d4db":"markdown","ab9cd612":"markdown","1301b511":"markdown","5ebc4d14":"markdown","3da24fc8":"markdown","d4e972fc":"markdown","a3715e8a":"markdown","ea54c6df":"markdown","4cc80f2c":"markdown","24e17309":"markdown","07e9800a":"markdown","19afb3c8":"markdown","8cec4004":"markdown","5ac1e221":"markdown","6001e1f7":"markdown","165878a3":"markdown","dd7b2b58":"markdown"},"source":{"addbafaa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9b6891ab":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","a0c6622a":"# Importando os arquivos\ndf = pd.read_csv('..\/input\/big-mart-sales-prediction-iesb\/train_.csv')\ndf_test = pd.read_csv('..\/input\/big-mart-sales-prediction-iesb\/test_.csv')\n\ndf.shape, df_test.shape","8de0960f":"test1 = df_test.copy()","078808a3":"test1.shape","ff2802ca":"df.head()","f8fa4a6b":"df_test.head()","f6543d55":"df.describe()","a28e20fe":"df = df.append(df_test)","fe52e54e":"df.tail()","941bc896":"df.info()","d938a859":"cat_cols=df.select_dtypes([object])\nnum_cols=df.select_dtypes(exclude=[object])","c8501097":"cat_cols","9301fcca":"num_cols","6b820a56":"cat_cols.drop(['Outlet_Identifier','Item_Identifier'],axis=1,inplace=True)","0496c7b6":"df.isnull().sum()","1797df3b":"df['Outlet_Size'].value_counts()","78c8719d":"df['Outlet_Size'].mode()[0]","b192e9f1":"df['Item_Weight'].fillna(df['Item_Weight'].mean(),inplace=True)\ndf['Outlet_Size'].fillna(df['Outlet_Size'].mode()[0],inplace=True)","15d214cf":"df.isnull().sum()","f8adea10":"for col in cat_cols.columns:\n    print(col)\n    print(df[col].value_counts())\n    print('--------------------------------------------------------------------------')","9b152a2a":"#Itens repetidos escritos diferente, necessario padronizar\ndf[['Item_Fat_Content']].value_counts()","948eab9f":"#Combinando os itens \ndf['Item_Fat_Content']=df['Item_Fat_Content'].replace({'LF':'Low Fat','reg':'Regular','low fat':'Low Fat'})","50ffe8e6":"df[['Item_Fat_Content']].value_counts()","cbafe8f7":"#Verificando o ano em que a loja foi criada\ndf.Outlet_Establishment_Year.unique()","c76b1feb":"# Os dados s\u00e3o referentes a vendas de 2013 vamos criar um indice para recuzir o ano,\n# ser\u00e1 (2013 - ano_de_cria\u00e7\u00e3o) ent\u00e3o se a loja foi criada em 1999 tera 14 anos de idade em 2013.\ndf['Outlet Years']=2013-df['Outlet_Establishment_Year']","d5bc970f":"df.head()","f504d5a1":"#Distribui\u00e7\u00e3o Peso do Produto\nsns.displot(df['Item_Weight'])\nplt.show()","30134098":"#Teor de Gordura do produto\nsns.countplot(df['Item_Fat_Content'])\nplt.show()","5781db69":"# \u00e1rea total de exibi\u00e7\u00e3o do produto\nsns.displot(df['Item_Visibility'],kind='kde',color='orange')","7730729c":"df['Item_Type'].value_counts()","e8a53f51":"#A categoria \u00e0 qual o produto pertence\nsns.countplot(y=df['Item_Type'])\nplt.show()","c9a15cc5":"# Pre\u00e7o m\u00e1ximo de varejo (pre\u00e7o de lista) do produto\nsns.displot(df['Item_MRP'],kind='hist')\nplt.show()","a4bcbee2":"#O tamanho da loja em termos de \u00e1rea coberta\nsns.countplot(df['Outlet_Size'])\nplt.show()","b3d6e5fc":"# O tamanho da loja em termos de \u00e1rea coberta X O tipo de cidade em que a loja est\u00e1 localizada\nsns.countplot(df['Outlet_Size'],hue=df['Outlet_Location_Type'])\nplt.show()","c2010ca2":"# Tamanho da \u00e1rea da loja X ponto de venda tipo mercearia ou supermercado\nfig, ax = plt. subplots(figsize = (9, 7))\nsns.countplot(df['Outlet_Size'],hue=df['Outlet_Type'])","2dd2385e":"sns.countplot(df['Outlet_Location_Type'])","444b88ca":"fig, ax = plt. subplots(figsize = (9, 7))\nsns.countplot(df['Outlet_Location_Type'],hue=df['Outlet_Type'])","1a0a416f":"fig, ax = plt. subplots(figsize = (9, 7))\nsns.countplot(df['Outlet_Type'])","735e85c1":"fig, ax = plt. subplots(figsize = (9, 7))\nsns.barplot(df['Outlet_Type'],df['Outlet Years'])","7f2a867f":"fig, ax = plt. subplots(figsize = (10, 4))\nsns.barplot(df['Outlet_Type'],df['Outlet Years'],hue=df['Outlet_Type'])","53738615":"sns.displot(df['Item_Outlet_Sales'],kind='kde')","b6bfb226":"df.isnull().sum()","cadf853d":"# ano de cria\u00e7\u00e3o das lojas\nsns.countplot(df['Outlet_Establishment_Year'])","432ba24d":"fig, ax = plt. subplots(figsize = (13, 7))\nsns.countplot(df['Outlet_Establishment_Year'],hue=df['Outlet_Location_Type'])","e0143b95":"fig, ax = plt. subplots(figsize = (13, 7))\nsns.countplot(df['Outlet_Establishment_Year'],hue=df['Outlet_Type'])","58593ae6":"fig, ax = plt. subplots(figsize = (13, 7))\nsns.countplot(df['Outlet_Establishment_Year'],hue=df['Outlet_Size'])","90534734":"# Verificando a correla\u00e7\u00e3o\ncorr=df.corr()\ncorr","199fbe7e":"df2 = df.copy()","1a8a7372":"df.drop('Outlet_Establishment_Year',axis=1,inplace=True)","d45766c3":"df_all = df.copy()","3dbc0a87":"df_all.head()","c3b1a2e0":"df2 = df_all.copy()","6844b754":"# Convertendo as colunas categ\u00f3rias em colunas num\u00e9ricas\nfor col in df2.columns:\n    if (df2[col].dtype == 'object') & (col in cat_cols):\n        df2[col] = df2[col].astype('category').cat.codes","c6aa337f":"df2","53f96805":"# Colunas a serem usadas para treino\nfeats = [c for c in df2.columns if c not in ['Item_Identifier', 'Outlet_Identifier','Item_Outlet_Sales']]","a00a12ea":"feats","86175367":"df2.Item_Type.value_counts()","7f105b52":"# Primeiro o dataframe de  teste\ntest = df2[df2['Item_Outlet_Sales'].isnull()]","c3c49fae":"# Depois o dataframe de  treino\ntrain = df2[~df2['Item_Outlet_Sales'].isnull()]","a4d089de":"train.shape, test.shape","b9a04ab2":"# Separando o dataframe em train, valid\nfrom sklearn.model_selection import train_test_split\n\n# Separando treino em train e valid\ntrain, valid = train_test_split(train, test_size=0.25, random_state=42)\n\ntrain.shape, valid.shape, test.shape","1f403e26":"# Importando o modelo\nfrom sklearn.ensemble import RandomForestRegressor","5afda73d":"# Instanciar o modelo\nrfr = RandomForestRegressor(random_state=42, n_jobs=-1)","38de7990":"# Treinando o modelo\nrfr.fit(train[feats], train['Item_Outlet_Sales'])","8c43743a":"# Fazendo previs\u00f5es em cima dos dados de valida\u00e7\u00e3o\npreds = rfr.predict(valid[feats])\npreds","feb7d62d":"#Calculando a metrica do ERRO QUADRADO M\u00c9DIO\nfrom sklearn.metrics import mean_squared_error\nmse = mean_squared_error(valid['Item_Outlet_Sales'], preds, squared=False)\nprint('MSE:',mse)","62c31fed":"## Fazendo previs\u00f5es em cima dos dados de teste\npreds_test = rfr.predict(test[feats])\npreds_test","400f0dc9":"# Gravando as predi\u00e7\u00f5es do testeno dataframe test\ntest['Item_Outlet_Sales']=preds_test","c57fc61c":"test[['Item_Identifier','Outlet_Identifier','Item_Outlet_Sales']]","9254503c":"# Gerando o arquivo para submeter na competi\u00e7\u00e3o.\ntest[['Item_Identifier','Outlet_Identifier','Item_Outlet_Sales']].to_csv('rfr.csv', index=False)","ed427b16":"pd.read_csv('.\/rfr.csv')","08dde32c":"sub_model1 = 1215.8682942530354","0054dfce":"from sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score","b995b19d":"# Primeiro o dataframe de  teste\ntest = df2[df2['Item_Outlet_Sales'].isnull()]\n# Depois o dataframe de  treino\ntrain = df2[~df2['Item_Outlet_Sales'].isnull()]\ntrain.shape, test.shape","e49ee7b2":"# Separando o dataframe em train, valid\ntrain, valid = train_test_split(train, test_size=0.25, random_state=42)\ntrain.shape, valid.shape, test.shape","b8adb2dd":"# Instanciando a \u00c1rvore de Decis\u00e3o\ndtr = DecisionTreeRegressor(random_state = 42, max_depth=10)\n# Treinando o modelo\ndtr.fit(train[feats], train['Item_Outlet_Sales'])","3ff4cc39":"# predi\u00e7\u00e3o com os dados de valida\u00e7\u00e3o\npreds = dtr.predict(valid[feats])\npreds","465ed5e9":"#Calculando a metrica do ERRO QUADRADO M\u00c9DIO\nfrom sklearn.metrics import mean_squared_error\nmse = mean_squared_error(valid['Item_Outlet_Sales'], preds, squared=False)\nprint('MSE:',mse)","96ad2270":"## Fazendo previs\u00f5es em cima dos dados de teste\npreds_test = dtr.predict(test[feats])\npreds_test","332f1905":"# Gravando as predi\u00e7\u00f5es do testeno dataframe test\ntest['Item_Outlet_Sales']=preds_test","0d23fcb1":"test[['Item_Identifier','Outlet_Identifier','Item_Outlet_Sales']]","c6a4769f":"# Gerando o arquivo para submeter na competi\u00e7\u00e3o.\ntest[['Item_Identifier','Outlet_Identifier','Item_Outlet_Sales']].to_csv('dtr.csv', index=False)","9f6d1bb6":"sub_model2 = 1287.7839112023187","72a31576":"# Importando as bibliotecas\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor\nfrom sklearn.metrics import accuracy_score","ebd3a6d7":"train.shape, valid.shape, test.shape","cb882b6f":"feats","d9f15f56":"from sklearn.model_selection import RandomizedSearchCV\nn_estimators=[200,400,600,800,1000,1200]\n\nmax_features=['auto', 'sqrt','log2']\nmax_depth = [int(x) for x in np.linspace(10, 1000,10)]\nmin_samples_split = [2, 5, 10,14]\nmin_samples_leaf = [1, 2, 4,6,8]\n\nrandom_grid={'n_estimators':n_estimators,\n            'max_features':max_features,\n            'max_depth':max_depth,\n            'min_samples_split':min_samples_split,\n            'min_samples_leaf':min_samples_leaf}\n            #'criterion':['mse','mae']}","44f2e033":"print(random_grid)","1bbc9cfa":"rf1=RandomForestRegressor()\nrf_randomized=RandomizedSearchCV(estimator=rf1,param_distributions=random_grid,n_iter=100,cv=3,verbose=2,\n                               random_state=100,n_jobs=-1)","353ba7ff":"rf_randomized.fit(train[feats],train['Item_Outlet_Sales'])","eec2cccb":"rf_randomized.best_params_","244c82db":"rf_final=rf_randomized.best_estimator_","9d36c60a":"preds_random=rf_final.predict(valid[feats])","e9180853":"print('MSE:',mean_squared_error(valid['Item_Outlet_Sales'], preds_random, squared=False))","4791eed8":"preds_test = rf_final.predict(test[feats])\npreds_test","6295ebd6":"# Gravando as predi\u00e7\u00f5es do testeno dataframe test\ntest['Item_Outlet_Sales']=preds_test","f8f98b94":"test[['Item_Identifier','Outlet_Identifier','Item_Outlet_Sales']]","44b46084":"# Gerando o arquivo para submeter na competi\u00e7\u00e3o.\ntest[['Item_Identifier','Outlet_Identifier','Item_Outlet_Sales']].to_csv('rf_randomized.csv', index=False)","cf1ba252":"sub_model3 = 1159.43220259559","936faaac":"train.shape, valid.shape, test.shape","c9b8743b":"from sklearn.ensemble import AdaBoostRegressor\nada = AdaBoostRegressor(n_estimators=200, random_state=42)\nada.fit(train[feats], train['Item_Outlet_Sales'])\npreds = ada.predict(valid[feats])","11e61a09":"print('MSE:',mean_squared_error(valid['Item_Outlet_Sales'], preds, squared=False))","b6e16522":"preds_test = ada.predict(test[feats])\npreds_test","b124e87b":"# Gravando as predi\u00e7\u00f5es do testeno dataframe test\ntest['Item_Outlet_Sales']=preds_test","aec17b94":"test[['Item_Identifier','Outlet_Identifier','Item_Outlet_Sales']]","692b08cc":"# Gerando o arquivo para submeter na competi\u00e7\u00e3o.\ntest[['Item_Identifier','Outlet_Identifier','Item_Outlet_Sales']].to_csv('ada.csv', index=False)","17aed916":"sub_model4 = 1307.7896212073836","bd7496f5":"from sklearn.ensemble import BaggingRegressor \n\nbgr = BaggingRegressor()\nbgr.fit(train[feats], train['Item_Outlet_Sales'])\npreds_bgr = bgr.predict(valid[feats])\npreds_bgr","cc2300b0":"print('MSE:',mean_squared_error(valid['Item_Outlet_Sales'], preds_bgr, squared=False))","61adee58":"preds_test = bgr.predict(test[feats])\npreds_test","e98d0e14":"# Gravando as predi\u00e7\u00f5es do testeno dataframe test\ntest['Item_Outlet_Sales']=preds_test","8b05b728":"test[['Item_Identifier','Outlet_Identifier','Item_Outlet_Sales']]","f2278256":"# Gerando o arquivo para submeter na competi\u00e7\u00e3o.\ntest[['Item_Identifier','Outlet_Identifier','Item_Outlet_Sales']].to_csv('bgr.csv', index=False)","451c93e4":"sub_model5 = 1261.4819730182026","91b48cff":"from sklearn.ensemble import VotingRegressor\n\nestimators = [('rfr', rfr),('dtr', dtr),('rf_final', rf_final),('ada', ada),('bgr', bgr)]\nensemble = VotingRegressor(estimators=estimators, n_jobs=-1)\nensemble.fit(train[feats], train['Item_Outlet_Sales'])\npreds_ens = ensemble.predict(valid[feats])","0a19adb3":"print('MSE:',mean_squared_error(valid['Item_Outlet_Sales'], preds_ens, squared=False))","a074c6e3":"# predizendo com o ensemble na base test\npreds_test = ensemble.predict(test[feats])\npreds_test","f4a3f6a4":"# Gravando as predi\u00e7\u00f5es do testeno dataframe test\ntest['Item_Outlet_Sales']=preds_test","0bf7fb91":"test[['Item_Identifier','Outlet_Identifier','Item_Outlet_Sales']]","5f4fe35c":"# Gerando o arquivo para submeter na competi\u00e7\u00e3o.\ntest[['Item_Identifier','Outlet_Identifier','Item_Outlet_Sales']].to_csv('ensemble.csv', index=False)","b7879765":"sub_model6 = 1192.220322347701","a75ccced":"pontuacao = list([sub_model1,sub_model2,sub_model3,sub_model4,sub_model5,sub_model6])\nprint(f\"1-RandomForestRegressor: {pontuacao[0]}\")\nprint(f\"2-RandomForestRegressor: {pontuacao[1]}\")\nprint(f\"3-RandomForestRegressor: {pontuacao[2]}\")\nprint(f\"4-RandomForestRegressor: {pontuacao[3]}\")\nprint(f\"5-RandomForestRegressor: {pontuacao[4]}\")\nprint(f\"6-RandomForestRegressor: {pontuacao[5]}\\n\")\nprint(f\"MELHOR PONTUA\u00c7\u00c3O: Modelo-{pontuacao.index(min(pontuacao))+1} -> {min(pontuacao)}\")","8a68d4db":"### Resultado da Segunda submiss\u00e3o\nSua pontua\u00e7\u00e3o para este envio \u00e9: __1287.7839112023187__<br>\nhttps:\/\/datahack.analyticsvidhya.com\/contest\/practice-problem-big-mart-sales-iii\/#SolutionChecker","ab9cd612":"### Resultado da Terceira submiss\u00e3o\nSua pontua\u00e7\u00e3o para este envio \u00e9: __1159.43220259559__<br>\nhttps:\/\/datahack.analyticsvidhya.com\/contest\/practice-problem-big-mart-sales-iii\/#SolutionChecker","1301b511":"### Resultado da Quarta submiss\u00e3o\nSua pontua\u00e7\u00e3o para este envio \u00e9: __1307.7896212073836__<br>\nhttps:\/\/datahack.analyticsvidhya.com\/contest\/practice-problem-big-mart-sales-iii\/#SolutionChecker","5ebc4d14":"### Quinto Modelo: BaggingRegressor | VotingRegressor","3da24fc8":"## Resumo resultado das Submiss\u00f5es dos Modelos:","d4e972fc":"### Resultado da Quinta submiss\u00e3o\nSua pontua\u00e7\u00e3o para este envio \u00e9: __1261.4819730182026__<br>\nhttps:\/\/datahack.analyticsvidhya.com\/contest\/practice-problem-big-mart-sales-iii\/#SolutionChecker","a3715e8a":"### Finaliza\u00e7\u00e3o: VotingRegressor","ea54c6df":"### Resultado da primeira submiss\u00e3o\nSua pontua\u00e7\u00e3o para este envio \u00e9: __1215.8682942530354__<br>\nhttps:\/\/datahack.analyticsvidhya.com\/contest\/practice-problem-big-mart-sales-iii\/#SolutionChecker","4cc80f2c":"# IESB - Data Mining e Machine Learning II - Projeto Final \n## Francisco F\u00e1bio de Almeida Ferreira - Matr\u00edcula 2186324018","24e17309":"## Separando os dataframes","07e9800a":"### Primeiro Modelo: RandomForestRegressor","19afb3c8":"### Resultado da Sexta submiss\u00e3o\nSua pontua\u00e7\u00e3o para este envio \u00e9: __1192.220322347701__<br>\nhttps:\/\/datahack.analyticsvidhya.com\/contest\/practice-problem-big-mart-sales-iii\/#SolutionChecker","8cec4004":"### Quarto Modelo: AdaBoostRegressor","5ac1e221":"### Segundo Modelo: DecisionTreeRegressor","6001e1f7":"## Feature Engineering","165878a3":"### Terceiro Modelo: GridSearchCV","dd7b2b58":"## Data Visualization"}}