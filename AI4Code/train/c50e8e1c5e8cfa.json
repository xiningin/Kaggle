{"cell_type":{"6ce92011":"code","08146d73":"code","b17655f3":"code","a2228727":"code","b1528653":"code","c6f3902f":"code","1a660a6f":"code","92e8cbff":"code","f850aabf":"code","17adc36a":"code","ffc5524a":"code","061f964f":"code","4aaefed0":"code","7f2f89ea":"code","9059f3c8":"code","be66b618":"code","fe9a724c":"code","0962ee62":"code","bee9f24a":"code","84cfdc86":"code","8e7c3b51":"code","e7673907":"code","9fa67e35":"code","55a90179":"code","3d314e37":"code","53e74d68":"code","437020ed":"code","f60232af":"code","0bfead48":"code","a79f3a07":"code","aaa4ec6f":"code","207a8391":"code","f33b1c61":"code","82a47ba2":"code","6426b406":"code","ee9e49ea":"code","42882b4d":"code","010c4091":"code","e729fbbf":"code","51aec64d":"code","7b057b1a":"code","082662aa":"code","232ff39a":"code","bd8ff578":"code","b70152d1":"code","a1645a5a":"code","5376c7e3":"code","914dd2b2":"code","0ba143b1":"code","ad4de2c4":"code","8362070f":"code","8e309bd0":"code","b11a3c4b":"code","5bf51f33":"code","dbbc35a2":"code","9532305c":"code","5390ff5c":"code","9bb58bad":"code","cdb36760":"code","7c983240":"code","f9fa0f86":"code","ad6f4251":"code","65cd5a72":"code","d25bdcb1":"code","9c2d8806":"code","bed6501e":"code","425c5c23":"code","8dfba290":"code","789594b3":"code","4d68e7b6":"code","eca17ffb":"markdown","c25a9c7a":"markdown","1c39c54f":"markdown","80bfd1ac":"markdown","27addbae":"markdown"},"source":{"6ce92011":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/econdse'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","08146d73":"transactions = pd.read_excel(\"\/kaggle\/input\/econdse\/B1863B00.xlsx\", sheet_name='Transactions')\nnew_customer_lists = pd.read_excel(\"\/kaggle\/input\/econdse\/B1863B00.xlsx\", sheet_name='NewCustomerList')\ncustomer_demographic = pd.read_excel(\"\/kaggle\/input\/econdse\/B1863B00.xlsx\", sheet_name='CustomerDemographic')\ncustomer_add = pd.read_excel(\"\/kaggle\/input\/econdse\/B1863B00.xlsx\", sheet_name='CustomerAddress')","b17655f3":"transactions.info()","a2228727":"transactions.isnull().sum()","b1528653":"new_customer_lists.head()","c6f3902f":"temp1 = pd.merge(customer_add,customer_demographic, how = 'outer', on = 'customer_id')\ndf = pd.merge(transactions,temp1, how ='outer', on = 'customer_id')","1a660a6f":"df.head()","92e8cbff":"df.info()","f850aabf":"df.isnull().sum()","17adc36a":"df.columns","ffc5524a":"new_customer_lists.columns","061f964f":"df= df.drop(['online_order', 'address', 'postcode', 'country','first_name', 'last_name','DOB','job_title','deceased_indicator','transaction_id', 'product_id','transaction_date',\n       'order_status', 'brand', 'product_line', 'product_class',\n       'product_size', 'list_price', 'standard_cost',\n       'product_first_sold_date','Unnamed: 15',\n       'Unnamed: 16', 'Unnamed: 17', 'Unnamed: 18', 'Unnamed: 19'] , axis= 1)","4aaefed0":"new_customer_lists= new_customer_lists.drop([ 'address', 'postcode', 'country','first_name', 'last_name','DOB','job_title','deceased_indicator', 'Rank', 'Value'] , axis= 1)","7f2f89ea":"new_customer_lists.columns","9059f3c8":"df.columns","be66b618":"df.head()","fe9a724c":"new_customer_lists['state']= new_customer_lists['state'].replace('NSW','New South Wales')\nnew_customer_lists['state']= new_customer_lists['state'].replace('VIC','Victoria')","0962ee62":"new_customer_lists.head()","bee9f24a":"df1= pd.read_excel (\"..\/input\/econdsekpmg-virtual-internship-2020\/export_df1 (9).xlsx\", sheet_name= 'final')\naa= pd.read_excel (r\"..\/input\/econdsekpmg-virtual-internship-2020\/new (2).xlsx\", sheet_name= 'Sheet2')","84cfdc86":"df2= pd.get_dummies(df1, drop_first= True)\nnc= pd.get_dummies(aa, drop_first= True)","8e7c3b51":"df2.head()","e7673907":"nc.head()","9fa67e35":"X = df2.drop('Range', axis=1)\ny = df2['Range']","55a90179":"nc1= nc.drop('customer_id', axis=1)","3d314e37":"y.head()","53e74d68":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)","437020ed":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nimport matplotlib.pyplot as plt","f60232af":"logreg = LogisticRegression()\na= logreg.fit(X_train, y_train)\nY_pred = logreg.predict(X_test)\n\nacc_log = round(logreg.score(X_train, y_train) * 100, 2)\ncm = confusion_matrix(y_test, Y_pred)\nprint(cm)\nacc_log\n","0bfead48":"y_prob_train= logreg.predict_proba(X_train)[:, 1]\ny_prob_train.reshape(1,-1)\ny_prob_train","a79f3a07":"y_prob= logreg.predict_proba(X_test)[:, 1]\ny_prob.reshape(1,-1)\ny_prob","aaa4ec6f":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,Y_pred))\n\ntn,fp,fn,tp = cm.ravel()\nprint('TRUE NEGATIVE:', tn)\nprint('FALSE POSITIVE:', fp)\nprint('FALSE NEGATIVE:', fn)\nprint('TRUE POSITIVE:', tn)\n\nspecificity = tn\/(tn+fp)\nprint('specificity {:0.2f}'.format(specificity))\nsensitivity = tp\/(tp+fn)\nprint('sensitivity {:0.2f}'.format(sensitivity))","207a8391":"from sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve, auc\nlog_roc_auc= roc_auc_score(y_train,y_prob_train )\nfpr, tpr, thresholds = roc_curve(y_train, y_prob_train )\nroc_auc= auc(fpr,tpr)","f33b1c61":"plt.figure()\nplt.plot(fpr, tpr, color= \"blue\" , label = 'ROC CURVE (area= %0.2f)' % roc_auc)\nplt.plot([0,1], [0,1], 'r--')\nplt.xlim([0.0 ,1.0])\nplt.ylim([0.0 ,1.05])  \nplt.xlabel('FALSE POSITIVE RATE')\nplt.ylabel('TRUE POSITIVE RATE')\nplt.title('ROC CURVE')\nplt.legend(loc= 'lower right')\nplt.show()","82a47ba2":"log_roc_auc= roc_auc_score(y_test,y_prob)\nfpr1, tpr1, thresholds = roc_curve(y_test,y_prob)\nroc_auc= auc(fpr1,tpr1)","6426b406":"plt.figure()\nplt.plot(fpr1, tpr1, color= \"blue\" , label = 'ROC CURVE (area= %0.2f)' % roc_auc)\nplt.plot([0,1], [0,1], 'r--')\nplt.xlim([0.0 ,1.0])\nplt.ylim([0.0 ,1.05])  \nplt.xlabel('FALSE POSITIVE RATE')\nplt.ylabel('TRUE POSITIVE RATE')\nplt.title('ROC CURVE')\nplt.legend(loc= 'lower right')\nplt.show()","ee9e49ea":"svc = SVC()\nsvc.fit(X_train, y_train)\nY_pred = svc.predict(X_test)\nacc_svc = round(svc.score(X_train, y_train) * 100, 2)\ncm = confusion_matrix(y_test, Y_pred)\nprint(cm)\nacc_svc\n","42882b4d":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,Y_pred))\n\ntn,fp,fn,tp = cm.ravel()\nprint('TRUE NEGATIVE:', tn)\nprint('FALSE POSITIVE:', fp)\nprint('FALSE NEGATIVE:', fn)\nprint('TRUE POSITIVE:', tn)\n\nspecificity = tn\/(tn+fp)\nprint('specificity {:0.2f}'.format(specificity))\nsensitivity = tp\/(tp+fn)\nprint('sensitivity {:0.2f}'.format(sensitivity))","010c4091":"knn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, y_train)\nY_pred = knn.predict(X_test)\nacc_knn = round(knn.score(X_train, y_train) * 100, 2)\ncm = confusion_matrix(y_test, Y_pred)\nprint(cm)\nacc_knn","e729fbbf":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,Y_pred))\n\ntn,fp,fn,tp = cm.ravel()\nprint('TRUE NEGATIVE:', tn)\nprint('FALSE POSITIVE:', fp)\nprint('FALSE NEGATIVE:', fn)\nprint('TRUE POSITIVE:', tn)\n\nspecificity = tn\/(tn+fp)\nprint('specificity {:0.2f}'.format(specificity))\nsensitivity = tp\/(tp+fn)\nprint('sensitivity {:0.2f}'.format(sensitivity))","51aec64d":"linear_svc = LinearSVC()\nlinear_svc.fit(X_train, y_train)\nY_pred = linear_svc.predict(X_test)\nacc_linear_svc = round(linear_svc.score(X_train, y_train) * 100, 2)\ncm = confusion_matrix(y_test, Y_pred)\nprint(cm)\nacc_linear_svc","7b057b1a":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,Y_pred))\n\ntn,fp,fn,tp = cm.ravel()\nprint('TRUE NEGATIVE:', tn)\nprint('FALSE POSITIVE:', fp)\nprint('FALSE NEGATIVE:', fn)\nprint('TRUE POSITIVE:', tn)\n\nspecificity = tn\/(tn+fp)\nprint('specificity {:0.2f}'.format(specificity))\nsensitivity = tp\/(tp+fn)\nprint('sensitivity {:0.2f}'.format(sensitivity))","082662aa":"decision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, y_train)\nY_pred = decision_tree.predict(X_test)\nacc_decision_tree = round(decision_tree.score(X_train, y_train) * 100, 2)\ncm = confusion_matrix(y_test, Y_pred)\nprint(cm)\nacc_decision_tree","232ff39a":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,Y_pred))\n\ntn,fp,fn,tp = cm.ravel()\nprint('TRUE NEGATIVE:', tn)\nprint('FALSE POSITIVE:', fp)\nprint('FALSE NEGATIVE:', fn)\nprint('TRUE POSITIVE:', tn)\n\nspecificity = tn\/(tn+fp)\nprint('specificity {:0.2f}'.format(specificity))\nsensitivity = tp\/(tp+fn)\nprint('sensitivity {:0.2f}'.format(sensitivity))","bd8ff578":"random_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, y_train)\nY_pred = random_forest.predict(X_test)\nrandom_forest.score(X_train, y_train)\nacc_random_forest = round(random_forest.score(X_train, y_train) * 100, 2)\ncm = confusion_matrix(y_test, Y_pred)\nprint(cm)\nacc_random_forest","b70152d1":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,Y_pred))\n\ntn,fp,fn,tp = cm.ravel()\nprint('TRUE NEGATIVE:', tn)\nprint('FALSE POSITIVE:', fp)\nprint('FALSE NEGATIVE:', fn)\nprint('TRUE POSITIVE:', tn)\n\nspecificity = tn\/(tn+fp)\nprint('specificity {:0.2f}'.format(specificity))\nsensitivity = tp\/(tp+fn)\nprint('sensitivity {:0.2f}'.format(sensitivity))","a1645a5a":"models = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n              'Random Forest', 'Linear SVC', \n              'Decision Tree'],\n    'Score': [acc_svc, acc_knn, acc_log, \n              acc_random_forest, acc_linear_svc, acc_decision_tree]})\nmodels.sort_values(by='Score', ascending=False)","5376c7e3":"random_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, y_train)\ny_pred = random_forest.predict(nc1)","914dd2b2":"y_pred","0ba143b1":"submission = pd.DataFrame({\n        \"customer_id\": nc[\"customer_id\"],\n        \"Target\": y_pred\n    })","ad4de2c4":"submission","8362070f":"submission['Target'].value_counts()","8e309bd0":"lr = pd.read_excel(\"..\/input\/econdsekpmg-virtual-internship-2020\/linear regression.xlsx\")","b11a3c4b":"import matplotlib as mpl\nimport statsmodels.formula.api as sm\nfrom sklearn.linear_model import LinearRegression\nfrom scipy import stats\nimport seaborn as sns","5bf51f33":"lr.columns","dbbc35a2":"df= pd.get_dummies(lr, drop_first= True)","9532305c":"df.columns","5390ff5c":"df = df.rename(columns = {'brand_Norco Bicycles':'brand_Norco_Bicycles'})\ndf = df.rename(columns = {'brand_OHM Cycles':'brand_OHM_Cycles'})\ndf = df.rename(columns = {'brand_Trek Bicycles':'brand_Trek_Bicycles'})","9bb58bad":"df.columns","cdb36760":"df.head(10)","7c983240":"df.info()","f9fa0f86":"df.describe()","ad6f4251":"X = df[['online_order', 'brand_Norco_Bicycles', 'brand_OHM_Cycles',\n       'brand_Solex', 'brand_Trek_Bicycles', 'brand_WeareA2B',\n       'product_line_Road', 'product_line_Standard', 'product_line_Touring',\n       'product_class_low', 'product_class_medium', 'product_size_medium','product_size_small']]\ny = df['profit']","65cd5a72":"plt.figure(figsize= (10,10))\nsns.heatmap(df.corr(),annot= True, cmap= \"coolwarm\")","d25bdcb1":"from statsmodels.stats.anova import anova_lm\nfrom statsmodels.formula.api import ols","9c2d8806":"\nreg= ols(formula= \"profit ~ online_order + brand_Norco_Bicycles + brand_OHM_Cycles + brand_Solex+ brand_Trek_Bicycles + brand_WeareA2B + product_line_Road + product_line_Standard+ product_line_Touring  + product_class_low + product_class_medium + product_size_medium + product_size_small\", data= df)\nfit1= reg.fit()\nprint(fit1.summary())","bed6501e":"reg= ols(formula= \"profit ~ brand_Norco_Bicycles + brand_OHM_Cycles + brand_Solex+ brand_Trek_Bicycles + brand_WeareA2B + product_line_Road + product_line_Standard+ product_line_Touring  + product_class_low + product_class_medium + product_size_medium + product_size_small\", data= df)\nfit1= reg.fit(cov_type='HC1')\nprint(fit1.summary())","425c5c23":"reg= ols(formula= \"profit ~ brand_Norco_Bicycles + brand_OHM_Cycles + brand_Solex+ brand_Trek_Bicycles + brand_WeareA2B + product_line_Road + product_line_Standard+ product_line_Touring  + product_class_low + product_class_medium + product_size_medium + product_size_small\", data= df)\nfit1= reg.fit()\nprint(fit1.summary())","8dfba290":"from statsmodels.formula.api import gls\nreg= gls(formula= \"profit ~ online_order + brand_Norco_Bicycles + brand_OHM_Cycles + brand_Solex+ brand_Trek_Bicycles + brand_WeareA2B + product_line_Road + product_line_Standard+ product_line_Touring  + product_class_low + product_class_medium + product_size_medium + product_size_small\", data= df)\nfit1= reg.fit()\nprint(fit1.summary())","789594b3":"reg= gls(formula= \"profit ~ online_order + brand_Norco_Bicycles + brand_OHM_Cycles + brand_Solex+ brand_Trek_Bicycles + brand_WeareA2B + product_line_Road + product_line_Standard+ product_line_Touring  + product_class_low + product_class_medium + product_size_medium + product_size_small\", data= df)\nfit1= reg.fit(cov_type='HC1')\nprint(fit1.summary())","4d68e7b6":"reg= ols(formula= \"profit ~ brand_Norco_Bicycles + brand_OHM_Cycles + brand_Solex+ brand_Trek_Bicycles + brand_WeareA2B + product_line_Road + product_line_Standard+ product_line_Touring  + product_class_low + product_class_medium + product_size_medium + product_size_small\", data= df)\nfit1= reg.fit(cov_type='HC1')\nprint(fit1.summary())","eca17ffb":"***OTHER THAN ONLINE ORDER, EVERY VARIABLE PROVIDE A SIGNIFICANT ROLE IN DETERMINE PROFIT***","c25a9c7a":"MERGE ALL THE INPUT VARIABLE i.e. TRANSACTIONS, CUSTOMER DEMOGRAPHIC AND CUSTOMER ADDRESS INTO ONE SEPARATE FILE NAMED AS 'df' ON THE BASIS OF CUSTOMER ID.\n","1c39c54f":"**NOW WE ARE PLANNING TO ANSWER ONE MORE QUESTION I.E. IS IT CORRECT TO DROP SO MUCH VARIABLES AND IS THIS VARIABLES PLAY A SIGNIFICANT ROLL IN IT ?**","80bfd1ac":"NOW WE ARE UPLOADING NEW DATA SET OR YOU CAN SAY BETTER VERSION OF DATA SET\nTHINGS DONE IN THAT NEW DATA SET\n1. REMOVAL OF ALL THE MISSING VALUES IN THE df\n2. Provide CATAGORICAL VARTIABLE A SEPARATE VALUE E.G. MALE =1 , FEMALE = 0, YES=1, NO= 0 \n3. REMOVAL OF UNDEFINED CATAGARY FROM GENDER\n4. ROUNDED OFF THE AGE","27addbae":"DROPING FOR SOME UNUSEFUL VARIABLE FROM df AND new_customer_lists SO THAT WE CAN RUN THE CLASSIFICATION TECHNIQUE ON THE MODEL"}}