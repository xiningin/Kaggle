{"cell_type":{"a2bcc43d":"code","6c83c8f9":"code","9406154d":"code","6c711fbf":"code","3de40eaa":"code","bcc4772c":"code","a4f211b7":"code","c8ed84e4":"code","8770b5f1":"code","cda64d91":"code","ab9054e3":"code","12b3d465":"code","39aa5b2a":"code","018c8aab":"code","b838d5a0":"code","32693759":"code","8e1e01f2":"code","ae21b633":"code","6fdc3a4b":"code","42bb83e1":"code","24f747ae":"code","492cb2df":"code","1177887f":"code","d23c24b7":"code","b1ef989e":"code","da720ded":"code","9e2b80ce":"code","754bb771":"code","fad8c47c":"code","9a56858d":"code","1149e37e":"code","2306159e":"code","b431d7a4":"code","79098c5c":"code","d8200126":"code","91860685":"code","b0429827":"code","f6ee35c9":"code","7d73dc92":"code","68626795":"code","d93c5180":"code","03281ec2":"code","f74d7565":"code","86a683e1":"code","3f920e24":"code","192b7cbc":"code","d1147dcc":"code","4d62b2c2":"code","07d47895":"code","adea7c0c":"code","c5b9ed0b":"code","7bcefa94":"code","d10cbe1b":"code","15790fdb":"code","f0efd0e4":"code","f87ccb8a":"code","809bf11b":"code","16dcc3e0":"code","084e7536":"code","5bfe2111":"code","0efa7d90":"code","f4e4cb49":"code","4f69c2a5":"code","a7831da3":"code","3a8e1bcb":"code","c156c77a":"code","62878794":"code","19ef6138":"code","e23f8eb9":"code","1a5a8403":"code","35096509":"code","2e0e2ec5":"code","b7b687b5":"code","d39e8881":"code","e2d4e784":"code","3d1fdf3e":"markdown","941ede85":"markdown","00ab4cdf":"markdown","c706787b":"markdown","2a9085b6":"markdown","8d78f9f4":"markdown","109e5308":"markdown","caeff28c":"markdown","0d0487d1":"markdown","070ea4d7":"markdown","aede8c5e":"markdown","6056c6dd":"markdown","8751ff7c":"markdown","428c0595":"markdown","cb8c9c8f":"markdown","8c4e8fdd":"markdown","8297aa40":"markdown","beccfe1c":"markdown","ba8c0dd3":"markdown","54c581e0":"markdown","d591dc6d":"markdown","bf43fd75":"markdown","3a10aa88":"markdown","d03479b5":"markdown","c227d6d6":"markdown","5d1596a8":"markdown","ef233e78":"markdown","fd53e680":"markdown","1c352416":"markdown","7a175b97":"markdown","6d07c523":"markdown","a24c737d":"markdown","a7df02a4":"markdown","73012363":"markdown","d693a32d":"markdown","5e2ac614":"markdown","6b915739":"markdown","33ff7161":"markdown"},"source":{"a2bcc43d":"!pip install chart_studio\n!pip install ycimpute","6c83c8f9":"import os\nimport numpy as np\nimport pandas as pd\nimport missingno as msno\nimport seaborn as sns\nimport plotly.graph_objs as go\nimport plotly.express as px\nfrom plotly.offline import iplot\nfrom plotly.subplots import make_subplots\nimport chart_studio.plotly as py\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected = True)\n\nfrom statsmodels.stats.proportion import proportions_ztest\nfrom scipy.stats import shapiro,levene\nfrom ycimpute.imputer import knnimput\nfrom sklearn.preprocessing import StandardScaler, RobustScaler\n\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.naive_bayes import BernoulliNB\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import VotingClassifier\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.metrics import roc_auc_score, roc_curve, auc, confusion_matrix \nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\n\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\nfrom xgboost import XGBClassifier\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\ncolors = ['#F06E5C','#5CF0C5','#F1F689','#F0B35C','#6EDEDE',\n          '#BB81D5','#D3D972','#EB83EE','#8B8CED','#F09674',\n          '#BCE374','#72C3E7','#C3A0EB','#E6809D','#A9BFCB']\n\nsns.palplot(sns.color_palette(colors))\nplt.title('Notebook Colors', size = 12)\nplt.axis('off')\nplt.show()\n          \nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","9406154d":"diabetes = pd.read_csv('\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv',\n                       na_values = {'Glucose':0,\n                                    'BloodPressure':0,\n                                    'SkinThickness':0,\n                                    'Insulin':0,\n                                    'BMI':0})\ndf = diabetes.copy()\ndf.head()","6c711fbf":"def check_df(dataframe, head=5):\n    \n    print(\" SHAPE \".center(70,'#'))\n    print('Rows: {}'.format(dataframe.shape[0]))\n    print('Columns: {}'.format(dataframe.shape[1]))\n    print(\" TYPES \".center(70,'#'))\n    print(dataframe.dtypes)\n    print(\" HEAD \".center(70,'#'))\n    print(dataframe.head(head))\n    print(' TAIL '.center(70,'#'))\n    print(dataframe.tail(head))\n    print(' MISSING VALUES '.center(70,'#'))\n    print(dataframe.isnull().sum())\n    print(' DUPLICATED VALUES '.center(70,'#'))\n    print(dataframe.duplicated().sum())\n    print(\" QUANTILES \".center(70,'#'))\n    print(dataframe.quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T)\n\ncheck_df(df)","3de40eaa":"def grab_col_names(dataframe, cat_th=10, car_th=20):\n    \n    # cat_cols, cat_but_car\n    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\"]\n    num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and\n                   dataframe[col].dtypes != \"O\"]\n    cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and\n                   dataframe[col].dtypes == \"O\"]\n    cat_cols = cat_cols + num_but_cat\n    cat_cols = [col for col in cat_cols if col not in cat_but_car]\n\n    # num_cols\n    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != \"O\"]\n    num_cols = [col for col in num_cols if col not in num_but_cat]\n\n    print(f\"Observations: {dataframe.shape[0]}\")\n    print(f\"Variables: {dataframe.shape[1]}\")\n    print(f'cat_cols: {len(cat_cols)}')\n    print(f'num_cols: {len(num_cols)}')\n    print(f'cat_but_car: {len(cat_but_car)}')\n    print(f'num_but_cat: {len(num_but_cat)}')\n    return cat_cols, num_cols, cat_but_car\n\ncat_cols, num_cols, cat_but_car = grab_col_names(df)","bcc4772c":"def desc_stats(dataframe):\n    desc = dataframe.describe().T\n    desc_df = pd.DataFrame(index= [col for col in dataframe.columns], \n                           columns= desc.columns,\n                           data= desc)\n    \n    f,ax = plt.subplots(figsize=(10,\n                                 desc_df.shape[0]*0.78))\n    sns.heatmap(desc_df,\n                annot=True,\n                cmap = \"Reds\",\n                fmt= '.2f',\n                ax=ax,\n                linewidths = 2.6,\n                cbar = False,\n                annot_kws={\"size\": 14})\n    plt.xticks(size = 18)\n    plt.yticks(size = 14,\n               rotation = 0)\n    plt.title(\"Descriptive Statistics\", size = 16)\n    plt.show()\n    \ndesc_stats(df[num_cols])","a4f211b7":"def cat_summary(dataframe, col_name):\n    fig = make_subplots(rows=1,cols=2,\n                        subplot_titles=('Countplot','Percentages'),\n                        specs=[[{\"type\": \"xy\"}, {'type':'domain'}]])\n\n    fig.add_trace(go.Bar( y = dataframe[col_name].value_counts().values.tolist(), \n                          x = dataframe[col_name].value_counts().index, \n                          text=dataframe[col_name].value_counts().values.tolist(),\n                          textfont=dict(size=15),\n                          name = col_name,\n                          textposition = 'auto',\n                          showlegend=False,\n                          marker=dict(color = colors,\n                                      line=dict(color='white',\n                                                width=1.5))),\n                  row = 1, col = 1)\n    \n    fig.add_trace(go.Pie(labels=dataframe[col_name].value_counts().keys(),\n                         values=dataframe[col_name].value_counts().values,\n                         textfont = dict(size = 20),\n                         textposition='auto',\n                         showlegend = False,\n                         name = col_name,\n                         marker=dict(colors=colors)),\n                  row = 1, col = 2)\n    \n    fig.update_layout(title={'text': str(col_name),\n                             'y':0.9,\n                             'x':0.5,\n                             'xanchor': 'center',\n                             'yanchor': 'top'},\n                      template='ggplot2')\n    \n    iplot(fig)\n\nfor i in cat_cols:\n    cat_summary(df,i)","c8ed84e4":"def num_summary(dataframe, col_name):\n    fig = make_subplots(rows=1,cols=2,\n                        subplot_titles=('Quantiles','Distribution'))\n\n    fig.add_trace(go.Box(y=dataframe[col_name],\n                         name = str(col_name),\n                         showlegend = False,\n                         marker_color = colors[1]),\n                  row = 1, col = 1)\n    \n    fig.add_trace(go.Histogram(x = dataframe[col_name],\n                               xbins = dict(start = 0,end = dataframe[col_name].max()),\n                               showlegend = False,\n                               name = str(col_name),\n                               marker=dict(color=colors[0],\n                                           line=dict(color='white',\n                                                     width=2))),\n                  row = 1, col = 2)\n    \n    fig.update_layout(title={'text': str(col_name),\n                             'y':0.9,\n                             'x':0.5,\n                             'xanchor': 'center',\n                             'yanchor': 'top'},\n                      template='ggplot2')\n    \n    iplot(fig)\n\nfor i in num_cols:\n    num_summary(df,i)","8770b5f1":"def pearson_corr(dataframe):\n    sns.set_style(\"white\")\n    matrix = np.triu(dataframe.corr(method=\"pearson\"))\n    f,ax=plt.subplots(figsize = (matrix.shape[0]*0.75,\n                                 matrix.shape[1]*0.75))\n    sns.heatmap(dataframe.corr(method=\"pearson\"),\n                annot= True,\n                fmt = \".2f\",\n                ax=ax,\n                vmin = -1,\n                vmax = 1,\n                mask = matrix,\n                cmap = \"coolwarm\",\n                linewidth = 0.4,\n                linecolor = \"white\",\n                annot_kws={\"size\": 12})\n    plt.xticks(rotation=80,size=14)\n    plt.yticks(rotation=0,size=14)\n    plt.title('Pearson Correlation Map', size = 14)\n    plt.show()\n    \npearson_corr(df)","cda64d91":"def spearman_corr(dataframe):\n    sns.set_style(\"white\")\n    matrix = np.triu(dataframe.corr(method=\"spearman\"))\n    f,ax=plt.subplots(figsize = (matrix.shape[0]*0.75,\n                                 matrix.shape[1]*0.75))\n    sns.heatmap(dataframe.corr(method = \"spearman\"),\n                annot= True,\n                fmt = \".2f\",\n                ax=ax,\n                vmin = -1,\n                vmax = 1,\n                mask = matrix,\n                cmap = \"coolwarm\",\n                linewidth = 0.4,\n                linecolor = \"white\",\n                annot_kws={\"size\": 12})\n    plt.xticks(rotation=80,size=14)\n    plt.yticks(rotation=0,size=14)\n    plt.title('Spearman Rank Correlation Map', size = 14)\n    plt.show()\n    \nspearman_corr(df)","ab9054e3":"index_vals = [colors[0] if i == 0 else colors[1] for i in df['Outcome'].astype('category').cat.codes]\n\nfig = go.Figure(data=go.Splom(dimensions=[dict(label='Pregnancies',values=df['Pregnancies']),\n                                          dict(label='Glucose',values=df['Glucose']),\n                                          dict(label='BloodPressure',values=df['BloodPressure']),\n                                          dict(label='SkinThickness',values=df['SkinThickness']),\n                                          dict(label='Insulin',values=df['Insulin']),\n                                          dict(label='BMI',values=df['BMI']),\n                                          dict(label='DiabetesPedigreeFunction',values=df['DiabetesPedigreeFunction']),\n                                          dict(label='Age',values=df['Age'])],\n                showupperhalf=True, \n                text=df['Outcome'],\n                marker=dict(color = index_vals,\n                            showscale = False,\n                            line_color = 'white',\n                            line_width = 1)))\n\nfig.update_layout(title='Pairwise Relationships',\n                  width=950,\n                  height=950,\n                  template = 'ggplot2')\n\niplot(fig)","12b3d465":"def missing_values_table(dataframe, na_name=False):\n    na_columns = [col for col in dataframe.columns if dataframe[col].isnull().sum() > 0]\n    n_miss = dataframe[na_columns].isnull().sum().sort_values(ascending=False)\n    ratio = (dataframe[na_columns].isnull().sum() \/ dataframe.shape[0] * 100).sort_values(ascending=False)\n    missing_df = pd.concat([n_miss, np.round(ratio, 2)], axis=1, keys=['n_miss', 'ratio'])\n    print(missing_df, end=\"\\n\")\n    if na_name:\n        return na_columns\n    \ndef missing_vs_target(dataframe, target, na_columns):\n    temp_df = dataframe.copy()\n    for col in na_columns:\n        temp_df[col + '_NA_FLAG'] = np.where(temp_df[col].isnull(), 1, 0)\n    na_flags = temp_df.loc[:, temp_df.columns.str.contains(\"_NA_\")].columns\n    for col in na_flags:\n        print(pd.DataFrame({\"TARGET_MEAN\": temp_df.groupby(col)[target].mean(),\n                            \"Count\": temp_df.groupby(col)[target].count()}), end=\"\\n\\n\\n\")\n        \nmissing_vs_target(df,'Outcome',missing_values_table(df,na_name=True))","39aa5b2a":"msno.bar(df)\nplt.show()","018c8aab":"msno.matrix(df)\nplt.show()","b838d5a0":"msno.heatmap(df)\nplt.show()","32693759":"fig = go.Figure()\nfig.add_trace(go.Histogram(x=df[df['Outcome']== 0]['Glucose'],\n                           xbins = dict(start = 0,end =df[df['Outcome']== 0]['Glucose'].max(),size =5),\n                           name='0',\n                          marker=dict(color = colors[0],\n                                      opacity = 0.5)))\nfig.add_trace(go.Histogram(x=df[df['Outcome']== 1]['Glucose'],\n                           xbins = dict(start = 0,end =df[df['Outcome']== 1]['Glucose'].max(),size =5),\n                           name='1',\n                           marker =dict(color = colors[1],\n                                        opacity = 0.5)))\n\nfig.update_layout(title=dict(text='Glucose Distribution by Outcome',\n                             y=0.9,\n                             x=0.5,\n                             xanchor= 'center',\n                             yanchor= 'top'),\n                  barmode='overlay',\n                  xaxis = dict(title='Glucose'),\n                  yaxis =dict(title='Frequency'),\n                  legend=dict(x=0.05,\n                              y=0.95,\n                              bgcolor='rgba(255, 255, 255, 0)'),\n                  legend_title='Outcome',\n                  template = 'ggplot2')\niplot(fig)","8e1e01f2":"data = [go.Scatter(x=df[df['Outcome']== df['Outcome'][i]]['Glucose'],\n                   y=df[df['Outcome']== df['Outcome'][i]]['Insulin'],\n                   mode='markers',\n                   name=str(i),\n                   showlegend = True,\n                   marker = dict(color = colors[i],\n                                 line_color = 'white',\n                                 line_width = 1.5,\n                                 size = 7)) for i in range(df['Outcome'].nunique())]\nlayout = go.Layout(title=dict(text='Glucose & Insulin',\n                              y=0.9,\n                              x=0.5,\n                              xanchor= 'center',\n                              yanchor= 'top'),\n                   legend=dict(x=0.05,\n                               y=0.95,\n                               bgcolor='rgba(255, 255, 255, 0)'),\n                   legend_title='Outcome',\n                   xaxis = dict(title='Glucose'),\n                   yaxis=dict(title='Insulin'),\n                   template='ggplot2')\n\nfig = go.Figure(data=data, layout = layout)\nfig.show()","ae21b633":"df.groupby(['Outcome']).agg({'Age':'median',\n                            'Glucose':['mean','median'],\n                            'Pregnancies':'median',\n                            'BMI':'median',\n                            'SkinThickness':'median'})","6fdc3a4b":"df.loc[df['Glucose'].isnull()]","42bb83e1":"df['Glucose'] = df['Glucose'].fillna(df.groupby('Outcome')['Glucose'].transform('median'))\nmissing_values_table(df,na_name=False)","24f747ae":"fig = go.Figure()\nfig.add_trace(go.Histogram(x=df[df['Outcome']== 0]['BMI'],\n                           xbins = dict(start = 0,end =df[df['Outcome']== 0]['BMI'].max(),size =5),\n                           name='0',\n                          marker=dict(color = colors[0],\n                                      opacity = 0.5)))\nfig.add_trace(go.Histogram(x=df[df['Outcome']== 1]['BMI'],\n                           xbins = dict(start = 0,end =df[df['Outcome']== 1]['BMI'].max(),size =5),\n                           name='1',\n                           marker =dict(color = colors[1],\n                                        opacity = 0.5)))\n\nfig.update_layout(title=dict(text='BMI Distribution by Outcome',\n                             y=0.9,\n                             x=0.5,\n                             xanchor= 'center',\n                             yanchor= 'top'),\n                  barmode='overlay',\n                  xaxis = dict(title='BMI'),\n                  yaxis =dict(title='Frequency'),\n                  legend=dict(x=0.05,\n                              y=0.95,\n                              bgcolor='rgba(255, 255, 255, 0)'),\n                  legend_title='Outcome',\n                  template = 'ggplot2')\niplot(fig)","492cb2df":"df.groupby(['Outcome']).agg({'Age':'median',\n                            'Glucose':'median',\n                            'Pregnancies':'median',\n                            'BMI':['mean','median'],\n                            'SkinThickness':'median'})","1177887f":"df.loc[df['BMI'].isnull()]","d23c24b7":"df['BMI'] = df['BMI'].fillna(df.groupby('Outcome')['BMI'].transform('median'))\nmissing_values_table(df,na_name=False)","b1ef989e":"fig = go.Figure()\nfig.add_trace(go.Histogram(x=df[df['Outcome']== 0]['BloodPressure'],\n                           xbins = dict(start = 0,end =df[df['Outcome']== 0]['BloodPressure'].max(),size =5),\n                           name='0',\n                          marker=dict(color = colors[0],\n                                      opacity = 0.5)))\nfig.add_trace(go.Histogram(x=df[df['Outcome']== 1]['BloodPressure'],\n                           xbins = dict(start = 0,end =df[df['Outcome']== 1]['BloodPressure'].max(),size =5),\n                           name='1',\n                           marker =dict(color = colors[1],\n                                        opacity = 0.5)))\n\nfig.update_layout(title=dict(text='BloodPressure Distribution by Outcome',\n                             y=0.9,\n                             x=0.5,\n                             xanchor= 'center',\n                             yanchor= 'top'),\n                  barmode='overlay',\n                  xaxis = dict(title='BloodPressure'),\n                  yaxis =dict(title='Frequency'),\n                  legend=dict(x=0.05,\n                              y=0.95,\n                              bgcolor='rgba(255, 255, 255, 0)'),\n                  legend_title='Outcome',\n                  template = 'ggplot2')\niplot(fig)","da720ded":"df.groupby(['Outcome']).agg({'Age':'median',\n                            'Glucose':'median',\n                            'Pregnancies':'median',\n                            'BMI':'median',\n                            'SkinThickness':'median',\n                            'BloodPressure':['mean','median']})","9e2b80ce":"data = [go.Scatter(x=df[df['Outcome']== df['Outcome'][i]]['BloodPressure'],\n                   y=df[df['Outcome']== df['Outcome'][i]]['Age'],\n                   mode='markers',\n                   name=str(i),\n                   showlegend = True,\n                   marker = dict(color = colors[i],\n                                 line_color = 'white',\n                                 line_width = 1.5,\n                                 size = 7)) for i in range(df['Outcome'].nunique())]\nlayout = go.Layout(title=dict(text='BloodPressure & Age',\n                              y=0.9,\n                              x=0.5,\n                              xanchor= 'center',\n                              yanchor= 'top'),\n                   legend=dict(x=0.05,\n                               y=0.95,\n                               bgcolor='rgba(255, 255, 255, 0)'),\n                   legend_title='Outcome',\n                   xaxis = dict(title='BloodPressure'),\n                   yaxis=dict(title='Age'),\n                   template='ggplot2')\n\nfig = go.Figure(data=data, layout = layout)\nfig.show()","754bb771":"def knn_impute(dataframe, neighbors = 5):\n    var_names = list(dataframe)\n    np_df_impute = np.array(dataframe)\n    imputed = knnimput.KNN(k = neighbors).complete(np_df_impute)\n    df_impute = pd.DataFrame(imputed, columns = var_names)\n    return df_impute\n\ndf_imputed = knn_impute(df[df.columns[~df.columns.isin(['SkinThickness','Insulin'])]], neighbors = 7)\ndf_imputed['SkinThickness'] = df['SkinThickness']\ndf_imputed['Insulin'] = df['Insulin']\ndf = df_imputed","fad8c47c":"missing_values_table(df,na_name=False)","9a56858d":"def outlier_thresholds(dataframe, col_name, q1=0.1, q3=0.9):\n    quartile1 = dataframe[col_name].quantile(q1)\n    quartile3 = dataframe[col_name].quantile(q3)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit\n\ndef replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit\n    \nfor col in df.columns:\n    replace_with_thresholds(df, col)\n\ndesc_stats(df[num_cols])","1149e37e":"bmi_labels = ['Underweight','Healthy Weight','Overweight','Obesity']\n\ndf['BMI_Cat'] = pd.cut(df['BMI'],[0,18.5,25,30,df['BMI'].max()],labels=bmi_labels)\n\ndata = go.Bar(x = df.groupby('BMI_Cat').agg({'BMI':'mean'}).reset_index()['BMI_Cat'],\n              y = df.groupby('BMI_Cat').agg({'BMI':'mean'}).reset_index()['BMI'],\n              text = round(df.groupby('BMI_Cat').agg({'BMI':'mean'}).reset_index()['BMI'],3),\n              textposition= 'auto',\n              marker = dict(color = colors,\n                            line_color = 'white',\n                            line_width=2))\n\nlayout = go.Layout(title={'text': 'Average BMI by BMI Categories',\n                          'y':0.9,\n                          'x':0.5,\n                          'xanchor': 'center',\n                          'yanchor': 'top'},\n                   xaxis = dict(title='BMI_Cat'),\n                   yaxis =dict(title='BMI'),\n                   template = 'ggplot2')\n\nfig=go.Figure(data=data, layout=layout)\niplot(fig)","2306159e":"data = go.Bar(x = df.groupby('BMI_Cat').agg({'Outcome':'mean'}).reset_index()['BMI_Cat'],\n              y = df.groupby('BMI_Cat').agg({'Outcome':'mean'}).reset_index()['Outcome'],\n              text = round(df.groupby('BMI_Cat').agg({'Outcome':'mean'}).reset_index()['Outcome'],3),\n              textposition= 'auto',\n              marker = dict(color = colors,line_color = 'white',line_width=2))\n\nlayout = go.Layout(title={'text': 'Average Outcome by BMI Categories','y':0.9,'x':0.5,\n                          'xanchor': 'center','yanchor': 'top'},\n                   xaxis = dict(title='BMI_Cat'),\n                   yaxis =dict(title='Outcome'),\n                   template = 'ggplot2')\n\nfig=go.Figure(data=data, layout=layout)\niplot(fig)","b431d7a4":"cat_summary(df, 'BMI_Cat')","79098c5c":"df[\"Glucose_Cat\"] = df[\"Glucose\"].apply(lambda x: \"Normal\" if x < 140 else (\"Prediabetes\" if 140 <= x <= 199 else \"Risk\"))\n\ndata = go.Bar(x = df.groupby('Glucose_Cat').agg({'Glucose':'mean'}).reset_index()['Glucose_Cat'],\n              y = df.groupby('Glucose_Cat').agg({'Glucose':'mean'}).reset_index()['Glucose'],\n              text = round(df.groupby('Glucose_Cat').agg({'Glucose':'mean'}).reset_index()['Glucose'],3),\n              textposition= 'auto',\n              marker = dict(color = colors,line_color = 'white',line_width=2))\n\nlayout = go.Layout(title={'text': 'Average Glucose by Glucose Categories',\n                          'y':0.9,\n                          'x':0.5,\n                          'xanchor': 'center',\n                          'yanchor': 'top'},\n                   xaxis = dict(title='Glucose_Cat'),\n                   yaxis =dict(title='Glucose'),\n                   template = 'ggplot2')\n\nfig=go.Figure(data=data, layout=layout)\niplot(fig)","d8200126":"data = go.Bar(x = df.groupby('Glucose_Cat').agg({'Outcome':'mean'}).reset_index()['Glucose_Cat'],\n              y = df.groupby('Glucose_Cat').agg({'Outcome':'mean'}).reset_index()['Outcome'],\n              text = round(df.groupby('Glucose_Cat').agg({'Outcome':'mean'}).reset_index()['Outcome'],3),\n              textposition= 'auto',\n              marker = dict(color = colors,line_color = 'white',line_width=2))\n\nlayout = go.Layout(title={'text': 'Average Outcome by Glucose Categories',\n                          'y':0.9,\n                          'x':0.5,\n                          'xanchor': 'center',\n                          'yanchor': 'top'},\n                   xaxis = dict(title='Glucose_Cat'),\n                   yaxis =dict(title='Outcome'),\n                   template = 'ggplot2')\n\nfig=go.Figure(data=data, layout=layout)\niplot(fig)","91860685":"cat_summary(df, 'Glucose_Cat')","b0429827":"test_stat, pvalue = proportions_ztest(count=[df.loc[df[\"Glucose_Cat\"] == 'Prediabetes', \"Outcome\"].sum(),\n                                             df.loc[df[\"Glucose_Cat\"] == 'Normal', \"Outcome\"].sum()],\n\n                                      nobs=[df.loc[df[\"Glucose_Cat\"] == 'Prediabetes', \"Outcome\"].shape[0],\n                                            df.loc[df[\"Glucose_Cat\"] == 'Normal', \"Outcome\"].shape[0]])\n\nprint('Test Stat = %.4f, p-value = %.4f' % (test_stat, pvalue), '\\n')\nif pvalue < 0.05:\n    print('Reject H0 (Null) Hypothesis, proportions are not the same')\nelse:\n    print('Cannot Reject H0 (Null) Hypothesis, proportions are the same')","f6ee35c9":"df.groupby(['BMI_Cat','Outcome','Glucose_Cat']).agg({'Insulin': ['mean', 'median']})","7d73dc92":"df['Insulin'] = df['Insulin'].fillna(df.groupby(['BMI_Cat','Outcome','Glucose_Cat'])['Insulin'].transform('median'))\n\ndf[\"Insulin_Cat\"] = df[\"Insulin\"].apply(lambda x: \"Normal\" if (16 <= x <= 166) else \"Abnormal\")\n\ndata = go.Bar(x = df.groupby('Insulin_Cat').agg({'Insulin':'mean'}).reset_index()['Insulin_Cat'],\n              y = df.groupby('Insulin_Cat').agg({'Insulin':'mean'}).reset_index()['Insulin'],\n              text = round(df.groupby('Insulin_Cat').agg({'Insulin':'mean'}).reset_index()['Insulin'],3),\n              textposition= 'auto',\n              marker = dict(color = colors,\n                            line_color = 'white',\n                            line_width=2))\n\nlayout = go.Layout(title={'text': 'Average Insulin by Insulin Categories','y':0.9,'x':0.5,\n                          'xanchor': 'center','yanchor': 'top'},\n                   xaxis = dict(title='Insulin_Cat'),\n                   yaxis =dict(title='Insulin'),\n                   template = 'ggplot2')\n\nfig=go.Figure(data=data, layout=layout)\niplot(fig)","68626795":"data = go.Bar(x = df.groupby('Insulin_Cat').agg({'Outcome':'mean'}).reset_index()['Insulin_Cat'],\n              y = df.groupby('Insulin_Cat').agg({'Outcome':'mean'}).reset_index()['Outcome'],\n              text = round(df.groupby('Insulin_Cat').agg({'Outcome':'mean'}).reset_index()['Outcome'],3),\n              textposition= 'auto',\n              marker = dict(color = colors,\n                            line_color = 'white',\n                            line_width=2))\n\nlayout = go.Layout(title={'text': 'Average Outcome by Insulin Categories','y':0.9,'x':0.5,\n                          'xanchor': 'center','yanchor': 'top'},\n                   xaxis = dict(title='Insulin_Cat'),\n                   yaxis =dict(title='Outcome'),\n                   template = 'ggplot2')\n\nfig=go.Figure(data=data, layout=layout)\niplot(fig)","d93c5180":"test_stat, pvalue = proportions_ztest(count=[df.loc[df[\"Insulin_Cat\"] == 'Abnormal', \"Outcome\"].sum(),\n                                             df.loc[df[\"Insulin_Cat\"] == 'Normal', \"Outcome\"].sum()],\n\n                                      nobs=[df.loc[df[\"Insulin_Cat\"] == 'Abnormal', \"Outcome\"].shape[0],\n                                            df.loc[df[\"Insulin_Cat\"] == 'Normal', \"Outcome\"].shape[0]])\n\nprint('Test Stat = %.4f, p-value = %.4f' % (test_stat, pvalue), '\\n')\nif pvalue < 0.05:\n    print('Reject H0 (Null) Hypothesis, proportions are not the same')\nelse:\n    print('Cannot Reject H0 (Null) Hypothesis, proportions are the same')","03281ec2":"cat_summary(df, 'Insulin_Cat')","f74d7565":"missing_values_table(df,na_name=False)","86a683e1":"df.groupby(['BMI_Cat','Outcome','Glucose_Cat','Insulin_Cat']).agg({'SkinThickness': ['mean', 'median']})","3f920e24":"df['SkinThickness'] = df['SkinThickness'].fillna(df.groupby(['BMI_Cat','Outcome','Glucose_Cat','Insulin_Cat'])['SkinThickness'].transform('mean'))","192b7cbc":"df['Preg_Rate'] = df['Pregnancies'] \/ df['Age']\n\ndata = go.Bar(x = df.groupby('Outcome').agg({'Preg_Rate':'mean'}).reset_index()['Outcome'],\n              y = df.groupby('Outcome').agg({'Preg_Rate':'mean'}).reset_index()['Preg_Rate'],\n              text = round(df.groupby('Outcome').agg({'Preg_Rate':'mean'}).reset_index()['Preg_Rate'],3),\n              textposition= 'auto',\n              marker = dict(color = colors,\n                            line_color = 'white',\n                            line_width=2))\n\nlayout = go.Layout(title={'text': 'Average Pregnancy Rate by Outcome','y':0.9,'x':0.5,\n                          'xanchor': 'center','yanchor': 'top'},\n                   xaxis = dict(title='Outcome'),\n                   yaxis =dict(title='Preg_Rate'),\n                   template = 'ggplot2')\n\nfig=go.Figure(data=data, layout=layout)\niplot(fig)","d1147dcc":"num_summary(df, 'Preg_Rate')","4d62b2c2":"df['GluIns_Rate'] = df['Glucose'] \/ df['Insulin']\n\ndata = go.Bar(x = df.groupby('Outcome').agg({'GluIns_Rate':'mean'}).reset_index()['Outcome'],\n              y = df.groupby('Outcome').agg({'GluIns_Rate':'mean'}).reset_index()['GluIns_Rate'],\n              text = round(df.groupby('Outcome').agg({'GluIns_Rate':'mean'}).reset_index()['GluIns_Rate'],3),\n              textposition= 'auto',\n              marker = dict(color = colors,\n                            line_color = 'white',\n                            line_width=2))\n\nlayout = go.Layout(title={'text': 'Average GluIns_Rate by Outcome','y':0.9,'x':0.5,\n                          'xanchor': 'center','yanchor': 'top'},\n                   xaxis = dict(title='Outcome'),\n                   yaxis =dict(title='GluIns_Rate'),\n                   template = 'ggplot2')\n\nfig=go.Figure(data=data, layout=layout)\niplot(fig)","07d47895":"num_summary(df, 'GluIns_Rate')","adea7c0c":"df.drop(df[df['GluIns_Rate'] == df['GluIns_Rate'].max()].index[0], inplace = True)\ndf = df.reset_index(drop = True)\nnum_summary(df, 'GluIns_Rate')","c5b9ed0b":"cat_cols, num_cols, cat_but_car = grab_col_names(df)","7bcefa94":"data = go.Bar(y = [var for var in df[num_cols].columns],\n              x = [round(shapiro(df[var])[0],3) for var in df[num_cols].columns],\n              text =['p-value: ' + str(round(shapiro(df[var])[1],3)) for var in df[num_cols].columns],\n              orientation='h',\n              textposition= 'inside',marker = dict(color = colors,\n                                                   line_color = 'white',\n                                                   line_width=2))\nlayout = go.Layout(title=dict(text='Shapiro-Wilks Test for Normality',\n                              y=0.9,\n                              x=0.5,\n                              xanchor= 'center',\n                              yanchor= 'top'),\n                   xaxis = dict(title='Test Stats'),\n                   template='ggplot2')\n\nfig=go.Figure(data=data, layout=layout)\niplot(fig)","d10cbe1b":"stat, p = levene(df[\"Pregnancies\"],df[\"Glucose\"],\n                 df[\"BloodPressure\"],df[\"SkinThickness\"],\n                 df[\"BMI\"],df[\"DiabetesPedigreeFunction\"],\n                 df[\"Age\"],df['Insulin'],df['Preg_Rate'],\n                 df['GluIns_Rate'],df[\"Outcome\"])\nprint('Test Stat: {}'.format(round(stat,3)))\nprint('p-value: {}'.format(round(p,3)))","15790fdb":"def one_hot_encoder(dataframe, categorical_cols, drop_first=False):\n    dataframe = pd.get_dummies(dataframe,\n                               columns = categorical_cols,\n                               drop_first = drop_first)\n    return dataframe\n\ndef label_encoder(dataframe, binary_col):\n    labelencoder = LabelEncoder()\n    dataframe[binary_col] = labelencoder.fit_transform(dataframe[binary_col])\n    return dataframe\n\nbinary_cols = [col for col in df.columns if df[col].dtype not in [int, float]\n               and df[col].nunique() == 2]\nprint('Binary Variables: {}'.format(binary_cols))\n\nohe_cols = [col for col in df.columns if 10 >= df[col].nunique() > 2]\nprint('Multiclass Variables: {}'.format(ohe_cols))","f0efd0e4":"fig = go.Figure(data=[go.Pie(labels=df['BMI_Cat'].value_counts().keys(),\n                             values=df['BMI_Cat'].value_counts().values)])\n\nfig.update_traces(hoverinfo='label',\n                  textinfo='value',\n                  hole = 0.4,\n                  textfont_size=22,\n                  textposition ='auto',\n                  marker=dict(colors=colors,\n                              line=dict(color='white')))\n\nfig.update_layout(title={'text': 'BMI Categories',\n                         'y':0.9,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},\n                  legend=dict(yanchor=\"top\",\n                              y=0.9,\n                              xanchor=\"left\",\n                              x=0.85),\n                  template='ggplot2')\n\niplot(fig)","f87ccb8a":"bmi_dict = {'Obesity': 3,\n           'Overweight' : 2,\n           'Healthy Weight': 1,\n           'Underweight' : 1}\n\nfor key in bmi_dict.keys():\n    df['BMI_Cat'] = df['BMI_Cat'].replace(key, bmi_dict[key])\n\ndf['BMI_Cat'] = df['BMI_Cat'].astype(int)\n\nfor col in binary_cols:\n    df = label_encoder(df, col)","809bf11b":"useless_cols = [col for col in df.columns if df[col].nunique() == 2 and\n                (df[col].value_counts() \/ len(df) < 0.01).any(axis=None)]\nprint('Number of useless variables: {}'.format(len(useless_cols)))","16dcc3e0":"df.drop(useless_cols, axis=1, inplace=True)\ncat_cols, num_cols, cat_but_car = grab_col_names(df)","084e7536":"pearson_corr(df)","5bfe2111":"spearman_corr(df)","0efa7d90":"desc_stats(df[num_cols])","f4e4cb49":"check_df(df)","4f69c2a5":"scaler = RobustScaler() #StandardScaler - RobustScaler\ndf[num_cols] = scaler.fit_transform(df[num_cols])\ndf.head()","a7831da3":"test_size = 0.2\nrandom_state = 42\n\ny = df['Outcome']\nX = df.drop(['Outcome'], axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y,\n                                                    test_size = test_size,\n                                                    random_state = random_state)","3a8e1bcb":"def initiate_clf(classifier):\n    \n    y_pred = classifier.fit(X_train, y_train).predict(X_test)\n    cm = confusion_matrix(y_test, y_pred)\n    Accuracy = accuracy_score(y_test, y_pred)\n    Roc = roc_auc_score(y_test, classifier.predict_proba(X_test)[:,1])\n    f1 = f1_score(y_test, y_pred)\n    recall = recall_score(y_test,y_pred)\n    precision = precision_score(y_test,y_pred)\n    metrics = pd.DataFrame({'Scores': [Accuracy, Roc, f1,recall, precision],\n                            'Metrics': ['Accuracy',\n                                        'ROC-AUC',\n                                        'F1-Score',\n                                        'Recall',\n                                        'Precision']})\n    \n    fig = make_subplots(rows = 1, cols = 2,\n                       subplot_titles = ('Scores','Confusion Matrix'))\n    fig.add_trace(go.Heatmap(z = cm,\n                             x = ['0','1'],\n                             y = ['0','1'],\n                             colorscale = 'Reds',\n                             showscale  = False,\n                             name = 'Confusion Matrix'),\n                  row = 1, col = 2)\n    fig.add_trace(go.Bar(x = [round(i,5) for i in metrics['Scores']],\n                         y = metrics['Metrics'],\n                         text = [round(i,5) for i in metrics['Scores']],\n                         orientation='h',\n                         textposition = 'inside',\n                         name = 'Scores',\n                         marker = dict(color = colors,\n                                       line_color = 'white',\n                                       line_width=1.5)),\n                  row = 1, col = 1)\n    fig.update_layout(title={'text': classifier.__class__.__name__ ,\n                             'y':0.9,\n                             'x':0.5,\n                             'xanchor': 'center',\n                             'yanchor': 'top'},\n                      template='ggplot2')\n    fig.update_xaxes(range=[0,1], row = 1, col = 1)\n    fig.update_xaxes(title_text=\"Predicted Label\", row=1, col=2)\n    fig.update_yaxes(title_text=\"True Label\", row=1, col=2)\n\n    iplot(fig)\n\nclassifiers = [GaussianNB(),\n               BernoulliNB(),\n               LogisticRegression(random_state = random_state),\n               RandomForestClassifier(random_state = random_state),\n               DecisionTreeClassifier(random_state = random_state),\n               SVC(random_state = random_state, probability = True),\n               KNeighborsClassifier(),\n               GradientBoostingClassifier(random_state = random_state),\n               LGBMClassifier(random_state = random_state),\n               XGBClassifier(random_state = random_state),\n               CatBoostClassifier(random_state = random_state, verbose = False)]\n\nfor clf in classifiers:\n    initiate_clf(clf)","c156c77a":"classifier = [DecisionTreeClassifier(random_state = random_state),\n              SVC(random_state = random_state, probability = True),\n              RandomForestClassifier(random_state = random_state),\n              LogisticRegression(random_state = random_state),\n              KNeighborsClassifier(),\n              GradientBoostingClassifier(random_state = random_state),\n              LGBMClassifier(random_state = random_state)]\n\nlda = LinearDiscriminantAnalysis(solver='svd',\n                                 n_components = 1)\ndata = go.Bar(x = [round(accuracy_score(y_test, i.fit(lda.fit_transform(X_train,y_train), y_train).predict(lda.transform(X_test))),2) for i in classifier],\n              y = [i.__class__.__name__ for i in classifier],\n              name = str([i.__class__.__name__ for i in classifier]),\n              text = [round(accuracy_score(y_test, i.fit(lda.fit_transform(X_train,y_train), y_train).predict(lda.transform(X_test))),4) for i in classifier],\n              textposition = 'inside',\n              orientation='h',\n              marker = dict(color = colors,\n                            line_color = 'white',\n                            line_width=2))\n\nlayout = go.Layout(title=dict(text='Linear Discriminant Analysis',\n                              y=0.9,\n                              x=0.5,\n                              xanchor= 'center',\n                              yanchor= 'top'),\n                   xaxis = dict(title='Accuracy Score'),\n                   template='ggplot2')\n\nfig=go.Figure(data=data, layout=layout)\nfig.update_xaxes(range=[0,1])\niplot(fig)","62878794":"fig = make_subplots(rows=1,\n                    cols=2,\n                    shared_yaxes=True,\n                    subplot_titles=('2 Components',\n                                    '3 Components'))\n\nfor a in [2,3]:\n    pca = PCA(n_components = a)\n    fig.add_trace(go.Bar(x = [round(accuracy_score(y_test, i.fit(pca.fit_transform(X_train,y_train), y_train).predict(pca.transform(X_test))),2) for i in classifier],\n                         y = [i.__class__.__name__ for i in classifier],\n                         name = str([i.__class__.__name__ for i in classifier]),\n                         text = [round(accuracy_score(y_test, i.fit(pca.fit_transform(X_train,y_train), y_train).predict(pca.transform(X_test))),4) for i in classifier],\n                         textposition = 'inside',\n                         orientation='h',\n                         showlegend=False,\n                         marker = dict(color = colors,\n                                       line_color = 'white',\n                                       line_width=2)),\n                  row=1,col=a-1)\n    \nfig.update_layout(title=dict(text='Principal Component Analysis',\n                             y=0.9,\n                             x=0.5,\n                             xanchor= 'center',\n                             yanchor= 'top'),\n                  template = 'ggplot2')\n\nfig.update_xaxes(title_text = 'Accuracy Score',\n                 range=[0,1],\n                 row=1,\n                 col=1)\nfig.update_xaxes(title_text = 'Accuracy Score',\n                 range=[0,1],\n                 row=1,\n                 col=2)\n\niplot(fig)","19ef6138":"lgbmc_param_grid = {'num_leaves': [27, 28, 29, 30, 31, 32],\n                    'learning_rate': [0.01, 0.03, 0.07, 0.1, 0.2]}\n\nlgbm_tuned = GridSearchCV(LGBMClassifier(random_state = random_state),\n                          param_grid = lgbmc_param_grid,\n                          cv = 5,\n                          scoring = 'f1',\n                          n_jobs = -1,\n                          verbose = 2)\n\ninitiate_clf(lgbm_tuned)\nprint('LGBMClassifier Best Parameters: {}'.format(lgbm_tuned.best_params_))","e23f8eb9":"def feature_imp(model, features):\n    feature_imp_df = pd.DataFrame({'Value': model.feature_importances_,\n                                   'Feature': X_train.columns})\n    feature_imp_df = feature_imp_df.sort_values('Value',ascending = True)\n    data = go.Bar(x = [i for i in feature_imp_df['Value']],\n              y = [i for i in feature_imp_df['Feature']],\n              name = 'Feature Importances',\n              text = [round(i,3) for i in feature_imp_df['Value']],\n              textposition = 'auto',\n              orientation='h',\n              marker = dict(color = colors,\n                            line_color = 'white',\n                            line_width=2))\n\n    layout = go.Layout(title=dict(text=model.__class__.__name__ + ' Feature Importances',\n                                  y=0.9,\n                                  x=0.5,\n                                  xanchor= 'center',\n                                  yanchor= 'top'),\n                       xaxis = dict(title='Importance'),\n                       width=750,\n                       height=600,\n                       template='ggplot2')\n    \n    fig=go.Figure(data=data, layout=layout)\n    iplot(fig)\n    \nfeature_imp(LGBMClassifier(**lgbm_tuned.best_params_).fit(X_train,y_train), X_train)","1a5a8403":"catboost_param_grid = {'loss_function': ['Logloss', 'CrossEntropy'],\n                       'iterations': [500, 700, 1000],\n                       'depth': [3, 4, 5],\n                       'learning_rate': [0.01, 0.03, 0.05, 0.1]}\n\ncatboost_tuned = GridSearchCV(CatBoostClassifier(random_state = random_state,\n                                                 verbose = False),\n                              param_grid = catboost_param_grid,\n                              cv = 5,\n                              scoring = 'f1',\n                              n_jobs = -1,\n                              verbose = 2)\n\ninitiate_clf(catboost_tuned)\nprint('CatBoost Best Parameters: {}'.format(catboost_tuned.best_params_))","35096509":"feature_imp(CatBoostClassifier(**catboost_tuned.best_params_,verbose=False).fit(X_train,y_train), X_train)","2e0e2ec5":"rf_param_grid = {'min_samples_split': [2, 3, 5],\n                 'n_estimators': [100, 300, 500],\n                 'max_features' : ['auto', 'sqrt', 'log2']}\n                 \nrf_tuned = GridSearchCV(RandomForestClassifier(random_state = random_state),\n                        param_grid = rf_param_grid,\n                        cv = 5,\n                        scoring = 'f1',\n                        n_jobs = -1,\n                        verbose = 2)\n\ninitiate_clf(rf_tuned)\nprint('Random Forest Best Parameters: {}'.format(rf_tuned.best_params_))","b7b687b5":"feature_imp(RandomForestClassifier(**rf_tuned.best_params_).fit(X_train,y_train), X_train)","d39e8881":"voting_clf = VotingClassifier(estimators=[('lgbm', LGBMClassifier(**lgbm_tuned.best_params_)),\n                                          ('rf', RandomForestClassifier(**rf_tuned.best_params_)),\n                                          ('catboost', CatBoostClassifier(**catboost_tuned.best_params_,\n                                                                          verbose=False))],\n                              voting='soft', weights=[0.25, 0.25, 0.5])\n\ninitiate_clf(voting_clf)","e2d4e784":"best_list = [LGBMClassifier(**lgbm_tuned.best_params_),\n             RandomForestClassifier(**rf_tuned.best_params_),\n             CatBoostClassifier(**catboost_tuned.best_params_,verbose=False),\n             voting_clf]\nfig = go.Figure()\nfor i in range(len(best_list)):\n    best_list[i].fit(X_train,y_train)\n    y_pred = best_list[i].predict_proba(X_test)[:, 1]\n    fpr, tpr, thresholds = roc_curve(y_test, y_pred)\n    \n    fig.add_trace(go.Scatter(x = fpr,\n                             y = tpr,\n                             mode='lines',\n                             fill= 'tonexty',\n                             marker = dict(color = colors[i]),\n                             name = best_list[i].__class__.__name__))\n\nfig.add_shape(type='line',\n              line=dict(color = 'black',\n                        dash='dash'),\n              x0=0,\n              x1=1,\n              y0=0,\n              y1=1)\n\nfig.update_yaxes(title_text = 'True Positive Rate',\n                 scaleanchor=\"x\",\n                 scaleratio=1)\nfig.update_xaxes(title_text = 'False Positive Rate',\n                 constrain='domain')\nfig.update_layout(title=dict(text='ROC Curves',\n                             y=0.9,\n                             x=0.5,\n                             xanchor= 'center',\n                             yanchor= 'top'),\n                  width=700,\n                  height=600,\n                  template = 'plotly_white')\niplot(fig)","3d1fdf3e":"<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">Spearman Rank Correlation Map<\/span>","941ede85":"<a id = \"9\"><\/a><h1 id=\"Classification Models\"><span class=\"label label-default\" style=\"background-color:#F06E5C; border-radius:12px; font-weight: bold; font-family:Verdana; font-size:22px; color:#FBFAFC; \">Base Models<\/span><\/h1>","00ab4cdf":"<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">Glucose<\/span>","c706787b":"<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">Levene's Test for Variance Homogeneity<\/span>","2a9085b6":"<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">Insulin<\/span>\n\nInsulin is a hormone (a chemical substance that acts as a messenger in the human body) that is secreted by an abdominal organ called the pancreas. It controls the breakdown of carbohydrates, fats and proteins in the body. It also guides the liver and muscles to store glucose and fat that can be used during periods of increased energy requirements and fasting. Insulin is a \u201ckey\u201d that unlocks the cell gates so that glucose from the blood enters the cells. The cells of the muscle and fat tissue are dependent solely on insulin for glucose uptake and use.","8d78f9f4":"<a id = \"3\"><\/a><h1 id=\"Libraries and Utilities\"><span class=\"label label-default\" style=\"background-color:#F06E5C; border-radius:12px; font-weight: bold; font-family:Verdana; font-size:22px; color:#FBFAFC; \">Libraries and Utilities<\/span><\/h1>","109e5308":"<a id = \"11\"><\/a><h1 id=\"Ensemble Learning\"><span class=\"label label-default\" style=\"background-color:#F06E5C; border-radius:12px; font-weight: bold; font-family:Verdana; font-size:22px; color:#FBFAFC; \">Ensemble Learning<\/span><\/h1>\n\n<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">Voting Classifier<\/span>","caeff28c":"<a id = \"10\"><\/a><h1 id=\"Hyperparameter Tuning\"><span class=\"label label-default\" style=\"background-color:#F06E5C; border-radius:12px; font-weight: bold; font-family:Verdana; font-size:22px; color:#FBFAFC; \">Hyperparameter Tuning<\/span><\/h1>\n\n<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">Tuned LightGBM<\/span>","0d0487d1":"<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">Useless Variables<\/span>","070ea4d7":"<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">Blood Pressure<\/span>","aede8c5e":"<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">Pregnancies<\/span>\n\nDiabetes can cause problems during pregnancy for women and their developing babies. Poor control of diabetes during pregnancy increases the chances for birth defects and other problems for the pregnancy. It can also cause serious complications for the woman. Proper health care before and during pregnancy can help prevent birth defects and other health problems.","6056c6dd":"<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">Linear Discriminant Analysis<\/span>","8751ff7c":"<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">Outliers<\/span>","428c0595":"<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">Glucose\/Insulin Ratio<\/span>\n\nThe G\/I ratio has become very popular since its first description in 1998 as an accurate index of insulin sensitivity in women with PCOS. The ratio of glucose to insulin is easily calculated, with lower values depicting higher degrees of insulin resistance. A G\/I ratio of less than 4.5 has been shown to be sensitive (95 percent) and specific (84 percent) for insulin resistance in a group of women with PCOS, when compared to a control group.","cb8c9c8f":"<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">Pairwise Relationships<\/span>","8c4e8fdd":"<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">Glucose<\/span>\n\n- A blood sugar level less than 140 mg\/dL (7.8 mmol\/L) is considered normal.\n- A blood sugar level from 140 to 199 mg\/dL (7.8 to 11.0 mmol\/L) is considered prediabetes. This is sometimes referred to as impaired glucose tolerance.\n- A blood sugar level of 200 mg\/dL (11.1 mmol\/L) or higher indicates type 2 diabetes.","8297aa40":"<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">Variable Types<\/span>","beccfe1c":"<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">Analysis of Numerical Variables<\/span>","ba8c0dd3":"<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">Train-Test Split<\/span>","54c581e0":"<a id = \"5\"><\/a><h1 id=\"Exploratory Data Analysis\"><span class=\"label label-default\" style=\"background-color:#F06E5C; border-radius:12px; font-weight: bold; font-family:Verdana; font-size:22px; color:#FBFAFC; \">Exploratory Data Analysis<\/span><\/h1>\n\n<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">Analysis of Categorical Variables<\/span>","d591dc6d":"<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">Tuned Random Forest<\/span>","bf43fd75":"<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">Tuned CatBoost<\/span>","3a10aa88":"<a id = \"1\"><\/a><h1 id=\"Introduction\"><span class=\"label label-default\" style=\"background-color:#F06E5C; border-radius:12px; font-weight: bold; font-family:Verdana; font-size:22px; color:#FBFAFC; \">Introduction<\/span><\/h1>\n\n**Diabetes mellitus (DM)**, commonly known as just **diabetes**, is a group of metabolic disorders characterized by a high blood sugar level over a prolonged period of time. Symptoms often include frequent urination, increased thirst and increased appetite. If left untreated, diabetes can cause many health complications. Acute complications can include diabetic ketoacidosis, hyperosmolar hyperglycemic state, or death. Serious long-term complications include cardiovascular disease, stroke, chronic kidney disease, foot ulcers, damage to the nerves, damage to the eyes and cognitive impairment.\n\n<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">Types of Diabetes<\/span> \n\nThere are three main types of diabetes: **type 1**, **type 2**, and **gestational diabetes** (diabetes while pregnant).\n\n<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">Type 1 Diabetes<\/span>   \n\nType 1 diabetes is thought to be caused by an autoimmune reaction (the body attacks itself by mistake) that stops your body from making insulin. Approximately 5-10% of the people who have diabetes have type 1. Symptoms of type 1 diabetes often develop quickly. It\u2019s usually diagnosed in children, teens, and young adults. If you have type 1 diabetes, you\u2019ll need to take insulin every day to survive. Currently, no one knows how to prevent type 1 diabetes.\n\n<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">Type 2 Diabetes<\/span> \n\nWith type 2 diabetes, your body doesn\u2019t use insulin well and can\u2019t keep blood sugar at normal levels. About 90-95% of people with diabetes have type 2. It develops over many years and is usually diagnosed in adults (but more and more in children, teens, and young adults). You may not notice any symptoms, so it\u2019s important to get your blood sugar tested if you\u2019re at risk. Type 2 diabetes can be prevented or delayed with healthy lifestyle changes, such as losing weight, eating healthy food, and being active.\n\n<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">Gestational Diabetes<\/span>\n\nGestational diabetes develops in pregnant women who have never had diabetes. If you have gestational diabetes, your baby could be at higher risk for health problems. Gestational diabetes usually goes away after your baby is born but increases your risk for type 2 diabetes later in life. Your baby is more likely to have obesity as a child or teen, and more likely to develop type 2 diabetes later in life too.","d03479b5":"<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">BMI<\/span>","c227d6d6":"<a id = \"12\"><\/a><h1 id=\"Credits\"><span class=\"label label-default\" style=\"background-color:#F06E5C; border-radius:12px; font-weight: bold; font-family:Verdana; font-size:22px; color:#FBFAFC; \">Credits<\/span><\/h1>\n\nhttps:\/\/www.cdc.gov\/obesity\/adult\/defining.html\n\nhttps:\/\/www.cdc.gov\/pregnancy\/diabetes.html\n\nhttps:\/\/medicine.musc.edu\/departments\/family-medicine\/research\/rcmar\/insulin-resistance\n\nhttps:\/\/www.medicinenet.com\/what_is_a_high_insulin_level\/article.htm\n\nhttps:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.RandomForestClassifier.html\n\nhttps:\/\/lightgbm.readthedocs.io\/en\/latest\/pythonapi\/lightgbm.LGBMClassifier.html","5d1596a8":"<p style=\"padding: 10px;\n          color:#F06E5C;\n          font-weight: bold;\n          text-align: center;\n          font-size:260%;\">\nDiabetes EDA & Prediction\n    \n\n<\/p>\n\n![image.png](attachment:c50ca681-390b-4af5-9b15-88c7fdf0f7ca.png)\n\n<div class=\"inner_cell\">\n<div class=\"text_cell_render border-box-sizing rendered_html\">\n<p><\/p><div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n  <h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" role=\"tab\" aria-controls=\"home\" style = \"border:2px solid #F06E5C; background-color:#F06E5C;font-weight: bold; color:white; font-family:Verdana;\">Notebook Content<\/h3>\n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#1\" role=\"tab\" aria-controls=\"profile\" target=\"_self\" style = \"color:#F06E5C;font-weight: bold; font-family:Verdana;font-size:16px;\">Introduction<span class=\"badge badge-primary badge-pill\">1<\/span><\/a>\n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#2\" role=\"tab\" aria-controls=\"messages\" target=\"_self\" style = \"color:#F06E5C;font-weight: bold; font-family:Verdana;font-size:16px;\">About Dataset<span class=\"badge badge-primary badge-pill\">2<\/span><\/a>\n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#3\" role=\"tab\" aria-controls=\"settings\" target=\"_self\" style = \"color:#F06E5C;font-weight: bold; font-family:Verdana;font-size:16px;\">Libraries and Utilities<span class=\"badge badge-primary badge-pill\">3<\/span><\/a>\n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#4\" role=\"tab\" aria-controls=\"settings\" target=\"_self\" style = \"color:#F06E5C;font-weight: bold; font-family:Verdana;font-size:16px;\">Load and Check Data<span class=\"badge badge-primary badge-pill\">4<\/span><\/a> \n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#5\" role=\"tab\" aria-controls=\"settings\" target=\"_self\" style = \"color:#F06E5C;font-weight: bold; font-family:Verdana;font-size:16px;\">Exploratory Data Analysis<span class=\"badge badge-primary badge-pill\">5<\/span><\/a>\n    <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#6\" role=\"tab\" aria-controls=\"settings\" target=\"_self\" style = \"color:#F06E5C;font-weight: bold; font-family:Verdana;font-size:16px;\">Data Preprocessing<span class=\"badge badge-primary badge-pill\">6<\/span><\/a>\n    <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#7\" role=\"tab\" aria-controls=\"settings\" target=\"_self\" style = \"color:#F06E5C;font-weight: bold; font-family:Verdana;font-size:16px;\">Feature Extraction<span class=\"badge badge-primary badge-pill\">7<\/span><\/a>\n    <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#8\" role=\"tab\" aria-controls=\"settings\" target=\"_self\" style = \"color:#F06E5C;font-weight: bold; font-family:Verdana;font-size:16px;\">Preparations<span class=\"badge badge-primary badge-pill\">8<\/span><\/a>\n    <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#9\" role=\"tab\" aria-controls=\"settings\" target=\"_self\" style = \"color:#F06E5C;font-weight: bold; font-family:Verdana;font-size:16px;\">Base Models<span class=\"badge badge-primary badge-pill\">9<\/span><\/a>\n    <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#10\" role=\"tab\" aria-controls=\"settings\" target=\"_self\" style = \"color:#F06E5C;font-weight: bold; font-family:Verdana;font-size:16px;\">Hyperparameter Tuning<span class=\"badge badge-primary badge-pill\">10<\/span><\/a>\n    <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#11\" role=\"tab\" aria-controls=\"settings\" target=\"_self\" style = \"color:#F06E5C;font-weight: bold; font-family:Verdana;font-size:16px;\">Ensemble Learning<span class=\"badge badge-primary badge-pill\">11<\/span><\/a>\n    <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#12\" role=\"tab\" aria-controls=\"settings\" target=\"_self\" style = \"color:#F06E5C;font-weight: bold; font-family:Verdana;font-size:16px;\">Credits<span class=\"badge badge-primary badge-pill\">12<\/span><\/a>\n\n<\/div>\n<\/div>\n<\/div>","ef233e78":"<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">Principal Component Analysis<\/span>","fd53e680":"<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">Pearson Correlation Map<\/span>","1c352416":"<a id = \"8\"><\/a><h1 id=\"Preparations\"><span class=\"label label-default\" style=\"background-color:#F06E5C; border-radius:12px; font-weight: bold; font-family:Verdana; font-size:22px; color:#FBFAFC; \">Preparations<\/span><\/h1>\n\n<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">Encoding<\/span>","7a175b97":"<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">ROC Curves<\/span>","6d07c523":"<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">Shapiro-Wilks Test for Normality<\/span>","a24c737d":"<a id = \"7\"><\/a><h1 id=\"Feature Extraction\"><span class=\"label label-default\" style=\"background-color:#F06E5C; border-radius:12px; font-weight: bold; font-family:Verdana; font-size:22px; color:#FBFAFC; \">Feature Extraction<\/span><\/h1>\n\n<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">Adult Body Mass Index<\/span>\n\nBMI is a person\u2019s weight in kilograms divided by the square of height in meters. A high BMI can indicate high body fatness.\n\n- If your BMI is less than 18.5, it falls within the **underweight** range.\n- If your BMI is 18.5 to <25, it falls within the **healthy weight** range.\n- If your BMI is 25.0 to <30, it falls within the **overweight** range.\n- If your BMI is 30.0 or higher, it falls within the **obesity** range.","a7df02a4":"<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">Descriptive Statistics<\/span>","73012363":"<a id = \"2\"><\/a><h1 id=\"About Dataset\"><span class=\"label label-default\" style=\"background-color:#F06E5C; border-radius:12px; font-weight: bold; font-family:Verdana; font-size:22px; color:#FBFAFC; \">About Dataset<\/span><\/h1>\n\n<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">Context<\/span>\n\nThis dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective of the dataset is to diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset. Several constraints were placed on the selection of these instances from a larger database. In particular, all patients here are females at least 21 years old of Pima Indian heritage.\n\n<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">Content<\/span>\n\nThe datasets consists of several medical predictor variables and one target variable, <code>Outcome<\/code>. Predictor variables includes the number of pregnancies the patient has had, their BMI, insulin level, age, and so on.\n\n<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">Variable Description<\/span>\n\n<span style=\"font-weight: bold; font-family:Verdana; font-size:14px; color:#F06E5C; \">Pregnancies: <\/span> Number of times pregnant   \n<span style=\"font-weight: bold; font-family:Verdana; font-size:14px; color:#F06E5C; \">Glucose: <\/span> Plasma glucose concentration a 2 hours in an oral glucose tolerance test   \n<span style=\"font-weight: bold; font-family:Verdana; font-size:14px; color:#F06E5C; \">BloodPressure: <\/span> Diastolic blood pressure (mm Hg)    \n<span style=\"font-weight: bold; font-family:Verdana; font-size:14px; color:#F06E5C; \">SkinThickness: <\/span> Triceps skin fold thickness (mm)   \n<span style=\"font-weight: bold; font-family:Verdana; font-size:14px; color:#F06E5C; \">Insulin: <\/span> 2-Hour serum insulin (mu U\/ml)   \n<span style=\"font-weight: bold; font-family:Verdana; font-size:14px; color:#F06E5C; \">BMI: <\/span> Body mass index (weight in kg\/(height in m)^2)   \n<span style=\"font-weight: bold; font-family:Verdana; font-size:15px; color:#F06E5C; \">DiabetesPedigreeFunction: <\/span> Diabetes pedigree function    \n<span style=\"font-weight: bold; font-family:Verdana; font-size:15px; color:#F06E5C; \">Age: <\/span> Age (years)      \n<span style=\"font-weight: bold; font-family:Verdana; font-size:15px; color:#F06E5C; \">Outcome: <\/span> Class variable (0 or 1) 268 of 768 are 1, the others are 0  \n","d693a32d":"<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">Scaling<\/span>","5e2ac614":"<a id = \"6\"><\/a><h1 id=\"Data Preprocessing\"><span class=\"label label-default\" style=\"background-color:#F06E5C; border-radius:12px; font-weight: bold; font-family:Verdana; font-size:22px; color:#FBFAFC; \">Data Preprocessing<\/span><\/h1>\n\n<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">Missing Values<\/span>","6b915739":"<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">If you liked this notebook, please upvote \ud83d\ude0a  <\/span>\n\n<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">If you have any suggestions or questions, feel free to comment!<\/span>\n      \n<span style=\"font-weight: bold; font-family:Verdana; font-size:18px; color:#F06E5C; \">Best Wishes!<\/span>    \n\n","33ff7161":"<a id = \"4\"><\/a><h1 id=\"Load and Check Data\"><span class=\"label label-default\" style=\"background-color:#F06E5C; border-radius:12px; font-weight: bold; font-family:Verdana; font-size:22px; color:#FBFAFC; \">Load and Check Data<\/span><\/h1>"}}