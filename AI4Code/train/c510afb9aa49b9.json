{"cell_type":{"bb5ab2bb":"code","62ad323d":"code","9c47d78b":"code","9ac55226":"code","86c008c6":"code","62ea3852":"code","789c2c6f":"code","d23909ed":"code","4f46ee45":"code","8ed6f4c9":"code","11feb1d1":"code","20254139":"code","410a081a":"code","3cf01e9c":"code","d53e86bd":"code","3f34e3ba":"code","327f8ad2":"code","fe0e34c6":"code","5e48f044":"code","79094f7a":"code","6099783d":"code","bd2526e8":"code","86ff3034":"code","fa406aa0":"code","fae87964":"code","b61280c8":"code","369749d8":"code","b394fa81":"code","d0b57e07":"code","77e8c18b":"code","12496776":"code","6bad2052":"code","0c7b46fc":"code","5d4f78db":"code","a8c7a514":"code","c1ead085":"code","bc4ca9a6":"code","c69dd5c5":"code","53a22aa4":"code","cd58c5ab":"code","cf207b2d":"code","f8a8c999":"code","87bd162e":"code","7d0bb0f5":"code","605633e7":"code","e81785dd":"code","b0cd7d69":"code","2c86ddf9":"code","060b384f":"code","a0867d78":"code","29bb9b61":"code","3f913087":"code","3f8b8949":"code","204c3cc4":"code","eeea3535":"code","387145af":"code","7f9b74f3":"code","fd0e3c4b":"code","20b20a92":"code","1a702311":"code","f6135b55":"code","fcb1b64a":"code","89b5540f":"code","f4d745e6":"code","c9bc48c1":"code","2489df59":"code","e43828bc":"code","afa29f10":"code","7728f2a8":"code","0a60b821":"code","65d4df2a":"code","c0f4abab":"code","a002b2ff":"code","5e767556":"code","2033c9c3":"code","c9569e83":"code","42d39785":"code","51eb144d":"code","32c4c038":"code","0a449e21":"code","eb1e9f37":"code","d32cd29a":"code","d33a30e1":"code","70920c77":"code","6a62fb0f":"code","a36aeb87":"code","8ae8b0d7":"code","43906354":"code","a9ea0c93":"code","2ea9a779":"code","0178f7da":"code","f9a94b0d":"markdown","ecbb4e1d":"markdown","e409e647":"markdown","0908fd51":"markdown","20302d07":"markdown","fd98ea2e":"markdown","5c955adf":"markdown","05601073":"markdown","74f5c9ad":"markdown","33eae51e":"markdown","cec74272":"markdown","b7e655c7":"markdown","0e5e989e":"markdown","3ce06787":"markdown","99873551":"markdown","78949ff5":"markdown","02506494":"markdown","9d784a73":"markdown","6232f80f":"markdown","b665b5cc":"markdown","ae092351":"markdown","713594fe":"markdown","52816402":"markdown","9e9eef16":"markdown","6dd48320":"markdown","f56e0589":"markdown","97d3321a":"markdown","36327f41":"markdown","1c357ac8":"markdown","9bc78a2b":"markdown","5f26804f":"markdown","0cc1df43":"markdown","0953bc7b":"markdown","89bdaa37":"markdown","c082a40d":"markdown","89176b58":"markdown","8841bd03":"markdown","911216cf":"markdown","843a8258":"markdown","96968daa":"markdown","c092c101":"markdown","114379ef":"markdown","817243e9":"markdown","8241c7cc":"markdown","45627778":"markdown","abc93da3":"markdown","ae88d8ce":"markdown","28188cf9":"markdown","9b0f4640":"markdown","b4697d2d":"markdown","a162207a":"markdown","61e2e92e":"markdown","71359013":"markdown","0beab5b6":"markdown","314aea3b":"markdown","2978a5f2":"markdown","36c6073f":"markdown","f0ada11d":"markdown","03f61f92":"markdown","609361bd":"markdown","80fa60a6":"markdown","14e06b14":"markdown","2b1f757f":"markdown","1318fe95":"markdown","a62ce12d":"markdown","c04e0627":"markdown","a3bdffbb":"markdown","a3fa5a5b":"markdown","dcac36a0":"markdown"},"source":{"bb5ab2bb":"import numpy as np\nimport pandas as pd\npd.set_option('max_columns', 105)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\n%matplotlib inline\nsns.set()\n\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n#warnings.filterwarnings(\"ignore\")\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))","62ad323d":"# setting the number of cross validations used in the Model part \nnr_cv = 5\n\n# switch for using log values for SalePrice and features     \nuse_logvals = 1    \n# target used for correlation \ntarget = 'SalePrice_Log'\n    \n# only columns with correlation above this threshold value  \n# are used for the ML Regressors in Part 3\nmin_val_corr = 0.4    \n    \n# switch for dropping columns that are similar to others already used and show a high correlation to these     \ndrop_similar = 1\n","9c47d78b":"def get_best_score(grid):\n    \n    best_score = np.sqrt(-grid.best_score_)\n    print(best_score)    \n    print(grid.best_params_)\n    print(grid.best_estimator_)\n    \n    return best_score","9ac55226":"def print_cols_large_corr(df, nr_c, targ) :\n    corr = df.corr()\n    corr_abs = corr.abs()\n    print (corr_abs.nlargest(nr_c, targ)[targ])","86c008c6":"def plot_corr_matrix(df, nr_c, targ) :\n    \n    corr = df.corr()\n    corr_abs = corr.abs()\n    cols = corr_abs.nlargest(nr_c, targ)[targ].index\n    cm = np.corrcoef(df[cols].values.T)\n\n    plt.figure(figsize=(nr_c\/1.5, nr_c\/1.5))\n    sns.set(font_scale=1.25)\n    sns.heatmap(cm, linewidths=1.5, annot=True, square=True, \n                fmt='.2f', annot_kws={'size': 10}, \n                yticklabels=cols.values, xticklabels=cols.values\n               )\n    plt.show()","62ea3852":"df_train = pd.read_csv(\"..\/input\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/test.csv\")","789c2c6f":"print(df_train.shape)\nprint(\"*\"*50)\nprint(df_test.shape)","d23909ed":"print(df_train.info())\nprint(\"*\"*50)\nprint(df_test.info())","4f46ee45":"df_train.head()","8ed6f4c9":"df_train.describe()","11feb1d1":"df_test.head()","20254139":"df_test.describe()","410a081a":"sns.distplot(df_train['SalePrice']);\n#skewness and kurtosis\nprint(\"Skewness: %f\" % df_train['SalePrice'].skew())\nprint(\"Kurtosis: %f\" % df_train['SalePrice'].kurt())","3cf01e9c":"df_train['SalePrice_Log'] = np.log(df_train['SalePrice'])\n\nsns.distplot(df_train['SalePrice_Log']);\n# skewness and kurtosis\nprint(\"Skewness: %f\" % df_train['SalePrice_Log'].skew())\nprint(\"Kurtosis: %f\" % df_train['SalePrice_Log'].kurt())\n# dropping old column\ndf_train.drop('SalePrice', axis= 1, inplace=True)","d53e86bd":"numerical_feats = df_train.dtypes[df_train.dtypes != \"object\"].index\nprint(\"Number of Numerical features: \", len(numerical_feats))\n\ncategorical_feats = df_train.dtypes[df_train.dtypes == \"object\"].index\nprint(\"Number of Categorical features: \", len(categorical_feats))","3f34e3ba":"print(df_train[numerical_feats].columns)\nprint(\"*\"*100)\nprint(df_train[categorical_feats].columns)","327f8ad2":"df_train[numerical_feats].head()","fe0e34c6":"df_train[categorical_feats].head()","5e48f044":"total = df_train.isnull().sum().sort_values(ascending=False)\npercent = (df_train.isnull().sum()\/df_train.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)","79094f7a":"# columns where NaN values have meaning e.g. no pool etc.\ncols_fillna = ['PoolQC','MiscFeature','Alley','Fence','MasVnrType','FireplaceQu',\n               'GarageQual','GarageCond','GarageFinish','GarageType', 'Electrical',\n               'KitchenQual', 'SaleType', 'Functional', 'Exterior2nd', 'Exterior1st',\n               'BsmtExposure','BsmtCond','BsmtQual','BsmtFinType1','BsmtFinType2',\n               'MSZoning', 'Utilities']\n\n# replace 'NaN' with 'None' in these columns\nfor col in cols_fillna:\n    df_train[col].fillna('None',inplace=True)\n    df_test[col].fillna('None',inplace=True)","6099783d":"total = df_train.isnull().sum().sort_values(ascending=False)\npercent = (df_train.isnull().sum()\/df_train.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(5)","bd2526e8":"# fillna with mean for the remaining columns: LotFrontage, GarageYrBlt, MasVnrArea\ndf_train.fillna(df_train.mean(), inplace=True)\ndf_test.fillna(df_test.mean(), inplace=True)","86ff3034":"total = df_train.isnull().sum().sort_values(ascending=False)\npercent = (df_train.isnull().sum()\/df_train.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(5)","fa406aa0":"df_train.isnull().sum().sum()","fae87964":"df_test.isnull().sum().sum()","b61280c8":"for col in numerical_feats:\n    print('{:15}'.format(col), \n          'Skewness: {:05.2f}'.format(df_train[col].skew()) , \n          '   ' ,\n          'Kurtosis: {:06.2f}'.format(df_train[col].kurt())  \n         )","369749d8":"sns.distplot(df_train['GrLivArea']);\n#skewness and kurtosis\nprint(\"Skewness: %f\" % df_train['GrLivArea'].skew())\nprint(\"Kurtosis: %f\" % df_train['GrLivArea'].kurt())","b394fa81":"sns.distplot(df_train['LotArea']);\n#skewness and kurtosis\nprint(\"Skewness: %f\" % df_train['LotArea'].skew())\nprint(\"Kurtosis: %f\" % df_train['LotArea'].kurt())","d0b57e07":"for df in [df_train, df_test]:\n    df['GrLivArea_Log'] = np.log(df['GrLivArea'])\n    df.drop('GrLivArea', inplace= True, axis = 1)\n    df['LotArea_Log'] = np.log(df['LotArea'])\n    df.drop('LotArea', inplace= True, axis = 1)\n    \n    \n    \nnumerical_feats = df_train.dtypes[df_train.dtypes != \"object\"].index\n   ","77e8c18b":"sns.distplot(df_train['GrLivArea_Log']);\n#skewness and kurtosis\nprint(\"Skewness: %f\" % df_train['GrLivArea_Log'].skew())\nprint(\"Kurtosis: %f\" % df_train['GrLivArea_Log'].kurt())","12496776":"sns.distplot(df_train['LotArea_Log']);\n#skewness and kurtosis\nprint(\"Skewness: %f\" % df_train['LotArea_Log'].skew())\nprint(\"Kurtosis: %f\" % df_train['LotArea_Log'].kurt())","6bad2052":"nr_rows = 12\nnr_cols = 3\n\nfig, axs = plt.subplots(nr_rows, nr_cols, figsize=(nr_cols*3.5,nr_rows*3))\n\nli_num_feats = list(numerical_feats)\nli_not_plot = ['Id', 'SalePrice', 'SalePrice_Log']\nli_plot_num_feats = [c for c in list(numerical_feats) if c not in li_not_plot]\n\n\nfor r in range(0,nr_rows):\n    for c in range(0,nr_cols):  \n        i = r*nr_cols+c\n        if i < len(li_plot_num_feats):\n            sns.regplot(df_train[li_plot_num_feats[i]], df_train[target], ax = axs[r][c])\n            stp = stats.pearsonr(df_train[li_plot_num_feats[i]], df_train[target])\n            #axs[r][c].text(0.4,0.9,\"title\",fontsize=7)\n            str_title = \"r = \" + \"{0:.2f}\".format(stp[0]) + \"      \" \"p = \" + \"{0:.2f}\".format(stp[1])\n            axs[r][c].set_title(str_title,fontsize=11)\n            \nplt.tight_layout()    \nplt.show()   ","0c7b46fc":"df_train = df_train.drop(\n    df_train[(df_train['OverallQual']==10) & (df_train['SalePrice_Log']<12.3)].index)","5d4f78db":"df_train = df_train.drop(\n    df_train[(df_train['GrLivArea_Log']>8.3) & (df_train['SalePrice_Log']<12.5)].index)","a8c7a514":"corr = df_train.corr()\ncorr_abs = corr.abs()\n\nnr_num_cols = len(numerical_feats)\nser_corr = corr_abs.nlargest(nr_num_cols, target)[target]\n\ncols_abv_corr_limit = list(ser_corr[ser_corr.values > min_val_corr].index)\ncols_bel_corr_limit = list(ser_corr[ser_corr.values <= min_val_corr].index)","c1ead085":"print(ser_corr)\nprint(\"*\"*30)\nprint(\"List of numerical features with r above min_val_corr :\")\nprint(cols_abv_corr_limit)\nprint(\"*\"*30)\nprint(\"List of numerical features with r below min_val_corr :\")\nprint(cols_bel_corr_limit)\n","bc4ca9a6":"for catg in list(categorical_feats) :\n    print(df_train[catg].value_counts())\n    print('#'*50)","c69dd5c5":"li_cat_feats = list(categorical_feats)\nnr_rows = 15\nnr_cols = 3\n\nfig, axs = plt.subplots(nr_rows, nr_cols, figsize=(nr_cols*4,nr_rows*3))\n\nfor r in range(0,nr_rows):\n    for c in range(0,nr_cols):  \n        i = r*nr_cols+c\n        if i < len(li_cat_feats):\n            sns.boxplot(x=li_cat_feats[i], y=target, data=df_train, ax = axs[r][c])\n    \nplt.tight_layout()    \nplt.show()   ","53a22aa4":"catg_strong_corr = [ 'MSZoning', 'Neighborhood', 'Condition2', 'MasVnrType', 'ExterQual', \n                     'BsmtQual','CentralAir', 'Electrical', 'KitchenQual', 'SaleType']\n\ncatg_weak_corr = ['Street', 'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig', \n                  'LandSlope', 'Condition1',  'BldgType', 'HouseStyle', 'RoofStyle', \n                  'RoofMatl', 'Exterior1st', 'Exterior2nd', 'ExterCond', 'Foundation', \n                  'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'Heating', \n                  'HeatingQC', 'Functional', 'FireplaceQu', 'GarageType', 'GarageFinish', \n                  'GarageQual', 'GarageCond', 'PavedDrive', 'PoolQC', 'Fence', 'MiscFeature', \n                  'SaleCondition' ]\n      ","cd58c5ab":"nr_feats = len(cols_abv_corr_limit)","cf207b2d":"plot_corr_matrix(df_train, nr_feats, target)","f8a8c999":"id_test = df_test['Id']\n\nto_drop_num  = cols_bel_corr_limit\nto_drop_catg = catg_weak_corr\n\ncols_to_drop = ['Id'] + to_drop_num + to_drop_catg \n\nfor df in [df_train, df_test]:\n    df.drop(cols_to_drop, inplace= True, axis = 1)\n","87bd162e":"catg_list = catg_strong_corr.copy()\ncatg_list.remove('Neighborhood')\n\nfor catg in catg_list :\n    #sns.catplot(x=catg, y=target, data=df_train, kind='boxen')\n    sns.violinplot(x=catg, y=target, data=df_train)\n    plt.show()\n    #sns.boxenplot(x=catg, y=target, data=df_train)\n    #bp = df_train.boxplot(column=[target], by=catg)","7d0bb0f5":"fig, ax = plt.subplots()\nfig.set_size_inches(16, 5)\nsns.violinplot(x='Neighborhood', y=target, data=df_train, ax=ax)\nplt.xticks(rotation=45)\nplt.show()","605633e7":"for catg in catg_list :\n    g = df_train.groupby(catg)[target].mean()\n    print(g)","e81785dd":"# 'MSZoning'\nmsz_catg2 = ['RM', 'RH']\nmsz_catg3 = ['RL', 'FV'] \n\n\n# Neighborhood\nnbhd_catg2 = ['Blmngtn', 'ClearCr', 'CollgCr', 'Crawfor', 'Gilbert', 'NWAmes', 'Somerst', 'Timber', 'Veenker']\nnbhd_catg3 = ['NoRidge', 'NridgHt', 'StoneBr']\n\n# Condition2\ncond2_catg2 = ['Norm', 'RRAe']\ncond2_catg3 = ['PosA', 'PosN'] \n\n# SaleType\nSlTy_catg1 = ['Oth']\nSlTy_catg3 = ['CWD']\nSlTy_catg4 = ['New', 'Con']\n\n\n#[]","b0cd7d69":"for df in [df_train, df_test]:\n    \n    df['MSZ_num'] = 1  \n    df.loc[(df['MSZoning'].isin(msz_catg2) ), 'MSZ_num'] = 2    \n    df.loc[(df['MSZoning'].isin(msz_catg3) ), 'MSZ_num'] = 3        \n    \n    df['NbHd_num'] = 1       \n    df.loc[(df['Neighborhood'].isin(nbhd_catg2) ), 'NbHd_num'] = 2    \n    df.loc[(df['Neighborhood'].isin(nbhd_catg3) ), 'NbHd_num'] = 3    \n\n    df['Cond2_num'] = 1       \n    df.loc[(df['Condition2'].isin(cond2_catg2) ), 'Cond2_num'] = 2    \n    df.loc[(df['Condition2'].isin(cond2_catg3) ), 'Cond2_num'] = 3    \n    \n    df['Mas_num'] = 1       \n    df.loc[(df['MasVnrType'] == 'Stone' ), 'Mas_num'] = 2 \n    \n    df['ExtQ_num'] = 1       \n    df.loc[(df['ExterQual'] == 'TA' ), 'ExtQ_num'] = 2     \n    df.loc[(df['ExterQual'] == 'Gd' ), 'ExtQ_num'] = 3     \n    df.loc[(df['ExterQual'] == 'Ex' ), 'ExtQ_num'] = 4     \n   \n    df['BsQ_num'] = 1          \n    df.loc[(df['BsmtQual'] == 'Gd' ), 'BsQ_num'] = 2     \n    df.loc[(df['BsmtQual'] == 'Ex' ), 'BsQ_num'] = 3     \n \n    df['CA_num'] = 0          \n    df.loc[(df['CentralAir'] == 'Y' ), 'CA_num'] = 1    \n\n    df['Elc_num'] = 1       \n    df.loc[(df['Electrical'] == 'SBrkr' ), 'Elc_num'] = 2 \n\n\n    df['KiQ_num'] = 1       \n    df.loc[(df['KitchenQual'] == 'TA' ), 'KiQ_num'] = 2     \n    df.loc[(df['KitchenQual'] == 'Gd' ), 'KiQ_num'] = 3     \n    df.loc[(df['KitchenQual'] == 'Ex' ), 'KiQ_num'] = 4      \n    \n    df['SlTy_num'] = 2       \n    df.loc[(df['SaleType'].isin(SlTy_catg1) ), 'SlTy_num'] = 1  \n    df.loc[(df['SaleType'].isin(SlTy_catg3) ), 'SlTy_num'] = 3  \n    df.loc[(df['SaleType'].isin(SlTy_catg4) ), 'SlTy_num'] = 4  \n  ","2c86ddf9":"new_col_num = ['MSZ_num', 'NbHd_num', 'Cond2_num', 'Mas_num', 'ExtQ_num', 'BsQ_num', 'CA_num', 'Elc_num', 'KiQ_num', 'SlTy_num']\n\nnr_rows = 4\nnr_cols = 3\n\nfig, axs = plt.subplots(nr_rows, nr_cols, figsize=(nr_cols*3.5,nr_rows*3))\n\nfor r in range(0,nr_rows):\n    for c in range(0,nr_cols):  \n        i = r*nr_cols+c\n        if i < len(new_col_num):\n            sns.regplot(df_train[new_col_num[i]], df_train[target], ax = axs[r][c])\n            stp = stats.pearsonr(df_train[new_col_num[i]], df_train[target])\n            str_title = \"r = \" + \"{0:.2f}\".format(stp[0]) + \"      \" \"p = \" + \"{0:.2f}\".format(stp[1])\n            axs[r][c].set_title(str_title,fontsize=11)\n            \nplt.tight_layout()    \nplt.show()   ","060b384f":"catg_cols_to_drop = ['Neighborhood' , 'Condition2', 'MasVnrType', 'ExterQual', 'BsmtQual','CentralAir', 'Electrical', 'KitchenQual', 'SaleType']\n\ncorr1 = df_train.corr()\ncorr_abs_1 = corr1.abs()\n\nnr_all_cols = len(df_train)\nser_corr_1 = corr_abs_1.nlargest(nr_all_cols, target)[target]\n\nprint(ser_corr_1)\ncols_bel_corr_limit_1 = list(ser_corr_1[ser_corr_1.values <= min_val_corr].index)\n\n\nfor df in [df_train, df_test] :\n    df.drop(catg_cols_to_drop, inplace= True, axis = 1)\n    df.drop(cols_bel_corr_limit_1, inplace= True, axis = 1)    ","a0867d78":"corr2 = df_train.corr()\ncorr_abs_2 = corr2.abs()\n\nnr_all_cols = len(df_train)\nser_corr_2 = corr_abs_2.nlargest(nr_all_cols, target)[target]\n\nprint(ser_corr_2)","29bb9b61":"df_train.head()","3f913087":"df_test.head()","3f8b8949":"corr = df_train.corr()\ncorr_abs = corr.abs()\n\nnr_all_cols = len(df_train)\nprint (corr_abs.nlargest(nr_all_cols, target)[target])","204c3cc4":"nr_feats=len(df_train.columns)\nplot_corr_matrix(df_train, nr_feats, target)","eeea3535":"cols = corr_abs.nlargest(nr_all_cols, target)[target].index\ncols = list(cols)\n\nif drop_similar == 1 :\n    for col in ['GarageArea','1stFlrSF','TotRmsAbvGrd','GarageYrBlt'] :\n        if col in cols: \n            cols.remove(col)","387145af":"cols = list(cols)\nprint(cols)","7f9b74f3":"feats = cols.copy()\nfeats.remove('SalePrice_Log')\n\nprint(feats)","fd0e3c4b":"df_train_ml = df_train[feats].copy()\ndf_test_ml  = df_test[feats].copy()\n\ny = df_train[target]","20b20a92":"\"\"\"\nall_data = pd.concat((df_train[feats], df_test[feats]))\n\nli_get_dummies = ['OverallQual', 'NbHd_num', 'GarageCars','ExtQ_num', 'KiQ_num',\n                  'BsQ_num', 'FullBath', 'Fireplaces', 'MSZ_num']\nall_data = pd.get_dummies(all_data, columns=li_get_dummies, drop_first=True)\n\ndf_train_ml = all_data[:df_train.shape[0]]\ndf_test_ml  = all_data[df_train.shape[0]:]\n\"\"\"","1a702311":"from sklearn.preprocessing import StandardScaler\n\nsc = StandardScaler()\ndf_train_ml_sc = sc.fit_transform(df_train_ml)\ndf_test_ml_sc = sc.transform(df_test_ml)","f6135b55":"df_train_ml_sc = pd.DataFrame(df_train_ml_sc)\ndf_train_ml_sc.head()","fcb1b64a":"X = df_train_ml.copy()\ny = df_train[target]\nX_test = df_test_ml.copy()\n\nX_sc = df_train_ml_sc.copy()\ny_sc = df_train[target]\nX_test_sc = df_test_ml_sc.copy()\n\nX.info()\nX_test.info()","89b5540f":"X.head()","f4d745e6":"X_sc.head()","c9bc48c1":"X_test.head()","2489df59":"from sklearn.model_selection import GridSearchCV\nscore_calc = 'neg_mean_squared_error'","e43828bc":"from sklearn.linear_model import LinearRegression\n\nlinreg = LinearRegression()\nparameters = {'fit_intercept':[True,False], 'normalize':[True,False], 'copy_X':[True, False]}\ngrid_linear = GridSearchCV(linreg, parameters, cv=nr_cv, verbose=1 , scoring = score_calc)\ngrid_linear.fit(X, y)\n\nsc_linear = get_best_score(grid_linear)","afa29f10":"linreg_sc = LinearRegression()\nparameters = {'fit_intercept':[True,False], 'normalize':[True,False], 'copy_X':[True, False]}\ngrid_linear_sc = GridSearchCV(linreg_sc, parameters, cv=nr_cv, verbose=1 , scoring = score_calc)\ngrid_linear_sc.fit(X_sc, y)\n\nsc_linear_sc = get_best_score(grid_linear_sc)","7728f2a8":"linregr_all = LinearRegression()\n#linregr_all.fit(X_train_all, y_train_all)\nlinregr_all.fit(X, y)\npred_linreg_all = linregr_all.predict(X_test)\npred_linreg_all[pred_linreg_all < 0] = pred_linreg_all.mean()","0a60b821":"sub_linreg = pd.DataFrame()\nsub_linreg['Id'] = id_test\nsub_linreg['SalePrice'] = pred_linreg_all\n#sub_linreg.to_csv('linreg.csv',index=False)","65d4df2a":"from sklearn.linear_model import Ridge\n\nridge = Ridge()\nparameters = {'alpha':[0.001,0.005,0.01,0.1,0.5,1], 'normalize':[True,False], 'tol':[1e-06,5e-06,1e-05,5e-05]}\ngrid_ridge = GridSearchCV(ridge, parameters, cv=nr_cv, verbose=1, scoring = score_calc)\ngrid_ridge.fit(X, y)\n\nsc_ridge = get_best_score(grid_ridge)","c0f4abab":"ridge_sc = Ridge()\nparameters = {'alpha':[0.001,0.005,0.01,0.1,0.5,1], 'normalize':[True,False], 'tol':[1e-06,5e-06,1e-05,5e-05]}\ngrid_ridge_sc = GridSearchCV(ridge_sc, parameters, cv=nr_cv, verbose=1, scoring = score_calc)\ngrid_ridge_sc.fit(X_sc, y)\n\nsc_ridge_sc = get_best_score(grid_ridge_sc)","a002b2ff":"pred_ridge_all = grid_ridge.predict(X_test)","5e767556":"from sklearn.linear_model import Lasso\n\nlasso = Lasso()\nparameters = {'alpha':[1e-03,0.01,0.1,0.5,0.8,1], 'normalize':[True,False], 'tol':[1e-06,1e-05,5e-05,1e-04,5e-04,1e-03]}\ngrid_lasso = GridSearchCV(lasso, parameters, cv=nr_cv, verbose=1, scoring = score_calc)\ngrid_lasso.fit(X, y)\n\nsc_lasso = get_best_score(grid_lasso)\n\npred_lasso = grid_lasso.predict(X_test)","2033c9c3":"from sklearn.linear_model import ElasticNet\n\nenet = ElasticNet()\nparameters = {'alpha' :[0.1,1.0,10], 'max_iter' :[1000000], 'l1_ratio':[0.04,0.05], \n              'fit_intercept' : [False,True], 'normalize':[True,False], 'tol':[1e-02,1e-03,1e-04]}\ngrid_enet = GridSearchCV(enet, parameters, cv=nr_cv, verbose=1, scoring = score_calc)\ngrid_enet.fit(X_sc, y_sc)\n\nsc_enet = get_best_score(grid_enet)\n\npred_enet = grid_enet.predict(X_test_sc)","c9569e83":"from sklearn.linear_model import SGDRegressor\n\nsgd = SGDRegressor()\nparameters = {'max_iter' :[10000], 'alpha':[1e-05], 'epsilon':[1e-02], 'fit_intercept' : [True]  }\ngrid_sgd = GridSearchCV(sgd, parameters, cv=nr_cv, verbose=1, scoring = score_calc)\ngrid_sgd.fit(X_sc, y_sc)\n\nsc_sgd = get_best_score(grid_sgd)\n\npred_sgd = grid_sgd.predict(X_test_sc)","42d39785":"from sklearn.tree import DecisionTreeRegressor\n\nparam_grid = { 'max_depth' : [7,8,9,10] , 'max_features' : [11,12,13,14] ,\n               'max_leaf_nodes' : [None, 12,15,18,20] ,'min_samples_split' : [20,25,30],\n                'presort': [False,True] , 'random_state': [5] }\n            \ngrid_dtree = GridSearchCV(DecisionTreeRegressor(), param_grid, cv=nr_cv, refit=True, verbose=1, scoring = score_calc)\ngrid_dtree.fit(X, y)\n\nsc_dtree = get_best_score(grid_dtree)\n\npred_dtree = grid_dtree.predict(X_test)","51eb144d":"dtree_pred = grid_dtree.predict(X_test)\nsub_dtree = pd.DataFrame()\nsub_dtree['Id'] = id_test\nsub_dtree['SalePrice'] = dtree_pred\n#sub_dtree.to_csv('dtreeregr.csv',index=False)","32c4c038":"from sklearn.ensemble import RandomForestRegressor\n\nparam_grid = {'min_samples_split' : [3,4,6,10], 'n_estimators' : [70,100], 'random_state': [5] }\ngrid_rf = GridSearchCV(RandomForestRegressor(), param_grid, cv=nr_cv, refit=True, verbose=1, scoring = score_calc)\ngrid_rf.fit(X, y)\n\nsc_rf = get_best_score(grid_rf)","0a449e21":"pred_rf = grid_rf.predict(X_test)\n\nsub_rf = pd.DataFrame()\nsub_rf['Id'] = id_test\nsub_rf['SalePrice'] = pred_rf \n\nif use_logvals == 1:\n    sub_rf['SalePrice'] = np.exp(sub_rf['SalePrice']) \n\nsub_rf.to_csv('rf.csv',index=False)","eb1e9f37":"sub_rf.head(10)","d32cd29a":"from sklearn.neighbors import KNeighborsRegressor\n\nparam_grid = {'n_neighbors' : [3,4,5,6,7,10,15] ,    \n              'weights' : ['uniform','distance'] ,\n              'algorithm' : ['ball_tree', 'kd_tree', 'brute']}\n\ngrid_knn = GridSearchCV(KNeighborsRegressor(), param_grid, cv=nr_cv, refit=True, verbose=1, scoring = score_calc)\ngrid_knn.fit(X_sc, y_sc)\n\nsc_knn = get_best_score(grid_knn)","d33a30e1":"pred_knn = grid_knn.predict(X_test_sc)\n\nsub_knn = pd.DataFrame()\nsub_knn['Id'] = id_test\nsub_knn['SalePrice'] = pred_knn\n\nif use_logvals == 1:\n    sub_knn['SalePrice'] = np.exp(sub_knn['SalePrice']) \n\nsub_knn.to_csv('knn.csv',index=False)","70920c77":"sub_knn.head(10)","6a62fb0f":"from sklearn.gaussian_process import GaussianProcessRegressor\nfrom sklearn.gaussian_process.kernels import DotProduct, ConstantKernel\n\ngpr = GaussianProcessRegressor(random_state=5, alpha=5e-9, \n                                n_restarts_optimizer=0, \n                               optimizer='fmin_l_bfgs_b', \n                               copy_X_train=True)\n\nparam_grid = {'normalize_y' : [True,False],\n              'kernel' : [DotProduct(), ConstantKernel(1.0, (1e-3, 1e3))] }\n\ngrid_gpr = GridSearchCV(gpr, param_grid, cv=nr_cv, verbose=1, scoring = score_calc)\ngrid_gpr.fit(X_sc, y_sc)\n\nsc_gpr = get_best_score(grid_gpr)","a36aeb87":"pred_gpr = grid_gpr.predict(X_test_sc)\n\nsub_gpr = pd.DataFrame()\nsub_gpr['Id'] = id_test\nsub_gpr['SalePrice'] = pred_gpr\n\nif use_logvals == 1:\n    sub_gpr['SalePrice'] = np.exp(sub_gpr['SalePrice']) \n\nsub_gpr.to_csv('gpr.csv',index=False)","8ae8b0d7":"list_scores = [sc_linear, sc_ridge, sc_lasso, sc_enet,\n               sc_sgd, sc_dtree, sc_rf, sc_knn, sc_gpr]\nlist_regressors = ['Linear','Ridge','Lasso','ElaNet','SGD','DTr','RF','KNN','GPR']","43906354":"fig, ax = plt.subplots()\nfig.set_size_inches(10,7)\nsns.barplot(x=list_regressors, y=list_scores, ax=ax)\nplt.ylabel('RMSE')\nplt.show()","a9ea0c93":"predictions = {'Linear': pred_linreg_all, 'Ridge': pred_ridge_all, 'Lasso': pred_lasso,\n               'ElaNet': pred_enet, 'SGD': pred_sgd, 'DTr': pred_dtree, 'RF': pred_rf,\n               'KNN': pred_knn, 'GPR': pred_gpr}\ndf_predictions = pd.DataFrame(data=predictions) \ndf_predictions.corr()","2ea9a779":"plt.figure(figsize=(7, 7))\nsns.set(font_scale=1.25)\nsns.heatmap(df_predictions.corr(), linewidths=1.5, annot=True, square=True, \n                fmt='.2f', annot_kws={'size': 10}, \n                yticklabels=df_predictions.columns , xticklabels=df_predictions.columns\n            )\nplt.show()","0178f7da":"sub_mean = pd.DataFrame()\nsub_mean['Id'] = id_test\nsub_mean['SalePrice'] = np.round( (pred_lasso + pred_enet + pred_rf + pred_sgd) \/ 4.0 ) \nsub_mean['SalePrice'] = sub_mean['SalePrice'].astype(float)\nsub_mean.to_csv('mean.csv',index=False)","f9a94b0d":"## **House Prices: EDA to ML (Beginner)**  \n\n**This is my first Kaggle for the House Prices competition.**  \n**It includes the following approaches and techniques:**\n\n* EDA with Pandas and Seaborn\n* Find features with strong correlation to target\n* Data Wrangling, convert categorical to numerical\n* apply the basic Regression models of sklearn \n* use gridsearchCV to find the best parameters for each model\n* compare the performance of the Regressors and choose best one","ecbb4e1d":"# Part 3: Scikit-learn basic regression models and comparison of results\n\n**Test simple sklearn models and compare by metrics**\n\n**We test the following Regressors from scikit-learn:**  \nLinearRegression  \nRidge  \nLasso  \nElastic Net  \nStochastic Gradient Descent  \nDecisionTreeRegressor  \nRandomForestRegressor  \nSVR ","e409e647":"**Find columns with strong correlation to target**  \nOnly those with r > min_val_corr are used in the ML Regressors in Part 3  \nThe value for min_val_corr can be chosen in global settings","0908fd51":"**For some more advanced approaches on this task inluding Feature Engineering, Pipelines and methods like Stacking, Boosting and Voting have a look at [my second House Prices kernel](https:\/\/www.kaggle.com\/dejavu23\/house-prices-plotly-pipelines-and-ensembles)**","20302d07":"**Settings and switches**\n\n**Here one can choose settings for optimal performance and runtime.**  \n**For example, nr_cv sets the number of cross validations used in GridsearchCV, and**  \n**min_val_corr is the minimum value for the correlation coefficient to the target (only features with larger correlation will be used).** ","fd98ea2e":"The performance of all applied Regressors is very similar, except for Decision Tree which has larger RMSE than the other models.","5c955adf":"There are few columns with quite large correlation to SalePrice (NbHd_num, ExtQ_num, BsQ_num, KiQ_num).  \nThese will probably be useful for optimal performance of the Regressors in part 3.","05601073":"### RandomForestRegressor","74f5c9ad":"**columns and correlation before dropping**","33eae51e":"### Plots of relation to target for all numerical features","cec74272":"**mean of best models**","b7e655c7":"### Numerical and Categorical features","0e5e989e":"**Creating Datasets for ML algorithms**","3ce06787":"### Correlation of model results","99873551":"### Elastic Net","78949ff5":"**Load data**","02506494":"### SGDRegressor  \nLinear model fitted by minimizing a regularized empirical loss with SGD. SGD stands for Stochastic Gradient Descent: the gradient of the loss is estimated each sample at a time and the model is updated along the way with a decreasing strength schedule (aka learning rate). The regularizer is a penalty added to the loss function that shrinks model parameters towards the zero vector using either the squared euclidean norm L2 or the absolute norm L1 or a combination of both (Elastic Net). ","9d784a73":"**List of features used for the Regressors in Part 3**","6232f80f":"### Correlation matrix 1\n**Features with largest correlation to SalePrice_Log**  \nall numerical features with correlation coefficient above threshold ","b665b5cc":"### Lasso","ae092351":"**Some useful functions**","713594fe":"**References**  \n\n* **[Kaggle: Comprehensive data exploration with Python](https:\/\/www.kaggle.com\/pmarcelino\/comprehensive-data-exploration-with-python)**\n* **[Udemy: Python for Data Science and Machine Learning Bootcamp](https:\/\/www.udemy.com\/python-for-data-science-and-machine-learning-bootcamp\/)**\n* **[Data School: Machine learning in Python with scikit-learn](https:\/\/www.youtube.com\/playlist?list=PL5-da3qGB5ICeMbQuqbbCOQWcS6OYBr5A)**\n\n\nTODO\n\n* Conclusions\n* complete documentation","52816402":"### List of features with missing values","9e9eef16":"**Outliers**","6dd48320":"**When you finished studying this beginner level kernel, continue with [my second House Prices kernel.](https:\/\/www.kaggle.com\/dejavu23\/house-prices-plotly-pipelines-and-ensembles)**  \n**There I explore some more advanced approaches on this task inluding Feature Engineering, Pipelines and methods like Stacking, Boosting and Voting**","f56e0589":"### DecisionTreeRegressor","97d3321a":"### Correlation Matrix 2 : All features with strong correlation to SalePrice","36327f41":"**Conclusion from EDA on numerical columns:**\n\nWe see that for some features like 'OverallQual' there is a strong linear correlation (0.79) to the target.  \nFor other features like 'MSSubClass' the correlation is very weak.  \nFor this kernel I decided to use only those features for prediction that have a correlation larger than a threshold value to SalePrice.  \nThis threshold value can be choosen in the global settings : min_val_corr  \n\nWith the default threshold for min_val_corr = 0.4, these features are dropped in Part 2, Data Wrangling:  \n'Id', 'MSSubClass', 'LotArea', 'OverallCond', 'BsmtFinSF2', 'BsmtUnfSF',  'LowQualFinSF',  'BsmtFullBath', 'BsmtHalfBath', 'HalfBath',   \n'BedroomAbvGr', 'KitchenAbvGr', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal', 'MoSold', 'YrSold'\n\nWe also see that the entries for some of the numerical columns are in fact categorical values.  \nFor example, the numbers for 'OverallQual' and 'MSSubClass' represent a certain group for that feature ( see data description txt)","1c357ac8":"As we see, the target variable SalePrice is not normally distributed.  \nThis can reduce the performance of the ML regression models because some assume normal distribution,   \nsee [sklearn info on preprocessing](http:\/\/scikit-learn.org\/stable\/modules\/preprocessing.html)  \nTherfore we make a log transformation, the resulting distribution looks much better.  ","9bc78a2b":"### List of categorical features and their unique values","5f26804f":"### shape, info, head and describe","0cc1df43":"df train has 81 columns (79 features + id and target SalePrice) and 1460 entries (number of rows or house sales)  \ndf test has 80 columns (79 features + id) and 1459 entries  \nThere is lots of info that is probably related to the SalePrice like the area, the neighborhood, the condition and quality.   \nMaybe other features are not so important for predicting the target, also there might be a strong correlation for some of the features (like GarageCars and GarageArea).\nFor some columns many values are missing: only 7 values for Pool QC in df train and 3 in df test","0953bc7b":"**Dropping the converted categorical columns and the new numerical columns with weak correlation**","89bdaa37":"### Linear Regression","c082a40d":"**Filling missing values**  \nFor a few columns there is lots of NaN entries.  \nHowever, reading the data description we find this is not missing data:  \nFor PoolQC, NaN is not missing data but means no pool, likewise for Fence, FireplaceQu etc.  ","89176b58":"**The notebook is organized as follows:**\n\n* **[Part 0: Imports, Settings and switches, Global functions](#Part-0-:-Imports,-Settings,-Functions)**  \nimport libraries  \nsettings for number of cross validations  \ndefine functions that are used often\n\n* **[Part 1: Exploratory Data Analysis](#Part-1:-Exploratory-Data-Analysis)**  \n1.1 Get an overview of the features (numerical and categorical) and first look on the target variable SalePrice  \n[shape, info, head and describe](#shape,-info,-head-and-describe)  \n[Distribution of the target variable SalePrice](#The-target-variable-:-Distribution-of-SalePrice)  \n[Numerical and Categorical features](#Numerical-and-Categorical-features)  \n[List of features with missing values](#List-of-features-with-missing-values) and Filling missing values  \n[log transform](#log-transform)  \n1.2 Relation of all features to target SalePrice  \n[Seaborn regression plots for numerical features](#Plots-of-relation-to-target-for-all-numerical-features)  \n[List of numerical features and their correlation coefficient to target](#List-of-numerical-features-and-their-correlation-coefficient-to-target)  \n[Seaborn boxplots for categorical features](#Relation-to-SalePrice-for-all-categorical-features)  \n[List of categorical features and their unique values](#List-of-categorical-features-and-their-unique-values)  \n1.3 Determine the columns that show strong correlation to target  \n[Correlation matrix 1](#Correlation-matrix-1) : all numerical features  \nDetermine features with largest correlation to SalePrice_Log\n\n\n* **[Part 2: Data wrangling](#Part-2:-Data-wrangling)**  \n[Dropping all columns with weak correlation to SalePrice](#Dropping-all-columns-with-weak-correlation-to-SalePrice)  \n[Convert categorical columns to numerical](#Convert-categorical-columns-to-numerical)  \n[Checking correlation to SalePrice for the new numerical columns](#Checking-correlation-to-SalePrice-for-the-new-numerical-columns)  \nuse only features with strong correlation to target  \n[Correlation Matrix 2 (including converted categorical columns)](#Correlation-Matrix-2-:-All-features-with-strong-correlation-to-SalePrice)  \ncreate datasets for ML algorithms  \nOne Hot Encoder  \n[StandardScaler](#StandardScaler)\n\n* **[Part 3: Scikit-learn basic regression models and comparison of results](#Part-3:-Scikit-learn-basic-regression-models-and-comparison-of-results)**  \nimplement GridsearchCV with RMSE metric for Hyperparameter tuning  \nfor these models from sklearn:  \n[Linear Regression](#Linear-Regression)  \n[Ridge](#Ridge)  \n[Lasso](#Lasso)  \n[Elastic Net](#Elastic-Net)  \n[Stochastic Gradient Descent](#SGDRegressor)  \n[DecisionTreeRegressor](#DecisionTreeRegressor)  \n[Random Forest Regressor](#RandomForestRegressor)  \n[KNN Regressor](#KNN-Regressor)  \nbaed on RMSE metric, compare performance of the regressors with their optimized parameters,  \nthen explore correlation of the predictions and make submission with mean of best models  \nComparison plot: [RMSE of all models](#Comparison-plot:-RMSE-of-all-models)  \n[Correlation of model results](#Correlation-of-model-results)  \nMean of best models\n\n\nNote on scores:  \nSubmissions are evaluated on Root-Mean-Squared-Error (RMSE) between the logarithm of the predicted value and the logarithm of the observed sales price. (Taking logs means that errors in predicting expensive houses and cheap houses will affect the result equally.)","8841bd03":"**List of all features with strong correlation to SalePrice_Log**  \nafter dropping all coumns with weak correlation","911216cf":"### GaussianProcessRegressor","843a8258":"### log transform\nLike the target variable, also some of the feature values are not normally distributed and it is therefore better to use log values in df_train and df_test. Checking for skewness and kurtosis:","96968daa":"Numerical columns : drop similar and low correlation\n\nCategorical columns : Transform  to numerical","c092c101":"### KNN Regressor","114379ef":"**columns and correlation after dropping**","817243e9":"**Conclusions**","8241c7cc":"### Ridge","45627778":"![](https:\/\/www.reno.gov\/Home\/ShowImage?id=7739&t=635620964226970000)\n\n**Competition Description from Kaggle**  \nWith 79 explanatory variables describing (almost) every aspect of residential homes in Ames, Iowa, this competition challenges you to predict the final price of each home.\n\n**Data description**  \nThis is a detailed description of the 79 features and their entries, quite important for this competition.  \nYou can download the txt file here: [**download**](https:\/\/www.kaggle.com\/c\/5407\/download\/data_description.txt)","abc93da3":"# Part 0 : Imports, Settings, Functions","ae88d8ce":"For the first five models, the predictions show a very high correlation to each other (very close to 1.00).  \nOnly for Random Forest and Decision Tree, the results  are less correlated with the other Regressors. ","28188cf9":"# Part 1: Exploratory Data Analysis","9b0f4640":"**Check for Multicollinearity**\n\nStrong correlation of these features to other, similar features:\n\n'GrLivArea_Log' and 'TotRmsAbvGrd'\n\n'GarageCars' and 'GarageArea'\n\n'TotalBsmtSF' and '1stFlrSF'\n\n'YearBuilt' and 'GarageYrBlt'\n\n**Of those features we drop the one that has smaller correlation coeffiecient to Target.**","b4697d2d":"### StandardScaler","a162207a":"**Of those features with the largest correlation to SalePrice, some also are correlated strongly to each other.**\n\n\n**To avoid failures of the ML regression models due to multicollinearity, these are dropped in part 2.**\n\n\n**This is optional and controlled by the switch drop_similar (global settings)**","61e2e92e":"# Part 2: Data wrangling\n\n**Drop all columns with only small correlation to SalePrice**  \n**Transform Categorical to numerical **  \n**Handling columns with missing data**  \n**Log values**  \n**Drop all columns with strong correlation to similar features**  ","71359013":"### List of numerical features and their correlation coefficient to target","0beab5b6":"## 1.2 Relation of features to target (SalePrice_log)","314aea3b":"## 1.1 Overview of features and relation to target\n\nLet's get a first overview of the train and test dataset  \nHow many rows and columns are there?  \nWhat are the names of the features (columns)?  \nWhich features are numerical, which are categorical?  \nHow many values are missing?  \nThe **shape** and **info** methods answer these questions  \n**head** displays some rows of the dataset  \n**describe** gives a summary of the statistics (only for numerical columns)","2978a5f2":"### The target variable : Distribution of SalePrice","36c6073f":"**Imports**","f0ada11d":"### Comparison plot: RMSE of all models","03f61f92":"TODO","609361bd":"### Convert categorical columns to numerical  \nFor those categorcial features where the EDA with boxplots seem to show a strong dependence of the SalePrice on the category, we transform the columns to numerical.\nTo investigate the relation of the categories to SalePrice in more detail, we make violinplots for these features \nAlso, we look at the mean of SalePrice as function of category.","80fa60a6":"**Missing values in train data ?**","14e06b14":"### Relation to SalePrice for all categorical features","2b1f757f":"### Checking correlation to SalePrice for the new numerical columns","1318fe95":"**Conclusion from EDA on categorical columns:**\n\nFor many of the categorical there is no strong relation to the target.  \nHowever, for some fetaures it is easy to find a strong relation.  \nFrom the figures above these are : 'MSZoning', 'Neighborhood', 'Condition2', 'MasVnrType', 'ExterQual', 'BsmtQual','CentralAir', 'Electrical', 'KitchenQual', 'SaleType'\nAlso for the categorical features, I use only those that show a strong relation to SalePrice. \nSo the other columns are dropped when creating the ML dataframes in Part 2 :  \n 'Street', 'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig', 'LandSlope', 'Condition1',  'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl',\n'Exterior1st', 'Exterior2nd', 'ExterCond', 'Foundation', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'Heating', 'HeatingQC', \n'Functional', 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond', 'PavedDrive', 'PoolQC', 'Fence', 'MiscFeature', 'SaleCondition' \n ","a62ce12d":"**Missing values in test data ?**","c04e0627":"**Combine train and test data**  \nfor one hot encoding (use pandas get dummies) of all categorical features  \nuncommenting the following cell increases the number of features  \nup to now, all models in Part 3 are optimized for not applying one hot encoder  \nwhen applied, GridSearchCV needs to be rerun","a3bdffbb":"**new dataframes**","a3fa5a5b":"**Model tuning and selection with GridSearchCV**","dcac36a0":"### Dropping all columns with weak correlation to SalePrice"}}