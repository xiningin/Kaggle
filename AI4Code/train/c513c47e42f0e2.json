{"cell_type":{"9b682a17":"code","301a80a5":"code","4bd26af6":"code","b9a9f7ad":"code","ff68d2aa":"code","cb62bbab":"code","73d01c02":"code","91049c5f":"code","1fac4013":"code","c3366be0":"code","5b1534f7":"code","bfc09aba":"code","1d40a738":"code","2fb89191":"code","ad0c8070":"code","b055b125":"code","3c15dfa1":"code","d50c84c8":"code","98f9f08d":"code","acf31a90":"code","808ac9b6":"code","8ed3bf4d":"code","721c848f":"code","7072bb8f":"code","499c3e71":"code","b74cc38a":"code","26f17927":"code","531906a1":"code","6ccfa088":"code","aa8be0bb":"code","09029c89":"code","3a5b772f":"code","371e3fe4":"code","a8b5953a":"code","f3285d69":"code","e15bd44f":"code","925a4bfe":"code","5b845509":"code","0b877667":"code","c6f7fd1e":"code","e27290ee":"markdown","f927c522":"markdown","1d96f423":"markdown","b9c24629":"markdown","40298e93":"markdown"},"source":{"9b682a17":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/titanic\"))\n\n# Any results you write to the current directory are saved as output.","301a80a5":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain.head()","4bd26af6":"test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest.head()","b9a9f7ad":"train.info()","ff68d2aa":"test.info()","cb62bbab":"all = pd.concat([train, test], sort = False)\nall.info()","73d01c02":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","91049c5f":"all.info()","1fac4013":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or all['Embarked'].value_counts()","c3366be0":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","5b1534f7":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","bfc09aba":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","1d40a738":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","2fb89191":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","ad0c8070":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","b055b125":"all.info()","3c15dfa1":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","d50c84c8":"all.info()","98f9f08d":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","acf31a90":"all_dummies = pd.get_dummies(all_1)\nall_dummies.info()","808ac9b6":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","8ed3bf4d":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","721c848f":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101)","7072bb8f":"from sklearn.ensemble import RandomForestClassifier","499c3e71":"RF_Model = RandomForestClassifier()","b74cc38a":"#from sklearn.model_selection import GridSearchCV","26f17927":"#Using max_depth, criterion will suffice for DT Models, rest all will remain constant \n#parameters = {'n_estimators' : (10,30,50,70,90,100)\n#              , 'criterion' : ('gini', 'entropy')\n#              , 'max_depth' : (3,5,7,9,10)\n#              , 'max_features' : ('auto', 'sqrt')\n#              , 'min_samples_split' : (2,4,6)\n#              #, 'min_weight_fraction_leaf' : (0.0,0.1,0.2,0.3)\n#             }","531906a1":"#RF_grid  = GridSearchCV(RandomForestClassifier(n_jobs = -1, oob_score= False), param_grid = parameters, cv = 3, verbose = True)","6ccfa088":"#RF_grid_model = RF_grid.fit(X_train, y_train)","aa8be0bb":"#RF_grid_model.best_estimator_","09029c89":"RF_Model = RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n                       criterion='gini', max_depth=7, max_features='sqrt',\n                       max_leaf_nodes=None, max_samples=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=6,\n                       min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=-1,\n                       oob_score=False, random_state=None, verbose=0,\n                       warm_start=False)","3a5b772f":"RF_Model.fit(X_train, y_train)","371e3fe4":"predictions = RF_Model.predict(X_test)\npredictions","a8b5953a":"print(f'Test : {RF_Model.score(X_test, y_test):.3f}')\nprint(f'Train : {RF_Model.score(X_train, y_train):.3f}')","f3285d69":"all_test.head()","e15bd44f":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","925a4bfe":"t_pred = RF_Model.predict(TestForPred).astype(int)","5b845509":"PassengerId = all_test['PassengerId']","0b877667":"RF_Sub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nRF_Sub.head()","c6f7fd1e":"RF_Sub.to_csv(\"RF_Class_Submission.csv\", index = False)","e27290ee":"****Train\/Test Split","f927c522":"****Check Accuracy","1d96f423":"****Final Predictions","b9c24629":"****Extra Features:","40298e93":"### Build Random Forest"}}