{"cell_type":{"d7f1676c":"code","6fb09865":"code","5a248fb5":"code","2e29f93f":"code","68838347":"code","cce0f053":"markdown","3f88fdb4":"markdown","a3d0c867":"markdown","10d534e3":"markdown"},"source":{"d7f1676c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6fb09865":"# Importing libraries in Python\nimport sklearn.datasets as datasets\nimport pandas as pd\n\n# Loading the iris dataset\niris=datasets.load_iris()\n\n# Forming the iris dataframe\ndf=pd.DataFrame(iris.data, columns=iris.feature_names)\nprint(df.head(5))\n\ny=iris.target\nprint(y)","5a248fb5":"# Defining the decision tree algorithm\nfrom sklearn.tree import DecisionTreeClassifier\ndtree=DecisionTreeClassifier()\ndtree.fit(df,y)\n\nprint('Decision Tree Classifer Created')","2e29f93f":"# Install required libraries\n!pip install pydotplus\n!apt-get install graphviz -y","68838347":"# Import necessary libraries for graph viz\nfrom six import StringIO\nfrom IPython.display import Image  \nfrom sklearn.tree import export_graphviz\nimport pydotplus\n\n# Visualize the graph\ndot_data = StringIO()\nexport_graphviz(dtree, out_file=dot_data, feature_names=iris.feature_names,  \n                filled=True, rounded=True,\n                special_characters=True)\ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \nImage(graph.create_png())","cce0f053":"Now let us define the Decision Tree Algorithm","3f88fdb4":"# Problem Statement :\nCreate decion tree classifire and visualize it graphically. The purpose is if we feed any new data to this classifire,it would be able to predict the right class accordingly.","a3d0c867":"Let us visualize the Decision Tree to understand it better.","10d534e3":"You can now feed any new\/test data to this classifer and it would be able to predict the right class accordingly."}}