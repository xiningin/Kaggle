{"cell_type":{"e9cbbcaf":"code","0a166006":"code","547b7948":"code","41201187":"code","46e6570c":"code","52b2f53e":"code","4e840347":"code","a078d9b3":"code","a2944f56":"code","b125312d":"code","4a200451":"code","5eefa4b2":"code","4cb84041":"code","30fa83f9":"code","ac2ec2a6":"code","d4c38c1d":"code","c48a8c1f":"code","db55f901":"code","04a70f3d":"code","d3529748":"code","8ffe2de3":"code","50113025":"code","9574b3c2":"code","a02cf4c1":"code","049673fa":"code","d66ee9fa":"code","8e7ea314":"code","6811a5b1":"code","520b3987":"code","4955a744":"code","47bcd108":"code","068eeffc":"code","d166f2be":"code","668c9e62":"code","bd096c32":"code","3e48b8ef":"code","9adb85fc":"code","075ab57d":"code","3a750e8d":"code","3825d9b7":"markdown","87463b8d":"markdown","f8964dfd":"markdown"},"source":{"e9cbbcaf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns \nfrom matplotlib import rcParams\nimport nltk\nfrom nltk.corpus import stopwords\nimport string\nstop = stopwords.words('english')\npunctuation = list(string.punctuation)\nstop.append(punctuation)\nfrom wordcloud import WordCloud\npd.set_option('display.max_colwidth', -1)\nimport matplotlib.pyplot as plt\nimport re\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk import pos_tag\nfrom nltk.corpus import wordnet\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0a166006":"df = pd.read_csv(filepath_or_buffer=\"\/kaggle\/input\/dataisbeautiful\/r_dataisbeautiful_posts.csv\")","547b7948":"df.head()","41201187":"df.isna().sum()","46e6570c":"rcParams[\"figure.figsize\"] = 15,20\ndf[\"author\"].value_counts()[1:20].plot(kind=\"bar\")","52b2f53e":"df[\"over_18\"].value_counts()","4e840347":"df.over_18.replace(True,1,inplace = True)\ndf.over_18.replace(False,0,inplace = True)","a078d9b3":"rcParams[\"figure.figsize\"] = 10,10\ndf[\"over_18\"].value_counts().plot(kind=\"pie\")","a2944f56":"train_false = df[df.over_18 == 0.0].title\ntrain_true = df[df.over_18 == 1.0].title","b125312d":"def tokenizeandstopwords(text):\n    tokens = nltk.word_tokenize(text)\n    # taken only words (not punctuation)\n    token_words = [w for w in tokens if w.isalpha()]\n    meaningful_words = [w for w in token_words if not w in stop]\n    joined_words = ( \" \".join(meaningful_words))\n    return joined_words","4a200451":"def generate_word_cloud(text):\n    wordcloud = WordCloud(\n        width = 3000,\n        height = 2000,\n        max_words=3000,min_font_size=4,\n        background_color = 'black').generate(str(text))\n    fig = plt.figure(\n        figsize = (40, 30),\n        facecolor = 'k',\n        edgecolor = 'k')\n    plt.imshow(wordcloud, interpolation = 'bilinear')\n    plt.axis('off')\n    plt.tight_layout(pad=0)\n    plt.show()","5eefa4b2":"true_pre_processed = train_true[:1000].apply(tokenizeandstopwords)","4cb84041":"generate_word_cloud(true_pre_processed)","30fa83f9":"false_pre_processed = train_false[:1000].apply(tokenizeandstopwords)\ngenerate_word_cloud(false_pre_processed)","ac2ec2a6":"true_bigrams_series = (pd.Series(nltk.ngrams(true_pre_processed, 2)).value_counts())[:20]","d4c38c1d":"true_bigrams_series.sort_values().plot.barh(color='blue', width=.9, figsize=(15, 15))\nplt.title('20 Most Frequently Occuring Bigrams')\nplt.ylabel('Bigram')\nplt.xlabel('# of Occurances')","c48a8c1f":"df[\"text\"] = df[\"title\"] + ' ' + df['author']","db55f901":"df = df.drop([\"id\",\"author\",\"author_flair_text\",\"removed_by\",\"created_utc\",\"awarders\",\"full_link\",\"title\"],axis=1)","04a70f3d":"df.shape\n","d3529748":"df.text.fillna(\" \",inplace = True)","8ffe2de3":"def remove_emoji(string):\n    emoji_pattern = re.compile(\"[\"\n                               u\"\\U0001F600-\\U0001F64F\"  # emoticons\n                               u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n                               u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n                               u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n                               u\"\\U00002500-\\U00002BEF\"  # chinese char\n                               u\"\\U00002702-\\U000027B0\"\n                               u\"\\U00002702-\\U000027B0\"\n                               u\"\\U000024C2-\\U0001F251\"\n                               u\"\\U0001f926-\\U0001f937\"\n                               u\"\\U00010000-\\U0010ffff\"\n                               u\"\\u2640-\\u2642\"\n                               u\"\\u2600-\\u2B55\"\n                               u\"\\u200d\"\n                               u\"\\u23cf\"\n                               u\"\\u23e9\"\n                               u\"\\u231a\"\n                               u\"\\ufe0f\"  # dingbats\n                               u\"\\u3030\"\n                               \"]+\", flags=re.UNICODE)\n    return emoji_pattern.sub(r'', string)","50113025":"df[\"text\"] = df[\"text\"].apply(remove_emoji)\n","9574b3c2":"df.head()","a02cf4c1":"lemmatizer = WordNetLemmatizer()\ndef lemmatize_words(text):\n    final_text = []\n    for i in text.split():\n        if i.strip().lower() not in stop:\n            pos = pos_tag([i.strip()])\n            word = lemmatizer.lemmatize(i.strip(),get_simple_pos(pos[0][1]))\n            final_text.append(word.lower())\n    return final_text        ","049673fa":"def get_simple_pos(tag):\n    if tag.startswith('J'):\n        return wordnet.ADJ\n    elif tag.startswith('V'):\n        return wordnet.VERB\n    elif tag.startswith('N'):\n        return wordnet.NOUN\n    elif tag.startswith('R'):\n        return wordnet.ADV\n    else:\n        return wordnet.NOUN","d66ee9fa":"def join_text(text):\n    string = ''\n    for i in text:\n        string += i.strip() +' '\n    return string  ","8e7ea314":"df.text = df.text.apply(lemmatize_words)\ndf.text = df.text.apply(join_text)","6811a5b1":"df.head()","520b3987":"# rcParams['figure.figsize'] = 15,10\n# sns.countplot(x=df[\"text\"],hue=df[\"over_18\"])","4955a744":"df[\"over_18\"].value_counts()","47bcd108":"train_message = df.text[:150000]\ntest_message = df.text[150000:]\ntrain_category = df.over_18[:150000]\ntest_category = df.over_18[150000:]","068eeffc":"from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score,classification_report,plot_confusion_matrix","d166f2be":"cv=CountVectorizer(min_df=0,max_df=1,binary=False,ngram_range=(1,2))\n#transformed train reviews\ncv_train_reviews=cv.fit_transform(train_message)\n#transformed test reviews\ncv_test_reviews=cv.transform(test_message)","668c9e62":"tv=TfidfVectorizer(min_df=0,max_df=1,use_idf=True,ngram_range=(1,2))\n#transformed train reviews\ntv_train_reviews=tv.fit_transform(train_message)\n#transformed test reviews\ntv_test_reviews=tv.transform(test_message)\nprint('Tfidf_train:',tv_train_reviews.shape)\nprint('Tfidf_test:',tv_test_reviews.shape)","bd096c32":"lr=LogisticRegression(penalty='l2',max_iter=500,C=1,random_state=42)\n#Fitting the model for Bag of words\nlr_bow=lr.fit(cv_train_reviews,train_category)\nprint(lr_bow)\n#Fitting the model for tfidf features\nlr_tfidf=lr.fit(tv_train_reviews,train_category)\nprint(lr_tfidf)","3e48b8ef":"#Predicting the model for bag of words\nlr_bow_predict=lr.predict(cv_test_reviews)\n##Predicting the model for tfidf features\nlr_tfidf_predict=lr.predict(tv_test_reviews)\n","9adb85fc":"\n\n#Accuracy score for bag of words\nlr_bow_score=accuracy_score(test_category,lr_bow_predict)\nprint(\"lr_bow_score :\",lr_bow_score)\n#Accuracy score for tfidf features\nlr_tfidf_score=accuracy_score(test_category,lr_tfidf_predict)\nprint(\"lr_tfidf_score :\",lr_tfidf_score)\n\n","075ab57d":"\n\n#Classification report for bag of words\nlr_bow_report=classification_report(test_category,lr_bow_predict,target_names=['0','1'])\nprint(lr_bow_report)\n\n#Classification report for tfidf features\nlr_tfidf_report=classification_report(test_category,lr_tfidf_predict,target_names=['0','1'])\nprint(lr_tfidf_report)\n\n","3a750e8d":"plot_confusion_matrix(lr_bow, cv_test_reviews, test_category,display_labels=['0','1'],cmap=\"Blues\",values_format = '')\nplot_confusion_matrix(lr_tfidf, tv_test_reviews, test_category,display_labels=['0','1'],cmap=\"Blues\",values_format = '')\n","3825d9b7":"## The target of 0 label is 90% than 1 label","87463b8d":"## Viewing the top 20 Autors by leaving one Author names Deleted which has more than the initial Author contributions","f8964dfd":"## This shows there are some NaN values in the dataset"}}