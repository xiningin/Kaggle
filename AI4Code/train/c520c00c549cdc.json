{"cell_type":{"8850e226":"code","c2df9e18":"code","2f6d4701":"code","7ad8af38":"code","11890c88":"code","d032e246":"code","4f8f7112":"code","3945c112":"code","6b6a8b37":"code","3cd33525":"code","ff41cc1b":"code","2111ebf1":"code","0019584f":"code","6ba112b1":"code","3c00a7ce":"code","ac6c56ea":"code","93de8f11":"code","7b3b61ac":"code","77605e5b":"code","3812756a":"code","d30c3ab0":"code","77cb07fa":"code","f6dea60a":"code","f4e416c8":"code","0b6a9b63":"code","7073127b":"code","614307e2":"code","e2fd6531":"code","c68a2847":"code","d41a54ea":"code","85f4c6ba":"code","b0575689":"code","4a48562d":"code","b11c5b12":"code","93882519":"code","8b4dd20f":"code","dd204192":"code","87bac52d":"code","8ba5c202":"code","a9e56cf5":"code","811de0f2":"code","ac01fb44":"code","32ebf5f4":"code","743ba267":"code","9a9edd3b":"code","f6bde9ba":"code","a0ea8ddd":"code","8afdbf99":"code","3a58ffde":"code","f6c6b3e6":"code","8f847379":"code","e1270a19":"code","d8a6b991":"code","d98f83cb":"code","4d08d6d3":"code","6236b487":"markdown","a3d4f1f9":"markdown","9c27f528":"markdown","7b5778de":"markdown"},"source":{"8850e226":"import sys\nimport pandas as pd\nimport numpy as np \nimport seaborn as sns \nimport matplotlib.pyplot as plt \nimport missingno as msno\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator","c2df9e18":"dframe = pd.read_csv('..\/input\/marvel-vs-dc-imdb-dataset\/Marvel_DC_imdb.csv')","2f6d4701":"dframe.head()","7ad8af38":"dframe.isna().sum()","11890c88":"dframe.shape","d032e246":"msno.matrix(dframe) #shows metascore and USA_Gross cloumns have almost all missing data ","4f8f7112":"dframe = dframe.drop(columns=['USA_Gross', 'Metascore', 'Unnamed: 0'])","3945c112":"dframe.head()","6b6a8b37":"dframe.info()","3cd33525":"dframe.describe()","ff41cc1b":"dframe = dframe.dropna(axis=0) #dropping all missing values from rows of dframe","2111ebf1":"dframe.isna().sum()","0019584f":"dframe.shape #we are left with 1247 rows, 443 rows has missing data ","6ba112b1":"dframe.columns","3c00a7ce":"dframe.Rating.value_counts","ac6c56ea":"dframe.dtypes","93de8f11":"comment_words = ''\nstopwords = set(STOPWORDS)\n  \n# iterate through the csv file\nfor val in dframe['Movie'].values:\n      \n    # typecaste each val to string\n    val = str(val)\n  \n    #split the value\n    tokens = val.split()\n      \n    # Converts each token into lowercase\n    for i in range(len(tokens)):\n        tokens[i] = tokens[i].lower()\n      \n    comment_words += \" \".join(tokens)+\" \"\n    \n    \nwordcloud = WordCloud(width = 3000, height = 2000, random_state=1, \n                      background_color='black', colormap='Set2', \n                      collocations=False, stopwords = STOPWORDS).generate(comment_words)\n  \n#plot the WordCloud image                       \nplt.figure(figsize = (8, 8), facecolor = None)\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.tight_layout(pad = 0)\n  \nplt.show()","7b3b61ac":"#dframe.plot(x = 'Year', y = 'IMDB_Score', ylim = ([0,10]), linewidth=2.5, figsize = (30,10))","77605e5b":"def convert_runtime(val):\n    \"\"\"\n    Convert the string number value to a float\n     - Remove $\n     - Remove commas\n     - Convert to float type\n    \"\"\"\n    new_val = val.replace('min','')\n    return int(new_val)","3812756a":"converted_RunTime = dframe['RunTime'].apply(convert_runtime)","d30c3ab0":"def convert_Year(val):\n    \"\"\"\n    Convert the string number value to a float\n     - Remove $\n     - Remove commas\n     - Convert to float type\n    \"\"\"\n    new_val = val.replace('(','').replace(')', '').replace(' Video', '').replace(' TV Special','').replace('III ','').replace('\u2013','').replace(' TV Movie','')\n    return int(new_val)","77cb07fa":"converted_Year = dframe['Year'].apply(convert_Year)","f6dea60a":"converted_Year.value_counts","f4e416c8":"dframe.columns","0b6a9b63":"def convert_score(val):\n    \"\"\"\n    Convert the string number value to a float\n     - Remove $\n     - Remove commas\n     - Convert to float type\n    \"\"\"\n    \n    return int(val)","7073127b":"def convert_votes(val):\n    \"\"\"\n    Convert the string number value to a float\n     - Remove $\n     - Remove commas\n     - Convert to float type\n    \"\"\"\n    new_val = val.replace(',','')\n    return int(new_val)","614307e2":"converted_Votes = dframe['Votes'].apply(convert_votes)","e2fd6531":"converted_IMDB_Score = dframe['IMDB_Score'].apply(convert_score)","c68a2847":"dframe.insert(8, \"C_IMDB_Score\", converted_IMDB_Score, True)\ndframe.insert(1, \"C_Year\", converted_Year, True)\ndframe.insert(3, \"C_RunTime\", converted_RunTime, True)\ndframe.insert(9, \"C_Votes\", converted_Votes, True)","d41a54ea":"dframe = dframe.drop(['IMDB_Score', 'Year', 'RunTime', 'Votes'], axis = 1)","85f4c6ba":"dframe.head()","b0575689":"sns.catplot(x=\"Category\", y=\"C_IMDB_Score\", kind = 'bar', hue='Rating', palette=\"vlag\", data=dframe)","4a48562d":"sns.set_style('ticks')\nfig, ax = plt.subplots()\nfig.set_size_inches(10, 7)\nplt.ylim(0, 10)\nplt.title(\"Distribution of Rating by IMDB Score, Separated by Category\")\nsns.boxenplot(x='Rating', y='C_IMDB_Score', data=dframe, palette='hls', hue='Category',linewidth=2.5)\nplt.legend(loc='lower right', fancybox=True)\nsns.despine()","b11c5b12":"dframe.head()","93882519":"group_avg_rating = dframe['C_IMDB_Score'].groupby(dframe['Category'])","8b4dd20f":"group_avg_rating.mean() #average rating for DC is more than Marvel","dd204192":"dframe.groupby(['Category']).size() #this is a bias dataset as there are only 257 Marvel movies in the cleaned dataset ","87bac52d":"group_avg_runtime = dframe['C_RunTime'].groupby(dframe['Category'])","8ba5c202":"group_avg_runtime.mean()","a9e56cf5":"group_avg_Votes = dframe['C_Votes'].groupby(dframe['Category'])","811de0f2":"group_avg_Votes.mean()","ac01fb44":"dframe_rating = dframe.groupby('C_IMDB_Score')","32ebf5f4":"dframe_rating.describe()","743ba267":"def ranker(df):\n    df['movie_imdb_score_rank'] = np.arange(len(df)) + 1\n    return df","9a9edd3b":"dframe.sort_values('C_IMDB_Score', ascending=False, inplace=True)","f6bde9ba":"dframe = dframe.groupby('Category').apply(ranker)","a0ea8ddd":"dframe.head()","8afdbf99":"num_score = dframe['C_IMDB_Score'].value_counts()","3a58ffde":"dframe[dframe.C_IMDB_Score ==9].head(len(num_score))","f6c6b3e6":"dframe.info()","8f847379":"v = dframe['C_IMDB_Score']        # Number of votes for the movie\nR = dframe['C_Votes']             # Vote average of a movie which is a number from 0 to 10\nC = dframe['C_Votes'].mean()      # The mean vote across the whole report \nm = dframe['C_IMDB_Score'].quantile(0.7)","e1270a19":"dframe['Weighted_average'] = ((R*v)+(C*m))\/(v+m)","d8a6b991":"dframe.head()","d98f83cb":"movie_rankings = dframe.sort_values('Weighted_average',ascending=False)\nmovie_rankings[['Movie','C_Votes','C_IMDB_Score', 'movie_imdb_score_rank','Weighted_average']]","4d08d6d3":"#Compare the top 6 movies \n\nweighted_average = dframe.sort_values('Weighted_average',ascending=False)\nplt.figure(figsize=(7,5))\naxis1 = sns.barplot(x = dframe['Weighted_average'].head(10),y = dframe['Movie'].head(10))\n\nplt.title('Best Movies according to Average Vote given by Users',weight='bold')\nplt.xlabel('Weighted Average Score',weight='bold')\nplt.ylabel('Movie Title',weight='bold')","6236b487":"# Pre-Processing","a3d4f1f9":"## Applying weighted Average ","9c27f528":"## Word Cloud on Movies Column","7b5778de":"## Plot missing values "}}