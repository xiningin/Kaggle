{"cell_type":{"9042975f":"code","3daf82a3":"code","427b14c0":"code","ae0db13e":"code","1d9c7497":"code","5bce5028":"code","ec8bf0f7":"code","7718c71a":"code","1eecb857":"code","19bd65e9":"code","fa17bb2f":"code","2679884c":"code","e1341f76":"code","9fb0fc99":"code","4b007e40":"code","3c8b3ebc":"code","d62fc0ec":"code","6e841369":"code","89d3a3bc":"code","76ec5180":"code","b05a64db":"code","0cd84759":"code","cba0ba4c":"code","0f3c2590":"code","19e6a004":"code","bcf69960":"code","e092c96f":"code","e7658f92":"code","0b5f9dd0":"code","1fa03085":"code","dd0cb532":"code","e86d8bf5":"code","f1306dd6":"code","29e5c33a":"code","945a964a":"code","1fbea12d":"code","9908a1fb":"code","83fe8fea":"code","c9db4044":"markdown","4d7bf9d0":"markdown","354f97b8":"markdown","e4d986d3":"markdown","a4e2fd0c":"markdown","1a88fb2f":"markdown","a5293092":"markdown"},"source":{"9042975f":"# import necessary libraries\n\nimport numpy as np   # for data analysis\nimport pandas as pd   # for manipulating data and creating dataframes\nimport matplotlib.pyplot as plt   # for data visualization capabilities\nimport seaborn as sns # for more data visualization capabilities \n\nfrom sklearn.tree import DecisionTreeRegressor   # decision tree regressor algorithm\nfrom sklearn.linear_model import LinearRegression   # linear regression algorithm \nfrom sklearn.model_selection import train_test_split   # to be used to partition data for proper testing\nfrom sklearn.metrics import mean_squared_error   # to be used as an accuracy metric of models\nfrom math import sqrt   # to carry out calculations","3daf82a3":"df = pd.read_csv('..\/input\/nba-players-stats\/Seasons_Stats.csv') \ndf   ","427b14c0":"df.shape   # get a sense of how large the data set is","ae0db13e":"len(df.index)-df.count()   # display each column (feature) and the number of NULL values inside it\n# alternative script with same function\n# df.isnull().sum(axis=0)","1d9c7497":"# clean data\n# for simplicity, drop unnecessary columns and those with more than 1000 Null values\ndf = df.drop(columns = ['Unnamed: 0','blanl', 'blank2', 'OBPM', 'DBPM', 'FTr', '3PAr', 'WS', 'WS\/48', 'OWS', 'TS%', 'ORB%', 'DRB%', 'AST%', 'STL%', 'BLK%', 'TOV%'])","5bce5028":"df.columns   # display remaining features (columns)","ec8bf0f7":"df.shape   # display new shape - 17 columns have been dropped","7718c71a":"df = df.dropna()   # drop the remaining rows with NUll values from dataframe","1eecb857":"len(df.index)-df.count()   # inspect dataframe to confirm that no NUll value remains","19bd65e9":"df.describe()","fa17bb2f":"# will begin exploring data by graphing the field goal percentage distribution across the entire data set\n\ndata = df['FG%']\nsns.displot(data).set(title='Age Distribution')   # define graph\nplt.title('Field Goal Percentage distribution')   # set title\nplt.xlabel('FG %')   # set x label\nplt.ylabel('frequency')   # set y label\nplt.show()","2679884c":"# a snapshot of players with a field goal percentage of .50 or more\n\ndf.loc[df['FG%'] > .5, ['Player', 'FG%', 'FG', 'FGA', 'Tm', 'Year']].sort_values(by='FG%', axis=0, ascending=True).head(15)","e1341f76":"# 2017 players with field goals percentage greater than 65%\n\ndf.loc[(df['FG%'] > .65) & (df['Year'] == 2017), ['Player', 'FG%', 'FG', 'FGA', 'Tm', 'Year']].sort_values(by='FG%', axis=0, ascending=True).head(15)","9fb0fc99":"# continued data exploration with same visualization (histogram) as above but with respect to 3 point percentage this time.\n\ndata = df['3P%']\nsns.displot(data).set(title='3 point percentage Distribution')\nplt.title('3-point percentage distribution')\nplt.xlabel('3-point percentage')\nplt.ylabel('frequency')\nplt.show()","4b007e40":"# sample of players with 0% 3 point percentage\n\n# the NBA adopted the three pointer in 1979 \n\ndf.loc[df['3P%'] == 0, ['Player', '3P%', '3P', '3PA', 'Tm', 'Year']].head(20)","3c8b3ebc":"# first 15 players with 3 point percentage greater than 40 %\n\ndf.loc[df['3P%'] > .4, ['Player', '3P%', '3P', '3PA', 'Tm', 'Year']].sort_values(by='3P%', axis=0, ascending=True).head(15)","d62fc0ec":"# first 15 players with 3 point percentage greater than 50%\n\ndf.loc[(df['3P%'] > .5) & (df['Year'] == 2017), ['Player', '3P%', '3P', '3PA', 'Tm', 'Year']].sort_values(by='3P%', axis=0, ascending=True).head(15)","6e841369":"# player profile 3 point percentage Ray Allen.\n# descending from best to worst percentage throughout seasons\n# scatterplot for 3 point percentage throughout years\n\nray_ray = df.loc[df['Player'] == 'Ray Allen']\nplt.scatter(ray_ray['Year'], ray_ray['3P%'])\nplt.title('Ray Allen 3-point percentage distribution')\nplt.xlabel('Year')\nplt.ylabel('3 point %')\nplt.show()\n\ndf.loc[df['Player'] == 'Ray Allen', ['Player', '3P%', '3P', '3PA', 'Tm', 'Year']].sort_values('3P%', ascending = False)","89d3a3bc":"# player profile field goal percentage, Kevin Durant.\n# descending from best to worst percentage throughout seasons\n\ndurant = df.loc[df['Player'] == 'Kevin Durant']\nplt.scatter(durant['Year'], durant['FG%'])\nplt.title('Kevin Durant Field Goal percentage distribution')\nplt.xlabel('Year')\nplt.ylabel('FG %')\nplt.show()\n\ndf.loc[df['Player'] == 'Kevin Durant', ['Player', 'FG%', 'FG', 'FGA', 'Tm', 'Year']].sort_values('FG%', ascending = False)","76ec5180":"# player profile minutes played, Carmelo Anthony.\n# descending from most to least minutes played in a season\n\nmelo = df.loc[df['Player'] == 'Carmelo Anthony']\nplt.scatter(melo['Year'], melo['MP'])\nplt.title('Carmelo Anthony Minutes Played distribution')\nplt.xlabel('Year')\nplt.ylabel('Minutes Played (MP)')\n\nz = np.polyfit(melo['Year'], melo['MP'], 1)\np = np.poly1d(z)\nplt.plot(melo['Year'],p(melo['Year']),\"r--\")\nplt.show()\n\n\ndf.loc[df['Player'] == 'Carmelo Anthony', ['MP','Player', 'FG%', 'FG', 'FGA', 'Tm', 'Year']].sort_values('MP', ascending = False)","b05a64db":"# aggregate player age distribution\n\ndata = df['Age']\nsns.displot(data).set(title='Age Distribution')\nplt.show()","0cd84759":"plt.figure(figsize=(20,15), dpi= 80) #correlation map\nsns.heatmap(df.corr(), xticklabels=df.corr().columns, yticklabels=df.corr().columns, cmap='RdYlGn', center=0, annot=True)","cba0ba4c":"features = ['PTS', 'TOV', 'STL', 'AST', 'FT', '3PA', 'PER', 'MP', 'TRB%']   # define features \ntarget = ['FT%']   # define target ","0f3c2590":"X = df[features]\ny = df[target]","19e6a004":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state = 300)   # partition data","bcf69960":"regressor = LinearRegression()   \nregressor.fit(X_train, y_train)   # model data using Linear Regression","e092c96f":"y_prediction = regressor.predict(X_test)   # test data on test sample\ny_prediction","e7658f92":"RMSE = sqrt(mean_squared_error(y_true = y_test, y_pred = y_prediction))   # evaluate model performance \nprint(RMSE)","0b5f9dd0":"y_pred = pd.DataFrame(y_prediction, columns = ['Prediction'])    # display predictions\n\ntest_values = pd.DataFrame(y_test)   # actual freethrow percentages\n\ntest_values['index'] = range(0,4814)\ny_pred['index'] = range(0,4814)\n\nside_by_side = pd.merge(test_values, y_pred, how='left', on='index')   # comparison of actual to predicted values \n\ndel side_by_side['index']\ndel y_pred['index']\ndel y_test['index']\n\n\nside_by_side.head(15)","1fa03085":"data = side_by_side['Prediction']\nsns.displot(data)   # visualization of predicted values\nplt.title('Predicted freethrow percentage distribution')\nplt.xlabel('predicted freethrow percentage')\nplt.ylabel('frequency')\nplt.show()\n\ndata = side_by_side['FT%']\nsns.displot(data)  # visualization of predicted values\nplt.title('Actual freethrow percentage distribution')\nplt.xlabel('Actual freethrow percentage')\nplt.ylabel('frequency')\nplt.show()\n","dd0cb532":"data = side_by_side['Prediction']\nsns.displot(data)   # visualization of predicted values\nplt.title('Predicted freethrow percentage distribution')\nplt.xlabel('predicted freethrow percentage')\nplt.ylabel('frequency')\nplt.show()\n\nside_by_side['Prediction'].describe()   # statistical description of the predicted freethrow values","e86d8bf5":"data = side_by_side['FT%']\nsns.displot(data)  # visualization of predicted values\nplt.title('Actual freethrow percentage distribution')\nplt.xlabel('Actual freethrow percentage')\nplt.ylabel('frequency')\nplt.show()\n\nside_by_side['FT%'].describe()   # statistical description of actual freethrow values","f1306dd6":"regressor = DecisionTreeRegressor(max_depth=20)\nregressor.fit(X_train, y_train)   # model data using decision tree regression","29e5c33a":"y_predict = regressor.predict(X_test)   # predict freethrow percentage\ny_predict","945a964a":"RMSE = sqrt(mean_squared_error(y_true = y_test, y_pred = y_predict))   # measure model accuracy ","1fbea12d":"print(RMSE)   ","9908a1fb":"y_predict = pd.DataFrame(y_predict, columns = ['Prediction'])\n\ntest_values['index'] = range(0,4814)\ny_predict['index'] = range(0,4814)\n\nside_by_side = pd.merge(test_values, y_predict, how='left', on='index')   # comparison of actual to predicted values \n\ndel side_by_side['index']\ndel y_predict['index']\ndel y_test['index']\n\n\nside_by_side.head(15)","83fe8fea":"pre = side_by_side['Prediction']\nsns.displot(pre)  # visualization of predicted values\nplt.title('Predicted freethrow percentage distribution')\nplt.xlabel('Predicted freethrow percentage')\nplt.ylabel('frequency')\nplt.show()\n\nactual = side_by_side['FT%']\nsns.displot(actual)  # visualization of actual values\nplt.title('Actual freethrow percentage distribution')\nplt.xlabel('Actual freethrow percentage')\nplt.ylabel('frequency')\nplt.show()\n","c9db4044":"<blockquote>The purpose of this notebook is to model NBA player data using Decision Tree Regression and Linear Regression to predict player free-throw percentage. In this notebook, I will perform a quick exploratory data analysis and create simple visualizations that depict relevant qualities about the data. I will then model the relationship between a subset of player attributes and their respective free-throw percentages. Then, I will test the model on a sample from the data by predicting the free-throw percentages of the players within that test sample. Finally, I will analyze how accurate my predictions were.\n    <blockquote>  ","4d7bf9d0":"<blockquote>Linear Regression Model<blockquote>","354f97b8":"***Clean data***","e4d986d3":"<blockquote>Decision Tree Regression Model<blockquote>","a4e2fd0c":"<h1>Data Analysis of NBA Players and Free-throw Percentage <h>","1a88fb2f":"***Explore data***","a5293092":"<h3>Model using Linear Regression<h3>"}}