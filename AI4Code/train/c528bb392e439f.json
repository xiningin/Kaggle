{"cell_type":{"42d18e1d":"code","8a0250dc":"code","ce54d5a1":"code","032f799a":"code","c35bf18a":"code","369c80ae":"code","21df1491":"code","6205dc39":"code","b1b6c82c":"code","e0388022":"code","db5a7d2b":"code","c056f04d":"code","4191120e":"code","501da516":"code","9fc1a180":"code","b008d92b":"code","85b8fc18":"code","11a17059":"code","0c9727db":"code","feb8a91e":"code","90a12305":"code","d0a01e15":"code","df96e941":"code","2f2f3715":"code","358b6a6d":"code","bee15f04":"code","e5a1c792":"code","62fefaac":"code","183ca137":"code","81727e34":"code","8a0da1dc":"code","3ad1b251":"code","11417d31":"code","2b6a9c49":"code","8c897f14":"code","349eff2b":"code","27d44f29":"code","67f70463":"code","9dea88f0":"code","cd77deea":"code","a5f87a1d":"code","40bf9467":"code","13e46959":"code","429b7e07":"markdown","037cec9e":"markdown","f0aee8f2":"markdown","d6234120":"markdown","0adc6fdd":"markdown","d25a3d91":"markdown","424d66e4":"markdown","e8379ff5":"markdown","c3b142d7":"markdown","e0400860":"markdown","b10a865c":"markdown","2572e72b":"markdown","dca621bb":"markdown","71b8cce2":"markdown","1b95f7a6":"markdown","a6b236b0":"markdown","2ec9f2ec":"markdown","fbd3e0a0":"markdown","72f9a20f":"markdown","95cb52ef":"markdown","7d720b4d":"markdown","1900de87":"markdown","2e844f0b":"markdown","ef2745dc":"markdown","78b67ab6":"markdown","7d1ce0cc":"markdown","82d8015e":"markdown"},"source":{"42d18e1d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8a0250dc":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n","ce54d5a1":"df = pd.read_csv('\/kaggle\/input\/aviation-accident-database-synopses\/AviationData.csv')\ndf.head()","032f799a":"df.shape","c35bf18a":"df.info()","369c80ae":"df.describe()","21df1491":"df.isna().sum()\/len(df)*100","6205dc39":"df['Event.Date'] = pd.to_datetime(df['Event.Date'])\ndf['Year'] = df['Event.Date'].dt.year\ndf['Month'] = df['Event.Date'].dt.month_name()\ndf['Day'] = df['Event.Date'].dt.day_name()","b1b6c82c":"df['Weather.Condition'] = df['Weather.Condition'].replace('Unk','UNK')\ndf['Weather.Condition'].fillna('UNK', inplace=True)\ndf['Weather.Condition'] = df['Weather.Condition'].replace('UNK','Unknown')","e0388022":"df['Injury.Severity'] = df['Injury.Severity'].str.split('(').str[0]\ndf['Injury.Severity'] = df['Injury.Severity'].replace('Siruose','Serious')\ndf['Injury.Severity'] = df['Injury.Severity'].replace('Unavailable','Unknown')","db5a7d2b":"yearly = df.groupby('Year')['Accident.Number'].count().reset_index()\nmonthly = df.groupby('Month')['Accident.Number'].count().reset_index()\nweek_day = df.groupby('Day')['Accident.Number'].count().reset_index()","c056f04d":"fig = make_subplots(rows=3, cols=1, shared_xaxes=False,\n                   vertical_spacing=0.15,\n                   specs =[[{'type':'scatter'}],\n                          [{'type':'bar'}],\n                          [{'type':'pie'}]],\n                   subplot_titles=['Accidents Over The Years','Month With Most Number Of Accidents','Week Days With Highest Accidents Count'])\n\ntrace1 = go.Scatter(x=yearly['Year'],\n                         y=yearly['Accident.Number'],\n                         mode='lines+markers',\n                   line_color='gold')\n\n\ntrace2 = go.Bar(x=monthly['Month'],\n                     y=monthly['Accident.Number'],\n                     text = monthly['Accident.Number'],\n                     marker=dict(color = monthly['Accident.Number'],colorscale='viridis'),\n                     textposition='outside')\n\n\ntrace3 = go.Pie(labels=week_day['Day'],\n                     values=week_day['Accident.Number'],\n                textinfo='percent',\n                insidetextorientation='radial',\n                legendgroup='show', marker = dict(colors=px.colors.qualitative.Pastel2))\n\nfig.append_trace(trace1,1,1)\nfig.append_trace(trace2,2,1)\nfig.append_trace(trace3,3,1)\n\nfig.update_traces()\nfig.update_layout(uniformtext_minsize=7, uniformtext_mode='show', height=1400, width=1200)\nfig.show()","4191120e":"fig = px.bar(x=df['Investigation.Type'].value_counts().index,\n            y=df['Investigation.Type'].value_counts(),\n            title='Accident VS Incident',\n            text=(df['Investigation.Type'].value_counts()\/len(df['Investigation.Type'])*100),\n            height=500,\n            width=600)\n\nfig.update_traces(textposition='outside', texttemplate='%{text:.4s}%', marker=dict(color='snow', line=dict(color='black', width=3)))\nfig.show()","501da516":"incident = df[df['Investigation.Type']=='Incident']\naccident = df[df['Investigation.Type']=='Accident']\n\n\nincident_injuries = incident.groupby('Year')[['Total.Fatal.Injuries','Total.Serious.Injuries','Total.Minor.Injuries','Total.Uninjured']].sum().reset_index()\n\naccident_injuries = incident.groupby('Year')[['Total.Fatal.Injuries','Total.Serious.Injuries','Total.Minor.Injuries','Total.Uninjured']].sum().reset_index()","9fc1a180":"fig = make_subplots(rows=5, cols=1, shared_xaxes=False,\n                   vertical_spacing=0.03,\n                   specs =[[{'type':'table'}],\n                          [{'type':'scatter'}],\n                          [{'type':'scatter'}],\n                          [{'type':'scatter'}],\n                          [{'type':'scatter'}]],\n                   subplot_titles=['','Fatal Injuries In Incident Over The Years','Serious Injuries In Incident Over The Year',\n                                  'Minor Injuries In Incident Over The Years','UnInjured In Incident Over The Year'])\n\nfig.add_trace(\n    go.Scatter(\n        x=incident_injuries[\"Year\"],\n        y=incident_injuries[\"Total.Fatal.Injuries\"],\n        mode=\"lines+markers\",\n        name=\"Fatal Injuries\",\n        line_color='black'\n    ),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(\n    x=incident_injuries['Year'],\n    y=incident_injuries['Total.Serious.Injuries'],\n    mode='lines+markers',\n    name='Serious Injuries',\n    line_color='purple'),\n    row=3, col=1\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=incident_injuries[\"Year\"],\n        y=incident_injuries[\"Total.Minor.Injuries\"],\n        mode=\"lines+markers\",\n        name=\"Minor Injuries\",\n        line_color='grey'\n    ),\n    row=4, col=1\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=incident_injuries[\"Year\"],\n        y=incident_injuries[\"Total.Uninjured\"],\n        mode=\"lines+markers\",\n        name=\"Uninjured\",\n        line_color='navy'\n    ),\n    row=5, col=1\n)\n\n\nfig.add_trace(\n    go.Table(\n        header=dict(\n            values=[\"Year\", 'Total.Fatal.Injuries','Total.Serious.Injuries','Total.Minor.Injuries','Total.Uninjured'],\n            font=dict(size=10),\n            align=\"left\"\n        ),\n        cells=dict(\n            values=[incident_injuries['Year'],incident_injuries['Total.Fatal.Injuries'],incident_injuries['Total.Serious.Injuries'],\n                    incident_injuries['Total.Minor.Injuries'],incident_injuries['Total.Uninjured']],align = \"left\")\n    ),\n    row=1, col=1\n)\nfig.update_layout(\n    height=1500,\n    showlegend=False,\n    title_text=\"Incident Injuries Analysis\",\n)\n\nfig.show()","b008d92b":"fig = make_subplots(rows=5, cols=1, shared_xaxes=False,\n                   vertical_spacing=0.03,\n                   specs =[[{'type':'table'}],\n                          [{'type':'scatter'}],\n                          [{'type':'scatter'}],\n                          [{'type':'scatter'}],\n                          [{'type':'scatter'}]],\n                    subplot_titles=['','Fatal Injuries In Accident Over The Years','Serious Injuries In Accident Over The Year',\n                                  'Minor Injuries In Accident Over The Years','UnInjured In Accident Over The Year'])\n\nfig.add_trace(\n    go.Scatter(\n        x=accident_injuries[\"Year\"],\n        y=accident_injuries[\"Total.Fatal.Injuries\"],\n        mode=\"lines+markers\",\n        name=\"Fatal Injuries\",\n        line_color='brown'\n    ),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(\n    x=accident_injuries['Year'],\n    y=accident_injuries['Total.Serious.Injuries'],\n    mode='lines+markers',\n    name='Serious Injuries',\n    line_color='cadetblue'),\n    row=3, col=1\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=accident_injuries[\"Year\"],\n        y=accident_injuries[\"Total.Minor.Injuries\"],\n        mode=\"lines+markers\",\n        name=\"Minor Injuries\",\n        line_color='olive'\n    ),\n    row=4, col=1\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=accident_injuries[\"Year\"],\n        y=accident_injuries[\"Total.Uninjured\"],\n        mode=\"lines+markers\",\n        name=\"Uninjured\",\n        line_color='darkorange'\n    ),\n    row=5, col=1\n)\n\n\nfig.add_trace(\n    go.Table(\n        header=dict(\n            values=[\"Year\", 'Total.Fatal.Injuries','Total.Serious.Injuries','Total.Minor.Injuries','Total.Uninjured'],\n            font=dict(size=10),\n            align=\"left\"\n        ),cells=dict(\n            values=[accident_injuries['Year'],incident_injuries['Total.Fatal.Injuries'],incident_injuries['Total.Serious.Injuries'],\n                    accident_injuries['Total.Minor.Injuries'],incident_injuries['Total.Uninjured']],align = \"left\")\n    ),\n    row=1, col=1\n)\nfig.update_layout(\n    height=1500,\n\n    showlegend=False,\n    title_text=\"Accident Injuries Analysis\",\n)\n\nfig.show()","85b8fc18":"print(df['Purpose.of.flight'].nunique())\nprint('')\nprint(df['Purpose.of.flight'].unique())","11a17059":"total_fatal = df[['Purpose.of.flight','Total.Fatal.Injuries']].groupby('Purpose.of.flight').agg(['sum','count'])\ntotal_fatal = total_fatal['Total.Fatal.Injuries'].reset_index()\ntotal_fatal['fatal_percentage'] = total_fatal['sum']\/total_fatal['count']\ntotal_fatal.columns = ['Purpose.of.flight','Total.Fatal.Injuries','Total_Accidents','Fatal_Percentage']\n\n\n\ntotal_uninjured =  df[['Purpose.of.flight','Total.Uninjured']].groupby('Purpose.of.flight').agg(['sum','count'])\ntotal_uninjured = total_uninjured['Total.Uninjured'].reset_index()\ntotal_uninjured['Uninjured_percentage'] = total_uninjured['sum']\/total_uninjured['count']\ntotal_uninjured.columns = ['Purpose.of.flight','Total.Uninjured','Total_Accidents','Uninjured_Percentage']","0c9727db":"minacc = 10\npropstoplot = total_fatal[total_fatal['Total_Accidents']>minacc]\npropstoplot = propstoplot.sort_values('Fatal_Percentage').tail(50)\n\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n   x=propstoplot['Purpose.of.flight'],\n   y=propstoplot['Total_Accidents'],\n   text=propstoplot['Total_Accidents'],\n   name='Purpose Of Flight Accident > 10 Accidents',\n   marker_color='grey'\n))\n\nfig.add_trace(go.Bar(\n    x=propstoplot['Purpose.of.flight'],\n    y=propstoplot['Total.Fatal.Injuries'],\n    text=propstoplot['Total.Fatal.Injuries'],\n    name='Fatal Injury Count',\n    marker_color = 'silver'\n))\n\nfig.update_traces(textposition='outside', texttemplate='%{text:.2s}')\nfig.update_layout(barmode='group', xaxis_tickangle=-45, height=600, width=1300,uniformtext_minsize=7, uniformtext_mode='show',\n                 title='Purpose Of Flight Total Accidents VS Total Fatal Injuries ')\nfig.show()\n\n\n\nfig = px.bar(x=propstoplot['Purpose.of.flight'],\n   y=propstoplot['Fatal_Percentage'],\n   text=propstoplot['Fatal_Percentage'],\n   title='Purpose Of Flight Fatal Percentage')\n\n\nfig.update_traces(textposition='outside', texttemplate='%{text:.4s}', marker = dict(color='antiquewhite', line=dict(color='peru', width=3)))\nfig.update_layout( height=600, width=1100,uniformtext_minsize=8, uniformtext_mode='show')\nfig.show()\n","feb8a91e":"\n\n\nuninjured = total_uninjured[total_uninjured['Total_Accidents']>minacc]\nuninjured = uninjured.sort_values('Uninjured_Percentage').tail(50)\n\n\n# Plot For Total Accidents and Total Uninjured For purpose of Flight\nfig = go.Figure()\nfig.add_trace(go.Bar(\n   x=uninjured['Purpose.of.flight'],\n   y=uninjured['Total_Accidents'],\n   text=uninjured['Total_Accidents'],\n   name='Purpose Of Flight Accident > 10 Accidents',\n   marker_color='yellowgreen'\n))\n\nfig.add_trace(go.Bar(\n    x=uninjured['Purpose.of.flight'],\n    y=uninjured['Total.Uninjured'],\n    text=uninjured['Total.Uninjured'],\n    name='Uninjured Count',\n    marker_color = 'olive'\n))\n\nfig.update_traces(textposition='outside', texttemplate='%{text:.2s}')\nfig.update_layout(barmode='group', xaxis_tickangle=-45, height=600, width=1300,uniformtext_minsize=7, uniformtext_mode='show',\n                 title='Purpose Of Flight Total Accidents VS Total UnInjured')\nfig.show()\n\n\n\nfig = px.bar(x=uninjured['Purpose.of.flight'],\n    y=uninjured['Uninjured_Percentage'],\n    text=uninjured['Uninjured_Percentage'],\n    title='Purpose Of Flight Uninjured Percentage')\n\nfig.update_traces(textposition='outside', texttemplate='%{text:.3s}', marker = dict(color='mintcream', line=dict(color='teal', width=3)))\nfig.update_layout( height=600, width=1100,uniformtext_minsize=8, uniformtext_mode='show')\nfig.show()\n\n\n","90a12305":"# Analysing flights whose value_counts are greater than 100\n\nflight_injury = df[df['Purpose.of.flight'].map(df['Purpose.of.flight'].value_counts()) >=100]\n\nflight_injury = flight_injury.groupby('Purpose.of.flight')['Injury.Severity'].value_counts().reset_index(name='count')\n\nfig = px.histogram(x=flight_injury['Purpose.of.flight'],\n                  y=flight_injury['count'],\n                  color=flight_injury['Injury.Severity'],\n                  barmode='group',\n                  color_discrete_sequence=['hotpink','plum','coral','cadetblue','lightseagreen','silver'],\n                  title='Purpose Of Flight & Injury Severity')\nfig.show()","d0a01e15":"skydiving = df[df['Purpose.of.flight']=='Skydiving']\npersonal = df[df['Purpose.of.flight']=='Personal']\nbusiness = df[df['Purpose.of.flight']=='Business']\n\npersonal_y = personal.groupby('Year')['Accident.Number'].count().reset_index(name='count')\npersonal_m = personal.groupby('Month')['Accident.Number'].count().reset_index(name='count').sort_values(by='count',ascending=False)\npersonal_d = personal.groupby('Day')['Accident.Number'].count().reset_index(name='count').sort_values(by='count',ascending=False)\n\nbusiness_y = business.groupby('Year')['Accident.Number'].count().reset_index(name='count')\nbusiness_m = business.groupby('Month')['Accident.Number'].count().reset_index(name='count').sort_values(by='count',ascending=False)\nbusiness_d = business.groupby('Day')['Accident.Number'].count().reset_index(name='count').sort_values(by='count',ascending=False)\n\nskydiving_y = skydiving.groupby('Year')['Accident.Number'].count().reset_index(name='count')\nskydiving_m = skydiving.groupby('Month')['Accident.Number'].count().reset_index(name='count').sort_values(by='count',ascending=False)\nskydiving_d = skydiving.groupby('Day')['Accident.Number'].count().reset_index(name='count').sort_values(by='count',ascending=False)","df96e941":"fig = make_subplots(rows=2, cols=2,\n                   specs=[[{'type':'bar'},{'type':'pie'}],\n                         [{'type':'scatter'},None]],\n                   subplot_titles=['Personal Purpose Flight Accidents Across The Months',\n                                  'Personal Purpose Flight Accidents Across The Week-Days',\n                                  'Personal Purpose Flight Accidents Across The Year'])\n\ntrace1 = go.Bar(x=personal_m['Month'],\n                y=personal_m['count'],\n               text=personal_m['count'],\n               marker=dict(color = personal_m['count'],colorscale='mint'),\n               textposition='outside')\n\n\ntrace2 = go.Pie(labels=personal_d['Day'],\n                values=personal_d['count'],\n                textinfo='percent',\n                insidetextorientation='radial',\n                legendgroup='show', \n                marker = dict(colors=px.colors.qualitative.Pastel))\n\n\ntrace3 = go.Scatter(x=personal_y['Year'],\n                   y=personal_y['count'],\n                   mode='lines+markers',\n                    line_color='red',\n                   fill='toself'\n                   )\n\nfig.append_trace(trace1,1,1)\nfig.append_trace(trace2,1,2)\nfig.append_trace(trace3,2,1)\n\nfig.update_layout(height=800, width=1400)\n\nfig.show()","2f2f3715":"fig = make_subplots(rows=2, cols=2,\n                   specs=[[{'type':'bar'},{'type':'pie'}],\n                         [{'type':'scatter'},None]],\n                   subplot_titles=['Business Purpose Flight Accidents Across The Months',\n                                  'Business Purpose Flight Accidents Across The Week-Days',\n                                  'Business Purpose Flight Accidents Across The Years'])\n\ntrace1 = go.Bar(x=business_m['Month'],\n                y=business_m['count'],\n               text=business_m['count'],\n               marker=dict(color = business_m['count'],colorscale='purples'),\n               textposition='outside')\n\n\ntrace2 = go.Pie(labels=business_d['Day'],\n                values=business_d['count'],\n                textinfo='percent',\n                insidetextorientation='radial',\n                legendgroup='show', \n                marker = dict(colors=px.colors.qualitative.Set3))\n\n\ntrace3 = go.Scatter(x=business_y['Year'],\n                   y=business_y['count'],\n                   mode='lines+markers',\n                    line_color='darkkhaki',\n                   fill='tonexty')\n\nfig.append_trace(trace1,1,1)\nfig.append_trace(trace2,1,2)\nfig.append_trace(trace3,2,1)\n\nfig.update_layout(height=900, width=1500)\n\nfig.show()","358b6a6d":"fig = make_subplots(rows=2, cols=2,\n                   specs=[[{'type':'bar'},{'type':'pie'}],\n                         [{'type':'scatter'},None]],\n                   subplot_titles=['Skydiving Accidents Across The Months','Skydiving Accidents Across The Week-Days',\n                                 'Skydiving Accidents Across The Years'])\n\ntrace1 = go.Bar(x=skydiving_m['Month'],\n                y=skydiving_m['count'],\n               text=skydiving_m['count'],\n               marker=dict(color = skydiving_m['count'],colorscale='earth'),\n               textposition='outside')\n\n\ntrace2 = go.Pie(labels=skydiving_d['Day'],\n                values=skydiving_d['count'],\n                textinfo='percent',\n                insidetextorientation='radial',\n                legendgroup='show', \n                marker = dict(colors=px.colors.qualitative.Set2))\n\n\ntrace3 = go.Scatter(x=skydiving_y['Year'],\n                   y=skydiving_y['count'],\n                   mode='lines+markers',\n                    line_color='lightsalmon',\n                   fill='tonexty')\n\nfig.append_trace(trace1,1,1)\nfig.append_trace(trace2,1,2)\nfig.append_trace(trace3,2,1)\n\nfig.update_layout(height=900, width=1500)\n\nfig.show()","bee15f04":"print(df['Air.carrier'].nunique())\nprint('')\nprint(df['Air.carrier'].value_counts().head(15))","e5a1c792":"air_carrier = df[['Air.carrier','Total.Fatal.Injuries']].groupby(by='Air.carrier').agg(['sum','count'])\nair_carrier = air_carrier['Total.Fatal.Injuries'].reset_index()\nair_carrier['Carrier_Fatalities_Per'] = air_carrier['sum']\/air_carrier['count']\nair_carrier.columns =['Air.carrier','Carrier_Injuries','Carrier_Accidents','Carrier_Fatalities_Per']\n\n\ncarrier_uninjured =  df[['Air.carrier','Total.Uninjured']].groupby('Air.carrier').agg(['sum','count'])\ncarrier_uninjured = carrier_uninjured['Total.Uninjured'].reset_index()\ncarrier_uninjured['Uninjured_percentage'] = carrier_uninjured['sum']\/carrier_uninjured['count']\ncarrier_uninjured.columns = ['Air.carrier','Total.Uninjured','Total_Accidents','Uninjured_Percentage']","62fefaac":"carrier = air_carrier[air_carrier['Carrier_Accidents']>minacc]\ncarrier = carrier.sort_values('Carrier_Fatalities_Per').tail(50)\n\nuninjured = carrier_uninjured[carrier_uninjured['Total_Accidents']>minacc]\nuninjured = uninjured.sort_values('Uninjured_Percentage').tail(50)\n\nfig = go.Figure()\n\n\nfig.add_trace(go.Bar(\n   x=carrier['Air.carrier'],\n   y=carrier['Carrier_Accidents'],\n   text=carrier['Carrier_Accidents'],\n   name='Total Air Carrier Accidents',\n   marker_color='steelblue'\n))\n\nfig.add_trace(go.Bar(\n    x=carrier['Air.carrier'],\n    y=carrier['Carrier_Injuries'],\n    text=carrier['Carrier_Injuries'],\n    name='Fatal Injuries Count Of Air Carrier',\n    marker_color = 'powderblue'\n))\n\nfig.update_traces(textposition='outside', texttemplate='%{text:.2s}')\nfig.update_layout(barmode='group', xaxis_tickangle=-45, height=600, width=1300,uniformtext_minsize=7, uniformtext_mode='hide',\n                 title='Total AirCarrier Accidents & Fatal Injuries Count')\nfig.show()\n\n\n\n\nfig = px.bar(x=carrier['Air.carrier'],\n   y=carrier['Carrier_Fatalities_Per'],\n   text=carrier['Carrier_Fatalities_Per'],\n   title='Air Carrier Fatal Percentage',)\n\nfig.update_traces(textposition='outside', texttemplate='%{text:.2s}', marker=dict(color='beige', line=dict(color='darkgrey', width=3)))\nfig.update_layout( height=600, width=1000,uniformtext_minsize=7, uniformtext_mode='hide')\nfig.show()","183ca137":"\nfig = go.Figure()\n\nfig.add_trace(go.Bar(\n   x=uninjured['Air.carrier'],\n   y=uninjured['Total_Accidents'],\n   text=uninjured['Total_Accidents'],\n   name='Total Air Carrier Accidents',\n   marker_color='hotpink'\n))\n\nfig.add_trace(go.Bar(\n    x=uninjured['Air.carrier'],\n    y=uninjured['Total.Uninjured'],\n    text=uninjured['Total.Uninjured'],\n    name='Uninjured Count Of Air Carrier',\n    marker_color = 'lightpink'\n))\n\nfig.update_traces(textposition='outside', texttemplate='%{text:.2s}')\nfig.update_layout(barmode='group', xaxis_tickangle=-45, height=600, width=1300,uniformtext_minsize=7, uniformtext_mode='hide',\n                 title='Total Air Carrier Accidents & Uninjured Count')\nfig.show()\n\n\n\n\nfig = px.bar(x=uninjured['Air.carrier'],\n    y=uninjured['Uninjured_Percentage'],\n    text=uninjured['Uninjured_Percentage'],\n    title='Air Carrier Uninjured Percentage')\n\n\nfig.update_traces(textposition='outside', texttemplate='%{text:.4s}',marker=dict(color='silver', line=dict(color='black', width=3)))\nfig.update_layout(height=600, width=1000,uniformtext_minsize=7, uniformtext_mode='hide')\nfig.show()\n","81727e34":"df1 = df[df['Aircraft.damage'] !='Unknown']\n\ndamage = df1[['Aircraft.damage','Total.Fatal.Injuries']].groupby('Aircraft.damage').agg(['sum','count'])\ndamage = damage['Total.Fatal.Injuries'].reset_index()\ndamage['Fatalities_Per'] = damage['sum']\/damage['count']\ndamage.columns = ['Aircraft.damage','Total_Fatalities','Total_Accidents','Fatalities_Per']\n\n\nuninjured_damage = df1[['Aircraft.damage','Total.Uninjured']].groupby('Aircraft.damage').agg(['sum','count'])\nuninjured_damage = uninjured_damage['Total.Uninjured'].reset_index()\nuninjured_damage['Uninjured_Per'] = uninjured_damage['sum']\/uninjured_damage['count']\nuninjured_damage.columns = ['Aircraft.damage','Total_Uninjured','Total_Accidents','Uninjured_Per']\n","8a0da1dc":"fig = go.Figure()\n\n\nfig.add_trace(go.Bar(\n   x=damage['Aircraft.damage'],\n   y=damage['Total_Accidents'],\n   text=damage['Total_Accidents'],\n   name='Total Air Damage Accidents',\n   marker_color='steelblue'\n))\n\nfig.add_trace(go.Bar(\n    x=damage['Aircraft.damage'],\n    y=damage['Total_Fatalities'],\n    text=damage['Total_Fatalities'],\n    name='Fatal Injuries Count Of Air Damage',\n    marker_color = 'powderblue'\n))\n\nfig.update_traces(textposition='outside', texttemplate='%{text:.2}')\nfig.update_layout(barmode='group', xaxis_tickangle=-45, height=600, width=1000,uniformtext_minsize=7, uniformtext_mode='hide',\n                 title='Air Carrier Fatally Injured Count')\nfig.show()\n\n\n\n\n\nfig = px.bar(x=damage['Aircraft.damage'],\n   y=damage['Fatalities_Per'],\n   text=damage['Fatalities_Per'],\n   title='Air Damage Fatal Percentage',\n            height=600,\n            width=600)\n\n\nfig.update_traces(textposition='outside', texttemplate='%{text:.3}', marker=dict(color='mistyrose', line=dict(color='crimson', width=3)))\nfig.show()","3ad1b251":"fig = go.Figure()\n\n\nfig.add_trace(go.Bar(\n   x=uninjured_damage['Aircraft.damage'],\n   y=uninjured_damage['Total_Accidents'],\n   text=uninjured_damage['Total_Accidents'],\n   name='Total Air Damage Accidents',\n   marker_color='plum'\n))\n\nfig.add_trace(go.Bar(\n    x=uninjured_damage['Aircraft.damage'],\n    y=uninjured_damage['Total_Uninjured'],\n    text=uninjured_damage['Total_Uninjured'],\n    name='Uninjured Count Of Air Damage',\n    marker_color = 'mediumorchid'\n))\n\nfig.update_traces(textposition='outside', texttemplate='%{text:.2}')\nfig.update_layout(barmode='group', xaxis_tickangle=-45, height=600, width=1000,uniformtext_minsize=7, uniformtext_mode='hide',\n                 title='Air Carrier UnInjured Count')\nfig.show()\n\n\n\nfig = px.bar(x=uninjured_damage['Aircraft.damage'],\n    y=uninjured_damage['Uninjured_Per'],\n    text=uninjured_damage['Uninjured_Per'],\n    title='Air Damage Uninjured Percentage',\n    height=500,\n    width=600)\n\n\nfig.update_traces(textposition='outside', texttemplate='%{text:.3s}',marker=dict(color='ivory', line=dict(color='darkorange', width=3)))\nfig.show()\n\n","11417d31":"fig = px.bar(x=df['Amateur.Built'].value_counts().index,\n            y=df['Amateur.Built'].value_counts(),\n            text=(df['Amateur.Built'].value_counts()\/len(df['Amateur.Built'])*100),\n            title='Amateur Built',\n            height=500,\n            width=500\n            )\nfig.update_traces(textposition='outside', texttemplate='%{text:.4s}%', \n                  marker=dict(color='azure', line=dict(color='black', width=3)))\nfig.show()","2b6a9c49":"aircraft_built = df.groupby('Aircraft.damage')['Amateur.Built'].value_counts().reset_index(name='count')\naircraft_built = aircraft_built[aircraft_built['Amateur.Built']!='Unknown']\naircraft_built.style.background_gradient(cmap='BuGn')","8c897f14":"fig= px.bar(x=aircraft_built['Aircraft.damage'],\n           y=aircraft_built['count'],\n           color=aircraft_built['Amateur.Built'],\n           text=aircraft_built['count'],\n           barmode='relative',\n           height=500,\n           width=600,\n           color_discrete_sequence=['darkmagenta','plum'],\n           title='Aircraft Damage & Amateur Built')\nfig.show()","349eff2b":"severity = df[(df['Injury.Severity']=='Fatal') | (df['Injury.Severity']=='Non-Fatal') | (df['Injury.Severity']=='Minor') | (df['Injury.Severity']=='Serious')]\nseverity = severity.groupby('Amateur.Built')['Injury.Severity'].value_counts().reset_index(name='count')\nseverity.style.background_gradient(cmap='Blues')","27d44f29":"fig = px.bar(x=severity['Amateur.Built'],\n            y=severity['count'],\n            color=severity['Injury.Severity'],\n            barmode='group',\n            height=500,\n            width=700,\n            title='Amateur Built & Injury Severity')\nfig.update_traces(marker=dict(color= ['beige','bisque'], line=dict(color='black', width=3)))\nfig.show()","67f70463":"print('There are ',df['LOCATION'].nunique(), ' number unique Locations mention in data')\nprint('')\ndf['LOCATION'].value_counts().head(20)","9dea88f0":"fig = px.bar(x=df['Broad.phase.of.flight'].value_counts().index,\n            y=df['Broad.phase.of.flight'].value_counts(),\n            text=(df['Broad.phase.of.flight'].value_counts()\/len(df['Broad.phase.of.flight'])*100),\n            height=500,\n            width=900,\n            title='Phases Of Flight')\n\nfig.update_traces(textposition='outside',texttemplate='%{text:.4s}%', marker=dict(color='lavender', line=dict(color='steelblue', width=3)))\nfig.show()","cd77deea":"location = df[df['LOCATION'].map(df['LOCATION'].value_counts()) >= 150]\nlocations = location.groupby('LOCATION')['Purpose.of.flight'].value_counts().reset_index(name='count').sort_values(by='count', ascending=False)\nlocations.style.background_gradient(cmap='BuPu')","a5f87a1d":"fig = px.histogram(x=locations['LOCATION'],\n                  y=locations['count'],\n                  color=locations['Purpose.of.flight'],\n                  barmode='group',\n                  height=500,\n                  template='gridon',\n                  title='Location & Purpose Of Flight')\nfig.show()","40bf9467":"location_phase = location.groupby('LOCATION')['Broad.phase.of.flight'].value_counts().reset_index(name='count').sort_values(by='count', ascending=False)\nlocation_phase.style.background_gradient(cmap='viridis')","13e46959":"fig = px.histogram(x=location_phase['LOCATION'],\n                  y=location_phase['count'],\n                  color=location_phase['Broad.phase.of.flight'],\n                  barmode='group',\n                  template='xgridoff',\n                  title='Location & Phases Of Flight')\nfig.show()","429b7e07":"# Number Of Accidents Across Years, Months & Week-Days","037cec9e":"***Analysing Flights Taken For Personal Reasons ***","f0aee8f2":"**Findings:**\n\n1. United Airlines has the highest accidents and fatalities rate.\n","d6234120":"**Phases Of Flight Analysis**","0adc6fdd":"**ANCHORAGE** airport has the highest accident count.","d25a3d91":"***Analysing Skydivings***","424d66e4":"**Location Analysis**","e8379ff5":"***Analysing Air Carrier Accidents With Counts Greater than 10***","c3b142d7":"***Which Air Carrier Has The Most Accident Occurance?***","e0400860":"**Findings:**\n\n1. Most people goes to vacation during summer holidays thats why count of accidents happens to flights taken for personal reasons are high in the months of July, june and August.\n\n2. Accident rate for personal reasons are high during the weekends too.\n\n3. Data seems to be incomplete as the count of accidents for personal reason flight is 1 from year 1948 to 1981.","b10a865c":"***Analysing Purpose Of Flight With Accidents Counts are Greater Than 10*** \n \n ***Purpose Of Flights With Their Fatalities Rate & Percentage***","2572e72b":"**Amateur Built Fatal VS Survived Ratio**","dca621bb":"****Analysis of locations with value counts >= 150 ****","71b8cce2":"***Analysing Purpose Of Flight With Accidents Counts are Greater Than 10***\n\n\n**Purpose Of Flight With Their Uninjured Rate & Percentage**","1b95f7a6":"***Analysing Flights Taken For Business Purposes***","a6b236b0":"**Almost 90% of aircrafts mentioned in the data are built by professionals**","2ec9f2ec":"**Amateur Built Analysis**","fbd3e0a0":"**Findings:**\n\n1. Month of August has the highest accidents count for flight for business purposes.\n\n2. Most of business trip happens during week days that why Accidents count during the weed days are high compared to weekends.\n","72f9a20f":"***AirCraft Damage Analysis***","95cb52ef":"**Incident Fatalities  Analysis**","7d720b4d":"***Air Carrier Accidents With Fatal Injury Analysis***","1900de87":"**Findings:**\n\n1. Skydiving Accidents rate is alot higher on weekends compare to week-days.\n\n2. High count of skydiving accidents happens during the summer holiday months.","2e844f0b":"**Accidents Fatalities Analysis**","ef2745dc":"**Location & Purpose Of Flight**","78b67ab6":"***Air Carrier Accidents Without Injury Analysis***","7d1ce0cc":" ***Purpose Of Flight With Injury Severity.***","82d8015e":"**Findings:**\n\n1. Although Skydiving Accident Counts are low but their Death rate is high.\n\n2. Count of Accidents happens to flight taken for personal purposes are highest.\n\n3. Aerial Application flights has the lowest Death percentage."}}