{"cell_type":{"d9942903":"code","c91ded2f":"code","e1815451":"code","b4dbc666":"code","8bcd2bd8":"code","45e1bc03":"code","b965a5e0":"code","441833ea":"code","086aaca4":"code","d1dd286d":"code","083ff3f2":"code","fd19d7d2":"code","3affed0a":"code","23a7eca1":"code","e0957482":"code","fc3b449a":"code","c133f70a":"code","eb137ad6":"code","26043d62":"code","c859ccaa":"code","48cc7513":"code","b70c235a":"code","3e6cfb14":"code","6d2f0ef3":"code","79c6e8a0":"code","953391b6":"code","f308b7a3":"code","55b9b2b2":"code","fb515e11":"code","3cb3a447":"code","f151fb6f":"code","1f6b45b6":"markdown","aaaa2320":"markdown","7a47b132":"markdown","fc5e92bc":"markdown","ef2fca92":"markdown","ec8f07df":"markdown","dea56856":"markdown","ba79cbac":"markdown","0cd58f9b":"markdown","0384483c":"markdown","9d0963a3":"markdown","b13d44f6":"markdown","a786e21d":"markdown","215fbf51":"markdown","adccc455":"markdown","5812309b":"markdown","bf745386":"markdown","297ea508":"markdown","e20253f8":"markdown","9f046a37":"markdown","224132d4":"markdown","b44a98b4":"markdown","5b2328dc":"markdown","0a9e1a57":"markdown","7e477eaf":"markdown","2755b27a":"markdown","2cb0d146":"markdown","2e49e4b4":"markdown","6ac08f5a":"markdown","1fe6c07b":"markdown"},"source":{"d9942903":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import linear_model\nfrom sklearn.model_selection import train_test_split","c91ded2f":"df = pd.read_csv(\"\/kaggle\/input\/fish-market\/Fish.csv\")\nprint('Shape of dataset= ', df.shape) # To get no of rows and columns\ndf.head(5) # head(n) returns first n records only. Can also use sample(n) for random n records.","e1815451":"df.rename(columns={'Length1':'VerticalLen','Length2':'DiagonalLen','Length3':'CrossLen'},inplace = True) # 'inplace= true' to make change in current dataframe\ndf.sample(5) # Display random 5 records","b4dbc666":"df.info()","8bcd2bd8":"# isna() will return 'True' is value is 'None' or 'numpy.NaN'\n# Characters such as empty strings '' or 'numpy.inf' are not considered NA values (unless you set pandas.options.mode.use_inf_as_na = True)\n# you can also use df.isnull()\ndf.isna().sum() # Get sum of all Nan values from each column\n#df.isna().values.any()  ","45e1bc03":"df.Species.value_counts()","b965a5e0":"df_sp = df.Species.value_counts()\ndf_sp = pd.DataFrame(df_sp)\ndf_sp.T \n# Note: Just like matrices. 'dataframe.T' will Transpose index and columns\n# I am using it just for saving vertical space and making notbook more readable","441833ea":"sns.barplot(x= df_sp.index, y = df_sp.Species) # df_sp.index will returns row labels of dataframe\nplt.xlabel('Species')\nplt.ylabel('Count of Species')\nplt.rcParams[\"figure.figsize\"] = (10,6)\nplt.title('Fish Count Based On Species')\nplt.show()","086aaca4":"df[df.Weight <= 0]","d1dd286d":"df1 = df.drop([40])\nprint('New dimension of dataset is= ', df1.shape)\ndf1.head(5)","083ff3f2":"df1.corr()","fd19d7d2":"plt.rcParams[\"figure.figsize\"] = (10,6) # Custom figure size in inches\nsns.heatmap(df1.corr(), annot =True)\nplt.title('Correlation Matrix')","3affed0a":"df2 = df1.drop(['VerticalLen', 'DiagonalLen', 'CrossLen'], axis =1) # Can also use axis = 'columns'\nprint('New dimension of dataset is= ', df2.shape)\ndf2.head()","23a7eca1":"sns.pairplot(df2, kind = 'scatter', hue = 'Species')","e0957482":"sns.boxplot(x=df2['Weight'])\nplt.title('Outlier Detection based on Weight')","fc3b449a":"def outlier_detection(dataframe):\n  Q1 = dataframe.quantile(0.25)\n  Q3 = dataframe.quantile(0.75)\n  IQR = Q3 - Q1\n  upper_end = Q3 + 1.5 * IQR\n  lower_end = Q1 - 1.5 * IQR \n  outlier = dataframe[(dataframe > upper_end) | (dataframe < lower_end)]\n  return outlier","c133f70a":"outlier_detection(df2['Weight'])","eb137ad6":"sns.boxplot(x =df2['Height'])\nplt.title('Outlier Detection based on Height')","26043d62":"sns.boxplot(x = df2['Width'])\nplt.title('Outlier Detection based on Width')","c859ccaa":"df3 = df2.drop([142,143,144])\ndf3.shape","48cc7513":"df3.describe().T","b70c235a":"#X = df3.iloc[:,[2,3]] # Select columns using column index\nX = df3[['Height','Width']] # Select columns using column name\nX.head()","3e6cfb14":"#y = df3.iloc[:,[1]] # Select columns using column index\ny = df3[['Weight']]\ny.head(5)","6d2f0ef3":"X_train,X_test, y_train, y_test = train_test_split(X, y, test_size =0.2, random_state = 42) \n# Use paramter 'random_state=1' if you want keep results same everytime you execute above code\nprint('X_train dimension= ', X_train.shape)\nprint('X_test dimension= ', X_test.shape)\nprint('y_train dimension= ', y_train.shape)\nprint('y_train dimension= ', y_test.shape)","79c6e8a0":"model = linear_model.LinearRegression()\nmodel.fit(X_train,y_train)","953391b6":"print('coef= ', model.coef_) # Since we have two features(Height and Width), there will be 2 coef\nprint('intercept= ', model.intercept_)\nprint('score= ', model.score(X_test,y_test))","f308b7a3":"predictedWeight = pd.DataFrame(model.predict(X_test), columns=['Predicted Weight']) # Create new dataframe of column'Predicted Weight'\nactualWeight = pd.DataFrame(y_test)\nactualWeight = actualWeight.reset_index(drop=True) # Drop the index so that we can concat it, to create new dataframe\ndf_actual_vs_predicted = pd.concat([actualWeight,predictedWeight],axis =1)\ndf_actual_vs_predicted.T","55b9b2b2":"plt.scatter(y_test, model.predict(X_test))\nplt.xlabel('Weight From Test Data')\nplt.ylabel('Weight Predicted By Model')\nplt.rcParams[\"figure.figsize\"] = (10,6) # Custom figure size in inches\nplt.title(\"Weight From test Data Vs Weight Predicted By Model\")","fb515e11":"plt.scatter(X_test['Height'], y_test, color='red', label = 'Actual Weight')\nplt.scatter(X_test['Height'], model.predict(X_test), color='green', label = 'Prdicted Weight')\nplt.xlabel('Height')\nplt.ylabel('Weight')\nplt.rcParams[\"figure.figsize\"] = (10,6) # Custom figure size in inches\nplt.title('Actual Vs Predicted Weight for Test Data')\nplt.legend()\nplt.show()","3cb3a447":"plt.scatter(X_test['Width'], y_test, color='red', label = 'Actual Weight')\nplt.scatter(X_test['Width'], model.predict(X_test), color='green', label = 'Prdicted Weight')\nplt.xlabel('Width')\nplt.ylabel('Weight')\nplt.rcParams[\"figure.figsize\"] = (10,6) # Custom figure size in inches\nplt.title('Actual Vs Predicted Weight for Test Data')\nplt.legend()\nplt.show()","f151fb6f":"sns.distplot((y_test-model.predict(X_test)))\nplt.rcParams[\"figure.figsize\"] = (10,6) # Custom figure size in inches\nplt.title(\"Histogram of Residuals\")","1f6b45b6":"## Ordinary Least Squares Algorithm\n\n* Lets the train the model using Ordinary Least Squares Algorithm\n* This is one of the most basic linear regression algorithm.\n* Mathematical formula used by ordinary least square algorithm is as below,\n\n   ![ordinary_least_squares_formlua.png](https:\/\/github.com\/satishgunjal\/images\/blob\/master\/ordinary_least_squares_formlua_1.png?raw=true)\n* The objective of Ordinary Least Square Algorithm is to minimize the residual sum of squares. Here the term residual means 'deviation of predicted value(Xw) from actual value(y)'\n* Note that, problem with ordinary least square model is size of coefficients increase exponentially with increase in model complexity","aaaa2320":"## Get count for each species","7a47b132":"As you can see from above comparison, predicted weights are negative when actual weights are smaller than 20gm\n\nWe can also visualize the above comparison using scatter plots","fc5e92bc":"# Step 1: Import The Required Libraries\n* numpy : Numpy is the core library for scientific computing in Python. It is used for working with arrays and matrices.\n* pandas: Used for data manipulation and analysis\n* matplotlib : It\u2019s plotting library, and we are going to use it for data visualization\n* seaborn : It is also data visualization library, based on matplotlib\n* linear_model: Sklearn linear regression model\n* train_test_split : helper function from Sklearn library for splitting the dataset","ef2fca92":"## Create Feature Matrix X and Target Variable y","ec8f07df":"## Predicting The Test Data\n* Check below table for weight from test data and predicted weight by our model\n* We will also plot the scatter plot of weight from test data vs predicted weight","dea56856":"## Important Points\n \n* As you can see our dataset is very small. We have only 6 training example for 'Whitefish' species. \n* Ideal approach would be to divide the dataset and do the prediction for each species. But since we don't have enough data we will ignore the different species during our analysis.","ba79cbac":"## Visulization Using Pairplot","0cd58f9b":"## Understanding Training Results\n* If training is successful then we get the result like above. Where all the default values used by LinearRgression() model are displayed. If required we can also pass these values in fit method. We are not going to change any of these values for now.\n* As per our hypothesis function, 'model' object contains the coef(slope of line) and intercept values","0384483c":"## Using Domain Knowledge For Data Cleaning\n* Depending on the maximum and minimum weight of fish for each species we can very easily remove the outliers. But because of limited data we are going to ignore the individual species and treat them as one. \n* Now lets use some common sense and find and remove the training data where weight of fish is 0 or negative","9d0963a3":"Lets drop the training data at row 40. Note: Anytime we make changes in dataframe we are going to increament the dataframe name by 1","b13d44f6":"# Introduction\n \n![header.png](https:\/\/raw.githubusercontent.com\/satishgunjal\/images\/master\/fish.png)\n\nIn this study I am using Python 3 environment to create a machine learning model to predict the weight of the fish based on the body measurement data of seven types of fish species. You can download the dataset from Kaggle. [Fish market](https:\/\/www.kaggle.com\/aungpyaeap\/fish-market)\n \nI am going to use Linear model from sklearn library. Since there are multiple features its **Multiple\/Multi Variable Linear Regression** problem.\n \nI have documented the code and tried to explain every important concept or library I have using during this study. I hope it will be helpful.\n\n","a786e21d":"# Step 4: Data Analysis, Cleaning and Visualization\n\n## Check for missing values","215fbf51":"Good, there no null values in our dataset.","adccc455":"## Correlation Check\n* Correlation helps us investigate and establish relationships between variables\n* Note that high amount of correlation between independent variables suggest that linear regression estimation will be unreliable","5812309b":"From above plot its clear that there are three outlier as per the 'Weight' data. Lets create a function to find the index of these outliers.","bf745386":"## Reading Correlation Matrix \n* Correlation coefficient range from -1 to +1\n* Sign(+\/-) indicate the direction and amount indicate the strength of correlation\n* +1.00 means perfect positive relationship\n* 0.00 means no relationship\n* -1.00 means perfect negative relationship\n* The correlation between 'VerticalLen', 'DiagonalLen' and 'Crosslen' is almost 1. This will cause 'Multicolinearity' and if we don't take care of it, it may lead to unreliable predictions.\n \nLet's drop the 'VerticalLen', 'DiagonalLen' and 'Crosslen' column.","297ea508":"# Step 6: Evaluating the Model\n\nPlot a histogram of the residuals.","e20253f8":"# Conclusion\n* As you can see from above results our model score is 89.6%, which is good enough to start with.\n* But one issue with prediction is negative weight values. This behavior is true for smaller(less than 20gm) weight values.\n* In machine learning, every time we are solving a problem we make some choices which affect the results.\n* We have also made few choices like treating all species as one since we have small dataset.\n* I will try again with different approach to try an eliminate the negative weight values.","9f046a37":"# Step 2: Load The Data","224132d4":"## Outlier Detection and Removal\n \n* Outlier is an extremely high or extremely low value in our data\n* We use below formula to identify the outlier\n  ```\n    ( Greater than Q3 + 1.5 * IQR ) OR ( Lower than Q1 -1.5 * IQR )\n \n    where,\n    Q1  = First quartile\n    Q3  = Third quartile\n    IQR = Interquartile range (Q3 - Q1)\n  ```\n \n* Lets use box plot for outlier visualization. \n* Vertical line on the left side of box plot represent the 'min' value of dataset and vertical line on right side of box plot represent the 'max' value of dataset. Any value which is outside this range is outlier and represented by '*'","b44a98b4":"There is no outlier so no need to call 'outlier_detection()' function.\n\nLets check for 'Width' data","5b2328dc":"So based on 'Weight' data, index 142, 143 and 144 are outliers\n\nLets check for 'Height' data","0a9e1a57":"Let's print the detailed information about our dataset","7e477eaf":"# Step 5: Build Machine Learning Model","2755b27a":"There is no outlier so no need to call 'outlier_detection()' function.","2cb0d146":"## Create test and train dataset\n* We will split the dataset, so that we can use one set of data for training the model and one set of data for testing the model\n* We will keep 20% of data for testing and 80% of data for training the model","2e49e4b4":"From the above pair plot, we can see that there seems to be some correlations between  Height, Width and the Weight. Note that since we have multiple species the correlation between Height and Width of all species is not exactly linear with Weight.\n \nNow, since we have the final dataset ready lets analyze and remove the outliers if any","6ac08f5a":"Above function gives us required values but lets create dataframe for species so that we can use it for better visualization","1fe6c07b":" \n# Step 3: Understand The Data\n* There are total 159 rows(training samples) and 7 columns in dataset. \n* Each column details are as below \n \n| Column Name | Details\n| ------------|--------------\n| Species     | Species name of fish \n| Weight      | Weight of fish in gram     \n| Length1     | Vertical length in CM\n| Length2     | Diagonal length in CM\n| Length3     | Cross length in CM\n| Height      | Height in CM\n| Width       | Diagonal width in CM   \n \n* Features\/input values\/independent variables are 'Species', 'Length1','Length2', 'Length3', 'Height' and 'Width'\n* Target\/output value\/dependent variable is 'Weight'\n* So, we have to estimate the weight of the fish based on its measurement values.\n \nLet's change the name of columns lenght1,length2 and length3  as per the content of it."}}