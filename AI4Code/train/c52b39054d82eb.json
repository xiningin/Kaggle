{"cell_type":{"4707cd11":"code","aa723505":"code","e701166d":"code","127d7e64":"code","55d3ddf9":"code","5a3326e4":"code","a2d3f705":"code","4eb1fdd6":"code","0496f9e6":"code","e60a610f":"code","a541bb70":"code","c16c5a9c":"code","f254a2b1":"code","37fdc465":"code","f5468117":"code","9143db28":"code","345644bb":"code","a1ce562f":"code","0307b1cb":"code","6f68449c":"code","afa07983":"code","d6212d19":"code","0f43f672":"code","d442bf25":"code","1dac8de1":"code","507f50e3":"code","bf2fe517":"code","2bc6861a":"code","dab02ab9":"code","2016a0d0":"code","023aa7cb":"code","f7f5c033":"code","ad55f9e1":"code","3062acee":"markdown"},"source":{"4707cd11":"import numpy             as np\nimport pandas            as pd\nimport matplotlib.pyplot as plt\nimport seaborn           as sns","aa723505":"### line graph of the matplotlib\nstarting   = 1.0\nending     = 10.0\nnum        = 10\nx          = range(10)\ny          = np.linspace(1.0,10.0,10)\n\n\nplt.plot(x,y)","e701166d":"## legend title and lebels within matplotlib\nimport math\nx      = np.linspace(1,10,1000)\ny1     = np.sin(x)\ny2     = np.cos(x) \n\n\n\nplt.plot(x,y1 ,label = \"sin curve\")\nplt.plot(x,y2 ,label = \"cos curve\")\nplt.xlabel(\"X\")\nplt.ylabel(\"Y\")\nplt.title(\"sin wave\")\nplt.legend()","127d7e64":"## doing bar chart and histogram\n## bar chart show the actual value\n## the histogram will show the distibution\nx     = [x for x in range(1,11) if x%2==0]\ny     = [x for x in range(11) if x%2!=0]\n\n\n\nplt.bar(x,y)\nplt.xlabel(\"X\")\nplt.ylabel(\"Y\")\nplt.title(\"bar chart\")","55d3ddf9":"## multiple bar chart with legend\nx1     = [1,2,3,4,5,6,7,8,9,10]\nx2     = [5,6,7,8,9,10,11,12,13,14,15]\ny1     = [5,6,4,3,2,3,4,56,6,7]\ny2     = [23,12,34,56,3,23,34,34,12,10,20]\n\n\n## for bar chart you need do give color \n## with the label\nplt.bar(x1,y1,color = \"r\",label=\"first\")\nplt.bar(x2,y2,color=\"b\",label=\"second\")\nplt.xlabel(\"X\")\nplt.ylabel(\"Y\")\nplt.legend()\nplt.title(\"multiple bar char\")\nplt.show()","5a3326e4":"data      = [x+np.random.randint(100) for x in range(100) if x%4==0]\nx         = [x for x in range(len(data))]\n\n\nplt.bar(x,data)","a2d3f705":"## histogram use to condense the data with bins\ndata      = [x-np.random.randint(100) for x in range(100) if x%4==0]\n\n\nplt.hist(data,label=\"histogram\")\nplt.legend()","4eb1fdd6":"## scatter plot simple graph\ny1      =  [x+np.random.randint(100) for x in range(50)]\ny2      =  [x+np.random.randint(100) for x in range(50)]\nx       =  [x for x in range(len(y1))]\n\n\n\n\nplt.scatter(x,y1,label = \"first\")\nplt.scatter(x,y2,label = \"second\",marker = \"*\",s=150) ## s for sizes\nplt.legend()","0496f9e6":"# with different marker size\nplt.scatter(x,y1,label = \"first\")\nplt.scatter(x,y2,label = \"second\",marker = \"*\",s=400) ## s for sizes\nplt.legend()","e60a610f":"## stack plot for matplotlib\ndays         = [x for x in range(1,8)]\nsleeping     = [10,6,8,7,6,9,3]\nworking      = [8,5,6,4,8,10,2]\neating       = [2,4,3,5,4,3,2]\nplaying      = [1,3,2,3,2,3,2]\n\n## you can have label in the stack plot\nplt.plot([],[],color='m',label=\"sleeping\",linewidth=10)\nplt.plot([],[],color='c',label=\"working\",linewidth=10)\nplt.plot([],[],color='r',label=\"eating\",linewidth=10)\nplt.plot([],[],color='k',label=\"playing\",linewidth=10)\n## these are the fake plots for the label\n\n\nplt.stackplot(days,sleeping,working,eating,playing,colors=['m','c','r','k'])\nplt.legend()","a541bb70":"## pie chars using matplotlib\nhours    = [8,8,4,2,2]\nwork     = ['sleep','work','play','eat','other']\nexplode = (0, 0.1, .1, 0,.1) \n\n\n\nplt.pie(hours,labels = work,explode=explode)\nplt.legend()","c16c5a9c":"## loading data from csv data and plotting it\n## loading the iris data from github","f254a2b1":"import pandas as pd\ndf = pd.read_csv('https:\/\/gist.githubusercontent.com\/tanviredu\/43e5ebea680d1630d9544f722aecce53\/raw\/6f9306ad21398ea43cba4f7d537619d0e07d5ae3\/iris.csv')\ndf.head()","37fdc465":"X = []\nY = []\nfor item in df.values:\n  X.append(item[0])\n  Y.append(item[1])\nplt.scatter(X,Y)  ","f5468117":"## we can add multiple data for scatering\nX = []\nY = []\nZ = []\nfor item in df.values:\n  X.append(item[0])\n  Y.append(item[1])\n  Z.append(item[2])\nplt.scatter(X,Y,label  = \"first  properties\")\nplt.scatter(X,Z, label = \"Second properties\")\nplt.legend()\n\n\n","9143db28":"df = pd.read_csv('https:\/\/raw.githubusercontent.com\/tanviredu\/Google-Stock-Price-Prediction\/master\/Google_Stock_Price_Train.csv')","345644bb":"df.head()","a1ce562f":"df = df.set_index(\"Date\")","0307b1cb":"df.head()","6f68449c":"df['Close'] = pd.to_numeric(df['Close'], errors='coerce').astype('float64')\n","afa07983":"df[['Open','Close']].plot()\nplt.xlabel(\"\")\nplt.figure()\nplt.show()","d6212d19":"# creating subplot\nimport numpy              as np\nimport matplotlib.pyplot  as pd","0f43f672":"def curve(sin=True):\n  if sin==True:\n\n    X = np.linspace(1,10,100)\n    Y = np.sin(X)\n    return X,Y\n  else:\n    X = np.linspace(1,10,100)\n    Y = np.cos(X)\n    return X,Y\n\n","d442bf25":"x1,y1 = curve(sin=True)\nx2,y2 = curve(sin=False)\nplt.plot(x1,y1,label = \"sin curve\")\nplt.plot(x2,y2,label  = \"cos curve\") \nplt.legend()\n","1dac8de1":"## figure with a just one subplot\nfig, ax = plt.subplots()\nax.plot(x1, y1)\nax.set_title('A single plot')","507f50e3":"## stacking subplot\nrow = 2\nfig, ax = plt.subplots(row)\nfig.suptitle('Vertically stacked subplots')\nax[0].plot(x1, y1,color='r')\nax[1].plot(x2, y2)\n","bf2fe517":"## horijontal plot\nrow = 1\ncolumn = 2\nfig, (ax1, ax2) = plt.subplots(row, column)\nfig.suptitle('Horizontally stacked subplots')\nax1.plot(x1, y1,color='r')\nax2.plot(x2, y2)","2bc6861a":"x1,y1 = curve(sin=True)\nx2,y2 = curve(sin=True)\nx3,y3 = curve(sin=False)\nx4,y4 = curve(sin=False)","dab02ab9":"col = 2\nrow = 2\nfig, axs = plt.subplots(row, col)\naxs[0, 0].plot(x1, y1)\naxs[0, 0].set_title('Axis [0,0]')\naxs[0, 1].plot(x2, y2, 'tab:orange')\naxs[0, 1].set_title('Axis [0,1]')\naxs[1, 0].plot(x3, y3, 'tab:green')\naxs[1, 0].set_title('Axis [1,0]')\naxs[1, 1].plot(x4, y4, 'tab:red')\naxs[1, 1].set_title('Axis [1,1]')\n","2016a0d0":"row = 3\nfig, axs = plt.subplots(row, sharex=True, sharey=True)\nfig.suptitle('Sharing both axes')\naxs[0].plot(x1, y1)\naxs[1].plot(x2, y2, 'o')\naxs[2].plot(x3, y3, '+')","023aa7cb":"row = 3\nfig, axs = plt.subplots(row, sharex=True, sharey=True)\nfig.suptitle('Sharing both axes')\naxs[0].plot(df['Open'])\naxs[1].plot(df['Close'], 'o')\naxs[2].plot(df['High'], '+')","f7f5c033":"import pandas as pd\ndf = pd.read_csv('https:\/\/gist.githubusercontent.com\/tanviredu\/43e5ebea680d1630d9544f722aecce53\/raw\/6f9306ad21398ea43cba4f7d537619d0e07d5ae3\/iris.csv')\ndf.head()","ad55f9e1":"print(df['variety'].unique())\nexplode = (0, 0.1, .1) \nplt.pie(df['variety'].value_counts(),labels=df['variety'].unique(),explode=explode)\nplt.legend()\n","3062acee":"<a href=\"https:\/\/colab.research.google.com\/github\/tanviredu\/SENTDEX_MATPLOTLIB\/blob\/master\/Matplotlib_graph_viz.ipynb\" target=\"_parent\"><img src=\"https:\/\/colab.research.google.com\/assets\/colab-badge.svg\" alt=\"Open In Colab\"\/><\/a>"}}