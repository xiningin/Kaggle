{"cell_type":{"1c347d9d":"code","d83c2cd9":"code","1e473474":"code","b1cac789":"code","5c8837d4":"code","1e31d433":"code","1b5efdb4":"code","4d0361f4":"code","8bc08dad":"code","02e64672":"code","2f2f0b8e":"code","29e5857f":"code","44b83440":"code","2ef21c1c":"code","21648083":"code","a43d81d5":"code","e8f96d11":"code","f7586fd2":"code","13700ba8":"code","b4828942":"code","3b71645f":"markdown","31848711":"markdown","3dd1c10c":"markdown","d4a921c5":"markdown","1e634675":"markdown","b0d19164":"markdown","88267785":"markdown","d09840cb":"markdown","00f56f45":"markdown","da3e355f":"markdown","a36ae449":"markdown","a0cc6874":"markdown"},"source":{"1c347d9d":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.model_selection import KFold,train_test_split\nfrom sklearn.metrics import roc_auc_score\nfrom lightgbm import LGBMClassifier\nimport optuna","d83c2cd9":"train = pd.read_csv(r'..\/input\/tabular-playground-series-sep-2021\/train.csv')\ntest = pd.read_csv(r'..\/input\/tabular-playground-series-sep-2021\/test.csv')\nsample_submission = pd.read_csv(r'..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv')","1e473474":"print(f'train set have {train.shape[0]} rows and {train.shape[1]} columns.')\nprint(f'test set have {test.shape[0]} rows and {test.shape[1]} columns.') \nprint(f'sample_submission set have {sample_submission.shape[0]} rows and {sample_submission.shape[1]} columns.') ","b1cac789":"train.head()","5c8837d4":"train.drop('id',axis=1,inplace=True)\ntest.drop('id',axis=1,inplace=True)","1e31d433":"print('train: ')\ntrain.describe().T.style.bar(subset=['mean'], color='#606ff2')\\\n                            .background_gradient(subset=['std'], cmap='PuBu')\\\n                            .background_gradient(subset=['50%'], cmap='PuBu')","1b5efdb4":"print('test: ')\ntest.describe().T.style.bar(subset=['mean'], color='#606ff2')\\\n                            .background_gradient(subset=['std'], cmap='PuBu')\\\n                            .background_gradient(subset=['50%'], cmap='PuBu')","4d0361f4":"plt.figure(figsize=(14,5))\ntarget_values = train['claim'].value_counts()\nsns.barplot(x=target_values.index, y=target_values.values,linewidth=1.5, facecolor='aquamarine',\n                 errcolor=\".2\", edgecolor=\".2\")\nplt.title(\"Target unique values\", fontdict={'fontsize':20})\nplt.show()","8bc08dad":"fig = plt.figure(figsize = (15, 60))\nfor i in range(len(train.columns.tolist()[0:118])):\n    plt.subplot(24,5,i+1)\n    sns.set_style(\"white\")\n    plt.title(train.columns.tolist()[0:118][i], size = 10, fontname = 'monospace')\n    a = sns.kdeplot(train[train.columns.tolist()[0:118][i]], shade = True, alpha = 0.9, linewidth = 1.5, facecolor='aquamarine', edgecolor=\".2\")\n    plt.ylabel('')\n    plt.xlabel('')\n    plt.xticks(fontname = 'monospace')\n    plt.yticks([])\n    for j in ['right', 'left', 'top']:\n        a.spines[j].set_visible(False)\n        a.spines['bottom'].set_linewidth(1.2)\n        \nfig.tight_layout(h_pad = 3)\nplt.show()","02e64672":"fig = plt.figure(figsize = (15, 60))\nfor i in range(len(train.columns.tolist()[0:118])):\n    plt.subplot(24,5,i+1)\n    sns.set_style(\"white\")\n    plt.title(train.columns.tolist()[0:118][i], size = 10, fontname = 'monospace')\n    a = sns.boxplot(train[train.columns.tolist()[0:118][i]], linewidth = 1.5, color=\"aquamarine\")\n    plt.ylabel('')\n    plt.xlabel('')\n    plt.xticks(fontname = 'monospace')\n    plt.yticks([])\n    for j in ['right', 'left', 'top']:\n        a.spines[j].set_visible(False)\n        a.spines['bottom'].set_linewidth(1.2)\n        \nfig.tight_layout(h_pad = 3)\nplt.show()","2f2f0b8e":"y = train['claim']\ntrain.drop('claim',axis=1,inplace=True)","29e5857f":"features = []\nfor feature in train.columns:\n    features.append(feature)\nprint(features)","44b83440":"train['missing'] = train[features].isna().sum(axis=1)\ntest['missing'] = test[features].isna().sum(axis=1)","2ef21c1c":"from sklearn.impute import SimpleImputer\nss = SimpleImputer(missing_values=np.nan, strategy='mean')\ntrain[features] = ss.fit_transform(train[features])\ntest[features] = ss.transform(test[features])","21648083":"from sklearn.preprocessing import StandardScaler\nscale = StandardScaler()\ntrain[features] = scale.fit_transform(train[features])\ntest[features] = scale.transform(test[features])\nX = train","a43d81d5":"def fit_lgb(trial, x_train, y_train, x_test, y_test):\n    params = {\n        'reg_alpha' : trial.suggest_loguniform('reg_alpha' , 1e-4, 1e4),\n        'reg_lambda' : trial.suggest_loguniform('reg_lambda' ,1e-4, 1e4),\n        'learning_rate' : trial.suggest_uniform('learning_rate' , 0.03 , 0.07),\n        'max_depth' : trial.suggest_int('max_depth', 1 , 20),\n        'n_estimators' : trial.suggest_int('n_estimators', 100 , 20000),\n        'min_child_weight' : trial.suggest_loguniform('min_child_weight', 1e-4, 1e4),\n        'subsample' : trial.suggest_uniform('subsample' , 0.01 , 2.0), \n        'colsample_bytree' : trial.suggest_loguniform('colsample_bytree', 0.52 , 1),\n        'min_child_samples' : trial.suggest_int('min_child_samples', 76, 80),\n        'device_type' : 'gpu','n_jobs':4\n    } \n    \n    \n    model = LGBMClassifier(**params)\n    model.fit(x_train, y_train,eval_set=[(x_test,y_test)], early_stopping_rounds=150, verbose=False)\n    \n    y_train_pred = model.predict_proba(x_train)[:,1]\n    \n    y_test_pred = model.predict_proba(x_test)[:,1]\n    y_train_pred = np.clip(y_train_pred, 0.1, None)\n    y_test_pred = np.clip(y_test_pred, 0.1, None)\n    \n    log = {\n        \"train roc_auc\": roc_auc_score(y_train, y_train_pred),\n        \"valid roc_auc\": roc_auc_score(y_test, y_test_pred)\n    }\n    \n    return model, log","e8f96d11":"def objective(trial):\n    roc_auc = 0\n    x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.20)\n    model, log = fit_lgb(trial, x_train, y_train, x_test, y_test)\n    roc_auc += log['valid roc_auc']\n        \n    return roc_auc","f7586fd2":"lgb_params = {'reg_alpha': 555.3212078027055, \n              'reg_lambda': 15.677857553252077, \n              'learning_rate': 0.0458129866340546, \n              'max_depth': 16, \n              'n_estimators': 8917, \n              'min_child_weight': 1168.6272539629065, \n              'subsample': 0.1477767833524252, \n              'colsample_bytree': 0.5442132906548389, \n              'min_child_samples': 80,\n              'device_type' : 'gpu',\n              'importance_type':'gain',\n              'n_jobs':4}","13700ba8":"folds = KFold(n_splits = 5, random_state = 2021, shuffle = True)\n\npredictions = np.zeros(len(test))\n\nfor fold, (trn_idx, val_idx) in enumerate(folds.split(X)):\n    print(f\"Fold: {fold}\")\n    X_train, X_test = X.iloc[trn_idx], X.iloc[val_idx]\n    y_train, y_test = y.iloc[trn_idx], y.iloc[val_idx]\n\n    model = LGBMClassifier(**lgb_params)\n   \n    model.fit(X_train, y_train,\n              eval_set=[(X_test, y_test)],\n                early_stopping_rounds=400,\n                verbose=False)\n    pred = model.predict_proba(X_test)[:,1]\n    roc = roc_auc_score(y_test, pred)\n    print(f\" roc_auc_score: {roc}\")\n    print(\"-\"*50)\n    \n    predictions += model.predict_proba(test)[:,1] \/ folds.n_splits ","b4828942":"sample_submission['claim'] = predictions\nsample_submission.to_csv(f'lgb.csv',index = False)","3b71645f":"* adding a new column **missing**","31848711":"* imputing missing values","3dd1c10c":"<div style=\"background-color:powderblue;\">\n    <h1><center>Building Model<\/center><\/h1>\n<\/div>","d4a921c5":"<div style=\"background-color:skyblue;\">\n    <h1><center>Tabular Playground Series - SEP 2021<\/center><\/h1>\n<\/div>\n\n![](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/26480\/logos\/header.png?t=2021-04-09-00-57-05)","1e634675":"* these are the best params recovered from **Optuna**.","b0d19164":"#### **Features Distribution:**","88267785":"#### **Target Distribution:**","d09840cb":"<div class=\"alert alert-block alert-info\">\n<h4>If you like this notebook, please upvote it! \n     Thank you! :)<\/h4>\n<\/div>","00f56f45":"<div style=\"background-color:powderblue;\">\n    <h2><center>lightgbm<\/center><\/h2>\n<\/div>","da3e355f":"<div style=\"background-color:powderblue;\">\n    <h1><center>data visualization<\/center><\/h1>\n<\/div>","a36ae449":"<div style=\"background-color:powderblue;\">\n    <h1><center>Data Preprocessing<\/center><\/h1>\n<\/div>","a0cc6874":"<div style=\"background-color:powderblue;\">\n    <h2><center>Prediction and submission<\/center><\/h2>\n<\/div>"}}