{"cell_type":{"c3b79ccd":"code","f9090579":"code","0a8f3031":"code","fa4e140a":"code","515b0539":"code","fa75a17f":"code","044004f8":"code","63ac8f90":"code","41121cc1":"code","35dbb404":"code","eadfcdec":"code","2b1fe961":"code","c90066ec":"code","0c47643f":"code","0b2c42f7":"code","be4d2f67":"code","e2c79dc0":"code","baa0cfa3":"code","636115f0":"code","a22232f5":"code","8c6705a6":"code","fbb62c5b":"code","d916de1e":"code","6c52bd07":"code","3bad1c97":"code","36f38df5":"code","48c96926":"code","58cac761":"code","aca6c362":"code","fc4b469a":"code","3f495c70":"code","f92b9741":"markdown","fd436887":"markdown","8aeb3b0d":"markdown","a88e0c3d":"markdown","5fb3c53b":"markdown","cad09378":"markdown","7070d66c":"markdown","d5938cd9":"markdown","e914b5b1":"markdown","43aeb00b":"markdown","df410962":"markdown","a2ac5bae":"markdown","189bcc03":"markdown"},"source":{"c3b79ccd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f9090579":"train_data = pd.read_csv(\"\/kaggle\/input\/forest-cover-type-prediction\/train.csv\")\ntrain_data = train_data.iloc[:,1:]","0a8f3031":"train_data.shape","fa4e140a":"train_data.dtypes","515b0539":"train_data.skew()","fa75a17f":"train_data['Cover_Type'].value_counts()","044004f8":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\ndata = train_data.iloc[:,:10] \ncols = data.columns \ndata_corr = data.corr()\ncorr_list = []\n\nfor i in range(0,10): \n    for j in range(i+1,10): \n        if (data_corr.iloc[i,j] >= 0.5 and data_corr.iloc[i,j] < 1) or (data_corr.iloc[i,j] < 0 and data_corr.iloc[i,j] <= -0.5):\n            corr_list.append([data_corr.iloc[i,j],i,j]) \n        \ns_corr_list = sorted(corr_list,key=lambda x: -abs(x[0]))\n\nfor v,i,j in s_corr_list:\n    sns.pairplot(train_data, hue = \"Cover_Type\", size = 6, x_vars = cols[i],y_vars = cols[j] )\n    plt.show()","63ac8f90":"cols = dataset.columns\n\nsize = len(cols)-1\n\nx = cols[size]\n\ny = cols[0:size]\n\nfor i in range(0,size):\n    sns.violinplot(data=dataset,x=x,y=y[i])  \n    plt.show()\n","41121cc1":"train_data = pd.read_csv(\"\/kaggle\/input\/forest-cover-type-prediction\/train.csv\")\ntrain_data.head()","35dbb404":"test_data = pd.read_csv(\"\/kaggle\/input\/forest-cover-type-prediction\/test.csv\")\ntest_data.head()","eadfcdec":"x = train_data.drop(['Id','Cover_Type'],axis=1)\ny = train_data['Cover_Type']","2b1fe961":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,random_state=40)","c90066ec":"from sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_jobs = -1, n_neighbors = 1)\nknn.fit(x_train, y_train)","0c47643f":"acc_knn_result = knn.score(x_test, y_test)\nprint(acc_knn_result)","0b2c42f7":"from sklearn.svm import SVC\n\nfor i in [10]:\n    #Set the base model\n    svcm = SVC(random_state=0,C=i)\n\nsvcm.fit(x_train, y_train)","be4d2f67":"acc_svm_result = svcm.score(x_test, y_test)\nprint(acc_svm_result)\n","e2c79dc0":"from sklearn.ensemble import RandomForestClassifier\n\nrfc = RandomForestClassifier(n_estimators=70)\nrfc.fit(x_train,y_train)","baa0cfa3":"acc_rfc_result = rfc.score(x_test, y_test)\nprint(acc_rfc_result)","636115f0":"from sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ngnb.fit(x_train, y_train)","a22232f5":"acc_gnb_result = gnb.score(x_test, y_test)\nprint(acc_gnb_result)","8c6705a6":"from sklearn.tree import DecisionTreeClassifier\nfor max_depth in [13]:\n    dtc = DecisionTreeClassifier(random_state = 0,max_depth = max_depth)\ndtc.fit(x_train,y_train)","fbb62c5b":"acc_dtc_result = dtc.score(x_test, y_test)\nprint(acc_dtc_result)","d916de1e":"from sklearn.ensemble import BaggingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\nbasement = DecisionTreeClassifier(random_state = 0,max_depth = 13)\nn_list = [100]\n\nfor i in n_list:\n    bdt = BaggingClassifier(n_jobs = -1,base_estimator = basement, n_estimators = i, random_state = 0)\nbdt.fit(x_train,y_train)","6c52bd07":"acc_bdt_result = bdt.score(x_test, y_test)\nprint(acc_bdt_result)","3bad1c97":"from sklearn.ensemble import RandomForestClassifier\n\nn_list = [100]\n\nfor i in n_list:\n    rfc = RandomForestClassifier(n_jobs = -1, n_estimators = i, random_state = 0)\n\nrfc.fit(x_train,y_train)","36f38df5":"acc_rfc_result = rfc.score(x_test, y_test)\nprint(acc_rfc_result)","48c96926":"from sklearn.ensemble import ExtraTreesClassifier\n\nfor i in [100]:\n    etc = ExtraTreesClassifier(n_jobs=-1,n_estimators=i, random_state=0)\netc.fit(x_train,y_train)","58cac761":"acc_etc_result = etc.score(x_test, y_test)\nprint(acc_etc_result)","aca6c362":"dataset_test = test_data.drop(\"Id\", axis = 1)\npredict = rfc.predict(dataset_test)","fc4b469a":"submission = pd.DataFrame(data = predict,columns = ['Cover_Type'])\nsubmission[\"Id\"] = test_data[\"Id\"]\nsubmission.set_index(\"Id\",inplace = True)\nsubmission.head()","3f495c70":"submission.to_csv(\"Submission.csv\")","f92b9741":"Data analysis","fd436887":"Prediction-DecisionTree (Non-linear algo)","8aeb3b0d":"Prediction-Bagged Decision Trees","a88e0c3d":"Prediction-RandomForestClassifier","5fb3c53b":"Prediction-SVM","cad09378":"Prediction-Extra Trees","7070d66c":"Initialization","d5938cd9":"Prediction-Naive Bayes","e914b5b1":"Prediction prepare","43aeb00b":"Output","df410962":"Visualisation","a2ac5bae":"Prediction-KNN","189bcc03":"Prediction-Random Forest"}}