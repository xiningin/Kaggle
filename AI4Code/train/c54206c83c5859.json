{"cell_type":{"0162af9b":"code","f0f9eefe":"code","f4c22709":"code","4b095a1d":"code","b3917923":"code","e004baea":"code","6f778f6d":"code","99e0e10d":"code","7902ab97":"code","9ab7bad2":"code","fda50916":"code","8d9d93a6":"code","e7a542b7":"code","71151858":"code","51e900e0":"code","736c4a77":"code","32744119":"code","9a293145":"code","b86342bc":"code","5e021e92":"code","76c6e4cc":"code","6fb01378":"code","c98bc804":"code","d041999d":"code","48e8ccbd":"code","3ad213cc":"code","2bbf3aac":"code","7eda00ab":"code","3a9965fe":"code","9c6e6c41":"markdown","29b3fd41":"markdown","203c8c0c":"markdown","1d3e0b52":"markdown","7e71b940":"markdown","b22d7db2":"markdown","16af9af7":"markdown","21f4ad07":"markdown","7007db07":"markdown","b7058efd":"markdown","e30e92c1":"markdown","02733561":"markdown","149f9020":"markdown","10b3c1f1":"markdown","ea1821a8":"markdown","877b2bbe":"markdown","f03ba3f2":"markdown","8da777d7":"markdown","c620838e":"markdown","eba6d274":"markdown","8bfcff15":"markdown","857a070f":"markdown","dab2bd61":"markdown","4b483810":"markdown","6af4c679":"markdown","b25fea03":"markdown","8b90e442":"markdown","2b265c38":"markdown"},"source":{"0162af9b":"import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport warnings\nwarnings.filterwarnings('ignore')","f0f9eefe":"data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndisplay(data.head())\n\ntrainlen = len(data)\nprint(trainlen)\n\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ndisplay(test.head())\n\npassenger_id = test.PassengerId","f4c22709":"data_com = pd.concat([data, test])\ndata_com.info()","4b095a1d":"data_com['Title']= data_com.Name.str.split(', ', expand=True)[1].str.split('.', expand=True)[0]","b3917923":"data_com['Title'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','the Countess','Jonkheer','Col','Rev','Capt','Sir','Don','Dona'],\n                        ['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr','Mrs'],inplace=True)","e004baea":"data_com.loc[(data_com.Age.isnull())&(data_com.Title=='Mr'),'Age']=33\ndata_com.loc[(data_com.Age.isnull())&(data_com.Title=='Mrs'),'Age']=36\ndata_com.loc[(data_com.Age.isnull())&(data_com.Title=='Master'),'Age']=5\ndata_com.loc[(data_com.Age.isnull())&(data_com.Title=='Miss'),'Age']=22\ndata_com.loc[(data_com.Age.isnull())&(data_com.Title=='Other'),'Age']=45","6f778f6d":"data_com.Embarked.fillna('S', inplace=True)\ndata_com.isnull().sum()","99e0e10d":"x = list(data_com.Cabin.fillna('O'))\nfor i in range(len(x)):\n    x[i] = x[i][0]\ndata_com['Cabin_code']= pd.Series(x)","7902ab97":"data_com['Age_band']=0\ndata_com.loc[data_com['Age']<=16,'Age_band']=0\ndata_com.loc[(data_com['Age']>16)&(data_com['Age']<=32),'Age_band']=1\ndata_com.loc[(data_com['Age']>32)&(data_com['Age']<=48),'Age_band']=2\ndata_com.loc[(data_com['Age']>48)&(data_com['Age']<=64),'Age_band']=3\ndata_com.loc[data_com['Age']>64,'Age_band']=4\ndata_com.head(2)","9ab7bad2":"data_com.Fare.fillna(10, inplace=True)","fda50916":"data_com['Family_Size']=0\ndata_com['Family_Size']=data_com['Parch']+data_com['SibSp']#family size\ndata_com['Alone']=0\ndata_com.loc[data_com.Family_Size==0,'Alone']=1 #Alone","8d9d93a6":"data_com['Fare_Range']=pd.qcut(data_com['Fare'],4)","e7a542b7":"data_com['Fare_cat']=0\ndata_com.loc[data_com['Fare']<=7.91,'Fare_cat']=0\ndata_com.loc[(data_com['Fare']>7.91)&(data_com['Fare']<=14.454),'Fare_cat']=1\ndata_com.loc[(data_com['Fare']>14.454)&(data_com['Fare']<=31),'Fare_cat']=2\ndata_com.loc[(data_com['Fare']>31)&(data_com['Fare']<=513),'Fare_cat']","71151858":"data_com.drop(['Name','Age','Ticket','Fare','Cabin','Fare_Range','PassengerId'], axis=1, inplace=True)","51e900e0":"train = data_com.iloc[:891]\ntest = data_com.iloc[891:]\n\ny = train['Survived']\nx = train.drop('Survived', axis=1)","736c4a77":"from sklearn.model_selection import train_test_split\nxtrain, xtest, ytrain, ytest = train_test_split(x,y, test_size=0.25)\ntest.drop('Survived', axis=1, inplace=True)","32744119":"from catboost import CatBoostClassifier\nfrom catboost import Pool\nfrom catboost import cv","9a293145":"seed = 1","b86342bc":"cat_features = ['Embarked', 'Sex', 'Title', 'Cabin_code']","5e021e92":"params = {'loss_function':'Logloss',\n         'eval_metric':'AUC',\n         'verbose': 1000,\n          'cat_features':cat_features,\n         'random_seed': seed}\n\ncbc1 = CatBoostClassifier(**params)\n\ncbc1.fit(xtrain, ytrain, eval_set= (xtest, ytest), use_best_model=True, plot=True)","76c6e4cc":"grid = {\n    'learning_rate': [0.05, 0.07, 0.09, 0.3],\n    'depth': [5, 6, 7],\n    'l2_leaf_reg': [1, 3, 5, 7, 9],\n    'grow_policy': ['SymmetricTree', 'Depthwise', 'Lossguide'],\n}","6fb01378":"train_pool = Pool(x, label=y, cat_features=cat_features)","c98bc804":"model =CatBoostClassifier(\n        loss_function='Logloss',   # RMSE with log1p-transformed labels is RMSLE\n        early_stopping_rounds=100,\n        has_time=True,\n        iterations=5000\n    )","d041999d":"model.randomized_search(grid, X=train_pool)","48e8ccbd":"params= {'depth': 5,\n  'l2_leaf_reg': 5,\n  'learning_rate': 0.07,\n  'grow_policy': 'Depthwise',\n    'loss_function':'Logloss',\n        'cat_features': cat_features,\n        'verbose': 1000,\n        }","3ad213cc":"model = CatBoostClassifier(**params)\n\nmodel.fit(xtrain, ytrain, eval_set= (xtest, ytest), use_best_model=True, plot=True)","2bbf3aac":"model.fit(x, y)","7eda00ab":"results = model.predict(test)","3a9965fe":"submission = pd.DataFrame({'PassengerId':passenger_id,'Survived': results})\nsubmission.Survived = submission.Survived.astype(int)\nprint(submission.shape)\ndisplay(submission)\nfilename = '\/kaggle\/working\/Titanic Predictions catboost2.csv'\nsubmission.to_csv(filename,index=False)\nprint('Saved file: ' + filename)","9c6e6c41":"Filling missing value of Embarked with S.","29b3fd41":"## Predictive Modelling Using CatBoost","203c8c0c":"Creating new Columns","1d3e0b52":"Creating Pool object","7e71b940":"Load the required Libraries.","b22d7db2":"Encoding Age column ","16af9af7":"Replace rarely occuring titles with miss, mr ,etc ","21f4ad07":"Filling Fare","7007db07":"### Please Do Upvote if you like this notebook  :)  !!!","b7058efd":"## Feature Engineering","e30e92c1":"### The Challenge\n\nThe sinking of the Titanic is one of the most infamous shipwrecks in history.\n\nOn April 15, 1912, during her maiden voyage, the widely considered \u201cunsinkable\u201d RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren\u2019t enough lifeboats for everyone onboard, resulting in the death of 1502 out of 2224 passengers and crew.\n\nWhile there was some element of luck involved in surviving, it seems some groups of people were more likely to survive than others.\n\nIn this challenge, we ask you to build a predictive model that answers the question: \u201cwhat sorts of people were more likely to survive?\u201d using passenger data (ie name, age, gender, socio-economic class, etc).","02733561":"Filling missing values of age with the help of titles.[](http:\/\/)","149f9020":"Creating New column Cabin_code","10b3c1f1":"Create new column Title which have the title of all names","ea1821a8":"Dropping Unnecessary Columns","877b2bbe":"Read the train and test csv and display the head.","f03ba3f2":"Applying CatBoostClassifier","8da777d7":"Please make sure to upvote if you found it helpful and comment for any suggestion or doubt","c620838e":"Creating list of categorical Features","eba6d274":"## CatBoost Tutorial with Titanic Dataset","8bfcff15":"Join train and test together for combined cleaning of features.","857a070f":"## Submission","dab2bd61":"### Support Me by dropping a Upvoted and comment if you liked the notebook","4b483810":"Encoding Fare","6af4c679":"### Overview of CatBoost\nCatBoost is a machine learning algorithm that uses gradient boosting on decision trees. It is available as an open source library.<br>\n\n\"**CatBoost**\u201d name comes from two words **\u201cCategory\u201d** and **\u201cBoosting\u201d**. <br>\n\nThe library works well with multiple Categories of data, such as audio, text, image including historical data.<br>\n\n**\u201cBoost\u201d** comes from gradient boosting machine learning algorithm as this library is based on gradient boosting library.","b25fea03":"Splitting again using train_test_split","8b90e442":"Splitting Combined data into original train and test data ","2b265c38":"#### Randomized Search for finding best parameters"}}