{"cell_type":{"ad5c50b8":"code","a934b971":"code","956743f7":"code","719ae7b6":"code","34999981":"code","a88e8c49":"code","911ff713":"code","2043ab81":"code","c5f29e0c":"code","8270b969":"code","9cce8f8d":"code","119787fe":"code","ade7c802":"code","ce5df67e":"code","643d02ad":"code","322bf585":"code","bd7c0ef3":"code","3dbb87bf":"code","a1e0e6d5":"code","e1ab47c8":"code","f74013d7":"code","c0bca0ab":"code","f24e6368":"code","1c29b9bf":"code","56bc0d72":"code","abee7214":"code","0c6deca5":"code","da63741e":"code","538cb479":"code","ed593fea":"code","1884ba2c":"markdown","679f4544":"markdown","976b69f8":"markdown","d48e5213":"markdown","eb31987d":"markdown","43e78278":"markdown","56a10da9":"markdown","49a22c82":"markdown","c3b445d2":"markdown","7fc62779":"markdown","3d4bfe24":"markdown","e85e04b6":"markdown","8b9e3636":"markdown","618990be":"markdown"},"source":{"ad5c50b8":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.style.use('seaborn')\n\nimport seaborn as sns","a934b971":"# Collecting datasets in a dictionary named data\ndata={}\nfor i in range(1,35):\n    data[i]= pd.read_csv(\"https:\/\/data.covid19india.org\/csv\/latest\/raw_data{}.csv\".format(i))\n","956743f7":"# Showing datasets\ndata[1].head()","719ae7b6":"data[2].head()","34999981":"data[3].head()","a88e8c49":"# Columns of all the datasets\ncol = {}\nfor i in range(1,35):\n    col[\"Data{}\".format(i)]= pd.Series(data[i].columns)\ncols = pd.DataFrame(col)\ncols","911ff713":"# Let's extract the columns that would be used for calculations from all the 34 datasets\nrequired_cols = ['Num Cases','Date Announced', 'Age Bracket','Gender', 'Detected District', 'Detected State','Current Status',]\nfor i in range(1, 35):\n    data[i]= data[i].loc[:,required_cols]","2043ab81":"# Merging all datasets into a single dataframe df\ndf = data[1].append([data[x] for x in range(2,35)])\ndf","c5f29e0c":"# Droping  extra null rows in datasets\ndf.dropna(axis =0, how='all',subset=['Num Cases', 'Age Bracket', 'Gender', 'Detected District', 'Detected State', 'Current Status'], inplace=True)","8270b969":"df","9cce8f8d":"# Extracting column properties of the dataset\ntemp = pd.DataFrame(index = df.columns)\ntemp[\"Data Type\"] = df.dtypes\ntemp['Null values'] = df.isnull().sum()\ntemp[\"Null %\"] = df.isnull().sum()*100\/len(df)\ntemp","119787fe":"# dropping columns Detected City, Age Bracket and Gender \ndf = df.drop(['Age Bracket', 'Gender'], axis=1)\ndf","ade7c802":"# Separating Date Announced field into different columns\ndate = df['Date Announced'].str.split(\"\/\", expand = True)\ndate.columns = ['Day', 'Month', 'Year']\ndate[\"Date_Announced\"]= date['Year']+'\/'+ date['Month'] + '\/'+ date['Day']\ndate","ce5df67e":"# concatenation of date columns to main data\ndf = pd.concat([df, date], axis=1)\ndf.drop(['Date Announced'], axis=1,inplace = True)\ndf","643d02ad":"# Now nullity percentage of each field\ndf.isnull().sum()","322bf585":"df[df['Num Cases'].isnull()==True]","bd7c0ef3":"# Two rows have the NaN values except the Current status\n# Eliminating them\ndf.dropna( axis=0,how='all', subset= ['Num Cases','Detected District', 'Detected State', 'Date_Announced'], inplace=True)\n\n# filling value 1 to NaN Num cases\ndf[\"Num Cases\"].fillna(value=1.0, inplace=True)\n\n# Checking the nulity of Num Cases\ndf.isnull().sum()","3dbb87bf":"# Now Dataframe\ndf","a1e0e6d5":"# Number of non-null datas and type of the columns\ndf.info()","e1ab47c8":"df.describe()","f74013d7":"df","c0bca0ab":"# Cases monthwise \nmonthlyCases = df[df[\"Current Status\"]==\"Hospitalized\"].groupby([ \"Year\",\"Month\"])[[\"Num Cases\"]].sum()\nmonthlyRecovered = df[df[\"Current Status\"]==\"Recovered\"].groupby([\"Year\",\"Month\"])[[\"Num Cases\"]].sum()\nmonthlyDeceased = df[df[\"Current Status\"]==\"Deceased\"].groupby([\"Year\",'Month'])[[\"Num Cases\"]].sum()\n\nprint(\"\\nMonthly Hospitalized Cases\\n\")\nprint(monthlyCases)\n\nprint(\"\\nMonthly Recovered Patients\\n\")\nprint(monthlyRecovered)\n\nprint(\"\\n\\tMonthly Deaths\\n\")\nprint(monthlyDeceased)","f24e6368":"# bar plot for each of the groupby dataframe tables\nmonthlyCases.plot.bar(figsize=(10,5), color='y',title=\"Monthly Hospitalized Cases\")\n\nmonthlyRecovered.plot.bar(figsize=(10,5), color= 'g',title=\"Monthly Recovered Patients\")\n\nmonthlyDeceased.plot.bar(figsize=(10,5),color='r', title=\"Monthly Deaths\")\nplt.show()","1c29b9bf":"daily_hospitalized_cases = df[df[\"Current Status\"]==\"Hospitalized\"].groupby([\"Date_Announced\"])[\"Num Cases\"].sum()\ndated= df[df[\"Current Status\"]==\"Hospitalized\"].Date_Announced.unique()\ndays= np.arange(len(dated))\nplt.bar(days,daily_hospitalized_cases)\nplt.plot(days,daily_hospitalized_cases, color = 'orange')\n\n#plt.xticks(days, dated, rotation='vertical')\nplt.margins(0)\nplt.subplots_adjust()\n#plt.show()\n\nplt.title(\"Daily Hospitalized Cases\")\nplt.xlabel(\"Dated\")\nplt.ylabel(\"Cases\")\nplt.rcParams[\"figure.figsize\"] = (20,10)\nplt.show()","56bc0d72":"daily_recovered_cases = df[df[\"Current Status\"]==\"Recovered\"].groupby([\"Date_Announced\"])[\"Num Cases\"].sum()\ndated= df[df[\"Current Status\"]==\"Recovered\"].Date_Announced.unique()\ndays= np.arange(len(dated))\n\nplt.bar(days,daily_recovered_cases)\nplt.plot(days,daily_recovered_cases, color = 'g')\n\n#plt.xticks(days, dated, rotation='vertical')\nplt.margins(0)\nplt.subplots_adjust()\n\nplt.title(\"Daily Recovered Patients\")\nplt.xlabel(\"Dated\")\nplt.ylabel(\"No. of Recoveries\")\nplt.rcParams[\"figure.figsize\"] = (20,10)\nplt.show()","abee7214":"daily_death_cases = df[df[\"Current Status\"]==\"Deceased\"].groupby([\"Date_Announced\"])[\"Num Cases\"].sum()\ndated= df[df[\"Current Status\"]==\"Deceased\"].Date_Announced.unique()\ndays= np.arange(len(daily_death_cases))\n\nplt.hist(days,daily_death_cases)\nplt.plot(days,daily_death_cases, color = 'r')\n\n#plt.xticks(days, dated, rotation='vertical')\nplt.margins(0)\nplt.subplots_adjust()\n\n\nplt.title(\"Daily Deceased Cases\")\nplt.xlabel(\"Dated\")\nplt.ylabel(\"No. of Deaths\")\nplt.rcParams[\"figure.figsize\"] = (20,10)\nplt.show()","0c6deca5":"# State wise Cases\nstateCases = df[df[\"Current Status\"]==\"Hospitalized\"].groupby([\"Detected State\"])[\"Num Cases\"].sum()\ndel(stateCases[\"State Unassigned\"])\nstateCases","da63741e":"# State wise Recoveries\nstateRecoveries= df[df[\"Current Status\"]==\"Recovered\"].groupby([\"Detected State\"])[\"Num Cases\"].sum()\nstateRecoveries","538cb479":"# State wise Deaths\nstate_wise_deaths= df[df[\"Current Status\"]==\"Deceased\"].groupby([\"Detected State\"])[\"Num Cases\"].sum()\nstate_wise_deaths","ed593fea":"# plotting states degredat\nstates =np.array(state_wise_deaths.keys())\n\n#width of each bars\nw=0.25\n\n# bars\nbar1 = np.arange(len(states))\nbar2 = [i + w for i in bar1]\nbar3 = [i + w for i in bar2]\n\n# plotting bars for each states\nplt.figure(figsize=(20,10))\nplt.bar(bar1,stateCases,w,color='orange', label= 'Hospitalized')\nplt.bar(bar2,stateRecoveries,w,color='g', label= 'Recoveries')\nplt.bar(bar3,state_wise_deaths,w,color='r', label= 'Deceased')\n\nplt.title(\"Cases in the States\")\nplt.xlabel(\"States\")\nplt.ylabel(\"Cases\")\nplt.xticks(bar1+w, states, rotation=90)\nplt.legend()\nplt.show()","1884ba2c":"- Now all the datasets have the same columns\n- So merging all datasets into single dataset for further work","679f4544":"### State Wise Cases","976b69f8":"## Data Preprocessing","d48e5213":"- Now data looks fine.","eb31987d":"X = df[\"Date_Announced\"].unique().sort()\n\ndaily_hospitalized_cases = df[df[\"Current Status\"]==\"Hospitalized\"].groupby([\"Date_Announced\"])[\"Num Cases\"].sum()\nmax_hospitalized_in_day =max(daily_hospitalized_cases[0:len(daily_hospitalized_cases)])\n\ndaily_recovered_cases= df[df[\"Current Status\"]==\"Recovered\"].groupby([ \"Date_Announced\"])[\"Num Cases\"].sum()\nmax_recovered_in_day =max(daily_recovered_cases[0:len(daily_recovered_cases)])\n\ndaily_deaths = df[df[\"Current Status\"]==\"Deceased\"].groupby([ \"Date_Announced\"])[\"Num Cases\"].sum()\nmax_death_in_day =max(daily_deaths[0:len(daily_deaths)])\n\nY = np.arange(max(max_hospitalized_in_day,max_recovered_in_day,max_death_in_day))\nplt.xscale=X\nplt.yscale=Y\nplt.plot( X, daily_hospitalized_cases)\nplt.plot(X, daily_recovered_cases)\nplt.plot(X, daily_deaths)\nplt.show()","43e78278":"## Data Collection","56a10da9":"- there are 13 rows which have NaN in Num Cases field.\n- so imputing values 1 to those fields.","49a22c82":"### Some information about the dataset","c3b445d2":"- On looking at the dataset many of the rows have NaN values except the Date Announced field\n- So we remove them.","7fc62779":"- As 83% Age Bracket and 82% Gender field is vacant, so we drop these column.","3d4bfe24":"- On looking into the columns of each dataset, all have the same column names except the first two datasets.\n- But all the datasets have the required columns that would be used for data visualization. The required columns are\n    - Num Cases,\n    - Date Announced,\n    - Age Bracket,\n    - Gender,\n    - Detected City, \n    - Detected District, \n    - Detected State,\n    - Current Status","e85e04b6":"### Monthly Cases","8b9e3636":"# Data Visualization","618990be":"### Graph of the daily cases"}}