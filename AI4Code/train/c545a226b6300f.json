{"cell_type":{"8602a9a6":"code","28adc013":"code","2a4b7264":"code","cff36302":"code","597e6703":"code","fcd47cbe":"code","04d86a48":"code","85c099ec":"code","cc85641d":"code","10a56b0c":"code","13c580d5":"code","28fd78db":"code","7a1ceab6":"code","db7b1db0":"code","606805ea":"markdown","5e413aca":"markdown","0105d8d4":"markdown","2a92ea86":"markdown","6b13c4bc":"markdown","c374719e":"markdown","c50149ad":"markdown","ade633fc":"markdown","3724da7e":"markdown","de275034":"markdown","c675b11c":"markdown","b4f9c643":"markdown","6c357dca":"markdown","b4d7e990":"markdown","2cd8b631":"markdown","025e70ea":"markdown","95d29493":"markdown","df39731e":"markdown","9f6f1578":"markdown"},"source":{"8602a9a6":"import numpy as np\nx=np.array([1,4,6,3])\nprint(type(x))# return the type of array i.e numpy.ndarray, nd means n-dimensional\nprint(x)","28adc013":"x=np.array([1,2,5,'v','q',5,6])\nprint(type(x))\nprint(x)","2a4b7264":"#here stop value 9 is not included because endpoint=False \nx=np.linspace(start=3,stop=9,endpoint=False,retstep=False)\nprint(x)","cff36302":"#here stop value 9 is included because endpoint=True and increment value is also returned as: 0.12244897959183673\nx=np.linspace(start=3,stop=9,endpoint=True,retstep=True)\nprint(x)","597e6703":"x=np.arange(5,25,5)\nprint(x)#x will never includes stop values","fcd47cbe":"x=np.zeros((2,3))\nprint(x)","04d86a48":"x=np.ones((5,3),int)\nprint(x)","85c099ec":"x=np.random.rand(2,4)\nprint(x)","cc85641d":"x=np.logspace(4,50,10,endpoint=True,base=4.0,dtype=int)\nprint(x)","10a56b0c":"import timeit #determines the time of program\nx=range(1000)\n%time sum(x)","13c580d5":"x=range(1000)\n%timeit sum(x)","28fd78db":"import sys\nx=np.arange(1,1000)\na=sys.getsizeof(1)#returns size of an element in bytes\nb=sys.getsizeof(1)*len(x)# returns whole size of list\/array\nprint('a:',str(a) + ' bytes')\nprint('b:',str(b) + ' bytes')","7a1ceab6":"x=np.arange(1,1000)\nx.itemsize","db7b1db0":"x.itemsize*x.size","606805ea":"Since here all data inside the array got converted into string because we enter mixed data in the array, so by default the numpy converts each element of the array to same data type.","5e413aca":"### Creating Array","0105d8d4":"Synatx: np.arange(start,stop,step)\n- step: increment value","2a92ea86":"Python for Data Science- Module1","6b13c4bc":"Synatx:  \n- np.zeros(shape,dtype)\n- np.ones(shape,dtype)\n- shape: (row,column)","c374719e":"Returns equally spaced number based on log values\n\nSyntax: np.logspace(start,stop,num,endpoint,base,dtype)\n- base: base value of log      (default: 10.0)\n- num: number of samples       (default: 50)","c50149ad":"### Generating Array- Using np.ones()\/zeros() ","ade633fc":"### Calculating Time using timeit module ","3724da7e":"#                                                    NUMPY-1","de275034":"### Generating Array- Using np.arange()","c675b11c":"Syntax: np.random.rand(shape)\n    ","b4f9c643":"getsizeof(): Return Size of in bytes\n- Synatx: sys.getsizeof(object)\n\nitemsize(): Return Size of one element of numpy array\n- Syntax: numpy.ndarray.itemsize","6c357dca":"Syntax: numpy.array(object)","b4d7e990":"### Generating Random Array- np.logspace()","2cd8b631":"Syntax: np.linspace(start,stop,num,dtype,endpoint=True\/False,retstep=True\/False)\n- num: total number of Samples you want to generate\n- retstep: return Step\/ incremented value\/ value by which your data samples got incremented\n- endpoint: if True then includes the stop value in the list","025e70ea":"### Generating Random Array- random.rand()","95d29493":"### Generating Array- Using np.linspace()","df39731e":"### Storage Space Numpy","9f6f1578":"What Numpy can do-\n- Mathematical and logical operations on Arrays\n- Fourier transform\n- Linear Algebra Operation \n- Random Number Generation\n"}}