{"cell_type":{"2ffeedc0":"code","238f1b3e":"code","0588f0e3":"code","7c8c5474":"code","86a1ca07":"code","17d4be3a":"code","45280cc9":"code","f6be867e":"markdown","d1ac5a71":"markdown","0fc54a77":"markdown","bb384ff3":"markdown","16da0d54":"markdown","5ffda75c":"markdown"},"source":{"2ffeedc0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","238f1b3e":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('\/kaggle\/input\/vehicle-claim-fraud-detection\/fraud_oracle.csv')\ndf.info()\ncolumns = df.columns\n\ngrouped_df = df.groupby(['FraudFound_P']).count()\nplt.bar(grouped_df.index, height = grouped_df['Month'])\nplt.title('Fraud Count (Whole Dataset)')\nplt.ylabel('Count')\nplt.xlabel('Classifier')\nplt.show()\n\ndf_zero = df[df['FraudFound_P']==0]\ndf_zero_sample = df_zero.sample(n=2000)\n\ndf_ones = df[df['FraudFound_P']==1]\ndf_ones_sample = df_ones.sample(n=len(df_ones))\n\ndf_new = pd.concat([df_zero_sample,df_ones_sample])\n\ngrouped_df = df_new.groupby(['FraudFound_P']).count()\nplt.bar(grouped_df.index, height = grouped_df['Month'])\nplt.title('Fraud Count (Ratio 2:1)')\nplt.ylabel('Count')\nplt.xlabel('Classifier')\nplt.show()","0588f0e3":"from sklearn.preprocessing import LabelEncoder\n\ndiscrete_columns = []\n\nfor col in columns:\n    if df_new[col].dtypes == 'object':\n        discrete_columns.append(col)\n\nfor col in discrete_columns:\n    enc = LabelEncoder()\n    values = df_new[col].unique()\n    enc_fit = enc.fit(values)\n    df_new[col] = enc_fit.transform(df_new[col])","7c8c5474":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, classification_report\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\nx_train, x_test, y_train, y_test = train_test_split(df_new.drop(['FraudFound_P'], axis=1), df_new['FraudFound_P'], train_size = 0.7, random_state=42)\ndt_fit = DecisionTreeClassifier(criterion = 'gini', max_depth = 5, min_samples_split =2, min_samples_leaf = 1, random_state = 42)\n\nada_fit = AdaBoostClassifier(base_estimator = dt_fit, n_estimators = 5000, learning_rate = 0.05, random_state=42)\nada_fit.fit(x_train, y_train)\n\ncrosstab_train = pd.crosstab(y_train, ada_fit.predict(x_train), rownames = ['Actual'], colnames = ['Predicted'])\naccuracy_train = round(accuracy_score(y_train, ada_fit.predict(x_train)),3)\nclassification_train = classification_report(y_train, ada_fit.predict(x_train))\n\ncrosstab_test = pd.crosstab(y_test, ada_fit.predict(x_test), rownames = ['Actual'], colnames = ['Predicted'])\naccuracy_test = round(accuracy_score(y_test, ada_fit.predict(x_test)),3)\nclassification_test = classification_report(y_test, ada_fit.predict(x_test))\n\nprint('Training Accuracy:', accuracy_train)\nprint('Testing Accuracy:', accuracy_test)","86a1ca07":"dummy_array = np.empty((6,10))\ndt_wttune = pd.DataFrame(dummy_array)\n\ndt_wttune.columns = ['zero_wght','one_wght','tr_accuracy','tst_accuracy','prec_zero','prec_one','prec_ovll','recl_zero','recl_one','recl_ovll']\nzero_clwghts = [0.01,0.1,0.2,0.3,0.4,0.5]\n\nclass_weights = []\ncount_inaccurate = []\n\nfor i in range(len(zero_clwghts)):\n    clwght = {0:zero_clwghts[i],1:1.0-zero_clwghts[i]}\n    dt_fit = DecisionTreeClassifier(criterion = 'gini', max_depth=5, min_samples_split=2, min_samples_leaf=1, random_state=42, class_weight=clwght)\n    dt_fit.fit(x_train, y_train)\n    dt_wttune.loc[i,'zero_wght'] = clwght[0]\n    dt_wttune.loc[i,'one_wght'] = clwght[1]\n    dt_wttune.loc[i,'tr_accuracy'] = round(accuracy_score(y_train, dt_fit.predict(x_train)),3)\n    clf_sp = classification_report(y_test, dt_fit.predict(x_test)).split()\n    dt_wttune.loc[i,'prec_zero'] = clf_sp[5]\n    dt_wttune.loc[i,'prec_one'] = clf_sp[10]\n    dt_wttune.loc[i,'prec_ovll'] = clf_sp[25]\n    dt_wttune.loc[i,'recl_zero'] = clf_sp[6]\n    dt_wttune.loc[i,'recl_one'] = clf_sp[12]\n    dt_wttune.loc[i,'recl_ovll'] = clf_sp[26]\n    crosstab = pd.crosstab(y_test, dt_fit.predict(x_test),rownames = ['Actual'], colnames = ['Predicted'])\n    inaccurate = crosstab[0][1] + crosstab[1][0]\n    count_inaccurate.append(inaccurate)\n    class_weights.append(clwght)\n    print('\\n Class Weights',clwght, 'Train Accuracy:',round(accuracy_score(y_train, dt_fit.predict(x_train),3)), 'Test Accuracy:',round(accuracy_score(y_test, dt_fit.predict(x_test))),3)\n    print('Test Confusion Matrix \\n\\n', pd.crosstab(y_test, dt_fit.predict(x_test), rownames = ['Actual'], colnames = ['Predicted']))\n    \nweights_df = pd.DataFrame()\nweights_df['weight'] = class_weights\nweights_df['inaccurate sum'] = count_inaccurate\n    \nprint(weights_df.sort_values(['inaccurate sum'], ascending=True))","17d4be3a":"dt_fit = DecisionTreeClassifier(criterion = 'gini', max_depth=5, min_samples_split=2, min_samples_leaf=1, random_state=42, class_weight={0: 0.5, 1: 0.5})\n\nada_fit = AdaBoostClassifier(base_estimator = dt_fit, n_estimators = 5000, learning_rate = 0.05, random_state=42)\nada_fit.fit(x_train, y_train)\n\ncrosstab_train = pd.crosstab(y_train, ada_fit.predict(x_train), rownames = ['Actual'], colnames = ['Predicted'])\naccuracy_train = round(accuracy_score(y_train, ada_fit.predict(x_train)),3)\nclassification_train = classification_report(y_train, ada_fit.predict(x_train))\n\ncrosstab_test = pd.crosstab(y_test, ada_fit.predict(x_test), rownames = ['Actual'], colnames = ['Predicted'])\naccuracy_test = round(accuracy_score(y_test, ada_fit.predict(x_test)),3)\nclassification_test = classification_report(y_test, ada_fit.predict(x_test))\n\nprint('Training Accuracy:', accuracy_train)\nprint('Testing Accuracy:', accuracy_test)","45280cc9":"model_ranks = pd.Series(ada_fit.feature_importances_, index=x_train.columns, name='Importance').sort_values(ascending=False, inplace=False)\nmodel_ranks.index.name = 'Variables'\ntop_features = model_ranks.iloc[:5].sort_values(ascending=True, inplace=False)\nplt.figure(figsize=(20,10))\nax = top_features.plot(kind='barh')\nax.set_title('Variable Importance Plot')\nax.set_xlabel('Mean Decrease in Variance')\nax.set_yticklabels(top_features.index, fontsize=13)\n\nprint(top_features.sort_values(ascending=False))","f6be867e":"Initialising the DecisionTreeClassifier with the optimal class weight conditions and fitting the training data using the AdaBoostClassifier.\n\nResults don't differ from the initial fitting and result in:\n\n* Training Accuracy: 100%\n* Testing Accuracy: 88.5%\n\nI think there are some improvements to be made with regard to this process and model which I may revisit at a later date.","d1ac5a71":"Splitting the data into training and testing, applying an AdaBoostClassifier with the base_estimator being the DecisionTreeClassifier.\n\n* Training Accuracy: 100%\n* Testing Accuracy: 88.5%","0fc54a77":"Tuning the weights of the DecisionTreeClassifier.\n\nThe best weights to use look to be {0: 0.5, 1: 0.5} which optimises the count of inaccurate values to a minimum.","bb384ff3":"Preliminary investigation into null values and the counts of Fraud cases in the data.\n\nIt's clear that the number of cases resulting in a non-fraud outcome vastly outweighs the cases of a fraud outcome. To prevent the model from becoming too biased to make an accurate prediction, I've decided to reduce the size of the dataframe to balance the outcomes with an approximate ratio of (2:1) using a sampler for the non-fraud cases. Though a seemingly a logical step, I'm not too sure if this is the correct approach and would appreciate any feedback regarding this (or any other aspect of this notebook for that matter). ","16da0d54":"Gathering columns with discrete data to transform using sklearn's LabelEncoder.  ","5ffda75c":"Feature Importance plot shows the top 3 features being:\n* RepNumber\n* MonthClaimed\n* Make"}}