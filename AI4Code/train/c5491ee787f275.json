{"cell_type":{"b342bbfa":"code","d04bc13f":"code","b18975c2":"code","253abfef":"code","5903dbd0":"code","c64caa60":"code","e3a0e9b7":"code","d5b91b32":"code","013276fe":"code","c01b8043":"code","84d15af9":"code","c6266929":"code","46451c79":"code","ce33c5d1":"code","349bec72":"code","898fd4d8":"code","da8b3338":"code","da721c09":"markdown","509cd1f0":"markdown","3bb16616":"markdown","5630f31d":"markdown","c74e554d":"markdown","554f0bfe":"markdown","7abcda58":"markdown","c6546ecf":"markdown","7cb04190":"markdown","e2ec1d70":"markdown","b748fea6":"markdown"},"source":{"b342bbfa":"import numpy as np\nimport pandas as pd\ntrain_orig = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/sample_submission.csv\")\ntrain_orig.shape","d04bc13f":"ids_with_target_error = [328,443,513,2619,3640,3900,4342,5781,6552,6554,6570,6701,6702,6729,6861,7226]\ntrain_orig[train_orig['id'].isin(ids_with_target_error)]","b18975c2":"train_orig.at[train_orig['id'].isin(ids_with_target_error),'target'] = 0\ntrain_orig[train_orig['id'].isin(ids_with_target_error)]","253abfef":"train_add = pd.read_csv(\"\/kaggle\/input\/real-or-not-nlp-with-disaster-tweets-addings\/train_add.csv\")\ntrain_add","5903dbd0":"train = train_orig.append(train_add)\ntrain.shape","c64caa60":"# We will use the official tokenization script created by the Google team\n!wget --quiet https:\/\/raw.githubusercontent.com\/tensorflow\/models\/master\/official\/nlp\/bert\/tokenization.py","e3a0e9b7":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Input\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nimport tensorflow_hub as hub\n\nimport tokenization","d5b91b32":"def bert_encode(texts, tokenizer, max_len=512):\n    all_tokens = []\n    all_masks = []\n    all_segments = []\n    \n    for text in texts:\n        text = tokenizer.tokenize(text)\n            \n        text = text[:max_len-2]\n        input_sequence = [\"[CLS]\"] + text + [\"[SEP]\"]\n        pad_len = max_len - len(input_sequence)\n        \n        tokens = tokenizer.convert_tokens_to_ids(input_sequence)\n        tokens += [0] * pad_len\n        pad_masks = [1] * len(input_sequence) + [0] * pad_len\n        segment_ids = [0] * max_len\n        \n        all_tokens.append(tokens)\n        all_masks.append(pad_masks)\n        all_segments.append(segment_ids)\n    \n    return np.array(all_tokens), np.array(all_masks), np.array(all_segments)","013276fe":"def build_model(bert_layer, max_len=512):\n    input_word_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n    input_mask = Input(shape=(max_len,), dtype=tf.int32, name=\"input_mask\")\n    segment_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"segment_ids\")\n\n    _, sequence_output = bert_layer([input_word_ids, input_mask, segment_ids])\n    clf_output = sequence_output[:, 0, :]\n    out = Dense(1, activation='sigmoid')(clf_output)\n    \n    model = Model(inputs=[input_word_ids, input_mask, segment_ids], outputs=out)\n    model.compile(Adam(lr=1e-5), loss='binary_crossentropy', metrics=['accuracy'])\n    \n    return model","c01b8043":"%%time\nmodule_url = \"https:\/\/tfhub.dev\/tensorflow\/bert_en_uncased_L-24_H-1024_A-16\/1\"\nbert_layer = hub.KerasLayer(module_url, trainable=True)","84d15af9":"train = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/sample_submission.csv\")","c6266929":"vocab_file = bert_layer.resolved_object.vocab_file.asset_path.numpy()\ndo_lower_case = bert_layer.resolved_object.do_lower_case.numpy()\ntokenizer = tokenization.FullTokenizer(vocab_file, do_lower_case)","46451c79":"train_input = bert_encode(train.text.values, tokenizer, max_len=160)\ntest_input = bert_encode(test.text.values, tokenizer, max_len=160)\ntrain_labels = train.target.values","ce33c5d1":"model = build_model(bert_layer, max_len=160)\nmodel.summary()","349bec72":"checkpoint = ModelCheckpoint('model.h5', monitor='val_accuracy', save_best_only=True)\n\ntrain_history = model.fit(\n    train_input, train_labels,\n    validation_split=0.2,\n    epochs=10,\n    callbacks=[checkpoint],\n    batch_size=16\n)","898fd4d8":"model.load_weights('model.h5')\ntest_pred = model.predict(test_input)","da8b3338":"submission['target'] = test_pred.round().astype(int)\nsubmission.to_csv('submission.csv', index=False)","da721c09":"While studying this model and my own models, I discovered that these kind of predictions are so sensitive to the training data. Next, I read tweets in training data and figure out, that some of them have errors:","509cd1f0":"# Load and Preprocess\n\n- Load BERT from the Tensorflow Hub\n- Load CSV files containing training data\n- Load tokenizer from the bert layer\n- Encode the text into tokens, masks, and segment flags","3bb16616":"# Helper Functions","5630f31d":"Let's fix these tweets records:","c74e554d":"# Introduction\nThis notebook is a pure fork of the great notebook by @xhlulu : https:\/\/www.kaggle.com\/xhlulu\/disaster-nlp-keras-bert-using-tfhub (version 7)\nexcept training data (train.csv)\n\nV2: epochs = 2\n\nV3: epochs = 4\n\nV4: epochs = 10 (monitor = 'val_accuracy')","554f0bfe":"### My second shot was to take tweets from another source. Luckily there is a kaggle dataset containing 1.6m tweets that can be found here: https:\/\/www.kaggle.com\/kazanova\/sentiment140\n\nAlthough some of them are tweeted around 10 years ago, I choose randomly **1000** of them, and only **16 **were classified as **real disaster**. However, after reading these tweets I find that only two of those are about disaster! After corrections, our additional training data looks like this:","7abcda58":"# Model: Build, Train, Predict, Submit","c6546ecf":"It's an important and hard lesson for our classifier. Let's append it to the original training data set:","7cb04190":"After doing this, luckily (or not) score could be slightly higher. But for sure our model is slightly better! Imho this could be a hint about: how to improve your score\/model. There is much more work about this training data as far as I can see :) ","e2ec1d70":" Good luck!","b748fea6":"# About this kernel\n\nI've seen a lot of people pooling the output of BERT, then add some Dense layers. I also saw various learning rates for fine-tuning. In this kernel, I wanted to try some ideas that were used in the original paper that did not appear in many public kernel. Here are some examples:\n* *No pooling, directly use the CLS embedding*. The original paper uses the output embedding for the `[CLS]` token when it is finetuning for classification tasks, such as sentiment analysis. Since the `[CLS]` token is the first token in our sequence, we simply take the first slice of the 2nd dimension from our tensor of shape `(batch_size, max_len, hidden_dim)`, which result in a tensor of shape `(batch_size, hidden_dim)`.\n* *No Dense layer*. Simply add a sigmoid output directly to the last layer of BERT, rather than experimenting with different intermediate layers.\n* *Fixed learning rate, batch size, epochs, optimizer*. As specified by the paper, the optimizer used is Adam, with a learning rate between 2e-5 and 5e-5. Furthermore, they train the model for 3 epochs with a batch size of 32. I wanted to see how well it would perform with those default values.\n\nI also wanted to share this kernel as a **concise, reusable, and functional example of how to build a workflow around the TF2 version of BERT**. Indeed, it takes less than **50 lines of code to write a string-to-tokens preprocessing function and model builder**.\n\n## References\n\n* Source for `bert_encode` function: https:\/\/www.kaggle.com\/user123454321\/bert-starter-inference\n* All pre-trained BERT models from Tensorflow Hub: https:\/\/tfhub.dev\/s?q=bert"}}