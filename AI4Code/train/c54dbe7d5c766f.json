{"cell_type":{"01c098a6":"code","ad9c3c26":"code","66df285e":"code","3a01d92a":"code","568f65bc":"code","3b8227f2":"code","3d408752":"code","9caa7d09":"code","17a30855":"code","fb4580e0":"code","b0d03359":"code","899f244a":"code","29b47478":"code","cc14901e":"code","59673e35":"code","368c7a2c":"code","045e2a84":"code","f3312238":"code","0796b170":"code","5e4cc37c":"code","941b79b7":"code","64e7a83c":"code","5bbf6194":"code","c42ffab8":"code","6b87eb34":"markdown","8d45e6cf":"markdown"},"source":{"01c098a6":"!pip install noisereduce","ad9c3c26":"import librosa\nimport librosa.display\nimport random\nimport IPython\n\nimport numpy as np\nimport pandas as pd\nimport noisereduce as nr\n\nfrom pathlib import Path\nfrom matplotlib import pyplot as plt\nfrom scipy.ndimage import maximum_filter1d","66df285e":"def view_audio(audio_path,swich = [1,1,1]):\n    y, sr = librosa.load(audio_path)\n\n    graphs = len(swich)\n\n    fig = plt.figure(figsize=(20,graphs*5))\n    \n    if swich[0] == 1:\n        ax1 = fig.add_subplot(graphs,1,1,title='waveplot')\n        # \u6ce2\u5f62\u3067\u8868\u793a\n        librosa.display.waveplot(y, sr=sr)\n    \n    if swich[1] == 1:\n        # \u30e1\u30eb\u30b9\u30da\u30af\u30c8\u30ed\u30b0\u30e9\u30e0\u3068\u3084\u3089\u306b\u5909\u63db\n        S = librosa.feature.melspectrogram(y, sr=sr, n_mels=128)\n        # \u30c7\u30b7\u30d9\u30eb\uff08\u97f3\u91cf\uff09\u30b9\u30b1\u30fc\u30eb\u306e\u30b9\u30da\u30af\u30c8\u30ed\u30b0\u30e9\u30e0\u306b\u5909\u63db\n        log_S = librosa.amplitude_to_db(S, ref=np.max)\n\n        # librosa\u306e\u30b9\u30da\u30af\u30c8\u30ed\u30b0\u30e9\u30e0\u3092\u51fa\u3057\u3066\u304f\u308c\u308bAPI\u3092\u547c\u3076\n        ax2 = fig.add_subplot(graphs,1,2,title='mel power spectrogram')\n        librosa.display.specshow(log_S, sr=sr, x_axis='time', y_axis='mel')\n        plt.colorbar()\n    \n    if swich[2] ==1:        \n        # \u77ed\u6642\u9593\u30d5\u30fc\u30ea\u30a8\u5909\u63db \n        X = librosa.stft(y)\n        Xdb = librosa.amplitude_to_db(abs(X))\n        ax3 = fig.add_subplot(graphs,1,3,title='stft')\n        librosa.display.specshow(Xdb, sr=sr, x_axis='time', y_axis='hz')\n        plt.colorbar()\n    \n    fig.show()","3a01d92a":"audio_path = '\/kaggle\/input\/birdsong-recognition\/train_audio\/whtswi\/XC425114.mp3'\n#ipd.Audio(audio_path)\n\nview_audio(audio_path)","568f65bc":"def envelope(y, rate, threshold):\n    mask = []\n    y_mean = maximum_filter1d(np.abs(y), size=rate\/\/20)\n    for mean in y_mean:\n        if mean > threshold:\n            mask.append(True)\n        else:\n            mask.append(False)\n    return mask, y_mean","3b8227f2":"TEST_DIR = '..\/input\/birdcall-check\/test_audio'\ntest_path = []\nimport os\nfor dirname, _, filenames in os.walk(TEST_DIR):\n    for filename in filenames:\n        audio_path = os.path.join(dirname, filename)\n        test_path.append(audio_path)\n\n\nprint(test_path)","3d408752":"import warnings\nwarnings.filterwarnings('ignore')\nthr = 0.25\nx_deonoise = []\n\n\nfor i in range(len(test_path)):\n    x, sr = librosa.load(test_path[i])\n    mask, env = envelope(x, sr, thr)\n    x_deonoise.append(nr.reduce_noise(audio_clip=x, noise_clip=x[np.logical_not(mask)], verbose=False))\n","9caa7d09":"## blue \u2192(denoise)\u2192 orenge\nfor i in range(len(test_path)):\n    x, sr = librosa.load(test_path[i])\n    plt.plot(x)\n    plt.plot(x_deonoise[i])\n\n    plt.show()","17a30855":"x,sr = librosa.load('..\/input\/birdcall-check\/test_audio\/856b194b097441958697c2bcd1f63982.mp3')\n# \u5143\u306e\u97f3\u58f0\nIPython.display.Audio(data=x, rate=sr)","fb4580e0":"# \u30ce\u30a4\u30ba\u9664\u53bb\nIPython.display.Audio(data=x_deonoise[0], rate=sr)","b0d03359":"ald_0 , str_0 = librosa.load('..\/input\/birdsong-recognition\/train_audio\/aldfly\/XC134874.mp3',offset=0,duration=5)\nald_1 , str_1 = librosa.load('..\/input\/birdsong-recognition\/train_audio\/aldfly\/XC135454.mp3',offset=0,duration=5)","899f244a":"def view_audio(y,sr,swich = [1,1,1]):\n    \n    graphs = len(swich)\n\n    fig = plt.figure(figsize=(20,graphs*5))\n    \n    if swich[0] == 1:\n        ax1 = fig.add_subplot(graphs,1,1,title='waveplot')\n        # \u6ce2\u5f62\u3067\u8868\u793a\n        librosa.display.waveplot(y, sr=sr)\n    \n    if swich[1] == 1:\n        # \u30e1\u30eb\u30b9\u30da\u30af\u30c8\u30ed\u30b0\u30e9\u30e0\u3068\u3084\u3089\u306b\u5909\u63db\n        S = librosa.feature.melspectrogram(y, sr=sr, n_mels=128)\n        # \u30c7\u30b7\u30d9\u30eb\uff08\u97f3\u91cf\uff09\u30b9\u30b1\u30fc\u30eb\u306e\u30b9\u30da\u30af\u30c8\u30ed\u30b0\u30e9\u30e0\u306b\u5909\u63db\n        log_S = librosa.amplitude_to_db(S, ref=np.max)\n\n        # librosa\u306e\u30b9\u30da\u30af\u30c8\u30ed\u30b0\u30e9\u30e0\u3092\u51fa\u3057\u3066\u304f\u308c\u308bAPI\u3092\u547c\u3076\n        ax2 = fig.add_subplot(graphs,1,2,title='mel power spectrogram')\n        librosa.display.specshow(log_S, sr=sr, x_axis='time', y_axis='mel')\n        plt.colorbar()\n    \n    if swich[2] ==1:        \n        # \u77ed\u6642\u9593\u30d5\u30fc\u30ea\u30a8\u5909\u63db \n        X = librosa.stft(y)\n        Xdb = librosa.amplitude_to_db(abs(X))\n        ax3 = fig.add_subplot(graphs,1,3,title='stft')\n        librosa.display.specshow(Xdb, sr=sr, x_axis='time', y_axis='hz')\n        plt.colorbar()\n    \n    fig.show()","29b47478":"IPython.display.Audio(data=ald_0, rate=str_0)","cc14901e":"view_audio(ald_0,str_0,[1,0,0])","59673e35":"IPython.display.Audio(data=ald_1, rate=str_1)","368c7a2c":"view_audio(ald_1,str_1,[1,0,0])","045e2a84":"IPython.display.Audio(data=ald_0 +ald_1, rate=str_0)","f3312238":"view_audio(ald_0+ald_1,str_0,[1,0,0])","0796b170":"def audio_norm(data):\n    max_data = np.max(data)\n    min_data = np.min(data)\n    data = (data-min_data)\/(max_data-min_data+1e-6)\n    return data-0.5","5e4cc37c":"norm_0 = audio_norm(ald_0)\nnorm_1 = audio_norm(ald_1)","941b79b7":"IPython.display.Audio(data=norm_0 +norm_1, rate=str_0)","64e7a83c":"view_audio(norm_0+norm_1,str_0,[1,0,0])","5bbf6194":"x = norm_0+norm_1\nmask, env = envelope(x, str_0, thr)\ndenoise = nr.reduce_noise(audio_clip=x, noise_clip=x[np.logical_not(mask)], verbose=False)\n","c42ffab8":"plt.plot(x)\nplt.plot(denoise)\nplt.show()","6b87eb34":"## \u540c\u3058\u9ce5\u306e\u9cf4\u304d\u58f0\u3092\u91cd\u306d\u3066\u307f\u305f\u3002","8d45e6cf":"## \u6a19\u6e96\u5316\u3057\u305f\u307b\u3046\u304c\u826f\u3055\u305d\u3046\uff1f"}}