{"cell_type":{"249024b5":"code","9e1b14fc":"code","6d5f6770":"code","79513640":"code","04bab4f3":"code","40f7d9f3":"code","40a1f354":"code","9517f7c6":"code","f694318f":"code","badb0a06":"code","def2319e":"code","57321967":"code","601b802a":"code","548026b1":"code","bbe1708d":"code","638a7c11":"code","0d0acf35":"code","490cf5c4":"code","5a384ca8":"code","da2d301a":"code","0592d2af":"code","467bf529":"code","90d65fc7":"code","68040463":"code","be146e32":"code","5e8ffc93":"code","bad30d66":"code","6d98d48c":"code","ee7cf550":"code","f4ebc82c":"code","78e8e9fc":"code","4400f642":"code","2a75a19a":"code","185e2c56":"markdown","618a6a38":"markdown","879e02d7":"markdown","3e9fe127":"markdown","6e55d9f2":"markdown","2b9d85c1":"markdown","62ebfd9c":"markdown","965de6cc":"markdown","aa978b5e":"markdown","170ff7a9":"markdown","d6149328":"markdown","e252461d":"markdown"},"source":{"249024b5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #in order to visualize data\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9e1b14fc":"data = {\n'year': [2010, 2011, 2012,\n2010, 2011, 2012,\n2010, 2011, 2012],\n'team': ['FCBarcelona', 'FCBarcelona', 'FCBarcelona',\n'RMadrid', 'RMadrid', 'RMadrid',\n'ValenciaCF', 'ValenciaCF', 'ValenciaCF'],\n'wins': [30, 28, 32, 29, 32, 26, 21, 17, 19],\n'draws': [6, 7, 4, 5, 4, 7, 8, 10, 8],\n'losses': [2, 3, 2, 4, 2, 5, 9, 11, 11]\n}\n\nfootball = pd.DataFrame(data, columns = ['year', 'team', 'wins', 'draws', 'losses'])","6d5f6770":"edu = pd.read_csv('\/kaggle\/input\/ense32020\/files\/ch02\/educ_figdp_1_Data.csv',\n                  na_values=':', usecols=['TIME', 'GEO', 'Value'])\nedu","79513640":"edu.head()","04bab4f3":"edu.tail()","40f7d9f3":"edu.describe()","40a1f354":"edu['Value']","9517f7c6":"edu[10:14]","f694318f":"edu.iloc[90:94][['TIME','GEO']]\n","badb0a06":"edu[edu['Value'] > 6.5].tail()","def2319e":"edu[edu[\"Value\"].isnull()].head()\n","57321967":"edu.max(axis = 0)\n","601b802a":"print ('Pandas max function:', edu['Value'].max())\nprint ('Python max function:', max(edu['Value']))","548026b1":"s = edu[\"Value\"]\/100\ns.head()","bbe1708d":"s = edu[\"Value\"].apply(np.sqrt)\ns.head()","638a7c11":"s = edu[\"Value\"].apply(lambda d: d**2)\ns.head()","0d0acf35":"edu['ValueNorm'] = edu['Value']\/edu['Value'].max()\nedu.tail()","490cf5c4":"edu.drop('ValueNorm', axis = 1, inplace = True)\nedu.head()","5a384ca8":"edu = edu.append({\"TIME\": 2000, \"Value\": 5.00, \"GEO\": 'a'},\n                  ignore_index = True)\nedu.tail()","da2d301a":"edu.drop(max(edu.index), axis = 0, inplace = True)\nedu.tail()","0592d2af":"eduDrop = edu[~edu[\"Value\"].isnull()].copy()\neduDrop.head()","467bf529":"eduDrop = edu.dropna(how = 'any', subset = [\"Value\"])\neduDrop.head()","90d65fc7":"eduFilled = edu.fillna(value = {\"Value\": 0})\neduFilled.head()","68040463":"edu.sort_values(by = 'Value', ascending = False,\n                inplace = True)\nedu.head()","be146e32":"edu.sort_index(axis = 0, ascending = True, inplace = True)\nedu.head()","5e8ffc93":"group = edu[[\"GEO\", \"Value\"]].groupby('GEO').mean()\ngroup.head()","bad30d66":"group = edu[[\"GEO\", \"Value\"]].groupby('GEO').mean()\ngroup.head()","6d98d48c":"filtered_data = edu[edu[\"TIME\"] > 2005]\npivedu = pd.pivot_table(filtered_data, values = 'Value',\n                        index = ['GEO'], columns = ['TIME'])\npivedu.head()","ee7cf550":"pivedu.loc[['Spain','Portugal'], [2006,2011]]","f4ebc82c":"pivedu = pivedu.drop(['Euro area (13 countries)',\n                      'Euro area (15 countries)',\n                      'Euro area (17 countries)',\n                      'Euro area (18 countries)',\n                      'European Union (25 countries)',\n                      'European Union (27 countries)',\n                      'European Union (28 countries)'\n                      ], axis=0)\npivedu = pivedu.rename(\n    index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\npivedu = pivedu.dropna()\npivedu.rank(ascending=False, method='first').head()","78e8e9fc":"totalSum = pivedu.sum(axis = 1)\n\ntotalSum.rank(ascending = False, method = 'dense').sort_values().head()","4400f642":"totalSum = pivedu.sum(axis = 1).sort_values(ascending = False)\ntotalSum.plot(kind = 'bar', style = 'b', alpha = 0.4,\n              title = \"Total Values for Country\")","2a75a19a":"my_colors = ['b', 'r', 'g', 'y', 'm', 'c']\nax = pivedu.plot(kind='barh', stacked=True, color=my_colors, figsize=(12, 6))\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.savefig('Value_Time_Country.png', dpi=300, bbox_inches='tight')","185e2c56":"*Question 2: What happens if we give a number as argument to the method head()?","618a6a38":"*Question 1: Which is the size of the edu DataFrame (rows x columns)?\n\n    384 rows \u00d7 3 columns\n","879e02d7":"*Question 6: What does the operation edu[\u2019Value\u2019] > 6.5 produce? An if we apply the indexedu[edu[\u2019Value\u2019] > 6.5]? Is this a Series or a DataFrame?\n\nIt shows the values (starting from the tail) that are greater than 6.5. \n","3e9fe127":"The result is a DataFramewith countries as indexes and the mean values as the column.","6e55d9f2":"To return to the original order, we can sort by an index using the function sort_indexand specifying axis=0:","2b9d85c1":"*Question 5: What does this index return? What does the first index represent? And the second one?\n\n\nThis index returns the data corresponding to the labels as our references instead of the positions..\nFirst index correspond to the column numbers.\nSecond one correspond to the column labels.","62ebfd9c":"*Question 4: Which measures does the result show? It seems that it shows some default values, can you guess which ones?\n\nGenerate descriptive statistics, these ones include those that summarize the central tendency, dispersion and shape of a dataset\u2019s distribution, excluding NaN values.","965de6cc":"We can transform the arrangement of our data, redistributing the indexes and columns for better manipulation of our data, which normally leads to better performance. We can rearrange our data using the function pivot_table. Here, we can specify which columns will be the new indexes, the new values, and the new columns.","aa978b5e":"This expression shows the maximum value of each column (in the case of Spain it is because of the alphabetical order)","170ff7a9":"The last five elements appears","d6149328":"The first five elements appears","e252461d":"To see the first five rows of data sorted in descending order (i.e., from the largest to the smallest values) and using the column Value"}}