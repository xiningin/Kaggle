{"cell_type":{"5511fda2":"code","5d78d9b3":"code","ce8710b4":"code","73fc5c0e":"code","578f07c1":"code","0ad8bc1f":"code","3233a239":"markdown","a7a2f201":"markdown","46540e7d":"markdown","0582ab28":"markdown"},"source":{"5511fda2":"import tensorflow as tf\nimport pandas as pd\nimport matplotlib.pyplot as plt","5d78d9b3":"dir = '\/kaggle\/input\/salary-data-simple-linear-regression\/Salary_Data.csv'","ce8710b4":"# Equivalent to np.array()\ndata = tf.Variable(pd.read_csv(dir))\n\nprint(data.shape)\n\nX = data[:, 0]\nY = data[:, 1]\n\n# Equivalent to np.mean()\nmeans = tf.reduce_mean(Y)\n\n# Scale the data down so that it doesnt cause any problems later\nY = Y\/means","73fc5c0e":"plt.figure(figsize=(15, 7))\nplt.scatter(X, Y*means, color='red')\nplt.xlabel(\"Years of Experiance\")\nplt.ylabel(\"Salary\")\nplt.legend()","578f07c1":"import numpy as np\nclass LinReg1:\n    def __init__(self):\n        self.num=0\n        self.den=1\n        self.m = 0\n        self.c = 0\n    \n    def fit(self, X, Y):\n        \n        # equivalent to np.sum((X - tf.mean(X))*(Y - tf.mean(Y)))\n        self.num = tf.reduce_sum((X - tf.reduce_mean(X))*(Y - tf.reduce_mean(Y)))\n        self.den = tf.reduce_sum((X - tf.reduce_mean(X))**2)\n        \n        self.m = self.num\/self.den\n        self.c = tf.reduce_sum(tf.reduce_mean(Y) - tf.reduce_mean(X) * self.m)\n    \n    def predict(self,X):\n\n        return (X*self.m + self.c)\n    \n    def evaluate(self, X, Y):\n        ypreds = self.predict(X)\n        error = tf.square(ypreds-Y)\n        return tf.reduce_mean(error)\n\n    def plot(self, X, Y):\n        preds = self.predict(X)\n        plt.figure(figsize=(15,7))\n        # Multiply back with mean of the real data to get correct prediction scale \n        plt.plot(X, preds * means, color='red', label='Regressor Line')\n        plt.scatter(X, Y * means, color='green', label='Targets')\n        plt.legend()\nlin = LinReg1()","0ad8bc1f":"lin.fit(X, Y)\nprint(f\"Slope: {lin.m}\\nIntercept: {lin.c}\")\nprint(f\"Mean squared error: {lin.evaluate(X, Y)}\")\nlin.plot(X, Y)","3233a239":"# Linear Regression using Tensorflow instead of Numpy","a7a2f201":"# Read the dataset csv and store as a tensorflow variable","46540e7d":"# Make the Linear Regressor class\n#### The formula used for linear regression is:\n##### Slope: \\\\(\\Large M =  \\frac{\\sum_{i=1}^n(X_i - \\bar{X})(Y_i - \\bar{Y})}{\\sum_{i=1}^n(X_i - \\bar{X})^2}\\\\)\n\n##### Intercept : \\\\(\\Large C = \\bar{Y} - m\\bar{X} \\\\)\n\n##### Predictions : \\\\(\\Large \\hat{Y} = M*X + C \\\\)\n\n##### Error : \\\\(\\Large MSE = \\sum_{i=1}^n(\\hat{Y} - Y)^2 \\\\)\n","0582ab28":"# Fit the best line using linear regression"}}