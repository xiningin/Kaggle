{"cell_type":{"07d6adfc":"code","77a5f2ce":"code","54b1a969":"code","77a6a2f3":"code","b7c9d2d1":"code","2ced160a":"code","f6450759":"code","b8f13ba5":"code","9f7186d1":"markdown","518f9fe3":"markdown","18e1bf48":"markdown","7e5c6099":"markdown","7774462c":"markdown","cf11c209":"markdown"},"source":{"07d6adfc":"import numpy as np\nimport pandas as pd\n\nimport os\nimport json\nfrom pathlib import Path\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\nimport numpy as np","77a5f2ce":"# From: https:\/\/www.kaggle.com\/boliu0\/visualizing-all-task-pairs-with-gridlines\n\ndef plot_one(task, ax, i,train_or_test, input_or_output):\n    cmap = colors.ListedColormap(\n        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\n    norm = colors.Normalize(vmin=0, vmax=9)\n    \n    input_matrix = task[train_or_test][i][input_or_output]\n    ax.imshow(input_matrix, cmap=cmap, norm=norm)\n    ax.grid(True,which='both',color='lightgrey', linewidth=0.5)    \n    ax.set_yticks([x-0.5 for x in range(1+len(input_matrix))])\n    ax.set_xticks([x-0.5 for x in range(1+len(input_matrix[0]))])     \n    ax.set_xticklabels([])\n    ax.set_yticklabels([])\n    ax.set_title(train_or_test + ' '+input_or_output)\n    \n\ndef plot_task(task):\n    \"\"\"\n    Plots the first train and test pairs of a specified task,\n    using same color scheme as the ARC app\n    \"\"\"    \n    num_train = len(task['train'])\n    fig, axs = plt.subplots(2, num_train, figsize=(3*num_train,3*2))\n    for i in range(num_train):     \n        plot_one(task, axs[0,i],i,'train','input')\n        plot_one(task, axs[1,i],i,'train','output')        \n    plt.tight_layout()\n    plt.show()        \n        \n    num_test = len(task['test'])\n    fig, axs = plt.subplots(2, num_test, figsize=(3*num_test,3*2))\n    if num_test==1: \n        plot_one(task, axs[0],0,'test','input')\n        plot_one(task, axs[1],0,'test','output')     \n    else:\n        for i in range(num_test):      \n            plot_one(task, axs[0,i],i,'test','input')\n            plot_one(task, axs[1,i],i,'test','output')  \n    plt.tight_layout()\n    plt.show() \n","54b1a969":"extra_tasks_path = Path('\/kaggle\/input\/extra-arc-tasks-for-testing\/')\n\ndef show_extra_task(task_name):\n    task_file = str(extra_tasks_path \/ (task_name + \".json\"))    \n    with open(task_file, 'r') as f:\n        task = json.load(f)\n    plot_task(task)","77a6a2f3":"show_extra_task(\"new_task_01\")","b7c9d2d1":"show_extra_task(\"new_task_02\")","2ced160a":"show_extra_task(\"new_task_03\")","f6450759":"show_extra_task(\"new_task_04\")","b8f13ba5":"show_extra_task(\"new_task_05\")","9f7186d1":"### Task 05\n\nExtract panels in a 3x1 grid. Select the panel that has up-down symmetry and then flip it left-right. A still more complex example might require the solver to check the direction of the symmetry and then flip in the other direction.","518f9fe3":"### Task 01\n\nA simple repeats tasks, but where the number of repeats depends on the count of non-zero values in the input.","18e1bf48":"# Introduction\n\nMany of us working on the ARC challenge have found that good results on the training and evaluation sets do not necessarily translate to the private test set. It is stated that the private test set contains the same type of problems as the public examples. However the private test set is probably just a little more complicated in some way. Testing our algorithms to check they correctly implement the required generality is hard without access to the test data. So, I got creative and generated some hopefully harder tasks based on the same core knowledge priors as the public ARC data.\n\nWith code taken from https:\/\/www.kaggle.com\/boliu0\/visualizing-all-task-pairs-with-gridlines, this notebook visualizes the new tasks I have created for testing.","7e5c6099":"### Task 04\n\nSplit the input into 3x3 panels. Apply a logical or to the two panels with the highest non-zero value count, then apply the colour from the panel with the lowest non-zero value count. Note that the first train example is particularly ambiguous and could be solved other ways, so this task relies on the second training example.","7774462c":"### Task 03\n\nExtracting panels in this task is made harder by noise. Once extracted, the most common panel is selected, then flipped left-right to make the output.","cf11c209":"### Task 02\n\nAnother repeats tasks. This time the number of repeats is *(count of blue)* horizontally and *(count of red)* vertically."}}