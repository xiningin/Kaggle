{"cell_type":{"6f318781":"code","cb0360fe":"code","f7b41d51":"code","a0044182":"code","be5097e7":"code","f1b2b3b9":"code","ed4f38e9":"code","40c5e1e1":"code","4ba573e8":"code","be6d5795":"code","1f72593d":"code","ef78fe63":"code","0a9f6580":"code","e1d0a12a":"code","785eb0ae":"code","261a24ab":"code","20a6ca38":"code","993b77bd":"code","715a381c":"code","bdb59cc7":"code","731fa45a":"code","c003e543":"code","a9e76758":"code","cdc790a0":"code","193ccf16":"code","2643c3fc":"code","2a730532":"code","a859be60":"code","7bc28117":"code","171a63b7":"code","a259f7ba":"code","fcd53364":"code","69af4224":"code","301ba451":"code","50cf4841":"code","f75736d6":"code","5c43fcee":"code","80faec2b":"code","805796f9":"code","3117ac63":"code","b0e0cd46":"code","91eea1d3":"code","6486143d":"markdown","10ed1511":"markdown","b2736b72":"markdown","ba8815bf":"markdown","3ae62d08":"markdown","fd99a2fe":"markdown","9727e4d7":"markdown","7d5092b6":"markdown","a43fdece":"markdown","6ddf9f8e":"markdown","a2806ca3":"markdown","1e2d0cc1":"markdown","f7fafbd9":"markdown","0146148c":"markdown"},"source":{"6f318781":"import sys\nprint('\\nRunning on %s' % sys.platform)\nprint('Python Version', sys.version)","cb0360fe":"from datetime import datetime\nfrom dateutil.relativedelta import *\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nimport sklearn\nassert sklearn.__version__ >= '0.20'\nimport math\nimport os\nimport sys\nimport matplotlib.pyplot as plt\nimport yellowbrick\nimport statsmodels\nimport tensorflow as tf\nimport skimage.io as io\n\nimport warnings\nwarnings.filterwarnings('ignore')","f7b41d51":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV, StratifiedKFold\nfrom sklearn.preprocessing import StandardScaler, RobustScaler, OneHotEncoder\n#from sklearn.pipeline import Pipeline, make_pipeline\nfrom imblearn.pipeline import make_pipeline\nfrom sklearn.metrics import precision_score, recall_score, accuracy_score, roc_curve, auc, confusion_matrix, roc_auc_score\nfrom sklearn.metrics import classification_report, plot_confusion_matrix, plot_roc_curve\nfrom imblearn.over_sampling import SMOTE\nfrom imblearn.pipeline import Pipeline, make_pipeline\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor, plot_tree\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom xgboost import XGBClassifier","a0044182":"color = ['#dc2624', '#2b4750', '#45a0a2', '#e87a59','#7dcaa9', '#649E7D', '#dc8018', '#C89F91', '#6c6d6c', '#4f6268', '#c7cccf']\nsns.set_palette(color)\nsns.set_style('darkgrid',{'axes.facecolor':'#F5F5F5'});\nsns.palplot(sns.color_palette())","be5097e7":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f1b2b3b9":"creditcard = pd.read_csv('\/kaggle\/input\/creditcardfraud\/creditcard.csv')\ncreditcard.head()","ed4f38e9":"plt.figure(figsize=(6,4));\nsns.countplot(data=creditcard, x='Class');","40c5e1e1":"creditcard['Class'].value_counts()\/len(creditcard)","4ba573e8":"fig, ax = plt.subplots(2, 1, figsize=(15,7), sharex=True);\nbin = np.linspace(0,(24*60*60*2),96) #\u6bcf\u534a\u5c0f\u6642\u505a\u4e00\u500bbin\nsns.histplot(creditcard.Time[creditcard['Class'] == 1], bins=bin, kde=True, ax=ax[0], color = color[0], label = 'Fraud');\nax[0].set_ylabel('');\nax[0].legend();\nsns.histplot(creditcard.Time[creditcard['Class'] == 0], bins=bin, kde=True, ax=ax[1], color = color[1], label= 'Normal');\nax[1].set_ylabel('');\nax[1].legend();","be6d5795":"import datetime\ncreditcard['DateTime'] = datetime.datetime(2021,1,1,0,0,0) + pd.to_timedelta(creditcard['Time'],unit='s')\ncreditcard['Hour'] = creditcard['DateTime'].dt.hour\ncreditcard['Minute'] = creditcard['DateTime'].dt.minute\n\nhourinterval = []\nfor i in range(len(creditcard)):\n    t = creditcard.loc[i,'Hour']\n    hourinterval.append('%d:00' % t)\ncreditcard['HourInterval'] = hourinterval\n\nhalfhourinterval = []\nfor i in range(len(creditcard)):\n    t = creditcard.loc[i,'Hour']\n    halfhourinterval.append('%d:00~%d:29' % (t,t) if (creditcard.loc[i,'Minute'] < 30) else ('%d:30~%d:59' % (t,t)))\ncreditcard['HourInterval_Half'] = halfhourinterval\n\nfig, ax = plt.subplots(2, 1, figsize=(15,7), sharex=True);\nsns.countplot(creditcard.HourInterval_Half[creditcard['Class'] == 1], ax=ax[0], color = color[0], label = 'Fraud');\nax[0].set_ylabel('');\nax[0].set_xlabel('');\nax[0].legend();\nsns.countplot(creditcard.HourInterval_Half[creditcard['Class'] == 0], ax=ax[1], color = color[1], label= 'Normal');\nax[1].set_ylabel('');\nax[1].legend();\nax[1].set_xticklabels(ax[1].get_xticklabels(),rotation=90);","1f72593d":"creditcard.groupby('Class')['Amount'].describe()","ef78fe63":"def checkhist(featurename):\n    fig, ax = plt.subplots(2, 1, figsize=(15,5), sharex=True);\n    bin = np.linspace(creditcard[featurename].min(),creditcard[featurename].max(),100)\n    sns.histplot(creditcard[creditcard['Class'] == 1][featurename], bins=bin, kde=True, ax=ax[0], color = color[0], label = 'Fraud');\n    ax[0].set_ylabel('');\n    ax[0].legend();\n    sns.histplot(creditcard[creditcard['Class'] == 0][featurename], bins=bin, kde=True, ax=ax[1], color = color[1], label= 'Normal');\n    ax[1].set_ylabel('');\n    ax[1].legend();\n\ncheckhist('Amount')","0a9f6580":"corrmatrix = creditcard.corr()\nfig, ax = plt.subplots(figsize=(20, 9));\nsns.heatmap(corrmatrix, square=True);","e1d0a12a":"corrmatrix.loc['Amount'].sort_values(ascending=False)[:5]","785eb0ae":"def checkdist(featurename):\n    fig, ax = plt.subplots(figsize=(15,3), sharex=True);\n    bin = np.linspace(creditcard[featurename].min(),creditcard[featurename].max(),100)\n    sns.distplot(creditcard[creditcard['Class'] == 1][featurename], bins=bin, kde=True, ax=ax, color = color[0], label = 'Fraud');\n    sns.distplot(creditcard[creditcard['Class'] == 0][featurename], bins=bin, kde=True, ax=ax, color = color[1], label= 'Normal');\n    ax.set_ylabel('');\n    ax.legend();","261a24ab":"checkdist('V3')","20a6ca38":"checkdist('V4')","993b77bd":"checkdist('V10')","715a381c":"checkdist('V11')","bdb59cc7":"checkdist('V12')","731fa45a":"checkdist('V14')","c003e543":"checkdist('V16')","a9e76758":"checkdist('V17')","cdc790a0":"checkdist('V18')","193ccf16":"def box(featurename):\n    fig, ax = plt.subplots(2, 1, figsize=(8,3), sharex=True);\n    sns.boxplot(x=featurename, data=creditcard[creditcard['Class'] == 1], ax=ax[0], color = color[0]);\n    ax[0].set_ylabel('Fraud');\n    sns.boxplot(x=featurename, data=creditcard[creditcard['Class'] == 0], ax=ax[1], color = color[1]);\n    ax[1].set_ylabel('Normal');","2643c3fc":"box('V3')","2a730532":"box('V4')","a859be60":"box('V10')","7bc28117":"box('V11')","171a63b7":"box('V12')","a259f7ba":"box('V14')","fcd53364":"box('V16')","69af4224":"box('V17')","301ba451":"box('V18')","50cf4841":"choose_col = ['V3', 'V4', 'V10', 'V11', 'V12', 'V14', 'V16', 'V17', 'V18', 'Amount', 'Class']\nnewcreditcard = creditcard[choose_col]\nsns.pairplot(newcreditcard, hue='Class', hue_order=[1,0]);","f75736d6":"X = newcreditcard.drop(['Class'], axis=1).values\ny = newcreditcard['Class'].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","5c43fcee":"%%time\nrecall = []\nprecision = []\nk_numbers = list(range(3,45,2))\n\nfor k in k_numbers:\n    model = make_pipeline( SMOTE(random_state=42), RobustScaler(), KNeighborsClassifier(n_neighbors = k, algorithm = 'auto') )\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    recall.append(recall_score(y_test, y_pred))\n    precision.append(precision_score(y_test, y_pred))\n\nfig, ax = plt.subplots(2,1,figsize=(12,6),sharex=True);\nax[0].set_title('Recall')\nax[0].plot(k_numbers, recall, marker='o', ls='--', c=color[0]);\nax[1].set_title('Precision')\nax[1].plot(k_numbers, precision, marker='o', ls='--', c=color[1]);","80faec2b":"%%time\nk_numbers = [3,5,13]\nyhat_list = []\nrep_list = []\nroc_auc_list = []\n\nfig, ax = plt.subplots(2, len(k_numbers), figsize=(18,12));\nfor i in range(len(k_numbers)):\n    model = make_pipeline( SMOTE(random_state=42), RobustScaler(), KNeighborsClassifier(n_neighbors = k_numbers[i], algorithm = 'auto') )\n    model.fit(X_train, y_train)\n    plot_confusion_matrix(model, X_test, y_test, ax=ax[0,i], cmap='Blues', values_format='d');\n    plot_confusion_matrix(model, X_test, y_test, ax=ax[1,i], cmap='Blues', normalize='true');\n    ax[0,i].set_title('k=%d' % k_numbers[i])\n\n    yhat = model.predict(X_test)\n    yhat_list.append(yhat)\n\n    rep = classification_report(y_test, yhat_list[i])\n    rep_list.append(rep)\n\n    roc_auc = roc_auc_score(y_test, yhat_list[i])\n    roc_auc_list.append(roc_auc)","805796f9":"for i in range(len(k_numbers)):\n    print('k=%d' % k_numbers[i])\n    print(rep_list[i])\n    print('ROC Score: %.2f' % roc_auc_list[i])\n    print('-----------------------------------------------------')","3117ac63":"%%time\nfrom sklearn.ensemble import RandomForestClassifier\n\nchoose_col = ['V3', 'V4', 'V10', 'V11', 'V12', 'V14', 'V16', 'V17', 'V18', 'Amount', 'Class']\nnewcreditcard = creditcard[choose_col]\n\nX = newcreditcard.drop(['Class'], axis=1).values\ny = newcreditcard['Class'].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\nmodel = make_pipeline( SMOTE(random_state=42), RobustScaler(), RandomForestClassifier(random_state=42) )\nmodel.fit(X_train, y_train)\n\nyhat = model.predict(X_test)\nrep = classification_report(y_test, yhat)\nprint(rep)\n\nroc_auc = roc_auc_score(y_test, yhat)\nprint('ROC Score: %.2f' % roc_auc)\n\nfig, ax = plt.subplots(1,2,figsize=(12,6));\nplot_confusion_matrix(model, X_test, y_test, ax=ax[0], cmap='Blues', values_format='d');\nplot_confusion_matrix(model, X_test, y_test, ax=ax[1], cmap='Blues', normalize='true');","b0e0cd46":"%%time\nchoose_col = ['V3', 'V4', 'V10', 'V11', 'V12', 'V14', 'V16', 'V17', 'V18', 'Amount', 'Class']\nnewcreditcard = creditcard[choose_col]\n\nX = newcreditcard.drop(['Class'], axis=1).values\ny = newcreditcard['Class'].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\nmodel_1 = make_pipeline( SMOTE(random_state=42), RobustScaler(), KNeighborsClassifier(n_neighbors = 3, algorithm = 'auto') )\nmodel_2 = make_pipeline( SMOTE(random_state=42), RobustScaler(), LogisticRegression() )\nmodel_3 = make_pipeline( SMOTE(random_state=42), RobustScaler(), SVC() )\nmodel_4 = make_pipeline( SMOTE(random_state=42), RobustScaler(), DecisionTreeClassifier(criterion='entropy') )\nmodel_5 = make_pipeline( SMOTE(random_state=42), RobustScaler(), RandomForestClassifier() )\nmodel_6 = make_pipeline( SMOTE(random_state=42), RobustScaler(), AdaBoostClassifier() )\nmodel_7 = make_pipeline( SMOTE(random_state=42), RobustScaler(), GradientBoostingClassifier() )\nmodel_8 = make_pipeline( SMOTE(random_state=42), RobustScaler(), XGBClassifier() )\n\nmodels = [model_1, model_2, model_3, model_4, model_5, model_6, model_7, model_8]\ntitles = ['KNN (k=3)',  'LogisticRegression', 'SVM', 'DecisionTree (entropy)', 'RandomForest', 'AdaBoost', 'GradientBoost', 'XGBOOST']\n\nmodel_comp = pd.DataFrame()\ncv = StratifiedKFold(n_splits=5)\n\nfor i, model in enumerate(models):\n    model_comp[titles[i]] = cross_val_score(model, X_train, y_train, scoring='f1_weighted', cv=cv)\n\nfig, ax = plt.subplots(figsize=(15,6));\nsns.boxplot(data=model_comp, ax=ax);","91eea1d3":"RF = RandomForestClassifier()\nRF.set_params()","6486143d":"## 0.2 \u521d\u63a2\u8cc7\u6599\n### 0.2.1 \u78ba\u8a8d\u8cc7\u6599\u5206\u4f48\n#### Class\n\u8cc7\u6599\u985e\u5225\u6975\u5ea6\u4e0d\u5e73\u8861\uff0c\u5efa\u6a21\u6642\u9700\u7d0d\u5165\u8cc7\u6599\u5e73\u8861\u65b9\u6cd5\uff0c\u5982SMOTE\u3002","10ed1511":"1. V1~V28\u90fd\u662f\u7d93\u904ePCA\u8f49\u63db\u7522\u751f\u3002\n2. Time\u55ae\u4f4d\u70ba\u79d2\u3002\n3. Amount\u70ba\u4ea4\u6613\u91d1\u984d\u3002","b2736b72":"### 0.2.4 boxplot","ba8815bf":"## 0.1 \u8b80\u53d6\u8cc7\u6599","3ae62d08":"# 3 RandomForest\u53c3\u6578\u8abf\u6574\nRandomForest\u8868\u73fe\u6700\u4f73\uff0c\u6c7a\u5b9a\u518d\u9032\u4e00\u6b65\u5c0dRandomForest\u9032\u884c\u53c3\u6578\u8abf\u6574\u3002","fd99a2fe":"## 2.2 RandomForest","9727e4d7":"# 0 \u524d\u7f6e\u4f5c\u696d","7d5092b6":"## 2.3 \u6a21\u578b\u6bd4\u8f03","a43fdece":"#### Time\n1. Fraud\u8cc7\u6599\u770b\u8d77\u4f86\u6c92\u6709\u7279\u5225\u7684\u6642\u9593\u5206\u4f48\u3002\n2. \u8cc7\u6599\u6709\u660e\u986f\u7684\u5927\u773e\u6d3b\u52d5\u6642\u9593(09:00~23:00)\uff0c\u4f46Fraud\u8cc7\u6599\u6c92\u6709\u6b64\u73fe\u8c61\u3002\n3. \u7d93\u5f8c\u7e8c\u6e2c\u8a66\uff0c\u8a8d\u70baTime\u5c0d\u6a21\u578b\u5e6b\u52a9\u4e0d\u5927\uff0c\u4e0d\u63a1\u7528Time\u76f8\u95dc\u7279\u5fb5\u3002","6ddf9f8e":"# 2 \u5617\u8a66\u5efa\u6a21\n## 2.1 KNN","a2806ca3":"# 1 \u7279\u5fb5\u9078\u64c7","1e2d0cc1":"### 0.2.3 distplot\n\u770b\u54ea\u4e9b\u7279\u5fb5\u5728class 0\u548c1\u7684\u5340\u5225\u8f03\u5927\\\n\u6700\u5f8c\u6311\u51fa3\u30014\u300110\u300111\u300112\u300114\u300116\u300117\u300118\u3002","f7fafbd9":"### 0.2.2 \u76f8\u95dc\u6027\nV7\u548cV20\u8ddfAmount\u76f8\u95dc\u6027\u76f8\u5c0d\u9ad8\uff0c\u4f46\u4e5f\u90fd\u4f4e\u65bc0.5\u3002","0146148c":"#### Amount\n1. Amount\u8cc7\u6599\u504f\u614b\u660e\u986f\n2. \u8a50\u6b3a\u7684\u91d1\u984d\u76f8\u8f03\u662f\u5c0f\u6578\u76ee"}}