{"cell_type":{"f53d9ea0":"code","f7aab2da":"code","81500232":"code","2ccb7e31":"code","389868e8":"code","f29cd6d0":"code","3c9c40dc":"code","83e384fc":"code","1b5dec0a":"code","777cbad3":"code","71458154":"code","ac9d1501":"code","9785fb03":"code","b91635ce":"code","dd1a25ca":"code","b2a846ca":"markdown","72488b95":"markdown"},"source":{"f53d9ea0":"import numpy as np\nimport pandas as pd\nimport os\nimport cv2\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport matplotlib.patches as patches\nimport pylab as pl\nfrom PIL import Image","f7aab2da":"img0 = \"..\/input\/detect-person-on-motorbike-or-scooter\/dataset\/obj\/115.jpg\"\n_ = plt.figure(figsize = (15,15))\n_ = plt.axis('off')\n_ = plt.imshow(mpimg.imread(img0))","81500232":"directory = '..\/input\/detect-person-on-motorbike-or-scooter\/dataset\/obj\/'\n\nimagepath=[]\nimagefile=[]\nboxset=[]\nboxfile=[]\n\nfor im in os.listdir(directory):\n    if im[-4:]=='.jpg':\n        path=os.path.join(directory,im)\n        imagepath+=[path]\n        imagefile+=[im]\n        \nfor im in imagefile:\n    if im[-4:]=='.jpg':\n        bx=im[0:-4]+'.txt'\n        path=os.path.join(directory,bx)\n        if os.path.isfile(path):\n            bxdata=np.loadtxt(path)\n        boxset+=[bxdata]\n        boxfile+=[bx]       ","2ccb7e31":"print(imagefile[0:5])\nprint(boxfile[0:5])","389868e8":"print(len(boxset))\nprint(len(imagepath))","f29cd6d0":"num0=0\nfor i in range(692):\n    if imagepath[i]==img0:\n        num0=i\n        print(i)","3c9c40dc":"# for person on bike\nweights0_path = '..\/input\/detect-person-on-motorbike-or-scooter\/yolov3-obj_final.weights'\nconfiguration0_path = '..\/input\/detect-person-on-motorbike-or-scooter\/yolov3_pb.cfg'\n\nprobability_minimum = 0.5\nthreshold = 0.3","83e384fc":"network0 = cv2.dnn.readNetFromDarknet(configuration0_path, weights0_path)\nlayers_names0_all = network0.getLayerNames()\nlayers_names0_output = [layers_names0_all[i[0]-1] for i in network0.getUnconnectedOutLayers()]\nlabels0 = open('..\/input\/detect-person-on-motorbike-or-scooter\/coco.names').read().strip().split('\\n')\nprint(labels0)","1b5dec0a":"# for helmet\nweights1_path = '..\/input\/helmet-detection-yolov3\/yolov3-helmet.weights'\nconfiguration1_path = '..\/input\/helmet-detection-yolov3\/yolov3-helmet.cfg'","777cbad3":"network1 = cv2.dnn.readNetFromDarknet(configuration1_path, weights1_path)\nlayers_names1_all = network1.getLayerNames()\nlayers_names1_output = [layers_names1_all[i[0]-1] for i in network1.getUnconnectedOutLayers()]\nlabels1 = open('..\/input\/helmet-detection-yolov3\/helmet.names').read().strip().split('\\n')\nprint(labels1)","71458154":"image_input = cv2.imread(imagepath[num0])\nblob = cv2.dnn.blobFromImage(image_input,1\/255.0,(416,416),swapRB=True,crop=False)\nblob_to_show = blob[0,:,:,:].transpose(1,2,0)\nnetwork0.setInput(blob)\nnetwork1.setInput(blob)\noutput_from_network0 = network0.forward(layers_names0_output)\noutput_from_network1 = network1.forward(layers_names1_output)\nnp.random.seed(42)\ncolours0 = np.random.randint(0,255,size=(len(labels0),3),dtype='uint8')\ncolours1 = np.random.randint(0,255,size=(len(labels1),3),dtype='uint8')\n\nprint(colours0)\nprint(colours1)","ac9d1501":"bounding_boxes0 = []\nconfidences0 = []\nclass_numbers0 = []\n\nbounding_boxes1 = []\nconfidences1 = []\nclass_numbers1 = []\n\nh,w = image_input.shape[:2]\n\nfor result in output_from_network0:\n    for detection in result:\n        scores = detection[5:]\n        class_current=np.argmax(scores)\n        confidence_current=scores[class_current]\n        if confidence_current>probability_minimum:\n            box_current=detection[0:4]*np.array([w,h,w,h])\n            x_center,y_center,box_width,box_height=box_current.astype('int')\n            x_min=int(x_center-(box_width\/2))\n            y_min=int(y_center-(box_height\/2))\n            \n            bounding_boxes0.append([x_min,y_min,int(box_width),int(box_height)])\n            confidences0.append(float(confidence_current))\n            class_numbers0.append(class_current)\n            \nfor result in output_from_network1:\n    for detection in result:\n        scores = detection[5:]\n        class_current=np.argmax(scores)\n        confidence_current=scores[class_current]\n        if confidence_current>probability_minimum:\n            box_current=detection[0:4]*np.array([w,h,w,h])\n            x_center,y_center,box_width,box_height=box_current.astype('int')\n            x_min=int(x_center-(box_width\/2))\n            y_min=int(y_center-(box_height\/2))\n            \n            bounding_boxes1.append([x_min,y_min,int(box_width),int(box_height)])\n            confidences1.append(float(confidence_current))\n            class_numbers1.append(class_current)            ","9785fb03":"results0 = cv2.dnn.NMSBoxes(bounding_boxes0,confidences0,probability_minimum,threshold)\n\nif len(results0) > 0:\n    for i in results0.flatten():\n        x_min,y_min=bounding_boxes0[i][0],bounding_boxes0[i][1]\n        box_width,box_height= bounding_boxes0[i][2],bounding_boxes0[i][3]\n        colour_box_current=[int(j) for j in colours0[class_numbers0[i]]]   \n        cv2.rectangle(image_input,(x_min,y_min),(x_min+box_width,y_min+box_height),colour_box_current,5)\n        text_box_current0='{}: {:.4f}'.format(labels0[int(class_numbers0[i])],confidences0[i])\n        cv2.putText(image_input,text_box_current0,(x_min,y_min-7),cv2.FONT_HERSHEY_SIMPLEX,1.5,colour_box_current,5)","b91635ce":"results1 = cv2.dnn.NMSBoxes(bounding_boxes1,confidences1,probability_minimum,threshold)\n\nif len(results1) > 0:\n    for i in results1.flatten():\n        x_min,y_min=bounding_boxes1[i][0],bounding_boxes1[i][1]\n        box_width,box_height= bounding_boxes1[i][2],bounding_boxes1[i][3]\n        colour_box_current=[int(j) for j in colours1[class_numbers1[i]]]   \n        cv2.rectangle(image_input,(x_min,y_min),(x_min+box_width,y_min+box_height),colour_box_current,5)\n        text_box_current1='{}: {:.4f}'.format(labels1[int(class_numbers1[i])],confidences1[i])\n        cv2.putText(image_input,text_box_current1,(x_min,y_min-7),cv2.FONT_HERSHEY_SIMPLEX,1.5,colour_box_current,5)","dd1a25ca":"%matplotlib inline\nplt.rcParams['figure.figsize'] = (15.0,15.0)\nplt.imshow(cv2.cvtColor(image_input,cv2.COLOR_BGR2RGB))\nplt.show()","b2a846ca":"# Data Viewing","72488b95":"# YOLO Detection"}}