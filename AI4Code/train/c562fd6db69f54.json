{"cell_type":{"85fcb1dd":"code","dbd9fc27":"code","07f90a81":"code","6e69540b":"code","f95189c2":"code","cce0f072":"code","63b9f1f7":"code","f9008d59":"code","0d2c2128":"code","024d8550":"code","03568431":"code","4c23d66b":"code","ea2fb24d":"code","ea98d3d7":"code","88b80cfd":"code","b96fda0c":"code","cea08ae2":"code","5a5f577d":"code","c2906c54":"code","1479af85":"code","04bf98fc":"code","8257d05d":"code","7953e01f":"code","6ebab769":"code","a3e931b5":"code","6fb14bda":"code","16510f7c":"code","cace2b95":"code","365922a0":"code","0bad91e8":"code","788c826d":"code","97e052d2":"code","92c03814":"code","2a31aa3f":"code","01a3f59b":"code","a9c57bc1":"code","0e338b4c":"code","1ea98aee":"code","1dee04a5":"code","646221f5":"code","1a36e42a":"code","4ae99787":"markdown","adcc48e8":"markdown","70de37cc":"markdown","0d7c640a":"markdown","ff8fbbcd":"markdown","5178c7a0":"markdown","4a26dd79":"markdown","bc055cbf":"markdown","9235dfc4":"markdown","1455fa2c":"markdown","6c927980":"markdown","335cafa7":"markdown","bdd27a05":"markdown","ee319561":"markdown","1b072f6d":"markdown","cda4745a":"markdown","5fe971dc":"markdown","1f2ede5d":"markdown","c08d0e39":"markdown","bee5fbf1":"markdown","e1c4bdec":"markdown","b66cc7e5":"markdown","f91cd1b7":"markdown","835db619":"markdown","c9250509":"markdown","a6ea56c0":"markdown","55bbe519":"markdown","3385a832":"markdown","48f8909d":"markdown","d524a6bc":"markdown","5f33d3f9":"markdown","110da7d1":"markdown","e679d1fc":"markdown","c3f6231e":"markdown","d73d26cf":"markdown","b095730d":"markdown","606e73a2":"markdown","baa53244":"markdown","151787e8":"markdown","48a8fbed":"markdown","e7ef4bff":"markdown","78fd7e73":"markdown","a35c4dc0":"markdown","f523a8f8":"markdown"},"source":{"85fcb1dd":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","dbd9fc27":"source_train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\nsource_test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntrain = source_train\ntest = source_test","07f90a81":"train.head()","6e69540b":"test.head()","f95189c2":"train.describe()","cce0f072":"len(test)","63b9f1f7":"len(train)","f9008d59":"test.info()","0d2c2128":"train.info()","024d8550":"train[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index=False).mean()","03568431":"train[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index=False).mean()","4c23d66b":"train[[\"Pclass\", \"Survived\"]].groupby([\"Pclass\"], as_index=False).mean()","ea2fb24d":"train[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index=False).mean()","ea98d3d7":"g = sns.FacetGrid(train, col=\"Survived\")\ng.map(plt.hist, \"Age\", bins=20)","88b80cfd":"g = sns.FacetGrid(train, col=\"Embarked\")\ng.map(sns.barplot, \"Sex\", \"Survived\")\ng.add_legend()","b96fda0c":"g = sns.FacetGrid(train, col=\"Survived\", row=\"Sex\")\ng.map(plt.hist,\"Fare\")","cea08ae2":"train[\"Embarked\"].isna().value_counts()","5a5f577d":"test[\"Embarked\"].isna().value_counts()","c2906c54":"train.loc[(train[\"Embarked\"].isna()) & (train[\"Survived\"] == 1), \"Embarked\"] = \"C\"","1479af85":"train[\"Embarked\"].isna().value_counts()","04bf98fc":"train[\"Age\"].isna().value_counts()","8257d05d":"test[\"Age\"].isna().value_counts()","7953e01f":"median_male = train[\"Age\"].dropna().loc[train[\"Sex\"] == \"male\"].median()\nmedian_female = train[\"Age\"].dropna().loc[train[\"Sex\"] == \"female\"].median()","6ebab769":"train.loc[(train[\"Age\"].isna()) & (train[\"Sex\"] == \"male\"), \"Age\"]=median_male\ntrain.loc[(train[\"Age\"].isna()) & (train[\"Sex\"] == \"female\"), \"Age\"]=median_female\ntest.loc[(test[\"Age\"].isna()) & (test[\"Sex\"] == \"male\"), \"Age\"]=median_male\ntest.loc[(test[\"Age\"].isna()) & (test[\"Sex\"] == \"female\"), \"Age\"]=median_female","a3e931b5":"train[\"Age\"].isna().value_counts()","6fb14bda":"test[\"Age\"].isna().value_counts()","16510f7c":"train[\"Fare\"].isna().value_counts()","cace2b95":"test[\"Fare\"].isna().value_counts()","365922a0":"g = sns.FacetGrid(train, col = \"Pclass\")\ng.map(sns.barplot, \"Sex\", \"Fare\")","0bad91e8":"for i in range(1,4):\n    mid_fare_male = train.loc[(train[\"Sex\"]==\"male\") & (train[\"Pclass\"] == i), \"Fare\"].median()\n    mid_fare_female = train.loc[(train[\"Sex\"]==\"female\") & (train[\"Pclass\"] == i), \"Fare\"].median()\n    test.loc[(test[\"Fare\"].isna()) & (train[\"Sex\"]==\"male\") & (train[\"Pclass\"] == i), \"Fare\"] = mid_fare_male\n    test.loc[(test[\"Fare\"].isna()) & (train[\"Sex\"]==\"female\") & (train[\"Pclass\"] == i), \"Fare\"] = mid_fare_female","788c826d":"test[\"Fare\"].isna().value_counts()","97e052d2":"train[\"Age\"] = (train[\"Age\"]\/10).astype(int)\ntest[\"Age\"] = (test[\"Age\"]\/10).astype(int)","92c03814":"train[[\"Age\",\"Survived\"]].groupby(\"Age\").mean()","2a31aa3f":"train[\"Lowfare\"] = train[\"Fare\"]<=50\ntest[\"Lowfare\"] = test[\"Fare\"]<=50\ntrain.drop(columns=\"Fare\", inplace=True)\ntest.drop(columns=\"Fare\", inplace=True)","01a3f59b":"train.info()","a9c57bc1":"train[\"Pclass\"] = train[\"Pclass\"].astype(str)\ntrain[\"Survived\"] = train[\"Survived\"].astype(str)","0e338b4c":"train.info()","1ea98aee":"from catboost import CatBoostClassifier\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","1dee04a5":"features = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"Age\", \"Embarked\", \"Lowfare\"]\n\n\nx = pd.get_dummies(train[features], columns = [\"Pclass\", \"Embarked\"])\ny = train[\"Survived\"].values\n\nxtrain, xtest, ytrain, ytest = train_test_split(x,y, train_size=.85)\n\nmodel_cb = CatBoostClassifier(iterations= 100, eval_metric='Accuracy', use_best_model=True, random_state=1234)\nmodel_cb.fit(xtrain, ytrain, cat_features=x.columns, use_best_model=True , eval_set=(xtest, ytest))","646221f5":"fi_score = model_cb.get_feature_importance()\npd.DataFrame({\"feature\": x.columns, \"feature importance score\": fi_score})","1a36e42a":"X = pd.get_dummies(test[features], columns = [\"Pclass\", \"Embarked\"])\nprediction_cb = model_cb.predict(X)\n\nsubmit_cb = pd.DataFrame({\"PassengerId\": test[\"PassengerId\"], \"Survived\" : prediction_cb })\nsubmit_cb.to_csv(\"submit_cb\", index=False)","4ae99787":"### Insight:\n* Male have a lower chance to survive than female on embarked S & Q\n* Male have a higher chance to survive than female on embarked C\n\n### Conclusion:\n* We should consider adding embarked feature into our model\n* We need to tackle the missing value problem at embarked feature","adcc48e8":"### Age Feature","70de37cc":"#### Checking if there's any missing value left","0d7c640a":"### Insight:\n* People who ride the Titanic with their siblings\/spouse, the higher the number of spouse\/siblings, the worse their chance of survivability\n* People who brings more than 5 siblings \/ spouse tend to have a 0% chance to survive\n* People which didn't bring any siblings \/ spouse have a slightly lower chance to survive than people who bring 1 or 2 siblings \/ spouse\n\n### Conclusion:\n* we should consider to use SibSp feature in our model","ff8fbbcd":"# Data Preparation","5178c7a0":"# Titanic - Machine Learning practice with CatBoost","4a26dd79":"## Data Exploration","bc055cbf":"## Loading Data","9235dfc4":"### Fare Feature","1455fa2c":"## Checking the survivability rate based on feature that have a missing values","6c927980":"now our data is good to go","335cafa7":"#### since the histogram from the previous section shows that there's a spike survive rate on around 0-50 fare, therefore we will give a \"Lowfare\" for PassengerId with fare value around 0-50[](http:\/\/)","bdd27a05":"<h2>Data Understanding<\/h2>\nThe data has been split into two groups:\n<ul>\n    <li>training set (train.csv)<\/li>\n    <li>test set (test.csv)<\/li>\n<\/ul>\n<div align=\"justify\">\nThe training set will be used to build our machine learning models. The test set should be used to see how well our model performs on unseen data. For the test set. The training set have 12 features in total, meanwhile the test set only have 11 features. Here is the short explanation for each data feature:<\/div>\n\n<table>\n<tbody>\n<tr>\n<th><strong>Variable<\/strong><\/th>\n<th><strong>Definition<\/strong><\/th>\n<th><strong>Key<\/strong><\/th>\n<\/tr>\n<tr>\n<td>survival<\/td>\n<td>Survival<\/td>\n<td>0 = No, 1 = Yes<\/td>\n<\/tr>\n<tr>\n<td>pclass<\/td>\n<td>Ticket class<\/td>\n<td>1 = 1st, 2 = 2nd, 3 = 3rd<\/td>\n<\/tr>\n<tr>\n<td>sex<\/td>\n<td>Sex<\/td>\n<td>&nbsp;<\/td>\n<\/tr>\n<tr>\n<td>Age<\/td>\n<td>Age in years<\/td>\n<td>&nbsp;<\/td>\n<\/tr>\n<tr>\n<td>sibsp<\/td>\n<td># of siblings \/ spouses aboard the Titanic<\/td>\n<td>&nbsp;<\/td>\n<\/tr>\n<tr>\n<td>parch<\/td>\n<td># of parents \/ children aboard the Titanic<\/td>\n<td>&nbsp;<\/td>\n<\/tr>\n<tr>\n<td>ticket<\/td>\n<td>Ticket number<\/td>\n<td>&nbsp;<\/td>\n<\/tr>\n<tr>\n<td>fare<\/td>\n<td>Passenger fare<\/td>\n<td>&nbsp;<\/td>\n<\/tr>\n<tr>\n<td>cabin<\/td>\n<td>Cabin number<\/td>\n<td>&nbsp;<\/td>\n<\/tr>\n<tr>\n<td>embarked<\/td>\n<td>Port of Embarkation<\/td>\n<td align=\"center\"><ul><li>C = Cherbourg<\/li><li>Q = Queenstown<\/li><li>S = Southampton<\/li><\/ul><\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n\n<br\/>\n<h3>Features notes<\/h3>\n\n**pclass**: A proxy for socio-economic status (SES)\n<ul>\n    <li>1st = Upper<\/li>\n    <li>2nd = Middle<\/li>\n    <li>3rd = Lower<\/li>\n<\/ul>\n\n**age**: Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5\n\n**sibsp**: The dataset defines family relations in this way...\n<ul>\n    <li>Sibling = brother, sister, stepbrother, stepsister<\/li>\n    <li>Spouse = husband, wife (mistresses and fianc\u00e9s were ignored)<\/li>\n<\/ul>\n\n**parch**: The dataset defines family relations in this way...\n<ul>\n    <li>Parent = mother, father<\/li>\n    <li>Child = daughter, son, stepdaughter, stepson<\/li>\n<\/ul>\nSome children travelled only with a nanny, therefore parch=0 for them.","ee319561":"# Model: CatBoost\n### Generating Model","1b072f6d":"## Fixing the missing value\n### Embarked","cda4745a":"### Insight:\n* People from higher class tend to survive more than the lower class\n\n### Conclusion:\n* We should consider Pclass to determine passenger survivability","5fe971dc":"#### check if there's any missing value left","1f2ede5d":"### Sex Feature","c08d0e39":"### Creating Age Bins","bee5fbf1":"### Insight:\n* There's missing data on **Cabin > Age > Embarked**\n* The train data contain **891** rows of data, meanwhile the test data have **418** rows of data (the ratio is pretty good)","e1c4bdec":"### Fare","b66cc7e5":"### Prediction","f91cd1b7":"#### to fill the missing \"Fare\" value on the test data, we will use the median value, depends on the sex & Pclass features","835db619":"### Insight:\n* Male with low fare rate (around 0-50) have a higher chance to not survive than woman who have a low fare rate (around 0-50)\n* confirmed, woman have a better chance of survivability\n* In general, higher fare means possibly have a slightly better chance of survivability\n\n### Conclusion:\n* Since there's only spike surviving rate on a lower rate Fare (around 0-50), we should consider to modify the \"Fare\" into a \"Low fare\" tagging-feature\n* Need to fill the NA value, especially on test data set. (there's 1 row of data, have a missing Fare value) ","c9250509":"### Parch Feature","a6ea56c0":"### SibSp feature","55bbe519":"### Importing Packages","3385a832":"### Pclass feature","48f8909d":"<h2> Case Understanding <\/h2>\n<div style=\"text-align: justify\">\nThe sinking of the Titanic is one of the most infamous shipwrecks in history. On April 15, 1912, during her maiden voyage, the widely considered \u201cunsinkable\u201d RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren\u2019t enough lifeboats for everyone onboard, resulting in the death of 1502 out of 2224 passengers and crew. While there was some element of luck involved in surviving, it seems some groups of people were more likely to survive than others.\n<\/div>\n\n<div align=\"center\">\n<img width=\"600\" src=\"https:\/\/thumbor.forbes.com\/thumbor\/960x0\/https%3A%2F%2Fspecials-images.forbesimg.com%2Fdam%2Fimageserve%2F877330410%2F960x0.jpg%3Ffit%3Dscale\">\nFigure 1 - Titanic visualization (soruce: www.forbes.com)  \n<\/div>\n\n<div style=\"text-align: justify\">\n<br\/>\nIn this notebook, we will build a predictive model that answers the question: \u201cwhat sorts of people were more likely to survive?\u201d using passenger data (ie name, age, gender, socio-economic class, etc). The model that'll be used is catboost. Meanwhile, the data used on this notebook are taken from the \"Titanic - Machine Learning from Disaster\" challenge which can be accessed on \n<a href=\"https:\/\/www.kaggle.com\/c\/titanic\">this link<\/a>.\n<\/div>","d524a6bc":"## Checking the survivability based on Non-null parameters","5f33d3f9":"### Insight:\n* There's a low survival rate from passenger who depart with 4, 5, or 6 parent\/child\n* There's a medium rate of surviving from people who didn't bring any parent\/child\n* There's a high rate of surviving at parent\/child 1, 2, and 3 \n\n### Conclusion:\n* We should take \"Parch\" feature into consideration","110da7d1":"### Feature Importance","e679d1fc":"### Age","c3f6231e":"#### Checking if there's any missing value left","d73d26cf":"### Embarked Feature","b095730d":"#### There's missing datas at both training and test dataset. To tackle this problem, we will try to use the median value for the age, with extra parameter \"Sex\".","606e73a2":"### Insights:\n* People at the age of 0-5 have a better chance of surviving\n* most of the passenger are at the age of 20-30 y.o\n* people at the age of 20-30 have a relatively lower chance of surviving\n\n### Conclusion:\n* We should consider to input Age as a feature in our model\n* To makes the data less complex, we should consider to grouping the age with at least 5 year interval classes.\n* We could assume that the missing value can be filled with the data mode (age of 20-30)","baa53244":"### Final checking","151787e8":"### Creating \"Lowfare\" tag","48a8fbed":"#### Embarked feature has been completed","e7ef4bff":"#### no missing value left on Age feature","78fd7e73":"as we can see, the Pclass Dtype is \"int64\". Pclass isn't an ordered data, therefore we need to change the pclass into a string object. The same thing also works for Survived data.","a35c4dc0":"### Insight:\n* Women tend to have a better survivability (**74%**) more than men (**18%**)\n\n### Conclusion:\n* We should take \"Sex\" feature into consideration","f523a8f8":"#### filling the missing embarked value at training dataset as \"C\" only for passenger that surviving."}}