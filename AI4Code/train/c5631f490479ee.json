{"cell_type":{"6c5e808b":"code","dc6272fd":"code","eaac47d8":"code","c80e2428":"code","1d4fe3a4":"code","62f5cb30":"code","f5c83985":"code","fee43ba2":"code","45620fb6":"code","7d1a9738":"code","d7c04dd9":"code","e97e03ee":"code","555229c9":"code","450ef17f":"code","71ea2e54":"code","27d7349c":"code","49496ecb":"code","ad3c401a":"code","324214ab":"code","098c265c":"code","c1d6b2e7":"code","025f86b5":"code","1090ae7e":"code","d08c01ee":"code","fc2db7ba":"code","c01f5f49":"code","8c9961a1":"code","d2870b5c":"code","c8624686":"code","3ab0593a":"code","588cbb53":"code","7c878b40":"code","2716bdaa":"markdown","3752b0dd":"markdown","ea78bbcc":"markdown","280090c1":"markdown","71114de7":"markdown","9a4149a3":"markdown","4149f411":"markdown","886a4e03":"markdown","1faf3a27":"markdown","5b38a000":"markdown","235992ce":"markdown","fa20b99f":"markdown","9d17289e":"markdown","cc14932b":"markdown","26855e8b":"markdown","0f0978fe":"markdown","a8d69465":"markdown","1c7138b4":"markdown","b4072965":"markdown","b5ca8bee":"markdown","9d178a71":"markdown","50e1ce8b":"markdown","102f5159":"markdown"},"source":{"6c5e808b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dc6272fd":"# Libraries for data analysis\nimport numpy as np\nimport pandas as pd\n\n# Libraries for Visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns","eaac47d8":"df = pd.read_csv('\/kaggle\/input\/911-calls\/911.csv')","c80e2428":"df.head()","1d4fe3a4":"df.info()","62f5cb30":"df.describe()","f5c83985":"# Finding out which column has missing data and how much ?\ndf.isnull().sum()","fee43ba2":"df['zip'].value_counts().head(5)","45620fb6":"df['twp'].value_counts().head(5)","7d1a9738":"df['title'].nunique()","d7c04dd9":"df['Reason'] = df['title'].apply(lambda title: title.split(':')[0])","e97e03ee":"df['Reason'].value_counts()[:1]","555229c9":"sns.set_style('whitegrid')\nsns.countplot(x='Reason', data=df)","450ef17f":"type(df['timeStamp'].iloc[0])","71ea2e54":"df['timeStamp'] = pd.to_datetime(df['timeStamp'])","27d7349c":"df['Hour'] = df['timeStamp'].apply(lambda time: time.hour)\ndf['Month'] = df['timeStamp'].apply(lambda time: time.month)\ndf['Day of Week'] = df['timeStamp'].apply(lambda time: time.dayofweek)","49496ecb":"dmap = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}\n\ndf['Day of Week'] = df['Day of Week'].map(dmap)","ad3c401a":"sns.countplot(x='Day of Week', data=df, hue='Reason')\nplt.legend(loc='best', bbox_to_anchor=(1.25,0.5))","324214ab":"sns.countplot(x='Month', data=df, hue='Reason')\nplt.legend(bbox_to_anchor=(1.25,0.5))","098c265c":"byMonth = df.groupby('Month').count()","c1d6b2e7":"byMonth","025f86b5":"# Could be any column\nbyMonth['twp'].plot()","1090ae7e":"sns.lmplot(x='Month', y='twp', data=byMonth.reset_index())","d08c01ee":"df['Date'] = df['timeStamp'].apply(lambda time: time.date())","fc2db7ba":"plt.figure(figsize=(10,5))\ndf.groupby('Date').count()['twp'].plot()\nplt.tight_layout()","c01f5f49":"fig, axs = plt.subplots(nrows=3, figsize=(10,6))\n\ndf[df['Reason']=='EMS'].groupby('Date')['twp'].count().plot(ax=axs[0])\naxs[0].set_title('EMS',fontsize=15)\ndf[df['Reason']=='Traffic'].groupby('Date')['twp'].count().plot(ax=axs[1])\naxs[1].set_title('Traffic',fontsize=15)\ndf[df['Reason']=='Fire'].groupby('Date')['twp'].count().plot(ax=axs[2])\naxs[2].set_title('Fire',fontsize=15)\n\nplt.tight_layout()","8c9961a1":"dayHour = df.groupby(by=['Day of Week','Hour']).count()['Reason'].unstack()\ndayHour","d2870b5c":"plt.figure(figsize=(12,6))\nsns.heatmap(dayHour,cmap='viridis')","c8624686":"plt.figure(figsize=(12,6))\nsns.clustermap(dayHour, cmap='viridis')","3ab0593a":"dayMonth = df.groupby(by=['Day of Week','Month']).count()['Reason'].unstack()\ndayMonth","588cbb53":"plt.figure(figsize=(12,6))\nsns.heatmap(dayMonth, cmap='viridis')","7c878b40":"plt.figure(figsize=(12,6))\nsns.clustermap(dayMonth, cmap='viridis')","2716bdaa":"** Seaborn's lmplot() to create a linear fit on the number of calls per month. Resetting the index to a column. **","3752b0dd":"** Creating a simple plot off of the dataframe indicating the count of calls per month. **","ea78bbcc":"# Importing libraries and data","280090c1":"Seaborn to create a countplot of the Day of Week column with the hue based off of the Reason column.","71114de7":"What is the most common Reason for a 911 call based off of this new column?","9a4149a3":"What is the data type of the objects in the timeStamp column?","4149f411":"** For a DataFrame that shows the Month as the column. **","886a4e03":"pd.to_datetime to convert the column from strings to DateTime objects.","1faf3a27":"# Exploratory Data Analysis","5b38a000":"** In the titles column there are \"Reasons\/Departments\" specified before the title code. These are EMS, Fire, and Traffic. Use .apply() with a custom lambda expression to create a new column called \"Reason\" that contains this string value.**","235992ce":"** Creating heatmaps with seaborn and our data.**","fa20b99f":"** Simple line plot that fills in the missing months, in order to do this, we'll need to do some work with pandas...**\n\n** creating a gropuby object called byMonth, where you group the DataFrame by the month column and use the count() method for aggregation.**","9d17289e":"Now same for Month:","cc14932b":"** Recreating this plot but create 3 separate plots with each plot representing a Reason for the 911 call**","26855e8b":"*Creating a new column called 'Date' that contains the date from the timeStamp column. Using apply along with the .date() method. *","0f0978fe":"** Notice how the Day of Week is an integer 0-6. Use the .map() with this dictionary to map the actual string names to the day of the week: **\n\ndmap = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}","a8d69465":"seaborn to create a countplot of 911 calls by Reason.","1c7138b4":" Now that the timestamp column are actually DateTime objects, .apply() to create 3 new columns called Hour, Month, and Day of Week. You will create these columns based off of the timeStamp column","b4072965":"How many unique title codes are there in the dataset ?","b5ca8bee":"** groupby this Date column with the count() aggregate and create a plot of counts of 911 calls.**","9d178a71":"What are the top 5 Zipcodes in the data set ?","50e1ce8b":"What are the top 5 township in the dataset ?","102f5159":"** Now create a clustermap using this DataFrame. **"}}