{"cell_type":{"728a4ab2":"code","433172e5":"code","4da5bc54":"code","6534420d":"code","e35f83b4":"code","f79544d2":"code","2d1ea7b4":"markdown"},"source":{"728a4ab2":"from IPython.display import clear_output\n!pip3 install rx\nclear_output()","433172e5":"import random\nimport rx \nfrom rx import create,range,of,operators as op","4da5bc54":"def make_observable(observer, scheduler):\n    observer.on_next(random.random())\n    observer.on_completed()\n    \nDATA = create(make_observable).pipe(op.replay())","6534420d":"DATA.subscribe(\n    on_next = lambda x : print(\"sub1 result = {0}\".format(x)),\n    on_error = lambda e : print(\"sub1 error = {0}\".format(e)),\n    on_completed = lambda : print(\"sub1 completed\")\n)\n\nDATA.subscribe(\n    on_next = lambda x : print(\"sub2 result = {0}\".format(x)),\n    on_error = lambda e : print(\"sub2 error = {0}\".format(e)),\n    on_completed = lambda : print(\"sub2 completed\")\n)\n","e35f83b4":"DATA.connect()","f79544d2":"DATA.subscribe(\n    on_next = lambda x : print(\"sub3 result = {0}\".format(x)),\n    on_error = lambda e : print(\"sub3 error = {0}\".format(e)),\n    on_completed = lambda : print(\"sub3 completed\")\n)","2d1ea7b4":"# replay\n\nworks similar to the replaySubject. \n\nit return the same values, \n\neven if the observable has already emitted, \n\nand some of the subscribers are late in subscribing."}}