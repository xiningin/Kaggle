{"cell_type":{"d48b5f33":"code","09f6fb11":"code","cc028bbd":"code","816f137b":"code","382457d1":"code","0cfa37ba":"code","ea823bf5":"code","75726a73":"code","c48b5f77":"code","eb31b26a":"code","fb4427bb":"code","ac5ba720":"code","9d2efe56":"code","c51d324a":"code","12b54793":"markdown","2b132a01":"markdown","218c8676":"markdown","f32af6a4":"markdown","21a9a3b6":"markdown","b73b6a68":"markdown","b2e2feb2":"markdown","beacb086":"markdown","0cf66e77":"markdown","84a24dbc":"markdown","a8025306":"markdown","c3bc77d2":"markdown"},"source":{"d48b5f33":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","09f6fb11":"import pandas as pd\nimport seaborn as sns\nsns.set()\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\nimport warnings\nwarnings.filterwarnings('ignore')  #this will ignore the warnings.it wont display warnings in notebook\n\niris_df = pd.read_csv('..\/input\/iris\/Iris.csv')","cc028bbd":"iris_df.info()","816f137b":"iris_df[\"Species\"].value_counts()","382457d1":"iris_df.drop(['Id'],axis=1,inplace=True)\niris_df.head()","0cfa37ba":"iris_df.describe().plot(kind = \"area\",fontsize=15, figsize = (20,10), table = True,colormap=\"coolwarm\") \nplt.title(\"High-Level Statistics\",fontsize = 20,weight='bold')\nax1 = plt.axes()\nx_axis = ax1.axes.get_xaxis()\nx_axis.set_visible(False)\nplt.show()","ea823bf5":"colors = ['#ff9999','#66b3ff','#99ff99']\nplt.figure(figsize = (8,8))\npatches,_, _ = plt.pie(iris_df['Species'].value_counts(), explode=(0.01,0.01,0.01), labels=iris_df['Species'].unique(),\n                       colors=colors, autopct='%1.1f%%', textprops={'fontsize': 15,'weight':'bold'})\nfor pie_wedge in patches:\n    pie_wedge.set_edgecolor('black')\nplt.title(\"Iris Species Count\",fontsize = 20,weight='bold')\nplt.show()  ","75726a73":"#Calculate averages of columns based on species.\navg_columns=iris_df.groupby('Species',as_index=False).mean()\n\n# melt() function unpivots a DataFrame from wide to long format.\n# a specific format of the data frame object where one or more columns work as identifiers.\n# all the remaining columns are treated as values.\navg_result_df = pd.melt(avg_columns,id_vars=\"Species\",var_name=\"feature\",value_name='average')\navg_result_df.head()","c48b5f77":"#  bar plot of averages of features by species\nplt.figure(figsize=(10,8))\nax=sns.barplot(x=\"feature\", y=\"average\",hue=\"Species\", data=avg_result_df,palette = \"magma\", ci=None)\n\n#value of each bar\nfor i in ax.patches:\n    # get_x pulls left or right; get_height pushes up or down\n    ax.text(i.get_x()+.06, i.get_height()-.2, '{:.2f}'.format(i.get_height()), fontsize=9,\n                color='white',weight='bold')\n\nplt.xlabel(\"Feature Names\",fontsize = 15,weight='bold')\nplt.ylabel(\"Average (cm)\",fontsize = 15,weight='bold')\n\nplt.title(\"Averages of Features by Species\",fontsize = 20,weight='bold')\nplt.show()","eb31b26a":"# Also can be => kind : { \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d }  \ng = sns.jointplot(x='SepalLengthCm',y='SepalWidthCm',data=iris_df, kind='kde', color='orchid')\ng.fig.set_figwidth(8)\ng.fig.set_figheight(8)\ng.annotate(stats.pearsonr)\ng.set_axis_labels('SepalLengthCm','SepalWidthCm', fontsize=15,weight='bold')\nplt.show()","fb4427bb":"g=sns.lmplot(x='SepalLengthCm',y='SepalWidthCm',data=iris_df,col='Species', hue = 'Species', palette=\"spring\")\ng.fig.set_figwidth(15)\ng.fig.set_figheight(5)\n\naxes = g.axes.flatten()\naxes[0].set_ylabel(\"sepal width (cm)\", fontsize=15,weight='bold')\nfor i,ax in enumerate(axes):\n    ax.set_title(iris_df['Species'].unique()[i],fontsize = 20,weight='bold')\n    ax.set_xlabel(\"sepal length (cm)\", fontsize=15,weight='bold')\n\nplt.show()","ac5ba720":"plt.figure(figsize = (15,10))\nfor i,value in enumerate(iris_df.columns[:-1]):\n    plt.subplot(2,2,i+1)\n    sns.violinplot(x='Species', y=value,data=iris_df, inner=\"points\",palette=\"plasma\")\n    plt.xlabel('Species',fontsize = 15,weight='bold')\n    plt.ylabel(value,fontsize = 15,weight='bold')\n\nplt.show()","9d2efe56":"data = pd.melt(iris_df,id_vars=\"Species\",var_name=\"feature\",value_name='value')\n\nplt.figure(figsize = (15,10))\nsns.swarmplot(x=\"feature\", y=\"value\", hue=\"Species\", data=data,palette=\"inferno\")  \nplt.xlabel(\"Features\",fontsize = 15,weight='bold')\nplt.ylabel(\"Value (cm)\",fontsize = 15,weight='bold')\nplt.show()","c51d324a":"sns.pairplot(iris_df, hue='Species',palette=\"husl\",diag_kws=dict(shade=True))\nplt.show()","12b54793":"#   ** 6. Swarm Plot**\nSwarm Plot draws a categorical scatterplot with non-overlapping points.","2b132a01":"*I have created this kernel to share the codes I wrote during my learning of data visualization. I'm still in the research and discovery phase, so this kernel will continue to be updated. If you find my work useful, please vote by clicking at the top of the page. Thanks for viewing.*","218c8676":"# ** 2. Bar Plot**","f32af6a4":"# ** 1. Pie Chart**","21a9a3b6":"# ** 7. Pair Plot **\nPair plot provides both distribution of single variables and relationships between two variables.\n","b73b6a68":"# ** 4. Lm Plot**\nLM Plot can be used to visualize the linear relationship between two features through regression. ","b2e2feb2":"**Observations:** There are no missing values in the dataset and also all features of instances are float. There exists 50 instances within each species.","beacb086":"# Information about the Iris Data Set\n\nIris Data set was collected by statistician Douglas Fisher in the 1930s. The data set consists of 3 types of iris plants, 50 objects of each type, and 4 features of them. \n\n**Three flower types (classes):**\n Setosa, Virginica, Versicolour\n \n**Four (non-class) attributes:**\n Sepal width and length, Petal width and length","0cf66e77":"# Importing libraries and loading the file\n\nImport the required packages and load the data set.","84a24dbc":"#  ** 5. Violin Plot**\nViolin plot allows to visualize the distribution of a numeric variable and its probability density for one or several groups.","a8025306":"# Reference\n* https:\/\/seaborn.pydata.org\/\n* https:\/\/medium.com\/@slvojha7\/exploratory-data-analysis-on-iris-dataset-84832e519040\n* https:\/\/www.kaggle.com\/biphili\/seaborn-matplotlib-plot-to-visualize-iris-data ","c3bc77d2":"# ** 3. Joint Plot**\nJoint Plot can be used to visualize and analyze the relationship between two variables and describe their individual distributions on the same plot. Also, by using spearmanr function, we can print the correlation between two variables.\n\nKernel Density Estimate (KDE) is the way to estimate the Probability Density Function (PDF). The area under the KDE curve is 1.\n"}}