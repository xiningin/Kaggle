{"cell_type":{"fd4bc48c":"code","6e4dd85c":"code","ce7512b1":"code","f7731e0e":"code","c351c2c0":"code","7dcd1640":"code","88d56e0f":"code","86c8a010":"code","d01cfe01":"code","64a93bf4":"code","516468a2":"code","16780f6b":"code","cfd58724":"code","8fd11b4f":"code","7a139177":"code","5c4a5a9a":"code","28a2b3f2":"code","6d3f9e4e":"code","68c02ac4":"code","bb757116":"markdown","183e3e88":"markdown"},"source":{"fd4bc48c":"import os\nimport warnings\nimport numpy as np\nimport pandas as pd\nimport statsmodels.formula.api as sm\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom mlxtend.feature_selection import SequentialFeatureSelector\nfrom sklearn.metrics import confusion_matrix,accuracy_score,r2_score,precision_score,recall_score,f1_score\nprint(os.listdir(\"..\/input\/\"))\nwarnings.filterwarnings(\"ignore\")","6e4dd85c":"madelon_test = '..\/input\/madelon_test.data'\nmadelon_train = '..\/input\/madelon_train.data'\nmadelon_train_labels = '..\/input\/madelon_train.labels'\nmadelon_valid = '..\/input\/madelon_valid.data'\nmadelon_valid_labels = '..\/input\/madelon_valid.labels'","ce7512b1":"train = pd.read_csv(madelon_train,delimiter=' ',header=None)\nprint('There are', train.shape[0], 'rows and', train.shape[1], 'columns in the dataset.')","f7731e0e":"train_labels = pd.read_csv(madelon_train_labels, delimiter=' ', header=None, names=['target'])\nprint('There are', train_labels.shape[0], 'rows and', train_labels.shape[1], 'column in the dataset.')","c351c2c0":"valid = pd.read_csv(madelon_valid,delimiter=' ',header=None)\nprint('There are', valid.shape[0], 'rows and', valid.shape[1], 'columns in the dataset.')","7dcd1640":"valid_labels = pd.read_csv(madelon_valid_labels,delimiter=' ',header=None)\nprint('There are', valid_labels.shape[0], 'rows and', valid_labels.shape[1], 'columns in the dataset.')","88d56e0f":"test = pd.read_csv(madelon_test,delimiter=' ',header=None)\nprint('There are', test.shape[0], 'rows and', test.shape[1], 'columns in the dataset.')","86c8a010":"train = train.iloc[:,:-1]\nvalid = valid.iloc[:,:-1]\ntest = test.iloc[:,:-1]","d01cfe01":"knn = LogisticRegression()\nforward = SequentialFeatureSelector(knn,\n                                    k_features = 5,\n                                    forward = True,\n                                    floating = False,\n                                    scoring = 'accuracy',\n                                    verbose = 2,\n                                    n_jobs=4,\n                                    cv = 0)","64a93bf4":"forward.fit(train.values,train_labels)\nforward_cols = list(forward.k_feature_idx_)\nknn.fit(train.loc[:,forward_cols],train_labels)","516468a2":"print(forward_cols)","16780f6b":"pred_train_forward= knn.predict(train.loc[:,forward_cols])\nprint('Training accuracy on selected features: %.3f' % accuracy_score(train_labels, pred_train_forward ))\nprint('Training precision on selected features: %.3f' % precision_score(train_labels,pred_train_forward ,average='micro'))\nprint('Training recall on selected features: %.3f' % recall_score(train_labels,pred_train_forward ,average='micro'))\nprint('Training f1_score on selected features: %.3f' % f1_score(train_labels,pred_train_forward ,average='micro'))","cfd58724":"pred_valid_forward= knn.predict(valid.loc[:,forward_cols])\nprint('Validation accuracy on selected features: %.3f' % accuracy_score(valid_labels, pred_valid_forward))\nprint('Validation precision on selected features: %.3f' % precision_score(valid_labels,pred_valid_forward,average='micro'))\nprint('Validation recall on selected features: %.3f' % recall_score(valid_labels,pred_valid_forward,average='micro'))\nprint('Validation f1_score on selected features: %.3f' % f1_score(valid_labels,pred_valid_forward,average='micro'))","8fd11b4f":"import statsmodels.formula.api as sm\nX = np.append(arr = np.ones((len(train.values),1)).astype(int), values = train, axis = 1)\nX_opt = X[:, :]\nregressor_OLS = sm.OLS(endog=train_labels, exog=X_opt).fit()\n#regressor_OLS.summary()","7a139177":"condition = lambda x: int(x.split('x')[1])\narr = regressor_OLS.pvalues\nwhile len(arr) > 5:\n    cols = list(arr.index)\n    cols_arr = np.array(list(map(condition,cols[1:])))\n    X_opt = X[:,cols_arr]\n    regressor_OLS = sm.OLS(endog=train_labels, exog=X_opt).fit()\n    arr = arr.drop(labels=arr.idxmax())               ","5c4a5a9a":"cols_app = list(map(lambda x : x -1,list(map(condition,arr.index))))\nknn.fit(train.loc[:,cols_app],train_labels)","28a2b3f2":"cols_app","6d3f9e4e":"pred_train_backward= knn.predict(train.loc[:,cols_app])\nprint('Training accuracy on selected features: %.3f' % accuracy_score(train_labels, pred_train_backward ))\nprint('Training precision on selected features: %.3f' % precision_score(train_labels,pred_train_backward ,average='micro'))\nprint('Training recall on selected features: %.3f' % recall_score(train_labels,pred_train_backward ,average='micro'))\nprint('Training f1_score on selected features: %.3f' % f1_score(train_labels,pred_train_backward ,average='micro'))","68c02ac4":"pred_valid_backward= knn.predict(valid.loc[:,cols_app])\nprint('Validation accuracy on selected features: %.3f' % accuracy_score(valid_labels, pred_valid_backward ))\nprint('Validation precision on selected features: %.3f' % precision_score(valid_labels,pred_valid_backward ,average='micro'))\nprint('Validation recall on selected features: %.3f' % recall_score(valid_labels,pred_valid_backward ,average='micro'))\nprint('Validation f1_score on selected features: %.3f' % f1_score(valid_labels,pred_valid_backward ,average='micro'))","bb757116":"Apply Backward Feature Selection and Forward Feature Selection \nto the dataset that is given in the following link:\nhttp:\/\/archive.ics.uci.edu\/ml\/datasets\/madelon","183e3e88":"https:\/\/www.thedynamatrix.com\/machine-learning\/backward-elemination"}}