{"cell_type":{"8ea917d4":"code","c730ac3a":"code","ed3d0529":"code","1cbec3f7":"code","cd3f073f":"code","2f2c799a":"code","75adfb0d":"code","d6b41735":"code","c9b94c89":"code","80a04fae":"code","2ce390cb":"code","f5a77a49":"code","a759e353":"code","009d4eef":"markdown","d22f7996":"markdown","4a95d885":"markdown","53b0dfb7":"markdown","df4d33a7":"markdown","c5a40858":"markdown","1304d553":"markdown","35632a9b":"markdown","9ebdc48f":"markdown","1f22dc05":"markdown","b250c581":"markdown"},"source":{"8ea917d4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.offline as pyo\npyo.init_notebook_mode()\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c730ac3a":"data = pd.read_csv('\/kaggle\/input\/pakistans-largest-ecommerce-dataset\/Pakistan Largest Ecommerce Dataset.csv')\n\ndata","ed3d0529":"print(data.shape) # shape of data\nprint(data.columns) # list of columns","1cbec3f7":"data_sub = data[['payment_method', 'status', 'grand_total', 'Year', 'Month']]\ndata_sub","cd3f073f":"# there are some rows in which all columns are null need to drop all those rows\ndata_sub.dropna(how='all', inplace=True)\n\n#null_status_rows = pd.isnull(data_sub.status)\ndata_sub.sort_index(ascending=False)\nprint(data_sub.shape)","2f2c799a":"data_sub.status.fillna(data_sub.status.mode()[0], inplace=True)\nprint(data_sub.isnull().sum())","75adfb0d":"data_sub['payment_method'].replace({'cashatdoorstep': 'cod', 'Easypay_MA': 'Easypay'}, inplace=True)","d6b41735":"type_of_payment_methods = data_sub.payment_method.unique()\nprint(type_of_payment_methods)\nprint(f'Total number of Payment Method {len(type_of_payment_methods)}')\nlist_of_statues = data_sub.status.unique()\nprint(list_of_statues)","c9b94c89":"number_of_orders_by_payments_methods = data_sub.groupby('payment_method').size().reset_index(name='Number of orders').sort_values('Number of orders', ascending=False)\nprint(number_of_orders_by_payments_methods)\nbar = px.bar(number_of_orders_by_payments_methods, y='Number of orders', x='payment_method',\n             title='Number of orders by Payment method',\n             hover_data=['payment_method'], labels={'payment_method':'Payment Method'})\nbar.show()","80a04fae":"completed_orders = data_sub[(data_sub['status'] == 'complete') | (data_sub['status'] == 'paid') | (data_sub['status'] == 'received')]\ncompleted_orders_by_payment_methods = completed_orders.groupby('payment_method').size().reset_index(name='Number of orders').sort_values('Number of orders', ascending=False)\n\nfig = px.bar(completed_orders_by_payment_methods, y='Number of orders', x='payment_method',\n             title='Number of completed orders by Paymend Methods',\n             hover_data=['payment_method'], labels={'payment_method':'Payment method'})\nfig.show()","2ce390cb":"not_completed_orders = data_sub[(data_sub['status'] != 'complete') & (data_sub['status'] != 'paid') & (data_sub['status'] != 'received')]\nnot_completed_orders_by_payment_methods = not_completed_orders.groupby('payment_method').size().reset_index(name='Number of orders').sort_values('Number of orders', ascending=False)\n\nfig = px.bar(not_completed_orders_by_payment_methods, y='Number of orders', x='payment_method',\n             title='Number of not completed orders by Paymend Methods',\n             hover_data=['payment_method'], labels={'payment_method':'Payment method'})\nfig.update_traces(marker_color='red')\nfig.show()","f5a77a49":"fig = go.Figure(data=[\n    go.Bar(name='Completed', x=completed_orders_by_payment_methods['payment_method'], y=completed_orders_by_payment_methods['Number of orders']),\n    go.Bar(name='Not Completed', x=not_completed_orders_by_payment_methods['payment_method'], y=not_completed_orders_by_payment_methods['Number of orders'])\n])\nfig.update_layout(barmode='group')\nfig.show()","a759e353":"completed_orders_by_payment_methods_year = completed_orders.groupby(['payment_method', 'Year']).size().reset_index(name='Number of orders').sort_values(['Number of orders', 'Year'], ascending=False)\nbar = px.bar(completed_orders_by_payment_methods_year, y='Number of orders', x='payment_method',\n             title='Number of completed orders by Category Per Year', color='Year',\n             hover_data=['payment_method'], labels={'payment_method':'Payment Method'})\nbar.show()","009d4eef":"# Best Payment Method W.r.t completion of orders\n\n> Considering order statuses 'complete', 'paid', 'received' as completed","d22f7996":"# Worst Payment Method W.r.t completion of orders","4a95d885":"# Please Upvote if you find the notebook interesting\n> Work in progress","53b0dfb7":"# Compare the completed and not completed orders by Payment Methods","df4d33a7":"# Types of Payment Methods And List of statuses","c5a40858":"# Updating some payment type methods \n> Replacing *cashatdoorstep* with *cod* and *Easypay_MA* with *Easypay*","1304d553":"# Status null treatment\n> After removing all rows having nan in all column, only 15 are rows in which status is nullwe use mode to all 15 nulls. Mode value is completed.","35632a9b":"# Number of orders by Payment Methods","9ebdc48f":"# Treatment of Null or NaN","1f22dc05":"# Payment methods by number of completed order Per Year","b250c581":"# Subset of data needed for Payment Methods versus Order Status analysis"}}