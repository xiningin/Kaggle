{"cell_type":{"8440cc89":"code","626cb656":"code","1f7a1d7c":"code","4fe38cdd":"code","fd688ec8":"code","23f6af1b":"code","9b8455e7":"code","05b47661":"code","a9467bbc":"code","f96315d8":"code","98d4d70c":"code","bf2b23c9":"code","cd06f355":"code","5665f52c":"code","bb70d580":"code","f0f1c119":"code","bc57a5eb":"code","89fe9cdd":"code","d5763d4f":"code","c700149a":"markdown","ebf02888":"markdown","85eb072d":"markdown","56c2ea4a":"markdown","f687d936":"markdown","6ed4ea4f":"markdown","e140d4f3":"markdown","69d7c383":"markdown","ca134fa1":"markdown","f2dfdccb":"markdown","fcc03707":"markdown","bb71f456":"markdown","a234a239":"markdown","663f88b5":"markdown","3b1550fe":"markdown","94f790c5":"markdown","495cedfe":"markdown","240228c1":"markdown","481ff8f9":"markdown","c1160e94":"markdown","335d3dab":"markdown","61da6077":"markdown","365f43f9":"markdown","52e64f93":"markdown","aea40c75":"markdown","f666ec37":"markdown","e60a2497":"markdown","78b1f5e8":"markdown","b2a82189":"markdown"},"source":{"8440cc89":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.preprocessing.sequence import TimeseriesGenerator\nfrom pandas.tseries.offsets import DateOffset\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom keras.layers import Dropout\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","626cb656":"data = pd.read_csv(\"..\/input\/air-passengers\/AirPassengers.csv\")\ndata.head()","1f7a1d7c":"data[\"Month\"] = pd.to_datetime(data[\"Month\"])\ndata.head()","4fe38cdd":"data.set_index(\"Month\", inplace=True)\ndata.columns = [\"passengers\"]\ndata.index.name = \"date\"\ndata.head()","fd688ec8":"data.info()\nprint(f\"Dataset shape: {data.shape}\")","23f6af1b":"train_data = data[:len(data)-12]\ntest_data = data[len(data)-12:]","9b8455e7":"scaler = MinMaxScaler()\nscaler.fit(train_data)\ntrain = scaler.transform(train_data)\ntest = scaler.transform(test_data)","05b47661":"n_input = 12\nn_features = 1\ngenerator = TimeseriesGenerator(train, train, length=n_input, batch_size=6)","a9467bbc":"model = Sequential()\nmodel.add(LSTM(200, activation='relu', input_shape=(n_input, n_features)))\nmodel.add(Dropout(0.15))\nmodel.add(Dense(1))\nmodel.compile(optimizer='adam', loss='mse')\nmodel.fit_generator(generator,epochs=90, verbose= 0)\nmodel.summary()","f96315d8":"pred_list = []\nbatch = train[-n_input:].reshape((1, n_input, n_features))\nfor i in range(n_input):   \n    pred_list.append(model.predict(batch)[0]) \n    batch = np.append(batch[:,1:,:],[[pred_list[i]]],axis=1)","98d4d70c":"df_predict = pd.DataFrame(scaler.inverse_transform(pred_list),index=data[-n_input:].index, columns=['Prediction'])\ndf_test = pd.concat([data,df_predict], axis=1)","bf2b23c9":"df_test.tail(13)","cd06f355":"plt.figure(figsize=(20, 5))\nplt.plot(df_test.index, df_test['passengers'])\nplt.plot(df_test.index, df_test['Prediction'], color='r')\nplt.legend(loc='best', fontsize='xx-large')\nplt.xticks(fontsize=18, color= \"white\")\nplt.yticks(fontsize=16, color= \"white\")\nplt.show()","5665f52c":"train = data\nscaler.fit(train)\ntrain = scaler.transform(train)\nn_input = 12\nn_features = 1\ngenerator = TimeseriesGenerator(train, train, length=n_input, batch_size=6)\nmodel.fit_generator(generator,epochs=90, verbose= 0);","bb70d580":"pred_list = []  \nbatch = train[-n_input:].reshape((1, n_input, n_features))\nfor i in range(n_input):\n    pred_list.append(model.predict(batch)[0])      \n    batch = np.append(batch[:,1:,:],[[pred_list[i]]],axis=1)","f0f1c119":"add_dates = [data.index[-1] + DateOffset(months=x) for x in range(0,13) ]\nfuture_dates = pd.DataFrame(index=add_dates[1:],columns=data.columns)\nfuture_dates.head(12)","bc57a5eb":"df_predict = pd.DataFrame(scaler.inverse_transform(pred_list),\n                          index=future_dates[-n_input:].index, columns=['Prediction'])\n\ndf_proj = pd.concat([data,df_predict], axis=1)","89fe9cdd":"plt.figure(figsize=(20, 5))\nplt.plot(df_proj.index, df_proj['passengers'])\nplt.plot(df_proj.index, df_proj['Prediction'], color='r')\nplt.legend(loc='best', fontsize='xx-large')\nplt.xticks(fontsize=18, color = \"white\")\nplt.yticks(fontsize=16, color = \"white\")\nplt.show()","d5763d4f":"losses_lstm = model.history.history['loss']\nplt.figure(figsize=(12,4))\nplt.xlabel(\"Epochs\", color = \"white\")\nplt.ylabel(\"Loss\", color = \"white\")\nplt.xticks(  color = \"white\")\nplt.yticks(  color = \"white\")\nplt.plot(range(len(losses_lstm)),losses_lstm);","c700149a":"- My first LSTM study.\n- I was inspired by the articles I linked above.\n- This kernel was written for the first time to help people who will start working with LSTM.\n- Please share your contributions and criticisms in the comments.\n\nGood work to everyone. Best regards.\n\n**Note:** Sorry for my English.","ebf02888":"We turn our predictions into a data frame and combine it with our original data set.","85eb072d":"## Future Forecast","56c2ea4a":"It is the first time that I am doing a project on future repairs and I have examined many resources. I leave three links for your review below.\n\n- [How to Use the TimeseriesGenerator for Time Series Forecasting in Keras](https:\/\/machinelearningmastery.com\/how-to-use-the-timeseriesgenerator-for-time-series-forecasting-in-keras\/)\n- [A Quick Example of Time-Series Prediction Using Long Short-Term Memory (LSTM) Networks](https:\/\/medium.com\/swlh\/a-quick-example-of-time-series-forecasting-using-long-short-term-memory-lstm-networks-ddc10dc1467d)\n- [Time Series Forecasting \u2014 ARIMA, LSTM, Prophet with Python](https:\/\/medium.com\/@cdabakoglu\/time-series-forecasting-arima-lstm-prophet-with-python-e73a750a9887)","f687d936":"# Conclusion","6ed4ea4f":"We add the next twelve months to the data set.","e140d4f3":"We reserve the last twelve months in the data for testing. We will train our model with the rest of the data.","69d7c383":"Our model consists of a 200-node LSTM layer, a 0.15 Dropout layer and a one-node Dense layer as the output layer. We use Adam as the optimizer and mean squares error as the loss method.","ca134fa1":"Now, let's do the same things to predict the future. We will complete twelve months after the deadline in the data set.","f2dfdccb":"We convert the `Month` variable to date type.","fcc03707":"Lost chart of our latest model.","bb71f456":"## Train And Test Split","a234a239":"# Future Forecast With LSTM","663f88b5":"## Data Scaling","3b1550fe":"Let's visualize the results and observe the difference between the values \u200b\u200bpredicted by our model and the real values.","94f790c5":"## Before Begin","495cedfe":"## Data Loading And Preprocessing","240228c1":"We turn the data into a time series to train the LSTM model.","481ff8f9":"## Libraries","c1160e94":"## Resources","335d3dab":"We assign the month variable as index. We edit variable and index names.","61da6077":"Here we predict twelve from the last twelve months of the training set.","365f43f9":"We scale the data between 0 and 1 for our LSTM model. We need to scale the data for all deep learning models.","52e64f93":"We have only prediction for the past twelve months. Let's view the last thirteen observations of the new data set.","aea40c75":"Now we can look at the summary of the data set.","f666ec37":"## Create Model","e60a2497":"I took a job to predict the client's future effectiveness in real life. In my research, I came to the point that the best way to do this is LSTM. I wanted to make a beginner kernal patch about this. I hope my help will help other people. Let's start.","78b1f5e8":"After training our model, we prediction our test set and store it in an empty array.","b2a82189":"Let's load the data and observe the first five lines."}}