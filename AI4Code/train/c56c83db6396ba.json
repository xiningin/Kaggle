{"cell_type":{"4d2fcc23":"code","23cb7940":"code","c2789e20":"code","8f27a08b":"code","e6982757":"code","95bc0c13":"code","aed71578":"code","3ccc85c3":"code","32c6ca67":"code","f6002a1f":"code","06fd1c1d":"code","87d3ecf0":"code","1938aa5b":"code","fad553a1":"code","d54088dc":"code","570564ec":"code","17edef81":"code","c964abc7":"code","47e8ded9":"code","83c7e563":"code","2c2e29d9":"code","92d325bf":"code","2c13b89a":"code","97b9c951":"code","80da321c":"code","c3018ebc":"code","9ab0786e":"code","012ec8f2":"code","26c28574":"code","bfd214c2":"code","bdc1ec0e":"code","901212e6":"code","8e7b08c4":"code","dbb4e484":"code","ca20a842":"code","5aeb1352":"code","ae1bffe3":"code","3a11334c":"code","6deda83e":"code","4a6179b6":"code","9a8fee6f":"code","a25d1547":"code","3c8ebb1f":"markdown","73b4a372":"markdown","8d8aefae":"markdown"},"source":{"4d2fcc23":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","23cb7940":"!git clone https:\/\/github.com\/fizyr\/keras-retinanet.git","c2789e20":"%cd keras-retinanet\/\n!pip install .","8f27a08b":"!python setup.py build_ext --inplace","e6982757":"import numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nimport pandas as pd\nimport seaborn as sns\nfrom pylab import rcParams\nimport matplotlib.pyplot as plt\nfrom matplotlib import rc\nfrom pandas.plotting import register_matplotlib_converters\nfrom sklearn.model_selection import train_test_split\nimport urllib\nimport os\nimport csv\nimport cv2\nimport time\nfrom PIL import Image\n\nfrom keras_retinanet import models\nfrom keras_retinanet.utils.image import read_image_bgr, preprocess_image, resize_image\nfrom keras_retinanet.utils.visualization import draw_box, draw_caption\nfrom keras_retinanet.utils.colors import label_color\n\n%matplotlib inline\n%config InlineBackend.figure_format='retina'\n\nregister_matplotlib_converters()\nsns.set(style='whitegrid', palette='muted', font_scale=1.5)\n\nrcParams['figure.figsize'] = 22, 10\n\nRANDOM_SEED = 42\n\nnp.random.seed(RANDOM_SEED)\ntf.random.set_seed(RANDOM_SEED)","95bc0c13":"%cd ..\ndataset=pd.read_csv(\"..\/input\/face-mask-detection-dataset\/train.csv\", header=None)\ndataset = dataset.iloc[1:]\ndataset[0] = '..\/input\/face-mask-detection-dataset\/Medical mask\/Medical mask\/Medical Mask\/images\/' + dataset[0].astype(str)\ndataset.head()","aed71578":"train_df, test_df = train_test_split(\n  dataset, \n  test_size=0.15, \n  shuffle=False\n)","3ccc85c3":"train_df.iloc[8131:8132,:]\ntrain_df=train_df.drop([8132], axis=0)","32c6ca67":"train_df.to_csv(r'train_annot.csv', index = False, header=None)","f6002a1f":"test_df.to_csv(r'test_annot.csv', index = False, header=None)","06fd1c1d":"clas=pd.read_csv(\"..\/input\/class-obj-det\/clas.csv\", header=None)\nclas.head()","87d3ecf0":"clas.to_csv(r'clas.csv', index = False, header=None)","1938aa5b":"def show_image_objects(image_row):\n\n    img_path = image_row[\"name\"]\n    box = [\n    image_row[\"x1\"], image_row[\"x2\"], image_row[\"y1\"], image_row[\"y2\"]\n    ]\n    img_dir='..\/input\/face-mask-detection-dataset\/Medical mask\/Medical mask\/Medical Mask\/images'\n    x=os.path.join(img_dir, img_path)\n    image = read_image_bgr(x)\n\n    draw = image.copy()\n    draw = cv2.cvtColor(draw, cv2.COLOR_BGR2RGB)\n\n    draw_box(draw, box, color=(255, 255, 0))\n\n    plt.axis('off')\n    plt.imshow(draw)\n    plt.show()","fad553a1":"df=pd.read_csv(\"..\/input\/face-mask-detection-dataset\/train.csv\")\ndf.head()","d54088dc":"show_image_objects(df.iloc[0])","570564ec":"PRETRAINED_MODEL = 'pretrained_model.h5'\n\nURL_MODEL = 'https:\/\/github.com\/fizyr\/keras-retinanet\/releases\/download\/0.5.1\/resnet50_coco_best_v2.1.0.h5'\nurllib.request.urlretrieve(URL_MODEL, PRETRAINED_MODEL)\n\nprint('Downloaded pretrained model to ' + PRETRAINED_MODEL)","17edef81":"ANNOTATIONS_FILE = 'train_annot.csv'\nCLASSES_FILE = 'clas.csv'","c964abc7":"!keras-retinanet\/keras_retinanet\/bin\/train.py --freeze-backbone --random-transform --weights {PRETRAINED_MODEL} --batch-size 8 --steps 500 --epochs 10 csv train_annot.csv clas.csv","47e8ded9":"!ls snapshots","83c7e563":"import pickle\nfilename = 'model_raw.sav'\npickle.dump(model, open(filename, 'wb'))","2c2e29d9":"model_path = os.path.join('snapshots', sorted(os.listdir('snapshots'), reverse=True)[0])\nprint(model_path)\n\nmodel = models.load_model(model_path, backbone_name='resnet50')\nmodel = models.convert_model(model)\n\nlabels_to_names = pd.read_csv(CLASSES_FILE, header=None).T.loc[0].to_dict()","92d325bf":"def predict(image):\n  image = preprocess_image(image.copy())\n  image, scale = resize_image(image)\n\n  boxes, scores, labels = model.predict_on_batch(\n    np.expand_dims(image, axis=0)\n  )\n\n  boxes \/= scale\n\n  return boxes, scores, labels","2c13b89a":"THRES_SCORE = 0.5\n\ndef draw_detections(image, boxes, scores, labels):\n  for box, score, label in zip(boxes[0], scores[0], labels[0]):\n    if score < THRES_SCORE:\n        break\n\n    color = label_color(label)\n\n    b = box.astype(int)\n    draw_box(image, b, color=color)\n\n    caption = \"{} {:.3f}\".format(labels_to_names[label], score)\n    draw_caption(image, b, caption)\n    print(box,score,caption)","97b9c951":"def show_detected_objects(image_row):\n  img_path = image_row[\"name\"]\n\n  image = read_image_bgr(img_path)\n\n  boxes, scores, labels = predict(image)\n\n  draw = image.copy()\n  draw = cv2.cvtColor(draw, cv2.COLOR_BGR2RGB)\n\n  true_box = [\n    image_row[\"x1\"], image_row[\"x2\"], image_row[\"y1\"], image_row[\"y2\"]\n  ]\n  draw_box(draw, true_box, color=(255, 255, 0))\n\n  draw_detections(draw, boxes, scores, labels)\n\n  plt.axis('off')\n  plt.imshow(draw)\n  plt.show()","80da321c":"test_df.columns = ['name', 'x1', 'x2', 'y1','y2','classname']","c3018ebc":"show_detected_objects(test_df.iloc[10])","9ab0786e":"show_detected_objects(test_df.iloc[20])","012ec8f2":"show_detected_objects(test_df.iloc[30])","26c28574":"show_detected_objects(test_df.iloc[40])","bfd214c2":"model.save_weights(\"model.h5\")","bdc1ec0e":"submit=pd.read_csv(\"..\/input\/face-mask-detection-dataset\/submission.csv\")\nsubmit = submit.drop_duplicates()\nsubmit.head()","901212e6":"def show_detected_objects_new(image_row):\n  img_path = image_row[\"name\"]\n  img_dir='..\/input\/face-mask-detection-dataset\/Medical mask\/Medical mask\/Medical Mask\/images'\n  img_path=os.path.join(img_dir, img_path)\n\n  image = read_image_bgr(img_path)\n\n  boxes, scores, labels = predict(image)\n\n  draw = image.copy()\n  draw = cv2.cvtColor(draw, cv2.COLOR_BGR2RGB)\n\n  draw_detections(draw, boxes, scores, labels)\n  \n  plt.axis('off')\n  plt.imshow(draw)\n  plt.show()","8e7b08c4":"show_detected_objects_new(submit.iloc[5])","dbb4e484":"show_detected_objects_new(submit.iloc[6])","ca20a842":"show_detected_objects_new(submit.iloc[9])","5aeb1352":"show_detected_objects_new(submit.iloc[12])","ae1bffe3":"def predict(image):\n  image = preprocess_image(image.copy())\n  image, scale = resize_image(image)\n\n  boxes, scores, labels = model.predict_on_batch(\n    np.expand_dims(image, axis=0)\n  )\n\n  boxes \/= scale\n\n  return boxes, scores, labels","3a11334c":"THRES_SCORE = 0.5\n\ndef draw_detections(image, boxes, scores, labels):\n  dimension=[]\n  classify=[]\n\n  for box, score, label in zip(boxes[0], scores[0], labels[0]):\n\n    if score < THRES_SCORE:\n        break\n\n    color = label_color(label)\n\n    b = box.astype(int)\n    draw_box(image, b, color=color)\n\n    caption = \"{} {:.3f}\".format(labels_to_names[label], score)\n    draw_caption(image, b, caption)\n   \n    classify.append(labels_to_names[label])\n    dimension.append(box)\n    \n  return dimension,classify","6deda83e":"def show_detected_objects_fin(image_row):\n  img_path = image_row[\"name\"]\n  img_dir='..\/input\/face-mask-detection-dataset\/Medical mask\/Medical mask\/Medical Mask\/images'\n  img_path=os.path.join(img_dir, img_path)\n\n  image = read_image_bgr(img_path)\n\n  boxes, scores, labels = predict(image)\n\n  draw = image.copy()\n  draw = cv2.cvtColor(draw, cv2.COLOR_BGR2RGB)\n\n  draw_detections(draw, boxes, scores, labels)\n  \n  #plt.axis('off')\n  #plt.imshow(draw)\n  #plt.show()  \n\n  dimension, classify = draw_detections(draw, boxes, scores, labels)\n\n  dfObj = pd.DataFrame(dimension,columns = ['x1' , 'x2', 'y1', 'y2'])\n  dfObj['label'] = classify\n  dfObj['name'] = image_row[\"name\"]\n  dfObj = dfObj[['name','x1' , 'x2', 'y1', 'y2','label']]\n  return dfObj\n ","4a6179b6":"final=pd.DataFrame(columns=['name','x1' , 'x2', 'y1', 'y2','label'])","9a8fee6f":"for i in range(0,len(submit)):\n    b=show_detected_objects_fin(submit.iloc[i])\n    final=final.append(b,ignore_index = True)\nfinal.head()","a25d1547":"final.to_csv(r'submit_8.csv')","3c8ebb1f":"### need to train with better hyperparameters, I am limited my GPU quota. would try with 18 step size again","73b4a372":"### Testing on completely new samples","8d8aefae":"### Working on test set :"}}