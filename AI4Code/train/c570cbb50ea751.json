{"cell_type":{"380de05b":"code","4506fa8c":"code","6475bbdb":"code","b1200ee0":"code","57dfae5b":"code","94f6c06f":"code","feeb55a4":"code","e6f7d45a":"code","283e0925":"code","d71fd131":"code","be96bfd8":"code","0e8c7f5c":"code","803efe55":"code","d3e9070a":"code","a95e7118":"code","3eb49b22":"code","9848c2aa":"markdown","76440057":"markdown","2ad46838":"markdown","75e5a5db":"markdown","e61312f0":"markdown","8ed58dba":"markdown","ead21587":"markdown","a8e47e6e":"markdown","9b1e068f":"markdown","e39c83c8":"markdown","ed150da8":"markdown","8e1babbf":"markdown","c2f9f3e5":"markdown","953a6125":"markdown"},"source":{"380de05b":"# Pandas is used for data manipulation\nimport pandas as pd\n\n# Use numpy to convert to arrays\nimport numpy as np\n\n# Import tools needed for visualization\nfrom sklearn.tree import export_graphviz\nimport pydot\nimport matplotlib.pyplot as plt\n%matplotlib inline","4506fa8c":"# Reading the data to a dataframe \ndf = pd.read_csv('..\/input\/tempscsv\/temps.csv')","6475bbdb":"# displaying first 5 rows\ndf.head(5)","b1200ee0":"# the shape of our features\ndf.shape","57dfae5b":"# column names\ndf.columns","94f6c06f":"# checking for null values\ndf.isnull().sum()","feeb55a4":"# One-hot encode categorical features\ndf = pd.get_dummies(df)\ndf.head(5)","e6f7d45a":"print('Shape of features after one-hot encoding:', df.shape)","283e0925":"# Labels are the values we want to predict\nlabels = df['actual']\n\n# Remove the labels from the features\ndf = df.drop('actual', axis = 1)\n\n# Saving feature names for later use\nfeature_list = list(df.columns)","d71fd131":"# Using Skicit-learn to split data into training and testing sets\nfrom sklearn.model_selection import train_test_split\n\n# Split the data into training and testing sets\ntrain_features, test_features, train_labels, test_labels = train_test_split(df,\n                                                                            labels,\n                                                                            test_size = 0.20,\n                                                                            random_state = 42)","be96bfd8":"print('Training Features Shape:', train_features.shape)\nprint('Training Labels Shape:', train_labels.shape)\nprint('Testing Features Shape:', test_features.shape)\nprint('Testing Labels Shape:', test_labels.shape)","0e8c7f5c":"# Import the model we are using\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Instantiate model \nrf = RandomForestRegressor(n_estimators= 1000, random_state=42)\n\n# Train the model on training data\nrf.fit(train_features, train_labels);","803efe55":"# Use the forest's predict method on the test data\npredictions = rf.predict(test_features)\n\n# Calculate the absolute errors\nerrors = abs(predictions - test_labels)\n\n# Print out the mean absolute error (mae)\nprint('Mean Absolute Error:', round(np.mean(errors), 2), 'degrees.')\n","d3e9070a":"# Calculate mean absolute percentage error (MAPE)\nmape = 100 * (errors \/ test_labels)\n\n# Calculate and display accuracy\naccuracy = 100 - np.mean(mape)\nprint('Accuracy:', round(accuracy, 2), '%.')","a95e7118":"# Pull out one tree from the forest\ntree = rf.estimators_[5]\n\n# Export the image to a dot file\nexport_graphviz(tree, out_file = 'tree.dot', feature_names = feature_list, rounded = True, precision = 1)\n\n# Use dot file to create a graph\n(graph, ) = pydot.graph_from_dot_file('tree.dot')\n\n# Write graph to a png file\ngraph.write_png('tree.png'); ","3eb49b22":"print('The depth of this tree is:', tree.tree_.max_depth)","9848c2aa":"![Decision Tree](tree.png)","76440057":"There are no null values","2ad46838":"## Importing Libraries","75e5a5db":"Smaller tree for visualization.","e61312f0":"## Visualizing a Single Decision Tree","8ed58dba":"## Features and Labels","ead21587":"## Training the Forest","a8e47e6e":"A one hot encoding allows the representation of categorical data to be more expressive. ","9b1e068f":"## Make Predictions on Test Data","e39c83c8":"![Small Decision Tree](small_tree.PNG)","ed150da8":"## Data Exploration","8e1babbf":"If you find the notebook useful, please consider **upvoting**<p>\n**Thank you !**","c2f9f3e5":"## Train Test Split","953a6125":"## One-Hot Encoding"}}