{"cell_type":{"2d6de2f1":"code","691d9507":"code","820f2b2a":"code","2bc69277":"code","161155db":"code","50fdd8ee":"code","d3e20364":"code","ef2abcd3":"code","893a98fe":"markdown","adbe327a":"markdown","0b66b586":"markdown","34e819cf":"markdown"},"source":{"2d6de2f1":"import pandas as pd\npd.options.mode.chained_assignment = None \nimport numpy as np\nimport re\nimport nltk\n\nfrom gensim.models import word2vec\n\nfrom sklearn.manifold import TSNE\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\ndata = pd.read_csv('..\/input\/rv-balance-oz\/balance oz.csv').sample(1800, random_state=23)","691d9507":"STOP_WORDS = nltk.corpus.stopwords.words()\n\ndef clean_sentence(val):\n    \"remove chars that are not letters or numbers, downcase, then remove stop words\"\n    regex = re.compile('([^\\s\\w]|_)+')\n    sentence = regex.sub('', val).lower()\n    sentence = sentence.split(\" \")\n    \n    for word in list(sentence):\n        if word in STOP_WORDS:\n            sentence.remove(word)  \n            \n    sentence = \" \".join(sentence)\n    return sentence\n\ndef clean_dataframe(data):\n    \"drop nans, then apply 'clean_sentence' function to question1 and 2\"\n    data = data.dropna(how=\"any\")\n    \n    for col in ['Reverse']:\n        data[col] = data[col].apply(clean_sentence)\n    \n    return data\n\ndata = clean_dataframe(data)\ndata.head(5)","820f2b2a":"def build_corpus(data):\n    \"Creates a list of lists containing words from each sentence\"\n    corpus = []\n    for col in ['Reverse']:\n        for sentence in data[col].iteritems():\n            word_list = sentence[1].split(\" \")\n            corpus.append(word_list)\n            \n    return corpus\n\ncorpus = build_corpus(data)        \ncorpus[0:2]","2bc69277":"model = word2vec.Word2Vec(corpus, size=20, window=8, min_count=5, workers=4)\nmodel.wv['love']","161155db":"#to get the words closest to a word\nmodel.most_similar('love')\n","50fdd8ee":"#to get the words closest to a word\nmodel.most_similar('hate')\n","d3e20364":"def tsne_plot(model):\n    \"Creates and TSNE model and plots it\"\n    labels = []\n    tokens = []\n\n    for word in model.wv.vocab:\n        tokens.append(model[word])\n        labels.append(word)\n    \n    tsne_model = TSNE(perplexity=40, n_components=2, init='pca', n_iter=2500, random_state=23)\n    new_values = tsne_model.fit_transform(tokens)\n\n    x = []\n    y = []\n    for value in new_values:\n        x.append(value[0])\n        y.append(value[1])\n        \n    plt.figure(figsize=(16, 16)) \n    for i in range(len(x)):\n        plt.scatter(x[i],y[i])\n        plt.annotate(labels[i],\n                     xy=(x[i], y[i]),\n                     xytext=(5, 2),\n                     textcoords='offset points',\n                     ha='right',\n                     va='bottom')\n    plt.show()","ef2abcd3":"tsne_plot(model)\n","893a98fe":"Clean the data","adbe327a":"Plot Similarity word in Word2vec","0b66b586":"Train Model : Word2vec","34e819cf":"Build a corpus\n"}}