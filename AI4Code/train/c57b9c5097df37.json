{"cell_type":{"ab1a91af":"code","778e6bef":"code","57f6732a":"code","dc6ba363":"code","e70efc2f":"code","2d87cd86":"code","df897053":"code","c5d1dfcb":"markdown","55a520e2":"markdown","d1aeb17e":"markdown","16117148":"markdown","e17a9b17":"markdown"},"source":{"ab1a91af":"# install business_calendar\n\n!pip install business_calendar","778e6bef":"# import packages\n\nimport numpy as np\nimport pandas as pd\nimport os\nimport csv\nfrom business_calendar import Calendar, MO, TU, WE, TH, FR, SA\nfrom datetime import datetime","57f6732a":"# load data and have a look\n\ndata = pd.read_csv('\/kaggle\/input\/open-shopee-code-league-logistic\/delivery_orders_march.csv')\ndata.head()","dc6ba363":"# find out the city of origin and destination each order, and bind them together\n\ndata['origin'] = [address.split()[-1].lower() for address in data['selleraddress']]\ndata['destination'] = [address.split()[-1].lower() for address in data['buyeraddress']]\n\ndata['from_to'] = [i+\" \"+j for i, j in zip(data['origin'], data['destination'])]\nset(data['from_to'])  # check the possible set of origin and destination","e70efc2f":"# use the information in SLA_matrix and create the dictionary of corresponding SLA limit days\n\nsla = {'luzon luzon': 5,\n       'manila luzon': 5,\n       'manila manila': 3,\n       'manila mindanao': 7,\n       'manila visayas': 7}\n\ndata['SLA_time'] = [sla[i] for i in data['from_to']]\ndata = data[['orderid', 'pick', '1st_deliver_attempt', '2nd_deliver_attempt', 'SLA_time']]\n\ndata.head()","2d87cd86":"# create the calendar\n# Add holiday 2020\/1\/1 and 2020\/12\/31 to avoid warning\n\ncal = Calendar(workdays=[MO, TU, WE, TH, FR, SA], holidays=[datetime(2020, 1, 1), datetime(2020, 3, 25), datetime(2020, 3, 30), datetime(2020, 3, 31), datetime(2020, 12, 31)])\n\n# check the time_zone\n# timestamp = 1583137548\n# datetime.fromtimestamp(timestamp)\n\ntime_zone = 28800  # add 8 hours","df897053":"# make the solution!\n# columns are 'orderid', 'pick', '1st_deliver_attempt', '2nd_deliver_attempt', 'SLA_time'\n\ndata = data.to_numpy()\nf = open(os.path.join('\/kaggle\/working', 'output.csv'), 'w')\nf.write('orderid,is_late\\n')\n\nfor row in data:\n    start_time = datetime.fromtimestamp(float(row[1]) + time_zone)  # add the time_zone\n    first_time = datetime.fromtimestamp(float(row[2]) + time_zone)\n    is_delay = first_time.date() > cal.addbusdays(start_time, int(row[4])).date()  # check if late\n\n    if not is_delay and not pd.isna(row[3]):  # the case of 2nd delivery attempt\n        second_time = datetime.fromtimestamp(float(row[3]) + time_zone)\n        is_delay = second_time.date() > cal.addbusdays(first_time, 3).date()\n    f.write(f'{int(float(row[0]))},{int(is_delay)}\\n')\n    \nf.close()","c5d1dfcb":"## 0. Set environment","55a520e2":"## 1. Data Preprocess","d1aeb17e":"## 2. Data Analysis","16117148":"# (Open) Shopee Code League - Logistics\n\nWe use business_calender to calculate working days.\nThis scores 1.00000 with late submission.","e17a9b17":"Welcome to leave a message ~T&T~"}}