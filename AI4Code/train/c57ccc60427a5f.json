{"cell_type":{"f89d2b1b":"code","3c3e1c77":"code","86eef258":"code","b4f69c2a":"code","5bd0f666":"code","bdd2110e":"code","be00ba1c":"code","3f51b1bc":"code","3b5efb70":"code","fc96e574":"code","3f04f998":"code","eb093fcf":"code","5c7b6a30":"code","716968e0":"code","ebcbd19a":"code","2af6dfb3":"code","9e93897b":"code","980d22bf":"code","d164e776":"code","a4764602":"code","98d4fd6e":"code","11e7ab84":"code","b3eea5d7":"code","322a4d54":"code","ec8dc077":"code","2044b7bb":"code","343ae3c6":"code","0f29ac84":"code","83c18f69":"markdown","8c770299":"markdown","b9cda5fe":"markdown","e5a4b0bb":"markdown","c78821b4":"markdown","a5188013":"markdown","a5441cc2":"markdown","6f4abe5e":"markdown","e15d4f40":"markdown","d06809ec":"markdown","8c7c5329":"markdown"},"source":{"f89d2b1b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport nltk\nimport string\nfrom xgboost import XGBRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense,Dropout,Bidirectional,LSTM\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.metrics import RootMeanSquaredError","3c3e1c77":"data=pd.read_csv('..\/input\/board-games\/bgg_dataset.csv',sep=';',encoding='utf8')","86eef258":"data.head()","b4f69c2a":"data.isnull().sum()","5bd0f666":"data['Domains']=data['Domains'].apply(str)\ndata['Domains']=data['Domains'].apply(lambda x: ' '.join(x.lower() for x in x.split()))\ndata['Domains']=data['Domains'].apply(lambda x: x.replace('[^\\w\\s]', ''))\ndata['Domains']=data['Domains'].replace('[\\d]','')\ndata['Domains']=data['Domains'].apply(lambda x: x.replace(',', ''))\ndata['Domains']=data['Domains'].apply(lambda x: x.replace('games', ''))","bdd2110e":"def categoric_encoder(keyword):\n    list_=np.zeros(len(data))\n    for i in range (len(list_)):\n        if i in data[data['Domains'].str.contains(keyword)].index:\n            list_[i]=1\n        else:\n            list_[i]=0\n    return list_","be00ba1c":"data['Strategy']=categoric_encoder('strategy')\ndata['Thematic']=categoric_encoder('thematic')\ndata['Children']=categoric_encoder(\"children's\")","3f51b1bc":"data['Party']=categoric_encoder(\"party\")\ndata['Abstract']=categoric_encoder(\"abstract\")\ndata['War']=categoric_encoder(\"war\")\ndata['Family']=categoric_encoder(\"family\")\ndata['Customizable']=categoric_encoder(\"customizable\")","3b5efb70":"df=data.copy()\ndf=df.drop(['ID','Name','Users Rated','BGG Rank','Mechanics','Domains'],axis=1)","fc96e574":"X=df.drop('Rating Average',axis=1)\ny=df['Rating Average']","3f04f998":"X.head()","eb093fcf":"y=y.apply(lambda x: x.replace(',','.'))","5c7b6a30":"y=y.apply(lambda x: float(x))","716968e0":"X.info()","ebcbd19a":"X['Complexity Average']=X['Complexity Average'].apply(lambda x: x.replace(',','.'))\nX['Complexity Average']=X['Complexity Average'].apply(lambda x: float(x))","2af6dfb3":"X.dropna(inplace=True)","9e93897b":"X.index","980d22bf":"y=y.drop(y.drop(X.index).index)","d164e776":"X_train,X_test,y_train,y_test=train_test_split(X,y,random_state=42)","a4764602":"X.info()","98d4fd6e":"lr=LinearRegression()\nrgs1=lr.fit(X_train,y_train)\npred=rgs1.predict(X_test)\nprint('RMSE for Linear Model: ',mean_squared_error(y_test,pred,squared=False) )","11e7ab84":"xgb=XGBRegressor()\nrgs2=xgb.fit(X_train,y_train)\npred=rgs2.predict(X_test)\nprint('RMSE for Tree Model: ',mean_squared_error(y_test,pred,squared=False) )","b3eea5d7":"knn=KNeighborsRegressor()\nrgs3=knn.fit(X_train,y_train)\npred=rgs3.predict(X_test)\nprint('RMSE for Distance Model: ',mean_squared_error(y_test,pred,squared=False) )","322a4d54":"def reshaper(arr,timestep=1):\n    return np.array(arr).reshape(arr.shape[0],timestep,arr.shape[1])","ec8dc077":"scaler=MinMaxScaler(feature_range=(-1,1))\nscaler.fit(X_train)\nX_train=scaler.transform(X_train)\nX_test=scaler.transform(X_test)","2044b7bb":"X_train_arr=reshaper(X_train)\nX_test_arr=reshaper(X_test)","343ae3c6":"model=Sequential([\n    Bidirectional(LSTM(128, input_shape=X_train_arr[1:],return_sequences=True)),\n    Dropout(0.5),\n     Bidirectional(LSTM(64)),\n    Dense(1)\n])\nmodel.compile(loss='mean_absolute_error',\n             optimizer='adam',\n             metrics=RootMeanSquaredError())\nmodel.fit(X_train_arr,y_train,batch_size=64,epochs=100, callbacks=[EarlyStopping(patience=10)], validation_split=0.2)","0f29ac84":"print('RMSE for the Deep Learning Model:', model.evaluate(X_test_arr,y_test,verbose=0)[1])","83c18f69":"# KNN","8c770299":"**Additional Notes**\n\nLSTM is used for the deep learning model.\n\nSince the buildup function of LSTM is tanh data was scaled between (-1,1).\n\nSince the dataset is small, the timestep could be 1.\n\nBidirectional LSTM is prone to overfitting. To prevent that EarlyStopping function and a Dropout Layer were used.","b9cda5fe":"# Prediction Models\nIn this part,\n\n1. A linear model (LinearRegression)\n2. A distance model (KNNRegressor)\n3. A tree model (XGBRegressor)\n4. A deep learning model were trained and their performance were compared. ","e5a4b0bb":"# XGBRegressor","c78821b4":"## Linear Regression","a5188013":"# String Preprocessing","a5441cc2":"Thanks...","6f4abe5e":"### Data Preprocessing for Deep Learning","e15d4f40":"# Dtype Change in Columns","d06809ec":"# Deep Learning\n\nThis dataset is small. So it does not require a deep learning model. It is computed just for illustration purposes in this notebook.\n\n![](https:\/\/machinelearningmastery.com\/wp-content\/uploads\/2016\/08\/Why-Deep-Learning-1024x742.png)","8c7c5329":"# String Encoding"}}