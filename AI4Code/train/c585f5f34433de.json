{"cell_type":{"91ba47a0":"code","6005558f":"code","82bdb847":"code","6213a93c":"code","5e12b897":"code","558f9b32":"code","1a233f7e":"code","44293e3f":"code","1203e828":"code","9df869a1":"code","96ee17c2":"code","52dfe70f":"code","a8163111":"code","0e2e12ff":"code","d559f7ac":"code","96df248b":"code","be605d05":"code","bef54d31":"code","0ccad87c":"code","a407e78b":"code","f5a2c768":"markdown","e476310f":"markdown","b82f9095":"markdown","450ec51d":"markdown","44f4cbd2":"markdown"},"source":{"91ba47a0":"##### \uc2dc\ud5d8\ud658\uacbd \uc138\ud305 (\ucf54\ub4dc \ubcc0\uacbd X)\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\ndef exam_data_load(df, target, id_name=\"\", null_name=\"\"):\n    if id_name == \"\":\n        df = df.reset_index().rename(columns={\"index\": \"id\"})\n        id_name = 'id'\n    else:\n        id_name = id_name\n    \n    if null_name != \"\":\n        df[df == null_name] = np.nan\n    \n    X_train, X_test = train_test_split(df, test_size=0.2, random_state=2021)\n    \n    y_train = X_train[[id_name, target]]\n    X_train = X_train.drop(columns=[target])\n\n    \n    y_test = X_test[[id_name, target]]\n    X_test = X_test.drop(columns=[target])\n    return X_train, X_test, y_train, y_test \n    \ndf = pd.read_csv(\"..\/input\/insurance\/insurance.csv\")\nX_train, X_test, y_train, y_test = exam_data_load(df, target='charges')\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","6005558f":"X_train.head()","82bdb847":"X_test.head()","6213a93c":"X_train.info()","5e12b897":"y_train.head()","558f9b32":"X_train.isnull().sum()","1a233f7e":"###\n# Separate 'id' variable\n\nX_train_ID = X_train[['id']]\nX_test_ID = X_test[['id']]\n\nX_train = X_train.drop(columns =['id'])\nX_test = X_test.drop(columns =['id'])\n\nX_train.shape, X_test.shape","44293e3f":"# Numeric Variables Preprocessing\n\nnum_cols = X_train.select_dtypes(exclude = 'object').columns\nnum_cols","1203e828":"X_train.describe()","9df869a1":"\ndef OutlierDetect(df):\n    for col in num_cols:\n        Q1 = df[col].quantile(0.25)\n        Q3 = df[col].quantile(0.75)\n        IQR = Q3 - Q1\n\n        outliers = (df[col] <= Q1 - 1.5 * IQR ) | (Q3 + 1.5 * IQR <= df[col])\n        print(col, '\uc758 \uc774\uc0c1\uce58\uc758 \ube44\uc728: ', len(df[outliers]) \/ len(df) )\n\nOutlierDetect(X_train)\nOutlierDetect(X_test)\n# X_train[outliers]\n\n#1064","96ee17c2":"from sklearn.preprocessing import StandardScaler\n\nscale = StandardScaler()\nX_train['bmi'] = scale.fit_transform(X_train[['bmi']])\nX_test['bmi'] = scale.transform(X_test[['bmi']])","52dfe70f":"# Categorical Variables preprocessing\n\ncat_cols = X_train.select_dtypes(include = 'object').columns\n\nfor col in cat_cols:\n    print(col, ':', X_train[col].value_counts(), '\\n')","a8163111":"###\n# One-hot Encoding\n\nX_train = pd.get_dummies(X_train, columns = cat_cols)\nX_test = pd.get_dummies(X_test, columns = cat_cols)\n\nX_train.head()","0e2e12ff":"from sklearn.model_selection import train_test_split\n\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, y_train['charges'], test_size = 0.2, shuffle = True, random_state = 2021)\n\nX_tr.shape, X_val.shape, y_tr.shape, y_val.shape\n","d559f7ac":"# from sklearn.model_selection import GridSearchCV, RandomizedSearchCV\n# from sklearn.ensemble import RandomForestRegressor\n# from sklearn.metrics import mean_squared_error\n\n# rf_rgs = RandomForestRegressor()\n\n# rf_params = {'n_estimators': [10, 50, 100],\n#             'max_depth' : [7, 10, 15],\n#             'max_features' : [8, 10, 15], \n#             'min_samples_split' : [4, 6, 8]}\n\n# rf_grid = RandomizedSearchCV(rf_rgs, rf_params, cv = 5, n_jobs = -1, n_iter = 10,verbose =2).fit(X_tr, y_tr)\n\n# rf_grid.best_params_","96df248b":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\n\nrf_model = RandomForestRegressor(n_estimators = 100, min_samples_split = 6, max_features = 8, max_depth = 7)\nrf_model.fit(X_tr, y_tr)\nrf_pred = rf_model.predict(X_val)\nprint(round(np.sqrt(mean_squared_error(y_val, rf_pred)), 2))","be605d05":"from xgboost import XGBRegressor\n\nxgb_model = XGBRegressor()\nxgb_model.fit(X_tr, y_tr)\nxgb_pred = xgb_model.predict(X_val)\nprint(round(np.sqrt(mean_squared_error(y_val, xgb_pred)), 2))","bef54d31":"final_model = RandomForestRegressor(n_estimators = 100, min_samples_split = 6, max_features = 8, max_depth = 7)\nfinal_model.fit(X_train, y_train)\nfinal_pred = rf_model.predict(X_test)\n\nsubmission = pd.DataFrame({\n    'id' : X_test_ID['id'],\n    'charges' : final_pred\n})\n\nsubmission.head()","0ccad87c":"submission.to_csv('ID.csv', index = False)","a407e78b":"print(round(np.sqrt(mean_squared_error(y_test['charges'], final_pred)), 2))","f5a2c768":"## Train-Validation Split","e476310f":"# EDA","b82f9095":"# \uacb0\uacfc \uccb4\uc810","450ec51d":"# Preprocessing","44f4cbd2":"## Modeling"}}