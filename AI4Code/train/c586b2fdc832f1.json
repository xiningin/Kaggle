{"cell_type":{"67b3d406":"code","0aeea922":"code","5f79e152":"code","139e700a":"code","350310e4":"code","59798802":"code","74f3d573":"code","41224a85":"code","e3d40d48":"code","3d189579":"code","da4e1c70":"code","748d9920":"code","a13c0506":"code","c6c9b2db":"code","aa60176a":"code","cec61285":"code","88cc8901":"code","6defc850":"code","56ad1c1d":"code","edc572d8":"code","7ad177be":"code","a6b0ec55":"code","85228061":"code","aa570b3c":"code","03cd643a":"code","6e5c8ab5":"code","22990f85":"code","cd954a36":"code","96043c5a":"code","20030bcb":"code","738a5e8a":"code","a4fc7ca0":"code","eec8de8a":"code","7247ecf7":"code","c2be2976":"code","890e2970":"code","e9f64ca7":"code","0b9ae092":"code","ba628523":"code","7a81891a":"code","0f28c578":"code","3f9cca6f":"code","74e1fa61":"code","60e170c8":"code","a11df8fc":"code","378c574e":"code","59153783":"code","4b3031cd":"code","ea6a343d":"code","f288808f":"code","58689f3f":"code","320e960e":"code","7ff3ad09":"code","c981d9ea":"code","e0f67c52":"code","50ec7862":"code","a2a702e3":"code","8de8dcfa":"code","879d19ab":"code","77122ed2":"code","323c476c":"code","54d1bcc3":"markdown","a91dd2cb":"markdown","55bf39f4":"markdown","d3da1eef":"markdown","b90519c6":"markdown","a2213990":"markdown","e59d0097":"markdown","c8b0a74c":"markdown","755f75a5":"markdown","c4bf4fbc":"markdown","06dba374":"markdown","789c87ff":"markdown","3873a18f":"markdown","030f85fe":"markdown","ca977da0":"markdown","b85f0bb0":"markdown","e2dfce45":"markdown","a1c1a842":"markdown","234b44ad":"markdown","6b0e207f":"markdown","63065b60":"markdown","45a40a90":"markdown","e8fc729c":"markdown","efc497c1":"markdown","479e5f16":"markdown","8a571d36":"markdown","da7b45e7":"markdown","04939474":"markdown","8ff88408":"markdown","5c3d8fda":"markdown"},"source":{"67b3d406":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom sklearn.metrics import classification_report, confusion_matrix, precision_recall_curve, auc, roc_curve\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nimport graphviz\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0aeea922":"data=pd.read_csv(\"\/kaggle\/input\/mushroom-classification\/mushrooms.csv\")\ndf=data.copy()\ndisplay(df.tail())\ndisplay(df.head())\ndisplay(df.columns)","5f79e152":"df.info() ","139e700a":"df.isnull().sum()","350310e4":"for var in df.columns:\n    print(df[var].unique())","59798802":"df.shape","74f3d573":"df.describe()  #we can see only count,unique,top and freq,because the variables are categories variables..","41224a85":"x=df.drop('class',axis=1) \ny=df['class'] \nx.head()","e3d40d48":"from sklearn.preprocessing import LabelEncoder\nEncoder_x = LabelEncoder() \nfor col in x.columns:\n    x[col] = Encoder_x.fit_transform(x[col])\nEncoder_y=LabelEncoder()\ny = Encoder_y.fit_transform(y)","3d189579":"x.head()","da4e1c70":"y ","748d9920":"x=pd.get_dummies(x,columns=x.columns,drop_first=True)\nx.head()","a13c0506":"import matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport seaborn as sns; sns.set()","c6c9b2db":"for k,var in enumerate(df.columns):\n    plt.figure(k)\n    plt.title(var, color = 'red',fontsize=15)\n    sns.countplot(x=var, data=df ,order=df[var].value_counts().index)","aa60176a":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nfrom sklearn import tree\nfrom sklearn.ensemble import RandomForestClassifier","cec61285":"x_train, x_test, y_train, y_test = train_test_split(x, y, \n                                                    test_size=0.30, \n                                                    random_state=42)","88cc8901":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\n\nx_train = sc.fit_transform(x_train)\nx_test = sc.transform(x_test)","6defc850":"cart = DecisionTreeClassifier()\ncart_model = cart.fit(x_train, y_train)","56ad1c1d":"cart_model","edc572d8":"y_pred = cart_model.predict(x_test)\naccuracy_score(y_test, y_pred)","7ad177be":"confusion_matrix(y_test,y_pred)","a6b0ec55":"?cart_model","85228061":"cart_grid = {\"max_depth\": range(1,10),\n            \"min_samples_split\" : list(range(2,50)) }","aa570b3c":"cart = tree.DecisionTreeClassifier()\ncart_cv = GridSearchCV(cart, cart_grid, cv = 10, n_jobs = -1, verbose = 2)\ncart_cv_model = cart_cv.fit(x_train, y_train)","03cd643a":"print(\"En iyi parametreler: \" + str(cart_cv_model.best_params_))","6e5c8ab5":"cart = tree.DecisionTreeClassifier(max_depth = 8, min_samples_split = 2)\ncart_tuned = cart.fit(x_train, y_train)","22990f85":"y_pred = cart_tuned.predict(x_test)\naccuracy_score(y_test, y_pred)","cd954a36":"Importance = pd.DataFrame({\"Importance\": cart_tuned.feature_importances_*100}, index = x_train.columns)","96043c5a":"Importance.sort_values(by = \"Importance\", \n                       axis = 0, \n                       ascending = False)[:10]","20030bcb":"Importance.sort_values(by = \"Importance\", \n                       axis = 0, \n                       ascending = False)[:10].plot(kind =\"barh\", color = \"r\")\n\nplt.xlabel(\"Importance Levels of Categories\");","738a5e8a":"y = df[\"class\"]\nx = x[['odor_5', 'stalk-root_2', 'stalk-surface-below-ring_3', 'spore-print-color_5', 'spore-print-color_6']]\nx_train, x_test, y_train, y_test = train_test_split(x, y, \n                                                    test_size=0.30, \n                                                    random_state=4)","a4fc7ca0":"cart1 = DecisionTreeClassifier()\ncart_model1 = cart.fit(x_train, y_train)\ncart_model1","eec8de8a":"y_pred = cart_model1.predict(x_test)\naccuracy_score(y_test, y_pred)","7247ecf7":"cart_grid = {\"max_depth\": range(1,10),\n            \"min_samples_split\" : list(range(2,50)) }","c2be2976":"cart1 = tree.DecisionTreeClassifier()\ncart_cv = GridSearchCV(cart1, cart_grid, cv = 10, n_jobs = -1, verbose = 2)\ncart_cv_model = cart_cv.fit(x_train, y_train)","890e2970":"print(\"Best Parameters: \" + str(cart_cv_model.best_params_))","e9f64ca7":"cart1 = tree.DecisionTreeClassifier(max_depth = 4, min_samples_split = 2)\ncart_tuned1 = cart1.fit(x_train, y_train)","0b9ae092":"y_pred = cart_tuned1.predict(x_test)\naccuracy_score(y_test, y_pred)","ba628523":"dot_data = export_graphviz(cart, out_file=None, \n                         feature_names=x.columns,  \n                         filled=True, rounded=True,  \n                         special_characters=True)  \ngraph = graphviz.Source(dot_data)  \ngraph","7a81891a":"from sklearn.ensemble import RandomForestClassifier","0f28c578":"x_train, x_test, y_train, y_test = train_test_split(x, y, \n                                                    test_size=0.30, \n                                                    random_state=42)","3f9cca6f":"rf_model = RandomForestClassifier().fit(x_train, y_train)","74e1fa61":"y_pred = rf_model.predict(x_test)\naccuracy_score(y_test, y_pred)","60e170c8":"rf_params = {\"max_depth\": [2,5,8,10],\n            \"max_features\": [2,5,8],\n            \"n_estimators\": [10,500,1000],\n            \"min_samples_split\": [2,5,10]}","a11df8fc":"rf_model = RandomForestClassifier()\n\nrf_cv_model = GridSearchCV(rf_model, \n                           rf_params, \n                           cv = 10, \n                           n_jobs = -1, \n                           verbose = 2) ","378c574e":"rf_cv_model.fit(x_train, y_train)","59153783":"print(\"Best Parameters: \" + str(rf_cv_model.best_params_))","4b3031cd":"rf_tuned = RandomForestClassifier(max_depth = 5, \n                                  max_features = 2, \n                                  min_samples_split = 2,\n                                  n_estimators = 10)\n\nrf_tuned.fit(x_train, y_train)","ea6a343d":"y_pred = rf_tuned.predict(x_test)\naccuracy_score(y_test, y_pred)","f288808f":"Importance = pd.DataFrame({\"Importance\": rf_tuned.feature_importances_*100},\n                         index = x_train.columns)","58689f3f":"Importance.sort_values(by = \"Importance\", \n                       axis = 0, \n                       ascending = False)[0:10]","320e960e":"Importance.sort_values(by = \"Importance\", \n                       axis = 0, \n                       ascending = False)[0:10].plot(kind =\"barh\", color = \"r\")\n\nplt.xlabel(\"Importance Levels of Variables\")","7ff3ad09":"y = df[\"class\"]\nx = x[['odor_5', 'stalk-root_2', 'stalk-surface-below-ring_3', 'spore-print-color_5', 'spore-print-color_6']]\nx_train, x_test, y_train, y_test = train_test_split(x, y, \n                                                    test_size=0.30, \n                                                    random_state=42)","c981d9ea":"rf_model1 = RandomForestClassifier().fit(x_train, y_train)","e0f67c52":"y_pred = rf_model1.predict(x_test)\naccuracy_score(y_test, y_pred)","50ec7862":"rf_params = {\"max_depth\": [2,5,8,10],\n            \"max_features\": [2,5,8],\n            \"n_estimators\": [10,500,1000],\n            \"min_samples_split\": [2,5,10]}","a2a702e3":"rf_model1 = RandomForestClassifier()\n\nrf_cv_model1 = GridSearchCV(rf_model1, \n                           rf_params, \n                           cv = 10, \n                           n_jobs = -1, \n                           verbose = 2)","8de8dcfa":"rf_cv_model1.fit(x_train, y_train)","879d19ab":"print(\"Best Parameters: \" + str(rf_cv_model1.best_params_))","77122ed2":"rf_tuned1 = RandomForestClassifier(max_depth = 5, \n                                  max_features = 2, \n                                  min_samples_split = 2,\n                                  n_estimators = 10)\n\nrf_tuned1.fit(x_train, y_train)","323c476c":"y_pred = rf_tuned1.predict(x_test)\naccuracy_score(y_test, y_pred)","54d1bcc3":"* We do not have any NaN values.","a91dd2cb":"### Determining the dependent variable and independent variables","55bf39f4":"### B ) Modeling of Random Forests","d3da1eef":"## The importance levels of different categories","b90519c6":"* W have categorical variables ,thus we must transform the variables","a2213990":"* Thus we have two claasification. Either the mushroom is poisonous or edible","e59d0097":"### Model Tuning of 5 important variables","c8b0a74c":"* We have 23 categorical variables and we have 8124 observation.","755f75a5":"### C ) Accuracy and Confusion matrix","c4bf4fbc":"## READING DATA AND EDA","06dba374":"## SOME OF VISUALIZATION OF DATA","789c87ff":"### E ) Model Tuning","3873a18f":"### A ) Test-Train splitting","030f85fe":"### A ) Train -test splitting","ca977da0":"### D ) Model Tuning","b85f0bb0":"## DECISION TREE METHOD","e2dfce45":"### We use 2 Classification Methods for our prediction:\n\n* DECISION TREE\n\n* RANDOM FORESTS","a1c1a842":"## The importance levels of different categories for random forests","234b44ad":"### C ) Modeling of decision tree","6b0e207f":"### B ) Feature Scaling","63065b60":"# PRDEDICTION","45a40a90":"## RONDOM FORESTS","e8fc729c":"### 1 ) COUNTS OF VARIABLES\n* We can see count of all categories.. ","efc497c1":"### Model Tuning of 5 important variables","479e5f16":"## Problem Definition\n* Guessing the mushroom is not poisonous OR poisonous\n### Poisonous = 1\n### Eatable = 0","8a571d36":"## Encoding categorical data\n#### Label encoding","da7b45e7":"### Data contains;\n* Attribute Information: (classes: edible=e, poisonous=p)\n\n* cap-shape: bell=b,conical=c,convex=x,flat=f, knobbed=k,sunken=s\n\n* cap-surface: fibrous=f,grooves=g,scaly=y,smooth=s\n\n* cap-color: brown=n,buff=b,cinnamon=c,gray=g,green=r,pink=p,purple=u,red=e,white=w,yellow=y\n\n* bruises: bruises=t,no=f\n\n* odor: almond=a,anise=l,creosote=c,fishy=y,foul=f,musty=m,none=n,pungent=p,spicy=s\n\n* gill-attachment: attached=a,descending=d,free=f,notched=n\n\n* gill-spacing: close=c,crowded=w,distant=d\n\n* gill-size: broad=b,narrow=n\n\n* gill-color: black=k,brown=n,buff=b,chocolate=h,gray=g, green=r,orange=o,pink=p,purple=u,red=e,white=w,yellow=y\n\n* stalk-shape: enlarging=e,tapering=t\n\n* stalk-root: bulbous=b,club=c,cup=u,equal=e,rhizomorphs=z,rooted=r,missing=?\n\n* stalk-surface-above-ring: fibrous=f,scaly=y,silky=k,smooth=s\n\n* stalk-surface-below-ring: fibrous=f,scaly=y,silky=k,smooth=s\n\n* stalk-color-above-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n\n* stalk-color-below-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n\n* veil-type: partial=p,universal=u\n\n* veil-color: brown=n,orange=o,white=w,yellow=y\n\n* ring-number: none=n,one=o,two=t\n\n* ring-type: cobwebby=c,evanescent=e,flaring=f,large=l,none=n,pendant=p,sheathing=s,zone=z\n\n* spore-print-color: black=k,brown=n,buff=b,chocolate=h,green=r,orange=o,purple=u,white=w,yellow=y\n\n* population: abundant=a,clustered=c,numerous=n,scattered=s,several=v,solitary=y\n\n* habitat: grasses=g,leaves=l,meadows=m,paths=p,urban=u,waste=w,woods=d\n![mushroom.jpg](attachment:mushroom.jpg)\n* Cap: The cap is the top of the mushroom (and often looks sort of like a small umbrella). Mushroom caps can come in a variety of colors but most often are brown, white, or yellow.\n\n* Gills, Pores, or Teeth: These structures appear under the mushroom's cap. They look similar to a fish's gills.\n\n* Ring: The ring (sometimes called the annulus) is the remaining structure of the partial veil after the gills have pushed through.\n\n* Stem or Stipe: The stem is the tall structure that holds the cap high above the ground.\n\n* Volva: The volva is the protective veil that remains after the mushroom sprouted up from the ground. As the fungus grows, it breaks through the volva.\n\n* Spores: Microscopic seeds acting as reproductive agents; they are usually released into the air and fall on a substrate to produce a new mushroom.","04939474":"### D ) Accuracy Score and Confusion matrix","8ff88408":"## If you find this kernel helpful, Please UPVOTES.","5c3d8fda":"### THE END "}}