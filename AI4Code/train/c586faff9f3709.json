{"cell_type":{"357e4100":"code","7e4d4bb6":"code","b9ed867f":"code","6ef5b9c1":"code","92cf2407":"code","2b8cb439":"code","7867fc03":"code","c9344028":"code","92c0aa8a":"code","bf93a3d9":"code","5e7cbfed":"code","c62a2474":"code","74c748d0":"code","3efc1be5":"code","e6503490":"code","d79adaed":"code","2a12890e":"code","8c710133":"code","1fed8a0b":"code","8958c7fd":"code","bd64555c":"code","9f8a0707":"code","6a986c16":"code","b42a14dd":"code","ecae7e2c":"code","33efe808":"code","46e77e8f":"code","679b3faa":"code","4f417b8a":"code","9fde0552":"code","f34a94fb":"code","cdbb6756":"code","93c77829":"code","efb8b42d":"code","c36911ee":"code","73fd089d":"markdown"},"source":{"357e4100":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport random\nimport math\nimport matplotlib.pyplot as plt\nimport numpy as np\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7e4d4bb6":"x = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\ny1 = np.array([69, 59, 47, 58, 36, 52, 68, 32, 14.9]) \/ 10000\ny2 = np.array([122, 64, 86, 16, 39, 34, 45, 21, 19]) \/ 10000\n\ny = (y1+y2)\/2\n\nplt.plot(x, y, 'r')\nplt.suptitle(f'Utilization vs prob')\nplt.xlabel('Probability')\nplt.ylabel('Utilization')\nplt.savefig(\"Utilization vs prob\")","b9ed867f":"165\/109","6ef5b9c1":"165\/6142","92cf2407":"data_size = 165 # bytes\ntot_delay1 = np.array([8888, 59052*2, 16633, 9044, 20354, 12119, 9022, 23975, 107814])\ntot_delay2 = np.array([3767, 9200, 8925, 9044, 17881, 23367, 14619, 55459, 80096])\ntot_delay = (tot_delay1+tot_delay2)\/2\n\nthroughput = data_size\/tot_delay\n\n\nplt.plot(x, throughput, 'r')\nplt.suptitle(f'Throughput vs prob')\nplt.xlabel('Probability')\nplt.ylabel('Throughput')\nplt.savefig(\"Throughput vs prob\")","2b8cb439":"# tot_delay = np.array([24, 25, 25, 18, 20, 20, 24, 23, 42])\n# data_size = 131 # bytes\n# throughput = data_size\/tot_delay\n\n\n# plt.plot(x, throughput, 'r')\n# plt.suptitle(f'Throughput vs prob')\n# plt.xlabel('Probability')\n# plt.ylabel('Throughput')\n# plt.savefig(\"Throughput vs prob\")","7867fc03":"data_size = 131 # bytes\ntot_delay = np.array([6098, 6120, 6396, 9122, 7105, 20131, 17119, 18128, 72209])\nthroughput = data_size\/tot_delay\n\n\nplt.plot(x, throughput, 'r')\nplt.suptitle(f'Throughput vs prob')\nplt.xlabel('Probability')\nplt.ylabel('Throughput')\nplt.savefig(\"Throughput vs prob\")","c9344028":"# tot_delay = np.array([19, 23, 42, 25, 24, 21, 27, 23, 41])\n# data_size = 131 # bytes\n# throughput = data_size\/tot_delay\n\n\n# plt.plot(x, throughput, 'r')\n# plt.suptitle(f'Throughput vs prob')\n# plt.xlabel('Probability')\n# plt.ylabel('Throughput')\n# plt.savefig(\"Throughput vs prob\")","92c0aa8a":"# P(i; \u03bc) = (e^-lb) (lb^i) \/ i! ","bf93a3d9":"# ##    Assignment 1\n# ##    17EC35044\n# ##    Wayal Rushikesh\n# ##    Topic : Poission Traffic Generation\/ Simulation\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport random\nimport math\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef get_prob_hist(lb=1, n=10):\n    hist = []\n    xaxis = []\n    run_sum = 0.0\n    for i in range(n+1):\n        # gen X!\n        fact=1.0\n        for j in range(1, i+1):\n#             print(j)\n            fact = fact * j\n        # gen lambda ^ x\n        ux = 1.0;\n        for j in range(i):\n            ux = ux*lb;\n        # put in formula \n        x = (1.0\/np.exp(lb)) * ux\/ fact;\n        # in case we need summ\n        run_sum += x;\n        \n        # hist has probabilities\n        hist.append(x)\n        xaxis.append(i);\n    \n        \n    return xaxis, hist;\n\nfig = plt.figure();\nlb = 1\nn=max(10, 2*lb)\nxaxis, hist = get_prob_hist(lb, n)\nplt.plot(xaxis, hist, 'r')\n# plt.plot(hist, 'g')\nplt.suptitle(f'Traffic Simulation (Probability vs X at lambda:{lb})')\nplt.xlabel('X')\nplt.ylabel('Probability')\nplt.savefig(f\"17EC35044_plot_1_lambda_{lb}.png\")\n\nfig = plt.figure();\nlb = 2\nn=max(10, 2*lb)\n\nxaxis, hist = get_prob_hist(lb, n)\nplt.plot(xaxis, hist, 'r')\n# plt.plot(hist, 'g')\nplt.suptitle(f'Traffic Simulation (Probability vs X at lambda:{lb})')\nplt.xlabel('X')\nplt.ylabel('Probability')\nplt.savefig(f\"17EC35044_plot_1_lambda_{lb}.png\")\n\nfig = plt.figure();\nlb = 3\nn=max(10, 2*lb)\nxaxis, hist = get_prob_hist(lb, n)\nplt.plot(xaxis, hist, 'r')\n# plt.plot(hist, 'g')\nplt.suptitle(f'Traffic Simulation (Probability vs X at lambda:{lb})')\nplt.xlabel('X')\nplt.ylabel('Probability')\nplt.savefig(f\"17EC35044_plot_1_lambda_{lb}.png\")\n\nfig = plt.figure();\nlb = 4\nn=max(10, 2*lb)\nxaxis, hist = get_prob_hist(lb, n)\nplt.plot(xaxis, hist, 'r')\n# plt.plot(hist, 'g')\nplt.suptitle(f'Traffic Simulation (Probability vs X at lambda:{lb})')\nplt.xlabel('X')\nplt.ylabel('Probability')\nplt.savefig(f\"17EC35044_plot_1_lambda_{lb}.png\")\n\nfig = plt.figure();\nlb = 5\nn=max(10, 2*lb)\nxaxis, hist = get_prob_hist(lb, n)\nplt.plot(xaxis, hist, 'r')\n# plt.plot(hist, 'g')\nplt.suptitle(f'Traffic Simulation (Probability vs X at lambda:{lb})')\nplt.xlabel('X')\nplt.ylabel('Probability')\nplt.savefig(f\"17EC35044_plot_1_lambda_{lb}.png\")\n\nfig = plt.figure();\nlb = 10\nn=max(10, 2*lb)\nxaxis, hist = get_prob_hist(lb, n)\nplt.plot(xaxis, hist, 'r')\n# plt.plot(hist, 'g')\nplt.suptitle(f'Traffic Simulation (Probability vs X at lambda:{lb})')\nplt.xlabel('X')\nplt.ylabel('Probability')\nplt.savefig(f\"17EC35044_plot_1_lambda_{lb}.png\")","5e7cbfed":"fig = plt.figure();\nlb = 15\nn=max(10, 2*lb)\nxaxis, hist = get_prob_hist(lb, n)\nplt.plot(xaxis, hist, 'r')\n# plt.plot(hist, 'g')\nplt.suptitle(f'Traffic Simulation (Probability vs X at lambda:{lb})')\nplt.xlabel('X')\nplt.ylabel('Probability')\nplt.savefig(f\"17EC35044_plot_1_lambda_{lb}.png\")","c62a2474":"# lb = 3\n# n=10\n# xaxis, hist = get_prob_hist(lb, n)\n# plt.plot(xaxis, hist, 'r')\n# # plt.plot(hist, 'g')\n# plt.suptitle(f'Traffic Simulation (Probability vs X at lambda:{lb})')\n# plt.xlabel('X')\n# plt.ylabel('Probability')\n# plt.savefig(f\"17EC35044_plot_1_lambda_{lb}.png\")","74c748d0":"# lb = 4\n# n=10\n# xaxis, hist = get_prob_hist(lb, n)\n# plt.plot(xaxis, hist, 'r')\n# # plt.plot(hist, 'g')\n# plt.suptitle(f'Traffic Simulation (Probability vs X at lambda:{lb})')\n# plt.xlabel('X')\n# plt.ylabel('Probability')\n# plt.savefig(f\"17EC35044_plot_1_lambda_{lb}.png\")","3efc1be5":"# lb = 5\n# n=10\n# xaxis, hist = get_prob_hist(lb, n)\n# plt.plot(xaxis, hist, 'r')\n# # plt.plot(hist, 'g')\n# plt.suptitle(f'Traffic Simulation (Probability vs X at lambda:{lb})')\n# plt.xlabel('X')\n# plt.ylabel('Probability')\n# plt.savefig(f\"17EC35044_plot_1_lambda_{lb}.png\")","e6503490":"# lb = 10\n# n=20\n# xaxis, hist = get_prob_hist(lb, n)\n# plt.plot(xaxis, hist, 'r')\n# # plt.plot(hist, 'g')\n# plt.suptitle(f'Traffic Simulation (Probability vs X at lambda:{lb})')\n# plt.xlabel('X')\n# plt.ylabel('Probability')\n# plt.savefig(f\"17EC35044_plot_1_lambda_{lb}.png\")","d79adaed":"# ##    Assignment 1\n# ##    17EC35044\n# ##    Wayal Rushikesh\n# ##    Topic : Poission Traffic Generation\/ Simulation\n\n# import random\n# import math\n# import matplotlib.pyplot as plt\n# import numpy as np\n\n# def get_prob_hist(lb=1):\n# #     lb = 1 # lambda parameter\n#     N = 10000 # no of arrivals\n#     E = np.zeros(N) # arrival time Nth packet\n#     cnt = 50\n\n\n#     intervals = np.random.exponential(scale=1\/lb, size=N)\n\n#     # print(intervals)\n#     for i in range(1, N):\n#         # U = random.random()\n#         # e = -math.log(U) \/ plambda\n#         E[i] = E[i-1] + intervals[i]\n\n#     sz = np.max(E)\n#     arrivals = np.zeros(int(sz)+1)\n#     for i in range(N):\n#         arrivals[int(E[i])] = arrivals[int(E[i])] + 1\n\n#     hist = np.zeros(int(np.max(arrivals))+1) # histogram\n#     for i in arrivals:\n#         hist[int(i)] = hist[int(i)] + 1\n\n#     hist \/= np.sum(hist)\n\n#     print(hist)\n#     return hist\n\n# lb = 1\n# hist = get_prob_hist(lb)\n# plt.plot(hist, 'r')\n# plt.suptitle(f'Traffic Simulation (Probability vs Bins at lambda:{lb})')\n# plt.xlabel('Bins')\n# plt.ylabel('Probability')\n# plt.savefig(f\"17EC35044_plot_1_lambda_{lb}.png\")","2a12890e":"# lb = 2\n# hist = get_prob_hist(lb)\n# plt.plot(hist, 'r')\n# plt.suptitle(f'Traffic Simulation (Probability vs Bins at lambda:{lb})')\n# plt.xlabel('Bins')\n# plt.ylabel('Probability')\n# plt.savefig(f\"17EC35044_plot_1_lambda_{lb}.png\")","8c710133":"# lb = 3\n# hist = get_prob_hist(lb)\n# plt.plot(hist, 'r')\n# plt.suptitle(f'Traffic Simulation (Probability vs Bins at lambda:{lb})')\n# plt.xlabel('Bins')\n# plt.ylabel('Probability')\n# plt.savefig(f\"17EC35044_plot_1_lambda_{lb}.png\")","1fed8a0b":"# lb = 3\n# hist = get_prob_hist(lb)\n# plt.plot(hist, 'r')\n# plt.suptitle(f'Traffic Simulation (Probability vs Bins at lambda:{lb})')\n# plt.xlabel('Bins')\n# plt.ylabel('Probability')\n# plt.savefig(f\"17EC35044_plot_1_lambda_{lb}.png\")","8958c7fd":"# lb = 5\n# hist = get_prob_hist(lb)\n# plt.plot(hist, 'r')\n# plt.suptitle(f'Traffic Simulation (Probability vs Bins at lambda:{lb})')\n# plt.xlabel('Bins')\n# plt.ylabel('Probability')\n# plt.savefig(f\"17EC35044_plot_1_lambda_{lb}.png\")","bd64555c":"# lb = 10\n# hist = get_prob_hist(lb)\n# plt.plot(hist, 'r')\n# plt.suptitle(f'Traffic Simulation (Probability vs Bins at lambda:{lb})')\n# plt.xlabel('Bins')\n# plt.ylabel('Probability')\n# plt.savefig(f\"17EC35044_plot_1_lambda_{lb}.png\")","9f8a0707":"# !pip install minisom","6a986c16":"# !pip install tweepy\nimport tweepy","b42a14dd":"# !git clone https:\/\/github.com\/prativa-97\/Mouse-Dynamics.git","ecae7e2c":"os.listdir('..\/input\/mier-term-project\/Mouse-Dynamics-master\/')","33efe808":"# !python ..\/input\/mier-term-project\/Mouse-Dynamics-master\/main.py","46e77e8f":"\n\n# import matplotlib.pyplot as plt\n# import numpy as np\n\n# x = np.linspace(0, 6*np.pi, 100)\n# y = np.sin(x)\n\n# # You probably won't need this if you're embedding things in a tkinter plot...\n# plt.ion()\n\n# fig = plt.figure()\n# ax = fig.add_subplot(111)\n# line1, = ax.plot(x, y, 'r-') # Returns a tuple of line objects, thus the comma\n# print()\n# for phase in np.linspace(0, 10*np.pi, 500):\n#     line1.set_ydata(np.sin(x + phase))\n#     fig.canvas.draw()\n#     fig.canvas.flush_events()\n","679b3faa":"# import numpy as np\n# import matplotlib.pyplot as plt\n# from IPython.display import display, clear_output\n\n# fig = plt.figure()\n# ax = fig.add_subplot(1, 1, 1) \n\n# for i in range(20):\n#     x = np.arange(0, i, 0.1);\n#     y = np.sin(x)\n    \n#     ax.set_xlim(0, i)\n    \n#     ax.cla()\n#     ax.plot(x, y)\n#     display(fig)\n    \n#     clear_output(wait = True)\n#     plt.pause(0.5)","4f417b8a":"# fig = plt.figure()\n# ax = fig.add_subplot(1, 1, 1) \n# fig.suptitle('test title')\n# for i in range(10):\n#     ax.set_xlim(0, 4)\n    \n#     ax.plot(i, i,marker='x')\n#     display(fig)\n    \n#     clear_output(wait = True)\n#     plt.pause(0.25)","9fde0552":"# n_epochs = 10\n# print_every = 10\n# valid_loss_min = np.Inf\n# val_loss = []\n# val_acc = []\n# train_loss = []\n# train_acc = []\n\n# fig = plt.figure(figsize=(10,10))\n# ax = fig.add_subplot(1, 1, 1) \n\n# plt.xlabel('num_epochs', fontsize=12)\n# plt.ylabel('loss', fontsize=12)\n# # plt.legend(loc='best')\n\n# plt.legend(loc=2, prop={'size': 60})\n# import matplotlib.patches as mpatches\n\n# red_patch = mpatches.Patch(color='red', label='train')\n# green_patch = mpatches.Patch(color='green', label='val')\n# plt.legend(handles=[red_patch, green_patch])\n\n# # fig.suptitle(\"Train - Validation Loss\")\n# train_loss = []\n# val_loss = []\n# for epoch in (range(1, n_epochs+1)):\n\n#     train_loss.append(epoch)\n\n#     val_loss.append(epoch)\n\n\n\n#     ax.set_xlim(0, n_epochs+1)\n# #     ax.plot( epoch, train_loss[epoch-1], marker = 'x')\n#     ax.plot( epoch, train_loss[epoch-1], label='train', marker = 'x', markerfacecolor='blue',color='green')\n#     ax.plot( epoch, val_loss[epoch-1]+10, label='train', marker = 'x', markerfacecolor='blue',color='red')\n#     display(fig)\n#     clear_output(wait = True)\n#     plt.pause(0.5)\n","f34a94fb":"\n# import numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n","cdbb6756":"# u1 = [1, 0, 1, 0, 1]\n# u2 = [1, 1, 0, 1, 0]\n# x = [2, 3, 1, 3, 1.5]\n# y = [2, 2, 1, 1, 0.5]\n# while(1):\n\n#     nu_cx= 0\n#     de_cx =0\n#     for i in range(len(u1)):\n\n#         nu_cx += u1[i]*u1[i] * x[i]\n#         de_cx += u1[i]*u1[i]\n\n\n#     new_c1 = [nu_cx\/de_cx, 0]\n\n#     nu_cy= 0\n#     de_cy =0\n#     for i in range(len(u1)):\n#         nu_cy += u1[i]*u1[i] * y[i]\n#         de_cy += u1[i]*u1[i]\n\n#     new_c1[1] = nu_cy\/de_cy\n\n\n#     nu_cx= 0\n#     de_cx =0\n#     for i in range(len(u2)):\n\n#         nu_cx += u2[i]*u2[i] * x[i]\n#         de_cx += u2[i]*u2[i]\n\n\n#     new_c2 = [nu_cx\/de_cx, 0]\n\n#     nu_cy= 0\n#     de_cy =0\n#     for i in range(len(u2)):\n#         nu_cy += u2[i]*u2[i] * y[i]\n#         de_cy += u2[i]*u2[i]\n\n#     new_c2[1] = nu_cy\/de_cy\n\n\n#     c1 = new_c1\n#     c2 = new_c2\n\n\n\n#     new_u1 = [0]*5\n#     new_u2 = [0]*5\n\n\n#     for i in range(len(u1)):\n#         d1 = ((c1[0] - x[i])**2 + (c1[1]-y[i])**2)\n#         d2 = ((c2[0] - x[i])**2 + (c2[1]-y[i])**2)\n#         new_u1[i] = 1\/(1+ (d1\/d2))\n\n#     new_u1\n\n\n#     for i in range(len(u2)):\n#         d1 = ((c1[0] - x[i])**2 + (c1[1]-y[i])**2)\n#         d2 = ((c2[0] - x[i])**2 + (c2[1]-y[i])**2)\n#         new_u2[i] = 1\/(1+ (d2\/d1))\n\n#     new_u2\n\n#     print(\"c1\", c1)\n#     print(\"c2\", c2)\n    \n\n#     max_dis = 0\n#     for i in range(len(u1)):\n#         dis = np.abs(new_u1[i] - u1[i])\n#         if (dis > max_dis):\n#             max_dis = dis\n\n#     for i in range(len(u1)):\n#         dis = np.abs(new_u2[i] - u2[i])\n# #         print(dis)\n#         if (dis > max_dis):\n#             max_dis = dis\n\n            \n#     print(\"u1\", new_u1)\n#     print(\"u2\", new_u2)\n#     print(\"max_dis\", max_dis)\n    \n#     print(\"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%555\")\n#     print(\"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%555\")\n#     if max_dis < 0.05:\n#         break\n\n#     u1 = new_u1.copy()\n#     u2 = new_u2.copy()\n    \n","93c77829":"c1","efb8b42d":"c2","c36911ee":"\n# import numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\n# data = pd.read_csv(\"\/kaggle\/input\/cluster-dataset\/Mall_Customers.csv\")\n# data\n\n# def clustering(data, cluster_data=pd.DataFrame([]), K = 2, attributes = ['Age', 'Annual_Income']):\n#     if len(cluster_data) == 0:\n#         import random\n#         rand_list = []\n#         while len(rand_list) < K:\n#             n = random.randint(0,len(data)-1)\n#             if (n not in rand_list):\n#                 rand_list.append(n)\n#         cluster_data = data.iloc[rand_list, :]\n#         cluster_data = cluster_data.reset_index(drop = True)\n    \n#     data['cluster'] = 0\n    \n#     flag = 1\n#     while(flag):\n#         flag=0\n#         old_clust = data['cluster']\n#         for i in data.index:\n#             dist = 1e10\n#             for j in cluster_data.index:\n#                 new_dist =0\n#                 for att in attributes:\n#                     new_dist += (data.loc[i, att] - cluster_data.loc[j, att])**2\n#                 if new_dist < dist:\n#                     dist = new_dist\n#                     data.loc[i, 'cluster'] = j;\n#             if ( data.loc[i, 'cluster'] != old_clust[i]):\n#                 flag=1\n        \n#         for i in cluster_data.index:\n#             for j in attributes:\n#                 cluster_data.loc[i, j] = 0\n        \n#         count  = [0]*len(cluster_data)\n#         for i in data.index:\n#             j = data.loc[i, 'cluster']\n#             count[j] += 1\n#             for att in attributes:\n#                 cluster_data.loc[j, att] += data.loc[i, att]\n        \n#         for i in cluster_data.index:\n#             for j in attributes:\n#                 cluster_data.loc[i, j] \/= count[i]\n        \n# #         print(cluster_data)\n        \n#     return data, cluster_data\n\n\n\n\n# set_att   = [['Age', 'Annual_Income'], ['Age', 'Spending_Score'], ['Spending_Score', 'Annual_Income']]\n\n# for attributes in set_att:\n#     print(attributes)\n#     for K in range(4, 6):\n#         df, cluster_data = clustering(data.copy(), cluster_data=pd.DataFrame([]), K = K, attributes = attributes)\n\n#         # for i in df.index:\n#         #     print(df.cluster[i])\n#         import matplotlib.pyplot as plt\n\n#         plt.scatter(df[attributes[0]], df[attributes[1]], c= df['cluster'], s=50, alpha=0.5)\n#         plt.scatter(cluster_data.loc[:, attributes[0]], cluster_data.loc[:, attributes[1]], c='red', s=50)\n#         plt.xlabel(attributes[0])\n#         plt.ylabel(attributes[1])\n#         title = \"no of clust: \"+str(K)\n#         plt.title(title)\n#         title = str(attributes) + \" - \" + title + \".png\"\n#         plt.savefig(title)\n#         plt.show()\n\n# try:\n#     from IPython.display import FileLinks\n#     print(FileLinks('.'))\n# except:\n#     print(\"iamges saved\")\n    \n    \n    \n# def elbow(data, r=10, attributes = ['Age', 'Annual_Income']):\n#     dist_list = []\n#     for rr in range(1, r+1):\n#         df, cluster_data = clustering(data.copy(), cluster_data=pd.DataFrame([]), K = rr, attributes = attributes)\n#         dist = 0\n#         for i in data.index:\n#             new_dist=0\n#             j = df.loc[i, 'cluster']\n#             for att in attributes:\n#                 new_dist += (df.loc[i, att] - cluster_data.loc[j, att])**2\n                \n#             dist += np.sqrt(new_dist)\n#         dist_list.append(dist)\n#     return dist_list\n    \n\n# r = 10\n# dist_list = elbow(data, r=r, attributes = ['Age', 'Annual_Income'])\n# print(\"Elbow method : \")\n# plt.plot(range(r), dist_list)","73fd089d":"> "}}