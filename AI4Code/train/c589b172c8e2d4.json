{"cell_type":{"15da4f7a":"code","1475a776":"code","a6f214e8":"code","dabe3284":"code","1032adeb":"code","dcba8bfe":"code","6b0396de":"code","0661e7a3":"code","a92d662a":"code","e11d5a1e":"code","72f758ea":"code","ece3378a":"code","4726fc4d":"code","f9862b4d":"code","4d724da2":"code","0548e77b":"code","9d2e82f5":"code","d9496c6b":"markdown","26f0a72e":"markdown"},"source":{"15da4f7a":"#Import necessary libraries\nfrom torch import nn\nimport numpy as np\nimport torch\nimport torch.nn.functional as F\nimport matplotlib.pyplot as plt\nfrom torchvision import datasets, transforms\nfrom  torch import optim \nfrom torchvision import transforms, utils, models\n\nfrom collections import OrderedDict\ndevice = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')","1475a776":"data_dir = \"\/kaggle\/input\/dogs-cats-images\/dataset\/\"\n\ntrain_transforms = transforms.Compose([transforms.RandomRotation(30),\n                                transforms.RandomHorizontalFlip(),\n                                transforms.Resize((280,280)),\n                                transforms.ToTensor(),\n                                transforms.Normalize([0.5, 0.5, 0.5],\n                                [0.5, 0.5, 0.5])])\ntest_transforms = transforms.Compose([\n                                transforms.Resize((280,280)),\n                                transforms.ToTensor(),\n                                transforms.Normalize([0.5, 0.5, 0.5],\n                                [0.5, 0.5, 0.5])])\n\ntrain_data = datasets.ImageFolder(data_dir + 'training_set', transform=train_transforms)\ntest_data = datasets.ImageFolder(data_dir + 'test_set', transform=test_transforms)","a6f214e8":"for image,label in train_data:\n    print(image.shape)\n    break\n    ","dabe3284":"trainloader = torch.utils.data.DataLoader(dataset=train_data, batch_size=64, shuffle=True)\ntestloader = torch.utils.data.DataLoader(dataset=test_data, batch_size=64,shuffle=True)","1032adeb":"iter_ = iter(trainloader)\nimage,label = next(iter_)\nprint(image.shape)\nprint(label)\n","dcba8bfe":"def image_convert(img):\n    img = img.clone().cpu().numpy()\n    img = img.transpose(1,2,0)\n    std = [0.5,0.5,0.5]\n    mean = [0.5,0.5,0.5]\n    img = img*std + mean\n    return img\n\n\ndef plot_10():\n        iter_ = iter(trainloader)\n        images,labels = next(iter_)\n        an_ = {'0':'cat','1':'dog'}\n        \n        plt.figure(figsize=(20,10))\n        for idx in range(10):\n            plt.subplot(2,5,idx+1)\n            img = image_convert(images[idx])\n            label = labels[idx]\n            plt.imshow(img)\n            plt.title(an_[str(label.numpy())])\n        plt.show()\n            \n    ","6b0396de":"plot_10()","0661e7a3":"model =  models.resnet18(pretrained=True).to(device)\nprint(model)","a92d662a":"from torch import nn\nclass Dc_model(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.linear1=nn.Linear(512,120)\n        self.linear2=nn.Linear(120,2)\n    \n    def forward(self,x):\n        x = F.relu(self.linear1(x))\n        x = self.linear2(x)\n        return x","e11d5a1e":"model_ = Dc_model().to(device)\nmodel_","72f758ea":"model.fc = model_\nprint(model)","ece3378a":"for param in model.parameters():\n        param.requires_grad = False\nfor param in model.fc.parameters():\n        param.requires_grad = True","4726fc4d":"criterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(model.parameters(),lr=0.001)","f9862b4d":"train_loss = []\nval_loss = []\n\nepochs = 5\n\nfor epoch in range(epochs):\n      print(\"epoch {}\/{}\".format(epoch+1,epochs))\n      running_loss = 0.0\n      running_score = 0.0\n#       model.train()\n      for image,label in trainloader:\n          image = image.to(device)\n          label = label.to(device)\n          optimizer.zero_grad()\n          y_pred = model.forward(image)\n          loss = criterion(y_pred,label)         \n          loss.backward() #calculate derivatives \n          optimizer.step() # update parameters\n          val, index_ = torch.max(y_pred,axis=1)\n          running_score += torch.sum(index_ == label.data).item()\n          running_loss += loss.item()\n      \n      epoch_score = running_score\/len(trainloader.dataset)\n      epoch_loss = running_loss\/len(trainloader.dataset)\n      train_loss.append(epoch_loss)\n      print(\"Training loss: {}, accuracy: {}\".format(epoch_loss,epoch_score))\n      \n      with torch.no_grad():\n          model.eval()\n          running_loss = 0.0\n          running_score = 0.0\n          for image,label in testloader:\n                image = image.to(device)\n                label = label.to(device)\n                optimizer.zero_grad()\n                y_pred = model.forward(image)\n                loss = criterion(y_pred,label)\n                running_loss += loss.item()\n\n                val, index_ = torch.max(y_pred,axis=1)\n                running_score += torch.sum(index_ == label.data).item()\n          \n          epoch_score = running_score\/len(testloader.dataset)\n          epoch_loss = running_loss\/len(testloader.dataset)\n          val_loss.append(epoch_loss)\n          print(\"Validation loss: {}, accuracy: {}\".format(epoch_loss,epoch_score))\n","4d724da2":"plt.plot(train_loss,label='train loss')\nplt.plot(val_loss,label='test loss')\nplt.legend()\nplt.show()","0548e77b":"def plot_val_images():\n\n    label_dict = ['cat','dog']\n \n    iter_ = iter(testloader)\n    images,labels = next(iter_)\n    images = images.to(device)\n    pred_labels = labels.to(device)\n\n    \n    img_out = model.forward(images)\n    value, index_val = torch.max(img_out, 1)\n\n    # label = label_dict[str(label)]\n    fig = plt.figure(figsize=(35,9))\n    for idx in np.arange(10):\n        ax = fig.add_subplot(2,5,idx+1)\n        plt.imshow(image_convert(images[idx]))\n        label = labels[idx]  \n        pred_label = pred_labels[idx]\n        ax.set_title('Act {},pred {}'.format(label_dict[label],label_dict[pred_label]))","9d2e82f5":"plot_val_images()","d9496c6b":"In this Kernel we will build a simple dog cat classifier using pytorch. We will use concept of **transfer learning** using resnet18. This will be helpful for beginners in Pytorch.","26f0a72e":"If you like my kernel do **Upvote**"}}