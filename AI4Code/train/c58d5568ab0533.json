{"cell_type":{"1a300206":"code","f2616ce1":"code","9f5896c1":"code","e0e17581":"code","2d8508a4":"code","6ff38b40":"code","979da0fb":"code","f4b617f2":"code","9aca94bf":"code","b32cd095":"code","afc86cd2":"code","83d638c6":"code","befe539d":"code","3b571a99":"code","4bdc7b11":"code","3d124657":"code","27907120":"code","d9b37890":"code","27203aaa":"code","0cd702a6":"code","2bcdab53":"code","3d1baec7":"code","b1b17f2c":"code","613d8cd3":"code","491593dd":"code","f76b2baf":"code","536b0fd1":"code","634f28f1":"code","b529e7d2":"code","a5886259":"code","0f7982c8":"code","1b4eee53":"code","e7852160":"code","029aa889":"code","572a0b9c":"code","4c75781d":"code","9ab010e3":"code","9d0ba65d":"code","0cd16833":"code","31a57b1d":"code","f1ee5a68":"code","d47966f9":"code","aa4c2942":"code","2d012296":"code","e8d3e7c1":"code","c88eca31":"code","a1c2ffbc":"code","475c015b":"markdown"},"source":{"1a300206":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')","f2616ce1":"df = pd.read_csv('..\/input\/adult-census-income\/adult.csv')","9f5896c1":"df.head()","e0e17581":"df.shape","2d8508a4":"df.info()","6ff38b40":"df.describe()","979da0fb":"df.isnull().values.any()","f4b617f2":"df.isin(['?']).sum()","9aca94bf":"df = df.replace('?', np.NaN)","b32cd095":"for col in ['workclass', 'occupation', 'native.country']:\n    df[col].fillna(df[col].mode()[0], inplace=True)","afc86cd2":"df.isnull().sum()","83d638c6":"df.head()","befe539d":"df['income'].value_counts()","3b571a99":"sns.countplot(x='income', data = df)","4bdc7b11":"sns.boxplot(y='age',x='income',data=df)","3d124657":"sns.boxplot(y='hours.per.week',x='income',data=df)","27907120":"sns.countplot(df['sex'],hue=df['income'])","d9b37890":"sns.countplot(df['occupation'],hue=df['income'])\nplt.xticks(rotation=90)","27203aaa":"df['income']=df['income'].map({'<=50K': 0, '>50K': 1})","0cd702a6":"sns.barplot(x=\"education.num\",y=\"income\",data=df)","2bcdab53":"df['workclass'].unique()","3d1baec7":"sns.barplot(x=\"workclass\",y=\"income\",data=df)\nplt.xticks(rotation=90)","b1b17f2c":"df['education'].unique()","613d8cd3":"sns.barplot(x=\"education\",y=\"income\",data=df)\nplt.xticks(rotation=90)","491593dd":"df['marital.status'].unique()","f76b2baf":"sns.barplot(x=\"marital.status\",y=\"income\",data=df)\nplt.xticks(rotation=90)","536b0fd1":"df['relationship'].unique()","634f28f1":"sns.barplot(x=\"relationship\",y=\"income\",data=df)\nplt.xticks(rotation=90)","b529e7d2":"df['native.country'].unique()","a5886259":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()","0f7982c8":"for col in df.columns:\n    if df[col].dtypes == 'object':\n        df[col] = le.fit_transform(df[col])","1b4eee53":"df.dtypes","e7852160":"df.head()","029aa889":"corrmat = df.corr()\nplt.figure(figsize=(20,12))\nsns.heatmap(corrmat, annot=True, cmap='coolwarm')","572a0b9c":"corrmat['income'].sort_values(ascending = False)","4c75781d":"X = df.iloc[:,0:-1]\ny = df.iloc[:,-1]","9ab010e3":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.30, random_state = 42)","9d0ba65d":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = pd.DataFrame(sc.fit_transform(X_train))\nX_test = pd.DataFrame(sc.transform(X_test))","0cd16833":"X_train.head()","31a57b1d":"l=[]","f1ee5a68":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\nacc = accuracy_score(y_test, y_pred)\nprint('Logistic Regression:', acc * 100)\nl.append(acc)","d47966f9":"from sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\nclassifier = SVC(kernel = 'rbf', random_state = 42)\nclassifier.fit(X_train, y_train)\n\ny_pred = classifier.predict(X_test)\nacc = accuracy_score(y_test, y_pred)\nprint('SVM:', acc * 100)\nl.append(acc)","aa4c2942":"from sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nclassifier.fit(X_train, y_train)\n\ny_pred = classifier.predict(X_test)\nacc = accuracy_score(y_test, y_pred)\nprint('Knn:',acc * 100)\nl.append(acc)","2d012296":"from sklearn.tree import DecisionTreeClassifier\nclassifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)\n\ny_pred = classifier.predict(X_test)\nacc = accuracy_score(y_test, y_pred)\nprint('Decision Tree:', acc * 100)\nl.append(acc)","e8d3e7c1":"from sklearn.naive_bayes import GaussianNB\nclassifier = GaussianNB()\nclassifier.fit(X_train, y_train)\n\ny_pred = classifier.predict(X_test)\nacc = accuracy_score(y_test, y_pred)\nprint('Naive Bayes:', acc * 100)\nl.append(acc)","c88eca31":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix as cm\nfrom sklearn.metrics import classification_report as cr\nclassifier = RandomForestClassifier(n_estimators = 300, criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)\n\ny_pred = classifier.predict(X_test)\nacc = accuracy_score(y_test, y_pred)\nprint('Random Forest:',acc * 100)\nl.append(acc)\nprint(cm(y_test, y_pred))\nprint(cr(y_test, y_pred))","a1c2ffbc":"y_axis=['Logistic Regression',\n     'Support Vector Classifier',\n        'K-Neighbors Classifier',\n      'Decision Tree Classifier',\n       'Gaussian Naive Bayes',\n      'Random Forest Classifier']\nx_axis=l\nsns.barplot(x=x_axis,y=y_axis)\nplt.xlabel('Accuracy')\ntabular_form = pd.DataFrame(x_axis,y_axis)\ntabular_form.head(6)","475c015b":"If you find this kernel useful, **PLEASE UPVOTE!!**"}}