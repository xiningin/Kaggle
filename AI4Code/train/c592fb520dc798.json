{"cell_type":{"f0d0a62d":"code","8fffc0e9":"code","85ed9836":"code","550b6231":"markdown","7b5051cc":"markdown","b11d6a69":"markdown","ed12a44a":"markdown","5b2e3d7c":"markdown","4e934f7f":"markdown"},"source":{"f0d0a62d":"def is_kaggle_gpu_enabled():\n    \n    \"\"\"Return whether GPU is enabled in the running Kaggle kernel\"\"\"\n\n    from tensorflow.python.client import device_lib\n\n    # when only CPU is enabled the list shows two CPU entries, otherwise there are more, listing GPU as well\n    return len(device_lib.list_local_devices()) > 2","8fffc0e9":"is_kaggle_gpu_enabled()","85ed9836":"import pandas as pd\n\ndata_path = \"\/kaggle\/input\/YOUR-DATA\/YOUR-DATAFRAME.csv\" # replace the path for your case\n\nif is_kaggle_gpu_enabled():\n    \n    import cudf\n\n    cudf_data = cudf.read_csv(data_path, index_col='ts_id')\n    train_data = cudf_data.to_pandas()\n    del cudf_data\n    \nelse:\n    \n    train_data = pd.read_csv(data_path, index_col='ts_id')","550b6231":"## Alternatives for implementation\n\nProbably there are other options to see if GPU is enabled other than using Tensorflow. I tried some approaches checking the total amount of RAM, since the amount listed as available is 16GB for no accelerator and 13GB for GPU (at the time of writing this notebook). However, the RAM space returned by standard functions (e.g. from os library) did not match the mentioned Kaggle RAM limits, so seemed less reliable. Also, such limits may change over time.","7b5051cc":"Try calling the function with accelerator set to GPU or None, to verify that it works.","b11d6a69":"# Programmatically check if GPU is enabled in Kaggle\n\nIt makes sense to be able to run certain notebooks with either GPU enabled or disabled, but some aspects might need some filtering to work. For this reason, I thought that having a function that tells you if your Kaggle notebook has GPU enabled or disabled can be useful.\n\nAfter a quick search I did not find any other notebook showing how to do this, although it's unlikely that nobody has tried it before.","ed12a44a":"You may want to use this filtering for other actions, such as determining whether XGBoost should use gpu_hist tree method.","5b2e3d7c":"## The function","4e934f7f":"## Example use case\n\nLarge datasets are slow to load using pandas read_csv function, and cudf can make it faster by using GPU, but importing it will raise an error in Kaggle if GPU is disabled. Hence, you can make loading more robust by checking if GPU is enabled."}}