{"cell_type":{"507fc759":"code","811d4b60":"code","6f71f03a":"code","8f3137ac":"code","f6e186a5":"code","65f41ab4":"code","2c0d2e3d":"code","2da17542":"code","3386a7c6":"markdown","231da5fe":"markdown","acacf5ed":"markdown","f7319e21":"markdown","d6c086c3":"markdown"},"source":{"507fc759":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","811d4b60":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras import layers\n\nfrom tensorflow import argmax\nfrom tensorflow import expand_dims\nimport matplotlib.pyplot as plt","6f71f03a":"#need to update with data augmentation\ntrain_image_generator = ImageDataGenerator(\n  rescale = 1.0\/255)\ntest_image_generator = ImageDataGenerator(\n  rescale = 1.0\/255)","8f3137ac":"#assign train data\ntraining_iterator = train_image_generator.flow_from_directory('\/kaggle\/input\/covid19-image-dataset\/Covid19-dataset\/train',\ntarget_size = (300, 300),\nbatch_size = 16,\ncolor_mode = 'grayscale')\n#class_mode = 'sparse')","f6e186a5":"#assign test data\ntest_iterator = test_image_generator.flow_from_directory('\/kaggle\/input\/covid19-image-dataset\/Covid19-dataset\/test',\ntarget_size = (300, 300),\nbatch_size = 16,\ncolor_mode = 'grayscale')\n#class_mode = 'sparse')","65f41ab4":"#callback = tf.keras.callbacks.EarlyStopping(monitor='accuracy', patience=3)\n\nmodel = Sequential()\nmodel.add(layers.Input(shape = training_iterator.image_shape))\nmodel.add(layers.Conv2D(16, 3, padding ='same', activation = 'relu'))\n#model.add(layers.Dropout(0.1))\nmodel.add(layers.MaxPooling2D())\n#model.add(layers.Dropout(0.2))\nmodel.add(layers.Conv2D(32, 3, padding = 'same', activation = 'relu'))\nmodel.add(layers.MaxPooling2D())\nmodel.add(layers.Flatten())\n#model.add(layers.Dense(128,activation = 'relu'))\nmodel.add(layers.Dense(3, activation = 'softmax'))\n\nmodel.compile(\noptimizer = tf.keras.optimizers.Adam(learning_rate = 0.005),\nloss = tf.keras.losses.CategoricalCrossentropy(),\nmetrics = ['accuracy'])\n\nmodel.summary()","2c0d2e3d":"batch_size = 16\nhistory = model.fit(training_iterator, epochs = 10,  validation_data=test_iterator)","2da17542":"#Take matplotlib frame and remove axes.\ndef clean_plot(plot):\n    plot.axes.get_xaxis().set_visible(False)\n    plot.axes.get_yaxis().set_visible(False)\n\n#Dict mapping from class numbers to string labels:\nclass_names = {\n        0: \"Covid\",\n        1: \"Normal\",\n        2: \"Pneumonia\"\n    }\n\n#Loads a sample batch of data\nsample_batch_input, sample_labels = test_iterator.next()\n    \n#Grabs the first five images\nsample_batch_input = sample_batch_input[:5]\nsample_labels = sample_labels[:5]\n\n#Makes predictions using model.predict(x)\nsample_predictions = model.predict(sample_batch_input)\n\n#Iterate of images, predictions, and true labels\nfor i, (image, prediction, label) in enumerate(zip(sample_batch_input, sample_predictions, sample_labels)):\n\n    image_name = \"X_ray{}\".format(i)\n\n    #Gets predicted class with highest probability\n    predicted_class = argmax(prediction).numpy()\n\n    #Gets correct label\n    actual_class = argmax(label).numpy()\n\n    print(image_name)\n    print(\"\\tModel prediction: {}\".format(prediction))\n    print(\"\\tTrue label: {} ({})\".format(class_names[actual_class], actual_class))\n    print(\"\\tCorrect:\", predicted_class == actual_class)\n\n    #Saves image file using matplotlib\n    sample_image = image\n    clean_plot(plt.imshow(\n    sample_image[:, :, 0],\n    cmap = \"gray\"\n        ))\n    plt.title(image_name + \" Predicted: {}, Actual: {}\".format(class_names[predicted_class], class_names[actual_class]))\n    plt.tight_layout()\n    plt.show()\n    plt.clf()","3386a7c6":"# **Modelling**","231da5fe":"# **Visualize using matplotlib**","acacf5ed":"# **Read Data**","f7319e21":"# **Import**","d6c086c3":"# **Train models**"}}