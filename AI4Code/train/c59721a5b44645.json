{"cell_type":{"54d174d9":"code","6f1ce77f":"code","2d02a55c":"code","2cdb57df":"code","cbedb295":"code","cfb2de63":"code","1d45d6d1":"code","20a8a310":"code","6c36bcdc":"code","68762bc7":"code","1c467f3c":"code","811c08c7":"code","8485f1e9":"code","135b6a92":"code","5e7102d0":"code","7a35f7b4":"code","f1e489b6":"code","91504953":"code","a7c68485":"code","3dff4cf5":"code","7faa327c":"code","76a80377":"code","f3fae94c":"code","6329d5b4":"code","57c890dc":"code","1c74fb14":"code","6033fb58":"code","f1e28fd5":"code","c593c57e":"code","6e288831":"code","e9a2ccbf":"code","5b3dc854":"code","fff43260":"code","d4f8b663":"code","33e8edac":"code","abb94f89":"code","cbc7b024":"code","293e2dfe":"code","20cd2057":"code","d8ddbec1":"code","784dbb17":"code","df400c84":"code","09b8904b":"code","a0db4c05":"code","0c6ce82c":"code","a3595503":"code","a2c9bb48":"code","fff84ef5":"code","7be33785":"code","2075e2ab":"code","3db565ec":"code","eed4cd10":"markdown","7bcdd87b":"markdown","b99e73f2":"markdown","b82e8ad4":"markdown","02c7b6e3":"markdown","8c2a3373":"markdown","572fa865":"markdown","4d785fc1":"markdown","5059f7bf":"markdown","5af2bf5b":"markdown","df042e66":"markdown","a98a529d":"markdown","98cc5f8a":"markdown","3fc038b6":"markdown"},"source":{"54d174d9":"import datetime\nimport math\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport numpy as np\nimport os\nimport pandas as pd\nimport seaborn as sns\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nimport tqdm\nimport warnings\n\nfrom kaggle.competitions import nflrush","6f1ce77f":"pd.options.display.max_rows = 500\npd.options.display.max_columns = 100\nsns.set_style('darkgrid')\nmpl.rcParams['figure.figsize'] = [15,10]","2d02a55c":"env = nflrush.make_env()","2cdb57df":"train = pd.read_csv('..\/input\/nfl-big-data-bowl-2020\/train.csv', dtype={'WindSpeed': 'object'})","cbedb295":"train.columns","cfb2de63":"train['GameId'].value_counts()","1d45d6d1":"agame = train[train['GameId'] == 2017121000]\nagame","20a8a310":"agame['PossessionTeam'].tail(100)","6c36bcdc":"len(agame['WindDirection'].unique())","68762bc7":"aplay = agame[agame['PlayId'] == 20171210000058]\naplay","1c467f3c":"aplay['is_rusher'] = aplay['NflId'] == aplay['NflIdRusher']","811c08c7":"aplay","8485f1e9":"rusher_values = aplay.loc[aplay['is_rusher']][['X', 'Y', 'S', 'A']]\nrusher_values = pd.DataFrame(np.repeat(rusher_values.values, len(aplay), axis=0))\nrusher_values.columns = ['X_rusher', 'Y_rusher', 'S_rusher', 'A_rusher']\nrusher_values","135b6a92":"train.head()","5e7102d0":"train['PlayId'].value_counts()","7a35f7b4":"train['Yards'].describe()","f1e489b6":"ax = sns.distplot(train['Yards'])\nplt.vlines(train['Yards'].mean(), plt.ylim()[0], plt.ylim()[1], color='r', linestyles='--');\nplt.text(train['Yards'].mean()-8, plt.ylim()[1]-0.005, \"Mean Yards Gained\", size=15, color='r')\nplt.xlabel(\"\")\nplt.title(\"Yards Gained Distribution\", size=20);","91504953":"train.columns","a7c68485":"# author : ryancaldwell\n# Link : https:\/\/www.kaggle.com\/ryancaldwell\/location-eda\ndef create_features(df, deploy=False):\n    def new_X(x_coordinate, play_direction):\n        if play_direction == 'left':\n            return 120.0 - x_coordinate\n        else:\n            return x_coordinate\n\n    def new_line(rush_team, field_position, yardline):\n        if rush_team == field_position:\n            # offense starting at X = 0 plus the 10 yard endzone plus the line of scrimmage\n            return 10.0 + yardline\n        else:\n            # half the field plus the yards between midfield and the line of scrimmage\n            return 60.0 + (50 - yardline)\n\n    def new_orientation(angle, play_direction):\n        if play_direction == 'left':\n            new_angle = 360.0 - angle\n            if new_angle == 360.0:\n                new_angle = 0.0\n            return new_angle\n        else:\n            return angle\n\n    def euclidean_distance(x1,y1,x2,y2):\n        x_diff = (x1-x2)**2\n        y_diff = (y1-y2)**2\n\n        return np.sqrt(x_diff + y_diff)\n\n    def back_direction(orientation):\n        if orientation > 180.0:\n            return 1\n        else:\n            return 0\n\n    def update_yardline(df):\n        new_yardline = df[df['NflId'] == df['NflIdRusher']]\n        new_yardline['YardLine'] = new_yardline[['PossessionTeam','FieldPosition','YardLine']].apply(lambda x: new_line(x[0],x[1],x[2]), axis=1)\n        new_yardline = new_yardline[['GameId','PlayId','YardLine']]\n\n        return new_yardline\n\n    def update_orientation(df, yardline):\n        df['X'] = df[['X','PlayDirection']].apply(lambda x: new_X(x[0],x[1]), axis=1)\n        df['Orientation'] = df[['Orientation','PlayDirection']].apply(lambda x: new_orientation(x[0],x[1]), axis=1)\n        df['Dir'] = df[['Dir','PlayDirection']].apply(lambda x: new_orientation(x[0],x[1]), axis=1)\n\n        df = df.drop('YardLine', axis=1)\n        df = pd.merge(df, yardline, on=['GameId','PlayId'], how='inner')\n\n        return df\n\n    def back_features(df):\n        carriers = df[df['NflId'] == df['NflIdRusher']][['GameId','PlayId','NflIdRusher','X','Y','Orientation','Dir','YardLine']]\n        carriers['back_from_scrimmage'] = carriers['YardLine'] - carriers['X']\n        carriers['back_oriented_down_field'] = carriers['Orientation'].apply(lambda x: back_direction(x))\n        carriers['back_moving_down_field'] = carriers['Dir'].apply(lambda x: back_direction(x))\n        carriers = carriers.rename(columns={'X':'back_X',\n                                            'Y':'back_Y'})\n        carriers = carriers[['GameId','PlayId','NflIdRusher','back_X','back_Y','back_from_scrimmage','back_oriented_down_field','back_moving_down_field']]\n\n        return carriers\n\n    def features_relative_to_back(df, carriers):\n        player_distance = df[['GameId','PlayId','NflId','X','Y']]\n        player_distance = pd.merge(player_distance, carriers, on=['GameId','PlayId'], how='inner')\n        player_distance = player_distance[player_distance['NflId'] != player_distance['NflIdRusher']]\n        player_distance['dist_to_back'] = player_distance[['X','Y','back_X','back_Y']].apply(lambda x: euclidean_distance(x[0],x[1],x[2],x[3]), axis=1)\n\n        player_distance = player_distance.groupby(['GameId','PlayId','back_from_scrimmage','back_oriented_down_field','back_moving_down_field'])\\\n                                         .agg({'dist_to_back':['min','max','mean','std']})\\\n                                         .reset_index()\n        player_distance.columns = ['GameId','PlayId','back_from_scrimmage','back_oriented_down_field','back_moving_down_field',\n                                   'min_dist','max_dist','mean_dist','std_dist']\n\n        return player_distance\n\n    def defense_features(df):\n        rusher = df[df['NflId'] == df['NflIdRusher']][['GameId','PlayId','Team','X','Y']]\n        rusher.columns = ['GameId','PlayId','RusherTeam','RusherX','RusherY']\n\n        defense = pd.merge(df,rusher,on=['GameId','PlayId'],how='inner')\n        defense = defense[defense['Team'] != defense['RusherTeam']][['GameId','PlayId','X','Y','RusherX','RusherY']]\n        defense['def_dist_to_back'] = defense[['X','Y','RusherX','RusherY']].apply(lambda x: euclidean_distance(x[0],x[1],x[2],x[3]), axis=1)\n\n        defense = defense.groupby(['GameId','PlayId'])\\\n                         .agg({'def_dist_to_back':['min','max','mean','std']})\\\n                         .reset_index()\n        defense.columns = ['GameId','PlayId','def_min_dist','def_max_dist','def_mean_dist','def_std_dist']\n\n        return defense\n\n    def static_features(df):\n        static_features = df[df['NflId'] == df['NflIdRusher']][['GameId','PlayId','X','Y','S','A','Dis','Orientation','Dir',\n                                                            'YardLine','Quarter', 'PossessionTeam', 'Down','Distance','DefendersInTheBox']].drop_duplicates()\n        static_features['DefendersInTheBox'] = static_features['DefendersInTheBox'].fillna(np.mean(static_features['DefendersInTheBox']))\n\n        return static_features\n    \n    def split_personnel(s):\n        splits = s.split(',')\n        for i in range(len(splits)):\n            splits[i] = splits[i].strip()\n\n        return splits\n\n    def defense_formation(l):\n        dl = 0\n        lb = 0\n        db = 0\n        other = 0\n\n        for position in l:\n            sub_string = position.split(' ')\n            if sub_string[1] == 'DL':\n                dl += int(sub_string[0])\n            elif sub_string[1] in ['LB','OL']:\n                lb += int(sub_string[0])\n            else:\n                db += int(sub_string[0])\n\n        counts = (dl,lb,db,other)\n\n        return counts\n\n    def offense_formation(l):\n        qb = 0\n        rb = 0\n        wr = 0\n        te = 0\n        ol = 0\n\n        sub_total = 0\n        qb_listed = False\n        for position in l:\n            sub_string = position.split(' ')\n            pos = sub_string[1]\n            cnt = int(sub_string[0])\n\n            if pos == 'QB':\n                qb += cnt\n                sub_total += cnt\n                qb_listed = True\n            # Assuming LB is a line backer lined up as full back\n            elif pos in ['RB','LB']:\n                rb += cnt\n                sub_total += cnt\n            # Assuming DB is a defensive back and lined up as WR\n            elif pos in ['WR','DB']:\n                wr += cnt\n                sub_total += cnt\n            elif pos == 'TE':\n                te += cnt\n                sub_total += cnt\n            # Assuming DL is a defensive lineman lined up as an additional line man\n            else:\n                ol += cnt\n                sub_total += cnt\n\n        # If not all 11 players were noted at given positions we need to make some assumptions\n        # I will assume if a QB is not listed then there was 1 QB on the play\n        # If a QB is listed then I'm going to assume the rest of the positions are at OL\n        # This might be flawed but it looks like RB, TE and WR are always listed in the personnel\n        if sub_total < 11:\n            diff = 11 - sub_total\n            if not qb_listed:\n                qb += 1\n                diff -= 1\n            ol += diff\n\n        counts = (qb,rb,wr,te,ol)\n\n        return counts\n    \n    def personnel_features(df):\n        personnel = df[['GameId','PlayId','OffensePersonnel','DefensePersonnel']].drop_duplicates()\n        personnel['DefensePersonnel'] = personnel['DefensePersonnel'].apply(lambda x: split_personnel(x))\n        personnel['DefensePersonnel'] = personnel['DefensePersonnel'].apply(lambda x: defense_formation(x))\n        personnel['num_DL'] = personnel['DefensePersonnel'].apply(lambda x: x[0])\n        personnel['num_LB'] = personnel['DefensePersonnel'].apply(lambda x: x[1])\n        personnel['num_DB'] = personnel['DefensePersonnel'].apply(lambda x: x[2])\n\n        personnel['OffensePersonnel'] = personnel['OffensePersonnel'].apply(lambda x: split_personnel(x))\n        personnel['OffensePersonnel'] = personnel['OffensePersonnel'].apply(lambda x: offense_formation(x))\n        personnel['num_RB'] = personnel['OffensePersonnel'].apply(lambda x: x[1])\n        personnel['num_WR'] = personnel['OffensePersonnel'].apply(lambda x: x[2])\n        personnel['num_TE'] = personnel['OffensePersonnel'].apply(lambda x: x[3])\n        personnel['num_OL'] = personnel['OffensePersonnel'].apply(lambda x: x[4])\n\n        # Let's create some features to specify if the OL is covered\n        personnel['OL_diff'] = personnel['num_OL'] - personnel['num_DL']\n        personnel['OL_TE_diff'] = (personnel['num_OL'] + personnel['num_TE']) - personnel['num_DL']\n        # Let's create a feature to specify if the defense is preventing the run\n        # Let's just assume 7 or more DL and LB is run prevention\n        personnel['run_def'] = (personnel['num_DL'] + personnel['num_LB'] > 6).astype(int)\n\n        personnel.drop(['OffensePersonnel','DefensePersonnel'], axis=1, inplace=True)\n        \n        return personnel\n\n    def combine_features(relative_to_back, defense, static, personnel, deploy=deploy):\n        df = pd.merge(relative_to_back,defense,on=['GameId','PlayId'],how='inner')\n        df = pd.merge(df,static,on=['GameId','PlayId'],how='inner')\n        df = pd.merge(df,personnel,on=['GameId','PlayId'],how='inner')\n\n        if not deploy:\n            df = pd.merge(df, outcomes, on=['GameId','PlayId'], how='inner')\n\n        return df\n    \n    yardline = update_yardline(df)\n    df = update_orientation(df, yardline)\n    back_feats = back_features(df)\n    rel_back = features_relative_to_back(df, back_feats)\n    def_feats = defense_features(df)\n    static_feats = static_features(df)\n    personnel = personnel_features(df)\n    basetable = combine_features(rel_back, def_feats, static_feats, personnel, deploy=deploy)\n    return basetable","3dff4cf5":"outcomes = train[['GameId','PlayId','Yards']].drop_duplicates()\noutcomes","7faa327c":"train_basetable = create_features(train, False)","76a80377":"play_number = False\nif play_number:\n    train_basetable['play_number'] = train_basetable.groupby('GameId').cumcount()\n    train_basetable[['GameId', 'PlayId', 'play_number']].tail(100)","f3fae94c":"play_number_team = False\nif play_number_team:\n    train_basetable['play_number_team'] = train_basetable.groupby(['GameId', 'PossessionTeam']).cumcount()\n    train_basetable[['GameId', 'PlayId', 'PossessionTeam', 'play_number_team']].tail(100)","6329d5b4":"last6 = False\nif last6:\n    train_basetable['last6'] = train_basetable['PlayId'] % 1000000\n    train_basetable['last6_diff'] = train_basetable.groupby('GameId')['last6'].diff().fillna(0).astype(int)\n    train_basetable.drop(columns=['last6'], inplace=True)","57c890dc":"pdf, edges = np.histogram(train['Yards'], bins=199, range=(-99, 100), density=True)\ncdf = pdf.cumsum().clip(0, 1)\ncdf_df = pd.DataFrame(data=cdf.reshape(-1, 1).T, \n                      columns=['Yards'+str(i) for i in range(-99, 100)])\ncdf = cdf_df.values.reshape(-1,)","1c74fb14":"cdf","6033fb58":"all_teams = train['PossessionTeam'].unique()\nall_teams","f1e28fd5":"cdf_team = {}\nfor t in all_teams:\n    df_team = train[train['PossessionTeam'] == t]\n    pdf, edges = np.histogram(df_team['Yards'], bins=199, range=(-99, 100), density=True)\n    cdf = pdf.cumsum().clip(0, 1)\n    cdf_df = pd.DataFrame(data=cdf.reshape(-1, 1).T, \n                          columns=['Yards'+str(i) for i in range(-99, 100)])\n    cdf_team[t] = cdf_df.values.reshape(-1,)","c593c57e":"cdf_team['NE']","6e288831":"def crps(y_true, y_pred):\n    y_true = np.clip(np.cumsum(y_true, axis=1), 0, 1)\n    y_pred = np.clip(np.cumsum(y_pred, axis=1), 0, 1)\n    return ((y_true - y_pred) ** 2).sum(axis=1).sum(axis=0) \/ (199 * y_true.shape[0]) ","e9a2ccbf":"def process_two(t_):\n    t_['fe1'] = pd.Series(np.sqrt(np.absolute(np.square(t_.X.values) - np.square(t_.Y.values))))\n    t_['fe5'] = np.square(t_['S'].values) + 2 * t_['A'].values * t_['Dis'].values  # N\n    t_['fe7'] = np.arccos(np.clip(t_['X'].values \/ t_['Y'].values, -1, 1))  # N\n    t_['fe8'] = t_['S'].values \/ np.clip(t_['fe1'].values, 0.6, None)\n    radian_angle = (90 - t_['Dir']) * np.pi \/ 180.0\n    t_['fe10'] = np.abs(t_['S'] * np.cos(radian_angle))\n    t_['fe11'] = np.abs(t_['S'] * np.sin(radian_angle))\n    return t_","5b3dc854":"train_basetable.columns","fff43260":"X = train_basetable.copy()","d4f8b663":"X = process_two(X)","33e8edac":"yards = X.Yards\nyards.value_counts()","abb94f89":"X.drop(['GameId', 'PlayId', 'Yards'], axis=1, inplace=True)","cbc7b024":"X.sample(20)","293e2dfe":"y = np.zeros((yards.shape[0], 199))\nfor idx, target in enumerate(list(yards)):\n    y[idx][99 + target] = 1","20cd2057":"len(y)","d8ddbec1":"def train_model(endog, exog, p=1, d=0, q=0):\n    # optimize p, d, q\n    pass\n    # train model\n    smax = SARIMAX(endog, exog, order=(p, d, q))\n    model = smax.fit(method='powell')\n    # get feature importances\n    features_html = model.summary().tables[1].as_html()\n    df_feat = pd.read_html(features_html)[0].iloc[1:, :]\n    df_feat.columns = ['feature', 'coef', 'std err', 'Z', 'P>|z|', 'ci_low', 'ci_high']\n    # return predictions and feature importances\n    return model, df_feat","784dbb17":"models = {}\nfor t in all_teams:\n    X_team = X[X['PossessionTeam'] == t]\n    X_team.drop(columns=['PossessionTeam'], inplace=True)\n    y_team = yards[X_team.index].reset_index(drop=True)\n    X_team.reset_index(drop=True, inplace=True)\n    training_size = len(X_team)\n    print(\"Training %d rows for %s Model\" % (training_size, t))\n    model, dfi = train_model(y_team, X_team)\n    models[t] = [model, training_size, dfi]","df400c84":"models","09b8904b":"models['CAR'][2].sort_values(by='P>|z|')","a0db4c05":"def get_score(y_pred, cdf, w, dist_to_end):\n    y_pred = int(y_pred)\n    if y_pred == w:\n        y_pred_array = cdf.copy()\n    elif y_pred - w > 0:\n        y_pred_array = np.zeros(199)\n        y_pred_array[(y_pred-w):] = cdf[:(-(y_pred-w))].copy()\n    elif w - y_pred > 0:\n        y_pred_array = np.ones(199)\n        y_pred_array[:(y_pred-w)] = cdf[(w-y_pred):].copy()\n    y_pred_array[-1] = 1\n    y_pred_array[(dist_to_end + 99):] = 1\n    return y_pred_array","0c6ce82c":"def make_prediction(model, exogp, exog_len):\n    prediction = model.predict(exog_len, exog_len, exog=exogp)\n    return prediction","a3595503":"test_team = 'NYG'\nX_team = X[X['PossessionTeam'] == test_team]\nX_team.drop(columns=['PossessionTeam'], inplace=True)\ny_team = yards[X_team.index].reset_index(drop=True)\nX_team.reset_index(drop=True, inplace=True)","a2c9bb48":"index = 350\ny_pred = make_prediction(models[test_team][0], X_team[index:index+1], models[test_team][1])","fff84ef5":"y_pred.tolist()[0], y_team[index]","7be33785":"iter_test = env.iter_test()","2075e2ab":"for (test_df, sample_prediction_df) in tqdm.tqdm(iter_test):\n    # get possession team for time series\n    pteam = test_df['PossessionTeam'].iloc[0]\n    sarimax = False\n    if sarimax:\n        # calculate distance to end for distribution\n        test_df['own_field'] = (test_df['FieldPosition'] == test_df['PossessionTeam']).astype(int)\n        dist_to_end_test = test_df.apply(lambda x:(100 - x.loc['YardLine']) if x.loc['own_field']==1 else x.loc['YardLine'], axis=1)\n        test_df.drop(columns=['own_field'], inplace=True)\n        # extract features from test frame\n        X_test = create_features(test_df, deploy=True)\n        X_test = process_two(X_test)\n        X_test.drop(['GameId', 'PlayId', 'PossessionTeam'], axis=1, inplace=True)\n        # make prediction\n        model = models[pteam][0]\n        tsize = models[pteam][1]\n        y_pred = make_prediction(model, X_test, tsize)\n        print(\"%s Prediction: %f\" % (pteam, y_pred.values[0]))\n        pred_data = list(get_score(y_pred, cdf, 4, dist_to_end_test.values[0]))\n        pred_data = np.array(pred_data).reshape(1, 199)\n        pred_df = pd.DataFrame(index = sample_prediction_df.index, \\\n                               columns = sample_prediction_df.columns, \\\n                               data = pred_data)\n        env.predict(pred_df)\n    else:\n        sample_prediction_df.iloc[0, :] = cdf_team[pteam]\n        env.predict(sample_prediction_df)\n    # augment X with X_test and yards with y_pred for next prediction\n    pass","3db565ec":"env.write_submission_file()","eed4cd10":"### Model","7bcdd87b":"### Initialize Distribution (y)","b99e73f2":"### Predictions","b82e8ad4":"## Model","02c7b6e3":"### Evaluation Metric","8c2a3373":"### Training Data (X) and Yards (y)","572fa865":"## Feature Engineering","4d785fc1":"### Training Data Exploration","5059f7bf":"## SARIMAX Model[](http:\/\/)","5af2bf5b":"### Imports and Options","df042e66":"# End of Notebook","a98a529d":"### Cumulative Distribution Function","98cc5f8a":"Train Model per Team (per game, per play)\n\n* Records: (1870, **22**)\n* PlayId: (85 plays, 1)\n* Team: per **player** (2, 2)\n* X: per **player** (1631, 22)\n* Y: per **player** (1337, 22)\n* S: per **player** (470, 21)\n* A: per **player** (323, 20)\n* Dis: per **player** (60, 16)\n* Orientation: per **player** (1808, 22)\n* Dir: per **player** (1816, 22)\n* NflId: per **player** (71, 22)\n* DisplayName: per **player** (71, 22)\n* JerseyNumber: per **player** (55, 21)\n* Season: (1, 1)\n* YardLine: (36, 1)\n* Quarter: (5, 1)\n* GameClock: (82, 1)\n* PossessionTeam: per play (2, 1)\n* Down: per play (4, 1)\n* Distance: per play (15, 1)\n* FieldPosition: per play (3, 1)\n* HomeScoreBeforePlay: per play (2, 1)\n* VisitorScoreBeforePlay: per play (2, 1)\n* NflIdRusher: per **player** (5, 1)\n* OffenseFormation: (4, 1)\n* OffensePersonnel: (7, 1)\n* DefendersInTheBox: (6, 1)\n* DefensePersonnel: (6, 1)\n* PlayDirection: (2, 1)\n* TimeHandoff: (85 plays, 1)\n* TimeSnap: (85 plays, 1)\n* **Yards**: (18, 1)\n* PlayerHeight: per **player** (12, 9)\n* PlayerWeight: per **player** (52, 21)\n* PlayerBirthDate: per **player** (70, 22)\n* PlayerCollegeName: per **player** (55, 16)\n* Position: per **player** (19, 14)\n* HomeTeamAbbr: (1, 1)\n* VisitorTeamAbbr: (1, 1)\n* Week: (1, 1)\n* Stadium: (1, 1)\n* Location: (1, 1)\n* StadiumType: (1, 1)\n* Turf: (1, 1)\n* GameWeather: (1, 1)\n* Temperature: (1, 1)\n* Humidity: (1, 1)\n* WindSpeed: (1, 1)\n* WindDirection: (1, 1)\n","3fc038b6":"### Initialize NFL Environment"}}