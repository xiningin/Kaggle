{"cell_type":{"df7d679b":"code","7aa45535":"code","a04b5c63":"code","bbcfa1ab":"code","48af475b":"code","19b56994":"code","b0618393":"code","6f71b55b":"code","110d92bd":"code","b062e203":"code","ea18a1cf":"code","0318f644":"code","277bdf07":"code","3e6a0377":"code","3f2da95f":"code","fe011474":"code","5ccd21d7":"code","aa188f29":"code","dce2937c":"code","f2051d7c":"code","11aace39":"code","d14587a1":"code","73c6b487":"code","871cdd87":"code","cd6d166f":"code","159314f8":"code","f45d67b7":"code","1b1b95d9":"code","27a457a3":"code","572f1958":"code","faefcd86":"code","ee7f09c4":"code","b614d811":"code","65c76741":"code","ed3980db":"code","a8567252":"code","8e9e41a8":"code","3b638d0b":"code","ad5b8f1a":"code","fa94f2c9":"code","97d48919":"code","373b47f9":"code","f203f27b":"code","526363ec":"code","d66fc182":"code","38172d70":"code","0c7271e9":"code","82c80794":"code","b5ccaec9":"code","32460699":"code","78ffb03b":"code","392331c7":"code","ac8d4432":"code","046e26f6":"code","13b99801":"code","a2166242":"code","1a814b57":"code","1b8af3ab":"code","26a221dc":"code","fde571c0":"code","116207fc":"code","ddd5f72a":"code","add5ca34":"code","ec07ebba":"code","2197b6ba":"code","89cc92c3":"markdown","572cfa9b":"markdown","36de2c5a":"markdown","a29a5c5b":"markdown","7a267df1":"markdown"},"source":{"df7d679b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import GridSearchCV\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","7aa45535":"train_data=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_data=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","a04b5c63":"#Check the list of columns with missing values in the data\ntrain_data.columns[train_data.isnull().any()]","bbcfa1ab":"#Check the datatype of eachcolumn\ntrain_data.dtypes","48af475b":"#Getting count of null values for each column\ntrain_data.isnull().sum(axis=0)","19b56994":"#Counting the number of times each value has occured in the column\ntrain_data['Embarked'].value_counts()","b0618393":"#Since most frequent value is S i.e. Southampton, we replace all null values in column Embarked with Southhampton\ntrain_data=train_data.fillna({'Embarked':'S'})","6f71b55b":"#Computing the sum of null values of each column\ntrain_data.isnull().sum(axis = 0)","110d92bd":"#Computing percentage of null entries in the Cabin column for training set\n(687\/len(train_data))*100","b062e203":"#Computing percentage of null entries in the Cabin column for the test set\n(327\/len(test_data))*100","ea18a1cf":"train_data.drop(columns=['Cabin'],inplace=True)","0318f644":"test_data.drop(columns=['Cabin'],inplace=True)","277bdf07":"#Computing the sum of null values of each column\ntrain_data.isnull().sum(axis = 0)","3e6a0377":"#Computing the sum of null values of each column\ntest_data.isnull().sum(axis = 0)","3f2da95f":"def get_Title(name):\n    if 'Mr.'in name:\n        return 'Mr'\n    elif 'Miss.' in name:\n        return 'Miss'\n    elif 'Ms.' in name:\n        return 'Miss'\n    elif 'Mme.' in name:\n        return 'Mrs'\n    elif 'Mlle.' in name:\n        return 'Miss'\n    elif 'Master.' in name:\n        return 'Master'\n    elif 'Mrs.' in name:\n        return 'Mrs'","fe011474":"train_data['Title']=[get_Title(item) for item in train_data['Name']]\ntest_data['Title']=[get_Title(item) for item in test_data['Name']]","5ccd21d7":"test_data.head(20)","aa188f29":"#checking details of females with missing Titles for train data\nfor ind,val in enumerate(train_data['Title']):\n    if val==None and train_data.loc[ind,'Sex']=='female':\n        print(train_data.loc[ind,'Name'], train_data.loc[ind,'Age'])","dce2937c":"#Checking Details of male with Missing Titles for train data\nfor ind,val in enumerate(train_data['Title']):\n    if val==None and train_data.loc[ind,'Sex']=='male':\n        print(train_data.loc[ind,'Name'], train_data.loc[ind,'Age'])","f2051d7c":"#Filling in the Missing Titles for train data\nfor index,value in enumerate(train_data['Title']):\n    if value==None:\n        if train_data.loc[index,'Sex']=='male' and train_data.loc[index,'Age']!='NaN':\n            if train_data.loc[index,'Age']<14:\n                train_data.loc[index,'Title']='Master'\n            else:\n                train_data.loc[index,'Title']='Mr'\n        elif train_data.loc[index,'Sex']=='female' and train_data.loc[index,'Age']!='NaN':\n            train_data.loc[index,'Title']='Miss'","11aace39":"list(train_data['Title'])","d14587a1":"#checking details of females with missing Titles for test data\nfor ind,val in enumerate(test_data['Title']):\n    if val==None and test_data.loc[ind,'Sex']=='female':\n        print(test_data.loc[ind,'Name'], test_data.loc[ind,'Age'])","73c6b487":"#Checking Details of male with Missing Titles for test data\nfor ind,val in enumerate(test_data['Title']):\n    if val==None and test_data.loc[ind,'Sex']=='male':\n        print(test_data.loc[ind,'Name'], test_data.loc[ind,'Age'])","871cdd87":"#Filling in the Missing Titles for test data\nfor index,value in enumerate(test_data['Title']):\n    if value==None:\n        if test_data.loc[index,'Sex']=='male' and test_data.loc[index,'Age']!='NaN':\n            if test_data.loc[index,'Age']<14:\n                test_data.loc[index,'Title']='Master'\n            else:\n                test_data.loc[index,'Title']='Mr'\n        elif test_data.loc[index,'Sex']=='female' and test_data.loc[index,'Age']!='NaN':\n            test_data.loc[index,'Title']='Miss'","cd6d166f":"#calculating Median values of Age for Each group in train file\nage_group=train_data.groupby('Title').Age.agg('median')\nage_group","159314f8":"#Filling the missing values in the age column with the median value of age for each group in train data\nfor ind,age in enumerate(train_data['Age']):\n    if str(age).upper()=='NAN' or age==None:\n        train_data.loc[ind,'Age']=age_group[train_data.loc[ind,'Title']]","f45d67b7":"#Computing the sum of null values of each column\ntrain_data.isnull().sum(axis = 0)","1b1b95d9":"#This calculation is not required as we are filling up the missing values with the median values of the train data itself\n#calculating Median values of Age for Each group in test data\n#age_group_test=test_data.groupby('Title').Age.agg('median')\n#age_group_test","27a457a3":"#Filling the missing values in the age column with the median value of age for each group calculated from train data\nfor ind,age in enumerate(test_data['Age']):\n    if str(age).upper()=='NAN' or age==None:\n        test_data.loc[ind,'Age']=age_group[test_data.loc[ind,'Title']]  #Changed on 10-12-19 by shri","572f1958":"#Computing the sum of null values of each column\ntest_data.isnull().sum(axis = 0)","faefcd86":"train_data['Age'].plot.hist()","ee7f09c4":"test_data['Age'].plot.hist()","b614d811":"#Converting categorical variables into numeric by encoding\ntrain_data['Sex']=train_data['Sex'].replace(to_replace=['male','female'],value=[1,0])","65c76741":"#Converting categorical variables into numeric by encoding\ntest_data['Sex']=test_data['Sex'].replace(to_replace=['male','female'],value=[1,0])","ed3980db":"train_data.dtypes","a8567252":"#Categorizing data with label\nencode=LabelEncoder()\ntrain_data['Ticket_categorized']=encode.fit_transform(train_data['Ticket'])\ntest_data['Ticket_categorized']=encode.fit_transform(test_data['Ticket'])\ntrain_data.head()","8e9e41a8":"test_data.head()","3b638d0b":"train_data['Embarked']=train_data['Embarked'].astype('category')\ntrain_data['Embarked_coded']=train_data['Embarked'].cat.codes\ntest_data['Embarked']=test_data['Embarked'].astype('category')\ntest_data['Embarked_coded']=test_data['Embarked'].cat.codes","ad5b8f1a":"test_data.isnull().sum(axis=0)","fa94f2c9":"test_data=test_data.fillna({'Fare':0})","97d48919":"train_data.dtypes","373b47f9":"#Assigning training data to X_train\nX_train=train_data[['PassengerId','Pclass','Sex','Age','SibSp','Parch','Ticket_categorized','Fare','Embarked_coded']]\ny_train=train_data['Survived']","f203f27b":"test_data.columns","526363ec":"X_test=test_data[['PassengerId','Pclass','Sex','Age','SibSp','Parch','Ticket_categorized','Fare','Embarked_coded']]","d66fc182":"from sklearn.preprocessing import StandardScaler\nscaler=StandardScaler()\nX_train=scaler.fit_transform(X_train)\nX_test=scaler.fit_transform(X_test)","38172d70":"X_train","0c7271e9":"#GridSearchCV Implementing for Log Regression Model\nparameters={\"C\":[0.01,0.1,0.5,1]}","82c80794":"#Initializing the Logistic Regrssion Model\nlogis=LogisticRegression()\nlogis_cv=GridSearchCV(estimator=logis,param_grid=parameters,\n                     scoring='accuracy',cv=5,\n                     return_train_score=True)\n#Fitting our model on the training Data\n#logis.fit(X_train,y_train)","b5ccaec9":"#Fitting our model on the training Data\nlogis_cv.fit(X_train,y_train)","32460699":"logis_cv.cv_results_","78ffb03b":"# results of grid search CV\ncv_results = pd.DataFrame(logis_cv.cv_results_)\ncv_results","392331c7":"help(logis_cv)","ac8d4432":"#Plotting Test vs Train score graph\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(8,8))\nplt.plot(cv_results['param_C'],cv_results['mean_test_score'])\nplt.plot(cv_results['param_C'],cv_results['mean_train_score'])\nplt.xlabel('C')\nplt.ylabel('Accuracy')\nplt.legend(['test accuracy', 'train accuracy'])#loc='upper left')","046e26f6":"print(logis_cv.best_score_)\nprint(logis_cv.best_params_['C'])","13b99801":"from sklearn import svm\nsvm_algo=svm.SVC()","a2166242":"#Parameters for GridSearchCV for SVM\nsvm_params={'C':[0.1,0.5,1,10,100]}\nsvm_gs=GridSearchCV(estimator=svm_algo,param_grid=svm_params,\n                   cv=5,verbose=1,return_train_score=True)","1a814b57":"svm_gs.fit(X_train,y_train)","1b8af3ab":"svm_gs.cv_results_","26a221dc":"svm_results=pd.DataFrame(svm_gs.cv_results_)\nsvm_results","fde571c0":"print(svm_gs.best_score_)\nprint(svm_gs.best_params_['C'])","116207fc":"#Plotting Test vs Train score graph\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(8,8))\nplt.plot(svm_results['param_C'],svm_results['mean_test_score'])\nplt.plot(svm_results['param_C'],svm_results['mean_train_score'])\nplt.xlabel('C')\nplt.ylabel('Accuracy')\nplt.legend(['test accuracy', 'train accuracy'])#loc='upper left')","ddd5f72a":"#fitting the final Logistic Regression model with the best hyperparameter value\n#model=LogisticRegression(C=logis_cv.best_params_['C'])\n#model.fit(X_train,y_train)","add5ca34":"#Fitting the Final Model with the best Hyper parameter\nmodel=svm.SVC(svm_gs.best_params_['C'])\nmodel.fit(X_train,y_train)","ec07ebba":"#Making predictions with a Logistic regression model\nlabels=model.predict(X_test)\noutput_label=pd.DataFrame({'PassengerId':test_data.PassengerId,'Survived':labels})","2197b6ba":"output_label.to_csv('mysubmission.csv',index=False)\nprint('Your submissions file was successfully saved!')","89cc92c3":"Lets fit a Logistic Regression Model to predict whether a passenger survived or not","572cfa9b":"Since the Cabin column has more than 75% of null values, we will drop the column","36de2c5a":"We shall now try and fit an SVM to the data to see if it improves accuracy","a29a5c5b":"Imputing Missing values for the age column","7a267df1":"Standardizing using StandardScalar"}}