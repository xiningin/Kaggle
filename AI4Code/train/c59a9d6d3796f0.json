{"cell_type":{"0339cb40":"code","8951766e":"code","ad12b1df":"code","1d53c83d":"code","06f448eb":"code","72f6b1d5":"code","d221e3c8":"code","f065c404":"code","1f33f362":"code","20ed5b00":"code","24fed0f7":"code","afb90ddc":"code","8c439cf4":"code","67baa000":"code","36a052f0":"code","6e2c34ec":"code","85f324ce":"code","15ffea23":"code","bc48470a":"code","d6bfefc5":"code","0908034d":"code","b304765d":"code","af6d6e4a":"markdown","35d69112":"markdown","9078a6bb":"markdown","f93143b8":"markdown","160f42e1":"markdown","7c0c299c":"markdown","7021175c":"markdown","54e93179":"markdown","202f51fa":"markdown","8e4a3a0e":"markdown","45b429c3":"markdown"},"source":{"0339cb40":"import numpy as np  # linear algebra\nimport pandas as pd  # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import LabelEncoder  # for convert those\nfrom sklearn.preprocessing import StandardScaler  # for scale\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\n# our models\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC","8951766e":"rawData = pd.read_csv('..\/input\/mushroom-classification\/mushrooms.csv')","ad12b1df":"rawData","1d53c83d":"rawData.head()","06f448eb":"rawData.describe()","72f6b1d5":"rawData['class'].unique()","d221e3c8":"rawData['class'].value_counts()","f065c404":"count = rawData['class'].value_counts()\nplt.figure(figsize=(8, 7))\nsns.barplot(x=count.index, y=count.values, alpha=0.8, palette=\"prism\")\nplt.ylabel('Count', fontsize=12)\nplt.xlabel('Class', fontsize=12)\nplt.title('Number of poisonous\/edible mushrooms')\n# plt.savefig(\"mushrooms1.png\", format='png', dpi=500)\nplt.show()","1f33f362":"cap_colors = rawData['cap-color'].value_counts()\nm_height = cap_colors.values.tolist()            # Provides numerical values\ncap_colors.axes                                  # Provides row labels\ncap_color_labels = cap_colors.axes[0].tolist()   # Converts index object to list\nind = np.arange(10)                              # the x locations for the groups\nwidth = 0.7                                      # the width of the bars\ncolors = ['#DEB887', '#778899', '#DC143C', '#FFFF99', '#f8f8ff', '#F0DC82', '#FF69B4', '#D22D1E', '#C000C5', 'g']\n\nfig, ax = plt.subplots(figsize=(10, 7))\nmushroom_bars = ax.bar(ind, m_height, width, color=colors)\n\n# Add some text for labels, title and axes ticks\nax.set_xlabel(\"Cap Color\", fontsize=20)\nax.set_ylabel('Quantity', fontsize=20)\nax.set_title('Mushroom Cap Color Quantity', fontsize=22)\nax.set_xticks(ind)                               # Positioning on the x axis\nax.set_xticklabels(('brown', 'gray', 'red', 'yellow', 'white', 'buff', 'pink', 'cinnamon', 'purple', 'green'),\n                   fontsize=12)\n\n\n# Auto-labels the number of mushrooms for each bar color.\ndef autolabel(rects, fontsize=14):\n    \"\"\"\n    Attach a text label above each bar displaying its height\n    \"\"\"\n    for rect in rects:\n        height = rect.get_height()\n        ax.text(rect.get_x() + rect.get_width() \/ 2., 1 * height, '%d' % int(height),\n                ha='center', va='bottom', fontsize=fontsize)\n\n\nautolabel(mushroom_bars)\nplt.show()","20ed5b00":"mappings = list()\nencoder = LabelEncoder()\n\n# given feature to be is only numaric label so create dictionary that convert text labels to numeric labels\nfor column in range(len(rawData.columns)):\n    rawData[rawData.columns[column]] = encoder.fit_transform(rawData[rawData.columns[column]])\n    mappings_dict = {index: label for index, label in enumerate(encoder.classes_)}\n    mappings.append(mappings_dict)","24fed0f7":"mappings","afb90ddc":"y = rawData['class']\nX = rawData.drop('class', axis=1).values\n\n\nscaler = StandardScaler()\nX = pd.DataFrame(scaler.fit_transform(X), columns=rawData.columns[rawData.columns != 'class'])\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8)","8c439cf4":"X","67baa000":"log_model = LogisticRegression()\nsvm_model = SVC(C=1.0, kernel='rbf')","36a052f0":"np.sum(y) \/ len(y)","6e2c34ec":"log_model.fit(X_train, y_train)\nsvm_model.fit(X_train, y_train)","85f324ce":"print(f\"---Logistic Regression Test Accuracy: {log_model.score(X_test, y_test)}\")","15ffea23":"y_pred_lr = log_model.predict(X_test)\n\ncm = confusion_matrix(y_test, y_pred_lr)\nx_axis_labels = [\"Edible\", \"Poisonous\"]\ny_axis_labels = [\"Edible\", \"Poisonous\"]\nf, ax = plt.subplots(figsize=(7, 7))\nsns.heatmap(cm, annot=True, linewidths=0.2, linecolor=\"black\", fmt=\".0f\", ax=ax, cmap=\"Greens\",\n            xticklabels=x_axis_labels, yticklabels=y_axis_labels)\nplt.xlabel(\"PREDICTED LABEL\")\nplt.ylabel(\"TRUE LABEL\")\nplt.title('Confusion Matrix for Logistic Regression Classifier')\n# plt.savefig(\"lrcm.png\", format='png', dpi=500, bbox_inches='tight')\nplt.show()","bc48470a":"print(f\"Support Vector Machine Test Accuracy: {svm_model.score(X_test, y_test)}\")","d6bfefc5":"svm = SVC(random_state=42, gamma=\"auto\")\nsvm.fit(X_train, y_train)\ny_pred_svm = svm.predict(X_test)\ncm = confusion_matrix(y_test, y_pred_svm)\nx_axis_labels = [\"Edible\", \"Poisonous\"]\ny_axis_labels = [\"Edible\", \"Poisonous\"]\nf, ax = plt.subplots(figsize=(7, 7))\nsns.heatmap(cm, annot=True, linewidths=0.2, linecolor=\"black\", fmt=\".0f\", ax=ax, cmap=\"YlGnBu\",\n            xticklabels=x_axis_labels, yticklabels=y_axis_labels)\nplt.xlabel(\"PREDICTED LABEL\")\nplt.ylabel(\"TRUE LABEL\")\nplt.title('Confusion Matrix for SVM Classifier')\n# plt.savefig(\"svmcm.png\", format='png', dpi=500, bbox_inches='tight')\nplt.show()","0908034d":"X_test.shape","b304765d":"corr = rawData.corr()\nsns.heatmap(corr)","af6d6e4a":"# **Modeling**","35d69112":"# **Obtain total number of mushrooms for each 'cap-color'**","9078a6bb":"**SVM Classification**","f93143b8":"**Training**","160f42e1":"# **Unique occurrences of \u2018class\u2019 column**","7c0c299c":"# **Visualization**","7021175c":"**Classification Methods**","54e93179":"# **Examining the Data**","202f51fa":"# **Setting**","8e4a3a0e":"# **Preprocessing**","45b429c3":"**Logistic Regression Classification**"}}