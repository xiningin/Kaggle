{"cell_type":{"2318992c":"code","a295c4ee":"code","d8bd4ae8":"code","43bd7f5b":"code","5c074242":"code","19c4d9d7":"code","ccbeb040":"code","d13d988a":"code","61f5344c":"code","7f558967":"code","824f8187":"code","71d278ff":"code","43d4f3a7":"code","4aade74d":"code","896420d1":"code","9ace5a21":"code","6fd829ac":"code","3b52fa78":"code","3b8e8029":"code","99ff42ee":"code","aa256842":"code","08d12ab1":"markdown","06586098":"markdown","effffcf9":"markdown"},"source":{"2318992c":"DEVICE = \"TPU\"\n\nCFG = dict(\n    net_count         =  6,\n    net_list          = [4,5,6],\n    batch_size        =  128,\n    \n    read_size         = 192, \n    crop_size         = 192, \n    net_size          = 192, \n    \n    tab_feats         = ['age_scaled',\n                        'sex_female', \n                        'sex_male', \n                        'sex_unknown', \n                        'site_head\/neck', \n                        'site_lower extremity', \n                        'site_oral\/genital',\n                        'site_palms\/soles',\n                        'site_torso',\n                        'site_unknown',\n                        'site_upper extremity',\n                        ],\n\n    N_TAB_FEATS       = 11,\n\n    LR_START          =   0.000005,\n    LR_MAX            =   0.000030,\n    LR_MIN            =   0.000001,\n    LR_RAMPUP_EPOCHS  =   5,\n    LR_SUSTAIN_EPOCHS =   0,\n    LR_EXP_DECAY      =   0.8,\n    epochs            =  16,\n    \n    rot               = 180.0,\n    shr               =   2.0,\n    hzoom             =   8.0,\n    wzoom             =   8.0,\n    hshift            =   8.0,\n    wshift            =   8.0,\n\n    optimizer         = 'adam',\n    label_smooth_fac  =   0.05,\n    \n    tta_steps         =  25    \n)","a295c4ee":"!pip install -q efficientnet\n","d8bd4ae8":"from pathlib import Path\nimport os, random, re, math, time\nrandom.seed(a=42)\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\nimport tensorflow.keras.backend as K\nimport efficientnet.tfkeras as efn\n\nimport PIL\n\n\nfrom tqdm import tqdm","43bd7f5b":"tpu = tf.distribute.cluster_resolver.TPUClusterResolver()  # TPU detection\nprint('Running on TPU ', tpu.cluster_spec().as_dict()['worker'])\n\ntf.config.experimental_connect_to_cluster(tpu)\ntf.tpu.experimental.initialize_tpu_system(tpu)\nstrategy = tf.distribute.experimental.TPUStrategy(tpu)\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","5c074242":"if DEVICE == \"TPU\":\n    print(\"connecting to TPU...\")\n    try:\n        tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n        print('Running on TPU ', tpu.master())\n    except ValueError:\n        print(\"Could not connect to TPU\")\n        tpu = None\n\n    if tpu:\n        try:\n            print(\"initializing  TPU ...\")\n            tf.config.experimental_connect_to_cluster(tpu)\n            tf.tpu.experimental.initialize_tpu_system(tpu)\n            strategy = tf.distribute.experimental.TPUStrategy(tpu)\n            print(\"TPU initialized\")\n        except:\n            print(\"failed to initialize TPU\")\n    else:\n        DEVICE = \"GPU\"\n\nif DEVICE != \"TPU\":\n    print(\"Using default strategy for CPU and single GPU\")\n    strategy = tf.distribute.get_strategy()\n\nif DEVICE == \"GPU\":\n    print(\"Num GPUs Available: \", len(tf.config.experimental.list_physical_devices('GPU')))\n    \n\nAUTO     = tf.data.experimental.AUTOTUNE\nREPLICAS = strategy.num_replicas_in_sync\nprint(f'REPLICAS: {REPLICAS}')","19c4d9d7":"# This data comes from ....... KagleDataset. \nGCS_PATH = {}\nfrom kaggle_datasets import KaggleDatasets\nGCS_PATH['all'] = KaggleDatasets().get_gcs_path('elemelki-192-ext-bcn-tfrecords')\nprint(GCS_PATH['all'])\n\nfiles_train = np.sort(np.array(tf.io.gfile.glob(GCS_PATH['all'] + '\/train\/*.tfrec')))\nfiles_test  = np.sort(np.array(tf.io.gfile.glob(GCS_PATH['all'] + '\/test\/*.tfrec')))\n\n\ndef count_data_items(filenames):\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) \n         for filename in filenames]\n    return np.sum(n)\nprint(files_train)\nprint(files_test)","ccbeb040":"def get_mat(rotation, shear, height_zoom, width_zoom, height_shift, width_shift):\n    # returns 3x3 transformmatrix which transforms indicies\n        \n    # CONVERT DEGREES TO RADIANS\n    rotation = math.pi * rotation \/ 180.\n    shear    = math.pi * shear    \/ 180.\n\n    def get_3x3_mat(lst):\n        return tf.reshape(tf.concat([lst],axis=0), [3,3])\n    \n    # ROTATION MATRIX\n    c1   = tf.math.cos(rotation)\n    s1   = tf.math.sin(rotation)\n    one  = tf.constant([1],dtype='float32')\n    zero = tf.constant([0],dtype='float32')\n    \n    rotation_matrix = get_3x3_mat([c1,   s1,   zero, \n                                   -s1,  c1,   zero, \n                                   zero, zero, one])    \n    # SHEAR MATRIX\n    c2 = tf.math.cos(shear)\n    s2 = tf.math.sin(shear)    \n    \n    shear_matrix = get_3x3_mat([one,  s2,   zero, \n                                zero, c2,   zero, \n                                zero, zero, one])        \n    # ZOOM MATRIX\n    zoom_matrix = get_3x3_mat([one\/height_zoom, zero,           zero, \n                               zero,            one\/width_zoom, zero, \n                               zero,            zero,           one])    \n    # SHIFT MATRIX\n    shift_matrix = get_3x3_mat([one,  zero, height_shift, \n                                zero, one,  width_shift, \n                                zero, zero, one])\n    \n    return K.dot(K.dot(rotation_matrix, shear_matrix), \n                 K.dot(zoom_matrix,     shift_matrix))\n\n\ndef transform(image, cfg):    \n    # input image - is one image of size [dim,dim,3] not a batch of [b,dim,dim,3]\n    # output - image randomly rotated, sheared, zoomed, and shifted\n    DIM = cfg[\"read_size\"]\n    XDIM = DIM%2 #fix for size 331\n    \n    rot = cfg['rot'] * tf.random.normal([1], dtype='float32')\n    shr = cfg['shr'] * tf.random.normal([1], dtype='float32') \n    h_zoom = 1.0 + tf.random.normal([1], dtype='float32') \/ cfg['hzoom']\n    w_zoom = 1.0 + tf.random.normal([1], dtype='float32') \/ cfg['wzoom']\n    h_shift = cfg['hshift'] * tf.random.normal([1], dtype='float32') \n    w_shift = cfg['wshift'] * tf.random.normal([1], dtype='float32') \n\n    # GET TRANSFORMATION MATRIX\n    m = get_mat(rot,shr,h_zoom,w_zoom,h_shift,w_shift) \n\n    # LIST DESTINATION PIXEL INDICES\n    x   = tf.repeat(tf.range(DIM\/\/2, -DIM\/\/2,-1), DIM)\n    y   = tf.tile(tf.range(-DIM\/\/2, DIM\/\/2), [DIM])\n    z   = tf.ones([DIM*DIM], dtype='int32')\n    idx = tf.stack( [x,y,z] )\n    \n    # ROTATE DESTINATION PIXELS ONTO ORIGIN PIXELS\n    idx2 = K.dot(m, tf.cast(idx, dtype='float32'))\n    idx2 = K.cast(idx2, dtype='int32')\n    idx2 = K.clip(idx2, -DIM\/\/2+XDIM+1, DIM\/\/2)\n    \n    # FIND ORIGIN PIXEL VALUES           \n    idx3 = tf.stack([DIM\/\/2-idx2[0,], DIM\/\/2-1+idx2[1,]])\n    d    = tf.gather_nd(image, tf.transpose(idx3))\n        \n    return tf.reshape(d,[DIM, DIM,3])","d13d988a":"def dropout(image, DIM=256, PROBABILITY = 0.75, CT = 8, SZ = 0.2):\n    # input image - is one image of size [dim,dim,3] not a batch of [b,dim,dim,3]\n    # output - image with CT squares of side size SZ*DIM removed\n    \n    # DO DROPOUT WITH PROBABILITY DEFINED ABOVE\n    P = tf.cast( tf.random.uniform([],0,1)<PROBABILITY, tf.int32)\n    if (P==0)|(CT==0)|(SZ==0): return image\n    \n    for k in range(CT):\n        # CHOOSE RANDOM LOCATION\n        x = tf.cast( tf.random.uniform([],0,DIM),tf.int32)\n        y = tf.cast( tf.random.uniform([],0,DIM),tf.int32)\n        # COMPUTE SQUARE \n        WIDTH = tf.cast( SZ*DIM,tf.int32) * P\n        ya = tf.math.maximum(0,y-WIDTH\/\/2)\n        yb = tf.math.minimum(DIM,y+WIDTH\/\/2)\n        xa = tf.math.maximum(0,x-WIDTH\/\/2)\n        xb = tf.math.minimum(DIM,x+WIDTH\/\/2)\n        # DROPOUT IMAGE\n        one = image[ya:yb,0:xa,:]\n        two = tf.zeros([yb-ya,xb-xa,3]) \n        three = image[ya:yb,xb:DIM,:]\n        middle = tf.concat([one,two,three],axis=1)\n        image = tf.concat([image[0:ya,:,:],middle,image[yb:DIM,:,:]],axis=0)\n            \n    # RESHAPE HACK SO TPU COMPILER KNOWS SHAPE OF OUTPUT TENSOR \n    image = tf.reshape(image,[DIM,DIM,3])\n    return image","61f5344c":"def parse_features(example):\n  # image data\n    image = example['image'] \n    data={}\n    # bytestring features\n    data['image_name']=image_name=tf.cast(example['image_name'], tf.string)\n    data['patient_id']=tf.cast(example['patient_id'], tf.int64)\n    # integer features\n    data['sex_female']=tf.cast(example['sex_female'], tf.int64)\n    data['sex_male']=tf.cast(example['sex_male'], tf.int64)\n    data['sex_unknown']=tf.cast(example['sex_nan'], tf.int64)\n    data['site_head\/neck']=tf.cast(example['anatom_site_general_challenge_head\/neck'], tf.int64)\n    data['site_lower extremity']=tf.cast(example['anatom_site_general_challenge_lower extremity'], tf.int64)\n    data['site_oral\/genital']=tf.cast(example['anatom_site_general_challenge_oral\/genital'], tf.int64)\n    data['site_palms\/soles']=tf.cast(example['anatom_site_general_challenge_palms\/soles'], tf.int64)\n    data['site_torso']=tf.cast(example['anatom_site_general_challenge_torso'], tf.int64)\n    data['site_unknown']=tf.cast(example['anatom_site_general_challenge_nan'], tf.int64)\n    data['site_upper extremity']=tf.cast(example['anatom_site_general_challenge_upper extremity'], tf.int64)\n    # float features\n    data['age_scaled']=tf.cast(example['age_scalled'], tf.float32)\n\n    return image, data\n\ndef read_labeled_tfrecord(example):\n    LABELED_TFREC_FORMAT = {\n        # bytestring features\n        \"image\": tf.io.FixedLenFeature([], tf.string), \n        \"image_name\": tf.io.FixedLenFeature([], tf.string),\n        \"patient_id\": tf.io.FixedLenFeature([], tf.int64),\n        # integer features\n        \"sex_female\": tf.io.FixedLenFeature([], tf.int64),        \n        \"sex_male\": tf.io.FixedLenFeature([], tf.int64),\n        \"sex_nan\": tf.io.FixedLenFeature([], tf.int64),\n        \"anatom_site_general_challenge_head\/neck\": tf.io.FixedLenFeature([], tf.int64),\n        \"anatom_site_general_challenge_lower extremity\": tf.io.FixedLenFeature([], tf.int64),\n        \"anatom_site_general_challenge_nan\": tf.io.FixedLenFeature([], tf.int64),\n        \"anatom_site_general_challenge_oral\/genital\": tf.io.FixedLenFeature([], tf.int64),\n        \"anatom_site_general_challenge_palms\/soles\": tf.io.FixedLenFeature([], tf.int64),\n        \"anatom_site_general_challenge_torso\": tf.io.FixedLenFeature([], tf.int64),\n        \"anatom_site_general_challenge_upper extremity\": tf.io.FixedLenFeature([], tf.int64),\n        # float features\n        \"age_scalled\": tf.io.FixedLenFeature([], tf.float32),\n        \"target\": tf.io.FixedLenFeature([], tf.int64), \n    }\n\n    example = tf.io.parse_single_example(example, LABELED_TFREC_FORMAT)\n    image, data = parse_features(example)\n    return image, data, example['target']\n\ndef read_unlabeled_tfrecord(example):\n    UNLABELED_TFREC_FORMAT = {\n               # bytestring features\n        \"image\": tf.io.FixedLenFeature([], tf.string), \n        \"image_name\": tf.io.FixedLenFeature([], tf.string),\n        \"patient_id\": tf.io.FixedLenFeature([], tf.int64),\n        # integer features\n        \"sex_female\": tf.io.FixedLenFeature([], tf.int64),        \n        \"sex_male\": tf.io.FixedLenFeature([], tf.int64),\n        \"sex_nan\": tf.io.FixedLenFeature([], tf.int64),\n        \"anatom_site_general_challenge_head\/neck\": tf.io.FixedLenFeature([], tf.int64),\n        \"anatom_site_general_challenge_lower extremity\": tf.io.FixedLenFeature([], tf.int64),\n        \"anatom_site_general_challenge_nan\": tf.io.FixedLenFeature([], tf.int64),\n        \"anatom_site_general_challenge_oral\/genital\": tf.io.FixedLenFeature([], tf.int64),\n        \"anatom_site_general_challenge_palms\/soles\": tf.io.FixedLenFeature([], tf.int64),\n        \"anatom_site_general_challenge_torso\": tf.io.FixedLenFeature([], tf.int64),\n        \"anatom_site_general_challenge_upper extremity\": tf.io.FixedLenFeature([], tf.int64),\n        # float features\n        \"age_scalled\": tf.io.FixedLenFeature([], tf.float32),\n    }\n\n    example = tf.io.parse_single_example(example, UNLABELED_TFREC_FORMAT)\n    image, data = parse_features(example)\n\n\n    return image, data, example['image_name']\n\n\ndef prepare_image(img, cfg=None, augment=True, dim=CFG['read_size'], droprate=0.7, dropct=8, dropsize=0.15):    \n    img = tf.image.decode_jpeg(img, channels=3)\n    img = tf.cast(img, tf.float32) \/ 255.0\n    \n    \n    if augment:\n        img = transform(img, cfg)\n        #img = tf.image.random_crop(img, [cfg['crop_size'], cfg['crop_size'], 3])\n        if (droprate!=0)&(dropct!=0)&(dropsize!=0): \n            img = dropout(img, DIM=dim, PROBABILITY=droprate, CT=dropct, SZ=dropsize)\n        img = tf.image.random_flip_left_right(img)\n        img = tf.image.random_hue(img, 0.01)\n        img = tf.image.random_saturation(img, 0.7, 1.3)\n        img = tf.image.random_contrast(img, 0.8, 1.2)\n        img = tf.image.random_brightness(img, 0.1)\n\n    #else:\n    #    img = tf.image.central_crop(img, cfg['crop_size'] \/ cfg['read_size'])\n                                   \n    img = tf.image.resize(img, [cfg['net_size'], cfg['net_size']])\n    img = tf.reshape(img, [cfg['net_size'], cfg['net_size'], 3])\n    return img\n\n\n    \ndef prepare_features(data, cfg):\n    tab_data=[tf.cast(data[tfeat], dtype=tf.float32) for tfeat in cfg['tab_feats']]\n    \n    tabular=tf.stack(tab_data)\n    return tabular","7f558967":"def get_dataset(files, cfg, augment = False, shuffle = False, repeat = False, \n                labeled=True):\n    \n    ds = tf.data.TFRecordDataset(files, num_parallel_reads=AUTO)\n    ds = ds.cache()\n    \n    if repeat:\n        ds = ds.repeat()\n    \n    if shuffle: \n        ds = ds.shuffle(1024*8)\n        opt = tf.data.Options()\n        opt.experimental_deterministic = False\n        ds = ds.with_options(opt)\n        \n    if labeled: \n        ds = ds.map(read_labeled_tfrecord, num_parallel_calls=AUTO)\n    else:\n        ds = ds.map(lambda example: read_unlabeled_tfrecord(example), \n                    num_parallel_calls=AUTO)      \n    \n    ds = ds.map(lambda img, data, label: (prepare_image(img, \n                                                        augment=augment,\n                                                        cfg=cfg), \n                                          prepare_features(data, cfg=cfg), label), \n                num_parallel_calls=AUTO)\n    \n    ds = ds.batch(cfg['batch_size'] * REPLICAS)\n    ds = ds.prefetch(AUTO)\n    return ds","824f8187":"def show_dataset(thumb_size, cols, rows, ds):\n    mosaic = PIL.Image.new(mode='RGB', size=(thumb_size*cols + (cols-1), \n                                             thumb_size*rows + (rows-1)))\n   \n    for idx, data in enumerate(iter(ds)):\n        img, data, label = data\n        ix  = idx % cols\n        iy  = idx \/\/ cols\n        img = np.clip(img.numpy() * 255, 0, 255).astype(np.uint8)\n        img = PIL.Image.fromarray(img)\n        img = img.resize((thumb_size, thumb_size), resample=PIL.Image.BILINEAR)\n        mosaic.paste(img, (ix*thumb_size + ix, \n                           iy*thumb_size + iy))\n\n    display(mosaic)\n    \nds = get_dataset(files_train, CFG).unbatch().take(12*5)   \nshow_dataset(64, 12, 5, ds)","71d278ff":"ds = tf.data.TFRecordDataset(files_train, num_parallel_reads=AUTO)\nds = ds.take(1).cache().repeat()\nds = ds.map(read_labeled_tfrecord, num_parallel_calls=AUTO)\nds = ds.map(lambda img, data, target: (prepare_image(img, cfg=CFG, augment=True),\n                                       data, target), \n            num_parallel_calls=AUTO)\nds = ds.take(12*5)\nds = ds.prefetch(AUTO)\n\nshow_dataset(64, 12, 5, ds)","43d4f3a7":"ds = get_dataset(files_test, CFG, labeled=False).unbatch().take(12*5)   \nshow_dataset(64, 12, 5, ds)","4aade74d":"def polt_lfrn(cfg):\n    lr_start   = cfg['LR_START']\n    lr_max     = cfg['LR_MAX'] * strategy.num_replicas_in_sync\n    lr_min     = cfg['LR_MIN']\n    lr_ramp_ep = cfg['LR_RAMPUP_EPOCHS']\n    lr_sus_ep  = cfg['LR_SUSTAIN_EPOCHS']\n    lr_decay   = cfg['LR_EXP_DECAY']\n    def lrfn(epoch):\n        if epoch < lr_ramp_ep:\n            lr = (lr_max - lr_start) \/ lr_ramp_ep * epoch + lr_start\n        elif epoch < lr_ramp_ep + lr_sus_ep:\n            lr = lr_max\n        else:\n            lr = (lr_max - lr_min) * lr_decay**(epoch - lr_ramp_ep - lr_sus_ep) + lr_min        \n        return lr\n    rng = [i for i in range(cfg['epochs'])]\n    y = [lrfn(x) for x in rng]\n    plt.plot(rng, y)\n    print(\"Learning rate schedule: {:.3g} to {:.3g} to {:.3g}\".format(y[0], max(y), y[-1]))\n\n\ndef get_lr_callback(cfg):\n    lr_start   = cfg['LR_START']\n    lr_max     = cfg['LR_MAX'] * strategy.num_replicas_in_sync\n    lr_min     = cfg['LR_MIN']\n    lr_ramp_ep = cfg['LR_RAMPUP_EPOCHS']\n    lr_sus_ep  = cfg['LR_SUSTAIN_EPOCHS']\n    lr_decay   = cfg['LR_EXP_DECAY']\n   \n    def lrfn(epoch):\n        if epoch < lr_ramp_ep:\n            lr = (lr_max - lr_start) \/ lr_ramp_ep * epoch + lr_start\n            \n        elif epoch < lr_ramp_ep + lr_sus_ep:\n            lr = lr_max\n            \n        else:\n            lr = (lr_max - lr_min) * lr_decay**(epoch - lr_ramp_ep - lr_sus_ep) + lr_min\n            \n        return lr\n\n    lr_callback = tf.keras.callbacks.LearningRateScheduler(lrfn, verbose=False)\n\n    return lr_callback\n\npolt_lfrn(CFG)","896420d1":"class CustomSaver(tf.keras.callbacks.Callback):\n    def on_epoch_end(self, epoch, logs={}):\n        if epoch == 1:  # or save after some epoch, each k-th epoch etc.\n            self.model.save(\"\/model_{}.hd5\".format(epoch))","9ace5a21":"def get_model(cfg):\n    inp1 = tf.keras.Input(shape=(cfg['net_size'], cfg['net_size'], 3), name='imgIn')\n    inp2 = tf.keras.layers.Input(shape=(cfg['N_TAB_FEATS']), name='data')\n    dummy = tf.keras.layers.Lambda(lambda x:x)(inp1)\n    outputs = []    \n    for i in cfg['net_list']:\n        for weights in ['imagenet', 'noisy-student']:\n            constructor = getattr(efn, f'EfficientNetB{i}')\n            x = constructor(include_top=False, weights=weights, \n                            input_shape=(cfg['net_size'], cfg['net_size'], 3))\n            \n            x._name = f'EfficientNetB{i}{weights}'\n            x = x(dummy)\n            x = tf.keras.layers.GlobalAveragePooling2D()(x)\n            \n            x._name = f'EfficientNetB{i}{weights}'\n\n            x=tf.keras.layers.Dense(256, \n                                    kernel_regularizer=tf.keras.regularizers.l2(l=0.01),\n                                    activation='relu')(x)\n            x=tf.keras.layers.Dropout(0.2)(x)\n            x=tf.keras.layers.Dense(128, \n                                    kernel_regularizer=tf.keras.regularizers.l2(l=0.01),\n                                    activation='relu')(x)\n            x=tf.keras.layers.Dropout(0.2)(x)\n            x=tf.keras.layers.Dense(64, kernel_regularizer=tf.keras.regularizers.l2(l=0.01),\n                                    activation='relu')(x)\n            x=tf.keras.layers.Dropout(0.2)(x)\n\n            y=tf.keras.layers.Dense(100, \n                                    kernel_regularizer=tf.keras.regularizers.l2(l=0.01),\n                                    activation='relu')(inp2)\n\n            concat=tf.keras.layers.concatenate([y, x])\n\n\n\n            output = tf.keras.layers.Dense(1, activation='sigmoid')(concat)\n\n            outputs.append(output)\n        \n    model = tf.keras.models.Model(inputs=[inp1,inp2], outputs=outputs, name='aNetwork')\n    model.summary()\n    return model\n\ndef compile_new_model(cfg):    \n    with strategy.scope():\n        model = get_model(cfg)\n     \n        losses = [tf.keras.losses.BinaryCrossentropy(label_smoothing = cfg['label_smooth_fac'])\n                  for i in range(cfg['net_count'])]\n        \n        model.compile(\n            optimizer = cfg['optimizer'],\n            loss      = losses,\n            metrics   = [tf.keras.metrics.AUC(name='auc')])\n        \n    return model","6fd829ac":"ds_train     = get_dataset(files_train, CFG, augment=True, shuffle=True, repeat=True)\nds_train     = ds_train.map(lambda img, data, label: ((img, data), tuple([label] * CFG['net_count']))) # tutaj multiplikacja targetu\n\nsteps_train  = count_data_items(files_train) \/ (CFG['batch_size'] * REPLICAS)\n\nmodel        = compile_new_model(CFG)\nhistory      = model.fit(ds_train, \n                         verbose          = 1,\n                         steps_per_epoch  = steps_train, \n                         epochs           = CFG['epochs'],\n                         callbacks        = [get_lr_callback(CFG)])","3b52fa78":"CFG['batch_size'] = 128\n\ncnt_test   = count_data_items(files_test)\nsteps      = cnt_test \/ (CFG['batch_size'] * REPLICAS) * CFG['tta_steps']\nds_testAug = get_dataset(files_test, CFG, augment=True, repeat=True, \n                         labeled=False)\n\nds_testAug     = ds_testAug.map(lambda img, data, label: ((img, data),)) ","3b8e8029":"probs = model.predict(ds_testAug, verbose=1, steps=steps)\n\nprobs = np.stack(probs)\nprobs = probs[:,:cnt_test * CFG['tta_steps']]\nprobs = np.stack(np.split(probs, CFG['tta_steps'], axis=1), axis=1)\nprobs = np.mean(probs, axis=1)","99ff42ee":"ds = get_dataset(files_test, CFG, augment=False, repeat=False, \n                 labeled=False)\n\nimage_names = np.array([img_name.numpy().decode(\"utf-8\") \n                        for img, data, img_name in iter(ds.unbatch())])\nfor i in range(CFG[\"net_count\"]):\n    submission = pd.DataFrame(dict(\n        image_name = image_names,\n        target     = probs[i,:,0]))\n\n    submission = submission.sort_values('image_name') \n    submission.to_csv(f'submission_model_{i}_{CFG[\"read_size\"]}.csv', index=False)\nsubmission = pd.DataFrame(dict(\n    image_name = image_names,\n    target     = np.mean(probs[:,:,0], axis=0)))\n\nsubmission = submission.sort_values('image_name') \nsubmission.to_csv(f'submission_models_blended_{CFG[\"read_size\"]}.csv', index=False)","aa256842":"model.save('ef0_6_376.h5')","08d12ab1":"# Augmentation options","06586098":"This is initial version of the noiebook, I didnt have enough time yet to comment all the parts of it. \n\nOut of curiosity I implemented multiple same models in one TPU training loop to see if the performance of the model would improve over the B0-B6 Incredible tpu. I also added metadata so it is up to you to experiment with that. \n\nThere are multiple questions that are still not answered: \n\n - Is it better to use multiple bigger models like two b4 and two b5 trained on the image net and noisy student?\n\n - What is the gain of adding dense layers with metadata to the top?\n\n - Is center crop better than padding (padding might be better to capture changes that are on the sides of the images?\n \n More about that in this [post](https:\/\/www.kaggle.com\/c\/siim-isic-melanoma-classification\/discussion\/173410)","effffcf9":"# Crazy incredible TPU"}}