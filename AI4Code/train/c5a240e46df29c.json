{"cell_type":{"6ee088d7":"code","69595fb9":"code","e232ad57":"code","0a1aa934":"code","c7be5e4e":"code","01a62fff":"code","d844d057":"code","c8248853":"code","0f0cd4d8":"code","6c6add12":"code","729c0041":"code","46c886fa":"code","561239b0":"code","dd4d2455":"code","3a46e553":"code","3956742e":"code","34ce0859":"code","70f33446":"code","4acc9a3d":"code","e1bc75f7":"code","3e3c3042":"code","a7b0c61f":"code","b2fe3823":"code","a413abb3":"code","b8a894c3":"code","7f5bace4":"code","aa7f549f":"code","b6c5ea08":"code","d634f68b":"code","7726984d":"code","12049de6":"code","54cb6470":"code","964104e1":"code","7c62035b":"code","088495e2":"markdown"},"source":{"6ee088d7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","69595fb9":"train = pd.read_csv('\/kaggle\/input\/fashionmnist\/fashion-mnist_train.csv')\ntest = pd.read_csv('\/kaggle\/input\/fashionmnist\/fashion-mnist_test.csv')","e232ad57":"train.shape , test.shape","0a1aa934":"xtrain = train.drop('label', axis=1)","c7be5e4e":"ytrain = train['label']","01a62fff":"xtrain.shape, ytrain.shape","d844d057":"xtrain = xtrain.values\nytrain = ytrain.values","c8248853":"xtrain = xtrain\/255\nxtrain[0]","0f0cd4d8":"xtrain\nset(ytrain)","6c6add12":"import keras as kr\nytrain = kr.utils.to_categorical(ytrain)","729c0041":"ytrain","46c886fa":"ytrain.shape","561239b0":"model = kr.models.Sequential()\nmodel.add(kr.layers.Dense(512 , activation=\"sigmoid\" , input_shape=(784,)))\nmodel.add(kr.layers.Dense(512, activation=\"sigmoid\" ))\nmodel.add(kr.layers.Dense(10,activation=\"softmax\"))","dd4d2455":"model.summary()","3a46e553":"model.compile(optimizer=\"adam\" ,loss=\"categorical_crossentropy\",metrics=[\"accuracy\"])","3956742e":"hist = model.fit(xtrain, ytrain , epochs = 13 , batch_size= 100 , validation_split=0.2 , shuffle=True)","34ce0859":"import matplotlib.pyplot as plt\n#plt.figure(figsize=(10,6))\nfig, (ax1, ax2) = plt.subplots(2)\n\nax1.plot(hist.history[\"accuracy\"], c=\"red\")\nax1.plot(hist.history[\"val_accuracy\"])\n\nax2.plot(hist.history[\"loss\"], c=\"red\")\nax2.plot(hist.history[\"val_loss\"])\n\nplt.show()","70f33446":"train = pd.read_csv('\/kaggle\/input\/fashionmnist\/fashion-mnist_train.csv')\ntest = pd.read_csv('\/kaggle\/input\/fashionmnist\/fashion-mnist_test.csv')","4acc9a3d":"train.shape , test.shape","e1bc75f7":"xtrain = train.drop('label', axis=1)","3e3c3042":"ytrain = train['label']","a7b0c61f":"xtrain.shape, ytrain.shape","b2fe3823":"xtrain = xtrain.values\nytrain = ytrain.values","a413abb3":"xtrain = xtrain\/255","b8a894c3":"xtrain[0]","7f5bace4":"xtrain = xtrain.reshape((-1,28,28,1))","aa7f549f":"xtrain.shape","b6c5ea08":"xtrain.shape","d634f68b":"import keras as kr\nytrain = kr.utils.to_categorical(ytrain)","7726984d":"ytrain.shape","12049de6":"import matplotlib.pyplot as plt\nfor i in range(10):\n  plt.imshow(xtrain[i].reshape(28,28), cmap='gray')\n  plt.show()","54cb6470":"model = kr.models.Sequential()\nmodel.add(kr.layers.Convolution2D(32 , (3,3) , activation=\"relu\" , input_shape=(28,28,1)))\nmodel.add(kr.layers.Convolution2D(64,(3,3) , activation=\"relu\"))\nmodel.add(kr.layers.Dropout(0.25))\nmodel.add(kr.layers.MaxPooling2D(2,2))\n\nmodel.add(kr.layers.Convolution2D(32 , (3,3) , activation=\"relu\" ))\nmodel.add(kr.layers.Convolution2D(8,(3,3) , activation=\"relu\"))\nmodel.add(kr.layers.Dropout(0.25))\n\nmodel.add(kr.layers.Convolution2D(32 , (3,3) , activation=\"relu\" ))\nmodel.add(kr.layers.Convolution2D(8,(3,3) , activation=\"relu\"))\nmodel.add(kr.layers.Dropout(0.25))\n\nmodel.add(kr.layers.Flatten())\nmodel.add(kr.layers.Dense(100, activation='softmax'))\nmodel.add(kr.layers.Dense(10, activation=\"softmax\"))\nmodel.summary()","964104e1":"model.compile(optimizer=\"adam\" ,loss=\"categorical_crossentropy\",metrics=[\"accuracy\"])\nhist = model.fit(xtrain,  ytrain , epochs=30  ,shuffle=True , batch_size=256 , validation_split=0.25)","7c62035b":"import matplotlib.pyplot as plt\n#plt.figure(figsize=(10,6))\nfig, (ax1, ax2) = plt.subplots(2)\n\nax1.plot(hist.history[\"accuracy\"], c=\"red\")\nax1.plot(hist.history[\"val_accuracy\"])\n\nax2.plot(hist.history[\"loss\"], c=\"red\")\nax2.plot(hist.history[\"val_loss\"])\n\nplt.show()","088495e2":"**CNN**"}}