{"cell_type":{"b03182aa":"code","45b0581c":"code","3eebfe69":"code","73e2b534":"code","cc305c04":"code","2e02ad90":"code","7e6994ae":"code","d680660c":"code","0b7fdf04":"code","a58a3470":"code","804da639":"code","7a0b71ac":"code","972c2d14":"code","864736c7":"code","d5cbaea7":"code","6cac28aa":"code","b4835806":"code","9550f70c":"code","e6c63af8":"code","438d1a0f":"code","b736a420":"code","a33d384c":"code","f363e2ab":"code","b1c5b343":"code","2932c820":"code","2a0d1753":"code","e9261b09":"code","aaab4157":"markdown","f4016f5b":"markdown","0e52a42f":"markdown"},"source":{"b03182aa":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport surprise\nfrom surprise import KNNBasic,accuracy\nfrom surprise.model_selection import train_test_split","45b0581c":"ratings=pd.read_csv('..\/input\/goodbooks-10k\/ratings.csv')","3eebfe69":"ratings.shape","73e2b534":"ratings.head()","cc305c04":"books=pd.read_csv('..\/input\/goodbooks-10k\/books.csv')","2e02ad90":"books.shape","7e6994ae":"books.head(20)","d680660c":"train=pd.merge(books,ratings)\ntrain.head()","0b7fdf04":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False)","a58a3470":"userRatings = train.pivot_table(index=['user_id'],columns=['title'],values='rating')\nuserRatings.head()","804da639":"userRatings=userRatings.dropna(thresh=10,axis=1).fillna(0)\n#Here we are removing the movies having less than 10 user ratings and replacing NaN values with 0.\nuserRatings.head()","7a0b71ac":"books=userRatings.columns","972c2d14":"i=0\nfor book in books:\n    print(i,book)\n    i=i+1","864736c7":"item_similarity_pearson=userRatings.corr(method='pearson')\nitem_similarity_pearson.head()","d5cbaea7":"ratings=ratings[['user_id','book_id','rating']] \nratings = ratings.iloc[:20000,:]\nreader = surprise.Reader(rating_scale=(1,5)) \ndataset1 = surprise.Dataset.load_from_df(ratings, reader)","6cac28aa":"train1,test1 = train_test_split(dataset1,test_size=0.2)","b4835806":"user_model = surprise.KNNBasic(k=40,sim_options={'name': 'pearson','user_based': True})\nuser_model.fit(train1)\npreds = user_model.test(test1)\naccuracy.rmse(preds,verbose=True)","9550f70c":"user1=[(\"1421: The Year China Discovered America\",4.0),\n       (\"A House for Mr Biswas\",5.0),\n       (\"A History of God: The 4,000-Year Quest of Judaism, Christianity, and Islam\",1.0)\n      ]\nuser1=zip(books,userRatings.iloc[0,:])","e6c63af8":"def get_similar_movies_pearson_user(movie_name,user_rating):\n    similar_score=item_similarity_pearson[movie_name]*(user_rating-2.5)\n    similar_score=similar_score.sort_values(ascending=False)\n    return similar_score","438d1a0f":"print(\"Using Pearson\")\nsimilar_movies=pd.DataFrame()\nfor movie,rating in user1:\n    similar_movies=similar_movies.append(get_similar_movies_pearson_user(movie,rating),ignore_index=True)\nrecommended_pearson=similar_movies.sum().sort_values(ascending=False).index","b736a420":"print(\"User-based Collabrative Filtering (Pearson)\\n Recommendations for user_id 2\")\nprint(\"\\n\\n\")\nfor ind in recommended_pearson[:10]:\n    print(ind)","a33d384c":"item_model = surprise.KNNBasic(k=40,sim_options={'name': 'pearson','user_based': False})","f363e2ab":"item_model.fit(train1)\npreds = item_model.test(test1)\naccuracy.rmse(preds,verbose=True)\n","b1c5b343":"def get_similar_movies_pearson_itemtoitem(bookname):\n    similar_score=item_similarity_pearson[bookname]*(2.5)\n    similar_score=similar_score.sort_values(ascending=False)\n    return similar_score","2932c820":"book_name=books[0]","2a0d1753":"recommended_pearson_item=get_similar_movies_pearson_itemtoitem(book_name).index","e9261b09":"print(\"Item based Collabrative Filtering for book\",book_name,\"\\n\\n\")\nfor ind in recommended_pearson_item[1:11]:\n    print(ind)","aaab4157":"# User based - Item based Recommendation System","f4016f5b":"## Item based","0e52a42f":"## User Based"}}