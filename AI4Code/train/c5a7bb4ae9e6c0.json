{"cell_type":{"6d519938":"code","9ead4e05":"code","4e009b63":"code","7715d2c1":"code","f0a05741":"code","44e1fcda":"code","1afb67a0":"code","93623046":"code","fe9bbb81":"code","5beb7eb4":"code","ed470caa":"code","62520ac7":"code","2ca0ac62":"code","167f057a":"code","98b1312b":"code","7bff6a7a":"code","cd7f7ec0":"code","f347c659":"code","030b5759":"code","aa9cfbf7":"code","2c6101a5":"code","549a4105":"code","30958203":"code","7c9d9c2a":"code","a04e42f4":"code","c5369b4b":"code","ab6c2a8b":"code","d5ecabd9":"code","d16a5a92":"code","82d13f25":"code","78d82a16":"code","ce1a2764":"code","f926351a":"code","63953fe3":"code","6ff7b960":"code","d85a1091":"code","ea73b6b8":"code","698eeb1d":"code","73b17921":"code","61aacf82":"code","3997d68c":"code","8e2436ba":"code","d2ca16e1":"code","056ab30d":"code","2169fe2d":"code","d2076e2b":"code","f4c9f1e2":"code","e11e54a5":"code","860eebd0":"code","83649c21":"markdown","8a409ec9":"markdown","9f7f26c9":"markdown","a20ee777":"markdown","04562346":"markdown","c186e7f7":"markdown","5cb3f51d":"markdown","21e4cf55":"markdown","f7cc6a51":"markdown","9d8a3094":"markdown","76ee4752":"markdown","1f75324e":"markdown","22219ee4":"markdown","7ed621f2":"markdown","97d62c4d":"markdown","dce7b661":"markdown","399fb04e":"markdown","a7f1a07e":"markdown","3efcf3cf":"markdown","99a39b3f":"markdown","39baaa24":"markdown","d5384ab4":"markdown","d1371e84":"markdown","ba051659":"markdown","6039b3ab":"markdown","3308df1d":"markdown","bab2465d":"markdown","897ddcaa":"markdown","47c1f530":"markdown","b4972287":"markdown","39ef8d35":"markdown","0efa0a04":"markdown","9a8c7559":"markdown","65665e80":"markdown","1e881577":"markdown","774b6704":"markdown","35a3bc6a":"markdown","a1370534":"markdown","41872252":"markdown","90290514":"markdown","20a0feec":"markdown","cb0c8def":"markdown","bf2d6414":"markdown","6dc373b4":"markdown","026f8374":"markdown","764e3780":"markdown","de4c26b6":"markdown","3b3c4956":"markdown","9edfefff":"markdown","b4a8db98":"markdown","7fdb3ccd":"markdown","bd4ad319":"markdown"},"source":{"6d519938":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\n\n# Any results you write to the current directory are saved as output.","9ead4e05":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport math\nfrom sklearn.preprocessing import LabelEncoder\nimport xgboost as xgb\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import svm\n\nimport string\nimport warnings\nwarnings.filterwarnings('ignore')","4e009b63":"df_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_gender = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest = pd.concat([df_test,df_gender['Survived']] , axis = 1)\ndef concat(train_data, test_data):\n    return pd.concat([train_data, test_data], sort=True).reset_index(drop=True)\ndata = concat(df_train , test)\n","7715d2c1":"df_train.describe()\n","f0a05741":"df_test.describe()","44e1fcda":"cabin_uniq = df_train['Cabin'].value_counts()\nembark_uniq = df_train['Embarked'].value_counts()\nembark_uniq","1afb67a0":"sex_s = df_train.groupby(['Sex', 'Survived']).Sex.count()\nage_s = df_train.groupby(['Age', 'Survived']).Age.count()\nsib_s = df_train.groupby(['SibSp', 'Survived']).SibSp.count()\nparch_s = df_train.groupby(['Parch', 'Survived']).Parch.count()\nfare_s = df_train.groupby(['Fare', 'Survived']).Fare.count()\ncabin_s = df_train.groupby(['Cabin', 'Survived']).Cabin.count()\nembark_s = df_train.groupby(['Embarked', 'Survived']).Embarked.count()\nprint(\"sex survived \\n\",sex_s)\nprint(\"age survived \\n\",age_s)","93623046":"fig, axar = plt.subplots(2, 2 , figsize=(12, 8))\n\ndf_train.groupby(['Sex','Survived']).Survived.count().unstack('Sex').plot.bar( ax = axar [0][0])\ndf_train.groupby(['SibSp','Survived']).Survived.count().unstack('SibSp').plot.bar(ax = axar [0][1])\ndf_train.groupby(['Parch','Survived']).Survived.count().unstack('Parch').plot.bar(ax = axar [1][0])\ndf_train.groupby(['Embarked','Survived']).Survived.count().unstack('Embarked').plot.bar(ax = axar [1][1])","fe9bbb81":"df_train_new = df_train.copy()\n","5beb7eb4":"df_train.groupby('Survived').Fare.hist()","ed470caa":"def univariate_kdeplots(dataframe, plot_features, cols=2, width=10, height=10, hspace=0.2, wspace=0.25):\n    # define style and layout\n    sns.set(font_scale=1.5)\n    plt.style.use('seaborn-whitegrid')\n    fig = plt.figure(figsize=(width, height))\n    fig.subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=wspace, hspace=hspace)\n    rows = math.ceil(float(dataframe.shape[1]) \/ cols)\n    # define subplots\n    for i, feature in enumerate(plot_features):\n        ax = fig.add_subplot(rows, cols, i + 1)\n        g = sns.kdeplot(dataframe[plot_features[i]][(dataframe['Survived'] == 0)].dropna(), shade=True, color=\"red\")\n        g = sns.kdeplot(dataframe[plot_features[i]][(dataframe['Survived'] == 1)].dropna(), shade=True, color=\"blue\")\n        g.set(xlim=(0 , dataframe[plot_features[i]].max()))\n        g.legend(['Died', 'Survived'])\n        plt.xticks(rotation=25)\n        ax.set_xlabel(plot_features[i], weight='bold')","62520ac7":"univariate_kdeplots(data, ['Age'], cols=1, width=15, height=100, hspace=0.4, wspace=0.25)","2ca0ac62":"df_train['Survived'].mean()","167f057a":"df_train.groupby(['Pclass']).mean()","98b1312b":"df_pclass_sex = df_train.groupby(['Pclass','Sex']).mean()\ndf_pclass_sex\ndf_pclass_sex = df_pclass_sex['Survived']\ndf_pclass_sex.plot.bar()","7bff6a7a":"df_train.describe()","cd7f7ec0":"fig, axar = plt.subplots(1, 2 , figsize=(12, 8))\ndf_age = pd.cut(df_train['Age'], np.arange(0, 90, 10))\ndf_mean_age = df_train.groupby(df_age).mean()\ndf_mean_age['Survived'].plot.bar(ax = axar[0])\ndf_age = pd.cut(df_train['Age'], np.arange(0, 90, 5))\ndf_mean_age = df_train.groupby(df_age).mean()\ndf_mean_age['Survived'].plot.bar(ax = axar [1])","f347c659":"data['family_size'] = data['Parch'] + data['SibSp'] +1","030b5759":"data['Title'] = data['Name'].str.split(', ', expand=True)[1].str.split('.', expand=True)[0]\ntt_count = data['Title'].value_counts()\n","aa9cfbf7":"data['Surname'] = data['Name'].str.split(', ', expand=True)[0]","2c6101a5":"miss_train = df_train.isnull().sum()\n#print(\"missing values of train set\\n\" , miss_train)\nmiss_test = df_test.isnull().sum()\n#print(\"missing values of test set\\n\" , miss_test)\nmiss_data = data.isnull().sum()\nprint(\"missing values in data \\n\" , miss_data)","549a4105":"mean_master = data.loc[data['Title']=='Master'].mean()['Age']\nmean_master","30958203":"data['Age'][(data['Title'] == 'Master') & (data['Age'].isnull())] = mean_master","7c9d9c2a":"data[data['Age'].isnull()].loc[data['Title']== 'Master']\ndata['Age'].isnull().sum()","a04e42f4":"\ndata.groupby(['Title','Survived']).Survived.count().unstack('Title').plot.bar()","c5369b4b":"df_pclass_sex_age = data.groupby(['Pclass','Sex' ]).mean()\n\ndf_pclass_sex_age","ab6c2a8b":"data['Age'] = data.groupby(['Sex', 'Pclass'])['Age'].apply(lambda x: x.fillna(x.mean()))\n","d5ecabd9":"embarked_null = data[data['Embarked'].isnull()]\nembarked_null","d16a5a92":"data['Embarked'] = data['Embarked'].fillna('S')","82d13f25":"fare_null = data[data['Fare'].isnull()]\nfare_null","78d82a16":"\nmean_fare = data.groupby(['Pclass', 'Sex']).Fare.mean()[3][1]\ndata['Fare'] = data['Fare'].fillna(mean_fare)\n","ce1a2764":"cabin_null = data[data['Cabin'].isnull()]\ncabin_null","f926351a":"data.groupby(['Cabin'], as_index=False)['Pclass'].count()","63953fe3":"data['Cabin_code']=data.Cabin.str.extract('([a-zA-Z])' , expand=True)[0]\ncabins = data['Cabin_code']","6ff7b960":"data.groupby(['Cabin_code','Pclass']).Pclass.count().unstack('Pclass').plot.bar()","d85a1091":"data.groupby(['Cabin_code','Pclass', 'Surname']).count()\ndata.groupby(['Pclass']).median()","ea73b6b8":"\n\nlabel = LabelEncoder()\ndata['Sex_code'] = label.fit_transform(data['Sex']) #male 1 female 0 \n#data_new = data.drop(['Sex'] , axis=1)\n","698eeb1d":"data['Embarked_code'] = label.fit_transform(data['Embarked']) #s 2 c 0 q 1\n","73b17921":"bin_thresholds = [0, 15, 25, 40,60,80]\nbin_labels = ['0-15', '16-25', '26-40', '41-60', '61-80']\ndata['Age_bin'] = pd.cut(data['Age'], bins=bin_thresholds, labels=bin_labels)\n","61aacf82":"Age_bin_to_integer = {'0-15': 1,\n                     '16-25': 2, \n                     '26-40': 3, \n                     '41-60': 4,\n                     '61-80': 5}\n\ndata['Age_code'] = data['Age_bin'].map(Age_bin_to_integer)","3997d68c":"feature_list = ['Fare' ,'Parch' , 'Pclass', 'SibSp' ,'family_size' ,'Sex_code','Embarked_code','Age_code']\nx = data[feature_list].values\ny = data['Survived'].values\n","8e2436ba":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=7)","d2ca16e1":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score , confusion_matrix\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom xgboost import plot_importance","056ab30d":"model = xgb.XGBClassifier()\nkfold = KFold(n_splits=10, random_state=7)\nresults = cross_val_score(model, x, y, cv=kfold)\nprint(\"Accuracy: %.2f%% (%.2f%%)\" % (results.mean()*100, results.std()*100))","2169fe2d":"data_dmatrix = xgb.DMatrix(data=x,label=y)\nparams = {\"objective\":\"reg:linear\",'colsample_bytree': 0.3,'learning_rate': 0.1,\n                'max_depth': 5, 'alpha': 10}\n\ncv_results = xgb.cv(dtrain=data_dmatrix, params=params, nfold=10,\n                    num_boost_round=50,early_stopping_rounds=10,metrics=\"rmse\", as_pandas=True, seed=123)\n","d2076e2b":"linreg = LogisticRegression()\nresults = cross_val_score(linreg, x, y, cv=kfold)\nprint(\"Accuracy: %.2f%% (%.2f%%)\" % (results.mean()*100, results.std()*100))\n","f4c9f1e2":"tree = DecisionTreeClassifier()\ntree = tree.fit(x_train, y_train)\ny_pred_tree = tree.predict(x_test)\nprint(confusion_matrix(y_test,y_pred_tree))\nprint(\"Accuracy:\",accuracy_score(y_test, y_pred_tree))\nprint(classification_report(y_test,y_pred_tree))","e11e54a5":"rfc = RandomForestClassifier()\nrfc.fit(x_train, y_train)\ny_pred_rf = rfc.predict(x_test)\n#print('Mean Absolute Error:', mean_absolute_error(y_test, y_pred_rf))\nprint('Mean Squared Error:', mean_squared_error(y_test, y_pred_rf))\nprint('Root Mean Squared Error:', np.sqrt(mean_squared_error(y_test, y_pred_rf)))\n\n\nprint(confusion_matrix(y_test,y_pred_rf))\nprint(classification_report(y_test,y_pred_rf))\nprint(accuracy_score(y_test, y_pred_rf))","860eebd0":"clf_svm =  svm.SVC(kernel='rbf', C=1)\nscores = cross_val_score(clf_svm, x, y, cv=5)\nprint(\"Accuracy: %0.2f (+\/- %0.2f)\" % (scores.mean(), scores.std() * 2))","83649c21":"so, it is so fantastic. \nfrom these dataframe and plot, we can understand female has more chance to survive. even in poor or rich o middle-class, female has more chance.\nBecause in that time, when people were allowed to be in lifeboat, women and children have priority to be in there. so more women survived.","8a409ec9":"As you see from above information, for Cabin feature both for train and test missing values is high.\n* in train set, in Age, Cabin and Embarked is missing values.\n* in test set, in Age, Fare and Cabin, there are missing values.\n","9f7f26c9":"from this notebook [https:\/\/www.kaggle.com\/gunesevitan\/titanic-advanced-feature-engineering-tutorial](http:\/\/) i search the name of these two passengers and their names.\n* Embarked: Southampton on Wednesday 10th April 1912, Name: Mrs Martha Evelyn Stone, Titanic Survivor\n* Name: Miss Rose Am\u00e9lie Icard ,Titanic Survivor,Embarked: Southampton on Wednesday 10th April 1912\n1. so both were embarked on Southampton, so we should fill S in Embarked column.","a20ee777":"DO some with null values for other classifiers that cant handle the missing values.\nat this step, \n* we have null values in Age, Cabin and Embarked columns in train, \n* and in Age, Fare and Cabin columns in test set.","04562346":"*** Go for Fare for missing values***","c186e7f7":"*# visualization by number of survived*","5cb3f51d":"for Age, we have different steragies:\n1.  firt we can fill null values with mean of  Pclass and Sex","21e4cf55":"*** Go for Cabin for missing values***","f7cc6a51":"> **** Go for preparing data for machine learning****","9d8a3094":"what we will do on this dataset:\n1. read data\n2. visualize the data\n3. handeling missing values\n4. modeling the data\nFirst we read data.\n","76ee4752":"* this bar plot shows that in dead people Mr s have a high number with a big difference from others.\n* in survived people, Miss and Mrs have a high number.\n* also i think that we should consider the percentage of survived in Mr and Mrs seperately.","1f75324e":"# 1.  Read data","22219ee4":"# * To check Age *","7ed621f2":"# 1.  Exploratory Data Analysis","97d62c4d":"see the rows that Age column has null values","dce7b661":"# survived for each feature","399fb04e":"1014 of 1309 cabin column is null. ","a7f1a07e":"lets look at the columns mean, max, min and other information in test and train.","3efcf3cf":"it is clear that the pclass is relevant to cabin. ","99a39b3f":"# 1.Go for XGboost ","39baaa24":"**I would greatly appreciate it if you kindly give me some feedback on this Kernel **","d5384ab4":"now we drop null rows in Embarked column. so we change categorical to numeric.","d1371e84":"# 3. Feature Engineering","ba051659":"* i will fill miss values in cabin ...","6039b3ab":"C = Cherbourg, Q = Queenstown, S = Southampton","3308df1d":"# 4.RandomForest","bab2465d":"# 2.  Handeling missing values\/ null values","897ddcaa":"do Kfold","47c1f530":"* features Sex and Embarked are Nominal Categorical Features\n* sex = female and male\n* embarked = S , C and Q","b4972287":"![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/8\/84\/Titanic_cutaway_diagram.png\/1200px-Titanic_cutaway_diagram.png)","39ef8d35":"# 2 .Feature Engineering","0efa0a04":"just seperate the cabin name like A,B,C,D,E,F,G, and T","9a8c7559":"seperate title of every passenger from Name column.","65665e80":"***Creating bins for Age***","1e881577":"# how much percent survived?","774b6704":"we have 3 datasets\n1. train that contains 12 features and 891 rows.\n2. gender_submission that contain survival feature for test set.\n3. test that contains 11 features and 481 rows.\n","35a3bc6a":"what should we do ?\n* 2224 people were on ship, 1502 were dead, so 722 were survived.\n* 891 are on train set, which is ground truth.\n* we should predict on test set.","a1370534":"Social classes were heavily stratified in the early twentieth century. This was especially true on the Titanic, where the luxurious first-class areas were completely off limits to the middle-class passengers in second class, and especially to those who carried a third class \u201ceconomy price\u201d ticket. Pclass column shows Ticket class.\nPclass : A proxy for socio-economic status (SES)\n1st = Upper\n2nd = Middle\n3rd = Lower","41872252":"look at the total missing values in data","90290514":"*** Go for Embarked for missing values***\n","20a0feec":" for this section i read about this in this kernel [https:\/\/www.kaggle.com\/rtatman\/data-cleaning-challenge-handling-missing-values](http:\/\/)\n> Is this value missing becuase it wasn't recorded or becuase it dosen't exist?*  ","cb0c8def":"# * Average by Pclass and Sex*","bf2d6414":"masters are boys under 15.","6dc373b4":"# 2.Linear Regression","026f8374":"it means that on ticket class 1, which it means the rich people were there, have 62% chance to survived.\non ticket class 2, which middle-class passengers were there,have 47% chance to survived.\non ticket class 3, which poor passengers were there, have 24% chance to survived.\nin conclusion, most of survived people were from rich people.","764e3780":"it is not the end. i will improve it. any advice orsuggestion will be greatly appreciated","de4c26b6":"we see that min and max in age is 0.4 and 80.","3b3c4956":"# 2. categorical to numeric features","9edfefff":"# 4.svm","b4a8db98":"![](http:\/\/rpmarchildon.com\/wp-content\/uploads\/2018\/06\/titanic_class_cabin_locations.png)","7fdb3ccd":"*** Go for Age for missing values***","bd4ad319":"# 3.Decision Tree"}}