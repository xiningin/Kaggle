{"cell_type":{"9483f207":"code","5a3d49aa":"code","1813aef5":"code","64becb57":"code","b6e976ce":"code","22be4b54":"code","2df026c7":"code","17d6ca16":"code","8bec5126":"code","3274af46":"code","afb2b1aa":"code","b0d80883":"code","2599aded":"code","9909b56c":"code","1176b0fa":"code","4d248465":"code","e28c054d":"code","62094d70":"markdown","fa2ef7a7":"markdown","d7429acb":"markdown","cf7277b7":"markdown","704c580b":"markdown","06a902aa":"markdown","ee94d068":"markdown","8979d4e7":"markdown","c24ae7e1":"markdown","75219a5f":"markdown","edd0c63d":"markdown","a91f20c0":"markdown","1623c72e":"markdown"},"source":{"9483f207":"#--------------------------- Import Packages ------------------------------\nimport pandas as pd \nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n#--------------------------- Read CSV ------------------------------\ntrain_df = pd.read_csv('..\/input\/tabular-playground-series-feb-2022\/train.csv')\ntest_df = pd.read_csv('..\/input\/tabular-playground-series-feb-2022\/test.csv')\nssub = pd.read_csv('..\/input\/tabular-playground-series-feb-2022\/sample_submission.csv')\n\n#--------------------------- Preparation  ------------------------------\nFEATURES = [col for col in train_df.columns if col not in ['row_id', 'target']]\ntrain_unique_val_df = pd.DataFrame([len(train_df[col].unique()) for col in FEATURES], index=FEATURES, columns=['unique'])\ntest_unique_val_df = pd.DataFrame([len(test_df[col].unique()) for col in FEATURES], index=FEATURES, columns=['unique'])\nunique_value_feature_diff = train_df['target'].value_counts()\n","5a3d49aa":"train_df.head(3)","1813aef5":"print(f'Number of rows: {train_df.shape[0]};  Number of columns: {train_df.shape[1]}; No of missing values: {sum(train_df.isna().sum())}')","64becb57":"train_df.dtypes","b6e976ce":"train_df.describe()","22be4b54":"print('Target column basic statistics:')\ntrain_df['target'].describe()","2df026c7":"print('Frequency of each target classes:')\ntrain_df['target'].value_counts()","17d6ca16":"test_df.head(3)","8bec5126":"print(f'Number of rows: {test_df.shape[0]};  Number of columns: {test_df.shape[1]}; No of missing values: {sum(test_df.isna().sum())}')","3274af46":"test_df.dtypes","afb2b1aa":"test_df.describe()","b0d80883":"plt.rcParams['figure.dpi'] = 600\nfig = plt.figure(figsize=(5, 1.5), facecolor='#f6f5f5')\ngs = fig.add_gridspec(1, 1)\ngs.update(wspace=0.4, hspace=0.1)\n\nbackground_color = \"#f6f5f5\"\nsns.set_palette(['#aec983']*10)\n\nax = fig.add_subplot(gs[0, 0])\nfor s in [\"right\", \"top\"]:\n    ax.spines[s].set_visible(False)\nax.set_facecolor(background_color)\nax_sns = sns.barplot(ax=ax, x=train_df['target'].unique(), y=unique_value_feature_diff, zorder=2, linewidth=0, alpha=1, saturation=1)\nax_sns.set_xlabel(\"Features\",fontsize=4, weight='bold')\nax_sns.set_ylabel(\"Unique values\",fontsize=4, weight='bold')\nax_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\nax_sns.tick_params(labelsize=4, width=0.5, length=1.5)\nax_sns.xaxis.set_tick_params(rotation=30)\n#ax.text(-0.5, 15.5, 'Unique Values Differences', fontsize=6, ha='left', va='top', weight='bold')\n#ax.text(-0.5, 14.5, 'Positive means that train dataset has higher unique value than test dataset', fontsize=4, ha='left', va='top')\n# data label\nfor p in ax.patches:\n    percentage = f'{p.get_height():.0f}'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height() + 1300\n    ax.text(x, y, percentage, ha='center', va='center', fontsize=4,\n           bbox=dict(facecolor='none', edgecolor='black', boxstyle='round', linewidth=0.3))\n\nplt.show()","2599aded":"plt.rcParams['figure.dpi'] = 600\nfig = plt.figure(figsize=(8, 24), facecolor='#f6f5f5')\ngs = fig.add_gridspec(1, 2)\ngs.update(wspace=0.4, hspace=0.1)\n\nbackground_color = \"#f6f5f5\"\nsns.set_palette(['#aec983']*len(FEATURES))\n\n\nax0 = fig.add_subplot(gs[0, 0])\nfor s in [\"right\", \"top\"]:\n    ax0.spines[s].set_visible(False)\nax0.set_facecolor(background_color)\nax0_sns = sns.barplot(ax=ax0, y=train_unique_val_df.index, x=train_unique_val_df['unique'], \n                      zorder=2, linewidth=0, orient='h', saturation=1, alpha=1)\nax0_sns.set_xlabel(\"Unique Values\",fontsize=4, weight='bold')\nax0_sns.set_ylabel(\"Features\",fontsize=4, weight='bold')\nax0_sns.tick_params(labelsize=4, width=0.5, length=1.5)\nax0_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax0_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\nax0.text(0, -3.3, 'Unique Values - Train Dataset', fontsize=6, ha='left', va='top', weight='bold')\n# data label\nfor p in ax0.patches:\n    value = f'{p.get_width():.0f}'\n    x = p.get_x() + p.get_width() + 400\n    y = p.get_y() + p.get_height() \/ 2 \n    ax0.text(x, y, value, ha='center', va='center', fontsize=3, \n            bbox=dict(facecolor='none', edgecolor='black', boxstyle='round', linewidth=0.3))\n\nbackground_color = \"#f6f5f5\"\nsns.set_palette(['#3366FF']*len(FEATURES))\n\nax1 = fig.add_subplot(gs[0, 1])\nfor s in [\"right\", \"top\"]:\n    ax1.spines[s].set_visible(False)\nax1.set_facecolor(background_color)\nax1_sns = sns.barplot(ax=ax1,y=test_unique_val_df.index, x=test_unique_val_df['unique'], \n                      zorder=2, linewidth=0, orient='h', saturation=1, alpha=1)\nax1_sns.set_xlabel(\"Unique Values\",fontsize=4, weight='bold')\nax1_sns.set_ylabel(\"Features\",fontsize=4, weight='bold')\nax1_sns.tick_params(labelsize=4, width=0.5, length=1.5)\nax1_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax1_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\nax1.text(0, -3.3, 'Unique Values - Test Dataset', fontsize=6, ha='left', va='top', weight='bold')\nfor p in ax1.patches:\n    value = f'{p.get_width():.0f}'\n    x = p.get_x() + p.get_width() + 350\n    y = p.get_y() + p.get_height() \/ 2 \n    ax1.text(x, y, value, ha='center', va='center', fontsize=3, \n            bbox=dict(facecolor='none', edgecolor='black', boxstyle='round', linewidth=0.3))\n\nplt.show()","9909b56c":"plt.rcParams['figure.dpi'] = 600\nfig = plt.figure(figsize=(15, 10), facecolor='#f6f5f5')\ngs = fig.add_gridspec(4, 4)\ngs.update(wspace=0.3, hspace=0.2)\n\nbackground_color = \"#f6f5f5\"\n\nrun_no = 0\nfor row in range(0, 4):\n    for col in range(0, 4):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        locals()[\"ax\"+str(run_no)].set_yticklabels([])\n        locals()[\"ax\"+str(run_no)].tick_params(axis='y', which=u'both',length=0)\n        for s in [\"top\",\"right\", 'left']:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n        \n        \n\nrun_no = 0\nfor col in FEATURES[:16]:\n    sns.kdeplot(train_df[col], ax=locals()[\"ax\"+str(run_no)], shade=True, color='#aec983', \n                edgecolor='black', linewidth=0, alpha=1, zorder=3)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].set_ylabel(col, fontsize=10, fontweight='bold').set_rotation(0)\n    locals()[\"ax\"+str(run_no)].yaxis.set_label_coords(1.1, 0)\n    locals()[\"ax\"+str(run_no)].set_xlabel('')\n    run_no += 1","1176b0fa":"train_df[FEATURES].corr().style.background_gradient(cmap='BuGn_r',axis=None) ","4d248465":"test_df[FEATURES].corr().style.background_gradient(cmap='BuGn_r',axis=None) ","e28c054d":"import re\ndf = pd.DataFrame(columns={'A','T','G','C'})\nfor i, col in enumerate(FEATURES[0:-1]):\n    df.loc[i]=(re.split('A|T|G|C',col)[1:])\ndf.head(5)\n\nbackground_color = \"#f6f5f5\"\nplt.figure(figsize=(20,10), facecolor=background_color)\n\nax0 = plt.subplot(2,2,1)\nax1 = plt.subplot(2,2,2)\nax2 = plt.subplot(2,2,3)\nax3 = plt.subplot(2,2,4)\n\nax0.set_facecolor(background_color)\nfor s in [\"top\",\"right\"]:\n                ax0.spines[s].set_visible(False)\n\nsns.scatterplot(data=df['A'], ax=ax0, edgecolor=None, label='A', color='#E74C3C')\nax0.legend(ncol=1, facecolor=background_color, edgecolor=background_color, loc='lower center')\n\nax1.set_facecolor(background_color)\nfor s in [\"top\",\"right\"]:\n                ax1.spines[s].set_visible(False)\n\nsns.scatterplot(data=df['T'], ax=ax1, edgecolor=None, label='T', color='#3366FF')\nax1.legend(ncol=1, facecolor=background_color, edgecolor=background_color, loc='lower center')\n\n\nax2.set_facecolor(background_color)\nfor s in [\"top\",\"right\"]:\n                ax2.spines[s].set_visible(False)\n\nsns.scatterplot(data=df['G'], ax=ax2, edgecolor=None, label='G', color='#33CC99')\nax2.legend(ncol=1, facecolor=background_color, edgecolor=background_color, loc='lower center')\n\nax3.set_facecolor(background_color)\nfor s in [\"top\",\"right\"]:\n                ax3.spines[s].set_visible(False)\n\nsns.scatterplot(data=df['C'], ax=ax3, edgecolor=None, label='C', color='#996666')\nax3.legend(ncol=1, facecolor=background_color, edgecolor=background_color, loc='lower center')\n\nplt.show()","62094d70":"![TPSFEB22PREVIEW.png](attachment:270fa2c2-bdf4-4b83-8391-e62846416606.png)","fa2ef7a7":"____\n# **<span style=\"color:#aec983;\"> Table of Content <\/span>**\n<a id=\"table-of-contents\"><\/a>\n- [1. Introduction](#1)\n- [2. Dataset Overview](#2) \n    - [2.1. Train Overview](#2.1)\n    - [2.1. Test Overview](#2.2)\n- [3. Target overview](#3) \n- [4. Train and Test unique value](#4) \n- [5. Features Distribution](#5) \n- [6. Features Correalation](#6) \n    - [6.1 Train](#6.1) \n    - [6.2 Test](#6.2) \n- [7. Segments Visualisation](#7) \n- [8. PCA](#8) \n\n____","d7429acb":"[back to top](#table-of-contents)\n<a id=\"5\"><\/a>\n# **<span style=\"color:#aec983;\">5. Features Distribution <\/span>**","cf7277b7":"<a id=\"6.2\"><\/a>\n# **<span style=\"color:#aec983;\">6.2 Test<\/span>**","704c580b":"[back to top](#table-of-contents)\n<a id=\"8\"><\/a>\n# **<span style=\"color:#aec983;\">8. PCA <\/span>**","06a902aa":"[back to top](#table-of-contents)\n<a id=\"1\"><\/a>\n# **<span style=\"color:#aec983;\">1. Introduction<\/span>**\nFor this challenge, you will be predicting bacteria species based on repeated lossy measurements of DNA snippets. Snippets of length 10 are analyzed using Raman spectroscopy that calculates the histogram of bases in the snippet. In other words, the DNA segment $\\text{ATATGGCCTT}$ becomes $\\text{A}_{2} \\text{T}_{4} \\text{G}_{2} \\text{C}_{2}$  \n\nEach row of data contains _a spectrum of histograms_ generated by repeated measurements of a sample, each row containing the output of all 286 histogram possibilities (e.g.,$\\text{A}_0 \\text{T}_0 \\text{G}_0 \\text{C}_0 $ to $\\text{A}_{10} \\text{T}_0 \\text{G}_0 \\text{C}_0 $), which then has a bias spectrum (of totally random ATGC) subtracted from the results.  \n\nThe data (both train and test) also contains simulated measurement errors (of varying rates) for many of the samples, which makes the problem more challenging.  \n\n__Files__  \n\n`train.csv` - the training set, which contains the spectrum of 10-mer histograms for each sample\n* `A0..10T0...` - Histograms [Raman spectroscopy](https:\/\/en.wikipedia.org\/wiki\/Raman_spectroscopy)\n* `target` \n    * `Streptococcus_pyogenes` - [Streptococcus_pyogenes](https:\/\/en.wikipedia.org\/wiki\/Streptococcus_pyogenes)\n    * `Salmonella_enterica` - [Salmonella_enterica](https:\/\/ru.wikipedia.org\/wiki\/Salmonella_enterica)\n    * `Enterococcus_hirae` - [Enterococcus_hirae](https:\/\/en.wikipedia.org\/wiki\/Enterococcus_hirae)\n    * `Escherichia_coli` - [Escherichia_coli](https:\/\/en.wikipedia.org\/wiki\/Escherichia_coli)\n    * `Campylobacter_jejuni` - [Campylobacter_jejuni](https:\/\/en.wikipedia.org\/wiki\/Campylobacter_jejuni)\n    * `Streptococcus_pneumoniae` - [Streptococcus_pneumoniae](https:\/\/en.wikipedia.org\/wiki\/Streptococcus_pneumoniae)\n    * `Staphylococcus_aureus` - [Staphylococcus_aureus](https:\/\/en.wikipedia.org\/wiki\/Staphylococcus_aureus)\n    * `Escherichia_fergusonii` - [Escherichia_fergusonii](https:\/\/en.wikipedia.org\/wiki\/Escherichia_fergusonii)\n    * `Bacteroides_fragilis` - [Bacteroides_fragilis](https:\/\/en.wikipedia.org\/wiki\/Bacteroides_fragilis)\n    * `Klebsiella_pneumoniae` - [Klebsiella_pneumoniae](https:\/\/en.wikipedia.org\/wiki\/Klebsiella_pneumoniae)\n\n","ee94d068":"<a id=\"2.1\"><\/a>\n## **<span style=\"color:#aec983;\">2.1 Test overview <\/span>**","8979d4e7":"[back to top](#table-of-contents)\n<a id=\"6\"><\/a>\n# **<span style=\"color:#aec983;\">6. Features Correalation<\/span>**\n<a id=\"6.1\"><\/a>\n# **<span style=\"color:#aec983;\">6.1 Train<\/span>**","c24ae7e1":"[back to top](#table-of-contents)\n<a id=\"3\"><\/a>\n# **<span style=\"color:#aec983;\">3. Target overview <\/span>**\n\n","75219a5f":"[back to top](#table-of-contents)\n<a id=\"2\"><\/a>\n# **<span style=\"color:#aec983;\">2. Dataset overview <\/span>**\n\n<a id=\"2.1\"><\/a>\n## **<span style=\"color:#aec983;\">2.1 Train overview <\/span>**","edd0c63d":"[back to top](#table-of-contents)\n<a id=\"7\"><\/a>\n# **<span style=\"color:#aec983;\">7. Segments Visualisation <\/span>**","a91f20c0":"[back to top](#table-of-contents)\n<a id=\"4\"><\/a>\n# **<span style=\"color:#aec983;\">4. Train and Test unique values <\/span>**\n\nI hope you do more attentive, as you can see, that count of unique values depended by count of letter's number. You can see example below.  \n`A0T0C0G10` - 18  | A0T0C0**G10**  \n`A0T10C0G0` - 18  | A0**T10**C0G0  \n`A10T0C0G0` - 22  | **A10**T0C0G0 \n\nBut if we look at balanced numbers:  \n`A3T4G1C2` - 11415   \n`A3T4G2C1` - 11984  \n`A4T3G2C1` - 11779  \n\n\n> When more number of unique letter, then less count of columns.\n\nRead about this:  \n[My topic](https:\/\/www.kaggle.com\/c\/tabular-playground-series-feb-2022\/discussion\/304519)  \n[Who helped me](https:\/\/www.kaggle.com\/c\/tabular-playground-series-feb-2022\/discussion\/304483) @odins0n  ","1623c72e":"# IN PROCCESS"}}