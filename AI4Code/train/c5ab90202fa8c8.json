{"cell_type":{"f611fad5":"code","ee0ae0bb":"code","a500cb06":"code","6799afce":"code","ee1a4546":"code","d772819b":"code","afd4d283":"code","8a3e6af7":"code","62b3545c":"code","e19c4a6a":"code","804b5a1d":"code","ac7ab520":"code","43dc465c":"code","cd0d7a0c":"code","5d9655b1":"code","da162e09":"code","19757123":"code","506cfa2d":"code","b8e41186":"code","7362b0d6":"markdown","bfb67e70":"markdown","a7e8d791":"markdown"},"source":{"f611fad5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#         for filename in filenames:\n#             print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ee0ae0bb":"import PIL\nprint('Pillow Version:', PIL.__version__)\n\nfrom PIL import Image","a500cb06":"from matplotlib import image\nfrom matplotlib import pyplot\ndata = image.imread('\/kaggle\/input\/cat-and-dog\/training_set\/training_set\/cats\/cat.3664.jpg')\n# summarize shape of the pixel array\nprint(data.dtype)\nprint(data.shape)\n# display the array of pixels as an image\npyplot.imshow(data)\npyplot.show()","6799afce":"import pandas as pd\nimport numpy as np\nimport os\nimport tensorflow as tf\nimport cv2\nfrom tensorflow import keras\nfrom tensorflow.keras.models import Sequential, Model\nfrom  matplotlib import pyplot as plt\nimport matplotlib.image as mpimg\nimport random\n%matplotlib inline","ee1a4546":"plt.figure(figsize=(20,20))\ntest_folder=r'\/kaggle\/input\/cat-and-dog\/training_set\/training_set\/cats'\nfor i in range(5):\n    file = random.choice(os.listdir(test_folder))\n    image_path= os.path.join(test_folder, file)\n    img=mpimg.imread(image_path)\n    print(img.shape)\n    ax=plt.subplot(1,5,i+1)\n    ax.title.set_text(file)\n    plt.imshow(img)","d772819b":"plt.figure(figsize=(20,20))\ntest_folder=r'\/kaggle\/input\/cat-and-dog\/training_set\/training_set\/dogs'\nfor i in range(5):\n    file = random.choice(os.listdir(test_folder))\n    image_path= os.path.join(test_folder, file)\n    img=mpimg.imread(image_path)\n    ax=plt.subplot(1,5,i+1)\n    ax.title.set_text(file)\n    plt.imshow(img)","afd4d283":"IMG_WIDTH=200\nIMG_HEIGHT=200\nimg_folder='\/kaggle\/input\/cat-and-dog\/training_set\/training_set\/'\n\ndef create_dataset(img_folder):\n   \n    img_data_array=[]\n    class_name=[]\n    \n    for dir1 in os.listdir(img_folder):\n        print(\"Collecting images for: \",dir1)\n        for file in os.listdir(os.path.join(img_folder, dir1)):\n       \n            image_path= os.path.join(img_folder, dir1,  file)\n            image= cv2.imread( image_path, cv2.COLOR_BGR2RGB)\n            try:\n                image=cv2.resize(image, (IMG_HEIGHT, IMG_WIDTH),interpolation = cv2.INTER_AREA)\n            except:\n                break\n            image=np.array(image)\n            image = image.astype('float32')\n            image \/= 255 \n            img_data_array.append(image)\n            class_name.append(dir1)\n    return img_data_array, class_name\n# extract the image array and class name\nimg_data, class_name =create_dataset('\/kaggle\/input\/cat-and-dog\/training_set\/training_set\/')","8a3e6af7":"img_data=np.array(img_data)\nclass_name=np.array(class_name)\nimg_data.shape","62b3545c":"def dog_cat_mapping(a):\n    if a==\"dogs\":\n        return 1\n    else:return 0\nclass_name=list(map(dog_cat_mapping,class_name))\nclass_name=np.array(class_name)","e19c4a6a":"input_shape=img_data.shape[1:]\ninput_shape","804b5a1d":"def model():\n    from tensorflow.keras.models import Sequential\n    from tensorflow.keras.layers import Dense, Conv2D, Dropout, Flatten, MaxPooling2D\n    model=Sequential()\n    model.add(Conv2D(28, kernel_size=(3,3), input_shape=input_shape,activation='relu'))\n    model.add(Conv2D(64, kernel_size=(3,3),activation='relu'))\n    model.add(MaxPooling2D(pool_size=(2,2)))\n    model.add(Conv2D(128, kernel_size=(2,2),activation='relu'))\n    model.add(Conv2D(128, kernel_size=(2,2),activation='relu'))\n    model.add(Flatten())\n    model.add(Dense(256,activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(1,activation='sigmoid'))\n    return model","ac7ab520":"model=model()\nmodel.compile(optimizer='adam', \n              loss='binary_crossentropy', \n              metrics=['accuracy'])\nmodel.fit(x=img_data,y=class_name, epochs=10)","43dc465c":"IMG_WIDTH=200\nIMG_HEIGHT=200\nimg_folder='\/kaggle\/input\/cat-and-dog\/test_set\/test_set\/'\n\n\n# extract the image array and class name\nimg_data_test, class_name_test =create_dataset('\/kaggle\/input\/cat-and-dog\/test_set\/test_set\/')","cd0d7a0c":"img_data_test=np.array(img_data_test)\nclass_name_test=list(map(dog_cat_mapping,class_name_test))\nclass_name_test=np.array(class_name_test)","5d9655b1":"preds=model.predict(img_data_test).round().astype(int)","da162e09":"flat_pred = [item for sublist in preds for item in sublist]\nfrom sklearn.metrics import accuracy_score\naccuracy=accuracy_score(class_name_test, flat_pred)\nprint(\"The Accuracy is: %2f\" % accuracy)","19757123":"model.save_weights('model_wieghts_catdog.h5')\nmodel.save('model_keras_catdog.h5')","506cfa2d":"plt.imshow(img_data_test[10])","b8e41186":"model.save('\/catdog')\n\n# TODO:\n#     Post the content on streamlit to create a web application\n#     check for catdog","7362b0d6":"### Typical steps for loading custom dataset for Deep Learning Models\n* Open the image file. The format of the file can be JPEG, PNG, BMP, etc.\n* Resize the image to match the input size for the Input layer of the Deep Learning model.\n* Convert the image pixels to float datatype.\n* Normalize the image to have pixel values scaled down between 0 and 1 from 0 to 255.\n* Image data for Deep Learning models should be either a numpy array or a tensor object.","bfb67e70":"![image.png](attachment:204755c2-a45b-4284-8b5b-6a8687d31607.png)","a7e8d791":"## **Data Ingestion**\nnow we need to create a function which takes goes into our directory, goes into the folders and transforms our images into a dataframe of required shape and size for keras to work its magic on"}}