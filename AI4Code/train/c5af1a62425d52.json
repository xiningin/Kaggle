{"cell_type":{"1636e647":"code","dae5c76f":"code","da4b1a54":"code","6972358d":"code","1f92f768":"code","e56ee82c":"code","ae648a61":"code","8fa54666":"code","17d3fa63":"code","c1f532b5":"code","49b72d93":"code","8d6bd3ec":"code","51935941":"code","cc957ba1":"code","13d96593":"code","ebf6bb38":"code","76988265":"code","e6563335":"code","3d36b0f3":"code","7b133681":"code","5b42d57e":"code","2d908ae9":"code","34d4e6d5":"code","b16f9efc":"code","233c38ca":"code","f815d8e8":"code","ba368fc3":"code","8fd5ea9a":"code","b3240065":"code","797d6751":"code","cc6a5169":"code","a9a9bf88":"markdown","3b675cb0":"markdown","0bc1ee7f":"markdown","00922342":"markdown","1ca208af":"markdown","53e8cd35":"markdown","7864073e":"markdown","22088aaa":"markdown","704e2f9c":"markdown","7410657d":"markdown","8b239d6f":"markdown","3cd74a4f":"markdown","8a08c6f1":"markdown","3a8e69e0":"markdown","adad4e2d":"markdown","ca084b62":"markdown","3aa9caf9":"markdown","e4123260":"markdown","cbee8140":"markdown","4e6757f7":"markdown"},"source":{"1636e647":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dae5c76f":"import numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom wordcloud import WordCloud, STOPWORDS \nimport requests","da4b1a54":"df=pd.read_csv(\"..\/input\/indian-food-101\/indian_food.csv\")\ndf.head(10)","6972358d":"print(\"Shape of data:{}\".format(df.shape))","1f92f768":"print(\"Total No. of different dishes {}\".format(df.shape[0]))","e56ee82c":"col=['diet', 'prep_time', 'cook_time',\n     'flavor_profile', 'course', 'state', 'region']\nfor i in col:\n    print(\"Unique Values Contaied by Column '{}' are \\n {}\".format(i,df[i].unique()))\n    print()\n    \n","ae648a61":"print(\"Replacing -1 with np.nan in all those columns which contain this value \")\nfor i in col:\n    df[i].replace(-1,np.NaN,inplace=True)","8fa54666":"\n# df.isnull().sum()\n# plt.figure(figsize=(10,10))\ntotal = df.isnull().sum()\npercent = (df.isnull().sum()\/df.isnull().count()*100).sort_values(ascending = False)\nmissing_data  = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.style.background_gradient(cmap='seismic')\n# plt.title(\"Value counts\")","17d3fa63":"print(\"Total No. of ingredients as given in data used in different dishes is {}\".format(df['ingredients'].unique().shape[0]))","c1f532b5":"from PIL import Image\ningredients = []\nprint(\"Which ingredients used in  Indian dishes?\")\nfor i in range(df['ingredients'].shape[0]):\n    text = df['ingredients'][i].split(',')\n    text = ','.join(text)\n    ingredients.append(text)\n    text = ' '.join(ingredients)\n\n    \nmask = np.array(Image.open(requests.get('https:\/\/cdn5.vectorstock.com\/i\/1000x1000\/06\/69\/map-india-in-blue-colour-vector-29580669.jpg', stream=True).raw)) \nwordcloud = WordCloud(width = 400, height = 400, colormap = 'spring'\n                      ,background_color ='white',mask=mask, \n                min_font_size = 10).generate(text)                  \nplt.figure(figsize = (15, 15), facecolor = None) \nplt.title(\"Ingredients used in India\",size=15)\nplt.imshow(wordcloud) \nplt.axis('off') \nplt.show()","49b72d93":"m=-1\n# print(type(m))\nindex=-1\nfor i in range(0,df['ingredients'].shape[0]):\n    lst=df['ingredients'][i].split(',')\n    x=len(lst)\n#     print(x)\n    if m<x:\n        m=x\n        index=i\n        \n# print(index,m)\nprint(\"Maximum no. of ingridents is used by {} dish \\nThey are {}\".format(df['name'][index],df['ingredients'][index]))\nprint(\"{} is {} dish and belongs to {},{} region\".format(df['name'][index],df['diet'][index],df['state'][index],df['region'][index]))\nprint(\"It is a {} dish and falls under {} course\".format(df['flavor_profile'][index],df['course'][index]))\nprint(\"Time taken by it to prepare is {} mins and to cook is {} mins. \".format(df['prep_time'][index],df['cook_time'][index]))\n","8d6bd3ec":"\ningredients = []\nprint(\"Which ingredients used in  Indian vegetarian dishes?\")\nfor i in range(df['ingredients'].shape[0]):\n    if (df['diet'][i]=='vegetarian'):\n        text = df['ingredients'][i].split(',')\n        text = ','.join(text)\n        ingredients.append(text)\n        text = ' '.join(ingredients)\n        \n\nmask = np.array(Image.open(requests.get('https:\/\/i.pinimg.com\/originals\/ed\/55\/1b\/ed551ba4c17f8ed5c2fa44212fb8e787.jpg', stream=True).raw))    \nwordcloud = WordCloud(width = 400, height = 400, colormap = 'seismic'\n                      ,background_color ='black',mask=mask,\n                min_font_size = 10).generate(text)                  \nplt.figure(figsize = (8, 8), facecolor = None) \nplt.imshow(wordcloud) \nplt.title('Ingredients used in Vegeterian dishes',size=15)\nplt.axis('off') \nplt.show()","51935941":"\ningredients = []\nprint(\"Which ingredients used in  Indian non-vegetarian dishes?\")\nfor i in range(df['ingredients'].shape[0]):\n    if (df['diet'][i]=='non vegetarian'):\n        text = df['ingredients'][i].split(',')\n        text = ','.join(text)\n        ingredients.append(text)\n        text = ' '.join(ingredients)\n        \n    \nmask = np.array(Image.open(requests.get('https:\/\/i.pinimg.com\/originals\/3f\/5a\/a2\/3f5aa225c77a1966f66f6f7c49256b59.png', stream=True).raw))\nwordcloud = WordCloud(width = 400, height = 400, colormap = 'spring'\n                      ,background_color ='white',mask=mask, \n                min_font_size = 10).generate(text)                  \nplt.figure(figsize = (15, 15), facecolor = None) \nplt.imshow(wordcloud) \nplt.title('Ingredients used in Non-Vegeterian dishes',size=15)\nplt.axis('off') \nplt.show()","cc957ba1":"df['Total Time']=df['prep_time']+df['cook_time']\ndf['Total Time']","13d96593":"print('The dish which takes the max. prep. time  is {} and time taken={} minutes'.format(df['name'][df['prep_time'].idxmax()],df['prep_time'][df['prep_time'].idxmax()]))\nprint('The dish which takes the min. prep. time  is {} and time taken={} minutes'.format(df['name'][df['prep_time'].idxmin()],df['prep_time'][df['prep_time'].idxmin()]))\nprint('\\n\\nThe dish which takes the max. cook time  is {} and time taken={} minutes'.format(df['name'][df['cook_time'].idxmax()],df['cook_time'][df['cook_time'].idxmax()]))\nprint('The dish which takes the min. cook time  is {} and time taken={} minutes'.format(df['name'][df['cook_time'].idxmin()],df['cook_time'][df['cook_time'].idxmin()]))\nprint('\\n\\nThe dish which takes the max. total time  is {} and time taken={} minutes'.format(df['name'][df['Total Time'].idxmax()],df['Total Time'][df['Total Time'].idxmax()]))\nprint('The dish which takes the min. total time  is {} and time taken={} minutes'.format(df['name'][df['Total Time'].idxmin()],df['Total Time'][df['Total Time'].idxmin()]))","ebf6bb38":"veg_dishes=[]\nnonveg_dishes=[]\nc=0\nfor i in df['name']:\n    x=df['diet'][c]\n#     print(type(x))\n    if(x=='vegetarian'):\n        veg_dishes.append(i)\n    if(x=='non vegetarian'):\n        nonveg_dishes.append(i)\n    c+=1\n    \n\nprint(\"Total Number of Vegetarian Dishes: {}\\nTotal Number of Non-Vegetarian Dishes: {}\".format(len(veg_dishes),len(nonveg_dishes)))\nprint('List of Veget')","76988265":"from pandas import DataFrame\nDataFrame(veg_dishes,columns=['Veg Dishes'])","e6563335":"DataFrame(nonveg_dishes,columns=['Non-Veg Dishes'])","3d36b0f3":"Tasks = [226,29]\nmy_labels = 'Vegeterian dishes','Non-vegeterian dishes'\nmy_colors = ['lightblue','lightsteelblue']\nmy_explode = (0, 0.1)\nplt.pie(Tasks, labels=my_labels, autopct='%1.1f%%', startangle=15, shadow = True, colors=my_colors, explode=my_explode)\nplt.title('Vegeterian dishes Vs Non-vegeterian dishes')\nplt.axis('equal')\nplt.show()","7b133681":"plt.figure(figsize=(15,10))\ndf.groupby('state').diet.value_counts().plot.bar()\nplt.show()","5b42d57e":"# plt.figure(figsize=(15,60))\ng=sns.catplot('state',hue='diet',data=df,kind='count',palette=\"pastel\")\ng.fig.set_figwidth(15)\ng.fig.set_figheight(8)\nplt.ylabel('Count',size=15)\nplt.xlabel('State',size=15)\nplt.title('Number of vegeterian and non-vegeterian dishes in different states',size=15)\nplt.xticks(rotation=45,)\nplt.tight_layout()\nplt.show()\nprint(\"Gujarat has maximum no. of vegetarian dishes\\nAssam has maximum no. of non-vegetarian dishes\")\n","2d908ae9":"index1=-1\nm1=-1\nindex2=-1\nm2=-1\nc=-1\nfor i in range(df['diet'].shape[0]):\n    if df['diet'][i]=='vegetarian':\n        lst=df['ingredients'][i].split(',')\n        l=len(lst)\n        if m1<l:\n            m1=l\n            index1=i\n    elif df['diet'][i]=='non vegetarian':\n        lst=df['ingredients'][i].split(',')\n        l=len(lst)\n        if m2<l:\n            m2=l\n            index2=i\nprint(\"Which vegeterian and non-vegetarian dish uses maximum number of ingredients?\\n\")\nprint(\"{} is a vegetarian dish which uses {} types of ingredients which is max. among all vegetarian dishes\".format(df['name'][index1],m1))\nprint(\"{} is a non vegetarian dish which uses {} types of ingredients which is max. among all non vegetarian dishes\".format(df['name'][index2],m2))","34d4e6d5":"s=df['flavor_profile'].value_counts()\nplt.figure(figsize=(15,7))\nax=sns.countplot(x='flavor_profile',data=df,palette='Set3',order=df['flavor_profile'].value_counts().index)\nfor i, v in s.reset_index().iterrows():\n    ax.text(i, v.flavor_profile + 0.2 , v.flavor_profile, color='black',size=20)\nplt.xticks(size=15,rotation=50)\nplt.tight_layout()\nplt.xlabel('Flavor Profile\\n',size=20)\nplt.ylabel('Count',size=20)\nplt.title('Counting of different flavor profile dishes',size=20)\n","b16f9efc":"# print(\"Distribution of dishes based on their flavor profile--->\")\nplt.figure(figsize=(10,10))\ndf.groupby('flavor_profile').diet.value_counts().plot.bar()\nplt.title(\"Distribution of dishes based on their flavor profile\")\n","233c38ca":"# Counting of ingredients used in different flavor_profile analysis\nbitter=0\nsour=0\nspicy=0\nsweet=0\nfor i in range(df['flavor_profile'].shape[0]):\n    if df['flavor_profile'][i]==\"bitter\":\n        lst=df['ingredients'][i].split(',')\n        x=len(lst)\n        bitter+=x\n    elif df['flavor_profile'][i]==\"sour\":\n        lst=df['ingredients'][i].split(',')\n        x=len(lst)\n        sour+=x\n    elif df['flavor_profile'][i]==\"spicy\":\n        lst=df['ingredients'][i].split(',')\n        x=len(lst)\n        spicy+=x\n    elif df['flavor_profile'][i]==\"sweet\":\n        lst=df['ingredients'][i].split(',')\n        x=len(lst)\n        sweet+=x\n        \nprint(bitter,spicy,sweet,sour)\nTasks = [20,644,345,2]\nmy_labels = 'bitter','spicy','sweet','sour'\nsizes=[20,35,30,15]\nmy_colors = ['yellowgreen', 'gold', 'lightskyblue', 'lightcoral']\nmy_explode = (0, 0.1,0,0)\nplt.figure(figsize=(9,9))\nplt.pie(sizes, explode=my_explode, labels=my_labels, colors=my_colors,\n        autopct='%1.1f%%', shadow=True, startangle=90)\nplt.title('Proportion of Ingredients used in different flavor profile',size=15)\nplt.axis('equal')\n\n\n\n\n        ","f815d8e8":"print(\"Total No. of different states given in data is {}\".format(df['state'].unique().shape[0]))","ba368fc3":"s=df['state'].value_counts()\nplt.figure(figsize=(20,7))\nax=sns.countplot(x='state',data=df,palette='Set1',order = df['state'].value_counts().index)\nfor i, v in s.reset_index().iterrows():\n    ax.text(i, v.state + 0.2 , v.state, color='black',size=20)\nplt.xticks(size=10,rotation=30)\nplt.tight_layout()\nplt.xlabel('State\\n',size=20)\nplt.ylabel('Count',size=20)\nplt.title('Counting of state wise dishes',size=20)\nprint('State which is the origin of most dishes with frequency is {}'.format(df['state'].value_counts()[df['state'].value_counts() == df['state'].value_counts().max()]))\nprint('State which is the origin of minimum dishes with frequency are \\n{}'.format(df['state'].value_counts()[df['state'].value_counts() == df['state'].value_counts().min()]))\n\n\n","8fd5ea9a":"dicti={}\nfor i in df['state'].unique():\n    dicti[i]=[]\nfor i in range(df['state'].shape[0]):\n    dicti[df['state'][i]].append(df['name'][i])\nfor i in df['state'].unique():\n    print(\"{}: {}\".format(i,dicti[i]))\n    print(\"\\n\\n\")\n\n","b3240065":"\n\nplt.figure(figsize=(20,20))\nsns.countplot(y='state',hue='flavor_profile',palette='gist_rainbow_r',data=df)\nplt.yticks(size=10)\nplt.ylabel('State',size=25)\nplt.xlabel('Count',size=25)\nplt.title(\"State wise distribution of dishes based on flavor profile\",size=15)\n# plt.tight_layout()\n","797d6751":"print(df['region'].value_counts())\nTasks = [74,59,49,31,25,3]\nmy_labels = 'West','South','North','East','North East','Central'\nplt.figure(figsize=(8,8))\nplt.pie(Tasks, labels=my_labels, autopct='%1.1f%%', startangle=10, shadow = True)\nplt.title('Dishes distribution in each region',size=15)\nplt.tight_layout()\nplt.axis('equal')\nplt.show()\nprint(\"West region of India contains max. no dishes\\nCentral Region of India Contain min. no of dishes\")","cc6a5169":"print(df.groupby('region').flavor_profile.value_counts().to_frame())\nplt.figure(figsize=(12,8))\nsns.countplot(y='region',hue='diet',palette='nipy_spectral_r',data=df)\nplt.yticks(size=10)\nplt.ylabel('Region',size=25)\nplt.xlabel('Count',size=25)\nplt.title(\"Region wise distribution of dishes based on diet\",size=15)\n# plt.tight_layout()\n","a9a9bf88":"# Flavor Analysis","3b675cb0":"**Number of Null values in different colums**","0bc1ee7f":"# Time Analysis","00922342":"> **Maach Jhol**\n![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcT0QvgbsepO2fsAzbgOgNkjCC8SAWCdYKUpLA&usqp=CAU)","1ca208af":"![](https:\/\/media1.tenor.com\/images\/ac38e0f146cbef946cf78c0176fad1af\/tenor.gif?itemid=12295338)","53e8cd35":"**Importing Libraries...**","7864073e":"**Loading the Data....**","22088aaa":"**This Notebook will help you to find some interesting fact about indian dishes and much more**<br>\n","704e2f9c":"# Number of Vegeterian and Non-vegeterian dishes in different state","7410657d":"# Data Cleaning","8b239d6f":"# Ingredients Analysis","3cd74a4f":"> **Ghevar**\n![](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxITEhUSEhMWFRUWFRYYFhcVGRgaGBUXFxUWFxUXGBUYHSggGB0lHRcVITEhJSkrLi4uFx8zODMtNygtLisBCgoKDg0OGhAQGy8lHSYtLS0tLS0vLS0tLS0tLS0tLS8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLS0tLS0tLf\/AABEIAMkA+wMBIgACEQEDEQH\/xAAcAAABBQEBAQAAAAAAAAAAAAAEAQIDBQYABwj\/xAA+EAABAwIEAwcBBQYFBQEAAAABAAIRAyEEEjFBBVFhBhMiMnGBkaFCscHR8BQjUmLh8RUzU3KSB0OCorIW\/8QAGQEAAwEBAQAAAAAAAAAAAAAAAQIDAAQF\/8QALBEAAgIBAwMEAQMFAQAAAAAAAAECEQMSITEEQVETImFxMkKBkSOhsdHwFP\/aAAwDAQACEQMRAD8A8UD0ocmBcloYlaUsqIFOzoUGwpqeHdUI2onhxSOIbJyevwoJTj6\/CSDNhqskaxzWc06U0NfoGk+gTv2Wr\/CQsY7MN1M19lAMK8G7TbVS06Z0P9SlaQyZwqAG6UwQu\/ZiU9uCOsobBAK1FDOCvTgpsLzpF59kdh+yFepGWlU9XDKP\/aFSOQRxMmnMeRot7Q\/6a1T56jWe8n4A\/FWND\/plQHnr1D\/tDR9TKonYlUefYXF3vZWtHFyNb7novQMN2EwDNaTnn+d7vubAVvheD4an\/l0KbfRon5KnLEmMptHmTKZeZptc7Y5Q4nWLwP17K4w3BsQ6\/dOFx5hG0G5IgfevQh0t6JEPRXkOsxzOzmIOoY3SZPpsJ3HuiWdlnRDqjfYE\/ktRCSE3pRBrZnR2VYfNUcfQAT96ezspQGpqH\/ygfQK\/hdCPpx8A1MqG9ncMPsfU\/mpBwPD\/AOkPefzVnC6EdMfBrZXf4Ph\/9JvwkHBcP\/os\/wCIVlC6EaQLK13BMOf+yz4Uf\/5\/C\/6LVbQuhakY8N\/wh27h6KUcG5v+EcHTYmB9f1dNbWjSYjf9aLm1yK6UCP4WwXkldRwdO8gn0RpozfXT0\/qpe7G3pbUevIIObCoohpcPYbBnzf8AW6LpYGm3VrZ9PwUTSRzj4j81Ow2gfP603StsNIl7pgGgETcxfp93ymuptdJHLl6fVOY0auNxP3WVlguC1ql2U3G8T5WxzzOt8Jd2bYqKLpIadrX11v8AgpHUBvHvb29Vq6XYxxvUqtZ0YMxiZiXWH1Vvh+zeFZq01DzqGfoICpHFJiuaPO24aSA2XE7AEn4CNo9lMVVu2lkB3f4Pp5vovS6LGsEMa1o5NAH3JxcqrClyK5mIwfYE2NauBzbTE\/8As78ldYTsng6f\/bLzzqOJ+ggK6JXKihFCtsjoUGUxFNjWD+VoH3KQuSFcmAIuSwuhYw2F0J0JYWMMhdCdCUBYwyF0KTIlyLGIoXQpcgXZQsYihdClyhcGhYxFC6FNlCXKFjEELoU2QJe7Cxjw2mTodJRrKGh\/RSdzurHhHDa9eBSpucP4vsjnLjb6ri54LguQAXiBz6JwPIW6\/gFssD2IFnV6kfy07n\/kbfRaHA8Mw9H\/AC6TQf4j4nf8jceydYm+RXNHn2E7L4itdtMgG+ap4Rp1ufYFaDh3Ydrb16xd\/LTEAdMzr\/AC1jqhTC5VjiSEc2wfB8Mw9L\/LpNB\/iPid\/wAnSUU6qUxIqJUKLK5DYvFhg8pJMRHr9VX47GVhFi0ESJ9rDr011XNk6uEZaabZ0Q6aclZcrlmcBjcQSXHM4DQFp8U8oFyrOjxcEeVxO4aCYPJCPWQbp2jS6Wa4plmkCrHGq+qGhrwHltyDYE3PSBJR1WiWAtY8OgQJ1nqRoY6LQ6nU37dvIJ4dKW+5NC5NwTXuaC4Qd9DEe6fVqNcDTlrtiScgvyMG+6o8ytJLkk40IocRXDQeYi3rooMPw+rTH7qvTewuMNfzO2Y2PsdlG+qHmawaC4CG21a0DNfSYn3KXLmcYW6TGgo3vwV1Xjrw4NLQAZg87xIGqsqWJrtJbVoutoWgEH1IsCgK\/DjRqNxFMmoGBxDCJNw6C0k2gmYVp2e4w6qwmqwh1xoQDG87Llxzmpbyd\/2OjJLHxFIloYsOEgEXIggg26FPNZRv4hSzZQ7xmYtp1mPqiAyfNrGvNdUOoT+fk5nHwRGqkNVQVg8EwARtBUGHxYcSD4XDUH802PqYT4A4sO7xJnTAEquKPzpcyZCUBYxIHJQ5MhOAWMPDkspsJYWMVXDuy+FowS3vnD7VSCPZg8PzKuDV2FgNANAopSFKklwYcXJJXBKiYQJYSFwTKmIaDaTp7\/CnLNCOzY6xyfBIlbf9bIDFVq58VOi4tkgkxryDdUThw9sS4d4WyWTcAzEjePe4UV1cX2f3RSWBxVtoApV8RRxRbWoscBq7MWZWGCSM2pII2QnaDiwqfu2ljWi925nDlAIsb66q67Y8aux8ZA1gAdVDXOcZkkEyBfl15wsBjKneZq055mS25J5dFJzhF1BBptXI0\/DcfiGBtCninjM1wyhwGaBeLOgwdjKnrUHw7wuL3WcLkkC8Etj9FZ\/hXBqtQNI7wGJF7gGzr8ot1HRaA4t7SXuDXkEtBdZugGxsA2b3Twya1SEaHDCFoJFQNcCRlMNMkbCSTe1xNlDiaLs8d8QS2\/msQYv4ZjrI3RWI4t3cVTRaC6C5xaQcxgFwBDc1hrH2fkDifFKTh4qZu8luoiYh8tM7kjeVZqD2kxfcPxzKrA3IcxpiDJFpbclwcbXn\/wAhZU+CqPfmFWGw6AfMc0wRlIkQWnT4VhieLUadNwIquj7NM5nPLmkG4HhEbyOkyo6uMbiwYw\/cuBcWFvnc57mudmEAEGXehvKnLBFReh02a2DU+K5m5Q5sMkauGUWOUg6aDloj+G0mOpufUac4do1wcO7A8djE+tue1wH4XDU2FlaHud9kBwgjQl3XS8o3A1AIyMpHMAPA2XNvMyPLtseXNcTwNO3T+ylQfkMxAw5Azuu1sNEy08ogZtB\/dFYXCmmXOBJa64IsItHh\/qUUcLTY0PqeNzRPiAm14gaJxxAqsFRrXERIERNtACqpNSatCur2BqTWFhFRoJvdvIzGt1PhKb3gmnTcRTAl1QhoaDOUkXdt\/Dss7U4\/ULoNPIAcoGbxuJ8oDQN1ruzWObke2ozMZaajYIeMpBAJcQI6eukI48SyOuyDaS+SKpSq5RUEtZo8HKQ4kxLXRMSD8+qz3EKFRrpDqRABcRUYQBBuA7NaNyVuu01F9eiCWtyd6zM0G7WkNcMj9AZ194jU1WK4eO9fSu4sDiBUmXNIBABaBmtYH5Mrslii1QkZ0UOFqVGjx0w0k3AfmHqDE+xHurBjx6eqo+PcQFEupNpGBALJBEwHGCDrcTfZQ8C42KjxTqMDbGDIiRcAyZvdQjlcJOPYzps04YnBibRqRpN+k\/cl75o1Nua6FlTBpHZU7KpnNgwusq2KRZV2VSlMhYwOlUbnqCriQEA0FOeoKmJAVfWxaFfVlK5DqIZjceA2Z1MfmoKuL7pgqEVHlzoHdNzRH8QmbzaORROG4WyrTD3PhrXGYAvFiJOgTa\/HqNBzqYa4EDqQR\/EdvdeTOVZHN9+Po6pyjGCh\/IXQ4tFMFxcC9pLSWuEG4vPlNt0Hi31rFlMPqt0LzlgHU5rnRXfDaYLAYOZ1zBsNNb2QmNxOVxa6QCCJBGhtrsmVupS\/77Ixe4Ti+GUqtNgqtDyNbmGki42+qgocFw7PKwCNBtPpos5hePMo13UadKQ4ue4gBpcd3AzDiY6K4w\/GWVXEAW1B2J3HQjkbp24v8kHJBx44OxlN7b03X3FxP6hCniGIYAA0UsosGw5zuRcTy2HVFYrGsAEVAHO8oMzPogqzKhExndtF\/wC6EJadotk7AZdV8VQuc\/ckk+gvt0QeGxId56Zb4iBO8G1uquWYctYXva5piS3WI9NVXYniDWDM+A3+I6fKok653NySOqGQA0a\/RT4R7plhn+ipcd2kpNbIdpoB+tFDQ7VlgkCZ5hPb7jaGbNuGYW5q7RbQbk\/kup8VYzw0mhu1hdYzEdpalSSQWtAmYJU3DK9ekO9qQx7i0tFi5rTaSDYSCl54H9Npbm6oMJ8T9OqdW4gHODGjXSFicfxZ4efGYnQ6wdCt5h8LTa2nUYJEtudyYNzyN0Ye7ZCzjp3ZnuMYGoC9r2AWJY8GWv5Q4Xa651jQ30lnD8dXoBssDxbxSHEgaEFpvrz\/AAWqpFjqzmd27M4EuZlOVrc2veeEEakztzOqUsFTqOfGU053Y5pMeWXeV0W0Gy6JYml\/TdEdXkLwOMNZjMj25c8llQCxg+YGfaNyFZcSpF7qdeleoabmPiNGEHlFnH0v0WUfwTEUpdSqB7S6ZcYLWDa4ALbm4O3yb\/jlVjHNazvA3wvMB8mRMl05Rcev3JCcrqaa\/wAG27GI4+cRUqOOIbTYR4YAzFo0a1piDMi4F4lQO7MV8PVpOfdskuIIMZRNxrBJA5XV1TpVnvc80e9Ni0ZWksA0EbESOqHp8Wc4ubUactOQZkFsO+ZkC\/TVQlkUXqknX0G2W1PiNJgvadmj8lNSr8jY7hV+VmUOY8EuBdf8ABdJhav8JBGljvoRCa97vYKJOLY2tSDXgEjNc7RB83RW+AxHeMDt9D8bdLoWlBYQbyND910HwFlZlRwdSLKZFrtNx5TINzFk8ZOM14ZSlKD8ov4XQlXLsOczNbFEoZ1SVGSkUXI6FEcSuaJXNEoqhSDYc4xrt6j2UcuVY42ykYtukXPD2ONBoIsMw+XExHuof8Ia4nM2xA8UjQGcusn4hT8EgtDXEluszf8AV1Y1YiAuWOKOVKTEye2TQ3vAGhrRAGgVTxXhgrDSNZdtYeWZsev9i\/H4zJAGpPt7pcM\/M6k2oX02mcxYR4i4i8vECzWxF9b3V1KDehk9yg4lwv8AZ8PTeHEO7wh7WtDgGN8hzkW3sd5ROE4AwtFVzzTe4yKlN7GmCJh7HC97Rf2i+h43wS5q0mgikxznlz\/E0sBJBEeJwDZ0ttOqy+AwzMY01TWNNjTOZx8ZeNAAbRcWHVO8GNZFSoMcso8E2IwFM1yQSXW8WrSMog5dAYgGFd8FrsLsm41kbc1l6XFA6q\/LTLchAz7PboJvAvN5vE9BYAltwXEkg+EZXEHXWAdhMrnlGWN3XcW\/JaY3GNFQtDmkx5ZE7xb2KrsThaWJYWOGXpF2uGhCCxmNFMioGZjl1ex2YNm4zaXIEjorWnxBr25nNDYaCQNROiMZP8pPYatrR5t2h4Y7CvyuEtNw4A5T0\/lPTqszWxRLp9l6v2ibSxFB7fC4hpy5T42uF5AnxBeRYzDuY4tdqPr1C6MOiW6HlkbjYfQ4iWG8kW0sr4cX7xgbIkfOsxf1KyDKnNTukAGf6qjxo2tyLzjHEAKkuHiyARMxJJv1XuXCMS\/9jY2gXEGiw02vAENytLn5ifEQZ+9eA8B4FUxb4pwGNg1HEt\/dtM3IJBOh0XrXCsVXFKlhaLQ3umZBWcDmc0TrtFzbrqknKOPd8szuf0jT47jQZTLS0xUEEjS0EidSNRPRRUcY8lpytfliAdQG+XLrb0j8qqtwgM\/eOcXui5uTe1gDbVT91TLYMuOrTcQeoBv6G3RGGd8S5JSiuwTxzEtqTlbkuftFzQ7MJJBPii0QLKnxvEcPRph4eSXOBc1gaRnqG\/idYbyJUeLpUSRmqkm4guFtZGUaboHi\/CzU7mMpp03h8AzmOonToln1NVSDGC7htTHVnU3MpvIBie8aIMWAIBk6neLoOi2sZZSaGmIIytDCbGW5WjIetze8q9cHgXDAOh\/UoatiA+aYJBIu4KM8rT9z\/YaMqVFBVAeCxxLarbQCA7qQR5xEf0T8PhWsIcXRliJdE7Ewbn53KC4zggHtaXCC61rz+a0fDWsc3IWN0vAAnnJ3UFFz55MtL5DqTGkafU\/ekzBjSZOVoJ9heLpgaG2E+5lUfafFkZKegIn\/AHRt7fiFeTUVqfIccNUqRsW6BLCiwTiabJmcrZnWYE\/VTL0FwQapmJAShqUBOAUTosdSMGYB9brnulPbTKmbQsY5KWXFGa3Q8Mji9gLheMd3ZYDBBI9b7qy4bxFz7Eys88ZahI0cJMcwP6IT\/EHU3zeN9Of915+Kbi9jqy4tSdG+fhs3IKF3CpY5rnkkm1tAji7N4m3GsjSE9oMLucE3Z51gnAnVMKXAuNVpDh+8+yHAz4ryP5SsXULmPbkonI1znBodrPMAA7DRbZ4IJl0giwgW99UNUaCRmEtG0C\/0KEotpIDG8Db3kuyHvHS5zMpDJJJDnXEkG4bGyk4TwKp3rKnhrC\/7vMQM0+A38OUfw25IPinaPBMp08tI94x7TkDYqU4ADnCq7XTyq24a7E1GsrB7y18kSQHlhvTc7cOiNCOvTpxu9nuxaaKjtXw+tSBygsbWLhDJLGPJAe2BMcxNxJWRr4LFd4xjhmgASDmBDiMocWGWi89J2XrtI0S006tKrUgm4OZ2Z0uMj7RvuSqXivD2U2vr05bDi3O3w52icwcBbSB1ndCeHU7MnRk6nYdxpjEUK1N4aWkta\/xMM3FwDYyPZT4nspQrkOq0oMzZzspnWQCPWxCeMTWMhjhDnTcNa69tWgDT+6vqDpaAWxtFlKUIx3ixlaMnw7sLw4uIl9Qgnw5nANvpYA9LlWPGOH0Aynh6mHD6TBFPL9idb2N+c3V+MrQTYfCrcTjQXxlMZZnabWPz9FKTbrfcdfRS8A7NYanUdVp1KjJaGuoF+skm8jMW2+uq2BqtnPcdNp9FSd0yp5myNR+c7J9cVGMmi8VGOF21DNwdGVPM06TIcminLljNRfDosiwy95JIcbDYW8o+FNjWhoDGAhxaT4rHTYNJ0VJW7Ql9SgyoDhKNNpDiQTndBgl7QZvAAI3Kk\/x3DAgkvkaOyEyDG\/5Qr41BE5xkuQTiXZNgqFwD2VID4JOV1iSRubwNeascJSHdiWEBsk5SItubfmpMXxHD4rK4uqAsyhuXSzvCIdfU6ShaOKYx\/cGuM0GA+fLs0tEydbDki1jXCQislfRJGYOfDnRkMHKMu0Xv1+iGOGeCQGmRsdVPkqwRnyB1i0HLaTBMHl0KNw9FoJJMk69fgLnSjL3ONMe2V1MAvyuG0zH0RhAEZdlJVqNB0Co+PcQgeB3iJ+ztzJAQb0p2xoxcnSLhpmQqftOGRSBPjz2HQ2d6XAVSOPvZo4kfzdN+noqp2KdWqBznEyR7X06KampKi6wuErZt6fF3bsPyFMOKO5D3KpWPUwcu305P9T\/t\/o5tSXYa1qJpUlJRoo+hh09Gsgo4ZH0cOApadKFIg0CzEcQoZC7QZS7X1+UAYcyCRBB21E+GRqrvtbhHeZujtY5gb87ArP1gRTpXNiASdCAReeWi8ecNMmvk9aEtUUy44Pxl9BrQ0EsgA5TOWbnXQaW2Wlbxb90NCDPrJ\/X0XnuPxWXKIs4Ai+l\/rKYzHPgkPymSYMkfT9WVceSSXwQy4Iy3XJu3Y\/promYjFAcpWNp8bfIBBJGhbebTIGyIrVn7vaT73Px6qzyJcnP6Mr4LTHYBlRp8IzONjpHO342V9huI02tDDVzOEBzGNll2t8IAaMsS25JmNSFjG40tIkiSNr+3qn4h4gVRlLrtynM0g28ZqZgBsIuTC6MORN0iOSLXJsKlIOl1J3dPDvDnHh8tw5jjcEg3G6h4hxB2IpNoOORrCDDbAkc7X3shuHcUOWk94DjleM5mATly72Bgm41FkIcQ1gtzMSnzy\/SLFBwosptBkucmt4u0vFMvgkWCjwXEGukOta0KV7MM7xOYCdidVzsemF1agiBcnVQUcI1pk7mdz\/ZTUiyLaeqJ\/aGsaSRfadlmka2MDTc6DZZfHYHD0nXc9hMuHdz66\/krDA4qtUxDw69Mjwwpcdw6m5xL\/wBQpaWuEF8hHB6Qq0QajmvYdDObMOs7pzsJTENpfumgRDAIMaEg6nqgWOo0qeSn4QOZJkm5VfT4vBPIIuVUhoRk0aU4emfMR1yANzHmY36hKH02kua0An7US7\/kbrOP42AbztPvokrcaBEtH1hM8q7sKwy8F6503Q+I4k2mLn2GqzGI45UcPD4RPzz6qrq4szrMbJHk8FY9O\/1Gm4j2ikZWiCZudoMfiFnatfWDrrO\/NCHET05yhKmJvHweZSVKXJdKMOAkVBBlEcLdLxGguelkAy5jl+irbhzIHU6q+LHciWWdIvaTkQCgqBRYK7jhNJRooxjYTWBOLkG0t2AUlI4pnejmkLlKOWE3UWmNTXIPjaIewtO4MeuyxGOdpTcIILptYQAdluys5x7h5Lw9gkusYix5mdly9Tjv3I7OmnWzMdxmiDTZlu4SBFpuYVfi8+chsiGyQYOUDUToY0VticNlFTOLgtAveR5vTZD4Wq1z3knVpEHqNr84U4OkdEtwDD4w5bWIkW+t\/RK8uF5MkAj36qTBMHeAEwII6TBtJUGMwkSQTrYfeVT22JugjD8QNiCZHyEY7HbAB038QmfnSfYqjxFeB5b8+gSYfFgnKbHafxW9L9SA5p7M0uGxre7y3aS6TBkAbhs3HO6a2vrLibmJtHKefsqBmKcXX+mwAUxxEboSjLVdgjGFcF7TrOzMgn+c7AbJXYwkkB1gQGzaed9oVAzEu0kETbqE5hdFpjrf29Fmn3Npgeh4bGU2sygyOcghxi5HRQYjFd40xYfesIcc4HILNJ+FK3ilRvgJgaJ\/2J+l8mno9pKjCGObAbYH0sLIXHcec4kgwDrf7uSztXExcmV3fhzczTI+78lNqT+iqhBP5LQY8xZ2onf71A3FkEEmIn2G6q6eL6iJiw3Ke6qbtg9SUPS3H1qtg12NzXJkX1CjqV5AgyJ+vooA3wlDhhBkHTUIqCBrYRiMURAveNE+o0Xi1hzveZQbqRD5JsdFI+q6ZBsn01wJqvkkBIF\/T9FNe6SOgt6qCpcCD7IrD0E6hYksiWxNhmk3V1g2ITDUFZ0GQrxjRzylYZSU8qFqla0nQH4VSRspSG6D4ljm0aZe68aAauJsAOpMKr4NhsQ55r1XkF0eAeUAaAD316rnyzT9lX8FoYri5t0v8suzRTsq6V2ZTw9PhwtuKqxHJvkRyHrNRcKNzFdxsCZk+PcNLh4RvJ\/ssRiaJpPncG0g9V63UpSqPi\/Am1RqQVJ4qdovHM6o8tr4t4MyPSFYWewEfagnmIFx8qw4j2TqtuLhVBo1KUhwI\/BaUdtuQxyb7iMjytMkdVE\/DgXi8zZA1KZBkG\/MI3C1S5pDjcb8wi41umFTt0xzcQQTYXSVploGhN\/wCY\/FAGIkc95XZ2uuDHqtpreg2ntZO+qIgC40Q7KZBvNrxz9E+oQL87QFznhwGxQSo1kmIBcPDsQ79BOrGWXEmfhQGpsDBG6idWfBBOv61WUeDOVBNWlIgck9zIZE8p6oNlZ9ryiM0XM+6zi0FNM6gADlBvqn1i+CRc\/gmGoJBi8QueWzqfZCtzXsDUs+cF8oqpUbmmbxpyH4pPETaYUgwbidIT1bE1KKGUqxPmUzKROt+SKo8O5qxo4JFYxXk8AFLDI+hhkZTwyPwfD3v8rZ67fKookmwOlSRuFw7nGGtJPT9WV7g+ANF6hk8hYfOpVzSptaIaAByCahbKrAcCi9Uz\/KPxKu2MYBGUfASALsw5o0LZUcbw+ekRuIc3\/c24+oRWEqZmNPMA\/ROddDsYWeXTl+S4cmR48mutnz8F01KGnuuA2V0IcYjoVRcY40CXUabc7jrcgNn+Ij7hdPPqsTjcdzY8E5So0eIxAY2SQBzJgBD\/t9\/K4jYgR\/9R8rMcHxZZUy15cbRUdctkWF\/KCdx7rXsaISQcsrcoyr4K5MaxbSV\/I2nVDrQQeR1SOYo34ETLXFp\/l\/I2THU6w0cx3+5sH5afwVozml74\/wRcYv8X\/I59FBYnhbH6tCmqYnEN1otcP5X3+C38UOeOtaYqUatPqWhw+Wkn6LetDvt9hWCb\/Hf6aKDiXY9jrtss5i+ydVlxf0XqlFzXtDmmQRIKcaI5KulPgnbT3PFK3B6g1aoBgKg+yvaa3DWO1aFXV+zrDoIW0m1HlD6NSIylMFGruJ9l6ZV7OckJU4IRstpDrMDUoVDtHophhnkRF9ytmeGdF37AOSGg2sxTOGvRbOHvIgrWDA9FIMEtos2sytLhCJp8LHJaQYRSswk6CUdJtRQ0uHDkiWYMclf0uFOOsD1\/JG0eGUx5iXfQI0LZnKWDmwEnorTC8DedYaOuvwr6kGts1oHopA066IgsCw3CKTdRmPXT4Vg3kB8KN1Vo1MqvxvHqVMXcB6LAst45lMfimt\/qsBxTt8wSKfiPS\/10WS4l2nxFX7WUdNfla\/AD03jHa6jSF3yeQWTrf9RXScrDG2iwjnE3Jk9Vyxj6ALlH3s6JjmzupGABcGWPUZsmmPtj57sotMV5ZKFFTwjJkNE+ikBXSu\/wBOO2wim1wVnFOEue4uZF25TPK\/5lEYcV2NAysdA\/iI+uVGSn5lzLpYqbmm0zo\/9LcVGSTSAHcTc3\/MpPaObYcPpf6KfDcTpP8AK9pPKbj1GoU7gDqqvHcEY++h2IsR6EKObJnx\/juvoMPSnzsW2dNc0HUIPAYdzGgOeXRudT6oovXLkzycbnsDSlKouxzCBtHonioOaHJKYCd4HupQ6\/qFtCOr9jenHlsOBC5AF4H2h7f0Tm4sDcn9dV6ODqc03U8bX8E5QiuGG5Uw0QUKcfyHyo3Y48wPRdxMIfgwdkJVwTOgTDiCdyVzc3JCwkTsINkowfMogUjzXOcwauW3BZG3DNG0+qnYOX0QlbitJu6q8Z2spt0IC1pGNF3Z3TXVWN1K89x3bj+Ez6Kgxnaes\/QwhfhGPU8Vx6mzcLN8S7csEhpk9LrzqtiXv8zifdRQjuA0PEO11ap5bD9bKkr4l7\/O4n1\/JRQuhakY5cnQkKxhqWeic1s6BFN4e4iYQckuTUeztrN5lSiu3mq0pAnNZaCqOaXvOqr2J4QCtw3vY3TKuMA6oGokq7eoU22V0oJHEHXMBRv4k\/aPhQDdI1ar5BQ92Pqc\/oFzcS86krm6qZq2iL7C2QuqOPP6rmh3L6IpqeFRRQrYKKL+gTxh3bvT6yq8UjQLDyxg8z\/qo3Y2g3cFZ7EKpxCnKVDJWa6r2ipN0hV2K7YNG4CxmMVFW1Wi3ID2Nti+2k6En0VPie1FV2g+SqFie1FxXcCYTW4lVfq4j0QrgTrJ9VKkWXwaiLKlyqVi5azURAJ2Vc9KEQiZEmRP\/JchZqGhimpYYnZJS1VhQ8vv+SSc2gpB3CuFE+Jwhu3N3p0V8ykQIBgbCyUaD\/aPuUS4pybZaKP\/2Q==)","8a08c6f1":"# *Please Upvote!*, if you found this notebook helpful!\n\n**Thank You!**","3a8e69e0":"![Ingredients](https:\/\/www.trainingjournal.com\/sites\/www.trainingjournal.com\/files\/styles\/original_-_local_copy\/entityshare\/30051%3Fitok%3Da1-NdjWT)\n<br>\nAn ingredient is a substance that forms part of a mixture. For example, in cooking, recipes specify which ingredients are used to prepare a specific dish","adad4e2d":"# State Wise Dish Analysis","ca084b62":"**Unique values contained by different columns: **","3aa9caf9":"#                             Indian Cuisines\n![](https:\/\/i.giphy.com\/X43Yzx0G2wG4.gif)\n\n<br>\nIndian cuisine consists of a variety of regional and traditional cuisines native to the Indian subcontinent. Given the diversity in soil, climate, culture, ethnic groups, and occupations, these cuisines vary substantially and use locally available spices, herbs, vegetables, and fruits. Indian food is also heavily influenced by religion, in particular Hinduism, cultural choices and traditions. Centuries of Islamic rule, particularly by the Mughals, also introduced dishes like samosa and pilaf.","e4123260":"# Dishes analysation based on region","cbee8140":"# **List of Vegeterian and Non-vegeterian dishes**","4e6757f7":"# **Name of dishes in different state**"}}