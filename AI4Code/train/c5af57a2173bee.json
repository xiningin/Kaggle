{"cell_type":{"3042094b":"code","7a4f4be7":"code","3e7153ed":"code","5311eb52":"code","2ee37e3d":"code","f3622507":"code","edcaa6ba":"code","0fc2e321":"code","e5b2bbc2":"code","ed857082":"code","847d16fc":"code","eb2bc6fa":"code","25bba0dd":"code","3fe7fb36":"code","8ad3dc92":"code","12d8c97d":"code","04e0f1b2":"code","f29b80b8":"code","3bbd2c2b":"code","ff143828":"code","a9c394e9":"code","f919a55d":"code","c020abe1":"code","860439be":"code","cf7333ea":"code","76256067":"code","b8670fbc":"code","ce74c01c":"code","9a25a315":"code","c2dbd19e":"code","0beee689":"code","a0d67d67":"code","20bcc462":"code","fc48b2bd":"code","5e355ba3":"code","673558c6":"code","de555822":"code","3130f0aa":"code","2d72c653":"code","da3aaa26":"code","51156c0b":"code","90af73de":"code","b5fca34d":"code","72da99e5":"code","f40f5207":"code","1d4e8e97":"code","e4c5310f":"code","fccab11d":"code","233dd0d8":"code","1b69452e":"code","a613e76f":"code","c2eebb97":"code","14304557":"code","cd150220":"code","c8b4490e":"code","0263bdd2":"code","73e23dd8":"code","016f4667":"code","7175bf92":"code","491c5fb9":"markdown","0dfc0655":"markdown","42fda383":"markdown","a3ce5795":"markdown","9ea50cff":"markdown","56ff94de":"markdown","0466ec6a":"markdown","b4fefb45":"markdown","9ccece99":"markdown","ccfe8e6d":"markdown","0e361492":"markdown","7bd06c87":"markdown","b527fc4e":"markdown","8f14b9dd":"markdown","c35efe57":"markdown","e50fb8f8":"markdown"},"source":{"3042094b":"import math\nimport numpy as np\n\nimport pandas as pd\n\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import accuracy_score, roc_auc_score\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom xgboost import XGBClassifier\n\n\nplt.rcParams[\"figure.figsize\"] = (20,20)","7a4f4be7":"test_df = pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/test.csv')\ntest_df","3e7153ed":"train_df = pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/train.csv')\ntrain_df","5311eb52":"df = pd.concat([test_df, train_df]).sort_values(by='id')\ndf","2ee37e3d":"df.info()","f3622507":"df['target'].value_counts()","edcaa6ba":"df['target'].value_counts(normalize=True)","0fc2e321":"sns.countplot(x=df['target'])","e5b2bbc2":"df['target'] = df['target'].astype('int', errors='ignore')","ed857082":"def plot_multiple_cols(df, plot_method, cols=5):\n    rows = math.ceil(df.shape[1] \/ cols)\n    \n    _, axs = plt.subplots(rows, cols)\n    \n    n = 0    \n    for i in range(rows):\n        for j in range(cols):\n            if n >= len(df.columns):\n                break\n            \n            plot_method(df[df.columns[n]], ax=axs[i][j])\n            n = n+1","847d16fc":"def plot_multiple_cols_vs_target(df, target, plot_method, cols=5):\n    rows = math.ceil(df.shape[1] \/ cols)\n    \n    _, axs = plt.subplots(rows, cols)\n    \n    n = 0    \n    for i in range(rows):\n        for j in range(cols):\n            if n >= len(df.columns):\n                break\n            \n            plot_method(x=df[df.columns[n]], hue=target, ax=axs[i][j], multiple='layer')\n            n = n+1","eb2bc6fa":"def value_counts_feat_vs_target(df, cols, target_col):\n    for col in cols:\n        print(df.groupby(by=col)[target_col].value_counts(normalize=True))","25bba0dd":"numeric_cols = df.select_dtypes('float').columns.drop('target')\nnumeric_cols","3fe7fb36":"plot_multiple_cols(df[numeric_cols], sns.histplot, cols=4)","8ad3dc92":"plot_multiple_cols_vs_target(df[numeric_cols], df['target'], sns.histplot, cols=4)","12d8c97d":"df['cont1_1'] = (df['cont1'] > 0.9).astype('int').replace({0: 'A', 1: 'B'})\n\ndf['cont2_1'] = (df['cont2'] > 0.9).astype('int').replace({0: 'A', 1: 'B'})\n\ndf['cont3_1'] = (df['cont3'] < 0.2).astype('int').replace({0: 'A', 1: 'B'})\n\ndf['cont6_1'] = (df['cont6'] > 0.7).astype('int').replace({0: 'A', 1: 'B'})\n\ndf['cont8_1'] = (df['cont8'] > 0.5).astype('int').replace({0: 'A', 1: 'B'})","04e0f1b2":"new_cols = ['cont1_1', 'cont2_1', 'cont3_1', 'cont6_1', 'cont8_1']","f29b80b8":"plot_multiple_cols_vs_target(df[new_cols], df['target'], sns.histplot, cols=4)","3bbd2c2b":"cat_cols = df.select_dtypes('object').columns\ndf[cat_cols] = df[cat_cols].astype('category')","ff143828":"df[cat_cols].nunique()","a9c394e9":"plot_multiple_cols(df[cat_cols], sns.histplot)","f919a55d":"non_bin_cols = cat_cols[df[cat_cols].nunique() > 2]","c020abe1":"plot_multiple_cols(df[non_bin_cols], sns.histplot)","860439be":"### Large","cf7333ea":"large_cat_cols = non_bin_cols[df[non_bin_cols].nunique() > 20]\n","76256067":"plot_multiple_cols(df[large_cat_cols], sns.histplot, cols=2)","b8670fbc":"plot_multiple_cols_vs_target(df[large_cat_cols], df['target'], sns.histplot, cols=2)","ce74c01c":"cat_dummy = pd.get_dummies(df['cat7'], prefix='cat7')\ncat_dummy = cat_dummy[cat_dummy.columns[cat_dummy.sum() > 15000]]","9a25a315":"plot_multiple_cols_vs_target(cat_dummy, df['target'], sns.histplot, cols=5)","c2dbd19e":"df = pd.concat([df, cat_dummy], axis=1)","0beee689":"cat_dummy = pd.get_dummies(df['cat8'], prefix='cat8')\ncat_dummy = cat_dummy[cat_dummy.columns[cat_dummy.sum() > 15000]]","a0d67d67":"plot_multiple_cols_vs_target(cat_dummy, df['target'], sns.histplot, cols=5)","20bcc462":"df = pd.concat([df, cat_dummy], axis=1)","fc48b2bd":"cat_dummy = pd.get_dummies(df['cat10'], prefix='cat10')\ncat_dummy = cat_dummy[cat_dummy.columns[cat_dummy.sum() > 15000]]","5e355ba3":"plot_multiple_cols_vs_target(cat_dummy, df['target'], sns.histplot, cols=5)","673558c6":"df = pd.concat([df, cat_dummy], axis=1)","de555822":"little_cat_cols = non_bin_cols[df[non_bin_cols].nunique() <= 20]","3130f0aa":"plot_multiple_cols(df[little_cat_cols], sns.histplot)","2d72c653":"plot_multiple_cols_vs_target(df[little_cat_cols], df['target'], sns.histplot, cols=4)","da3aaa26":"for col in little_cat_cols:    \n    cat_dummy = pd.get_dummies(df[col], prefix=col)\n    cat_dummy = cat_dummy[cat_dummy.columns[cat_dummy.sum() > 15000]]\n    df = pd.concat([df, cat_dummy], axis=1)","51156c0b":"bin_cols = df.columns[df.nunique() == 2]","90af73de":"plot_multiple_cols(df[bin_cols], sns.histplot, cols=5)","b5fca34d":"plot_multiple_cols_vs_target(df[bin_cols], df['target'], sns.histplot, cols=5)","72da99e5":"value_counts_feat_vs_target(df, bin_cols, 'target')","f40f5207":"for col in bin_cols:\n    try:\n        df[col] = df[col].cat.codes\n    except:\n        pass","1d4e8e97":"train_df = df.dropna()","e4c5310f":"test_df = df.loc[df['target'].isna(), :]","fccab11d":"X = train_df[bin_cols].drop('target', axis=1)\ny = train_df['target']","233dd0d8":"model = XGBClassifier(random_state=42,\n                      use_label_encoder=False,\n                      eval_metric='error',\n                      \n                      n_estimators=100,\n                      learning_rate=0.1,\n                      max_depth=10,\n                      subsample=0.8,\n                      colsample_bytree=0.8,\n                      gamma=5,\n                     )","1b69452e":"models = []\n\nkf = StratifiedKFold(n_splits=5, random_state=42, shuffle=True)\n\nfor train_index, test_index in kf.split(X, y):\n    X_train, X_test = X.iloc[train_index, :], X.iloc[test_index, :]\n    y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n    \n    model.fit(X_train, y_train)\n    models.append(model)\n    \n    print(len(models))\n    print(roc_auc_score(y_train, model.predict_proba(X_train)[:, 1]))\n    print(roc_auc_score(y_test, model.predict_proba(X_test)[:, 1]))\n    print()       \n    ","a613e76f":"model1 = models[2]","c2eebb97":"result1 = model1.predict_proba(test_df[bin_cols].drop('target', axis=1))[:, 1]\n                ","14304557":"model2 = models[4]","cd150220":"result2 = model1.predict_proba(test_df[bin_cols].drop('target', axis=1))[:, 1]\n                ","c8b4490e":"result = (result1 * 0.1 + result2 * 0.9) \/ 2","0263bdd2":"result","73e23dd8":"sns.scatterplot(result1, result2)","016f4667":"sns.histplot(result)","7175bf92":"my_submission = pd.DataFrame({'id': test_df['id'], 'target': result})\n\nmy_submission.to_csv('submission_new.csv', index=False)","491c5fb9":"we can see that the distibution of cont' features almost remains the same but there are some difference.\nlet's take it into account and highlight this difference","0dfc0655":"# Numeric","42fda383":"# Submission","a3ce5795":"let's separate large cat' features and small ones","9ea50cff":"as we cam see, if those features are true, there are high probability for target to be true (except cont8)","56ff94de":"## Binary","0466ec6a":"# Categorical","b4fefb45":"no missing data","9ccece99":"# Target value","ccfe8e6d":"# Gathering the data","0e361492":"let's separate binary and non-binary cols","7bd06c87":"# Modeling","b527fc4e":"## Non-binary","8f14b9dd":"there are probably some values that are underrepresented and cannot be important due to size of dataset  ","c35efe57":"## XGBoost","e50fb8f8":"### Small"}}