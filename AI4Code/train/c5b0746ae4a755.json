{"cell_type":{"174836a7":"code","f002235b":"code","391c768f":"code","ae21b306":"code","2251f564":"code","32784dcd":"code","838bd1be":"code","bb019a09":"code","d4a8ff25":"code","52923d8e":"code","7dffcb8b":"code","6f06443c":"code","0a64ceb7":"code","2496bfeb":"code","1c915a95":"code","cedf4bab":"code","0ef92cd0":"code","c0e324fc":"code","c5d3a9c3":"code","70fe55f0":"code","8145a1d4":"code","b5170d9a":"code","ce399b99":"markdown","f3c12c66":"markdown","b960462b":"markdown","d52856f5":"markdown","2b4b28f5":"markdown","1fae2847":"markdown","bf5cb6b3":"markdown","eed1fc8f":"markdown","06f5015f":"markdown","2522eb5f":"markdown","e39142a1":"markdown","976523b9":"markdown"},"source":{"174836a7":"import numpy as np\nimport pandas as pd\n\n# Data path\ndata_path = '\/kaggle\/input\/porto-seguro-safe-driver-prediction\/'\n\ntrain = pd.read_csv(data_path + 'train.csv', index_col='id')\ntest = pd.read_csv(data_path + 'test.csv', index_col='id')\nsubmission = pd.read_csv(data_path + 'sample_submission.csv', index_col='id')","f002235b":"train.head()","391c768f":"test.head()","ae21b306":"submission.head()","2251f564":"train.info()","32784dcd":"import missingno as msno\n\n# Convert -1 from training data copy to np.NaN\ntrain_copy = train.copy().replace(-1, np.NaN)\n\n# Visualize missing values\nmsno.bar(df=train_copy.iloc[:, 1:29], figsize=(13, 6));","838bd1be":"msno.bar(df=train_copy.iloc[:, 29:], figsize=(13, 6));","bb019a09":"msno.matrix(df=train_copy.iloc[:, 1:29], figsize=(13, 6));","d4a8ff25":"# Feature dtypes\nsummary = pd.DataFrame(train.dtypes, columns=['dtype'])\n# Number of Missing values (-1 count)\nsummary['num_missing'] = (train == -1).sum().values    \n# Number of unique values by features\nsummary['num_uniques'] = train.nunique().values\n\nsummary.head()","52923d8e":"data_forms = []\nfor col in train.columns:\n    if 'bin' in col or col == 'target':\n        data_forms.append('binary')\n    elif 'cat' in col:\n        data_forms.append('nominal')\n    elif train[col].dtype == float:\n        data_forms.append('continuous')\n    elif train[col].dtype == int:\n        data_forms.append('ordinal')\n        \nsummary['role'] = data_forms","7dffcb8b":"summary","6f06443c":"summary[summary['role'] == 'nominal'].index","0a64ceb7":"summary[summary['dtype'] == 'float64'].index","2496bfeb":"import seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n%matplotlib inline","1c915a95":"mpl.rc('font', size=15)\nplt.figure(figsize=(7, 6))\n\n# Target Value Distribution\nax = sns.countplot(x='target', data=train)\n\ntotal_size = len(train) # Total number of train data\n\n# Display the target value ratio at the top of the bar\nfor patch in ax.patches:\n    height = patch.get_height() # Shape height (Data Count)\n    width = patch.get_width() # Shape width\n    left_coord = patch.get_x() # The x-axis position of the left border of the shape\n    percent = height\/total_size*100 # Target Value Ratio\n    \n    # Set text in coordinates (x, y)\n    ax.text(x=left_coord + width\/2.0, #x-axis position\n            y=height + 3000, # y-axis position\n            s='{:1.1f}%'.format(percent), # Text\n            ha='center') # Center Alignment\n\nax.set_title('Target Distribution');","cedf4bab":"def get_row_col_idx(idx, num_cols):\n    # Subplot Row Index\n    row_idx = idx\/\/num_cols\n    # Subplot Column Index\n    for i in range(num_cols):\n        if idx%num_cols == i:\n            col_idx = i\n    return row_idx, col_idx","0ef92cd0":"def plot_target_ratio_by_features(cols, nrows, ncols):\n    mpl.rc('font', size=9) # Set font size\n    figure, axes = plt.subplots(nrows=nrows, ncols=ncols) # Create subplots\n    figure.set_size_inches(12, 18) # Set Figure size\n    plt.subplots_adjust(wspace=0.3, hspace=0.3) # Set margins between subplots\n\n    for idx, col in enumerate(train[cols]): \n        row_idx, col_idx = get_row_col_idx(idx, ncols) # Subplot row, column location\n        ax = axes[row_idx, col_idx] # Set the axis on which to plot the graph\n        # Plot bar graph of target value 1 ratio by unique values on the ax axis\n        sns.barplot(x=col, y='target', data=train, palette='Set2', ax=ax)","c0e324fc":"bin_cols = summary[summary['role'] == 'binary'].index # Binary Features\n# Plot bar graph of the target value 1 ratio by binary feature unique values\nplot_target_ratio_by_features(bin_cols, 6, 3)","c5d3a9c3":"nom_cols = summary[summary['role'] == 'nominal'].index # Nominal Features\n\nplot_target_ratio_by_features(nom_cols, 7, 2)","70fe55f0":"ord_cols = summary[summary['role'] == 'ordinal'].index # Ordinal Features\n\nplot_target_ratio_by_features(ord_cols, 8, 2)","8145a1d4":"cont_cols = summary[summary['role'] == 'continuous'].index # Continuous Features\n\nfigure, axes = plt.subplots(nrows=5, ncols=2)\nfigure.set_size_inches(12, 16)\nplt.subplots_adjust(wspace=0.2, hspace=0.4)\n\nfor idx, col in enumerate(cont_cols):\n    train[col] = pd.cut(train[col], 5) # Divide the value into 5 bins\n    row_idx, col_idx = get_row_col_idx(idx, 2)\n    ax = axes[row_idx, col_idx]\n    sns.barplot(x=col, y='target', data=train, palette='Set2', ax=ax)\n    ax.tick_params(axis='x', labelrotation=10) # Rotate x-axis label","b5170d9a":"train_copy = train_copy.dropna() # Delete np.NaN value\n\nplt.figure(figsize=(10, 8))\ncont_corr = train_copy[cont_cols].corr() # Correlation between continuous features\nsns.heatmap(cont_corr, annot=True, cmap='OrRd'); # Plot heatmap","ce399b99":"### Ordinal Features","f3c12c66":"## Take around","b960462b":"### Continuous Features","d52856f5":"###  Create Features Summary","2b4b28f5":"# Upvote is free :-)","1fae2847":"### Target Value Distribution","bf5cb6b3":"- [Competition Link](https:\/\/www.kaggle.com\/c\/porto-seguro-safe-driver-prediction)\n- [EDA Notebook reference](https:\/\/www.kaggle.com\/bertcarremans\/data-preparation-exploration)","eed1fc8f":"# Porto Seguro\u2019s Safe Driver Prediction EDA","06f5015f":"### Nominal Features","2522eb5f":"## I also shared another notebook [Top 9th LightGBM Solution](https:\/\/www.kaggle.com\/werooring\/top-9th-lightgbm-xgboost-ensemble). I highly recommend you to see that notebook after studying this notebook. ","e39142a1":"## Data visualization","976523b9":"### Binary Features"}}