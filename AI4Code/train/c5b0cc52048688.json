{"cell_type":{"b9ffa5b4":"code","90d4994a":"code","7b40221c":"code","67fae13f":"code","a76266bc":"code","e7f588df":"code","ac33fb70":"code","a971f266":"code","741bfc53":"code","2ba2aa71":"code","490c193c":"code","35df4cf4":"code","cbdffb64":"code","1133a652":"code","58a1997d":"code","d23b07ac":"code","0f277d37":"code","7f86ff52":"code","d5611eba":"code","43dffdfd":"code","277be4ec":"code","70db73be":"code","846aaf54":"code","4d0d1a1d":"code","1f10a89b":"code","9e6eaba4":"code","21984701":"code","f91fbecf":"code","fb6a3f8f":"code","a5218d4e":"code","bd339786":"code","db90c20a":"code","fd218709":"code","06cac8af":"code","73acb6ee":"code","00b4735b":"code","aa233146":"code","205f15a1":"code","aa4f5018":"code","df8bf862":"code","9fdce3ea":"code","e291074b":"code","875944bd":"code","e336295c":"code","98ca1cdf":"markdown","38cecd7f":"markdown","cb42d861":"markdown","e1b740c2":"markdown","894e370a":"markdown","f1d188cc":"markdown","388d581f":"markdown","6cf920ee":"markdown","502f32ec":"markdown","cb02c6ad":"markdown","bdfc2a09":"markdown","c05c8bdb":"markdown","48ddd7fb":"markdown","5b28b7f9":"markdown","6c14c84a":"markdown","c3bdf52d":"markdown","5a33c575":"markdown","52f94d38":"markdown","f2e2ba45":"markdown","68b699e6":"markdown","f4e35b23":"markdown","50c10001":"markdown","a04d28b2":"markdown","b8ffecac":"markdown","430bb859":"markdown","a9bb7ee8":"markdown","a5956d19":"markdown","f1307a93":"markdown","c7ee3076":"markdown","8a3b250c":"markdown","578e5e63":"markdown","ceb49ef6":"markdown","e11c437d":"markdown","08c20d83":"markdown","20bd04d5":"markdown","873570e5":"markdown","0e12670f":"markdown","a6f3eda7":"markdown","3353a9bc":"markdown"},"source":{"b9ffa5b4":"#Importing-Required-Libraries.\n\nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import date\nimport warnings\nwarnings.filterwarnings('ignore')","90d4994a":"sns.set_style('darkgrid')","7b40221c":"# Importing the data set.\nfile_path=\"..\/input\/electrical-faults-analysis-india\/electric_faults_data.csv\"\ndata = pd.read_csv(file_path)","67fae13f":"print(data.columns)\nprint(\"\\nThe shape of Data is:\",data.shape)\ndata.head()","a76266bc":"data.describe()","e7f588df":"# Handling Missing Values.\nplt.figure(figsize=(12,7))\nf = sns.heatmap(data.isnull(), cbar = True, cmap = 'viridis')\nf.set_xticklabels(labels = f.get_xticklabels(), fontdict={'fontsize':13})\nf.set_yticklabels(labels = f.get_yticklabels(), fontdict={'fontsize':10})\nplt.title(\"Heatmap of Missing Values\", fontsize = 30)\nplt.show()\n","ac33fb70":"data['tripping_reason'].value_counts()","a971f266":"data['tripping_reason'].fillna(value='transient fault', inplace=True)","741bfc53":"data['other_circuit'].value_counts()","2ba2aa71":"data.drop('other_line_status', inplace=True, axis=1)\ndata.drop('observation', inplace =True, axis=1)\ndata.drop('other_circuit', inplace=True, axis=1)","490c193c":"data['repair_carried'].value_counts()","35df4cf4":"data['repair_carried'].fillna(value = 'nil', inplace= True)","cbdffb64":"#Separating Years\n\ndata['trip_year'] = pd.to_datetime(data['date_of_trip'], dayfirst= True ).dt.year\ndata['restore_year'] = pd.to_datetime(data['date of restoration'], dayfirst= True ).dt.year\n\n#Separating month\ndata['trip_month'] = pd.to_datetime(data['date_of_trip'], dayfirst= True ).dt.month\ndata['restore_month'] = pd.to_datetime(data['date of restoration'], dayfirst= True ).dt.month\n\n\n#Separating hours\ndata['trip_hour'] = pd.to_datetime(data['time_of_trip']).dt.hour\ndata['restore_hour'] = pd.to_datetime(data['time_of_restoration']).dt.hour","1133a652":"data['trip_month'] = data['trip_month'].map({1:'January', 2:'February', 3: 'March', 4: 'April', 5: 'May', 6: 'June', 7: 'July',\n                               8: 'August', 9: 'September', 10: 'October', 11: 'November', 12: 'December'})\n\ndata['restore_month'] = data['restore_month'].map({1:'January', 2:'February', 3: 'March', 4: 'April', 5: 'May', 6: 'June', 7: 'July',\n                               8: 'August', 9: 'September', 10: 'October', 11: 'November', 12: 'December'})","58a1997d":"data['weekday'] = pd.to_datetime(data['date_of_trip']).dt.weekday","d23b07ac":"data['weekday'] = data['weekday'].map({0: 'Monday', 1: 'Tuesday', 2: 'Wednesday',3: 'Thursday',\n                                       4: 'Friday', 5: 'Saturday', 6: 'Sunday'})","0f277d37":"temp = data['weekday'].value_counts().reset_index()\n\nplt.figure(figsize= (12,7))\nplt.title('Trips on Weekdays',fontsize = 15)\nf = sns.barplot(x = temp['index'], y = temp['weekday'], palette = 'hls')\nf.set_xticklabels(labels = f.get_xticklabels(), fontdict={'fontsize':13})\nplt.xlabel('Weekdays', fontsize = 16)\nplt.yticks(list(range(max(temp['weekday']))))\nplt.show()\n","7f86ff52":"temp = data['trip_year'].value_counts()\n\nplt.figure(figsize= (12,7))\nplt.title('Trips in Years',fontsize = 15)\nf = sns.barplot(x = temp.index, y = temp.values, palette = 'Set2')\nf.set_xticklabels(labels = f.get_xticklabels(), fontdict={'fontsize':13})\nplt.xlabel('Years', fontsize = 16)\nplt.yticks(list(range(max(temp))))\nplt.show()","d5611eba":"temp = data['trip_month'].value_counts()\n\nplt.figure(figsize= (12,7))\nplt.title('Trips in Months',fontsize = 15)\nf = sns.barplot(x = temp.index[::-1], y = temp.values[::-1], palette = 'rainbow')\nf.set_xticklabels(labels = f.get_xticklabels(), fontdict={'fontsize':13})\nplt.xlabel('Months', fontsize = 16)\nplt.yticks(list(range(max(temp))))\nplt.show()","43dffdfd":"temp = data['weather'].value_counts()\n\nplt.figure(figsize= (12,7))\nplt.title('Trips in Weather',fontsize = 15)\nf = sns.barplot(x = temp.index, y = temp.values, palette = 'inferno')\nf.set_xticklabels(labels = f.get_xticklabels(), fontdict={'fontsize':13})\nplt.xlabel('Weather', fontsize = 16)\nplt.yticks(list(range(0,max(temp)+2)))\nplt.show()","277be4ec":"temp = data['line_trip'].value_counts().reset_index()\n\nplt.figure(figsize=(9,9))\nf = plt.pie(x = temp['line_trip'],labels = ['Yes','No'], colors=('khaki','orangered'), autopct= \"%1.1f%%\")\nplt.title('Line Trips at other End', fontsize  = 15)\nplt.show()","70db73be":"temp = data['tripping_reason'].value_counts()\n\nplt.figure(figsize= (12,7))\nplt.title('Trips Reasons',fontsize = 15)\nf = sns.barplot(x = temp.index, y = temp.values, palette = 'autumn')\nf.set_xticklabels(labels = f.get_xticklabels(), fontdict={'fontsize':13}, rotation = 30)\nplt.xlabel('Reasons', fontsize = 16)\nplt.yticks(range(max(temp)+2))\nplt.show()","846aaf54":"plt.figure(figsize= (15,10))\n#plt.suptitle(\"Distributions of Different Features\", fontsize = 20)\n#Histograms\nplt.subplot(3,3,1)\nsns.distplot(data['voltage'], rug = True, kde = False)\nplt.xlabel('Voltage in KiloVolts', fontsize = 12)\nplt.title('Distribution of Voltage',fontsize = 15)\n\nplt.subplot(3,3,2)\nsns.distplot(data['load_of_line'], color= 'green',rug = True, kde = False)\nplt.title('Distribution of Load of Line',fontsize = 15)\nplt.xlabel('Load on line in Amperes', fontsize = 12)\n\nplt.subplot(3,3,3)\nsns.distplot(data['frequency'], rug= True, color= 'orange', kde = False)\nplt.xlabel('Voltage in KiloVolts', fontsize = 12)\nplt.title('Distribution of Frequency',fontsize = 15)\n\n\n#Kde Plots\nplt.subplot(3,3,4)\nsns.kdeplot(data['voltage'], shade = True)\nplt.xlabel('Voltage in KiloVolts', fontsize = 12)\nplt.title('Distribution of Voltage',fontsize = 15)\n\nplt.subplot(3,3,5)\nsns.kdeplot(data['load_of_line'], shade = True, color = 'g')\nplt.title('Distribution of Load of Line',fontsize = 15)\nplt.xlabel('Load on line in Amperes', fontsize = 12)\n\nplt.subplot(3,3,6)\nsns.kdeplot(data['frequency'],shade= True, color = 'Orange')\nplt.title('Distribution of Frequency',fontsize = 15)\n\n#Box Plots\nplt.subplot(3,3,7)\nsns.boxplot(x = data['voltage'], orient = 'v',color= 'b', boxprops=dict(alpha=.5))\nplt.subplot(3,3,8)\nsns.boxplot(x = data['load_of_line'], orient = 'v', color= 'g', boxprops=dict(alpha=.5))\nplt.subplot(3,3,9)\nsns.boxplot(x = data['frequency'], orient = 'v', color= 'Orange', boxprops=dict(alpha=.5))\n\nplt.tight_layout()\nplt.show()","4d0d1a1d":"sns.jointplot(x = data['load_of_line'], y = data['voltage'], kind = 'reg', color= 'g')\n\nplt.show()\n","1f10a89b":"sns.jointplot(x = data['load_of_line'], y = data['frequency'], kind = 'reg', color= 'darkorange')\nplt.show()","9e6eaba4":"sns.jointplot(x = data['voltage'], y = data['frequency'], kind = 'reg', color = 'blue')\nplt.show()","21984701":"temp = data['trip_hour'].value_counts()\nplt.figure(figsize= (10,10))\n\nplt.subplot(2,1,1)\nsns.pointplot(x = temp.index, y = temp.values ,palette= 'Reds')\nsns.pointplot(x = temp.index, y = temp.values ,join= True, color = 'r',markers = '')\nplt.title('Trips on Hours',fontsize = 15)\nplt.xlabel('Trip Hours of Day', fontsize = 12)\nplt.ylabel('Number of Hours', fontsize = 12)\nplt.yticks([0,1,2,3,4])\n\ntemp = data['restore_hour'].value_counts()\nplt.subplot(2,1,2)\nsns.pointplot(x = temp.index, y = temp.values ,palette= 'Greens')\nsns.pointplot(x = temp.index, y = temp.values ,join= True, color='g', markers = '')\nplt.title('Restoration on Hours',fontsize = 15)\nplt.xlabel('Restore Hours of Day', fontsize = 12)\nplt.ylabel('Number of Hours', fontsize = 12)\nplt.yticks([0,1,2,3,4])\nplt.show()","f91fbecf":"for i in range(0,len(data['repair_carried'])):\n    if data['repair_carried'][i] == 'nil':\n        data['repair_carried'][i] = 'None'\ntemp = data['repair_carried'].value_counts()\nplt.figure(figsize= (15,10))\nplt.title('Repairs Carried',fontsize = 15)\nf = sns.barplot(x = temp.index, y = temp.values, palette = 'Set1')\nf.set_xticklabels(labels = f.get_xticklabels(), fontdict={'fontsize':13})\nplt.xlabel('Repair Types', fontsize = 15)\nplt.yticks(range(max(temp)+2))\nplt.show()","fb6a3f8f":"plt.figure(figsize= (9,7))\nplt.title('Nature of the fault',fontsize = 15)\nf = sns.countplot(data['nature'], palette= 'hls')\nf.set_xticklabels(labels = f.get_xticklabels(), fontdict={'fontsize':13})\nplt.xlabel(\"Types\", fontsize= 14)\nplt.show()","a5218d4e":"data['line_trip'] = data['line_trip'].map({'no':0, 'yes':1})","bd339786":"data['type_of_fault'] = data['type_of_fault'].map({'low':-1, 'medium':0, 'high': 1})","db90c20a":"data.head()","fd218709":"#Preparing the Train features and Train Labels\nX_full = data.iloc[:, [3,4,6]].values\ny_full = data['type_of_fault'].values\n\n#Scaling the Data\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nsc.fit(X_full)\nX_full = sc.transform(X_full)\n\n#Splitting the data into Test and Train Data Sets\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_full, y_full, test_size = 0.25, random_state = 1)","06cac8af":"from sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier()\nclassifier.fit(X_train, y_train)","73acb6ee":"y_test_pred = classifier.predict(X_test)","00b4735b":"from sklearn.metrics import classification_report","aa233146":"print(classification_report(y_train, classifier.predict(X_train)))","205f15a1":"from sklearn.metrics import classification_report\ncr = classification_report(y_test, y_test_pred)\nprint(cr)","aa4f5018":"t = input(\"Enter Trip\\t\")\nl = float(input(\"Enter load of line\\t\"))\nf = float(input(\"Enter Frequency\\t\"))\n\nif t =='yes':\n    t = 1\nelif t == 'no':\n    t = 0\n    \nsamp = np.array([[int(t), int(l), float(f)]])\nsamp = sc.transform(samp)\nres = classifier.predict(samp)\nprint(\"\\n------Output-----\\n\")\nif res == -1:\n    print(\"Low Fault\")\nelif res == 0:\n    print(\"Medium Fault\")\nelse:\n    print(\"High Fault\")","df8bf862":"from sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(solver= 'newton-cg',multi_class= 'multinomial')\nclassifier.fit(X_train, y_train)","9fdce3ea":"y_test_pred = classifier.predict(X_test)","e291074b":"print(classification_report(y_train, classifier.predict(X_train)))","875944bd":"from sklearn.metrics import classification_report\ncr = classification_report(y_test, y_test_pred)\nprint(cr)","e336295c":"t = input(\"Enter Trip\\t\")\nl = float(input(\"Enter load of line\\t\"))\nf = float(input(\"Enter Frequency\\t\"))\n\nif t =='yes':\n    t = 1\nelif t == 'no':\n    t = 0\n    \nsamp = np.array([[int(t), int(l), float(f)]])\nsamp = sc.transform(samp)\nres = classifier.predict(samp)\nprint(\"\\n------Output-----\\n\")\nif res == -1:\n    print(\"Low Fault\")\nelif res == 0:\n    print(\"Medium Fault\")\nelse:\n    print(\"High Fault\")","98ca1cdf":"**Observation:** (Joint Plots)\n\n1. Voltage vs load_of_line shows a sufficiently strong negative correlation of -0.76. So we might consider dropping the voltage parameter since the dataset is not very large and we want to reduce any multicollinearlity also as per Occam's Razor principle we will drop it if the accuracy is not drastically effected.\n\n2. load_of_line vs frequency does not have any significant relationship.\n\n3. Same goes for voltage vs frequency","38cecd7f":"**Observation:** (Barplot)\nAmong the faults reasons that most account of faults is due to **transient_fault** or **bad_weather**.","cb42d861":"**Observation:** (Barplot)\nFrom the above plot we can observe that most faults occur during Summer season.","e1b740c2":"**Observation:** (Barplot)\nThe faults are mostly during Clear skies.","894e370a":"**Scaling the Features**\n\nFrom our previous observation, \"Frequency\" and \"Load_of_line\" parameters need to be scaled.\nUsing the Standardization Equation:\n\nz=(x-meu)\/sigma","f1d188cc":"Separating the **Years**, **Months** & **Hours** from the date and time.","388d581f":"# VERSUS PLOTS","6cf920ee":"Obtained almost 90% accuracy on the test set.","502f32ec":"Getting the **weekdays** from the **date**.","cb02c6ad":"**Observation:** (Histogram, Kernel Plot and Box Plot)\n\nWe can see that **Voltage** and **Current** have considerable spread however there is very little spread in the frequency parameter.\nSince it is not entirely fixed rather than dropping it we can scale it for the model.\nThere is not a sufficient amount of data to have some outliers either.","bdfc2a09":"Mapping the **Integer** month values to **Names**.","c05c8bdb":"# EXPLORATORY DATA ANALYSIS","48ddd7fb":"**Voltage vs Frequency**","5b28b7f9":"# Visualizing the nature column","6c14c84a":"**Accuracy on Train Set**","c3bdf52d":" **The target is \"Type of fault\" and \"Nature of Fault\".**","5a33c575":"**Accuracy on Test Set**","52f94d38":"**Observation:** (Barplot)\nWe can see that year **2016** has most faults above all while **2015** has the least.","f2e2ba45":"**Observation:** (Barplot)\nTrips in the faults has been more than thrice than no trips.","68b699e6":"**Accuracy on Train Set**","f4e35b23":"**Load_of_line vs Frequency**","50c10001":"Replacing the missing value with **\"Transient Fault\"**.\n","a04d28b2":"**Voltage vs load_of_line**","b8ffecac":"# Using KNeighborsClassifiers","430bb859":"# Using Multinomial Logistic Regression","a9bb7ee8":"# Mapping the Types of Faults\n\n","a5956d19":"As we observed that this column contains single & definitely occuring type of value, hence it is not feasible to include this column in the model.","f1307a93":"Small size of the dataset may result in overfitting if too many features are chosen. For now we only choose,  **line_trip**, **load_of_line** and **frequency**.","c7ee3076":"# Mapping the line_trip feature\n\nConverting the **line_trip** feature from categorical to numeric","8a3b250c":"We obtained approximately 94% accuracy on the train set.","578e5e63":"Observing the missing values in **repairs_carried** column","ceb49ef6":"# Predictive Modelling\n\n","e11c437d":"**Observations from the HeatMap:**\n\nThe values in columns \"other_line_status\" and \"observation\" are almost all missing so we can drop them.\nWe will observe the significant missing values in column \"repair_carried\" before dropping.\n\nFew values are also missing from \"tripping_reason\" and \"other_circuit\" columns. We will try to fill them with the most frequent values","08c20d83":"We got approximately 94% accuracy on the train set.","20bd04d5":"**Accuracy on Test Set**","873570e5":"**To check for single observation**","0e12670f":"We got approximately 93% accuracy on the train set.","a6f3eda7":"Mapping the **days number** to **names**, where **0** maps to **Monday** and so on.\n\n","3353a9bc":"**Observation:** (Line Plot)\nWe can observe that the most fault occurred during early morning and dusk.\nThere is not sufficient regular pattern so it may or may not be a considerable parameter."}}