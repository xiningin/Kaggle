{"cell_type":{"9415d138":"code","3538f52d":"code","4b126acb":"code","3bf576ca":"code","8c49ac89":"code","dcf9a418":"code","8486c4aa":"code","030f830e":"code","93fd478a":"code","44d638cf":"code","cbd15140":"code","db2519f5":"code","2fa571e5":"code","dde8c7ca":"code","c643b9ed":"code","8bd3cf1d":"markdown","2ea15632":"markdown","0e39820d":"markdown","82406f5f":"markdown","97b01f40":"markdown","59859b99":"markdown","437f51f7":"markdown"},"source":{"9415d138":"%matplotlib inline\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\nimport ast\nimport datetime as dt\nimport os\nimport time\nfrom math import trunc\n\nimport cv2\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\n\nimport pandas as pd\nimport seaborn as sns\nfrom keras.applications.densenet import DenseNet121, preprocess_input\nfrom keras.callbacks import ReduceLROnPlateau\nfrom keras.layers import Dense, GlobalAveragePooling2D\nfrom keras.metrics import (categorical_accuracy, categorical_crossentropy,\n                           top_k_categorical_accuracy)\nfrom keras.models import Model, load_model\nfrom keras.optimizers import Adam\nfrom keras.callbacks import TensorBoard, ModelCheckpoint\n\nstart = dt.datetime.now()","3538f52d":"DP_DIR = '..\/input\/shuffle-csvs\/'\nINPUT_DIR = '..\/input\/quickdraw-doodle-recognition\/'\n\nBASE_SIZE = 256\nNCSVS = 100\nNCATS = 340\nnp.random.seed(seed=2018)\ntf.set_random_seed(seed=2018)\n\n\ndef f2cat(filename: str) -> str:\n    return filename.split('.')[0]\n\ndef list_all_categories():\n    files = os.listdir(os.path.join(INPUT_DIR, 'train_simplified'))\n    return sorted([f2cat(f) for f in files], key=str.lower)","4b126acb":"def apk(actual, predicted, k=3):\n    \"\"\"\n    Source: https:\/\/github.com\/benhamner\/Metrics\/blob\/master\/Python\/ml_metrics\/average_precision.py\n    \"\"\"\n    if len(predicted) > k:\n        predicted = predicted[:k]\n    score = 0.0\n    num_hits = 0.0\n    for i, p in enumerate(predicted):\n        if p in actual and p not in predicted[:i]:\n            num_hits += 1.0\n            score += num_hits \/ (i + 1.0)\n    if not actual:\n        return 0.0\n    return score \/ min(len(actual), k)\n\ndef mapk(actual, predicted, k=3):\n    \"\"\"\n    Source: https:\/\/github.com\/benhamner\/Metrics\/blob\/master\/Python\/ml_metrics\/average_precision.py\n    \"\"\"\n    return np.mean([apk(a, p, k) for a, p in zip(actual, predicted)])\n\ndef preds2catids(predictions):\n    return pd.DataFrame(np.argsort(-predictions, axis=1)[:, :3], columns=['a', 'b', 'c'])\n\ndef top_3_accuracy(y_true, y_pred):\n    return top_k_categorical_accuracy(y_true, y_pred, k=3)","3bf576ca":"batchsize = 330\nsize = 64\nSTEPS = 10000\n\n# You can set as many epoch as you want until don't see any improvement \nEPOCHS = 2","8c49ac89":"base_model = DenseNet121(include_top=False, weights='imagenet',\n                         input_shape=(size, size, 3), classes=NCATS)\nx = base_model.output\nx = GlobalAveragePooling2D()(x)\nx = Dense(1024, activation='relu')(x)\npredictions = Dense(NCATS, activation='softmax')(x)\nmodel = Model(inputs=base_model.input, outputs=predictions)\nmodel.compile(optimizer=Adam(lr=1e-4, decay=1e-9), loss='categorical_crossentropy', metrics=[\n              categorical_crossentropy, categorical_accuracy, top_3_accuracy])\n\n# Load previous checkpoint (if you are tranning on a local machine)\n# model = load_model('path_to_checkpoint', custom_objects={'top_3_accuracy': top_3_accuracy})\n\nprint(model.summary())","dcf9a418":"def draw_cv2(raw_strokes, size=256, lw=6, time_color=True):\n    img = np.zeros((BASE_SIZE, BASE_SIZE), np.uint8)\n    for t, stroke in enumerate(raw_strokes):\n        for i in range(len(stroke[0]) - 1):\n            color = 255 - min(t, 10) * 13 if time_color else 255\n            _ = cv2.line(img, (stroke[0][i], stroke[1][i]),\n                         (stroke[0][i + 1], stroke[1][i + 1]), color, lw)\n    img = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)\n    if size != BASE_SIZE:\n        return cv2.resize(img, (size, size))\n    else:\n        return img\n\n\ndef image_generator_xd(size, batchsize, ks, lw=6, time_color=True):\n    while True:\n        for k in np.random.permutation(ks):\n            filename = os.path.join(DP_DIR, 'train_k{}.csv.gz'.format(k))\n            for df in pd.read_csv(filename, chunksize=batchsize):\n                df['drawing'] = df['drawing'].apply(ast.literal_eval)\n                x = np.zeros((len(df), size, size, 3))\n                for i, raw_strokes in enumerate(df.drawing.values):\n                    x[i, :, :, :] = draw_cv2(raw_strokes, size=size, lw=lw,\n                                             time_color=time_color)\n                x = preprocess_input(x).astype(np.float32)\n                y = keras.utils.to_categorical(df.y, num_classes=NCATS)\n                yield x, y\n\n\ndef df_to_image_array_xd(df, size, lw=6, time_color=True):\n    df['drawing'] = df['drawing'].apply(ast.literal_eval)\n    x = np.zeros((len(df), size, size, 3))\n    for i, raw_strokes in enumerate(df.drawing.values):\n        x[i, :, :, :] = draw_cv2(\n            raw_strokes, size=size, lw=lw, time_color=time_color)\n    x = preprocess_input(x).astype(np.float32)\n    return x","8486c4aa":"valid_df = pd.read_csv(os.path.join(DP_DIR, 'train_k{}.csv.gz'.format(NCSVS - 1)), nrows=34000)\nx_valid = df_to_image_array_xd(valid_df, size)\ny_valid = keras.utils.to_categorical(valid_df.y, num_classes=NCATS)\nprint(x_valid.shape, y_valid.shape)\nprint('Validation array memory {:.2f} GB'.format(x_valid.nbytes \/ 1024.**3))","030f830e":"train_datagen = image_generator_xd(size=size, batchsize=batchsize, ks=range(NCSVS - 1))","93fd478a":"x, y = next(train_datagen)\nn = 8\nfig, axs = plt.subplots(nrows=n, ncols=n, sharex=True,\n                        sharey=True, figsize=(12, 12))\nfor i in range(n**2):\n    ax = axs[i \/\/ n, i % n]\n    (-x[i]+1)\/2\n    ax.imshow((-x[i, :, :, 0] + 1)\/2, cmap=plt.cm.gray)\n    ax.axis('off')\nplt.tight_layout()\nfig.savefig('gs.png', dpi=300)\nplt.show();","44d638cf":"tensorboard = TensorBoard(log_dir=\"logs\/{}\".format(time.time()), batch_size=batchsize, write_images=True, update_freq=(STEPS\/10)*batchsize)\nweightpath = \".\/model\/weights-{epoch:03d}-{top_3_accuracy:.3f}.hdf5\"\ncheckpoint = ModelCheckpoint(weightpath, monitor='val_loss', verbose=0,save_best_only=False, save_weights_only=False, mode='auto', period=1)\n\n\nmodel.fit_generator(\n    train_datagen, steps_per_epoch=STEPS, epochs=EPOCHS, verbose=1,\n    validation_data=(x_valid, y_valid),\n    callbacks=[tensorboard, checkpoint]\n)","cbd15140":"valid_predictions = model.predict(x_valid, batch_size=128, verbose=1)\nmap3 = mapk(valid_df[['y']].values, preds2catids(valid_predictions).values)\nprint('Map3: {:.3f}'.format(map3))","db2519f5":"test = pd.read_csv(os.path.join(INPUT_DIR, 'test_simplified.csv'))\ntest.head()\nx_test = df_to_image_array_xd(test, size)\nprint(test.shape, x_test.shape)\nprint('Test array memory {:.2f} GB'.format(x_test.nbytes \/ 1024.**3 ))","2fa571e5":"test_predictions = model.predict(x_test, batch_size=128, verbose=1)\n\ntop3 = preds2catids(test_predictions)\ntop3.head()\ntop3.shape\n\ncats = list_all_categories()\nid2cat = {k: cat.replace(' ', '_') for k, cat in enumerate(cats)}\ntop3cats = top3.replace(id2cat)\ntop3cats.head()\ntop3cats.shape","dde8c7ca":"test['word'] = top3cats['a'] + ' ' + top3cats['b'] + ' ' + top3cats['c']\nsubmission = test[['key_id', 'word']]\nsubmission.to_csv('gs_mn_submission_{}.csv'.format(int(map3 * 10**4)), index=False)\nsubmission.head()\nsubmission.shape","c643b9ed":"end = dt.datetime.now()\nprint('Latest run {}.\\nTotal time {}s'.format(end, (end - start).seconds))","8bd3cf1d":"## DenseNet 121\n\nDenseNet architecture is new, it is a logical extension of ResNet.\nResNet architecture has a fundamental building block (Identity) where you merge (additive) a previous layer into a future layer. Reasoning here is by adding additive merges we are forcing the network to learn residuals (errors i.e. diff between some previous layer and current one). In contrast, DenseNet paper proposes concatenating outputs from the previous layers instead of using the summation.\n\n[Densely Connected Convolutional Networks](https:\/\/arxiv.org\/abs\/1608.06993)","2ea15632":"# Keras DenseNet 121 for Quick, Draw! Doodle Recognition Challenge\n\nThis kernel is a fork of \ud83d\udc18Greyscale MobileNet [LB=0.892] from @beluga. Huge thanks for his great kernel\n\nThis kernel has these main components:\n\n* DenseNet121\n* Fast and memory efficient Image Generator with temporal colored strokes\n\n","0e39820d":"## Create Submission","82406f5f":"## Setup\nImport the necessary libraries and a few helper functions.","97b01f40":"### I used Tensorboard for learning visualization","59859b99":"# Suggession for improvement\n\nI'm able to achive LB 0.925 with a single DenseNet 121 model, no TTA, no ensemble. 100k\/class for training, 340k for validation. After 45 epoch and 65 hours on a single GTX 1060 6GB. You can try these to improve the LB score:\n- Training with more data, you can use @beluga kernel to split and shuffle the data: https:\/\/www.kaggle.com\/gaborfodor\/shuffle-csvs\n- Bigger image size and bigger batch size (batch size should be as big as possible)\n- Try DenseNet 169\n- TTA (hflip) and ensemble\n\n","437f51f7":"## Training with Image Generator\nKeep in mind that Keras Densenet only accept RGB images, for this I only fill 3 channel with the same grayscale value so the image is not RGB, but it still works. You should try to enconde more information at this part, it will definitely help increase the LB accuracy"}}