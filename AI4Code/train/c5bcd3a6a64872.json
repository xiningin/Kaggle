{"cell_type":{"f0e5c296":"code","7d373e4f":"code","7979988f":"code","e4a38f90":"code","d35194bc":"code","de1b8b86":"code","3f2e7147":"code","7db901b2":"code","b8de2c4f":"code","70d4df56":"code","8c189086":"code","79e1d9e9":"code","6ed1b7a0":"code","9112d9a0":"code","e950e508":"code","99604e26":"code","d04aefe9":"code","3fd8fbb6":"code","7dc9ec73":"code","9a4a72c8":"code","9c144eb4":"code","6e988d2c":"code","067ccf73":"code","212abcc5":"code","62b29752":"code","618ef377":"code","44f7cfde":"code","bdcd644c":"code","8677626b":"code","6b495554":"code","1b1f67f4":"code","33ca9618":"code","d812da65":"code","07a8b783":"code","68ad2bf6":"code","dfac7649":"code","d66b7e54":"code","8e0348d2":"code","ac5b86b8":"code","54aa445a":"code","0d802e3d":"code","378f3aef":"code","86bd7c92":"code","b3e717d3":"markdown","7c415ccb":"markdown","4daa74db":"markdown","2f29d708":"markdown","8ebd513e":"markdown","bd9a875b":"markdown","29db95bd":"markdown","f10a2710":"markdown","5232049d":"markdown","d3b3697c":"markdown","85d4d2b5":"markdown","5f478b31":"markdown","a098dd46":"markdown","1fef22a8":"markdown","f8d1796b":"markdown","4337fba1":"markdown","1fb85ebe":"markdown","b46d230d":"markdown"},"source":{"f0e5c296":"# Import packages\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use('ggplot')","7d373e4f":"df = pd.read_csv('\/kaggle\/input\/iris-flower-dataset\/IRIS.csv')\ndf.head()","7979988f":"df.columns = df.columns[:-1].tolist() + ['variety']\ndf['variety'] = df['variety'].apply(lambda species: species.split('-')[-1].capitalize())","e4a38f90":"df.describe()","d35194bc":"df.describe(percentiles=[0.1, 0.25, 0.5, 0.75, 0.9], include='all')","de1b8b86":"df.head()","3f2e7147":"df.head(2)","7db901b2":"df.tail()","b8de2c4f":"df.sample()","70d4df56":"df.sample(5)","8c189086":"df.loc[df['petal_width'] > df['sepal_width']]","79e1d9e9":"df.loc[df['variety'] == 'Versicolor'].sample(10)","6ed1b7a0":"df.isna().sum()","9112d9a0":"missing_df = df.copy()\nmissing_df['petal_length'] = missing_df['petal_length'].loc[missing_df['petal_length'] > 5] \\\n                                .replace('Versicolor', np.nan)\nmissing_df['petal_length'].describe()","e950e508":"missing_df.isna().sum()","99604e26":"missing_df.shape","d04aefe9":"# Row-wise deletion\nmissing_df.dropna(axis=0).shape","3fd8fbb6":"# Column-wise deletion\nmissing_df.dropna(axis=1).shape","7dc9ec73":"mean = missing_df['petal_length'].mean()\nmean","9a4a72c8":"missing_df['petal_length'] = missing_df['petal_length'].fillna(mean)\nmissing_df.isna().sum()","9c144eb4":"def three_sd_range(series):\n    mean = series.mean()\n    sd = series.std()\n    low = mean - 3 * sd\n    high = mean + 3 * sd\n    return (low, high)","6e988d2c":"lower, upper = three_sd_range(df['sepal_length'])\nlower, upper","067ccf73":"df['sepal_length'].describe()","212abcc5":"df['sepal_length'].loc[pd.DataFrame([df['sepal_length'] >= lower, df['sepal_length'] <= upper]).all()] \\\n    .describe()","62b29752":"labels, uniques = pd.factorize(df['variety'])\ndf['class'] = labels\ndf.head()","618ef377":"dict(zip(range(len(uniques)), uniques))","44f7cfde":"df['sepal_size'] = pd.cut(df['sepal_length'], \n                          bins=[0, 5, 7, 100], \n                          labels=['Small', 'Medium', 'Large'])\n\ndf.groupby(by=['sepal_size'])['sepal_length'].agg(['min', 'max'])","bdcd644c":"df['sepal_length'].describe()","8677626b":"scaler = StandardScaler()\ndf['sepal_length_scaled'] = scaler.fit_transform(df['sepal_length'].to_numpy().reshape(-1, 1))\n\ndf['sepal_length_scaled'].describe()","6b495554":"variety_counts = df['variety'].value_counts()\nplt.bar(variety_counts.index, variety_counts.tolist())\nplt.show()","1b1f67f4":"plt.boxplot(df['sepal_length'])\nplt.show()","33ca9618":"plt.scatter(df['sepal_length'], df['sepal_width'])\nplt.show()","d812da65":"df['variety'].value_counts()","07a8b783":"df['variety'].value_counts().plot(kind='bar')\nplt.show()","68ad2bf6":"df['sepal_length'].plot(kind='box')\nplt.show()","dfac7649":"df[['sepal_length', 'sepal_width']].plot(kind='scatter', x='sepal_length', y='sepal_width')\nplt.show()","d66b7e54":"# sns.palplot(sns.color_palette())","8e0348d2":"sns.countplot('variety', data=df, color=sns.color_palette()[0])\nplt.show()","ac5b86b8":"sns.countplot('variety', hue='sepal_size', data=df)\nplt.show()","54aa445a":"sns.boxplot('sepal_length', data=df, orient='v')\nplt.show()","0d802e3d":"sns.boxplot(x='variety', y='sepal_length', data=df)\nplt.show()","378f3aef":"sns.scatterplot(x='sepal_length', y='sepal_width', data=df)\nplt.show()","86bd7c92":"sns.scatterplot(x='sepal_length', y='sepal_width', hue='variety', data=df)\nplt.show()","b3e717d3":"## Import Data\n\npandas is used to import the data for simplicity, as compared to Python's built-in `open()` method.\n\nThe file that we will be analysing is the Iris dataset originally from https:\/\/archive.ics.uci.edu\/ml\/datasets\/iris.\n\nThe features are:\n- `sepal_length`: sepal length in cm\n- `sepal_width`: sepal width in cm\n- `petal_length`: petal length in cm\n- `petal_width`: petal width in cm\n- `variety`: class of the Iris\n    - Setosa\n    - Versicolour\n    - Virginica\n    \nDocumentation for importing data using pandas: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/io.html","7c415ccb":"## Identify Missing Values\n\nThe `isna` method returns a list of boolean values, and `sum` adds up the `True` values (interpreting them as ones).\n\nSince the data has no missing values, the `replace` method is used to simulate some missing values - in this case, all `petal_length` that are more than 5cm are replaced with `np.nan` (**n**ot **a** **n**umber from the NumPy package).\n\nMethods to handle missing data:\n- Deletion\n- Imputation: Replacing with mean, mode, median, etc.","4daa74db":"Reference: https:\/\/www.datacamp.com\/community\/tutorials\/exploratory-data-analysis-python","2f29d708":"## pandas","8ebd513e":"# Feature Engineering","bd9a875b":"## Describing the Data\n\nThe `describe` function can be used to compute summary statistics of non-null (NaN) values of each feature. Pass `all` to the optional parameter `include` to retrieve summaries for both numerical and categorical features. There are other optional parameters like `percentiles` where you can pass in a list of percentiles to retrieve their respective values.","29db95bd":"## Peek into a Sample of the Data\n\nUse `head` and `tail` to retrieve the top and bottom `n` rows. Use `sample` to randomly view (sample) `n` rows","f10a2710":"# Data Visualisation","5232049d":"### Deletion\n\n`dropna` removes missing values. By default, the `axis` parameter is `0` which stands for row-wise deletion.","d3b3697c":"## Scaling","85d4d2b5":"## Filter (Query) Data\n\nThe `loc`ate indexer allows for access to rows by column names or a boolean array.","5f478b31":"## Bin Values","a098dd46":"## Identify Outliers\n\nAn example to remove (filter away) outliers is to remove values above and below 3 standard deviation from the mean.\n\nWays to handle outliers:\n- Deletion\n- Transformation: Natural log\n- Imputation (similar to missing values)","1fef22a8":"# Exploratory Data Analysis","f8d1796b":"## Matplotlib","4337fba1":"## Seaborn","1fb85ebe":"### Imputation\n\n`fillna` is useful to populate missing values.","b46d230d":"## Encode Labels (Factorise)"}}