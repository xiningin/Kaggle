{"cell_type":{"533a531b":"code","13e83632":"code","e6d541af":"code","11f73213":"code","ffe62951":"code","bf4d0ba7":"code","1eeb1eec":"code","e767221d":"code","e2c65379":"code","eb6f69ce":"code","ce813255":"code","324305e4":"code","44a44b73":"code","2e148a30":"code","2870e354":"code","2891f50d":"code","879da536":"code","fa6bc4a4":"code","f24be3a8":"code","cc3f27ab":"code","577de3e3":"code","62df0b90":"code","e5d75610":"code","1ef5ebc0":"code","206195cd":"code","76482d7f":"markdown","a564ea8e":"markdown","55e9184c":"markdown","d9a9ecde":"markdown","6342d719":"markdown","f5c4d0de":"markdown","cfae6ece":"markdown","345c366d":"markdown","e7403746":"markdown"},"source":{"533a531b":"import pandas as pd\nimport numpy as np\nimport re\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import classification_report, confusion_matrix\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim","13e83632":"train_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","e6d541af":"train_data.head()","11f73213":"# Filling age nulls with means based on their Pclass\ndef impute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n        if Pclass == 1:\n            return 37\n        elif Pclass == 2:\n            return 29\n        else:\n            return 24\n    else:\n        return Age\ntrain_data['Age'] = train_data[['Age','Pclass']].apply(impute_age,axis=1)","ffe62951":"train_data.drop('Cabin',axis=1,inplace=True)","bf4d0ba7":"train_data['Name']","1eeb1eec":"# Extracting title from name col\ndef title(name):\n    pattern = r\"([A-Za-z]+)\\.\"\n    return re.search(pattern,name)[0]\n\ntrain_data['Title'] = train_data['Name'].apply(title)\ntrain_data['Title'].value_counts()","e767221d":"# Marking unique titles\ndef unique_title(title):\n    ut = ['Mr.','Miss.','Mrs.']\n    return int(title not in ut)\ntrain_data['unique_title'] = train_data['Title'].apply(unique_title)\ntrain_data['unique_title']","e2c65379":"sex = pd.get_dummies(train_data['Sex'],drop_first=True)\nembark = pd.get_dummies(train_data['Embarked'],drop_first=True)\ntrain_data.drop(['Sex','Embarked','Name','Title','Ticket','PassengerId'],axis=1,inplace=True)\ntrain_data = pd.concat([train_data,sex,embark],axis=1)","eb6f69ce":"train_data.head()","ce813255":"y = train_data['Survived'].values\nX = train_data.drop('Survived',axis=1)","324305e4":"X.head()","44a44b73":"scaler = StandardScaler()\nscaler.fit(X)\nX = scaler.transform(X)","2e148a30":"LEARNING_RATE = 0.0001\nEPOCHS = 200","2870e354":"class Net(nn.Module):\n    \n    def __init__(self):\n        super(Net, self).__init__()\n        self.fc0 = nn.Linear(9, 10)\n        self.fc1 = nn.Linear(10, 15)     \n        self.fc2 = nn.Linear(15, 15)  \n        self.fc3 = nn.Linear(15, 10)  \n        self.fc4 = nn.Linear(10, 1)\n        \n        \n    def forward(self,x):\n        x = self.fc0(x)        \n        x = self.fc1(x)\n        x = self.fc2(x) \n        x = torch.sigmoid(x)\n        x = self.fc3(x)\n        x = self.fc4(x) \n        x = torch.sigmoid(x)\n        \n        return x\n    \nnet = Net().double()","2891f50d":"criterion = nn.BCELoss()\noptimizer = optim.Adam(net.parameters(), lr=LEARNING_RATE)#, momentum=0.9)","879da536":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.1)","fa6bc4a4":"epoch_loss = []\nfor epoch in range(EPOCHS):  \n    \n    running_loss = 0.0\n    \n    for i in range(x_train.shape[0]): \n        labels = torch.Tensor([y_train[i]]).double()\n        inputs = torch.from_numpy(x_train[i]).double()\n        optimizer.zero_grad()\n        \n        outputs = net(inputs)\n        \n        \n        loss = criterion(outputs, labels)        \n        loss.backward()\n        optimizer.step()\n\n        # print statistics\n        running_loss += loss.item()\n    # print every epoch\n    epoch_loss.append((running_loss \/ (i+1)))\n    print('Epochs: [%d\/%d]: loss: %.5f' % (epoch+1,EPOCHS,running_loss \/ (i+1)))   \n    \n\nprint('Finished Training')","f24be3a8":"predictions = net(torch.from_numpy(x_test).double())\npredictions = (predictions>=0.5).numpy().astype('float')","cc3f27ab":"print(confusion_matrix(y_test,predictions))\nprint(classification_report(y_test,predictions))","577de3e3":"def preprocess(data):\n    data['Age'] = data[['Age','Pclass']].apply(impute_age,axis=1)\n    data.drop('Cabin',axis=1,inplace=True)\n    data['Title'] = data['Name'].apply(title)    \n    data['unique_title'] = data['Title'].apply(unique_title)\n    sex = pd.get_dummies(data['Sex'],drop_first=True)\n    embark = pd.get_dummies(data['Embarked'],drop_first=True)\n    data.drop(['Sex','Embarked','Name','Title','Ticket','PassengerId'],axis=1,inplace=True)\n    data = pd.concat([data,sex,embark],axis=1)\n    return data","62df0b90":"test_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_data = preprocess(test_data)\ntest_data = scaler.transform(test_data)","e5d75610":"predictions = net(torch.from_numpy(test_data).double())\npredictions = (predictions>=0.5).numpy().astype('int')","1ef5ebc0":"sub = pd.DataFrame(predictions)\nsubs_d = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubs_d['Survived'] = sub\nsubs_d.to_csv('Submissions.csv', index = False)","206195cd":"predictions.sum()\/predictions.shape[0]","76482d7f":"# Make predictions","a564ea8e":"# Check net performance","55e9184c":"# Check if all predictions aren't '0'","d9a9ecde":"# Load and process traing data","6342d719":"# Load and preprocess test data","f5c4d0de":"# NNet and learning process","cfae6ece":"# Save output","345c366d":"# Imports","e7403746":"# Intro \n\nTitanic Classifier made with PyTorch.\n\nTesting different NN architecture, learing rates, optimizers ..."}}