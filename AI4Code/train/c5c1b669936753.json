{"cell_type":{"28f41830":"code","bd211a57":"code","754beb25":"code","3e768f72":"code","f44d20f0":"code","2f3d8256":"code","072f764d":"code","f87845dc":"code","53c44cce":"code","bd070a69":"code","9763c240":"code","e93c40e3":"code","36692534":"code","90097a17":"code","58f65585":"code","c74c6695":"code","2a7bcf3f":"code","2330b77f":"code","275e114d":"code","0155e5f2":"code","fb82fc98":"code","8369d942":"code","37e392ea":"code","6e1324e6":"code","f4a3dbf6":"code","10da31ad":"code","27178aa5":"code","4b7eec0e":"code","f57cd645":"code","bf62fcb5":"code","ccdd0f0a":"code","379f0c58":"code","00eef0ea":"markdown","8dd3a2f3":"markdown","120d7c32":"markdown","0a544581":"markdown","9b49227c":"markdown","1d47bf33":"markdown","492c3db2":"markdown","4d2ec11e":"markdown","7ea2d490":"markdown","96ce5564":"markdown","b72aa725":"markdown","a28dd950":"markdown","22e66154":"markdown","dbdd1593":"markdown","01f36962":"markdown","0e42262e":"markdown","94c15206":"markdown","8f7a4371":"markdown","da5e794b":"markdown","e0cf34fa":"markdown","c51aa70c":"markdown","cc29bcbc":"markdown","87b15e79":"markdown"},"source":{"28f41830":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport matplotlib.pyplot as plt\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel\nfrom ast import literal_eval","bd211a57":"d1=pd.read_csv('\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv')\nd2=pd.read_csv('\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv')","754beb25":"d1.columns = ['id','title','cast','crew']\nd2 = d2.merge(d1,on='id')","3e768f72":"d2.head()","f44d20f0":"C= d2['vote_average'].mean()\nC","2f3d8256":"m= d2['vote_count'].quantile(0.9)\nm","072f764d":"q_movies = d2.copy().loc[d2['vote_count'] >= m]\nq_movies.head(2)","f87845dc":"q_movies.shape","53c44cce":"def w_rating(x, m=m, C=C):\n    v = x['vote_count']\n    R = x['vote_average']\n    # Calculation based on the IMDB formula\n    return (v\/(v+m) * R) + (m\/(m+v) * C)","bd070a69":"# Define a new feature 'score' and calculate its value with `w_rating()`\nq_movies['score'] = q_movies.apply(w_rating, axis=1)","9763c240":"#Sort movies based on score calculated above\nq_movies = q_movies.sort_values('score', ascending=False)\n\n#Print the top 15 movies\nq_movies[['title_x', 'vote_count', 'vote_average', 'score']].head(10)","e93c40e3":"pop= d2.sort_values('popularity', ascending=False)\n\nplt.figure(figsize=(12,4))\nplt.barh(pop['title_x'].head(6),pop['popularity'].head(6), align='center',color='blue')\nplt.gca().invert_yaxis()\nplt.xlabel(\"Popularity\")\nplt.title(\"Popular Movies\")","36692534":"d2['overview'].head()","90097a17":"#Define a TF-IDF Vectorizer Object. Remove all english stop words such as 'the', 'a'\ntfidf = TfidfVectorizer(stop_words='english')\n\n#Replace NaN with an empty string\nd2['overview'] = d2['overview'].fillna('')\n\n#Construct the required TF-IDF matrix by fitting and transforming the data\ntfidf_matrix = tfidf.fit_transform(d2['overview'])\n\n#Output the shape of tfidf_matrix\ntfidf_matrix.shape","58f65585":"# Compute the cosine similarity matrix\ncosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)","c74c6695":"#Construct a reverse map of indices and movie titles\nindices = pd.Series(d2.index, index=d2['title_x']).drop_duplicates()","2a7bcf3f":"# Function that takes in movie title as input and outputs most similar movies\ndef get_recommendations(title, cosine_sim=cosine_sim):\n    # Get the index of the movie that matches the title\n    idx = indices[title]\n\n    # Get the pairwsie similarity scores of all movies with that movie\n    sim_scores = list(enumerate(cosine_sim[idx]))\n\n    # Sort the movies based on the similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n\n    # Get the scores of the 10 most similar movies\n    sim_scores = sim_scores[1:11]\n\n    # Get the movie indices\n    movie_indices = [i[0] for i in sim_scores]\n\n    # Return the top 10 most similar movies\n    return d2['title_x'].iloc[movie_indices]","2330b77f":"get_recommendations('The Godfather')","275e114d":"get_recommendations('Inception')","0155e5f2":"features = ['cast', 'crew', 'keywords', 'genres']\nfor feature in features:\n    d2[feature] = d2[feature].apply(literal_eval)","fb82fc98":"# Get the director's name from the crew feature. If director is not listed, return NaN\ndef get_director(x):\n    for i in x:\n        if i['job'] == 'Director':\n            return i['name']\n    return np.nan","8369d942":"# Returns the list top 3 elements or entire list; whichever is more.\ndef get_list(x):\n    if isinstance(x, list):\n        names = [i['name'] for i in x]\n        #Check if more than 3 elements exist. If yes, return only first three. If no, return entire list.\n        if len(names) > 3:\n            names = names[:3]\n        return names\n\n    #Return empty list in case of missing\/malformed data\n    return []","37e392ea":"# Define new director, cast, genres and keywords features that are in a suitable form.\nd2['director'] = d2['crew'].apply(get_director)\n\nfeatures = ['cast', 'keywords', 'genres']\nfor feature in features:\n    d2[feature] = d2[feature].apply(get_list)","6e1324e6":"d2[['title_x', 'cast', 'director', 'keywords', 'genres']].head(2)","f4a3dbf6":"# Function to convert all strings to lower case and strip names of spaces\ndef clean_data(x):\n    if isinstance(x, list):\n        return [str.lower(i.replace(\" \", \"\")) for i in x]\n    else:\n        #Check if director exists. If not, return empty string\n        if isinstance(x, str):\n            return str.lower(x.replace(\" \", \"\"))\n        else:\n            return ''","10da31ad":"# Apply clean_data function to your features.\nfeatures = ['cast', 'keywords', 'director', 'genres']\n\nfor feature in features:\n    d2[feature] = d2[feature].apply(clean_data)","27178aa5":"def create_soup(x):\n    return ' '.join(x['keywords']) + ' ' + ' '.join(x['cast']) + ' ' + x['director'] + ' ' + ' '.join(x['genres'])\nd2['soup'] = d2.apply(create_soup, axis=1)","4b7eec0e":"# Import CountVectorizer and create the count matrix\nfrom sklearn.feature_extraction.text import CountVectorizer\n\ncount = CountVectorizer(stop_words='english')\ncount_matrix = count.fit_transform(d2['soup'])","f57cd645":"# Compute the Cosine Similarity matrix based on the count_matrix\nfrom sklearn.metrics.pairwise import cosine_similarity\n\ncosine_sim2 = cosine_similarity(count_matrix, count_matrix)","bf62fcb5":"# Reset index of our main DataFrame and construct reverse mapping as before\nd2 = d2.reset_index()\nindices = pd.Series(d2.index, index=d2['title_x'])","ccdd0f0a":"get_recommendations('Batman Begins', cosine_sim2)","379f0c58":"get_recommendations('The Avengers', cosine_sim2)","00eef0ea":"This reccomendation sysytem has better success rate more than others because of utilizing more information from all the metadata. It gives us a better recommendations.\n\nIt is more likely that Marvels or DC comics fans will like the movies of the same production house. Therefore, to our features above we can add production_company . We can also increase the weight of the director , by adding the feature multiple times in the soup.","8dd3a2f3":"## Content Based Filtering\n\n### 1. Plot description based Recommender\n\nWe are going use Plot description based Recommender for all movies  based on their similarity score.","120d7c32":" I have used https:\/\/www.kaggle.com\/tmdb\/tmdb-movie-metadata for building recommendation systems.\n\nThere are three types of recommender systems :-\n \n1. Demographic Filtering - It uses the demographic data of a user to determine which items may be appropriate for recommendation.\n\n2. Content Based Filtering - It uses item features to recommend other items similar to what the user likes, based on their previous actions or explicit feedback.\n\n3. Collaborative Filtering - This system matches persons with similar interests and provides recommendations based on this matching. Collaborative filters do not require item metadata like its content-based counterparts. ","0a544581":"### TfIdfVectorizer\n\nWe'll use Term Frequency-Inverse Document Frequency (TF-IDF) vectors for each overview.\n\nThis is very common algorithm to transform text into a meaningful representation of numbers which is used to fit machine algorithm for prediction.","9b49227c":"where,\n\n1. v is the number of votes for the movie;\n2. m is the minimum votes required to be listed in the chart;\n3. R is the average rating of the movie; And\n4. C is the mean vote across the whole report\n\nWe already have v(vote_count) and R (vote_average) and C can be calculated as","1d47bf33":"## Importing libraries and loading data","492c3db2":"![TfIdfVectorizer](https:\/\/github.com\/wandererabir\/Movie-Recommendation-System\/raw\/9b1c1ef209e7731744f50563e9be656d146e6cbf\/tfidf.png)","4d2ec11e":"## Demographic Filtering\n\nBefore getting started with this -\n\n1. we need a metric to score or rate movie\n2. Calculate the score for every movie\n3. Sort the scores and recommend the best rated movie to the users.\n\nWe can use the average ratings of the movie as the score but using this won't be fair enough since a movie with 8.9 average rating and only 3 votes cannot be considered better than the movie with 7.8 as as average rating but 40 votes. So, I'll be using IMDB's weighted rating (wr) which is given as :-","7ea2d490":"## Collaborative Filtering\n\n### User based filtering\n\nThese systems recommend products to a user that similar users have liked. For measuring the similarity between two users we can either use pearson correlation or cosine similarity. \n\n### Item Based Collaborative Filtering \n\nInstead of measuring the similarity between users, the item-based CF recommends items based on their similarity with the items that the target user rated. Likewise, the similarity can be computed with Pearson Correlation or Cosine Similarity.\n\n### I have not done this one in this following notebook. Feel free to explore on your own","96ce5564":"### 2. Credits, Genres and Keywords Based Recommender\n\nWe are going to build a recommender based on the following metadata: the 3 top actors, the director, related genres and the movie plot keywords. This system quality will incraese because of better usage of data.","b72aa725":"### Using linear_kernal()\n\nWe will be using the cosine similarity to calculate a numeric quantity that denotes the similarity between two movies. We use the cosine similarity score since it is independent of magnitude and is relatively easy and fast to calculate. Mathematically, it is defined as follows:","a28dd950":"# Movie Recommendation System","22e66154":"### This recommendation system shows the ' Trending Now '  tab of a streaming app","dbdd1593":"We are now in a position to create our \"metadata soup\", which is a string that contains all the metadata that we want to feed to our vectorizer","01f36962":"![alt text](https:\/\/github.com\/wandererabir\/Movie-Recommendation-System\/raw\/9b1c1ef209e7731744f50563e9be656d146e6cbf\/wr.png)","0e42262e":"### Qualified movies","94c15206":"### Calculate our metric for each qualified movie using function w_rating","8f7a4371":"### Merging d1 & d2","da5e794b":"# Conclusion\nI have create recommendation systems using demographic and content- based. While demographic filtering is very simple and elementary and cannot be used practically whereas Hybrid Systems can take advantage of content-based and collaborative filtering as the two approaches are proved to be almost complimentary. This model was very baseline and only provides a fundamental framework and information to start with.","e0cf34fa":"### Using CountVectorizer\n\nIt is used to transform a given text into a vector on the basis of the frequency (count) of each word that occurs in the entire text.","c51aa70c":"### Calculating m, we use 90% percentile as cutoff. It must have more votes than at least 90% of the movies in the list.","cc29bcbc":"![cosine similarity](https:\/\/github.com\/wandererabir\/Movie-Recommendation-System\/raw\/9b1c1ef209e7731744f50563e9be656d146e6cbf\/simi.png)","87b15e79":"### Function that takes in a movie title as an input and outputs a list of the 10 most similar movies. "}}