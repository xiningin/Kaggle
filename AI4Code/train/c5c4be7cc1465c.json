{"cell_type":{"26cf98ac":"code","38f38e34":"code","8c74d49e":"code","c9848eab":"code","867cf6fc":"code","0e5bf5ac":"code","8bfce84e":"code","b87e0636":"code","c23834bb":"code","b2e64dab":"code","c2f565b1":"code","1e28f1e5":"code","eb959ba2":"code","0bd7bd86":"code","94e8e5a2":"code","dc9f77b4":"code","b5fda48f":"code","4d321f13":"code","a834fab0":"code","4112a88f":"code","641fd71f":"code","071d801e":"code","4240ba35":"code","a233815a":"code","ef6f1cc7":"code","a2d1236f":"code","f3d957e6":"code","fa6580d7":"code","100f5d78":"code","ca73b02a":"code","32638347":"code","fcff2c70":"code","120fd2b8":"code","fd85def3":"code","8e7ca47b":"code","90dfce80":"code","a82c0b97":"code","2e272778":"code","7a485365":"code","1fcebfcf":"code","dfa76ff3":"code","b2543c0a":"code","0448e768":"code","5cbf46e0":"code","47f84ec7":"code","1a7dae3a":"code","7ba3de0e":"code","dd9e2d64":"code","cf6742bd":"code","86be9acd":"code","2c35f85e":"markdown","2e145e67":"markdown","6f6e4f04":"markdown","26c71581":"markdown","37906a6e":"markdown","5e3ab27f":"markdown","99882037":"markdown","d8675c7f":"markdown","8b05dac4":"markdown","cd46dc2f":"markdown","e753ae3d":"markdown","bb43b948":"markdown","cc7c8a16":"markdown","f2f5d5c6":"markdown"},"source":{"26cf98ac":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns\n\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\n\nimport lightgbm as lgb","38f38e34":"admission = pd.read_csv('..\/input\/Admission_Predict_Ver1.1.csv')","8c74d49e":"admission.info()","c9848eab":"admission.head()","867cf6fc":"admission.columns = [c.replace(' ', '_') for c in admission.columns]","0e5bf5ac":"sns.distplot(admission.Chance_of_Admit_, rug = True)\nplt.title(\"Distribution of Admission Chances\")\nplt.xlabel(\"Admission Chance\")\nplt.ylabel(\"Count of student\")\nplt.show()","8bfce84e":"admission.Chance_of_Admit_.describe()","b87e0636":"admission['logadchange'] = np.log1p(admission[\"Chance_of_Admit_\"])\nsns.distplot(admission['logadchange'], color = \"r\")\nplt.title(\"Log Transformed Distribution of Admission Chances\")\nplt.xlabel(\"Admission Chance\")\nplt.ylabel(\"Count of student\")\nplt.show()","c23834bb":"admission.logadchange.describe()","b2e64dab":"admission.GRE_Score.describe()","c2f565b1":"sns.jointplot(x = \"GRE_Score\", y = \"Chance_of_Admit_\", data = admission, height = 8, ratio = 4, color = \"b\")\nplt.show()","1e28f1e5":"admission.TOEFL_Score.describe()","eb959ba2":"sns.jointplot(x = \"GRE_Score\", y = \"Chance_of_Admit_\", data = admission, height = 8, ratio = 4, color = \"r\")\nplt.show()","0bd7bd86":"admission.University_Rating.describe()","94e8e5a2":"plt.figure(figsize = (8, 6))\nsns.countplot(admission['University_Rating'].sort_values())\nplt.title(\"University Rating Count\", fontsize = 15)\nplt.xticks(fontsize = 14)\nplt.show()","dc9f77b4":"f, ax = plt.subplots(figsize = (8, 6))\nfig = sns.boxplot(x = admission['University_Rating'], y = admission['Chance_of_Admit_'], data = admission)\nfig.axis(ymin = 0, ymax = 1.0)\nplt.xlabel(\"University Ratings\")\nplt.ylabel(\"Admission Chance\")\nplt.show()","b5fda48f":"admission.SOP.describe()","4d321f13":"plt.figure(figsize = (8, 6))\nsns.countplot(admission['SOP'].sort_values())\nplt.title(\"Statement of Purpose Strength Level Count\", fontsize = 15)\nplt.xticks(fontsize = 14)\nplt.show()","a834fab0":"f, ax = plt.subplots(figsize = (8, 6))\nfig = sns.boxplot(x = admission['SOP'], y = admission['Chance_of_Admit_'], data = admission)\nfig.axis(ymin = 0, ymax = 1.0)\nplt.xlabel(\"Statement of Purpose Strength Level\")\nplt.ylabel(\"Admission Chance\")\nplt.show()","4112a88f":"admission.LOR_.describe()","641fd71f":"plt.figure(figsize = (8, 6))\nsns.countplot(admission['LOR_'].sort_values())\nplt.title(\"Letter of Recommendation Strength Level Count\", fontsize = 15)\nplt.xticks(fontsize = 14)\nplt.show()","071d801e":"f, ax = plt.subplots(figsize = (8, 6))\nfig = sns.boxplot(x = admission['LOR_'], y = admission['Chance_of_Admit_'], data = admission)\nfig.axis(ymin = 0, ymax = 1.0)\nplt.xlabel(\"Letter of Recommendation Strength Level\")\nplt.ylabel(\"Admission Chance\")\nplt.show()","4240ba35":"admission.CGPA.describe()","a233815a":"sns.jointplot(x = \"CGPA\", y = \"Chance_of_Admit_\", data = admission, height = 8, ratio = 4, color = \"b\")\nplt.show()","ef6f1cc7":"admission = admission.iloc[:, admission.columns != 'Serial_No.']\nadmission_expect = admission.iloc[:, admission.columns != 'logadchange']\ncor = admission_expect.corr()\nf, ax = plt.subplots(figsize = (8, 6))\nsns.heatmap(cor, vmax = 0.9, annot = True, square = True, fmt = '.2f')","a2d1236f":"#Split the X and the y\nX = admission.iloc[:, admission.columns != 'Chance_of_Admit_']\ny = admission.iloc[:, admission.columns == 'Chance_of_Admit_']","f3d957e6":"X.shape","fa6580d7":"y.shape","100f5d78":"from sklearn.decomposition import PCA\nfrom sklearn import preprocessing\n\npca = PCA()\npca.fit(X)\npca.data = pca.transform(X)\n\n\n#Percentage variance of each pca component stands for\nper_var = np.round(pca.explained_variance_ratio_*100, decimals = 1)\n#Create labels for the scree plot\nlabels = ['PC' + str(x) for x in range(1, len(per_var)+1)]\n\n#Plot the data\nplt.bar(x=range(1, len(per_var)+1), height=per_var, tick_label = labels)\nplt.ylabel('percentage of Explained Variance')\nplt.xlabel('Principle Component')\nplt.title('Scree plot')\nplt.show()","ca73b02a":"print('PC1 + PC2 add up to ' +  str(sum(per_var[:2])) + ' % of the variance')","32638347":"#Extract the PC1 and PC2 information\nnewdata = pd.DataFrame(data=pca.data[:,:2], columns = ['PC1', 'PC2'])","fcff2c70":"newdata.head()","120fd2b8":"newdata.shape #Checking shape","fd85def3":"newdata['PC1'].describe()","8e7ca47b":"#train test split\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(newdata, y,\n                                                   test_size = 0.25, random_state = 2019)","90dfce80":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X_train)  # Don't cheat - fit only on training data\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)  # apply same transformation to test data","a82c0b97":"#Tunning parameters using our gridsearch\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.model_selection import GridSearchCV\n\nparams = {\n    'alpha': [0.0001, 0.001, 0.01, 0.1],\n    'loss': ['squared_loss', 'huber', 'epsilon_insensitive'],\n    'penalty': ['l2', 'l1', 'elasticnet'],\n    'tol': [0.001, 0.1, 1],\n    'learning_rate': ['constant', 'optimal', 'invscaling', 'adaptive']\n}\n\nsgd_clf = SGDRegressor(max_iter=1000)\nsgd_grid_clf = GridSearchCV(sgd_clf, params, cv = 5)\nsgd_grid_clf.fit(X_train, y_train.values.ravel())","2e272778":"#Calculating the RMSE\nsgd_pred = sgd_grid_clf.predict(X_test)\nsgd_rms = sqrt(mean_squared_error(y_test, sgd_pred))\nsgd_rms","7a485365":"from sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import uniform\n\nparams_rand = {\n    'alpha': uniform(),\n    'loss': ['squared_loss', 'huber', 'epsilon_insensitive'],\n    'penalty': ['l2', 'l1', 'elasticnet'],\n    'tol': [0.001, 0.1, 1],\n    'learning_rate': ['constant', 'optimal', 'invscaling', 'adaptive']\n}","1fcebfcf":"sgd_rand_clf = RandomizedSearchCV(sgd_clf, params_rand, cv = 5, random_state = 2019)\nsgd_rand_clf.fit(X_train, y_train.values.ravel())","dfa76ff3":"#Calculating the RMSE\nsgd_rand_pred = sgd_rand_clf.predict(X_test)\nsgd_rand_rms = sqrt(mean_squared_error(y_test, sgd_rand_pred))\nsgd_rand_rms","b2543c0a":"from sklearn.linear_model import Lasso\n\nlasso_params = {\n    'alpha': [0.001, 0.01, 0.1, 1.0],\n    'tol': [0.001, 0.1, 1]\n}\n\nlasso_clf = Lasso(max_iter=1000)\nlasso_grid_clf = GridSearchCV(lasso_clf, lasso_params, cv = 5)\nlasso_grid_clf.fit(X_train, y_train.values.ravel())","0448e768":"#Calculating the RMSE\nlasso_pred = lasso_grid_clf.predict(X_test)\nlasso_rms = sqrt(mean_squared_error(y_test, lasso_pred))\nlasso_rms","5cbf46e0":"lasso_rand_params = {\n    'alpha': uniform(),\n    'tol': [0.001, 0.1, 1]\n}","47f84ec7":"lasso_rand_clf = RandomizedSearchCV(lasso_clf, lasso_rand_params, cv = 5,  n_iter = 100, random_state = 2019)\nlasso_rand_clf.fit(X_train, y_train.values.ravel())","1a7dae3a":"#Calculating the RMSE\nlasso_rand_pred = lasso_rand_clf.predict(X_test)\nlasso_rms = sqrt(mean_squared_error(y_test, lasso_rand_pred))\nlasso_rms","7ba3de0e":"# create dataset for lightgbm\nlgb_train = lgb.Dataset(X_train, y_train)\nlgb_eval = lgb.Dataset(X_test, y_test, reference=lgb_train)","dd9e2d64":"#Tunning in hyperparameters\nparams = {\n    'boosting_type': 'gbdt',\n    'objective': 'regression_l2',\n    'metric': {'l2', 'l1'},\n    'max_depth': 6,\n    'learning_rate': 0.06,\n    'feature_fraction': 0.9,\n    'bagging_fraction': 0.9,\n    'bagging_freq': 5,\n    'max_bin': 255,\n    'verbose': 0\n}","cf6742bd":"#Train the model\ngbm = lgb.train(params,\n                lgb_train,\n                num_boost_round=120,\n                valid_sets=lgb_eval,\n                early_stopping_rounds=5)","86be9acd":"#Making predictions\ngbm_pred = gbm.predict(X_test, num_iteration=gbm.best_iteration)\nprint('The rmse of prediction is:', mean_squared_error(y_test, gbm_pred) ** 0.5)","2c35f85e":"The distribution is not that normal, we can try to log transform the data to see how it perform in this situation","2e145e67":"We choose to use Principle Component Analysis to reduce our dimensionality while preserve the highest variance up to 95% of the data","6f6e4f04":"__VS Randomsearch__","26c71581":"__Admission Chance (Target Variable) Distribution__","37906a6e":"__Correlation Matrix__","5e3ab27f":"### __LightGBM__","99882037":"Perform SGD Regression (Might not be a good model for this example since it is less than 100k sample)","d8675c7f":"These 2 scoares are pretty good measurement of the admission rates. ","8b05dac4":"__Check University Rating \/ Statement of Purpose \/ Letter of Recommendation Vs Admission Chance__","cd46dc2f":"__Check GRE & TOEFL Score Vs Admission Chance__","e753ae3d":"__The takeaways from this heatmaps:__\n    - All variables have significant relationship with our predictor admission chance\n    - TOEFL score, CGPA, GRE score, SOP and University Rating is strongly correlated with each other","bb43b948":"__Check Undergraduate GPA Vs Admission Chance__","cc7c8a16":"__VS RandomizedSearch__","f2f5d5c6":"__Train on Lasso Regressor__"}}