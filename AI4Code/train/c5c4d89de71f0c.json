{"cell_type":{"fa7c5e06":"code","1f8d435e":"code","befcd900":"code","44e46728":"code","e1b02a42":"code","68ddb0cd":"code","139f8ddb":"code","9aa71401":"code","ec893d13":"code","ca9af885":"code","4d41e048":"code","71207d62":"code","1933248e":"code","d2df92a8":"code","10bb6edd":"code","1f8c9c9a":"code","7ab98f0d":"code","1c000a54":"code","9383da31":"code","2f058e51":"code","7d965fc5":"code","b461efd3":"code","d267f5f2":"code","bb7a4ab5":"code","6dc7d7d2":"code","46fc81ab":"code","f404c804":"code","b419a99d":"code","3d625da1":"code","c9ea0444":"code","0599c245":"code","75d2bd4c":"code","18ad11a6":"code","3ae3228f":"code","3f991c71":"code","2b3a85dd":"code","89d12de8":"code","a239042b":"code","2d2d71f5":"code","8a8f0f06":"code","49dc46bd":"code","e3d54c3c":"markdown","33eb93e3":"markdown","7b5d86ea":"markdown","ac5039a7":"markdown","b18b65c1":"markdown"},"source":{"fa7c5e06":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1f8d435e":"train = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/test.csv')","befcd900":"sample_submission = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/sample_submission.csv')","44e46728":"train.info()","e1b02a42":"train['LotFrontage'].fillna(train['LotFrontage'].mean(), inplace=True)\ntrain.drop('Alley', axis=1, inplace=True)\ntrain['MasVnrType'].fillna('None', inplace=True)\ntrain['MasVnrArea'].fillna(train['MasVnrArea'].mean(), inplace=True)\ntrain['BsmtQual'].fillna(method='ffill', inplace=True)\ntrain['BsmtCond'].fillna(method='ffill', inplace=True)\ntrain['BsmtExposure'].fillna('No', inplace=True)\ntrain['BsmtFinType1'].fillna('No', inplace=True)\ntrain['BsmtFinType2'].fillna('No', inplace=True)\ntrain['Electrical'].fillna(method='ffill', inplace=True)\ntrain.drop('FireplaceQu', axis=1, inplace=True)\ntrain['GarageType'].fillna(method='ffill', inplace=True)\ntrain['GarageYrBlt'].fillna(round(train['GarageYrBlt'].mean()), inplace=True)\ntrain['GarageFinish'].fillna(method='ffill', inplace=True)\ntrain['GarageQual'].fillna(method='ffill', inplace=True)\ntrain['GarageCond'].fillna(method='ffill', inplace=True)\ntrain.drop('PoolQC', axis=1, inplace=True)\ntrain.drop('Fence', axis=1, inplace=True)\ntrain.drop('MiscFeature', axis=1, inplace=True)\n\ntrain['LotFrontage'] = train['LotFrontage'].astype('int64')\ntrain['MasVnrArea'] = train['MasVnrArea'].astype('int64')\ntrain['GarageYrBlt'] = train['GarageYrBlt'].astype('int64')","68ddb0cd":"train_to_be_dummied = list(train.dtypes[train.dtypes == object].index)","139f8ddb":"train_dummies = pd.get_dummies(train[train_to_be_dummied])","9aa71401":"train.drop(list(train.dtypes[train.dtypes == object].index), axis=1, inplace=True)","ec893d13":"train = pd.concat([train, train_dummies], axis=1)","ca9af885":"X_train = train.drop('SalePrice', axis=1)","4d41e048":"y_train = train['SalePrice']","71207d62":"test.info()","1933248e":"test['MSZoning'].fillna(method='ffill', inplace=True)\ntest['LotFrontage'].fillna(test['LotFrontage'].mean(), inplace=True)\ntest.drop('Alley', axis=1, inplace=True)\ntest['Utilities'].fillna('AllPub', inplace=True)\ntest['Exterior1st'].fillna(method='ffill', inplace=True)\ntest['Exterior2nd'].fillna(method='ffill', inplace=True)\ntest['MasVnrType'].fillna('None', inplace=True)\ntest['MasVnrArea'].fillna(train['MasVnrArea'].mean(), inplace=True)\ntest['BsmtQual'].fillna(method='ffill', inplace=True)\ntest['BsmtCond'].fillna(method='ffill', inplace=True)\ntest['BsmtExposure'].fillna('No', inplace=True)\ntest['BsmtFinType1'].fillna('No', inplace=True)\ntest['BsmtFinType2'].fillna('No', inplace=True)\ntest['BsmtFinSF1'].fillna(round(test['BsmtFinSF1'].mean()), inplace=True)\ntest['BsmtFinSF2'].fillna(round(test['BsmtFinSF2'].mean()), inplace=True)\ntest['BsmtUnfSF'].fillna(round(test['BsmtUnfSF'].mean()), inplace=True)\ntest['TotalBsmtSF'].fillna(round(test['BsmtFinSF1'].mean()), inplace=True)\ntest['BsmtFullBath'].fillna(round(test['BsmtFullBath'].mean()), inplace=True)\ntest['BsmtHalfBath'].fillna(round(test['BsmtHalfBath'].mean()), inplace=True)\ntest['KitchenQual'].fillna(method='ffill', inplace=True)\ntest['Functional'].fillna(method='ffill', inplace=True)\ntest.drop('FireplaceQu', axis=1, inplace=True)\ntest['GarageType'].fillna(method='ffill', inplace=True)\ntest['GarageYrBlt'].fillna(round(test['GarageYrBlt'].mean()), inplace=True)\ntest['GarageFinish'].fillna(method='ffill', inplace=True)\ntest['GarageQual'].fillna(method='ffill', inplace=True)\ntest['GarageCond'].fillna(method='ffill', inplace=True)\ntest['GarageCars'].fillna(round(test['GarageCars'].mean()), inplace=True)\ntest['GarageArea'].fillna(round(test['GarageArea'].mean()), inplace=True)\ntest.drop('PoolQC', axis=1, inplace=True)\ntest.drop('Fence', axis=1, inplace=True)\ntest.drop('MiscFeature', axis=1, inplace=True)\ntest['SaleType'].fillna(method='ffill', inplace=True)\n\ntest['LotFrontage'] = test['LotFrontage'].astype('int64')\ntest['BsmtFinSF1'] = test['BsmtFinSF1'].astype('int64')\ntest['BsmtFinSF2'] = test['BsmtFinSF2'].astype('int64')\ntest['BsmtUnfSF'] = test['BsmtUnfSF'].astype('int64')\ntest['TotalBsmtSF'] = test['TotalBsmtSF'].astype('int64')\ntest['BsmtFullBath'] = test['BsmtFullBath'].astype('int64')\ntest['BsmtHalfBath'] = test['BsmtHalfBath'].astype('int64')\ntest['GarageYrBlt'] = test['GarageYrBlt'].astype('int64')\ntest['GarageCars'] = test['GarageCars'].astype('int64')\ntest['GarageArea'] = test['GarageArea'].astype('int64')\ntest['MasVnrArea'] = test['MasVnrArea'].astype('int64')","d2df92a8":"test_to_be_dummied = list(test.dtypes[test.dtypes == object].index)","10bb6edd":"test_dummies = pd.get_dummies(test[test_to_be_dummied])","1f8c9c9a":"test.drop(list(test.dtypes[test.dtypes == object].index), axis=1, inplace=True)","7ab98f0d":"X_test = pd.concat([test, test_dummies], axis=1)","1c000a54":"for i in range(len(X_train.columns)):\n    if X_train.columns[i] not in list(X_test.columns):\n        X_train.drop(X_train.columns[i], axis=1, inplace=True)","9383da31":"X_train.shape","2f058e51":"y_train.shape","7d965fc5":"X_test.shape","b461efd3":"from sklearn.linear_model import LinearRegression","d267f5f2":"lr = LinearRegression()\n\nlr.fit(X_train, y_train)\n\npredictions = lr.predict(X_test)","bb7a4ab5":"predictions = pd.Series(predictions, name='SalePrice')\n\nsubmission = pd.concat([X_test['Id'], predictions], axis=1)","6dc7d7d2":"submission.to_csv('submission.csv', header=True, index=False)","46fc81ab":"from sklearn.linear_model import Lasso","f404c804":"lasso = Lasso()\n\nlasso.fit(X_train, y_train)\n\npredictions = lasso.predict(X_test)","b419a99d":"predictions = pd.Series(predictions, name='SalePrice')\n\nsubmission = pd.concat([X_test['Id'], predictions], axis=1)","3d625da1":"submission.to_csv('submission.csv', header=True, index=False)","c9ea0444":"from sklearn.linear_model import ElasticNet","0599c245":"el = ElasticNet()\n\nel.fit(X_train, y_train)\n\npredictions = el.predict(X_test)","75d2bd4c":"predictions = pd.Series(predictions, name='SalePrice')\n\nsubmission = pd.concat([X_test['Id'], predictions], axis=1)","18ad11a6":"submission.to_csv('submission.csv', header=True, index=False)","3ae3228f":"from sklearn.linear_model import Ridge","3f991c71":"ridge = Ridge()\n\nridge.fit(X_train, y_train)\n\npredictions = ridge.predict(X_test)","2b3a85dd":"predictions = pd.Series(predictions, name='SalePrice')\n\nsubmission = pd.concat([X_test['Id'], predictions], axis=1)","89d12de8":"submission.to_csv('submission.csv', header=True, index=False)","a239042b":"from sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVR","2d2d71f5":"regr = make_pipeline(StandardScaler(), SVR(kernel='linear', C=1.0, epsilon=0.2))\nregr.fit(X_train, y_train)\npredictions = regr.predict(X_test)","8a8f0f06":"predictions = pd.Series(predictions, name='SalePrice')\n\nsubmission = pd.concat([X_test['Id'], predictions], axis=1)","49dc46bd":"submission.to_csv('submission.csv', header=True, index=False)","e3d54c3c":"# Linear Regression","33eb93e3":"# ElasticNet","7b5d86ea":"# Lasso","ac5039a7":"# Support Vector Regression","b18b65c1":"# Ridge Regression"}}