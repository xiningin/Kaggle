{"cell_type":{"b3ca8740":"code","c8b47de9":"code","bb8c8329":"code","f2029434":"code","f352b402":"code","0e34122f":"code","d9a69b8c":"code","5095c0f7":"code","f2b0145a":"code","1cf7389f":"code","eb047b83":"code","d89af6db":"code","389446cd":"code","1ee27f2c":"code","e9150918":"code","41de1274":"code","0b846270":"code","47f77222":"code","d68dd2b9":"code","4414099f":"code","4c0d6760":"code","2648fa61":"code","91b8e382":"code","d2119720":"code","177a3b48":"code","335ee476":"code","7ab16fc5":"code","633d46da":"code","c75bb68c":"code","1de90abb":"code","bd437747":"code","33b04b4c":"code","bb3bc510":"code","4209f91c":"code","0fa3132a":"code","569fc6e2":"code","3a252447":"markdown","98f23ab9":"markdown","7b25261a":"markdown","533077aa":"markdown","0a0e5fe3":"markdown","26164000":"markdown","a0afc215":"markdown","8ae145be":"markdown","654b40b3":"markdown","d29d3cb7":"markdown","2f690fbd":"markdown","96186ccc":"markdown","ef537134":"markdown","aaf4fe2e":"markdown","29aac964":"markdown","ab8fc11b":"markdown","b33c03c4":"markdown","e81332c9":"markdown","587304d9":"markdown","21965590":"markdown","2cf51d69":"markdown","9baad51d":"markdown","88d23a3e":"markdown","d9918e38":"markdown","b3727fef":"markdown","44d46850":"markdown","2a1ba064":"markdown","a72a3c66":"markdown","c8714abf":"markdown","33718ce1":"markdown","b496ee8f":"markdown","d6a5b6ca":"markdown","491d08d7":"markdown","9d21e691":"markdown","32304694":"markdown","c4befe95":"markdown","d899e079":"markdown","2334d2d5":"markdown","64a647fc":"markdown","c2d29dc6":"markdown","ffe8757c":"markdown","d233e12b":"markdown","3a1f480c":"markdown","7daa3774":"markdown","de1c86e5":"markdown","bf98be25":"markdown","2f1e5749":"markdown","62da902d":"markdown","d9755661":"markdown","2c453872":"markdown","bac0d270":"markdown","5043d427":"markdown","4c0fe3d8":"markdown","1058e9f8":"markdown","2c5ed0f9":"markdown","c88b20c8":"markdown","01802e9b":"markdown","bfc93e0a":"markdown","6630162f":"markdown","a630dcf2":"markdown","21219331":"markdown","44bdea58":"markdown","00862cf9":"markdown","1882c242":"markdown","bd930a07":"markdown","970f36a1":"markdown","86c406e0":"markdown","74844c6a":"markdown","f090d342":"markdown","77848256":"markdown","440d05ae":"markdown","3731e66d":"markdown","bcf50481":"markdown","d20b461c":"markdown","c5b52b1e":"markdown","e974a0ed":"markdown","759ad393":"markdown"},"source":{"b3ca8740":"from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)    #THIS LINE IS MOST IMPORTANT AS THIS WILL DISPLAY PLOT ON \n#NOTEBOOK WHILE KERNEL IS RUNNING\n\nimport numpy as np \nimport pandas as pd\nimport plotly as py\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport seaborn as sns\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.manifold import TSNE\nimport matplotlib.pyplot as plt\nimport lightgbm as lgb\nfrom bayes_opt import BayesianOptimization\nfrom sklearn.metrics import roc_auc_score\nimport shap\nfrom pandas_profiling import ProfileReport \n\nimport warnings  \nwarnings.filterwarnings('ignore')","c8b47de9":"df = pd.read_csv('..\/input\/league-of-legends-diamond-ranked-games-10-min\/high_diamond_ranked_10min.csv')\ndf['blueWins'] = df['blueWins'].map({1: 'Blue Side', 0:'Red Side'})\n\nisneg = []\nfor i in df.blueGoldDiff :\n    if i < 0 :\n        isneg.append(0)\n    else :\n        isneg.append(1)\ndf['blueGoldDiffSituation'] = isneg\nisneg = []\nfor i in df.redGoldDiff :\n    if i < 0 :\n        isneg.append(0)\n    else :\n        isneg.append(1)\ndf['redGoldDiffSituation'] = isneg\n\nisneg = []\nfor i in df.blueExperienceDiff :\n    if i < 0 :\n        isneg.append(0)\n    else :\n        isneg.append(1)\ndf['blueExperienceDiffSituation'] = isneg\nisneg = []\nfor i in df.redExperienceDiff :\n    if i < 0 :\n        isneg.append(0)\n    else :\n        isneg.append(1)\ndf['redExperienceDiffSituation'] = isneg","bb8c8329":"display(df.info())\ndf.head()","f2029434":"report_data = ProfileReport(df.sample(2000))\nreport_data","f352b402":"color_discrete_map = {'Blue Side': 'rgb(122, 148, 231)', 'Red Side': 'rgb(255, 105, 97)'}\n\nfig = px.histogram(df, x=\"blueWins\",color = 'blueWins', color_discrete_map=color_discrete_map,\n                  labels={\n                     \"blueWins\": \"Sides\",\"count\": \"Wins\",\n                 },\n                title=\"Total Wins per Side\",\n                hover_name=\"blueWins\",       \n                  )\n# fig.show()\npy.offline.iplot(fig)","0e34122f":"color_discrete_map = {'Blue': 'rgb(122, 148, 231)', 'Red': 'rgb(255, 105, 97)'}\n\nlayout = go.Layout(\n    yaxis=dict(\n        range=[5, 45]\n    ),\n    xaxis=dict(\n        range=[100, 200]\n    )\n)\n\ntmp1 = df[['blueWardsPlaced', 'blueWardsDestroyed']].copy()\ntmp1.columns = ['WardsPlaced','WardsDestroyed']\ntmp1 = tmp1.astype(float)\ntmp1['Side'] = 'Blue'\ntmp2 = df[['redWardsPlaced', 'redWardsDestroyed']].copy()\ntmp2.columns = ['WardsPlaced','WardsDestroyed']\ntmp2 = tmp2.astype(float)\ntmp2['Side'] = 'Red'\ndata = pd.concat([tmp1, tmp2], ignore_index = True).sample(2000)\ndata\n\nfig1 = px.violin(data, y=\"WardsPlaced\", color = 'Side',  box=True, points='all', color_discrete_map=color_discrete_map, title = 'Wards Placed per Side')\nfig2 = px.violin(data, y=\"WardsPlaced\", color = 'Side',  box=True, points='all', color_discrete_map=color_discrete_map, title = 'Wards Placed per Side Zoomed')\nfig2.update_layout(\n    yaxis=dict(\n        range=[5, 45]\n    )\n)\nfig1.show()\nfig2.show()","d9a69b8c":"fig1 = px.violin(data, y=\"WardsDestroyed\", color = 'Side',  box=True, points='all', color_discrete_map=color_discrete_map, title = 'Wards Destroyed per Side')\nfig2 = px.violin(data, y=\"WardsDestroyed\", color = 'Side',  box=True, points='all', color_discrete_map=color_discrete_map, title = 'Wards Destroyed per Side Zoomed')\nfig2.update_layout(\n    yaxis=dict(\n        range=[0, 10]\n    )\n)\nfig1.show()\nfig2.show()","5095c0f7":"color_discrete_map = {'Blue': 'rgb(122, 148, 231)', 'Red': 'rgb(255, 105, 97)'}\n\ntmp1 = df[['blueFirstBlood']].copy()\ntmp1.columns = ['FirstBloods']\ntmp1 = tmp1.astype(float)\ntmp1['Side'] = 'Blue'\ntmp2 = df[['redFirstBlood']].copy()\ntmp2.columns = ['FirstBloods']\ntmp2 = tmp2.astype(float)\ntmp2['Side'] = 'Red'\ndata = pd.concat([tmp1, tmp2])\ndata = data.groupby('Side').mean().reset_index()\n\nfig = px.bar(data, x='Side', y='FirstBloods',color = 'Side', color_discrete_map=color_discrete_map, title = 'Mean First Bloods per Side')\nfig.show()","f2b0145a":"col = ['blueKills','blueDeaths','blueAssists','redKills','redDeaths','redAssists']\ntmp1 = df[col[0:3]].copy()\ntmp1.columns = ['Kills','Death','Assistes']\ntmp1['Side'] = 'Blue'\ntmp2 = df[col[3:6]].copy()\ntmp2.columns = ['Kills','Death','Assistes']\ntmp2['Side'] = 'Red'\n\ndata = pd.concat([tmp1, tmp2], ignore_index = True)\ndata = data.groupby('Side').mean().reset_index()\ndata = pd.melt(data, id_vars=['Side'], value_vars=['Kills','Death','Assistes'])\ndata.columns = ['Side','KDA','Mean']\n\nfig = px.bar(data, x=\"Side\", y=\"Mean\", color=\"Side\", color_discrete_map=color_discrete_map,\n             facet_col=\"KDA\", title = 'Mean KDA per Side'\n#              category_orders={\"day\": [\"Thur\", \"Fri\", \"Sat\", \"Sun\"],\n#                               \"time\": [\"Lunch\", \"Dinner\"]}\n            )\nfig.show()","1cf7389f":"col = ['blueKills','blueDeaths','blueAssists','redKills','redDeaths','redAssists']\ntmp1 = df[col[0:3]].copy()\ntmp1.columns = ['Kills','Death','Assistes']\ntmp1['Side'] = 'Blue'\ntmp2 = df[col[3:6]].copy()\ntmp2.columns = ['Kills','Death','Assistes']\ntmp2['Side'] = 'Red'\n\ndata = pd.concat([tmp1, tmp2], ignore_index = True)\n# data = data.groupby('Side').sum().reset_index()\ndata = pd.melt(data, id_vars=['Side'], value_vars=['Kills','Death','Assistes'])\ndata.columns = ['Side','KDA','Total']\n\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\nfig.add_trace(go.Pie(labels=data[data['Side'] == 'Red']['KDA'], values=data[data['Side'] == 'Red']['Total'], name=\"Red Side\"),\n              1, 1)\nfig.add_trace(go.Pie(labels=data[data['Side'] == 'Blue']['KDA'], values=data[data['Side'] == 'Blue']['Total'], name=\"Blue Side\"),\n              1, 2)\n\nfig.update_traces(hole=.4, hoverinfo=\"label+percent+name+value\")\n\nfig.update_layout(\n    title_text=\"KDA Proportion per Side\",\n    annotations=[dict(text='Red', x=0.18, y=0.5, font_size=20, showarrow=False),\n                 dict(text='Blue', x=0.82, y=0.5, font_size=20, showarrow=False)])\nfig.show()","eb047b83":"fig = go.Figure()\n\nfig.add_trace(go.Violin(x=data['KDA'][ data['Side'] == 'Blue' ],\n                        y=data['Total'][ data['Side'] == 'Blue' ],\n                        legendgroup='Blue', scalegroup='Blue', name='Blue',\n                        line_color='rgb(122, 148, 231)')\n             )\nfig.add_trace(go.Violin(x=data['KDA'][ data['Side'] == 'Red' ],\n                        y=data['Total'][ data['Side'] == 'Red' ],\n                        legendgroup='Red', scalegroup='Red', name='Red',\n                        line_color='rgb(255, 105, 97)')\n             )\n\nfig.update_traces(box_visible=True, meanline_visible=True)\nfig.update_layout(violinmode='group', title = 'KDA Distribution per Side')\nfig.show()","d89af6db":"col = ['blueEliteMonsters','blueDragons','blueHeralds','redEliteMonsters','redDragons','redHeralds']\ntmp1 = df[col[0:3]].copy()\ntmp1.columns = ['EliteMonsters','Dragons','Heralds']\ntmp1['Side'] = 'Blue'\ntmp2 = df[col[3:6]].copy()\ntmp2.columns = ['EliteMonsters','Dragons','Heralds']\ntmp2['Side'] = 'Red'\n\ndata = pd.concat([tmp1, tmp2], ignore_index = True)\ndata = data.groupby('Side').mean().reset_index()\ndata=pd.melt(data, id_vars=['Side'], value_vars=['EliteMonsters','Dragons','Heralds'])\ndata.columns = ['Side','NeutralGoals','Mean']\n\nfig = px.bar(data, x=\"Side\", y=\"Mean\", color=\"Side\", color_discrete_map=color_discrete_map,\n             facet_col=\"NeutralGoals\", title = 'Mean Neutral Goals per Side'\n            )\nfig.show()","389446cd":"col = ['blueTowersDestroyed', 'redTowersDestroyed']\ntmp1 = df[col[0:1]].copy()\ntmp1.columns = ['TowersDestroyed']\ntmp1['Side'] = 'Blue'\ntmp2 = df[col[1:2]].copy()\ntmp2.columns = ['TowersDestroyed']\ntmp2['Side'] = 'Red'\n\ndata = pd.concat([tmp1, tmp2], ignore_index = True)\ndata = data.groupby('Side').mean().reset_index()\ndata\n\nfig = px.bar(data, x=\"Side\", y=\"TowersDestroyed\", color=\"Side\", color_discrete_map=color_discrete_map,title = 'Mean Turrets Destroyed per Side'\n            )\nfig.show()","1ee27f2c":"col = ['blueTotalGold', 'redTotalGold']\ntmp1 = df[col[0:1]].copy()\ntmp1.columns = ['TotalGold']\ntmp1['Side'] = 'Blue'\ntmp2 = df[col[1:2]].copy()\ntmp2.columns = ['TotalGold']\ntmp2['Side'] = 'Red'\n\ndata = pd.concat([tmp1, tmp2], ignore_index = True)\ndata = data.groupby('Side').mean().reset_index()\n\n\nfig = px.bar(data, x=\"Side\", y=\"TotalGold\", color=\"Side\", color_discrete_map=color_discrete_map,title = 'Mean Gold per Side'\n            )\nfig.show()\n\ndata = pd.concat([tmp1, tmp2], ignore_index = True)\ndata\n\nfig1 = px.violin(data, y=\"TotalGold\", color = 'Side',  box=True, points='all', color_discrete_map=color_discrete_map, title = 'Total Gold per Side Distribution')\nfig1.show()","e9150918":"col = ['blueAvgLevel', 'redAvgLevel']\ntmp1 = df[col[0:1]].copy()\ntmp1.columns = ['AvgLevel']\ntmp1['Side'] = 'Blue'\ntmp2 = df[col[1:2]].copy()\ntmp2.columns = ['AvgLevel']\ntmp2['Side'] = 'Red'\n\ndata = pd.concat([tmp1, tmp2], ignore_index = True)\ndata = data.groupby('Side').mean().reset_index()\n\n\nfig = px.bar(data, x=\"Side\", y=\"AvgLevel\", color=\"Side\", color_discrete_map=color_discrete_map,title = 'Mean Level per Side'\n            )\nfig.show()\n\n\ndata = pd.concat([tmp1, tmp2], ignore_index = True).sample(2000)\ndata\n\nfig1 = px.violin(data, y=\"AvgLevel\", color = 'Side',  box=True, points='all', color_discrete_map=color_discrete_map, title = 'Level per Side Distribution')\nfig1.show()","41de1274":"col = ['blueTotalExperience', 'redTotalExperience']\ntmp1 = df[col[0:1]].copy()\ntmp1.columns = ['TotalExperience']\ntmp1['Side'] = 'Blue'\ntmp2 = df[col[1:2]].copy()\ntmp2.columns = ['TotalExperience']\ntmp2['Side'] = 'Red'\n\ndata = pd.concat([tmp1, tmp2], ignore_index = True)\ndata = data.groupby('Side').mean().reset_index()\n\n\nfig = px.bar(data, x=\"Side\", y=\"TotalExperience\", color=\"Side\", color_discrete_map=color_discrete_map,title = 'Mean Experience per Side'\n            )\nfig.show()\n\n\ndata = pd.concat([tmp1, tmp2], ignore_index = True).sample(2000)\ndata\n\nfig1 = px.violin(data, y=\"TotalExperience\", color = 'Side',  box=True, points='all', color_discrete_map=color_discrete_map, title = 'Total Experience per Side Distribution')\nfig1.show()","0b846270":"# blueTotalMinionsKilled\n\ncol = ['blueTotalMinionsKilled', 'redTotalMinionsKilled']\ntmp1 = df[col[0:1]].copy()\ntmp1.columns = ['TotalMinionsKilled']\ntmp1['Side'] = 'Blue'\ntmp2 = df[col[1:2]].copy()\ntmp2.columns = ['TotalMinionsKilled']\ntmp2['Side'] = 'Red'\n\ndata = pd.concat([tmp1, tmp2], ignore_index = True)\ndata = data.groupby('Side').mean().reset_index()\n\n\nfig = px.bar(data, x=\"Side\", y=\"TotalMinionsKilled\", color=\"Side\", color_discrete_map=color_discrete_map,title = 'Mean Minions Killede per Side'\n            )\nfig.show()\n\n\ndata = pd.concat([tmp1, tmp2], ignore_index = True).sample(2000)\ndata\n\nfig1 = px.violin(data, y=\"TotalMinionsKilled\", color = 'Side',  box=True, points='all', color_discrete_map=color_discrete_map, title = 'Total Minions Killed per Side Distribution')\nfig1.show()","47f77222":"# blueTotalJungleMinionsKilled\n\ncol = ['blueTotalJungleMinionsKilled', 'redTotalJungleMinionsKilled']\ntmp1 = df[col[0:1]].copy()\ntmp1.columns = ['TotalJungleMinionsKilled']\ntmp1['Side'] = 'Blue'\ntmp2 = df[col[1:2]].copy()\ntmp2.columns = ['TotalJungleMinionsKilled']\ntmp2['Side'] = 'Red'\n\ndata = pd.concat([tmp1, tmp2], ignore_index = True)\ndata = data.groupby('Side').mean().reset_index()\n\n\nfig = px.bar(data, x=\"Side\", y=\"TotalJungleMinionsKilled\", color=\"Side\", color_discrete_map=color_discrete_map,title = 'Mean Jungle Minions Killed per Side'\n            )\nfig.show()\n\n\ndata = pd.concat([tmp1, tmp2], ignore_index = True).sample(2000)\ndata\n\nfig1 = px.violin(data, y=\"TotalJungleMinionsKilled\", color = 'Side',  box=True, points='all', color_discrete_map=color_discrete_map, title = 'Total Jungle Minions Killed per Side Distribution')\nfig1.show()","d68dd2b9":"# blueGoldDiff\n\ncol = ['blueGoldDiff', 'redGoldDiff']\ntmp1 = df[col[0:1]].copy()\ntmp1.columns = ['GoldDiff']\ntmp1['Side'] = 'Blue'\ntmp2 = df[col[1:2]].copy()\ntmp2.columns = ['GoldDiff']\ntmp2['Side'] = 'Red'\n\ndata = pd.concat([tmp1, tmp2], ignore_index = True)\ndata = data.groupby('Side').mean().reset_index()\n\nfig = px.bar(data, x=\"Side\", y=\"GoldDiff\", color=\"Side\", color_discrete_map=color_discrete_map, title = 'Mean Gold Diff per Side'\n            )\nfig.show()\n\n\ndata = pd.concat([tmp1, tmp2], ignore_index = True).sample(2000)\ndata\n\nfig1 = px.violin(data, y=\"GoldDiff\", color = 'Side',  box=True, points='all', color_discrete_map=color_discrete_map, title = 'Gold Diff per Side Distribution')\nfig1.show()","4414099f":"col = ['blueGoldDiffSituation', 'redGoldDiffSituation']\ntmp1 = df[col[0:1]].copy()\ntmp1.columns = ['GoldDiffSituation']\ntmp1['Side'] = 'Blue'\ntmp2 = df[col[1:2]].copy()\ntmp2.columns = ['GoldDiffSituation']\ntmp2['Side'] = 'Red'\n\ndata = pd.concat([tmp1, tmp2], ignore_index = True)\ndata = data.groupby('Side').mean().reset_index()\n\nfig = px.bar(data, x=\"Side\", y=\"GoldDiffSituation\", color=\"Side\", color_discrete_map=color_discrete_map, title = 'Gold Difference Situation per Side'\n            )\nfig.show()\n","4c0d6760":"# blueExperienceDiff\n\ncol = ['blueExperienceDiff', 'redExperienceDiff']\ntmp1 = df[col[0:1]].copy()\ntmp1.columns = ['ExperienceDiff']\ntmp1['Side'] = 'Blue'\ntmp2 = df[col[1:2]].copy()\ntmp2.columns = ['ExperienceDiff']\ntmp2['Side'] = 'Red'\n\ndata = pd.concat([tmp1, tmp2], ignore_index = True)\ndata = data.groupby('Side').mean().reset_index()\n\nfig = px.bar(data, x=\"Side\", y=\"ExperienceDiff\", color=\"Side\", color_discrete_map=color_discrete_map, title = 'Mean Experience Difference per Side'\n            )\nfig.show()\n\n\ndata = pd.concat([tmp1, tmp2], ignore_index = True).sample(2000)\ndata\n\nfig1 = px.violin(data, y=\"ExperienceDiff\", color = 'Side',  box=True, points='all', color_discrete_map=color_discrete_map, title = 'Experience Difference per Side Distribution')\nfig1.show()","2648fa61":"col = ['blueExperienceDiffSituation', 'redExperienceDiffSituation']\ntmp1 = df[col[0:1]].copy()\ntmp1.columns = ['ExperienceDiffSituation']\ntmp1['Side'] = 'Blue'\ntmp2 = df[col[1:2]].copy()\ntmp2.columns = ['ExperienceDiffSituation']\ntmp2['Side'] = 'Red'\n\ndata = pd.concat([tmp1, tmp2], ignore_index = True)\ndata = data.groupby('Side').mean().reset_index()\n\nfig = px.bar(data, x=\"Side\", y=\"ExperienceDiffSituation\", color=\"Side\", color_discrete_map=color_discrete_map, title = 'Mean Experience Difference Situation per Side'\n            )\nfig.show()\n","91b8e382":"# blueCSPerMin\t\n\ncol = ['blueCSPerMin', 'redCSPerMin']\ntmp1 = df[col[0:1]].copy()\ntmp1.columns = ['CSPerMin']\ntmp1['Side'] = 'Blue'\ntmp2 = df[col[1:2]].copy()\ntmp2.columns = ['CSPerMin']\ntmp2['Side'] = 'Red'\n\ndata = pd.concat([tmp1, tmp2], ignore_index = True)\ndata = data.groupby('Side').mean().reset_index()\n\nfig = px.bar(data, x=\"Side\", y=\"CSPerMin\", color=\"Side\", color_discrete_map=color_discrete_map, title = 'Mean CS Per Min per Side'\n            )\nfig.show()\n\n\ndata = pd.concat([tmp1, tmp2], ignore_index = True).sample(2000)\ndata\n\nfig1 = px.violin(data, y=\"CSPerMin\", color = 'Side',  box=True, points='all', color_discrete_map=color_discrete_map, title = 'CS Per Min per Side Distribution')\nfig1.show()","d2119720":"# blueGoldPerMin\n\ncol = ['blueGoldPerMin', 'redGoldPerMin']\ntmp1 = df[col[0:1]].copy()\ntmp1.columns = ['GoldPerMin']\ntmp1['Side'] = 'Blue'\ntmp2 = df[col[1:2]].copy()\ntmp2.columns = ['GoldPerMin']\ntmp2['Side'] = 'Red'\n\ndata = pd.concat([tmp1, tmp2], ignore_index = True)\ndata = data.groupby('Side').mean().reset_index()\n\nfig = px.bar(data, x=\"Side\", y=\"GoldPerMin\", color=\"Side\", color_discrete_map=color_discrete_map, title = 'Mean Gold Per Min per Side'\n            )\nfig.show()\n\n\ndata = pd.concat([tmp1, tmp2], ignore_index = True).sample(2000)\ndata\n\nfig1 = px.violin(data, y=\"GoldPerMin\", color = 'Side',  box=True, points='all', color_discrete_map=color_discrete_map, title = 'Gold Per Min per Side Distribution')\nfig1.show()","177a3b48":"corr = df[[col for col in df.columns if 'blue' in col and col != 'blueWins']].corr()\nf,ax = plt.subplots(figsize=(20, 20))\np = sns.heatmap(corr,\n                cmap='coolwarm',\n                annot=True,\n                fmt=\".1f\",\n                annot_kws={'size':10},\n                cbar=False,\n                ax=ax)\np.set_title('Blue Side Features Correlation')","335ee476":"corr = df[[col for col in df.columns if 'red' in col and col != 'blueWins']].corr()\nf,ax = plt.subplots(figsize=(20, 20))\np = sns.heatmap(corr,\n                cmap='coolwarm',\n                annot=True,\n                fmt=\".1f\",\n                annot_kws={'size':10},\n                cbar=False,\n                ax=ax)","7ab16fc5":"df['blueWins'] = df['blueWins'].map({'Blue Side': 1, 'Red Side': 0})","633d46da":"blue_win = df[[col for col in df.columns if col != 'blueWins']].corrwith(df['blueWins']).to_frame().sort_values(by = 0, ascending = False)\nblue_win = pd.concat([blue_win.head(5), blue_win.tail(5)])\nblue_win.columns = ['Blue Win Correlation']\nblue_win\n\nred_win = df[[col for col in df.columns if col != 'blueWins']].corrwith(df['blueWins'].map({0:1, 1:0})).to_frame().sort_values(by = 0, ascending = False)\nred_win = pd.concat([red_win.head(5), red_win.tail(5)])\nred_win.columns = ['Red Win Correlation']\nred_win\n\nfig = plt.figure(figsize=(25,10))\nax1 = fig.add_subplot(121)\nax2 = fig.add_subplot(122)\n\nplt.figure(figsize=(6,6))\n\nsns.heatmap(blue_win,\n            vmin=-1,\n            cmap='coolwarm',\n            annot=True,\n           ax = ax1);\n\nsns.heatmap(red_win,\n            vmin=-1,\n            cmap='coolwarm',\n            annot=True,\n           ax = ax2);","c75bb68c":"X = df.drop(['blueWins', 'gameId'], axis=1)\ny = df.blueWins","1de90abb":"# X = MinMaxScaler().fit_transform(df.drop(['blueWins', 'gameId'], axis=1))\n\ndef bayes_parameter_opt_lgb(X = X, y = y, init_round=15, opt_round=25, n_folds=5, random_seed=6, n_estimators=10000, learning_rate=0.05, output_process=False):\n    # prepare data\n    train_data = lgb.Dataset(data=X, label=y, free_raw_data=False)\n    # parameters\n    def lgb_eval(num_leaves, feature_fraction, bagging_fraction, max_depth, lambda_l1, lambda_l2, min_split_gain, min_child_weight):\n        params = {'application':'binary','num_iterations': n_estimators, 'learning_rate':learning_rate, 'early_stopping_round':100, 'metric':'auc'}\n        params[\"num_leaves\"] = int(round(num_leaves))\n        params['feature_fraction'] = max(min(feature_fraction, 1), 0)\n        params['bagging_fraction'] = max(min(bagging_fraction, 1), 0)\n        params['max_depth'] = int(round(max_depth))\n        params['lambda_l1'] = max(lambda_l1, 0)\n        params['lambda_l2'] = max(lambda_l2, 0)\n        params['min_split_gain'] = min_split_gain\n        params['min_child_weight'] = min_child_weight\n        cv_result = lgb.cv(params, train_data, nfold=n_folds, seed=random_seed, stratified=True, verbose_eval =200, metrics=['auc'])\n        return max(cv_result['auc-mean'])\n    # range \n    lgbBO = BayesianOptimization(lgb_eval, {'num_leaves': (24, 45),\n                                            'feature_fraction': (0.1, 0.9),\n                                            'bagging_fraction': (0.8, 1),\n                                            'max_depth': (5, 8.99),\n                                            'lambda_l1': (0, 5),\n                                            'lambda_l2': (0, 3),\n                                            'min_split_gain': (0.001, 0.1),\n                                            'min_child_weight': (5, 50)}, random_state=0)\n    # optimize\n    lgbBO.maximize(init_points=init_round, n_iter=opt_round)\n    \n    # output optimization process\n    if output_process==True: lgbBO.points_to_csv(\"bayes_opt_result.csv\")\n    \n    # return best parameters\n    return lgbBO\n\nopt_params = bayes_parameter_opt_lgb(X, y, init_round=5, opt_round=10, n_folds=3, random_seed=6, n_estimators=100, learning_rate=0.05)","bd437747":"params = opt_params.max['params']\nparams[\"num_leaves\"] = int(round(params['num_leaves']))\nparams['feature_fraction'] = max(min(params['feature_fraction'], 1), 0)\nparams['bagging_fraction'] = max(min(params['bagging_fraction'], 1), 0)\nparams['max_depth'] = int(round(params['max_depth']))\nparams['lambda_l1'] = max(params['lambda_l1'], 0)\nparams['lambda_l2'] = max(params['lambda_l2'], 0)\nparams['min_split_gain'] = max(params['min_split_gain'], 0)\nparams['min_child_weight'] = max(params['min_child_weight'], 0)\nparams['num_iterations'] = int(round(10000))\nparams['learning_rate'] = max(0.05, 0)\nparams['application'] = 'binary'\nparams['metric'] = 'auc'\nparams['objective'] = 'binary'","33b04b4c":"train_data = lgb.Dataset(data=X, label=y, free_raw_data=True, feature_name = [col for col in df.columns if col!= 'gameId' and col!= 'blueWins'])\nmodel = lgb.train(params, train_data)","bb3bc510":"ax = lgb.plot_importance(model, max_num_features=10, figsize = (15,15))\nplt.show()","4209f91c":"pred = np.round(model.predict(X)).astype(int)\ndata_test = TSNE(n_components=3).fit_transform(X)","0fa3132a":"predicted = pd.DataFrame(data_test)\npredicted['output'] = pred\npredicted['output'] = predicted['output'].astype(object)\npredicted['output'] = predicted['output'].map({0: \"Red Wins\",1: \"Blue Wins\"})\npredicted['flag'] = 'predicted'\npredicted.columns = ['dim_1','dim_2','dim_3','output', 'flag']\n\nreal = pd.DataFrame(data_test)\nreal['output'] = y.values\nreal['output'] = real['output'].astype(object)\nreal['output'] = real['output'].map({0: \"Red Wins\",1: \"Blue Wins\"})\nreal['flag'] = 'real'\nreal.columns = ['dim_1','dim_2','dim_3','output', 'flag']\n\ndata_3d = pd.concat([predicted,real], ignore_index = True).sample(4000)","569fc6e2":"color_discrete_map = {\"Blue Wins\": 'rgb(122, 148, 231)', \"Red Wins\": 'rgb(255, 105, 97)'}\n\nfig1 = px.scatter_3d(predicted, x='dim_1', y='dim_2', z='dim_3', color_discrete_map=color_discrete_map,color='output', title = 'How Model Distinct Wins and Loses')\nfig2 = px.scatter_3d(real, x='dim_1', y='dim_2', z='dim_3',color_discrete_map=color_discrete_map,color='output', title = 'Real Distinction Between Wins and Loses')\n\nfig1.show()\nfig2.show()","3a252447":"To sum up more a team exceeds by far in experience and in gold it is more likely to win.","98f23ab9":"On average 2 wards are destroyed per side and this varies between 0 and 6.\n\nWith the zoom we can see that the blue side destroys slightly more wards than the blue side but it is incinifying.","7b25261a":"Very interesting, it seems total opposite of gold difference. blue side have more gold and red side have more experience.","533077aa":"# 2. First Look at the Data <a id=\"2\"><\/a>","0a0e5fe3":"# 8. Conclusion <a id=\"8\"><\/a>","26164000":"## 4.4 Kill, Deaths and Assists (KDA) <a id=\"4.4\"><\/a>","a0afc215":"## 5.3 Wins and Loses Correlation <a id=\"5.3\"><\/a>","8ae145be":"The red side is slightly lower in kill but it is slightly higher in death and assists and vice versa for the blue side.\n\nBut generally it remains equivalent for each side.\n\nHowever the percentage of kill red side is equal to the percentage of death blue side which is normal because 1 blue kill = 1 red death and 1 red death = 1 blue death, that means the blue side has more kills. but the assistants remain equivalent.\n\nFinally an important variance for both sides.","654b40b3":"Very small advantage for red side in minions kills.","d29d3cb7":"## 4.5 Neutral Goals <a id=\"4.5\"><\/a>","2f690fbd":"## 4.2 Wards <a id=\"4.2\"><\/a>","96186ccc":"Lets see what cause win and lose in both of sides.","ef537134":"With the exception of some difference in variance, the leveling is practically the same for both sides.\n\nHowever for the experience gained the blue side is slightly advantaged.","aaf4fe2e":"Neutral objectives are non-playable characters who do not belong to either side and who are hostile to both sides and who offer rewards when killed.\n\nthere are 4 categories of monsters which are part of neutral monsters:\n\n<img src=\"https:\/\/i.postimg.cc\/PJrRCwgt\/article-header-monstericon-en.jpg\" align=\"right\" width=\"500\" height=\"300\">\n\n1. **Elite Monsters :**\n\n    *     **Gromp** begins fights with 100% bonus attack speed and full attack damage, decaying over 5 attacks to 0% bonus attack speed and 71.43% attack damage. Gromp's basic attacks deal magic damage.\n    * The **Raptor** camp consists of one large Crimson  Crimson Raptor and five lesser Raptors. Killing this camp awards Gold Gold and Experience.\n    * The **Murk Wolf** camp consists of one large Greater Murk Greater Murk Wolf and two lesser Murk Murk Wolves. Killing this camp awards Gold Gold and Experience.\n    * The **Blue Sentinel** is a neutral monster on Summoner's Rift. It has negative magic resistance. Kill the Blue Sentinel to receive the Crest of Insight buff Crest of Insight, a buff which grants increased mana regeneration (or energy regeneration) as well as cooldown reduction.\n    * The **Red Brambleback** is a neutral monster on Summoner's Rift. It has negative armor. Kill the Red Brambleback to receive the Crest of Cinders buff Crest of Cinders, a buff which grants health regeneration and causes your basic attacks to Slow the enemy while also dealing true damage over time.\n    * The **Krug** camp consists of one large Ancient Ancient Krug and one medium  Krug. Killing the Ancient Ancient Krug will spawn two medium Krugs, and killing medium  Krugs will spawn two lesser Krugs, for a total of 10 units. Killing this camp awards Gold Gold and Experience. All additional units spawned will spawn with one lower level (capped at level 1) and will despawn after being out of combat for some time.\n    \n\n<BR CLEAR=\u201dleft\u201d \/>\n\n\n<img src=\"https:\/\/i.postimg.cc\/XJGvTsN5\/unnamed.jpg\" align=\"right\" width=\"500\" height=\"300\">\n\n2. **Dragons :**\n\n    * The buff provided by **Cloud Drake** is useful for both teams regardless of their gold lead or deficit; leading teams can create pressure, split push, and rotate around the map faster for positioning, while trailing teams can still use it to expand vision, respond to split pushing, and position defensively. Even with a single stack, Cloud Drake can be very powerful in split push compositions, especially if it's denied to the enemy team.\n    * The buff provided by **Infernal Drake** is considered by many players the strongest, due to its raw power boost. If viable, contest the dragon at all costs. In the early game it doesn't make much difference, but its power in late game is massive.\n    * The buff provided by **Mountain Drake** allows teams more durability for extended fights, and its effectiveness increases the more resistances the team builds - it can be useful to build more armor and magic resistance when you have multiple of this buff.\n    * The buff provided by **Ocean Drake** is deceptively powerful during the laning phase: the healing during downtime allows less assertive laners to extend their presence. Another benefit is its ability to mitigate damage against poke teams, forcing the enemy team to spend more mana and delaying or even preventing potential flanks.\n    * Elder Dragon is a much more powerful caliber of dragon, requiring multiple champions to secure quickly.\n    * Due to its durability and the strength of the reward, attempting to kill an Elder Dragons usually prompts the enemy team to contest the kill. Therefore, teams wishing to slay it must take great caution when doing so while the majority of the enemy team is alive, much like Baron Baron Nashor.\n    \n<BR CLEAR=\u201dleft\u201d \/>\n\n\n<img src=\"https:\/\/i.postimg.cc\/rw1xHFZT\/image.jpg\" align=\"right\" width=\"250\" height=\"150\">\n\n3. **Herald :**\n\n    * The Eye of the Herald is a neutral buff dropped by the Rift Herald when it dies. It is available only on Summoner's Rift. Only members of the team that killed the Rift Herald can pick it up by walking on it. If nobody picks it up, it disappears after 20 seconds.The Eye also replaces the trinket item in your trinket slot. You can break the Eye to summon the Rift Herald to aid your team. Enemies hear the Rift Herald's cry as an audio cue when the Rift Herald is summoned.\n\n<BR CLEAR=\u201dleft\u201d \/>\n\n<br><br><br><br><br><br>\n\n<img src=\"https:\/\/i.postimg.cc\/FsBhQjqg\/17f85de0f06f604ceaee89899d76e4ea.jpg\" align=\"right\" width=\"400\" height=\"300\">\n\n4. **Baron Nashor :**\n\n    * Baron Nashor is the most powerful neutral Monster on Summoners Rift in League of Legends. Killing Baron Nashor grants Hand of Baron buff Hand of Baron to all living teammates for 180 seconds. The buff gives Attack damage  attack damage, Ability power ability power, Empowered Recall Empowered Recall, and an aura that greatly increases the power of nearby Minion.\n\nps : Baron Nashor appears from 20 minutes into the game, so we won't see him here = \/\n\n<BR CLEAR=\u201dleft\u201d \/>\n\n<a href=\"https:\/\/leagueoflegends.fandom.com\/wiki\/League_of_Legends_Wiki\">League of Legends Wiki<\/a>\n\n<br><br><br><br><br><br>\n\n<img src=\"https:\/\/i.postimg.cc\/ZKVxYqFL\/Jungle-camps-SR.jpg\" width=\"600\" height=\"400\">\n","29aac964":"## 4.11 Experience Difference <a id=\"4.11\"><\/a>","ab8fc11b":"<iframe width=\"720\" height=\"480\" src=\"https:\/\/www.youtube.com\/embed\/BGtROJeMPeE\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>","b33c03c4":"The number of gold won for each side is equivalent however there is a little more variance of gold on the blue side.","e81332c9":"Same as gold difference, experience difference situation is which side has the advantage in experience.\n\nIt seems like 50\/50 but if we zoom in we can see that red side have little advantage. oposit to gold.","587304d9":"Minions or Creeps killed by minus for both sides.","21965590":"By calculating the correlation between the features we can already see which are the features which correlate positively, negatively or not at all.\n\nDont forget that we are talking about first 10 minutes of the game only =).","2cf51d69":"<img src=\"https:\/\/i.postimg.cc\/fyqGwySV\/Banni-re-lol-fi19533912x700.jpg\">","9baad51d":"Both sides mostly place 16 wards for the first 10 minutes and it varies between 10 and 25 wards.\n\nHowever, there are some teams that place up to 40 wards for 10 minutes which is awful.\n\nOutlier values remain, it is necessarily players who tilt and who put wards in their bases while waiting for the rapid defeat.\n\nThe distribution of the number of wards placed is equivalent between the two sides.","88d23a3e":"Globaly same as red side.","d9918e38":"The playing conditions are fairly even between the two sides. the blue side benefits from more golds and kills and the red side benefits from more neutral objectives and experience and CS.\n\nWe were able to model this event to 80% accuracy but using only data from the first 10 minutes of play. But with more data it is possible to predict which side will win in real time.\n\nI played a lot league of legends 3 years ago but now i don't have that much time, but i'm watching international competitions and export part. i like this game.\n\nI really enjoyed doing this notebook, for ones i dont do EDA for somthing serious or for work =).\n\nDo not hesitate to drop an upvote, Good Bye.","b3727fef":"## 4.6 Turrets <a id=\"4.6\"><\/a>","44d46850":"## 5.2 Red Side Heatmap <a id=\"5.2\"><\/a>","2a1ba064":"<img src=\"https:\/\/i.postimg.cc\/GpkNNqcg\/Dead-Fabulous-Europeanfiresalamander-size-restricted.gif\" align=\"right\" width=\"300\" height=\"200\">\nTo win in league of legends you have to destroy the opposing nexus and that by gradually destroying the opposing turrets and the opposing inibitors.\n<BR CLEAR=\u201dleft\u201d \/>\n","a72a3c66":"\n<img src=\"https:\/\/i.postimg.cc\/Z0tn4psq\/Summoner-s-Rift-Outer-turret.png\" align=\"right\" width=\"200\" height=\"400\">\nTurrets, also called towers, are heavy fortifications that attack enemy units on sight. Turrets are a core component of League of Legends. They deal damage to enemies and provide vision to their team, allowing them to better control the battlefield. Turrets target one unit at a time and deal heavy damage. Teams must destroy enemy turrets to push their assault into enemy territory.\n\n<BR CLEAR=\u201dleft\u201d \/>\n\n<a href=\"https:\/\/leagueoflegends.fandom.com\/wiki\/League_of_Legends_Wiki\">League of Legends Wiki<\/a>","c8714abf":"# 6. Modelisation <a id=\"6\"><\/a>","33718ce1":"This dataset contains the first 10min. stats of approx. 10k ranked games (SOLO QUEUE) from a high ELO (DIAMOND I to MASTER). Players have roughly the same level.\n\nEach game is unique. The gameId can help you to fetch more attributes from the Riot API.\n\nThere are 19 features per team (38 in total) collected after 10min in-game. This includes kills, deaths, gold, experience, level\u2026\n\nThe column blueWins is the target value (the value we are trying to predict). A value of 1 means the blue team has won. 0 otherwise.\n\nThere is no missing value.\n\n<a href=\"https:\/\/www.kaggle.com\/bobbyscience\/league-of-legends-diamond-ranked-games-10-min\">Download Here<\/a>","b496ee8f":"## 4.8 Leveling and Experiance <a id=\"4.8\"><\/a>","d6a5b6ca":"Champion experience (XP) is a game mechanic that allows champions to level up after reaching certain amounts of experience. Leveling up allows them access to new abilities or higher ranks of existing abilities. Many base stats and some items and runes scale with champion's level.\n\nExperience isn't gained over time, it has to be earned through different ways.\n\n<a href=\"https:\/\/leagueoflegends.fandom.com\/wiki\/League_of_Legends_Wiki\">League of Legends Wiki<\/a>","491d08d7":"Best accuracy 0.8%, not bad =).","9d21e691":"* 1 kill corresponds to each time a player kills another player in the game.\n\n* 1 death corresponds to each time a player is killed by another in the game.\n\n* 1 assiss corresponds to each time a player helps another to kill another player in the game.","32304694":"## 4.2.2 Wards Destroyed <a id=\"4.2.2\"><\/a>","c4befe95":"This is the difference of global golds between the two sides.","d899e079":"# Contents\n\n* [<font size=4>1. Libraries for Fun<\/font>](#1)\n* [<font size=4>2. First Look at the Data<\/font>](#2)\n* [<font size=4>3. Data Report<\/font>](#3)\n* [<font size=4>4. Comparison of Blue Side and Red Side Features<\/font>](#4)\n *     [4.1 Wins and Loses](#4.1)\n *     [4.2 Wards](#4.2)\n        *     [4.2.1 Wards Placed](#4.2.1)\n        *     [4.2.2 Wards Destroyed](#4.2.1)\n *     [4.3 First Bloods](#4.3)\n *     [4.4 Kill, Deaths and Assists](#4.4)\n *     [4.5 Neutral Goals](#4.5)\n *     [4.6 Turrets](#4.6)\n *     [4.7 Golds](#4.7)\n *     [4.8 Leveling and Experiance](#4.8)\n *     [4.9 Minions Farme](#4.9)\n *     [4.10 Gold Difference](#4.10)\n *     [4.11 Experience Difference](#4.11)\n *     [4.12 Creep Score (CS)](#4.12)\n *     [4.13 Gold Per Minute](#4.13)\n* [<font size=4>5. Winning Condition<\/font>](#5)\n *     [5.1 Blue Side Heatmap](#5.1)\n *     [5.2 Red Side Heatmap](#5.2)\n *     [5.3 Wins and Loses Correlation](#5.3)\n* [<font size=4>6. Modelisation<\/font>](#6)\n* [<font size=4>7. Prediction and Reality<\/font>](#7)\n* [<font size=4>8. Conclusion<\/font>](#8)","2334d2d5":"<img src=\"https:\/\/i.postimg.cc\/1R2d17XR\/logo-800-47024e2aeaaa8651c172ba883264dd43.png\" alt=\"Italian Trulli\">\n","64a647fc":"<img src=\"https:\/\/i.postimg.cc\/Z5zHDQcG\/4e0c55dcd8468bb3076e149cd084ed99.jpg\" align=\"right\" width=\"300\" height=\"200\">\n\nGold is the in-game currency of League of Legends. It is used to buy items in the shop that provide champions with bonus stats and abilities, which in turn is one of the main ways for champions to increase their power over the course of a game.\n\nAt the beginning of the game, champions are given starting gold based on the map being played on, and can receive more gold through various means.\n\n<BR CLEAR=\u201dleft\u201d \/>\n\n<a href=\"https:\/\/leagueoflegends.fandom.com\/wiki\/League_of_Legends_Wiki\">League of Legends Wiki<\/a>\n\n","c2d29dc6":"A very light advantage for the blue side (95 more), but the number of first blood is relatively equivalent between two sides.","ffe8757c":"I will use Bayesian Optimisation to have best hyperparametters and increase accuracy.","d233e12b":"* Positive correlation between total gold and gold per minute, gold diff, total experience, assists and kills. and correlate negatively with Deaths.\n* Positive correlation between elite monsters and dragons.\n* Positive correlation between golds per minute and kills.\n* negative correlation between deaths and gold diff, experience diff.","3a1f480c":"Balanced wins and loses on the blue and red side, which is good news, there is no imbalance that occurs on one side more than the other.","7daa3774":"## 4.10 Gold Difference <a id=\"4.10\"><\/a>","de1c86e5":"15 gold difference on average between the two sides ahead of the blue. this is very small compared to 16k gold won by both sides.\n\nBut this is not negligible because it can have a snowball effect on the rest of the game. we will see that a little further.\n\nThe destribution seems to be the same.","bf98be25":"## 4.1 Wins and Loses <a id=\"4.1\"><\/a>","2f1e5749":"It is the first champion kill of the game.","62da902d":"After seeing which side did their goals the best, let's now take a look at how goals will influence wins or losses.","d9755661":"## 4.2.1 Wards Placed <a id=\"4.2.1\"><\/a>","2c453872":"The blue side destroys many more turrets than the red side, almost 100 more.\n\nThis may be due to the red side's focus on neutral objectives.","bac0d270":"# 1. Libraries for Fun <a id=\"1\"><\/a>","5043d427":"## 4.12 Creep Score (CS) <a id=\"4.12\"><\/a>","4c0fe3d8":"Let's compare how model can distinct between win and loses comparing to the real distinction.\nI will do that by redimensioning data into 3D using T SNE and plot it in 3D scatter and coloring wins with blue and loses with red, and see if locations of points is getting closer or not.","1058e9f8":"**WHAT IS LEAGUE OF LEGENDS?**\n\nLeague of Legends is a team-based strategy game where two teams of five powerful champions face off to destroy the other\u2019s base. Choose from over 140 champions to make epic plays, secure kills, and take down towers as you battle your way to victory.\n\n**DESTROY THE BASE**\n\nThe Nexus is the heart of both teams\u2019 bases. Destroy the enemy\u2019s Nexus first to win the game.\n\n**CLEAR THE PATH**\n\nYour team needs to clear at least one lane to get to the enemy Nexus. Blocking your path are defense structures called turrets and inhibitors. Each lane has three turrets and one inhibitor, and each Nexus is guarded by two turrets.\n\n**TAKE ON THE JUNGLE**\n\nIn between the lanes is the jungle, where neutral monsters and jungle plants reside. The two most important monsters are Baron Nashor and the Drakes. Killing these units grants unique buffs for your team and can also turn the tide of the game.\n\n**CHOOSE THE LANE**\n\nThere are five positions that make up the recommended team comp for the game. Each lane lends itself to certain kinds of champions and roles\u2014try them all or lock in to the lane that calls you.\n\n**POWER THE CHAMP**\n\nChampions get stronger by earning experience to level up and gold to buy more powerful items as the game progresses. Staying on top of these two factors is crucial to overpowering the enemy team and destroying their base.\n\n**UNLOCK ABILITIES**\n\nChampions have five core abilities, two special spells, and up to seven items at a time. Figuring out the optimal ability order, summoner spells, and item build for your champion will help you succeed as a team.\n\n<a href=\"https:\/\/na.leagueoflegends.com\/en-us\/how-to-play\/\">League of Legends Official Website<\/a>\n","2c5ed0f9":"Exactly the same for both sides, however more variance for blue side.","c88b20c8":"<img src=\"https:\/\/i.postimg.cc\/pLm1f5Ps\/Cs6-TGmc-UIAAc7-VQ-0.jpg\" align=\"right\" width=\"400\" height=\"200\">\n\nMinions are units that comprise the main force sent by the Nexus. They spawn periodically from their nexus and advance along a lane towards the enemy nexus, automatically engaging any enemy unit or structure they encounter. They are controlled by artificial intelligence, and only use basic attacks.\n\nThere are four types of minions: Blue Melee, Blue Caster, Blue Siege and Blue Super.\n\n<BR CLEAR=\u201dleft\u201d \/>\n\n<a href=\"https:\/\/leagueoflegends.fandom.com\/wiki\/League_of_Legends_Wiki\">League of Legends Wiki<\/a>\n\n","01802e9b":"<img src=\"https:\/\/i.postimg.cc\/qv9Q8kBn\/Banner-T2-Image-tnp3w61gzna8r2n3rojp.jpg\" alt=\"Bye\">","bfc93e0a":"## 4.13 Gold Per Minute <a id=\"4.13\"><\/a>","6630162f":"# 3. Data Report <a id=\"3\"><\/a>","a630dcf2":"This is the difference of global experience and leveling between the two sides.","21219331":"# 5. Winning Condition <a id=\"5\"><\/a>","44bdea58":"Hmm this is different from what the correlation returned, for lgbm the most important features are total gold, total experience and minions killed.","00862cf9":"Lets train lgbm on this dataset and  see how it can distinct well win and loses.","1882c242":"# 7. Prediction and Reality <a id=\"7\"><\/a>","bd930a07":"## 4.3 First Bloods <a id=\"4.3\"><\/a>","970f36a1":"The red side kills more elite monsters and dragons and the blue side kills more herald.\n\nThe direction of the enclosure of some monsters is not symmetrical in the map which benefits one side more than the other.","86c406e0":"Let's train lgb with those parameters and check most important features for model output.","74844c6a":"## 5.1 Blue Side Heatmap <a id=\"5.1\"><\/a>","f090d342":"It is generally fair between the two sides, however the red side has a small adventure in farming minions","77848256":"Gold difference situation is which side has the advantage in gold.\n\nIt seems like 50\/50 but if we zoom in we can see that blue side have little advantage.","440d05ae":"## 4.9 Minions Farme <a id=\"4.9\"><\/a>","3731e66d":"Total gold collected per minute.","bcf50481":"Not that bad, in reality the points are slightly intertwined but we can see that is more blue in one side on red in other side.\n\nThe model separates these points well with a fairly significant bias. which is very good. 80% precision is not bad =)","d20b461c":"In this notebook i will compare all blue side and red side features and see if there is some insight can define win or lose for both sides.\n\nI will define and treat each objctive separatly for both sides and end it by train model to predict win or lose from first 10 minutes data and judge the greatness of model accuracy.\n\nLETS GO !","c5b52b1e":"<img src=\"https:\/\/i.postimg.cc\/nL28r06j\/Warding-Totem-screenshot.png\" align=\"right\" width=\"300\" height=\"200\">\nA ward is a deployable unit that removes the fog of war in a certain area of the map. Vision is not just buying and placing wards. It is not always a unit and it can be granted through champions as well as items that they purchase.\n<BR CLEAR=\u201dleft\u201d \/>\n\n<a href=\"https:\/\/mobalytics.gg\/blog\/warding-guide\/#:~:text=A%20ward%20is%20a%20deployable,two%20different%20types%20of%20trinkets.\">Vision in League of Legends<\/a>","e974a0ed":"# 4. Comparison of Blue Side and Red Side Features <a id=\"4\"><\/a>","759ad393":"## 4.7 Golds <a id=\"4.7\"><\/a>"}}