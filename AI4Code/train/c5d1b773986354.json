{"cell_type":{"8c6950e2":"code","8e800a16":"code","34fc5341":"code","2b936ccd":"code","a948e1db":"code","3c503a5a":"code","82d0eded":"code","2ab6f99e":"code","50740c0c":"code","ce9c3410":"code","0b30cc8b":"code","615aba64":"code","195b3440":"markdown","d4cc86aa":"markdown","b5fbcaa8":"markdown","30ca0641":"markdown","0e0c1131":"markdown","bcb8d6bd":"markdown"},"source":{"8c6950e2":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier, plot_importance\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn.model_selection import GridSearchCV\n# from sklearn.inspection import plot_partial_dependence\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","8e800a16":"df = pd.read_csv('..\/input\/customer-analytics\/Train.csv')\n# df.head()","34fc5341":"df.info()","2b936ccd":"df.drop(df.columns[[0]], axis=1, inplace=True)\n\ncat_features = df.select_dtypes(include='object') \ncat_features = pd.concat([cat_features, df[['Customer_rating', 'Reached.on.Time_Y.N']]], axis = 1)\ncat_vals = {}\nprint('Unique values for categorical features:\\n')\nfor column in cat_features:\n    cat_vals[column]=cat_features[column].unique()\n    print(len(cat_vals[column]), 'unique values of ', column, ':' , cat_vals[column])","a948e1db":"fig, axes = plt.subplots(2, 3, figsize=(15,10))\nsns.histplot(ax=axes[0, 0], data=df, x='Customer_care_calls', hue='Reached.on.Time_Y.N', multiple=\"stack\")\nsns.histplot(ax=axes[0, 1], data=df, x='Customer_rating', hue='Reached.on.Time_Y.N', multiple=\"stack\")\nsns.histplot(ax=axes[0, 2], data=df, x='Cost_of_the_Product', hue='Reached.on.Time_Y.N', multiple=\"stack\")\nsns.histplot(ax=axes[1, 0], data=df, x='Prior_purchases', hue='Reached.on.Time_Y.N', multiple=\"stack\")\nsns.histplot(ax=axes[1, 1], data=df, x='Discount_offered', hue='Reached.on.Time_Y.N', multiple=\"stack\")\nsns.histplot(ax=axes[1, 2], data=df, x='Weight_in_gms', hue='Reached.on.Time_Y.N', multiple=\"stack\")","3c503a5a":"sns.set()\n# cols = ['Reached.on.Time_Y.N', 'Customer_care_calls', 'Customer_rating', 'Cost_of_the_Product', 'Prior_purchases', 'Discount_offered', 'Weight_in_gms']\nsns.pairplot(df, hue='Reached.on.Time_Y.N',height=2)\nplt.show();","82d0eded":"# encode the categorical features\nWarehouse_block_enc = df[['Warehouse_block']].replace({'A':0, 'B':1, 'C':2, 'D':3, 'F':4})\n# print(Warehouse_block_enc)\nMode_of_Shipment_enc = df[['Mode_of_Shipment']].replace({'Flight':0, 'Ship':1, 'Road':2})\nProduct_importance_enc = df[['Product_importance']].replace({'low':0, 'medium':1, 'high':2})\nGender_enc = df[['Gender']].replace({'F':0, 'M':1})\n\ndf = pd.concat([df.select_dtypes(exclude='object'), Warehouse_block_enc, Mode_of_Shipment_enc, Product_importance_enc], axis=1)\n# df.head()\ndf.describe().T","2ab6f99e":"# If there are too many subplots, use necessary scrollbar to make sure the plots are large enough\n# from IPython.display import display, HTML\n# CSS = \"\"\"div.output_area img {max-width:None !important;max-height: None !important\";}\"\"\"\n# display(HTML('<style>{}<\/style>'.format(CSS)))\n\n# sns.set()\n# sns.pairplot(df, height=2)\n# plt.show();","50740c0c":"corrmatrix = df.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nax = sns.heatmap(corrmatrix, vmax=.8, square=True, annot=True, cmap=\"YlGnBu\")","ce9c3410":"X = df.drop(['Reached.on.Time_Y.N'], axis=1)\ny = df['Reached.on.Time_Y.N']\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=4)\n\nparam_grid = {'max_depth':range(3,10),'criterion':['gini','entropy']}\nrf = RandomForestClassifier(random_state=4)\nmodel_rf = GridSearchCV(rf, param_grid=param_grid)\nmodel_rf.fit(X_train, y_train)\npred_test = model_rf.predict(X_test)\nprint('Classification Report of RandomForestClassifier: \\n', classification_report(y_test, pred_test))\nscores = cross_val_score(model_rf, X, y, scoring='roc_auc')\nprint ('cross validation score of RandomForestClassifier: %.8f'%scores.mean())","0b30cc8b":"model_xgb = XGBClassifier()\nmodel_xgb.fit(X_train, y_train)\npred_test = model_rf.predict(X_test)\nprint('Classification Report of XGBClassifier: \\n', classification_report(y_test, pred_test))\nscores = cross_val_score(model_xgb, X, y, scoring='roc_auc')\nprint ('cross validation score of XGBClassifier: %.8f'%scores.mean())","615aba64":"plot_importance(model_xgb)","195b3440":"There seem to be some interesting patterns in the graph above:   \n1. All of the products reached on time have less than 10% discount, compared to 0-65% for those not reached on time.  \n2. None of the products weighing 2-4kg reached on time. And the cost of these products are over 180 dollars.   ","d4cc86aa":"Nothing seems interesting from the additional three categorical features. ","b5fbcaa8":"There seem to be some interesting patterns in the graph above:   \n1. Products that have the most customer care calls are relative expensive(mostly over 230 dollars), light(0-2kg), also with less discount (mostly below 10%).  \n2. Products weighing 4-6kg only got less than 10% discount.   ","30ca0641":"We can see there are no missing values. The datatypes are all good. ","0e0c1131":"The values are legit. ","bcb8d6bd":"The dataset is from kaggle [data](https:\/\/www.kaggle.com\/prachi13\/customer-analytics)   \nSome of the columns:  \n* Customer care calls: The number of calls made from enquiry for enquiry of the shipment.  \n* Reached on time: It is the target variable, where 1 Indicates that the product has NOT reached on time and 0 indicates it has reached on time.  "}}