{"cell_type":{"22f65433":"code","fae73f0f":"code","6ec1fede":"code","a4923ee5":"code","2999cc53":"code","abf77321":"code","cd6bfb0c":"code","59a369fb":"code","db84b98d":"code","b37a6bfc":"code","578d3648":"code","4a4ef96b":"code","6f65f363":"code","c53d4643":"code","3b8dcf19":"code","fbb1f8aa":"code","88fb03d6":"code","7fa83e44":"code","cb9183a1":"code","a34a5f5b":"code","ce849b02":"code","61fca3c3":"code","4f093340":"code","d46dcc32":"code","863c4b48":"code","d2f0019b":"code","2953dd9e":"code","4aa9d3e6":"code","39013e10":"code","1632a32f":"markdown","e6647045":"markdown","5da76084":"markdown","fdf3dc0e":"markdown","ca926e43":"markdown","b4fd8b2b":"markdown","9e30cb02":"markdown","614f8129":"markdown","48e07668":"markdown","61c02072":"markdown","f56a2cbb":"markdown","3a0bd299":"markdown","55f81497":"markdown","312053a6":"markdown","48134e4f":"markdown","ff933a59":"markdown","f3b7d785":"markdown","7277dfac":"markdown","960e5dc8":"markdown","8df757e5":"markdown","5683053b":"markdown","f3239706":"markdown","6d13305e":"markdown"},"source":{"22f65433":"import os\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns\nsns.set(style=\"whitegrid\")\n\n#pydicom\nimport pydicom\n\n# Suppress warnings \nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Settings for pretty nice plots\nplt.style.use('fivethirtyeight')\nplt.show()","fae73f0f":"# List files available\nprint(os.listdir(\"..\/input\/siim-isic-melanoma-classification\"))","6ec1fede":"# Defining data path\nIMAGE_PATH = \"..\/input\/siim-isic-melanoma-classification\/\"\n\ntrain_df = pd.read_csv('..\/input\/siim-isic-melanoma-classification\/train.csv')\ntest_df = pd.read_csv('..\/input\/siim-isic-melanoma-classification\/test.csv')\n\n\n#Training data\nprint('Training data shape: ', train_df.shape)\ntrain_df.head(5)","a4923ee5":"#Test data\nprint('Test data shape: ', test_df.shape)\ntest_df.head(5)","2999cc53":"# Null values and Data types\nprint('Train Set')\nprint(train_df.info())\nprint('-------------')\nprint('Test Set')\nprint(test_df.info())","abf77321":"# Total number of images in the dataset(train+test)\nprint(\"Total images in Train set: \",train_df['image_name'].count())\nprint(\"Total images in Test set: \",test_df['image_name'].count())","cd6bfb0c":"print(f\"The total patient ids are {train_df['patient_id'].count()}, from those the unique ids are {train_df['patient_id'].value_counts().shape[0]} \")","59a369fb":"columns = train_df.keys()\ncolumns = list(columns)\nprint(columns)","db84b98d":"train_df['target'].value_counts()","b37a6bfc":"train_df['target'].value_counts(normalize=True).plot(kind='bar', title='Distribution of the Target column in the training set')","578d3648":"train_df['sex'].value_counts(normalize=True)","4a4ef96b":"train_df['sex'].value_counts(normalize=True).plot(kind='bar',  title='Gender Distribution in the training set')","6f65f363":"z=train_df.groupby(['target','sex'])['benign_malignant'].count().to_frame().reset_index()\nz.style.background_gradient(cmap='Reds')","c53d4643":"sns.catplot(x='target',y='benign_malignant', hue='sex',data=z,kind='bar')\nplt.ylabel('Count')\nplt.xlabel('benign:0 vs malignant:1')","3b8dcf19":"train_df['anatom_site_general_challenge'].value_counts(normalize=True).sort_values()","fbb1f8aa":"train_df['anatom_site_general_challenge'].value_counts(normalize=True).sort_values().plot(kind='barh',\n                                                      title='Distribution of the imaged site in the training set')","88fb03d6":"\nz1=train_df.groupby(['sex','anatom_site_general_challenge'])['benign_malignant'].count().to_frame().reset_index()\nz1.style.background_gradient(cmap='Reds')\nsns.catplot(x='anatom_site_general_challenge',y='benign_malignant', hue='sex',data=z1,kind='bar')\nplt.gcf().set_size_inches(10,8)\nplt.xlabel('location of imaged site')\nplt.xticks(rotation=45,fontsize='10', horizontalalignment='right')\nplt.ylabel('count of melanoma cases')","7fa83e44":"train_df['age_approx'].plot(kind='hist',bins=20)","cb9183a1":"# KDE plot of age that were diagnosed as benign\nsns.kdeplot(train_df.loc[train_df['target'] == 0, 'age_approx'], label = 'Benign',shade=True)\n\n# KDE plot of age that were diagnosed as malignant\nsns.kdeplot(train_df.loc[train_df['target'] == 1, 'age_approx'], label = 'Malignant',shade=True)\n\n# Labeling of plot\nplt.xlabel('Age (years)'); plt.ylabel('Density'); plt.title('Distribution of Ages');","a34a5f5b":"# KDE plot of age that were diagnosed as benign\nsns.kdeplot(train_df.loc[train_df['sex'] == 'male', 'age_approx'], label = 'Male',shade=True)\n\n# KDE plot of age that were diagnosed as malignant\nsns.kdeplot(train_df.loc[train_df['sex'] == 'female', 'age_approx'], label = 'Female',shade=True)\n\n# Labeling of plot\nplt.xlabel('Age (years)'); plt.ylabel('Density'); plt.title('Distribution of Ages');","ce849b02":"train_df['diagnosis'].value_counts()","61fca3c3":"train_df['diagnosis'].value_counts(normalize=True).sort_values().plot(kind='barh',\n                                                      title='Distribution in the training set')","4f093340":"# Extract patient id's for the training set\nids_train = train_df.patient_id.values\n# Extract patient id's for the validation set\nids_test = test_df.patient_id.values\n\n# Create a \"set\" datastructure of the training set id's to identify unique id's\nids_train_set = set(ids_train)\nprint(f'There are {len(ids_train_set)} unique Patient IDs in the training set')\n# Create a \"set\" datastructure of the validation set id's to identify unique id's\nids_test_set = set(ids_test)\nprint(f'There are {len(ids_test_set)} unique Patient IDs in the test set')\n\n# Identify patient overlap by looking at the intersection between the sets\npatient_overlap = list(ids_train_set.intersection(ids_test_set))\nn_overlap = len(patient_overlap)\nprint(f'There are {n_overlap} Patient IDs in both the training and test sets')\nprint('')\nprint(f'These patients are in both the training and test datasets:')\nprint(f'{patient_overlap}')","d46dcc32":"images = train_df['image_name'].values\n\n# Extract 9 random images from it\nrandom_images = [np.random.choice(images+'.jpg') for i in range(9)]\n\n# Location of the image dir\nimg_dir = IMAGE_PATH+'\/jpeg\/train'\n\nprint('Display Random Images')\n\n# Adjust the size of your images\nplt.figure(figsize=(10,8))\n\n# Iterate and plot random images\nfor i in range(9):\n    plt.subplot(3, 3, i + 1)\n    img = plt.imread(os.path.join(img_dir, random_images[i]))\n    plt.imshow(img, cmap='gray')\n    plt.axis('off')\n    \n# Adjust subplot parameters to give specified padding\nplt.tight_layout()   ","863c4b48":"benign = train_df[train_df['benign_malignant']=='benign']\nmalignant = train_df[train_df['benign_malignant']=='malignant']","d2f0019b":"images = benign['image_name'].values\n\n# Extract 9 random images from it\nrandom_images = [np.random.choice(images+'.jpg') for i in range(9)]\n\n# Location of the image dir\nimg_dir = IMAGE_PATH+'\/jpeg\/train'\n\nprint('Display benign Images')\n\n# Adjust the size of your images\nplt.figure(figsize=(10,8))\n\n# Iterate and plot random images\nfor i in range(9):\n    plt.subplot(3, 3, i + 1)\n    img = plt.imread(os.path.join(img_dir, random_images[i]))\n    plt.imshow(img, cmap='gray')\n    plt.axis('off')\n    \n# Adjust subplot parameters to give specified padding\nplt.tight_layout()   ","2953dd9e":"images = malignant['image_name'].values\n\n# Extract 9 random images from it\nrandom_images = [np.random.choice(images+'.jpg') for i in range(9)]\n\n# Location of the image dir\nimg_dir = IMAGE_PATH+'\/jpeg\/train'\n\nprint('Display malignant Images')\n\n# Adjust the size of your images\nplt.figure(figsize=(10,8))\n\n# Iterate and plot random images\nfor i in range(9):\n    plt.subplot(3, 3, i + 1)\n    img = plt.imread(os.path.join(img_dir, random_images[i]))\n    plt.imshow(img, cmap='gray')\n    plt.axis('off')\n    \n# Adjust subplot parameters to give specified padding\nplt.tight_layout()   ","4aa9d3e6":"f = plt.figure(figsize=(16,8))\nf.add_subplot(1,2, 1)\n\nsample_img = benign['image_name'][0]+'.jpg'\nraw_image = plt.imread(os.path.join(img_dir, sample_img))\nplt.imshow(raw_image, cmap='gray')\nplt.colorbar()\nplt.title('Benign Image')\nprint(f\"Image dimensions:  {raw_image.shape[0],raw_image.shape[1]}\")\nprint(f\"Maximum pixel value : {raw_image.max():.1f} ; Minimum pixel value:{raw_image.min():.1f}\")\nprint(f\"Mean value of the pixels : {raw_image.mean():.1f} ; Standard deviation : {raw_image.std():.1f}\")\n\nf.add_subplot(1,2, 2)\n\n#_ = plt.hist(raw_image.ravel(),bins = 256, color = 'orange',)\n_ = plt.hist(raw_image[:, :, 0].ravel(), bins = 256, color = 'red', alpha = 0.5)\n_ = plt.hist(raw_image[:, :, 1].ravel(), bins = 256, color = 'Green', alpha = 0.5)\n_ = plt.hist(raw_image[:, :, 2].ravel(), bins = 256, color = 'Blue', alpha = 0.5)\n_ = plt.xlabel('Intensity Value')\n_ = plt.ylabel('Count')\n_ = plt.legend(['Red_Channel', 'Green_Channel', 'Blue_Channel'])\nplt.show()","39013e10":"f = plt.figure(figsize=(16,8))\nf.add_subplot(1,2, 1)\n\nsample_img = malignant['image_name'][235]+'.jpg'\nraw_image = plt.imread(os.path.join(img_dir, sample_img))\nplt.imshow(raw_image, cmap='gray')\nplt.colorbar()\nplt.title('Malignant Image')\nprint(f\"Image dimensions:  {raw_image.shape[0],raw_image.shape[1]}\")\nprint(f\"Maximum pixel value : {raw_image.max():.1f} ; Minimum pixel value:{raw_image.min():.1f}\")\nprint(f\"Mean value of the pixels : {raw_image.mean():.1f} ; Standard deviation : {raw_image.std():.1f}\")\n\nf.add_subplot(1,2, 2)\n\n#_ = plt.hist(raw_image.ravel(),bins = 256, color = 'orange',)\n_ = plt.hist(raw_image[:, :, 0].ravel(), bins = 256, color = 'red', alpha = 0.5)\n_ = plt.hist(raw_image[:, :, 1].ravel(), bins = 256, color = 'Green', alpha = 0.5)\n_ = plt.hist(raw_image[:, :, 2].ravel(), bins = 256, color = 'Blue', alpha = 0.5)\n_ = plt.xlabel('Intensity Value')\n_ = plt.ylabel('Count')\n_ = plt.legend(['Red_Channel', 'Green_Channel', 'Blue_Channel'])\nplt.show()","1632a32f":"## Histograms\n\nHistograms are a graphical representation showing how frequently various color values occur in the image i.e frequency of pixels intensity values. In a RGB color space, pixel values range from 0 to 255 where 0 stands for black and 255 stands for white. Analysis of a histogram can help us understand thee brightness, contrast and intensity distribution of an image. Now let's look at the histogram of a random selected sample from each category.\n\n### Benign category","e6647045":"## Location of imaged site w.r.t gender","5da76084":"## Unique IDs ","fdf3dc0e":"## Distribution of Diagnosis","ca926e43":"## Reading the Image datasets","b4fd8b2b":"## Data Exploration\n\n### Missing Values","9e30cb02":"## Gender wise distribution\n","614f8129":"There are some missing values in some of the columns. We shall deal with them later.","48e07668":"The number of unique patients is less than the total number of patients. This means that, patients have multiple records.","61c02072":"## Visualizing Images with benign lesions","f56a2cbb":"## Visualising Age KDEs\n\n### Distribution of Ages w.r.t Target","3a0bd299":"# 4. Visualising Images : JPEG\n\n## Visualizing a random selection of images","55f81497":"## Importing the necessary libraries","312053a6":"## Patient Overlap \nWe need to check that the the same patient lesion images shouldn't appear in both training and test set.","48134e4f":"## Visualizing Images with Malignant lesions","ff933a59":"## Gender vs Target","f3b7d785":"## Age Distribution of patients","7277dfac":"We do see that the JPEG format images vary in sizes","960e5dc8":"## Location of imaged site","8df757e5":"## Total Number of images","5683053b":"## Exploring the Target column","f3239706":"\n### Distribution of Ages w.r.t gender","6d13305e":"### Malignant category"}}