{"cell_type":{"580d2bc5":"code","f6406664":"code","a680fa4f":"code","118be0f0":"code","49695150":"code","4ea8c659":"code","c1d80106":"code","d004172e":"code","dbb0ce29":"code","edb4393b":"code","0d8ed064":"code","08809bd0":"code","97e0d70d":"code","8a3e0fad":"code","8ae28fc9":"code","334b06e3":"code","6098cf3c":"code","f6d17088":"code","048d52b8":"code","1e99e65c":"code","04156017":"code","b05e5030":"code","dbdc19e1":"code","1a0a2cc9":"code","82d9590e":"code","014baa33":"code","40e1d860":"code","388d7ffb":"code","b1880524":"code","88f435d5":"code","8308d5f8":"code","557d1571":"code","8174b8e2":"code","d5c2249b":"code","dcf0f0aa":"code","c6d05f69":"code","8416a5e1":"code","9569f5aa":"code","953d0a2f":"code","23fbb179":"code","a3efdef5":"code","21b7c2d2":"code","a7bd1215":"code","4e42b0be":"code","ec8a6985":"code","8f388096":"code","7ef579dd":"code","09b8ba60":"code","c3975f96":"code","b5979ade":"code","2f8c1c00":"code","32b6fda7":"code","f0535978":"code","a929912d":"markdown","43eca19d":"markdown","460e1904":"markdown","2d97bcd9":"markdown","04bc6ebf":"markdown","2cc3cade":"markdown","217ac074":"markdown","42f7088f":"markdown","4574d971":"markdown","b0e2e042":"markdown","cd9e0a9e":"markdown"},"source":{"580d2bc5":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport geopandas\n\nimport requests # library to handle requests\nimport json # library to handle JSON files\n#deprecated use pandas.json_normalize #from pandas.io.json import json_normalize # tranform JSON file into a pandas dataframe","f6406664":"df_geo = geopandas.read_file('..\/input\/working-files\/dubai.geojson')\ndf_geo.head()","a680fa4f":"df_pop_2019 = pd.read_csv('..\/input\/dubai-neighborhoods\/dubai_pop_2019.csv')\ndf_pop_2018 = pd.read_csv('..\/input\/dubai-neighborhoods\/dubai_pop_2018.csv')","118be0f0":"df_pop_2019.describe()\ndf_pop_2018.describe()","49695150":"df = df_geo.drop(['Name', 'description', 'OBJECTID', 'C_PREFIX_E','C_PREFIX_A', 'DGIS_ID','NDGIS_ID','LABEL_E','LABEL_A'], axis=1)","4ea8c659":"#df.rename(columns={'CNAME_E': 'Community Name en', 'CNAME_A': 'Community Name ar', 'COMMUNITY_':'Community en', 'COMMUNITY1':'Community ar'}, inplace=True)\ndf.rename(columns={'COMMUNITY_':'COMMUNITY_E', 'COMMUNITY1':'COMMUNITY_A'}, inplace=True)","c1d80106":"df['Sector'] = df['COMM_NUM'].str[0].astype(str)\n#df.loc[:,'C_Number']= df['C_Number'].astype(str)","d004172e":"df.info()\n#df.to_file(\"dubai5.geojson\", driver='GeoJSON')","dbb0ce29":"df_pop_2019.rename(columns={'Total population':'Population 2019', 'Community Number': 'COMM_NUM'}, inplace=True)\ndf_pop_2018.rename(columns={'Total population':'Population 2018', 'Community Number': 'COMM_NUM'}, inplace=True)\n\ndf_pop_2019['COMM_NUM'] = df_pop_2019['COMM_NUM'].astype(str)\ndf_pop_2018['COMM_NUM'] = df_pop_2018['COMM_NUM'].astype(str)","edb4393b":"df_merge_geo = pd.merge(df,df_pop_2018[['COMM_NUM', 'Population 2018']], on = 'COMM_NUM', how='left', validate='one_to_one')","0d8ed064":"df_merge_geo = pd.merge(df_merge_geo,df_pop_2019[['COMM_NUM', 'Population 2019']], on = 'COMM_NUM', how='left', validate='one_to_one')","08809bd0":"df_merge_geo.info()","97e0d70d":"df_merge_geo.head()","8a3e0fad":"df_merge_geo['geometry']\ndf_merge_geo.crs","8ae28fc9":"df_merge_geo = df_merge_geo.to_crs(epsg=6933)","334b06e3":"area = pd.to_numeric(df_merge_geo['geometry'].area)\/10**6\nprint(area)\ndf_merge_geo['Area Sq Km'] = pd.to_numeric(df_merge_geo['geometry'].area)\/10**6","6098cf3c":"df_merge_geo = df_merge_geo.to_crs(epsg=4326)\ndf_merge_geo.crs","f6d17088":"df_merge_geo['Latitude'] = df_merge_geo['geometry'].centroid.y\ndf_merge_geo['Longitude'] = df_merge_geo['geometry'].centroid.x","048d52b8":"df_merge_geo.sort_values('Area Sq Km', ascending=False).head(30)","1e99e65c":"df_merge_geo.to_file(\"dubai.geojson\", driver='GeoJSON')","04156017":"from kaggle_secrets import UserSecretsClient\nuser_secrets = UserSecretsClient()\nCLIENT_ID = user_secrets.get_secret(\"CLIENT_ID\")\nCLIENT_SECRET = user_secrets.get_secret(\"CLIENT_SECRET\")\nprint('Your credentails:')\nprint('CLIENT_ID: ' + CLIENT_ID)\nprint('CLIENT_SECRET:' + CLIENT_SECRET)","b05e5030":"#setup Foursqure parameters\n\nVERSION = '20210103'\nLIMIT = 100 # A default Foursquare API limit value\nRADIUS = 1000\n\nTIME = 'any'\nDAY = 'any'\nSECTION = 'topPicks'\nOAUTH = '3BXMN23RZIFAT55H5SVTL25KWGTWHEHMDHK0RUHDDTFXB1VO'","dbdc19e1":"df_merge_geo.loc[0, 'Latitude']","1a0a2cc9":"url = 'https:\/\/api.foursquare.com\/v2\/venues\/explore?client_id={}&client_secret={}&v={}&ll={},{}&time={}&day={}&limit={}&_=1609763116939'.format(    \n    CLIENT_ID, \n    CLIENT_SECRET, \n    VERSION,\n    df_merge_geo.loc[0, 'Latitude'],\n    df_merge_geo.loc[0, 'Longitude'],\n    TIME,\n    DAY,\n    LIMIT\n    )\nurl # display URL","82d9590e":"new_results = requests.get(url)\nnew_results = new_results.text.replace('jQuery17205565065462550773_1609762322785(','').replace('}});','}}')\nnew_results = json.loads(new_results)\nnew_results","014baa33":"venues = new_results['response']['groups'][0]['items']\n    \nnearby_venues = pd.json_normalize(venues) # flatten JSON\nnearby_venues.shape","40e1d860":"\ndef get_category_type(row):\n    try:\n        categories_list = row['categories']\n    except:\n        categories_list = row['venue.categories']\n        \n    if len(categories_list) == 0:\n        return None\n    else:\n        return categories_list[0]['name']\n","388d7ffb":"# filter columns\nfiltered_columns = ['venue.id','venue.name', 'venue.categories', 'venue.location.lat', 'venue.location.lng', 'venue.location.distance']\nnearby_venues = nearby_venues.loc[:, filtered_columns]\n\n\n# filter the category for each row\nnearby_venues['venue.categories'] = nearby_venues.apply(get_category_type, axis=1)\nnearby_venues","b1880524":"def getNearbyVenues(nums, names, sectors, latitudes, longitudes, areas, radius=1000):\n       \n    \n    venues_list=[]\n    for num, name, sector, lat, lng, area in zip(nums, names, sectors, latitudes, longitudes, areas):\n        print('{}-{}'.format(num, name))\n        \n            \n        # create the API request URL\n\n        url = 'https:\/\/api.foursquare.com\/v2\/venues\/explore?callback=jQuery17205565065462550773_1609762322785&oauth_token={}&client_id={}&client_secret={}&v={}&ll={},{}&time={}&day={}&limit={}&_=1609763116939'.format(\n            OAUTH,\n            CLIENT_ID, \n            CLIENT_SECRET,\n            VERSION,\n            lat,\n            lng,\n            TIME,\n            DAY,\n            LIMIT\n        )\n        \n        #print(url)\n            \n        # make the GET request\n        results = requests.get(url)\n        results = results.text.replace('jQuery17205565065462550773_1609762322785(','').replace('}});','}}')\n        results = json.loads(results)\n        \n        if 'response' not in results:\n            continue\n        elif 'groups' not in results[\"response\"]:\n            continue\n        \n        results = results[\"response\"]['groups'][0]['items']\n        \n        # return only relevant information for each nearby venue\n        venues_list.append([(\n            num,\n            name,\n            sector,\n            lat,\n            lng,\n            v['venue']['id'],\n            v['venue']['name'],\n            v['venue']['location']['lat'], \n            v['venue']['location']['lng'],  \n            v['venue']['categories'][0]['name'],\n            v['venue']['stats']['tipCount'],\n            v['venue']['stats']['usersCount'],\n            v['venue']['stats']['checkinsCount'],\n            v['venue'].get('rating', None),\n            v['venue'].get('ratingColor', None),\n            v['venue'].get('ratingSignals',None),\n            v['venue'].get('url', ''),\n            v['venue'].get('price',{}).get('tier', None),\n            v['venue'].get('price',{}).get('message', ''),\n            v['venue'].get('price',{}).get('currency', ''),\n        ) for v in results])\n\n    nearby_venues = pd.DataFrame([item for venue_list in venues_list for item in venue_list])\n    nearby_venues.columns = ['COMM_NUM',\n                             'CNAME_E',\n                             'Sector',\n                             'Community Latitude',\n                             'Community Longitude',\n                             'Venue Id',\n                             'Venue',\n                             'Venue Latitude',\n                             'Venue Longitude',\n                             'Venue Category',\n                             'Stats TipsCount',\n                             'Stats UsersCount',\n                             'Stats CheckinsCount',\n                             'Rating',\n                             'Rating Color',\n                             'Rating Signals',\n                             'Url',\n                             'Price Tier',\n                             'Price Message',\n                             'Price Currency'\n                            ]\n    \n    return(nearby_venues)","88f435d5":"df_merge_geo.sort_values('COMM_NUM', inplace=True)","8308d5f8":"dubai_venues = getNearbyVenues(nums=df_merge_geo['COMM_NUM'], \n                               names=df_merge_geo['CNAME_E'],\n                               sectors=df_merge_geo['Sector'], \n                               latitudes=df_merge_geo['Latitude'],\n                               longitudes=df_merge_geo['Longitude'],\n                               areas=df_merge_geo['Area Sq Km'])","557d1571":"dubai_venues.shape","8174b8e2":"#print(dubai_venues.shape)\n#dubai_venues.sort_values('COMM_NUM', inplace=True)\ndubai_venues.head()","d5c2249b":"dubai_venues.to_csv(r'.\/dubai_venues_all.csv', index=False)","dcf0f0aa":"#dubai_venues = pd.read_csv('..\/input\/working-files\/dubai_venues.csv')","c6d05f69":"dubai_venues.info()","8416a5e1":"from shapely.geometry import Point, Polygon\n\np1 = Point(55.299459829164,25.3430010087673)\np2 = Point(55.3043434850252,25.2789245735265)","9569f5aa":"df_merge_geo[1:2].geometry.contains(p2)","953d0a2f":"dubai_venues['InPoly'] = False","23fbb179":"dubai_venues.info()","a3efdef5":"for row in df_merge_geo.itertuples(index=False):\n    cnum = row[df_merge_geo.columns.get_loc('COMM_NUM')]        \n    cgeo = row[df_merge_geo.columns.get_loc('geometry')]    \n    df_tmp = dubai_venues[dubai_venues['COMM_NUM']==cnum]\n    print('=============== {} ==============='.format(cnum,))\n    for idx, row in df_tmp.iterrows():\n        p1 = Point(df_tmp.loc[idx, 'Venue Longitude'],df_tmp.loc[idx, 'Venue Latitude'])\n        print('{} -- {}  -- {}'.format(idx, cgeo.contains(p1),df_tmp.loc[idx, 'Venue']))\n        dubai_venues.loc[idx,'InPoly'] = cgeo.contains(p1)\n    \n    \nprint('Completed')","21b7c2d2":"dubai_venues.groupby('InPoly').count()","a7bd1215":"dubai_venues.to_csv(r'.\/dubai_venues_all.csv', index=False)","4e42b0be":"#pd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\ndf_geo_stations = geopandas.read_file('..\/input\/dubai-neighborhoods\/dubai_metro_stations.geojson')\ndf_geo_stations.head(500)","ec8a6985":"df_geo_stations = df_geo_stations[['RAIL_STATIONS_NO','COMMUNITY_NAME','STATION_NAME_EN','geometry']]\ndf_geo_stations = df_geo_stations.rename(columns={'RAIL_STATIONS_NO' : 'STATION_NO', 'STATION_NAME_EN':'STATION_NAME'})\ndf_geo_stations = df_geo_stations.assign(LAT_STATION= lambda x: df_geo_stations.geometry.y).assign(LON_STATION= lambda x: df_geo_stations.geometry.x)\n\ndf_geo_stations = df_geo_stations.assign(ROUTE = lambda x: df_geo_stations['STATION_NO'].str[0])\ndf_geo_stations['ROUTE'] = df_geo_stations['ROUTE'].map({'R':'Red', 'G':'Green', 'E':'Expo'})\n\ndf_geo_stations = df_geo_stations.sort_values('STATION_NO', ascending=True)\n\ndf_geo_stations.info()","8f388096":"df_geo_stations.to_file(\"dubai_metro_stations.geojson\", driver='GeoJSON')","7ef579dd":"df_geo_stations = geopandas.read_file('.\/dubai_metro_stations.geojson')","09b8ba60":"import folium\ndubai_lat = 25.05\ndubai_long = 55.11\nmap1 = folium.Map([dubai_lat, dubai_long], tiles='CartoDB positron', zoom_start=9.5)\n\n\n\nfg_stations = folium.FeatureGroup(name='Metro Stations', overlay=True, control=True, show=True ).add_to(map1)\n\nfor index, row in df_geo_stations.iterrows():\n    popup_text = ''\n    folium.CircleMarker(location=(row[\"LAT_STATION\"],\n                                  row[\"LON_STATION\"]),   \n                        radius=3,\n                        color=\"#007849\",\n                        popup=popup_text,\n                        fill=False).add_to(fg_stations)\n\nfolium.GeoJson(\n    df_geo_stations,    \n    highlight_function= None,\n    tooltip = folium.features.GeoJsonTooltip(['COMMUNITY_NAME', 'STATION_NO', 'STATION_NAME'], labels=True)\n).add_to(map1)\n\n\nfolium.LayerControl().add_to(map1)\nmap1","c3975f96":"# GET Response from Foursquare API\ncategories_url = 'https:\/\/api.foursquare.com\/v2\/venues\/categories?client_id={}&client_secret={}&v={}'.format(\n            CLIENT_ID, \n            CLIENT_SECRET,\n            VERSION,)\n            \n# make the GET request\ncategory_results = requests.get(categories_url).json()\ncategory_results = category_results['response']['categories']","b5979ade":"categories = pd.json_normalize(data=category_results)\n\n# Cleaning DataFrame\ncategories = categories.drop(columns=['pluralName'\n                             ,'shortName'\n                             ,'categories'\n                             ,'icon.prefix'\n                             ,'icon.suffix'])\n\ncategories = categories.rename(columns={'id':'category_id',\n                                         'name':'category_name'})\ncategories","2f8c1c00":"def get_nearbyvenues_total(lat, lng, radius, category_id):     \n\n    url = 'https:\/\/api.foursquare.com\/v2\/venues\/explore?client_id={}&client_secret={}&v={}&ll={},{}&time={}&day={}&limit={}&radius={}&categoryId={}&_=1609763116939'.format(            \n            CLIENT_ID, \n            CLIENT_SECRET,\n            VERSION,\n            lat,\n            lng,\n            TIME,\n            DAY,\n            LIMIT,\n            radius,\n            category_id\n    ) \n  \n  \n    try:\n        response = requests.get(url).json()['response']['totalResults']\n  \n    except:\n        response = 0\n        \n    return response","32b6fda7":"metro_venues = []\n\nfor index, metro in df_geo_stations.iterrows():\n    for index_2, category in categories.iterrows():\n        print('{}-{} - {}'.format(metro['STATION_NO'], metro['STATION_NAME'], category['category_name'] ))\n        metro_venues.append([(  metro['STATION_NO']\n                                ,metro['STATION_NAME']\n                                , metro['LAT_STATION']\n                                , metro['LON_STATION']\n                                , metro['ROUTE']\n                                , category['category_name'] \n                                , get_nearbyvenues_total(lat = metro['LAT_STATION']\n                                                   ,lng = metro['LON_STATION']\n                                                   ,radius = 1000\n                                                   ,category_id = category['category_id']))])\n    \nmetro_venues = pd.DataFrame([item for metro_venues in metro_venues for item in metro_venues])\nmetro_venues.columns=['station_no','station_name', 'latitude', 'longitude', 'route', 'category_name', 'venues']\n\n# Exporting to .CSV\nmetro_venues.to_csv('metro_venues_total.csv', index=False)\nmetro_venues.tail()","f0535978":"df_geo_stations.shape","a929912d":"Prepare the sector based on community number, by taking the first character. Dubai sectors are from 1 to 9. Coummunity numbers are 3 digits with first digit as the sector number","43eca19d":"## Identify the venues that are within the boundary of neighborhood","460e1904":"## Data accquisition and preparation\nIn this Part 1 notebook I am performing detailed steps to acquire the data and then transform it for the purpose of my capstone.","2d97bcd9":"## merge pop data to geofile","04bc6ebf":"# Foursquare Data accquisition","2cc3cade":"Fetch the population data csv","217ac074":"Fetch the Dubai Community geojson","42f7088f":"## Fetch Foursquare venues for metro\/tram stations for toplevel category","4574d971":"Calculate the Area of communities","b0e2e042":"## Fetch Foursquare venue total for top level category for each metro stations","cd9e0a9e":"Drop columns not required for our project."}}