{"cell_type":{"fb28a633":"code","b776e1dd":"code","312910fe":"code","cec60938":"code","1493c562":"code","be3c3805":"code","2b1be279":"code","4b001c9a":"code","1e4dee3f":"code","8c611982":"code","68551c87":"code","ca78c3f6":"code","08a88cb7":"code","2c1e68fe":"code","a75356e2":"code","15cb65e7":"code","23ef405a":"code","e271c228":"code","20302e0f":"code","f2c7ee6c":"code","501728bf":"code","6267ce10":"code","c8dac484":"code","d20fbabb":"code","db261423":"markdown","08397b13":"markdown","0ca37a9c":"markdown","92248969":"markdown","a23d1120":"markdown","9c7ff57e":"markdown","8c3597b1":"markdown","7e4989b4":"markdown","eec2473c":"markdown","30571b72":"markdown","efcfd717":"markdown","298a72a4":"markdown","8eed5dab":"markdown","5ee2c4d5":"markdown","1948da6e":"markdown","b7fdccb4":"markdown","28297c60":"markdown","3a75f8b2":"markdown"},"source":{"fb28a633":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b776e1dd":"data = pd.read_csv('..\/input\/work-accidents-in-china\/accidents.csv')\ndata.head()","312910fe":"data['Date'] = pd.to_datetime(data['Date'])\ndata['year'] = data['Date'].dt.year\ndata['mon'] = data['Date'].dt.month\ndata['dayofweek'] = data['Date'].dt.dayofweek","cec60938":"# import plt lib\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm # import colormap\nimport seaborn as sns\nmyfont = matplotlib.font_manager.FontProperties(fname='..\/input\/myfont\/simhei.ttf')\nplt.rcParams['axes.unicode_minus'] = False","1493c562":"mon_counts = data['mon'].value_counts()\nmon_counts","be3c3805":"mon_labels = ['Apr','May','Jul','Mar','Aug','Jun']\ncolors = cm.rainbow(np.arange(len(mon_labels),0,-1)\/len(mon_labels))\nbarplot = plt.bar(x = mon_labels,height = mon_counts,color = colors)\nplt.show()","2b1be279":"dayofweek_counts = data['dayofweek'].value_counts()\ndayofweek_counts","4b001c9a":"dayofweek_labels = ['Saturday','Monday','Wednesday','Sunday','Thursday','Friday','Tuesday']\ncolors = cm.rainbow(np.arange(len(dayofweek_labels),0,-1)\/len(dayofweek_labels))\nbarplot = plt.bar(x = dayofweek_labels,height = dayofweek_counts,width=0.6,color = colors)\nplt.tick_params(labelsize=8.5) \nplt.show()","1e4dee3f":"weekday = 0\nweekend = 0\nfor idx,val in dayofweek_counts.items():\n    if idx == 5 or idx == 6:\n        weekend += val\n    else:\n        weekday += val\nweekday \/= 5\nweekend \/= 2\n('weekday average:' +str(weekday) + ', weekend average:' + str(weekend)+'.')","8c611982":"select = data.groupby('year')['Province'].value_counts().sort_values(ascending=False)\nselect","68551c87":"def replace(x):\n    if x == '\u5929\u6d25\u5e02':\n        return 'Tianjin'\n    elif x == '\u5e7f\u4e1c\u7701':\n        return 'Guangdong'\n    elif x == '\u65b0\u7586\u7ef4\u543e\u5c14\u81ea\u6cbb\u533a':\n        return 'Xinjiang'\n    elif x == '\u6c5f\u82cf\u7701':\n        return 'Jiangsu'\n    elif x == '\u6cb3\u5357\u7701':\n        return 'Henan'\n    elif x == '\u6e56\u5317\u7701':\n        return 'Hubei'\n    else:\n        return x\ndata['Province'] = data['Province'].apply(lambda x: replace(x))","ca78c3f6":"select = data.groupby('year')['Province'].value_counts().sort_values(ascending=False)\nselect","08a88cb7":"# The accident type of province\nprovince_list = list(data['Province'].value_counts().index)\n# function : return value_counts\ndef accident_type_counts(province_name,height=0.8,labelsize=12):\n    data_temp = data.copy()\n    data_temp = data_temp[data_temp['Province'] == province_name]\n    select = data_temp['Type'].value_counts(ascending=False)\n    bar_plot(select,province_name,height,labelsize)\n# function : plot data\ndef bar_plot(value_counts,province_name,height,labelsize):\n    plt.title(province_name,fontsize=15)\n    labels = list(value_counts.index)\n    colors = cm.rainbow(np.arange(len(labels),0,-1)\/len(labels))\n    barplot = plt.barh(y = labels,height = height,width=value_counts,color = colors)\n    plt.tick_params(labelsize=labelsize) \n    plt.xticks(rotation=90)\n    plt.show()\n    \nfor p in province_list:\n    accident_type_counts(p,labelsize=15)","2c1e68fe":"# The keywords of accident description of province\nimport jieba\nimport jieba.analyse\nfrom wordcloud import WordCloud\nfrom wordcloud import STOPWORDS\n\nprovince_list = list(data['Province'].value_counts().index)\n\n# make keywords wordcloud and show\ndef keywords_extract_and_show(province_name):\n    data_temp = data.copy()\n    data_temp = data_temp[data_temp['Province'] == province_name]\n    data_temp['Description'] = data_temp['Description'].apply(lambda x : jieba.lcut(str(x)))\n    description_words = data_temp['Description'].sum()\n    sentence = ' '.join(description_words)\n    stop_words = [province_name,'one','two','dead','injured'] + list(STOPWORDS)\n    word_cloud = WordCloud(background_color='white',max_words = 20, stopwords = stop_words)\n    word_fig = word_cloud.generate(sentence)\n    plt.figure(figsize=(10,5))\n    plt.title(province_name,fontsize=20)\n    plt.imshow(word_fig)\n    plt.axis(\"off\")\n    plt.show()\n    plt.close()\n    \nfor p in province_list:\n    keywords_extract_and_show(p)","a75356e2":"# Analysis of cities with frequent accidents\nselect = data.groupby('year')['City'].value_counts().sort_values(ascending=False)\nselect[:10]","15cb65e7":"Company_Ownership_counts = data['Company Ownership'].value_counts()\nCompany_Ownership_counts","23ef405a":"labels = list(Company_Ownership_counts.index)\nplt.title('Accidental Companies',fontsize=15)\ncolors = cm.rainbow(np.arange(len(labels),0,-1)\/len(labels))\nplt.barh(y = labels,height = 0.8,width=Company_Ownership_counts,color = colors)\nplt.tick_params(labelsize=15) \nplt.xticks(rotation=90)\nplt.show()","e271c228":"# Analysis of fatal accident types\ndata_temp = data.copy()\nidx = data_temp[data_temp['Number of Deaths'] == '0'].index\ndata_temp = data_temp.drop(axis=0,index=idx)\nselect = data_temp.groupby('Type')['Number of Deaths'].value_counts().sort_values(ascending=False)\nselect","20302e0f":"# Analysis of major fatal accidents\ndata_temp = data.copy()\nidx = data_temp[data_temp['Number of Deaths'].isin(['0','1-9'])].index\ndata_temp = data_temp.drop(axis=0,index=idx)\nselect = data_temp.groupby('Type')['Number of Deaths'].value_counts().sort_values(ascending=False)\nselect","f2c7ee6c":"# Analysis of injury accidents\ndata_temp = data.copy()\nidx = data_temp[data_temp['Number of Injuries'] == '0'].index\ndata_temp = data_temp.drop(axis=0,index=idx)\nselect = data_temp.groupby('Type')['Number of Injuries'].value_counts().sort_values(ascending=False)\nselect","501728bf":"# Analysis of major injury accidents\ndata_temp = data.copy()\nidx = data_temp[data_temp['Number of Injuries'].isin(['0','1-9'])].index\ndata_temp = data_temp.drop(axis=0,index=idx)\nselect = data_temp.groupby('Type')['Number of Injuries'].value_counts().sort_values(ascending=False)\nselect","6267ce10":"# Extraordinarily serious injury accident\ndata_temp = data.copy()\nidx = data_temp[data_temp['Number of Injuries'].isin(['0','1-9','10-29'])].index\ndata_temp = data_temp.drop(axis=0,index=idx)\nselect = data_temp.groupby('Type')['Number of Injuries'].value_counts().sort_values(ascending=False)\nselect","c8dac484":"# Punished person analysis\ndata['Number of Punished'].value_counts()","d20fbabb":"# Financial penalty analysis\ndata['Financial Penalty'].value_counts()","db261423":"It can be seen from the results that there are data items that are not correctly classified, such as'\u5929\u6d25\u5e02', which should be converted to' Tianjin '","08397b13":"# 2. Accident location analysis","0ca37a9c":"It can be seen from the above results that both the punished person and the financial penalty are 0, **which should be because this part of data has not been collected**","92248969":"Fire, Flood \/ Structural failure and Drowning are the main causes of major fatal accidents","a23d1120":"From the calculation results, **we find that the average number of accidents happened on weekend is more than that on weekday**.  This may indicate that work on rest days will affect the quality of people's work and increase the probability of accidents.","9c7ff57e":"Tianjin, Beijing and Shenzhen are the three cities with the most accidents","8c3597b1":"From the figure, we can intuitively see that the number of accidents in April is the most, and the number of accidents in June is the least.","7e4989b4":"Mechanical accident, Gas or Chemical exposure, Falling, Structural failure and Fire are the main causes of fatal accidents","eec2473c":"Private enterprise and SOE are the main types of companies with accidents","30571b72":"Fire, Flood, Explosion \/ Fire, Gas or Chemical Exposure, Structural Failure and Transport accident are the main causes of major injury accidents","efcfd717":"# 4. Accident type and punishment analysis","298a72a4":"# 1. Accident time analysis","8eed5dab":"From the above word frequency analysis results, we can further observe the characteristics of accidents in various provinces. For example, from the words  **'site', 'tower' and 'crane'**, we can know that the most frequent accidents in Zhejiang Province should be **site construction accidents**; From the **'coal' and 'mine'** in the word frequency analysis results of Shanxi Province and Inner Mongolia Province, we can know that the most frequent accidents in these two places should be **coal mine accidents**.","5ee2c4d5":"# 3. Accident company analysis","1948da6e":"Explosion \/ Fire and Structural failure are the causes of extraordinarily serious injury accident","b7fdccb4":"We can see that all the months of the accident are April, may, July, March, August and June, all in **spring and summer**.","28297c60":"Structural failure, Falling \/ Structural failure, Gas or Chemical Exposure, Fire and Explosion \/ Fire are the main causes of injury accidents","3a75f8b2":"It can be seen from the results that the most frequent accidents in a week are **Saturday (5): 58** and **Monday (0): 44**. The number of accidents at other times is similar, all about 35. "}}