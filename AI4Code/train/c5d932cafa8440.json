{"cell_type":{"e1dcc73c":"code","459ec5e2":"code","42a5f0e0":"code","6480c029":"code","981b37ff":"code","c330da53":"code","a0042483":"code","7f574e2d":"code","f8fc5d16":"code","b0eb0798":"code","7a2ae1b3":"code","42be308f":"code","a01ff348":"code","0e3f6698":"code","6d97c1c2":"code","89fd298a":"code","c293f28a":"markdown","2effa103":"markdown","42c7dc63":"markdown","c4b7d990":"markdown","3b66925d":"markdown","19ec3dc2":"markdown","9f2a5913":"markdown","cdafcdc1":"markdown","e9f6f5af":"markdown"},"source":{"e1dcc73c":"import numpy as np\nimport pandas as pd\npd.set_option('max_columns', None)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.metrics import confusion_matrix","459ec5e2":"data = pd.read_csv('..\/input\/disease-prediction-using-machine-learning\/Training.csv')","42a5f0e0":"data","6480c029":"data['prognosis'].value_counts()","981b37ff":"def preprocess_inputs(df):\n    df = df.copy()\n    \n    # Drop missing column\n    df = df.drop('Unnamed: 133', axis=1)\n    \n    # Split df into X and y\n    y = df['prognosis']\n    X = df.drop('prognosis', axis=1)\n    \n    # Train-test split\n    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, shuffle=True, random_state=1)\n    \n    return X_train, X_test, y_train, y_test","c330da53":"X_train, X_test, y_train, y_test = preprocess_inputs(data)","a0042483":"X_train","7f574e2d":"model = LogisticRegression()\nmodel.fit(X_train, y_train)\n\nprint(\"Test Accuracy: {:.2f}%\".format(model.score(X_test, y_test) * 100))","f8fc5d16":"coefficients = np.mean(model.coef_, axis=0)\ncoefficients","b0eb0798":"importance_threshold = np.quantile(np.abs(coefficients), q=0.25)\n\nfig = px.bar(\n    x=coefficients,\n    y=X_train.columns,\n    orientation='h',\n    color=coefficients,\n    color_continuous_scale=[(0, 'red'), (1, 'blue')],\n    labels={'x': \"Coefficient Value\", 'y': \"Feature\"},\n    title=\"Feature Importance From Model Weights\"\n)\n\nfig.add_vline(x=importance_threshold, line_color='yellow')\nfig.add_vline(x=-importance_threshold, line_color='yellow')\nfig.add_vrect(x0=importance_threshold, x1=-importance_threshold, line_width=0, fillcolor='yellow', opacity=0.2)\n\nfig.show()","7a2ae1b3":"low_importance_features = X_train.columns[np.abs(coefficients) < importance_threshold]\nlow_importance_features","42be308f":"reduced_data = data.drop(low_importance_features, axis=1).copy()\n\nX_train, X_test, y_train, y_test = preprocess_inputs(reduced_data)","a01ff348":"X_train","0e3f6698":"reduced_data_model = LogisticRegression()\nreduced_data_model.fit(X_train, y_train)\n\nprint(\"Test Accuracy: {:.2f}%\".format(reduced_data_model.score(X_test, y_test) * 100))","6d97c1c2":"y_pred = reduced_data_model.predict(X_test)\n\ncm = confusion_matrix(y_test, y_pred)","89fd298a":"plt.figure(figsize=(30, 30))\nsns.heatmap(cm, annot=True, fmt='g', vmin=0, cmap='Blues', cbar=False)\nplt.xticks(np.arange(41) + 0.5, reduced_data_model.classes_, rotation=90)\nplt.yticks(np.arange(41) + 0.5, reduced_data_model.classes_, rotation=0)\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Actual\")\nplt.title(\"Confusion Matrix\")\nplt.show()","c293f28a":"# Getting Started","2effa103":"# Training (Original Data)","42c7dc63":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/VqQgKfl0lPg","c4b7d990":"Any features whose average weight values lie within the yellow box will be removed.","3b66925d":"# Task for Today  \n\n***\n\n## Disease Prediction  \n\nGiven *data about various symptoms in patients*, let's try to predict which **disease** a given patient has.\n\nWe will use a logistic regression model to make our predictions.  \nWe will use the weights that the model learns as a measure of feature importance and perform feature selection on the data.","19ec3dc2":"# Confusion Matrix","9f2a5913":"# Preprocessing","cdafcdc1":"# Feature Selection","e9f6f5af":"# Training (Reduced Data)"}}