{"cell_type":{"262be374":"code","972524c7":"code","20732d42":"code","abdf038e":"code","5ae39039":"code","7dfb36a2":"code","0a0bcbab":"code","0ede3ed2":"code","fba9e5a0":"code","66d532e3":"code","1dd2ead4":"code","52f47960":"code","7c66d7dc":"code","ae2c8e0b":"code","755fb449":"code","bead3845":"code","52b90c06":"code","01cb7959":"code","d88933fd":"code","dbb3666e":"code","212bc3e3":"code","475c356f":"code","1fc8f575":"code","a808127b":"code","a6952a7f":"code","5c4b1277":"code","0207a53f":"markdown","161e85c9":"markdown","4d49a5a8":"markdown","5f88775e":"markdown","0af603fe":"markdown","f4e48de8":"markdown","cd2c2d23":"markdown","a15d4786":"markdown","b9e11d2b":"markdown","2a775285":"markdown","a4e375ec":"markdown","583095ad":"markdown","a2971368":"markdown","e58d3cfc":"markdown","1bde2d65":"markdown","bd3411ba":"markdown","f593d6f1":"markdown","b2f3f351":"markdown","f7f74688":"markdown"},"source":{"262be374":"#THIS IS AN INSERTED EDIT, JL\n\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","972524c7":"from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text) # create a textblob object and name it 'blob'","20732d42":"blob[0:50] # we can slice them","abdf038e":"blob.upper(), blob.lower() # we can convert them to upper or lower case","5ae39039":"blob.find(\"doomed\") # we can locate particular terms","7dfb36a2":"apple_blob = TextBlob('apples')  \napple_blob == 'apples' # we can make direct comparisons between TextBlobs and strings","0a0bcbab":"blob.ngrams(n=2)","0ede3ed2":"zen = TextBlob(\"Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex.\")\nzen.words, zen.sentences","fba9e5a0":"blob.tags #returns tuple of (word, part-of-speech)","66d532e3":"blob.noun_phrases","1dd2ead4":"b = TextBlob(\"I havv verry goood speling!\")\nprint(b.correct())","52f47960":"from textblob import Word\nw = Word('conandrum')\nw.spellcheck()","7c66d7dc":"blob.sentiment","ae2c8e0b":"blob.sentiment.polarity","755fb449":"def get_textBlob_score(text):\n    # Polarity score is between -1 to 1\n    polarity_scores = []\n    sents = TextBlob(text).sentences\n    for sent in sents:\n        polarity = sent.sentiment.polarity\n        polarity_scores.append(polarity)\n    return polarity_scores\n\ntext = '''\nTo be, or not to be, that is the question:\nWhether 'tis nobler in the mind to suffer\nThe slings and arrows of outrageous fortune,\nOr to take arms against a sea of troubles\nAnd by opposing end them. To die\u2014to sleep,\nNo more; and by a sleep to say we end\nThe heart-ache and the thousand natural shocks\nThat flesh is heir to: 'tis a consummation\nDevoutly to be wish'd. To die, to sleep;\nTo sleep, perchance to dream\u2014ay, there's the rub:\nFor in that sleep of death what dreams may come,\nWhen we have shuffled off this mortal coil,\nMust give us pause\u2014there's the respect\nThat makes calamity of so long life.\n'''\n\nget_textBlob_score(text)","bead3845":"train = [\n    ('I love this sandwich.', 'pos'),\n    ('this is an amazing place!', 'pos'),\n    ('I feel very good about these beers.', 'pos'),\n    ('this is my best work.', 'pos'),\n    (\"what an awesome view\", 'pos'),\n    ('I do not like this restaurant', 'neg'),\n    ('I am tired of this stuff.', 'neg'),\n    (\"I can't deal with this\", 'neg'),\n    ('he is my sworn enemy!', 'neg'),\n    ('my boss is horrible.', 'neg')\n ]\n\ntest = [\n    ('the beer was good.', 'pos'),\n    ('I do not enjoy my job', 'neg'),\n    (\"I ain't feeling dandy today.\", 'neg'),\n    (\"I feel amazing!\", 'pos'),\n    ('Gary is a friend of mine.', 'pos'),\n    (\"I can't believe I'm doing this.\", 'neg')\n]","52b90c06":"from textblob.classifiers import NaiveBayesClassifier\ncl = NaiveBayesClassifier(train)","01cb7959":"cl.classify(\"This is an amazing library!\")","d88933fd":"prob_dist = cl.prob_classify(\"This one's a doozy.\")\nprob_dist.max(), round(prob_dist.prob(\"pos\"), 2), round(prob_dist.prob(\"neg\"), 2)","dbb3666e":"blob = TextBlob(\"I lost the battle. But I won the war. Happy ending? Maybe!\", classifier=cl)\nblob.classify()","212bc3e3":"for s in blob.sentences:\n    print(s)\n    print(s.classify())","475c356f":"cl.accuracy(test)","1fc8f575":"cl.show_informative_features(10) # Recall that these are the top word features from our original training set","a808127b":"import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\nsid = SentimentIntensityAnalyzer()\n\nvs = sid.polarity_scores(\"Vader is a cool sentiment analyzer that was built for social media.\"\n                         \"Exclamations connote positive sentiment!\"\n                         \"More exclamations mean more positivity!!!!!!\" #try adding more '!' to this line and rerunning this cell\n                         \"Is this a problematic assumption?\")\nprint(vs)","a6952a7f":"def get_vader_score(text):\n    # Polarity score returns dictionary\n    sentences = nltk.tokenize.sent_tokenize(text)\n    for sent in sentences:\n        ss = sid.polarity_scores(sent)\n        for k in sorted(ss):\n            print('{0}: {1}, '.format(k, ss[k]), end='')\n            print()\n        \nget_vader_score(text)","5c4b1277":"get_vader_score(text), get_textBlob_score(text)","0207a53f":"### VADER\n\nVADER or Valence Aware Dictionary and Sentiment Reasoner is an open-source sentiment analyzer with a pre-built positive\/negative\/neutral dictionary.\n\nThe VADER algorithm outputs sentiment scores to 4 classes of sentiments: positive, negative, neutral, and compound.\n\n* **positive sentiment**: compound score >= 0.05\n* **neutral sentiment**: (compound score > -0.05) and (compound score < 0.05)\n* **negative sentiment**: compound score <= -0.05\n\nThe pos, neu, and neg scores are ratios for proportions of text that fall in each category (so these should add up to 1). These are the most useful metrics if you want multidimensional measures of sentiment for a given sentence.\n\nThe compound score is computed by summing the valence scores of each word in the lexicon and then normalizing them to fall **between -1 (most extreme negative) and +1 (most extreme positive)**. This is the most useful metric if you want a single unidimensional measure of sentiment for a given sentence. Calling it a 'normalized, weighted composite score' is accurate.","161e85c9":"### Classifying Sentiment\n\n TextBlob also has a built-in sentiment analyzer. The sentiment property returns a named tuple of the form Sentiment(polarity, subjectivity). \n\n* The **polarity score** is a float within the range [-1.0, 1.0] $\\rightarrow$ 1.0 is very negative and 1.0 is very positive.\n\n* The **subjectivity score** is a float within the range [0.0, 1.0] $\\rightarrow$ 0.0 is very objective and 1.0 is very subjective; subjectivity is a measure of the extent to which something expressed is a subjective opinion or an objective fact.","4d49a5a8":"### Evaluating Classifiers\n\nTo compute the accuracy on our test set, use the accuracy(test_data) method.","5f88775e":"Word objects have a spellcheck() and Word.spellcheck() method that returns a list of (word, confidence) tuples with spelling suggestions.","0af603fe":"You can get the label probability distribution with the prob_classify(text) method.","f4e48de8":"### Noun phrases\n\n We can also use Textblob to extract noun phrases, including both proper and regular nouns.","cd2c2d23":"### N-grams\n\n TextBlob can generate any number of n-grams. The most common form is the bigram.","a15d4786":"### Tokenization\n\nTextBlob has convenient word and sentence tokenizers.","b9e11d2b":"How does VADER's built-in sentiment analyzer compare with TextBlob's built-in sentiment analyzer?","2a775285":"### Supervised Classification\n\n The textblob.classifiers module makes it simple to create custom classifiers.\n\nLet\u2019s create a custom sentiment analyzer.","a4e375ec":"### TextBlob\n\nTextBlob is a Python library for processing text data. You can treat TextBlob objects the same way you treat string objects in Python. The advantage of using Textblob is that it has many pre-built functions for parts-of-speech tagging, noun phrase extraction, and **sentiment analysis**.","583095ad":"Above, we calculated the sentiment for the entire TextBlob object. Can we create a function to calculate the sentiment for each word or sentence?","a2971368":"The advantage of this approach is that you can classify sentences within a TextBlob.","e58d3cfc":"### Parts-of-speech\n\n A TextBlob object can also classify the part-of-speech (POS) of each word. Tags include DT-determiner, JJ-adjective, NN-noun, etc. For a more detailed explainer on POS tags, see [https:\/\/www.clips.uantwerpen.be\/pages\/mbsp-tags](http:\/\/)\n \n Why would we be interested in POS tags when doing sentiment analysis?","1bde2d65":"### TextBlobs Are Like Python Strings\n\nWe can treat TextBlob objects just as we would any raw string object.","bd3411ba":"### Classifying Text\n\nCall the classify(text) method to use the classifier.","f593d6f1":"### Classifying TextBlobs\n Another way to classify text is to pass a classifier into the constructor of TextBlob and call its classify() method.","b2f3f351":"Which are the most informative word features of our classifier?","f7f74688":"### Spellcheck\n\nTextBlob can attempt to correct spelling errors. But it will not work with 100% accuracy, especially when dealing with texts from non-Western countries that have many foreign names."}}