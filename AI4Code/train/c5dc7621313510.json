{"cell_type":{"9b1bc9b0":"code","901e9d4c":"markdown"},"source":{"9b1bc9b0":"import pandas as pd\nimport numpy as np\n\n\nfrom sklearn.model_selection import train_test_split\n\n\nclass Generator:\n    def __init__(self, train_path, target, seed: int=1234, frac: float=0.8):\n    \n        self.df = pd.read_csv(train_path, index_col=\"Id\")\n        self.df = self.df.sample(frac=1, random_state=seed)\n        \n        split_index = int(self.df.shape[0]*frac)\n        self.train = self.df[0: split_index]\n        self.test = self.df[split_index:]\n        \n        print(f\"Train target: {self.train.shape[0]}\")\n        print(f\"Test target: {self.test.shape[0]}\")\n        mean = pd.concat([np.mean(self.train), np.mean(self.test)], axis=1)\n        std = pd.concat([np.std(self.train), np.std(self.test)], axis=1)\n        mean.columns = [\"train\", \"test\"]\n        std.columns = [\"train\", \"test\"]\n        print(f\"Mean: {mean}\")\n        print(f\"Std: {std}\")\n        \n\n        \ntrain_path = \"..\/input\/petfinder-pawpularity-score\/train.csv\"\ntarget = \"Pawpularity\"\n\ngenerator = Generator(train_path, target=target)\n\ngenerator.train.to_csv(\"train.csv\")\ngenerator.test.to_csv(\"test.csv\")\n","901e9d4c":"# Why OOF\n\nOOF stands for out-of fold. It uses for pre-summit summissions in cases of to check submission quality before use submission quota and to compare models quality."}}