{"cell_type":{"8d5bdbc4":"code","8bcaf441":"code","b3067c6c":"code","13e5112c":"code","6fa2347b":"code","551ec69d":"code","ec22cd49":"code","0572c7da":"code","7335757d":"code","fa6620c5":"code","132718ba":"code","e95a9ea2":"markdown","7dc1fa7d":"markdown"},"source":{"8d5bdbc4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8bcaf441":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport tensorflow.keras as keras\nimport matplotlib.pyplot as plt","b3067c6c":"fashion = tf.keras.datasets.fashion_mnist\n(train_x,train_y),(test_x,test_y) = fashion.load_data()\nprint(train_x.shape)\nprint(train_y.shape)\nprint(test_x.shape)\nprint(test_y.shape)","13e5112c":"plt.imshow(train_x[0],cmap = plt.cm.binary)\nplt.show()\nprint(\"The Target Variable for Shoes: \",train_y[0])","6fa2347b":"## For images dataset only and not labels:\n\ntrain_x = train_x\/255\ntest_x = test_x\/255\n\ntrain_x = train_x.reshape(60000,28,28,1)\ntest_x = test_x.reshape(10000,28,28,1)\n# Reshaping the data to fit the model perfectly\n\nprint(train_x.shape)\nprint(test_x.shape)\n","551ec69d":"model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(64,(3,3),activation='relu',input_shape=(28,28,1)),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(64,(3,3),activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(units=128,activation = tf.nn.relu),\n    tf.keras.layers.Dense(units=10, activation = tf.nn.softmax),\n    \n])\n\nmodel.compile(optimizer='adam',loss = 'sparse_categorical_crossentropy',\n    metrics = ['accuracy'])","ec22cd49":"model.fit(train_x,train_y,epochs=3)\n","0572c7da":"test_loss,accuracy = model.evaluate(test_x,test_y)\nprint(test_loss)\nprint(accuracy)","7335757d":"predictions = model.predict(test_x)","fa6620c5":"fashion = tf.keras.datasets.fashion_mnist\n(train_x,train_y),(test_x,test_y) = fashion.load_data()\nprint(test_x.shape)","132718ba":"#### IMPORTANT: For this cell to run test_x should be of the original shape that it came in\n## That is 28x28x1 (a grayscale image)\n\n\nplt.imshow(test_x[0],cmap = plt.cm.binary)\nplt.show()\n\n## As 9 is a target variable so,\n## if we got 9, it should print an \"Ankle Shoe\" \nif np.argmax(predictions[0]) == 9:\n    print(\"It is an Ankle Shoe\")","e95a9ea2":"*Now Let's try to build a model which will predict wheher image resemble to the Ankle Shoes or not*","7dc1fa7d":"Need to reshape the test data to check visually that predictions matches the test data or not.\n\n- Currently test data is just an array of(10,000*28*28*1)"}}