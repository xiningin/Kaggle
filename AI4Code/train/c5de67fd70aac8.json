{"cell_type":{"f4feec50":"code","917fc326":"code","513b9881":"code","2f17454d":"code","0d07b181":"code","aa0a5d67":"code","97ba75a9":"code","0da4f06a":"code","5ad5e0ac":"code","047d15cd":"code","c290b30f":"code","0e8c2174":"code","a6522459":"code","b7a4602d":"code","bf4f78fc":"code","d35d1331":"code","7c2fe272":"code","e6a809e3":"code","96380766":"code","ee89d7a2":"code","41b2a436":"code","bdaff886":"code","f0a714c7":"code","80af27ef":"code","42e096f9":"code","ec9aa1f3":"code","69a251a1":"code","76d70c7b":"code","d2659b1d":"code","770928fc":"code","2ca22613":"code","0ebc434a":"code","c961715c":"code","821c159c":"code","8ef1d668":"code","de7ddbb1":"code","d87c46d4":"code","ef79cb6c":"code","67b751b1":"code","8c94d3bb":"code","a61a85ac":"code","48b35578":"code","b5523cf4":"code","07c39849":"code","a4a06858":"code","0aa61c72":"code","150a59da":"code","191adf8b":"code","a700831a":"code","6c07b6f4":"code","6080c130":"code","eefb7a96":"code","a3c5abab":"code","a20055d8":"code","c5aee6b4":"code","f8b2b956":"code","1334b91d":"code","c7d9c41e":"code","1ceda894":"code","9c9e4ab9":"code","01aa63bf":"code","8ebfdacd":"code","ff91ccd8":"code","440ea924":"code","17430f62":"code","f5feb832":"code","68d7841d":"code","631bc4d0":"code","a8fa2129":"code","a14dbce3":"code","c2db19d2":"code","aa3d6d73":"code","2ca874b4":"code","804ace5c":"code","f409a8e7":"code","e895db94":"code","e2f0d99a":"code","08c97803":"code","c209028b":"code","e769314b":"code","2bc5215a":"code","fa3355e8":"code","02918fe4":"code","1039a4d5":"code","d6249470":"code","3d36f2fd":"code","bee76081":"code","64254c57":"code","3c201d52":"code","eeb5085a":"code","90298215":"code","f8e8af33":"code","dabd0d22":"code","e8535a06":"markdown","0e98f61f":"markdown","f8ce078b":"markdown","15a31037":"markdown","078fb764":"markdown","ba8408ed":"markdown","d0ff33f3":"markdown","439f67ce":"markdown","f72d8d52":"markdown","92e095c2":"markdown","2244ba64":"markdown","98a639c1":"markdown","eba97127":"markdown","13beaf2e":"markdown","d9c9aefa":"markdown","f777762b":"markdown","868475f8":"markdown","a3f11803":"markdown","c5f6d0d6":"markdown","f9701525":"markdown","515bdca4":"markdown","f774abfd":"markdown","46acc41f":"markdown","4291b097":"markdown","f79b93f3":"markdown","ae70d28d":"markdown","c1d9cc1e":"markdown","6de1d0bf":"markdown","566f8603":"markdown","46c6d61b":"markdown","7f6a5d7e":"markdown","34725201":"markdown","c910a1f2":"markdown","7bd2e25a":"markdown","2768f3a2":"markdown","f7e5cd0d":"markdown","de5dec3b":"markdown","bedf2981":"markdown","f3eea508":"markdown","1095d57e":"markdown","cc22ef7d":"markdown","b4daca0f":"markdown"},"source":{"f4feec50":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n%matplotlib inline\n\nfrom itertools import combinations\nfrom scipy.stats import ttest_ind\nimport statsmodels.api as sm\nimport scipy.stats as sst\nfrom collections import Counter\nimport re\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import PolynomialFeatures\n\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.ensemble import RandomForestRegressor # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn import metrics # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\nfilenames_list = []\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        filenames_list.append(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\nimport datetime","917fc326":"# \u0432\u0441\u0435\u0433\u0434\u0430 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0439\u0442\u0435 RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u0448\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b!\nRANDOM_SEED = 42","513b9881":"# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt","2f17454d":"def round_of_rating(number):\n    return np.round(number * 2) \/ 2\ndef new_ranking(row):\n    return np.round(5 - 4*(1-row['Ranking'])\/(1-max_ranking[row['City']]),1)*2\/2","0d07b181":"DATA_DIR = '\/kaggle\/input\/sf-dst-restaurant-rating\/'\ndf_train = pd.read_csv(DATA_DIR+'\/main_task.csv')\ndf_test = pd.read_csv(DATA_DIR+'kaggle_task.csv')\nsample_submission = pd.read_csv(DATA_DIR+'\/sample_submission.csv')\nwd = pd.read_excel('\/kaggle\/input\/module3\/world.xlsx')\ndf2 = pd.read_csv('\/kaggle\/input\/ptripadvisor\/pTA.csv')","aa0a5d67":"sample_submission.sample(3)","97ba75a9":"df_train.sample(3)","0da4f06a":"wd.sample(3)","5ad5e0ac":"df2.sample(3)","047d15cd":"# \u0412\u0410\u0416\u041d\u041e! \u0434\u0440\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndf_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\ndf_test['Rating'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Rating, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\n\ndf = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","c290b30f":"df.sample(3)","0e8c2174":"df.info()","a6522459":"# \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Restaurant_id. \u0415\u0441\u0442\u044c \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u044f. \ndf.Restaurant_id.value_counts()","b7a4602d":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430.\nplt.rcParams['figure.figsize'] = (13,8)\nds = df['Restaurant_id'].value_counts().hist(bins=100)\nds.set_xlabel('\u043a\u043e\u043b\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u043e\u0432')\nds.set_ylabel('\u0441\u0443\u043c\u043c\u0430 \u043f\u043e\u0432\u0442\u043e\u0440\u043e\u0432')\nds.set_title('\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0435 \u043f\u0438\u0437\u043d\u0430\u043a\u0430 Restaurant_id')","bf4f78fc":"# \u042d\u0442\u043e\u0442 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c, \u043e\u0442\u0434\u0435\u043b\u0438\u0432 \"id_\" \u043e\u0442 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u0447\u0430\u0441\u0442\u0438. df['Restaurant_id'] = df['Restaurant_id'].apply(lambda x: int(x[3:])),\n# \u043d\u043e \u044d\u0442\u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0435 \u043f\u043e\u043c\u043e\u0433\u043b\u0438 \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c.","d35d1331":"# \u0415\u0441\u0442\u044c \u0435\u0449\u0435 \u043e\u0434\u043d\u0430 \u043a\u043e\u043b\u043e\u043d\u043a\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0435\u0441\u0442\u044c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 id \u0440\u0435\u0441\u0442\u0430\u0440\u0430\u043d\u043e\u0432.\ndf['ID_TA'].value_counts()","7c2fe272":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0434\u0438\u0433\u0435\u0442\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c ID_TA\ndf['ID_TA'] = df['ID_TA'].apply(lambda x: float(x[1:]))","e6a809e3":"# \u0417\u0434\u0435\u0441\u044c \u0442\u043e\u0436\u0435 \u0435\u0441\u0442\u044c \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u044f, \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043a\u0430\u043a \u043e\u043d\u0438 \u0441\u043e\u043f\u043e\u0441\u0442\u043e\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0441\u043e \u0441\u0441\u044b\u043b\u043a\u0430\u043c\u0438 \u043d\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b.\ndf['URL_TA'].value_counts()","96380766":"# \u0418\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043c\u044b \u0438\u043c\u0435\u0435\u043c \u0434\u0435\u043b\u043e \u0441 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u0430\u043c\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432. \u041f\u0440\u0438\u0447\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 Ranking \u0443 \u043d\u0438\u0445 \u043d\u0435 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435.\ndf[(df['URL_TA'].map(df['URL_TA'].value_counts()) == 2)].sort_values(by='ID_TA')","ee89d7a2":"# \u0414\u0443\u043f\u043b\u0438\u043a\u0430\u0442\u044b \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u0432 \u041c\u0430\u0434\u0440\u0438\u0434\u0435, \u043d\u043e \u0435\u0441\u0442\u044c \u0438 \u0432 \u0412\u0430\u0440\u0448\u0430\u0432\u0435.\ndf[(df['URL_TA'].map(df['URL_TA'].value_counts()) == 2)].sort_values(by='ID_TA').City.value_counts()","41b2a436":"# \u0412 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 URL_TA \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u044c\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430, \u043e ID_TA \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430, \u0430 \u0442\u0430\u043a \u0436\u0435 ID \u0433\u043e\u0440\u043e\u0434\u0430. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430.\ndf['City_url_ta'] = df.URL_TA.str.findall(r\"g([\\s\\S]+?)-\").str[0]","bdaff886":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Ranking.\ndf['Ranking'].hist(bins=100)","f0a714c7":"# \u041d\u0430 \u044d\u0442\u043e\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0435 \u0445\u043e\u0440\u043e\u0448\u043e \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u043d\u0430\u0440\u044f\u043c\u0443\u044e \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u043a\u043e\u043b\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435.\nfor x in (df['City'].value_counts())[0:10].index:\n    df['Ranking'][df['City'] == x].hist(bins=100)\nplt.show()","80af27ef":"# \u0412\u0432\u0435\u0434\u0435\u043c \u043d\u043e\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435.\ndef ranking(df):\n    reCount = df.City.value_counts()\n    restCount = dict(reCount)\n    df['DB_Restaurants_Count'] = df['City'].map(restCount)\n    \n    # \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0442\u0430\u043a, \u0447\u0442\u043e \u0431\u044b \u0440\u0430\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043b \u043e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u043d\u0435\u043c.\n    mean_per_city = df.groupby('City')['Ranking'].mean()\n    df['mean_ranking_per_city'] = df['City'].apply(lambda x: mean_per_city[x])\n    max_per_city = df.groupby('City')['Ranking'].max()\n    df['max_ranking_per_city'] = df['City'].apply(lambda x: max_per_city[x])\n    df['standard_ranking'] = (df['Ranking'] - df['mean_ranking_per_city']) \/ df['max_ranking_per_city']\n    \n    return df","42e096f9":"ranking(df).sample(5)","ec9aa1f3":"df.sample(5)","69a251a1":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0442\u0435\u0445 \u0436\u0435 \u0433\u043e\u0440\u043e\u0434\u043e\u0432\nfor x in (df['City'].value_counts())[0:10].index:\n    df['standard_ranking'][df['City'] == x].hist(bins=100)\nplt.show()","76d70c7b":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 Rating \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c.\nfig, ax = plt.subplots(figsize = (15, 5))\n\nsns.boxplot(x='City', y='Rating',data=df.loc[\n    df.loc[:, 'City'].isin(df.loc[:, 'City'].value_counts().index[:])\n],ax=ax)\n\nplt.xticks(rotation=45)\nax.set_title('Boxplot for City')\n\nplt.show()","d2659b1d":"# \u041c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0431\u044b \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u044d\u0442\u0438 \u0433\u043e\u0440\u043e\u0434\u0430. \u043d\u043e \u0432 \u043a\u043e\u043d\u0446\u0435 \u043a\u043e\u043d\u0446\u043e\u0432 \u0434\u043b\u044f \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043e\u043d\u0438 \u043d\u0435 \u043f\u0440\u0438\u0433\u043e\u0434\u0438\u043b\u0438\u0441\u044c\n# df['is_Rome'] = df['City'].apply(lambda x: 1 if x == 'Rome' else 0)\n# df['is_Madrid'] = df['City'].apply(lambda x: 1 if x == 'Helsinki' else 0)","770928fc":"# \u041c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0431\u044b \u0442\u0430\u043a \u0436\u0435 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0431\u044b\u043b\u043e \u0431\u044b \u043e\u0442\u0440\u0430\u0436\u0435\u043d\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0433\u043e\u0440\u043e\u0434 \u0441\u0442\u043e\u043b\u0438\u0446\u0435\u0439 \u0438\u043b\u0438 \u043d\u0435\u0442.\ndef capital(df):\n    Capitals = [\n        'Athens', 'Bratislava', 'London', 'Paris', 'Madrid', 'Berlin', 'Rome',\n        'Prague', 'Lisbon', 'Vienna', 'Amsterdam', 'Brussels', 'Stockholm',\n        'Budapest', 'Warsaw', 'Dublin', 'Copenhagen', 'Edinburgh', 'Oslo',\n        'Helsinki', 'Luxembourg', 'Ljubljana'\n    ]\n    df['is_capital'] = df['City'].apply(lambda x: 1 if x in Capitals else 0)\n    return df","2ca22613":"# \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u043f\u043e \u0440\u0430\u043d\u043a\u0430\u043c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u043e\u0434\u043d\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435. \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u0441\u0430\u043c\u044b\u0439\n# \u0442\u0438\u043f\u0438\u0447\u043d\u044b\u0439 \u0441\u043b\u0443\u0447\u0432\u0439 - \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u041c\u0430\u0434\u0440\u0438\u0434\u0430.\nplt.figure(figsize = (5,5))\nsns.jointplot(data = df[(df.City == 'Madrid') & (df.Rating > 0)], x = 'Ranking', y = 'Rating', kind = 'kde')","0ebc434a":"# \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 Ranking \u0438 Raiting \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u0435\u0442 \u043c\u043e\u0440\u0434\u0443 \u043a\u043e\u043d\u044f. \u041a\u043e\u0433\u0434\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u0441 \u043d\u0430\u0438\u0432\u044b\u0439\u0448\u0438\u043c Ranking, \u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0442 4-4.5\n# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 Ranking \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 Rating\nmax_ranking = df.groupby(['City']).Ranking.max()\n\ndf['rating_by_ranking'] = df.apply(new_ranking, axis = 1)\nrating_by_ranking = df['rating_by_ranking']\nrating_by_ranking.name = 'rating_by_ranking'","c961715c":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u0443\u044e \u043c\u0430\u0442\u0440\u0438\u0446\u0443.\nax = sns.heatmap(df.corr(),annot = True, cmap = 'coolwarm')","821c159c":"# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435 \u0433\u043e\u0440\u043e\u0434\u0430.\npopulation = {\n        'Paris': 2190327,\n        'Stockholm': 961609,\n        'London': 8908081,\n        'Berlin': 3644826,\n        'Munich': 1456039,\n        'Oporto': 237591,\n        'Milan': 1378689,\n        'Bratislava': 432864,\n        'Vienna': 1821582,\n        'Rome': 4355725,\n        'Barcelona': 1620343,\n        'Madrid': 3223334,\n        'Dublin': 1173179,\n        'Brussels': 179277,\n        'Zurich': 428737,\n        'Warsaw': 1758143,\n        'Budapest': 1752286,\n        'Copenhagen': 615993,\n        'Amsterdam': 857713,\n        'Lyon': 506615,\n        'Hamburg': 1841179,\n        'Lisbon': 505526,\n        'Prague': 1301132,\n        'Oslo': 673469,\n        'Helsinki': 643272,\n        'Edinburgh': 488100,\n        'Geneva': 200548,\n        'Ljubljana': 284355,\n        'Athens': 664046,\n        'Luxembourg': 115227,\n        'Krakow': 769498\n    }","8ef1d668":"def city(df):\n    \n    # \u0418 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0434\u0432\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430. \u041d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043d\u0430 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435.\n    df['Population'] = df['City'].map(population)\n    # df['Restaurants_density'] = df['DB_Restaurants_Count'] \/ df['Population'] - \u043d\u0435 \u0443\u043b\u0443\u0447\u0448\u0438\u043b \u043c\u043e\u0434\u0435\u043b\u044c\n    return df ","de7ddbb1":"city(df).sample(3)","d87c46d4":"df['Price Range'].value_counts()","ef79cb6c":"# \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438 \u043c\u0435\u043d\u044f\u0435\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0432 \u044f\u0447\u0435\u0439\u043a\u0430\u0445 \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430. \ndef price(df):\n    prices = {'$': 1, '$$ - $$$': 2, '$$$$': 3, np.nan: 0}\n    df['Price Range'] = df['Price Range'].replace(to_replace=prices)\n    return df","67b751b1":"price(df).sample(5)","8c94d3bb":"def cuisine (df):\n    # \u041f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u0432\u0441\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043a\u0443\u0445\u043e\u043d\u044c \u043a \u043e\u0434\u043d\u043e\u043c\u0443 \u0444\u043e\u0440\u043c\u0430\u0442\u0443.\n    df['Cuisine Style'] = df['Cuisine Style'].str.lower()\n\n    # \u0414\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f.\n    cuisineStyle = set()\n    df['Cuisine Style'].fillna('unknown_cuisine', inplace=True)\n    cuisines = df['Cuisine Style'].to_list()\n\n    # \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0441\u0435\u0442 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439.\n    # \u0410 \u0442\u0430\u043a \u0436\u0435 \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a\n    for cuisine in cuisines:\n        cuisine = re.findall(r\"'([\\s\\S]+?)'\", cuisine)\n        for j in cuisine:\n            cuisineStyle.add(j)\n    \n    for item in cuisineStyle:\n        df[item] = df['Cuisine Style'].apply(lambda x: 1 if item in x else 0)\n        df['cuisine'] = df['Cuisine Style'].apply(lambda x: 1 if x == 'None' else len(x.split(',')))\n    return df","a61a85ac":"cuisine(df).sample(3)","48b35578":"def load_best(df_input, best_input):\n    # \u041e\u0431\u044a\u0435\u0434\u0435\u043d\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435.\n    df2 = pd.merge(df_input, best_input, on='City', how='left')\n    return df2","b5523cf4":"df = load_best(df, wd)","07c39849":"# firsPage = df['URL_TA']\n# firsPageUrl = df['URL_TA'].to_dict()\n# firsPageUrl\n# f = open(\"ffirsPageUrl.pkl\",\"wb\")\n# pickle.dump(firsPageUrl,f)\n# f.close()\n\n\n# def getRaitings(r_id, url):\n#     raitingsList = []\n#     datesList = []\n#     raitingsAutoD = {}\n#     r = requests.get(url)\n#     soup = BeautifulSoup(r.content)\n#     nextLink = soup.find('link', rel='next')\n#     if nextLink:\n#         nextPage = nextLink.get('href')\n#         if 'Restaurant_' in nextPage:\n#             raiting = soup.find(\n#                     'div', class_='listContainer hide-more-mobile').find_all(\n#                         'span', {'class': 'ui_bubble_rating'})\n#             dates = soup.find(\n#                     'div', class_='listContainer hide-more-mobile').find_all(\n#                         'span', class_='ratingDate')\n#             raitNb = soup.find('span', class_ = '_3Wub8auF').get_text()\n#             for i in raiting:\n#                 i = i.get('class')\n#                 raitingsList.append(i[1][7:8])\n#             for j in dates:\n#                 j = j.text\n#                 datesList.append(j[9:])\n#             raitingsAutoD[r_id] = datesList, raitingsList, raitNb\n#             return raitingsAutoD\n#         else:\n#             raitingsList.append(\"Restaurant not found\")\n#             raitingsAutoD[r_id] = raitingsList\n#             return raitingsAutoD\n#     else:\n#         raiting = soup.find(\n#                 'div', class_='listContainer hide-more-mobile').find_all(\n#                     'span', {'class': 'ui_bubble_rating'})\n#         dates = soup.find(\n#                 'div', class_='listContainer hide-more-mobile').find_all(\n#                     'span', class_='ratingDate')\n#         raitNb = soup.find('span', class_ = '_3Wub8auF').get_text()\n#         for i in raiting:\n#             i = i.get('class')\n#             raitingsList.append(i[1][7:8])\n#         for j in dates:\n#             j = j.text\n#             datesList.append(j[9:])\n#         raitingsAutoD[r_id] = datesList, raitingsList, raitNb\n#         return raitingsAutoD\n\n# ddc = {}\n# link = \"https:\/\/www.tripadvisor.com\"\n# for k, v in firsPageUrl.items():\n#     ddc[k] = getRaitings(k, link+v)\n\n# f = open(\"parsedSite.pkl\",\"wb\")\n# pickle.dump(parsedSite,f)\n# f.close()","a4a06858":"def load_TA(df_input, ta_input):\n    # \u0412\u043b\u0438\u0432\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u043d\u0430\u0448 \u0434\u0430\u0442\u0430 \u0444\u0440\u0435\u0439\u043c.\n    df = pd.merge(df_input, ta_input, on='URL_TA', how ='left')\n    return df","0aa61c72":"df = load_TA(df, df2)","150a59da":"df.sample(5)","191adf8b":"plt.rcParams['figure.figsize'] = (10.0, 5.0)\nax1 = df.plot.scatter(x='Number of Reviews',\n                      y='standard_ranking')\nax1.xaxis.get_label().set_visible(True)","a700831a":"def number_of_reviews(df):\n\n    # \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u044d\u0442\u043e\u043c\u0443 \u043d\u0430\u0431\u0434\u043b\u044e\u0434\u0435\u043d\u0438\u044e, \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n    df.standard_ranking = round(df.standard_ranking, 2)\n    df['Number of Reviews'] = df.groupby(['standard_ranking'])['Number of Reviews'].apply(lambda x: x.fillna(x.mean()))\n    return df","6c07b6f4":"def edit_number_of_reviews(input_df):\n    # all about number_of_reviews\n    \n    df = input_df.copy()\n    scaler = StandardScaler()\n    \n        # \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0440\u0430\u043d\u043a\u0438\u043d\u0433 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430\n    mean_per_city = df.groupby('City')['Number of Reviews'].mean()\n    df['mean_Number_of_Reviews_per_city'] = df['City'].apply(lambda x: mean_per_city[x])\n\n    #  \u043c\u0430\u0441\u043c\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u043d\u043a\u0438\u043d\u0433 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430\n    max_per_city = df.groupby('City')['Number of Reviews'].max()\n    df['max_Number_of_Reviews_per_city'] = df['City'].apply(lambda x: max_per_city[x])\n\n    # \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f\n    df['stand_Number_of_Reviews'] = (df['Ranking'] - df['mean_Number_of_Reviews_per_city']) \/ df['max_Number_of_Reviews_per_city']\n    \n    # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435\n    try:\n        df['reviews_per_each_person'] = df['Number of Reviews'] \/ df['population']\n    except:\n        pass\n\n    # \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c\n    reviews_per_city = df.groupby(by='City')['Number of Reviews'].mean()\n    df['reviews_per_city'] = df['City'].apply(lambda x: reviews_per_city[x])\n    \n    try:\n        df['reviews_per_each_person'] = scaler.fit_transform(df[['reviews_per_each_person']])\n    except:\n        pass\n    \n    return df","6080c130":"number_of_reviews(df).sample(2)","eefb7a96":"df['Number of Reviews'].isna().sum()","a3c5abab":"plt.rcParams['figure.figsize'] = (10.0, 5.0)\nax1 = df.plot.scatter(x='Number of Reviews',\n                      y='Nr_of_Reviews',\n                      c='standard_ranking',\n                      colormap='viridis_r')\nax1.xaxis.get_label().set_visible(True)","a20055d8":"def date_1(df):\n    df['date_1'] = pd.to_datetime(df.date_1)\n\n    today = pd.to_datetime(1605916800, unit='s')\n    df['date_diff_newest'] = abs(df.date_1 - today).dt.days\n    # \u041f\u043e\u0441\u043c\u0438\u0442\u0430\u0435\u043c \u0440\u0430\u0437\u043d\u0432\u0446\u0443 \u0432\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432.\n    df['Calculated_Time_dif'] = round(df.Ranking\/df['date_diff_newest'].max(), 2)\n    return df","c5aee6b4":"date_1(df).sample(5)","f8b2b956":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430, \u043e\u0442 \u0440\u0430\u043d\u0433\u0430 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0442\u0437\u044b\u0432\u043e\u0432. \u0412\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u0437\u044b\u0432\u0430\n# \u0438\u043c\u0435\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u0440\u0430\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430.\nplt.rcParams['figure.figsize'] = (10.0, 5.0)\nax1 = df.plot.scatter(y='date_diff_newest',\n                      x='Number of Reviews',\n                      c='standard_ranking',\n                      colormap='viridis_r')\nax1.xaxis.get_label().set_visible(True)","1334b91d":"#  \u041a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e. \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0438\u043c\u0435\u043b \u043f\u043b\u043e\u0445\u043e\u0435 \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u043d\u0430 Public Score.\n# \u041d\u0435 \u0431\u0443\u0434\u0435\u043c \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0435\u0433\u043e \u0432 \u043c\u043e\u0434\u0435\u043b\u044c.\ndef review_stars(df):\n    review_stars = set()\n    df['Review_stars'].fillna('None', inplace=True)\n    df.isnull().sum()\n    stars = df['Review_stars'].to_list()\n\n    for star in stars:\n        star = re.findall(r\"'([\\s\\S]+?)'\", star)\n        for j in star:\n            review_stars.add(j)\n    len(review_stars)\n\n    for item in review_stars:\n        df[item] = df['Review_stars'].apply(lambda x: 1 if item in x else 0)\n\n    df['star'] = df['Review_stars'].apply(lambda x: 1 if x == 'None' else len(x.split(',')))\n    return df","c7d9c41e":"review_stars(df).sample(5)","1ceda894":"# \u041f\u0440\u0438\u0441\u0432\u043e\u0438\u043c \u043f\u0443\u0441\u0442\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c \u0447\u0438\u0441\u043b\u043e 101 - \u0437\u0430 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u043c\u0438 \u043f\u0435\u0440\u0432\u044b\u0445 100 \u043c\u0435\u0441\u0442.\ndef best_cities(df):\n    df.Rank.fillna(101, inplace=True)\n    df['Place'] = df['Place'].fillna(df['Place'].mean())\n    df['Programming'] = df['Programming'].fillna(df['Programming'].mean())\n    df['Product'] = df['Product'].fillna(df['Product'].mean())\n    df['People'] = df['People'].fillna(df['People'].mean())\n    df['Prosperity'] = df['Prosperity'].fillna(df['Prosperity'].mean())\n    df['Promotion'] = df['Promotion'].fillna(df['Promotion'].mean())\n    return df","9c9e4ab9":"best_cities(df).sample(2)","01aa63bf":"# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0435\u0449\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\ndef another_var(df):\n    mean_rews_by_city = round((df.groupby(['City'])['Number of Reviews'].sum() \/\n                               df.groupby(['City'])['Ranking'].max()), 2)\n    mean_rews = df.City.apply(lambda x: mean_rews_by_city[x])\n    mean_rews.name = 'Mean_rews'\n    df = pd.concat([df, mean_rews],axis=1)\n\n    df['Rating_RevNr2'] = df.Ranking * df['Number of Reviews']+1\n    df['Rating_RevNr'] = df.standard_ranking * df['Number of Reviews']+1\n    df['rel_numberOfRws'] = (df.standard_ranking)\/(df.Ranking)\n    return df","8ebfdacd":"df = another_var(df)","ff91ccd8":"another_var(df).sample(2)","440ea924":"# \u0412\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0444\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438, \u043e \u043a\u043e\u0442\u043e\u0440\u044b\u0445 df.info() \u043d\u0430\u043c \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0441\u043a\u0430\u0437\u0430\u043b.\n# \u0422\u0430\u043a \u0436\u0435, \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0434\u0430\u0442\u044b \u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043e\u0442\u0437\u044b\u0432\u043e\u0432.\ndf.Reviews.value_counts()","17430f62":"def reviews(df):\n    # \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438\n    df['Reviews'] = df['Reviews'].apply(lambda x: None if x == '[[], []]' else x)\n\n    # \u0441\u043f\u0435\u0440\u0432\u0430 \u0432\u044b\u043f\u0438\u0448\u0435\u043c \u0440\u0435\u0432\u044c\u044e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\n    df['review_1'] = df['Reviews'].str.findall(r\"'([\\w\\s]*)'\").str[0]\n    df['review_2'] = df['Reviews'].str.findall(r\"'([\\w\\s]*)'\").str[1]\n\n    # \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0441 \u0434\u0430\u0442\u0430\u043c\u0438\n    df['date_a'] = df['Reviews'].str.findall(r\"'([\\d\\\/]*)'\").str[0]\n    df['date_b'] = df['Reviews'].str.findall(r\"'([\\d\\\/]*)'\").str[1]\n\n    df['Reviews'].str.findall(r\"'([\\d\\\/]*)'\").str[1].str.len().value_counts(dropna=False)\n\n    # \u0441\u043e\u0432\u043e\u043a\u0443\u043f\u043d\u043e, \u043c\u044b \u0438\u043c\u0435\u0435\u043c \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0438 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a, \u0433\u0434\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0435 \u0432\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 \u0434\u0430\u0442.\n    # \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0440\u0430\u0431\u043e\u0442\u044b, \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u043a\u0430 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0438 \u043d\u0435\u0444\u043e\u0440\u043c\u0430\u0442\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043a\u0430\u043a\u0438\u043c \u043d\u0438\u0431\u0443\u0434\u044c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c.\n    df.loc[(df.date_a.str.len() < 10) | (df.date_a.isna()), 'date_a'] = None\n    df.loc[(df.date_b.str.len() < 10) | (df.date_b.isna()), 'date_b'] = None\n\n    ## \u0438 \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043c \u0432\u0441\u0451 \u043a \u043f\u0440\u0438\u0432\u044b\u0447\u043d\u043e\u043c\u0443 datetime \u0432\u0438\u0434\u0443\n    df.date_a = pd.to_datetime(df.date_a)\n    df.date_b = pd.to_datetime(df.date_b)\n\n    df['is_eve'] = ((df.date_a.dt.month_name().isin(['December', 'January'])) | (df.date_b.dt.month_name().isin(['December', 'January']))).astype(int)\n    df['year_a'] = df.date_a.dt.year\n    df['year_b'] = df.date_b.dt.year\n    df['date_diff'] = abs(df.date_a - df.date_b).dt.days\n\n    df['review_1_len'] = df.review_1.str.len()\n    df['review_2_len'] = df.review_2.str.len()\n    \n    df['review_1_len'] = df.review_1_len.fillna(0)\n    df['review_2_len'] = df.review_2_len.fillna(0)\n    \n    df['year_a'] = df.year_a.fillna(0)\n    df['year_b'] = df.year_b.fillna(0)\n    \n    df['date_diff'] = df.date_diff.fillna(0)\n    \n    return df","f5feb832":"df = reviews(df)","68d7841d":"df.sample(5)","631bc4d0":"### \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0432 \u043a\u0430\u043a\u043e\u0439 \u0443 \u043d\u0430\u0441 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u0434\u043b\u0438\u043d \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432\ndf = reviews(df)\ndf.review_2.str.len().plot(kind='hist', bins=40);","a8fa2129":"df.sample(5)","a14dbce3":"df_train['Rating'].value_counts(ascending=True).plot(kind='barh')","c2db19d2":"df_train['Ranking'][df_train['Rating'] == 5].hist(bins=100)","aa3d6d73":"df_train['Ranking'][df_train['Rating'] < 4].hist(bins=100)","2ca874b4":"#\u041d\u0430 \u0432\u0441\u044f\u043a\u0438\u0439 \u0441\u043b\u0443\u0447\u0430\u0439 \u043f\u0435\u0440\u0435\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0435\u0449\u0435 \u0440\u0430\u0437\nDATA_DIR = '\/kaggle\/input\/sf-dst-restaurant-rating\/'\ndf_train = pd.read_csv(DATA_DIR+'\/main_task.csv')\ndf_test = pd.read_csv(DATA_DIR+'kaggle_task.csv')\nsample_submission = pd.read_csv(DATA_DIR+'\/sample_submission.csv')\nwd = pd.read_excel('\/kaggle\/input\/module3\/world.xlsx')\ndf2 = pd.read_csv('\/kaggle\/input\/ptripadvisor\/pTA.csv')\n\ndf_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\ndf_test['Rating'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Rating, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\n\ndf = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","804ace5c":"def preproc_data(df_input):\n    '''includes several functions to pre-process the predictor data.'''\n        \n    df = df_input.copy()\n    \n    ############################## 2.1 Restaurant_id  ###########################\n    df['Restaurant_id'] = df['Restaurant_id'].apply(lambda x: int(x[3:]))\n    \n    ############################## 2.2 ID_TA  ################################### \n    df['ID_TA'] = df['ID_TA'].apply(lambda x: int(x[1:]))\n    \n    ############################## 2.3 URL_TA  ################################### \n    df['City_url_ta'] = df.URL_TA.str.findall(r\"g([\\s\\S]+?)-\").str[0]\n    \n    ############################## 2.4 Ranking  #################################      \n    df = ranking(df)\n    \n    ############################## 2.5 City   ###################################\n    df = city(df)\n    df = capital(df)\n    \n    ############################## 2.6 Price Range   ############################\n    df = price(df)\n    \n    ############################## 2.7 Cuisine style ############################\n    df = cuisine(df)\n    \n    ############################## 2.8 Number of Reviews  #######################\n    df = number_of_reviews(df)\n    df = edit_number_of_reviews(df)\n    \n    ############################## \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445  ##################\n    df = load_best(df, wd)\n    df = load_TA(df, df2)\n    \n    ############################## 2.10 Date_1  #################################\n    df = date_1(df)\n    \n    \n    ######## 2.12 Place, Programming, Product, People, Prosperity, Promotion  ###\n    df = best_cities(df)\n\n    \n    ########################## 2.13 Another variables  ##########################\n    df = another_var(df)\n    \n    ########################## 2.14 reviews  ####################################\n    df = reviews(df)\n    \n    return df","f409a8e7":"df_preproc = preproc_data(df)\ndf_preproc.sample(2)","e895db94":"df_preproc = df_preproc.drop(columns=[\n 'Cuisine Style',\n 'City',\n 'Restaurant_id',\n 'date_1',\n 'date_2',\n 'date_3',\n 'date_4',\n 'date_5',\n 'date_6',\n 'date_7',\n 'date_8',\n 'date_9',\n 'date_10',\n 'Time_dif1',\n 'Time_dif2',\n 'Time_dif3',\n 'Time_dif4',\n 'Time_dif5',\n 'Time_dif6',\n 'Time_dif7',\n 'Time_dif8',\n 'Time_dif9',\n 'Time_dif10',\n 'Nr_of_Reviews',\n 'date_diff_newest',\n 'Review_stars',\n 'Reviews', \n 'max_ranking_per_city', \n 'mean_ranking_per_city',\n 'date_a', \n 'date_b', \n 'review_1', \n 'review_2',\n])","e2f0d99a":"plt.rcParams['figure.figsize'] = (50.0, 50.0)\nax = sns.heatmap(df_preproc.corr(),annot = True, cmap = 'coolwarm')","08c97803":"object_columns = df_preproc.select_dtypes(include='object').columns\ndf_preproc.drop(object_columns, axis = 1, inplace=True)","c209028b":"df_preproc.info()","e769314b":"# \u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0447\u0430\u0441\u0442\u044c\ntrain_data = df_preproc.query('sample == 1').drop(['sample'], axis=1)\ntest_data = df_preproc.query('sample == 0').drop(['sample'], axis=1)\n\ny = train_data.Rating.values            # \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442\nX = train_data.drop(['Rating'], axis=1)","2bc5215a":"# \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435 train_test_split \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n# \u0432\u044b\u0434\u0435\u043b\u0438\u043c 20% \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 test_size)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)","fa3355e8":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\ntest_data.shape, train_data.shape, X.shape, X_train.shape, X_test.shape","02918fe4":"# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438:\nfrom sklearn.ensemble import RandomForestRegressor # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn import metrics # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438","1039a4d5":"# \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043c\u043e\u0434\u0435\u043b\u044c (\u041d\u0410\u0421\u0422\u0420\u041e\u0419\u041a\u0418 \u041d\u0415 \u0422\u0420\u041e\u0413\u0410\u0415\u041c)\nmodel = RandomForestRegressor(n_estimators=100, verbose=1, n_jobs=-1, random_state=RANDOM_SEED)","d6249470":"# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\nmodel.fit(X_train, y_train)\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e y_pred\ny_pred = model.predict(X_test)\ny_pred = round_of_rating(y_pred) ","3d36f2fd":"# \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (y_pred) \u0441 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 (y_test), \u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u043d\u0438 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f\n# \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f Mean Absolute Error (MAE) \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445.\nprint('MAE:', metrics.mean_absolute_error(y_test, y_pred))","bee76081":"# \u0432 RandomForestRegressor \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0430\u043c\u044b\u0435 \u0432\u0430\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nplt.rcParams['figure.figsize'] = (10,10)\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(15).plot(kind='barh')","64254c57":"# test_data = test_data.sort_values(by=['Restaurant_id'])\ntest_data.head(10)","3c201d52":"test_data = test_data.drop(['Rating'], axis=1)","eeb5085a":"sample_submission","90298215":"predict_submission = model.predict(test_data)\npredict_submission = np.round(predict_submission*2) \/ 2","f8e8af33":"predict_submission","dabd0d22":"sample_submission['Rating'] = predict_submission\nsample_submission.to_csv('submission4.csv', index=False)\nsample_submission.head(10)","e8535a06":"**\u041f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c \u043a\u0430\u043a \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u0430\u0448\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435, \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u0442\u0435\u0441\u0442 \u0438 \u0442\u0440\u0435\u0439\u043d, \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438. \n\u042d\u0442\u043e \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u043a\u0430\u043a \u0445\u043e\u0440\u043e\u0448\u043e \u043d\u0430\u0448\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u0434\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 submissiona \u043d\u0430 kaggle.**","0e98f61f":"# DATA","f8ce078b":"### 2.1 Restaurant_id","15a31037":"### [\u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432](https:\/\/ru.wikipedia.org\/wiki\/\u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f)\n\u041d\u0430 \u044d\u0442\u043e\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0435 \u0443\u0436\u0435 \u0441\u0435\u0439\u0447\u0430\u0441 \u0432\u044b \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c, \u043a\u0430\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441\u0432\u044f\u0437\u0430\u043d\u044b \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439 \u0438 \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439.","078fb764":"## 2.12 Place, Programming, Product, People, Prosperity, Promotion\n\n![image.png](attachment:image.png)","ba8408ed":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439","d0ff33f3":"## 2.11 review_stars\n\n\u041e\u0446\u0435\u043d\u043a\u0438 \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 10 \u043e\u0442\u0437\u044b\u0432\u043e\u0432.","439f67ce":"![image.png](attachment:image.png)\n# Predict TripAdvisor Rating\n## \u0412 \u044d\u0442\u043e\u043c \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u043d\u0430\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u043e\u0438\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0432\u00a0TripAdvisor\n### \u0414\u0430\u043d\u043d\u044b\u0435:\n\n\u041f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0434\u0435\u0441\u044f\u0442\u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e:\n\n- Restaurant_id \u2014 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \/ \u0441\u0435\u0442\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432;\n- City \u2014 \u0433\u043e\u0440\u043e\u0434, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d;\n- Cuisine Style \u2014 \u043a\u0443\u0445\u043d\u044f \u0438\u043b\u0438 \u043a\u0443\u0445\u043d\u0438, \u043a \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043d\u0435\u0441\u0442\u0438 \u0431\u043b\u044e\u0434\u0430, \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u043c\u044b\u0435 \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435;\n- Ranking \u2014 \u043c\u0435\u0441\u0442\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0439 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d \u0441\u0440\u0435\u0434\u0438 \u0432\u0441\u0435\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0441\u0432\u043e\u0435\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430;\n- Rating \u2014 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c TripAdvisor (\u0438\u043c\u0435\u043d\u043d\u043e \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c);\n- Price Range \u2014 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u0446\u0435\u043d \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435;\n- Number of Reviews \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435;\n- Reviews \u2014 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0434\u0432\u0443\u0445 \u043e\u0442\u0437\u044b\u0432\u0430\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0442\u0441\u044f \u043d\u0430 \u0441\u0430\u0439\u0442\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430;\n- URL_TA \u2014 URL \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043d\u0430 TripAdvosor;\n- ID_TA \u2014 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 TripAdvisor.","f72d8d52":"\u041d\u0438\u0436\u0435 \u0447\u0438\u0441\u043b\u043e -  \u0432\u044b\u0448\u0435 \u0440\u0430\u043d\u0433. \u041e\u043d \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u043c\u0435\u0436\u0434\u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\u043c\u0438 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435. \u0422.\u0435. \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435 \u0435\u0441\u0442\u044c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d \u0441 \u043d\u0430\u0438\u0432\u044b\u0441\u0448\u0438\u043c \u0440\u0430\u043d\u0433\u043e\u043c, \u043d\u043e \u043d\u0435 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u043c. ","92e095c2":"## 2.10 Date_1\n\nDate_1 - \u0434\u0430\u0442\u0430 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0432\u0435\u0436\u0435\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430. \u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c, \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u043e\u0442\u0437\u044b\u0432\u043e\u0432.\n","2244ba64":"\u0421\u043c\u0435\u0449\u0435\u043d\u0438\u0435 \u0438\u0441\u0447\u0435\u0437\u043b\u043e.","98a639c1":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430","eba97127":"### 2.3 URL_TA","13beaf2e":"# \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0444\u0430\u0439\u043b\u044b","d9c9aefa":"### 2. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0443 \u043d\u0430\u0441 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c\u0438.","f777762b":"\u0421\u0440\u0430\u0437\u0443 \u0437\u0430\u043c\u0435\u0442\u0440\u043e \u0432\u044b\u0431\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u0420\u0438\u043c\u0430. \u0410 \u0442\u0430\u043a \u0436\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u0440\u0435\u0441\u0442\u043e\u0440\u0432\u043d\u044b \u041c\u0430\u0434\u0440\u0438\u0434\u0430.","868475f8":"### 2.7 Cuisine Style","a3f11803":"\u041f\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044e 'Price Range' \u044d\u0442\u043e - \u0426\u0435\u043d\u044b \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435.  \n\u0418\u0445 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e (\u0437\u043d\u0430\u0447\u0438\u0442 \u044d\u0442\u043e \u043d\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a). \u0410 \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u0438\u0445 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 1,2,3  ","c5f6d0d6":"## 2.13 Another variables","f9701525":"# \u0418\u0437\u0443\u0447\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043d\u0443\u044e \u043e\u0431\u043b\u0430\u0441\u0442\u044c.\n\n[Everything You Need to Know About the Tripadvisor Popularity Ranking](https:\/\/www.tripadvisor.com\/TripAdvisorInsights\/w765)\n\n\u0414\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0440\u0430\u043d\u043a\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0442\u0440\u0438 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044f:\n- \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432 (\u0445\u043e\u0440\u043e\u0448\u0438\u0439 \u043e\u0442\u0437\u044b\u0432 \u0443\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u0440\u0430\u043d\u043a)\n- \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u0437\u044b\u0432\u0430 (\u0441\u0432\u0435\u0434\u0438\u0439 \u043e\u0442\u044b\u0430 \u0438\u043c\u0435\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u0432\u0435\u0441, \u0447\u0435\u043c \u0441\u0442\u0430\u0440\u044b\u0439)\n- \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0443\u043a\u0440\u0435\u043f\u043b\u044f\u0435\u0442 \u0434\u043e\u0432\u0435\u0440\u0438\u0435","515bdca4":"\u041d\u0430 \u0433\u0440\u0430\u0432\u0438\u043a\u0435 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043e\u0442\u0437\u044b\u0432\u0430\u0432 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b, \u0430 \u0442\u0435\u043c \u0447\u0442\u043e \u043c\u043d\u043e\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0442, \u0438\u043b\u0438 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u044e\u0442\u0441\u044f (0 \u043d\u0430 \u0448\u043a\u0430\u043b\u0435 Nr_of_Reviews), \u0438\u043b\u0438 \u0442\u0430\u043a \u0438 \u043e\u0441\u0442\u0430\u044e\u0442\u0441\u044f \u043d\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u043c\u0438. \u041f\u0440\u0438\u0437\u043d\u0430\u043a \u043e\u043a\u0430\u0437\u0430\u043b \u043f\u0440\u043e\u0445\u043e\u0435 \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u043d\u0430 Public Score. \u041d\u0435 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e.","f774abfd":"\u0421\u043e\u043e\u0442\u0432\u0435\u043d\u043d\u043e TripAdvisor, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u0440\u0430\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430. \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u044d\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435.","46acc41f":"### 2.5 City","4291b097":"### 2.4 Ranking","f79b93f3":"# Cleaning and Prepping Data\n\u041e\u0431\u044b\u0447\u043d\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043a\u0443\u0447\u0443 \u043c\u0443\u0441\u043e\u0440\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u0447\u0438\u0441\u0442\u0438\u0442\u044c, \u0434\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u0438\u0445 \u0432 \u043f\u0440\u0438\u0435\u043c\u043b\u0435\u043c\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442. \u0427\u0438\u0441\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u2014 \u044d\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0439 \u044d\u0442\u0430\u043f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043f\u043e\u0447\u0442\u0438 \u043b\u044e\u0431\u043e\u0439 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.   \n![](https:\/\/analyticsindiamag.com\/wp-content\/uploads\/2018\/01\/data-cleaning.png)","ae70d28d":"## TripAdvisor parsing:\n\n\u041f\u043e \u043f\u0440\u0438\u0447\u0438\u043d\u0435 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u043c\u043d\u0435 \u0435\u0449\u0435 \u0441\u043b\u043e\u0436\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0442\u043e\u043d \u043e\u0442\u0437\u044b\u0432\u0430 \u043f\u043e \u0442\u0435\u043a\u0441\u0442\u0443, \u0440\u0435\u0448\u0438\u043b\u0430 \u0434\u043e\u0441\u0442\u0430\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0441 \u0441\u0430\u0439\u0442\u0430 Trip Advisor \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430. \u041f\u0440\u0438\u0437\u043d\u0430\u043a \"Reviews\" \u0443\u0434\u0430\u043b\u044f\u0435\u043c.\n\n\u041f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432, \u0437\u0430\u043c\u0435\u0442\u0438\u043b\u0438 \u0447\u0442\u043e \u043c\u043d\u043e\u0433\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u043f\u0440\u043e\u043f\u0430\u043b\u0438 \u0438\u0437 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 TripAdvisor. \u041f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 10 \u043e\u0442\u0437\u044b\u0432\u0430\u0445 - \u0434\u0430\u0442\u044b \u0438 \u043e\u0446\u0435\u043d\u043a\u0443.","c1d9cc1e":"\u0417\u0430\u043c\u0435\u0442\u043d\u0430 \u0441\u0438\u043b\u044c\u043d\u0430\u044f \u043d\u0435\u0433\u0430\u0442\u0438\u0432\u043d\u0430\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043c\u0435\u0436\u0434\u0443 ratind_by_ranking \u0438 standard_ranking. \u0410 \u0442\u0430\u043a \u0436\u0435 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043c\u0435\u0436\u0434\u0443 mean_ranking_per_city \u0438 max_ranking_per_city \u0430 \u0442\u0430\u043a \u0436\u0435 DB_Restaurants_Count. \u0418\u0437 \u043a\u0430\u0436\u043b\u043e\u0439 \u043f\u0430\u0440\u044b \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u043e\u0434\u0438\u043d \u043f\u0440\u0438\u0437\u043d\u0430\u043a.","6de1d0bf":"# Submission\n\u0415\u0441\u043b\u0438 \u0432\u0441\u0435 \u0443\u0441\u0442\u0440\u0430\u0435\u0432\u0430\u0435\u0442 - \u0433\u043e\u0442\u043e\u0432\u0438\u043c Submission \u043d\u0430 \u043a\u0430\u0433\u043b","566f8603":"## 2.6 Price Range","46c6d61b":"### 2.8 Number of reviews","7f6a5d7e":"# What's next?\n\u0418\u043b\u0438 \u0447\u0442\u043e \u0434\u0435\u043b\u0430\u0442\u044c, \u0447\u0442\u043e\u0431 \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n* \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0435\u0441\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u043f\u043e\u043d\u044f\u0442\u043d\u044b\u0439 \u0434\u043b\u044f \u043c\u0430\u0448\u0438\u043d\u044b \u0444\u043e\u0440\u043c\u0430\u0442\n* \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c, \u0447\u0442\u043e \u0435\u0449\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0438\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n* \u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n* \u041f\u043e\u0434\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: \u043f\u043e \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044e \u0438\u043b\u0438 \u0431\u043b\u0430\u0433\u043e\u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044e \u0433\u043e\u0440\u043e\u0434\u043e\u0432\n* \u041f\u043e\u0434\u043e\u0431\u0440\u0430\u0442\u044c \u0441\u043e\u0441\u0442\u0430\u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\n\u0412 \u043e\u0431\u0449\u0435\u043c, \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0442\u0432\u043e\u0440\u0447\u0435\u0441\u043a\u0438\u0439 \u0438 \u0432\u0435\u0441\u044c\u043c\u0430 \u0443\u0432\u043b\u0435\u043a\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439! \u0423\u0434\u0430\u0447\u0438 \u0432 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0438!\n","34725201":"## 1. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 NAN \n\u0423 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u0440\u0438\u0447\u0438\u043d\u044b, \u043d\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0443\u0436\u043d\u043e \u043b\u0438\u0431\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c, \u043b\u0438\u0431\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e. \u041d\u043e \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438 \u043d\u0443\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c, **\u0434\u0430\u0436\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u0430\u0436\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c!**   \n\u041f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u0435\u0440\u0435\u0434 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 NAN \u043b\u0443\u0447\u0448\u0435 \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430 \u043a\u0430\u043a \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a ","c910a1f2":"#### \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c","7bd2e25a":"# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438","2768f3a2":"# Data Preprocessing","f7e5cd0d":"# \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\n![image.png](attachment:image.png)\n\n[Best cities](https:\/\/www.bestcities.org\/rankings\/worlds-best-cities\/) by [Resonance](http:\/\/resonanceco.com\/Reports\/)","de5dec3b":"# 2.9 Nr_of_Reviews\n\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a Nr_of_Reviews \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u0435\u0442 \u0441 Number of Reviews. \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.","bedf2981":"# Model \n\u0421\u0430\u043c ML","f3eea508":"# Methods","1095d57e":"### 2.2 ID_TA","cc22ef7d":"## 2.14 Reviews","b4daca0f":"\u0412 \u043d\u0430\u0448\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0435\u0441\u0442\u044c \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439. \u041f\u043e\u0441\u0442\u043e\u0440\u0430\u0435\u043c\u0441\u044f \u0438\u0445 \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c. \u0415\u0441\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0434\u043d\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432 \u0446\u0438\u0444\u0440\u043e\u0432\u043e\u043c \u0432\u0438\u0434\u0435. "}}