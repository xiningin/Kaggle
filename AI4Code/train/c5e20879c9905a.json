{"cell_type":{"41db0ea1":"code","d8fe6c2c":"code","0d290518":"code","1159e01c":"code","1bd21bd4":"code","5e4e71e0":"code","e7c6516b":"code","8f64c714":"markdown","9794ff9c":"markdown","e3ab0863":"markdown","f8170412":"markdown"},"source":{"41db0ea1":"from random import seed\nfrom random import randrange\nfrom csv import reader\nfrom math import sqrt\nfrom math import exp","d8fe6c2c":"def load_csv(filename):\n    dataset = list()\n    with open(filename, 'r') as file:\n        csv_reader = reader(file)\n        for row in csv_reader:\n            if not row:\n                continue\n            dataset.append(row)\n    return dataset","0d290518":"def str_column_to_int(dataset, column):\n    class_values = [row[column] for row in dataset]\n    unique = set(class_values)\n    lookup = dict()\n    for i, value in enumerate(unique):\n        lookup[value] = i\n    for row in dataset:\n        row[column] = lookup[row[column]]\n    return lookup","1159e01c":"def str_column_to_float(dataset, column):\n    for row in dataset:\n        row[column] = float(row[column].strip())","1bd21bd4":"seed(1)\nfilename = '..\/input\/sonaralldata\/sonar.all-data.csv'\ndataset = load_csv(filename)\n\n# convert string attributes to integers\nfor i in range(len(dataset[0])-1):\n    str_column_to_float(dataset, i)\n# convert class column to integers\nstr_column_to_int(dataset, len(dataset[0])-1)","5e4e71e0":"# Split a dataset into k folds\ndef cross_validation_split(dataset, n_folds):\n    dataset_split = list()\n    dataset_copy = list(dataset)\n    fold_size = int(len(dataset) \/ n_folds)\n    for i in range(n_folds):\n        fold = list()\n        while len(fold) < fold_size:\n            index = randrange(len(dataset_copy))\n            fold.append(dataset_copy.pop(index))\n        dataset_split.append(fold)\n    return dataset_split\n \n# Calculate accuracy percentage\ndef accuracy_metric(actual, predicted):\n    correct = 0\n    for i in range(len(actual)):\n        if actual[i] == predicted[i]:\n            correct += 1\n    return correct \/ float(len(actual)) * 100.0\n \n# Evaluate an algorithm using a cross validation split\ndef evaluate_algorithm(dataset, algorithm, n_folds, *args):\n    folds = cross_validation_split(dataset, n_folds)\n    scores = list()\n    for fold in folds:\n        train_set = list(folds)\n        train_set.remove(fold)\n        train_set = sum(train_set, [])\n        test_set = list()\n        for row in fold:\n            row_copy = list(row)\n            test_set.append(row_copy)\n            row_copy[-1] = None\n        predicted = algorithm(train_set, test_set, *args)\n        actual = [row[-1] for row in fold]\n        accuracy = accuracy_metric(actual, predicted)\n        scores.append(accuracy)\n    return scores\n \n# Calculate the Euclidean distance between two vectors\ndef euclidean_distance(row1, row2):\n    distance = 0.0\n    for i in range(len(row1)-1):\n        distance += (row1[i] - row2[i])**2\n    return sqrt(distance)\n \n# Locate neighbors for a new row\ndef get_neighbors(train, test_row, num_neighbors):\n    distances = list()\n    for train_row in train:\n        dist = euclidean_distance(test_row, train_row)\n        distances.append((train_row, dist))\n    distances.sort(key=lambda tup: tup[1])\n    neighbors = list()\n    for i in range(num_neighbors):\n        neighbors.append(distances[i][0])\n    return neighbors\n \n# Make a prediction with kNN\ndef knn_predict(model, test_row, num_neighbors=2):\n    neighbors = get_neighbors(model, test_row, num_neighbors)\n    output_values = [row[-1] for row in neighbors]\n    prediction = max(set(output_values), key=output_values.count)\n    return prediction\n \n# Prepare the kNN model\ndef knn_model(train):\n    return train\n \n# Make a prediction with weights\ndef perceptron_predict(model, row):\n    activation = model[0]\n    for i in range(len(row)-1):\n        activation += model[i + 1] * row[i]\n    return 1.0 if activation >= 0.0 else 0.0\n \n# Estimate Perceptron weights using stochastic gradient descent\ndef perceptron_model(train, l_rate=0.01, n_epoch=5000):\n    weights = [0.0 for i in range(len(train[0]))]\n    for epoch in range(n_epoch):\n        for row in train:\n            prediction = perceptron_predict(weights, row)\n            error = row[-1] - prediction\n            weights[0] = weights[0] + l_rate * error\n            for i in range(len(row)-1):\n                weights[i + 1] = weights[i + 1] + l_rate * error * row[i]\n    return weights\n \n# Make a prediction with coefficients\ndef logistic_regression_predict(model, row):\n    yhat = model[0]\n    for i in range(len(row)-1):\n        yhat += model[i + 1] * row[i]\n    return 1.0 \/ (1.0 + exp(-yhat))\n \n# Estimate logistic regression coefficients using stochastic gradient descent\ndef logistic_regression_model(train, l_rate=0.01, n_epoch=5000):\n    coef = [0.0 for i in range(len(train[0]))]\n    for epoch in range(n_epoch):\n        for row in train:\n            yhat = logistic_regression_predict(coef, row)\n            error = row[-1] - yhat\n            coef[0] = coef[0] + l_rate * error * yhat * (1.0 - yhat)\n            for i in range(len(row)-1):\n                coef[i + 1] = coef[i + 1] + l_rate * error * yhat * (1.0 - yhat) * row[i]\n    return coef\n \n# Make predictions with sub-models and construct a new stacked row\ndef to_stacked_row(models, predict_list, row):\n    stacked_row = list()\n    for i in range(len(models)):\n        prediction = predict_list[i](models[i], row)\n        stacked_row.append(prediction)\n    stacked_row.append(row[-1])\n    return row[0:len(row)-1] + stacked_row\n \n# Stacked Generalization Algorithm\ndef stacking(train, test):\n    model_list = [knn_model, perceptron_model]\n    predict_list = [knn_predict, perceptron_predict]\n    models = list()\n    for i in range(len(model_list)):\n        model = model_list[i](train)\n        models.append(model)\n    stacked_dataset = list()\n    for row in train:\n        stacked_row = to_stacked_row(models, predict_list, row)\n        stacked_dataset.append(stacked_row)\n    stacked_model = logistic_regression_model(stacked_dataset)\n    predictions = list()\n    for row in test:\n        stacked_row = to_stacked_row(models, predict_list, row)\n        stacked_dataset.append(stacked_row)\n        prediction = logistic_regression_predict(stacked_model, stacked_row)\n        prediction = round(prediction)\n        predictions.append(prediction)\n    return predictions","e7c6516b":"n_folds = 3\nscores = evaluate_algorithm(dataset, stacking, n_folds)\nprint('Scores: %s' % scores)\nprint('Mean Accuracy: %.3f%%' % (sum(scores)\/float(len(scores))))","8f64c714":"# Sonar Stacking algorithm from Scratch","9794ff9c":"# Implementation","e3ab0863":"# Data","f8170412":"# Training"}}