{"cell_type":{"15d7d285":"code","e122d566":"code","2e4b0331":"code","0735864b":"code","0afdc6a0":"code","48b6e1a9":"code","8a5264de":"code","adb95f30":"code","e37c84d8":"code","2af569a7":"code","1ec5c1ca":"code","4d2463b5":"code","b5ee9d67":"code","33042ff5":"code","10c1f340":"code","441b6819":"code","380bbbfb":"code","e7d2dd5b":"code","f341cdaf":"code","74eaa370":"code","bd78b9a1":"code","ef190652":"code","b75dee13":"code","31b9febc":"code","e5b4c8a2":"code","e88a67a8":"code","a8aafce1":"code","ad1a7ff6":"code","474ab01b":"code","86430974":"code","968a84c0":"code","40ed5694":"code","4b8e43de":"code","5b2849b9":"code","f53871b9":"code","32fbece4":"code","fc9fa347":"markdown","f6a3eb0b":"markdown","c05d9d13":"markdown","6ab30c3c":"markdown","2f3bf426":"markdown","15f4564d":"markdown","e5c8899e":"markdown","485cca97":"markdown","e26b321c":"markdown","26bfa4b0":"markdown","4ef22269":"markdown","6a949bc2":"markdown","cab60843":"markdown","4a48c672":"markdown","226c1126":"markdown","b1fc19bc":"markdown","f3c06903":"markdown","902870d5":"markdown","45077cc3":"markdown","602728eb":"markdown","3d9c996b":"markdown","6fbcd2da":"markdown","f5695740":"markdown"},"source":{"15d7d285":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport re\nimport seaborn as sns\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e122d566":"reviews=pd.read_csv(\"..\/input\/google-play-store-apps\/googleplaystore_user_reviews.csv\")\napps_infor=pd.read_csv(\"..\/input\/google-play-store-apps\/googleplaystore.csv\")\napps_infor.head()","2e4b0331":"apps_infor.drop_duplicates(inplace=True)\napps_infor.drop([10472],inplace=True)\napps_infor['Reviews']=apps_infor[\"Reviews\"].astype(\"int32\")\napps_infor['Last Updated']=apps_infor['Last Updated'].astype(\"datetime64\")\napps_infor[[\"App\",\"Category\",\"Installs\",\"Type\",\"Price\",\"Content Rating\",\"Genres\",\"Current Ver\",\"Android Ver\"]]=apps_infor[[\"App\",\"Category\",\"Installs\",\"Type\",\"Price\",\"Content Rating\",\"Genres\",\"Current Ver\",\"Android Ver\"]].astype(\"string\")","0735864b":"apps_infor.isna().sum()","0afdc6a0":"# drop rows with na at columns \"Type\",\"Current Ver\", \"Android Ver\" \napps_infor.dropna(axis=0,inplace=True,subset=['Android Ver','Current Ver','Type'])","48b6e1a9":"# fill rating na with the mean rating of category the apps in\ndef fill_rating(c):\n    c_mean=apps_infor.loc[apps_infor[\"Category\"]==c][\"Rating\"].mean()\n    return c_mean\n\napps_infor.loc[apps_infor[\"Rating\"].isna(),\"Rating\"]=apps_infor.loc[apps_infor[\"Rating\"].isna(),\"Category\"].apply(fill_rating)","8a5264de":"# transfrom Size to float: 1. unit k\/1024->M; 2. unit M->M; Varies with device->-1\napps_infor[\"Size\"].replace(\"Varies with device\",-1,inplace=True)\napps_infor.loc[apps_infor[\"Size\"].str[-1]==\"k\",\"Size\"]=(apps_infor.loc[apps_infor[\"Size\"].str[-1]==\"k\",\"Size\"].str[:-1].astype(\"float64\")\/1024)\napps_infor.loc[apps_infor[\"Size\"].str[-1]==\"M\",\"Size\"]=apps_infor.loc[apps_infor[\"Size\"].str[-1]==\"M\",\"Size\"].str[:-1].astype(\"float64\")\napps_infor[\"Size\"]=apps_infor[\"Size\"].astype(\"float64\")","adb95f30":"# transfrom Installs to int32 \napps_infor.loc[apps_infor[\"Installs\"].str[-1]=='+',\"Installs\"]=apps_infor.loc[apps_infor[\"Installs\"].str[-1]=='+',\"Installs\"].str[:-1]\napps_infor[\"Installs\"]=apps_infor[\"Installs\"].str.replace(\",\",'').astype(\"int32\")\n#transfrom Price to float64\napps_infor[\"Price\"]=apps_infor[\"Price\"].str.replace(\"$\",'').astype(\"float32\")\napps_infor.drop([\"Type\"],axis=1,inplace=True)","e37c84d8":"apps_infor[\"Category\"]=apps_infor[\"Category\"].str.lower()\napps_infor[\"Genres\"]=apps_infor[\"Genres\"].str.lower()\napps_infor=pd.concat([apps_infor, apps_infor['Genres'].str.split(';', expand=True)], axis=1).drop([\"Genres\"],axis=1)\napps_infor.rename(columns={0:'Genres0',1:'Genres1'},inplace=True)","2af569a7":"#Transform \"Content Rating\" to int32\n#Only 3 apps satisfy  \"Content Rating\"==\"Adults only 18+\" ,it's resonable to classify it together with \"Mature 17+\"\napps_infor[\"Content Rating\"].replace({'Everyone':0, 'Teen':13, 'Everyone 10+':10, 'Mature 17+':17, 'Adults only 18+':17,\n 'Unrated':0},inplace=True)\napps_infor[\"Content Rating\"]=apps_infor[\"Content Rating\"].astype(\"int32\")","1ec5c1ca":"apps_infor.loc[apps_infor[\"App\"]==\"ROBLOX\"]","4d2463b5":"columns=apps_infor.columns\ncolumns=columns.drop([\"Reviews\"])\napps_infor.drop_duplicates(subset=columns.values.tolist(),keep=\"first\",inplace=True)\napps_infor.reset_index(drop=True,inplace=True)","b5ee9d67":"# groupby category\nage_list=[0,10,13,17]\nage_infor={}\nfor age in age_list:\n    age_infor[age]=apps_infor.loc[apps_infor[\"Content Rating\"]==age].groupby(\"Category\")[[\"Installs\",\"Rating\"]].agg([\"count\",\"sum\",\"mean\",\"min\",\"max\",\"std\"]).sort_values(by=(\"Installs\",\"sum\"),ascending=False)","33042ff5":"age_infor[0].head()","10c1f340":"plt.figure(figsize=(8,8))\nage_infor[0][\"Installs\"][\"count\"].plot.pie(fontsize=8)","441b6819":"age_infor[10].head()","380bbbfb":"plt.figure(figsize=(8,8))\nage_infor[10][\"Installs\"][\"count\"].plot.pie(fontsize=8)","e7d2dd5b":"age_infor[13].head()","f341cdaf":"plt.figure(figsize=(8,8))\nage_infor[13][\"Installs\"][\"count\"].plot.pie(fontsize=8)","74eaa370":"age_infor[17].head()","bd78b9a1":"plt.figure(figsize=(8,8))\nage_infor[17][\"Installs\"][\"count\"].plot.pie(fontsize=8)","ef190652":"apps_infor.groupby(\"Category\")[[\"Installs\",\"Rating\"]].agg([\"count\",\"sum\",\"mean\",\"min\",\"max\",\"std\"]).sort_values(by=(\"Rating\",\"mean\"),ascending=False)","b75dee13":"Cat_gen=apps_infor[[\"Category\",\"Genres0\",\"Genres1\"]].groupby(\"Category\")\nfor cat,group in Cat_gen:\n    cat=cat.replace('_and_',' & ')\n    #print(cat,end='->')\n    count_0=group[\"Genres0\"].fillna(\"None\").value_counts()\n    count_1=group[\"Genres1\"].fillna(\"None\").value_counts()\n    print_list=''\n    for index,row in count_0.iteritems():\n        if index!=cat and index!='None':\n            print_list+=index\n            print_list+=' '\n            print_list+=str(row)\n            print_list+=' '\n          #  print(index,end=' ')\n           # print(row,end=' ')\n   # print('|',end='')\n    print_list+='|'\n    for index,row in count_1.iteritems():\n        if index!=cat and index!='None':\n            print_list+=index\n            print_list+=' '\n            print_list+=str(row)\n            print_list+=' '\n          #  print(index,end=' ')\n          #  print(row,end=' ')\n    if len(print_list)>1:\n        print(cat,sum(count_1),end='->')\n        print(print_list)\n        print('\\n')\n","31b9febc":"columns=columns.drop([\"Category\"])\napps_infor[apps_infor.duplicated(subset=columns,keep=False)].groupby(\"Category\").size()","e5b4c8a2":"apps_infor.groupby(pd.Grouper(key=\"Last Updated\", freq=\"M\"))[\"App\"].agg([\"count\"]).plot()\nplt.ylabel('APPs Num')\nplt.xlabel('Last Unpdated(Year-Month)')","e88a67a8":"apps_infor.groupby(pd.Grouper(key=\"Last Updated\", freq=\"M\"))[\"Installs\"].agg([\"mean\",\"count\"]).query(\"count>100\")[\"mean\"].plot()\nplt.ylabel('Installs Num Per App')\nplt.xlabel('Last Updated(Year-Month)')","a8aafce1":"apps_infor.groupby(pd.Grouper(key=\"Last Updated\", freq=\"M\"))[\"Rating\"].agg([\"mean\",\"count\"]).query(\"count>100\")[\"mean\"].plot()\nplt.ylabel('Rating Per App')\nplt.xlabel('Last Updated(Year-Month)')","ad1a7ff6":"apps_infor[\"Last Updated_dis\"]=((apps_infor[\"Last Updated\"].max()-apps_infor[\"Last Updated\"]).dt.days).astype(\"int\")","474ab01b":"apps_infor.groupby(apps_infor[\"Price\"]>0)[[\"Price\"]].agg([\"count\"]).plot(kind=\"bar\")\nplt.legend()\nplt.xticks([False,True],[\"Free\",\"Paid\"],rotation=90)\napps_infor.loc[apps_infor[\"Price\"]>0].groupby((apps_infor[\"Price\"]).astype(\"int\")+1)[[\"Price\"]].agg([\"count\"]).plot(kind=\"bar\")\nplt.legend()\napps_infor.groupby((apps_infor[\"Price\"]\/10).astype(\"int\"))[[\"Rating\"]].agg([\"mean\"]).plot(kind=\"bar\")\nplt.ylim([3.5,5])\nplt.xticks(rotation=45)\nplt.legend()\napps_infor.groupby(apps_infor[\"Price\"]>0)[[\"Rating\"]].agg([\"mean\"]).plot(kind=\"bar\")\nplt.xticks([False,True],[\"Free\",\"Paid\"],rotation=90)\nplt.ylim([4,4.5])\nplt.legend()","86430974":"apps_infor[\"Reviews\"].apply(lambda x:np.log10(x+1)).plot(kind=\"kde\")\nplt.xlabel(\"Reviews,base=10\")","968a84c0":"apps_infor[\"Reviews_log\"]=apps_infor[\"Reviews\"].apply(lambda x:np.log(x+1))\napps_infor[\"Installs_log\"]=apps_infor[\"Installs\"].apply(lambda x:np.log(x+1))","40ed5694":"plt.figure(figsize=(10,8))\nsns.heatmap(apps_infor.corr(),annot=True)","4b8e43de":"sns.pairplot(apps_infor,diag_kind=\"hist\")","5b2849b9":"from sklearn.model_selection import learning_curve, train_test_split,GridSearchCV\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\n\n\n#trasform Category into dummy variables\nfeature=apps_infor[[\"Category\",\"Size\",\"Installs\",\"Reviews\",\"Installs_log\",\"Price\",\"Content Rating\",\"Last Updated_dis\",\"Reviews_log\",\"Android Ver\"]]\nfeature=feature.merge(feature[\"Category\"].str.get_dummies(),left_index=True,right_index=True)\nfeature.drop([\"Category\"],axis=1,inplace=True)\nfeature=feature.merge(feature[\"Android Ver\"].str.get_dummies(),left_index=True,right_index=True)\nfeature.drop([\"Android Ver\"],axis=1,inplace=True)\n\nfeature=feature.values\n\ntarget=apps_infor[\"Rating\"].values\n\n\n# 20% data for test, the rest for trainning.\ntrain_x,test_x,train_y,test_y = train_test_split(feature ,target, test_size=0.20, random_state = 1)\n    \n# build all kinds of regressors\nregressors = [   \n    DecisionTreeRegressor(random_state = 1, criterion = 'mse'),\n    RandomForestRegressor(random_state = 1, criterion = 'mse'),\n    KNeighborsRegressor(metric = 'minkowski'),\n]\n# regressor name\nregressor_names = [\n            'decisiontreeregressor',\n            'randomforestregressor',\n            'kneighborsregressor',\n]\n# regressor paramters\nregressor_param_grid = [\n            {'decisiontreeregressor__max_depth':range(1,6)},\n            {'randomforestregressor__n_estimators':[98]} ,# I tried range(1,100) and find 98 is the best.\n            {'kneighborsregressor__n_neighbors':range(95,100)},\n]\n \n# GridSearchCV for choosing a good parameter\ndef GridSearchCV_work(pipeline, train_x, train_y, test_x, test_y, param_grid, score='neg_root_mean_squared_error'):\n    response = {}\n    gridsearch = GridSearchCV(estimator = pipeline, param_grid = param_grid, scoring = score)\n    # find the best parameters\n    search = gridsearch.fit(train_x, train_y)\n    print(\"GridSearch Best Parameter\uff1a\", search.best_params_)\n    print(\"GridSearch Smallest Error\uff1a %0.4lf\" %(-search.best_score_))\n    predict_y = gridsearch.predict(test_x)\n    print(\"mean squared error %0.4lf\" %mean_squared_error(test_y, predict_y))\n    response['predict_y'] = predict_y\n    response['mean_squared_error'] = mean_squared_error(test_y,predict_y)\n    return response\n \nfor model, model_name, model_param_grid in zip(regressors, regressor_names, regressor_param_grid):\n    pipeline = Pipeline([\n            ('scaler', StandardScaler()),\n            (model_name, model)\n    ])\n    result = GridSearchCV_work(pipeline, train_x, train_y, test_x, test_y, model_param_grid , score ='neg_root_mean_squared_error'\n\n)","f53871b9":"# use the best regressor and best parameters for prediction\npipeline = Pipeline([\n            ('scaler', StandardScaler()),\n            ('DT',DecisionTreeRegressor(random_state = 1, criterion = 'mse',max_depth=5))\n    ])","32fbece4":"y_predict=(pipeline.fit(feature,target)).predict(feature)\napps_infor[\"Rating_pre\"]=y_predict\napps_infor[\"Rating_pre\"].plot(kind=\"kde\",c=\"g\")\napps_infor[\"Rating\"].plot(kind=\"kde\",c=\"b\")\nplt.xstick(\"Rating Value\")","fc9fa347":"Though DT is not the best model as shown above, but as we can see, this 3 models' peformance is similar,\n\nwhile the best DT have far more simple stucture compared with the other 2, and use libaray graphvize,\n\nDT's decision rule can be well visualized, so I choose to use DT.","f6a3eb0b":"+ **Find out the most popular category**:\n    \n    From the perspective of app users, a popular categort haves high installation times.\n    \n    But different generations have their own need, so we need to take this factor into account.","c05d9d13":"# Data Preprocessing","6ab30c3c":"+ **We've find out the most popular categories from the perspective of installation times,but combing the imformation of Rating may give us more insight.**\n","2f3bf426":"# Descriptive Statistics","15f4564d":"## 1. Transform Data Type\nIncluding following steps\n1. drop rows with nan\n2. drop duplicated rows and reset index(first time) and drop a row \n    +  rows 10472's values are misplaced\n3. transform datatype of columns\n    + Price -> float32\n    + Reviews-> int32\n    + Size-> float64(items with unit k ->M)\n    + Last Updated-> datetime64\n    + Type -> drop (it's information has been completely contained in column \"Price\")\n    + Content Rating -> int32 (lowest age accepted to use the app)","e5c8899e":"## 2.Copying with Duplicated rows(further)\nWe've drop duplicated rows at session1,but after looking into the data, we'll find more duplicated rows:\n(for example)\n+ App \"ROBLOX\" appears 9 times in dataframe, and from the output below, we see that they are duplicated.These duplicated items: Category are different and reviews are close(so we don't cope with review difference),while other columns keep same.\n\n+ An app appearing in different categories means this app can be classified in all of these categories,\nthis is an important information. So We keep duplicated items with different categories.","485cca97":"## 1. Category Analysis","e26b321c":"## 2.Last Updated Analysis","26bfa4b0":"\"Reviews\" column's values are distrubted sparsely, \n\ndo a log-10 reflect on it, and plot it's kde.\n\nFrom the result below, we find that log-10 reflect will make the data's distribution more compact,\n\nwe will add a new column named \"Reviews_log\".\n\n(same for installs: long-tailed effect)\n","4ef22269":"From the heatmap, we can conclude that:\n\n\"Reviews\" and \"Installs\" are relatively higher related, but when they are transfromed into \"log\" ones,\n\ntheir correlationship is better excavated.\n\nBut it's notable that \"Installs\" columns' values are not presice, but disperse and the correlation coefficient between two columns should be just for reference.","6a949bc2":"From the result above, we can find that\uff1aCompared with all hot 5 categories at differnt content ratings:\n\n***education,social,game*** are comparatively higher rated.\n+ -> apps of these categories are needed and users are willing to rate high for them. Especially for game(high average installation times, many apps to choose, comparatively high rate score). \n\n***tools, dating*** are obviously lower rated.(at the bottom of the sorting result)\n+ -> apps of these categories are needed but users are not satisfied.","cab60843":"Beside \"Category\", \"Genre\" also provides information about app type\/style. \n\nLet's find out their relationship.","4a48c672":"## Correlation Visualizing","226c1126":"# Rating Predict\n\nTry to predict rating using columns (Category & Size & Installs & Price & Content Rating & Last Updated)","b1fc19bc":"Unfortunately, the predict result is not so good...(to be continued...)\n","f3c06903":"Last 3 plotting shows that:\n\n1. most of the apps's recent update month is no later than 2017-03 \n\n2. apps updated more recent are installed more\n\n3. apps recently updated after 2018-03 are rated higher than others (by average level)\n\nFor further analysis, we create a new colum which stores how many days between last updated day and the 2018-08-08(the latest last updated day)","902870d5":"From the below plots, we can colude that:\n1. most apps are free.(From bar chart 1)\n2. most paid apps's prices are no higher than 10. (From bar chart2)\n3. rating are mildly related with price:\n    middle prices are related with higher rating. \n4. paid apps are relatively higher rated than free apps on average level (From bar chart4)\n","45077cc3":"From the above result, we can find out that:\n\n+ most categories don't have any genre named differently from themseleves\n\n+ \"family\",\"game\" (these 2 categories includes many apps and are popular as we can see from the previous result)\n\n   have most genres, and these genres also includes many apps\n   \n   which means these 2 categories are not only popular, but also highly segmentized.\n   \n+  But it's notable that names of some genres in \"family\" are identical to some categories. \n   \n   While, names of genres in \"game\" are actually like names of game tpyes.\n   \n   ","602728eb":"## 3. Price Analysis","3d9c996b":"Sort by \"Installs\"-\"sum\", we can find that:\n\n1.  Content Rating=0 (every one can download): ***communication,game,tools,productivity,family*** is the hot 5\n2. Content Rating=10 (age>10 can download)\uff1a***game,family,news_and_magazines,sports,education*** is the hot 5\n    + apps in \"sports\" and \"education\" at this content rate have few competitors.\n3.  Content Rating=13 (for 13<=age<=17)\uff1a***social,video players,game,family,entertaiment*** is the hot 5\n    + apps in \"video players\" at this content rate have the least competitors and comparatively high mean of installation times\n4. Content Rating=17 (age>17 can download)\uff1a***news_and_magazines\uff0csocial\uff0cgame,communiction,dating*** is the hot 5\n    + apps of \"dating\" category are all at  content rating\n\nTo sum up:\n\n***game,family*** appears most times in hot 5 at all content rating.\n\nContent Rating=0 contains most apps, hot 5 at this rating may be the most popular apps for most people.\n","6fbcd2da":"The above result find out apps appearing twice in apps_infor with 2 different \"Category\" values.\n\nWe can conclude that almost all these apps appear once in \"family\". \n\nCombine the previous result, it's natural to say: \"family\" apps always intersect with other categories.\n\nIt's better to create an special zone named \"family\", and choose apps from apps pool which cater to family needs to put in it.","f5695740":"## 4. Reviews "}}