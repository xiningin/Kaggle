{"cell_type":{"43d9d460":"code","275f8adc":"code","ec6df448":"code","f3fe8c27":"code","7eac9162":"code","a8a87fe2":"code","50367ad5":"code","af1f3a8c":"code","6451d8db":"code","f9739cc0":"code","d6e7d054":"code","0c5a4d8d":"code","b371229f":"code","e029fe12":"code","14a79429":"code","e2278515":"code","6605857a":"code","59efb03a":"code","48ed4fc3":"code","4c956d34":"code","a3de26f7":"code","b33686bb":"code","837355b3":"code","a1c083e6":"code","ff5dd982":"code","3ddb7b0a":"code","d15e78cd":"code","315e24b7":"code","0d2af136":"code","af80b231":"code","2061c86a":"code","67697f91":"code","003016ee":"code","381ba96f":"code","ef940598":"code","b83d50f4":"code","e217af58":"code","a6e41784":"code","290c570b":"code","25ab2dcf":"code","09e78a2a":"markdown","be7adce1":"markdown","ac8b013b":"markdown","207f81c4":"markdown","d2267bc9":"markdown","fd7b1bea":"markdown","3bf35427":"markdown","e8b3a146":"markdown","d7a767ac":"markdown","f77e7eb0":"markdown","4b3f7ef9":"markdown","59491bd0":"markdown","29387977":"markdown","a0c14ad2":"markdown","6d436035":"markdown","9803f1f0":"markdown","a07c35d3":"markdown","08f001ef":"markdown","4c5a1995":"markdown","20aa2a04":"markdown","69a01b53":"markdown","06ceb8b5":"markdown","2af57d8b":"markdown","a3e60829":"markdown","54c17997":"markdown","3622632b":"markdown","cdbc918b":"markdown","b6b69e5e":"markdown","21c90f0f":"markdown"},"source":{"43d9d460":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","275f8adc":"df = pd.read_csv('..\/input\/titanic\/train.csv')\ndf.head(20)","ec6df448":"df.info()","f3fe8c27":"df.info()","7eac9162":"df.shape","a8a87fe2":"df.isnull().sum()","50367ad5":"df_1 = df.drop(columns = {'Name','Cabin'})\ndf_1.head(20)","af1f3a8c":"df_1.isnull().sum()","6451d8db":"df_1['Age'] = df_1['Age'].fillna(df_1['Age'].mean())","f9739cc0":"df_1.dropna(inplace = True)","d6e7d054":"df_1.isnull().sum()","0c5a4d8d":"df_1.shape","b371229f":"df_1.info()","e029fe12":"print(df_1['Sex'].nunique())\nprint(df_1['Ticket'].nunique())\nprint(df_1['Embarked'].nunique())","14a79429":"df_2 = pd.get_dummies(df_1[['Sex','Embarked']])   #The get_dummies() function is used to convert categorical variable into dummy\/indicator variables.\ndf_2.head(20)","e2278515":"df_2.tail(20)","6605857a":"df_1 = df_1.join(df_2)\ndf_1.head(20)","59efb03a":"df_1.drop(columns={'Sex' , 'Embarked' , 'Ticket'}, axis=1 , inplace=True)\ndf_1.info()","48ed4fc3":"plt.figure(figsize=(16,8), dpi= 80)\nsns.heatmap(df_1.corr(), cmap='RdYlGn', center=0)\nplt.title('Correlation Matrix (for Titanic Dataset)')","4c956d34":"y = df_1['Survived']\nX = df_1.drop(columns={'Survived'}, axis=1)\nX.head(20)","a3de26f7":"df_test = pd.read_csv('..\/input\/titanic\/test.csv')\ndf_test.info()","b33686bb":"df_test.drop(columns = {'Name','Cabin','Ticket'},axis = 1, inplace = True)\ndf_test.info()","837355b3":"df_test_2 = pd.get_dummies(df_test[['Sex','Embarked']])\ndf_test_2.head(20)","a1c083e6":"df_test = df_test.join(df_test_2)\ndf_test.head(20)","ff5dd982":"df_test.drop(columns = {'Sex','Embarked'}, axis =1 ,inplace =True)\ndf_test.head(20)","3ddb7b0a":"df_test.info()","d15e78cd":"df_test.isnull().sum()","315e24b7":"df_test['Age'] = df_test['Age'].fillna(df_test['Age'].mean())\ndf_test['Fare'] = df_test['Fare'].fillna(df_test['Fare'].median()) ","0d2af136":"df_test.isnull().sum()","af80b231":"X.drop(columns = {'PassengerId'}, inplace = True, axis =1)\nX.head(20)","2061c86a":"from xgboost import XGBClassifier\nclassifier = XGBClassifier()\nclassifier.fit(X, y)\nprint(\"Accuracy:{:.2f} %\".format(classifier.score(X, y)*100))","67697f91":"!pip install catboost","003016ee":"from catboost import CatBoostClassifier\nclassifier_1 = CatBoostClassifier()\nclassifier_1.fit(X, y)\n","381ba96f":"print(\"Accuracy:{:.2f} %\".format(classifier_1.score(X, y)*100))","ef940598":"sub = pd.DataFrame(columns =['PassengerId','Survived'])\nsub['PassengerId'] = df_test['PassengerId'].astype(int)\nsub.head()","b83d50f4":"df_test.drop(columns = {\"PassengerId\"}, inplace =True, axis = 1)\ny_pred = classifier.predict(df_test)","e217af58":"sub['Survived'] = y_pred.astype(int)","a6e41784":"sub.head(20)","290c570b":"sub.to_csv('Submission.csv', index=False)","25ab2dcf":"col_sorted_by_importance=classifier.feature_importances_.argsort()\nfeat_imp=pd.DataFrame({\n    'cols':X.columns[col_sorted_by_importance],\n    'imps':classifier.feature_importances_[col_sorted_by_importance]\n})\n\n#!pip install plotly-express\nimport plotly_express as px\npx.bar(feat_imp, x='cols', y='imps')","09e78a2a":"**Checking for the missing values for the final times**","be7adce1":"**Checking in 'sex', 'ticket', 'emabrked' for uniques values[](http:\/\/)**","ac8b013b":"**Lets remove the missing the data of age with mean and fare with median**","207f81c4":"**Checking the missing data in the new dataset**","d2267bc9":"# Preprocessing of the test set","fd7b1bea":"**Filling the missing data in the Age column with mean strategy**","3bf35427":"**Let's drop the sex and embarked from the test set**","e8b3a146":"# Training on Catboost","d7a767ac":"**Training the model on XGboost**","f77e7eb0":"# Importing the Libraries","4b3f7ef9":"# Spliting the dataset into dependent and independent varibles","59491bd0":"**Time to drop the sex and embark**","29387977":"# Data Preprocessing","a0c14ad2":"*Ticket need to be dropped as their are too many unique values*","6d436035":"**Now Let's drop all the missing value remaining**","9803f1f0":"**Checking the shape of new dataset**","a07c35d3":"**Lets check for the missing values for the final time**","08f001ef":"**Lets join df_1 and df_2**","4c5a1995":"Info of the new dataset","20aa2a04":"**Let's drop the PassengerId from the independent variable X**","69a01b53":"# Submission Dataframe","06ceb8b5":"> Checking the missing data","2af57d8b":"> OneHot Encode Sex and Embarked columns","a3e60829":"> Dataset Info","54c17997":"**creating a copy of the dataset without the Cabin and Name as these two rows has no effect on survival**","3622632b":"> Dataset Descrition","cdbc918b":"# Display the correlation matrix\n","b6b69e5e":"> Dataset Shape","21c90f0f":"**Lets check if thre is any missing vales**"}}