{"cell_type":{"4bc4a9c7":"code","6e7940f0":"code","0f5136a1":"code","0db56df0":"code","97d1962d":"code","3871f3a4":"code","3c1e203f":"code","d5e78a12":"code","8f9228fd":"code","bc6e0a27":"code","a1807907":"code","d4779112":"code","e06c6074":"code","8032e5f3":"code","56aae72b":"code","5bbedad9":"code","9fa3298d":"code","a1ebc7d1":"code","c306099a":"code","44851041":"code","d4176999":"code","f3bfa24e":"code","b2f9da7f":"code","e7eaedd3":"code","d1deedf8":"code","354ea428":"code","d8b06dee":"code","ff9d01df":"code","d6696d76":"code","4abe14a5":"code","e52c6a60":"code","ec1d6645":"code","b08203fd":"code","9729eecf":"code","e2885a60":"code","997444aa":"code","9307a834":"code","e3796604":"code","0d4062e7":"code","9e4e32c6":"code","d3833871":"code","a13003b3":"code","85ccce07":"code","85b70182":"code","e06fdf75":"markdown","cbb34bdc":"markdown"},"source":{"4bc4a9c7":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nddx=pd.read_csv('..\/input\/symptom-disease-dataset-2\/syditriage.csv')\n# Any results you write to the current directory are saved as output.","6e7940f0":"ddx.columns=['sym','symptom','dis','diagnose','dg','wei']\nddx","0f5136a1":"import scipy.sparse as sparse\n\ncleaned_retail = ddx[['wei', 'symptom', 'diagnose']] # Get rid of unnecessary info\n\ngrouped_cleaned = cleaned_retail.groupby(['diagnose', 'symptom']).sum().reset_index() # Group together\ngrouped_cleaned.wei.loc[grouped_cleaned.wei == 0] = 1 # Replace a sum of zero purchases with a one to\n# indicate purchased\ngrouped_purchased = grouped_cleaned.query('wei > 50') # Only get customers where purchase totals were positive\nprint(grouped_purchased.info())\ncustomers = list(np.sort(grouped_purchased.symptom.unique())) # Get our unique customers\nproducts = list(grouped_purchased.diagnose.unique()) # Get our unique products that were purchased\nquantity = list(grouped_purchased.wei) # All of our purchases\n\nrows = grouped_purchased.symptom.astype('category', categorie = customers).cat.codes \n# Get the associated row indices\ncols = grouped_purchased.diagnose.astype('category', categorie = products).cat.codes \n# Get the associated column indices\npurchases_sparse = sparse.csr_matrix((quantity, (rows, cols)), shape=(len(customers), len(products)))","0db56df0":"ddx.groupby(['diagnose']).mean(),pd.DataFrame(customers)","97d1962d":"basket_sets = pd.pivot_table(ddx, index='symptom',columns='diagnose',values='wei')\nbasket_sets.info()\n#atc can be linked to atc, i simplify here\nitem_lookup = pd.DataFrame( list( basket_sets.columns ) ,columns=['StockCode'])# Only get unique item\/description pairs\n#item_lookup=pd.merge(item_lookup, atc, how='left', on=None, left_on='StockCode', right_on='ATC')\n#item_lookup.columns=['StockCode','kegg','Description','ATC','CAS','PubChem','Snomed']\nitem_lookup.head()","3871f3a4":"matrix_size = purchases_sparse.shape[0]*purchases_sparse.shape[1] # Number of possible interactions in the matrix\nnum_purchases = len(purchases_sparse.nonzero()[0]) # Number of items interacted with\nsparsity = 100*(1 - (num_purchases\/matrix_size))\nsparsity\n","3c1e203f":"def make_train(ratings, pct_test = 0.2):\n    import random\n    '''\n    This function will take in the original user-item matrix and \"mask\" a percentage of the original ratings where a\n    user-item interaction has taken place for use as a test set. The test set will contain all of the original ratings, \n    while the training set replaces the specified percentage of them with a zero in the original ratings matrix. \n    \n    parameters: \n    \n    ratings - the original ratings matrix from which you want to generate a train\/test set. Test is just a complete\n    copy of the original set. This is in the form of a sparse csr_matrix. \n    \n    pct_test - The percentage of user-item interactions where an interaction took place that you want to mask in the \n    training set for later comparison to the test set, which contains all of the original ratings. \n    \n    returns:\n    \n    training_set - The altered version of the original data with a certain percentage of the user-item pairs \n    that originally had interaction set back to zero.\n    \n    test_set - A copy of the original ratings matrix, unaltered, so it can be used to see how the rank order \n    compares with the actual interactions.\n    \n    user_inds - From the randomly selected user-item indices, which user rows were altered in the training data.\n    This will be necessary later when evaluating the performance via AUC.\n    '''\n    test_set = ratings.copy() # Make a copy of the original set to be the test set. \n    test_set[test_set != 0] = 1 # Store the test set as a binary preference matrix\n    training_set = ratings.copy() # Make a copy of the original data we can alter as our training set. \n    nonzero_inds = training_set.nonzero() # Find the indices in the ratings data where an interaction exists\n    nonzero_pairs = list(zip(nonzero_inds[0], nonzero_inds[1])) # Zip these pairs together of user,item index into list\n    random.seed(0) # Set the random seed to zero for reproducibility\n    num_samples = int(np.ceil(pct_test*len(nonzero_pairs))) # Round the number of samples needed to the nearest integer\n    samples = random.sample(nonzero_pairs, num_samples) # Sample a random number of user-item pairs without replacement\n    user_inds = [index[0] for index in samples] # Get the user row indices\n    item_inds = [index[1] for index in samples] # Get the item column indices\n    training_set[user_inds, item_inds] = 0 # Assign all of the randomly chosen user-item pairs to zero\n    training_set.eliminate_zeros() # Get rid of zeros in sparse array storage after update to save space\n    return training_set, test_set, list(set(user_inds)) # Output the unique list of user rows that were altered  ","d5e78a12":"product_train, product_test, product_users_altered = make_train(purchases_sparse, pct_test = 0.01)\nproduct_train","8f9228fd":"def implicit_weighted_ALS(training_set, lambda_val = 0.1, alpha = 40, iterations = 10, rank_size = 20, seed = 0):\n    '''\n    Implicit weighted ALS taken from Hu, Koren, and Volinsky 2008. Designed for alternating least squares and implicit\n    feedback based collaborative filtering. \n    \n    parameters:\n    \n    training_set - Our matrix of ratings with shape m x n, where m is the number of users and n is the number of items.\n    Should be a sparse csr matrix to save space. \n    \n    lambda_val - Used for regularization during alternating least squares. Increasing this value may increase bias\n    but decrease variance. Default is 0.1. \n    \n    alpha - The parameter associated with the confidence matrix discussed in the paper, where Cui = 1 + alpha*Rui. \n    The paper found a default of 40 most effective. Decreasing this will decrease the variability in confidence between\n    various ratings.\n    \n    iterations - The number of times to alternate between both user feature vector and item feature vector in\n    alternating least squares. More iterations will allow better convergence at the cost of increased computation. \n    The authors found 10 iterations was sufficient, but more may be required to converge. \n    \n    rank_size - The number of latent features in the user\/item feature vectors. The paper recommends varying this \n    between 20-200. Increasing the number of features may overfit but could reduce bias. \n    \n    seed - Set the seed for reproducible results\n    \n    returns:\n    \n    The feature vectors for users and items. The dot product of these feature vectors should give you the expected \n    \"rating\" at each point in your original matrix. \n    '''\n    \n    # first set up our confidence matrix\n    \n    conf = (alpha*training_set) # To allow the matrix to stay sparse, I will add one later when each row is taken \n                                # and converted to dense. \n    num_user = conf.shape[0]\n    num_item = conf.shape[1] # Get the size of our original ratings matrix, m x n\n    \n    # initialize our X\/Y feature vectors randomly with a set seed\n    rstate = np.random.RandomState(seed)\n    \n    X = sparse.csr_matrix(rstate.normal(size = (num_user, rank_size))) # Random numbers in a m x rank shape\n    Y = sparse.csr_matrix(rstate.normal(size = (num_item, rank_size))) # Normally this would be rank x n but we can \n                                                                 # transpose at the end. Makes calculation more simple.\n    X_eye = sparse.eye(num_user)\n    Y_eye = sparse.eye(num_item)\n    lambda_eye = lambda_val * sparse.eye(rank_size) # Our regularization term lambda*I. \n    \n    # We can compute this before iteration starts. \n    \n    # Begin iterations\n   \n    for iter_step in range(iterations): # Iterate back and forth between solving X given fixed Y and vice versa\n        # Compute yTy and xTx at beginning of each iteration to save computing time\n        yTy = Y.T.dot(Y)\n        xTx = X.T.dot(X)\n        # Being iteration to solve for X based on fixed Y\n        for u in range(num_user):\n            conf_samp = conf[u,:].toarray() # Grab user row from confidence matrix and convert to dense\n            pref = conf_samp.copy() \n            pref[pref != 0] = 1 # Create binarized preference vector \n            CuI = sparse.diags(conf_samp, [0]) # Get Cu - I term, don't need to subtract 1 since we never added it \n            yTCuIY = Y.T.dot(CuI).dot(Y) # This is the yT(Cu-I)Y term \n            yTCupu = Y.T.dot(CuI + Y_eye).dot(pref.T) # This is the yTCuPu term, where we add the eye back in\n                                                      # Cu - I + I = Cu\n            X[u] = spsolve(yTy + yTCuIY + lambda_eye, yTCupu) \n            # Solve for Xu = ((yTy + yT(Cu-I)Y + lambda*I)^-1)yTCuPu, equation 4 from the paper  \n        # Begin iteration to solve for Y based on fixed X \n        for i in range(num_item):\n            conf_samp = conf[:,i].T.toarray() # transpose to get it in row format and convert to dense\n            pref = conf_samp.copy()\n            pref[pref != 0] = 1 # Create binarized preference vector\n            CiI = sparse.diags(conf_samp, [0]) # Get Ci - I term, don't need to subtract 1 since we never added it\n            xTCiIX = X.T.dot(CiI).dot(X) # This is the xT(Cu-I)X term\n            xTCiPi = X.T.dot(CiI + X_eye).dot(pref.T) # This is the xTCiPi term\n            Y[i] = spsolve(xTx + xTCiIX + lambda_eye, xTCiPi)\n            # Solve for Yi = ((xTx + xT(Cu-I)X) + lambda*I)^-1)xTCiPi, equation 5 from the paper\n    # End iterations\n    return X, Y.T # Transpose at the end to make up for not being transposed at the beginning. \n                         # Y needs to be rank x n. Keep these as separate matrices for scale reasons. \n#TOO SLOW\n#user_vecs, item_vecs = #implicit_weighted_ALS(product_train, lambda_val = 0.1, alpha = 15, iterations = 1,rank_size = 20)\n#user_vecs","bc6e0a27":"import implicit\nalpha = 15\nuser_vecs, item_vecs = implicit.alternating_least_squares(product_train.astype('double'), \n                                                          factors=150, \n                                                          regularization = 0.1, \n                                                         iterations = 50)","a1807907":"from scipy.sparse.linalg import svds, eigs\n#user_vecs, s, item_vecs = svds(product_train.astype('double'), k=150)  #10 0.38 >40=0.31 will it jump higher now\n#item_vecs=item_vecs.T\n\n#svd is worse 62% AUC","d4779112":"#user_vecs=cluster_embedding\n#item_vecs=cluster_embedding_symp\n#umap is worse 50% AUC","e06c6074":"user_vecs[0,:].dot(item_vecs.T)[:5]\nimport matplotlib.pyplot as plt\n# synthetic reconstructed weighted disease-symptom matrix\nplt.imshow(user_vecs.dot(item_vecs.T))\n","8032e5f3":"from sklearn import metrics\ndef auc_score(predictions, test):\n    '''\n    This simple function will output the area under the curve using sklearn's metrics. \n    \n    parameters:\n    \n    - predictions: your prediction output\n    \n    - test: the actual target result you are comparing to\n    \n    returns:\n    \n    - AUC (area under the Receiver Operating Characterisic curve)\n    '''\n    fpr, tpr, thresholds = metrics.roc_curve(test, predictions)\n    return metrics.auc(fpr, tpr) \n\ndef calc_mean_auc(training_set, altered_users, predictions, test_set):\n    '''\n    This function will calculate the mean AUC by user for any user that had their user-item matrix altered. \n    \n    parameters:\n    \n    training_set - The training set resulting from make_train, where a certain percentage of the original\n    user\/item interactions are reset to zero to hide them from the model \n    \n    predictions - The matrix of your predicted ratings for each user\/item pair as output from the implicit MF.\n    These should be stored in a list, with user vectors as item zero and item vectors as item one. \n    \n    altered_users - The indices of the users where at least one user\/item pair was altered from make_train function\n    \n    test_set - The test set constucted earlier from make_train function\n    \n    \n    \n    returns:\n    \n    The mean AUC (area under the Receiver Operator Characteristic curve) of the test set only on user-item interactions\n    there were originally zero to test ranking ability in addition to the most popular items as a benchmark.\n    '''\n    \n    \n    store_auc = [] # An empty list to store the AUC for each user that had an item removed from the training set\n    popularity_auc = [] # To store popular AUC scores\n    pop_items = np.array(test_set.sum(axis = 0)).reshape(-1) # Get sum of item iteractions to find most popular\n    item_vecs = predictions[1]\n    for user in altered_users: # Iterate through each user that had an item altered\n        training_row = training_set[user,:].toarray().reshape(-1) # Get the training set row\n        zero_inds = np.where(training_row == 0) # Find where the interaction had not yet occurred\n        # Get the predicted values based on our user\/item vectors\n        user_vec = predictions[0][user,:]\n        pred = user_vec.dot(item_vecs).toarray()[0,zero_inds].reshape(-1)\n        # Get only the items that were originally zero\n        # Select all ratings from the MF prediction for this user that originally had no iteraction\n        actual = test_set[user,:].toarray()[0,zero_inds].reshape(-1) \n        # Select the binarized yes\/no interaction pairs from the original full data\n        # that align with the same pairs in training \n        pop = pop_items[zero_inds] # Get the item popularity for our chosen items\n        store_auc.append(auc_score(pred, actual)) # Calculate AUC for the given user and store\n        popularity_auc.append(auc_score(pop, actual)) # Calculate AUC using most popular and score\n    # End users iteration\n    \n    return float('%.3f'%np.mean(store_auc)),' > is better < worse ' ,float('%.3f'%np.mean(popularity_auc))  \n   # Return the mean AUC rounded to three decimal places for both test and popularity benchmark\n    \ncalc_mean_auc(product_train, product_users_altered, \n              [sparse.csr_matrix(user_vecs), sparse.csr_matrix(item_vecs.T)], product_test)\n# AUC for our recommender system","56aae72b":"customers_arr = np.array(customers) # Array of customer IDs from the ratings matrix\nproducts_arr = np.array(products) # Array of product IDs from the ratings matrix","5bbedad9":"def get_items_purchased(customer_id, mf_train, customers_list, products_list, item_lookup):\n    '''\n    This just tells me which items have been already purchased by a specific user in the training set. \n    \n    parameters: \n    \n    customer_id - Input the customer's id number that you want to see prior purchases of at least once\n    \n    mf_train - The initial ratings training set used (without weights applied)\n    \n    customers_list - The array of customers used in the ratings matrix\n    \n    products_list - The array of products used in the ratings matrix\n    \n    item_lookup - A simple pandas dataframe of the unique product ID\/product descriptions available\n    \n    returns:\n    \n    A list of item IDs and item descriptions for a particular customer that were already purchased in the training set\n    '''\n    cust_ind = np.where(customers_list == customer_id)[0][0] # Returns the index row of our customer id\n    purchased_ind = mf_train[cust_ind,:].nonzero()[1] # Get column indices of purchased items\n    prod_codes = products_list[purchased_ind] # Get the stock codes for our purchased items\n    return item_lookup.loc[item_lookup.StockCode.isin(prod_codes)]","9fa3298d":"customers_arr","a1ebc7d1":"get_items_purchased(customers_arr[-1:], product_train, customers_arr, products_arr, item_lookup),customers_arr[-1:]","c306099a":"from sklearn.preprocessing import MinMaxScaler\n\ndef rec_items(customer_id, mf_train, user_vecs, item_vecs, customer_list, item_list, item_lookup, num_items = 10):\n    '''\n    This function will return the top recommended items to our users \n    \n    parameters:\n    \n    customer_id - Input the customer's id number that you want to get recommendations for\n    \n    mf_train - The training matrix you used for matrix factorization fitting\n    \n    user_vecs - the user vectors from your fitted matrix factorization\n    \n    item_vecs - the item vectors from your fitted matrix factorization\n    \n    customer_list - an array of the customer's ID numbers that make up the rows of your ratings matrix \n                    (in order of matrix)\n    \n    item_list - an array of the products that make up the columns of your ratings matrix\n                    (in order of matrix)\n    \n    item_lookup - A simple pandas dataframe of the unique product ID\/product descriptions available\n    \n    num_items - The number of items you want to recommend in order of best recommendations. Default is 10. \n    \n    returns:\n    \n    - The top n recommendations chosen based on the user\/item vectors for items never interacted with\/purchased\n    '''\n    \n    cust_ind = np.where(customer_list == customer_id)[0][0] # Returns the index row of our customer id\n    pref_vec = mf_train[cust_ind,:].toarray() # Get the ratings from the training set ratings matrix\n    pref_vec = pref_vec.reshape(-1) + 1 # Add 1 to everything, so that items not purchased yet become equal to 1\n    print(pref_vec)\n    pref_vec[pref_vec > 2] = 0 # Make everything already purchased zero\n    rec_vector = user_vecs[cust_ind,:].dot(item_vecs.T) # Get dot product of user vector and all item vectors\n    # Scale this recommendation vector between 0 and 1\n    min_max = MinMaxScaler()\n    rec_vector_scaled = min_max.fit_transform(rec_vector.reshape(-1,1))[:,0] \n    recommend_vector = rec_vector_scaled #*pref_vec\n    # Items already purchased have their recommendation multiplied by zero\n    product_idx = np.argsort(recommend_vector)[::-1][:num_items] # Sort the indices of the items into order \n    \n    # of best recommendations\n    rec_list = [] # start empty list to store items\n    for index in product_idx:\n        code = item_list[index]\n        rec_list.append([code, item_lookup.StockCode.loc[item_lookup.StockCode == code].iloc[0]]) \n        # Append our descriptions to the list\n    codes = [item[0] for item in rec_list]\n    descriptions = [item[1] for item in rec_list]\n    print(codes,descriptions)\n    final_frame = pd.DataFrame({'StockCode': codes, 'Description': descriptions}) # Create a dataframe \n    return final_frame[['StockCode', 'Description']] # Switch order of columns around\n","44851041":"item_lookup","d4176999":"rec_items(customers_arr[882], product_train, user_vecs, item_vecs, customers_arr, products_arr, item_lookup,num_items = 20),get_items_purchased(customers_arr[882], product_train, customers_arr, products_arr, item_lookup),customers_arr[882]","f3bfa24e":"#fe typical problem Gastritis\nddx[ddx.diagnose=='Allergic rhinitis']","b2f9da7f":"#transformed here\nitem_lookup[item_lookup.StockCode=='Allergic rhinitis']","e7eaedd3":"#user\/customer=symptoms = rows 19133\n#item\/product=diseases = columns 8128\nuser_vecs.shape,item_vecs.shape,item_lookup.shape,product_train.shape, customers_arr.shape, products_arr.shape,product_test.shape, ","d1deedf8":"[i for i,x in enumerate(customers_arr) if x=='Allergic rhinitis']\n","354ea428":"ddx.groupby('sym').max()","d8b06dee":"#user\/customer=symptoms = rows 19133\n#item\/product=diseases = columns 8128\n# search a disease relevant questions !\n\nzoekziekte=[i for i,x in enumerate(products_arr) if x=='Sinusitis'][0]\nprint(zoekziekte)\nimpsymp=pd.DataFrame()\nimpsymp['rating']=user_vecs.dot(item_vecs[zoekziekte].T)\nimpsymp['symptoms']=customers_arr\nimpsymp.sort_values('rating',ascending=False)[:25]","ff9d01df":"#compare\nddx[ddx.diagnose=='Sinusitis'].sort_values('sym')","d6696d76":"ddx[ddx.symptom=='Runny nose'].sort_values('wei',ascending=False)[:10]","4abe14a5":"ddx[   (ddx.symptom=='Sneezing') | (ddx.symptom=='Runny nose')   ].sort_values('wei',ascending=False)[:20]","e52c6a60":"#one symptom relevant diseases ?\n\nzoeksymp=[i for i,x in enumerate(customers_arr) if x=='Runny nose'][0]\nprint(zoeksymp)\nimpdis=pd.DataFrame()\nimpdis['rating']=user_vecs[zoeksymp].dot(item_vecs.T)\nimpdis['disease']=products_arr\nimpdis.sort_values('rating',ascending=False)[:20]","ec1d6645":"[x for x in customers_arr if x in ['Sneezing','Runny nose']  ]","b08203fd":"#one symptom relevant diseases ?\nsearchsymp=['Sneezing','Runny nose']\nzoeksymp=[i for i,x in enumerate(customers_arr) if x in searchsymp]\nprint(zoeksymp)\n\nimpdis2=pd.DataFrame()\nimpdis=user_vecs[zoeksymp].dot(item_vecs.T)\nfor xi,si in enumerate(searchsymp):\n    impdis2[searchsymp[xi]]=impdis[xi,:]\nimpdis2['rating']=impdis2[searchsymp[0]]*impdis2[searchsymp[1]]\nimpdis2['disease']=products_arr\nimpdis2.sort_values('rating',ascending=False)[:20]","9729eecf":"#compare\nsearchsymp=ddx[ddx.diagnose=='Allergic rhinitis'].symptom.values\nzoeksymp=[i for i,x in enumerate(customers_arr) if x in searchsymp]\nprint(zoeksymp)\n\nzoeksymp=[i for i,x in enumerate(customers_arr) if x=='Rhinorrhea'][0]\nprint(zoeksymp)","e2885a60":"#search one symptom most similar symptoms\nzoeksymp=[i for i,x in enumerate(customers_arr) if x=='Runny nose'][0]\nprint(zoeksymp)\nuser_vecs[zoeksymp]\n\nfrom sklearn.metrics.pairwise import cosine_similarity\n\nbestsymp=cosine_similarity(user_vecs,[user_vecs[zoeksymp]])\nprint(bestsymp.T[0])\nimpsymp=pd.DataFrame()\nimpsymp['rating']=bestsymp.T[0]\nimpsymp['symptom']=customers_arr\nimpsymp.sort_values('rating',ascending=False)[:20]","997444aa":"zoeksymp=[i for i,x in enumerate(customers_arr) if x in ['Runny nose','Sneezing','Itching eyes']]\nnotsymp=[i for i,x in enumerate(customers_arr) if x in ['Headaches']]\n\nprint(zoeksymp,notsymp)\nuser_vecs[zoeksymp]\n\nfrom sklearn.metrics.pairwise import cosine_similarity\n\nbestvect=cosine_similarity(user_vecs,user_vecs[zoeksymp])\nnotvect=cosine_similarity(user_vecs,user_vecs[notsymp])\n\nimpsymp=pd.DataFrame()\nimpsymp['rating']=-notvect.T[0]\nfor xi in range(len(zoeksymp)):\n    impsymp['rating']+=bestvect.T[xi]\nimpsymp['symptom']=customers_arr\nimpsymp.sort_values('rating',ascending=False)[:20]","9307a834":"impdis2=pd.DataFrame()\nimpdis=user_vecs[zoeksymp+notsymp].dot(item_vecs.T)\nfor xi,si in enumerate(zoeksymp):\n    impdis2[zoeksymp[xi]]=impdis[xi,:]\nimpdis2[notsymp[0]]=impdis[3,:]\nimpdis2['rating']=impdis2[zoeksymp[0]]+impdis2[zoeksymp[1]]+impdis2[zoeksymp[2]]-impdis2[notsymp[0]]\nimpdis2['disease']=products_arr\nimpdis2.sort_values('rating',ascending=False)[:20]","e3796604":"impdis3=impdis2.sort_values('rating',ascending=False)[:20].merge(ddx,how='left',left_on='disease',right_on='diagnose').groupby('dis').max()\nimpdis3['rate2']=impdis3['rating']*impdis3['wei']\nimpdis3.sort_values('rate2')","0d4062e7":"#user\/customer=symptoms = rows 19133\n#item\/product=diseases = columns 8128\n# search a disease relevant questions !\n\n\nimpdis4=pd.DataFrame()\ntemp= (user_vecs[zoeksymp+notsymp].dot(item_vecs.T)).sum(axis=0)\nproduct_train.shape,temp.shape\n\nimpdis4=pd.DataFrame(cosine_similarity(user_vecs[zoeksymp],item_vecs)  ).T\nimpdis4['disease']=products_arr\nimpdis4['rating']=impdis4[0]+impdis4[1]+impdis4[2]\nimpdis5=impdis4.sort_values('rating',ascending=False)[:100].merge(ddx,how='left',left_on='disease',right_on='diagnose').groupby('dis').max()\nimpdis5.sort_values('rating',ascending=False)[:20]","9e4e32c6":"#top10 symptoms\ndef top10symp(symptoom_oms,symptoomnr,aantal):\n    #search one symptom most similar symptoms\n    #zoeksymp=[i for i,x in enumerate(customers_arr) if x==symptoom_oms][0]\n    #print(zoeksymp)\n    user_vecs[symptoomnr]\n\n    from sklearn.metrics.pairwise import cosine_similarity\n\n    bestsymp=cosine_similarity(user_vecs,[user_vecs[symptoomnr]])\n    impsymp=pd.DataFrame()\n    \n    impsymp['rank']=bestsymp.T[0]\n    impsymp['uppersymptom']=symptoomnr\n    impsymp['upperoms']=symptoom_oms\n    impsymp['symptom']=customers_arr\n    return impsymp.sort_values('rank',ascending=False)[:aantal+1]\n    \ntop10symp('Runny nose or nasal congestion',8400,10)","d3833871":"#top diseases per two symptompairs\ndef top10disease(zoeksymp,aantal):\n    impdis4=pd.DataFrame()\n    temp= (user_vecs[zoeksymp].dot(item_vecs.T)).sum(axis=0)\n    impdis4=pd.DataFrame(cosine_similarity(user_vecs[zoeksymp],item_vecs)  ).T\n    impdis4['disease']=products_arr\n    impdis4['rating']=impdis4[0]+impdis4[1]\n    impdis4['sym1']=zoeksymp[0]\n    impdis4['sym2']=zoeksymp[1]\n    impdis5=impdis4.sort_values('rating',ascending=False)[:100].merge(ddx,how='left',left_on='disease',right_on='diagnose').groupby('dis').max()\n    return impdis5.sort_values('rating',ascending=False)[:aantal]\n\ntop10disease([0,2227],10)","a13003b3":"symptunique=ddx.groupby(['sym','symptom']).max()\nsymptunique=symptunique[:300]\nsymptunique","85ccce07":"tree=top10symp('',0,10)\nfor xi,ci in enumerate(symptunique.reset_index().symptom):\n    print(xi,ci)\n    tree=tree.append(top10symp(ci,xi,10))\n    \ntree","85b70182":"tree.index[30]","e06fdf75":"import umap\n\ncluster_embedding_symp = umap.UMAP(n_neighbors=30, min_dist=0.0,\n                              n_components=2, random_state=42).fit_transform(product_train.T)\n\nplt.figure(figsize=(10,9))\nplt.scatter(cluster_embedding_symp[:, 0], cluster_embedding_symp[:, 1], s=3, cmap='Spectral')\n","cbb34bdc":"import umap\n\ncluster_embedding = umap.UMAP(n_neighbors=30, min_dist=0.0, n_components=2, random_state=42).fit_transform(product_train)\n\nplt.figure(figsize=(10,9))\nplt.scatter(cluster_embedding[:, 0], cluster_embedding[:, 1], s=3, cmap='Spectral')\n"}}