{"cell_type":{"cf5147fd":"code","e50b7aff":"code","f5c61b33":"code","24d86114":"code","e1527c15":"code","7f5c4c19":"code","3d263645":"code","a95e2ea0":"code","aa7fb3f5":"code","a10dcd8d":"code","bb7cef68":"code","05afa743":"code","515a9b67":"code","460f79c5":"code","ece51e79":"code","4239dbd3":"code","5f0ef9df":"code","d65cf248":"code","0a788ed9":"markdown","600f1308":"markdown","fa75720e":"markdown","c63e2135":"markdown","6e61f21c":"markdown","bce91db5":"markdown"},"source":{"cf5147fd":"import re","e50b7aff":"pattern = r'hello l'\nword = 'Hello'\nword2 = \"hello letter\"\n\nprint(re.match(pattern, word))\nprint(re.match(pattern, word2))\n\nif re.match(pattern, word):\n    print('1. It matches the pattern and the word')\nelse:\n    print('1. It does not match')\n    \nif re.match(pattern, word2):\n    print('2. It matches the pattern and the word')\nelse:\n    print('2. It does not match')","f5c61b33":"text = 'HTML is the standard markup language for Web pages. The code looks like <h1> hello <\/h1>'\n\npattern = r'<.*>'  # Any character will match 0 or more times\nx = re.findall(pattern, text)\nprint('x: ', x)\n\npattern2 = r'<.*?>'  # It will take into account only the part of the string contains <>\nx2 = re.findall(pattern2, text)\nprint('x2: ', x2)\n\npattern3 = r'<.*?>'\nx3 = re.search(pattern3, text)\nprint('x3: ', x3)\nprint('x3: ', x3.group())\n\n\npattern4 = r'<h.+?>'\nx4 = re.findall(pattern4, text)\nprint('x4: ', x4)","24d86114":"pattern5 = r'^HTML'  # the text starts with HTML\nx5 = re.findall(pattern5, text)\nprint('x5: ', x5)\n\nif x5:\n    print('It matches')\nelse:\n    print('It does not match')\n    \npattern6 = r'h1>$'  # the text ends with h1>\nx6 = re.findall(pattern6, text)\nprint('x6: ', x6)\n\npattern7 = r'h1$'  # the text does not end with h1. It is missing >. Therefore, it returns an empty list\nx7 = re.findall(pattern7, text)\nprint('x7: ', x7)","e1527c15":"# Set of characters ...\n\ntext = 'C is a programming language.'\n\npattern = r'[^abc]' # Returns any character, except a, b or c\nx = re.findall(pattern, text)\nprint('x: ', ''.join(x))\n\npattern1 = r'[abc]' # Returns a match of the following characters: a,b or c\nx1 = re.findall(pattern1, text)\nprint('x1: ', ''.join(x1))\n\npattern2 = r'[a-z]' # Returns a match of lower case characters from a to z\nx2 = re.findall(pattern2, text)\nprint('x2: ', x2)\n\npattern3 = r'[a-zA-Z]' # Returns a match of lower case and upper case characters from a to z and from A to Z\nx3 = re.findall(pattern3, text)\nprint('x3: ',x3)\n\npattern4 = r'[0-9]' # Returns a match of digits between 0 and 9\nx4 = re.findall(pattern4, text)\nprint('x4: ',x4)","7f5c4c19":"text = 'COVID-19 vaccines have proven to be safe, effective and life-saving. To be approved, vaccines are required to have a high efficacy rate of 50% or above.'","3d263645":"x = re.findall(r'\\s', text)\nprint(x)\n\nif x:\n    print('It matches')\nelse:\n    print('It does not match')\n    \nx1 = re.findall(r'\\S', text)\nprint(x1)\n\nif x1:\n    print('It matches')\nelse:\n    print('It does not match')","a95e2ea0":"x = re.findall(r'\\w', text)\nprint(x)\n\nif x:\n    print('It matches')\nelse:\n    print('It does not match')\n    \nx1 = re.findall(r'\\W', text)\nprint(x1)\n\nif x1:\n    print('It matches')\nelse:\n    print('It does not match')","aa7fb3f5":"x = re.findall(r'\\d', text)\nprint(x)\n\nif x:\n    print('It matches')\nelse:\n    print('It does not match')\n    \nx1 = re.findall(r'\\D', text)\nprint(x1)\n\nif x1:\n    print('It matches')\nelse:\n    print('It does not match')","a10dcd8d":"text = 'The life is beautiful'\n\nx = re.findall(r'\\ATh', text)  # 'Th' is in the beginning of the string\nprint(x)\n\nif x: \n    print('It maches')\nelse:\n    print('It does not match')\n\nx1 = re.findall(r'\\Aare', text)  # the word 'are' is not in the beginning of the string\nprint(x1)\nif x1: \n    print('It maches')\nelse:\n    print('It does not match')\n","bb7cef68":"x = re.findall(r'beautiful\\Z', text)  # 'beautiful' is at the end of the string\nprint(x)\n\nif x: \n    print('It maches')\nelse:\n    print('It does not match')\n\nx1 = re.findall(r'beautiful.\\Z', text)  # 'beautiful.' is not at the end of the string because the dot is not included.\nprint(x1)\nif x1: \n    print('It maches')\nelse:\n    print('It does not match')\n","05afa743":"text = 'Mexico is a land of extremes, with high mountains and deep canyons in the center of the country. The official name is United Mexican State'\n\nx = re.findall(r'\\bMe', text)  # It matches the specified characters are at the beginning of the text. In this case, Mexico, Mexico\nprint('x: ', x)\n\nif x:\n    print(\"It matches\")\nelse:\n    print(\"It does not match\")\n    \nx1 = re.findall(r'ns\\b', text)  # It matches the specified characters are at the end of the text. In this case: mountains, canyons\nprint('x1: ',x1)\n\nif x1:\n    print(\"It matches\")\nelse:\n    print(\"It does not match\")\n    \nx2 = re.findall(r'\\bReally', text)  # Returns en empty list because Really does not match at the beginning of the text\nprint('x2: ',x2)","515a9b67":"\nx = re.findall(r'\\Bun', text)  # Returns the matches that are in the middle characters of the words \nprint(x)\n\nif x:\n    print(\"It matches\")\nelse:\n    print(\"It does not match\")","460f79c5":"# About split(pattern, string, maxsplit=0, flags=0) function ...\n\ntext = 'France adjusts plans for Covid-19 health pass, announces fourth wave of epidemic.'\n# split a string according to whitespaces\nprint(re.split('\\s', text))\n# split a string according to commas\nprint(re.split(',', text))\n# split a string according to a question mark\nprint(re.split('Z', text))  # Z does not exist in 'text', and splits will return a list contains just an item","ece51e79":"# About sub(pattern, repl, string, count=0, flags=0) function ...\n\nx = re.sub(r'\\s', '-', text)  # Replaces '-' when it matches white spaces\nprint(x)\n\nx2 = re.sub(r'\\d', '*' ,text)  # Replaces '*' when it matches digits from 0-9\nprint(x2)\n\nx3 = re.sub('Z', '*', text) # It does not replace anything because there are not matches\nprint(x3)","4239dbd3":"# About findall(pattern, string, flags=0) function ...\n\nx = re.findall(r'ce', text)\nprint(x)  # The list returns two 'ce' from the words 'France' and 'announces'\n\nx1 = re.findall(r'\\s', text)  # Latches the white spaces\nprint(x1)\n\nx2 = re.findall(r'HELLO', text) # If it does match, it returns an empty list\nprint(x2)","5f0ef9df":"# About search(pattern, string, flags=0) function ...\n\npos = re.search(r'\\s', text)\n# In this case the first match (the first white space) is in the position 6,7.\nprint(pos)\n\npos2 = re.search(r'hello', text)\nprint(pos2)","d65cf248":"# About compile(pattern, flags=0) function ...\n\npattern = re.compile(r'\\S')\nx = pattern.search(text)\n\nprint(x)\nprint(x.group())  # It returns 'F' because it is the first coincidence in the text","0a788ed9":"## Functions\n\n**re** has the following functions to search a string for a match.\n\n1. *split(pattern, string, maxsplit=0, flags=0)* - Splits a string according to each match. It returns a list\n2. *sub(pattern, repl, string, count=0, flags=0)* - Replaces one or many matches\n3. *findall(pattern, string, flags=0)* - Returns a list. It contains all the matches in the string according to the pattern. If it does not match, it returns an empty list.\n4. *search(pattern, string, flags=0)* - Returns a Match object if the string matches the pattern. Otherwise, it returns *None*. \n5. *compile(pattern, flags=0)* - It allows to compute a regular expression pattern into a regular expression object","600f1308":"**re.match(pattern, word)** function returns *None* if the word does not match the pattern. Otherwise, it returns a Match  object that indicates the word matches the pattern. The object looks like `<re.Match object; span=(0, 7), match='hello l'>`, *span=(initial_match, end_match)* specifies the first and last characters of the string that match with the pattern, *match='string'* shows the match string.","fa75720e":"# Regular Expressions (RegEx) with Python\n\nThis tutorial is a condensed version of the [official documentation](https:\/\/docs.python.org\/3\/library\/re.html)","c63e2135":"# Special Characters\n\n- `.` Any character (except a newline)\n- `*` Verifies if the previous character or regular expression matches 0 or more times\n- `+` Verifies if the previous character or regular expression matches 1 or more times\n- `?` Verifies if the previous character or regular expression matches 0 or 1 time\n- `^` Matches the start of the string \n- `$` Matches the end of the string \n- `|` Indicates OR \n- `()` Groups\n- `[]` Specifies a set of characters\n- `{}` Specifies the number of repetitions","6e61f21c":"We use **Regular Expressions (RegEx)** to check if a pattern exists in a text (string) or not. Regex is helpful to check if users well write an email, if a password keeps the minimum requirements asked by the website. For instance, a strong password contains a minimum of an uppercase, a number, and a special character.  \n\nTo work with Regex, we will use **re** package created by **Python**.","bce91db5":"## Special Sequences\n\nSpecial characters are represented with `\\` follows by a character. They have a special meaning in the patterns. \n\n- `\\s` Returns a match where the string contains white spaces\n- `\\S` Returns a match where the string DOES NOT contain white spaces\n- `\\w` Returns a match where the string contains the following word characters `a-z`, `A-Z`, `0-9` and `_`\n- `\\W` Returns a match where the string DOES NOT contain the following word characters  `a-z`, `A-Z`, `0-9` and `_`\n- `\\d` Returns a match where the string contains digits from 0-9\n- `\\D` Returns a match where the string DOES NOT contain digits from 0-9\n- `\\A` Returns a match if the string contains the initial characters are specified in the pattern\n- `\\Z` Returns a match if the string contains the end characters are specified in the pattern\n- `\\b` Returns a match if the string contains the initial or end characters specified in the pattern\n- `\\B` Returns a match if the string contains intermediate characters. It means, NOT initial or end characters\n- `\\t` Returns matches of *tab* \n- `\\n` Returns matches of *newline* \n- `\\r` Returns matches of *return*"}}