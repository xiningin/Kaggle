{"cell_type":{"f9136edd":"code","63ed2fd3":"code","cae0c2da":"code","1fe133b4":"code","38a751f7":"code","d9a0439f":"code","16d113d1":"code","26a1c821":"code","77bb8fc5":"code","086d0550":"code","808fa5ac":"code","95f765f4":"code","4513bc39":"code","7f8812cb":"code","ee9ab0de":"code","5d149cf8":"code","b209b04e":"code","d7ad286c":"code","94489c69":"code","94cc4121":"code","347c2683":"code","c4ea7a5a":"code","4fcd6afe":"code","39f1c744":"code","d2b1a0f0":"code","42b1c76b":"code","d47db651":"code","1cb76951":"code","9fdd8a3d":"code","442ad0da":"code","9ed8dc5d":"code","79ae6192":"code","b784b8a1":"code","98874398":"code","be6f6cc2":"code","388f46f0":"code","6c1a810e":"code","0fe7f9de":"code","35e32812":"code","3253acb2":"code","55f743b6":"code","8011e91d":"code","8c787a83":"code","be8896c0":"markdown","76113d5e":"markdown","74d10aeb":"markdown","909c8476":"markdown","546c4ac5":"markdown","5d58668d":"markdown","ee44085a":"markdown","565084a4":"markdown","81b43c31":"markdown","cc099c3c":"markdown","3d33a646":"markdown","b3bc8ab9":"markdown","4e797302":"markdown","d87eec88":"markdown"},"source":{"f9136edd":"import pandas as pd","63ed2fd3":"#Loading the datasets\n\ntrue_df = pd.read_csv('\/kaggle\/input\/fake-and-real-news-dataset\/True.csv')\nfake_df = pd.read_csv('\/kaggle\/input\/fake-and-real-news-dataset\/Fake.csv')","cae0c2da":"true_df.head()","1fe133b4":"fake_df.head()","38a751f7":"#Creating 'check' on both dfs that will be the target feature.\n\ntrue_df['check'] = 'TRUE'\nfake_df['check'] = 'FAKE'","d9a0439f":"true_df.head()","16d113d1":"fake_df.head()","26a1c821":"true_df.describe()","77bb8fc5":"fake_df.describe()","086d0550":"#We will combine both dfs.\n\ndf_news = pd.concat([true_df, fake_df])","808fa5ac":"df_news.head(30)","95f765f4":"df_news.info()","4513bc39":"#Shuffling to see some Fakes\n\ndf_news.sample(frac = 1)","7f8812cb":"#Searching for null values.\n\ndf_news.isna().sum()","ee9ab0de":"#We will join title, text and subject to create the article feature\ndf_news['article'] = df_news['title']+\"\"+df_news['text']+\"\"+['subject']","5d149cf8":"#Creating the final Dataframe with article and check.\n\ndf = df_news[['article','check']]","b209b04e":"#Converting to lower case\n\ndf['article'] = df['article'].apply(lambda x: x.lower())","d7ad286c":"df['article'].head()","94489c69":"#Removing punctuation\n\nimport string\n\ndef punctuation_removal(messy_str):\n    clean_list = [char for char in messy_str if char not in string.punctuation]\n    clean_str = ''.join(clean_list)\n    return clean_str","94cc4121":"df['article'] = df['article'].apply(punctuation_removal)\ndf['article'].head()","347c2683":"#Removing stopwords\n\nfrom nltk.corpus import stopwords\nstop = stopwords.words('english')\n\ndf['article'].apply(lambda x: [item for item in x if item not in stop])","c4ea7a5a":"df['article']","4fcd6afe":"%matplotlib inline\n\nfrom wordcloud import WordCloud\n\nall_words = ' '.join([text for text in df.article])\n\nwordcloud = WordCloud(width= 800, height= 500,\n                          max_font_size = 110,\n                          collocations = False).generate(all_words)","39f1c744":"import matplotlib.pyplot as plt\n\nplt.figure(figsize=(10,7))\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","d2b1a0f0":"#Function to generate wordcloud to True news.\n\ndef wordcloud_true(text, column_text):\n    true_text = text.query(\"check == 'TRUE'\")\n    all_words = ' '.join([text for text in true_text[column_text]])\n\n    wordcloud = WordCloud(width= 800, height= 500,\n                              max_font_size = 110,\n                              collocations = False).generate(all_words)\n    plt.figure(figsize=(10,7))\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.axis(\"off\")\n    plt.show()","42b1c76b":"#Function to generate wordcloud to Fake news.\n\ndef wordcloud_fake(text, column_text):\n    fake_text = text.query(\"check == 'FAKE'\")\n    all_words = ' '.join([text for text in fake_text[column_text]])\n\n    wordcloud = WordCloud(width= 800, height= 500,\n                              max_font_size = 110,\n                              collocations = False).generate(all_words)\n    plt.figure(figsize=(10,7))\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.axis(\"off\")\n    plt.show()","d47db651":"#Wordcloud of the true news.\n\nwordcloud_true(df, \"article\")","1cb76951":"#Wordcloud of the fake news.\n\nwordcloud_fake(df, \"article\")","9fdd8a3d":"from nltk import tokenize\n\ntoken_space = tokenize.WhitespaceTokenizer()","442ad0da":"import seaborn as sns\nimport nltk\n    \ndef pareto(text, column_text, quantity):\n    all_words = ' '.join([text for text in text[column_text]])\n    token_phrase = token_space.tokenize(all_words)\n    frequency = nltk.FreqDist(token_phrase)\n    df_frequency = pd.DataFrame({\"Word\": list(frequency.keys()),\n                                   \"Frequency\": list(frequency.values())})\n    df_frequency = df_frequency.nlargest(columns = \"Frequency\", n = quantity)\n    plt.figure(figsize=(12,8))\n    ax = sns.barplot(data = df_frequency, x = \"Word\", y = \"Frequency\", color = 'blue')\n    ax.set(ylabel = \"Count\")\n    plt.show()","9ed8dc5d":"#The 20 more frequent words.\n\npareto(df, \"article\", 20)","79ae6192":"#Lemmatization\n\n'''from nltk.stem import WordNetLemmatizer \n\nlemmatizer = WordNetLemmatizer()\n\ndef lemmatize_text(text):\n    return [lemmatizer.lemmatize(w) for w in df[\"article\"]]\n\ndf['article'] = df[\"article\"].apply(lemmatize_text)'''","b784b8a1":"from sklearn.feature_extraction.text import CountVectorizer\n\n#Creating the bag of words\nbow_article = CountVectorizer().fit(df['article'])\n\narticle_vect = bow_article.transform(df['article'])","98874398":"#TF-IDF\n\nfrom sklearn.feature_extraction.text import TfidfTransformer\n\ntfidf_transformer = TfidfTransformer().fit(article_vect)\nnews_tfidf = tfidf_transformer.transform(article_vect)\nprint(news_tfidf.shape)","be6f6cc2":"#We will use 20% of the data to train the models.\n\nfrom sklearn.model_selection import train_test_split\nX = news_tfidf\ny = df['check']\n\n\n\nX_train, X_test, Y_train,Y_test= train_test_split(X, y, test_size=0.2)","388f46f0":"#Naive Bayes model\nfrom sklearn.naive_bayes import MultinomialNB\n\nfakenews_detector = MultinomialNB().fit(X_train, Y_train)","6c1a810e":"#Model Evaluation\npredictions = fakenews_detector.predict(X_test)\nprint(predictions)","0fe7f9de":"from sklearn.metrics import classification_report\nprint (classification_report(Y_test, predictions))","35e32812":"from sklearn.linear_model import SGDClassifier\n\nfake_detector_svc = SGDClassifier().fit(X_train, Y_train)","3253acb2":"prediction_svc = fake_detector_svc.predict(X_test)","55f743b6":"print (classification_report(Y_test, prediction_svc))","8011e91d":"from sklearn.linear_model import LogisticRegression\n\nfake_detector_logistic = LogisticRegression().fit(X_train, Y_train)","8c787a83":"predictions_log_reg = fake_detector_logistic.predict(X_test)\nprint (classification_report(Y_test, predictions_log_reg))","be8896c0":"# Fake news detector","76113d5e":"Support Vector Machine.","74d10aeb":"Let's begin importing pandas.","909c8476":"Lemmatization was taking several hours to execute so I decided to comment in this frist version.","546c4ac5":"Visualizing the data with Wordcloud.","5d58668d":"We will create the BOW and the TF-IDF.","ee44085a":"Logistic regression.","565084a4":"![true-false-fake-real-signs-ss-1920_mqs0yk.jpg](attachment:true-false-fake-real-signs-ss-1920_mqs0yk.jpg)","81b43c31":"The objective of this work is to use Machine learning to predict if the news is True or Fake.","cc099c3c":"Let's try the Naive Bayes.","3d33a646":"Now we will combine both dataset and in the next step we will check it shuffled.","b3bc8ab9":"We will divide the data in to fake and true. ","4e797302":"Now We will try some models.","d87eec88":"Now we will plot the pareto chart to better visualize the frequencies of the words."}}