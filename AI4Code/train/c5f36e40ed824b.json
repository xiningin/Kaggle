{"cell_type":{"243eaa12":"code","4974cd66":"code","74b032b0":"code","410a24cc":"code","f0f1f7cd":"code","97b1696a":"code","d37ee215":"code","30fb50d7":"code","28d47831":"code","87a9ead0":"code","8c76f7c4":"code","fd327d2d":"code","3a0d2d60":"code","c465bb26":"code","5b9ef23e":"code","946c9f1e":"code","40f684dc":"code","bba1b7f6":"code","7e1a08d0":"code","68f25ca9":"code","9db1f1ca":"code","54d15b28":"code","b14d0c17":"code","543389af":"code","531429ba":"code","3f0b6d20":"code","f0d5a9ba":"code","783ac8ec":"code","75dab1fb":"code","f6096c54":"code","b1a1bd0b":"code","8d59466c":"markdown","d6bf20c4":"markdown","d2e594c5":"markdown","9f024e38":"markdown","cbbff8a1":"markdown","ca5e2e6d":"markdown","8530c6ea":"markdown","6c170715":"markdown","626f3289":"markdown","af712412":"markdown","7d2aca6f":"markdown","4cf8ba51":"markdown","c3b31cee":"markdown","daafa3b4":"markdown","b1c2c3f5":"markdown"},"source":{"243eaa12":"# Loading the required libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.feature_extraction.text import CountVectorizer","4974cd66":"# Loading the data set\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\ndata = pd.concat([train, test])\ndata.isna().sum()","74b032b0":"# Creating features has_age and has_cabin\ndata['age_na'] = data['Age'].isna().replace([True, False], [1, 0])\ndata['cabin_na'] = data['Cabin'].isna().replace([True, False], [1, 0])","410a24cc":"# Visualizing the features with missing values\n\nfare = data.loc[data['Fare'].notna(), 'Fare']\nage = data.loc[data['Age'].notna(), 'Age']\nembarked = data.loc[data['Embarked'].notna(), 'Embarked'].value_counts()\n\n# Plotting the informations\nfig, ax = plt.subplots(1,3, figsize = (12,3))\nax[0].boxplot(age, labels = ['Age'])\nax[1].boxplot(fare, notch= True, labels = ['Fare'])\nax[2].bar(embarked.index, embarked.values, color = ['r', 'g', 'b'], alpha=0.5)\n\nplt.show()","f0f1f7cd":"# Filling the missing values except the ones at the Cabin column...\ndata_filled = data.copy()\n\ndata_filled.loc[data['Age'].isna(), 'Age'] = round(data_filled['Age'].mean())\ndata_filled.loc[data['Fare'].isna(), 'Fare'] = data_filled['Fare'].median()\ndata_filled.loc[data['Embarked'].isna(), 'Embarked'] = 'S'","97b1696a":"survived = data_filled['Survived'] == 1\ndied = data_filled['Survived'] == 0\ntrain = data_filled['Survived'].notna()\nfare_100 = data_filled['Fare']<=100\nbins = list(range(0,100,7))","d37ee215":"fig, ax = plt.subplots(1, 2, figsize=(18,4), sharey=True)\n\nsns.distplot(data_filled[train]['Fare'], hist = False, color = 'green', ax = ax[0], label= 'Total')\nsns.distplot(data_filled[survived]['Fare'], hist = False, color = 'blue', ax = ax[0], label= 'Survived')\nsns.distplot(data_filled[died]['Fare'], hist = False, color = 'red', ax = ax[0], label= 'Died')\nax[0].set_title('Total fare distribution')\n\nsns.distplot(data_filled[train & fare_100]['Fare'], hist = False, color = 'green', ax = ax[1], label= 'Total')\nsns.distplot(data_filled[survived & fare_100]['Fare'], hist = False, color = 'blue', ax = ax[1], label= 'Survived')\nsns.distplot(data_filled[died & fare_100]['Fare'], hist = False, color = 'red', ax = ax[1], label = 'Died')\nax[1].set_title('Fare distribution (Less than 100)')\n\nfares = data_filled[train]['Fare'].apply(lambda x: x\/\/10).round().value_counts()\nfare_suvived = data_filled[survived]['Fare'].apply(lambda x: x\/\/10).round().value_counts().rename(\"Survived\")\nfares = pd.concat([fares, fare_suvived], axis = 1).replace(np.nan, 0)\nfares['Percentage'] = 100*fares['Survived']\/fares['Fare']\nfig2, ax2 = plt.subplots(1, figsize=(18, 3))\n\nax2.bar(fares.index, fares.Percentage)\nax2.set_title(\"Rate of survival for each increase of 10 in Fare\")","30fb50d7":"def categorize_fare(fare):\n    if fare < 10:\n        return 0\n    elif fare < 50:\n        return 1\n    elif fare < 100:\n        return 2\n    else:\n        return 3\n    \ndata_filled['Fare_Categorical'] = data_filled['Fare'].round().apply(categorize_fare)","28d47831":"survived = data_filled['Survived'] == 1\ndied = data_filled['Survived'] == 0\nmen = data_filled['Sex'] == 'male'\nwomen = data_filled['Sex'] == 'female'\n\n# Histogram per of ages, based on the sex and the survival\n\nbins = list(range(0,90,9))\n\nfig, ax = plt.subplots(1, 3, figsize = (15,4))\nax[0].hist(data_filled[survived]['Age'], histtype='step', color='blue', bins = bins, label='Survived',linewidth=3)\nax[0].hist(data_filled[died]['Age'], histtype='step', color='red', bins = bins, label='Died', linewidth=3)\nax[0].legend()\nax[0].set_xlabel('Age')\nax[0].set_ylabel('Number of passengers')\nax[0].set_title('Histogram of ages')\n\n\nax[1].hist(data_filled[women & survived]['Age'], histtype = 'step', color='red', bins = bins, label = 'Women', linewidth=3)\nax[1].hist(data_filled[men & survived]['Age'], histtype = 'step', color='blue',  bins = bins, label = 'Men', linewidth=3)\nax[1].legend()\nax[1].set_xlabel(\"Age\")\nax[1].set_title(\"Survivors per age and Sex\")\n\nax[2].hist(data_filled[women & died]['Age'], histtype = 'step', color='red', bins = bins, label = 'Woman', linewidth=3)\nax[2].hist(data_filled[men & died]['Age'], histtype = 'step', color='blue', bins = bins, label = 'Men', linewidth=3)\nax[2].legend()\nax[2].set_xlabel(\"Age\")\nax[2].set_title(\"Passengers died per age and sex\")\n","87a9ead0":"def categorize_age(age):\n    if age < 10:   # Child\n        return 0\n    elif age < 20: # Mid Age\n        return 1\n    elif age < 55: # Adult\n        return 2\n    else:          # Elderly\n        return 3\n    \ndata_filled['Age_Categorical'] = data_filled['Age'].round().apply(categorize_age)","8c76f7c4":"first_c = data_filled[data_filled['Pclass'] == 1]\nsecond_c = data_filled[data_filled['Pclass'] == 2]\nthird_c = data_filled[data_filled['Pclass'] == 3]\nprint(first_c.shape, second_c.shape, third_c.shape)","fd327d2d":"# Percentage of survival of each class\nfirst_c = 100*first_c['Survived'].value_counts()\/first_c['Survived'].count()\nsecond_c = 100*second_c['Survived'].value_counts()\/second_c['Survived'].count()\nthird_c = 100*third_c['Survived'].value_counts()\/third_c['Survived'].count()\n\npercentages = pd.concat([first_c, second_c, third_c], axis=1, keys=['First', 'Second', 'Third']).transpose()\n\nfig, ax = plt.subplots(figsize = (6,3))\nax.bar(percentages.index, percentages[1], label = 'Survived', color = 'blue', alpha = 0.6)\nax.set_xlabel(\"Class\")\nax.set_ylabel(\"Percentage\")\nax.set_title(\"Percentage of survival in each class\")\nax.legend()","3a0d2d60":"embarked = data_filled[data_filled['Survived'].notna()]['Embarked'].value_counts()\nemb_survived = data_filled[survived]['Embarked'].value_counts()\nemb_survived_men = data_filled[survived & men]['Embarked'].value_counts()\nemb_survived_women = data_filled[survived & women]['Embarked'].value_counts()\npercentages = 100*emb_survived\/embarked\npercentages_men = 100*emb_survived_men\/embarked.values\npercentages_women = 100*emb_survived_women\/embarked.values\n\nfig, ax = plt.subplots(1, figsize=(6,4))\nax.bar(percentages.index, percentages.values, label='Survived')\nax.set_title('Percentage of survival per boarding place')\nax.set_ylabel('Percentage')\nax.legend()","c465bb26":"data_filled['Embarked'] = data_filled['Embarked'].replace({'C': 0, 'Q': 1, 'S':2})","5b9ef23e":"# Adding the 'Family' Feature\ndata_filled['Family'] = data_filled['SibSp'] + data_filled['Parch']\n\n# Lets see famiily\nfamily = data_filled[data_filled['Survived'].notna()]['Family'].value_counts()\nfamily_survived = data_filled[survived]['Family'].value_counts().rename(\"family_survived\")\nfamily_all = pd.concat([family, family_survived], axis = 1).replace(np.nan, 0)\n\nfig, ax = plt.subplots(1, figsize=(7,5))\nax.bar(family_all.index, 100*family_all.family_survived\/family_all.Family)\nax.set_title('Percentage of survival due the number of family members')\n","946c9f1e":"# 3 categories to Family (No Family, 1-3, 4 or more)\n\ndef categorize_family(members):\n    if members == 0:    # No Family\n        return 0\n    elif members < 4:   # 1 - 3 members\n        return 1\n    else:               # 4 or more members\n        return 2\n    \ndata_filled['Family'] = data_filled['Family'].apply(categorize_family)\n","40f684dc":"# Analyzing the feature 'Name'\n\ncv = CountVectorizer()\ncount_names = cv.fit_transform(data_filled.Name)\nword_count = pd.DataFrame(cv.get_feature_names(), columns = ['word'])\nword_count['count'] = count_names.sum(axis=0).tolist()[0]\nword_count = word_count.sort_values(\"count\", ascending = False).reset_index(drop=True)\n\n#word_count[0:50]\nword_count[0:5]","bba1b7f6":"def extract_title(name):\n    name = name.lower().replace(\".\", \"\")\n\n    titles = ['mr', 'miss', 'mrs', 'master', 'dr', 'rev']\n    others = ['don', 'dona', 'sir','mme', 'mlle', 'ms', 'major', 'capt', 'lady', 'col', 'countess', 'jonkheer']\n    \n    for word in name.split():\n        if word in titles:\n            return word\n        elif word in others:\n            return 'other'\n        \ndata_filled['Title'] = data_filled['Name'].apply(extract_title)\ndata_filled['Title'].value_counts()","7e1a08d0":"titles = data_filled[data_filled['Survived'].notna()]['Title'].value_counts()\ntitles_survived = data_filled[survived]['Title'].value_counts().rename('titles_survived')\ntitles_all = pd.concat([titles, titles_survived], axis = 1).replace(np.nan, 0)\ntitles_all['Percentage'] = 100*titles_all.titles_survived\/titles_all.Title\ntitles_all.sort_values(by='Percentage', inplace = True)\nplt.bar(titles_all.index, titles_all.Percentage)","68f25ca9":"def categorize_title(title):\n    if title == 'rev':      # 0 - Reverend\n        return 0\n    elif title == 'mr':     # 1 - Mister\n        return 1\n    elif title == 'dr':     # 2 - Doctor or Master\n        return 2\n    elif title == 'master': \n        return 2\n    elif title == 'other':  # 3 - Other\n        return 3\n    elif title == 'miss':   # 4 - Miss or Misses\n        return 4\n    else:\n        return 4\n    \n    \ndata_filled['Title'] = data_filled['Title'].apply(categorize_title)","9db1f1ca":"# Sex \ndata_filled['Sex'] = data_filled['Sex'].replace(['male', 'female'], [0,1])","54d15b28":"data_filled.drop(['Name', 'Parch', 'Age', 'Fare', 'SibSp', 'Ticket', 'Cabin'], axis='columns', inplace = True)","b14d0c17":"data_filled.head()","543389af":"train = data_filled[data_filled['Survived'].notna()]\ntest = data_filled[data_filled['Survived'].isna()]","531429ba":"fig, ax = plt.subplots(figsize = (9,9))\nsns.heatmap(train.corr(), center = 0, annot = True, square = True, cmap = 'YlGn', ax = ax, fmt='.2g', linewidths=3)","3f0b6d20":"# Required libraries\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC","f0d5a9ba":"X = train.loc[:, 'Pclass':'Family']\ny = train.loc[:, 'Survived']","783ac8ec":"knn = KNeighborsClassifier()\nlogreg = LogisticRegression()\ndt = DecisionTreeClassifier()\nrf = RandomForestClassifier()\nsvm = SVC()\n\nclassifiers = [knn, logreg, dt, rf, svm]\n\nresults = []\nfor classifier in classifiers:\n    results.append(cross_val_score(classifier, X,y, cv=5).mean())\n\nresults","75dab1fb":"X_submission = test.loc[:, 'Pclass':'Family']\nsubmission = test.loc[:, ['PassengerId', 'Survived']]","f6096c54":"svm.fit(X, y)\ny_submission = svm.predict(X_submission).astype('int')\nsubmission['Survived'] = y_submission\nsubmission.head()","b1a1bd0b":"submission.to_csv('submission.csv', index=False)","8d59466c":"## Building the models","d6bf20c4":"As we can see there are some titles in the names, like Mr., Miss., Mrs, Master, Jr., Dr., and Rev., so i'll keep this information in a new attribute.","d2e594c5":"Fare has too many outliers, and because of this ***fill*** the missing values with the average may not be a good choice, instead of it, I'll use the median wich represents better the behavior of this feature.\n\nOn the other hand, Age doesn't have that much outliers, therefore I'll use the average to fill me missing values of this feature.\n\nIn Embarked the most frequent value is 'S', so I'll fill the missing values with it.","9f024e38":"I'll test 5 algorithms to predict the output:\n\n* K-nearest Neighbours (Knn)\n* Logistic Regression\n* Decision Tree Classifier\n* Random Forest\n* Support Vector Machine (svm)\n\nAnd use the cross validation score to pick up the greatest one to apply on the data.","cbbff8a1":"The features Age, Fare, Cabin and Embarked have missing values... Before filling the missing values I'll add 2 new features to store the values if Age and Cabin are missing... Since Embarked and Fare have just 1 and 2 missing values I'll just fill them.\n\nAfter that, it's time to see how do deal with the missing values!\n\nSince Fare and Age are numerical features I'll vizualise the using boxplot the indentify outliers. and decide the best way to fill them.\n\nEmbarked is a categorical feature so I'll fill with the value which appears the most...\n\nCabin has too much missing values and is also a text attribute, so it needs to be analysed more carefully, so I'll save it for later.","ca5e2e6d":"## EDA","8530c6ea":"Through this graphic we can see that people with small families on board were more likely to survive. Also, just 30% of the passengers who didn't have family on board survived even though they represent the marjority on board. Therefore I'll encode it as No family (0), Small Family (1 to 3 relatives) and big family (4 or more relatives).","6c170715":"The graph above shows that the most part of the passengers who died were man, and also, among the passengers who survived the marjority were women even though there were more men than women on board, so we can see that sex is a great parameter to decide figure out if a passenger survived or not.\nAge doesn't tell too much about it...","626f3289":"As we can se, the feature 'Title' is strongly correlated with the variable Sex, so I'll not use in the models.","af712412":"**SUPPORT VECTOR MACHINE** got the greatest score, so I'll use it to predict the samples and submit.","7d2aca6f":"## Treating the data","4cf8ba51":"It seems like the boarding place did not implies whether the passenger survived or not. But still says something, since the most part of the passengers embarked in 'S', and 'S' has the lowest percentage of wurvival we can imply that the most part of the passengers who died embarked in 'S'.\nI'll encode the variable in ascending order considering the rate of survival.","c3b31cee":"As it was expected the people who were in the first class were more likely to survive.","daafa3b4":"By looking at that graph I've decided to categorize the Fare's in: less 10, 10 - 50, 50-100, more than 100","b1c2c3f5":"It's time to look at the categorical features (Pclass, Sex, Embarked).\nThe feature Pclass is a hierarquical feature, therefore i'll not change anything on it.\nThe feature Sex will be enconded as a binary feature. \nIn the feature Embarked I can't just encode the values to numerical, since there's no hierarquical relatioship amid the categories. So, it'll be divided in 3 new binary features (one for each category).\n\nI also will create a new feature to store the number of family members embarked by summing the features 'SibSp' and 'Parch'."}}