{"cell_type":{"68f31f69":"code","f7535d51":"code","5d7f9680":"code","62a3b029":"code","a98b6ee7":"code","9f1153a7":"code","7aca67ce":"code","a3a45f44":"code","7efa2590":"code","c8b76193":"code","fc490750":"code","4fd118d4":"code","09f990ac":"code","7a3e1eaf":"code","3ce2e489":"code","23a0e939":"markdown","a0578578":"markdown","1fb0039c":"markdown","1ccaeead":"markdown","95d73e3d":"markdown","a1e33349":"markdown","041d3161":"markdown","3e3a3f7f":"markdown","9a26c8cf":"markdown"},"source":{"68f31f69":"import numpy as np\nimport pandas as pd \nimport geopandas as geopd\nimport os\nimport folium\nimport matplotlib.pyplot as plt\nfrom matplotlib.font_manager import FontProperties\n\ndata_file_root = \"..\/input\/data-science-for-good\/cpe-data\"\ncensus_data_root = '..\/input\/census_tract_shapefile'\n\n###SET DATA HOLDERS\nshapefile_set = {'shapefile_data': {}, 'shapefile_crs': {}, 'shapefile_geom_type': {}}\nACS_set = {}\ncensus_shapefile_set = {}\n\n###SET MAPPINGS\ncity_coords = {'seattle': [47.6156301, -122.337831],\n                'indaianapolis': [39.81, -86.26060805912148],\n                'dallas': [],\n                'boston': [],\n                'charlotte': [],\n                'austin': []}\nshape_to_city = {'SPD_BEATS_WGS84.shp':'seattle',\n                'Indianapolis_Police_Zones.shp':'indaianapolis',\n                'EPIC.shp': 'dallas',\n                'boston_police_districts_f55.shp': 'boston',\n                'CMPD_Police_Division_Offices.shp': 'charlotte',\n                'APD_DIST.shp': 'austin'}\ndep_to_city = {'11-00091': 'boston',\n                '23-00089': 'indaianapolis',\n                '35-00103': 'charlotte',\n                '37-00027': 'austin',\n                '37-00049': 'dallas',\n                '49-00009': 'seattle'}\ncity_to_census_state = {'seattle': '53',\n                'indaianapolis': '18',\n                'dallas': '48',\n                'boston': '25',\n                'charlotte': '37',\n                'austin': '48'}\ncensus_state_to_city = {'53': 'seattle',\n                '18': 'indaianapolis',\n                '48': 'dallas',\n                '25': 'boston',\n                '37': 'charlotte',\n                '48': 'austin'}\ncity_utm_crs = {'seattle': {'init': 'epsg:32610'}, #UTM 10 for Seattle\n                'indaianapolis': None,\n                'dallas': None,\n                'boston': None,\n                'charlotte': None,\n                'austin': None}\n\nsqm_to_sqft = 10.7639","f7535d51":"###GET DIRECTORIES FOR DIVISION DATA\ndirectories = os.listdir(data_file_root)\ndirectories = [d for d in directories if not d.endswith('.csv')]\nprint(\"Found shapefile directories: %s\" % (tuple(directories),))\n\n###LOOP THOURGH DIVISIONS AND GET SHAPEFILE DATA\nfor directory in directories:\n    sub_directory = os.listdir(os.path.join(data_file_root, directory))\n    shapefile_directories  = [f for f in sub_directory if \"Shapefiles\" in f]\n    for s_directory in shapefile_directories:\n        for shapefile in os.listdir(os.path.join(data_file_root, directory, s_directory)):\n            if shapefile.endswith('.shp'):\n                data_file = os.path.join(data_file_root, directory, s_directory, shapefile)\n                data = geopd.read_file(data_file)\n                shapefile_set['shapefile_data'][shapefile] = data\n                shapefile_set['shapefile_crs'][shapefile] = data.crs\n                shapefile_set['shapefile_geom_type'][shapefile] = data.geom_type.unique().tolist()\n                #data.plot()\n                \n#GET SHAPEFILES THAT ARE POINTS BC CANNOT DO INTERSECTION AND AREA CALCS WITH POINTS!\npoint_shapefiles = [s for s,g in shapefile_set['shapefile_geom_type'].items() if 'Point' in g or 'Line' in g]\n#GET SHAPEFILES WITH NO COORDINATE SYSTEM BC CANNOT DO INTERSECT WITHOUT CRS!\nCRS_missing_shapefiles = [s for s,g in shapefile_set['shapefile_crs'].items() if not g]\n\n#PRINT DATA FINDINGS\nprint(\"Found shapefiles: %s\" % (tuple(shapefile_set['shapefile_data'].keys()),))\nprint(\"Coordinate systems of each shapefile for confirming crs exists: %s\" % (shapefile_set['shapefile_crs'],))\n#SHOW WARNINGS FOR SHAPEFILES THAT WILL NOT BE PROCESSED\nif point_shapefiles:\n    print(\"WARNING: Shapefiles with incorrect geometry found. Cannot porcess shapefiles: %s\" % (point_shapefiles,))\nif CRS_missing_shapefiles:\n    print(\"WARNING: Shapefiles with missing CRS found. Cannot porcess shapefiles: %s\" % (CRS_missing_shapefiles,))","5d7f9680":"###LOOP THROUGH DIVISIONS AND GET ACS DATA\nfor directory in directories:\n    sub_directories = os.listdir(os.path.join(data_file_root, directory))\n    ACS_directories  = [f for f in sub_directories if \"ACS\" in f]\n    for ACS_directory in ACS_directories :\n        if os.path.isdir(os.path.join(data_file_root, directory, ACS_directory)) == True:\n            ACS_sub_directories = os.listdir(os.path.join(data_file_root, directory, ACS_directory))\n            ACS_set[ACS_directory] = {}\n            for ACS_sub_directory in ACS_sub_directories:\n                if os.path.isdir(os.path.join(data_file_root, directory, ACS_directory, ACS_sub_directory)) == True:\n                    ACS_data_type = ACS_sub_directory.split('_')[-1]\n                    for ACS_file in os.listdir(os.path.join(data_file_root, directory, ACS_directory, ACS_sub_directory)):\n                        if 'metadata' not in ACS_file:\n                            data_file = os.path.join(data_file_root, directory, ACS_directory, ACS_sub_directory, ACS_file)\n                            data = pd.read_csv(data_file)\n                            if data.empty:\n                                pass\n                            else:\n                                data.columns = data.iloc[0,:]\n                                data=data.iloc[1:,:]\n                            ACS_set[ACS_directory][ACS_data_type] = data\n#PRINT EXAMPLE OF ACS DATA\nprint(\"ACS example data:\")\nprint(ACS_set['49-00009_ACS_data']['race-sex-age'].iloc[0])","62a3b029":"def make_map(shapefile, coords, city):\n    map_map = folium.Map(coords, height=500, zoom_start=10)\n    folium.GeoJson(shapefile).add_to(map_map)\n    display(map_map)\n\ncity = shape_to_city['SPD_BEATS_WGS84.shp']\ncoords = city_coords['seattle']\ndata = shapefile_set['shapefile_data']['SPD_BEATS_WGS84.shp']\nmake_map(data, coords, city)","a98b6ee7":"###loop thorugh census tracts and get shapefiles for each state. NEED CENSUS TRACTS FOR OBTAINING % CALCS OF CENSUS IN DIVISION.\ncensus_dir_root = '..\/input\/census-tract-shapefile'\ncensus_directories = os.listdir(census_dir_root)\nfor c_sub_directory in census_directories:\n    files = os.listdir(os.path.join(census_dir_root, c_sub_directory))\n    for file in [f for f in files if f.endswith('.shp')]:\n        state_ID = file.split('_')[2]\n        shapefile = os.path.join(census_dir_root, c_sub_directory, file)\n        data = geopd.read_file(shapefile)\n        census_shapefile_set[state_ID] = data\n#PRINT EXAMPLE OF CENSUS DATA  \nprint(\"census shapefiles loaded for: %s\" % (tuple([census_state_to_city[s] for s in census_shapefile_set.keys()]),))\nprint(\"Census example data:\")\nprint(census_shapefile_set[city_to_census_state['seattle']].iloc[0])","9f1153a7":"#reproject coordinate systems to match.\n#change to same coordinate system for proper intersection. Mercator UTM-good for getting areas as well.\ncrs = {'init': 'epsg:32610'} #UTM 10 for Seattle\ndivisions = shapefile_set['shapefile_data']['SPD_BEATS_WGS84.shp'].to_crs(crs=crs)\ncensus_tracts = census_shapefile_set[city_to_census_state['seattle']].to_crs(crs=crs)","7aca67ce":"#plot washington tracts\ncensus_tracts.plot(color='blue', edgecolor='red')\nplt.suptitle('Washington Tracts', fontsize=20)\ntxt = 'Tracts can be intersected with divisions and joined with acs data to do a manual spatial join of info per tract.'\nplt.text(0.5, 0.01, txt, wrap=True, horizontalalignment='center', fontsize=12)\nplt.savefig('washington_tracts_ex-UTM 10.png')","a3a45f44":"#get area for whole tracts.\ncensus_tracts['area_sqm_tract'] = census_tracts.geometry.area\ncensus_tracts['area_sqft_tract'] = census_tracts.geometry.area*sqm_to_sqft","7efa2590":"#get intersection of divisions to tracts\n#THIS WILL CREATE ONE POLYGON FOR EACH PART THAT INTERSECTS EACH DIVISION. THIS WILL ALLOW US TO CALCULATE % \n#FOR CENSUS DATA AND THEN SUM BASED ON DIVISION IT FALLS WITHIN.\nintersection = geopd.overlay(divisions, census_tracts, how='intersection')\n\n#overlay intersections with divisions\nfig, ax = plt.subplots()\nax.set_aspect('equal')\nfig.suptitle('Seattle Division-Tracts Intersect', fontsize=20)\nintersection.plot(ax=ax, color='blue', edgecolor='red', alpha=0.7)\ndivisions.plot(ax=ax, color='none', facecolor=\"none\", edgecolor='black')\ntxt = 'The intersection polygons are cut based on each division outline.if tract crosses division it will be cut.'\nfig.text(0.5, 0.01, txt, wrap=True, horizontalalignment='center', fontsize=12)\nplt.savefig('seattle_intersect_ex-UTM 10.png')","c8b76193":"#lets's look at one division as an example of how intersection works, C2\nfig, ax = plt.subplots()\nax.set_aspect('equal')\nfig.suptitle('Seattle Intersect beat C2 Ex.', fontsize=20)\ndivisions.plot(ax=ax, color='none', facecolor=\"none\", edgecolor='black')\nintersection[intersection.beat == 'C2'].plot(ax=ax, color='blue', edgecolor='red', alpha=0.7)\ntxt = 'showing how tracts will be cut based on the division outline.'\nfig.text(0.5, 0.01, txt, wrap=True, horizontalalignment='center', fontsize=12)\nplt.savefig('c2_intersect-UTM 10.png')","fc490750":"#get area for tract intersections\/parts within each division\nintersection['area_sqm_tract_inter'] = intersection.geometry.area\nintersection['area_sqft_tract_inter'] = intersection.geometry.area*sqm_to_sqft\n#calculate portion of tract areas within each division\nintersection['tract_perc_in_div'] =  intersection['area_sqm_tract_inter']\/intersection['area_sqm_tract'] \nprint(\"Intersection with calculated column for percentage tract in division:\")\nprint (intersection[['beat','GEOID','area_sqm_tract','area_sqm_tract_inter','tract_perc_in_div']].sort_values('beat').iloc[150])","4fd118d4":"#Join ACS data to intersections.\n#Join ACS data based on GEOID.\nACS_set['49-00009_ACS_data']['race-sex-age']['GEOID'] = ACS_set['49-00009_ACS_data']['race-sex-age']['Id2']\nintersection_merge = intersection.merge(ACS_set['49-00009_ACS_data']['race-sex-age'], on='GEOID')","09f990ac":"#lets look at just the calcualtion for african americnas within each division.\nintersection_merge[['beat','GEOID','Estimate; RACE - One race - Black or African American','tract_perc_in_div']]\n#convert to float\nintersection_merge['Estimate; RACE - One race - Black or African American'] = intersection_merge['Estimate; RACE - One race - Black or African American'].astype(float)\nintersection_merge['tract_perc_in_div'] = intersection_merge['tract_perc_in_div'].astype(float)\n#calculate % af. am. in tract division intersect\nintersection_merge['afam_perct_tract'] = intersection_merge['Estimate; RACE - One race - Black or African American'] * intersection_merge['tract_perc_in_div']\n#let's see exmaple pf tract-division calculation\nexample_calc_150 = intersection_merge[['afam_perct_tract', 'Estimate; RACE - One race - Black or African American', 'tract_perc_in_div', 'beat','GEOID']] .iloc[150]\nprint(\"Single tract example:\")\nprint(\"%f percent of tract %s falls within beat %s.\" % (float(example_calc_150.tract_perc_in_div),example_calc_150.GEOID, example_calc_150.beat))\nprint(\"total af. am in tract is %f. %f percent of this is %f\"% (example_calc_150['Estimate; RACE - One race - Black or African American'],\n                                                        example_calc_150.tract_perc_in_div, example_calc_150.afam_perct_tract))\n","7a3e1eaf":"#lets now dissolve by division and aggregate based on new calculated column afam_perct_tract.\n#clean up the dataframe first by limiting columns\nintersection_for_dissolve = intersection_merge[['objectid','geometry','beat','GEOID','afam_perct_tract']]\n#dissolve and sum the total af. am. in division based on our calculated column.\ndivisions_w_census_agg = intersection_for_dissolve.dissolve(by='beat', aggfunc='sum')\n\n#FINALLY LETS SEE HOW MANY AF. AM. FALL WITHIN DIVISION.\nfig, ax = plt.subplots()\nax.set_aspect('equal')\ndivisions_w_census_agg.plot(ax=ax, column = 'afam_perct_tract', scheme='equal_interval', cmap='YlOrRd', legend=True)\nfig.suptitle('Seattle: African American in Each Division', fontsize=20)\nlgd = ax.get_legend()\nlgd.set_bbox_to_anchor((0.5, -0.1))\nplt.savefig('Seattle_African_American_in_Each_Division.png', bbox_inches='tight')","3ce2e489":"#lets bring in incident data so we can compare num of incidents for certian demographics to demographics of the division itself.\nseattle_incidents = pd.read_csv(\"..\/input\/seattle-stops\/terry-stops.csv\")\nseattle_incidents.head()","23a0e939":"**Now let's view an example of a shapfile that has a coordinate system and is a polygon to ensure it falls in the correct area.**","a0578578":"**Now to the good stuff, lets do the intersection between the divisions and the tracts to understand the overlaps.**","1fb0039c":"**Now, let's have a look at the Washington tracts shapfile**","1ccaeead":"**Now, before we do the intersection we need to calculate the area for the whol tracts. this will allow us to calculate the % of tract that falls within each division after the intersection.**","95d73e3d":"**Now let's get the census data. We will use this data to do the intersections then join our ACS data to get the total demographic data for each division.**","a1e33349":"**Lets loop thorugh shapefiles and understand which shapefiles are actually usable for our intersection analysis.**","041d3161":"**We will have a look at the census tract shapefile in a minute. But first let's reproject the shapfiles so that they are matching. This is important for doing correct intersections but also so we are able to calculate correct areas. Let's do this for Seatlle for now.**","3e3a3f7f":"**GOAL IS TO USE GEOSPATIAL DATA OF POLICE DIVISIONS AND COMBINE WITH CENSUS DATA TO UNDERSTAND POPULATIONS WITHIN POLICE DIVISIONS\nAND HOW THIS MAY OR MAY NOT BE CONTRIBUTING TO BIAS IN INCIDENT REPORTING.**\nTHROUGHOUT THE SCRIPT ARE EXAMPLES OF NECESSARY AND DIFFERNET WAYS OF HANDLING DISCREPENCIESS WITHIN SHAPEFILE DATA\nSUCH AS MISSING PROJECTIONS, INCORRECT GEOMETRY FOR ANALYSIS,ETC.","9a26c8cf":"**Unfortunately we need polygon features in order to do intersections and understand areas of census data that falls within police divisions, so those shapefiles won't come thorugh in our analysis. In addition, we found some shapefiles without coordinate systems. We could take a guess and have a \"general\" system we set but that is not recommended. So for now, we wont use those shapefiles.**\n\n**Now lets have a look at the ACS data and see an example of the data.**\n"}}