{"cell_type":{"61cefb39":"code","11749e1f":"code","0066aa23":"code","924369e5":"code","20826841":"code","279b2339":"code","54add778":"code","56d601f2":"code","63164807":"code","6a890978":"code","152de5dc":"code","170e51e0":"code","37e57d98":"code","f783bd79":"code","5a04037b":"code","ca0a6d4e":"code","104fb1b2":"code","e1543212":"code","521bc805":"code","a3900565":"code","f616dde3":"code","40529c1a":"code","f5923c18":"code","c7ff2a61":"code","f4cd2f1b":"markdown","0fdac930":"markdown","a35c1c14":"markdown","3ef2e0b2":"markdown","3ca387e3":"markdown","885aec08":"markdown","beb0fb0b":"markdown"},"source":{"61cefb39":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","11749e1f":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.linear_model import LinearRegression,RidgeCV, ElasticNet\nfrom sklearn.model_selection import train_test_split,cross_val_score,GridSearchCV\nfrom sklearn.metrics import mean_squared_error,mean_absolute_error,r2_score\nfrom sklearn.preprocessing import PolynomialFeatures, StandardScaler\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.neural_network import MLPRegressor","0066aa23":"df_train = pd.read_csv('\/kaggle\/input\/jane-street-market-prediction\/train.csv')\ndf_feat = pd.read_csv('\/kaggle\/input\/jane-street-market-prediction\/features.csv')\ndf_ex_sam = pd.read_csv('\/kaggle\/input\/jane-street-market-prediction\/example_sample_submission.csv')\ndf_ex = pd.read_csv('\/kaggle\/input\/jane-street-market-prediction\/example_test.csv')","924369e5":"def resizeplot(x,y,d):\n    plt.figure(figsize=(x,y),dpi=d)","20826841":"df_train.head()","279b2339":"df_train.info()","54add778":"df_train[['date', 'weight', 'resp_1', 'resp_2', 'resp_3', 'resp_4', 'resp','ts_id']].isnull().sum()","56d601f2":"resizeplot(10,6,90)\nsns.histplot(x=df_train['weight'],bins=80)","63164807":"resp = df_train.iloc[:,2:7]\nsns.pairplot(resp)","6a890978":"resp.describe()","152de5dc":"df_train['action'] =np.where((df_train.resp_1 > 0) & (df_train.resp_2 > 0) & (df_train.resp_3 > 0) & (df_train.resp_4 > 0) & (df_train.resp > 0),1,0)","170e51e0":"X = df_train[['date', 'weight', 'resp_1', 'resp_2', 'resp_3', 'resp_4', 'resp']]\ny = df_train['action']","37e57d98":"scaler = StandardScaler()\nscale_X = scaler.fit_transform(X)","f783bd79":"#GRID MODEL\/ELASTIC NET\n\nmodel_elastic = ElasticNet(alpha=0.1,l1_ratio=0.1)\n#param_grid_en = {'alpha':[0.1,1,5,10,100,500],'l1_ratio':[.1,.7,.99,1]}\n#grid_model_en = GridSearchCV(model_elastic,param_grid = param_grid_en,scoring='neg_mean_squared_error',\n#                         cv=5,verbose=1)\nmodel_elastic.fit(scale_X,y)\nmodel_elastic = ElasticNet(alpha=0.1,l1_ratio=0.1)\nmodel_elastic.fit(scale_X,y)\n\ny_pred_en = model_elastic.predict(scale_X)\nmae_net = mean_absolute_error(y,y_pred_en)\nscore_net = r2_score(y,y_pred_en)\n\nprint('Score_net: ', score_net)\nprint('Mae_net', mae_net)","5a04037b":"#XGBOOST\n\n#param_grid_x = {'n_estimators':[100],'verbosity':[1],'eval_metric':['mae'],\n             #'max_depth':[6]}\nxgb =XGBRegressor(n_estimators=100,verbosity=1,eval_metric='mae', max_depth=6)\n#grid_xgb = GridSearchCV(xgb,param_grid_x,n_jobs=-1,cv=3)\nxgb.fit(scale_X,y)\npred_xgb = xgb.predict(scale_X)\nmae_xgb = mean_absolute_error(y,pred_xgb)\nmse_xgb = mean_squared_error(y,pred_xgb)\nrmse_xgb = np.sqrt(mean_squared_error(y,pred_xgb))\n\nscore_xgb = r2_score(y,pred_xgb)\n\nprint('Score: ',score_xgb)\nprint('Mean_Absolute_error: ',mae_xgb)\nprint('Mean_Squared_Error: ',mse_xgb)\nprint('Root_Mean_Squared_Error: ',rmse_xgb)","ca0a6d4e":"# Neural Nets\n\nmlpr = MLPRegressor(activation= 'logistic',hidden_layer_sizes= (4,4), learning_rate= 'invscaling',\n                    max_iter= 1000,solver= 'adam',verbose= True)\n#param_grid = {'activation':['identity','logistic','relu'],'solver':['lbfgs', 'sgd', 'adam'],\n             #'learning_rate':['constant','invscaling','adaptive'],'max_iter':[1000],\n             #'verbose':['True'],'hidden_layer_sizes':[2,2]}\n\n#grid_neural_cv = GridSearchCV(mlpr,param_grid,n_jobs=-1,cv=3)\nmlpr.fit(scale_X,y)\ngrid_pred_neural = mlpr.predict(scale_X)\nmae_neural = mean_absolute_error(y,grid_pred_neural)\nmse_neural = mean_squared_error(y,grid_pred_neural)\nrmse_neural = np.sqrt(mse_neural)\nscore_neural = r2_score(y,grid_pred_neural)\nprint('\\n')\nprint('Score_neural: ', score_neural)\nprint('\\n')\nprint('Mae_neural: ', mae_neural)\nprint('Mse_neural: ', mse_neural)\nprint('Rmse_neural: ', rmse_neural)","104fb1b2":"# KNN REGRESSOR\n\nknnr = KNeighborsRegressor(algorithm= 'auto', leaf_size= 100, n_neighbors= 15)\n#param_knn_grid = {'n_neighbors':[5,15,20],'leaf_size':[100,200],\n #                 'algorithm':['auto']}\n#grid_knnr = GridSearchCV(knnr,param_knn_grid,n_jobs=-1,cv=3)\n#grid_knnr.fit(X,y)\n\nknnr.fit(scale_X,y)\npred_knnr = knnr.predict(scale_X)\n\nmae_knr = mean_absolute_error(y,pred_knnr)\nmse_knr = mean_squared_error(y,pred_knnr)\nrmse_knr = np.sqrt(mse_knr)\n\nscore_knnr = r2_score(y,pred_knnr)\n\nprint('Score: ',score_knnr)\nprint('\\n')\nprint('Mean_Absolute_error: ',mae_knr)\nprint('Mean_Squared_Error: ',mse_knr)\nprint('Root_Mean_Squared_Error: ',rmse_knr)","e1543212":"action = pd.DataFrame(grid_pred_neural,columns=['Action'])\nsubmission = pd.concat([df_train['ts_id'],action.astype(int)],axis=1)","521bc805":"action = np.round(action,1)","a3900565":"action = action.astype(int)","f616dde3":"action.head(20)","40529c1a":"submission = pd.concat([df_train['ts_id'],action],axis=1)","f5923c18":"submission.tail(20)","c7ff2a61":"submission.to_csv('submission.csv',index=False)","f4cd2f1b":"**Neural Networks shows us the best scores and results.**","0fdac930":"**Let's see our dataset**","a35c1c14":"**Below is an example of one of our features and how it is distributed.**","3ef2e0b2":"**Let's check if there's some of null data.**","3ca387e3":"**We will import the main libraries to evaluate our model. However, we're not use all of them, just ones who brings\nus a better results.**","885aec08":"**This competition is evaluated on a utility score. Each row in the test set represents a trading opportunity for which you will be predicting an action value, 1 to make the trade and 0 to pass on it. Each trade j has an associated weight and resp, which represents a return.**","beb0fb0b":"**Let's see how our data is correlated.**"}}