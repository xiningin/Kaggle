{"cell_type":{"6a2adacb":"code","c703bb8c":"code","2c9679f9":"code","8ffd4a45":"code","91280b82":"code","580b595a":"code","24e384e7":"code","66ca3c4a":"code","26e4915f":"code","ebca295d":"code","fc9bb282":"code","94b82fd9":"code","3e9dd3a6":"code","dc03e737":"code","bcaa8855":"code","5ba62b6b":"code","a3f31925":"code","d1a8712f":"code","9a811677":"code","cc646a1c":"code","7f830341":"code","3436920e":"code","2a86dfae":"code","8afad8c9":"markdown","49a3f676":"markdown","5f2c631f":"markdown","3445b65d":"markdown","a59f02bb":"markdown","12c55906":"markdown","f7f31b79":"markdown","81a43bd5":"markdown","4e7e7121":"markdown","40ada2bc":"markdown","b2fe11c0":"markdown","d4130236":"markdown","fb2c33ed":"markdown","cc971ac2":"markdown","cfbda044":"markdown","c9643e6d":"markdown","517f9030":"markdown","c3618e88":"markdown","8360c31b":"markdown"},"source":{"6a2adacb":"import numpy as np\nimport pandas as pd \nimport zipfile\nfrom keras.preprocessing.image import ImageDataGenerator, load_img\nfrom keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport random\nfrom subprocess import check_output\nfrom keras.callbacks import EarlyStopping, ReduceLROnPlateau\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense, Activation, BatchNormalization\nimport os\nprint(check_output([\"ls\", \"..\/input\/\"]).decode(\"utf8\"))","c703bb8c":"with zipfile.ZipFile('..\/input\/train.zip', 'r') as z:    \n    z.extractall(\".\") \n#print(check_output([\"ls\", \"train\"]).decode(\"utf8\"))\n   ","2c9679f9":"filenames = os.listdir(\"train\")\ncategories = []\nfor filename in filenames:\n    category = filename.split('.')[0]\n    if category == 'dog':\n        categories.append(1)\n    else:\n        categories.append(0)\n\ndf = pd.DataFrame({\n    'filename': filenames,\n    'category': categories\n})\n\ndf.head(10) ##spot check \n","8ffd4a45":"FAST_RUN       = False\nIMAGE_WIDTH    =128\nIMAGE_HEIGHT   =128\nIMAGE_SIZE     =(IMAGE_WIDTH, IMAGE_HEIGHT)\nIMAGE_CHANNELS =3\nDROP_OUT_VALUE =0.25\nFILTER_SIZE    =(3, 3)\nPOOL_SIZE      =(2, 2)","91280b82":"sample = random.choice(filenames)\nimage = load_img(\"train\/\"+sample)\nplt.imshow(image)","580b595a":"df['category'].value_counts().plot.bar()","24e384e7":"\n\nmodel = Sequential()\n\nmodel.add(Conv2D(32, FILTER_SIZE, activation='relu', input_shape=(IMAGE_WIDTH, IMAGE_HEIGHT, IMAGE_CHANNELS)))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=POOL_SIZE))\nmodel.add(Dropout(DROP_OUT_VALUE))\n\nmodel.add(Conv2D(64, FILTER_SIZE, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=POOL_SIZE))\nmodel.add(Dropout(DROP_OUT_VALUE))\n\nmodel.add(Conv2D(128, FILTER_SIZE, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=POOL_SIZE))\nmodel.add(Dropout(DROP_OUT_VALUE))\n\n\nmodel.add(Conv2D(192, FILTER_SIZE, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=POOL_SIZE))\nmodel.add(Dropout(0.35))\n\nmodel.add(Conv2D(256, FILTER_SIZE, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=POOL_SIZE))\nmodel.add(Dropout(0.45))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(DROP_OUT_VALUE))\nmodel.add(Dense(2, activation='softmax')) # 2 because we have cat and dog classes\n\nmodel.compile(loss='categorical_crossentropy', optimizer='rmsprop', metrics=['accuracy'])\n\nmodel.summary()","66ca3c4a":"earlystop = EarlyStopping(patience=15)","26e4915f":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=2, \n                                            verbose=1, \n                                            factor=0.4, \n                                            min_lr=0.0001)","ebca295d":"callbacks = [earlystop, learning_rate_reduction]","fc9bb282":"df.head()","94b82fd9":"df[\"category\"] = df[\"category\"].replace({0: 'cat', 1: 'dog'}) \ndf.head()","3e9dd3a6":"train_df, validate_df = train_test_split(df, test_size=0.25, random_state=42)\ntrain_df = train_df.reset_index(drop=True)\nvalidate_df = validate_df.reset_index(drop=True)","dc03e737":"train_df['category'].value_counts().plot.bar()","bcaa8855":"validate_df['category'].value_counts().plot.bar()","5ba62b6b":"total_train = train_df.shape[0]\ntotal_validate = validate_df.shape[0]\nbatch_size=15\ntotal_train","a3f31925":"train_datagen = ImageDataGenerator(\n    rotation_range=15,\n    rescale=1.\/255,\n    shear_range=0.1,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    width_shift_range=0.1,\n    height_shift_range=0.1\n)\n\ntrain_generator = train_datagen.flow_from_dataframe(\n    train_df, \n    \"train\", \n    x_col='filename',\n    y_col='category',\n    target_size=IMAGE_SIZE,\n    class_mode='categorical',\n    batch_size=batch_size\n)","d1a8712f":"validation_datagen = ImageDataGenerator(rescale=1.\/255)\nvalidation_generator = validation_datagen.flow_from_dataframe(\n    validate_df, \n    \"train\", \n    x_col='filename',\n    y_col='category',\n    target_size=IMAGE_SIZE,\n    class_mode='categorical',\n    batch_size=batch_size\n)","9a811677":"example_df = train_df.sample(n=1).reset_index(drop=True)\nexample_generator = train_datagen.flow_from_dataframe(\n    example_df, \n    \"train\", \n    x_col='filename',\n    y_col='category',\n    target_size=IMAGE_SIZE,\n    class_mode='categorical'\n)","cc646a1c":"plt.figure(figsize=(12, 12))\nfor i in range(0, 15):\n    plt.subplot(5, 3, i+1)\n    for X_batch, Y_batch in example_generator:\n        image = X_batch[0]\n        plt.imshow(image)\n        break\nplt.tight_layout()\nplt.show()","7f830341":"epochs=3 if FAST_RUN else 16\nhistory = model.fit_generator(\n    train_generator, \n    epochs=epochs,\n    validation_data=validation_generator,\n    validation_steps=total_validate\/\/batch_size,\n    steps_per_epoch=total_train\/\/batch_size,\n    callbacks=callbacks\n)","3436920e":"model.save_weights(\"cat_dod_model.h5\")    ","2a86dfae":"fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 12))\nax1.plot(history.history['loss'], color='b', label=\"Training loss\")\nax1.plot(history.history['val_loss'], color='r', label=\"validation loss\")\nax1.set_xticks(np.arange(1, epochs, 1))\nax1.set_yticks(np.arange(0, 1, 0.1))\n\nax2.plot(history.history['acc'], color='b', label=\"Training accuracy\")\nax2.plot(history.history['val_acc'], color='r',label=\"Validation accuracy\")\nax2.set_xticks(np.arange(1, epochs, 1))\n\nlegend = plt.legend(loc='best', shadow=True)\nplt.tight_layout()\nplt.show()","8afad8c9":"# Load & plot random image from DF","49a3f676":"# Traning Generator","5f2c631f":"# Count  dog & cat images","3445b65d":"Because we will use image genaretor `with class_mode=\"categorical\"`. We need to convert column category into string. Then imagenerator will convert it one-hot encoding which is good for our classification. \n\nSo we will convert 1 to dog and 0 to cat","a59f02bb":"# Inside training data we have 24000 dog & cat images","12c55906":"> # Save Model","f7f31b79":"# In this kernel we\u2019ll try to identify correctly if the image we\u2019re seeing is a dog=1 or a cat=0 .\n# In order to do so I\u2019ll use dog & cat image dataset as input to a data augmentation generator + CNN . \n# After optimzation process - optimal layers are 5 + 2 FC layers \n# I also run semi grid search on dropout , filter size .etc.. \n","81a43bd5":"# Fit Model","4e7e7121":"# See how our generator work","40ada2bc":"huge thanks to Uysim Keras CNN Dog or Cat Classification notebook ","b2fe11c0":"#  Early Stop - prevent over fitting we will stop the learning after 10 epochs or val_loss not decreased ","d4130236":"# Learning Rate Reduction-reduce learning rate when then accuracy not increase for 2 steps","fb2c33ed":"# Extract all train images","cc971ac2":"# Get  filenames paths + define category (1 - dog , 0 - cat) and fill both of those varibles inside dataframe","cfbda044":"# Imports","c9643e6d":"# Define constant for CNN & data augmentation generator","517f9030":"# We have 6 tiers where inside each tier we have : \n# Conv layer ->  batch normalization -> max pooling -> dropout \n# Last layer will include FC layer : flatten ->dense ->droput ->dense \n# Input layer: We'll take the images and resample image from Height X Weight X 3 ->  256 X256 X 3\n# Output Layer: classify dog=1 or cat =0 ","c3618e88":"### Validation Generator","8360c31b":"# Plot training images with dog\/cat output"}}