{"cell_type":{"ff0a2931":"code","7637b753":"code","c767196c":"code","8ee3d209":"code","a6df91fc":"code","9e486817":"code","34f89a04":"code","cd2c0e2b":"code","645ec5e5":"code","2a78e3eb":"code","9ea199a4":"code","0675ba83":"code","175704eb":"code","d10b3d13":"code","cf0ba2ca":"code","bbd2b786":"code","4edf25bf":"code","d43c80e2":"code","f418e2cf":"code","1a279492":"code","e19f7031":"code","3bfbb43d":"code","0b7b0867":"code","454cddb0":"code","6239058a":"markdown","f2e517f3":"markdown","c8a910c8":"markdown"},"source":{"ff0a2931":"import pandas as pd\nimport numpy as np\nimport cv2\nimport os\nimport re\n\nfrom PIL import Image\n\nimport albumentations as A\nfrom albumentations.pytorch.transforms import ToTensorV2\n\nimport torch\nimport torchvision\n\nfrom torchvision.models.detection.faster_rcnn import FastRCNNPredictor\nfrom torchvision.models.detection import FasterRCNN\nfrom torchvision.models.detection.rpn import AnchorGenerator\n\nfrom torch.utils.data import DataLoader, Dataset\nfrom torch.utils.data.sampler import SequentialSampler\n\nfrom matplotlib import pyplot as plt\n\nDIR_INPUT = '\/kaggle\/input\/global-wheat-detection'\nDIR_TRAIN = f'{DIR_INPUT}\/train'\nDIR_TEST = f'{DIR_INPUT}\/test'","7637b753":"train_df = pd.read_csv(f'{DIR_INPUT}\/train.csv')\ntrain_df.shape","c767196c":"train_df['x'] = -1\ntrain_df['y'] = -1\ntrain_df['w'] = -1\ntrain_df['h'] = -1\n\ndef expand_bbox(x):\n    r = np.array(re.findall(\"([0-9]+[.]?[0-9]*)\", x))\n    if len(r) == 0:\n        r = [-1, -1, -1, -1]\n    return r\n\ntrain_df[['x', 'y', 'w', 'h']] = np.stack(train_df['bbox'].apply(lambda x: expand_bbox(x)))\ntrain_df.drop(columns=['bbox'], inplace=True)\ntrain_df['x'] = train_df['x'].astype(np.float)\ntrain_df['y'] = train_df['y'].astype(np.float)\ntrain_df['w'] = train_df['w'].astype(np.float)\ntrain_df['h'] = train_df['h'].astype(np.float)","8ee3d209":"image_ids = train_df['image_id'].unique()\nvalid_ids = image_ids[-665:]\ntrain_ids = image_ids[:-6]","a6df91fc":"valid_df = train_df[train_df['image_id'].isin(valid_ids)]\ntrain_df = train_df[train_df['image_id'].isin(train_ids)]","9e486817":"valid_df.shape, train_df.shape","34f89a04":"class WheatDataset(Dataset):\n\n    def __init__(self, dataframe, image_dir, transforms=None):\n        super().__init__()\n\n        self.image_ids = dataframe['image_id'].unique()\n        self.df = dataframe\n        self.image_dir = image_dir\n        self.transforms = transforms\n\n    def __getitem__(self, index: int):\n\n        image_id = self.image_ids[index]\n        records = self.df[self.df['image_id'] == image_id]\n\n        image = cv2.imread(f'{self.image_dir}\/{image_id}.jpg', cv2.IMREAD_COLOR)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\n        image \/= 255.0\n\n        boxes = records[['x', 'y', 'w', 'h']].values\n        boxes[:, 2] = boxes[:, 0] + boxes[:, 2]\n        boxes[:, 3] = boxes[:, 1] + boxes[:, 3]\n        \n        area = (boxes[:, 3] - boxes[:, 1]) * (boxes[:, 2] - boxes[:, 0])\n        area = torch.as_tensor(area, dtype=torch.float32)\n\n        # there is only one class\n        labels = torch.ones((records.shape[0],), dtype=torch.int64)\n        \n        # suppose all instances are not crowd\n        iscrowd = torch.zeros((records.shape[0],), dtype=torch.int64)\n        \n        target = {}\n        target['boxes'] = boxes\n        target['labels'] = labels\n        # target['masks'] = None\n        target['image_id'] = torch.tensor([index])\n        target['area'] = area\n        target['iscrowd'] = iscrowd\n\n        if self.transforms:\n            sample = {\n                'image': image,\n                'bboxes': target['boxes'],\n                'labels': labels\n            }\n            sample = self.transforms(**sample)\n            image = sample['image']\n            \n            target['boxes'] = torch.stack(tuple(map(torch.tensor, zip(*sample['bboxes'])))).permute(1, 0)\n\n        return image, target, image_id\n\n    def __len__(self) -> int:\n        return self.image_ids.shape[0]","cd2c0e2b":"# Albumentations\ndef get_train_transform():\n    return A.Compose([\n        A.Flip(0.5),\n        ToTensorV2(p=1.0)\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\ndef get_train_transform2():\n    return A.Compose([\n        A.Flip(p=0.60),\n        A.RandomBrightnessContrast(brightness_limit=0.3, contrast_limit=0.3, p=0.60),\n        A.HueSaturationValue(p=0.60),\n        ToTensorV2(p=1.0)\n    ], bbox_params = {'format': 'pascal_voc','label_fields': ['labels']})\n\ndef get_train_transform3():\n    return A.Compose([\n        A.Flip(always_apply=True), # Either Horizontal, Vertical or both flips\n        A.OneOf([  # One of blur or adding gauss noise\n            A.Blur(p=0.50),  # Blurs the image\n            A.GaussNoise(var_limit=5.0 \/ 255.0, p=0.50)  # Adds Gauss noise to image\n        ], p=1),\n    ToTensorV2(p=1.0)\n    ], bbox_params = {\n        'format': 'pascal_voc',\n        'label_fields': ['labels']\n    })\ndef get_valid_transform():\n    return A.Compose([\n        ToTensorV2(p=1.0)\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\n","645ec5e5":"# load a model; pre-trained on COCO\nmodel = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=False)","2a78e3eb":"num_classes = 2  # 1 class (wheat) + background\n\n# get number of input features for the classifier\nin_features = model.roi_heads.box_predictor.cls_score.in_features\n\n# replace the pre-trained head with a new one\nmodel.roi_heads.box_predictor = FastRCNNPredictor(in_features, num_classes)\n\npretained_model = torch.load(f'\/kaggle\/input\/20200605\/fasterrcnn_resnet50_fpn65.pth')\nmodel.load_state_dict(pretained_model)","9ea199a4":"class Averager:\n    def __init__(self):\n        self.current_total = 0.0\n        self.iterations = 0.0\n\n    def send(self, value):\n        self.current_total += value\n        self.iterations += 1\n\n    @property\n    def value(self):\n        if self.iterations == 0:\n            return 0\n        else:\n            return 1.0 * self.current_total \/ self.iterations\n\n    def reset(self):\n        self.current_total = 0.0\n        self.iterations = 0.0\n","0675ba83":"def collate_fn(batch):\n    return tuple(zip(*batch))\n\ntrain_dataset = WheatDataset(train_df, DIR_TRAIN, get_train_transform())\ntrain_dataset2 = WheatDataset(train_df, DIR_TRAIN, get_train_transform2())\ntrain_dataset3 = WheatDataset(train_df, DIR_TRAIN, get_train_transform3())\nvalid_dataset = WheatDataset(valid_df, DIR_TRAIN, get_valid_transform())\n\n\n# split the dataset in train and test set\nindices = torch.randperm(len(train_dataset)).tolist()\n\ntrain_data_loader = DataLoader(\n    train_dataset,\n    batch_size=16,\n    shuffle=False,\n    num_workers=4,\n    collate_fn=collate_fn\n)\n\ntrain_data_loader2 = DataLoader(\n    train_dataset2,\n    batch_size=16,\n    shuffle=False,\n    num_workers=4,\n    collate_fn=collate_fn\n)\n\ntrain_data_loader3 = DataLoader(\n    train_dataset3,\n    batch_size=16,\n    shuffle=False,\n    num_workers=4,\n    collate_fn=collate_fn\n)\n\nvalid_data_loader = DataLoader(\n    valid_dataset,\n    batch_size=8,\n    shuffle=False,\n    num_workers=4,\n    collate_fn=collate_fn\n)","175704eb":"device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')","d10b3d13":"images, targets, image_ids = next(iter(train_data_loader))\nimages = list(image.to(device) for image in images)\ntargets = [{k: v.to(device) for k, v in t.items()} for t in targets]","cf0ba2ca":"boxes = targets[2]['boxes'].cpu().numpy().astype(np.int32)\nsample = images[2].permute(1,2,0).cpu().numpy()","bbd2b786":"fig, ax = plt.subplots(1, 1, figsize=(16, 8))\n\nfor box in boxes:\n    cv2.rectangle(sample,\n                  (box[0], box[1]),\n                  (box[2], box[3]),\n                  (220, 0, 0), 3)\n    \nax.set_axis_off()\nax.imshow(sample)","4edf25bf":"model.to(device)\nparams = [p for p in model.parameters() if p.requires_grad]\noptimizer = torch.optim.SGD(params, lr=0.01, momentum=0.9, weight_decay=0.002)\n# lr_scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=3, gamma=0.1)\nlr_scheduler = None\n\nnum_epochs = 4","d43c80e2":"loss_hist = Averager()\nitr = 1\n\n# for epoch in range(num_epochs):\n#     loss_hist.reset()\n    \n#     for images, targets, image_ids in train_data_loader3:\n        \n#         images = list(image.to(device) for image in images)\n#         targets = [{k: v.to(device) for k, v in t.items()} for t in targets]\n\n#         loss_dict = model(images, targets)\n\n#         losses = sum(loss for loss in loss_dict.values())\n#         loss_value = losses.item()\n\n#         loss_hist.send(loss_value)\n\n#         optimizer.zero_grad()\n#         losses.backward()\n#         optimizer.step()\n\n#         if itr % 10 == 0:\n#             print(f\"Iteration #{itr} loss: {loss_value}\")\n\n#         itr += 1\n    \n#     # update the learning rate\n#     if lr_scheduler is not None:\n#         lr_scheduler.step()\n\n#     print(f\"Epoch #{epoch} loss: {loss_hist.value}\")   \n\nfor epoch in range(num_epochs):\n    loss_hist.reset()\n    \n    for images, targets, image_ids in train_data_loader2:\n        \n        images = list(image.to(device) for image in images)\n        targets = [{k: v.to(device) for k, v in t.items()} for t in targets]\n\n        loss_dict = model(images, targets)\n\n        losses = sum(loss for loss in loss_dict.values())\n        loss_value = losses.item()\n\n        loss_hist.send(loss_value)\n\n        optimizer.zero_grad()\n        losses.backward()\n        optimizer.step()\n\n        if itr % 10 == 0:\n            print(f\"Iteration #{itr} loss: {loss_value}\")\n\n        itr += 1\n    \n    # update the learning rate\n    if lr_scheduler is not None:\n        lr_scheduler.step()\n\n    print(f\"Epoch #{epoch} loss: {loss_hist.value}\")   \n\n# for epoch in range(num_epochs):\n#     loss_hist.reset()\n    \n#     for images, targets, image_ids in train_data_loader:\n        \n#         images = list(image.to(device) for image in images)\n#         targets = [{k: v.to(device) for k, v in t.items()} for t in targets]\n\n#         loss_dict = model(images, targets)\n\n#         losses = sum(loss for loss in loss_dict.values())\n#         loss_value = losses.item()\n\n#         loss_hist.send(loss_value)\n\n#         optimizer.zero_grad()\n#         losses.backward()\n#         optimizer.step()\n\n#         if itr % 10 == 0:\n#             print(f\"Iteration #{itr} loss: {loss_value}\")\n\n#         itr += 1\n    \n#     # update the learning rate\n#     if lr_scheduler is not None:\n#         lr_scheduler.step()\n\n#     print(f\"Epoch #{epoch} loss: {loss_hist.value}\")   ","f418e2cf":"images, targets, image_ids = next(iter(valid_data_loader))","1a279492":"images = list(img.to(device) for img in images)\ntargets = [{k: v.to(device) for k, v in t.items()} for t in targets]","e19f7031":"boxes = targets[1]['boxes'].cpu().numpy().astype(np.int32)\nsample = images[1].permute(1,2,0).cpu().numpy()","3bfbb43d":"model.eval()\ncpu_device = torch.device(\"cpu\")\n\noutputs = model(images)\noutputs = [{k: v.to(cpu_device) for k, v in t.items()} for t in outputs]","0b7b0867":"fig, ax = plt.subplots(1, 1, figsize=(16, 8))\n\nfor box in boxes:\n    cv2.rectangle(sample,\n                  (box[0], box[1]),\n                  (box[2], box[3]),\n                  (220, 0, 0), 3)\n    \nax.set_axis_off()\nax.imshow(sample)","454cddb0":"torch.save(model.state_dict(), 'fasterrcnn_resnet50_fpn652.pth')","6239058a":"# Train","f2e517f3":"# Sample","c8a910c8":"# Create the model"}}