{"cell_type":{"cd82292a":"code","484e79ea":"code","22dda104":"code","e9d29b97":"code","2e0fc01d":"code","d4a89854":"code","54d3f485":"code","5486a847":"code","4065a2fa":"code","d52a90a6":"code","0d3845e7":"code","03b8a3ed":"code","06bc97a8":"markdown","a9890cdb":"markdown","1352ae35":"markdown","e2dd9a3e":"markdown","8491dbc7":"markdown","72f26795":"markdown","77b1b08c":"markdown"},"source":{"cd82292a":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.utils import shuffle\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import accuracy_score\n\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Input\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras import metrics\nimport tensorflow.keras.backend as K\n\nimport matplotlib.pyplot as plt","484e79ea":"path = '..\/input\/heart-attack-analysis-prediction-dataset\/heart.csv'\ndf = pd.read_csv(path)\ndf.head()","22dda104":"# split into features and labels\nfeatures = df.drop(columns=['output'])\nlabels = df['output'].values\n\n# normalize features\nscaler = MinMaxScaler()\nscaler.fit(features)\nfeatures = scaler.transform(features)\n\n# shuffle features and labels\nfeatures, labels = shuffle(features, labels)\n\n# labels encoder\ny_class = LabelEncoder().fit_transform(labels)\nn_class = len(np.unique(y_class))\nn_features = features.shape[1]\n\n# split ddata\nX_train, X_test, y_train, y_test, y_train_class, y_test_class = train_test_split(features, labels, y_class, test_size=0.33, random_state=1)","e9d29b97":"def soft_acc(y_true, y_pred):\n    return K.mean(K.equal(K.round(y_true), K.round(y_pred)))","2e0fc01d":"visible = Input(shape=(n_features,))\n\n# base model\nhidden1 = Dense(32, activation='relu', kernel_initializer='he_normal')(visible)\nhidden2 = Dense(16, activation='relu', kernel_initializer='he_normal')(hidden1)\n\n# regression output\nout_reg = Dense(1, activation='linear')(hidden2)\n\n# classification output\nout_clas = Dense(n_class, activation='softmax')(hidden2)\n\n# define model\nmodel = Model(inputs=visible, outputs=[out_reg, out_clas])\n\n# compile the keras model\nmodel.compile(loss=['mse','sparse_categorical_crossentropy'], \n              metrics=[soft_acc, metrics.SparseCategoricalAccuracy()], optimizer='adam')","d4a89854":"model.summary()","54d3f485":"history = model.fit(X_train, [y_train,y_train_class], epochs=20, batch_size=32, verbose=0, validation_data=(X_test, [y_test,y_test_class]))","5486a847":"all_keys = list(history.history.keys())[8:]\nloss_keys = all_keys[:2]\nacc_keys = all_keys[2:]","4065a2fa":"losses = history.history[loss_keys[0]]\nplt.figure(figsize=(14,8))\nplt.title('Regression Losses')\nplt.plot(np.arange(len(losses)), losses)","d52a90a6":"accuracies = history.history[acc_keys[0]]\nplt.figure(figsize=(14,8))\nplt.title('Regression Accuracy')\nplt.plot(np.arange(len(accuracies)), accuracies)","0d3845e7":"losses = history.history[loss_keys[1]]\nplt.figure(figsize=(14,8))\nplt.title('Classification Losses')\nplt.plot(np.arange(len(losses)), losses)","03b8a3ed":"accuracies = history.history[acc_keys[-1]]\nplt.figure(figsize=(14,8))\nplt.title('Classification Accuracy')\nplt.plot(np.arange(len(accuracies)), accuracies)","06bc97a8":"<h1 id=\"dataset\" style=\"color:#b2b2b2; background:#fafafa; border-style:dotted;\"> \n    <center>Dataset\n        <a class=\"anchor-link\" href=\"#dataset\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","a9890cdb":"<h1 id=\"analysis\" style=\"color:#b2b2b2; background:#fafafa; border-style:dotted;\"> \n    <center>Analysis\n        <a class=\"anchor-link\" href=\"#analysis\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","1352ae35":"<h1 id=\"regression\" style=\"color:#b2b2b2; background:#fafafa; border-style:dotted;\"> \n    <center>Linear Regression Metric\n        <a class=\"anchor-link\" href=\"#regression\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","e2dd9a3e":"<div style=\"width:100%;\">\n    <img style=\"width:100%;\" src=\"https:\/\/storage.googleapis.com\/kaggle-datasets-images\/1168771\/1958110\/65e4773b360f3e25b8331df57cfd4607\/dataset-cover.jpg\">\n<\/div>","8491dbc7":"## Classification","72f26795":"<h1 id=\"model\" style=\"color:#b2b2b2; background:#fafafa; border-style:dotted;\"> \n    <center>Regression & Classification Model\n        <a class=\"anchor-link\" href=\"#model\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","77b1b08c":"## Regression"}}