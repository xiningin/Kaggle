{"cell_type":{"371ef032":"code","0ff3f87a":"code","46b12f1d":"code","5b32f212":"code","20d34d63":"code","0c9a14a7":"markdown","c03aa645":"markdown","8b07d2b5":"markdown","6eb3ff83":"markdown"},"source":{"371ef032":"import pandas as pd\nimport numpy as np\ntrain=pd.read_csv('..\/input\/titanic\/train.csv')\ntest=pd.read_csv('..\/input\/titanic\/test.csv')","0ff3f87a":"def fg(df):\n    df['Age'].fillna(0.5,inplace=True)\n    df['Fare'].fillna(0,inplace=True)\n    df.fillna('None',inplace=True)\nfg(train)\nfg(test)","46b12f1d":"class titanic:\n    \n#During initialization train DataSet separate to Survived and nor Survived dataset\n\n    def __init__(self,df):\n        self.tem=df\n        df_true=[]\n        df_false=[]\n        for i in range(len(df.index)):\n            if df['Survived'][i]==1:\n                df_true.append(df.loc[i])\n            else:\n                df_false.append(df.loc[i])\n        df_t=pd.DataFrame(df_true,columns=df.columns.values)\n        df_f=pd.DataFrame(df_false,columns=df.columns.values)\n        df_t.reset_index(inplace=True)\n        df_f.reset_index(inplace=True)\n        #Get Information of some factors from two dataset\n        tem_t=self.create_tem(df_t)\n        tem_f=self.create_tem(df_f)\n        #Get the some factors Survived Changes by difference Survived and nor Survived dataset\n        self.per=np.array(tem_t[1],dtype=np.float16)-np.array(tem_f[1],dtype=np.float16)\n    \n    #Collect Names and Percentage of each categories into Single list\n    \n    def create_tem(self,df):\n        tem=[]\n        tem.append(self.get_counts(df,'Pclass'))\n        tem.append(self.get_counts(df,'SibSp'))\n        tem.append(self.get_counts(df,'Sex'))\n        tem.append(self.age_counts(df))\n        tem.append(self.parch_counts(df))\n        tem.append(self.fare_counts(df))\n        tem.append(self.cabin_counts(df))\n        tem.append(self.get_counts(df,'Embarked'))\n        tem2=[[],[]]\n        for i in range(2):\n            for j in range(len(tem)):\n                tem2[i]=tem2[i]+tem[j][i]\n \n        return tem2\n\n\n    #Return percentage of given list is each element\n    \n    def get_per(self,l,s):\n        lis=[]\n        for i in l:\n            lis.append(round((i*100)\/s,2))\n        return lis\n    \n    \n    #Return AgeGroup of given age\n    \n    def agegroup(self,a):\n        c=[]\n        for i in range(0,100,10):\n            if a<i and a>=i-10:\n                c=[i-10,i]\n        return c \n    \n    \n    # Get counts and percentage of given factor of DataSet\n    \n    def get_counts(self,t,name):\n        lis=[0]\n        lis[0]=list(self.tem[name].value_counts().index)\n        lis.append([0 for i in range(len(lis[0]))])\n        lis.append([0 for i in range(len(lis[0]))])\n        tem_l=[0,0]\n        tem_l[0]=list(t[name].value_counts().index)\n        tem_l[1]=list(t[name].value_counts())\n        for i in range(len(lis[0])):\n            for j in range(len(tem_l[0])):\n                if lis[0][i]==tem_l[0][j]:\n                    if tem_l[0][j] not in lis[1]:\n                        lis[1][i]=tem_l[1][j]        \n        \n        s=t[name].value_counts().sum()\n        lis[2]=self.get_per(lis[1],s)\n        del lis[1]\n\n        return lis\n    \n    \n    # AgeGroup names and his percentage of given dataset \n    \n    def age_counts(self,t):\n        tem_l=self.get_counts(t,'Age')\n        age_l=[[],[]]\n        for i in range(0,90,10):\n            age_l[0].append([i,i+10])\n            age_l[1].append(0)    \n        for i in range(len(tem_l[0])):\n            t=self.agegroup(tem_l[0][i])\n            if t in age_l[0]:\n                for j in range(len(age_l[0])):\n                    if t==age_l[0][j]:\n                        age_l[1][j]=age_l[1][j]+tem_l[1][i]\n                        continue\n        return age_l\n    \n    \n    # Check Given value greater than mean value  \n    \n    def mean_d(salf,v,m):\n        if v>m:\n            return True\n        if v<=m:\n            return False\n\n    \n    # Get Cabin counts and percentage list\n    \n    def cabin_counts(self,t):\n        cab_l=[[],[]]\n        for i in self.tem['Cabin'].unique():\n            if i[0] not in cab_l[0]:\n                cab_l[0].append(i[0])\n                cab_l[1].append(0.0)\n                \n        cabin=self.get_counts(t,'Cabin')\n        for i in range(len(cabin[0])):\n            for j in range(len(cab_l[0])):\n                if cab_l[0][j] in cabin[0][i]:\n                    cab_l[1][j]=cab_l[1][j]+cabin[1][i]\n\n        return cab_l\n    \n    # to Specific Parch columns get names and percentage\n    # Parch data divide into Small and large family\n    def parch_counts(self,df):\n        par=[['large','small'],[]]\n        tem=[0,0]\n        for i in range(len(df['Parch'])):\n            if df['Parch'][i]>2:\n                tem[0]=tem[0]+1\n            else:\n                tem[1]=tem[1]+1\n        for i in tem:\n            par[1].append(round((i*100)\/len(df['Parch'])))\n        return par\n    \n    \n\n    # to Specific Fare columns get names and percentage\n    # Fare data classified by PClass and values are above and below mean value\n    def fare_counts(self,t):\n        mean=[0,0,0]\n        t_l=list(self.tem.groupby('Pclass')['Fare'].mean())\n        for i in range(len(t_l)):\n            mean[i]=(t_l[i])\n    \n        fare=[[],[],[]]\n        for i in range(len(mean)):\n            fare[0].append('Class'+str(i+1)+'AM')\n            fare[0].append('Class'+str(i+1)+'BM')\n            fare[1].append(0)\n            fare[1].append(0)\n            fare[2].append(0)\n            fare[2].append(0)\n\n        for i in range(len(t['Fare'])):\n            if t['Pclass'][i] == 1:\n                if self.mean_d(t['Fare'][i],mean[0]):\n                    fare[1][0]=fare[1][0]+1\n                else:\n                    fare[1][1]=fare[1][1]+1\n            elif t['Pclass'][i] == 2:\n                if self.mean_d(t['Fare'][i],mean[1]):\n                    fare[1][2]=fare[1][2]+1\n                else:\n                    fare[1][3]=fare[1][3]+1\n            elif t['Pclass'][i] == 3:\n                if self.mean_d(t['Fare'][i],mean[2]):\n                    fare[1][4]=fare[1][4]+1\n                else:\n                    fare[1][5]=fare[1][5]+1\n            else:\n                print(i)\n        for i in range(len(fare[1])):\n            s=sum(fare[1])\n            fare[2][i]=round((fare[1][i]*100)\/s,2)\n        del fare[1]\n        return fare\n    \n    \n    # Check How Accurate is model by giving train data\n    \n    def predictscore(self):\n        lis=self.pre_predict(self.tem)\n        ac=[0,0]\n        for i in range(len(self.tem['Survived'])):\n            if self.tem['Survived'][i] == 1 and lis[i]>0:\n                ac[0]=ac[0]+1\n            elif self.tem['Survived'][i]==0 and lis[i]<0:\n                ac[0]=ac[0]+1\n            else:\n                ac[1]=ac[1]+1\n        print('All Changes Accuracy '+str((ac[0]*100)\/len(train['Survived']))+'%')\n    \n    \n    # Predict survived or not by Survived changes of factor\n    \n    def predict(self,df):\n        temp_list=self.pre_predict(df)\n        temp=[]\n        for i in temp_list:\n            if i<0:\n                temp.append(0)\n            elif i>0:\n                temp.append(1)\n            else:\n                print('error')\n        tem_dict={'PassengerId':list(df['PassengerId']),'Survived':temp}        \n        temp_df=pd.DataFrame(tem_dict)\n        return temp_df\n    \n    \n    # DataSet BreakDown into his present of categories\n    def pre_predict(self,df):\n        tr=[]\n        pre=[]\n        for i in range(len(df['Age'])):\n            #dataset format convert to pre format\n            tr=self.get_pos('Pclass',df['Pclass'][i])+self.get_pos('SibSp',df['SibSp'][i])+\\\n            self.get_pos('Sex',df['Sex'][i])+\\\n            self.pre_age(df['Age'][i])+self.pre_parch(df['Parch'][i])+\\\n            self.pre_fare(df['Fare'][i],df['Pclass'][i])+\\\n            self.pre_cabin(df['Cabin'][i])+self.get_pos('Embarked',df['Embarked'][i])\n            c=0\n            for k in range(len(tr)):\n                if tr[k]==1:\n                    c=c+self.per[k]\n            tr=[]\n            pre.append(c)\n        return pre\n    \n    # Get given values of position in given categories\n    \n    def get_pos(self,name,v):\n        tem=[]\n        for i in self.tem[name].value_counts().index:\n            if v==i:\n                tem.append(1)\n            else:\n                tem.append(0)\n        if 1 not in tem:\n            print(name,v)\n            print('pos-error')\n        return tem\n    \n    # Return given values of position in Age categories\n    \n    def pre_age(self,v):\n        age_l=[]\n        tem=[]\n        x=self.agegroup(v)\n        for i in range(0,90,10):\n            age_l.append([i,i+10])\n            tem.append(0)\n        for i in range(len(age_l)):\n            if x==age_l[i]:\n                tem[i]=1\n        if 1 not in tem:\n            print('age-error')\n        return tem\n    \n    # Return given values of position in Parch categories\n    \n    def pre_parch(self,v):\n        tem=[0,0]\n        if v>2:\n            tem[0]=1\n        else:\n            tem[1]=1\n        return tem\n    \n    # Return given values of position in Fare categories\n    \n    def pre_fare(self,v,cl):\n        fare=[0 for i in range(6)]\n        mean=list(self.tem.groupby('Pclass')['Fare'].mean())              \n        \n        if cl == 1:\n            if self.mean_d(v,mean[0]):\n                fare[0]=1\n            else:\n                fare[1]=1\n        elif cl == 2:\n            if self.mean_d(v,mean[1]):\n                fare[2]=1\n            else:\n                fare[3]=1\n        elif cl == 3:\n            if self.mean_d(v,mean[2]):\n                fare[4]=1\n            else:\n                fare[5]=1\n        else:\n            print(i)\n        return fare\n    \n    \n    # Return given values of position in Cabin categories\n    \n    def pre_cabin(self,v):\n        cab_l=[[],[]]              \n        for i in self.tem['Cabin'].unique():\n            if i[0] not in cab_l[0]:\n                cab_l[0].append(i[0])\n                cab_l[1].append(0)\n        for i in range(len(cab_l[0])):\n            if cab_l[0][i] ==v[0]:\n                cab_l[1][i]=1\n        return cab_l[1]\n    \n","5b32f212":"# Create An Object\nf=titanic(train)\n\n# Get Accuracy rate \nf.predictscore()\n\n# Start Predict Process\ndf=f.predict(test)\n","20d34d63":"df.to_csv('submission.csv',index=False)","0c9a14a7":"# Create Model from Scatch for titanic-dataset, I think so","c03aa645":"## Titanic Object( model ) run Session","8b07d2b5":"### Hi  REVIEWER, I have kind Requests \n####              1. Is This ( I SAID ) model  REALLY  kind of Machine learning model\n####              2. Commet Me What I DONE Wrong in using Data Processing except (model) Titanic DataSet (Class)\n####              3. Suggest me  ML model for beginner  and  Methods ( I JUST START DATA SCIENCE )","6eb3ff83":"## DataSet Fill Gaps"}}