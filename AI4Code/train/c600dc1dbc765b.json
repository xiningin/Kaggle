{"cell_type":{"9c87e40d":"code","65b29cf2":"code","cf2d4bd6":"code","a5fe5ca2":"code","559816d5":"code","406607f0":"code","b71a8135":"code","d15829a9":"code","ea898b46":"code","84acbe3f":"code","f37114fe":"code","0c22d0c3":"code","d0e6f289":"code","47723f99":"code","abcca133":"code","e3e75555":"code","c932dc9a":"code","b0ec4e6c":"code","666a1989":"code","d2afca4b":"code","6ce190ff":"code","170e3eb0":"code","b336658a":"code","5c840a82":"code","28929de1":"code","f8236d18":"code","c88ef5ec":"code","c9e8bfd4":"code","77a5500c":"code","b26756ca":"code","3f74bf99":"code","3c6aadda":"code","079b7cff":"code","79df0985":"code","a7ba61f8":"code","a657bcd5":"code","f61bbd21":"code","cdedc365":"code","8cdffded":"code","80a508c2":"code","20478bd0":"code","b7810910":"code","c93a901c":"code","31bea938":"code","0ac79f4f":"code","518d140f":"code","6aec7a12":"code","4d97d687":"code","f88f1c7c":"code","4fda616c":"markdown","c6227f15":"markdown","d36e49be":"markdown","9a34a687":"markdown","86a16533":"markdown","fd6598df":"markdown","6f23a200":"markdown","91ac5630":"markdown","0c14873c":"markdown","9192c937":"markdown","42b51e15":"markdown","d4f6b55a":"markdown"},"source":{"9c87e40d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.colors import n_colors\nfrom plotly.subplots import make_subplots\n# Minmax scaler\nfrom sklearn.preprocessing import MinMaxScaler\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","65b29cf2":"avocado=pd.read_csv('..\/input\/avocado-prices\/avocado.csv')","cf2d4bd6":"avocado.info()","a5fe5ca2":"avocado.head(10)","559816d5":"avocado.tail()","406607f0":"avocado['Date']","b71a8135":"avocado['region'][:5]","d15829a9":"avocado[['Date','AveragePrice']][:5]","ea898b46":"avocado[(avocado['type']=='organic') & (avocado['AveragePrice']<1) & (avocado['region']=='West')].sort_values('AveragePrice', axis=0, ascending=False)\n","84acbe3f":"avocado.sort_values('Date', axis = 0, ascending = False)\n","f37114fe":"avocado.groupby('type').size()\n","0c22d0c3":"avocado.corr()","d0e6f289":"f,ax=plt.subplots(figsize=(10,9))\nsns.heatmap(avocado.corr(),annot=True,fmt='.2f',ax=ax,vmin=-1, vmax=1, center= 0, cmap= 'coolwarm',linewidths=3, linecolor='black')\nplt.show()","47723f99":"f,ax=plt.subplots(figsize=(10,9))\nd = avocado.loc[lambda avocado: avocado['region'] == 'Seattle']\nmatrix = np.triu(d.corr())\nsns.heatmap(d.corr(), annot=True, mask=matrix)\nplt.show()","abcca133":"fig = px.scatter(avocado, x='AveragePrice', y='Total Volume',\n                 color='type') # Added color to previous basic \nfig.update_layout(title='Average Price Vs Volume with Avocado Type ',xaxis_title=\"Price\",yaxis_title=\"Volume\")\nfig.show()","e3e75555":"total_confirmed=avocado[['Date','Total Volume']].groupby('Date').sum().reset_index()","c932dc9a":"fig = go.Figure(data=go.Scatter(x=total_confirmed['Date'],\n                                y=total_confirmed['Total Volume'],\n                                mode='lines')) \nfig.update_layout(title='Total Volume Changes Over Time',xaxis_title=\"Date\",yaxis_title=\"Volume\")\nfig.show()","b0ec4e6c":"avocado_albany=avocado[avocado['region']==\"Albany\"][['year','Total Volume']].groupby('year').sum().reset_index()\navocado_washington=avocado[avocado['region']==\"BaltimoreWashington\"][['year','Total Volume']].groupby('year').sum().reset_index()\ncovid_boston=avocado[avocado['region']==\"Boston\"][['year','Total Volume']].groupby('year').sum().reset_index()","666a1989":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(x=avocado_albany['year'], y=avocado_albany['Total Volume'], name = 'Albany',\n                         line=dict(color='royalblue', width=4,dash=\"dot\")))\n\nfig.add_trace(go.Scatter(x=avocado_washington['year'], y=avocado_washington['Total Volume'], name = 'Washington',\n                         line=dict(color='green', width=4,dash=\"dashdot\")))\n\nfig.add_trace(go.Scatter(x=covid_boston['year'], y=covid_boston['Total Volume'], name = 'Boston',\n                         line=dict(color='brown', width=4,dash=\"dash\")))\nfig.update_layout(title='Total Volume over time for different countries',xaxis_title=\"Date\",yaxis_title=\"Volume\")\nfig.show()","d2afca4b":"fig = go.Figure(go.Bar(\n    x=avocado['type'],y=avocado['Total Volume'],\n))\nfig.update_layout(title_text='Total Volume vs Avocado Type',xaxis_title=\"Type\",yaxis_title=\"Volume\")\nfig.show()","6ce190ff":"avocado.plot(x='Total Volume', y='AveragePrice', style='*')\nplt.show()\n","170e3eb0":"disp = lambda str: print('Output: ' + str)\ndisp(\"Hello World!\")","b336658a":"name=\"conventional\"\nit=iter(name)\nprint(next(it))","5c840a82":"print(*it)","28929de1":"a= avocado.AveragePrice.mean()\nprint(a)","f8236d18":"avocado[\"Price_analysis\"]=[\"High\" if i>=a else \"Low\" for i in avocado.AveragePrice]\navocado.loc[:10,[\"Price_analysis\",\"AveragePrice\"]] ","c88ef5ec":"data_new=avocado.head()\ndata_new","c9e8bfd4":"melted=pd.melt(frame=data_new,id_vars='Date',value_vars=['Total Volume','4046'])\nmelted","77a5500c":"first5=avocado.head()\nlast5=avocado.tail()\navocado_conc=pd.concat([first5,last5],axis=0,ignore_index=False)\navocado_conc","b26756ca":"Pricefirst5=avocado['AveragePrice'].head()\nTotalVolumefirst5=avocado['Total Volume'].head()\nRegionfirs5=avocado['region'].head()\navocado_conc1=pd.concat([Pricefirst5,TotalVolumefirst5,Regionfirs5],axis=1)\navocado_conc1","3f74bf99":"avocado.dtypes","3c6aadda":"avocado['Total Volume']=avocado['Total Volume'].astype('int64')\n                                                       \navocado.dtypes                                                     ","079b7cff":"avocado.head()","79df0985":"avocado.info()","a7ba61f8":"assert avocado.columns[5]=='Date'","a657bcd5":"assert avocado.columns[1]=='Date'","f61bbd21":"print(avocado['type'].value_counts(dropna=False))","cdedc365":"avocado.describe()","8cdffded":"avocado1=avocado[(avocado['type']=='organic')& (avocado['region']=='Albany')|(avocado['region']=='West')&(avocado['year']==2015)]\navocado1","80a508c2":"avocado1.boxplot(column='AveragePrice',by='region',figsize=(10,20))\nplt.title('Average Price Box Plot Group by West and Albany')\nplt.xlabel('Region')\nplt.ylabel('Average Price')\nplt.show()","20478bd0":"avocado.head()","b7810910":"data1=avocado['Date']= pd.to_datetime(avocado['Date']) \ndata1\ndata2=avocado.head()\ndata2[\"Date\"] = data1\ndata2= data2.set_index(\"Date\")\ndata2 \n","c93a901c":"print(data2.loc[\"2015-11-29\"])\n","31bea938":"data2.resample(\"A\").mean()\n","0ac79f4f":"data2.resample(\"M\").mean()\n","518d140f":"avocado1 = avocado.loc[:,[\"Small Bags\",\"Large Bags\"]]\navocado1.plot()\nplt.show()","6aec7a12":"avocado1.plot(subplots = True)\nplt.show()","4d97d687":"Name = ['Ronan', 'Brayden', 'Marco', 'Aaron']  \n    \n \nAge = [15, 15, 16, 15]  \n\n\nID = [555,798,156,652]\n    \n \nlist_of_tuples = list(zip(ID,Name, Age))  \n    \n \nlist_of_tuples   \n  \n  \n\ndf = pd.DataFrame(list_of_tuples, columns = ['ID','Name', 'Age'])  \n     \n  \ndf  ","f88f1c7c":"df[\"Grades\"] = [\"100\",\"50\",\"75\",\"82\"]\ndf","4fda616c":"*We have not missing values.*","c6227f15":"*Finds an average by months.*","d36e49be":"\n## *PANDAS FOUNDATION*","9a34a687":"*Finds an average by years.*\n","86a16533":"# **BUILDING DATA FRAMES FROM SCRATCH**","fd6598df":"## *USER DEFINED FUNCTION AND SCOPE*","6f23a200":"# Python Data Science Tool Box\n\n","91ac5630":"*We can see that the average price is higher in Albany.*\n","0c14873c":"# **INDEXING PANDAS TIME SERIES**","9192c937":"*Converting float to int*","42b51e15":"# *Cleaning Data*","d4f6b55a":"# **VISUAL EXPLORATORY DATA ANALYSIS**"}}