{"cell_type":{"4a1b99a2":"code","bf918ed8":"code","d0bf0572":"code","4ce6edcd":"code","49e92606":"code","656bb8a3":"code","0e53f8f5":"code","fb8e3cdc":"code","cf619b39":"code","001b8b0d":"code","c874d457":"code","97248631":"code","07415713":"code","b306e148":"code","097c1a79":"code","4ebda492":"code","cae4980c":"code","1f1f4e31":"code","f51b1db1":"code","fbcc0803":"markdown","122cca99":"markdown","31dd939f":"markdown"},"source":{"4a1b99a2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport cv2\nimport pickle\n\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.layers import *\nfrom tensorflow.keras.models import *\nfrom tensorflow.keras.utils import to_categorical\n\nimport warnings\nwarnings.filterwarnings('ignore')","bf918ed8":"df = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ndf.head()","d0bf0572":"df.shape","4ce6edcd":"X, y = df.drop('label', 1).values, df.label.values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=1, stratify=y)\n\nX_train = X_train.reshape(-1,28,28)\nX_test = X_test.reshape(-1,28,28)","49e92606":"fig, axs = plt.subplots(nrows=2, ncols=5, figsize=(10, 5))\naxs = np.ravel(axs)\n\nfor i in range(len(axs)):\n    plt.sca(axs[i])\n    plt.imshow(X_train[i], cmap='gray')\n    plt.axis('off')\n    \nplt.tight_layout()\nplt.show()","656bb8a3":"%%time\n\nX_train = X_train.astype('uint8')\nX_test = X_test.astype('uint8')\n\n\nkernel = np.ones(shape=(3,3), dtype=np.uint8)\n\nfor i, image in enumerate(X_train):\n    image = cv2.morphologyEx(image, cv2.MORPH_CLOSE, kernel, iterations=1)\n    image = np.expand_dims(image, axis=0)\n    X_train = np.concatenate((X_train, image), axis=0)\n    y_train = np.concatenate((y_train, np.array([y_train[i]])), axis=0)\n    ","0e53f8f5":"X_train = np.expand_dims(X_train, axis=-1)\nX_test = np.expand_dims(X_test, axis=-1)\n\nX_train.shape, y_train.shape","fb8e3cdc":"def unpickle(file):\n    with open(file, 'rb') as fo:\n        qmnist = pickle.load(fo, encoding='bytes')\n    return qmnist","cf619b39":"qmnist = unpickle(\"..\/input\/qmnist-the-extended-mnist-dataset-120k-images\/MNIST-120k\")\n\ndata = qmnist['data']\nlabels = qmnist['labels']\n\ndata.shape, labels.shape","001b8b0d":"X_qmnist = np.expand_dims(data, axis=-1)\ny_qmnist = np.squeeze(labels)","c874d457":"X_train_full = np.concatenate((X_train, X_qmnist), axis=0)\ny_train_full = np.concatenate((y_train, y_qmnist), axis=0)","97248631":"X_train_scaled = X_train_full \/ 255.0\nX_test_scaled = X_test \/ 255.0\n\ny_train = to_categorical(y_train_full, num_classes=10)\ny_test = to_categorical(y_test, num_classes=10)","07415713":"BATCH_SIZE = 256\nAUTOTUNE = tf.data.AUTOTUNE\n\ntrain_ds = tf.data.Dataset.from_tensor_slices((X_train_scaled, y_train))\ntrain_ds = train_ds.shuffle(1024).batch(BATCH_SIZE).prefetch(AUTOTUNE)\n\ntest_ds =  tf.data.Dataset.from_tensor_slices((X_test_scaled, y_test)).batch(BATCH_SIZE).prefetch(AUTOTUNE)","b306e148":"cnn_model = Sequential([\n    Conv2D(64, 3, padding='same', activation='relu', input_shape=X_train_scaled[0].shape),\n    BatchNormalization(),\n    MaxPool2D(),\n    Conv2D(32, 3, padding='same', activation='relu'),\n    BatchNormalization(),\n    MaxPool2D(),\n    Flatten(),\n    Dense(512, 'relu'),\n    Dense(256, 'relu'),\n    Dense(10, 'softmax')\n])\n\ncnn_model.summary()","097c1a79":"%%time\n\ncnn_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\nearly_stopping = keras.callbacks.EarlyStopping(monitor='val_accuracy', patience=30, restore_best_weights=True)\n\ncnn_history = cnn_model.fit(train_ds, epochs=100,\n                            validation_data=test_ds,\n                            callbacks=[early_stopping],\n                            verbose=2)","4ebda492":"test_df = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\ntest_df.shape","cae4980c":"test_data = test_df.values\ntest_data = test_data.reshape(-1, 28, 28, 1)\ntest_data.shape","1f1f4e31":"test_data = test_data \/ 255.0","f51b1db1":"predictions = cnn_model.predict(test_data).argmax(axis=1)\n\nsubmission_df = pd.DataFrame({'ImageId':np.arange(1, len(predictions)+1), 'Label':predictions})\nsubmission_df.to_csv('submission.csv', index=False)","fbcc0803":"## cv2 Morphological Methods to extend data","122cca99":"# CNN Model","31dd939f":"### Load QMnist Data"}}