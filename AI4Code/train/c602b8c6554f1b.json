{"cell_type":{"1cbbb0ff":"code","88a179b4":"code","20a795bb":"code","be69e91a":"code","b1a3a708":"code","2d0390e8":"code","74ebbb4a":"code","4746e94c":"code","2b3ef0ea":"code","3a8db433":"code","580d691c":"code","4231fa89":"code","462b99f4":"code","f88b5049":"code","32855629":"code","4831cc9d":"code","efaec0fc":"markdown","4cffa6c0":"markdown","4883fc6a":"markdown","5db6d7f5":"markdown","0c8515e8":"markdown"},"source":{"1cbbb0ff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","88a179b4":"fpath = '\/kaggle\/input\/santa-workshop-tour-2019\/family_data.csv'\ndata = pd.read_csv(fpath, index_col='family_id')\n\nfpath = '\/kaggle\/input\/santa-workshop-tour-2019\/sample_submission.csv'\nsubmission = pd.read_csv(fpath, index_col='family_id')\n\n# lets upload Yury's ouput file to further save time\nfpath = '\/kaggle\/input\/starter-notebook-greedy-initialization\/submission_430074.7764025667.csv'\ngreedy = pd.read_csv(fpath, index_col='family_id')\n","20a795bb":"# lets find all rows which are assigned to no choices ( otherwise- most costly )and try to assign choice 0-9 \nothers_list = []\nfor ind,row in greedy.iterrows():\n    if row['assigned_day'] not in data.iloc[ind,:-1].to_list():\n        others_list.append(ind)\n        \n        \n","be69e91a":"len(others_list)","b1a3a708":"family_size_dict = data[['n_people']].to_dict()['n_people']\n\ncols = [f'choice_{i}' for i in range(10)]\nchoice_dict = data[cols].to_dict()\n\nN_DAYS = 100\nMAX_OCCUPANCY = 300\nMIN_OCCUPANCY = 125\n\n# from 100 to 1\ndays = list(range(N_DAYS,0,-1))","2d0390e8":"def cost_function(prediction):\n\n    penalty = 0\n\n    # We'll use this to count the number of people scheduled each day\n    daily_occupancy = {k:0 for k in days}\n    \n    # Looping over each family; d is the day for each family f\n    for f, d in enumerate(prediction):\n\n        # Using our lookup dictionaries to make simpler variable names\n        n = family_size_dict[f]\n        choice_0 = choice_dict['choice_0'][f]\n        choice_1 = choice_dict['choice_1'][f]\n        choice_2 = choice_dict['choice_2'][f]\n        choice_3 = choice_dict['choice_3'][f]\n        choice_4 = choice_dict['choice_4'][f]\n        choice_5 = choice_dict['choice_5'][f]\n        choice_6 = choice_dict['choice_6'][f]\n        choice_7 = choice_dict['choice_7'][f]\n        choice_8 = choice_dict['choice_8'][f]\n        choice_9 = choice_dict['choice_9'][f]\n\n        # add the family member count to the daily occupancy\n        daily_occupancy[d] += n\n\n        # Calculate the penalty for not getting top preference\n        if d == choice_0:\n            penalty += 0\n        elif d == choice_1:\n            penalty += 50\n        elif d == choice_2:\n            penalty += 50 + 9 * n\n        elif d == choice_3:\n            penalty += 100 + 9 * n\n        elif d == choice_4:\n            penalty += 200 + 9 * n\n        elif d == choice_5:\n            penalty += 200 + 18 * n\n        elif d == choice_6:\n            penalty += 300 + 18 * n\n        elif d == choice_7:\n            penalty += 300 + 36 * n\n        elif d == choice_8:\n            penalty += 400 + 36 * n\n        elif d == choice_9:\n            penalty += 500 + 36 * n + 199 * n\n        else:\n            penalty += 500 + 36 * n + 398 * n\n\n    # for each date, check total occupancy\n    #  (using soft constraints instead of hard constraints)\n    for _, v in daily_occupancy.items():\n        if (v > MAX_OCCUPANCY) or (v < MIN_OCCUPANCY):\n            penalty += 100000000\n\n    # Calculate the accounting cost\n    # The first day (day 100) is treated special\n    accounting_cost = (daily_occupancy[days[0]]-125.0) \/ 400.0 * daily_occupancy[days[0]]**(0.5)\n    # using the max function because the soft constraints might allow occupancy to dip below 125\n    accounting_cost = max(0, accounting_cost)\n    \n    # Loop over the rest of the days, keeping track of previous count\n    yesterday_count = daily_occupancy[days[0]]\n    for day in days[1:]:\n        today_count = daily_occupancy[day]\n        diff = abs(today_count - yesterday_count)\n        accounting_cost += max(0, (daily_occupancy[day]-125.0) \/ 400.0 * daily_occupancy[day]**(0.5 + diff \/ 50.0))\n        yesterday_count = today_count\n\n    penalty += accounting_cost\n\n    return penalty","74ebbb4a":"# Lets try to improve score by working on family with otherwise date assigned.\nbest = greedy['assigned_day'].tolist()\nstart_score = 430074.7764025667\n\nnew = best.copy()\n# loop over each family\nfor _, fam_id in enumerate(others_list):\n    # loop over each family choice\n    for pick in range(10):\n        day = choice_dict[f'choice_{pick}'][fam_id]\n        temp = new.copy()\n        temp[fam_id] = day # add in the new pick\n        if cost_function(temp) < start_score:\n            new = temp.copy()\n            start_score = cost_function(new)\n\nsubmission['assigned_day'] = new\nscore = cost_function(new)\n\n#submission.to_csv(f'submission_{score}.csv')\nprint(f'Score: {score}')","4746e94c":"list_9 = []\nfor ind,row in submission.iterrows():\n    if row['assigned_day'] == data.iloc[ind,-1]:\n        list_9.append(ind)","2b3ef0ea":"len(list_9)","3a8db433":"# Lets try to improve score by working on family with choice9 assigned\nbest = greedy['assigned_day'].tolist()\nstart_score = 430074.7764025667\n\nnew = best.copy()\n# loop over each family\nfor _, fam_id in enumerate(list_9):\n    # loop over each family choice\n    for pick in range(10):\n        day = choice_dict[f'choice_{pick}'][fam_id]\n        temp = new.copy()\n        temp[fam_id] = day # add in the new pick\n        if cost_function(temp) < start_score:\n            new = temp.copy()\n            start_score = cost_function(new)\n\nsubmission['assigned_day'] = new\nscore = cost_function(new)\n\n#submission.to_csv(f'submission_{score}.csv')\nprint(f'Score: {score}')","580d691c":"list_8 = []\nfor ind,row in submission.iterrows():\n    if row['assigned_day'] == data.iloc[ind,-2]:\n        list_8.append(ind)\n\n","4231fa89":"# Lets try to improve score by working on family with choice8 assigned\n\n\n\nbest = submission['assigned_day'].tolist()\nstart_score = cost_function(best)\n\nnew = best.copy()\n# loop over each family\nfor _, fam_id in enumerate(list_8):\n    # loop over each family choice\n    for pick in range(10):\n        day = choice_dict[f'choice_{pick}'][fam_id]\n        temp = new.copy()\n        temp[fam_id] = day # add in the new pick\n        if cost_function(temp) < start_score:\n            new = temp.copy()\n            start_score = cost_function(new)\n\nsubmission['assigned_day'] = new\nscore = cost_function(new)\n\n#submission.to_csv(f'submission_{score}.csv')\nprint(f'Score: {score}')","462b99f4":"list_7 = []\nfor ind,row in submission.iterrows():\n    if row['assigned_day'] == data.iloc[ind,-3]:\n        list_7.append(ind)\n","f88b5049":"len(list_7)","32855629":"\nbest = submission['assigned_day'].tolist()\nstart_score = cost_function(best)\n\nnew = best.copy()\n# loop over each family\nfor _, fam_id in enumerate(list_7):\n    # loop over each family choice\n    for pick in range(10):\n        day = choice_dict[f'choice_{pick}'][fam_id]\n        temp = new.copy()\n        temp[fam_id] = day # add in the new pick\n        if cost_function(temp) < start_score:\n            new = temp.copy()\n            start_score = cost_function(new)\n\nsubmission['assigned_day'] = new\nscore = cost_function(new)\n\n#submission.to_csv(f'submission_{score}.csv')\nprint(f'Score: {score}')","4831cc9d":"submission.to_csv(f'submission_{score}.csv')","efaec0fc":"I will not do it anymore . We can easily try this further by putting different choices (startng from 1) in loop, also sort days and family size since they affect cost.\n\n","4cffa6c0":"There are 101 family id which are assigned to otherwise dates. Lets try to assign them better dates and see if score improves . I am not running for entire data to save time.","4883fc6a":"It improved score . Lets try with other choices . We can easily put in loop and play more with it . \nAlso , we can sort by family size & day.","5db6d7f5":"Thanks for Yury Dzerin 's notebook . \nhttps:\/\/www.kaggle.com\/deyury\/starter-notebook-greedy-initialization\/output\n\nI have tried some ideas to further improve the score. ","0c8515e8":"Score didnt improve. Lets try for other options like choice9,8 ..etc."}}