{"cell_type":{"8884f7bf":"code","e69ad414":"code","0173c669":"code","86fc9902":"code","94a4847f":"code","9bd40ec2":"code","6126130e":"code","5b21efc9":"code","8651d840":"code","af521600":"code","2e4e9af0":"code","ed3eba1f":"markdown","0905bc68":"markdown","08246d42":"markdown","41f1a262":"markdown","7811e223":"markdown","6673ee9f":"markdown"},"source":{"8884f7bf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n\nfrom sklearn.ensemble import RandomForestClassifier\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport datatable as dt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e69ad414":"path='\/kaggle\/input\/tabular-playground-series-oct-2021\/'\ndf_training = pd.read_csv(path+'train.csv')\n","0173c669":"df_training.head()\n","86fc9902":"df_training.shape","94a4847f":"for column in df_training.columns:\n    if df_training[column].dtype == \"float64\":\n        df_training[column]=pd.to_numeric(df_training[column], downcast=\"float\")\n    if df_training[column].dtype == \"int64\":\n        df_training[column]=pd.to_numeric(df_training[column], downcast=\"integer\")","9bd40ec2":"X = df_training.drop('target', axis=1).copy()\n#X = df_training.drop('id','target', axis=1).copy()\n\nX.head()","6126130e":"y = df_training['target'].copy()\ny.head()\n","5b21efc9":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.30, random_state = 0)","8651d840":"clf = RandomForestClassifier(n_estimators=100, random_state=0)\nclf.fit(X_train, y_train)\n","af521600":"y_pred = clf.predict(X_test)","2e4e9af0":"# visualize feature importance\nimport matplotlib.pyplot as plt\n\nplt.figure(num=None, figsize=(10,8), dpi=80, facecolor='w', edgecolor='k')\n\nfeat_importances = pd.Series(clf.feature_importances_, index= X.columns)\n\nfeat_importances.nlargest(20).plot(kind='barh')","ed3eba1f":"# **Feature Importance via Random Forest**\nHello friends,\nI have been trying to get a good set of features for TPS-October. \nHere is another approach that worked for me. ","0905bc68":"**Splitting Data**","08246d42":"**Random Forest Importance**","41f1a262":"**Loading Data**","7811e223":"**Memory Reduction**","6673ee9f":"**Reference:**\nhttps:\/\/www.kaggle.com\/prashant111\/comprehensive-guide-on-feature-selection#4.-Embedded-Methods-"}}