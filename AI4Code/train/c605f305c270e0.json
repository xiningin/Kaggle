{"cell_type":{"b5f06e82":"code","2e0a7566":"code","929d7678":"code","fa99b5ca":"code","ca06c4d6":"code","d7766640":"code","26702480":"code","5e8f164c":"code","01d9bd69":"code","86be8867":"code","3fa5b822":"code","0115ddf1":"code","d0e86d53":"code","41eceeff":"code","4eb9681c":"code","7d20f503":"code","5b2b6699":"code","66e34304":"code","3f7e9d1a":"code","670f0f05":"code","255b2a31":"code","bf2deec5":"code","3c2f9220":"code","2abb328a":"code","91f3b68c":"code","d2238cf1":"code","aac9acde":"code","89e8bba7":"code","936448b8":"code","ba3c9856":"code","4f428214":"code","bac6a52d":"code","da68dcbf":"code","0ab9b4fa":"code","a7a26a7c":"code","c284eb2c":"code","b490d2c7":"code","c9eebcc4":"code","10d69650":"code","e0a131f7":"code","169a2b6e":"code","56e7fdd1":"code","2d410b57":"code","acea0bb4":"code","5e36ccaa":"code","38202cfc":"code","230f6dba":"code","e7cd2e2b":"code","3f695a77":"code","86c902b0":"code","61155ff3":"code","54f0bcdb":"code","726176a1":"markdown","7a542628":"markdown","9f9e0962":"markdown","b91963cb":"markdown","5337f90b":"markdown","6e81d2dd":"markdown","b1de712c":"markdown","92c0bbe6":"markdown","c838a4d3":"markdown","ec77f806":"markdown","54b120bd":"markdown","14b82476":"markdown","2d28d6b4":"markdown","c481932b":"markdown","36758e18":"markdown","e24240e0":"markdown","ebde386e":"markdown","d1d56535":"markdown","fc7fd4b7":"markdown","a6185de7":"markdown","f19e5611":"markdown","5af94182":"markdown","1abb0052":"markdown","c72f2c38":"markdown","4c6b2660":"markdown","c942a4b6":"markdown","6d44ad0d":"markdown","ffea267e":"markdown"},"source":{"b5f06e82":"import pandas as pd\nimport numpy as np\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\n\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns\nfrom pandas_profiling import ProfileReport","2e0a7566":"df = pd.read_csv(\"\/kaggle\/input\/netflix-shows\/netflix_titles.csv\")\ndf.head()","929d7678":"df.info()","fa99b5ca":"report = ProfileReport(df)","ca06c4d6":"report","d7766640":"df.nunique()","26702480":"df.isna().sum()","5e8f164c":"df['rating'].unique()","01d9bd69":"df[df['rating'].isna()]","86be8867":"rating_replacements = {\n    211: 'TV-14',\n    2411: 'TV-14',\n    3288: 'PG-13',\n    4056: 'TV-G',\n    4402: 'TV-G',\n    4403: 'TV-G',\n    4706: 'TV-14',\n    5015: 'TV-14',\n    5234: 'TV-14',\n    6231: 'TV-Y'\n}\n\nfor id, rate in rating_replacements.items():\n    df.iloc[id, 8] = rate\n    \ndf['rating'].isna().sum()","3fa5b822":"df = df.drop(['director', 'cast'], axis=1)\ndf.columns","0115ddf1":"df[df['date_added'].isna()]","d0e86d53":"df = df[df['date_added'].notna()]","41eceeff":"df['country'] = df['country'].fillna(df['country'].mode()[0])","4eb9681c":"df.isna().sum()","7d20f503":"df.head()","5b2b6699":"df['year_added'] = df['date_added'].apply(lambda x: x.split(\" \")[-1])\ndf['year_added'].head()","66e34304":"df['month_added'] = df['date_added'].apply(lambda x: x.split(\" \")[0])\ndf['month_added'].head()","3f7e9d1a":"ratings_ages = {\n    'TV-PG': 'Older Kids',\n    'TV-MA': 'Adults',\n    'TV-Y7-FV': 'Older Kids',\n    'TV-Y7': 'Older Kids',\n    'TV-14': 'Teens',\n    'R': 'Adults',\n    'TV-Y': 'Kids',\n    'NR': 'Adults',\n    'PG-13': 'Teens',\n    'TV-G': 'Kids',\n    'PG': 'Older Kids',\n    'G': 'Kids',\n    'UR': 'Adults',\n    'NC-17': 'Adults'\n}","670f0f05":"df['target_ages'] = df['rating'].replace(ratings_ages)\ndf['target_ages'].unique()","255b2a31":"# Lets retrieve just the first country\ndf['principal_country'] = df['country'].apply(lambda x: x.split(\",\")[0])\ndf['principal_country'].head()","bf2deec5":"df.dtypes","3c2f9220":"# type should be a category\ndf['type'] = pd.Categorical(df['type'])\n# target_ages is another category (4 classes)\ndf['target_ages'] = pd.Categorical(df['target_ages'], categories=['Kids', 'Older Kids', 'Teens', 'Adults'])\n\n# Year added should be integer so we can compare with `released_year`\ndf['year_added'] = pd.to_numeric(df['year_added'])","2abb328a":"df.dtypes","91f3b68c":"df.head()","d2238cf1":"df['genre'] = df['listed_in'].apply(lambda x :  x.replace(' ,',',').replace(', ',',').split(',')) \ndf['genre'].head()","aac9acde":"movie_df = df[df['type'] == 'Movie']\nshow_df = df[df['type'] == 'TV Show']\n\nshow_df.head()","89e8bba7":"fig = px.pie(df['type'].value_counts().reset_index(), values='type', names='index')\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","936448b8":"def generate_rating_df(df):\n    rating_df = df.groupby(['rating', 'target_ages']).agg({'show_id': 'count'}).reset_index()\n    rating_df = rating_df[rating_df['show_id'] != 0]\n    rating_df.columns = ['rating', 'target_ages', 'counts']\n    rating_df = rating_df.sort_values('target_ages')\n    return rating_df","ba3c9856":"rating_df = generate_rating_df(df)\nfig = px.bar(rating_df, x='rating', y='counts', color='target_ages')\nfig.show()","4f428214":"movie_rating_df = generate_rating_df(movie_df)\nshow_rating_df = generate_rating_df(show_df)\n\nfig = make_subplots(rows=1, cols=2, specs=[[{\"type\": \"pie\"}, {\"type\": \"pie\"}]])\n\nfig.add_trace(\n    go.Pie(labels=movie_rating_df['target_ages'], values=movie_rating_df['counts']),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Pie(labels=show_rating_df['target_ages'], values=show_rating_df['counts']),\n    row=1, col=2\n)\n\nfig.update_traces(textposition='inside', hole=.4, hoverinfo=\"label+percent+name\")\nfig.update_layout(\n    title_text=\"Rating distribution by Type of content\",\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='Movies', x=0.16, y=0.5, font_size=12, showarrow=False),\n                 dict(text='TV Shows', x=0.82, y=0.5, font_size=12, showarrow=False)])\nfig.show()","bac6a52d":"country_df = df['principal_country'].value_counts().reset_index()\ncountry_df = country_df[country_df['principal_country'] \/  country_df['principal_country'].sum() > 0.01]\n\nfig = px.pie(country_df, values='principal_country', names='index')\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","da68dcbf":"fig = px.histogram(df, x='principal_country')\nfig.update_xaxes(categoryorder='total descending')\nfig.show()","0ab9b4fa":"released_year_df = df.loc[df['release_year'] > 2010].groupby(['release_year', 'type']).agg({'show_id': 'count'}).reset_index()\nadded_year_df = df.loc[df['year_added'] > 2010].groupby(['year_added', 'type']).agg({'show_id': 'count'}).reset_index()\n\nfig = go.Figure()\nfig.add_trace(go.Scatter( \n    x=released_year_df.loc[released_year_df['type'] == 'Movie']['release_year'], \n    y=released_year_df.loc[released_year_df['type'] == 'Movie']['show_id'],\n    mode='lines+markers',\n    name='Movie: Released Year',\n    marker_color='green',\n))\nfig.add_trace(go.Scatter( \n    x=released_year_df.loc[released_year_df['type'] == 'TV Show']['release_year'], \n    y=released_year_df.loc[released_year_df['type'] == 'TV Show']['show_id'],\n    mode='lines+markers',\n    name='TV Show: Released Year',\n    marker_color='darkgreen',\n))\nfig.add_trace(go.Scatter( \n    x=added_year_df.loc[added_year_df['type'] == 'Movie']['year_added'], \n    y=added_year_df.loc[added_year_df['type'] == 'Movie']['show_id'],\n    mode='lines+markers',\n    name='Movie: Year Added',\n    marker_color='orange',\n))\nfig.add_trace(go.Scatter( \n    x=added_year_df.loc[added_year_df['type'] == 'TV Show']['year_added'], \n    y=added_year_df.loc[added_year_df['type'] == 'TV Show']['show_id'],\n    mode='lines+markers',\n    name='TV Show: Year Added',\n    marker_color='darkorange',\n))\nfig.update_xaxes(categoryorder='total descending')\nfig.show()","a7a26a7c":"from scipy.stats import norm\n\nsns.distplot(df.loc[df['release_year'] > 2000, 'release_year'], fit=norm, kde=False)","c284eb2c":"from sklearn.preprocessing import MultiLabelBinarizer ","b490d2c7":"def calculate_mlb(series):\n    mlb = MultiLabelBinarizer()\n    mlb_df = pd.DataFrame(mlb.fit_transform(series), columns=mlb.classes_, index=series.index)\n    return mlb_df","c9eebcc4":"def top_genres(df, title='Top ones'):\n    genres_df = calculate_mlb(df['genre'])\n    tdata = genres_df.sum().sort_values(ascending=False)\n    \n    fig = go.Figure()\n    fig.add_trace(go.Bar(\n        x=tdata.index,\n        y=tdata.values,\n    ))\n    fig.update_xaxes(categoryorder='total descending')\n    fig.update_layout(title=title)\n    fig.show()","10d69650":"top_genres(movie_df, title='Top Movies Genres')","e0a131f7":"top_movies_genres = [\n    'International Movies',\n    'Dramas',\n    'Comedies',\n    'Documentaries',\n    'Action & Adventure',\n]","169a2b6e":"top_genres(show_df, title='Top TV Shows Genres')","56e7fdd1":"genres_df = calculate_mlb(movie_df['genre'])\n\nmovie_corr = genres_df.corr()\nmovie_mask = np.zeros_like(movie_corr, dtype=np.bool)\nmovie_mask[np.triu_indices_from(movie_mask)] = True\nfig, ax = plt.subplots(figsize=(10, 7))\npl = sns.heatmap(movie_corr, mask=movie_mask, cmap= \"coolwarm\", vmax=.5, vmin=-.5, center=0, linewidths=.5,\n                 cbar_kws={\"shrink\": 0.6})\nplt.show()","2d410b57":"genres_df = calculate_mlb(show_df['genre'])\n\nshow_corr = genres_df.corr()\nshow_mask = np.zeros_like(show_corr, dtype=np.bool)\nshow_mask[np.triu_indices_from(show_mask)] = True\nfig, ax = plt.subplots(figsize=(10, 7))\npl = sns.heatmap(show_corr, mask=show_mask, cmap= \"coolwarm\", vmax=.5, vmin=-.5, center=0, linewidths=.5,\n                 cbar_kws={\"shrink\": 0.6})\nplt.show()","acea0bb4":"from wordcloud import WordCloud\n\ntext = str(list(movie_df['genre'])).replace(',', '').replace('[', '').replace(\"'\", '').replace(']', '')\n\nplt.rcParams['figure.figsize'] = (15, 15)\nwordcloud = WordCloud(background_color = 'white', width = 1200,  height = 1200, max_words = 121).generate(text)\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","5e36ccaa":"fig = px.histogram(x=show_df['duration'])\nfig.update_xaxes(categoryorder=\"total descending\")\nfig.update_layout(\n    title=\"Distribution of shows duration\",\n    xaxis_title=\"Duration of the Show\",\n)\nfig.show()","38202cfc":"temp_duration = movie_df['duration'].apply(lambda x: int(x.split(' ')[0]))","230f6dba":"movie_df.loc[temp_duration.loc[temp_duration < 90].index, 'duration_bin'] = 'Less than 1.30 hours'\nmovie_df.loc[temp_duration.loc[(temp_duration >= 90) & (temp_duration < 150)].index, 'duration_bin'] = 'More than 1.30 - less than 2.30 hours'\nmovie_df.loc[temp_duration.loc[temp_duration >= 150].index, 'duration_bin'] = 'More than 2.30 hours'","e7cd2e2b":"movie_df.head()","3f695a77":"fig = px.histogram(x=movie_df['duration_bin'], color=movie_df['duration_bin'])\nfig.update_xaxes(categoryorder = \"array\",\n                categoryarray = ['Less than 1.30 hours', 'More than 1.30 - less than 2.30 hours', 'More than 2.30 hours'],\n                )\nfig.update_layout(\n    title=\"Distribution of movies duration\",\n    xaxis_title=\"Duration of the Movies\",\n)\nfig.show()","86c902b0":"def check_genre_contains(genres):\n    for genre in genres:\n        if genre in top_movies_genres:\n            return True\n    return False","61155ff3":"movie_df['principal_genre'] = movie_df['genre'].apply(lambda genres: genres[0])\nmovie_df['principal_genre'].head()","54f0bcdb":"year_genre_df = movie_df[(movie_df['principal_genre'].isin(top_movies_genres)) & (movie_df['year_added'] >= 2017)].groupby(['principal_genre', 'year_added']).agg({'title': 'count'})\nyear_genre_df = year_genre_df.reset_index()\nyear_genre_df.columns = ['principal_genre', 'year_added', 'count']\n\nfig = px.sunburst(year_genre_df, path=['year_added', 'principal_genre'], values='count')\nfig.show()","726176a1":"# Data Visualization","7a542628":"### Fix rating missings","9f9e0962":"I have search for them in the internet and is dificult to find the `date_added`to Netlix, so i will drop them, as they are only 11 rows","b91963cb":"![netflix.jpg](attachment:netflix.jpg)","5337f90b":"### Check if data is cleaned","6e81d2dd":"# Top Genres release by year\n\nAs we saw in the previos steps, in the last 4 years, there has been  a huge amount of shows releases. So we are going to explore the distribution of genres by year.\n\nWe are going to use new plot **sunburst**. Maybe it's not the best plot for this porpose, but i want to use and how different types of charts.","b1de712c":"The missing values are in:\n* `director`: i think its not needed for the analysis (no much information)\n* `cast`: this var has too many diferent values too so there is no muich information out there \n* `country`: this is a importante variable so wi will think how to fix it (maybe mode)\n* `date_added`: there are just a few cases, so lets scrap them\n* `rating`: there are just a few cases, so lets scrap them","92c0bbe6":"### Year and month by adding date\n\nWe are going to take the year and the month from `date_added` so we can compare wich are the most valueable months and the difference between Show realse and Netflix adding dates","c838a4d3":"As we can see, there are much more TV shows than Movies","ec77f806":"# Duration analysis","54b120bd":"## Word cloud","14b82476":"<p style=\"font-family:newtimeroman; font-size:200%; text-align:center;\"><b>This kernel is part of a Plotly guide that I am developing at the moment and it's focused showing the main tips and tricks for the Data Analysis.<\/b><\/p>\n<p style=\"font-family:newtimeroman; font-size:150%; text-align:center;\"><i><a href='https:\/\/www.kaggle.com\/andreshg\/eda-beginner-to-expert-plotly'>Part I: Netflix Analysis (this one)<\/a><\/i><\/p>\n\n<p style=\"font-family:newtimeroman; font-size:150%; text-align:center;\"><i><a href='https:\/\/www.kaggle.com\/andreshg\/video-games-eda-and-visualization'>Part II: Video Games Analysis<\/a><\/i><\/p>\n\n<p style=\"font-family:newtimeroman; font-size:150%; text-align:center;\"><i><a href='https:\/\/www.kaggle.com\/andreshg\/covid-progression-a-plotly-animated-guide'>Part III: COVID-19 World Vaccination Progress<\/a><\/i><\/p>","2d28d6b4":"### Fix date_added missings ","c481932b":"## Fix data types","36758e18":"### Shows targets based on rating\n\nThis could be interesting to show wich is target mostly focused by productions","e24240e0":"Lets check how many nulls are there in the data","ebde386e":"### Fix country missing values","d1d56535":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:250%; text-align:center; border-radius: 15px 50px;\">Netflix Analysis Report | EDA Guidelines \ud83d\udcca<\/p>\n\n","fc7fd4b7":"The main idea of this notebook is to show how to make and EDA job focusiong on different types of plots and chartes. I want to focus this notebook on interative plots with Plotly. I think that other libraries like seaborn and awesome and absolutely necesary for any Data Scientist job, but in this case i want to show interative plots. I will focus on other libraries in other tutorials.\n\nSo here you can see how to extract information from a dataset and how to plot.","a6185de7":"### Analyze Series duration\n\nThis values are in term of seasons, so there is no much to analyze.\n\nAs we can see the most of the series are only **1 season** probably becasuse they were cancelled or they are new and the second one is in production.","f19e5611":"## Generate new columns based on variables","5af94182":"# Genres Analysis\n\n### Build dataframes for `type`s of content","1abb0052":"### Drop director and cast columns","c72f2c38":"Based on the information from [Amazon](https:\/\/www.amazon.com\/gp\/help\/customer\/display.html?nodeId=G2C2CPZWGZWHZ42J) ranting information and Netflix shows, we can find the following replacements","4c6b2660":"### Movie duration Alasysis\n\nLets split the data duration into bins:\n- Less than 1.30 hours\n- More than 1.30 hours and less than 2.30 hours\n- Morte than 2.30 hours\n\nAs we can see, the most part of the movies' **duration is between 1.30 hours and 2.30 hours**","c942a4b6":"### Country fixup\n\nThere are some entry where `country` has multiple values. so i think i will add a new column with just the first one so we can check witch regions have more productions","6d44ad0d":"# Distribution of content released\n\nAs we can see, in the last few years, there has been a increment in content productions","ffea267e":"# Data Cleaning"}}