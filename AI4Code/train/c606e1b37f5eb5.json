{"cell_type":{"0ecf0c16":"code","9dd30e1c":"code","1ef44df8":"code","d60c7450":"code","fec8dd82":"code","3603e037":"code","0ef7f7f5":"code","b48e7cd3":"code","104bcf04":"code","5e0e06f4":"code","7324b497":"code","27f16978":"code","620116f6":"code","2b002c84":"code","1e9ca641":"code","4c16763a":"code","61fbbd6e":"code","6323e6e7":"code","e57779ad":"code","ce1f9c0a":"code","d41fd035":"code","ca042505":"code","deb92c7c":"markdown","17f01be9":"markdown","97ce435b":"markdown","dde53a14":"markdown","5da1b572":"markdown","42486a5e":"markdown","a78ef5fb":"markdown","ce8a23ac":"markdown","28c9e57a":"markdown","91be25db":"markdown","dece20bf":"markdown"},"source":{"0ecf0c16":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","9dd30e1c":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# Mongolia Crime Data.csv has 56899 rows in reality, but we are only loading\/previewing the first 1000 rows\ndf = pd.read_csv('..\/input\/mongolian-crime-dataset\/Mongolia Crime Data.csv', delimiter=',', nrows = nRowsRead)\ndf.dataframeName = 'Mongolia Crime Data.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')","1ef44df8":"df.head()","d60c7450":"df.dtypes","fec8dd82":"df.describe()","3603e037":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()","0ef7f7f5":"plotPerColumnDistribution(df, 10, 5)","b48e7cd3":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()","104bcf04":"plotCorrelationMatrix(df, 8)","5e0e06f4":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Mongolian Crime')\n    plt.show()","7324b497":"plotScatterMatrix(df, 8, 4)","27f16978":"sns.pairplot(df, markers=\"+\", diag_kind=\"kde\")\nplt.show()","620116f6":"sns.pairplot(df, x_vars=['\u0425\u044d\u0440\u0433\u0438\u0439\u043d \u0434\u0443\u0433\u0430\u0430\u0440'], y_vars='\u0414\u04af\u04af\u0440\u044d\u0433', markers=\"+\", size=4)\nplt.show()","2b002c84":"dfcorr=df.corr()\ndfcorr","1e9ca641":"sns.heatmap(dfcorr,annot=True,cmap='seismic')\nplt.show()","4c16763a":" # Necessary Functions: \ndef pie_plot(labels, values, colors, title):\n    fig = {\n      \"data\": [\n        {\n          \"values\": values,\n          \"labels\": labels,\n          \"domain\": {\"x\": [0, .48]},\n          \"name\": \"Job Type\",\n          \"sort\": False,\n          \"marker\": {'colors': colors},\n          \"textinfo\":\"percent+label+value\",\n          \"textfont\": {'color': '#FFFFFF', 'size': 10},\n          \"hole\": .6,\n          \"type\": \"pie\"\n        } ],\n        \"layout\": {\n            \"title\":title,\n            \"annotations\": [\n                {\n                    \"font\": {\n                        \"size\": 25,\n\n                    },\n                    \"showarrow\": False,\n                    \"text\": \"\"\n\n                }\n            ]\n        }\n    }\n    return fig","61fbbd6e":"import plotly.offline as py\nvalue_counts = df['\u0425\u044d\u0440\u0433\u0438\u0439\u043d \u0434\u0443\u0433\u0430\u0430\u0440'].value_counts()\nlabels = value_counts.index.tolist()\npy.iplot(pie_plot(labels, value_counts,['#1B9E77', '#7570B3'], \"\u0425\u044d\u0440\u0433\u0438\u0439\u043d \u0434\u0443\u0433\u0430\u0430\u0440\"))","6323e6e7":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.\u0414\u04af\u04af\u0440\u044d\u0433)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200, background_color=\"white\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","e57779ad":"df = df.rename(columns={'\u0428\u0430\u043b\u0433\u0430\u0441\u0430\u043d \u0426\u0425':'\u0428\u0430\u043b\u0433\u0430\u0441\u0430\u043d', '\u0425\u044d\u0440\u0433\u0438\u0439\u043d \u0431\u0430\u0439\u0440\u0448\u0438\u043b': '\u0425\u044d\u0440\u0433\u0438\u0439\u043d', '\u0413\u044d\u043c\u0442 \u0445\u044d\u0440\u0433\u0438\u0439\u043d \u0442\u04e9\u0440\u04e9\u043b': '\u0442\u04e9\u0440\u04e9\u043b'})","ce1f9c0a":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.\u0428\u0430\u043b\u0433\u0430\u0441\u0430\u043d)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200, background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","d41fd035":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.\u0425\u044d\u0440\u0433\u0438\u0439\u043d)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200, background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","ca042505":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.\u0442\u04e9\u0440\u04e9\u043b)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200, background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","deb92c7c":"Report number.","17f01be9":"According to Robert Ritz, (Dataset's author) it consists of crime reports, their location, and the date of the crime from 2014-2017. From exploring the data it is clear that the 2014 and 2017 data is not complete, so analysis on these years should be done with that in mind. The years 2015 and 2016 appear complete.\nThe data was scrapped from the Mongolian Police Agency's Crimemap website at http:\/\/crimemap.police.gov.mn. \n\nHere is a translation and description of each column from Mongolian to English: - \u0413\u044d\u043c\u0442 \u0445\u044d\u0440\u0433\u0438\u0439\u043d \u0442\u04e9\u0440\u04e9\u043b: Crime category.\n- \u0425\u044d\u0440\u0433\u0438\u0439\u043d \u0434\u0443\u0433\u0430\u0430\u0440: Case number\n- \u0425\u044d\u0440\u0433\u0438\u0439\u043d \u043e\u0433\u043d\u043e\u043e: Case date\n- \u0425\u044d\u0440\u0433\u0438\u0439\u043d \u0431\u0430\u0439\u0440\u0448\u0438\u043b: Crime location\n- \u0425\u043e\u0442\/\u0410\u0439\u043c\u0430\u0433: City\/Province\n- \u0414\u04af\u04af\u0440\u044d\u0433: District (only in Ulaanbaatar, the capital city)\n- \u0425\u043e\u0440\u043e\u043e\/\u0421\u0443\u043c: Subdistrict (in Ulaanbaatar), Outside of Ulaanbaatar the smallest administrative unit (soum)\n- \u0428\u0430\u043b\u0433\u0430\u0441\u0430\u043d \u0426\u0425: Police station where crime was reported","97ce435b":"Pie chart: Report Number.","dde53a14":"Pairplot: Report number (x_vars). District, in Ulaanbaatar (y_vars)","5da1b572":"WordCloud: District (in Ulaanbaatar).","42486a5e":"WordCloud: Crime Category.","a78ef5fb":"WordCloud: Crime Location.","ce8a23ac":"WordCloud: Reporting Police Station.","28c9e57a":"Stats: Report Number. ","91be25db":"Kaggle Notebook Runner: Mar\u00edlia Prata @mpwolke.","dece20bf":"#Thanks to Robert Ritz @robertritz, author of this Dataset and that article: https:\/\/medium.com\/mongolian-data-stories\/goats-are-taking-over-the-steppe-12ff7cb21f14"}}