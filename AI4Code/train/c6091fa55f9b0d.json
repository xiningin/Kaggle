{"cell_type":{"7bf8f57b":"code","0f52152e":"code","dba1a6de":"code","eaebe7af":"code","8cbcbfcc":"code","2c4e4551":"code","c58e6a82":"code","bec80484":"code","68a67ea1":"code","e638011a":"code","6e951379":"code","c3cde69b":"code","2030d584":"code","a38c3609":"code","a935d679":"code","abf460ac":"code","1d1af64f":"code","91bcdbbd":"code","e637f303":"code","40dc8bdc":"code","503d82a0":"code","a7580edd":"code","656df1a9":"code","62ddeb86":"code","c0cebaa8":"code","1844b420":"code","6446fc10":"code","3d504f6f":"code","f61cac66":"code","ce528530":"code","35733a6c":"code","0c57b5d6":"code","d94901a9":"code","072ca521":"code","aae95b53":"code","618b56b5":"markdown","8fdf0813":"markdown","143f5864":"markdown","1559d47d":"markdown","94477c35":"markdown","7379e504":"markdown","80a9ffa2":"markdown","5f45efc6":"markdown","297b177f":"markdown","605b2d87":"markdown","d79b0d0d":"markdown","51e4b41c":"markdown","a386dc90":"markdown","3aa4c214":"markdown","0c76712a":"markdown","c39f48ee":"markdown","c9fe9de0":"markdown","bb07bbdc":"markdown","51b7e04c":"markdown","5ad6384b":"markdown","165c3753":"markdown","9bef0cd0":"markdown"},"source":{"7bf8f57b":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score\n\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier","0f52152e":"df = pd.read_csv(\"..\/input\/heart-attack-analysis-prediction-dataset\/heart.csv\")","dba1a6de":"df.head()","eaebe7af":"df.shape","8cbcbfcc":"df.info()","2c4e4551":"df.describe().T","c58e6a82":"df.isnull().sum()","bec80484":"df.duplicated().sum()","68a67ea1":"df.drop_duplicates(inplace=True)","e638011a":"df.duplicated().sum()","6e951379":"plt.figure(figsize=(10,6))\nsns.countplot(df[\"sex\"])\nplt.title(\"Sex\", size=15)\nplt.show()","c3cde69b":"plt.figure(figsize=(10,6))\nsns.distplot(df[\"age\"])\nplt.title(\"Age\", size=15)\nplt.show()","2030d584":"plt.figure(figsize=(10,6))\nsns.countplot(df[\"cp\"])\nplt.title(\"Chest Pain Type\", size=15)\nplt.show()","a38c3609":"plt.figure(figsize=(10,6))\nsns.distplot(df[\"chol\"])\nplt.title(\"Cholesterol\", size=15)\nplt.show()","a935d679":"plt.figure(figsize=(10,8))\nsns.distplot(df[df[\"output\"]==1][\"age\"], color=\"blue\")\nsns.distplot(df[df[\"output\"]==0][\"age\"], color=\"red\")\nplt.title(\"Attack vs Age\", size=15)\nplt.show()","abf460ac":"plt.figure(figsize=(10,8))\nsns.distplot(df[df[\"output\"]==1][\"chol\"], color=\"blue\")\nsns.distplot(df[df[\"output\"]==0][\"chol\"], color=\"red\")\nplt.title(\"Attack vs Cholesterol\", size=15)\nplt.show()","1d1af64f":"plt.figure(figsize=(10,8))\nsns.distplot(df[df[\"output\"]==1][\"trtbps\"], color=\"blue\")\nsns.distplot(df[df[\"output\"]==0][\"trtbps\"], color=\"red\")\nplt.title(\"Attack vs Resting Blood Pressure\", size=15)\nplt.show()","91bcdbbd":"plt.figure(figsize=(10,8))\nsns.barplot(x=df[\"sex\"], y=df[\"output\"])\nplt.title(\"Attack vs Sex\", size=15)\nplt.show()","e637f303":"plt.figure(figsize=(12,10))\nsns.heatmap(df.corr(),annot=True, cmap=\"RdBu\")\nplt.title(\"Correlation Between Variables\", size=15)\nplt.show()","40dc8bdc":"X = df.drop(\"output\", axis=1)\ny = df[\"output\"]","503d82a0":"ss = StandardScaler()\nX = ss.fit_transform(X)","a7580edd":"X = pd.DataFrame(X, columns=df.drop(\"output\", axis=1).columns)\ny = pd.DataFrame(y, columns=[\"output\"])","656df1a9":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","62ddeb86":"models = pd.DataFrame(columns=[\"Model\",\"Accuracy Score\"])","c0cebaa8":"log_reg = LogisticRegression()\nlog_reg.fit(X_train, y_train)\npredictions = log_reg.predict(X_test)\nscore = accuracy_score(y_test, predictions)\nprint(\"LogisticRegression: \", score)\n\nnew_row = {\"Model\": \"LogisticRegression\", \"Accuracy Score\": score}\nmodels = models.append(new_row, ignore_index=True)","1844b420":"GNB = GaussianNB()\nGNB.fit(X_train, y_train)\npredictions = GNB.predict(X_test)\nscore = accuracy_score(y_test, predictions)\nprint(\"GaussianNB: \", score)\n\nnew_row = {\"Model\": \"GaussianNB\", \"Accuracy Score\": score}\nmodels = models.append(new_row, ignore_index=True)","6446fc10":"BNB = BernoulliNB()\nBNB.fit(X_train, y_train)\npredictions = BNB.predict(X_test)\nscore = accuracy_score(y_test, predictions)\nprint(\"BernoulliNB: \", score)\n\nnew_row = {\"Model\": \"BernoulliNB\", \"Accuracy Score\": score}\nmodels = models.append(new_row, ignore_index=True)","3d504f6f":"svm = SVC(random_state=0)\nsvm.fit(X_train, y_train)\npredictions = svm.predict(X_test)\nscore = accuracy_score(y_test, predictions)\nprint(\"SVC: \", score)\n\nnew_row = {\"Model\": \"SVC\", \"Accuracy Score\": score}\nmodels = models.append(new_row, ignore_index=True)","f61cac66":"randomforest = RandomForestClassifier(n_estimators=1000, max_depth=5, random_state=42)\nrandomforest.fit(X_train, y_train)\npredictions = randomforest.predict(X_test)\nscore = accuracy_score(y_test, predictions)\nprint(\"RandomForestClassifier: \", score)\n\nnew_row = {\"Model\": \"RandomForestClassifier\", \"Accuracy Score\": score}\nmodels = models.append(new_row, ignore_index=True)","ce528530":"xgb = XGBClassifier()\nxgb.fit(X_train, y_train)\npredictions = xgb.predict(X_test)\nscore = accuracy_score(y_test, predictions)\nprint(\"XGBClassifier: \", score)\n\nnew_row = {\"Model\": \"XGBClassifier\", \"Accuracy Score\": score}\nmodels = models.append(new_row, ignore_index=True)","35733a6c":"knn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(X_train, y_train)\npredictions = knn.predict(X_test)\nscore = accuracy_score(y_test, predictions)\nprint(\"KNeighborsClassifier: \", score)","0c57b5d6":"score_list=[]\n\nfor i in range(1,20):\n    knn2 = KNeighborsClassifier(n_neighbors=i)\n    knn2.fit(X_train, y_train)\n    predictions = knn2.predict(X_test)\n    score_list.append(accuracy_score(predictions, y_test))","d94901a9":"plt.figure(figsize =(10, 6))\nplt.plot(range(1, 20), score_list, marker ='o', markerfacecolor ='red', markersize = 10)\n  \nplt.title('Score vs K Value', size=15)\nplt.xlabel('K value')\nplt.ylabel('Score')","072ca521":"knn3 = KNeighborsClassifier(n_neighbors=17)\nknn3.fit(X_train, y_train)\npredictions = knn3.predict(X_test)\nscore = accuracy_score(y_test, predictions)\nprint(\"KNeighborsClassifier: \", score)\n\nnew_row = {\"Model\": \"KNeighborsClassifier\", \"Accuracy Score\": score}\nmodels = models.append(new_row, ignore_index=True)","aae95b53":"models.sort_values(by=\"Accuracy Score\", ascending=False)","618b56b5":"***Standardizing the data***","8fdf0813":"***Checking for the duplicates***","143f5864":"***Checking the columns' data types***","1559d47d":"# Data Preprocessing","94477c35":"# Data Visualization","7379e504":"# Machine Learning Models","80a9ffa2":"# Exploratory Data Analysis","5f45efc6":"<h2>Thank you for reading my notebook, hope it helps... If you liked it, please do not forget to give upvote. Peace out \u270c\ufe0f\u2764\ufe0f<\/h2>","297b177f":"# Data Cleaning","605b2d87":"***Taking a look at the first 5 rows of the dataset***","d79b0d0d":"<h1><center>EDA + Prediction on Heart Attack Dataset (87.9% Accuracy)<\/center><\/h1>","51e4b41c":"# Comparison of Machine Learning Models","a386dc90":"***Handling the duplicates***","3aa4c214":"# About The Dataset\n* **Age** : Age of the patient\n* **Sex** : Sex of the patient (1 = male, 0 = female)\n* **exang**: exercise induced angina (1 = yes; 0 = no)\n* **ca**: number of major vessels (0-3)\n* **cp** : Chest Pain type chest pain type\n    * Value 1: typical angina\n    * Value 2: atypical angina\n    * Value 3: non-anginal pain\n    * Value 4: asymptomatic\n* **trtbps** : resting blood pressure (in mm Hg)\n* **chol** : cholestoral in mg\/dl fetched via BMI sensor\n* **fbs** : (fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false)\n* **rest_ecg** : resting electrocardiographic results\n    * Value 0: normal\n    * Value 1: having ST-T wave abnormality (T wave inversions and\/or ST elevation or depression of > 0.05 mV)\n    * Value 2: showing probable or definite left ventricular hypertrophy by Estes' criteria\n* **thalach** : maximum heart rate achieved\n* **target** : 0 = less chance of heart attack, 1 = more chance of heart attack**","0c76712a":"***Checking for the missing values***","c39f48ee":"***Optimizing the KNN Model***","c9fe9de0":"<center><img src= \"https:\/\/images.unsplash.com\/photo-1460672985063-6764ac8b9c74?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=876&q=80\" alt =\"Titanic\" style='width: 800px;'><\/center>","bb07bbdc":"***Getting the statistical summary of dataset***","51b7e04c":"***The K value that we get the highest accuracy score with is 17, so we are setting the \"n_neighbors\" parameter to 17***","5ad6384b":"***Checking the shape (size) of dataset***","165c3753":"***Train-Test split***","9bef0cd0":"***Split the data into X, y datasets***"}}