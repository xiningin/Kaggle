{"cell_type":{"6de55aff":"code","537c362b":"code","bcf520b6":"code","a870ad10":"code","90f308a7":"code","0b4148d2":"code","0d6df55c":"code","270f84fe":"code","3bd011a7":"code","8a4dbcf3":"code","803005e7":"code","16c9fa50":"code","3711e9f9":"code","3d32e44d":"code","fd8375d3":"code","d2610bcc":"code","63919037":"code","2b9b0835":"code","7b264e0c":"code","e6e58718":"code","617551be":"code","9cc37ef0":"code","53a6c827":"code","288443e4":"code","b007bd0f":"code","05e18254":"code","0794b6ce":"code","fc84dc77":"code","edbd2e76":"code","a7c535c5":"code","94c6a22f":"code","0ab6a176":"code","e72e702e":"code","1bafd29f":"code","78d8c64c":"code","ff759df2":"code","7a45e9bf":"code","2cbabaed":"code","0ad9208b":"code","4d672fb6":"code","79d72b40":"code","db09d1c8":"markdown","6cc4139b":"markdown","17fad7f7":"markdown"},"source":{"6de55aff":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n","537c362b":"df_train=pd.read_csv(\"..\/input\/of-genomes-and-genetics-hackerearth-ml-challenge\/train.csv\",encoding='utf-8')\ndf_test=pd.read_csv(\"..\/input\/of-genomes-and-genetics-hackerearth-ml-challenge\/test.csv\",encoding='utf-8')\ndf_train.head()","bcf520b6":"df_train.tail()","a870ad10":"df_train.columns","90f308a7":"df_train.drop(\"Patient Id\",axis=1,inplace=True)\ndf_train.drop(\"Family Name\",axis=1,inplace=True)\ndf_train.drop(\"Patient First Name\",axis=1,inplace=True)\ndf_train.drop(\"Father's name\",axis=1,inplace=True)\ndf_train.drop(\"Institute Name\",axis=1,inplace=True)\ndf_train.drop(\"Location of Institute\",axis=1,inplace=True)\ndf_train.drop(\"Place of birth\",axis=1,inplace=True)","0b4148d2":"df_train.isna().sum()","0d6df55c":"df_train[\"Patient Age\"].fillna(str(df_train[\"Patient Age\"].mode().values[0]),inplace=True)\ndf_train[\"Inherited from father\"].fillna(str(df_train[\"Inherited from father\"].mode().values[0]),inplace=True)\ndf_train[\"Maternal gene\"].fillna(str(df_train[\"Maternal gene\"].mode().values[0]),inplace=True)\ndf_train[\"Mother's age\"].fillna(str(df_train[\"Mother's age\"].mode().values[0]),inplace=True)\ndf_train[\"Father's age\"].fillna(str(df_train[\"Father's age\"].mode().values[0]),inplace=True)\ndf_train[\"Respiratory Rate (breaths\/min)\"].fillna(str(df_train[\"Respiratory Rate (breaths\/min)\"].mode().values[0]),inplace=True)\ndf_train[\"Heart Rate (rates\/min\"].fillna(str(df_train[\"Heart Rate (rates\/min\"].mode().values[0]),inplace=True)\ndf_train[\"Test 1\"].fillna(str(df_train[\"Test 1\"].mode().values[0]),inplace=True)\ndf_train[\"Test 2\"].fillna(str(df_train[\"Test 2\"].mode().values[0]),inplace=True)\ndf_train[\"Test 3\"].fillna(str(df_train[\"Test 3\"].mode().values[0]),inplace=True)\ndf_train[\"Test 4\"].fillna(str(df_train[\"Test 4\"].mode().values[0]),inplace=True)\ndf_train[\"Test 5\"].fillna(str(df_train[\"Test 5\"].mode().values[0]),inplace=True)\ndf_train[\"Parental consent\"].fillna(str(df_train[\"Parental consent\"].mode().values[0]),inplace=True)\ndf_train[\"Follow-up\"].fillna(str(df_train[\"Follow-up\"].mode().values[0]),inplace=True)\ndf_train[\"Gender\"].fillna(str(df_train[\"Gender\"].mode().values[0]),inplace=True)\ndf_train[\"Birth asphyxia\"].fillna(str(df_train[\"Birth asphyxia\"].mode().values[0]),inplace=True)\ndf_train[\"Autopsy shows birth defect (if applicable)\"].fillna(str(df_train[\"Autopsy shows birth defect (if applicable)\"].mode().values[0]),inplace=True)\ndf_train[\"Folic acid details (peri-conceptional)\"].fillna(str(df_train[\"Folic acid details (peri-conceptional)\"].mode().values[0]),inplace=True)\ndf_train[\"H\/O serious maternal illness\"].fillna(str(df_train[\"H\/O serious maternal illness\"].mode().values[0]),inplace=True)\ndf_train[\"H\/O radiation exposure (x-ray)\"].fillna(str(df_train[\"H\/O radiation exposure (x-ray)\"].mode().values[0]),inplace=True)\ndf_train[\"H\/O substance abuse\"].fillna(str(df_train[\"H\/O substance abuse\"].mode().values[0]),inplace=True)\ndf_train[\"Assisted conception IVF\/ART\"].fillna(str(df_train[\"Assisted conception IVF\/ART\"].mode().values[0]),inplace=True)\ndf_train[\"History of anomalies in previous pregnancies\"].fillna(str(df_train[\"History of anomalies in previous pregnancies\"].mode().values[0]),inplace=True)\ndf_train[\"No. of previous abortion\"].fillna(str(df_train[\"No. of previous abortion\"].mode().values[0]),inplace=True)\ndf_train[\"Birth defects\"].fillna(str(df_train[\"Birth defects\"].mode().values[0]),inplace=True)\ndf_train[\"White Blood cell count (thousand per microliter)\"].fillna(str(df_train[\"White Blood cell count (thousand per microliter)\"].mode().values[0]),inplace=True)\ndf_train[\"Blood test result\"].fillna(str(df_train[\"Blood test result\"].mode().values[0]),inplace=True)\ndf_train[\"Symptom 1\"].fillna(str(df_train[\"Symptom 1\"].mode().values[0]),inplace=True)\ndf_train[\"Symptom 2\"].fillna(str(df_train[\"Symptom 2\"].mode().values[0]),inplace=True)\ndf_train[\"Symptom 3\"].fillna(str(df_train[\"Symptom 3\"].mode().values[0]),inplace=True)\ndf_train[\"Symptom 4\"].fillna(str(df_train[\"Symptom 4\"].mode().values[0]),inplace=True)\ndf_train[\"Symptom 5\"].fillna(str(df_train[\"Symptom 5\"].mode().values[0]),inplace=True)\ndf_train[\"Genetic Disorder\"].fillna(str(df_train[\"Genetic Disorder\"].mode().values[0]),inplace=True)\ndf_train[\"Disorder Subclass\"].fillna(str(df_train[\"Disorder Subclass\"].mode().values[0]),inplace=True)","270f84fe":"df_train.isna().sum()","3bd011a7":"df_train.head()","8a4dbcf3":"df_train.info()","803005e7":"for column in df_train:\n    columnSeriesObj = df_train[column]\n    print('Column Name : ', column)\n    print('Column Contents : ', columnSeriesObj.values)\n    print(\"---------------------------------------------\")","16c9fa50":"df_train[\"Genes in mother's side\"]=[1 if i.strip()== \"Yes\" else 0 for i in df_train[\"Genes in mother's side\"]]\ndf_train[\"Inherited from father\"]=[1 if i.strip()== \"Yes\" else 0 for i in df_train[\"Inherited from father\"]]\ndf_train[\"Maternal gene\"]=[1 if i.strip()== \"Yes\" else 0 for i in df_train[\"Maternal gene\"]]\ndf_train[\"Paternal gene\"]=[1 if i.strip()== \"Yes\" else 0 for i in df_train[\"Paternal gene\"]]\ndf_train[\"Parental consent\"]=[1 if i.strip()== \"Yes\" else 0 for i in df_train[\"Parental consent\"]]\ndf_train[\"Birth asphyxia\"]=[1 if i.strip()== \"Yes\" else 0 for i in df_train[\"Birth asphyxia\"]]\ndf_train[\"Folic acid details (peri-conceptional)\"]=[1 if i.strip()== \"Yes\" else 0 for i in df_train[\"Folic acid details (peri-conceptional)\"]]\ndf_train[\"H\/O radiation exposure (x-ray)\"]=[1 if i.strip()== \"Yes\" else 0 for i in df_train[\"H\/O radiation exposure (x-ray)\"]]\ndf_train[\"H\/O substance abuse\"]=[1 if i.strip()== \"Yes\" else 0 for i in df_train[\"H\/O substance abuse\"]]\ndf_train[\"Assisted conception IVF\/ART\"]=[1 if i.strip()== \"Yes\" else 0 for i in df_train[\"Assisted conception IVF\/ART\"]]\ndf_train[\"History of anomalies in previous pregnancies\"]=[1 if i.strip()== \"Yes\" else 0 for i in df_train[\"History of anomalies in previous pregnancies\"]]\ndf_train[\"H\/O serious maternal illness\"]=[1 if i.strip()==\"Yes\" else 0 for i in df_train[\"H\/O serious maternal illness\"]]","3711e9f9":"df_train.head()","3d32e44d":"for column in df_train:\n    columnSeriesObj = df_train[column]\n    print('Column Name : ', column)\n    print('Column Contents : ', columnSeriesObj.values)\n    print(\"---------------------------------------------\")","fd8375d3":"print(\"Status: \",df_train[\"Status\"].unique())\nprint(\"Respiratory Rate (breaths\/min): \",df_train[\"Respiratory Rate (breaths\/min)\"].unique())\nprint(\"Heart Rate (rates\/min: \",df_train[\"Heart Rate (rates\/min\"].unique())\nprint(\"Follow-up: \",df_train[\"Follow-up\"].unique())\nprint(\"Gender: \",df_train[\"Gender\"].unique())\nprint(\"Autopsy shows birth defect (if applicable): \",df_train[\"Autopsy shows birth defect (if applicable)\"].unique())\nprint(\"Birth defects: \",df_train[\"Birth defects\"].unique())\nprint(\"Blood test result: \",df_train[\"Blood test result\"].unique())\nprint(\"Genetic Disorder: \",df_train[\"Genetic Disorder\"].unique())\nprint(\"Disorder Subclass: \",df_train[\"Disorder Subclass\"].unique())\n","d2610bcc":"#Alive':1 'Deceased:0'\ndf_train[\"Status\"]=[1 if i.strip()== \"Alive\" else 0 for i in df_train[\"Status\"]]\n#Normal (30-60):1' 'Tachypnea:0\ndf_train[\"Respiratory Rate (breaths\/min)\"]=[1 if i.strip()== \"Normal (30-60)\" else 0 for i in df_train[\"Respiratory Rate (breaths\/min)\"]]\n#Normal:1' 'Tachycardia:0\ndf_train[\"Heart Rate (rates\/min\"]=[1 if i.strip()== \"Normal\" else 0 for i in df_train[\"Heart Rate (rates\/min\"]]\n#High:1, Low:0\ndf_train[\"Follow-up\"]=[1 if i.strip()== \"High\" else 0 for i in df_train[\"Follow-up\"]]\n#['Singular' 'Multiple']\ndf_train[\"Birth defects\"]=[1 if i.strip()== \"Singular\" else 0 for i in df_train[\"Birth defects\"]]","63919037":"#1: male 0: female 2: ambiguous    \ndf_train[\"Gender\"]=[1 if i.strip()== \"Male\" else 0 if i.strip() == \"Female\" else 2 for i in df_train[\"Gender\"]]","2b9b0835":"df_train.Gender.unique()","7b264e0c":"#Not applicable:3' 'None:2' 'No:0' 'Yes:1'\ndf_train[\"Autopsy shows birth defect (if applicable)\"]=[1 if i.strip()== \"Yes\" else 0 if i.strip() == \"No\" else 2 if i.strip()==\"None\" else 3 for i in df_train[\"Autopsy shows birth defect (if applicable)\"]]\n              ","e6e58718":"df_train[\"Autopsy shows birth defect (if applicable)\"].unique()","617551be":"#'slightly abnormal':1, 'normal':0, 'inconclusive':2 'abnormal:3']\ndf_train[\"Blood test result\"]=[1 if i.strip()== \"slightly abnormal\" else 0 if i.strip() == \"normal\" else 2 if i.strip()==\"inconclusive\" else 3 for i in df_train[\"Blood test result\"]]","9cc37ef0":"df_train[\"Blood test result\"].unique()","53a6c827":"#'Mitochondrial genetic inheritance disorders':1,'Multifactorial genetic inheritance disorders':0'Single-gene inheritance diseases:2'\ndf_train[\"Genetic Disorder\"]=[1 if i.strip()== \"Mitochondrial genetic inheritance disorders\" else 0 if i.strip() == \"Multifactorial genetic inheritance disorders\" else 2 for i in df_train[\"Genetic Disorder\"]]","288443e4":"df_train[\"Genetic Disorder\"].unique()","b007bd0f":"#Leber's hereditary optic neuropathy:1 \n#Cystic fibrosis:0\n#Diabetes:2\n#Leigh syndrome:3\n#Cancer:4\n#Tay-Sachs:5\n#Hemochromatosis:6\n#Mitochondrial myopathy:7\n#Alzheimer's:8\ndf_train[\"Disorder Subclass\"]=[1 if i.strip()== \"Leber's hereditary optic neuropathy\" \n                                else 0 if i.strip() == \"Cystic fibrosis\" \n                               else 2 if i.strip()==\"Diabetes\" \n                               else 3 if i.strip()==\"Leigh syndrome\"\n                               else 4 if i.strip()==\"Cancer\"\n                               else 5 if i.strip()==\"Tay-Sachs\"\n                               else 6 if i.strip()==\"Hemochromatosis\"\n                               else 7 if i.strip()==\"Mitochondrial myopathy\"\n                               else 8 for i in df_train[\"Disorder Subclass\"]]\n","05e18254":"df_train.info()","0794b6ce":"df_train = df_train.apply(pd.to_numeric,downcast=\"float\")","fc84dc77":"df_train.info()","edbd2e76":"df_train.head()","a7c535c5":"df_train[\"sum of Mother's and fathers age avg\"]=(df_train[\"Mother's age\"]+df_train[\"Father's age\"]) \/ 2","94c6a22f":"df_train.head()","0ab6a176":"#total symptom\ndf_train[\"total symptom\"]=(df_train[\"Symptom 1\"]+df_train[\"Symptom 2\"]+df_train[\"Symptom 3\"]+df_train[\"Symptom 4\"]+df_train[\"Symptom 5\"]) \/ 5","e72e702e":"df_train.head()","1bafd29f":"df_train.describe()","78d8c64c":"sns.countplot(df_train.Status,label=\"count\")\nplt.show()","ff759df2":"df_train.Status.value_counts()","7a45e9bf":"df_train.corr()","2cbabaed":"plt.figure(figsize=(25,25))\nsns.heatmap(df_train.iloc[:,0:39].corr(),annot=True,fmt=\".0%\")\nplt.show()","0ad9208b":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 3)\nx,y = df_train.loc[:,df_train.columns != 'Status'], df_train.loc[:,'Status']\nknn.fit(x,y)\nprediction = knn.predict(x)\nprint('Prediction: {}'.format(prediction))","4d672fb6":"# train test split\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.3,random_state = 1)\nknn = KNeighborsClassifier(n_neighbors = 3)\nx,y = df_train.loc[:,df_train.columns != 'Status'], df_train.loc[:,'Status']\nknn.fit(x_train,y_train)\nprediction = knn.predict(x_test)\n#print('Prediction: {}'.format(prediction))\nprint('With KNN (K=3) accuracy is: ',knn.score(x_test,y_test)) # accuracy","79d72b40":"neig = np.arange(1, 25)\ntrain_accuracy = []\ntest_accuracy = []\n# Loop over different values of k\nfor i, k in enumerate(neig):\n    # k from 1 to 25(exclude)\n    knn = KNeighborsClassifier(n_neighbors=k)\n    # Fit with knn\n    knn.fit(x_train,y_train)\n    #train accuracy\n    train_accuracy.append(knn.score(x_train, y_train))\n    # test accuracy\n    test_accuracy.append(knn.score(x_test, y_test))\n\n# Plot\nplt.figure(figsize=[13,8])\nplt.plot(neig, test_accuracy, label = 'Testing Accuracy')\nplt.plot(neig, train_accuracy, label = 'Training Accuracy')\nplt.legend()\nplt.title('-value VS Accuracy')\nplt.xlabel('Number of Neighbors')\nplt.ylabel('Accuracy')\nplt.xticks(neig)\nplt.savefig('graph.png')\nplt.show()\nprint(\"Best accuracy is {} with K = {}\".format(np.max(test_accuracy),1+test_accuracy.index(np.max(test_accuracy))))","db09d1c8":"#yes or no values\n\nColumn Name :  Genes in mother's side\n\nColumn Name :  Inherited from father\n\nColumn Name :  Maternal gene\n\nColumn Name :  Paternal gene\n\nColumn Name :  Parental consent\n\nColumn Name :  Birth asphyxia\n\nColumn Name :  Folic acid details (peri-conceptional)\n\nColumn Name :  H\/O radiation exposure (x-ray)\n\nColumn Name :  H\/O substance abuse\n\nColumn Name :  Assisted conception IVF\/ART\n\nColumn Name :  History of anomalies in previous pregnancies\n\nColumn Name :  No. of previous abortion","6cc4139b":"**Missing Values** :\n1) Patient Age                                         1427\n\n2) Inherited from father                                306\n\n3) Maternal gene                                       2810\n\n4) Mother's age                                        6036\n\n5) Father's age                                        5986\n\n6) Respiratory Rate (breaths\/min)                      2149\n\n7) Heart Rate (rates\/min                               2113\n\n8) Test 1                                              2127\n\n9) Test 2                                              2152\n\n10) Test 3                                              2147\n\n11) Test 4                                              2140\n\n12) Test 5                                              2170\n\n13) Parental consent                                    2125\n\n14) Follow-up                                           2166\n\n15) Gender                                              2173\n\n16) Birth asphyxia                                      2139\n\n17) Autopsy shows birth defect (if applicable)          1026\n\n18) Place of birth                                      2124\n\n19) Folic acid details (peri-conceptional)              2117\n\n20) H\/O serious maternal illness                        2152\n\n21) H\/O radiation exposure (x-ray)                      2153\n\n22) H\/O substance abuse                                 2195\n\n23) Assisted conception IVF\/ART                         2122\n\n24) History of anomalies in previous pregnancies        2172\n\n25) No. of previous abortion                            2162\n\n26) Birth defects                                       2154\n\n27) White Blood cell count (thousand per microliter)    2148\n\n28) Blood test result                                   2145\n\n29) Symptom 1                                           2155\n\n30) Symptom 2                                           2222\n\n31) Symptom 3                                           2101\n\n32) Symptom 4                                           2113\n\n33) Symptom 5                                           2153\n\n34) Genetic Disorder                                    2146\n\n35) Disorder Subclass                                   2168","17fad7f7":"Column Name :  Status\n\nColumn Name :  Respiratory Rate (breaths\/min)\n\nColumn Name :  Heart Rate (rates\/min\n\nColumn Name :  Follow-up\n\nColumn Name :  Gender\n\nColumn Name :  Autopsy shows birth defect (if applicable)\n\nColumn Name :  Birth defects\n\nColumn Name :  Blood test result\n\nColumn Name :  Genetic Disorder\n\nColumn Name :  Disorder Subclass"}}