{"cell_type":{"5a70af09":"code","8f8c58fc":"code","47672ebe":"code","2a17873c":"code","1f5bff2c":"code","9ff1e92e":"code","7a04f019":"code","52ac4b0f":"code","d2864c7d":"code","f8d5ee7d":"code","a158438c":"code","9c4ffea8":"code","1f28afad":"code","dae0cdd2":"code","7dd5278f":"code","1c265ca6":"code","25f4d585":"markdown","018b9e0d":"markdown","c2eb45e7":"markdown","a302b40c":"markdown","e9d721d1":"markdown","858832b9":"markdown","a177e914":"markdown","7b005734":"markdown","70bd48b8":"markdown","d6f5731c":"markdown","2d0900b1":"markdown","aa3b6137":"markdown","b7f828e7":"markdown"},"source":{"5a70af09":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\nfrom sklearn import metrics\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBRegressor\nfrom sklearn.linear_model import LogisticRegression","8f8c58fc":"data_hr = pd.read_csv('..\/input\/ibm-hr-analytics-attrition-dataset\/WA_Fn-UseC_-HR-Employee-Attrition.csv')","47672ebe":"data_hr.head()","2a17873c":"data_hr.groupby('BusinessTravel')['DistanceFromHome'].sum()","1f5bff2c":"data_hr.groupby('Department')['DistanceFromHome'].sum()","9ff1e92e":"data_hr.groupby('EducationField')['DistanceFromHome'].sum()\n","7a04f019":"data_hr1 = pd.get_dummies(data_hr, columns=['JobRole', 'MaritalStatus', 'Over18', 'OverTime','Gender','BusinessTravel', 'Department','EducationField'])\n\ndata_hr1.describe()","52ac4b0f":"data_hr1.columns","d2864c7d":"data_hr1 = data_hr1.drop(columns=['JobRole_Healthcare Representative', 'MaritalStatus_Divorced', 'OverTime_No','Gender_Male','BusinessTravel_Non-Travel','Department_Human Resources','EducationField_Human Resources'])","f8d5ee7d":"data_hr1.isnull().sum()","a158438c":"Column_names = data_hr1.columns\nColumn_names ","9c4ffea8":"X=data_hr1[['Age', 'DailyRate', 'DistanceFromHome', 'Education',\n       'EmployeeCount', 'EmployeeNumber', 'EnvironmentSatisfaction',\n       'HourlyRate', 'JobInvolvement', 'JobLevel', 'JobSatisfaction',\n       'MonthlyIncome', 'MonthlyRate', 'NumCompaniesWorked',\n       'PercentSalaryHike', 'PerformanceRating', 'RelationshipSatisfaction',\n       'StandardHours', 'StockOptionLevel', 'TotalWorkingYears',\n       'TrainingTimesLastYear', 'WorkLifeBalance', 'YearsAtCompany',\n       'YearsInCurrentRole', 'YearsSinceLastPromotion', 'YearsWithCurrManager',\n       'JobRole_Human Resources', 'JobRole_Laboratory Technician',\n       'JobRole_Manager', 'JobRole_Manufacturing Director',\n       'JobRole_Research Director', 'JobRole_Research Scientist',\n       'JobRole_Sales Executive', 'JobRole_Sales Representative',\n       'MaritalStatus_Married', 'MaritalStatus_Single', 'Over18_Y',\n       'OverTime_Yes', 'Gender_Female', 'BusinessTravel_Travel_Frequently',\n       'BusinessTravel_Travel_Rarely', 'Department_Research & Development',\n       'Department_Sales', 'EducationField_Life Sciences',\n       'EducationField_Marketing', 'EducationField_Medical',\n       'EducationField_Other', 'EducationField_Technical Degree']]\ny=data_hr1[['Attrition']].replace({'Yes': 1, 'No': 0})\nX_train,X_test,Y_train,Y_test=train_test_split(X,y,random_state=0)","1f28afad":"model = XGBRegressor()\nmodel.fit(X_train, Y_train)\nY_pred = model.predict(X_test)\n\nActVPred = pd.DataFrame({'Actual': Y_test['Attrition'], 'Predicted': Y_pred})\nprint(ActVPred)\n\n#Checking the accuracy of Linear Regression\nprint('Mean Absolute Error:', metrics.mean_absolute_error(Y_test['Attrition'], Y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(Y_test['Attrition'], Y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(Y_test['Attrition'], Y_pred)))","dae0cdd2":"Count_row = []\nindex = 0\n\nfor i, row in ActVPred.iterrows():\n    if (row['Actual'] < 1):\n        if (row['Predicted'] < 0.5):\n            Count_row.append(1)\n        else:\n            Count_row.append(0)\n    else:\n        if (row['Predicted'] >= 0.5):\n            Count_row.append(1)\n        else:\n            Count_row.append(0)\n    index = index + 1\n\n","7dd5278f":"print('--------------------------------------------------------------------------')\nprint('XGBoost:')\nprint('Traning Model accruracy scores: {:.3f}'.format(Count_row.count(1)\/index))","1c265ca6":"log_reg=LogisticRegression(C=1000,max_iter=50000)\nlog_reg.fit(X_train, Y_train)\n\n\nprint('--------------------------------------------------------------------------')\nprint('Logistic Regression:')\nprint('Traning Model accruracy scores: {:.3f}'.format(log_reg.score(X_train,Y_train)))\nprint('Test Model accruracy scores: {:.3f}'.format(log_reg.score(X_test,Y_test['Attrition'])))\nprint('--------------------------------------------------------------------------')","25f4d585":"# Train and Test Split","018b9e0d":"# Gradient Boost Method","c2eb45e7":"# One Hot Encoding","a302b40c":"# Improting Library ","e9d721d1":"# HR Analytics analysis for IBM HR Analytics","858832b9":"# Calculating Accuracy","a177e914":"# Data Summary","7b005734":"# Reading data","70bd48b8":"# Checking Data for Null values","d6f5731c":"# Drop one column for each one hot encoding","2d0900b1":"# Logistic regression","aa3b6137":"# From the above two calculation we can see that Logistic Regression has graeter accuracy than XGBoost","b7f828e7":"# Counting Correct prediction"}}