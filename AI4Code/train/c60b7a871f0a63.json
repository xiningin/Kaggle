{"cell_type":{"9560bcdf":"code","c0fd2421":"code","280fc8d6":"code","674aaa00":"code","041bc08c":"code","aeba7d08":"code","b0981a94":"code","eb01941e":"code","4bef7258":"code","012a4ef3":"code","01115732":"code","4bdf112e":"code","aeee6fe7":"code","7bafd7f6":"code","68db2d5e":"code","6e2ce09e":"code","8cc07050":"code","65766a17":"code","22ffa3a7":"code","b919529a":"code","3aa6339a":"code","732c4553":"code","594867ee":"code","4bb6f642":"code","33681106":"code","5af3dc43":"code","de054c6f":"code","d08afaf3":"code","6aa64cc9":"code","e3a52bef":"code","35684831":"code","0cc968ec":"code","1b6f579f":"code","d12328af":"code","f84db80a":"code","140b43be":"code","f1c4b710":"code","f9a53dc8":"code","2c1b5deb":"code","775c7f29":"code","4285d3dc":"code","2a8df344":"code","c2ea2440":"code","74297190":"code","0a836e77":"code","0d2b6e0d":"code","f6b3fe95":"code","bd115f45":"code","875413e6":"code","81fbed03":"code","c1c6f4eb":"code","f5b73513":"markdown","e2972053":"markdown","e9b95a2a":"markdown","fde99d56":"markdown","e542dee0":"markdown","8e7dcdb9":"markdown"},"source":{"9560bcdf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c0fd2421":"import re\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.feature_selection import mutual_info_classif, chi2, f_classif, SelectPercentile\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler\n\nfrom lightgbm import LGBMClassifier\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier, AdaBoostClassifier, BaggingClassifier, GradientBoostingClassifier\n\nfrom sklearn.model_selection import train_test_split, KFold, cross_val_score\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score","280fc8d6":"pd.options.display.max_columns = 30","674aaa00":"d_data = pd.read_csv(\"\/kaggle\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv\")","041bc08c":"d_data.head()","aeba7d08":"d_data.shape","b0981a94":"d_data.dtypes","eb01941e":"def to_float(x):\n    try:\n        return float(x)\n    except:\n        return None","4bef7258":"d_data[\"TotalCharges\"] = d_data.TotalCharges.apply(to_float)","012a4ef3":"d_data.TotalCharges.fillna(d_data.TotalCharges.mean(skipna=True), inplace=True)","01115732":"d_data[\"TotalCharges\"] = d_data.TotalCharges.astype(float)","4bdf112e":"d_data.dtypes","aeee6fe7":"d_data.columns","7bafd7f6":"category_feats = ['gender', 'SeniorCitizen', 'Partner', 'Dependents', 'PhoneService', 'MultipleLines', \n                  'InternetService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport',\n                  'StreamingTV', 'StreamingMovies', 'Contract', 'PaperlessBilling', 'PaymentMethod']\n\nnumeric_feats = ['tenure', 'MonthlyCharges', 'TotalCharges']\n\ntarget = ['Churn']","68db2d5e":"for feat in category_feats:\n    print(feat, len(d_data[feat].unique()))","6e2ce09e":"d_data['Churn_le'] = d_data.Churn.map({'Yes': 1, 'No': 0})","8cc07050":"def label_encoder(d_data):\n    \n    le_dict = {}\n    for feat in category_feats:\n        le_dict[feat] = LabelEncoder()\n        d_data[feat + '_le'] = le_dict[feat].fit_transform(d_data[feat])\n        \n    return d_data","65766a17":"def onehot_encoder(d_data):\n    ohe_dict = {}\n    for feat in category_feats:\n        ohe_dict[feat] = OneHotEncoder()\n        ohe = ohe_dict[feat].fit_transform(d_data[feat].values.reshape(-1, 1))\n        columns_ohe = [feat + '_' + str(i) for i in range(ohe.shape[1])]\n        d_data = pd.concat([d_data, pd.DataFrame(data = ohe.toarray(), columns = columns_ohe)], axis = 1)\n        \n    return d_data","22ffa3a7":"le = False\nif le == True:\n    d_data = label_encoder(d_data)\nelse:\n    d_data = onehot_encoder(d_data)","b919529a":"ss_dict = {}\nfor feat in numeric_feats:\n    ss_dict[feat] = StandardScaler()\n    d_data[feat + '_ss'] = ss_dict[feat].fit_transform(d_data[feat].values.reshape(-1, 1))","3aa6339a":"churn_count = d_data.Churn.value_counts().plot.bar(y = 'Churn', color = ['red', 'green'])","732c4553":"fig, axes = plt.subplots(4,4, figsize = (15, 15))\nrow = 0\ncol = 0\nfor feat in category_feats:\n    fig.tight_layout()\n    d_count = d_data[feat].value_counts().reset_index()\n    sns.barplot(x = \"index\", y = feat, data = d_count, ax = axes[row, col])\n    \n    if col == 3:\n        row += 1\n        col = 0\n    else:\n        col += 1","594867ee":"fig, axes = plt.subplots(1, 3, figsize=(8, 5))\nfor idx, feat in enumerate(numeric_feats):\n    fig.tight_layout()\n    sns.boxplot(y = feat, data = d_data, ax = axes[idx])","4bb6f642":"fig, axes = plt.subplots(1, 3, figsize=(10, 5))\nfor idx, feat in enumerate(numeric_feats):\n    fig.tight_layout()\n    sns.boxplot(x = 'Churn', y = feat, data = d_data, ax = axes[idx])","33681106":"def remove_outlier(d_data):\n    \n    ## Tenure\n    tenure_yes = d_data[d_data[\"Churn\"] == \"Yes\"].tenure.describe()\n\n    IQR = tenure_yes[\"75%\"] - tenure_yes[\"25%\"]\n    ceiling = tenure_yes[\"75%\"] + 1.5 * IQR\n\n    # replace outlier with ceiling\n    d_data.loc[(d_data[\"Churn\"] == \"Yes\") & (d_data[\"tenure\"]  > ceiling), \"tenure\"] = ceiling\n    \n    ## Total Charges\n    tc_yes = d_data[d_data[\"Churn\"] == \"Yes\"].TotalCharges.describe()\n\n    IQR = tc_yes[\"75%\"] - tc_yes[\"25%\"]\n    ceiling = tc_yes[\"75%\"] + 1.5 * IQR\n\n    # replace outlier with ceiling\n    d_data.loc[(d_data[\"Churn\"] == \"Yes\") & (d_data[\"TotalCharges\"]  > ceiling), \"TotalCharges\"] = ceiling\n    \n    return d_data","5af3dc43":"d_data = remove_outlier(d_data)","de054c6f":"fig, axes = plt.subplots(1, 3, figsize=(10, 5))\nfor idx, feat in enumerate(numeric_feats):\n    fig.tight_layout()\n    sns.boxplot(x = 'Churn', y = feat, data = d_data, ax = axes[idx])","d08afaf3":"g = sns.FacetGrid(d_data, col=\"Churn\")\ng.map(plt.hist, \"MonthlyCharges\");","6aa64cc9":"g = sns.FacetGrid(d_data, col=\"Churn\")\ng.map(plt.scatter, \"tenure\", \"MonthlyCharges\", alpha=.7)\ng.add_legend();","e3a52bef":"def hexbin(x, y, color, **kwargs):\n    cmap = sns.light_palette(color, as_cmap=True)\n    plt.hexbin(x, y, gridsize=15, cmap=cmap, **kwargs)\n\nwith sns.axes_style(\"dark\"):\n    g = sns.FacetGrid(d_data, hue=\"Churn\", col=\"Churn\", height=4)\ng.map(hexbin, \"tenure\", \"MonthlyCharges\", extent=[0, 120, 0, 80]);","35684831":"d_data.columns","0cc968ec":"if le == True:\n    cat_cols = ['gender_le', 'SeniorCitizen_le', 'Partner_le',\n           'Dependents_le', 'PhoneService_le', 'MultipleLines_le',\n           'InternetService_le', 'OnlineSecurity_le', 'OnlineBackup_le',\n           'DeviceProtection_le', 'TechSupport_le', 'StreamingTV_le',\n           'StreamingMovies_le', 'Contract_le', 'PaperlessBilling_le',\n           'PaymentMethod_le']\nelse:\n    cat_cols = ['gender_0', 'gender_1', 'SeniorCitizen_0',\n       'SeniorCitizen_1', 'Partner_0', 'Partner_1', 'Dependents_0',\n       'Dependents_1', 'PhoneService_0', 'PhoneService_1', 'MultipleLines_0',\n       'MultipleLines_1', 'MultipleLines_2', 'InternetService_0',\n       'InternetService_1', 'InternetService_2', 'OnlineSecurity_0',\n       'OnlineSecurity_1', 'OnlineSecurity_2', 'OnlineBackup_0',\n       'OnlineBackup_1', 'OnlineBackup_2', 'DeviceProtection_0',\n       'DeviceProtection_1', 'DeviceProtection_2', 'TechSupport_0',\n       'TechSupport_1', 'TechSupport_2', 'StreamingTV_0', 'StreamingTV_1',\n       'StreamingTV_2', 'StreamingMovies_0', 'StreamingMovies_1',\n       'StreamingMovies_2', 'Contract_0', 'Contract_1', 'Contract_2',\n       'PaperlessBilling_0', 'PaperlessBilling_1', 'PaymentMethod_0',\n       'PaymentMethod_1', 'PaymentMethod_2', 'PaymentMethod_3']\n    \nnum_cols = ['MonthlyCharges_ss', 'TotalCharges_ss']\n\ntarget = ['Churn_le']","1b6f579f":"X = d_data[cat_cols + num_cols]\ny = d_data.Churn_le ","d12328af":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1)","f84db80a":"y_train.value_counts(), y_test.value_counts()","140b43be":"def scoring(y_test, y_pred):\n    \n    print(\"accuracy:\", accuracy_score(y_test, y_pred))\n    print(\"recall:\", recall_score(y_test, y_pred))\n    print(\"precision:\", precision_score(y_test, y_pred))\n    print(\"f1 score:\", f1_score(y_test, y_pred))","f1c4b710":"def rfc_model(X_train, X_test, y_train, y_test):\n    \n    rfc = RandomForestClassifier(n_estimators = 200, max_depth = 20, max_features = None)\n    rfc.fit(X_train, y_train)\n    y_pred = rfc.predict(X_test)\n    scoring(y_test, y_pred)","f9a53dc8":"def rfc_fs_model(X_train, X_test, y_train, y_test):\n    \n    mi = SelectPercentile(mutual_info_classif, percentile = 50)\n    X_train_fs = mi.fit_transform(X_train, y_train)\n    X_test_fs = mi.transform(X_test)\n    rfc = RandomForestClassifier(n_estimators = 200, max_depth = 20, max_features = None)\n    rfc.fit(X_train_fs, y_train)\n    y_pred = rfc.predict(X_test_fs)\n    scoring(y_test, y_pred)","2c1b5deb":"def xgb_model(X_train, X_test, y_train, y_test):\n    \n    xgb = XGBClassifier()\n    xgb.fit(X_train, y_train)\n    y_pred = xgb.predict(X_test)\n    scoring(y_test, y_pred)","775c7f29":"def xgb_fs_model(X_train, X_test, y_train, y_test):\n    \n    mi = SelectPercentile(mutual_info_classif, percentile = 50)\n    X_train_fs = mi.fit_transform(X_train, y_train)\n    X_test_fs = mi.transform(X_test)\n    xgb = XGBClassifier()\n    xgb.fit(X_train_fs, y_train)\n    y_pred = xgb.predict(X_test_fs)\n    scoring(y_test, y_pred)","4285d3dc":"def cat_model(X_train, X_test, y_train, y_test):\n    \n    cat = CatBoostClassifier(verbose=False)\n    cat.fit(X_train, y_train)\n    y_pred = cat.predict(X_test)\n    scoring(y_test, y_pred)","2a8df344":"def cat_fs_model(X_train, X_test, y_train, y_test, percent):\n    \n    mi = SelectPercentile(mutual_info_classif, percentile = percent)\n    X_train_fs = mi.fit_transform(X_train, y_train)\n    X_test_fs = mi.transform(X_test)\n    cat = CatBoostClassifier(verbose=False)\n    cat.fit(X_train_fs, y_train)\n    y_pred = cat.predict(X_test_fs)\n    scoring(y_test, y_pred)","c2ea2440":"def etc_model(X_train, X_test, y_train, y_test):\n    \n    etc = ExtraTreesClassifier()\n    etc.fit(X_train, y_train)\n    y_pred = etc.predict(X_test)\n#     y_pred = np.where(y_pred > 0.5, 1, 0)\n    scoring(y_test, y_pred)","74297190":"rfc_model(X_train, X_test, y_train, y_test)","0a836e77":"rfc_fs_model(X_train, X_test, y_train, y_test)","0d2b6e0d":"xgb_model(X_train, X_test, y_train, y_test)","f6b3fe95":"xgb_fs_model(X_train, X_test, y_train, y_test)","bd115f45":"cat_model(X_train, X_test, y_train, y_test)","875413e6":"cat_fs_model(X_train, X_test, y_train, y_test, 20)","81fbed03":"models = [\n ('RandomForestClassifier', RandomForestClassifier()),\n ('XGBoost', XGBClassifier()),\n ('Catboost', CatBoostClassifier(verbose=False)),\n ('ExtraTreesClassifier', ExtraTreesClassifier()),\n ('AdaBoostClassifier', AdaBoostClassifier(RandomForestClassifier())), \n ('BaggingClassifier', BaggingClassifier(RandomForestClassifier())), \n ('GradientBoostingClassifier', GradientBoostingClassifier())\n]","c1c6f4eb":"for name, algo in models:\n    f1score = cross_val_score(algo, X, y, scoring= 'f1', cv = 5)\n    print(\"Algorithm:\", name)\n    print(\"f1 score:\", f1score.mean(), \"std:\", f1score.std())\n    print(\"\\n\")","f5b73513":"found outliers","e2972053":"### Cross Validation","e9b95a2a":"## Modeling","fde99d56":"## EDA","e542dee0":"#### models\n- Random Forest Classifier\n- XGBoost\n- Catboost\n- ExtraTreesClassifier","8e7dcdb9":"## Preprocessing"}}