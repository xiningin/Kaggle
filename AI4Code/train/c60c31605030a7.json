{"cell_type":{"70444472":"code","2f06f0d6":"code","757f9f65":"code","e1f64af5":"code","661939a5":"code","11ecb509":"code","50bd1ed7":"code","673f349e":"code","dad3614d":"code","aa04df39":"code","74b98c49":"code","c2beb005":"code","c6de6d63":"code","498ebbcc":"code","d0581173":"code","7f363b81":"code","9bd20665":"code","cb77c5d8":"code","7f68f781":"code","28831a7c":"code","abc90118":"code","780075c0":"code","8447f948":"code","d05a81e6":"code","2f58dc17":"code","c7f80a2c":"code","26c29c9c":"code","6fc6255e":"code","8f258930":"code","04584b39":"code","636333e2":"code","571974b0":"code","d3bc1b16":"code","cd174be5":"code","9f51d74b":"code","612890a3":"code","e5838f93":"code","e7aa0277":"code","064c0098":"code","bbe2bdc7":"code","d95783c6":"code","39a1620f":"code","4e780683":"code","e083fd1c":"code","b40fc835":"code","e8ca4cf3":"code","d817fe12":"code","6a7e4ad9":"markdown"},"source":{"70444472":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2f06f0d6":"train = pd.read_csv(\"..\/input\/flu-shot-learning-h1n1-seasonal-flu-vaccines\/training_set_features.csv\")\ntrain_label = pd.read_csv(\"..\/input\/flu-shot-learning-h1n1-seasonal-flu-vaccines\/training_set_labels.csv\")\ntest = pd.read_csv(\"..\/input\/flu-shot-learning-h1n1-seasonal-flu-vaccines\/test_set_features.csv\")\nsubmission = pd.read_csv(\"..\/input\/flu-shot-learning-h1n1-seasonal-flu-vaccines\/submission_format.csv\")","757f9f65":"test","e1f64af5":"train","661939a5":"train_dataset = train.merge(train_label, on='respondent_id')\ntest_dataset = test.merge(submission, on='respondent_id')","11ecb509":"train_test = pd.concat([train_dataset,test_dataset])\ntrain_test","50bd1ed7":"common = set(train.columns) & set(test.columns)\ntrain_diff = set(train.columns) - common\ntest_diff = set(test.columns) - common","673f349e":"train_diff, test_diff","dad3614d":"train_label","aa04df39":"submission","74b98c49":"train.info()","c2beb005":"non_number_columns = train.dtypes[train.dtypes == object].index.values\nnon_number_columns","c6de6d63":"train['age_group'].value_counts()","498ebbcc":"train['education'].value_counts()","d0581173":"train['race'].value_counts()","7f363b81":"train['income_poverty'].value_counts()","9bd20665":"non_number_columns","cb77c5d8":"error = ['education', 'income_poverty', 'marital_status', 'rent_or_own', 'employment_status', 'employment_industry', 'employment_occupation']\nsuccess = set(non_number_columns) - set(error)","7f68f781":"for column in error:\n    train[column] = train[column].astype(str)\ntrain","28831a7c":"train['income_poverty'].value_counts()","abc90118":"from sklearn.preprocessing import LabelEncoder\n\ndef column_label_LE(data,columns):\n    dataset = pd.DataFrame()\n    dataset['Label'] = data[columns]\n    \n    le = LabelEncoder()\n    dataset['Number'] = le.fit_transform(data[columns])\n    dataset['Type'] = columns\n    return dataset.drop_duplicates()\npd.concat([column_label_LE(train,columns) for columns in success])","780075c0":"pd.concat([column_label_LE(train,columns) for columns in error])","8447f948":"for column in error:\n    train_test[column] = train_test[column].astype(str)\n\nfor columns in non_number_columns:\n    le = LabelEncoder()\n    train_test[columns] = le.fit_transform(train_test[columns])\n\ndataset = pd.concat([column_label_LE(train_test,columns) for columns in non_number_columns])\ndataset","d05a81e6":"train_test","2f58dc17":"len(train), len(test)","c7f80a2c":"len(train_test[len(train):])","26c29c9c":"x_train = train_test.iloc[:len(train)*9\/\/10].drop(['respondent_id','seasonal_vaccine'], axis=1)\nx_val = train_test.iloc[len(train)*9\/\/10:].drop(['respondent_id','seasonal_vaccine'], axis=1)\nx_test = train_test.iloc[len(train):].drop(['respondent_id','seasonal_vaccine'], axis=1)\n\ny_train = train_test.iloc[:len(train)*9\/\/10]['seasonal_vaccine']\ny_val = train_test.iloc[len(train)*9\/\/10:]['seasonal_vaccine']","6fc6255e":"import time\nfrom xgboost import XGBRegressor\nts = time.time()\n\nmodel = XGBRegressor(\n    max_depth=10,\n    n_estimators=1000,\n    min_child_weight=0.5, \n    colsample_bytree=0.8, \n    subsample=0.8, \n    eta=0.1,\n#     tree_method='gpu_hist',\n    seed=42)\n\nmodel.fit(\n    x_train, \n    y_train, \n    eval_metric=\"rmse\", \n    eval_set=[(x_train, y_train), (x_val, y_val)], \n    verbose=True, \n    early_stopping_rounds = 20)\n\ntime.time() - ts","8f258930":"Y_pred = model.predict(x_val).clip(0, 20)\nY_test = model.predict(x_test)","04584b39":"Y_test","636333e2":"submission['seasonal_vaccine'] = Y_test\nsubmission\nsubmission.to_csv('submission_xgb.csv',index=False)","571974b0":"submission.to_csv('submission_xgb.csv',index=False)","d3bc1b16":"dataset","cd174be5":"train","9f51d74b":"train_label","612890a3":"# train_label['h1n1_vaccine'].value_counts()","e5838f93":"train_dataset = train.merge(train_label, on='respondent_id')\ntrain_dataset","e7aa0277":"train_dataset.info()","064c0098":"sample = dataset[dataset['Type']=='age_group']\nsample","bbe2bdc7":"train['education'].value_counts()","d95783c6":"train['age_group'].value_counts()","39a1620f":"test","4e780683":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nfor columns in train_dataset.columns[1:]:\n    print(columns)\n    print('Mean',test_dataset[columns].mean())\n    print('Median',test_dataset[columns].median())\n    sns.distplot(test_dataset[columns]) # , kde=False, fit=stats.gamma\n    plt.show()","e083fd1c":"train_label","b40fc835":"train_label['h1n1_vaccine'].value_counts()","e8ca4cf3":"import seaborn as sns\nsns.distplot(train_label['seasonal_vaccine'])","d817fe12":"submission","6a7e4ad9":"https:\/\/www.drivendata.org\/competitions\/66\/flu-shot-learning\/data\/"}}