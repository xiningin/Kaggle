{"cell_type":{"6928cee8":"code","e77dce4f":"code","e4d72341":"code","aa775262":"code","c6a4390c":"code","16b84514":"code","157be928":"code","20de0890":"code","627b9fe5":"code","33ca06a0":"code","a81e0447":"markdown","4f97dafc":"markdown","27c57f0d":"markdown","d03ce3ba":"markdown","5a383c71":"markdown","96f1f580":"markdown","4b3c32ac":"markdown","299bfb64":"markdown","384e163d":"markdown","eecb46da":"markdown","6e91b395":"markdown","d487a897":"markdown"},"source":{"6928cee8":"import numpy as np, pandas as pd, os\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.svm import NuSVC\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.decomposition import PCA\nfrom matplotlib import pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\n\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\n\ntrain.head()\ncols = [c for c in train.columns if c not in ['id', 'target']]\ncols.remove('wheezy-copper-turtle-magic')","e77dce4f":"oof = np.zeros(len(train))\npreds = np.zeros(len(test))\n\nfor i in range(512):\n\n    train2 = train[train['wheezy-copper-turtle-magic']==i]\n    test2 = test[test['wheezy-copper-turtle-magic']==i]\n    idx1 = train2.index; idx2 = test2.index\n    train2.reset_index(drop=True,inplace=True)\n\n    data = pd.concat([pd.DataFrame(train2[cols]), pd.DataFrame(test2[cols])])\n    data2 = VarianceThreshold(threshold=2).fit_transform(data[cols])\n\n    train3 = data2[:train2.shape[0]]; test3 = data2[train2.shape[0]:]\n\n    skf = StratifiedKFold(n_splits=11, random_state=42)\n    for train_index, test_index in skf.split(train2, train2['target']):\n\n        clf = QuadraticDiscriminantAnalysis(0.5)\n        clf.fit(train3[train_index,:],train2.loc[train_index]['target'])\n        oof[idx1[test_index]] = clf.predict_proba(train3[test_index,:])[:,1]\n        preds[idx2] += clf.predict_proba(test3)[:,1] \/ skf.n_splits\n\nauc = roc_auc_score(train['target'], oof)\nprint(f'AUC: {auc:.5}')","e4d72341":"train.loc[oof > 0.99, 'target'] = 1\ntrain.loc[oof < 0.01, 'target'] = 0","aa775262":"# INITIALIZE VARIABLES\noof = np.zeros(len(train))\npreds = np.zeros(len(test))\n\n# BUILD 512 SEPARATE MODELS\nfor i in range(512):\n    # ONLY TRAIN WITH DATA WHERE WHEEZY EQUALS I\n    train2 = train[train['wheezy-copper-turtle-magic']==i]\n    test2 = test[test['wheezy-copper-turtle-magic']==i]\n    idx1 = train2.index; idx2 = test2.index\n    train2.reset_index(drop=True,inplace=True)\n    \n    data = pd.concat([pd.DataFrame(train2[cols]), pd.DataFrame(test2[cols])])\n    \n    # FEATURE SELECTION (USE APPROX 40 OF 255 FEATURES)\n    sel = VarianceThreshold(threshold=1.5).fit(data[cols])\n    data2 = sel.transform(data[cols])\n    \n    train3 = data2[:train2.shape[0]]; test3 = data2[train2.shape[0]:]\n    #sel = VarianceThreshold(threshold=1.5).fit(train2[cols])\n    #train3 = sel.transform(train2[cols])\n    #test3 = sel.transform(test2[cols])\n    \n    # STRATIFIED K-FOLD\n    skf = StratifiedKFold(n_splits=11, random_state=42, shuffle=True)\n    for train_index, test_index in skf.split(train3, train2['target']):\n        \n        # MODEL AND PREDICT WITH QDA\n        clf = QuadraticDiscriminantAnalysis(reg_param=0.5)\n        \n        \n        clf.fit(train3[train_index,:],train2.loc[train_index]['target'])\n        oof[idx1[test_index]] = clf.predict_proba(train3[test_index,:])[:,1]\n        preds[idx2] += clf.predict_proba(test3)[:,1] \/ skf.n_splits\n       \n    #if i%64==0: print(i)\n        \n# PRINT CV AUC\nauc = roc_auc_score(train['target'],oof)\nprint('QDA scores CV =',round(auc,5))","c6a4390c":"cat_dict = dict()\n\n# INITIALIZE VARIABLES\ncols = [c for c in train.columns if c not in ['id', 'target']]\ncols.remove('wheezy-copper-turtle-magic')\n\nfor i in range(512):\n\n    \n    # ONLY TRAIN WITH DATA WHERE WHEEZY EQUALS I\n    train2 = train[train['wheezy-copper-turtle-magic']==i]\n    test2 = test[test['wheezy-copper-turtle-magic']==i]\n    idx1 = train2.index; idx2 = test2.index\n    train2.reset_index(drop=True,inplace=True)\n    \n    \n    \n    sel = VarianceThreshold(threshold=1.5).fit(train2[cols])\n    train3 = sel.transform(train2[cols])\n    test3 = sel.transform(test2[cols])\n        \n    cat_dict[i] = train3.shape[1]","16b84514":"\npd.DataFrame(list(cat_dict.items()))[1].value_counts().plot.barh()","157be928":"\n# INITIALIZE VARIABLES\ntest['target'] = preds\noof_var = np.zeros(len(train))\npreds_var = np.zeros(len(test))\n\n# BUILD 512 SEPARATE MODELS\nfor k in range(512):\n    # ONLY TRAIN WITH DATA WHERE WHEEZY EQUALS I\n    train2 = train[train['wheezy-copper-turtle-magic']==k] \n    train2p = train2.copy(); idx1 = train2.index \n    test2 = test[test['wheezy-copper-turtle-magic']==k]\n    \n    # ADD PSEUDO LABELED DATA\n    test2p = test2[ (test2['target']<=0.01) | (test2['target']>=0.99) ].copy()\n    test2p.loc[ test2p['target']>=0.5, 'target' ] = 1\n    test2p.loc[ test2p['target']<0.5, 'target' ] = 0 \n    train2p = pd.concat([train2p,test2p],axis=0)\n    train2p.reset_index(drop=True,inplace=True)\n    \n    # FEATURE SELECTION (USE APPROX 40 OF 255 FEATURES)\n    \n    pca = PCA(n_components=cat_dict[k], random_state= 1234)\n    pca.fit(train2p[cols])\n    train3p = pca.transform(train2p[cols])\n    train3 = pca.transform(train2[cols])\n    test3 = pca.transform(test2[cols])\n\n    # STRATIFIED K FOLD\n    skf = StratifiedKFold(n_splits=11, random_state=42, shuffle=True)\n    for train_index, test_index in skf.split(train3p, train2p['target']):\n        test_index3 = test_index[ test_index<len(train3) ] # ignore pseudo in oof\n        \n        clf = QuadraticDiscriminantAnalysis(reg_param=0.5)\n        clf.fit(train3p[train_index,:],train2p.loc[train_index]['target'])\n        oof_var[idx1[test_index3]] += clf.predict_proba(train3[test_index3,:])[:,1]\n        preds_var[test2.index] += clf.predict_proba(test3)[:,1] \/ skf.n_splits\n       \n       \n    #if k%64==0: print(k)\n        \n# PRINT CV AUC\nauc = roc_auc_score(train['target'],oof_var)\nprint('Pseudo Labeled QDA scores CV =',round(auc,5)) #0.97035\n","20de0890":"# INITIALIZE VARIABLES\ntest['target'] = preds_var  \noof_var2 = np.zeros(len(train))\npreds_var2 = np.zeros(len(test))\n\n# BUILD 512 SEPARATE MODELS\nfor k in range(512):\n    # ONLY TRAIN WITH DATA WHERE WHEEZY EQUALS I\n    train2 = train[train['wheezy-copper-turtle-magic']==k] \n    train2p = train2.copy(); idx1 = train2.index \n    test2 = test[test['wheezy-copper-turtle-magic']==k]\n    \n    # ADD PSEUDO LABELED DATA\n    test2p = test2[ (test2['target']<=0.01) | (test2['target']>=0.99) ].copy()\n    test2p.loc[ test2p['target']>=0.5, 'target' ] = 1\n    test2p.loc[ test2p['target']<0.5, 'target' ] = 0 \n    train2p = pd.concat([train2p,test2p],axis=0)\n    train2p.reset_index(drop=True,inplace=True)\n    \n    # FEATURE SELECTION (USE APPROX 40 OF 255 FEATURES)\n    \n    \n    \n       \n    sel = VarianceThreshold(threshold=1.5).fit(train2p[cols])     \n    train3p = sel.transform(train2p[cols])\n    train3 = sel.transform(train2[cols])\n    test3 = sel.transform(test2[cols])\n           \n        \n    # STRATIFIED K FOLD\n    skf = StratifiedKFold(n_splits=11, random_state=42, shuffle=True)\n    for train_index, test_index in skf.split(train3p, train2p['target']):\n        test_index3 = test_index[ test_index<len(train3) ] # ignore pseudo in oof\n        \n        clf = QuadraticDiscriminantAnalysis(reg_param=0.5)\n        clf.fit(train3p[train_index,:],train2p.loc[train_index]['target'])\n        oof_var2[idx1[test_index3]] += clf.predict_proba(train3[test_index3,:])[:,1]\n        preds_var2[test2.index] += clf.predict_proba(test3)[:,1] \/ skf.n_splits\n       \n       \n    #if k%64==0: print(k)\n        \n# PRINT CV AUC\nauc = roc_auc_score(train['target'],oof_var2)\nprint('Pseudo Labeled QDA scores CV =',round(auc,5))","627b9fe5":"auc = roc_auc_score(train['target'],0.5*(oof_var+ oof_var2) )\nprint('Pseudo Labeled QDA scores CV =',round(auc,5))","33ca06a0":"sub = pd.read_csv('..\/input\/sample_submission.csv')\nsub['target'] = 0.5* preds_var + 0.5*preds_var2\nsub.to_csv('submission.csv',index=False)\n\nimport matplotlib.pyplot as plt\nplt.hist(preds,bins=100)\nplt.title('Final Test.csv predictions')\nplt.show()","a81e0447":"The number of variables generated from the variance based threshold is not uniform. Therefore  I have chose to adapt the number of components in PCA in consequence.  ","4f97dafc":"# Final model accuracy","27c57f0d":"# Summary\n\nThis kernel is forked from [Rdekou's](https:\/\/www.kaggle.com\/rdekou\/pseudo-labelling-with-pca-qda) work. I'm flipping the Y before pseudo labelling. As we can see from the score, combining the technique from [Yizhitao's](https:\/\/www.kaggle.com\/yizhitao\/flip-y-lb-0-9697) kernel with pseudo labelling yield better score. Obviously all credit goes to chris, people mentioned above, and people mentioned in those kernel.","d03ce3ba":"# Submit Predictions","5a383c71":"#  Add pseudo label data and run an intermediate model (PCA-QDA) ","96f1f580":"\n## Load Data","4b3c32ac":"# Conclusion\nAdding Flip Y before pseudo labelling is gud","299bfb64":"# Add pseudo label data from PCA-QDA and run a new model Variance-QDA","384e163d":"# Flip Y","eecb46da":"# Init","6e91b395":"I am using the variance threshold to estimate the number of components","d487a897":"Same as in the original kernel I use pseudlabelling ..."}}