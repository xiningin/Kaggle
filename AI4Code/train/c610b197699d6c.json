{"cell_type":{"d88bf0f5":"code","a0a0b95d":"code","50b93518":"code","3bd6233d":"code","29d2bd69":"code","b26cead1":"code","99966460":"code","199490ce":"code","ef0ea42c":"code","7d2c8d7a":"code","5d3c6b56":"code","e5e72b63":"code","226f76e8":"code","b6a48ab7":"code","b6121489":"code","083c3f2b":"code","663fdda8":"code","bfe696e8":"code","651d9fd4":"code","179b5155":"code","7443a7b7":"code","6f1b002b":"code","d5ff6de7":"code","9291f3b8":"code","9d299bd1":"code","a8a96ea2":"code","5fd60ff5":"code","8d81dc34":"code","5488ae22":"code","c0569466":"code","6e0a2b66":"code","a44cd8b5":"code","052866c5":"code","a99bc2ea":"code","a7885254":"code","67f060d4":"code","1ce53fbb":"code","19124897":"code","0f139f0b":"code","bda4a143":"code","8c50db29":"code","17d077c2":"code","33921f99":"code","af94a808":"code","19cfcf7f":"code","e39cc497":"code","1c0562a5":"code","9a141a1d":"code","355a87a7":"code","3291bf3c":"code","d17cf864":"code","901c5cd1":"code","d24083b7":"code","efcfe35d":"code","53042799":"code","8d2db7fa":"code","6f5fd8b9":"code","dbbb95ff":"code","721ac849":"code","6dd32ddf":"code","0d3e5716":"code","6c5f2ac4":"code","96403072":"code","708c87cd":"code","72e31ca8":"code","cc5df161":"code","e1f5c94c":"code","42654110":"code","1f8522f1":"code","1e511e6e":"code","b7de2250":"code","7d479be1":"code","0e2d8327":"code","54242ef2":"code","9dca9c5d":"code","e468709c":"code","b1ee2f9b":"code","63235c60":"code","fdada687":"code","deeef0ee":"code","549afc47":"code","eae71106":"code","8c8d9de6":"code","38b82779":"code","38183b02":"code","42d0366c":"code","0c59dbd7":"code","2797978f":"code","46688796":"code","656b16cb":"code","9ae9e3c6":"code","0b1a10ef":"code","092cb2aa":"code","2e8f71be":"code","aec0ddcc":"code","7936f05b":"code","49945fd8":"code","2098ea2d":"code","d98e6c1a":"code","e87bb776":"code","6bd8cb65":"code","35b54384":"code","2ae5421e":"code","0d4eba29":"code","52630d0b":"code","af6523cd":"code","c51d82fd":"code","8909a31b":"code","7496854d":"code","002be371":"code","590d5445":"code","62ccb05e":"markdown","c60cae2a":"markdown","9ac1071a":"markdown"},"source":{"d88bf0f5":"import numpy                as np\nimport pandas               as pd\nimport matplotlib.pyplot    as plt\nimport tensorflow.compat.v1 as tf\ntf.disable_v2_behavior()","a0a0b95d":"from sklearn import datasets\nfrom sklearn import linear_model","50b93518":"ls -l ..\/input\/regression-data\/data\/","3bd6233d":"googFile = \"..\/input\/regression-data\/data\/GOOG.csv\"\nspFile   = \"..\/input\/regression-data\/data\/SP_500.csv\"","29d2bd69":"# 0 contains the date\n# 5 contains the adjustd close\ngoog = pd.read_csv(googFile,sep=',',usecols=[0,5],names=['Date',\"Goog\"],header=0)","b26cead1":"sp = pd.read_csv(spFile,sep=',',usecols=[0,5],names=['Date',\"SP500\"],header=0)","99966460":"goog.dtypes","199490ce":"goog['SP500'] = sp['SP500']","ef0ea42c":"goog.head()","7d2c8d7a":"## format the date strings in the data frame\ngoog['Date'] = pd.to_datetime(goog['Date'],format=\"%Y-%m-%d\")","5d3c6b56":"goog.dtypes","e5e72b63":"goog = goog.sort_values(['Date'],ascending=[True])","226f76e8":"goog.head()","b6a48ab7":"df = goog.copy()\ndf.set_index('Date', inplace=True)\ndf.index = pd.to_datetime(df.index)\ndf.plot()\nplt.legend()","b6121489":"## we will work with the percent change\ngoog[['Goog','SP500']]=goog[['Goog','SP500']].pct_change()","083c3f2b":"goog.head()","663fdda8":"goog.isnull().sum()","bfe696e8":"goog = goog.dropna()","651d9fd4":"goog.isnull().sum()","179b5155":"goog.head()","7443a7b7":"df = goog.copy()\ndf.set_index('Date', inplace=True)\ndf.index = pd.to_datetime(df.index)\ndf.plot()\nplt.legend()\nplt.title(\"Percent Change Of the adjusted Close Price\")","6f1b002b":"x_Data = np.array(goog['Goog']).reshape(-1,1)\ny_Data = np.array(goog['SP500']).reshape(-1,1)","d5ff6de7":"googModel = linear_model.LinearRegression()","9291f3b8":"googModel.fit(x_Data,y_Data)","9d299bd1":"## why reshape\n## they want the data in form of  a indidual list","a8a96ea2":"print(googModel.coef_)\nprint(googModel.intercept_)","5fd60ff5":"y_pred = googModel.predict(x_Data)","8d81dc34":"plt.scatter(goog['Date'],df['Goog'],label=\"google\")\nplt.scatter(goog['Date'],df['SP500'],label=\"SP500\")\nplt.plot(goog['Date'], y_pred, color='red', linewidth=2)","5488ae22":"## this is a baseline implementation","c0569466":"shape1 = tf.zeros([1,1])\nshape2 = tf.zeros([1])\nprint(shape1)\nprint(shape2)","6e0a2b66":"W = tf.Variable(tf.zeros([1,1]))\nb = tf.Variable(tf.zeros([1]))\nprint(W)\nprint(b)","a44cd8b5":"## we dont know how many rows use thats why use None\nx = tf.placeholder(tf.float32,[None,1])\n##actal value\ny_ = tf.placeholder(tf.float32,[None,1])","052866c5":"Wx = tf.matmul(x,W)\ny = Wx+b","a99bc2ea":"## cost function\ncost  = tf.reduce_mean((tf.square(y_ - y)))","a7885254":"lr = 0.1\ntrain = tf.train.GradientDescentOptimizer(lr).minimize(cost)","67f060d4":"def train_withepoch(steps,train_step):\n    init = tf.global_variables_initializer()\n    with tf.Session() as sess:\n        sess.run(init) ## init all the global variable\n        for i in range(steps+1):\n            xs = np.array(x_Data)\n            ys = np.array(y_Data)\n            feed = {x:xs,y_:ys}\n            if i==1000:\n                sess.run(train_step,feed_dict=feed)\n                print(\"After {} Iteration \".format(i))\n                print(\"W : {}\".format(sess.run(W)))\n                print(\"b : {}\".format(sess.run(b)))\n                print(\"COST: {}\".format(sess.run(cost,feed_dict=feed)))\n","1ce53fbb":"train_withepoch(1000,train)","19124897":"## making it easier with keras\nimport keras\nfrom keras.layers import Dense,Dropout,Softmax\nfrom keras.optimizers import Adam","0f139f0b":"print(x_Data.shape[1])\nprint(y_Data.shape[1])","bda4a143":"def build_model():\n    model = keras.models.Sequential()\n    model.add(Dense(250,input_dim=1,activation=\"relu\"))\n    model.add(Dense(1))\n    model.compile(loss='mean_squared_error', optimizer='adam')\n    return model","8c50db29":"model = build_model()\nmodel.fit(x_Data,y_Data,epochs=1000)","17d077c2":"y_pred = model.predict(x_Data)","33921f99":"plt.scatter(goog['Date'],df['Goog'],label=\"google\")\nplt.scatter(goog['Date'],df['SP500'],label=\"SP500\")\nplt.plot(goog['Date'], y_pred, color='red', linewidth=2)","af94a808":"## workign with another data\ndf1 = pd.read_csv(\"..\/input\/regression-data\/data\/NASDAQ.csv\",usecols=[0,5],names=['Date',\"NAS\"],header=0)\ndf2 = pd.read_csv(\"..\/input\/regression-data\/data\/XOM.csv\",usecols=[0,5],names=['Date',\"XOM\"],header=0)\ndf3 = pd.read_csv(\"..\/input\/regression-data\/data\/USO.csv\",usecols=[0,5],names=['Date',\"USO\"],header=0)\n","19cfcf7f":"df1['XOM'] = df2['XOM']\ndf1['USO'] = df3['USO']","e39cc497":"df1['Date'] = pd.to_datetime(df1['Date'])\ndf1 = df1.set_index(\"Date\")","1c0562a5":"df1[['XOM','NAS','USO']] = df1[['XOM','NAS','USO']].pct_change()","9a141a1d":"df1.isnull().sum()\ndf1 = df1.dropna()","355a87a7":"X = df1.drop('XOM',axis=1)\nY = df1[['XOM']]","3291bf3c":"X.dtypes","d17cf864":"Y.dtypes","901c5cd1":"model2 = linear_model.LinearRegression()","d24083b7":"model2.fit(X,Y)","efcfe35d":"y_pred = model2.predict(X)","53042799":"df = df1.copy()\ndf.index = pd.to_datetime(df.index)\ndf.plot()\nplt.legend()\nplt.title(\"Percent Change Of the adjusted Close Price\")","8d2db7fa":"df = df1.reset_index()","6f5fd8b9":"df.head()","dbbb95ff":"plt.scatter(df['Date'],df['NAS'],label=\"NAS\")\nplt.scatter(df['Date'],df['XOM'],label=\"XOM\")\nplt.scatter(df['Date'],df['USO'],label=\"USO\")","721ac849":"y_pred = model2.predict(df[['NAS','USO']])","6dd32ddf":"y_pred1 = pd.DataFrame()","0d3e5716":"y_pred1['Date'] = np.array(df['Date'])","6c5f2ac4":"y_pred1['predict'] = y_pred","96403072":"y_pred1","708c87cd":"plt.scatter(df['Date'],df['NAS'],label=\"NAS\")\nplt.scatter(df['Date'],df['XOM'],label=\"XOM\")\nplt.scatter(df['Date'],df['USO'],label=\"USO\")\nplt.plot(y_pred1[\"Date\"],y_pred1['predict'],color='red', linewidth=4)\nplt.show()","72e31ca8":"print(X.shape)\nprint(Y.shape)","cc5df161":"n_col = X.shape[1]","e1f5c94c":"x_Data = np.array(X)\ny_Data = np.array(Y)","42654110":"print(x_Data.shape)\nprint(y_Data.shape)","1f8522f1":"def build_model():\n    model = keras.models.Sequential()\n    model.add(Dense(250,input_dim=2,activation=\"relu\"))\n    model.add(Dense(250,activation=\"relu\"))\n    model.add(Dense(250,activation=\"relu\"))\n    model.add(Dense(250,activation=\"relu\"))\n    model.add(Dense(250,activation=\"relu\"))\n    model.add(Dense(1))\n    model.compile(loss='mean_squared_error', optimizer='adam')\n    return model","1e511e6e":"model2 = build_model()","b7de2250":"model2.fit(x_Data,y_Data,epochs=1000)","7d479be1":"y_pred = model2.predict(df[['NAS','USO']])\n","0e2d8327":"y_pred1 = pd.DataFrame()\ny_pred1['Date'] = np.array(df['Date'])\ny_pred1['predict'] = y_pred","54242ef2":"plt.scatter(df['Date'],df['NAS'],label=\"NAS\")\nplt.scatter(df['Date'],df['XOM'],label=\"XOM\")\nplt.scatter(df['Date'],df['USO'],label=\"USO\")\nplt.plot(y_pred1[\"Date\"],y_pred1['predict'],color='red', linewidth=4)\nplt.show()","9dca9c5d":"!pip install yfinance","e468709c":"import yfinance as yf\nmsft = yf.Ticker(\"MSFT\")","b1ee2f9b":"df = msft.history(period=\"max\")","63235c60":"df.head()","fdada687":"df.columns","deeef0ee":"df = df[['Open', 'High', 'Low', 'Close']]","549afc47":"df.head()\ndf = df.reset_index()\ndf['Date'] = pd.to_datetime(df['Date'])","eae71106":"X = df.drop('Close',axis=1)\nX = X.drop(\"Date\",axis=1)\nY = df[['Close']]","8c8d9de6":"X.head()","38b82779":"Y.head()","38183b02":"model3 = linear_model.LinearRegression()\nmodel3.fit(X,Y)\ny_pred = model3.predict(df[['Open','High','Low']])","42d0366c":"y_pred1 = pd.DataFrame()\ny_pred1['Date'] = df['Date']\ny_pred1['Predict'] = y_pred","0c59dbd7":"plt.scatter(df['Date'],df['Open'],label=\"Open\")\nplt.scatter(df['Date'],df['High'],label=\"High\")\nplt.scatter(df['Date'],df['Low'],label=\"Low\")\nplt.plot(y_pred1[\"Date\"],y_pred1['Predict'],color='red', linewidth=1)\nplt.legend()\nplt.show()","2797978f":"x_Data = np.array(X)\ny_Data = np.array(Y)","46688796":"print(x_Data.shape)\nprint(y_Data.shape)\nn_col = x_Data.shape[1]","656b16cb":"def build_model():\n    model = keras.models.Sequential()\n    model.add(Dense(250,input_dim=n_col,activation=\"relu\"))\n    model.add(Dense(250,activation=\"relu\"))\n    model.add(Dense(250,activation=\"relu\"))\n    model.add(Dense(250,activation=\"relu\"))\n    model.add(Dense(250,activation=\"relu\"))\n    model.add(Dense(1))\n    model.compile(loss='mean_squared_error', optimizer='adam')\n    return model","9ae9e3c6":"model3 = build_model()","0b1a10ef":"model3.fit(x_Data,y_Data,epochs=100)","092cb2aa":"y_pred = model3.predict(df[['Open','High','Low']])","2e8f71be":"y_pred1 = pd.DataFrame()\ny_pred1['Date'] = df['Date']\ny_pred1['Predict'] = y_pred","aec0ddcc":"plt.scatter(df['Date'],df['Open'],label=\"Open\")\nplt.scatter(df['Date'],df['High'],label=\"High\")\nplt.scatter(df['Date'],df['Low'],label=\"Low\")\nplt.plot(y_pred1[\"Date\"],y_pred1['Predict'],color='red', linewidth=1)\nplt.legend()\nplt.show()","7936f05b":"## downloading the iris dataset\niris = datasets.load_iris()","49945fd8":"df = pd.DataFrame(columns=iris.feature_names,data=iris.data)","2098ea2d":"df['target'] = np.array(iris.target)","d98e6c1a":"df.head()","e87bb776":"x_pos = df[df['target']==1]","6bd8cb65":"x_neg = df[df['target']==0]","35b54384":"## taking only two  plot so we can plot in a two dimensional space\nX1 = x_pos[['sepal length (cm)', 'sepal width (cm)']]","2ae5421e":"X2 = x_neg[['sepal length (cm)', 'sepal width (cm)']]","0d4eba29":"plt.scatter(X1['sepal length (cm)'],X1['sepal width (cm)'],color='red',label=\"positive\")\nplt.scatter(X2['sepal length (cm)'],X2['sepal width (cm)'],color='blue',label=\"negative\")\nplt.legend()","52630d0b":"## sigmoid function or s curve that is used for the logistic regression\nimport numpy as np \nimport matplotlib.pyplot as plt \n  \ndef sigmoid(z): \n    return 1 \/ (1 + np.exp( - z)) \n  \nplt.plot(np.arange(-5, 5, 0.1), sigmoid(np.arange(-5, 5, 0.1))) \nplt.title('Visualization of the Sigmoid Function') \n  \nplt.show() ","af6523cd":"df.columns","c51d82fd":"## logistic regresion is  regression so we use the output neuron to 1\nmodel1 = keras.models.Sequential()\nmodel1.add(keras.layers.Dense(1,input_dim=2,activation='sigmoid'))\nmodel1.compile(optimizer='sgd', loss='binary_crossentropy', metrics=['binary_accuracy'])","8909a31b":"model1.fit(x_pos[['sepal length (cm)', 'sepal width (cm)']],x_pos[['target']],shuffle=True,epochs=5,batch_size=16)","7496854d":"y_pred = model1.predict(x_pos[['sepal length (cm)', 'sepal width (cm)']])","002be371":"s=[]\nfor item in y_pred:\n    s.append(item[0])","590d5445":"plt.plot(range(len(s)),s)","62ccb05e":"### Implementing Regression in Pure Python \n     1) make onle one neuron\n     2) cost function will be mse\n     3) optimizer will be a gradient descent\n     4) invoke th eoptimizer in epochs\n     5) Try to converge the model","c60cae2a":"## Logistic Regression\n    this is a classification algorithm","9ac1071a":"    make a neuron with affine transformation \n    and activation function that will be a just a\n    unit step function to avoid complexity\n    making a computation graph"}}