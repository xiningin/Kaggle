{"cell_type":{"7dd5970a":"code","df4e9d8c":"code","32533b53":"code","2cc1d81e":"code","a6e81671":"code","c6b5afb2":"code","64c31c74":"code","51882fcd":"code","14049350":"code","d8760e3f":"code","321e60ce":"code","8bf73e83":"code","e9b69f5a":"code","c7cf93cb":"code","dceae6fb":"code","ff38155f":"code","e4687e39":"code","44ce87f7":"code","cec857fd":"code","ef3623a0":"code","a273e10f":"code","9e0ee95b":"code","0caad24c":"code","91414d3a":"code","b49ce00b":"code","74b138fb":"code","54ffa5ba":"code","919a95e6":"code","3ac61537":"code","8ec31712":"code","ffbb02e3":"code","9c3ebf8a":"code","f39ebbb0":"code","128df9be":"code","e7ba5b5d":"code","4885738b":"code","1611f346":"code","e53503df":"code","4a75520e":"code","6ebb8e4d":"code","a5405829":"code","99dbf5a3":"code","560f2a87":"code","2904d81b":"code","a751b2cc":"code","e9bef503":"code","9e490ba0":"code","0308962f":"code","0c788dc4":"code","21f7b6cf":"code","8a947f58":"code","251f915d":"code","0036db8a":"code","6155bb26":"code","f11ec57e":"code","276b2e2f":"code","660d844a":"code","390ea17a":"code","a39d74b2":"code","e20e15fc":"code","68df63c5":"code","30d1c1e0":"code","f3711de2":"code","d3eb1b21":"code","bfa02faf":"code","e950ae1f":"code","efdb7e0f":"code","cd294910":"code","5469822b":"code","759ddf15":"code","c723e231":"code","fd684a77":"markdown","da49c5a9":"markdown","60a4578a":"markdown","7fa3bb69":"markdown","7bddbace":"markdown","e043c53e":"markdown","72f48012":"markdown","9fc8f84f":"markdown","074119ea":"markdown","449d9d55":"markdown","2774dee8":"markdown","bda1f339":"markdown","d7989626":"markdown","e737f60b":"markdown","d25692b0":"markdown","29940768":"markdown","d75f5797":"markdown","d615e98b":"markdown","999e132e":"markdown","ab356782":"markdown","c1166311":"markdown","7bb710d3":"markdown","a0e5ac36":"markdown","0a6d0d7a":"markdown","dcaaf192":"markdown","a49c422f":"markdown","90d98d50":"markdown","3f7c3f6f":"markdown","3e052efa":"markdown","47005ba8":"markdown","a1b5b5f2":"markdown","e81fbee4":"markdown","5078eca3":"markdown","26e1b364":"markdown","fc36ff35":"markdown","bc9f9e74":"markdown","5e85bbb2":"markdown","fe8fc7cb":"markdown","3df94807":"markdown","8d0b34c5":"markdown","aeb58844":"markdown","20440569":"markdown","80529648":"markdown","09ad56c8":"markdown","f2aa6b05":"markdown","f33e0d04":"markdown","4cea9354":"markdown","5751fd5a":"markdown","d99a2153":"markdown","3557d9aa":"markdown","3cc240ec":"markdown","dd62ade0":"markdown","962e6dfb":"markdown","27ebc9dc":"markdown","67e184fd":"markdown","bd57bbcc":"markdown","c72cc5ec":"markdown","d06ade3d":"markdown","e4d64208":"markdown","ae82ae6f":"markdown","a7c3d7f5":"markdown","14354798":"markdown","7b4017a7":"markdown","c5873f3c":"markdown","d6533f51":"markdown","c796c28a":"markdown","899a8ac2":"markdown","f0aeb8c8":"markdown","2e2fec9e":"markdown","340f760f":"markdown","20b15fcb":"markdown","32eb9495":"markdown","7dd59a7d":"markdown","31a7cdbc":"markdown","49f47923":"markdown","2781c515":"markdown","40aabdd1":"markdown","24a1bdde":"markdown","3b9608b4":"markdown","a3baf994":"markdown"},"source":{"7dd5970a":"import numpy as np\nimport pandas as pd","df4e9d8c":"import matplotlib.pyplot as plt\nimport seaborn as sns","32533b53":"%matplotlib inline","2cc1d81e":"import datetime","a6e81671":"bks_df = pd.read_csv('..\/input\/google-analytics-capstone-case-study-1\/bike_share_rawdata.csv')","c6b5afb2":"bks_df.head()","64c31c74":"bks_df.info()","51882fcd":"##Rows with missing value for gender\n\nbks_df['gender'].isnull().value_counts() ","14049350":"#Number of Customers with missing gender\nbks_df[(bks_df['gender'].isnull()==True)& (bks_df['usertype']==\"Customer\")].count()","d8760e3f":"##Rows with missing value for birthyear\n\nbks_df['birthyear'].isnull().value_counts() ","321e60ce":"#Number of Customers with missing birthyears\nbks_df[(bks_df['birthyear'].isnull()==True)& (bks_df['usertype']==\"Customer\")].count()","8bf73e83":"#Number of Subscribers with missing birthyears\nbks_df[(bks_df['birthyear'].isnull()==True)& (bks_df['usertype']==\"Subscriber\")].count()","e9b69f5a":"bks_df['gender'] = bks_df['gender'].fillna(\"Other Gender Identity\")","c7cf93cb":"## We have replaced all missing gender values\n\nbks_df['gender'].value_counts() ","dceae6fb":"#Identifying average birthyear for each usertype\navg_age = bks_df.groupby('usertype')['birthyear'].mean().round()\navg_age","ff38155f":"#The following line of code helps identify all values in the birthyear column that are null for customer data:\n#bks_df.loc[(bks_df['usertype']=='Customer') & (bks_df['birthyear'].isnull()==True),['birthyear']]\n\n#Replacing missing values with the average customer age\nbks_df.loc[(bks_df['usertype']=='Customer') & (bks_df['birthyear'].isnull()==True),['birthyear']] = bks_df.loc[(bks_df['usertype']=='Customer') & (bks_df['birthyear'].isnull()==True),['birthyear']].fillna(1989)","e4687e39":"##Rows with missing value for birthyear have been replaced\n\nbks_df['birthyear'].isnull().value_counts() ","44ce87f7":"bks_df.dropna(subset=['birthyear'], inplace=True)","cec857fd":"## We have deleted all rows with missing birthyear values\n\nbks_df['birthyear'].isnull().value_counts() ","ef3623a0":"bks_df.info()","a273e10f":"#Converting start time and end time to datetime values \n\nbks_df['start_time'] = pd.to_datetime(bks_df['start_time'])\nbks_df['end_time'] = pd.to_datetime(bks_df['end_time'])","9e0ee95b":"#Converting birthyear to int format\nbks_df['birthyear'] = bks_df['birthyear'].astype(int)","0caad24c":"#Checking for any instances where end time is earlier than the start time\n\n(bks_df['end_time'] > bks_df['start_time']).value_counts()","91414d3a":"#Deleting rows where end time is earlier than start time\n\nbks_df.drop(bks_df[bks_df['end_time'] < bks_df['start_time']].index, inplace = True)","b49ce00b":"#Rows have been sucessfully deleted\n\n(bks_df['end_time'] > bks_df['start_time']).value_counts()","74b138fb":"# Calculating Trip duration in a new column\nbks_df['trip_duration'] = bks_df['end_time'] - bks_df['start_time']","54ffa5ba":"#Checking if any trips exceed 1 day\n\n(bks_df['trip_duration']>pd.Timedelta(\"1 days\")).value_counts() ","919a95e6":"#Checking the longest trip duration\n\nbks_df['trip_duration'].max()","3ac61537":"#Deleting rows where end time is earlier than start time\n\nbks_df.drop(bks_df[bks_df['trip_duration']>pd.Timedelta(\"1 days\")].index, inplace = True)","8ec31712":"#Rows with duration trips duration exceeding 1 day have been deleted\n\n(bks_df['trip_duration']>pd.Timedelta(\"1 days\")).value_counts() ","ffbb02e3":"#Creating a new column where we will convert 'trip_duration' into seconds\nbks_df['trip_duration_seconds'] = bks_df['trip_duration'].dt.total_seconds()","9c3ebf8a":"#Comparing values in the trip_duration_seconds to tripduration\n(bks_df['trip_duration_seconds'] == bks_df['tripduration']).value_counts()","f39ebbb0":"#Comparing values in the trip_duration_seconds to tripduration to check if tripduration is always less than trip_duration_seconds\n(bks_df['trip_duration_seconds'] > bks_df['tripduration']).value_counts()","128df9be":"#Deleting the tripduration column\nbks_df.drop('tripduration',axis=1, inplace=True)","e7ba5b5d":"from datetime import date\n\nbks_df['age'] = date.today().year - bks_df['birthyear']","4885738b":"#Identifying which day of the week the ride occured\n\nbks_df['day_of_week'] = bks_df['end_time'].dt.day_name()","1611f346":"#Identifying which month the ride occured\n\nbks_df['month'] = bks_df['end_time'].apply(lambda time: time.month)","e53503df":"#We needs to convert the values in the Month column from numbers to names of Months\n\ndmap = {1:'January',2:'February',3:'March',4:'April',5:'May',6:'June',7:'July',8:'August',9:'September',10:'October',11:'November',12:'December'}","4a75520e":"#Mapping our new dictionary to the Month column in the Dataframe\n\nbks_df['month'] = bks_df['month'].map(dmap)","6ebb8e4d":"#Checking for any obvious correlation in the numeric variables\nsns.heatmap(bks_df.corr())","a5405829":"#Number of trips associated with users in each category\n\nbks_df['usertype'].value_counts()","99dbf5a3":"Subscriber = 340685\nCustomer = 23035\n\nround(Subscriber\/Customer,1)","560f2a87":"user_count = bks_df['usertype']\nsns.countplot(x=user_count,data=bks_df,palette='viridis')\nplt.title(\"Number of Users of Each Type\", fontsize=20)","2904d81b":"#Number of trips associated with users of each gender\n\nbks_df['gender'].value_counts()","a751b2cc":"gender_df = bks_df['gender'].value_counts()\n\nexplode = (0, 0.1, 0.2)\n\ngender_df.plot.pie(figsize=(6, 6), autopct=\"%.1f\",fontsize=20,labels=None, legend=True, explode=explode).set_ylabel('')\nplt.title(\"Percentage of Users in Each Gender Category\", fontsize=20)\n\n# autopct=\"%.1f\" shows the percentage to 1 decimal place \n#.set_ylabel('') and can be added to remove the usertype label on the left of the chart.set_ylabel('')\n# The explosion array specifies the fraction of the radius with which to offset each slice.","e9bef503":"print(\"Youngest user is \", bks_df['age'].min(),\"years old\")\nprint(\"Oldest user is \", bks_df['age'].max(),\"years old\")\nprint(\"Average user is \", round(bks_df['age'].mean()),\"years old\")\nprint(\"Average standard deviation in age is\", round(bks_df['age'].std()),\"years\")","9e490ba0":"# Identifying the average age by gender \n\nbks_df.groupby('gender')['age'].mean().round()","0308962f":"fig_dims = (12, 8)\nfig, ax = plt.subplots(figsize=fig_dims)\n\nsns.histplot(data=bks_df, x=\"age\",binwidth=2,kde=True)\nplt.title(\"Age Breakdown for Rides\", fontsize=20)","0c788dc4":"graph = sns.FacetGrid(bks_df, col=\"usertype\", height=6)\ngraph.map_dataframe(sns.histplot,x=\"age\",binwidth=2)\n\n#Setting the title for the FacetGrid \ngraph.fig.subplots_adjust(top=0.85)\ngraph.fig.suptitle('Age breakdown by Usertype for Rides', fontsize=20)","21f7b6cf":"graph = sns.FacetGrid(bks_df, row=\"gender\",col=\"usertype\", height=6)\ngraph.map_dataframe(sns.histplot,x=\"age\",binwidth=2)\n\n#Setting the title for the FacetGrid \ngraph.fig.subplots_adjust(top=0.85)\ngraph.fig.suptitle('Age breakdown by Usertype and Gender for Rides', fontsize=20)","8a947f58":"#Number of rides on any given day of the week\nbks_df['day_of_week'].value_counts()","251f915d":"fig_dims = (12, 4)\nfig, ax = plt.subplots(figsize=fig_dims)\n\n# order = bks_df['day_of_week'].value_counts().index helps us sort the count plot by the value counts\n\nsns.countplot(x='day_of_week',data=bks_df,order = bks_df['day_of_week'].value_counts().index,palette='viridis')\nplt.title(\"Bike Share Ride Breakdown by Day of Week\", fontsize=20)","0036db8a":"bks_df['month'].value_counts()","6155bb26":"fig_dims = (12, 4)\nfig, ax = plt.subplots(figsize=fig_dims)\n\n#order = bks_df['month'].value_counts().index helps us sort the count plot by the value counts\n\nsns.countplot(x='month',data=bks_df,palette='viridis')\nplt.title(\"Bike Share Ride Breakdown by Month\", fontsize=20)","f11ec57e":"max_trip = bks_df['trip_duration'].max()\nmin_trip = bks_df['trip_duration'].min()\nmean_trip = bks_df['trip_duration'].mean()\nprint(\"The longest trip duration was\",max_trip,\"\\nThe shortest trip duration was\",min_trip,\"\\nThe average trip duration was\",mean_trip)","276b2e2f":"# Analyzing the trip duration times to identify any trends\n\nfig_dims = (10, 5)\nfig, ax = plt.subplots(figsize=fig_dims)\n\ntrip_duration_counts = bks_df['trip_duration'].value_counts()\n\ntrip_duration_counts.plot()\n\nplt.title(\"Ride Duration Times\", fontsize=20)","660d844a":"#Checking how many trips exceed the 1 hour mark\n(bks_df['trip_duration']<pd.Timedelta(\"1 hour\")).value_counts() ","390ea17a":"#Identifying the average trip duration for each user type\nuser_df = bks_df.groupby('usertype')['trip_duration_seconds'].mean().round()\n\n#Converting the series user_df to a dataframe\nuser_df = user_df.to_frame()\n\n#Converting 'trip_duration_seconds' back into timedelta format for readability \nuser_df['average_trip_duration'] = user_df['trip_duration_seconds'].apply(lambda time: (datetime.timedelta(seconds = time))) \n\n#Dropping 'trip_duration_seconds' as it is no longer needed\nuser_df.drop('trip_duration_seconds',axis=1, inplace=True)\n\n#Identifying number of trips for each user type\nuser_df['number_of_trips'] = bks_df['usertype'].value_counts()\n\nuser_df","a39d74b2":"cus = pd.to_timedelta(\"0 days 00:34:23\")\nsub = pd.to_timedelta(\"0 days 00:11:08\")\n\nround(cus\/sub,1)","e20e15fc":"#Identifying the average trip duration for each user type\nuser_df = bks_df.groupby(['usertype','gender'])['trip_duration_seconds'].mean().round()\n\n#Converting the series user_df to a dataframe\nuser_df = user_df.to_frame()\n\n#Converting 'trip_duration_seconds' back into timedelta format for readability \nuser_df['average_trip_duration'] = user_df['trip_duration_seconds'].apply(lambda time: (datetime.timedelta(seconds = time))) \n\n#Dropping 'trip_duration_seconds' as it is no longer needed\nuser_df.drop('trip_duration_seconds',axis=1, inplace=True)\n\n#Identifying number of trips for each user type\nuser_df['number_of_trips'] = bks_df.groupby('usertype')['gender'].value_counts()\n\n#Identifying average age by usertype and gender\nuser_df['average_age'] = bks_df.groupby(['usertype','gender'])['age'].mean().round()\n\nuser_df","68df63c5":"#Identifying the average trip on any given day of the week\nday_of_week = bks_df.groupby(['usertype','day_of_week'])['trip_duration_seconds'].mean().round()\n\n#Converting the series day_of_week to a dataframe\nday_of_week = day_of_week.to_frame()\n\n#Converting 'trip_duration_seconds' back into timedelta format for readability \nday_of_week['average_trip_duration'] = day_of_week['trip_duration_seconds'].apply(lambda time: (datetime.timedelta(seconds = time))) \n\n#Dropping 'trip_duration_seconds' as it is no longer needed\nday_of_week.drop('trip_duration_seconds',axis=1, inplace=True)\n\n#Sorting values by'average_trip_duration'\nday_of_week.sort_values(by='average_trip_duration')\n","30d1c1e0":"#Identifying number of trips on a given day of the week by user type\nnumber_of_trips = bks_df.groupby('usertype')['day_of_week'].value_counts()\n\n#Converting the series number_of_trips to a dataframe\nnumber_of_trips = number_of_trips.to_frame()\n\nnumber_of_trips","f3711de2":"# Analyzing the trip start times to identify how many trips begin at various times throughout the day.\n\n# Isolating the time portion from bks_df['start_time']\nstart_time = bks_df['start_time'].dt.time \n\nstart_time_counts = start_time.value_counts()\n\n#X-axis ticks will have to be set manually since the plot is difficult to read otherwise\n\n#Creating a series that will be populated using a for loop \ntime_series = []\nfor x in range(24):\n    #Note {:02d} ensures there are leading zeros (01,02,etc.) which is consistent with time formatting\n    time_series.append(\"{:02d}:00:00\".format(x))\n\ntime_series.append(\"23:59:00\")\n\nfig_dims = (20, 4)\nfig, ax = plt.subplots(figsize=fig_dims)\n\n#The x-ticks are set to the time series just created\nstart_time_counts.plot(xticks=time_series)\nplt.title(\"Ride Start Times throughout the Day\", fontsize=20)","d3eb1b21":"# Analyzing the trip start times to identify how many trips begin at various times throughout the day.\n\n#Looking at Customer rides specifically\ncustomer_trips = bks_df[bks_df[\"usertype\"]==\"Customer\"]\n\n# Isolating the time portion from bks_df['start_time']\nstart_time = customer_trips['start_time'].dt.time \n\nstart_time_counts = start_time.value_counts()\n\n#X-axis ticks will have to be set manually since the plot is difficult to read otherwise\n\n#Creating a series that will be populated using a for loop \ntime_series = []\nfor x in range(24):\n    #Note {:02d} ensures there are leading zeros (01,02,etc.) which is consistent with time formatting\n    time_series.append(\"{:02d}:00:00\".format(x))\n\ntime_series.append(\"23:59:00\")\n\nfig_dims = (20, 4)\nfig, ax = plt.subplots(figsize=fig_dims)\n\n#The x-ticks are set to the time series just created\nstart_time_counts.plot(xticks=time_series)\nplt.title(\"Customer Ride Start Times throughout the Day\", fontsize=20)","bfa02faf":"from_stations_df = bks_df['from_station_name'].value_counts().head(10)\nfrom_stations_df = from_stations_df.to_frame()\n\n#The index for this dataframe contains the station names so we want to put that information in a seaprate column\n#Resetting the index (also creates a new column called 'index')\nfrom_stations_df.reset_index(level=0, inplace=True)\n\n#Renaming 'from_station_name' which contains value counts to 'number_of_trips_start' and renaming the 'index' column to 'start_station_name'\nfrom_stations_df.rename(columns={'from_station_name': 'number_of_trips_start', 'index':'start_station_name'}, inplace=True)\n\nfrom_stations_df","e950ae1f":"to_stations_df = bks_df['to_station_name'].value_counts().head(10)\nto_stations_df = to_stations_df.to_frame()\n\n#Resetting the index \nto_stations_df.reset_index(level=0, inplace=True)\n\n#Renaming columns\nto_stations_df.rename(columns={'to_station_name': 'number_of_trips_end', 'index':'end_station_name'}, inplace=True)\n\nto_stations_df ","efdb7e0f":"#Creating two series each with the names of the top 10 stations\nstart = from_stations_df['start_station_name']\nend = to_stations_df['end_station_name']\n\n#Identifying the intersection of both series\npd.Series(list(set(start) & set(end)))","cd294910":"#Identifying Customers\ncustomers_from_stations = bks_df[bks_df['usertype']==\"Customer\"]\n\n#Identifying top 5 stations where Customers begin trips from\ncustomers_from_stations = customers_from_stations.groupby('usertype')['from_station_name'].value_counts().head(10)\ncustomers_from_stations = customers_from_stations.to_frame()\n\n#Renaming columns\ncustomers_from_stations.rename(columns={'from_station_name': 'number_of_trips'}, inplace=True)\n\ncustomers_from_stations","5469822b":"#Identifying Customers\ncustomers_to_stations = bks_df[bks_df['usertype']==\"Customer\"]\n\n#Identifying top 5 stations where Customers begin trips from\ncustomers_to_stations = customers_to_stations.groupby('usertype')['to_station_name'].value_counts().head(10)\ncustomers_to_stations = customers_to_stations.to_frame()\n\n#Renaming columns\ncustomers_to_stations.rename(columns={'to_station_name': 'number_of_trips'}, inplace=True)\n\ncustomers_to_stations","759ddf15":"#As the station names are part of the MultiIndex for the data frames we need to rest the index\n#Makes the username a new column\ncustomers_from_stations.reset_index(level=0, inplace=True)\ncustomers_to_stations.reset_index(level=0, inplace=True)\n\n#Makes the to_station_name and from_station_name a new column\ncustomers_from_stations.reset_index(level=0, inplace=True)\ncustomers_to_stations.reset_index(level=0, inplace=True)","c723e231":"#Creating two series each with the names of the top 10 stations\nstart = customers_from_stations['from_station_name']\nend = customers_to_stations['to_station_name']\n\n#Identifying the intersection of both series\npd.Series(list(set(start) & set(end)))","fd684a77":"We can further explore what the top stations are by usertype. As we are primarily interested in converting Customers to Subscribers, it is valuable to know which stations marketing efforts should be focused on to target customers.\n\n<b>Top ten bike stations where rides begin for <i>Customers<\/i> <\/b>","da49c5a9":"### Trip Start Times","60a4578a":"As seen above, the number of rides peaks at two different points on any given day, which correspond roughly with daily commute times where users may be heading to and from their workplaces.\n\n<b>Morning Commute:<\/b> Rides begins to rise after 5 AM, reaching a peak between 8 AM and 9 AM and then plateau around 10 AM.\n\n<b>Late Afternoon\/Evening Commute:<\/b> Rides begins to rise after 3 PM, reaching a peak sometime after 5 PM peak and then continue to decrease until the end of the day. ","7fa3bb69":"<b>Top ten bike stations where rides begin<\/b>","7bddbace":"The only remaining values that are mising are the subscribers with missing birthyear.","e043c53e":"### Checking for any correlation in the data","72f48012":"- There are 23,035 customer. \n- There are 14.8 times more Subscribers than Customers\n\n<b>Age<\/b>\n- On average, Customers are younger than Subscribers.\n- Customers between the ages of 31-33 make the most rides.\n\n    - Male users between the ages of 27-29 make the most rides.\n    - Female users between the ages of 25-27 make the most rides.\n    - Other Gender Identity users between the ages of 31-33 make the most rides\n\n<b>Trip Duration<\/b>\n\n- The majority of trips do not exceeed an hour.\n- On average, Customers make trips that are 3.1 times longer than Subscribers.\n\n    - Male users make the most trips.\n    - Female users are making the longest trips.\n    - Average age range is 31-32.\n\n<b>Day of Week<\/b>\n- On average, Customers make the longest trips on Saturday and the shortest trips on Friday\n- Customers make the most trips on Saturday and the least trips on Monday\n\n<b>Start Times and Stations<\/b>\n- The rides began to rise after 6 AM, reaching a peak sometime after 3 PM and then continue to decrease until the end of the day.\n- The bike stations listed are points where the most rides both begin and end for Customers, which makes them ideal locations for marketing promotions specifically targeted at them.\n- The bike stations listed are points where the most rides both begin and end, which makes them ideal locations for marketing promotions.\n\n    - Streeter Dr & Grand Ave\n    - Michigan Ave & Washington St\n    - Adler Planetarium\n    - Lake Shore Dr & Monroe St\n    - Shedd Aquarium\n    - Millennium Park\n    - Michigan Ave & Oak St\n\n\n","9fc8f84f":"### Day of week","074119ea":"## Creating new features","449d9d55":"- Subscribers <b>between the ages of 32-34<\/b> make the most rides.\n- Customers <b>between the ages of 31-33<\/b> make the most rides.","2774dee8":"# Data Analysis and Visualization","bda1f339":"The users are divided into two types: <b> Subscribers<\/b> and <b>Customer<\/b>. \n    \n- Users who purchase an annual membership fee are referred to as Subscribers \n- Users who purchase single-ride or full-day passes are referred to as Customers","d7989626":"<b>Stations that appear on both lists<\/b>","e737f60b":"Note: Directly using <b> bks_df.groupby(['usertype','day_of_week'])['trip_duration'].mean() <\/b> will not work because Python will not have any numeric data to aggregate","d25692b0":"### Number of Trips by Day of Week","29940768":"Based on the raw data provided we can explore the following questions:\n\n- How many users are there in each user type (Subscriber\/Customer)?\n- How many users are there in each gender category?\n- What is the average age of each user?\n- What is the distribution of rides by age?\n- What is the distribution of rides by day of week and month?\n- What is the trip duration? What is the average trip duration across user types, ages and gender?\n- When do trips usually begin? What time periods are the busiest?\n- Which bike stations do the most rides begin\/end at?","d75f5797":"The majority <i>(17126\/18023)<\/i> of the missing birthyear values belong to the <b>Customer<\/b> data.","d615e98b":"There does not appear to be any significant and meaningful correlation between variables","999e132e":"In this stage the data is checked for accuracy and completeness prior to beginning the analysis. \n\n- Removing extraneous data and outliers.\n- Filling in missing values.\n- Conforming data to a standardized pattern.\n- Identifying errors revealed when new variables are created.\n- Deleting data that cannot be corrected.\n\nNote: There are no unique identifiers for each user so the data does not account for multiple trips made by users. Therefore, it will not be able to tell us how many unique users are associated with the ride data. ","ab356782":"<b>Top ten bike stations where rides end<\/b>","c1166311":"The majority <i>(17228\/19711)<\/i> of the missing gender values belong to the <b>Customer<\/b> data.","7bb710d3":"There's a lot of overlap in the top 10 stations where rides begin\/end so it is useful to identify which stations appear in both lists.","a0e5ac36":"## Age","0a6d0d7a":"### Month","dcaaf192":"### Trip Duration by User Type","a49c422f":"<b>Focus on what is valuable to Customers<\/b>\n\n- Customers make longer trips than Subscribers. Longer trips will have a higher cost for the customer. The marketing team could highlight the decrease in cost from switching to becoming a Subscriber. The trip duration does not vary significantly for Customers regardless of the day of the week. Therefore, depending on the frequency of use by each customer, the customer would stand to save a significant amount by switching.\n<br>\n- Customers have a slight preference for weekend trips, The marketing teams could offer deals for Customers who choose to become Subscribers on a weekend. \n<br>\n- Customers also tend to be younger than Subscribers (primarily in their early 30's) so the marketing campaign should cater to the interests of this demographic. Customers may be using the bike share service for personal use such as running errands, travelling to meet someone etc. The marketing team could survey Customers to find out their interests and offer promotions such as discounts at grocery stores, a discounted annual price for referring friends etc. depending on their interests. \n<br>\n- The majority of Customers and Subscribers appear to be men. Therefore, the marketing team may want to change their marketing campaign to attract female users and users of other gender identities and expand their user base.\n<br>\n- Customer rides also appear to not follow the traditional commuting patterns, which may suggest that the customers either do not work traditional office jobs that require them to commute to and from work. Therefore the key time period to market promotions would be around 3 PM when the most rides are occuring. \n<br>\n- The Marketing team should distribute promotional materials at the stations identified that see the most traffic, where the majority of Customer tier trips begin and end. These locations are frequented the most by customers and provides an opportunity to entice them to make the switch to become Subscribers.","90d98d50":"In this stage, we will examine the data to identify any patterns, trends and relationships between the variables. It will help us analyze the data and extract insights that can be used to make decisions.\n\nData Visualization will gives us a clear idea of what the data means by giving it visual context.","3f7c3f6f":"### Trip Duration, Number of Trips and Demographic Data","3e052efa":"The bike stations listed are <b>points where the most rides both begin and end<\/b>, which makes them ideal locations for marketing promotions.  ","47005ba8":"### Age","a1b5b5f2":"# Bike Share Rides Data Analysis","e81fbee4":"<b>Note:<\/b> it would be useful to know the frequency of trips made by individual users to understand whether individual Customers trips more or less often than individual Subscribers. The marketing strategy may differ depending on the result. For example it is harder to convince a customer who takes a long trip once every few months to purchase an annual membership as opposed to a customer who takes a long trip more frequently. \n\nHowever, as mentioned before there are no unique identifiers for each user so the data does not account for multiple trips made by users. Therefore, it will not be able to tell us how many unique users are associated with the ride data. ","5078eca3":"The bike share trips are meant for commutes around the city and it would not make sense for a trip to exceed one day. Therefore, we have incorrect values that need to be removed. ","26e1b364":"# Summary of Customer Data","fc36ff35":"There are <b>14.8 times<\/b> more Subscribers than Customers","bc9f9e74":"### Gender","5e85bbb2":"The bike stations listed are <b>points where the most rides both begin and end for <i>Customers<\/i><\/b>, which makes them ideal locations for marketing promotions <i>specifically targeted<\/i> at them.","fe8fc7cb":"In this stage we are adding new features that will provide more insight into the data.","3df94807":"As there are a significant number of Customer data points in the missing data, we need to replace the missing data to get a better picture of the customer behavior. The missing data for the Subscribers is relatively less significant compared to the number of Subscribers.\n\n- We can replace missing gender values with a \"Other Gender Identity\" since we do not have the specific context stating otherwise. \n- We can replace missing birthyear vales with the average age for Customers. However, this will skew the age customer data towards the average of the customers who were not missing birthyear values.\n","8d0b34c5":"### User Types","aeb58844":"### Replacing Missing Values","20440569":"### Deleting Missing Values","80529648":"<b>Subscribers<\/b>\n\n- Male users <b>between the ages of 32-34<\/b> make the most rides.\n- Female users <b>between the ages of 31-33<\/b> make the most rides.\n- Other Gender Identity users <b>between the ages of 38-40<\/b> make the most rides.\n\n<b>Customers<\/b>\n\n- Male users <b>between the ages of 27-29<\/b> make the most rides.\n- Female users <b>between the ages of 25-27<\/b> make the most rides.\n- Other Gender Identity users <b>between the ages of 31-33<\/b> make the most rides","09ad56c8":"### Trip Duration","f2aa6b05":"<b> Trip Duration Statistics <\/b>","f33e0d04":"## Checking for other issues with values","4cea9354":"In the <b>Customer<\/b> category\n- Female users are making the longest trips.\n- Average age range is 31-32.\n\nIn the <b>Subscriber<\/b> category\n- Other Gender Identity users are making the longest trips.\n- Average age range is 38-43.\n\nOverall,\n- On average, Customers are make longer trips than Subscribers in each gender category. \n- On average, Customers are younger than Subscribers. \n- Male users make the most trips in both categories. ","5751fd5a":"We have a column with <b>\"tripduration\"<\/b> that appears to be in seconds. However we have to check if the values are consistent with the actual trip duration.","d99a2153":"## Month","3557d9aa":"Now that we have calculated the trip duration and removed the erroneous values, we can convert it to seconds","3cc240ec":"- <b>Customers<\/b> make the most trips on <b>Saturday<\/b> and the least trips on <b>Monday<\/b>\n- <b>Subscribers<\/b> make the most trips on <b>Thursday<\/b> and the least trips on <b>Saturday<\/b>","dd62ade0":"The trip duration calculated will be as a timedelta value which indicates the absolute time difference (for example \"1 day 10:10:10\")","962e6dfb":"There is a steep increase in rides starting from January with <b>March<\/b> being the busiest month for rides. The ridership drops off in April and does not fluctuate as significantly for the rest of the year.","27ebc9dc":"<b>Additional Data necessary<\/b><br>\nThe company should associate a unique customer id with each trip to identify individual customer behaviors. The unique identifiers would reveal information on the frequency of bike trips made by each customer. For example, it would reveal how many trips each customer makes a week on average, which may reveal if there are specific differences or similarities in the two tiers of customers.","67e184fd":"As seen in the plot and the data above the <b>majority of trips do not exceed an hour.<\/b>","bd57bbcc":"<b>Stations that appear on both lists<\/b>","c72cc5ec":"# Checking for missing values","d06ade3d":"# Data Cleaning and Preparation","e4d64208":"## Day of Week","ae82ae6f":"## Trip Duration","a7c3d7f5":"# Reccomendations","14354798":"Analysis of a case study that was part of the Google Data Analytics Certificate.\n\nDataset describes a bike-share company in Chicago that is seeking to understand its user demographics and redesign it's marketing strategy to increase the number of users opting in for annual memberships. Dataset only covers data for 2019.","7b4017a7":"### Trip Start\/End Locations","c5873f3c":"On average, <b>Customers make trips that are 3.1 times longer than Subscribers.<\/b>","d6533f51":"Users <b>between the ages of 32-34<\/b> make the most rides overall.","c796c28a":"Customer trips follow a different trend than the data overall. \n\nThe rides began to rise after 6 AM, reaching a peak sometime after 3 PM and then continue to decrease until the end of the day. ","899a8ac2":"## Correcting formatting issues in data","f0aeb8c8":"<b> Age statistics by gender<\/b>","2e2fec9e":"### Trip start and end times","340f760f":"The <b>tripduration<\/b> values are not consistently lower than the <b>tripduration<\/b> values, so we can rule out the first possibility. \n\nIn the absence of specific context, it is not possible to verify if the second or third possibility are true. Therefore, we will make the assumption that the <b>start_time<\/b> and <b>end_time<\/b> values are accurate and delete the <b>tripduration<\/b> column.","20b15fcb":"<b>Top five bike stations where rides end for <i>Customers<\/i> <\/b>","32eb9495":"The users are overwhelmingly in the <b>Subscriber<\/b> category. The marketing strategy is therefore aimed at converting the relatively small number of users from Customers to Subscribers.","7dd59a7d":"All missing values have been dealt with.","31a7cdbc":"- On average, <b>Customers<\/b> make the longest trips on <b>Saturday<\/b> and the shortest trips on <b>Friday<\/b>\n- On average, <b>Subscribers<\/b> make the longest trips on <b>Sunday<\/b> and the shortest trips on <b>Friday<\/b>","49f47923":"### Average Trip Duration by Day of Week","2781c515":"The gender and birthyear columns appear to have missing values. \n\nThe missing values originate from a variety of reasons:\n- The user may have forgotten to enter the value.  \n- For missing gender values, the user may have identified with a different gender identify than the two options provided. \n- Hardware or software error in the bikes is affecting accuracy of trip data and so on.\n\nAs we are interested in Customer data it is important to identify how many of the missing vales belong to the Customers. Additionally, it is recommended to make both the above values a required field for user data collection purposes to avoid missing data in the future. ","40aabdd1":"The error could originate from a variety of reasons:\n- Start and end times may have been swapped\n- Start and end times may have been entered incorrectly\n- Hardware or software error in the bikes is affecting accuracy of trip data and so on. \n\nAs the source of the error is unknown, correcting the values is not possible so the associated rows will be deleted.","24a1bdde":"<b> Age statistics for all users<\/b>","3b9608b4":"It appears the majority of the values do not match, which presents three possibilities:\n1. The <b>tripduration<\/b> values in the raw data may be capturing actual ride time in which case they may not include time the user is taking to unlock the bike, get on the bike etc. In this instance we can expect that the <b>tripduration<\/b> values to be lower than <b>trip_duration_seconds<\/b> values.\n2. The <b>tripduration<\/b> values may be inaccurate, which could be leading to the discrepancy. \n3. The <b>start_time<\/b> and <b>end_time<\/b> values may be inaccurate, which could be leading to the discrepancy. ","a3baf994":"<b>Thursdays<\/b> are the busiest days of the week for rides"}}