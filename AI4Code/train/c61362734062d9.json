{"cell_type":{"0c1b0508":"code","39228dae":"code","90810162":"code","bd5acf5b":"code","9ee0a435":"code","c1c13df1":"code","010dd182":"code","5f96dd46":"code","e974b189":"code","a520d89e":"code","af31db37":"code","78c91862":"code","808a51d9":"code","c978958b":"code","2475b9b5":"code","0c7b67e2":"code","d7ff7f6f":"code","9aa4b5a0":"code","fa28b44d":"code","639fd82d":"code","ffe1ff09":"code","f230c0d5":"code","5c1cf66d":"code","8067a1a4":"code","b4eaa7a6":"code","ccdc51dc":"code","9e3ab1a2":"code","bd72a808":"code","36c1d2ad":"markdown","d861bfa1":"markdown","394b83b0":"markdown","a1a1ed9d":"markdown","e80cc1ff":"markdown","16768678":"markdown","b1a6b062":"markdown","addeb77f":"markdown","9771b8b2":"markdown","550774ec":"markdown","d2114a0b":"markdown","670b48f0":"markdown","ae4f8e8d":"markdown","cea6e2c3":"markdown"},"source":{"0c1b0508":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","39228dae":"import lightgbm as lgb\nfrom matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom pathlib import Path\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras.losses import mean_squared_error\nfrom tensorflow.keras.metrics import AUC\nfrom tensorflow.python.keras.utils import control_flow_util\nimport seaborn as sns\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import roc_auc_score, confusion_matrix\nimport warnings","90810162":"!pip install kaggler","bd5acf5b":"import kaggler\nfrom kaggler.model import AutoLGB\nfrom kaggler.preprocessing import LabelEncoder\n\nprint(f'Kaggler: {kaggler.__version__}')\nprint(f'TensorFlow: {tf.__version__}')","9ee0a435":"warnings.simplefilter('ignore')\nplt.style.use('fivethirtyeight')\npd.set_option('max_columns', 100)","c1c13df1":"data_dir = Path('\/kaggle\/input\/tabular-playground-series-apr-2021\/')\ntrn_file = data_dir \/ 'train.csv'\ntst_file = data_dir \/ 'test.csv'\nsample_file = data_dir \/ 'sample_submission.csv'\npseudo_label_file = '\/kaggle\/input\/tps-apr-2021-label\/voting_submission_from_5_best.csv'\n\ntarget_col = 'Survived'\nid_col = 'PassengerId'\n\nfeature_name = 'dae'\nalgo_name = 'lgb'\nmodel_name = f'{algo_name}_{feature_name}'\n\nfeature_file = f'{feature_name}.csv'\npredict_val_file = f'{model_name}.val.txt'\npredict_tst_file = f'{model_name}.tst.txt'\nsubmission_file = f'{model_name}.sub.csv'","010dd182":"trn = pd.read_csv(trn_file, index_col=id_col)\ntst = pd.read_csv(tst_file, index_col=id_col)\nsub = pd.read_csv(sample_file, index_col=id_col)\npseudo_label = pd.read_csv(pseudo_label_file, index_col=id_col)\nprint(trn.shape, tst.shape, sub.shape, pseudo_label.shape)","5f96dd46":"tst[target_col] = pseudo_label[target_col]\nn_trn = trn.shape[0]\ndf = pd.concat([trn, tst], axis=0)\ndf.head()","e974b189":"# Feature engineering code from https:\/\/www.kaggle.com\/udbhavpangotra\/tps-apr21-eda-model\n\ndf['Embarked'] = df['Embarked'].fillna('No')\ndf['Cabin'] = df['Cabin'].fillna('_')\ndf['CabinType'] = df['Cabin'].apply(lambda x:x[0])\ndf.Ticket = df.Ticket.map(lambda x:str(x).split()[0] if len(str(x).split()) > 1 else 'X')\n\ndf['Age'].fillna(round(df['Age'].median()), inplace=True,)\ndf['Age'] = df['Age'].apply(round).astype(int)\n\ndf['Fare'].fillna(round(df['Fare'].median()), inplace=True,)\n\ndf['FirstName'] = df['Name'].str.split(', ').str[0]\ndf['SecondName'] = df['Name'].str.split(', ').str[1]\n\ndf['n'] = 1\n\ngb = df.groupby('FirstName')\ndf_names = gb['n'].sum()\ndf['SameFirstName'] = df['FirstName'].apply(lambda x:df_names[x])\n\ngb = df.groupby('SecondName')\ndf_names = gb['n'].sum()\ndf['SameSecondName'] = df['SecondName'].apply(lambda x:df_names[x])\n\ndf['Sex'] = (df['Sex'] == 'male').astype(int)\n\ndf['FamilySize'] = df.SibSp + df.Parch + 1\n\nfeature_cols = ['Pclass', 'Age','Embarked','Parch','SibSp','Fare','CabinType','Ticket','SameFirstName', 'SameSecondName', 'Sex',\n                'FamilySize', 'FirstName', 'SecondName']\ncat_cols = ['Pclass','Embarked','CabinType','Ticket', 'FirstName', 'SecondName']\nnum_cols = [x for x in feature_cols if x not in cat_cols]\nprint(len(feature_cols), len(cat_cols), len(num_cols))","a520d89e":"for col in ['SameFirstName', 'SameSecondName', 'Fare', 'FamilySize', 'Parch', 'SibSp']:\n    df[col] = np.log2(1 + df[col])\n    \nscaler = StandardScaler()\ndf[num_cols] = scaler.fit_transform(df[num_cols])\n\nlbe = LabelEncoder(min_obs=50)\ndf[cat_cols] = lbe.fit_transform(df[cat_cols]).astype(int)","af31db37":"encoding_dim = 128\nmasking_prob = .2\nemphasis_ratio = 2.\nseed = 42\n\ndef get_dae(encoding_dim, dropout=.2):\n    num_dim = len(num_cols)\n    num_input = keras.layers.Input((num_dim,), name='num_input')\n    cat_inputs = []\n    cat_embs = []\n    emb_dims = 0\n    for col in cat_cols:\n        cat_input = keras.layers.Input((1,), name=f'{col}_input')\n        emb_dim = max(8, int(np.log2(1 + df[col].nunique()) * 4))\n        cat_emb = keras.layers.Embedding(input_dim=df[col].max() + 1, output_dim=emb_dim)(cat_input)\n        cat_emb = keras.layers.Dropout(dropout)(cat_emb)\n        cat_emb = keras.layers.Reshape((emb_dim,))(cat_emb)\n\n        cat_inputs.append(cat_input)\n        cat_embs.append(cat_emb)\n        emb_dims += emb_dim\n\n    merged_inputs = keras.layers.Concatenate()([num_input] + cat_embs)\n    batch_size, merged_inputs_dim = merged_inputs.get_shape()\n    training = K.learning_phase()\n    def mask_inputs():\n        mask = tf.random.stateless_binomial(shape=(batch_size, merged_inputs_dim),\n                                            seed=seed,\n                                            counts=tf.ones((merged_inputs_dim,)),\n                                            probs=[masking_prob] * merged_inputs_dim)\n\n        return tf.where(mask == 1, tf.zeros_like(merged_inputs), merged_inputs)\n\n    masked_inputs = control_flow_util.smart_cond(training,\n                                                 mask_inputs,\n                                                 lambda: merged_inputs)    \n\n    encoded = keras.layers.Dense(encoding_dim, activation='relu')(masked_inputs)\n    encoded = keras.layers.Dropout(dropout)(encoded)\n    encoded = keras.layers.Dense(encoding_dim, activation='relu')(encoded)\n    encoded = keras.layers.Dropout(dropout)(encoded)    \n    encoded = keras.layers.Dense(encoding_dim, activation='relu')(encoded)\n    \n    decoded = keras.layers.Dense(encoding_dim, activation='relu')(encoded)\n    decoded = keras.layers.Dropout(dropout)(decoded)\n    decoded = keras.layers.Dense(encoding_dim, activation='relu')(decoded)\n    decoded = keras.layers.Dropout(dropout)(decoded)    \n    decoded = keras.layers.Dense(num_dim + emb_dims, activation='linear')(decoded)\n\n    encoder = keras.Model([num_input] + cat_inputs, encoded)\n    ae = keras.Model([num_input] + cat_inputs, decoded, name='ae')\n    \n    reconstruction_loss = K.mean(\n        # masked inputs\n        mean_squared_error(merged_inputs,\n                           tf.where(merged_inputs != masked_inputs,\n                                    decoded, merged_inputs)) \/ masking_prob * emphasis_ratio \\\n        # original inputs\n       + mean_squared_error(merged_inputs,\n                            tf.where(merged_inputs == masked_inputs,\n                                     decoded, merged_inputs)) \/ (1. - masking_prob)\n    )\n    ae.add_loss(reconstruction_loss)\n    ae.compile(optimizer='adam')\n    return ae, encoder","78c91862":"ae, encoder = get_dae(encoding_dim)\nae.summary()","808a51d9":"inputs = [df[num_cols].values] + [df[x].values for x in cat_cols]\nae.fit(inputs, inputs,\n      epochs=30,\n      batch_size=16384,\n      shuffle=True,\n      validation_split=.2)","c978958b":"encoding = encoder.predict(inputs)\nprint(encoding.shape)\nnp.savetxt(feature_file, encoding, fmt='%.6f', delimiter=',')","2475b9b5":"n_fold = 5\nX = pd.concat((df[feature_cols], \n               pd.DataFrame(encoding, columns=[f'enc_{x}' for x in range(encoding_dim)])), axis=1)\ny = df[target_col]\nX_tst = X.iloc[n_trn:]\n\ncv = StratifiedKFold(n_splits=n_fold, shuffle=True, random_state=seed)\np = np.zeros_like(y, dtype=float)\np_tst = np.zeros((tst.shape[0],))\nfor i, (i_trn, i_val) in enumerate(cv.split(X, y)):\n    if i == 0:\n        clf = AutoLGB(objective='binary', metric='auc', random_state=seed)\n        clf.tune(X.iloc[i_trn], y[i_trn])\n        features = clf.features\n        params = clf.params\n        n_best = clf.n_best\n        print(f'{n_best}')\n        print(f'{params}')\n        print(f'{features}')\n    \n    trn_data = lgb.Dataset(X.iloc[i_trn], y[i_trn])\n    val_data = lgb.Dataset(X.iloc[i_val], y[i_val])\n    clf = lgb.train(params, trn_data, n_best, val_data, verbose_eval=100)\n    p[i_val] = clf.predict(X.iloc[i_val])\n    p_tst += clf.predict(X_tst) \/ n_fold\n    print(f'CV #{i + 1} AUC: {roc_auc_score(y[i_val], p[i_val]):.6f}')\n\nnp.savetxt(predict_val_file, p, fmt='%.6f')\nnp.savetxt(predict_tst_file, p_tst, fmt='%.6f')","0c7b67e2":"print(f'  CV AUC: {roc_auc_score(y, p):.6f}')\nprint(f'Test AUC: {roc_auc_score(pseudo_label[target_col], p_tst)}')","d7ff7f6f":"n_pos = int(0.34911 * tst.shape[0])\nth = sorted(p_tst, reverse=True)[n_pos]\nprint(th)\nconfusion_matrix(pseudo_label[target_col], (p_tst > th).astype(int))","9aa4b5a0":"sub[target_col] = (p_tst > th).astype(int)\nsub.to_csv(submission_file)","fa28b44d":"feature_name = 'dae'\nalgo_name = 'sdae'\nmodel_name = f'{algo_name}_{feature_name}'\n\nfeature_file = f'{feature_name}.csv'\npredict_val_file = f'{model_name}.val.txt'\npredict_tst_file = f'{model_name}.tst.txt'\nsubmission_file = f'{model_name}.sub.csv'","639fd82d":"def get_sdae(encoding_dim, dropout=.2):\n    num_dim = len(num_cols)\n    num_input = keras.layers.Input((num_dim,), name='num_input')\n    cat_inputs = []\n    cat_embs = []\n    emb_dims = 0\n    for col in cat_cols:\n        cat_input = keras.layers.Input((1,), name=f'{col}_input')\n        emb_dim = max(8, int(np.log2(1 + df[col].nunique()) * 4))\n        cat_emb = keras.layers.Embedding(input_dim=df[col].max() + 1, output_dim=emb_dim)(cat_input)\n        cat_emb = keras.layers.Dropout(dropout)(cat_emb)\n        cat_emb = keras.layers.Reshape((emb_dim,))(cat_emb)\n\n        cat_inputs.append(cat_input)\n        cat_embs.append(cat_emb)\n        emb_dims += emb_dim\n    \n    inputs = [num_input] + cat_inputs\n    merged_inputs = keras.layers.Concatenate()([num_input] + cat_embs)\n    \n    # masking\n    batch_size, merged_inputs_dim = merged_inputs.get_shape()\n    training = K.learning_phase()\n    def mask_inputs():\n        mask = tf.random.stateless_binomial(shape=(batch_size, merged_inputs_dim),\n                                            seed=seed,\n                                            counts=tf.ones((merged_inputs_dim,)),\n                                            probs=[masking_prob] * merged_inputs_dim)\n\n        return tf.where(mask == 1, tf.zeros_like(merged_inputs), merged_inputs)\n\n    masked_inputs = control_flow_util.smart_cond(training,\n                                                 mask_inputs,\n                                                 lambda: merged_inputs)    \n\n    # encoder\n    encoded_1 = keras.layers.Dense(encoding_dim, activation='relu')(masked_inputs)\n    encoded_1 = keras.layers.Dropout(dropout)(encoded_1)\n    encoded_2 = keras.layers.Dense(encoding_dim, activation='relu')(encoded_1)\n    encoded_2 = keras.layers.Dropout(dropout)(encoded_2)    \n    encoded_3 = keras.layers.Dense(encoding_dim, activation='relu')(encoded_2)\n    \n    encoded_concat = keras.layers.Concatenate()([encoded_1, encoded_2, encoded_3])\n    encoder = keras.Model(inputs, encoded_concat)\n    \n    decoded = keras.layers.Dense(encoding_dim, activation='relu')(encoded_3)\n    decoded = keras.layers.Dropout(dropout)(decoded)\n    decoded = keras.layers.Dense(encoding_dim, activation='relu')(decoded)\n    decoded = keras.layers.Dropout(dropout)(decoded)    \n    decoded = keras.layers.Dense(num_dim + emb_dims, activation='linear')(decoded)\n\n    ae = keras.Model([num_input] + cat_inputs, decoded)\n    \n    # classifier\n    clf_encoded_input = keras.Input((encoding_dim * 3,))\n    x = keras.layers.Dense(encoding_dim, 'relu')(clf_encoded_input)\n    x = keras.layers.Dropout(dropout)(x)\n    clf_output = keras.layers.Dense(1, activation='sigmoid')(x)\n    clf = keras.Model(inputs=clf_encoded_input, outputs=clf_output, name='clf')\n    \n    outputs = [ae(inputs), clf(encoder(inputs))]\n    model = keras.Model(inputs, outputs, name='sdae')\n    \n    reconstruction_loss = K.mean(\n        # masked inputs\n        mean_squared_error(merged_inputs,\n                           tf.where(merged_inputs != masked_inputs,\n                                    decoded, merged_inputs)) \/ masking_prob * emphasis_ratio \\\n        # original inputs\n       + mean_squared_error(merged_inputs,\n                            tf.where(merged_inputs == masked_inputs,\n                                     decoded, merged_inputs)) \/ (1. - masking_prob)\n    )\n    model.add_loss(reconstruction_loss)\n    model.compile(optimizer='adam', loss={'clf': 'binary_crossentropy'}, metrics={'clf': [AUC()]})\n    return model, encoder","ffe1ff09":"sdae, encoder = get_sdae(encoding_dim)\nsdae.summary()","f230c0d5":"n_fold = 5\nX = df[feature_cols]\ny = df[target_col]\nX_tst = X.iloc[n_trn:]\ninputs_tst = [X_tst[num_cols].values] + [X_tst[x].values for x in cat_cols]\n\ncv = StratifiedKFold(n_splits=n_fold, shuffle=True, random_state=seed)\np = np.zeros_like(y, dtype=float)\np_tst = np.zeros((tst.shape[0],))\nfor i, (i_trn, i_val) in enumerate(cv.split(X, y)):\n    X_trn = X.iloc[i_trn]\n    X_val = X.iloc[i_val]\n\n    inputs_trn = [X[num_cols].values[i_trn]] + [X[x].values[i_trn] for x in cat_cols]\n    inputs_val = [X[num_cols].values[i_val]] + [X[x].values[i_val] for x in cat_cols]\n    sdae, _ = get_sdae(encoding_dim)\n    sdae.fit(inputs_trn, y[i_trn],\n              epochs=20,\n              batch_size=16384,\n              shuffle=True,\n              validation_data=(inputs_val, y[i_val]))\n    p[i_val] = sdae.predict(inputs_val)[1].flatten()\n    p_tst += sdae.predict(inputs_tst)[1].flatten() \/ n_fold\n    print(f'CV #{i + 1} AUC: {roc_auc_score(y[i_val], p[i_val]):.6f}')\n\nnp.savetxt(predict_val_file, p, fmt='%.6f')\nnp.savetxt(predict_tst_file, p_tst, fmt='%.6f')","5c1cf66d":"print(f'  CV AUC: {roc_auc_score(y, p):.6f}')\nprint(f'Test AUC: {roc_auc_score(pseudo_label[target_col], p_tst)}')","8067a1a4":"n_pos = int(0.34911 * tst.shape[0])\nth = sorted(p_tst, reverse=True)[n_pos]\nprint(th)\nconfusion_matrix(pseudo_label[target_col], (p_tst > th).astype(int))","b4eaa7a6":"sub[target_col] = (p_tst > th).astype(int)\nsub.to_csv(submission_file)","ccdc51dc":"submission_file = 'simple_ensemble_dae.csv'\nmodel_names = ['lgb_dae', 'sdae_dae']\npredict_val_files = [f'{x}.val.txt' for x in model_names]\npredict_tst_files = [f'{x}.tst.txt' for x in model_names]\ndict_val_predict = {}\ndict_tst_predict = {}\nfor name, val_file, tst_file in zip(model_name, predict_val_files, predict_tst_files):\n    dict_val_predict[name] = np.loadtxt(val_file)\n    dict_tst_predict[name] = np.loadtxt(tst_file)\n    \np = pd.DataFrame(dict_val_predict).mean(axis=1).values\np_tst = pd.DataFrame(dict_tst_predict).mean(axis=1).values\nprint(f'  CV AUC: {roc_auc_score(y, p):.6f}')\nprint(f'Test AUC: {roc_auc_score(pseudo_label[target_col], p_tst)}')","9e3ab1a2":"n_pos = int(0.34911 * tst.shape[0])\nth = sorted(p_tst, reverse=True)[n_pos]\nprint(th)\nconfusion_matrix(pseudo_label[target_col], (p_tst > th).astype(int))","bd72a808":"sub[target_col] = (p_tst > th).astype(int)\nsub.to_csv(submission_file)","36c1d2ad":"## Emphasized Denoising AutoEncoder (DAE) Using `Keras`","d861bfa1":"## Model Training: Supervised DAE with 5-CV","394b83b0":"## Supervised DAE with `Keras`","a1a1ed9d":"## Submission File for DAE + AutoLGB","e80cc1ff":"# Part 1: DAE + AutoLGB","16768678":"In this notebook, I will show how to build supervised emphasized Denoising AutoEncoder (DAE) with Keras. With pseudo label, we can train a classifier and the DAE together instead of training them separately as done in previous TPS competitions.\n\nIf you're interested in how different components of DAE (denoising, stacked layers, emphasis, etc.) contribute to its performance, please check out [Vincent et al. (2010) \"Stacked Denoising Autoencoders: Learning Useful Representations in a Deep Network with a Local Denoising Criterion\", JMLR](https:\/\/www.jmlr.org\/papers\/volume11\/vincent10a\/vincent10a.pdf).\n\nThis notebook is built on top of my previous notebook, [AutoEncoder + Pseudo Label + AutoLGB](https:\/\/www.kaggle.com\/jeongyoonlee\/autoencoder-pseudo-label-autolgb\/). The first part (section 1, 2, 3 and 5) of the notebook is the same as the previous one. \n\nThe contents of the notebook are as follows:\n1. **Package Installation**: Installing latest version of `Kaggler` using `Pip`.\n2. **Feature Engineering**: [code](https:\/\/www.kaggle.com\/udbhavpangotra\/tps-apr21-eda-model) by @udbhavpangotra\n3. **Feature Transformation**: Using `kaggler.preprocessing.LabelEncoder` to impute missing values and group rare categories automatically.\n4. **Stacked Emphasized Denoising AutoEncoder (DAE)**: Adding random noise mask and **emphasized** version of AutoEncoder, called \"Embphasized Denoising AutoEncoder\".\n5. **LightGBM Model Training**: 5-fold CV + Pseudo label from @hiro5299834's [data](https:\/\/www.kaggle.com\/hiro5299834\/tps-apr-2021-voting-pseudo-labeling) + `kaggler.model.AutoLGB`'s feature selection and hyperparameter optimization\n6. **Supervised DAE**: Training the classifier and DAE simultaneously.\n","b1a6b062":"We are adding a classifier **head** to the DAE network. It requires the additional loss and metric for the classifier in addition to the `reconstruction_loss` for DAE.","addeb77f":"# Part 3: Simple Ensemble","9771b8b2":"## Load Libraries and Install `Kaggler`","550774ec":"## Feature Engineering (ref: [code](https:\/\/www.kaggle.com\/udbhavpangotra\/tps-apr21-eda-model) by @udbhavpangotra)","d2114a0b":"# Part 2: Supervised DAE","670b48f0":"## Feature Transformation Using `Kaggler`","ae4f8e8d":"If you find it helpful, please upvote the notebook and give a star to [Kaggler](http:\/\/github.com\/jeongyoonlee\/Kaggler). If you have questions and\/or feature requests for Kaggler, please post them as Issue in the Kaggler GitHub repository.\n\nHappy Kaggling!","cea6e2c3":"## Model Training + Feature Selection + HPO Using `Kaggler`'s `AutoLGB`"}}