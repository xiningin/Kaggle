{"cell_type":{"c33af5ff":"code","6fc3192a":"code","dd7e31e9":"code","75c510b9":"code","83d6954f":"code","8cb090c8":"code","b0c86c04":"code","f6402acc":"code","0be8f8f3":"code","b119c606":"code","ebd15838":"code","3b9ab2bf":"code","5186b67c":"code","89612f13":"code","c2311df6":"code","c07404c6":"code","abc64d97":"code","cfbb711a":"code","31423487":"code","77aefe4f":"code","91ec2e96":"code","9f6d0684":"code","2b63960e":"code","4e7cfbd8":"code","fed1e535":"code","e591ca2e":"code","0211a002":"code","e887ff79":"code","050e0787":"code","06c6eab4":"code","f4c531f6":"code","87dccc39":"code","8717ebd2":"code","da789a9f":"code","89c7ffdf":"code","9df4c586":"code","f363a353":"code","1af429f7":"code","e4da558f":"code","4c310dbb":"code","4068e1d8":"code","6f12239f":"code","a4d8cfd2":"code","377a1292":"code","fc60ac85":"code","0ba531cf":"code","eb193d33":"code","5c92e41a":"code","8876c37b":"code","b7184642":"code","084eeca1":"code","df065f95":"code","d190a524":"code","4a6c666b":"code","ed21f980":"code","bee095df":"code","7eb9a12f":"code","8d8d1afe":"code","7cb0e918":"code","43c74a3f":"code","25773920":"code","3a4a8d51":"code","c177e098":"code","df487497":"code","c5cc149f":"code","aa8ae312":"code","401266a0":"code","255e94b6":"code","990b1100":"code","746148c6":"code","0af827e7":"code","751f2f51":"code","601d0535":"code","1cc2c028":"code","a81267a0":"code","d2365f27":"code","ca00645e":"code","2d317c92":"code","3a2ecc16":"code","343f1fcf":"code","c750e5cb":"code","3ef762d1":"code","b0f8560b":"code","1c551125":"code","eea71676":"code","4374ed16":"code","7f33a0a8":"code","ece8fc32":"code","2896a859":"code","0e40874e":"code","ac384557":"code","f42e489e":"code","bdfe1b05":"code","84f68b65":"code","77ebe596":"code","f0ac644d":"code","3cbc157b":"code","ec02c1e0":"code","51a0f820":"code","22b0e237":"code","c8db1f74":"code","7c473ad5":"code","eca54ac9":"code","62deb839":"code","688e6985":"code","b6c0c753":"code","525058e4":"code","45a14a17":"code","fb048c06":"code","73f1658d":"code","c90fb427":"code","d96bf5cc":"markdown","b918e6f6":"markdown","b069626b":"markdown","5fb8917e":"markdown","9caba0d1":"markdown","3fd0b372":"markdown","41a5504d":"markdown","e321db7c":"markdown","c9fa1aaa":"markdown","e868bf8f":"markdown","18381167":"markdown","850554bc":"markdown","52a16fa8":"markdown","d410c9f0":"markdown","25844ed2":"markdown","c46cb718":"markdown","0324614a":"markdown","99f4de01":"markdown","cf963b10":"markdown","afc0bf44":"markdown","ef628726":"markdown","2ebce3f0":"markdown","7ef66b74":"markdown","42cee60e":"markdown","e08ea38b":"markdown","0d58b8c8":"markdown","0823640f":"markdown","00e558db":"markdown","879292fd":"markdown","5be70e4c":"markdown","465a0836":"markdown","88975b7a":"markdown","85fd3767":"markdown","9181d5af":"markdown","ce70832a":"markdown","d2a51002":"markdown","a543e2f4":"markdown","35cb745a":"markdown","78635afc":"markdown","480c8500":"markdown","7d73df73":"markdown","f76b8359":"markdown","1ddd0b35":"markdown","a9d45008":"markdown","2ee7e6d0":"markdown","abfbd5dd":"markdown","fd25c0cc":"markdown","ff0325b8":"markdown","81d40cb4":"markdown","3d599fb8":"markdown"},"source":{"c33af5ff":"import warnings\nwarnings.filterwarnings('ignore')","6fc3192a":"import pandas as pd, numpy as np, seaborn as sns,matplotlib.pyplot as plt","dd7e31e9":"train= pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain.head()","75c510b9":"train.shape","83d6954f":"train.info()","8cb090c8":"train.describe()","b0c86c04":"test=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest.head()","f6402acc":"test.shape","0be8f8f3":"test.info()","b119c606":"test.describe()","ebd15838":"test.info()","3b9ab2bf":"train.info()","5186b67c":"train['Pclass'].value_counts(ascending=False)","89612f13":"print(\"Train['Pclass']  : \",train.Pclass.dtype)\nprint(\"Test['Pclass']   : \",test.Pclass.dtype)","c2311df6":"train['Pclass']=train['Pclass'].astype('object')\ntest['Pclass']=test['Pclass'].astype('object')","c07404c6":"print(\"Train['Pclass']  : \",train.Pclass.dtype)\nprint(\"Test['Pclass']   : \",test.Pclass.dtype)","abc64d97":"train['Survived'].value_counts(ascending=False)","cfbb711a":"print(\"Train['Survived']  : \",train.Survived.dtype)","31423487":"train['Survived']=train['Survived'].astype('object')","77aefe4f":"print(\"Train['Survived']  : \",train.Survived.dtype)","91ec2e96":"train['Pclass'] = train['Pclass'].replace({ 1 : '1st', 2: '2nd',3: '3rd'}).astype('category')\ntest['Pclass'] = test['Pclass'].replace({ 1 : '1st', 2: '2nd',3: '3rd'}).astype('category')","9f6d0684":"train['Pclass'].value_counts(ascending=False)","2b63960e":"test['Pclass'].value_counts(ascending=False)","4e7cfbd8":"train['Embarked'] = train['Embarked'].replace({ 'C' : 'Cherbourg', 'Q': 'Queenstown','S': 'Southampton'}).astype('object')\ntest['Embarked'] = test['Embarked'].replace({ 'C' : 'Cherbourg', 'Q': 'Queenstown','S': 'Southampton'}).astype('object')","fed1e535":"train['Embarked'].value_counts(ascending=False)","e591ca2e":"test['Embarked'].value_counts(ascending=False)","0211a002":"train.head()","e887ff79":"train.shape","050e0787":"train.describe()","06c6eab4":"train.info()","f4c531f6":"round(test.isnull().sum()*100\/len(test),2)","87dccc39":"test.isnull().sum()","8717ebd2":"round(train.isnull().sum()*100\/len(train),2)","da789a9f":"train.isnull().sum()","89c7ffdf":"round(test.Cabin.isnull().sum()*100\/len(test),2)","9df4c586":"test.Cabin.isnull().sum()","f363a353":"pd.set_option('display.max_rows', None)\ntest.Cabin.value_counts(ascending=False)","1af429f7":"plt.figure(figsize=(30,8))\nsns.countplot(x='Cabin',data=test)\nplt.xticks(rotation=90)\nplt.show()","e4da558f":"test['Cabin'] = test['Cabin'].replace(np.nan,'X')","4c310dbb":"test['Cabin'].isnull().sum()","4068e1d8":"train.Cabin.value_counts(ascending=False)","6f12239f":"plt.figure(figsize=(32,8))\nax=sns.countplot(x='Cabin',data=test)\nax.set_yscale('log')\nplt.xticks(rotation=90)\nplt.show()","a4d8cfd2":"round(train.Cabin.isnull().sum()*100\/len(train),2)","377a1292":"train.Cabin.isnull().sum()","fc60ac85":"pd.set_option('display.max_rows', None)\ntrain.Cabin.value_counts(ascending=False)","0ba531cf":"plt.figure(figsize=(30,8))\nsns.countplot(x='Cabin',data=train)\nplt.xticks(rotation=90)\nplt.show()","eb193d33":"train['Cabin'] = train['Cabin'].replace(np.nan,'X')","5c92e41a":"train['Cabin'].isnull().sum()","8876c37b":"test.Cabin.value_counts(ascending=False)","b7184642":"plt.figure(figsize=(32,8))\nax=sns.countplot(x='Cabin',data=train)\nax.set_yscale('log')\nplt.xticks(rotation=90)\nplt.show()","084eeca1":"round(test.Fare.isnull().sum()*100\/len(test),2)","df065f95":"test.Fare.isnull().sum()","d190a524":"test.Fare.describe()","4a6c666b":"plt.figure(figsize=(8,8))\nsns.violinplot(x='Fare',data=test)\nplt.show()","ed21f980":"test['Fare'] = test['Fare'].replace(np.nan,train.Fare.median())","bee095df":"test.Fare.isnull().sum()","7eb9a12f":"round(train.Age.isnull().sum()*100\/len(train),2)","8d8d1afe":"train.Age.isnull().sum()","7cb0e918":"train.Age.describe()","43c74a3f":"plt.figure(figsize=(8,8))\nsns.violinplot(x='Age',data=train)\nplt.show()","25773920":"train['Age'] = train['Age'].replace(np.nan,train.Age.median())","3a4a8d51":"train['Age'].isnull().sum()","c177e098":"round(test.Age.isnull().sum()*100\/len(test),2)","df487497":"test.Age.isnull().sum()","c5cc149f":"test.Age.describe()","aa8ae312":"plt.figure(figsize=(8,8))\nsns.violinplot(x='Age',data=test)\nplt.show()","401266a0":"test['Age'] = test['Age'].replace(np.nan,train.Age.median())","255e94b6":"test['Age'].isnull().sum()","990b1100":"round(train.Embarked.isnull().sum()*100\/len(train),2)","746148c6":"train.Embarked.isnull().sum()","0af827e7":"train.Embarked.value_counts(ascending=False)","751f2f51":"train['Embarked'] = train['Embarked'].replace(np.nan,train.Embarked.mode()[0])","601d0535":"train.Embarked.mode()","1cc2c028":"train.Embarked.isnull().sum()","a81267a0":"train.isnull().sum()","d2365f27":"test.isnull().sum()","ca00645e":"plt.figure(figsize = (10,10))\nsns.heatmap(train.corr(),annot = True,cmap=\"tab20c\")\nplt.show()","2d317c92":"sns.pairplot(train)\nplt.show()","3a2ecc16":"plt.figure(figsize=(8,8))\nax = sns.countplot(x='Pclass',data=train,hue=\"Survived\")\nbars = ax.patches\nhalf = int(len(bars)\/2)\nleft_bars = bars[:half]\nright_bars = bars[half:]\n\nfor left, right in zip(left_bars, right_bars):\n    height_l = left.get_height()\n    height_r = right.get_height()\n    total = height_l + height_r\n\n    ax.text(left.get_x() + left.get_width()\/2., height_l + 10, '{0:.0%}'.format(height_l\/total), ha=\"center\")\n    ax.text(right.get_x() + right.get_width()\/2., height_r + 10, '{0:.0%}'.format(height_r\/total), ha=\"center\")","343f1fcf":"plt.figure(figsize=(8,8))\nax = sns.countplot(x='Sex',data=train,hue=\"Survived\")\nbars = ax.patches\nhalf = int(len(bars)\/2)\nleft_bars = bars[:half]\nright_bars = bars[half:]\n\nfor left, right in zip(left_bars, right_bars):\n    height_l = left.get_height()\n    height_r = right.get_height()\n    total = height_l + height_r\n\n    ax.text(left.get_x() + left.get_width()\/2., height_l + 10, '{0:.0%}'.format(height_l\/total), ha=\"center\")\n    ax.text(right.get_x() + right.get_width()\/2., height_r + 10, '{0:.0%}'.format(height_r\/total), ha=\"center\")","c750e5cb":"plt.figure(figsize=(8,8))\nsns.violinplot(y='Age',x='Survived',hue='Survived',data=train)\nplt.show()","3ef762d1":"train.Age[train.Survived==1].describe()\n","b0f8560b":"train.Age[train.Survived==0].describe()","1c551125":"train['Family']= train['SibSp']+ train['Parch']+ 1 #including the passenger him\/herself\ntrain=train.drop(['SibSp','Parch'],axis=1)\ntrain.head()","eea71676":"plt.figure(figsize=(20,8))\nsns.violinplot(y='Age',x='Family',hue='Survived',data=train)\nplt.show()","4374ed16":"train.Family[train.Survived==1].describe()","7f33a0a8":"print('Percentage of People Survived with their family member count')\ntrain.Family[train.Survived==1].value_counts()* 100\/len(train)","ece8fc32":"print('Number of People Survived with their family member count')\ntrain.Family[train.Survived==1].value_counts()","2896a859":"print('Perceptage in total Survival with family count as ')\ntrain.Family[train.Survived==1].value_counts()* 100\/len(train.Family[train.Survived==1])","0e40874e":"train.Family[train.Survived==0].describe()","ac384557":"print('Perecentage of People Not Survived with their family member count')\ntrain.Family[train.Survived==0].value_counts()* 100\/len(train)","f42e489e":"print('Perceptage in total Death with family count as ')\ntrain.Family[train.Survived==0].value_counts()* 100\/len(train.Family[train.Survived==0])","bdfe1b05":"print('Number of People Not Survived with their family member count')\ntrain.Family[train.Survived==0].value_counts()","84f68b65":"plt.figure(figsize=(20,8))\nax = sns.countplot(x='Family',data=train,hue=\"Survived\")\nbars = ax.patches\nhalf = int(len(bars)\/2)\nleft_bars = bars[:half]\nright_bars = bars[half:]\n\nfor left, right in zip(left_bars, right_bars):\n    height_l = left.get_height()\n    height_r = right.get_height()\n    total = height_l + height_r\n\n    ax.text(left.get_x() + left.get_width()\/2., height_l + 10, '{0:.0%}'.format(height_l\/total), ha=\"center\")\n    ax.text(right.get_x() + right.get_width()\/2., height_r + 10, '{0:.0%}'.format(height_r\/total), ha=\"center\")","77ebe596":"test['Family']= test['SibSp']+ test['Parch']+ 1 #including the passenger him\/herself\ntest=test.drop(['SibSp','Parch'],axis=1)\ntest.head()","f0ac644d":"train=train.drop(['Name','Ticket'],axis=1)\ntrain.head()","3cbc157b":"test=test.drop(['Name','Ticket'],axis=1)\ntest.head()","ec02c1e0":"plt.figure(figsize=(8,8))\nsns.violinplot(y='Fare',x='Survived',hue='Survived',data=train)\nplt.show()","51a0f820":"train.Fare[train.Survived==1].describe()","22b0e237":"train.Fare[train.Survived==0].describe()","c8db1f74":"train.Cabin.value_counts()","7c473ad5":"plt.figure(figsize=(32,8))\nax=sns.barplot(x='Cabin',y='Fare',hue='Survived',data=train)\nplt.xticks(rotation=90)\nplt.show()","eca54ac9":"train.Cabin[train.Survived==0].value_counts(ascending=False)*100\/len(train.Cabin[train.Survived==0])","62deb839":"train.Cabin[train.Survived==1].value_counts(ascending=False)*100\/len(train.Cabin[train.Survived==1])","688e6985":"plt.figure(figsize=(8,8))\nax = sns.countplot(x='Embarked',data=train,hue=\"Survived\")\nbars = ax.patches\nhalf = int(len(bars)\/2)\nleft_bars = bars[:half]\nright_bars = bars[half:]\n\nfor left, right in zip(left_bars, right_bars):\n    height_l = left.get_height()\n    height_r = right.get_height()\n    total = height_l + height_r\n\n    ax.text(left.get_x() + left.get_width()\/2., height_l + 10, '{0:.0%}'.format(height_l\/total), ha=\"center\")\n    ax.text(right.get_x() + right.get_width()\/2., height_r + 10, '{0:.0%}'.format(height_r\/total), ha=\"center\")","b6c0c753":"train.Embarked.value_counts()","525058e4":"train.Embarked.value_counts()*100\/len(train)","45a14a17":"train.Embarked[train.Survived==0].value_counts(ascending=False)","fb048c06":"train.Embarked[train.Survived==0].value_counts(ascending=False)*100\/len(train.Embarked[train.Survived==0])","73f1658d":"train.Embarked[train.Survived==1].value_counts(ascending=False)","c90fb427":"train.Embarked[train.Survived==1].value_counts(ascending=False)*100\/len(train.Embarked[train.Survived==1])","d96bf5cc":"# EDA","b918e6f6":"Embarked","b069626b":"I solved this problem statement, Titanic: Machine Learning from Disaster (  https:\/\/lnkd.in\/e3vg9ZY ) with 8 different approaches :\nYou can check other approaches by clicking either of the link below added.\n1. GBM : https:\/\/lnkd.in\/eDD_FSP\n2. XGBClassifier https:\/\/lnkd.in\/e_2fe7y\n3. Random Forest  https:\/\/lnkd.in\/eAXXtR7\n4. kNN https:\/\/lnkd.in\/eFuJRu5\n5. Naive Bayes https:\/\/lnkd.in\/ens-x37 \n6. SVM https:\/\/lnkd.in\/eDxKCRJ\n7. Decision Tree https:\/\/lnkd.in\/eQ4AsTb\n8. Logistic Regression  https:\/\/lnkd.in\/edqXmeD\n\n**If you find this interesting, do upvote this notebook. Thanks for the valuable time spend & sharing love with us**","5fb8917e":"# Embarked","9caba0d1":"- There are outliers for this variable, hence, Median is prefered over mean","3fd0b372":"- There are outliers for this variable, hence, Median is prefered over mean","41a5504d":"We found few missing values in few of Columns","e321db7c":"## Variable are correctly classified & added in dataset","c9fa1aaa":"- People with  family member count as  2,3,4 has better chance of surviving than people with family member count as  1,5,6,8 & 11\n- Single Traveller may be tried to help others , resulting max death in total death i.e. 68%\n- Family having members as 8 & 11 died all , may because they were too busy in panic to collect family members before they exit.\n- Single Traveller Couple (Family with 2 members), couple with 1 or 2 children survived the most, i.e. 90% of total survival.\n- Single Traveller has both Survial & Death when account in total dealth or total survival.\n","e868bf8f":"# Cabin","18381167":"Pclass","850554bc":"## Add new feature ","52a16fa8":"# Decoding Values","d410c9f0":"- People who survived has bought a ticket with a mean 48.40 compared to  22.11, who are dead\n- People who survived has bought a ticket with a median 26 compared to 10.5, who are dead\n- Premium tickets bought safer seat","25844ed2":"it's Catergorical data","c46cb718":"# Insights\n- Total number of people travelled : 891\n- Number of People travelled were Female : 314\n- Number of People travelled were Female & Survived : 232\n- Number of People travelled were Female & Non Survived : 82\n- Number of People travelled were Male : 577\n- Number of People travelled were Male & Survived : 110\n- Number of People travelled were Male & Non Survived : 467\n- Percentage of People Travelling were Male : 35.24\n- Percentage of People Travelling were Female : 64.75\n- Percentage of Survial in total Survial if Male : 32.16\n- Percentage of Survial in total Survial if Female : 67.83\n\n\n- **Sex increased the chance of survival in that accident**","0324614a":"Similarly, For testdata, we perform same action","99f4de01":"Let replace missing value with a variable X, which means it's Unknown ","cf963b10":"## Impute Data for missing value ","afc0bf44":"Few Columns' datatype are defaulted as int64 but they are catergorical in nature ","ef628726":"I solved this problem statement, Titanic: Machine Learning from Disaster (  https:\/\/lnkd.in\/e3vg9ZY ) with 8 different approaches :\nYou can check other approaches by clicking either of the link below added.\n1. GBM : https:\/\/lnkd.in\/eDD_FSP\n2. XGBClassifier https:\/\/lnkd.in\/e_2fe7y\n3. Random Forest  https:\/\/lnkd.in\/eAXXtR7\n4. kNN https:\/\/lnkd.in\/eFuJRu5\n5. Naive Bayes https:\/\/lnkd.in\/ens-x37 \n6. SVM https:\/\/lnkd.in\/eDxKCRJ\n7. Decision Tree https:\/\/lnkd.in\/eQ4AsTb\n8. Logistic Regression  https:\/\/lnkd.in\/edqXmeD\n\n**If you find this interesting, do upvote this notebook. Thanks for the valuable time spend & sharing love with us**","2ebce3f0":"Fare","7ef66b74":"\nThe sinking of the Titanic is one of the most infamous shipwrecks in history.\n\nOn April 15, 1912, during her maiden voyage, the widely considered \u201cunsinkable\u201d RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren\u2019t enough lifeboats for everyone onboard, resulting in the death of 1502 out of 2224 passengers and crew.\n\nWhile there was some element of luck involved in surviving, it seems some groups of people were more likely to survive than others.\n\nIn this challenge, we neeedto build a predictive model that answers the question: \u201cwhat sorts of people were more likely to survive?\u201d using passenger data (ie name, age, gender, socio-economic class, etc).","42cee60e":"Let replace missing value with a variable X, which means it's Unknown","e08ea38b":"## Variable are all decoded & added in dataset","0d58b8c8":"### Checking the Correlation Matrix","0823640f":"Similarly, For testdata, we perform same action","00e558db":"Age","879292fd":"Embarked","5be70e4c":"- 87% of total death toll are from X Cabin , which means they don't had any cabin. They were Class 3 who paid little so, they have no premium service.\n- 60% of total Surviour are from X Cabin , which means they don't had any cabin. They were first who got alert and act fastest.\n- Luxury brough confort & premium services, same was the reason they were last who were alerted.","465a0836":"# Name & Ticket Number are not an important feature for prediction ","88975b7a":"# Step 1: Importing and Merging Data","85fd3767":"-  There are outliers for this variable, hence, Median is prefered over mean","9181d5af":"We can create a column 'Family' which will store values of sibsp + parch, \n\n- sibsp\t-> # of siblings \/ spouses aboard the Titanic\t\n- parch\t-> # of parents \/ children aboard the Titanic  \n\n& later drop these 2 columns from both dataset for uniformity ","ce70832a":"# Step 2: Inspecting the Dataframe","d2a51002":"Fare","a543e2f4":"It's Catergorical data","35cb745a":"### Correcting Datatype for the variable in data","78635afc":"# Insights\n- Total number of people travelled : 891\n- Number of People travelled in 1st pclass : 216\n- Number of People travelled in 1st pclass & Survived : 136\n- Number of People travelled in 1st pclass & Non Survived : 80\n- Number of People travelled in 2nd pclass : 184\n- Number of People travelled in 2nd pclass & Survived : 86\n- Number of People travelled in 2nd pclass & Non Survived : 98\n- Number of People travelled in 3rd pclass : 491\n- Number of People travelled in 3rd pclass & Survived : 118\n- Number of People travelled in 3rd pclass & Non Survived : 373\n- Percentage of People Travelling in 1st pclass : 24.24\n- Percentage of People Travelling in 2nd pclass : 20.65\n- Percentage of People Travelling in 3rd pclass : 55.10\n- Percentage of Survial in total Survial if travelling in 1st plass : 39.78\n- Percentage of Survial if total Survial travelling in 2nd plass : 25.15\n- Percentage of Survial if total Survial travelling in  3rd plass : 34.50\n- Percentage of Survial if travelling in 1st plass : 63\n- Percentage of Survial if travelling in 2nd plass : 47\n- Percentage of Survial if travelling in  3rd plass : 24\n\n- **Premium cost increased the chance of survival in that accident**\n\n","480c8500":"No Nan records are availble in any datasets","7d73df73":"- People from Cherbourg have more survial than Deaths\n- 72% of poeple have Embarked at Southampton\n","f76b8359":"Similarly, For train data ","1ddd0b35":"- Since, it's catergorical datatype, we opt for Mode","a9d45008":" - Mean Age for people who survived is 28 years, which is less compared with Mean Age for people who didn't survived is 30 years.\n - Median , 75th percentitle is same for both cases","2ee7e6d0":"# The Challenge","abfbd5dd":"Final Check()","fd25c0cc":"Survived","ff0325b8":"Cabin","81d40cb4":"Pclass","3d599fb8":"# Age"}}