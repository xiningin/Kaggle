{"cell_type":{"eb07a149":"code","d298d716":"code","3c077374":"code","e3c49acb":"code","9cba47df":"code","d2b940b1":"code","aa6f27bc":"code","39c8ea08":"code","7843c095":"code","e3f30792":"code","6a83bf05":"code","3c18cbeb":"code","9bef3ccb":"code","0d601944":"code","5ff60ee6":"code","f055a8ba":"markdown","97963b46":"markdown","49a88501":"markdown","a0b30874":"markdown","e322cf6a":"markdown","8c7f7493":"markdown","e36bdd5b":"markdown","a763d4b1":"markdown","9a8994de":"markdown","779409ec":"markdown","bded6175":"markdown","38bf5819":"markdown","fc234197":"markdown","2fdcea3e":"markdown","47971d1c":"markdown"},"source":{"eb07a149":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d298d716":"import pandas as pd\nimport numpy as np","3c077374":"df=pd.read_csv(\"..\/input\/covidvaccinationdata\/COVID_VAC_data.csv\")\ndf","e3c49acb":"df.iso_code.describe()","9cba47df":"df.location.describe()","d2b940b1":"df.total_cases.mean()","aa6f27bc":"df.people_fully_vaccinated.median()","39c8ea08":"df.total_cases_per_million.unique()","7843c095":"df.location.value_counts()","e3f30792":"reviews = pd.read_csv(\"..\/input\/wine-reviews\/winemag-data-130k-v2.csv\", index_col=0)","6a83bf05":"reviews_per_country = reviews.country.value_counts()\nreviews_per_country","3c18cbeb":"centered_price = reviews.price - reviews.price.mean()\ncentered_price","9bef3ccb":"bargain= (reviews.points \/ reviews.price).idxmax()\nbargain_wine= reviews.loc[bargain,'title']\nbargain_wine","0d601944":"count_tropical=reviews.description.map(lambda p: \"tropical\" in p).sum()\ncount_fruity=reviews.description.map(lambda p: \"fruity\" in p).sum()\ndescriptor_counts= pd.Series([count_tropical,count_fruity], index=['fruity','tropical'])\ndescriptor_counts","5ff60ee6":"def stars(x):\n    if x.country == 'Canada':\n        return 3\n    elif x.points >= 95:\n        return 3\n    elif (x.points >= 85):\n        return 2\n    else:\n        return 1\n\nstar_ratings = reviews.apply(stars, axis='columns')\nstar_ratings","f055a8ba":"**apply()** is the equivalent method if we want to transform a whole DataFrame by calling a custom method on each row.","97963b46":"Which wine is the \"best bargain\"?\n> Lets create a variable bargain_wine with the title of the wine with the highest points-to-price ratio in the dataset.","49a88501":"**Summary functions**\n> Pandas provides many simple \"summary functions\" (not an official name) which restructure the data in some useful way. For example, consider the describe() method:","a0b30874":"> **Import the required libraries**","e322cf6a":"**Hi Kagglers**,\n\n> *Happy to see you back !*\n\n> > Selecting the right data out of our data representation is critical to getting work done, as we demonstrated in the exercises.\n> \n> > However, the data does not always come out of memory in the format we want it in right out of the bat. Sometimes we have to do some more work ourselves to reformat it for the task at hand. \n\n\nIf there is any code snippet in the notebook, you need better explanation about, Please let me know in comments.\n\n**Rise & Shine!**\n","8c7f7493":"> If you want to get some particular simple summary statistic about a column in a DataFrame or a Series, there is usually a helpful pandas function that makes it happen.","e36bdd5b":"Lets make a simple star ratings.\n> A score of 95 or higher counts as 3 stars, a score of at least 85 but less than 95 is 2 stars. Any other score is 1 star.\n> \n> Also, lets say the Canadian Vintners Association is a major partner, so any wines from Canada should automatically get 3 stars, regardless of points.\n\nThus, now create a series \"star_ratings\" with the number of stars corresponding to each review in the dataset.","a763d4b1":"> Describe() generates a high-level summary of the attributes of the given column.","9a8994de":"There are only so many words you can use when describing a bottle of wine. \n> Is a wine more likely to be \"tropical\" or \"fruity\"? \nLets create a Series descriptor_counts counting how many times each of these two words appears in the description column in the dataset.","779409ec":" **Maps**\n> A map is a term, borrowed from mathematics, for a function that takes one set of values and \"maps\" them to another set of values. In data science we often have a need for creating new representations from existing data.\n\n> Maps are what handle this work, making them extremely important for getting your work done!","bded6175":"> To see a list of unique values and how often they occur in the dataset, we can use the **value_counts()** method:","38bf5819":"Lets Import another CSV & work ","fc234197":"> Create variable centered_price containing a version of the price column with the mean price subtracted","2fdcea3e":"How often does each country appear in the dataset?\n> Lets, Create a Series reviews_per_country mapping countries to the count of reviews of wines from that country.","47971d1c":"**map()**\n> For example, suppose that we wanted to remean the total_cases  of COVID all over the world. \n\n> The function you pass to map() should expect a single value from the Series (a point value, in the below example), and return a transformed version of that value.\n> \n> map() returns a new Series where all the values have been transformed by your function."}}