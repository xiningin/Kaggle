{"cell_type":{"3eb6bb60":"code","93415768":"code","cad53211":"code","bdd84277":"code","1d0bfe0d":"code","b4203dc6":"code","d213c76b":"code","9f557715":"code","720b422f":"code","e4d450f1":"code","69cc8055":"code","c7bf28d0":"code","188b570a":"code","6b0aabe2":"code","a98f93e8":"code","1a826725":"code","d861e0b3":"code","a489c21d":"code","8b0ef0e9":"code","864515ef":"code","ffa13141":"code","d2f6ac5e":"code","a31b2188":"code","04dbed1e":"code","c06ff8a6":"code","0a03b7d5":"code","bb48cc64":"code","d0a8fb4e":"code","be9e5981":"code","72605e95":"code","13bc1915":"code","ed47c0eb":"code","4cba2086":"code","11fd5125":"code","221d3795":"code","aecb33c7":"code","b716a402":"code","f181c6df":"code","cb19809e":"code","7a858aa0":"code","6900350b":"code","54876238":"code","ba044dcf":"code","78167dab":"markdown","f1bfe973":"markdown","d27e3955":"markdown","02dec262":"markdown","d062a1bb":"markdown","08f7da0e":"markdown","54806cc6":"markdown","69a6648b":"markdown","6234406d":"markdown","a67c3ed4":"markdown","fc18729c":"markdown","f85c1729":"markdown","4fec5bdb":"markdown","87f50bc9":"markdown","c3a89b00":"markdown","1a701f71":"markdown","97ee64c4":"markdown","eb210871":"markdown","a985510b":"markdown","8011551e":"markdown","e0aed407":"markdown","a6117aab":"markdown","be56f896":"markdown","1a5ef2a8":"markdown","c0123381":"markdown","3b4b46f0":"markdown","c76d8f42":"markdown","0b18c50a":"markdown","d11204dd":"markdown","18b8a2c1":"markdown","9f0b71e8":"markdown","5b134764":"markdown","3874c566":"markdown","e1c2603d":"markdown","f7958c5d":"markdown","3c8740c4":"markdown"},"source":{"3eb6bb60":"import pandas as pd\nimport numpy as np","93415768":"s = pd.Series([1 , 3, 5, np.nan, 6, 8])\ns","cad53211":"dates = pd.date_range('20130101' , periods=6)\ndates","bdd84277":"df = pd.DataFrame(np.random.randn(6, 4), index=dates, columns= list('ABCD'))\ndf","1d0bfe0d":"df2 =pd.DataFrame({'A':1.,\n              'B': pd.Timestamp('20130102'),\n              'C': pd.Series(1, index=list(range(4)), dtype='float32'),\n              'D': np.array([3] * 4, dtype='int32'),\n              'E': pd.Categorical([\"test\", \"train\", \"test\", \"train\"]),\n              'F': 'foo'})\n\ndf2","b4203dc6":"df2.dtypes","d213c76b":"df.head()","9f557715":"df.tail(3)","720b422f":"df.index","e4d450f1":"df.columns","69cc8055":"df.to_numpy()","c7bf28d0":"df2.to_numpy()","188b570a":"df.describe()","6b0aabe2":"df.T","a98f93e8":"df.sort_index(axis = 1, ascending=False)","1a826725":"df.sort_values(by='C')","d861e0b3":"df['A']","a489c21d":"df[0:3]","8b0ef0e9":"df['20130102':'20130104']","864515ef":"df.loc[dates[0]]","ffa13141":"df.loc[:,['A','B']]","d2f6ac5e":"df.loc['20130102':'20130104',['A','B']]","a31b2188":"df.loc[dates[0], 'A']","04dbed1e":"s1 = pd.Series([1, 2, 3, 4, 5, 6], index=pd.date_range('20130102' , periods=6))\ns1","c06ff8a6":"df['F'] = s1\ndf","0a03b7d5":"df.loc[:, 'D'] = np.array([5]*len(df))\ndf","bb48cc64":"df2 = df.copy()\n\ndf2[df2 > 0] = -df2\n\ndf2","d0a8fb4e":"df1 = df.reindex(index=dates[0:4], columns=list(df.columns) + ['E'])","be9e5981":"df1.loc[dates[0]:dates[1], 'E'] = 1\ndf1","72605e95":"df1.dropna(how='any')","13bc1915":"df1.fillna(value=5)","ed47c0eb":"pd.isna(df1)","4cba2086":"df.mean()","11fd5125":"df.mean(1)","221d3795":"df.apply(np.cumsum)","aecb33c7":"df.apply(lambda x: x.max() - x.min())","b716a402":"df = pd.DataFrame(np.random.randn(10, 4))\ndf","f181c6df":"pieces = [df[:3], df[3:7], df[7:]]\n\npd.concat(pieces)","cb19809e":"df = pd.DataFrame({'A': ['foo' , 'bar','foo' , 'bar','foo' , 'bar','foo' , 'foo'],\n                   'B' :['one', 'one', 'two', 'three','one', 'two', 'three','one'],\n                   'C' :np.random.randn(8),\n                   'D' :np.random.randn(8)})\n\ndf","7a858aa0":"df.groupby('A').sum()","6900350b":"df.groupby(['A','B']).sum()","54876238":"df = pd.DataFrame({'A': ['foo' , 'bar','foo' , 'bar','foo' , 'bar','foo' , 'foo'],\n                   'B': ['A','B','C','D'] * 2,\n                   'C' :['one', 'one', 'two', 'three','one', 'two', 'three','one'],\n                   'D' :np.random.randn(8),\n                   'E' :np.random.randn(8)})\ndf","ba044dcf":"pd.pivot_table(df, values='D', index=['A','B'], columns=['C'])","78167dab":"# Concat\n\nPandas provides various facilities for easily combining together Series and DataFrame objects with various kinds of set logic for the indexes and relational algebra functionality in the case of join\/ merge-type operations:\n\nconcatenating pandas objects together with **concat()**:","f1bfe973":"A where opertion with setting.","d27e3955":"Setting by assigning with a NumPy array:","02dec262":"Sorting by values:","d062a1bb":"For getting a scalar value:","08f7da0e":"# Pivot Table","54806cc6":"Selecting via [ ], which slices the rows.","69a6648b":"Creating a **DataFrame** by passing a Numpy array, with a datatime index and labeled columns:","6234406d":"Showing label slicing , both endpoints are included:","a67c3ed4":"Selecting on a multi-axis by label:","fc18729c":"Display the index, columns:","f85c1729":"# Viewing Data\n\nHere is how to view the top and bottom rows of the frame:","4fec5bdb":"Grouping and then applying the **sum()** fuction to the resuting groups.","87f50bc9":"# Getting\n\nSelecting a single column, which yeilds a Series, equivalent to df.A:","c3a89b00":"Transposing your data:","1a701f71":"Grouping by multiple columns forms a hierarchical index, and again we can apply the sum fuction.","97ee64c4":"To drop any rows that have missing data.","eb210871":"**describe()** shows a quick statistic summary of your data:","a985510b":"**DataFrame.to_numpy()** gives a Numpy representation of the underlying data. Note that this can be expensive operation when your DataFrame has columns with different data types, which comes down to a fundamental difference between pandas and Numpy: **Numpy arrays have one dtype for the entire array, while pandas DataFrames have one dtype per column.**\n\nWhwn you call **DataFrame.to_numpy()**, pandas will find the Numpy dtype that can hold **all** of the dtypes in the DataFrame. This may end up being *object* , which requires  casting every value to a Python object.\n\nFor df, our DataFrame of all floating-point values.\n\n**DataFrame.to_numpy()** is fast and doesn't require copying data.","8011551e":"The columns of the resulting DataFrame have different dtypes.","e0aed407":"# Setting\n\nSetting a new column automatically aligns the data by the indexes.","a6117aab":"Sorting by axis:","be56f896":"# Stats\n\nPerforming a descriptive statistic:","1a5ef2a8":"**Take note that DataFrame.to_numpy() does not include the index or column labels in the output.**","c0123381":"Creating A **DataFrame** by passing a dict of objects that can be converted to series-like:","3b4b46f0":"To get boolean mask where values are nan.","c76d8f42":"For df2, the Dataframe with multiple dtypes, **DataFrame.to_numpy()** is relatively expensive.","0b18c50a":"Same operation on the other axis:","d11204dd":"# Object creation\n\nCreating a **Series** by passing a list of values, letting pandas create a default integer index:","18b8a2c1":"# Selection by label\n\nFor getting a cross section using a label:","9f0b71e8":"# Grouping\n\nBy \"Group by\" we are referring to a process involving one or more of the following steps:\n\n* **Splitting** the data into groups based on some criteria.\n* **Applying** a fuction to each group indeoendently.\n* **Combining** the results into a data structure.\n","5b134764":"Filling missing data.","3874c566":"# Apply\nApplying fuctions to the data:","e1c2603d":"# Introduction to Pandas\n\nThis is a short intoduction to pandas, geared mainly for new user.\n\nWe will import as follows:","f7958c5d":"# Missing Data\n\nPandas primarily uses the value np.nan to represent missing data. It is by default not included in computations.\n\nReindexing allows you to change\/add\/delete the index on a specified axis.This returns a copy of the data.","3c8740c4":"If you have reached till here, So i hope you liked my notebook.\n\nIf you learned anything new from this notebook then do give it a upvote.\n\nI'm a rookie and any suggestion in the comment box is highly appreciated.\n\nIf you have any doubt reagrding any part of the notebook, feel free to comment your doubt in the comment box.\n\nThank you!"}}