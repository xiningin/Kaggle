{"cell_type":{"69e293af":"code","6a808827":"code","6a8a907d":"code","f863d764":"code","53c90fed":"code","3e365b6f":"code","03995932":"code","78a1494e":"code","2b32e436":"code","7ab3bbf4":"code","c36af4ce":"code","fe514405":"code","6d44547a":"code","77d757d7":"code","67a9f766":"code","90c41095":"code","bd5f84d8":"code","20e9011f":"code","40da4f3b":"code","07d2189b":"code","57cc163c":"code","fdeebd62":"code","dca17e99":"code","febd763b":"code","9386d108":"code","905edec3":"code","0d6922ea":"code","ddfb6bfb":"code","b3012cd5":"code","999b5b3e":"code","c0222e1c":"code","980e7363":"code","c6f216e3":"code","feead921":"code","02f464ee":"code","f7804b8a":"code","d78b66eb":"code","d2a9c1d0":"code","e259f416":"code","04457b7c":"code","3b4e4448":"code","36eebc13":"code","03967ddd":"code","f8a81d56":"code","fcb34d65":"code","db5c000d":"code","7239f0a8":"code","a7856d88":"code","716618ad":"code","f6f0f2d7":"code","42b0973c":"code","e0d3aa75":"code","8723f9f2":"code","63a5ce99":"code","3a29697d":"code","60650643":"code","bb6f367c":"code","fea637e0":"code","3181143b":"code","493091d6":"code","66c8fe2a":"code","0efc0255":"code","6ef7b37d":"code","d5c5bc96":"code","ed789edd":"code","7b96a7c8":"code","8df7ac38":"code","c51829bc":"code","f1491da7":"code","c4ac2a84":"code","4951638e":"code","ab1ced6f":"code","65143530":"code","56c4f067":"code","2c8d5ebd":"code","c7425ff1":"code","b4f2d7fa":"code","fe219b47":"code","49d85c0f":"code","64a35c39":"code","408be747":"code","8561a1ef":"code","0bdf800b":"code","0c03a5cb":"code","e09984a9":"code","7f02d570":"code","5741a205":"code","5a45d6ed":"code","1e5701cb":"code","36988585":"code","c55c0a64":"code","45d0ccc1":"code","09b5ebe0":"code","1c0cbc66":"code","451cb225":"code","77188541":"code","2b0acb44":"code","c104218c":"code","4692cdc3":"markdown","f1166cbd":"markdown","e7a0a165":"markdown","f407526f":"markdown","1d56e1f1":"markdown","84ee265c":"markdown","c679cc19":"markdown","6d4fb93a":"markdown","9baa6604":"markdown","bb2ef84f":"markdown","1688764f":"markdown","113e95fb":"markdown","f19d3659":"markdown","fe031ea4":"markdown","f7bee4cd":"markdown","82c8b1ca":"markdown","9729a740":"markdown","aa82b214":"markdown","b5b0cf60":"markdown","e59be273":"markdown","78efbabd":"markdown","c0c163db":"markdown","47ba3a51":"markdown","e6e69b00":"markdown","b500b1b0":"markdown","22838793":"markdown","754ad723":"markdown","08cfaf9a":"markdown","59ab7cd6":"markdown","ca1f13aa":"markdown","f08b22c5":"markdown","eb7a1d48":"markdown","1d0bd7d6":"markdown","cb9c9418":"markdown","25266883":"markdown","244bfd2e":"markdown","d30a8b0b":"markdown","11f85e95":"markdown","bd504f4f":"markdown","644272ed":"markdown","f26870c1":"markdown","b861b1f4":"markdown","ffbd98c5":"markdown","9bccc96d":"markdown","144d6374":"markdown","20928d3e":"markdown","a9650d41":"markdown","7bd6fc3b":"markdown"},"source":{"69e293af":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n        \n        \n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6a808827":"import numpy as np \nimport pandas as pd\n\nimport seaborn as sns \nimport matplotlib.pyplot as plt\n\n# Plotly Libraris\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","6a8a907d":"fish=pd.read_csv(\"\/kaggle\/input\/fish-market\/Fish.csv\")\ndf=fish.copy()\ndf.head()","f863d764":"df.info()","53c90fed":"df.shape","3e365b6f":"df.columns","03995932":"df.describe().T","78a1494e":"df.isnull().values.any()","2b32e436":"df.isnull().sum()","7ab3bbf4":"df[df.duplicated() == True]","c36af4ce":"df.corr()","fe514405":"df_Species=df['Species'].value_counts().to_frame().reset_index().rename(columns={'index':'Species','Species':'Count'})\n\nfig = go.Figure(go.Bar(\n    y=df_Species['Species'],x=df_Species['Count'],orientation=\"h\",\n    marker={'color': df_Species['Count'], \n    'colorscale': 'sunsetdark'},  \n    text=df_Species['Count'],\n    textposition = \"outside\",\n))\nfig.update_layout(title_text='Fish Count',xaxis_title=\"Species\",yaxis_title=\"Count\",title_x=0.5)\nfig.show()","6d44547a":"df_Species=df['Species'].value_counts().to_frame().reset_index().rename(columns={'index':'Species','Species':'Count'})\ndf_Species\nfig = go.Figure(go.Bar(\n    x=df_Species['Species'],y=df_Species['Count'],\n    marker={'color': df_Species['Count'], \n    'colorscale': 'Viridis'},  \n    text=df_Species['Count'],\n    textposition = \"outside\",\n))\nfig.update_layout(title_text='Fish Count',xaxis_title=\"Species\",yaxis_title=\"Count\",title_x=0.5)\nfig.show()","77d757d7":"df_Species=df['Species'].value_counts().to_frame().reset_index().rename(columns={'index':'Species','Species':'Count'})\ndf_Species\n\ncolors=['cyan','darkcyan','slateblue3','brown1','cadetblue1','coral2','salmon1']\nfig = go.Figure([go.Pie(labels=df_Species['Species'], values=df_Species['Count'])])\nfig.update_traces(hoverinfo='label+percent', textinfo='percent+value', textfont_size=15,\n                 marker=dict(colors=colors, line=dict(color='#000000', width=2)))\nfig.update_layout(title=\"Fish Categories\",title_x=0.5)\nfig.show()","67a9f766":"df_Species=df['Species'].value_counts().to_frame().reset_index().rename(columns={'index':'Species','Species':'Count'})\ndf_Species\n\nfig = go.Figure(data=[go.Scatter(\n    x=df_Species['Species'], y=df_Species['Count'],\n    mode='markers',\n    marker=dict(\n        color=df_Species['Count'],\n        size=df_Species['Count'],\n        showscale=True\n    ))])\n\nfig.update_layout(title='Fish Categories',xaxis_title=\"Species\",yaxis_title=\"Number Of Fish\",title_x=0.5)\nfig.show()","90c41095":"ax = sns.countplot(x=\"Species\", data=df, palette=\"colorblind\")","bd5f84d8":"ax = sns.countplot(y=\"Species\", data=df, palette=\"colorblind\")","20e9011f":"ax = sns.countplot(x=\"Species\", data=df,\n                   facecolor=(0, 0, 0, 0),\n                   linewidth=5,\n                   edgecolor=sns.color_palette(\"dark\", 7))","40da4f3b":"fig = go.Figure(data=[go.Histogram(x=df['Weight'],  # To get Horizontal plot ,change axis - y=campus_computer\n                                  marker_color=\"Crimson\",\n                       xbins=dict(\n                      start=0, #start range of bin\n                      end=1800,  #end range of bin\n                      size=50   #size of bin\n                      ))])\nfig.update_layout(title=\"Distribution Of Fish Weight in Gram \",xaxis_title=\"Weight\",yaxis_title=\"Counts\",title_x=0.5)\nfig.show()","07d2189b":"fig = go.Figure(data=[go.Histogram(x=df['Height'],  # To get Horizontal plot ,change axis - y=campus_computer\n                                  marker_color=\"LightSalmon\",\n                       xbins=dict(\n                      start=0, #start range of bin\n                      end=20,  #end range of bin\n                      size=1   #size of bin\n                      ))])\nfig.update_layout(title=\"Distribution Of Fish Height in Cm \",xaxis_title=\"Height\",yaxis_title=\"Counts\",title_x=0.5)\nfig.show()","57cc163c":"fig = go.Figure(data=[go.Histogram(x=df['Width'],  # To get Horizontal plot ,change axis - y=campus_computer\n                                  marker_color=\"CadetBlue\",\n                       xbins=dict(\n                      start=0, #start range of bin\n                      end=10,  #end range of bin\n                      size=1   #size of bin\n                      ))])\nfig.update_layout(title=\"Distribution Of Fish Width in Cm \",xaxis_title=\"Width\",yaxis_title=\"Counts\",title_x=0.5)\nfig.show()","fdeebd62":"x=df['Weight']\nfrom scipy.stats import norm\nax = sns.distplot(x, fit=norm, kde=False,color=\"darkviolet\")","dca17e99":"x=df['Height']\nax = sns.distplot(x, fit=norm, kde=False,color=\"Tan\")","febd763b":"x=df['Width']\nax = sns.distplot(x, fit=norm, kde=False,color=\"DimGrey\")","9386d108":"fig = px.scatter_matrix(df,\n    dimensions=[\"Weight\", \"Length1\", \"Length2\", \"Length3\",'Height','Width'],\n    color=\"Species\")\nfig.update_layout(\n    title='Fish Data set',\n    width=800,\n    height=800,\n)\nfig.update_traces(diagonal_visible=False)\nfig.show()","905edec3":"g = sns.pairplot(df, kind='scatter', hue='Species');","0d6922ea":"sns.heatmap(df.corr(), annot=True, cmap='cubehelix');","ddfb6bfb":"fig = go.Figure()\nfig.add_trace(go.Box(y=df['Width'],\n                     marker_color=\"blue\",\n                     name=\"Width\"))\nfig.add_trace(go.Box(y=df['Height'],\n                     marker_color=\"red\",\n                     name=\"Height\"))\nfig.add_trace(go.Box(y=df['Length1'],\n                     marker_color=\"DarkSalmon\",\n                     boxpoints='outliers',\n                     name=\"Length1\"))\nfig.add_trace(go.Box(y=df['Length2'],\n                     marker_color=\"IndianRed\",\n                     boxpoints='outliers',\n                     name=\"Length2\"))\nfig.add_trace(go.Box(y=df['Length3'],\n                     marker_color=\"Tomato\",\n                     boxpoints='outliers',\n                     name=\"Length3\"))\nfig.update_layout(title=\"Distribution\",title_x=0.5)\nfig.show()","b3012cd5":"fig = go.Figure(data=go.Violin(y=df['Weight'], box_visible=True, line_color='black',\n                               meanline_visible=True, fillcolor='lightseagreen', opacity=0.6,\n                               x0='Weight '))\n\nfig.update_layout(yaxis_zeroline=False,title=\"Distribution of Weight \",title_x=0.5)\nfig.show()","999b5b3e":"ax = sns.boxplot(x=\"Species\", y=\"Weight\",\n                 data=df, palette=\"Set3\")","c0222e1c":"ax = sns.swarmplot(x=\"Species\" ,y=\"Weight\", data=df, color=\"DarkKhaki\")","980e7363":"ax = sns.boxplot(x=\"Species\", y=\"Weight\", data=df)\nax = sns.swarmplot(x=\"Species\" ,y=\"Weight\", data=df, color=\".25\")","c6f216e3":"ax = sns.violinplot(x=df[\"Weight\"])","feead921":"ax = sns.violinplot(x=\"Species\", y=\"Width\", data=df, inner=None)\nax = sns.swarmplot(x=\"Species\", y=\"Width\", data=df,\n                   color=\"Purple\", edgecolor=\"gray\")","02f464ee":"df=fish.copy()\ndf.head()","f7804b8a":"df.info()","d78b66eb":"df.describe().T","d2a9c1d0":"df.drop(['Species'],axis=1,inplace=True)\ndf.head(2)","e259f416":"from sklearn.neighbors import LocalOutlierFactor\nclf = LocalOutlierFactor(n_neighbors = 20, contamination = 0.1)","04457b7c":"clf.fit_predict(df)","3b4e4448":"df_scores = clf.negative_outlier_factor_","36eebc13":"df_scores[0:10]","03967ddd":"np.sort(df_scores)[0:20]","f8a81d56":"threshold_value = np.sort(df_scores)[4]\nthreshold_value","fcb34d65":"Outlier_df= df[df_scores < threshold_value]\nindexs=Outlier_df.index\nOutlier_df","db5c000d":"from sklearn.preprocessing import LabelEncoder\nlbe = LabelEncoder()","7239f0a8":"lbe.fit_transform(df[\"Species\"])","a7856d88":"df=fish.copy()\ndf[\"Target\"]=lbe.fit_transform(df[\"Species\"])\ndf.head()","716618ad":"df.info()","f6f0f2d7":"# Kick Outliers\nfor i in indexs:\n    df.drop(i, axis = 0,inplace = True)","42b0973c":"df.info()","e0d3aa75":"df.drop(['Species'],axis=1,inplace=True)","8723f9f2":"df.info()","63a5ce99":"df.describe().T","3a29697d":"y=df['Target']\ny.head(3)","60650643":"X=df.drop('Target',axis=1)\nX.head(3)","bb6f367c":"X = (X - np.min(X)) \/ (np.max(X) - np.min(X)).values\nX.head()","fea637e0":"from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nX_train,X_test,y_train,y_test=train_test_split(X,y,\n                                               test_size=0.2,\n                                               random_state=42)","3181143b":"print('X_train',X_train.shape)\nprint('X_test',X_test.shape)\nprint('y_train',y_train.shape)\nprint('y_test',y_test.shape)","493091d6":"from sklearn.linear_model import LogisticRegression\nloj = LogisticRegression(solver = \"liblinear\")\nloj_model = loj.fit(X_train,y_train)\nloj_model","66c8fe2a":"y_pred_loj = loj_model.predict(X_test)\n","0efc0255":"from sklearn.metrics import confusion_matrix, accuracy_score, classification_report\nconfusion_matrix(y_test, y_pred_loj)","6ef7b37d":"# Cofusion Matrix\ncm = confusion_matrix(y_test, y_pred_loj)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu')","d5c5bc96":"print(\"Training Accuracy :\", loj_model.score(X_train, y_train))\n\nprint(\"Testing Accuracy :\", loj_model.score(X_test, y_test))","ed789edd":"print(classification_report(y_test, y_pred_loj))","7b96a7c8":"cross_val_score(loj_model, X_test, y_test, cv = 10).mean()","8df7ac38":"from sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb_model = nb.fit(X_train, y_train)\nnb_model","c51829bc":"y_pred_nb = nb_model.predict(X_test)","f1491da7":"accuracy_score(y_test, y_pred_nb)","c4ac2a84":"# Cofusion Matrix\ncm = confusion_matrix(y_test, y_pred_nb)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu')","4951638e":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier()\nknn_model = knn.fit(X_train, y_train)\nknn_model","ab1ced6f":"y_pred_knn = knn_model.predict(X_test)","65143530":"accuracy_score(y_test, y_pred_knn)","56c4f067":"print(classification_report(y_test, y_pred_knn))","2c8d5ebd":"knn_params = {\"n_neighbors\": np.arange(1,50)}","c7425ff1":"knn = KNeighborsClassifier()\nknn_cv = GridSearchCV(knn, knn_params, cv=10)\nknn_cv.fit(X_train, y_train)","b4f2d7fa":"scoreList = []\nfor i in range(1,20):\n    knn2 = KNeighborsClassifier(n_neighbors = i)  # n_neighbors means k\n    knn2.fit(X_train, y_train)\n    scoreList.append(knn2.score(X_test, y_test))\n    \nplt.plot(range(1,20), scoreList)\nplt.xticks(np.arange(1,20,1))\nplt.xlabel(\"K value\")\nplt.ylabel(\"Score\")\nplt.show()\n\nacc = max(scoreList)*100\nprint(\"Maximum KNN Score is {:.2f}%\".format(acc))","fe219b47":"knn = KNeighborsClassifier(9)\nknn_tuned = knn.fit(X_train, y_train)","49d85c0f":"y_pred_knn_tuned = knn_tuned.predict(X_test)","64a35c39":"accuracy_score(y_test, y_pred_knn_tuned)","408be747":"# Cofusion Matrix\ncm = confusion_matrix(y_test, y_pred_knn_tuned)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu')","8561a1ef":"from sklearn.svm import SVC\nsvc_model_linear = SVC(kernel = \"linear\").fit(X_train, y_train)","0bdf800b":"y_pred_svc = svc_model_linear.predict(X_test)","0c03a5cb":"accuracy_score(y_test, y_pred_svc)","e09984a9":"# Cofusion Matrix\ncm = confusion_matrix(y_test, y_pred_svc)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu')","7f02d570":"svc_model_rbf = SVC(kernel = \"rbf\").fit(X_train, y_train)","5741a205":"y_pred_svc_model_rbf = svc_model_rbf.predict(X_test)\naccuracy_score(y_test, y_pred_svc_model_rbf)","5a45d6ed":"# Cofusion Matrix\ncm = confusion_matrix(y_test, y_pred_svc_model_rbf)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu')","1e5701cb":"from sklearn.neural_network import MLPClassifier\nmlpc = MLPClassifier().fit(X_train, y_train)","36988585":"y_pred_mlpc = mlpc.predict(X_test)\naccuracy_score(y_test,y_pred_mlpc)","c55c0a64":"# Cofusion Matrix\ncm = confusion_matrix(y_test, y_pred_mlpc)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu')","45d0ccc1":"from sklearn.ensemble import RandomForestClassifier\nrf_model = RandomForestClassifier().fit(X_train, y_train)","09b5ebe0":"y_pred_rf = rf_model.predict(X_test)\naccuracy_score(y_test, y_pred_rf)","1c0cbc66":"# Cofusion Matrix\ncm = confusion_matrix(y_test, y_pred_rf)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu')","451cb225":"Importance = pd.DataFrame({\"Importance\": rf_model.feature_importances_*100},\n                         index = X_train.columns)","77188541":"Importance.sort_values(by = \"Importance\", \n                       axis = 0, \n                       ascending = True).plot(kind =\"barh\", color = \"r\")\n\nplt.xlabel(\"Variable Significance Levels\")","2b0acb44":"models = [\n    knn_model,\n    loj_model,\n    svc_model_linear,\n    svc_model_rbf,\n    nb_model,\n    mlpc,\n    rf_model,\n      \n]\n\nfor model in models:\n    names = model.__class__.__name__\n    y_pred = model.predict(X_test)\n    accuracy = accuracy_score(y_test, y_pred)\n    print(\"-\"*28)\n    print(names + \":\" )\n    print(\"Accuracy: {:.4%}\".format(accuracy))","c104218c":"result = []\n\nresults = pd.DataFrame(columns= [\"Models\",\"Accuracy\"])\n\nfor model in models:\n    names = model.__class__.__name__\n    y_pred = model.predict(X_test)\n    accuracy = accuracy_score(y_test, y_pred)    \n    result = pd.DataFrame([[names, accuracy*100]], columns= [\"Models\",\"Accuracy\"])\n    results = results.append(result)\n    \n    \nsns.barplot(x= 'Accuracy', y = 'Models', data=results, color=\"r\")\nplt.xlabel('Accuracy %')\nplt.title('Accuracy Ratios of Models');  ","4692cdc3":"# <a id='13'>13.Violin Plot Seaborn <\/a>","f1166cbd":"## **Linear**","e7a0a165":"# <a id='11'>11.Box Plot Seaborn <\/a>","f407526f":"# <a id='7'>7.Pairplot With Seaborn <\/a>","1d56e1f1":"* ***Basic Pie*** <br>\n**Purpose** : Displays quantitative representation in pie with label and textinfo. <br>\n**Question** : How many fish species there are in the data set? <br>","84ee265c":"* ***Distplot*** <br>\nFlexibly plot a univariate distribution of observations. <br>","c679cc19":"## **Model Tuning**","6d4fb93a":"# <a id='15'>15.Data Preprocessing <\/a>\n","9baa6604":"# <a id='12'>12.Box Plot With Swarm Plot Seaborn <\/a>","bb2ef84f":"* ***Box Plot*** <br>\n**Purpose** : Display the distribution of a continous variable<br>\n**Question** : What is the Height(Length1,width,Length2,Length3) distribution of the fishes?<br>","1688764f":"Fish market A fish market is a marketplace for selling fish products. It can be dedicated to wholesale trade between fishermen and fish merchants, or to the sale of seafood to individual consumers, or to both. Retail fish markets, a type of wet market, often sell street food as well\n* Species = Species name of fish\n* Weight = Weight of fish in Gram g\n* Length1 = Vertical length in cm\n* Length2 = Diagonal length in cm\n* Length3 = Cross length in cm\n* Height = Height in cm\n* Width = Diagonal width in cm","113e95fb":"# <a id='1'> 1. Importing Libraries and Dataset<\/a>","f19d3659":"* ***Simple Bar Chart*** <br>\n **Purpose** : Displays quantitative representation of a variable.<br>\n **Question** :How many fish species there are in the data set ?<br>","fe031ea4":"* ***Basic Histogram*** <br>\n**Purpose** : Display distribution of a continous variable. <br>\n**Question** : What is the weight(height,width) distribution of the fishes?<br>","f7bee4cd":"## **Rbf**","82c8b1ca":"* ***Scatter Plot*** <br>\nPurpose : Relationship between numerical values with a categorical field.","9729a740":"## <a id='23'> <font color=\"LIGHTSEAGREEN\" size=+2.5><b>End Note<\/b><\/font> <\/a>","aa82b214":" ## <a id='18'> 18.KNN<\/a>","b5b0cf60":"## Box Plot With Swarm Plot","e59be273":"# <a id='14'>14.Violin Plot With Swarm Plot <\/a>","78efbabd":"## **Outliers of the Dataset**\n\n","c0c163db":"# <a id='9'>9.Box Plot With Plotly <\/a>","47ba3a51":"* ***Heatmap*** <br>\nPlot rectangular data as a color-encoded matrix.","e6e69b00":"# <a id='2'> 2.Fish Count With Plotly<\/a>","b500b1b0":"* ***Swarmplot*** <br>\n**Purpose** : Draw a categorical scatterplot with non-overlapping points<br>\n**Question** : What is the weight of the fish in the data set?<br>","22838793":"# <a id='0'> Dataset Introduction <\/a>","754ad723":" ## <a id='21'>21.Random Forest <\/a>","08cfaf9a":" ## <a id='19'> 19.SVC Rbf And SVC Linear   <\/a>","59ab7cd6":"* ***Violin Plot*** <br>\n**Purpose** : Display the distribution of a continous variable<br>\n**Question** : What is the weight(height,width) distribution of the fishes?<br>","ca1f13aa":" ## <a id='17'> 17.Gaussian Naive Bayes<\/a>","f08b22c5":"## Local Outlier Factor\n\n![](http:\/\/upload.wikimedia.org\/wikipedia\/commons\/4\/4e\/LOF-idea.svg)\n*  The local outlier factor is based on a concept of a local density, where locality is given by k nearest neighbors, whose distance is used to estimate the density. By comparing the local density of an object to the local densities of its neighbors, one can identify regions of similar density, and points that have a substantially lower density than their neighbors. These are considered to be outliers.","eb7a1d48":"## <a id='17'> <font size=\"+2\" color=\"LIGHTSEAGREEN\"><b>Reference<\/b><\/font><br>\n* https:\/\/seaborn.pydata.org\/api.html\n* https:\/\/plotly.com\/python\/\n* https:\/\/stackoverflow.com (for coding problems)\n","1d0bd7d6":"## <a id='22'> 22.Comparison of All Models <\/a>","cb9c9418":"## **Normalize**","25266883":"# <a id='10'>10.Violin With Box Plot Plotly <\/a>","244bfd2e":"I hope you enjoyed my kernel.If you like this notebook, an <font color=\"DARKCYAN\"><b>Upvote<\/b><\/font> would be great ! :)\n\nI am new with data science. Please <font color=\"GREEN\"><b>comments<\/b><\/font> me your <font color=\"GREEN\"><b>feedbacks<\/b><\/font> to help me improve myself. \n    \nThanks for your time","d30a8b0b":"# <a id='5'>5. Distribution Of Fish With Weight, Height And Width  With Seaborn <\/a>","11f85e95":"# <a id='6'>6.Columns Relationship With Plotly <\/a>","bd504f4f":"*  ***Simple Bubble Plot*** <br>\nPurpose : Displays quantitative representation highlighting the most occured category with the size of bubble.<br>\nQuestion : How many fish species there are in the data set? <br>","644272ed":"# <a id='3'>3.Fish Count With Seaborn <\/a>","f26870c1":"* ***Count Plot*** <br>\nShow the counts of observations in each categorical bin using bars.<br>\nA count plot can be thought of as a histogram across a categorical, instead of quantitative, variable <br>","b861b1f4":" ## <a id='20'>20.Artificial Neural Networks <\/a>","ffbd98c5":"# Table of contents\n- <a href='#0'>  Dataset Introduction <\/a> \n- <a href='#1'>1. Importing Libraries and Dataset <\/a> \n- <a href='#2'>2. Fish Count With Plotly<\/a> \n- <a href='#3'>3. Fish Count With Seaborn <\/a> \n- <a href='#4'>4. Distribution Of Fish With Weight, Height And Width With Plotly  <\/a> \n- <a href='#5'>5. Distribution Of Fish With Weight, Height And Width With Seaborn <\/a>\n- <a href='#6'>6. Columns Relationship With Plotly <\/a> \n- <a href='#7'>7.Pairplot With Seaborn<\/a> \n- <a href='#8'>8. Heatmap With Seaborn <\/a>\n- <a href='#9'>9. Box Plot With Plotly <\/a>\n- <a href='#10'>10.Violin With Boxplot Plotly <\/a>\n- <a href='#11'>11.Boxplot Seaborn <\/a>\n- <a href='#12'>12.Boxplot With Swarmplot Seaborn <\/a>\n- <a href='#13'>13.Violinplot Seaborn <\/a>\n- <a href='#14'>14.Violin Plot With Swarm Plot <\/a>\n- <a href='#15'>15.Data Preprocessing <\/a>\n- <a href='#16'>16.Logistic Regression <\/a>\n- <a href='#17'>17.Gaussian Naive Bayes <\/a>\n- <a href='#18'>18.KNN <\/a>\n- <a href='#19'>19.SVC Rbf And SVC Linear <\/a>\n- <a href='#20'>20.Artificial Neural Networks <\/a>\n- <a href='#21'>21.Random Forest <\/a>\n- <a href='#22'>22.Comparison of All Models <\/a>\n- <a href='#23'>23.End Note <\/a>","9bccc96d":"\n ## <a id='16'> 16.Logistic Regression<\/a>","144d6374":"<font size=\"+2\" color=\"LIGHTSEAGREEN\"><b>My Other Kernels<\/b><\/font><br>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/basketball-players-stats-data-visualisation\" class=\"btn btn-primary\" style=\"color:white;\">Basketball Players Stats Data Visualisation<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/women-s-football-results-visualization\" class=\"btn btn-primary\" style=\"color:white;\">Women's Football Results Visualization<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/estonia-disaster-visualization-machine-learning\" class=\"btn btn-primary\" style=\"color:white;\">Estonia Disaster Visualization & Machine Learning<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/us-police-shootings-data-visualisation\" class=\"btn btn-primary\" style=\"color:white;\">Us Police Shootings Data Visualisation<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/heart-disease-visualization-and-machine-learning\" class=\"btn btn-primary\" style=\"color:white;\">Heart Disease Visualization And Machine Learning<\/a>\n\n\n\n","20928d3e":"\n# <a id='8'>8.Heatmap With Seaborn <\/a>","a9650d41":"# <a id='4'>4. Distribution Of Fish With Weight, Height And Width  With Plotly <\/a>","7bd6fc3b":"* ***Pairplot*** <br>\nPlot pairwise relationships in a dataset."}}