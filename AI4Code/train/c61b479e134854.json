{"cell_type":{"d7bc3b46":"code","ca0c4032":"code","ae9887c6":"code","8e95ec1c":"code","bd0fbedf":"code","654a6a9e":"code","af9631aa":"code","d03521fa":"code","f1795406":"code","a432cee5":"code","892b8190":"code","c2199011":"code","e707e3b4":"code","0d846115":"code","29e1a29d":"code","6fa0d17d":"code","9e2c1612":"code","3cbeeb79":"code","5279d7af":"code","1e8b8f25":"code","37522326":"code","949e5af8":"code","9b716fc5":"code","b6d9b36d":"code","24b2f865":"code","293da0db":"code","b4a3bd5e":"code","4f2d5213":"code","a1d0e11d":"code","3f2cf59b":"code","b0ab0df5":"code","427c14be":"code","365192d4":"code","743003bf":"code","668b9f52":"code","27f83193":"code","e6f5e3a8":"code","789fae63":"code","e9817b94":"markdown","3119698a":"markdown","0af903dd":"markdown","0527d184":"markdown","6b5aa2a0":"markdown","e19a4e55":"markdown","8fce69bd":"markdown","262f6af1":"markdown","0327505e":"markdown"},"source":{"d7bc3b46":"import pandas as pd\nimport numpy as np\nimport math\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom xgboost import XGBRegressor\nfrom sklearn.preprocessing import LabelEncoder\nimport pandas.util.testing as tm","ca0c4032":"carData = pd.read_csv('..\/input\/vehicle-dataset-from-cardekho\/Car details v3.csv')","ae9887c6":"# Getting first 5 row of the data\ncarData.head()","8e95ec1c":"# Getting last 5 row of the data\ncarData.tail()","bd0fbedf":"# Getting the statistics report from the data\ncarData.describe()","654a6a9e":"# Getting some information about the data frame\ncarData.info()","af9631aa":"# Checking the number of missing values\ncarData.isnull().sum()","d03521fa":"# Checking the shape of data\ncarData.shape","f1795406":"# Cleaning mileage data\ncarData['mileage'] = carData['mileage'].str.replace('kmpl', '').str.replace('km\/kg', '').str.replace(',', '')\n\n# Cleaning engine data\ncarData['engine'] = carData['engine'].str.replace('CC', '').str.replace(',', '')\n\n# Cleaning max_power data\ncarData['max_power'] = carData['max_power'].str.replace('bhp', '').str.replace(',', '')","a432cee5":"# Getting some information about the data frame\ncarData.info()","892b8190":"# Checking first 5 rows of data\ncarData.head()","c2199011":"# Encode\nlabelEncoder = LabelEncoder()","e707e3b4":"carData.head()","0d846115":"carData.info()","29e1a29d":"# Make a correlation data to knowing Value Strength and Direction of Linear Relationship\ncorrelation = carData.corr()","6fa0d17d":"correlation","9e2c1612":"# Setting sns theme\nsns.set_theme(color_codes=True, style='darkgrid', palette='deep', font='sans-serif')","3cbeeb79":"# Constructing a heatmap to understand the correlation\nplt.figure(figsize=(10, 10))\nsns.heatmap(correlation, cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size': 8}, cmap='Blues')","5279d7af":"sns.pairplot(correlation)","1e8b8f25":"sns.jointplot(x=\"year\", y=\"selling_price\", data=carData, kind=\"reg\")","37522326":"sns.lmplot(x=\"year\", y=\"selling_price\", col=\"owner\", data=carData, col_wrap=2, height=3)","949e5af8":"sns.lmplot(x=\"year\", y=\"selling_price\", data=carData, lowess=True)","9b716fc5":"sns.lmplot(x=\"year\", y=\"selling_price\", hue=\"seller_type\", data=carData)","b6d9b36d":"sns.lmplot(x=\"year\", y=\"selling_price\", col=\"seller_type\", data=carData, aspect=.5)","24b2f865":"# Checking the data\ncarData.head()","293da0db":"# Checking the type of data\ncarData.dtypes","b4a3bd5e":"X = carData.drop(['name', 'selling_price', 'torque'], axis=1)\ny = carData['selling_price']","4f2d5213":"trainX, testX, trainY, testY = train_test_split(\n    X, y,\n    test_size=0.1,\n    shuffle=False,\n    random_state=1)","a1d0e11d":"regressor = XGBRegressor(\n    gamma=0,\n    learning_rate=0.1,\n    max_depth=5,\n    n_estimators=1000,\n    n_jobs=16,\n    objective='reg:squarederror',\n    subsample=0.8,\n    scale_pos_weight=0,\n    reg_alpha=0,\n    reg_lambda=1\n)\n\nmodel = regressor.fit(trainX, trainY)","3f2cf59b":"# predict X train\ntrainPredict = model.predict(trainX)\n\n# predict X test  \ntestPredict = model.predict(testX)","b0ab0df5":"# Train X \n\n# R Squared \ntrainRsquared = metrics.r2_score(trainY, trainPredict)\nprint(f'R-Squared : {trainRsquared}')\n\n# Mean Absolute Error\ntrainMAE = metrics.mean_absolute_error(trainY, trainPredict)\nprint(f'MAE : {trainMAE}')\n\n#  Mean Squared Error\ntrainMSE = metrics.mean_squared_error(trainY, trainPredict)\nprint(f'MSE : {trainMSE}')\n\n#  Root Mean Squared Error\ntrainRMSE = math.sqrt(metrics.mean_squared_error(trainY, trainPredict))\nprint(f'RMSE : {trainRMSE}')\n\n# Median\ntrainM = metrics.median_absolute_error(trainY, trainPredict)\nprint(f'Median : {trainM}')","427c14be":"# Test X \n\n# R Squared \ntestRsquared = metrics.r2_score(testY, testPredict)\nprint(f'R-Squared : {testRsquared}')\n\n# Mean Absolute Error\ntestMAE = metrics.mean_absolute_error(testY, testPredict)\nprint(f'MAE : {testMAE}')\n\n#  Mean Squared Error\ntestMSE = metrics.mean_squared_error(testY, testPredict)\nprint(f'MSE : {testMSE}')\n\n#  Root Mean Squared Error\ntestRMSE = math.sqrt(metrics.mean_squared_error(testY, testPredict))\nprint(f'RMSE : {testRMSE}')\n\n# Median\ntestM = metrics.median_absolute_error(testY, testPredict)\nprint(f'Median : {testM}')","365192d4":"# Train Predicted Value & Actual Value\ntest = pd.DataFrame({'Predicted value':trainPredict, 'Actual value':trainY})\nfig= plt.figure(figsize=(16,8))\ntest = test.reset_index()\ntest = test.drop(['index'],axis=1)\nplt.plot(test[:50])\nplt.legend(['Actual value','Predicted value'])","743003bf":"# Test Predicted Value & Actual Value\ntest = pd.DataFrame({'Predicted value':testPredict, 'Actual value':testY})\nfig= plt.figure(figsize=(16,8))\ntest = test.reset_index()\ntest = test.drop(['index'],axis=1)\nplt.plot(test[:50])\nplt.legend(['Actual value','Predicted value'])","668b9f52":"trainOutput = pd.DataFrame({\n    'Train Actual Price': trainY,\n    'Train Predicted Price ': trainPredict})\n\ntrainOutput.to_csv('Train Prediction.csv', index=False)","27f83193":"testOutput = pd.DataFrame({\n    'Train Actual Price': testY,\n    'Train Predicted Price ': testPredict})\n\ntestOutput.to_csv('Test Prediction.csv', index=False)","e6f5e3a8":"trainDataPredict = pd.read_csv('.\/Train Prediction.csv')\ntrainDataPredict","789fae63":"testDataPredict = pd.read_csv('.\/Test Prediction.csv')\ntestDataPredict","e9817b94":"## **Training Model Using XGBRegressor**","3119698a":"## **Prediction**","0af903dd":"## **Load Data**","0527d184":"## **Evaluate Model**","6b5aa2a0":"# **Workflow**\n\n1. Data Collection\n2. Data Cleaning & Checking\n3. Visualize Data & Checking\n4. Splitting Data\n5. Training Model Using XGBRegressor\n6. Evaluate Model\n7. Prediction","e19a4e55":"## **Import Libraries**\n\nImport the important module","8fce69bd":"## **Visualize Data & Checking**","262f6af1":"## **Data Cleaning & Checking**","0327505e":"## **Splitting Data**"}}