{"cell_type":{"7ecaa4b3":"code","bea2ac86":"code","1b9cac58":"code","21d27f7f":"code","7884b2a7":"code","90873f64":"code","c124bb81":"code","47105c64":"code","b66216dd":"code","1dc19453":"code","ab2681a0":"code","fa7319b0":"code","a5386879":"code","e5b6f826":"code","ed1ca672":"code","d6276d96":"code","62e5a161":"code","563ac887":"code","f44bda29":"code","5fda4be4":"markdown","8c39b08f":"markdown","62138d6f":"markdown","2613dbe6":"markdown","0a33f827":"markdown","2984a679":"markdown"},"source":{"7ecaa4b3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom matplotlib import pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bea2ac86":"df = pd.read_csv('\/kaggle\/input\/swedish-motor-insurance\/SwedishMotorInsurance.csv')","1b9cac58":"df.head()","21d27f7f":"df = df[df['Payment']!= 0]\ndf = df[df['Payment'] <=1000000]","7884b2a7":"df['payment_per_insured'] = df['Payment']\/df['Insured']\ndf['payment_per_claims'] = df['Payment']\/df['Claims']\ndf['payment_per_insured_per_claims'] = df['Payment']\/(df['Claims']*df['Insured'])\ndf['insured_per_claims'] = df['Insured']\/df['Claims']\ndf['Payment'] = np.log1p(df['Payment'])","90873f64":"df.corr()","c124bb81":"from sklearn.metrics import r2_score\n\ntrain = df[['Claims','Insured','Payment']]\nx=train.drop('Payment',axis =1)\ny=train['Payment']\nfrom sklearn.model_selection import train_test_split\nx_train , x_test , y_train , y_test = train_test_split(x,y, test_size = 0.2 , random_state = 42)\n\nfrom sklearn.ensemble import RandomForestRegressor\n\nparam_grid = {\n                 'n_estimators': range(10,110,10),\n                 'max_depth': range(2,10)\n             }\nfrom sklearn.model_selection import GridSearchCV\nclf = RandomForestRegressor()\ngrid_clf = GridSearchCV(clf, param_grid, cv=10)\ngrid_clf.fit(x_train, y_train)\n\n","47105c64":"print('train R2:',r2_score(y_train , grid_clf.predict(x_train)),'test R2:',r2_score(y_test, grid_clf.predict(x_test)))","b66216dd":"df['PLS'] = grid_clf.predict(df[['Claims','Insured']])","1dc19453":"df.drop(['Claims','Insured'] , axis = 1 , inplace = True)\ndf['Kilometres'] = df['Kilometres'].apply(lambda x:str(x))\ndf['Zone'] = df['Zone'].apply(lambda x:str(x))\ndf['Bonus'] = df['Bonus'].apply(lambda x:str(x))\ndf['Make'] = df['Make'].apply(lambda x:str(x))\ndf = pd.get_dummies(df)","ab2681a0":"df.head()","fa7319b0":"from sklearn.preprocessing import MinMaxScaler\nfrom sklearn.cluster import KMeans\n\nmms = MinMaxScaler()\nmms.fit(df)\ndata_transformed = mms.transform(df)\n\nSum_of_squared_distances = []\nK = range(1,15)\nfor k in K:\n    km = KMeans(n_clusters=k)\n    km = km.fit(data_transformed)\n    Sum_of_squared_distances.append(km.inertia_)\n    \nplt.plot(K, Sum_of_squared_distances, 'bx-')\nplt.xlabel('k')\nplt.ylabel('Sum_of_squared_distances')\nplt.title('Elbow Method For Optimal k')\nplt.show()","a5386879":"knn = KMeans(n_clusters=5).fit(data_transformed)\ndf['cluster'] = knn.predict(data_transformed)\ncluster_means = df.groupby('cluster')['Payment'].mean().reset_index()\ncluster_means.columns = ['cluster','mean']\ndf = df.merge(cluster_means , on = 'cluster' )\ndf.drop('cluster' , axis = 1 , inplace = True)","e5b6f826":"df.head()","ed1ca672":"df['avg'] = (df['PLS']+df['mean'])\/2","d6276d96":"from sklearn.linear_model import LinearRegression\nx=df.drop(['Payment','PLS','mean'],axis =1)\ny=df['Payment']\n\nx_train , x_test , y_train , y_test = train_test_split(x,y, test_size = 0.2 , random_state = 42)\nsc = StandardScaler()\nscaled_x_train = sc.fit_transform(x_train)\nscaled_x_test = sc.transform(x_test)\n\nmodel = LinearRegression().fit(scaled_x_train , y_train)","62e5a161":"from sklearn.metrics import mean_squared_error as mse\nprint('training RMSE:',np.sqrt(mse(np.expm1(y_train) , np.expm1(model.predict(scaled_x_train)))))\nprint('test RMSE:',np.sqrt(mse(np.expm1(y_test), np.expm1(model.predict(scaled_x_test)))))","563ac887":"print(r2_score(y_test,model.predict(scaled_x_test)))","f44bda29":"print(r2_score(y_train,model.predict(scaled_x_train)))","5fda4be4":"When Claims = 0 Payments = 0 so we can remove those data . And we consider payment > 1000000 as outliers and remove them","8c39b08f":"Creation of new features","62138d6f":"We can see that Claims and Insured are highly correlated with Payment. Hence we can do a regression and create a feature.","2613dbe6":"The average of the Payment from the previous regression and the cluster mean is also used a feature","0a33f827":"We will create clusters based on the data and use the mean of Payment of each cluster the data falls in as a feature","2984a679":"Correlation Matrix"}}