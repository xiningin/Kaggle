{"cell_type":{"ea0c47be":"code","69c8745e":"code","25ff867c":"code","fe83404c":"code","54b2e11f":"code","16716e34":"code","1c757276":"code","a2e0dd10":"code","d3830f30":"code","f54f6ec0":"code","55f9d742":"code","be2f8fcd":"code","a3f1c316":"code","679d273c":"code","a804fe61":"code","a74cdf23":"code","14d97caf":"code","062148f7":"code","92ae7b5c":"code","0ceae17c":"code","9a8eb68d":"code","16f10ce0":"code","578c57db":"code","aacb79ca":"code","96669f48":"code","3f833955":"code","63189779":"code","4040148d":"code","9aba7ab6":"code","f49c5c22":"code","8ec55a69":"code","6dd374f6":"code","8fcb3126":"code","ce90c999":"code","2e789b93":"code","4ebeb9e7":"code","ba1e723c":"code","c8aafc67":"code","fc4230ba":"code","ed41d7c2":"code","d5681aaa":"code","bfda2c69":"code","8484cb69":"code","0d557b96":"code","c08af595":"code","cf9039da":"code","3d256000":"code","f91f5996":"code","4927d490":"markdown","253dd714":"markdown","a2bf61aa":"markdown","24894cb2":"markdown","834dd648":"markdown","96d7b69e":"markdown","bb3a8ae3":"markdown","48f44a75":"markdown","9a109002":"markdown","aa321294":"markdown","f9dcdea4":"markdown","51ce50f4":"markdown","201d5f0f":"markdown","2eb95e5b":"markdown","206edea0":"markdown","830baca1":"markdown","9c7372a5":"markdown","e78d11b0":"markdown","17adb76a":"markdown","e77c8983":"markdown","c380f4e8":"markdown","86f52bd4":"markdown","f5dc7327":"markdown","aff0605b":"markdown","3c0af1eb":"markdown","26c6da8a":"markdown","d4ebf088":"markdown","c6c32680":"markdown","2e450b80":"markdown","7bba7161":"markdown","72ce7c7a":"markdown"},"source":{"ea0c47be":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import accuracy_score,confusion_matrix,classification_report,plot_confusion_matrix\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import RepeatedKFold\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV, cross_val_score, StratifiedKFold, learning_curve, train_test_split, KFold\nfrom scipy.stats import sem\nimport warnings\nfrom imblearn.over_sampling import RandomOverSampler\nfrom sklearn.metrics import precision_recall_curve,plot_precision_recall_curve,plot_roc_curve\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline","69c8745e":"# Import data\ndata = pd.read_csv(\"..\/input\/salary\/income.csv\")","25ff867c":"data.head()","fe83404c":"data.tail()","54b2e11f":"data.info()","16716e34":"data.describe()","1c757276":"data.columns","a2e0dd10":"data.columns = [cols.replace(' ', '') for cols in data.columns]","d3830f30":"data[\"income\"] = [cols.replace(' ', '') for cols in data[\"income\"]]\nsns.countplot(data=data,x='income')","f54f6ec0":"data[\"workclass\"] = [cols.replace(' ', '') for cols in data[\"workclass\"]]\nsns.countplot(data=data,x='workclass')\nplt.xticks(rotation=90)","55f9d742":"data[\"education\"] = [cols.replace(' ', '') for cols in data[\"education\"]]\nsns.countplot(data=data,x='education')\nplt.xticks(rotation=90)","be2f8fcd":"data[\"marital-status\"] = [cols.replace(' ', '') for cols in data[\"marital-status\"]]\nsns.countplot(data=data,x='marital-status')\nplt.xticks(rotation=90)","a3f1c316":"data[\"native-country\"] = [cols.replace(' ', '') for cols in data[\"native-country\"]]\nsns.countplot(data=data,x='native-country')\nplt.xticks(rotation=90)","679d273c":"data[\"occupation\"] = [cols.replace(' ', '') for cols in data[\"occupation\"]]\nsns.countplot(data=data,x='occupation')\nplt.xticks(rotation=90)","a804fe61":"data[\"relationship\"] = [cols.replace(' ', '') for cols in data[\"relationship\"]]\nsns.countplot(data=data,x='relationship')\nplt.xticks(rotation=90)","a74cdf23":"data[\"race\"] = [cols.replace(' ', '') for cols in data[\"race\"]]\nsns.countplot(data=data,x='race')\nplt.xticks(rotation=90)","14d97caf":"data.columns","062148f7":"data[\"sex\"] = [cols.replace(' ', '') for cols in data[\"sex\"]]\nsns.countplot(data=data,x='sex')\nplt.xticks(rotation=90)","92ae7b5c":"data = data.replace('?', np.nan)","0ceae17c":"# Chechking null values \ndef about_data(df):\n    total_missing_values = df.isnull().sum().reset_index()\n    total_missing_values = total_missing_values.rename(columns={'index':'columns',0:'total missing'})\n    total_missing_values['ration of missing'] = total_missing_values['total missing']\/len(df)\n    return total_missing_values\n","9a8eb68d":"about_data(data)","16f10ce0":"data.dropna(inplace=True,axis=0)","578c57db":"about_data(data)","aacb79ca":"sns.pairplot(data,hue='income',corner=True)","96669f48":"plt.figure(figsize=(10,8),dpi=100)\nsns.heatmap(data.corr(),cmap=\"viridis\",annot=True,linewidth=0.5)","3f833955":"sns.boxplot(x='income',y='education-num',data=data,hue=\"sex\")","63189779":"def hist(x,title):\n    plt.figure(figsize=(10,8))\n    ax = sns.distplot(x, kde=False,bins=30)\n    values = np.array([rec.get_height() for rec in ax.patches])\n    norm = plt.Normalize(values.min(), values.max())\n    colors = plt.cm.jet(norm(values))\n    for rec, col in zip(ax.patches,colors):\n        rec.set_color(col)\n    plt.title(title, size=20, color='black')","4040148d":"hist(data.age,\"Age Distribution\")","9aba7ab6":"# Explore Age vs Income\ngrid = sns.FacetGrid(data, col='income')\ngrid = grid.map(sns.distplot, \"age\")","f49c5c22":"hist(data.fnlwgt,\"Financial Weight Distribution\")","8ec55a69":"hist(data[\"education-num\"],\" Education Level Distribution\")","6dd374f6":"plt.figure(figsize=(12,6))\nsns.boxplot(x='race',y='education-num',data=data,hue='workclass')\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)","8fcb3126":"sns.boxplot(x='workclass',y='education-num',data=data)\nplt.xticks(rotation=90)","ce90c999":"cat_columns = ['workclass','education','marital-status', 'occupation', 'relationship', 'race', 'sex','native-country']\ndf_dumy = pd.get_dummies(data, columns = cat_columns)\ndf_dumy","2e789b93":"X = df_dumy.drop(\"income\",axis=1)\ny = df_dumy[\"income\"]","4ebeb9e7":"ros = RandomOverSampler()\nX_ros, y_ros = ros.fit_resample(X, y)","ba1e723c":"X_train, X_test, y_train, y_test = train_test_split(X_ros, y_ros, test_size=0.1, random_state=101)","c8aafc67":"scaler = StandardScaler()","fc4230ba":"scaled_X_train = scaler.fit_transform(X_train)\nscaled_X_test = scaler.transform(X_test)","ed41d7c2":"trees = 100\nmax_features = 3\nresults = []\nnames_of_models = []\n\nmodel_list = [('LR', LogisticRegression()),\n             ('KNN', KNeighborsClassifier()),\n             ('DTC', DecisionTreeClassifier()),\n             ('RFC', RandomForestClassifier(n_estimators=trees,max_features=3))]\n\n\nfor name, model in model_list:\n    kfold = KFold(n_splits=10, random_state=7)\n    cv_results = cross_val_score(model, scaled_X_train, y_train, cv=kfold, scoring='accuracy')\n    results.append(cv_results)\n    names_of_models.append(name)\n    res = \"{}: {} ({})\".format(name, cv_results.mean(), cv_results.std())\n    print(res)","d5681aaa":"parameters_for_testing = {\n\"n_estimators\"    : [50,100,150,200,250] ,\n \"max_features\"        : [1,2,3,4,5],\n}\nmodel = RandomForestClassifier()\n\nkfold = KFold(n_splits=10, random_state=42)\ngrid_cv = GridSearchCV(estimator=model, param_grid=parameters_for_testing, scoring='accuracy', cv=kfold)\nresult = grid_cv.fit(scaled_X_train, y_train)\n\nprint(\"Best: {} using {}\".format(result.best_score_, result.best_params_))\nmeans = result.cv_results_['mean_test_score']\nstds = result.cv_results_['std_test_score']\nparams = result.cv_results_['params']\nfor mean, stdev, param in zip(means, stds, params):\n    print(\"{}  {} with: {}\" .format(mean, stdev, param))","bfda2c69":"tuned_model_rf = RandomForestClassifier(n_estimators=150,max_features=5)\ntuned_model_rf.fit(scaled_X_train, y_train)\npredictions = tuned_model_rf.predict(scaled_X_test)","8484cb69":"accuracy_score(y_test,predictions)","0d557b96":"plot_confusion_matrix(tuned_model_rf,scaled_X_test,y_test)","c08af595":"print(classification_report(y_test,predictions))","cf9039da":"coefs = pd.Series(index=X.columns,data=tuned_model_rf.feature_importances_[0])\ncoefs = coefs.sort_values(ascending=False)[:5]\n\nplt.figure(figsize=(15,10))\nsns.barplot(x=coefs.index,y=coefs.values)\nplt.xticks(rotation=90)","3d256000":"plot_precision_recall_curve(tuned_model_rf,scaled_X_test,y_test)","f91f5996":"plot_roc_curve(tuned_model_rf,scaled_X_test,y_test)","4927d490":"> #### *It seems like Random Forest has highest accuracy. So, lets choose random forest model and tune params*","253dd714":"I will use simple one pandas get dummis and label encoder for \"sex\" column","a2bf61aa":">  ### ReTrain with new tuned parameters","24894cb2":"### There is a little space in column names","834dd648":"### Lets get started\n<div style=\"width:100%;text-align: center;\"> <img align=middle src=\"https:\/\/miro.medium.com\/max\/1109\/1*g9EFIDRGjB3qy-cSHf5-NQ.jpeg\" alt=\"Heat beating\" style=\"height:300px;margin-top:3rem;\"> <\/div>","96d7b69e":"Columns | Definition\n---|---------\n`age` | Age of Persons\n`workclass` | Describe work type \n`fnlwgt` | Financial Weight\n`education` | Person's education level\n`martial status` | Person's martial status\n`occupation` | Person's usual or principal work or business\n`sex` | Gender of Person\n`race` | Person's race\n`capital gain` | Person's capital gain\n`capital loss` | Person's capital loss\n`hours per hour` | Earn per hour\n`native country` | Persons native country\n`income` | Whether <50k or not","bb3a8ae3":"#### One of the biggest problems of banks today is the obligation to calculate the income of their customers. Of course, using classification  machine learning algorithms. In order to calculate all this, we first need some data.","48f44a75":"#### Top 5 feature ","9a109002":"# I HOPE YOU ENJOY \u270c\ud83c\udffb\n<div style=\"width:100%;text-align: center;\"> <img align=middle src=\"https:\/\/i2.wp.com\/www.thirstydaddy.com\/wp-content\/uploads\/2015\/05\/thanks-for-reading.png\" alt=\"Heat beating\" style=\"height:300px;margin-top:3rem;\"> <\/div>","aa321294":"#  Random Forest Model Tune","f9dcdea4":"### In some columns there are a missing value as \"?\" but we should convert actual None .","51ce50f4":"### We need to change categorical values to numeric values. We have 3 choices. First is Labelencoder and second One hot encoder and last is pandas dummy. Approach will be decided by how many unique values column have.","201d5f0f":"### Scale Data","2eb95e5b":"Now we are ready for split data","206edea0":"# Performance","830baca1":"*The goal is to accurately predict whether or not someone is making more or less than $50,000 a year.*,","9c7372a5":"#### Explore DataSet","e78d11b0":"# EDA","17adb76a":"Data imbalance usually reflects an unequal distribution of classes within a dataset. For example, in a income evaluation dataset, most of the income is higher that 50.000dollars. We have very small data for >50K. This leaves us with something like 50:1 ratio between the  >50K and <50K classes.","e77c8983":"### There are 3 columns have null value. we can drop it because of percentage of missing value very low. ","c380f4e8":"# Visualization","86f52bd4":"####  > We are all ready for visualization","f5dc7327":"### Evaluating Curves and AUC","aff0605b":"## Libraries","3c0af1eb":"# Imbalace Problem","26c6da8a":"### Feature Importance","d4ebf088":"### Almost every value has space in it. So lets fix it","c6c32680":"# Can We Predict Income Whether Low or High?","2e450b80":"<div style=\"width:100%;text-align: center;\"> <img align=middle src=\"https:\/\/miro.medium.com\/max\/1838\/1*P93SeDGPGw0MhwvCcvVcXA.png\" alt=\"Heat beating\" style=\"height:300px;margin-top:3rem;\"> <\/div>","7bba7161":"# Model","72ce7c7a":"##### We have a problem here. Our result column has sampling"}}