{"cell_type":{"4f4831a1":"code","cb113df4":"code","cb01a75c":"code","9a93ce33":"code","a33e1ce4":"code","2a49f2d3":"code","bc4ac9ff":"code","b851ed3e":"code","c04941cc":"code","a543833b":"code","052a040e":"code","bc273dc9":"code","b97f9750":"code","0db8d254":"code","31ca3c52":"code","f8e79587":"code","1e8ea24a":"code","00442406":"code","a6aa69f6":"code","82a1e58b":"code","70889018":"code","44be256e":"code","f58a6a56":"code","dce9bd0c":"code","7c2338f0":"code","4d36c51b":"code","0d829c3f":"code","5f8928bb":"code","bed43fc4":"code","02f7d95c":"code","d6d9d789":"code","13846711":"code","860f28c6":"code","5837de02":"code","c7113f0f":"code","6681c0b9":"code","a46a8b27":"code","143fb295":"code","c5719763":"code","cffbc4a8":"code","699b4694":"code","21f9237e":"code","12ed7c33":"code","3a92a999":"code","84ea3bc5":"code","4c56f7ad":"code","9f22e8d5":"code","3ea6cc70":"code","5c678696":"code","f0ac4ac0":"code","77087fc0":"code","f13551d1":"code","aa69e801":"code","5068776c":"code","e8b62487":"code","585c678f":"code","479aa0eb":"code","26a3ccb0":"code","5309cc92":"code","24691fd9":"code","235841eb":"code","c86f5731":"code","56079e24":"code","4064ef07":"code","acc36e53":"code","d5930d56":"code","c12e3c18":"code","b713f556":"code","f915f16b":"code","ab23c1aa":"code","f7e55a31":"code","0f761aa0":"code","973b982a":"code","7136bf07":"code","729f2dc3":"code","1d1b8432":"code","41555008":"code","396097ef":"code","53d4c743":"code","109f1f1f":"code","7593d143":"code","4d3c9821":"code","e2cd1d1b":"code","cd09cca7":"code","0f3dfe78":"code","ebc48780":"code","d81f5a85":"code","5cee7cbd":"code","d8f77411":"code","f5d9c90f":"code","8be042e1":"code","a66835da":"code","07cc8637":"code","d81f8ec2":"code","e53974d9":"code","05a5832f":"code","22bba4d9":"code","a79d45c0":"code","a6a6aa61":"code","6f810846":"code","6bb081fe":"code","19e62891":"code","cc2b1812":"code","4cc2118b":"code","cd04751b":"code","01c25869":"markdown","dad2e53f":"markdown","80de46d9":"markdown","bab48f55":"markdown","ebb8e68a":"markdown","cbbda7d3":"markdown","33054986":"markdown","a1fce4de":"markdown","73855d9b":"markdown","1ff3e747":"markdown","e827183a":"markdown","51ede4d9":"markdown","b3b04265":"markdown","6a66f833":"markdown","8ace34c0":"markdown"},"source":{"4f4831a1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cb113df4":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline ","cb01a75c":"import warnings \nwarnings.filterwarnings('ignore')\npd.set_option('display.max_columns', None)\nplt.style.use(style='ggplot')","9a93ce33":"from sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import accuracy_score, mean_squared_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor","a33e1ce4":"import xgboost as xgb\nimport torch \nimport torch.nn as nn","2a49f2d3":"%config Completer.use_jedi = False","bc4ac9ff":"train_data = pd.read_csv('..\/input\/used-cars-price-prediction\/train-data.csv')\ntest_data = pd.read_csv('..\/input\/used-cars-price-prediction\/test-data.csv')\n","b851ed3e":"train_data.info()","c04941cc":"test_data.info()","a543833b":"test_data.head()","052a040e":"print(train_data.isnull().sum(),'\\n')\nprint(test_data.isnull().sum())","bc273dc9":"train_data.head()","b97f9750":"train_data = train_data.iloc[:,1:]\ntest_data = test_data.iloc[:,1:]","0db8d254":"train_data.head()","31ca3c52":"train_data.describe()","f8e79587":"train_data.shape","1e8ea24a":"train_data.head(15)","00442406":"y = train_data.Year.unique()\ny.sort()\nprint(y)","a6aa69f6":"train_data.shape","82a1e58b":"train_data.info()","70889018":"test_data.info()","44be256e":"train_data.isnull().sum()","f58a6a56":"test_data.isnull().sum()","dce9bd0c":"train_data['Seats'].value_counts()","7c2338f0":"zero_seat = train_data[train_data['Seats'] == 0].index\ntrain_data.drop(zero_seat, axis=0, inplace=True)\n","4d36c51b":"train_data.drop('New_Price', axis=1, inplace=True)\ntest_data.drop('New_Price', axis=1, inplace=True)","0d829c3f":"train_data.head(2)              ","5f8928bb":"train_data.groupby(by = 'Name')['Price'].sum()","bed43fc4":"train_data.groupby(by = 'Engine')['Price'].sum()","02f7d95c":"print(train_data.shape, test_data.shape)\ntrain_data.drop('Name', axis=1, inplace=True)\ntest_data.drop('Name', axis=1, inplace=True)\nprint(train_data.shape, test_data.shape)","d6d9d789":"print(train_data.Location.unique(), '\\n')\nprint(train_data.Location.value_counts())","13846711":"train_data.Mileage.isna()","860f28c6":"train_data['Mileage'] = train_data['Mileage'].fillna('17.0 kmpl')","5837de02":"kmkg = 0\nkmpl = 0\nfor i in train_data.Mileage:\n    if str(i).endswith(\"km\/kg\"):\n        kmkg+=1\n    elif str(i).endswith(\"kmpl\"):\n        kmpl+=1\nprint('The number of rows with Km\/Kg : {} '.format(kmkg))\nprint('The number of rows with kmpl : {} '.format(kmpl))","c7113f0f":"Correct_Mileage= []\nfor i in train_data.Mileage:\n    if str(i).endswith('km\/kg'):\n        i = i[:-6]\n        i = float(i)*1.40\n        Correct_Mileage.append(float(i))\n    elif str(i).endswith('kmpl'):\n        i = i[:-6]\n        #print(i)\n        Correct_Mileage.append(float(i))","6681c0b9":"print(train_data['Mileage'].shape)\nprint(len(Correct_Mileage))","a46a8b27":"train_data['Mileage']=Correct_Mileage","143fb295":"train_data['Mileage'].value_counts()","c5719763":"Correct_Mileage= []\nfor i in test_data.Mileage:\n    if str(i).endswith('km\/kg'):\n        i = i[:-6]\n        i = float(i)*1.40\n        Correct_Mileage.append(float(i))\n    elif str(i).endswith('kmpl'):\n        i = i[:-6]\n        #print(i)\n        Correct_Mileage.append(float(i))","cffbc4a8":"print(test_data['Mileage'].shape)\nprint(len(Correct_Mileage))","699b4694":"test_data['Mileage']=Correct_Mileage","21f9237e":"test_data['Mileage'].value_counts()","12ed7c33":"train_data.head()","3a92a999":"train_data['Engine'].unique()","84ea3bc5":"test_data['Engine'].unique()","4c56f7ad":"train_data['Engine'].value_counts()","9f22e8d5":"train_data.Engine.isnull().sum()","3ea6cc70":"train_data.Engine = train_data.Engine.fillna('1197 CC')\ntest_data['Engine'] = test_data['Engine'].fillna('1197 CC')","5c678696":"for i in train_data.index:\n    \n    train_data['Engine'][i] = train_data['Engine'][i].split()[0]","f0ac4ac0":"for i in test_data.index:\n    \n    test_data['Engine'][i] = test_data['Engine'][i].split()[0]","77087fc0":"train_data.head(20)","f13551d1":"test_data.head(20)","aa69e801":"train_data.info()","5068776c":"train_data.Engine = pd.to_numeric(train_data.Engine)","e8b62487":"train_data.Engine.dtype","585c678f":"train_data.info()","479aa0eb":"train_data.Power.unique()","26a3ccb0":"train_data.Power.value_counts()","5309cc92":"test_data.Power.value_counts()","24691fd9":"train_data.Power.isnull().sum()","235841eb":"train_data.Power = train_data.Power.fillna('74 bhp')\ntest_data.Power = test_data.Power.fillna('74 bhp')","c86f5731":"print(\"value : {} , measure: {}\".format(train_data['Power'][0].split()[0] , train_data['Power'][0].split()[1]))","56079e24":"train_data.Power.isnull().sum()","4064ef07":"for i in train_data.index:\n    train_data['Power'][i] = train_data['Power'][i].split()[0]\n    \nfor i in test_data.index:\n    test_data['Power'][i] = test_data['Power'][i].split()[0]","acc36e53":"train_data['Power'][76] = '74'\nprint(train_data['Power'][76])","d5930d56":"for i in train_data.index:\n    if train_data['Power'][i] == 'null':\n        train_data['Power'][i] = '74'\n\nfor i in test_data.index:\n    if test_data['Power'][i] == 'null':\n        test_data['Power'][i] = '74'\n        ","c12e3c18":"train_data['Power'] = pd.to_numeric(train_data['Power'])\ntest_data['Power'] = pd.to_numeric(test_data['Power'])","b713f556":"train_data['Power'][0:10]","f915f16b":"test_data['Power'][0:10]","ab23c1aa":"train_data['Power'].dtype","f7e55a31":"train_data.Seats.value_counts()","0f761aa0":"#train_data.Seats.isnull().sum()\ntrain_data.Seats = train_data.Seats.fillna(5.0)\ntest_data.Seats = test_data.Seats.fillna(5.0)","973b982a":"train_data.isnull().sum()","7136bf07":"plt.rcParams['figure.figsize'] = [14,8]\nplt.xlabel('Location')\nplt.ylabel('Price')\nsns.barplot(x=\"Location\", y=\"Price\", data=train_data)\nplt.show()","729f2dc3":"plt.rcParams['figure.figsize'] = [14,8]\nplt.xlabel('Year')\nplt.ylabel('Price')\nsns.barplot(x=\"Year\", y=\"Price\", data=train_data)\nplt.show()","1d1b8432":"plt.rcParams['figure.figsize'] = [14,8]\nplt.xlabel('Year')\nplt.ylabel('Price')\nsns.countplot('Year', data=train_data)\nplt.show()","41555008":"train_data.Fuel_Type.value_counts()","396097ef":"plt.rcParams['figure.figsize'] = [8,5]\nplt.xlabel('Fuel Type')\nplt.ylabel('Price')\nsns.barplot(x=\"Fuel_Type\", y=\"Price\", data=train_data)\nplt.show()","53d4c743":"train_data.Transmission.value_counts()","109f1f1f":"plt.rcParams['figure.figsize'] = [5,8]\nplt.xlabel('Transmission')\nplt.ylabel('Price')\nsns.barplot(x=\"Transmission\", y=\"Price\", data=train_data)\nplt.show()","7593d143":"plt.figure(figsize=(12, 9))\nsns.countplot('Year', data=train_data)\nplt.show()","4d3c9821":"plt.figure(figsize=(14,6))\nsns.barplot('Transmission', 'Price', data=train_data)","e2cd1d1b":"plt.figure(figsize=(8, 6))\nsns.countplot('Owner_Type', data=train_data)","cd09cca7":"plt.figure(figsize=(8, 6))\nsns.barplot('Owner_Type', 'Price', data=train_data)","0f3dfe78":"plt.figure(figsize=(8, 6))\nsns.barplot('Seats', 'Price', data=train_data)","ebc48780":"plt.figure(figsize=(8, 6))\nsns.countplot('Seats', data=train_data)","d81f5a85":"post_2014 = pd.DataFrame(columns=['post_2014'])\ntrain_data = pd.concat([train_data, post_2014], axis=1)\ntest_data = pd.concat([test_data, post_2014], axis=1)\n\nfor i in train_data.index:\n    val = train_data['Year'][i]\n    if val > 2014:\n        train_data['post_2014'][i] = 1\n    else:\n        train_data['post_2014'][i] = 0\n    \n\nfor i in test_data.index:\n    val = test_data['Year'][i]\n    if val > 2014:\n        test_data['post_2014'][i] = 1\n    else:\n        test_data['post_2014'][i] = 0\n        ","5cee7cbd":"is_Diesel = pd.DataFrame(columns=['is_Diesel'])\ntrain_data = pd.concat([train_data, is_Diesel], axis=1)\ntest_data = pd.concat([test_data, is_Diesel], axis=1)\n\n\nfor i in train_data.index:\n    value = train_data['Fuel_Type'][i]\n    if value == 'Diesel':\n        train_data['is_Diesel'][i] = 1\n    else:\n        train_data['is_Diesel'][i] = 0\n        \n        \n\nfor i in test_data.index:\n    value = test_data['Fuel_Type'][i]\n    if value == 'Diesel':\n        test_data['is_Diesel'][i] = 1\n    else:\n        test_data['is_Diesel'][i] = 0","d8f77411":"is_automatic = pd.DataFrame(columns=['is_automatic'])\ntrain_data = pd.concat([train_data, is_automatic], axis=1)\ntest_data = pd.concat([test_data, is_automatic], axis=1)\n\nfor i in train_data.index:\n    value = train_data['Transmission'][i]\n    if value == 'Automatic':\n        train_data['is_automatic'][i] = 1\n    else:\n        train_data['is_automatic'][i] = 0\n\n        \nfor i in test_data.index:\n    value = test_data['Transmission'][i]\n    if value == 'Automatic':\n        test_data['is_automatic'][i] = 1\n    else:\n        test_data['is_automatic'][i] = 0","f5d9c90f":"is_2_seats = pd.DataFrame(columns=['is_2_seats'])\ntrain_data = pd.concat([train_data, is_2_seats], axis=1)\ntest_data = pd.concat([test_data, is_2_seats], axis=1)\n\nfor i in train_data.index:\n    value = train_data['Seats'][i]\n    if value == 2:\n        train_data['is_2_seats'][i] = 1\n    else:\n        train_data['is_2_seats'][i] = 0\n        \nfor i in test_data.index:\n    value = test_data['Seats'][i]\n    if value == 2:\n        test_data['is_2_seats'][i] = 1\n    else:\n        test_data['is_2_seats'][i] = 0","8be042e1":"train_data.info()","a66835da":"train_data.info()","07cc8637":"print(train_data.shape)\ntemp = train_data[train_data['Kilometers_Driven'] > 400000].index\ntrain_data.drop(temp, axis=0, inplace=True)\nprint(train_data.shape)","d81f8ec2":"train_data.info()","e53974d9":"for i in ['post_2014', 'is_Diesel', 'is_automatic', 'is_2_seats', \n          'Mileage', 'Engine', 'Power']:\n    print(i)\n    train_data[i] = train_data[i].astype('float64')\n    test_data[i] = test_data[i].astype('float64')","05a5832f":"print(train_data.shape, test_data.shape)\ncat = train_data.select_dtypes(include='object')\n\nfor i in cat.columns:\n    le = LabelEncoder()\n    train_data[i] = le.fit_transform(train_data[i])\n    test_data[i] = le.transform(test_data[i])\n    \nprint(train_data.shape, test_data.shape)","22bba4d9":"train_target = train_data['Price']\ntrain_data.drop('Price', axis=1, inplace=True)\nmeans = train_data.mean()\nstds = train_data.std()\ntrain_data = (train_data - means) \/ stds\ntest_data = (test_data- means) \/ stds","a79d45c0":"print(train_data.shape)\ntrain_data.head()","a6a6aa61":"print(test_data.shape)\ntest_data.head()","6f810846":"X_train, X_dev, y_train, y_dev = train_test_split(train_data, train_target, test_size=0.15, random_state=42)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_dev.shape)\nprint(y_dev.shape)","6bb081fe":"# Linear Regression\nlr = LinearRegression()\nlr.fit(X_train, y_train)\n\n# Predict training data\ny_pred_lr_train = lr.predict(X_train)\n\n# Evaluation training data\nprint(\"MSE on Training Set (Linear Regression):\", mean_squared_error(y_pred_lr_train, y_train))\n\n# Predict dev data\ny_pred_lr_dev = lr.predict(X_dev)\n\n# Evaluation dev data\nprint(\"MSE on Dev Set (Linear Regression):\", mean_squared_error(y_pred_lr_dev, y_dev))","19e62891":"# Decision Tree\ndt = DecisionTreeRegressor(splitter='best', max_depth=5)\ndt.fit(X_train, y_train)\n\n# Predict training data\ny_pred_dt_train = dt.predict(X_train)\n\n# Evaluation training data\nprint(\"MSE on Training Set (Decision Tree):\", mean_squared_error(y_pred_dt_train, y_train))\n\n# Predict dev data\ny_pred_lr_dev = dt.predict(X_dev)\n\n# Evaluation dev data\nprint(\"MSE on Dev Set (Decision Tree):\", mean_squared_error(y_pred_lr_dev, y_dev))","cc2b1812":"# Random Froest\nrf = RandomForestRegressor(n_estimators=20, max_depth=5)\nrf.fit(X_train, y_train)\n\n# Predict training data\ny_pred_rf_train = rf.predict(X_train)\n\n# Evaluation training data\nprint(\"MSE on Training Set (Random Forest):\", mean_squared_error(y_pred_rf_train, y_train))\n\n# Predict dev data\ny_pred_rf_dev = rf.predict(X_dev)\n\n# Evaluation dev data\nprint(\"MSE on Dev Set (Random Forest):\", mean_squared_error(y_pred_rf_dev, y_dev))","4cc2118b":"# Random Forest with Grid Search\nrf = RandomForestRegressor(random_state=42)\n\nparam_grid = {\n    \"criterion\": ['mse', 'mae'],\n    \"n_estimators\": [5, 10, 15, 20, 25, 30],\n    \"max_depth\": [5, 6, 7, 12, 13, 15]\n}\n\nrf_model = GridSearchCV(estimator=rf, cv=5, param_grid=param_grid, verbose=2)\nrf_model.fit(train_data, train_target)\nprint(rf_model.best_score_)\nprint(rf_model.best_estimator_.get_params())","cd04751b":"# XGBoost\nxgbmodel = xgb.XGBRegressor(n_estimators=15, \n                             eta=0.2, gamma=1, max_depth=10, \n                             reg_lambda=1)\nxgbmodel.fit(X_train, y_train)\n\n# Predict training data\ny_pred_xg_train = xgbmodel.predict(X_train)\n\n# Evaluation training data\nprint(\"MSE on Training Set (XGBoost):\", mean_squared_error(y_pred_xg_train, y_train))\n\n# Predict dev data\ny_pred_xg_dev = xgbmodel.predict(X_dev)\n\n# Evaluation dev data\nprint(\"MSE on Dev Set (XGBoost):\", mean_squared_error(y_pred_xg_dev, y_dev))","01c25869":"### Since cc - Cubic Centimeter is a standard for measuring engine displacement, we can ignore 'CC' and just use the numerical part of data provided to us","dad2e53f":"### BHP - brake horse power : A common metric for measuring the power of a vehicle\/machine.","80de46d9":"### NULL values removed completely","bab48f55":"## Model Training","ebb8e68a":"### Removed Outlier value of Kilometers driven.","cbbda7d3":"### All null values have been resolved.","33054986":"## Exploratory Data Analysis","a1fce4de":"## Normalization of various features.","73855d9b":"#### We have found from EDA that cars which are Diesel, Automatic, bought after 2014, has 2 seats, bigger engine and\/or more power are sold with higher price. So we create a new column for all these features.","1ff3e747":"## Feature Engineering - creating new features for making our model more and more accurate and robust.","e827183a":"### Name feature dropped ","51ede4d9":"#### We have to change data type from object to something suitable like - numeric","b3b04265":"### We have mileage in kmpl as well as km\/kg.","6a66f833":"## Data Cleaning","8ace34c0":"## Missing values in train data"}}