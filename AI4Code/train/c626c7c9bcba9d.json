{"cell_type":{"20a92ac0":"code","9f24d2b0":"code","9a24200f":"code","32a527ef":"code","e551afee":"code","cda48ebb":"code","7de19e91":"code","add978c3":"code","4ebb314e":"code","545212b1":"code","9a1a93e5":"code","f37136ae":"code","dde5b06a":"markdown","bbb8c4af":"markdown","63707fb5":"markdown","d5dd0608":"markdown","7bea401f":"markdown","53f4effb":"markdown","c20baca4":"markdown","241296bb":"markdown","a9c8f7d9":"markdown","5ac4e0a1":"markdown","42ffa1cd":"markdown","ee88a98a":"markdown","8921dfdb":"markdown","c0ede077":"markdown"},"source":{"20a92ac0":"import os\nimport pathlib\n\nimport matplotlib\nimport matplotlib.pyplot as plt\n\nimport io\nimport scipy.misc\nimport numpy as np\nfrom six import BytesIO\nfrom PIL import Image, ImageDraw, ImageFont\nfrom six.moves.urllib.request import urlopen\n\nimport tensorflow as tf\nimport tensorflow_hub as hub\n\ntf.get_logger().setLevel('ERROR')","9f24d2b0":"# @title Run this!!\n\ndef load_image_into_numpy_array(path):\n  \"\"\"Load an image from file into a numpy array.\n\n  Puts image into numpy array to feed into tensorflow graph.\n  Note that by convention we put it into a numpy array with shape\n  (height, width, channels), where channels=3 for RGB.\n\n  Args:\n    path: the file path to the image\n\n  Returns:\n    uint8 numpy array with shape (img_height, img_width, 3)\n  \"\"\"\n  image = None\n  if(path.startswith('http')):\n    response = urlopen(path)\n    image_data = response.read()\n    image_data = BytesIO(image_data)\n    image = Image.open(image_data)\n  else:\n    image_data = tf.io.gfile.GFile(path, 'rb').read()\n    image = Image.open(BytesIO(image_data))\n\n  (im_width, im_height) = image.size\n  return np.array(image.getdata()).reshape(\n      (1, im_height, im_width, 3)).astype(np.uint8)\n\n\nALL_MODELS = {\n'CenterNet HourGlass104 512x512' : 'https:\/\/tfhub.dev\/tensorflow\/centernet\/hourglass_512x512\/1',\n'CenterNet HourGlass104 Keypoints 512x512' : 'https:\/\/tfhub.dev\/tensorflow\/centernet\/hourglass_512x512_kpts\/1',\n'CenterNet HourGlass104 1024x1024' : 'https:\/\/tfhub.dev\/tensorflow\/centernet\/hourglass_1024x1024\/1',\n'CenterNet HourGlass104 Keypoints 1024x1024' : 'https:\/\/tfhub.dev\/tensorflow\/centernet\/hourglass_1024x1024_kpts\/1',\n'CenterNet Resnet50 V1 FPN 512x512' : 'https:\/\/tfhub.dev\/tensorflow\/centernet\/resnet50v1_fpn_512x512\/1',\n'CenterNet Resnet50 V1 FPN Keypoints 512x512' : 'https:\/\/tfhub.dev\/tensorflow\/centernet\/resnet50v1_fpn_512x512_kpts\/1',\n'CenterNet Resnet101 V1 FPN 512x512' : 'https:\/\/tfhub.dev\/tensorflow\/centernet\/resnet101v1_fpn_512x512\/1',\n'CenterNet Resnet50 V2 512x512' : 'https:\/\/tfhub.dev\/tensorflow\/centernet\/resnet50v2_512x512\/1',\n'CenterNet Resnet50 V2 Keypoints 512x512' : 'https:\/\/tfhub.dev\/tensorflow\/centernet\/resnet50v2_512x512_kpts\/1',\n'EfficientDet D0 512x512' : 'https:\/\/tfhub.dev\/tensorflow\/efficientdet\/d0\/1',\n'EfficientDet D1 640x640' : 'https:\/\/tfhub.dev\/tensorflow\/efficientdet\/d1\/1',\n'EfficientDet D2 768x768' : 'https:\/\/tfhub.dev\/tensorflow\/efficientdet\/d2\/1',\n'EfficientDet D3 896x896' : 'https:\/\/tfhub.dev\/tensorflow\/efficientdet\/d3\/1',\n'EfficientDet D4 1024x1024' : 'https:\/\/tfhub.dev\/tensorflow\/efficientdet\/d4\/1',\n'EfficientDet D5 1280x1280' : 'https:\/\/tfhub.dev\/tensorflow\/efficientdet\/d5\/1',\n'EfficientDet D6 1280x1280' : 'https:\/\/tfhub.dev\/tensorflow\/efficientdet\/d6\/1',\n'EfficientDet D7 1536x1536' : 'https:\/\/tfhub.dev\/tensorflow\/efficientdet\/d7\/1',\n'SSD MobileNet v2 320x320' : 'https:\/\/tfhub.dev\/tensorflow\/ssd_mobilenet_v2\/2',\n'SSD MobileNet V1 FPN 640x640' : 'https:\/\/tfhub.dev\/tensorflow\/ssd_mobilenet_v1\/fpn_640x640\/1',\n'SSD MobileNet V2 FPNLite 320x320' : 'https:\/\/tfhub.dev\/tensorflow\/ssd_mobilenet_v2\/fpnlite_320x320\/1',\n'SSD MobileNet V2 FPNLite 640x640' : 'https:\/\/tfhub.dev\/tensorflow\/ssd_mobilenet_v2\/fpnlite_640x640\/1',\n'SSD ResNet50 V1 FPN 640x640 (RetinaNet50)' : 'https:\/\/tfhub.dev\/tensorflow\/retinanet\/resnet50_v1_fpn_640x640\/1',\n'SSD ResNet50 V1 FPN 1024x1024 (RetinaNet50)' : 'https:\/\/tfhub.dev\/tensorflow\/retinanet\/resnet50_v1_fpn_1024x1024\/1',\n'SSD ResNet101 V1 FPN 640x640 (RetinaNet101)' : 'https:\/\/tfhub.dev\/tensorflow\/retinanet\/resnet101_v1_fpn_640x640\/1',\n'SSD ResNet101 V1 FPN 1024x1024 (RetinaNet101)' : 'https:\/\/tfhub.dev\/tensorflow\/retinanet\/resnet101_v1_fpn_1024x1024\/1',\n'SSD ResNet152 V1 FPN 640x640 (RetinaNet152)' : 'https:\/\/tfhub.dev\/tensorflow\/retinanet\/resnet152_v1_fpn_640x640\/1',\n'SSD ResNet152 V1 FPN 1024x1024 (RetinaNet152)' : 'https:\/\/tfhub.dev\/tensorflow\/retinanet\/resnet152_v1_fpn_1024x1024\/1',\n'Faster R-CNN ResNet50 V1 640x640' : 'https:\/\/tfhub.dev\/tensorflow\/faster_rcnn\/resnet50_v1_640x640\/1',\n'Faster R-CNN ResNet50 V1 1024x1024' : 'https:\/\/tfhub.dev\/tensorflow\/faster_rcnn\/resnet50_v1_1024x1024\/1',\n'Faster R-CNN ResNet50 V1 800x1333' : 'https:\/\/tfhub.dev\/tensorflow\/faster_rcnn\/resnet50_v1_800x1333\/1',\n'Faster R-CNN ResNet101 V1 640x640' : 'https:\/\/tfhub.dev\/tensorflow\/faster_rcnn\/resnet101_v1_640x640\/1',\n'Faster R-CNN ResNet101 V1 1024x1024' : 'https:\/\/tfhub.dev\/tensorflow\/faster_rcnn\/resnet101_v1_1024x1024\/1',\n'Faster R-CNN ResNet101 V1 800x1333' : 'https:\/\/tfhub.dev\/tensorflow\/faster_rcnn\/resnet101_v1_800x1333\/1',\n'Faster R-CNN ResNet152 V1 640x640' : 'https:\/\/tfhub.dev\/tensorflow\/faster_rcnn\/resnet152_v1_640x640\/1',\n'Faster R-CNN ResNet152 V1 1024x1024' : 'https:\/\/tfhub.dev\/tensorflow\/faster_rcnn\/resnet152_v1_1024x1024\/1',\n'Faster R-CNN ResNet152 V1 800x1333' : 'https:\/\/tfhub.dev\/tensorflow\/faster_rcnn\/resnet152_v1_800x1333\/1',\n'Faster R-CNN Inception ResNet V2 640x640' : 'https:\/\/tfhub.dev\/tensorflow\/faster_rcnn\/inception_resnet_v2_640x640\/1',\n'Faster R-CNN Inception ResNet V2 1024x1024' : 'https:\/\/tfhub.dev\/tensorflow\/faster_rcnn\/inception_resnet_v2_1024x1024\/1',\n'Mask R-CNN Inception ResNet V2 1024x1024' : 'https:\/\/tfhub.dev\/tensorflow\/mask_rcnn\/inception_resnet_v2_1024x1024\/1'\n}\n\nIMAGES_FOR_TEST = {\n  'Beach' : 'models\/research\/object_detection\/test_images\/image2.jpg',\n  'Dogs' : 'models\/research\/object_detection\/test_images\/image1.jpg',\n  # By Heiko Gorski, Source: https:\/\/commons.wikimedia.org\/wiki\/File:Naxos_Taverna.jpg\n  'Naxos Taverna' : 'https:\/\/upload.wikimedia.org\/wikipedia\/commons\/6\/60\/Naxos_Taverna.jpg',\n  # Source: https:\/\/commons.wikimedia.org\/wiki\/File:The_Coleoptera_of_the_British_islands_(Plate_125)_(8592917784).jpg\n  'Beatles' : 'https:\/\/upload.wikimedia.org\/wikipedia\/commons\/1\/1b\/The_Coleoptera_of_the_British_islands_%28Plate_125%29_%288592917784%29.jpg',\n  # By Am\u00e9rico Toledano, Source: https:\/\/commons.wikimedia.org\/wiki\/File:Biblioteca_Maim%C3%B3nides,_Campus_Universitario_de_Rabanales_007.jpg\n  'Phones' : 'https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/0\/0d\/Biblioteca_Maim%C3%B3nides%2C_Campus_Universitario_de_Rabanales_007.jpg\/1024px-Biblioteca_Maim%C3%B3nides%2C_Campus_Universitario_de_Rabanales_007.jpg',\n  # Source: https:\/\/commons.wikimedia.org\/wiki\/File:The_smaller_British_birds_(8053836633).jpg\n  'Birds' : 'https:\/\/upload.wikimedia.org\/wikipedia\/commons\/0\/09\/The_smaller_British_birds_%288053836633%29.jpg',\n}\n\nCOCO17_HUMAN_POSE_KEYPOINTS = [(0, 1),\n (0, 2),\n (1, 3),\n (2, 4),\n (0, 5),\n (0, 6),\n (5, 7),\n (7, 9),\n (6, 8),\n (8, 10),\n (5, 6),\n (5, 11),\n (6, 12),\n (11, 12),\n (11, 13),\n (13, 15),\n (12, 14),\n (14, 16)]","9a24200f":"# Clone the tensorflow models repository\n!git clone --depth 1 https:\/\/github.com\/tensorflow\/models","32a527ef":"%%bash\nsudo apt install -y protobuf-compiler\ncd models\/research\/\nprotoc object_detection\/protos\/*.proto --python_out=.\ncp object_detection\/packages\/tf2\/setup.py .\npython -m pip install .\n","e551afee":"from object_detection.utils import label_map_util\nfrom object_detection.utils import visualization_utils as viz_utils\nfrom object_detection.utils import ops as utils_ops\n\n%matplotlib inline","cda48ebb":"PATH_TO_LABELS = '.\/models\/research\/object_detection\/data\/mscoco_label_map.pbtxt'\ncategory_index = label_map_util.create_category_index_from_labelmap(PATH_TO_LABELS, use_display_name=True)","7de19e91":"#@title Model Selection { display-mode: \"form\", run: \"auto\" }\nmodel_display_name = 'CenterNet HourGlass104 Keypoints 512x512' # @param ['CenterNet HourGlass104 512x512','CenterNet HourGlass104 Keypoints 512x512','CenterNet HourGlass104 1024x1024','CenterNet HourGlass104 Keypoints 1024x1024','CenterNet Resnet50 V1 FPN 512x512','CenterNet Resnet50 V1 FPN Keypoints 512x512','CenterNet Resnet101 V1 FPN 512x512','CenterNet Resnet50 V2 512x512','CenterNet Resnet50 V2 Keypoints 512x512','EfficientDet D0 512x512','EfficientDet D1 640x640','EfficientDet D2 768x768','EfficientDet D3 896x896','EfficientDet D4 1024x1024','EfficientDet D5 1280x1280','EfficientDet D6 1280x1280','EfficientDet D7 1536x1536','SSD MobileNet v2 320x320','SSD MobileNet V1 FPN 640x640','SSD MobileNet V2 FPNLite 320x320','SSD MobileNet V2 FPNLite 640x640','SSD ResNet50 V1 FPN 640x640 (RetinaNet50)','SSD ResNet50 V1 FPN 1024x1024 (RetinaNet50)','SSD ResNet101 V1 FPN 640x640 (RetinaNet101)','SSD ResNet101 V1 FPN 1024x1024 (RetinaNet101)','SSD ResNet152 V1 FPN 640x640 (RetinaNet152)','SSD ResNet152 V1 FPN 1024x1024 (RetinaNet152)','Faster R-CNN ResNet50 V1 640x640','Faster R-CNN ResNet50 V1 1024x1024','Faster R-CNN ResNet50 V1 800x1333','Faster R-CNN ResNet101 V1 640x640','Faster R-CNN ResNet101 V1 1024x1024','Faster R-CNN ResNet101 V1 800x1333','Faster R-CNN ResNet152 V1 640x640','Faster R-CNN ResNet152 V1 1024x1024','Faster R-CNN ResNet152 V1 800x1333','Faster R-CNN Inception ResNet V2 640x640','Faster R-CNN Inception ResNet V2 1024x1024','Mask R-CNN Inception ResNet V2 1024x1024']\nmodel_handle = ALL_MODELS[model_display_name]\n\nprint('Selected model:'+ model_display_name)\nprint('Model Handle at TensorFlow Hub: {}'.format(model_handle))","add978c3":"print('loading model...')\nhub_model = hub.load(model_handle)\nprint('model loaded!')","4ebb314e":"#@title Image Selection (don't forget to execute the cell!) { display-mode: \"form\"}\nselected_image = 'Beach' # @param ['Beach', 'Dogs', 'Naxos Taverna', 'Beatles', 'Phones', 'Birds']\nflip_image_horizontally = False #@param {type:\"boolean\"}\nconvert_image_to_grayscale = False #@param {type:\"boolean\"}\n\nimage_path = IMAGES_FOR_TEST[selected_image]\nimage_np = load_image_into_numpy_array(image_path)\n\n# Flip horizontally\nif(flip_image_horizontally):\n  image_np[0] = np.fliplr(image_np[0]).copy()\n\n# Convert image to grayscale\nif(convert_image_to_grayscale):\n  image_np[0] = np.tile(\n    np.mean(image_np[0], 2, keepdims=True), (1, 1, 3)).astype(np.uint8)\n\nplt.figure(figsize=(24,32))\nplt.imshow(image_np[0])\nplt.show()","545212b1":"# running inference\nresults = hub_model(image_np)\n\n# different object detection models have additional results\n# all of them are explained in the documentation\nresult = {key:value.numpy() for key,value in results.items()}\nprint(result.keys())","9a1a93e5":"label_id_offset = 0\nimage_np_with_detections = image_np.copy()\n\n# Use keypoints if available in detections\nkeypoints, keypoint_scores = None, None\nif 'detection_keypoints' in result:\n  keypoints = result['detection_keypoints'][0]\n  keypoint_scores = result['detection_keypoint_scores'][0]\n\nviz_utils.visualize_boxes_and_labels_on_image_array(\n      image_np_with_detections[0],\n      result['detection_boxes'][0],\n      (result['detection_classes'][0] + label_id_offset).astype(int),\n      result['detection_scores'][0],\n      category_index,\n      use_normalized_coordinates=True,\n      max_boxes_to_draw=200,\n      min_score_thresh=.30,\n      agnostic_mode=False,\n      keypoints=keypoints,\n      keypoint_scores=keypoint_scores,\n      keypoint_edges=COCO17_HUMAN_POSE_KEYPOINTS)\n\nplt.figure(figsize=(24,32))\nplt.imshow(image_np_with_detections[0])\nplt.show()","f37136ae":"# Handle models with masks:\nimage_np_with_mask = image_np.copy()\n\nif 'detection_masks' in result:\n  # we need to convert np.arrays to tensors\n  detection_masks = tf.convert_to_tensor(result['detection_masks'][0])\n  detection_boxes = tf.convert_to_tensor(result['detection_boxes'][0])\n\n  # Reframe the the bbox mask to the image size.\n  detection_masks_reframed = utils_ops.reframe_box_masks_to_image_masks(\n            detection_masks, detection_boxes,\n              image_np.shape[1], image_np.shape[2])\n  detection_masks_reframed = tf.cast(detection_masks_reframed > 0.5,\n                                      tf.uint8)\n  result['detection_masks_reframed'] = detection_masks_reframed.numpy()\n\nviz_utils.visualize_boxes_and_labels_on_image_array(\n      image_np_with_mask[0],\n      result['detection_boxes'][0],\n      (result['detection_classes'][0] + label_id_offset).astype(int),\n      result['detection_scores'][0],\n      category_index,\n      use_normalized_coordinates=True,\n      max_boxes_to_draw=200,\n      min_score_thresh=.30,\n      agnostic_mode=False,\n      instance_masks=result.get('detection_masks_reframed', None),\n      line_thickness=8)\n\nplt.figure(figsize=(24,32))\nplt.imshow(image_np_with_mask[0])\nplt.show()","dde5b06a":"## Loading an image\n\nLet's try the model on a simple image. To help with this, we provide a list of test images.\n\nHere are some simple things to try out if you are curious:\n* Try running inference on your own images, just upload them to colab and load the same way it's done in the cell below.\n* Modify some of the input images and see if detection still works.  Some simple things to try out here include flipping the image horizontally, or converting to grayscale (note that we still expect the input image to have 3 channels).\n\n**Be careful:** when using images with an alpha channel, the model expect 3 channels images and the alpha will count as a 4th.\n\n","bbb8c4af":"Intalling the Object Detection API","63707fb5":"## Doing the inference\n\nTo do the inference we just need to call our TF Hub loaded model.\n\nThings you can try:\n* Print out `result['detection_boxes']` and try to match the box locations to the boxes in the image.  Notice that coordinates are given in normalized form (i.e., in the interval [0, 1]).\n* inspect other output keys present in the result. A full documentation can be seen on the models documentation page (pointing your browser to the model handle printed earlier)","d5dd0608":"Now we can import the dependencies we will need later","7bea401f":"### Load label map data (for plotting).\n\nLabel maps correspond index numbers to category names, so that when our convolution network predicts `5`, we know that this corresponds to `airplane`.  Here we use internal utility functions, but anything that returns a dictionary mapping integers to appropriate string labels would be fine.\n\nWe are going, for simplicity, to load from the repository that we loaded the Object Detection API code","53f4effb":"## Loading the selected model from TensorFlow Hub\n\nHere we just need the model handle that was selected and use the Tensorflow Hub library to load it to memory.\n","c20baca4":"## [Optional]\n\nAmong the available object detection models there's Mask R-CNN and the output of this model allows instance segmentation.\n\nTo visualize it we will use the same method we did before but adding an aditional parameter: `instance_masks=output_dict.get('detection_masks_reframed', None)`\n","241296bb":"## Visualization tools\n\nTo visualize the images with the proper detected boxes, keypoints and segmentation, we will use the TensorFlow Object Detection API. To install it we will clone the repo.","a9c8f7d9":"### More models\n[This](https:\/\/tfhub.dev\/tensorflow\/collections\/object_detection\/1) collection contains TF 2 object detection models that have been trained on the COCO 2017 dataset. [Here](https:\/\/tfhub.dev\/s?module-type=image-object-detection) you can find all object detection models that are currently hosted on [tfhub.dev](tfhub.dev).","5ac4e0a1":"# TensorFlow Hub Object Detection Colab\n\nWelcome to the TensorFlow Hub Object Detection Colab! This notebook will take you through the steps of running an \"out-of-the-box\" object detection model on images.","42ffa1cd":"## Visualizing the results\n\nHere is where we will need the TensorFlow Object Detection API to show the squares from the inference step (and the keypoints when available).\n\nthe full documentation of this method can be seen [here](https:\/\/github.com\/tensorflow\/models\/blob\/master\/research\/object_detection\/utils\/visualization_utils.py)\n\nHere you can, for example, set `min_score_thresh` to other values (between 0 and 1) to allow more detections in or to filter out more detections.","ee88a98a":"## Imports and Setup\n\nLets start with the base imports.","8921dfdb":"## Build a detection model and load pre-trained model weights\n\nHere we will choose witch Object Detection model we will use.\nSelect the architecture and it will be loaded automatically.\nIf you want to change the model to try other architectures later, just change the next cell and execute following ones.\n\n**Tip:** if you want to read more details about the selected model, you can follow the link (model handle) and read aditional documentation on TF Hub. After you select a model, we will print the handle to make it easier.","c0ede077":"## Utilities\n\nRun the following cell to create some utils that will be needed later:\n\n- Helper method to load an image\n- Map of Model Name to TF Hub handle\n- List of tuples with Human Keypoints for the COCO 2017 dataset. This is needed for models with keyponts."}}