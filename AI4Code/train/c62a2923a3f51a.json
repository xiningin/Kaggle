{"cell_type":{"07be4af1":"code","1572e720":"code","52f0e0f9":"code","38e639f7":"code","4c15f4c5":"code","6f93d28a":"code","ccb6c7e3":"code","650fccce":"code","09bfcdfc":"code","cb28c5e4":"code","80bca222":"code","0526ac20":"code","9bf7a59f":"code","01db0d97":"code","137ecdee":"code","4bc1bac6":"code","79347580":"code","9eddb4b4":"code","7c8ebded":"markdown","22c1eb11":"markdown","752aa842":"markdown","db1dea3b":"markdown","c704e3ed":"markdown","d8a0a9dd":"markdown","c48db422":"markdown","f66f6888":"markdown","82beb1eb":"markdown","c1c20d64":"markdown","b5fa58d2":"markdown","e7729efc":"markdown","12571fda":"markdown","edabcafe":"markdown","fe4a632e":"markdown","9973f922":"markdown","0a42bd5c":"markdown","32e713d9":"markdown","f8c570e0":"markdown","55abfa04":"markdown","b3c5793b":"markdown","525f7f6b":"markdown","8220e2dd":"markdown","2fdee59b":"markdown","73817534":"markdown","26ecc586":"markdown","656455d6":"markdown","c4f5e9d5":"markdown","06f65cfe":"markdown","d89206fe":"markdown","05f78d8e":"markdown","2d166c6f":"markdown","01ffd7c1":"markdown","1a4e2680":"markdown","c07fda89":"markdown"},"source":{"07be4af1":"import numpy as np\nimport os\nimport re\nimport math\nimport traceback\nimport random\nfrom tqdm import tqdm\nimport time\nimport dill\n\n# \u8bed\u6599\u5e93\nprint(os.listdir(\"..\/input\"))","1572e720":"def big_word(str):\n    '''\n    \u5c06\u590d\u5408\u8bcd\u5408\u6210\u4e00\u4e2a\u8bcd\n    '''\n    if re.search(r'\\[[a-z0-9\\u4e00-\\u9fa5]*\/[a-z0-9\\u4e00-\\u9fa5]*( [a-z0-9\\u4e00-\\u9fa5]*\/[a-z0-9\\u4e00-\\u9fa5]*)*\\]',\n                str) is not None:\n        # \u6709\u590d\u5408\u8bcd\uff0c\u5408\u6210\n        rep = re.compile(r'\\[[a-z0-9\\u4e00-\\u9fa5]*\/[a-z0-9\\u4e00-\\u9fa5]*( [a-z0-9\\u4e00-\\u9fa5]*\/[a-z0-9\\u4e00-\\u9fa5]*)*\\]\/[a-z0-9]*')\n        reV = re.search(rep, str)\n        while reV is not None:\n            items = reV.group()\n            tag = re.search(r'\/\\w* ?$', items).group().strip()\n            items = re.sub(r'\/\\w* ?', '', items)\n            sub_items = items[1:-1]\n            str = re.sub(rep, sub_items + tag, str, count=1)\n            reV = re.search(rep, str.strip())\n            \n    return str","52f0e0f9":"def corpus_split():\n    f_train = open('train_WS.txt', 'w+', encoding='utf-8')\n    f_test = open('test_WS.txt', 'w+', encoding='utf-8')\n    for line in open('..\/input\/peoplesdaily2014\/PeoplesDaily2014.txt', 'r', encoding='utf-8'):\n        if random.random() < 0.1:\n            f_test.write(line)\n        else:\n            f_train.write(line)\n    f_train.close()\n    f_test.close()\n    \n    f = open('train_WS.txt', 'r', encoding='utf-8')\n    for i in range(5):\n        print(f.readline().strip())\n        \ncorpus_split()","38e639f7":"f1 = open('test_word_sep.txt', 'w+', encoding='utf-8')\nfor line in open('.\/test_WS.txt', 'r', encoding='utf-8'):\n    line = big_word(line).strip().split(' ')\n    no_tag_line = []\n    for word in line:\n        items = word.split('\/')\n        if word.count('\/') != 1 or len(items) != 2:\n            continue\n        no_tag_line.append(items[0])\n    f1.write(' '.join(no_tag_line) + ' \\n')\nf1.close\n    \nf = open('test_word_sep.txt', 'r', encoding='utf-8')\nfor i in range(5):\n    print(f.readline().strip())","4c15f4c5":"def loadDictionary(path):\n    '''\n    \u52a0\u8f7d\u8bcd\u5178\n    '''\n    dictionary = set()\n    maximum = 0\n        # \u4eba\u6c11\u65e5\u62a52014\u8bed\u6599\u5e93\n    for line in open('..\/input\/peoplesdaily2014\/PeoplesDaily2014.txt', 'r', encoding='utf8'):\n            if not line:\n                continue\n            line = big_word(line)\n            for word in line.strip().split():\n                items = word.split('\/')\n                if word.count('\/') != 1 or len(items) < 2:\n                    continue\n                dictionary.add(items[0])\n            if len(items[0]) > maximum:\n                maximum = len(items[0])\n    return dictionary, maximum","6f93d28a":"class MMM(object):\n    '''\n    \u6b63\u5411\u6700\u5927\u5339\u914d\n    '''\n    def __init__(self, dic_path):\n        self.dictionary = set()\n        self.maximum = 0\n        #\u8bfb\u53d6\u8bcd\u5178\n        self.dictionary, self.maximum = loadDictionary(dic_path)\n    def cut(self, text):\n        result = []\n        text_len = len(text)\n        index = 0\n        while index != text_len:\n            for size in range(self.maximum, 0, -1):\n                if text_len - (size + index) < 0:\n                    continue\n                piece = text[index:index+size]\n                if piece in self.dictionary:\n                    word = piece\n                    result.append(word)\n                    index += size\n                    break\n            else:\n                result.append(text[index] + '(\u672a\u767b\u5f55\u8bcd)')\n                index += 1\n        return result","ccb6c7e3":"class RMM(object):\n    '''\n    \u9006\u5411\u6700\u5927\u5339\u914d\n    '''\n    def __init__(self, dic_path):\n        #\u8bfb\u53d6\u8bcd\u5178\n        self.dictionary, self.maximum = loadDictionary(dic_path)\n        print(\"maximum:\",self.maximum)\n    def cut(self, text):\n        result = []\n        index = len(text)\n        while index > 0:\n            for size in range(self.maximum, 0, -1):\n                if index - size < 0:\n                    continue\n                piece = text[(index - size):index]\n                if piece in self.dictionary:\n                    word = piece\n                    result.append(word)\n                    index -= size\n                    break\n            else:\n                result.append(text[index - 1] + '(\u672a\u767b\u5f55\u8bcd)')\n                index -= 1\n        return result[::-1]","650fccce":"# \u6d4b\u8bd5\u53c2\u6570\nfilePath = 'train_WS.txt'\ntext = '\u7701\u536b\u751f\u8ba1\u751f\u59d4\u8fd1\u65e5\u53d1\u5e03\u6211\u7701\u75be\u75c5\u5e94\u6025\u6551\u52a9\u57fa\u91d1\u5b9e\u65bd\u7ba1\u7406\u529e\u6cd5\u3002'\n\n# \u6b63\u5411\u6700\u5927\u5339\u914d\u6a21\u578b\nmmm = MMM(filePath)\n# \u9006\u5411\u6700\u5927\u5339\u914d\u6a21\u578b\nrmm = RMM(filePath)\n\n# \u8bcd\u5e93\u5927\u5c0f\nprint('\u6b63\u5411\u6700\u5927\u5339\u914d\u6a21\u578b\u8bcd\u5e93\u5927\u5c0f\uff1a{}'.format(len(mmm.dictionary)))\nprint('\u9006\u5411\u6700\u5927\u5339\u914d\u6a21\u578b\u8bcd\u5e93\u5927\u5c0f\uff1a{}'.format(len(rmm.dictionary)))\n\n# \u5207\u5206\nprint('\u6b63\u5411\u6700\u5927\u5339\u914d\u6a21\u578b\u7684\u5206\u8bcd\u7ed3\u679c\uff1a{}'.format(mmm.cut(text)))\nprint('\u9006\u5411\u6700\u5927\u5339\u914d\u6a21\u578b\u7684\u5206\u8bcd\u7ed3\u679c\uff1a{}'.format(rmm.cut(text)))","09bfcdfc":"# \u751f\u6210\u8bcd\u548c\u8bcd\u6027\u7684id\ndef count_word_and_tag(str):\n    global word2id, tag2id, count_word, count_tag\n    for word in big_word(line).strip().split():\n        items = word.split('\/')\n        if word.count('\/') != 1 or len(items) < 2:\n            continue\n        if items[0] not in word2id:\n            word2id[items[0]] = count_word\n            count_word += 1\n        if items[1] not in tag2id:\n            tag2id[items[1]] = count_tag\n            count_tag += 1\n\n#\u83b7\u53d6\u8bcd\u5178\u4e0e\u8bcd\u6027tag\u7684id\nword2id,tag2id = {},{}\ncount_word = 0\ncount_tag = 0\nfor line in open(filePath):\n    count_word_and_tag(line.strip())\n\n# \u751f\u6210\u53cd\u5411\u5b57\u5178\u7d22\u5f15\nid2word = {value:key for key,value in word2id.items()}\nid2tag = {value:key for key,value in tag2id.items()}\n\n# \u663e\u793a\u6240\u6709\u8bcd\u6027\u6807\u7b7e\nfor i in range(count_tag):\n    print(id2tag[i] + ' ', end='')","cb28c5e4":"class Viterbi(object):\n    def __init__(self):\n        # HMM\u53c2\u6570\n        self.N = len(tag2id)\n        self.M = len(word2id)\n        # \u521d\u59cb\u77e9\u9635\n        self.init_p = np.full(self.N, 1e-9)\n        # \u53d1\u5c04\u77e9\u9635\n        self.emit_p = np.full((self.N,self.M), 1e-9)\n        # \u8f6c\u79fb\u77e9\u9635\n        self.tran_p = np.full((self.N,self.N), 1e-9)\n    \n    \n    def train(self, filePath):\n        # \u7edf\u8ba1\u4e09\u4e2a\u6982\u7387\u77e9\u9635\u7684\u9891\u6570\n        for line in open(filePath):\n            pre_tag = ''# \u8868\u793a\u53e5\u9996\n            for word in big_word(line).strip().split():\n                items = word.split('\/')\n                # \u8bed\u6599\u5e93\u4e2d\u6709\u4e0d\u5408\u89c4\u8303\u7684\u6807\u6ce8\n                if word.count('\/') != 1 or len(items) != 2:\n                    continue\n                try:\n                    wordID = word2id[items[0]]\n                    tagID = tag2id[items[1]]\n                except KeyError:\n                    continue\n                # \u53e5\u9996\n                if pre_tag == '':\n                    self.init_p[tagID] += 1\n                    self.emit_p[tagID][wordID] += 1\n                else:\n                    # \u975e\u53e5\u9996\n                    self.emit_p[tagID][wordID] += 1\n                    self.tran_p[tag2id[pre_tag]][tagID] += 1\n                # \u5224\u65ad\u53e5\u9996\u7684\u6807\u5fd7\n                if items[0] in ['\u3002', '\uff0c', '\uff01', '\uff1f']:\n                    pre_tag = ''\n                else:\n                    pre_tag = items[1]\n                    \n        # \u8ba1\u7b97\u6982\u7387\n        self.init_p = self.init_p \/ sum(self.init_p)\n        for i in range(self.N):\n            self.emit_p[i] = self.emit_p[i] \/ sum(self.emit_p[i])\n            self.tran_p[i] = self.tran_p[i] \/ sum(self.tran_p[i])\n            \n            \n    # \u7ef4\u7279\u6bd4\u7b97\u6cd5\n    def predict(self, x):\n        res = []\n        for word in x:\n            if word in word2id:\n                res.append(word2id[word])\n        if len(res) == 0:\n            return [x[0] + '\/unk']\n        T = len(res)\n        # \u8bb0\u5f55\n        ptr = np.zeros((T,self.N), dtype=int)\n        # \u52a8\u6001\u89c4\u5212\n        dp = np.zeros((T,self.N))\n        # \u4ece\u524d\u5f80\u540e\u8ba1\u7b97\uff0c\u9996\u5148\u586b\u5145\u7b2c\u4e00\u5217\n        for j in range(self.N):\n            # \u53e5\u9996\u521d\u59cb\u6982\u7387\u00d7\u53d1\u5c04\u6982\u7387\n            try:\n                dp[0][j] = math.log(self.init_p[j]) + math.log(self.emit_p[j][res[0]])\n            except:\n                print('j = {};\\nres = {}\\nx = {}.\\n\\n'.format(j, res, x)) \n        # \u904d\u5386\u5f85\u8bc6\u522b\u53e5\u5b50\u7684\u6bcf\u4e2a\u5355\u8bcd\n        for i in range(1,T):\n            # \u6bcf\u4e2a\u8bcd\u6027\uff08\u9690\u85cf\u72b6\u6001\uff09\n            for j in range(self.N):\n                dp[i][j] = - np.inf\n                # \u4ece\u524d\u4e00\u9879\u7684\u6bcf\u4e00\u4e2ak\u53ef\u8fbe\u5230\u5f53\u524d\u7684\u8bcd\u6027j\n                for k in range(self.N):\n                    # \u524d\u4e00\u5217\u7684\u7b2ck\u4e2a\u8f6c\u79fb\u8fc7\u6765\u7684\u6982\u7387\u00d7\u72b6\u6001\u8f6c\u79fb\u6982\u7387\uff08k->j\uff09\u00d7\u8bcd\u6027\u4e3aA[j]\u65f6\u5355\u8bcd\u4e3ax[i]\u7684\u6982\u7387\n                    scores = dp[i - 1][k] + math.log(self.tran_p[k][j]) + math.log(self.emit_p[j][res[i]])\n                    if scores > dp[i][j]:\n                        dp[i][j] = scores\n                        # \u586b\u5145\u8bb0\u5f55\u77e9\u9635\uff0c\u4ee3\u8868\u5f53\u524d\u6700\u597d\u8def\u5f84\u662f\u4ecek\u8fc7\u6765\u7684\n                        ptr[i][j] = k \n        # \u628a\u6700\u597d\u7684tag\u5e8f\u5217\u6253\u5370\u51fa\u6765\uff08\u4ece\u540e\u5230\u524d\uff09\n        result = [0] * T \n        # \u627e\u51fadp\u6700\u540e\u4e00\u5217\u4e2d\u6700\u5927\u503c\u7684\u4e0b\u6807\n        result[T - 1] = np.argmax(dp[T - 1])\n        # \u4ece\u540e\u5f80\u524d\uff0c\u627e\u51fa\u6bcf\u4e2a\u5355\u8bcd\u7684\u8bcd\u6027\n        for i in range(T - 2, -1, -1):\n            result[i] = ptr[i + 1][result[i + 1]]\n        tag_list = []\n        for i in range(len(result)):\n            tag_list.append(x[i] + '\/' + id2tag[result[i]])\n        return \" \".join(tag_list)","80bca222":"# \u8fd0\u884c\u8bcd\u6027\u6807\u6ce8\u7b97\u6cd5\nv = Viterbi()\nv.train(filePath)\nv.predict(rmm.cut('\u9a7e\u9a6d\u5c4e\u5c71\u7684\u552f\u4e00\u65b9\u6cd5\uff0c\u4e0d\u662f\u91cd\u6784\uff0c\u800c\u662f\u4e0d\u91cd\u6784\u3002'))","0526ac20":"def eval(predict, groundtruth):\n    \"\"\"\u8ba1\u7b97\u9884\u6d4b\u7ed3\u679c\u7684\u51c6\u786e\u7387\u3001\u53ec\u56de\u7387\u3001F1\n    Args:\n        predict (list): \u9884\u6d4b\u7ed3\u679c\n        groundtruth (list): \u771f\u5b9e\u7ed3\u679c\n    Returns:\n        tuple(precision, recall, f1): \u7cbe\u786e\u7387, \u53ec\u56de\u7387, f1\n    \"\"\"\n#     assert len(predict) == len(groundtruth)\n    tp, fp, tn, fn = 0, 0, 0, 0\n    for i in range(len(predict)):\n        right = len([j for j in predict[i] if j in groundtruth[i]])\n        tp += right\n        fn += len(groundtruth[i]) - right\n        fp += len(predict[i]) - right\n    precision = tp \/ (tp + fp)\n    recall = tp \/ (tp + fn)\n    f1 = 2 * precision * recall \/ (precision + recall)\n    return precision, recall, f1\n\n\ndef evalutate(dataset, token_res):\n    \"\"\"\u6253\u5370\u6d4b\u8bd5\u7ed3\u679c\n    Args:\n        dataset (list): \u771f\u5b9e\u7ed3\u679c\n        token_res (list): \u5206\u8bcd\u7ed3\u679c\n    \"\"\"\n    precision, recall, f1 = eval(token_res, dataset)\n    print(\"\u7cbe\u786e\u7387:\\t{:.3%}\".format(precision))\n    print(\"\u53ec\u56de\u7387:\\t{:.3%}\".format(recall))\n    print(\"f1:\\t{:.3%}\".format(f1))","9bf7a59f":"def word_segmentation_eval(trainfile):\n    \"\"\"\u8bc4\u4f30\u5206\u8bcd\u6a21\u578b\n\n    Args:\n        trainfile (string): \u8bad\u7ec3\u6570\u636e\u6587\u4ef6\u8def\u5f84\n\n    Returns:\n        list: \u5206\u8bcd\u7ed3\u679c\n    \"\"\"\n    with open(trainfile, 'r', encoding='utf8') as f:\n        dataset = [big_word(line).strip().split(' ') for line in f.readlines()]\n    dataset = dataset[0:6000]\n    input_data = [''.join(line) for line in dataset]\n    dataset_size = float(os.path.getsize(trainfile)) \/ 1024  # \u4ee5 kb \u4e3a\u5355\u4f4d\n\n    # \u5229\u7528 RMM \u6a21\u578b\u8fdb\u884c\u5206\u8bcd\n    token_res = []\n    print(\"RMM \u5206\u8bcd\u6a21\u578b\uff1a\")\n    stime = time.thread_time()\n    \n    for line in tqdm(input_data):\n        token_res.append(rmm.cut(line))\n\n    # \u9884\u6d4b\u5206\u8bcd\n    etime = time.thread_time()\n    evalutate(dataset, token_res)\n    print(\"\u6548\u7387:\\t{:.3f} kb\/s\\n\".format(dataset_size \/ (etime - stime)))\n\n    # \u4fdd\u5b58\u5206\u8bcd\u7ed3\u679c\n    with open('..\/PeopleDaily_Token_hmm_result.txt', 'w', encoding='utf8') as f:\n        for i in token_res:\n            f.write(' '.join(i) + '\\n')\n    return token_res\n\ndef posTag_eval(trainfile, testfile):\n    \"\"\"\u8bc4\u4f30\u8bcd\u6027\u6807\u6ce8\u6a21\u578b\n\n    Args:\n        trainfile (string): \u8bad\u7ec3\u6570\u636e\u96c6\u8def\u5f84\n        testfile (string): \u6d4b\u8bd5\u6570\u636e\u96c6\u8def\u5f84\n\n    Returns:\n        list: \u8bcd\u6027\u6807\u6ce8\u7ed3\u679c\n    \"\"\"\n\n    posTag_res = []\n    dataset_size = float(os.path.getsize(testfile)) \/ 1024  # \u4ee5 kb \u4e3a\u5355\u4f4d\n    with open(trainfile, 'r', encoding='utf8') as f:\n        dataset = [big_word(line).strip().split(' ') for line in f.readlines()[:500]]\n    with open(testfile, 'r', encoding='utf8') as f:\n        print(\"HMM \u8bcd\u6027\u6807\u6ce8\u6a21\u578b\uff1a\")\n        stime = time.thread_time()\n        for line in tqdm(f.readlines()[:500]):\n            posTag_res.append(v.predict(line.strip().split(' ')).split(' '))  # \u9884\u6d4b\u5206\u8bcd\n        etime = time.thread_time()\n    evalutate(dataset, posTag_res)\n    print(\"\u6548\u7387:\\t{:.3f} kb\/s\\n\".format(dataset_size \/ (etime - stime)))\n    return posTag_res\n\n# \u8bc4\u4f30\u5206\u8bcd\u6a21\u578b\ntoken_res = word_segmentation_eval('.\/test_word_sep.txt')\n\n# \u8bc4\u4f30\u8bcd\u6027\u6807\u6ce8\n# \u5728\u6807\u51c6\u5206\u8bcd\u96c6\u5408\u4e0a\u6807\u6ce8\u8bcd\u6027\ntrainfile = '.\/test_WS.txt'\ntestfile = '.\/test_word_sep.txt'\n\nresult = posTag_eval(trainfile, testfile)","01db0d97":"import random\ncount = 0\nf_train = open('train_NER.txt', 'w', encoding='utf-8')\nf_test = open('test_NER.txt', 'w', encoding='utf-8')\nfor line in open('..\/input\/ner-corpus-chinese\/People\\'s_Daily\/rmrb1998-01.txt', 'r', encoding='utf-8'):\n    if random.random() < 0.1:\n        f_test.write(line)\n    else:\n        f_train.write(line)\n    count += 1\n    if count > 5000:\n        break\nf_train.close()\nf_test.close()","137ecdee":"# \u8bcd+\u9891\u6570\nclass Word:\n    str = ''  # \u8bcd\n    fre = 0  # \u9891\u6570\n\n    def __init__(self, s, f):\n        self.str = s\n        self.fre = f\n\n    def __eq__(self, other):\n        return self.str == other\n\n    def __lt__(self, other):\n        return self.fre < other.fre\n\n    def __gt__(self, other):\n        return self.fre > other.fre\n\n    def __le__(self, other):\n        return self.fre <= other.fre\n\n    def __ge__(self, other):\n        return self.fre >= other.fre\n\n\n# \u63d2\u5165\u673a\u6784\u5b57\u5178\ndef insertToNt(word):\n    global dic_nt\n    index = np.where(dic_nt == word)\n    if len(index[0]) == 0:\n        dic_nt = np.append(dic_nt, [Word(word, 1)])\n    else:\n        dic_nt[index[0][0]].fre += 1\n\n\n# \u63d2\u5165\u5176\u4ed6\u5b57\u5178\ndef insertToOther(word):\n    global dic_other\n    index = np.where(dic_other == word)\n    if len(index[0]) == 0:\n        dic_other = np.append(dic_other, [Word(word, 1)])\n    else:\n        dic_other[index[0][0]].fre += 1\n\n\nfile = open(\"train_NER.txt\", encoding=\"UTF-8\")  # \u6253\u5f00\u8bad\u7ec3\u96c6\u6587\u4ef6\ndic_nt = np.array([], dtype=Word)  # \u673a\u6784\u8bcd\ndic_other = np.array([], dtype=Word)  # \u5176\u4ed6\u8bcd\n\n# \u8bcd\u9891\u7edf\u8ba1\nfor line in tqdm(file):\n    words = line.strip().split(\"  \")\n    i = 0\n    while i < len(words):\n        words[i] = re.sub(r\"{.+}\", \"\", words[i])  # \u5220\u9664\u6ce8\u97f3\u4fe1\u606f\n        if re.search(r\"^\\[\", words[i]) is not None:  # \u7ec4\u5408\u8bcd\n            longWord = np.array([words[i][1:]])\n            i += 1\n            while i < len(words) and re.search(r\"\\]\", words[i]) is None:\n                longWord = np.append(longWord, words[i])\n                i += 1\n            if i < len(words):\n                longWord = np.append(longWord, words[i])\n                i += 1\n            if re.search(r\"\\]\/nt\", longWord[len(longWord) - 1]) is None:\n                temp = \"\"\n                for word in longWord:\n                    word = re.sub(r\"\\]\/.+\", \"\", word)\n                    word = re.sub(r\"\/.+\", \"\", word)\n                    temp += word\n                insertToOther(temp)\n            else:\n                temp = \"\"\n                for word in longWord:\n                    word = re.sub(r\"\\]\/.+\", \"\", word)\n                    word = re.sub(r\"\/.+\", \"\", word)\n                    temp += word\n                insertToNt(temp)\n        elif re.search(r\"\/w\", words[i]) is None:\n            if re.search(r\"\/nt\", words[i]) is None:\n                words[i] = re.sub(r\"\/.+\", \"\", words[i])\n                insertToOther(words[i])\n            else:\n                words[i] = re.sub(r\"\/.+\", \"\", words[i])\n                insertToNt(words[i])\n            i += 1\n        else:\n            i += 1\n\n# \u6392\u5e8f\ndic_other.sort(axis=0)\ndic_other = dic_other[::-1]\ndic_nt.sort(axis=0)\ndic_nt = dic_nt[::-1]\n\n# \u4fdd\u5b58\u8bcd\u5178\ncommonWords = open(\"CommonWords.pkl\", mode=\"wb\")\ndill.dump([dic_nt, dic_other], commonWords)\ncommonWords.close()\n\n# \u4fdd\u5b58\u8bcd\u5178(\u6587\u672c\u5f62\u5f0f)\ncommonWordsTxt = open(\"CommonWords.txt\", mode='w', encoding=\"UTF-8\")\nfor i in range(0, dic_nt.size):\n    commonWordsTxt.write(dic_nt[i].str + \"\\t\\t\" + str(dic_nt[i].fre) + \"\\n\")\ncommonWordsTxt.write(\"\\n\")\nfor i in range(0, dic_other.size):\n    commonWordsTxt.write(dic_other[i].str + \"\\t\\t\" + str(dic_other[i].fre) + \"\\n\")\ncommonWordsTxt.close()","4bc1bac6":"# \u4ece\u5b57\u5178\u4e2d\u67e5\u627e\u76f8\u5e94\u8bcd\u7684\u4e0b\u6807\uff0c\u627e\u4e0d\u5230\u8fd4\u56de-1\ndef find(dic, word):\n    ind = np.where(dic == word)\n    if len(ind[0]) == 0:\n        return -1\n    else:\n        return ind[0][0]\n\n\n# \u6784\u5efa\u57fa\u672c\u8bcd\u5411\u91cf \u53d6\u5168\u90e8\u7684\u673a\u6784\u8bcd\u548c\u9ad8\u9891\u7684\u5176\u4ed6\u8bcd\u6784\u6210dim\u7ef4\u5411\u91cf\ndef creatBaseVector():\n    global word_vector, dim\n    # \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u673a\u6784\u8bcd\u8bcd\u5178\u548c\u5176\u4ed6\u8bcd\u8bcd\u5178\n    cache_file = open(\"CommonWords.pkl\", mode=\"rb\")\n    temp = dill.load(cache_file)\n    dic_nt = temp[0]\n    dic_other = temp[1]\n    cache_file.close()\n    word_vector = np.array([dic_nt[0].str], dtype='<U7')\n    for i in range(0, dic_nt.size):\n        index = np.where(dic_nt == dic_nt[i].str)\n        if len(index[0]) == 0:\n            word_vector = np.append(word_vector, [dic_nt[i].str])\n        else:\n            word_vector = np.insert(word_vector, index[0][0], [dic_nt[i].str])\n    for i in range(0, dim - 3 - dic_nt.size):\n        index = np.where(dic_other == dic_other[i].str)\n        if len(index[0]) == 0:\n            word_vector = np.append(word_vector, [dic_other[i].str])\n        else:\n            word_vector = np.insert(word_vector, index[0][0], [dic_other[i].str])\n\n\n# \u521b\u5efa\u5411\u91cf \u4e0d\u5728\u9ad8\u9891\u8bcd\u91cc\u628a\u4f4d\u7f6e\u8bb0\u4e3adim - 1\ndef creatVector(file_name):\n    global word_vector, dim\n    data_file = open(file_name + \".txt\", encoding=\"UTF-8\")  # \u6570\u636e\u6587\u4ef6\n    vec_file = open(file_name + \"_vec.txt\", mode='w')  # \u8f6c\u5316\u7684\u5411\u91cf\u6587\u4ef6\n    vec_file.write(\" \" * 50 + '\\n')\n    sum = 0\n    # \u4e00\u884c\u4e00\u884c\u6765\n    for line in data_file:\n        word_set = np.array([])\n        label = np.array([])\n        words = line.strip().split()\n        i = 0\n        while i < len(words):\n            words[i] = re.sub(r\"{.+}\", \"\", words[i])  # \u5220\u9664\u6ce8\u97f3\u4fe1\u606f\n            if re.search(r\"^\\[\", words[i]) is not None:  # \u7ec4\u5408\u8bcd\n                long_word = np.array([words[i][1:]])\n                i += 1\n                while i < len(words) and re.search(r\"\\]\", words[i]) is None:\n                    long_word = np.append(long_word, words[i])\n                    i += 1\n                if i < len(words):\n                    long_word = np.append(long_word, words[i])\n                    i += 1\n                if re.search(r\"\\]\/nt\", long_word[len(long_word) - 1]) is None:\n                    temp = \"\"\n                    for word in long_word:\n                        word = re.sub(r\"\\]\/.+\", \"\", word)\n                        word = re.sub(r\"\/.+\", \"\", word)\n                        temp += word\n                    word_set = np.append(word_set, temp)\n                    label = np.append(label, [0])\n                else:\n                    temp = \"\"\n                    for word in long_word:\n                        word = re.sub(r\"\\]\/.+\", \"\", word)\n                        word = re.sub(r\"\/.+\", \"\", word)\n                        temp += word\n                    word_set = np.append(word_set, temp)\n                    label = np.append(label, [1])\n            elif re.search(r\"\/w\", words[i]) is None:\n                if re.search(r\"\/nt\", words[i]) is None:\n                    words[i] = re.sub(r\"\/.+\", \"\", words[i])\n                    word_set = np.append(word_set, words[i])\n                    label = np.append(label, [0])\n                else:\n                    words[i] = re.sub(r\"\/.+\", \"\", words[i])\n                    word_set = np.append(word_set, words[i])\n                    label = np.append(label, [1])\n                i += 1\n            else:\n                i += 1\n\n        # \u5411\u91cf\u751f\u6210\n        pos_front = 0  # \u524d\u4e00\u8bcd\u5728\u57fa\u672c\u8bcd\u5411\u91cf\u4e2d\u7684\u4e0b\u6807\n        pos_current = 0  # \u5f53\u524d\u8bcd\u5728\u57fa\u672c\u8bcd\u5411\u91cf\u4e2d\u7684\u4e0b\u6807\n        for i in range(0, word_set.size):\n            # \u524d\u8bcd\u5411\u91cf\n            pos_back = 0  # \u540e\u4e00\u8bcd\u5728\u57fa\u672c\u8bcd\u5411\u91cf\u4e2d\u7684\u4e0b\u6807\n            if i == 0:\n                # \u524d\u4e00\u8bcd\n                pos_front = dim - 3\n                # \u5f53\u524d\u8bcd\n                pos = find(word_vector, word_set[i])\n                if pos == -1:\n                    pos_current = dim - 1\n                else:\n                    pos_current = pos\n                # \u540e\u4e00\u8bcd\n                if i == word_set.size - 1:\n                    pos_back = dim - 2\n                else:\n                    pos = find(word_vector, word_set[i + 1])\n                    if pos == -1:\n                        pos_back = dim - 1\n                    else:\n                        pos_back = pos\n            elif i == word_set.size - 1:\n                pos_back = dim - 2\n            else:\n                pos = find(word_vector, word_set[i + 1])\n                if pos == -1:\n                    pos_back = dim - 1\n                else:\n                    pos_back = pos\n            vec_file.write(str(pos_front) + \" \" + str(pos_current) + \" \" + str(pos_back))\n            vec_file.write(\" \" + str(int(label[i])) + '\\n')\n\n            # \u66f4\u65b0\n            pos_front = pos_current\n            pos_current = pos_back\n            sum += 1\n#             if sum % 1000 == 0: print(sum)\n    data_file.close()\n\n    # \u5728\u6587\u4ef6\u5f00\u5934\u5199\u5165\u7ef4\u5ea6\u548c\u6570\u636e\u603b\u6570\u4fe1\u606f\uff0c\u8986\u76d6\u7b2c\u4e00\u884c\u5199\u5165\u768450\u4e2a\u7a7a\u683c\n    vec_file.seek(0)\n    vec_file.write(str(dim) + \" \" + str(sum))\n    vec_file.close()\n\n\nword_vector = np.array([])\ndim = 500\ncreatBaseVector()\ncreatVector(\"train_NER\")\ncreatVector(\"test_NER\")","79347580":"import torch as tc\nfrom torch.autograd import Variable\nimport random\n\n\ndef sigmoid(x):\n    return 1 \/ (1 + tc.exp(-x))\n\n\n# \u8bfb\u53d6\u5904\u7406\u597d\u7684\u5411\u91cf\u6587\u4ef6\ndef readVectorFile(file_name):\n    global dim\n    vec_file = open(file_name, mode=\"r\")\n    line = vec_file.readline()\n    wordlist = line.split()\n    dim = int(wordlist[0])\n    total = int(wordlist[1])\n\n    x = Variable(tc.FloatTensor(total, 3 * dim).zero_(), requires_grad=False)\n    y = Variable(tc.FloatTensor(total, 1).zero_(), requires_grad=False)\n    for i in range(0, total):\n        line = vec_file.readline()\n        if not line: break\n        wordlist = line.split()\n        x[i][int(wordlist[0])] = 1\n        x[i][int(wordlist[1]) + dim] = 1\n        x[i][int(wordlist[2]) + 2 * dim] = 1\n        y[i] = int(wordlist[3])\n    vec_file.close()\n    return x, y, total\n\n\n# \u9a8c\u8bc1\uff0c\u8ba1\u7b97F1-measure\ndef very(th, x_set_ver, y_set_ver, total_ver):\n    tp = 0  # \u771f\u6b63\u4f8b\n    fp = 0  # \u5047\u6b63\u4f8b\n    fn = 0  # \u5047\u53cd\u4f8b\n    for i in range(0, total_ver):\n        tmp_y = sigmoid(tc.sum(theta * x_set_ver[i]))\n        if tmp_y > 0.5:\n            if y_set_ver[i] > 0.5:\n                tp += 1\n            else:\n                fp += 1\n        else:\n            if y_set_ver[i] > 0.5:\n                fn += 1\n    try:\n        precision_rate = tp \/ (tp + fp)\n    except ZeroDivisionError:\n        precision_rate = 0\n    try:\n        recall_rate = tp \/ (tp + fn)\n    except ZeroDivisionError:\n        recall_rate = 0\n    if recall_rate + precision_rate == 0:\n        return 0\n    else:\n        return 2 * precision_rate * recall_rate \/ (precision_rate + recall_rate)\n\n\n# \u8bfb\u53d6\u8bad\u7ec3\u6587\u4ef6\nx_set, y_set, total = readVectorFile(\"train_NER_vec.txt\")\n# \u8bfb\u53d6\u6d4b\u8bd5\u6587\u4ef6\nx_set_test, y_set_test, total_test = readVectorFile(\"test_NER_vec.txt\")\n\ntheta = Variable(tc.FloatTensor(3 * dim).zero_(), requires_grad=True)\nm = 15  # \u6bcf\u6279\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u7684\u6b21\u6570\n\nthreshold = 1e-3  # \u8bef\u5dee\n\nans_file = open(\"ans_\" + str(dim) + \".txt\", \"w\")  # \u7ed3\u679c\u6587\u4ef6\ntmp = 0\n# \u68af\u5ea6\u4e0b\u964d\nwhile True:\n    l_theta = Variable(tc.FloatTensor([0]).cuda(), requires_grad=True)\n    for i in range(0, m):\n        pos = random.randint(0, total - 1)\n        l_theta = l_theta + (y_set[pos].cuda() * tc.log(sigmoid(tc.sum(theta.cuda() * x_set[pos].cuda()))) + (1 - y_set[pos].cuda()) * tc.log(\n            1 - sigmoid(tc.sum(theta.cuda() * x_set[pos].cuda()))))\n    l_theta.backward()\n    tmp += 1\n    v_in_tra = very(theta, x_set, y_set, total)\n    v_in_test = very(theta, x_set_test, y_set_test, total_test)\n    ans_file.write(str(tmp) + \"\\t\")\n    ans_file.write(str(v_in_tra) + \"\\t\" + str(v_in_test) + \"\\n\")\n\n    # \u8bb0\u5f55\u53c2\u6570\n    if tmp % 100 == 0:\n        for i in range(0, theta.size()[0]):\n            ans_file.write(str(float(theta[i])) + ' ')\n        ans_file.write(\"\\n\")\n    grad = theta.grad.data\n\n    print(\"\\r\u8bad\u7ec3\u96c6\u4e2dF1-measure: {}; \u6d4b\u8bd5\u96c6\u4e2dF1-measure: {}; loss: {}\".format(v_in_tra, v_in_test, tc.max(tc.abs(grad))), end='')\n    \n    # \u7ed3\u675f\u6761\u4ef6\n    if tc.max(tc.abs(grad)) < threshold:\n        break\n    theta.data += grad.data\n    theta.grad.data.zero_()\n\n# \u6253\u5370\u7ed3\u679c\n# print('\\n' + theta.data)\nfor i in range(0, theta.size()[0]):\n    ans_file.write(str(float(theta[i])) + ' ')\nans_file.write(\"\\n\")\nans_file.write(\"\u6700\u7ec8F1-measure\uff1a \" + str(v_in_test) + \"\\n\")\nans_file.close()","9eddb4b4":"import matplotlib.pyplot as plt\n\nfile = open(\"ans_500.txt\", mode=\"r\")\nnum = np.array([0])\nvalue1 = np.array([0])\nvalue2 = np.array([0])\nwhile True:\n    line = file.readline()\n    if not line: break\n    wordlist = line.split()\n    if len(wordlist) == 3:\n        num = np.append(num, int(wordlist[0]))\n        value1 = np.append(value1, float(wordlist[1]))\n        value2 = np.append(value2, float(wordlist[2]))\n\nfile.close()\nplt.plot(num, value1, label='Train')\nplt.plot(num, value2, label='Test')\nplt.legend(loc='best')\nplt.title(\"F1-Measure With Iteration Times\")\nplt.xlabel(\"Iteration Times\")\nplt.ylabel(\"F1-Measure\")\nplt.show()","7c8ebded":"## \u751f\u6210\u8f6c\u6362\u8bcd\u5178  \n\n&emsp;&emsp;\u8f6c\u6362\u8bcd\u5178\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u63d0\u9ad8\u8bcd\u548c\u5176\u5bf9\u5e94\u7684\u7d22\u5f15\u7684\u8f6c\u6362\u6548\u7387\uff0c\u5728\u8bcd\u5178\u4e2d\u4e3a\u6bcf\u4e2a\u4e0d\u540c\u7684\u8bcd\u5206\u914d\u4e00\u4e2a\u552f\u4e00\u7684id\uff0c\u5b8c\u6210\u540e\u6839\u636e\u8bcd->\u7d22\u5f15\u7684\u5b57\u5178\u751f\u6210\u7d22\u5f15->\u8bcd\u7684\u5b57\u5178\u3002\u6700\u540e\u770b\u4e00\u4e0b\u8bcd\u5178\u7684\u6240\u6709\u8bcd\u6027\u6807\u7b7e\uff0c\u68c0\u67e5\u662f\u5426\u6b63\u786e\u3002","22c1eb11":"****\n****","752aa842":"# \u7b2c\u96f6\u90e8\u5206 \u51c6\u5907\u5de5\u4f5c","db1dea3b":"## \u5b9e\u73b0\n\n&emsp;&emsp;\u4ee5\u4e0b\u4ee3\u7801\u6839\u636e\u6807\u51c6\u7b54\u6848\u548c\u9884\u6d4b\u7ed3\u679c\u8ba1\u7b97\u51c6\u786e\u7387\u3001\u53ec\u56de\u7387\u548cF1\u503c\u3002","c704e3ed":"## \u52a0\u8f7d\u8bcd\u5178  \n\n&emsp;&emsp;\u4f7f\u75282014\u7248\u4eba\u6c11\u65e5\u62a5\u8bed\u6599\u5e93\uff0c\u5904\u7406\u590d\u5408\u8bcd\u4e4b\u540e\uff0c\u5c06\u4e00\u4e9b\u4e0d\u7b26\u5408\u89c4\u8303\u7684\u6570\u636e\u8fc7\u6ee4\u6389\uff08\u6bd4\u5982\u6ca1\u6709\u8bcd\u6027\u6807\u6ce8\u7684\u8bcd\u7b49\uff09\uff0c\u52a0\u8f7d\u5f62\u6210\u5206\u8bcd\u8bcd\u5178\u3002","d8a0a9dd":"****\n****","c48db422":"# \u7b2c\u4e09\u90e8\u5206 \u5bf9\u5206\u8bcd\u548c\u8bcd\u6027\u6807\u6ce8\u6548\u679c\u8fdb\u884c\u6d4b\u8bc4","f66f6888":"# \u7b2c\u4e8c\u90e8\u5206 \u8bcd\u6027\u6807\u6ce8","82beb1eb":"# \u7b2c\u4e00\u90e8\u5206 \u5206\u8bcd","c1c20d64":"# \u7b2c\u4e94\u90e8\u5206 \u603b\u7ed3\n\n## \u5b9e\u73b0\u7684\u5185\u5bb9\n\n1. \u5b9e\u73b0\u57fa\u4e8e\u8bcd\u5178\u7684**\u5206\u8bcd**\u65b9\u6cd5\n\n* \u6b63\u5411\u6700\u5927\u5339\u914d\u6cd5\n\n* \u9006\u5411\u6700\u5927\u5339\u914d\u6cd5\n\n2. \u57fa\u4e8e\u9690\u9a6c\u5c14\u79d1\u592b\u6a21\u578b\uff08HMM\uff09\u7684\u7ef4\u7279\u6bd4**\u8bcd\u6027\u6807\u6ce8**\u7b97\u6cd5\n\n3. \u5bf9\u5206\u8bcd\u548c\u8bcd\u6027\u6807\u6ce8\u7b97\u6cd5\u8fdb\u884c**\u6d4b\u8bc4**\n\n4. \u5bf9\u8bed\u6599\u5e93\u4e2d\u7684\u673a\u6784\u540d\u8fdb\u884c**\u547d\u540d\u5b9e\u4f53\u8bc6\u522b**\n\n## \u9047\u5230\u7684\u56f0\u96be\n\n1. \u8bed\u6599\u5e93\u4e2d\u6709\u5f88\u591a\u610f\u60f3\u4e0d\u5230\u7684\u6807\u6ce8\u9519\u8bef\uff1b\n\n2. \u672a\u767b\u5f55\u8bcd\u7ed9\u6211\u9020\u6210\u4e86\u5f88\u5927\u7684\u9ebb\u70e6\uff0c\u75af\u72c2\u62a5\u5f02\u5e38\uff0c\u65f6\u4e0d\u65f6\u62a5\u5f02\u5e38\uff1b\n\n3. \u7ef4\u7279\u6bd4\u7b97\u6cd5\u6982\u7387\u77e9\u9635\u7684\u521d\u503c\u82e5\u8bbe\u4e3a0\uff0c\u53d6\u5bf9\u6570\u65f6\u4f1a\u8d85\u51fa\u5b9a\u4e49\u57df\u8303\u56f4\uff1b\u8bbe\u4e3a1\u5219\u4e3a\u52a0\u4e00\u6cd5\u6570\u636e\u5e73\u6ed1\uff0c\u4f46\u7531\u4e8e\u8bcd\u5e93\u8f83\u5927\uff0c\u672a\u51fa\u73b0\u7684\u8bcd\u62a2\u5360\u4e86\u592a\u591a\u6982\u7387\uff0c\u6548\u679c\u4e0d\u5c3d\u5982\u4eba\u610f\uff1b\n\n4. \u8bc4\u6d4b\u6307\u6807\u7684\u8ba1\u7b97\u65b9\u6cd5\u4e0d\u590d\u6742\uff0c\u4f46\u5bb9\u6613\u6df7\u6dc6\uff1b\n\n5. \u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u5904\u7406\u6587\u672c\uff0c\u901f\u5ea6\u6709\u70b9\u6162\uff1b\n\n6. NER\u7684\u8ba1\u7b97\u91cf\u5f88\u5927\uff0c\u5373\u4f7f\u6211\u62bd\u51fa\u4e86\u8bed\u6599\u5e93\u4e2d\u5f88\u5c11\u7684\u4e00\u90e8\u5206\u6570\u636e\uff0c\u8fd8\u662f\u9700\u8981\u8fd0\u884c\u5f88\u957f\u65f6\u95f4\u624d\u80fd\u5f97\u51fa\u7ed3\u679c\uff1b\n\n7. NER\u6a21\u578b\u7684\u622a\u6b62\u8bef\u5dee\u8bbe\u7f6e\u592a\u5927\uff0c\u5bfc\u81f4\u6a21\u578b\u6b20\u62df\u5408\uff0c\u6ca1\u6709\u5f97\u5230\u6ee1\u610f\u7684\u7ed3\u679c\uff0c\u4f46\u5176\u8c03\u8bd5\u8fc7\u7a0b\u4e2d\u6700\u597d\u8868\u73b0(F1-Measure)\u5f80\u5f80\u80fd\u8fbe\u523080%-90%.\n\n8. \u8ba1\u7b97\u91cf\u597d\u5927\uff0c\u7535\u8111\u597d\u6162\uff0c\u6211\u8981\u6362\u7535\u8111\uff01\n","b5fa58d2":"<center><font size=5>(\u8ba1\u7b97\u673a\u4e13\u4e1a\uff09\u8bfe\u7a0b\u5927\u4f5c\u4e1a\u4e00<\/font><\/center>  \n\n<center><font size=6>\u5206\u8bcd\u4e0e\u8bcd\u6027\u6807\u6ce8<\/font><\/center>\n\n<center><font size=5>\u73ed\u7ea7\uff1a63011908&emsp;\u59d3\u540d\uff1a\u8d75\u4e16\u9f99&emsp;\u5b66\u53f7\uff1a1120192517<\/font><\/center>  \n\n\n****\n\n\u4e00\u3001\u8981\u6c42\n\n* \u5b9e\u73b0\u57fa\u4e8e\u8bcd\u5178\u7684\u5206\u8bcd\u65b9\u6cd5\u548c\u7edf\u8ba1\u5206\u8bcd\u65b9\u6cd5\uff1a\u4e24\u7c7b\u65b9\u6cd5\u4e2d\u5b9e\u73b0\u4e00\u79cd\u5373\u53ef\uff1b\n\n* \u5bf9\u5206\u8bcd\u7ed3\u679c\u8fdb\u884c\u8bcd\u6027\u6807\u6ce8\uff0c\u4e5f\u53ef\u4ee5\u5728\u5206\u8bcd\u7684\u540c\u65f6\u8fdb\u884c\u8bcd\u6027\u6807\u6ce8\uff1b\n\n* \u5bf9\u5206\u8bcd\u53ca\u8bcd\u6027\u6807\u6ce8\u7ed3\u679c\u8fdb\u884c\u8bc4\u4ef7\uff0c\u5305\u62ec4\u4e2a\u6307\u6807\uff1a\u6b63\u786e\u7387\u3001\u53ec\u56de\u7387\u3001F1\u503c\u548c\u6548\u7387\u3002\n\n\u4e8c\u3001\u9009\u505a\n\n* \u547d\u540d\u5b9e\u4f53\u8bc6\u522b\uff1a\u5bf9\u53e5\u5b50\u4e2d\u51fa\u73b0\u7684\u4eba\u540d\u3001\u5730\u540d\u3001\u673a\u6784\u540d\u8fdb\u884c\u8bc6\u522b\u3002\n\n\u4e09\u3001\u63d0\u4ea4\u7684\u5185\u5bb9\n\n* \u7a0b\u5e8f\u6e90\u4ee3\u7801\uff1a\u9700\u6dfb\u52a0\u6ce8\u91ca\n\n* \u5b9e\u73b0\u8fc7\u7a0b\u63cf\u8ff0\uff1a\u7a0b\u5e8f\u7ed3\u6784\uff0c\u7b97\u6cd5\u8bbe\u8ba1\uff0c\u7a0b\u5e8f\u5b8c\u6210\u8fc7\u7a0b\u4e2d\u6240\u9047\u95ee\u9898\u53ca\u89e3\u51b3\u65b9\u6cd5\uff1b\u7a0b\u5e8f\u4f7f\u7528\u8bf4\u660e\u3002\n\n\u56db\u3001\u63d0\u4ea4\u65f6\u95f4\n\n* \u63d0\u4ea4\u622a\u6b62\u65f6\u95f4\uff1a2021\u5e7411\u670811\u65e5 24:00\n\n\u4e94\u3001\u53c2\u8003\n\n* \u5206\u8bcd\u8bed\u6599\uff1a\u6559\u6750\u7b2c3\u7ae0 3.2\u8282\n\n* \u5206\u8bcd\u8bc4\u6d4b\uff1a\u6559\u6750\u7b2c3\u7ae0 3.5\u8282\n\n* \u8bcd\u6027\u6807\u6ce8\u8bed\u6599\uff1a\u6559\u6750\u7b2c7\u7ae0 7.2\u8282\n\n* \u8bcd\u6027\u6807\u6ce8\u8bc4\u6d4b\uff1a\u6559\u6750\u7b2c7\u7ae0 7.3.4\u8282\n\n* \u547d\u540d\u5b9e\u4f53\u8bc6\u522b\uff1a\u6559\u6750\u7b2c8\u7ae0\n\n\u516d\u3001\u8865\u5145\u8bf4\u660e\n\n* \u81ea\u884c\u5b9e\u73b0\u5206\u8bcd\u7b97\u6cd5\uff0c\u4e0d\u80fd\u76f4\u63a5\u6216\u95f4\u63a5\u8c03\u7528\u73b0\u6709\u5de5\u5177\u5305\uff08\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1aHanLP\uff0cCoreNLP\u7b49\uff09\u4e2d\u63d0\u4f9b\u7684\u5206\u8bcd\u63a5\u53e3\uff0c\u8bcd\u6027\u6807\u6ce8\u3001\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u4e5f\u662f\u540c\u6837\u7684\u8981\u6c42\uff1b\u5728\u5b9e\u73b0\u76f8\u5173\u7b97\u6cd5\u7684\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u53c2\u8003\u73b0\u6709\u5de5\u5177\u5305\u7684\u4ee3\u7801\uff0c\u4f46\u4e25\u7981\u590d\u5236\u548c\u6284\u88ad\u3002\n\n****\n****","e7729efc":"## \u8bcd\u6027\u6807\u6ce8\u6d4b\u8bd5  \n&emsp;&emsp;\u5148\u540e\u4f7f\u7528RMM\u5206\u8bcd\u6a21\u578b\u548c\u7ef4\u7279\u6bd4\u7b97\u6cd5\u6a21\u578b\uff0c\u5bf9\u6d4b\u8bd5\u53e5\u5b50&emsp;\u201c\u9a7e\u9a6d\u5c4e\u5c71\u7684\u552f\u4e00\u65b9\u6cd5\uff0c\u4e0d\u662f\u91cd\u6784\uff0c\u800c\u662f\u4e0d\u91cd\u6784\u3002\u201d&emsp;\u8fdb\u884c\u5206\u8bcd\u548c\u8bcd\u6027\u6807\u6ce8\uff0c\u8f93\u51fa\u6a21\u578b\u7684\u5206\u8bcd\u548c\u8bcd\u6027\u6807\u6ce8\u7ed3\u679c\u3002","12571fda":"# \u7b2c\u56db\u90e8\u5206 \u547d\u540d\u5b9e\u4f53\u8bc6\u522b NER\n\n&emsp;&emsp;\u624b\u5199\u5b9e\u73b0\u57fa\u4e8e\u4e8c\u5206\u7c7b\u5668\u7684\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\uff0c\u4f7f\u7528one-hot\u7279\u5f81\u63d0\u53d6\u7b97\u6cd5\u548c\u68af\u5ea6\u4e0b\u964d\u8fdb\u884c\u4f18\u5316\u7684\u65b9\u6cd5\u3002\n","edabcafe":"### \u7b97\u6cd5\u539f\u7406  \n\n&emsp;&emsp;\u5f53\u4e8b\u4ef6\u4e4b\u95f4\u5177\u6709\u5173\u8054\u6027\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u7edf\u8ba1\u4e24\u4e2a\u4ee5\u4e0a\u76f8\u5173\u4e8b\u4ef6\u540c\u65f6\u51fa\u73b0\u7684\u6982\u7387\uff0c\u6765\u786e\u5b9a\u4e8b\u4ef6\u7684\u53ef\u80fd\u72b6\u6001\u3002\u4ee5\u4e2d\u6587\u7684\u8bcd\u6027\u6807\u6ce8\u4e3a\u4f8b\uff1a\u4e2d\u6587\u4e2d\uff0c\u6bcf\u4e2a\u8bcd\u4f1a\u6709\u591a\u79cd\u8bcd\u6027\uff08\u6bd4\u5982\"\u5e0c\u671b\"\u5373\u662f\u540d\u5b57\u53c8\u662f\u52a8\u8bcd\uff09\uff0c\u7ed9\u51fa\u4e00\u4e2a\u53e5\u5b50\u540e\uff0c\u6211\u4eec\u9700\u8981\u7ed9\u8fd9\u4e2a\u53e5\u5b50\u7684\u6bcf\u4e2a\u8bcd\u786e\u5b9a\u4e00\u4e2a\u552f\u4e00\u7684\u8bcd\u6027\uff0c\u5b9e\u9645\u4e0a\u4e5f\u5c31\u662f\u5728\u82e5\u5e72\u8bcd\u6027\u7ec4\u5408\u4e2d\u9009\u62e9\u4e00\u4e2a\u5408\u9002\u7684\u7ec4\u5408\u3002\u52a8\u8bcd\u3001\u540d\u8bcd\u7b49\u8bcd\u7c7b\u7684\u642d\u914d\u662f\u5177\u6709\u89c4\u5f8b\u6027\u7684\uff0c\u6bd4\u5982\u52a8\u8bcd+\u540d\u8bcd\u7684\u5f62\u5f0f\u662f\u5927\u91cf\u5b58\u5728\u7684\uff0c\u5f53\u6211\u4eec\u770b\u5230\u53e5\u5b50\"\u5b58\u5728\u5e0c\u671b\"\uff0c\u5982\u679c\u786e\u5b9a\u4e86\"\u5b58\u5728\"\u662f\u52a8\u8bcd\uff0c\u90a3\u4e48\u7531\u4e8e\u52a8\u540d\u8bcd\u7ec4\u5408\u7684\u6982\u7387\u8f83\u5927\uff0c\u6211\u4eec\u5c31\u4f1a\u8ba4\u5b9a\"\u5e0c\u671b\"\u662f\u540d\u8bcd\u3002 \n\n&emsp;&emsp;Viterbi\u7b97\u6cd5\u7684\u539f\u7406\u5c31\u662f\u57fa\u4e8e\u6b64\u3002\u6211\u4eec\u9700\u8981\u8ba1\u7b97\u6240\u6709\u7684\u540d\u8bcd+\u52a8\u8bcd\uff0c\u540d\u8bcd+\u540d\u8bcd\uff0c\u52a8\u8bcd+\u5f62\u5bb9\u8bcd\u2026\u2026\u7b49\u5404\u79cd\u79cd\u8bcd\u6027\u642d\u914d\u7684\u51fa\u73b0\u6982\u7387\uff0c\u7136\u540e\u4ece\u4e2d\u9009\u51fa\u6700\u5927\u6982\u7387\u7684\u7ec4\u5408\u3002\n\n### \u7b97\u6cd5\u6b65\u9aa4\n\n##### 1. \u51c6\u5907\u4e00\u4e2a\u8bed\u6599\u5e93\uff0c\u5305\u542b\u5df2\u7ecf\u6b63\u786e\u6807\u6ce8\u4e86\u8bcd\u6027\u7684\u5927\u91cf\u8bed\u53e5\u3002\n\n##### 2. \u5bf9\u8bed\u6599\u5e93\u7684\u5185\u5bb9\u8fdb\u884c\u7edf\u8ba1\u4ee5\u4e0b\u6570\u636e\uff1a\n\n* \u6240\u6709\u53ef\u80fd\u7684\u8bcd\u6027\u3002\n\n* \u6240\u6709\u51fa\u73b0\u7684\u8bcd\u8bed\u3002\n\n* \u6bcf\u4e2a\u8bcd\u8bed\u4ee5\u4e0d\u540c\u8bcd\u6027\u51fa\u73b0\u7684\u6b21\u6570\u3002\n\n* \u8bb0\u5f55\u53e5\u9996\u8bcd\u4e3a\u4e0d\u540c\u8bcd\u6027\u7684\u6b21\u6570\u3002\n\n* \u8bb0\u5f55\u53e5\u5b50\u4e2d\u4efb\u4e00\u4e24\u79cd\u8bcd\u6027\u76f8\u90bb\u7684\u6b21\u6570\uff08\u5982\u9047\u5230\uff1a\"\u770b\u7535\u5f71\"\u8fd9\u4e2a\u53e5\u5b50\uff0c\u5219\u6709[\u52a8\u8bcd][\u540d\u8bcd]\u7684\u503c\u52a0\u4e00\u3002\n\n##### 3. \u9488\u5bf9\u524d\u9762\u7edf\u8ba1\u7684\u7ed3\u679c\uff0c\u8fdb\u884c\u5206\u6790\u8ba1\u7b97\u3002\u9700\u8ba1\u7b97\u4ee5\u4e0b\u6570\u636e\u3002\n\n* \u8ba1\u7b97\u6bcf\u7c7b\u8bcd\u6027\u4f5c\u4e3a\u53e5\u9996\u51fa\u73b0\u7684\u6bd4\u4f8b\uff08\u6bd4\u5982:\u52a8\u8bcd\u4e3a\u53e5\u9996\uff0c\u5360\u6240\u6709\u4e0d\u540c\u8bcd\u6027\u4e3a\u53e5\u9996\u4e2d\u7684\u6bd4\u4f8b)\uff0cinin_p[TYPE_NUM]\u3002\n\n* \u8ba1\u7b97\u540e\u8bcd\u56fa\u5b9a\u4e3a\u8bcd\u6027[n]\u65f6\uff0c\u524d\u8bcd\u4e3a\u8bcd\u6027[x]\u5360\u603b\u60c5\u51b5\u7684\u6bd4\u4f8b\uff08\u5982\uff1a\u540e\u8bcd\u56fa\u5b9a\u4e3a[\u52a8\u8bcd]\u65f6\uff0c\u524d\u8bcd[\u540d\u8bcd]\u51fa\u73b0\u7684\u6b21\u6570\u5360\u6240\u6709[x][\u52a8\u8bcd]\u7684\u6bd4\u4f8b\uff09\uff0c\u8bb0\u5f55\u5230tran_p[TYPE_NUM][TYPE_NUM];\n\n* \u8ba1\u7b97\u6bcf\u4e00\u4e2a\u8bcd\u4f5c\u4e3a\u4e0d\u540c\u7c7b\u8bcd\u6027\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5360\u6240\u6709\u8be5\u7c7b\u8bcd\u51fa\u73b0\u603b\u6570\u7684\u6bd4\u4f8b\uff08\u5982\uff1a\"\u4e2d\u56fd\"\u4f5c\u4e3a\u540d\u8bcd\u51fa\u73b0\u7684\u6b21\u6570\u5360\u6240\u6709\u540d\u8bcd\u7684\u6bd4\u4f8b\uff09\uff0c\u8bb0\u5f55\u5230emit_p[TYPE_NUM][WORD_NUM]\n\n##### 4. \u8f93\u5165\u53e5\u5b50\u8fdb\u884c\u8bcd\u6027\u6807\u6ce8\n\n\u8f93\u5165\u7684\u53e5\u5b50\u4e2d\u6bcf\u4e2a\u8bcd\u6709\u591a\u4e2a\u8bcd\u6027\u3002\u6211\u4eec\u9700\u8981\u9009\u51fa\u5408\u9002\u7684\u4e00\u4e2a\u7ec4\u5408\u3002\u6bd4\u5982\u8f93\u5165\u53e5\u5b50\"\u5e0c\u671b \u7684 \u7530\u91ce \u3002\"\u5206\u522b\u6709\u8bcd\u6027\u4e2a\u6570p1,p2,p3,p4\uff0c\u5219\u53ef\u80fd\u7684\u8bcd\u6027\u7ec4\u5408\u6570\u4e3a\uff1aS=p1*p2*p3*p4\uff0c\u6211\u4eec\u9700\u8981\u4eceS\u4e2a\u4e0d\u540c\u7ec4\u5408\u4e2d\u9009\u51fa\u6700\u4f18\u7684\u4e00\u4e2a\u7ec4\u5408\u3002","fe4a632e":"## \u547d\u540d\u5b9e\u4f53\u8bc6\u522b\n\n&emsp;&emsp;\u8bfb\u53d6\u5904\u7406\u597d\u7684\u5411\u91cf\u6587\u4ef6\uff0c\u8bbe\u7f6e\u6bcf\u6279\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u7684\u6b21\u6570m = 15\uff0c\u8fed\u4ee3\u7ec8\u6b62\u6761\u4ef6\u4e3a\u76f8\u90bb\u4e24\u6b21theta\u8ba1\u7b97\u7ed3\u679c\u7684\u5dee\u7684\u65e0\u7a77\u8303\u6570\u5c0f\u4e8e1e-3\uff0c\u91c7\u7528sigmoid\u51fd\u6570\u4f5c\u4e3a\u6fc0\u52b1\u51fd\u6570\uff0c\u4f7f\u7528\u968f\u673a\u6279\u91cf\u68af\u5ea6\u4e0b\u964d\u548cVariable\u7684\u53cd\u5411\u4f20\u64ad\u673a\u5236\u8fdb\u884c\u4f18\u5316\uff0c\u5e76\u5c1d\u8bd5\u4f7f\u7528GPU\u8fdb\u884c\u52a0\u901f\u3002\n\n&emsp;&emsp;\u5728\u6bcf\u6b21\u8fed\u4ee3\u540e\u5206\u522b\u8ba1\u7b97\u8bad\u7ec3\u96c6\u3001\u6d4b\u8bd5\u96c6\u4e2d\u7684F1-Measure\u5e76\u8bb0\u5f55\u3002","9973f922":"## \u5206\u8bcd\u6d4b\u8bd5  \n\n&emsp;&emsp;\u5206\u522b\u4f7f\u7528\u6b63\u5411\u6700\u5927\u5339\u914d\u6a21\u578b\u548c\u9006\u5411\u6700\u5927\u5339\u914d\u6a21\u578b\uff0c\u5bf9\u6d4b\u8bd5\u53e5\u5b50&emsp;\u201c\u7701\u536b\u751f\u8ba1\u751f\u59d4\u8fd1\u65e5\u53d1\u5e03\u6211\u7701\u75be\u75c5\u5e94\u6025\u6551\u52a9\u57fa\u91d1\u5b9e\u65bd\u7ba1\u7406\u529e\u6cd5\u3002\u201d&emsp;\u8fdb\u884c\u6d4b\u8bd5\uff0c\u8f93\u51fa\u4e24\u4e2a\u6a21\u578b\u7684\u8bcd\u5e93\u5927\u5c0f\u548c\u5206\u8bcd\u7ed3\u679c\u3002","0a42bd5c":"## F1-\u8fed\u4ee3\u6b21\u6570 \u6298\u7ebf\u56fe","32e713d9":"****\n****","f8c570e0":"## \u968f\u673a\u5212\u5206\u8bad\u7ec3\u96c6 \n\n\u6211\u4eec\u5c06\u5168\u90e8\u8bed\u6599\u768410%\u53d6\u51fa\u4f5c\u4e3a\u6d4b\u8bd5\u96c6\u4f7f\u7528\uff0c\u4f59\u4e0b\u768490%\u4f5c\u4e3a\u8bad\u7ec3\u96c6","55abfa04":"## \u6570\u636e\u5904\u7406\n&emsp;&emsp;\u5c06\u6570\u636e\u96c6\u4e2d\u7684\u6587\u672c\u6570\u636e\u8f6c\u5316\u4e3a\u5411\u91cf\u3002\n\n&emsp;&emsp;\u8bfb\u53d6\"CommonWords.pkl\"\u4e2d\u7684\u6570\u636e\uff0c\u8bbe\u7f6edim = 500\uff0c\u53d6\u5168\u90e8\u7684\u673a\u6784\u8bcd\u548c\u9ad8\u9891\u7684\u5176\u4ed6\u8bcd\u6784\u6210dim\u7ef4\u5411\u91cf\u5b57\u5178\u3002\n\n&emsp;&emsp;\u8bfb\u53d6\u8bad\u7ec3\u96c6\u3001\u6d4b\u8bd5\u96c6\u4e2d\u7684\u6570\u636e\uff0c\u6839\u636e\u524d\u4e00\u8bcd\u3001\u5f53\u524d\u8bcd\u3001\u540e\u4e00\u8bcd\u5728dim\u7ef4\u5411\u91cf\u5b57\u5178\u4e2d\u7684\u4f4d\u7f6e\uff0c\u4ee5\u53ca\u8be5\u8bcd\u662f\u5426\u4e3a\u673a\u6784\u8bcd\uff0c\u5c06\u6bcf\u4e2a\u8bcd\u8f6c\u5316\u4e3a4\u7ef4\u5411\u91cf\uff0c\u5176\u4e2d\u524d3\u7ef4\u4fdd\u5b58\u8bcd\u7684\u4fe1\u606f\uff0c\u6700\u540e1\u7ef4\u4fdd\u5b58\u6807\u7b7e\u4fe1\u606f\u3002\n\n&emsp;&emsp;\u5982\u679c\u67d0\u4e2a\u8bcd\u4e0d\u5728dim\u7ef4\u5411\u91cf\u5b57\u5178\u4e2d\uff0c\u5219\u5c06\u6b64\u8bcd\u7684\u4f4d\u7f6e\u8bb0\u4e3adim \u2013 1\uff0c\u5373\u7528dim\u7ef4\u5411\u91cf\u5b57\u5178\u7684\u6700\u540e1\u7ef4\u8868\u793a\u975e\u9ad8\u9891\u8bcd\u6c47\u3002\n\n&emsp;&emsp;\u4f7f\u7528\u6b64\u65b9\u6cd5\u5c06\u8bad\u7ec3\u96c6\u3001\u6d4b\u8bd5\u96c6\u4e2d\u7684\u6bcf\u4e2a\u8bcd\u90fd\u8fdb\u884c\u8f6c\u5316\uff0c\u5e76\u5c06\u5904\u7406\u597d\u7684\u6570\u636e\u4fdd\u5b58\u8d77\u6765\u3002","b3c5793b":"## \u6982\u8ff0  \n&emsp;&emsp;\u8bcd\u6027\u6807\u6ce8\uff08Part-of-Speech tagging \u6216 POS tagging)\u662f\u6307\u5bf9\u4e8e\u53e5\u5b50\u4e2d\u7684\u6bcf\u4e2a\u8bcd\u90fd\u6307\u6d3e\u4e00\u4e2a\u5408\u9002\u7684\u8bcd\u6027\uff0c\u4e5f\u5c31\u662f\u8981\u786e\u5b9a\u6bcf\u4e2a\u8bcd\u662f\u540d\u8bcd\u3001\u52a8\u8bcd\u3001\u5f62\u5bb9\u8bcd\u6216\u5176\u4ed6\u8bcd\u6027\u7684\u8fc7\u7a0b\uff0c\u53c8\u79f0\u8bcd\u7c7b\u6807\u6ce8\u6216\u8005\u7b80\u79f0\u6807\u6ce8\u3002\u8bcd\u6027\u6807\u6ce8\u662f\u81ea\u7136\u8bed\u8a00\u5904\u7406\u4e2d\u7684\u4e00\u9879\u57fa\u7840\u4efb\u52a1\uff0c\u5728\u8bed\u97f3\u8bc6\u522b\u3001\u4fe1\u606f\u68c0\u7d22\u53ca\u81ea\u7136\u8bed\u8a00\u5904\u7406\u7684\u8bb8\u591a\u9886\u57df\u90fd\u53d1\u6325\u7740\u91cd\u8981\u7684\u4f5c\u7528\u3002","525f7f6b":"## \u9006\u5411\u6700\u5927\u5339\u914d\u6cd5\uff08RMM\uff09     \n\n&emsp;&emsp;RMM\u7684\u57fa\u672c\u539f\u7406\u4e0eFMM\u57fa\u672c\u76f8\u540c\uff0c\u4e0d\u540c\u7684\u662f\u5206\u8bcd\u7684\u65b9\u5411\u4e0eFMM\u76f8\u53cd\u3002RMM\u662f\u4ece\u5f85\u5206\u8bcd\u53e5\u5b50\u7684\u672b\u7aef\u5f00\u59cb\uff0c\u4e5f\u5c31\u662f\u4ece\u53f3\u5411\u5de6\u5f00\u59cb\u5339\u914d\u626b\u63cf\uff0c\u6bcf\u6b21\u53d6\u672b\u7aefm\u4e2a\u5b57\u4f5c\u4e3a\u5339\u914d\u5b57\u6bb5\uff0c\u5339\u914d\u5931\u8d25\uff0c\u5219\u53bb\u6389\u5339\u914d\u5b57\u6bb5\u524d\u9762\u7684\u4e00\u4e2a\u5b57\uff0c\u7ee7\u7eed\u5339\u914d\u3002  \n\n&emsp;&emsp;\u5b9e\u73b0\u5982\u4e0b\uff1a","8220e2dd":"## \u8bcd\u9891\u7edf\u8ba1\n\n&emsp;&emsp;\u5728\u5168\u90e8\u6570\u636e\u96c6\u4e0a\u7edf\u8ba1\u6240\u6709\u8bcd\u51fa\u73b0\u7684\u9891\u6570\uff0c\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u5220\u9664\u6ce8\u97f3\u4fe1\u606f\uff0c\u5c06\u7ec4\u5408\u8bcd\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u8bcd\uff0c\u8bcd\u6027\u6807\u4e3a\u7ec4\u5408\u8bcd\u7684\u8bcd\u6027\u3002\u6211\u4eec\u5c06\u673a\u6784\u7c7b\u8bcd\u5206\u4e3a\u4e00\u7c7b\uff0c\u5176\u4ed6\u7c7b\u8bcd\u5206\u4e3a\u4e00\u7c7b\uff0c\u6392\u5e8f\u540e\u5c06\u7ed3\u679c\u4ee5\u5408\u9002\u7684\u65b9\u5f0f\u5199\u5165\"CommonWords.pkl\"\u548c\"CommonWords.txt\"\u4e2d\uff0c\u4ee5\u4fbf\u4e8e\u540e\u7eed\u7a0b\u5e8f\u8bfb\u53d6\u548c\u4eba\u5de5\u67e5\u770b\u3002","2fdee59b":"### \u7b97\u6cd5\u5b9e\u73b0  \n1. \u52a8\u6001\u89c4\u5212\u8ba1\u7b97\u6700\u4f18\u8def\u5f84\uff0c\u521d\u59cb\u5316\u540e\u8fdb\u884c\u9012\u63a8\uff0c\u7ec8\u6b62\u540e\u8fdb\u884c\u6700\u4f18\u8def\u5f84\u56de\u6eaf\uff1b\n1. \u7edf\u8ba1\u6982\u7387\u77e9\u9635\u7684\u521d\u503c\u8bbe\u4e3a1e-9\uff0c\u9632\u6b62\u53d6\u5bf9\u6570\u503c\u65f6\u6982\u7387\u4e0d\u7b26\u5408\u5b9a\u4e49\u57df\u8981\u6c42\uff0c\u4e5f\u7b97\u4e00\u79cd\u6570\u636e\u5e73\u6ed1\u65b9\u6cd5\uff1b\n1. \u5ffd\u7565\u8bed\u6599\u5e93\u4e2d\u4e0d\u5408\u7406\u7684\u6807\u6ce8\uff1b\n1. \u8ba4\u4e3a\u9047\u5230'\u3002', '\uff0c', '\uff01', '\uff1f'\u5219\u53e5\u5b50\u7ed3\u675f\uff0c\u5f00\u59cb\u7edf\u8ba1\u4e0b\u4e00\u4e2a\u53e5\u5b50\uff1b\n1. \u5176\u4ed6\u5b9e\u73b0\u65b9\u6cd5\u5747\u6709\u8be6\u7ec6\u6ce8\u91ca\u3002","73817534":"## \u6982\u8ff0  \n\n&emsp;&emsp;\u8bcd\u662f\u6700\u5c0f\u7684\u80fd\u591f\u72ec\u7acb\u6d3b\u52a8\u7684\u6709\u610f\u4e49\u7684\u8bed\u8a00\u6210\u5206\uff0c\u4e00\u822c\u5206\u8bcd\u662f\u81ea\u7136\u8bed\u8a00\u5904\u7406\u7684\u7b2c\u4e00\u9879\u6838\u5fc3\u6280\u672f\u3002\u82f1\u6587\u4e2d\u6bcf\u4e2a\u53e5\u5b50\u90fd\u5c06\u8bcd\u7528\u7a7a\u683c\u6216\u6807\u70b9\u7b26\u53f7\u5206\u9694\u5f00\u6765\uff0c\u800c\u5728\u4e2d\u6587\u4e2d\u5f88\u96be\u5bf9\u8bcd\u7684\u8fb9\u754c\u8fdb\u884c\u754c\u5b9a\uff0c\u96be\u4ee5\u5c06\u8bcd\u5212\u5206\u51fa\u6765\u3002\u5728\u6c49\u8bed\u4e2d\uff0c\u867d\u7136\u662f\u4ee5\u5b57\u4e3a\u6700\u5c0f\u5355\u4f4d\uff0c\u4f46\u662f\u4e00\u7bc7\u6587\u7ae0\u7684\u8bed\u4e49\u8868\u8fbe\u5374\u4ecd\u7136\u662f\u4ee5\u8bcd\u6765\u5212\u5206\u7684\u3002\u56e0\u6b64\u5904\u7406\u4e2d\u6587\u6587\u672c\u65f6\uff0c\u9700\u8981\u8fdb\u884c\u5206\u8bcd\u5904\u7406\uff0c\u5c06\u53e5\u5b50\u8f6c\u4e3a\u8bcd\u7684\u8868\u793a\uff0c\u8fd9\u5c31\u662f\u4e2d\u6587\u5206\u8bcd\u3002  \n\n&emsp;&emsp;\u76ee\u524d\u4e3b\u6d41\u5206\u8bcd\u65b9\u6cd5\uff1a1) \u57fa\u4e8e\u89c4\u5219\uff1b2) \u57fa\u4e8e\u7edf\u8ba1\uff1b3)\u4e8c\u8005\u6df7\u5408\u3002  \n\n&emsp;&emsp;\u57fa\u4e8e\u89c4\u5219\u7684\u5206\u8bcd\uff1a\u4e3b\u8981\u662f\u4eba\u5de5\u5efa\u7acb\u8bcd\u5e93\u4e5f\u53eb\u505a\u8bcd\u5178\uff0c\u901a\u8fc7\u8bcd\u5178\u5339\u914d\u7684\u65b9\u5f0f\u5bf9\u53e5\u5b50\u8fdb\u884c\u5212\u5206\u3002\u5176\u5b9e\u73b0\u7b80\u5355\u9ad8\u6548\uff0c\u4f46\u662f\u5bf9\u672a\u767b\u9646\u8bcd\u5f88\u96be\u8fdb\u884c\u5904\u7406\u3002\u4e3b\u8981\u6709\u6b63\u5411\u6700\u5927\u5339\u914d\u6cd5\uff0c\u9006\u5411\u6700\u5927\u5339\u914d\u6cd5\u4ee5\u53ca\u53cc\u5411\u6700\u5927\u5339\u914d\u6cd5\u3002","26ecc586":"## \u7f29\u5c0f\u6570\u636e\u96c6  \n\n&emsp;&emsp;\u7531\u4e8e\u7b97\u529b\u9650\u5236\uff0c\u5728\u5168\u90e8\u6570\u636e\u96c6\u4e0a\u5b9e\u73b0\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u7684\u5404\u4e2a\u6b65\u9aa4\u6240\u9700\u65f6\u95f4\u90fd\u8f83\u957f\uff0c\u6211\u4eec\u9009\u62e9\u5168\u90e8\u6570\u636e\u7684\u4e00\u5c0f\u90e8\u5206\u8fdb\u884c\u5b9e\u9a8c\uff0c\u8fd9\u6837\u53ef\u4ee5\u5927\u5927\u51cf\u5c11\u7b49\u5f85\u65f6\u95f4\uff0c\u4f7f\u5b9e\u9a8c\u66f4\u6709\u6548\u7387\u3002","656455d6":"## \u7ef4\u7279\u6bd4\u7b97\u6cd5\uff08\u9690\u9a6c\u5c14\u53ef\u592bHMM\u6a21\u578b\uff09","c4f5e9d5":"## \u751f\u6210\u6d4b\u8bd5\u6570\u636e  \n\n\u5bf9\u968f\u673a\u5212\u5206\u7684\u6d4b\u8bd5\u96c6\uff0c\u6211\u4eec\u9700\u8981\u53bb\u9664\u5176\u4e2d\u6807\u6ce8\u7684\u8bcd\u6027\uff0c\u624d\u80fd\u591f\u4f5c\u4e3a\u201c\u6807\u51c6\u7b54\u6848\u201d\u4e0e\u6211\u4eec\u6a21\u578b\u5206\u8bcd\u7684\u7ed3\u679c\u8fdb\u884c\u5bf9\u6bd4\uff0c\u6216\u8005\u4f5c\u4e3a\u8bcd\u6027\u6807\u6ce8\u6a21\u578b\u7684\u8f93\u5165\u3002","06f65cfe":"## \u6b63\u5411\u6700\u5927\u5339\u914d\u6cd5\uff08FMM\uff09\n\nFMM\u7684\u6b65\u9aa4\u662f\uff1a\n\n1. \u4ece\u5de6\u5411\u53f3\u53d6\u5f85\u5206\u6c49\u8bed\u53e5\u7684m\u4e2a\u5b57\u4f5c\u4e3a\u5339\u914d\u5b57\u6bb5\uff0cm\u4e3a\u8bcd\u5178\u4e2d\u6700\u957f\u8bcd\u7684\u957f\u5ea6\u3002  \n\n1. \u67e5\u627e\u8bcd\u5178\u8fdb\u884c\u5339\u914d\u3002  \n\n1. \u82e5\u5339\u914d\u6210\u529f\uff0c\u5219\u5c06\u8be5\u5b57\u6bb5\u4f5c\u4e3a\u4e00\u4e2a\u8bcd\u5207\u5206\u51fa\u53bb\u3002  \n\n1. \u82e5\u5339\u914d\u4e0d\u6210\u529f\uff0c\u5219\u5c06\u8be5\u5b57\u6bb5\u6700\u540e\u4e00\u4e2a\u5b57\u53bb\u6389\uff0c\u5269\u4e0b\u7684\u5b57\u4f5c\u4e3a\u65b0\u5339\u914d\u5b57\u6bb5\uff0c\u8fdb\u884c\u518d\u6b21\u5339\u914d\u3002  \n\n1. \u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u76f4\u5230\u5207\u5206\u6240\u6709\u8bcd\u4e3a\u6b62\u3002  \n\n\u5b9e\u73b0\u5982\u4e0b\uff1a","d89206fe":"## \u6570\u636e\u6e05\u6d17  \n\n\u7531\u4e8e\u8bed\u6599\u5e93\u4e2d\u6709\u5f88\u591a\u5f62\u5982&emsp;\u201c[\u4e2d\u56fd\/ns  \u653f\u5e9c\/n]nt\u201d&emsp;\u8fd9\u6837\u7684\u590d\u5408\u8bcd\uff0c\u4e3a\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u4eec\u5c06\u8fd9\u79cd\u8bcd\u4f5c\u4e3a\u4e00\u4e2a\u8bcd\u5bf9\u5f85\uff0c\u8bcd\u6027\u53d6\u6574\u4f53\u8bcd\u6027\uff0c\u7f16\u5199\u4e86\u4e0b\u9762\u7684\u51fd\u6570\u3002","05f78d8e":"&emsp;&emsp;\u4ee5\u4e0b\u4ee3\u7801\u4f7f\u7528\u6a21\u578b\u5bf9\u8f93\u5165\u8fdb\u884c\u5206\u8bcd\u6216\u8bcd\u6027\u6807\u6ce8\uff0c\u8c03\u7528\u8ba1\u7b97\u51c6\u786e\u7387\u3001\u53ec\u56de\u7387\u548cF1\u503c\u7684\u51fd\u6570\uff0c\u5e76\u8ba1\u7b97\u91cf\u7b97\u6cd5\u6548\u7387\u3002\u5bf9\u5206\u8bcd\u6d4b\u8bc4\u65f6\u53d66000\u4e2a\u53e5\u5b50\uff0c\u5bf9\u8bcd\u6027\u6807\u6ce8\u6d4b\u8bc4\u65f6\u53d6500\u4e2a\u53e5\u5b50\u3002","2d166c6f":"## \u8865\u5145\n\n\u200b        \u7531\u4e8eNER\u4e2d\u68af\u5ea6\u4e0b\u964d\u622a\u6b62\u8bef\u5dee\u8bbe\u7f6e\u8fc7\u5927\uff0c\u5bfc\u81f4\u6a21\u578b\u6b20\u62df\u62df\u5408(Underfitting), \u51fa\u73b0\u4e86\u6a21\u578b\u6b63\u786e\u7387\u4e0d\u9ad8\u7684\u7684\u60c5\u51b5\u3002\u5728\u8c03\u8bd5\u8fc7\u7a0b\u4e2d\uff0c\u8be5\u6a21\u578b\u53d6\u5f97\u7684**\u6700\u597d\u6210\u7ee9**F1\u503c\u5927\u6982\u5728**80%-90%**\uff0c\u7531\u4e8e\u6ca1\u6709\u4fdd\u5b58\u4e2d\u95f4\u7ed3\u679c\uff0c\u4e14\u65f6\u95f4\u6709\u9650\uff0c\u6211\u4eec\u6ca1\u6709\u529e\u6cd5\u5bf9\u518d\u8fdb\u884c\u4e00\u6b21\u8bad\u7ec3\u3002\n\n\u200b\t\t\u4f46\u662f\uff0c\u5bf9NER\u6a21\u5757\u8fdb\u884c\u5355\u72ec\u6d4b\u8bd5\uff0c\u6211\u4eec\u5c06\u5728\u8bad\u7ec3\u96c6\u3001\u9a8c\u8bc1\u96c6\u3001\u6d4b\u8bd5\u96c6\u4e09\u4e2a\u96c6\u5408\u4e0a\u8fdb\u884c\u8bad\u7ec3\uff0c\u5f97\u5230\u4e86\u8f83\u597d\u7684\u7ed3\u679c\u3002\u5982\u4e0b\u6240\u793a\uff1a\n\n![F1-Measure.png](attachment:a37fee26-7455-4726-9e89-d05435aa01d9.png)\n\n\u200b\t\t\u6700\u7ec8\u7b2c4926\u6b21\u8fed\u4ee3\uff0c\u8bad\u7ec3\u96c6\u4e2dF1\u503c\uff1a0.9221183800623053\uff1b\u9a8c\u8bc1\u96c6\u4e2dF1\u503c\uff1a0.7441860465116279\uff1b\u6d4b\u8bd5\u96c6\u4e2dF1\u503c\uff1a0.8227848101265823.\n****\n****","01ffd7c1":"## \u76f8\u5173\u7b2c\u4e09\u65b9\u5e93\u4ee5\u53ca\u8f93\u5165\u8bed\u6599\u5e93  \n\n* \u5206\u8bcd\u548c\u8bcd\u6027\u6807\u6ce8\u4f7f\u7528\u4e862014\u7248\u4eba\u6c11\u65e5\u62a5\u8bed\u6599\u5e93;\n\n* \u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u4f7f\u7528\u4e861998\u7248\u7684\u4eba\u6c11\u65e5\u62a5\u8bed\u6599\u5e93\u3002","1a4e2680":"&emsp;&emsp;\u4f7f\u7528\u4ece\u8bed\u6599\u5e93\u4e2d\u5206\u51fa\u7684\u6d4b\u8bd5\u96c6\uff0c\u5206\u522b\u5bf9\u5206\u8bcd\u548c\u8bcd\u6027\u6807\u6ce8\u6548\u679c\u8fdb\u884c\u6d4b\u8bc4\u3002\u4e3a\u4e86\u80fd\u591f\u5355\u72ec\u5c55\u73b0\u4e24\u90e8\u5206\u4efb\u52a1\u7684\u6548\u679c\uff0c\u6211\u4eec\u5728\u4f7f\u7528\u7ef4\u7279\u6bd4\u7b97\u6cd5\u8fdb\u884c\u8bcd\u6027\u6807\u6ce8\u65f6**\u4e0d\u4f7f\u7528RMM\u5206\u8bcd\u6a21\u578b\u7684\u7ed3\u679c**\uff0c\u800c\u662f\u76f4\u63a5\u4ece\u539f\u59cb\u8bed\u6599\u5e93\u4e2d\u5236\u4f5c\u6d4b\u8bd5\u8f93\u5165\uff08\u5728\u4e4b\u524d\u7684cell\u5df2\u7ecf\u5b8c\u6210\uff09\u3002  \n\n&emsp;&emsp;\u6b64\u90e8\u5206\u4ee3\u7801\u53c2\u8003\u4e86[xuzhengfei](https:\/\/github.com\/xuzf-git)\u7684github\u9879\u76ee[WordSegment-and-PosTag](https:\/\/github.com\/xuzf-git\/WordSegment-and-PosTag). \u539f\u672c\u4ee5\u4e3a\u53ea\u662f\u627e\u5230\u4e86\u4e00\u4e2a\u5199\u7684\u5f88\u6e05\u6670\u7684\u9879\u76ee\uff0c\u6ca1\u60f3\u5230\u4e5f\u662f\u5317\u7406\u5de5\u7684\u5b66\u751f\u3002  \n\n## \u8bc4\u6d4b\u6307\u6807  \n\n### \u6df7\u6dc6\u77e9\u9635\n\n![image.png](attachment:66d18fc2-2fa0-4aec-b35e-b87b7683bdb9.png)  \n\n&emsp;&emsp;\u6df7\u6dc6\u77e9\u9635\u4e2dT\u3001F\u3001P\u3001N\u7684\u542b\u4e49\uff1a\n&emsp;&emsp;T: \u771f\uff0cF: \u5047\uff0cP: \u9633\u6027\uff0cN: \u9634\u6027\n&emsp;&emsp;\u7136\u540e\u7ec4\u5408\uff1a\n&emsp;&emsp;TP: \u771f\u9633\u6027 TN: \u771f\u9634\u6027 FP: \u5047\u9633\u6027 FN: \u5047\u9634\u6027\n\n### \u7cbe\u786e\u7387\uff08\u51c6\u786e\u7387\uff09\uff1a\n\n&emsp;&emsp;\u4f60\u8ba4\u4e3a\u5bf9\u7684\u4e2d\uff0c\u6709\u591a\u5c11\u786e\u5b9e\u662f\u5bf9\u7684\uff0c\u6240\u5360\u7684\u6bd4\u7387\u3002\n\n&emsp;&emsp;\u4f8b\u5982\uff1a\u4f60\u9884\u6d4b \u5bf9\u7684\u6709 10\uff08TP+FP\uff09\u4e2a\uff0c\u5176\u4e2d8\u4e2a\u786e\u5b9e\u662f\u5bf9\u7684\uff0c\u5219 \u7cbe\u786e\u7387 80%\n\n&emsp;&emsp;\u4f60\u8ba4\u4e3a\u5bf9\u7684\uff1a\u5373\u9884\u6d4b\u503c\u4e3a1\u7684\u6570\u91cf = TP + FP\n\n&emsp;&emsp;\u6709\u591a\u5c11\u786e\u5b9e\u662f\u5bf9\u7684\uff1aTP\n\n&emsp;&emsp;Precision = TP \/ (TP + FP)\n\n### \u53ec\u56de\u7387\uff1a\n\n&emsp;&emsp;\u672c\u6765\u662f\u5bf9\u7684\u4e2d\uff0c\u4f60\u53ec\u56de\u4e86\u591a\u5c11\u5bf9\u7684\uff0c\u6240\u5360\u7684\u6bd4\u7387 :\n\n&emsp;&emsp;\u4f8b\u5982\uff1a\u5e94\u8be5\u6709 10 \u4e2a\u662f\u5bf9\u7684\uff0c\u4f46\u662f\u4f60\u53ea\u731c\u4e2d\u4e86 7\uff08TP+FN\uff09\u4e2a\uff0c\u5219 \u53ec\u56de\u7387 70%\n\n&emsp;&emsp;\u672c\u6765\u662f\u5bf9\u7684\uff1a\u5373\u771f\u5b9e\u503c\u4e3a1\u7684\u6570\u91cf = TP + FN\n\n&emsp;&emsp;\u4f60\u53ec\u56de\u4e86\u591a\u5c11\u5bf9\u7684\uff1aTP\n\n&emsp;&emsp;Recall = TP \/\uff08TP + FN\uff09\n\n### F1\u503c\uff1a\n\n&emsp;&emsp;\u7cbe\u786e\u7387\u8d8a\u9ad8\u8d8a\u597d\uff0c\u53ec\u56de\u7387\u8d8a\u9ad8\u8d8a\u597d\u3002\n\n![image.png](attachment:447855b5-c989-4687-a50e-435c39eef6ac.png)\n\n### \u6548\u7387\n\n&emsp;&emsp;\u53ef\u4ee5\u4f7f\u7528\u5904\u7406\u6587\u672c\u6587\u4ef6\u7684\u901f\u5ea6\u8868\u793a\u3002","c07fda89":"\u5904\u7406\u5b8c\u6210\u540e\u8bed\u6599\u5982\u4e0b\uff1a  \n![image.png](attachment:1ac4b5c1-b91b-44c4-a894-b6b5ba35fc89.png)\n\n****\n****"}}