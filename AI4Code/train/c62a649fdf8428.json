{"cell_type":{"03724c47":"code","35374ff0":"code","3038bca9":"code","1ab5c6a4":"code","3a72f4ad":"code","0aebc9b1":"code","d3f4d1fa":"code","5b5c26dd":"code","7c0ac428":"code","29992b4c":"code","8e0016ef":"code","d8f22757":"code","bccc12c8":"code","5f377d88":"code","dbfff9da":"code","479becd5":"code","ba1b5813":"code","e5c9ea88":"code","32abfc24":"code","f4e4e729":"code","80da8fe7":"code","b19549e0":"markdown","5f78d8dd":"markdown","bf6310bd":"markdown","a3f0634f":"markdown","6cb018bf":"markdown","416056e8":"markdown","9c6942e0":"markdown","38de2733":"markdown","c5261fcd":"markdown","43e8629c":"markdown","99c8c8b9":"markdown","e9ee2922":"markdown"},"source":{"03724c47":"import matplotlib.pyplot as plt\nimport datetime as dt\nimport xarray as xr\nimport numpy as np\nfrom datetime import datetime\nimport dask.dataframe as dd\nimport time\nimport plotly\nplotly.offline.init_notebook_mode(connected=True)\nimport plotly.graph_objects as go\nimport pandas as pd","35374ff0":"# In[2]:\n\n\nzone, year = 'NW','2016'\nfname = '\/kaggle\/input\/meteonet\/'+zone+\"_Ground_Stations\/\"+zone+\"_Ground_Stations\/\"+zone+\"_Ground_Stations_\"+year+\".csv\"\ndf = pd.read_csv(fname,parse_dates=[4],infer_datetime_format=True)\ndf\n\n\n# In[3]:\n\n\ndf[\"lat\"].isnull().sum()\n\n\n#openinng the csv file and filter it for year 2016 and region Notrh-West\n\n# In[4]:\n\n\ndf2 = df.drop_duplicates(subset=[\"number_sta\",\"date\"],keep=\"last\",inplace=False)\n\n\n# In[5]:\n\n\ndf2\n\n#df2 is a dataframe where we brutally removed the duplicates entries\n\n# In[6]:\n\n\ndf2[\"lat\"].isnull().sum()\n\n\n# In[7]:\n\n\ndf2_filter=df2[(df2[\"date\"]>=\"2016-02-01\") & (df2[\"date\"]<\"2016-03-01\")]\ndf2_filter\n\n\n# In[8]:\n\n\ndf2_filter[\"lat\"].isnull().sum()\n\n\n# we only keep the month Febuary\n\n# In[9]:\n\n\ndf_reindex=df2_filter.set_index([\"number_sta\",\"date\"])\ndf_reindex\n\n\n# In[10]:\n\n\ndf_reindex[\"lat\"].isnull().sum()\n\n#reset index on station number and date\n\n# In[11]:\n\n\ndd = df2_filter[(df2_filter[\"number_sta\"]!=28239002)&\n            (df2_filter[\"number_sta\"]!=36128001)&\n            (df2_filter[\"number_sta\"]!=56240003)&\n            (df2_filter[\"number_sta\"]!=86027001)]\n\n\n# In[12]:\n\n\ndd[dd[\"number_sta\"]==28239002]\n\n\n# In[13]:\n\n\ndd=dd.set_index([\"number_sta\",\"date\"])\ndd\n\n\n# In[14]:\n\n\nxarr = dd.to_xarray()\nxarr\n\n\n# In[15]:\n\n\ndef build_stations_list():\n    return xarr[\"number_sta\"].values\nimport math\ndef build_lat_long():\n    for stanum in build_stations_list():\n        lat = xarr.sel(number_sta=stanum)[\"lat\"].values[0]\n        lon = xarr.sel(number_sta=stanum)[\"lon\"].values[0]\n        if math.isnan(lat) or math.isnan(lon):\n            print(\"found nan in station \"+str(stanum))\n    print(\"ok\")\nbuild_lat_long()\n\n\n# we build the xarray\n\n# In[16]:\n\n\nxarr.to_netcdf('2016-02.netcdf')","3038bca9":"#open custom netcdf\nc_ncdf = xr.open_dataset(\"\/kaggle\/input\/201602\/2016-02.netcdf\")\n#c_ncdf.sel(number_sta=14066001,date=slice(datetime.strptime(\"2016-02-01\",\"%Y-%m-%d\"),datetime.strptime(\"2016-02-02\",\"%Y-%m-%d\")))","1ab5c6a4":"def __convert_to_datetime(d):\n    '''convert a date'''\n    return datetime.strptime(np.datetime_as_string(d,unit='s'), '%Y-%m-%dT%H:%M:%S')","3a72f4ad":"def getDataSets(date,station,variable):\n    '''returns sensor data, prediction values for a date, a station id and one variable given'''\n    #get variable\n    if variable == \"temperature\":\n        v1 = \"t\"\n        level = \"2m\"\n        param2 = \"t2m\"\n    elif variable == \"wind_speed\":\n        v1 = \"ff\"\n        level = \"10m\"\n        param2 = \"ws\"\n    elif variable == \"wind_direction\":\n        v1 = \"dd\"\n        level = \"10m\"\n        param2= \"p3031\"\n    elif variable == \"precipitation\":\n        v1 = \"precip\"\n        level = \"PRECIP\"\n        param2 = \"tp\"\n    elif variable == \"humidity\":\n        v1 = \"hu\"\n        level = \"2m\"\n        param2 = \"r\"\n    elif variable == \"dew_point\":\n        v1 = \"td\"\n        level = \"2m\"\n        param2 = \"d2m\"\n    elif variable == \"pression\":\n        v1 = \"psl\"\n        level = \"P_sea_level\"\n        param2 = \"msl\"\n    else:\n        raise Exception(\"wrong parameter\")\n    \n    c_ncdf = xr.open_dataset(\"\/kaggle\/input\/201602\/2016-02.netcdf\")\n    ground_station = c_ncdf.sel(number_sta=station,date=slice(date,date+dt.timedelta(days=1)))[v1].values\n    gs_dates = c_ncdf.sel(number_sta=station,date=slice(date,date+dt.timedelta(days=1)))[\"date\"].values\n    \n    zone = \"NW\"\n    model = \"arome\"\n    MODEL = \"AROME\"\n    \n    #open weather model\n    directory = '\/kaggle\/input\/meteonet\/' + zone + '_weather_models_2D_parameters_' + str(date.year) + str(date.month).zfill(2) + '\/' + str(date.year) + str(date.month).zfill(2) + '\/'\n    fname = directory + f'{MODEL}\/{level}\/{model}_{level}_{zone}_{date.year}{str(date.month).zfill(2)}{str(date.day).zfill(2)}000000.nc'\n    data = xr.open_dataset(fname)\n    \n    l_lat = data[\"latitude\"].values\n    l_lon = data[\"longitude\"].values\n   \n    \n    lat=c_ncdf.sel(number_sta=station)[\"lat\"].values[0]\n    lon = c_ncdf.sel(number_sta=station)[\"lon\"].values[0]\n    steplat = l_lat[1]-l_lat[0]\n    steplon = l_lon[1]-l_lon[0]\n    series = data.sel(latitude=slice(lat-steplat\/2,lat+steplat\/2),longitude=slice(lon-steplon\/2,lon+steplon\/2))[param2].values\n    \n    \n    series_axis = data[\"valid_time\"].values\n    \n    unit = data.sel(latitude=slice(lat-steplat\/2,lat+steplat\/2),longitude=slice(lon-steplon\/2,lon+steplon\/2))[param2].attrs[\"units\"]\n    \n    #return ((ground_station,gs_dates),(series.reshape(25),series_axis))\n    \n    #convert dates\n    a = []\n    b = []\n    \n    for d in gs_dates:\n        a.append(__convert_to_datetime(d))\n        \n    for d in series_axis:\n        b.append(__convert_to_datetime(d))\n    \n    return {\"donnees_capteur\":(ground_station,a),\"prediction\":(series.reshape(25),b),\"unit\":unit}","0aebc9b1":"t1 = time.time() \nt = getDataSets(datetime.strptime(\"2016-02-01\",\"%Y-%m-%d\"),14066001,\"temperature\")\nt2 = time.time()\nprint (\"time to open\"+str(t2-t1))\nt","d3f4d1fa":"import ipywidgets as w","5b5c26dd":"fig = go.FigureWidget()\nc1 = w.DatePicker(description=\"select the date\")\n#c2 = w.IntText(description=\"station id\")\nc3 = w.Dropdown(options=[\"temperature\",\"wind_speed\",\"wind_direction\",\"precipitation\",\"humidity\",\"dew_point\",\"pression\"])","7c0ac428":"def plot(date,station,variable):\n    '''replot the graph with respect to the given parameters'''\n    d = getDataSets(date,station,variable)\n    \n    (a,b) = d[\"donnees_capteur\"]\n    (c,e) = d[\"prediction\"]\n    \n    unit = d[\"unit\"]\n    \n    t1 = go.Scatter(x=b,y=a,name=\"sensor data\")\n    t2 = go.Scatter(x=e,y=c,name=\"prediction\")\n    fig.data=[]\n    fig.add_trace(t1)\n    fig.add_trace(t2)\n    fig.update_layout(title=\"comparing the sensor data with the prediction model for the day\",\n                     yaxis_title=unit)","29992b4c":"def build_stations_list():\n    '''build the station list'''\n    data = xr.open_dataset(\"\/kaggle\/input\/201602\/2016-02.netcdf\")\n    return data[\"number_sta\"].values\n\nc2 = w.Dropdown(options=build_stations_list(),description=\"select the station\")","8e0016ef":"class p:\n    #class that contains plot parameteres\n    date = datetime.strptime(\"01-02-2016\",\"%d-%m-%Y\")\n    station = 14066001\n    variable = \"temperature\"\n    \nclass dateObject:\n    #default datepicker settings\n    year=2016\n    month=2\n    day=1\n\n    \n#the three widgets listeners\ndef hook_c1(change):\n    print(change)\n    try:\n        date = change[\"new\"][\"value\"]\n        p.date = datetime(int(date[\"year\"]),int(date[\"month\"])+1,int(date[\"date\"]))\n        plot(p.date,p.station,p.variable)\n    except Exception:\n        pass\ndef hook_c2(change):\n    try:\n        ar = build_stations_list()\n        p.station = ar[change[\"new\"][\"index\"]]\n        #p.station = change[\"new\"][\"value\"]\n        plot(p.date,p.station,p.variable)\n    except Exception:\n        pass\ndef hook_c3(change):\n    ar = [\"temperature\",\"wind_speed\",\"wind_direction\",\"precipitation\",\"humidity\",\"dew_point\",\"pression\"]\n    p.variable = ar[change[\"new\"][\"index\"]]\n    plot(p.date,p.station,p.variable)\n    \nc1.observe(hook_c1)\nc2.observe(hook_c2)\nc3.observe(hook_c3)\nc1.value = dateObject\nplot(p.date,p.station,p.variable)","d8f22757":"wbox = w.VBox([c1,c2,c3,fig])\nwbox","bccc12c8":"!pip install geoviews --upgrade\n!pip install ipyleaflet==0.12.3\n!jupyter nbextension enable --py --sys-prefix ipyleaflet --user","5f377d88":"import ipyleaflet as ipyl\nfrom ipyleaflet import Map, Marker, MarkerCluster\nmapi = ipyl.Map(center=(45,0),zoom=4)\nmapi","dbfff9da":"stations_list = build_stations_list()\nstations_list","479becd5":"import math\ndef build_lat_long():\n    '''build without returning it a list of coordinates but raise an exception if it has found nan values'''\n    for stanum in build_stations_list():\n        lat = c_ncdf.sel(number_sta=stanum)[\"lat\"].values[0]\n        lon = c_ncdf.sel(number_sta=stanum)[\"lon\"].values[0]\n        if math.isnan(lat) or math.isnan(lon):\n            raise Exception(\"nan found\")\n    print(\"ok\")\nbuild_lat_long()","ba1b5813":"class MyMark(Marker):\n    '''Custom marker that, when clicked, update the station id in the plot'''\n    def __init__(self,sta_num):\n        self.sta_num = sta_num\n        lat = c_ncdf.sel(number_sta=sta_num)[\"lat\"].values[0]\n        lon = c_ncdf.sel(number_sta=sta_num)[\"lon\"].values[0]\n        super().__init__(location=(lat,lon),draggable=False)\n        super().on_click(self.printsta)\n    def printsta(self,*args,**kwargs):\n        p.station = self.sta_num\n        c2.value = p.station\n        plot(p.date,p.station,p.variable)","e5c9ea88":"def build_marker_list():\n    '''build a cluster of markers'''\n    c_ncdf = xr.open_dataset(\"\/kaggle\/input\/201602\/2016-02.netcdf\")\n    station_list = build_stations_list()\n    m_list = []\n    for stanum in stations_list:\n        lat = c_ncdf.sel(number_sta=stanum)[\"lat\"].values[0]\n        lon = c_ncdf.sel(number_sta=stanum)[\"lon\"].values[0]\n        marker = MyMark(stanum)\n        m_list.append(marker)\n        \n    m_list=tuple(m_list)\n    print(m_list)\n    return MarkerCluster(markers=m_list)","32abfc24":"ml = build_marker_list()","f4e4e729":"mapi.add_layer(ml)\nmapi","80da8fe7":"wboxv2 = w.VBox([mapi,wbox])\nwboxv2","b19549e0":"# 2 Section IpyLeaflet ","5f78d8dd":"add the marker cluster to the map","bf6310bd":"# 1 Section convert to netcdf","a3f0634f":"this notebook is a demo of the MeteoNet dataset and is part of the DataViz challenge\nthe notebook contains two sections :\nthe first one will convert ground station data to netcdf format\nthe second one will create an interactive mini-application that allows an unser to select a ground station and compare the actual data with the data predicted by the model.\n","6cb018bf":"measure the time taken by one call of \"getDataSets\" (which includes opening netcdf files)","416056e8":"refresh the notebook","9c6942e0":"create a figure with two of the three widgets","38de2733":"hack ipyleaflet","c5261fcd":"put them together","43e8629c":"cree une figure et deux des trois widgets","99c8c8b9":"testing ipyleaflet. If the hack worked, you should see a map","e9ee2922":"this cell is an example that will take the month of Febuary 2016 and convert it from its csv file to netcdf"}}