{"cell_type":{"860b121b":"code","a241ad29":"code","962241ae":"code","97d551d2":"code","d4d43b50":"code","9ac6f98b":"code","aabb2a53":"code","b9d0621d":"code","16684a39":"code","e86ad085":"code","f5ca3a06":"code","093fca47":"code","4b071365":"code","c4402f2e":"code","62b4ae17":"code","b192694d":"code","7b370a9a":"code","bcdb3ead":"code","3c7adf1d":"code","af78dbae":"code","d8c59e2b":"code","32bf94f9":"code","e05acb6c":"code","c4124e4e":"code","d5134e34":"code","dc702c04":"code","4838662c":"code","0a59e976":"code","7f61448b":"code","98eac245":"code","00e40f8b":"code","61a0aac5":"code","cc2a17af":"markdown"},"source":{"860b121b":"# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a241ad29":"# Package\nimport os # accessing directory structure\nimport numpy as np\nimport pandas as pd\nfrom pandas.io.json import json_normalize\nimport matplotlib.pyplot as plt\nfrom pylab import rcParams\nimport seaborn as sns\ncolor = sns.color_palette()\n\n%matplotlib inline\n\nfrom plotly import tools\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\nfrom sklearn import model_selection, preprocessing, metrics\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\n\nimport tensorflow as tf\n\nimport itertools\n\n\npd.options.mode.chained_assignment = None\npd.options.display.max_columns = 999","962241ae":"df = pd.read_csv('..\/input\/us-births-2018\/US_births(2018).csv', \n                 low_memory=False)","97d551d2":"df.head()","d4d43b50":"df.drop(df.columns.difference(\n        ['DBWT','CIG_0','DOB_YY','SEX','MAGER','ILP_R','PRECARE'\n        ,'PWgt_R','M_Ht_In' ]), 1, inplace=True)","9ac6f98b":"df.head()","aabb2a53":"df.groupby('ILP_R').mean()['DBWT'].plot(kind='bar')\nplt.show()","b9d0621d":"df.groupby('M_Ht_In').mean()['DBWT'].plot(kind='bar')\nplt.show()","16684a39":"df.groupby('PWgt_R').mean()['DBWT'].plot(kind='bar')\nplt.show()","e86ad085":"def horizontal_bar_chart(df, color):\n    trace = go.Bar(\n        y=df.index[::-1],\n        x=df.values[::-1],\n        showlegend=False,\n        orientation = 'h',\n        marker=dict(\n            color=color,\n        ),\n    )\n    return trace\n\n# Cigaret\ndf1 = df.groupby('CIG_0')['DBWT'].agg(['count', 'mean'])\ndf1.columns = [\"count\", \"mean\"]\ndf1 = df1.sort_values(by=\"count\", ascending=False)\ntrace1 = horizontal_bar_chart(df1[\"count\"].head(10), 'rgba(50, 171, 96, 0.6)')\ntrace2 = horizontal_bar_chart(df1[\"mean\"].head(10), 'rgba(50, 171, 96, 0.6)')\n\n# Mother\u2019s Height in Total Inches\ndf1 = df.groupby('M_Ht_In')['DBWT'].agg(['count', 'mean'])\ndf1.columns = [\"count\", \"mean\"]\ndf1 = df1.sort_values(by=\"count\", ascending=False)\ntrace3 = horizontal_bar_chart(df1[\"count\"].head(10), 'rgba(50, 171, 96, 0.6)')\ntrace4 = horizontal_bar_chart(df1[\"mean\"].head(10), 'rgba(50, 171, 96, 0.6)')\n\n# SEX\ndf1 = df.groupby('SEX')['DBWT'].agg(['count', 'mean'])\ndf1.columns = [\"count\", \"mean\"]\ndf1 = df1.sort_values(by=\"count\", ascending=False)\ntrace5 = horizontal_bar_chart(df1[\"count\"].head(10), 'rgba(50, 171, 96, 0.6)')\ntrace6 = horizontal_bar_chart(df1[\"mean\"].head(10), 'rgba(50, 171, 96, 0.6)')\n\n# Interval Since Last Pregnancy Recode\ndf1 = df.groupby('ILP_R')['DBWT'].agg(['count', 'mean'])\ndf1.columns = [\"count\", \"mean\"]\ndf1 = df1.sort_values(by=\"count\", ascending=False)\ntrace7 = horizontal_bar_chart(df1[\"count\"].head(10), 'rgba(50, 171, 96, 0.6)')\ntrace8 = horizontal_bar_chart(df1[\"mean\"].head(10), 'rgba(50, 171, 96, 0.6)')\n\n# Mother\u2019s Single Years of Age\ndf1 = df.groupby('MAGER')['DBWT'].agg(['count', 'mean'])\ndf1.columns = [\"count\", \"mean\"]\ndf1 = df1.sort_values(by=\"count\", ascending=False)\ntrace9 = horizontal_bar_chart(df1[\"count\"].head(10), 'rgba(50, 171, 96, 0.6)')\ntrace10 = horizontal_bar_chart(df1[\"mean\"].head(10), 'rgba(50, 171, 96, 0.6)')\n\n# Pre-pregnancy Weight Recode\ndf1 = df.groupby('PWgt_R')['DBWT'].agg(['count', 'mean'])\ndf1.columns = [\"count\", \"mean\"]\ndf1 = df1.sort_values(by=\"count\", ascending=False)\ntrace11 = horizontal_bar_chart(df1[\"count\"].head(10), 'rgba(50, 171, 96, 0.6)')\ntrace12 = horizontal_bar_chart(df1[\"mean\"].head(10), 'rgba(50, 171, 96, 0.6)')\n\n# Month Prenatal Care Began\ndf1 = df.groupby('PRECARE')['DBWT'].agg(['count', 'mean'])\ndf1.columns = [\"count\", \"mean\"]\ndf1 = df1.sort_values(by=\"count\", ascending=False)\ntrace13 = horizontal_bar_chart(df1[\"count\"].head(10), 'rgba(50, 171, 96, 0.6)')\ntrace14 = horizontal_bar_chart(df1[\"mean\"].head(10), 'rgba(50, 171, 96, 0.6)')\n\n# Creating two subplots\nfig = tools.make_subplots(rows=7, cols=2, vertical_spacing=0.04, \n                          subplot_titles=[\"Ciggrarets - Count\",\"Baby weight - mean\",\n                                          \"Mother\u2019s Height in Total Inches - Count\",\"Baby weight - mean\",\"SEX - Count\",\n                                          \"Baby weight - mean\",\"Interval Since Last Pregnancy Recode - Count\",\n                                          \"Baby weight - mean\", \"Mother\u2019s Single Years of Age - Count\",\n                                          \"Baby weight - mean\",\"Pre-pregnancy Weight Recode - Count\",\"Baby weight - mean\",\n                                          \"Month Prenatal Care Began\",\"Baby weight - mean\"])\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 2, 1)\nfig.append_trace(trace4, 2, 2)\nfig.append_trace(trace5, 3, 1)\nfig.append_trace(trace6, 3, 2)\nfig.append_trace(trace7, 4, 1)\nfig.append_trace(trace8, 4, 2)\nfig.append_trace(trace9, 5, 1)\nfig.append_trace(trace10, 5, 2)\nfig.append_trace(trace11, 6, 1)\nfig.append_trace(trace12, 6, 2)\nfig.append_trace(trace13, 7, 1)\nfig.append_trace(trace14, 7, 2)\n\nfig['layout'].update(height=1800, width=1000, paper_bgcolor='rgb(233,233,233)', title=\"Device Plots\")\npy.iplot(fig, filename='device-plots')","f5ca3a06":"#Check missing value\ndf.isna().sum()","093fca47":"mymap = {'M':1, 'F':2}\ndf1=df.applymap(lambda s: mymap.get(s) if s in mymap else s)","4b071365":"df1.head()","c4402f2e":"train = df1.sample(frac=0.8,random_state=0)\ntest = df1.drop(train.index)","62b4ae17":"test = test.drop(['DBWT'], axis=1)","b192694d":"train.info()","7b370a9a":"test.info()","bcdb3ead":"train_stats = train.describe()\ntrain_stats.pop(\"DBWT\")\ntrain_stats = train_stats.transpose()\ntrain_stats","3c7adf1d":"import warnings\nwarnings.filterwarnings('ignore')\n\ncol_train = list(train.columns)\ncol_train_bis = list(train.columns)\n\ncol_train_bis.remove('DBWT')\n\nmat_train = np.matrix(train)\nmat_test  = np.matrix(test)\nmat_new = np.matrix(train.drop('DBWT',axis = 1))\nmat_y = np.array(train.DBWT).reshape((3041227,1))\n\nprepro_y = MinMaxScaler()\nprepro_y.fit(mat_y)\n\nprepro = MinMaxScaler()\nprepro.fit(mat_train)\n\nprepro_test = MinMaxScaler()\nprepro_test.fit(mat_new)\n\ntrain = pd.DataFrame(prepro.transform(mat_train),columns = col_train)\ntest  = pd.DataFrame(prepro_test.transform(mat_test),columns = col_train_bis)\n\ntrain.head()\n","af78dbae":"# List of features\nCOLUMNS = col_train\nFEATURES = col_train_bis\nLABEL = \"DBWT\"\n\n# Columns for tensorflow\nfeature_cols = [tf.contrib.layers.real_valued_column(k) for k in FEATURES]\n\n# Training set and Prediction set with the features to predict\ntraining_set = train[COLUMNS]\nprediction_set = train.DBWT\n\n# Train and Test \nx_train, x_test, y_train, y_test = train_test_split(training_set[FEATURES] , prediction_set, test_size=0.33, random_state=42)\ny_train = pd.DataFrame(y_train, columns = [LABEL])\ntraining_set = pd.DataFrame(x_train, columns = FEATURES).merge(y_train, left_index = True, right_index = True)\ntraining_set.head()\n\n# Training for submission\ntraining_sub = training_set[col_train]","d8c59e2b":"# Same thing but for the test set\ny_test = pd.DataFrame(y_test, columns = [LABEL])\ntesting_set = pd.DataFrame(x_test, columns = FEATURES).merge(y_test, left_index = True, right_index = True)\ntesting_set.head()","32bf94f9":"# Model\ntf.logging.set_verbosity(tf.logging.ERROR)\nregressor = tf.contrib.learn.DNNRegressor(feature_columns=feature_cols, \n                                          activation_fn = tf.nn.relu, hidden_units=[200, 100, 50, 25, 12])#,\n                                         #optimizer = tf.train.GradientDescentOptimizer( learning_rate= 0.1 ))","e05acb6c":"# Reset the index of training\ntraining_set.reset_index(drop = True, inplace =True)","c4124e4e":"def input_fn(data_set, pred = False):\n    \n    if pred == False:\n        \n        feature_cols = {k: tf.constant(data_set[k].values) for k in FEATURES}\n        labels = tf.constant(data_set[LABEL].values)\n        \n        return feature_cols, labels\n\n    if pred == True:\n        feature_cols = {k: tf.constant(data_set[k].values) for k in FEATURES}\n        \n        return feature_cols","d5134e34":"# Deep Neural Network Regressor with the training set which contain the data split by train test split\nregressor.fit(input_fn=lambda: input_fn(training_set), steps=2000)","dc702c04":"# Evaluation on the test set created by train_test_split\nev = regressor.evaluate(input_fn=lambda: input_fn(testing_set), steps=1)","4838662c":"# Display the score on the testing set\n# 0.002X in average\nloss_score1 = ev[\"loss\"]\nprint(\"Final Loss on the testing set: {0:f}\".format(loss_score1))","0a59e976":"# Predictions\ny = regressor.predict(input_fn=lambda: input_fn(testing_set))\npredictions = list(itertools.islice(y, testing_set.shape[0]))","7f61448b":"predictions = pd.DataFrame(prepro_y.inverse_transform(np.array(predictions).reshape(434,1)),columns = ['Prediction'])","98eac245":"reality = pd.DataFrame(prepro.inverse_transform(testing_set), columns = [COLUMNS]).SalePrice","00e40f8b":"matplotlib.rc('xtick', labelsize=30) \nmatplotlib.rc('ytick', labelsize=30) \n\nfig, ax = plt.subplots(figsize=(50, 40))\n\nplt.style.use('ggplot')\nplt.plot(predictions.values, reality.values, 'ro')\nplt.xlabel('Predictions', fontsize = 30)\nplt.ylabel('Reality', fontsize = 30)\nplt.title('Predictions x Reality on dataset Test', fontsize = 30)\nax.plot([reality.min(), reality.max()], [reality.min(), reality.max()], 'k--', lw=4)\nplt.show()","61a0aac5":"\ndef to_submit(pred_y,name_out):\n    y_predict = list(itertools.islice(pred_y, test.shape[0]))\n    y_predict = pd.DataFrame(prepro_y.inverse_transform(np.array(y_predict).reshape(len(y_predict),1)), columns = ['SalePrice'])\n    y_predict = y_predict.join(ID)\n    y_predict.to_csv(name_out + '.csv',index=False)\n    \nto_submit(y_predict, \"submission_continuous\")","cc2a17af":"There is some weird value if we see the max value of each coloumn"}}