{"cell_type":{"80d2cab7":"code","49c16924":"code","14937e09":"code","b7d4f34b":"code","6ad12b1b":"code","ed6e13f0":"code","d45d6e93":"code","09d807c4":"code","2190fd33":"code","18d1fbdc":"code","84f981a9":"code","5c1b22b2":"code","7678c2dd":"code","62196e51":"code","4eaca9d1":"code","69a20471":"code","07ec4f1c":"code","d68bf728":"code","d1efce37":"code","105bf8f2":"code","830b386d":"code","ccef732e":"markdown","a2a0486d":"markdown"},"source":{"80d2cab7":"import xgboost as xgb\nimport numpy as np\nimport pandas as pd\nimport random\nimport optuna\nfrom sklearn.model_selection import KFold, train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import mean_squared_error","49c16924":"train = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2021\/test.csv\")","14937e09":"train.head()","b7d4f34b":"test.head()","6ad12b1b":"print(train.columns.to_list())","ed6e13f0":"target = train['target']\ndata = train.drop(['target','id'],axis=1)","d45d6e93":"columns=data.columns.to_list()\nprint(columns)","09d807c4":"def objective(trial,data=data,target=target):\n    \n    train_x, test_x, train_y, test_y = train_test_split(data, target, test_size=0.2,random_state=42)\n    param = {\n        'objective': trial.suggest_categorical('objective',['reg:tweedie']), \n        'tree_method': trial.suggest_categorical('tree_method',['gpu_hist']),  # 'gpu_hist','hist'\n        'lambda': trial.suggest_loguniform('lambda',1e-3,10.0),\n        'alpha': trial.suggest_loguniform('alpha',1e-3,10.0),\n        'colsample_bytree': trial.suggest_categorical('colsample_bytree', [0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0]),\n        'subsample': trial.suggest_categorical('subsample', [0.4,0.5,0.6,0.7,0.8,1.0]),\n        'learning_rate': trial.suggest_categorical('learning_rate', [0.008,0.01,0.012,0.014,0.016,0.018,0.02]),\n        'n_estimators': trial.suggest_categorical('n_estimators', [1000,2000,4000,8000]),\n        'max_depth': trial.suggest_categorical('max_depth', [5,7,9,11,13,15,17,20]),\n        'random_state': trial.suggest_categorical('random_state', [24,48,2020]),\n        'min_child_weight': trial.suggest_int('min_child_weight', 1,300),\n        'use_label_encoder': trial.suggest_categorical('use_label_encoder',[False])\n    }\n    model = xgb.XGBRegressor(**param)      ###\n    model.fit(train_x,train_y,eval_set=[(test_x,test_y)],early_stopping_rounds=100,verbose=False)\n    preds = model.predict(test_x)\n    rmse = mean_squared_error(test_y, preds,squared=False)\n    \n    return rmse","2190fd33":"study = optuna.create_study(direction='minimize')\nstudy.optimize(objective, n_trials=8)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)","18d1fbdc":"study.trials_dataframe()","84f981a9":"# shows the scores from all trials\noptuna.visualization.plot_optimization_history(study)","5c1b22b2":"# interactively visualizes the hyperparameters and scores\noptuna.visualization.plot_parallel_coordinate(study)","7678c2dd":"# shows the evolution of the search\noptuna.visualization.plot_slice(study)","62196e51":"# parameter interactions on an interactive chart.\noptuna.visualization.plot_contour(study, params=['min_child_weight','max_depth'])","4eaca9d1":"# Visualize parameter importances.\noptuna.visualization.plot_param_importances(study)","69a20471":"# Visualize empirical distribution function\noptuna.visualization.plot_edf(study)","07ec4f1c":"Best_trial=study.best_trial.params\nprint(Best_trial)","d68bf728":"sample = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2021\/sample_submission.csv\")\nprint(sample.shape)\nsample","d1efce37":"preds = np.zeros((sample.shape[0]))\nkf = KFold(n_splits=5,random_state=48,shuffle=True)\nfor trn_idx, test_idx in kf.split(train[columns],target):\n    X_tr,X_val=train[columns].iloc[trn_idx],train[columns].iloc[test_idx]\n    y_tr,y_val=target.iloc[trn_idx],target.iloc[test_idx]\n    model = xgb.XGBRegressor(**Best_trial)\n    model.fit(X_tr,y_tr,eval_set=[(X_val,y_val)],early_stopping_rounds=100,verbose=False)\n    preds+=model.predict(test[columns])\/kf.n_splits   ###### predict_proba\n    rmse=mean_squared_error(y_val, model.predict(X_val),squared=False)\n    print(rmse)","105bf8f2":"print(preds.shape)\nprint(preds[0])","830b386d":"subm = sample\nsubm['target'] = preds\nsubm.to_csv('submission.csv',index=False)\nsubm","ccef732e":"# XGBoost with Optuna tuning\n* doc: \nhttps:\/\/github.com\/optuna\/optuna","a2a0486d":"### Objective candidate for XGBoost\n* Objective candidate: survival:aft\n* Objective candidate: binary:hinge\n* Objective candidate: multi:softmax\n* Objective candidate: multi:softprob\n* Objective candidate: rank:pairwise\n* Objective candidate: rank:ndcg\n* Objective candidate: rank:map\n* Objective candidate: reg:squarederror\n* Objective candidate: reg:squaredlogerror\n* Objective candidate: reg:logistic\n* Objective candidate: reg:pseudohubererror\n* Objective candidate: binary:logistic\n* Objective candidate: binary:logitraw\n* Objective candidate: reg:linear\n* Objective candidate: count:poisson\n* Objective candidate: survival:cox\n* Objective candidate: reg:gamma\n* Objective candidate: reg:tweedie"}}