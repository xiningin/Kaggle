{"cell_type":{"8370d9cb":"code","a25269c2":"code","1fdd4c9a":"code","f62e21f1":"code","49eb2233":"code","fb3d5808":"code","f8984ce2":"code","3aebc055":"code","9a656ee5":"code","d3491048":"code","a10f7f8b":"code","fd9416fa":"code","d3948f9f":"code","be025a2e":"code","ecdd7a0f":"code","bb25b49f":"code","4bee8cb0":"code","4c916a71":"code","225102a6":"code","a71f02c3":"code","2794e453":"code","670e8168":"code","fe548b1b":"code","05a7f035":"code","d2bce00b":"code","9d0a2515":"code","e0991e91":"code","334704d0":"code","f000ca55":"code","61a8b643":"code","9fd0ab60":"code","88129f06":"code","b28e6724":"code","f8b3abdd":"code","1b35ed69":"code","1ff265e9":"code","c06bd74a":"code","a9e65c36":"code","ec997cf9":"code","f93620f1":"code","c568edf5":"code","78823a6b":"code","df120ce7":"code","0fdc6131":"code","e0772952":"code","53902c2c":"code","dd65c4f3":"code","13cef498":"code","859b6e21":"markdown","2d9cb5d5":"markdown","03d03fbf":"markdown","eb4b9ef3":"markdown","f7ebe5b5":"markdown","f26bc33f":"markdown"},"source":{"8370d9cb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nget_ipython().run_line_magic('matplotlib', 'inline')\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a25269c2":"X_full= pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\nX_full.head()","1fdd4c9a":"X_test_full = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\nX_test_full.head()","f62e21f1":"sns.heatmap(X_full.isnull(),cbar=False)","49eb2233":"p1_age_mean = X_full[X_full['Pclass']==1]['Age'].mean()\np2_age_mean = X_full[X_full['Pclass']==2]['Age'].mean()\np3_age_mean = X_full[X_full['Pclass']==3]['Age'].mean()","fb3d5808":"def age_fill(line):\n    age=line[0]\n    pclass=line[1]\n    if pd.isnull(age):\n        if pclass==1:\n            age = p1_age_mean\n        elif pclass==2:\n            age = p2_age_mean\n        else:\n            age = p3_age_mean\n    return age\n","f8984ce2":"X_full['Age'] = X_full[['Age','Pclass']].apply(age_fill,axis=1)\n","3aebc055":"sns.scatterplot(x='Age',y='Pclass',data=X_full)\n","9a656ee5":"pd.isnull(X_full).sum()","d3491048":"X_full[pd.isnull(X_full['Embarked'])].index","a10f7f8b":"X_full.drop(index=X_full[pd.isnull(X_full['Embarked'])].index,axis=0,inplace=True)","fd9416fa":"X_full.drop(labels=['Name','Ticket','Cabin'],axis=1,inplace=True)","d3948f9f":"sns.heatmap(X_full.isnull(),cbar=False)\n","be025a2e":"X_full.head()","ecdd7a0f":"X_full =pd.get_dummies(data=X_full,drop_first=True)","bb25b49f":"X_full.set_index('PassengerId',inplace=True)","4bee8cb0":"X_full.head()","4c916a71":"from sklearn.model_selection import train_test_split","225102a6":"X = X_full.drop(labels='Survived',axis=1)\ny = X_full['Survived']","a71f02c3":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)","2794e453":"# sns.heatmap(X_full.isnull(),cbar=False)\n\n# p1_age_mean = X_full[X_full['Pclass']==1]['Age'].mean()\n# p2_age_mean = X_full[X_full['Pclass']==2]['Age'].mean()\n# p3_age_mean = X_full[X_full['Pclass']==3]['Age'].mean()\n\n\n# def age_fill(line):\n#     age=line[0]\n#     pclass=line[1]\n#     if pd.isnull(age):\n#         if pclass==1:\n#             age = p1_age_mean\n#         elif pclass==2:\n#             age = p2_age_mean\n#         else:\n#             age = p3_age_mean\n#     return age\n\n\n\n# X_full['Age'] = X_full[['Age','Pclass']].apply(age_fill,axis=1)\n\n\n# sns.scatterplot(x='Age',y='Pclass',data=X_full)\n\n# pd.isnull(X_full).sum()\n\n# X_full[pd.isnull(X_full['Embarked'])].index\n\n# X_full.drop(index=X_full[pd.isnull(X_full['Embarked'])].index,axis=0,inplace=True)\n\n# X_full.drop(labels=['Name','Ticket','Cabin'],axis=1,inplace=True)\n\n# sns.heatmap(X_full.isnull(),cbar=False)\n\n# X_full.head()\n\n# X_full =pd.get_dummies(data=X_full,drop_first=True)\n\n# X_full.set_index('PassengerId',inplace=True)\n\n# X_full.head()\n\n# from sklearn.model_selection import train_test_split\n\n# X = X_full.drop(labels='Survived',axis=1)\n# y = X_full['Survived']\n\n# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)","670e8168":"sns.heatmap(X_test_full.isnull(),cbar=False)","fe548b1b":"p1_age_mean = X_test_full[X_test_full['Pclass']==1]['Age'].mean()\np2_age_mean = X_test_full[X_test_full['Pclass']==2]['Age'].mean()\np3_age_mean = X_test_full[X_test_full['Pclass']==3]['Age'].mean()","05a7f035":"def age_fill(line):\n    age=line[0]\n    pclass=line[1]\n    if pd.isnull(age):\n        if pclass==1:\n            age = p1_age_mean\n        elif pclass==2:\n            age = p2_age_mean\n        else:\n            age = p3_age_mean\n    return age","d2bce00b":"X_test_full['Age'] = X_test_full[['Age','Pclass']].apply(age_fill,axis=1)","9d0a2515":"sns.scatterplot(x='Age',y='Pclass',data=X_test_full)","e0991e91":"pd.isnull(X_test_full).sum()","334704d0":"X_test_full.fillna(X_test_full['Fare'].mean(),inplace=True)","f000ca55":"X_test_full.drop(labels=['Name','Ticket','Cabin'],axis=1,inplace=True)","61a8b643":"sns.heatmap(X_full.isnull(),cbar=False)","9fd0ab60":"pd.isnull(X_test_full).sum()","88129f06":"X_test_full =pd.get_dummies(data=X_test_full,drop_first=True)","b28e6724":"X_test_full.set_index('PassengerId',inplace=True)","f8b3abdd":"X_test_full","1b35ed69":"X_test_full.head()","1ff265e9":"# sns.heatmap(X_test_full.isnull(),cbar=False)\n\n# p1_age_mean = X_test_full[X_test_full['Pclass']==1]['Age'].mean()\n# p2_age_mean = X_test_full[X_test_full['Pclass']==2]['Age'].mean()\n# p3_age_mean = X_test_full[X_test_full['Pclass']==3]['Age'].mean()\n\n# def age_fill(line):\n#     age=line[0]\n#     pclass=line[1]\n#     if pd.isnull(age):\n#         if pclass==1:\n#             age = p1_age_mean\n#         elif pclass==2:\n#             age = p2_age_mean\n#         else:\n#             age = p3_age_mean\n#     return age\n\n# X_test_full['Age'] = X_test_full[['Age','Pclass']].apply(age_fill,axis=1)\n\n# sns.scatterplot(x='Age',y='Pclass',data=X_test_full)\n\n# pd.isnull(X_test_full).sum()\n\n# X_test_full.fillna(X_test_full['Fare'].mean(),inplace=True)\n\n# X_test_full.drop(labels=['Name','Ticket','Cabin'],axis=1,inplace=True)\n\n# sns.heatmap(X_full.isnull(),cbar=False)\n\n# pd.isnull(X_test_full).sum()\n\n# X_test_full =pd.get_dummies(data=X_test_full,drop_first=True)\n\n# X_test_full.set_index('PassengerId',inplace=True)\n\n# X_test_full\n\n# X_test_full.head()\n","c06bd74a":"from sklearn.ensemble import RandomForestClassifier\n\nrfc= RandomForestClassifier(n_estimators=100,max_depth=5,random_state=1)\n\nrfc.fit(X_train,y_train)\n\npred1 =rfc.predict(X_test)\n\nfrom sklearn.metrics import classification_report,confusion_matrix\n\nprint(confusion_matrix(y_test,pred1),'\\n')\nprint(classification_report(y_test,pred1))","a9e65c36":"from sklearn.tree import DecisionTreeClassifier\ndtc = DecisionTreeClassifier()\ndtc.fit(X_train,y_train)\npred2 = dtc.predict(X_test)\n\nprint(confusion_matrix(y_test,pred2),'\\n')\nprint(classification_report(y_test,pred2))","ec997cf9":"best_model = rfc","f93620f1":"best_model.fit(X_train,y_train)","c568edf5":"X_test_full","78823a6b":"pred = best_model.predict(X_test_full)","df120ce7":"X_test_full.index","0fdc6131":"len(pred)","e0772952":"output1= pd.DataFrame({'PassengerId':X_test_full.index,'Survived':pred})","53902c2c":"output1","dd65c4f3":"output1.to_csv('using_rfc.csv',index=False)","13cef498":"# best_model = rfc\n# best_model.fit(X_train,y_train)\n# pred = best_model.predict(X_test_full)\n# X_test_full.index\n# len(pred)\n# output1= pd.DataFrame({'PassengerId':X_test_full.index,'Survived':pred})\n# output1\n# output1.to_csv('\/kaggle\/input\/titanic\/using_rfc.csv',index=False)","859b6e21":"## Random Forest","2d9cb5d5":"## Decision tree","03d03fbf":"# Data cleaning","eb4b9ef3":"## output","f7ebe5b5":"### > test data","f26bc33f":"### > train data"}}