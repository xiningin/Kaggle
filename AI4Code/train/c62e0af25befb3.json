{"cell_type":{"f81d0391":"code","a57d0924":"code","2ddf2f69":"code","a81c151e":"code","b5a209ba":"code","fccf46fa":"code","26b3dd01":"code","cc9030cf":"code","01be4be1":"code","4b5895f5":"code","eeb45c26":"code","28e4770b":"code","8c4992f7":"code","3e7afcaf":"code","ab93c4cd":"code","b53a8467":"code","703bdde9":"code","c15cac37":"markdown","b8d5794b":"markdown","99f696ae":"markdown","476c1602":"markdown","205fc397":"markdown"},"source":{"f81d0391":"\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport sklearn\nfrom sklearn import metrics\nfrom sklearn import linear_model\n\nfrom sklearn.preprocessing import LabelBinarizer\nfrom scipy import sparse\nfrom sklearn import ensemble\n\nfrom sklearn import multioutput","a57d0924":"from tqdm import tqdm","2ddf2f69":"#To read the train features\nx_train= pd.read_csv(\"\/kaggle\/input\/collision-detection-ai-using-vibration-data\/train_features.csv\")\n#To read the train target\ny_train = pd.read_csv(\"\/kaggle\/input\/collision-detection-ai-using-vibration-data\/train_target.csv\")\n#To read the test features\nx_test = pd.read_csv(\"\/kaggle\/input\/collision-detection-ai-using-vibration-data\/test_features.csv\")\n#To read the submission file\nsubmission_file = pd.read_csv(\"\/kaggle\/input\/collision-detection-ai-using-vibration-data\/sample_submission.csv\")","a81c151e":"x_train.head()","b5a209ba":"x_train.describe()","fccf46fa":"x_train.info()","26b3dd01":"y_train.info()","cc9030cf":"y_train.head()","01be4be1":"train_data = x_train\ntest_data = x_test\ny_train= y_train.drop([\"id\"],axis=1)","4b5895f5":"plt.figure(figsize=(10,4))\nax1 = plt.subplot(1,2,1)\nplt.plot(train_data[\"S1\"][0:10000])\nax1.set_title(\"S1 Acceleration\")\nax2 = plt.subplot(1,2,2)\nplt.plot(train_data[\"S2\"][0:10000])\nax2.set_title(\"S2 Acceleration\")\nplt.show()","eeb45c26":"plt.figure(figsize=(10,4))\nax1 = plt.subplot(1,2,1)\nplt.plot(train_data[\"S3\"][0:10000])\nax1.set_title(\"S3 Acceleration\")\nax2 = plt.subplot(1,2,2)\nplt.plot(train_data[\"S4\"][0:10000])\nax2.set_title(\"S4 Acceleration\")\nplt.show()","28e4770b":"fs = 5 #sampling frequency\nfmax = 25 #sampling period\ndt = 1\/fs #length of signal\nn = 75\n\ndef fft_features(data_set : pd.DataFrame) -> np.ndarray:\n    \"\"\" Convert the dataset to fourier transfomed\n        :params data_set: original collider params data\n        :returns ft_data: Fourier transformed data\n        #Reference - https:\/\/dacon.io\/competitions\/official\/235614\/codeshare\/1174\n    \"\"\"\n    ft_data = list()\n    \n    features = [\"S1\",\"S2\",\"S3\", \"S4\"]\n    \n    id_set = list(data_set.id.unique())\n     \n    for ids in tqdm(id_set):\n        s1_fft = np.fft.fft(data_set[data_set.id==ids]['S1'].values)*dt\n        s2_fft = np.fft.fft(data_set[data_set.id==ids]['S2'].values)*dt\n        s3_fft = np.fft.fft(data_set[data_set.id==ids]['S3'].values)*dt\n        s4_fft = np.fft.fft(data_set[data_set.id==ids]['S4'].values)*dt\n        \n        ft_data.append(np.concatenate([np.abs(s1_fft[0:int(n\/2+1)]),\n                                       np.abs(s2_fft[0:int(n\/2+1)]),\n                                       np.abs(s3_fft[0:int(n\/2+1)]),\n                                       np.abs(s4_fft[0:int(n\/2+1)])]))\n    \n    return np.array(ft_data)","8c4992f7":"#Fourier transform of the train features\ntrain_fft = fft_features(train_data)","3e7afcaf":"#Fourier transform of the test features\ntest_fft = fft_features(test_data)","ab93c4cd":"reg = multioutput.MultiOutputRegressor(ensemble.GradientBoostingRegressor())\nreg.fit(train_fft, y_train)\ny_pred = reg.predict(test_fft)\ny_pred[0]","b53a8467":"y_pred = submission_file[['X','Y','M','V']]\nsubmission_file.head()","703bdde9":"submission_file.to_csv(\"Final_Submission.csv\", index=False)","c15cac37":"# RESULT\n**The submission rank - 0.49315 (score), and 155 in the Public leaderbord**","b8d5794b":"# FAST FOURIER TRANSFORM\n**A fast Fourier transform (FFT) is an algorithm that computes the discrete Fourier transform (DFT) of a sequence, or its inverse (IDFT). Fourier analysis converts a signal from its original domain (often time or space) to a representation in the frequency domain and vice versa**","99f696ae":"# MULTI-OUTPUT PREDICTION\n**The use of multi-output Regressor to predict the outcome of the test features**","476c1602":"# INTRODUCTION\n**Colliders that exist inside the coolant system of a nuclear power plant can cause damage to equipment.At the nuclear power plant site, accidents can be prevented by diagnosing abnormal signs of equipment early.The purpose of this code is to activate artificial intelligence technology research that can diagnose abnormal signs of devices early.**","205fc397":"# ANALYSIS AND GRAPHICAL REPRESENTATION\n**The Graphical representation of the Acceleration parameters(S1, S2, S3, S4) of the train features. The first 10,000 data would be used for better visualization**\n"}}