{"cell_type":{"e678a023":"code","3e7a4d16":"code","dac4226d":"code","4ef3f65b":"code","17155057":"code","fa31dacc":"code","40e78614":"code","9babf5ce":"code","10353f7c":"code","488e5f26":"code","d865bbb7":"code","932182fd":"code","ea85cd4d":"code","27ed6ee0":"code","831f4a46":"code","9be5665a":"code","2ba1bc1e":"code","22b6f3d1":"code","316054ba":"code","078029c2":"code","4fc2f75a":"markdown","c2a179ac":"markdown","a09ef9af":"markdown","a65b641a":"markdown","8360db72":"markdown","04c8c318":"markdown"},"source":{"e678a023":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","3e7a4d16":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split # this funcion is used for spitting the data\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score","dac4226d":"dataset = pd.read_csv('\/kaggle\/input\/sonar-data\/Sonar Data.csv', header=None)","4ef3f65b":"dataset.head()","17155057":"# number of rows and columns\ndataset.shape","fa31dacc":"dataset.describe()  #describe -->> statistical measures of the data","40e78614":"dataset[60].value_counts()","9babf5ce":"dataset.groupby(60).mean()","10353f7c":"# separating data && Labels\nX = dataset.drop(columns=60, axis=1)\nY = dataset[60]","488e5f26":"print(X)\nprint(Y)","d865bbb7":"X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.1, stratify=Y, random_state=1)","932182fd":"print(X.shape, X_train.shape, X_test.shape)","ea85cd4d":"print(X_train)\nprint(Y_train)","27ed6ee0":"model = LogisticRegression()","831f4a46":"#training the Logistic Regression model with training the data\nmodel.fit(X_train, Y_train)","9be5665a":"#accuracy on training data\nX_train_prediction = model.predict(X_train)\ntraining_data_accuracy = accuracy_score(X_train_prediction, Y_train) ","2ba1bc1e":"print('Accuracy on training data : ', training_data_accuracy)","22b6f3d1":"#accuracy on test data\nX_test_prediction = model.predict(X_test)\ntest_data_accuracy = accuracy_score(X_test_prediction, Y_test) ","316054ba":"print('Accuracy on test data : ', test_data_accuracy)","078029c2":"input_data = (0.0307,0.0523,0.0653,0.0521,0.0611,0.0577,0.0665,0.0664,0.1460,0.2792,0.3877,0.4992,0.4981,0.4972,0.5607,0.7339,0.8230,0.9173,0.9975,0.9911,0.8240,0.6498,0.5980,0.4862,0.3150,0.1543,0.0989,0.0284,0.1008,0.2636,0.2694,0.2930,0.2925,0.3998,0.3660,0.3172,0.4609,0.4374,0.1820,0.3376,0.6202,0.4448,0.1863,0.1420,0.0589,0.0576,0.0672,0.0269,0.0245,0.0190,0.0063,0.0321,0.0189,0.0137,0.0277,0.0152,0.0052,0.0121,0.0124,0.0055)\n\n# changing the given input_data to a numpy array\ninput_data_as_numpy_array = np.asarray(input_data)\n\n# reshape the np array as we are predicting for one instance\ninput_data_reshaped = input_data_as_numpy_array.reshape(1,-1)\n\nprediction = model.predict(input_data_reshaped)\nprint(prediction)\n\nif (prediction[0]=='R'):\n  print('The object is a Rock')\nelse:\n  print('The object is a mine')\n","4fc2f75a":"Training and Test data\n\n1.   List item\n2.   List item\n","c2a179ac":"Data Collection && Data Processing","a09ef9af":"Making a Predictive_System","a65b641a":"M --> Mine\n\nR --> Rock","8360db72":"Model Training -->> Logistic Regression ","04c8c318":"*Model* Evaluation"}}