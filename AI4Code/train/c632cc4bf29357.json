{"cell_type":{"1e7f8432":"code","c28349e8":"code","ba76c114":"code","3996f922":"code","13e8e922":"code","c39f7fd7":"code","c1764170":"code","b741570e":"code","877662f4":"code","f0524055":"code","524d3451":"code","02103ee1":"code","41961544":"code","c8403512":"code","86889785":"code","c90a25c2":"code","f66a2210":"code","b31cd76e":"code","9195c0a2":"code","cce2784e":"code","a4c64ae1":"markdown","fe4246d2":"markdown"},"source":{"1e7f8432":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.offline as py\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c28349e8":"nRowsRead = 1000 # specify 'None' if want to read whole file\ndf = pd.read_csv('..\/input\/cusersmarildownloadsbquarantinecsv\/bquarantine.csv', delimiter=';', encoding = \"ISO-8859-1\", nrows = nRowsRead)\ndf.dataframeName = 'bquarantine.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')\ndf.head()","ba76c114":"#Code from Nitin Datta https:\/\/www.kaggle.com\/nitindatta\/eda-with-r3-id\/comments\n\nfig,ax=plt.subplots(figsize=(18,6))\nsns.set_style('dark')\nplt.subplot(1, 2, 1)\ng1=sns.countplot(df['Division'],palette='rocket', hue = df['Geometry'],**{'hatch':'\/','linewidth':3})\ng1.set_title(\"Division\")\n\nplt.subplot(1, 2, 2)\ng2=sns.countplot(df['Geometry'],palette='rocket',hue= df['Geometry'],**{'hatch':'\/','linewidth':3})\ng2.set_title(\"Geometry\")","3996f922":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/parts-of-speech\n\nplt.figure(figsize=(10,5))\nsns.countplot(y=\"Division\",data=df,\n             facecolor=(0,0,0,0),linewidth=5,\n             edgecolor=sns.color_palette(\"RdYlGn\"))\nplt.title('Division Quarantine for Covid-19',\n         fontsize=15);","13e8e922":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/parts-of-speech\n\nplt.figure(figsize=(10,5))\nsns.countplot(y=\"Geometry\",data=df,\n             facecolor=(0,0,0,0),linewidth=5,\n             edgecolor=sns.color_palette(\"ocean\"))\nplt.title('Quarantine for Covid-19',\n         fontsize=15);","c39f7fd7":"fig = px.bar(df, x= \"Division\", y= \"total_quarantine\", color_discrete_sequence=['crimson'], title=\"Bangladesh Quarantine for Covid-19\")\nfig.show()","c1764170":"fig = px.bar(df, x= \"Geometry\", y= \"total_quarantine\", color_discrete_sequence=['#2B3A67'], title=\"Bangladesh Quarantine for Covid-19\")\nfig.show()","b741570e":"fig = px.bar(df, x= \"Division\", y= \"Shape_Area\", color_discrete_sequence=['cyan'], title=\"Bangladesh Quarantine for Covid-19\")\nfig.show()","877662f4":"fig = px.bar(df, x= \"Distname\", y= \"Shape_Leng\", color_discrete_sequence=['darksalmon'], title=\"Bangladesh Quarantine for Covid-19\")\nfig.show()","f0524055":"#Code by Taha07  https:\/\/www.kaggle.com\/taha07\/data-scientists-jobs-analysis-visualization\/notebook\n\ncolor = plt.cm.RdGy(np.linspace(0,1,20))\ndf[\"Division\"].value_counts().sort_values(ascending=False).head(20).plot.pie(y=\"total_quarantine\",colors=color,autopct=\"%0.1f%%\")\nplt.title(\"\")\nplt.axis(\"off\")\nplt.show()","524d3451":"import plotly.offline as pyo\nimport plotly.graph_objs as go\nlowerdf = df.groupby('Distname').size()\/df['Shape_Area'].count()*100\nlabels = lowerdf.index\nvalues = lowerdf.values\n\n# Use `hole` to create a donut-like pie chart\nfig = go.Figure(data=[go.Pie(labels=labels, values=values,marker_colors = px.colors.sequential.speed, hole=.6)])\nfig.show()","02103ee1":"fig = px.pie(df,\n             values=\"total_quarantine\",\n             names=\"Division\",\n             template=\"seaborn\")\nfig.update_traces(rotation=90, pull=0.05, textinfo=\"percent+label\")\nfig.show()","41961544":"# Count Plot\nplt.style.use(\"classic\")\nplt.figure(figsize=(10, 8))\nsns.countplot(df['Division'], palette='RdYlGn')\nplt.xlabel(\"Division\")\nplt.ylabel(\"Count\")\nplt.title(\"Bangladesh Quarantine for Covid-19\")\nplt.xticks(rotation=45, fontsize=8)\nplt.show()","c8403512":"import plotly.express as px\n\nfig = px.scatter(df, x=\"Division\", y=\"total_quarantine\", color=\"Distname\", title=\"Bangladesh Quarantine for Covid-19\")\nfig.show()","86889785":"fig = go.Figure();\nfig.add_trace(go.Scatter(x = df['Division'].head(10),y = df['total_quarantine'],\n                    mode='lines+markers',\n                    name='total_quarantine'));\n\nfig.update_traces(mode='lines+markers', marker_line_width=2, marker_size=10, marker_color='red');\n\nfig.update_layout(autosize=False, width=1000,height=700,title=\"Bangla Divisions Quarantine for Covid-19\", legend_orientation=\"h\");\n\nfig.show();","c90a25c2":"fig = go.Figure();\nfig.add_trace(go.Scatter(x = df['Distname'].head(10),y = df['total_quarantine'],\n                    mode='lines+markers',\n                    name='total_quarantine'));\n\nfig.update_traces(mode='lines+markers', marker_line_width=2, marker_size=10, marker_color='green');\n\nfig.update_layout(autosize=False, width=1000,height=700,title=\"Bangladesh Quarantine for Covid-19\", legend_orientation=\"h\");\n\n\nfig.show();","f66a2210":"fig = px.treemap(df, path=['Division'], values='total_quarantine',\n                  color='total_quarantine', hover_data=['Division'],title=\"Bangladesh Divisions Quarantine for Covid-19\",\n                  color_continuous_scale='RdYlGn')\nfig.show()","b31cd76e":"# 3D Scatter Plot\nfig = px.scatter_3d(df, x='Division', y='Shape_Area', z='Shape_Leng', template=\"plotly_dark\")\nfig.show()","9195c0a2":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.Division)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Reds', background_color=\"green\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","cce2784e":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Mar\u00edlia Prata, not a DS. Stick around, I will be right back. @mpwolke' )","a4c64ae1":"#To change the Marker Color we write `marker_color` or `marker_line_color`. Just color results in error.","fe4246d2":"#Bangladesh Quarantine for Covid-19\n\nIn Bangladesh, the lockdown (or rather the holiday) was first declared for ten days. Then it was extended by another seven days and then another three days. This practically stretched the period of lockdown to 21 days.\n\n![](https:\/\/tbsnews.net\/sites\/default\/files\/styles\/infograph\/public\/images\/2020\/04\/06\/22222-update.jpg?itok=HyWzhA1n&timestamp=1586192425)\nhttps:\/\/tbsnews.net\/analysis\/running-behind-virus-66052"}}