{"cell_type":{"c96e8fca":"code","17059a87":"code","37602142":"code","50635d64":"code","aaadcdd3":"code","70323199":"code","71d30ac0":"code","24cef697":"code","6776d6c6":"code","c4773fe1":"code","731d29a6":"code","b6ea5e78":"code","8fffca42":"code","20925f52":"code","14fc3608":"code","f2fbe8a8":"code","8397fab2":"code","915f8150":"code","7d73f1b5":"code","5a541561":"code","91435404":"code","b2de0f44":"code","46386db6":"code","0a1284f2":"code","d1977145":"code","9afb4dce":"code","80efcaf1":"code","5cd612be":"code","ddf44610":"code","b5295705":"code","564469f4":"code","5aa784cc":"code","5ec7c2a4":"code","a63ee9ec":"code","e6634a51":"code","9b7bcc7b":"code","4fc878a4":"code","5ab2815b":"code","95d130c1":"code","1d6d7fed":"code","3efa3bfa":"code","8852f4f2":"code","9156e1a6":"code","6c8092e2":"code","7dc2fb9b":"code","18f8a7cd":"markdown","07bf4e66":"markdown","aefe7732":"markdown","6e08e796":"markdown","fa916af5":"markdown","238f4b19":"markdown","b86b1021":"markdown","8f3675a7":"markdown","f249c207":"markdown","8d118b58":"markdown","b6d65bee":"markdown","51145195":"markdown","41f8dd69":"markdown","5a6c64f3":"markdown","1b1f656e":"markdown","a1efa8c2":"markdown","9525f112":"markdown"},"source":{"c96e8fca":"from attention import AttentionLayer\nimport numpy as np\nimport pandas as pd \nimport re\nfrom bs4 import BeautifulSoup\nfrom keras.preprocessing.text import Tokenizer \nfrom keras.preprocessing.sequence import pad_sequences\nfrom nltk.corpus import stopwords\nfrom tensorflow.keras.layers import Input, LSTM, Embedding, Dense, Concatenate, TimeDistributed,Bidirectional\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import EarlyStopping\nimport warnings\npd.set_option(\"display.max_colwidth\", 200)\nwarnings.filterwarnings(\"ignore\")","17059a87":"data=pd.read_csv(\"..\/input\/amazon-fine-food-reviews\/Reviews.csv\")\ndata.head()","37602142":"data.drop_duplicates(subset=['Text'],inplace=True)#dropping duplicates\ndata.dropna(axis=0,inplace=True)#dropping na","50635d64":"data.info()","aaadcdd3":"contraction_mapping = {\"ain't\": \"is not\", \"aren't\": \"are not\",\"can't\": \"cannot\", \"'cause\": \"because\", \"could've\": \"could have\", \"couldn't\": \"could not\",\n                           \"didn't\": \"did not\",  \"doesn't\": \"does not\", \"don't\": \"do not\", \"hadn't\": \"had not\", \"hasn't\": \"has not\", \"haven't\": \"have not\",\n                           \"he'd\": \"he would\",\"he'll\": \"he will\", \"he's\": \"he is\", \"how'd\": \"how did\", \"how'd'y\": \"how do you\", \"how'll\": \"how will\", \"how's\": \"how is\",\n                           \"I'd\": \"I would\", \"I'd've\": \"I would have\", \"I'll\": \"I will\", \"I'll've\": \"I will have\",\"I'm\": \"I am\", \"I've\": \"I have\", \"i'd\": \"i would\",\n                           \"i'd've\": \"i would have\", \"i'll\": \"i will\",  \"i'll've\": \"i will have\",\"i'm\": \"i am\", \"i've\": \"i have\", \"isn't\": \"is not\", \"it'd\": \"it would\",\n                           \"it'd've\": \"it would have\", \"it'll\": \"it will\", \"it'll've\": \"it will have\",\"it's\": \"it is\", \"let's\": \"let us\", \"ma'am\": \"madam\",\n                           \"mayn't\": \"may not\", \"might've\": \"might have\",\"mightn't\": \"might not\",\"mightn't've\": \"might not have\", \"must've\": \"must have\",\n                           \"mustn't\": \"must not\", \"mustn't've\": \"must not have\", \"needn't\": \"need not\", \"needn't've\": \"need not have\",\"o'clock\": \"of the clock\",\n                           \"oughtn't\": \"ought not\", \"oughtn't've\": \"ought not have\", \"shan't\": \"shall not\", \"sha'n't\": \"shall not\", \"shan't've\": \"shall not have\",\n                           \"she'd\": \"she would\", \"she'd've\": \"she would have\", \"she'll\": \"she will\", \"she'll've\": \"she will have\", \"she's\": \"she is\",\n                           \"should've\": \"should have\", \"shouldn't\": \"should not\", \"shouldn't've\": \"should not have\", \"so've\": \"so have\",\"so's\": \"so as\",\n                           \"this's\": \"this is\",\"that'd\": \"that would\", \"that'd've\": \"that would have\", \"that's\": \"that is\", \"there'd\": \"there would\",\n                           \"there'd've\": \"there would have\", \"there's\": \"there is\", \"here's\": \"here is\",\"they'd\": \"they would\", \"they'd've\": \"they would have\",\n                           \"they'll\": \"they will\", \"they'll've\": \"they will have\", \"they're\": \"they are\", \"they've\": \"they have\", \"to've\": \"to have\",\n                           \"wasn't\": \"was not\", \"we'd\": \"we would\", \"we'd've\": \"we would have\", \"we'll\": \"we will\", \"we'll've\": \"we will have\", \"we're\": \"we are\",\n                           \"we've\": \"we have\", \"weren't\": \"were not\", \"what'll\": \"what will\", \"what'll've\": \"what will have\", \"what're\": \"what are\",\n                           \"what's\": \"what is\", \"what've\": \"what have\", \"when's\": \"when is\", \"when've\": \"when have\", \"where'd\": \"where did\", \"where's\": \"where is\",\n                           \"where've\": \"where have\", \"who'll\": \"who will\", \"who'll've\": \"who will have\", \"who's\": \"who is\", \"who've\": \"who have\",\n                           \"why's\": \"why is\", \"why've\": \"why have\", \"will've\": \"will have\", \"won't\": \"will not\", \"won't've\": \"will not have\",\n                           \"would've\": \"would have\", \"wouldn't\": \"would not\", \"wouldn't've\": \"would not have\", \"y'all\": \"you all\",\n                           \"y'all'd\": \"you all would\",\"y'all'd've\": \"you all would have\",\"y'all're\": \"you all are\",\"y'all've\": \"you all have\",\n                           \"you'd\": \"you would\", \"you'd've\": \"you would have\", \"you'll\": \"you will\", \"you'll've\": \"you will have\",\n                           \"you're\": \"you are\", \"you've\": \"you have\"}","70323199":"data.columns","71d30ac0":"data=data[['Text','Summary']]\ndata.head()","24cef697":"import nltk\nnltk.download('stopwords')\n  \nstop_words = set(stopwords.words('english')) \n\ndef text_cleaner(text,num):\n    newString = text.lower()\n    newString = BeautifulSoup(newString, \"lxml\").text\n    newString = re.sub(r'\\([^)]*\\)', '', newString)\n    newString = re.sub('\"','', newString)\n    newString = ' '.join([contraction_mapping[t] if t in contraction_mapping else t for t in newString.split(\" \")])    \n    newString = re.sub(r\"'s\\b\",\"\",newString)\n    newString = re.sub(\"[^a-zA-Z]\", \" \", newString) \n    newString = re.sub('[m]{2,}', 'mm', newString)\n    if(num==0):\n        tokens = [w for w in newString.split() if not w in stop_words]\n    else:\n        tokens=newString.split()\n    long_words=[]\n    for i in tokens:\n        if len(i)>1:                                                 #removing short word\n            long_words.append(i)   \n    return (\" \".join(long_words)).strip()","6776d6c6":"#call the function\ncleaned_text = []\nfor t in data['Text']:\n    cleaned_text.append(text_cleaner(t,0)) ","c4773fe1":"cleaned_text[:5]  ","731d29a6":"#call the function\ncleaned_summary = []\nfor t in data['Summary']:\n    cleaned_summary.append(text_cleaner(t,1))","b6ea5e78":"cleaned_summary[:10]","8fffca42":"data['cleaned_text']=cleaned_text\ndata['cleaned_summary']=cleaned_summary","20925f52":"data.replace('', np.nan, inplace=True)\ndata.dropna(axis=0,inplace=True)","14fc3608":"import matplotlib.pyplot as plt\n%matplotlib inline\ntext_word_count = []\nsummary_word_count = []\n\n# populate the lists with sentence lengths\nfor i in data['cleaned_text']:\n      text_word_count.append(len(i.split()))\n\nfor i in data['cleaned_summary']:\n      summary_word_count.append(len(i.split()))\n\nlength_df = pd.DataFrame({'text':text_word_count, 'summary':summary_word_count})\n\nlength_df.hist(bins = 30)\nplt.show()","f2fbe8a8":"cnt=0\nfor i in data['cleaned_summary']:\n    if(len(i.split())<=10):\n        cnt=cnt+1\nprint(cnt\/len(data['cleaned_summary']))","8397fab2":"max_text_len=40\nmax_summary_len=10","915f8150":"cleaned_text =np.array(data['cleaned_text'])\ncleaned_summary=np.array(data['cleaned_summary'])\n\nshort_text=[]\nshort_summary=[]\n\nfor i in range(len(cleaned_text)):\n    if(len(cleaned_summary[i].split())<=max_summary_len and len(cleaned_text[i].split())<=max_text_len):\n        short_text.append(cleaned_text[i])\n        short_summary.append(cleaned_summary[i])\n        \ndf=pd.DataFrame({'text':short_text,'summary':short_summary})","7d73f1b5":"df['summary'] = df['summary'].apply(lambda x : 'sostok '+ x + ' eostok')","5a541561":"np.array(df['text'])","91435404":"from sklearn.model_selection import train_test_split\nx_tr,x_val,y_tr,y_val=train_test_split(np.array(df['text']),np.array(df['summary']),test_size=0.1,random_state=0,shuffle=True) ","b2de0f44":"from keras.preprocessing.text import Tokenizer \nfrom keras.preprocessing.sequence import pad_sequences\n\n#prepare a tokenizer for reviews on training data\nx_tokenizer = Tokenizer() \nx_tokenizer.fit_on_texts(list(x_tr))","46386db6":"thresh=4\n\ncnt=0\ntot_cnt=0\nfreq=0\ntot_freq=0\n\nfor key,value in x_tokenizer.word_counts.items():\n    tot_cnt=tot_cnt+1\n    tot_freq=tot_freq+value\n    if(value<thresh):\n        cnt=cnt+1\n        freq=freq+value\n    \nprint(\"% of rare words in vocabulary:\",(cnt\/tot_cnt)*100)\nprint(\"Total Coverage of rare words:\",(freq\/tot_freq)*100)","0a1284f2":"#prepare a tokenizer for reviews on training data\nx_tokenizer = Tokenizer(num_words=tot_cnt,oov_token=1) \nx_tokenizer.fit_on_texts(list(x_tr))\n\n#convert text sequences into integer sequences\nx_tr_seq    =   x_tokenizer.texts_to_sequences(x_tr) \nx_val_seq   =   x_tokenizer.texts_to_sequences(x_val)\n\n#padding zero upto maximum length\nx_tr    =   pad_sequences(x_tr_seq,  maxlen=max_text_len, padding='post')\nx_val   =   pad_sequences(x_val_seq, maxlen=max_text_len, padding='post')\n\n#size of vocabulary ( +1 for padding token)\nx_voc   =  x_tokenizer.num_words + 1","d1977145":"x_voc","9afb4dce":"#prepare a tokenizer for reviews on training data\ny_tokenizer = Tokenizer()   \ny_tokenizer.fit_on_texts(list(y_tr))","80efcaf1":"thresh=6\n\ncnt=0\ntot_cnt=0\nfreq=0\ntot_freq=0\n\nfor key,value in y_tokenizer.word_counts.items():\n    tot_cnt=tot_cnt+1\n    tot_freq=tot_freq+value\n    if(value<thresh):\n        cnt=cnt+1\n        freq=freq+value\n    \nprint(\"% of rare words in vocabulary:\",(cnt\/tot_cnt)*100)\nprint(\"Total Coverage of rare words:\",(freq\/tot_freq)*100)","5cd612be":"#prepare a tokenizer for reviews on training data\ny_tokenizer = Tokenizer(num_words=tot_cnt,oov_token=1) \ny_tokenizer.fit_on_texts(list(y_tr))\n\n#convert text sequences into integer sequences\ny_tr_seq    =   y_tokenizer.texts_to_sequences(y_tr) \ny_val_seq   =   y_tokenizer.texts_to_sequences(y_val) \n\n#padding zero upto maximum length\ny_tr    =   pad_sequences(y_tr_seq, maxlen=max_summary_len, padding='post')\ny_val   =   pad_sequences(y_val_seq, maxlen=max_summary_len, padding='post')\n\n#size of vocabulary\ny_voc  =   y_tokenizer.num_words +1","ddf44610":"y_tokenizer.word_counts['sostok'],len(y_tr)   ","b5295705":"ind=[]\nfor i in range(len(y_tr)):\n    cnt=0\n    for j in y_tr[i]:\n        if j!=0:\n            cnt=cnt+1\n    if(cnt==2):\n        ind.append(i)\n\ny_tr=np.delete(y_tr,ind, axis=0)\nx_tr=np.delete(x_tr,ind, axis=0)","564469f4":"ind=[]\nfor i in range(len(y_val)):\n    cnt=0\n    for j in y_val[i]:\n        if j!=0:\n            cnt=cnt+1\n    if(cnt==2):\n        ind.append(i)\n\ny_val=np.delete(y_val,ind, axis=0)\nx_val=np.delete(x_val,ind, axis=0)","5aa784cc":"from keras import backend as K \nK.clear_session()\n\nlatent_dim = 300\nembedding_dim=100\n\n# Encoder\nencoder_inputs = Input(shape=(max_text_len,))\n\n#embedding layer\nenc_emb =  Embedding(x_voc, embedding_dim,trainable=True)(encoder_inputs)\n\n#encoder lstm 1\nencoder_lstm1 = LSTM(latent_dim,return_sequences=True,return_state=True,dropout=0.4,recurrent_dropout=0.4)\nencoder_output1, state_h1, state_c1 = encoder_lstm1(enc_emb)\n\n#encoder lstm 2\nencoder_lstm2 = LSTM(latent_dim,return_sequences=True,return_state=True,dropout=0.4,recurrent_dropout=0.4)\nencoder_output2, state_h2, state_c2 = encoder_lstm2(encoder_output1)\n\n#encoder lstm 3\nencoder_lstm3=LSTM(latent_dim, return_state=True, return_sequences=True,dropout=0.4,recurrent_dropout=0.4)\nencoder_outputs, state_h, state_c= encoder_lstm3(encoder_output2)\n\n# Set up the decoder, using `encoder_states` as initial state.\ndecoder_inputs = Input(shape=(None,))\n\n#embedding layer\ndec_emb_layer = Embedding(y_voc, embedding_dim,trainable=True)\ndec_emb = dec_emb_layer(decoder_inputs)\n\ndecoder_lstm = LSTM(latent_dim, return_sequences=True, return_state=True,dropout=0.4,recurrent_dropout=0.2)\ndecoder_outputs,decoder_fwd_state, decoder_back_state = decoder_lstm(dec_emb,initial_state=[state_h, state_c])\n\n# Attention layer\nattn_layer = AttentionLayer(name='attention_layer')\nattn_out, attn_states = attn_layer([encoder_outputs, decoder_outputs])\n\n# Concat attention input and decoder LSTM output\ndecoder_concat_input = Concatenate(axis=-1, name='concat_layer')([decoder_outputs, attn_out])\n\n#dense layer\ndecoder_dense =  TimeDistributed(Dense(y_voc, activation='softmax'))\ndecoder_outputs = decoder_dense(decoder_concat_input)\n\n# Define the model \nmodel = Model([encoder_inputs, decoder_inputs], decoder_outputs)\n\nmodel.summary() ","5ec7c2a4":"model.compile(optimizer='rmsprop', loss='sparse_categorical_crossentropy')","a63ee9ec":"es = EarlyStopping(monitor='val_loss', mode='min', verbose=1,patience=2)","e6634a51":"#model.load_weights('checkpoint_model.h5')","9b7bcc7b":"history=model.fit([x_tr,y_tr[:,:-1]], y_tr.reshape(y_tr.shape[0],y_tr.shape[1], 1)[:,1:] ,epochs=15,callbacks=[es],batch_size=128, \n                  validation_data=([x_val,y_val[:,:-1]], y_val.reshape(y_val.shape[0],y_val.shape[1], 1)[:,1:]))","4fc878a4":"model.save('checkpoint_model.h5')","5ab2815b":"from matplotlib import pyplot\npyplot.plot(history.history['loss'], label='train')\npyplot.plot(history.history['val_loss'], label='test')\npyplot.legend()\npyplot.show()","95d130c1":"reverse_target_word_index=y_tokenizer.index_word\nreverse_source_word_index=x_tokenizer.index_word\ntarget_word_index=y_tokenizer.word_index","1d6d7fed":"# Encode the input sequence to get the feature vector\nencoder_model = Model(inputs=encoder_inputs,outputs=[encoder_outputs, state_h, state_c])\n\n# Decoder setup\n# Below tensors will hold the states of the previous time step\ndecoder_state_input_h = Input(shape=(latent_dim,))\ndecoder_state_input_c = Input(shape=(latent_dim,))\ndecoder_hidden_state_input = Input(shape=(max_text_len,latent_dim))\n\n# Get the embeddings of the decoder sequence\ndec_emb2= dec_emb_layer(decoder_inputs) \n# To predict the next word in the sequence, set the initial states to the states from the previous time step\ndecoder_outputs2, state_h2, state_c2 = decoder_lstm(dec_emb2, initial_state=[decoder_state_input_h, decoder_state_input_c])\n\n#attention inference\nattn_out_inf, attn_states_inf = attn_layer([decoder_hidden_state_input, decoder_outputs2])\ndecoder_inf_concat = Concatenate(axis=-1, name='concat')([decoder_outputs2, attn_out_inf])\n\n# A dense softmax layer to generate prob dist. over the target vocabulary\ndecoder_outputs2 = decoder_dense(decoder_inf_concat) \n\n# Final decoder model\ndecoder_model = Model(\n    [decoder_inputs] + [decoder_hidden_state_input,decoder_state_input_h, decoder_state_input_c],\n    [decoder_outputs2] + [state_h2, state_c2])","3efa3bfa":"def decode_sequence(input_seq):\n    # Encode the input as state vectors.\n    e_out, e_h, e_c = encoder_model.predict(input_seq)\n    \n    # Generate empty target sequence of length 1.\n    target_seq = np.zeros((1,1))\n    \n    # Populate the first word of target sequence with the start word.\n    target_seq[0, 0] = target_word_index['sostok']\n\n    stop_condition = False\n    decoded_sentence = ''\n    while not stop_condition:\n      \n        output_tokens, h, c = decoder_model.predict([target_seq] + [e_out, e_h, e_c])\n\n        # Sample a token\n        sampled_token_index = np.argmax(output_tokens[0, -1, :])\n        sampled_token = reverse_target_word_index[sampled_token_index]\n        \n        if(sampled_token!='eostok'):\n            decoded_sentence += ' '+sampled_token\n\n        # Exit condition: either hit max length or find stop word.\n        if (sampled_token == 'eostok'  or len(decoded_sentence.split()) >= (max_summary_len-1)):\n            stop_condition = True\n\n        # Update the target sequence (of length 1).\n        target_seq = np.zeros((1,1))\n        target_seq[0, 0] = sampled_token_index\n\n        # Update internal states\n        e_h, e_c = h, c\n\n    return decoded_sentence","8852f4f2":"def seq2summary(input_seq):\n    newString=''\n    for i in input_seq:\n        try:\n            if((i!=0 and i!=target_word_index['sostok']) and i!=target_word_index['eostok']):\n                newString=newString+reverse_target_word_index[i]+' '\n        except(TypeError):\n            newString=newString+'<unk> '\n            continue\n    return newString\n\ndef seq2text(input_seq):\n    newString=''\n    for i in input_seq:\n        try:\n            if(i!=0):\n                newString=newString+reverse_source_word_index[i]+' '\n        except(TypeError):\n            newString=newString+'<unk> '\n            continue\n    return newString","9156e1a6":"for i in range(10):\n#    try:\n    print(\"Review:\",seq2text(x_val[i]))\n    print(\"Original summary:\",seq2summary(y_val[i]))\n    print(\"Predicted summary:\",decode_sequence(x_val[i].reshape(1,max_text_len)))\n    print(\"\\n\")\n#    except:\n#        continue","6c8092e2":"sentence=input()\nsentence=text_cleaner(sentence,0)\nc=1\nseq=list()\nsp=list()\nfor i in sentence.split():\n    try:\n        seq.append(x_tokenizer.word_index[i])\n        c+=1\n    except:\n        seq.append(x_tokenizer.word_index[1])\nsp.append(seq)\nsq=pad_sequences(sp,maxlen=max_text_len,padding='post')\ndecode_sequence(sq.reshape(1,max_text_len))","7dc2fb9b":"y_val[1]","18f8a7cd":"We are defining a function below which is the implementation of the inference process (which we covered [here](https:\/\/www.analyticsvidhya.com\/blog\/2019\/06\/comprehensive-guide-text-summarization-using-deep-learning-python\/)):","07bf4e66":"# Model building","aefe7732":"#Understanding the Diagnostic plot\n\nNow, we will plot a few diagnostic plots to understand the behavior of the model over time:","6e08e796":"Deleting the rows that contain only **START** and **END** tokens","fa916af5":"# Loading the dataset","238f4b19":"# Tokenizer","b86b1021":"Here are a few summaries generated by the model:","8f3675a7":"# Preprocessing and cleaning the data","f249c207":"# Information about dataset\n\nLet us look at datatypes and shape of the dataset","8d118b58":"# Inference\n\nSet up the inference for the encoder and decoder:","b6d65bee":"Let us define the functions to convert an integer sequence to a word sequence for summary as well as the reviews:","51145195":"Let us select the reviews and summaries whose length falls below or equal to **max_text_len** and **max_summary_len**","41f8dd69":"We can fix the maximum length of the summary to 8 since that seems to be the majority summary length.","5a6c64f3":"From the plot, we can infer that validation loss has increased after epoch 17 for 2 successive epochs. Hence, training is stopped at epoch 19.\n\nNext, let\u2019s build the dictionary to convert the index to word for target and source vocabulary:","1b1f656e":"Add the **START** and **END** special tokens at the beginning and end of the summary. Here, I have chosen **sostok** and **eostok** as START and END tokens","a1efa8c2":"### Understanding the distribution of the sequences\n\nHere, we will analyze the length of the reviews and the summary to get an overall idea about the distribution of length of the text. This will help us fix the maximum length of the sequence:","9525f112":"# Drop Duplicates and NA values"}}