{"cell_type":{"feee7f9b":"code","8b80b2f9":"code","47cfa0e9":"code","646d788b":"code","a3a703b8":"code","803dbbd6":"code","833dac67":"code","ec523a4f":"code","3119dac1":"code","71b62649":"code","8c33c014":"code","dd665ae7":"code","325f9cfe":"code","a5e02fde":"code","c96b2d93":"code","23c06ae1":"code","f615b02d":"code","4ce376ce":"code","77d34ab1":"code","f887f49b":"code","4c550ed0":"code","d6ce935d":"code","be363222":"code","787a2a44":"code","1094f2b6":"code","8500891a":"code","f45ddee9":"code","18293ad4":"code","b369ef7a":"code","8b443133":"code","2a2f0011":"code","7da47d06":"code","ad8557af":"code","954e8139":"code","71287716":"code","1329d96a":"code","cd4fa441":"code","f9f1a048":"code","8604fac0":"code","f4e6694a":"code","3b56f2c5":"code","bb8b8b67":"code","ac0a6f9a":"code","4e90a51e":"code","3260edec":"code","5df24829":"code","bbc07956":"code","17a2b43a":"code","9f20a385":"code","57cfdd61":"code","cf4384e1":"code","aba7b0c7":"code","eb10b239":"code","23753c0b":"code","f2bd908f":"code","d9c905c8":"code","5184efb5":"code","6f5877fa":"code","e51e8446":"code","a3132304":"code","8eaf433f":"code","467c8326":"code","b36d6eeb":"code","b9ea3904":"code","d6059779":"code","e037dba5":"code","f6252ef5":"code","a713211f":"code","d401afb6":"markdown","46aab6fe":"markdown","e4171546":"markdown","f917785d":"markdown","980156a6":"markdown","a6f6aa60":"markdown","aae40f50":"markdown","1b9d910d":"markdown","b7d603d4":"markdown","a3a89297":"markdown","9c105fd3":"markdown","bdd1ce27":"markdown","f68a1ae0":"markdown","6523d286":"markdown","af265469":"markdown","36a4c361":"markdown","0c54b137":"markdown","e25d01d6":"markdown","63adbe46":"markdown","0f512e0e":"markdown","d579e0d2":"markdown","4269cc4c":"markdown","4f7f1e92":"markdown","b49cb5bd":"markdown","522f8abf":"markdown"},"source":{"feee7f9b":"!pip install git+https:\/\/github.com\/fastai\/fastai@2e1ccb58121dc648751e2109fc0fbf6925aa8887 2>\/dev\/null 1>\/dev\/null","8b80b2f9":"from fastai.imports import *\nfrom fastai.structured import *\nfrom pandas_summary import DataFrameSummary\nfrom sklearn.ensemble import RandomForestClassifier\nfrom IPython.display import display\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\nimport numpy as np \nimport pandas as pd\n\n%load_ext autoreload\n%autoreload 2\n%matplotlib inline \npd.options.mode.chained_assignment = None","47cfa0e9":"df = pd.read_csv(\"..\/input\/heart.csv\")","646d788b":"## from this kernel: https:\/\/www.kaggle.com\/tentotheminus9\/what-causes-heart-disease-explaining-the-model\n\ndf.columns = ['age', 'sex', 'chest_pain_type', 'resting_blood_pressure', 'cholesterol', 'fasting_blood_sugar', 'rest_ecg', 'max_heart_rate_achieved',\n       'exercise_induced_angina', 'st_depression', 'st_slope', 'num_major_vessels', 'thalassemia', 'target']\n\ndf['sex'][df['sex'] == 0] = 'female'\ndf['sex'][df['sex'] == 1] = 'male'\n\ndf['chest_pain_type'][df['chest_pain_type'] == 1] = 'typical angina'\ndf['chest_pain_type'][df['chest_pain_type'] == 2] = 'atypical angina'\ndf['chest_pain_type'][df['chest_pain_type'] == 3] = 'non-anginal pain'\ndf['chest_pain_type'][df['chest_pain_type'] == 4] = 'asymptomatic'\n\ndf['fasting_blood_sugar'][df['fasting_blood_sugar'] == 0] = 'lower than 120mg\/ml'\ndf['fasting_blood_sugar'][df['fasting_blood_sugar'] == 1] = 'greater than 120mg\/ml'\n\ndf['rest_ecg'][df['rest_ecg'] == 0] = 'normal'\ndf['rest_ecg'][df['rest_ecg'] == 1] = 'ST-T wave abnormality'\ndf['rest_ecg'][df['rest_ecg'] == 2] = 'left ventricular hypertrophy'\n\ndf['exercise_induced_angina'][df['exercise_induced_angina'] == 0] = 'no'\ndf['exercise_induced_angina'][df['exercise_induced_angina'] == 1] = 'yes'\n\ndf['st_slope'][df['st_slope'] == 1] = 'upsloping'\ndf['st_slope'][df['st_slope'] == 2] = 'flat'\ndf['st_slope'][df['st_slope'] == 3] = 'downsloping'\n\ndf['thalassemia'][df['thalassemia'] == 1] = 'normal'\ndf['thalassemia'][df['thalassemia'] == 2] = 'fixed defect'\ndf['thalassemia'][df['thalassemia'] == 3] = 'reversable defect'","a3a703b8":"df.head()","803dbbd6":"def missing_data_ratio(df):\n    all_data_na = (df.isnull().sum() \/ len(df)) * 100\n    all_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)[:30]\n    missing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\n    return missing_data","833dac67":"import warnings\n\nwith warnings.catch_warnings():\n    warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n    import imp","ec523a4f":"import pandas_profiling","3119dac1":"profile = pandas_profiling.ProfileReport(df)","71b62649":"missing_data_ratio(df)","8c33c014":"profile","dd665ae7":"df.columns","325f9cfe":"df.chest_pain_type = df.chest_pain_type.astype(\"category\")\ndf.exercise_induced_angina = df.exercise_induced_angina.astype(\"category\")\ndf.fasting_blood_sugar = df.fasting_blood_sugar.astype(\"category\")\ndf.rest_ecg = df.rest_ecg.astype(\"category\")\ndf.sex = df.sex.astype(\"category\")\ndf.st_slope = df.st_slope.astype(\"category\")\ndf.thalassemia = df.thalassemia.astype(\"category\")","a5e02fde":"df = pd.get_dummies(df, drop_first=True)","c96b2d93":"df_p,y,_=proc_df(df,\"target\")","23c06ae1":"df_p.head()","f615b02d":"from sklearn.model_selection import RandomizedSearchCV","4ce376ce":"rf_param_grid = {\n                 'max_depth' : [4, 6, 8,10],\n                 'n_estimators': range(1,30),\n                 'max_features': ['sqrt', 'auto', 'log2'],\n                 'min_samples_split': [2, 3, 10,20],\n                 'min_samples_leaf': [1, 3, 10,18],\n                 'bootstrap': [True, False],\n                 \n                 }","77d34ab1":"m = RandomForestClassifier()","f887f49b":"m_r = RandomizedSearchCV(param_distributions=rf_param_grid, \n                                    estimator = m, scoring = \"accuracy\", \n                                    verbose = 0, n_iter = 100, cv = 5)","4c550ed0":"%time m_r.fit(df_p, y)","d6ce935d":"m_r.best_score_","be363222":"m_r.best_params_","787a2a44":"rf_bp = m_r.best_params_","1094f2b6":"rf_classifier=RandomForestClassifier(n_estimators=rf_bp[\"n_estimators\"],\n                                     min_samples_split=rf_bp['min_samples_split'],\n                                     min_samples_leaf=rf_bp['min_samples_leaf'],\n                                     max_features=rf_bp['max_features'],\n                                     max_depth=rf_bp['max_depth'],\n                                     bootstrap=rf_bp['bootstrap'])","8500891a":"rf_classifier.fit(df_p,y)","f45ddee9":"fi = rf_feat_importance(rf_classifier,df_p)","18293ad4":"def plot_fi(fi):\n    return fi.plot('cols', 'imp', 'barh', figsize=(12,7), legend=False)","b369ef7a":"plot_fi(fi)","8b443133":"import lightgbm as lgbm","2a2f0011":"lgbm_model = lgbm.LGBMClassifier()","7da47d06":"lgbm_params = {\n    \"n_estimators\":[10,100,1000,2000],\n    'boosting_type': ['dart','gbdt'],          \n    'learning_rate': [0.05,0.1,0.2],       \n    'min_split_gain': [0.0,0.1,0.5,0.7],     \n    'min_child_weight': [0.001,0.003,0.01],     \n    'num_leaves': [10,21,41,61],            \n    'min_child_samples': [10,20,30,60,100]\n              }","ad8557af":"lgbm_model = lgbm.LGBMClassifier()","954e8139":"lgbm_c = RandomizedSearchCV(param_distributions=lgbm_params, \n                                    estimator = lgbm_model, scoring = \"accuracy\", \n                                    verbose = 0, n_iter = 100, cv = 4)","71287716":"lgbm_c.fit(df_p,y)","1329d96a":"lgbm_bp =lgbm_c.best_params_","cd4fa441":"lgbm_model = lgbm.LGBMClassifier(num_leaves=lgbm_bp[\"num_leaves\"],\n                                 n_estimators=lgbm_bp[\"n_estimators\"],\n                                 min_split_gain=lgbm_bp[\"min_split_gain\"],\n                                 min_child_weight=lgbm_bp[\"min_child_weight\"],\n                                 min_child_samples=lgbm_bp[\"min_child_samples\"],\n                                 learning_rate=lgbm_bp[\"learning_rate\"],\n                                 boosting_type=lgbm_bp[\"boosting_type\"])","f9f1a048":"lgbm_model.fit(df_p,y)","8604fac0":"def feature_imp(df,model):\n    fi = pd.DataFrame()\n    fi[\"feature\"] = df.columns\n    fi[\"importance\"] = model.feature_importances_\n    return fi.sort_values(by=\"importance\", ascending=False)","f4e6694a":"feature_imp(df_p,lgbm_model).plot('feature', 'importance', 'barh', figsize=(12,7), legend=False)","3b56f2c5":"import xgboost as xgb","bb8b8b67":"xgb_classifier = xgb.XGBClassifier()","ac0a6f9a":"gbm_param_grid = {\n    'n_estimators': range(1,20),\n    'max_depth': range(1, 10),\n    'learning_rate': [.1,.4, .45, .5, .55, .6],\n    'colsample_bytree': [.6, .7, .8, .9, 1],\n    'booster':[\"gbtree\"],\n     'min_child_weight': [0.001,0.003,0.01],\n}","4e90a51e":"xgb_random = RandomizedSearchCV(param_distributions=gbm_param_grid, \n                                    estimator = xgb_classifier, scoring = \"accuracy\", \n                                    verbose = 0, n_iter = 100, cv = 4)","3260edec":"xgb_random.fit(df_p,y)","5df24829":"xgb_bp = xgb_random.best_params_","bbc07956":"xgb_model=xgb.XGBClassifier(n_estimators=xgb_bp[\"n_estimators\"],\n                            min_child_weight=xgb_bp[\"min_child_weight\"],\n                            max_depth=xgb_bp[\"max_depth\"],\n                            learning_rate=xgb_bp[\"learning_rate\"],\n                            colsample_bytree=xgb_bp[\"colsample_bytree\"],\n                            booster=xgb_bp[\"booster\"])","17a2b43a":"xgb_model.fit(df_p,y)","9f20a385":"feature_imp(df_p,xgb_model).plot('feature', 'importance', 'barh', figsize=(12,7), legend=False)","57cfdd61":"from IPython.core.display import HTML\n\ndef multi_table(table_list):\n    ''' Acceps a list of IpyTable objects and returns a table which contains each IpyTable in a cell\n    '''\n    return HTML(\n        '<table><tr style=\"background-color:white;\">' + \n        ''.join(['<td>' + table._repr_html_() + '<\/td>' for table in table_list]) +\n        '<\/tr><\/table>'\n    )","cf4384e1":"rf_fm = rf_feat_importance(rf_classifier,df_p)\nlgbm_fm = feature_imp(df_p,lgbm_model)\nxgb_fm = feature_imp(df_p,xgb_model)","aba7b0c7":"multi_table([rf_fm,lgbm_fm,xgb_fm])","eb10b239":"import seaborn as sns\ncorr = df_p.corr()\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\nf, ax = plt.subplots(figsize=(11, 9))\n\nsns.heatmap(corr, \n            xticklabels=corr.columns.values,\n            yticklabels=corr.columns.values,mask=mask,cmap='summer_r',vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","23753c0b":"from scipy.cluster import hierarchy as hc","f2bd908f":"def hierarchy_tree(df):\n    corr = np.round(scipy.stats.spearmanr(df).correlation, 4)\n    corr_condensed = hc.distance.squareform(1-df.corr())\n    z = hc.linkage(corr_condensed, method='average')\n    fig = plt.figure(figsize=(16,10))\n    dendrogram = hc.dendrogram(z, labels=df.columns, orientation='left', leaf_font_size=16)\n    plt.show()","d9c905c8":"hierarchy_tree(df_p)","5184efb5":"df_p[\"target\"] = y  ","6f5877fa":"df_p.columns","e51e8446":"max_heart_rate_achieved = pd.cut(df_p.max_heart_rate_achieved,4,labels=[\"71-104\",\"105-137\",\"138-170\",\"171-202\"])","a3132304":"df_p.columns","8eaf433f":"cross1=pd.crosstab([df_p.st_slope_flat[df_p.st_slope_flat==1],df_p.target],max_heart_rate_achieved).style.background_gradient(cmap='summer_r')\ncross1","467c8326":"cross1=pd.crosstab([df_p.st_slope_flat[df_p.st_slope_flat==1],df_p[\"thalassemia_fixed defect\"][df_p[\"thalassemia_fixed defect\"]==1],\n                    df_p.target],max_heart_rate_achieved).style.background_gradient(cmap='summer_r')\ncross1","b36d6eeb":"cross1=pd.crosstab([df_p.st_slope_flat[df_p.st_slope_flat==1],df_p[\"thalassemia_fixed defect\"][df_p[\"thalassemia_fixed defect\"]==1],df_p[\"chest_pain_type_typical angina\"][df_p[\"chest_pain_type_typical angina\"]==1],\n                    df_p.target],max_heart_rate_achieved).style.background_gradient(cmap='summer_r')\ncross1","b9ea3904":"cross1=pd.crosstab([df_p[\"thalassemia_fixed defect\"]],df_p.sex_male,margins=True).style.background_gradient(cmap='summer_r')\ncross1","d6059779":"cross1=pd.crosstab([df_p[\"thalassemia_fixed defect\"][df_p[\"thalassemia_fixed defect\"]==1],df_p.target],df_p.sex_male).style.background_gradient(cmap='summer_r')\ncross1","e037dba5":"cross1=pd.crosstab([df_p.exercise_induced_angina_yes[df_p.exercise_induced_angina_yes==1],df_p.target],[df_p.st_slope_upsloping[df_p.st_slope_upsloping==1],df_p.st_depression]).style.background_gradient(cmap='summer_r')\ncross1","f6252ef5":"age = pd.cut(df_p.age,6,labels=[\"(28.952, 37.0)\", \"(37.0, 45.0)\", \"(45.0, 53.0)\",\"(53.0, 61.0)\",\"(61.0, 69.0)\", \"(69.0, 77.0)\"])","a713211f":"cross1=pd.crosstab([pd.cut(df_p.resting_blood_pressure,3),df_p.target],[age]).style.background_gradient(cmap='summer_r')\ncross1","d401afb6":"## Heart Disease Diagnosis and Prediction","46aab6fe":"#### <b>LightGBM<\/b>  <a class=\"anchor\" id=\"lgm\"><\/a>","e4171546":"#### <b>XGboost Feature importance <\/b>","f917785d":"This database contains 76 attributes, but all published experiments refer to using a subset of 14 of them. In particular, the Cleveland database is the only one that has been used by ML researchers to this date. The \"goal\" field refers to the presence of heart disease in the patient. It is integer valued from 0 (no presence) to 4.\n","980156a6":"##  Investigating strongly correlated features <a class=\"anchor\" id=\"ic\"><\/a>","a6f6aa60":"### <b>Introduction <\/b>","aae40f50":"### <b>Contents<\/b>\n\n1. [Data Cleaning](#dc)\n2. [Models](#md) <br>\n    2.1 [Random Forest](#md)<br>\n    2.2 [LightGBM](#lgm)<br>\n    2.3 [XGBoost](#xgb)\n3. [Top feature causing heart disease](#tf)\n4. [Feature correlation ](#fc)\n5. [Investigating strongly correlated features](#ic)","1b9d910d":"###### according to this data 93% of poeple that have st_slope_flat + thalassemia_fixed_defect + chest_pain_typical_argina have heart disease ","b7d603d4":"### <b>Kernel goals <\/b>:\n#### data exploration and cleaning \n#### data modeling(Random Forest + LighGBM + XGBoost )\n#### feature importance \n#### investigation some correlation ","a3a89297":"#### <b>Random Forest Feature importance<\/b> ","9c105fd3":"## Thank you for reading ( \u0361\u1d54 \u035c\u0296 \u0361\u1d54 )","bdd1ce27":"#### <b> resting_blood_pressure is strong factory but only in early age <\/b>","f68a1ae0":"### crosstabing correlated features","6523d286":"#### <b>Xgboost<\/b>  <a class=\"anchor\" id=\"xgb\"><\/a>","af265469":"## Data Cleaning <a class=\"anchor\" id=\"dc\"><\/a>","36a4c361":"## feature correlation <a class=\"anchor\" id=\"fc\"><\/a>","0c54b137":"#### Dataset information ","e25d01d6":"#### <b>LightGBM Feature importance <\/b>","63adbe46":"### If you found this helpful a upvote would be very much appreciated :-)","0f512e0e":"#### <b>Random Forest<\/b>  <a class=\"anchor\" id=\"rd\"><\/a>","d579e0d2":"#### Attribute Information: \n> 1. age \n> 2. sex \n> 3. chest pain type (4 values) \n> 4. resting blood pressure \n> 5. serum cholestoral in mg\/dl \n> 6. fasting blood sugar > 120 mg\/dl\n> 7. resting electrocardiographic results (values 0,1,2)\n> 8. maximum heart rate achieved \n> 9. exercise induced angina \n> 10. oldpeak = ST depression induced by exercise relative to rest \n> 11. the slope of the peak exercise ST segment \n> 12. number of major vessels (0-3) colored by flourosopy \n> 13. thal: 3 = normal; 6 = fixed defect; 7 = reversable defect","4269cc4c":"#### <b>quick exploration with pandas profiling <\/b>","4f7f1e92":"## Models <a class=\"anchor\" id=\"md\"><\/a>","b49cb5bd":"### Top feature causing heart disease according to RF,LGBM,XGB <a class=\"anchor\" id=\"tf\"><\/a>","522f8abf":"<img src=\"https:\/\/cdn-images-1.medium.com\/max\/1600\/1*CQXQxHDKi0Q2IpdjhufEcw.jpeg\" style=\"height:300px;\" \/>"}}