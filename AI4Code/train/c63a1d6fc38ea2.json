{"cell_type":{"e0b4db3a":"code","2d8b14d7":"code","4534fd3d":"code","9b321cc5":"code","09587907":"code","44410b3d":"code","b8d30c8b":"code","48a9dff5":"code","d441ee59":"code","c5c96794":"code","7792bc6a":"code","4e266bf8":"code","8d8cc822":"code","49c31a6c":"code","83fecd97":"code","a31495e6":"code","217f62dd":"code","ec933649":"code","828def18":"code","d416e702":"code","efd9f368":"code","3b3be9e5":"code","1624cdff":"code","59bd57eb":"code","62655a84":"code","2d1c98e6":"code","cda9f0bf":"markdown","c6acd120":"markdown","48eb5edf":"markdown"},"source":{"e0b4db3a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2d8b14d7":"# Let's get the train data\ntrain = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\n\ntrain.head()","4534fd3d":"# Each row in train dataset is a image and label column tells which number is in the image\n# so, if label is 1, it means that image has digit 1 in it\n# we will take this label and assign it to y_train(output variable) and rest will be X_train(input varibale)\nX_train = train.drop('label',axis =1)\ny_train = train['label']","9b321cc5":"# Let's get the test dataset\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\n\ntest.head()","09587907":"# Let's try to view one image. 2nd row in X_train\nimg = X_train.iloc[2]\n\n# Let's convert it into numpy array of shape (28,28)\nimg = img.to_numpy().reshape((28,28))\n\n# Let's view this image\nplt.imshow(img)","44410b3d":"# So the image has digit 1\n# we can compare it with y_train\nprint(y_train[2])","b8d30c8b":"# Now let's convert each image(row) in X_train and test dataset into numpy array of (28,28) shape\nX_train = X_train.to_numpy()\nX_test = test.to_numpy()","48a9dff5":"# Let's reshape the X_train and X_test in to right format\nX_train = X_train.reshape(-1,28,28,1) # -1 will be replaced by lenth of X_train\n\n# (28,28) is the size of each image\n# 1 means image is grascale image(0-255)\n\nX_test = X_test.reshape(-1,28,28,1)","d441ee59":"# Let's check the shape of X_train and X_test\nprint(f'Shape of X_train is {X_train.shape}')\nprint('\\n')\nprint(f'Shape of X_test is {X_test.shape}')","c5c96794":"# Let's view some images and there labels\nplt.figure(figsize=(10,5))\nfor i in range(8):\n    plt.subplot(2,4,i+1)\n    plt.imshow(X_train[i])\n    plt.axis('off')\n    plt.title(y_train[i])\nplt.tight_layout()\n    ","7792bc6a":"# Let's resize each image\nX_train = X_train\/255\nX_test  = X_test\/255","4e266bf8":"# Let's check y_train\n\n# First let's convert the y_train into numpy array\ny_train = y_train.to_numpy()\n\ny_train","8d8cc822":"# Let's convert y_train into categories.1 will [0,1,0,0,0,0,0,0,0,0] and so on\n# if y_train value is 7, only value at index 7 will be 1 and rest will be 0.\nfrom tensorflow.keras.utils import to_categorical\n\ny_train = to_categorical(y_train)","49c31a6c":"# It's time to create our CNN model\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D\nfrom tensorflow.keras.layers import MaxPool2D\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.layers import Dense\n# from tensorflow.keras.callbacks import EarlyStopping","83fecd97":"# Model:\n\nmodel = Sequential()\n\n# 1st convolution layer\nmodel.add(Conv2D(filters=64,kernel_size=(3,3),input_shape=(28,28,1)))\nmodel.add(MaxPool2D(pool_size=2))\n\n# 2nd convolution layer\nmodel.add(Conv2D(filters=64,kernel_size=(3,3)))\nmodel.add(MaxPool2D(pool_size=2))\n\n# Flatten so that it can be read by ANN\nmodel.add(Flatten())\n\n# 1st ANN layer\nmodel.add(Dense(512,activation='relu'))\n\n#2nd ANN layer\n# model.add(Dense(256,activation='relu'))\n\n# 3rd ANN layer - Output layer\nmodel.add(Dense(10,activation = 'softmax'))\n\nmodel.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])\n\nmodel.summary()","a31495e6":"# # Before training our model. Let's spilt our train data into train and validation data\n# # This is done so that we can test our model using validation data during training\n# batch_size = 150 # we will use 150 images for validation image\n\n# X_valid,y_valid = X_train[:batch_size],y_train[:batch_size]\n# X_train1,y_train1 = X_train[batch_size:],y_train[batch_size:]","217f62dd":"# early_stop = EarlyStopping(monitor='val_loss',patience=2)","ec933649":"# Let's train our model\nmodel.fit(X_train,y_train,epochs=100,batch_size=64)","828def18":"# metrics = pd.DataFrame(model.history.history)\n\n# metrics.head()","d416e702":"# Let's comapre the accuracy\n# metrics[['accuracy','val_accuracy']].plot()","efd9f368":"# Let's compare the loss\n# metrics[['loss','val_loss']].plot()","3b3be9e5":"# Let's do the prediction of X_test\nprediction = model.predict(X_test)","1624cdff":"# Let's view the predictions\nprediction","59bd57eb":"# Let's convert them into proper label.\n# We can use the argmax to get the index of maximum value in each prediction\nfinal_prediction = prediction.argmax(axis=1)\n\nfinal_prediction","62655a84":"# Now lets save it\n# we can take ImageId from index in test data set and Label from final_prediction\nsubmission = pd.concat([pd.Series(np.arange(1,28001)),pd.Series(final_prediction)],axis =1)\nsubmission.columns=['ImageId','Label']\n\nsubmission.tail()","2d1c98e6":"# Let's save it\nsubmission.to_csv('my_submission_1.csv',index=False)","cda9f0bf":"# CNN Model","c6acd120":"**X_train and X_test are now in right shape and size to be used in model**","48eb5edf":"**Now we have X_train and y_train which we can use to train our model and test dataset to predict.**\n\n**Important thing to note here is all these pixel combines to form a image. One row consist of one image**\n\n**We can convert each row into numpy array and then use matplotlib to view these images**"}}