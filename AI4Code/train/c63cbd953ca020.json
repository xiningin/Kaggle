{"cell_type":{"5ca8ef4c":"code","dbf1c396":"code","44cb72d5":"code","81cd2961":"code","6e47c4da":"code","bbae4d22":"code","8b3c6425":"code","beb6da56":"code","133aff6a":"code","7322d77b":"code","e6085336":"code","d2a038ba":"code","0134f6e1":"code","c3d75405":"code","5eb79afc":"code","cf6f8737":"code","a7f98331":"code","1afa452b":"code","f39e62cd":"code","8a29bdca":"code","ec89234a":"code","2923fd19":"code","319f7421":"code","5a03fa91":"code","550b6ab6":"code","3ebb6516":"code","5db3633d":"code","1cfda11f":"code","5b3d7c5d":"code","1a7abab4":"code","8f21375c":"markdown"},"source":{"5ca8ef4c":"# This Python 3 environment comes with many helpful analytics libraries installed.\n# For our use, here's several helpful packages to load.","dbf1c396":"import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport numpy as np # linear algebra.\nimport matplotlib.pyplot as plt # for visualize our data\nimport seaborn as sns  # for our pre loaded visualization\n%matplotlib inline \n# for bettr plotting of graph.","44cb72d5":"#importing dataset and displaying\ntrain=pd.read_excel(\"..\/input\/flight-fare-prediction-mh\/Data_Train.xlsx\")\ntrain","81cd2961":"# displaying top rows of the dataset. \ntrain.head()","6e47c4da":"# displaying bottom rows of the dataset. \ntrain.tail()","bbae4d22":"# displaying information about the dataset. \ntrain.info()","8b3c6425":"train.columns","beb6da56":"# displaying the null value containing columns.\ntrain.isnull().sum()","133aff6a":"# displaying the null value contained rows\n# 1.\na=train.loc[train[\"Route\"].isnull()]\na","7322d77b":"# 2.\nb=train.loc[train[\"Total_Stops\"].isnull()]\nb","e6085336":"# dropping the null value containing row.\ntrain.dropna(inplace=True)","d2a038ba":"# dropping the unwanted column which will not effect our dataset.\ntrain.drop(labels = 'Route', axis = 1, inplace = True)","0134f6e1":"# after above operations we will have a look on our dataset.\ntrain.head()","c3d75405":"# we will now have a look on our dataset to find the null value and the status of our dataset.\ntrain.isnull().sum()","5eb79afc":"#extracting the day of journey and month of journey from the Date of journey column\n#as both day and month are required and model will not understand string values\ntrain['Journey_Day'] = pd.to_datetime(train.Date_of_Journey, format='%d\/%m\/%Y').dt.day\ntrain['Journey_Month'] = pd.to_datetime(train.Date_of_Journey, format='%d\/%m\/%Y').dt.month\ntrain['weekday']= pd.to_datetime(train.Date_of_Journey, format='%d\/%m\/%Y').dt.weekday\ntrain.head()","cf6f8737":"# now after extracting the required columns now we will delete the date column.\ntrain.drop(labels = 'Date_of_Journey', axis = 1, inplace = True)","a7f98331":"# now  our dataset will look like this.\ntrain.head()","1afa452b":"# now our no of columns will increase so let's have a look on our columns.\ntrain.columns","f39e62cd":"# displaying the information about our dataset after certain operations.\ntrain.info()","8a29bdca":"# displaying the description of the dataset we will have .\ntrain.describe()","ec89234a":"# now will convert our duration from hours to minutes .\ndef duration(test):\n    test = test.strip()\n    total=test.split(' ')\n    to=total[0]\n    hrs=(int)(to[:-1])*60\n    if((len(total))==2):\n        mint=(int)(total[1][:-1])\n        hrs=hrs+mint\n    test=str(hrs)\n    return test\ntrain['Duration']=train['Duration'].apply(duration)","2923fd19":"# after conversion of duration we will  convert  time to stages of day like morning , evening , night ,and afternoon.\ndef deparrtime(x):\n    x=x.strip()\n    tt=(int)(x.split(':')[0])\n    if(tt>=16 and tt<21):\n        x='Evening'\n    elif(tt>=21 or tt<5):\n        x='Night'\n    elif(tt>=5 and tt<11):\n        x='Morning'\n    elif(tt>=11 and tt<16):\n        x='Afternoon'\n    return x\ntrain['Dep_Time']=train['Dep_Time'].apply(deparrtime)\ntrain['Arrival_Time']=train['Arrival_Time'].apply(deparrtime)","319f7421":"# after conversion of duration and arrival & departure time ,we will  convert no of stops between the origin and destination.\ndef  stopcount(y):\n    if (y==\"non-stop\"):\n        y='0'\n    else:\n        y.strip()\n        sc=y.split(\" \")[0]\n        y=sc\n    return(y)\ntrain[\"Total_Stops\"]=train[\"Total_Stops\"].apply(stopcount)","5a03fa91":"# now our dataset will look like this.\ntrain.head()","550b6ab6":"train.info()","3ebb6516":"# will change the data types of some columns to the required datatypes for our better exploratory analysis of data.\ntrain[\"Duration\"]=train[\"Duration\"].astype(int)\ntrain[\"Journey_Day\"]=train[\"Journey_Day\"].astype(object)\ntrain[\"Journey_Month\"]=train[\"Journey_Month\"].astype(object)\ntrain[\"weekday\"]=train[\"weekday\"].astype(object)","5db3633d":"# we will change our months name according to our datatype as our months can't be in integer form so we will convert them to the month's name .\ntrain[\"Journey_Month\"]=train[\"Journey_Month\"].replace({3:\"march\",4:\"april\",5:\"may\",6:\"june\"})","1cfda11f":"# will have a look on our dataset.\ntrain.head()","5b3d7c5d":"d=train.columns\nd","1a7abab4":"# now we will count no of labels .\nfor i in d:\n    print(\"the no of labels are in \",i,\"are as follows  \",train[i].value_counts())","8f21375c":" **  Now we will head towards visualization of our cleaned data.**"}}