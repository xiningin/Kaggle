{"cell_type":{"bc559961":"code","5fa057c3":"code","5880944a":"code","36e30809":"code","ba944628":"code","5612990a":"code","cada73d9":"code","9e231b39":"code","b1fb6089":"code","f3c2032f":"code","30c8a2f7":"code","2c5b108e":"code","8e736378":"code","bb1d9f8c":"code","f0b838dd":"code","2dcdd537":"code","a7d5513b":"code","9f7940be":"code","11516f42":"code","8eac38e6":"code","b33f6e53":"code","2596bcef":"code","042e0fe5":"code","3b6e0fb5":"code","eed11f63":"code","a3313623":"code","fef75189":"code","ec84b03a":"markdown","d68a0ed1":"markdown","740ddc20":"markdown"},"source":{"bc559961":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5fa057c3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt     #visualisation\nimport seaborn as sns               #visualisation\n\nsns.set(color_codes=True)","5880944a":"# Loading the data into the data frame \ndf = pd.read_csv('..\/input\/passenger-list-for-the-estonia-ferry-disaster\/estonia-passenger-list.csv')\ndf.head(5)","36e30809":"#Find any null values are present\ndf.isnull().mean()*100","ba944628":"#Correlation\nc = df.corr()\nc\n\n#Heatmap\nsns.heatmap(c, cmap='BrBG', annot=True)","5612990a":"#Total Deaths and Survivers\nsns.countplot(df['Survived'])","cada73d9":"# Male and Female death count\nsns.countplot(df['Sex'],hue=df['Survived'])","9e231b39":"# Passenger and Crew death count\nsns.countplot(df['Category'],hue=df['Survived'])","b1fb6089":"# Male passengers & crew vs Female passengers & crew\nsns.countplot(df['Sex'],hue=df['Category'])","f3c2032f":"# According to Country wise\ncountry = sns.countplot(df['Country'],hue=df['Survived'])\ncountry.set_xticklabels(country.get_xticklabels(), rotation=45)","30c8a2f7":"# Dropping unneccessary columns\ndf= df.drop(['PassengerId','Country','Firstname','Lastname'],axis=1)\ndf.head()","2c5b108e":"# Converting Catergorial variables into numerical and adding dummies\ncat_var=['Sex','Category']\n\nfor var in cat_var:\n    dummy=pd.get_dummies(df[var],prefix=var,drop_first=True)\n    \n    df=pd.concat([df,dummy],axis=1)\n    df=df.drop([var],axis=1)\ndf.head()","8e736378":"# Train and Test Split\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.model_selection import train_test_split\nimport statsmodels.api as sm\nnp.random.seed()","bb1d9f8c":"#Train and Test set\ndf_train,df_test = train_test_split(df,train_size=0.7,test_size=0.3,random_state=100)\ny_train=df_train.pop('Survived')\nX_train=df_train\n\ny_test=df_test.pop('Survived')\nX_test=df_test","f0b838dd":"# Random Forest\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Create instance\nrf_classifier = RandomForestClassifier(criterion='entropy',n_jobs=-1,n_estimators=10,\n                                       random_state=None,max_depth=5)\n\n# Fitting the model\nrf_classifier.fit(X_train,y_train)","2dcdd537":"# Predicting the values\ny_pred_train = rf_classifier.predict(X_train)\ny_pred_test = rf_classifier.predict(X_test)","a7d5513b":"from sklearn.metrics import confusion_matrix, accuracy_score\n\n# Confusion matrix Train\ncm_train = confusion_matrix(y_train, y_pred_train)\nprint(cm_train)","9f7940be":"# Confusion matrix Test\ncm_test = confusion_matrix(y_test, y_pred_test)\nprint(cm_test)","11516f42":"# Accuracy train\naccuracy_train = accuracy_score(y_train, y_pred_train)\naccuracy_train","8eac38e6":"# Accuracy Test\naccuracy_test = accuracy_score(y_test, y_pred_test)\naccuracy_test","b33f6e53":"# Grid Search -- Cross-Validation \nfrom sklearn.model_selection import GridSearchCV\n\nrf_classifier = RandomForestClassifier(criterion='entropy',n_jobs=-1,n_estimators=10,\n                                       random_state=None,max_depth=5)\n\n#Parameters Grid\nparams_grid = {'min_samples_split':[2,3,4]}","2596bcef":"# Creating instance\ngrid_classifier = GridSearchCV(rf_classifier,params_grid,scoring='accuracy',cv=5)\n\n# Fitting the model\ngrid_classifier.fit(X_train,y_train)\n","042e0fe5":"#best parameters\ngrid_classifier.best_params_","3b6e0fb5":"#Cross validation -- best estimator\n\ncvrf_classifier = grid_classifier.best_estimator_","eed11f63":"# Predict\ny_pred_train = cvrf_classifier.predict(X_train)\ny_pred_test = cvrf_classifier.predict(X_test)","a3313623":"# Confusion Matrix\ncm_train = confusion_matrix(y_train, y_pred_train)\nprint(cm_train)\n\ncm_test = confusion_matrix(y_test, y_pred_test)\nprint(cm_test)","fef75189":"# Accuracy\naccuracy_train = accuracy_score(y_train, y_pred_train)\nprint(accuracy_train)\n\naccuracy_test = accuracy_score(y_test, y_pred_test)\nprint(accuracy_test)","ec84b03a":"# Data Visualization","d68a0ed1":"**The Accuracy Test of both Random Forest and Cross Validation is same**","740ddc20":"# Random Forest"}}