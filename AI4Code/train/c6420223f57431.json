{"cell_type":{"e8519817":"code","acc71411":"code","92e2a60e":"code","79810bc1":"code","5a3c2452":"code","0febb627":"code","3cfa8542":"code","c3783b48":"markdown","e8ffefea":"markdown","cc19abf7":"markdown","0dc68825":"markdown","abd11cd7":"markdown"},"source":{"e8519817":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom numba import jit\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport os\nimport warnings\nwarnings.filterwarnings('ignore')\nprint(os.listdir(\"..\/input\"))\nimport re\n# Any results you write to the current directory are saved as output.","acc71411":"train_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')","92e2a60e":"train_df.head()","79810bc1":"from datetime import datetime, timedelta\n\ndef calculateDate(ordinal, _epoch0=datetime(1899, 12, 31)):\n    ordinal = (ordinal*10000)-7000\n    if ordinal > 59:\n        ordinal -= 1  # Excel leap year bug, 1900 is not a leap year!\n    return (_epoch0 + timedelta(days=ordinal)).replace(microsecond=0)\ndef add_datepart(df, fldname, drop=True, time=False, errors=\"raise\"):\n    fld = df[fldname]\n    fld_dtype = fld.dtype\n    if isinstance(fld_dtype, pd.core.dtypes.dtypes.DatetimeTZDtype):\n        fld_dtype = np.datetime64\n\n    if not np.issubdtype(fld_dtype, np.datetime64):\n        df[fldname] = fld = pd.to_datetime(fld, infer_datetime_format=True, errors=errors)\n    targ_pre = re.sub('[Dd]ate$', '', fldname)\n    attr = ['Year', 'Month', 'Week', 'Day', 'Dayofweek', 'Dayofyear',\n            'Is_month_end', 'Is_month_start', 'Is_quarter_end', 'Is_quarter_start', 'Is_year_end', 'Is_year_start']\n    if time: attr = attr + ['Hour', 'Minute', 'Second']\n    for n in attr: df[targ_pre + n] = getattr(fld.dt, n.lower())\n    df[targ_pre + 'Elapsed'] = fld.astype(np.int64) \/\/ 10 ** 9\n    if drop: df.drop(fldname, axis=1, inplace=True)\n","5a3c2452":"dates = []\nfor i in range(len(train_df)):\n    dates.append(calculateDate(train_df[\"var_68\"][i]))\ntestdates = []\nfor i in range(len(test_df)):\n    testdates.append(calculateDate(test_df[\"var_68\"][i]))","0febb627":"train_df[\"date\"]=dates\ntest_df[\"date\"]=testdates\nadd_datepart(train_df,\"date\")\nadd_datepart(test_df,\"date\")","3cfa8542":"train_df[['Month','Week','Day','Dayofweek','Dayofyear','Is_month_end','Is_month_start','Is_quarter_end','Is_quarter_start','Is_year_end','Is_year_start']].head()","c3783b48":"Loading data","e8ffefea":"Adding new features","cc19abf7":"Var_68 was recognized as a date format on excel, I shifted it by 7000 in order to make it between 2017 and max = jan 4, 2019","0dc68825":"Printing the 11 new variabls of date","abd11cd7":"Extracting date from var_68"}}