{"cell_type":{"72c8d84e":"code","2ff68210":"code","3eafd026":"code","ecd9ddfb":"code","448e9d96":"markdown"},"source":{"72c8d84e":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import StratifiedKFold","2ff68210":"class ContinuousStratifiedKFold(StratifiedKFold):\n    def split(self, X, y, groups=None):\n        num_bins = int(np.floor(1 + np.log2(len(y))))\n        bins = pd.cut(y, bins=num_bins, labels=False)\n        return super().split(X, bins, groups)","3eafd026":"TARGET_COL = 'target'\nTRAIN_PATH = '..\/input\/commonlitreadabilityprize\/train.csv'\ntrain_valid_df = pd.read_csv(TRAIN_PATH)","ecd9ddfb":"skf = ContinuousStratifiedKFold(n_splits=5, shuffle=True, random_state=0)\nfor fold, (train_index, valid_index) in enumerate(skf.split(train_valid_df, train_valid_df[TARGET_COL])):\n    train_df = train_valid_df.iloc[train_index].reset_index(drop=True)\n    valid_df = train_valid_df.iloc[valid_index].reset_index(drop=True)\n    \n    print(f'fold {fold}')\n    train_df[TARGET_COL].hist()\n    plt.title('train')\n    plt.show()\n    valid_df[TARGET_COL].hist()\n    plt.title('valid')\n    plt.show()\n    print()","448e9d96":"You can use this in the same way as the scikit-learn API.\n\nThis implementation is inspired from Abhishek Thakur's [Notebook](https:\/\/www.kaggle.com\/abhishek\/step-1-create-folds)."}}