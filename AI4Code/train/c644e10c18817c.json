{"cell_type":{"fe218e30":"code","3261a239":"code","d04a35b2":"code","972f6a2d":"code","aae4fe02":"code","6a3971e7":"code","5ecbd3f6":"code","e838ee0e":"code","98abc4a6":"code","cc999be5":"code","ed0dfbc3":"code","86aa6506":"markdown","ac76b695":"markdown","17d862cf":"markdown","8cdd35d1":"markdown","4ad2ad72":"markdown"},"source":{"fe218e30":"from tensorflow.keras.layers import Dense,Dropout,Input,ReLU\nfrom tensorflow.keras.models import Model,Sequential\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.datasets import mnist\nimport numpy as np\nimport matplotlib.pyplot as plt","3261a239":"(x_train,y_train),(x_test,y_test) = mnist.load_data()\nprint(x_train.shape,x_test.shape)","d04a35b2":"x_train = (x_train.astype(np.float32)-127.5)\/127.5\nx_train = x_train.reshape(x_train.shape[0],x_train.shape[1]*x_train.shape[2])\nprint(x_train.shape)","972f6a2d":"plt.imshow(x_test[11])\nplt.axis(\"off\")\nplt.show()\nplt.imshow(x_test[14])\nplt.axis(\"off\")\nplt.show()","aae4fe02":" def create_generator():\n        generator = Sequential()\n        generator.add(Dense(512,input_dim = 100))\n        generator.add(ReLU())\n        \n        generator.add(Dense(512))\n        generator.add(ReLU())\n        \n        generator.add(Dense(1024))\n        generator.add(ReLU())\n        \n        generator.add(Dense(784,activation = \"tanh\") )\n        \n        generator.compile(loss=\"binary_crossentropy\", optimizer=Adam(lr=0.0001,beta_1=0.5))\n        \n        return generator","6a3971e7":"g = create_generator()\ng.summary()","5ecbd3f6":"def create_discriminator():\n    discriminator = Sequential()\n    discriminator.add(Dense(1024,input_dim = 784))\n    discriminator.add(ReLU())\n    discriminator.add(Dropout(0.4))\n    \n    discriminator.add(Dense(512))\n    discriminator.add(ReLU())\n    discriminator.add(Dropout(0.4))\n    \n    discriminator.add(Dense(256))\n    discriminator.add(ReLU())\n    \n    discriminator.add(Dense(1, activation = \"sigmoid\"))\n    \n    discriminator.compile(loss = \"binary_crossentropy\",\n                          optimizer = Adam(lr = 0.0001,beta_1=0.5))\n    return discriminator","e838ee0e":"d= create_discriminator()\nd.summary()","98abc4a6":"def create_GANs(dis,gen):\n    dis.trainable = False\n    gan_input = Input(shape=(100,))\n    x = gen(gan_input)\n    gan_output = dis(x)\n    gan = Model(inputs = gan_input,outputs = gan_output)\n    gan.compile(loss = \"binary_crossentropy\", optimizer = \"adam\")\n    return gan\ngan = create_GANs(d,g)\ngan.summary()","cc999be5":"epochs = 50\nbatch_size = 256\n\nfor e in range(epochs):\n    for _ in range(batch_size):\n        noise = np.random.normal(0,1,[batch_size,100])\n        generated_images = g.predict(noise)\n        image_batch = x_train[np.random.randint(low=0,high=x_train.shape[0],size = batch_size)]\n        x = np.concatenate([image_batch,generated_images])\n        y_dis = np.zeros(batch_size*2)\n        y_dis[:batch_size] = 1\n\n        d.trainable = True\n        d.train_on_batch(x,y_dis)\n        \n        noise = np.random.normal(0,1,[batch_size,100])\n        \n        y_gen = np.ones(batch_size)\n        \n        d.trainable = False\n        \n        gan.train_on_batch(noise,y_gen)\n    print(\"Epoch: \",e)","ed0dfbc3":"noise = np.random.normal(loc=0,scale = 1,size = [100,100])\ngenerated_images = g.predict(noise)\ngenerated_images = generated_images.reshape(100,28,28)\nplt.imshow(generated_images[61],interpolation=\"nearest\")\nplt.axis(\"off\")\nplt.show()","86aa6506":"# Create GANs","ac76b695":"# GANs\n1. What is this GANs?\n\nGANs consist of 2 networks, Generator(G) and Discriminator(D)\n\n<img src= \"https:\/\/cdn-images-1.medium.com\/max\/900\/1*TKr1dtcNgJCA8uYY1OhmSg.png\" alt =\"Titanic\" style='width: 400px;'>\n\n2. Resources to improve yourself.\n\nhttps:\/\/arxiv.org\/pdf\/1708.05509.pdf\n\nhttps:\/\/arxiv.org\/pdf\/1609.04802.pdf\n\nhttps:\/\/github.com\/pathak22\/context-encoder\n\nhttps:\/\/arxiv.org\/pdf\/1704.04086.pdf\n\nhttps:\/\/github.com\/hanzhanggit\/StackGAN","17d862cf":"# Train","8cdd35d1":"# Create Discriminator","4ad2ad72":"# Create Generator"}}