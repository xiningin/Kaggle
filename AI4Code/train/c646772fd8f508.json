{"cell_type":{"65e60902":"code","176678c4":"code","850854ee":"code","f5c51952":"code","d91ec323":"code","ad600b47":"code","0adf5665":"code","24bf3afa":"code","49de795a":"code","d0ffd916":"code","84dc6350":"code","ace47962":"code","6abe8ba3":"code","a07481b8":"code","8fdc022e":"code","bd77a0c7":"code","e0d4919a":"code","f9554b10":"code","cf360ce2":"code","9a5f0585":"code","ace1cd40":"code","0664e5cb":"code","1e6d8815":"code","6c42e2a5":"code","518a5cef":"code","fdef23db":"code","c2a6375e":"code","96712be3":"code","76bf8779":"code","d3ad6c66":"code","9919cabd":"code","087377f8":"code","31336a34":"code","15f1f01d":"code","9cb4b2cd":"code","90f6b0e5":"code","5879297b":"code","2ce12213":"code","e6f04314":"code","3275416e":"code","89900064":"code","eb278c8a":"code","916043b8":"code","73e291d1":"code","9fbd529d":"code","eff3d9e6":"code","7ad7266b":"code","a5d90439":"code","afe84165":"code","da9f3b09":"code","73f6a0a5":"code","13bcc8ca":"code","1d84b83b":"code","166b9e8b":"code","c560035d":"code","2c61b402":"code","29d40e51":"code","5a0e4cb6":"code","5dca4b8c":"code","6d20b120":"code","69d7595f":"code","ff8afb27":"markdown","20d8f7f6":"markdown","50a2259a":"markdown","8807baf6":"markdown","617ff49e":"markdown","a62827ae":"markdown","a7424791":"markdown","b943dbdf":"markdown","cbf71a40":"markdown","d91acad9":"markdown","58d8ad00":"markdown"},"source":{"65e60902":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \nimport seaborn as sns # Provides a high level interface for drawing attractive and informative statistical graphics\n%matplotlib inline\nsns.set()\nfrom subprocess import check_output\n\nimport warnings                                            # Ignore warning related to pandas_profiling\nwarnings.filterwarnings('ignore') \n\n\ndef annot_plot(ax,w,h):                                    # function to add data to plot\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    for p in ax.patches:\n        ax.annotate('{0:.1f}'.format(p.get_height()), (p.get_x()+w, p.get_height()+h))\nimport os\nprint(os.listdir(\"..\/input\"))\n\ndata_path = \"..\/input\/\"\nmatches_data = pd.read_csv(data_path+\"matches.csv\")\nmatches_data.head(5)","176678c4":"deliveries = pd.read_csv('..\/input\/deliveries.csv')\nmatches = pd.read_csv('..\/input\/matches.csv')","850854ee":"matches_data.shape        # This will print the number of rows and comlumns of the Data Frame","f5c51952":"matches_data.columns                            # This will print the names of all columns.","d91ec323":"matches_data.info()                       # This will give Index, Datatype and Memory information","ad600b47":"matches_data.describe()","0adf5665":"matches_data.isnull().sum()","24bf3afa":"matches_data.drop('umpire3', axis=1, inplace=True)  \nmatches_data.columns.unique()\n","49de795a":"#Replacing Rising Pune Supergiant with Rising Pune Supergiants\nmatches_data.replace( 'Rising Pune Supergiant', 'Rising Pune Supergiants',inplace = True)\nmatches_data.head(2)","d0ffd916":"matches_data['city'].fillna( matches_data['venue'].apply(lambda x: x[:5]),inplace = True)\nmatches_data[matches_data['city']== 'Dubai']","84dc6350":"matches_data[matches_data['winner'].isnull()]","ace47962":"matches_data.replace( 'Bengaluru', 'Bangalore',inplace = True)\nmatches_data['city'].unique()","6abe8ba3":"matches_data.columns","a07481b8":"# display the seasons\nmatches_data['season'].unique()","8fdc022e":"# display the team names in IPL\nmatches_data['team1'].unique() ","bd77a0c7":"#No. of matches held each season\n\nfig = plt.figure()\nax = fig.add_subplot(111)\nax=matches_data.groupby(\"season\")[\"id\"].count().plot(kind=\"line\",title=\"Matches per season\", marker='d',color=['blue'],figsize=(10,3)) \nplt.ylabel(\"No. of Matches\")","e0d4919a":"max_times_winner = matches_data.groupby('season')['winner'].value_counts()\n\ncount=1\nfig = plt.figure()\n\ngroups=max_times_winner.groupby('season')\nfor year,group in groups:\n    ax = fig.add_subplot(4,3,count)\n    ax.set_title(year)\n    ax=group[year].plot(kind=\"bar\",figsize=(10,15),width=0.8)\n    count=count+1\n    plt.xlabel('')\n    plt.yticks([])\n    plt.ylabel('Matches Won')\n    \n    totals = []\n    for i in ax.patches:\n        totals.append(i.get_height())\n    total = sum(totals)\n    for i in ax.patches:\n    # get_x pulls left or right; get_height pushes up or down\n        ax.text(i.get_x()+0.2, i.get_height()-1.5,s= i.get_height(),color=\"white\",fontweight='bold')\n    \n    \nplt.tight_layout()\nplt.show()","f9554b10":"matches_played = matches_data['team1'].value_counts()+ matches_data['team2'].value_counts()\nmatches_played","cf360ce2":"matches_won = matches_data.groupby('winner').count()\nmatches_won[\"id\"]","9a5f0585":"matches_won = matches_data.groupby('winner').count()\nmatches_won\n\ntotal_matches = matches_data['team1'].value_counts()+ matches_data['team2'].value_counts()\ntotal_matches\n\nmatches_won['Total matches']=total_matches\nmatches_won[[\"Total matches\",\"result\"]].sort_values(by=[\"Total matches\"],ascending=False).plot.bar(stacked=True,figsize=(7,3))","ace1cd40":"match_succes_rate = (matches_won[\"id\"]\/total_matches)*100\n#print(match_succes_rate)\n\ndata = match_succes_rate.sort_values(ascending = False)\nplt.figure(figsize=(7,3))\nax = sns.barplot(x = data.index, y = data, palette=\"Set2\");\nplt.ylabel('Succes rate of each team')\nplt.xticks(rotation=80)\nannot_plot(ax,0.08,1)","0664e5cb":"season_winner = matches_data.groupby('season')['season','winner'].tail(1)\nseason_winner.sort_values(by=\"season\",ascending=True)","1e6d8815":"season_winner.groupby('winner').count().plot.bar(figsize=(5,3))","6c42e2a5":"maximum_runs = matches_data.sort_values('win_by_runs', ascending = False)[:5].head(5)\nmaximum_runs[['season','winner','win_by_runs']]","518a5cef":"min_runs = matches_data[matches_data['win_by_runs'] == 1]\nmin_runs['winner'].value_counts()\n","fdef23db":"plt.figure(figsize=(8,5))\n\nsns.swarmplot(y='win_by_runs',x='winner',data=matches_data)\nplt.tight_layout()\nplt.xticks(rotation=90)\nplt.title('Best Defending Teams')\nplt.show()","c2a6375e":"max_wickets=matches_data[matches_data['win_by_wickets']==10]\nmax_wickets['winner'].value_counts()","96712be3":"matches_data[['season','winner','win_by_wickets']][matches_data['win_by_wickets'] ==1]","76bf8779":"plt.figure(figsize=(8,5))\nsns.swarmplot(y='win_by_wickets',x='winner',data=matches_data)\nplt.xticks(rotation=80)\nplt.title('Best Chasing Team')\nplt.show()","d3ad6c66":"plt.figure(figsize=(5,3))\n\nax =matches_data['player_of_match'].value_counts()[:10].plot.bar()\nplt.title('Top 10 high performing Players')\nannot_plot(ax,0.08,1)","9919cabd":"toss_won = matches_data['toss_winner'].value_counts()\ntoss_win_rate = (toss_won\/matches_played)*100\ndata = toss_win_rate.sort_values(ascending = False)\nplt.figure(figsize=(5,3))\nax = sns.barplot(x = data.index, y = data, palette=\"Set2\");\nplt.ylabel('Toss win rate of each team')\nplt.xticks(rotation=90)\nannot_plot(ax,0.08,1)\nplt.title('Toss winning success rate of each team')","087377f8":"toss=matches_data['toss_decision'].value_counts()\nlabels=np.array(toss.index)\nsizes = toss.values\ncolors = ['gold', 'lightskyblue']\n\n# Plot\nplt.figure(figsize=(5,3))\nplt.pie(sizes, labels=labels, colors=colors,\n        autopct='%1.1f%%', shadow=True,startangle=90)\n\nplt.title('Toss Decision of all the matches')\nplt.axis('equal')\nplt.show()","31336a34":"plt.figure(figsize=(8,3))\nax =sns.countplot(x='season',hue='toss_decision',data=matches_data,palette=\"Set2\")\nplt.ylabel('Toss Decision frequency')\nplt.title('Toss Decision across seasons')\nannot_plot(ax,0.08,1)","15f1f01d":"tosswin_winner = matches_data['toss_decision'][matches_data['toss_winner'] == matches_data['winner']].value_counts()\nlabels=np.array(tosswin_winner.index)\nsizes = tosswin_winner.values\ncolors = ['gold', 'lightskyblue']\n\nplt.figure(figsize=(5,3))\nplt.pie(sizes, labels=labels, colors=colors,\n        autopct='%1.1f%%', shadow=True,startangle=90)\n\nplt.title('Toss decision of toss winner to win the game')\nplt.axis('equal')\nplt.show()","9cb4b2cd":"plt.figure(figsize=(5,3))\n\nax=matches_data['city'].value_counts()[:10].plot.bar()\nplt.title('Top 10 Cities to hold match')\nplt.xticks(rotation=70)\nannot_plot(ax,0.08,1)\n","90f6b0e5":"a=matches_data.groupby(['winner','city']).size().reset_index(name='win_counts')\na=a.sort_values(\"win_counts\",ascending=False)\na.groupby(\"winner\").head(1)","5879297b":"#top 10 venue to hold max number of matches\nplt.figure(figsize=(5,3))\nvenue=matches_data.groupby('venue')[\"id\"].count()\nax =venue.sort_values(ascending=False).head(10).plot.bar(figsize=(5,3))\nplt.title('Top 10 venue to hold matches')\nplt.xticks(rotation=90)\nannot_plot(ax,0.08,1)\n","2ce12213":"venue_suit_for =matches_data[matches_data['toss_winner'] == matches_data['winner']]\nsns.countplot(x='venue',hue='toss_decision',data=venue_suit_for)\nplt.xlabel('Venue ')\nplt.title('Venue is Best Suited for')\nplt.xticks(rotation=90)","e6f04314":"result=matches_data['result'].value_counts().tolist()\nnames='Normal - '+str(result[0]), 'Tie - '+str(result[1]), 'No result - '+str(result[2]), \n\nfig, ax = plt.subplots(figsize=(3.5,3.5))  \n# Create a pieplot\nexplode = (0, 0.01, 0.01)\nax1,text=ax.pie(result,labeldistance=2,explode=explode,radius=0.1, startangle=180,colors=['skyblue','green','red'])\n#plt.show()\nax.axis('equal')\nax.set_title(\"Match Results\") \n\n# add a circle at the center\nmy_circle=plt.Circle( (0,0), 0.07, color='white')\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.legend(ax1, names,  bbox_to_anchor=(.9,.8), loc=2)\nplt.tight_layout()\nplt.show()","3275416e":"import plotly.plotly as py\nfrom plotly import tools\nfrom plotly.offline import init_notebook_mode,iplot\ninit_notebook_mode(connected=False)\nimport plotly.figure_factory as ff\nimport plotly.graph_objs as go\n","89900064":"high_scores=deliveries.groupby(['match_id', 'inning','batting_team','bowling_team'])['total_runs'].sum().reset_index() \nhigh_scores=high_scores[high_scores['total_runs']>=200]\nhigh_scores.nlargest(10,'total_runs')","eb278c8a":"high_scores=high_scores[high_scores.batting_team != 'GL']\nhigh_scores=high_scores[high_scores.bowling_team != 'RPS']\nhigh_scores=high_scores[high_scores.bowling_team != 'GL']\nhigh_scores=high_scores[high_scores.bowling_team != 'PW']","916043b8":"high_scores=high_scores.groupby(['inning','batting_team']).count().reset_index()\nhigh_scores.drop([\"bowling_team\",\"total_runs\"],axis=1,inplace=True)\nhigh_scores.rename(columns={\"match_id\":\"total_times\"},inplace=True)\n\nhigh_scores_1 = high_scores[high_scores['inning']==1]\nhigh_scores_2 = high_scores[high_scores['inning']==2]","73e291d1":"high_scores_1.sort_values(by = 'total_times',ascending=False).head(2)","9fbd529d":"agg = matches[['id','season', 'winner', 'toss_winner', 'toss_decision', 'team1']].merge(deliveries, left_on = 'id', right_on = 'match_id', how = 'left').drop('id', axis = 1)\nbatsman_grp = agg.groupby([\"season\",\"match_id\", \"inning\", \"batting_team\", \"batsman\"])\nbatsmen = batsman_grp[\"batsman_runs\"].sum().reset_index()\nruns_scored = batsmen.groupby(['season','batting_team', 'batsman'])['batsman_runs'].agg(['sum','mean']).reset_index()\nruns_scored['mean']=round(runs_scored['mean'])","eff3d9e6":"agg_battingteam = agg.groupby(['season','match_id', 'inning', 'batting_team', 'bowling_team','winner'])['total_runs'].sum().reset_index()\nwinner = agg_battingteam[agg_battingteam['batting_team'] == agg_battingteam['winner']]#agg_batting = agg_battingteam.groupby(['season', 'inning', 'team1','winner'])['total_runs'].sum().reset_index()\nwinner_batting_first = winner[winner['inning'] == 1]\nwinner_batting_second = winner[winner['inning'] == 2]\n\nwinner_runs_batting_first = winner_batting_first.groupby(['season', 'winner'])['total_runs'].mean().reset_index().round()\nwinner_runs_batting_second = winner_batting_second.groupby(['season', 'winner'])['total_runs'].mean().reset_index().round()\n\nwinner_runs = winner_runs_batting_first.merge(winner_runs_batting_second, on = ['season','winner'])\nwinner_runs.columns = ['season', 'winner', 'batting_first', 'batting_second']","7ad7266b":"total_win=matches.groupby(['season','winner']).count()[['id']].reset_index()\nwinner_runs[\"wins\"]= total_win['id']\n","a5d90439":"winner_runs.sort_values(by = ['season'],inplace=True)\n\ncsk= winner_runs[winner_runs['winner'] == 'CSK']\nrr= winner_runs[winner_runs['winner'] == 'RR']\nsrh= winner_runs[winner_runs['winner'] == 'SRH']\nkkr= winner_runs[winner_runs['winner'] == 'KKR']\nmi= winner_runs[winner_runs['winner'] == 'MI']\nrcb= winner_runs[winner_runs['winner'] == 'RCB']\nkxip= winner_runs[winner_runs['winner'] == 'KXIP']\ndd= winner_runs[winner_runs['winner'] == 'DC']","afe84165":"trace1 = go.Scatter(x=csk['season'],y = csk['batting_first'],name='Batting First')\ntrace2 = go.Scatter(x=csk['season'],y = csk['batting_second'],name='Batting Second')\ntrace3 = go.Scatter(x=rr['season'],y = rr['batting_first'],name='Batting First')\ntrace4 = go.Scatter(x=rr['season'],y = rr['batting_second'],name='Batting Second')\ntrace5 = go.Scatter(x=srh['season'],y = srh['batting_first'],name='Batting First')\ntrace6 = go.Scatter(x=srh['season'],y = srh['batting_second'],name='Batting Second')\ntrace7 = go.Scatter(x=kkr['season'],y = kkr['batting_first'],name='Batting First')\ntrace8 = go.Scatter(x=kkr['season'],y = kkr['batting_second'],name='Batting Second')\ntrace9 = go.Scatter(x=rcb['season'],y = rcb['batting_first'],name='Batting First')\ntrace10 = go.Scatter(x=rcb['season'],y = rcb['batting_second'],name='Batting Second')\ntrace11 = go.Scatter(x=kxip['season'],y = kxip['batting_first'],name='Batting First')\ntrace12 = go.Scatter(x=kxip['season'],y = kxip['batting_second'],name='Batting Second')\ntrace13 = go.Scatter(x=mi['season'],y = mi['batting_first'],name='Batting First')\ntrace14 = go.Scatter(x=mi['season'],y = mi['batting_second'],name='Batting Second')\ntrace15 = go.Scatter(x=dd['season'],y = dd['batting_first'],name='Batting First')\ntrace16 = go.Scatter(x=dd['season'],y = dd['batting_second'],name='Batting Second')\n\nfig = tools.make_subplots(rows=4, cols=2, subplot_titles=('CSK', 'RR','SRH', 'KKR','RCB', 'KXIP','MI', 'DC'))\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 1)\nfig.append_trace(trace3, 1, 2)\nfig.append_trace(trace4, 1, 2)\nfig.append_trace(trace5, 2, 1)\nfig.append_trace(trace6, 2, 1)\nfig.append_trace(trace7, 2, 2)\nfig.append_trace(trace8, 2, 2)\nfig.append_trace(trace9, 3, 1)\nfig.append_trace(trace10, 3, 1)\nfig.append_trace(trace11, 3, 2)\nfig.append_trace(trace12, 3, 2)\nfig.append_trace(trace13, 4, 1)\nfig.append_trace(trace14, 4, 1)\nfig.append_trace(trace15, 4, 2)\nfig.append_trace(trace16, 4, 2)\n\nfig['layout'].update(title='Batting first vs Batting Second of Teams',showlegend=False)\niplot(fig)","da9f3b09":"df_strike_rate = deliveries.groupby(['batsman']).agg({'ball':'count','batsman_runs':'mean'}).sort_values(by='batsman_runs',ascending=False)\ndf_strike_rate.rename(columns ={'batsman_runs' : 'strike rate'}, inplace=True)\ndf_runs_per_match = deliveries.groupby(['batsman','match_id']).agg({'batsman_runs':'sum'})\ndf_total_runs = df_runs_per_match.groupby(['batsman']).agg({'sum' ,'mean','count'})\ndf_total_runs.rename(columns ={'sum' : 'batsman run','count' : 'match count','mean' :'average score'}, inplace=True)\ndf_total_runs.columns = df_total_runs.columns.droplevel()\ndf_sixes = deliveries[['batsman','batsman_runs']][deliveries.batsman_runs==6].groupby(['batsman']).agg({'batsman_runs':'count'})\ndf_four = deliveries[['batsman','batsman_runs']][deliveries.batsman_runs==4].groupby(['batsman']).agg({'batsman_runs':'count'})\ndf_batsman_stat = pd.merge(pd.merge(pd.merge(df_strike_rate,df_total_runs, left_index=True, right_index=True),\n                                    df_sixes, left_index=True, right_index=True),df_four, left_index=True, right_index=True)","73f6a0a5":"df_batsman_stat.rename(columns = {'ball' : 'ball', 'strike rate':'strike_rate','batsman run' : 'batsman_run',\n                                  'match count' : 'match_count','average score' : 'average_score' ,'batsman_runs_x' :'six',\n                                  'batsman_runs_y':'four'},inplace=True)\ndf_batsman_stat['strike_rate'] = df_batsman_stat['strike_rate']*100\ndf_batsman_stat.sort_values(by='batsman_run',ascending=False,inplace=True)\n#df_batsman_stat.sort_values(by='batsman_run',ascending=False)\ndf_batsman_stat.reset_index(inplace=True)\n","13bcc8ca":"average_score=df_batsman_stat.sort_values(by='average_score',ascending=False)\naverage_score=average_score[average_score['match_count']>50].head(10)\n\nstrike_rate=df_batsman_stat.sort_values(by='strike_rate',ascending=False)\nstrike_rate=strike_rate[strike_rate['match_count']>50].head(10)","1d84b83b":"trace1 = go.Bar(x=average_score['batsman'],y=average_score['average_score'],\n                name='Average Score',marker=dict(color='gold'),opacity=0.6,showlegend=False)\n\ntrace2 = go.Bar(x=strike_rate['batsman'],y=strike_rate['strike_rate'],\n                name='Strike Rate',marker=dict(color='brown'),opacity=0.6,showlegend=False)\n\nfig = tools.make_subplots(rows=1, cols=2, subplot_titles=('Highest Average Score','Highest Strike Rate'))\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\n\nfig['layout']['xaxis1'].update(title='Player')\nfig['layout']['xaxis2'].update(title='Player')\n\niplot(fig)","166b9e8b":"bowlers=deliveries.groupby('bowler').sum().reset_index()\nbowl=deliveries['bowler'].value_counts().reset_index()\nbowlers=bowlers.merge(bowl,left_on='bowler',right_on='index',how='left')\nbowlers=bowlers[['bowler_x','total_runs','bowler_y']]\nbowlers.rename({'bowler_x':'bowler','total_runs':'runs_given','bowler_y':'balls'},axis=1,inplace=True)\nbowlers['overs']=(bowlers['balls']\/\/6)","c560035d":"dismissal_kinds = [\"bowled\", \"caught\", \"lbw\", \"stumped\", \"caught and bowled\", \"hit wicket\"]  \nct=deliveries[deliveries[\"dismissal_kind\"].isin(dismissal_kinds)]\nct=ct['bowler'].value_counts().reset_index()\nbowlers=bowlers.merge(ct,left_on='bowler',right_on='index',how='left').dropna()\nbowlers=bowlers[['bowler_x','runs_given','overs','bowler_y']]\nbowlers.rename({'bowler_x':'bowler','bowler_y':'wickets'},axis=1,inplace=True)\nbowlers['economy']=(bowlers['runs_given']\/bowlers['overs'])","2c61b402":"bowlers_top=bowlers.sort_values(by='runs_given',ascending=False)\nbowlers_top=bowlers_top.head(20)\n","29d40e51":"trace = go.Scatter(y = bowlers_top['wickets'],x = bowlers_top['bowler'],mode='markers',\n                   marker=dict(size= bowlers_top['wickets'].values,\n                               color = bowlers_top['economy'].values,\n                               colorscale='Viridis',\n                               showscale=True,\n                               colorbar = dict(title = 'Economy')),\n                   text = bowlers['overs'].values)\n\ndata = [(trace)]\n\nlayout= go.Layout(autosize= True,\n                  title= 'Top 20 Wicket Taking Bowlers',\n                  hovermode= 'closest',\n                  xaxis=dict(showgrid=False,zeroline=False,\n                             showline=False),\n                  yaxis=dict(title= 'Wickets Taken',ticklen= 5,\n                             gridwidth= 2,showgrid=False,\n                             zeroline=False,showline=False),\n                  showlegend= False)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","5a0e4cb6":"orange=matches[['id','season']]\norange=orange.merge(deliveries,left_on='id',right_on='match_id',how='left')\norange=orange.groupby(['season','batsman'])['batsman_runs'].sum().reset_index()\norange=orange.sort_values('batsman_runs',ascending=0)\norange=orange.drop_duplicates(subset=[\"season\"],keep=\"first\")\n#orange.sort_values(by='season')\n\n","5dca4b8c":"data = [go.Bar(x=orange['season'].values,y=orange['batsman_runs'].values,\n                name='Total Matches',text=orange['batsman'].values,\n                marker=dict(color='rgb(255,140,0)',\n                            line=dict(color='rgb(8,48,107)',width=1.5,)),opacity=0.7)]\n\nlayout = go.Layout(title='Orange-Cap Holders',xaxis = dict(tickmode='linear',title=\"Year\"),\n                   yaxis=dict(title='Runs'))\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","6d20b120":"dismissal_kinds = [\"bowled\", \"caught\", \"lbw\", \"stumped\", \"caught and bowled\", \"hit wicket\"]  #since run-out is not creditted to the bowler\npurple=deliveries[deliveries[\"dismissal_kind\"].isin(dismissal_kinds)]\npurple=purple.merge(matches,left_on='match_id',right_on='id',how='outer')\npurple=purple.groupby(['season','bowler'])['dismissal_kind'].count().reset_index()\npurple=purple.sort_values('dismissal_kind',ascending=False)\npurple=purple.drop_duplicates('season',keep='first').sort_values(by='season')\npurple.rename({'dismissal_kind':'count_wickets'},axis=1,inplace=True)","69d7595f":"trace1 = go.Bar(x=purple['season'].values,y=purple['count_wickets'].values,\n                name='Total Matches',text=purple['bowler'].values,\n                marker=dict(color='rgb(75,0,130)',\n                            line=dict(color='rgb(108,148,107)',width=1.5,)),\n                opacity=0.7)\n\nlayout = go.Layout(title='Purple-Cap Holders',xaxis = dict(tickmode='linear',title=\"Year\"),\n                   yaxis=dict(title='Wickets'))\n\ndata=[trace1]\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","ff8afb27":"inference:\n    csk amd mi has won maximum number of matches!","20d8f7f6":"the above plot shows the total number of matches played by the teams and their winnings! ","50a2259a":"The mean,standard deviation and other mathematical terms are calculated!","8807baf6":"*The basic pandas libraries are imported above*","617ff49e":"the winners of each season!","a62827ae":"the succes rate of each is analysed","a7424791":"This dataset of matches.csv contains 756 rows and 18 columns","b943dbdf":"inference:\n   more number of matches are played in 2013 season!","cbf71a40":"The code is used to identify the any missing or null values.","d91acad9":"inference:\n       csk,mi has the majority winning","58d8ad00":"**The data-preprocessing is done below!**"}}