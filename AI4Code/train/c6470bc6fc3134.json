{"cell_type":{"375c36b1":"code","07312d0a":"code","78e3a445":"code","356a4bef":"code","538f3fc0":"code","56feda87":"code","ce8bb32a":"code","13ff2322":"code","93cce345":"code","757c291e":"code","516c1521":"code","c0fbd405":"code","356de91c":"code","59b957aa":"code","8ecd20dc":"code","bfb17bd7":"code","d3ab0900":"code","cf1b16e3":"code","236d543d":"code","dd9b3717":"code","0fd9e41a":"code","3c71de32":"code","559c6605":"code","69a4396a":"code","c634334b":"code","08578875":"code","c244744c":"code","ead49e5f":"code","4f9695a8":"code","5d837417":"code","b4f518b6":"code","dd7aac11":"code","9e23d906":"code","5243b8aa":"code","ab96e478":"code","f8857b9d":"code","423501dc":"code","da34c3b8":"code","6cef2d48":"code","66e6a846":"code","f420e9b9":"code","16a1541d":"code","872d25f5":"code","054dc117":"code","df479f47":"code","a57a6588":"code","6234d3bd":"code","68c70713":"code","41a3f0b7":"code","f40e3f5d":"code","807d02eb":"code","cc2b612e":"code","54eddd13":"code","3a6a8414":"code","3e94e4ac":"code","55470aab":"code","08b0d12d":"code","557fa287":"code","2e220ed0":"code","b2793c91":"code","267f9a19":"code","75c01d45":"code","9072ae76":"code","cc2167e8":"code","86afb554":"code","4fd0a0b0":"code","3d3adb25":"code","235a61ae":"code","d346c6cb":"code","dd4e58bc":"code","f9a22004":"code","156787dc":"code","cd8dc0c1":"code","0d0157bf":"code","5403f10e":"code","3a0d3bf7":"code","b2d980e4":"code","c56a668e":"code","79e66517":"code","5b7f69b8":"code","5152039b":"code","b1791f2b":"code","550d7676":"code","1f11fccb":"code","7af7bef3":"code","b9f541c9":"code","9416b70b":"code","f3f20c6a":"code","1d9d05f4":"code","28e0139e":"code","bc778b74":"code","fd5cf1bb":"code","ce8c0240":"code","060d568e":"code","aa4cfd38":"code","6c3c9a36":"code","eb3866fc":"code","1ec91826":"markdown","1e52faaa":"markdown","d6d01d15":"markdown","46c46f93":"markdown","bc8a25f0":"markdown","dad6698b":"markdown","8ce7d291":"markdown","769dca49":"markdown","59c5ceaa":"markdown","c5069ec6":"markdown","2c8047f2":"markdown","566043c0":"markdown","f2586b7f":"markdown","0d0ba347":"markdown","790cc3c4":"markdown","e14151cd":"markdown","ec00121c":"markdown"},"source":{"375c36b1":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt, seaborn as sns","07312d0a":"am0=pd.read_csv(\"\/kaggle\/input\/AutoData.csv\")","78e3a445":"am0.head()","356a4bef":"am0.describe()","538f3fc0":"am0.describe(include=['object'])","56feda87":"am0.info()","ce8bb32a":"am0.isnull().sum()","13ff2322":"am0.describe(include=['object'])","93cce345":"am0.price.plot.box()\nplt.show()","757c291e":"am0.make.value_counts(normalize=True)","516c1521":"am0.fueltype.value_counts(normalize=True)","c0fbd405":"am0.carbody.value_counts(normalize=True)","356de91c":"am0.aspiration.value_counts(normalize=True)","59b957aa":"am0.doornumber.value_counts(normalize=True)","8ecd20dc":"am0.drivewheel.value_counts(normalize=True)","bfb17bd7":"am0.enginelocation.value_counts(normalize=True)","d3ab0900":"am0.cylindernumber.value_counts(normalize=True)","cf1b16e3":"am0.fuelsystem.value_counts(normalize=True)","236d543d":"am0.groupby([\"fueltype\"])['price'].mean()","dd9b3717":"am0.groupby([\"carbody\"])['price'].mean()","0fd9e41a":"am0.groupby([\"aspiration\"])['price'].mean()","3c71de32":"am0.groupby([\"doornumber\"])['price'].mean()","559c6605":"am0.groupby([\"drivewheel\"])['price'].mean()","69a4396a":"am0.groupby([\"enginelocation\"])['price'].mean()","c634334b":"am0.groupby([\"cylindernumber\"])['price'].mean()","08578875":"am0.groupby([\"fuelsystem\"])['price'].mean()","c244744c":"sns.pairplot(am0, x_vars=['curbweight','enginesize','boreratio','stroke','compressionratio'],y_vars='price', markers=\"+\", diag_kind=\"kde\")\nplt.show()","ead49e5f":"sns.pairplot(am0, x_vars=['symboling','wheelbase','carlength','carwidth','carheight'],y_vars='price', markers=\"+\", diag_kind=\"kde\")\nplt.show()","4f9695a8":"sns.pairplot(am0, x_vars=['horsepower','peakrpm','citympg','highwaympg'],y_vars='price', markers=\"+\", diag_kind=\"kde\")\nplt.show()","5d837417":"am1 = am0.copy()","b4f518b6":"from sklearn.preprocessing import LabelEncoder","dd7aac11":"# LabelEncoder\nle = LabelEncoder()\n\n# apply \"le.fit_transform\"\nam1['symboling']=le.fit_transform(am0['symboling'])\nam1['symboling'].unique()","9e23d906":"am1['make']=le.fit_transform(am0['make'])\nam1['make'].unique()","5243b8aa":"am1['fueltype']=le.fit_transform(am0['fueltype'])\nam1['fueltype'].unique()","ab96e478":"am1['aspiration']=le.fit_transform(am0['aspiration'])\nam1['aspiration'].unique()","f8857b9d":"am1['doornumber']=le.fit_transform(am0['doornumber'])\nam1['doornumber'].unique()","423501dc":"am1['carbody']=le.fit_transform(am0['carbody'])\nam1['carbody'].unique()","da34c3b8":"am1['drivewheel']=le.fit_transform(am0['drivewheel'])\nam1['drivewheel'].unique()","6cef2d48":"am1['enginelocation']=le.fit_transform(am0['enginelocation'])\nam1['enginelocation'].unique()","66e6a846":"am1['enginetype']=le.fit_transform(am0['enginetype'])\nam1['enginetype'].unique()","f420e9b9":"am1['cylindernumber']=le.fit_transform(am0['cylindernumber'])\nam1['cylindernumber'].unique()","16a1541d":"am1['fuelsystem']=le.fit_transform(am0['fuelsystem'])\nam1['fuelsystem'].unique()","872d25f5":"am1.head()","054dc117":"res= am1.corr()\nres","df479f47":"plt.figure(figsize=[18,18])\nsns.heatmap(res, cmap=\"Reds\", annot=True)\nplt.show()","a57a6588":"cor = am0.corr()\ncor","6234d3bd":"sns.jointplot('horsepower', 'price', data = am0, kind=\"reg\")\nplt.show()","68c70713":"sns.jointplot('enginesize', 'price', data = am0, kind=\"reg\")\nplt.show()","41a3f0b7":"sns.jointplot('curbweight', 'price', data = am0, kind=\"reg\")\nplt.show()","f40e3f5d":"X = am1[['enginesize']]\ny = am1['price']","807d02eb":"from sklearn.model_selection import train_test_split","cc2b612e":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.7, random_state = 42)","54eddd13":"X_train.shape, X_test.shape","3a6a8414":"from sklearn.linear_model import LinearRegression","3e94e4ac":"#Instantiating the linear regression model\nmod = LinearRegression()","55470aab":"mod.fit(X_train, y_train)","08b0d12d":"mod.intercept_, mod.coef_","557fa287":"from sklearn.metrics import r2_score","2e220ed0":"y_train_pred = mod.predict(X_train)","b2793c91":"r2_score(y_train, y_train_pred)","267f9a19":"X = am1.drop(\"price\", axis=1)\nX.head()","75c01d45":"y = am1[['price']]\ny.head()","9072ae76":"df_train, df_test = train_test_split(am1, train_size = 0.7, random_state = 42)","cc2167e8":"df_train.shape, df_test.shape","86afb554":"y_train = df_train[['price']]\nX_train = df_train\ny_test = df_test[['price']]\nX_test = df_test","4fd0a0b0":"from sklearn.linear_model import LinearRegression","3d3adb25":"mod1= LinearRegression()","235a61ae":"mod1.fit(X_train, y_train)","d346c6cb":"X_train.columns","dd4e58bc":"from sklearn.metrics import r2_score","f9a22004":"y_train_pred = mod1.predict(X_train)","156787dc":"r2_score(y_train, y_train_pred)","cd8dc0c1":"from sklearn.feature_selection import RFE","0d0157bf":"mod2 = LinearRegression()","5403f10e":"rfe_selector = RFE(mod2, 10)","3a0d3bf7":"rfe_selector.fit(X_train, y_train)","b2d980e4":"rfe_selector.support_","c56a668e":"rfe_selector.ranking_","79e66517":"cols_keep = X_train.columns[rfe_selector.support_]","5b7f69b8":"cols_keep","5152039b":"lr2 = LinearRegression()","b1791f2b":"lr2.fit(X_train[cols_keep],y_train)","550d7676":"y_train_pred = lr2.predict(X_train[cols_keep])","1f11fccb":"r2_score(y_train, y_train_pred)","7af7bef3":"import statsmodels.api as sm","b9f541c9":"X_train.head()","9416b70b":"X_train_sm = sm.add_constant(X_train[cols_keep])\nX_train_sm.head()","f3f20c6a":"lr = sm.OLS(y_train, X_train_sm).fit()","1d9d05f4":"lr.summary()","28e0139e":"from statsmodels.stats.outliers_influence import variance_inflation_factor","bc778b74":"# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","fd5cf1bb":"X_train1_sm = sm.add_constant(X_train)\nX_train1_sm.head()","ce8c0240":"lr1 = sm.OLS(y_train, X_train_sm).fit()","060d568e":"lr1.summary()","aa4cfd38":"y_train = df_train[['price']]\nX_train = df_train[['enginesize','curbweight','horsepower']]\ny_test = df_test[['price']]\nX_test = df_test[['enginesize','curbweight','horsepower']]","6c3c9a36":"#Instantiating the linear regression model\nmod3 = LinearRegression()\nmod3.fit(X_train, y_train)","eb3866fc":"y_train_pred = mod3.predict(X_train)\nr2_score(y_train, y_train_pred)","1ec91826":"Add intercept manually for statsmodel to work","1e52faaa":"From Heat map, pair plot and joint plot, we can conclude that curbweight, enginesize and horsepower are most correlated with price. So let's go ahead and perform simple linear regression using enginesize as our feature variable. Since its seems most correlated with price.","d6d01d15":"Training Model","46c46f93":"#### Performing Simple Linear Regression","bc8a25f0":"#### Recursive feature elimination","dad6698b":"#### Encoding Categorical Variables","8ce7d291":"From the parameters that we get, our linear regression equation becomes:\n\nprice=-7646.435+165.768\u00d7enginesize","769dca49":"#### As clearly visisble from VIF and P value,since RFE doesn't give Business sense, we drop that model and go manually using statsmodel. ","59c5ceaa":"#### Multivariate Analysis","c5069ec6":"#### Univariate Analysis","2c8047f2":"Regression model using SciKit Learn","566043c0":"#### Multiple linear regression model","f2586b7f":"Thus, we can consider 3 variable curbweight,enginesize,horsepower","0d0ba347":"#### Fitting on the train set","790cc3c4":"#### Train-Test split","e14151cd":"#### use statsmodel","ec00121c":"#### Correlation and Heatmap"}}