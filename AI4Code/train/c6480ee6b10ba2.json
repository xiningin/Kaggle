{"cell_type":{"59aa4695":"code","cbcf7948":"code","ad20afc8":"code","bbf8311d":"code","0dfae500":"code","63aec503":"code","3c4d4dad":"code","fe5a1cde":"code","4f357cd4":"code","dac67c38":"code","88debfde":"code","6a6cf113":"code","a09b0427":"code","eaea7aff":"code","dfbc0ef1":"code","feb5e61b":"code","b9e2d642":"code","3470afe4":"code","9a4effd2":"code","9b76c4a0":"code","80c8930d":"code","1852ea19":"code","e87c301f":"code","f67fd2fc":"code","789fe4e5":"code","8c7961fd":"code","e8796bf6":"code","17f1eb69":"code","73a1bfed":"code","62d9e607":"code","c532afb4":"code","2450eeb0":"code","6f36e998":"code","8de3137d":"code","09a359b7":"code","4d273dde":"code","c6ce91be":"code","f001054d":"code","00ffac75":"code","cbc39e38":"code","ecbca16b":"code","8fdfc1b7":"code","bfed0dc1":"code","09c643fa":"code","6a9f5caa":"code","bccabcfc":"code","aab1989b":"code","130f797f":"code","18921728":"markdown","3a54ca06":"markdown","53caaaa1":"markdown","fd27af75":"markdown","27e3aac3":"markdown","2fca535a":"markdown","42baaa78":"markdown","a7dc9c16":"markdown","4cc106a0":"markdown","1fa64dc6":"markdown","88ebfc91":"markdown","94eefe30":"markdown","c92a7de4":"markdown","54e40bf0":"markdown","5078ace7":"markdown","e953a9c9":"markdown","ccb356f5":"markdown","e8a42fd4":"markdown","c1f0ac11":"markdown","590084b2":"markdown","75a89401":"markdown"},"source":{"59aa4695":"import numpy as np\nimport pandas as pd\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom scipy import stats\nimport itertools\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nRANDOM_STATE = 1518","cbcf7948":"def str_to_date(date):\n    return datetime.strptime(date, '%Y-%m-%d').date()","ad20afc8":"# save preds from the model to csv\ndef make_submission(model, name):\n    pred = model.predict(df_test_store.drop(['Id'],1))\n\n    submission = pd.DataFrame({'Id': df_test_store['Id'], \n                               'Sales': np.exp(pred)})\n    submission.to_csv(\"{}.csv\".format(name), index=False)","bbf8311d":"df_train = pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/train.csv',\n                       sep=',',\n                       parse_dates=['Date'],\n                       date_parser=str_to_date,\n                       low_memory=False\n)","0dfae500":"df_store = pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/store.csv',\n                       low_memory=False\n)","63aec503":"# Drop closed stores and stores with zero sales\ndf_train = df_train.drop(df_train[(df_train.Open == 0) & (df_train.Sales == 0)].index)\ndf_train = df_train.drop(df_train[(df_train.Open == 1) & (df_train.Sales == 0)].index)\ndf_train = df_train.reset_index(drop=True)","3c4d4dad":"df_train['Day'] = df_train['Date'].dt.day\ndf_train['Month'] = df_train['Date'].dt.month\ndf_train['Year'] = df_train['Date'].dt.year\n\ndel df_train['Date']","fe5a1cde":"df_store['CompetitionDistance'].fillna(df_store['CompetitionDistance'].median(), inplace=True)\ndf_store['CompetitionOpenSinceMonth'].fillna(0, inplace=True)\ndf_store['CompetitionOpenSinceYear'].fillna(0, inplace=True)\ndf_store['Promo2SinceWeek'].fillna(0, inplace=True)\ndf_store['Promo2SinceYear'].fillna(0, inplace=True)\ndf_store['PromoInterval'].fillna(0, inplace=True)","4f357cd4":"df = pd.merge(df_train, df_store, how='left', on='Store')\n\ndf.head()","dac67c38":"df['StateHoliday'] = df['StateHoliday'].astype('category')\ndf['Assortment'] = df['Assortment'].astype('category')\ndf['StoreType'] = df['StoreType'].astype('category')\ndf['PromoInterval'] = df['PromoInterval'].astype('category')","88debfde":"df['CompetitionOpenSince'] = np.where((df['CompetitionOpenSinceMonth'] == 0) & (df['CompetitionOpenSinceYear'] == 0),\n                                      0,\n                                      (df['Month'] - df['CompetitionOpenSinceMonth']) + (12 * df['Year'] - df['CompetitionOpenSinceYear']))\n\ndel df['CompetitionOpenSinceYear']\ndel df['CompetitionOpenSinceMonth']","6a6cf113":"df['is_holiday_state'] = df['StateHoliday'].map({'0': 0,\n                                                 'a': 1,\n                                                 'b': 1,\n                                                 'c': 1\n                                                }\n)\n\ndel df['StateHoliday']","a09b0427":"df = pd.get_dummies(df, columns=['Assortment', 'StoreType', 'PromoInterval'],\n                    prefix=['is_Assortment', 'is_StoreType', 'is_PromoInterval']\n)","eaea7aff":"df.columns = [\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in df.columns]","dfbc0ef1":"df_test = pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/test.csv',\n                       sep=',',\n                       parse_dates=['Date'],\n                       date_parser=str_to_date,\n                       low_memory=False\n)","feb5e61b":"df_test = df_test.rename(columns = lambda x:re.sub('[^A-Za-z0-9_]+', '', x))","b9e2d642":"df_test['Open'].fillna(1, inplace = True)","3470afe4":"df_test['Day'] = df_test['Date'].dt.day\ndf_test['Month'] = df_test['Date'].dt.month\ndf_test['Year'] = df_test['Date'].dt.year\n\ndel df_test['Date']","9a4effd2":"df_test_store = pd.merge(df_test, df_store, how='left', on='Store')","9b76c4a0":"df_test_store['StateHoliday'] = df_test_store['StateHoliday'].astype('category')\ndf_test_store['Assortment'] = df_test_store['Assortment'].astype('category')\ndf_test_store['StoreType'] = df_test_store['StoreType'].astype('category')\ndf_test_store['PromoInterval'] = df_test_store['PromoInterval'].astype('category')","80c8930d":"df_test_store['CompetitionOpenSince'] = np.where((df_test_store['CompetitionOpenSinceMonth'] == 0) & (df_test_store['CompetitionOpenSinceYear'] == 0),\n                                      0,\n                                      (df_test_store['Month'] - df_test_store['CompetitionOpenSinceMonth']) + (12 * df_test_store['Year'] - df_test_store['CompetitionOpenSinceYear']))\n\ndel df_test_store['CompetitionOpenSinceYear']\ndel df_test_store['CompetitionOpenSinceMonth']","1852ea19":"df_test_store['is_holiday_state'] = df_test_store['StateHoliday'].map({'0': 0,\n                                                                       'a': 1,\n                                                                       'b': 1,\n                                                                       'c': 1\n                                                                       }\n)\n\ndel df_test_store['StateHoliday']","e87c301f":"df_test_store = pd.get_dummies(df_test_store, columns=['Assortment', 'StoreType', 'PromoInterval'],\n                               prefix=['is_Assortment', 'is_StoreType', 'is_PromoInterval']\n)","f67fd2fc":"df_test_store['is_holiday_state'] = df_test_store['is_holiday_state'].astype('int64')","789fe4e5":"df_test_store.columns = [\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in df_test_store.columns]","8c7961fd":"features = df.drop(['Customers', 'Sales'], axis=1)\ntargets = np.log(df.Sales)","e8796bf6":"from sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split(features, targets, test_size=.2, random_state=RANDOM_STATE)","17f1eb69":"def rmspe(true, pred):\n    rmspe = np.sqrt(np.mean((true - pred)**2))\n    return rmspe","73a1bfed":"from sklearn.linear_model import LinearRegression\n\nlin_reg = LinearRegression()\n\nlin_reg.fit(X_train, y_train)","62d9e607":"y_pred = lin_reg.predict(X_val)","c532afb4":"rmspe(y_val, y_pred)","2450eeb0":"make_submission(lin_reg, 'linreg')","6f36e998":"from sklearn.ensemble import RandomForestRegressor\n\nrfr = RandomForestRegressor()\n\nrfr.fit(X_train, y_train)","8de3137d":"y_pred = rfr.predict(X_val)","09a359b7":"rmspe(y_val, y_pred)","4d273dde":"make_submission(rfr, 'rand_forest')","c6ce91be":"import lightgbm as lgbm\n\nlgbm = lgbm.LGBMRegressor()\n\nlgbm.fit(X_train, y_train)","f001054d":"y_pred = lgbm.predict(X_val)","00ffac75":"rmspe(y_val, y_pred)","cbc39e38":"make_submission(lgbm, 'lgbm')","ecbca16b":"import xgboost as xgb\n\nxg_reg = xgb.XGBRegressor(objective ='reg:linear')\n\nxg_reg.fit(X_train, y_train)","8fdfc1b7":"y_pred = xg_reg.predict(X_val)","bfed0dc1":"rmspe(y_val, y_pred)","09c643fa":"make_submission(xg_reg, 'xgboost')","6a9f5caa":"from catboost import CatBoostRegressor\n\ncbr = CatBoostRegressor()\n\ncbr.fit(X_train, y_train)","bccabcfc":"y_pred = cbr.predict(X_val)","aab1989b":"rmspe(y_val, y_pred)","130f797f":"make_submission(cbr, 'catboost')","18921728":"And don't forget about metric","3a54ca06":"CompetitionOpenSinceYear and CompetitionOpneSinceMonth have the same underlying meaning, that\u2019s why they were merged into one variable CompetiotionOpenSince;","53caaaa1":"The feature Date was decomposed into Year, Month, Day and deleted from dataset;","fd27af75":"And finally, all these steps were done for test.csv.","27e3aac3":"### Random Forest","2fca535a":"Split on train and target;","42baaa78":"### Linear Regression","a7dc9c16":"## Models","4cc106a0":"### Catboost","1fa64dc6":"### LightGBM","88ebfc91":"Change features type from objcet to category;","94eefe30":"### XGBoost","c92a7de4":"Began with dropping closed stores and stores with zero sales;","54e40bf0":"# Modeling and forecasting consumer activity in retail\n\nGroup: J41322c - Stebenkov Andrey (email: a.stebenkov75@yandex.ru, tg: @FGksjp67)\n\nThis notebook is a baseline solution for the Kaggle competition \"Rossmann Store Sale\".\n\n<a id=\"top\"><\/a>\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='background:#FF206E; border:0' role=\"tab\" aria-controls=\"home\"><center>Table of contents<\/center><\/h3>\n\n\n* **Data preparation**\n\n* **Models:**\n\n    * Linear Regression\n    * Random Forest\n    * LigtgGBM\n    * Xgboost\n    * Catboost\n","5078ace7":"The feature StateHoliday changed into a boolean variable. The value {a, b, c} became 1, other 0;","e953a9c9":"The features Assortment, StoreType, PromoInterval were coding with the get_dummies function;","ccb356f5":"And finally make train and validation part (80%\/20%)","e8a42fd4":"Next filling missing in store.csv. CompetitionDistance was filling the median value. Other features were filling with 0;","c1f0ac11":"## Data preparation","590084b2":"The provided data is in three files: train.csv, store.csv, test.csv. \n\nStart with the train and store.","75a89401":"Was merged information about store and training data into one dataframe;"}}