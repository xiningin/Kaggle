{"cell_type":{"a28193e8":"code","839d62bb":"code","d7206283":"code","7530c54d":"code","580b307a":"code","e26402e9":"code","e3997ea1":"code","528e0e43":"code","ff17415a":"code","90495292":"code","085cae8d":"code","f4cb0189":"code","c7aa9b04":"code","9bce9933":"markdown","d3ce6d02":"markdown","77cb4670":"markdown","33f9d76a":"markdown","9e9fba30":"markdown"},"source":{"a28193e8":"strnstr2=\"1235746125437612354762135476231547623514762354176235471623547126534721653472615347265134726531472653417265341275634217563427156342751634275613427563142756312756431257346125736412576341267354127635412765342176534271653427615342765134276531427653124763512364751234765213476523147652341765234716523476152347612546371254367215436725143672541367254316725436172543612754362175436271543627514362754136275431627543127465312675432167543261754326715432675143267541326754123765412365741236547126357412753462175346271534627513462753146275341627534127654312567432156743251674325617432567143256741325674123567421356742315674235167423561742356714235671264537216453726145372641537264513726453172645312745362174536271453627415362745136274531627453126573412657431267345216734526173452671345267314526734152673412576432157643251764325716432576143257641325764127365412374561273465127634521763452716345276134527631452763415276341265473124563712346571234567213456723145672341567234516723456172345612743562174356271435627413562743156274351627435126475312467351243567124357612354671253467215346725134672531467253416725346172534612734562173456271345627314562734156273451627345126375412367451263475123645712356471253476215347625134762531476253417625347162534712537461253764123576421357642315764235176423571642357614235761243756124753612745631246573124675321467532416753246175324671532467513246751263745126345721634572613457263145726341572634517263451274365123746521374652317465237146523741652374615237461245673214567324156732451673245617324567132456712647351264573124653712546731254736125476312457361275463124765321476532417653247165324761532476513247651234756123457621345762314576234157623451762345716234571256347125643712567341273564123675421367542316754236175423671542367514236751243657124367512346752134675231467523416752346175234671523467126354712654372165437261543726514372654137265431726543127364521736452713645273164527361452736415273641275364123756421375642317564237156423751642375614237561237645123754612735462173546271354627315462735146273541627354126743512674531276453126753412653742165374261537426513742653174265371426537125647312536741253647125637421563742516374256137425631742563714256371264357126437512746352174635271463527416352746135274631527463124576321457632415763245176324571632457613245761257436125746312475632147563241756324715632475163247561324756124376512453671245376124635712463751247356124736512764352176435271643527614352764135276431527643\"\nstrnWILDCARD_POS = 0\nMIN_COSTLY_DISTANCE = 4\nMAX_ELEMENTS_BRUTE_FORCE = 15  # Elements to take into account for wildcards (taken in pair) in every string. Number of different wildcards is: MAX_ELEMENTS_C_2","839d62bb":"TIME_LIMIT = 30 # Total runtime of the notebook is TIME_LIMIT * 3 seconds","d7206283":"import itertools\nimport numpy as np\nimport pandas as pd\nimport random\n!wget http:\/\/webhotel4.ruc.dk\/~keld\/research\/LKH-3\/LKH-3.0.7.tgz\n!tar xvfz LKH-3.0.7.tgz\n!cd LKH-3.0.7 ; make clean; make ; cp LKH ..","7530c54d":"def perm_dist_no_wildcards(p, q, wildcard=False):\n    \"\"\"\n    Computes overlapping distance between two lists of integer\n    between 1 and 7. 8 is wildcard\n    \"\"\"\n    p = list(p)\n    q = list(q)\n        \n    if p==q:\n        return 0\n    \n    # Nope\n    if 8 in q and 8 in p:\n        # Dist between 1238567 and 1278543 or reverse\n        return 7\n    \n    if 8 in q:\n        min_dist = 8\n        for i in range(1,8):\n            q2 = list(q)\n            q2[q2.index(8)] = i\n            for j in range(1,8):\n                if p[j:]==q2[:-j]:\n                    if min_dist > j:\n                        min_dist = j\n                        break\n        return min_dist\n                \n    if 8 in p:\n        min_dist = 8\n        for i in range(1,8):\n            p2 = list(p)\n            p2[p2.index(8)] = i\n            for j in range(1,8):\n                if p2[j:]==q[:-j]:\n                    if min_dist > j:\n                        min_dist = j\n                        break\n        return min_dist\n            \n    i = p.index(q[0])\n    return i if p[i:] == q[:7-i] else 7\n\n\ndef perm_dist(p, q, string_number, use_wildcards=True):\n    \"\"\"\n    Computes overlapping distance between two lists of integer\n    between 1 and 7. 8 is wildcard\n    \"\"\"\n    p = list(p)\n    q = list(q)\n    \n    \n    if p==q:\n        return 0\n    \n    if use_wildcards and wildcards[string_number]:\n        # Apply wildcards\n        for j in range(2):\n            if p == list(wildcards[string_number][j]):\n                p[WILDCARD_POS] = 8\n            if q == list(wildcards[string_number][j]):\n                q[WILDCARD_POS] = 8    \n    \n    # Nope\n    if 8 in q and 8 in p:\n        return 7\n    \n    if 8 in q:\n        min_dist = 8\n        for i in range(1,8):\n            q2 = list(q)\n            q2[q2.index(8)] = i\n            for j in range(1,8):\n                if p[j:]==q2[:-j]:\n                    if min_dist > j:\n                        min_dist = j\n                        break\n        return min_dist\n                \n    if 8 in p:\n        min_dist = 8\n        for i in range(1,8):\n            p2 = list(p)\n            p2[p2.index(8)] = i\n            for j in range(1,8):\n                if p2[j:]==q[:-j]:\n                    if min_dist > j:\n                        min_dist = j\n                        break\n        return min_dist\n            \n    i = p.index(q[0])\n    return i if p[i:] == q[:7-i] else 7\n\ndef perms_to_string(perms, string_number, use_wildcards=True):\n    \"\"\"\n    Given list of permutations, compacts them to string\n    via removing overlaps\n    \"\"\"\n    perms = list(perms)\n    s = [*perms[0]]\n    for p, q in zip(perms, perms[1:]):\n        d = perm_dist(p[-7:], q[:7], string_number, use_wildcards)\n        s.extend(q[7-d:])\n        if use_wildcards:\n            if q == wildcards[string_number][0]:\n                s[-(7-WILDCARD_POS)] = 8\n            elif q == wildcards[string_number][1]:\n                s[-(7-WILDCARD_POS)] = 8\n    return s\n\ndef distances_matrix(perms, string_number, depot=False, use_wildcards=True):\n    \"\"\"\n    Computes distance matrix for TSP\n    \"\"\"\n    if depot:\n        m = np.zeros((len(perms)+1, len(perms)+1), dtype='int8')\n    else:\n        m = np.zeros((len(perms), len(perms)), dtype='int8')\n    for i, p in enumerate(perms):\n        for j, q in enumerate(perms):\n            if depot:\n                m[i+1, j+1] = perm_dist(p[-7:], q[:7], string_number, use_wildcards) + len(q) - 7\n            else:\n                m[i,j] = perm_dist(p[-7:], q[:7], string_number, use_wildcards) + len(q) - 7\n    if depot:\n        m[0,:]=0\n        m[:,0]=0\n    return m\n\ndef distances_matrix_ctsp(perms, depot=False):\n    \"\"\"\n    Computes distance matrix for TSP\n    \"\"\"\n    if depot:\n        m = np.zeros((len(perms)+1, len(perms)+1), dtype='int8')\n    else:\n        m = np.zeros((len(perms), len(perms)), dtype='int8')\n    for i, p in enumerate(perms):\n        for j, q in enumerate(perms):\n            if 0 <= i < 120:\n                string_number = 0\n            elif 120 <= i < 240:\n                string_number = 1\n            else:\n                if 0 <= j < 120:\n                    string_number = 0\n                elif 120 <= j < 240:\n                    string_number = 1\n                else:\n                    string_number = 2\n            if depot:\n                m[i+1, j+1] = perm_dist(p[-7:], q[:7], string_number) + len(q) - 7\n            else:\n                m[i,j] = perm_dist(p[-7:], q[:7], string_number) + len(q) - 7\n    if depot:\n        m[0,:]=0\n        m[:,0]=0\n    return m\n\ndef sym_distances_matrix(matrix, constant=True):\n    \"\"\"\n    Given an N x N distance matrix for ATSP, obtains a 2N x 2N matrix for\n    SymTSP, where the extra N nodes are \"virtual\" and should be ommitted\n    from the resulting circuit.\n    paper: http:\/\/home.eng.iastate.edu\/~rkumar\/PUBS\/atsp.pdf\n    \"\"\"\n    if constant:\n        # Obtain D prime\n        d_max = np.max(matrix)\n        np.fill_diagonal(matrix, 100)\n        d_min = np.min(matrix)\n        np.fill_diagonal(matrix, 0)\n        if d_max \/ d_min < 4\/3:\n            Dprime = matrix\n        else:\n            Dprime = matrix + 3*d_max - 4*d_min + 1\n            np.fill_diagonal(Dprime, 0)\n    else:\n        Dprime = matrix\n    \n    # Obtain D bar\n    Dbar = np.empty((Dprime.shape[0]*2, Dprime.shape[1]*2))\n    Dbar[:Dprime.shape[0], :Dprime.shape[0]] = 100\n    Dbar[Dprime.shape[0]:, :Dprime.shape[0]] = Dprime\n    Dbar[:Dprime.shape[0], Dprime.shape[0]:] = np.transpose(Dprime)\n    Dbar[Dprime.shape[0]:, Dprime.shape[0]:] = 100\n    \n    # Add depot\n    Dbar2 = np.empty((Dbar.shape[0]+1, Dbar.shape[1]+1))\n    Dbar2[1:,1:] = Dbar\n    Dbar2[0, :] = 0\n    Dbar2[:, 0] = 0\n    Dbar = Dbar2\n    \n    np.round(Dbar, 0)\n    Dbar = Dbar.astype(int)\n    return Dbar\n\ndef find_remaining(l):\n    \"\"\"\n    Given 6 different numbers from 1 to 7, returns\n    the remaining one.\n    \"\"\"\n    s = {1,2,3,4,5,6,7}\n    return list(s - set(l))[0]\n\ndef reduce_perms(perms, factor=2, exclude_mandatory=True, seed=397):\n    \"\"\"\n    Given a list of permutations and a reduction factor, \n    returns a list of \"glued permutations\" with smaller size.\n    \"\"\"\n    seen = set()\n    result = set()\n    perms = list(perms)\n    random.Random(seed).shuffle(perms)\n    for perm in perms:\n        if (exclude_mandatory and perm[1]==1 and perm[2]==2):\n            seen.add(perm)\n            result.add(perm)\n        if perm in seen:\n            continue\n        seen.add(perm)\n        l = list(perm)\n        for _ in range(factor-1):\n            remaining = find_remaining(l[-6:])\n            l.append(remaining)\n            if(tuple(l[-7:]) in seen) or (exclude_mandatory and l[-7]==1 and l[-6]==2):\n                l.pop()\n                break\n            seen.add(tuple(l[1:]))\n        l = tuple(l)\n        result.add(l)\n    return result    \n\ndef write_params_file(name=\"mtsp\"):\n    \"\"\"\n    Sets solver parameters. If multi == True, attempts a multi-solve\n    \"\"\"\n    with open(f'{name}.par', 'w') as f:\n        print(f'PROBLEM_FILE = {name}.mtsp', file=f)\n        print(f'TOUR_FILE = {name}.txt', file=f)\n        print(f'INITIAL_TOUR_FILE = {name}.txt', file=f)\n        #print('INITIAL_TOUR_ALGORITHM = MTSP', file=f)\n        print('PATCHING_C = 4', file=f)\n        print('PATCHING_A = 3', file=f)\n        print('GAIN23 = YES', file=f)\n        print('SEED = 69', file=f)\n        print('MAX_TRIALS = 100000', file=f)\n        print(f'TIME_LIMIT = {TIME_LIMIT}', file=f) #seconds\n        print('TRACE_LEVEL = 1', file=f)\n\n\ndef write_problem_file(distances,name=\"mtsp\"):\n    \"\"\"\n    Writes problem.\n    \"\"\"\n    with open(f'{name}.mtsp', 'w') as f:\n        print('TYPE: ATSP', file=f)\n        print(f'DIMENSION: {len(distances)}', file=f)\n        print('EDGE_WEIGHT_TYPE: EXPLICIT', file=f)\n        print('EDGE_WEIGHT_FORMAT: FULL_MATRIX\\n', file=f)\n        print('EDGE_WEIGHT_SECTION', file=f)\n        for row in distances:\n            print(' '.join(str(_) for _ in row), file=f)\n            \ndef write_initial_tour_file(perms):\n    \"\"\"\n    Writes starting tour\n    \"\"\"\n    with open('initial_tour.txt', 'w') as f:\n        print('TOUR_SECTION', file=f)\n        print(' '.join(str(_) for _ in range(1, len(perms)+1)), -1, file=f)\n\ndef read_output_tour(perms,name=\"best_tour\"):\n    \"\"\"\n    Reads resulting tour\n    \"\"\"\n    perms = list(perms)\n    with open(f'{name}.txt') as f:\n        lines = f.readlines()\n    tour = lines[lines.index('TOUR_SECTION\\n')+2:-2]\n    return [perms[int(_) - 2] for _ in tour]\n\ndef read_output_tour_mtsp(perms, filename):\n    \"\"\"\n    Reads resulting tour, returning 3-tuple of tour indices\n    \"\"\"\n    perms = list(perms)\n    tour = [[],[],[]]\n    dimension = 1 + len(perms)\n    with open(filename) as f:\n        lines = f.readlines()\n    i=-1\n    for node_tag in lines[lines.index('TOUR_SECTION\\n')+1:-2]:\n        tag = int(node_tag)\n        if tag == 1 or tag == dimension+1 or tag == dimension+2:\n            i+=1\n        else:\n            tour[i].append(perms[tag-2]) # Sub extra to ignore depot\n    return tuple(tour)\n\ndef read_output_tour_ctsp(perms, filename, flip=False):\n    \"\"\"\n    Reads resulting tour, returning 3-tuple of tour indices\n    \"\"\"\n    perms = list(perms)\n    tour = [[],[],[]]\n    dimension = 1 + 2*len(perms)\n    prev = None\n    with open(filename) as f:\n        lines = f.readlines()\n    i=-1\n    L = lines[lines.index('TOUR_SECTION\\n')+1:-2]\n    for node_tag in L:\n        tag = int(node_tag)\n        if tag == 1 or tag == dimension+1 or tag == dimension+2:\n            i+=1\n        else:\n            if tag >=2 and (perms[(tag-2)%len(perms)] not in tour[i]):\n                tour[i].append(perms[(tag-2)%len(perms)]) # Sub extra to ignore depot\n        if tag > 1+len(perms) and tag != prev+len(perms):\n            continue\n            print(f\"Careful with {tag}\")\n        elif tag <= 1+len(perms):\n            prev = tag\n    return tuple(tour)\n    \ndef solve_atsp(perms, name=\"santa.par\"):\n    \n    # Run LKH-3 to solve ATSP instance\n    !touch lkh.log\n    !.\/LKH $name >> lkh.log\n    #tour = read_output_tour(perms)\n    #return perms_to_string(tour)\ndef check_validity(str1, str2, str3):\n    all_perms = set(itertools.permutations(range(1, 8), 7))\n    mandatory_perms = set((1, 2) +  _ for _ in itertools.permutations(range(3, 8), 5))\n\n    strings_perms = [perms_in_string(str1), perms_in_string(str2), perms_in_string(str3)]\n    for i, s in enumerate(strings_perms):\n        if mandatory_perms - s:\n            print(f'String #{i} is missing {mandatory_perms - s}.')\n            return False\n    if all_perms - set.union(*strings_perms):\n        print(f\"missing:{len(all_perms - set.union(*strings_perms))}\")\n        print(f'Strings are missing {all_perms - set.union(*strings_perms)}.')\n        return False\n    return True\n\ndef perms_in_string_list(string_as_list):\n    perms = []\n    for i in range(len(string_as_list)):\n        perm = tuple(string_as_list[i:i+7])\n        if len(set(perm))==7:\n            if 8 not in perm:\n                perms.append(perm)\n            else:\n                if perm.count(8) > 1:\n                    continue\n                for i in range(1,8):\n                    perm2 = list(perm)\n                    perm2[perm2.index(8)] = i\n                    if len(set(perm2))==7:\n                        perms.append(tuple(perm2))\n                \n    return perms\n\ndef perms_in_string(string_as_list):\n    perms = set()\n    for i in range(len(string_as_list)):\n        perm = tuple(string_as_list[i:i+7])\n        if len(set(perm))==7:\n            if 8 not in perm:\n                perms.add(perm)\n            else:\n                if perm.count(8) > 1:\n                    continue\n                for i in range(1,8):\n                    perm2 = list(perm)\n                    perm2[perm2.index(8)] = i\n                    if len(set(perm2))==7:\n                        perms.add(tuple(perm2))\n                \n    return perms\ndef concat_perms(perms):\n    perms_flat = []\n    for e in perms:\n        for i in e:\n            perms_flat.append(i)\n    return perms_flat","580b307a":"def string_to_tour(string, perms, name=\"tour\"):\n    seen = set()\n    perms = list(perms)\n    dimension = len(perms)+1\n    lines = [f\"DIMENSION: {dimension}\\nTYPE: TOUR\\nTOUR_SECTION\\n1\\n\"]\n    for j in range(len(string)-6):\n        perm = tuple(string[j:j+7])\n        if perm.count(8) == 1:\n            for k in range(1,8):\n                perm2 = list(perm)\n                perm2[perm2.index(8)] = k\n                if len(set(perm2)) == 7:\n                    perm = tuple(perm2)\n                    break\n        if perm not in seen and len(set(perm))==7 and perm in perms:\n            seen.add(perm)\n            lines.append(f\"{perms.index(perm)+2}\\n\")\n    lines.append(\"-1\\nEOF\")\n    with open(f\"{name}.txt\", \"w\") as f:\n        f.writelines(lines)","e26402e9":"all_perms = set(itertools.permutations(range(1, 8), 7))\nmandatory_perms = set((1, 2) +  _ for _ in itertools.permutations(range(3, 8), 5))\nnon_mandatory_perms = all_perms - mandatory_perms\nctsp_perms = list(mandatory_perms) + list(mandatory_perms) + list(mandatory_perms) + list(non_mandatory_perms)","e3997ea1":"def strings_to_tour_ctsp(strings, perms, mandatory_perms):\n    seen = set()\n    perms = list(perms)\n    dimension = 2*len(perms)+3 #Three depots\n    lines = [f\"DIMENSION: {dimension}\\nTYPE: TOUR\\nTOUR_SECTION\\n\"]\n    for i in range(3):\n        mandatory_seen = set()\n        if i == 0:\n            lines.append(\"1\\n\")\n        else:\n            lines.append(f\"{2*len(perms)+1+i}\\n\")\n        for j in range(len(strings[i])-6):\n            perm = tuple(strings[i][j:j+7])\n            if perm.count(8) == 1:\n                for k in range(1,8):\n                    perm2 = list(perm)\n                    perm2[perm2.index(8)] = k\n                    if len(set(perm2)) == 7:\n                        perm = tuple(perm2)\n                        break\n            if perm not in mandatory_perms and perm not in seen and len(set(perm))==7:\n                seen.add(perm)\n                lines.append(f\"{perms.index(perm)+2}\\n\")\n                lines.append(f\"{perms.index(perm)+2+5280}\\n\")\n            elif perm in mandatory_perms and perm not in mandatory_seen and len(set(perm))==7:\n                mandatory_seen.add(perm)\n                lines.append(f\"{perms.index(perm)+2+120*i}\\n\")\n                lines.append(f\"{perms.index(perm)+2+5280+120*i}\\n\")\n    lines.append(\"-1\\nEOF\")\n    with open(\"ctsp_tour_wild.txt\", \"w\") as f:\n        f.writelines(lines)\n    return lines","528e0e43":"def write_problem_file_ctsp(name=\"santa_wild\", multi=True, ctsp=True):\n    \"\"\"\n    Writes problem.\n    \"\"\"\n    distances = sym_distances_matrix(distances_matrix_ctsp(ctsp_perms), constant = False)\n    with open(f'{name}.ctsp', 'w') as f:\n        print('TYPE: CTSP', file=f)\n        print(f'DIMENSION: {len(distances)}', file=f)\n        if multi or ctsp:\n            print('SALESMEN: 3', file=f)\n        print('EDGE_WEIGHT_TYPE: EXPLICIT', file=f)\n        print('EDGE_WEIGHT_FORMAT: FULL_MATRIX\\n', file=f)\n        print('EDGE_WEIGHT_SECTION', file=f)\n        for row in distances:\n            print(' '.join(str(_) for _ in row), file=f)\n        if ctsp:\n            print('FIXED_EDGES_SECTION', file=f)\n            fixed_edges = zip(range(2, 5280+2), range(5280+2, 2*5280+2))\n            fixed_edges = itertools.chain.from_iterable(fixed_edges)\n            print(' '.join(map(str, fixed_edges)), -1, file=f)\n            print('CTSP_SET_SECTION', file=f)\n            print(1, ' '.join(str(e) for e in range(2,122)),' '.join(str(e) for e in range(2+5280,122+5280)), -1, file=f) # First 120 perms\n            print(2, ' '.join(str(e) for e in range(122,(122+120))),' '.join(str(e) for e in range(122+5280,(122+120+5280))), -1, file=f) # Next 120 perms\n            print(3, ' '.join(str(e) for e in range(122+120,(122+120+120))), ' '.join(str(e) for e in range(122+120+5280,(122+120+120+5280))), -1, file=f) # Next 120 perms\n        if multi or ctsp:\n            print('DEPOT_SECTION', file=f)\n            print('1', file=f)\n            print('-1', file=f)\n            print('EOF', file=f)","ff17415a":"def get_distances_from_prev_node(perms, str_id):\n    # First node has prev_distance = -inf\n    return [-float('inf')] + [perm_dist(perms[i-1], perms[i], str_id, use_wildcards=False) for i in range(1, len(perms))]\n\nclass CostlyMandatory:\n    def __init__(self, perm, distance_from_prev, candidates_min_distance, n_candidates, n_candidates_not_already_before_mandatory, candidates_avg_distances, candidates_not_already_avg_distances):\n        self.perm = perm\n        self.distance_from_prev = distance_from_prev  # distance from prev node\n        self.candidates_min_distance = candidates_min_distance  # min distance of candidates to this perm\n        self.n_candidates = n_candidates\n        self.n_candidates_not_already_before_mandatory = n_candidates_not_already_before_mandatory\n        self.candidates_avg_distances = candidates_avg_distances\n        self.candidates_not_already_avg_distances = candidates_not_already_avg_distances\n    \n    def __lt__(self, other):\n        return (-self.distance_from_prev,\n                self.candidates_min_distance, \n                -self.n_candidates_not_already_before_mandatory, \n                -self.candidates_not_already_avg_distances, \n                -self.n_candidates, \n                -self.candidates_avg_distances) < (-other.distance_from_prev,\n                                                   other.candidates_min_distance, \n                                                   -other.n_candidates_not_already_before_mandatory, \n                                                   -other.candidates_not_already_avg_distances, \n                                                   -other.n_candidates, \n                                                   -other.candidates_avg_distances)\n\ndef choose_wildcards(string, str_id, verbose=False):\n    perms = perms_in_string_list(string)\n    distances_from_prev = get_distances_from_prev_node(perms, str_id)\n    costly_mandatory_perms = [(perms[i], distances_from_prev[i]) for i in range(len(perms)) \n                                          if perms[i] in mandatory_perms and distances_from_prev[i] >= MIN_COSTLY_DISTANCE]\n    \n    if verbose:\n        print(f'Total costly mandatory perms: {len(costly_mandatory_perms)}')\n        print(f'Costly mandatory perms: {costly_mandatory_perms}')\n            \n    \n    costly_mandatory_ordered = []\n    wildcards = []\n    for perm, distance_from_prev in costly_mandatory_perms:\n        # Add wildcard to desired position\n        perm_with_wildcard = list(perm)\n        perm_with_wildcard[WILDCARD_POS] = 8\n        distances = [perm_dist(perms[i], perm_with_wildcard, str_id, use_wildcards=False) for i in range(len(perms))]\n        candidates_min_distance = min(distances)\n        # Choose candidates with potential distance = min_distance to perm\n        candidates = [(i, perms[i]) for i in range(len(perms)) if distances[i] == candidates_min_distance] \n        candidates_not_already_before_mandatory = [(index, candidate) for index, candidate in candidates if perms[index+1] not in mandatory_perms]\n        # Compute avg distances of the involved candidates from prev node and to next node\n        if len(candidates) > 0:\n            candidates_avg_distances = sum([distances_from_prev[index] + distances_from_prev[index+1] for index, _ in candidates]) \/ (2*len(candidates))\n        else:\n            candidates_avg_distances = 0\n        if len(candidates_not_already_before_mandatory) > 0:\n            candidates_not_already_avg_distances = sum([distances_from_prev[index] + distances_from_prev[index+1] for index, _ in candidates_not_already_before_mandatory]) \/ (2*len(candidates_not_already_before_mandatory))\n        else:\n            candidates_not_already_avg_distances = 0\n        if verbose:\n            print(f'\\t{perm} has {len(candidates)} candidates with dist={candidates_min_distance} (avg_dist_prevnext={candidates_avg_distances}), {len(candidates_not_already_before_mandatory)} not already before other mandatory (avg_dist_prevnext={candidates_not_already_avg_distances})')\n\n        costly_mandatory_ordered.append(CostlyMandatory(perm, distance_from_prev, candidates_min_distance, len(candidates), len(candidates_not_already_before_mandatory), candidates_avg_distances, candidates_not_already_avg_distances))\n\n    costly_mandatory_ordered.sort()\n    wildcards = [costly_mandatory.perm for costly_mandatory in costly_mandatory_ordered[:MAX_ELEMENTS_BRUTE_FORCE]]\n    wildcards = list(itertools.combinations(wildcards, 2))\n    if verbose:\n        print(f'Chosen wildcards pairs: {wildcards}')\n    \n    return wildcards","90495292":"# Convert\nstr1 = [int(e) for e in str1]\nstr2 = [int(e) for e in str2]\nstr3 = [int(e) for e in str3]\n\nprint(f\"INITIAL LENGTHS\\n{len(str1)} {len(str2)} {len(str3)}\")\n\nwildcards = [[], [], []]\nlen1_best, len2_best, len3_best = len(str1), len(str2), len(str3)\n\n# Optimize str1\nprint(f\"OPTIMIZING STR1 WITHOUT WILDCARDS\")\nperms1 = perms_in_string(str1)\nwrite_params_file(\"str1\")\nwrite_problem_file(distances_matrix(perms1, 0, depot=True, use_wildcards=False), \"str1\")\nstring_to_tour(str1,perms1,name=\"str1\")\nsolve_atsp(perms1, name=\"str1.par\")\ntour1=read_output_tour(perms1,name=\"str1\")\nstr1 = perms_to_string(tour1,0, use_wildcards=False)\nprint(f\"STR1 CHANGED TO {len(str1)}\")\n\nprint(f\"OPTIMIZING STR1\")\nwildcard_pairs = choose_wildcards(str1, str_id=1-1)\nperms1 = perms_in_string(str1)\nwrite_params_file(\"str1\")\nstr1_best = str1\nfor wildcard_pair in wildcard_pairs:\n    wildcards[0] = wildcard_pair\n    write_problem_file(distances_matrix(perms1, 0, depot=True), \"str1\")\n    string_to_tour(str1,perms1,name=\"str1\")\n    solve_atsp(perms1, name=\"str1.par\")\n    tour1=read_output_tour(perms1,name=\"str1\")\n    str1_new = perms_to_string(tour1,0)\n    print(f\"STR1 CHANGED TO {len(str1_new)}\")\n    if len(str1_new) < len1_best:\n        str1_best = str1_new\n        len1_best = len(str1_new)\n        with open(f'str1_{len(str1_new)}.txt', 'w') as f:\n            f.write(''.join(str(e) for e in str1))\n        with open(f'wildcards1_{len(str1_new)}.txt', 'w') as f:\n            print(wildcard_pair)\n            best_wildcard_1 = wildcard_pair\n            f.write(str(wildcard_pair))\n    \nstr1 = str1_best\n\n# Optimize str2\nperms1 = perms_in_string(str1)\nperms2 = perms_in_string(str2)\nperms2 = perms2 - (perms2.intersection(perms1) - mandatory_perms)\nprint(f\"OPTIMIZING STR2 WITHOUT WILDCARDS\")\nwrite_params_file(\"str2\")\nwrite_problem_file(distances_matrix(perms2, 1, depot=True, use_wildcards=False), \"str2\")\nstring_to_tour(str2,perms2,name=\"str2\")\nsolve_atsp(perms2, name=\"str2.par\")\ntour2=read_output_tour(perms2,name=\"str2\")\nstr2 = perms_to_string(tour2,1,use_wildcards=False)\nprint(f\"STR2 CHANGED TO {len(str2)}\")\n\nperms2 = perms_in_string(str2)\nperms2 = perms2 - (perms2.intersection(perms1) - mandatory_perms)\nprint(f\"OPTIMIZING STR2\")\nwildcard_pairs = choose_wildcards(str2, str_id=2-1)\nwrite_params_file(\"str2\")\nstr2_best = str2\nfor wildcard_pair in wildcard_pairs:\n    wildcards[1] = wildcard_pair\n    write_problem_file(distances_matrix(perms2, 1, depot=True), \"str2\")\n    string_to_tour(str2,perms2,name=\"str2\")\n    solve_atsp(perms2, name=\"str2.par\")\n    tour2=read_output_tour(perms2,name=\"str2\")\n    str2_new = perms_to_string(tour2,1)\n    print(f\"STR2 CHANGED TO {len(str2_new)}\")\n    if len(str2_new) < len2_best:\n        str2_best = str2_new\n        len2_best = len(str2_new)\n        with open(f'str2_{len(str2_new)}.txt', 'w') as f:\n            f.write(''.join(str(e) for e in str2))\n        with open(f'wildcards2_{len(str2_new)}.txt', 'w') as f:\n            print(wildcard_pair)\n            best_wildcard_2 = wildcard_pair\n            f.write(str(wildcard_pair))\n    \nstr2 = str2_best\n\n# Optimize str3\nperms1 = perms_in_string(str1)\nperms2 = perms_in_string(str2)\nperms3 = perms_in_string(str3)\nperms3 = perms3 - (perms3.intersection(perms1.union(perms2)) - mandatory_perms)\nprint(f\"OPTIMIZING STR3 WITHOUT WILDCARDS\")\nwrite_params_file(\"str3\")\nwrite_problem_file(distances_matrix(perms3, 2, depot=True, use_wildcards=False), \"str3\")\nstring_to_tour(str3,perms3,name=\"str3\")\nsolve_atsp(perms3, name=\"str3.par\")\ntour3=read_output_tour(perms3,name=\"str3\")\nstr3 = perms_to_string(tour3,2, use_wildcards=False)\n\nprint(f\"STR3 CHANGED TO {len(str3)}\")\nperms3 = perms_in_string(str3)\nperms3 = perms3 - (perms3.intersection(perms1.union(perms2)) - mandatory_perms)\nprint(f\"OPTIMIZING STR3\")\nwildcard_pairs = choose_wildcards(str3, str_id=3-1)\nwrite_params_file(\"str3\")\nstr3_best = str3\nfor wildcard_pair in wildcard_pairs:\n    wildcards[2] = wildcard_pair\n    write_problem_file(distances_matrix(perms3, 2, depot=True), \"str3\")\n    string_to_tour(str3,perms3,name=\"str3\")\n    solve_atsp(perms3, name=\"str3.par\")\n    tour3=read_output_tour(perms3,name=\"str3\")\n    str3_new = perms_to_string(tour3,2)\n    print(f\"STR3 CHANGED TO {len(str3_new)}\")\n    if len(str3_new) < len3_best:\n        str3_best = str3_new\n        len3_best = len(str3_new)\n        with open(f'str3_{len(str3_new)}.txt', 'w') as f:\n            f.write(''.join(str(e) for e in str3))\n        with open(f'wildcards3_{len(str3_new)}.txt', 'w') as f:\n            print(wildcard_pair)\n            best_wildcard_3 = wildcard_pair\n            f.write(str(wildcard_pair))\nstr3 = str3_best","085cae8d":"if not check_validity(str1, str2, str3):\n    print(\"UNVALID STRINGS\")\nelse:\n    print(\"VALID STRINGS\")\nprint(len(perms_in_string(str1)),len(perms_in_string(str2)),len(perms_in_string(str3)))\nprint(len(str1),len(str2),len(str3))\nprint(''.join(str(e) for e in str1),\"\\n\",\"=\"*50)\nprint(''.join(str(e) for e in str2),\"\\n\",\"=\"*50)\nprint(''.join(str(e) for e in str3),\"\\n\",\"=\"*50)","f4cb0189":"wildcards = [best_wildcard_1,best_wildcard_2,best_wildcard_3]\nstrings_to_tour_ctsp([str1, str2, str3], ctsp_perms, mandatory_perms)\nwrite_problem_file_ctsp()","c7aa9b04":"LETTERS = {\n    1: '\ud83c\udf85',  # father christmas\n    2: '\ud83e\udd36',  # mother christmas\n    3: '\ud83e\udd8c',  # reindeer\n    4: '\ud83e\udddd',  # elf\n    5: '\ud83c\udf84',  # christmas tree\n    6: '\ud83c\udf81',  # gift\n    7: '\ud83c\udf80',  # ribbon\n    8: '\ud83c\udf1f',  # star\n}\nstrings = [str1, str2, str3]\nsub = pd.DataFrame()\nsub['schedule'] = [''.join(LETTERS[x] for x in s) for s in strings]\nsub_name = f'submission.csv'\nsub.to_csv(sub_name, index=False)","9bce9933":"## Utilities","d3ce6d02":"# Compute wildcards","77cb4670":"## INPUT","33f9d76a":"## Show and store","9e9fba30":"## Process"}}