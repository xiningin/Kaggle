{"cell_type":{"77a408c8":"code","b57c2115":"code","626a4873":"code","0125d0dd":"code","e7e5d10f":"code","9ce6a16e":"code","e62dd04c":"code","1ccad6b4":"code","abfac547":"code","53e30366":"code","38b64e68":"code","8c5e7f2f":"code","2dfa43ae":"code","46ed61d4":"code","cfa23cf2":"code","7bd40075":"code","fbd4bd24":"code","8ddb4d66":"code","dfb78282":"code","e08a817f":"code","429f87b0":"code","2dcb09dd":"code","212fb510":"code","349c5b13":"code","f93e22c3":"code","10fee6cc":"code","7b6428ef":"code","ed436661":"code","efb61302":"code","ff0e912b":"code","31952f1f":"code","46bfd789":"code","57ea8297":"code","6438409d":"code","c264db12":"markdown","dc0fb095":"markdown"},"source":{"77a408c8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b57c2115":"#Loading the CSV Files\ntrain = pd.read_csv('\/kaggle\/input\/machine-learning-in-agriculture\/train_yaOffsB.csv')\ntest = pd.read_csv('\/kaggle\/input\/machine-learning-in-agriculture\/test_pFkWwen.csv')\nsub_sample = pd.read_csv('\/kaggle\/input\/machine-learning-in-agriculture\/sample_submission_O1oDc4H.csv')","626a4873":"import lightgbm as lgb\nfrom matplotlib import pyplot as plt\nfrom sklearn import preprocessing\nfrom sklearn.metrics import mean_squared_log_error, mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import log_loss\nfrom sklearn.metrics import classification_report\nimport seaborn as sns","0125d0dd":"train.head()","e7e5d10f":"train.shape","9ce6a16e":"test.head()","e62dd04c":"test.shape","1ccad6b4":"train['Crop_Damage'].value_counts()","abfac547":"fig, ax = plt.subplots()\n# plot histogram\nax.hist(train['Crop_Damage'])\n# set title and labels\nax.set_xticks((0,1,2))\nax.set_title('Crop Damage')\nax.set_xlabel('Outcome')\nax.set_ylabel('Counts')\nplt.show()","53e30366":"fig, ax = plt.subplots()\n# plot histogram\nax.hist(train['Crop_Type'])\n# set title and labels\nax.set_xticks((0,1))\nax.set_title('Crop_Type')\nax.set_xlabel('Types')\nax.set_ylabel('Counts')\nplt.show()","38b64e68":"#Concatenating the Datasets\ntrain['train_flag'] = 1\ntest['train_flag'] = 0\ntest['Crop_Damage'] = 0\n\n\ndata = pd.concat((train, test))\ndata.shape","8c5e7f2f":"#select relevant features from data\nfeature_cols = train.columns.tolist()\nfeature_cols.remove('ID')\nfeature_cols.remove('Crop_Damage')\nfeature_cols.remove('train_flag')\nlabel_col = 'Crop_Damage'\nprint(feature_cols)","2dfa43ae":"#ID values are actually integers with some prefixes. Convert them back to int.\ndata['ID_value'] = data['ID'].apply(lambda x: x.strip('F')).astype('int')","46ed61d4":"data = data.sort_values(['ID_value'])","cfa23cf2":"data.head()","7bd40075":"data = data.reset_index(drop=True)","fbd4bd24":"data.head()","8ddb4d66":"data['Soil_Type_Damage'] = data.sort_values(['ID_value']).groupby(['Soil_Type'])['Crop_Damage'].apply(lambda x: x.shift().rolling(5, min_periods=1).mean()).fillna(-999).values\n\ndata['Estimated_Insects_Count_Damage'] = data.sort_values(['ID_value']).groupby(['Estimated_Insects_Count'])['Crop_Damage'].apply(lambda x: x.shift().rolling(5, min_periods=1).mean()).fillna(-999).values\n\ndata['Crop_Type_Damage'] = data.sort_values(['ID_value']).groupby(['Crop_Type'])['Crop_Damage'].apply(lambda x: x.shift().rolling(5, min_periods=1).mean()).fillna(-999).values\n\ndata['Pesticide_Use_Category_Damage'] = data.sort_values(['ID_value']).groupby(['Pesticide_Use_Category'])['Crop_Damage'].apply(lambda x: x.shift().rolling(5, min_periods=1).mean()).fillna(-999).values\n\ndata['Season_Damage'] = data.sort_values(['ID_value']).groupby(['Season'])['Crop_Damage'].apply(lambda x: x.shift().rolling(5, min_periods=1).mean()).fillna(-999).values\n\ndata['Soil_Type_Damage_lag2'] = data.sort_values(['ID_value']).groupby(['Soil_Type'])['Crop_Damage'].apply(lambda x: x.shift(periods=2).rolling(5, min_periods=1).mean()).fillna(-999).values\n\ndata['Estimated_Insects_Count_Damage_lag2'] = data.sort_values(['ID_value']).groupby(['Estimated_Insects_Count'])['Crop_Damage'].apply(lambda x: x.shift(periods=2).rolling(5, min_periods=1).mean()).fillna(-999).values\n\ndata['Crop_Type_Damage_lag2'] = data.sort_values(['ID_value']).groupby(['Crop_Type'])['Crop_Damage'].apply(lambda x: x.shift(periods=2).rolling(5, min_periods=1).mean()).fillna(-999).values\n\ndata['Pesticide_Use_Category_Damage_lag2'] = data.sort_values(['ID_value']).groupby(['Pesticide_Use_Category'])['Crop_Damage'].apply(lambda x: x.shift(periods=2).rolling(5, min_periods=1).mean()).fillna(-999).values\n\ndata['Season_Damage_lag2'] = data.sort_values(['ID_value']).groupby(['Season'])['Crop_Damage'].apply(lambda x: x.shift(periods=2).rolling(5, min_periods=1).mean()).fillna(-999).values\n","dfb78282":"data.loc[data['train_flag'] == 0, 'Crop_Damage'] = -999","e08a817f":"data['Crop_Damage_lag1'] = data['Crop_Damage'].shift(fill_value=-999)\ndata['Estimated_Insects_Count_lag1'] = data['Estimated_Insects_Count'].shift(fill_value=-999)\ndata['Crop_Type_lag1'] = data['Crop_Type'].shift(fill_value=-999)\ndata['Soil_Type_lag1'] = data['Soil_Type'].shift(fill_value=-999)\ndata['Pesticide_Use_Category_lag1'] = data['Pesticide_Use_Category'].shift(fill_value=-999)\ndata['Number_Doses_Week_lag1'] = data['Number_Doses_Week'].shift(fill_value=-999)\ndata['Number_Weeks_Used_lag1'] = data['Number_Weeks_Used'].shift(fill_value=-999)\ndata['Number_Weeks_Quit_lag1'] = data['Number_Weeks_Quit'].shift(fill_value=-999)\ndata['Season_lag1'] = data['Season'].shift(fill_value=-999)\n\ndata['Crop_Damage_lag2'] = data['Crop_Damage'].shift(periods=2,fill_value=-999)\ndata['Estimated_Insects_Count_lag2'] = data['Estimated_Insects_Count'].shift(periods=2,fill_value=-999)\ndata['Crop_Type_lag2'] = data['Crop_Type'].shift(fill_value=-999)\ndata['Soil_Type_lag2'] = data['Soil_Type'].shift(fill_value=-999)\ndata['Pesticide_Use_Category_lag2'] = data['Pesticide_Use_Category'].shift(periods=2,fill_value=-999)\ndata['Number_Doses_Week_lag2'] = data['Number_Doses_Week'].shift(periods=2,fill_value=-999)\ndata['Number_Weeks_Used_lag2'] = data['Number_Weeks_Used'].shift(periods=2,fill_value=-999)\ndata['Number_Weeks_Quit_lag2'] = data['Number_Weeks_Quit'].shift(periods=2,fill_value=-999)\ndata['Season_lag2'] = data['Season'].shift(periods=2,fill_value=-999)","429f87b0":"train, test = data[data.train_flag == 1], data[data.train_flag == 0]","2dcb09dd":"train.drop(['train_flag'], inplace=True, axis=1)\ntest.drop(['train_flag'], inplace=True, axis=1)\ntest.drop([label_col], inplace=True, axis=1);","212fb510":"missing_impute = -999\ntrain['Number_Weeks_Used'] = train['Number_Weeks_Used'].apply(lambda x: missing_impute if pd.isna(x) else x)\ntest['Number_Weeks_Used'] = test['Number_Weeks_Used'].apply(lambda x: missing_impute if pd.isna(x) else x)\n\ntrain['Number_Weeks_Used_lag1'] = train['Number_Weeks_Used_lag1'].apply(lambda x: missing_impute if pd.isna(x) else x)\ntest['Number_Weeks_Used_lag1'] = test['Number_Weeks_Used_lag1'].apply(lambda x: missing_impute if pd.isna(x) else x)\n\ntrain['Number_Weeks_Used_lag2'] = train['Number_Weeks_Used_lag2'].apply(lambda x: missing_impute if pd.isna(x) else x)\ntest['Number_Weeks_Used_lag2'] = test['Number_Weeks_Used_lag2'].apply(lambda x: missing_impute if pd.isna(x) else x);","349c5b13":"#Split the datasets into training and evaluation sets\ndf_train, df_eval = train_test_split(train, test_size=0.40, random_state=42, shuffle=True, stratify=train[label_col])","f93e22c3":"feature_cols = train.columns.tolist()\nfeature_cols.remove('ID')\nfeature_cols.remove('Crop_Damage')\nfeature_cols.remove('ID_value')\nlabel_col = 'Crop_Damage'\nprint(feature_cols)","10fee6cc":"train.head()","7b6428ef":"#Categorical Columns\ncat_cols = ['Crop_Type', 'Soil_Type', 'Pesticide_Use_Category', 'Season', 'Crop_Type_lag1', 'Soil_Type_lag1', 'Pesticide_Use_Category_lag1', 'Season_lag1']","ed436661":"#light GBM Parameters\nparams = {}\nparams['learning_rate'] = 0.04\nparams['max_depth'] = 18\nparams['n_estimators'] = 3000\nparams['objective'] = 'multiclass'\nparams['boosting_type'] = 'gbdt'\nparams['subsample'] = 0.7\nparams['random_state'] = 42\nparams['colsample_bytree']=0.7\nparams['min_data_in_leaf'] = 55\nparams['reg_alpha'] = 1.7\nparams['reg_lambda'] = 1.11\nparams['class_weight']: {0: 0.44, 1: 0.4, 2: 0.37}","efb61302":"clf = lgb.LGBMClassifier(**params)\n    \nclf.fit(df_train[feature_cols], df_train[label_col], early_stopping_rounds=100, eval_set=[(df_train[feature_cols], df_train[label_col]), (df_eval[feature_cols], df_eval[label_col])], eval_metric='multi_error', verbose=True, categorical_feature=cat_cols)\n\neval_score = accuracy_score(df_eval[label_col], clf.predict(df_eval[feature_cols]))\n\nprint('Eval ACC: {}'.format(eval_score))","ff0e912b":"best_iter = clf.best_iteration_\nparams['n_estimators'] = best_iter\nprint(params)","31952f1f":"df_train = pd.concat((df_train, df_eval))","46bfd789":"clf = lgb.LGBMClassifier(**params)\n\nclf.fit(df_train[feature_cols], df_train[label_col], eval_metric='multi_error', verbose=False, categorical_feature=cat_cols)\n\n# eval_score_auc = roc_auc_score(df_train[label_col], clf.predict(df_train[feature_cols]))\neval_score_acc = accuracy_score(df_train[label_col], clf.predict(df_train[feature_cols]))\n\nprint('ACC: {}'.format(eval_score_acc))","57ea8297":"preds = clf.predict(test[feature_cols])","6438409d":"submission = pd.DataFrame({'ID':test['ID'], 'Crop_Damage':preds})\nsubmission.to_csv('Submission.csv',index=False)","c264db12":"**New Features**\n\nDeveloping new features from the existing ones using shift and rolling. These are used to give us the lag features.","dc0fb095":"# Crop_Damage Classification\n\n![Pesticides](https:\/\/i.imgur.com\/O8YzqPU.jpg)\n\n### The Toxic Pesticides\n\n**The task is to predict the outcome of the Harvers Season. In the Dataset, we have to predict the target, 'Crop_Damage'. The possible values are 0, 1, and 2. 0 implies alive, 1 implies Damage due to other causes and 2 represents Damage due to Pesticides.**"}}