{"cell_type":{"cbe73848":"code","7db0324f":"code","4e9739f3":"code","97889a3b":"code","97edadab":"code","2b0eaa37":"code","fca3edef":"code","d1aee892":"code","546a1b2e":"code","6ea50d54":"code","c82d8f6b":"code","11abe6cb":"code","4f4d941e":"code","e46cddcd":"code","c65ac589":"code","76c61585":"code","10434f4a":"code","12eac9ea":"code","25905ce6":"code","067b1ecc":"code","86ab051d":"code","08591acb":"code","526c5689":"code","eb578161":"code","43953674":"code","46e3a3a9":"code","3cac5a96":"code","ee6d698f":"code","b31fb972":"code","ab87a115":"code","2b179548":"code","f00ce8b3":"code","0136e506":"code","be081f85":"code","2eaaa25d":"code","29517e29":"code","a8f30a5f":"code","edba42d1":"code","9ab43d5a":"code","f4d1d6aa":"code","dbbdb894":"code","491efc8d":"code","ea2062b0":"code","ac9afe54":"code","a07595a4":"code","e05e6275":"code","c2e546f4":"code","4ecabec5":"code","d4837f31":"code","222b6762":"code","7c7c542e":"code","040e77fb":"code","c0b947d7":"code","580621f5":"code","e9084f62":"code","7447d796":"code","fc5a50a5":"code","8e015add":"code","be86e729":"code","a5629ed0":"code","ce9f5cd4":"code","ece1b2b3":"code","c471a581":"code","f98968c4":"code","436a43a2":"code","ebc9fd21":"code","409022bd":"code","d422a913":"code","25323b5b":"code","1adcec5e":"code","2e65f1dd":"code","0c19bc39":"code","006359a2":"code","5d56034f":"code","6eb81f59":"code","b4c6420b":"code","0005f319":"code","fdf67cde":"code","1a6932d9":"code","2278539f":"code","1a7404af":"code","fa4b1c89":"code","a62e706d":"code","98e79a0c":"code","3b450bae":"code","19edb973":"code","97c5392a":"code","cab8cd55":"code","a5606b5b":"code","20561839":"code","923fbb9f":"code","a5e9d5f0":"code","c507be1e":"code","42dd5de6":"code","41c12819":"code","c8dffbb3":"code","9d128e25":"code","e0865a1f":"code","4182dfa5":"code","2a30b535":"code","81e36b08":"code","8c7f5bba":"code","8d181e2f":"code","9c4e773a":"code","05d2b5fe":"code","4ae2c056":"code","690e4f08":"code","a1e68edf":"code","6269cc7d":"code","943905df":"code","0ba3e915":"code","f0b6a101":"code","6db25b46":"code","a317fa8f":"code","d1e02471":"code","35a4b072":"code","ac434edc":"code","83cacfcf":"code","d0a25abd":"code","a06eb9b0":"code","08c1dc3d":"code","f156f458":"code","4e96c100":"code","836f0f35":"code","d53d37cd":"code","ae934837":"code","ee91a3f2":"code","d50a3b27":"code","2aa7f015":"code","e328b2af":"code","ac7948d3":"code","d545636e":"code","0f8ecee0":"code","47e065cb":"code","afc739e3":"code","9a073a65":"code","4e4cb6b3":"code","baf7861a":"code","50ecaf09":"code","88a203c2":"code","aae3ca78":"code","9d24a305":"code","6006b8e7":"code","0881e693":"code","553f545c":"code","467b88fc":"code","74074f75":"code","0bb952e9":"code","516ce314":"code","6e7f85f7":"code","b7ede131":"code","030d7166":"code","7e914d2d":"code","8e4b4297":"code","5dff6008":"code","dd0d9cef":"code","cb73a2db":"code","abcadca0":"code","7452bcb3":"code","69a7539d":"code","c7b85d4d":"code","a07eb36a":"code","094c0cf9":"code","60bdf214":"code","d8a11d17":"code","69101715":"code","babdcb36":"code","6d265aaa":"code","32290fa5":"code","c31c137b":"markdown","46636580":"markdown","dc0b49cc":"markdown","0122e53a":"markdown","485bb8b6":"markdown","6e2b6312":"markdown","e0fa78bc":"markdown","1f709632":"markdown","c8f4d85b":"markdown","c84b9bb2":"markdown","b4d6d63b":"markdown","b9374736":"markdown","4b278b60":"markdown","7b744930":"markdown","c3d9744d":"markdown","495bcace":"markdown","f991af16":"markdown","885fb557":"markdown","1136e3d3":"markdown","0cf7988b":"markdown","1916e3a3":"markdown","6cb4c6bb":"markdown","9d8c941a":"markdown","5429566e":"markdown","25628637":"markdown","dfe3cc77":"markdown","27f3a44d":"markdown","ea20d47e":"markdown","a513b8da":"markdown","e52fec33":"markdown","b469d42e":"markdown","c96f0535":"markdown","4d80d9c9":"markdown","4baa26cc":"markdown","7584f3b3":"markdown","b8f65376":"markdown","d4180941":"markdown","f58c30df":"markdown","2e9db0b6":"markdown","af79c9e0":"markdown","16d5298f":"markdown","651856f3":"markdown","35babfaf":"markdown","82ba607a":"markdown","a3fb1571":"markdown","72db5247":"markdown","e5461e46":"markdown","3dac5b1f":"markdown","24b9921b":"markdown","fcd80b05":"markdown","f04d7a65":"markdown","03f3ab0e":"markdown","d6f27cd6":"markdown","74158e81":"markdown","895a3c94":"markdown","7852221e":"markdown","12de4c98":"markdown","dc8c0fe6":"markdown","0cd0393e":"markdown","8e454d1f":"markdown","49724456":"markdown","dc2899f8":"markdown","baec8b30":"markdown","a343a337":"markdown","bcd874ea":"markdown","f64387df":"markdown","92c1bc2c":"markdown","ad428b14":"markdown","77298f17":"markdown","99484c03":"markdown","d8ecf177":"markdown","1173ab6b":"markdown","5611fff2":"markdown","a6cd59e8":"markdown","70b6e36b":"markdown","24ddfac8":"markdown","23413799":"markdown","2fd73071":"markdown","954512c0":"markdown","b335d4d7":"markdown","662c3091":"markdown","88261102":"markdown","4dd97486":"markdown","c334b66f":"markdown"},"source":{"cbe73848":"# importing the libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\npd.options.display.max_columns = 90","7db0324f":"!pip install -U -q PyDrive\nfrom pydrive.auth import GoogleAuth\nfrom pydrive.drive import GoogleDrive\nfrom google.colab import auth\nfrom oauth2client.client import GoogleCredentials\n# Authenticate and create the PyDrive client.\nauth.authenticate_user()\ngauth = GoogleAuth()\ngauth.credentials = GoogleCredentials.get_application_default()\ndrive = GoogleDrive(gauth)","4e9739f3":"url1 = 'https:\/\/drive.google.com\/file\/d\/1B8B6BK9T47e14BW8EWVXaRww1hdxoveZ\/view?usp=sharing'\ndownloaded = drive.CreateFile({'id':'1B8B6BK9T47e14BW8EWVXaRww1hdxoveZ'}) \ndownloaded.GetContentFile('app_data.csv')  \napp_data = pd.read_csv('app_data.csv')\n\nurl2 = 'https:\/\/drive.google.com\/file\/d\/1qw4aiFI69iO5nDoXuOzVAFRlDysWIzKx\/view?usp=sharing'\ndownloaded = drive.CreateFile({'id':'1qw4aiFI69iO5nDoXuOzVAFRlDysWIzKx'}) \ndownloaded.GetContentFile('prev_data.csv')  \nprev_data = pd.read_csv('prev_data.csv')\n","97889a3b":"# app_data contains all the information of the client at the time of application and prev_data contains all the past applications of the customer\n\napp_data = pd.read_csv(r'C:\\Users\\Saurav\\Desktop\\Upgrad\\Credit EDA Case study\\application_data.csv')\nprev_data = pd.read_csv(r'C:\\Users\\Saurav\\Desktop\\Upgrad\\Credit EDA Case study\\previous_application.csv')\n","97edadab":"# inspecting the columns of the app_data dataframe\n\napp_data.columns","2b0eaa37":"# inspecting the shape of the app_data dataframe\n\napp_data.shape","fca3edef":"# inspecting the variable types of the app_data dataframe\n\napp_data.info()","d1aee892":"# inspecting the datatypes of app_data dataframe\n\napp_data.dtypes","546a1b2e":"# inspecting the central tendencies of app_data dataframe\n\napp_data.describe()","6ea50d54":"# inspecting the percentage of missing values for all the columns in app_data dataframe\n# rounding off the percentage to 3 decimal places\n\nround(100*(app_data.isnull().sum()\/len(app_data.index)),3)[:30]","c82d8f6b":"round(100*(app_data.isnull().sum()\/len(app_data.index)),3)[30:60]","11abe6cb":"round(100*(app_data.isnull().sum()\/len(app_data.index)),3)[60:90]","4f4d941e":"round(100*(app_data.isnull().sum()\/len(app_data.index)),3)[90:122]","e46cddcd":"(app_data.isnull().sum()*100\/len(app_data)).sort_values(ascending=False).head(60)","c65ac589":"# column OWN_CAR_AGE has got 65.991% of missing values\n# dropping the column as the column hasn't got much use for our analysis\n\napp_data.drop('OWN_CAR_AGE',axis = 1,inplace = True)\napp_data.shape","76c61585":"# column EXT_SOURCE_1 has got 56.383% of missing values\n# dropping the column EXT_SOURCE_1\n\napp_data.drop('EXT_SOURCE_1',axis = 1,inplace = True)\napp_data.shape","10434f4a":"# column EXT_SOURCE_3 has got 19.840% of missing values\n# dropping the column as EXT_SOURCE_3 has normalized score from external data source\n# and we can analyse the data through EXT_SOURCE_2\n\napp_data.drop('EXT_SOURCE_3',axis = 1,inplace = True)\napp_data.shape","12eac9ea":"# the housing columns have got around 50% of missing values\n# dropping all those columns\n\napp_data.drop(['APARTMENTS_AVG','BASEMENTAREA_AVG','YEARS_BEGINEXPLUATATION_AVG','YEARS_BUILD_AVG','COMMONAREA_AVG','ELEVATORS_AVG','ENTRANCES_AVG','FLOORSMAX_AVG','FLOORSMIN_AVG','LANDAREA_AVG','LIVINGAPARTMENTS_AVG','LIVINGAREA_AVG','NONLIVINGAPARTMENTS_AVG','NONLIVINGAREA_AVG','APARTMENTS_MODE','BASEMENTAREA_MODE','YEARS_BEGINEXPLUATATION_MODE','YEARS_BUILD_MODE','COMMONAREA_MODE','ELEVATORS_MODE','ENTRANCES_MODE','FLOORSMAX_MODE','FLOORSMIN_MODE','LANDAREA_MODE','LIVINGAPARTMENTS_MODE','LIVINGAREA_MODE','NONLIVINGAPARTMENTS_MODE','NONLIVINGAREA_MODE','APARTMENTS_MEDI','BASEMENTAREA_MEDI','YEARS_BEGINEXPLUATATION_MEDI','YEARS_BUILD_MEDI','COMMONAREA_MEDI','ELEVATORS_MEDI','ENTRANCES_MEDI','FLOORSMAX_MEDI','FLOORSMIN_MEDI','LANDAREA_MEDI','LIVINGAPARTMENTS_MEDI','LIVINGAREA_MEDI','NONLIVINGAPARTMENTS_MEDI','NONLIVINGAREA_MEDI','FONDKAPREMONT_MODE','HOUSETYPE_MODE','TOTALAREA_MODE','WALLSMATERIAL_MODE','EMERGENCYSTATE_MODE'],axis = 1,inplace = True)\napp_data.shape","25905ce6":"#We have an unknown entry in gender, lets make it null\napp_data['CODE_GENDER'].unique()","067b1ecc":"app_data['CODE_GENDER'].replace('XNA',np.NaN,inplace=True)\nprint((app_data['CODE_GENDER'].isnull().sum()\/len(app_data))*100)","86ab051d":"# column AMT_ANNUITY has got 0.004% of missing values\n# We can impute the missing values with the median of the data, since taking credits for all individuals can account massive outliers, hence the annuity payment would be affected too.\n# But for now, we are dropping the rows where values are missing\n\n\napp_data = app_data[~app_data['AMT_ANNUITY'].isnull()]\napp_data['AMT_ANNUITY'].isnull().sum()","08591acb":"# column AMT_GOODS_PRICE has got 0.090% of missing values\n# Again this column has massive outliers, imputing median is a good option\n\napp_data = app_data[~app_data['AMT_GOODS_PRICE'].isnull()]\napp_data['AMT_GOODS_PRICE'].isnull().sum()","526c5689":"# column NAME_TYPE_SUITE has got 0.420% of missing values\n# We can impute the mode, ie. Unaccompanied, but again we are dropping it here\n\napp_data = app_data[~app_data['NAME_TYPE_SUITE'].isnull()]\napp_data['NAME_TYPE_SUITE'].isnull().sum()","eb578161":"# column OCCUPATION_TYPE has got 31.346% of missing values\n# inspecting the column OCCUPATION_TYPE\n\napp_data['OCCUPATION_TYPE'].value_counts()","43953674":"# since column OCCUPATION_TYPE is useful for our analysis\n# imputing the missing values as 'Self employed', #WE ARE IMPUTING because we feel that this variable needs to be present for analysis\n\napp_data['OCCUPATION_TYPE'].fillna(value = 'Self employed',inplace = True)\napp_data['OCCUPATION_TYPE'].value_counts()","46e3a3a9":"# column CNT_FAM_MEMBERS has got 0.001% of missing values\n# dropping the rows with the missing values\n\napp_data = app_data[~app_data['CNT_FAM_MEMBERS'].isnull()]\napp_data['CNT_FAM_MEMBERS'].isnull().sum()","3cac5a96":"# column EXT_SOURCE_2 has got 0.215% of missing values\n# dropping the rows with the missing values\n\napp_data = app_data[~app_data['EXT_SOURCE_2'].isnull()]\napp_data['EXT_SOURCE_2'].isnull().sum()","ee6d698f":"#column CODE_GENDER has got 0.0013% of missing values\n#dropping the rows with the missing values\n\napp_data = app_data[~app_data['CODE_GENDER'].isnull()]\napp_data['CODE_GENDER'].isnull().sum()","b31fb972":"# column OBS_30_CNT_SOCIAL_CIRCLE has got 0.332% of missing values\n# dropping the rows with the missing values\n\napp_data = app_data[~app_data['OBS_30_CNT_SOCIAL_CIRCLE'].isnull()]\napp_data['OBS_30_CNT_SOCIAL_CIRCLE'].isnull().sum()","ab87a115":"# column DEF_30_CNT_SOCIAL_CIRCLE has got 0.332% of missing values\n# dropping the rows with the missing values\n\napp_data = app_data[~app_data['DEF_30_CNT_SOCIAL_CIRCLE'].isnull()]\napp_data['DEF_30_CNT_SOCIAL_CIRCLE'].isnull().sum()","2b179548":"# column OBS_60_CNT_SOCIAL_CIRCLE has got 0.332% of missing values\n# dropping the rows with the missing values\n\napp_data = app_data[~app_data['OBS_60_CNT_SOCIAL_CIRCLE'].isnull()]\napp_data['OBS_60_CNT_SOCIAL_CIRCLE'].isnull().sum()","f00ce8b3":"# column DEF_60_CNT_SOCIAL_CIRCLE has got 0.332% of missing values\n# dropping the rows with the missing values\n\napp_data = app_data[~app_data['DEF_60_CNT_SOCIAL_CIRCLE'].isnull()]\napp_data['DEF_60_CNT_SOCIAL_CIRCLE'].isnull().sum()","0136e506":"# column AMT_REQ_CREDIT_BUREAU_HOUR has got 13.502% of missing values\n# inspecting the column AMT_REQ_CREDIT_BUREAU_HOUR\n\napp_data['AMT_REQ_CREDIT_BUREAU_HOUR'].value_counts()","be081f85":"# since the most number of enquiries to Credit Bureau about the client one hour before application\n# comes out to be 0, imputing the missing values with 0\n\napp_data['AMT_REQ_CREDIT_BUREAU_HOUR'].fillna(value = 0,inplace = True)\napp_data['AMT_REQ_CREDIT_BUREAU_HOUR'].isnull().sum()","2eaaa25d":"# column AMT_REQ_CREDIT_BUREAU_DAY has got 13.502% of missing values\n# inspecting the column AMT_REQ_CREDIT_BUREAU_DAY\n\napp_data['AMT_REQ_CREDIT_BUREAU_DAY'].value_counts()","29517e29":"# since the most number of enquiries to Credit Bureau about the client one day before application\n# comes out to be 0, imputing the missing values with 0\n\napp_data['AMT_REQ_CREDIT_BUREAU_DAY'].fillna(value = 0,inplace = True)\napp_data['AMT_REQ_CREDIT_BUREAU_DAY'].isnull().sum()","a8f30a5f":"# column AMT_REQ_CREDIT_BUREAU_WEEK has got 13.502% of missing values\n# inspecting the column AMT_REQ_CREDIT_BUREAU_WEEK\n\napp_data['AMT_REQ_CREDIT_BUREAU_WEEK'].value_counts()","edba42d1":"# since the most number of enquiries to Credit Bureau about the client one week before application\n# comes out to be 0, imputing the missing values with 0\n\napp_data['AMT_REQ_CREDIT_BUREAU_WEEK'].fillna(value = 0,inplace = True)\napp_data['AMT_REQ_CREDIT_BUREAU_WEEK'].isnull().sum()","9ab43d5a":"# column AMT_REQ_CREDIT_BUREAU_MON has got 13.502% of missing values\n# inspecting the column AMT_REQ_CREDIT_BUREAU_MON\n\napp_data['AMT_REQ_CREDIT_BUREAU_MON'].value_counts()","f4d1d6aa":"# since the most number of enquiries to Credit Bureau about the client one month before application\n# comes out to be 0, imputing the missing values with 0\n\napp_data['AMT_REQ_CREDIT_BUREAU_MON'].fillna(value = 0,inplace = True)\napp_data['AMT_REQ_CREDIT_BUREAU_MON'].isnull().sum()","dbbdb894":"# column AMT_REQ_CREDIT_BUREAU_QRT has got 13.502% of missing values\n# inspecting the column AMT_REQ_CREDIT_BUREAU_QRT\n\napp_data['AMT_REQ_CREDIT_BUREAU_QRT'].value_counts()","491efc8d":"# since the most number of enquiries to Credit Bureau about the client 3 month before application\n# comes out to be 0, imputing the missing values with 0\n\napp_data['AMT_REQ_CREDIT_BUREAU_QRT'].fillna(value = 0,inplace = True)\napp_data['AMT_REQ_CREDIT_BUREAU_QRT'].isnull().sum()","ea2062b0":"# column AMT_REQ_CREDIT_BUREAU_YEAR has got 13.502% of missing values\n# inspecting the column AMT_REQ_CREDIT_BUREAU_YEAR\n\napp_data['AMT_REQ_CREDIT_BUREAU_YEAR'].value_counts()","ac9afe54":"app_data['AMT_REQ_CREDIT_BUREAU_YEAR'].median()","a07595a4":"# since the number of times are heavily focussed around 0,1,2.. times and is skewed towards right, better to go for median\n# comes out to be 1, imputing the missing values with 1\n\napp_data['AMT_REQ_CREDIT_BUREAU_YEAR'].fillna(value = 1,inplace = True)\napp_data['AMT_REQ_CREDIT_BUREAU_YEAR'].isnull().sum()","e05e6275":"#removing the remaining missing values\n\napp_data.dropna(inplace=True)","c2e546f4":"# inspecting the percentage of missing values for all the columns in app_data again\n\nround(100*(app_data.isnull().sum()\/len(app_data.index)),3)[:30]","4ecabec5":"round(100*(app_data.isnull().sum()\/len(app_data.index)),3)[30:72]","d4837f31":"# percentage of rows retained\n\nround(100*(len(app_data.index)\/307511),2)","222b6762":"# inspecting the datatypes of the columns in app_data dataframe\n\napp_data.dtypes[:30]","7c7c542e":"app_data.dtypes[30:72]","040e77fb":"# column DAYS_BIRTH shows client's age in days at the time of application in negative values\n# changing the column DAYS_BIRTH to AGE with the respective age of clients in years\n\napp_data['AGE'] = abs(app_data['DAYS_BIRTH'])\/\/365\napp_data.drop('DAYS_BIRTH',axis = 1,inplace = True)\napp_data['AGE']","c0b947d7":"# column DAYS_EMPLOYED shows how many days before the application the person started current employment in negative values\n# changing the neagtive values to positive values \n\napp_data['DAYS_EMPLOYED'] = abs(app_data['DAYS_EMPLOYED'])\napp_data['DAYS_EMPLOYED']","580621f5":"# column DAYS_REGISTRATION shows how many days before the application did client change his registration in negative values\n# changing the neagtive values to positive values and the datatype to int64\n\napp_data['DAYS_REGISTRATION'] = abs(app_data['DAYS_REGISTRATION'])\napp_data['DAYS_REGISTRATION'] = app_data['DAYS_REGISTRATION'].astype('int64')\napp_data['DAYS_REGISTRATION']","e9084f62":"# column DAYS_ID_PUBLISH shows how many days before the application did client change the identity document with which \n# he applied for the loan in negative values, changing the negative values to positive values\n\napp_data['DAYS_ID_PUBLISH'] = abs(app_data['DAYS_ID_PUBLISH'])\napp_data['DAYS_ID_PUBLISH']","7447d796":"# column FLAG_MOBIL shows whether or not the client provided mobile phone\n# changing the continuous data into categorical data\n\napp_data['FLAG_MOBIL'] = app_data['FLAG_MOBIL'].apply(lambda x: 'Y' if x == 1 else 'N')\napp_data['FLAG_MOBIL'].value_counts()","fc5a50a5":"# column FLAG_EMP_PHONE shows whether or not the client provided work phone\n# changing the continuous data into categorical data\n\napp_data['FLAG_EMP_PHONE'] = app_data['FLAG_EMP_PHONE'].apply(lambda x: 'Y' if x == 1 else 'N')\napp_data['FLAG_EMP_PHONE'].value_counts()","8e015add":"# column FLAG_WORK_PHONE shows whether or not the client provided home phone\n# changing the continuous data into categorical data\n\napp_data['FLAG_WORK_PHONE'] = app_data['FLAG_WORK_PHONE'].apply(lambda x: 'Y' if x == 1 else 'N')\napp_data['FLAG_WORK_PHONE'].value_counts()","be86e729":"# column FLAG_CONT_MOBILE shows whether or not the mobile phone reachable\n# changing the continuous data into categorical data\n\napp_data['FLAG_CONT_MOBILE'] = app_data['FLAG_CONT_MOBILE'].apply(lambda x: 'Y' if x == 1 else 'N')\napp_data['FLAG_CONT_MOBILE'].value_counts()","a5629ed0":"# column FLAG_PHONE shows whether or not the client provided home phone \n# changing the continuous data into categorical data\n\napp_data['FLAG_PHONE'] = app_data['FLAG_PHONE'].apply(lambda x: 'Y' if x == 1 else 'N')\napp_data['FLAG_PHONE'].value_counts()","ce9f5cd4":"# column FLAG_EMAIL shows whether or not the client provided email \n# changing the continuous data into categorical data\n\napp_data['FLAG_EMAIL'] = app_data['FLAG_EMAIL'].apply(lambda x: 'Y' if x == 1 else 'N')\napp_data['FLAG_EMAIL'].value_counts()","ece1b2b3":"# column REG_REGION_NOT_LIVE_REGION shows whether or not the client's permanent address matches contact address (at region level)\n# changing the continuous data into categorical data\n\napp_data['REG_REGION_NOT_LIVE_REGION'] = app_data['REG_REGION_NOT_LIVE_REGION'].apply(lambda x: 'Different' if x == 1 else 'Same')\napp_data['REG_REGION_NOT_LIVE_REGION'].value_counts()","c471a581":"# column REG_REGION_NOT_WORK_REGION shows whether or not the client's permanent address matches work address (at region level)\n# changing the continuous data into categorical data\n\napp_data['REG_REGION_NOT_WORK_REGION'] = app_data['REG_REGION_NOT_WORK_REGION'].apply(lambda x: 'Different' if x == 1 else 'Same')\napp_data['REG_REGION_NOT_WORK_REGION'].value_counts()","f98968c4":"# column LIVE_REGION_NOT_WORK_REGION shows whether or not the client's contact address matches work address (at region level)\n# changing the continuous data into categorical data\n\napp_data['LIVE_REGION_NOT_WORK_REGION'] = app_data['LIVE_REGION_NOT_WORK_REGION'].apply(lambda x: 'Different' if x == 1 else 'Same')\napp_data['LIVE_REGION_NOT_WORK_REGION'].value_counts()","436a43a2":"# column REG_CITY_NOT_LIVE_CITY shows whether or not the client's permanent address matches contact address (at city level)\n# changing the continuous data into categorical data\n\napp_data['REG_CITY_NOT_LIVE_CITY'] = app_data['REG_CITY_NOT_LIVE_CITY'].apply(lambda x: 'Different' if x == 1 else 'Same')\napp_data['REG_CITY_NOT_LIVE_CITY'].value_counts()","ebc9fd21":"# column REG_CITY_NOT_WORK_CITY shows whether or not the client's permanent address matches work address (at city level)\n# changing the continuous data into categorical data\n\napp_data['REG_CITY_NOT_WORK_CITY'] = app_data['REG_CITY_NOT_WORK_CITY'].apply(lambda x: 'Different' if x == 1 else 'Same')\napp_data['REG_CITY_NOT_WORK_CITY'].value_counts()","409022bd":"# column LIVE_CITY_NOT_WORK_CITY shows whether or not the client's contact address matches work address (at city level)\n# changing the continuous data into categorical data\n\napp_data['LIVE_CITY_NOT_WORK_CITY'] = app_data['LIVE_CITY_NOT_WORK_CITY'].apply(lambda x: 'Different' if x == 1 else 'Same')\napp_data['LIVE_CITY_NOT_WORK_CITY'].value_counts()","d422a913":"# column DAYS_LAST_PHONE_CHANGE shows how many days before application did client change phone in negative values\n# changing the neagtive values to positive values and the datatype to int64\n\napp_data['DAYS_LAST_PHONE_CHANGE'] = abs(app_data['DAYS_LAST_PHONE_CHANGE'])\napp_data['DAYS_LAST_PHONE_CHANGE'] = app_data['DAYS_LAST_PHONE_CHANGE'].astype('int64')\napp_data['DAYS_LAST_PHONE_CHANGE']","25323b5b":"# columns FLAG_DOCUMENTs show whether or not client provided the document and there are 20 such columns \n# changing the continuous data into categorical data\n\nfor i in range (2,22):\n    app_data['FLAG_DOCUMENT_{}'.format(i)] = app_data['FLAG_DOCUMENT_{}'.format(i)].apply(lambda x: 'N' if x == 1 else 'Y')","1adcec5e":"# column AMT_REQ_CREDIT_BUREAU_HOUR shows the number of enquiries to Credit Bureau about the client one hour before application\n# changing the datatype to int64\n\napp_data['AMT_REQ_CREDIT_BUREAU_HOUR'] = app_data['AMT_REQ_CREDIT_BUREAU_HOUR'].astype('int64')","2e65f1dd":"# column AMT_REQ_CREDIT_BUREAU_DAY shows the number of enquiries to Credit Bureau about the client one day before application\n# changing the datatype to int64\n\napp_data['AMT_REQ_CREDIT_BUREAU_DAY'] = app_data['AMT_REQ_CREDIT_BUREAU_DAY'].astype('int64')","0c19bc39":"# column AMT_REQ_CREDIT_BUREAU_WEEK shows the number of enquiries to Credit Bureau about the client one week before application\n# changing the datatype to int64\n\napp_data['AMT_REQ_CREDIT_BUREAU_WEEK'] = app_data['AMT_REQ_CREDIT_BUREAU_WEEK'].astype('int64')","006359a2":"# column AMT_REQ_CREDIT_BUREAU_MON shows the number of enquiries to Credit Bureau about the client one month before application\n# changing the datatype to int64\n\napp_data['AMT_REQ_CREDIT_BUREAU_MON'] = app_data['AMT_REQ_CREDIT_BUREAU_MON'].astype('int64')","5d56034f":"# column AMT_REQ_CREDIT_BUREAU_QRT shows the number of enquiries to Credit Bureau about the client 3 months before application\n# changing the datatype to int64\n\napp_data['AMT_REQ_CREDIT_BUREAU_QRT'] = app_data['AMT_REQ_CREDIT_BUREAU_QRT'].astype('int64')","6eb81f59":"# column AMT_REQ_CREDIT_BUREAU_YEAR shows the number of enquiries to Credit Bureau about the client year before application\n# changing the datatype to int64\n\napp_data['AMT_REQ_CREDIT_BUREAU_YEAR'] = app_data['AMT_REQ_CREDIT_BUREAU_YEAR'].astype('int64')","b4c6420b":"# analysing the central tendencies of column AMT_INCOME_TOTAL\n\napp_data['AMT_INCOME_TOTAL'].describe(percentiles = [0.75,0.95,0.99])","0005f319":"# visualizing the column AMT_INCOME_TOTAL\n\nsns.boxplot(y = 'AMT_INCOME_TOTAL',data = app_data,palette = 'pastel')\nplt.yscale('log')","fdf67cde":"# analysing the central tendencies of column AMT_CREDIT\n\napp_data['AMT_CREDIT'].describe(percentiles = [0.75,0.95,0.99])","1a6932d9":"# visualizing the column AMT_CREDIT\n\nsns.boxplot(y = 'AMT_CREDIT',data = app_data,palette = 'pastel')","2278539f":"# analysing the central tendencies of column AMT_ANNUITY\n\napp_data['AMT_ANNUITY'].describe(percentiles = [0.75,0.95,0.99])","1a7404af":"# visualizing the column AMT_ANNUITY\n\nsns.boxplot(y = 'AMT_ANNUITY',data = app_data,palette = 'pastel')","fa4b1c89":"# analysing the central tendencies of column AMT_GOODS_PRICE\n\napp_data['AMT_GOODS_PRICE'].describe(percentiles = [0.75,0.95,0.99])","a62e706d":"# visualizing the column AMT_GOODS_PRICE\n\nsns.boxplot(y = 'AMT_GOODS_PRICE',data = app_data,palette = 'pastel')","98e79a0c":"# analysing the central tendencies of column AGE\n\napp_data['AGE'].describe(percentiles = [0.75,0.95,0.99])","3b450bae":"# visualizing the column AGE\n\nsns.boxplot(y = 'AGE',data = app_data,palette = 'pastel')","19edb973":"print(app_data['AGE'].max())\nprint(app_data['AGE'].min())","97c5392a":"# binning the AGE column into categories\n\napp_data['AGE_GROUP'] = pd.cut(app_data['AGE'],bins = [10,18,25,44,70],labels = ['Young','Young Adult','Adult','Elderly'])\napp_data['AGE_GROUP'].value_counts()","cab8cd55":"# binning the HOUR_APPR_PROCESS_START column into categories\n\napp_data['HOUR_APPR_PROCESS_START'] = pd.cut(app_data['HOUR_APPR_PROCESS_START'],bins = [0,6,12,16,20,23],labels = ['Past Midnight','Morning','Noon','Evening','Night'])\napp_data['HOUR_APPR_PROCESS_START'].value_counts()","a5606b5b":"# checking the imbalance percentage in the app_dataframe\n\nprint('Target 0: {}'.format(round(100*(len(app_data[app_data['TARGET'] == 0])\/len(app_data.index)),2)))\nprint('Target 1: {}'.format(round(100*(len(app_data[app_data['TARGET'] == 1])\/len(app_data.index)),2)))","20561839":"sns.heatmap(app_data.corr())","923fbb9f":"app_data.head()","a5e9d5f0":"# dataset with target variable as 0 (clients who repaid their loan)\n\ntarget_0 = app_data[app_data['TARGET'] == 0]\ntarget_0","c507be1e":"# dataset with target variable as 1 (clients who defaulted on their loan)\n\ntarget_1 = app_data[app_data['TARGET'] == 1]\ntarget_1","42dd5de6":"# analysing the column NAME_CONTRACT_TYPE for target_0 dataset\n\nsns.countplot(x = 'NAME_CONTRACT_TYPE',data = target_0,palette = 'pastel')","41c12819":"app_data['CODE_GENDER'].value_counts()","c8dffbb3":"# analysing the column NAME_CONTRACT_TYPE for target_1 dataset\n\nsns.countplot(x = 'NAME_CONTRACT_TYPE',data = target_1,palette = 'pastel')","9d128e25":"# analysing the column CODE_GENDER for target_0 dataset\n\nsns.countplot(x = 'CODE_GENDER',data = target_0,palette = 'pastel')","e0865a1f":"# analysing the column CODE_GENDER for target_1 dataset\n\nsns.countplot(x = 'CODE_GENDER',data = target_1,palette = 'pastel')","4182dfa5":"# analysing the column FLAG_OWN_CAR for target_0 dataset\n\nsns.countplot(x = 'FLAG_OWN_CAR',data = target_0,palette = 'pastel')","2a30b535":"# analysing the column FLAG_OWN_CAR for target_1 dataset\n\nsns.countplot(x = 'FLAG_OWN_CAR',data = target_1,palette = 'pastel')","81e36b08":"# analysing the column FLAG_OWN_REALTY for target_0 dataset\n\nsns.countplot(x = 'FLAG_OWN_REALTY',data = target_0,palette = 'pastel')","8c7f5bba":"# analysing the column FLAG_OWN_REALTY for target_1 dataset\n\nsns.countplot(x = 'FLAG_OWN_REALTY',data = target_1,palette = 'pastel')","8d181e2f":"# analysing the column CNT_CHILDREN for target_0 dataset\n\nfig = plt.figure(figsize = (12,6))\nsns.countplot(x = 'CNT_CHILDREN',data = target_0,palette = 'pastel')","9c4e773a":"# analysing the column CNT_CHILDREN for target_1 dataset\n\nfig = plt.figure(figsize = (12,6))\nsns.countplot(x = 'CNT_CHILDREN',data = target_1,palette = 'pastel')","05d2b5fe":"# analysing the column NAME_INCOME_TYPE for target_0 dataset\n\nfig = plt.figure(figsize = (12,6))\nsns.countplot(x = 'NAME_INCOME_TYPE',data = target_0,palette = 'pastel')","4ae2c056":"# analysing the column NAME_INCOME_TYPE for target_1 dataset\n\nfig = plt.figure(figsize = (12,6))\nsns.countplot(x = 'NAME_INCOME_TYPE',data = target_1,palette = 'pastel')","690e4f08":"# analysing the column NAME_EDUCATION_TYPE for target_0 dataset\n\nfig = plt.figure(figsize = (12,6))\nsns.countplot(x = 'NAME_EDUCATION_TYPE',data = target_0,palette = 'pastel')","a1e68edf":"# analysing the column NAME_EDUCATION_TYPE for target_1 dataset\n\nfig = plt.figure(figsize = (12,6))\nsns.countplot(x = 'NAME_EDUCATION_TYPE',data = target_1,palette = 'pastel')","6269cc7d":"# analysing the column NAME_FAMILY_STATUS for target_0 dataset\n\nfig = plt.figure(figsize = (12,6))\nsns.countplot(x = 'NAME_FAMILY_STATUS',data = target_0,palette = 'pastel')","943905df":"# analysing the column NAME_FAMILY_STATUS for target_1 dataset\n\nfig = plt.figure(figsize = (12,6))\nsns.countplot(x = 'NAME_FAMILY_STATUS',data = target_1,palette = 'pastel')","0ba3e915":"# analysing the column NAME_HOUSING_TYPE for target_0 dataset\n\nfig = plt.figure(figsize = (12,6))\nsns.countplot(x = 'NAME_HOUSING_TYPE',data = target_0,palette = 'pastel')","f0b6a101":"# analysing the column NAME_HOUSING_TYPE for target_1 dataset\n\nfig = plt.figure(figsize = (12,6))\nsns.countplot(x = 'NAME_HOUSING_TYPE',data = target_1,palette = 'pastel')","6db25b46":"# analysing the column FLAG_MOBIL for app_data dataset\n\nfig = plt.figure(figsize = (12,6))\nsns.countplot(x = 'FLAG_MOBIL',hue = 'TARGET',data = app_data,palette = 'pastel')","a317fa8f":"# analysing the column FLAG_EMP_PHONE for app_data dataset\n\nfig = plt.figure(figsize = (12,6))\nsns.countplot(x = 'FLAG_EMP_PHONE',hue = 'TARGET',data = app_data,palette = 'pastel')","d1e02471":"# analysing the column FLAG_WORK_PHONE for app_data dataset\n\nfig = plt.figure(figsize = (12,6))\nsns.countplot(x = 'FLAG_WORK_PHONE',hue = 'TARGET',data = app_data,palette = 'pastel')","35a4b072":"# analysing the column FLAG_CONT_MOBILE for app_data dataset\n\nfig = plt.figure(figsize = (12,6))\nsns.countplot(x = 'FLAG_CONT_MOBILE',hue = 'TARGET',data = app_data,palette = 'pastel')","ac434edc":"# analysing the column FLAG_EMAIL for app_data dataset\n\nfig = plt.figure(figsize = (12,6))\nsns.countplot(x = 'FLAG_EMAIL',hue = 'TARGET',data = app_data,palette = 'pastel')","83cacfcf":"# analysing the column OCCUPATION_TYPE for target_0 dataset\n\nfig = plt.figure(figsize = (12,10))\nsns.countplot(y = 'OCCUPATION_TYPE',data = target_0,palette = 'pastel')\nplt.tight_layout()","d0a25abd":"# analysing the column OCCUPATION_TYPE for target_1 dataset\n\nfig = plt.figure(figsize = (12,10))\nsns.countplot(y = 'OCCUPATION_TYPE',data = target_1,palette = 'pastel')\nplt.tight_layout()","a06eb9b0":"# analysing the column CNT_FAM_MEMBERS for target_0 dataset\n\nfig = plt.figure(figsize = (12,8))\nsns.countplot(x = 'CNT_FAM_MEMBERS',data = target_0,palette = 'pastel')\nplt.tight_layout()","08c1dc3d":"# analysing the column CNT_FAM_MEMBERS for target_1 dataset\n\nfig = plt.figure(figsize = (12,8))\nsns.countplot(x = 'CNT_FAM_MEMBERS',data = target_1,palette = 'pastel')\nplt.tight_layout()","f156f458":"# analysing the FLAG_DOCUMENTs columns for the app_data\n\nfor i in range(2,22):\n    sns.countplot(x = 'FLAG_DOCUMENT_{}'.format(i),hue = 'TARGET',data = app_data,palette = 'pastel')\n    plt.show()","4e96c100":"# analysing the column AGE for target_0\n\nfig = plt.figure(figsize = (10,8))\nsns.countplot(x = 'AGE_GROUP',data = target_0,palette = 'pastel')\nplt.tight_layout()","836f0f35":"# analysing the column AGE for target_1\n\nfig = plt.figure(figsize = (10,8))\nsns.countplot(x = 'AGE_GROUP',data = target_1,palette = 'pastel')\nplt.tight_layout()","d53d37cd":"# analysing the column AMT_INCOME_TOTAL for target_0 dataset\n\nsns.distplot(target_0['AMT_INCOME_TOTAL'])\nplt.xscale('log')","ae934837":"# analysing the column AMT_INCOME_TOTAL for target_1 dataset\n\nsns.distplot(target_1['AMT_INCOME_TOTAL'])\nplt.xscale('log')","ee91a3f2":"# analysing the column AMT_CREDIT for target_0\n\nsns.distplot(target_0['AMT_CREDIT'])","d50a3b27":"# analysing the column AMT_CREDIT for target_1\n\nsns.distplot(target_1['AMT_CREDIT'])","2aa7f015":"# analysing the column AMT_ANNUITY for target_0\n\nsns.distplot(target_0['AMT_ANNUITY'])","e328b2af":"# analysing the column AMT_ANNUITY for target_1\n\nsns.distplot(target_1['AMT_ANNUITY'])","ac7948d3":"# analysing the column AMT_GOODS_PRICE for target_0\n\nsns.distplot(target_0['AMT_GOODS_PRICE'])","d545636e":"# analysing the column AMT_GOODS_PRICE for target_1\n\nsns.distplot(target_0['AMT_GOODS_PRICE'])","0f8ecee0":"# analysing the column REGION_POPULATION_RELATIVE for target_0\n\nsns.distplot(target_0['REGION_POPULATION_RELATIVE'])","47e065cb":"# analysing the column REGION_POPULATION_RELATIVE for target_1\n\nsns.distplot(target_1['REGION_POPULATION_RELATIVE'])","afc739e3":"# analysing the column DAYS_EMPLOYED for target_0\n\nsns.distplot(target_0['DAYS_EMPLOYED'])","9a073a65":"# analysing the column DAYS_EMPLOYED for target_1\n\nsns.distplot(target_1['DAYS_EMPLOYED'])","4e4cb6b3":"# analysing the columns AMT_INCOME_TOTAL and AMT_CREDIT for target_0\n\nfig = plt.figure(figsize = (10,6))\nsns.scatterplot(y = 'AMT_INCOME_TOTAL',x = 'AMT_CREDIT',data = target_0)\nplt.tight_layout()","baf7861a":"# analysing the columns AMT_INCOME_TOTAL and AMT_CREDIT for target_1\n\nfig = plt.figure(figsize = (10,6))\nsns.scatterplot(y = 'AMT_INCOME_TOTAL',x = 'AMT_CREDIT',data = target_1)\nplt.tight_layout()","50ecaf09":"# analysing the columns AMT_INCOME_TOTAL and AMT_ANNUITY for target_0\n\nfig = plt.figure(figsize = (10,6))\nsns.scatterplot(y = 'AMT_INCOME_TOTAL',x = 'AMT_ANNUITY',data = target_0)\nplt.tight_layout()","88a203c2":"# analysing the columns AMT_INCOME_TOTAL and AMT_ANNUITY for target_1\n\nfig = plt.figure(figsize = (10,6))\nsns.scatterplot(y = 'AMT_INCOME_TOTAL',x = 'AMT_ANNUITY',data = target_1)\nplt.tight_layout()","aae3ca78":"plt.figure(figsize=(40,20))\nsns.set_context(\"paper\", font_scale=5)\nsns.boxplot(x='AGE_GROUP',y='AMT_CREDIT',hue='TARGET',data=app_data,whis=1.5)","9d24a305":"plt.figure(figsize=(20,15))\nsns.set_context(\"paper\", font_scale=1.5)\nsns.catplot(x=\"AGE_GROUP\", hue=\"TARGET\", kind=\"count\", data=app_data)\nplt.show()","6006b8e7":"plt.figure(figsize=(10,7))\nsns.boxplot(x='TARGET',y='EXT_SOURCE_2',data = app_data,whis=1.5)\nplt.show()","0881e693":"plt.figure(figsize=(15,10))\nsns.countplot(x = 'NAME_HOUSING_TYPE',hue = 'TARGET',data = app_data,palette = 'pastel')\nplt.show()","553f545c":"prev_data.head()","467b88fc":"prev_data.info()","74074f75":"prev_data.shape","0bb952e9":"(prev_data.isnull().sum()*100\/len(prev_data)).sort_values(ascending=False).head(60)","516ce314":"#dropping the columns with high percentage values\n\nprev_data.drop(['RATE_INTEREST_PRIVILEGED','RATE_INTEREST_PRIMARY','RATE_DOWN_PAYMENT','AMT_DOWN_PAYMENT','NAME_TYPE_SUITE','DAYS_TERMINATION','NFLAG_INSURED_ON_APPROVAL','DAYS_FIRST_DUE','DAYS_FIRST_DRAWING','DAYS_LAST_DUE_1ST_VERSION','DAYS_LAST_DUE'],axis=1,inplace=True)","6e7f85f7":"#Make the unknown entry as null value and then removing the rows with missing values\n\nprev_data['NAME_CLIENT_TYPE'].replace('XNA',np.NaN,inplace=True)\nprev_data['NAME_CLIENT_TYPE'].isnull().sum()","b7ede131":"prev_data = prev_data[~prev_data['NAME_CLIENT_TYPE'].isnull()]\nprev_data['NAME_CLIENT_TYPE'].isnull().sum()","030d7166":"prev_data.head()","7e914d2d":"plt.figure(figsize=(20,15))\nsns.set_context(\"paper\", font_scale=1)\nsns.catplot(x=\"NAME_CONTRACT_STATUS\", hue=\"NAME_CLIENT_TYPE\", kind=\"count\", data=prev_data)\nplt.show()","8e4b4297":"new_group = prev_data[['SK_ID_CURR','SK_ID_PREV']].groupby(by=['SK_ID_CURR'])['SK_ID_PREV'].count().reset_index().rename(columns={'SK_ID_PREV':'PREV_APP_COUNT'})\nnew_group.head()","5dff6008":"#Now merging the data set on app_data's current ID\nmerged_df = app_data.merge(new_group, on =['SK_ID_CURR'], how = 'left')\nmerged_df.head()","dd0d9cef":"#Removing the null values if present in the new column\nmerged_df['PREV_APP_COUNT'] = merged_df['PREV_APP_COUNT'].fillna(0)","cb73a2db":"sns.distplot(merged_df['PREV_APP_COUNT'])","abcadca0":"#Lets aggregate the numerical variables like mean for a given single applicant. \n#P.s- Categorical variables can be pre-processed with techniques like One hot, for variables like contract_status and then merged with app_data by mean() but for now we have merged continuous data\n\nnew_group = prev_data.drop('SK_ID_PREV', axis =1).groupby(by=['SK_ID_CURR']).mean().reset_index()\nprev_columns = ['PREV_'+column if column != 'SK_ID_CURR' else column for column in new_group.columns ]\nnew_group.columns = prev_columns\nmerged_df = merged_df.merge(new_group, on =['SK_ID_CURR'], how = 'left')\nmerged_df.head()\n","7452bcb3":"(merged_df.isnull().sum()*100\/len(merged_df)).sort_values(ascending=False).head(60)","69a7539d":"#Lets drop the rows with missing values  ,current shape of dataframe = 304531, 83\nmerged_df.dropna(inplace=True)","c7b85d4d":"#retained rows in the dataset\n\n(len(merged_df)\/304531)*100","a07eb36a":"merged_df.head()","094c0cf9":"#check if the merge is correct\n#We know sk_id_curr- 100003 has applied 2 times in the past from the above dataframe, Lets check\n\nprev_data[prev_data['SK_ID_CURR']==100003]","60bdf214":"#turning the days into positive\n\nmerged_df['PREV_DAYS_DECISION'] = abs(merged_df['PREV_DAYS_DECISION'])","d8a11d17":"#4 is the average number of times people have applied in the past\n\nsns.distplot(merged_df['PREV_APP_COUNT'])","69101715":"sns.heatmap(merged_df.corr())","babdcb36":"sns.catplot(x=\"TARGET\", y=\"PREV_APP_COUNT\",hue='CODE_GENDER',  data=merged_df)","6d265aaa":"plt.figure(figsize=(10,7))\nsns.boxplot(x='TARGET',y='PREV_DAYS_DECISION',hue='CODE_GENDER',data = merged_df,whis=1.5)\nplt.show()","32290fa5":"plt.figure(figsize=(11,7))\nsns.lmplot(y='PREV_AMT_CREDIT',x='AMT_CREDIT',data=merged_df,hue='CODE_GENDER',\n           col='TARGET',palette='Set1')","c31c137b":"## Business Objective\n\nThe company wants to ensure that the applicants capable of repaying the loan are not rejected. We have to identify patterns which indicate if a client has difficulty paying their installments. This will ensure that the consumers capable of repaying theie loan are not rejected. We have to understand the driving factors behind loan default, i.e. the variables which are strong indicators of default.","46636580":"Analysing the above plot one can infer that most of the clients who repaid their loan applied for Cash loans.","dc0b49cc":"Here the spread of values in the AMT_ANNUITY column which shows loan annuity is upto 250000. Here we can clearly see some extreme values present which may be treated as outlier values.","0122e53a":"We see most of the adults opt for loan and taking the proportion, they default the most too.","485bb8b6":"We can see , most of the clients have applied the application 4 times","6e2b6312":"Let's group by customer ID and count their number of applications in the past","e0fa78bc":"Here the data points for the clients who repaid their loan are mostly clustered between 0 and 150000 with some outlier values present.","1f709632":"Again, the spread of the credit amount for clients who defaulted on their loan is mostly spread out between 0 and 1500000.","c8f4d85b":"First we clean the data","c84b9bb2":"One interesting observation, if number of past loan application is less than say 30, theres a chance he\/she might default specially female category","b4d6d63b":"Obviously there is correlation between the credit and goods price Days employed and credit score from source 2 shows some relation, similarly Age shows relation with days employed","b9374736":"Though the number clients applying for Cash loans is huge, analysing the above plot one can infer that clients applying for Cash loans are more likely to default as compared to the clients applying for Revolving loans.","4b278b60":"Analysing the above plot one can infer that most of the clients who repaid their loan own a realty.","7b744930":"Lets import the files required to read from google drive\nThere are two data sets:\napp_data : Contains the loan application of the customers\nprev_data: Contains the past loan applications of the existing customers","c3d9744d":"Here one can infer that clients who repaid their loan are mostly either **Self employed** or **Laborers** or from **Sales staff**.","495bcace":"Some major variables detected - Age, credit amount, candidate's assets, document 3 submissions, credit score 2, gender and number of past applications","f991af16":"The normalised population for the clients who repaid their loan is spread out between 0 and 0.05 with some outlier values present around 0.07.","885fb557":"Analysing the above plot one can infer that the clients who provided email have a very low default rate.","1136e3d3":"The price of the goods for the clients who defaulted on their loan is spread out between 0 and 1500000 with some outlier values present. Here we cannot make a strong inference as to which client is more likely to default.","0cf7988b":"## Analysing the app_data\n\n**1. Checking if there is data imbalance in the data.**","1916e3a3":"Since each client has provided the mobile phone we cannot infer much from above plot.","6cb4c6bb":"Here the data spread in the **AMT_CREDIT** column which shows the credit amount of the loan is upto 4000000. Here the extreme values may be treated as outlier values.","9d8c941a":"Here the data points for the clients who repaid their loan are mostly clustered between 0 and 2500000 with some outlier values present.","5429566e":"**3. Performing univariate analysis for both the target_0 and target_1 columns.**","25628637":"**2. Dividing the dataframe into two datasets.**","dfe3cc77":"Here, clients who have not provided the work phone have very low default rate.","27f3a44d":"Here again, the spread of values in the AMT_GOODS_PRICE column which shows the price of the goods for which loan is given is upto 4000000. Here we can clearly see some extreme values present which may be treated as outlier values.","ea20d47e":"Here one can infer that most of the clients who repaid their loan have income of the order of 10^5 to 10^6.","a513b8da":"**1.1 Checking the correlation of the major numerical variables**","e52fec33":"Here one can infer that clients who do own a realty are more likely to default on their loan as compared to the clients who do not own a realty.","b469d42e":"**5. Inspecting outliers for the numerical columns in the app_data dataframe.**","c96f0535":"Here again there isn't any obvious trend as the number of default cases are in proportion to the number of clients who repaid their loan.","4d80d9c9":"# Analysis of the merged frame\n","4baa26cc":"The credit amount of the clients who repaid their loan is mostly spread out between 0 and 1500000.","7584f3b3":"Here again the data points for the clients who defaulted on their loan are mostly clustered between 0 and 2500000, but with very few outlier values present. Here we can clearly see a straight line indicating that the clients who defaulted on their loan have similar income but varying credit amount.","b8f65376":"Clients who repaid their loan mostly have their own house or apartment.","d4180941":"## Cleaning the dataframe app_data\n\n**1. Inspecting the percentage of missing values for all the columns in app_data dataframe.**","f58c30df":"## Business Understanding\n\nWhen a client applies for a loan, there are four types of decisions that could be taken by the (client\/company):\n* Approved: The Company has approved loan Application.\n* Cancelled: The client cancelled the application sometime during approval.\n* Refused: The company has rejected the loan.\n* Unused offer:  Loan has been cancelled by the client but on different stages of the process.\n\nTwo types of risks associated with the company\u2019s decision are:\n* If the applicant is likely to repay the loan, then not approving the loan results in a loss of business to the company.\n* If the applicant is not likely to repay the loan, i.e. he\/she is likely to default, then approving the loan may lead to a financial loss for the company.\n\nIn one case the company loses the interest amount and in other case the company loses the principal amount.","2e9db0b6":"As most of the clients who defaulted on their loan do not own a car, one can infer that the client owning a car does not have any effect on the default rate.","af79c9e0":"The clients who repaid their loan mostly have 2 family members or 1 family member.","16d5298f":"Median and spread almost same, hence day of last application holds no importance","651856f3":"Here again there isn't any obvious trend as the number of default cases are in proportion to the number of clients who repaid their loan.","35babfaf":"Here the url1 and url2 are the shared links of the data stored in Gdrive\n","82ba607a":"The price of the goods for the clients who repaid their loan is mostly spread out between 0 and 1500000.","a3fb1571":"As the clients having a secondary level or higher level of education are the ones who repaid their loan the most, it is obvious that they have high cases of default as compared to the other categories. Besides that, people with higher education are needed to be given attention.","72db5247":"Clients who repaid their loan are mostly married.","e5461e46":"**4. Performing bivariate analysis for both the target_0 and target_1 columns.**","3dac5b1f":"Here again there isn't any obvious trend.","24b9921b":"The credit line estimation needs to be given importance, as most of the repeat customers are cancelling the process. The most of business always comes from repetative purchases, thus here repeating customers are being rejected from the system.","fcd80b05":"**2. Removing columns with high percentage of missing values.**","f04d7a65":"The normalised population for the clients who defaulted on their loan is spread out between 0 and 0.05 with some outlier values present around 0.07 which is pretty much the same as the clients who repaid their loan.","03f3ab0e":"**4. Checking the datatypes of all the columns in app_data.**","d6f27cd6":"MERGING THE DATASETS","74158e81":"## Importing the libraries.","895a3c94":"Here we can infer that clients having a secondary level or a higher level of education are the ones who repaid their loan the most.","7852221e":"Here again the data points for the clients who defaulted on their loan are mostly clustered between 0 and 100000, but with very few outlier values present. Here we can clearly see a straight line indicating that the clients who defaulted on their loan have similar income but varying annuity amount.","12de4c98":"No major change is being observed from average past credit amount to present application's amount in both the cases. Hence previous loan amount can't decide if the candidate is going to default.","dc8c0fe6":"**6. Binning of continuous variables in the app_data dataframe.**","0cd0393e":"Analysing the above plot one can infer that most of the clients who repaid their loan have no children.","8e454d1f":"Analysing the above plot one can infer that most of the clients who repaid their loan were females.","49724456":"The AGE column is evenly spread out with no outlier values present. The age of the clients varies from 20 to 69.","dc2899f8":"The income of the clients who defaulted on their loan is evenly spread out between the order of 10^5 to 10^8.","baec8b30":"Here again, the clients who have defaulted on their loan are in proportion to the number of clients who repaid their loan.","a343a337":"Just data proportion. There seems no linkage between taking loans and housing type.","bcd874ea":"# Working on Previous_application","f64387df":"Here one can infer that the number of children a client has does not have any effect on clients defaulting on their loan.","92c1bc2c":"The data spread of the column DAYS_EMPLOYED for the clients who defaulted on their loan is pretty much the same as that of the clients who repaid their loan with some outlier values present at 350000.","ad428b14":"The annuity amount of the loans for the clients who repaid their loan is spread out between 0 and 75000.","77298f17":"Clients who repaid their loan are mostly either **Adults** or **Elderly**.","99484c03":"Though the number of females applying for the loan is huge, analysing the above plot one can infer that females are more likely to default on the loan as compared to males.","d8ecf177":"Here the number of clients who defaulted on their loan are in proportion to the number of clients who repaid their loan.","1173ab6b":"Again the clients who defaulted on their loan are in proportion to the clients who repaid their loan.","5611fff2":"Almost every client's mobile phone was reachable.","a6cd59e8":"As we can clearly see the **Working professionals** and the **Commercial associates** are the ones who repaid their loan the most.","70b6e36b":"Analysing the above plot one can infer that most of the clients who repaid their loan do not own a car.","24ddfac8":"Here we can clearly see that the clients who provided the FLAG_DOCUMENT_3 have a very low default rate.","23413799":"The clients who repaid their loan have got the number of days employed spread out between 0 and 25000 with some outlier values present at around 350000.","2fd73071":"Here again the loan defaults are in proportion to the clients who repaid their loan.","954512c0":"**3. Now for the columns with less percentage of missing values, we have to ensure what will be the best metric to impute those missing values.**","b335d4d7":"Just a credit spread across the age groups. We see the credit amount increase with the age group","662c3091":"We can see people with score from 0.42 to 0.68 with median around 0.58 had no problems in repaying while score in range 0.23 to 0.59 have a problem in paying. The median score for defaulters is around 0.45 and the spread is larger below the median. Hence most of the defaulters fall below 0.45.","88261102":"The annuity amount of the loans for the clients who defaulted on their loan is spread out between 0 and 60000 which is less as compared to the clients who repaid their loan. Here one can infer that the clients who have a less loan annuity amount are more likely to default on their loan.","4dd97486":"Here we can clearly see the presence of an outlier in the **AMT_INCOME_TOTAL** column which shows the income of a client. The presence of the outlier may be because of the varying income of clients, for instance, a CEO's salary may be way higher than that of a normal IT employee.","c334b66f":"## Inspecting the dataframe app_data\n\n**Inspecting the dataframe's columns, shapes, variable types etc.**"}}