{"cell_type":{"ad911d5d":"code","ebab62ac":"code","b3125860":"code","00e9d2c6":"code","aaa5cc78":"code","606a5369":"code","0cf98d34":"code","91b6aefd":"code","d1736fb2":"code","69f5216f":"code","a2558701":"code","ff07c618":"code","78430e88":"code","ce61a7d6":"code","9317b63f":"code","fc50b0f7":"code","56802741":"code","25bf914f":"code","1cde6c39":"code","cef5a298":"code","b28abc25":"code","283d7a4c":"code","194b294e":"code","c477276a":"code","9cad3246":"code","11b82a62":"code","dd975f05":"code","89e1bbe0":"code","8cedb778":"code","aca48f16":"code","5d89390f":"code","abb57253":"code","ae4ef279":"markdown","a5dd4d5e":"markdown","e80f911e":"markdown","a38869fc":"markdown","5f92a0cc":"markdown","70f5be9e":"markdown","8be06ba4":"markdown"},"source":{"ad911d5d":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np","ebab62ac":"df= pd.read_csv('..\/input\/telecom-users-dataset\/telecom_users.csv')\ndf.head()","b3125860":"df.shape","00e9d2c6":"df.describe()","aaa5cc78":"df.columns","606a5369":"df.info()","0cf98d34":"df.isna().sum()","91b6aefd":"df.drop(columns= ['Unnamed: 0', 'customerID'], inplace= True)","d1736fb2":"sns.set_palette('YlOrRd')\nsns.set_style('whitegrid')\n\nfig= plt.figure(figsize= (12,5))\n\nfig.add_subplot(1,2,1)\nplt.pie(df.gender.value_counts(), labels=df.gender.value_counts().index, autopct= '%1.2f%%', startangle= 90)\nplt.title('Gender', fontsize= 20)\n\nfig.add_subplot(1,2,2)\nax= plt.pie(df.SeniorCitizen.value_counts(), labels= ['Not Retired', 'Retired'], autopct= '%1.2f%%', startangle= 90)\nplt.title('Senior Citizen', fontsize= 16)","69f5216f":"plt.pie(df.Churn.value_counts(), labels= df.Churn.value_counts().index, autopct= '%1.2f%%', startangle= 90)\nplt.title('Churn', fontsize= 16)","a2558701":"fig= plt.figure(figsize= (14,5))\n\nfig.add_subplot(1,2,1)\nax= sns.countplot(df.gender, hue= df.Churn)\n\nfig.add_subplot(1,2,2)\nax= sns.countplot(df.SeniorCitizen, hue= df.Churn)\nax.set_xticklabels(['Not Retired', 'Retired'])","ff07c618":"fig= plt.figure(figsize= (16,5))\n\nfig.add_subplot(1,2,1)\nax= sns.countplot(df.SeniorCitizen, hue= df.PhoneService)\nax.set_xticklabels(['Not Retired', 'Retired'])\n\nfig.add_subplot(1,2,2)\nax= sns.countplot(df.SeniorCitizen, hue= df.InternetService)\nax.set_xticklabels(['Not Retired', 'Retired'])","78430e88":"plt.figure(figsize= (10,5))\nsns.histplot(df.tenure, bins= 70, kde= True)\nplt.title('Tenure', fontsize= 16)","ce61a7d6":"for i in df.columns:\n    print('Unique values in ',i,' are: ',df[i].unique())\n    print('-'*100)","9317b63f":"df = df.replace('Female', 0)\ndf = df.replace('Male', 1)\ndf = df.replace('No', 0)\ndf = df.replace('Yes', 1)\ndf = df.replace('No internet service', 2)\ndf = df.replace('No phone service', 2)\ndf = df.replace('Fiber optic', 1)\ndf = df.replace('DSL', 2)\ndf = df.replace('Two year', 24)\ndf = df.replace('Month-to-month', 1)\ndf = df.replace('One year', 12)\ndf = df.replace('Credit card (automatic)', 0)\ndf = df.replace('Bank transfer (automatic)', 1)\ndf = df.replace('Electronic check', 2)\ndf = df.replace('Mailed check', 3)","fc50b0f7":"for i in df.columns:\n    print('Unique values in ',i,' are: ',df[i].unique())\n    print('-'*100)","56802741":"df.dtypes","25bf914f":"df['TotalCharges'] = df['TotalCharges'].replace(' ', 0)\ndf['TotalCharges'] = df['TotalCharges'].astype(float)\ndf.dtypes","1cde6c39":"df.head()","cef5a298":"corr= df.corr()\n\nplt.figure(figsize= (16,10))\nsns.heatmap(corr, cmap= 'YlOrRd', annot= True, linewidths= 1)\nplt.title('Correlation Matrix', fontsize= 16)","b28abc25":"from sklearn.model_selection import cross_val_score, GridSearchCV, KFold, train_test_split\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix, ConfusionMatrixDisplay\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom sklearn.neighbors import KNeighborsClassifier","283d7a4c":"y= df.Churn\nx= df[['gender', 'SeniorCitizen', 'Partner',\n       'Dependents', 'tenure', 'PhoneService', 'MultipleLines',\n       'InternetService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection',\n       'TechSupport', 'StreamingTV', 'StreamingMovies', 'Contract',\n       'PaperlessBilling', 'PaymentMethod', 'MonthlyCharges', 'TotalCharges']]\n\nprint(y.shape)\nx.shape","194b294e":"x_train, x_test, y_train, y_test= train_test_split(x, y, test_size= 0.3, stratify= y, random_state= 1234)","c477276a":"models= []\n\nmodels.append(('Logistic', LogisticRegression()))\nmodels.append(('SVC', SVC()))\nmodels.append(('RandomForest', RandomForestClassifier()))\nmodels.append(('AdaBoost', AdaBoostClassifier()))\nmodels.append(('KNeighbors', KNeighborsClassifier()))\nmodels","9cad3246":"import warnings\nwarnings.simplefilter(\"ignore\")\n\nnum_folder= 10\nscoring= 'accuracy'\n\nresults= []\nnames= []\n\nfor name, model in models:\n    modelo= model\n    kfold= KFold(n_splits= num_folder, shuffle= True, random_state= 1234)\n    cv_results= cross_val_score(estimator= modelo, X= x_train, y= y_train, scoring= scoring, cv= kfold)*100\n    results.append(cv_results)\n    names.append(name)\n    mean= cv_results.mean()\n    std= cv_results.std()\n    print('{:18} : Accuracy {:.2f}% - Std {:.2f}%'.format(name, mean, std))","11b82a62":"fig, ax = plt.subplots()\nax= fig.add_subplot()\nplt.boxplot(results, labels= names)\nfig.set_size_inches(10,5)\nplt.suptitle('Models Comparisons', fontsize= 16)","dd975f05":"pipelines= []\n\npipelines.append(('ScalerLogistic', Pipeline([('Scaler', StandardScaler()), ('Logistic', LogisticRegression())])))\npipelines.append(('ScalerSVC', Pipeline([('Scaler', StandardScaler()), ('SVC', SVC())])))\npipelines.append(('ScalerRandomForest', Pipeline([('Scaler', StandardScaler()), ('RandomForest', RandomForestClassifier())])))\npipelines.append(('ScalerAdaBoost', Pipeline([('Scaler', StandardScaler()), ('AdaBoost', AdaBoostClassifier())])))\npipelines.append(('ScalerKNeighbors', Pipeline([('Scaler', StandardScaler()), ('KNeighbors', KNeighborsClassifier())])))\npipelines","89e1bbe0":"num_folder= 10\nscoring= 'accuracy'\n\nresults= []\nnames= []\n\nfor name, model in pipelines:\n    kfold= KFold(n_splits= num_folder, shuffle= True, random_state= 1234)\n    modelo= model\n    cv_results= cross_val_score(estimator= modelo, X= x_train, y= y_train, cv= kfold, scoring= scoring)*100\n    results.append(cv_results)\n    names.append(name)\n    mean= cv_results.mean()\n    std= cv_results.std()\n    print('{:20} : Accuracy {:.2f}% - Std {:.2f}%'.format(name, mean, std))","8cedb778":"fig, ax = plt.subplots()\nax= fig.add_subplot()\nplt.boxplot(results, labels= names)\nfig.set_size_inches(10,5)\nplt.suptitle('Models Comparisons', fontsize= 16)","aca48f16":"num_folder= 10\nscoring= 'accuracy'\n\nc_values= [0.1, 0.5, 1, 1.5, 2]\nsolver_values= ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga']\nmax_iter_values= [50, 100, 150, 200]\nmulti_class_values= ['auto', 'ovr', 'multinomial']\nparam_values= dict(C= c_values, solver= solver_values, max_iter= max_iter_values, multi_class= multi_class_values)\n\n\nmodel= LogisticRegression(random_state= 1234)\nkfold= KFold(n_splits= num_folder, shuffle= True, random_state= 1234)\ngrid= GridSearchCV(estimator= model, param_grid= param_values, scoring= scoring, cv= kfold)\ngrid_result= grid.fit(x_train, y_train)\n\nprint('Best : Accuracy {:.2f}% , Parameters {}'.format(grid_result.best_score_*100, grid_result.best_params_))","5d89390f":"model = LogisticRegression(C= 2, max_iter= 150, multi_class= 'auto', solver= 'lbfgs')\nmodel.fit(x_train, y_train)\ny_pred= model.predict(x_test)","abb57253":"print(\"Classification Report:\\n\", classification_report(y_test, y_pred, digits=4))\n\nprint(\"Accuracy: {:.2f}%\\n\".format(accuracy_score(y_test, y_pred)*100))\n\n\ncm= confusion_matrix(y_test, y_pred)\nlabels= ['No', 'Yes']\ncmd= ConfusionMatrixDisplay(cm, display_labels= labels)\ncmd.plot( cmap='YlOrRd')\nplt.title('Confusion Matrix', fontsize= 14)\nplt.show()\n\n# Porcentagem\ncm= confusion_matrix(y_test, y_pred, normalize= 'true')\nlabels= ['No', 'Yes']\ncmd= ConfusionMatrixDisplay(cm, display_labels= labels)\ncmd.plot( cmap='YlOrRd')\nplt.title('Confusion Matrix - %', fontsize= 14)\nplt.show()","ae4ef279":"## Machine Learning","a5dd4d5e":"## Data Visualization","e80f911e":"### Scaling models with Pipeline","a38869fc":"### Chosen Model : LogisticRegression","5f92a0cc":"## Transforming Data","70f5be9e":"### Comparing 5 models","8be06ba4":"## Importing and  Data Analysis"}}