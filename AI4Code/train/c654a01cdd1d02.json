{"cell_type":{"0b1779f7":"code","8312872e":"code","797e3ee5":"code","a12dd19b":"code","c62d9b6d":"code","08fa3f8a":"code","e20a05fc":"code","6cb78dea":"code","d50bd712":"code","dc64b1fb":"code","15ceb30d":"code","37ee4244":"code","1156e670":"code","73f4ca6d":"code","899b7d6c":"code","17eaae79":"markdown"},"source":{"0b1779f7":"!pip install -qq tensorflow_hub\nimport tensorflow as tf\nimport tensorflow_hub as hub\n# Create graph and finalize (finalizing optional but recommended).\ng = tf.Graph()\nwith g.as_default():\n    # We will be feeding 1D tensors of text into the graph.\n    text_input = tf.placeholder(dtype=tf.string, shape=[None])\n    embed = hub.Module('https:\/\/tfhub.dev\/google\/nnlm-en-dim50-with-normalization\/1')\n    embedded_text = embed(text_input)\n    init_op = tf.group([tf.global_variables_initializer(), tf.tables_initializer()])\ng.finalize()\nsession = tf.Session(graph=g)\nsession.run(init_op)\nen_embed = lambda word_vec: session.run(embedded_text, feed_dict={text_input: word_vec})","8312872e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('ggplot')","797e3ee5":"papers_df = pd.read_csv(os.path.join('..\/input\/', 'uzh_papers.csv'))\npapers_df['citedby-count'].hist()\npapers_df.sample(3)","a12dd19b":"papers_df['timecode'] = pd.to_datetime(papers_df['prism:coverDate'])\npapers_df['years_elapsed'] = (papers_df['timecode']-papers_df['timecode'].min()).dt.total_seconds()\/(3600*24)\/365.25\npapers_df['years_elapsed'].hist()","c62d9b6d":"from sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer(\n    max_df=0.25, # remove shit that is everywhere\n    min_df=3\n) \ntitle_vec = papers_df['dc:title'].dropna()\ncv.fit(title_vec)\nword_vec = cv.transform(title_vec)\nprint(str(cv.vocabulary_)[:100])\nword_vec","08fa3f8a":"pillar_focus_dict = {\n    'A) Ethics and Social Tranformation': [\n        'Ethics, Social transformation, Societal changes, ethical review board',\n    ],\n    'B) Data Availability, Quality, and Security': [\n        'Data quality control, Data protection, Data security, Data privacy'\n    ],\n    'C) Prediction and preemptive behavior': [\n        'Predictive analysis, Preemptive behavior, Predictive modeling, Forecasting'\n    ]\n}\npillar_focus_vec = {k: en_embed(v) for k,v in pillar_focus_dict.items()}","e20a05fc":"title_vec = en_embed(papers_df['dc:title'].fillna('').values.tolist())\npapers_df['emb_vec'] = [x for x in title_vec]","6cb78dea":"pillars = sorted(pillar_focus_vec.keys())\npillar_vec = [pillar_focus_vec[k] for k in pillars]\nfull_vec = np.concatenate(pillar_vec+[title_vec], 0)\nfull_vec.shape","d50bd712":"from sklearn.manifold import TSNE\ntsne_model = TSNE(n_iter=1500, \n                  random_state=2018, \n                  perplexity=10, \n                  learning_rate=400, verbose=True)\ntsne_vec = tsne_model.fit_transform(full_vec)","dc64b1fb":"ss_vec = tsne_vec[:-title_vec.shape[0]]\npapers_df['tsne_x'] = tsne_vec[-title_vec.shape[0]:, 0]\npapers_df['tsne_y'] = tsne_vec[-title_vec.shape[0]:, 1]\nfig, ax1 = plt.subplots(1, 1, figsize = (15, 10))\ni = 0\nfor k, c_color in zip(pillars, 'rgy'):\n    for idea in pillar_focus_dict[k]:\n        ax1.plot(tsne_vec[i, 0], tsne_vec[i, 1], f'{c_color}s', label=idea, ms=20, alpha = 0.5)\n        i+=1\n\nax1.scatter(papers_df['tsne_x'], papers_df['tsne_y'], s=papers_df['citedby-count'], c='b', label='All Publications', alpha = 0.5)\n\nax1.legend()\nax1.axis('off')","15ceb30d":"import string\npapers_df['tsne_x'] = tsne_vec[-title_vec.shape[0]:, 0]\npapers_df['tsne_y'] = tsne_vec[-title_vec.shape[0]:, 1]\nfig, m_axs = plt.subplots(1, len(pillars), figsize = (30, 8))\ni = 0\nfor c_ax, k in zip(m_axs, pillars):\n    for idea in pillar_focus_dict[k]:\n        c_pt = tsne_vec[i]\n        c_ax.plot(c_pt[0], c_pt[1], 's', label=k)\n        i+=1\n    papers_df['dist'] = np.square(papers_df['tsne_x']-c_pt[0])+np.square(papers_df['tsne_y']-c_pt[1])\n    c_pnts_df = papers_df.sort_values(['dist']).head(100)\n    c_ax.plot(c_pnts_df['tsne_x'], c_pnts_df['tsne_y'], 'b.', label='Closest Pages')\n    c_pnts_df = c_pnts_df.sample(5)\n    clean_titles = c_pnts_df['dc:title'].map(lambda x: x[:50])\n    for (_, c_row), clean_title in zip(c_pnts_df.iterrows(), clean_titles):\n        c_ax.text(c_row['tsne_x'], c_row['tsne_y'], clean_title) \n    c_ax.legend()\n    c_ax.set_title(k)","37ee4244":"papers_df.to_csv('paper_vec.csv')","1156e670":"i = 0\npill_list = []\nfor k in pillars:\n    for idea in pillar_focus_dict[k]:\n        pill_list += [{'tsne_x': tsne_vec[i, 0],\n                  'tsne_y': tsne_vec[i, 1],\n                  'term': idea,\n                  'pillar': k}]\n        i+=1\npd.DataFrame(pill_list).to_csv('pillars.csv')     ","73f4ca6d":"from matplotlib import animation, rc\nrc('animation', html='jshtml', embed_limit=100)\nstep_count = 12\nstep_length = 10*1000\/(step_count)\ntime_steps = np.linspace(papers_df['years_elapsed'].min(),\n                       papers_df['years_elapsed'].max(),\n                       step_count+1)\nfig, ax1 = plt.subplots(1, 1, figsize = (15, 10))\npub_plot = ax1.plot(0, 0, 'b.', label='All Publications', alpha=0.75)[0]\ni = 0\nfor k, c_color in zip(pillars, 'rgm'):\n    for idea in pillar_focus_dict[k]:\n        ax1.plot(tsne_vec[i, 0], tsne_vec[i, 1], f'{c_color}s', label=k, ms=10)\n        i+=1\nax1.legend(loc=1)\nax1.axis('off')\nx_lim = ax1.get_xlim()\ny_lim = ax1.get_ylim()\ndef update_frame(i):\n    n_rows = papers_df[papers_df['years_elapsed']<=time_steps[i+1]]\n    n_rows = n_rows[n_rows['years_elapsed']>time_steps[i]]\n    #ax1.plot(n_rows['tsne_x'], n_rows['tsne_y'], 'b.', alpha = 0.25)\n    pub_plot.set_xdata(n_rows['tsne_x'])\n    pub_plot.set_ydata(n_rows['tsne_y'])\n    ax1.set_title(n_rows['prism:coverDate'].iloc[0])\n    #ax1.set_xlim(*x_lim)\n    #ax1.set_ylim(*y_lim)","899b7d6c":"ani = animation.FuncAnimation(fig, \n                              update_frame, \n                              range(step_count), \n                              interval=step_length)\nani","17eaae79":"# Animations"}}