{"cell_type":{"e9b0c769":"code","a8980b58":"code","2f91f9a3":"code","6aea8e12":"code","886d06a1":"code","ac2d9b70":"code","6a7db053":"code","5f8938fe":"code","bb713325":"code","2c9b23e0":"code","ffe8b13b":"code","c7ea5909":"code","09be6176":"code","424ab403":"code","f07dea2f":"code","37fbb940":"code","9afae3d9":"code","9f4d7713":"code","b7845ccd":"code","551cd97c":"code","5c950204":"code","c9ba4f92":"code","9e40a51a":"code","a93e1d2b":"markdown","c7a36f0b":"markdown","4e7713d8":"markdown","cb4a8a7d":"markdown","b9f2960d":"markdown","eb653cad":"markdown","89222ea4":"markdown","6ca02737":"markdown","c6837dea":"markdown"},"source":{"e9b0c769":"import numpy as np\nimport os\nimport pandas\nimport random\nimport matplotlib.pyplot as plt\nfrom keras import layers, models, optimizers\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split\n%matplotlib inline","a8980b58":"os.chdir('..\/input\/digit-recognizer')\n\ndef create_images(filename, mode='train'):\n    dataset = pandas.read_csv(filename)\n    images = []\n    for i in range(0, dataset.shape[0]):\n        if mode == 'train':\n            pixels = dataset.iloc[i].tolist()[1:]\n        else:\n            pixels = dataset.iloc[i].tolist()\n        img = np.zeros((28, 28))\n        for j in range(0, len(pixels)):\n            img[j \/\/ 28, j % 28] = pixels[j]\n        images.append(img)\n    if mode == 'train':\n        return (np.asarray(dataset['label'].tolist()), np.asarray(images))\n    else:\n        return np.asarray(images)","2f91f9a3":"train_labels, train_images = create_images('train.csv')","6aea8e12":"plt.figure(figsize=(20, 15))\nfor i in range(50):\n    plt.subplot(5, 10, i + 1)\n    plt.imshow(train_images[random.randrange(train_images.shape[0])])","886d06a1":"train_images = train_images.reshape(train_images.shape[0], train_images.shape[1], train_images.shape[2], 1)","ac2d9b70":"img_train, img_test, label_train, label_test = train_test_split(train_images, train_labels, test_size = 0.1)","6a7db053":"train_images.shape[0] == img_train.shape[0] + img_test.shape[0]","5f8938fe":"train_labels.shape[0] == label_train.shape[0] + label_test.shape[0]","bb713325":"model = models.Sequential()\nmodel.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))\nmodel.add(layers.Conv2D(32, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Dropout(0.3))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))  \nmodel.add(layers.Dropout(0.3))\nmodel.add(layers.Conv2D(128, (3, 3), activation='relu'))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(512, activation='relu'))\nmodel.add(layers.Dropout(0.4))\nmodel.add(layers.Dense(128, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(layers.Dense(10, activation='softmax'))","2c9b23e0":"model.summary()","ffe8b13b":"image_gen = ImageDataGenerator(rotation_range=10,\n                               width_shift_range=0.1,\n                               height_shift_range=0.1,\n                               rescale=1.\/255,\n                               shear_range=0.2,\n                               zoom_range=0.2,\n                               fill_mode='nearest')","c7ea5909":"train_datagen = image_gen.flow(img_train, label_train, batch_size=64)","09be6176":"model.compile(loss='sparse_categorical_crossentropy', \n              optimizer=optimizers.Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, amsgrad=False),\n              metrics=['accuracy'])","424ab403":"history = model.fit_generator(train_datagen, steps_per_epoch=img_train.shape[0] \/\/ 64, \n                    epochs=20, verbose=1, callbacks=None, validation_data=(img_test, label_test))","f07dea2f":"acc = history.history['acc']\nval_acc = history.history['val_acc']\nplt.plot(range(20), acc, 'r', label='Training accuracy')\nplt.plot(range(20), val_acc, 'b', label='Validation accuracy')\nplt.legend()\nplt.show()","37fbb940":"loss = history.history['loss']\nval_loss = history.history['val_loss']\nplt.plot(range(20), loss, 'r', label='Training loss')\nplt.plot(range(20), val_loss, 'b', label='Validation loss')\nplt.legend()","9afae3d9":"test_images = create_images('test.csv', 'test')","9f4d7713":"answer = model.predict(test_images.reshape(test_images.shape[0], test_images.shape[1], test_images.shape[2], 1))","b7845ccd":"def classes(answer):\n    numbers_classes = []\n    for item in answer:\n        numbers_classes.append(item.argmax())\n    return numbers_classes","551cd97c":"result = pandas.DataFrame({'ImageId': range(1, answer.shape[0] + 1), \"Label\": classes(answer)})","5c950204":"os.chdir('\/kaggle\/working')","c9ba4f92":"result.to_csv('result.csv', index=False)","9e40a51a":"model.save('mnist.h5')","a93e1d2b":"### Split Training and Test data","c7a36f0b":"### Fit the Model","4e7713d8":"### Reshape the Images for Keras","cb4a8a7d":"### CNN Model with Keras","b9f2960d":"### Create Images Using CSV File and Extract Image Labels","eb653cad":"### Predict","89222ea4":"### Accuracy and Loss Graph","6ca02737":"### Data Augmentation and Compilation the Model","c6837dea":"### Loading the Training Dataset"}}