{"cell_type":{"c1ea1a3a":"code","a64c595e":"code","2ddbb577":"code","ef99c87a":"code","c17c757e":"code","4b42aa7a":"code","09b24cff":"markdown","84f60168":"markdown","9be03489":"markdown"},"source":{"c1ea1a3a":"#Useful libraries\nimport numpy as np\nfrom collections import Counter\nfrom sklearn import datasets\nimport matplotlib.pyplot as plt\n# creating the k nearest neighborrs class\nclass KNN:\n    def __init__(self,k=3,qMinkowski=2):\n        self.k=k\n        self.qMinkowski=qMinkowski\n        # this method fit the model to the data\n        # for the knn the data only need to be stored for the training  \n    def fit(self,X,y):\n        self.X_train=X\n        self.y_train=y\n    # prediction for all the datas\n    def predict(self,X):\n        return np.array([self._predict(x) for x in X])\n    # prediction for an instance\n    def _predict(self,x):\n        # compute the distances to the instance\n        distances_to_x=[np.linalg.norm(x-x_,self.qMinkowski) for x_ in self.X_train]\n        # get the k nearest neighbors labels\n        k_indices=np.argsort(distances_to_x)[:self.k]\n        kn_labels=[self.y_train[i] for i in k_indices]\n        # using the majority vote to obtain the label\n        x_label=Counter(kn_labels).most_common(1)[0][0]\n        return x_label\n    # The accuracy \n    def accuracy(self,y_pred,y_real):\n        return np.sum(y_pred==y_real)\/len(y_real)","a64c595e":"# import some data to play with\niris = datasets.load_iris()\nX = iris.data[:, :2]  # we only take the first two features.\ny = iris.target\nX.shape, y.shape","2ddbb577":"x_min, x_max = X[:, 0].min() - .5, X[:, 0].max() + .5\ny_min, y_max = X[:, 1].min() - .5, X[:, 1].max() + .5\n\nplt.figure(2, figsize=(8, 6))\nplt.clf()\n\n# Plot the training points\nplt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.Set1,\n            edgecolor='k')\nplt.xlabel('Sepal length')\nplt.ylabel('Sepal width')\n\nplt.xlim(x_min, x_max)\nplt.ylim(y_min, y_max)\nplt.xticks(())\nplt.yticks(())","ef99c87a":"# basic model\nmodel = KNN(k=4,qMinkowski = 4)\nmodel.fit(X,y)","c17c757e":"y_pred=model.predict(X)\ny_pred","4b42aa7a":"accuracy = model.accuracy(y_pred,y)\naccuracy","09b24cff":"# Testing the model","84f60168":"# Data importation","9be03489":"# K nearest neighboors"}}