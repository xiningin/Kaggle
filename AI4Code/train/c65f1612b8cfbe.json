{"cell_type":{"f1073037":"code","28f5e5e2":"code","d56f8f69":"code","6ad881d4":"code","2ec4061f":"code","5f0d0164":"code","0e2ff01c":"code","ccd98c37":"code","1b1ec99b":"code","f3ea2462":"code","19226ba4":"code","b3f12fec":"code","e700c8b1":"code","d78290ba":"code","dcca3eed":"code","61876635":"code","89ddfd92":"code","f215ff87":"code","ee9db746":"code","fa3e7a5b":"code","f05c589d":"code","1c0c370e":"code","dc569eb8":"code","cd992468":"code","9f6bf264":"code","75cf850e":"code","d15ff34b":"code","5cb9d83b":"code","6a0440c2":"code","f03a9d8b":"code","29d137fd":"code","88219bc4":"code","ea2387cb":"code","9113e8ed":"code","eb66b351":"code","0706a474":"code","398a67f4":"code","97220a61":"code","31fde825":"code","813c8299":"code","90787953":"code","c61d8a7e":"code","9fc8ab3f":"code","44e124cd":"code","0a2620f4":"code","4cc5af15":"code","c462ab3f":"code","1c0a0b68":"code","0b515b55":"code","a26c8c90":"code","0434832e":"code","62611c30":"code","c08cddbe":"code","fc21bb07":"code","43b8fca0":"code","f0643d00":"code","38bf3b61":"code","4a22ba09":"markdown","b6f1a3c3":"markdown","df8f9dfa":"markdown","3e4c2c49":"markdown","131d7019":"markdown","898b7a10":"markdown","373fc92b":"markdown","f58531c4":"markdown","a612228b":"markdown","f2b86ec9":"markdown","e7302db1":"markdown","cbf1531c":"markdown","423e040c":"markdown","5fa66024":"markdown","e0b5cd39":"markdown","f30671a8":"markdown","e1e62923":"markdown","23cc357f":"markdown","eeda677d":"markdown","56837a2e":"markdown","5dd3ab3a":"markdown","e394dcc5":"markdown","b14fc4d9":"markdown","015c12ae":"markdown","4e84af15":"markdown","72ce0e19":"markdown","188811e4":"markdown","e1984b86":"markdown","2413dd47":"markdown","ddd7b6ac":"markdown","fdc35e1f":"markdown","47afbd81":"markdown","8b9e7100":"markdown","2666b8cd":"markdown","803884df":"markdown","7f86e4e7":"markdown","0501df89":"markdown","2e4c2ace":"markdown","6aca9b31":"markdown","2e90b3b6":"markdown","9412fbef":"markdown"},"source":{"f1073037":"# \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier","28f5e5e2":"import numpy as np # \u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0430\u043b\u0433\u0435\u0431\u0440\u0430\nimport pandas as pd # \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438\n# \u043e\u0431\u0437\u043e\u0440 \u0444\u0430\u0439\u043b\u043e\u0432 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0442\u0435\u0441\u0442\u0430\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d56f8f69":"train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')","6ad881d4":"f'train shape: {train_df.shape},   test shape: {test_df.shape},   submission shape: {submission.shape}'","2ec4061f":"submission.head(3)","5f0d0164":"train_df.head(3)","0e2ff01c":"test_df.head(3)","ccd98c37":"train_df.info()\nprint('_'*40)\ntest_df.info()","1b1ec99b":"train_df.describe()","f3ea2462":"train_df.describe(include=['O'])","19226ba4":"test_df.describe()","b3f12fec":"test_df.describe(include=['O']) ","e700c8b1":"train_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)","d78290ba":"train_df[[\"Sex\", \"Survived\"]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)\n","dcca3eed":"train_df[[\"Embarked\", \"Survived\"]].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)","61876635":"train_df[[\"SibSp\", \"Survived\"]].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)","89ddfd92":"train_df[[\"Parch\", \"Survived\"]].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)","f215ff87":"g = sns.FacetGrid(train_df, col='Survived')\ng.map(plt.hist, 'Age', bins=20)","ee9db746":"g = sns.FacetGrid(train_df, col='Survived')\ng.map(plt.hist, 'Fare', bins=20)","fa3e7a5b":"grid = sns.FacetGrid(train_df, col='Survived', row='Pclass', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend();","f05c589d":"f,ax = plt.subplots(figsize=(22,16))\nsns.heatmap(train_df.drop(['PassengerId',  'Name', 'Ticket', 'Cabin'], axis=1).corr(),annot=True, linewidths=.1, fmt='.1f', ax=ax)\nplt.show()","1c0c370e":"train_df.Name.shape, train_df.Name.nunique(), test_df.Name.shape, test_df.Name.nunique(), train_df.Name.append(test_df.Name).shape, train_df.Name.append(test_df.Name).nunique()","dc569eb8":"train_df.Ticket.shape, train_df.Ticket.nunique(), test_df.Ticket.shape, test_df.Ticket.nunique(), train_df.Ticket.append(test_df.Ticket).shape, train_df.Ticket.append(test_df.Ticket).nunique()","cd992468":"test_df.Ticket.nunique(), test_df[~test_df.Ticket.isin(train_df.Ticket)].Ticket.nunique()","9f6bf264":"train_df.Cabin.shape, train_df.Cabin.nunique(), test_df.Cabin.shape, test_df.Cabin.nunique(), train_df.Cabin.append(test_df.Cabin).shape, train_df.Cabin.append(test_df.Cabin).nunique()","75cf850e":"test_df.Cabin.nunique(), test_df[~test_df.Cabin.isin(train_df.Cabin)].Cabin.nunique()","d15ff34b":"print(\"\u0414\u043e \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f\", train_df.shape, test_df.shape)\n# ['PassengerId',  'Name', 'Ticket', 'Cabin']\ntrain_df = train_df.drop(['Name', 'Ticket', 'Cabin'], axis=1)\ntest_df = test_df.drop(['Name', 'Ticket', 'Cabin'], axis=1)\ntrain_df = train_df.set_index('PassengerId')\ntest_df = test_df.set_index('PassengerId')\n\"\u041f\u043e\u0441\u043b\u0435\", train_df.shape, test_df.shape","5cb9d83b":"# \u043d\u0435 \u0431\u0443\u0434\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435, \u043d\u043e \u0440\u0435\u0430\u043b\u044c\u043d\u043e \u0438\u043c\u0435\u044e\u0449\u0438\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043e\u0442 \u043f\u043e\u0440\u044f\u0434\u043a\u0430 \u0446\u0438\u0444\u0440.\n# \u0422\u043e \u0435\u0441\u0442\u044c, \u043a \u043f\u0440\u0438\u043c\u0435\u0440\u0443, \u043a\u043b\u0430\u0441\u0441 \u0431\u0438\u043b\u0435\u0442\u0430, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c, \u043d\u043e \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0440\u0435\u0430\u043b\u044c\u043d\u043e \u0432\u0430\u0436\u043d\u043e 1-\u0439 \u043a\u043b\u0430\u0441 \u0438\u0438\u043b 3-\u0439. \u0410 \u0432\u043e\u0442 \u0434\u043b\u044f \u043f\u043e\u043b\u0430 \u043f\u043e\u0440\u0442\u0430 \u044d\u0442\u043e \u043d\u0435 \u0432\u0430\u0436\u043d\u043e\ndef cat_encode(df):\n    df = df.copy()\n    df = pd.concat([df, pd.get_dummies(df.Sex)], axis=1)\n    df.drop('Sex', axis=1, inplace=True)\n    df = pd.concat([df, pd.get_dummies(df.Embarked)], axis=1)\n    df.drop('Embarked', axis=1, inplace=True)\n    return df","6a0440c2":"def make_features():\n    train_df['FamilySize'] = train_df['SibSp'] + train_df['Parch'] + 1\n    test_df['FamilySize'] = test_df['SibSp'] + test_df['Parch'] + 1\n    train_df['IsAlone'] = 0\n    train_df.loc[train_df['FamilySize'] == 1, 'IsAlone'] = 1\n    test_df['IsAlone'] = 0\n    test_df.loc[test_df['FamilySize'] == 1, 'IsAlone'] = 1","f03a9d8b":"def fill_nan():\n    test_df['Fare'].fillna(test_df['Fare'].dropna().median(), inplace=True)\n    test_df['Age'].fillna(test_df['Age'].dropna().median(), inplace=True)\n    train_df['Age'].fillna(train_df['Age'].dropna().median(), inplace=True)","29d137fd":"train","88219bc4":"from sklearn.manifold import TSNE\nfrom sklearn.decomposition import PCA\ns = TSNE(n_components=2).fit_transform(X_train)\ns1 = PCA(n_components=2).fit_transform(X_train)\ncluster_colors = {0: 'black', 1: 'red',}\ncluster_names = {0:'\u043d\u0435 \u0432\u044b\u0436\u0438\u043b',1:'\u0432\u044b\u0436\u0438\u043b',}\n\ndef make_pic(c, df, column='Survived'):\n    x, y = c[:,0 ], c[:,1]\n    plt.scatter(x, y,\n                color=df[column].map(cluster_colors), marker='o')\n    plt.title('\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u0445 \u0438 \u043d\u0435 \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u0445')\n    plt.grid(True, linestyle='-', color='0.75')\n    plt.show()\n\nmake_pic(s, train)\nmake_pic(s1, train)","ea2387cb":"fill_nan()\ntrain = cat_encode(train_df)\ntest = cat_encode(test_df)\nX_train = train.drop(\"Survived\", axis=1)\nY_train = train[\"Survived\"]\nX_test  = test\nX_train.shape, Y_train.shape, X_test.shape","9113e8ed":"from sklearn.preprocessing import RobustScaler","eb66b351":"# Logistic Regression\n\ndef logred_clf(X_train, Y_train, X_test):\n    logreg = LogisticRegression()\n    logreg.fit(X_train, Y_train)\n    Y_pred = logreg.predict(X_test)\n    acc_log = round(logreg.score(X_train, Y_train) * 100, 2)\n\n    print(acc_log)\n    return logreg, acc_log\nlogred, acc_log = logred_clf(X_train, Y_train, X_test)\n# \u043f\u043e\u0441\u043b\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445\nrs = RobustScaler().fit(X_train)\nr_logred, r_acc_log = logred_clf(rs.transform(X_train), Y_train, rs.transform(X_test))\n","0706a474":"coeff_df = pd.DataFrame(train.columns.delete(0))\ncoeff_df.columns = ['Feature']\ncoeff_df[\"Correlation\"] = pd.Series(logreg.coef_[0])\n\ncoeff_df.sort_values(by='Correlation', ascending=False)","398a67f4":"# Support Vector Machines\ndef svc_clf(X_train, Y_train, X_test):\n    svc = SVC()\n    svc.fit(X_train, Y_train)\n    Y_pred = svc.predict(X_test)\n    acc_svc = round(svc.score(X_train, Y_train) * 100, 2)\n    print(acc_svc)\n    return svc, acc_svc\nsvc, acc_svc = svc_clf(X_train, Y_train, X_test)\n# \u043f\u043e\u0441\u043b\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445\nr_svc, r_acc_svc = svc_clf(rs.transform(X_train), Y_train, rs.transform(X_test))\n","97220a61":"def knn_clf(X_train, Y_train, X_test):\n    knn = KNeighborsClassifier(n_neighbors = 3)\n    knn.fit(X_train, Y_train)\n    Y_pred = knn.predict(X_test)\n    acc_knn = round(knn.score(X_train, Y_train) * 100, 2)\n    print(acc_knn)\n    return knn, acc_knn\nknn, acc_knn = knn_clf(X_train, Y_train, X_test)\n# \u043f\u043e\u0441\u043b\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445\nr_knn, r_acc_knn = knn_clf(rs.transform(X_train), Y_train, rs.transform(X_test))","31fde825":"def naive_clf(X_train, Y_train, X_test):\n    gaussian = GaussianNB()\n    gaussian.fit(X_train, Y_train)\n    Y_pred = gaussian.predict(X_test)\n    acc_gaussian = round(gaussian.score(X_train, Y_train) * 100, 2)\n    print(acc_gaussian)\n    return gaussian, acc_gaussian\nnaive, acc_gaussian = naive_clf(X_train, Y_train, X_test)\n# \u043f\u043e\u0441\u043b\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445\nr_naive, r_acc_gaussian = naive_clf(rs.transform(X_train), Y_train, rs.transform(X_test))","813c8299":"def dt_clf(X_train, Y_train, X_test):\n    decision_tree = DecisionTreeClassifier()\n    decision_tree.fit(X_train, Y_train)\n    Y_pred = decision_tree.predict(X_test)\n    acc_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)\n    print(acc_decision_tree)\n    return decision_tree, acc_decision_tree\n    \ndt, acc_decision_tree = dt_clf(X_train, Y_train, X_test)\n# \u043f\u043e\u0441\u043b\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445\nr_dt, r_acc_decision_tree = dt_clf(rs.transform(X_train), Y_train, rs.transform(X_test))","90787953":"def rf_clf(X_train, Y_train, X_test):\n    random_forest = RandomForestClassifier(n_estimators=100)\n    random_forest.fit(X_train, Y_train)\n    Y_pred = random_forest.predict(X_test)\n    random_forest.score(X_train, Y_train)\n    acc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\n    print(acc_random_forest)\n    return random_forest, acc_random_forest\nrandom_forest, acc_random_forest = rf_clf(X_train, Y_train, X_test)\n# \u043f\u043e\u0441\u043b\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445\nr_random_forest, r_acc_random_forest = rf_clf(rs.transform(X_train), Y_train, rs.transform(X_test))","c61d8a7e":"models = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n              'Random Forest', 'Naive Bayes', 'Decision Tree'],\n    'Score': [acc_svc, acc_knn, acc_log, \n              acc_random_forest, acc_gaussian, acc_decision_tree]})\nmodels.sort_values(by='Score', ascending=False)","9fc8ab3f":"from sklearn import metrics\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.model_selection import GridSearchCV","44e124cd":"x_train, x_test, y_train, y_test = train_test_split(X_train, Y_train, test_size=0.2, random_state=42)","0a2620f4":"dt = DecisionTreeClassifier()\ndt.fit(x_train, y_train)\ny_pred = dt.predict(x_test)\n\nprint(metrics.classification_report(y_test, y_pred))\nprint(metrics.confusion_matrix(y_test, y_pred))\n\n","4cc5af15":"def plot_roc_curve(clf, y_test, x_test):\n    sns.set(font_scale=1.5)\n    sns.set_color_codes(\"muted\")\n\n    plt.figure(figsize=(10, 8))\n    fpr, tpr, thresholds = metrics.roc_curve(y_test, clf.predict_proba(x_test)[:,1], pos_label=1)\n\n    lw = 2\n    plt.plot(fpr, tpr, lw=lw, label='ROC curve ')\n    plt.plot([0, 1], [0, 1])\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('ROC curve')\n    plt.savefig(\"ROC.png\")\n    plt.show()\nplot_roc_curve(dt, y_test, x_test)","c462ab3f":"dt = DecisionTreeClassifier()\ncv = cross_val_score(dt, X_train, Y_train, cv=5)\nprint(cv, np.mean(cv))","1c0a0b68":"param_grid = {\n    \n    \"criterion\": ['entropy', 'gini'],\n    \"min_samples_split\": [2, 3, 4,6, 8],\n    \"max_depth\": [2,5,10,12,14, 16],\n    \"min_samples_leaf\":[1, 2, 3, 4, 6]\n    }\ndt = GridSearchCV(DecisionTreeClassifier(random_state = 42), param_grid, n_jobs=-1, cv=5)\ndt.fit(x_train, y_train)\nbest_params = dt.best_params_\nprint(dt.best_params_)\ndt = dt.best_estimator_\ny_pred = dt.predict(x_test)\n\nprint(metrics.classification_report(y_test, y_pred))\nprint(metrics.confusion_matrix(y_test, y_pred))\nplot_roc_curve(dt, y_test, x_test)","0b515b55":"dt_finall = DecisionTreeClassifier(**best_params)\ndt_finall.fit(X_train, Y_train)\npredict = dt_finall.predict(X_test)","a26c8c90":"predict","0434832e":"submission.shape, predict.shape","62611c30":"submission['Survived'] = predict\nsubmission.head()","c08cddbe":"submission.to_csv('submission.csv', index=False)","fc21bb07":"import lightgbm as lgb\nimport catboost as cb","43b8fca0":"train_df\ncat_feats = ['Pclass']\ntrain_data = lgb.Dataset(X_train, label = Y_train, categorical_feature=cat_feats, free_raw_data=False)\nfake_valid_inds = np.random.choice(len(X_train), 1000000)\nfake_valid_data = lgb.Dataset(X_train.iloc[fake_valid_inds], label = Y_train.iloc[fake_valid_inds],categorical_feature=cat_feats,\n                             free_raw_data=False)  \nparams = {\n        \"objective\" : \"poisson\",\n        \"metric\" :\"rmse\",\n        \"force_row_wise\" : False,\n        \"learning_rate\" : 0.075,\n        \"sub_row\" : 0.75,\n        \"bagging_freq\" : 1,\n        \"lambda_l2\" : 0.1,\n        \"metric\": [\"binary_logloss\"],\n    'verbosity': 1,\n    'num_iterations' : 500,\n#     'device' : 'gpu'\n}","f0643d00":"%%time\n\nm_lgb = lgb.train(params, train_data, valid_sets = [fake_valid_data], verbose_eval=50) ","38bf3b61":"predict = m_lgb.predict(X_test)\nsubmission['Survived'] = predict\nsubmission['Survived'] = submission['Survived'].apply(lambda r: 0 if r <=0.5 else 1)\nsubmission.to_csv('submission_lg.csv', index=False)\nsubmission.head()","4a22ba09":"\u0421\u043c\u043e\u0442\u0440\u0438\u043c \u043e\u0431\u0449\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e","b6f1a3c3":"\u0414\u0435\u0440\u0435\u0432\u044c\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u0439","df8f9dfa":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043b\u044e\u0434\u0435\u0439 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043c \u0432 \u0440\u0430\u0437\u0440\u0435\u0437\u0435 \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u0445 \u0438 \u043d\u0435 \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u0445, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0431\u0438\u043b\u0435\u0442\u043e\u0432","3e4c2c49":"\u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u0430\u0431\u043e\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0442\u0435\u0441\u0442\u0430, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043d\u0430\u0431\u043e\u0440 \u043c\u0435\u0442\u043e\u043a","131d7019":"\u0421\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0437\u0430\u043f\u0438\u0441\u0435\u0439","898b7a10":"\u041d\u0430\u0438\u0432\u043d\u044b\u0439 \u0411\u0430\u0439\u0435\u0441","373fc92b":"## \u0411\u043e\u043b\u0435\u0435 \u0433\u043b\u0443\u0431\u043e\u043a\u0438\u0439 \u0432\u0437\u0433\u043b\u044f\u0434 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0435","f58531c4":"## \u0418\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","a612228b":"\"\u041a\" \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439","f2b86ec9":"\u0421\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445","e7302db1":"## \u041d\u0435\u043c\u043d\u043e\u0433\u043e \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438","cbf1531c":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u0445 \u0432\u043b\u0438\u044f\u043d\u0438\u044f","423e040c":"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u0445 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0431\u0440\u0430\u0442\u044c\u0435\u0432, \u0441\u0435\u0441\u0442\u0435\u0440, \u0441\u0443\u043f\u0440\u0443\u0433\u043e\u0432","5fa66024":"\u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u043b\u0435\u0441\u0430","e0b5cd39":"\u0421\u043c\u043e\u0442\u0440\u0438\u043c \u043e\u0431\u0449\u0438\u0435 \u043e\u043f\u0438\u0441\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u043f\u043e **\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c** \u0434\u0430\u043d\u043d\u044b\u043c","f30671a8":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043b\u044e\u0434\u0435\u0439 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0441\u043a\u043e\u0433\u043e \u0442\u0430\u0440\u0438\u0444\u0430 \u0432 \u0440\u0430\u0437\u0440\u0435\u0437\u0435 \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u0445 \u0438 \u043d\u0435 \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u0445","e1e62923":"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u0445 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0434\u0435\u0442\u0435\u0439","23cc357f":"\u041c\u043e\u0436\u043d\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u043e\u0446\u0435\u043d\u0438\u0442\u044c \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438, \u043f\u043e \u0442\u043e\u043c\u0443, \u043a\u0430\u043a \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b","eeda677d":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043b\u044e\u0434\u0435\u0439 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043c \u0432 \u0440\u0430\u0437\u0440\u0435\u0437\u0435 \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u0445 \u0438 \u043d\u0435 \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u0445","56837a2e":"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u0445 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043f\u043e\u0440\u0442\u0430 \u043f\u043e\u0441\u0430\u0434\u043a\u0438","5dd3ab3a":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0434\u0435\u043b\u0430\u0435\u0442 \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","e394dcc5":"## \u041f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u043a \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044e \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438 \u0438\u0445 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438","b14fc4d9":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0435\u0440\u0435\u0441\u0435\u043a\u0430\u044e\u0442\u0441\u044f \u043b\u0438 \u0438\u043c\u0435\u043d\u0430, \u043d\u043e\u043c\u0435\u0440\u0430 \u0431\u0438\u043b\u0435\u0442\u043e\u0432 \u0438 \u043d\u043e\u043c\u0435\u0440\u0430 \u043a\u0430\u0431\u0438\u043d \u0432 \u0442\u0435\u0441\u0442\u0435 \u0438 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435. \u0422\u0430\u043a \u043a\u0430\u043a \u044d\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442 \u0441\u043e\u043c\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e, \u0441 \u0442\u043e\u0447\u043a\u0438 \u0437\u0440\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0435\u0439 \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f\u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0432\u044b\u0436\u0438\u0432\u0430\u043d\u0438\u044f","015c12ae":"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438. ","4e84af15":"\u041f\u0435\u0440\u0435\u043a\u0440\u0435\u0441\u0442\u043d\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430","72ce0e19":"\u0420\u0430\u0437\u043e\u0431\u044c\u0435\u043c \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e \u0438 \u0432\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u044e\u0449\u0443\u044e","188811e4":"\u0421\u043c\u043e\u0442\u0440\u0438\u043c \u043e\u0431\u0449\u0438\u0435 \u043e\u043f\u0438\u0441\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u043f\u043e **\u043d\u0435\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c** \u0434\u0430\u043d\u043d\u044b\u043c","e1984b86":"# \u0420\u0430\u0437\u0431\u043e\u0440 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \"Titanic\"","2413dd47":"\u041c\u0430\u0448\u0438\u043d\u0430 \u043e\u043f\u043e\u0440\u043d\u044b\u0445 \u0432\u0435\u043a\u0442\u043e\u0440\u043e\u0432","ddd7b6ac":"## \u0410 \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0447\u0442\u043e \u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435 \u0437\u043d\u0430\u0447\u044f\u0442 \u0442\u0430\u043a\u0438\u0435 \u0445\u043e\u0440\u043e\u0448\u0438\u0435 \u043e\u0446\u0435\u043d\u043a\u0438. \u041d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0440\u0435\u0448\u0430\u044e\u0449\u0438\u0445 \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432","fdc35e1f":"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u0445 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043a\u043b\u0430\u0441\u0441\u0430 \u0431\u0438\u043b\u0435\u0442\u0430","47afbd81":"ROC \u043a\u0440\u0438\u0432\u0430\u044f","8b9e7100":"## \u041f\u0435\u0440\u0435\u0439\u0434\u0435\u043c \u043a \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\u043c \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","2666b8cd":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445","803884df":"\u041f\u043e\u0438\u0441\u043a \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e GridSearch","7f86e4e7":"\u0421\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435","0501df89":"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u0445 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043f\u043e\u043b\u0430","2e4c2ace":"\u041d\u0435\u043c\u043d\u043e\u0433\u043e \u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u0445","6aca9b31":"\u041d\u0430\u0447\u043d\u0435\u043c \u0441 \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438","2e90b3b6":"## \u041e\u0431\u0437\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445","9412fbef":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u0432\u0437\u0430\u0438\u043c\u043d\u044b\u0445 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439"}}