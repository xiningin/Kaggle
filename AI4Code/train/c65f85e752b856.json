{"cell_type":{"e8d06456":"code","813e729d":"code","523b5eec":"code","bfcdda2e":"code","adb75a8b":"code","6e4c333a":"code","3c6a20fa":"code","36d60cbe":"code","c1bad048":"code","3eaf39c0":"code","037b1eea":"code","d0acf804":"code","1c0ef776":"code","a8d2409b":"code","bf429e44":"code","20c97b6a":"code","0cd3c261":"code","0a8d6848":"code","d6b0c050":"code","eea69e5b":"code","b46638a9":"code","6a6f9679":"code","05aa5a83":"code","e1c58505":"code","5df9d069":"code","fc9a4f3a":"code","fac8b4ac":"code","2bc3536e":"code","3f293043":"code","025fcd60":"code","f7066766":"code","1e717827":"code","57404a64":"code","a7863723":"code","8343778e":"code","184db32e":"code","18c7ad10":"code","d5257418":"code","0023d3e4":"markdown","188b4eaf":"markdown","6415208b":"markdown","a57b282f":"markdown","36f00f5d":"markdown","4897cc2f":"markdown","4048eca2":"markdown","27ddbe00":"markdown","40d1b0df":"markdown","329817ec":"markdown","d149abfc":"markdown","b1e20115":"markdown","7eaa8ef5":"markdown","7332e900":"markdown","17a0c1f5":"markdown","2a76582f":"markdown","323989e1":"markdown","0fb0395b":"markdown","98d3c955":"markdown","b9eb8880":"markdown","645dc1c8":"markdown","7130ca7a":"markdown","244ebf4d":"markdown","b1a8724f":"markdown","926d10ad":"markdown","dab633c1":"markdown","f3b5fcdb":"markdown","13523d95":"markdown","5d381859":"markdown","7a918cc9":"markdown","728b674b":"markdown","941d1a2d":"markdown","903ae171":"markdown"},"source":{"e8d06456":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, recall_score\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom statistics import mean\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\ndf = pd.read_csv('\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')\ndf.head()","813e729d":"df.shape","523b5eec":"df.isnull().sum()","bfcdda2e":"df.describe()","adb75a8b":"df.corr()","6e4c333a":"plt.figure(figsize=(20,10))\nsns.heatmap(df.corr(), annot=True)","3c6a20fa":"df.corr()['output'].sort_values(ascending=False)","36d60cbe":"sns.pairplot(df, hue= 'output')","c1bad048":"df.head(10)","3eaf39c0":"for i in df:\n    print(\"Column \"+str(i)+\" is having unique values \" +str(df[i].nunique())+ \" with max and min as \"+str(df[i].max())+\" and \"+str(df[i].min()))","037b1eea":"columns_to_scale = df.iloc[:,[0,3,4,7,9,]]\ncolumns_to_scale","d0acf804":"ss = StandardScaler()\nscaled_values = ss.fit_transform(columns_to_scale)\nscaled_values = pd.DataFrame(scaled_values, columns=columns_to_scale.columns)\nscaled_values","1c0ef776":"scaled_df = pd.concat([scaled_values,df.iloc[:,[1,2,5,6,8,10,11,12,13]]],axis=1)\nscaled_df","a8d2409b":"Y = df.iloc[:,[-1]]\nX = df.iloc[:,:-1]","bf429e44":"xtrain, xtest, ytrain, ytest = train_test_split(X,Y,test_size=0.2,random_state=42)","20c97b6a":"lr = LogisticRegression(solver='lbfgs', max_iter=1000)\nmodel_lr = lr.fit(xtrain,ytrain.values.ravel())\npredict_values_lr = model_lr.predict(xtest)\npredict_values_lr","0cd3c261":"print(accuracy_score(ytest,predict_values_lr))\nprint(recall_score(ytest,predict_values_lr))","0a8d6848":"dtc = DecisionTreeClassifier(random_state=42,criterion=\"entropy\")\nmodel_dtc = dtc.fit(xtrain,ytrain)\npredict_values_dtc = model_dtc.predict(xtest)\npredict_values_dtc","d6b0c050":"print(accuracy_score(ytest,predict_values_dtc))\nprint(recall_score(ytest,predict_values_dtc))","eea69e5b":"values_sample_leaf_dtc = {\"min_samples_leaf\":range(2,240,1)}\ncv = GridSearchCV(dtc,values_sample_leaf_dtc,scoring=\"accuracy\",cv=3)\nmodel_cv = cv.fit(xtrain,ytrain)\nmodel_cv.best_params_","b46638a9":"dtc_2 = DecisionTreeClassifier(random_state=42,criterion=\"entropy\",min_samples_leaf=7)\nmodel_dtc_2 = dtc_2.fit(xtrain,ytrain)\npredict_values_dtc_2 = model_dtc_2.predict(xtest)\npredict_values_dtc_2","6a6f9679":"print(accuracy_score(ytest,predict_values_dtc_2))\nprint(recall_score(ytest,predict_values_dtc_2))","05aa5a83":"rfc = RandomForestClassifier(random_state=42,n_estimators=30)\nmodel_rfc = rfc.fit(xtrain,ytrain.values.ravel())\npredict_values_rfc = model_rfc.predict(xtest)\npredict_values_rfc","e1c58505":"print(accuracy_score(ytest,predict_values_rfc))\nprint(recall_score(ytest,predict_values_rfc))","5df9d069":"values_sample_leaf_rfc = {\"min_samples_leaf\":range(2,240,1)}\ncv = GridSearchCV(rfc,values_sample_leaf_rfc,scoring=\"accuracy\",cv=3)\nmodel_cv = cv.fit(xtrain,ytrain.values.ravel())\nmodel_cv.best_params_","fc9a4f3a":"rfc_2 = RandomForestClassifier(random_state=42,n_estimators=30, min_samples_leaf=16)\nmodel_rfc_2 = rfc_2.fit(xtrain,ytrain.values.ravel())\npredict_values_rfc_2 = model_rfc_2.predict(xtest)\npredict_values_rfc_2","fac8b4ac":"print(accuracy_score(ytest,predict_values_rfc_2))\nprint(recall_score(ytest,predict_values_rfc_2))","2bc3536e":"knn = KNeighborsClassifier(n_neighbors=4)\nmodel_knn = knn.fit(xtrain,ytrain.values.ravel())\npredict_values_knn = model_knn.predict(xtest)\npredict_values_knn\n#accuracy_score(ytest,predict_values_knn)","3f293043":"print(accuracy_score(ytest,predict_values_knn))\nprint(recall_score(ytest,predict_values_knn))","025fcd60":"knn_2 = KNeighborsClassifier()\nvalues_n_neigh_knn = {\"leaf_size\":range(1,100,1)}\ncv = GridSearchCV(knn_2,values_n_neigh_knn,scoring=\"accuracy\",cv=3)\nmodel_cv = cv.fit(xtrain,ytrain.values.ravel())\nmodel_cv.best_params_","f7066766":"acc = []\nnei = []\nfor i in range(1,20,1):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    model_knn = knn.fit(xtrain,ytrain.values.ravel())\n    predict_values_knn = model_knn.predict(xtest)\n    nei.append(i)\n    acc.append(accuracy_score(ytest,predict_values_knn))","1e717827":"plt.plot(nei, acc)","57404a64":"knn = KNeighborsClassifier(n_neighbors=11, weights = 'distance')\nmodel_knn = knn.fit(xtrain,ytrain.values.ravel())\npredict_values_knn = model_knn.predict(xtest)\npredict_values_knn","a7863723":"print(accuracy_score(ytest,predict_values_knn))\nprint(recall_score(ytest,predict_values_knn))","8343778e":"lr = LogisticRegression(solver='lbfgs', max_iter=10000)\nrs = []\nacc = []\nfor i in range(1,100,1):\n    xtrain, xtest, ytrain, ytest = train_test_split(X,Y,test_size=0.2,random_state=i)\n    model_lr_rs = lr.fit(xtrain,ytrain.values.ravel())\n    predict_values_lr_rs = model_lr_rs.predict(xtest)\n    acc.append(accuracy_score(ytest,predict_values_lr_rs))\n    rs.append(i)","184db32e":"plt.plot(rs, acc)","18c7ad10":"for i in range(len(rs)):\n    print(rs[i],acc[i])","d5257418":"print(\"The average accuracy is \"+str(round(mean(acc)*100,2))+\"% with best as 93.4%\")","0023d3e4":"The accuracy has been decreased so we will try chnaging **min_samples_leaf** parameter of **DecisionTreeClassifier**","188b4eaf":"Now let's check how much multicollinearity exists among columns","6415208b":"Shape of dataframe","a57b282f":"Now let's check what statistical data says","36f00f5d":"Seems Logistic Regression model is best suiting, let's see how it works for different **Random State**","4897cc2f":"Now let's see what's precision and accuracy","4048eca2":"So next is **Decision Tree Classifier**","27ddbe00":"As we can see there is not much correlation with 'outcome' we will try plotting pairplot to get more idea","40d1b0df":"As we see just numbers are hard to get insights so we'll add heatmap over it","329817ec":"Exactly same result as LR model","d149abfc":"**That was a short notebook on how different classification model works**","b1e20115":"Seems it's not working too","7eaa8ef5":"The lighter the color the more positive correlation, and the darker the color the more negative correlation is visible among columns","7332e900":"Trying with different n_neighbors value and Plotting KNN leaf value with accuracy","17a0c1f5":"Trying KNN with different leaf_size in Grid Search CV","2a76582f":"For that we will use **Grid Search method**","323989e1":"Now let's try with **Random Forest Classifier**","0fb0395b":"Let's see if dataframe is having any null values or not","98d3c955":"But we here want to predict 'outcome' column in df so we will check just correlation of 'outcome' with other columns","b9eb8880":"Not much improvement from LR model but still recall is increased from previous DTC model","645dc1c8":"We have got accuracy of 0.88, we will check what other models have to provide","7130ca7a":"Now as we have scaled our values we will divide our rows in train and test dataframe for prediction.","244ebf4d":"We will try K Neighbors model","b1a8724f":"so no null values","926d10ad":"Now we will concatenate scaled_values with remaining part of df","dab633c1":"Y will be 'output' and rest are X variables","f3b5fcdb":"So from above it seems the columns which need scaling are age, trtbps, chol, thalach, oldpeak","13523d95":"Not much improvement, let's try with grid search","5d381859":"For classification prediction we will 1st use **Logistic Regression**","7a918cc9":"As we can see data is not scaled properly, so we will choose columns to scale","728b674b":"As we already had idea from correlation much realtion is not visible, and there is not much of analysis so we can move onto prediction part.","941d1a2d":"So accuracy the best prediction for Heart Attack chances is **93.4%.** But with different random state we should rely more on average of all accuracies.","903ae171":"For that we'll have a look at dataframe again"}}