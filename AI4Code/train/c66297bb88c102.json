{"cell_type":{"ae4c968d":"code","6736f9cf":"code","379ef8cc":"code","a6bfcf90":"code","f185943c":"code","08360d0f":"code","2e8ab9f1":"code","f1b07219":"code","abdd9a01":"code","72a31336":"code","61fd3e9c":"code","33fa812e":"code","55c1a93f":"code","d4f3b88d":"code","4b530f93":"code","0d97494f":"code","6929dd4e":"code","339bc1f0":"code","7bd204e3":"code","54163439":"code","876e9b0d":"markdown","3aa4989f":"markdown","7e0de281":"markdown","1ca8cc5a":"markdown","b1ac576c":"markdown","c6d848be":"markdown","3978db99":"markdown","3aa78f3d":"markdown","df4f62ca":"markdown","0f2b0dd1":"markdown","18a617f7":"markdown","8936e9e4":"markdown","cccc7707":"markdown","9af17b7a":"markdown","ae6fe037":"markdown","f76ee6ba":"markdown","206203c5":"markdown"},"source":{"ae4c968d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6736f9cf":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","379ef8cc":"df=pd.read_csv('\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv')","a6bfcf90":"df.head()","f185943c":"df.describe()","08360d0f":"df.isnull().sum()","2e8ab9f1":"cormat=df.corr()\nplt.figure(figsize=(20,20))\ng=sns.heatmap(df.corr(),annot=True,cmap=\"RdYlGn\")","f1b07219":"df.Outcome.value_counts()","abdd9a01":"from sklearn.model_selection import train_test_split","72a31336":"X=df.drop('Outcome',axis=1)\ny=df.Outcome","61fd3e9c":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.30, random_state=10)","33fa812e":"df.value_counts(df['Pregnancies']==0)","55c1a93f":"from sklearn.impute import SimpleImputer","d4f3b88d":"fill_values = SimpleImputer(missing_values=0, strategy=\"mean\")","4b530f93":"X_train = fill_values.fit_transform(X_train)\nX_test = fill_values.fit_transform(X_test)","0d97494f":"from sklearn.ensemble import RandomForestClassifier\n","6929dd4e":"random_forest_model = RandomForestClassifier(random_state=10)\n\nrandom_forest_model.fit(X_train, y_train.ravel())","339bc1f0":"predict_train_data = random_forest_model.predict(X_test)\n\n","7bd204e3":"from sklearn import metrics\n\nprint(\"Accuracy = {0:.3f}\".format(metrics.accuracy_score(y_test, predict_train_data)))","54163439":"metrics.confusion_matrix(y_test,predict_train_data)","876e9b0d":"# Part-1 Data Preprocessing","3aa4989f":"Splitting the data for model","7e0de281":"Fitting the model","1ca8cc5a":"Making a correlation heat map","b1ac576c":"Finding null values","c6d848be":"# Part-2 Working on the model.","3978db99":"Entries that have values as 0 can negatively affect the model. To replace those values we are using impute.","3aa78f3d":"Splitting the data  into train and test","df4f62ca":"Importing the required library for Random Forest Classifier","0f2b0dd1":"Making our features and targets","18a617f7":"Evaluating the model","8936e9e4":"We are filling the values with mean of the column.","cccc7707":"Importing the required libraries","9af17b7a":"Loading the data","ae6fe037":"Predicting the test values from the model.","f76ee6ba":"Finding the number of positive or negative outcomes of the data for diabetes","206203c5":"Finding values that are 0"}}