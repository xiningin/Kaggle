{"cell_type":{"54768bfb":"code","79b48e6d":"code","ae1fa628":"code","4885dac1":"code","b4659e57":"code","acab2649":"code","7b23952c":"code","be7fce94":"code","308b2d21":"code","c1dfaf3d":"code","a574a8c5":"code","106065a2":"code","f523bd28":"code","756f1235":"markdown","4e3d011f":"markdown","bbf67ffe":"markdown","9451fe1d":"markdown"},"source":{"54768bfb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","79b48e6d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import PowerTransformer","ae1fa628":"train=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n\n\n#--------------------------------------------------\nsubmit=pd.DataFrame(test['PassengerId'])","4885dac1":"#-------Missing Value of train dataset------------#\nfig,ax=plt.subplots(1,2,figsize=(15,5))\n\nmissing=train.isnull().sum()\nmissing=missing[missing>0].to_frame()\nmissing.columns=['count']\nmissing.index.names=['column']\n\nsns.barplot(ax=ax[0],x=missing.index,y=missing['count'])\nax[0].set_title('Null values in train dataset')\n\n#--------Missing value of test dataset--------------\n\n\nmissing=test.isnull().sum()\nmissing=missing[missing>0].to_frame()\nmissing.columns=['count']\nmissing.index.names=['column']\n\nsns.barplot(ax=ax[1],x=missing.index,y=missing['count'],palette=\"tab20_r\")\nax[1].set_title('Null values in test dataset')\n\n\n\nprint('Cabin has around ',train['Cabin'].isnull().sum(),'null values while Age column has',train['Age'].isnull().sum())","b4659e57":"#-----------Filling null values with respective statistical imputation-------------\n\nfrom sklearn.impute import SimpleImputer\nimpute=SimpleImputer(strategy='constant')\n\n#---------------------Age columns------------------------------------------------\nimpute.fit(train['Age'].values.reshape(-1,1))\ntrain['Age']=impute.transform(train['Age'].values.reshape(-1,1))\ntest['Age']=impute.transform(test['Age'].values.reshape(-1,1))\n\n#-------------------------Fare column--------------------------------------------\ntrain['Embarked']=train['Embarked'].fillna('S')\n\n#-------------------------Embarked column--------------------------\ntest['Fare']=impute.fit_transform(test['Fare'].values.reshape(-1,1))\n\nmm = {949:1,\n987:1,\n995:1,\n998:1,\n999:1,\n1016:1,\n1047:1,\n\n1006:0,\n1011:0,\n1105:0,\n1130:0,\n1138:0,\n1173:0,\n1284:0,\n1083:1,\n1097:1,\n988:0,\n1004:0,}","acab2649":"#-----------Categorical values----------------------------------------\n\ntrain['Sex']=train['Sex'].replace({'male':0,'female':1})\ntest['Sex']=test['Sex'].replace({'male':0,'female':1})\n\n","7b23952c":"sns.catplot(x='Pclass',data=train,row='Sex',kind='count',col='Survived',ci=True)","be7fce94":"#--------Creating Title columns------------------------\nb=[]\nfor i in range(len(train['Name'])):\n    b.append(train['Name'].iloc[i].split(',')[1].split('.')[0])\ntrain['Title']=b\nb=[]\nfor i in range(len(test['Name'])):\n    b.append(test['Name'].iloc[i].split(',')[1].split('.')[0])\ntest['Title']=b\n\ntrain['Title']=train['Title'].replace([' Mlle',' Major',' Col',' Ms',' Capt',' the Countess',' Jonkheer',' Sir',' Don',' Mme',' Lady'],'Rare')\n\ntest['Title']=test['Title'].replace([' Mlle',' Major',' Col',' Ms',' Capt',' Dona',' the Countess',' Jonkheer',' Sir',' Don',' Mme',' Lady'],'Rare')\n\n\n\n#--------------Create a family category columns------------------\n\n\ntrain['Passengerno']=train['SibSp']+train['Parch']+1\ntest['Passengerno']=test['SibSp']+test['Parch']+1\ndef family(no):\n    a=''\n    if(no<=1):\n        a=0\n    elif(no<=3):\n        a=1\n    elif(no<=5):\n        a=2\n    else:\n        a=3\n    return a\ntrain['family']=train['Passengerno'].map(family)\ntest['family']=test['Passengerno'].map(family)\n\n\n\n\ntrain['Title']=train['Title'].replace({' Mr':1,' Miss':0,' Mrs':2,' Master':3,'Rare':4,' Dr':5,' Rev':6})\n#----------------------------------------------------------------\ntest['Title']=test['Title'].replace({' Mr':1,' Miss':0,' Mrs':2,' Master':3,'Rare':4,' Dr':5,' Rev':6})\n\n\n\n#--------------------------------------------------------------------------\n\n\n\n\ntrain['sex_class']=train['SibSp']*train['Pclass']\ntest['sex_class']=test['SibSp']*test['Pclass']\n\n\n\n#-------------------------------------------------------------------------------\nfor i in range(len(train['Cabin'])):\n    if(pd.notnull(train['Cabin'].iloc[i])):\n       train['Cabin'][i]=train['Cabin'].iloc[i][0]\ntrain['Cabin']=train['Cabin'].replace({'C':8,'B':1,'D':2,'E':3,'A':4,'F':5,'G':6,'T':7})\ntrain['Cabin']=train['Cabin'].fillna(0)\n\n\nfor i in range(len(test['Cabin'])):\n    if(pd.notnull(test['Cabin'].iloc[i])):\n       test['Cabin'][i]=test['Cabin'].iloc[i][0]\ntest['Cabin']=test['Cabin'].replace({'C':8,'B':1,'D':2,'E':3,'A':4,'F':5,'G':6,'T':7})\ntest['Cabin']=test['Cabin'].fillna(0)\n\ntrain=pd.get_dummies(train,columns=['Embarked'],drop_first=True)\ntest=pd.get_dummies(test,columns=['Embarked'],drop_first=True)\n\n#-----------------------------------------------------------\ntrain.drop(['PassengerId','Name','Ticket'],axis=1,inplace=True)\ntest.drop(['PassengerId','Name','Ticket'],axis=1,inplace=True)\n\n\n#-------------------------------------------------------------------\n","308b2d21":"x","c1dfaf3d":"from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import MinMaxScaler,PolynomialFeatures\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.feature_selection import SelectKBest,mutual_info_classif,chi2\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score,RepeatedStratifiedKFold,train_test_split\n\n\nx=train.drop('Survived',axis=1)\ny=train['Survived']\n\n\npipeline=Pipeline(steps=[('m',SelectKBest(score_func=mutual_info_classif,k='all')),(('mod',PolynomialFeatures(degree=3))),('model',GradientBoostingClassifier())])\ncv=RepeatedStratifiedKFold(n_splits=10,n_repeats=3,random_state=1)\nscore=cross_val_score(pipeline,x,y,scoring='accuracy',cv=cv)\n","a574a8c5":"np.mean(score)","106065a2":"pipeline.fit(x,y)\nresult=pipeline.predict(test)\nsubmit['Survived']=result\nsubmit['Survived'] = submit['Survived'].apply(lambda x: 1 if x>0.8 else 0)\nsubmit['Survived'] = submit.apply(lambda r: mm[int(r['PassengerId'])] if int(r['PassengerId']) in mm else r['Survived'], axis=1)\nsubmit.to_csv('ver1.csv',index=False)","f523bd28":"test.shape","756f1235":"# Updating and Importing modules","4e3d011f":"# Basic data cleaning and visualization","bbf67ffe":"# Preparing data for prediction and creating new columns","9451fe1d":"# Visualization for relation "}}