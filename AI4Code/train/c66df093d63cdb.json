{"cell_type":{"7f1b4f8e":"code","3c62169e":"code","035918ad":"code","9be2ce31":"code","1ac6dec1":"code","e1cd71c1":"code","9f2d47b7":"code","77f8e147":"code","988c6171":"code","f0aafc35":"code","d7f8839e":"code","8ebbebc6":"code","a25fdc53":"code","2b9e73ec":"code","7198ad66":"code","a05f2f15":"code","2be96201":"code","810f16e7":"code","37e6a6eb":"code","bef27e17":"code","7283fba8":"code","2691d366":"code","40af7a20":"code","2257d440":"code","ab6a14fe":"markdown","f10d00e5":"markdown","74f9de59":"markdown","794afeb3":"markdown","34e2aed1":"markdown","3de136e8":"markdown"},"source":{"7f1b4f8e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3c62169e":"# Common Imports:\nimport pandas as pd\nimport numpy as np\nimport os\n\n# To Plot Figures:\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nmpl.rc('axes', labelsize=14)\nmpl.rc('xtick', labelsize=12)\nmpl.rc('ytick', labelsize=12)\n%matplotlib inline ","035918ad":"# allowing for any single variable to print out without using the print statement:\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"","9be2ce31":"# To allow markdowns in Python Cells:\nfrom IPython.display import display, Markdown","1ac6dec1":"# Path to access images\nfrom pathlib import Path\n\n# in-built keras image pre-processing library\nfrom keras.preprocessing import image","e1cd71c1":"# Path to folders with training data\nparasitized_path = Path('..\/input\/cell-images-for-detecting-malaria\/cell_images') \/ 'Parasitized'\nnot_parasitized_path = Path('..\/input\/cell-images-for-detecting-malaria\/cell_images') \/ 'Uninfected'\n\n# making sure the directories exist\nparasitized_path.is_dir()\nnot_parasitized_path.is_dir()","9f2d47b7":"# initializing the lists of images (X) and labels (Y)\nimages = []\nlabels = []","77f8e147":"# import library to resize images:\nfrom skimage import transform\n\n# setting the new shape of image:\nnew_shape = (50, 50, 3)","988c6171":"import warnings;\nwarnings.filterwarnings('ignore');\n\n# Load all the non-malaria images and setting their Y label as 0\nfor img in not_parasitized_path.glob(\"*.png\"):\n    \n    # Load the image from disk\n    img = image.load_img(img)\n\n    # Convert the image to a numpy array\n    image_array = image.img_to_array(img)\n    \n    # resize the image (must be done after it has turned into a np array):\n    image_array = transform.resize(image_array, new_shape, anti_aliasing=True)\n    \n    # scaling the image data to fall between 0-1 since images have 255 brightness values:\n    image_array \/= 255\n\n    # Add the image to the list of images\n    images.append(image_array)\n\n    # For each 'not parasitized' image, the expected value should be 0\n    labels.append(0)","f0aafc35":"plt.imshow(images[1])\nplt.title('Sample Uninfected Cell')\n\"Dimensions of image:\"\nimages[1].shape\n\n\"Images \/ Labels we have imported thus far:\"\nlen(images)\nlen(labels)","d7f8839e":"# Load all the malaria images and setting their Y label as 1\nfor img in parasitized_path.glob(\"*.png\"):\n    \n    # Load the image from disk\n    img = image.load_img(img)\n\n    # Convert the image to a numpy array\n    image_array = image.img_to_array(img)\n    \n    # resize the image (must be done after it has turned into a np array):\n    image_array = transform.resize(image_array, new_shape, anti_aliasing=True)\n    \n    # scaling the image data to fall between 0-1 since images have 255 brightness values:\n    image_array \/= 255\n\n    # Add the image to the list of images\n    images.append(image_array)\n\n    # For each 'parasitized' image, the expected value should be 1\n    labels.append(1)","8ebbebc6":"plt.imshow(images[-1])\nplt.title('Sample Infected Cell')\n\"Dimensions of image:\"\nimages[-1].shape\n\n\"Images \/ Labels we have imported thus far:\"\nlen(images)\nlen(labels)","a25fdc53":"# memory dump\nimport gc\ngc.collect()","2b9e73ec":"from sklearn.utils import shuffle\nimages, labels = shuffle(images, labels)","7198ad66":"# checking to make sure that the order is still in place:\nplt.imshow(images[-7])\n\"1 means it is infected:\"\nlabels[-7]","a05f2f15":"# Create a single numpy array with all the images we loaded (list to np array)\nx_data = np.array(images)\n\n# Also convert the labels to a numpy array from a list\ny_data = np.array(labels)","2be96201":"# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x_data, y_data, test_size = 0.2, random_state = 0)","810f16e7":"# type convert the test and training data:\nX_train = X_train.astype('float32')\nX_test = X_test.astype('float32')","37e6a6eb":"f'X_train shape: {X_train.shape}'\nf'X_test.shape: {X_test.shape}'","bef27e17":"f'Y_train shape: {y_train.shape}'\nf'Y_test.shape: {y_test.shape}'","7283fba8":"y_train[0:3]","2691d366":"# one hot encoding Y:\nfrom keras.utils import to_categorical\ny_train = to_categorical(y_train)\ny_test = to_categorical(y_test)","40af7a20":"y_train[0:3]","2257d440":"import h5py\n\nwith h5py.File('X_train.hdf5', 'w') as f:\n    dset = f.create_dataset(\"default\", data=X_train)","ab6a14fe":"Here, we save and load the np data so we don't need to run through all the pre-processing from scratch next time.","f10d00e5":"### First, we will load our images from Kaggle Dataset and create our test and train X and Y values.","74f9de59":"Let's take a look at an infected cell:","794afeb3":"###### Lets import all the non infected images ","34e2aed1":"###### Lets import all the infected images ","3de136e8":"Now, we randomly shuffle the images and labels (while respecting their order of course) before we split into training and testing sets:"}}