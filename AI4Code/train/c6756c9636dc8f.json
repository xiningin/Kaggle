{"cell_type":{"fff5ee90":"code","a9c618cb":"code","fa9eb87b":"code","b15ae8b1":"code","962582ff":"code","c96a7112":"code","15ff195b":"code","38649c84":"code","14fdc225":"code","8810fc56":"code","069307d9":"code","97cb3ba9":"code","2dbc9ac1":"code","90b81105":"code","d691818b":"code","d02d2448":"code","114bdca5":"code","334dd797":"code","af8b2bea":"code","5feeb4b6":"code","1fd2fe44":"code","058ce289":"code","e937222d":"code","531cab39":"code","062bf9f9":"code","2ae3de4c":"code","2fcf7770":"markdown","b1fa8cef":"markdown","8b09bbbd":"markdown","f2d90b24":"markdown","e4ac7eb7":"markdown","8538292a":"markdown"},"source":{"fff5ee90":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a9c618cb":"# Kutuphane Import Islemleri\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nfrom scipy import stats\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score, roc_auc_score, recall_score, precision_score\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import GridSearchCV\npd.set_option(\"display.max_columns\", None)","fa9eb87b":"# Veri Setini Okutmak\ndf = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")","b15ae8b1":"# Veri Setinin \u0130lk Bes Gozlemine Erismek\ndf.head()","962582ff":"df.describe().T","c96a7112":"zero_columns = [i for i in df.columns if (df[i].min() == 0 and i not in [\"Pregnancies\", \"Outcome\"])]\nfor i in zero_columns:\n    df[[i]] = df[[i]].replace(0, np.NaN)\n\n","15ff195b":"df.isnull().sum()","38649c84":"for i in zero_columns:\n    df[i] = df[i].fillna(df.groupby(\"Outcome\")[i].transform(\"median\"))","14fdc225":"# Veri setinde eksik gozlem degeri kalip kalmadigini kontrol edelim\ndf.isnull().values.any()","8810fc56":"# Aykiri Deger Analizi\n# Boxplot Y\u00f6ntemi\n# Oncelikle Outcome degiskeni haricindekileri secelim\nnum_cols = [col for col in df.columns if col != \"Outcome\"]\n\n# Belirlenen thresholds degerlerine gore alt ve ust limitleri hesaplamas\u0131 icin fonksiyon tanimliyalim.\ndef outlier_thresholds(dataframe, col_name):\n    quartile1 = dataframe[col_name].quantile(0.10)\n    quartile3 = dataframe[col_name].quantile(0.90)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit\n\n# Hesaplanan alt limitin altinda veya ust limitin ustunde bir deger varsa True yoksa False dondurecek fonksiyonu tanimlayalim\ndef check_outlier(dataframe, col_name):\n    low_limit, up_limit = outlier_thresholds(dataframe, col_name)\n    if dataframe[(dataframe[col_name] > up_limit) | (dataframe[col_name] < low_limit)].any(axis=None):\n        return True\n    else:\n        return False\n\n# num_cols listesinde bulunan degisken isimlerine g\u00f6re aykiri deger olup olmadigini gorelim\nfor col in num_cols:\n    print(col, \":\", check_outlier(df, col))","069307d9":"# Insulin, SkinThickness ve DiabetesPedigreeFunction degiskenlerinde bulunan aykiri degerleri alt veya ust limite gore baskilayalim.\n# Bunun icin bir fonksiyon yazalim\ndef replace_with_thresholds(dataframe, col_name):\n    low_limit, up_limit = outlier_thresholds(dataframe, col_name)\n    if low_limit > 0:\n        dataframe.loc[(dataframe[col_name] < low_limit), col_name] = low_limit\n        dataframe.loc[(dataframe[col_name] > up_limit), col_name] = up_limit\n    else:\n        dataframe.loc[(dataframe[col_name] > up_limit), col_name] = up_limit\n\nreplace_with_thresholds(df, \"Insulin\")\nreplace_with_thresholds(df, \"SkinThickness\")\nreplace_with_thresholds(df, \"DiabetesPedigreeFunction\")\n\n","97cb3ba9":"# Aykiri deger olup olmadigini kontrol edelim\nfor col in num_cols:\n    print(col, \":\", check_outlier(df, col))","2dbc9ac1":"# Sayisal Degisken Analizi\n# Histogram grafigi\nfor i in num_cols:\n    sns.histplot(x=df[i], data=df)\n    plt.title(\"distribution\")\n    plt.xlabel(i)\n    plt.show()\n    ","90b81105":"# TARGET degiskenine gore say\u0131sal degiskenlerin analizi\nfor col in num_cols:\n    print(df.groupby(\"Outcome\").agg({col: [\"min\", \"mean\", \"median\", \"std\", \"max\"]}))\n    print(\"-\"*30)","d691818b":"# Outcome siniflarina gore sayisal degiskenlerin medyan degerleri arasinda farklilik olup olmadigini inceleyelim.\n# Oncelikle normallik testi yapilmalidir.\nfor col in num_cols:\n    for i in df[\"Outcome\"].unique():\n        test_stast, pvalue = stats.shapiro(df.loc[df[\"Outcome\"] == i, col])\n        print(f\"Numeric variable: {col} Class: {i} pvalue: {pvalue}\")\n    ","d02d2448":"# Normallik saglanmadigi icin Mann-Whitney U Testi Yapalim\nfor col in num_cols:\n    test_stats, pvalue = stats.mannwhitneyu(df.loc[df[\"Outcome\"] == df[\"Outcome\"].unique()[0], col],\n                                           df.loc[df[\"Outcome\"] == df[\"Outcome\"].unique()[1], col])\n    print(f\"Numeric variable: {col} pvalue: {pvalue}\")","114bdca5":"# Medyan degerleri farklilik gostermektedir. Tekrar Outcome degiskenin sinif kiriliminda diger degiskenlerin medyan degerlerine bakalim\nfor col in num_cols:\n    print(df.groupby(\"Outcome\").agg({col: \"median\"}))\n    print(\"-\"*30)","334dd797":"# Degisken Turetelim. Olasi tum degiskenleri turetelim\ndf[\"PREG_AGE\"] = df[\"Pregnancies\"] * df[\"Age\"]\n\ndf[\"Glucose_BMI\"] = df[\"Glucose\"] * df[\"BMI\"]\n\ndf[\"Insulin_Glucose\"] = df[\"Insulin\"] * df[\"Glucose\"]\n\ndf[\"Insulin_BMI\"] = df[\"Insulin\"] * df[\"BMI\"]\n\ndf[\"INSUL\u0130N_AGE\"] = df[\"Insulin\"] * df[\"Age\"]\n\n# Insulin 16 ile 166 arasi normal diger durumlar anormal\ndef set_insulin(row):\n    if row[\"Insulin\"] >= 16 and row[\"Insulin\"] <= 166:\n        return \"Normal\"\n    else:\n        return \"Abnormal\"\n\n\ndf = df.assign(NewInsulinScore=df.apply(set_insulin, axis=1))\n","af8b2bea":"df.head()","5feeb4b6":"# Label Encoding\nbinary_cols = [col for col in df.columns if df[col].dtypes == \"O\" and df[col].nunique() == 2]\ndef label_encoder(dataframe, binary_col):\n    labelencoder = preprocessing.LabelEncoder()\n    dataframe[binary_col] = labelencoder.fit_transform(dataframe[binary_col])\n    return dataframe\n\nfor col in binary_cols:\n    df = label_encoder(df, col)\n","1fd2fe44":"df.head()","058ce289":"y = df[\"Outcome\"]\nx = df.drop(\"Outcome\", axis=1)\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.30, random_state=42)\n\nprint(f\"{x_train.shape}, {x_test.shape}, {y_train.shape}, {y_test.shape}\")","e937222d":"# Model Kurmak\ncls = DecisionTreeClassifier()\n\nmodel = cls.fit(x_train, y_train)\nproba = model.predict_proba(x_test)[:, 1]\npred = model.predict(x_test)\nprint(f\"AUC: {roc_auc_score(y_test, proba)}\\nACCURACY: {accuracy_score(y_test, pred)}\\nPRESICION: {precision_score(y_test, pred)}\\nRECALL: {recall_score(y_test, pred)}\")","531cab39":"# Model Get Params\nmodel.get_params()","062bf9f9":"# Model Tunning\ncart_model = DecisionTreeClassifier(random_state=17)\n\n# arama yap\u0131lacak hiperparametre setleri\ncart_params = {'max_depth': range(1, 11),\n               \"min_samples_split\": range(1, 16)}\n\n\ncart_cv = GridSearchCV(cart_model, cart_params, cv=5, n_jobs=-1, verbose=True)\ncart_cv.fit(x_train, y_train)","2ae3de4c":"# Final Model\ncart_tuned = DecisionTreeClassifier(**cart_cv.best_params_).fit(x_train, y_train)\ny_pred = cart_tuned.predict(x_test)\ny_prob = cart_tuned.predict_proba(x_test)[:, 1]\nprint(f\"AUC: {roc_auc_score(y_test, y_prob)}\\nACCURACY: {accuracy_score(y_test, y_pred)}\\nPRESICION: {precision_score(y_test, y_pred)}\\nRECALL: {recall_score(y_test, y_pred)}\")","2fcf7770":"# Veri \u00d6n \u0130\u015fleme","b1fa8cef":"Glukoz ve insulin degerlerine baktigimiz zaman diabet hastasi olan kisilerin medyan degeri diabet hastas\u0131 olmayanlara gore hem yuksek hem de istatistiksel olarak\nfarklilik anlamlidir. Diger degiskenler icinde medyan degerleri arasinda bir farkliligin istatistiksel olarak anlamli oldugunu soyleyebiliriz. Ama goze carpan bir farkliligin Glukoz ve Insulin degiskenleri icin gozlemlemekteyiz. Yeni degisken turetmek icin bu degiskenler goz onunde bulundurulabilir.","8b09bbbd":"## Veri Seti K\u0131sa Hikayesi;\n#Bu veri seti Pima Indian \u0131rk\u0131ndan en gen\u00e7 21 ya\u015f\u0131nda olan kad\u0131nlar\u0131n t\u0131bbi kay\u0131tlar\u0131na g\u00f6re diyabet hastas\u0131 olup olmad\u0131\u011f\u0131n\u0131 ve hastal\u0131\u011fa sebep olan etkenleri(bagimsiz degiskenleri) de bir arada bulundurmaktad\u0131r.\n## De\u011fi\u015fkenler;\n Pregnancies: Hamile kalma say\u0131s\u0131.\n \n Glucose: Glikoz.\n \n BloodPressure: Kan bas\u0131nc\u0131.\n \n SkinThickness : Deri kal\u0131nl\u0131\u011f\u0131.\n \n Insulin: \u0130ns\u00fclin.\n \n BMI: Beden kitle indeksi.\n \n DiabetesPedigreeFunction: Soyumuzdaki ki\u015filere g\u00f6re diyabet olma ihtimalimizi hesaplayan bir fonksiyon.\n \n Age: Ya\u015f.\n \n Outcome: Ki\u015finin diyabet olup olmad\u0131\u011f\u0131 bilgisi.","f2d90b24":"Pregnancies ve Outcome d\u0131\u015f\u0131ndaki de\u011fi\u015fkenlerde yer alan s\u0131f\u0131rlar eksik g\u00f6zlemi ifade etmektedir. Bundan dolay\u0131 ilgili de\u011fi\u015fkenleri se\u00e7ip s\u0131f\u0131r olan g\u00f6zlem de\u011ferlerini bo\u015f olarak atayal\u0131m. ","e4ac7eb7":"Eksik de\u011ferlerin Outcome s\u0131n\u0131f k\u0131r\u0131l\u0131m\u0131na g\u00f6re doldurulmas\u0131","8538292a":"Tan\u0131mlay\u0131c\u0131 \u0130statistik"}}