{"cell_type":{"88e8fba7":"code","f629f002":"code","f9e838b9":"code","b241a05e":"code","48b0967e":"code","0d5a8f7a":"code","142ebe9d":"code","fd70f7f8":"code","e7e1a371":"code","a16fb339":"code","61b14921":"code","52b6ab76":"code","ce9bd2e2":"code","f9a2e5f2":"code","9437e25d":"code","51710681":"code","98810806":"code","44c3cb35":"code","66087a35":"code","740f16b5":"markdown","ef07415d":"markdown","22896865":"markdown","bc405f7a":"markdown","bbe80b80":"markdown","4ed45e93":"markdown","0f3296dc":"markdown","ce3aa7ca":"markdown","9595c077":"markdown","2ced34f9":"markdown","baf77a76":"markdown","9b17a5e1":"markdown","81b7f159":"markdown","7231840c":"markdown","42139ecc":"markdown","105a9a06":"markdown","8b5e8fc0":"markdown"},"source":{"88e8fba7":"# \u8f7d\u5165\u5fc5\u8981\u7684\u5e93\nimport pandas as pd\nimport numpy as np\nimport xgboost as xgb\n\nimport missingno as msno\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n%matplotlib inline","f629f002":"# \u8f7d\u5165\u6570\u636e\ntrain = pd.read_csv('..\/input\/rossmann-store-sales\/train.csv')\ntest = pd.read_csv('..\/input\/rossmann-store-sales\/test.csv')\nstore = pd.read_csv('..\/input\/rossmann-store-sales\/store.csv')","f9e838b9":"train.info(), test.info(), store.info()","b241a05e":"fig = plt.figure(figsize=(16,6))\n\nax1 = fig.add_subplot(121)\nax1.set_xlabel('Sales')\nax1.set_ylabel('Count')\nax1.set_title('Sales of Closed Stores')\nplt.xlim(-1,1)\ntrain.loc[train.Open==0].Sales.hist(align='left')\n\nax2 = fig.add_subplot(122)\nax2.set_xlabel('Sales')\nax2.set_ylabel('PDF')\nax2.set_title('Sales of Open Stores')\nsns.distplot(train.loc[train.Open!=0].Sales)\n\nprint('The skewness of Sales is {}'.format(train.loc[train.Open!=0].Sales.skew()))","48b0967e":"train = train.loc[train.Open != 0]\ntrain = train.loc[train.Sales > 0].reset_index(drop=True)","0d5a8f7a":"# train\u7684\u7f3a\u5931\u4fe1\u606f\uff1a\u65e0\u7f3a\u5931\ntrain[train.isnull().values==True]","142ebe9d":"# test\u7684\u7f3a\u5931\u4fe1\u606f\ntest[test.isnull().values==True]","fd70f7f8":"# store\u7684\u7f3a\u5931\u4fe1\u606f\nmsno.matrix(store)","e7e1a371":"# \u9ed8\u8ba4test\u4e2d\u7684\u5e97\u94fa\u5168\u90e8\u6b63\u5e38\u8425\u4e1a\ntest.fillna(1,inplace=True)\n\n# \u5bf9CompetitionDistance\u4e2d\u7684\u7f3a\u5931\u503c\u91c7\u7528\u4e2d\u4f4d\u6570\u8fdb\u884c\u586b\u8865\nstore.CompetitionDistance = store.CompetitionDistance.fillna(store.CompetitionDistance.median())\n\n# \u5bf9\u5176\u5b83\u7f3a\u5931\u503c\u5168\u90e8\u88650\nstore.fillna(0,inplace=True)","a16fb339":"# \u7279\u5f81\u5408\u5e76\ntrain = pd.merge(train, store, on='Store')\ntest = pd.merge(test, store, on='Store')","61b14921":"def build_features(features, data):\n\n    # \u76f4\u63a5\u4f7f\u7528\u7684\u7279\u5f81\n    features.extend(['Store','CompetitionDistance','CompetitionOpenSinceMonth','StateHoliday','StoreType','Assortment',\n                     'SchoolHoliday','CompetitionOpenSinceYear', 'Promo', 'Promo2', 'Promo2SinceWeek', 'Promo2SinceYear'])\n    \n    # \u4ee5\u4e0b\u7279\u5f81\u5904\u7406\u65b9\u5f0f\u53c2\u8003\uff1ahttps:\/\/blog.csdn.net\/aicanghai_smile\/article\/details\/80987666\n    \n    # \u65f6\u95f4\u7279\u5f81\uff0c\u4f7f\u7528dt\u8fdb\u884c\u5904\u7406\n    features.extend(['Year','Month','Day','DayOfWeek','WeekOfYear'])\n    data['Year'] = data.Date.dt.year\n    data['Month'] = data.Date.dt.month\n    data['Day'] = data.Date.dt.day\n    data['DayOfWeek'] = data.Date.dt.dayofweek\n    data['WeekOfYear'] = data.Date.dt.weekofyear\n    \n    # 'CompetitionOpen'\uff1a\u7ade\u4e89\u5bf9\u624b\u7684\u5df2\u8425\u4e1a\u65f6\u95f4\n    # 'PromoOpen'\uff1a\u7ade\u4e89\u5bf9\u624b\u7684\u5df2\u4fc3\u9500\u65f6\u95f4\n    # \u4e24\u4e2a\u7279\u5f81\u7684\u5355\u4f4d\u5747\u4e3a\u6708\n    features.extend(['CompetitionOpen','PromoOpen'])\n    data['CompetitionOpen'] = 12*(data.Year-data.CompetitionOpenSinceYear) + (data.Month-data.CompetitionOpenSinceMonth)\n    data['PromoOpen'] = 12*(data.Year-data.Promo2SinceYear) + (data.WeekOfYear-data.Promo2SinceWeek)\/4.0\n    data['CompetitionOpen'] = data.CompetitionOpen.apply(lambda x: x if x > 0 else 0)        \n    data['PromoOpen'] = data.PromoOpen.apply(lambda x: x if x > 0 else 0)\n    \n    # 'IsPromoMonth'\uff1a\u8be5\u5929\u5e97\u94fa\u662f\u5426\u5904\u4e8e\u4fc3\u9500\u6708\uff0c1\u8868\u793a\u662f\uff0c0\u8868\u793a\u5426\n    features.append('IsPromoMonth')\n    month2str = {1:'Jan', 2:'Feb', 3:'Mar', 4:'Apr', 5:'May', 6:'Jun', 7:'Jul', 8:'Aug', 9:'Sept', 10:'Oct', 11:'Nov', 12:'Dec'}\n    data['monthStr'] = data.Month.map(month2str)\n    data.loc[data.PromoInterval==0, 'PromoInterval'] = ''\n    data['IsPromoMonth'] = 0\n    for interval in data.PromoInterval.unique():\n        if interval != '':\n            for month in interval.split(','):\n                data.loc[(data.monthStr == month) & (data.PromoInterval == interval), 'IsPromoMonth'] = 1\n    \n    # \u5b57\u7b26\u7279\u5f81\u8f6c\u6362\u4e3a\u6570\u5b57\n    mappings = {'0':0, 'a':1, 'b':2, 'c':3, 'd':4}\n    data.StoreType.replace(mappings, inplace=True)\n    data.Assortment.replace(mappings, inplace=True)\n    data.StateHoliday.replace(mappings, inplace=True)\n    data['StoreType'] = data['StoreType'].astype(int)\n    data['Assortment'] = data['Assortment'].astype(int)\n    data['StateHoliday'] = data['StateHoliday'].astype(int)","52b6ab76":"# \u5904\u7406Date\u65b9\u4fbf\u7279\u5f81\u63d0\u53d6\ntrain.Date = pd.to_datetime(train.Date, errors='coerce')\ntest.Date = pd.to_datetime(test.Date, errors='coerce')\n\n# \u4f7f\u7528features\u6570\u7ec4\u50a8\u5b58\u4f7f\u7528\u7684\u7279\u5f81\nfeatures = []\n\n# \u5bf9train\u4e0etest\u7279\u5f81\u63d0\u53d6\nbuild_features(features, train)\nbuild_features([], test)\n\n# \u6253\u5370\u4f7f\u7528\u7684\u7279\u5f81\nprint(features)","ce9bd2e2":"# \u8bc4\u4ef7\u51fd\u6570Rmspe\n# \u53c2\u8003\uff1ahttps:\/\/www.kaggle.com\/justdoit\/xgboost-in-python-with-rmspe\n\ndef ToWeight(y):\n    w = np.zeros(y.shape, dtype=float)\n    ind = y != 0\n    w[ind] = 1.\/(y[ind]**2)\n    return w\n\ndef rmspe(yhat, y):\n    w = ToWeight(y)\n    rmspe = np.sqrt(np.mean(w * (y-yhat)**2))\n    return rmspe\n\ndef rmspe_xg(yhat, y):\n    y = y.get_label()\n    y = np.expm1(y)\n    yhat = np.expm1(yhat)\n    w = ToWeight(y)\n    rmspe = np.sqrt(np.mean(w * (y-yhat)**2))\n    return \"rmspe\", rmspe\n\ndef neg_rmspe(yhat, y):\n    y = np.expm1(y)\n    yhat = np.expm1(yhat)\n    w = ToWeight(y)\n    rmspe = np.sqrt(np.mean(w * (y-yhat)**2))\n    return -rmspe","f9a2e5f2":"from sklearn.model_selection import GridSearchCV, ShuffleSplit\nfrom sklearn.metrics import make_scorer\n\nfrom sklearn.tree import DecisionTreeRegressor\n\nregressor = DecisionTreeRegressor(random_state=2)\n\ncv_sets = ShuffleSplit(n_splits=5, test_size=0.2)    \nparams = {'max_depth':range(10,40,2)}\nscoring_fnc = make_scorer(neg_rmspe)\n\ngrid = GridSearchCV(regressor,params,scoring_fnc,cv=cv_sets)\ngrid = grid.fit(train[features], np.log1p(train.Sales))\n\nDTR = grid.best_estimator_","9437e25d":"# \u663e\u793a\u6700\u4f73\u8d85\u53c2\u6570\nDTR.get_params()","51710681":"# \u751f\u6210\u4e0a\u4f20\u6587\u4ef6\nsubmission = pd.DataFrame({\"Id\": test[\"Id\"], \"Sales\": np.expm1(DTR.predict(test[features]))})\nsubmission.to_csv(\"benchmark.csv\", index=False)","98810806":"# \u5728\u6b64\u8fdb\u884c\u53c2\u6570\u8c03\u8282\nparams = {'objective': 'reg:linear',\n          'eta': 0.01,\n          'max_depth': 11,\n          'subsample': 0.5,\n          'colsample_bytree': 0.5,\n          'silent': 1,\n          'seed': 1\n          }\nnum_trees = 10000","44c3cb35":"# \u968f\u673a\u5212\u5206\u8bad\u7ec3\u96c6\u4e0e\u9a8c\u8bc1\u96c6\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test = train_test_split(train, test_size=0.2, random_state=2)\n\ndtrain = xgb.DMatrix(X_train[features], np.log1p(X_train.Sales))\ndvalid = xgb.DMatrix(X_test[features], np.log1p(X_test.Sales))\ndtest = xgb.DMatrix(test[features])\n\nwatchlist = [(dtrain, 'train'),(dvalid, 'eval')]\ngbm = xgb.train(params, dtrain, num_trees, evals=watchlist, early_stopping_rounds=50, feval=rmspe_xg, verbose_eval=False)","66087a35":"# \u751f\u6210\u63d0\u4ea4\u6587\u4ef6\ntest_probs = gbm.predict(xgb.DMatrix(test[features]), ntree_limit=gbm.best_ntree_limit)\nindices = test_probs < 0\ntest_probs[indices] = 0\nsubmission = pd.DataFrame({\"Id\": test[\"Id\"], \"Sales\": np.expm1(test_probs)})\nsubmission.to_csv(\"xgboost.csv\", index=False)","740f16b5":"\u53ef\u4ee5\u770b\u51fa\uff0c\u7f3a\u5931\u4fe1\u606f\u96c6\u4e2d\u51fa\u73b0\u5728`test.csv`\u4e0e`store.csv`\u4e2d\u3002\u4e0b\u9762\u6211\u4eec\u5bf9\u7f3a\u5931\u503c\u8fdb\u884c\u5904\u7406\uff0c\u5e76\u5bf9\u7279\u5f81\u8fdb\u884c\u5408\u5e76\uff1a","ef07415d":"<a id='step1'><\/a>\n## 1. \u5bfc\u5165\u6570\u636e\n\nRossmann\u7ed9\u51fa\u7684\u6570\u636e\u5305\u542b\u5927\u91cf\u7684\u7279\u5f81\u6570\u636e\uff0c\u5305\u62ec\u5ba2\u6237\u6570\u91cf\u3001\u5047\u671f\u7b49\u7b49\u3002\u6bcf\u4e2a\u7279\u5f81\u90fd\u4f1a\u6709\u5bf9\u5e94\u7684\u65e5\u9500\u91cf\u4f5c\u4e3a\u6807\u7b7e\uff0c\u6240\u4ee5\u8be5\u95ee\u9898\u4e3a\u5178\u578b\u7684\u76d1\u7763\u5b66\u4e60\u95ee\u9898\u3002\u6bd4\u8d5b\u4e3e\u529e\u65b9\u63d0\u4f9b\u4e864\u4e2acsv\u6587\u4ef6\uff0c\u5305\u62ec3\u4e2a\u6570\u636e\u96c6\u4e0e1\u4e2a\u63d0\u4ea4\u6837\u672c\u30023\u4e2a\u6570\u636e\u96c6\u5206\u522b\u4e3a\uff1a\n- train.csv\uff1a2013\/01\/01\u81f32015\/07\/31\u76841017209\u6761\u5386\u53f2\u6570\u636e\uff0c\u5305\u542b\u65e5\u9500\u91cf\uff1b\n- test.csv\uff1a 2015\/08\/01\u81f32015\/09\/17\u768441088\u6761\u5386\u53f2\u6570\u636e\uff0c\u4f46\u4e0d\u5305\u542b\u65e5\u9500\u91cf\uff1b\n- store.csv\uff1a1115\u5bb6\u5e97\u94fa\u7684\u5177\u4f53\u4fe1\u606f\u3002","22896865":"\u901a\u8fc7``DataFrame.info()``\u6307\u4ee4\u53ef\u4ee5\u67e5\u770bDataFrame\u6bcf\u5217\u7684\u6570\u636e\u7c7b\u578b\u4ee5\u53ca\u7f3a\u5931\u503c\u60c5\u51b5\u3002\u4e0d\u96be\u53d1\u73b0\uff0c``test.csv``\u548c``store.csv``\u4e2d\u5747\u5b58\u5728\u7f3a\u5931\u503c\uff0c\u8fd9\u4e9b\u7f3a\u5931\u503c\u5728\u540e\u7eed\u64cd\u4f5c\u4e2d\u90fd\u9700\u8981\u8fdb\u884c\u9884\u5904\u7406\u3002","bc405f7a":"<a id='step2'><\/a>\n## 2. \u6570\u636e\u7814\u7a76\n\n- \u4e0d\u96be\u53d1\u73b0\uff0c\u5f53\u5e97\u94fa\u5173\u95ed\u65f6\uff0c\u65e5\u9500\u91cf\u5fc5\u7136\u4e3a0\u3002\n- \u53bb\u6389\u5e97\u94fa\u5173\u95ed\u65f6\u7684\u6570\u636e\u4e4b\u540e\uff0c\u518d\u89c2\u5bdf\u5e97\u94fa\u5f00\u542f\u65f6\u7684\u65e5\u9500\u91cf\u5206\u5e03\u3002\u53ef\u4ee5\u53d1\u73b0\u65e5\u9500\u91cf\u8868\u73b0\u4e3a\u660e\u663e\u7684\u6709\u504f\u5206\u5e03\uff0c\u5176\u504f\u5ea6\u7ea6\u4e3a1.594\uff0c\u8fdc\u5927\u4e8e0.75\uff0c\u56e0\u6b64\u5728\u540e\u7eed\u5904\u7406\u65f6\u9700\u8981\u5bf9\u65e5\u9500\u91cf\u8fdb\u884c\u5bf9\u6570\u8f6c\u6362\u3002","bbe80b80":"<a id='step3'><\/a>\n## 3. \u7f3a\u5931\u503c\u5904\u7406 ","4ed45e93":"\u56e0\u6b64\uff0c\u6211\u4eec\u53ea\u91c7\u7528\u5e97\u94fa\u8425\u4e1a(Open!=0)\u65f6\u7684\u6570\u636e\u8fdb\u884c\u8bad\u7ec3\u3002\u53e6\u5916\uff0c\u6211\u4eec\u4e0d\u91c7\u7528\u8425\u4e1a\u65f6Sales==0\u7684\u6570\u636e\u3002","0f3296dc":"<a id='step6'><\/a>\n## 6. XGBoost\n### 6.1 \u6a21\u578b\u53c2\u6570\n\u4e3b\u8981\u8c03\u8282\u7684\u53c2\u6570\u5305\u62ec\uff1a\n- `eta`\uff1a\u8fed\u4ee3\u6b65\u957f\uff1b\n- `max_depth`\uff1a\u5355\u9897\u56de\u5f52\u6811\u7684\u6700\u5927\u6df1\u5ea6\uff0c\u8f83\u5c0f\u5bfc\u81f4\u6b20\u62df\u5408\uff0c\u8f83\u5927\u5bfc\u81f4\u8fc7\u62df\u5408\uff1b\n- `subsample`\uff1a0-1\u4e4b\u95f4\uff0c\u63a7\u5236\u6bcf\u68f5\u6811\u968f\u673a\u91c7\u6837\u7684\u6bd4\u4f8b\uff0c\u51cf\u5c0f\u8fd9\u4e2a\u53c2\u6570\u7684\u503c\uff0c\u7b97\u6cd5\u4f1a\u66f4\u52a0\u4fdd\u5b88\uff0c\u907f\u514d\u8fc7\u62df\u5408\u3002\u4f46\u5982\u679c\u8fd9\u4e2a\u503c\u8bbe\u7f6e\u5f97\u8fc7\u5c0f\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6b20\u62df\u5408\uff1b\n- `colsample_bytree`\uff1a0-1\u4e4b\u95f4\uff0c\u7528\u6765\u63a7\u5236\u6bcf\u68f5\u968f\u673a\u91c7\u6837\u7684\u7279\u5f81\u7684\u5360\u6bd4\uff1b\n- `num_trees`\uff1a\u8fed\u4ee3\u6b65\u6570\u3002","ce3aa7ca":"<a id='question1'><\/a>\n### __\u95ee\u9898 1:__\n\n\u56de\u987e\u8bfe\u4e0a\u5185\u5bb9\u5e76\u67e5\u9605\u8d44\u6599\uff0c\u5f52\u7eb3\u603b\u7ed3\u7f3a\u5931\u503c\u7684\u5904\u7406\u65b9\u6cd5\u3002\n\n__\u56de\u7b54:__ \n","9595c077":"### 4.2 \u7279\u5f81\u63d0\u53d6","2ced34f9":"# \u65b0\u6d0b\u6559\u80b2Kaggle\u96f6\u57fa\u7840\u6559\u5b66\u8ba1\u5212 - \u6570\u636e\u6316\u6398\u9879\u76ee\n## \u9884\u6d4b Rossmann \u672a\u6765\u7684\u9500\u552e\u989d\n\nRossmann\u662f\u5fb7\u56fd\u6700\u5927\u7684\u65e5\u5316\u7528\u54c1\u8d85\u5e02\uff0c\u6210\u7acb\u4e8e1972\u5e74\u3002\u5728\u533b\u836f\u96f6\u552e\u884c\u4e1a\uff0c\u76ee\u524dRossmann\u5df2\u7ecf\u57287\u4e2a\u6b27\u6d32\u56fd\u5bb6\u62e5\u6709\u8d85\u8fc73000\u5bb6\u836f\u5e97\u3002\u76ee\u524d\uff0cRossmann\u5e97\u94fa\u7ecf\u7406\u7684\u4efb\u52a1\u662f**\u63d0\u524d\u516d\u5468\u9884\u6d4b\u5176\u65e5\u9500\u91cf**\u3002\u663e\u7136\uff0c\u5546\u5e97\u9500\u552e\u53d7\u5230\u8bf8\u591a\u56e0\u7d20\u7684\u5f71\u54cd\uff0c\u6bd4\u5982\u4fc3\u9500\u3001\u7ade\u4e89\u3001\u5047\u65e5\u3001\u5b63\u8282\u6027\u548c\u5730\u70b9\u7b49\u7b49\u3002 \u6210\u5343\u4e0a\u4e07\u7684\u4e2a\u4eba\u7ecf\u7406\u6839\u636e\u5404\u81ea\u5e97\u94fa\u7684\u60c5\u51b5\u9884\u6d4b\u9500\u552e\u91cf\uff0c\u7ed3\u679c\u7684\u51c6\u786e\u6027\u53ef\u80fd\u4f1a\u6709\u5f88\u5927\u7684\u53d8\u5316\u3002\n\n\u53ef\u9760\u7684\u9500\u552e\u9884\u6d4b\u4f7f\u5546\u5e97\u7ecf\u7406\u80fd\u591f\u521b\u5efa\u6709\u6548\u7684\u5458\u5de5\u65f6\u95f4\u8868\uff0c\u4ece\u800c\u63d0\u9ad8\u751f\u4ea7\u529b\u548c\u52a8\u529b\uff0c\u6bd4\u5982\u66f4\u597d\u7684\u8c03\u6574\u4f9b\u5e94\u94fe\u548c\u5408\u7406\u7684\u4fc3\u9500\u7b56\u7565\u4e0e\u7ade\u4e89\u7b56\u7565\uff0c\u5177\u6709\u91cd\u8981\u7684\u5b9e\u7528\u4ef7\u503c\u4e0e\u6218\u7565\u610f\u4e49\u3002 \u5982\u679c\u53ef\u4ee5\u5e2e\u52a9Rossmann\u521b\u5efa\u4e00\u4e2a\u5f3a\u5927\u7684\u9884\u6d4b\u6a21\u578b\uff0c\u5c06\u5e2e\u52a9\u4ed3\u5e93\u7ba1\u7406\u4eba\u5458\u4e13\u6ce8\u4e8e\u5bf9\u4ed6\u4eec\u6700\u91cd\u8981\u7684\u5185\u5bb9\uff1a\u5ba2\u6237\u548c\u56e2\u961f\u3002\n\u56e0\u6b64\uff0c\u5728\u8fd9\u4e2a\u9879\u76ee\u4e2d\uff0cRossmann\u5e0c\u671b\u5efa\u7acb\u673a\u5668\u5b66\u4e60\u6a21\u578b\uff0c\u901a\u8fc7\u7ed9\u51fa\u7684\u6570\u636e\u6765\u9884\u6d4b\u5fb7\u56fd\u5404\u57301115\u5bb6\u5e97\u94fa\u76846\u5468\u9500\u91cf\u3002\n\n>**\u63d0\u793a\uff1a**Code \u548c Markdown \u533a\u57df\u53ef\u901a\u8fc7 **Shift + Enter** \u5feb\u6377\u952e\u8fd0\u884c\u3002\u6b64\u5916\uff0cMarkdown\u53ef\u4ee5\u901a\u8fc7\u53cc\u51fb\u8fdb\u5165\u7f16\u8f91\u6a21\u5f0f\u3002\n\n\u6211\u4eec\u5c06\u8fd9\u4e2anotebook\u5206\u4e3a\u4e0d\u540c\u7684\u6b65\u9aa4\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u94fe\u63a5\u6765\u6d4f\u89c8\u6b64notebook\u3002\n\n* [Step 1](#step1): \u5bfc\u5165\u6570\u636e\n* [Step 2](#step2): \u6570\u636e\u7814\u7a76\n* [Step 3](#step3): \u7f3a\u5931\u503c\u5904\u7406\n* [Step 4](#step4): \u7279\u5f81\u63d0\u53d6\n* [Step 5](#step5): \u57fa\u51c6\u6a21\u578b\u4e0e\u6d4b\u8bd5\n* [Step 6](#step6): XGBoost\n\n\u5728\u8be5\u9879\u76ee\u4e2d\u5305\u542b\u4e86\u5982\u4e0b\u7684\u95ee\u9898\uff1a\n\n* [\u95ee\u9898 1](#question1): \u56de\u987e\u8bfe\u4e0a\u5185\u5bb9\u5e76\u67e5\u9605\u8d44\u6599\uff0c\u5f52\u7eb3\u603b\u7ed3\u7f3a\u5931\u503c\u7684\u5904\u7406\u65b9\u6cd5\u3002\n* [\u95ee\u9898 2](#question2): \u8fd9\u91cc\u8bc4\u5206\u6807\u51c6\u4e3a\u4f55\u91c7\u7528`neg_rmspe`\uff1f\n* [\u95ee\u9898 3](#question3): \u601d\u8003\u6b64\u65f6XGBoost\u5728\u4f7f\u7528\u4ec0\u4e48\u635f\u5931\u51fd\u6570\u8fdb\u884c\u8bad\u7ec3\uff1f","baf77a76":"\u9884\u6d4b\u7ed3\u679c\u7684Public Score\u4e3a`0.10932`\uff0cPrivate Score\u4e3a`0.12051`\uff0c\u5df2\u975e\u5e38\u63a5\u8fd1Top 10%\u7684\u6807\u51c6\u7ebf`0.11773`\u3002","9b17a5e1":"<a id='step5'><\/a>\n## 5. \u57fa\u51c6\u6a21\u578b\u4e0e\u6d4b\u8bd5\n\n### 5.1 \u5b9a\u4e49\u8bc4\u4ef7\u51fd\u6570\n\n\u7531\u4e8e\u9700\u8981\u9884\u6d4b\u8fde\u7eed\u503c\uff0c\u56e0\u6b64\u9700\u8981\u91c7\u7528\u56de\u5f52\u6a21\u578b\u3002\u7531\u4e8e\u8be5\u9879\u76ee\u662fKaggle\u8d5b\u9898\uff0c\u6d4b\u8bd5\u96c6\u662f\u4f7f\u7528\u6839\u5747\u65b9\u767e\u5206\u6bd4\u8bef\u5dee(Root Mean Square Percentage Error, RMSPE)\u8bc4\u6d4b\u7684\uff0c\u56e0\u6b64\u8fd9\u91cc\u53ea\u80fd\u4f7f\u7528RMSPE\u3002RMSPE\u7684\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a\n$${\\rm RMSPE} = \\frac{1}{n}\\sqrt{\\sum\\limits_{i = 1}^n {{{\\left( {\\frac{{{y_i} - {{\\hat y}_i}}}{{{y_i}}}} \\right)}^2}}}$$\n\u5176\u4e2d$y_i$\u4e0e${\\hat y}_i$\u5206\u522b\u4e3a\u7b2c$i$\u4e2a\u6837\u672c\u6807\u7b7e\u7684\u771f\u5b9e\u503c\u4e0e\u9884\u6d4b\u503c\u3002","81b7f159":"### 5.2 \u57fa\u51c6\u6d4b\u8bd5\n\n\u5728\u4e0a\u8ff0\u7279\u5f81\u57fa\u7840\u4e0e\u8bc4\u4ef7\u51fd\u6570\u57fa\u7840\u4e0a\uff0c\u672c\u6587\u91c7\u7528**\u51b3\u7b56\u56de\u5f52\u6811**\u6a21\u578b\u8fdb\u884c\u57fa\u51c6\u6d4b\u8bd5\u3002\u5728\u4ee3\u7801\u4e2d\u76f4\u63a5\u8c03\u7528Sklearn\u4e2d\u7684`DecisionTreeRegressor`\uff0c\u914d\u5408K\u6298\u4ea4\u53c9\u9a8c\u8bc1\u4e0e\u7f51\u683c\u641c\u7d22\u5373\u53ef\uff0c\u4e3b\u8981\u8c03\u8282\u7684\u8d85\u53c2\u6570\u4e3a\u6811\u7684\u6700\u5927\u6df1\u5ea6`max_depth`\u3002\n\n<a id='question2'><\/a>\n### __\u95ee\u9898 2:__\n\n\u8fd9\u91cc\u8bc4\u5206\u6807\u51c6\u4e3a\u4f55\u91c7\u7528`neg_rmspe`\uff1f\n\n__\u56de\u7b54:__ \n","7231840c":"<a id='step4'><\/a>\n## 4. \u7279\u5f81\u63d0\u53d6\n### 4.1 \u5b9a\u4e49\u7279\u5f81\u63d0\u53d6\u51fd\u6570","42139ecc":"<a id='question3'><\/a>\n### __\u95ee\u9898 3:__\n\n\u601d\u8003\u6b64\u65f6XGBoost\u5728\u4f7f\u7528\u4ec0\u4e48\u635f\u5931\u51fd\u6570\u8fdb\u884c\u8bad\u7ec3\uff1f\n\n__\u56de\u7b54:__ \n\n\n### 6.3 \u751f\u4ea7\u63d0\u4ea4\u6587\u4ef6","105a9a06":"### 6.2 \u6a21\u578b\u8bad\u7ec3","8b5e8fc0":"\u6a21\u578b\u5728\u6d4b\u8bd5\u96c6\u4e0a\u7684Public Score\u4e3a`0.18423`\uff0cPrivate Score\u4e3a`0.22081`\u3002\u4e0b\u9762\u4f7f\u7528XGBoost\u5bf9\u57fa\u51c6\u6d4b\u8bd5\u7ed3\u679c\u8fdb\u884c\u63d0\u5347\u3002"}}