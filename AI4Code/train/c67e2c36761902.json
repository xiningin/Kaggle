{"cell_type":{"b7460827":"code","d5721dbc":"code","cf3812d2":"code","85ecdf11":"code","86ce945b":"code","091b7a79":"code","db0e502d":"code","688bb312":"code","3f162067":"code","01d6ea24":"code","7fd8aaca":"code","2d62782d":"code","590bbe05":"code","9f682a8b":"code","f63ef7b1":"code","bcc5821f":"code","50d3b62a":"code","3626dc65":"code","6565cfaa":"code","78803d94":"code","b841d102":"code","a165ed01":"code","a6e573a6":"code","2d954bff":"code","a5c0038f":"code","ff3aae24":"code","ed2c78c7":"code","66cf0ea2":"code","cd20ea68":"code","0cd14de7":"code","c463161c":"code","f800dda3":"code","c0338997":"code","74fef999":"code","edcb9a12":"code","d23c3aec":"code","dbe8692c":"code","7fa29bf2":"code","76a08e10":"code","7bd134cf":"code","e0c29cdb":"code","686c322a":"code","297d3fa0":"code","89f85753":"code","20993cbd":"code","d0b32177":"code","85582848":"code","929d946d":"markdown","8d57b62d":"markdown","8eb3890c":"markdown","6e346de4":"markdown","0fa27f35":"markdown","60a03d7b":"markdown","a7da7a69":"markdown","a4d37357":"markdown","2653e531":"markdown","a0774c3f":"markdown","4e66d4de":"markdown","2ad15cfe":"markdown","54496c74":"markdown"},"source":{"b7460827":"import pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\n\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_column', 500)","d5721dbc":"df = pd.read_csv('..\/input\/fifa19\/data.csv')","cf3812d2":"df.head()","85ecdf11":"df.shape","86ce945b":"df.head().T","091b7a79":"df.columns","db0e502d":"df.info()","688bb312":"df.describe().T","3f162067":"df.info()","01d6ea24":"df.isnull().sum()","7fd8aaca":"if df[df['Height'].isnull()].index.tolist() == df[df['Weight'].isnull()].index.tolist():\n    df.drop(df[df['Height'].isnull()].index,inplace =True)\nelse:\n    print(\"They are different\")","2d62782d":"df.isnull().sum()","590bbe05":"df.drop(['Unnamed: 0','ID','Photo','Flag','Club Logo','Real Face','Jersey Number','Loaned From'],\n          axis=1,inplace=True)","9f682a8b":"df['International Reputation'].fillna(df['International Reputation'].mean(), inplace = True) \ndf['Skill Moves'].fillna(df['Skill Moves'].mean(), inplace = True)\ndf['Weak Foot'].fillna(df['Weak Foot'].mean(), inplace = True)\ndf['Crossing'].fillna(df['Crossing'].mean(), inplace = True)\ndf['Finishing'].fillna(df['Finishing'].mean(), inplace = True)\ndf['HeadingAccuracy'].fillna(df['HeadingAccuracy'].mean(), inplace = True)\ndf['ShortPassing'].fillna(df['ShortPassing'].mean(), inplace = True)\ndf['Volleys'].fillna(df['Volleys'].mean(), inplace = True)\ndf['Dribbling'].fillna(df['Dribbling'].mean(), inplace = True) \ndf['Curve'].fillna(df['Curve'].mean(), inplace = True) \ndf['FKAccuracy'].fillna(df['FKAccuracy'].mean(), inplace = True)\ndf['LongPassing'].fillna(df['LongPassing'].mean(), inplace = True)\ndf['BallControl'].fillna(df['BallControl'].mean(), inplace = True)\ndf['Acceleration'].fillna(df['Acceleration'].mean(), inplace = True)\ndf['SprintSpeed'].fillna(df['SprintSpeed'].mean(), inplace = True)\ndf['Agility'].fillna(df['Agility'].mean(), inplace = True)\ndf['Reactions'].fillna(df['Reactions'].mean(), inplace = True)\ndf['Balance'].fillna(df['Balance'].mean(), inplace = True)\ndf['ShotPower'].fillna(df['ShotPower'].mean(), inplace = True)\ndf['Jumping'].fillna(df['Jumping'].mean(), inplace = True)\ndf['Stamina'].fillna(df['Stamina'].mean(), inplace = True)\ndf['Strength'].fillna(df['Strength'].mean(), inplace = True)\ndf['LongShots'].fillna(df['LongShots'].mean(), inplace = True)\ndf['Aggression'].fillna(df['Aggression'].mean(), inplace = True)\ndf['Interceptions'].fillna(df['Interceptions'].mean(), inplace = True)\ndf['Positioning'].fillna(df['Positioning'].mean(), inplace = True)\ndf['Vision'].fillna(df['Vision'].mean(), inplace = True)\ndf['Penalties'].fillna(df['Penalties'].mean(), inplace = True)\ndf['Composure'].fillna(df['Composure'].mean(), inplace = True)\ndf['Marking'].fillna(df['Marking'].mean(), inplace = True)\ndf['StandingTackle'].fillna(df['StandingTackle'].mean(), inplace = True)\ndf['SlidingTackle'].fillna(df['SlidingTackle'].mean(), inplace = True)\ndf['GKDiving'].fillna(df['GKDiving'].mean(), inplace = True)\ndf['GKHandling'].fillna(df['GKHandling'].mean(), inplace = True)\ndf['GKKicking'].fillna(df['GKKicking'].mean(), inplace = True)\ndf['GKPositioning'].fillna(df['GKPositioning'].mean(), inplace = True)\ndf['GKReflexes'].fillna(df['GKReflexes'].mean(), inplace = True)","f63ef7b1":"df['Club'].fillna('No Club', inplace = True)\ndf['Position'].fillna('unknown', inplace = True)","bcc5821f":"def value_conversion(Value):\n    if isinstance(Value,str):\n        out = Value.replace('\u20ac','')\n        if 'M' in out:\n            out = float(out.replace('M',''))*1000000\n        elif 'K' in Value:\n            out = float(out.replace('K',''))*1000\n        return float(out)\n\ndf['Value'] = df['Value'].apply(lambda x: value_conversion(x))\ndf['Wage'] = df['Wage'].apply(lambda x: value_conversion(x))\ndf['Release Clause'] = df['Release Clause'].apply(lambda x: value_conversion(x))\ndf['Release Clause'].fillna(df['Release Clause'].mean(), inplace = True)","50d3b62a":"df['Work Rate'].fillna('Medium\/ Medium', inplace = True)","3626dc65":"df['Work Rate'].value_counts()","6565cfaa":"df['Preferred Foot'].fillna('Right', inplace = True)","78803d94":"df['Preferred Foot'].value_counts()","b841d102":"df['Body Type'][df['Body Type'] == 'Messi'] = 'Lean'\ndf['Body Type'][df['Body Type'] == 'C. Ronaldo'] = 'Normal'\ndf['Body Type'][df['Body Type'] == 'Neymar'] = 'Lean'\ndf['Body Type'][df['Body Type'] == 'Courtois'] = 'Lean'\ndf['Body Type'][df['Body Type'] == 'PLAYER_BODY_TYPE_25'] = 'Normal'\ndf['Body Type'][df['Body Type'] == 'Shaqiri'] = 'Stocky'\ndf['Body Type'][df['Body Type'] == 'Akinfenwa'] = 'Stocky'\ndf['Body Type'].fillna('Normal', inplace = True)","a165ed01":"df['Body Type'].value_counts()","a6e573a6":"plt.figure(figsize=(14,7))\nsns.distplot(x=df['Age'], bins =60)\nplt.title('Age distribution')\nplt.show()","2d954bff":"print(\"Total No of Countries:\", df['Nationality'].nunique())\nprint(df['Nationality'].value_counts()[0:10])","a5c0038f":"nation_count = df['Nationality'].value_counts().reset_index().set_index('index').head(20).rename(columns={'Nationality': 'Count'})\nnation_count","ff3aae24":"fig, ax = plt.subplots(figsize=(14,7))\n\nsns.barplot(nation_count['Count'], nation_count.index)\nfor i,j in enumerate(nation_count['Count']):\n    ax.text(j, i+0.1, str(j))\n    \n\nplt.xlabel('Count')\nplt.ylabel('Nationality')\nplt.title('Nationality count')\nplt.show()","ed2c78c7":"print(\"Total Number of Clubs:\", df['Club'].nunique())\ndf['Club'].value_counts().head()","66cf0ea2":"df.sort_values(by = 'Overall',ascending = False).head(5).loc[:,['Name','Overall']]","cd20ea68":"df.sort_values(by = 'Potential',ascending = False).head(5).loc[:,['Name','Potential']]","0cd14de7":"df.sort_values(by = 'Value',ascending = False).head(5).loc[:,['Name','Value']]","c463161c":"df.sort_values(by = 'Wage',ascending = False).head(5).loc[:,['Name','Wage']]","f800dda3":"df['Position'].unique()","c0338997":"df['Position'].value_counts()","74fef999":"Midfielders = [\"CAM\", \"CDM\", \"CM\", \"LAM\", \"LCM\", \"LM\", \"LDM\", \"RAM\", \"RCM\", \"RDM\", \"RM\"]\nDefence = [\"CB\", \"LB\", \"LCB\", \"LWB\", \"RB\", \"RCB\", \"RWB\", ]\nForwards= [\"CF\", \"LF\", \"LS\", \"LW\", \"RF\", \"RS\", \"RW\", \"ST\"]\nGoalkeepers = ['GK']\nNot_Specific = ['unknown']\nconditions = [(df['Position'].isin(Midfielders)),\n              (df['Position'].isin(Defence)),\n              (df['Position'].isin(Forwards)),\n              (df['Position'].isin(Goalkeepers)),\n              (df['Position'].isin(Not_Specific))]\nvalues = ['Midfielders', 'Defence', 'Forwards', 'Goalkeepers','Not Specific']\ndf['Category'] = np.select(conditions, values)","edcb9a12":"df['Category'].value_counts()","d23c3aec":"sns.set_style('darkgrid')\nsns.set_context('paper', font_scale=1.4)\ncat_count = df['Category'].value_counts()\nplt.figure(figsize=(10, 10))\nsns.barplot(cat_count.values, cat_count.index, palette=\"magma\")\nplt.title('No. of players by position')\nplt.ylabel('Position')\nplt.xlabel('Players')\n\nplt.show()","dbe8692c":"a = []\nStrikers = [\"CF\",\"ST\",\"LS\",\"RS\"]\nAttacking_Winger = [\"LF\",\"RF\",\"RW\",\"LW\"]\nOffensive_Midfielders = [\"CAM\",\"CM\",\"LAM\",\"RAM\",\"LM\",\"RM\",\"LCM\",\"RCM\"]\nDefensive_Midfielders = [\"CDM\",\"CM\",\"LDM\",\"RDM\",\"LM\",\"RM\",\"LCM\",\"RCM\"]\nCenteral_Defenders = [\"CB\",\"LCB\",\"RCB\"]\nFullbacks = [\"LB\",\"RB\",\"LWB\",\"RWB\",\"LCB\",\"RCB\"]\nGoalkeepers = [\"GK\"]\nNot_Specific = ['unknown']\nconditions_2 = [(df['Position'].isin(Strikers)),\n              (df['Position'].isin(Attacking_Winger)),\n              (df['Position'].isin(Offensive_Midfielders)),\n              (df['Position'].isin(Defensive_Midfielders)),\n              (df['Position'].isin(Centeral_Defenders)),\n              (df['Position'].isin(Fullbacks)),\n              (df['Position'].isin(Goalkeepers)),\n              (df['Position'].isin(Not_Specific))]\n\npositional_values = ['Strikers', 'Attacking_Wingers', 'Offensive_Midfielders', 'Defensive_Midfielders','Central_Defenders','Fullbacks','Goalkeepers','Not Specific']\ndf['Positional_Category'] = np.select(conditions_2,positional_values)","7fa29bf2":"df['Positional_Category'].value_counts()","76a08e10":"best_striker = df[(df.Finishing >= 85) & (df.Positioning >= 80) & (df.SprintSpeed >= 75) & (df.Acceleration >= 75) & (df.ShotPower >= 85) & (df.Volleys >= 85) & (df.BallControl >= 80) & (df.Overall >= 85) & (df.Potential >= 85) & (df.Positional_Category == 'Strikers')]\nprint(\"The Best Strikers are:\")\nprint(best_striker[['Name', 'Club', 'Age', 'Nationality','Overall', 'Position']])","7bd134cf":"best_winger = df[(df.Finishing >= 80) & (df.Dribbling >= 85) & (df.Balance >= 85) & (df.BallControl >= 85) & (df.Overall >= 85) & (df.Potential >= 85) & (df.Positional_Category == 'Attacking_Wingers')]\nprint(\"The Best Attacking Wingers are:\")\nprint(best_winger[['Name', 'Club', 'Age', 'Nationality','Overall', 'Position']])","e0c29cdb":"best_offensive_midfielder = df[(df.Finishing >= 80) & (df.Dribbling >= 85) & (df.Balance >= 80) & (df.ShortPassing >= 80) & (df.ShotPower >= 75) & (df.BallControl >= 85) & (df.Overall >= 85) & (df.Potential >= 85) & (df.Positional_Category == 'Offensive_Midfielders')]\nprint(\"The Best Offensive Midfielders are:\")\nprint(best_offensive_midfielder[['Name', 'Club', 'Age', 'Nationality','Overall', 'Position']])","686c322a":"best_defensive_midfielder = df[(df.Strength >= 70) & (df.Aggression >= 80) & (df.Reactions >= 80) & (df.ShortPassing >= 80) & (df.LongPassing >= 75) & (df.Stamina >= 75) & (df.StandingTackle >= 85) & (df.Overall >= 80) & (df.Potential >= 85) & (df.Positional_Category == 'Defensive_Midfielders')]\nprint(\"The Best Defensive Midfielders are:\")\nprint(best_defensive_midfielder[['Name', 'Club', 'Age', 'Nationality','Overall', 'Position']])","297d3fa0":"best_defenders = df[(df.Strength >= 80) & (df.Aggression >= 80) & (df.Reactions >= 80) & (df.Jumping >= 80) & (df.SlidingTackle >= 80) & (df.Interceptions >= 75) & (df.Stamina >= 70) & (df.StandingTackle >= 85) & (df.Overall >= 85) & (df.Potential >= 85) & (df.Positional_Category == 'Central_Defenders')]\nprint(\"The Best Defenders are:\")\nprint(best_defenders[['Name', 'Club', 'Age', 'Nationality','Overall', 'Position']])","89f85753":"best_fullbacks = df[(df.Strength >= 70) & (df.Acceleration >= 70) & (df.Positioning >= 70) & (df.SprintSpeed >= 70) & (df.Dribbling >= 70) & (df.Crossing >= 75) & (df.Stamina >= 80) & (df.StandingTackle >= 70) & (df.Overall >= 80) & (df.Potential >= 85) & (df.Positional_Category == 'Fullbacks')]\nprint(\"The Best Fullbacks are:\")\nprint(best_fullbacks[['Name', 'Club', 'Age', 'Nationality','Overall', 'Position']])","20993cbd":"best_goalkeepers = df[(df.GKDiving >= 85) & (df.GKHandling >= 80) & (df.GKKicking >= 75) & (df.GKPositioning >= 80) & (df.GKReflexes >= 85) & (df.Overall >= 85) & (df.Potential >= 85) & (df.Positional_Category == 'Goalkeepers')]\nprint(\"The Best Goalkeepers are:\")\nprint(best_goalkeepers[['Name', 'Club', 'Age', 'Nationality','Overall', 'Position']])","d0b32177":"players_best_physic = df[(df.Agility >= 80) & (df.Strength >= 75) & (df.Balance >= 70) & (df.Acceleration >= 80) & (df.SprintSpeed >= 80) & (df.Jumping >= 80) & (df.Stamina >= 80)]\n\nprint(\"Best Physically Fit Players\")\nprint(players_best_physic[['Name', 'Club', 'Age', 'Nationality', 'Category']])","85582848":"pr_cols=['Crossing', 'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys',\n       'Dribbling', 'Curve', 'FKAccuracy', 'LongPassing', 'BallControl',\n       'Acceleration', 'SprintSpeed', 'Agility', 'Reactions', 'Balance',\n       'ShotPower', 'Jumping', 'Stamina', 'Strength', 'LongShots',\n       'Aggression', 'Interceptions', 'Positioning', 'Vision', 'Penalties',\n       'Composure', 'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving',\n       'GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes']\ni=0\nwhile i < len(pr_cols):\n    print('Best {0} : {1}, Overall Rating: {2}'.format(pr_cols[i],df.loc[df[pr_cols[i]].idxmax()][0],df.loc[df[pr_cols[i]].idxmax()][3]))\n    i += 1","929d946d":"## 4. Age Distribution","8d57b62d":"## 1.Importing Important Libreries and Loading the Dataset","8eb3890c":"## 12. Best Players according to the specific Attributes","6e346de4":"## 9. Anlaysis Based on Playing Area","0fa27f35":"# Fifa 19 Data Analysis and Visualization","60a03d7b":"## 3.Dealing with Null values and other inappropriate datas ","a7da7a69":"## 8.Position Based Distribution","a4d37357":"## 5.Nationality based Player Distribution","2653e531":"##  2.Dataset General Analysis","a0774c3f":"## 6. Club Based Distribution","4e66d4de":"## 7. Player based Analysis","2ad15cfe":"##  11.Physically best Players","54496c74":"## 10. Best Players in different Playing Areas"}}