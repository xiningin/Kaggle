{"cell_type":{"2c332e65":"code","604c2166":"code","af8bcfa8":"code","9a176807":"code","a2a13a72":"code","831655ae":"code","bf1c29d5":"code","099b2729":"code","c652d409":"code","68093924":"code","c031d0af":"code","ecd7b59f":"code","01d43acb":"code","66ba8e8e":"code","f849f393":"code","35a72445":"code","d3fe3859":"code","761843cc":"code","ceae2aa9":"code","f152b09e":"code","d179a9ab":"code","f0866fe7":"code","813612cc":"code","cbf81494":"code","27535dc2":"code","8ffabe4c":"code","1d864df5":"code","964a06e2":"code","d19b9c5c":"code","9a05d2c8":"code","bbbda7cf":"code","279fa548":"code","f7e0c9cc":"code","d89232cf":"code","19c842fa":"code","c57e3b08":"code","4aa3d348":"code","4deef829":"code","5bd75a2c":"code","767297ca":"code","b62d0573":"code","f618146a":"code","b1171acb":"code","0dad6d6e":"code","e75f65a6":"code","6a52b833":"code","4f91bff7":"code","5165a110":"code","a863da19":"code","d3fbcad5":"code","fbadc852":"code","9a2495d6":"code","b0d2c510":"markdown","29199d26":"markdown","d3cf60c3":"markdown","0f25ea06":"markdown","f34cc0fc":"markdown","9e43d322":"markdown","d55c51e8":"markdown"},"source":{"2c332e65":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn import linear_model\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","604c2166":"import warnings\nwarnings.filterwarnings('ignore')","af8bcfa8":"pd.options.display.max_columns = 100","9a176807":"#FOR Kaggle\nsample = pd.read_csv('\/kaggle\/input\/mlbio1\/sample_submission.csv')\ntest = pd.read_csv('\/kaggle\/input\/mlbio1\/test.csv')\ntrain = pd.read_csv('\/kaggle\/input\/mlbio1\/train.csv')\n\n#For local\n# sample = pd.read_csv('healthcare-dataset-stroke-data\/sample_submission.csv')\n# test = pd.read_csv('healthcare-dataset-stroke-data\/test.csv')\n# train = pd.read_csv('healthcare-dataset-stroke-data\/train.csv')","a2a13a72":"train.head()","831655ae":"#counts of nan\nfor i in train.columns:\n    print(i, (pd.isnull(train[i])).sum() )","bf1c29d5":"train['bmi'].head()   #bmi is numeric column","099b2729":"# fill with mean\nmean_bmi = train['bmi'].mean()\ntrain['bmi'] = train['bmi'].fillna(mean_bmi)\ntest['bmi'] = test['bmi'].fillna(mean_bmi)","c652d409":"# fill with median\n# median_bmi = train['bmi'].median()\n# train['bmi'] = train['bmi'].fillna(median_bmi)\n# test['bmi'] = test['bmi'].fillna(median_bmi)","68093924":"# fill with zero\n\n# train['bmi'] = train['bmi'].fillna(0)\n# test['bmi'] = test['bmi'].fillna(0)","c031d0af":"train['smoking_status'].head()   #smoking_status is categorical column","ecd7b59f":"train['smoking_status'] = train['smoking_status'].fillna('nan')\ntest['smoking_status'] = test['smoking_status'].fillna('nan')","01d43acb":"train['work_type'].value_counts()","66ba8e8e":"for i in train['work_type'].unique():\n    print(i)\n    train['work_type_is_{}'.format(i)] = (train['work_type'] == i)*1\n    test['work_type_is_{}'.format(i)] = (test['work_type'] == i)*1","f849f393":"train.head()","35a72445":"(train.groupby(['smoking_status'])['stroke'].agg(['mean'])).to_dict()","d3fe3859":"smoking_status_target_enc_dict = (train.groupby(['smoking_status'])['stroke'].agg(['mean'])).to_dict()['mean']","761843cc":"smoking_status_target_enc_dict","ceae2aa9":"train['smoking_status_target_enc'] = train['smoking_status'].replace(smoking_status_target_enc_dict)\ntest['smoking_status_target_enc'] = test['smoking_status'].replace(smoking_status_target_enc_dict)","f152b09e":"# Binary variables \ntrain['ever_married'].value_counts() ","d179a9ab":"train['ever_married'] = train['ever_married'].replace({'Yes':1, 'No':0 })\ntest['ever_married'] = test['ever_married'].replace({'Yes':1, 'No':0 })","f0866fe7":"train.head()","813612cc":"train['Residence_type'].value_counts()","cbf81494":"train['Residence_type'] = train['Residence_type'].replace({'Urban':1, 'Rural':0 })\ntest['Residence_type'] = test['Residence_type'].replace({'Urban':1, 'Rural':0 })","27535dc2":"# smoking_status binary encoding\nfor i in train['smoking_status'].unique():\n    print(i)\n    train['smoking_status_is_{}'.format(i)] = (train['smoking_status'] == i)*1\n    test['smoking_status_is_{}'.format(i)] = (test['smoking_status'] == i)*1","8ffabe4c":"train.head()","1d864df5":"train['gender'].value_counts()","964a06e2":"(train.groupby(['gender'])['stroke'].agg(['mean']))","d19b9c5c":"gender_target_enc_dict = (train.groupby(['gender'])['stroke'].agg(['mean'])).to_dict()['mean']\n\ntrain['gender_target_enc'] = train['gender'].replace(gender_target_enc_dict)\ntest['gender_target_enc'] = test['gender'].replace(gender_target_enc_dict)","9a05d2c8":"train.head()","bbbda7cf":"#from sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold","279fa548":"from sklearn.metrics import roc_auc_score","f7e0c9cc":"# I select 7 features","d89232cf":"features = [  'age',\n            'hypertension' , 'heart_disease' , 'ever_married' ,\n            'avg_glucose_level' ,'bmi']","19c842fa":"\nclf = linear_model.SGDClassifier(max_iter=1000,  loss='log', penalty = 'elasticnet')\n","c57e3b08":"#DIY\n\ndef my_cross_validation_for_roc_auc( clf, X, y ,cv=5):\n    X = np.array(X.copy())\n    y = np.array(y.copy())\n    kf = KFold(n_splits=cv)\n    kf.get_n_splits(X)\n    scores = []\n    for train_index, test_index in kf.split(X):\n        #print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n        X_train, X_test = X[train_index], X[test_index]\n        y_train, y_test = y[train_index], y[test_index]\n        \n        clf.fit(X_train, y_train)\n        prediction_on_this_fold = clf.predict_proba(X_test)[:,1]\n        \n        score = roc_auc_score(y_score=prediction_on_this_fold, y_true=y_test)\n        scores.append(score)\n        \n    return scores\n        \n","4aa3d348":"scores = my_cross_validation_for_roc_auc(clf, train[features] , train['stroke'])\n","4deef829":"scores","5bd75a2c":"# mean score on train dataset\nnp.mean(scores)","767297ca":"train.head()","b62d0573":"all_features = [ 'age', 'hypertension', 'heart_disease', 'ever_married',\n        'Residence_type', 'avg_glucose_level', 'bmi',\n         'work_type_is_children',\n       'work_type_is_Private', 'work_type_is_Never_worked',\n       'work_type_is_Self-employed', 'work_type_is_Govt_job',\n       'smoking_status_target_enc', 'smoking_status_is_nan',\n       'smoking_status_is_never smoked', 'smoking_status_is_formerly smoked',\n       'smoking_status_is_smokes', 'gender_target_enc']","f618146a":"features_scores = {}\nfor f in all_features:\n    scores = my_cross_validation_for_roc_auc(clf, train[[f]] , train['stroke'])\n    print(f,  np.mean(scores))\n    features_scores[f] = np.mean(scores)","b1171acb":"features_2=['age', 'hypertension', 'heart_disease', 'ever_married', 'avg_glucose_level', 'bmi', \n             'work_type_is_children', 'work_type_is_Self-employed', 'smoking_status_target_enc']","0dad6d6e":"scores = my_cross_validation_for_roc_auc(clf, train[features_2] , train['stroke'])\n","e75f65a6":"scores","6a52b833":"np.mean(scores)","4f91bff7":"\nclf = linear_model.SGDClassifier(max_iter=1000,  loss='log', penalty = 'elasticnet')\n\nclf.fit(train[features_2], train['stroke'])","5165a110":"from lightgbm import LGBMClassifier","a863da19":"lgb =   LGBMClassifier(n_estimators=100, max_depth=5)","d3fbcad5":"scores = my_cross_validation_for_roc_auc(lgb, train[features_2] , train['stroke'])","fbadc852":"scores","9a2495d6":"np.mean(scores)","b0d2c510":"# Cross validation","29199d26":"# Feature selection","d3cf60c3":"### target encoding","0f25ea06":"\n![CV](https:\/\/scikit-learn.org\/stable\/_images\/grid_search_cross_validation.png)","f34cc0fc":"# replace categorical values to number","9e43d322":"# Fill NA strategies","d55c51e8":"### Example1"}}