{"cell_type":{"8471b60f":"code","f96264e6":"code","59d98e4f":"code","fe9b0b65":"code","8a9e5eff":"code","ca15c3a8":"code","d5670720":"markdown","9c59c0fb":"markdown","673c7c39":"markdown"},"source":{"8471b60f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nprint(os.listdir(\"..\/input\"))\n\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\nfrom scipy.optimize import brute, minimize\nimport time","f96264e6":"oof1 = pd.read_csv('..\/input\/lgb-2-leaves-augment\/lgb_oof.csv')\noof2 = pd.read_csv('..\/input\/lgb-2-leaves-augment\/lgb_oof.csv')\n\noof_tuple = tuple([oof1, oof2])","59d98e4f":"def obj_func(x, *oof_list):\n    oof = 0\n    x[x<0] = 0\n    x = x\/np.sum(x)\n    for i in range(min(len(x), len(oof_list))):\n        oof += x[i]*oof_list[i]['predict']\n    ground_truth = oof_list[0]['target']\n    return -roc_auc_score(ground_truth, oof)","fe9b0b65":"obj_func(np.array([1, 1, 1, 1]), *oof_tuple)","8a9e5eff":"st = time.time()\nres = minimize(obj_func, x0=np.ones((2, )), args=oof_tuple, method='Nelder-Mead')\nprint((time.time()-st), 'sec.')","ca15c3a8":"print('The optimal weights are', res.x)\nprint('The optimal OOF AUC is', -res.fun)","d5670720":"Optimize weighted AUC  without gradient.","9c59c0fb":"## This kernel demonstrate a weighted blending method that optimizes the AUC metric","673c7c39":"For demonstration purpose, two identical OOFs are used. In practice we could replace them with as many different OOFs as possible."}}