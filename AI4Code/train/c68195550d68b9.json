{"cell_type":{"89a634e4":"code","940b065b":"code","18d743a0":"code","d863dee9":"code","a910d86b":"code","c1a73efa":"code","a2456418":"code","f8e1b6d9":"code","dc73864f":"code","8080a9ff":"code","c3a4781f":"code","4e684753":"code","17be6670":"code","a93fdcba":"code","05ddac7b":"code","65644d4e":"code","5d2a2c10":"code","130b6114":"code","329b0c78":"code","e14afd16":"code","70b29c11":"code","e740228c":"code","b4326858":"code","74108be0":"code","3f239173":"code","58f19ff0":"code","220cdc1d":"code","09d31ab5":"code","d58843b0":"code","a9014124":"code","6c8008d9":"code","0fde6f80":"code","111909df":"code","3924cb2c":"code","10659635":"code","1e9b87b1":"code","7c5c7c50":"code","e53c68e5":"code","50611c70":"code","7c106b22":"code","64bdceb1":"code","7c51318b":"code","441b7983":"code","501d54c1":"code","3c5554f3":"code","179b6d7e":"code","0f6482b4":"code","a4ffb312":"code","2c2f07bf":"code","1ea60470":"code","c0d84c9b":"code","1e39db95":"code","0e52a0e9":"code","9481ac5e":"code","982218ff":"code","9850d783":"code","955aa13f":"code","5ff1f685":"code","e7ea70ec":"code","e62e10f2":"code","0f392cea":"code","2c37d8e9":"code","8ed9de27":"code","c3a555d4":"code","27236926":"code","691a4683":"code","82a45e78":"markdown","3efa427d":"markdown","21a4adac":"markdown","c19b742a":"markdown","8d9328cd":"markdown","008eaff3":"markdown","e1354d03":"markdown","60dd3551":"markdown","1f285980":"markdown","3decd0a6":"markdown","cca47900":"markdown","a82d1706":"markdown","ff18109d":"markdown","ae6491db":"markdown","906ba6e2":"markdown","03d394f6":"markdown","1fb53ce7":"markdown","4e19c76a":"markdown","2148a583":"markdown","b5b06553":"markdown","a36f4100":"markdown","bb3f1fdb":"markdown","08ab0078":"markdown","b654f1af":"markdown","bdbf97c6":"markdown","8a8e42d7":"markdown","32cab39c":"markdown","b3d3d753":"markdown","c799e21c":"markdown","7200a6da":"markdown","5f59a132":"markdown","fbaff828":"markdown","1f18a188":"markdown","f93b73aa":"markdown","adc9fb71":"markdown","cccaea61":"markdown"},"source":{"89a634e4":"output_path = \".\/\" # Where are outputs stored in your notebook? (With trailing slash, eg \/output\/)\ninput_path = \"..\/input\/tmdb-box-office-prediction\/\" # Where can inputs be stored? (With trailing slash, eg \/input\/)\n\n# Uncomment these if the test.csv and train.csv don't exist in INPUT_PATH\n#!wget -q --show-progress --no-check-certificate 'https:\/\/docs.google.com\/uc?export=download&id=13f3n4H67RjbEHPl_A4i9R6oY9jUa2eOm' -O {input_path}test.csv\n#!wget -q --show-progress --no-check-certificate 'https:\/\/docs.google.com\/uc?export=download&id=1JxEPMg415Y6NIslXcL9mWGr8RMx86B6Y' -O {input_path}train.csv\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport missingno as mno\nimport math\nimport json\nfrom multiprocessing import Pool\nimport multiprocessing\nfrom tqdm import tqdm,trange,tqdm_notebook\nfrom time import sleep\nfrom sklearn.model_selection import train_test_split\nprint(\"Ready\")","940b065b":"df_train = pd.read_csv(input_path + 'train.csv', parse_dates=[\"release_date\"])\ndf_test = pd.read_csv(input_path + 'test.csv', parse_dates=[\"release_date\"])\ndf_test.info()\ndf_all = pd.concat([df_train, df_test])\ndf_all.reset_index(inplace=True)\n\n# Initialize your new features here\ndf_all['cast_json'] = \"\"\ndf_all['crew_json'] = \"\"\ndf_all.insert(0, 'popularity_cast', np.float64(0))\ndf_all.insert(0, 'popularity_crew', np.float64(0))\ndf_all.insert(0, 'has_homepage', 0)","18d743a0":"# The JSON payloads are not valid JSON!!\n# These functions help us parse the invalid JSON to native python objects\n# Using regular expressions\n\nimport re\ndef repl_quotes(m):\n  preq = m.group(1)\n  qbody = m.group(2)\n  qbody = re.sub(r'\"', r\"'\", qbody)\n  return preq + '\"' + qbody + '\"'\n\n\n# Thanks user1384220 of StackOverflow\n# https:\/\/stackoverflow.com\/questions\/62012736\/regex-replace-double-quotes-in-json\n# Takes an unsafe JSON s, and returns the native py object and safe json string\ndef to_json(s):\n  safe = s.replace(\"'\", '\"')\n  safe = re.sub(r'(\"[\\s\\w]*)\"([\\s\\w]*\")',r\"\\1'\\2\", safe)  # O'Brien\n  safe = re.sub( r'([:\\[,{]\\s*)\"(.*?)\"(?=\\s*[:,\\]}])', repl_quotes, safe ) # Alex \"Nickname\" Schittko\n  safe = safe.replace(\"None\", 'null')\n  safe = safe.replace(\"\\\\'\", \"'\")\n  safe = safe.replace(\"\\\\x92\", \"'\")\n  safe = safe.replace(\"\\\\xa0\", \"-\")\n  safe = safe.replace(\"\\\\xad\", \"-\")\n\n  #print(safe)\n  try:\n    cast_json = json.loads(safe)\n  except:\n    print(\"to_json() failed for string\")\n    print(safe)\n\n  return cast_json, safe","d863dee9":"# This code splits df_all back to df_test\/df_train\n\ndef split_from_all(df):\n    df_train = df.iloc[:3000,:]\n    df_test = df.iloc[3000:,:]\n    return df_train,df_test\n\n# We can iterate df's faster as dicts.\ndef quickIt(df):\n    data = df.to_dict('index')\n    idxs = df.index.values\n    return data, idxs\n","a910d86b":"df_train.head()","c1a73efa":"df_train.info()","a2456418":"mno.matrix(df_train, (20,6))","f8e1b6d9":"# How else do we tell if the data is correlated","dc73864f":"categorical_cols_train= df_train.select_dtypes(include=['object'])\ncategorical_cols_test= df_test.select_dtypes(include=['object'])\nprint(f'The train dataset contains {len(categorical_cols_train.columns.tolist())} categorical columns')\nfor cols in categorical_cols_train.columns:\n    print(cols,':', len(categorical_cols_train[cols].unique()),'labels')\n\nprint(f'The test dataset contains {len(categorical_cols_test.columns.tolist())} categorical columns')\nfor cols in categorical_cols_test.columns:\n    print(cols,':', len(categorical_cols_test[cols].unique()),'labels')\n\ncategorical_cols_train.describe()","8080a9ff":"print(\"Scalar features\")\nfor col in df_all.columns:\n    if col not in categorical_cols_train:\n        print(col)","c3a4781f":"# Checking status' values\ndf_all['status'].unique()\n\n","4e684753":"import plotly.graph_objects as go\n\nnight_colors = ['#D3DBDD',  'navy',  '#57A7F3']\nlabels = [x for x in df_train.status.value_counts().index]\nvalues = df_train.status.value_counts()\n\n# Use `hole` to create a donut-like pie chart\nfig=go.Figure(data=[go.Pie(labels=labels,values=values,hole=.3,pull=[0,0,0.06,0])])\n\nfig.update_layout(\n    title_text=\"Training Set - Movie Status\")\nfig.update_traces(marker=dict(colors=night_colors))\nfig.show()","17be6670":"\nnight_colors = ['#D3DBDD',  'navy',  '#57A7F3']\nlabels = [x for x in df_test.status.value_counts().index]\nvalues = df_test.status.value_counts()\n\n# Use `hole` to create a donut-like pie chart\nfig=go.Figure(data=[go.Pie(labels=labels,values=values,hole=.3,pull=[0,0,0.06,0])])\n\nfig.update_layout(\n    title_text=\"Test Set - Movie Status\")\nfig.update_traces(marker=dict(colors=night_colors))\nfig.show()","a93fdcba":"# Collection Iteration Feature\n\ncreated_collection_iteration = False\n\n# First we can iterate over the rows and determine who doesn't belong to a collection.\n# They'll be the first movies in their Series, for now\n\ntotalSingle = 0\nfor k, v in df_all.iterrows():\n    collect = v['belongs_to_collection']\n    if pd.isna(collect):\n      #print(\"pd.isna(collect): \" + str(collect))\n      if not created_collection_iteration:\n        try:\n          df_all.insert(k, \"collection_iteration_seq\", 0)\n          df_all.insert(k, \"single\", 0)\n          created_collection_iteration = True\n          df_all.at[k, 'collection_iteration_seq'] = 1\n          df_all.at[k, 'single'] = 1\n        except:\n          df_all.at[k, 'collection_iteration_seq'] = 1\n          df_all.at[k, 'single'] = 1\n      else:\n        df_all.at[k, 'collection_iteration_seq'] = 1\n        df_all.at[k, 'single'] = 1\n\n      totalSingle+=1\n\nprint(\"Set \" + str(totalSingle) + \" singles\")\ndf_all.info()\nmno.matrix(df_all, (10,5))","05ddac7b":"df_all['collection_iteration_seq'].unique()","65644d4e":"# Identifying \"Single movies\"\n\ncollection_ids = []\ncreated_collection_id = False\n\nmoviesInSeries = 0\n# Iterate all the rows again, and safely read the JSON string in belongs_to_collection\nall = df_all.to_dict('index')","5d2a2c10":"df_all['collection_iteration_seq'].unique()","130b6114":"# Identifying series position for movies\n\n# Silence Pandas SettingWithCopyWarning\npd.options.mode.chained_assignment = None\nmoviesInSeries = 0\nfor cid in collection_ids:\n    movies = df_all.loc[df_all['collection_id'] == cid]\n    # SettingWithCopyWarning thrown here but it's ok, we know we're doing this on a copy\n    # We don't need the copy after we set the counter in the next loop.\n    movies.sort_values(by='release_date', inplace=True)\n    \n    counter = 1\n    # Apply the value to collection_iteration_seq\n    for k, v in movies.iterrows():\n      df_all.at[k, 'collection_iteration_seq'] = counter\n      counter += 1    \n      moviesInSeries += 1\n\nprint(\"Marked collection_iteration_seq on \" + str(moviesInSeries))\n\n# Put back Pandas SettingWithCopyWarning\npd.options.mode.chained_assignment = \"warn\"\nmno.matrix(df_all, (10,5))","329b0c78":"df_all['collection_iteration_seq'].unique()","e14afd16":"# now drop collection_id and belongs_to_collection\n\ndf_all.drop(labels=['belongs_to_collection'], axis=1, inplace=True)","70b29c11":"# Now create df_train and df_test again\ndf_train,df_test = split_from_all(df_all)","e740228c":"mno.matrix(df_train, (10,5))","b4326858":"df_train['single'].unique()","74108be0":"df_train['collection_iteration_seq'].unique()","3f239173":"df_train.describe()","58f19ff0":"# Reduce fragmenting of DataFrame\ndf_all = df_all.copy()","220cdc1d":"# Here we build a list of all actors\n\nactors=[]\nall = df_all.to_dict('index')\nfor k in all:\n  v = all[k]\n  cast_str = v['cast']\n  if str(cast_str) == \"nan\":\n    continue\n  cast_json, safe = to_json(cast_str)\n  df_all.at[k,'cast_json'] = safe\n  for actor in cast_json:\n    #print(actor['name'])\n    actors.append(actor['name'])\ndf_all.drop(['cast'], axis=1)\ndf_all = df_all.copy()\n\n# Now we remove duplicates and create a dataframe to contain our actors\n\nactors=list(set(actors))\nactors_dict=[]\nfor actor in actors:\n    actors_dict.append({'name':actor,'rating':0,'movies':0})\n\ndf_cast = pd.DataFrame(actors_dict)\ndf_cast.drop_duplicates(subset=['name'], keep='first')\n# This speeds us up from 5 frames per second to thousands of frames per second, CPU Only.\ndf_cast.set_index(['name'],inplace=True)\ndf_cast.info()\ndf_cast.index.name","09d31ab5":"%%time\n# This part computes the sum of movies & ratings in the df_cast dataframe\n#dict_cast = df_cast.to_dict('records')\nall = df_all.to_dict('index')\n\nidxs = df_all.index.values\nfor k in tqdm(idxs,desc=\"Computing sums\",unit=\"Film\"):\n    #print(\"k: \" + str(k))\n    v = all[k]\n    cast_json = v['cast_json']\n    popularity = v['popularity']\n    #print(cast_json)\n    #print(popularity)\n    if str(cast_json) == \"nan\" or str(cast_json) == \"\":\n      #print(\"bail\")\n      continue\n    actors = json.loads(cast_json)\n    #print(type(actors))\n    for actor in actors:\n      #print(actor)\n      idx = actor['name']\n      df_cast.at[idx, 'rating'] += popularity\n      df_cast.at[idx, 'movies'] += 1\n\n\n#print(df_cast[0\ndf_cast.info()\ndf_cast.describe()\n","d58843b0":"# Now we compute the average ratings per actor\ncast_idxs = df_cast.index.values\ncast = df_cast.to_dict('index')\nfor k in tqdm(cast_idxs,desc=\"Computing averages\",unit=\"Actor\"):\n  v = cast[k]\n  sum_movies = v['movies']\n  sum_rating = v['rating']\n  try:\n    new_rating = sum_rating \/ sum_movies \n  except:\n    new_rating = 0\n  \n  df_cast.at[k,'rating'] = new_rating","a9014124":"df_cast.describe()","6c8008d9":"# Let's see what the new feature looks like\nax = plt.gca()\n\ndf_cast.plot(kind='scatter',x='movies',y='rating',color='blue',ax=ax)\n\nplt.show()","0fde6f80":"for idx in tqdm(idxs,desc=\"Comptuing film popularity_cast\",unit=\"Film\"):\n    film = all[idx]\n    popularity_cast = 0\n    count = 0\n    cast_json = df_all.at[idx,'cast_json']\n    if cast_json == \"\":\n        continue\n    try:\n        actors = json.loads(cast_json)\n        if len(actors) > 0:\n            for actor in actors:\n                popularity_cast += df_cast.at[actor['name'],'rating']\n                count+=1\n    except Exception as e:\n        print(\"Failed for film\")\n        print(film)\n        print(e)\n        \n    try:\n        rating = popularity_cast \/ count\n    except:\n        rating = 0\n    \n    if (rating > 100):\n        print(film['original_title'] + \" \" + str(rating))\n    \n    df_all.at[idx,'popularity_cast'] = rating\n\ndf_all[df_all['original_title'] == 'Minions']['popularity_cast']","111909df":"df_all.describe()","3924cb2c":"# Let's see what it looks like\nax = plt.gca()\n\ndf_all.plot(kind='scatter',x='revenue',y='popularity_cast',color='blue',ax=ax, figsize=(12,8))\n\nplt.show()\n\nax = plt.gca()\n\ndf_all.plot(kind='scatter',x='revenue',y='popularity',color='red',ax=ax, figsize=(12,8))\n\nplt.show()","10659635":"# Here we build a list of all cast members\n\ncrews=[]\nall = df_all.to_dict('index')\nfor k in all:\n  v = all[k]\n  crew_str = v['crew']\n  if str(crew_str) == \"nan\":\n    continue\n  crew_json, safe = to_json(crew_str)\n  df_all.at[k,'crew_json'] = safe\n  for crew in crew_json:\n    crews.append(crew['name'])\ndf_all.drop(['crew'], axis=1)\ndf_all = df_all.copy()\n\n# Now we remove duplicates and create a dataframe to contain our actors\n\ncrews=list(set(crews))\ncrews_dict=[]\nfor crew in crews:\n    crews_dict.append({'name':crew,'rating':0,'movies':0})\n\ndf_crew = pd.DataFrame(crews_dict)\ndf_crew.drop_duplicates(subset=['name'], keep='first')\n# This speeds us up from 5 frames per second to thousands of frames per second, CPU Only.\ndf_crew.set_index(['name'],inplace=True)\ndf_crew.info()\ndf_crew.index.name","1e9b87b1":"%%time\n# This part computes the sum of movies & ratings in the df_crew dataframe\nall = df_all.to_dict('index')\n\nidxs = df_all.index.values\nfor k in tqdm(idxs,desc=\"Computing sums\",unit=\"Film\"):\n    v = all[k]\n    crew_json = v['crew_json']\n    popularity = v['popularity']\n    if str(crew_json) == \"nan\" or str(crew_json) == \"\":\n      continue\n    crews = json.loads(crew_json)\n    for crew in crews:\n      idx = crew['name']\n      df_crew.at[idx, 'rating'] += popularity\n      df_crew.at[idx, 'movies'] += 1\n\ndf_crew.info()\ndf_crew.describe()\n","7c5c7c50":"# Now we compute the average ratings per crew member\ncrew_idxs = df_crew.index.values\ncrew = df_crew.to_dict('index')\nfor k in tqdm(crew_idxs,desc=\"Computing averages\",unit=\"Actor\"):\n  v = crew[k]\n  sum_movies = v['movies']\n  sum_rating = v['rating']\n  try:\n    new_rating = sum_rating \/ sum_movies \n  except:\n    new_rating = 0\n  \n  df_crew.at[k,'rating'] = new_rating\n    \ndf_crew.describe()\n","e53c68e5":"ax = plt.gca()\n\ndf_crew.plot(kind='scatter',x='movies',y='rating',color='blue',ax=ax)\n\nplt.show()","50611c70":"for idx in tqdm(idxs,desc=\"Comptuing film popularity_crew\",unit=\"Film\"):\n    film = all[idx]\n    popularity_crew = 0\n    count = 0\n    crew_json = df_all.at[idx,'crew_json']\n    if crew_json == \"\":\n        continue\n    try:\n        crews = json.loads(crew_json)\n        if len(crews) > 0:\n            for crew in crews:\n                popularity_crew += df_crew.at[crew['name'],'rating']\n                count+=1\n    except Exception as e:\n        print(\"Failed for film\")\n        print(film)\n        print(e)\n        \n    try:\n        rating = popularity_crew \/ count\n    except:\n        rating = 0\n    \n    if (rating > 100):\n        print(film['original_title'] + \" \" + str(rating))\n    \n    df_all.at[idx,'popularity_crew'] = rating\n\ndf_all[df_all['original_title'] == 'Minions']['popularity_crew']","7c106b22":"# Let's see what it looks like\nax = plt.gca()\n\ndf_all.plot(kind='scatter',x='revenue',y='popularity_crew',color='blue',ax=ax, figsize=(20,8))\ndf_all.plot(kind='scatter',x='revenue',y='popularity_cast',color='red',ax=ax, figsize=(20,8))\ndf_all.plot(kind='scatter',x='revenue',y='popularity',color='green',ax=ax, figsize=(20,8))\n\nplt.show()","64bdceb1":"### ","7c51318b":"data, idxs = quickIt(df_all)\n#print(data)\nfor k in idxs:\n    v = data[k]\n    if v['homepage'] == \"\" or str(v['homepage']) == \"nan\":\n      df_all.at[k,'has_homepage'] = 0\n    else:\n      df_all.at[k,'has_homepage'] = 1  ","441b7983":"df_all['has_homepage'].unique()\ndf_test.info()\ndf_train, df_test = split_from_all(df_all)\ndf_test.info()\n","501d54c1":"ax = plt.gca()\n\ndf_all.plot(kind='scatter',x='revenue',y='has_homepage',color='blue',ax=ax, figsize=(20,8))\n\nplt.show()","3c5554f3":"df_all.drop(labels=['homepage'], axis=1, inplace=True)\n","179b6d7e":"df_all.describe()","0f6482b4":"df_all.info()","a4ffb312":"len(df_all['original_language'].unique())","2c2f07bf":"# df_all.drop([\"original_title\",\"cast\",\"crew\",\"cast_json\",\"crew_json\",\"title\",\"imdb_id\"],axis=1,inplace=True)","1ea60470":"df_train,df_test = split_from_all(df_all)\ndf_train.info()","c0d84c9b":"df_test.info()","1e39db95":"mno.matrix(df_test,(20,6))","0e52a0e9":"df_test.describe()","9481ac5e":"# Training the model\nX = df_train.drop(['single','has_homepage','cast_json','crew_json','crew','cast','Keywords','title','tagline','status','spoken_languages','release_date','production_companies','production_countries','poster_path','overview','original_title','original_language','imdb_id','genres','id','index'], axis=1)\nX.dropna(inplace=True)\nX.info()\ny = X['revenue'].to_numpy()\nX.drop(['revenue'],axis=1,inplace=True)\nX = X.to_numpy()\n\n# This makes it so the model test later sees data it's seen before\n# This concept stinks, but we want to maximize the amount of data we use for training too.\n\n_, X_test, _, y_test = train_test_split(\n     X, y, test_size=0.33)\n\nX_train = X\ny_train = y\n\nimport sklearn.ensemble as ske\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.datasets import make_regression\nfrom sklearn.linear_model import LinearRegression\n\ntrain_scores = []\nlr_models = []\nmax_depth_k = 2 # After about depth 14 the score stays stagnant\nfor k in tqdm(range(1,max_depth_k),desc=\"Training models\",unit=\"LinearRegression\"):\n  #regr = DecisionTreeRegressor(max_depth=k)\n  #rfeRegr = ske.RandomForestRegressor(max_depth=k)\n  lr = LinearRegression()\n  lr.fit(X_train, y_train)\n  train_scores.append(lr.score(X_train, y_train))\n  lr_models.append(lr)\n\nimport matplotlib.pyplot as plt\nplt.rcParams[\"figure.figsize\"] = (12,6)\n\nfig, ax = plt.subplots()\nxi = np.arange(1, max_depth_k, step=1)\ny = train_scores\n\nplt.ylim(0.0,1.1)\nplt.plot(xi, y, marker='o', linestyle='--', color='b')\n\nplt.xlabel('max_depth')\nplt.xticks(np.arange(0, max_depth_k, step=1)) #change from 0-based array index to 1-based human-readable label\nplt.ylabel('Accuracy Score (%)')\nplt.title('n_estimators for AdaBoostRegressor + base LinearRegressor')\n\nplt.axhline(y=0.95, color='r', linestyle='-')\nplt.text(0.5, 0.85, '95% cut-off threshold', color = 'red', fontsize=16)\nplt.axhline(y=0.80, color='r', linestyle='-')\nplt.text(0.5, 0.70, '80% cut-off threshold', color = 'red', fontsize=16)\n\nax.grid(axis='x')\nplt.show()\n","982218ff":"!pip install pydotplus\n\nfrom sklearn.tree import export_graphviz\nimport pydotplus\nfrom IPython.display import Image\n\n# This can show a decision tree for RandomForestRegressor\n#gvz = export_graphviz(selected_model.estimators_[0]) \n#graph = pydotplus.graph_from_dot_data(gvz) \n#Image(graph.create_png())","9850d783":"# Training the model\nX = df_train.drop(['single','has_homepage','cast_json','crew_json','crew','cast','Keywords','title','tagline','status','spoken_languages','release_date','production_companies','production_countries','poster_path','overview','original_title','original_language','imdb_id','genres','id','index'], axis=1)\nX.dropna(inplace=True)\nX.info()\ny = X['revenue'].to_numpy()\nX.drop(['revenue'],axis=1,inplace=True)\nX = X.to_numpy()\n\n# This makes it so the model test later sees data it's seen before\n# This concept stinks, but we want to maximize the amount of data we use for training too.\n\n_, X_test, _, y_test = train_test_split(\n     X, y, test_size=0.33)\n\nX_train = X\ny_train = y\n\nimport sklearn.ensemble as ske\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.datasets import make_regression\n\ntrain_scores = []\nrandom_forest_models = []\nmax_depth_k = 21 # After about depth 14 the score stays stagnant\nfor k in tqdm(range(1,max_depth_k),desc=\"Training models\",unit=\"RandomForestRegressor\"):\n  #regr = DecisionTreeRegressor(max_depth=k)\n  regr = ske.RandomForestRegressor(max_depth=k)\n  #regr = ske.AdaBoostRegressor(base_estimator=rfeRegr,n_estimators=100)\n  regr.fit(X_train, y_train)\n  train_scores.append(regr.score(X_train, y_train))\n  random_forest_models.append(regr)\n\nimport matplotlib.pyplot as plt\nplt.rcParams[\"figure.figsize\"] = (12,6)\n\nfig, ax = plt.subplots()\nxi = np.arange(1, max_depth_k, step=1)\ny = train_scores\n\nplt.ylim(0.0,1.1)\nplt.plot(xi, y, marker='o', linestyle='--', color='b')\n\nplt.xlabel('max_depth')\nplt.xticks(np.arange(0, max_depth_k, step=1)) #change from 0-based array index to 1-based human-readable label\nplt.ylabel('Accuracy Score (%)')\nplt.title('RandomForestRegressor')\n\nplt.axhline(y=0.95, color='r', linestyle='-')\nplt.text(0.5, 0.85, '95% cut-off threshold', color = 'red', fontsize=16)\nplt.axhline(y=0.80, color='r', linestyle='-')\nplt.text(0.5, 0.70, '80% cut-off threshold', color = 'red', fontsize=16)\n\nax.grid(axis='x')\nplt.show()\n","955aa13f":"# Training the model\nX = df_train.drop(['single','has_homepage','cast_json','crew_json','crew','cast','Keywords','title','tagline','status','spoken_languages','release_date','production_companies','production_countries','poster_path','overview','original_title','original_language','imdb_id','genres','id','index'], axis=1)\nX.dropna(inplace=True)\nX.info()\ny = X['revenue'].to_numpy()\nX.drop(['revenue'],axis=1,inplace=True)\nX = X.to_numpy()\n\n# This makes it so the model test later sees data it's seen before\n# This concept stinks, but we want to maximize the amount of data we use for training too.\n\n_, X_test, _, y_test = train_test_split(\n     X, y, test_size=0.33)\n\nX_train = X\ny_train = y\n\nimport sklearn.ensemble as ske\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.datasets import make_regression\n\ntrain_scores = []\ndecision_tree_models = []\nmax_depth_k = 21 # After about depth 14 the score stays stagnant\nfor k in tqdm(range(1,max_depth_k),desc=\"Training models\",unit=\"DecisionTreeRegressor\"):\n  regr = DecisionTreeRegressor(max_depth=k)\n  #regr = ske.RandomForestRegressor(max_depth=k)\n  #regr = ske.AdaBoostRegressor(base_estimator=rfeRegr,n_estimators=100)\n  regr.fit(X_train, y_train)\n  train_scores.append(regr.score(X_train, y_train))\n  decision_tree_models.append(regr)\n\nimport matplotlib.pyplot as plt\nplt.rcParams[\"figure.figsize\"] = (12,6)\n\nfig, ax = plt.subplots()\nxi = np.arange(1, max_depth_k, step=1)\ny = train_scores\n\nplt.ylim(0.0,1.1)\nplt.plot(xi, y, marker='o', linestyle='--', color='b')\n\nplt.xlabel('max_depth')\nplt.xticks(np.arange(0, max_depth_k, step=1)) #change from 0-based array index to 1-based human-readable label\nplt.ylabel('Accuracy Score (%)')\nplt.title('DecisionTreeRegressor')\n\nplt.axhline(y=0.95, color='r', linestyle='-')\nplt.text(0.5, 0.85, '95% cut-off threshold', color = 'red', fontsize=16)\nplt.axhline(y=0.80, color='r', linestyle='-')\nplt.text(0.5, 0.70, '80% cut-off threshold', color = 'red', fontsize=16)\n\nax.grid(axis='x')\nplt.show()\n","5ff1f685":"# Training the model\nX = df_train.drop(['single','has_homepage','cast_json','crew_json','crew','cast','Keywords','title','tagline','status','spoken_languages','release_date','production_companies','production_countries','poster_path','overview','original_title','original_language','imdb_id','genres','id','index'], axis=1)\nX.dropna(inplace=True)\nX.info()\ny = X['revenue'].to_numpy()\nX.drop(['revenue'],axis=1,inplace=True)\nX = X.to_numpy()\n\n# This makes it so the model test later sees data it's seen before\n# This concept stinks, but we want to maximize the amount of data we use for training too.\n\n_, X_test, _, y_test = train_test_split(\n     X, y, test_size=0.33)\n\nX_train = X\ny_train = y\n\nimport sklearn.ensemble as ske\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.datasets import make_regression\nfrom sklearn.linear_model import LinearRegression\n\ntrain_scores = []\nada_lr_models = []\nmax_depth_k = 2 # After about depth 14 the score stays stagnant\nfor k in tqdm(range(1,max_depth_k),desc=\"Training models\",unit=\"LinearRegression\"):\n  #regr = DecisionTreeRegressor(max_depth=k)\n  #rfeRegr = ske.RandomForestRegressor(max_depth=k)\n  lr = LinearRegression()\n  regr = ske.AdaBoostRegressor(base_estimator=lr)\n  regr.fit(X_train, y_train)\n  train_scores.append(regr.score(X_train, y_train))\n  ada_lr_models.append(regr)\n\nimport matplotlib.pyplot as plt\nplt.rcParams[\"figure.figsize\"] = (12,6)\n\nfig, ax = plt.subplots()\nxi = np.arange(1, max_depth_k, step=1)\ny = train_scores\n\nplt.ylim(0.0,1.1)\nplt.plot(xi, y, marker='o', linestyle='--', color='b')\n\nplt.xlabel('max_depth')\nplt.xticks(np.arange(0, max_depth_k, step=1)) #change from 0-based array index to 1-based human-readable label\nplt.ylabel('Accuracy Score (%)')\nplt.title('AdaBoost + Linear Regression')\n\nplt.axhline(y=0.95, color='r', linestyle='-')\nplt.text(0.5, 0.85, '95% cut-off threshold', color = 'red', fontsize=16)\nplt.axhline(y=0.80, color='r', linestyle='-')\nplt.text(0.5, 0.70, '80% cut-off threshold', color = 'red', fontsize=16)\n\nax.grid(axis='x')\nplt.show()\n","e7ea70ec":"# SLOW! ~10-15 minutes\n# Training the model\nX = df_train.drop(['single','has_homepage','cast_json','crew_json','crew','cast','Keywords','title','tagline','status','spoken_languages','release_date','production_companies','production_countries','poster_path','overview','original_title','original_language','imdb_id','genres','id','index'], axis=1)\nX.dropna(inplace=True)\nX.info()\ny = X['revenue'].to_numpy()\nX.drop(['revenue'],axis=1,inplace=True)\nX = X.to_numpy()\n\n# This makes it so the model test later sees data it's seen before\n# This concept stinks, but we want to maximize the amount of data we use for training too.\n\n_, X_test, _, y_test = train_test_split(\n     X, y, test_size=0.33)\n\nX_train = X\ny_train = y\n\nimport sklearn.ensemble as ske\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.datasets import make_regression\n\ntrain_scores = []\nada_rf_models = []\nmax_depth_k = 14 # After about depth 15 it's useless to keep trying\nfor k in tqdm(range(0,max_depth_k),desc=\"Training models\",unit=\"AdaBoostRegressor\"):\n  #regr = DecisionTreeRegressor(max_depth=k)\n  #rfeRegr = ske.RandomForestRegressor(max_depth=k)\n  regr = ske.AdaBoostRegressor(base_estimator=random_forest_models[k])\n  regr.fit(X_train, y_train)\n  train_scores.append(regr.score(X_train, y_train))\n  ada_rf_models.append(regr)\n\nimport matplotlib.pyplot as plt\nplt.rcParams[\"figure.figsize\"] = (12,6)\n\nfig, ax = plt.subplots()\nxi = np.arange(0, max_depth_k, step=1)\ny = train_scores\n\nplt.ylim(0.0,1.1)\nplt.plot(xi, y, marker='o', linestyle='--', color='b')\n\nplt.xlabel('Random Forest #')\nplt.xticks(np.arange(0, max_depth_k, step=1)) #change from 0-based array index to 1-based human-readable label\nplt.ylabel('Accuracy Score (%)')\nplt.title('AdaBoost + Random Forest')\n\nplt.axhline(y=0.95, color='r', linestyle='-')\nplt.text(0.5, 0.85, '95% cut-off threshold', color = 'red', fontsize=16)\nplt.axhline(y=0.80, color='r', linestyle='-')\nplt.text(0.5, 0.70, '80% cut-off threshold', color = 'red', fontsize=16)\n\nax.grid(axis='x')\nplt.show()","e62e10f2":"# Training the model\nX = df_train.drop(['single','has_homepage','cast_json','crew_json','crew','cast','Keywords','title','tagline','status','spoken_languages','release_date','production_companies','production_countries','poster_path','overview','original_title','original_language','imdb_id','genres','id','index'], axis=1)\nX.dropna(inplace=True)\nX.info()\ny = X['revenue'].to_numpy()\nX.drop(['revenue'],axis=1,inplace=True)\nX = X.to_numpy()\n\n# This makes it so the model test later sees data it's seen before\n# This concept stinks, but we want to maximize the amount of data we use for training too.\n\n_, X_test, _, y_test = train_test_split(\n     X, y, test_size=0.33)\n\nX_train = X\ny_train = y\n\nimport sklearn.ensemble as ske\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.datasets import make_regression\n\ntrain_scores = []\nada_dt_models = []\nmax_depth_k = 20 # After about depth 14 the score stays stagnant\nfor k in tqdm(range(0,max_depth_k),desc=\"Training models\",unit=\"AdaBoostRegressor\"):\n  #regr = DecisionTreeRegressor(max_depth=k)\n  #rfeRegr = ske.RandomForestRegressor(max_depth=k)\n  regr = ske.AdaBoostRegressor(base_estimator=decision_tree_models[k])\n  regr.fit(X_train, y_train)\n  train_scores.append(regr.score(X_train, y_train))\n  ada_dt_models.append(regr)\n\nimport matplotlib.pyplot as plt\nplt.rcParams[\"figure.figsize\"] = (12,6)\n\nfig, ax = plt.subplots()\nxi = np.arange(0, max_depth_k, step=1)\ny = train_scores\n\nplt.ylim(0.0,1.1)\nplt.plot(xi, y, marker='o', linestyle='--', color='b')\n\nplt.xlabel('Decision Tree #')\nplt.xticks(np.arange(0, max_depth_k, step=1)) #change from 0-based array index to 1-based human-readable label\nplt.ylabel('Accuracy Score (%)')\nplt.title('AdaBoost + Decision Tree')\n\nplt.axhline(y=0.95, color='r', linestyle='-')\nplt.text(0.5, 0.85, '95% cut-off threshold', color = 'red', fontsize=16)\nplt.axhline(y=0.80, color='r', linestyle='-')\nplt.text(0.5, 0.70, '80% cut-off threshold', color = 'red', fontsize=16)\n\nax.grid(axis='x')\nplt.show()\n","0f392cea":"# Training the model\nX = df_train.drop(['single','has_homepage','cast_json','crew_json','crew','cast','Keywords','title','tagline','status','spoken_languages','release_date','production_companies','production_countries','poster_path','overview','original_title','original_language','imdb_id','genres','id','index'], axis=1)\nX.dropna(inplace=True)\nX.info()\ny = X['revenue'].to_numpy()\nX.drop(['revenue'],axis=1,inplace=True)\nX = X.to_numpy()\n\n# This makes it so the model test later sees data it's seen before\n# This concept stinks, but we want to maximize the amount of data we use for training too.\n\n_, X_test, _, y_test = train_test_split(\n     X, y, test_size=0.33)\n\nX_train = X\ny_train = y\n\nimport sklearn.ensemble as ske\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.datasets import make_regression\n\ntrain_scores = []\ngb_rf_models = []\nmax_depth_k = 20 # After about depth 14 the score stays stagnant\nfor k in tqdm(range(0,max_depth_k),desc=\"Training models\",unit=\"GradientBoostingRegressor\"):\n  #regr = DecisionTreeRegressor(max_depth=k)\n  #rfeRegr = ske.RandomForestRegressor(max_depth=k)\n  regr = ske.GradientBoostingRegressor(init=random_forest_models[k])\n  regr.fit(X_train, y_train)\n  train_scores.append(regr.score(X_train, y_train))\n  gb_rf_models.append(regr)\n\nimport matplotlib.pyplot as plt\nplt.rcParams[\"figure.figsize\"] = (12,6)\n\nfig, ax = plt.subplots()\nxi = np.arange(0, max_depth_k, step=1)\ny = train_scores\n\nplt.ylim(0.0,1.1)\nplt.plot(xi, y, marker='o', linestyle='--', color='b')\n\nplt.xlabel('Random Forest #')\nplt.xticks(np.arange(0, max_depth_k, step=1)) #change from 0-based array index to 1-based human-readable label\nplt.ylabel('Accuracy Score (%)')\nplt.title('GradientBoostingRegressor + Random Forest')\n\nplt.axhline(y=0.95, color='r', linestyle='-')\nplt.text(0.5, 0.85, '95% cut-off threshold', color = 'red', fontsize=16)\nplt.axhline(y=0.80, color='r', linestyle='-')\nplt.text(0.5, 0.70, '80% cut-off threshold', color = 'red', fontsize=16)\n\nax.grid(axis='x')\nplt.show()\n","2c37d8e9":"# Training the model\nX = df_train.drop(['single','has_homepage','cast_json','crew_json','crew','cast','Keywords','title','tagline','status','spoken_languages','release_date','production_companies','production_countries','poster_path','overview','original_title','original_language','imdb_id','genres','id','index'], axis=1)\nX.dropna(inplace=True)\nX.info()\ny = X['revenue'].to_numpy()\nX.drop(['revenue'],axis=1,inplace=True)\nX = X.to_numpy()\n\n# This makes it so the model test later sees data it's seen before\n# This concept stinks, but we want to maximize the amount of data we use for training too.\n\n_, X_test, _, y_test = train_test_split(\n     X, y, test_size=0.33)\n\nX_train = X\ny_train = y\n\nimport sklearn.ensemble as ske\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.datasets import make_regression\n\ntrain_scores = []\ngb_dt_models = []\nmax_depth_k = 20 # After about depth 14 the score stays stagnant\nfor k in tqdm(range(0,max_depth_k),desc=\"Training models\",unit=\"GradientBoostingRegressor\"):\n  #regr = DecisionTreeRegressor(max_depth=k)\n  #rfeRegr = ske.RandomForestRegressor(max_depth=k)\n  regr = ske.GradientBoostingRegressor(init=decision_tree_models[k])\n  regr.fit(X_train, y_train)\n  train_scores.append(regr.score(X_train, y_train))\n  gb_dt_models.append(regr)\n\nimport matplotlib.pyplot as plt\nplt.rcParams[\"figure.figsize\"] = (12,6)\n\nfig, ax = plt.subplots()\nxi = np.arange(0, max_depth_k, step=1)\ny = train_scores\n\nplt.ylim(0.0,1.1)\nplt.plot(xi, y, marker='o', linestyle='--', color='b')\n\nplt.xlabel('Decision Tree #')\nplt.xticks(np.arange(0, max_depth_k, step=1)) #change from 0-based array index to 1-based human-readable label\nplt.ylabel('Accuracy Score (%)')\nplt.title('GradientBoostingRegressor + Decision Tree')\n\nplt.axhline(y=0.95, color='r', linestyle='-')\nplt.text(0.5, 0.85, '95% cut-off threshold', color = 'red', fontsize=16)\nplt.axhline(y=0.80, color='r', linestyle='-')\nplt.text(0.5, 0.70, '80% cut-off threshold', color = 'red', fontsize=16)\n\nax.grid(axis='x')\nplt.show()\n","8ed9de27":"import datetime\n\ndef generate_submission(X, model, name):\n    y_submit = model.predict(X)\n    submit_list = []\n    idx = 3001\n    for y in y_submit:\n        submit_list.append({'id': idx, 'revenue': y})\n        idx+=1\n\n    submission = pd.DataFrame(submit_list)\n    timestamp = datetime.datetime.now().isoformat()\n    sanitized_name = \"\".join([c for c in name if re.match(r'\\w', c)])\n    submission.to_csv(output_path + sanitized_name + \"-\" + timestamp + \".csv\", index=False)\n    print(name + \" output available!\")","c3a555d4":"selected_models = [\n    {\n        'name': 'RandomForest - max depth 5',\n        'model': random_forest_models[4]\n    },\n    {\n        'name': 'RandomForest - max depth 12',\n        'model': random_forest_models[11]\n    },\n    {\n        'name': 'DecisionTree - max depth 6',\n        'model': random_forest_models[5]\n    },\n    {\n        'name': 'DecisionTree - max depth 11',\n        'model': decision_tree_models[10]\n    },\n    {\n        'name': 'AdaBoost + RandomForest 8',\n        'model': ada_rf_models[7]\n    },\n    {\n        'name': 'AdaBoost + RandomForest 11',\n        'model': ada_rf_models[10]\n    },\n    {\n        'name': 'AdaBoost + DecisionTree 6',\n        'model': ada_dt_models[5]\n    },\n    {\n        'name': 'AdaBoost + DecisionTree 9',\n        'model': ada_dt_models[8]\n    },\n    {\n        'name': 'GradientBoostRegressor + RandomForest 5',\n        'model': gb_rf_models[4]\n    },\n    {\n        'name': 'GradientBoostRegressor + RandomForest 11',\n        'model': gb_rf_models[10]\n    },\n    {\n        'name': 'GradientBoostRegressor + DecisionTree 5',\n        'model': gb_rf_models[4]\n    },\n    {\n        'name': 'GradientBoostRegressor + DecisionTree 10',\n        'model': gb_rf_models[9]\n    }\n]\n\nprint(\"Loaded models for submission\")\nfor m in selected_models:\n    print(m['model'])","27236926":"from sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer\n\ndf_test.info()\ndropped_features = ['single','has_homepage','cast_json','crew_json','crew','cast','Keywords','title','tagline','status','spoken_languages','release_date','production_companies','production_countries','poster_path','overview','original_title','original_language','imdb_id','genres','id','index']\ndf_submit = df_test.drop(dropped_features, axis=1)\ndf_runtime_null = df_submit[df_submit['runtime'].isna()]\ndf_runtime_complete = df_submit[df_submit['runtime'].notna()]\n\nruntime_imputer = IterativeImputer(random_state=42)\n\nruntime_imputer.fit(df_runtime_complete)\nruntimes = runtime_imputer.transform(df_runtime_null)\n#print(runtimes)\nruntime_null = df_runtime_null.to_dict('index')\nit = 0\nfor k in runtime_null:\n    v = runtime_null[k]\n    df_submit.at[k,'runtime'] = runtimes[it][5]\n    it+=1\n    \ndf_submit.info()\n\nX_submit = df_submit.drop(['revenue'],axis=1).to_numpy()\nfor m in selected_models:\n    generate_submission(X_submit, m['model'], m['name'])","691a4683":"timestamp = datetime.datetime.now().isoformat()\n!zip -r9 outputs-{timestamp}.zip *.csv","82a45e78":"We can see between from the info output that we have some incomplete features, as well as about 3000 entries to train with.\n\nThis should be enough for some classification models, however I don't think it will be enough to construct a Neural Network.","3efa427d":"### Cast Popularity Feature\n\nWe're going to build a dataset called `df_cast` that has two features\n`name` as a key\n`rating` as a popularity rating\n\nOnce we have this dataset, we can add a feature called `popularity_cast`, which is a weighted sum\/average of the cast's popularity ratings, on the `df_all` set.\n\nAfterwards, we should be able to drop the cast feature.\n","21a4adac":"### AdaBoost + LinearRegression","c19b742a":"Nice, this looks like a natural feature now - it's distribution looks similar to that of popularity.","8d9328cd":"### GradientBoostRegressor + DecisionTree","008eaff3":"#### Status Feature","e1354d03":"### AdaBoost + RandomForest","60dd3551":"# Understanding Test Dataset","1f285980":"### Crew Popularity Feature\n\nWe're going to build a dataset called `df_crew` that has two features\n`name` as a key\n`rating` as a popularity rating\n\nOnce we have this dataset, we can add a feature called \"popularity_crew\" to the movies data sets which is a weighted sum\/average of the cast's popularity ratings.\n\nAfterwards, we should be able to drop the crew feature.\n\nThis should pretty much mirror what happened in the cast popularity feature","3decd0a6":"### spoken_languages\n\nnot sure what to do with this one","cca47900":"So this plot shows us that actors with more movies typically have a lower rating.\n\nNow we're going to iterate all the films once more, and engineer this `popularity_cast` rating ","a82d1706":"### RandomForestRegressor","ff18109d":"The features with > 50 labels are very unique, perhaps we can use specifics about them later in our analysis for correlation.  Perhaps a movie with Danny DeVito has more revenue than one with unheard of actors?\n\nIt looks like original_language and status are small enough that we could try to see if their values correlated with revenues.\n\nWe'll need an approach to bring some order to the categorical values before trying to model the problem.","ae6491db":"# Predictions","906ba6e2":"### LinearRegressor","03d394f6":"for k in all:\n  v = all[k]\n  safe = str(v['belongs_to_collection'])\n  safe = safe.replace(\"n' \", 'n')\n  safe = safe.replace(\"'\", '\"')\n  safe = safe.replace(\"\\\"s \", \"'s\")\n  safe = safe.replace(\"None\", 'null')\n  safe = safe.replace(\"N\\\"E\", \"N'E\")\n  safe = safe.replace(\"We\\\"re\", \"We're\")\n  safe = safe.replace(\"L\\\"a\", \"L'a\")\n  if safe != \"nan\": # Only get entries with a belongs_to_collection\n    parsed = json.loads(safe)\n    collection_id = parsed[0]['id']\n    collection_ids.append(collection_id)\n    # We show here there are only 0 or 1 collection entries on a movie object.\n    if (len(parsed) > 1):\n      print(parsed)\n\n    if not created_collection_id:\n      try:\n        df_all.insert(k, \"collection_id\", 0)\n        df_all.at[k, 'collection_id'] = collection_id\n        df_all.at[k, 'single'] = 0\n        created_collection_id = True\n      except:\n        df_all.at[k, 'collection_id'] = collection_id\n        df_all.at[k, 'single'] = 0\n    else:\n      df_all.at[k, 'collection_id'] = collection_id\n      df_all.at[k, 'single'] = 0\n","1fb53ce7":"### AdaBoost + DecisionTree","4e19c76a":"By analyzing the mno \"missing number\" matrix, we can see we need to do something about these incomplete features.\n\n* belongs_to_collection\n* homepage\n* overview\n* genres\n* poster_path\n* production_companies\n* production_countries\n* runtime\n* spoken_languages\n* tagline\n* Keywords\n* cast\n* crew\n\nWe have a few options:\n\n1. Discard the feature. We should only do this if we believe the data isn't correlated.\n2. Impute on the dataset.  We could use IterativeImputer or SimpleImputer to fill in the blanks.\n3. Feature engineering.  We can extract boolean facts, eg \"has_homepage\" and replace this new feature with the current \"homepage\" feature. This only makes sense for certain features we can turn into classifications.  Eg, the presence of a homepage or tagline may have some influence on the target. ","2148a583":"### Categorical Features","b5b06553":"### Keywords Feature\n\nWe should be able to extract keyword_rating feature like we do for Cast & Crew","a36f4100":"### GradientBoostRegressor + RandomForest","bb3f1fdb":"### Status\n\nI think any movie in post-production should go to 'released' status to be included in the larger dataset.  Do you?\n","08ab0078":"### DecisionTreeRegressor","b654f1af":"Here's a consideration - is Released & Post Production related?","bdbf97c6":"# Get Started\n\nAlex Schittko\n\nRobert Waguespack\n\nRun this block to set up the notebook\n\n**You must enable Internet in Kaggle before running this notebook!**\n\n**This requires you to verify your Kaggle account!**\n\n* Download CSV Files test\/training sets\n* Import python dependencies\n\nGoal is to [predict box office revenues](https:\/\/www.kaggle.com\/c\/tmdb-box-office-prediction\/submit)","8a8e42d7":"#### Overview","32cab39c":"### original_language\n\nWe can replace `original_language` with a dummy because it's unique count is *low*","b3d3d753":"# Exploratory Data Analysis (EDA)","c799e21c":"Here we look at categorical columns in a pie chart to understand the spread of the dataset (original code from [this notebook](https:\/\/www.kaggle.com\/sisharaneranjana\/titanic-survival-prediction-complete-analysis))","7200a6da":"### Drops\n\nLeave this last. We drop everything else we don't need for the model here.","5f59a132":"# Output","fbaff828":"Wow!  We have 76k unique actors!  This should give us some good insight!\n\nWe're going to make a \"rating\" for each actor, then use these \"rating\"s to extract a \"cast_rating\" feature for the films.\n\nWe'll sum the popularity each film has, on each actor's record.  We'll also keep track of how many films an actor has been in.\n\nThis lets us average the score of an actor based on the movies they've participated in.","1f18a188":"# Feature Engineering","f93b73aa":"### Homepage Feature\n\nWe can easily set a boolean for \"has_homepage\" and replace \"homepage\" feature with this","adc9fb71":"### Collection Sequence Feature\n\nWe're going to engineer a feature named \"collection_iteration_seq\" that represents which position in a series a movie is. Eg, the 3rd movie in the Dark Knight series will have a value \"3\", where the first movie will have a value \"1\"\n\nWe'll engineer another feature called \"single\" that will be boolean 0\/1, if the movie is a singleton or not.\n\nWe'll use `df_all` to make sure this feature is complete.\n\nAfter we create the feature on `df_all`, `df_train` and `df_test` will be RECREATED with the new feature.  They'll be split based on having or not having the `revenue` feature.","cccaea61":"## Training Set"}}