{"cell_type":{"ed5d2c50":"code","368d7b95":"code","3a0318b7":"code","09342468":"code","cb65ccb6":"code","cd348d05":"code","46922d40":"code","59923ef9":"code","ba804a45":"code","390510d9":"code","05da8131":"code","751cb1ca":"code","11c838e2":"code","13f3a0bc":"code","429dff82":"code","bb370cfc":"code","c7f7fd84":"code","9f72b444":"code","0cd09047":"code","11ada723":"code","ef73b8ca":"code","721fa2d3":"code","82d246b6":"code","7c5881a2":"code","8bc64441":"code","c5eb9eeb":"code","e471b4bf":"code","6c4a7ee9":"code","20418f08":"code","24e2d30f":"code","ebeb150e":"code","beeb22c0":"code","117774f0":"code","718ef0f5":"code","feb4172c":"code","6faca9f6":"code","3063c1ce":"code","7cacf003":"code","b360a448":"code","773bfe44":"code","9c29c1ec":"code","deb4e047":"code","1d04353f":"code","02ad1ffd":"code","a9c42164":"code","731f1577":"code","f0a53377":"code","97569a69":"code","00a7ddb7":"code","f15ddf42":"code","1a0c43c5":"code","4f29cf3d":"code","ca8a24ab":"code","070c075a":"markdown","b7656914":"markdown","5a8033fe":"markdown","8b713bf4":"markdown"},"source":{"ed5d2c50":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","368d7b95":"df = pd.read_csv(\"..\/input\/training-dataset-from-kaggle\/train.csv\")\ndf.head()","3a0318b7":"df.info()","09342468":"sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap=\"YlGnBu\")","cb65ccb6":"df['Survived'].value_counts()","cd348d05":"sns.set_style(\"whitegrid\")\nsns.countplot(x='Survived',hue=\"Sex\",data=df)","46922d40":"plt.figure(figsize=(12,8))\nsns.boxplot(x=\"Pclass\",y=df[\"Age\"].dropna(),data=df)","59923ef9":"def impute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n\n        if Pclass == 1:\n            return 37\n\n        elif Pclass == 2:\n            return 29\n\n        else:\n            return 24\n\n    else:\n        return Age","ba804a45":"df['Age'] = df[['Age','Pclass']].apply(impute_age,axis=1)","390510d9":"sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap=\"YlGnBu\")","05da8131":"df[\"Embarked\"] = df[\"Embarked\"].fillna(df[\"Embarked\"].mode()[0])\ndf.drop(\"Cabin\",axis=1,inplace=True)","751cb1ca":"sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap=\"YlGnBu\")","11c838e2":"df_obj = df.select_dtypes(include=[\"object\"]).copy()\ndf_obj.columns","13f3a0bc":"df[\"Embarked\"].value_counts()","429dff82":"col_obj = ['Sex', 'Embarked']","bb370cfc":"def get_dummies(cols):\n    get_dumm = pd.DataFrame()\n    for c in cols:\n        df1 = pd.get_dummies(df[c],drop_first=True)\n        if get_dumm.empty:\n            get_dumm = df1\n        else:\n            df1 = pd.concat([get_dumm,df1],axis=1)\n    return df1\n        ","c7f7fd84":"obj_df = get_dummies(col_obj)\nobj_df.head()","9f72b444":"final_df = pd.concat([df,obj_df],axis=1)\nfinal_df.head()","0cd09047":"final_df.drop(['PassengerId','Name','Sex','Ticket','Embarked'],inplace=True,axis=1)","11ada723":"final_df.head()","ef73b8ca":"corr_matrix=final_df.corr()\ncorr_matrix[\"Survived\"].sort_values(ascending=False)","721fa2d3":"final_df.shape","82d246b6":"X_train = final_df.drop(\"Survived\",axis=1)","7c5881a2":"y_train = final_df[\"Survived\"]","8bc64441":"X_train.shape","c5eb9eeb":"import xgboost as xgb\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier","e471b4bf":"test_df = pd.read_csv(\"..\/input\/test-dataset\/test_data_comp.csv\")\ntest_df.shape","6c4a7ee9":"clf = xgb.XGBClassifier()","20418f08":"clf.fit(X_train,y_train)","24e2d30f":"pred = clf.predict(test_df)\npred","ebeb150e":"clf2 = LogisticRegression()\nclf2.fit(X_train,y_train)\npred2 = clf2.predict(test_df)\npred2","beeb22c0":"clf3 = RandomForestClassifier()\nclf3.fit(X_train,y_train)\npred3 = clf3.predict(test_df)\npred3","117774f0":"y_train.shape","718ef0f5":"pred2.shape","feb4172c":"pred2.columns = [\"Survived\"]\npred2.head()","6faca9f6":"test_df.head()","3063c1ce":"temp_test_df = pd.concat([test_df,pred2],axis=1)\ntemp_test_df.head()","7cacf003":"X_train_test = temp_test_df.drop('Survived',axis=1)\ny_train_test = temp_test_df['Survived']","b360a448":"final_train_x = pd.concat([X_train,X_train_test],axis=0)\nfinal_train_y = pd.concat([y_train,y_train_test],axis=0)\nfinal_train_x.shape,final_train_y.shape","773bfe44":"clf2.fit(final_train_x,final_train_y)\npred4 = clf2.predict(test_df)\npred4","9c29c1ec":"from sklearn.model_selection import RandomizedSearchCV","deb4e047":"param_grid_LR = {'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000],'class_weight':['balanced', None],'max_iter':[100,200,300,400,1000,1500] }","1d04353f":"LR_model = LogisticRegression()","02ad1ffd":"random_search_LR=RandomizedSearchCV(LR_model,param_distributions=param_grid_LR\n                                    ,n_iter=30,scoring='roc_auc',n_jobs=4,cv=5,verbose=3)","a9c42164":"random_search_LR.fit(X_train,y_train)","731f1577":"random_search_LR.best_estimator_","f0a53377":"new_LR_clf = LogisticRegression(C=100, class_weight=None, dual=False, fit_intercept=True,\n                   intercept_scaling=1, l1_ratio=None, max_iter=1000,\n                   multi_class='auto', n_jobs=None, penalty='l2',\n                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n                   warm_start=False)","97569a69":"new_LR_clf.fit(X_train,y_train)","00a7ddb7":"pred_new_LRclf = new_LR_clf.predict(test_df)\npred_new_LRclf","f15ddf42":"X_train.shape,y_train.shape\nfrom keras import backend as K\ndef root_mean_squared_error(y_true, y_pred):\n        return K.sqrt(K.mean(K.square(y_pred - y_true)))","1a0c43c5":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LeakyReLU,PReLU,ELU\nfrom keras.layers import Dropout\n\nmodel = Sequential()\nmodel.add(Dense(output_dim=50,init = 'he_uniform',activation='sigmoid',input_dim = 8))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(output_dim=25,init = 'he_uniform',activation='sigmoid'))\n#model.add(Dropout(0.2))\nmodel.add(Dense(output_dim=50,init = 'he_uniform',activation='sigmoid'))\nmodel.add(Dense(output_dim = 1, init = 'he_uniform',activation='linear'))\nmodel.compile(loss= root_mean_squared_error,optimizer='Adamax')\n\nhistory = model.fit(X_train, y_train,validation_split=0.12, batch_size = 10, nb_epoch = 10)","4f29cf3d":"pred_ann=model.predict(test_df)\npred_ann","ca8a24ab":"pred_ann = pd.DataFrame(pred_ann)\nsub_df=pd.read_csv(\"gender_submission.csv\")\ndatasets = pd.concat([sub_df['PassengerId'],pred_ann],axis=1)\ndatasets.columns = ['PassengerId','Survived']\ndatasets.to_csv(\"sample_submission_ann_simple.csv\",index=False)","070c075a":"## Next we can hypertune the model params","b7656914":"## Best results are with LogisticRegressor","5a8033fe":"\n\n\n\n\n## Trying out ANN model","8b713bf4":"## Combining train and test data did not give better accuracy"}}