{"cell_type":{"91eac2e7":"code","631de611":"code","35b548cf":"code","f9627e4b":"code","fde25926":"code","5604417a":"code","966394a0":"code","9ff52eda":"code","49d0d81b":"code","e0e70466":"code","4c10e3ac":"code","6f01bb02":"code","a4cbdb09":"code","5cb5535d":"code","3d7ae60a":"code","64f52c2c":"code","73b1d76a":"code","d8483acb":"code","1711295c":"code","7842911a":"code","4f0f0e6f":"code","74657669":"code","28f55a19":"code","fbde4fe9":"code","57fcb9b5":"code","db448c73":"code","6b3b5585":"code","42cfd287":"code","2a311164":"code","72c961cc":"code","38ab093c":"code","c45da46c":"code","178007c3":"code","33cabb5a":"code","50f0ab59":"code","534c7719":"code","7ae5ddc8":"code","34f07267":"code","a71ae378":"code","f3ffedd2":"code","1ec034f2":"code","d87b7c14":"code","799001fe":"code","5d21f18e":"code","0a3a1c1f":"code","014e90de":"code","a9152e58":"code","d0455312":"code","b61d58a7":"code","8ffdbb8b":"code","2b8ee06b":"code","ed586798":"code","fa91de20":"code","b0b560c2":"code","6edcbeea":"code","5f017287":"code","2d962217":"code","703d270e":"code","14601740":"code","a17afdc5":"code","46b170c1":"code","b8086d46":"code","3487dc89":"code","f6ff12c5":"code","a31cd879":"code","1c76b971":"code","b9bf047f":"code","a9d7bb23":"code","ee0b1f25":"code","088d5315":"markdown","69b22c21":"markdown","2339ff42":"markdown","851f1e64":"markdown"},"source":{"91eac2e7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","631de611":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport chart_studio.plotly as py\nimport cufflinks as cf\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\ncf.go_offline()\nfrom scipy import stats\nfrom scipy.stats import norm","35b548cf":"train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\n","f9627e4b":"train.head()","fde25926":"print(train.shape)\nprint(test.shape)","5604417a":"test.head(2)","966394a0":"train.columns","9ff52eda":"plt.figure(figsize=(10,5))\nsns.distplot(train['SalePrice'])\nplt.show()","49d0d81b":"plt.figure(figsize=(12,5))\ncorrmat = train.corr()\nsns.heatmap(corrmat,cmap='Blues')\nplt.show()","e0e70466":"#saleprice correlation matrix\nk = 10 #number of variables for heatmap\ncols = train.corr().nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(train[cols].values.T)\nplt.figure(figsize=(10,5))\nhm = sns.heatmap(cm, annot=True,yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","4c10e3ac":"sns.set()\nsns.pairplot(data=train,vars=cols)\nplt.show()","6f01bb02":"miss_per=train.isna().sum()\/train.isna().count()*100\nmiss_per = miss_per.sort_values(ascending=False).head(20)\ndf_miss_per=pd.DataFrame(miss_per.values,index=miss_per.index,columns=['Total_percentage'])","a4cbdb09":"df_miss_per","5cb5535d":"plt.figure(figsize=(12,5))\nsns.barplot(x=df_miss_per['Total_percentage'],y=df_miss_per.index)\nplt.title('Missing values percentage Plot')\nplt.show()","3d7ae60a":"train.drop(columns=['PoolQC','MiscFeature','Alley','Fence','FireplaceQu'],inplace= True)","64f52c2c":"train['SalePrice'].describe()","73b1d76a":"sns.distplot(train['SalePrice'],fit=norm)\nplt.figure()\nstats.probplot(train['SalePrice'],plot=plt)","d8483acb":"#dropping these extreme values\ntrain=train.drop(axis=0,index=train.index[691])\ntrain=train.drop(axis=0,index = train.index[1182])\ntrain=train.drop(axis=0,index=train.index[495])\ntrain=train.drop(axis=0,index = train.index[916])","1711295c":"sns.distplot(np.log(train['SalePrice']),fit=norm)\nplt.figure()\nstats.probplot(np.log(train['SalePrice']),plot=plt)","7842911a":"train['SalePrice'] = np.log(train['SalePrice'])\n","4f0f0e6f":"sns.scatterplot(train['GrLivArea'],train['SalePrice'])\nplt.show()","74657669":"train.drop(train[train['GrLivArea']>4000].index,axis=0,inplace=True)","28f55a19":"sns.scatterplot(train['GrLivArea'],train['SalePrice'])\nplt.show()","fbde4fe9":"print(corrmat['SalePrice'].sort_values(ascending=False)[:15])\ncorrmat['SalePrice'].sort_values(ascending=False)[-5:]","57fcb9b5":"features=list(corrmat['SalePrice'].sort_values(ascending=False)[:15].index)\\\n+list(corrmat['SalePrice'].sort_values(ascending=False)[-5:].index)\nfeatures.remove('SalePrice')","db448c73":"for col in features:\n    sns.scatterplot(train[col],train['SalePrice'])\n    plt.show()","6b3b5585":"train=train.drop(train[train['MasVnrArea']>1200].index,axis=0)\ntrain=train.drop(train[train['BsmtFinSF1']>2000].index,axis=0)\ntrain=train.drop(train[train['LowQualFinSF']>530].index,axis=0)\ntrain=train.drop(train[(train['MSSubClass']<25) &(train['SalePrice']<11)].index,axis=0)","42cfd287":"train[features].head()","2a311164":"cat_features=train.select_dtypes(include=['object']).columns\ncat_features","72c961cc":"for col in cat_features:\n    sns.boxplot(x=train[col],y=train['SalePrice'])\n    plt.show()","38ab093c":"train['LotFrontage'] = train['LotFrontage'].fillna(train['LotFrontage'].median())\ntrain['GarageCond']=train['GarageCond'].fillna(train['GarageCond'].mode()[0])\ntrain['GarageType']=train['GarageType'].fillna(train['GarageType'].mode()[0])\ntrain['GarageYrBlt']=train['GarageYrBlt'].fillna(train['GarageYrBlt'].mode()[0])\ntrain['GarageFinish']=train['GarageFinish'].fillna(train['GarageFinish'].mode()[0])\ntrain['GarageQual']=train['GarageQual'].fillna(train['GarageQual'].mode()[0])\ntrain['BsmtExposure']=train['BsmtExposure'].fillna(train['BsmtExposure'].mode()[0])\ntrain['BsmtFinType2']=train['BsmtFinType2'].fillna(train['BsmtFinType2'].mode()[0])\ntrain['BsmtFinType1']=train['BsmtFinType1'].fillna(train['BsmtFinType1'].mode()[0])\ntrain['BsmtCond']=train['BsmtCond'].fillna(train['BsmtCond'].mode()[0])\ntrain['BsmtQual']=train['BsmtQual'].fillna(train['BsmtQual'].mode()[0])\ntrain['MasVnrArea']=train['MasVnrArea'].fillna(train['MasVnrArea'].median())\ntrain['MasVnrType']=train['MasVnrType'].fillna(train['MasVnrType'].mode()[0])\ntrain['Electrical']=train['Electrical'].fillna(train['Electrical'].mode()[0])\ntrain['Utilities']=train['Utilities'].fillna(train['Utilities'].mode()[0])","c45da46c":"train_1 = train.copy()","178007c3":"for col in cat_features:\n    \n    fea_du=train[col].value_counts().head(5)\n    k=fea_du.index[:5]\n    for cat in k:\n        name= col+'_'+cat\n        train_1[name] =(train_1[col]==cat).astype(int)\n    del train_1[col]\n    print(col)\n    ","33cabb5a":"train_1.head()\ncat_features_train_1=train_1.columns     ","50f0ab59":"corr=train_1.corr()\nfeature_select=list(corr['SalePrice'].sort_values(ascending=False)[:30].index)\\\n+list(corr['SalePrice'].sort_values(ascending=True)[:20].index)\nfeature_select.remove('SalePrice')","534c7719":"X = train_1[feature_select]\ny = train_1['SalePrice']","7ae5ddc8":"from sklearn.preprocessing import StandardScaler,RobustScaler,normalize,MinMaxScaler\nsc_x= StandardScaler()\nX_1=sc_x.fit_transform(X)\ndf_scaled=pd.DataFrame(X_1,columns=X.columns)","34f07267":"np.mean(X_1),np.std(X_1)","a71ae378":"from sklearn.decomposition import PCA\npca = PCA(n_components=0.98)\nprincipalComponents = pca.fit_transform(X_1)\nprincipalDf = pd.DataFrame(data = principalComponents)","f3ffedd2":"principalDf.shape","1ec034f2":"pca.explained_variance_ratio_.sum()","d87b7c14":"plt.figure()\nplt.plot(np.cumsum(pca.explained_variance_ratio_))\nplt.xlabel('Number of Components')\nplt.ylabel('Variance (%)') #for each component\nplt.title('Price Prediction Dataset Explained Variance')\nplt.show()","799001fe":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression,SGDRegressor,Lasso\nfrom sklearn.linear_model import Ridge,Lasso\nfrom sklearn.metrics import mean_absolute_error,mean_squared_error\nfrom sklearn.ensemble import RandomForestRegressor,BaggingRegressor,GradientBoostingRegressor,AdaBoostRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom xgboost import XGBRegressor\nimport statsmodels.api as sm","5d21f18e":"X = principalDf\ny = train_1['SalePrice']\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=0)\nmodel = LinearRegression()\nmodel.fit(X_train,y_train)\nprint(model.score(X_train,y_train))\nprint(model.score(X_test,y_test))","0a3a1c1f":"y_pred = model.predict(X_test)\nmean_absolute_error(y_test,y_pred)\nnp.sqrt(mean_squared_error(y_test,y_pred))","014e90de":"model1 = SGDRegressor(alpha=0.01)\nmodel1.fit(X_train,y_train)\nprint(model1.score(X_train,y_train))\nprint(model1.score(X_test,y_test))","a9152e58":"y_pred1 = model1.predict(X_test)\nmean_absolute_error(y_test,y_pred1)\nnp.sqrt(mean_squared_error(y_test,y_pred1))","d0455312":"model2 = Ridge(alpha=0.01,fit_intercept=True)\nmodel2.fit(X_train,y_train)\nprint(model2.score(X_train,y_train))\nprint(model2.score(X_test,y_test))","b61d58a7":"y_pred2 = model2.predict(X_test)\nmean_absolute_error(y_test,y_pred2)\nnp.sqrt(mean_squared_error(y_test,y_pred2))","8ffdbb8b":"dt = DecisionTreeRegressor(max_depth=21,min_samples_split=92,criterion='mse')\ndt.fit(X_train,y_train)\nprint(dt.score(X_train,y_train))\nprint(dt.score(X_test,y_test))","2b8ee06b":"#rf = RandomForestRegressor(n_estimators=41,max_depth=32,warm_start=True)\nrf = RandomForestRegressor(n_estimators=100,min_samples_split=15,min_samples_leaf=2,random_state=42,warm_start=True)\nrf.fit(X_train,y_train)\nprint(rf.score(X_train,y_train))\nprint(rf.score(X_test,y_test))","ed586798":"bg = BaggingRegressor(base_estimator=rf,n_estimators=41)\nbg.fit(X_train,y_train)\nprint(bg.score(X_train,y_train))\nprint(bg.score(X_test,y_test))","fa91de20":"la = Lasso(alpha=0.001)\nla.fit(X_train,y_train)\nprint(la.score(X_train,y_train))\nprint(la.score(X_test,y_test))","b0b560c2":"xgb = XGBRegressor(reg_alpha=0.001,reg_lambda=0.001)\nxgb.fit(X_train,y_train)\nprint(xgb.score(X_train,y_train))\nprint(xgb.score(X_test,y_test))","6edcbeea":"from sklearn.model_selection import cross_val_score\nfor ml in [model,model1,model2,rf,la,bg]:\n    \n    accuracy = cross_val_score(estimator=ml,X=X_train,y=y_train,cv=10)\n    print(ml,'Mean accuracy',accuracy.mean())\n    print('Accuracy std',accuracy.std())","5f017287":"test.isna().sum().sort_values(ascending=False)[:40]","2d962217":"test.drop(columns=['PoolQC','MiscFeature','Alley','Fence','FireplaceQu'],inplace= True)","703d270e":"test['LotFrontage'] = test['LotFrontage'].fillna(test['LotFrontage'].median())\ntest['GarageCond']=test['GarageCond'].fillna(test['GarageCond'].mode()[0])\ntest['GarageType']=test['GarageType'].fillna(test['GarageType'].mode()[0])\ntest['GarageYrBlt']=test['GarageYrBlt'].fillna(test['GarageYrBlt'].mode()[0])\ntest['GarageFinish']=test['GarageFinish'].fillna(test['GarageFinish'].mode()[0])\ntest['GarageQual']=test['GarageQual'].fillna(test['GarageQual'].mode()[0])\ntest['BsmtExposure']=test['BsmtExposure'].fillna(test['BsmtExposure'].mode()[0])\ntest['BsmtFinType2']=test['BsmtFinType2'].fillna(test['BsmtFinType2'].mode()[0])\ntest['BsmtFinType1']=test['BsmtFinType1'].fillna(test['BsmtFinType1'].mode()[0])\ntest['BsmtCond']=test['BsmtCond'].fillna(test['BsmtCond'].mode()[0])\ntest['BsmtQual']=test['BsmtQual'].fillna(test['BsmtQual'].mode()[0])\ntest['MasVnrArea']=test['MasVnrArea'].fillna(test['MasVnrArea'].median())\ntest['MasVnrType']=test['MasVnrType'].fillna(test['MasVnrType'].mode()[0])\ntest['Electrical']=test['Electrical'].fillna(test['Electrical'].mode()[0])\ntest['Utilities']=test['Utilities'].fillna(test['Utilities'].mode()[0])\ntest['GarageCars']=test['GarageCars'].fillna(test['GarageCars'].mode()[0])\ntest['GarageArea']=test['GarageArea'].fillna(test['GarageArea'].median())\ntest['KitchenQual']=test['KitchenQual'].fillna(test['KitchenQual'].mode()[0])\ntest['Exterior1st']=test['Exterior1st'].fillna(test['Exterior1st'].mode()[0])\ntest['SaleType']=test['SaleType'].fillna(test['SaleType'].mode()[0])\ntest['TotalBsmtSF'] = test['TotalBsmtSF'].fillna(test['TotalBsmtSF'].median())\ntest['BsmtUnfSF']=test['BsmtUnfSF'].fillna(test['BsmtUnfSF'].median())\ntest['Exterior2nd']=test['Exterior2nd'].fillna(test['Exterior2nd'].mode()[0])\ntest['BsmtFinSF1']=test['BsmtFinSF1'].fillna(test['BsmtFinSF1'].median())\ntest['BsmtFinSF2'] =test['BsmtFinSF2'].fillna(test['BsmtFinSF2'].median())\ntest['BsmtFullBath']=test['BsmtFullBath'].fillna(test['BsmtFullBath'].mode()[0])\ntest['BsmtHalfBath'] =test['BsmtHalfBath'].fillna(test['BsmtHalfBath'].mode()[0])\ntest['Functional']=test['Functional'].fillna(test['Functional'].mode()[0])\ntest['MSZoning']=test['MSZoning'].fillna(test['MSZoning'].mode()[0])","14601740":"test.isna().sum().sort_values(ascending=False)[:40].head()","a17afdc5":"test_1 = test.copy()","46b170c1":"for col in cat_features:\n    \n    fea_du_test=test[col].value_counts().head(5)\n    k=fea_du_test.index[:5]\n    for cat in k:\n        name= col+'_'+cat\n        test_1[name] =(test_1[col]==cat).astype(int)\n    del test_1[col]\n    print(col)","b8086d46":"test_1.shape","3487dc89":"test_1=test_1[feature_select]","f6ff12c5":"#sc_test= StandardScaler()\ndf_test=sc_x.transform(test_1)\ndf_scaled_test=pd.DataFrame(df_test,columns=test_1.columns)","a31cd879":"df_scaled_test.head(1)","1c76b971":"#pc = PCA(n_components=30)\npc = pca.transform(df_test)\nprincipalDf_test = pd.DataFrame(data = pc)","b9bf047f":"principalDf_test.head()","a9d7bb23":"y_predictions=model.predict(principalDf_test)\npredictions=np.expm1(y_predictions)","ee0b1f25":"submission = pd.DataFrame({\n        \"Id\": test[\"Id\"],\n        \"SalePrice\": predictions\n    })\nsubmission.to_csv('submission.csv', index=False)","088d5315":"The price is right skewed.","69b22c21":"Dropping some of the extreme data points","2339ff42":"I have considered the Top 5 Categories in each Categorical Features","851f1e64":"As the missing percentage of the below 5 features is  greater than the 20% so I have decided to drop those Features.\nPoolQC\t99.520548\nMiscFeature\t96.301370\nAlley\t93.767123\nFence\t80.753425\nFireplaceQu\t47.260274\n"}}