{"cell_type":{"4c0156ed":"code","a88def79":"code","1c1a2658":"code","b9c90cb7":"code","8816cabf":"code","6744f643":"code","85829881":"code","8b461e7f":"code","3bf0324a":"code","6f425ae8":"code","eb70af12":"markdown"},"source":{"4c0156ed":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a88def79":"import matplotlib.pyplot as plt\nfrom sklearn.datasets import load_iris","1c1a2658":"df = pd.read_csv('..\/input\/iris-flower-dataset\/IRIS.csv')\ndf.head()","b9c90cb7":"iris = load_iris()\nX = iris.data[:,:2]\ny = iris.target\nX[:5]\ny[:5]","8816cabf":"plt.scatter(X[:,0],X[:,1],c=y,cmap = 'gist_rainbow')\nplt.xlabel('Sepal length')\nplt.ylabel('Sepal width')\nplt.show()","6744f643":"X = iris.data[:,:4]\nplt.scatter(X[:,2],X[:,3],c=y,cmap = 'gist_rainbow')\nplt.xlabel('Petal length')\nplt.ylabel('Petal width')\nplt.show()","85829881":"k = 3\nmax_itr = 3","8b461e7f":"def distances(p1,p2):\n    d = sum((p1-p2)**2)**0.5\n    return d","3bf0324a":"class K_Means:\n    def __init__(self, k=3, tol=0.001, max_iter=3):\n        self.k = k\n        self.tol = tol\n        self.max_iter = max_iter\n\n    def fit(self,data):\n\n        self.centroids = {}\n\n        for i in range(self.k):\n            self.centroids[i] = data[i]\n\n        for i in range(self.max_iter):\n            self.classifications = {}\n\n            for i in range(self.k):\n                self.classifications[i] = []\n\n            for featureset in data:\n                distances = [np.linalg.norm(featureset-self.centroids[centroid]) for centroid in self.centroids]\n                classification = distances.index(min(distances))\n                self.classifications[classification].append(featureset)\n\n            prev_centroids = dict(self.centroids)\n\n            for classification in self.classifications:\n                self.centroids[classification] = np.average(self.classifications[classification],axis=0)\n\n            optimized = True\n\n            for c in self.centroids:\n                original_centroid = prev_centroids[c]\n                current_centroid = self.centroids[c]\n                if np.sum((current_centroid-original_centroid)\/original_centroid*100.0) > self.tol:\n                    print(np.sum((current_centroid-original_centroid)\/original_centroid*100.0))\n                    optimized = False\n\n            if optimized:\n                break\n\n    def predict(self,data):\n        distances = [np.linalg.norm(data-self.centroids[centroid]) for centroid in self.centroids]\n        classification = distances.index(min(distances))\n        return classification","6f425ae8":"model = K_Means()\nmodel.fit(data[:,:4])\n\nfor centroid in model.centroids:\n    plt.scatter(model.centroids[centroid][0], model.centroids[centroid][1],\n                marker=\"o\", color=\"k\", s=150, linewidths=5)\n    \ncolors = ['red','blue','green']\nfor classification in model.classifications:\n    color = colors[classification]\n    for featureset in model.classifications[classification]:\n        plt.scatter(featureset[0], featureset[1], marker=\"x\", color=color, s=150, linewidths=5)\n        \nplt.show()","eb70af12":"## K - Mean"}}