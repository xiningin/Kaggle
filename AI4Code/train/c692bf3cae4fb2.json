{"cell_type":{"02a543b1":"code","af495b7f":"code","e92a96d0":"code","d0c84b6b":"code","25b30c59":"code","fd88d758":"code","7a2a842b":"code","f4b40609":"code","03746afc":"code","e5a2620b":"code","4e017371":"code","00479d6a":"code","26a7dc28":"code","120abe8f":"code","79462034":"code","37f02d00":"code","96c8e9cf":"code","b8266a22":"code","7d490bf6":"code","6b703252":"code","cb23347e":"code","ffd8be33":"code","5648e08a":"code","13454f92":"code","2a8771c8":"code","0873e6d6":"code","549e7b4a":"code","59a1c869":"code","c22a675c":"code","22888c91":"code","697f1bd2":"code","390beca5":"code","ca95a80d":"code","30aa25af":"code","e852bcdc":"code","ca04cc6f":"code","6314318d":"code","47aa4b72":"code","6d15c67a":"code","876429d6":"code","0f110e04":"code","f791fc80":"code","2d17bb98":"code","6545cf7b":"code","c478b1cd":"code","aeaa2c40":"code","48f52331":"code","49f1e193":"code","5aaa1947":"code","4bc20862":"code","fa6030ad":"code","99988920":"code","77391391":"markdown","3df0225e":"markdown","cb176621":"markdown","2a974d61":"markdown","305988bd":"markdown","beff8127":"markdown","7207af72":"markdown","5134c387":"markdown","a998b8ea":"markdown","a06f9c4e":"markdown"},"source":{"02a543b1":"from fastai.text import *","af495b7f":"bs=64","e92a96d0":"path = untar_data(URLs.HUMAN_NUMBERS)\npath.ls()","d0c84b6b":"def readnums(d): return [', '.join(o.strip() for o in open(path\/d).readlines())]","25b30c59":"train_txt = readnums('train.txt'); train_txt[0][:80]","fd88d758":"valid_txt = readnums('valid.txt'); valid_txt[0][-80:]","7a2a842b":"train = TextList(train_txt, path=path)\nvalid = TextList(valid_txt, path=path)\n\nsrc = ItemLists(path=path, train=train, valid=valid).label_for_lm()\ndata = src.databunch(bs=bs)","f4b40609":"train[0].text[:80]","03746afc":"len(data.valid_ds[0][0].data)","e5a2620b":"data.bptt, len(data.valid_dl)","4e017371":"13017\/70\/bs","00479d6a":"it = iter(data.valid_dl)\nx1,y1 = next(it)\nx2,y2 = next(it)\nx3,y3 = next(it)\nit.close()","26a7dc28":"x1.numel()+x2.numel()+x3.numel()","120abe8f":"x1.shape,y1.shape","79462034":"x2.shape,y2.shape","37f02d00":"x1[:,0]","96c8e9cf":"y1[:,0]","b8266a22":"v = data.valid_ds.vocab","7d490bf6":"v.textify(x1[0])","6b703252":"v.textify(y1[0])","cb23347e":"v.textify(x2[0])","ffd8be33":"v.textify(x3[0])","5648e08a":"v.textify(x1[1])","13454f92":"v.textify(x2[1])","2a8771c8":"v.textify(x3[1])","0873e6d6":"v.textify(x3[-1])","549e7b4a":"data.show_batch(ds_type=DatasetType.Valid)","59a1c869":"data = src.databunch(bs=bs, bptt=3)","c22a675c":"x,y = data.one_batch()\nx.shape,y.shape","22888c91":"nv = len(v.itos); nv","697f1bd2":"nh=64","390beca5":"def loss4(input,target): return F.cross_entropy(input, target[:,-1])\ndef acc4 (input,target): return accuracy(input, target[:,-1])","ca95a80d":"class Model0(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.i_h = nn.Embedding(nv,nh)  # green arrow\n        self.h_h = nn.Linear(nh,nh)     # brown arrow\n        self.h_o = nn.Linear(nh,nv)     # blue arrow\n        self.bn = nn.BatchNorm1d(nh)\n        \n    def forward(self, x):\n        h = self.bn(F.relu(self.i_h(x[:,0])))\n        if x.shape[1]>1:\n            h = h + self.i_h(x[:,1])\n            h = self.bn(F.relu(self.h_h(h)))\n        if x.shape[1]>2:\n            h = h + self.i_h(x[:,2])\n            h = self.bn(F.relu(self.h_h(h)))\n        return self.h_o(h)","30aa25af":"learn = Learner(data, Model0(), loss_func=loss4, metrics=acc4)","e852bcdc":"learn.fit_one_cycle(6, 1e-4)","ca04cc6f":"class Model1(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.i_h = nn.Embedding(nv,nh)  # green arrow\n        self.h_h = nn.Linear(nh,nh)     # brown arrow\n        self.h_o = nn.Linear(nh,nv)     # blue arrow\n        self.bn = nn.BatchNorm1d(nh)\n        \n    def forward(self, x):\n        h = torch.zeros(x.shape[0], nh).to(device=x.device)\n        for i in range(x.shape[1]):\n            h = h + self.i_h(x[:,i])\n            h = self.bn(F.relu(self.h_h(h)))\n        return self.h_o(h)","6314318d":"learn = Learner(data, Model1(), loss_func=loss4, metrics=acc4)","47aa4b72":"learn.fit_one_cycle(6, 1e-4)","6d15c67a":"data = src.databunch(bs=bs, bptt=20)","876429d6":"x,y = data.one_batch()\nx.shape,y.shape","0f110e04":"class Model2(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.i_h = nn.Embedding(nv,nh)\n        self.h_h = nn.Linear(nh,nh)\n        self.h_o = nn.Linear(nh,nv)\n        self.bn = nn.BatchNorm1d(nh)\n        \n    def forward(self, x):\n        h = torch.zeros(x.shape[0], nh).to(device=x.device)\n        res = []\n        for i in range(x.shape[1]):\n            h = h + self.i_h(x[:,i])\n            h = F.relu(self.h_h(h))\n            res.append(self.h_o(self.bn(h)))\n        return torch.stack(res, dim=1)","f791fc80":"learn = Learner(data, Model2(), metrics=accuracy)","2d17bb98":"learn.fit_one_cycle(10, 1e-4, pct_start=0.1)","6545cf7b":"class Model3(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.i_h = nn.Embedding(nv,nh)\n        self.h_h = nn.Linear(nh,nh)\n        self.h_o = nn.Linear(nh,nv)\n        self.bn = nn.BatchNorm1d(nh)\n        self.h = torch.zeros(bs, nh).cuda()\n        \n    def forward(self, x):\n        res = []\n        h = self.h\n        for i in range(x.shape[1]):\n            h = h + self.i_h(x[:,i])\n            h = F.relu(self.h_h(h))\n            res.append(self.bn(h))\n        self.h = h.detach()\n        res = torch.stack(res, dim=1)\n        res = self.h_o(res)\n        return res","c478b1cd":"learn = Learner(data, Model3(), metrics=accuracy)","aeaa2c40":"learn.fit_one_cycle(20, 3e-3)","48f52331":"class Model4(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.i_h = nn.Embedding(nv,nh)\n        self.rnn = nn.RNN(nh,nh, batch_first=True)\n        self.h_o = nn.Linear(nh,nv)\n        self.bn = BatchNorm1dFlat(nh)\n        self.h = torch.zeros(1, bs, nh).cuda()\n        \n    def forward(self, x):\n        res,h = self.rnn(self.i_h(x), self.h)\n        self.h = h.detach()\n        return self.h_o(self.bn(res))","49f1e193":"learn = Learner(data, Model4(), metrics=accuracy)","5aaa1947":"learn.fit_one_cycle(20, 3e-3)","4bc20862":"class Model5(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.i_h = nn.Embedding(nv,nh)\n        self.rnn = nn.GRU(nh, nh, 2, batch_first=True)\n        self.h_o = nn.Linear(nh,nv)\n        self.bn = BatchNorm1dFlat(nh)\n        self.h = torch.zeros(2, bs, nh).cuda()\n        \n    def forward(self, x):\n        res,h = self.rnn(self.i_h(x), self.h)\n        self.h = h.detach()\n        return self.h_o(self.bn(res))","fa6030ad":"learn = Learner(data, Model5(), metrics=accuracy)","99988920":"learn.fit_one_cycle(10, 1e-2)","77391391":"[Lesson Video Link](https:\/\/course.fast.ai\/videos\/?lesson=7)\n\n[Lesson resources and updates](https:\/\/forums.fast.ai\/t\/lesson-7-official-resources\/32553)\n\n[Lesson chat](https:\/\/forums.fast.ai\/t\/lesson-7-in-class-chat\/32554\/118)\n\n[Further discussion thread](https:\/\/forums.fast.ai\/t\/lesson-7-further-discussion\/32555)\n\nNote: This is a mirror of the FastAI Lesson 7 Nb. \nPlease thank the amazing team behind fast.ai for creating these, I've merely created a mirror of the same here\nFor complete info on the course, visit course.fast.ai","3df0225e":"## nn.RNN","cb176621":"## Single fully connected model","2a974d61":"## Data","305988bd":"## Maintain state","beff8127":"## 2-layer GRU","7207af72":"## fin","5134c387":"## Multi fully connected model","a998b8ea":"# Human numbers","a06f9c4e":"## Same thing with a loop"}}