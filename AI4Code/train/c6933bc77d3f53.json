{"cell_type":{"a5145df7":"code","bc4584ef":"code","41781899":"code","d6e83692":"code","11392d66":"code","46b20f75":"code","11218dab":"code","960ccaf8":"code","f698dce0":"code","00b22e79":"code","3cf92d3f":"code","e74cd247":"code","40e44830":"code","16564c4f":"code","c5938711":"code","6cf5c143":"code","b88c15d7":"code","ee1cab64":"code","dbb794c3":"code","aa57c5f1":"code","ce9b1763":"code","df28c100":"code","54332394":"code","3100287c":"code","fed1b69c":"code","cba5c047":"code","4fee71b1":"code","edd45cb0":"code","5e4e80a0":"code","8353bf0a":"code","89c58024":"code","cc08b5d1":"code","03415779":"code","8cf36204":"code","480228fd":"code","83cf8024":"code","97f860ea":"code","9a2b0f67":"code","ec34f329":"code","3da4f8e9":"code","119db054":"code","0aa62ce9":"code","fe353b07":"markdown","b1ffcf60":"markdown","847a2f2d":"markdown"},"source":{"a5145df7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bc4584ef":"\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nimport pickle\nfrom tqdm import tqdm\nfrom wordcloud import WordCloud\n\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.calibration import CalibratedClassifierCV\nfrom sklearn import metrics\nfrom sklearn.metrics import roc_auc_score,roc_curve,auc,confusion_matrix,classification_report\n%matplotlib inline\nwarnings.filterwarnings(\"ignore\")\nfrom IPython.display import Image,YouTubeVideo,HTML\n\n#KERAS Import\nfrom keras.models import Sequential, Model\nfrom keras.utils import to_categorical,plot_model\nfrom keras.layers import Dense, Activation\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.initializers import he_normal\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing import sequence\nfrom keras.layers import Dropout\nfrom keras.layers import Embedding, LSTM, GRU, Flatten, Input, concatenate, Conv1D, GlobalMaxPool1D, SpatialDropout1D, GlobalMaxPooling1D, Bidirectional, GlobalAveragePooling1D, add\nfrom keras.regularizers import l2\nfrom keras.optimizers import Adam\nfrom keras.initializers import Orthogonal\nfrom keras.preprocessing.text import one_hot\nfrom keras.constraints import max_norm\n#from tensorboardcolab import TensorBoardColab, TensorBoardColabCallback\n\n#for attention mechanism\nfrom keras import backend as K\nfrom keras.engine.topology import Layer\nfrom keras import initializers, regularizers, constraints, optimizers, layers","41781899":"df = pd.read_csv('..\/input\/jigsaw-unintended-bias-in-toxicity-classification\/train.csv')\ndf.head()","d6e83692":"test_df = pd.read_csv('..\/input\/jigsaw-unintended-bias-in-toxicity-classification\/test.csv')","11392d66":"#print(test_df.iloc[28]['comment_text'])\n#print(\"Toxicity Level: \",test_df.iloc[28]['target'])","46b20f75":"#print(df.iloc[4]['comment_text'])\n#print(\"Toxicity Level: \",df.iloc[4]['target'])","11218dab":"# https:\/\/stackoverflow.com\/a\/47091490\/4084039\nimport re\n\ndef decontracted(phrase):\n    # specific\n    phrase = re.sub(r\"won't\", \"will not\", phrase)\n    phrase = re.sub(r\"can\\'t\", \"can not\", phrase)\n\n    # general\n    phrase = re.sub(r\"n\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'re\", \" are\", phrase)\n    phrase = re.sub(r\"\\'s\", \" is\", phrase)\n    phrase = re.sub(r\"\\'d\", \" would\", phrase)\n    phrase = re.sub(r\"\\'ll\", \" will\", phrase)\n    phrase = re.sub(r\"\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'ve\", \" have\", phrase)\n    phrase = re.sub(r\"\\'m\", \" am\", phrase)\n    return phrase","960ccaf8":"# https:\/\/gist.github.com\/sebleier\/554280\n# we are removing the words from the stop words list: 'no', 'nor', 'not'\nstopwords= ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \"you're\", \"you've\",\\\n            \"you'll\", \"you'd\", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', \\\n            'she', \"she's\", 'her', 'hers', 'herself', 'it', \"it's\", 'its', 'itself', 'they', 'them', 'their',\\\n            'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', \"that'll\", 'these', 'those', \\\n            'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', \\\n            'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', \\\n            'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after',\\\n            'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further',\\\n            'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more',\\\n            'most', 'other', 'some', 'such', 'only', 'own', 'same', 'so', 'than', 'too', 'very', \\\n            's', 't', 'can', 'will', 'just', 'don', \"don't\", 'should', \"should've\", 'now', 'd', 'll', 'm', 'o', 're', \\\n            've', 'y', 'ain', 'aren', \"aren't\", 'couldn', \"couldn't\", 'didn', \"didn't\", 'doesn', \"doesn't\", 'hadn',\\\n            \"hadn't\", 'hasn', \"hasn't\", 'haven', \"haven't\", 'isn', \"isn't\", 'ma', 'mightn', \"mightn't\", 'mustn',\\\n            \"mustn't\", 'needn', \"needn't\", 'shan', \"shan't\", 'shouldn', \"shouldn't\", 'wasn', \"wasn't\", 'weren', \"weren't\", \\\n            'won', \"won't\",\"LOL\",\"IDK\", 'wouldn', \"wouldn't\"]","f698dce0":"#!pip install nltk","00b22e79":"#nltk.download()\nfrom nltk.corpus import stopwords\nsw = stopwords.words(\"english\")","3cf92d3f":"# Combining all the above statemennts \npreprocessed_comments = []\n# tqdm is for printing the status bar\nfor sentence in tqdm(df['comment_text'].values):\n    sent = decontracted(sentence)\n    sent = sent.replace('\\\\r', ' ')\n    sent = sent.replace('\\\\\"', ' ')\n    sent = sent.replace('\\\\n', ' ')\n    sent = re.sub('[^A-Za-z0-9]+', ' ', sent)\n    \n    # https:\/\/gist.github.com\/sebleier\/554280\n    sent = ' '.join(e for e in sent.split() )\n    preprocessed_comments.append(sent.lower().strip())","e74cd247":"\ndf['comment_text'] = preprocessed_comments","40e44830":"df['comment_text'][1]","16564c4f":"# Combining all the above statemennts \npreprocessed_comments_test = []\n# tqdm is for printing the status bar\nfor sentence in tqdm(test_df['comment_text'].values):\n    sent = decontracted(sentence)\n    sent = sent.replace('\\\\r', ' ')\n    sent = sent.replace('\\\\\"', ' ')\n    sent = sent.replace('\\\\n', ' ')\n    sent = re.sub('[^A-Za-z0-9]+', ' ', sent)\n    # https:\/\/gist.github.com\/sebleier\/554280\n    sent = ' '.join(e for e in sent.split())\n    preprocessed_comments_test.append(sent.lower().strip())","c5938711":"test_df['comment_text'] = preprocessed_comments_test","6cf5c143":"test_df['comment_text'][0]","b88c15d7":"from nltk.stem import WordNetLemmatizer\n  \nlemmatizer = WordNetLemmatizer()\n  \nprint(\"rocks :\", lemmatizer.lemmatize(\"greedy\", pos =\"a\"))","ee1cab64":"\ntrain_len = len(df.index)","dbb794c3":"miss_val_train_df = df.isnull().sum(axis=0) \/ train_len\nmiss_val_train_df = miss_val_train_df[miss_val_train_df > 0] * 100\nmiss_val_train_df","aa57c5f1":"def plot_features_distribution(features, title):\n    plt.figure(figsize=(12,6))\n    plt.title(title)\n    for feature in features:\n        # This will find all the values which are not null so as to plot the ditribution\n        sns.distplot(df.loc[~df[feature].isnull(),feature],kde=True,hist=False, bins=120, label=feature)\n    plt.xlabel('')\n    plt.legend()\n    plt.show()","ce9b1763":"# Distribution of target variable\nplt.figure(figsize=(12,6))\nplt.title(\"Distribution of target in the train set\")\nsns.distplot(df['target'],kde=True,hist=False, bins=120, label='target')\nplt.legend()\nplt.show()","df28c100":"features = ['severe_toxicity', 'obscene','identity_attack','insult','threat']\nplot_features_distribution(features, \"Distribution of additional toxicity features in the train set\")","54332394":"def make_wordcloud(comment_words,title):\n    wordcloud = WordCloud(width = 800, height = 800, \n                background_color ='black', \n                stopwords =sw, #stopwords, \n              min_font_size = 10,random_state=101,repeat=True).generate(str(comment_words)) \n  \n    # plot the WordCloud image                        \n    plt.figure(figsize = (8, 8), facecolor = None)\n    plt.title(title)\n    plt.imshow(wordcloud) \n    plt.axis(\"off\") \n    plt.tight_layout(pad = 0) \n    plt.show()","3100287c":"make_wordcloud(df.loc[df['insult'] > 0.3]['comment_text'].sample(10000),title='Wordcloud Comments for insult > 0.3')","fed1b69c":"make_wordcloud(df.loc[df['insult'] > 0.8]['comment_text'].sample(10000),title='Wordcloud Comments for insult > 0.8')","cba5c047":"make_wordcloud(df.loc[df['threat'] < 0.3]['comment_text'],title='Wordcloud Comments for threat < 0.3')","4fee71b1":"make_wordcloud(df.loc[df['obscene'] < 0.3]['comment_text'],title='Wordcloud Comments for obscene < 0.3')","edd45cb0":"identity_columns = ['male', 'female', 'homosexual_gay_or_lesbian', 'christian', 'jewish',\n    'muslim', 'black', 'white', 'psychiatric_or_mental_illness']","5e4e80a0":"for column in identity_columns + ['target']:\n    df[column] = np.where(df[column]>= .5, True, False)","8353bf0a":"df[\"white\"]","89c58024":"y = df['target'].values","cc08b5d1":"df.drop(columns = \"target\",inplace=True)","03415779":"train_df, cv_df, y_train,cv_y = train_test_split(df, y, test_size=0.2, random_state=42)\n","8cf36204":"vectorizer = TfidfVectorizer(max_features = 10000, ngram_range=(1,2),\n               min_df=3, max_df=0.9, strip_accents='unicode', use_idf=1,\n               smooth_idf=1, sublinear_tf=1 )","480228fd":"train_tfidf = vectorizer.fit_transform(train_df[\"comment_text\"])\ncv_tfidf = vectorizer.transform(cv_df[\"comment_text\"])\ntest_tfidf = vectorizer.transform(test_df[\"comment_text\"])","83cf8024":"#https:\/\/gist.github.com\/shaypal5\/94c53d765083101efc0240d776a23823\ndef print_confusion_matrix(confusion_matrix, class_names, figsize = (6,4), fontsize=14):\n    df_cm = pd.DataFrame(\n        confusion_matrix,index=class_names, columns=class_names\n    )\n    fig = plt.figure(figsize=figsize)\n    heatmap = sns.heatmap(df_cm, annot=True, fmt=\"d\")\n    heatmap.yaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation=0, ha='right', fontsize=fontsize)\n    heatmap.xaxis.set_ticklabels(heatmap.xaxis.get_ticklabels(), rotation=45, ha='right', fontsize=fontsize)\n    plt.ylabel('Actual label')\n    plt.xlabel('Predicted label')","97f860ea":"# Code help from Slack channel\ndef threshold_based_prediction(proba,threshold,tpr,fpr):\n    thres = threshold[np.argmax(fpr*(1-tpr))]\n    predictions = []\n    for i in proba:\n        if i>=thres:\n            predictions.append(1)\n        else:\n            predictions.append(0)\n    return predictions","9a2b0f67":"alpha = [10 ** x for x in range(-5, 2)]\nauc_array_train=[]\nauc_array_cv=[]\nfor i in alpha:\n    clf = SGDClassifier(alpha=i, penalty='l2', loss='log', random_state=5,class_weight='balanced')\n    clf.fit(train_tfidf, y_train)\n    sig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\n    sig_clf.fit(train_tfidf, y_train)\n    \n    \n    predict_y_train = sig_clf.predict_proba(train_tfidf)[:,1]\n    predict_y = sig_clf.predict_proba(cv_tfidf)[:,1]\n    auc_array_train.append(roc_auc_score(y_train, predict_y_train))\n    auc_array_cv.append(roc_auc_score(cv_y, predict_y))\n    print('For values of alpha = ', i, \"The auc score on CV is:\",roc_auc_score(cv_y, predict_y))","ec34f329":"# https:\/\/stackoverflow.com\/questions\/25009284\/how-to-plot-roc-curve-in-python\nfpr_train, tpr_train, threshold_train = roc_curve(y_train, predict_y_train)\nfpr_test, tpr_test, threshold_test = roc_curve(cv_y, predict_y)\n\nroc_auc_train = auc(fpr_train, tpr_train)\nroc_auc_test = auc(fpr_test, tpr_test)\n#r = roc_auc_score(fpr_train, tpr_train)\n\nplt.title('Receiver Operating Characteristic')\n\nplt.plot(fpr_train, tpr_train, 'b', label = 'Training AUC = %0.2f' % roc_auc_train)\nplt.plot(fpr_test, tpr_test, 'r', label = 'Test AUC = %0.2f' % roc_auc_test)\n\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],'g--')\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()\n","3da4f8e9":"clf = SGDClassifier(alpha=0.00001, penalty='l2', loss='log', random_state=42,class_weight='balanced')\nclf.fit(train_tfidf, y_train)\nsig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\nsig_clf.fit(train_tfidf, y_train)","119db054":"#predict_y = sig_clf.predict_proba(X_test)\n#predtrain = sig_clf.predict_proba(train_tfidf)[:,1]\n#predcv = sig_clf.predict_proba(cv_tfidf)[:,1]\npred = sig_clf.predict_proba(test_tfidf)[:,1]","0aa62ce9":"submission = pd.DataFrame.from_dict({\n    'id': test_df.id,\n    'prediction': pred})\nsubmission.to_csv('submission.csv', index=False)","fe353b07":"In natural language processing, useless words (data), are referred to as stop words.","b1ffcf60":"****Percentage of NaN values****","847a2f2d":"Logistic regression model"}}