{"cell_type":{"60f68898":"code","f7b95875":"code","173717da":"code","de03c053":"code","08c5da6f":"code","cc335687":"code","7d2576a7":"code","af0e2f3d":"code","5d5e84d1":"code","6bed030c":"code","7e172bc4":"code","cbdf2dfc":"code","480d759c":"code","f4c2dd9c":"code","99e05706":"code","0e3d0dcc":"code","0d716dd8":"code","aea7109a":"code","369723b4":"code","5a2f99c4":"code","fb454370":"code","f2aaf4a1":"markdown","ad0196af":"markdown","cd24ea70":"markdown","73ecf8b3":"markdown","9996b920":"markdown","8f1b587d":"markdown","c82a666e":"markdown","8c01aa35":"markdown","6c53b169":"markdown","0831f0cd":"markdown","1a7ec27e":"markdown","ce011ef2":"markdown","0bb6bc74":"markdown","e9a17955":"markdown","b2d8fdff":"markdown","52a337b4":"markdown","c54c914a":"markdown","f27f23a9":"markdown","a779a91a":"markdown","93891736":"markdown","8edab493":"markdown","f50681ad":"markdown","c85aa725":"markdown","95c56f42":"markdown","f7188c70":"markdown","90766404":"markdown","4214785f":"markdown","9c31c6d9":"markdown","26b1cef7":"markdown","c1da3fb1":"markdown","587a2b4d":"markdown","dc8b2949":"markdown","42ee9a31":"markdown","e9e0a351":"markdown","319ccae7":"markdown"},"source":{"60f68898":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport geopandas as gpd\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom collections import Counter\nfrom xgboost import XGBClassifier\nfrom sklearn.svm import LinearSVC\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import f1_score, roc_auc_score, pairwise\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f7b95875":"df = pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv').drop('show_id', axis=1)\ndf = df.fillna('')\ndf['country'] = df['country'].fillna('NaN')\ndf['date_added'] = df['date_added'].fillna('NaN')\ndf.head()","173717da":"def pie(data, title='', min_lim=0, max_lim=0):\n    if max_lim==0:\n        max_lim=len(data)\n    count = pd.Series(Counter(data)).sort_values(ascending=False)[min_lim:max_lim]\n    data = pd.DataFrame({title:count.keys(), 'num':count})\n    fig = px.pie(data, title, 'num')\n    fig.update_layout(legend_title=dict(text=title))\n    fig.show()\n\ndef bar(data, col_name='', title='', ascending=False):\n    count = pd.Series(Counter(data))\n    if ascending:\n        count = count.sort_values(ascending=False)\n    data = pd.DataFrame({title:count.keys(), col_name:count})\n    fig = px.bar(data, title, col_name, color=col_name)\n    fig.show()\n\ndef uniques(col):\n    return_list = []\n    list1 = [i.split(', ') for i in df[col]]\n    for j in list1:\n        for k in j:\n            return_list.append(k)\n    return return_list","de03c053":"pie(df['type'], title='Type of entertainment')","08c5da6f":"pie(df['director'], 'directors', min_lim=1, max_lim=11)","cc335687":"country_list = uniques('country')\npie(country_list, title='country', max_lim=10)","7d2576a7":"pie(df['rating'], title='rating', max_lim=9)","af0e2f3d":"months = [i.split(' ')[0] for i in df['date_added'] if i != 'NaN']\ncount = Counter(months)\nmonths = {'January':count['January'], 'February':count['February'], 'March':count['March'], \n          'April':count['April'], 'May':count['May'], 'June':count['June'], \n          'July':count['July'], 'August':count['August'], 'September':count['September'], \n          'October':count['October'], 'November':count['November'], 'December':count['December']}\nbar(months, 'Movies\/Shows', 'Months')","5d5e84d1":"bar(df['release_year'][df['release_year']>1970], 'Amount released', 'Years')","6bed030c":"genre_list = uniques('listed_in')\nbar(genre_list, 'Movies\/Shows', 'Genre', ascending=True)","7e172bc4":"nums = []\ni = 0\nfor dur in df['duration']:\n    if dur.split(' ')[1] == 'min':\n        nums.append(i)\n    i += 1\nduration = [i for i in df['release_year'][nums]]\n\nyears = np.unique(df['release_year'])[1:]\nyears = dict(zip(years, [0]*len(years)))\n\nfor i in nums:\n    years[df['release_year'][i]] += int(df['duration'][i].split(' ')[0])\n\nfor i in Counter(duration):\n    years[i] = round(years[i]\/Counter(duration)[i])\n\ndata = dict(zip(years.keys(), years.values()))\nbar(data, 'Average duration (mins)', 'Year')","cbdf2dfc":"genres = []\nfor dec in ['196', '197', '198', '199', '200', '201', '202']:\n    temp = []\n    decade = df[[str(i)[:3]==dec for i in df['release_year']]]\n    list1 = [i.split(', ') for i in decade['listed_in']]\n    for i in list1:\n        for j in i:\n            temp.append(j)\n    genres.append(temp)\n\nfor decade in genres:\n    data = Counter(decade)\n    data = pd.Series(data).sort_values(ascending=False)\n    data = dict(zip(data.keys(), data))\n    bar(data, 'Amount of Entertainment in '+str(1960+(genres.index(decade)*10))+'s', 'Genre')","480d759c":"countries = []\nfor i in [i for i in df['country']]:\n    for j in i.split(', '):\n        countries.append(j)\n\ntitle = 'Number of movies\/shows'\nworld = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\nworld.at[4, 'name'] = 'United States'\nworld.at[174, 'iso_a3'] = 'KOS'\nworld.index = world['name']\nworld = world.reindex(countries)\nworld['iso_a3'] = world['iso_a3'].fillna('NaN')\ndf['iso_a3'] = world['iso_a3'].reset_index(drop=True)\n\ndata = Counter(df['iso_a3'])\ndata = pd.DataFrame({'country':data.keys(), title:data.values()})\nfig = px.choropleth(data, locations='country', color=title, title=title)\nfig.show()","f4c2dd9c":"df['cast'] = df['cast'].fillna('NaN')\ndf['cast_num'] = [len(i.split(', ')) for i in df['cast']]\ntitle = 'Average number of actors'\ncast_count = np.asarray(df.groupby('iso_a3').cast_num)\ncast_count = pd.DataFrame({'country':[i[0] for i in cast_count], title:[sum(i[1])\/len(i[1]) for i in cast_count]})\nfig = px.choropleth(cast_count, locations='country', color=title, title=title)\nfig.show()","99e05706":"for genre in pd.Series(Counter(genre_list)).sort_values(ascending=False)[:5].keys():\n    title = 'Percent of '+genre\n    genre_count = [i.split(', ').count(genre) for i in df['listed_in']]\n    df['genre_count'] = genre_count\n    genre_count = np.asarray(df.groupby('iso_a3').genre_count)\n    genre_count = pd.DataFrame({'country':[i[0] for i in genre_count], title:[sum(i[1])*100\/len(i[1]) for i in genre_count]})\n    fig = px.choropleth(genre_count, locations='country', color=title, title=title)\n    fig.show()","0e3d0dcc":"df['rating'] = df['rating'].fillna('NaN')\nfor rating in pd.Series(Counter(df['rating'])).sort_values(ascending=False)[:5].keys():\n    title = 'Percent of '+rating\n    rating_count = [i.count(rating) for i in df['rating']]\n    df['rating_count'] = rating_count\n    rating_count = np.asarray(df.groupby('iso_a3').rating_count)\n    rating_count = pd.DataFrame({'country':[i[0] for i in rating_count], title:[sum(i[1])\/len(i[1]) for i in rating_count]})\n    fig = px.choropleth(rating_count, locations='country', color=title, title=title)\n    fig.show()","0d716dd8":"def clean_data(x):\n    return str.lower(x.replace(' ', ''))\ndef create_soup(x):\n    return x['title'] + ' ' + x['director'] + ' ' + x['cast'] + ' ' + x['listed_in'] + ' ' + x['description']\n\nnew_df = df.fillna('')\nfeatures = ['title', 'director', 'cast', 'listed_in', 'description']\nnew_df = new_df[features]\n\nfor feature in new_df:\n    new_df[feature] = new_df[feature].apply(clean_data)\nnew_df['soup'] = new_df.apply(create_soup, axis=1)","aea7109a":"count = CountVectorizer(stop_words='english')\ncount_matrix = count.fit_transform(new_df['soup'])\n\ncos_sim = pairwise.cosine_similarity(count_matrix, count_matrix)\nnew_df = new_df.reset_index()\nindices = pd.Series(new_df.index, index=new_df['title'])\n\ndef recommend(title, cos_sim=cos_sim):\n    title = title.replace(' ', '').lower()\n    idx = indices[title]\n    sim_scores = list(enumerate(cos_sim[idx]))\n    sim_scores = sorted(sim_scores, key=lambda x:x[1], reverse=True)\n    sim_scores = sim_scores[1:11]\n    movie_indices = [i[0] for i in sim_scores]\n    return list(zip(df['title'][movie_indices], [i[1] for i in sim_scores]))","369723b4":"recommend('Cobra Kai')","5a2f99c4":"recommend('Friends')","fb454370":"recommend('Trevor Noah: Afraid of the Dark')","f2aaf4a1":"# Countries using genres","ad0196af":"**Please upvote if you find this helpful!**","cd24ea70":"# Number of movies\/shows around the world","73ecf8b3":"# Directors","9996b920":"# Netflix Movies and Shows\nHello everybody! Welcome to my notebook, where today we will be analysing Netflix's various movies and TV shows.","8f1b587d":"International Movies, Dramas and Comedies are the most popular genres on Netflix.","c82a666e":"# Countries","8c01aa35":"Finally, we will create a system which recommends Netflix shows and movies to a user.","6c53b169":"Globally, the average number of actors per movie or TV show seems to be 7, while Azerbaijan has the most actors of 25, Botswana has 14 and Latvia has 13.","0831f0cd":"# Most common genres","1a7ec27e":"TV-MA has more than a third of all ratings (37.5%), followed by TV-14 which occupies a quarter, and then TV-PG with 10.5%.","ce011ef2":"# Average duration of movies over the years","0bb6bc74":"### Description of features\n* type         - type of entertainment: \"Movie\" or \"TV Show\"\n* title        - name of movie or show\n* director     - name of director\n* cast         - main actors in the title\n* country      - country where the entertainment is from\n* date_added   - date of release\n* release_year - year of release\n* rating       - age rating for title\n* duration     - length of movie or show: minutes or seasons\n* listed_in    - type of genre\n* description  - general explanation of story","e9a17955":"The next visualisations loop over the most common genres and see how much each country has of them (in percent).","b2d8fdff":"# Netflix Recommender","52a337b4":"<img src=\"https:\/\/www.barnorama.com\/wp-content\/uploads\/2019\/08\/Just-one-more-Netflix-meme-2.jpg\" width=\"400px\"\/>","c54c914a":"# Type of entertainment","f27f23a9":"# Age Rating","a779a91a":"## Thank you for reading this notebook.\n## If you enjoyed this notebook and found it helpful, please give it an upvote and provide feedback, as it would help me make more of these.","93891736":"# Amount of entertainment released over the years","8edab493":"The final visualisations go over the most used age ratings and see how much each country has of them (in percent).","f50681ad":"The most active directors are Raul Campos and Jan Suter, Marcus Raboy and Jay Karas.","c85aa725":"<img src=\"https:\/\/sayingimages.com\/wp-content\/uploads\/to-theperson-netflix-memes.png\" width=\"400px\"\/>","95c56f42":"There was a sudden and exponential growth in the number of movies and TV shows added after 2010, with the peak reaching in 2018.","f7188c70":"The majority of Netflix's entertainment is movies, as they have more than twice the amount of TV shows.","90766404":"The 2000s saw a very gradual demise in the average number of minutes per movie, while 1964 experienced the highest average length, although this could be due to incomplete data.","4214785f":"The months with the most entertainment are October, November and December, while February, May and June have the least amount of releases.","9c31c6d9":"# Average number of actors per country","26b1cef7":"The US released the most entertainment (2682), followed by India with 875 and the UK's 561.","c1da3fb1":"# Common genres of entertainment over the decades","587a2b4d":"# Countries with age ratings","dc8b2949":"The US makes almost half (45.8%) of the movies and TV shows, followed by India with 13% and UK with 10%.","42ee9a31":"Full credit for this recommender system goes to the amazing **Netflix Visualizations, Recommendation, EDA** notebook by **Niharika Pandit** at https:\/\/www.kaggle.com\/niharika41298\/netflix-visualizations-recommendation-eda. Definitely worth a read.","e9e0a351":"Here we can see which genres were the most popular over the decades between 1960 and 2020.","319ccae7":"# Number of movies\/shows per month"}}