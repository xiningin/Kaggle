{"cell_type":{"1eaddd13":"code","b562c0c0":"code","fcba8099":"code","672fd16d":"code","14a42274":"code","cab6fa11":"code","0427fe00":"code","60d8c3cf":"code","28f69bda":"code","2a29104d":"code","143a8d2f":"code","ef9d98e8":"code","44b494b6":"code","e44f9c4b":"markdown","f6e7c7c3":"markdown"},"source":{"1eaddd13":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","b562c0c0":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"white\")\nimport scipy.stats as stats\n%matplotlib inline\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import OneHotEncoder\n\nfrom sklearn.decomposition import PCA\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.ensemble import AdaBoostRegressor\n\n\nfrom sklearn.metrics import mean_squared_error\n\nimport warnings\nwarnings.filterwarnings('ignore')","fcba8099":"data = pd.read_csv('..\/input\/train.csv')","672fd16d":"Y = data['SalePrice']\nfeatures_raw = data.drop('SalePrice', axis = 1)","14a42274":"# Drop features with many NA\nfeatures_raw.drop(['Alley','MiscFeature','PoolQC','Fence', 'FireplaceQu'], axis = 1, inplace = True)","cab6fa11":"# Split features into categorical and numerical data\nnum_var = list(features_raw.select_dtypes(include=['int64', 'float64']).columns)\ncat_var = list(features_raw.select_dtypes(include=['object']).columns)\n\ndata_cat = features_raw[cat_var]\ndata_num = features_raw[num_var]","0427fe00":"# fill nan with most frequent and mean\ndata_cat = data_cat.apply(lambda x:x.fillna(x.value_counts().index[0]))\ndata_num = data_num.fillna(data_num.mean())","60d8c3cf":"seed = 12345\nnum_folds = 5\n\n# Cross Validation Linear Regression R^2\nkfold = KFold(n_splits=10, random_state=7)\nmodel = LinearRegression()\nscoring = 'r2'\nresults = cross_val_score(model, data_num, Y, cv=kfold, scoring=scoring)\nprint(\"R^2: %.3f (%.3f)\" % (results.mean(), results.std()))","28f69bda":"# Cross Validation GBM Regression R^2\nkfold = KFold(n_splits=10, random_state=7)\nmodel = GradientBoostingRegressor()\nscoring = 'r2'\nresults = cross_val_score(model, data_num, Y, cv=kfold, scoring=scoring)\nprint(\"R^2: %.3f (%.3f)\" % (results.mean(), results.std()))","2a29104d":"test_data = pd.read_csv('..\/input\/test.csv')","143a8d2f":"test_data.drop(['Alley','MiscFeature','PoolQC','Fence', 'FireplaceQu'], axis = 1, inplace = True)\n\nnum_var = list(features_raw.select_dtypes(include=['int64', 'float64']).columns)\ncat_var = list(features_raw.select_dtypes(include=['object']).columns)\n\ntest_cat = test_data[cat_var]\ntest_num = test_data[num_var]","ef9d98e8":"test_cat = test_cat.apply(lambda x:x.fillna(x.value_counts().index[0]))\ntest_cat_ohe = pd.get_dummies(test_cat)\n\ntest_num = test_num.fillna(test_num.mean())\n\nX_test = test_num.join(test_cat_ohe)","44b494b6":"# Prepare the model with the best found data transforms, algorithm and hyperparameters on the entire training dataset\n# Regression problem\nscaler = StandardScaler().fit(data_num)\nrescaledX = scaler.transform(data_num)\nmodel = GradientBoostingRegressor()\nmodel.fit(rescaledX, Y)\n# transform the validation dataset and validate with model\n\nrescaledValidationX = scaler.transform(test_num)\npredictions = model.predict(rescaledValidationX)","e44f9c4b":"### Models: LR and GBM","f6e7c7c3":"### Make Predictions on Test Data"}}