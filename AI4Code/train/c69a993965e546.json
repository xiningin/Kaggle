{"cell_type":{"75ea90ea":"code","4eeebe4d":"code","34fe55d2":"code","aef20644":"code","5d984ae5":"code","dd63a86a":"code","1b09ad28":"code","6dc958b8":"code","810a973f":"code","489bd78a":"code","33cec3ef":"code","8171a51f":"code","a9716d00":"code","0bc4742b":"code","63d2ab2a":"code","1bd4b730":"code","e52a42fd":"code","35dd7a69":"code","c3809753":"code","425c9d30":"code","2a20eff2":"code","f9c9586c":"code","a063723a":"code","a1180ee7":"code","9ba1cf5b":"code","268e62b9":"code","b1c62668":"code","663c99d5":"code","500dbef6":"code","69100c3e":"code","4f502ac8":"code","c4a521bb":"code","c2ba8f30":"code","d0620e0d":"code","5a3b55b2":"code","61b51a34":"code","be03b040":"code","6cecf061":"code","4edbcb5a":"code","11e12c40":"code","b2eac8cf":"code","0bc507f1":"code","91847033":"code","45f403d0":"code","890dbcf2":"code","0d857153":"code","bcf5e60e":"code","bb8d35e4":"code","30e44e80":"code","1cdd2f58":"code","1cf25749":"code","3e358852":"code","84df387d":"code","d015958a":"code","256a7d22":"code","840eefce":"code","aae6a1cd":"code","1e7985a9":"code","d6abffcb":"code","f1da1718":"code","7492da4e":"code","305fad2d":"code","d8fafa9f":"code","d1a4a152":"code","8ba78bfa":"code","fcbbaa4e":"markdown","a5e941bd":"markdown","f6baca16":"markdown","2d544d2b":"markdown","986a3c3f":"markdown","bde8df78":"markdown","98d17387":"markdown","3a9ffc84":"markdown","da81474a":"markdown","31a686d9":"markdown","b5f42e52":"markdown","25dc97c5":"markdown","2e6a1d00":"markdown","91ee03ca":"markdown","afef205a":"markdown","06f85d85":"markdown"},"source":{"75ea90ea":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4eeebe4d":"import pandas as pd\n \n# Here we are interested in Combined_News_DJIA.csv file\ndf = pd.read_csv('\/kaggle\/input\/stocknews\/Combined_News_DJIA.csv')","34fe55d2":"df.head()","aef20644":"df.tail()","5d984ae5":"df.info()","dd63a86a":"df.describe().T","1b09ad28":"df = df.drop(['Date'], axis=1)\ndf.head()","6dc958b8":"df_columns = df.columns\nprint(df_columns)","810a973f":"columns = ['Top1']","489bd78a":"df['combined_news'] = df[columns].apply(lambda row:'.'.join(row.values.astype(str)), axis=1)","33cec3ef":"df = df.drop(columns, axis=1)","8171a51f":"df.head()","a9716d00":"columns_2 = ['Top2','Top3', 'Top4', 'Top5','Top6', 'Top7', 'Top8', 'Top9', 'Top10', 'Top11', 'Top12', 'Top13', 'Top14', 'Top15', 'Top16', 'Top17', 'Top18', 'Top19', 'Top20', 'Top21', 'Top22', 'Top23','Top24', 'Top25']\ndf = df.drop(columns_2, axis=1)","0bc4742b":"df.head()","63d2ab2a":"df = df.replace('b\\\"|b\\'|\\\\\\\\|\\\\\\\"', '', regex=True)\ndf.head(2)","1bd4b730":"import matplotlib.pyplot as plt\nplt.style.use('classic')\n%matplotlib inline\nimport seaborn as sns\nsns.set()\n\nax = sns.countplot(x='Label', hue='Label', data=df)","e52a42fd":"from collections import Counter\n\n# Copy df enteries in 2 separate lists based on labels\n\ndata_djia_up = df[df['Label']==1].copy()\ndata_djia_down = df[df['Label']==0].copy()","35dd7a69":"print(data_djia_up[:2])","c3809753":"print(data_djia_down[:2])","425c9d30":"import string\nprint(string.punctuation)","2a20eff2":"from nltk.corpus import stopwords\nprint(stopwords.words('english')[10:15])","f9c9586c":"def punctuation_stopwords_removal(news_article):\n    # filters charecter-by-charecter : ['h', 'e', 'e', 'l', 'o', 'o', ' ', 'm', 'y', ' ', 'n', 'a', 'm', 'e', ' ', 'i', 's', ' ', 'p', 'u', 'r', 'v', 'a']\n    remove_punctuation = [ch for ch in news_article if ch not in string.punctuation]\n    # convert them back to sentences and split into words\n    remove_punctuation = \"\".join(remove_punctuation).split()\n    filtered_news_article = [word.lower() for word in remove_punctuation if word.lower() not in stopwords.words('english')]\n    return filtered_news_article","a063723a":"data_djia_up.loc[:, 'combined_news'] = data_djia_up['combined_news'].apply(punctuation_stopwords_removal)\nprint(data_djia_up[:1])","a1180ee7":"words_djia_up = data_djia_up['combined_news'].tolist()","9ba1cf5b":"words_djia_up[:3]","268e62b9":"data_djia_down.loc[:, 'combined_news'] = data_djia_down['combined_news'].apply(punctuation_stopwords_removal)\nwords_djia_down = data_djia_down['combined_news'].tolist()\nprint(words_djia_down[:2])","b1c62668":"djia_up_list = []\nfor sublist in words_djia_up:\n    for words in sublist:\n        djia_up_list.append(words)\n\ndjia_down_list = []\nfor sublist in words_djia_down:\n    for words in sublist:\n        djia_down_list.append(words)\n        ","663c99d5":"print('DJIA up list : {}'.format(len(djia_up_list)))\nprint('DJIA down list : {}'.format(len(djia_down_list)))","500dbef6":"djia_up_counter = Counter(djia_up_list)\ndjia_down_counter = Counter(djia_down_list)\n\ndjia_up_top_30_words = pd.DataFrame(djia_up_counter.most_common(30), columns=['word', 'count'])\ndjia_down_top_30_words = pd.DataFrame(djia_down_counter.most_common(30), columns=['word', 'count'])","69100c3e":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfig, ax = plt.subplots(figsize=(10, 6))\nsns.barplot(x='word', y='count', data=djia_up_top_30_words, ax=ax)\nplt.title('Top 30 words when DJIA goes up')\nplt.xticks(rotation='vertical')","4f502ac8":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfig, ax = plt.subplots(figsize=(10, 6))\nsns.barplot(x='word', y='count', data=djia_down_top_30_words, ax=ax)\nplt.title('Top 30 words when DJIA goes down')\nplt.xticks(rotation='vertical')","c4a521bb":"df.head()","c2ba8f30":"!pip install transformers","d0620e0d":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\nimport torch\nimport transformers as ppb\nimport warnings\nwarnings.filterwarnings('ignore')","5a3b55b2":"# For DistilBERT\nmodel_class, tokenizer_class, pretrained_weights = (ppb.DistilBertModel, ppb.DistilBertTokenizer, 'distilbert-base-uncased')\n\n# load pre-trained model\/tokenizer\ntokenizer = tokenizer_class.from_pretrained(pretrained_weights)\nmodel = model_class.from_pretrained(pretrained_weights)","61b51a34":"tokenized = df['combined_news'].apply((lambda x: tokenizer.encode(x, add_special_token=True)))","be03b040":"print(tokenized.shape)","6cecf061":"tokenized[:1]","4edbcb5a":"max_len = 0\nfor i in tokenized.values:\n    if len(i)>max_len:\n        max_len = len(i)\nprint(max_len)\npadded = np.array([i + [0]*(max_len - len(i)) for i in tokenized.values])","11e12c40":"np.array(padded).shape","b2eac8cf":"attention_mask = np.where(padded != 0, 1, 0)\nattention_mask.shape","0bc507f1":"input_ids = torch.tensor(padded)\nattention_mask = torch.tensor(attention_mask)\nwith torch.no_grad():\n    last_hidden_states = model(input_ids, attention_mask=attention_mask)","91847033":"features = last_hidden_states[0][:, 0, :].numpy()\nlabels = df['Label']","45f403d0":"print(features[:10])","890dbcf2":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\n\ntrain_features, test_features, train_labels, test_labels = train_test_split(features, labels)","0d857153":"lr_clf = LogisticRegression()\nlr_clf.fit(train_features, train_labels)","bcf5e60e":"lr_clf.score(test_features, test_labels)","bb8d35e4":"from sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\nimport matplotlib.pyplot as plt\nlogit_roc_auc = roc_auc_score(test_labels, lr_clf.predict(test_features))\nfpr, tpr, thresholds = roc_curve(test_labels, lr_clf.predict_proba(test_features)[:,1])\nplt.figure()\nplt.plot(fpr, tpr, label='Logistic Regression (area = %0.2f)' % logit_roc_auc)\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic')\nplt.legend(loc=\"lower right\")\nplt.savefig('Log_ROC')\nplt.show()","30e44e80":"from sklearn.feature_extraction.text import CountVectorizer","1cdd2f58":"df = pd.read_csv('\/kaggle\/input\/stocknews\/Combined_News_DJIA.csv')","1cf25749":"columns = ['Top1', 'Top2','Top3', 'Top4', 'Top5','Top6', 'Top7', 'Top8', 'Top9', 'Top10', 'Top11', 'Top12', 'Top13', 'Top14', 'Top15', 'Top16', 'Top17', 'Top18', 'Top19', 'Top20', 'Top21', 'Top22', 'Top23','Top24', 'Top25']\ndf['combined_news'] = df[columns].apply(lambda row:'.'.join(row.values.astype(str)), axis=1)","3e358852":"df = df.drop(columns, axis=1)","84df387d":"from bs4 import BeautifulSoup\n\ndf= df.replace('b\\\"|b\\'|\\\\\\\\|\\\\\\\"', '', regex=True)\ndf.head()","d015958a":"bow_transformer = CountVectorizer(analyzer=punctuation_stopwords_removal).fit(df['combined_news'])","256a7d22":"len(bow_transformer.vocabulary_)","840eefce":"sample_djia_down = df['combined_news'][0]\nbow_sample_djia_down = bow_transformer.transform([sample_djia_down])\nprint(sample_djia_down)\nprint('=====')\nprint(bow_sample_djia_down)","aae6a1cd":"print('Printing bag-of-words for sample 1 (DJIA goes down) :')\nrow, cols = bow_sample_djia_down.nonzero()\nfor col in cols:\n    print(bow_transformer.get_feature_names()[col])","1e7985a9":"print(np.shape(bow_sample_djia_down))","d6abffcb":"print('Printing bag-of-words for sample 2 (DJIA goes up\/remains the same :)')\nsample_djia_up = df['combined_news'][1]\nbow_sample_djia_up = bow_transformer.transform([sample_djia_up])\nprint(sample_djia_up)\nprint('======')\nprint(bow_sample_djia_up)","f1da1718":"from sklearn.feature_extraction.text import TfidfTransformer\n\nbow_data = bow_transformer.transform(df['combined_news'])\nprint(bow_data[:1])\ntfidf_transformer = TfidfTransformer().fit(bow_data)","7492da4e":"final_tfidf = tfidf_transformer.transform(bow_data)\nprint(final_tfidf)","305fad2d":"from sklearn.model_selection import train_test_split\n\nfeatures_train, features_test, labels_train, labels_test = train_test_split(final_tfidf, df['Label'], test_size=0.3, random_state=5)","d8fafa9f":"features_train = features_train.A\nfeatures_test = features_test.A","d1a4a152":"from sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n\ndjia_movement_detect_model_MNB = MultinomialNB()\ndjia_movement_detect_model_MNB.fit(features_train, np.asarray(labels_train, dtype=\"float64\"))\npred_test_MNB = djia_movement_detect_model_MNB.predict(features_test)\n\nacc_MNB = accuracy_score(np.asarray(labels_test, dtype=\"float64\"), pred_test_MNB)\nprint(acc_MNB)","8ba78bfa":"from sklearn.metrics import roc_curve, auc\n\nfpr, tpr, thr = roc_curve(np.asarray(labels_test, dtype=\"float64\"), djia_movement_detect_model_MNB.predict_proba(features_test)[:,1])\nplt.figure(figsize=(5, 5))\nplt.plot(fpr, tpr)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic Plot')\nauc_knn4 = auc(fpr, tpr) * 100\nplt.legend([\"AUC {0:.3f}\".format(auc_knn4)]);","fcbbaa4e":"### Padding\nAfter tokenization, tokenized is a list of sentences -- each sentences is represented as a list of tokens. We want BERT to process our examples all at once (as one batch). It's just faster that way. For that reason, we need to pad all lists to the same size, so we can represent the input as one 2-d array, rather than a list of lists (of different lengths)","a5e941bd":"## Model #1: And Now, Deep Learning!\nNow that we have our model and inputs ready, let's run our model!<br>\nThe `model()` function runs our sentences through BERT. The results of the processing will be returned into last_hidden_states.","f6baca16":"# Predicting DJIA Movement with BERT\n\nIn this notebook, I have tried to perform NLP on daily financial news using BERT. Few things to note:<br>\n1. Due to computational restriction, I couldnot combine all the news columns while working with BERT. \n2. Also, BERT can process only 512 tokens at a time, so even if the kernel was computationally strong, I couldnot have used all news articles column. If I combined all news articles, final number of tokens generated was 618. Hence the code was breaking. \n","2d544d2b":"# TFIDF (optional)\n\nThis part of kernel is optional. I wanted to explore how tf-idf would work on predicting the movement of DJIA.","986a3c3f":"### Masking\nIf we directly send padded to BERT, that would slightly confuse it. We need to create another variable to tell it to ignore (mask) the padding we've added when it's processing its input. That's what attention_mask is:","bde8df78":"As we can clearly see, there are many html tags which should be removed to avoid any biases. ","98d17387":"One thing to note is that BERT model takes only 512 tokens at a time. So in this case, max length exceeded 512 (628 to be exact.) For this purpose, I will be taking top 10 news only. Due to compuational capacity restriction, I cannot use more than one column for training the model. Hence, I will be taking only top1 news into account. ","3a9ffc84":"# Observation\n\nHere, after looking at the data, I feel we donot require date column and we can combine all the top 25 news into one single column. Hence, we can drop date column and merge the headline columns together. Also, since I would be using BERT for final classification and BERT allows only 512 tokens at a time, hence I would be taking combination of top 10 news only. ","da81474a":"# Reading CSV file\n\nIn this csv file, Top1 to Top25 are the news articles in decreasing order of their priority.<br>\n\nLabel \"1\" is when DJIA Adj Close value rose or stayed as the same.<br>\nLabel \"0\" is when DJIA Adj Close value decreased.\n                                                                                             ","31a686d9":"# Data pre-processing\n\nNow that we have separated the contents of dataframe based on their labels, we need to pre-process the `combined_news` coloumn. This will involve the following steps -<br>\n1. Punctuation removal\n2. Stopwords removal\n\n## Punctuations","b5f42e52":"## Load pre-trained DistilBERT model\n","25dc97c5":"Now, lets visualize the most common terms that occur when DJIA remains the same or goes up.","2e6a1d00":"# EDA on final dataframe\n\n## Counting Labels\n\nHere, I am visualizing the number of times DJIA remanined the same\/went up and number of times it went down.","91ee03ca":"## Stopwords\nStop words are words like \u201cand\u201d, \u201cthe\u201d, \u201chim\u201d, which are presumed to be uninformative in representing the content of a text, and which may be removed to avoid them being construed as signal for prediction.","afef205a":"# Using DistilBERT for DJIA movement prediction\n\nHere, we would be using DistilBert for predicting the movement of DJIA. <br>\nYou can also view Jalammar's notebook on [using BERT for the first time](https:\/\/github.com\/jalammar\/jalammar.github.io\/blob\/master\/notebooks\/bert\/A_Visual_Notebook_to_Using_BERT_for_the_First_Time.ipynb)<br>\nLet's have a look at our pre-processed dataset :","06f85d85":"## Model 1 : Preparing dataset\nBefore we can hand our sentences to BERT, we need to so some minimal processing to put them in the format it requires.\n### Tokenization\nOur first step is to tokenize the sentences -- break them up into word and subwords in the format BERT is comfortable with"}}