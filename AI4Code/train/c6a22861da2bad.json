{"cell_type":{"510027fa":"code","121bf230":"code","95296a7c":"code","6f04e5b8":"code","0a13d7e0":"code","0ef0ab37":"code","a2a71103":"code","bf62f557":"code","013341b3":"code","77ca0548":"code","04502147":"code","1a94add6":"code","05c54aac":"code","03a963c7":"code","ea8e891a":"code","f7e51b31":"code","1de826c9":"code","860aef43":"code","cea81170":"code","45e940e0":"code","af04e9e5":"markdown"},"source":{"510027fa":"from pathlib import Path\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom sklearn.model_selection import train_test_split","121bf230":"input_path = Path('\/kaggle\/input\/petfinder-pawpularity-score\/')\nlist(input_path.iterdir())","95296a7c":"# sample submission\npd.read_csv(input_path\/'sample_submission.csv').head()","6f04e5b8":"train_df = pd.read_csv(input_path\/'train.csv')\ntest_df = pd.read_csv(input_path\/'test.csv')\ntrain_imgs = input_path\/'train'\ntest_imgs = input_path\/'test'\n\ntrain_df.shape, test_df.shape","0a13d7e0":"train_df.head()","0ef0ab37":"# sample images check\nfig, ax = plt.subplots(1, 4, sharex=True, figsize=(14, 6))\n\nrandom_train_imgs = train_df.sample(4)\nfor enum, (key, img_id) in enumerate(random_train_imgs.iterrows()):\n    im_read = plt.imread(train_imgs\/(img_id.Id+'.jpg'))\n    ax[enum].imshow(im_read)\n    ax[enum].set_title(img_id.Pawpularity)\nplt.tight_layout()\nplt.show()","a2a71103":"# calculate height and width of images\nfrom PIL import Image\nimg = Image.open(train_imgs\/(train_df.loc[0, 'Id']+'.jpg'))\nimg.size","bf62f557":"train_df['width'], train_df['height'] = zip(*train_df.Id.apply(lambda x: Image.open(train_imgs\/(x+'.jpg')).size))","013341b3":"train_df['img_path'] = train_df.Id.apply(lambda x: (train_imgs\/(x+'.jpg')).as_posix())\ntest_df['img_path'] = test_df.Id.apply(lambda x: (test_imgs\/(x+'.jpg')).as_posix())\ntrain_df.head()","77ca0548":"print(f'Avg width: {train_df.width.mean()}, Avg height: {train_df.height.mean()}')","04502147":"import tensorflow as tf\ntf.__version__","1a94add6":"from tensorflow import keras\nfrom keras.layers import Dense, Conv2D, MaxPooling2D, Flatten\nfrom keras.preprocessing.image import ImageDataGenerator","05c54aac":"X_train, X_test, y_train, y_test = train_test_split(train_df.drop('Pawpularity', axis=1), train_df.Pawpularity, test_size=0.2,\n                                                    shuffle=True, random_state=13)\nX_train.shape, X_test.shape","03a963c7":"train_df['Pawpularity_score'] = train_df.Pawpularity.apply(lambda x: x\/100)\ntrain_df.Pawpularity_score.head()","ea8e891a":"train_datagen = ImageDataGenerator(rescale=1.\/255, validation_split=0.2,\n                                   rotation_range=20,\n                                   width_shift_range=20,\n                                   height_shift_range=20,\n                                   zoom_range=20,\n                                   horizontal_flip=True)\ntrain_generator = train_datagen.flow_from_dataframe(dataframe=train_df,\n                                                    directory=train_imgs,\n                                                    x_col='img_path',\n                                                    y_col='Pawpularity_score',\n                                                    target_size=(128, 128),\n                                                    batch_size=32, seed=13,\n                                                    class_mode='raw')","f7e51b31":"model = keras.models.Sequential([\n    Conv2D(64, (3, 3), activation='relu', input_shape=(128, 128, 3)),\n    MaxPooling2D((2, 2)),\n    Conv2D(64, (3, 3), activation='relu'),\n    MaxPooling2D((2, 2)),\n    Conv2D(64, (3, 3), activation='relu'),\n    MaxPooling2D((2, 2)),\n    Conv2D(128, (3, 3), activation='relu'),\n    MaxPooling2D((2, 2)),\n    Flatten(),\n    Dense(512, activation='relu'),\n    Dense(128, activation='relu'),\n    Dense(1, activation='sigmoid')\n])\n\nmodel.compile(optimizer='RMSProp', loss='mse', metrics=['mse'])\n\nmodel.summary()","1de826c9":"model.fit(train_generator, epochs=5)","860aef43":"from keras.preprocessing import image\n\ndef predict_score(img_path):\n    img = image.load_img(img_path, target_size=(128, 128))\n    img = image.img_to_array(img)\n    img = np.expand_dims(img, axis=0)\n    return model.predict(img)[0][0]*100","cea81170":"test_df['Pawpularity'] = test_df.img_path.apply(lambda x: predict_score(x))\ntest_df.head()","45e940e0":"test_df.loc[:, ['Id', 'Pawpularity']].to_csv('submission.csv', index=False)","af04e9e5":"## Model building"}}