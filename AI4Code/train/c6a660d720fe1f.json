{"cell_type":{"bd55036b":"code","413ad04f":"code","fa547f93":"code","814c18bf":"code","963472b0":"code","36057762":"code","2fafb102":"code","9cc2d2c9":"code","8debf1d3":"code","a6be7ab0":"code","45bdd2eb":"code","48cb4862":"code","3075c098":"code","f57449c2":"code","d446125a":"code","bf3ed7e7":"code","88e48be6":"code","98a50fb6":"code","ad200fe3":"code","9fb7168c":"code","f6989998":"code","d576e17f":"code","835553ad":"code","61ab7d21":"code","f90f2893":"code","09c7a37e":"code","410c6ba7":"code","790f623f":"code","e1a92e57":"code","4e2842cf":"code","ed1b87ae":"code","88050ced":"code","f70d8797":"code","81f4d79e":"code","34d79c0a":"markdown","0fe6c19c":"markdown","184dbac0":"markdown","a6a07dc7":"markdown","380c3412":"markdown","4a502f5f":"markdown","6ebc46dc":"markdown","6efbe089":"markdown","4bb262d9":"markdown","435ed93f":"markdown","638ebcf8":"markdown","31218670":"markdown","cbc6d502":"markdown","64fd96c4":"markdown","7c6ff672":"markdown","926a4adf":"markdown","e9f6607a":"markdown"},"source":{"bd55036b":"import pandas as pd\nimport numpy as np\nimport operator \nimport re","413ad04f":"train = pd.read_csv(\"..\/input\/train.csv\").drop('target', axis=1)\ntest = pd.read_csv(\"..\/input\/test.csv\")\ndf = pd.concat([train ,test])\n\nprint(\"Number of texts: \", df.shape[0])","fa547f93":"def load_embed(file):\n    def get_coefs(word,*arr): \n        return word, np.asarray(arr, dtype='float32')\n    \n    if file == '..\/input\/embeddings\/wiki-news-300d-1M\/wiki-news-300d-1M.vec':\n        embeddings_index = dict(get_coefs(*o.split(\" \")) for o in open(file) if len(o)>100)\n    else:\n        embeddings_index = dict(get_coefs(*o.split(\" \")) for o in open(file, encoding='latin'))\n        \n    return embeddings_index","814c18bf":"glove = '..\/input\/embeddings\/glove.840B.300d\/glove.840B.300d.txt'\nparagram =  '..\/input\/embeddings\/paragram_300_sl999\/paragram_300_sl999.txt'\nwiki_news = '..\/input\/embeddings\/wiki-news-300d-1M\/wiki-news-300d-1M.vec'","963472b0":"print(\"Extracting GloVe embedding\")\nembed_glove = load_embed(glove)\nprint(\"Extracting Paragram embedding\")\nembed_paragram = load_embed(paragram)\nprint(\"Extracting FastText embedding\")\nembed_fasttext = load_embed(wiki_news)","36057762":"def build_vocab(texts):\n    sentences = texts.apply(lambda x: x.split()).values\n    vocab = {}\n    for sentence in sentences:\n        for word in sentence:\n            try:\n                vocab[word] += 1\n            except KeyError:\n                vocab[word] = 1\n    return vocab","2fafb102":"def check_coverage(vocab, embeddings_index):\n    known_words = {}\n    unknown_words = {}\n    nb_known_words = 0\n    nb_unknown_words = 0\n    for word in vocab.keys():\n        try:\n            known_words[word] = embeddings_index[word]\n            nb_known_words += vocab[word]\n        except:\n            unknown_words[word] = vocab[word]\n            nb_unknown_words += vocab[word]\n            pass\n\n    print('Found embeddings for {:.2%} of vocab'.format(len(known_words) \/ len(vocab)))\n    print('Found embeddings for  {:.2%} of all text'.format(nb_known_words \/ (nb_known_words + nb_unknown_words)))\n    unknown_words = sorted(unknown_words.items(), key=operator.itemgetter(1))[::-1]\n\n    return unknown_words","9cc2d2c9":"vocab = build_vocab(df['question_text'])","8debf1d3":"print(\"Glove : \")\noov_glove = check_coverage(vocab, embed_glove)\nprint(\"Paragram : \")\noov_paragram = check_coverage(vocab, embed_paragram)\nprint(\"FastText : \")\noov_fasttext = check_coverage(vocab, embed_fasttext)","a6be7ab0":"df['lowered_question'] = df['question_text'].apply(lambda x: x.lower())","45bdd2eb":"vocab_low = build_vocab(df['lowered_question'])","48cb4862":"print(\"Glove : \")\noov_glove = check_coverage(vocab_low, embed_glove)\nprint(\"Paragram : \")\noov_paragram = check_coverage(vocab_low, embed_paragram)\nprint(\"FastText : \")\noov_fasttext = check_coverage(vocab_low, embed_fasttext)","3075c098":"def add_lower(embedding, vocab):\n    count = 0\n    for word in vocab:\n        if word in embedding and word.lower() not in embedding:  \n            embedding[word.lower()] = embedding[word]\n            count += 1\n    print(f\"Added {count} words to embedding\")","f57449c2":"print(\"Glove : \")\nadd_lower(embed_glove, vocab)\nprint(\"Paragram : \")\nadd_lower(embed_paragram, vocab)\nprint(\"FastText : \")\nadd_lower(embed_fasttext, vocab)","d446125a":"print(\"Glove : \")\noov_glove = check_coverage(vocab_low, embed_glove)\nprint(\"Paragram : \")\noov_paragram = check_coverage(vocab_low, embed_paragram)\nprint(\"FastText : \")\noov_fasttext = check_coverage(vocab_low, embed_fasttext)","bf3ed7e7":"oov_glove[:10]","88e48be6":"contraction_mapping = {\"ain't\": \"is not\", \"aren't\": \"are not\",\"can't\": \"cannot\", \"'cause\": \"because\", \"could've\": \"could have\", \"couldn't\": \"could not\", \"didn't\": \"did not\",  \"doesn't\": \"does not\", \"don't\": \"do not\", \"hadn't\": \"had not\", \"hasn't\": \"has not\", \"haven't\": \"have not\", \"he'd\": \"he would\",\"he'll\": \"he will\", \"he's\": \"he is\", \"how'd\": \"how did\", \"how'd'y\": \"how do you\", \"how'll\": \"how will\", \"how's\": \"how is\",  \"I'd\": \"I would\", \"I'd've\": \"I would have\", \"I'll\": \"I will\", \"I'll've\": \"I will have\",\"I'm\": \"I am\", \"I've\": \"I have\", \"i'd\": \"i would\", \"i'd've\": \"i would have\", \"i'll\": \"i will\",  \"i'll've\": \"i will have\",\"i'm\": \"i am\", \"i've\": \"i have\", \"isn't\": \"is not\", \"it'd\": \"it would\", \"it'd've\": \"it would have\", \"it'll\": \"it will\", \"it'll've\": \"it will have\",\"it's\": \"it is\", \"let's\": \"let us\", \"ma'am\": \"madam\", \"mayn't\": \"may not\", \"might've\": \"might have\",\"mightn't\": \"might not\",\"mightn't've\": \"might not have\", \"must've\": \"must have\", \"mustn't\": \"must not\", \"mustn't've\": \"must not have\", \"needn't\": \"need not\", \"needn't've\": \"need not have\",\"o'clock\": \"of the clock\", \"oughtn't\": \"ought not\", \"oughtn't've\": \"ought not have\", \"shan't\": \"shall not\", \"sha'n't\": \"shall not\", \"shan't've\": \"shall not have\", \"she'd\": \"she would\", \"she'd've\": \"she would have\", \"she'll\": \"she will\", \"she'll've\": \"she will have\", \"she's\": \"she is\", \"should've\": \"should have\", \"shouldn't\": \"should not\", \"shouldn't've\": \"should not have\", \"so've\": \"so have\",\"so's\": \"so as\", \"this's\": \"this is\",\"that'd\": \"that would\", \"that'd've\": \"that would have\", \"that's\": \"that is\", \"there'd\": \"there would\", \"there'd've\": \"there would have\", \"there's\": \"there is\", \"here's\": \"here is\",\"they'd\": \"they would\", \"they'd've\": \"they would have\", \"they'll\": \"they will\", \"they'll've\": \"they will have\", \"they're\": \"they are\", \"they've\": \"they have\", \"to've\": \"to have\", \"wasn't\": \"was not\", \"we'd\": \"we would\", \"we'd've\": \"we would have\", \"we'll\": \"we will\", \"we'll've\": \"we will have\", \"we're\": \"we are\", \"we've\": \"we have\", \"weren't\": \"were not\", \"what'll\": \"what will\", \"what'll've\": \"what will have\", \"what're\": \"what are\",  \"what's\": \"what is\", \"what've\": \"what have\", \"when's\": \"when is\", \"when've\": \"when have\", \"where'd\": \"where did\", \"where's\": \"where is\", \"where've\": \"where have\", \"who'll\": \"who will\", \"who'll've\": \"who will have\", \"who's\": \"who is\", \"who've\": \"who have\", \"why's\": \"why is\", \"why've\": \"why have\", \"will've\": \"will have\", \"won't\": \"will not\", \"won't've\": \"will not have\", \"would've\": \"would have\", \"wouldn't\": \"would not\", \"wouldn't've\": \"would not have\", \"y'all\": \"you all\", \"y'all'd\": \"you all would\",\"y'all'd've\": \"you all would have\",\"y'all're\": \"you all are\",\"y'all've\": \"you all have\",\"you'd\": \"you would\", \"you'd've\": \"you would have\", \"you'll\": \"you will\", \"you'll've\": \"you will have\", \"you're\": \"you are\", \"you've\": \"you have\" }","98a50fb6":"def known_contractions(embed):\n    known = []\n    for contract in contraction_mapping:\n        if contract in embed:\n            known.append(contract)\n    return known","ad200fe3":"print(\"- Known Contractions -\")\nprint(\"   Glove :\")\nprint(known_contractions(embed_glove))\nprint(\"   Paragram :\")\nprint(known_contractions(embed_paragram))\nprint(\"   FastText :\")\nprint(known_contractions(embed_fasttext))","9fb7168c":"def clean_contractions(text, mapping):\n    specials = [\"\u2019\", \"\u2018\", \"\u00b4\", \"`\"]\n    for s in specials:\n        text = text.replace(s, \"'\")\n    text = ' '.join([mapping[t] if t in mapping else t for t in text.split(\" \")])\n    return text","f6989998":"df['treated_question'] = df['lowered_question'].apply(lambda x: clean_contractions(x, contraction_mapping))","d576e17f":"vocab = build_vocab(df['treated_question'])\nprint(\"Glove : \")\noov_glove = check_coverage(vocab, embed_glove)\nprint(\"Paragram : \")\noov_paragram = check_coverage(vocab, embed_paragram)\nprint(\"FastText : \")\noov_fasttext = check_coverage(vocab, embed_fasttext)","835553ad":"punct = \"\/-'?!.,#$%\\'()*+-\/:;<=>@[\\\\]^_`{|}~\" + '\"\"\u201c\u201d\u2019' + '\u221e\u03b8\u00f7\u03b1\u2022\u00e0\u2212\u03b2\u2205\u00b3\u03c0\u2018\u20b9\u00b4\u00b0\u00a3\u20ac\\\u00d7\u2122\u221a\u00b2\u2014\u2013&'","61ab7d21":"def unknown_punct(embed, punct):\n    unknown = ''\n    for p in punct:\n        if p not in embed:\n            unknown += p\n            unknown += ' '\n    return unknown","f90f2893":"print(\"Glove :\")\nprint(unknown_punct(embed_glove, punct))\nprint(\"Paragram :\")\nprint(unknown_punct(embed_paragram, punct))\nprint(\"FastText :\")\nprint(unknown_punct(embed_fasttext, punct))","09c7a37e":"punct_mapping = {\"\u2018\": \"'\", \"\u20b9\": \"e\", \"\u00b4\": \"'\", \"\u00b0\": \"\", \"\u20ac\": \"e\", \"\u2122\": \"tm\", \"\u221a\": \" sqrt \", \"\u00d7\": \"x\", \"\u00b2\": \"2\", \"\u2014\": \"-\", \"\u2013\": \"-\", \"\u2019\": \"'\", \"_\": \"-\", \"`\": \"'\", '\u201c': '\"', '\u201d': '\"', '\u201c': '\"', \"\u00a3\": \"e\", '\u221e': 'infinity', '\u03b8': 'theta', '\u00f7': '\/', '\u03b1': 'alpha', '\u2022': '.', '\u00e0': 'a', '\u2212': '-', '\u03b2': 'beta', '\u2205': '', '\u00b3': '3', '\u03c0': 'pi', }","410c6ba7":"def clean_special_chars(text, punct, mapping):\n    for p in mapping:\n        text = text.replace(p, mapping[p])\n    \n    for p in punct:\n        text = text.replace(p, f' {p} ')\n    \n    specials = {'\\u200b': ' ', '\u2026': ' ... ', '\\ufeff': '', '\u0915\u0930\u0928\u093e': '', '\u0939\u0948': ''}  # Other special characters that I have to deal with in last\n    for s in specials:\n        text = text.replace(s, specials[s])\n    \n    return text","790f623f":"df['treated_question'] = df['treated_question'].apply(lambda x: clean_special_chars(x, punct, punct_mapping))","e1a92e57":"vocab = build_vocab(df['treated_question'])\nprint(\"Glove : \")\noov_glove = check_coverage(vocab, embed_glove)\nprint(\"Paragram : \")\noov_paragram = check_coverage(vocab, embed_paragram)\nprint(\"FastText : \")\noov_fasttext = check_coverage(vocab, embed_fasttext)","4e2842cf":"oov_fasttext[:100]","ed1b87ae":"mispell_dict = {'colour': 'color', 'centre': 'center', 'favourite': 'favorite', 'travelling': 'traveling', 'counselling': 'counseling', 'theatre': 'theater', 'cancelled': 'canceled', 'labour': 'labor', 'organisation': 'organization', 'wwii': 'world war 2', 'citicise': 'criticize', 'youtu ': 'youtube ', 'Qoura': 'Quora', 'sallary': 'salary', 'Whta': 'What', 'narcisist': 'narcissist', 'howdo': 'how do', 'whatare': 'what are', 'howcan': 'how can', 'howmuch': 'how much', 'howmany': 'how many', 'whydo': 'why do', 'doI': 'do I', 'theBest': 'the best', 'howdoes': 'how does', 'mastrubation': 'masturbation', 'mastrubate': 'masturbate', \"mastrubating\": 'masturbating', 'pennis': 'penis', 'Etherium': 'Ethereum', 'narcissit': 'narcissist', 'bigdata': 'big data', '2k17': '2017', '2k18': '2018', 'qouta': 'quota', 'exboyfriend': 'ex boyfriend', 'airhostess': 'air hostess', \"whst\": 'what', 'watsapp': 'whatsapp', 'demonitisation': 'demonetization', 'demonitization': 'demonetization', 'demonetisation': 'demonetization'}","88050ced":"def correct_spelling(x, dic):\n    for word in dic.keys():\n        x = x.replace(word, dic[word])\n    return x","f70d8797":"df['treated_question'] = df['treated_question'].apply(lambda x: correct_spelling(x, mispell_dict))","81f4d79e":"vocab = build_vocab(df['treated_question'])\nprint(\"Glove : \")\noov_glove = check_coverage(vocab, embed_glove)\nprint(\"Paragram : \")\noov_paragram = check_coverage(vocab, embed_paragram)\nprint(\"FastText : \")\noov_fasttext = check_coverage(vocab, embed_fasttext)","34d79c0a":"# Improve your Score with some Text Preprocessing\n\n## Updated version : \n > ###  https:\/\/www.kaggle.com\/theoviel\/improve-your-score-with-text-preprocessing-v2\n\n\n\n\nThis kernel is an improved version of @Dieter's work.\n> https:\/\/www.kaggle.com\/christofhenkel\/how-to-preprocessing-when-using-embeddings\n\n\nIt is the preprocessing I use for my current LB score, and it has helped improving it by a bit. Feel free to use it as well, but please upvote if you do. \n\nThis is also how I caught a glimpse of spelling mistakes in the database.\n\n#### Any feedback is appreciated ! ","0fe6c19c":"## Starting point","184dbac0":"## Contractions","a6a07dc7":"### That's all for now !\n\n#### Improvement ideas: \n> Replace acronyms with their meaning\n\n> Replace unknown words with a more general term : \n - ex : fortnite, pubg -> video game\n \n ### *Thanks for reading ! *","380c3412":"#### For example, here are some mistakes and their frequency\n- qoura : 85 times\n- mastrubation : 38 times\n- demonitisation : 30 times\n- \u2026","4a502f5f":"### What's wrong ?","6ebc46dc":"#### FastText seems to have a better knowledge of special characters \n> We use a map to replace unknown characters with known ones.\n\n> We make sure there are spaces between words and punctuation\n","6efbe089":"### What's still missing ? \n- Unknown words\n- Acronyms\n- Spelling mistakes","4bb262d9":"#### First faults appearing are : \n- Contractions \n- Words with punctuation in them\n\n> Let us correct that.","435ed93f":"#### FastText does not understand contractions\n> We use the map to replace them","638ebcf8":"## We can correct manually most frequent mispells","31218670":"#### Better, but we lost a bit of information on the other embeddings.\n> Therer are words known that are known with upper letters and unknown without. Let us fix that :\n- word.lower() takes the embedding of word if word.lower() doesn't have an embedding","cbc6d502":"## Vocabulary and Coverage functions\n> Again, check Dieter's work if you haven't, those are his.","64fd96c4":"## Loading data","7c6ff672":" #### Paragram seems to have a significantly lower coverage. \n>That's because it does not understand upper letters, let us lower our texts :","926a4adf":"## Loading embeddings","e9f6607a":"## Now, let us deal with special characters"}}