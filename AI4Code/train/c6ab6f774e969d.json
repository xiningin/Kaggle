{"cell_type":{"af78e22b":"code","7d32bc99":"code","9320368f":"code","68a0a4bb":"code","319c3d4a":"code","20f02f7f":"code","f2b4fbdf":"code","1e990306":"code","2153bc0a":"markdown","e1bbe89c":"markdown"},"source":{"af78e22b":"! pip install -q lightning-flash[text] --no-index --find-links \/kaggle\/input\/toxic-comments-with-lightning-flash\/frozen_packages\n# ! pip install -q 'https:\/\/github.com\/PyTorchLightning\/lightning-flash\/archive\/refs\/heads\/master.zip#egg=lightning-flash[tabular]'\n# ! pip install -q --upgrade matplotlib pandas --force-reinstall --no-index --find-links \/kaggle\/input\/packages\n! pip list | grep -E \"lightning|torch|transformer\"","7d32bc99":"! ls -l \/kaggle\/input\/\n! ls -l \/kaggle\/input\/jigsaw-toxic-severity-rating\n! ls -l \/kaggle\/input\/toxic-comments-with-lightning-flash","9320368f":"# ! ls -l \/kaggle\/input\/toxic-comments-with-lightning-flash\/cache\/huggingface\n# ! mkdir -p ~\/.cache\/huggingface\/\n# ! rsync -ahv \/kaggle\/input\/toxic-comments-with-lightning-flash\/cache\/huggingface\/ ~\/.cache\/huggingface\n# ! ls -l ~\/.cache\/huggingface","68a0a4bb":"import pandas as pd\n\ncsv_comemnts = \"\/kaggle\/input\/jigsaw-toxic-severity-rating\/comments_to_score.csv\"\ndf_comments = pd.read_csv(csv_comemnts, index_col=\"comment_id\")\ndisplay(df_comments.head())","319c3d4a":"from flash.text import TextClassifier\n\n# m2 = TextClassifier.load_from_checkpoint(\"text_classification_model.pt\", backbone=\".\/my_named_bert\")\nmodel = TextClassifier.load_from_checkpoint(\n    \"\/kaggle\/input\/toxic-comments-with-lightning-flash\/text_classification_model.pt\",\n    backbone=\"\/kaggle\/input\/huggingface-roberta-variants\/pytorch-xlm-roberta-base\/pytorch-xlm-roberta-base\",\n    # local_files_only=True,\n    num_classes=2,\n)","20f02f7f":"import math\nfrom tqdm.auto import tqdm\nfrom flash.core.classification import Logits, Probabilities\n\nmodel.output = Logits()\nbatch_size = 512\n\npredictions = []\nfor i in tqdm(range(math.ceil(len(df_comments) \/ batch_size))):\n    batch = df_comments[\"text\"][i * batch_size:(i + 1) * batch_size]\n    predictions += model.predict(batch)\n\nprint(f\"inputs={len(df_comments)} ; preds={len(predictions)}\")\nprint(predictions[0])","f2b4fbdf":"import numpy as np\n# import matplotlib.pyplot as plt\n\npredictions = np.array(predictions)[:, -1]\n# _= pd.Series(predictions).plot.hist(predictions, bins=20, grid=True)","1e990306":"import os\n\ndf_comments[\"score\"] = predictions\ntry:\n    df_comments[\"score\"].to_csv(\"submission.csv\")\nexcept:\n    lines = [\"comment_id,score\"]\n    lines += [f\"{idx},{row['score']}\" for idx, row in df_comments[[\"score\"]].iterrows()]\n    with open(\"submission.csv\", \"w\") as fp:\n        fp.write(os.linesep.join(lines))\n    # print(lines[:5])\n\n! head submission.csv","2153bc0a":"# Predicting \ud83d\ude4aToxic comments with Lightning\u26a1Flash\n\nThis is just a warpper for the original kernel to follow offline rules...\n\n**see: https:\/\/www.kaggle.com\/jirkaborovec\/toxic-comments-with-lightning-flash**","e1bbe89c":"## Classify new comments with Flash Lightning\nSee the classification docs: https:\/\/lightning-flash.readthedocs.io\/en\/stable\/reference\/text_classification.html"}}