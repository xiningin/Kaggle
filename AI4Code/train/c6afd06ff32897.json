{"cell_type":{"fa3abe7c":"code","7e064f10":"code","9cf13760":"code","fb953ff4":"code","b7eb38af":"code","401d1d7b":"code","ae5036ea":"code","63679e94":"code","55a16ef9":"code","115ce23f":"code","47942294":"code","42f6589c":"code","13639f55":"code","aea160a7":"code","e49883be":"code","837cac01":"code","6d3f46ae":"code","db535aea":"code","639accd4":"code","393713a7":"code","b0be69f0":"code","937f5361":"code","76de51ae":"code","3cb101e0":"code","c1721875":"code","a84d54c0":"code","eb32d23e":"code","883b0ff1":"code","6b491a96":"code","93a93e83":"code","17710313":"code","10a04e8a":"code","bf8a9c8a":"code","2f31cbb0":"code","e517816f":"code","7b08f078":"code","4a9d4db9":"code","34650e02":"code","a8ed26f0":"code","24b80b77":"code","3e7f28d7":"code","ac68bd6d":"code","b0af0890":"code","9d92fe54":"code","bc1a053f":"code","777d6729":"code","0cfd8a9d":"code","12719d33":"code","37831f8a":"code","7cf20287":"code","38cb2ab1":"code","1f3153dc":"code","923de829":"code","efd9ccec":"code","cd84fde5":"code","0994c2df":"code","d695eb72":"code","30732402":"code","285096ca":"code","b35edc3c":"code","3b60cb12":"code","7485ff33":"code","10a05dac":"code","7bdc2aab":"code","141b9291":"code","1655d766":"code","ee5c7a67":"code","be897d27":"code","89846eb8":"code","68e9b287":"code","a078e3b8":"code","da6f9274":"code","43d47efd":"code","555c6c55":"code","b1cba339":"code","ba2c2f09":"code","ea2928ae":"code","b337cce9":"markdown","ecad46a8":"markdown","01331cf2":"markdown","ee2b6b98":"markdown","edb49f08":"markdown","5911a043":"markdown","a1cbaeab":"markdown","d70f79b9":"markdown","2507e28e":"markdown","7dcd2e92":"markdown","63738072":"markdown","a7d37b04":"markdown","6b3e82f6":"markdown","48c9c59c":"markdown","58ad3549":"markdown","c94d3ac7":"markdown","ef86b3bc":"markdown","c94ebb55":"markdown","dda1894d":"markdown","0e85bbbe":"markdown","3b38914d":"markdown","a12612e5":"markdown","7d2d04d4":"markdown","865622c5":"markdown","57fadb1b":"markdown","68cf9d76":"markdown","74f45e44":"markdown","00f1ac93":"markdown"},"source":{"fa3abe7c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    # skip audio file\n    if 'train_audio' in dirname:\n        continue\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7e064f10":"# For Visualization Library\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nsns.set()","9cf13760":"!pip install folium","fb953ff4":"!pip install pydub","b7eb38af":"# Create a world map to show distributions of birds\nimport folium\nfrom folium.plugins import MarkerCluster\nimport plotly.express as px\n\n# Machine Learning\nfrom sklearn import model_selection\n\n# Sound processing library\nimport librosa.display","401d1d7b":"# Sound Processing Library\nimport pydub\nfrom io import BytesIO\nfrom IPython.display import Audio, display\nimport soundfile as sf","ae5036ea":"# Data Read and Check\nINPUT_DIR = \"\/kaggle\/input\/birdsong-recognition\/\"\ntrain_df = pd.read_csv(INPUT_DIR + \"train.csv\")\ntest_df = pd.read_csv(INPUT_DIR + \"test.csv\")\ntrain_df.head()","63679e94":"# We can get column information by using .columns\ntrain_df.columns","55a16ef9":"# We can get more specific information by using .info() method\n# Using this method, we can get column_name, non_null count, and dtype of each column.\ntrain_df.info()","115ce23f":"# On the contrary, we have less columns in the test.csv\n# We have site, row_id, seconds, and audio_id columns.\ntest_df","47942294":"# Regarding example data, we take a look later.\n# We should learn how to use these information for submission later.\n\nexample_audio_summary_df = pd.read_csv(INPUT_DIR + \"example_test_audio_summary.csv\")\nexample_audio_metadata_df = pd.read_csv(INPUT_DIR + \"example_test_audio_metadata.csv\")\nexample_audio_summary_df.head()","42f6589c":"# Submission format\n# We should predict birds column in each row_id.\n\nsample_submission_df = pd.read_csv(INPUT_DIR + \"sample_submission.csv\")\nsample_submission_df","13639f55":"# countplot method of seaborn is quite useful to visualize the number of counts in one column.\nsns.countplot(\"rating\", data=train_df)\nplt.title(\"Record Counts in each Rating\")","aea160a7":"sns.countplot(\"playback_used\", data=train_df)\nplt.title(\"Record Counts in playback_used flag\")","e49883be":"plt.figure(figsize=(18, 6))\nsns.countplot(\"ebird_code\", data=train_df)\nplt.xticks(rotation=90)","837cac01":"sns.countplot(\"channels\", data=train_df)","6d3f46ae":"# groupby method is quite useful to calculate metrics by column data.\ntemp_series= train_df.groupby(\"date\")[\"xc_id\"].count()\ntemp_series","db535aea":"temp_series.index","639accd4":"# Processing date column (convert date column from object type to datetime type\n# \n# Usually, we can use .astype method like below:\n# df[\"date\"] = df[\"date\"].astype(\"datetime64[ns]\")\n# \n# but we have some illegal input in this dataset, so I arranged a little bit.\n\nidx_list = []\n\nfor idx in temp_series.index:\n    new_idx = idx\n    \n    # Year before 1970 is converted into 1970\n    if idx[:4] <= '1970':\n        new_idx = '1970-01-01' \n    \n    # Month should be between 1 and 12.\n    if idx[5:7] == '00':\n        new_idx = new_idx[:5] + '01' + new_idx[7:]\n    \n    # Day should be at least 01 (Not 00)\n    if idx[8:] == '00':\n        new_idx = new_idx[:8] + '01'\n    \n    idx_list.append(new_idx)","393713a7":"temp_series.index = idx_list\ntemp_series.index = temp_series.index.astype(\"datetime64[ns]\")\ntemp_series","b0be69f0":"# Now we can plot counts in each year.\ntemp_series.plot(figsize=(10,4))\nplt.xlabel(\"Year\")\nplt.ylabel(\"Record Count\")\nplt.title(\"Record Count Transition\")","937f5361":"sns.distplot(train_df[\"duration\"])","76de51ae":"train_df[\"pitch\"].unique()","3cb101e0":"column_value = ['Not specified', 'both', 'increasing', 'level', 'decreasing']\n\nfig, axs = plt.subplots(1,3, sharey=True, figsize=(8, 4))\nsns.countplot(train_df[\"pitch\"], ax=axs[0])\nsns.countplot(train_df[\"speed\"], ax=axs[1])\nsns.countplot(train_df[\"volume\"], ax=axs[2])\naxs[0].set_xticklabels(column_value, rotation=90)\naxs[1].set_xticklabels(column_value, rotation=90)\naxs[2].set_xticklabels(column_value, rotation=90)","c1721875":"print(train_df[\"species\"].unique())\nprint(\"The number of spicies is {}.\".format(train_df[\"species\"].nunique()))","a84d54c0":"sns.countplot(train_df[\"number_of_notes\"])","eb32d23e":"train_df[\"secondary_labels\"]","883b0ff1":"sns.countplot(train_df[\"bird_seen\"])\nprint(\"Bird seen yes is {}\".\n      format(len(train_df[train_df[\"bird_seen\"] == \"yes\"]) \/ len(train_df)))","6b491a96":"train_df[\"sci_name\"].nunique()","93a93e83":"train_df[\"location\"].nunique()","17710313":"train_df[\"sampling_rate\"].unique()","10a04e8a":"order=['48000 (Hz)', '44100 (Hz)', '32000 (Hz)', '24000 (Hz)',\n       '22050 (Hz)', '16000 (Hz)', '11025 (Hz)', '8000 (Hz)']\nsns.countplot(train_df[\"sampling_rate\"], order=order)\nplt.xticks(rotation=60)","bf8a9c8a":"train_df[\"type\"].unique()","2f31cbb0":"train_df[\"description\"]","e517816f":"sns.distplot(train_df[\"bitrate_of_mp3\"].str[:-6], kde=False)","7b08f078":"sns.countplot(train_df[\"file_type\"])","4a9d4db9":"train_df[\"background\"]","34650e02":"sns.countplot(train_df[\"length\"], order=[\"Not specified\", \"0-3(s)\", \"3-6(s)\", \"6-10(s)\", \">10(s)\"])","a8ed26f0":"sns.distplot(train_df.loc[train_df[\"latitude\"] != \"Not specified\", \"latitude\"])\nplt.title(\"Distribution of Latitude\")","24b80b77":"sns.distplot(train_df.loc[train_df[\"longitude\"] != \"Not specified\", \"longitude\"])","3e7f28d7":"plt.figure(figsize=(8, 4))\nsns.countplot(train_df[\"country\"])\nplt.xticks(rotation=90)","ac68bd6d":"# Extract only necessesary information\ntemp_df = train_df.loc[(train_df[\"latitude\"] != 'Not specified') & (train_df[\"longitude\"] != 'Not specified'), \n                       [\"country\", \"latitude\", \"longitude\", \"xc_id\", \"ebird_code\"]]\n\n# Convert to float type\ntemp_df[\"latitude\"] = temp_df[\"latitude\"].astype(\"float\")\ntemp_df[\"longitude\"] = temp_df[\"longitude\"].astype(\"float\")\ntemp_df.head()","b0af0890":"# From now on, we plot worldmap and visualize which countries have many records. \ndraw_df = temp_df.groupby(\"country\")[[\"latitude\", \"longitude\"]].mean()\ndraw_df = pd.concat([draw_df, temp_df.groupby(\"country\")[\"xc_id\"].count()], axis=1)\ndraw_df = draw_df.rename(columns={\"xc_id\":\"count\"})\ndraw_df = draw_df.reset_index()\ndraw_df","9d92fe54":"#empty map\nworld_map= folium.Map(tiles=\"cartodbpositron\")\nmarker_cluster = MarkerCluster().add_to(world_map)","bc1a053f":"#for each coordinate, create circlemarker of user percent\nfor i in range(len(draw_df)):\n        lat = draw_df.iloc[i]['latitude']\n        long = draw_df.iloc[i]['longitude']\n        radius= draw_df.iloc[i][\"count\"] \/ len(draw_df)\n        popup_text = \"\"\"Country : {}<br>\n                    Counts : {}<br>\"\"\"\n        popup_text = popup_text.format(draw_df.iloc[i]['country'],\n                                   draw_df.iloc[i]['count']\n                                   )\n        folium.CircleMarker(location = [lat, long], radius=radius, popup= popup_text, fill =True).add_to(marker_cluster)\n#show the map\nworld_map","777d6729":"# Make an empty map\nm = folium.Map(location=[20,0], tiles=\"Mapbox Bright\", zoom_start=2)\n \n# I can add marker one by one on the map\nfor i in range(len(draw_df)):\n   folium.Circle(\n      location=[draw_df.iloc[i]['longitude'], draw_df.iloc[i]['latitude']],\n      popup=draw_df.iloc[i]['country'],\n      radius=draw_df.iloc[i]['count'] \/ len(draw_df) * 10,\n      color='crimson',\n      fill=True,\n      fill_color='crimson'\n   ).add_to(m)\n","0cfd8a9d":"draw_df","12719d33":"fig = px.scatter_geo(draw_df, lat=\"latitude\", lon= \"longitude\", color=\"country\",\n                     hover_name=\"country\", size=\"count\",\n                     projection=\"natural earth\")\nfig.update_geos(\n    visible=False, resolution=50,\n    showcountries=True, countrycolor=\"RebeccaPurple\"\n)\nfig","37831f8a":"grid_by_bird_df = temp_df.groupby(\"ebird_code\")[[\"latitude\", \"longitude\"]].mean()\ngrid_by_bird_df","7cf20287":"sns.scatterplot(y=grid_by_bird_df.iloc[:, 0], x=grid_by_bird_df.iloc[:, 1], hue=grid_by_bird_df.index)\nplt.ylim([-90, 90])\nplt.xlim([-180, 180])\nplt.legend(bbox_to_anchor=(1.01, 1.01), ncol=10)","38cb2ab1":"train_df.columns","1f3153dc":"from wordcloud import WordCloud","923de829":"wordcloud = WordCloud(background_color=\"white\")","efd9ccec":"wordcloud.generate_from_text(\" \".join(list(train_df.loc[train_df[\"description\"].notnull(), \"description\"])))\nplt.imshow(wordcloud)","cd84fde5":"\" \".join(list(train_df.loc[train_df[\"description\"].notnull(), \"description\"]))","0994c2df":"mp3_filename = \"\/kaggle\/input\/birdsong-recognition\/train_audio\/aldfly\/XC134874.mp3\"","d695eb72":"# Read sound file \naudio = pydub.AudioSegment.from_mp3(mp3_filename)\n\n# Convert mp3 data into wave data \nwave = audio.export('_', format=\"wav\")\nwave.seek(0)\nwave = wave.read()\n\n# We get the raw data by removing first 24 bytes of the header.\nX = np.frombuffer(wave, np.int16)[24:] \/ 2.**15","30732402":"# This function allows us to play sound data in jupyter notebook\n\ndef play(x, fr, autoplay=False):\n    display(Audio(x, rate=fr, autoplay=autoplay))","285096ca":"# We can get sampling rate by accesing like below\nint(train_df.loc[train_df[\"xc_id\"] == 134874, \"sampling_rate\"].str[:-4])","b35edc3c":"# This cell outputs the widget to play sound.\nplay(X, fr=48000, autoplay=False)","3b60cb12":"X.shape","7485ff33":"# Sound wave plot\nfr = 48000\nt = np.linspace(0, len(X) \/ fr, len(X))\nplt.plot(t, X, lw=1)","10a05dac":"# n_mels is number of Mel bands to generate\nn_mels=128\n# hop_length is number of samples between successive frames.\nhop_length=2068\n# n_fft is length of the FFT window\nn_fft=2048\n# Passing through arguments to the Mel filters\nS = librosa.feature.melspectrogram(y=X, sr=44000, n_mels=n_mels, hop_length=hop_length, n_fft=n_fft)\n\nlog_S = librosa.power_to_db(S)\nprint(log_S.shape)\n\nplt.figure(figsize=(12, 4))\nlibrosa.display.specshow(data=log_S, sr=44000, hop_length=hop_length, x_axis='time', y_axis='mel')\nplt.colorbar(format='%+2.0f dB')\nplt.title('Mel spectrogram')\nplt.tight_layout()","7bdc2aab":"def get_features(filename, sampling_rate):\n    \"\"\"\n    This function returns mel-frequency cepstrum from its filename and sampling rate\n    \n    Parameters\n    ----------\n    filename : string\n        target filename path\n    sampling_rate : int\n        target filename sampling rate\n\n    Returns\n    -------\n    mfccs_scaled : np.array\n        mel-frequency cepstrum \n    \"\"\"\n\n    if filename: \n        audio = pydub.AudioSegment.from_mp3(filename)\n\n        wave = audio.export('_', format=\"wav\")\n        wave.seek(0)\n        wave = wave.read()\n\n        X = np.frombuffer(wave, np.int16)[24:] \/ 2.**15\n    \n        sr= sampling_rate\n\n    # mfcc (mel-frequency cepstrum)\n    mfccs = librosa.feature.mfcc(y=X, sr=sr, n_mfcc=40)\n    mfccs_scaled = np.mean(mfccs.T,axis=0)\n    \n    \"\"\"\n    Result Visualization Part\n    \"\"\"\n    play(X, fr=sr, autoplay=False)\n    \n    # n_mels is number of Mel bands to generate\n    n_mels=128\n    # hop_length is number of samples between successive frames.\n    hop_length=2068\n    # n_fft is length of the FFT window\n    n_fft=2048\n    # Passing through arguments to the Mel filters\n    S = librosa.feature.melspectrogram(y=X, sr=sampling_rate, n_mels=n_mels, hop_length=hop_length, n_fft=n_fft)\n    \n    log_S = librosa.power_to_db(S)\n\n    plt.figure(figsize=(12, 4))\n    librosa.display.specshow(data=log_S, sr=sampling_rate, hop_length=hop_length, x_axis='time', y_axis='mel')\n    plt.colorbar(format='%+2.0f dB')\n    plt.title('Mel spectrogram')\n    plt.tight_layout()\n        \n    return mfccs_scaled","141b9291":"def extract_features(target_df):\n    \"\"\"\n    This function returns mel-frequency cepstrum result of all train dataset\n    \n    Parameters\n    ----------\n    target_df: pandas.DataFrame\n        DataFrame of train dataset\n    \n    Returns\n    -------\n    features_df : pandas.DataFrame\n        mel-frequency cepstrum result\n    \"\"\"\n    features_list = []\n    features_df = pd.DataFrame()\n    \n    for idx in target_df.index:\n        if idx % 100 == 0:\n            print(idx)\n        \n        sampling_rate = int(target_df.loc[target_df.index == idx, \"sampling_rate\"].str[:-4])\n        bird_name = list(target_df.loc[target_df.index == idx, \"ebird_code\"])[0]\n        xc_id = list(target_df.loc[target_df.index == idx, \"xc_id\"])[0]\n        \n        filename = INPUT_DIR + \"train_audio\/\" + bird_name + \"\/XC\" + str(xc_id) + \".mp3\"\n        \n        try:\n            mfccs = get_features(filename, sampling_rate)\n        except Exception as e:\n            print(\"Extraction error at {}\".format(idx))\n            continue\n        features_list.append([mfccs, bird_name])\n    \n    features_df = pd.DataFrame(features_list,columns = ['feature','class_label']) \n    return features_df\n","1655d766":"ebird_idx_list = [0]\nebird_origin = \"aldfly\"\n\nfor idx in train_df.index:\n    if train_df.loc[idx, \"ebird_code\"] != ebird_origin:\n        ebird_idx_list.append(idx)\n        ebird_origin = train_df.loc[idx, \"ebird_code\"]","ee5c7a67":"extract_features(target_df=train_df.iloc[ebird_idx_list[:5], :])","be897d27":"def get_features(filename, sampling_rate):\n    \"\"\"\n    This function returns mel-frequency cepstrum from its filename and sampling rate\n    \n    Parameters\n    ----------\n    filename : string\n        target filename path\n    sampling_rate : int\n        target filename sampling rate\n\n    Returns\n    -------\n    mfccs_scaled : np.array\n        mel-frequency cepstrum \n    \"\"\"\n\n    if filename: \n        audio = pydub.AudioSegment.from_mp3(filename)\n\n        wave = audio.export('_', format=\"wav\")\n        wave.seek(0)\n        wave = wave.read()\n\n        X = np.frombuffer(wave, np.int16)[24:] \/ 2.**15\n    \n        sr= sampling_rate\n\n    # mfcc (mel-frequency cepstrum)\n    mfccs = librosa.feature.mfcc(y=X, sr=sr, n_mfcc=40)\n    mfccs_scaled = np.mean(mfccs.T,axis=0)\n    \n   \n        \n    return mfccs_scaled","89846eb8":"def extract_features(target_df):\n    \"\"\"\n    This function returns mel-frequency cepstrum result of all train dataset\n    \n    Parameters\n    ----------\n    target_df: pandas.DataFrame\n        DataFrame of train dataset\n    \n    Returns\n    -------\n    features_df : pandas.DataFrame\n        mel-frequency cepstrum result\n    \"\"\"\n    features_list = []\n    features_df = pd.DataFrame()\n    \n    for idx in target_df.index:\n        if idx % 100 == 0:\n            print(idx)\n        \n        sampling_rate = int(target_df.loc[target_df.index == idx, \"sampling_rate\"].str[:-4])\n        bird_name = list(target_df.loc[target_df.index == idx, \"ebird_code\"])[0]\n        xc_id = list(target_df.loc[target_df.index == idx, \"xc_id\"])[0]\n        \n        filename = INPUT_DIR + \"train_audio\/\" + bird_name + \"\/XC\" + str(xc_id) + \".mp3\"\n        \n        try:\n            mfccs = get_features(filename, sampling_rate)\n        except Exception as e:\n            print(\"Extraction error at {}\".format(idx))\n            continue\n        features_list.append([mfccs, bird_name])\n    \n    features_df = pd.DataFrame(features_list,columns = ['feature','class_label']) \n    return features_df","68e9b287":"%%time\nfeatures_df = extract_features(train_df)","a078e3b8":"features_df.head()","da6f9274":"# Save DataFrame and you can use it with other kernels by input this notebook output.  \n# With this dataframe, you can create models like CNN.\nfeatures_df.to_pickle(\"train_data.pkl\")","43d47efd":"example_audio_metadata_df","555c6c55":"example_audio_summary_df","b1cba339":"filename = \"..\/input\/birdsong-recognition\/example_test_audio\/BLKFR-10-CPL_20190611_093000.pt540.mp3\"","ba2c2f09":"audio = pydub.AudioSegment.from_mp3(filename)\n\nwave = audio.export('_', format=\"wav\")\nwave.seek(0)\nwave = wave.read()\n\nX = np.frombuffer(wave, np.int16)[24:] \/ 2.**15\n    \nsr= 22000","ea2928ae":"play(X, sr, False)","b337cce9":"Most of the files are .mp3 type.","ecad46a8":"The number of notes in most part of the dataset is \"Not-specified\".  \nHowever we have some values with number of notes.","01331cf2":"Regarding longitude, the most part of the records are bretween -150 and -50 degrees. (Around United States)","ee2b6b98":"Most of the data don't use playback.","edb49f08":"We have 264 kinds of birds in this dataset.  \nMany kinds of these birds have 100 counts, some have less than 100 counts.","5911a043":"# Data Visualization and Sound Processing Tutorial !\n\nThis notebook is created for beginners to take a look of this competition dataset and how to process sound data.  \nThis is my first time to tackle with sound data competition, so I refered some other articles.\n\n1st public version: 04, Jul, 2020.\n\nHere is table of contents:\n- [Library Import and Data Check](#Library-Import-and-Data-Check)\n- [Data Visualization](#Data-Visualization)\n    - [General Information and Visualization](#General-Information-and-Visualization)\n    - [Location Information and Visualization](#Location-Information-and-Visualization)\n- [Sound Processing](#Sound-Processing)\n- [Reference](#Reference)","a1cbaeab":"# Library Import and Data Check","d70f79b9":"The distribution of this duration column in this dataset is seemed to be possion one.  \nThat is, we have many short uration data in the shorter duration, and less super-long duration data.","2507e28e":"Most of the sampling rate is 44100 Hz or 48000 Hz.","7dcd2e92":"The highest rating 5.0 has the most records compared to others.  \nWe have 0.0 rating, but it seems we don't have not so many records with rating 0.5 and 1.0.","63738072":"# Reference\n\nHere is the reference of this notebook.\n- https:\/\/github.com\/ipython-books\/cookbook-2nd-code\/blob\/master\/chapter11_image\/06_speech.ipynb\n- https:\/\/dev.to\/apoorvadave\/environmental-sound-classification-1hhl\n- https:\/\/blog.brainpad.co.jp\/entry\/2018\/04\/17\/143000 (In Japanese Only)\n- https:\/\/python-graph-gallery.com\/310-basic-map-with-markers\/ \n- https:\/\/plotly.com\/python\/bubble-maps\/\n\n# Acknowledgement\n\nThank you for reading this notebook.  \nI know my notebook isn't complete accurate, but I hope this notebook works as a clue for beginners.  \nAny comments and upvotes are very welcome, Thank you !!","a7d37b04":"Recently we have more records than the past few decades.","6b3e82f6":"## Location Information and Visualization\n\nThis is the reference of this subsection\n- https:\/\/python-graph-gallery.com\/310-basic-map-with-markers\/ \n- https:\/\/plotly.com\/python\/bubble-maps\/","48c9c59c":"In the train.csv, we have metadata of each sound records.  \nFron now on, we'll investigate this metadata deeper and deeper.","58ad3549":"As for bitrate of mp3 information, most of the parts is around 125,000 (bps).","c94d3ac7":"pydub is a library which can process sound data in python.","ef86b3bc":"The latitude of the records is concentrated around between 20 and 60 degrees.","c94ebb55":"It seems we have some records that are through high pass filter in the dataset. ","dda1894d":"It seems United States has huge amounts of records.","0e85bbbe":"This world map is showing which countries have many records.  \nAs we've seen before, United States is the most recorded place.","3b38914d":"# Data Visualization\n\nFron now on, we try to visualize metadata information of train dataset.   \nFirst we only use train.csv information and process sound data in the next section.\n\n## General Information and Visualization","a12612e5":"This plot shows the strength of each Hz in each time.  \nThat is, for example, around 5 seconds, sound of 2048 ~ 4096 Hz is slightly louder than other sounds of Hz.  \n\nThis result can be used as an image, and image processing model can be used with this result.\n\nLet's see how this plot differs from each other.  \nTo do that, I define some functions.","7d2d04d4":"The number of spicies is 264, as we've checked when we visualized ebird_code countplot","865622c5":"# Sound Processing\n\nFrom now on, I'll try to process sound data!  \nI refered some articles and codes to write the cells below.  \n- https:\/\/github.com\/ipython-books\/cookbook-2nd-code\/blob\/master\/chapter11_image\/06_speech.ipynb\n- https:\/\/dev.to\/apoorvadave\/environmental-sound-classification-1hhl\n- https:\/\/blog.brainpad.co.jp\/entry\/2018\/04\/17\/143000 (In Japanese Only)","57fadb1b":"You can directly listen to bird call with jupyter notebook.  \nAnd when you click play button, you can recognize that each bird sound differs from each other.  \nAlso, you can see the differences by seeing the mel spectogram plot.  \nFor example, when you listen to the fifth sound, around 0:20 ~ 0:35 seconds, birds call actively.  \nThe fifth mel spectogram also shows around that time, a loud sound is recorded between 1024 ~ 4096 Hz. ","68cf9d76":"About channel, 1 (mono) channel has a little bit more counts than 2 (stereo).","74f45e44":"Bird_seen of most of the record is yes. (About 76 %)","00f1ac93":"Warning! \nThe cell below takes time!"}}