{"cell_type":{"8466408c":"code","81fce5ef":"code","7e69dc8a":"code","fd0ea087":"code","97c58da6":"code","a6b0a30a":"code","2e90e257":"code","4510de86":"code","9d4f9d73":"code","79ce582f":"code","fbe904fd":"code","86ebafad":"code","e69ec7f1":"markdown","6bab04f7":"markdown","8a23f5ae":"markdown","bee3e872":"markdown","6a5d407e":"markdown"},"source":{"8466408c":"import gc\nimport joblib\nimport lightgbm as lgb\nfrom matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom pathlib import Path\nimport seaborn as sns\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import log_loss\nfrom warnings import simplefilter","81fce5ef":"!pip install kaggler","7e69dc8a":"import kaggler\nfrom kaggler.model import AutoLGB\nprint(kaggler.__version__)","fd0ea087":"plt.style.use('fivethirtyeight')\npd.set_option('max_columns', 100)\nsimplefilter('ignore')","97c58da6":"feature_name = 'le_te_sdae'\nalgo_name = 'lgb'\nversion = 2\nmodel_name = f'{algo_name}_{feature_name}_v{version}'\n\ndata_dir = Path('..\/input\/tabular-playground-series-jun-2021')\ntrain_file = data_dir \/ 'train.csv'\ntest_file = data_dir \/ 'test.csv'\nsample_file = data_dir \/ 'sample_submission.csv'\n\nfeature_dir = Path('..\/input\/tps-6-dae-features')\n\nbuild_dir = Path('.')\npredict_val_file = build_dir \/ f'{model_name}.val.txt'\npredict_tst_file = build_dir \/ f'{model_name}.tst.txt'\nsubmission_file = build_dir \/ f'{model_name}.sub.csv'\n\nid_col = 'id'\ntarget_col = 'target'\n\nn_fold = 5\nseed = 42\nn_class = 9\nencoding_dim = 128\nratio = 4\nbatch_size = 64 * ratio\nlr = 0.0001 * ratio","a6b0a30a":"trn = pd.read_csv(train_file, index_col=id_col)\ntst = pd.read_csv(test_file, index_col=id_col)\nsub = pd.read_csv(sample_file, index_col=id_col)\nprint(trn.shape, tst.shape, sub.shape)","2e90e257":"y = trn[target_col].str.split('_').str[1].astype(int) - 1\nn_trn = trn.shape[0]\ndf = pd.concat([trn.drop(target_col, axis=1), tst], axis=0)\nprint(df.shape)","4510de86":"feature_cols = [f'le_{x}' for x in df.columns] + [f'te_{x}' for x in df.columns] + [f'sdae_{i}' for i in range(encoding_dim)]\nprint(len(feature_cols))","9d4f9d73":"# parameters and best epochs from AutoLGB\nis_tuned = True\nn_best = 376\nparams = {'bagging_freq': 1, \n          'verbosity': -1, \n          'seed': seed, \n          'num_threads': -1, \n          'feature_pre_filter': False, \n          'num_class': n_class, \n          'objective': 'multiclass', \n          'metric': 'multi_logloss', \n          'boosting': 'gbdt', \n          'bagging_fraction': 0.5, \n          'feature_fraction': 0.8, \n          'lambda_l1': 10, \n          'lambda_l2': 10, \n          'learning_rate': 0.013959172480364537, \n          'max_depth': 6, \n          'min_child_samples': 25, \n          'num_leaves': 31}","79ce582f":"cv = StratifiedKFold(n_splits=n_fold, shuffle=True, random_state=seed)\n\nP = np.zeros((n_trn, n_class), dtype=float)\nP_tst = np.zeros((tst.shape[0], n_class), dtype=float)\nfor i, (i_trn, i_val) in enumerate(cv.split(trn, y), 1):\n    y_trn, y_val = y[i_trn], y[i_val]\n    \n    X_trn_i = joblib.load(str(feature_dir \/ f'{feature_name}.trn{i}.joblib'))\n    X_val_i = joblib.load(str(feature_dir \/ f'{feature_name}.val{i}.joblib'))\n    X_tst_i = joblib.load(str(feature_dir \/ f'{feature_name}.tst{i}.joblib'))\n    \n    if not is_tuned:\n        clf = AutoLGB(objective='multiclass', metric='multi_logloss', params={'num_class': n_class}, \n                      sample_size=X_trn_i.shape[0], feature_selection=False, random_state=seed)\n        clf.tune(pd.DataFrame(X_trn_i, columns=feature_cols), y_trn)\n        features = clf.features\n        params = clf.params\n        n_best = clf.n_best\n        print(f'{n_best}')\n        print(f'{params}')\n        print(f'{features}')\n        is_tuned = True\n    \n    trn_data = lgb.Dataset(X_trn_i, y_trn)\n    val_data = lgb.Dataset(X_val_i, y_val)\n    clf = lgb.train(params, trn_data, n_best, val_data, verbose_eval=100)\n    \n    P[i_val] = clf.predict(X_val_i)\n    P_tst += clf.predict(X_tst_i) \/ n_fold\n    print(f'CV #{i} Loss: {log_loss(y_val, P[i_val]):.6f}')","fbe904fd":"print(f'CV Loss: {log_loss(y, P):.6f}')\nnp.savetxt(predict_val_file, P, fmt='%.6f')\nnp.savetxt(predict_tst_file, P_tst, fmt='%.6f')","86ebafad":"sub[sub.columns] = P_tst\nsub.to_csv(submission_file)\nsub.head()","e69ec7f1":"# Part 2. Model Training with AutoLGB","6bab04f7":"# Part 1. Loading Libraries and Data","8a23f5ae":"# Part 3. Submission","bee3e872":"Hope this helps.","6a5d407e":"# TPS 6 - Supervised DAE + AutoLGB\n\nThe contents of the notebooks are organized as follows:\n\n1. Installing and loading libraries: installs `Kaggler` and load data and libraries\n3. Model definition and training: shows how to train LightGBM with `Kaggler`'s `AutoLGB`\n4. Submission\n\nEnjoy~!"}}