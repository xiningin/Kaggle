{"cell_type":{"7024877f":"code","ba1dedb4":"code","369eaa17":"code","0216b234":"code","bc703a0d":"code","5f7f6924":"code","443de509":"code","808696fd":"code","57287d53":"code","478b9eeb":"code","729e4812":"code","f8ec64e7":"code","bd37bdaf":"markdown","24dd3c01":"markdown","34f69a2b":"markdown","5d51737a":"markdown","d4218f56":"markdown","141635c7":"markdown"},"source":{"7024877f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ba1dedb4":"df = pd.read_csv(\"..\/input\/sms-spam-collection-dataset\/spam.csv\",encoding='latin-1')\ndf.drop(['Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4'], axis=1, inplace=True)\ndf.columns = ['Label', 'SMS']\ndf['Label'] = df['Label'].map({'ham':0, 'spam':1})\ndf = df[['SMS', 'Label']]\ndf['len'] = df['SMS'].apply(len)\ndf.head()","369eaa17":"sns.countplot(df['Label'])\nplt.xlabel('Label')\nplt.title('Number of ham and spam messages')\nplt.show()","0216b234":"plt.figure(figsize=(12,8))\ndf.loc[df['Label']==0, 'len'].plot(bins=40, kind='hist', color='red',label='Ham messages',alpha=0.5)\ndf.loc[df['Label']==1, 'len'].plot(kind='hist', color='blue',label='Spam messages',alpha=0.5)\nplt.legend()\nplt.xlabel('Message Length')\nplt.show()","bc703a0d":"\nimport wordcloud\nfrom nltk.corpus import stopwords\ndata_ham  = df[df['Label'] == 0].copy()\ndata_spam = df[df['Label'] == 1].copy()\n\ndef show_wordcloud(data_spam_or_ham, title):\n    text = ' '.join(data_spam_or_ham['SMS'].astype(str).tolist())\n    stopwords = set(wordcloud.STOPWORDS)\n    \n    fig_wordcloud = wordcloud.WordCloud(stopwords=stopwords,background_color='lightgrey',\n                    colormap='viridis', width=800, height=600).generate(text)\n    \n    plt.figure(figsize=(10,7), frameon=True)\n    plt.imshow(fig_wordcloud)  \n    plt.axis('off')\n    plt.title(title, fontsize=20 )\n    plt.show()","5f7f6924":"show_wordcloud(data_ham, \"Ham messages\")\n","443de509":"show_wordcloud(data_spam, \"Spam messages\")\n","808696fd":"X = df['SMS'].values\ny = df['Label'].values\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)","57287d53":"from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n#X_train[:,X_train.sum(axis=0)>1]\ncv = CountVectorizer(max_features=3700) #feature that accure more than one time\n\nX_train = cv.fit_transform(X_train).toarray()\nX_test = cv.transform(X_test).toarray()\n\nclf = MultinomialNB()\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)\n\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\nprint(accuracy_score(y_test, y_pred))\nprint(classification_report(y_test, y_pred))","478b9eeb":"import tensorflow as tf\n\nann = tf.keras.models.Sequential()\nann.add(tf.keras.layers.Dense(units=6, activation='relu'))     # Hidden layer\nann.add(tf.keras.layers.Dense(units=6, activation='relu'))     # Hidden layer\nann.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))  # Output layer\nann.compile(optimizer='adam', loss = 'binary_crossentropy', metrics = ['accuracy']) #Compiling\nann.fit(X_train, y_train, batch_size=32, epochs=10)","729e4812":"y_pred = (ann.predict(X_test) > 0.5)\n\ncm = confusion_matrix(y_test, y_pred)\nprint(cm,'\\n')\nprint(accuracy_score(y_test, y_pred),'\\n')\nprint(classification_report(y_test, y_pred))","f8ec64e7":"import joblib \njoblib.dump(clf, 'NB_Spam_Model.pkl')\n\n# Reload\n\nNB_Spam_Model = open('NB_Spam_Model.pkl', 'rb')\nclf = joblib.load(NB_Spam_Model)","bd37bdaf":"# Model-2 Artificial Neural Network(ANN)","24dd3c01":"# Data Visualization","34f69a2b":"## Word Clouds","5d51737a":"# Importing Data","d4218f56":"# Model save and reload\n\n- for futur usage, we can save the model as .pkl file","141635c7":"# Model-1 : Naive Bayes"}}