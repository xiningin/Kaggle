{"cell_type":{"0ffa3826":"code","ac63cb4b":"code","c96fcdef":"code","9df219e9":"code","220caf61":"code","34a0654f":"code","ec202362":"code","4d04d68c":"code","83968d22":"code","f571f275":"code","e5c00609":"code","d015f2ba":"code","2f3b3dbc":"code","628ceaa5":"code","fdb946fe":"code","4f87bb38":"code","83ea70f5":"code","ed6a96f2":"code","a43ea46f":"code","670eaefa":"code","6097f41e":"code","d0882968":"code","3daa35ce":"code","07e048e2":"code","265dea5a":"code","052a9e82":"code","00ec1bec":"code","9db4ec9a":"code","c889cbf9":"code","17311456":"code","4e9271f8":"code","dc97eb02":"code","24d85296":"code","72a85e8c":"code","0cb426a0":"code","79c4e60a":"code","63d310a9":"code","b4c7542e":"code","95452632":"code","608f119f":"code","2cbcaac4":"code","38a9566d":"code","213dbf0f":"code","700423de":"code","b5be239c":"code","24aaaec1":"code","fa7699ac":"code","d53c575b":"code","c44ce0c4":"code","4ed6dc32":"code","c342d0f2":"code","d6fe86fe":"code","f2ab71a5":"code","4202c2d7":"code","2209c04e":"code","c2822c02":"code","527a7d1c":"code","42bf1f9d":"code","ad279961":"code","36ad7fd0":"code","bfb55c09":"code","cd502d63":"code","03faac88":"code","cb202e85":"code","b1b04f55":"code","167bf145":"code","8a0178b3":"code","2e4e2c20":"code","4e5ea27f":"code","98394ee6":"code","8ffdbcd7":"code","55a96887":"code","425912b8":"code","53f68565":"code","9759575e":"code","361dbc09":"code","4122364a":"code","60e58c79":"code","1eaef699":"code","f729f392":"code","31ba583d":"code","2599ee2f":"code","33479078":"code","33022704":"code","236495fe":"code","c08fc2b0":"code","2fea976a":"code","75733a69":"code","0fd334e0":"code","2235cde8":"code","805ae1a3":"code","061ea393":"code","935a5eaa":"code","b1247f2d":"code","da84bf2d":"code","fd4c638a":"code","85e9f41c":"code","3961aebb":"code","2df6a0df":"code","7e447722":"code","730e5c94":"code","a342589d":"code","b6473897":"code","29796c6b":"code","1e824edd":"code","4b451659":"code","360ba114":"code","945ba071":"code","10772450":"code","fd9f0a97":"code","2ec1a6d8":"code","49b6482c":"code","e43c130f":"code","497d3f93":"code","f383d484":"code","c1a30a71":"code","342320e6":"code","51c92edd":"code","3083f075":"code","66c9c765":"code","e9b8de1f":"code","f1cd5554":"code","fd5ea7c6":"code","688df1f8":"code","11f2155b":"code","88aedfda":"code","7fef4959":"code","46449c15":"code","24115a34":"code","d878f97e":"code","0cce117a":"code","31416eb8":"code","b81aabdb":"code","26192e72":"code","2e14f01c":"code","2f325902":"code","9fca4491":"code","8c5033d9":"code","607a8228":"code","5e9f7660":"code","f641a8f4":"code","6a8532c2":"code","cb954ca5":"code","c7ee9db4":"code","4c688733":"code","dc799b18":"code","3bab7d15":"code","c890b9ea":"code","29dc4cca":"code","84fd22e2":"code","dd5e0692":"code","f3bfc140":"code","63318cbf":"code","892681e2":"code","53eb03bc":"code","9bc12ed9":"code","d793a4c0":"code","77aa999e":"code","af8a9a8b":"code","1a4d807c":"code","969f1563":"code","46231e0c":"code","ecff4c46":"code","a8e0871f":"code","62d25d94":"code","d04dff77":"code","11a81fc2":"code","6a6dbee1":"code","72470a69":"code","7246cf82":"code","88f59444":"code","91bff4a0":"code","3e73563b":"code","e6c8bee7":"code","5b958058":"code","a2c63dfd":"code","08b132c7":"code","45f26b83":"code","5db23f9b":"code","ac1e97d4":"code","ad1c67a6":"code","06c2e23d":"markdown","7286fbc9":"markdown","0c348e96":"markdown","14c6b238":"markdown","d38c5af3":"markdown","9b074624":"markdown","b6ce1c62":"markdown","a3fd02c6":"markdown","59c56583":"markdown","3f1ef586":"markdown","ae5062c7":"markdown"},"source":{"0ffa3826":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder,MinMaxScaler, StandardScaler\nfrom sklearn.model_selection import train_test_split, ParameterGrid\nfrom sklearn.metrics import accuracy_score, confusion_matrix, mean_squared_error, log_loss\nimport operator\nimport json\nfrom IPython import display\nimport os\nimport warnings\n\nnp.random.seed(0)\nwarnings.filterwarnings(\"ignore\")\nTHRESHOLD = 4","ac63cb4b":"# read data from file\ntrain = pd.read_csv(\"..\/input\/train.csv\") \ntest = pd.read_csv(\"..\/input\/test.csv\")\n\n# check the number of features and data points in train\nprint(\"Number of data points in train: %d\" % train.shape[0])\nprint(\"Number of features in train: %d\" % train.shape[1])\n\n# check the number of features and data points in test\nprint(\"Number of data points in test: %d\" % test.shape[0])\nprint(\"Number of features in test: %d\" % test.shape[1])","c96fcdef":"def data_clean(data):\n    \n    # Let's first remove all missing value features\n    columns_to_remove = ['Also Known As','Applications','Audio Features','Bezel-less display'\n                         'Browser','Build Material','Co-Processor','Browser'\n                         'Display Colour','Mobile High-Definition Link(MHL)',\n                         'Music', 'Email','Fingerprint Sensor Position',\n                         'Games','HDMI','Heart Rate Monitor','IRIS Scanner', \n                         'Optical Image Stabilisation','Other Facilities',\n                         'Phone Book','Physical Aperture','Quick Charging',\n                         'Ring Tone','Ruggedness','SAR Value','SIM 3','SMS',\n                         'Screen Protection','Screen to Body Ratio (claimed by the brand)',\n                         'Sensor','Software Based Aperture', 'Special Features',\n                         'Standby time','Stylus','TalkTime', 'USB Type-C',\n                         'Video Player', 'Video Recording Features','Waterproof',\n                         'Wireless Charging','USB OTG Support', 'Video Recording','Java']\n\n    columns_to_retain = list(set(data.columns)-set(columns_to_remove))\n    data = data[columns_to_retain]\n\n    #Features having very low variance \n    columns_to_remove = ['Architecture','Audio Jack','GPS','Loudspeaker','Network','Network Support','VoLTE']\n    columns_to_retain = list(set(data.columns)-set(columns_to_remove))\n    data = data[columns_to_retain]\n\n    # Multivalued:\n    columns_to_remove = ['Architecture','Launch Date','Audio Jack','GPS','Loudspeaker','Network','Network Support','VoLTE', 'Custom UI']\n    columns_to_retain = list(set(data.columns)-set(columns_to_remove))\n    data = data[columns_to_retain]\n\n    # Not much important\n    columns_to_remove = ['Bluetooth', 'Settings','Wi-Fi','Wi-Fi Features']\n    columns_to_retain = list(set(data.columns)-set(columns_to_remove))\n    data = data[columns_to_retain]\n    \n    return data","9df219e9":"train = data_clean(train)\ntest = data_clean(test)","220caf61":"train = train[(train.isnull().sum(axis=1) <= 15)]\n# You shouldn't remove data points from test set\n#test = test[(test.isnull().sum(axis=1) <= 15)]","34a0654f":"# check the number of features and data points in train\nprint(\"Number of data points in train: %d\" % train.shape[0])\nprint(\"Number of features in train: %d\" % train.shape[1])\n\n# check the number of features and data points in test\nprint(\"Number of data points in test: %d\" % test.shape[0])\nprint(\"Number of features in test: %d\" % test.shape[1])","ec202362":"def for_integer(test):\n    try:\n        test = test.strip()\n        return int(test.split(' ')[0])\n    except IOError:\n           pass\n    except ValueError:\n        pass\n    except:\n        pass\n\ndef for_string(test):\n    try:\n        test = test.strip()\n        return (test.split(' ')[0])\n    except IOError:\n        pass\n    except ValueError:\n        pass\n    except:\n        pass\n\ndef for_float(test):\n    try:\n        test = test.strip()\n        return float(test.split(' ')[0])\n    except IOError:\n        pass\n    except ValueError:\n        pass\n    except:\n        pass\ndef find_freq(test):\n    try:\n        test = test.strip()\n        test = test.split(' ')\n        if test[2][0] == '(':\n            return float(test[2][1:])\n        return float(test[2])\n    except IOError:\n        pass\n    except ValueError:\n        pass\n    except:\n        pass\n\n    \ndef for_Internal_Memory(test):\n    try:\n        test = test.strip()\n        test = test.split(' ')\n        if test[1] == 'GB':\n            return int(test[0])\n        if test[1] == 'MB':\n#             print(\"here\")\n            return (int(test[0]) * 0.001)\n    except IOError:\n           pass\n    except ValueError:\n        pass\n    except:\n        pass\n    \ndef find_freq(test):\n    try:\n        test = test.strip()\n        test = test.split(' ')\n        if test[2][0] == '(':\n            return float(test[2][1:])\n        return float(test[2])\n    except IOError:\n        pass\n    except ValueError:\n        pass\n    except:\n        pass\n","4d04d68c":"def data_clean_2(x):\n    data = x.copy()\n    \n    data['Capacity'] = data['Capacity'].apply(for_integer)\n\n    data['Height'] = data['Height'].apply(for_float)\n    data['Height'] = data['Height'].fillna(data['Height'].mean())\n\n    data['Internal Memory'] = data['Internal Memory'].apply(for_Internal_Memory)\n\n    data['Pixel Density'] = data['Pixel Density'].apply(for_integer)\n\n    data['Internal Memory'] = data['Internal Memory'].fillna(data['Internal Memory'].median())\n    data['Internal Memory'] = data['Internal Memory'].astype(int)\n\n    data['RAM'] = data['RAM'].apply(for_integer)\n    data['RAM'] = data['RAM'].fillna(data['RAM'].median())\n    data['RAM'] = data['RAM'].astype(int)\n\n    data['Resolution'] = data['Resolution'].apply(for_integer)\n    data['Resolution'] = data['Resolution'].fillna(data['Resolution'].median())\n    data['Resolution'] = data['Resolution'].astype(int)\n\n    data['Screen Size'] = data['Screen Size'].apply(for_float)\n\n    data['Thickness'] = data['Thickness'].apply(for_float)\n    data['Thickness'] = data['Thickness'].fillna(data['Thickness'].mean())\n    data['Thickness'] = data['Thickness'].round(2)\n\n    data['Type'] = data['Type'].fillna('Li-Polymer')\n\n    data['Screen to Body Ratio (calculated)'] = data['Screen to Body Ratio (calculated)'].apply(for_float)\n    data['Screen to Body Ratio (calculated)'] = data['Screen to Body Ratio (calculated)'].fillna(data['Screen to Body Ratio (calculated)'].mean())\n    data['Screen to Body Ratio (calculated)'] = data['Screen to Body Ratio (calculated)'].round(2)\n\n    data['Width'] = data['Width'].apply(for_float)\n    data['Width'] = data['Width'].fillna(data['Width'].mean())\n    data['Width'] = data['Width'].round(2)\n\n    data['Flash'][data['Flash'].isna() == True] = \"Other\"\n\n    data['User Replaceable'][data['User Replaceable'].isna() == True] = \"Other\"\n\n    data['Num_cores'] = data['Processor'].apply(for_string)\n    data['Num_cores'][data['Num_cores'].isna() == True] = \"Other\"\n\n\n    data['Processor_frequency'] = data['Processor'].apply(find_freq)\n    #because there is one entry with 208MHz values, to convert it to GHz\n    data['Processor_frequency'][data['Processor_frequency'] > 200] = 0.208\n    data['Processor_frequency'] = data['Processor_frequency'].fillna(data['Processor_frequency'].mean())\n    data['Processor_frequency'] = data['Processor_frequency'].round(2)\n\n    data['Camera Features'][data['Camera Features'].isna() == True] = \"Other\"\n\n    #simplifyig Operating System to os_name for simplicity\n    data['os_name'] = data['Operating System'].apply(for_string)\n    data['os_name'][data['os_name'].isna() == True] = \"Other\"\n\n    data['Sim1'] = data['SIM 1'].apply(for_string)\n\n    data['SIM Size'][data['SIM Size'].isna() == True] = \"Other\"\n\n    data['Image Resolution'][data['Image Resolution'].isna() == True] = \"Other\"\n\n    data['Fingerprint Sensor'][data['Fingerprint Sensor'].isna() == True] = \"Other\"\n\n    data['Expandable Memory'][data['Expandable Memory'].isna() == True] = \"No\"\n\n    data['Weight'] = data['Weight'].apply(for_integer)\n    data['Weight'] = data['Weight'].fillna(data['Weight'].mean())\n    data['Weight'] = data['Weight'].astype(int)\n\n    data['SIM 2'] = data['SIM 2'].apply(for_string)\n    data['SIM 2'][data['SIM 2'].isna() == True] = \"Other\"\n    \n    return data","83968d22":"train = data_clean_2(train)\ntest = data_clean_2(test)\n\n# check the number of features and data points in train\nprint(\"Number of data points in train: %d\" % train.shape[0])\nprint(\"Number of features in train: %d\" % train.shape[1])\n\n# check the number of features and data points in test\nprint(\"Number of data points in test: %d\" % test.shape[0])\nprint(\"Number of features in test: %d\" % test.shape[1])","f571f275":"def data_clean_3(x):\n    \n    data = x.copy()\n\n    columns_to_remove = ['User Available Storage','SIM Size','Chipset','Processor','Autofocus','Aspect Ratio','Touch Screen',\n                        'Bezel-less display','Operating System','SIM 1','USB Connectivity','Other Sensors','Graphics','FM Radio',\n                        'NFC','Shooting Modes','Browser','Display Colour' ]\n\n    columns_to_retain = list(set(data.columns)-set(columns_to_remove))\n    data = data[columns_to_retain]\n\n\n    columns_to_remove = [ 'Screen Resolution','User Replaceable','Camera Features',\n                        'Thickness', 'Display Type']\n\n    columns_to_retain = list(set(data.columns)-set(columns_to_remove))\n    data = data[columns_to_retain]\n\n\n    columns_to_remove = ['Fingerprint Sensor', 'Flash', 'Rating Count', 'Review Count','Image Resolution','Type','Expandable Memory',\\\n                        'Colours','Width','Model']\n    columns_to_retain = list(set(data.columns)-set(columns_to_remove))\n    data = data[columns_to_retain]\n\n    return data","e5c00609":"train = data_clean_3(train)\ntest = data_clean_3(test)\n\n# check the number of features and data points in train\nprint(\"Number of data points in train: %d\" % train.shape[0])\nprint(\"Number of features in train: %d\" % train.shape[1])\n\n# check the number of features and data points in test\nprint(\"Number of data points in test: %d\" % test.shape[0])\nprint(\"Number of features in test: %d\" % test.shape[1])","d015f2ba":"# one hot encoding\n\ntrain_ids = train['PhoneId']\ntest_ids = test['PhoneId']\n\ncols = list(test.columns)\ncols.remove('PhoneId')\ncols.insert(0, 'PhoneId')\n\ncombined = pd.concat([train.drop('Rating', axis=1)[cols], test[cols]])\nprint(combined.shape)\nprint(combined.columns)\n\ncombined = pd.get_dummies(combined)\nprint(combined.shape)\nprint(combined.columns)\n\ntrain_new = combined[combined['PhoneId'].isin(train_ids)]\ntest_new = combined[combined['PhoneId'].isin(test_ids)]","2f3b3dbc":"train_new = train_new.merge(train[['PhoneId', 'Rating']], on='PhoneId')","628ceaa5":"# check the number of features and data points in train\nprint(\"Number of data points in train: %d\" % train_new.shape[0])\nprint(\"Number of features in train: %d\" % train_new.shape[1])\n\n# check the number of features and data points in test\nprint(\"Number of data points in test: %d\" % test_new.shape[0])\nprint(\"Number of features in test: %d\" % test_new.shape[1])","fdb946fe":"train_new.head()","4f87bb38":"test_new.head()","83ea70f5":"# submission = pd.DataFrame({'PhoneId':test_new['PhoneId'], 'Class':[0]*test_new.shape[0]})\n# submission = submission[['PhoneId', 'Class']]\n# submission.head()","ed6a96f2":"# submission.to_csv(\"submission.csv\", index=False)","a43ea46f":"# Scatter Plots of each input variable against Rating to determine relationships and arrive at the best direction & split position for binarization\n\nfor i in range(1,len(train_new.columns)):\n  print(train_new.columns[i])\n  plt.scatter(train_new[train_new.columns[i]], train_new[train_new.columns[87]])\n  plt.show()","670eaefa":"# MP Neuron Class (Reused from Padhai course, but edited to return 0 or 1 instead of boolean value; Changed to handle single input feature)\n\nclass MPNeuron_trial:\n\n  def __init__(self):\n    self.b = None\n    \n  def model(self, x):\n    if x >= self.b:\n       return 1\n    else:\n       return 0\n  \n  def predict(self, X):\n    Y = []\n    for x in X:\n      result = self.model(x)\n      Y.append(result)\n    return np.array(Y)\n  \n  def fit(self, X, Y):\n    accuracy = {}\n    \n    for b in range(2):\n      self.b = b\n      Y_pred = self.predict(X)\n      accuracy[b] = accuracy_score(Y_pred, Y)\n      \n    best_b = max(accuracy, key = accuracy.get)\n    self.b = best_b\n    \n    print('Optimal value of b is', best_b)\n    print('Highest accuracy is', accuracy[best_b])","6097f41e":"# MP Neuron trial code - Instantiate\n\nmp_neuron_trial = MPNeuron_trial()","d0882968":"# Binarization - Train Rating\nTrain_Rating_Binarized = train_new['Rating'].map(lambda x: 0 if x < THRESHOLD else 1)\n\nbinarised_train = train_new.drop('Rating', axis=1)\n\n# Convert Binarized Rating Pandas Series to Numpy Array\n\nTrain_Rating_Binarized_nparray = np.asarray(Train_Rating_Binarized)","3daa35ce":"# For value_counts by dummy variables\n\nfor_value_counts = train_new\n\nfor_value_counts['Rating'] = for_value_counts['Rating'].map(lambda x: 0 if x < THRESHOLD else 1)","07e048e2":"for_value_counts.groupby('Rating')['Weight'].describe()","265dea5a":"for_value_counts.groupby('Rating')['RAM'].describe()","052a9e82":"for_value_counts.groupby('Rating')['Screen to Body Ratio (calculated)'].describe()","00ec1bec":"for_value_counts.groupby('Rating')['Pixel Density'].describe()","9db4ec9a":"for_value_counts.groupby('Rating')['Processor_frequency'].describe()","c889cbf9":"for_value_counts.groupby('Rating')['Screen Size'].describe()","17311456":"for_value_counts.groupby('Rating')['Capacity'].describe()","4e9271f8":"for_value_counts.groupby('Rating')['Height'].describe()","dc97eb02":"for_value_counts.groupby('Rating')['Internal Memory'].describe()","24d85296":"for_value_counts.groupby('Rating')['Resolution'].describe()","72a85e8c":"for_value_counts.groupby('Num_cores_312')['Rating'].value_counts()","0cb426a0":"for_value_counts.groupby('SIM Slot(s)_Dual SIM, GSM+CDMA')['Rating'].value_counts()","79c4e60a":"for_value_counts.groupby('Sim1_2G')['Rating'].value_counts()","63d310a9":"for_value_counts.groupby('Sim1_3G')['Rating'].value_counts()","b4c7542e":"for_value_counts.groupby('Sim1_4G')['Rating'].value_counts()","95452632":"for_value_counts.groupby('os_name_Blackberry')['Rating'].value_counts()","608f119f":"for_value_counts.groupby('os_name_KAI')['Rating'].value_counts()","2cbcaac4":"for_value_counts.groupby('os_name_Nokia')['Rating'].value_counts()","38a9566d":"for_value_counts.groupby('os_name_Other')['Rating'].value_counts()","213dbf0f":"for_value_counts.groupby('os_name_Tizen')['Rating'].value_counts()","700423de":"for_value_counts.groupby('Num_cores_Deca')['Rating'].value_counts()","b5be239c":"for_value_counts.groupby('Num_cores_Other')['Rating'].value_counts()","24aaaec1":"for_value_counts.groupby('Num_cores_Tru-Octa')['Rating'].value_counts()","fa7699ac":"for_value_counts.groupby('SIM 2_3G')['Rating'].value_counts()","d53c575b":"for_value_counts.groupby('Brand_10.or')['Rating'].value_counts()","c44ce0c4":"for_value_counts.groupby('Brand_Asus')['Rating'].value_counts()","4ed6dc32":"for_value_counts.groupby('Brand_Blackberry')['Rating'].value_counts()","c342d0f2":"for_value_counts.groupby('Brand_Comio')['Rating'].value_counts()","d6fe86fe":"for_value_counts.groupby('Brand_Coolpad')['Rating'].value_counts()","f2ab71a5":"for_value_counts.groupby('Brand_Gionee')['Rating'].value_counts()","4202c2d7":"for_value_counts.groupby('Brand_HTC')['Rating'].value_counts()","2209c04e":"for_value_counts.groupby('Brand_Honor')['Rating'].value_counts()","c2822c02":"for_value_counts.groupby('Brand_InFocus')['Rating'].value_counts()","527a7d1c":"for_value_counts.groupby('Brand_Infinix')['Rating'].value_counts()","42bf1f9d":"for_value_counts.groupby('Brand_Intex')['Rating'].value_counts()","ad279961":"for_value_counts.groupby('Brand_Jivi')['Rating'].value_counts()","36ad7fd0":"for_value_counts.groupby('Brand_Karbonn')['Rating'].value_counts()","bfb55c09":"for_value_counts.groupby('Brand_Lava')['Rating'].value_counts()","cd502d63":"for_value_counts.groupby('Brand_LeEco')['Rating'].value_counts()","03faac88":"for_value_counts.groupby('Brand_Lenovo')['Rating'].value_counts()","cb202e85":"for_value_counts.groupby('Brand_Lephone')['Rating'].value_counts()","b1b04f55":"for_value_counts.groupby('Brand_Lyf')['Rating'].value_counts()","167bf145":"for_value_counts.groupby('Brand_Meizu')['Rating'].value_counts()","8a0178b3":"for_value_counts.groupby('Brand_Micromax')['Rating'].value_counts()","2e4e2c20":"for_value_counts.groupby('Brand_Mobiistar')['Rating'].value_counts()","4e5ea27f":"for_value_counts.groupby('Brand_Moto')['Rating'].value_counts()","98394ee6":"for_value_counts.groupby('Brand_Motorola')['Rating'].value_counts()","8ffdbcd7":"for_value_counts.groupby('Brand_Nubia')['Rating'].value_counts()","55a96887":"for_value_counts.groupby('Brand_Oppo')['Rating'].value_counts()","425912b8":"for_value_counts.groupby('Brand_Panasonic')['Rating'].value_counts()","53f68565":"for_value_counts.groupby('Brand_Razer')['Rating'].value_counts()","9759575e":"for_value_counts.groupby('Brand_Reliance')['Rating'].value_counts()","361dbc09":"for_value_counts.groupby('Brand_VOTO')['Rating'].value_counts()","4122364a":"for_value_counts.groupby('Brand_Yu')['Rating'].value_counts()","60e58c79":"for_value_counts.groupby('Brand_iVooMi')['Rating'].value_counts()","1eaef699":"for_value_counts.groupby('SIM Slot(s)_Dual SIM, GSM+GSM')['Rating'].value_counts()","f729f392":"for_value_counts.groupby('SIM Slot(s)_Dual SIM, GSM+GSM, Dual VoLTE')['Rating'].value_counts()","31ba583d":"for_value_counts.groupby('SIM Slot(s)_Single SIM, GSM')['Rating'].value_counts()","2599ee2f":"for_value_counts.groupby('os_name_Android')['Rating'].value_counts()","33479078":"for_value_counts.groupby('os_name_iOS')['Rating'].value_counts()","33022704":"for_value_counts.groupby('Num_cores_Dual')['Rating'].value_counts()","236495fe":"for_value_counts.groupby('Num_cores_Hexa')['Rating'].value_counts()","c08fc2b0":"for_value_counts.groupby('Num_cores_Octa')['Rating'].value_counts()","2fea976a":"for_value_counts.groupby('Num_cores_Quad')['Rating'].value_counts()","75733a69":"for_value_counts.groupby('SIM 2_2G')['Rating'].value_counts()","0fd334e0":"for_value_counts.groupby('SIM 2_4G')['Rating'].value_counts()","2235cde8":"for_value_counts.groupby('SIM 2_Other')['Rating'].value_counts()","805ae1a3":"for_value_counts.groupby('Brand_Apple')['Rating'].value_counts()","061ea393":"for_value_counts.groupby('Brand_Billion')['Rating'].value_counts()","935a5eaa":"for_value_counts.groupby('Brand_Do')['Rating'].value_counts()","b1247f2d":"for_value_counts.groupby('Brand_Google')['Rating'].value_counts()","da84bf2d":"for_value_counts.groupby('Brand_Huawei')['Rating'].value_counts()","fd4c638a":"for_value_counts.groupby('Brand_Itel')['Rating'].value_counts()","85e9f41c":"for_value_counts.groupby('Brand_LG')['Rating'].value_counts()","3961aebb":"for_value_counts.groupby('Brand_Nokia')['Rating'].value_counts()","2df6a0df":"for_value_counts.groupby('Brand_OPPO')['Rating'].value_counts()","7e447722":"for_value_counts.groupby('Brand_OnePlus')['Rating'].value_counts()","730e5c94":"for_value_counts.groupby('Brand_Realme')['Rating'].value_counts()","a342589d":"for_value_counts.groupby('Brand_Samsung')['Rating'].value_counts()","b6473897":"for_value_counts.groupby('Brand_Sony')['Rating'].value_counts()","29796c6b":"for_value_counts.groupby('Brand_Spice')['Rating'].value_counts()","1e824edd":"for_value_counts.groupby('Brand_Tecno')['Rating'].value_counts()","4b451659":"for_value_counts.groupby('Brand_Ulefone')['Rating'].value_counts()","360ba114":"for_value_counts.groupby('Brand_Vivo')['Rating'].value_counts()","945ba071":"for_value_counts.groupby('Brand_Xiaomi')['Rating'].value_counts()","10772450":"for_value_counts.groupby('Brand_Xiaomi Poco')['Rating'].value_counts()","fd9f0a97":"# Explore Cut values for Weight\n\nfor wei in range(60,80,1):\n    Weight_In = binarised_train['Weight'].map(lambda x: 0 if x < wei else 1)\n    print('Weight Value ', wei)\n    mp_neuron_trial.fit(Weight_In, Train_Rating_Binarized_nparray)","2ec1a6d8":"Y_train_pred_trial = mp_neuron_trial.predict(Weight_In)\n\nconfusion_matrix(Train_Rating_Binarized_nparray, Y_train_pred_trial, sample_weight=None)","49b6482c":"# Explore Cut values for Capacity\n\nfor cap in range(0, 14000, 500):\n   Capacity_In = binarised_train['Capacity'].map(lambda x: 0 if x > cap else 1)\n   print('Capacity Value ', cap)\n   mp_neuron_trial.fit(Capacity_In, Train_Rating_Binarized_nparray)","e43c130f":"# Explore Cut values for RAM\n\nfor ram in range(250,350,5):\n    RAM_In = binarised_train['RAM'].map(lambda x: 0 if x > ram else 1)\n    print('RAM Value ', ram)\n    mp_neuron_trial.fit(RAM_In, Train_Rating_Binarized_nparray)","497d3f93":"Y_train_pred_trial = mp_neuron_trial.predict(RAM_In)\n\nconfusion_matrix(Train_Rating_Binarized_nparray, Y_train_pred_trial, sample_weight=None)","f383d484":"# Explore Cut values for Height\n\nfor hei in range(110,180,5):\n    Height_In = binarised_train['Height'].map(lambda x: 0 if x > hei else 1)\n    print('Height Value ', hei)\n    mp_neuron_trial.fit(Height_In, Train_Rating_Binarized_nparray)","c1a30a71":"# Explore Cut values for Screen to Body Ratio (calculated)\n\nfor sbr in range(20,90,1):\n    SBR_In = binarised_train['Screen to Body Ratio (calculated)'].map(lambda x: 0 if x < sbr else 1)\n    print('SBR Value ', sbr)\n    mp_neuron_trial.fit(SBR_In, Train_Rating_Binarized_nparray)","342320e6":"Y_train_pred_trial = mp_neuron_trial.predict(SBR_In)\n\nconfusion_matrix(Train_Rating_Binarized_nparray, Y_train_pred_trial, sample_weight=None)","51c92edd":"# Explore Cut values for Pixel Density\n\nfor pix in range(240,270,1):\n    Pixel_In = binarised_train['Pixel Density'].map(lambda x: 0 if x < pix else 1)\n    print('Pixel Density Value ', pix)\n    mp_neuron_trial.fit(Pixel_In, Train_Rating_Binarized_nparray)","3083f075":"Y_train_pred_trial = mp_neuron_trial.predict(Pixel_In)\n\nconfusion_matrix(Train_Rating_Binarized_nparray, Y_train_pred_trial, sample_weight=None)","66c9c765":"# Explore Cut values for Internal Memory\n\nfor im in range(0,550,10):\n    IM_In = binarised_train['Internal Memory'].map(lambda x: 0 if x > im else 1)\n    print('Internal Memory Value ', im)\n    mp_neuron_trial.fit(IM_In, Train_Rating_Binarized_nparray)","e9b8de1f":"# Explore Cut values for Processor Frequency\n\nfor pf in range(100,150,5):\n    PF_In = binarised_train['Processor_frequency'].map(lambda x: 0 if x < (pf\/100) else 1)\n    print('Processor Frequency Value ', pf)\n    mp_neuron_trial.fit(PF_In, Train_Rating_Binarized_nparray)","f1cd5554":"Y_train_pred_trial = mp_neuron_trial.predict(PF_In)\n\nconfusion_matrix(Train_Rating_Binarized_nparray, Y_train_pred_trial, sample_weight=None)","fd5ea7c6":"# Explore Cut values for Screen Size\n\nfor ss in range(20,70,1):\n    Screen_In = binarised_train['Screen Size'].map(lambda x: 0 if x < (ss\/10) else 1)\n    print('Screen Size Value ', ss)\n    mp_neuron_trial.fit(Screen_In, Train_Rating_Binarized_nparray)","688df1f8":"Y_train_pred_trial = mp_neuron_trial.predict(Screen_In)\n\nconfusion_matrix(Train_Rating_Binarized_nparray, Y_train_pred_trial, sample_weight=None)","11f2155b":"# Explore Cut values for Resolution\n\nfor res in range(0,25,1):\n    Resolution_In = binarised_train['Resolution'].map(lambda x: 0 if x > res else 1)\n    print('Resolution Value ', res)\n    mp_neuron_trial.fit(Resolution_In, Train_Rating_Binarized_nparray)","88aedfda":"for val in range(0,11,5):\n    Test_In = binarised_train['SIM Slot(s)_Dual SIM, GSM+GSM'].map(lambda x: 0 if x < (val\/10) else 1)\n    print('Value ', val\/10)\n    mp_neuron_trial.fit(Test_In, Train_Rating_Binarized_nparray)","7fef4959":"for val in range(0,11,5):\n    Test_In = binarised_train['SIM Slot(s)_Dual SIM, GSM+GSM'].map(lambda x: 0 if x < (val\/10) else 1)\n    print('Value ', val\/10)\n    mp_neuron_trial.fit(Test_In, Train_Rating_Binarized_nparray)","46449c15":"for val in range(0,11,5):\n    Test_In = binarised_train['SIM Slot(s)_Dual SIM, GSM+GSM, Dual VoLTE'].map(lambda x: 0 if x < (val\/10) else 1)\n    print('Value ', val\/10)\n    mp_neuron_trial.fit(Test_In, Train_Rating_Binarized_nparray)","24115a34":"for val in range(0,11,5):\n    Test_In = binarised_train['SIM Slot(s)_Single SIM, GSM'].map(lambda x: 0 if x < (val\/10) else 1)\n    print('Value ', val\/10)\n    mp_neuron_trial.fit(Test_In, Train_Rating_Binarized_nparray)","d878f97e":"for val in range(0,11,5):\n    Test_In = binarised_train['os_name_Android'].map(lambda x: 0 if x < (val\/10) else 1)\n    print('Value ', val\/10)\n    mp_neuron_trial.fit(Test_In, Train_Rating_Binarized_nparray)","0cce117a":"for val in range(0,11,5):\n    Test_In = binarised_train['os_name_iOS'].map(lambda x: 0 if x < (val\/10) else 1)\n    print('Value ', val\/10)\n    mp_neuron_trial.fit(Test_In, Train_Rating_Binarized_nparray)","31416eb8":"for val in range(0,11,5):\n    Test_In = binarised_train['Num_cores_Dual'].map(lambda x: 0 if x < (val\/10) else 1)\n    print('Value ', val\/10)\n    mp_neuron_trial.fit(Test_In, Train_Rating_Binarized_nparray)","b81aabdb":"for val in range(0,11,5):\n    Test_In = binarised_train['Num_cores_Hexa'].map(lambda x: 0 if x < (val\/10) else 1)\n    print('Value ', val\/10)\n    mp_neuron_trial.fit(Test_In, Train_Rating_Binarized_nparray)","26192e72":"for val in range(0,11,5):\n    Test_In = binarised_train['Num_cores_Octa'].map(lambda x: 0 if x < (val\/10) else 1)\n    print('Value ', val\/10)\n    mp_neuron_trial.fit(Test_In, Train_Rating_Binarized_nparray)","2e14f01c":"for val in range(0,11,5):\n    Test_In = binarised_train['Num_cores_Quad'].map(lambda x: 0 if x < (val\/10) else 1)\n    print('Value ', val\/10)\n    mp_neuron_trial.fit(Test_In, Train_Rating_Binarized_nparray)","2f325902":"for val in range(0,11,5):\n    Test_In = binarised_train['SIM 2_2G'].map(lambda x: 0 if x < (val\/10) else 1)\n    print('Value ', val\/10)\n    mp_neuron_trial.fit(Test_In, Train_Rating_Binarized_nparray)  ","9fca4491":"for val in range(0,11,5):\n    Test_In = binarised_train['SIM 2_4G'].map(lambda x: 0 if x < (val\/10) else 1)\n    print('Value ', val\/10)\n    mp_neuron_trial.fit(Test_In, Train_Rating_Binarized_nparray)   ","8c5033d9":"for val in range(0,11,5):\n    Test_In = binarised_train['SIM 2_Other'].map(lambda x: 0 if x < (val\/10) else 1)\n    print('Value ', val\/10)\n    mp_neuron_trial.fit(Test_In, Train_Rating_Binarized_nparray)  ","607a8228":"for val in range(0,11,5):\n    Test_In = binarised_train['Brand_Apple'].map(lambda x: 0 if x < (val\/10) else 1)\n    print('Value ', val\/10)\n    mp_neuron_trial.fit(Test_In, Train_Rating_Binarized_nparray) ","5e9f7660":"for val in range(0,11,5):\n    Test_In = binarised_train['Brand_Billion'].map(lambda x: 0 if x < (val\/10) else 1)\n    print('Value ', val\/10)\n    mp_neuron_trial.fit(Test_In, Train_Rating_Binarized_nparray) ","f641a8f4":"for val in range(0,11,5):\n    Test_In = binarised_train['Brand_Do'].map(lambda x: 0 if x < (val\/10) else 1)\n    print('Value ', val\/10)\n    mp_neuron_trial.fit(Test_In, Train_Rating_Binarized_nparray)","6a8532c2":"for val in range(0,11,5):\n    Test_In = binarised_train['Brand_Google'].map(lambda x: 0 if x < (val\/10) else 1)\n    print('Value ', val\/10)\n    mp_neuron_trial.fit(Test_In, Train_Rating_Binarized_nparray)","cb954ca5":"for val in range(0,11,5):\n    Test_In = binarised_train['Brand_Huawei'].map(lambda x: 0 if x < (val\/10) else 1)\n    print('Value ', val\/10)\n    mp_neuron_trial.fit(Test_In, Train_Rating_Binarized_nparray)","c7ee9db4":"for val in range(0,11,5):\n    Test_In = binarised_train['Brand_Itel'].map(lambda x: 0 if x < (val\/10) else 1)\n    print('Value ', val\/10)\n    mp_neuron_trial.fit(Test_In, Train_Rating_Binarized_nparray)","4c688733":"for val in range(0,11,5):\n    Test_In = binarised_train['Brand_LG'].map(lambda x: 0 if x < (val\/10) else 1)\n    print('Value ', val\/10)\n    mp_neuron_trial.fit(Test_In, Train_Rating_Binarized_nparray)","dc799b18":"for val in range(0,11,5):\n    Test_In = binarised_train['Brand_Nokia'].map(lambda x: 0 if x < (val\/10) else 1)\n    print('Value ', val\/10)\n    mp_neuron_trial.fit(Test_In, Train_Rating_Binarized_nparray)","3bab7d15":"for val in range(0,11,5):\n    Test_In = binarised_train['Brand_OPPO'].map(lambda x: 0 if x < (val\/10) else 1)\n    print('Value ', val\/10)\n    mp_neuron_trial.fit(Test_In, Train_Rating_Binarized_nparray)","c890b9ea":"for val in range(0,11,5):\n    Test_In = binarised_train['Brand_OnePlus'].map(lambda x: 0 if x < (val\/10) else 1)\n    print('Value ', val\/10)\n    mp_neuron_trial.fit(Test_In, Train_Rating_Binarized_nparray)","29dc4cca":"for val in range(0,11,5):\n    Test_In = binarised_train['Brand_Realme'].map(lambda x: 0 if x < (val\/10) else 1)\n    print('Value ', val\/10)\n    mp_neuron_trial.fit(Test_In, Train_Rating_Binarized_nparray)","84fd22e2":"for val in range(0,11,5):\n    Test_In = binarised_train['Brand_Samsung'].map(lambda x: 0 if x < (val\/10) else 1)\n    print('Value ', val\/10)\n    mp_neuron_trial.fit(Test_In, Train_Rating_Binarized_nparray)","dd5e0692":"for val in range(0,11,5):\n    Test_In = binarised_train['Brand_Sony'].map(lambda x: 0 if x < (val\/10) else 1)\n    print('Value ', val\/10)\n    mp_neuron_trial.fit(Test_In, Train_Rating_Binarized_nparray)","f3bfc140":"for val in range(0,11,5):\n    Test_In = binarised_train['Brand_Spice'].map(lambda x: 0 if x < (val\/10) else 1)\n    print('Value ', val\/10)\n    mp_neuron_trial.fit(Test_In, Train_Rating_Binarized_nparray)","63318cbf":"for val in range(0,11,5):\n    Test_In = binarised_train['Brand_Tecno'].map(lambda x: 0 if x < (val\/10) else 1)\n    print('Value ', val\/10)\n    mp_neuron_trial.fit(Test_In, Train_Rating_Binarized_nparray)","892681e2":"for val in range(0,11,5):\n    Test_In = binarised_train['Brand_Ulefone'].map(lambda x: 0 if x < (val\/10) else 1)\n    print('Value ', val\/10)\n    mp_neuron_trial.fit(Test_In, Train_Rating_Binarized_nparray)","53eb03bc":"for val in range(0,11,5):\n    Test_In = binarised_train['Brand_Vivo'].map(lambda x: 0 if x < (val\/10) else 1)\n    print('Value ', val\/10)\n    mp_neuron_trial.fit(Test_In, Train_Rating_Binarized_nparray)","9bc12ed9":"for val in range(0,11,5):\n    Test_In = binarised_train['Brand_Xiaomi'].map(lambda x: 0 if x < (val\/10) else 1)\n    print('Value ', val\/10)\n    mp_neuron_trial.fit(Test_In, Train_Rating_Binarized_nparray)","d793a4c0":"for val in range(0,11,5):\n    Test_In = binarised_train['Brand_Xiaomi Poco'].map(lambda x: 0 if x < (val\/10) else 1)\n    print('Value ', val\/10)\n    mp_neuron_trial.fit(Test_In, Train_Rating_Binarized_nparray)","77aa999e":"plt.plot(train_new.T, '*')\nplt.xticks(rotation = 'vertical')\nplt.show()","af8a9a8b":"plt.plot(test_new.T, '*')\nplt.xticks(rotation = 'vertical')\nplt.show()","1a4d807c":"train_new.groupby('Num_cores_312')['Rating'].value_counts()","969f1563":"binarised_test = test_new","46231e0c":"#  def data_clean_4(x):\n#    \n#    data = x.copy()\n#      \n#    columns_to_remove = ['Capacity', 'Height', 'Internal Memory', 'Resolution']\n#    columns_to_retain = list(set(data.columns)-set(columns_to_remove))\n#    data = data[columns_to_retain]\n#\n#    return data  ","ecff4c46":"#binarised_train = data_clean_4(binarised_train)\n#binarised_test = data_clean_4(binarised_test)","a8e0871f":"def data_clean_5(x):\n    \n    data = x.copy()\n      \n    columns_to_remove = ['os_name_Android', 'os_name_iOS', 'Num_cores_Dual', 'Num_cores_Hexa', 'Num_cores_Octa',\\\n                         'Num_cores_Quad', 'SIM 2_2G', 'SIM 2_4G', 'SIM 2_Other', 'Brand_Apple', 'Brand_Billion',\\\n                         'Brand_Do', 'Brand_Google', 'Brand_Huawei', 'Brand_Itel', 'Brand_Nokia', 'Brand_Comio',\\\n                         'Brand_OPPO', 'Brand_OnePlus', 'Brand_Realme', 'Brand_Samsung', 'Brand_Spice',\\\n                         'Brand_Tecno', 'Brand_Ulefone', 'Brand_Vivo', 'Brand_Xiaomi', 'Brand_Xiaomi Poco',\\\n                        'SIM Slot(s)_Dual SIM, GSM+GSM', 'SIM Slot(s)_Dual SIM, GSM+GSM, Dual VoLTE',\\\n                        'SIM Slot(s)_Single SIM, GSM']\n\n    columns_to_retain = list(set(data.columns)-set(columns_to_remove))\n    data = data[columns_to_retain]\n    \n    columns_to_remove = ['Weight', 'Capacity', 'RAM', 'Height','Screen to Body Ratio (calculated)',\\\n                         'Pixel Density', 'Processor_frequency', 'Internal Memory', 'Screen Size', 'Resolution']\n\n    columns_to_retain = list(set(data.columns)-set(columns_to_remove))\n    data = data[columns_to_retain]\n\n    return data","62d25d94":"binarised_train = data_clean_5(binarised_train)\nbinarised_test = data_clean_5(binarised_test)","d04dff77":"def data_clean_6(x):\n    \n    data = x.copy()\n      \n    columns_to_remove = ['SIM Slot(s)_Dual SIM, GSM+CDMA', 'Sim1_2G', 'Sim1_4G',\\\n                         'os_name_Nokia', 'os_name_Other', 'Num_cores_312', 'Num_cores_Other',\\\n                         'Num_cores_Tru-Octa', 'SIM 2_3G', 'Brand_Asus',\\\n                         'Brand_Gionee', 'Brand_Honor', 'Brand_Infinix',\\\n                         'Brand_Lava', 'Brand_LeEco', 'Brand_Lenovo',\\\n                         'Brand_Meizu', 'Brand_Moto', 'Brand_Motorola',\\\n                         'Brand_Oppo', 'Brand_Panasonic']\n    columns_to_retain = list(set(data.columns)-set(columns_to_remove))\n    data = data[columns_to_retain]\n\n    columns_to_remove = ['Brand_Reliance', 'os_name_Blackberry']\n    columns_to_retain = list(set(data.columns)-set(columns_to_remove))\n    data = data[columns_to_retain]\n    \n    return data","11a81fc2":"binarised_train = data_clean_6(binarised_train)\nbinarised_test = data_clean_6(binarised_test)","6a6dbee1":"# Binarization - Train \n\n# Cut limits for Continuous Variables determined by looking at Scatter Plots in a previous Code section; Rating column Binarized in a previous section separately\n\n# Cut values are adjusted again after looking at Confusion matrix to adjust False Positive vs False Negative rate; \n#     By default the model comes out as biased towards the majority representation of Positive cases\n\n# binarised_train['Weight'] = binarised_train['Weight'].map(lambda x: 0 if x < 280 else 1)\n# Try 50 to 350 range\n# Previously chosen optimal value = 70; Adjusted to improve prediction of negative cases as per Confusion Matrix\n\n# binarised_train['RAM'] = binarised_train['RAM'].map(lambda x: 0 if x > 265 else 1)\n# Try 0 to 550 range\n# Previously chosen optimal value = 300; Adjusted to improve prediction of negative cases as per Confusion Matrix\n\n# binarised_train['Screen to Body Ratio (calculated)'] = binarised_train['Screen to Body Ratio (calculated)'].map(lambda x: 0 if x < 70 else 1)\n# Try 20 to 90 range\n\n# binarised_train['Pixel Density'] = binarised_train['Pixel Density'].map(lambda x: 0 if x < 250 else 1)\n# Try 100 to 600 range\n# Previously chosen optimal value = 250; Adjusted to improve prediction of negative cases as per Confusion Matrix\n\n# binarised_train['Processor_frequency'] = binarised_train['Processor_frequency'].map(lambda x: 0 if x < 1.75 else 1)\n# Try 0.75 to 3 range\n# Previously chosen optimal value = 1.35; Adjusted to improve prediction of negative cases as per Confusion Matrix\n\n# binarised_train['Screen Size'] = binarised_train['Screen Size'].map(lambda x: 0 if x < 4.7 else 1)\n# Try 2 to 7 range\n\n# binarised_train['Capacity'] = binarised_train['Capacity'].map(lambda x: 0 if x < 1400 else 1)\n# Try 0 to 14000 range (Drop Capacity)\n\n# binarised_train['Height'] = binarised_train['Height'].map(lambda x: 0 if x < 135 else 1)\n# Try 0 to 180 range (Drop Height)\n\n# binarised_train['Internal Memory'] = binarised_train['Internal Memory'].map(lambda x: 0 if x < 10 else 1)\n# Try 0 to 550 range (Drop Internal Memory)\n\n# binarised_train['Resolution'] = binarised_train['Resolution'].map(lambda x: 0 if x > 15 else 1)\n# Try 0 to 25 range (Drop Resolution)\n\n\n# Other Dummy Variables with clear cut values\n\n# binarised_train['SIM Slot(s)_Dual SIM, GSM+CDMA'] = binarised_train['SIM Slot(s)_Dual SIM, GSM+CDMA'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_train['Sim1_2G'] = binarised_train['Sim1_2G'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_train['Sim1_3G'] = binarised_train['Sim1_3G'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_train['Sim1_4G'] = binarised_train['Sim1_4G'].map(lambda x: 0 if x < 0.5 else 1)\n#binarised_train['os_name_Blackberry'] = binarised_train['os_name_Blackberry'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_train['os_name_KAI'] = binarised_train['os_name_KAI'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_train['os_name_Nokia'] = binarised_train['os_name_Nokia'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_train['os_name_Other'] = binarised_train['os_name_Other'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_train['os_name_Tizen'] = binarised_train['os_name_Tizen'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_train['Num_cores_312'] = binarised_train['Num_cores_312'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_train['Num_cores_Deca'] = binarised_train['Num_cores_Deca'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_train['Num_cores_Other'] = binarised_train['Num_cores_Other'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_train['Num_cores_Tru-Octa'] = binarised_train['Num_cores_Tru-Octa'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_train['SIM 2_3G'] = binarised_train['SIM 2_3G'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_train['Brand_10.or'] = binarised_train['Brand_10.or'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_train['Brand_Asus'] = binarised_train['Brand_Asus'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_train['Brand_Blackberry'] = binarised_train['Brand_Blackberry'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_train['Brand_Comio'] = binarised_train['Brand_Comio'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_train['Brand_Coolpad'] = binarised_train['Brand_Coolpad'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_train['Brand_Gionee'] = binarised_train['Brand_Gionee'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_train['Brand_HTC'] = binarised_train['Brand_HTC'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_train['Brand_Honor'] = binarised_train['Brand_Honor'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_train['Brand_InFocus'] = binarised_train['Brand_InFocus'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_train['Brand_Infinix'] = binarised_train['Brand_Infinix'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_train['Brand_Intex'] = binarised_train['Brand_Intex'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_train['Brand_Jivi'] = binarised_train['Brand_Jivi'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_train['Brand_Karbonn'] = binarised_train['Brand_Karbonn'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_train['Brand_Lava'] = binarised_train['Brand_Lava'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_train['Brand_LeEco'] = binarised_train['Brand_LeEco'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_train['Brand_Lenovo'] = binarised_train['Brand_Lenovo'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_train['Brand_Lephone'] = binarised_train['Brand_Lephone'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_train['Brand_Lyf'] = binarised_train['Brand_Lyf'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_train['Brand_Meizu'] = binarised_train['Brand_Meizu'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_train['Brand_Micromax'] = binarised_train['Brand_Micromax'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_train['Brand_Mobiistar'] = binarised_train['Brand_Mobiistar'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_train['Brand_Moto'] = binarised_train['Brand_Moto'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_train['Brand_Motorola'] = binarised_train['Brand_Motorola'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_train['Brand_Nubia'] = binarised_train['Brand_Nubia'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_train['Brand_Oppo'] = binarised_train['Brand_Oppo'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_train['Brand_Panasonic'] = binarised_train['Brand_Panasonic'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_train['Brand_Razer'] = binarised_train['Brand_Razer'].map(lambda x: 0 if x > 0.5 else 1)\n#binarised_train['Brand_Reliance'] = binarised_train['Brand_Reliance'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_train['Brand_VOTO'] = binarised_train['Brand_VOTO'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_train['Brand_Yu'] = binarised_train['Brand_Yu'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_train['Brand_iVooMi'] = binarised_train['Brand_iVooMi'].map(lambda x: 0 if x > 0.5 else 1)\n\n# Re-introduced after checking value_counts though Scatter Plots suggested elimination\n\nbinarised_train['Brand_LG'] = binarised_train['Brand_LG'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_train['Brand_Sony'] = binarised_train['Brand_Sony'].map(lambda x: 0 if x > 0.5 else 1)\n\nbinarised_train.head()","72470a69":"# Binarization - Test (Cut limits reused from analysis on Train dataset)\n\n### Previously selected continuous variables\n# binarised_test['Screen Size'] = binarised_test['Screen Size'].map(lambda x: 0 if x < 4.7 else 1)\n# binarised_test['RAM'] = binarised_test['RAM'].map(lambda x: 0 if x > 265 else 1)\n# binarised_test['Pixel Density'] = binarised_test['Pixel Density'].map(lambda x: 0 if x < 250 else 1)\n# binarised_test['Screen to Body Ratio (calculated)'] = binarised_test['Screen to Body Ratio (calculated)'].map(lambda x: 0 if x < 70 else 1)\n# binarised_test['Processor_frequency'] = binarised_test['Processor_frequency'].map(lambda x: 0 if x < 1.75 else 1)\n# binarised_test['Height'] = binarised_test['Height'].map(lambda x: 0 if x < 135 else 1)\n# binarised_test['Weight'] = binarised_test['Weight'].map(lambda x: 0 if x < 280 else 1)\n\n### Previously removed continuous variables from Scatter Plots & individual loop tests with trial MP Neuron Model\n# binarised_test['Capacity'] = binarised_test['Capacity'].map(lambda x: 0 if x < 1400 else 1)\n# binarised_test['Height'] = binarised_test['Height'].map(lambda x: 0 if x < 135 else 1)\n# binarised_test['Internal Memory'] = binarised_test['Internal Memory'].map(lambda x: 0 if x < 10 else 1)\n# binarised_test['Resolution'] = binarised_test['Resolution'].map(lambda x: 0 if x > 15 else 1)\n\n\n\n# binarised_test['Sim1_2G'] = binarised_test['Sim1_2G'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_test['Sim1_3G'] = binarised_test['Sim1_3G'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_test['Sim1_4G'] = binarised_test['Sim1_4G'].map(lambda x: 0 if x < 0.5 else 1)\n#binarised_test['os_name_Blackberry'] = binarised_test['os_name_Blackberry'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_test['os_name_KAI'] = binarised_test['os_name_KAI'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_test['os_name_Nokia'] = binarised_test['os_name_Nokia'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_test['os_name_Other'] = binarised_test['os_name_Other'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_test['os_name_Tizen'] = binarised_test['os_name_Tizen'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_test['Num_cores_312'] = binarised_test['Num_cores_312'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_test['Num_cores_Deca'] = binarised_test['Num_cores_Deca'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_test['Num_cores_Other'] = binarised_test['Num_cores_Other'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_test['Num_cores_Tru-Octa'] = binarised_test['Num_cores_Tru-Octa'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_test['SIM 2_3G'] = binarised_test['SIM 2_3G'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_test['Brand_10.or'] = binarised_test['Brand_10.or'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_test['Brand_Asus'] = binarised_test['Brand_Asus'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_test['Brand_Blackberry'] = binarised_test['Brand_Blackberry'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_test['Brand_Comio'] = binarised_test['Brand_Comio'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_test['Brand_Coolpad'] = binarised_test['Brand_Coolpad'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_test['Brand_Gionee'] = binarised_test['Brand_Gionee'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_test['Brand_HTC'] = binarised_test['Brand_HTC'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_test['Brand_Honor'] = binarised_test['Brand_Honor'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_test['Brand_InFocus'] = binarised_test['Brand_InFocus'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_test['Brand_Infinix'] = binarised_test['Brand_Infinix'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_test['Brand_Intex'] = binarised_test['Brand_Intex'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_test['Brand_Jivi'] = binarised_test['Brand_Jivi'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_test['Brand_Karbonn'] = binarised_test['Brand_Karbonn'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_test['Brand_Lava'] = binarised_test['Brand_Lava'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_test['Brand_LeEco'] = binarised_test['Brand_LeEco'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_test['Brand_Lenovo'] = binarised_test['Brand_Lenovo'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_test['Brand_Lephone'] = binarised_test['Brand_Lephone'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_test['Brand_Lyf'] = binarised_test['Brand_Lyf'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_test['Brand_Meizu'] = binarised_test['Brand_Meizu'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_test['Brand_Micromax'] = binarised_test['Brand_Micromax'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_test['Brand_Mobiistar'] = binarised_test['Brand_Mobiistar'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_test['Brand_Moto'] = binarised_test['Brand_Moto'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_test['Brand_Motorola'] = binarised_test['Brand_Motorola'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_test['Brand_Nubia'] = binarised_test['Brand_Nubia'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_test['Brand_Oppo'] = binarised_test['Brand_Oppo'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_test['Brand_Panasonic'] = binarised_test['Brand_Panasonic'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_test['Brand_Razer'] = binarised_test['Brand_Razer'].map(lambda x: 0 if x > 0.5 else 1)\n#binarised_test['Brand_Reliance'] = binarised_test['Brand_Reliance'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_test['Brand_VOTO'] = binarised_test['Brand_VOTO'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_test['Brand_Yu'] = binarised_test['Brand_Yu'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_test['Brand_iVooMi'] = binarised_test['Brand_iVooMi'].map(lambda x: 0 if x > 0.5 else 1)\n# binarised_test['SIM Slot(s)_Dual SIM, GSM+CDMA'] = binarised_test['SIM Slot(s)_Dual SIM, GSM+CDMA'].map(lambda x: 0 if x > 0.5 else 1)\n\n# Re-introduced after checking value_counts though Scatter Plots suggested elimination\n\nbinarised_test['Brand_LG'] = binarised_test['Brand_LG'].map(lambda x: 0 if x > 0.5 else 1)\nbinarised_test['Brand_Sony'] = binarised_test['Brand_Sony'].map(lambda x: 0 if x > 0.5 else 1)\n\n\nbinarised_test.head()","7246cf82":"binarised_train = binarised_train.drop('PhoneId',axis=1)\nbinarised_test = binarised_test.drop('PhoneId',axis=1)","88f59444":"#binarised_train_continuous = binarised_train[['Weight', 'RAM', 'Screen to Body Ratio (calculated)', 'Pixel Density', 'Processor_frequency', 'Screen Size']]\n#binarised_test_continuous = binarised_test[['Weight', 'RAM', 'Screen to Body Ratio (calculated)', 'Pixel Density', 'Processor_frequency', 'Screen Size']]","91bff4a0":"#type(binarised_train)","3e73563b":"#binarised_test_continuous = binarised_test_continuous.values\n#binarised_train_continuous = binarised_train_continuous.values","e6c8bee7":"# Convert Pandas Datagrames to Numpy Arrays\n\nbinarised_test = binarised_test.values\nbinarised_train = binarised_train.values","5b958058":"# MP Neuron Class (Reused from Padhai course, but edited to return 0 or 1 instead of boolean value)\n\nclass MPNeuron:\n\n  def __init__(self):\n    self.b = None\n    \n  def model(self, x):\n    if sum(x) >= self.b:\n       return 1\n    else:\n       return 0\n  \n  def predict(self, X):\n    Y = []\n    for x in X:\n      result = self.model(x)\n      Y.append(result)\n    return np.array(Y)\n  \n  def fit(self, X, Y):\n    accuracy = {}\n    \n    for b in range(X.shape[1] + 1):\n      self.b = b\n      Y_pred = self.predict(X)\n      accuracy[b] = accuracy_score(Y_pred, Y)\n      \n    best_b = max(accuracy, key = accuracy.get)\n    self.b = best_b\n    \n    print('Optimal value of b is', best_b)\n    print('Highest accuracy is', accuracy[best_b])\n","a2c63dfd":"# MP Neuron - Instantiate and Fit on Train\n\nmp_neuron = MPNeuron()\nmp_neuron.fit(binarised_train, Train_Rating_Binarized_nparray)","08b132c7":"# Display Confusion Matrix for Train\n\nY_train_pred = mp_neuron.predict(binarised_train)\n\nconfusion_matrix(Train_Rating_Binarized_nparray, Y_train_pred, sample_weight=None)","45f26b83":"# MP Neuron - Predict for Test\n\nY_test_pred = mp_neuron.predict(binarised_test)","5db23f9b":"# Create Submission file\n\nsubmission = pd.DataFrame({'PhoneId':test_new['PhoneId'], 'Class':Y_test_pred})\nsubmission = submission[['PhoneId', 'Class']]\n\nsubmission.head()","ac1e97d4":"# print(submission)","ad1c67a6":"# Write to CSV\n\nsubmission.to_csv(\"submission-13.csv\", index=False)","06c2e23d":"# MP Neuron contest - My code","7286fbc9":"Not very important feature","0c348e96":"removing all those data points in which more than 15 features are missing ","14c6b238":"# Removing features","d38c5af3":"Continuous variables by Rating groups","9b074624":"## Dummy Solution","b6ce1c62":"<b>Missing values:<\/b><br>\n'Also Known As'(459),'Applications'(421),'Audio Features'(437),'Bezel-less display'(266),'Browser'(449),'Build Material'(338),'Co-Processor'(451),'Display Colour'(457),'Mobile High-Definition Link(MHL)'(472),'Music'(447)\n'Email','Fingerprint Sensor Position'(174),'Games'(446),'HDMI'(454),'Heart Rate Monitor'(467),'IRIS Scanner'(467),\n'Optical Image Stabilisation'(219),'Other Facilities'(444),'Phone Book'(444),'Physical Aperture'(87),'Quick Charging'(122),'Ring Tone'(444),'Ruggedness'(430),SAR Value(315),'SIM 3'(472),'SMS'(470)', 'Screen Protection'(229),'Screen to Body Ratio (claimed by the brand)'(428),'Sensor'(242),'Software Based Aperture'(473),\n'Special Features'(459),'Standby time'(334),'Stylus'(473),'TalkTime'(259), 'USB Type-C'(374),'Video Player'(456),\n'Video Recording Features'(458),'Waterproof'(398),'Wireless Charging','USB OTG Support'(159), 'Video ,'Recording'(113),'Java'(471),'Browser'(448)\n\n<b>Very low variance:<\/b><br>\n'Architecture'(most entries are 64-bit),'Audio Jack','GPS','Loudspeaker','Network','Network Support','Other Sensors'(28),'SIM Size', 'VoLTE'\n\n\n<b>Multivalued:<\/b><br>\n'Colours','Custom UI','Model'(1),'Other Sensors','Launch Date'\n\n<b>Not important:<\/b><br>\n'Bluetooth', 'Settings'(75),'Wi-Fi','Wi-Fi Features'\n\n<b>Doubtful:<\/b><br>\n'Aspect Ratio','Autofocus','Brand','Camera Features','Fingerprint Sensor'(very few entries are missing),\n'Fingerprint Sensor Position', 'Graphics'(multivalued),'Image resolution'(multivalued),'SIM Size','Sim Slot(s)', 'User Available Storage', 'SIM 1', 'SIM 2','Shooting Modes', 'Touch Screen'(24), 'USB Connectivity'\n    \n<b>To check:<\/b><br>\n'Display Type','Expandable Memory','FM Radio'\n\n<b>High Correlation with other features<\/b><br>\n'SIM Slot(s)' high correlation with SIM1\n'Weight' has high high correlation with capacity , screen-to-body ratio\n'Height' - screen size is also there\n    \n<b>Given a mobile, we can't directly get these features<\/b><br>\n'Rating Count', 'Review Count'\n\n<b>Keeping:<\/b><br>\n'Capacity','Flash'(17),'Height'(22),'Internal Memory'(20, require cleaning),'Operating System'(25, require cleaning), 'Pixel Density'(1, clean it),'Processor'(22, clean it), 'RAM'(17, clean), 'Rating','Resolution'(cleaning), 'Screen Resolution','Screen Size', 'Thickness'(22), 'Type','User Replaceable','Weight'(cleaning),'Sim Size'(), 'Other Sensors'(28), 'Screen to Body Ratio (calculated)','Width',\n","a3fd02c6":"Binary Variables previously selected by Satter Plot visualization - Check again by value_counts","59c56583":"# Filling Missing values","3f1ef586":"Task: To predict whether the user likes the mobile phone or not. <br>\nAssumption: If the average rating of mobile >= threshold, then the user likes it, otherwise not.","ae5062c7":"Binary Variables previously removed as mixed representation using visual Scatter Plots - Recheck using value_counts table"}}