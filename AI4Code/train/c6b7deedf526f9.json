{"cell_type":{"e53afd36":"code","38744aca":"code","eab5df82":"code","18ec0798":"code","3f8c4296":"code","18f535c9":"code","faa00e40":"code","5b8c41bf":"code","66cdfeb6":"code","15630126":"code","c7a570b7":"code","c9b1ffd0":"code","e307f05a":"code","e7b5827e":"code","1e511b45":"code","eea34fa6":"code","3d24e3d0":"code","8deb080b":"code","070e30e1":"code","388fe64a":"code","3fe3584a":"code","385b4952":"code","6dba9ce4":"code","365a4f7e":"code","6331f822":"code","bfc9fcc2":"code","06124b10":"code","6dbbeae8":"code","4c5fb19e":"code","498dae3e":"code","cc8bc0f9":"code","a08930e6":"code","46c0471e":"code","1c3ee1c8":"code","f7319b0d":"code","ba98ce88":"code","c106242d":"code","0237d968":"code","9eaf1e08":"code","f27758b6":"code","13ce44ef":"code","556aeb50":"code","2b8f7a02":"code","3bdcc765":"code","796ada38":"code","836f5737":"code","ddf2356a":"code","c17bd704":"code","0dedd251":"code","34c7e879":"code","63e865f5":"code","4434de40":"code","624b3a9b":"markdown","81640bed":"markdown","77a730a7":"markdown","71a32d2f":"markdown","f647c5d6":"markdown","bbaf2e2c":"markdown","47702e26":"markdown","cce06148":"markdown","73956c4c":"markdown","71f3631a":"markdown","45eeae94":"markdown","627eacf5":"markdown","8cdbb184":"markdown","4d09300f":"markdown","af037bac":"markdown","60f64620":"markdown","54eef427":"markdown","78607ae8":"markdown","c9355fe1":"markdown","f77e9e86":"markdown","3404d25c":"markdown","0d5a1396":"markdown","522f9e5b":"markdown","240aa38d":"markdown","23d2c02c":"markdown","fcac701f":"markdown","009795a5":"markdown","d81fa9cb":"markdown","543e8c57":"markdown","580a1c8e":"markdown","63b785d2":"markdown"},"source":{"e53afd36":"\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport statsmodels.api as sm\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import linear_model\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.decomposition import PCA\nfrom sklearn.linear_model import ElasticNet, Lasso, RidgeCV\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.metrics import mean_squared_error\n\nimport xgboost as xgb\nimport lightgbm as lgb\n\nfrom math import sqrt\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","38744aca":"data_train = pd.read_csv(\"..\/input\/Train.csv\")\ndata_test = pd.read_csv(\"..\/input\/Test.csv\")","eab5df82":"data_train.head()","18ec0798":"data_test.head()","3f8c4296":"print(\"Training Data  Row : %s Column : %s \" % (str(data_train.shape[0]) ,str(data_train.shape[1])))","18f535c9":"print(\"Training Data  Row : %s Column : %s \" % (str(data_test.shape[0]) ,str(data_test.shape[1])))","faa00e40":"data_train.info()","5b8c41bf":"data_test.info()","66cdfeb6":"data_train.isnull().sum()","15630126":"data_test.isnull().sum()","c7a570b7":"data_train['Item_Weight'] = data_train['Item_Weight'].fillna((data_train['Item_Weight'].mean()))\ndata_train.Outlet_Size = data_train.Outlet_Size.fillna(\"Small\")\ndata_train.isnull().sum().sum()","c9b1ffd0":"data_test['Item_Weight'] = data_test['Item_Weight'].fillna((data_test['Item_Weight'].mean()))\ndata_test.Outlet_Size = data_test.Outlet_Size.fillna(\"Small\")\ndata_test.isnull().sum().sum()","e307f05a":"column_num = data_train.select_dtypes(exclude = [\"object\"]).columns\ncolumn_object = data_train.select_dtypes(include = [\"object\"]).columns\n\ntest_column_num = data_test.select_dtypes(exclude = [\"object\"]).columns\ntest_column_object = data_test.select_dtypes(include = [\"object\"]).columns","e7b5827e":"data_train_num = data_train[column_num]\ndata_train_object = data_train[column_object]\n\ndata_test_num = data_test[test_column_num]\ndata_test_object = data_test[test_column_object]","1e511b45":"data_train_num.describe()","eea34fa6":"data_train_object.describe()","3d24e3d0":"sns.distplot(data_train_num[\"Item_Outlet_Sales\"]);","8deb080b":"print(\"Skewness: %f\" % data_train_num[\"Item_Outlet_Sales\"].skew())\nprint(\"Kurtosis: %f\" % data_train_num[\"Item_Outlet_Sales\"].kurt())","070e30e1":"%matplotlib inline\ndata_train_num.hist(figsize=(10,8),bins=6,color='Y')\nplt.tight_layout()\nplt.show()","388fe64a":"plt.figure(1)\nplt.subplot(321)\ndata_train['Outlet_Type'].value_counts(normalize=True).plot(figsize=(10,12),kind='bar',color='green')\n\nplt.subplot(322)\ndata_train['Item_Fat_Content'].value_counts(normalize=True).plot(figsize=(10,12),kind='bar',color='yellow')\n\nplt.subplot(323)\ndata_train['Item_Type'].value_counts(normalize=True).plot(figsize=(10,12),kind='bar',color='red')\n\nplt.subplot(324)\ndata_train['Outlet_Size'].value_counts(normalize=True).plot(figsize=(10,12),kind='bar',color='orange')\n\nplt.subplot(325)\ndata_train['Outlet_Location_Type'].value_counts(normalize=True).plot(figsize=(10,12),kind='bar',color='black')\n\nplt.subplot(326)\ndata_train['Outlet_Establishment_Year'].value_counts().plot(figsize=(10,12),kind='bar',color='olive')\n\n\nplt.tight_layout()\nplt.show()","3fe3584a":"data_train['Item_Fat_Content'].value_counts()","385b4952":"data_test['Item_Fat_Content'].value_counts()","6dba9ce4":"vals_to_replace = {'LF':'Low Fat', 'low fat':'Low Fat', 'reg':'Regular'}\ndata_train['Item_Fat_Content'] = data_train['Item_Fat_Content'].map(vals_to_replace)\ndata_test['Item_Fat_Content'] = data_test['Item_Fat_Content'].map(vals_to_replace)","365a4f7e":"data_train['Item_Fat_Content'].value_counts(normalize=True).plot(figsize=(5,4),kind='bar',color='green')","6331f822":"data_train[\"Outlet_Identifier\"].value_counts()","bfc9fcc2":"\nax = sns.catplot(x=\"Outlet_Identifier\", y = \"Item_Outlet_Sales\", data=data_train, height=5, aspect=2,  kind=\"bar\")\n","06124b10":"plt.rcParams['figure.figsize']=(10,4)\nax = sns.boxplot(x=\"Outlet_Type\", y=\"Item_Outlet_Sales\", data=data_train)\n","6dbbeae8":"ax = sns.boxplot(x=\"Outlet_Size\", y=\"Item_Outlet_Sales\", data=data_train)","4c5fb19e":"ax = sns.boxplot(x=\"Item_Fat_Content\", y=\"Item_Outlet_Sales\", data=data_train)","498dae3e":"sns.pairplot(data_train[data_train_num.columns])","cc8bc0f9":"sns.heatmap(data_train[data_train_num.columns].corr(),annot=True)\n\n","a08930e6":"total_object = data_train_object.append(data_test_object)\ntrain_object_lenght = len(data_train_object)\ntotal_cat = pd.get_dummies(total_object, drop_first= True)\ndata_train_object = total_cat[:train_object_lenght]\ndata_test_object = total_cat[train_object_lenght:]","46c0471e":"data_train_object.head()","1c3ee1c8":"df_test = pd.concat([data_test_object,data_test_num],axis=1)\ndf_train = pd.concat([data_train_object,data_train_num],axis=1)\ndf_train.head()","f7319b0d":"train_Y = df_train.iloc[:,-1]\ntrain_X=  df_train.iloc[:,0:-1]","ba98ce88":"model = sm.OLS(train_Y, train_X)\nresults = model.fit()\nprint(results.summary())","c106242d":"\nscaler = StandardScaler()\ntrain_scaler = scaler.fit(train_X)\ntrain_scale = train_scaler.transform(train_X)\ntrain_X = pd.DataFrame(train_scale, columns=train_X.columns)\n\ntrain_scale = train_scaler.transform(df_test)\ndf_test = pd.DataFrame(train_scale, columns=df_test.columns)","0237d968":"model = sm.OLS(train_Y, train_X)\nresults = model.fit()\nprint(results.summary())","9eaf1e08":"type(results.pvalues.index)","f27758b6":"type(results.pvalues)","13ce44ef":"col = [value for value in results.pvalues.index if results.pvalues[value] > -0.001  ]\ncol","556aeb50":"X1_train, X1_test, Y1_train,Y1_test =  train_test_split(train_X[col],train_Y, random_state=33)\nprint(X1_train.shape)\nprint(X1_test.shape)\nprint(df_test.shape)","2b8f7a02":"pca_model = PCA(n_components=0.95)\nX1_train = pca_model.fit_transform(X1_train)\nX1_test = pca_model.transform(X1_test)\ntest_X = pca_model.transform(df_test[col])\nprint(X1_train.shape)\nprint(X1_test.shape)\nprint(test_X.shape)","3bdcc765":"def modelPredection(model,X1_train,Y1_train,X1_test,Y1_test,test_X) :\n    model.fit(X1_train,Y1_train)\n    Y1_predict = model.predict(X1_test)\n    print(\"RMSE : %f\"%sqrt(mean_squared_error(Y1_test,Y1_predict)))\n    return model.predict(test_X)","796ada38":"#Linear Regression\nlinear = linear_model.LinearRegression( fit_intercept=True, n_jobs=None,\n         normalize=False);\npredict_Y = modelPredection(linear,X1_train,Y1_train,X1_test,Y1_test,test_X)","836f5737":"#RidgeCV\nclf = RidgeCV(alphas=[1e-3, 1e-2, 1e-1, 1]).fit(X1_train,Y1_train)\n\npredict_Y = modelPredection(clf,X1_train,Y1_train,X1_test,Y1_test,test_X)","ddf2356a":"#Kernel Ridge\nRR = KernelRidge(alpha=0.6, kernel='polynomial', degree=3, coef0=2.5)\npredict_Y = modelPredection(RR,X1_train,Y1_train,X1_test,Y1_test,test_X)","c17bd704":"#Lasso\n#lasso = Lasso(alpha =1.1, random_state=1)\nlasso = Lasso(alpha =16, random_state=100)\npredict_Y = modelPredection(lasso,X1_train,Y1_train,X1_test,Y1_test,test_X)","0dedd251":"#Elastic Net \n#elastic_net = ElasticNet(alpha=0.0005, l1_ratio=.9, random_state=3)\nelastic_net = ElasticNet(alpha=0.8)\npredict_Y = modelPredection(elastic_net,X1_train,Y1_train,X1_test,Y1_test,test_X)","34c7e879":"#Gradient Boosting\n#GBR = GradientBoostingRegressor(n_estimators=30, max_depth=2)\nGBR = GradientBoostingRegressor()\npredict_Y = modelPredection(GBR,X1_train,Y1_train,X1_test,Y1_test,test_X)","63e865f5":"#XGB\nmodel_xgb = xgb.XGBRegressor()\npredict_Y = modelPredection(model_xgb,X1_train,Y1_train,X1_test,Y1_test,test_X)","4434de40":"#light Gradient Boosting\nmodel_lgb = lgb.LGBMRegressor()\npredict_Y = modelPredection(model_lgb,X1_train,Y1_train,X1_test,Y1_test,test_X)","624b3a9b":"**Based on above observation merge \"Item Fat Content \" Category**","81640bed":"# **Understanding Data**\n\n* Item Identifier: A code provided for the item of sale\n* Item Weight: Weight of item\n* Item Fat Content: A categorical column of how much fat is present in the item : \u2018Low Fat\u2019, \u2018Regular\u2019, \u2018low fat\u2019, \u2018LF\u2019, \u2018reg\u2019\n* Item Visibility: Numeric value for how visible the item is\n* Item Type: What category does the item belong to: \u2018Dairy\u2019, \u2018Soft Drinks\u2019, \u2018Meat\u2019, \u2018Fruits and Vegetables\u2019, \u2018Household\u2019, \u2018Baking Goods\u2019, \u2018Snack Foods\u2019, \u2018Frozen Foods\u2019, \u2018Breakfast\u2019, \u2019Health and Hygiene\u2019, \u2018Hard Drinks\u2019, \u2018Canned\u2019, \u2018Breads\u2019, \u2018Starchy Foods\u2019, \u2018Others\u2019, \u2018Seafood\u2019.\n* Item MRP: The MRP price of item\n* Outlet Identifier: Which outlet was the item sold. This will be categorical column\n* Outlet Establishment Year: Which year was the outlet established\n* Outlet Size: A categorical column to explain size of outlet: \u2018Medium\u2019, \u2018High\u2019, \u2018Small\u2019.\n* Outlet Location Type: A categorical column to describe the location of the outlet: \u2018Tier 1\u2019, \u2018Tier 2\u2019, \u2018Tier 3\u2019\n* Outlet Type : Categorical column for type of outlet: \u2018Supermarket Type1\u2019, \u2018Supermarket Type2\u2019, \u2018Supermarket Type3\u2019, \u2018Grocery Store\u2019\n* Item Outlet Sales: The amount of sales for an item.","77a730a7":"From the prediction you can conclude that XG Boost is gIving better predective model. we can further fine tune the models for increased performance. \nBut this is good to go for beginner model.\n\nplease let me know you feedbacks and comments and boost my motivation by **Upvote.**","71a32d2f":"![](http:\/\/www.animatedimages.org\/data\/media\/466\/animated-thank-you-image-0078.gif)","f647c5d6":"**Observation** -\n*  Item Outet sale is maximum in Oultlet Identifier OUT027 more than 3500\n*  SuperMarket Type 3 has maximum   Item Outet sale whereas Grocery Store has lowest\n*  Medium size Outlet are having most outlet sale are having potentail outlier to convert it to High size Outlet.\n*  \"Low fat\" Items are having more Item outlet Sale\n\n","bbaf2e2c":"**Observation** -\n* Item Outlet Sale show mild possitive corelation with Item MRP\n* Item Outlet Sale show negative corelation with Item visibility","47702e26":"combining one hot encoded data to numerical data","cce06148":"# **Data from Eagle's Eye**","73956c4c":"**Observation** -\n*  Most of the MRP is in Range  100 to 180\n*  Around 5000 Item Outlet sale is in between 0 to 2000\n*  Around 2500 items have a weight 10 to 12.5\n*  Most of the Item visibilty is between 0 to 0.05\n","71f3631a":"Dividing Data to Dependent and Independent Variable","45eeae94":"# **BIVARIATE ANALYSIS**","627eacf5":"# **DATA CLEANUP - Null Data**","8cdbb184":"# **Spliting the Data**","4d09300f":"# **Let's replace**\n\n* \"Item Weight\" null values with mean values of \"Item Weight\"\n* \"Outlet_Size\" with Small as most of the null values are ( Tier 3 ,Grocery Store or Tier 2 ,Supermarket Type1) where most of the values are small.\n","af037bac":"# **Scaling Data**","60f64620":"# **Univariate Analysis**","54eef427":"# **Predictions**","78607ae8":"**Mart SALES PREDICTION**","c9355fe1":"# **Divide the data in Categorical and Numerial Data**","f77e9e86":"# **Read  the Data**","3404d25c":"# **Sneak Peek our data..**","0d5a1396":"**One-hot Encoding** -  Converting the Categorical values to numerical ","522f9e5b":"# **Overview Stats About Data**","240aa38d":"**Observation** - Target Data is positively skewed","23d2c02c":"# **PRE PROCESSING DATA**","fcac701f":"# **Loading Libraries **","009795a5":"**Observations** - Item Weight and Outlet Size has missing values both in training and test dataset","d81fa9cb":"**Observation** -\n* More than 65 % Outlet  type is  SuperMarket Type 1 \n*  Item Fat Content same category has multiple names i.e \"Low fat\" as \"LF\", \"low fat\" ; \"Regular\" as reg (require to be merge in single name)\n* Most of Item are from category Fruits and Vegetables and Snacks Foods\n* More than 55 % outlet are of small size\n* More than 40 % Outlet are in tier 3 location followed by Tier2\n* Highest Outlet Opened in year 1985 more than 1400","543e8c57":"![Super Market](https:\/\/www.supermarketnews.com\/sites\/supermarketnews.com\/files\/styles\/article_featured_standard\/public\/Farmstead-2promo_0.gif?itok=LBoG0Kn8)","580a1c8e":"**Observation** - after changes we can infer around 75 %  of the items in Mart are Low Fat","63b785d2":"# **Principal component Analysis**"}}