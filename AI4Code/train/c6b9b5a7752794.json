{"cell_type":{"c4dce89e":"code","0e3e186f":"code","29a2a696":"code","770d8100":"code","61d2b25a":"code","82a9febb":"code","224a2428":"code","d0f756ed":"code","e1f4438a":"code","833ca149":"code","45a42cfe":"code","c3c08b89":"code","7e91e74d":"code","64297684":"code","0a7f6b37":"code","d3fe4b6a":"code","129c11dc":"code","34f7d8bb":"code","9f27f9c6":"code","9561bd8a":"code","826ae691":"markdown","4dc745bc":"markdown","7720fa94":"markdown","d7c7d4e5":"markdown","6d01c19d":"markdown","2ec4f767":"markdown","ddef8f5c":"markdown","1d8a3565":"markdown","84412c02":"markdown","45294e33":"markdown","6417a257":"markdown","0e7dd45b":"markdown","93e63379":"markdown","294a7da9":"markdown","63f70029":"markdown","753d8b41":"markdown","b7a31ef1":"markdown","11b85f7c":"markdown","49974026":"markdown"},"source":{"c4dce89e":"import tensorflow as tf\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\nimport numpy as np","0e3e186f":"import pkg_resources\nimport types\ndef get_imports():\n    for name, val in globals().items():\n        if isinstance(val, types.ModuleType):\n            # Split ensures you get root package, \n            # not just imported function\n            name = val.__name__.split(\".\")[0]\n\n        elif isinstance(val, type):\n            name = val.__module__.split(\".\")[0]\n\n        # Some packages are weird and have different\n        # imported names vs. system names\n        if name == \"PIL\":\n            name = \"Pillow\"\n        elif name == \"sklearn\":\n            name = \"scikit-learn\"\n\n        yield name\nimports = list(set(get_imports()))\n\nrequirements = []\nfor m in pkg_resources.working_set:\n    if m.project_name in imports and m.project_name!=\"pip\":\n        requirements.append((m.project_name, m.version))\n\nfor r in requirements:\n    print(\"{}=={}\".format(*r))","29a2a696":"tf.config.experimental.list_physical_devices()","770d8100":"(X_train, y_train), (X_test, y_test) = tf.keras.datasets.cifar10.load_data()","61d2b25a":"print(f'Shape of X_train: {X_train.shape}')\nprint(f'Shape of y_train: {y_train.shape}')\nprint(f'Shape of X_test: {X_test.shape}')\nprint(f'Shape of y_test: {y_test.shape}')","82a9febb":"# We have uint8 arrays of RGB image data i.e the number is stored as an 8-bit integer giving a range of possible values from 0 to 255\nX_train","224a2428":"# Images classes possible values from 0 to 9\ny_train[:10]","d0f756ed":"# There are 10 image classes\nclasses = [\"airplane\",\"automobile\",\"bird\",\"cat\",\"deer\",\"dog\",\"frog\",\"horse\",\"ship\",\"truck\"]","e1f4438a":"def plot_classes():    \n    fig, ax = plt.subplots(nrows=2, ncols=5)\n    index = 0\n    for row in ax:\n        for col in row:\n            col.imshow(X_train[index])\n            col.title.set_text(classes[y_train[index][0]])\n            index += 1\n    plt.show()\n\nplot_classes()","833ca149":"X_train_scaled = X_train \/ 255\nX_test_scaled = X_test \/ 255","45a42cfe":"y_train[:5]","c3c08b89":"y_train_categorical = keras.utils.to_categorical(y_train, num_classes= 10, dtype='float')\ny_test_categorical = keras.utils.to_categorical(y_test, num_classes= 10, dtype='float')\n\ny_train_categorical[:5]","7e91e74d":"def create_model():\n    model = keras.Sequential([\n        keras.layers.Flatten(input_shape=(32,32,3)),\n        keras.layers.Dense(3000, activation='relu'),\n        keras.layers.Dense(1000, activation='relu'),\n        keras.layers.Dense(10, activation='sigmoid')\n    ])\n\n    model.compile(optimizer= 'SGD',\n                 loss= 'categorical_crossentropy',\n                 metrics=['accuracy'])\n    \n    return model","64297684":"%%timeit -n1 -r1 # time required toexecute this cell once\n\nmodel = create_model()\nmodel.fit(X_train_scaled, y_train_categorical, epochs=50)","0a7f6b37":"model.evaluate(X_test_scaled, y_test_categorical)","d3fe4b6a":"def model_predict(index):\n    print(f'Index of the predicted label: { np.argmax(model.predict(X_test_scaled)[index])}')\n    print(f'True value of the label: {y_test[index][0]} and class name: {classes[y_test[index][0]]}')\n    plt.imshow(X_test[index])\n    \nmodel_predict(10)                                      \n                                           ","129c11dc":"%%timeit -n1 -r1\n\n# CPU benchmarking for 1 epoch\nwith tf.device('\/CPU:0'):\n    cpu_model = create_model()\n    cpu_model.fit(X_train_scaled, y_train_categorical, epochs= 1)","34f7d8bb":"%%timeit -n1 -r1\n\n# GPU benchmarking for 1 epoch\nwith tf.device('\/GPU:0'):\n    gpu_model = create_model()\n    gpu_model.fit(X_train_scaled, y_train_categorical, epochs= 1)","9f27f9c6":"%%timeit -n1 -r1\n\n# CPU benchmarking for 5 epoch\nwith tf.device('\/CPU:0'):\n    cpu_model = create_model()\n    cpu_model.fit(X_train_scaled, y_train_categorical, epochs= 5)","9561bd8a":"%%timeit -n1 -r1\n\n# GPU benchmarking for 5 epoch\nwith tf.device('\/GPU:0'):\n    gpu_model = create_model()\n    gpu_model.fit(X_train_scaled, y_train_categorical, epochs= 5)","826ae691":"# Scaling <a id =\"8\"><\/a>\n* We have uint8 arrays of RGB image data i.e the number is stored as an 8-bit integer giving a range of possible values from 0 to 255.\n* Typically zero is taken to be black, and 255 is taken to be white. Values in between make up the different shades of gray.\n* In order to scale the input we are going to divide every value by 255 so that final values will be in the range of 0 to 1.","4dc745bc":"# Model Building <a id =\"10\"><\/a>\n* Use flatten layer to flatten the 3D array to 1 D array\n* Create hidden layers using 'relu' activation function\n* Use 'sigmoid' activation function\n* Since we have large dataset, we will use 'Stochastic Gradient Descent(SGD)' as our optimizer.\n* Since we have one hot encoded y_train_categorical values we are going to use 'categorical_crossentropy' loss function\n* Finally we will use 'accuracy' metrics","7720fa94":"![NLP_Header_Image_Classification_ANN_CPU_GPU_Benchmarking](https:\/\/raw.githubusercontent.com\/satishgunjal\/images\/master\/NLP_Header_Image_Classification_ANN_CPU_GPU_Benchmarking.png)\n\n# Index\n* [Introduction](#1)\n* [Important Points](#2)\n* [Import Libraries](#3)\n* [Versions of Imported Libraries](#4)\n* [List of Physical Devices](#5)\n* [Load Data](#6)\n* [Data Visualization](#7)\n* [Scaling](#8)\n* [One Hot Encoding](#9)\n* [Model Building](#10)\n* [Model Training](#11)\n* [Model Accuracy](#12)\n* [Model Prediction](#13)\n* [CPU, GPU Benchmarking](#14)\n    - [Time Comparison for 1 Epoch](#15)\n    - [Time Comparison for 5 Epoch](#16)\n* [Reference](#17)","d7c7d4e5":"# Important Points <a id =\"2\"><\/a>\n> Since I am uisng large dataset and also doing CPU benchmarking, if you do 'Run All' it may take upto **18 minutes** to excecute all the cells.","6d01c19d":"# Load Data <a id =\"6\"><\/a>\n* CIFAR10 small images classification dataset\n* The CIFAR-10 dataset consists of 60000 32x32 colour images in 10 classes, with 6000 images per class. There are 50000 training images and 10000 test images. See more info at the [CIFAR homepage](https:\/\/www.cs.toronto.edu\/~kriz\/cifar.html).\n* Tuple of Numpy arrays: (x_train, y_train), (x_test, y_test).\n* x_train, x_test: uint8 arrays of RGB image data with shape (num_samples, 3, 32, 32) if tf.keras.backend.image_data_format() is 'channels_first', or (num_samples, 32, 32, 3) if the data format is 'channels_last'.\n* y_train, y_test: uint8 arrays of category labels (integers in range 0-9) each with shape (num_samples, 1).","2ec4f767":"# Versions of Imported Libraries <a id =\"4\"><\/a>","ddef8f5c":"# Data Visualization <a id =\"7\"><\/a>","1d8a3565":"# CPU, GPU Benchmarking <a id =\"14\"><\/a>\nWe will calculate the time required for 1 and 5 epochs for CPU and GPU to benchmark the performance.","84412c02":"# Reference <a id =\"17\"><\/a>\n* https:\/\/keras.io\/api\/datasets\/cifar10\/\n* https:\/\/www.youtube.com\/watch?v=YmDaqXMIoeY&list=PLeo1K3hjS3uu7CxAacxVndI4bE_o3BDtO&index=17\n* https:\/\/stackoverflow.com\/questions\/40428931\/package-for-listing-version-of-packages-used-in-a-jupyter-notebook\n* https:\/\/www.kaggle.com\/rtatman\/get-the-versions-of-imported-packages ","45294e33":"# Model Accuracy <a id =\"12\"><\/a>\nWe will test models accuracy against y_test_categorical values.","6417a257":"# One Hot Encoding <a id =\"9\"><\/a>\nFor each image, label values can be from 0 to 9. Since we are going to classify each image in one of the 10 available classes we will create categorical values with 10 classes in it.\nFor more details please refer [link](https:\/\/satishgunjal.com\/one_hot_encoding\/)","0e7dd45b":"# Import Libraries <a id =\"3\"><\/a>","93e63379":"# Model Prediction <a id =\"13\"><\/a>","294a7da9":"# List of Physical Devices <a id =\"5\"><\/a>","63f70029":"Notice in above catorical values, there is '1' for each label index position.","753d8b41":"## Time Comparison for 5 Epoch <a id =\"16\"><\/a>\n* CPU took 8 min 53 s\n* GPU took 24.6 s\n\n**So CPU took almost 22 times more time for 5 epoch**","b7a31ef1":"# Introduction <a id =\"1\"><\/a>\nFor image classification we are going to use TensorFlow deep learning framework and CIFAR10 small images classification dataset. We will also compare the model performance using CPU and GPU resources and compare the results.\n","11b85f7c":"## Time Comparison for 1 Epoch <a id =\"15\"><\/a>\n* CPU took 1 min 52s\n* GPU took 5.95 s\n\n**So CPU took almost 19 times more time for 1 epoch**","49974026":"# Model Training <a id =\"11\"><\/a>\n* We will train this model for 50 epochs.\n* We are also going to use GPU for training"}}