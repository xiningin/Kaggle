{"cell_type":{"bccf8cd7":"code","b7dcddb3":"code","cb634cc5":"code","0ed4605e":"code","bfa40fca":"code","bf997cb0":"code","400a57c2":"code","6f7c3090":"code","6ee0e4bd":"code","fe081f59":"code","ece18353":"code","e2d833a9":"code","2f9bf7df":"code","731cd3e9":"code","87b975fd":"code","2fd53074":"code","6da5ebfb":"code","a5b3e3ec":"code","99db489e":"markdown","7e50fd37":"markdown","401ff74d":"markdown","090e3482":"markdown","5c5d5b77":"markdown","ccbd59f1":"markdown","61ed781c":"markdown","f3413f20":"markdown","4d919a12":"markdown","91be0732":"markdown","8b5cf932":"markdown","00e67d52":"markdown","4355ef95":"markdown","d77b7521":"markdown","79bb4922":"markdown","167b9f16":"markdown","ac3ea22e":"markdown","fbe12dac":"markdown","5eb3cf9a":"markdown"},"source":{"bccf8cd7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns # for heatmap\nimport matplotlib.pyplot as plt # for common plotting\nimport graphviz as gv # for decision tree plotting\nfrom scipy.spatial.distance import cdist\nfrom sklearn.cluster import KMeans\nfrom sklearn.linear_model import LinearRegression, LogisticRegression\nfrom sklearn.model_selection import train_test_split\n# GaussianNB, BernoulliNB, MultinomialNB\nfrom sklearn.naive_bayes import GaussianNB as bayes_model\nfrom sklearn.metrics import r2_score as model_score, classification_report, confusion_matrix, accuracy_score\nfrom sklearn import tree\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\nanimals = pd.read_csv(\"..\/input\/train\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test\/test.csv\")\n# Any results you write to the current directory are saved as output.\nanimals.head(3)","b7dcddb3":"animals.describe()","cb634cc5":"animalsBySpeed = animals.groupby(['AdoptionSpeed']).size().reset_index(name='Count')\ndataToPlot = pd.DataFrame({'Percentage': pd.Series(animalsBySpeed.apply(lambda row: row['Count']\/len(animals),axis=1), index=animalsBySpeed.index)})\ndataToPlot.set_index([['Same Day','1st week','1st Month','2nd & 3rd Month','Other']], inplace=True)\ndataToPlot","0ed4605e":"dataToPlot.plot.pie(y='Percentage', figsize=(10,10))","bfa40fca":"animalsByType = animals.groupby(['Type']).size().reset_index(name='Count')\nanimalsByType.plot.barh(y='Count',x='Type')","bf997cb0":"animals['Age'].corr(animals['AdoptionSpeed'])","400a57c2":"corr = animals.corr()\n# plot the heatmap\nf, ax = plt.subplots(figsize=(11, 9))\nsns.heatmap(corr, xticklabels=corr.columns, yticklabels=corr.columns, linewidths=.5, square=True)","6f7c3090":"animalsBow = animals._get_numeric_data()\ndistortions = []\nK = range(1,10)\nfor k in K:\n    kmeanModel = KMeans(n_clusters=k).fit(animalsBow)\n    kmeanModel.fit(animalsBow)\n    distortions.append(sum(np.min(cdist(animalsBow, kmeanModel.cluster_centers_, 'euclidean'), axis=1)) \/ animalsBow.shape[0])\n\n# Plot the elbow\nplt.plot(K, distortions, 'bx-')\nplt.xlabel('k')\nplt.ylabel('Distortion')\nplt.title('The Elbow Method showing the optimal k')\nplt.show()","6ee0e4bd":"features = animals[['Age', 'MaturitySize', 'FurLength', 'Quantity', 'Fee', 'VideoAmt', 'PhotoAmt', 'AdoptionSpeed']]\nkmeans = KMeans(n_clusters = 6).fit_predict(features)\nrows, cols = features.shape\nfig, axs = plt.subplots(cols, cols,figsize=(50, 50))\nfor i in range(0, cols):\n    for j in range(0, cols):\n        if j != i:\n            axs[i, j].scatter(features.iloc[:,i], features.iloc[:,j], c=kmeans)\n            axs[i,j].set(xlabel=features.columns[i],ylabel=features.columns[j])\nplt.show()","fe081f59":"#features = animals.drop(['Name', 'RescuerID', 'PetID', 'Description', 'Quantity', 'Vaccinated', 'AdoptionSpeed'], axis=1)\nfeatures = animals[['Age', 'MaturitySize', 'FurLength', 'Quantity', 'Fee', 'VideoAmt', 'PhotoAmt']]\nspeed = animals[['AdoptionSpeed']]\nclassifier = tree.DecisionTreeClassifier().fit(features, speed)\ncleaned_test = test[['Age', 'MaturitySize', 'FurLength', 'Quantity', 'Fee', 'VideoAmt', 'PhotoAmt']]\n#cleaned_test = test.drop(['Name', 'RescuerID', 'PetID', 'Description', 'Quantity', 'Vaccinated'], axis=1)\nprediction = classifier.predict(cleaned_test)\nprediction","ece18353":"graph_data = tree.export_graphviz(classifier, out_file=None, max_depth=5)\ngraph = gv.Source(graph_data)\ngraph","e2d833a9":"result = test[['PetID']].assign(AdoptionSpeed=pd.Series(prediction))\nresult.to_csv('submission.csv', index=False)","2f9bf7df":"myvar = animals[['Dewormed','Vaccinated','Sterilized','Fee']].copy()\nmyvar['Total'] = myvar.sum(axis=1)\ncorr = myvar.corr()\n# plot the heatmap\nf, ax = plt.subplots(figsize=(11, 9))\nsns.heatmap(corr, xticklabels=corr.columns, yticklabels=corr.columns, linewidths=.5, square=True)","731cd3e9":"myvar['Total'].corr(myvar['Fee'])","87b975fd":"fig, axs = plt.subplots(2, 1)\n\n#Con datos del dataset train\n#data_x = myvar.drop('Fee', axis=1)\ndata_x = myvar[['Total']].copy()\ndata_y = myvar[['Fee']].copy()\ntrain_x, test_x, train_y, test_y = train_test_split(data_x, data_y, test_size=0.3, random_state=42)\nlm = LinearRegression()\nlm.fit(train_x, train_y)\npred = lm.predict(test_x)\naxs[0].scatter(test_y, pred)\nprint('Puntuaci\u00f3n usando train:', model_score(test_y, pred))\n#Con datos del dataset test\nlm2 = LinearRegression()\nlm2.fit(data_x, data_y)\nreal_test = test[['Dewormed','Vaccinated','Sterilized']].copy()\nreal_test['Total'] = real_test.sum(axis=1)\npred2 = lm2.predict(real_test[['Total']].copy())\naxs[1].scatter(test[['Fee']], pred2, color='red')\nprint('Puntuaci\u00f3n usando test:', model_score(test[['Fee']], pred2))\n","2fd53074":"animals2 = animals._get_numeric_data()\nx_train, x_test = train_test_split(animals2, test_size=0.3, random_state=1)\ngnb = bayes_model()\nused_features = list(animals2)[:len(list(animals2))-2]\nprint(used_features)\n# Train classifier\ngnb.fit(\n    x_train[used_features].values,\n    x_train[\"AdoptionSpeed\"]\n)\npred = gnb.predict(x_test[used_features])\nprint('Puntuaci\u00f3n usando test:', model_score(x_test['AdoptionSpeed'], pred))\nprint(classification_report(x_test['AdoptionSpeed'], pred))\nprint(confusion_matrix(x_test['AdoptionSpeed'], pred))","6da5ebfb":"lambdafunc = lambda x: pd.Series([1 if x['AdoptionSpeed']==0 else 0,1 if x['AdoptionSpeed']==1 else 0, 1 if x['AdoptionSpeed']==2 else 0, 1 if x['AdoptionSpeed']==3 else 0, 1 if x['AdoptionSpeed']==4 else 0])\nanimals[['var0','var1', 'var2', 'var3','var4']] = animals.apply(lambdafunc, axis=1)\ncategoric_animals = animals.drop(['Name', 'Description', 'PetID', 'RescuerID', 'VideoAmt', 'State', 'Vaccinated', 'Quantity'], axis=1)\ncategoric_animals.head()","a5b3e3ec":"no_var_animals = categoric_animals.drop(['var0', 'var1', 'var2', 'var3', 'var4', 'AdoptionSpeed'], axis=1)\nvar_animals = categoric_animals[['var0', 'var1', 'var2', 'var3', 'var4', 'AdoptionSpeed']].copy() #AdoptionSpeed se omitir\u00e1 m\u00e1s adelante\n\nx_train, x_test, y_train, y_test = train_test_split(no_var_animals, var_animals, test_size=0.20, random_state=114)\n\nvar_col_names = var_animals.columns.values\nvar_col_names = var_col_names[0: len(var_col_names)-1] #Se borra AdoptionSpeed de los nombres de las columnas sobre las que se correra el algoritmo\n\nall_predictions = pd.DataFrame()\nfor col in var_col_names:  \n    lg = LogisticRegression(solver='liblinear')\n    lg.fit(x_train, y_train[[col]].values.ravel())\n    prediction = lg.predict_proba(x_test)\n    all_predictions[col] = pd.Series(np.array(prediction)[:, 1])\n    \ndef bigger_probability(row):\n    selected = 0\n    for i in range(1, len(row)):\n        if row[i] > row[selected]:\n            selected = i\n    return selected\n\nresult = all_predictions.apply(lambda x: bigger_probability(x), axis=1).values\n\nscore = accuracy_score(y_test['AdoptionSpeed'], result)\ncm = confusion_matrix(y_test['AdoptionSpeed'], result)\n\nplt.figure(figsize=(5,5))\nsns.heatmap(cm, annot=True, fmt=\".1f\", linewidths=.5, square = True, cmap = 'Oranges');\nplt.ylabel('Categor\u00edas Reales');\nplt.xlabel('Categor\u00edas Predichas');\ntitle = 'Precisi\u00f3n: {}'.format(round(score, 3))\nplt.title(title, size = 15);","99db489e":"* Type\u00a0- Type of animal (1 = Dog, 2 = Cat)\n* Name\u00a0- Name of pet (Empty if not named)\n* Age\u00a0- Age of pet when listed, in months\n* Breed1\u00a0- Primary breed of pet (Refer to BreedLabels dictionary)\n* Breed2\u00a0- Secondary breed of pet, if pet is of mixed breed (Refer to BreedLabels dictionary)\n* Gender\u00a0- Gender of pet (1 = Male, 2 = Female, 3 = Mixed, if profile represents group of pets)\n* Color1\u00a0- Color 1 of pet (Refer to ColorLabels dictionary)\n* Color2\u00a0- Color 2 of pet (Refer to ColorLabels dictionary)\n* Color3\u00a0- Color 3 of pet (Refer to ColorLabels dictionary)\n* MaturitySize\u00a0- Size at maturity (1 = Small, 2 = Medium, 3 = Large, 4 = Extra Large, 0 = Not Specified)\n* FurLength\u00a0- Fur length (1 = Short, 2 = Medium, 3 = Long, 0 = Not Specified)\n* Vaccinated\u00a0- Pet has been vaccinated (1 = Yes, 2 = No, 3 = Not Sure)\n* Dewormed\u00a0- Pet has been dewormed (1 = Yes, 2 = No, 3 = Not Sure)\n* Sterilized\u00a0- Pet has been spayed \/ neutered (1 = Yes, 2 = No, 3 = Not Sure)\n* Health\u00a0- Health Condition (1 = Healthy, 2 = Minor Injury, 3 = Serious Injury, 0 = Not Specified)\n* Quantity\u00a0- Number of pets represented in profile\n* Fee\u00a0- Adoption fee (0 = Free)\n* State\u00a0- State location in Malaysia (Refer to StateLabels dictionary)\n* RescuerID\u00a0- Unique hash ID of rescuer\n* VideoAmt\u00a0- Total uploaded videos for this pet\n* Description\u00a0- Profile write-up for this pet. The primary language used is English, with some in Malay or Chinese.\n* PetID - Unique hash ID of pet profile\n* PhotoAmt\u00a0- Total uploaded photos for this pet\n* AdoptionSpeed\u00a0- Categorical speed of adoption. Lower is faster. This is the value to predict. See below section for more info.","7e50fd37":"**Agrupaci\u00f3n con K-Medias:**","401ff74d":"**Naive Bayes:**","090e3482":"En la base de datos que posee PetFinder hay m\u00e1s caninos que feninos","5c5d5b77":"Suponiendo que las personas prefieren animales m\u00e1s jovenes para adoptar, esto parece que no sucede en PetFinder donde existen mascotas con menos de un mes hasta mascotas con m\u00e1s 20 a\u00f1os.","ccbd59f1":"Utilizando la suma de las variables **Dewormed**, **Vaccinated** y **Sterilized** para predecir los valores de la variable **Fee** en un modelo de regresi\u00f3n lineal, se observ\u00f3 un caso de *Overfitting*. Como se puede observar en la secci\u00f3n anterior, entrenando el modelo con una porci\u00f3n del dataset \"train\" y utilizando el resto para realizar la predicci\u00f3n se obtuvo un puntaje de 0.99 (valor obtenido al utilizar la funci\u00f3n R^2 sobre la predicci\u00f3n y los valores reales). En contraste, al usar todo el dataset \"train\" para entrenar el modelo y el dataset \"test\" para realizar las predicciones, se obtuvo un puntaje de -0.103, lo cual muestra que el modelo no funciona al utilizar datos totalmente ajenos a los datos de entrenamiento.","61ed781c":"Se crean variables \"dummy\" para cada valor del AdoptionSpeed y se eliminan las columnas innecesarias (encontradas en an\u00e1lisis anteriores).","f3413f20":"Para cada columna de las variables \"dummy\" se correr\u00e1 el algoritmo de regresi\u00f3n log\u00edstica para encontrar la probabilidad de que una fila pertenezca a una categor\u00eda de AdoptionSpeed. Luego se proceder\u00e1 a asignarle a cada fila del set de pruebas, el valor que representa a la categor\u00eda con mayor probabilidad para dicha fila.","4d919a12":"Tipos de Variables\nCualitativas:\n* Type\n* Name\n* Breed1\n* Breed2\n* Gender\n* Color1\n* Color2\n* Color3\n* Vaccinated\n* Dewormed\n* Sterilized\n* State\n* RescuerID\n* Description\n* PetID\n\nCuantitativas\n* MaturitySize\n* FurLength\n* Helmuth\n* Quantity\n* Fee\n* VideoAmt\n* PhotoAmt\n* AdoptionSpeed","91be0732":" **Predicci\u00f3n usando un \u00e1rbol de decisiones:**","8b5cf932":"**Predicci\u00f3n de la variable *Fee* utilizando un modelo de Regresi\u00f3n Lineal:**","00e67d52":"**Regresi\u00f3n log\u00edstica**","4355ef95":"La precisi\u00f3n del modelo fue de 0.169, por lo que se concluye que el modelo basado en un \u00e1rbol de decisiones con las variables utilizadas no es nada eficaz.","d77b7521":"Como se puede ver en la puntuaci\u00f3n del modelo usando el test de R^2 y en el reporte de clasificaci\u00f3n, el modelo de bayes tampoco fue eficaz para la predicci\u00f3n de la velocidad de adopci\u00f3n.","79bb4922":"**Grafica de Codo:**","167b9f16":"Como se observa en la precisi\u00f3n final, el algoritmo de regresi\u00f3n log\u00edstica result\u00f3 ser mucho m\u00e1s efectivo para este set de datos, siendo esta de un 33.8%. Esto se debe principalmente a la naturaleza de la mayor\u00eda de las columnas del dataset, las cuales son categ\u00f3ricas. Sin embargo, se debe mencionar que por la misma raz\u00f3n, las m\u00e9tricas utilizadas para medir el desempe\u00f1o de este algoritmo fueron distintas a las del resto. Por lo que para poder comparar este algoritmo con el resto, es necesario cambiar los procedimientos utilizados en los anteriores.","ac3ea22e":"Al realizar la grafica codo se considera utilizar 6 para cantidad de grupos del cluster","fbe12dac":"Luego de obtener el resultado se busc\u00f3 correlaci\u00f3n significativa para las dem\u00e1s variables pero unicamente existe esta para las variables Vaccinated, Dewormed, Sterilzed.","5eb3cf9a":"Se consider\u00f3 si difer\u00eda la cantidad de adopciones seg\u00fan el tiempo que la mascota teniene sin ser adoptada. Con los datos anteriores solo se puede afirmar que las mascotas con m\u00e1s de 3 meses poseen menos probabilidad de ser adoptadas."}}