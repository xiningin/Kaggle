{"cell_type":{"eaae238b":"code","df2121dd":"code","3bc77791":"code","f7fc81d6":"code","e1ea2dde":"code","e3fabf36":"code","e485acb0":"code","15c166df":"code","c5c4bcfd":"code","50b0f685":"code","e5a32118":"code","76cb32fa":"markdown","83ef6028":"markdown","24b48bec":"markdown","b605f353":"markdown","b9dba892":"markdown"},"source":{"eaae238b":"import pandas as pd\nimport numpy as np\nfrom tqdm.notebook import tqdm\nfrom sklearn.tree import DecisionTreeClassifier","df2121dd":"print(\"Pandas version:\", pd.__version__)\nprint(\"NumPy version:\", np.__version__)\nimport sklearn; print(\"scikit-learn version:\", sklearn.__version__); del sklearn","3bc77791":"train = pd.read_csv(\"..\/input\/1056lab-diabetes-readmission-prediction\/train.csv\", index_col=0)\ntest = pd.read_csv(\"..\/input\/1056lab-diabetes-readmission-prediction\/test.csv\", index_col=0)\ntarget = train[\"readmitted\"].copy()\ntrain.drop(\"readmitted\", axis=1, inplace=True)","f7fc81d6":"def one_hot(train: pd.DataFrame, test: pd.DataFrame, col: str=\"race\", prefix: str=\"race\", drop:bool=True):\n    _full = pd.concat([train, test], axis=0)\n    train_inds = len(train)\n    \n    dummy = pd.get_dummies(_full[col], prefix=prefix, drop_first=True, dtype=np.int16)\n    _full = _full.merge(dummy, left_index=True, right_index=True)\n    \n    if drop:\n        _full.drop(col, axis=1, inplace=True)\n    \n    return _full.iloc[: train_inds], _full.iloc[train_inds: ]","e1ea2dde":"objs = [col for col, typ in zip(train.columns, train.dtypes) if typ == object]\n\nfor col in tqdm(objs):\n    train, test = one_hot(train, test, col=col, prefix=col)","e3fabf36":"from sklearn.metrics import cohen_kappa_score, make_scorer\n\ndef qwk(y_true, y_pred):\n    return cohen_kappa_score(y_true, y_pred, weights=\"quadratic\")\n\nqwk_scorer = make_scorer(qwk)","e485acb0":"from sklearn.model_selection import cross_validate\n\ncross_validate(DecisionTreeClassifier(random_state=0),\n              train, target, scoring=qwk_scorer, cv=5)[\"test_score\"].mean()","15c166df":"X = train.values\ny = target.values\nX_test = test.values","c5c4bcfd":"model = DecisionTreeClassifier(random_state=0).fit(X, y)","50b0f685":"pred = model.predict(X_test)","e5a32118":"submit = pd.read_csv(\"..\/input\/1056lab-diabetes-readmission-prediction\/sampleSubmission.csv\", index_col=0)\nsubmit[target.name] = pred\nsubmit.to_csv(\"submit.csv\")","76cb32fa":"# Define QWK\n\nreference: https:\/\/www.kaggle.com\/c\/data-science-bowl-2019\/discussion\/114539","83ef6028":"# Training","24b48bec":"# Submit","b605f353":"# One-Hot Vectorize","b9dba892":"# Predict"}}