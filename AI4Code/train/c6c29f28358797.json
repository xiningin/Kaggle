{"cell_type":{"785491d2":"code","d77eab77":"code","839d7f9e":"code","a8e09f3a":"code","872cb448":"code","1a42e0da":"code","94ab0e71":"code","0fe8faa7":"code","dbe0c4f6":"code","db6412aa":"code","d2db57f8":"code","953b5e26":"code","a9f0bccb":"code","b8718729":"code","330a4c80":"code","c86e11bb":"code","fa588c0c":"code","dfa6eca4":"code","abcd86c7":"code","46eb0175":"code","e86193ef":"code","32c66d57":"code","c47c1300":"code","6e4adce0":"code","ebaa2239":"code","cb8114f8":"code","e56beb93":"markdown","cb84cc36":"markdown","17148179":"markdown","c848ed4f":"markdown","9191e865":"markdown"},"source":{"785491d2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport sklearn\nimport re\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import preprocessing\nfrom sklearn.datasets import make_classification\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import (RandomTreesEmbedding, RandomForestClassifier,\n                              GradientBoostingClassifier)\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_curve\nfrom sklearn.pipeline import make_pipeline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d77eab77":"df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf.tail()","839d7f9e":"df.describe()","a8e09f3a":"df['Sex'] = df['Sex'].astype('category')\ndf['Pclass'] = df['Pclass'].astype('category')\ndf['Embarked'] = df['Embarked'].astype('category')\ndf['Survived'] = df['Survived'].astype('bool')\ndf['Age'] = df['Age'].astype('float16')\ndf['SibSp'] = df['SibSp'].astype('int64')\ndf.info()","872cb448":"# Split the Title of people and find to replace some titles.\ndf['Title'] = df.Name.apply(lambda x: re.search(' ([A-Z][a-z]+)\\.', x).group(1))\nsns.countplot(x='Title', data=df)\nplt.xticks(rotation=90);","1a42e0da":"# replace titles\ndf['Title'] = df['Title'].replace({'Mlle':'Miss','Mme':'Miss','Ms':'Miss'})\ndf['Title'] = df['Title'].replace(['Don','Rev','Dr','Major','Lady','Sir','Col','Capt','Countess','Jonkheer'],'Other')\nsns.countplot(x='Title', data=df);","94ab0e71":"df['Cabin_Class'] = df.Cabin.str[0]","0fe8faa7":"df['Cabin_Class'].value_counts()","dbe0c4f6":"sns.countplot(x='Cabin_Class', data=df);","db6412aa":"# Something about Cabins. Has or not?\n# df['Has_Cabin'] = ~df.Cabin.isnull()\n# sns.countplot(df['Has_Cabin'])\n# df.head()","d2db57f8":"# Drop unused columns\ndf.drop(['Name','Cabin', 'Ticket'], axis=1, inplace=True)","953b5e26":"# View info about preparated dataset. We found vissing values in columns Age and Embarked\ndf.info()","a9f0bccb":"# We fill NaN values in the columns\ndf['Age'] = df['Age'].fillna(df['Age'].median())\ndf['Embarked'] = df['Embarked'].fillna('S')\ndf['Cabin_Class'] = df['Cabin_Class'].fillna(0)\ndf.info()","b8718729":"# Split numerical data to the quantiles\ndf['Age_cat'] = pd.qcut(df['Age'], q=4, labels=False)\ndf['Fare_cat'] = pd.qcut(df['Fare'], q=4, labels=False)\ndf.head()","330a4c80":"df.drop(['Age', 'Fare'], axis=1, inplace=True)\ndf.head()","c86e11bb":"# Number of family members on board\ndf['Family_size'] = df.SibSp + df.Parch\ndf.head()","fa588c0c":"df.drop(['SibSp','Parch'], axis=1)\ndf.head()","dfa6eca4":"# Transform variables and category data to numeric data for ML\ndff = pd.get_dummies(df, drop_first=True)\ndff.head()","abcd86c7":"#Split dataset to features and target values\nX = dff.drop('Survived',axis=1)\ny = dff['Survived']","46eb0175":"from sklearn import tree\nfrom sklearn.model_selection import GridSearchCV\n\n# Setup parameters\ndep = np.arange(1,9)\nparam_grid = {'max_depth' : dep}\n\n# load a decision tree classifier\n\nclf = tree.DecisionTreeClassifier()\n\nclf_cv = GridSearchCV(clf, param_grid=param_grid,cv=10)\n\n# Fit it to the data\n\nclf_cv.fit(X, y)\n\nprint('Tuned Decision Tree Parameters: {}'.format(clf_cv.best_params_))\nprint('Best score is {}'.format(clf_cv.best_score_))","e86193ef":"predict_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\npredict_df['Sex'] = predict_df['Sex'].astype('category')\npredict_df['Pclass'] = predict_df['Pclass'].astype('category')\npredict_df['Embarked'] = predict_df['Embarked'].astype('category')\npredict_df['Age'] = predict_df['Age'].astype('float16')\npredict_df['SibSp'] = predict_df['SibSp'].astype('int64')\npredict_df['Title'] = predict_df.Name.apply(lambda x: re.search(' ([A-Z][a-z]+)\\.', x).group(1))\npredict_df['Title'] = predict_df['Title'].replace({'Mlle':'Miss','Mme':'Miss','Ms':'Miss'})\npredict_df['Title'] = predict_df['Title'].replace(['Don','Dona','Rev','Dr','Major','Lady','Sir','Col','Capt','Countess','Jonkheer'],'Other')\npredict_df['Cabin_Class'] = predict_df.Cabin.str[0]\npredict_df.drop(['Name','Cabin', 'Ticket'], axis=1, inplace=True)\npredict_df['Age'] = predict_df['Age'].fillna(predict_df['Age'].median())\npredict_df['Embarked'] = predict_df['Embarked'].fillna('S')\npredict_df['Cabin_Class'] = df['Cabin_Class'].fillna(0)\npredict_df['Fare'] = predict_df['Fare'].fillna(predict_df['Fare'].median())\npredict_df['Age_cat'] = pd.qcut(predict_df['Age'], q=4, labels=False)\npredict_df['Fare_cat'] = pd.qcut(predict_df['Fare'], q=4, labels=False)\npredict_df.drop(['Age', 'Fare'], axis=1, inplace=True)\npredict_df['Family_size'] = predict_df.SibSp + predict_df.Parch\npredict_df.drop(['SibSp','Parch'], axis=1)\npredict_dff = pd.get_dummies(predict_df, drop_first=True)\npredict_dff.head()","32c66d57":"y_predict = clf_cv.predict(predict_dff)\npredict_dff['Survived'] = y_predict","c47c1300":"predict_dff['PassengerId'] = predict_df['PassengerId']","6e4adce0":"predict_dff['Survived'] = predict_dff['Survived'].astype(np.int8) ","ebaa2239":"predict_dff","cb8114f8":"predict_dff[['PassengerId', 'Survived']].to_csv('Titanic_passenger_predict.csv', index=False)","e56beb93":"# Predict","cb84cc36":"# Import and view the DataFrame","17148179":"# Split dataset to features and target values","c848ed4f":"# Clearing data","9191e865":"# Transform dataset"}}