{"cell_type":{"5978cbe3":"code","b6548552":"code","0f7e1c49":"code","915ba8fa":"code","8d3931cd":"code","1a4f7c06":"code","ecdcb438":"code","824a665d":"code","4b51741e":"code","16ce0c0c":"code","ec573503":"code","4ed3d511":"code","2a503fe6":"code","0e5acb21":"code","3cb6fd0a":"code","b83c25aa":"code","13385c97":"code","152de1f2":"code","d963460c":"code","1c393a16":"code","79fc398d":"code","5de30d83":"code","8b97fed2":"code","46ed791c":"code","539ce982":"code","48528a40":"code","247b7e3f":"code","c6a0efc5":"code","dc20f4c6":"code","287581a7":"code","5420ab7a":"code","3d86a722":"code","2e6b2f01":"code","7bb47f64":"code","f14f7892":"code","cee22202":"code","82f6c2ed":"code","d7f3a1c4":"code","b6adf77b":"code","d0737419":"code","3e449385":"code","3fbb7111":"code","28a477e5":"code","45bf3916":"code","e702752b":"code","eb375cd2":"code","3b1bdc1a":"code","338cb9a5":"code","6d77bf63":"code","a73e2c4a":"code","5911792c":"code","286d0767":"code","737c49ac":"code","77b76050":"code","72227951":"code","747ef8b9":"code","fcdd341c":"code","6dd73742":"code","f174556b":"code","fef0ef04":"code","26838257":"code","962c9d16":"code","f0eccf96":"code","26689876":"code","6e6cc730":"code","4705293c":"code","a6386f90":"code","5e06f390":"code","551bc8b7":"code","ae3fabc8":"code","86a257f9":"code","9e8d0b5b":"code","4e56348a":"code","60294cfa":"code","45369ec7":"code","38a08001":"code","10cccc41":"code","ea67b71c":"code","a6a4cc2a":"code","3d651eb1":"code","d495eaca":"code","e61be918":"code","bae1990b":"code","145b8e08":"code","c1688593":"code","1afb52bc":"code","ce650171":"code","1dc1c0e1":"code","41ba8754":"code","22873cf4":"code","4bdc7dda":"code","ad3f1b44":"code","9b6dd4ea":"code","253530bf":"code","b7e593af":"code","02a04575":"code","10337afc":"code","6e44f493":"code","cf5324f5":"code","c3b03d10":"code","645a95c6":"code","162ea7a9":"code","82936bdd":"code","63bc7879":"code","1a0e2190":"code","113c3e03":"code","7549360d":"code","53fe6e6e":"code","c54da7df":"code","2ea5db34":"code","822400e7":"code","776cbae2":"code","3c358a61":"code","5bbb06c4":"code","f60b95f7":"code","95a1e9ba":"code","22c74159":"code","0d12515b":"code","23a71479":"code","9b611deb":"code","04c6f64b":"code","212c09e2":"code","f6f7cc60":"code","1078fec4":"code","4a277243":"code","f3419cb6":"markdown","76a55b55":"markdown","ac02c9ba":"markdown","96ff3a16":"markdown","f9043d7b":"markdown","19935c9b":"markdown","63d3eda8":"markdown","f4ec67d9":"markdown","90b671eb":"markdown","cb521bce":"markdown","eb742576":"markdown","9ecf5893":"markdown","5ffed98b":"markdown","13989b69":"markdown","ab16f7a4":"markdown","3d9db3b3":"markdown","362bdfae":"markdown","1dac95b4":"markdown","4d14326a":"markdown","c885cdb5":"markdown","27fb070f":"markdown","31fa66e7":"markdown","68a83de0":"markdown","f92f622e":"markdown","8d25db6e":"markdown","64871dfc":"markdown","db6e39f7":"markdown","40d70cd0":"markdown","afb61f06":"markdown","8b5b7b6f":"markdown","5df6c4f7":"markdown","998727fd":"markdown","de3e9452":"markdown","6d5f8440":"markdown","4fa32a5a":"markdown","e8a7313d":"markdown","0f54a551":"markdown","3a583872":"markdown","bd48bfb5":"markdown","904556a5":"markdown","d2a1bba9":"markdown","38466d1b":"markdown","416a1cf5":"markdown","595095db":"markdown","69fa61d0":"markdown","73b5f67c":"markdown","edc09eec":"markdown","a4cee99e":"markdown","a96082b6":"markdown","c6566d9e":"markdown","6b3c07d3":"markdown","49488898":"markdown","eefb0d73":"markdown","97740a52":"markdown","7fbaac1d":"markdown","2cae8c1b":"markdown","79305287":"markdown","ca319e48":"markdown","67eb5fcf":"markdown","d8653195":"markdown","a52e8e5e":"markdown","36145483":"markdown","0a593bc7":"markdown","0d3ad398":"markdown","a6fb12e9":"markdown","eeb9da22":"markdown","1074ac75":"markdown","fa05b603":"markdown","5419b227":"markdown","73d2671d":"markdown","063b46c5":"markdown","c88c9f5a":"markdown","3f08fa1b":"markdown","21cccb1e":"markdown","becefcf9":"markdown","63baad6d":"markdown","84ff70a5":"markdown","ac459461":"markdown","d026bbc2":"markdown","02f8eda5":"markdown","115107e1":"markdown","ef4a4810":"markdown","efa8a4cf":"markdown","2684e405":"markdown","586a95eb":"markdown","d4aae6f4":"markdown","0e71ff5e":"markdown","7112a924":"markdown","53db4d8d":"markdown","05748ec1":"markdown","ae20a971":"markdown","875bdb46":"markdown","5ac12d52":"markdown","bef32982":"markdown","048fa784":"markdown","f0d92cc4":"markdown","a5e483fd":"markdown","86d00d3a":"markdown","bb8fc6fb":"markdown","43404252":"markdown","46a0b049":"markdown","ce790226":"markdown","9ae553ff":"markdown","b5240826":"markdown","cf01a628":"markdown","921e6c7d":"markdown","0c5da739":"markdown","1ba72b2f":"markdown","789d44d8":"markdown","52231f6d":"markdown","4d6f3340":"markdown","f1c264a0":"markdown","218889dd":"markdown","405c6627":"markdown","70a7d954":"markdown","1a0bf8ca":"markdown","504a752f":"markdown","d9860568":"markdown","37e47c06":"markdown","9fe15b83":"markdown","f5c1c298":"markdown","0ab8b837":"markdown","b6bfd982":"markdown","7ac663dd":"markdown","9b83a77b":"markdown","b73cd6dc":"markdown","21f5e4e7":"markdown"},"source":{"5978cbe3":"print(\"Hello word\")","b6548552":"print(\"Muhammad\",\"Mazhar\")","0f7e1c49":"# Integer\na = 2\nprint(a)\n# Output: 2\n","915ba8fa":"# Integer\nb = 9223372036854775807\nprint(b)\n# Output: 9223372036854775807\n","8d3931cd":"# Floating point\npi = 3.14\nprint(pi)\n# Output: 3.14","1a4f7c06":"# String\nc = 'A'\nprint(c)\n# Output: A","ecdcb438":"# String\nc = \"A\"\nprint(c)\n# Output: A","824a665d":"# Boolean\nq = True\nprint(q)\n# Output: True","4b51741e":"# Empty value or null data type\nx = None\nprint(x)\n# Output: None","16ce0c0c":"import keyword\nprint(keyword.kwlist)","ec573503":"x = True # valid\n_y = True # valid","4ed3d511":"9x = False # starts with numeral\n=> SyntaxError: invalid syntax","2a503fe6":"$y = False # starts with symbol\n=> SyntaxError: invalid syntax","0e5acb21":"has_0_in_it = \"Still Valid\"\nprint(has_0_in_it)","3cb6fd0a":"x = 9\ny = X*5\n#=>NameError: name 'X' is not defined","b83c25aa":"a = 2\nprint(type(a))\n# Output: <class 'int'>","13385c97":"b = 9223372036854775807\nprint(type(b))\n# Output: <class 'int'>","152de1f2":"pi = 3.14\nprint(type(pi))\n# Output: <class 'float'>","d963460c":"c = 'A'\nprint(type(c))\n# Output: <class 'str'>","1c393a16":"name = 'John Doe'\nprint(type(name))\n# Output: <class 'str'>","79fc398d":"q = True\nprint(type(q))\n# Output: <class 'bool'>","5de30d83":"x = None\nprint(type(x))\n# Output: <class 'NoneType'>","8b97fed2":"a, b, c = 1, 2, 3\nprint(a, b, c)\n# Output: 1 2 3","46ed791c":"a, b, c = 1, 2, 3 ,5\nprint(a, b, c)\n# Output: 1 2 3","539ce982":"a, b, c = 1, 2\nprint(a, b, c)\n# Output: 1 2 3","48528a40":"a, b, _ = 1, 2, 3\nprint(a, b)\n# Output: 1, 2","247b7e3f":"a, b, _ = 1,2,3,4","c6a0efc5":"a = b = c = 1\nprint(a, b, c)","dc20f4c6":"a = b = c = 1 # all three names a, b and c refer to same int object with value 1\nprint(a, b, c)\n# Output: 1 1 1\nb = 2 # b now refers to another int object, one with a value of 2\nprint(a, b, c)\n# expected Output: 1 2 1 # so output is as expected.\n","287581a7":"x = y = [7, 8, 9] # x and y refer to the same list object just created, [7, 8, 9]\nx = [13, 8, 9] # x now refers to a different list object just created, [13, 8, 9]\nprint(y) # y still refers to the list it was first assigned\n# Output: [7, 8, 9]\n","5420ab7a":"x = [1, 2, [3, 4, 5], 6, 7] # this is nested list\nprint(x[2])\n# Output: [3, 4, 5]\nprint(x[2][1])\n# Output: 4","3d86a722":"a = 2\nprint(a)\n# Output: 2","2e6b2f01":"a=\"Muhammad Mazhar\" # now a data type chaged to str\nprint(a)","7bb47f64":"def my_function(): # This is a function definition. Note the colon (:)\n    a = 2 # This line belongs to the function because it's indented\n    return a # This line also belongs to the same function\nprint(my_function()) # This line is OUTSIDE the function block","f14f7892":"def my_function(): # This is a function definition. Note the colon (:)\na = 2 # This line belongs to the function because it's indented\nreturn a # This line also belongs to the same function\nprint(my_function()) # This line is OUTSIDE the function block","cee22202":"# This code will throgh a exception\na =5;\nb=10;\nif a > b: # If block starts here\nprint(a) # This is part of the if block\nelse: # else must be at the same level as if\nprint(b) # This line is part of the else block\n","82f6c2ed":"# this will work fine\na =5;\nb=10;\nif a > b: # If block starts here\n    print(a) # This is part of the if block\nelse: # else must be at the same level as if\n    print(b) # This line is part of the else block","d7f3a1c4":"#It works fine \na,b=3,4\nif a > b: print(a)\nelse: print(b)","b6adf77b":"# this code will through an exception\na,b=2,3\nif x > y: y = x\nprint(y) # IndentationError: unexpected indent\nif x > y: while y != z: y -= 1 # SyntaxError: invalid syntax","d0737419":"# this will through exception\ndef do_someting():","3e449385":"#It will works fine\ndef do_something():\n    pass","3fbb7111":"x=True\nprint(x)","28a477e5":"x=False\nprint(x)","45bf3916":"x,y =True,False\nprint(x or y) # if x is False then y otherwise x ,Print True\nprint(x and y) # if x is False then x otherwise y ,Print False\nprint(not x) # if x is True then False, otherwise True ,Print False","e702752b":"issubclass(bool, int) # True\nisinstance(True, bool) # True\nisinstance(False, bool) # True","eb375cd2":"result = True + False # 1 + 0 == 1\nprint(result)\nresult =True * True # 1 * 1 == 1\nprint(result)\nresult =False * True # 0 * 1 == 0\nprint(result)\n","3b1bdc1a":"a = 2\n\nb = 100\nc = 123456789\nd = 38563846326424324\n","338cb9a5":"d =839475723854568453940958476459638459057486754769456 \ntype(d)","6d77bf63":"a = 2.0\nprint(a)\nb = 100.e2\nprint(b)\nc = 123456789.e5 # e5 represent add 5 zeros before .(point) of that number\nprint(c)","a73e2c4a":"a = 3 + 1j\nb = 100 + 10j\nprint(a+b) # add real with real part and imginary with  imaginary part\nprint(a-b) # sub real from real part and imginary from  imaginary part\nprint(a*b) # Multiply a with b according Complex number multiplication rules.","5911792c":"a = 3 + 1j\nb = 100 + 10j\na>b","286d0767":"a = 3 + 1j\nb = 100 + 10j\na >= b","737c49ac":"# ==  operator is supported in complex numbers\na = 3 + 1j\nb = 100 + 10j\na == b","77b76050":"ustring ='hello'\nprint(ustring)\n\nbstring =b'hello'\nprint(bstring)\ntype(bstring) # print bytes\ntype(ustring) # str","72227951":"a = reversed('hello')\nprint(a)\na='Hello World'\nprint(a)\nreversed(a)\nprint(a)","747ef8b9":"a= (1,\"3\",\"4,\",\"hello\")\nprint(a)","fcdd341c":"## typles can't be chaged \na[2]=\"new Values\" ## through an error","6dd73742":"a =[3,4,6,\"test\",'a']\nprint(a)","f174556b":"a[3] =\"new value\"\nprint(a)","fef0ef04":"a ={2,3,4,5,3,'e'}\nprint(a)","26838257":"## set is not mutable\na[2]=20\nprint(a)","962c9d16":"a = {1,1,1,3,4,4} ## dublicate values will be removed\nprint(a)","f0eccf96":"countries ={\"pk\":\"pakistan\",\"afg\":\"afganstan\",\"en\":'England'}\nprint(countries)","26689876":"countries[\"pk\"]","6e6cc730":"countries[\"pk\"]= \"Pakistan Updated\" ## allow change value\ncountries","4705293c":"## string to int\na ='656'\nb= int(a)\ntype(b)\n## print int\n## float to int \nx= 456.75665;\ny= int(x)\ntype(y)\n## print y\n","a6386f90":"## converting from float string to float can be done using float function\na = '123.456'\nb = float(a)\ntype(b)","5e06f390":"c = int(a) # ValueError: invalid literal for int() with base 10: '123.456'\nd = int(b)\ntype(d)","551bc8b7":"a ='hello word'\nlst= list(a)\nprint(lst)\nst = set(a)\nprint(st)\ntpl = tuple(a)\nprint(tpl)","ae3fabc8":"x= [3,4,5,6,7,6]\nx[4]= 'new value' ## This is a mutation","86a257f9":"x= (a,3,4,5)\nx[2]= 10 ## will not allow","9e8d0b5b":"list_of_countries = ['pakistan','india','england','napal','america']\nprint(list_of_countries) ## print all countries included in list\nprint(list_of_countries[2]) ## print 'england'","4e56348a":"list = ['xyz',4345,434.46]\nprint(list)","60294cfa":"nested_list = [['a', 'b', 'c'], [1, 2, 3]]\nprint(nested_list[1]) ## [1, 2, 3]","45369ec7":"list_of_countries[-1] ## print last element of list","38a08001":"list_of_countries[1] = \"japan\" \nlist_of_countries\n","10cccc41":"list2 = [];\n## append add element at the end of list\nlist2.append(2)\nlist2.append(3)\nlist2.append(4)\nlist2","ea67b71c":"list3 = [];\n## insert add element at the end of list\nlist3.insert(0,5)\nlist3.insert(2,4)\nlist3.insert(1,6)\nlist3","a6a4cc2a":"list3.remove(5)\nlist3","3d651eb1":"list3.index(6)","d495eaca":"list3.index(10) ## throw exception\n","e61be918":"len(list3)","bae1990b":"list3.count(4)","145b8e08":"list3.count(7) ## element 7  is not in list3 ","c1688593":"print(list3)\nlist3.reverse()\nlist3","1afb52bc":"list3.pop() ## return last elemnt","ce650171":"for country in list_of_countries:\n    print(country)","1dc1c0e1":"ip_address = ('10.20.30.40', 8080)\nprint(ip_address)","41ba8754":"Status ={'open':1,'close':2,'pending':3}\nprint(Status)","22873cf4":"print(Status['open'])","4bdc7dda":"for key in Status:\n\n    print(key)","ad3f1b44":"print(Status.keys()) ## get all keys \nprint(Status.values()) ## get all Lists","9b6dd4ea":"## get Status.items() return items in tuple \nfor item in Status.items():\n    print(item)","253530bf":"## get key value  \nfor key ,value in Status.items():\n    print('key: '+key,' value: '+str(value))\n    ","b7e593af":"prices = {'apple': 0.40, 'orange': 0.35, 'banana': 0.25}\nfor k, v in prices.items():\n   prices[k] = round(v * 0.9, 2)  # Apply a 10% discount\n \nprices","02a04575":"names ={'ahmad','mazhar','afzal','zafar'} ## elements will be sorted automatically\nnames","10337afc":"name ={'ahmad','mazhar','afzal','zafar' ,'ahmad'} # dublicate elements will be removed eg 'ahmad' will be display 1 time\nname","6e44f493":"names_list = ['ahmad','mazhar','afzal','zafar' ,'ahmad']\nnames_set =set(names_list)\nnames_set","cf5324f5":"## Check membership of the set using in:\nif \"mazhar\" in names_set:\n    print(\"mazhar exist\")","c3b03d10":"state_capitals = {\n'Arkansas': 'Little Rock',\n'Colorado': 'Denver',\n'California': 'Sacramento',\n'Georgia': 'Atlanta'\n}\n","645a95c6":"state_capitals['Alabama']","162ea7a9":"from collections import defaultdict\nstate_capitals = defaultdict(lambda: 'Boston')","82936bdd":"state_capitals['Arkansas'] = 'Little Rock'\nstate_capitals['California'] = 'Sacramento'\nstate_capitals['Colorado'] = 'Denver'\nstate_capitals['Georgia'] = 'Atlanta'\n\nstate_capitals['Georgia']","63bc7879":"state_capitals['xyz'] ## return Boston","1a0e2190":"your_name= input(\"Plese enter your name\")\n\nprint(\"welcome :\",your_name)","113c3e03":"x= input(\"enter a number:\")\nx= x\/2 # through a exception because x is a string","7549360d":"x= int(input(\"enter a number:\"))\nx= x\/2 # works fine if you enter a number otherwise raise exception , we will learn it how to handle that situation in try\/catch module\nprint(x)","53fe6e6e":"pow(3,5)","c54da7df":"dir()","2ea5db34":"dir(__builtin__)","822400e7":"help(any)","776cbae2":"help(pow)","3c358a61":"import math\nmath.sqrt(5) ","5bbb06c4":"# to know list of functions in math module\ndir(math)","f60b95f7":"#to see documentation of math libray\nmath.__doc__","95a1e9ba":"def say_hello():\n    print(\"Hello!\")","22c74159":"import hello\n\nhelp(hello)\nhello.say_hello()","0d12515b":"s = \"\"\"w'o\"w\"\"\"\nrepr(s) # Output: '\\'w\\\\\\'o\"w\\''\n","23a71479":"str(s) # Output: 'w\\'o\"w'\n","9b611deb":"eval(str(s)) == s # Gives a SyntaxError\n","04c6f64b":"eval(repr(s)) == s # Output: True","212c09e2":"import datetime\ntoday = datetime.datetime.now()\nstr(today) # Output: '2016-09-15 06:58:46.915000'\n","f6f7cc60":"repr(today) # Output: 'datetime.datetime(2016, 9, 15, 6, 58, 46, 915000)'","1078fec4":"class Represent(object):\n    def __init__(self, x, y):\n        self.x, self.y = x, y\n    def __repr__(self):\n        return \"Represent(x={},y=\\\"{}\\\")\".format(self.x, self.y)\n    def __str__(self):\n        return \"Representing x as {} and y as {}\".format(self.x, self.y)","4a277243":"r = Represent(1, \"Hopper\")\nprint(r) # prints __str__\nprint(r.__repr__) # prints __repr__: '<bound method Represent.__repr__ of Represent(x=1,y=\"Hopper\")\nrep = r.__repr__() # sets the execution of __repr__ to a new variable\nprint(rep) # prints 'Represent(x=1,y=\"Hopper\")'\nr2 = eval(rep) # evaluates rep\nprint(r2) # prints __str__ from new object\nprint(r2 == r) # prints 'False' because they are different objects","f3419cb6":"In short: always use 4 spaces for indentation.","76a55b55":"A set is a collection of elements with no repeats and without insertion order but sorted order. They are used in\nsituations where it is only important that some things are grouped together, and not what order they were\nincluded. For large groups of data, it is much faster to check whether or not an element is in a set than it is to do\nthe same for a list.","ac02c9ba":"To get input from the user, use the input function","96ff3a16":"The bool type is a subclass of the int type and True and\nFalse are its only instances:","f9043d7b":"For example:","19935c9b":"#### strings","63d3eda8":"There are two functions that can be used to obtain a readable representation of an object.","f4ec67d9":"# Get Started with Python Language\n Python is an interpreted, high-level, general-purpose programming language. Created by Guido van Rossum and first released in 1991, Python's design philosophy emphasizes code readability with its notable use of significant whitespace.\n Python features a dynamic type system and automatic memory management\nand supports multiple programming paradigms, including object-oriented, imperative, functional programming,\nand procedural styles. It has a large and comprehensive standard library.\n#### Two major versions of Python are currently in active use:\n   - Python 3.x is the current version and is under active development.\n   - Python 2.x is the legacy version and will receive only security updates until 2020.No new features will be\n      implemented.\n      \n      \nyou can download python from their offcial website \"https:\/\/www.python.org\/downloads\/\" according to your operating system install it on your machine.","90b671eb":"Remove and return item at index (defaults to the last item) with L.pop([index]), returns the item","cb521bce":"Using the above class we can see the results:","eb742576":"To know the functionality of any function, we can use built in function help .","9ecf5893":"### 2. The remainder of your variable name may consist of letters, numbers and underscores.","5ffed98b":"You can also convert sequence or collection types","13989b69":"- str: a unicode string. The type of 'hello'\n- bytes: a byte string. The type of b'hello'","ab16f7a4":"Built in modules contains extra functionalities. For example to get square root of a number we need to include math\nmodule.","3d9db3b3":"Let us try with a defaultdict. It can be found in the collections module.","362bdfae":"#### Converting between datatypes\nYou can perform explicit datatype conversion.","1dac95b4":"### Sequences and collections ","4d14326a":"Integers in Python are of arbitrary sizes.","c885cdb5":"To create a variable in Python, all you need to do is specify the variable name, and then assign a value to it.","27fb070f":"Reverse the list","31fa66e7":"Python uses the colon symbol (:) and indentation for showing where blocks of code begin and end (If you come\nfrom another language, do not confuse this with somehow being related to the ternary operator). That is, blocks in\nPython, such as functions, loops, if clauses and other constructs, have no ending identifiers. All blocks start with a\ncolon and then contain the indented lines below it.\n","68a83de0":"#### float: floating points Number ","f92f622e":"An object is called mutable if it can be changed. For example, when you pass a list to some function, the list can be\nchanged:","8d25db6e":"repr(x) calls x.__repr__(): a representation of x. eval will usually convert the result of this function back to the\noriginal object.\n\nstr(x) calls x.__str__(): a human-readable string that describes the object. This may elide some technical detail.","64871dfc":"#### Tuples","db6e39f7":"An unordered collection of unique key-value pairs; keys must be hashable.","40d70cd0":"An ordered collection of n values of any type but not  mutable","afb61f06":"Functions in a module can be used by importing the module.\n\nFor modules that you have made, they will need to be in the same directory as the file that you are importing them\ninto. (However, you can also put them into the Python lib directory with the pre-included modules, but should be\navoided if possible.)","8b5b7b6f":"Example:","5df6c4f7":"Note:I have saved above function and saved in new file hello.py","998727fd":"### User Input","de3e9452":"Using tabs exclusively is possible but PEP 8, the style guide for Python code, states that spaces are preferred.\nPython 3.x Version \u2265 3.0\nPython 3 disallows mixing the use of tabs and spaces for indentation. In such case a compile-time error is\ngenerated: Inconsistent use of tabs and spaces in indentation and the program will not run.","6d5f8440":"When writing a class, you can override these methods to do whatever you want:","4fa32a5a":"The list type is probably the most commonly used collection type in Python. Despite its name, a list is more like an\narray in other languages, mostly JavaScript,c++,C#,Java. In Python, a list is merely an ordered collection of valid Python values. A list can be created by enclosing values, separated by commas, in square brackets:\n\nThe elements of a list can be accessed via an index, or numeric representation of their position. Lists in Python are\nzero-indexed meaning that the first element in the list is at index 0, the second element is at index 1 and so on:","e8a7313d":"Note that the input is always of type str, which is important if you want the user to enter numbers. Therefore, you\nneed to convert the str before trying to use it as a number:","0f54a551":"### 1. Variables names must start with a letter or an underscore.","3a583872":"#### set","bd48bfb5":"Or you can build a set using an existing list:","904556a5":"There are a number of collection types in Python. collection\ntypes hold multiple values.There are following collection types in python.\n- List\n- Tuples\n- Dictionaries\n- Set\n- defaultdict\n","d2a1bba9":"## Built-in Types\n- Booleans\n- Numbers\n- Strings\n- Sequences and collections","38466d1b":"in Conjunction with the build in datatypes there are a small number of build in constants in python.\n","416a1cf5":"When using such cascading assignment, it is important to note that all three variables a, b and c refer to the same\nobject in memory, an int object with the value of 1. In other words, a, b and c are three different names given to the\nsame int object. Assigning a different object to one of them afterwards doesn't change the others, just as expected:","595095db":"Modifying Values and Keys","69fa61d0":"You can assign multiple values to multiple variables in one line. Note that there must be the same number of\narguments on the right and left sides of the = operator:","73b5f67c":"A boolean value of either True or False. Logical operations like and, or, not can be performed on booleans.","edc09eec":"If we try to access a non-existent key, python returns us an error as follows","a4cee99e":"#### dict ","a96082b6":"Examples of mutable Data Types:\n- bytearray\n- list\n- set\n- dict","c6566d9e":"## Python Versions\n### Python 3.X Versions release with dates\n- 3.7 2018-06-27 \n- 3.6 2016-12-23 \n- 3.5 2015-09-13 \n- 3.4 2014-03-17 \n- 3.3 2012-09-29\n- 3.2 2011-02-20 \n- 3.1 2009-06-26 \n- 3.0 2008-12-03\n### Python 2.x Versions release with dates\n- 2.7 2010-07-03 \n- 2.6 2008-10-02 \n- 2.5 2006-09-19 \n- 2.4 2004-11-30 \n- 2.3 2003-07-29 \n- 2.2 2001-12-21 \n- 2.1 2001-04-15 \n- 2.0 2000-10-16 ","6b3c07d3":"count occurrence of any item in list","49488898":"#### Set","eefb0d73":"A dictionary in Python is a collection of key-value pairs. The dictionary is surrounded by curly braces. Each pair is\nseparated by a comma and the key and value are separated by a colon ':'. Here is an example:","97740a52":"- str\n- bytes\n- unicode","7fbaac1d":"## Block Indentation","2cae8c1b":"### String functions str() and repr()","79305287":"#### Sequences","ca319e48":"# Data Types","67eb5fcf":"- False:\n     The false value of the bool type.\n- True:\n    The true value of the bool type.\n- None:\n    The sole value of types.NoneType. None is frequently used to represent the absence of a value, as when default arguments are not passed to a function.\n- NotImplemented:\n    Special value which can be returned by the \u201crich comparison\u201d special methods (__eq__(), __lt__(), and friends), to indicate that the comparison is not implemented with respect to the other type.\n- Ellipsis:\n    Special value used in conjunction with extended slicing syntax.\n- __debug__:\n    This constant is true if Python was not started with an -O option.","d8653195":"### Numbers","a52e8e5e":"it is possible to add and\/or remove elements from a list:\nAppend object to end of list with L.append(object), returns None.","36145483":"A list can contain another list as its element","0a593bc7":"### Creating a module","0d3ad398":"Indices can also be negative which means counting from the end of the list (-1 being the index of the last element).\nSo, using the list from the above example:","a6fb12e9":"### 3. Names are case sensitive.","eeb9da22":"A defaultdict is a dictionary with a default value for keys, so that keys for which no value has been explicitly\ndefined can be accessed without errors. defaultdict is especially useful when the values in the dictionary are\ncollections (lists, dicts, etc) in the sense that it does not need to be initialized every time when a new key is used.","1074ac75":"It's recommended to use try\/except blocks to catch exceptions when dealing with user inputs. For instance, if\nyour code wants to cast a raw_input into an int, and what the user writes is uncastable, it raises a ValueError.","fa05b603":"Examples of immutable Data Types:\n- int, long, float, complex\n- str\n- bytes\n- tuple\n- frozenset\n","5419b227":"An ordered collection of n values. list are mutable","73d2671d":" #### List","063b46c5":"#### repr()","c88c9f5a":"The elements of a list are not restricted to a single data type, which makes sense given that Python is a dynamic\nlanguage:","3f08fa1b":"Even though there's no need to specify a data type when declaring a variable in Python, while allocating the\nnecessary area in memory for the variable, the Python interpreter automatically picks the most suitable built-in\ntype for it:","21cccb1e":"we can get all keys like that:","becefcf9":"#### Tuples","63baad6d":"Note that the number of _ and number of remaining values must be equal. Otherwise 'too many values to unpack\nerror' is thrown as above:","84ff70a5":"The error in last example can be obviated by assigning remaining values to equal number of arbitrary variables.\nThis dummy variable can have any name, but it is conventional to use the underscore (_) for assigning unwanted\nvalues:","ac459461":"Get the index in the list of the first item whose value is x. It will show an error if there is no such item.","d026bbc2":"## Collection Types","02f8eda5":"## List of Keyword\nkeywords can't use as variable name \nhere is list of keywords in python","115107e1":"Attempting to do this with more than a single statement will not work:","ef4a4810":"Python uses = to assign values to variables. There's no need to declare a variable in advance (or to assign a data\ntype to it), assigning a value to a variable itself declares and initializes the variable with that value. There's no way to\ndeclare a variable without assigning it an initial value.","efa8a4cf":"Blocks that contain exactly one single-line statement may be put on the same line, but is not a recomended way.","2684e405":"     <variable name> = <value>","586a95eb":"The same indexing rules for lists also apply to tuples. Tuples can also be nested and the values can be any valid\nPython entry(collection type,data type).","d4aae6f4":"## IDE for python\nThere are lots of Tools avaliable for development in python like VS code, IDLE,Jupyter Notebook .. etc.\nyour can choose any IDE but i will recommed download Anacoda from there offcials web site and install on your machine.\nAfter instlling Anacoda in window start manue Type \"jupyter Notebook\" and hit enter it will open Jupyter Notebook into your \nDefault Browser.","0e71ff5e":"To get a value, refer to it by its key:","7112a924":"#### defaultdict","53db4d8d":"Lastly, variables in Python do not have to stay the same type as which they were first defined\n-- you can simply use = to assign a new value to a variable, even if that value is of a different type.","05748ec1":"Nested lists are also valid in python. This means that a list can contain another list as an element.","ae20a971":"An object is called immutable if it cannot be changed in any way. For example, tuple are immutable, since there's\nno way to change them:","875bdb46":"#### Mutable and Immutable Data Types","5ac12d52":"Python differentiates between ordered sequences and unordered collections (such as set and dict).","bef32982":"Lists are mutable, so you can change the values in a list:","048fa784":"- tuple\n- list\n- set\n- dict\n","f0d92cc4":"## Rules for variable naming:","a5e483fd":"You can iterate over the list elements like below:","86d00d3a":"Floating point number; precision depends on the implementation and system architecture, for\nCPython the float datatype corresponds to a C double.","bb8fc6fb":"A module is an importable file containing definitions and statements.\n\nA module can be created by creating a .py file.","43404252":"You can also assign a single value to several variables simultaneously.","46a0b049":"The <, <=, > and >= operators will raise a TypeError exception when any operand is a complex number.","ce790226":"### Built in Modules and Functions","9ae553ff":"### Spaces vs. Tabs","b5240826":"A module is a file containing Python definitions and statements. Function is a piece of code which execute some\nlogic.","cf01a628":"For strings, this returns the string itself. The difference between this and repr(object) is that str(object) does\nnot always attempt to return a string that is acceptable to eval(). Rather, its goal is to return a printable or 'human\nreadable' string. If no argument is given, this returns the empty string, ''.","921e6c7d":"## Creating variables and assigning values","0c5da739":"An empty block causes an IndentationError. Use pass (a command that does nothing) when you have a block with\nno content:","1ba72b2f":"#### int :integer Number ","789d44d8":"If we remove Indentation and run code it will throw exception","52231f6d":"Count length of list","4d6f3340":"#### list","f1c264a0":"#### Collections","218889dd":"Remove the first occurrence of a value with L.remove(value), returns None","405c6627":"#### complex: Complex numbers","70a7d954":"What we did here is to set a default value (Boston) in case the give key does not exist. Now populate the dict as\nbefore:","1a0bf8ca":"To check the built in function in python we can use dir(). If called without an argument, return the names in the\ncurrent scope. Else, return an alphabetized list of names comprising (some of) the attribute of the given object, and\nof attributes reachable from it.","504a752f":"A tuple is similar to a list except that it is fixed-length and immutable. So the values in the tuple cannot be changed\nnor the values be added to or removed from the tuple. Tuples are commonly used for small collections of values\nthat will not need to change, such as an IP address and port. Tuples are represented with parentheses instead of\nsquare brackets:","d9860568":"## First Program In python","37e47c06":"### Booleans","9fe15b83":"Python uses indentation to define control and loop constructs. This contributes to Python's readability, however, it\nrequires the programmer to pay close attention to the use of whitespace.","f5c1c298":"The above is also true for mutable types (like list, dict, etc.) just as it is true for immutable types (like int, string,\ntuple, etc.):\n","0ab8b837":"#### Dictionaries","b6bfd982":"An ordered collection of unique values .Items must be hashable.","7ac663dd":"#### Built-in constants","9b83a77b":"For many types, this function makes an attempt to return a string that would yield an object with the same value\nwhen passed to eval(). Otherwise, the representation is a string enclosed in angle brackets that contains the name\nof the type of the object along with additional information. This often includes the name and address of the object.","b73cd6dc":"If boolean values are used in arithmetic operation their result will be Int.","21f5e4e7":"In Python NUmber datatype is further divided into 3 types\n - int\n - float\n - complex"}}