{"cell_type":{"de7554c9":"code","9c815177":"code","1dcc22c3":"code","65a21911":"code","ef9ea369":"code","63df4577":"code","4e51d1ee":"code","7e76851c":"code","b76acbbf":"code","fbab55d5":"code","7c66a94f":"code","9ef4f694":"code","258cb182":"code","4a2af855":"code","c63d1ae4":"code","570ac3bc":"code","b6f1916b":"code","019d601f":"code","d87be651":"code","1b535e4d":"code","9be77852":"code","7015224c":"code","e980137a":"code","198138e2":"code","940c9dc4":"code","e4d24872":"code","55a0eb3d":"markdown","1867baee":"markdown","b2834f43":"markdown","883b0152":"markdown","6ace5516":"markdown","7a2b28d2":"markdown"},"source":{"de7554c9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9c815177":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nplt.style.use('fivethirtyeight')\nsns.set_style('darkgrid')","1dcc22c3":"from sklearn.linear_model import LinearRegression\nimport xgboost\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor","65a21911":"train = pd.read_csv(\"\/kaggle\/input\/bike-sharing-system-washington-dc\/train_bikes.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/bike-sharing-system-washington-dc\/test_bikes.csv\")","ef9ea369":"display(train.head())\ndisplay(test.head())","63df4577":"display(train.shape)\ndisplay(test.shape)","4e51d1ee":"display(train.info())\ndisplay(test.info())","7e76851c":"train.describe()","b76acbbf":"plt.figure(figsize=(12,8))\nsns.heatmap(train.corr(), annot=True, cbar=False, linewidths=1)\nplt.title(\"Correlation Matrix\")\nplt.show()","fbab55d5":"display(train[\"season\"].nunique())\ndisplay(test[\"season\"].nunique())","7c66a94f":"display(train[\"season\"].value_counts())\ndisplay(test[\"season\"].value_counts())","9ef4f694":"plt.figure(figsize=(8,6))\nsns.countplot(x='season', data=train)\n\n# Get current axis on current figure\nax = plt.gca()\n\n# ylim max value to be set\ny_max = train['season'].value_counts().max() \nax.set_ylim([0, 3500])\n\n# Iterate through the list of axes' patches\nfor p in ax.patches:\n    ax.text(p.get_x() + p.get_width()\/2., p.get_height(), '%d' % int(p.get_height()), \n            fontsize=12, color='black', ha='center', va='bottom')","258cb182":"display(train[\"holiday\"].nunique())\ndisplay(test[\"holiday\"].nunique())","4a2af855":"display(train[\"holiday\"].value_counts())\ndisplay(test[\"holiday\"].value_counts())","c63d1ae4":"display(train[\"workingday\"].nunique())\ndisplay(test[\"workingday\"].nunique())","570ac3bc":"display(train[\"workingday\"].value_counts())\ndisplay(test[\"workingday\"].value_counts())","b6f1916b":"display(train[\"weather\"].nunique())\ndisplay(test[\"weather\"].nunique())","019d601f":"display(train[\"weather\"].value_counts())\ndisplay(test[\"weather\"].value_counts())","d87be651":"train[\"datetime\"] = pd.to_datetime(train[\"datetime\"])\ntrain = train.set_index(\"datetime\")\n\ntrain.head()","1b535e4d":"test[\"datetime\"] = pd.to_datetime(test[\"datetime\"])\ntest = test.set_index(\"datetime\")\n\ntest.head()","9be77852":"train[\"hour\"] = train.index.hour\ntrain[\"day_of_month\"] = train.index.day\ntrain[\"day_of_week\"]  = train.index.dayofweek\ntrain[\"month\"] = train.index.month\ntrain.head()","7015224c":"test[\"hour\"] = test.index.hour\ntest[\"day_of_month\"] = test.index.day\ntest[\"day_of_week\"]  = test.index.dayofweek\ntest[\"month\"] = test.index.month\ntest.head()","e980137a":"plt.figure(figsize=(15, 7))\nax = sns.lineplot(x=train.index, y=train.count, data=train)\nax.set_title(\"Amount of bike shares vs date\", fontsize=25)\nax.set_xlabel(\"Date\", fontsize=20)\nax.set_ylabel('Amount of bike shares', fontsize=20)\nplt.show()","198138e2":"# Resample timeseries, for plotting timeseries month frequency\ntrain_by_month = train.resample(\"M\").sum()\ntrain_by_month.head()","940c9dc4":"plt.figure(figsize=(16,6))\nax = sns.lineplot(data=train_by_month, x=train_by_month.index, y=train_by_month.count)\nax.set_title(\"Amount of bike shares per month\", fontsize=25)\nax.set_xlabel(\"Month\", fontsize=20)\nax.set_ylabel('Amount of bike shares', fontsize=20)\nplt.show()","e4d24872":"plt.figure(figsize=(20,10))\n\nax = sns.pointplot(x='windspeed', y='count', data=train)\nax.set_title(\"Amount of bike shares vs windspeed\", fontsize=25)\nax.set_xlabel(\"Windspeed (km\/h)\", fontsize=20)\nax.set_ylabel('Amount of bike shares', fontsize=20)\nplt.locator_params(axis='x', nbins=10)\nplt.show()","55a0eb3d":"### 1.1 Amount of bike shares per month","1867baee":"## holiday","b2834f43":"## weather","883b0152":"## season","6ace5516":"## workingday","7a2b28d2":"## Amount of bike shares related to the windspeed"}}