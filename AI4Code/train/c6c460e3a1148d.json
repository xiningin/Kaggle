{"cell_type":{"f8a6abd8":"code","d58b8949":"code","0ef12191":"code","83ad2ddf":"code","973784d7":"code","5434a918":"code","165ea6aa":"code","f3682658":"code","b994104b":"code","fabb55e4":"code","3911a32c":"code","624cc29d":"code","28dfc59d":"code","0308bdfc":"code","e435ee30":"code","7114b09c":"code","790e5b22":"code","f099e03c":"code","9adcedae":"code","26efb116":"code","be72d244":"code","c933040e":"markdown","5c5cd745":"markdown","bed2d47f":"markdown","317afbf7":"markdown","14aaf3e7":"markdown","c09dceee":"markdown","a1887197":"markdown","6f02e684":"markdown","0770a1db":"markdown","32afb33c":"markdown","8c536b1f":"markdown","2bc12e89":"markdown"},"source":{"f8a6abd8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d58b8949":"# read csv file\ndata=pd.read_csv('..\/input\/voice.csv')\ndata.head(7)\n","0ef12191":"print(data.info())","83ad2ddf":"data.label.unique","973784d7":"    data.label=[1 if each ==\"female\" else 0 for each in data.label]\n    data.label.values","5434a918":"data.tail(6)#last six","165ea6aa":"data.head(6)#first six","f3682658":"data.info()","b994104b":"y=data.label.values\nx_data=data.drop(['label'],axis=1)","fabb55e4":"np.min(x_data)","3911a32c":"np.max(x_data)","624cc29d":"#normalization\n#(x-min(x))\/(max(x)-min(x))\nx=(x_data-np.min(x_data))\/(np.max(x_data)-np.min(x_data)).values","28dfc59d":"#train test split\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test=train_test_split(x,y, test_size=0.2, random_state=42)\n#find transpose\nx_train=x_train.T\nx_test=x_test.T\ny_train=y_train.T\ny_test=y_test.T\nprint(\"x_train shape:\",x_train.shape)\nprint(\"x_test shape:\",x_test.shape)\nprint(\"y_train shape:\",y_train.shape)\nprint(\"y_test shape:\",y_test.shape)","0308bdfc":"#parameter initialize and sigmoid function\n#dimention=30\ndef initialize_weights_and_bias(dimension):\n    w=np.full((dimension,1),0.01)\n    b=0.0\n    return w,b\ndef sigmoid(z):\n    y_head=1\/(1+np.exp(-z))\n    return y_head\n#sigmoid(0)","e435ee30":"#forward propagation\ndef forward_backward_propagation(w,b,x_train,y_train):\n    # forward propagation\n    z = np.dot(w.T,x_train) + b\n    y_head = sigmoid(z)\n    loss = -y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)\n    cost = (np.sum(loss))\/x_train.shape[1]      # x_train.shape[1]  is for scaling\n    \n    # backward propagation\n    derivative_weight = (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1] # x_train.shape[1]  is for scaling\n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1]                 # x_train.shape[1]  is for scaling\n    gradients = {\"derivative_weight\": derivative_weight, \"derivative_bias\": derivative_bias}\n    \n    return cost,gradients","7114b09c":"# Updating(learning) parameters\ndef update(w, b, x_train, y_train, learning_rate,number_of_iterarion):\n    cost_list = []\n    cost_list2 = []\n    index = []\n    \n    # updating(learning) parameters is number_of_iterarion times\n    for i in range(number_of_iterarion):\n        # make forward and backward propagation and find cost and gradients\n        cost,gradients = forward_backward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        # lets update\n        w = w - learning_rate * gradients[\"derivative_weight\"]\n        b = b - learning_rate * gradients[\"derivative_bias\"]\n        if i % 10 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n            \n    # we update(learn) parameters weights and bias\n    parameters = {\"weight\": w,\"bias\": b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation='vertical')\n    plt.xlabel(\"Number of Iterarion\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, gradients, cost_list","790e5b22":"# prediction\ndef predict(w,b,x_test):\n    # x_test is a input for forward propagation\n    z = sigmoid(np.dot(w.T,x_test)+b)\n    Y_prediction = np.zeros((1,x_test.shape[1]))\n    # if z is bigger than 0.5, our prediction is sign one (y_head=1),\n    # if z is smaller than 0.5, our prediction is sign zero (y_head=0),\n    for i in range(z.shape[1]):\n        if z[0,i]<= 0.5:\n            Y_prediction[0,i] = 0\n        else:\n            Y_prediction[0,i] = 1\n\n    return Y_prediction","f099e03c":"#logistic_regression\ndef logistic_regression(x_train, y_train, x_test, y_test, learning_rate ,  num_iterations):\n    # initialize\n    dimension =  x_train.shape[0]  # that is 30\n    w,b = initialize_weights_and_bias(dimension)\n    # do not change learning rate\n    parameters, gradients, cost_list = update(w, b, x_train, y_train, learning_rate,num_iterations)\n    \n    y_prediction_test = predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n\n    # Print test Errors\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_test - y_test)) * 100))\n    \nlogistic_regression(x_train, y_train, x_test, y_test,learning_rate = 1, num_iterations = 300)","9adcedae":"logistic_regression(x_train, y_train, x_test, y_test,learning_rate = 3, num_iterations = 200)","26efb116":"logistic_regression(x_train, y_train, x_test, y_test,learning_rate = 2, num_iterations = 300)","be72d244":"#sklearn with logistic regression\nfrom sklearn.linear_model import LogisticRegression\nlr=LogisticRegression()\nlr.fit(x_train.T,y_train.T)\nprint(\"Test Accuracy :{}\",format(lr.score(x_test.T,y_test.T)))","c933040e":"lets see data info again","5c5cd745":"After creating all required funcs lets define logistic_regression func then check.\nlearning_rate = 1, num_iterations = 300","bed2d47f":"we will determine x_train, x_test, y_train, y_test for LR","317afbf7":"for logistic regression we will determine x and y values","14aaf3e7":"than we will create forward_backward_propagation function","c09dceee":"we tried different learning_rate and  num_iterations values for finding best test accuracy.\nThe best one we found test accuracy:97.94952681388013 % for learning_rate = 2, num_iterations = 300.\n\n\nLest use sklearn library for our project.","a1887197":"we will create initialize_weights_and_bias and sigmoid  functions for LR","6f02e684":"As you can see only 'label' values are object. All others are float64.\n\nIn logistic regression we will train and determine label values. We will use label values as 0 or 1.","0770a1db":"After changing label values to 1 or 0 let see last and first 6 data rows","32afb33c":"we need normalize x values","8c536b1f":"Hi everyone\nIn this chapter we will learn using logistic regression.\nFirst we will import required libraries and add data","2bc12e89":"As you can see this is the best one. Test accuracy is 98.11 %.\n\nI hope you enjoy my tutorial.\n\nSee you soon."}}