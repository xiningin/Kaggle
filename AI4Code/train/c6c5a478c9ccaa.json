{"cell_type":{"edec18bb":"code","83178344":"code","3d1600cc":"code","0c8f3925":"code","85e3085e":"code","5ba63be0":"code","8cb5c05a":"code","4f2cf583":"code","0e19e388":"code","074ebfd2":"code","cb854e42":"code","80962532":"code","fcb5f6c5":"code","ee4fc21e":"code","91058b40":"code","eb4a87c8":"code","b04ddf46":"code","297003dc":"code","ac3d527c":"code","23b16fd7":"code","957943c9":"code","c37870a3":"code","a4f949e5":"code","0bd87845":"code","60d4c4e2":"code","7f7b6f3b":"code","cf38827e":"code","4f7e3a63":"code","ef8b0980":"code","af288e24":"code","5b67dea4":"code","dc2f40f8":"code","662672e5":"code","c94d5129":"code","8b70ffb1":"code","c08878a9":"code","6735a176":"code","59568cf4":"code","23d17250":"code","b8a39e17":"code","9ce90c32":"code","547acf9d":"code","34aea195":"code","69ec3f3d":"code","d5d91d5d":"code","ad35db4b":"code","9e19b376":"code","1220aa82":"code","c860217c":"code","daf2dc66":"code","c3b6a851":"code","e16493c1":"code","127014b9":"code","50cc1163":"code","f2c46172":"code","a2e1f385":"code","ec34b6c4":"code","d05f2ff3":"markdown","8e3f9cd5":"markdown","79c9a7c2":"markdown","e83a772a":"markdown","5c6e8804":"markdown","b9099cb0":"markdown","c823ec8c":"markdown","eccfd41f":"markdown","c15fe355":"markdown","3e792597":"markdown","0417a5f4":"markdown","faa240a4":"markdown","03eb751e":"markdown","699d57e1":"markdown","eea1261e":"markdown","355ac764":"markdown","5649de01":"markdown","ec74e2e9":"markdown","152235b5":"markdown","2e0298c9":"markdown","a077a307":"markdown"},"source":{"edec18bb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","83178344":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime as dt\n\n%matplotlib inline\n\n# \u5c0f\u6570\u7b2c4\u4f4d\u307e\u3067\u8868\u793a\n%precision 4","3d1600cc":"!pwd","0c8f3925":"features = pd.read_csv('..\/input\/walmart-recruiting-store-sales-forecasting\/features.csv.zip')\ntrain = pd.read_csv('..\/input\/walmart-recruiting-store-sales-forecasting\/train.csv.zip')\nstores = pd.read_csv('..\/input\/walmart-recruiting-store-sales-forecasting\/stores.csv')\ntest = pd.read_csv('..\/input\/walmart-recruiting-store-sales-forecasting\/test.csv.zip')\nholidays = pd.read_csv('..\/input\/holidays\/holidays.csv')","85e3085e":"# \u578b\u306e\u5909\u63db\nholidays[\"Date\"]=pd.to_datetime(holidays[\"Date\"])\nfeatures[\"IsHoliday\"] = np.where(features[\"IsHoliday\"]==True,1,0)\nfeatures[\"Date\"] = pd.to_datetime(features[\"Date\"])\ntrain[\"Date\"] = pd.to_datetime(train[\"Date\"])\ntest[\"Date\"] = pd.to_datetime(test[\"Date\"])","5ba63be0":"train[\"category\"] = \"train\"\ntest[\"category\"] = \"test\"\ndata_join = pd.concat([train,test])\ndata_join = pd.merge(data_join, features, on=[\"Store\",\"Date\", \"IsHoliday\"], how= \"left\")\ndata_join = pd.merge(data_join, stores, on=\"Store\", how= \"inner\")\ndata_join = pd.merge(data_join, holidays, on=\"Date\", how= \"left\")\ndata_join[\"IsHoliday\"] = data_join[\"IsHoliday\"].astype(int)\ndata_join.shape","8cb5c05a":"data_join[\"YEAR\"] = data_join[\"Date\"].dt.year\ndata_join[\"MONTH\"] = data_join[\"Date\"].dt.month\ndata_join[\"WEEK\"] = data_join[\"Date\"].dt.week\ndata_join","4f2cf583":"# \u7279\u5fb4\u91cf\u4f5c\u6210\uff1a\u4e00\u5e74\u524d\u306e\u58f2\u4e0a\ndata_sales = data_join[[\"Dept\",\"Store\",\"YEAR\",\"WEEK\",\"Weekly_Sales\"]]\ndata_sales = data_sales.rename(columns={\"Weekly_Sales\":\"Weekly_Sale_before\"})\ndata_sales[\"YEAR\"] = data_sales[\"YEAR\"] + 1\ndata_join2 = pd.merge(data_join, data_sales, on=[\"Dept\",\"Store\",\"YEAR\",\"WEEK\"], how=\"left\")\ndata_join2","0e19e388":"# \u7279\u5fb4\u91cf\u4f5c\u6210\uff1aDept72 & WEEK47 \u306e\u30d5\u30e9\u30b0\u3092\u7acb\u3066\u308b\ndata_join2[\"FLAG_D72&W47\"] = np.where((data_join2[\"Dept\"]==72) & (data_join2[\"WEEK\"]==47),1,0)\ndata_join2[data_join2[\"FLAG_D72&W47\"] == 1]","074ebfd2":"data_join2.isnull().sum()","cb854e42":"data_join2[\"Weekly_Sale_before\"] = data_join2[\"Weekly_Sale_before\"].fillna(0)\ndata_join2[\"Weekly_Sale_before\"] = np.where(data_join2[\"Weekly_Sale_before\"]==0,data_join2[\"Weekly_Sales\"],data_join2[\"Weekly_Sale_before\"])\ndata_join2","80962532":"data_join2.drop(columns=[\"Temperature\",\"Fuel_Price\",\"MarkDown1\",\"MarkDown2\",\"MarkDown3\",\"MarkDown4\",\"MarkDown5\",\"CPI\",\"Unemployment\"],axis=1,inplace=True)\ndata_join2","fcb5f6c5":"data_join2.loc[(data_join2.YEAR==2010) & (data_join2.WEEK==13), 'IsHoliday'] = True\ndata_join2.loc[(data_join2.YEAR==2011) & (data_join2.WEEK==16), 'IsHoliday'] = True\ndata_join2.loc[(data_join2.YEAR==2012) & (data_join2.WEEK==14), 'IsHoliday'] = True\ndata_join2.loc[(data_join2.YEAR==2013) & (data_join2.WEEK==13), 'IsHoliday'] = True","ee4fc21e":"# data_join2[\"Weekly_Sales\"] = np.where(data_join2[\"IsHoliday\"]==1,data_join2[\"Weekly_Sales\"]*5,data_join2[\"Weekly_Sales\"])\n# data_join2[\"Weekly_Sale_before\"] = np.where(data_join2[\"IsHoliday\"]==1,data_join2[\"Weekly_Sale_before\"]*5,data_join2[\"Weekly_Sale_before\"])","91058b40":"import lightgbm as lgb\n\n# \u53c2\u8003HP\n# https:\/\/rin-effort.com\/2019\/12\/29\/machine-learning-6\/\n# https:\/\/www.codexa.net\/lightgbm-beginner\/","eb4a87c8":"data_train = data_join2[data_join2[\"category\"]==\"train\"]\ndata_test = data_join2[data_join2[\"category\"]==\"test\"]\n\ntrain_x = data_train.drop(columns=['Date', 'Weekly_Sales', 'category'])\ntrain_y = data_train['Weekly_Sales']\ntest_x = data_test.drop(columns=['Date', 'Weekly_Sales', 'category'])","b04ddf46":"train_x.columns","297003dc":"test_x.columns","ac3d527c":"obj_col = [col for col in train_x.columns if train_x[col].dtype == 'O']\nobj_col","23b16fd7":"train_x[obj_col].head()","957943c9":"from sklearn.preprocessing import LabelEncoder\n\nfor c in obj_col:\n    le = LabelEncoder()\n    le.fit(train_x[c].fillna('NA'))\n\n    train_x[c] = le.transform(train_x[c].fillna('NA'))\n    test_x[c] = le.transform(test_x[c].fillna('NA'))","c37870a3":"train_x[obj_col].head()","a4f949e5":"# import itertools\n\n# param_space = {\n#     'max_depth': [8, 12, 16],\n#     \"num_leaves\": [8, 12, 16],\n#     \"min_data_in_leaf\":[2, 6,10] \n# }\n\n# param_combinations = itertools.product(param_space['max_depth'], param_space['num_leaves'],param_space['min_data_in_leaf'])\n\n# for i,j,k in param_combinations:\n#     print(f'max_depth:{i}, num_leaves:{j}, min_data_in_leaf:{k}')","0bd87845":"# #\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u4e00\u5ea6for\u6587\u3092\u56de\u3059\u3068\u518d\u5b9f\u884c\u3057\u3066\u3082\u6700\u521d\u304b\u3089\u56de\u3063\u3066\u304f\u308c\u306a\u3044\u3002\u4e0a\u3067for\u6587\u3092\u56de\u3057\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u3001\u6539\u3081\u3066\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u767a\u884c\u3059\u308b\u3002\n# param_combinations = itertools.product(param_space['max_depth'], param_space['num_leaves'],param_space['min_data_in_leaf'])\n\n# #\u2022\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7d44\u3054\u3068\u306b\u305d\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u30b9\u30b3\u30a2\u3092\u4fdd\u5b58\u3059\u308b\u30ea\u30b9\u30c8\u3092\u7528\u610f\n# params_list = []\n# scores_list = []","60d4c4e2":"from sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score","7f7b6f3b":"# version13 \u8ffd\u8a18\u3000\uff1a\u3000MAE\nfrom sklearn.metrics import mean_absolute_error","cf38827e":"# %%time\n# for max_depth,num_leaves,min_data_in_leaf in param_combinations:\n#     kf = KFold(n_splits=3, shuffle=True, random_state=72)\n#     train_scores = []\n#     valid_scores = []\n#     print(f'param: max_depth={max_depth}, num_leaves={num_leaves},min_data_in_leaf={min_data_in_leaf} ')\n\n#     # \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\n#     params = {\"metric\": \"rmse\",\n#               \"max_depth\" : max_depth,\n#               \"num_leaves\": num_leaves,\n#               \"min_data_in_leaf\":min_data_in_leaf}\n    \n#     for i, (tr_idx, va_idx) in enumerate(kf.split(train_x)):\n#         tr_x, va_x = train_x.iloc[tr_idx], train_x.iloc[va_idx]\n#         tr_y, va_y = train_y.iloc[tr_idx], train_y.iloc[va_idx]\n\n#         lgb_train = lgb.Dataset(tr_x, tr_y)\n#         lgb_eval = lgb.Dataset(va_x, va_y)\n\n#         gbm = lgb.train(params,lgb_train,valid_sets=lgb_eval,num_boost_round=1000,early_stopping_rounds=100,verbose_eval=500)\n\n#         tr_pred = gbm.predict(tr_x)\n#         va_pred = gbm.predict(va_x)\n\n#         train_RMSE = np.sqrt(mean_squared_error(tr_y,tr_pred))\n#         valid_RMSE = np.sqrt(mean_squared_error(va_y,va_pred))\n\n#         train_scores.append(train_RMSE)\n#         valid_scores.append(valid_RMSE)\n\n#         print(f'fold{i}:  train_RMSE={train_RMSE}  valid_RMSE={valid_RMSE}')\n\n#     mean_train_scores = np.mean(train_scores)\n#     mean_valid_scores = np.mean(valid_scores)\n#     params_list.append((max_depth,num_leaves,min_data_in_leaf))\n#     scores_list.append(mean_valid_scores)","4f7e3a63":"# best_idx = np.argsort(scores_list)[-1]\n# best_param = params_list[best_idx]\n# print(f'best param: max_depth={best_param[0]}, num_leaves={best_param[1]},min_data_in_leaf={best_param[2]}')","ef8b0980":"# best param: max_depth=16, num_leaves=8,min_data_in_leaf=2\nbest_param = [16,8,2]","af288e24":"# \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\n# \u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3067\u6c7a\u5b9a\u3057\u305fbest_param\u306e\u5024\u3092\u4ee3\u5165\nparams = {\"metric\": \"mae\",\n          \"max_depth\":best_param[0],\n          \"num_leaves\":best_param[1],\n          \"min_data_in_leaf\":best_param[2]\n         }\n\n# \u521d\u671f\u5024\ntrain_scores = []\nvalid_scores = []\npred = np.zeros(test_x.shape[0])\npred_valid = np.zeros(train_x.shape[0])\n\n# 5kfold \u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\n\nkf = KFold(n_splits = 5, shuffle = True, random_state=0)\n\nfor i, (tr_idx, va_idx) in enumerate(kf.split(train_x)):\n    tr_x, va_x = train_x.iloc[tr_idx], train_x.iloc[va_idx]\n    tr_y, va_y = train_y.iloc[tr_idx], train_y.iloc[va_idx]\n\n    lgb_train = lgb.Dataset(tr_x, tr_y)\n    lgb_eval = lgb.Dataset(va_x, va_y)\n\n    gbm = lgb.train(params,lgb_train,valid_sets=lgb_eval,num_boost_round=10000,early_stopping_rounds=100,verbose_eval=500)\n    \n    tr_pred = gbm.predict(tr_x)\n    va_pred = gbm.predict(va_x)\n    pred += gbm.predict(test_x) \/ 5\n    \n    # version9 \u8ffd\u8a18 \u5404varid\u6642\u306b\u4e88\u6e2c\u5024\u3092\u6c42\u3081\u3066\u304a\u304f\n    pred_valid[va_idx] =  va_pred\n\n    train_MAE = mean_absolute_error(tr_y,tr_pred)\n    valid_MAE = mean_absolute_error(va_y,va_pred)\n\n    train_scores.append(train_MAE)\n    valid_scores.append(valid_MAE)\n                       \n    print(f'fold{i}:  train_MAE={train_MAE}  valid_MAE={valid_MAE}')\n\nmean_train_scores = np.mean(train_scores)\nmean_valid_scores = np.mean(valid_scores)\n\nprint(f'mean train MAE={mean_train_scores}  mean valid MAE={mean_valid_scores}')","5b67dea4":"#\u4e88\u6e2c\u5024\u3068\u6b63\u89e3\u5024\u3092\u63cf\u5199\u3059\u308b\u95a2\u6570\ndef True_Pred_map(true,pred):\n    R2 = r2_score(true, pred) \n    plt.figure(figsize=(10,6))\n    ax = plt.subplot(111)\n    ax.scatter(x=true,y=pred)\n    ax.set_xlabel('True Value', fontsize=15)\n    ax.set_ylabel('Pred Value', fontsize=15)\n    ax.set_xlim(true.min()-0.1 , true.max()+0.1)\n    ax.set_ylim(pred.min()-0.1 , pred.max()+0.1)\n    x = np.linspace(true.min()-0.1, true.max()+0.1, 2)\n    y = x\n    ax.plot(x,y,'r-')\n    plt.text(0.1, 0.8, 'R^2 = {}'.format(str(round(R2, 5))), transform=ax.transAxes, fontsize=15)","dc2f40f8":"True_Pred_map(tr_y,tr_pred)","662672e5":"True_Pred_map(va_y,va_pred)","c94d5129":"# Feature_importance\nlgb.plot_importance(gbm, importance_type=\"gain\",height=0.5, figsize=(8,6))","8b70ffb1":"# from graphviz import Digraph\n# lgb.create_tree_digraph(gbm) # figsize=(20,12)","c08878a9":"train_tmp = train_x.copy()\ntrain_tmp[\"Weekly_Sales\"] = train_y\ntrain_tmp[\"pred\"] = pred_valid\ntrain_tmp[\"pred_diff\"] = train_tmp['Weekly_Sales']-train_tmp[\"pred\"]\ntrain_tmp","6735a176":"train_tmp[\"pred_diff\"].hist(bins=50).set_yscale(\"log\")","59568cf4":"train_tmp[(train_tmp[\"pred_diff\"]<-200000) | (train_tmp[\"pred_diff\"]>200000)]","23d17250":"# train\u3068test\u306e\u5404Dept\u306e\u30ec\u30b3\u30fc\u30c9\u6570\ntmp = data_join2.pivot_table(index=\"Dept\",columns=\"category\",values=\"Type\",aggfunc=\"count\")\ntmp.plot(kind=\"bar\",figsize=(20,5))","b8a39e17":"# train\u3068test\u306e\u5404Store\u306e\u30ec\u30b3\u30fc\u30c9\u6570\ntmp = data_join2.pivot_table(index=\"Store\",columns=\"category\",values=\"Type\",aggfunc=\"count\")\ntmp.plot(kind=\"bar\",figsize=(20,5))","9ce90c32":"# \u6642\u7cfb\u5217\u7684\u306b\u4e26\u3079\u3066\u307f\u308b\nplt.figure(figsize=(20,5))\nsns.lineplot(x=\"WEEK\", y=\"Weekly_Sales\", data=data_join2[data_join2[\"Dept\"]==72],hue=\"YEAR\")","547acf9d":"# Week47\u306e\u5404dept\u3067\u306e\u53cd\u5fdc\u306e\u9055\u3044\nplt.figure(figsize=(20,5))\nsns.barplot(x=\"Dept\", y=\"Weekly_Sales\", data=data_join2[(data_join2[\"WEEK\"]==46) | (data_join2[\"WEEK\"]==47)],hue=\"WEEK\")","34aea195":"# WEEK\u3068Holiday\u304c\u5e74\u306b\u3088\u3063\u3066\u305a\u308c\u3066\u3044\u3063\u3066\u306a\u3044\u304b\uff1f\ndata_join2[(data_join2[\"Store\"] == 1) & (data_join2[\"Dept\"] == 1) & (data_join2[\"Holiday_name\"].notnull())]","69ec3f3d":"# Store\u6bce\u306eDept72 & WEEK47\u3000\u306e\u53cd\u5fdc\u306e\u9055\u3044\nplt.figure(figsize=(20,5))\nsns.barplot(x=\"Store\", y=\"Weekly_Sales\", data=data_join2[(data_join2[\"Dept\"]==72) & ((data_join2[\"WEEK\"]==46) | (data_join2[\"WEEK\"]==47))],hue=\"WEEK\")","d5d91d5d":"sns.scatterplot(data = data_join2[((data_join2[\"Dept\"]==72)|(data_join2[\"Dept\"]==92)) & (data_join2[\"WEEK\"]==47)],x=\"Weekly_Sale_before\",y=\"Weekly_Sales\",hue=\"YEAR\")","ad35db4b":"# \u3082\u3046\u4e00\u5ea6\u3001\u30ba\u30ec\u91cf\u306e\u5404\u30d1\u30e9\u30e1\u30fc\u30bf\u4f9d\u5b58\u6027\u3092\u898b\u8fd4\u3057\u3066\u307f\u308b\nfig, (ax1,ax2,ax3) = plt.subplots(3, 1, figsize=(20, 15))\nsns.scatterplot(data=train_tmp,x=\"Store\",y=\"pred_diff\",hue=\"YEAR\",ax=ax1,palette=\"Set2\")\nsns.scatterplot(data=train_tmp,x=\"Dept\",y=\"pred_diff\",hue=\"YEAR\",ax=ax2,palette=\"Set2\")\nsns.scatterplot(data=train_tmp,x=\"WEEK\",y=\"pred_diff\",hue=\"YEAR\",ax=ax3,palette=\"Set2\")","9e19b376":"fig, (ax1,ax2,ax3) = plt.subplots(3, 1, figsize=(20, 15))\nsns.scatterplot(data=train_tmp,x=\"Store\",y=\"pred_diff\",hue=\"Holiday_name\",ax=ax1,palette=\"Set2\")\nsns.scatterplot(data=train_tmp,x=\"Dept\",y=\"pred_diff\",hue=\"Holiday_name\",ax=ax2,palette=\"Set2\")\nsns.scatterplot(data=train_tmp,x=\"YEAR\",y=\"pred_diff\",hue=\"Holiday_name\",ax=ax3,palette=\"Set2\")","1220aa82":"plt.figure(figsize=(15,15))\nsns.scatterplot(data = train_tmp, x=\"Weekly_Sale_before\",y=\"pred_diff\", hue=\"Holiday_name\",palette=\"Set2\")","c860217c":"fig, (ax1,ax2,ax3) = plt.subplots(3, 1, figsize=(20, 15))\nsns.barplot(data=train_tmp[(train_tmp[\"Dept\"]==72) & (train_tmp[\"WEEK\"]==47)],x=\"Store\",y=\"pred_diff\",hue=\"YEAR\",ax=ax1,palette=\"Set2\")\nsns.barplot(data=train_tmp[(train_tmp[\"Dept\"]==72) & (train_tmp[\"WEEK\"]==47)],x=\"Store\",y=\"Weekly_Sales\",hue=\"YEAR\",ax=ax2,palette=\"Set2\")\nsns.barplot(data=train_tmp[(train_tmp[\"Dept\"]==72) & (train_tmp[\"WEEK\"]==47)],x=\"Store\",y=\"Weekly_Sale_before\",hue=\"YEAR\",ax=ax3,palette=\"Set2\")","daf2dc66":"test_pred = test.copy(deep=True)\ntest_pred[\"Weekly_Sales\"] = pred\ntest_pred[['Store', 'Dept', 'Date']] = test_pred[['Store', 'Dept', 'Date']].astype(str)\ntest_pred[\"id\"] = test_pred[\"Store\"] + \"_\" + test_pred[\"Dept\"] + \"_\" + test_pred[\"Date\"]\n\n# test_pred = test_pred[[\"id\",\"Weekly_Sales\"]]\n# test_pred.head()","c3b6a851":"# YEAR\u3068WEEK\u3092test\u30c7\u30fc\u30bf\u3067\u518d\u5ea6\u4f5c\u308b\ntest_pred[\"Date\"] = pd.to_datetime(test_pred[\"Date\"])\ntest_pred[\"YEAR\"] = test_pred[\"Date\"].dt.year\ntest_pred[\"MONTH\"] = test_pred[\"Date\"].dt.month\ntest_pred[\"WEEK\"] = test_pred[\"Date\"].dt.week\ntest_pred","e16493c1":"# Version15\u66f4\u65b0\uff1aDept72 & WEEK47\u306f\u3001\u4e00\u5e74\u524d\u306e\u58f2\u4e0a\u3067\u7f6e\u63db\n# \u5148\u306b\u4f5c\u3063\u3066\u3044\u305f 1\u5e74\u524d\u306e\u58f2\u4e0a\u304c\u5165\u3063\u305fdata_sales\u3092\u30de\u30fc\u30b8\u3057\u3066\u3001\u7f6e\u63db\n\n# \u5148\u7a0bid\u3065\u304f\u308a\u306e\u305f\u3081\u306bstr\u306b\u3057\u3066\u3044\u305f\u306e\u3067int\u306b\u623b\u3059\ntest_pred[['Store', 'Dept']] = test_pred[['Store', 'Dept']].astype(int)\n\ntest_pred_bef = pd.merge(test_pred, data_sales, on=[\"Dept\",\"Store\",\"YEAR\",\"WEEK\"], how=\"left\")\ntest_pred_bef[(test_pred_bef[\"Dept\"] == 72) & (test_pred_bef[\"WEEK\"] == 47)]","127014b9":"test_pred_bef[\"Weekly_Sales\"] = np.where((test_pred_bef[\"Dept\"] == 72) & (test_pred_bef[\"WEEK\"] == 47),  test_pred_bef[\"Weekly_Sale_before\"], test_pred_bef[\"Weekly_Sales\"])\ntest_pred_bef[(test_pred_bef[\"Dept\"] == 72) & (test_pred_bef[\"WEEK\"] == 47)]","50cc1163":"test_pred2 = test_pred_bef.copy()\ntest_pred2[\"Weekly_Sales\"] = np.where((test_pred2[\"YEAR\"]==2012)&(test_pred2[\"WEEK\"]==52)&(test_pred2[\"Weekly_Sales\"].shift(1) > 2*test_pred2[\"Weekly_Sales\"])\\\n                                     ,test_pred2[\"Weekly_Sales\"]+test_pred2[\"Weekly_Sales\"].shift(1)*2.5\/7, test_pred2[\"Weekly_Sales\"])","f2c46172":"# test_pred2[\"Weekly_Sales\"] = np.where(test_pred2[\"IsHoliday\"]==1,test_pred2[\"Weekly_Sales\"]\/5,test_pred2[\"Weekly_Sales\"])","a2e1f385":"test_pred3 = test_pred2[[\"id\",\"Weekly_Sales\"]]\ntest_pred3.head()","ec34b6c4":"submission = test_pred3[[\"id\",\"Weekly_Sales\"]]\nsubmission.to_csv('submission15.csv', index=False)","d05f2ff3":"\u30fbversion5\u3067\u8ffd\u8a18\u3002\nMarkdwon\u3001Fuel temp\u3001CPI\u3001unEmpolyment\u3000\u3092drop\u3059\u308b","8e3f9cd5":"week47 & dept72 \u304c\u304a\u304a\u3044\u3002\u3000\u2190\u3000isHoliday = 1\u306a\u306e\u3067\u3001 \u91cd\u307f5\u500d\u3002\u3053\u308c\u3092\u4fee\u6b63\u3059\u308b\u306e\u304c\u52b9\u304d\u305d\u3046\u3002","79c9a7c2":"\u305a\u308c\u306e\u5927\u304d\u3044Dept72 & WEEK 47\u3067\u3082\u3001\u524d\u5e74\u306e\u58f2\u4e0a\u3068\u76f8\u95a2\u5927\u3002\u306a\u305c\u3053\u308c\u3067\u5927\u304d\u304f\u305a\u308c\u3066\u3057\u307e\u3046\uff1f  \n \u30fb\u3053\u306e\u7279\u6b8a\u306a\u6761\u4ef6\u3060\u3051\u306e\u30d5\u30e9\u30b0\u3092\u4e00\u3064\u4f5c\u3063\u3066\u307f\u308b\u3002  \n \u30fb\uff08\u3053\u306e\u7279\u6b8a\u306a\u6761\u4ef6\u3060\u3051\u3001\u5225\u306e\u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\u3059\u308b\uff1f\uff09 ","e83a772a":"WEEK\u306f\u305a\u308c\u3066\u3044\u306a\u3044\u3002OK","5c6e8804":"\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u306e\u5b9f\u884c\u3002\u5b9f\u884c\u6642\u9593\u9577\u3044\u306e\u3067\u6ce8\u610f\uff08\u7d0430\u5206\uff09","b9099cb0":"![](http:\/\/)\u307b\u307cWeekly_Sale_before\u3067\u6c7a\u3081\u3066\u3044\u308b\u3002","c823ec8c":"# \u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\n5 kfold ","eccfd41f":"LightGBM\n\n\u30fb\u6b20\u640d\u5024\u306f\u305d\u306e\u307e\u307e\u3067OK\n\n\u30fb\u30e9\u30d9\u30eb\u306f\u6570\u5024\u306b\u3059\u308b\u5fc5\u8981\u3042\u308a\u2192label encoding\u3000\u3060\u304c\u3001label encoding\u306f\u6b20\u640d\u5024\u304cNG\u3000\u2192\u3000NA\u3068\u3044\u3046\u6587\u5b57\u5217\u306b\u5909\u63db\u3057\u3066\u304a\u304f","c15fe355":"# baseline\n","3e792597":"# version15 \u5909\u66f4\u70b9\n\u30fb\u305a\u308c\u306e\u5927\u304d\u3044Dept72 & WEEK47\u306e\u30c7\u30fc\u30bf\u306e\u307f\u3001store\u6bce\u306b1\u5e74\u524d\u306e\u5024\u306b\u7f6e\u304d\u63db\u3048\u3066\u307f\u308b\n\n# version14 \u5909\u66f4\u70b9\n\u30fbHiliday *5\u3092\u3084\u3081\u3066\u623b\u3059\u3002\u3000\uff1d\u5358\u7d14\u306bRMSE\u2192MAE\u306e\u52b9\u679c\n\n# version13 \u5909\u66f4\u70b9\n\u30fbRMSE\u3000\u2192\u3000MAE\u3000\u306b\u5909\u66f4\n\n# version12 \u5909\u66f4\u70b9\n\u30fbHoliday\u306eweight * 5 \u3092\u53cd\u6620\u3059\u308b\u305f\u3081\u306b\u3001\u5b66\u7fd2\u30fb\u4e88\u6e2c\u6642\u306bholiday\u306f\u58f2\u4e0a*5\u3092\u884c\u3044\u3001\u6700\u5f8c\u306b5\u3067\u5272\u308a\u623b\u3059\u51e6\u7406\u3092\u8ffd\u52a0\n\n# version11 \u5909\u66f4\u70b9\n\u30fbvalid\u3067\u305a\u308c\u306e\u5927\u304d\u3044 Dept72 & WEEK47\u3000\u306e\u30d5\u30e9\u30b0\u3092\u7acb\u3066\u3066\u307f\u308b\u3002\n\n# version10 \u5909\u66f4\u70b9\n\u30fbvalid\u306e\u5024\u3092\u3001\u6700\u5f8c\u306e\u30e2\u30c7\u30eb\u3067\u306e\u5168\u30c7\u30fc\u30bf\u4e88\u6e2c\u3000\u2192\u3000\u5404fold\u3067\u306evalid\u306e\u4e88\u6e2c\u5024\u3092\u683c\u7d0d\u3001\u306b\u5909\u66f4  \n\u30fb\u30b0\u30e9\u30d5\u5316\u3057\u3066\u8003\u5bdf\n\n# version9 \u5909\u66f4\u70b9\n\u30fbvalidation\u3067\u4e88\u6e2c\u3068\u5b9f\u969b\u306e\u30ba\u30ec\u304c\u5927\u304d\u3044\u30c7\u30fc\u30bf\u306b\u3069\u3093\u306a\u7279\u5fb4\u304c\u3042\u308b\u304b\u3092\u898b\u308b\n\n# version8 \u5909\u66f4\u70b9\n\u30fblight GBM\u306e\u8a66\u884c\u56de\u6570\u309210000\u307e\u3067\u5897\u3084\u3057\u3066\u3069\u3053\u304c\u3044\u3044\u304b\u3092\u898b\u308b\n\n# version7 \u5909\u66f4\u70b9\n\u30fb2012\u5e74\u30af\u30ea\u30b9\u30de\u30b9\u306e\u4fee\u6b63\u3092best kernel \u304b\u3089\u30d1\u30af\u308b  \n>https:\/\/www.kaggle.com\/avelinocaio\/walmart-store-sales-forecasting\n\n# version6 \u5909\u66f4\u70b9\n\u30fbisholiday\u306e\u4fee\u6b63\u3092best kernel \u304b\u3089\u30d1\u30af\u308b\uff08Easter\uff09  \n>https:\/\/www.kaggle.com\/avelinocaio\/walmart-store-sales-forecasting\n\n# version5 \u5909\u66f4\u70b9\n\u30fbMarkdwon\u3001temp\u3001CPI\u3001unEmpolyment\u3000\u3092drop\u3059\u308b  \n\u30fb\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u7701\u7565\u3000\uff08\u524d\u56de\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u305f\u5024\u3067\u56fa\u5b9a\uff09  \n\u3000\u3000best param: max_depth=16, num_leaves=8,min_data_in_leaf=2  \n","0417a5f4":"Version14\u3067\u843d\u3068\u3059\n#Version12 \u8ffd\u8a18  \n#\u30fb**Holiday\u306eweight * 5 \u3092\u53cd\u6620\u3059\u308b\u305f\u3081\u306b\u3001\u5b66\u7fd2\u30fb\u4e88\u6e2c\u6642\u306bholiday\u306f\u58f2\u4e0a*5\u3092\u884c\u3044\u3001**\u6700\u5f8c\u306b5\u3067\u5272\u308a\u623b\u3059\u51e6\u7406\u3092\u8ffd\u52a0","faa240a4":"version7\u3067\u8ffd\u8a18\u3000\n2012\u5e74\u30af\u30ea\u30b9\u30de\u30b9\u306e\u4fee\u6b63\u3092best kernel \u304b\u3089\u30d1\u30af\u308b\u3002  \nYEAR==2012, WEEK==52 \u304b\u3064\u3000last_sales > 2xWeekly_Sales\u3000\u3060\u3063\u305f\u3089last week x 2.5\/7\u3092\u8db3\u3059\n\u3068\u3044\u3046\u306e\u3092store, dept\u3000\u3054\u3068\u306b\u5224\u65ad\u3057\u3066\u5b9f\u884c\u3059\u308b","03eb751e":"Dept72\u3067\u306e\u307f\u3001WEEK47(\uff1dThanksgivingDay) \u306e\u8df3\u306d\u4e0a\u304c\u308a\u304c\u751a\u5927\u3002","699d57e1":"version 11 \u8ffd\u8a18  \nDept72 & WEEK47 \u306e\u30d5\u30e9\u30b0\u3092\u7acb\u3066\u308b","eea1261e":"Dept72, WEEK47\u304c\u76ee\u7acb\u3064\u3002\u3000\u305d\u306e\u4e2d\u3067\u3082YEAR 2011\u304c\u5c11\u3057\u5916\u308c\u6c17\u5473\u304b\uff1f","355ac764":"Submission File\u306e\u4f5c\u6210","5649de01":"Version14\u3067\u843d\u3068\u3059\n#Version12 \u8ffd\u8a18  \n#\u30fbHoliday\u306eweight * 5 \u3092\u53cd\u6620\u3059\u308b\u305f\u3081\u306b\u3001\u5b66\u7fd2\u30fb\u4e88\u6e2c\u6642\u306bholiday\u306f\u58f2\u4e0a*5\u3092\u884c\u3044\u3001\u6700\u5f8c\u306b5\u3067\u5272\u308a\u623b\u3059\u51e6\u7406\u3092\u8ffd\u52a0","ec74e2e9":"# \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\n\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u8a08\u7b97\u6642\u9593\u77ed\u7e2e\u306e\u305f\u3081\u306b\n* 3fold\n* num_boost_round=1000\n\n\u3068\u3059\u308b","152235b5":"version9 \u8ffd\u8a18  \ntrain\u30c7\u30fc\u30bf\u3067\u4e88\u6e2c\u5024\u3068\u6b63\u89e3\u306e\u305a\u308c\u304c\u5927\u304d\u3044\u30ec\u30b3\u30fc\u30c9\u3092\u62bd\u51fa\u3057\u3001\u30ba\u30ec\u3092\u88dc\u6b63\u3059\u308b\u65b9\u6cd5\u3092\u63a2\u308b","2e0298c9":"version 6\u3067\u8ffd\u8a18  \nIsHoliday\u306e\u4fee\u6b63","a077a307":"Holiday_name=4 = WEEK47 = Thanksgivingday\u3000\u304c\u9855\u8457\u3002\n\u305d\u3053\u3067\u7279\u306b1\u5e74\u524d\u30c7\u30fc\u30bf\u3068\u306e\u305a\u308c\u304c\u5927\u304d\u3044\u3068\u3044\u3046\u3053\u3068\u304b\uff1f"}}