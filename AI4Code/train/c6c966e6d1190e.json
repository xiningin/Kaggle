{"cell_type":{"4b5078b1":"code","191f9331":"code","389d16bc":"code","be151c55":"code","f07b81b2":"code","59ad38dd":"code","0e38a544":"code","2eafc654":"code","3d54667c":"code","02a876e2":"code","c1f947fb":"code","6828b60c":"code","54519ac9":"code","af1dfd89":"code","d7224d77":"code","5c5ac1a8":"code","94ed0831":"code","de60df4d":"code","30a96162":"code","623f3529":"code","76108a0a":"code","7c43a6c2":"code","ff922fd6":"code","97a2cb01":"code","14130db5":"code","7b021797":"code","b5e45522":"code","d6b3c05c":"code","135d4642":"code","b2560370":"code","2b0255de":"code","a7642eb6":"code","fc48cc46":"code","4eef9665":"code","c2eadc02":"code","ecaac36c":"code","333ab7b0":"code","187d9a29":"code","baff5fad":"code","ad86ce43":"code","9159f31a":"code","6a59f3b5":"markdown","3e4a186a":"markdown","b63b1d32":"markdown","f58f8139":"markdown","4298e085":"markdown","20bc55ad":"markdown","ccd57a34":"markdown","64e29cb0":"markdown","ccbf1a0e":"markdown","7a5c14b3":"markdown","0559861c":"markdown","6c2552a5":"markdown","02eb46ff":"markdown","d3a67d0c":"markdown","4df5072d":"markdown","5bf93a92":"markdown"},"source":{"4b5078b1":"import pandas as pd\nimport pickle\nimport numpy as np\nimport re\nfrom sklearn import linear_model\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn import linear_model\nfrom sklearn import ensemble \nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.ensemble import BaggingRegressor\n\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import KFold\nimport xgboost as xgb\nfrom sklearn.model_selection import train_test_split\n\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score, KFold\n\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import Ridge\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn import preprocessing\n\nimport os\nimport warnings\nwarnings.filterwarnings('ignore') \nfrom pandas_profiling import ProfileReport","191f9331":"train=pd.read_csv('..\/input\/bike-sharing-demand\/train.csv', parse_dates=['datetime'])\ntest=pd.read_csv('..\/input\/bike-sharing-demand\/test.csv', parse_dates=['datetime'])","389d16bc":"print(train.shape)\nprint(train.head())\nprint(train.dtypes)","be151c55":"profile = ProfileReport(train, title=\"Pandas Profiling Report\")\nprofile","f07b81b2":"# Export html report\nprofile.to_file(\"train_profiling_report.html\")","59ad38dd":"print(test.shape)\nprint(test.columns)\nprint([i for i in train.columns if i not in test.columns]) ","0e38a544":"train = train.drop(['casual','registered'],axis=1)\ntrain.head()","2eafc654":"def rmsle(y_log, y0_log):\n    return np.sqrt(np.mean(np.square(y_log - y0_log)))","3d54667c":"# Remove Outliers\ntrain = train[np.abs(train[\"count\"]-train[\"count\"].mean())<=(3*train[\"count\"].std())] ","02a876e2":"for df in (train,test):\n    \n    df['year'] = df['datetime'].dt.year\n    df['month'] = df['datetime'].dt.month\n    df['day'] = df['datetime'].dt.day\n    df['hr'] = df['datetime'].dt.hour\n\n    df['hr_categori'] = np.nan\n    df.loc[(df.workingday == 1)&(df.hr <= 9)&(df.hr >= 7), 'hr_categori'] = \"rush\"\n    df.loc[(df.workingday == 1)&(df.hr <= 19)&(df.hr >= 16), 'hr_categori'] = \"rush\"\n    df.loc[(df.workingday == 1)&(df.hr < 16)&(df.hr > 9), 'hr_categori'] = \"day\"\n    df.loc[(df.workingday == 1)&(df.hr < 7)|(df.hr > 19), 'hr_categori'] = \"night\"\n  ","c1f947fb":"sns.factorplot(x=\"hr\",y=\"count\",data=train,kind='bar',size=5,aspect=1.5)","6828b60c":"sns.factorplot(x=\"month\",y=\"count\",data=train,kind='bar',size=5,aspect=1.5)","54519ac9":"sns.factorplot(x=\"year\",y=\"count\",data=train,kind='bar',size=5,aspect=1.5)","af1dfd89":"new_df=train.copy()\n\nnew_df['temp_bin']=np.floor(new_df['temp'])\/\/3\n\nsns.factorplot(x=\"temp_bin\",y=\"count\",data=new_df,kind='bar')","d7224d77":"new_df=train.copy()\nnew_df['humidity_bin']=np.floor(new_df['humidity'])\/\/5\n\nsns.factorplot(x=\"humidity_bin\",y=\"count\",data=new_df,kind='bar')","5c5ac1a8":"for df in (train,test):\n    df['humi_categori'] = np.nan\n    df.loc[df.humidity < 15, 'humi_categori'] = 'low'\n    df.loc[(df.humidity <= 85)&(df.humidity >= 15), 'humi_categori'] = 'normal'\n    df.loc[(df.humidity >= 85), 'humi_categori'] = 'high'","94ed0831":"train[train['windspeed']>=48]","de60df4d":"new_df=train.copy()\n\nnew_df['windspeed_bin']=np.floor(new_df['windspeed'])\/\/3\nsns.factorplot(x=\"windspeed_bin\",y=\"count\",data=new_df,kind='bar')","30a96162":"for df in (train,test):\n    df['wind_categori'] = np.nan\n    df.loc[df.windspeed < 15, 'wind_categori'] = 'normal'\n    df.loc[(df.windspeed >= 15), 'wind_categori'] = 'high'","623f3529":"weather_train = pd.get_dummies(train['weather'], prefix='wea', prefix_sep='_')\nweather_test = pd.get_dummies(test['weather'], prefix='wea', prefix_sep='_')\n\nseason_train = pd.get_dummies(train['season'], prefix='sea', prefix_sep='_')\nseason_test = pd.get_dummies(test['season'], prefix='sea', prefix_sep='_')\n\nyear_train = pd.get_dummies(train['year'], prefix='year', prefix_sep='_')\nyear_test = pd.get_dummies(test['year'], prefix='year', prefix_sep='_')\n\nwind_categori_train = pd.get_dummies(train['wind_categori'], prefix='wind_cate', prefix_sep='_')\nwind_categori_test = pd.get_dummies(test['wind_categori'], prefix='wind_cate', prefix_sep='_')\n\nhumi_categori_train = pd.get_dummies(train['humi_categori'], prefix='humi_cate', prefix_sep='_')\nhumi_categori_test = pd.get_dummies(test['humi_categori'], prefix='humi_cate', prefix_sep='_')\n\nhr_categori_train = pd.get_dummies(train['hr_categori'], prefix='hr_cate', prefix_sep='_')\nhr_categori_test = pd.get_dummies(test['hr_categori'], prefix='hr_cate', prefix_sep='_')","76108a0a":"Train_Master = pd.concat([train,\n                          weather_train,\n                          season_train,\n                          year_train,\n                          wind_categori_train,\n                          humi_categori_train,\n                          hr_categori_train\n                         ], axis=1)","7c43a6c2":"Test_Master = pd.concat([test,\n                          weather_test,\n                          season_test,\n                          year_test,\n                          wind_categori_test,\n                          humi_categori_test,\n                          hr_categori_test\n                         ], axis=1)","ff922fd6":"Train_Master = Train_Master.drop(['weather','season','year','datetime','hr_categori','humi_categori','wind_categori'], axis = 1)\nTest_Master = Test_Master.drop(['weather','season','year','datetime','hr_categori','humi_categori','wind_categori'], axis = 1)\n\nTrain, Test = train_test_split(Train_Master, test_size = 0.3)","97a2cb01":"X_train = Train.drop(['count'], axis=1)\nY_train = Train['count']\nY_train_log = Train['count'].apply(lambda x:np.log1p(x))\n\nX_test = Test.drop(['count'], axis=1)\nY_test = Test[\"count\"]\nY_test_log = Test[\"count\"].apply(lambda x:np.log1p(x))\n\nY_test = Y_test.reset_index().drop('index',axis = 1)\nY_train = Y_train.reset_index().drop('index',axis = 1)","14130db5":"print(Train_Master.columns, Train_Master.shape)\nprint(Test_Master.columns, Test_Master.shape)\nprint([i for i in Train_Master.columns if i not in Test_Master.columns]) ","7b021797":"def lasso_autotune(X,y):\n\n    param_test = {\n     'max_iter':[5000],\n     'alpha':[1e-10, 1e-8, 1e-4,1e-2, 1, 5, 10, 100, 500, 1000]\n    }\n\n    gsearch = GridSearchCV(Lasso(fit_intercept=True, normalize=True, selection='random'),refit=True,\n                            param_grid = param_test, scoring='neg_mean_squared_error',iid=True, cv=5)\n    gsearch.fit(X,y)\n    print('____________________________________________')\n    print('tune lasso')\n    print('____________________________________________')\n    print(gsearch.cv_results_)\n    print(gsearch.best_params_)\n    print(gsearch.best_score_)\n    print(rmsle(gsearch.predict(X),y))\n\n    return gsearch.best_estimator_","b5e45522":"def ridge_autotune(X,y):\n\n    param_test = {\n     'max_iter':[5000],        \n     'alpha':[1e-10, 1e-8, 1e-4,1e-2, 1, 5, 10, 100],\n     'solver':['auto', 'svd', 'cholesky', 'lsqr', 'sparse_cg', 'sag', 'saga']\n    }\n\n    gsearch = GridSearchCV(Ridge(),refit=True,\n                            param_grid = param_test, scoring='neg_mean_squared_error',iid=True, cv=5)\n    gsearch.fit(X,y)\n    print('____________________________________________')\n    print('tune ridge')\n    print('____________________________________________')\n    print(gsearch.cv_results_)\n    print(gsearch.best_params_)\n    print(gsearch.best_score_)\n    print(rmsle(gsearch.predict(X),y))\n\n    return gsearch.best_estimator_","d6b3c05c":"def random_forest_autotune(X,y):\n\n    param_test = {\n     'max_depth':[9,13,17],\n     'max_features':['auto','sqrt'],\n     'n_estimators': [500,1000,1500]\n    }\n\n    gsearch = GridSearchCV(RandomForestRegressor(),refit=True,\n                            param_grid = param_test, scoring='neg_mean_squared_error',iid=True, cv=5)\n    gsearch.fit(X,y)\n    print('____________________________________________')\n    print('tune random forest')\n    print('____________________________________________')\n    print(gsearch.cv_results_)\n    print(gsearch.best_params_)\n    print(gsearch.best_score_)\n    print(rmsle(gsearch.predict(X),y))\n\n    return gsearch.best_estimator_","135d4642":"def xgb_autotune(X,y):\n    param = {\n            'objective':'reg:squarederror',\n            'n_estimators':1000,\n            'learning_rate':0.05,\n            'gamma':0,\n            'max_depth':5,\n            'min_child_weight':1,\n            'colsample_bytree':0.5,\n            'subsample': 0.8, \n            'verbose':1,\n            'reg_alpha':0}\n\n\n    param_test1 = {\n     'max_depth':[7,13,15],\n     'reg_alpha':[0.1,1,10,100],\n     'learning_rate':[0.05,0.1],\n    }\n\n    gsearch = GridSearchCV(xgb.XGBRegressor(objective=param['objective'],\n                              n_estimators=param['n_estimators'], learning_rate = param['learning_rate'], gamma=param['gamma'],\n                              colsample_bytree=param['colsample_bytree'], subsample=param['subsample'], reg_alpha=param['reg_alpha']\n                              ),\n                            param_grid = param_test1, scoring='neg_mean_squared_error',iid=False, cv=5)\n    gsearch.fit(X,y)\n    print('____________________________________________')\n    print('tune max_depth, min_child_weight')\n    print('____________________________________________')\n    print(gsearch.cv_results_)\n    print(gsearch.best_params_)\n    print(gsearch.best_score_)\n    print(rmsle(gsearch.predict(X),y))\n    return gsearch.best_estimator_","b2560370":"lasso_param = lasso_autotune(X_train,Y_train_log)\nridge_param = ridge_autotune(X_train,Y_train_log)\nxgb_param = xgb_autotune(X_train,Y_train_log)\nrandom_forest_param = random_forest_autotune(X_train,Y_train_log)","2b0255de":"model_names=['lasso','ridge','xgb','random forest']\nrmsles=[]\n\nprint('='*15)\nprint('lasso test score')\nrmsles.append(rmsle(lasso_param.predict(X_test),Y_test_log))\nprint(rmsle(lasso_param.predict(X_test),Y_test_log))\nprint('='*15)\n\nprint('='*15)\nprint('ridge test score')\nrmsles.append(rmsle(ridge_param.predict(X_test),Y_test_log))\nprint(rmsle(ridge_param.predict(X_test),Y_test_log))\nprint('='*15)\n\nprint('='*15)\nprint('xgb test score')\nrmsles.append(rmsle(xgb_param.predict(X_test),Y_test_log))\nprint(rmsle(xgb_param.predict(X_test),Y_test_log))\nprint('='*15)\n\nprint('='*15)\nprint('random forest test score')\nrmsles.append(rmsle(random_forest_param.predict(X_test),Y_test_log))\nprint(rmsle(random_forest_param.predict(X_test),Y_test_log))\nprint('='*15)\n\nd={'Modelling Algo':model_names,'RMSLE':rmsle} \nprint(d)","a7642eb6":"predict_met = pd.DataFrame(data={method: [np.nan] * X_train.shape[0] for method in ['lasso', 'ridge', \n                                                                                  'xgb', 'random forest',\n                                                                                   ]})","fc48cc46":"predict_met['lasso'] = lasso_param.predict(X_train)\npredict_met['ridge'] = ridge_param.predict(X_train)\npredict_met['xgb'] = xgb_param.predict(X_train)\npredict_met['random forest'] = random_forest_param.predict(X_train)\n\npredict_met.head()","4eef9665":"ensenble_xgb = xgb_autotune(predict_met, Y_train_log)","c2eadc02":"test_met = pd.DataFrame(data={method: [np.nan] * X_test.shape[0] for method in ['lasso', 'ridge', \n                                                                                  'xgb', 'random forest',\n                                                                               ]})\n\ntest_met['lasso'] = lasso_param.predict(X_test)\ntest_met['ridge'] = ridge_param.predict(X_test)\ntest_met['xgb'] = xgb_param.predict(X_test)\ntest_met['random forest'] = random_forest_param.predict(X_test)","ecaac36c":"print('='*15)\nprint('outer layer test score')\nprint(rmsle(ensenble_xgb.predict(test_met),Y_test_log))\nprint('='*15)","333ab7b0":"Test_Master['humi_cate_low'] = 0\nTest_Master = Test_Master[X_train.columns]","187d9a29":"result_met = pd.DataFrame(data={method: [np.nan] * Test_Master.shape[0] for method in ['lasso', 'ridge', \n                                                                                  'xgb', 'random forest',\n                                                                                      ]})\nresult_met['lasso'] = lasso_param.predict(Test_Master)\nresult_met['ridge'] = ridge_param.predict(Test_Master)\nresult_met['xgb'] = xgb_param.predict(Test_Master)\nresult_met['random forest'] = random_forest_param.predict(Test_Master)\n                        \nresult_met.head()                     ","baff5fad":"pred_log = ensenble_xgb.predict(result_met)","ad86ce43":"pred = np.expm1(pred_log)\n\nsubmission={'datetime':test['datetime'],'count':pred}\nsubmission = pd.DataFrame(submission)\n\nsubmission['count'] = submission.apply(lambda x : 1 if (x['count'] <= 0) else x['count'], axis = 1)\nsubmission.to_csv(\"submission.csv\", index=False)","9159f31a":"submission","6a59f3b5":"#### Train\/Test Set Integration","3e4a186a":"## Fitting 2nd layer model","b63b1d32":"#### Hour","f58f8139":"## Understanding the Data Set","4298e085":"#### Month","20bc55ad":"## Auto Tuning","ccd57a34":"## Fitting Test Set","64e29cb0":"## Importing Neccessary Libraries","ccbf1a0e":"#### Convert categorical variable into dummy variables","7a5c14b3":"## EDA & Feature Engineering","0559861c":"#### Year","6c2552a5":"## Submit to competiton","02eb46ff":"## Fitting 1st layer models","d3a67d0c":"#### Temp","4df5072d":"#### Windspeed","5bf93a92":"#### Humidity"}}