{"cell_type":{"70052523":"code","adb70bba":"code","e91e5167":"code","badfd9c4":"code","8f12a149":"code","060b76b5":"code","5abce8e5":"code","b2972587":"code","138c1229":"code","1f07711a":"code","8e8978a5":"code","ab1ef0af":"code","5e96c12d":"code","08fc2454":"code","7d3bd73d":"code","869d6241":"code","66bfa3f1":"code","479c884b":"code","0ba1b07c":"code","b44de162":"code","2395fa5c":"code","b32407ca":"code","2a19de1d":"code","66ce371b":"code","c2996a61":"code","892a7241":"code","aaa3d84c":"code","17fa3d7e":"code","5cb9a31d":"code","c22ba018":"markdown","6677b8c8":"markdown","3155aaa0":"markdown","fad0ac63":"markdown","c72bd664":"markdown","53993a6c":"markdown","293b29cb":"markdown","004bac74":"markdown","e4d62c73":"markdown","f1751536":"markdown","432c51d6":"markdown","31ca8a70":"markdown"},"source":{"70052523":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport sklearn\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold, StratifiedKFold #for K-fold cross validation\nfrom sklearn.model_selection import cross_val_score #score evaluation: CROSS VALIDATION\nfrom sklearn.model_selection import cross_val_predict #prediction\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import plot_confusion_matrix, f1_score, recall_score, precision_score, accuracy_score, classification_report\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","adb70bba":"data=pd.read_csv('\/kaggle\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\ndata.head()","e91e5167":"data.shape","badfd9c4":"data.isnull().sum()","8f12a149":"data.describe()","060b76b5":"data.info()","5abce8e5":"cat_cols=[c for c in data.columns if data[c].isin([0,1]).all()]\ncat_cols.remove('DEATH_EVENT')\nprint(cat_cols)","b2972587":"num_cols=[c for c in data.columns if c not in cat_cols]\nnum_cols.remove('DEATH_EVENT')\nnum_cols","138c1229":"c=pd.melt(data, id_vars='DEATH_EVENT', value_vars=cat_cols)\ngrid=sns.FacetGrid(c, col_wrap=3, col='variable', sharex=False, sharey=True, height=4)\ngrid.map(sns.barplot, 'value', 'DEATH_EVENT', palette='Set2', order=[0,1])","1f07711a":"c=pd.melt(data, id_vars='DEATH_EVENT', value_vars=cat_cols)\nsns.catplot(x='value', hue='DEATH_EVENT', col='variable', data=c, palette='RdYlBu', kind=\"count\", \n            col_wrap=3, height=4, aspect=.7, sharex=False, sharey=True)\n","8e8978a5":"data[num_cols]","ab1ef0af":"melt=pd.melt(data, value_vars=num_cols)\ngrid=sns.FacetGrid(melt, col='variable',col_wrap=3, sharex=False, sharey=False, height=4, aspect=1)\ngrid.map(sns.distplot, 'value')","5e96c12d":"melt=pd.melt(data, value_vars=num_cols)\ngrid=sns.FacetGrid(melt, col='variable',col_wrap=2, sharex=False, sharey=False, aspect=2)\ngrid.map(sns.boxplot, 'value')","08fc2454":"sns.countplot(data['DEATH_EVENT'])","7d3bd73d":"correlation=data.corr().abs()\nfig=plt.figure(figsize=(15,12))\nax=plt.gca()\nsns.heatmap(correlation, annot=True, cmap='RdYlBu', mask=np.triu(correlation, k=0), ax=ax)","869d6241":"cm = sns.light_palette(\"green\", as_cmap=True)\ncolumns=correlation.nlargest(5, 'DEATH_EVENT').index.tolist()\ncorrelation.nlargest(5, 'DEATH_EVENT')[columns].style.background_gradient(cmap=cm)","66bfa3f1":"X=data[columns].drop('DEATH_EVENT', axis=1)\ny=data['DEATH_EVENT']\nprint(columns)","479c884b":"X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0, test_size=0.2, shuffle=True)","0ba1b07c":"# Feature Scaling\n\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","b44de162":"model = LogisticRegression(random_state=0)\nmodel.fit(X_train, y_train)\nlog_preds = model.predict(X_test)\nprint('Logistic Regression ', accuracy_score(y_test, log_preds))","2395fa5c":"plot_confusion_matrix(model, X_test, y_test) ","b32407ca":"print('Logistic Regression f1-score:', f1_score(y_test, log_preds))\nprint('Logistic Regression precision:', precision_score(y_test, log_preds))\nprint('Logistic Regression recall:', recall_score(y_test, log_preds))","2a19de1d":"print(classification_report(y_test, log_preds))","66ce371b":"sklearn.metrics.SCORERS.keys()","c2996a61":"#Stratified Kfold for imbalanced classification problem.\nstkfold=StratifiedKFold(n_splits=5)\nscores=cross_val_score(model, X, y, cv = stkfold, scoring = \"f1\")\nscores.mean()","892a7241":"knn_scores=[]\nfor i in range(1,25):\n    model=KNeighborsClassifier(n_neighbors=i)\n    model.fit(X_train, y_train)\n    knn_preds=model.predict(X_test)\n    knn_scores.append(f1_score(y_test, knn_preds))","aaa3d84c":"plt.figure(figsize=(12,8))\nplt.plot(range(1,25,1), knn_scores)\nticks=plt.gca().set_xticks(range(1,25))","17fa3d7e":"knn_model=KNeighborsClassifier(n_neighbors=7)\nknn_model.fit(X_train, y_train)\nknn_preds=model.predict(X_test)\nprint(\"f1 score:\",f1_score(y_test, knn_preds))\nprint()\nprint(classification_report(y_test, knn_preds))","5cb9a31d":"rf_model=RandomForestClassifier(max_leaf_nodes=100, max_depth=10,random_state=0)\nrf_model.fit(X_train, y_train)\nrf_preds=rf_model.predict(X_test)\nprint(\"f1 score:\",f1_score(y_test, rf_preds))\nprint()\nprint(classification_report(y_test, rf_preds))","c22ba018":"## CATEGORICAL FEATURES","6677b8c8":"## Random Forest","3155aaa0":"# **Heart Failure Dataset**","fad0ac63":"## Target Variable: DEATH_EVENT","c72bd664":"## CORRELATIONS","53993a6c":"## NUMERICAL FEATURES","293b29cb":"# MODELLING","004bac74":"* time(?)\n* serum_creatinine    \n* ejection_fraction \nare the top 3 correlated vars with our target.","e4d62c73":"## Base Model: Logistic Regression","f1751536":"We are dealing with imbalanced classification problem.","432c51d6":"**Cross Validation**","31ca8a70":"## K Nearest Neighbor"}}