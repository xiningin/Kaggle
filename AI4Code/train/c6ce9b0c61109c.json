{"cell_type":{"784c1723":"code","c9cdc56e":"code","a104fcc1":"code","7a404a18":"code","9b16de64":"code","cc544b4f":"code","9b107f55":"code","1ff217f1":"code","7c3c4b59":"code","f2fbec76":"code","09b0b00d":"code","cf24b822":"code","89f27325":"code","e0466a3f":"code","abc2b8b3":"code","a85304c1":"code","0fd2d5a1":"code","986d0af4":"code","20919b36":"code","deb59d8d":"code","f28e40d4":"code","332ee7c1":"code","a5f4ff51":"code","a654b896":"code","641930dc":"code","248459a3":"code","69f40958":"code","82175010":"code","c97f0f70":"code","9c555027":"code","faa3e8e3":"code","9fb179aa":"code","be2bc8c9":"code","a9554940":"code","af2d51b9":"code","fc08ea16":"code","237dc260":"code","9541e5ed":"code","61bd04db":"code","baec0b59":"markdown","d9923694":"markdown","b6d5260c":"markdown","60ed7d0d":"markdown","fe8b129a":"markdown","faf542f5":"markdown","c57632c9":"markdown","4f4f551c":"markdown","75daf56a":"markdown","9152fa0b":"markdown","1f4a2b69":"markdown","45706322":"markdown","cf8273d0":"markdown","da522c7d":"markdown","fb77b21c":"markdown","9d0be973":"markdown","b0d24797":"markdown","87b24466":"markdown","9005369e":"markdown","7c78db1b":"markdown"},"source":{"784c1723":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","c9cdc56e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n#from IPython.display import display\n#import sweetviz as sv\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler, OneHotEncoder\n\nfrom sklearn.model_selection import train_test_split, cross_val_score,  RepeatedStratifiedKFold,RandomizedSearchCV, GridSearchCV\n\n\nfrom sklearn.metrics import classification_report, roc_curve, confusion_matrix\n\nfrom imblearn.over_sampling import SMOTE\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom imblearn.pipeline import Pipeline\nfrom collections import Counter\n\nfrom sklearn.impute import KNNImputer\n\n# modelos\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier, GradientBoostingClassifier, \\\nVotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC","a104fcc1":"df = pd.read_csv(\"..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv\")\ndf = df.drop(['id'], axis=1)\ndf.info()","7a404a18":"df.isnull().sum()","9b16de64":"## you can donwload this notebook, and instal SweetViz. Then, uncomment these lines for some cool data exploration.\n\n#analise = sv.analyze(df)\n#analise.show_html('analise.html', layout = 'vertical', scale =1.0);","cc544b4f":"df.head(2)","9b107f55":"df.work_type.value_counts()","1ff217f1":"df['bmi']","7c3c4b59":"sns.boxplot(data = df[['age', 'avg_glucose_level','bmi']])","f2fbec76":"imputer = KNNImputer(n_neighbors = 6)\ndf['bmi'] = imputer.fit_transform(np.array(df['bmi']).reshape(-1,1))\ndf.isnull().sum()","09b0b00d":"sns.distplot(df['bmi'])","cf24b822":"bmi_group = []\nfor bmi in df['bmi']:\n    if bmi < 17.0:\n        bmi_group.append(0)\n    \n    elif (bmi >= 17.0) & (bmi <= 18.49):\n        bmi_group.append(1)\n    \n    elif (bmi >= 18.50) & (bmi <= 24.99):\n        bmi_group.append(2)\n    \n    elif (bmi >= 25.0) & (bmi <= 29.99):\n        bmi_group.append(3)\n    \n    elif (bmi >= 30.0) & (bmi <= 34.99):\n        bmi_group.append(4)\n    \n    elif (bmi >= 35.0) & (bmi <= 39.99):\n        bmi_group.append(5)\n    \n    elif (bmi > 39.99):\n        bmi_group.append(6)\n    \ndf['bmi_group'] = bmi_group   \ndf = df.drop(['bmi'], axis=1)","89f27325":"df.columns","e0466a3f":"df['gender'].value_counts()","abc2b8b3":"df['gender'] = df['gender'].replace(to_replace='Other', value='Female')\ndf['gender'].value_counts()","a85304c1":"df['age'] = df['age'].apply(lambda x: round(x))\ndf['age']","0fd2d5a1":"scaler = StandardScaler()\ndf_scale = pd.DataFrame(scaler.fit_transform(df[['age', 'avg_glucose_level']]))\ndf_scale[['age', 'avg_glucose_level']] = df_scale\ndf_scale = df_scale[['age', 'avg_glucose_level']]\n\ndf.drop(columns = ['age', 'avg_glucose_level'], inplace=True)\ndf = pd.concat([df, df_scale], axis=1)\nsns.boxplot(data = df[['age', 'avg_glucose_level']])","986d0af4":"df_temp = pd.get_dummies(df, drop_first = True)","20919b36":"plt.subplots(figsize=(14,8))\nsns.heatmap(df_temp.corr(), annot = True, cmap='coolwarm')","deb59d8d":"ohe = OneHotEncoder(drop = 'first', sparse=False, handle_unknown = 'error')\ndf_t = pd.DataFrame(ohe.fit_transform(df.select_dtypes('object')))\n\ndf_t.columns = ohe.get_feature_names()\ndf_t.head(2)\ndf_t.shape","f28e40d4":"df_n = df.drop(df.select_dtypes('object'), axis=1)\n\ndf = pd.concat([df_t, df_n], axis=1)\ndf.head(2)","332ee7c1":"k_values = [1, 2, 3, 4, 5, 6, 7]\nX = df.drop(['stroke'], axis=1)\ny = df.stroke\n\nk_scores = []\nfor k in k_values:\n    # define pipeline\n    rf = RandomForestClassifier()\n    over  = SMOTE(sampling_strategy=0.1, k_neighbors=k)\n    steps = [('over', over), ('model', rf)]\n    \n    pipeline = Pipeline(steps=steps)\n    \n    # evaluate pipeline\n    cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\n    \n    scores = cross_val_score(rf, X, y, scoring='roc_auc', cv=cv, n_jobs=-1)\n    score = np.mean(scores)\n    k_scores.append((k, score))\n    print('> k=%d, Mean ROC AUC: %.3f' % (k, score))","a5f4ff51":"sorted(k_scores, key=lambda tup: tup[1])","a654b896":"best_k = sorted(k_scores, key=lambda tup: tup[1])[-1][0]\nbest_k","641930dc":"over  = SMOTE(k_neighbors=best_k)\n\nsteps = [('over', over)]\npipeline = Pipeline(steps=steps)\nX, y = pipeline.fit_resample(X, y)\ncounter = Counter(y)\nprint(counter)","248459a3":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, stratify = y, random_state=42)","69f40958":"X_train.columns","82175010":"rf = RandomForestClassifier()\n\nn_estimators = [100,500,700,1000]\nmax_depth = [int(x) for x in np.linspace(10, 110, num = 11)]\nmax_depth.append(None)\nmin_samples_split = [2, 5, 10]\nmin_samples_leaf = [1, 2, 4]\nbootstrap = [True, False]\n\ngrid =         {'n_estimators': n_estimators,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}\n#search_nc = GridSearchCV(estimator = pipeline, param_grid = grid, cv = 5, verbose=1, n_jobs=-1)\nsearch = RandomizedSearchCV(estimator = rf, param_distributions = grid, cv = 5, verbose=1, n_jobs=-1)\n","c97f0f70":"search.fit(X_train, y_train)\npreds = search.predict(X_test)\nprint(classification_report(y_test, preds))","9c555027":"gbr = GradientBoostingClassifier()\n\nparameters = {\n    \"loss\":[\"deviance\"],\n    \"learning_rate\": [0.01],#, 0.025, 0.05, 0.075, 0.1, 0.15, 0.2],\n    #\"min_samples_split\": [1,2,3],\n    \"min_samples_leaf\": [1,2,3],\n    'max_depth' : [None, 2,3,5,10],\n    #\"subsample\":[0.5, 0.618, 0.8, 0.85, 0.9, 0.95, 1.0],\n    \"n_estimators\":[100, 300, 500, 1000],\n    \"warm_start\" : [False, True]\n    \n    }\n#search_gbr = RandomizedSearchCV(estimator = gbr, param_distributions = parameters, cv = 5, verbose = 2, n_jobs = -1)\nsearch_gbr = RandomizedSearchCV(estimator = gbr,param_distributions = parameters, scoring = 'roc_auc',cv = 5, verbose = 2, n_jobs = -1)","faa3e8e3":"extra_trees = ExtraTreesClassifier()\nsearch_extra = RandomizedSearchCV(estimator = extra_trees,param_distributions = grid, scoring = 'roc_auc',cv = 5, verbose = 2, n_jobs = -1)","9fb179aa":"svc = SVC()\nsvc_grid = {'kernel':['linear','rbf'], 'probability' : [True]}\nsearch_svc = RandomizedSearchCV(estimator = svc, param_distributions = svc_grid, scoring = 'roc_auc',cv = 5, verbose = 2, n_jobs = -1)","be2bc8c9":"knn = KNeighborsClassifier()\nparameters_KNN = {\n    'n_neighbors': (1,30, 1),\n    'leaf_size': (20,40,1),\n    'p': (1,2),\n    'weights': ('uniform', 'distance'),\n    'metric': ('minkowski', 'chebyshev')\n}\nsearch_knn = RandomizedSearchCV(estimator = knn, param_distributions = parameters_KNN, scoring = 'roc_auc',cv = 5, verbose = 2, n_jobs = -1)","a9554940":"X_test.columns","af2d51b9":"voting_clf = VotingClassifier( estimators = [('rfr', search ),('gbr', search_gbr),('extra', search_extra),('svc', search_svc), ('knn', knn)], voting = 'soft')\nvoting_clf.fit(X_train, y_train);\npreds = voting_clf.predict(X_test)\nprint(classification_report(y_test, preds))","fc08ea16":"probas = voting_clf.predict_proba(X_test)\n#Gets class 1 probas\nprobas = probas[:, 1]\nfpr, tpr, thresholds = roc_curve(y_test, probas)\n\n# calculates g-mean for each threshold\ngmeans = (tpr * (1-fpr)) ** (1\/2)\n# finds the index of the highest g-mean\nix = np.argmax(gmeans)\nbest_threshold = thresholds[ix]\nprint('Melhor Threshold = %f, G-Mean = %.3f' % (thresholds[ix], gmeans[ix]))\n\nplt.plot([0,1], [0,1], linestyle='--', label='No Skill')\nplt.plot(fpr, tpr, marker='.', label='RFC')\nplt.scatter(fpr[ix], tpr[ix], marker = 'o', color = 'black', label = 'Best')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend()\nplt.show()","237dc260":"decisions = (probas >= best_threshold).astype(int)\nprint(classification_report(y_test, decisions))","9541e5ed":"print(confusion_matrix(y_test, decisions))","61bd04db":"import pickle\n# save the model\npickle.dump(voting_clf, open('modelo_voting_classifier.pkl', 'wb'))\n\n# save the scaler\npickle.dump(scaler, open('scaler.pkl', 'wb'))\n\npickle.dump(ohe, open('ohe.pkl', 'wb'))","baec0b59":"## replace gender == 'other'","d9923694":"## bmi - KNNImputer","b6d5260c":"## Gradient Boost","60ed7d0d":"# Modeling","fe8b129a":"## OneHot","faf542f5":"## Correlations","c57632c9":"## Rounding Age","4f4f551c":"## Voting Classifier","75daf56a":"# Moving Threshold","9152fa0b":"## Saving Modules","1f4a2b69":"## Knn Classifier","45706322":"Etapas de pr\u00e9-processamento:\n- Input de missing values em 'bmi', utilizando knn imputer\n- O mesmo para smoking status unknown, mantendo a coluna 'stroke'(?)\n- Gender = 'other' replace 'female'\n- Escalonar as colunas ['age', 'avg_glucose_level','bmi']\n","cf8273d0":"## random forest","da522c7d":"## bmi groups","fb77b21c":"# Models + voting classifier","9d0be973":"# Testing k_neighbors for SMOTE","b0d24797":"## SVC","87b24466":"## Extra trees\n","9005369e":"## Scaling","7c78db1b":"# AED"}}