{"cell_type":{"bd763bbb":"code","8e3e1fac":"code","c8d03e3d":"code","567c468f":"code","aa9d0740":"code","3b540b6f":"code","9bd856c1":"code","05579fed":"code","06045be3":"code","dc284c34":"code","c3a8fece":"code","2d3c765a":"code","5617ea35":"code","772c4f2b":"code","13a95198":"code","aeb2b189":"code","5d281999":"markdown","9bc497e4":"markdown","c7d61612":"markdown","2e0cb029":"markdown","2efd6e5e":"markdown","1e0eee82":"markdown","27a8b800":"markdown","54c25457":"markdown","a511f730":"markdown","f7eed5f8":"markdown"},"source":{"bd763bbb":"import os\nimport random\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport cv2","8e3e1fac":"PATH_DATASET = \"..\/input\/lego-minifigures-classification\"\nPATH_INDEX = os.path.join(PATH_DATASET, \"index.csv\")\nPATH_TEST = os.path.join(PATH_DATASET, \"test.csv\")\nPATH_METADATA = os.path.join(PATH_DATASET, \"metadata.csv\")","c8d03e3d":"df_index = pd.read_csv(PATH_INDEX)\ndf_index","567c468f":"df_test = pd.read_csv(PATH_TEST)\ndf_test","aa9d0740":"n_classes = df_index[\"class_id\"].unique().shape[0]\nprint(f\"Total classes: {n_classes}\")","3b540b6f":"df_metadata = pd.read_csv(PATH_METADATA)\nprint(f\"Number of rows {df_metadata.shape[0]}\")\ndf_metadata.head()","9bd856c1":"print('Minifigure names: ' + ' ||| '.join(df_metadata['minifigure_name'].tolist()))","05579fed":"df_metadata[df_metadata['minifigure_name'] == 'SPIDER-MAN']","06045be3":"df_index = pd.merge(df_index, df_metadata[['class_id', 'minifigure_name']], on='class_id')\ndf_test = pd.merge(df_test, df_metadata[['class_id', 'minifigure_name']], on='class_id')\ndf_index","dc284c34":"df_index['tmp_name'] =  df_index['class_id'].astype(str) + ' - ' + df_index['minifigure_name']\ndf_test['tmp_name'] =  df_test['class_id'].astype(str) + ' - ' + df_test['minifigure_name']\n\nplt.figure(figsize=(16, 16))\n\n\nplt.subplot(1, 2, 1)\nsns.countplot(y=\"tmp_name\", data=df_index)\nplt.title(\"Train Classes Distibution\", fontsize=18)\nplt.xticks(fontsize=14)\nplt.xlabel('number of samples', fontsize=16);\nplt.yticks(fontsize=14)\nplt.ylabel('class id', fontsize=16)\nplt.legend(fontsize=15)\n\nplt.subplot(1, 2, 2)\nsns.countplot(y=\"class_id\", data=df_test.sort_values('class_id'))\nplt.title(\"Test Classes Distibution\", fontsize=18)\nplt.xticks(fontsize=14)\nplt.xlabel('number of samples', fontsize=16);\nplt.yticks(fontsize=14)\nplt.ylabel('class id', fontsize=16)\nplt.legend(fontsize=15);","c3a8fece":"plt.figure(figsize=(16, 10))\nfor ind, el in enumerate(df_index.sample(15).iterrows(), 1):\n    plt.subplot(3, 5, ind)\n    image = cv2.imread(os.path.join(PATH_DATASET, el[1]['path']))\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    plt.imshow(image)\n    plt.title(f\"{el[1]['class_id']}: {el[1]['minifigure_name']}\")\n    plt.xticks([])\n    plt.yticks([])","2d3c765a":"plt.figure(figsize=(16, 10))\nfor ind, el in enumerate(df_test.sample(15).iterrows(), 1):\n    plt.subplot(3, 5, ind)\n    image = cv2.imread(os.path.join(PATH_DATASET, el[1]['path']))\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    plt.imshow(image)\n    plt.title(f\"{el[1]['class_id']}: {el[1]['minifigure_name']}\")\n    plt.xticks([])\n    plt.yticks([])","5617ea35":"plt.figure(figsize=(16, 5))\nfor ind, el in enumerate(df_index[df_index['minifigure_name'] == 'YODA'].sample(5).iterrows(), 1):\n    plt.subplot(1, 5, ind)\n    image = cv2.imread(os.path.join(PATH_DATASET, el[1]['path']))\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    plt.imshow(image)\n    plt.title(f\"{el[1]['class_id']}: {el[1]['minifigure_name']}\")\n    plt.xticks([])\n    plt.yticks([])","772c4f2b":"plt.figure(figsize=(16, 5))\nfor ind, el in enumerate(df_test[df_test['minifigure_name'] == 'YODA'].iterrows(), 1):\n    plt.subplot(1, 5, ind)\n    image = cv2.imread(os.path.join(PATH_DATASET, el[1]['path']))\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    plt.imshow(image)\n    plt.title(f\"{el[1]['class_id']}: {el[1]['minifigure_name']}\")\n    plt.xticks([])\n    plt.yticks([])","13a95198":"n_rows = df_index['class_id'].unique().shape[0]\nn_cols = 5\n\nfor row_ind, group in enumerate(df_index.groupby('class_id')):\n    plt.figure(figsize=(20, 5))\n    for col_ind, el in enumerate(group[1].sample(n_cols).iterrows()):\n        plt.subplot(1, n_cols, col_ind + 1)\n        image = cv2.imread(os.path.join(PATH_DATASET, el[1]['path']))\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        plt.imshow(image)\n        plt.xticks([])\n        plt.yticks([])\n    plt.show()","aeb2b189":"plt.figure(figsize=(64, 16))\nplt.subplots_adjust(wspace=0, hspace=0)\n\npaths = df_index['path'].tolist()\npaths = random.sample(paths, 100)\nfor ind, path in enumerate(paths, 1):\n    plt.subplot(5, 20, ind)\n    image = cv2.imread(os.path.join(PATH_DATASET, path))\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    image = cv2.resize(image, (512, 512))\n    plt.imshow(image)\n    plt.xticks([])\n    plt.yticks([])","5d281999":"### Train YODA images","9bc497e4":"### Test YODA images","c7d61612":"### Count of samples by each class id in train and valid splits","2e0cb029":"For different minigigures we can have the same names in the dataset: for example we have classic and black (from the \"SPIDER-MAN: FAR FROM HOME\" film) SPIDER-MANS","2efd6e5e":"### class_id - the key for merge index and metadata files","1e0eee82":"### Test images","27a8b800":"### Please Upvote [this](https:\/\/www.kaggle.com\/ihelon\/lego-minifigures-classification) dataset \ud83d\ude00","54c25457":"# Simple EDA for [LEGO Minifigures](https:\/\/www.kaggle.com\/ihelon\/lego-minifigures-classification) dataset\n\n\n![](https:\/\/i.imgur.com\/4cPQlEN.jpg)","a511f730":"### Train images","f7eed5f8":"It can be important to know the not only ***minifigure_name*** but ***class_id*** of the Minifigure too "}}