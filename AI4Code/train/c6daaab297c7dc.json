{"cell_type":{"a461a73b":"code","e6cfd3bf":"code","1512c7bb":"code","00b77b1e":"code","3611b618":"code","0782bf6d":"code","fa031693":"code","ed46f24d":"code","8f6b4f3e":"code","7d3e2452":"code","c717d6d3":"code","85b2d488":"code","a460bd2f":"code","045885a6":"code","5d9106e6":"code","5d9daf29":"code","0cd7aabd":"code","b080215f":"code","6155b14a":"code","20069522":"code","8d6cd313":"code","c2f6d689":"code","95a65e49":"code","e136368a":"code","e3135932":"code","217cc884":"code","f73c3060":"code","a12d8104":"code","7f171b41":"code","828b83a5":"code","db7a065c":"code","88bf5edf":"code","01426dc2":"code","5e7b1b42":"code","c1cde705":"code","6db001ed":"code","3e227be8":"code","e8a40624":"code","d9d86d7c":"code","b2216ec2":"code","9436f0a7":"code","d60ac0c5":"code","cf428687":"code","efa3bd71":"code","0c887c28":"code","086e87f3":"code","6d08b1a2":"code","3a331633":"code","854761ae":"code","85bba4d5":"code","982243c2":"code","7515a89d":"code","51469d15":"code","98025c8a":"code","953a7c5d":"code","f460447f":"code","6bc84a05":"code","e7531762":"code","8755e9d2":"code","7022fad8":"code","e429f3d7":"code","41287966":"code","890f1370":"code","73d82a2c":"code","2915834d":"code","f4e7ad83":"code","bcfba9e9":"code","035359a1":"code","8eb27758":"code","ff16115e":"code","10886efa":"markdown","562092d3":"markdown","7280beab":"markdown","c2211768":"markdown","7c0a1d44":"markdown","49f76fbb":"markdown","60237571":"markdown","2ef77275":"markdown","812845a0":"markdown","6faf841b":"markdown","54bb2dcd":"markdown","8898a477":"markdown","7fff8543":"markdown","4b1a841c":"markdown","709526d1":"markdown","f44bbac2":"markdown","1d2ed2b8":"markdown","7bb86ddf":"markdown","31133085":"markdown","f83f5ad1":"markdown","4bba4f8f":"markdown","e7ed882c":"markdown","5df02d3d":"markdown","a962ccb2":"markdown","103f4487":"markdown","98c85f91":"markdown","693ff768":"markdown","e31a29cd":"markdown","99ac1bde":"markdown"},"source":{"a461a73b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","e6cfd3bf":"import seaborn as sns\nimport matplotlib.pyplot as plt","1512c7bb":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","00b77b1e":"train.head()","3611b618":"submission.head()","0782bf6d":"train.shape","fa031693":"submission.shape","ed46f24d":"train.info()","8f6b4f3e":"train.describe()","7d3e2452":"#How many atributes does each feature has?\ndef unique_values(df):\n    print(\"Unique atributes in each feature:\")\n    for feature in df.columns:\n        print(f\"{feature} --> {df[feature].nunique()}\")","c717d6d3":"unique_values(train)","85b2d488":"#List of columns that I'm going to remove\ncolumns = ['PassengerId', 'Name', 'Ticket', 'Cabin']\ntrain = train.drop(columns, axis = 1)\ntrain.head()","a460bd2f":"train['Survived'].value_counts()","045885a6":"#Counplot chart\nplt.subplots(figsize = (10,7))\nplot = sns.countplot(x = 'Survived', data = train, palette = \"BuGn\")\nplot.set_title(\"Titanic Survivers\", fontsize = 15)\nplot.set_xlabel(\" \", fontsize = 15)\nplot.set_ylabel(\"Number of people\", fontsize = 15)\nplot.set_xticklabels(['Not Survived', 'Survived'])","5d9106e6":"# Percentage of people that Survived\ntotal = train['Survived'].value_counts().sum()\nsurvived = train['Survived'].value_counts()[0]\nnot_survived = train['Survived'].value_counts()[1]\nper_survived = survived\/total*100\nper_not_survived = not_survived\/total*100\nprint(f\"The percentage of passengers that survived are: {per_survived:.2f}% and the passengers that didn't survived are:{per_not_survived:.2f}%\")","5d9daf29":"total_pclass = train['Pclass'].shape[0]\ntotal_pclass","0cd7aabd":"train['Pclass'].value_counts()","b080215f":"plt.subplots(figsize = (10,7))\nplot = sns.countplot(x = 'Pclass', data = train, palette = \"PuBuGn\")\nplot.set_title(\"Titanic Ticket Classes\", fontsize = 15)\nplot.set_xlabel(\" \", fontsize = 15)\nplot.set_ylabel(\"Number of people\", fontsize = 15)\nplot.set_xticklabels(['First', 'Second', 'Third'])\nfor p in plot.patches:\n    height = p.get_height()\n    plot.text(p.get_x()+ p.get_width()\/2., height + 5,'{:.1f}%'.format(100.*height\/total_pclass), ha = 'center')","6155b14a":"plt.subplots(figsize = (10,7))\nplot = sns.countplot(x = 'Survived', data = train, palette = \"PuBuGn\", hue = 'Pclass')\nplot.set_title(\"Titanic Survivers per Ticket Classes\", fontsize = 15)\nplot.set_xlabel(\" \", fontsize = 15)\nplot.set_ylabel(\"Number of people\", fontsize = 15)\nplot.set_xticklabels(['Not Survived', 'Survived'])\nplt.legend(['First', 'Second', 'Third'])","20069522":"#Percentage of survivors by group of classes\ntrain[['Pclass', 'Survived']].groupby(['Pclass']).mean()*100","8d6cd313":"total_gen = train['Sex'].shape[0]\ntotal_gen","c2f6d689":"plt.subplots(figsize = (10,7))\nplot = sns.countplot(x = 'Sex', data = train, palette = \"PuBuGn\")\nplot.set_title(\"Titanic people's gender\", fontsize = 15)\nplot.set_xlabel(\" \", fontsize = 15)\nplot.set_ylabel(\"Number of people\", fontsize = 15)\n#plot.set_xticklabels(['First', 'Second', 'Third'])\nfor p in plot.patches:\n    height = p.get_height()\n    plot.text(p.get_x()+ p.get_width()\/2., height + 5,'{:.1f}%'.format(100.*height\/total_gen), ha = 'center')","95a65e49":"plt.subplots(figsize = (10,7))\nplot = sns.countplot(x = 'Survived', data = train, palette = \"PuBuGn\", hue = 'Sex')\nplot.set_title(\"Titanic Survivers by Gender\", fontsize = 15)\nplot.set_xlabel(\" \", fontsize = 15)\nplot.set_ylabel(\"Number of people\", fontsize = 15)\nplot.set_xticklabels(['Not Survived', 'Survived'])","e136368a":"#Percentage of survivors by gender\ntrain[['Sex', 'Survived']].groupby(['Sex']).mean()*100","e3135932":"train['Age'].describe()","217cc884":"#BOXPLOT\nplt.subplots(figsize = (5,5))\nplot = sns.boxplot(y ='Age', data = train, color = 'orange').set_title('Age')","f73c3060":"#Null values\ntrain['Age'].isnull().sum()","a12d8104":"#Filter the values that are not null\ntrain[train['Age'].isnull() == False]","7f171b41":"plot = sns.distplot(train[train['Age'].isnull() == False]['Age'])","828b83a5":"train['Fare'].value_counts()","db7a065c":"median_age = train['Age'].median()\nmedian_age","88bf5edf":"train[train['Sex'] == \"female\"]['Age'].isnull()","01426dc2":"#Woman median age\nmean_woman_age = train[train['Sex'] == \"female\"]['Age'].mean()\nmean_woman_age","5e7b1b42":"#Woman age substitution\ntrain.loc[(train['Sex'] == 'female') & (train['Age'].isnull()),'Age'] = mean_woman_age","c1cde705":"train['Age'].isnull().sum()","6db001ed":"#Man median age\nmean_man_age = train[train['Sex'] == \"male\"]['Age'].mean()\nmean_man_age","3e227be8":"#Man age substitution\ntrain.loc[(train['Sex'] == 'male') & (train['Age'].isnull()),'Age'] = mean_man_age","e8a40624":"train['Age'].isnull().sum()","d9d86d7c":"#Distplot with the new values\nplot = sns.distplot(train.loc[(train['Survived'] == 1) & (train['Age'].isnull() == False),'Age'], color = 'lightcoral', hist = True, label = \"Survived\")\nplot = sns.distplot(train.loc[(train['Survived'] == 0) & (train['Age'].isnull() == False),'Age'], color = 'c', hist =  False, label = \"Not Survived\")\nplot.set_title(\"Age distribution and survivors\", fontsize = 10)","b2216ec2":"train['Sex'].value_counts()","9436f0a7":"train['Sex'].replace(['male', 'female'], [0,1], inplace = True)","d60ac0c5":"train['Sex'].value_counts()","cf428687":"train.corr().style.format(\"{:.2}\").background_gradient(cmap=plt.get_cmap(\"coolwarm\"), axis = 1)","efa3bd71":"#I'm going to use just the features that I really looked for\n#X --> features used for trainig\nx = train[['Age', 'Sex', 'Pclass']]\n# Y --> target\ny = train['Survived']","0c887c28":"x.head()","086e87f3":"from sklearn.model_selection import train_test_split\n# Splitting the data\nx_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.25, random_state = 42)","6d08b1a2":"x_train.shape","3a331633":"x_test.shape","854761ae":"from sklearn.tree import DecisionTreeClassifier\n# Classifier\nmodel = DecisionTreeClassifier(criterion = 'entropy', random_state = 42, max_depth = 5)\n# Model training\nmodel.fit(x_train, y_train)","85bba4d5":"y_pred = model.predict(x_test)\ny_pred","982243c2":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test, y_pred)","7515a89d":"#### Confusion matrix","51469d15":"from sklearn.metrics import confusion_matrix\nimport itertools\n#code from the scikit-learn website\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion Matrix',\n                          cmap=plt.cm.Blues):\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n    \n    #plt.ylim(0.5, 0.5)\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n    plt.ylim(1.5, -0.5) \n\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.ylabel('Real Class')\n    plt.xlabel('Predicted Class')\n    plt.tight_layout()","98025c8a":"#Building the matrix\ncnf_matrix = confusion_matrix(y_test, y_pred)\ncnf_matrix","953a7c5d":"plot_confusion_matrix(cnf_matrix, classes = ['Not Survived', 'Survived'])","f460447f":"submission.head()","6bc84a05":"submission.isnull().sum()","e7531762":"#Woman age substitution\nsubmission.loc[(submission['Sex'] == 'female') & (submission['Age'].isnull()),'Age'] = mean_woman_age","8755e9d2":"submission['Age'].isnull().sum()","7022fad8":"#Man age substitution\nsubmission.loc[(submission['Sex'] == 'male') & (submission['Age'].isnull()),'Age'] = mean_man_age","e429f3d7":"submission['Age'].isnull().sum()","41287966":"submission['Sex'].value_counts()","890f1370":"submission['Sex'].replace(['male', 'female'], [0,1], inplace = True)","73d82a2c":"x = submission[['Age', 'Sex', 'Pclass']]\nx.head()","2915834d":"x['Sex'].value_counts()","f4e7ad83":"#prediction\npredict = model.predict(x) \npredict","bcfba9e9":"submission['Survived'] = predict","035359a1":"submission","8eb27758":"sub_id = submission[['PassengerId', 'Survived' ]]\nsub_id","ff16115e":"sub_id.to_csv('titanic_submission.csv', index = False)","10886efa":"### Correlation matrix","562092d3":"## Exploratory Data Analysis - EDA","7280beab":"The main goal here is to find which features have more correlation with the target = Survived\/ Not Survived","c2211768":"### Evaluation","7c0a1d44":"#### Accuracy","49f76fbb":"### Prediction","60237571":"## Training","2ef77275":"### Pclass - Ticket class","812845a0":"## Fare","6faf841b":"#### Decision tree model","54bb2dcd":"\nUnfortunately the majority of people didn't survived.","8898a477":"#### Separate the the features from the target","7fff8543":"### Dropping the features that are too specific to identify the pessenger.","4b1a841c":"### Survivors by gender","709526d1":"## Feature Engineering","f44bbac2":"PassengerId and the Name are values that identify the person, but our goal is to generalize the information which is what the classification model ask for.","1d2ed2b8":"\nThe features Age, Cabin and Embarked have some null values.","7bb86ddf":"## Gender","31133085":"It seems that the 'Sex' feature has high correlation with the 'Survived' target","f83f5ad1":"### Age substitution","4bba4f8f":"It means that the model make 76% of the predictions correctly","e7ed882c":"## Age","5df02d3d":"### Preparing for the Kaggle submission","a962ccb2":"#### Pclass - Ticket class X SURVIVED","103f4487":"The third class was the one with more passengers","98c85f91":"#### Gender substitution","693ff768":"\n0 --> Didn't Survived; 1 --> Survived","e31a29cd":"Most of the people who died was from the third class.....","99ac1bde":"#### Separate the training data from the test data"}}