{"cell_type":{"24cb90b0":"code","4fedb0b3":"code","2d731d8c":"code","468769f2":"code","a716954d":"code","fd59af91":"code","40ff558e":"code","df401d9a":"code","e65119b1":"code","6f51c4b1":"markdown","f5dddbe4":"markdown","fa668111":"markdown","1590c0c8":"markdown","aff60a47":"markdown","ec77de8d":"markdown","4abb022b":"markdown","bdc3e979":"markdown","6c91f70c":"markdown","c2095fe1":"markdown"},"source":{"24cb90b0":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt ","4fedb0b3":"def load_data(data_dir, train_row):\n    train = pd.read_csv(data_dir + \"train.csv\")\n    print(train.shape)\n    X_train = train.values[:train_row, 1:]\n    y_train = train.values[:train_row, 0]\n    \n    Pred_test = pd.read_csv(data_dir + \"test.csv\").values\n    Pred_test = Pred_test[:train_row]\n    \n    return X_train, y_train, Pred_test\n\ntrain_row = 5000\ndata_dir = \"..\/input\/\"\nOrigin_X_train, Origin_y_train, Origin_X_test = load_data(data_dir, train_row)\nprint(Origin_X_train.shape, Origin_y_train.shape, Origin_X_test.shape)","2d731d8c":"import matplotlib\nimport matplotlib.pyplot as plt\n\nrow = 7\nprint (Origin_y_train[row])\nplt.imshow(Origin_X_train[row].reshape(28, 28))\nplt.show()","468769f2":"from sklearn.model_selection import train_test_split\nX_train, X_vali, y_train, y_vali = train_test_split(Origin_X_train, Origin_y_train, test_size = 0.3, random_state = 0)\nprint(X_train.shape, X_vali.shape, y_train.shape, y_vali.shape)","a716954d":"import time\nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix\nfrom sklearn.neighbors import KNeighborsClassifier\n\nans_k = 0\n\nk_range = range(1, 8)\nscores = []\n\nfor k in k_range:\n    print(\"k = \" + str(k) + \" begin \")\n    start = time.time()\n    model = KNeighborsClassifier(n_neighbors = k)\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_vali)\n    accuracy = accuracy_score(y_vali,y_pred)\n    scores.append(accuracy)\n    end = time.time()\n    print(classification_report(y_vali, y_pred))  \n    print(confusion_matrix(y_vali, y_pred))  \n    \n    print(\"Complete time: \" + str(end-start) + \" Secs.\")\n","fd59af91":"print (scores)\nplt.plot(k_range,scores)\nplt.xlabel('Value of K')\nplt.ylabel('Testing accuracy')\nplt.show()","40ff558e":"k = 3\n\nmodel = KNeighborsClassifier(n_neighbors = k)\nmodel.fit(Origin_X_train,Origin_y_train)\ny_pred = model.predict(Origin_X_test[:300])\n","df401d9a":"row = 250\nprint (y_pred[row])\nplt.imshow(Origin_X_test[row].reshape((28, 28)))\nplt.show()","e65119b1":"print(len(y_pred))\n\n# save submission to csv\npd.DataFrame({\"ImageId\": list(range(1,len(y_pred)+1)),\"Label\": y_pred}).to_csv('Digit_Recognicer_Result.csv', index=False,header=True)\n","6f51c4b1":"# predict the test\n","f5dddbe4":"# digit recognizer with KNN _ He Li","fa668111":"# find the best k from (1, 8)","1590c0c8":"# import lib","aff60a47":"\n* ImageId\tLabel\n* 1\t2\n* 2\t0\n* 3\t9\n* 4\t9","ec77de8d":"# check the result","4abb022b":"# show the train in pic","bdc3e979":"# import train data and test data","6c91f70c":"# split the train to train and vali with test_size = 0.3","c2095fe1":"# print accuracy and find the best k"}}