{"cell_type":{"e7dff7e4":"code","d2a8385e":"code","bdd807cb":"code","7b80ac33":"code","b5c9d22b":"code","3370bd1f":"code","72b7c498":"code","f263ef21":"code","465fb3da":"code","6a6072bd":"code","f6dcc176":"code","bbfe9a13":"code","748a1432":"code","5ac59ab9":"code","8383b61b":"code","9272ef69":"code","05f414b9":"code","44173673":"code","38e0fd81":"code","9ad1ede5":"code","41591c92":"code","c43ab1c4":"code","54d6157c":"code","3ac8fead":"code","99a859d8":"code","82d25f12":"code","2e470bb7":"code","b09255af":"code","3e83f239":"code","1757e1c3":"markdown","8c235999":"markdown","2b38b7c8":"markdown","49ba76c1":"markdown","73b1daec":"markdown","334b2376":"markdown","716a0547":"markdown","808a78e3":"markdown","7202f596":"markdown","7687724d":"markdown","af306329":"markdown","20c5314f":"markdown","2aecff90":"markdown"},"source":{"e7dff7e4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d2a8385e":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# train-balanced-sarcasm.csv has 1010826 rows in reality, but we are only loading\/previewing the first 1000 rows\ndf = pd.read_csv('..\/input\/sarcastic-comments-on-reddit\/train-balanced-sarcasm.csv', delimiter=',', nrows = nRowsRead)\ndf.dataframeName = 'train-balanced-sarcasm.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')","bdd807cb":"df.head()","7b80ac33":"df.dtypes","b5c9d22b":"\n#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcR3xjPuH9PdZzMlj1VpEKlj7VVE-RkAmIjN4Jc7jaWmwMwFE_N4dg&s',width=400,height=400)","3370bd1f":"corrs = df.corr()\ncorrs","72b7c498":"plt.figure(figsize = (20, 8))\n\n# Heatmap of correlations\nsns.heatmap(corrs, cmap = plt.cm.RdYlBu_r, vmin = -0.25, annot = True, vmax = 0.6)\nplt.title('SARCASM');","f263ef21":"sns.distplot(df[\"ups\"])","465fb3da":"sns.distplot(df[\"downs\"])","6a6072bd":"sns.scatterplot(x='score',y='downs',data=df)","f6dcc176":"sns.countplot(df[\"ups\"])\nplt.xticks(rotation=45)\nplt.yticks(rotation=45)\nplt.show()","bbfe9a13":"labels1=df.score.value_counts().index\nsizes1=df.score.value_counts().values\nplt.figure(figsize=(11,11))\nplt.pie(sizes1,labels=labels1,autopct=\"%1.1f%%\")\nplt.title(\"score\",size=25)\nplt.show()","748a1432":"print (\"Skew is:\", df.score.skew())\nplt.hist(df.score, color='pink')\nplt.show()","5ac59ab9":"import plotly.express as px\n\n# Grouping it by Genre and track\nplot_data = df.groupby(['score', 'downs'], as_index=False).ups.sum()\n\nfig = px.bar(plot_data, x='score', y='ups', color='downs')\nfig.update_layout(\n    title_text='Sarcastic comments',\n    height=500, width=1000)\nfig.show()","8383b61b":"import plotly.express as px\n\n# Grouping it by Genre and track\nplot_data = df.groupby(['score', 'downs'], as_index=False).ups.sum()\n\nfig = px.line_polar(plot_data, theta='score', r='ups', color='downs')\nfig.update_layout(\n    title_text='Sarcastic Comments',\n    height=500, width=1000)\nfig.show()","9272ef69":"import plotly.express as px\n\n# Grouping it by Genre and artist\nplot_data = df.groupby(['score', 'downs'], as_index=False).ups.sum()\n\nfig = px.line(plot_data, x='score', y='ups', color='downs')\nfig.update_layout(\n    title_text='Sarcastic Comments',\n    height=500, width=1000)\nfig.show()","05f414b9":"#sample codes from Mikey_Mtk @motokinakamura https:\/\/www.kaggle.com\/motokinakamura\/treemap-with-plotly\nfig = go.Figure(go.Treemap(\n    labels = [\"Eve\",\"Cain\", \"Seth\", \"Enos\", \"Noam\", \"Abel\", \"Awan\", \"Enoch\", \"Azura\"],\n    parents = [\"\", \"Eve\", \"Eve\", \"Seth\", \"Seth\", \"Eve\", \"Eve\", \"Awan\", \"Eve\"]\n))\n\nfig.show()","44173673":"#codes from Mikey_Mtk @motokinakamura https:\/\/www.kaggle.com\/motokinakamura\/treemap-with-plotly\n#make a df it's grouped by \"Genre\"\ngb_score =df.groupby(\"score\").sum()\n\ngb_score.head()","38e0fd81":"# codes from Mikey_Mtk @motokinakamura https:\/\/www.kaggle.com\/motokinakamura\/treemap-with-plotly\nscore = list(gb_score.index)\nsarc = list(gb_score.ups)\n\nprint(score)\nprint(sarc)","9ad1ede5":"#codes from Mikey_Mtk @motokinakamura https:\/\/www.kaggle.com\/motokinakamura\/treemap-with-plotly\n#first treemap\ntest_tree = go.Figure(go.Treemap(\n    labels =  score,\n    parents=[\"\"]*len(score),\n    values =  sarc,\n    textinfo = \"label+value\"\n))\n\ntest_tree.show()","41591c92":"#codes from Mikey_Mtk @motokinakamura https:\/\/www.kaggle.com\/motokinakamura\/treemap-with-plotly\n#second treemap\ntest_tree_blue = go.Figure(go.Treemap(\n    labels =  score,\n    parents=[\"\"]*len(score),\n    values =  sarc,\n    textinfo = \"label+value\",\n    marker_colorscale = 'magma'\n))\n\ntest_tree_blue.show()","c43ab1c4":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcT2Ymvgxnf4XsEy1UnrjJM4-v4cQISc20XrI-q3gucZD61WmN_0&s',width=400,height=400)","54d6157c":"# Necessary Functions: \ndef pie_plot(labels, values, colors, title):\n    fig = {\n      \"data\": [\n        {\n          \"values\": values,\n          \"labels\": labels,\n          \"domain\": {\"x\": [0, .48]},\n          \"name\": \"Job Type\",\n          \"sort\": False,\n          \"marker\": {'colors': colors},\n          \"textinfo\":\"percent+label+value\",\n          \"textfont\": {'color': '#FFFFFF', 'size': 10},\n          \"hole\": .6,\n          \"type\": \"pie\"\n        } ],\n        \"layout\": {\n            \"title\":title,\n            \"annotations\": [\n                {\n                    \"font\": {\n                        \"size\": 25,\n\n                    },\n                    \"showarrow\": False,\n                    \"text\": \"\"\n\n                }\n            ]\n        }\n    }\n    return fig","3ac8fead":"import plotly.offline as py\nvalue_counts = df['score'].value_counts()\nlabels = value_counts.index.tolist()\npy.iplot(pie_plot(labels, value_counts,['#1B9E77', '#7570B3'], \"Type Distribution\"))","99a859d8":"from collections import Counter\nimport json\nfrom IPython.display import HTML\nimport altair as alt\nfrom  altair.vega import v5","82d25f12":"##-----------------------------------------------------------\n# This whole section \nvega_url = 'https:\/\/cdn.jsdelivr.net\/npm\/vega@' + v5.SCHEMA_VERSION\nvega_lib_url = 'https:\/\/cdn.jsdelivr.net\/npm\/vega-lib'\nvega_lite_url = 'https:\/\/cdn.jsdelivr.net\/npm\/vega-lite@' + alt.SCHEMA_VERSION\nvega_embed_url = 'https:\/\/cdn.jsdelivr.net\/npm\/vega-embed@3'\nnoext = \"?noext\"\n\npaths = {\n    'vega': vega_url + noext,\n    'vega-lib': vega_lib_url + noext,\n    'vega-lite': vega_lite_url + noext,\n    'vega-embed': vega_embed_url + noext\n}\n\nworkaround = \"\"\"\nrequirejs.config({{\n    baseUrl: 'https:\/\/cdn.jsdelivr.net\/npm\/',\n    paths: {}\n}});\n\"\"\"\n\n#------------------------------------------------ Defs for future rendering\ndef add_autoincrement(render_func):\n    # Keep track of unique <div\/> IDs\n    cache = {}\n    def wrapped(chart, id=\"vega-chart\", autoincrement=True):\n        if autoincrement:\n            if id in cache:\n                counter = 1 + cache[id]\n                cache[id] = counter\n            else:\n                cache[id] = 0\n            actual_id = id if cache[id] == 0 else id + '-' + str(cache[id])\n        else:\n            if id not in cache:\n                cache[id] = 0\n            actual_id = id\n        return render_func(chart, id=actual_id)\n    # Cache will stay outside and \n    return wrapped\n\n@add_autoincrement\ndef render(chart, id=\"vega-chart\"):\n    chart_str = \"\"\"\n    <div id=\"{id}\"><\/div><script>\n    require([\"vega-embed\"], function(vg_embed) {{\n        const spec = {chart};     \n        vg_embed(\"#{id}\", spec, {{defaultStyle: true}}).catch(console.warn);\n        console.log(\"anything?\");\n    }});\n    console.log(\"really...anything?\");\n    <\/script>\n    \"\"\"\n    return HTML(\n        chart_str.format(\n            id=id,\n            chart=json.dumps(chart) if isinstance(chart, dict) else chart.to_json(indent=None)\n        )\n    )\n\n\n\nHTML(\"\".join((\n    \"<script>\",\n    workaround.format(json.dumps(paths)),\n    \"<\/script>\")))","2e470bb7":"def word_cloud(df, pixwidth=6000, pixheight=350, column=\"index\", counts=\"count\"):\n    data= [dict(name=\"dataset\", values=df.to_dict(orient=\"records\"))]\n    wordcloud = {\n        \"$schema\": \"https:\/\/vega.github.io\/schema\/vega\/v5.json\",\n        \"width\": pixwidth,\n        \"height\": pixheight,\n        \"padding\": 0,\n        \"title\": \"Hover to see number of occureances from all the sequences\",\n        \"data\": data\n    }\n    scale = dict(\n        name=\"color\",\n        type=\"ordinal\",\n        range=[\"cadetblue\", \"royalblue\", \"steelblue\", \"navy\", \"teal\"]\n    )\n    mark = {\n        \"type\":\"text\",\n        \"from\":dict(data=\"dataset\"),\n        \"encode\":dict(\n            enter=dict(\n                text=dict(field=column),\n                align=dict(value=\"center\"),\n                baseline=dict(value=\"alphabetic\"),\n                fill=dict(scale=\"color\", field=column),\n                tooltip=dict(signal=\"datum.count + ' occurrances'\")\n            )\n        ),\n            \"transform\": [{\n            \"type\": \"wordcloud\",\n            \"text\": dict(field=column),\n            \"size\": [pixwidth, pixheight],\n            \"font\": \"Helvetica Neue, Arial\",\n            \"fontSize\": dict(field=\"datum.{}\".format(counts)),\n            \"fontSizeRange\": [10, 60],\n            \"padding\": 2\n        }]\n    }\n    wordcloud[\"scales\"] = [scale]\n    wordcloud[\"marks\"] = [mark]\n    \n    return wordcloud\n\nfrom collections import defaultdict\n\ndef wordcloud_create(df):\n    ult = {}\n    corpus = df.comment.values.tolist()\n    final = defaultdict(int) #Declaring an empty dictionary for count (Saves ram usage)\n    for words in corpus:\n        for word in words.split():\n             final[word]+=1\n    temp = Counter(final)\n    for k, v in  temp.most_common(200):\n        ult[k] = v\n    corpus = pd.Series(ult) #Creating a dataframe from the final default dict\n    return render(word_cloud(corpus.to_frame(name=\"count\").reset_index(), pixheight=600, pixwidth=900))","b09255af":"wordcloud_create(df)","3e83f239":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcTllzoOJzbtATW5rkE6l5uPVALudyrMLrr--zkLCb9M3pSiOuOG&s',width=400,height=400)","1757e1c3":"Image geeksoncoffee.com  - Yes, I'm so sweet, almost Jekyll and Hyde. ","8c235999":"#Codes (WordCloud) from Shivam Ralli https:\/\/www.kaggle.com\/hoshi7\/what-do-i-watch-next\n#Taken From: https:\/\/www.kaggle.com\/shivamb\/netflix-shows-and-movies-exploratory-analysis","2b38b7c8":"Kaggle Notebook Runner: Mar\u00edlia Prata @mpwolke","49ba76c1":"* In the Documentary \"This Changes Everything\"(2018), Geena Davis expressed how she hated \"Great\". After we've made a lot of effort doing smth and all we got is a \"Great\". \n* Above we've the actress Anna Paquin. ","73b1daec":"![](https:\/\/media0.giphy.com\/media\/WdjUZDwLsd1PCgVHxN\/giphy.webp?cid=790b76111c1eab42a23e05c0b1da70e694503538f9a31b13&rid=giphy.webp)","334b2376":"![](https:\/\/media0.giphy.com\/media\/dDarLms1uet0Y\/200.webp?cid=790b76111c1eab42a23e05c0b1da70e694503538f9a31b13&rid=200.webp)","716a0547":"Codes below from https:\/\/www.kaggle.com\/andresionek\/how-to-create-award-winning-data-visualizations","808a78e3":"Thank you for reading this Notebook.","7202f596":"![](https:\/\/media2.giphy.com\/media\/26n79l9afmfm1POjC\/giphy.webp?cid=790b76111c1eab42a23e05c0b1da70e694503538f9a31b13&rid=giphy.webp)","7687724d":"Image solifequotes.com -  Sure, another \"brilliant\" Notebook of mine. Got it? That's Sarcasm!","af306329":"Image naukrinama.com  - Sm\u00e9agol (aka Gollum) I love you!","20c5314f":"Sarcasm is \"a sharp, bitter, or cutting expression or remark; a bitter gibe or taunt\". Sarcasm may employ ambivalence, although sarcasm is not necessarily ironic. Most noticeable in spoken word, sarcasm is mainly distinguished by the inflection with which it is spoken and is largely context-dependent.https:\/\/en.wikipedia.org\/wiki\/Sarcasm","2aecff90":"#Codes (WordCloud) from Shivam Ralli https:\/\/www.kaggle.com\/hoshi7\/what-do-i-watch-next\n#Taken From: https:\/\/www.kaggle.com\/shivamb\/netflix-shows-and-movies-exploratory-analysis"}}