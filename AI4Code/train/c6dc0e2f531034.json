{"cell_type":{"51afa3a0":"code","76ee0920":"code","516b3e04":"code","a75d28e3":"code","f46ed559":"code","f34aebb4":"code","9f584353":"code","5e8aec6f":"code","19bcd2f3":"code","5a6ae41d":"code","e032c043":"code","f7507567":"code","5d3245a0":"code","f02b5bf6":"code","b1bb9b4b":"code","b7513774":"code","0b5ac623":"code","7f6a88d7":"code","5fbb2669":"code","4a8a710a":"code","58946a04":"code","2a4f2ec6":"markdown","06ef07ee":"markdown","062adc34":"markdown","ae580e1f":"markdown","f13be870":"markdown","d31b62cf":"markdown","e829c16e":"markdown"},"source":{"51afa3a0":"#Import libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nfrom scipy import stats\nfrom scipy.stats import norm, skew #for some statistics\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.offline as offline\noffline.init_notebook_mode()\nfrom plotly import tools\nimport plotly.tools as tls\n\n#Load datasets\n\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\ntrain.head(2) #Check the dataset","76ee0920":"train.shape ","516b3e04":"train.describe(include=\"all\")","a75d28e3":"#Correlation\n\ntrain.corr()[\"SalePrice\"]","f46ed559":"corr=train[[\"SalePrice\",\"OverallQual\",\"GrLivArea\",\"GarageCars\",\n                  \"GarageArea\",\"GarageYrBlt\",\"TotalBsmtSF\",\"1stFlrSF\",\"FullBath\",\n                  \"TotRmsAbvGrd\",\"YearBuilt\",\"YearRemodAdd\"]].corr()\n\nsns.set(font_scale=1.15)\nplt.figure(figsize=(14, 10))\n\nsns.heatmap(corr, vmax=.8, linewidths=0.01,\n            square=True,annot=True,cmap='YlGnBu',linecolor=\"black\")\nplt.title('Correlation between features');","f34aebb4":"sns.set()\ncols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\nsns.pairplot(train[cols], size = 2.5)\nplt.show();","9f584353":"#More Data visualizations\nplt.figure(figsize=(12,6))\nplt.scatter(x='GrLivArea', y='SalePrice', data=train)\nplt.xlabel(\"GrLivArea\", fontsize=13)\nplt.ylabel(\"SalePrice\", fontsize=13)\nplt.ylim(0,800000)","5e8aec6f":"agg = train['MSZoning'].value_counts()[:10]\nlabels = list(reversed(list(agg.index )))\nvalues = list(reversed(list(agg.values)))\n\ntrace1 = go.Pie(labels=labels, values=values, marker=dict(colors=['red']))\nlayout = dict(title='The general zoning classification', legend=dict(orientation=\"h\"));\n\n\nfig = go.Figure(data=[trace1], layout=layout)\niplot(fig, filename='stacked-bar')\n\n\n","19bcd2f3":"sns.violinplot(x='FullBath', y='SalePrice', data=train)\nplt.title(\"Sale Price vs Full Bathrooms\")","5a6ae41d":"sns.violinplot( x=\"HalfBath\",y=\"SalePrice\", data=train)\nplt.title(\"Sale Price vs Half Bathrooms\");","e032c043":"\n#1st Floor in sq.feet\nplt.scatter(train[\"1stFlrSF\"],train.SalePrice, color='red')\nplt.title(\"Sale Price vs. First Floor square feet\")\nplt.ylabel('Sale Price (in dollars)')\nplt.xlabel(\"First Floor square feet\");","f7507567":"plt.figure(figsize=(14,6))\nplt.xticks(rotation=60) \nsns.barplot(x=\"Neighborhood\", y = \"SalePrice\", data=train)\nplt.title(\"Sale Price vs Neighborhood\",fontsize=15 )","5d3245a0":"plt.figure(figsize=(14,6))\nsns.barplot(x=\"TotRmsAbvGrd\",y=\"SalePrice\",data=train)\nplt.title(\"Sale Price vs Number of rooms\", fontsize=15);","f02b5bf6":"plt.figure(figsize=(14,6))\nsns.barplot(x=\"OverallQual\",y=\"SalePrice\",data=train)\nplt.title(\"Sale Price vs 'Overall material and finish quality'\", fontsize=15);\n","b1bb9b4b":"#missing data\ntotal = train.isnull().sum().sort_values(ascending=False)\npercent = (train.isnull().sum()\/train.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)","b7513774":"train = train.drop(columns = ['PoolQC', 'MiscFeature', 'Alley', 'Fence', 'FireplaceQu'], axis = 1)","0b5ac623":"train.shape","7f6a88d7":"#LotFrontage : Since the area of each street connected to the house property most likely have a similar area to other houses in its neighborhood , we can fill in missing values by the median LotFrontage of the neighborhood\n\ntrain[\"LotFrontage\"] = train.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(\n    lambda x: x.fillna(x.median()))","5fbb2669":"#GarageType, GarageFinish, GarageQual and GarageCond : Replacing missing data with None\n\nfor col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond'):\n    train[col] = train[col].fillna('None')","4a8a710a":"#GarageYrBlt, GarageArea and GarageCars : Replacing missing data with 0 (Since No garage = no cars in such garage.)\n\nfor col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n    train[col] = train[col].fillna(0)\n    \n#BsmtFinSF1, BsmtFinSF2, BsmtUnfSF, TotalBsmtSF, BsmtFullBath and BsmtHalfBath : missing values are likely zero for having no basement\n\nfor col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    train[col] = train[col].fillna(0)\n    \n#BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1 and BsmtFinType2 : for all these categorical basement-related features, NaN means that there is no basement.\n\nfor col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    train[col] = train[col].fillna('None')\n\n#MasVnrArea and MasVnrType : NA most likely means no masonry veneer for these houses. We can fill 0 for the area and None for the type.\n\ntrain[\"MasVnrType\"] = train[\"MasVnrType\"].fillna(\"None\")\ntrain[\"MasVnrArea\"] = train[\"MasVnrArea\"].fillna(0)\n\n\n#MSZoning (The general zoning classification) : 'RL' is by far the most common value. So we can fill in missing values with 'RL'\n\ntrain['MSZoning'] = train['MSZoning'].fillna(train['MSZoning'].mode()[0])\n\n#Utilities : For this categorical feature all records are \"AllPub\", except for one \"NoSeWa\" and 2 NA . \n#Since the house with 'NoSewa' is in the training set, this feature won't help in predictive modelling. We can remove it\n\ntrain = train.drop(['Utilities'], axis=1)\n\n#Electrical : It has one NA value. Since this feature has mostly 'SBrkr', we can set that for the missing value.\n\ntrain['Electrical'] = train['Electrical'].fillna(train['Electrical'].mode()[0])","58946a04":"#Check remaining missing values if any \ntrain_na = (train.isnull().sum() \/ len(train)) * 100\ntrain_na = train_na.drop(train_na[train_na == 0].index).sort_values(ascending=False)\nmissing_data = pd.DataFrame({'Missing Ratio' :train_na})\nmissing_data.head()","2a4f2ec6":"\nAnything above 25% we will drop. So we will drop 'PoolQC', 'MiscFeature', 'Alley', 'Fence', 'FireplaceQu'. \n\n* PoolQC : Pool quality (That make sense, given the huge ratio of missing value (+99%) and majority of houses have no Pool at all in general)\n* MiscFeature : Miscellaneous feature not covered in other categories\n* Alley : Type of alley access\n* Fence : Fence quality\n* FireplaceQu : Fireplace quality","06ef07ee":"Next Steps:\n\n* Feature Engineering\n* Creating and submitting model\n\n*Please upvote or comment if you liked the kernel :) *","062adc34":"As we see in the dataset, we have about 81 different columns. We will try to predict the targer variable - \"SalePrice\"  which is the property's sale price in dollars.\n","ae580e1f":"We observe that below features have significant correlation to \"SalePrice\"\n\n*  **OverallQual**:  Overall material and finish quality\n* **GrLivArea**: Above grade (ground) living area square feet\n* **GarageCars**: Size of garage in car capacity\n* **GarageArea**: Size of garage in square feet\n* **GarageYrBlt**: Year garage was built\n* **TotalBsmtSF**:  Total square feet of basement area\n* **1stFlrSF**: First Floor square feet\n* **FullBath**: Full bathrooms above grade\n* **TotRmsAbvGrd**:  Total rooms above grade (does not include bathrooms)\n* **YearBuilt**:  Original construction date\n* **YearRemodAdd**:  Remodel date\n\nHeatmaps are great to visualize these kind of correlations. Let's see one for these variables","f13be870":"\n**Description**\n\nAsk a home buyer to describe their dream house, and they probably won't begin with the height of the basement ceiling or the proximity to an east-west railroad. But this competition's dataset proves that much more influences price negotiations than the number of bedrooms or a white-picket fence.\n\nWith 79 explanatory variables describing (almost) every aspect of residential homes in Ames, Iowa, this competition challenges  to predict the final price of each home.\n\n**Goal**\n\nTo predict the sales price for each house. For each Id in the test set,  predict the value of the SalePrice variable. \n\n**Steps**\n\n* Load Libraries and view Data\n* Data Visualization\n* Feature Engineering\n* Create a model\n* Submit\n\n\n**Load Libraries and view Data**","d31b62cf":"**Missing Data**\n\nData can have missing values for a number of reasons such as observations that were not recorded and data corruption.\n\nHandling missing data is important as many machine learning algorithms do not support data with missing values.","e829c16e":"\n\nSome thoughts: \n\n* 'GarageCars' and 'GarageArea' are similar. So we can just keep one. We will keep 'GarageCars' as the correlation is higher with SalePrice\n*  'TotalBsmtSF' and '1stFloor'  are similar.  We will keep  'TotalBsmtSF' as the correlation is *slightly* higher with SalePrice\n* TotRmsAbvGrd' and 'GrLivArea' are similar.  We will keep 'GrLivArea' as the correlation is higher with SalePrice\n\nLet's proceed and visualize some pairplots for these variables"}}