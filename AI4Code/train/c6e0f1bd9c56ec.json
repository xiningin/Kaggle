{"cell_type":{"84c600c9":"code","8a386606":"code","bcbdef13":"code","1729b807":"code","bf8fd31b":"markdown"},"source":{"84c600c9":"file_path = '..\/input\/hashcode-2021-oqr-extension\/hashcode.in'\n\nf = open(file_path, 'r')\n\n# first line\nline = f.readline()\nD, I, S, V, F = map(int, line.split())\n\nroadnm_to_path = {}\npath_to_roadnm = {}\nadj = [[0 for _ in range(I+1)] for _ in range(I+1)]\n\nfor i in range(S):\n    line = f.readline()\n    start, end, rd_nm, weight = line.split()\n    start, end, weight = int(start), int(end), int(weight)\n    adj[start][end] = weight\n    roadnm_to_path[rd_nm] = [start, end]\n    path_to_roadnm['[{}, {}]'.format(start, end)] = rd_nm\n\ncar = []\nfor i in range(V):\n    line = f.readline()\n    line = line.split()\n    _, path_nm = line[0], line[1:]\n    path = []\n    for street in path_nm:\n        start, end = roadnm_to_path[street]\n        if path:\n            path.extend([start, end])\n        else:\n            path.append(end)\n    car.append(path)\n\nf.close()","8a386606":"def solution(D, I, S, V, F, adj, roadnm_to_path, path_to_roadnm, car):\n    res = []\n    num_intersection = 0\n    for _to in range(I+1):\n        cnt = 0\n        tmp = []\n        for _from in range(I+1):\n            if adj[_from][_to] != 0:\n                road_nm = path_to_roadnm['[{}, {}]'.format(_from, _to)]\n                tmp.append(road_nm)\n                cnt += 1\n        if cnt == 0:\n            continue\n        res.append([_to])\n        res.append([cnt])\n        for i in range(cnt):\n            res.append([tmp[i], 1])\n        num_intersection += 1\n        \n        if _to % 1000 == 0:\n            print(\"DEBUG {} ..... \".format(_to))\n    \n    res.insert(0, [num_intersection])\n    return res","bcbdef13":"res = solution(D, I, S, V, F, adj, roadnm_to_path, path_to_roadnm, car)","1729b807":"f = open('submission.csv', 'w')\nfor one_res in res:\n    try:\n        data = ' '.join([str(s) for s in one_res]) + '\\n'\n    except:\n        data = str(one_res) + '\\n'\n    f.write(data)\n\nf.close()","bf8fd31b":"Hi Kaggler!\n\nThis is a code that allocates one second for roads entering each intersection."}}