{"cell_type":{"ec7c9552":"code","0cbfd1a8":"code","4cbf5a46":"code","17a31ffb":"code","98498689":"code","c0c848af":"code","1b1ff990":"code","2dbe174a":"code","4fa4518f":"code","da57190b":"code","dbf6884a":"code","be59f6e4":"code","35a635a4":"code","a1832ad5":"code","91035f87":"code","ecceff91":"code","58a093b7":"code","b3ac6084":"markdown","62b2b991":"markdown","ced347ea":"markdown","dcd766a1":"markdown"},"source":{"ec7c9552":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","0cbfd1a8":"#Read sample data \ndf_train =  pd.read_csv('..\/input\/train.csv', nrows = 100000, parse_dates=[\"pickup_datetime\"])\ndf_train.head()","4cbf5a46":"df_train.describe()","17a31ffb":"print('No of records b4 fare amount filter: ',len(df_train))\ndf_train = df_train[df_train.fare_amount >= 0]\nprint('No of records after fare amount filter ',  len(df_train))\nprint('No of records b4 passenger count filter ',  len(df_train))\ndf_train = df_train[df_train.passenger_count > 0]\nprint('No of records after passenger count filter ',  len(df_train))","98498689":"print(df_train.isnull().sum())\n","c0c848af":"#print('No of records b4 filter: ',len(df_train))\n#df_train = df_train[df_train.pickup_longitude >= -180 & df_train.pickup_longitude <= 180]\n#print('No of records after pickup longitude filter: ',  len(df_train))\n#df_train = df_train[df_train.pickup_longitude >= -180 & df_train.pickup_longitude <= 180]","1b1ff990":"# minimum and maximum longitude test set\nmin(df_train.pickup_longitude.min(), df_train.dropoff_longitude.min()), \\\nmax(df_train.pickup_longitude.max(), df_train.dropoff_longitude.max())","2dbe174a":"# minimum and maximum latitude test\nmin(df_train.pickup_latitude.min(), df_train.dropoff_latitude.min()), \\\nmax(df_train.pickup_latitude.max(), df_train.dropoff_latitude.max())","4fa4518f":"def add_travel_vector_features(df):\n    df['abs_diff_longitude'] = (df.dropoff_longitude - df.pickup_longitude).abs()\n    df['abs_diff_latitude'] = (df.dropoff_latitude - df.pickup_latitude).abs()\n\nadd_travel_vector_features(df_train)","da57190b":"df_train.head()","dbf6884a":"print(df_train.isnull().sum())","be59f6e4":"df_train.iloc[:2000].plot.scatter('abs_diff_longitude', 'abs_diff_latitude')","35a635a4":"df_train = df_train[(df_train.abs_diff_longitude < 5.0) & (df_train.abs_diff_latitude < 5.0)]\n","a1832ad5":"# Construct and return an Nx3 input matrix for our linear model\n# using the travel vector, plus a 1.0 for a constant bias term.\ndef get_input_matrix(df):\n    return np.column_stack((df.abs_diff_longitude, df.abs_diff_latitude, np.ones(len(df))))\n\ntrain_X = get_input_matrix(df_train)\ntrain_y = np.array(df_train['fare_amount'])\n\nprint(train_X.shape)\nprint(train_y.shape)","91035f87":"# The lstsq function returns several things, and we only care about the actual weight vector w.\n(w, _, _, _) = np.linalg.lstsq(train_X, train_y, rcond = None)\nprint(w)","ecceff91":"df_test = pd.read_csv('..\/input\/test.csv')\ndf_test.dtypes","58a093b7":"# Reuse the above helper functions to add our features and generate the input matrix.\nimport os\nadd_travel_vector_features(df_test)\ntest_X = get_input_matrix(df_test)\n# Predict fare_amount on the test set using our model (w) trained on the training set.\ntest_y_predictions = np.matmul(test_X, w).round(decimals = 2)\n\n# Write the predictions to a CSV file which we can submit to the competition.\nsubmission = pd.DataFrame(\n    {'key': df_test.key, 'fare_amount': test_y_predictions},\n    columns = ['key', 'fare_amount'])\nsubmission.to_csv('submission.csv', index = False)\n\nprint(os.listdir('.'))","b3ac6084":"#Let's plot the drop off and pick up locations on a map","62b2b991":"#fare amount can't be negative and passenger count cant be 0","ced347ea":"# Taking sample out of huge data","dcd766a1":"#Check for null or missing values in dataset"}}