{"cell_type":{"44967193":"code","c5720052":"code","ef69e6cb":"code","d5c7d47d":"code","0df2bf92":"code","a1de994d":"code","e65e7b89":"code","b9d3a97a":"code","fd87ca43":"code","bd9f0025":"code","34375905":"code","9d69c263":"code","8f53779b":"code","f80ef3ce":"code","7fb42b65":"code","26f39675":"code","a7fa5dca":"code","f63b01d7":"code","bf232664":"code","36f7ab40":"code","f496018d":"code","0d5ab705":"markdown"},"source":{"44967193":"### EDA on TMDB analysis\n#### Reference :: https:\/\/towardsdatascience.com\/hitchhikers-guide-to-exploratory-data-analysis-6e8d896d3f7e\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport json\n\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\n%matplotlib inline","c5720052":"# Loading dataset onto the frames\n\ncredits_df = pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv')\nmovies_df = pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv')","ef69e6cb":"credits_df.head()","d5c7d47d":"movies_df.head()","0df2bf92":"# removing columns (axis=1) with following features\n\ndel_col_list = ['homepage','keywords','original_language','original_title','overview','production_companies','status','tagline']\n\nmovies_df = movies_df.drop(del_col_list, axis=1)\nmovies_df.head()","a1de994d":"# before removing duplicates the size of df\nprint(movies_df.shape)\n\nmovies_df = movies_df.drop_duplicates(keep='first')\nprint(movies_df.shape)","e65e7b89":"# removing nan and 0 values in dataset in revenue and budgets\n\ncols = ['budget','revenue']\nmovies_df[cols] = movies_df[cols].replace(0,np.nan)\n\n# subset=cols implies which cols to look for na\n# inplace=True implies we want to update current df and return nothing rather than a copy of new object\n\nmovies_df.dropna(subset=cols, inplace=True)\nmovies_df.shape","b9d3a97a":"# Changing the release_date column to DateTime column and extracting year\n\nmovies_df.release_date = pd.to_datetime(movies_df['release_date'],format='%Y-%m-%d')\nmovies_df['release_year'] = pd.DatetimeIndex(movies_df.release_date).year\nmovies_df.head()","fd87ca43":"# Changing the data type of the below mentioned columns and \nchange_cols=['budget', 'revenue']\n\n#changing data type\nmovies_df[change_cols]=movies_df[change_cols].applymap(np.int64)\nmovies_df.dtypes","bd9f0025":"# Parsing jsons \n\n# zip index and column (converted from json to dictionary using json.loads)\n# for every dictionary in dictionary array we find value of key given and append to list\n# finally we convert it to string and store in that column\n\ndef parse_col_json(column,key):\n\n    for index,i in zip(movies_df.index,movies_df[column].apply(json.loads)):\n        list1=[]\n        for j in range(len(i)):\n            list1.append((i[j][key]))# the key 'name' contains the name of the genre\n        movies_df.loc[index,column]=str(list1)","34375905":"parse_col_json('genres', 'name')\nparse_col_json('spoken_languages', 'name')\nparse_col_json('production_countries', 'name')\n\nmovies_df.head()","9d69c263":"# Answering the following questions\n\n# Which English movie has the highest votes?\n# What are the 5 most expensive movies?\n# Which movie had the highest profit?\n# Which movie covers the largest vareity of languages?\n# Which movie was the most popular before 2010?\n# What is the average runtime of movies?\n# Movies having the highest rating","8f53779b":"# Which english movie has the highest votes?\n\n# Identify english movies\n\nenglish_movies = movies_df[movies_df[\"spoken_languages\"].str.contains(\"English\")]\nmax_vote_index = english_movies[\"vote_count\"].idxmax()\nenglish_movies.loc[max_vote_index]","f80ef3ce":"# What are 5 most expensive movies?\n\nexpensive_movies_df = movies_df.sort_values(by='budget',ascending=False).head()\nexpensive_movies_df","7fb42b65":"# Which movie has highest profit?\n\nmovies_df[\"profit\"] = movies_df[\"revenue\"]- movies_df[\"budget\"]\nhighest_profit_movie = movies_df.sort_values(by='profit',ascending=False)\nhighest_profit_movie.iloc[0]","26f39675":"# Which movie covers the largest vareity of languages?\n\nlanguages_index_max = movies_df[\"spoken_languages\"].str.len().idxmax()\nmovies_df.loc[languages_index_max]","a7fa5dca":"# Which movie was the most popular before 2010?\n\npopular_movie_2010_idx = movies_df[movies_df[\"release_year\"]<2010][\"popularity\"].idxmax()\nmovies_df.loc[popular_movie_2010_idx]","f63b01d7":"# What is the average runtime of movies?\n\nmovies_df[\"runtime\"].mean()","bf232664":"# Movie having the highest rating\n\ntop_rated_movies = movies_df.sort_values(by='vote_average',ascending=False)\ntop_rated_movies.iloc[0]","36f7ab40":"# finding the total profits yearwise\n\nprofits_per_year = movies_df.groupby(\"release_year\")[\"profit\"].sum()\n\nplt.figure(figsize=(12,6), dpi=130) # dot per inch = 130\nplt.plot(profits_per_year)\nplt.xlabel(\"Release year of various movies\")\nplt.ylabel(\"Total profit\")\nplt.title(\"Total profits earned by movies vs Release year\")\nplt.show()","f496018d":"# year having max profits\n# can be verified from graph\n\nprofits_per_year.idxmax()","0d5ab705":"## Plots"}}