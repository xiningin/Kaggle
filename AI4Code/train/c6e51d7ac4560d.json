{"cell_type":{"01a00271":"code","bb6f80df":"code","288e4b97":"code","02e567a8":"code","e3d56d91":"code","a39ecebf":"code","c45fac4a":"code","ffa5ca74":"code","f44a419c":"code","495547f8":"code","a92d85a9":"code","c6720300":"code","fa18468d":"code","fffa4f2f":"code","5a64a67a":"code","b90668df":"code","cdd01295":"code","5325d9a6":"code","ed1ab98c":"code","19a4a197":"code","91209925":"code","b57dabd0":"code","cc54f022":"code","33faecb2":"code","7e55f8d2":"code","a5144da8":"code","2a455644":"code","3570da83":"code","dff31937":"code","2e3927cf":"code","2e9d996b":"code","f5e9c39a":"code","a9540500":"code","d1175c2c":"code","7eb7048c":"code","ae54022a":"code","2f57dfcf":"code","d54c2b23":"markdown","8df73f8d":"markdown","0bc54b95":"markdown","70bc7a0a":"markdown","f1a48a7a":"markdown","9e630b30":"markdown","306e0e16":"markdown","2706b2b9":"markdown","0c632750":"markdown","febea06c":"markdown","1c170753":"markdown","b6cecf9c":"markdown","613d2748":"markdown","a419dc55":"markdown","147b329c":"markdown","bf8e22c8":"markdown","07764b82":"markdown","69bff687":"markdown","37a5dffe":"markdown"},"source":{"01a00271":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \nimport seaborn as sns       # visualization tool\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bb6f80df":"# Read csv file\ndata = pd.read_csv('..\/input\/fifa19\/data.csv')","288e4b97":"data.info()","02e567a8":"data.columns","e3d56d91":"# show top 10 sample\ndata.head(10)","a39ecebf":"# show features correlation\ndata.corr()","c45fac4a":"# Correlation map\nf,ax = plt.subplots(figsize =(18,18))\nsns.heatmap(data.corr(), annot = True, linewidths =.5, fmt = '.1f', ax =ax)\nplt.show()","ffa5ca74":"# Line plot of Potential and Overall\ndata.Potential.plot(kind = 'line',color = 'c', label = 'Potential', linewidth = 1, alpha = 0.5, grid = True, linestyle = '-.')\ndata.Overall.plot(color = 'r', label = 'Overall', linewidth = 1, alpha = 0.5, grid = True, linestyle = '--')\nplt.legend(loc = 'upper right')      # legend = puts label into plot\nplt.xlabel('x axis')                 # label = name of label\nplt.ylabel('y axis')\nplt.title('Line Plot')               # title title of plot\nplt.show()","f44a419c":"# Scatter Plot of Shot Power and Finishing\n# x = ShotPower, y = Finishing\n\ndata.plot(kind = 'scatter', x = 'ShotPower',y = 'Finishing', alpha = 0.5, color = 'red')\nplt.xlabel('shotPower')         # label = name of label\nplt.ylabel('Finishing')\nplt.title('Shot Power and Finishing Scatter Plot')\nplt.show()","495547f8":"#Histogram of finishing\n#bins = number of bar in figure\nplt.title('Histogram of Finishing')\ndata.Finishing.plot(kind = 'hist', bins = 50, figsize = (12,12))\nplt.show()","a92d85a9":"# clf() = cleans it up again you can start a fresh\ndata.Finishing.plot(kind = 'hist',bins = 50)\nplt.clf()\n#We can't see plot due to clf()","c6720300":"# Create dictionary and look its keys and values\n\ndictionary = {'Spain':'Madrid','USA':'Vegas'}\nprint(dictionary.keys())\nprint(dictionary.values())","fa18468d":"#Keys have to immutable objects like string,boolean,float,integer or tubles\n#list is not immutable\n#keys are unique\n\ndictionary['Spain'] = \"Barcelona\"  #update existing entry\nprint(dictionary)\nprint('')\ndictionary['France'] = \"Paris\"     # add new entry\nprint(dictionary)\nprint('')\ndictionary['Year'] = 2021\nprint(dictionary)\nprint('')\nfor x,y in dictionary.items():      # a different way to write keys and values\n    print(x, '-', y)\nprint('')\ndel dictionary['Spain']             # Remove entry with key 'Spain'\nprint(dictionary)\nprint('')\nprint('France' in dictionary)       # check include or not\ndictionary.clear()\nprint(dictionary)","fffa4f2f":"# In order run all code youe need to take comment this line\n# del dictionary     #delete entire dictionary\nprint(dictionary)","5a64a67a":"data = pd.read_csv('..\/input\/fifa19\/data.csv')","b90668df":"series = data['Name']      # data['Name']\nprint(type(series))\ndata_frame = data[['Name']]     #data[['Name']] = data_frame\nprint(type(data_frame))","cdd01295":"#Comparison operator\nprint(3 > 2)\nprint(3 != 2)\n#Boolean operators\nprint(True and False)\nprint(True or False)","5325d9a6":"# 1- Filtering Pandas data frame\n\nx = data['Potential'] > 90  # there are 29 football player who have higher potential value than 90\ndata[x]","ed1ab98c":"# 2- Filtering Pandas data frame\n# There are 9 football players who have higher potential value than 90 Overall value higher than 90\n\ndata[np.logical_and(data['Potential']>90, data['Overall']>90)]","19a4a197":"#this is also same with,previous code line. therefore we can also use '&' for filtering.\ndata[(data['Potential']>90) & (data['Overall']>90)]","91209925":"# Stay in loop if condition(i is not equal 5) is true\ni = 0\nwhile i != 5:\n    print('i is: ',i)\n    i += 1\nprint(i, 'i is equal to 5')","b57dabd0":"# Stay in loop if condition (i is not 5) is true\nlist = [1,2,3,4,5]\nfor i in list:\n    print('i is: ',i)\nprint('')\n\n#ennumerate index and value of list\n#index : value = 0:1, 1:2, 2:3, 3:4, 4:5\nfor index, value in enumerate(list):\n    print(index, \" : \", value)\nprint('')\n\n\n# For dictionaries\n# We can use for loop to achive key and value of dictionary. We learned key and value at dictionary part.\ndictionary = {'Spain':'Barcelona','France':'PSG'}\nfor key,value in dictionary.items():\n    print(key, ' : ', value)\nprint('')\n\n\n#For pandas we can achieve key and value\n\nfor index, value in data[['Potential']][0:1].iterrows():\n    print(index, ' : ', value)","cc54f022":"# docstrings\ndef tuple_ex():\n    \"\"\"return defined t tuples\"\"\"\n    t = (1,2,3)\n    return t\na,b,c = tuple_ex()\nprint(a,b,c)\n    ","33faecb2":"# guess print what\nrow1 = data[['Name']][0:1]\n\ndef f():\n    row1 = data[['Name']][1:2]\n    return row1\nprint(row1)        #row1 = data[['Name']][0:1] global scope\nprint(f())         # row1 = data[['Name']][1:2] local scope \n        ","7e55f8d2":"# what if there is no local scope\nx = 5\n\ndef f():\n    y = 2 * x      # there is no local scope x\n    return y   \nprint(f())         #  it uses global scope x\n# First local scope searched, then global scope searched, if to of them cannot be found lastly built in scope searched","a5144da8":"#How can we learn what is built in scope\n\nimport builtins\ndir(builtins)","2a455644":"# nested function\ndef square():\n    \"\"\" return square of value \"\"\"\n    def add():\n        \"\"\" add two local variable \"\"\"\n        x = 2\n        y = 5\n        z = x + y\n        return z \n    return add()**2 \nprint(square())","3570da83":"# default arguments\ndef f(a, b = 1, c = 2):\n    y = a + b + c\n    return y\nprint(f(5))\n\n# what if we want to change default arguments\nprint(f(5,4,3))","dff31937":"# flexible arguments *args\n\ndef f(*args) :\n    for i in args:\n        print(i)\nf(0)\nprint(\"\")\nf(1,2,3,4)\n# flexible arguments **kwargs that is dictionary\ndef f(**kwargs):\n    \"\"\" print key and value of dictionary\"\"\"\n    for key, value in kwargs.items():\n        print(key, \" \", value)\nf(Name = data[['Name']][:2], Club = data[['Club']][:2])","2e3927cf":"# lambda function\nsquare = lambda x : x**2       # where x is name of argument\nprint(square(4))\ntot = lambda x,y,z: x+y+z      # where x,y,z are names of arguments\nprint(tot(1,2,3))","2e9d996b":"number_list = [1,2,3]\ny = map(lambda x:x**2,number_list)\nprint(y)","f5e9c39a":"#Iteration example\nname = data[['Name']][0:1].items()\nit = iter(name)\nprint(next(it))      # print next iteration\nprint(*it)           # print remaining iteration","a9540500":"#Zipping list\nlist1 = [1,2,3,4]\nlist2 = [5,6,7,8]\nz = zip(list1,list2)\nprint(z)\nz_list = list(z)\nprint(z_list)","d1175c2c":"#Unzipping\nun_zip = zip(*z_list)\nun_list1,un_list2 = list(un_zip)       # unzip return tuple\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2))","7eb7048c":"# Example of list comprehension\nnum1 = [1,2,3]\nnum2 = [i + 1 for i in num1]\nprint(num2)","ae54022a":"# Conditionals on iterable\nnum1 = [5,10,15]\nnum2 = [i**2 if i == 10 else i-5 if i < 7 else i+5 for i in num1]\nprint(num2)","2f57dfcf":"# list comprehension example with our dataset\nthreshold = sum(data.Potential)\/len(data.Potential)\ndata[\"potential_Level\"] = [\"Good_Player\" if i > threshold else \"Bad_Player\" for i in data.Potential]\ndata.loc[12000:15000,[\"potential_Level\",\"Potential\"]]","d54c2b23":"# ITERATORS\n* Iterable is an object that can return an iterator\n* Iterable: an object with an associated iter() method\n* example:list,strings and dictionaries\n* Iterator: produces next value with next() method\n","8df73f8d":"# DEFAULT AND FLEXIBLE ARGUMENTS\n* Default argument example:\n<br> def (a, b=1):    # b = 1 is default argument \n\n\n\n\n* Flexible argument example:\n<br>def(f*args):  # *args can be one or more\n* def(f**kwargs)   # **kwargs is a dictionary","0bc54b95":"# Before continue with pandas we need to learn logic,control flow and filtering\n* Comparison operator: ==,<,>,<=\n* Boolean operators: and,or,not\n* Filtering Pandas","70bc7a0a":"# LIST COMPREHENSION\n**One of the most important topic of this kernel**\n<br> We use list comprehension for data analysis often.\nList Comprehension : collapse for loops for building lists into a single line\n<br> ex: num1[1,2,3] and we ant to make it num[2,3,4]. This can be done with for loop. We can make it one line that is list comprehension.","f1a48a7a":"# NESTED FUNCTION\n*  function inside function\n* There is a LEGB rule that is search local scope, enclosing funtion, global and built in scopes, respectively","9e630b30":"# LAMBDA FUNCTION\n<br> Faster way of writing function","306e0e16":"# ANONYMOUS FUNCTION\n<br> Like lambda function but it can take more than one arguments.\n\n* map(func, seq) : applies a function to all the items in a list","2706b2b9":"# DICTIONARY\n* It has 'key' and 'value' \n* faster than lists\n* dictionary = {'spain':'madrid', 'usa':'vegas'}","0c632750":"# MATPLOTLIB\n\nMatplotlib is a comprehensive library for creating static, animated, and interactive visualizations in Python.\nThe easiest and basic plots are line,scatter,histogram plots\n","febea06c":"# Read CSV format","1c170753":"# USER DEFINED FUNCTION\n* docstrings: \"\"\" this is a docstring for a function\"\"\"\n* tuple: uses paranthesis like tuble = (1,2,3)\n* unpack tuple a,b,c = tuple","b6cecf9c":"# PANDAS\n\n<br> Pandas is a fast, powerfull, flexible, and easy to use open source data analysis manipulation tool\n<br> What we need to know pandas?\n\n* CSV: comma-separated values","613d2748":"# Other formats\n\n* pd.read_json()\n* pd.read_html()\n* pd.read-sql()\n* pd.read_pickle()\n\n# Pandas has 2 type\n* Series\n* data_frame","a419dc55":"# WHILE AND FOR LOOPS\n\nWe will most basic while and for loops","147b329c":"# LINE PLOT\n\nLine plot is better when x axis is time","bf8e22c8":"# SCOPE\n\nWhat we need to know about scope:\n\n* global: defined main body in script\n* local: defined in a function\n* built in scope: names in predefined built in scope module such as print, len","07764b82":"# HISTOGRAM\n\nHistogram is better when we need to distribution of numerical data.","69bff687":"<br>[i + 1 for i in num1 ]: list of comprehension\n<br>i +1: list comprehension syntax\n<br>for i in num1: for loop syntax\n<br>i: iterator\n<br>num1: iterable object","37a5dffe":"# SCATTER PLOT\n\nScatter plot is better when there is correlation between two variables"}}