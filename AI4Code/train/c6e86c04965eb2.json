{"cell_type":{"6c07796d":"code","5d9cecbd":"code","4930b759":"code","cad792e1":"code","ec9c692f":"code","d380d7e2":"code","e5a1eed6":"code","e8a291bc":"code","856a9398":"code","bbb5782c":"code","b8bf35ca":"code","b78cd833":"code","10268287":"code","9c31b8ba":"code","9f3bea65":"code","fa048d21":"code","f9cf3c94":"code","e9451219":"code","aceec435":"code","5bfd37b8":"code","0e936d7e":"code","7a43fdc8":"code","a2ec2e1d":"code","484e434d":"code","61490f0b":"code","6644f3e9":"code","3a453adf":"code","7cfad72d":"code","fb4fcee5":"code","7de7b1bb":"code","51e2df4d":"code","2d43b476":"code","206f018c":"code","e3885e52":"code","ae1db159":"markdown","fd7a915d":"markdown","449cc45f":"markdown","8f5a02ee":"markdown","5b369fd3":"markdown"},"source":{"6c07796d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import model_selection","5d9cecbd":"train = pd.read_csv(\"\/kaggle\/input\/30-days-of-ml\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/30-days-of-ml\/test.csv\")\nsubmission_sample = pd.read_csv(\"\/kaggle\/input\/30-days-of-ml\/sample_submission.csv\")","4930b759":"submission_sample.head()","cad792e1":"train.head()","ec9c692f":"train.columns","d380d7e2":"train.describe()","e5a1eed6":"print(\"Shape: {}\".format(train.shape))\nprint(\"-\"*80,\"\\n\", \"Information: \\n\")\nprint(train.info())\nprint(\"-\"*80,\"\\n\", \"NaN count: \\n\")\nprint(train.isnull().sum())","e8a291bc":"duplicate_train = train[train.duplicated()]\nduplicate_train","856a9398":"train.drop([\"id\"], axis=1, inplace=True)\ntrain.shape","bbb5782c":"category_col = [col for col in train.columns if train[col].dtype == \"object\"]\nnumerical_col = list(set(train.columns) - set(category_col) - set([\"target\"]))\nprint(category_col)\nprint(numerical_col)","b8bf35ca":"train[category_col].head()","b78cd833":"sns.set({\"figure.figsize\": (30,10)})\nsns.barplot(y = train[category_col].nunique().values, x = train[category_col].columns)\nplt.xlabel(\"Categorical Variable\", fontsize=15)\nplt.ylabel(\"Number of Unique value count\", fontsize=15)\nplt.title(\"Frequency of unique value of Categorical feature\", fontsize=20)","10268287":"sns.set({\"figure.figsize\": (30,10)})\nnrow = 2\nncol = 5\nfig, axes = plt.subplots(nrow,ncol)\nfig.suptitle('Distribution of values of Categorical features', fontsize=20, fontweight='bold')\ncol = category_col\nfor i in range(nrow):\n    for j in range(ncol):\n        x = train[col[i*ncol + j]].value_counts()\n        axes[i,j].pie(x,startangle=90, wedgeprops={'edgecolor': 'black'}, explode = tuple([0.03]*len(x)), autopct='%1.f%%', shadow=True)\n        axes[i,j].legend(loc='best' ,labels=x.keys(), fontsize='medium')\n        axes[i,j].set_title(col[i*ncol + j], fontweight='bold')","9c31b8ba":"sns.set({\"figure.figsize\": (30,10)})\nnrow = 2\nncol = 5\nfig, axes = plt.subplots(nrow,ncol)\nfig.suptitle('Distribution of target for each Categorical features', fontsize=20, fontweight='bold')\ncol = category_col\nfor i in range(nrow):\n    for j in range(ncol):\n        sns.histplot(train, x = \"target\", hue = col[i*ncol + j], element=\"step\", stat=\"density\", ax = axes[i,j])","9f3bea65":"train[\"merged_cat\"] = train[\"cat0\"] + train[\"cat1\"] + train[\"cat2\"] + train[\"cat3\"] + train[\"cat4\"] +\\\n                      train[\"cat5\"] + train[\"cat6\"] + train[\"cat7\"] + train[\"cat8\"] + train[\"cat9\"]\ntrain.head()","fa048d21":"train[\"merged_cat\"].value_counts()","f9cf3c94":"temp_train = train[(train[\"merged_cat\"] == \"AAACBDAEAF\").values + \n                   (train[\"merged_cat\"] == \"ABACBBAECI\").values + \n                   (train[\"merged_cat\"] == \"BAACBDAEAF\").values + \n                   (train[\"merged_cat\"] == \"ABACBBAEEI\").values + \n                   (train[\"merged_cat\"] == \"ABACBBAECF\").values]\ntemp_train[\"merged_cat\"].value_counts()","e9451219":"sns.set({\"figure.figsize\": (30,10)})\nsns.histplot(temp_train, x = \"target\", hue = \"merged_cat\", element=\"step\", stat=\"density\")","aceec435":"train.drop([\"merged_cat\"], axis=1, inplace=True)\ntrain.head(1)","5bfd37b8":"train[numerical_col].head()","0e936d7e":"sns.set({\"figure.figsize\": (30,10)})\nnrow = 2\nncol = 7\nfig, axes = plt.subplots(nrow,ncol)\nfig.suptitle('Distribution of each numerical features', fontsize=20, fontweight='bold')\ncol = numerical_col\nfor i in range(nrow):\n    for j in range(ncol):\n        sns.histplot(train, x = col[i*ncol + j], element=\"step\", stat=\"density\", ax = axes[i,j])","7a43fdc8":"sns.boxplot(data = train[numerical_col])","a2ec2e1d":"sns.heatmap(train[numerical_col + [\"target\"]].corr(), annot=True)","484e434d":"sns.kdeplot(train[\"target\"])","61490f0b":"print(\"-\"*80)\nprint(\"10-100 percentile\")\nprint(\"-\"*80)\nfor i in [10,20,30,40,50,60,70,80,90,100]:\n    print(i,\"->\",np.percentile(train[\"target\"].values, i))\n\nprint(\"-\"*80)\nprint(\"1-10 percentile\")\nprint(\"-\"*80)\nfor i in [1,2,3,4,5,6,7,8,9,10]:\n    print(i,\"->\",np.percentile(train[\"target\"].values, i))\n    \nprint(\"-\"*80)\nprint(\"0-1 percentile\")\nprint(\"-\"*80)\nfor i in [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]:\n    print(i,\"->\",np.percentile(train[\"target\"].values, i))\n    \nprint(\"-\"*80)\nprint(\"0.01-0.1 percentile\")\nprint(\"-\"*80)\nfor i in [0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1]:\n    print(i,\"->\",np.percentile(train[\"target\"].values, i))","6644f3e9":"one_percentile = np.percentile(train[\"target\"].values, 1)\ntrain_99 = train[train[\"target\"] >= one_percentile]\ntrain_99.shape","3a453adf":"for col in category_col:\n    print(col,\"->\",train_99[col].nunique())","7cfad72d":"sns.kdeplot(train_99[\"target\"])","fb4fcee5":"sns.boxplot(data = train_99[\"target\"])","7de7b1bb":"train.head()","51e2df4d":"train[\"kfold\"]=-1\nnfolds = 5\nkf= model_selection.KFold(n_splits=nfolds, shuffle=True, random_state=42)\nfor fold,(train_indicies, valid_indicies) in enumerate(kf.split(X=train)):\n    train.loc[valid_indicies,\"kfold\"] = fold","2d43b476":"train.head(10)","206f018c":"sns.set({\"figure.figsize\": (30,5)})\nfig, axes = plt.subplots(1,nfolds)\nfig.suptitle('Distribution of target for each folds', fontsize=20, fontweight='bold')\nfor fold_no in range(nfolds):\n    fold = train[train.kfold == fold_no].reset_index(drop=True)\n    sns.kdeplot(fold[\"target\"], ax = axes[fold_no])\n    axes[fold_no].set_title(\"fold\"+str(fold_no), fontweight='bold')","e3885e52":"train.to_csv(\"train_folds.csv\",index=False)","ae1db159":"# Create Folds","fd7a915d":"# Analysis of Target","449cc45f":"#  Basic Analysis","8f5a02ee":"# Analysis of Numerical Features","5b369fd3":"# Analysis of Categorical Features"}}