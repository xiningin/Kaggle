{"cell_type":{"4ce1ea7f":"code","101889da":"code","be108702":"code","2bf6fbb1":"code","8cf1519c":"code","efd7c3bc":"code","a2c57517":"code","74c369f5":"code","fa1e104e":"code","22162e59":"code","9106885a":"code","94911c40":"code","bd0a2658":"code","e280451e":"code","43758cee":"markdown","070e8047":"markdown","b3093437":"markdown","cc677a4f":"markdown","13562bfc":"markdown","d661338b":"markdown","f93b4487":"markdown","3c4b1dc6":"markdown","81384e62":"markdown"},"source":{"4ce1ea7f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set_style(\"whitegrid\")\nsns.set_palette(\"deep\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","101889da":"DATA_PATH = \"\/kaggle\/input\/top-100-most-streamed-songs-on-spotify\/Top 100 most Streamed - Sheet1.csv\"\ndata = pd.read_csv(DATA_PATH)\ndata.head(20)","be108702":"data.info()","2bf6fbb1":"data.describe().drop(index=[\"count\"])","8cf1519c":"# labels of secondary importance\nsecondary_labels = [\"loudness.dB\", \"liveness\", \"acousticness\", \"speechiness\", \"valance\", \"beats.per.minute\", \"energy\", \"danceability\"]\n\ntmp = data.drop(columns=secondary_labels)\ntmp.head()\n\nfig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(30, 15))\nfig.tight_layout(h_pad=7)\ntmp_mean = tmp.groupby([\"top genre\"], as_index=False).mean()\n\n# I know. The following is very pretty code\norder = tmp.groupby(\"top genre\", as_index=False).mean().sort_values(by=\"popularity\", ascending=False)[\"top genre\"]\nsns.barplot(data=tmp, x=\"top genre\", y=\"popularity\", ax=ax1, order=order, palette=\"Blues_r\")\nax1.set_xticklabels(ax1.get_xticklabels(), rotation=30, ha=\"right\")\n\norder = tmp.groupby(\"year\", as_index=False).mean().sort_values(by=\"popularity\", ascending=False)[\"year\"]\nsns.barplot(data=tmp, x=\"year\", y=\"popularity\", ax=ax2, order=order, palette=\"Blues_r\")\nax2.set_xticklabels(ax2.get_xticklabels(), rotation=30, ha=\"right\")\n\norder = tmp.groupby(\"artist\", as_index=False).mean().sort_values(by=\"popularity\", ascending=False)[\"artist\"]\nsns.barplot(data=tmp, x=\"artist\", y=\"popularity\", ax=ax3, order=order, palette=\"Blues_r\")\n_ = ax3.set_xticklabels(ax3.get_xticklabels(), rotation=30, ha=\"right\")","efd7c3bc":"drop_labels = [\"title\", \"artist\"]\n\ntmp = data.drop(columns=drop_labels)\n\n_ = sns.pairplot(data=tmp)","a2c57517":"from matplotlib import colors\n\ncat_labels = [\"title\", \"artist\", \"top genre\"]\ntmp = data.drop(columns=cat_labels)\n\ncm = sns.color_palette(\"Blues_r\", as_cmap=True)\ndef func(a):\n    return \"background-color:%s\" % colors.rgb2hex(a)\ndef foo(s, props=cm):\n    normalized_df = abs(s \/ abs(s).max().max())\n    bg_color = cm(normalized_df)\n    return np.apply_along_axis(func, -1, bg_color)\ntmp.corr().style.apply(foo, props=cm, axis=None).applymap(lambda x: \"color:%s\" % \"gray\" if abs(x)<0.05 else \"\")","74c369f5":"fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(20, 10))\n\ntmp = data.sort_values(by=\"year\")\n# I will drop the single entry from 1995 and 1975 beacause it has no representative value\ntmp_dropped = data.sort_values(by=\"year\").drop(index=data[data[\"year\"] == 1995].index).drop(index=data[data[\"year\"] == 1975].index)\n\nsns.regplot(data=tmp, x=\"year\", y=\"length\", ax=ax1)\nax1.set_title(\"Linear Regression (song length) with old songs\")\nsns.regplot(data=tmp_dropped, x=\"year\", y=\"length\", ax=ax2)\nax2.set_title(\"Linear Regression (song length) without old songs\")\n\nsns.regplot(data=tmp, x=\"year\", y=\"popularity\", ax=ax3)\nax3.set_title(\"Linear Regression (popularity) with old songs\")\nsns.regplot(data=tmp_dropped, x=\"year\", y=\"popularity\", ax=ax4)\nax4.set_title(\"Linear Regression (popularity) without old songs\")","fa1e104e":"fig, ax1 = plt.subplots(1, 1, figsize=(23,10))\ntmp = data.drop(index=np.where(data[\"year\"]<=2010)[0]).sort_values(by=\"year\")\nsns.scatterplot(data=tmp, x=\"year\", y=\"popularity\", size=\"energy\", hue=\"acousticness\", sizes=(90, 400), alpha=0.8, ax=ax1, palette=\"Blues\")","22162e59":"data[\"top genre\"]","9106885a":"# Splitting. TODO: Stratified splitting\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(data.drop(columns=\"popularity\"), data[\"popularity\"], random_state=123, test_size=0.33)","94911c40":"from sklearn.pipeline import Pipeline\nfrom sklearn.base import TransformerMixin, BaseEstimator\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\n\ncat_labels = [\"genre_class\"]\nnum_labels = [\"year\", \"beats.per.minute\", \"energy\", \"danceability\", \"loudness.dB\", \"liveness\", \"valance\", \"length\", \"acousticness\", \"speechiness\"]# , \"title_len\"]\n\ndef top_to_general(genre_name):\n    if genre_name == \"dance pop\":\n        return \"dance pop\"\n    elif \"pop\" in genre_name:\n        return \"pop\"\n    elif \"rap\" in genre_name:\n        return \"rap\"\n    elif \"hip hop\" in genre_name:\n        return \"hip hop\"\n    elif \"rock\" in genre_name:\n        return \"rock\"\n    else:\n        return \"other\"\n    \nclass FullDFTransformer(TransformerMixin, BaseEstimator):\n    def __init__(self):\n        pass\n    \n    def fit(self, X, y=None):\n        return self\n    \n    def transform(self, X, y=None):\n        X_new = X.drop(columns=[\"artist\", \"title\", \"top genre\"])\n        X_new[\"title_len\"] = [len(title) for title in X[\"title\"]]\n        X_new[\"genre_class\"] = list(map(top_to_general, X[\"top genre\"]))\n        return X_new\n    \ncol_transform = ColumnTransformer([\n    (\"cat\", OneHotEncoder(), cat_labels),\n    (\"num\", StandardScaler(), num_labels)\n])\n\nfull_pipeline = Pipeline([\n    (\"basic\", FullDFTransformer()),\n    (\"col\", col_transform)\n])\n\nX_prep = full_pipeline.fit_transform(X_train)\nX_test_prep = full_pipeline.fit_transform(X_test)","bd0a2658":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import cross_val_score\n\ndef cross_score(X, y, model):\n    return np.sqrt(-cross_val_score(model, X, y, cv=10, scoring=\"neg_mean_squared_error\").mean())\n\nlin_reg = LinearRegression()\nlin_reg.fit(X_prep, y_train)\ncross_score(X_prep, y_train, lin_reg)","e280451e":"from sklearn.metrics import mean_squared_error\n\nnp.sqrt(mean_squared_error(lin_reg.predict(X_test_prep), y_test))","43758cee":"In the correlation matrix there are a few interesting values. Some of the previously mentioned parameters make a bit more sense.\n\nFor example:\n- Energy is a mix between loudness and acousticness\n- Valance has a bit of correlation with danceability\n- Speechiness has a bit of correlation with loudness but that might be aswell random\n\nMore interesting correlations are:\n- The length of songs decreases with time while songs become more danceable\n- Bpm don't have any correlation with the year\n- The popularity is pretty independent of all parameters. Although less energetic and more acoustic songs tend to be slightly more popular.\n\nThe lack of correlation between popularity and other parameters will make a learning based prediction rather hard.\n\nTo illustrate the second part of my discussion I will now take a closer look at *popularity* and *year*.","070e8047":"## Conclusion\n\nThe Title length parameter seems to worsen the result. So I left it out. The dataset is also pretty small, so there is big error on the predictions.\nI really hope you liked this notebook :). Feel free to leave any suggestions.","b3093437":"# Spotify: Most listened songs examination\n\n### What is the purpose of this notebook?\n\nIn this notebook I will look for correlations between song parameters and it's popularity.\n\n### For the future\n\nIn future versions I might do a learning based approach at predicting the popularity for a song.\n\n## Basic analysis","cc677a4f":"As you can see there are many parameters to play with of which I don't quite understand some.","13562bfc":"As you can see the average time of a song goes down with the published year. But the popularity is pretty independant of the year. At last I will look at correlations in energy and acousticness and popularity and year. The last 4 years will be dropped because of a lack of represantative value.","d661338b":"## Prediction\n\nIn this chapter I will try to predict the popularity of a song in a learning based approach.\nAs this isn't the main focus of the notebook I will not explain\/discuss each step.\n\n### Approach\n\n- In the current state the *genre* parameter is pretty useless as a categorical value, as there are too many single entries. But I can group them together. For example the category *pop* could be: *electropop*, *dancepop*, *pop* etc. This might be oversimplified but it's probably better than throwing these values away.\n- The artist value *could* be converted into a *sex* attribute.\n- *Title* can be converted into title length. Or if you really wanted to, you could take a NLP AI like GPT-3 or something less complex and extract the *mood* and convert that into another attribute.\n- The numeric parameters will be converted with a min-max- or std-scaler\n\nI will choose a simple sklearn model like RandomTreeRegressor or a Linear Regression for prediction.\nIn case there are some under- or overrepresented values these will be sampled with a stratified sampler.\nDates until 2010 will be ignored as there are only 4.","f93b4487":"Let's look at some basic stats","3c4b1dc6":"There are a few things to notice here. First of all the mean year for a popular song to come out is 2016. Which doesn't necesarily mean most popsongs came out in 2016. But we will lok at this later. Also the mean danceability and energy is relatively high compared to the max value whereas acousticness, speechiness and liveness (whatever that means) are rather low.\n\n## Visualization\n\n### Basic stats\n\nLet's look at the distribution of years, artists and generes. I will use the *popularity* parameter as a popularity metric.","81384e62":"In the plots above there is some basic information about genres, artists and years. Please consider that while 2020 might have been the year where the average popularity of songs was highest it is not necesarily the year with the most popsongs. Same for the other graphs. Also notice that *Maroon 5* and others is pretty low on the list. But that just means that some of their songs performed amazing while others didn't as you can see from the errorbar. \n\n### Correlations\n\nLet's have a look at some correlations in our data."}}