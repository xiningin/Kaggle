{"cell_type":{"aac11a06":"code","4a10e25d":"code","4cde1e73":"code","d6cfea71":"code","a4ac2b82":"code","8d9aa3de":"code","cf30f56c":"code","775153a6":"code","28abd53d":"code","d6c9a7e0":"code","2ac54c5d":"code","91d1fc2b":"code","b715605e":"code","a0c801a9":"code","5fcd2fd5":"code","2b997e9d":"code","fada4113":"code","453e549e":"code","439e2bf8":"code","03d63f12":"code","24c55962":"code","01e42386":"code","bd9c4810":"code","3c565017":"code","9db9f7c5":"code","5d30804d":"code","5ec0ae71":"code","a40c599e":"code","ef8c8929":"code","e75efa77":"code","5480f970":"code","b2de3c62":"code","7cc42b6f":"code","938a421a":"code","874da927":"code","f612a10b":"code","8e8682fe":"code","66e194d3":"code","d8bb6794":"code","b0cd1aec":"code","c4d60f66":"code","59a2c065":"code","844183da":"code","17bb2412":"code","7fbd1155":"code","230f5008":"code","63ad6a8f":"code","d15d1518":"code","a59dab84":"markdown","ded3a9a7":"markdown","2596612c":"markdown","3d91d489":"markdown","9204ec3a":"markdown","bd86bfcc":"markdown","0830b4d8":"markdown","e9309a06":"markdown","2d2812f9":"markdown","50acb2cb":"markdown","8378b8f0":"markdown","e3e7bd09":"markdown","f2d97631":"markdown","5ffcf4f4":"markdown","7e0e7280":"markdown","7c0abc58":"markdown","fcbe762e":"markdown","1cefeb35":"markdown","23cffa9e":"markdown","759682c8":"markdown","f2172edc":"markdown","6d82b171":"markdown","ffd0cce5":"markdown"},"source":{"aac11a06":"import pandas as pd\n\n# Not limiting the column number when displaying dataframe\npd.set_option(\"display.max_columns\", None)","4a10e25d":"df = pd.read_csv(\"..\/input\/heart-failure-prediction\/heart.csv\", sep = r',', skipinitialspace = True)\ndf.head()","4cde1e73":"df.tail()","d6cfea71":"df.shape","a4ac2b82":"print(df.columns)","8d9aa3de":"rows = df.shape[0]\ncols = df.shape[1]\n\nprint(\"Before cleaning, there are \" + str(rows) + \" rows and \" + str(cols) + \" columns in this dataframe.\")","cf30f56c":"dupRows = df.duplicated().sum()\nprint(\"There are \" + str(dupRows) + \" duplicated rows in the dataframe.\")","775153a6":"df.isnull().sum()","28abd53d":"df.nunique()","d6c9a7e0":"df.info()","2ac54c5d":"df.dtypes.value_counts()","91d1fc2b":"df.describe()","b715605e":"df.memory_usage()","a0c801a9":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize = (16, 16))\nplt.title(\"Age Distribution\", fontsize = 20)\nplt.xlabel(\"Age\", fontsize = 16)\nplt.ylabel(\"Number of occurences\", fontsize = 16)\nsns.histplot(df[\"Age\"], color = \"gold\")\nplt.show()","5fcd2fd5":"df.corr()","2b997e9d":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\ncorrelations = df.corr()\n\nplt.figure(figsize = (16, 16))\nplt.title(\"Heatmap displaying the correlations between all columns\", fontsize = 20)\nsns.heatmap(correlations, annot = True, cmap = \"YlOrBr\", cbar_kws={'label': 'Correlation Value', 'orientation': 'horizontal'})","fada4113":"hd = df.corr()[\"HeartDisease\"]\nhd = pd.DataFrame(hd)\nhd","453e549e":"%matplotlib inline\n\nplt.figure(figsize = (16, 12))\nplt.title(\"Correlations between input columns and target column 'HeartDisease'\", fontsize = 20)\nplt.xlabel(\"Columns\", fontsize = 16)\nplt.ylabel(\"Correlation factor\", fontsize = 16)\nplt.plot(hd, color = \"orange\", linestyle = \"\", marker = \"X\")\nplt.show()","439e2bf8":"sns.pairplot(df)","03d63f12":"no = df.value_counts([\"HeartDisease\"])[0]\nyes = df.value_counts([\"HeartDisease\"])[1]\n\nprint(str(no) + \" patients do not have heart disease, while \" + str(yes) + \" do.\")","24c55962":"pd.crosstab(df[\"Sex\"], df[\"HeartDisease\"])","01e42386":"ct = pd.crosstab(df[\"Sex\"], df[\"HeartDisease\"]) \n\nplt.figure(figsize = (16, 12))\nplt.title(\"Crosstab showing how many patients of which sex were diagnosed with heart disease\", fontsize = 20)\nsns.heatmap(ct, cmap = \"PiYG\", annot = True, cbar = True, fmt = \"g\", cbar_kws={'label': 'Absolute number of occurences', 'orientation': 'horizontal'})","bd9c4810":"pd.crosstab(df[\"Age\"], df[\"HeartDisease\"])","3c565017":"ct = pd.crosstab(df[\"Age\"], df[\"HeartDisease\"]) \n\nplt.figure(figsize = (16, 16))\nplt.title(\"Crosstab showing how many patients of what age were diagnosed with heart disease\", fontsize = 20)\nsns.heatmap(ct, cmap = \"BuPu\", annot = True, cbar = True, fmt = \"g\", cbar_kws={'label': 'Absolute number of occurences', 'orientation': 'horizontal'})","9db9f7c5":"pip install pandas-profiling[notebook]","5d30804d":"import pandas_profiling\nfrom pandas_profiling import ProfileReport\n\nprofile = ProfileReport(df, title = \"Pandas Profiling Report\", explorative = True)\n\nprofile.to_widgets()","5ec0ae71":"df.head()","a40c599e":"df = df.dropna()","ef8c8929":"df = df.replace(\"M\", 1)\ndf = df.replace(\"F\", 2)","e75efa77":"df[\"ChestPainType\"] = df[\"ChestPainType\"].astype(str)\ndf[\"RestingECG\"] = df[\"RestingECG\"].astype(str)\ndf[\"ExerciseAngina\"] = df[\"ExerciseAngina\"].astype(str)\ndf[\"ST_Slope\"] = df[\"ST_Slope\"].astype(str)\n\nfrom sklearn import preprocessing\n\nnumber = preprocessing.LabelEncoder()\n\ndf[\"ChestPainType\"] = number.fit_transform(df[\"ChestPainType\"])\ndf[\"RestingECG\"] = number.fit_transform(df[\"RestingECG\"])\ndf[\"ExerciseAngina\"] = number.fit_transform(df[\"ExerciseAngina\"])\ndf[\"ST_Slope\"] = number.fit_transform(df[\"ST_Slope\"])\n\ndf.head()","5480f970":"from sklearn.model_selection import train_test_split\n\nX = df.drop([\"HeartDisease\"], axis = 1)\ny = df[\"HeartDisease\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 0, test_size = 0.1)","b2de3c62":"from sklearn.linear_model import LogisticRegression\n\nmodel = LogisticRegression(solver = \"saga\", max_iter = 10000)\nmodel.fit(X_train, y_train)","7cc42b6f":"model.score(X_test, y_test)","938a421a":"from sklearn.ensemble import RandomForestClassifier\n\nmodel = RandomForestClassifier(criterion = \"entropy\")\nmodel.fit(X_train, y_train)","874da927":"model.score(X_test, y_test)","f612a10b":"from sklearn.tree import DecisionTreeClassifier\n\nmodel = DecisionTreeClassifier(criterion = \"entropy\")\nmodel.fit(X_train, y_train)","8e8682fe":"print(model.score(X_test, y_test))","66e194d3":"from sklearn.model_selection import validation_curve\nfrom sklearn.tree import DecisionTreeClassifier\nimport numpy as np\n\nparam_range = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n\ntrain_scores, test_scores = validation_curve(DecisionTreeClassifier(), X_train, y_train, param_name = \"max_depth\", param_range = param_range)\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize = (16, 12))\n\nplt.plot(param_range, np.mean(train_scores, axis = 1))\nplt.plot(param_range, np.mean(test_scores, axis = 1))\n\nplt.title(\"How does the tree depth influence the accuracy?\", fontsize = 20)\nplt.xlabel(\"depth levels of model\", fontsize = 15)\nplt.ylabel(\"model accuracy\", fontsize = 15)\n\n# Adding a legend\nplt.legend([\"train\", \"test\"], loc = \"upper left\", fontsize = 12)\n\nplt.show()","d8bb6794":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nscaler.fit(X_train)\n\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","b0cd1aec":"from sklearn.svm import SVC\n\nmodel = SVC(kernel = \"rbf\", gamma = 0.01, C = 5)\nmodel.fit(X_train, y_train)","c4d60f66":"model.score(X_test, y_test)","59a2c065":"from sklearn.naive_bayes import GaussianNB\n\nmodel = GaussianNB()\nmodel.fit(X_train, y_train)","844183da":"model.score(X_test, y_test)","17bb2412":"from sklearn.neighbors import KNeighborsClassifier\n\nmodel = KNeighborsClassifier(n_neighbors = 18)\nmodel.fit(X_train, y_train)","7fbd1155":"model.score(X_test, y_test)","230f5008":"from sklearn.model_selection import learning_curve\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.utils import shuffle\n\nX_train, y_train = shuffle(X_train, y_train)\n\nimport numpy as np\n\ntrain_sizes_abs, train_scores, test_scores = learning_curve(KNeighborsClassifier(), X_train, y_train)\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize = (16, 12))\n\nplt.plot(train_sizes_abs, np.mean(train_scores, axis = 1))\nplt.plot(train_sizes_abs, np.mean(test_scores, axis = 1))\n\nplt.title(\"Learning Curve KNN\", fontsize = 20)\nplt.xlabel(\"Number of neighbors\", fontsize = 15)\nplt.ylabel(\"Model Accuracy\", fontsize = 15)\n\n# Adding a legend\nplt.legend([\"train\", \"test\"], loc = \"upper right\", fontsize = 12)\n\nplt.show()","63ad6a8f":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nscaler.fit(X_train)\n\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)\n\n\nfrom sklearn.linear_model import LogisticRegression\n\nmodel = LogisticRegression(solver = \"saga\", max_iter = 10000)\nmodel.fit(X_train, y_train)","d15d1518":"model.score(X_test, y_test)","a59dab84":"Are there more men or more women with heart disease and what is their percentage?","ded3a9a7":"#### **Step 2: Defining input\/output and Splitting dataframe**","2596612c":"#### Decision Tree","3d91d489":"# **Heart Disease (EDA & ML)**","9204ec3a":"How many people have heart disease and how many don't?","bd86bfcc":"## **Machine Learning (ML)**","0830b4d8":"#### SVM with RBF-Kernel","e9309a06":"#### Logistic Regression with pre-scaled data","2d2812f9":"## **Exploratory Data Analysis (EDA)**","50acb2cb":"#### **Step 2: Basic statistics about the dataframe and specific columns**","8378b8f0":"#### **Step 1: Loading and Displaying tabular data**","e3e7bd09":"#### Gaussian NB","f2d97631":"#### Logistic Regression","5ffcf4f4":"How many people of what age had to die?","7e0e7280":"How do the columns correlate with our target column \"HeartDisease\"?","7c0abc58":"#### Random Forest","fcbe762e":"There are way more men with heart disease than women, both in % and in absolute numbers.","1cefeb35":"#### **Step 3: Models**","23cffa9e":"#### **Step 3: Correlation, Interdependencies, Relations & more**","759682c8":"#### **Step 4: Interactive Profiling**","f2172edc":"#### KNN","6d82b171":"#### **Step 1: Pre-Cleaning & Pre-Processing data**","ffd0cce5":"#### ================================================================================================================"}}