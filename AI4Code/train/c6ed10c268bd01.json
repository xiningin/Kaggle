{"cell_type":{"a3e24db4":"code","4c98050b":"code","a19f35ab":"code","63b71c68":"code","f66ecd9f":"code","394613b1":"code","c491eff6":"code","3858448c":"code","364981f5":"code","b5f49c55":"code","5b5267ae":"code","14a51da0":"code","77fe32df":"code","48bdc4cc":"code","8d8e9767":"code","b48d32da":"code","0a6e5745":"code","51375510":"code","cc8f9dc5":"code","cabd2795":"code","e4a2b48a":"code","3c662072":"code","ba5cfa4b":"code","ac9ac3f0":"code","29cb6a7f":"markdown"},"source":{"a3e24db4":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","4c98050b":"train_data=pd.read_csv(\"..\/input\/train.csv\")\ntest_data=pd.read_csv(\"..\/input\/test.csv\")","a19f35ab":"train_data.info()","63b71c68":"test_data.info()","f66ecd9f":"train_data.describe()","394613b1":"train_data.Cover_Type.value_counts()","c491eff6":"train_data['HF1'] = train_data['Horizontal_Distance_To_Hydrology']+train_data['Horizontal_Distance_To_Fire_Points']\ntrain_data['HF2'] = abs(train_data['Horizontal_Distance_To_Hydrology']-train_data['Horizontal_Distance_To_Fire_Points'])\ntrain_data['HR1'] = abs(train_data['Horizontal_Distance_To_Hydrology']+train_data['Horizontal_Distance_To_Roadways'])\ntrain_data['HR2'] = abs(train_data['Horizontal_Distance_To_Hydrology']-train_data['Horizontal_Distance_To_Roadways'])\ntrain_data['FR1'] = abs(train_data['Horizontal_Distance_To_Fire_Points']+train_data['Horizontal_Distance_To_Roadways'])\ntrain_data['FR2'] = abs(train_data['Horizontal_Distance_To_Fire_Points']-train_data['Horizontal_Distance_To_Roadways'])\ntrain_data['ele_vert'] = train_data.Elevation-train_data.Vertical_Distance_To_Hydrology\n\ntrain_data['slope_hyd'] = (train_data['Horizontal_Distance_To_Hydrology']**2+train_data['Vertical_Distance_To_Hydrology']**2)**0.5\ntrain_data.slope_hyd=train_data.slope_hyd.map(lambda x: 0 if np.isinf(x) else x)\ntrain_data['Mean_Amenities']=(train_data.Horizontal_Distance_To_Fire_Points + train_data.Horizontal_Distance_To_Hydrology + train_data.Horizontal_Distance_To_Roadways) \/ 3 \ntrain_data['Mean_Fire_Hyd']=(train_data.Horizontal_Distance_To_Fire_Points + train_data.Horizontal_Distance_To_Hydrology) \/ 2 \ntest_data['HF1'] = test_data['Horizontal_Distance_To_Hydrology']+test_data['Horizontal_Distance_To_Fire_Points']\ntest_data['HF2'] = abs(test_data['Horizontal_Distance_To_Hydrology']-test_data['Horizontal_Distance_To_Fire_Points'])\ntest_data['HR1'] = abs(test_data['Horizontal_Distance_To_Hydrology']+test_data['Horizontal_Distance_To_Roadways'])\ntest_data['HR2'] = abs(test_data['Horizontal_Distance_To_Hydrology']-test_data['Horizontal_Distance_To_Roadways'])\ntest_data['FR1'] = abs(test_data['Horizontal_Distance_To_Fire_Points']+test_data['Horizontal_Distance_To_Roadways'])\ntest_data['FR2'] = abs(test_data['Horizontal_Distance_To_Fire_Points']-test_data['Horizontal_Distance_To_Roadways'])\ntest_data['ele_vert'] = test_data.Elevation-test_data.Vertical_Distance_To_Hydrology\n\ntest_data['slope_hyd'] = (test_data['Horizontal_Distance_To_Hydrology']**2+test_data['Vertical_Distance_To_Hydrology']**2)**0.5\ntest_data.slope_hyd=test_data.slope_hyd.map(lambda x: 0 if np.isinf(x) else x)\ntest_data['Mean_Amenities']=(test_data.Horizontal_Distance_To_Fire_Points + test_data.Horizontal_Distance_To_Hydrology + test_data.Horizontal_Distance_To_Roadways) \/ 3 \ntest_data['Mean_Fire_Hyd']=(test_data.Horizontal_Distance_To_Fire_Points + test_data.Horizontal_Distance_To_Hydrology) \/ 2","3858448c":"real_data_columns=[\"Elevation\",\"Aspect\",\"Slope\",\"Horizontal_Distance_To_Hydrology\",\"Vertical_Distance_To_Hydrology\",\n          \"Hillshade_9am\",\"Hillshade_Noon\",\"Hillshade_3pm\",\"Horizontal_Distance_To_Fire_Points\",\"Horizontal_Distance_To_Roadways\",\n                  \"HF1\",\"HF2\",\"HR1\",\"HR2\",\"FR1\",\"FR2\",\"ele_vert\",\"slope_hyd\",\"Mean_Amenities\",\"Mean_Fire_Hyd\"]","364981f5":"train_data.Soil_Type40.value_counts()","b5f49c55":"train_data=train_data.drop(['Soil_Type25'],axis=1)\ntest_data=test_data.drop(['Soil_Type25'],axis=1)","5b5267ae":"train_data=train_data.drop(['Soil_Type7'],axis=1)\ntest_data=test_data.drop(['Soil_Type7'],axis=1)","14a51da0":"print(train_data.shape)\nprint(test_data.shape)","77fe32df":"test_id=test_data[\"Id\"].values\ntest_data=test_data.drop([\"Id\"],axis=1)\ntrain_target=train_data[\"Cover_Type\"].values\ntrain_data=train_data.drop([\"Id\",\"Cover_Type\"],axis=1)","48bdc4cc":"train_data.head()","8d8e9767":"test_data.head()","b48d32da":"train_data_real=train_data[real_data_columns]\ntest_data_real=test_data[real_data_columns]\ntrain_data_bynary=train_data.drop(real_data_columns,axis=1)\ntest_data_bynary=test_data.drop(real_data_columns,axis=1)\nmean=train_data_real.mean(axis=0)\nstd=train_data_real.std(axis=0)\ntrain_data_real-=mean\ntrain_data_real\/=std\ntest_data_real-=mean\ntest_data_real\/=std\nX_train=np.hstack((train_data_real,train_data_bynary))\nX_test=np.hstack((test_data_real,test_data_bynary))\nmapping={1:0,2:1,3:2,4:3,5:4,6:5,7:6}\nY_train=[mapping[y] for y in train_target]","0a6e5745":"from sklearn.model_selection import train_test_split","51375510":"training_data,val_data,training_target,val_target=train_test_split(X_train,\n                                                                   Y_train,test_size=0.3)","cc8f9dc5":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.model_selection import cross_val_score","cabd2795":"%%time\ncv=5\nclf=RandomForestClassifier(n_estimators=475,criterion=\"entropy\",max_depth=25,random_state=49)\nscores=cross_val_score(clf,training_data,training_target,scoring=\"accuracy\",cv=cv)\nprint(scores.mean())","e4a2b48a":"%%time\ncv=5\nclf=ExtraTreesClassifier(n_estimators=303)\nscores=cross_val_score(clf,training_data,training_target,scoring=\"accuracy\",cv=cv)\nprint(scores.mean())","3c662072":"%%time\nfrom sklearn.metrics import accuracy_score\nclf.fit(training_data,training_target)\nprediction=clf.predict(val_data)\nprint(accuracy_score(val_target,prediction))","ba5cfa4b":"%%time\nclf=ExtraTreesClassifier(n_estimators=303)\nclf.fit(X_train,Y_train)","ac9ac3f0":"%%time\nprediction=clf.predict(X_test)\nmapping={0:1,1:2,2:3,3:4,4:5,5:6,6:7}\nprediction=[mapping[y] for y in prediction]\ndata_submission=pd.DataFrame()\ndata_submission['Id']=test_id\ndata_submission[\"Cover_Type\"]=prediction\ndata_submission.to_csv(\"my_submission.csv\",index=False)","29cb6a7f":"This feature engeneering is taken from the following source: https:\/\/www.kaggle.com\/codename007\/forest-cover-type-eda-baseline-model?scriptVersionId=4280427"}}