{"cell_type":{"7707c8bf":"code","bc81cfe2":"code","fe2898e8":"code","85536001":"code","d37a4593":"code","628fad86":"code","5db19ae7":"code","ba630a17":"code","b9616d3b":"code","4341e361":"code","abc87dc2":"markdown","ba4120c3":"markdown"},"source":{"7707c8bf":"import numpy as np \nimport pandas as pd\n\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nimport seaborn as sn\n\nimport tensorflow as tf\nfrom tensorflow import keras\n\nfrom keras.applications.vgg16 import VGG16\nfrom keras.utils import np_utils\nfrom keras.layers import Dense, Flatten, Dropout\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Model\n\nfrom sklearn.model_selection import train_test_split\n\nfrom pathlib import Path\nimport os\n","bc81cfe2":"#Showing one image from the dataset\n\npesce = Image.open('..\/input\/a-large-scale-fish-dataset\/Fish_Dataset\/Fish_Dataset\/Black Sea Sprat\/Black Sea Sprat\/00001.png')\nplt.imshow(pesce)\nprint(np.array(pesce).shape)\n","fe2898e8":"# Making the pandas dataframe w\/ the columns : | path image | label |\ndataset_path = Path(r'..\/input\/a-large-scale-fish-dataset\/Fish_Dataset\/Fish_Dataset')\nfile_path = list(dataset_path.glob(r'**\/*.png'))\n\n# create labels from the folder name\nlabels = list(map(lambda x: os.path.split(os.path.split(x)[0])[1], file_path))\n\nfile_path = pd.Series(file_path).astype(str)\nlabels = pd.Series(labels)\n\ndf = pd.concat([file_path, labels], axis=1)\n\ndf.columns = ['image', 'label']\n\nmy_mask = df[\"label\"].str.contains(\"GT\")\ndf = df.drop(df.query(\"@my_mask\").index)\n\ndisplay(df)\n\nclasses = set(df[\"label\"])\nprint(classes)","85536001":"# Split of dataset\nx_train, x_test = train_test_split(df, test_size=0.3, random_state=190)\nx_train, x_val = train_test_split(x_train, test_size=0.2, random_state=190)\n\n# here we set the parameters for the train and the model\nsteps_to_train = 1000\nbatch_size = 64\ninput_shape = ( 224, 224, 3)\n\n# Generator creation\ndatagen = ImageDataGenerator(rescale=1.\/255.)\n\ntrain_generator = datagen.flow_from_dataframe(\n        dataframe = x_train,\n        directory = '.\/',\n        x_col = \"image\",\n        y_col = \"label\",\n        target_size = (input_shape[0],input_shape[1]),\n        class_mode='categorical',\n        shuffle = False\n)\n\ntest_generator = datagen.flow_from_dataframe(\n    dataframe = x_test,\n    directory = '.\/',\n    x_col = \"image\",\n    y_col = \"label\",\n    target_size = ( input_shape[0], input_shape[1]),\n    class_mode='categorical',\n    shuffle=False\n)\n\nvalidation_generator=datagen.flow_from_dataframe(\n        dataframe = x_val,\n        directory = '.\/',\n        x_col = \"image\",\n        y_col = \"label\",\n        target_size = (input_shape[0],input_shape[1]),\n        class_mode='categorical',\n        shuffle = False\n)\n\ndata = train_generator.next()\n\nprint(data[0][0].shape)\nplt.imshow(data[0][0])\n","d37a4593":"#We can see the dataset distribution used by the imagedatagenerator\nprint(f'len train {len(x_train)}')\nprint(f'len test {len(x_test)}')\nprint(f'len val {len(x_val)}')\nfor el in classes:\n    print(\"-----\", el, \"------\")\n    print(\"test: \",len(np.where(x_train['label'] == el )[0]))\n    print(\"train: \",len(np.where(x_test['label']== el )[0]))\n    print(\"val: \",len(np.where(x_val['label']== el )[0]))","628fad86":"model = VGG16(include_top=False, input_shape=input_shape)\n# mark loaded layers as not trainable\nfor layer in model.layers:\n\tlayer.trainable = False\n# add new classifier layers\nflat1 = Flatten()(model.layers[-1].output)\nclass1 = Dense(512, activation='relu',)(flat1)\noutput = Dense(9, activation='sigmoid')(class1)\n\t# define new model\nmodel = Model(inputs=model.inputs, outputs=output)\n\t# compile model\n\nmodel.summary()","5db19ae7":"model.compile(loss = \"categorical_crossentropy\", optimizer='adam', metrics=['accuracy'])\n\nhistory = model.fit(train_generator,\n    steps_per_epoch = steps_to_train \/\/ batch_size,\n    epochs = 15,\n    validation_data = validation_generator,\n    validation_steps = steps_to_train \/\/ batch_size,\n    )","ba630a17":"score = model.evaluate(test_generator, verbose = 1) ","b9616d3b":"from matplotlib import pyplot\n# plot learning curves\nplt.figure(figsize=(10,3))\n\npyplot.subplot(1,2,1)\npyplot.title('Learning Curves - Accuracy')\npyplot.xlabel('Epoch')\npyplot.ylabel('Cross Entropy')\npyplot.plot(history.history['accuracy'], label='train')\npyplot.plot(history.history['val_accuracy'], label='val')\npyplot.legend()\n\n# Plot training & validation loss values\nplt.subplot(1,2,2)\npyplot.plot(history.history[\"loss\"])\npyplot.plot(history.history[\"val_loss\"])\npyplot.title('Model loss Curve')\npyplot.ylabel('Loss')\npyplot.xlabel('Epoch')\npyplot.legend(['Train', 'Val'], loc='upper left')\npyplot.show()","4341e361":"from sklearn.metrics import classification_report, confusion_matrix\n\nclasses = sorted(classes)\n\nY_pred = model.predict(test_generator)\ny_pred = np.argmax(Y_pred, axis=1)\n\nprint('Confusion Matrix')\nmatrix = confusion_matrix(test_generator.classes, y_pred)\ndf_cm = pd.DataFrame(matrix, range(9),range(9))\nplt.figure(figsize = (10,7))\nsn.set(font_scale=1.4)#for label size\nsn.heatmap(df_cm, cmap=\"Blues\",annot=True, fmt='g', annot_kws={\"size\": 10}, yticklabels = classes, xticklabels= False)# font size\nplt.show()\nprint('Classification Report')\ntarget_names = list(classes)\nprint(classification_report(test_generator.classes, y_pred, target_names=target_names, digits=4))","abc87dc2":"### Results\n\nAs shown in the last cell:\n\nFirst of all: from the confusion matrix we can assume that the class similarity dont affect the prediction of the model.\n\nThe model has a good perform: 99% of accuracy is a good result and VGG16 has done is job\n","ba4120c3":"### A LARGE SCALE FISH RECOGNIZER\n\nIn this notebook we use VGG16 for create a classifier that can correctly classify the fish on the dataset.\n\nInitally, we analized the dataset and we noticed some similarity from the class:\n\n* \u201cgilt head bream\u201d with \u201cred sea bream\u201d  \n* \u201cred mullet\u201d  with  \u201cstriped red mullet\u201d \n\n\nas shown here:\n\n![](http:\/\/thetrash.altervista.org\/kaggle\/class_similarity.png)"}}