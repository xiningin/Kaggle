{"cell_type":{"a23204c8":"code","f78e8134":"code","981dd46f":"code","e5bd12c9":"code","baf5c7f2":"code","e275baa6":"code","27517e70":"code","17c5c0a3":"code","df9839d9":"code","fcfde902":"code","c6609a66":"code","ed0a3680":"code","f91fccf0":"code","edbc6142":"code","0ac18f33":"code","225c3d3a":"code","f588dc14":"code","cdcfc888":"code","841cb68c":"code","19bc6e76":"code","a0d539ce":"code","1a5bb369":"code","85b9c697":"code","d9a06cca":"code","8ba8c879":"code","4a4fee0b":"code","b7b85ea8":"code","85dca108":"code","58092fc3":"code","cfe68221":"code","a1d93348":"code","ed1ad8cb":"code","65d7904c":"code","cbc5075f":"code","1a733e24":"markdown","23bd5a58":"markdown","87046d19":"markdown","c1aa26b7":"markdown","72cbca0d":"markdown","8ecccf69":"markdown","ae2616fb":"markdown","2c5e137d":"markdown","32deab82":"markdown","2345400d":"markdown","7039b372":"markdown","d7bc9cf8":"markdown","84356316":"markdown","1c65ad38":"markdown","ce4ff558":"markdown","510ee886":"markdown","3f1d5851":"markdown","e215b570":"markdown","0d786c17":"markdown","f1309464":"markdown","bad45ab5":"markdown","b8d74006":"markdown","566bfbfd":"markdown","f88aee4b":"markdown","dc889d40":"markdown","d08e1d93":"markdown","6885c43d":"markdown","43ca89fa":"markdown","26595b1e":"markdown"},"source":{"a23204c8":"import numpy as np \nimport pandas as pd \nfrom pandas import Series, DataFrame\nimport matplotlib.pyplot as plt\nimport seaborn as sns","f78e8134":"data=pd.read_csv('..\/input\/melbourne-housing-snapshot\/melb_data.csv')\ndata['Date']=pd.to_datetime(data['Date']) ## convert 'object' to 'Date' Data type\nMelbourne_df=data.copy()","981dd46f":"data.head()","e5bd12c9":"Melbourne_df.describe()","baf5c7f2":"print(Melbourne_df.info())","e275baa6":"plt.figure(figsize=(10,8))\nplt.hist(Melbourne_df.Price\/1000,bins=50)\nplt.xlabel('Prices in $1000s')\nplt.ylabel('Number of houses')","27517e70":"Re_Name={'h':'House','u':'Unit','t':'Townhouse'}\nMelbourne_df.replace({'Type':Re_Name},inplace=True)","17c5c0a3":"Most_Expensive_Suburb=Melbourne_df.groupby(['Suburb'])['Price'].mean().sort_values(ascending=True).head(5)\nMost_Expensive_Suburb=Most_Expensive_Suburb\/1000\nMost_Expensive_Suburb.plot.barh()\nplt.xlabel('Prices in $1000')\nplt.title('Top 5 Most Expensive Suburbs')","df9839d9":"plt.figure(figsize=(12,8))\nsns.boxplot(x=Melbourne_df['Type'],y=Melbourne_df['Price']).set_title('Price VS Type')","fcfde902":"plt.figure(figsize=(10,8))\nsns.scatterplot(y=np.log(Melbourne_df['Price']),x=Melbourne_df['Distance'],data=Melbourne_df,hue='Type').set_title(\"Distance from Property to Downtown\",fontsize=20)\n","c6609a66":"def Zone(Distance):\n    if Distance<5:\n        return '<5KM'\n    elif Distance<=5 and Distance<12:\n        return '5KM-12KM'\n    elif Distance <=12 and Distance<23:\n        return '12KM-23KM'\n    else:\n        return '>23KM'\nMelbourne_df['Zone']=Melbourne_df['Distance'].apply(Zone)\n\nMelbourne_Zone1=Melbourne_df[Melbourne_df.Zone=='<5KM']\nMelbourne_Zone2=Melbourne_df[Melbourne_df.Zone=='5KM-12KM']\nMelbourne_Zone3=Melbourne_df[Melbourne_df.Zone=='12KM-23KM']\nMelbourne_Zone4=Melbourne_df[Melbourne_df.Zone=='>23KM']\n\nfig, axarr = plt.subplots(2, 2, figsize=(14, 10))\nfig.suptitle('Price in $1000',fontsize=15)\nsns.boxenplot(x=Melbourne_Zone1.Zone,y=Melbourne_Zone1['Price']\/1000,data=Melbourne_Zone1,palette=\"Set1\",ax=axarr[0][0],hue='Type')\nsns.boxenplot(x=Melbourne_Zone2.Zone,y=Melbourne_Zone2['Price']\/1000,data=Melbourne_Zone2,palette=\"Set1\",ax=axarr[0][1],hue='Type')\nsns.boxenplot(x=Melbourne_Zone3.Zone,y=Melbourne_Zone3['Price']\/1000,data=Melbourne_Zone3,palette=\"Set1\",ax=axarr[1][0],hue='Type')\nsns.boxenplot(x=Melbourne_Zone4.Zone,y=Melbourne_Zone4['Price']\/1000,data=Melbourne_Zone4,palette=\"Set1\",ax=axarr[1][1],hue='Type')\nplt.subplots_adjust(hspace=.4)\nsns.set_style('darkgrid')\nsns.despine()","ed0a3680":"plt.figure(figsize=(16,10))\nsns.lineplot(x='Date',y='Price',data=Melbourne_df,hue='Type',palette='Set2').set_ylim(500000,2200000)\n\n","f91fccf0":"Missing_Data=Melbourne_df.isnull().sum()\nMissing_df=DataFrame(Missing_Data.sort_values(ascending=False))\nMissing_df.columns=['Total Missing Data']\nMissing_df=Missing_df.head(5)\nprint(Missing_df)","edbc6142":"plt.figure(figsize=(10,10))\nplt.title('Missing Data',fontsize=15)\nsns.barplot(x=Missing_df.index,y='Total Missing Data',data=Missing_df)","0ac18f33":"Melbourne_df=Melbourne_df.drop(['BuildingArea','YearBuilt'],'columns')\nMelbourne_df=Melbourne_df.dropna()\nprint(Melbourne_df.info())","225c3d3a":"Numerical_Attributes=[Attribute for Attribute in Melbourne_df.columns if Melbourne_df[Attribute].dtype !='object']\nprint('There are {} numerical features.'.format(len(Numerical_Attributes)))","f588dc14":"from sklearn.linear_model import LinearRegression","cdcfc888":"Category_Features=['Suburb','Address','Type','Method','SellerG','Postcode','CouncilArea','Regionname','Date','Lattitude','Longtitude','Zone','Propertycount']\n\nMelbourne_df_CategoryOut=Melbourne_df.drop(Category_Features,'columns')\nProperty_Classification=Melbourne_df_CategoryOut# Prepare Logistic Modelling DataFrame for later use\nprint(Melbourne_df_CategoryOut.info())","841cb68c":"plt.figure(figsize=(10,10))\nplt.title('Correlation heatmap of continuous Attributes',fontsize=15)\nsns.heatmap(Melbourne_df_CategoryOut.corr(),annot=True,fmt='.2f',cmap='RdYlGn')","19bc6e76":"Linear_Regression=LinearRegression()\nMelbourne_df_PriceOut=Melbourne_df_CategoryOut.drop('Price','columns')#set 'Price' as the target, we have to drop 'Price' column for Linear Regression fit\nX_multi=Melbourne_df_PriceOut\nY_target=Melbourne_df.Price\nLinear_Regression.fit(X_multi,Y_target)\nprint('The estimated intercept coefficient is {:.2f}'.format(Linear_Regression.intercept_)) #2 Digital Decimal Points\nprint('The number of coefficients used was %d'%(len(Linear_Regression.coef_)))","a0d539ce":"coeff_df=DataFrame(Melbourne_df_PriceOut.columns)\ncoeff_df.columns=['Features']\ncoeff_df['Coefficient Estimate']=pd.Series(Linear_Regression.coef_)\nprint(coeff_df)","1a5bb369":"plt.figure(figsize=(16,16))\nsns.jointplot(x='Rooms',y='Price',data=Melbourne_df_CategoryOut,kind='reg',truncate=False,color='m')","85b9c697":"import sklearn.model_selection\n\nX=Melbourne_df.Rooms\nX=np.array([[value,1]for value in X])\nX_train,X_test,Y_train,Y_test=sklearn.model_selection.train_test_split(X,Y_target)\nprint(X_train.shape,X_test.shape,Y_train.shape,Y_test.shape)","d9a06cca":"Linear_Regression.fit(X_train,Y_train)\nPrediction_train=Linear_Regression.predict(X_train)\nPrediction_test=Linear_Regression.predict(X_test)\nprint('Fit a model X_train, and calculate the Mean Square Error with Y_target: {}'.format(np.mean(Y_train-Prediction_train)**2))\nprint('Fit a model X_train, and calculate the Mean Square Error with X_test and Y_test: {}'.format(np.mean(Y_test-Prediction_test)**2))","8ba8c879":"Train=plt.scatter(Prediction_train,(Prediction_train-Y_train),color='b',alpha=0.5)\nTest=plt.scatter(Prediction_test,(Prediction_test-Y_test),color='r',alpha=0.5)\nplt.hlines(y=0,xmin=-10,xmax=40)\nplt.legend((Train,Test),('Training','Test'),loc='lower left')\nplt.title('Residual Plots')\nplt.show()","4a4fee0b":"from sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nimport math","b7b85ea8":"def logistic(t):\n    return 1.0\/(1+math.exp((-1.0)*t))\nt=np.linspace(-6,6,500)\ny=np.array([logistic(ele)for ele in t])\nplt.plot(t,y)\nplt.title('Logistic Function')","85dca108":"#Check if a property has vehicles\ndef Vehicle_Check(x):\n    if x !=0:\n        return 1\n    else:\n        return 0\n    \nMelbourne_df_CategoryOut['Have_Vehicle']=Melbourne_df['Car'].apply(Vehicle_Check)\nY_Target=Melbourne_df_CategoryOut.Have_Vehicle","58092fc3":"Type_Dummies=pd.get_dummies(Melbourne_df.Type)\nSuburb_Dummies=pd.get_dummies(Melbourne_df.Suburb)\nDummies=pd.concat([Type_Dummies,Suburb_Dummies],axis=1)\nMelbourne_df_Logistic=Melbourne_df_CategoryOut.drop(['Have_Vehicle','Car'],'columns')# Drop Target Columns\nMelbourne_df_Logistic=pd.concat([Melbourne_df_Logistic,Dummies],axis=1) # merge Dummy variable","cfe68221":"Melbourne_df_Logistic=Melbourne_df_Logistic.drop(['Abbotsford','Unit'],axis=1)\nX=Melbourne_df_Logistic\nY_Target=np.ravel(Y_Target)\nLogistic_model=LogisticRegression() \nLogistic_model.fit(X,Y_Target)\nprint(\"Accuracy rate: {:.3f}\".format(Logistic_model.score(X,Y_Target)))\nCoefficients_df=DataFrame(zip(X.columns,np.transpose(Logistic_model.coef_)))","a1d93348":"X_Train,X_Test,Y_Train,Y_Test=sklearn.model_selection.train_test_split(X,Y_Target)\nLogistic_model2=LogisticRegression()\nLogistic_model2.fit(X_Train,Y_Train)\n\n#Predict the classes of the testing data set\nClass_Prediction=Logistic_model2.predict(X_Test)\nprint(\"Accuracy Score: {:.3f}\".format(metrics.accuracy_score(Y_Test,Class_Prediction)))","ed1ad8cb":"# Classify property Type\n# A quick look for the relationship between different attributess\nfrom sklearn.model_selection import train_test_split\nProperty_Classification=Property_Classification.drop('Have_Vehicle',1)\nsns.pairplot(Property_Classification,height=2)","65d7904c":"#Drop 'Landsize' column since this attribute did not tell information from pairplot\nProperty_Classification=Property_Classification.drop('Landsize',axis=1)\nY_Target=Melbourne_df.Type\nX=Property_Classification\nX_Train,X_Test,Y_Train,Y_Test=train_test_split(X,Y_Target,test_size=0.4,random_state=3)\nLogistic_model.fit(X_Train,Y_Train)\nY_Prediction=Logistic_model.predict(X_Test)\n\nprint(\"Accuracy Score: {:.3f}\".format(metrics.accuracy_score(Y_Test,Y_Prediction)))","cbc5075f":"from sklearn.neighbors import KNeighborsClassifier\n\nKNN=KNeighborsClassifier(n_neighbors=6)\nKNN.fit(X_Train,Y_Train)\nY_Prediction=KNN.predict(X_Test)\nprint(\"Accuracy Score: {:.3f}\".format(metrics.accuracy_score(Y_Test,Y_Prediction)))\n\n# identify accuracy at different K\nK_range=range(1,21)  \naccuracy=[]\n\nfor k in K_range:\n    KNN=KNeighborsClassifier(n_neighbors=k)\n    KNN.fit(X_Train,Y_Train)\n    Y_Prediction=KNN.predict(X_Test)\n    accuracy.append(metrics.accuracy_score(Y_Test,Y_Prediction))\n    \nplt.plot(K_range,accuracy)\nplt.xlabel('K Value')\nplt.ylabel('Testing Accuracy')","1a733e24":"# Price Features VS Distance VS Type","23bd5a58":"# A quick overview of data","87046d19":"# Top 5 Most Expensive Suburbs","c1aa26b7":"# Melbourne House Market Regression and Classification Modelling\n\nThis Data Anaytics Assignment provides a brief understanding of Melbourne Hourse Market.** **Wooliter Chen** **\n\n\n#Linear Regression\n#Logistic Regression\n#Multi-Class Classification\n#Nearest Neighbours Classification","72cbca0d":"As we can see from the price distribution above, which reflects the probability theory \u201cnormal distribution. The 68% of House Price allocated in 1 standard deviation\n![image.png](attachment:image.png)","8ecccf69":"# Data Training","ae2616fb":"# Drop Categorical Columns + Geographic Coordinate","2c5e137d":"# Nearest Neighbours Classification","32deab82":"# Testing and Training Data Sets","2345400d":"# Identify Numerical Attributes","7039b372":"# Linear Regression, 'Price' is Target","d7bc9cf8":"# Dropping one column of each dummy variable set to avoid multicollinearity","84356316":"# Linear Regression Modelling","1c65ad38":"# Price VS Type","ce4ff558":"# Have a quick look for the relationship between 'Rooms' and Price since 'Rooms' has the largest Coefficient\n","510ee886":"# Identify Missing Data","3f1d5851":"# Multi-Class Classification","e215b570":"# Distance between Property to Downtown","0d786c17":"# Drop top 2 missing data + remove null value","f1309464":"Re-Name data for 'Type' columns","bad45ab5":"# Identify Mean Square Error","b8d74006":"# Continuous Attributes correlations","566bfbfd":"# Create Dummy Variable for 'Type' column","f88aee4b":"# Logistic Regression","dc889d40":"# Looking for the greatest Coefficient for training data to predict Price","d08e1d93":"# What Logictis Model looks like !","6885c43d":"# Price Over the Period","43ca89fa":"# Produce Residual Plot","26595b1e":"# Identify if property owns a vehicle"}}