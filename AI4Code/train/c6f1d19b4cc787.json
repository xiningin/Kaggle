{"cell_type":{"504a1ac0":"code","c6cb6821":"code","f7cfcf07":"code","eb63fc81":"code","18de5920":"code","732cfaf3":"code","6b0e47bc":"code","9d9b33a5":"code","36f46965":"code","09d199c5":"code","bbb0e6a5":"code","1305105c":"markdown"},"source":{"504a1ac0":"# Python \u22653.5 is required\nimport sys\nassert sys.version_info >= (3, 5)\n\n# Is this notebook running on Colab or Kaggle?\nIS_COLAB = \"google.colab\" in sys.modules\nIS_KAGGLE = \"kaggle_secrets\" in sys.modules\n\n# Scikit-Learn \u22650.20 is required\nimport sklearn\nassert sklearn.__version__ >= \"0.20\"\n\n# Common imports\nimport numpy as np\nimport os\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\n# to make this notebook's output stable across runs\nnp.random.seed(42)\n\n# To plot pretty figures\n%matplotlib inline\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nmpl.rc('axes', labelsize=14)\nmpl.rc('xtick', labelsize=12)\nmpl.rc('ytick', labelsize=12)\n\n# Where to save the figures\nPROJECT_ROOT_DIR = \".\"\nCHAPTER_ID = \"classification\"\nIMAGES_PATH = os.path.join(PROJECT_ROOT_DIR, \"images\", CHAPTER_ID)\nos.makedirs(IMAGES_PATH, exist_ok=True)\n\ndef save_fig(fig_id, tight_layout=True, fig_extension=\"png\", resolution=300):\n    path = os.path.join(IMAGES_PATH, fig_id + \".\" + fig_extension)\n    print(\"Saving figure\", fig_id)\n    if tight_layout:\n        plt.tight_layout()\n    plt.savefig(path, format=fig_extension, dpi=resolution)\n","c6cb6821":"\nfrom sklearn.datasets import fetch_openml\nmnist = fetch_openml('mnist_784', version=1, as_frame=False)\nmnist.keys()","f7cfcf07":"%matplotlib inline\n\nX, y = mnist[\"data\"], mnist[\"target\"]\nsome_digit = X[10]\nsome_digit_image = some_digit.reshape(28, 28)\nplt.imshow(some_digit_image, cmap=mpl.cm.binary)\nplt.axis(\"off\")\n\nsave_fig(\"some_digit_plot\")\nplt.show()","eb63fc81":"y = y.astype(np.uint8)","18de5920":"def plot_digits(instances, images_per_row=10, **options):\n    size = 28\n    images_per_row = min(len(instances), images_per_row)\n    images = [instance.reshape(size,size) for instance in instances]\n    n_rows = (len(instances) - 1) \/\/ images_per_row + 1\n    row_images = []\n    n_empty = n_rows * images_per_row - len(instances)\n    images.append(np.zeros((size, size * n_empty)))\n    for row in range(n_rows):\n        rimages = images[row * images_per_row : (row + 1) * images_per_row]\n        row_images.append(np.concatenate(rimages, axis=1))\n    image = np.concatenate(row_images, axis=0)\n    plt.imshow(image, cmap = mpl.cm.binary, **options)\n    plt.axis(\"off\")","732cfaf3":"plt.figure(figsize=(9,9))\nexample_images = X[:100]\nplot_digits(example_images, images_per_row=10)\nsave_fig(\"more_digits_plot\")\nplt.show()","6b0e47bc":"print(f'Shape of data set: {X.shape}; shape of predictions: {y.shape}')\nX_train, X_test, y_train, y_test = X[:60000], X[60000:], y[:60000], y[60000:]","9d9b33a5":"from sklearn.neighbors import KNeighborsClassifier\nneigh = KNeighborsClassifier(n_neighbors=3)\nneigh.fit(X_train, y_train)","36f46965":"# Mic testing :D\nnum = 100\nprint(neigh.predict([X_test[num]]))\nprint(y_test[num])","09d199c5":"y_pred = neigh.predict(X_test)","bbb0e6a5":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test, y_pred)\n# JA JA JA ","1305105c":"This notebook is the solution attempt to Hands on Machine Learning Chapter 3 (Classification) Question 1 \nReference: \nhttps:\/\/github.com\/ageron\/handson-ml2\/blob\/master\/03_classification.ipynb"}}