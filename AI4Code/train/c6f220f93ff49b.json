{"cell_type":{"4d675c4d":"code","3c440f90":"code","dfe845ae":"code","04914211":"code","9049a542":"code","d710f0d0":"code","a7a77f1f":"code","1ad199ee":"code","6ac7e2cd":"markdown","e0a544ac":"markdown","be542b7a":"markdown"},"source":{"4d675c4d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.preprocessing import MinMaxScaler\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","3c440f90":"def get_data():\n    train_df = pd.read_csv('..\/input\/train.csv')\n    train_data = train_df.values\n    train_features = np.float64(train_data[:, 2:])\n    \n    scaler = MinMaxScaler(feature_range=(-1, 1))\n    scaler.fit(train_features)\n    train_features = scaler.transform(train_features)\n    \n    train_target = np.float64(train_data[:, 1])\n    return train_features, train_target","dfe845ae":"train_features, train_target = get_data()","04914211":"warnings.filterwarnings('ignore')","9049a542":"train_data = pd.DataFrame(train_features)\ntrain_data['target'] = train_target\ncolumns = train_data.columns\n\nfor column in columns:\n    if column != 'target':\n        sns.pairplot(x_vars=column, y_vars=column, hue='target', diag_kind='kde', data=train_data, palette=['green', 'red'])","d710f0d0":"zero_samples = []\none_samples = []\n\nfor i, target in enumerate(train_target):\n    if target == 0:\n        zero_samples.append(train_features[i])\n    else:\n        one_samples.append(train_features[i])\n\nzero_samples = np.array(zero_samples)\none_samples = np.array(one_samples)","a7a77f1f":"for sample in zero_samples[:100]:\n    sns.heatmap(sample.reshape((8, 25)))\n    plt.show()","1ad199ee":"for sample in one_samples[:100]:\n    sns.heatmap(sample.reshape((8, 25)))\n    plt.show()","6ac7e2cd":"**Plot heatmaps representing the distribution of features in class 0**","e0a544ac":"**Plot heatmaps representing the distribution of features in class 1**","be542b7a":"**Plot distribution plots of each feature for each class (0 and 1)**"}}