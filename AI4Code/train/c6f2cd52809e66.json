{"cell_type":{"0459048f":"code","b3287ef3":"code","7a9bfd24":"code","e77c29a0":"code","7b680f95":"code","42bfa2fe":"code","3f3f353e":"code","77b78a00":"code","a44d9200":"code","79472538":"code","b6e61f06":"code","0ff90c82":"code","7d9b69df":"code","bad80290":"code","f47a298a":"code","d915261e":"code","0bcdaf09":"code","19056814":"code","6d076b00":"code","b6704283":"code","de18a809":"code","8f514f26":"code","f8ef25d0":"code","96b77065":"code","698cc778":"code","80c632f5":"code","ec8643ff":"code","49cf6919":"code","76c3a857":"code","5e418444":"code","39745f67":"code","b439384d":"code","fe71884c":"code","f08ff23e":"code","5e26e42b":"code","578605f0":"code","92ee48dc":"code","ab768ad6":"code","9858689d":"code","f319b851":"code","9daac63a":"code","1e533ff7":"code","237963a4":"code","4d25f470":"code","9bb27a18":"code","a3e97872":"code","fe759c0d":"code","fe13bd60":"code","72ef3055":"code","e14f42f8":"code","13393d29":"code","c55d63f8":"code","f7c513b8":"code","0bfb5485":"code","679f20c0":"code","c67181cb":"code","62603591":"code","3b7d4e9f":"markdown","2f0d7cd2":"markdown","57140e38":"markdown","8d4ac7c3":"markdown","65b0d084":"markdown","2e21eb79":"markdown","de1a0544":"markdown","f4a70ec7":"markdown","49c477d7":"markdown","36d8ec54":"markdown","d922462b":"markdown","59bdd335":"markdown"},"source":{"0459048f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b3287ef3":"import matplotlib.pyplot as plt\nimport seaborn as sns","7a9bfd24":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n","e77c29a0":"train_data.head()","7b680f95":"#shape & info of data\nprint(\"shape:\",train_data.shape)\nprint(\"-\"*70)\ntrain_data.describe()","42bfa2fe":"train_data.columns.tolist()","3f3f353e":"train_data.isnull().sum()","77b78a00":"#As we can see, PassengerId, Ticket, Cabin are unrelated\n#So we'll remove these coloumns\ntrain_data=train_data.drop([\"PassengerId\",\"Ticket\",\"Cabin\"],axis=1)\ntrain_data.head()","a44d9200":"#now time for filling null values\ntrain_data[\"Age\"].fillna(train_data[\"Age\"].mean(),inplace=True)\ntrain_data[\"Embarked\"].fillna(train_data[\"Embarked\"].mode()[0],inplace=True)\ntrain_data.isnull().sum()","79472538":"train_data.info()","b6e61f06":"#scatter plot\nsns.relplot(x=\"Pclass\",y=\"Age\",hue=\"Survived\",data=train_data)","0ff90c82":"def bar_chart(column):\n    survived=train_data[train_data[\"Survived\"]==1][column].value_counts()\n    dead=train_data[train_data[\"Survived\"]==0][column].value_counts()\n    df1=pd.DataFrame([survived,dead])\n    df1.index=[\"Survived\",\"Dead\"]\n    print(df1)\n    df1.plot(kind=\"bar\",figsize=(10,5))\n","7d9b69df":"bar_chart(\"Sex\")","bad80290":"bar_chart(\"Pclass\")","f47a298a":"bar_chart(\"SibSp\")","d915261e":"bar_chart(\"Embarked\")","0bcdaf09":"#ploting pair plot\ngraph=sns.PairGrid(train_data,hue=\"Survived\")\ngraph.map_diag(sns.histplot)\ngraph.map_offdiag(sns.scatterplot)\ngraph.add_legend","19056814":"train_data[\"SibSp\"].value_counts()","6d076b00":"#checking largest values\nprint(train_data.shape,\"\\n\",\"-\"*60)\ntrain_data.nlargest(12,[\"SibSp\"])","b6704283":"#dropping outliers\ntrain_data=train_data.drop([159,180,201,324,792,846,863])\ntrain_data.shape","de18a809":"#value counts\ntrain_data[\"Parch\"].value_counts()","8f514f26":"print(train_data.shape,'\\n',\"-\"*60)\ntrain_data.nlargest(12,\"Parch\")","f8ef25d0":"train_data=train_data.drop(678)\ntrain_data.shape","96b77065":"#checking heatmap co relation\nplt.figure(figsize=(8,8))\nsns.heatmap(train_data.corr(), annot=True, linewidths=0.5, linecolor=\"white\", fmt= '.2f', cmap=\"magma\")\nplt.show()","698cc778":"#dividing data in X(features) & Y(outcome)\nX=train_data.drop([\"Fare\",\"Survived\",\"Name\"],axis=True)\nY=train_data[\"Survived\"]","80c632f5":"print(X.shape)\nprint(Y.shape)","ec8643ff":"X.head()","49cf6919":"#encoding embarked with ranks\nX.loc[X[\"Embarked\"] == \"C\", \"Embarked\"] = 2\nX.loc[X[\"Embarked\"] == \"Q\", \"Embarked\"] = 1\nX.loc[X[\"Embarked\"] == \"S\", \"Embarked\"] = 0","76c3a857":"#encode sex in rank\nX.loc[X[\"Sex\"]==\"female\",\"Sex\"]=1\nX.loc[X[\"Sex\"]==\"male\",\"Sex\"]=0","5e418444":"X.head()","39745f67":"#family size\nX[\"Family_Size\"]=train_data[\"SibSp\"]+train_data[\"Parch\"]","b439384d":"#normalizing age\nX[\"Age\"]=np.log(X[\"Age\"])","fe71884c":"X.head()","f08ff23e":"Y.head()","5e26e42b":"#spliting training data into training and validation sets\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=.25,random_state=0)","578605f0":"from sklearn.ensemble import RandomForestClassifier\n\n\nRFC = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nRFC.fit(X,Y)\nprint(RFC.score(X_test,Y_test))","92ee48dc":"from sklearn.linear_model import LogisticRegression\nLR=LogisticRegression(random_state=40)\nLR.fit(X_train,Y_train)\n\nprint(LR.score(X_test,Y_test))","ab768ad6":"test_data.head()","9858689d":"#creating the actual test data\nTest_X=test_data.drop([\"Cabin\",\"PassengerId\",\"Fare\",\"Name\",\"Ticket\"],axis=True)\nTest_X.head()","f319b851":"Test_X.isnull().sum()","9daac63a":"Test_X[\"Age\"].fillna(Test_X[\"Age\"].mean(),inplace=True)","1e533ff7":"Test_X[\"Age\"]=np.log(Test_X[\"Age\"])","237963a4":"Test_X.isnull().sum()","4d25f470":"Test_X.loc[Test_X['Embarked'] == \"C\", 'Embarked'] = 2\nTest_X.loc[Test_X['Embarked'] == \"Q\", 'Embarked'] = 1\nTest_X.loc[Test_X['Embarked'] == \"S\", 'Embarked'] = 0","9bb27a18":"Test_X.loc[Test_X['Sex'] == \"female\", 'Sex'] = 1\nTest_X.loc[Test_X['Sex'] == \"male\", 'Sex'] = 0","a3e97872":"Test_X[\"Family_Size\"]=Test_X[\"SibSp\"]+Test_X[\"Parch\"]","fe759c0d":"print(Test_X.shape)\nTest_X.head()","fe13bd60":"prediction_LR=LR.predict(Test_X)\nprint(prediction_LR)","72ef3055":"test_result_LR=np.array(prediction_LR).tolist()\nlen(test_result_LR)","e14f42f8":"print(test_data.shape)\ntest_data.head()","13393d29":"prediction_LR_data=test_data.copy()","c55d63f8":"prediction_LR_data","f7c513b8":"prediction_LR_data=prediction_LR_data.drop(['Pclass','Name','Sex','Age','SibSp','Parch','Ticket','Fare','Cabin','Embarked'],axis=1)\nprediction_LR_data.head()","0bfb5485":"prediction_LR_data[\"Survived\"]=test_result_LR","679f20c0":"prediction_LR_data.head()","c67181cb":"prediction_LR_data.to_csv(\"Titanic_model_LR.csv\",index=False)\nprint(\"File saved successfully!\")","62603591":"check=pd.read_csv(\".\/Titanic_model_LR.csv\")\ncheck","3b7d4e9f":"### LR test","2f0d7cd2":"## Feature Engineering","57140e38":"### So here we're getting 84.6% accuracy on validation set","8d4ac7c3":"### Bar charts of columns","65b0d084":"## Creating Logistic Regression Model","2e21eb79":"### we getting 84.1% accuracy on validation set","de1a0544":"## Creating a RandomForest Model","f4a70ec7":"### Now predicting actual data","49c477d7":"## Testing on actual test set","36d8ec54":"# Data Analysis","d922462b":"## Loading and reading the Data","59bdd335":"### Converting predictions to csv"}}