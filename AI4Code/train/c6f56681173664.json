{"cell_type":{"0a0242e7":"code","946b3e09":"code","9eabcf97":"code","b1254694":"code","c9b85116":"code","ba4c2619":"code","ffe75901":"code","f49f14f0":"code","f26cf5a7":"code","b4ab7460":"code","6e898348":"code","0c9fecde":"code","eb16edea":"code","68e3d9b0":"code","fed9b1e6":"code","696b8ba2":"code","9b6fea2b":"code","70fd1e72":"code","892506b4":"code","f0825fff":"code","f89ca614":"code","b8b3f461":"code","97c3a732":"code","70bb6290":"code","efe25222":"code","e8c2c8ff":"code","dc0938b1":"code","72565833":"code","49d17e12":"code","e62a973e":"code","b391912e":"code","7e99f19d":"code","881ce216":"code","57c4ef1b":"code","42a11a53":"code","b205df00":"code","307fe211":"code","ecc0b8be":"code","6c3c4282":"code","b04c1452":"code","6205690d":"code","7ff4e315":"code","42b9b724":"code","554b6316":"code","de89c452":"code","e1145619":"code","b17c75d0":"code","70f8dacf":"code","79451674":"code","7d50c30e":"code","9e2f98e5":"code","c9b04519":"code","dbacc3eb":"code","37b7c5e8":"code","bbd9f24d":"code","d3ae6577":"code","8637b44f":"markdown","6dfa7e67":"markdown","ed201513":"markdown","0df49472":"markdown","e8ea2c73":"markdown","7ffca451":"markdown","0825312d":"markdown","30bc5582":"markdown","00cb4003":"markdown","2bdddf5f":"markdown","ea34a4d5":"markdown","e81d9593":"markdown","c03c54e5":"markdown","05f7e8af":"markdown","01de73bd":"markdown","0b21e1b9":"markdown","41c46926":"markdown","62107f47":"markdown","59b5c92e":"markdown","6f45229c":"markdown","9fa833c3":"markdown","e3964520":"markdown","76cfd126":"markdown","6f23df3d":"markdown","ca7a7043":"markdown","c110687f":"markdown","33b2a866":"markdown","dd006406":"markdown","ad60d5cb":"markdown","f41d9109":"markdown"},"source":{"0a0242e7":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns \nimport matplotlib.pyplot as plt \nimport plotly.express as px \nimport matplotlib.gridspec as gridspec\nfrom  collections import defaultdict\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.manifold import TSNE as tsne\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\nimport os\nimport gc\nimport pickle\nimport lightgbm as lgbm\nfrom sklearn.model_selection import train_test_split\nfrom tqdm import tqdm\nfrom sklearn.metrics import roc_curve,auc,roc_auc_score\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nfrom sklearn.model_selection import KFold\n\n","946b3e09":"def save_pickle(dict_param,nom_fich):\n    with open(nom_fich,\"wb\") as f :\n        pickle.dump(dict_param,f)","9eabcf97":"# The root path\npath = \"\/kaggle\/input\/jane-street-market-prediction\/\"\n\n# Load the training datas.\ntrain = pd.read_csv(path + \"train.csv\")\n\n# Load the metadata pertaining to the anonymized features.\nfeatures = pd.read_csv(path + \"features.csv\")","b1254694":"# Take a look at the training data\ntrain.head()","c9b85116":"# info about training datas.\ntrain.info()","ba4c2619":"# some statistics on the training datas.\ntrain.describe()","ffe75901":"# Display missing values per column\n\nmissing_table = pd.DataFrame({c:(train[c].isna().sum()\/len(train))*100 for c in train.columns},index=[\"% missing values\"])\n\nmissing_table","f49f14f0":"# Display the histogram \nfig,axes = plt.subplots(nrows=45,ncols=3,figsize=(25,250))\n\nfor i in range(2,137):\n    sns.distplot(train.iloc[:,i],ax=axes[(i-2)\/\/3,(i-2)%3])","f26cf5a7":"# Compute the correlation between pair features.\n\ncorrelation_table = train[[train.columns[i] for i in range(2,137)]].corr()","b4ab7460":"# Display the correlation table of pair features.\ncorrelation_table","6e898348":"def detect_correlated_features(df,threshold=0.5):\n    \"\"\"This function will try detect features who have correlation grower than the introduced \n     threshold value.\n     \n     @param df(DataFrame): The dataframe who resume the correlation values between features.\n     @param threshold(int) : the threshold that the function, will use as reference to detect\n                             correlated features.\n     @return list(List): list of tuple, who resume features that have correlation grower than\n                           the introduced threshold.\n     \"\"\"\n    correlated= defaultdict(list)\n    for col in df.columns:\n        dex = list(df.columns).index(col)\n        for ind in df.index[dex+1:] :\n            if df.loc[col,ind] > threshold:\n               correlated[col].append (ind)\n                \n    return correlated","0c9fecde":"# Detect the highly correlated features.Which they had coefficient correlation grower than 0.9.\ncorrelated_features = detect_correlated_features(correlation_table,threshold=0.9)","eb16edea":"# Display a table showing the high correlated features.\nax_features = correlated_features.keys()\nay_features = []\nfor f in correlated_features.values():\n    ay_features.extend(f)\nay_features = np.unique(ay_features)","68e3d9b0":"# Set up the matplotlib figure\nf , ax = plt.subplots(figsize=(70,50))\nsns.heatmap(correlation_table.loc[ax_features,ay_features],cmap='BrBG',annot=True,square=True,vmin=-1,vmax=1,\\\n            linewidths=0.5,cbar_kws={\"shrink\": .5})","fed9b1e6":"# List of features to drop because of they are highly correlated \n# with others features in the train dataset.\nfeatures_to_drop = [f for f in ay_features if f not in ax_features]","696b8ba2":"# train datas after removing features assigned to drop list of columns.\ntrain_df = train[[ f for f in list(train.columns) if ((f not in features_to_drop) or (f ==\"resp\"))]]","9b6fea2b":"# Compute the correlation betwen the features named resp, and the reste of features\nlabel_correlation = pd.DataFrame({c:train_df[\"resp\"].corr(train_df[c]) for\\\n                                  c in train_df.columns if c!=\"resp\" and c!=\"feature_0\"},index=[\"action\"])\n","70fd1e72":"# Visualize the correlation in a table named label_correlation.\nl = len(list(label_correlation.columns)) # compute the number  of features for label_correlation dataset\ncol = list(label_correlation.columns) # list of columns names of label_correlation dataset\n\n# Because of , the high number of features in our dataset, we will try divide them into 5,\n# in order to get more clear chart.\nfig ,axes = plt.subplots(nrows=5,ncols=1,figsize=(60,30))\nlevel = [0,int(l\/5),int(2*l\/5),int(3*l\/5),int(4*l\/5),l]\nfor i in range(len(level)-1):\n    sns.heatmap(label_correlation.loc[:,col[level[i]:level[i+1]]],annot=True,cmap='BrBG',\\\n                linewidths=0.5,vmin=-1,vmax=1,cbar_kws={\"shrink\": .5},square=True,ax=axes[i])","892506b4":"# correlation between the binary feature named feature_0 and the target values.\ntrain_df.loc[:,\"target\"] = list(((train_df[\"resp\"] > 0) & (train_df[\"resp_1\"] >0) & (train_df[\"resp_2\"]>0)\\\n                     & (train_df[\"resp_3\"]>0) & (train_df[\"resp_4\"]>0)).astype(\"int\"))\ntrain_df.loc[:,\"vl\"] = list(train_df[\"target\"].values)\npvt_table=train_df[[\"feature_0\",\"target\"]].pivot_table(index=[\"feature_0\"],columns=[\"target\"],aggfunc=len)\n#nb_1 = len(train_df.loc[train_df[\"target\"]==1,:])\n#nb_0 = len(train_df.loc[train_df[\"target\"]==0,:])\n#pvt_table[1] = pvt_table[1]\/nb_1\n#pvt_table[0] = pvt_table[0]\/nb_0\ntx= train_df[\"feature_0\"].value_counts()\nty = train_df[\"target\"].value_counts() \ntx = pd.DataFrame(tx)\nty = pd.DataFrame(ty)\nn = len(train_df)\ntx.columns = [\"values\"]\nty.columns = [\"values\"]\n\ncnt = tx.dot(ty.T)\/n\nind = cnt.index\npvt_table = pvt_table.loc[ind,:]\nmesure = (cnt - pvt_table)**2\/cnt\nxin = mesure.sum().sum()\n\ndel(train_df[\"target\"])\ndel(train_df[\"vl\"])\n#del(nb_1)\n#del(nb_0)\nfig = plt.figure(figsize=(12,8))\nsns.heatmap(mesure,annot=True,linewidths=0.5,cmap=\"BrBG\",vmin=0,vmax=1)\nplt.title(\"Correlation table between feature_0 and the target value \",size=15,color=\"red\")\nprint(\"The total correlation between feature_0 and the target equal to {}\".format(xin))\n#del(pvt_table)","f0825fff":"# Display train_df missing values before imputations.\nmissing_b_imputation = pd.DataFrame({c:(train_df[c].isna().sum()) for c in train_df.columns},index=[\"% missing values\"])\nprint(\"The number of missing values in the train_df dataframe before imputation processing :{}\".format(\\\n                                                                                                      missing_b_imputation.sum().sum()))\nmissing_b_imputation","f89ca614":"# identify , which column has missing values in the new dataset named train_df\n\nfeatures_with_missing_values = [] # list of features , has missing values.\n    \nfor f in list(train_df.columns):\n    if missing_table.loc[\"% missing values\",f] > 0 :\n        features_with_missing_values.append(f)","b8b3f461":"# train a linear model regression for each feature, had missing values with his one of correlated\n# feature\nfor f in features_with_missing_values :\n    model = LinearRegression()\n    if  len(correlated_features[f]) > 0 :\n        correlated = correlated_features[f][0]\n        if correlated in train.columns :\n           model.fit(train.loc[(train[correlated].notna()) & (train[f].notna()),correlated].values.reshape(-1,1),\\\n              train.loc[(train[correlated].notna()) & (train[f].notna()),f])\n           values_to_impute = train_df.loc[(train[f].isna()) & (train[correlated].notna()),f]\n           imputer = train.loc[(train[f].isna())&(train[correlated].notna()),correlated].values\n           if (len(values_to_impute) > 0) & (len(imputer) > 0) :\n              train_df.loc[(train[f].isna()) & (train[correlated].notna()),f] = model.predict(train.loc[(train[f].isna())&(train[correlated].notna()),correlated].values.\\\n                                                      reshape(-1,1))\n    \n    \n    ","97c3a732":"#Display train_df missing values after imputation with linear regression\nmissing_a_imputation = pd.DataFrame({c:(train_df[c].isna().sum()) for c in train_df.columns},index=[\"Number missing values\"])\nprint(\"The number of missing values in the train_df dataframe after imputation processing :{}\".format(\\\n                                                                                                      missing_a_imputation.sum().sum()))\nmissing_a_imputation","70bb6290":"# for the rest of the missing values, we will use the mean value as imputer for each features.\nfor f in features_with_missing_values:\n    train_df.fillna(train_df[f].mean(),inplace=True)","efe25222":"#resp_cols = ['resp_1', 'resp_2', 'resp_3', 'resp', 'resp_4']","e8c2c8ff":"#\nreturns = [\"resp_1\",\"resp_2\",\"resp_3\",\"resp_4\",\"resp\"]\n                                                             \ndatas = pd.DataFrame({c:(train_df[c]>0).astype(\"int\") for c in returns})\ndatas[\"val\"] = datas.loc[:,\"resp\"].values\nfig , ax = plt.subplots(2,2,figsize= (15,12))\nfor i in range(len(returns)-1):\n    k = i \/\/ 2\n    l = i % 2\n    piv_resp_1_resp = pd.pivot_table(datas,index= returns[i],columns=\"resp\",values=\"val\",aggfunc=\"count\")\n    ty = datas[\"resp\"].value_counts()\n    tx = datas[returns[i]].value_counts()\n    tx = pd.DataFrame(tx)\n    ty = pd.DataFrame(ty)\n    ind = piv_resp_1_resp.index\n    col = piv_resp_1_resp.columns\n    tx.columns = [\"values\"]\n    ty.columns = [\"values\"]\n    n = len(datas)\n    cnt = tx.dot(ty.T)\/n\n    cnt = cnt.loc[ind,col]\n    mesure = (cnt - piv_resp_1_resp) ** 2 \/cnt\n    xid = mesure.sum().sum()\n    mesure = mesure \n    sns.heatmap(mesure,annot=True,linewidths=0.5,cmap=\"BrBG\",ax=ax[k,l],vmin=0,vmax=1)\n    ax[k,l].set_title(\"The Correlation Table Between the feature resp and {} \".\\\n                      format(returns[i]),size=12,color=\"red\")\n    print(\"The total correlation between the feature {} and the resp feature equal to {}\".\\\n          format(returns[i],xid))\n   \n","dc0938b1":"# Define new feature named action , which can help investor to make decidion.\n\ntrain_df[\"action\"] = ((train_df[\"resp\"] > 0) & (train_df[\"resp_1\"] >0) & (train_df[\"resp_2\"]>0)\\\n                     & (train_df[\"resp_3\"]>0) & (train_df[\"resp_4\"]>0)).astype(\"int\")\n#Y = np.stack((train_df[c]>0).astype(\"int\") for c in resp_cols).T","72565833":"# Load the features data.\nfeatures = pd.read_csv(path + \"features.csv\")","49d17e12":"# Let's take a look at the features data \nfeatures.head()","e62a973e":"# some statistics on the datas.\nfeatures.info()","b391912e":"# Change the type of features dataframe to int.\nfeatures.set_index('feature',inplace=True)\nfeatures = features.astype(\"int8\")","7e99f19d":"#T_sne implementation\nt_sne = tsne(n_components=2,random_state=42).fit_transform(features.values)","881ce216":"# Plotting the embedding of features datas in two dimension using the technique of TSNE.\nfig,ax = plt.subplots(1,1,figsize=(10,6))\nplt.scatter(t_sne[:,0],t_sne[:,1],cmap=\"coolwarm\")\nplt.grid(True)\nplt.title(\"t_SNE\")\nplt.suptitle(\"Dimmensionality Reduction using TSNE technique\")","57c4ef1b":"# We will choice the best number of cluster, who can give best performance using \n# silhoute coefficient.\n\nclusters_number = [4,8,12,16,20,24,28] # number of clusters to test in order to choice the best one.\nsilhouette_performances = {} # Dictionnary of performance.\n\nfor cl_n in clusters_number :\n    kmeans = KMeans(n_clusters=cl_n)\n    kmeans.fit(features.values)\n    sc=silhouette_score(features.values,kmeans.labels_)\n    silhouette_performances[sc] = cl_n","42a11a53":"# plot the the cluster performances in function of the number of clusters.\nfig,ax = plt.subplots(1,1,figsize=(15,8))\nplt.plot(list(silhouette_performances.values()),list(silhouette_performances.keys()))\nplt.title(\"Silhouette score \")\nplt.xlabel(\"Clusters number\",fontsize=10)\nplt.ylabel(\"Silhouette score \",fontsize=10)\nplt.ylim([0.15,0.28])\nbest_performace = np.max(list(silhouette_performances.keys()))\nab = silhouette_performances[best_performace]\ntext = \"best performance\"\nplt.annotate(text,xy=(ab,best_performace),arrowprops=dict(facecolor='black', shrink=0.05),\\\n            xytext=(ab+2,best_performace + 0.005))\nplt.tick_params(axis=\"x\",labelsize=15)\nplt.tick_params(axis=\"y\",labelsize=15)","b205df00":"best_model = KMeans(n_clusters=20)\nbest_model.fit(features.values)","307fe211":"fig,ax = plt.subplots(1,1,figsize=(15,8))\nplt.scatter(t_sne[:,0],t_sne[:,1],c=best_model.labels_)\nplt.suptitle(\"Visualize clusters using T_SNE\")\nplt.title(\"T_SNE\")\nplt.grid(True)","ecc0b8be":"train_df = train_df.query('date > 85').reset_index(drop = True) ","6c3c4282":"features = list(train_df.columns) # list of retaind features \nfeatures.remove(\"weight\")\nfeatures.remove(\"resp_1\")\nfeatures.remove(\"resp_2\")\nfeatures.remove(\"resp_3\")\nfeatures.remove(\"resp_4\")\nfeatures.remove(\"resp\")\nfeatures.remove(\"action\")\nfeatures.remove(\"ts_id\")\nfeatures.remove(\"date\")\nfeatures.remove(\"feature_0\")\n","b04c1452":"save_pickle(features,\"features_names\")","6205690d":"fig=px.pie(train_df.loc[train_df[\"weight\"] > 0,:],names=\"action\",title=\"Class imballance\")\nfig.update_layout(title={\"x\":0.475,\"y\":0.9,\"xanchor\":\"center\",\"yanchor\":\"top\"})","7ff4e315":"abundant_class = train_df.loc[(train_df[\"weight\"] > 0) & (train_df[\"action\"]==0),:] # extract datas which concern abundant datas\nrare_class = train_df.loc[(train_df[\"weight\"] > 0)&(train_df[\"action\"]==1),:]   # extract datas which concern rares datas.","42b9b724":"# The mean values of each feature to use in order to impute missing values in real production.\nimputer = np.mean(train_df[features].values,axis=0)\nsave_pickle(imputer,\"features_imputation\")","554b6316":"abundant_class = abundant_class.sample(frac=1)\nrare_class = rare_class.sample(frac=1)","de89c452":"l = len(rare_class) # the size of data which concern rare class.\ndf1 = abundant_class.iloc[:l,:].append(rare_class) # 1st chunk of datas to train first model\ndf2 = abundant_class.iloc[l:2*l,:].append(rare_class) # 2nd chunk of datas to train second model\ndf3 = abundant_class.iloc[2*l:,:].append(rare_class) # 3nd chunk of datas to train the third model.\n\ndf1 = df1.sample(frac=1) # shuffle the datas\ndf2 = df2.sample(frac=1) # shuffle the datas\ndf3 = df3.sample(frac=1) # shuffle the datas","e1145619":"len(df1),len(df2),len(df3)","b17c75d0":"# reduce the memory charge\ndel(train_df)\ndel(train)","70f8dacf":"# retained features and label to train differents models on differents chunk of datas.\ntraining= [df1[features],df2[features],df3[features]] \ntargets = [df1[\"action\"],df2[\"action\"],df3[\"action\"]]","79451674":"datas = []\nfor i in range(3):\n    xtr,xval,ytr,yval = train_test_split(training[i].values,targets[i].values,test_size=0.1,\\\n                                        stratify=targets[i].values)\n    datas.append(((xtr,ytr),(xval,yval)))","7d50c30e":"# refresh memory\ndel(df1)\ndel(df2)\ndel(df3)\ndel(abundant_class)\ndel(rare_class)\ndel(features_with_missing_values)\ndel(correlation_table)\ndel(missing_table)","9e2f98e5":"gc.collect()","c9b04519":"# modeling step \nparams={\"num_leaves\":300,\n       \"max_bin\":450,\n       \"feature_fraction\":0.52,\n       \"bagging_fraction\":0.52,\n       \"objective\":\"binary\",\n       \"learning_rate\":0.05,\n       \"boosting_type\":\"gbdt\",\n       \"metric\":\"auc\"\n       }\n#kf = KFold(n_splits=3,shuffle=True,random_state=111)\nmodels = [] # list of model , we will train \nfor i in range(3):\n    xtr = datas[i][0][0]\n    ytr = datas[i][0][1]\n    xval = datas[i][1][0]\n    yval = datas[i][1][1]\n    #xval = val_datas[j].loc[:,features]\n    #yval = val_datas[j].loc[:,\"action\"]\n    d_train = lgbm.Dataset(xtr,label=ytr)\n    d_eval = lgbm.Dataset(xval,label=yval,reference=d_train)\n    clf = lgbm.train(params,d_train,valid_sets=[d_train,d_eval],num_boost_round=1500,\\\n                    early_stopping_rounds=50,verbose_eval=50)\n    clf.save_model(\"weights_{}\".format(i))\n    models.append(clf)","dbacc3eb":"fig,ax = plt.subplots(1,3,figsize=(10,20))\nfor i in range(3):\n    lgbm.plot_importance(models[i],ax=ax[i])","37b7c5e8":"import janestreet\nenv = janestreet.make_env()","bbd9f24d":"th = 0.5000","d3ae6577":"for (test_df, pred_df) in tqdm(env.iter_test()):\n    if test_df[\"weight\"].item() > 0 :\n        x_tt = test_df.loc[:, features].values\n        if np.isnan(x_tt.sum()):\n           x_tt = np.nan_to_num(x_tt) + np.isnan(x_tt) * imputer\n        pred = np.mean(np.stack([model.predict(x_tt) for model in models]),axis=0).T\n        pred_df.action = np.where(pred >= th, 1, 0).astype(int)\n    else :\n        pred_df.action = 0\n    \n    env.predict(pred_df)","8637b44f":"<h2 id=modeling> Modeling :<\/h2>","6dfa7e67":"===> It's obvious , that we should treat effeciently the little number of missing values in the column from the feature_120 to the feature_129.","ed201513":"==> Although this approach to remplace missing values , is very efficient .It was able to impute only about 6% of the prior number of missing values.","0df49472":"==> The chart of Dimmensionality Reduction above , shows that the datas can be divided into some number of clusters. Indeed, we notice obviously, many accumulation of points, which are distant and they can be considered as a separated clusters.","e8ea2c73":"tf.random.set_seed(SEED)\nnp.random.seed(SEED)\nmodels = []\nn_features = len(features)\ndr_rate = [0.2,0.2,0.2,0.2]\nhidden_units = [150,150,150]\nlabel_smoothing = 1e-2\nlr = 1e-3\nbatch_size = 5000\nfor i in range(len(datas)):\n    hist = []\n    j = (i+1)% 2\n    clf = create_model(n_features,dr_rate,hidden_units,1,label_smoothing,lr)\n    clf.fit(datas[i].values,target[i].values,validation_data = (datas[j].values,\\\n                                                                target[j].values),batch_size=batch_size,epochs=4)\n    \n    hist.append(clf)\n    models.append(hist[-1])","7ffca451":"![](https:\/\/storage.googleapis.com\/kaggle-organizations\/3761\/thumbnail.png?r=38)","0825312d":"<h2 id=feature_engineering> Feature Engineering <\/h2>","30bc5582":"<h2 id=missing_values> Missing Values:","00cb4003":"==> The chart above , show that there is a class imballance , that we should correctly tackled in order to not biased the performance of our model.","2bdddf5f":"The feature that we want to predict through this project , is the feature which can give signal to the investor to move on with the trading or not. The decision of the investor is based on the return of the trading ,so they should predict which one can make profit. Therefore we will create new feature named \"action\" wich give 1 when there is positive return and 0 if it is not.","ea34a4d5":"<h1><center> Jane Street Market Prediction <\/h1>\n","e81d9593":"<h2 id=preparation> Preparation <\/h2>","c03c54e5":"Let's now, study the correlation of each feature with the feature named resp, which should be the feature that make deciders to move on for the trading or not.","05f7e8af":"<h2 id=first_look> First Look at the Data <\/h2>","01de73bd":"<h2 id=submission> Submission <\/h2>","0b21e1b9":"<h2> Table of content <\/h2>\n<ul> <li> <a href=\"#preparation\"> Preparation <\/a> <\/li>\n    <li> <a href=\"#load_data\"> Load The Datas <\/a> <\/li>\n    <li> <a href=\"#first_look\"> First Look at The Data <\/a> <\/li>\n    <li> <a href=\"#eda\"> Explorations Data analysis <\/a> <\/li>\n    <li> <a href=\"missing_values\"> Missing Values <\/a> <\/li> \n    <li> <a href=\"feature_engineering\"> Feature engineering <\/a> <\/li>\n    <li> <a href=\"feat_exploration\"> Features dataset explorations <\/a> <\/li>\n    <li> <a href=\"modeling\"> Modeling <\/a> <\/li>\n    <li> <a href=\"submission\"> Submission <\/a> <\/li>\n<\/ul>\n<hr>","41c46926":"Except resp_{1,2,3,4} values that represent returns over different time horizons, there is no evident linear relation between retained features and the feature of return.","62107f47":"<font color=redblue> We can conclude that there is high correlation between the return in the different horizons time and the return feature, which confirm that there features are highly correlated with the return feature. For this reason we will choice our feature action , that will be our target, as the combinaison of all theses features.","59b5c92e":"**We can notice , that fortunatelly the datas don't have any missing values.**","6f45229c":"In order to tackle correctly the class imbalnce problem, the easiest way to succefully generalise is to use more datas.The problem is that out-of-the-box classifiers like logistic regression or random forest tend to generalize by discarding the rare class. One easy best practice is building n models that use all the samples of the rare class and n-differing samples of the abundant class. Given that you want to ensemble 10 models, you would keep e.g. the 1.000 cases of the rare class and randomly sample 10.000 cases of the abundant class. Then you just split the 10.000 cases in 10 chunks and train 10 different models.<\/font>\n\n![](https:\/\/www.kdnuggets.com\/wp-content\/uploads\/imbalanced-data-2.png)\n\nIn our case, the size of the abundant class is three time as bigger as the rarely class. So we need to train three models , by splitting the datas of the abundant class to three sample , and use the the datas of the rare class for each model training.","9fa833c3":"<font color=red> <b> PLease leave your comments to enhance the work , or upvote if you like it !<\/font>","e3964520":"- The most signal features seems have a normal gaussian distribution, and they are zero centered.\n\n- The return features, also are zero centred gaussian distributed. Which it can been seen, that the chance to make profit or to lose, is the same at any time of the day . \n","76cfd126":"Let's now visualize theses defined clusters in two dimension, using T_SNE","6f23df3d":"<h2 id=load_data> Load The Datas","ca7a7043":"<h2 id=feat_exploration> Features dataset explorations :","c110687f":"<h2 id=eda> Explorations Data analysis <\/h2>","33b2a866":"In order to enhance the predictive quality of our model, we will check the correlation between the global return and the differents returns in differents time horizons.","dd006406":"Let's see that we can save only one feature from each pair highly correlated features.","ad60d5cb":"<font color=redblue> We can conclude that, there is no correlation between feature_0 and the target values.","f41d9109":"import tensorflow as tf \nfrom tensorflow.keras.layers import Input,Dense, Dropout,BatchNormalization\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.activations import swish\nfrom tensorflow.keras.losses import BinaryCrossentropy\nfrom tensorflow.keras.optimizers import Adam\nSEED = 1111\n\ndef create_model(n_features,dr_rate,hidden_units,n_labels,label_smoothing,lr):\n    inp = Input(shape=(n_features,))\n    x = BatchNormalization()(inp)\n    x = Dropout(dr_rate[0])(x)\n    for i in range(len(hidden_units)):\n        x = Dense(hidden_units[0])(x)\n        x = BatchNormalization()(x)\n        x = swish(x)\n        x = Dropout(dr_rate[i+1])(x)\n    out = Dense(n_labels,activation=\"sigmoid\")(x)\n    model = Model(inputs=inp,outputs=out)\n    \n    model.compile(loss = BinaryCrossentropy(label_smoothing=label_smoothing),\\\n                  optimizer = Adam(learning_rate=lr),metrics= tf.keras.metrics.AUC(name=\"AUC\"))\n    return model"}}