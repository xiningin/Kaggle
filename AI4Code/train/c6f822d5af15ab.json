{"cell_type":{"a3d49b60":"code","a6ff77ec":"code","3abd05a1":"code","74d7ceaf":"code","e71b6e05":"code","427e93d3":"code","f971455e":"code","595d0469":"code","aa2175ef":"code","4591324d":"code","ec664313":"code","2f5bd8a3":"code","4a9c2193":"code","f5d70a51":"code","9106c220":"code","b4b8e9bd":"code","9296ab19":"code","958d1f92":"code","6879792d":"code","b639d38d":"code","686a0108":"code","297d7480":"code","f37b7ba2":"code","a6bd3c00":"code","a5e4646f":"code","be712bd5":"code","6af5e818":"code","cf7edd97":"code","e6b15967":"code","17422380":"code","0355c2c6":"code","58c80774":"code","4581b1ee":"code","e9e728e1":"code","4bedf61d":"code","16614d19":"code","e5301d8a":"code","c46794c0":"code","bcd5c2b4":"code","fb2c6095":"code","23263dcd":"code","eef52b49":"markdown","cdc23cac":"markdown","6fef33ce":"markdown","dd06e96d":"markdown","204aa685":"markdown","d1834ded":"markdown","13bd3f5f":"markdown","9766fb9b":"markdown","b88f435c":"markdown","a6e09f24":"markdown","c13d8437":"markdown","3b27abcb":"markdown","c7341862":"markdown","5f683f0f":"markdown","124ac5e8":"markdown","15242ba3":"markdown","8ad3a1ec":"markdown","7228726e":"markdown","5e8681ec":"markdown"},"source":{"a3d49b60":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib\nfrom matplotlib import pyplot as plt\n%matplotlib inline\n","a6ff77ec":"df_original = pd.read_csv('..\/input\/countries-covid19jan-to-apr\/train.csv')\ndf_original","3abd05a1":"for x in df_original.columns:\n    print(x)","74d7ceaf":"df_original.describe()","e71b6e05":"df_original.info()","427e93d3":"Total_Values_count = []\nfor x in df_original.count():\n    Total_Values_count.append(x)\n\nNull_values_percentage = []\nfor x in (df_original.isnull().sum()\/len(df_original)*100):\n    Null_values_percentage.append(x)\n\nNull_values_count = []    \nfor x in df_original.isnull().sum():\n    Null_values_count.append(x)","f971455e":"Stats_df = pd.DataFrame()\nStats_df['Columns'] = df_original.columns\nStats_df['Null_Value_%'] = Null_values_percentage\nStats_df['Total_Values_count'] = Total_Values_count\nStats_df['Total_Null_Values_Count'] = Null_values_count\n","595d0469":"sns.set(rc={'figure.figsize':(15.7,8.27)})\nsns.barplot(x=Stats_df['Columns'],y=Stats_df['Total_Values_count'])","aa2175ef":"sns.barplot(x=Stats_df['Columns'],y=Stats_df['Total_Null_Values_Count'])","4591324d":"sns.set(rc={'figure.figsize':(15.7,8.27)})\nsns.barplot(x=Stats_df['Columns'],y=Stats_df['Null_Value_%'])","ec664313":"df_original.dtypes\n","2f5bd8a3":"df_original['Date'] = pd.to_datetime(df_original['Date'])\n","4a9c2193":"df_original.info()","f5d70a51":"df_original\n","9106c220":"df_temp_1 = df_original[['Date','ConfirmedCases','Fatalities']]","b4b8e9bd":"month_dict = {1:'January' , 2:'Februrary',3:'March',4:'April',5:'May',6:'June',7:'July',8:'August',9:'September',10:'October',11:'November',12:'December'}\ndf_temp_1['Month'] = pd.DatetimeIndex(df_temp_1['Date']).month\ndf_temp_1['Month'] = df_temp_1['Month'].map(month_dict) \ndf_temp_1.drop('Date',axis=1)","9296ab19":"months_list = df_temp_1['Month'].unique()\n#sns.lineplot('Month', 'value', hue='variable', data=pd.melt(df_temp_1, 'Month'))","958d1f92":"#Just wait a 1 to 2 min to let graphs display\ndf_temp_2 = pd.DataFrame()\nfor x in months_list:\n    df_temp_2 = df_temp_1[df_temp_1['Month']==x]\n    plt.figure()\n    sns.lineplot(x=df_temp_2['ConfirmedCases'],y=df_temp_2['Fatalities']).set_title(x,size=30)\n","6879792d":"df_temp_2 = df_temp_2.drop(df_temp_2.index, inplace=True)\n","b639d38d":"for x in months_list:\n    df_temp_2 = df_temp_1[df_temp_1['Month']==x]\n    plt.figure()\n    sns.heatmap(df_temp_2.corr()).set_title(x,size=30)","686a0108":"df_temp_2.drop(df_temp_2.index,inplace=True)\ndeaths = []\ncases = []\nfor x in months_list:\n    df_temp_2 = df_temp_1[df_temp_1['Month']==x]\n    deaths.append(df_temp_2['Fatalities'].values.sum())\n    cases.append(df_temp_2['ConfirmedCases'].values.sum())\n\nnd_array_1 = np.array(deaths)\nnd_array_2 = np.array(cases)\n\nnd_array_3 = (nd_array_1\/nd_array_2)*100\nnd_array_3\nnd_array_3 = np.round(nd_array_3, 2)\ndeath_ratio_value = list(nd_array_3)\n\ndeathRatio_info = {'Month':months_list,'Confirmed_Cases':cases,'Deaths':deaths,'Death_Ratio(%)':death_ratio_value}\ndeathRatio_DF = pd.DataFrame(deathRatio_info)\n\n","297d7480":"sns.barplot(x=months_list,y=death_ratio_value).set_title(\"Death Ratio %\",size=30)","f37b7ba2":"deathRatio_DF.set_index('Month')[['Confirmed_Cases', 'Deaths']].plot(kind='bar', figsize=(14, 10))\nplt.xticks(rotation=60)\nplt.title(\"Confirmed Cases & Deaths\", fontsize=18, y=1.01)\nplt.xlabel(\"Month\", labelpad=15)\nplt.ylabel(\"Value\", labelpad=15)\nplt.legend([\"Confirmed Cases\", \"Deaths\"], fontsize=16, title=\"Type\");","a6bd3c00":"sns.pairplot(df_temp_1)","a5e4646f":"countries = []\nConfirmed_Cases = []\nDeaths = []\n","be712bd5":"for x in df_original['Country_Region'].unique():\n    countries.append(x)\n    k_1 = df_original[df_original['Country_Region']==x]\n    Confirmed_Cases.append(k_1['ConfirmedCases'].sum())\n    Deaths.append(k_1['Fatalities'].sum())\n\nnd_array_1 = np.array(Confirmed_Cases)\nnd_array_2 = np.array(Deaths)\n\nnd_array_3 = (nd_array_2\/nd_array_1)*100\nnd_array_3 = np.round(nd_array_3,2)\nDeath_Ratio = list(nd_array_3)\nRecovery_Chances = 100-nd_array_3\n","6af5e818":"countries_df = pd.DataFrame({'Countries':countries,'ConfirmedCases':Confirmed_Cases,'Deaths':Deaths,'Death_Ratio':Death_Ratio,'Recovery_Chances':Recovery_Chances})\ncountries_df","cf7edd97":"import pandasql as ps\ncountries_cases = countries_df[['Countries', 'ConfirmedCases']]\n\nQuery1 = \"SELECT Countries,SUM(ConfirmedCases) FROM countries_cases GROUP BY Countries;\"\n\nresult_query1 = ps.sqldf(Query1, locals())\nresult_query1 = result_query1.loc[(result_query1 != 0).any(1)]\nresult_query1.sort_values(by=['SUM(ConfirmedCases)'], inplace=True)\n\nplt.title(\"Countries with Confirmed Cases\",bbox={'facecolor': '0.4', 'pad': 10})\nx = np.char.array(result_query1['Countries'].tolist())\ny = np.array(result_query1['SUM(ConfirmedCases)'].tolist())\npercent = 100.*y\/y.sum()\n\npatches, texts = plt.pie(y, startangle=90, radius=1.2)\nlabels = ['{0} - {1:1.2f} %'.format(i,j) for i,j in zip(x, percent)]\n\nsort_legend = True\nif sort_legend:\n    patches, labels, dummy =  zip(*sorted(zip(patches, labels, y),\n                                          key=lambda x: x[2],\n                                          reverse=True))\n\nplt.legend(patches, labels, loc='best', bbox_to_anchor=(-0.5, 1.5),\n           fontsize=8)\nfig = plt.figure(figsize=[80, 80])","e6b15967":"\ncountries_cases = countries_df[['Countries', 'Deaths']]\n\nQuery1 = \"SELECT Countries,SUM(Deaths) FROM countries_cases GROUP BY Countries;\"\n\nresult_query1 = ps.sqldf(Query1, locals())\nresult_query1 = result_query1.loc[(result_query1 != 0).any(1)]\nresult_query1.sort_values(by=['SUM(Deaths)'], inplace=True)\n\nplt.title(\"Countries with Deaths\",bbox={'facecolor': '0.4', 'pad': 10})\nx = np.char.array(result_query1['Countries'].tolist())\ny = np.array(result_query1['SUM(Deaths)'].tolist())\npercent = 100.*y\/y.sum()\n\npatches, texts = plt.pie(y, startangle=90, radius=1.2)\nlabels = ['{0} - {1:1.2f} %'.format(i,j) for i,j in zip(x, percent)]\n\nsort_legend = True\nif sort_legend:\n    patches, labels, dummy =  zip(*sorted(zip(patches, labels, y),\n                                          key=lambda x: x[2],\n                                          reverse=True))\n\nplt.legend(patches, labels, loc='best', bbox_to_anchor=(-0.5, 1.5),\n           fontsize=8)\nfig = plt.figure(figsize=[80, 80])","17422380":"countries_cases = countries_df[['Countries', 'Death_Ratio']]\n\nQuery1 = \"SELECT Countries,SUM(Death_Ratio) FROM countries_cases GROUP BY Countries;\"\n\nresult_query1 = ps.sqldf(Query1, locals())\nresult_query1 = result_query1.loc[(result_query1 != 0).any(1)]\nresult_query1.sort_values(by=['SUM(Death_Ratio)'], inplace=True)\n\nplt.title(\"Countries with Death_Ratio(%)\",bbox={'facecolor': '0.4', 'pad': 10})\nx = np.char.array(result_query1['Countries'].tolist())\ny = np.array(result_query1['SUM(Death_Ratio)'].tolist())\npercent = 100.*y\/y.sum()\n\npatches, texts = plt.pie(y, startangle=90, radius=1.2)\nlabels = ['{0} - {1:1.2f} %'.format(i,j) for i,j in zip(x, percent)]\n\nsort_legend = True\nif sort_legend:\n    patches, labels, dummy =  zip(*sorted(zip(patches, labels, y),\n                                          key=lambda x: x[2],\n                                          reverse=True))\n\nplt.legend(patches, labels, loc='best', bbox_to_anchor=(-0.5, 1.5),\n           fontsize=8)\nfig = plt.figure(figsize=[80, 80])","0355c2c6":"df_top_10_CC = countries_df.nlargest(10,['ConfirmedCases'])","58c80774":"df_top_10_CC = df_top_10_CC[['Countries','ConfirmedCases']]\nsns.barplot(x='Countries',y='ConfirmedCases',data=df_top_10_CC)","4581b1ee":"df_top_10_deaths = countries_df.nlargest(10,['Deaths'])\ndf_top_10_deaths = df_top_10_deaths[['Countries','Deaths']]\nsns.barplot(x='Countries',y='Deaths',data=df_top_10_deaths)","e9e728e1":"df_top_10_dR = countries_df.nlargest(10,['Death_Ratio'])\ndf_top_10_dR = df_top_10_dR[['Countries','Death_Ratio']]\nsns.barplot(x='Countries',y='Death_Ratio',data=df_top_10_dR)\n\n\n","4bedf61d":"\ndf_top_10_RC = countries_df.nlargest(10,['Recovery_Chances'])\ndf_top_10_RC = df_top_10_RC[['Countries','Recovery_Chances']]\nsns.barplot(x='Countries',y='Recovery_Chances',data=df_top_10_RC)","16614d19":"\ndf_top_10_CC = countries_df.nsmallest(10,['ConfirmedCases'])\ndf_top_10_CC = df_top_10_CC[['Countries','ConfirmedCases']]\nsns.set(rc={'figure.figsize':(20.7,8.27)})\nsns.barplot(x='ConfirmedCases',y='Countries',data=df_top_10_CC)","e5301d8a":"df_top_10_dR = countries_df.nsmallest(10,['Death_Ratio'])\ndf_top_10_dR = df_top_10_dR[['Countries','Death_Ratio']]\nsns.barplot(x='Death_Ratio',y='Countries',data=df_top_10_dR)","c46794c0":"df_top_10_dR = countries_df.nsmallest(10,['Death_Ratio'])\ndf_top_10_dR = df_top_10_dR[['Countries','Death_Ratio']]\nsns.barplot(x='Death_Ratio',y='Countries',data=df_top_10_dR)","bcd5c2b4":"df_top_10_RC = countries_df.nsmallest(10,['Recovery_Chances'])\ndf_top_10_RC = df_top_10_RC[['Countries','Recovery_Chances']]\nsns.barplot(x='Recovery_Chances',y='Countries',data=df_top_10_RC)","fb2c6095":"df_top_20_CC = countries_df.nlargest(20,['ConfirmedCases'])\ndf_top_20_CC = df_top_20_CC[['Countries']]\nnames_countries = df_top_20_CC['Countries'].values.tolist()\nfor x in names_countries:\n    data = df_original[df_original['Country_Region']==x]\n    plt.figure()\n    sns.jointplot(x=data['ConfirmedCases'],y=data['Fatalities'],kind='scatter')\n    plt.title(x,size=30)\n    \n","23263dcd":"df_top_20_CC = countries_df.nlargest(20,['ConfirmedCases'])\ndf_top_20_CC = df_top_20_CC[['Countries']]\nnames_countries = df_top_20_CC['Countries'].values.tolist()\nfor x in names_countries:\n    data = df_original[df_original['Country_Region']==x]\n    y = data['ConfirmedCases'].values\n    k = data['Fatalities'].values\n    z = (k\/y)*100\n    z = np.round(z,2)\n    data['Death_Ratio']=z\n    plt.figure()\n    sns.jointplot(x=data['ConfirmedCases'],y=data['Death_Ratio'],kind='scatter',color='orange')\n    plt.title(x,size=30)","eef52b49":"# Death Ratio","cdc23cac":"# Top 10 Countries With Recovery Chances\n","6fef33ce":"# Top 10 Countries With Confirmed Cases","dd06e96d":"### You can calculate provinces' death ratio and recovery chances which is same procedure as countries (shown above). Also different more insights can also be created with respect to each province in a single country. Thankyou. :)","204aa685":"# Lets take a view with repsect to countries\n","d1834ded":"# Converting Date into Date type Object ","13bd3f5f":"# Top 10 Countries with least number of Deaths","9766fb9b":"# Lets see relation of deaths and confirmed cases in top 20 countries","b88f435c":"# Top 10 Countries with least number of Death Ratio","a6e09f24":"# PICTURE OF DATA-SET","c13d8437":"# Lets see relation of deaths Ratio and confirmed cases in top 20 countries","3b27abcb":"# Top 10 Countries with least number of Recovery Chances","c7341862":"# TOP 10 countries with respect to Confirmed Case, Deaths, Recovery Ratio and Death Ratio","5f683f0f":"# Overall Confirmed Cases and Deaths\n","124ac5e8":"# Top 10 Countries With Death Ratio","15242ba3":"#  Insights","8ad3a1ec":"# Top 10 Countries with least number of Confirmed Case","7228726e":"# How much confirmed cases influence deaths?","5e8681ec":"# Top 10 Countries With Fatalities"}}