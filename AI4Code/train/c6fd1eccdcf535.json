{"cell_type":{"745fb693":"code","b631549c":"code","9c99f77f":"code","5f9e4ec5":"code","2ccabb2c":"code","07b1f3eb":"code","0ffd1354":"code","e54cd90c":"code","3561978f":"code","fb61f013":"code","3f3fee0b":"markdown"},"source":{"745fb693":"import numpy as np\nfrom numpy.lib.function_base import append\nimport pandas as pd\nimport os\nimport sys\nimport tensorflow as tf\nfrom pathlib import Path\nimport cv2\nimport pydicom\nfrom sklearn.model_selection import train_test_split\nfrom tqdm import tqdm","b631549c":"# limit the GPU memory growth\ngpu = tf.config.list_physical_devices('GPU')\nprint(\"Num GPUs Available: \", len(gpu))\nif len(gpu) > 0:\n    tf.config.experimental.set_memory_growth(gpu[0], True)","9c99f77f":"# model\u306e\u8a2d\u5b9a\nheight = 512\nwidth = 512\nchannel = 4\nseed = 26\ninput_depth = 4","5f9e4ec5":"inputdatapath = \"..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\"\ntraindatapaht=\"..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/test\"\ntestdatapaht=\"..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\"\noutpath = \".\/\"","2ccabb2c":"def _bytes_feature(value):\n  \"\"\"Returns a bytes_list from a string \/ byte.\"\"\"\n  if isinstance(value, type(tf.constant(0))):\n    value = value.numpy() # BytesList won't unpack a string from an EagerTensor.\n  return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))\n\ndef _float_feature(value):\n  \"\"\"Returns a float_list from a float \/ double.\"\"\"\n  return tf.train.Feature(float_list=tf.train.FloatList(value=[value]))\n\ndef _int64_feature(value):\n  \"\"\"Returns an int64_list from a bool \/ enum \/ int \/ uint.\"\"\"\n  return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))","07b1f3eb":"def serialize_example(feature0, feature2):\n  feature = {\n      'image': _bytes_feature(feature0.tobytes()),\n      'MGMT_value': _float_feature(feature2)\n  }\n  example_proto = tf.train.Example(features=tf.train.Features(feature=feature))\n  return example_proto.SerializeToString()","0ffd1354":"dim = (height,width)\ndef data_generation(ID):\n    'Generates data containing batch_size samples' # X : (n_samples, *dim, n_channels)\n\n    # Store sample\n    idx = str(ID).zfill(5)\n    imgs = load_imgs(idx, ignore_zeros=False, train=True)\n    new_imgs = []\n\n    for ii in range(4):\n        img_ = imgs[views[ii]].mean(axis=0)\n        img_ = cv2.resize(img_, dsize=dim, interpolation=cv2.INTER_LINEAR)               \n        new_imgs.append(img_)\n    new_imgs = np.array(new_imgs).transpose(1,2,0)\n    return new_imgs","e54cd90c":"views = ['FLAIR', 'T1w', 'T1wCE', 'T2w']\ndef load_imgs(idx, ignore_zeros=True, train=True):\n    imgs = {}\n    for view in views:\n        save_ds = []\n        if train:\n            dir_path = os.walk(os.path.join(\n            traindatapaht, idx, view\n        ))\n        else:\n            dir_path = os.walk(os.path.join(\n            testdatapaht, idx, view\n        ))\n        for path, subdirs, files in dir_path:\n            for name in files:\n                image_path = os.path.join(path, name) \n                pyds = pydicom.filereader.dcmread(image_path)\n                save_ds.append(np.array(pyds.pixel_array))\n        if len(save_ds) == 0:\n            save_ds = np.zeros((1,height,width))\n        imgs[view] = np.array(save_ds)\n    return imgs","3561978f":"df_train = pd.read_csv(os.path.join(inputdatapath,\"train_labels.csv\"))\nX_train, X_val, y_train, y_val = train_test_split(df_train.BraTS21ID, df_train.MGMT_value,\n                                                 test_size=0.2, random_state=42,stratify=df_train.MGMT_value)","fb61f013":"with tf.io.TFRecordWriter(str(outpath + os.sep + 'brain_train.tfrec'),options=tf.io.TFRecordOptions(compression_type=\"GZIP\")) as writer:\n    for x,y in tqdm(zip(X_train,y_train)):\n        img = data_generation(x)\n        example = serialize_example(\n            img, y)\n        writer.write(example)\n\n\nwith tf.io.TFRecordWriter(str(outpath + os.sep + 'brain_val.tfrec'),options=tf.io.TFRecordOptions(compression_type=\"GZIP\")) as writer:\n    for x,y in tqdm(zip(X_val,y_val)):\n        img = data_generation(x)\n        example = serialize_example(\n            img, y)\n        writer.write(example)\n","3f3fee0b":"This is my first Release Code.\n\nI learn from this [code](https:\/\/www.kaggle.com\/josepc\/rsna-effnet) so much,Thank you.\n\nPlease Run with My this code[[Train_with_TFRecord_for_RSNA-Radiogenomic](https:\/\/www.kaggle.com\/hazigin\/train-with-tfrecord-for-rsna-radiogenomic)]"}}