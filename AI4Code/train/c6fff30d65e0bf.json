{"cell_type":{"7bcbb2b2":"code","39457223":"code","b7886fb0":"code","f2950104":"code","013e4bad":"code","1b84cfb5":"code","07841115":"code","e33aafb2":"code","d0b95b7a":"code","b649a079":"code","1bc0968a":"code","ff94e19a":"code","fa4689cd":"code","35889393":"code","377878f5":"code","e1c34a7b":"code","a1622bd2":"code","ca3a5982":"code","94ba5f4c":"code","86423933":"code","b8b28095":"code","1aef8c84":"code","58ca09e5":"code","15f41ca6":"code","5d945280":"code","ec9739a2":"code","c63d1ea4":"code","400b8a26":"code","0f2adfba":"code","06b1026d":"code","a4e1080e":"code","eec3271d":"code","afff1c8b":"code","8fe16eeb":"code","47bdc7bc":"markdown","55e3c471":"markdown","27a1fafe":"markdown","345eff15":"markdown","48b60bca":"markdown","f896ae43":"markdown"},"source":{"7bcbb2b2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","39457223":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\n","b7886fb0":"df = pd.read_csv(\"..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv\")","f2950104":"from pandas_profiling import ProfileReport\nprofile = ProfileReport(df, title='Pandas Profiling Report', explorative=True)\nprofile","013e4bad":"df.head()","1b84cfb5":"(df.isnull().sum())\/len(df) * 100","07841115":"import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.countplot(x='stroke',data=df)","e33aafb2":"df[df['bmi'].isnull()]","d0b95b7a":"# bmi has 201 null values and replace it with mean\ndf=df.replace(to_replace=np.nan,value=df.mean())","b649a079":"df.describe()","1bc0968a":"df.columns","ff94e19a":"#Drop id column as that doesn't add any value.\ndf = df.drop(['id'], axis =1)","fa4689cd":"df.isnull().sum()","35889393":"print(df['stroke'].value_counts())","377878f5":"print(df.dtypes)","e1c34a7b":"df['gender'].value_counts()","a1622bd2":"df = df[df.gender != 'Other']","ca3a5982":"df['gender'].value_counts()","94ba5f4c":"dummies = pd.get_dummies(df[['gender', 'ever_married', 'Residence_type', 'smoking_status','work_type' ]],drop_first=True )\ndf = df.drop(['gender', 'ever_married', 'Residence_type', 'smoking_status','work_type' ], axis = 1)\ndf = pd.concat([df,dummies],axis=1)","86423933":"df.head()","b8b28095":"df.isnull().sum()","1aef8c84":"print(df['stroke'].value_counts())","58ca09e5":"plt.figure(figsize=(18,18))\nsns.heatmap(df.corr(), annot=True, cmap=plt.cm.Reds)","15f41ca6":"#sns.pairplot(df,hue='stroke',palette='coolwarm')\ndf.corr()['stroke'][:].sort_values().plot(kind='bar')","5d945280":"cor_target = abs(df.corr()['stroke'])\nset_features = cor_target[cor_target > 0.01]\nprint(set_features)","ec9739a2":"\ndf = df[set_features.index]\ndf.head()","c63d1ea4":"#Pick up feature set and the labels\nX = df.drop('stroke',axis=1).values\ny = df['stroke'].values","400b8a26":"from xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom collections import Counter\n\n\n#Split the dataset into 80:20\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)\n\n#Do oversampling for the train set using SMOTE\nfrom imblearn.combine import SMOTEENN\n\nsmn = SMOTEENN()\n\nprint(\"Counts before SMOTE\")\nprint(Counter(y_train))\n\nX_res,y_res = smn.fit_resample(X_train,y_train)\nprint(\"Counts after SMOTE\")\nprint(Counter(y_res))","0f2adfba":"classifier = XGBClassifier(objective= 'binary:logistic', eval_metric='error', max_depth = 4,max_delta_step=1,\n                           learning_rate= 0.00003, n_estimators=6000,subsample=0.5,\n                           use_label_encoder=False)\n\nclassifier.fit(X_res, y_res)\n\n","06b1026d":"# evaluate predictions\nfrom sklearn.metrics import confusion_matrix, average_precision_score, roc_auc_score, roc_curve, classification_report, precision_recall_curve, f1_score\n    \ny_prob=classifier.predict_proba(X_test)\ny_pred = classifier.predict(X_test)\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))\nroc_xgb = roc_auc_score(y_test, y_prob[:,1])\nprint('ROC-AUC', roc_xgb)\nprint('='*20)\nprint('Confusion Matrix')\ncm_xgb = confusion_matrix(y_test, y_pred)\nprint(cm_xgb)\nsns.heatmap(cm_xgb, annot=True, cmap='viridis')\ncl_xgb = classification_report(y_test,y_pred )\nprint(cl_xgb)\n","a4e1080e":"from sklearn.linear_model import LogisticRegression","eec3271d":"logmodel = LogisticRegression(C=2.0, max_iter=1000)\nlogmodel.fit(X_res,y_res)","afff1c8b":"predictions = logmodel.predict(X_test)\naccuracy = metrics.accuracy_score(y_test, predictions)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))\ny_prob=logmodel.predict_proba(X_test)\n#print('ROC-AUC')\nroc_lin = roc_auc_score(y_test, y_prob[:,1])\nprint('ROC-AUC:', roc_lin)\nprint('='*20)\nprint(' Confusion Matrix')\ncm_lin = confusion_matrix(y_test, predictions)\nprint(cm_lin)\nsns.heatmap(cm_lin, annot=True, cmap='viridis')\ncl_lin = classification_report(y_test,predictions)\nprint(cl_lin)\n","8fe16eeb":"print(\"XGBoost\")\nprint(\"*\" * 10)\nprint(cl_xgb)\nprint(\"*\" * 20)\nprint(\"Linear Regression\")\nprint(\"*\" * 20)\n\nprint(cl_lin)","47bdc7bc":"1. #### Choose features with correlation > 0.01","55e3c471":"#### Drop 'Other' since it has just one entry.","27a1fafe":"#### Let's do a quick check with Logistic Regression Model","345eff15":"#### Severely imbalanced data. Need special technique applied to training data, such as SMOTE.","48b60bca":"#### Using XGBoost classifier with SMOTEENN for oversampling the trianing dataset.","f896ae43":"### Observations: Using the same dataset for training, XGBoost and Logistic Regressions models gave comparable results. Tuning the models may improve the performance."}}