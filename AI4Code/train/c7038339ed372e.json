{"cell_type":{"6c216da6":"code","8f5b05ec":"code","bf3daf7f":"code","497eb129":"code","b391cb3b":"code","5609deb1":"code","7de9a2da":"code","85e9a42e":"code","7e3f84cf":"code","621c15e7":"code","aaa032c5":"code","b80e350e":"markdown"},"source":{"6c216da6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import LabelEncoder\n\n#from sklearn.preprocessing import StandardScaler\n\n\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8f5b05ec":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","bf3daf7f":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","497eb129":"women = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)\n","b391cb3b":"men = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men who survived:\", rate_men)\n\ntrain_data.isnull().sum()","5609deb1":"imputer = SimpleImputer(strategy=\"mean\")\nimputer.fit(train_data[['Age']])\ntrain_data['Age'] = imputer.transform(train_data[['Age']])\ntrain_data[\"Age\"].value_counts(dropna=False)\nimputer.statistics_\n\nlog_model = LogisticRegression()","7de9a2da":"X = train_data[[\"Parch\",\"Age\",\"SibSp\",\"Fare\",\"Pclass\"]]\ny = train_data[\"Survived\"]\n\nlog_model.fit(X, y)\nlog_model.score(X,y)","85e9a42e":"#scaler.fit(train_data[['Age']])\n#scaler.fit(train_data[['Fare']])\n\n#train_data[\"Age\"] = scaler.transform(train_data[['Age']])\n#train_data[\"Fare\"] = scaler.transform(train_data[['Fare']])\nnormalizer = MinMaxScaler(feature_range=(0, 1))\n\nnormalizer.fit(train_data[['Age']])\ntrain_data['Age'] = normalizer.transform(train_data[['Age']])\n\nnormalizer.fit(train_data[['Fare']])\ntrain_data['Fare'] = normalizer.transform(train_data[['Fare']])\n\ntrain_data.head()","7e3f84cf":"le = LabelEncoder()\nle.fit(train_data['Sex'])\ntrain_data['Sex_encoded'] = le.transform(train_data['Sex'])\ntrain_data.head()","621c15e7":"\nlog_model.fit(X,y)\n\nlog_model.score(X,y)\n\nprint(log_model.predict([[0,25,2,10.50,3]]))","aaa032c5":"from sklearn.ensemble import RandomForestClassifier\n\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\noutput","b80e350e":"# Getting Started with Titanic "}}