{"cell_type":{"3765a771":"code","45d0d5d5":"code","1d058b62":"code","fc415603":"code","3114f823":"code","3cb34f9a":"code","4ea1f35d":"code","09779f3c":"code","8178378c":"code","a754f8c0":"code","03b24376":"code","baff0f1d":"code","f0f93c20":"code","e35f8d8a":"code","9fa926f9":"code","80936768":"code","5038c5a3":"code","caa1b99f":"code","08e7f17a":"code","1eb49cd7":"code","dfe823d9":"code","a58b86fe":"code","d116f937":"code","c14de236":"code","b0ef9d78":"code","178eccbb":"code","55de2e37":"code","924ed840":"code","08e26675":"code","681cab85":"code","116d828e":"code","d40bccce":"code","ef2d67d2":"code","200c2a35":"code","4fc64e6b":"code","f630ff3f":"code","6ee755bb":"code","25294d7f":"code","c14c0abb":"code","5fd9fae4":"code","82891416":"code","c081cfce":"code","deedbd59":"code","51bb1ae7":"code","4aaa9ebb":"code","8d97033b":"code","acb58df3":"code","c97ff324":"code","94fb7cc5":"code","87a0148a":"code","f7a0863a":"code","d3752874":"code","0cc788d2":"code","9a44b613":"markdown","d9899ad8":"markdown","cc894b3a":"markdown","68f97e5a":"markdown","3227b268":"markdown","c752d20e":"markdown","c860171c":"markdown","38b2b5dd":"markdown","a7b324cf":"markdown","ea6e9005":"markdown","f2468882":"markdown","d3ebafa3":"markdown","eb7ae7e1":"markdown","b74f976c":"markdown","cc0271e8":"markdown","9566b74d":"markdown","51aed43a":"markdown","e0bace39":"markdown","d683c387":"markdown","29462b4f":"markdown"},"source":{"3765a771":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n\nimport xgboost as xgb\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV, StratifiedKFold\n\nfrom sklearn.metrics import balanced_accuracy_score, roc_auc_score, classification_report\nfrom sklearn.metrics import confusion_matrix, plot_confusion_matrix, plot_precision_recall_curve, plot_roc_curve, make_scorer\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","45d0d5d5":"file_path = \"\/kaggle\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv\"\ndf = pd.read_csv(file_path)","1d058b62":"df.head()","fc415603":"df.info()","3114f823":"df.describe().T","3cb34f9a":"for cols in df.columns:\n    print(cols, \" : \", df[cols].unique())","4ea1f35d":"df.replace(to_replace=[\"No_phone_service\",\"No_internet_service\"], value=\"No\", inplace=True)","09779f3c":"for cols in df.columns:\n    print(cols, \" : \", df[cols].unique())","8178378c":"len(df.loc[df[\"TotalCharges\"]==\" \"])","a754f8c0":"df.loc[df[\"TotalCharges\"]==\" \"]","03b24376":"df.loc[(df[\"TotalCharges\"]==\" \"), \"TotalCharges\"] = 0","baff0f1d":"df[\"TotalCharges\"] = pd.to_numeric(df[\"TotalCharges\"])","f0f93c20":"df.info()","e35f8d8a":"df.replace(' ', '_', regex=True, inplace=True)\ndf.head()","9fa926f9":"df[\"Churn\"] = df[\"Churn\"].replace(to_replace=[\"Yes\", \"No\"], value=[1, 0])\ndf[\"Churn\"].head()","80936768":"sns.boxplot(x=df[\"gender\"], y=df[\"TotalCharges\"], hue=df[\"Churn\"]);","5038c5a3":"sns.boxplot(x=df[\"SeniorCitizen\"], y=df[\"TotalCharges\"], hue=df[\"Churn\"]);","caa1b99f":"sns.boxplot(y=df[\"MonthlyCharges\"], x=df[\"Churn\"]);","08e7f17a":"sns.boxplot(y=df[\"TotalCharges\"], x=df[\"Churn\"]);","1eb49cd7":"sns.pairplot(df);","dfe823d9":"X = df.drop(columns=\"Churn\", axis=1).copy()\nX.head()","a58b86fe":"y = df[\"Churn\"].copy()\ny.head()","d116f937":"X.drop(columns=\"customerID\", inplace=True)","c14de236":"cat_cols = list(X.columns[X.dtypes==object])\ncat_cols","b0ef9d78":"X_encoded = pd.get_dummies(X, columns=cat_cols)","178eccbb":"X_encoded.head(10)","55de2e37":"y.unique()","924ed840":"sum(y)\/len(y) * 100","08e26675":"display(X_encoded.shape, y.shape)","681cab85":"X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, stratify=y, test_size=0.3, random_state=24)","116d828e":"sum(y_train)\/len(y_train) * 100","d40bccce":"sum(y_test)\/len(y_test) * 100","ef2d67d2":"clf_xgb = xgb.XGBClassifier(objective = 'binary:logistic',\n                           missing=None,\n                           seed=24)","200c2a35":"clf_xgb.fit(X_train,\n           y_train,\n           verbose=True,\n           early_stopping_rounds=10,\n           eval_metric='aucpr',\n           eval_set=[(X_test, y_test)])","4fc64e6b":"plot_confusion_matrix(clf_xgb,\n                     X_test,\n                     y_test,\n                     values_format='d',\n                     display_labels=['Churned','Not Churned'])","f630ff3f":"param_grid = {\n    'max_depth' : [3,4,5],\n    'learning_rate' : [0,1,0.01,0.05],\n    'gamma' : [0,0.25,1.0],\n    'reg_lambda' : [0,1.0,10.0],\n    'scale_pos_weight' : [1,3,5]\n}","6ee755bb":"xgb_estimator = xgb.XGBClassifier(objective='binary:logistic',\n                                  seed=24,\n                                  subsample=0.9,\n                                  colsample_bytree=0.5)","25294d7f":"clf_xgb_tuned = GridSearchCV(estimator=xgb_estimator,\n                             param_grid=param_grid,\n                             scoring='roc_auc',\n                             verbose=2,\n                             n_jobs=-1,\n                             cv = StratifiedKFold(n_splits=3, shuffle=True, random_state=24)\n)","c14c0abb":"clf_xgb_tuned.fit(X_train,\n                  y_train,\n                  verbose=True,\n                  early_stopping_rounds=10,\n                  eval_metric='aucpr',\n           eval_set=[(X_test, y_test)]\n)","5fd9fae4":"clf_xgb_tuned.best_estimator_","82891416":"clf_xgb_tuned.best_params_","c081cfce":"clf_xgb_tuned.best_score_","deedbd59":"plot_confusion_matrix(clf_xgb_tuned,\n                     X_test,\n                     y_test,\n                     values_format='d',\n                     display_labels=['Churned','Not Churned'])","51bb1ae7":"y_pred = clf_xgb_tuned.predict(X_test)","4aaa9ebb":"print(classification_report(y_pred, y_test))","8d97033b":"plot_roc_curve(clf_xgb_tuned,\n               X_test,\n               y_test,\n               name='XGB Tuned ROC AUC');","acb58df3":"plot_precision_recall_curve(clf_xgb_tuned,\n               X_test,\n               y_test,\n               name='XGB Precision-Recall Curve');","c97ff324":"xgb_lone_estimator = xgb.XGBClassifier(\n    objective='binary:logistic', \n    seed=24, \n    subsample=0.9, \n    colsample_bytree=0.5, \n    gamma = 0.25, \n    learning_rate=0.05, \n    max_depth=4,\n    reg_lambda=10.0, \n    scale_pos_weight=3,\n    n_estimator=1\n)","94fb7cc5":"xgb_lone_estimator.fit(X_train, y_train)","87a0148a":"xgb_bst = xgb_lone_estimator.get_booster()","f7a0863a":"for importance_type in ('weight', 'gain', 'cover', 'total_gain', 'total_cover'):\n    print('%s:  ' % importance_type, xgb_bst.get_score(importance_type=importance_type))","d3752874":"node_params = {\n    'shape' : 'box',\n    'style' : 'filled, rounded',\n    'fillcolor' : '#78cbe'\n}\n\nleaf_params = {\n    'shape' : 'box',\n    'style' : 'filled',\n    'fillcolor' : '#e48038'\n}","0cc788d2":"xgb.to_graphviz(xgb_lone_estimator,\n                num_trees=0,\n                size=\"5,5\",\n                condition_node_params=node_params,\n                leaf_node_params=leaf_params\n)","9a44b613":"## Confusion Matrix","d9899ad8":"`scale_pos_weight` is tuned for Imbalanced Datasets","cc894b3a":"## GridSearchCV Results","68f97e5a":"# Hyperparameter Tuning with GridSearchCV","3227b268":"# Visualizing the XGBoost Tree","c752d20e":"# Load the dataset","c860171c":"## Classification Report for the Hyperparameter Tuned Model","38b2b5dd":"## Tweaking the parameters for handling Class Imbalance in Dataset","a7b324cf":"# Check the columns info","ea6e9005":"# Importing the necessary packages","f2468882":"# Building XGBoost Baseline Model","d3ebafa3":"# Pairplot of all the variables","eb7ae7e1":"# Box Plot of all the Variables\n### To understand the distribution and outliers","b74f976c":"# ROC AUC Curve for the Hyperparameter Tuned Model","cc0271e8":"# Separate the Independent and Dependent Variables","9566b74d":"### Checking the Class Imbalance ","51aed43a":"# Train Test Split with Stratification","e0bace39":"# Precision-Recall Curve for the Hyperparameter Tuned Model","d683c387":"# One-Hot Encoding for the Categorical variables","29462b4f":"# Statistical Summary (Five Number Summary)"}}