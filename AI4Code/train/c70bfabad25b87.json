{"cell_type":{"50664581":"code","672353f6":"code","2bb0976e":"code","52f40e2f":"code","1bc5009b":"code","ad506f9f":"code","101e9f39":"code","aa4156b0":"code","1f86c9ce":"code","9395ed95":"code","d191ff47":"code","f87b88d1":"code","bddcd912":"code","b1376dd1":"code","399c587f":"code","cbbae5c3":"code","56e89b49":"code","0e455eff":"code","94fa6769":"code","c97683ff":"code","15243c94":"code","51e9ad5e":"code","9dadaa67":"code","b02b7769":"code","d30df7bb":"code","fca01e9e":"code","4dca216e":"code","5685ece3":"code","fb801894":"code","5638a7cd":"code","46b878cb":"code","e6aa5198":"code","b6512d2e":"code","c6d07cad":"code","633a893e":"markdown","c128dabf":"markdown","08dc03e3":"markdown","9397d8f2":"markdown","1c97147b":"markdown","6a9e14ec":"markdown","e5c149f4":"markdown","5b1c63fb":"markdown","2d045848":"markdown","71414c48":"markdown","6001b5a1":"markdown","1ec8abc2":"markdown","a52768e6":"markdown","545d20b3":"markdown","c0453f03":"markdown","b97a7373":"markdown","a058e4f7":"markdown","949945ce":"markdown","4402e795":"markdown","0acbcd7b":"markdown","c58d511e":"markdown","eacf2192":"markdown","c52af886":"markdown","d7716675":"markdown","e4230ec3":"markdown","c91a4dc5":"markdown","3d1fe89d":"markdown","a9a61433":"markdown","598435d9":"markdown","9dd7e9ce":"markdown","a9abc496":"markdown","3ee5ea23":"markdown","c41dddef":"markdown","3438a903":"markdown","1ce1acac":"markdown"},"source":{"50664581":"## start with packages to install\n# for EDA\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pylab as plt\nimport seaborn as sns\n\n# for storytelling\nfrom IPython.display import Image\nfrom IPython.core.display import HTML","672353f6":"data = pd.read_csv(\"..\/input\/disney-movies-and-tv-shows\/disney_plus_titles.csv\")\n\ndata.head(3)","2bb0976e":"def percentMissing(df):\n    \"\"\"calculates percent of missing data for each column in a pandas DataFrame\"\"\"\n    for column in df.columns:\n        rate_null = (df[column].isna().sum()\/len(df))\n        rate_null = round(100*rate_null,2)\n        if rate_null > 0:\n            print(f\"{column} null rate......................... {rate_null}%\")\n        else:\n            print(f\"{column} has no missing values\")\n            \npercentMissing(data)","52f40e2f":"data.info()","1bc5009b":"data.describe()","ad506f9f":"# for Country\ndata['country'] = data['country'].fillna(data['country'].mode()[0])\n\n# to replace with 'No Data'\ntoReplace = ['cast', 'director']\ndef replaceWith(df, a, b):\n    \"\"\"replaces missing values in the columns inside list a, with the value b\"\"\"\n    for column in a:\n        df[column].replace(np.nan, b, inplace = True)\nreplaceWith(data, toReplace, 'No Data')","101e9f39":"data.dropna(inplace = True)","aa4156b0":"data.drop_duplicates(inplace = True)","1f86c9ce":"# Check our work so far\npercentMissing(data)","9395ed95":"data['date_added'] = pd.to_datetime(data['date_added'])","d191ff47":"data['month_added'] = data['date_added'].dt.month\ndata['month_added_name'] = data['date_added'].dt.month_name()\ndata['year_added'] = data['date_added'].dt.year","f87b88d1":"data['seasons'] = data.apply(lambda x: x['duration'].split(' ')[0] if 'min' not in x['duration'] else \"0\", axis = 1)\ndata['duration'] = data.apply(lambda x: x['duration'].split(' ')[0] if 'min' in x['duration'] else \"0\", axis = 1)","bddcd912":"data.head(3)","b1376dd1":"data[\"desc_length\"] = data[\"description\"].apply(lambda x: len(x))\ndata[\"title_length\"] = data[\"title\"].apply(lambda x: len(x))\ndata[\"desc_length\"], data[\"title_length\"]","399c587f":"data[\"num_directors\"] = data[\"director\"].apply(lambda x: len(x.split(\",\")))\ndata[\"num_cast\"] = data[\"cast\"].apply(lambda x:len(x.split(\",\")))\ndata[\"num_directors\"], data[\"num_cast\"]","cbbae5c3":"data['duration'] = pd.to_numeric(data['duration'])","56e89b49":"# x axis is years, y axis is number of movies where each column represents the count of a specific TV rating (TV-G, PG, etc.)","0e455eff":"pd.value_counts(data['rating']).plot.bar()\nplt.title('Ratings for Disney Plus Content until 2021')","94fa6769":"# content ratings by year added to Disney Plus","c97683ff":"# unique ratings\n# unique years\n\nuniqueRatings = data['rating'].unique()\nuniqueYears = data['release_year'].unique().sort()\nuniqueYAdded = data['year_added'].unique()","15243c94":"sns.countplot(data=data,x='year_added', hue='rating')","51e9ad5e":"def plotRatingsPerYear(data, uniqueRatings):\n    for rating in uniqueRatings:\n        tmp = data[data['rating'] == rating]\n        plt.figure(figsize=(16,4))\n        ratingPlot = sns.countplot(data=tmp, x='release_year', hue='rating')\n        ratingPlot.set_xticklabels(ratingPlot.get_xticklabels(), rotation = 45, ha = \"right\")\n        plt.tight_layout()\n        plt.show()\n\nplotRatingsPerYear(data, uniqueRatings)","9dadaa67":"# first finish applying all cleaning and adding important columns as necessary\n# do df.describe()\n# plot histogram of columns of interest using df.column_name.hist()\n# plot boxplot of columns of interest using df.boxplot(column = column names)\n# finish later for continuous variables","b02b7769":"data.boxplot(column = [\"duration\"]) # time","d30df7bb":"data.boxplot(column = [\"release_year\"]) # year","fca01e9e":"data.boxplot(column = [\"month_added\"])","4dca216e":"data[[\"duration\",\"month_added\",\"year_added\",\"release_year\"]].corr()","5685ece3":"cmap = sns.diverging_palette(220, 10, as_cmap=True)\nsns.heatmap(data[[\"duration\",\"month_added\",\"year_added\",\"release_year\",\"desc_length\",\"num_cast\",\"num_directors\",\"title_length\"]].corr(), cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\n\n# Good for checking for multicolinearity","fb801894":"# type, country, rating, listed_in, maybe direcotr?, month_added\ncatVar = [\"type\", \"rating\",\"month_added_name\"]\ndata_cat = data[catVar] # making a new dataframe with only the categorical variables of interest","5638a7cd":"def plotBarCharts(df):\n    \"\"\"Plots a bar chart for all column names in a dataframe df\"\"\"\n    for col in df.columns:\n        cat_num = df[col].value_counts()\n        print(f\"Bar plot of total count for {col}\")\n        graph = sns.barplot(x = cat_num.index, y = cat_num, data = df)\n        graph.set_xticklabels(graph.get_xticklabels(), rotation = 45)\n        plt.show()\n        \nplotBarCharts(data_cat)","46b878cb":"long_cat1 = [\"listed_in\", \"country\"]\nlong_cat2 =  [\"director\", \"cast\"]\ndata_long_cat1 = data[long_cat1]\ndata_long_cat2 = data[long_cat2]","e6aa5198":"def plotBarChartsFilter(df, start, topX):\n    \"\"\"\n    Plots a bar chart for all column names in a dataframe df\n    Takes the first topX number of items in the list\n    \"\"\"\n    for col in df.columns:\n        cat_num = df[col].value_counts()[start:topX]\n        print(f\"Bar plot of total count for {col}\")\n        plt.figure(figsize=(16,4))\n        graph = sns.barplot(x = cat_num.index, y = cat_num, data = df)\n        graph.set_xticklabels(graph.get_xticklabels(), rotation = 90)\n        plt.show()\n\nplotBarChartsFilter(data_long_cat1, 0, 15)\nplotBarChartsFilter(data_long_cat2, 1, 15) # starts at 1 because the index 0 is usually N\/A or no data","b6512d2e":"pd.pivot_table(data, index ='rating', values='duration')","c6d07cad":"# This code is directly taken and adapted from Ken Jee via his YouTube series 'Data Science Project from Scratch' (specifically video 4: 'Data Science Project from Scratch - Part 4 (Exploratory Data Analysis)'\n\nfrom wordcloud import WordCloud, ImageColorGenerator, STOPWORDS\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\n\nwords = \" \".join(data['description'])\nwords_to_remove = [\"see\", \"see \", \"SEE\", \"details\", \"advisory\"] # the term 'see details for advisory' appears frequently\n\ndef removePunctuation(text):\n    \"\"\"remove punctuation and stop words\"\"\"\n    filtered = []\n    stop_words = set(stopwords.words('english'))\n    word_tokens = word_tokenize(text)\n    for w in word_tokens:\n        if w not in stop_words and w.isalpha() and w not in words_to_remove:\n            filtered.append(w.lower())\n    return filtered\n\nwords_filtered = removePunctuation(words)\nwords_filtered = list(filter(('see').__ne__, words_filtered)) # bug in removePunctuation that did not filter out the word 'see'\ntext = \" \".join([ele for ele in words_filtered])\n\nwc = WordCloud(background_color = \"white\", random_state = 1, stopwords = STOPWORDS, max_words = 2000, width = 1500, height = 800)\nwc.generate(text)\n\nplt.figure(figsize=[10,10])\nplt.imshow(wc, interpolation='bilinear')\nplt.axis('off')\nplt.show()","633a893e":"With Disney Plus Exploding with popularity, both in terms of content and subscriber count, the content must have interesting insights. How might the Disney Plus success relate to any of its contents?","c128dabf":"Based on the information above, there are a few things we need to do. In particular, dealing with the missing data, especially in the directors column as it has a substantial amount of missing information. Then, fix formatting in a few columns as the information cannot be dealt with the type.","08dc03e3":"Result: All plots regardless of rating show an increase in content in the later half of the 20th\/21st Century compared to the earlier years such as the G rating. However, TV-PG, TV-14, and PG showed explosive growth after the 2000s with TV-PG nearing almost 50 pieces of content added in 2021 alone. This could likely demonstrate a shift in the target audiences from strictly family-friendly to more mature type content.","9397d8f2":"Potential Questions:\n* How has the TV ratings of available content changed over the years? Has the focused shifted to more all-age friendly, etc.?\n* What is the most common release date\/month of the year?\n* Which categories is the majority of the content on?\n* If one season, how likely for another season?","1c97147b":"#### Adding 'Number of' Columns (for directors, actors, etc.)","6a9e14ec":"#### Replace NaNs (if very high percentage) for Columns: Director, Cast, and Country","e5c149f4":"#### Second Question: What is the type of data in each column?","5b1c63fb":"Potential Classification Problem:\n* How does director and cast affect TV rating?","2d045848":"Result: Interestingly for movies, the more mature content tends to have a longer duration, but this not apply to TV content which sees that PG are slightly lower duration on average. Although for Y ratings the pattern is typical depending on maturity. ","71414c48":"#### Add additional columns for day, month to the dataframe using the 'date_added' column","6001b5a1":"#### Remove NaNs for columns: data_added, rating","1ec8abc2":"#### Split Durations column so its just minutes (integer) or number of seasons (integer)","a52768e6":"#### First Question: How much data are we missing?","545d20b3":"#### Fix format from object to int64 for column duration","c0453f03":"#### Add a length column (for description & title)","b97a7373":"Question: How do TV ratings compare each year?","a058e4f7":"Result: Generally speaking, there is no discernable pattern except for 2 ratings which are concidentally TV-G and G ratings. Both ratings saw a massive spike during the year of Disney+'s release, but saw an immediate drop off. Disney's content primarily leans towards family friendly both historically and in brand reputation (evidenced by the previous bar graph), so releasing the abundant family-friendly content that Disney has historically collected being released at it's first year explains the drop off. ","949945ce":"### TV Ratings","4402e795":"## Simple Visualizations","0acbcd7b":"### To-Do List (to clean)","c58d511e":"## Clean Data","eacf2192":"#### Fix data_added formatting to date time for columns: date_added","c52af886":"#### CATEGORICAL VARIABLE PLOTS","d7716675":"#### Cleaning done!","e4230ec3":"#### WORDCLOUD","c91a4dc5":"#### Third Question: What are general statistical information about this data?","3d1fe89d":"* change type column to a categorical column\n* remove NaNs\n* fix date added formatting\n* fix duration data from formaat of \"int min\" to integer\n* likely remove description unless doing some sort of analysis on this information which is beyond the scope of this attempt","a9a61433":"#### Remove Duplicate Rows","598435d9":"Need to remove NaNs and columns that may not be useful","9dd7e9ce":"Result: No more missing values :)","a9abc496":"# * DISNEY PLUS - EXPLORATORY DATA ANALYSIS *","3ee5ea23":"#### CORRELATION MATRIX","c41dddef":"## Load Data","3438a903":"### Basic Visualizations","1ce1acac":"#### BOXPLOT"}}