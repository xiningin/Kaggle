{"cell_type":{"0e6bae0b":"code","cf9da826":"code","424db080":"code","5aa6263a":"code","6c35dae6":"code","c8cfd6ba":"code","ff54fd27":"code","8dd2dc58":"code","8020fa23":"code","6dc394fd":"code","bfdd1581":"code","41bba861":"code","1c6f610e":"code","3b6aa092":"code","c60621cc":"code","0fa99b97":"code","e8cb4036":"code","82c295d6":"code","e7224f7c":"code","26410825":"code","713923c0":"code","44710013":"code","76ccfd8b":"code","633c7db5":"code","ad6e1e3f":"code","e41317a6":"code","d1d26eb5":"code","681c10d2":"code","4b64456b":"code","7f139031":"code","21cf5269":"code","f6f50ef8":"code","8cbb981f":"code","e18e2a3a":"code","1d7c05f9":"code","326d7f31":"code","efd19f17":"code","8cf874fa":"code","a03086c1":"code","ebf5ba4a":"code","30c75b9f":"code","a9e8b85c":"markdown","044fce02":"markdown","11efc268":"markdown","067745d3":"markdown","206b7b23":"markdown","303974f3":"markdown","a2be4640":"markdown","e6a0579a":"markdown","e257a782":"markdown"},"source":{"0e6bae0b":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib as plt\n%matplotlib inline","cf9da826":"df = pd.read_csv(\"\/kaggle\/input\/loan-prediction-problem-dataset\/train_u6lujuX_CVtuZ9i.csv\")\ndf.head()","424db080":"df.describe()","5aa6263a":"df.info()","6c35dae6":"# find the null  values\n\ndf.isnull().sum()","c8cfd6ba":"# fill the missing values for numerical terms - mean\ndf['LoanAmount']=df['LoanAmount'].fillna(df['LoanAmount'].mean())\ndf['Loan_Amount_Term']=df['Loan_Amount_Term'].fillna(df['Loan_Amount_Term'].mean())\ndf['Credit_History']=df['Credit_History'].fillna(df['Credit_History'].mean())","ff54fd27":"# fill the missing values for categorical terms - mode\ndf['Gender']=df['Gender'].fillna(df['Gender'].mode()[0])\ndf['Married']=df['Married'].fillna(df['Married'].mode()[0])\ndf['Dependents']=df['Dependents'].fillna(df['Dependents'].mode()[0])\ndf['Self_Employed']=df['Self_Employed'].fillna(df['Self_Employed'].mode()[0])","8dd2dc58":"df.isnull().sum()","8020fa23":"sns.countplot(df['Gender'])","6dc394fd":"sns.countplot(df['Dependents'])","bfdd1581":"sns.countplot(df['Education'])","41bba861":"sns.countplot(df['Self_Employed'])","1c6f610e":"sns.countplot(df['Property_Area'])","3b6aa092":"sns.countplot(df['Loan_Status'])","c60621cc":"sns.distplot(df['ApplicantIncome'])","0fa99b97":"# apply Log Transformation to the attribute\ndf['ApplicantIncome']=np.log(df['ApplicantIncome'])","e8cb4036":"sns.distplot(df['ApplicantIncome'])","82c295d6":"df['ApplicantIncome']=np.log(df['ApplicantIncome']+1)","e7224f7c":"sns.distplot(df['ApplicantIncome'])","26410825":"sns.distplot(df['CoapplicantIncome'])","713923c0":"df['CoapplicantIncome']=np.log(df['CoapplicantIncome']+1)","44710013":"sns.distplot(df['CoapplicantIncome'])","76ccfd8b":"sns.distplot(df['LoanAmount'])","633c7db5":"df['LoanAmount']=np.log(df['LoanAmount']+1)","ad6e1e3f":"sns.distplot(df['LoanAmount'])","e41317a6":"sns.distplot(df['Loan_Amount_Term'])","d1d26eb5":"df['Loan_Amount_Term']=np.log(df['Loan_Amount_Term'])","681c10d2":"sns.distplot(df['Loan_Amount_Term'])","4b64456b":"sns.distplot(df['Credit_History'])","7f139031":"corr = df.corr()\nsns.heatmap(corr,annot=True, cmap='BuPu')","21cf5269":"df.head()","f6f50ef8":"# drop unnecessary columns\ncols = ['Loan_ID', 'CoapplicantIncome']\ndf=df.drop(columns=cols, axis=1)\ndf.head()","8cbb981f":"from sklearn.preprocessing import LabelEncoder\ncols=['Gender', 'Married', 'Education', 'Self_Employed', 'Property_Area', 'Loan_Status', 'Dependents']\nle=LabelEncoder()\nfor col in cols:\n    df[col]=le.fit_transform(df[col])","e18e2a3a":"df.head()","1d7c05f9":"# Specify input and output attributes\nX=df.drop(columns=['Loan_Status'],axis=1)\ny=df['Loan_Status']","326d7f31":"from sklearn.model_selection import train_test_split\nX_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.25,random_state=42)","efd19f17":"# classify function\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import cross_val_score\ndef classify(model,x,y):\n    x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42,shuffle=True)\n    model.fit(x_train,y_train)\n    print(\"Accuracy is \", model.score(x_test,y_test)*100)\n    score=cross_val_score(model,x,y,cv=5)\n    print(\"Cross validation is ,\" ,np.mean(score)*100)\n    y_pred=model.predict(x_test)\n    confusionmatrix(y_pred,y_test)\ndef confusionmatrix(y_pred,y_test):\n    cm=confusion_matrix(y_test,y_pred)\n    print(cm)\n    sns.heatmap(cm,annot=True)","8cf874fa":"from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nclassify(model,X,y)","a03086c1":"from sklearn.ensemble import RandomForestClassifier,ExtraTreesClassifier\nmodel = RandomForestClassifier(n_estimators=100,min_samples_split=25, max_depth=7,max_features=1)\nclassify(model,X,y)","ebf5ba4a":"model = ExtraTreesClassifier(n_estimators=100,min_samples_split=25, max_depth=7,max_features=1)\nclassify(model,X,y)","30c75b9f":"from xgboost import XGBClassifier\n# specify parameters via map\nmodel=XGBClassifier( learning_rate =0.01,\n n_estimators=250,\n max_depth=5,\n min_child_weight=1,\n  subsample=0.8,\n colsample_bytree=0.8,\n objective= 'binary:logistic',\n nthread=4,\n scale_pos_weight=1,\n use_label_encoder=False,\n eval_metric='mlogloss',                   \n seed=45)\nclassify(model,X,y)","a9e8b85c":"### Numerical attributes visualization","044fce02":"## Label Encoding","11efc268":"## Exploratory Data Analysis","067745d3":"## Loading the dataset ","206b7b23":"## Coorelation Matrix","303974f3":"### Categorical Attributes Visualization","a2be4640":"## Train-Test Split","e6a0579a":"## Model Training","e257a782":"## Preprocessing of Dataset"}}