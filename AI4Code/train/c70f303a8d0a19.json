{"cell_type":{"7837b633":"code","a2a2f117":"code","1c0a50b4":"code","6b608cdb":"code","e6fb4753":"code","7cf3c52b":"code","d7ce4233":"code","3b9ae61e":"code","734be101":"code","db75be97":"code","ef435541":"code","195c8da7":"code","2ac86cbf":"code","1c9f3452":"code","33717cd0":"code","defb0e37":"markdown","0c726495":"markdown","369aac42":"markdown","4854ef9a":"markdown","73d455ca":"markdown"},"source":{"7837b633":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","a2a2f117":"plt.style.use('fivethirtyeight')","1c0a50b4":"df = pd.read_csv('..\/input\/drug-classification\/drug200.csv')\ndf.head()","6b608cdb":"print('No. of missing values in Dataframe is: ' + str(df.isnull().sum().sum()))","e6fb4753":"df.columns","7cf3c52b":"plt.figure(1,figsize=(20,20))\nn = 0\nfor col in ['Sex', 'BP', 'Cholesterol','Drug']:\n    n+=1\n    plt.subplot(2,2,n)\n    plt.subplots_adjust(hspace=0.3,wspace = 0.3)\n    sns.scatterplot(x = 'Na_to_K',y = 'Age',data = df,hue = col,s = 100)\n    plt.title(col)\n    plt.legend(loc = 0)","d7ce4233":"sns.countplot(df[\"Drug\"])","3b9ae61e":"df['Drug'] = pd.Categorical(df['Drug'])\ndf['Code'] = df['Drug'].cat.codes\ndf.head()","734be101":"temp = pd.get_dummies(df[['Sex', 'BP', 'Cholesterol']])\ntemp.head()","db75be97":"df = pd.concat([df,temp],axis = 1)\ndf.head()","ef435541":"df = df.drop(['Sex', 'BP', 'Cholesterol'],axis = 1)\ndf.head()","195c8da7":"df.columns","2ac86cbf":"X = df[['Age', 'Na_to_K', 'Sex_F', 'Sex_M', 'BP_HIGH', 'BP_LOW','BP_NORMAL', 'Cholesterol_HIGH', 'Cholesterol_NORMAL']]\ny = df['Code']\nfrom sklearn.model_selection import train_test_split as tts\nX_train,X_test,y_train,y_test = tts(X, y, test_size = 0.33, random_state = 7)\nfor setd,name in zip([X_train,X_test,y_train,y_test],['X_train','X_test','y_train','y_test']):\n  print(name + ' shape : ' + str(setd.shape))","1c9f3452":"from xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nclf = XGBClassifier()\nclf.fit(X_train,y_train)\ny_pred = clf.predict(X_test)\nprint(f\"Accuracy Score = {accuracy_score(y_test,y_pred)}\")","33717cd0":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,y_pred))","defb0e37":"## Visualisation","0c726495":"## Data Preprocessing","369aac42":"## Train Test Split","4854ef9a":"There are no problems due to the imbalanced dataset","73d455ca":"## Model and Accuracy Score"}}