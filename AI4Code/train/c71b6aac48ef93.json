{"cell_type":{"20dbc546":"code","b3ee56e7":"code","33f31876":"code","ff895eaf":"code","42e9f301":"code","dff5072c":"code","d4dc4ae9":"code","1a14d13b":"code","2d396b59":"code","72778f23":"code","82aa9698":"code","801a8cdb":"code","da66282d":"code","1e2cdbfd":"code","89d84293":"code","4975f705":"code","e4ed0362":"code","d947564a":"code","bd1e4d6b":"code","fe0f2402":"code","839b85c2":"code","4202ca30":"code","be19497b":"code","be46fe51":"code","a2c65786":"code","76658fb4":"code","fd1125ed":"code","33e127e6":"code","90694210":"code","fd349b7a":"markdown","2b02efed":"markdown","d4607588":"markdown","574265eb":"markdown","5bcf460d":"markdown","9b808fe0":"markdown","646e3e61":"markdown","b9840c57":"markdown","b6895343":"markdown","10f594e9":"markdown","72cd56c5":"markdown","b6ae7275":"markdown","048b08f9":"markdown","51393b16":"markdown","4fa64749":"markdown","a234c48f":"markdown","13911be5":"markdown"},"source":{"20dbc546":"import warnings\nwarnings.filterwarnings('ignore')\nimport pandas as pd\nimport numpy as np\nimport math\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\nfrom sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer\nfrom sklearn.feature_selection import SelectFromModel\nfrom mlxtend.feature_selection import SequentialFeatureSelector\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, OrdinalEncoder, StandardScaler,PowerTransformer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\npd.set_option(\"display.max_columns\", None)\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import Lasso, LinearRegression, BayesianRidge\nimport statsmodels.api as sm\nimport scipy.stats as stats\nimport statsmodels.stats.api as sms\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor as vif\nfrom statsmodels.stats.multicomp import pairwise_tukeyhsd, tukeyhsd, MultiComparison\nfrom scipy.stats import jarque_bera, shapiro, bartlett\nfrom statsmodels.stats.stattools import durbin_watson\nfrom statsmodels.graphics.tsaplots import plot_acf","b3ee56e7":"def drop_cols(data, cols):\n    if len(cols)==0:\n        return df\n    return data.drop(cols, axis=1)\n\ndef missing(data):\n    if data.isna().sum().sum()==0:\n        return \"all missing values treated\"\n    data = data.isna().sum()\/data.shape[0]\n    data[data>0].plot(kind='bar', figsize=(16,7))\n    all_miss = list(data[data==1].index)\n    print(\"These columns have all the values missing\",all_miss)\n    plt.title(\"Missing value plot\")\n    plt.tight_layout()\n    plt.xlabel(\"Column\")\n    plt.ylabel(\"Missing data in %\")\n    plt.xticks(rotation=90)\n    plt.show()\n\ndef treat_skew(data, exclude=None, threshold = 1, ):\n    cols = list(data.skew()[abs(data.skew())>threshold].index)    \n    cols = [ col for col in cols if col not in exclude]\n    return cols","33f31876":"df = pd.read_csv(\"\/kaggle\/input\/londonairbnb\/vishal_final.csv\")\ndf = drop_cols(df, [\"country\",\"lastreviewdays\", \"firstreviewdays\"])","ff895eaf":"original_price = df[\"price\"]\nY = np.log(df[\"price\"])\nX = df.drop([\"id\",\"price\"], axis=1)","42e9f301":"x_train, x_test, y_train, y_test = train_test_split(X, Y, train_size=0.7, random_state=1)\nx_train.shape, x_test.shape","dff5072c":"def feature_select_rf(train=None, test=None, y=y_train, threshold = '0.7*median'):\n    selector_rf = SelectFromModel(select_rf, threshold='0.7*median')\n    columns = train.columns\n    selector_rf.fit(train, y)\n    columns_rf = [col for col, flag in zip(columns,selector_rf.get_support()) if flag]\n    x_select = train[columns_rf]\n    print(f\"Feature shape selected : {x_select.shape}\")\n    test_select = test[columns_rf]\n    return (x_select, test_select)\n\ndef preprocess_onehot(train, test=None, y=y_train, select=True):\n    ct_onehot.fit(train)\n    onehot_cols = list(ct_onehot.named_transformers_['onehot'].get_feature_names(dummy))\n    all_columns = skew + passthru + onehot_cols\n    x_transform = pd.DataFrame(scaler.fit_transform(ct_onehot.transform(train)), columns=all_columns)\n    x_transform = pd.DataFrame(numeric_skew.fit_transform(imputer_br.fit_transform(x_transform)), columns=all_columns)\n    if test is not None:\n        test_transform = pd.DataFrame(scaler.transform(ct_onehot.transform(test)), columns=all_columns)\n        test_transform = pd.DataFrame(numeric_skew.transform(imputer_br.transform(test_transform)), columns=all_columns)\n        print(\"Original Data Shape\", x_transform.shape, test_transform.shape)\n        if select:\n            print(\"Selecting the final features...\")\n            x_transform, test_transform = feature_select_rf(x_transform, test_transform, y_train)\n        return (x_transform, test_transform)\n    print(\"Original Data Shape\", x_transform.shape)\n    return x_transform","d4dc4ae9":"numeric = [\"host_acceptance_rate\",\"accommodates\",\"bathrooms\",\"bedrooms\",\"beds\",\"security_deposit\",\"cleaning_fee\",\n       \"guests_included\",\"extra_people\",\"availability_30\",\"availability_60\",\"availability_90\",\"availability_365\",\n       \"number_of_reviews\",\"number_of_reviews_ltm\",\"review_scores_rating\",\"review_scores_accuracy\",\n       \"review_scores_cleanliness\",\"review_scores_checkin\",\"review_scores_communication\",\"review_scores_location\",\n       \"review_scores_value\",\"reviews_per_month\",\"amenity_sum\",\"distance\",\"premium\",'neighbourhood_cleansed']\npt = PowerTransformer(method='yeo-johnson')\ntreatment = pd.DataFrame(X[numeric].skew())\ntreatment['PT'] = pd.DataFrame(pt.fit_transform(df[numeric]), columns = numeric).skew()\n\nskew = treat_skew(X[numeric], ['host_acceptance_rate'])","1a14d13b":"categorical = list(set(X.columns).difference(set(numeric)))\n\ndummy = [\"experiences_offered\",\"property_type\",\"room_type\",\"bed_type\",\"cancellation_policy\",\"host_response_time\"]\npassthru = list(set(X.columns).difference(set(dummy+skew)))","2d396b59":"pt = PowerTransformer(method='yeo-johnson')\n\nimpute_br = BayesianRidge()\nimputer_br = IterativeImputer(impute_br, skip_complete=True)\n\nselect_rf = RandomForestRegressor(random_state=1, n_jobs=4)\n\nonehot = OneHotEncoder(handle_unknown='ignore')\nscaler = StandardScaler()\n\nct_onehot = ColumnTransformer([('pass1','passthrough', skew),\n                               ('pass2','passthrough', passthru),\n                               ('onehot', onehot,   dummy)    ], remainder='drop')\n\nnumeric_skew = ColumnTransformer([('skew', pt, np.arange(len(skew)))],\n                                  remainder='passthrough')","72778f23":"x_transform, test_transform = preprocess_onehot(x_train, x_test, select=False)","82aa9698":"plt.figure(figsize=(16,16))\ncorr = X[numeric].corr()\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\nsns.heatmap(corr, annot=True, fmt='.2f', cmap='YlGnBu', mask=mask)\nplt.title(\"Correlation map for numeric variables\")\nplt.show()","801a8cdb":"x_constant = sm.add_constant(x_transform)\ntest_constant = sm.add_constant(test_transform)","da66282d":"model = sm.OLS(y_train.reset_index(drop=True), x_constant).fit()\nmodel.summary()","1e2cdbfd":"import statsmodels.tsa.api as smt\nacf = smt.graphics.plot_acf(model.resid, lags=100 , alpha=0.05)\nacf.show()","89d84293":"durbin_watson(model.resid)","4975f705":"from statsmodels.compat import lzip\nname = ['Jarque-Bera', 'Chi^2 two-tail prob.', 'Skew', 'Kurtosis']\ntest = sms.jarque_bera(model.resid)\nlzip(name, test)","e4ed0362":"shapiro(model.resid)","d947564a":"import scipy.stats as st\nplt.figure(figsize=(6,4))\nst.probplot(model.resid, dist = \"norm\", plot=plt)\nplt.show()","bd1e4d6b":"sns.residplot(model.predict(), model.resid, lowess=True, color='g')\nax.set(xlabel = 'Fitted value', ylabel = 'Residuals', title = 'Residual vs Fitted Plot \\n')\nplt.show()","fe0f2402":"sns.distplot(model.resid)\nplt.title(\"Skewness of residuals: %.4f\"%stats.skew(model.resid))\nplt.show()","839b85c2":"# homoskedasticity test\nname = ['F statistic', 'p-value']\ntest = sms.het_goldfeldquandt(model.resid, model.model.exog)\nlzip(name, test)","4202ca30":"sns.set_style('darkgrid')\nsns.mpl.rcParams['figure.figsize'] = (15.0, 9.0)\n\ndef linearity_test(model, y):\n    fitted_vals = model.predict()\n    resids = model.resid\n\n    fig, ax = plt.subplots(1,2)\n    \n    sns.regplot(x=fitted_vals, y=y, lowess=True, ax=ax[0], line_kws={'color': 'red'})\n    ax[0].set_title('Observed vs. Predicted Values', fontsize=16)\n    ax[0].set(xlabel='Predicted', ylabel='Observed')\n\n    sns.regplot(x=fitted_vals, y=resids, lowess=True, ax=ax[1], line_kws={'color': 'red'})\n    ax[1].set_title('Residuals vs. Predicted Values', fontsize=16)\n    ax[1].set(xlabel='Predicted', ylabel='Residuals')","be19497b":"linearity_test(model, y_train)","be46fe51":"sms.diagnostic.linear_rainbow(model, frac=0.5)","a2c65786":"vif_val = pd.DataFrame(index = x_transform.columns)\nvif_val[\"VIF\"]= [vif(x_transform.values, i) for i in range(x_transform.shape[1])]\nvif_val\n#vif_val.loc[numeric,:].sort_values('VIF', ascending=False)","76658fb4":"def calc_vif(data, threshold=10):\n    vif_max = threshold\n    col_vif = np.Inf\n    while col_vif>vif_max:\n        vif_val = pd.DataFrame(index = data.columns)\n        vif_val[\"VIF\"]= [vif(data.values, i) for i in range(data.shape[1])]\n        col_vif = vif_val.VIF.max()\n        drop_col = list(vif_val[vif_val.VIF == col_vif].index)\n        print(\"Dropping column...\", drop_col,\"VIF :\",col_vif)\n        data = data.drop(drop_col, axis=1)\n    return list(data.columns)\ncalc_vif(x_transform[numeric])","fd1125ed":"vif_filter = ['host_acceptance_rate', 'accommodates', 'bathrooms', 'bedrooms', 'beds', 'security_deposit','cleaning_fee',\n              'guests_included', 'extra_people', 'availability_30', 'availability_365', 'number_of_reviews', 'number_of_reviews_ltm',\n              'review_scores_location', 'amenity_sum', 'distance', 'premium','neighbourhood_cleansed']\n\nonehot_cols = list(set(x_transform.columns).symmetric_difference(numeric))\nonehot_cols.remove('property_type_House')\nonehot_cols.remove('month_book')\nonehot_cols.remove('cancellation_policy_flexible')\nonehot_cols.remove('week_book')\nonehot_cols.remove('experiences_offered_none')\nfinal_cat = list(model.pvalues[onehot_cols][model.pvalues[onehot_cols]<0.05].index)\n\nx_final = x_transform[vif_filter + final_cat]\ntest_final = test_transform[vif_filter + final_cat]","33e127e6":"x_final_constant = sm.add_constant(x_final)\ntest_final_constant = sm.add_constant(test_final)","90694210":"model_final = sm.OLS(y_train.reset_index(drop=True), x_final_constant).fit()\nmodel_final.summary()","fd349b7a":"## Removing highly multicollinear columns sequentially","2b02efed":"### 2. Checking for normality of residuals","d4607588":"### The assumption of normality failed for the residuals","574265eb":"### 4. Test for Linearity","5bcf460d":"## Importing the libraries","9b808fe0":"### The assumption of heteroscedasticity holds for the residuals","646e3e61":"## Correlation map","b9840c57":"### 3. Test for heteroscedasticity","b6895343":"# Preprocessing steps on data\n- Cleaning the price columns\n    - listing price, cleaning fee, extra people, security\n- Created super categories for property types\n- Created distance from the listing location\n- Created a feature of premium amenities from the amenities list\n- Selected records of only United Kingdom\n- What to do with beds 0, bathrooms 0, bedrooms 0\n- Weekly price missing filled 0, security deposit missing filled 0\n- Cleaning fee missing filled 0\n- For reviews 0 , review scores in various columns filled as 0\n- Host response time filled as other for 0 reviews, unknown for the rest","10f594e9":"### 1. Test for Autocorrelation of residuals","72cd56c5":"### We are getting inf VIF for categorical columns which we can ignore","b6ae7275":"## Statistical Modelling of data","048b08f9":"### The assumption of no autocorrelation holds for the residuals","51393b16":"# Checking for Linear Model assumptions","4fa64749":"### The assumption of linearity for residuals holds true","a234c48f":"## Try to plot outliers influence","13911be5":"### 5. Multicollinearity Check"}}