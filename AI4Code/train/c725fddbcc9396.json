{"cell_type":{"34e6c2ed":"code","3796ff95":"code","13e1f45c":"code","fe643050":"code","dd754dc2":"code","f907c1dd":"code","a2efe813":"code","296cc8d2":"code","c1978fe8":"code","2224c03b":"code","a5070f29":"code","8bdbc5cb":"code","b18a8d71":"code","581085c1":"code","cdf2c28c":"code","9bcae68d":"code","e5ae3beb":"code","c4e7d9f8":"code","37d20b88":"code","1353eb00":"code","c16af612":"code","d1c02ed5":"code","47545b17":"code","e44c4d2f":"code","45bd2006":"code","67be1fe9":"code","66d2eb3d":"code","58cb77ba":"code","df6fec5b":"code","3238deaf":"code","825e378e":"markdown","58899eb6":"markdown","dcf34588":"markdown","fc85c5a5":"markdown","c83239d6":"markdown","a6de2d25":"markdown","c1b50a18":"markdown","e6fcb488":"markdown","ddd336fd":"markdown","7110e974":"markdown","ae64f62c":"markdown","5efdec1a":"markdown","d6afc5ae":"markdown","3878d8fa":"markdown","765089ed":"markdown","6ccac5be":"markdown","c875083c":"markdown","542f769d":"markdown","75c575ef":"markdown","23ec4fba":"markdown","26ab870e":"markdown","90f13acc":"markdown","b0b43458":"markdown"},"source":{"34e6c2ed":"!pip install optuna","3796ff95":"# \u57fa\u672c\u30e9\u30a4\u30d6\u30e9\u30ea\u3000numpy , pandas\nimport numpy as np \nimport pandas as pd \n\n# \u524d\u51e6\u7406\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\nfrom sklearn.preprocessing import StandardScaler\n\n# \u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u7528\u30e9\u30a4\u30d6\u30e9\u30ea Optuna\nimport optuna\nfrom optuna.samplers import TPESampler\n# \u30ed\u30b0\u304c\u3046\u308b\u3055\u3044\u306e\u3067\u304d\u308b\noptuna.logging.set_verbosity(optuna.logging.WARNING)\n\n# \u6a5f\u68b0\u5b66\u7fd2\u30e9\u30a4\u30d6\u30e9\u30ea\nimport xgboost as xgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score,f1_score\n\n# Warning\u304c\u3046\u308b\u3055\u3044\u306e\u3067\u304d\u308b\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()","13e1f45c":"# \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\ntrain_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')\n\n# \u76ee\u7684\u5909\u6570\u306e\u51e6\u7406\ntrain_y = train_df['Survived']\ntest_df['Survived'] = np.nan","fe643050":"# \u4e8c\u3064\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u307e\u3068\u3081\u3066\u524d\u51e6\u7406\u3092\u3059\u308b\u306e\u3067\u3001\u5b66\u7fd2\u7528\u3068\u4e88\u6e2c\u7528\u3092\u5224\u65ad\u3059\u308b\u30e9\u30d9\u30eb\u3092\u4ed8\u3051\u3066\u304a\u304f\u3002\ntrain_df['Dataset'] = 'train'\ntest_df['Dataset'] = 'test'\n\n# \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u3072\u3068\u3064\u306b\u307e\u3068\u3081\u308b\u3002\nall_df = pd.concat([train_df,test_df])","dd754dc2":"# \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u304b\u3089\u6570\u5024\u306b\u5909\u63db 0:female 1:male\nall_df['Sex'] = all_df['Sex'].apply(lambda x: 1 if x == 'male' else 0)","f907c1dd":"# \u656c\u79f0\u3092\u629c\u304d\u51fa\u3059\u3002\nall_df['Honorific'] = all_df['Name'].map(lambda x: x.split(', ')[1].split('. ')[0])\n#\u6570\u306e\u5c11\u306a\u3044\u656c\u79f0\u3092\u8fd1\u3057\u3044\u3082\u306e\u306b\u7d71\u5408\nall_df['Honorific'].replace(['Capt', 'Col', 'Major', 'Dr', 'Rev'], 'Officer', inplace=True)\nall_df['Honorific'].replace(['Don', 'Sir',  'the Countess', 'Lady', 'Dona'], 'Royalty', inplace=True)\nall_df['Honorific'].replace(['Mme', 'Ms'], 'Mrs', inplace=True)\nall_df['Honorific'].replace(['Mlle'], 'Miss', inplace=True)\nall_df['Honorific'].replace(['Jonkheer'], 'Master', inplace=True)","a2efe813":"train_df['AgeIsnull'] = train_df['Age'].isnull().apply(lambda x: 1 if x == True else 0)\nprint(pd.crosstab(train_df['Survived'],train_df['AgeIsnull'] ))\nprint('\u5e74\u9f62\u308f\u304b\u308b\u4eba\u306e\u6b7b\u4ea1\u7387 59% ,\u5e74\u9f62\u4e0d\u660e\u306e\u4eba\u306e\u6b7b\u4ea1\u7387 70%')","296cc8d2":"# \u5e74\u9f62\u306e\u6b20\u640d\u30d5\u30e9\u30b0\nall_df['AgeIsnull'] = all_df['Age'].isnull().apply(lambda x: 1 if x == True else 0)\n\n# \u5e74\u9f62\u306e\u6b20\u640d\u3092\u540c\u3058\u656c\u79f0\u306e\u5e74\u9f62\u306e\u4e2d\u592e\u5024\u3067\u57cb\u3081\u308b\u3002 \u300cMr.\u300d\u306a\u3089\u300cMr.\u300d\u306e\u4e2d\u306e\u4e2d\u592e\u5024\nhonorific_dict = all_df['Honorific'].value_counts().to_dict()\nage_median_dict = {}\nfor honorific in honorific_dict.keys():\n    age_median_dict[honorific] = all_df[all_df['Honorific']==honorific]['Age'].median()\n    \nfor honorific in age_median_dict.keys():\n    all_df['Age'] = all_df.loc[((all_df['Age'].isnull()) & (all_df['Honorific']==honorific)),'Age'] = age_median_dict[honorific]\n\n# \u5e74\u9f62\u5e2f\u3054\u3068\u306b\u5206\u3051\u308b\u3002 0\uff1a\u5b50\u4f9b 1\uff1a\u9ad8\u9f62\u8005\u3067\u306f\u306a\u3044\u5927\u4eba 2:\u9ad8\u9f62\u8005\nall_df['AgeBin'] = 1\nall_df.loc[all_df['Age']<18,'AgeBin'] = 0\nall_df.loc[all_df['Age']>=60,'AgeBin'] = 2","c1978fe8":"# \u5bb6\u65cf\u306e\u4eba\u6570\u3092\u8a08\u7b97\nall_df['FamilyNum'] = all_df['SibSp'] + all_df['Parch'] + 1\n\n# \u5bb6\u65cf\u306e\u4eba\u6570\u3054\u3068\u306b\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u5316\ndef family_size_case(x):\n    if  x == 1:\n        return 'Alone'\n    elif x >= 2 and x <= 4:\n        return 'Small Family'\n    elif x >= 5 and x <= 6:\n        return 'Midium Family'\n    else:\n        return 'Large Family'\n\nall_df['FamilySize'] = all_df['FamilyNum'].apply(family_size_case)","2224c03b":"# Fare\u304cnull\u306e\u4eba\u3092\u629c\u304d\u51fa\u3057\u3066\u3001\u540c\u4e00\u6761\u4ef6\u306e\u4eba\u306e\u4e2d\u592e\u5024\u3067\u57cb\u3081\u308b\u3002\nfare_null_df = all_df[all_df['Fare'].isnull()]\nfor idx,row in fare_null_df.iterrows():\n    pc = row['Pclass']\n    fn = row['FamilyNum']\n    all_df['Fare'] = all_df['Fare'].fillna(all_df.groupby(['Pclass', 'FamilyNum'])['Fare'].median()[pc][fn])\n\n# \u4fa1\u683c\u5e2f\u3054\u3068\u306b\u5206\u3051\u308b\u3002\nall_df['FareBin'] = 0\nall_df.loc[(all_df['Fare']>=10) & (all_df['Fare']<50), 'FareBin'] = 1\nall_df.loc[(all_df['Fare']>=50) & (all_df['Fare']<100), 'FareBin'] = 2\nall_df.loc[(all_df['Fare']>=100), 'FareBin'] = 3","a5070f29":"all_df['EmbarkedIsnull'] = all_df['Embarked'].isnull().apply(lambda x: 1 if x == True else 0)\nall_df['Embarked'] = all_df['Embarked'].fillna('S')","8bdbc5cb":"all_df['TicketNum'] = all_df.groupby('Ticket')['Ticket'].transform('count')","b18a8d71":"train_df['CabinIsnull'] = train_df['Cabin'].isnull().apply(lambda x: 1 if x == True else 0)\nprint(pd.crosstab(train_df['Survived'],train_df['CabinIsnull'] ))\nprint('\u30ad\u30e3\u30d3\u30f3\u308f\u304b\u308b\u4eba\u306e\u751f\u5b58\u738766% \u30ad\u30e3\u30d3\u30f3\u308f\u304b\u3089\u306a\u3044\u4eba\u306e\u751f\u5b58\u7387 30%')\nprint('\u751f\u304d\u3066\u3044\u305f\u304b\u5bb6\u65cf\u304c\u8a3c\u8a00\uff1f')","581085c1":"train_df['Cabin'] = train_df['Cabin'].fillna('null')\ntrain_df['CabinDeck'] = train_df['Cabin'].str[0]\nprint(pd.crosstab(train_df['Survived'],train_df['CabinDeck'] ))","cdf2c28c":"# Cabin\nall_df['CabinIsnull'] = all_df['Cabin'].isnull().apply(lambda x: 1 if x == True else 0)\n# all_df['Cabin'] = all_df['Cabin'].fillna('Null')\n# all_df['CabinDeck'] = all_df['Cabin'].str[0]","9bcae68d":"encode_columns = ['Embarked','FamilySize','Honorific','Pclass']\nfor column in encode_columns:\n    all_df[column] = le.fit_transform(all_df[column].values)","e5ae3beb":"#FamilySurvival \u2192 \u5bb6\u65cf\u304c\u751f\u5b58\u3057\u3066\u3044\u308b\u304b\u3002\n#\u751f\u5b58\u8005\u304c\u3044\u306a\u3044(NaN\u3082\u542b\u3080) \u2192 0\n#\u5168\u54e1NaN\u3001\u307e\u305f\u306f\u5bb6\u65cf\u304c\u3044\u306a\u3044\u2192 1\n#\u5168\u54e1\u306f\u751f\u5b58\u3057\u3066\u3044\u306a\u3044\u304c\u3001\u4e00\u4eba\u4ee5\u4e0a\u751f\u5b58\u3057\u3066\u3044\u308b \u2192 2\n#\u5168\u54e1\u751f\u5b58\u3057\u3066\u3044\u308b\u3002\u21923\n\n#\u540d\u5b57\u3092\u53d6\u5f97\u3057\u3066'LastName'\u306b\u5165\u308c\u308b\nall_df['LastName'] = all_df['Name'].apply(lambda x: x.split(\",\")[0])\n\nall_df['FamilySurvival'] = 1 #\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u5024\n#Last_name\u3068Fare\u3067\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0 \u2192 1\u5bb6\u65cf\u3054\u3068\u306b\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\nfor grp, grp_df in all_df.groupby(['LastName', 'Fare']):\n    \n    #\u5bb6\u65cf\u304c\u3044\u308b\u5834\u5408\n    if (len(grp_df) != 1):\n        for idx, row in grp_df.iterrows():\n            # \u81ea\u5206\u3092\u9664\u3044\u305f\u3068\u304d\u306b\u3001\u4e00\u4eba\u4ee5\u4e0a\u751f\u5b58\u8005\u304c {0\uff1a\u3044\u306a\u3044,1\uff1a\u3044\u308b}\n            smax = grp_df.drop(idx)['Survived'].max()\n            # \u81ea\u5206\u3092\u9664\u3044\u305f\u3068\u304d\u306b\u3001\u4e00\u4eba\u3082\u751f\u5b58\u8005\u304c {0\uff1a\u3044\u306a\u3044, 1\uff1a\u3044\u308b}\n            smin = grp_df.drop(idx)['Survived'].min()\n            p_id = row['PassengerId']\n\n            if (smax == 0) and (smin == 0):\n                all_df.loc[all_df['PassengerId'] == p_id, 'FamilySurvival'] = 0\n            elif (smax == 1) and (smin == 0):\n                all_df.loc[all_df['PassengerId'] == p_id, 'FamilySurvival'] = 2\n            elif (smax == 1) and (smin == 1):\n                all_df.loc[all_df['PassengerId'] == p_id, 'FamilySurvival'] = 3\n\n#\u30c1\u30b1\u30c3\u30c8\u756a\u53f7\u3067\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\nfor grp, grp_df in all_df.groupby('Ticket'):\n    #\u30c1\u30b1\u30c3\u30c8\u756a\u53f7\u304c\u540c\u3058\u4eba\u304c2\u4eba\u4ee5\u4e0a\u3044\u308b\u5834\u5408\n    if (len(grp_df) != 1):\n        \n        for idx, row in grp_df.iterrows():\n            # FamilySurvival\u304c\u4eca\u306e\u3068\u3053\u308d\u300c0\u300d\u304b\u300c1\u300d\u306b\u306a\u3063\u3066\u3044\u308b\u4eba\u306e\u307f\u78ba\u8a8d\u3092\u884c\u3063\u3066\u3044\u304f\u3002\n            if (row['FamilySurvival'] == 0) | (row['FamilySurvival']== 1):\n                # \u81ea\u5206\u3092\u9664\u3044\u305f\u3068\u304d\u306b\u3001\u4e00\u4eba\u4ee5\u4e0a\u751f\u5b58\u8005\u304c {0\uff1a\u3044\u306a\u3044,1\uff1a\u3044\u308b}\n                smax = grp_df.drop(idx)['Survived'].max()\n                # \u81ea\u5206\u3092\u9664\u3044\u305f\u3068\u304d\u306b\u3001\u4e00\u4eba\u3082\u751f\u5b58\u8005\u304c {0\uff1a\u3044\u306a\u3044, 1\uff1a\u3044\u308b}\n                smin = grp_df.drop(idx)['Survived'].min()\n                p_id = row['PassengerId']\n\n                if (smax == 0) and (smin == 0):\n                    all_df.loc[all_df['PassengerId'] == p_id, 'FamilySurvival'] = 0\n                elif (smax == 1) and (smin == 0):\n                    all_df.loc[all_df['PassengerId'] == p_id, 'FamilySurvival'] = 2\n                elif (smax == 1) and (smin == 1):\n                    all_df.loc[all_df['PassengerId'] == p_id, 'FamilySurvival'] = 3","c4e7d9f8":"all_df = all_df.drop(columns=['Ticket','Name','LastName','Cabin'])","37d20b88":"print('Feature List')\nprint(all_df.drop(columns=['Dataset','PassengerId','Survived']).info())","1353eb00":"train_X = all_df[all_df['Dataset']=='train'].drop(columns=['Dataset','PassengerId','Survived'])\ntest_X = all_df[all_df['Dataset']=='test'].drop(columns=['Dataset','PassengerId','Survived'])","c16af612":"class Optimizer:\n    def __init__(self, metric, trials=50):\n        self.metric = metric\n        self.trials = trials\n        self.sampler = TPESampler(seed=42)\n        \n    def objective(self, trial):\n        model = create_model(trial)\n        model.fit(X_train, y_train)\n        preds = model.predict(X_valid)\n        if self.metric == 'acc':\n            return accuracy_score(y_valid, preds)\n        else:\n            return f1_score(y_valid, preds)\n            \n    def optimize(self):\n        study = optuna.create_study(direction=\"maximize\", sampler=self.sampler)\n        study.optimize(self.objective, n_trials=self.trials)\n        return study.best_params\n    \ndef create_model(trial):\n    max_depth = trial.suggest_int(\"max_depth\", 2, 6)\n    n_estimators = trial.suggest_int(\"n_estimators\", 1, 150)\n    learning_rate = trial.suggest_uniform('learning_rate', 0.0000001, 1)\n    gamma = trial.suggest_uniform('gamma', 0.0000001, 1)\n    subsample = trial.suggest_uniform('subsample', 0.0001, 1.0)\n    model = xgb.XGBClassifier(\n        learning_rate=learning_rate, \n        n_estimators=n_estimators, \n        max_depth=max_depth, \n        gamma=gamma, \n        subsample=subsample,\n        silent=True,\n        verbosity = 0,\n        random_state=42\n    )\n    return model","d1c02ed5":"X_train, X_valid, y_train, y_valid = train_test_split(train_X, train_y, test_size=0.3, random_state=42)\n\nbase_model = xgb.XGBClassifier(\n    random_state=42,\n)\nbase_model.fit(X_train, y_train)\npreds = base_model.predict(X_valid)","47545b17":"print('XGBoost accuracy: ', accuracy_score(y_valid, preds))\nprint('XGBoost f1-score: ', f1_score(y_valid, preds))","e44c4d2f":"optimizer = Optimizer('f1')\nxgb_f1_params = optimizer.optimize()\nxgb_f1_params['random_state'] = 42\nxgb_f1 = xgb.XGBClassifier(\n    **xgb_f1_params,\n)\nxgb_f1.fit(X_train, y_train)\npreds = xgb_f1.predict(X_valid)","45bd2006":"print('Optimized on F1 score')\nprint('XGBoost accuracy: ', accuracy_score(y_valid, preds))\nprint('XGBoost f1-score: ', f1_score(y_valid, preds))","67be1fe9":"optimizer = Optimizer('acc')\nxgb_acc_params = optimizer.optimize()\nxgb_acc_params['random_state'] = 42\nxgb_acc = xgb.XGBClassifier(\n    **xgb_acc_params\n)\nxgb_acc.fit(X_train, y_train)\npreds = xgb_acc.predict(X_valid)","66d2eb3d":"print('Optimized acc ACC score')\nprint('XGBoost accuracy: ', accuracy_score(y_valid, preds))\nprint('XGBoost f1-score: ', f1_score(y_valid, preds))","58cb77ba":"xgb_f1.fit(train_X,train_y)\ntest_Y = xgb_f1.predict(test_X)","df6fec5b":"from matplotlib import pyplot as plt\n\n_, ax = plt.subplots(figsize=(12, 4))\nxgb.plot_importance(xgb_f1,\n                    ax=ax,\n                    importance_type='gain',\n                    show_values=False)\nplt.show()","3238deaf":"sample_submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsample_submission['Survived'] = test_Y\n\nsample_submission.to_csv('submission_xgb.csv', index=False)  # csv\u30d5\u30a1\u30a4\u30eb\u306e\u66f8\u304d\u51fa\u3057","825e378e":"## \u5bb6\u65cf\u304c\u751f\u5b58\u3057\u3066\u3044\u308b\u304b\u5426\u304b\u5224\u5b9a\u3059\u308b\u30d5\u30e9\u30b0\u3092\u8ffd\u52a0\n\u5224\u5b9a\u65b9\u6cd5\u306f2\u3064\u3002\n<ol>\n<li>\u300cLastName\u300d\u3068\u300cFare\u300d\u304c\u540c\u3058\u306a\u3089\u5bb6\u65cf\u3068\u5224\u5b9a<\/li>\n<li>\u300cTicket\u300d\u304c\u540c\u3058\u306a\u3089\u5bb6\u65cf\u3068\u5224\u5b9a<\/li>\n<\/ol>","58899eb6":"### \u3044\u3089\u306a\u3044\u30ab\u30e9\u30e0\u3092\u524a\u9664","dcf34588":"### Fare(\u4e57\u8239\u4fa1\u683c)\u306e\u524d\u51e6\u7406\n<ol>\n    <li>\u6b20\u640d\u5024\u3092\u5ba2\u5ba4\u306e\u30af\u30e9\u30b9\u3068\u5bb6\u65cf\u306e\u4eba\u6570\u304c\u540c\u3058\u4eba\u306e\u4e2d\u592e\u5024\u3067\u57cb\u3081\u308b\u3002(\u4e00\u4eba\u3057\u304b\u3044\u306a\u3044\u3051\u3069\u3002\u3002\u3002)<\/li>\n    <li>\u4fa1\u683c\u5e2f\u3054\u3068\u306b\u5206\u3051\u308b\u3002<\/li>\n<\/ol>","fc85c5a5":"### F\u5024\u3092\u3082\u3068\u306b\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","c83239d6":"## Optuna \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","a6de2d25":"## \u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306a\u3057\u306e\u7cbe\u5ea6\u691c\u8a3c","c1b50a18":"## \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u8aad\u307f\u8fbc\u307f","e6fcb488":"### Sex(\u6027\u5225)\u306e\u524d\u51e6\u7406","ddd336fd":"### Age(\u5e74\u9f62)\u306e\u524d\u51e6\u7406\n<ol>\n    <li>\u5e74\u9f62\u304c\u6b20\u640d\u3057\u3066\u3044\u308b\u30d5\u30e9\u30b0\u3092\u4ed8\u3051\u308b\u3002(\u5e74\u9f62\u3059\u3089\u308f\u304b\u3089\u306a\u3044\u2192\u4ea1\u304f\u306a\u3063\u3066\u305d\u3046\u3002)<\/li>\n    <li>\u656c\u79f0\u3054\u3068\u306b\u5e74\u9f62\u306e\u4e2d\u592e\u5024\u3092\u8a08\u7b97 \u2192\u3000\u305d\u308c\u3067\u6b20\u640d\u5024\u3092\u57cb\u3081\u308b<\/li>\n    <li>\u5b50\u4f9b(18\u6b73\u672a\u6e80)\u304b\u3001\u9ad8\u9f62\u8005(60\u6b73\u4ee5\u4e0a)\u306e\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092\u3064\u3051\u308b\u3002<\/li>\n<ol>","7110e974":"### \u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u3001\u4e88\u6e2c\u7528\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u5206\u5272","ae64f62c":"### \u6b63\u7b54\u7387\u3092\u3082\u3068\u306b\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","5efdec1a":"### Honorific(\u656c\u79f0)\u306e\u30ab\u30e9\u30e0\u3092\u4f5c\u6210\u3002\n\u5f8c\u3067Age\u306e\u524d\u51e6\u7406\u3067\u4f7f\u3046\u3002","d6afc5ae":"### F\u5024\u3067\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u305f\u30e2\u30c7\u30eb\u306e\u65b9\u304c\u826f\u3055\u3052\u306a\u306e\u3067\u3001\u305d\u308c\u3067\u4e88\u6e2c","3878d8fa":"### \u63d0\u51fa\u30d5\u30a1\u30a4\u30eb\u4f5c\u6210","765089ed":"## SibSp\u3001Parch\u306e\u524d\u51e6\u7406\n<ol>\n    <li>FamiliyNum(\u5bb6\u65cf\u306e\u4eba\u6570)<\/li>\n    <li>FamiliySize(\u5bb6\u65cf\u306e\u5927\u304d\u3055)\u3092\u4f5c\u6210<\/li>\n<\/ol>","6ccac5be":"## \u524d\u51e6\u7406","c875083c":"\n### Ticket(\u4e57\u8239\u6e2f)\u306e\u524d\u51e6\u7406\n<ol>\n    <li>\u540c\u3058\u30c1\u30b1\u30c3\u30c8\u306e\u679a\u6570\u3092\u6570\u3048\u308b\u3002(\u5bb6\u65cf\u6570\u3068\u307b\u307c\u540c\u7fa9\uff1f)<\/li>\n<\/ol>","542f769d":"### Cabin(\u30ad\u30e3\u30d3\u30f3)\u306e\u524d\u51e6\u7406\n<ol>\n    <li>\u3068\u308a\u3042\u3048\u305a\u6b20\u640d\u30d5\u30e9\u30b0\u3060\u3051\u5165\u308c\u3066\u304a\u304f\u3002<\/li>\n<\/ol>\n\u30a2\u30a4\u30c7\u30a2\u30ea\u30b9\u30c8\n<ol>\n    <li>\u30a2\u30a4\u30c7\u30a2\u982d\u6587\u5b57\u3067\u30ad\u30e3\u30d3\u30f3\u306e\u30a8\u30ea\u30a2\u304c\u5206\u304b\u308b\u3089\u3057\u3044\u3002\u3002<\/li>\n    <li>\u30ad\u30e3\u30d3\u30f3\u540c\u3058\u306a\u3089\u5bb6\u65cf\uff1f<\/li>\n<\/ol>","75c575ef":"## \u30e9\u30a4\u30d6\u30e9\u30ea\u8aad\u307f\u8fbc\u307f","23ec4fba":"### \u524d\u51e6\u7406\u5b8c\u4e86\u5f8c\u306e\u30ab\u30e9\u30e0\u30ea\u30b9\u30c8\n\u6b20\u640d\u5024\u3084\u6587\u5b57\u578b(object)\u306e\u5217\u304c\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d","26ab870e":"### \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092Label-Encoding","90f13acc":"### Embarked(\u4e57\u8239\u6e2f)\u306e\u524d\u51e6\u7406\n<ol>\n    <li>\u4e57\u8239\u6e2f\u304c\u6b20\u640d\u3057\u3066\u3044\u308b\u30d5\u30e9\u30b0\u3092\u4ed8\u3051\u308b\u3002(\u4e57\u8239\u6e2f\u3059\u3089\u308f\u304b\u3089\u306a\u3044\u2192\u4ea1\u304f\u306a\u3063\u3066\u308b\u304b\u3082\u3002)<\/li>\n    <li>\u6b20\u640d\u5024\u306f\u3068\u308a\u3042\u3048\u305aS\u3067\u57cb\u3081\u308b\u3002(\u8981\u691c\u8a0e)<\/li>\n<\/ol>","b0b43458":"## \u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\n\u6b63\u7b54\u7387(Accuracy) , F\u5024\u3067\u8a55\u4fa1\n![](https:\/\/cdn-ak.f.st-hatena.com\/images\/fotolife\/f\/f-bun\/20190208\/20190208173648.png)"}}