{"cell_type":{"ebc4287e":"code","ff8621f6":"code","0b2817e5":"code","89f4bb2a":"code","2033742e":"code","f0dd9807":"code","9abe894b":"code","cdbb70b9":"code","9af69fcc":"code","68b06c09":"code","f8633c0d":"code","306d609a":"code","65a2c7eb":"code","77c485f0":"code","ac56b194":"code","a0d030ea":"code","c6faf314":"code","2bbb1107":"code","4fef7498":"code","bfe8df0c":"code","83637e40":"code","8d6efa1e":"code","ca99c5d5":"code","f41d0cb3":"code","0a351321":"code","46be4170":"code","41a37a1a":"code","549c9728":"code","fe6a178f":"code","653799e9":"code","475c318d":"code","c360b30e":"code","5ac8981e":"code","b3aec5e1":"code","859e55ec":"code","e6231fdc":"code","ab41e2c1":"code","afc74368":"code","7b7f1711":"code","2d9790b9":"code","0520919c":"code","f923da70":"code","046112db":"code","5acfdf17":"markdown","1af18cdd":"markdown","3273f56c":"markdown","9b625534":"markdown","93abcf51":"markdown","9361ff73":"markdown","576f40d0":"markdown","f504584e":"markdown","dbee0ad0":"markdown","ba3f773b":"markdown","afb26bb9":"markdown","8c7cbb77":"markdown","e0c57380":"markdown","76f784ba":"markdown","3703d134":"markdown","ef294636":"markdown","e1b7ce28":"markdown","df09396c":"markdown","cff3c0db":"markdown","5b293e7b":"markdown","31ba6e6e":"markdown","ad4046d9":"markdown","83f9446d":"markdown","107fcd3e":"markdown","fa6de4af":"markdown","4ce3e70e":"markdown","4c64a10b":"markdown","a3de1e5e":"markdown","248bf79a":"markdown","0a4d891d":"markdown","978dcfb5":"markdown","cb6b9a7e":"markdown","53595035":"markdown"},"source":{"ebc4287e":"import matplotlib.pyplot as plt\nimport pandas as pd\nimport pylab as pl\nimport numpy as np","ff8621f6":"#pd.set_option('display.float_format', lambda x: '%.5f' % x)\npd.options.display.float_format = \"{:,.0f}\".format\n#pd.reset_option('display.float_format')","0b2817e5":"df = pd.read_csv('..\/input\/house-price-tehran-iran\/housePrice.csv')\ndf.head(9)","89f4bb2a":"df.describe()","2033742e":"df.dtypes","f0dd9807":"df[\"Area\"] = df[\"Area\"].apply(lambda x: float(x.split()[0].replace(',', '')))","9abe894b":"df['Area'].astype(str).astype(float)","cdbb70b9":"df.dtypes","9af69fcc":"df.describe()","68b06c09":"df.sort_values(by='Area', ascending=False).head(15)","f8633c0d":"df = df.drop([709, 1604, 570, 2802])","306d609a":"df.describe()","65a2c7eb":"df.sort_values(by='Area', ascending=False).head(9)","77c485f0":"df.isna().sum() ","ac56b194":"df = df.dropna()\nprint(df.shape)","a0d030ea":"fig0, (ax1,ax2) = plt.subplots(1,2, figsize=(15,10))\n\nax1.hist(df[\"Room\"])\nax2.ticklabel_format(useOffset=False, style='plain')\n\nax2.hist(df[\"Price(USD)\"])\nax2.ticklabel_format(useOffset=False, style='plain')\nplt.show()","c6faf314":"Parking = df['Parking'].value_counts()\nprint(Parking)\nprint(' ')\n\nWarehouse = df['Warehouse'].value_counts()\nprint(Warehouse)\nprint(' ')\n\nElevator = df['Elevator'].value_counts()\nprint(Elevator)\n","2bbb1107":"fig1, (ax1,ax2,ax3) = plt.subplots(1,3, figsize=(15,15)) \n\nlabels = 'True', 'False'\nax1.pie([Parking[1], Parking[0]], labels=labels, autopct='%1.1f%%',\n        shadow=False, startangle=90)\nax1.set_title(\"Parking\")\n\nlabels = 'True', 'False'\nax2.pie([Warehouse[1], Warehouse[0]], labels=labels, autopct='%1.1f%%',\n        shadow=False, startangle=90)\nax2.set_title(\"Warehouse\")\n\nlabels = 'True', 'False'\nax3.pie([Elevator[1], Elevator[0]], labels=labels, autopct='%1.1f%%',\n        shadow=False, startangle=90)\nax3.set_title(\"Elevator\")\n\nplt.show()","4fef7498":"plt.scatter(df['Room'], df['Price(USD)'],  color='blue')\nplt.xlabel(\"Number of Rooms\")\nplt.ylabel(\"Price(USD)\")\nplt.ticklabel_format(useOffset=False, style='plain')\nplt.show()","bfe8df0c":"df[(df['Room']== 0) & (df['Price(USD)']> 2000000)]","83637e40":"df[df['Address']== 'Tajrish']","8d6efa1e":"plt.scatter(df['Area'], df['Price(USD)'],  color='blue')\nplt.xlabel(\"Area\")\nplt.ylabel(\"Price\")\nplt.ticklabel_format(useOffset=False, style='plain')\nplt.show()","ca99c5d5":"df[df['Area']>3500]","f41d0cb3":"print(df['Address'].value_counts().shape)\ndf['Address'].value_counts()","0a351321":"df.sort_values(by='Price', ascending=False).head(9)","46be4170":"from sklearn.preprocessing import LabelEncoder\nencoder = LabelEncoder() \n\ndf2 = df\n\nfor i in df2.columns: \n    if df2[i].dtype == 'object':\n        encoder.fit_transform(list(df2[i].values))\n        df2[i] = encoder.transform(df2[i].values)\n        ","41a37a1a":"df2.head(10)","549c9728":"X = np.asanyarray(df[['Area','Room','Parking','Warehouse','Elevator','Address']])\n# X = np.asanyarray(df[['Area','Room']])\n# X = np.asanyarray(df[['Area']])\n# X = np.asanyarray(df[['Address']])\ny = np.asanyarray(df[['Price(USD)']])","fe6a178f":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=4)\nprint ('Train set:', X_train.shape,  y_train.shape)\nprint ('Test set:', X_test.shape,  y_test.shape)","653799e9":"from sklearn.linear_model import LinearRegression\nlrmodel = LinearRegression()\nlrmodel.fit(X_train,y_train)","475c318d":"print ('Coefficients: ', lrmodel.coef_)\nprint ('Intercept: ',lrmodel.intercept_)","c360b30e":"predictions = lrmodel.predict(X_test)","5ac8981e":"from sklearn.metrics import mean_squared_error, r2_score\n\nprint(f\"MSE : {mean_squared_error(predictions, y_test)}\")\nprint(\"R2-score: %.2f\" % r2_score(y_test , predictions))","b3aec5e1":"df2 = df\n\nfor i in df2.columns: \n    if df2[i].dtype == 'object':\n        encoder.fit_transform(list(df2[i].values))\n        df2[i] = encoder.transform(df2[i].values)\n        \nfor j in df2.columns: \n    if df2[j].dtype == 'bool':\n        df2[j] = df2[j].astype('int64')\n                \nfor k in df2.columns: \n    if df2[k].dtype == 'int':\n        df2[k] = df2[k].astype('float64')","859e55ec":"df2.head(9)","e6231fdc":"X = df2[['Area', 'Room', 'Warehouse', 'Elevator', 'Address']].values\nprint(X [0:5])\n\ny = df2[['Price(USD)']].values\nprint(y [0:5])","ab41e2c1":"from sklearn import preprocessing\nfrom sklearn.preprocessing import StandardScaler\n\nScaler = preprocessing.StandardScaler().fit(X)\nX = Scaler.transform(X.astype(float))\nX[0:5]","afc74368":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=4)\nprint ('Train set:', X_train.shape,  y_train.shape)\nprint ('Test set:', X_test.shape,  y_test.shape)","7b7f1711":"from sklearn.neighbors import KNeighborsRegressor\nk = 3  \nknnr = KNeighborsRegressor(n_neighbors = k).fit(X_train,y_train)\nknnr","2d9790b9":"yhat = knnr.predict(X_test)\nyhat[0:5]","0520919c":"from sklearn.metrics import mean_squared_error, r2_score\n\nprint(f\"MSE : {mean_squared_error(yhat, y_test)}\")\nprint(\"R2-score: %.2f\" % r2_score(y_test , yhat))","f923da70":"Ks = 10\nmean_acc = np.zeros((Ks-1))\nstd_acc = np.zeros((Ks-1))\n\nfor n in range(1,Ks):\n    \n    knnr = KNeighborsRegressor(n_neighbors = n).fit(X_train,y_train)\n    yhat = knnr.predict(X_test)\n    mean_acc[n-1] = r2_score(y_test , yhat)\n\n    std_acc[n-1]=np.std(yhat==y_test)\/np.sqrt(yhat.shape[0])\n    ","046112db":"plt.plot(range(1,Ks),mean_acc,'g')\nplt.fill_between(range(1,Ks),mean_acc - 1 * std_acc,mean_acc + 1 * std_acc, alpha=0.10)\nplt.fill_between(range(1,Ks),mean_acc - 3 * std_acc,mean_acc + 3 * std_acc, alpha=0.10,color=\"green\")\nplt.legend(('Accuracy ', '+\/- 1xstd','+\/- 3xstd'))\nplt.ylabel('Accuracy ')\nplt.xlabel('Number of Neighbors (K)')\nplt.tight_layout()\nplt.show()\n\nprint( \"The best accuracy was with\", mean_acc.max(), \"with k=\", mean_acc.argmax()+1) ","5acfdf17":"Fitting a KNN Model with K=3:","1af18cdd":"We considered the K equal to 3 but is that the best K? let's find out:","3273f56c":"## KNN\nIn order to use KNN, we need to transform our categorical Data into numerical ones; we also change the boolean (True, False) to integer and the integers to floats:","9b625534":"Since we use KNN and it calculates the distance between our data points, the scales are so different; for example, compare the scale of the column Area and the column Rooms!\n\nFor the model to work better, we scale our data using the normal distribution:","93abcf51":"First, we should import libraries that we need for our analysis.","9361ff73":"Now, as you see in the df2, we will only be dealing with numbers.","576f40d0":"As we see in the scatterplot, the price rises as the area go up, which of course, is reasonable. I think we have another outlier here, the blue point on the right side of the plot has a great area, but it's not much expensive; let's check it out:","f504584e":"Splitting the dataset into train and test sets:","dbee0ad0":"The place is in the suburb of Tehran, so the price makes sense.The address of a place is an essential factor that affects the price, so let's check how many unique addresses we have and which ones are repeated more in our dataset.","ba3f773b":"It looks like that the more expensive houses have more rooms which makes sense. But there is a very expensive house with no bedrooms lets check it out:","afb26bb9":"# Perdiction of House Price in Tehran","8c7cbb77":"We are missing 23 addresses. We can fill them by, for example, the address that repeated more than others but based on the data we have, I don't think that will be accurate. So since there are only 23 missing values, I prefer to drop them from the dataset. I will still have 3452 rows to work with.","e0c57380":"Now I'm changing the format of the display option in pandas. If I don't do this, I will see large Numbers in scientific form. Also, Since we will predict house prices and deal with large numbers, I chose to display zero decimals; it is easier to work with.","76f784ba":"Well, it's a large house in uptown, so it makes sense to me that it is expensive, but the weird thing is that a place this big has no bedrooms and not even a warehouse !! I think it's an outlier. Let's check the other houses at the same address:","3703d134":"We got a negative R2 score!! Which means the model can be arbitrarily worse. So the linear regression model doesn't seem to work for this data!! Now let's try our chance with KNN Regressor:","ef294636":"Fitting a Linear Regression Model:","e1b7ce28":"Based on the addresses and prices, the data for the first four houses seem wrong (the first four areas are insanely large for an apartment) but others seem reasonable. \nSince there are only four incorrect data and we have a total number of 3479 rows, I'm just going to drop these four.","df09396c":"Well seems an outlier to me! Maybe the data for the warehouse or number of rooms is wrong, or it's just land and not an apartment. But since we don't have access to the data source to check it out and the price makes sense based on the area, I'm not going to drop it from the dataset.","cff3c0db":"Prediction for the test set:","5b293e7b":"Evaluation of the model:","31ba6e6e":"It seems that we have some vast numbers for Areas which can not be correct. So let's find them by sorting the data on the Area column:","ad4046d9":"Splitting the dataset into train and test sets:","83f9446d":"Now let's do some visualization to see if we can find anything interesting on the plots:\n","107fcd3e":"Let's define our independent variables and our Response variable:","fa6de4af":"As you see, the type of  the column Area is an object, and I need to change it to float for further analysis, but the problem is I cant not use the following line to do that:\n\n```python\ndf['Area'].astype(str).astype(float)\n\n```\n\nThe reason is that there are large numbers in this column that have 1000 separators, so first, I need to remove those commas so then  I can change the type to float:","4ce3e70e":"We got almost 80 Percent accuracy (it can be slightly different with another test and train sets), which is excellent compared to the linear regression model.","4c64a10b":"# Training Price Prediction Models\n\nNow that we explored our data and have come to a better comprehension of the dataset's characteristics, it's time to train some model for price prediction. First, I will use linear Regression, and then I will use the KNN regressor and compare these two models.","a3de1e5e":"## Regression\n\nIn order to use regression, we need to transform our categorical Data into numerical ones:","248bf79a":"Now let's check if there is any missing value:","0a4d891d":"Let's define our independent variables and our Response variable:","978dcfb5":"Evaluation of the model:","cb6b9a7e":"Let's Explore the data and see what it looks like:","53595035":"Prediction for the test set:"}}