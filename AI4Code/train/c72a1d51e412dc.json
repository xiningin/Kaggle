{"cell_type":{"c1daf564":"code","2150cb01":"code","d7d99485":"code","64638238":"code","c9799208":"code","54fe748d":"code","936046b5":"code","a1b62d96":"code","4682544d":"code","c8dba6da":"code","dd69cce6":"code","9b96eef5":"code","029a2968":"code","798bb849":"code","89838717":"code","4a0ecbed":"code","1cd3ba8a":"code","4fcd8f31":"code","0ebc9422":"code","5b104d60":"code","9bda3759":"code","1e422558":"code","52b5d104":"code","c0086f10":"code","cdec8c83":"code","77932428":"code","93a696ff":"code","87cededc":"code","4674228a":"code","b654df5f":"code","800942b1":"code","f1e622df":"code","dcef8a4c":"code","4a075729":"code","a9ea6b91":"code","53448ef1":"code","055db213":"code","8727f299":"code","e1e25d4d":"code","ed543625":"code","236b012c":"code","1f347bdc":"code","251c0598":"code","80a2fdad":"code","167e8305":"code","d8f2cb16":"code","a5fa1e7b":"code","4333c988":"code","8afe6bbf":"code","91a38ea5":"code","ef0482a6":"code","dca8a38f":"code","f8fa3997":"code","b50f035b":"code","3d17b2f6":"code","3e4818d7":"code","3bfcb26c":"markdown","12c6ac0e":"markdown","2ab03e99":"markdown","e841639a":"markdown","18d23a25":"markdown","090570e8":"markdown","7204f2cd":"markdown","e5a9a6f6":"markdown","fff1c562":"markdown","1b113001":"markdown","eebc3e76":"markdown","1230cd75":"markdown","6f8cb533":"markdown","a3dd6342":"markdown","f4b7cc98":"markdown"},"source":{"c1daf564":"%%capture\n!conda install -y -c conda-forge hdbscan umap-learn;","2150cb01":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\nimport hdbscan\nimport seaborn as sns\nfrom umap import UMAP\n","d7d99485":"game_data = pd.read_csv(\"\/kaggle\/input\/nfl-big-data-bowl-2022\/games.csv\")\nplays = pd.read_csv(\"\/kaggle\/input\/nfl-big-data-bowl-2022\/plays.csv\")\nscouting = pd.read_csv(\"\/kaggle\/input\/nfl-big-data-bowl-2022\/PFFScoutingData.csv\")\n","64638238":"punt_plays = plays[plays[\"specialTeamsPlayType\"] == \"Punt\"].copy()\n","c9799208":"# merge game data\npunt_plays = punt_plays.merge(game_data, left_on=\"gameId\", right_on=\"gameId\")","54fe748d":"# merge game data\nall_plays = plays.merge(game_data, left_on=\"gameId\", right_on=\"gameId\")","936046b5":"# merge scouting data\nall_plays = all_plays.merge(scouting, left_on=[\"gameId\", \"playId\"], right_on=[\"gameId\", \"playId\"])","a1b62d96":"# Add in tracking for 18, 19, 20 and filter to the first frame only\niter_csv = pd.read_csv(\"\/kaggle\/input\/nfl-big-data-bowl-2022\/tracking2018.csv\", iterator=True, chunksize=1e6)\ntracking18 = pd.concat([chunk[chunk[\"frameId\"] == 1] for chunk in iter_csv])\n\niter_csv = pd.read_csv(\"\/kaggle\/input\/nfl-big-data-bowl-2022\/tracking2019.csv\", iterator=True, chunksize=1e6)\ntracking19 = pd.concat([chunk[chunk[\"frameId\"] == 1] for chunk in iter_csv])\n\niter_csv = pd.read_csv(\"\/kaggle\/input\/nfl-big-data-bowl-2022\/tracking2020.csv\", iterator=True, chunksize=1e6)\ntracking20 = pd.concat([chunk[chunk[\"frameId\"] == 1] for chunk in iter_csv])\n","4682544d":"formation_tracking = pd.concat([tracking18, tracking19, tracking20])\n","c8dba6da":"del tracking18, tracking19, tracking20","dd69cce6":"df = formation_tracking.merge(all_plays, on=[\"gameId\", \"playId\"])\n","9b96eef5":"del all_plays","029a2968":"df.loc[df[\"y\"] < 0, \"y\"] = 0\ndf.loc[df[\"y\"] > 53, \"y\"] = 53","798bb849":"# Normalize the data\ndf[\"x_norm\"] = df[\"x\"]\ndf[\"y_norm\"] = df[\"y\"]\ndf[\"absoluteYardlineNumber_norm\"] = df[\"absoluteYardlineNumber\"]\n\ndf.loc[df[\"playDirection\"] == \"left\", \"x_norm\"] = (\n    120 - df.loc[df[\"playDirection\"] == \"left\", \"x\"]\n)\ndf.loc[df[\"playDirection\"] == \"left\", \"y_norm\"] = (\n    53 - df.loc[df[\"playDirection\"] == \"left\", \"y\"]\n)\ndf.loc[df[\"playDirection\"] == \"left\", \"absoluteYardlineNumber_norm\"] = (\n    120 - df.loc[df[\"playDirection\"] == \"left\", \"absoluteYardlineNumber\"]\n)","89838717":"def has_possession(row):\n    if (row[\"team\"] == \"away\") and (\n        row[\"possessionTeam\"] == row[\"visitorTeamAbbr\"]\n    ):\n        return True\n    elif (row[\"team\"] == \"home\") and (\n        row[\"possessionTeam\"] == row[\"homeTeamAbbr\"]\n    ):\n        return True\n    else:\n        return False\n","4a0ecbed":"df[\"has_possession\"] = df.apply(has_possession, axis=1)\n","1cd3ba8a":"# should be dist from line of scrimmage\ndf[\"x_from_scrimmage\"] = df[\"absoluteYardlineNumber_norm\"] - df[\"x_norm\"]","4fcd8f31":"def calculate_y_from_ball(rows):\n    y_football = rows.loc[rows[\"team\"] == \"football\", \"y_norm\"].item()\n    return rows[\"y_norm\"] - y_football","0ebc9422":"df[\"y_from_ball\"] = df.groupby([\"gameId\", \"playId\"]).apply(calculate_y_from_ball).droplevel(level=[0,1])","5b104d60":"df.loc[df[\"has_possession\"], \"x_from_scrimmage\"].hist(bins=20)","9bda3759":"df.loc[~df[\"has_possession\"], \"x_from_scrimmage\"].hist(bins=20)","1e422558":"# offensive players should all be greater than 0 at the start of the play\n# some aren't, let's set the ones greater than a yard off to 0\ndf.loc[\n    (df[\"x_from_scrimmage\"] < -1) & (df[\"has_possession\"]), \"x_from_scrimmage\"\n] = 0\n\n# defensive players should all be less than 0 at the start of the play\n# some aren't, let's set the ones greater than a yard off to 0\ndf.loc[\n    (df[\"x_from_scrimmage\"] > 1) & (~df[\"has_possession\"]), \"x_from_scrimmage\"\n] = 0\n\ndf[\"x_from_scrimmage_abs\"] = df[\"x_from_scrimmage\"].abs()\n","52b5d104":"# defense\ndefense_df = df.loc[~df[\"has_possession\"]].copy()\n\n# offense\noffense_df = df.loc[df[\"has_possession\"]].copy()\n","c0086f10":"def_min_x = defense_df[\"x_from_scrimmage_abs\"].min()\ndef_max_x = defense_df[\"x_from_scrimmage_abs\"].max()\n\noff_min_x = offense_df[\"x_from_scrimmage_abs\"].min()\noff_max_x = offense_df[\"x_from_scrimmage_abs\"].max()\n\nprint(def_min_x, def_max_x)\nprint(off_min_x, off_max_x)","cdec8c83":"x_dim = 100 \/\/ 2 \ny_dim = 53 \/\/ 2\n\ndefense_x_range = np.linspace(def_min_x, def_max_x, int(x_dim))\noffense_x_range = np.linspace(off_min_x, off_max_x, int(x_dim))\n\ny_range = np.linspace(df[\"y_from_ball\"].min(), df[\"y_from_ball\"].max(), y_dim)\n","77932428":"def get_closest(array, values):\n    # make sure array is a numpy array\n    array = np.array(array)\n\n    # get insert positions\n    idxs = np.searchsorted(array, values, side=\"left\")\n\n    # find indexes where previous index is closer\n    prev_idx_is_less = (idxs == len(array)) | (\n        np.fabs(values - array[np.maximum(idxs - 1, 0)])\n        < np.fabs(values - array[np.minimum(idxs, len(array) - 1)])\n    )\n    idxs[prev_idx_is_less] -= 1\n\n    # this returns the closest value from linspace\n    #return array[idxs]\n\n    # this returns the index of the closest value from linspace, which is really all we need, I think\n    return idxs\n","93a696ff":"defense_df[\"x_transformed\"] = get_closest(\n    defense_x_range, defense_df[\"x_from_scrimmage_abs\"]\n)\ndefense_df[\"y_transformed\"] = get_closest(y_range, defense_df[\"y_norm\"])\n\noffense_df[\"x_transformed\"] = get_closest(\n    offense_x_range, offense_df[\"x_from_scrimmage_abs\"]\n)\noffense_df[\"y_transformed\"] = get_closest(y_range, offense_df[\"y_norm\"])\n","87cededc":"# Set the field to be a grid\nempty_field = np.zeros((y_dim, x_dim))","4674228a":"def populate_field(gbdf, binary=False):\n    \"\"\"returns an array (field) with the dimensions (x_dim, y_dim)\n    populated with players locations at each x,y coordinate\n\n    Args:\n        gbdf pandas DataFrame: a groupby dataframe of the play dataframe\n        binary bool: if True, will return a binary field with 1s where players are, else sum up the number of players\n    \"\"\"\n    # remove the football from the field\n    gbdf = gbdf.loc[gbdf[\"team\"] != \"football\"]\n    # copy the empty field to populate it\n    populated_field = empty_field.copy()\n    x_idxs = gbdf[\"x_transformed\"].values\n    y_idxs = gbdf[\"y_transformed\"].values\n    if binary is True:\n        populated_field[y_idxs, x_idxs] = 1\n    else:\n        # results are accumulated for results w\/ more than one index :mind_blown:\n        np.add.at(populated_field, (y_idxs, x_idxs), 1)\n\n    # assert populated_field.sum() == 11\n    # if populated_field.sum() != 11:\n    #     print(populated_field.sum())\n    return populated_field.flatten()","b654df5f":"# boolean field\ndefense_sparse = defense_df.loc[defense_df[\"team\"] != \"football\"].groupby([\"gameId\", \"playId\"]).apply(populate_field, binary=True)\noffense_sparse = offense_df.loc[offense_df[\"team\"] != \"football\"].groupby([\"gameId\", \"playId\"]).apply(populate_field, binary=True)","800942b1":"# How lossy was the transformation to subspace?\n# Of ~20,000 plays, how many mapped all 11 players uniquely?\n\n# this was from .sum()\ndefense_sparse.apply(lambda row: row.sum()).value_counts()","f1e622df":"# How lossy was the transformation to subspace?\n# Of ~20,000 plays, how many mapped all 11 players uniquely?\noffense_sparse.apply(lambda row: row.sum()).value_counts()","dcef8a4c":"# field where the counts represent the number of players at each x,y coordinate\ndefense_sparse = defense_df.loc[defense_df[\"team\"] != \"football\"].groupby([\"gameId\", \"playId\", \"specialTeamsPlayType\", \"has_possession\"]).apply(populate_field, binary=False)\noffense_sparse = offense_df.loc[offense_df[\"team\"] != \"football\"].groupby([\"gameId\", \"playId\", \"specialTeamsPlayType\", \"has_possession\"]).apply(populate_field, binary=False)","4a075729":"# better be all 11\ndefense_sparse.apply(lambda row: row.sum()).value_counts()","a9ea6b91":"# better be all 11 \noffense_sparse.apply(lambda row: row.sum()).value_counts()","53448ef1":"defense_play_arrays = defense_sparse.copy()\noffense_play_arrays = offense_sparse.copy()","055db213":"# name the pandas series so we can merge them\ndefense_play_arrays.name = \"normalized_player_locations\"\noffense_play_arrays.name = \"normalized_player_locations\"","8727f299":"defense_play_arrays = defense_play_arrays.to_frame()\noffense_play_arrays = offense_play_arrays.to_frame()","e1e25d4d":"defense_players_df = pd.DataFrame(\n    defense_play_arrays[\"normalized_player_locations\"].tolist(),\n    index=defense_play_arrays.index,\n)\noffense_players_df = pd.DataFrame(\n    offense_play_arrays[\"normalized_player_locations\"].tolist(),\n    index=offense_play_arrays.index,\n)\n","ed543625":"# PUNT\ndefense_punt = defense_players_df.loc[\n    defense_players_df.index.get_level_values(\"specialTeamsPlayType\") == \"Punt\"\n]\noffense_punt = offense_players_df.loc[\n    offense_players_df.index.get_level_values(\"specialTeamsPlayType\") == \"Punt\"\n]\n\n# KICKOFF\ndefense_kickoff = defense_players_df.loc[\n    defense_players_df.index.get_level_values(\"specialTeamsPlayType\")\n    == \"Kickoff\"\n]\noffense_kickoff = offense_players_df.loc[\n    offense_players_df.index.get_level_values(\"specialTeamsPlayType\")\n    == \"Kickoff\"\n]\n\n# EXTRA POINT\ndefense_extra_point = defense_players_df.loc[\n    defense_players_df.index.get_level_values(\"specialTeamsPlayType\")\n    == \"Extra Point\"\n]\noffense_extra_point = offense_players_df.loc[\n    offense_players_df.index.get_level_values(\"specialTeamsPlayType\")\n    == \"Extra Point\"\n]\n\n# FIELD GOAL\ndefense_field_goal = defense_players_df.loc[\n    defense_players_df.index.get_level_values(\"specialTeamsPlayType\")\n    == \"Field Goal\"\n]\noffense_field_goal = offense_players_df.loc[\n    offense_players_df.index.get_level_values(\"specialTeamsPlayType\")\n    == \"Field Goal\"\n]\n","236b012c":"def umapify(\n    play_type_df,\n    umap__n_neighbors=133,\n    hdbscan__min_cluster_size=50,\n    hdbscan__min_samples=15,\n):\n    \"\"\"Apply UMAP and HDBSCAN to a DataFrame of player locations\n\n    Args:\n        play_type_df (DataFrame): A DataFrame of normalized player locations\n\n    Returns:\n        pandas DataFrame: A DataFrame of player locations in UMAP space\n    \"\"\"\n\n    umap = UMAP(\n        n_neighbors=umap__n_neighbors,\n        min_dist=0,\n        metric=\"euclidean\",\n        n_components=2,\n    )\n\n    umapdf = umap.fit_transform(play_type_df)\n    umapdf = pd.DataFrame(umapdf, index=play_type_df.index)\n    umapdf.columns = [\"component_1\", \"component_2\"]\n\n\n    umapdf = umapdf.merge(\n        # note this is the original df, which has play type\n        # keeps only one record per play, which is fine for play-level data\n        df.drop_duplicates(subset=[\"gameId\", \"playId\"]).set_index(\n            [\"gameId\", \"playId\", \"specialTeamsPlayType\", \"has_possession\"]\n        )[\n            [\"specialTeamsResult\"]\n            + scouting.drop(columns=[\"gameId\", \"playId\"]).columns.tolist()\n        ],\n        left_index=True,\n        right_index=True,\n        how=\"left\",\n    )\n\n    labels = hdbscan.HDBSCAN(\n        min_samples=hdbscan__min_samples,\n        min_cluster_size=hdbscan__min_cluster_size,\n    ).fit_predict(umapdf[[\"component_1\", \"component_2\"]])\n\n    umapdf[\"cluster\"] = labels\n\n    return umapdf\n","1f347bdc":"defense_punt_umap = umapify(\n    defense_punt,\n    umap__n_neighbors=55,\n    hdbscan__min_cluster_size=15,\n    hdbscan__min_samples=5,\n)\noffense_punt_umap = umapify(\n    offense_punt,\n    umap__n_neighbors=75,\n    hdbscan__min_cluster_size=35,\n    hdbscan__min_samples=15,\n)\n\ndefense_kickoff_umap = umapify(\n    defense_kickoff,\n    umap__n_neighbors=75,\n    hdbscan__min_cluster_size=75,\n    hdbscan__min_samples=15,\n)\noffense_kickoff_umap = umapify(\n    offense_kickoff,\n    umap__n_neighbors=75,\n    hdbscan__min_cluster_size=75,\n    hdbscan__min_samples=15,\n)\n\ndefense_extra_point_umap = umapify(\n    defense_extra_point,\n    umap__n_neighbors=500,\n    hdbscan__min_cluster_size=50,\n    hdbscan__min_samples=15,\n)\noffense_extra_point_umap = umapify(\n    offense_extra_point,\n    umap__n_neighbors=75,\n    hdbscan__min_cluster_size=50,\n    hdbscan__min_samples=15,\n)\n\ndefense_field_goal_umap = umapify(\n    defense_field_goal,\n    umap__n_neighbors=150,\n    hdbscan__min_cluster_size=50,\n    hdbscan__min_samples=15,\n)\noffense_field_goal_umap = umapify(\n    offense_field_goal,\n    umap__n_neighbors=75,\n    hdbscan__min_cluster_size=50,\n    hdbscan__min_samples=15,\n)\n","251c0598":"def plot_clusters(umapdf):\n    fig, ax = plt.subplots(figsize=(8, 8))\n    for cluster in sorted(umapdf.cluster.unique()):\n        ax.scatter(\n            umapdf.loc[umapdf.cluster == cluster, \"component_1\"],\n            umapdf.loc[umapdf.cluster == cluster, \"component_2\"],\n            s=5,\n            alpha=0.5,\n            label=cluster,\n            color=sns.color_palette(\"tab20\")[cluster],\n        )\n    # ax.grid();\n    ax.legend();\n\n    if umapdf.index.get_level_values(\"has_possession\").unique()[0]:\n        side = \"Offense\"\n    else:\n        side = \"Defense\"\n    n_plays = umapdf.shape[0]\n    play_type = umapdf.index.get_level_values(\"specialTeamsPlayType\").unique()[0]\n    ax.set_title(f\"Clusters of {n_plays} {side} {play_type} Plays\");","80a2fdad":"for play_type_umap in [\n    defense_punt_umap,\n    offense_punt_umap,\n    defense_kickoff_umap,\n    offense_kickoff_umap,\n    defense_extra_point_umap,\n    offense_extra_point_umap,\n    defense_field_goal_umap,\n    offense_field_goal_umap,\n]:  \n    plot_clusters(play_type_umap)\n","167e8305":"play_type_dfs = [\n    defense_punt,\n    offense_punt,\n    defense_kickoff,\n    offense_kickoff,\n    defense_extra_point,\n    offense_extra_point,\n    defense_field_goal,\n    offense_field_goal,\n]\nplay_type_df_umaps = [\n    defense_punt_umap,\n    offense_punt_umap,\n    defense_kickoff_umap,\n    offense_kickoff_umap,\n    defense_extra_point_umap,\n    offense_extra_point_umap,\n    defense_field_goal_umap,\n    offense_field_goal_umap,\n]\n\nfor play_type_df, play_type_df_umap in zip(play_type_dfs, play_type_df_umaps):\n    has_possession = play_type_df.index.get_level_values(\"has_possession\").unique()[0]\n    play_type = play_type_df.index.get_level_values(\"specialTeamsPlayType\").unique()[0]\n    if has_possession:\n        side = \"Offense\"\n    else:\n        side = \"Defense\"\n\n    clusters = play_type_df.merge(\n    play_type_df_umap[\"cluster\"], left_index=True, right_index=True\n    )\n    clusters_reshaped = clusters.groupby(\"cluster\").apply(\n        lambda row: row[range(1300)].mean()\n    )\n    clusters_reshaped = clusters_reshaped[\n        range(1300)\n    ].apply(lambda row: row.values.reshape(y_dim, x_dim), axis=1)\n\n    for cluster, cluster_array in clusters_reshaped.iteritems():\n        fig, ax = plt.subplots(figsize=(10, 4))\n        ax.set_title(f\"{play_type} {side} Cluster {cluster} ({clusters['cluster'].value_counts()[cluster]} Plays)\")\n        sns.heatmap(cluster_array, ax=ax)","d8f2cb16":"# from svgpathtools import svg2paths\n# from svgpath2mpl import parse_path\n# football, football_attributes = svg2paths(\"american-football.svg\")\n# football_marker = parse_path(football_attributes[0][\"d\"])\n","a5fa1e7b":"def plot_play(gameid, playid, normdf):\n    play = normdf.loc[(normdf[\"gameId\"] == gameid) & (normdf[\"playId\"] == playid)]\n\n    fig = plt.figure(figsize=(12, 5))\n    ax = plt.axes(xlim=(0, 120), ylim=(0, 53))\n\n\n    football = play.loc[play[\"team\"] == \"football\"]\n\n    ax.scatter(play[\"x_from_scrimmage_abs\"], play[\"y_norm\"], color=\"#fb8500\", s=150)\n    ax.scatter(\n        football[\"x_from_scrimmage_abs\"],\n        football[\"y_norm\"],\n        marker='^',\n        color=\"brown\",\n        s=250,\n    )\n\n    ax.set_yticks([])\n    ax.set_xticks([30, 60, 90])\n    ax.set_xticklabels([\"20\", \"50\", \"20\"])\n    ax.vlines(10, 0, 53.3, color=\"black\", linestyle=\"-\", alpha=0.5)\n    ax.vlines(60, 0, 53.3, color=\"black\", linestyle=\"-\", alpha=0.5)\n    ax.vlines(110, 0, 53.3, color=\"black\", linestyle=\"-\", alpha=0.5)\n\n\n    ","4333c988":"for cluster in sorted(offense_extra_point_umap.cluster.unique()):\n    print(f\"Cluster {cluster}\")\n    cluster_plays = offense_extra_point_umap.loc[offense_extra_point_umap[\"cluster\"] == cluster].reset_index()\n    gameids = cluster_plays[\"gameId\"]\n    playids = cluster_plays[\"playId\"]\n    \n    for i, (gameid, playid) in enumerate(zip(gameids, playids)):\n        if i == 5:\n            break\n        plot_play(gameid, playid, defense_df)\n","8afe6bbf":"fig, ax = plt.subplots(figsize=(8, 8))\n\nax.scatter(\n    offense_kickoff_umap.loc[\n        offense_kickoff_umap[\"kickoffReturnFormation\"] == \"8-0-2\", \"component_1\"\n    ],\n    offense_kickoff_umap.loc[\n        offense_kickoff_umap[\"kickoffReturnFormation\"] == \"8-0-2\", \"component_2\"\n    ],\n    s=5,\n    alpha=0.5,\n    color=\"lightgrey\",\n    label=\"8-0-2\",\n)\nax.scatter(\n    offense_kickoff_umap.loc[\n        offense_kickoff_umap[\"kickoffReturnFormation\"] == \"8-0-1\", \"component_1\"\n    ],\n    offense_kickoff_umap.loc[\n        offense_kickoff_umap[\"kickoffReturnFormation\"] == \"8-0-1\", \"component_2\"\n    ],\n    s=5,\n    alpha=0.5,\n    label=\"8-0-1\",\n)\n\n# Hide the right and top spines\nax.spines[\"right\"].set_visible(False)\nax.spines[\"top\"].set_visible(False)\nax.legend();\n","91a38ea5":"defense_kickoff_umap[\"kickType\"].value_counts()","ef0482a6":"fig, ax = plt.subplots(figsize=(8, 8))\n\nax.scatter(\n    defense_kickoff_umap.loc[\n        defense_kickoff_umap[\"kickType\"] == \"D\", \"component_1\"\n    ],\n    defense_kickoff_umap.loc[\n        defense_kickoff_umap[\"kickType\"] == \"D\", \"component_2\"\n    ],\n    s=5,\n    alpha=0.5,\n    color=\"lightgrey\",\n    label=\"Deep\",\n)\n\nax.scatter(\n    defense_kickoff_umap.loc[\n        defense_kickoff_umap[\"kickType\"] == \"O\", \"component_1\"\n    ],\n    defense_kickoff_umap.loc[\n        defense_kickoff_umap[\"kickType\"] == \"O\", \"component_2\"\n    ],\n    s=5,\n    alpha=0.5,\n    label=\"Obvious onside\",\n)\n\n\n# Hide the right and top spines\nax.spines[\"right\"].set_visible(False)\nax.spines[\"top\"].set_visible(False)\nax.legend();\n","dca8a38f":"fig, ax = plt.subplots(figsize=(8, 8))\n\nax.scatter(\n    defense_kickoff_umap.loc[\n        defense_kickoff_umap[\"kickType\"] == \"D\", \"component_1\"\n    ],\n    defense_kickoff_umap.loc[\n        defense_kickoff_umap[\"kickType\"] == \"D\", \"component_2\"\n    ],\n    s=5,\n    alpha=0.5,\n    color=\"lightgrey\",\n    label=\"Deep\",\n)\n\nax.scatter(\n    defense_kickoff_umap.loc[\n        defense_kickoff_umap[\"kickType\"] == \"F\", \"component_1\"\n    ],\n    defense_kickoff_umap.loc[\n        defense_kickoff_umap[\"kickType\"] == \"F\", \"component_2\"\n    ],\n    s=5,\n    alpha=0.5,\n    label=\"Flat\",\n)\n\nax.scatter(\n    defense_kickoff_umap.loc[\n        defense_kickoff_umap[\"kickType\"] == \"O\", \"component_1\"\n    ],\n    defense_kickoff_umap.loc[\n        defense_kickoff_umap[\"kickType\"] == \"O\", \"component_2\"\n    ],\n    s=5,\n    alpha=0.5,\n    label=\"Obvious onside\",\n)\n\nax.scatter(\n    defense_kickoff_umap.loc[\n        defense_kickoff_umap[\"kickType\"] == \"P\", \"component_1\"\n    ],\n    defense_kickoff_umap.loc[\n        defense_kickoff_umap[\"kickType\"] == \"P\", \"component_2\"\n    ],\n    s=5,\n    alpha=0.5,\n    label=\"Pooch\",\n)\n\nax.scatter(\n    defense_kickoff_umap.loc[\n        defense_kickoff_umap[\"kickType\"] == \"Q\", \"component_1\"\n    ],\n    defense_kickoff_umap.loc[\n        defense_kickoff_umap[\"kickType\"] == \"Q\", \"component_2\"\n    ],\n    s=5,\n    alpha=0.5,\n    label=\"Squib\",\n)\n\nax.scatter(\n    defense_kickoff_umap.loc[\n        defense_kickoff_umap[\"kickType\"] == \"K\", \"component_1\"\n    ],\n    defense_kickoff_umap.loc[\n        defense_kickoff_umap[\"kickType\"] == \"K\", \"component_2\"\n    ],\n    s=5,\n    alpha=0.5,\n    label=\"Free Kick\",\n)\n\n# Hide the right and top spines\nax.spines[\"right\"].set_visible(False)\nax.spines[\"top\"].set_visible(False)\nax.legend();\n","f8fa3997":"defense_punt_umap[\"specialTeamsResult\"].value_counts()","b50f035b":"fig, ax = plt.subplots(figsize=(8, 8))\n\nresult_type = \"Blocked Punt\"\n\nax.scatter(\n    defense_punt_umap.loc[\n        defense_punt_umap[\"specialTeamsResult\"] != result_type, \"component_1\"\n    ],\n    defense_punt_umap.loc[\n        defense_punt_umap[\"specialTeamsResult\"] != result_type, \"component_2\"\n    ],\n    s=5,\n    alpha=0.5,\n    color=\"lightgrey\",\n    label=\"All punt results (not blocked)\",\n)\nax.scatter(\n    defense_punt_umap.loc[\n        defense_punt_umap[\"specialTeamsResult\"] == result_type, \"component_1\"\n    ],\n    defense_punt_umap.loc[\n        defense_punt_umap[\"specialTeamsResult\"] == result_type, \"component_2\"\n    ],\n    s=10,\n    label=\"Blocked Punt\",\n)\n\n# Hide the right and top spines\nax.spines[\"right\"].set_visible(False)\nax.spines[\"top\"].set_visible(False)\n","3d17b2f6":"fig, ax = plt.subplots(figsize=(8, 8))\n\nresult_type = \"Blocked Punt\"\n\nax.scatter(\n    offense_punt_umap.loc[\n        offense_punt_umap[\"specialTeamsResult\"] != result_type, \"component_1\"\n    ],\n    offense_punt_umap.loc[\n        offense_punt_umap[\"specialTeamsResult\"] != result_type, \"component_2\"\n    ],\n    s=5,\n    alpha=0.5,\n    color=\"lightgrey\",\n    label=\"All punt results (not blocked)\",\n)\nax.scatter(\n    offense_punt_umap.loc[\n        offense_punt_umap[\"specialTeamsResult\"] == result_type, \"component_1\"\n    ],\n    offense_punt_umap.loc[\n        offense_punt_umap[\"specialTeamsResult\"] == result_type, \"component_2\"\n    ],\n    s=10,\n    label=\"Blocked Punt\",\n)\n\n# Hide the right and top spines\nax.spines[\"right\"].set_visible(False)\nax.spines[\"top\"].set_visible(False)\n","3e4818d7":"fig, ax = plt.subplots(figsize=(8, 8))\n\n# normal style\nax.scatter(\n    defense_punt_umap.loc[\n        defense_punt_umap[\"kickType\"] == \"N\", \"component_1\"\n    ],\n    defense_punt_umap.loc[\n        defense_punt_umap[\"kickType\"] == \"N\", \"component_2\"\n    ],\n    s=5,\n    alpha=0.5,\n    label=\"Normal\",\n    color=\"lightgrey\",\n)\n# aussie style\nax.scatter(\n    defense_punt_umap.loc[\n        defense_punt_umap[\"kickType\"] == \"A\", \"component_1\"\n    ],\n    defense_punt_umap.loc[\n        defense_punt_umap[\"kickType\"] == \"A\", \"component_2\"\n    ],\n    s=5,\n    alpha=0.5,\n    label=\"Aussie Style\"\n)\nax.scatter(\n    defense_punt_umap.loc[\n        defense_punt_umap[\"kickType\"] == \"R\", \"component_1\"\n    ],\n    defense_punt_umap.loc[\n        defense_punt_umap[\"kickType\"] == \"R\", \"component_2\"\n    ],\n    s=5,\n    alpha=0.5,\n    label=\"Rugby\"\n)\n\n# Hide the right and top spines\nax.spines[\"right\"].set_visible(False)\nax.spines[\"top\"].set_visible(False)\nax.legend();\n","3bfcb26c":"## Punt -- Blocked punts defense","12c6ac0e":"## Kickoff - kickType defense","2ab03e99":"# Normalize x from line of scrimmage and y from ball","e841639a":"# Insights from clusters?","18d23a25":"# Visualize a few plays in each cluster","090570e8":"## kickType for punts","7204f2cd":"# Visualize the mean formation in the subspace (normed field)","e5a9a6f6":"# Normalize the x,y coordinates","fff1c562":"## Kickoff -- formation dectection comparison offense","1b113001":"# Assign possession","eebc3e76":"# Cluster formations\n\nI only had a couple days to work on this over the holiday, but I wanted to upload.\n\n1. Invert R to L plays\n2. Line of scrimmage abs val xy coordinates\n3. Shrink field\n4. Fill players on new field \n\nDetect Offensive and Defensive formations for each play type (kickoff, punt, extra point, and field goal)","1230cd75":"# Reduce the dimensionality of the populated field and cluster the result","6f8cb533":"# Populate an empty array (field) with players' norm x,y","a3dd6342":"# Separate offense and defense","f4b7cc98":"## Punt -- Blocked punts offense"}}