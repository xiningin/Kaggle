{"cell_type":{"d0a9ecb1":"code","4e6e6049":"code","d590b2ba":"code","8642f3ae":"code","50caf0f0":"code","255e9912":"code","3ae936b9":"code","2a68e84b":"code","e4b77a08":"code","73e02f9b":"code","ae5e0c9d":"code","fb32aef7":"code","c1058d34":"code","3d861f35":"code","b317a1eb":"code","31067fa4":"code","53fe09d7":"code","2025a972":"code","8278dfe8":"code","72af0db6":"code","11ab2811":"code","28e70daf":"code","20c9d04e":"code","a93fba01":"code","0a476202":"code","ef64c395":"code","61d45b8e":"code","0263b629":"code","6c2351e5":"code","f4909278":"code","0030fd48":"code","674475a0":"markdown","b91f39fb":"markdown","2b0de700":"markdown","6cca4c85":"markdown","e902bc82":"markdown","6c786d41":"markdown","09e30581":"markdown","2a57b1d2":"markdown","1e73eb61":"markdown","21f509b3":"markdown","ddd1fe95":"markdown","e49894c4":"markdown","4da9806a":"markdown","8029ca17":"markdown","9032e95d":"markdown"},"source":{"d0a9ecb1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4e6e6049":"import numpy as np\nimport pandas as pd\nfrom math import sqrt\nimport matplotlib.pyplot as plt\n%matplotlib inline","d590b2ba":"movie = pd.read_csv('\/kaggle\/input\/movielens-20m-dataset\/movie.csv')\nrating= pd.read_csv('\/kaggle\/input\/movielens-20m-dataset\/rating.csv')","8642f3ae":"movie.head()","50caf0f0":"rating.head()","255e9912":"movie['year'] = movie.title.str.extract('(\\(\\d\\d\\d\\d\\))',expand=False)\n#Removing the parentheses\nmovie['year'] = movie.year.str.extract('(\\d\\d\\d\\d)',expand=False)","3ae936b9":"#Removing the years from the 'title' column\nmovie['title'] = movie.title.str.replace('(\\(\\d\\d\\d\\d\\))', '')\n#Applying the strip function to get rid of any ending whitespace characters that may have appeared\nmovie['title'] = movie['title'].apply(lambda x: x.strip())","2a68e84b":"movie.head()","e4b77a08":"movie.drop(columns=['genres'], inplace=True)","73e02f9b":"movie.head()","ae5e0c9d":"rating.drop(columns=['timestamp'],inplace=True)","fb32aef7":"rating.head()","c1058d34":"user = [\n            {'title':'Breakfast Club, The', 'rating':4},\n            {'title':'Toy Story', 'rating':2.5},\n            {'title':'Jumanji', 'rating':3},\n            {'title':\"Pulp Fiction\", 'rating':4.5},\n            {'title':'Akira', 'rating':5}\n         ] \ninputMovie = pd.DataFrame(user)\ninputMovie","3d861f35":"#Filtering out the movies by title\nId = movie[movie['title'].isin(inputMovie['title'].tolist())]\n#Then merging it so we can get the movieId. It's implicitly merging it by title.\ninputMovie = pd.merge(Id, inputMovie)\n#Dropping information we won't use from the input dataframe\ninputMovie = inputMovie.drop('year', 1)\ninputMovie","b317a1eb":"#Filtering out users that have watched movies that the input has watched and storing it\nusers = rating[rating['movieId'].isin(inputMovie['movieId'].tolist())]\nusers.head()","31067fa4":"users.shape","53fe09d7":"#Groupby creates several sub dataframes where they all have the same value in the column specified as the parameter\nuserSubsetGroup = users.groupby(['userId'])","2025a972":"#showing one such group example by getting all the users of a particular uderId\nuserSubsetGroup.get_group(1130)","8278dfe8":"#Sorting it so users with movie most in common with the input will have priority\nuserSubsetGroup = sorted(userSubsetGroup,  key=lambda x: len(x[1]), reverse=True)","72af0db6":"userSubsetGroup[0:3]","11ab2811":"userSubsetGroup = userSubsetGroup[0:100]","28e70daf":"#Store the Pearson Correlation in a dictionary, where the key is the user Id and the value is the coefficient\npearsonCorDict = {}\n\n#For every user group in our subset\nfor name, group in userSubsetGroup:\n    #Let's start by sorting the input and current user group so the values aren't mixed up later on\n    group = group.sort_values(by='movieId')\n    inputMovie = inputMovie.sort_values(by='movieId')\n    #Get the N for the formula\n    n = len(group)\n    #Get the review scores for the movies that they both have in common\n    temp = inputMovie[inputMovie['movieId'].isin(group['movieId'].tolist())]\n    #And then store them in a temporary buffer variable in a list format to facilitate future calculations\n    tempRatingList = temp['rating'].tolist()\n    #put the current user group reviews in a list format\n    tempGroupList = group['rating'].tolist()\n    #Now let's calculate the pearson correlation between two users, so called, x and y\n    Sxx = sum([i**2 for i in tempRatingList]) - pow(sum(tempRatingList),2)\/float(n)\n    Syy = sum([i**2 for i in tempGroupList]) - pow(sum(tempGroupList),2)\/float(n)\n    Sxy = sum( i*j for i, j in zip(tempRatingList, tempGroupList)) - sum(tempRatingList)*sum(tempGroupList)\/float(n)\n    \n    #If the denominator is different than zero, then divide, else, 0 correlation.\n    if Sxx != 0 and Syy != 0:\n        pearsonCorDict[name] = Sxy\/sqrt(Sxx*Syy)\n    else:\n        pearsonCorDict[name] = 0\n","20c9d04e":"pearsonCorDict.items()","a93fba01":"pearsonDF = pd.DataFrame.from_dict(pearsonCorDict, orient='index')\npearsonDF.columns = ['similarityIndex']\npearsonDF['userId'] = pearsonDF.index\npearsonDF.index = range(len(pearsonDF))\npearsonDF.head()","0a476202":"topUsers=pearsonDF.sort_values(by='similarityIndex', ascending=False)[0:50]\ntopUsers.head()","ef64c395":"topUsersRating=topUsers.merge(rating, left_on='userId', right_on='userId', how='inner')\ntopUsersRating.head()","61d45b8e":"#Multiplies the similarity by the user's ratings\ntopUsersRating['weightedRating'] = topUsersRating['similarityIndex']*topUsersRating['rating']\ntopUsersRating.head()","0263b629":"#Applies a sum to the topUsers after grouping it up by userId\ntempTopUsersRating = topUsersRating.groupby('movieId').sum()[['similarityIndex','weightedRating']]\ntempTopUsersRating.columns = ['sum_similarityIndex','sum_weightedRating']\ntempTopUsersRating.head()","6c2351e5":"#Creates an empty dataframe\nrecommendation_df = pd.DataFrame()\n#Now we take the weighted average\nrecommendation_df['weighted average recommendation score'] = tempTopUsersRating['sum_weightedRating']\/tempTopUsersRating['sum_similarityIndex']\nrecommendation_df['movieId'] = tempTopUsersRating.index\nrecommendation_df.head()","f4909278":"recommendation_df = recommendation_df.sort_values(by='weighted average recommendation score', ascending=False)\nrecommendation_df.head(10)","0030fd48":"movie.loc[movie['movieId'].isin(recommendation_df.head(10)['movieId'].tolist())]","674475a0":"First we create the new Year column in the movie dataframe.","b91f39fb":"Now, coming to the ratings dataframe, we have the movieId column that is common with the movie dataframe. Each user has given multiple ratings for different movies. The column Timestamp is not needed for the recommendation system. So we can drop it. ","2b0de700":"Collaborative filtering doesn't recommend based on the features of the movie. The recommendation is based on the likes and dislikes or ratings of the neighbours or other users. \nSo we will drop the genre column, since there is no use of it. ","6cca4c85":"**Finding the users who have seen the same movies from the rating dataframe**\nWith the movie ID's in our input, we can now get the subset of users that have watched and reviewed the movies in our input.","e902bc82":"<h3>**Movie Recommendation using Collaborative Filtering**<\/h3>\n\nAlso known as User-User Filtering. \n\nIt uses other users to recommend items to the input user. It attempts to find users that have similar preferences and opinions as the input and then recommends items that they have liked to the input. There are several methods of finding similar users (Even some making use of Machine Learning), and the one we will be using here is going to be based on the Pearson Correlation Function.\n\n\n\n\n**Please upvote if you find this helpful**\n","6c786d41":"Quick view of the two dataframes, the rows and the columns","09e30581":"The technique is called Collaborative Filtering, which is also known as User-User Filtering. As hinted by its alternate name, this technique uses other users to recommend items to the input user. It attempts to find users that have similar preferences and opinions as the input and then recommends items that they have liked to the input. There are several methods of finding similar users (Even some making use of Machine Learning), and the one we will be using here is going to be based on the Pearson Correlation Function.","2a57b1d2":"The process for creating a User Based recommendation system is as follows:\n- Select a user with the movies the user has watched\n- Based on his rating to movies, find the top X neighbours \n- Get the watched movie record of the user for each neighbour.\n- Calculate a similarity score using some formula\n- Recommend the items with the highest score","1e73eb61":"Now removing the year from the title in the Title column. ","21f509b3":"**Similarity of users to input user**\nNext, we are going to compare all users  to our specified user and find the one that is most similar.\nwe're going to find out how similar each user is to the input through the Pearson Correlation Coefficient. It is used to measure the strength of a linear association between two variables. The formula for finding this coefficient between sets X and Y with N values can be seen in the image below.\n\nWhy Pearson Correlation?\n\nPearson correlation is invariant to scaling, i.e. multiplying all elements by a nonzero constant or adding any constant to all elements. For example, if you have two vectors X and Y,then, pearson(X, Y) == pearson(X, 2 * Y + 3). This is a pretty important property in recommendation systems because for example two users might rate two series of items totally different in terms of absolute rates, but they would be similar users (i.e. with similar ideas) with similar rates in various scales .\n\n![alt text](https:\/\/wikimedia.org\/api\/rest_v1\/media\/math\/render\/svg\/bd1ccc2979b0fd1c1aec96e386f686ae874f9ec0 \"Pearson Correlation\") \n\nThe values given by the formula vary from r = -1 to r = 1, where 1 forms a direct correlation between the two entities (it means a perfect positive correlation) and -1 forms a perfect negative correlation.\n\nIn our case, a 1 means that the two users have similar tastes while a -1 means the opposite.","ddd1fe95":"Reading the datasets that we have. We will need movies and the ratings files. ","e49894c4":"Using pandas' replace function, we remove the year from the title in the movie dataframe and add a separate year column.\nThis is done using regular expressions. Find a year stored between parentheses. We specify the parantheses so we don't conflict with movies that have years in their titles.","4da9806a":"We need to now add the movieId column from the movie dataframe into the inputMovie Dataframe. \nFirst filter out the rows that contain the input movies' title and then merging this subset with the input dataframe. We also drop unnecessary columns for the input to save memory space.","8029ca17":"**Rating of selected users to all movies**\nWe're going to do this by taking the weighted average of the ratings of the movies using the Pearson Correlation as the weight. But to do this, we first need to get the movies watched by the users in our pearsonDF from the ratings dataframe and then store their correlation in a new column called _similarityIndex\". This is achieved below by merging of these two tables.","9032e95d":"multiply the movie rating by its weight (The similarity index), then sum up the new ratings and divide it by the sum of the weights.\n\nWe can easily do this by simply multiplying two columns, then grouping up the dataframe by movieId and then dividing two columns:"}}