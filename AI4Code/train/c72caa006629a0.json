{"cell_type":{"15c6fda2":"code","8278501c":"code","1261beb1":"code","498cd93d":"code","06525e78":"code","3da18a65":"code","3745a881":"code","1116a5d1":"code","e8e5bc87":"code","5bbe3372":"code","3b2601c6":"markdown","fd7e1007":"markdown","c530054a":"markdown","973c349f":"markdown","8c33e748":"markdown","fab25c53":"markdown"},"source":{"15c6fda2":"import networkx as nx\nfrom collections import deque\nimport time\nfrom matplotlib import pyplot as plt\nplt.rcParams[\"figure.figsize\"] = (20,10)","8278501c":"G = nx.random_graphs.fast_gnp_random_graph(100, 0.1)","1261beb1":"def desenhar_grafo(G):\n    pos = nx.spring_layout(G)\n    nx.draw_networkx_nodes(G, pos, node_size=500, alpha=0.7)\n    nx.draw_networkx_labels(G, pos)\n    nx.draw_networkx_edges(G, pos, width=1.0, alpha=0.4)\ndesenhar_grafo(G)","498cd93d":"G.nodes","06525e78":"G.edges","3da18a65":"def encontrar_noh_bfs(grafo, inicial, objetivo):\n    \n    # cria a lista de n\u00f3s visitados\n    visitados = []\n    # inicializa a fila do caminho com o n\u00f3 inicial\n    fila = [inicial]\n    \n    # enquanto a fila contiver elementos, o loop percorre os demais caminhos\n    while fila:\n        # retira o \u00faltimo n\u00f3 da fila\n        noh = fila.pop(0)\n        # se o n\u00f3 n\u00e3o tinha sido visitado ele \u00e9 acrescentado \u00e0 lista de n\u00f3s visitados\n        if noh not in visitados:\n            visitados.append(noh)            \n            for aresta in grafo.edges:\n                if aresta[0] == noh:\n                    fila.append(aresta[1])\n                elif aresta[1] == noh:\n                    fila.append(aresta[0])\n        # se o n\u00f3 objetivo \u00e9 encontrado a fun\u00e7\u00e3o retorna a lista com os n\u00f3s visitados at\u00e9 aquele momento\n        if noh == objetivo:\n                return visitados\n    return []","3745a881":"encontrar_noh_bfs(G, 0, 1)","1116a5d1":"def encontrar_noh_dfs(grafo, inicial, objetivo):\n    \n    # inicializa a lista do caminho com o n\u00f3 inicial\n    lista_caminho = [[inicial]]\n    \n    # esvazia as listas que retornarem \"false\", de forma que o loop continua enquanto houver caminhos a serem checados\n    while lista_caminho:\n        \n        # retira o \u00faltimo caminho da lista de caminhos\n        caminho = lista_caminho.pop()\n        \n        # se o \u00faltimo n\u00f3 do caminho \u00e9 o objetivo, foi encontrado o caminho correto\n        ultimo_noh = caminho[-1]\n        if ultimo_noh == objetivo:  \n            return caminho\n        \n        # se o \u00faltimo n\u00f3 n\u00e3o \u00e9 o objetivo, s\u00e3o acrescentados novos caminhos\n        else:\n            for noh in grafo[ultimo_noh]:\n                if noh not in caminho:\n                    # cria um novo caminho terminando com o n\u00f3 vizinho\n                    caminho_novo = caminho + [noh]\n                    # acrescenta o novo caminho \u00e0 list de novos caminhos\n                    lista_caminho.append(caminho_novo) ","e8e5bc87":"encontrar_noh_dfs(G, 0,1)","5bbe3372":"inicia_tempo_bfs = time.time_ns()\nencontrar_noh_bfs(G, 0,1)\ntermina_tempo_bfs = time.time_ns()\ntempo_bfs = termina_tempo_bfs - inicia_tempo_bfs\nprint(\"Tempo para a busca em largura: {} nanosegundos.\".format(tempo_bfs))   \ninicia_tempo_dfs = time.time_ns()\nencontrar_noh_dfs(G, 0,1)\ntermina_tempo_dfs = time.time_ns()\ntempo_dfs = termina_tempo_dfs - inicia_tempo_dfs\nprint(\"Tempo para a busca em profundidade: {} nanosegundos.\".format(tempo_dfs))\ninicia_tempo_dijkstra = time.time_ns()\nnx.dijkstra_path(G,0,1)\ntermina_tempo_dijkstra = time.time_ns()\ntempo_dijkstra = termina_tempo_dijkstra - inicia_tempo_dijkstra\nprint(\"Tempo para a busca em dijkstra: {} nanosegundos.\".format(tempo_dijkstra))\nprint(\"Propor\u00e7\u00e3o tempo buscas em largura \/ dijkstra: {0:.2f} vezes.\".format(tempo_bfs\/tempo_dijkstra))\nprint(\"Propor\u00e7\u00e3o tempo buscas em profundidade \/ dijkstra: {0:.2f} vezes.\".format(tempo_dfs\/tempo_dijkstra))","3b2601c6":"# Grafos","fd7e1007":"## Busca em Largura","c530054a":"Fonte de pesquisa: https:\/\/medium.com\/geekculture\/breadth-first-search-in-python-822fb97e0775","973c349f":"## Cria\u00e7\u00e3o","8c33e748":"## Busca em Profundidade","fab25c53":"## Compara\u00e7\u00f5es"}}