{"cell_type":{"628b8bf2":"code","ce4c8bd6":"code","f32d9742":"code","1e006d63":"code","45150ce8":"code","cc20e2ac":"code","6cc32319":"code","00cbc9e2":"code","78d82084":"code","f00582cb":"code","e4492dff":"code","d4620de6":"code","9b7b27ed":"code","1e2156a6":"code","323b7569":"code","155be045":"code","08b373be":"code","2941ac28":"code","ddc1292d":"code","42b1c720":"code","8a5be1b8":"code","5dc88b8f":"code","6c94f320":"code","167308b9":"code","af55a1e8":"code","6a93c538":"code","c7f29b83":"code","db12975f":"code","24f5724e":"code","d0059d50":"code","dfba853e":"code","09b75076":"markdown","ad314506":"markdown","2c01170d":"markdown","5934f36f":"markdown","262a96c1":"markdown","afc633d5":"markdown","ebc6cf07":"markdown","902c6240":"markdown","ef93292f":"markdown","db474c7a":"markdown","643ab937":"markdown","e8619aec":"markdown","f498c427":"markdown","5a1d4726":"markdown","945d3d25":"markdown"},"source":{"628b8bf2":"import numpy as np \nimport pandas as pd\nimport os\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm_notebook\nimport seaborn as sns\n%matplotlib inline \nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly import tools\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\n","ce4c8bd6":"data_red_df = pd.read_csv(\"\/kaggle\/input\/banksim1\/bsNET140513_032310.csv\")\ndata_df = pd.read_csv(\"\/kaggle\/input\/banksim1\/bs140513_032310.csv\")","f32d9742":"print(data_red_df.shape)","1e006d63":"print(data_df.shape)","45150ce8":"data_df.head()","cc20e2ac":"data_red_df.head()","6cc32319":"print(f\"unique customers: {data_df.customer.nunique()}\")\nprint(f\"unique merchants: {data_df.merchant.nunique()}\")\nprint(f\"unique age: {data_df.age.nunique()}\")\nprint(f\"unique gender: {data_df.gender.nunique()}\")\nprint(f\"unique zipCode Origin: {data_df.zipcodeOri.nunique()}\")\nprint(f\"unique zipCode Merchant: {data_df.zipMerchant.nunique()}\")\nprint(f\"unique category: {data_df.category.nunique()}\")\nprint(f\"unique amount: {data_df.amount.nunique()}\")\nprint(f\"unique fraud: {data_df.fraud.nunique()}\")","00cbc9e2":"print(f\"unique Source: {data_red_df.Source.nunique()}\")\nprint(f\"unique Target: {data_red_df.Target.nunique()}\")\nprint(f\"unique Weight: {data_red_df.Weight.nunique()}\")\nprint(f\"unique typeTrans: {data_red_df.typeTrans.nunique()}\")\nprint(f\"unique fraud: {data_red_df.fraud.nunique()}\")","78d82084":"def plot_count(df, feature, title='', size=2):\n    f, ax = plt.subplots(1,1, figsize=(3*size,2*size))\n    total = float(len(df))\n    sns.countplot(df[feature],order = df[feature].value_counts().index, palette='Set3')\n    plt.title(title)\n    if(size > 2):\n        plt.xticks(rotation=90, size=8)\n    for p in ax.patches:\n        height = p.get_height()\n        ax.text(p.get_x()+p.get_width()\/2.,\n                height + 3,\n                '{:1.2f}%'.format(100*height\/total),\n                ha=\"center\") \n    plt.show()","f00582cb":"plot_count(data_df, 'age', 'Distribution of age (count & percent)', size=2.5)","e4492dff":"plot_count(data_df, 'gender', 'Distribution of gender (count & percent)')","d4620de6":"plot_count(data_df, 'category', 'Distribution of category (count & percent)', size=4)","9b7b27ed":"temp = data_df[\"fraud\"].value_counts()\ndf = pd.DataFrame({'fraud': temp.index,'values': temp.values})\n\ntrace = go.Bar(\n    x = df['fraud'],y = df['values'],\n    name=\"Payments fraud - data unbalance (Not fraud = 0, Fraud = 1)\",\n    marker=dict(color=\"Red\"),\n    text=df['values']\n)\ndata = [trace]\nlayout = dict(title = 'Payments Fraud - data unbalance (Not fraud = 0, Fraud = 1)',\n          xaxis = dict(title = 'Fraud', showticklabels=True), \n          yaxis = dict(title = 'Number of transactions'),\n          hovermode = 'closest',width=600\n         )\nfig = dict(data=data, layout=layout)\niplot(fig, filename='class')","1e2156a6":"def plot_distplot_grouped(df, feature):\n    classes = list(df[feature].unique())\n    print(classes)\n    group_labels = []     \n    hist_data = []\n    for item in classes:\n        crt_class = df.loc[df[feature]==item][\"step\"]\n        group_labels.append(f\"{item}\")\n        hist_data.append(crt_class)\n    fig = ff.create_distplot(hist_data, group_labels, show_hist=False, show_rug=False)\n    fig['layout'].update(title=f'Payments Transactions Time Density Plot - grouped by `{feature}`', xaxis=dict(title='Time [step]'))\n    iplot(fig, filename='dist_only')     ","323b7569":"plot_distplot_grouped(data_df, 'fraud')","155be045":"plot_distplot_grouped(data_df, 'age')","08b373be":"plot_distplot_grouped(data_df, 'gender')","2941ac28":"plot_distplot_grouped(data_df, 'category')","ddc1292d":"fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(12,6))\ns = sns.boxplot(ax = ax1, x=\"fraud\", y=\"amount\", hue=\"fraud\",data=data_df, palette=\"PRGn\",showfliers=True)\ns = sns.boxplot(ax = ax2, x=\"fraud\", y=\"amount\", hue=\"fraud\",data=data_df, palette=\"PRGn\",showfliers=False)\nplt.show()","42b1c720":"fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(12,6))\ns = sns.boxplot(ax = ax1, x=\"gender\", y=\"amount\", hue=\"gender\",data=data_df, palette=\"PRGn\",showfliers=True)\ns = sns.boxplot(ax = ax2, x=\"gender\", y=\"amount\", hue=\"gender\",data=data_df, palette=\"PRGn\",showfliers=False)\nplt.show()","8a5be1b8":"fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(16,6))\ns = sns.boxplot(ax = ax1, x=\"age\", y=\"amount\", hue=\"age\",data=data_df, palette=\"PRGn\",showfliers=True)\ns = sns.boxplot(ax = ax2, x=\"age\", y=\"amount\", hue=\"age\",data=data_df, palette=\"PRGn\",showfliers=False)\nplt.show()","5dc88b8f":"fig, (ax1, ax2) = plt.subplots(nrows=2, figsize=(16,12))\ns = sns.boxplot(ax = ax1, x=\"category\", y=\"amount\", hue=\"category\",data=data_df, palette=\"PRGn\",showfliers=True)\ns = sns.boxplot(ax = ax2, x=\"category\", y=\"amount\", hue=\"category\",data=data_df, palette=\"PRGn\",showfliers=False)\nplt.show()","6c94f320":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\nfrom catboost import CatBoostClassifier","167308b9":"X = data_df.drop(['fraud'], axis=1)\ny = data_df.fraud","af55a1e8":"X_train, X_validation, y_train, y_validation = train_test_split(X, y, train_size=0.7, random_state=1234)","6a93c538":"categorical_features_indices = np.where(X.dtypes != np.float)[0]\n","c7f29b83":"clf = CatBoostClassifier(iterations=500,\n                             learning_rate=0.02,\n                             depth=12,\n                             eval_metric='AUC',\n                             random_seed = 42,\n                             bagging_temperature = 0.2,\n                             od_type='Iter',\n                             metric_period = 20,\n                             od_wait=25)","db12975f":"clf.fit(X_train, y_train,cat_features=categorical_features_indices,eval_set=(X_validation, y_validation),plot=True)","24f5724e":"preds = clf.predict(X_validation)","d0059d50":"cm = pd.crosstab(y_validation.values, preds, rownames=['Actual'], colnames=['Predicted'])\nfig, (ax1) = plt.subplots(ncols=1, figsize=(5,5))\nsns.heatmap(cm, \n            xticklabels=['Not Fraud', 'Fraud'],\n            yticklabels=['Not Fraud', 'Fraud'],\n            annot=True,ax=ax1,\n            linewidths=.2,linecolor=\"Darkblue\", cmap=\"Blues\")\nplt.title('Confusion Matrix', fontsize=14)\nplt.show()","dfba853e":"print(f\"ROC-AUC score: {roc_auc_score(y_validation.values, preds)}\")","09b75076":"Fit the training data.","ad314506":"## Glimpse the data","2c01170d":"Perform train-validation split.","5934f36f":"Initialize the algorithm, with few tuned hyperparameters.","262a96c1":"Validation ROC-AUC.","afc633d5":"## Load the data","ebc6cf07":"Prepare the features (X) and labels (y).","902c6240":"# Analysis preparation","ef93292f":"Specify the categorical features. CatBoost is very efficient in treatment of categorical features - no special processing (Label encoding, One-Hot encoding, Binary encoding) needed.\n","db474c7a":"Show the confusion matrix.","643ab937":"# Introduction\n\nThis dataset has been generated using BankSim, a bank simulator for a Spanish bank.\n\n## Data generation method\n\nBankSim was run for 180 steps (approx. six months), several times and calibrated the parameters in order to obtain a distribution that get close enough to be reliable for testing. There were collected several log files and selected the most accurate. There were injected thieves that aim to steal an average of three cards per step and perform about two fraudulent transactions per day. Were produced 594643 records in total. Where 587443 are normal payments and 7200 fraudulent transactions. Since this is a randomised simulation the values are of course not identical to original data.\n\n## Original paper\n\nOriginal paper:\n\nLopez-Rojas, Edgar Alonso ; Axelsson, Stefan\nBanksim: A bank payments simulator for fraud detection research Inproceedings\n26th European Modeling and Simulation Symposium, EMSS 2014, Bordeaux, France, pp. 144\u2013152, Dime University of Genoa, 2014, ISBN: 9788897999324.\nhttps:\/\/www.researchgate.net\/publication\/265736405_BankSim_A_Bank_Payment_Simulation_for_Fraud_Detection_Research\n\n","e8619aec":"# Model\n\nFrom the data, we will use 70% for training and 30% for validation.  \n\nCatBoostClassifier (CatBoost) algorithm is used.  \n\nROC-AUC is the metric choosen.\n","f498c427":"# Data Exploration\n\n\nWe define few utility plot functions.  \n\n\nWe will explore all the features, as well as interaction between features.","5a1d4726":"## Load packages","945d3d25":"Perform prediction for validation data."}}