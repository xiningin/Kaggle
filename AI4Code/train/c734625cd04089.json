{"cell_type":{"1344cda8":"code","0103b8aa":"code","ba2c0588":"code","8820af1e":"code","c8391a1f":"code","8021b24e":"code","ef39193e":"code","bd25d272":"code","fb7bfa9d":"code","5b519ed3":"code","e8194573":"code","6f63a5ae":"code","e6667282":"code","f1091023":"code","f1618173":"code","def21f97":"code","a7143711":"code","496ab279":"code","877b7299":"code","0035334f":"code","9a8a5719":"code","2df5593d":"code","e15105b2":"code","4ab07dab":"code","c8a77260":"code","593234f0":"code","3a656260":"code","91868e70":"code","f0ce76ed":"code","2bd4bf67":"code","ca37dd3f":"code","77e4709d":"code","89c774a0":"code","27ab586a":"code","b0fa19bd":"code","aa3c8881":"code","9d91ee76":"code","4bed2c9c":"code","c950c4af":"code","8de7aa54":"code","c7d82c18":"code","585bd987":"code","29441c7e":"code","b14f7966":"code","5588ca2b":"code","da74dcb8":"code","c123b190":"code","b88f917b":"code","0a10503f":"code","7867a525":"code","ab79982b":"code","9d576dae":"code","ee86a874":"code","ac821f41":"code","ec7b0c4e":"code","3061dd52":"code","ba6ea4ca":"code","e91db1b9":"code","ab3f8de1":"code","3c988665":"code","246ddeba":"code","33791fba":"code","4cbc62cf":"code","1bfa71ee":"code","317374d4":"code","0120009c":"code","59c81dcc":"code","f6f70c47":"code","d8417ee4":"code","127564de":"code","99aed0f2":"code","80d9d02f":"code","8c7ed372":"code","deb8799d":"code","867d8e3e":"code","c4f61c04":"code","75000811":"code","1989bea2":"code","60762588":"code","4441eb1e":"code","3f5f712a":"code","a0e415c8":"code","50102cc7":"code","625fdcec":"code","0eea1acc":"code","b7d7b413":"code","18e6e8a9":"markdown","f6c909d4":"markdown","06a58de1":"markdown","302dfa5b":"markdown","8266107d":"markdown","a6e12cd3":"markdown","7a737776":"markdown","a9d4db81":"markdown","5e5fa91d":"markdown","367be81e":"markdown","0519a797":"markdown","08beec3f":"markdown","e80f036c":"markdown","3e613f96":"markdown","8c10a29b":"markdown","3913095b":"markdown","5fd44c71":"markdown","c57ae91b":"markdown","51de98a4":"markdown","12b89e4f":"markdown","efb34504":"markdown","285a2894":"markdown","e229796c":"markdown","ac9373ac":"markdown","f5ed0230":"markdown","24f24013":"markdown","8e71c12f":"markdown","eeb4cbd6":"markdown","a93d7d41":"markdown","1eef6767":"markdown","3020af74":"markdown","a9fdd871":"markdown","0ab92181":"markdown","965b2621":"markdown","a12bd285":"markdown","65637f8b":"markdown","1075f3c8":"markdown","dd60a792":"markdown","ffbf6407":"markdown","63e14b8c":"markdown","34f5fc47":"markdown","7dee2b3c":"markdown","151d7489":"markdown","087932f9":"markdown","140af604":"markdown","dd052277":"markdown","d3961379":"markdown","040a8797":"markdown","9a8cfe88":"markdown","9c76ad40":"markdown","a84fd516":"markdown","f0bda460":"markdown","285bc961":"markdown","4f5d7e81":"markdown","950061ba":"markdown","cb051ca0":"markdown","dd6bcead":"markdown","87c6468e":"markdown","69fd9073":"markdown","3d4e6b17":"markdown","419a343b":"markdown","798e14ee":"markdown","c9a33442":"markdown","8d6a269e":"markdown","1d4beb6a":"markdown","547ee4eb":"markdown","d28c1e17":"markdown","ef7f165b":"markdown","960fe1af":"markdown","69187f53":"markdown","ddb17a12":"markdown","53dcca32":"markdown","a965cf00":"markdown","6e6639cf":"markdown","9fa0b539":"markdown","6d5607d5":"markdown","7bd9c050":"markdown","513018c1":"markdown","bb8a93d2":"markdown","ad526440":"markdown","ea6e2a7d":"markdown","a04adc2d":"markdown","971a4d41":"markdown","e33c99af":"markdown","d555c37d":"markdown","2d91a6f6":"markdown","916fd027":"markdown","f3bbd86b":"markdown","6597298b":"markdown","6fca5c2d":"markdown","c94bd6d9":"markdown","85f326da":"markdown","a37a7d2b":"markdown","49306fcd":"markdown","20641b33":"markdown"},"source":{"1344cda8":"import pandas as pd\nimport numpy as np","0103b8aa":"wkbks = glob(os.path.join(os.pardir, 'input', 'xlsx_files_all', 'Ir*.xls'))\nsorted(wkbks)","ba2c0588":"filename = 'Iris.xlsx'","8820af1e":"df = pd.read_excel(filename)","c8391a1f":"print(df)","8021b24e":"df1 = pd.read_excel(filename,sheet_name='Sheet2')","ef39193e":"print(df1)","bd25d272":"df = pd.read_excel(filename,sheet_name='Sheet1', index_col=0)","fb7bfa9d":"print(df)","5b519ed3":"df = pd.read_excel(filename, sheet_name='Sheet1', header=None, skiprows=1, index_col=0)","e8194573":"print(df)","6f63a5ae":"df = pd.read_excel(filename, sheet_name='Sheet1', header=None, skiprows=1, usecols='B,D')","e6667282":"print(df)","f1091023":"df = pd.read_excel(filename)\n#Importing the file again to the dataframe in the original shape to use it for further analysis","f1618173":"df.head(10)","def21f97":"df.tail()","a7143711":"df['SepalLength'].head()","496ab279":"df.columns","877b7299":"df.info()","0035334f":"df.shape[0]","9a8a5719":"print('Total rows in Dataframe is: ',  df.shape[0])\nprint('Total columns in Dataframe is: ',  df.shape[0])","2df5593d":"df.dtypes","e15105b2":"df['Name'].head()","4ab07dab":"df.iloc[:,[4]].head()","c8a77260":"df.loc[:,['Name']].head()","593234f0":"df[['Name', 'PetalLength']].head()","3a656260":"#Pass a variable as a list\nSpecificColumnList = ['Name', 'PetalLength']\ndf[SpecificColumnList].head()","91868e70":"df.loc[20:30] ","f0ce76ed":"df.loc[20:30, ['Name']]","2bd4bf67":"df[df['Name'] == 'Iris-versicolor'].head()","ca37dd3f":"df[df['Name'].isin(['Iris-versicolor', 'Iris-virginica'])]","77e4709d":"Filter_Value = ['Iris-versicolor', 'Iris-virginica']","89c774a0":"df[df['Name'].isin(Filter_Value)]","27ab586a":"df[~df['Name'].isin(Filter_Value)]","b0fa19bd":"width = [2]\nFlower_Name = ['Iris-setosa']\ndf[~df['Name'].isin(Flower_Name) & df['PetalWidth'].isin(width)]","aa3c8881":"df[df['SepalLength'] == 5.1].head()","9d91ee76":"df[df['SepalLength'] > 5.1].head()","4bed2c9c":"df[df['Name'].map(lambda x: x.endswith('sa'))]","c950c4af":"df[df['Name'].map(lambda x: x.endswith('sa')) & (df['SepalLength'] > 5.1)]","8de7aa54":"df[df['Name'].str.contains('set')]","c7d82c18":"df['SepalLength'].unique()","585bd987":"df.drop_duplicates(subset=['Name'])","29441c7e":"df.drop_duplicates(subset=['Name']).iloc[:,[3,4]]","b14f7966":"df.sort_values(by = ['SepalLength'])","5588ca2b":"df.sort_values(by = ['SepalLength'], ascending = False)","da74dcb8":"df.describe()","c123b190":"df.describe(include = ['object'])","b88f917b":"df.describe(include = 'all')","0a10503f":"pd.value_counts(df['Name'])","7867a525":"df.count(axis=0)","ab79982b":"df.sum(axis = 0) # 0 for column wise total","9d576dae":"df.sum(axis =1) # row wise sum","ee86a874":"df['Total'] = df.sum(axis =1)","ac821f41":"df.head()","ec7b0c4e":"df['Total_loc']=df.loc[:,['SepalLength', 'SepalWidth']].sum(axis=1)","3061dd52":"df.head()","ba6ea4ca":"df['Total_DFSum']= df['SepalLength'] + df['SepalWidth']","e91db1b9":"df.head()","ab3f8de1":"df.drop(['Total_DFSum'], axis = 1)","3c988665":"Sum_Total = df[['SepalLength', 'SepalWidth', 'Total']].sum()","246ddeba":"Sum_Total","33791fba":"T_Sum = pd.DataFrame(data=Sum_Total).T","4cbc62cf":"T_Sum","1bfa71ee":"T_Sum = T_Sum.reindex(columns=df.columns)","317374d4":"T_Sum","0120009c":"Row_Total = df.append(T_Sum,ignore_index=True)","59c81dcc":"Row_Total","f6f70c47":"df[df['Name'] == 'Iris-versicolor'].sum()","d8417ee4":"df[df['Name'].map(lambda x: x.endswith('sa')) & (df['SepalLength'] > 5.1)].sum()","127564de":"df[df['Name'] == 'Iris-versicolor'].mean()","99aed0f2":"df[df['Name'].map(lambda x: x.endswith('sa')) & (df['SepalLength'] > 5.1)].mean()","80d9d02f":"df[df['Name'] == 'Iris-versicolor'].max()","8c7ed372":"df[df['Name'] == 'Iris-versicolor'].min()","deb8799d":"df[['Name','SepalLength']].groupby('Name').sum()","867d8e3e":"GroupBy = df.groupby('Name').sum()","c4f61c04":"Group_By.append(pd.DataFrame(df[['SepalLength','SepalWidth','PetalLength','PetalWidth']].sum()).T)","75000811":"pd.pivot_table(df, index= 'Name')#Same as Groupby","1989bea2":"pd.pivot_table(df, values='SepalWidth', index= 'SepalLength',columns='Name', aggfunc = np.sum)","60762588":"pd.pivot_table(df, values='SepalWidth', index= 'SepalLength',columns='Name', aggfunc = np.sum, fill_value=0)","4441eb1e":"pd.pivot_table(df, values=['SepalWidth', 'PetalWidth'], index= 'SepalLength',columns='Name', aggfunc = np.sum, fill_value=0)","3f5f712a":"pd.pivot_table(df, values=['SepalWidth', 'PetalWidth'], index= ['SepalLength', 'PetalLength'],columns='Name', aggfunc = np.sum, fill_value=0)","a0e415c8":"pd.pivot_table(df, values=['SepalWidth', 'PetalWidth'], index= 'SepalLength',columns='Name', \n               aggfunc = {'SepalWidth': np.sum, 'PetalWidth': np.mean}, fill_value=0)","50102cc7":"pd.pivot_table(df, values=['SepalWidth', 'PetalWidth'], index= 'SepalLength',columns='Name', \n               aggfunc = {'SepalWidth': np.sum, 'PetalWidth': np.mean}, fill_value=0, margins=True)","625fdcec":"df1 = pd.read_excel(filename)","0eea1acc":"lookup = df.merge(df,on='Name')","b7d7b413":"lookup","18e6e8a9":"## View specific row's data\nThe method used here is slicing using the loc function, where we can specify the start and end row separated by colon\n<br>Remember, __index starts from a 0 and not 1__","f6c909d4":"The inspiration to create something like this came from the non-availablity of a free tutorial which literally gives all. I heavily read and follow Python documentation and you will find a lot of inspiration from that site.","06a58de1":"## Import a specifc column(s)","302dfa5b":"## View specific column's data","8266107d":"## Sort Values","a6e12cd3":"pandas.read_excel(io, sheet_name=0, header=0, names=None, index_col=None, parse_cols=None, usecols=None, squeeze=False, dtype=None, engine=None, converters=None, true_values=None, false_values=None, skiprows=None, nrows=None, na_values=None, keep_default_na=True, verbose=False, parse_dates=False, date_parser=None, thousands=None, comment=None, skip_footer=0, skipfooter=0, convert_float=True, mangle_dupe_cols=True, **kwds)","7a737776":"_Its not the end of the features available however its a start and you can play around with them as per your requirements_","a9d4db81":"### Don't like the new column, delete it using drop method","5e5fa91d":"## Add a total column to the existing dataset","367be81e":"Initial step is to import excel files into dtaframe so we can perform all our tasks on it.\n<br>I will be demonstrating the __read_excel__ method of Pandas which supports __xls__ and __xlsx__ file extensions.\n<br>__read_csv__ is same as using read_excel, we wont go in depth but I will share an example.","0519a797":"By default, the first sheet in the file is imported to the dataframe as it is.\n<br>Using the sheet_name argument we can explicitly mention the sheet that we want to import. Defuat value is 0 i.e. teh first sheet in the file.\n    <br>We can either mention the name of the sheet(s) or pass an integer value to refer to the index of the sheet","08beec3f":"|\tArgument\t|\tDescription\t|\n|\t\t-|\t\t|\n|\tio\t|\tA string containing the pathname of the given Excel file.\t|\n|\tsheet_name\t|\tThe Excel sheet name, or sheet number, of the data you want to import. The sheet number can be an integer where 0 is the first sheet, 1 is the second, etc. If a list of sheet names\/numbers are given, then the output will be a\u00a0dictionary of DataFrames. The default is to read all the sheets and output a dictionary of DataFrames.\t|\n|\theader\t|\tRow number to use for the list of column labels. The default is 0, indicating that the first row is assumed to contain the column labels. If the data does not have a row of column labels,\u00a0None\u00a0should be used.\t|\n|\tnames\t|\tA separate\u00a0Python list\u00a0input of column names. This option is\u00a0None\u00a0by default. This option is the equivalent of assigning a list of column names to the\u00a0columns attribute of the output DataFrame.\t|\n|\tindex_col\t|\tSpecifies which column should be used for row indices. The default option is\u00a0None, meaning that all columns are included in the data, and a range of numbers is used as the row indices.\t|\n|\tusecols\t|\tAn integer, list of integers, or string that specifies the columns to be imported into the DataFrame. The default is to import all columns. If a string is given, then Pandas uses the standard Excel format to select columns (e.g. \"A:C,F,G\" will import columns A, B, C, F, and G).\t|\n|\tskiprows\t|\tThe number of rows to skip at the top of the Excel sheet. Default is 0. This option is useful for skipping rows in Excel that contain explanatory information about the data below it.\t|\n","e80f036c":"The above might not be the best example to suppport the concept, however the working is the same.","3e613f96":"The default read_excel parameters assumes that the first row is a list of column names, which is incorporated automatically as column labels within the DataFrame.\n<br>Using the arguments like skiprows and header we can manipulate the behaviour of the imported dataframe","8c10a29b":"<pre>------------------------------------------------------------------------------------------<\/pre>","3913095b":"I'll be using the Iris sample dataset which is freely available online for educational purpose.\n<br>Please follow the below link to download the dataset and ensure to save it in the same folder where you are saving your python file","5fd44c71":"## Filter data in a column","c57ae91b":"The approach followed here is to start from simple tasks and move to complex computational tasks.\nI've tried and designed it such a way that this can be used a universal notebook and you just just have to change the input file and you can get the same result.\nHowever I will encourage you to please replicate the steps yourself for your better understanding.","51de98a4":"## Min","12b89e4f":"<pre>------------------------------------------------------------------------------------------<\/pre>","efb34504":"## Look at the datatypes in Dataframe","285a2894":"I am hoping this tutorial made some sense, though I agree this could have been more elaborative which I will be pursuing soon.\n<br>__Watch out the space for more of it.__","e229796c":"## Sum of specific columns, use the loc methos and pass the column names","ac9373ac":"Using the usecols argument we can specify if we have import a specific column in our dataframe","f5ed0230":"# <centre>Data Aggregation<\/centre>","24f24013":"Since there's a plethora of arguments available, lets look at the most used one's.","8e71c12f":"# <center>Ditching Excel for Python<\/center>","eeb4cbd6":"## Get the unique values from dataframe","a93d7d41":"# Pivot Tables in Dataframes i.e. Pivot Tables in Excel","1eef6767":"## Combine two filters to get the result","3020af74":"A simple Pivot table showing us the sum of SepalWidth in values, SepalLength in Row Column and Name in Column Labels","a9fdd871":"## Shape Method\nReturns the dimensions of Dataframe","0ab92181":"## View multiple columns","965b2621":"<pre>------------------------------------------------------------------------------------------<\/pre>","a12bd285":"## Filter multiple values","65637f8b":"<pre>------------------------------------------------------------------------------------------<\/pre>","1075f3c8":"# Slice and Dice i.e. Excel filters","dd60a792":"Who doesn'l love a Pivot Table in Excel, its one the best ways to analyse your data, have a quick overview of the information, helps you slice and dice the data with a super easy interface, helps you plots graphs basis on the data, add calculative columns etc.\n<br>No, we wont have an interface to work, we'll have to explicitly write the code to get the output, No, it wont generate charts for you, but I don't think we can complete a tutorial without learning about the Pivot tables.","ffbf6407":"# Vlookup","63e14b8c":"https:\/\/archive.ics.uci.edu\/ml\/datasets\/iris","34f5fc47":"Blanks are now replaced with 0's by using the fill_value argument","7dee2b3c":"## View a specific column","151d7489":"Unless explicitly mentioned, an index column is added to the dataframe which by default starts from a 0.\n<br>Using the index_col argumement we can manipulate the index column in our dataframe, if we set the value 0 from none, it will use the first column as our index.","087932f9":"## Max","140af604":"## Filter usinng using multiple conditions in multiple columns\n__The input should always be a list__\n<br>We can use this method to replicate advanced filter function in excel","dd052277":"## Replicate the custom filter in Excel","d3961379":"What a magical formula is vlookup in Excel, I think its the first thing that everyone wants to learn before learning how to even add. Looks fascinating when someone is applying vlookup, looks like magic when we get the output. Makes life easy. I can with very much confidence can say its the backbone of every data wrangling action performed on the spreadsheet.\n<br>\n<br>__Unfortunately__ we dont have a vlookup function in Pandas!\n<br>\n<br>Since we dont have a \"Vlookup\" function in Pandas, Merge is used as an alternate which is same as SQL. There are a total of four merge options available:\n* \u2018left\u2019\u200a\u2014\u200aUse the shared column from the left dataframe and match to right dataframe. Fill in any N\/A as NaN\n\n* \u2018right\u2019\u200a\u2014\u200aUse the shared column from the right dataframe and match to left dataframe. Fill in any N\/A as NaN\n\n* \u2018inner\u2019\u200a\u2014\u200aOnly show data where the two shared columns overlap. Default method.\n\n* \u2018outer\u2019\u200a\u2014\u200aReturn all records when there is a match in either left or right dataframe.\n<br>","040a8797":"Though __read_excel__ method includes million arguments but I will make you familiarise with the most common ones that will come very handy in day to day operations","9a8cfe88":"## Getting the name of all columns","9c76ad40":"# Statistical summary of data","a84fd516":"## Counting the unique values of a particular column. \n_Resulting output is a Series. You can refer it as a Single column Pivot Table_","f0bda460":"## Skip rows and columns","285bc961":"## Filter multiple values using a list","4f5d7e81":"A lot has been done above, the approach that we are using is:\n* Sum_Total: Do the sum of columns\n* T_Sum: Convert the series output to dataframe and transpose\n* Re-index to add missing columns\n* Row_Total: append T_Sum to existing dataframe","950061ba":"If we use margins argument, we can have total row added","cb051ca0":"If we are using the path for our local file by default its separated by \"\\\" however python accepts \"\/\", \nso make to change the slashes or simply add the file in the same folder where your python file is.\nShould you require detailed explanation on the above, refer to the below medium article.\nhttps:\/\/medium.com\/@ageitgey\/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f","dd6bcead":"## Using a column from the sheet as an Index","87c6468e":"## Count cells\nCount non-NA cells for each column or row.","69fd9073":"## Or, we can use the below method","3d4e6b17":"# Groupby i.e. Subtotals in Excel","419a343b":"We can use Python to scan files in a directory and pick out the ones we want.","798e14ee":"Descriptive reporting is all about data subsets and aggregations, the moment we are to understand our data a little bit we start using filters to look at the smaller sets of data or view a particular column maybe to have a better understanding.\n<br>Python offers a lot of different methods to slice and dice the dataframes, we'll play around with a couple of them to have an understanding of how it works","c9a33442":"## Lets have a look at the data from 10,000 feet","8d6a269e":"## Filter values NOT in list or not equal to in Excel","1d4beb6a":"## The first step is to import necessary libraries in Python","547ee4eb":"<pre>------------------------------------------------------------------------------------------<\/pre>","d28c1e17":"## Averageifs","ef7f165b":"## Filter using numeric conditions","960fe1af":"After spending almost a decade with my first love Excel, its time to move on and search for a better half who in thick and thin of my daily tasks is with me and is much better and faster and who can give me a cutting edge in the challenging technological times where new technology is getting ditched by something new at a very rapid pace.\nThe idea is to replicate almost all excel functionalities in Python, be it using a simple filter or a complex task of creating an array of data from the rows and crunching them to get fancy results","69187f53":"## Sum\nSummarising the data to get a snapshot of either by rows or columns","ddb17a12":"## \"Head\" to \"Tail\": \nTo view the first or last __five__ rows.\n<br>_Default is five, however the argument allows us to use a specific number_","53dcca32":"Summary stats of character columns","a965cf00":"We can have individual calculations on values using dictionary method and can also have multiple calculations on values","6e6639cf":"## Importing Excel Files into a Pandas DataFrame","9fa0b539":"<pre>------------------------------------------------------------------------------------------<\/pre>","6d5607d5":"Lets see if we can complicate it a bit.","7bd9c050":"<pre>------------------------------------------------------------------------------------------<\/pre>","513018c1":"We can import the spreadsheet data into Python using the following code:","bb8a93d2":"<pre>------------------------------------------------------------------------------------------<\/pre>","ad526440":"_Our Input and Ouput is both an Excel file :)_","ea6e2a7d":"## __DataFrame Describe method:__ \n_Generate descriptive statistics that summarize the central tendency, dispersion and shape of a dataset\u2019s distribution, excluding NaN values._","a04adc2d":"Sort data by a certain column, by default the sorting is ascending","971a4d41":"## Adding sum-total beneath each column","e33c99af":"As now we have our dataframe, lets look at the data from multiple angles just to get a hang of it\/\n<br>Pandas have plenty of functions available that we can use. We'll use some of them to have a glimpse of our dataset.","d555c37d":"If we want to view the entire dataframe with the unique values, we can use the drop_duplicates method","2d91a6f6":"## Import a specifc sheet","916fd027":"Its replicates the method of adding a total column against each row","f3bbd86b":"## Info Method\nGives a summary of Dataframe","6597298b":"There exists three main methods to select columns:\n\n* Use dot notation: e.g. data.column_name\n* Use square braces and the name of the column:, e.g. data['column_name']\n* Use numeric indexing and the iloc selector data.loc[:, 'column_number']","6fca5c2d":"## Sumifs","c94bd6d9":"## Sum based on criteria i.e. Sumif in Excel","85f326da":"## Slice rows and columns together","a37a7d2b":"## Averageif","49306fcd":"## Contains function in Excel","20641b33":"### Important Pandas read_excel Options"}}