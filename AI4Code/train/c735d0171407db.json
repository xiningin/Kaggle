{"cell_type":{"6c0a3652":"code","66a84199":"code","eae1d9fd":"code","aae6bb54":"code","1e12605c":"code","86da44df":"code","ef89eb2d":"code","9bef622c":"code","7329713e":"code","b0976397":"code","2708aa9c":"code","c2ee146c":"code","5eec7b42":"code","8d30618d":"code","982c7f2f":"code","5ed78c0b":"code","0b7fb24a":"code","c4564f32":"code","c5dc0b27":"code","7b0b8654":"code","cb68f24b":"code","3c94332c":"code","8f7ce8e0":"code","3cd5a013":"code","838845f6":"code","78e39a18":"code","b21f4580":"code","86649a2e":"code","c8f1c04d":"code","927d3946":"code","2b92da7e":"code","483b90ee":"code","2a691e26":"code","bd750e5a":"code","e9792333":"code","324f4f43":"code","6f008a66":"code","eb7e69a3":"code","d5c60455":"code","ce8110bc":"code","6ef22319":"code","ae04dc8e":"code","1e062c21":"code","9d1246af":"code","ba1eac02":"code","f0502363":"code","61575e2e":"code","5e09f31e":"code","9673496c":"code","7904cb9b":"code","d627242a":"code","1dbc3a38":"code","3da56bd3":"code","5417c4f4":"code","a94c5592":"code","dbb6e0ce":"code","01158ef3":"markdown","604bf500":"markdown","a572262d":"markdown","59bd2f7b":"markdown","83c46b0d":"markdown","3207472c":"markdown","03314efb":"markdown","8d9d214a":"markdown","f393ba0b":"markdown","19f3fede":"markdown","b003ac80":"markdown","e3988fa8":"markdown","83c84c56":"markdown","6c5cb494":"markdown","6454126d":"markdown","29d76a8e":"markdown","a672cf43":"markdown","ec7d3cc5":"markdown"},"source":{"6c0a3652":"import pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom pandas.plotting import scatter_matrix\n\nfrom sklearn.preprocessing import OneHotEncoder\nimport category_encoders as ce\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.compose import ColumnTransformer","66a84199":"data= pd.read_csv('..\/input\/titanic\/train.csv')\ndata.set_index('PassengerId', inplace = True)\ndata","eae1d9fd":"data.info()","aae6bb54":"data.describe()","1e12605c":"plt.figure(figsize=(15,10))\nplt.subplot(321)\ndata.boxplot(column=['Age'])\nplt.subplot(322)\ndata.boxplot(column=['Fare'])\nplt.subplot(323)\ndata.boxplot(column=['Survived'])\nplt.subplot(324)\ndata.boxplot(column=['Pclass'])\nplt.subplot(325)\ndata.boxplot(column=['SibSp'])\nplt.subplot(326)\ndata.boxplot(column=['Parch'])","86da44df":"corr_matrix = data.corr()\ncorr_matrix['Survived'].sort_values(ascending=False)","ef89eb2d":"plt.figure(figsize=(15,10))\nsns.heatmap(corr_matrix, cmap='jet', annot=True)","9bef622c":"data['Ticket'].value_counts()","7329713e":"str_cols = []\nnum_cols= []\nrm = ['Ticket', 'Cabin', 'Name']\nfor col in data.columns:\n    if data[col].dtype == 'object':\n        str_cols.append(col)\n    else:\n        num_cols.append(col)\nfor remove in rm:\n    str_cols.remove(remove)\nprint('str:', str_cols)\nprint('num:', num_cols)","b0976397":"data['Sex'].value_counts()","2708aa9c":"data['Embarked'].value_counts()","c2ee146c":"emb_ind_nan = pd.isna(data['Embarked'])[pd.isna(data['Embarked'])].index\nprint(emb_ind_nan)","5eec7b42":"print(data.iloc[61], data.iloc[829], sep='\\n')","8d30618d":"pd.isna(data['Age']).value_counts()","982c7f2f":"sex_encode = OneHotEncoder()\nsex_temp = sex_encode.fit_transform(data[['Sex']])\nsex_temp = pd.DataFrame(sex_temp.toarray())\nsex_temp.index = data.index\nsex_temp.columns = ['female', 'male']\nprint(sex_temp)","5ed78c0b":"embarked_encode = ce.CountEncoder(cols='Embarked')\nembarked_temp = embarked_encode.fit_transform(data[['Embarked']])\nprint(embarked_temp)","0b7fb24a":"data_temp = data[num_cols]\ndata_temp = data_temp.join(sex_temp)\ndata_temp = data_temp.join(embarked_temp)\ndata_temp","c4564f32":"corr_matrix = data_temp.corr()\ncorr_matrix['Survived'].sort_values(ascending=False)","c5dc0b27":"plt.figure(figsize=(15,10))\nsns.heatmap(corr_matrix, cmap='jet', annot=True)","7b0b8654":"data_temp.hist(figsize=(20,15))","cb68f24b":"scatter_matrix(data, figsize=(20,15))","3c94332c":"str_cols = ['Sex', 'Embarked']\nnum_cols = ['Survived', 'Pclass', 'Age', 'SibSp', 'Parch', 'Fare']","8f7ce8e0":"X = data.drop(['Survived'], axis=1)\nX = X.drop(['Ticket', 'Cabin', 'Name'], axis=1)\ny = data['Survived']\n\nstr_pip_sex = Pipeline([('sex_encode', OneHotEncoder())])\nstr_pip_embarked = Pipeline([('embarked_encode', ce.CountEncoder(cols='Embarked'))])\nmy_pip =Pipeline([('imputer', SimpleImputer(strategy='median')),('std_scal', StandardScaler())]) \n\nX_sex = str_pip_sex.fit_transform(X[['Sex']])\nX_sex = pd.DataFrame(X_sex.toarray())\nX_sex.index = X.index\nX_sex.columns = ['female', 'male']\n\nX_embarked = str_pip_embarked.fit_transform(X[['Embarked']])\nfor ind in emb_ind_nan:\n    X_embarked.loc[ind] = max(X_embarked['Embarked'])\n\nX = X.drop(['Sex', 'Embarked'], axis=1)\nX = X.join(X_sex)\nX = X.join(X_embarked)\nindex = X.index\ncolumns = X.columns\nX = my_pip.fit_transform(X)\nX = pd.DataFrame(X)\nX.index = index\nX.columns = columns\nX","3cd5a013":"test = pd.read_csv('..\/input\/titanic\/test.csv')\ntest.set_index('PassengerId', inplace = True)\ntest = test.drop(['Ticket', 'Cabin', 'Name'], axis=1)\n\ntest_sex = str_pip_sex.transform(test[['Sex']])\ntest_sex = pd.DataFrame(test_sex.toarray())\ntest_sex.index = test.index\ntest_sex.columns = ['female', 'male']\n\ntest_embarked = str_pip_embarked.transform(test[['Embarked']])\n\ntest = test.drop(['Sex', 'Embarked'], axis=1)\ntest = test.join(test_sex)\ntest = test.join(test_embarked)\nindex = test.index\ncolumns = test.columns\ntest = my_pip.transform(test)\ntest = pd.DataFrame(test)\ntest.index = index\ntest.columns = columns","838845f6":"from sklearn.svm import SVC\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier","78e39a18":"model_svm = SVC(random_state=42)\nmodel_sgd = SGDClassifier(n_jobs=-1,random_state=42)\nmodel_rfc = RandomForestClassifier(n_jobs=-1,random_state=42)\nmodel_xgb = XGBClassifier(n_jobs=-1,random_state=42)\nmodel_lgb = LGBMClassifier(n_jobs=-1,random_state=42)","b21f4580":"from sklearn.model_selection import cross_val_predict","86649a2e":"predict_svm = cross_val_predict(model_svm, X, y, cv=3)","c8f1c04d":"predict_sgd = cross_val_predict(model_sgd, X, y, cv=3)","927d3946":"predict_rfc = cross_val_predict(model_rfc, X, y, cv=3)","2b92da7e":"predict_xgb = cross_val_predict(model_xgb, X, y, cv=3)","483b90ee":"predict_lgb = cross_val_predict(model_lgb, X, y, cv=3)","2a691e26":"from sklearn.metrics import accuracy_score\n\naccuracy_score_svm = accuracy_score(y, predict_svm)\naccuracy_score_sgd = accuracy_score(y, predict_sgd)\naccuracy_score_rfc = accuracy_score(y, predict_rfc)\naccuracy_score_xgb = accuracy_score(y, predict_xgb)\naccuracy_score_lgb = accuracy_score(y, predict_lgb)\nprint(accuracy_score_svm, accuracy_score_sgd, accuracy_score_rfc, accuracy_score_xgb, accuracy_score_lgb, sep='\\n')","bd750e5a":"from sklearn.metrics import confusion_matrix\n\nplt.figure(figsize=(25,15))\n\nplt.subplot(321)\nsns.heatmap(confusion_matrix(y, predict_svm), cmap='jet', vmin=0, vmax=len(X), annot=True)\nplt.title('SVM')\n\nplt.subplot(322)\nsns.heatmap(confusion_matrix(y, predict_sgd), cmap='jet', vmin=0, vmax=len(X), annot=True)\nplt.title('SGD')\n\nplt.subplot(323)\nsns.heatmap(confusion_matrix(y, predict_rfc), cmap='jet', vmin=0, vmax=len(X), annot=True)\nplt.title('RF')\n\nplt.subplot(324)\nsns.heatmap(confusion_matrix(y, predict_xgb), cmap='jet', vmin=0, vmax=len(X), annot=True)\nplt.title('XGBoost')\n\nplt.subplot(325)\nsns.heatmap(confusion_matrix(y, predict_lgb), cmap='jet', vmin=0, vmax=len(X), annot=True)\nplt.title('LightGBM')\n\nplt.subplot(326)\nsns.heatmap([[y.value_counts()[0],0],[0,y.value_counts()[1]]], cmap='jet', vmin=0, vmax=len(X), annot=True)\nplt.title('Reference')","e9792333":"from sklearn.metrics import f1_score\n\nf1_score_svm = f1_score(y, predict_svm)\nf1_score_sgd = f1_score(y, predict_sgd)\nf1_score_rfc = f1_score(y, predict_rfc)\nf1_score_xgb = f1_score(y, predict_xgb)\nf1_score_lgb = f1_score(y, predict_lgb)\nprint(f1_score_svm, f1_score_sgd, f1_score_rfc, f1_score_xgb, f1_score_lgb, sep='\\n')","324f4f43":"from sklearn.metrics import roc_auc_score\n\nroc_auc_score_svm = roc_auc_score(y, predict_svm)\nroc_auc_score_sgd = roc_auc_score(y, predict_sgd)\nroc_auc_score_rfc = roc_auc_score(y, predict_rfc)\nroc_auc_score_xgb = roc_auc_score(y, predict_xgb)\nroc_auc_score_lgb = roc_auc_score(y, predict_lgb)\nprint(roc_auc_score_svm, roc_auc_score_sgd, roc_auc_score_rfc, roc_auc_score_xgb, roc_auc_score_lgb, sep='\\n')","6f008a66":"from sklearn.model_selection import GridSearchCV\n\nparam = {'C': [10, 100, 1000], 'gamma': [0.05, 0.01, 0.005],'kernel': ['rbf', 'poly', 'linear' 'sigmoid']}","eb7e69a3":"grid_search = GridSearchCV(model_svm, param, cv=3, scoring='accuracy', n_jobs=-1)\ngrid_search.fit(X, y)\nprint(grid_search.best_params_)","d5c60455":"from scipy.stats import randint, uniform\n\nparam = {'C': randint(0,200), 'gamma': uniform(0.005,0.05)}","ce8110bc":"from sklearn.model_selection import RandomizedSearchCV\n\nrandom_search = RandomizedSearchCV(model_svm,param,n_iter=1000,cv=3,scoring='accuracy',n_jobs=-1)\nrandom_search.fit(X, y)\nprint(random_search.best_params_)","6ef22319":"param = {'C': [35, 32, 37, 5, 23, 32, 31], 'gamma': [0.022966511243537942, 0.023374900980788628, 0.023908501769254933, 0.05180026544224257, 0.02808979291025695, 0.024306412848685673, 0.025444723538421],'kernel': ['rbf', 'poly', 'linear' 'sigmoid']}","ae04dc8e":"grid_search = GridSearchCV(model_svm, param, cv=3, scoring='accuracy', n_jobs=-1)\ngrid_search.fit(X, y)\nprint(grid_search.best_params_)","1e062c21":"from scipy.stats import randint, uniform\n\nparam = {'C': randint(30,40), 'gamma': uniform(0.02,0.03)}","9d1246af":"from sklearn.model_selection import RandomizedSearchCV\n\nrandom_search = RandomizedSearchCV(model_svm,param,n_iter=1000,cv=3,scoring='accuracy',n_jobs=-1)\nrandom_search.fit(X, y)\nprint(random_search.best_params_)","ba1eac02":"param = {'C': [36, 32, 34], 'gamma': [0.022309158879266933, 0.023320738609287434, 0.02316262503377875],'kernel': ['rbf', 'poly', 'linear' 'sigmoid']}","f0502363":"grid_search = GridSearchCV(model_svm, param, cv=3, scoring='accuracy', n_jobs=-1)\ngrid_search.fit(X, y)\nprint(grid_search.best_params_)","61575e2e":"final_model = grid_search.best_estimator_","5e09f31e":"import joblib\njoblib.dump(final_model,'SVC_tuned.pkl')","9673496c":"predict_final = cross_val_predict(final_model, X, y, cv=3)","7904cb9b":"accuracy_score_final = accuracy_score(y, predict_final)\nf1_score_final = f1_score(y, predict_final)\nroc_auc_score_final = roc_auc_score(y, predict_final)\nprint(accuracy_score_final, f1_score_final, roc_auc_score_final, sep='\\n')","d627242a":"predict_test = final_model.predict(test)","1dbc3a38":"predict_test","3da56bd3":"submission = pd.DataFrame(predict_test)","5417c4f4":"submission.index = test.index\nsubmission.columns = ['Survived']","a94c5592":"submission","dbb6e0ce":"submission.to_csv(r'submission.csv')","01158ef3":"I will not label's encode *Sex* because it would suggest that there is a relation of importance between *male* and *female* attributes. A priori that wouldn't be the case. So, and because there is only a cardinality of 2, it is probably more wise to One Hot Encode this feature.","604bf500":"It is more likely that the columns *Ticket*, *Cabin* and *Name* don't hold any useful informations for our study. Then, I will not consider this ones for this analysis. ","a572262d":"Seems to have weak linear correlations here.","59bd2f7b":"As this is a binary classification process, I'll try in a first step the following algorithm with default hyperparameters:\n- SVM\n- SGD\n- RF\n- XGBoost\n- LightGBM\n\n(When I'll be more into it, I'll probably try ensemble learning with all this methods)\n\nConsidering this small dataset, I'll use cross-validation.","83c46b0d":"{'C': 36, 'gamma': 0.022309158879266933}\n\n{'C': 32, 'gamma': 0.023320738609287434}\n\n{'C': 34, 'gamma': 0.02316262503377875}","3207472c":"Note : There is already a test file on Kaggle competitions, so I don't deal here with StratifiedShuffleSplit, but if there wasn't any test files, I think that it would be wise in this case to use it with the *age* feature, after categorization.","03314efb":"{'C': 35, 'gamma': 0.022966511243537942}\n\n{'C': 32, 'gamma': 0.023374900980788628}\n\n{'C': 37, 'gamma': 0.023908501769254933}\n\n{'C': 5, 'gamma': 0.05180026544224257}\n\n{'C': 23, 'gamma': 0.02808979291025695}\n\n{'C': 32, 'gamma': 0.024306412848685673}\n\n{'C': 31, 'gamma': 0.025444723538421}","8d9d214a":"## Preprocessing with pipelines (first try with it)","f393ba0b":"Based on the accuracy as this is the metric for the competition.","19f3fede":"## Import Data and gain insight","b003ac80":"The more (anti)corelated is between Pclass and fare : seems legit.","e3988fa8":"Here, the SVM seems to perform the best with default hyperparameters.","83c84c56":"For the missing values of *Age*, I'll apply the median strategy. I'll apply the strategy on all the data, in case there are some other missing values for the test.","6c5cb494":"# Titanic - Machine Learning from Disaster (Kaggle)","6454126d":"# Test + export","29d76a8e":"I will Count Encode *Embarked* with the category_encoders package. The 2 unknown values will be so labeled as 2, but I will change do the most frequent one.","a672cf43":"## Training with some models","ec7d3cc5":"## Tuning SVM"}}