{"cell_type":{"f37bd113":"code","dd4d540a":"code","3de35f22":"code","75926e69":"code","24118e50":"code","c497294e":"code","2cf236e9":"code","92e41df9":"code","b8201adc":"code","4929b206":"code","e3e89abe":"code","d0228e60":"code","28e05ad0":"code","795e47c8":"code","4a2887b9":"code","c6f5b1f1":"code","f853c507":"code","a1727edc":"code","ffe6880e":"code","3324089f":"code","98a800d8":"markdown","6c71fe6e":"markdown","ec8c6e58":"markdown","18875947":"markdown","e2fae48b":"markdown","6f87fca1":"markdown","a6b3f39e":"markdown","3c56ce3a":"markdown","3eca926a":"markdown","e4822808":"markdown","833f3cd9":"markdown","c527b7b8":"markdown","48eacafa":"markdown"},"source":{"f37bd113":"import pandas as pd               # for data manipulation\nimport numpy as np                # for aggregation functions\nimport gc                         # for clean-up memory","dd4d540a":"orders = pd.read_csv('..\/input\/orders.csv')\norder_products_prior = pd.read_csv('..\/input\/order_products__prior.csv')\n\n# Get the product tables also --> To create metrics for aisles \/ departments \nproducts = pd.read_csv('..\/input\/products.csv')\nproducts.product_name = products.product_name.str.replace(' ', '_').str.lower()\nproducts.product_name = products.product_name.str.replace(',', '-').str.lower()","3de35f22":"prd = orders.merge(order_products_prior, on='order_id', how='left')\nprd.head()\n\n# Optionally we can get the name of the products\n#prd['product_name'] = products.product_name.str.replace(' ', '_').str.lower()\n#prd['product_name'] = products.product_name.str.replace(',', '-').str.lower()\n#TRIM DATASETS\n#prd = prd.iloc[0:100000]\n#prd = prd.iloc[0:15434766]\ngc.collect()","75926e69":"uxp = prd.groupby(['user_id', 'product_id'])[['order_id']].count()\nuxp.columns = ['uxp_total_bought']\nuxp = uxp.reset_index()","24118e50":"#Does users frequently reorder a product? (one-shot ratio)\nitem_one = uxp[uxp.uxp_total_bought==1].groupby('product_id')[['uxp_total_bought']].count()\nitem_one.columns = ['uxp_customers_one_shot']\nitem_size = uxp.groupby('product_id')[['user_id']].count()\nitem_size.columns = ['uxp_unique_customers']\n\nuserxproduct_var= item_one.merge(item_size, how='left', left_index=True, right_on='product_id')\nuserxproduct_var['one_shot_ratio_product'] = userxproduct_var.uxp_customers_one_shot \/ userxproduct_var.uxp_unique_customers\nuserxproduct_var = userxproduct_var.reset_index()\n\n\n###########\nuxp = uxp.merge(userxproduct_var[['product_id', 'one_shot_ratio_product']],how='left')\ngc.collect()","c497294e":"#last 5 orders\nprd['order_number_back'] = prd.groupby('user_id')['order_number'].transform(max) - prd.order_number +1 \nprd5 = prd[prd.order_number_back <= 5]\nlast_five = prd5.groupby(['user_id','product_id'])[['order_id']].count()\nlast_five.columns = ['times_last5']\nlast_five['times_last5_ratio'] = last_five.times_last5 \/ 5\n\n#############\nuxp = uxp.merge(last_five , on=['user_id', 'product_id'], how='left')\ndel [last_five, prd5]\ngc.collect()","2cf236e9":"#How frequently a customer bought a product after its first purchase ?\ntimes = prd.groupby(['user_id', 'product_id'])[['order_id']].count()\ntimes.columns = ['Times_Bought_N']\ntotal_orders = prd.groupby('user_id')[['order_number']].max()\ntotal_orders.columns = ['total_orders']\nfirst_order_number = prd.groupby(['user_id', 'product_id'])[['order_number']].min()\nfirst_order_number.columns = ['first_order_number']\nfirst_order_number_reset = first_order_number.reset_index()\nspan = pd.merge(total_orders, first_order_number_reset, on='user_id', how='right')\nspan['Order_Range_D'] = span.total_orders - span.first_order_number + 1\norder_ratio = pd.merge(times, span, on=['user_id', 'product_id'], how='left')\norder_ratio['Order_Ratio_user_id_X_product_id'] = order_ratio.Times_Bought_N \/ order_ratio.Order_Range_D\ndel [times, total_orders, first_order_number, span]\n\n###########\nuxp = uxp.merge(order_ratio , on=['user_id', 'product_id'], how='left')\ndel order_ratio\ngc.collect()","92e41df9":"#Which products have the highest probability of being reordered?\nproduct_var = prd.groupby('product_id')[['reordered']].mean()\nproduct_var.columns = ['reorder_ratio']\n\n#What is the average position of a product in an order?\nproduct_var['mean_add_to_cart_order'] = prd.groupby('product_id')[['add_to_cart_order']].mean()\nproduct_var.head()\n\n##########\nuxp = uxp.merge(product_var, on='product_id', how='left')\ndel product_var\ngc.collect()","b8201adc":"prd['user_max_onb'] = prd.groupby('user_id').order_number.transform(np.max)\n\nfrom collections import defaultdict\nitem_cnt    = defaultdict(int)\nitem_chance = defaultdict(int)","4929b206":"pid_back = uid_back = onb_back = None\n\nfor user_id, product_id, order_number, max_onb in prd[['user_id', 'product_id', 'order_number', 'user_max_onb']].values:\n        \n    if user_id==uid_back and product_id==pid_back and (order_number-onb_back==1):\n        item_cnt[product_id] +=1\n    if order_number!=max_onb:\n        item_chance[product_id] +=1\n    \n    uid_back = user_id\n    pid_back = product_id\n    onb_back = order_number\n    \nitem_cnt = pd.DataFrame.from_dict(item_cnt, orient='index').reset_index()\nitem_cnt.columns = ['product_id', 'item_first_cnt']\nitem_chance = pd.DataFrame.from_dict(item_chance, orient='index').reset_index()\nitem_chance.columns = ['product_id', 'item_first_chance']\ndf = pd.merge(item_cnt, item_chance, on='product_id', how='outer').fillna(0)\ndf['item_first_ratio'] = df.item_first_cnt\/df.item_first_chance","e3e89abe":"item_N2_cnt    = defaultdict(int)\nitem_N2_chance = defaultdict(int)\nitem_N3_cnt    = defaultdict(int)\nitem_N3_chance = defaultdict(int)\nitem_N4_cnt    = defaultdict(int)\nitem_N4_chance = defaultdict(int)\nitem_N5_cnt    = defaultdict(int)\nitem_N5_chance = defaultdict(int)\n\npid_back = uid_back = onb_back = None\n\nfor product_id, user_id, order_number, max_order_number in prd[['product_id', 'user_id', 'order_number','user_max_onb']].values:\n        \n    if product_id==pid_back and user_id==uid_back and (order_number-onb_back)<=2 and (max_order_number-order_number) >=2:\n        item_N2_cnt[product_id] +=1\n    if product_id==pid_back and user_id==uid_back and (max_order_number-order_number) >=2:\n        item_N2_chance[product_id] +=1\n\n    if product_id==pid_back and user_id==uid_back and (order_number-onb_back)<=3 and (max_order_number-order_number) >=3:\n        item_N3_cnt[product_id] +=1\n    if product_id==pid_back and user_id==uid_back and (max_order_number-order_number) >=3:\n        item_N3_chance[product_id] +=1\n\n    if product_id==pid_back and user_id==uid_back and (order_number-onb_back)<=4 and (max_order_number-order_number) >=4:\n        item_N4_cnt[product_id] +=1\n    if product_id==pid_back and user_id==uid_back and (max_order_number-order_number) >=4:\n        item_N4_chance[product_id] +=1\n\n    if product_id==pid_back and user_id==uid_back and (order_number-onb_back)<=5 and (max_order_number-order_number) >=5:\n        item_N5_cnt[product_id] +=1\n    if product_id==pid_back and user_id==uid_back and (max_order_number-order_number) >=5:\n        item_N5_chance[product_id] +=1\n\n    pid_back = product_id\n    uid_back = user_id\n    onb_back = order_number","d0228e60":"item_N2_cnt = pd.DataFrame.from_dict(item_N2_cnt, orient='index').reset_index()\nitem_N2_cnt.columns = ['product_id', 'item_N2_cnt']\nitem_N2_chance = pd.DataFrame.from_dict(item_N2_chance, orient='index').reset_index()\nitem_N2_chance.columns = ['product_id', 'item_N2_chance']\n\nitem_N3_cnt = pd.DataFrame.from_dict(item_N3_cnt, orient='index').reset_index()\nitem_N3_cnt.columns = ['product_id', 'item_N3_cnt']\nitem_N3_chance = pd.DataFrame.from_dict(item_N3_chance, orient='index').reset_index()\nitem_N3_chance.columns = ['product_id', 'item_N3_chance']\n\nitem_N4_cnt = pd.DataFrame.from_dict(item_N4_cnt, orient='index').reset_index()\nitem_N4_cnt.columns = ['product_id', 'item_N4_cnt']\nitem_N4_chance = pd.DataFrame.from_dict(item_N4_chance, orient='index').reset_index()\nitem_N4_chance.columns = ['product_id', 'item_N4_chance']\n\nitem_N5_cnt = pd.DataFrame.from_dict(item_N5_cnt, orient='index').reset_index()\nitem_N5_cnt.columns = ['product_id', 'item_N5_cnt']\nitem_N5_chance = pd.DataFrame.from_dict(item_N5_chance, orient='index').reset_index()\nitem_N5_chance.columns = ['product_id', 'item_N5_chance']\n\n\ndf2 = pd.merge(item_N2_cnt, item_N2_chance, on='product_id', how='outer')\ndf3 = pd.merge(item_N3_cnt, item_N3_chance, on='product_id', how='outer')\ndf4 = pd.merge(item_N4_cnt, item_N4_chance, on='product_id', how='outer')\ndf5 = pd.merge(item_N5_cnt, item_N5_chance, on='product_id', how='outer')\n\ndf_2_3_4_5 = pd.merge(pd.merge(df2, df3, on='product_id', how='outer'),\n              pd.merge(df4, df5, on='product_id', how='outer'), \n              on='product_id', how='outer').fillna(0)\n\ndf = df.merge(df_2_3_4_5, on='product_id', how='left')\n\ndf['item_N2_ratio'] = df['item_N2_cnt']\/df['item_N2_chance']\ndf['item_N3_ratio'] = df['item_N3_cnt']\/df['item_N3_chance']\ndf['item_N4_ratio'] = df['item_N4_cnt']\/df['item_N4_chance']\ndf['item_N5_ratio'] = df['item_N5_cnt']\/df['item_N5_chance']","28e05ad0":"df.fillna(0, inplace=True)\ndf.reset_index(drop=True, inplace=True)\n\ndf=df[['product_id', 'item_first_ratio', 'item_N2_ratio','item_N3_ratio', 'item_N4_ratio', 'item_N5_ratio' ]]\n\ndel [item_cnt, item_chance, item_N2_cnt, item_N2_chance ,item_N3_cnt ,item_N3_chance,  item_N4_cnt  ,item_N4_chance,  item_N5_cnt, item_N5_chance, df_2_3_4_5]\ngc.collect()\n\n\n############\nuxp = uxp.merge(df, on='product_id', how='left')\ndel df\ngc.collect()","795e47c8":"#Which aisle has the most products?\naisle_top = products.groupby('aisle_id')[['product_id']].count()\naisle_top.columns = ['total_products_aisle']\naisle_top.head()\n\nprod_temp = products.merge(aisle_top, on='aisle_id', how='left')\n\ndept_top = products.groupby('department_id')[['product_id']].count()\ndept_top.columns = ['total_products_dept']\ndept_top.head()\n\nprod_temp = prod_temp.merge(dept_top, on='department_id', how='left')\n\nprod_temp['total_products_aisle_ratio'] = prod_temp.total_products_aisle\/total_products\nprod_temp['total_products_dept_ratio'] = prod_temp.total_products_dept\/total_products\n\n\n#########\nuxp = uxp.merge(prod_temp.drop(['aisle_id', 'department_id', 'product_name'],axis=1), on='product_id', how='left')\ndel prod_temp, products\ngc.collect()","4a2887b9":"#ass 3\n#Get the average, maximum & minimum order size for each customer.\norder_size = prd.groupby(['user_id', 'order_id'])[['product_id']].count()\norder_size.columns = ['size'] \nresults = order_size.groupby('user_id')[['size']].mean()\nresults.columns = ['order_size_avg']   \nresults = results.reset_index()\n\n##########\nuxp = uxp.merge(results, on=['user_id'], how='left')\ndel [order_size, results]\ngc.collect()","c6f5b1f1":"'''#Find the size (number of products) of each order. (1)\norder_var = order_products.groupby('order_id')[['product_id']].count()\norder_var.columns= ['order_size']\norder_var = order_var.reset_index()\n\n#Find the number of orders for each basket size. (2)\nsize_results = order_var.groupby('order_size')[['order_size']].count()\nsize_results.columns = ['total_orders']\n\n# merge (2) to (1)\norder_var = order_var.merge(size_results, on='order_size', how='left')\norder_var.head()\n\n# How frequent an order has reordered products?\norder_var = order_var.set_index('order_id')\n               \norder_var['reordered_ratio_order']=order_products.groupby('order_id')[['reordered']].mean()\norder_var.head()\n\norder_var = order_var.reset_index()\n\nprd = prd.merge(order_var[['order_id', 'reordered_ratio_order']], on='order_id', how='left')\n\ndel [order_var , size_results]\ngc.collect()'''","f853c507":"uxp.info()","a1727edc":"uxp.head(30)","ffe6880e":"#Convert to category\n#prdunique = prd.iloc[:10000].nunique()\n\n#max_ob = prdunique.values.max()\n#for index,obs in enumerate(prdunique):\n   # if obs < max_ob*0.10:\n    #    prd.iloc[:,index]= prd.iloc[:,index].astype('category')","3324089f":"uxp.to_pickle('uxp.pkl')\nuxp.to_csv('uxp.csv')","98a800d8":"# 10. Exporting to pickle and .csv files","6c71fe6e":"# 1. Import the required packages and datasets from Instacart\nHere the gc package will clean-up the reserved RAM memory from Python. This will eliminate our risk to exceed the 17.2 of available RAM, that Kaggle offers.","ec8c6e58":"# 6. Create Aisle-Department features for each product\n- Derived from the products table","18875947":"# 5. Create the product features\nFeatures that are derived from the behaviour of all users towards a product","e2fae48b":"# 9. Finalizing","6f87fca1":"# 3. Create our final DataFrame - Main User X Products (uxp)\nIn this DataFrame we will store our final features that will be calculated upon the prd DataFrame. The first feature that we create (so we can constuct the DataFrame) is the total times a user bought a product.","a6b3f39e":"# 8. Order Features (Not used on uxp table)\nThese features cannot be included in the final table. We want features that describe the users and the products. Not each order!","3c56ce3a":"Now we load all the orders (prior, train, test) with their metadata (order hour\/day etc.).\nFurthermore, we load the order_products_prior which includes all the products that have been purchased in each prior order.","3eca926a":"# Introduction\nThis kernel has been created by the [Information Systems Lab](http:\/\/islab.uom.gr) at the University of Macedonia, Greece for the needs of the elective course Special Topics of Information Systems I at the [Business Administration](http:\/\/www.uom.gr\/index.php?tmima=2&categorymenu=2) department of the University of Macedonia, Greece.\n <br>\n\n# Objective\n## 1.1 Objective\nThe objective of this Kernel is to create a DataFrame that contains as index the user_id and product_id and next to it all the available features that we have created in our EDA Notebooks\n\nTo create this, we calculate the various predictor features (X) that will describe the characteristics of a product and the behaviour of a user regarding one or multiple products. We will do so by analysing the prior orders of the dataset (as we did in our EDA Notebooks). \n\n<img src=\"https:\/\/i.imgur.com\/xuX3sGu.jpg\" width=\"600\">","e4822808":"After the creation of this uxp, we can continue by including different features that describe the user, the product or the combination of them. <br>\nThe uxp table can include of these features or a selection from them. <br>\nThe next blocks can be executed as different modules.","833f3cd9":"# 2. Create a DataFrame with the orders and the products that have been purchased on prior orders\nWe perform a left join on the orders DataFrame which contains all the order (prior, train, test). The final results will have all the orders and for these that are prior we will have such rows as the total products that have been purchased.","c527b7b8":"# 4. Create the (user X product) features","48eacafa":"# 7. Create User features"}}