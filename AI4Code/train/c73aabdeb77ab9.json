{"cell_type":{"3ba29447":"code","1d2db1c5":"code","bfd20307":"code","016a1023":"code","6021d414":"code","e39153e6":"code","69ba7ebd":"code","e79c895e":"code","19a6d98e":"code","38061fd2":"code","6a4942b1":"code","c42789ed":"code","80c3c868":"code","ec174246":"code","cd1e9c71":"code","142eb2d4":"code","f3c5273e":"code","d7e1af5d":"code","9488f5ee":"code","513c66a8":"code","b9fe4e6d":"code","74a102b9":"code","ebca9ba2":"code","c6b6784f":"code","1beb5f76":"code","b8b3b92e":"code","febacb08":"code","1f0c3007":"code","332c1f4e":"code","b0349388":"code","a10a46a7":"markdown","a0185931":"markdown","3046cf70":"markdown","52be7499":"markdown","cb1254d2":"markdown","836d9ac1":"markdown","ff5a3aa5":"markdown","d4d57ab4":"markdown","07d0dbbc":"markdown","d59b3914":"markdown","a2d9356d":"markdown","bc91e0e3":"markdown","2cfa9ec8":"markdown","ceebe300":"markdown","2370b9e3":"markdown","f858dbf9":"markdown","545e903e":"markdown","19937712":"markdown","8b171a9f":"markdown","ba619b97":"markdown","c9afd888":"markdown","104df0a5":"markdown","7a019765":"markdown","d950310e":"markdown","167887c2":"markdown","a9c90ec6":"markdown"},"source":{"3ba29447":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","1d2db1c5":"import pandas as pd\ndata1=pd.read_csv('..\/input\/OnlineNewsPopularity.csv')\ndata1.head(5)","bfd20307":"data1['url'].value_counts().unique","016a1023":"\ndata=data1.iloc[:,1:]\ndata.head(5)\n","6021d414":"\n\nb=['data_channel_is_lifestyle',\n       ' data_channel_is_entertainment', 'data_channel_is_bus',\n       'data_channel_is_socmed', 'data_channel_is_tech',\n       'data_channel_is_world','weekday_is_monday', 'weekday_is_tuesday',\n       'weekday_is_wednesday', 'weekday_is_thursday', 'weekday_is_friday',\n       'weekday_is_saturday', 'weekday_is_sunday', 'is_weekend']\nfor i in b :\n    data[i].value_counts().plot.bar(color='red',figsize=(20,20))\n    \n    ","e39153e6":"data['timedelta'].value_counts()","69ba7ebd":"\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndata['shares'].describe()\nplt.figure(figsize=(10,10))\nsns.distplot(data['shares'],color='g', bins=2, hist_kws={'alpha': 0.4})","e79c895e":"\n\nimport matplotlib.pyplot as plt\ndata.corr()['shares'].sort_values(ascending = False).plot(kind='bar',figsize=(20,20))\n","19a6d98e":"data.columns","38061fd2":"import seaborn as sns\nimport matplotlib.pyplot as plot\n\ncol_names = ['timedelta', 'n_tokens_title', 'n_tokens_content','n_unique_tokens',]\nfig, ax = plot.subplots(len(col_names), figsize=(10,10))\n\nfor i, col_val in enumerate(col_names):\n\n    sns.boxplot(x=data[col_val], ax=ax[i])\n\n","6a4942b1":"col_names = [ 'n_non_stop_words', 'n_non_stop_unique_tokens','num_hrefs',\n       'num_self_hrefs']\n\nfig, ax = plot.subplots(len(col_names), figsize=(10,10))\n\nfor i, col_val in enumerate(col_names):\n\n    sns.boxplot(x=data[col_val], ax=ax[i])","c42789ed":"col_names = ['num_imgs', 'num_videos', 'average_token_length',\n       'num_keywords']\n\nfig, ax = plot.subplots(len(col_names), figsize=(10,10))\n\nfor i, col_val in enumerate(col_names):\n\n    sns.boxplot(x=data[col_val], ax=ax[i])","80c3c868":"\nsns.boxplot(x=data['shares'])\n","ec174246":"\nsns.boxplot(x=data['abs_title_subjectivity'])\nplot.show()\nsns.boxplot(x=data['abs_title_sentiment_polarity'])\nplot.show()\n\n","cd1e9c71":"fig, ax = plot.subplots(figsize=(10,10))\nax.scatter(data['n_tokens_content'],data['n_tokens_title'])","142eb2d4":"from scipy import stats\nimport numpy as np\nz=np.abs(stats.zscore(data))\nprint(z)\ndata.shape","f3c5273e":"threshold=3  # threshold limit genearlly taken as 3 or -3\nprint(np.where(z>3))\nprint(z[0][22])","d7e1af5d":"data_o=data[(z<3).all(axis=1)]\ndata_o .shape","9488f5ee":"sns.boxplot(x=data_o['n_tokens_title'])\nplot.show()\n\nfig, ax = plot.subplots(figsize=(10,10))\nax.scatter(data_o['n_tokens_content'],data_o['n_tokens_title'])","513c66a8":"#standardalization\n\ny=data_o['shares']\nX=data_o.drop(columns=['shares'],axis=1)\nfrom sklearn.preprocessing import MinMaxScaler\nfeature=X.columns.values\nscaler=MinMaxScaler(feature_range=(0,1))\nscaler.fit(X)\nX=pd.DataFrame(scaler.transform(X))\nX.columns=feature\nX.head()\n","b9fe4e6d":"#PCA\n\nfrom sklearn.decomposition import PCA\npca =PCA(n_components=2)\n\npc=pca.fit_transform(X)\nprincipaldf= pd.DataFrame(data=pc ,columns=['Principal Component 1','Principal Component 2'])\nprincipaldf.head()\nfinaldf = pd.concat([principaldf, y], axis = 1)\nfinaldf.head()\n","74a102b9":"from sklearn.model_selection import train_test_split\nprincipaldf_train,principaldf_test,y_train,y_test= train_test_split(principaldf,y,test_size=0.33 ,random_state=42)\n\nprint(principaldf_train.shape)\nprint(principaldf_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.metrics import  mean_squared_error ,r2_score\n\n\nfrom sklearn import metrics\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import roc_auc_score\n\n","ebca9ba2":"\n# Logistic regression\n\nmodel=LogisticRegression()\noutput=model.fit(principaldf_train ,y_train)\n\nPredict=model.predict(principaldf_test)\nprint(\"Logistc Regression Accuracy\")\nprint(metrics.accuracy_score(y_test,Predict)*100)\n","c6b6784f":"model=LinearRegression()\noutput=model.fit(principaldf_train ,y_train)\n\nPredict=model.predict(principaldf_test)\nprint(\"Mean square error\")\nprint(mean_squared_error(y_test,Predict))\nprint(\"r2_score\")\nprint(r2_score(y_test,Predict))","1beb5f76":"#support vector machine\n\nfrom sklearn.svm import SVC  \nmodel = SVC(kernel='linear') \n\n\noutput=model.fit(principaldf_train ,y_train)\n\nPredict=model.predict(principaldf_test)\nprint(\"SVM Accuracy\")\nprint(metrics.accuracy_score(y_test,Predict)*100)\n","b8b3b92e":"# Decision tree\n\nfrom sklearn.tree import DecisionTreeRegressor\nmodel1=DecisionTreeRegressor()\noutput=model1.fit(principaldf_train ,y_train)\n\nPredict1=model1.predict(principaldf_test)\nprint(\"Decisipn tree Regression Accuracy\")\nprint(metrics.accuracy_score(y_test,Predict1)*100)\n","febacb08":"\nfrom sklearn import metrics\n\n\n\n\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test= train_test_split(X,y,test_size=0.33 ,random_state=42)\n\n#print(X_train.shape)\n#print(X_test.shape)\n#print(y_train.shape)\n#print(y_test.shape)\n\n\n","1f0c3007":"\nfrom sklearn.tree import DecisionTreeRegressor\nmodel1=DecisionTreeRegressor()\noutput=model1.fit(X_train ,y_train)\n\nPredict1=model1.predict(X_test)\nprint(\"Decisipn tree Regression Accuracy\")\nprint(metrics.accuracy_score(y_test,Predict1)*100)","332c1f4e":"from sklearn.svm import SVC  \nmodel = SVC(kernel='linear') \n\n\noutput=model.fit(X_train ,y_train)\n\nPredict=model.predict(X_test)\nprint(\"SVM Accuracy\")\nprint(metrics.accuracy_score(y_test,Predict)*100)","b0349388":"from sklearn.neighbors import KNeighborsClassifier\nmodel1=KNeighborsClassifier()\noutput=model1.fit(X_train ,y_train)\n\nPredict1=model1.predict(X_test)\nprint(\"Decisipn tree Regression Accuracy\")\nprint(metrics.accuracy_score(y_test,Predict1)*100)","a10a46a7":"# Standardalization for range 0 to 1 MinMaxScaler","a0185931":"# Logistic Regression","3046cf70":"# Removing outlier","52be7499":"# Model fitting without using PCA ","cb1254d2":"# which page having highest shares count that means that page is popular . we are going to calculate shares count using best model having highest Accuracy","836d9ac1":"# Dropping url column","ff5a3aa5":"# SVM","d4d57ab4":"# Reading data set","07d0dbbc":"# Decision tree","d59b3914":"# Calculating Z score ","a2d9356d":"# Decision Tree without PCA","bc91e0e3":"# checking url column values are unique or not","2cfa9ec8":"# BOXPLOT  for outlier detection of different features","ceebe300":"# plotting dependent variable","2370b9e3":"# Model fitting with PCA","f858dbf9":"# PCA : for Dimentionality Reduction","545e903e":"# Scatter plot for two variable at a time to check outlier","19937712":"# Features of data set","8b171a9f":"# SVM without PCA","ba619b97":"# Linear Regression","c9afd888":"# First array showing list of row num , second list of column num of data which are outlier","104df0a5":"Model fitting with using PCA","7a019765":"# checking  coorelation of dependent variable with each independent variable","d950310e":"# we can see outlier has been removed now","167887c2":"#  Dependent variable ","a9c90ec6":"# These are categorical variable"}}