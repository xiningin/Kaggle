{"cell_type":{"acc7b5a4":"code","67243dd9":"code","2e8a6449":"code","bdbf395d":"code","69bebbeb":"code","40697a6e":"code","330afcf6":"code","1bf492bc":"code","f1644851":"code","e3b8badd":"code","3639fc8e":"code","7c7fb345":"code","a336fd27":"code","45a0940d":"code","5249c7e8":"code","f5278243":"code","f70125ee":"markdown","1e2699d1":"markdown","9bc3cbe1":"markdown","cef81bac":"markdown","3716dc1f":"markdown","8a1c5c62":"markdown","76715c90":"markdown","ebddbc2f":"markdown"},"source":{"acc7b5a4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","67243dd9":"data = pd.read_csv('\/kaggle\/input\/loan-default-prediction\/Default_Fin.csv')\ndata.head()","2e8a6449":"print(data.groupby(['Defaulted?', 'Employed'])[['Bank Balance', 'Annual Salary']].describe())\npd.crosstab(data['Employed'], data['Defaulted?'], normalize = 'index').round(2)","bdbf395d":"# defaulters vs bank balance distributions\nfig = plt.figure(figsize=(10,6))\n\nsns.kdeplot(data[data['Defaulted?']==1]['Bank Balance'])\nsns.kdeplot(data[data['Defaulted?']==0]['Bank Balance'])\n\nfig.legend(labels=['Defaulted', 'Not Defaulted'])\nplt.title('Based on Bank Balance')\nplt.show()","69bebbeb":"# defaulters vs bank balance distributions\nfig = plt.figure(figsize=(10,6))\n\nsns.kdeplot(data[data['Defaulted?']==1]['Annual Salary'])\nsns.kdeplot(data[data['Defaulted?']==0]['Annual Salary'])\n\nfig.legend(labels=['Defaulted', 'Not Defaulted'])\nplt.title('Based on Annual Salary')\nplt.show()","40697a6e":"data.groupby('Defaulted?').size().plot.pie(autopct='%1.1f%%', title='Defaulted?');\nplt.show()\nlabel=[1,0]\nplt.pie(data['Employed'].value_counts(), autopct='%1.1f%%',labels=label);\nplt.title('Employed?');","330afcf6":"import scipy.stats as st\nprint(st.ks_2samp(data['Annual Salary'], data['Bank Balance']))\n# based on the pvalue we may say that these two features are highly correlated\n# as the number of features are already small we are ignoring it","1bf492bc":"from sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics, preprocessing\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.svm import SVC","f1644851":"feature_cols = ['Employed', 'Bank Balance', 'Annual Salary']\n\n''' Rescaling to [0,1] '''\nscaler = MinMaxScaler()\ndata[feature_cols] = scaler.fit_transform(data[feature_cols])","e3b8badd":"X = data[feature_cols]\ny = data['Defaulted?']\n\nvalidation_size = 0.20\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=validation_size, \n                                                    random_state=4, stratify=y)","3639fc8e":"model = LogisticRegression(class_weight='balanced')\nmodel.fit(X_train, y_train)\nprint(model.coef_)","7c7fb345":"y_pred = model.predict(X_train)\n\nprint('Train metrics...')\nprint(confusion_matrix(y_train, y_pred))\nprint(classification_report(y_train, y_pred))\n\ny_pred = model.predict(X_test)\n\nprint('Test metrics...')\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))","a336fd27":"''' metrics on original data '''\ny_pred = model.predict(data[feature_cols])\n\ndef make_cm(matrix, columns):\n    n = len(columns)\n    act = ['actual defaulted?'] * n\n    pred = ['prediction defaulted ?'] * n\n\n    cm = pd.DataFrame(matrix, \n        columns=[pred, columns], index=[act, columns])\n    return cm\n\ndf_matrix=make_cm(\n    confusion_matrix(data['Defaulted?'], y_pred),['No','Yes'])\n\ndisplay(df_matrix)\nprint(classification_report(data['Defaulted?'], y_pred))","45a0940d":"model = SVC(class_weight={0: 1, 1: 100})\nmodel.fit(X_train, y_train)","5249c7e8":"y_pred = model.predict(X_train)\n\nprint('Train metrics...')\nprint(confusion_matrix(y_train, y_pred))\nprint(classification_report(y_train, y_pred))\n\ny_pred = model.predict(X_test)\n\nprint('Test metrics...')\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))","f5278243":"''' metrics on original data '''\ny_pred = model.predict(data[feature_cols])\n\ndef make_cm(matrix, columns):\n    n = len(columns)\n    act = ['actual defaulted?'] * n\n    pred = ['prediction defaulted ?'] * n\n\n    cm = pd.DataFrame(matrix, \n        columns=[pred, columns], index=[act, columns])\n    return cm\n\ndf_matrix=make_cm(\n    confusion_matrix(data['Defaulted?'], y_pred),['No','Yes'])\n\ndisplay(df_matrix)\nprint(classification_report(data['Defaulted?'], y_pred))","f70125ee":"# Model 2: SVM","1e2699d1":"# Model 1: Logistic Regression","9bc3cbe1":"# correlation between features or with target","cef81bac":"## Understanding Data Distribution","3716dc1f":"On average, defaulters have higher bank balance than non-defaulters.","8a1c5c62":"On average, number of defaulters with higher salary are lesser than lower annual salary","76715c90":"# Training Model","ebddbc2f":"3% are defaulters in Employed<br>\n4.5% are defaulters in Unemployed"}}