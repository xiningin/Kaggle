{"cell_type":{"c86680c8":"code","e3734516":"code","551b9f10":"code","99076e83":"code","26c85e3d":"code","3275a35c":"code","99f28861":"code","9e33f9df":"code","6a52baf4":"code","7f2a6d2a":"code","38ecbc6d":"code","a30c2880":"code","2ba42d30":"code","c563626c":"code","b285a85d":"code","f6b258df":"code","4f29e98a":"code","58bbb0da":"code","dfc320e7":"code","d420c5ca":"code","bb21a5ba":"code","e22319af":"code","a45c3cfd":"code","540156ad":"code","c3486e84":"code","653f5e57":"code","e86ed9b8":"code","8396bed2":"code","77be5e32":"code","21bb0119":"code","95bfd6f9":"code","45e7cb69":"code","b91e2b37":"code","8f69ba74":"code","04466d6b":"code","872e23e7":"code","27b08817":"code","0a2df148":"code","867426d7":"code","f78e4269":"code","261cdf50":"code","fa2ef198":"code","47c856c0":"code","ca70b893":"code","6aa65341":"code","17657cd7":"code","fe390c54":"code","2753b427":"code","ff3e0d2a":"code","59572fee":"code","38324e35":"code","dc86dbab":"code","e33168af":"code","11c072ad":"code","9bd2b9d9":"code","4ea91aa2":"code","530407b5":"code","0c6efebe":"code","3fd108d9":"code","0ad73e87":"code","d9ff47da":"code","0c64595c":"markdown","07cc406c":"markdown","a967eb55":"markdown","e70350fc":"markdown","c2b3fb47":"markdown","5e6e1324":"markdown","d72928b7":"markdown","0bcea35a":"markdown","41faf430":"markdown","32610c52":"markdown","2288590e":"markdown","a022059d":"markdown"},"source":{"c86680c8":"!pip install python-binance pandas mplfinance","e3734516":"from binance import Client, ThreadedWebsocketManager, ThreadedDepthCacheManager\nimport pandas as pd\n# Binance dependencies that we are importing here !","551b9f10":"apikey = 'Nfsrvy1PGQkwqQfefM5fgR1JjdHyQr2CWZhKSjTMSTtopbg0vUoLjTSvFTI4D4Mo'\nsecret = 'e5tDmfVaMROqTLD17wNChVUD6WpesIeas9vdgrybPL33NDVCDP3lQvTvP7GmKiqu'","99076e83":"client = Client(apikey, secret)\n#set-up th client and authenticate the binance ","26c85e3d":"crypto = client.get_all_tickers()","3275a35c":"crypto\n# Getting every singly currency pair with respect to their tickers & price (USDD)","99f28861":"crypto[1]['price']","9e33f9df":"crypto_df = pd.DataFrame(crypto)\n#Converting these strings into Dataframe ","6a52baf4":"crypto_df.head()","7f2a6d2a":"crypto_df.set_index('symbol', inplace=True)","38ecbc6d":"crypto_df.head()","a30c2880":"float(crypto_df.loc['BNBBTC']['price'])","2ba42d30":"#Getting market depth if you are in BTC !\ndepth = client.get_order_book(symbol='BTCUSDT')","c563626c":"depth\n# getting all bids with last updated time ","b285a85d":"depth_df = pd.DataFrame(depth['asks'])\ndepth_df.columns = ['Price', 'ASK_Volume']\ndepth_df.head()","f6b258df":"depth_df1 = pd.DataFrame(depth['bids'])\ndepth_df1.columns = ['Price', 'BIDS_Volume']\ndepth_df1.head()","4f29e98a":"depth_df.dtypes","58bbb0da":"client.get_historical_klines??","dfc320e7":"historical = client.get_historical_klines('BNBBTC', Client.KLINE_INTERVAL_1DAY, '1 Jan 2011')","d420c5ca":"#  [\n#   [\n#     1499040000000,      \/\/ Open time\n#     \"0.01634790\",       \/\/ Open\n#     \"0.80000000\",       \/\/ High\n#     \"0.01575800\",       \/\/ Low\n#     \"0.01577100\",       \/\/ Close\n#     \"148976.11427815\",  \/\/ Volume\n#     1499644799999,      \/\/ Close time\n#     \"2434.19055334\",    \/\/ Quote asset volume\n#     308,                \/\/ Number of trades\n#     \"1756.87402397\",    \/\/ Taker buy base asset volume\n#     \"28.46694368\",      \/\/ Taker buy quote asset volume\n#     \"17928899.62484339\" \/\/ Ignore.\n#   ]\n# ]","bb21a5ba":"historical","e22319af":"hist_df = pd.DataFrame(historical)","a45c3cfd":"hist_df.columns = ['Open Time', 'Open', 'High', 'Low', 'Close', 'Volume', 'Close Time', 'Quote Asset Volume', \n                    'Number of Trades', 'TB Base Volume', 'TB Quote Volume', 'Ignore']","540156ad":"hist_df.head(5)","c3486e84":"hist_df.shape","653f5e57":"hist_df.dtypes","e86ed9b8":"hist_df['Open Time'] = pd.to_datetime(hist_df['Open Time']\/1000, unit='s')\nhist_df['Close Time'] = pd.to_datetime(hist_df['Close Time']\/1000, unit='s')","8396bed2":"numeric_columns = ['Open', 'High', 'Low', 'Close', 'Volume', 'Quote Asset Volume', 'TB Base Volume', 'TB Quote Volume']","77be5e32":"hist_df[numeric_columns] = hist_df[numeric_columns].apply(pd.to_numeric, axis=1)","21bb0119":"hist_df.tail(50)","95bfd6f9":"hist_df.dtypes","45e7cb69":"hist_df.describe()","b91e2b37":"hist_df.info()","8f69ba74":"hist_df.isnull().sum()","04466d6b":"import mplfinance as mpf\nimport seaborn as sns\nsns.set()","872e23e7":"hist_df.set_index('Close Time').tail(100)\n","27b08817":"mpf.plot(hist_df.set_index('Close Time').head(300))","0a2df148":"mpf.plot(hist_df.set_index('Close Time').tail(170), \n        type='candle', style='charles', \n        volume=True, \n        title='BNBBTC Last 120 Days', \n        mav=(10,20,30))","867426d7":"import numpy as np\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n","f78e4269":"hist_df","261cdf50":"df = hist_df.copy()","fa2ef198":"df = df.drop(['Close Time','Quote Asset Volume','Number of Trades','TB Base Volume','TB Quote Volume','Ignore'],axis = 1)\ndf.head()","47c856c0":"features = df.drop(['Open Time','Close'],axis = 1)\ntarget = df['Close']","ca70b893":"df.describe()","6aa65341":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(features,target,test_size = 0.27,random_state = 42)","17657cd7":"features.head()","fe390c54":"target.head()","2753b427":"plt.figure(figsize=(15, 5));\nplt.plot(df.Open.values, color='red', label='open')\nplt.plot(df.Close.values, color='green', label='close')\nplt.plot(df.Low.values, color='blue', label='low')\nplt.plot(df.High.values, color='black', label='high')\nplt.title('Bitcoin Crypto Price')\nplt.xlabel('time [days]')\nplt.ylabel('price')\nplt.legend(loc='best')\nplt.show()","ff3e0d2a":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(features.values,target.values,test_size = 0.27,random_state = 42)","59572fee":"from scipy.stats import norm\nfrom sklearn.ensemble import RandomForestRegressor","38324e35":"rfg =RandomForestRegressor()\nrfg.fit(x_train,y_train)","dc86dbab":"prediction = rfg.predict(x_test)\nprediction[1]","e33168af":"y_test[1]","11c072ad":"from sklearn.metrics import mean_absolute_error as mae\n\nprint(f'Absolute Mean Error:{mae(y_test, prediction)}')","9bd2b9d9":"df['MA50'] = df['Close'].rolling(50).mean()\n#plot the moving average\nplt.figure(figsize=(10, 8))\ndf['MA50'].plot(label='Moving Average')\ndf['Close'].plot(label='Close Price')\nplt.legend()\nplt.show()","4ea91aa2":"df['PriceDiff'] = df['Close'].shift(-1) - df['Close']\ndf['Return'] = df['PriceDiff'] \/df['Close']\ndf['Return'].plot(figsize=(10,5))\nplt.title('Price Return', size = 15)","530407b5":"df['MA10'] = df['Close'].rolling(10).mean()\ndf['Shares'] = [1 if df.loc[ei, 'MA10']>df.loc[ei, 'MA50'] else 0 for ei in df.index]\ndf['Close1'] = df['Close'].shift(-1)\ndf['Profit'] = [df.loc[ei, 'Close1'] - df.loc[ei, 'Close'] if df.loc[ei, 'Shares']==1 else 0 for ei in df.index]\ndf['Profit'].plot(figsize=(10,5))\nplt.axhline(y=0, color='red')\nplt.title('Profit from Moving Stock', size = 15)","0c6efebe":"df['wealth'] = df['Profit'].cumsum()\ndf['wealth'].plot(figsize=(10,5))\nplt.title('Total money you have made: {}'.format(df.loc[df.index[-2], 'wealth']), size = 15)","3fd108d9":"df['LogReturn'] = np.log(df['Close']).shift(-1) - np.log(df['Close'])\nmu = df['LogReturn'].mean()\nsigma = df['LogReturn'].std(ddof=1)\nprob_return1 = norm.cdf(-0.10, mu, sigma)\nprint(f'The probability of dropping over 10% in one day : {prob_return1}')","0ad73e87":"mu220 = 365*mu\nsigma220 = (365**0.5) * sigma\nprob_return2 = norm.cdf(-0.10, mu220, sigma220)\nprint('The probability of dropping over 25% over a year: ', prob_return2)","d9ff47da":"VaR = norm.ppf(0.05, mu, sigma)\nprint('Single day value at risk is: ', VaR)","0c64595c":"# SETTING UP AN API FROM BINANCE ","07cc406c":"# Preprocessing on the Histoical dataframe","a967eb55":"# Grabbing Data from Binance ","e70350fc":"# Authentication ","c2b3fb47":"![image.png](attachment:image.png)\n![image-2.png](attachment:image-2.png)\n## Highlighted in yellow: BID\n## Highlighted in red : Request\n## with ASK ","5e6e1324":"# Analysis","d72928b7":"### Checking Null Values ","0bcea35a":"# Installing Python-Binance & MPLFinance","41faf430":"# Visualization ","32610c52":"Taker buy means the buyer is the taker and seller is the maker.\n\nBase asset means the quantity is expressed as the amount of coins that were received by the buyer (as opposed to quote asset which would be the amount paid by the buyer in btc\/eth\/usdt, depending on the market)\n\n'Volume' is the total amount of traded coins in the timeframe, disregarding which side is the taker\n\n\n'Volume' - ' Taker buy base asset volume' + ' Maker buy base asset volume'\n\n------------------------\n\nThe Maker is the person who puts an order in the orderbook. Taker is the one that matches an existing order.\n\nAn order goes through immediately once a match can be made, so there is always a maker and a taker. Even when both are using Limit orders. The one that comes second gets matched immediately, therefore his\/her order never gets in the book and he\/she is a taker.","2288590e":"# Fetching Historical Data ","a022059d":"# Getting Depth "}}