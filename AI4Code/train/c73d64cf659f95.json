{"cell_type":{"d4a44fc8":"code","86237909":"code","d846c978":"code","873b78a4":"code","75e4830b":"code","dd7175ff":"code","57b115ce":"code","b1120d08":"code","bf001587":"code","a74d6a4f":"code","0b5f9c67":"code","ac53a0f2":"code","fb78f0f9":"code","4172d2d7":"code","e70ee4e0":"code","6163d25d":"code","4f77e17d":"code","ad111fd4":"code","1ed91d4f":"code","673bce3f":"code","6a44df51":"code","a7030004":"code","a988a709":"code","c5b561f6":"code","8e3b8e34":"code","cd72213b":"code","79c4e6fe":"code","8e7dc0ed":"code","cb99891a":"code","5de56fa4":"code","8e99770f":"code","27c2b9c7":"code","8f0a943d":"code","c725a886":"code","086c2787":"code","d52f7a74":"code","a202ec0b":"code","baa1541b":"code","24eb25d0":"code","92c94312":"code","bb705bbd":"code","5bc7a329":"code","d51cd797":"code","5f10c402":"code","8ca784d8":"code","311be1cb":"code","0561be56":"code","9383a943":"code","55c84070":"code","5e246f53":"code","62e73a27":"code","93319cb9":"code","586fa3b7":"code","a5a7ebc4":"code","9422492a":"code","fcb2a39a":"code","fa441b97":"code","40103289":"code","2f341f6c":"code","c3acf8ad":"code","35e0e024":"code","2d4b1a8e":"code","2f45f5e7":"code","03f6d4dc":"code","9800c457":"code","e982b76a":"code","cfe605d4":"code","e6366d69":"code","b0a267b0":"code","aa0ce123":"code","8d30ccd3":"code","dc4c3cfd":"code","08b4cc8e":"code","7f274e3b":"code","5d8fc574":"code","fe998c38":"code","ea18f8c3":"code","17312149":"code","e0391b15":"code","bf4a0644":"code","f1465ddc":"code","313cc96f":"code","f0c6e605":"code","e698b649":"code","83f5a4e3":"code","7cf46aeb":"code","23db1a33":"code","39373419":"code","d0d0f4aa":"code","577701b9":"code","1ebc8a98":"code","cb912d78":"code","ae560d31":"code","cc5acb47":"code","a1ddca29":"code","4d1d1fc8":"code","21def8d3":"code","354f7ffb":"code","c1599561":"code","d5d8ae04":"code","4f25a29b":"code","ef346ebf":"code","dece3535":"code","9ebb65d1":"code","b3bddb27":"code","3762e47f":"code","a33896e4":"code","0e21f3b3":"markdown","acedec28":"markdown","26aa64fe":"markdown","e21cd935":"markdown","fe5aed5d":"markdown","f7be6949":"markdown","ef38ca49":"markdown","ffd610e5":"markdown","2f3b6773":"markdown","c7dc92e9":"markdown","6d915fe0":"markdown","eb237581":"markdown","096b649d":"markdown","62683867":"markdown","df8a1344":"markdown","73ef755b":"markdown","70a9c273":"markdown","f1c26c6b":"markdown","0ff49aac":"markdown","7e08ab40":"markdown","4e2f1af2":"markdown","80f28a59":"markdown","1092712c":"markdown","e17d8317":"markdown","b129d3f8":"markdown","d3014044":"markdown","8e4e132f":"markdown","45af3fd6":"markdown"},"source":{"d4a44fc8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","86237909":"%load_ext autoreload\n%autoreload 2\n%matplotlib inline","d846c978":"import os\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport re\nimport math\nimport graphviz\nimport scipy\n# import ggplot\n\n# from pandas_summary import DataFrameSummary\nfrom pandas.api.types import is_string_dtype, is_numeric_dtype\nfrom sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\nfrom IPython.display import display\nfrom sklearn.tree import export_graphviz\nfrom sklearn.ensemble import forest\nfrom sklearn_pandas import DataFrameMapper\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom scipy.cluster import hierarchy as hc\nfrom pdpbox import pdp\nfrom plotnine import *\n# from concurrent.futures import ProcessPoolExecutor\n\nfrom sklearn import metrics","873b78a4":"# ??display # Uncomment for Documentation ","75e4830b":"def add_datepart(df, fldname, drop = True):\n    fld = df[fldname]\n    if not np.issubdtype(fld.dtype, np.datetime64):\n        df[fldname] = fld = pd.to_datetime(fld, infer_datetime_format = True)\n    targ_pre = re.sub(\"[Dd]ate$\", '', fldname)\n    for n in ('Year', 'Month', 'Week', 'DayofWeek', 'DayofYear', 'Is_month_end', 'Is_month_start', 'Is_quarter_end', 'Is_quarter_start', 'Is_year_end', 'Is_year_start'):\n        df[targ_pre + n] = getattr(fld.dt, n.lower())\n    df[targ_pre + 'Elasped'] = fld.astype(np.int64) \/\/ 10**9\n    if drop: df.drop(fldname, axis = 1, inplace = True)","dd7175ff":"def apply_cats(df, trn):\n    for n, c in df.items():\n        if trn[n].dtype.name == \"category\":\n            df[n] = pd.Categorical(c, categories = trn[n].cat.categories, ordered = True )","57b115ce":"def train_cats(df):\n    for n,c in df.items():\n        if is_string_dtype(c): df[n] = c.astype('category').cat.as_ordered()","b1120d08":"def fix_missing(df, col, name, na_dict):\n    if is_numeric_dtype(col):\n        if pd.isnull(col).sum() or (name in na_dict): \n            df[name + '_na'] = pd.isnull(col)\n            filler = na_dict[name] if name in na_dict else col.median()\n            df[name] = col.fillna(filler)\n            na_dict[name] = filler\n    return na_dict","bf001587":"def proc_df(df, y_fld=None, skip_flds=None, ignore_flds=None, do_scale=False, na_dict=None, prepoc_fn=None, max_n_cat=None,\n           subset=None, mapper=None):\n    if not ignore_flds: ignore_flds=[]\n    if not skip_flds: skip_flds=[]\n    if subset:\n        df = get_sample(df, subset)\n    else:\n        df = df.copy()\n    ignored_flds = df.loc[:, ignore_flds]\n    df.drop(ignore_flds, axis=1, inplace=True)\n    if prepoc_fn: prepoc_fn(df)\n    if y_fld is None: y=None\n    else:\n        if not is_numeric_dtype(df[y_fld]): df[y_fld] = pd.Categorical(df[y_fld]).codes\n        y = df[y_fld].values\n        skip_flds += [y_fld]\n    df.drop(skip_flds, axis=1, inplace=True)\n    \n    if na_dict is None: na_dict = {}\n    else: na_dict = na_dict.copy()\n    na_dict_initial = na_dict.copy()\n    for n, c in df.items(): na_dict = fix_missing(df, c, n, na_dict)\n    if len(na_dict_initial.keys()) > 0:\n        df.drop([a + '_na' for a in list(set(na_dict.keys()) - set(na_dict_initial.keys()))], axis=1, inplace=True)\n    if do_scale: mapper = scale_vars(df, mapper)\n    for n, c in df.items(): numericalize(df, c, n, max_n_cat)\n    df = pd.get_dummies(df, dummy_na=True)\n    df = pd.concat([ignored_flds, df], axis=1)\n    res = [df, y, na_dict]\n    if do_scale: res = res + [mapper]\n    return res","a74d6a4f":"def numericalize(df, col, name, max_n_cat):\n    if not is_numeric_dtype(col) and (max_n_cat is None or col.nunique()>max_n_cat):\n        df[name] = col.cat.codes+1","0b5f9c67":"def split_vals(a, n):\n    return a[:n].copy(), a[n:].copy()","ac53a0f2":"def get_sample(df, n):\n    idxs = sorted(np.random.permutation(len(df))[:n])\n    return df.iloc[idxs].copy()","fb78f0f9":"def set_rf_samples(n):\n    forest._generate_sample_indices = (lambda rs, n_samples:\n                                      forest.check_random_state(rs).randit(0, n_samples, n))","4172d2d7":"def reset_rf_samples():\n    forest._generate_sample_indices = (lambda rs, n_samples:\n                                      forest.check_random_state(rs).randit(0, n_samples, n_samples))","e70ee4e0":"def scale_vars(df, mapper):\n    warnings.filterwarnings(\"ignore\", category = sklearn.exceptions.DataConversionWarning)\n    if mapper is None:\n        map_f = [([n], StandardScaler()) for n in df.columns if is_numeric_dtype(df[n])]\n        mapper = DataFrameMapper(map_f).fit(df)\n    df[mapper.transformed_names_] = mapper.transform(df)\n    return mapper","6163d25d":"def rmse(x, y):\n    return math.sqrt(((x-y)**2).mean())\n\ndef print_score(m):\n    res = [rmse(m.predict(X_train), y_train),\n          rmse(m.predict(X_valid), y_valid),\n          m.score(X_train, y_train),\n          m.score(X_valid, y_valid)]\n    if hasattr(m, 'oob_score_'):\n        res.append(m.oob_score_)\n    print(res)","4f77e17d":"df_raw = pd.read_csv('\/kaggle\/input\/bluebook-for-bulldozers\/Train.zip', low_memory = False, parse_dates = [\"saledate\"])","ad111fd4":"df_raw.SalePrice","1ed91d4f":"def display_all(df):\n    with pd.option_context(\"display.max_rows\", 1000):\n        with pd.option_context(\"display.max_columns\", 1000):\n            display(df)\n            \ndisplay_all(df_raw.tail().transpose())","673bce3f":"df_raw.SalePrice = np.log(df_raw.SalePrice)","6a44df51":"df_raw.SalePrice","a7030004":"df_raw.saledate","a988a709":"fld = df_raw.saledate\nfld.dt.year","c5b561f6":"add_datepart(df_raw, \"saledate\")\ndf_raw.saleYear.head()","8e3b8e34":"df_raw.columns","cd72213b":"df_raw.head()","79c4e6fe":"train_cats(df_raw)","8e7dc0ed":"df_raw.UsageBand.cat.categories","cb99891a":"df_raw.UsageBand.cat.set_categories([\"High\", \"Medium\", \"Low\"], ordered = True, inplace = True)","5de56fa4":"display_all(df_raw.isnull().sum().sort_index()\/len(df_raw))","8e99770f":"os.makedirs('tmp', exist_ok = True)\ndf_raw.to_feather('tmp\/raw')","27c2b9c7":"df_raw = pd.read_feather('tmp\/raw')\ndf_trn, y_trn, nas = proc_df(df_raw, \"SalePrice\")","8f0a943d":"n_valid = 12000\nn_trn = len(df_trn) - n_valid\nX_train, X_valid = split_vals(df_trn, n_trn)\ny_train, y_valid = split_vals(y_trn, n_trn)\n\nraw_train, raw_valid = split_vals(df_raw, n_trn)","c725a886":"df_raw","086c2787":"set_rf_samples(50000)","d52f7a74":"m = RandomForestRegressor(n_estimators=80, n_jobs=-1, min_samples_leaf=3, max_features=0.5, oob_score=True)\n%prun m.fit(X_train, y_train)\nprint_score(m)","a202ec0b":"%time preds = np.stack([t.predict(X_valid) for t in m.estimators_])\nnp.mean(preds[:, 0]), np.std(preds[:, 0])","baa1541b":"x = raw_valid.copy()\nx['pred_std'] = np.std(preds, axis=0)\nx['pred'] = np.mean(preds, axis=0)\nx.Enclosure.value_counts().plot.barh()","24eb25d0":"flds = ['Enclosure', 'SalePrice', 'pred', 'pred_std']\nenc_sum = x[flds].groupby(\"Enclosure\", as_index=False).mean()\nenc_sum","92c94312":"enc_sum = enc_sum[~pd.isnull(enc_sum.SalePrice)]\nenc_sum.plot(\"Enclosure\", \"SalePrice\", \"barh\", xlim=(0, 11))","bb705bbd":"enc_sum.plot(\"Enclosure\", \"pred\", \"barh\", xerr='pred_std', alpha=0.7, xlim=(0, 11))","5bc7a329":"raw_valid.ProductSize.value_counts().plot.barh()","d51cd797":"flds = ['ProductSize', 'SalePrice', 'pred', 'pred_std']\nsumm = x[flds].groupby(\"ProductSize\").mean()\nsumm","5f10c402":"(summ.pred_std \/ summ.pred).sort_values(ascending=False)","8ca784d8":"def rf_feat_importance(m, df):\n    return pd.DataFrame({'cols':df.columns, 'imp':m.feature_importances_}).sort_values('imp', ascending=False)","311be1cb":"fi = rf_feat_importance(m, df_trn)\nfi[:10]","0561be56":"fi.plot('cols', 'imp', figsize=(10, 6), legend=False)","9383a943":"def plot_fi(fi):\n    return fi.plot(\"cols\", 'imp', 'barh', figsize=(12, 7), legend=False)","55c84070":"plot_fi(fi[:30])","5e246f53":"to_keep = fi[fi.imp > 0.005].cols\nlen(to_keep)","62e73a27":"df_keep = df_trn[to_keep].copy()\nX_train, X_valid = split_vals(df_keep, n_trn)","93319cb9":"m = RandomForestRegressor(n_estimators=80, n_jobs=-1, min_samples_leaf=3, max_features = 0.5, oob_score=True)\nm.fit(X_train, y_train)\nprint_score(m)","586fa3b7":"fi = rf_feat_importance(m, df_keep)\nplot_fi(fi)","a5a7ebc4":"df_trn2, y_trn, nas = proc_df(df_raw, \"SalePrice\", max_n_cat = 7)\nX_train, X_valid = split_vals(df_trn2, n_trn)","9422492a":"m = RandomForestRegressor(n_estimators=80, n_jobs=-1, min_samples_leaf=3, max_features=0.5, oob_score=True)\nm.fit(X_train, y_train)\nprint_score(m)","fcb2a39a":"fi = rf_feat_importance(m, df_trn2)\nplot_fi(fi[:25])","fa441b97":"corr = np.round(scipy.stats.spearmanr(df_keep).correlation, 4)\ncorr_condensed = hc.distance.squareform(1 - corr)\nz = hc.linkage(corr_condensed, method=\"average\")\nfig = plt.figure(figsize=(16, 10))\ndendrogram = hc.dendrogram(z, labels = list(df_keep.columns), orientation = \"left\", leaf_font_size=16)\nplt.show()","40103289":"def get_oob(df):\n    m = RandomForestRegressor(n_estimators=40, n_jobs=-1, min_samples_leaf=5, max_features=0.5, oob_score=True)\n    x, _ = split_vals(df, n_trn)\n    m.fit(x, y_train)\n    return m.oob_score_","2f341f6c":"get_oob(df_keep)","c3acf8ad":"df = df_keep.copy()","35e0e024":"for c in ('saleYear', 'saleElasped', 'fiModelDesc', 'fiBaseModel', 'Grouser_Tracks', 'Coupler_System'):\n    print(c, get_oob(df.drop(c, axis=1)))","2d4b1a8e":"df1 = df_keep.copy()\nto_drop = ['saleYear', 'fiModelDesc', 'Grouser_Tracks']\nget_oob(df1.drop(to_drop, axis=1))","2f45f5e7":"df_keep.drop(to_drop, axis=1, inplace=True)\nX_train, X_valid = split_vals(df_keep, n_trn)","03f6d4dc":"np.save('tmp\/keep_cols.npy', np.array(df_keep.columns))","9800c457":"keep_cols = np.load('tmp\/keep_cols.npy', allow_pickle=True)\ndf_keep = df_trn[keep_cols]","e982b76a":"reset_rf_samples()","cfe605d4":"m = RandomForestRegressor(n_estimators=80, n_jobs=-1, min_samples_leaf=3, max_features=0.5, oob_score=True)\nm.fit(X_train, y_train)\nprint_score(m)","e6366d69":"set_rf_samples(50000)","b0a267b0":"df_trn2, y_trn, nas = proc_df(df_raw, 'SalePrice', max_n_cat=7)\nX_train, X_valid = split_vals(df_trn2, n_trn)\nm = RandomForestRegressor(n_estimators=80, n_jobs=-1, min_samples_leaf=3, max_features=0.6)\nm.fit(X_train, y_train)\n# print_score(m)","aa0ce123":"plot_fi(rf_feat_importance(m, df_trn2)[:10])","8d30ccd3":"df_raw.plot(\"YearMade\", \"saleElasped\", \"scatter\", alpha=0.01, figsize=(10,8))","dc4c3cfd":"x_all = get_sample(df_raw[df_raw.YearMade > 1930], 500)\n# ggplot(x_all, aes('YearMade', 'SalePrice')) + stat_smooth(se=True, method=\"loess\")","08b4cc8e":"x = get_sample(X_train[X_train.YearMade > 1930], 500)","7f274e3b":"def plot_pdp(feat, clusters=None, feat_name=None):\n    feat_name = feat_name or feat\n    p = pdp.pdp_isolate(m, x, feature=feat, model_features=x.columns)\n    return pdp.pdp_plot(p, feat_name, plot_lines=True,\n                       cluster = clusters is not None,\n                       n_cluster_centers = clusters)","5d8fc574":"plot_pdp('YearMade')","fe998c38":"plot_pdp('YearMade', clusters=5)","ea18f8c3":"plot_pdp(['Enclosure_EROPS w AC', 'Enclosure_EROPS', 'Enclosure_OROPS'], 5, 'Enclosure')","17312149":"df_raw.YearMade[df_raw.YearMade < 1950] = 1950\ndf_keep[\"age\"] = df_raw[\"age\"] = df_raw.saleYear - df_raw.YearMade","e0391b15":"X_train, X_valid = split_vals(df_keep, n_trn)\nm = RandomForestRegressor(n_estimators=80, n_jobs=-1, min_samples_leaf=3, max_features=0.6)\nm.fit(X_train, y_train)\nplot_fi(rf_feat_importance(m, df_keep))","bf4a0644":"!pip install treeinterpreter","f1465ddc":"from treeinterpreter import treeinterpreter as ti","313cc96f":"df_train, df_valid = split_vals(df_raw[df_keep.columns], n_trn)","f0c6e605":"row = X_valid.values[None, 0]\nrow","e698b649":"prediction, bias, contributions = ti.predict(m, row)","83f5a4e3":"prediction[0], bias[0]","7cf46aeb":"idxs = np.argsort(contributions[0])","23db1a33":"[o for o in zip(df_keep.columns[idxs], df_valid.iloc[0][idxs], contributions[0][idxs])]","39373419":"contributions[0].sum()","d0d0f4aa":"df_ext = df_keep.copy()\ndf_ext['is_valid'] = 1\ndf_ext.is_valid[:n_trn] = 0\nx, y, nas = proc_df(df_ext, 'is_valid')","577701b9":"m = RandomForestClassifier(n_estimators=80, n_jobs=-1, min_samples_leaf=3, max_features=0.6, oob_score=True)\nm.fit(x, y)\nm.oob_score_","1ebc8a98":"fi = rf_feat_importance(m, x)\nfi[:10]","cb912d78":"feats = ['SalesID', 'saleElasped', 'MachineID']","ae560d31":"(X_train[feats]\/1000).describe()","cc5acb47":"(X_valid[feats]\/1000).describe()\n","a1ddca29":"x.drop(feats, axis=1, inplace=True)","4d1d1fc8":"m = RandomForestClassifier(n_estimators=80, n_jobs=-1, min_samples_leaf=3, max_features=0.6, oob_score=True)\nm.fit(x, y)\nm.oob_score_","21def8d3":"fi = rf_feat_importance(m, x)\nfi[:10]","354f7ffb":"set_rf_samples(50000)","c1599561":"feats = ['SalesID', 'saleElasped', 'MachineID', 'age', 'YearMade', 'saleDayofYear']","d5d8ae04":"X_train, X_valid = split_vals(df_keep, n_trn)\nm = RandomForestRegressor(n_estimators=40, n_jobs=-1, min_samples_leaf=3, max_features=0.6, oob_score=True)\nm.fit(X_train, y_train)\nprint_score(m)","4f25a29b":"df = df_keep.copy()","ef346ebf":"for f in feats:\n    df_subs = df.drop(f, axis=1)\n    X_train, X_valid = split_vals(df_subs, n_trn)\n    m = RandomForestRegressor(n_estimators=40, n_jobs=-1, min_samples_leaf=3, max_features=0.6, oob_score = True)\n    m.fit(X_train, y_train)\n    print(f)\n    print_score(m)","dece3535":"df = df_keep.copy()","9ebb65d1":"df_subs = df.drop(['SalesID', 'MachineID', 'saleDayofYear'], axis=1)","b3bddb27":"X_train, X_valid = split_vals(df_subs, n_trn)\nm = RandomForestRegressor(n_estimators=80, n_jobs=-1, min_samples_leaf=3, max_features=0.6, oob_score=True)\nm.fit(X_train, y_train)\nprint_score(m)","3762e47f":"plot_fi(rf_feat_importance(m, X_train))","a33896e4":"m = RandomForestRegressor(n_estimators=160, min_samples_leaf=3, max_features=0.5, n_jobs=-1, oob_score=True)\n%time m.fit(X_train, y_train)\nprint_score(m)","0e21f3b3":"### Tree Interpreter","acedec28":"In this notebook, we will use RandomForestRegressor.","26aa64fe":"Finally, the rmse is 0.2175.. which is not bad and you can check the rmse score of public leaderboard as well.","e21cd935":"As this notebook is so long, I am sorry that i have written much description about various techniques. You can search yourself as it will be more helpful for you and you can learn more.\nThank you.","fe5aed5d":"### Downloading all Dependencies","f7be6949":"### Partial Dependance","ef38ca49":"### Reading and Pre-processing","ffd610e5":"You can scroll up to see what does add_datepart function which will appoint saledate as the index of the DataFrame.","2f3b6773":"### Initial Processing","c7dc92e9":"### One Hot Encoding","6d915fe0":"In kaggle the score is predicted using \"rmse\", root mean squared error, so let's change the SalePrice in log number.","eb237581":"Oob score in RandomForest does the same work as validation. It is not necessary to calculate prediction on validation set after calculating oob score. It somehow does the same work.","096b649d":"Let's observe the percentage of null variables on each column.","62683867":"These functions are very useful for our notebook. I will try my best to provide the useful insights as much as possible so that it will be helpful for you. You can use implement these functions as well and every functions are written without much dependencies and extensions. I will update this notebook soon with the information of every functions soon.","df8a1344":"pdp is one of the best unknown tools for visualization and it is still unknown to many Data Scientists.","73ef755b":"We have to predict the SalePrice so let's take some insights about the Saleprice first.","70a9c273":"### Initialization","f1c26c6b":"### Final Model","0ff49aac":"### Saving ","7e08ab40":"Let's first read the data with pandas alias.","4e2f1af2":"### Removing Redundant Features","80f28a59":"### Feature Importance","1092712c":"Let's arrange the order of the Categorical variables or objects so that our code won't surprise us later. We have to deal with small information of our datasets so that our result on validation set won't surprise us.","e17d8317":"### Extrapolation","b129d3f8":"Now, the salePrice column is converted into log numbers.","d3014044":"UsageBand is very useful to get the insights of Categorical objects. Some columns of our DataFrame also contains some categorical objects. So let's deal with it first.","8e4e132f":"### Writing Functions","45af3fd6":"### Building the RandomForestRegressor Model"}}