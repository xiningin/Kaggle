{"cell_type":{"7e33a2bc":"code","ead0f500":"code","797b9141":"code","32491842":"code","f40203d8":"code","3784aba8":"code","837becfb":"code","73636210":"code","ab9d01c7":"code","866979ae":"code","e24d6e17":"code","84acd863":"code","ad7d49b5":"code","2d703da2":"code","9b7b2085":"code","943b6633":"code","5dbcb42a":"code","be6fa214":"code","d38a2292":"code","53e2ad33":"code","29da8ea9":"code","2f30cf05":"code","b8baff11":"code","33a1d6d3":"code","01bb3588":"code","51841375":"code","2cbdbd1f":"code","ab17e382":"code","c9ef678c":"code","ab3f68b8":"code","2f7e9ce0":"code","a5e0b2eb":"code","592070c9":"code","0d5ef164":"markdown","1b70e494":"markdown","12eb8176":"markdown","a95751cc":"markdown","1eb8b512":"markdown","32353ec0":"markdown","11aecc60":"markdown","b32cf187":"markdown","9f24a9aa":"markdown","11b34761":"markdown","02953f38":"markdown","a37deaf9":"markdown","9b6a2b96":"markdown","378c58c2":"markdown","6cac3b1f":"markdown","8d511c2a":"markdown","682f5771":"markdown","1430250b":"markdown","0e199892":"markdown","d72b85ab":"markdown","34790456":"markdown","4fc314cd":"markdown","c1925400":"markdown","efe36599":"markdown"},"source":{"7e33a2bc":"import numpy as np\n#NumPy is a python library used for working with arrays.\n#It also has functions for working in domain of linear algebra, fourier transform, and matrices.\n#We have lists that serve the purpose of arrays, but they are slow.NumPy aims to provide an array object that is up to 50x faster that traditional Python lists.\n\nimport pandas as pd \n#Why pandas: you want to explore a dataset stored in a CSV on your computer. Pandas will extract the data from that CSV into a DataFrame \u2014 \n#a table, basically \u2014 then let you do things like:\n#Calculate statistics and answer questions about the data, like: What's the average, median, max, or min of each column?\n#Does column A correlate with column B?\n#What does the distribution of data in column C look like?\n#Clean the data by doing things like removing missing values and filtering rows or columns by some criteria\n#Visualize the data with help from Matplotlib. Plot bars, lines, histograms, bubbles, and more.\n#Store the cleaned, transformed data back into a CSV, other file or database\n\nimport os\n#The OS module in python provides functions for interacting with the operating system.\n#This module provides a portable way of using operating system dependent functionality.\n#The *os* and *os.path* modules include many functions to interact with the file system.\n\nimport matplotlib.pyplot as plt\n#Matplotlib is a comprehensive library for creating static, animated, and interactive visualizations in Python.\nplt.style.use(\"seaborn-whitegrid\")\n#plt.style.available : To see all the available style in matplotlib library\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n#UTF-8 is a variable-width character encoding standard \n#that uses between one and four eight-bit bytes to represent all valid Unicode code points.\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n# Any results you write to the current directory are saved as output.","ead0f500":"timesData = pd.read_csv(\"\/kaggle\/input\/world-university-rankings\/timesData.csv\")\ntimesData.info()","797b9141":"timesData.head()","32491842":"#Line Charts Example: Citation and Teaching vs World Rank of Top 100 Universities\n\n# prepare data frame\ndf = timesData.iloc[:100, :]\n\nimport plotly\nimport plotly.graph_objs as go\n\n# Creating trace1\ntrace1 = go.Scatter(\n                    x = df.world_rank,   #x axis\n                    y = df.citations,    #y axis\n                    mode = \"lines\",      #type of plot like marker, line or line + markers\n                    name = \"citations\",  #name of the plots\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n                    text= df.university_name)   #The hover text\n\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = df.world_rank,\n                    y = df.teaching,\n                    mode = \"lines+markers\",\n                    name = \"teaching\",\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'),\n                    text= df.university_name)\n\ndata = [trace1, trace2]\nlayout = dict(title = 'Citation and Teaching vs World Rank of Top 100 Universities',\n              xaxis= dict(title= 'World Rank',ticklen= 5,zeroline= False)\n             )\n\nfig = dict(data = data, layout = layout)   # fig = it includes data and layout\nplotly.offline.iplot(fig)                               #iplot() = plots the figure(fig) that is created by data and layout","f40203d8":"import plotly.express as px \nimport numpy as np  \n\n# function of numpy.random  \nnp.random.seed(42)  \n    \nrandom_x= np.random.randint(1,101,100)  \nrandom_y= np.random.randint(1,101,100)  \n    \nplot = px.scatter(random_x, random_y) \nplot.show()","3784aba8":"#Citation vs world rank of top 100 universities with 2014, 2015 and 2016 years\n\n# prepare data frames\ndf2014 = timesData[timesData.year == 2014].iloc[:100,:]\ndf2015 = timesData[timesData.year == 2015].iloc[:100,:]\ndf2016 = timesData[timesData.year == 2016].iloc[:100,:]\n\nimport plotly\nimport plotly.graph_objs as go\n\n# creating trace1\ntrace1 =go.Scatter(\n                    x = df2014.world_rank,\n                    y = df2014.citations,\n                    mode = \"markers\",\n                    name = \"2014\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'),\n                    text= df2014.university_name)\n# creating trace2\ntrace2 =go.Scatter(\n                    x = df2015.world_rank,\n                    y = df2015.citations,\n                    mode = \"markers\",\n                    name = \"2015\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text= df2015.university_name)\n# creating trace3\ntrace3 =go.Scatter(\n                    x = df2016.world_rank,\n                    y = df2016.citations,\n                    mode = \"markers\",\n                    name = \"2016\",\n                    marker = dict(color = 'rgba(0, 255, 200, 0.8)'),\n                    text= df2016.university_name)\n\ndata = [trace1, trace2, trace3]\n\nlayout = dict(title = 'Citation vs world rank of top 100 universities with 2014, 2015 and 2016 years',\n              xaxis= dict(title= 'World Rank',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Citation',ticklen= 5,zeroline= False)\n             )\n\nfig = dict(data = data, layout = layout)\nplotly.offline.iplot(fig) ","837becfb":"import plotly.express as px \nimport numpy  as np\n  \n# creating random data through randomint  \nnp.random.seed(42)  \n    \nrandom_x= np.random.randint(1,101,100)  \nrandom_y= np.random.randint(1,101,100) \n  \nfig = px.bar(random_x, random_y) \nfig.show()","73636210":"# Citations and teaching of top 3 universities in 2014 \n# prepare data frames\ndf2014 = timesData[timesData.year == 2014].iloc[:3,:]\ndf2014","ab9d01c7":"import plotly\nimport plotly.graph_objs as go\n\ndf2014 = timesData[timesData.year == 2014].iloc[:3,:]\n\n# create trace1 \ntrace1 = go.Bar(\n                x = df2014.university_name,\n                y = df2014.citations,\n                name = \"citations\",\n                marker = dict(color = 'rgba(255, 174, 255, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1)),\n                text = df2014.country)\n\n# create trace2 \ntrace2 = go.Bar(\n                x = df2014.university_name,\n                y = df2014.teaching,\n                name = \"teaching\",\n                marker = dict(color = 'rgba(255, 255, 128, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df2014.country)\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data, layout = layout)\nplotly.offline.iplot(fig) ","866979ae":"df2014 = timesData[timesData.year == 2014].iloc[:3,:]\nimport plotly\nimport plotly.graph_objs as go\n\nx = df2014.university_name\n\ntrace1 = {\n  'x': x,\n  'y': df2014.citations,\n  'name': 'citation',\n  'type': 'bar'\n};\n\ntrace2 = {\n  'x': x,\n  'y': df2014.teaching,\n  'name': 'teaching',\n  'type': 'bar'\n};\n\ndata = [trace1, trace2];\nlayout = {\n  'xaxis': {'title': 'Top 3 Universities'},\n  'barmode': 'relative',\n  'title': 'Citations and Teaching of top 3 Universities in 2014'\n};\nfig = go.Figure(data = data, layout = layout)\nplotly.offline.iplot(fig) ","e24d6e17":"# CITATIONS AND INCOME\n\nimport plotly\nimport plotly.graph_objs as go\nfrom plotly import tools\nimport matplotlib.pyplot as plt\n\ndf2016 = timesData[timesData.year == 2016].iloc[:7,:]\n\ny_saving     =  [each for each in df2016.research]\ny_net_worth  =  [float(each) for each in df2016.income]\nx_saving     =  [each for each in df2016.university_name]\nx_net_worth  =  [each for each in df2016.university_name]\n\ntrace0 = go.Bar(\n                x=y_saving,\n                y=x_saving,\n                marker=dict(color='rgba(171, 50, 96, 0.6)',line=dict(color='rgba(171, 50, 96, 1.0)',width=1)),\n                name='research',\n                orientation='h',\n)\n\ntrace1 = go.Scatter(\n                x=y_net_worth,\n                y=x_net_worth,\n                mode='lines+markers',\n                line=dict(color='rgb(63, 72, 204)'),\n                name='income',\n)\n\nlayout = dict(\n                title='Citations and income',\n                yaxis=dict(showticklabels=True,domain=[0, 0.85]),\n                yaxis2=dict(showline=True,showticklabels=False,linecolor='rgba(102, 102, 102, 0.8)',linewidth=2,domain=[0, 0.85]),\n                xaxis=dict(zeroline=False,showline=False,showticklabels=True,showgrid=True,domain=[0, 0.42]),\n                xaxis2=dict(zeroline=False,showline=False,showticklabels=True,showgrid=True,domain=[0.47, 1],side='top',dtick=25),\n                legend=dict(x=0.029,y=1.038,font=dict(size=10) ),\n                margin=dict(l=200, r=20,t=70,b=70),\n                paper_bgcolor='rgb(248, 248, 255)',\n                plot_bgcolor='rgb(248, 248, 255)',\n)\n\nannotations = []\ny_s = np.round(y_saving, decimals=2)\ny_nw = np.rint(y_net_worth)\n\n# Adding labels\nfor ydn, yd, xd in zip(y_nw, y_s, x_saving):\n    # labeling the scatter savings\n    annotations.append(dict(xref='x2', yref='y2', y=xd, x=ydn - 4,text='{:,}'.format(ydn),font=dict(family='Arial', size=12,color='rgb(63, 72, 204)'),showarrow=False))\n    # labeling the bar net worth\n    annotations.append(dict(xref='x1', yref='y1', y=xd, x=yd + 3,text=str(yd),font=dict(family='Arial', size=12,color='rgb(171, 50, 96)'),showarrow=False))\n\nlayout['annotations'] = annotations\n\n# Creating two subplots\nfig = tools.make_subplots(rows=1, cols=2, specs=[[{}, {}]], shared_xaxes=True,\n                          shared_yaxes=False, vertical_spacing=0.001)\n\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\n\nfig['layout'].update(layout)\nplotly.offline.iplot(fig) ","84acd863":"import plotly.express as px \nimport numpy as np\n  \n# Random Data \nrandom_x = [100, 2000, 550] \nnames = ['A', 'B', 'C'] \n  \nfig = px.pie(values=random_x, names=names) \nfig.show()","ad7d49b5":"df2016.info()\n# OBJECT > FLOAT","2d703da2":"df2016.head()\n#Num_students    , >>>> .   (float number 19.919 etc)","9b7b2085":"# Students rate of top 7 universities in 2016\n\nimport plotly\n\ndf2016 = timesData[timesData.year == 2016].iloc[:7,:]\npie1 = df2016.num_students\n\npie1_list = [float(each.replace(',', '.')) for each in df2016.num_students]  # str(2,4) => str(2.4) = > float(2.4) = 2.4\nlabels = df2016.university_name\n\n\nfig = {\n  \"data\": [\n    {\n      \"values\": pie1_list,\n      \"labels\": labels,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"Number Of Students Rates\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .05,\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \"title\":\"Universities Number of Students rates\",\n        \"annotations\": [\n            { \"font\": { \"size\": 20},\n              \"showarrow\": False,\n              \"text\": \"Number of Students\",\n                \"x\": 0.20,\n                \"y\": 1\n            },\n        ]\n    }\n}\nplotly.offline.iplot(fig) ","943b6633":"import plotly.graph_objects as px \nimport numpy as np \nnp.random.seed(42) \nrandom_x= np.random.randint(1,101,100)  \nrandom_y= np.random.randint(1,101,100) \nplot = px.Figure(data=[px.Scatter( \n    x = random_x, \n    y = random_y, \n    mode = 'markers', \n    marker_size = [115, 20, 30]) \n])                  \nplot.show()","5dbcb42a":"# University world rank (first 20) vs teaching score with number of students(size) and international score (color) in 2016\n\ndf2016 = timesData[timesData.year == 2016].iloc[:20,:]\nnum_students_size  = [float(each.replace(',', '.')) for each in df2016.num_students]\ninternational_color = [float(each) for each in df2016.international]\n\ndata = [\n    {\n        'y': df2016.teaching,\n        'x': df2016.world_rank,\n        'mode': 'markers',\n        'marker': {\n            'color': international_color,\n            'size': num_students_size,\n            'showscale': True\n        },\n        \"text\" :  df2016.university_name    \n    }\n]\n\nplotly.offline.iplot(data) ","be6fa214":"# Students-staff ratio in 2011 and 2012 \nx2011 = timesData.student_staff_ratio[timesData.year == 2011]\nx2012 = timesData.student_staff_ratio[timesData.year == 2012]\n\ntrace1 = go.Histogram(\n    x=x2011,\n    opacity=0.75,\n    name = \"2011\",\n    marker=dict(color='rgba(171, 50, 96, 0.6)'))\n\ntrace2 = go.Histogram(\n    x=x2012,\n    opacity=0.75,\n    name = \"2012\",\n    marker=dict(color='rgba(12, 50, 196, 0.6)'))\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='overlay',\n                   title=' students-staff ratio in 2011 and 2012',\n                   xaxis=dict(title='students-staff ratio'),\n                   yaxis=dict( title='Count'),\n)\n\nfig = go.Figure(data=data, layout=layout)\nplotly.offline.iplot(fig) ","d38a2292":"import matplotlib.pyplot as plt\nfrom wordcloud import WordCloud \n\nx2011 = timesData.country[timesData.year == 2011]\nplt.subplots(figsize=(10,10)) \n\nwordcloud = WordCloud(\n                          background_color='black',\n                          width=600,\n                          height=384\n                         ).generate(\" \".join(x2011))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\n\nplt.show()","53e2ad33":"import plotly\nimport plotly.graph_objs as go\nfrom plotly import tools\nimport matplotlib.pyplot as plt\n\nx2015 = timesData[timesData.year == 2015]\n\ntrace0 = go.Box(\n    y=x2015.total_score,\n    name = 'total score of universities in 2015',\n    marker = dict(\n        color = 'rgb(12, 12, 140)',\n    )\n)\ntrace1 = go.Box(\n    y=x2015.research,\n    name = 'research of universities in 2015',\n    marker = dict(\n        color = 'rgb(12, 128, 128)',\n    )\n)\ndata = [trace0, trace1]\nplotly.offline.iplot(data) ","29da8ea9":"#it helps us to see covariance and relation between more than 2 features\nimport plotly.figure_factory as ff\n\ndataframe = timesData[timesData.year == 2015]\ndata2015 = dataframe.loc[:,[\"research\",\"international\", \"total_score\"]]\ndata2015[\"index\"] = np.arange(1,len(data2015)+1)\n\n# scatter matrix\nfig = ff.create_scatterplotmatrix(data2015, diag='box', index='index',colormap='Portland',\n                                  colormap_type='cat',\n                                  height=700, width=700)\nplotly.offline.iplot(fig) ","2f30cf05":"# 2 plots are in one frame\n\ntrace1 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.teaching,\n    name = \"teaching\",\n    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),  \n)\n\n# second line plot \ntrace2 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.income,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"income\",\n    marker = dict(color = 'rgba(160, 112, 20, 0.8)'),\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='y2',        \n    ),\n    yaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='x2',\n    ),\n    title = 'Income and Teaching vs World Rank of Universities'\n\n)\n\nfig = go.Figure(data=data, layout=layout)\nplotly.offline.iplot(fig) ","b8baff11":"trace1 = go.Scatter3d(\n    x=dataframe.world_rank,\n    y=dataframe.research,\n    z=dataframe.citations,\n    mode='markers',\n    marker=dict(\n        size=10,\n        color='rgb(255,0,0)',                # set color to an array\/list of desired values      \n    )\n)\n\ndata = [trace1]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n    \n)\n\nfig = go.Figure(data=data, layout=layout)\nplotly.offline.iplot(fig) ","33a1d6d3":"import plotly.graph_objects as go \nimport numpy as np \n  \nx1 = np.linspace(-4, 4, 9)  \ny1 = np.linspace(-5, 5, 11)  \nz1 = np.linspace(-5, 5, 11)  \n  \nX, Y, Z = np.meshgrid(x1, y1, z1) \n  \nvalues = (np.sin(X**2 + Y**2))\/(X**2 + Y**2) \n  \nfig = go.Figure(data=go.Volume( \n    x=X.flatten(), \n    y=Y.flatten(), \n    z=Z.flatten(), \n    value=values.flatten(), \n    opacity=0.1, \n    )) \n  \nfig.show()","01bb3588":"import plotly.express as px \nfig = px.treemap( \n    names = [\"A\",\"B\", \"C\", \"D\", \"E\"], \n    parents = [\"Plotly\", \"A\", \"B\", \"C\", \"A\"] \n) \n  \nfig.show()","51841375":"# Multiple Subplots: While comparing more than one features, multiple subplots can be useful.\n\ntrace1 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.research,\n    name = \"research\"\n)\ntrace2 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.citations,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"citations\"\n)\ntrace3 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.income,\n    xaxis='x3',\n    yaxis='y3',\n    name = \"income\"\n)\ntrace4 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.total_score,\n    xaxis='x4',\n    yaxis='y4',\n    name = \"total_score\"\n)\n\ndata = [trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    xaxis=dict(\n        domain=[0, 0.45]\n    ),\n    yaxis=dict(\n        domain=[0, 0.45]\n    ),\n    xaxis2=dict(\n        domain=[0.55, 1]\n    ),\n    xaxis3=dict(\n        domain=[0, 0.45],\n        anchor='y3'\n    ),\n    xaxis4=dict(\n        domain=[0.55, 1],\n        anchor='y4'\n    ),\n    yaxis2=dict(\n        domain=[0, 0.45],\n        anchor='x2'\n    ),\n    yaxis3=dict(\n        domain=[0.55, 1]\n    ),\n    yaxis4=dict(\n        domain=[0.55, 1],\n        anchor='x4'\n    ),\n    title = 'Research, citation, income and total score VS World Rank of Universities'\n)\nfig = go.Figure(data=data, layout=layout)\nplotly.offline.iplot(fig) ","2cbdbd1f":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n# Any results you write to the current directory are saved as output.","ab17e382":"import plotly.express as px \n  \ngapminder = px.data.gapminder() \ngapminder.head()\n#we have obtained data from almost all countries in the world from 1952 to 2007 \n#with fields like life expectancy, GDP per capita and population.  ","c9ef678c":"import plotly.express as px \n\ngapminder = px.data.gapminder() \ngapminder.head(30) \n  \nfig = px.choropleth(gapminder, \n                    locations =\"iso_alpha\", \n                    color =\"lifeExp\", \n                    hover_name =\"country\",  \n                    color_continuous_scale = px.colors.sequential.Plasma, \n                    scope =\"world\", \n                    animation_frame =\"year\") \nfig.show()","ab3f68b8":"#scope refers to the area of scope of the choropleth. \n#For example, if we type scope=\u201dasia\u201d, the following is displayed:\nimport plotly.express as px \ngapminder = px.data.gapminder() \ngapminder.head(30) \nfig = px.choropleth(gapminder, \n                    locations =\"iso_alpha\", \n                    color =\"lifeExp\", \n                    hover_name =\"country\",  \n                    color_continuous_scale = px.colors.sequential.Plasma, \n                    scope =\"asia\", \n                    animation_frame =\"year\") \nfig.show()","2f7e9ce0":"import plotly.express as px  \ngapminder = px.data.gapminder() \ngapminder.head(15) \nfig = px.bar(gapminder,  \n             x =\"continent\",  \n             y =\"pop\", \n             color ='lifeExp', \n             animation_frame ='year', \n             hover_name ='country',  \n             range_y =[0, 4000000000]) \nfig.show()","a5e0b2eb":"import plotly.express as px \ngapminder = px.data.gapminder() \ngapminder.head(15) \n  \nfig = px.density_contour(gapminder,  \n                         x =\"gdpPercap\",  \n                         y =\"lifeExp\",  \n                         color =\"continent\",  \n                         marginal_y =\"histogram\", \n                         animation_frame ='year',  \n                         animation_group ='country',  \n                         range_y =[25, 100]) \nfig.show()","592070c9":"import plotly.express as px   \ngapminder = px.data.gapminder() \ngapminder.head(15) \nfig = px.scatter( \n    gapminder,  \n    x =\"gdpPercap\",  \n    y =\"lifeExp\",  \n    animation_frame =\"year\",  \n    animation_group =\"country\", \n    size =\"pop\",  \n    color =\"continent\",  \n    hover_name =\"country\",  \n    facet_col =\"continent\", \n    size_max = 45, \n    range_y =[25, 90] \n) \nfig.show()","0d5ef164":"# Plotly \n\n**Plotly** (Plot.ly as its URL goes), is a tech-computing company based in Montreal. It is known for developing and providing online analytics, statistics and graphing tools for individuals or companies. It also develops\/provides scientific graphing libraries for Arduino, Julia, MATLAB, Perl, Python, R and REST.\n\nThis data visualization library is by far my go-to library whenever I want to create visualizations that need to be highly interactive for the user. Plotly is highly compatible with Jupyter Notebook and Web Browsers. This means whatever interactive plots you create can easily be shared in the same manner with your teammates or end-users.Plotly supports a gamut of plots right from basic chart types, Seaborn-like beautiful and advanced plots, 3-D plots, Map-based visualizations, scientific plots, etc.Plotly\u2019s plots can also support animation capabilities as well.\n\n**Plotly** has got some amazing features that make it better than other graphing libraries:\n\n* It is interactive by default\n* Charts are not saved as images but serialized as JSON, making them open to be read with R, MATLAB, Julia and others easily\n* Exports vector for print\/publication\n* Easy to manipulate\/embed on web","1b70e494":"# Treemap in Plotly\n\nTreemap in plotly.express is convenient to use, high_ranking terminal to plotly, which accomplishes a variety of types of data and produces easy-to-style figures. A treemap provides a stratified view of data and makes it easy to blot the patterns. The tree branches are characterized by rectangles and each of the sub_branches is shown in a smaller rectangle.","12eb8176":"<a id = \"7\" ><\/a>\n# 7. Histogram\n\nA histogram is a graph where the data are stocked and the each stocked is counted and represented. More broadly, in plotly a histogram is an accumulated bar chart, with several possible accumulation functions. The data to be stocked can be numerical data but also categorical or date data. It is commonly used in dealing with large data of sets.","a95751cc":"<a id = \"4\" ><\/a>\n# 4. Bar Charts\n\nBar chart with plotly express is much convenient and   high-level frontier to plotly, which helps to operate diversification of data and which helps to produce easy-to-style figures. With px. bar, each row in the DataFrame is represented as a rectangular mark, it can be horizontally or vertically. Alls helps to show comparisons among discrete categories. One of the axis in the chart shows the specific categories being compared, and the other axis represents a measured value. It can be created using the bar() method of plotly.express.\n\nCreating traces\n* x = x axis\n* y = y axis\n* mode = type of plot like marker, line or line + markers\n* name = name of the plots\n* marker = marker is used with dictionary.\n* color = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\n* line = It is dictionary. line between bars\n* color = line color around bars\n* text = The hover text (hover is curser)\n* data = is a list that we add traces into it\n* layout = it is dictionary.\n* barmode = bar mode of bars like grouped\n* fig = it includes data and layout","1eb8b512":"<a id = \"8\" ><\/a>\n# 8. Word Cloud\n\nWhich country is mentioned most in 2011:\n\n* WordCloud = word cloud library that I import at the beginning of kernel\n* background_color = color of back ground\n* generate = generates the country name list(x2011) a word cloud","32353ec0":"<a id = \"2\" ><\/a>\n# 2. Line Charts\n\nLine plot in Plotly is much accessible and  illustrious annexation to plotly which manage variety of types of data, and assemble easy-to-style statistic.With px.line each data position is represented as a vertex  (which location is given by the x and y columns) of a polyline mark in 2D space. Line chart Displays a series of numerical data as points which are connected by lines. It visualizes to show two data trends. The main productive feature is it can display thousands of data points without scrolling. It can be created using the line() method of plotly.express class.","11aecc60":"<a id = \"10\" ><\/a>\n# 10. Scatter Plot Matrix","b32cf187":"<a id = \"3\" ><\/a>\n# 3. Scatter Charts\n\nA scatter plot is a diagram where each value is represented by the dot graph. Scatter  plot needs arrays for the same length, one for the value of x-axis and other value for the y-axis. Each data is represented as a dot point, whose location is given by x and y columns. It can be created using the scatter() method of plotly.express","9f24a9aa":"<a id = \"13\" ><\/a>\n# 13. Multiple Subplots","11b34761":"**GDP Per Capita vs Life Expectancy Density Contour**\n\nThe relationship between the life expectancy and GDP per capita across time is an important component for governmental or national data statistics. Governments can(and have) used this for establishing correlation between the two and this thus explains why the increase in life expectancy has also increased the GDP per capita. The approach can be visualized using a density contour plot and a histogram. ","02953f38":"<a id = \"1\" ><\/a>\n# 1. Loading Data and Explanation of Features","a37deaf9":"# 3D Volume Plots using Plotly in Python\n\nA volume plot is a plot with go.volume which shows many partially transparent isosurfaces for rendering the volume. The opacityscale parameter of go. Volume results in a depth effect and generates better volume rendering. Three-dimensional volume visualization is a method that allows one to observe and manipulate 3D volumetric data. It represents 3D objects in terms of surfaces and edges approximated by polygons and lines.","9b6a2b96":"<a id = \"9\" ><\/a>\n# 9. Box Plot\n\nA box plot is a demographic representation of numerical data through their quartiles. The end and upper quatiles are represented in box,  while the median (second quartile) is notable by a line inside the box. Plotly.express is convenient,high-ranked interface to plotly which operates on variet of data and produce a easy-to-style figure.Box are much beneficial for comparing the groups of data. Box plot divide approx. 25% of section data into sets which helps ion quickly identifying  values, the dispersion of the data set, and signs of skewness.","378c58c2":"# Information about Dataset - World University Rankings\n\nRanking universities is a difficult, political, and controversial practice. There are hundreds of different national and international university ranking systems, many of which disagree with each other. This dataset contains three global university rankings from very different places.\n\nThe Times Higher Education World University Ranking is widely regarded as one of the most influential and widely observed university measures. Founded in the United Kingdom in 2010, it has been criticized for its commercialization and for undermining non-English-instructing institutions.\n\nThe Academic Ranking of World Universities, also known as the Shanghai Ranking, is an equally influential ranking. It was founded in China in 2003 and has been criticized for focusing on raw research power and for undermining humanities and quality of instruction.\n\nThe Center for World University Rankings, is a less well know listing that comes from Saudi Arabia, it was founded in 2012.\n\nHow do these rankings compare to each other?\nAre the various criticisms levied against these rankings fair or not?\nHow does your alma mater fare against the world?\n\n**Supplementary Data**\nTo further extend your analyses, we've also included two sets of supplementary data.\n\nThe first of these is a set of data on educational attainment around the world. It comes from The World Data Bank and comprises information from the UNESCO Institute for Statistics and the Barro-Lee Dataset. How does national educational attainment relate to the quality of each nation's universities?\n\nThe second supplementary dataset contains information about public and private direct expenditure on education across nations. This data comes from the National Center for Education Statistics. It represents expenditure as a percentage of gross domestic product. Does spending more on education lead to better international university rankings?","6cac3b1f":"<a id = \"14\" ><\/a>\n# 14. Animated Data Visualization using Plotly Express\n\n**Data Visualization** is a big thing in the data science industry and displaying the proper statistics to a business or governments can help them immeasurably in improving their services. It is very painful to understand data from different times from multiple charts and make any sense of it. That is where the need for animated data visualizations lie. In this, article we are going to use Plotly Express for plotting and animating the data and datasets from Gapminder. We are going to look at different types of animation provided by Plotly Express.","8d511c2a":"<a id = \"11\" ><\/a>\n# 11. Inset Plots","682f5771":"<font color = \"blue\" >\n    Plot Contents:\n        \n   1. [Loading Data and Explanation of Features](#1)\n   2. [Line Charts](#2)\n   3. [Scatter Charts](#3)\n   4. [Bar Charts](#4)\n   5. [Pie Charts](#5)\n   6. [Bubble Charts](#6)\n   7. [Histogram](#7)\n   8. [Word Cloud](#8)\n   9. [Box Plot](#9)\n   10. [Scatter Plot Matrix](#10)\n   11. [Inset Plots](#11)\n   12. [3D Scatter Plot with Colorscaling](#12)\n   13. [Multiple Subplots](#13)\n   14. [Animated Data Visualization using Plotly Express](#14)","1430250b":"<a id = \"12\" ><\/a>\n# 12. 3D Scatter Plot with Colorscaling\n\nA scatterplot can be used with several semantic groupings which can help to understand well in a graph. They can plot two-dimensional graphics that can be enhanced by mapping up to three additional variables while using the semantics of hue, size, and style parameters. All the parameter control visual semantic which are used to identify the different subsets. Using redundant semantics can be helpful for making graphics more accessible. It can be created using the scatter_3d function of plotly.express class.","0e199892":"**Life Expectancy Choropleth**\n\nA choropleth is a map that uses differences in color in defined areas about a common property in order to visualize data as an aggregate summary of a region(in this case, a country). Plotly Express makes it easy to plot choropleths. The below code shows how to take information from gapminder. Set the parameter to which you want to color the choropleth to. Here we wanted the choropleth to shade regions on the basis of life expectancy(lifeExp). hover_name shows the set data when hovered over. animation_frame refers to the parameter on which the animation should be done(mostly, this parameter is the time series data).","d72b85ab":"# Data Visualization\nData visualization is the discipline of trying to understand data by placing it in a visual context so that patterns, trends and correlations that might not otherwise be detected can be exposed.\n\nPython offers multiple great graphing libraries that come packed with lots of different features. No matter if you want to create interactive, live or highly customized plots python has an excellent library for you.","34790456":"<a id = \"5\" ><\/a>\n# 5. Pie Charts\n\nA pie chart is a circular analytical chart, which is divided into region to symbolize numerical percentage. In px.pie, data anticipated by the sectors of the pie to set the values. All  sector  are classify in names. Pie chart is used usually to show the percentage with next corresponding slice of pie. Pie chart helps to make understand well because of its different portions and color codings.","4fc314cd":"<a id = \"6\" ><\/a>\n# 6. Bubble Charts\n\nThe bubble chart in Plotly is created using the scatter plot. It can be created using the scatter() method of plotly.express. A bubble chart is a data visualization which helps to displays multiple circles (bubbles) in a two-dimensional plot as same in scatter plot. A bubble chart is primarily used to depict and show relationships between numeric variables.","c1925400":"**GDP Per Capita vs Life Expectancy Scatter Plot**\n\nThe same approach can be used for a different kind of plot, that is, the scatter plot. The below code shows how it is done. facet_col is used to split our plot into sub-plots of continent data like shown below. ","efe36599":"**Population Bar Graph**\n\nNow let\u2019s make an animated bar graph using the same dataset using population as our primary data in this instance. Let the x of the data be the continent and y be population and when hovered over the names of the countries should be shown. So let\u2019s set hover to \u2018country\u2019. It is important to specify range as it helps in understanding the scale of the data we are working on. The parameter on which the animation is done is, of course, the year. "}}