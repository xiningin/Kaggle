{"cell_type":{"586ea1de":"code","ef143564":"code","200d515a":"code","b4246189":"code","30a29ffc":"code","e0365d2a":"code","6e13fe21":"code","355dadc4":"code","27912cb6":"code","77877bf5":"code","dd4d431a":"code","f44d8842":"code","3054a33a":"code","3970194f":"code","f30a1026":"markdown"},"source":{"586ea1de":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('..\/'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ef143564":"from fastai.vision import *","200d515a":"def folder_name(number):\n    if(len(str(number))==6):\n        return number\n    gap = 6 - len(str(number))\n    return gap *'0' + str(number)\ndef from_preds_to_list(preds):\n    p=to_np(preds)\n    lista =[]\n    for i in range(len(p)):\n        lista.append(np.where(np.amax(p[i])==p[i])[0][0])\n    last=[]\n    for element in lista:\n        last.append(data.classes[element])\n    return last","b4246189":"path=\"\/kaggle\/input\/vehicle\/train\/train\/\"\nnp.random.seed(42)\ndata = ImageDataBunch.from_folder(path+'.', train=path+'.', valid_pct=0.2,\n                                  ds_tfms=get_transforms(), size=224, num_workers=4).normalize(imagenet_stats)\n","30a29ffc":"len(data.classes)","e0365d2a":"data.show_batch(rows=3, figsize=(7, 8))","6e13fe21":"from fastai.metrics import error_rate # 1 - accuracy\nlearn = cnn_learner(data, models.resnet50, metrics=error_rate,model_dir=\"\/tmp\/model\/\")","355dadc4":"defaults.device = torch.device('cuda') # makes sure the gpu is used\nlearn.fit_one_cycle(2)","27912cb6":"learn.model_dir='\/kaggle\/working\/'\nlearn.export(\"\/kaggle\/working\/export50.pkl\")","77877bf5":"#learn = load_learner(\"..\/input\/kerneldfa3fd74eb\/\")","dd4d431a":"#load_test_data\nsubmission = pd.read_csv(\"\/kaggle\/input\/vehicle\/sample_submission.csv\")\ntestpath=\"\/kaggle\/input\/vehicle\/test\/\"\nsubmission1 = submission\nsubmission1['Id'] = submission['Id'].apply(lambda x: folder_name(x))\nsubmission1\nlearn.data.add_test(ImageList.from_df(\n    submission1, testpath,\n    folder='testset',\n    suffix='.jpg'\n))","f44d8842":"preds, _ = learn.get_preds(DatasetType.Test)","3054a33a":"submission[\"Category\"]=from_preds_to_list(preds)","3970194f":"submission.to_csv(\"submit502.csv\",index=False)","f30a1026":"<a href=\".\/submit2.csv\"> Download File <\/a>"}}