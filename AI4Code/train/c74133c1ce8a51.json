{"cell_type":{"02b912c0":"code","6943fa4d":"code","28465065":"code","42bc3699":"code","716f829c":"code","5a2b82bd":"code","37b20702":"code","2105694e":"code","230df950":"code","58cbc33b":"code","789c611f":"code","10518e8e":"code","6275812a":"code","9338cdd9":"code","0c891358":"code","c29332cf":"code","bacf8634":"code","45946fab":"code","861e9a73":"code","a77a740b":"code","ba2e48f8":"code","b17f1788":"code","5785cdb5":"code","6b9b0eae":"code","dbcd5006":"code","2d22221e":"markdown","84cdb750":"markdown","21e28670":"markdown"},"source":{"02b912c0":"!pip3 install pandas\nimport numpy as np \nimport pandas as pd ","6943fa4d":"#pulled data from Yahoo finance to set in Kaggle for use in this notebook\n##https:\/\/finance.yahoo.com\/quote\/UBER\/history?period1=1572480000&period2=1604102400&interval=1d&filter=history&frequency=1d&includeAdjustedClose=true\nuber_df = pd.read_csv('..\/input\/uber-1031201910312020\/UBER-10312019_10312020.csv')\nuber_df.head(5)","28465065":"uber_dfp = uber_df.reset_index().set_index('Date')\nuber_dfp['Adj Close'].plot(kind='line', figsize=(15,7), grid=True, ylabel=\"Closing Price\", xlabel=\"Date\", title=\"Uber Closing Prices 10\/2019 through 10\/2020\")","42bc3699":"#a. What is the avaerage daily return?\nuber_df['Return'] = uber_df['Adj Close'].pct_change()\nuber_df.dropna().head(5)","716f829c":"adr_ub = (uber_df['Return'].mean())*100\nprint(f\"The average return would be {adr_ub:.2f}%\")","5a2b82bd":"#b. What is the standard Deviation of returns?\nuber_df['Return'].std()","37b20702":"#c. Using apply, which day had the biggest swing from open to close on a percentage basis? Eg. If open = 30, close = 40, the swing should be (40 - 30)\/30 = 33%\n#def swing(series):\n#    s = abs(uber_df['Open']-uber_df['Close'])\/uber_df['Open']\nuber_df['Swing%'] = (abs(uber_df['Open']-uber_df['Close'])\/uber_df['Open'])*100\n#uber_df\nuber_df['Swing%'].max()","2105694e":"#d. What day did the biggest swing happen?\n#uber_df[uber_df['Swing%'] == uber_df['Swing%'].max()] - - Use this to display full row\nuber_df.loc[uber_df['Swing%'] == uber_df['Swing%'].max(),'Date']#this will return only index and \"Date\" column value","230df950":"#pulled data from Yahoo finance to set in Kaggle for use in this notebook\nspy_df = pd.read_csv('..\/input\/spy-0101199509012020\/SPY_01011995-09012020.csv')\nspy_df.head(5)","58cbc33b":"#a. What is the daily standard deviation of the returns?\nspy_df['Return'] = spy_df['Adj Close'].pct_change()\n#spy_df['Stan. Dev'] = spy_df['Return'].std()\n#spy_df.head(6)\nspy_df['Return'].std()","789c611f":"#b. What are the top five days with the highest volume?\n#spy_df['Volume'].max()\ndf2 = spy_df.nlargest(5, 'Volume')\ndf2 = df2.loc[:, ['Date', 'Volume']]\ndf2.index = [1, 2, 3, 4, 5]\ndf2","10518e8e":"#c. What are the top 5 days with the highest one-day return? \nspy_df[spy_df['Return'] >= 0.07]","6275812a":"#d. How many days did SPY have where it drop more than 4% in one day? \ndropdays = spy_df.loc[spy_df['Return'] <= -0.04,'Return'].count()\n#spy_df.groupby(spy_df['Return'] <= -0.04).size()\nprint(f\"There were {dropdays} days between 1995 and 2020, where the S&P 500 dropped more than 4% in a single day.\")\n#winter of 2020 and 2021 not included in this study as the pandemic caused an irregular amount of these instances,\n#which would skew the data in terms of helping us determine whether this is a viable trading strategy to rely on","9338cdd9":"#e. If you had a strategy that bought SPY right at the market close when it dropped more than 4% and held it for exactly one day (essentially keeping the return the next day), what would be your average return. eg. If on March 20th 2020, the market dropped 8% then you would keep the full return on March 21st 2020. \nlondr = []\n#starting with a blank 'list of next day returns'\nfor row in spy_df[spy_df['Return'] <= -0.04].index:\n    #this will indicate what row number each value in Return <= -4% is attributed to \n    nd = row+1\n    #nd would be the row number for the next day\n    ndr = spy_df.loc[nd, 'Return']\n    #this would give me the return value for the next day (next day's return)\n    londr.append(ndr)\n    #filling the londr list with the ndr values\n\n#print(londr)\n#print((sum(londr))\/(len(londr)))\n#could use math on list values to generate average return of specified return values. or...\nnew_df = pd.Series(londr)\n#converting londr list into a new dataframe where we can calculate mean in pandas\nndr_avg = ((new_df.mean())*100).round(2)\nprint(f\"The average return would be {ndr_avg:.2f}%\")\n","0c891358":"#Answer check\nspy_df['Prior Return'] = spy_df['Return'].shift(periods=1)\nspy_df.head(5)","c29332cf":"spy_df2 = spy_df.loc[spy_df['Prior Return'] < -0.04, :]\nspy_df2.head(5)","bacf8634":"#Usually when the market price drops significantly one day, the day after gaps up\navg_return = (spy_df2.loc[:, 'Return'].mean())*100\nprint(f\"The average return would be {avg_return:.2f}% '(over a day)'\")","45946fab":"#Just for fun:: Anuaized  (250 trading days over a year)\nannul_avg = ((1 + (avg_return)\/100) ** 250 - 1)*100\nprint(f\"This average return could become {annul_avg:.2f}% return over a year\")\n#annul_avg\n#Looks appealing, but trading on this gap would not be a strategy that very rarely presents itself","861e9a73":"#f. If we created a trading signal that works like this:\n#   Purchase the SPY when (Volume X Return) is greater than it's average over the past 30 trading days. \n#   In other words, we must multiply Volume by the Daily Return, then track it's average over the past 30 days. \n#   When Volume X Daily Return is higher than that average, purchase SPY. \n#   What days would you have made a purchase?","a77a740b":"spy_df3 = spy_df2.copy()\nspy_df3['VolXRet'] = (spy_df3.loc[:,'Volume'])* (spy_df3.loc[:, 'Return'])\nspy_df3.head(3)","ba2e48f8":"spy_df3['VolXRet_30D_Mean'] = spy_df3['VolXRet'].rolling(30).mean()\nspy_df3.iloc[28:33]","b17f1788":"spy_df4 = spy_df3[spy_df3['VolXRet'] > spy_df3['VolXRet_30D_Mean']]\nspy_df4","5785cdb5":"print(f'There would have been {len(spy_df4)} days indicated for purchase')","6b9b0eae":"#we would shift these because we would actually make the purchase the next day (after seeing the indicator at the end of the day)\nspy_df5 = spy_df3.loc[spy_df3['VolXRet'].shift(1)>spy_df3['VolXRet_30D_Mean'].shift(1),:]\nspy_df5","dbcd5006":"spy_df5['Date'] #Actual dates we would make this purchase based on the indicator","2d22221e":"Using the daily historical data for SPY from January 1st 1995 to November 1st 2020, and load it into a dataframe.\n\na. What is the daily standard deviation of the returns? \n\nb. What are the top five days with the highest volume?? \n\nc. What are the top 5 days with the highest one-day return? \n\nd. How many days did SPY have where it drop more than 4% in one day? \n\ne. If you had a strategy that bought SPY right at the market close when it dropped more than 4% and held it for exactly one day (essentially keeping the return the next day), what would be your average return. eg. If on March 20th 2020, the market dropped 8% then you would keep the full return on March 21st 2020. \n\nf. If we created a trading signal that works like this:\n purchase the SPY when (Volume X Return) is greater than it's average over the past 30 trading days. In other words, we must multiply Volume by the Daily Return, then track it's average over the past 30 days. When Volume X Daily Return is higher than that average, purchase SPY. \n What days would you have made a purchase?","84cdb750":"Mock Assignment# Analyze UBER Stock Data:\nDownload the UBER CSV for Oct 31, 2019 to Oct 31, 2020 and load it into a Dataframe\n\na. What is the avaerage daily return?\nb. What is the standard Deviation of returns?\nc. Using apply, which day had the biggest swing from open to close on a percentage basis? Eg. If open = 30, close = 40, the swing should be (40 - 30)\/30 = 33%\nd. What day did the biggest swing happen?","21e28670":"The next three lines of code are used to check my work"}}