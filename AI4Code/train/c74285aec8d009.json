{"cell_type":{"2181dc7a":"code","87f56f35":"code","42579b4f":"code","518d9c58":"code","a6f58faf":"code","7dffd287":"code","2236216e":"code","9b95da91":"code","3248610a":"code","c4bd78b5":"code","a5f81430":"code","b15533ae":"code","80eeebea":"code","d3da0a4f":"code","d75096f3":"code","89335115":"code","00f0854b":"code","2d7f68ad":"code","caaa5d80":"code","5dfe1512":"code","abde7b2e":"code","205c7901":"code","42481202":"code","6235d4fb":"code","fc28cb7a":"code","901f408c":"code","1dff19f1":"code","09eb2e35":"code","97650327":"code","dc4e0c19":"code","10522404":"code","e5926dc5":"code","f1571afd":"code","1da7a77d":"code","5cd3f014":"code","8e45cd58":"code","55b281b6":"code","a25c1692":"code","cc54b805":"code","b471d5e4":"code","c26b83e3":"code","251f556a":"code","24efcbe5":"code","aed35d44":"code","9cbb32c6":"code","3af3f871":"code","6aa8df52":"code","de034341":"code","ea3e6520":"code","ef78cc89":"code","66ca629a":"code","28cc2f47":"code","80d027c4":"code","197fc24b":"code","40b12f74":"code","65e92d6e":"code","31a5b5d6":"code","94dda5ae":"code","0e51b4c0":"code","fcf99809":"code","e11c019c":"code","877b0136":"code","8f82a565":"code","c0fbda7e":"code","3afd0f6e":"code","9bd3c3a6":"code","f14b13e4":"code","8ba387d5":"code","adac6bae":"code","b8e93fe9":"code","2e696064":"code","095b892d":"code","04db6b22":"code","9c4c19f8":"code","f9178443":"code","0bdac87a":"code","70ed5112":"code","bce939b1":"code","92b3aa96":"code","8e4300f6":"code","05523d61":"code","554c91f8":"code","6c66671e":"code","34a41b2c":"code","1560ebbe":"code","12d3b71a":"code","d7bd03bf":"code","443a23c9":"code","3e2cbf24":"markdown"},"source":{"2181dc7a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as mcolors\nimport pandas as pd \nimport random\nimport math\nimport time\nimport datetime\nimport operator\n\nimport matplotlib.style as style\nimport folium\nfrom sklearn.linear_model import LinearRegression, BayesianRidge\nfrom sklearn.model_selection import RandomizedSearchCV, train_test_split\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\n\n# importing libraries\n\nfrom __future__ import print_function\nfrom ipywidgets import interact, interactive, fixed, interact_manual\nfrom IPython.core.display import display, HTML\n\n\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport folium\nimport plotly.graph_objects as go\nimport seaborn as sns\nimport ipywidgets as widgets\nimport folium\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","87f56f35":"from plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nfig = make_subplots(rows=1, cols=4,subplot_titles=(\"Comfirmed\", \"Active\", \"Recovered\",'Deaths'))\nfig.add_trace(\n    go.Scatter(name=\"Confirmed\",x=data['Date'],y=data['Confirmed']),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(name=\"Active\",x=data['Date'],y=data['Active']),\n    row=1, col=2\n)\nfig.add_trace(\n    go.Scatter(name=\"Recovered\",x=data['Date'],y=data['Recovered']),\n    row=1, col=3\n)\n\nfig.add_trace(\n    go.Scatter(name=\"Deaths\",x=data['Date'],y=data['Deaths']),\n    row=1, col=4\n)\n\nfig.update_layout(height=600, width=1000, title_text=\"Date Vs Recorded Cases[Confirmed\/Active\/Recovered\/Deaths]\",template=\"plotly_dark\")\nfig.show()\n","42579b4f":"import numpy as np \nimport matplotlib.pyplot as plt \nimport matplotlib.colors as mcolors\nimport pandas as pd \nimport random\nimport plotly.express as px\nimport math\nimport time\nfrom sklearn.linear_model import LinearRegression, BayesianRidge\nfrom sklearn.model_selection import RandomizedSearchCV, train_test_split\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nimport datetime\nfrom datetime import timedelta\nfrom urllib.request import urlopen\nimport seaborn as sns\nimport plotly.graph_objs as go\n# import plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nplt.style.use('fivethirtyeight')\n%matplotlib inline\n# interactive vizualis megjelenites\nimport plotly.express as px\nimport plotly.graph_objs as go\n# import plotly.figure\nfrom plotly.subplots import make_subplots\n# offline ploty nezetre\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)\n\n\n\n\n","518d9c58":"confirmed_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\ndeaths_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\nrecoveries_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv')\nlatest_data = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_daily_reports\/04-10-2020.csv')\nestimate_data = pd.read_csv('https:\/\/raw.githubusercontent.com\/midas-network\/COVID-19\/master\/parameter_estimates\/2019_novel_coronavirus\/estimates.csv')\ncountry_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\n\n#confirmedHUN_df= pd.read_csv('https:\/\/opendata.ecdc.europa.eu\/covid19\/casedistribution\/csv')","a6f58faf":"latest_data.head()","7dffd287":"confirmed_df.head()","2236216e":"data=pd.read_csv('..\/input\/covid-19-clean-complete\/covid_19_clean_complete.csv')\ndata.head()","9b95da91":"import plotly.express as px\nfig=px.bar(data.iloc[:20],x='Country\/Region',y=['Lat','Long','Confirmed'],template=\"plotly_dark\",title=\"Coronavirus cases w.r.t. time\")\nfig.show()","3248610a":"from plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nfig = make_subplots(rows=1, cols=4,subplot_titles=(\"Comfirmed\", \"Active\", \"Recovered\",'Deaths'))\nfig.add_trace(\n    go.Scatter(name=\"Confirmed\",x=data['Date'],y=data['Confirmed']),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(name=\"Active\",x=data['Date'],y=data['Active']),\n    row=1, col=2\n)\nfig.add_trace(\n    go.Scatter(name=\"Recovered\",x=data['Date'],y=data['Recovered']),\n    row=1, col=3\n)\n\nfig.add_trace(\n    go.Scatter(name=\"Deaths\",x=data['Date'],y=data['Deaths']),\n    row=1, col=4\n)\n\nfig.update_layout(height=600, width=1000, title_text=\"Date Vs Recorded Cases[Confirmed\/Active\/Recovered\/Deaths]\",template=\"plotly_dark\")\nfig.show()\n","c4bd78b5":"# adatok \ncases=['Lat','Long']\nfor i in cases:\n    fig=px.pie(data[:15],width=1000,height=600,values=i,names=\"Country\/Region\",template=\"plotly_dark\",hole=0.3,title=\"<b>{} Recordeded w.r.t. to WHO Region of 15 worst effected countries<\/b>\".format(i))\n    fig.update_traces(textinfo='percent+label')\n    fig.show()\n","a5f81430":"data=pd.read_csv('..\/input\/covid-19-clean-complete\/covid_19_clean_complete.csv')\ndata.head()\n","b15533ae":"\n\nimport pandas as aw\ndata2=aw.read_csv('..\/input\/datacsv201012\/data202012.csv')\ndata2.head()\n\n\n\n\n\n\n","80eeebea":"# Wordlwide vizsgalat\nconfirmed_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\ndeaths_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\nrecoveries_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv')\nlatest_data = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_daily_reports\/04-10-2020.csv')\nestimate_data = pd.read_csv('https:\/\/raw.githubusercontent.com\/midas-network\/COVID-19\/master\/parameter_estimates\/2019_novel_coronavirus\/estimates.csv')\n#\/\/HUN\/\/\nconfirmedHUN_df= pd.read_csv('https:\/\/opendata.ecdc.europa.eu\/covid19\/casedistribution\/csv')\ncountry_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/web-data\/data\/cases_country.csv')\n  \n","d3da0a4f":"latest_data.head()","d75096f3":"confirmed_df.head()","89335115":"cols = confirmed_df.keys()","00f0854b":"confirmed = confirmed_df.loc[:, cols[4]:cols[-1]]\ndeaths = deaths_df.loc[:, cols[4]:cols[-1]]\nrecoveries = recoveries_df.loc[:, cols[4]:cols[-1]]\n","2d7f68ad":"dates = confirmed.keys()\nworld_cases = []\ntotal_deaths = [] \nmortality_rate = []\nrecovery_rate = [] \ntotal_recovered = [] \ntotal_active = [] \n\nchina_cases = [] \nitaly_cases = []\nus_cases = [] \nspain_cases = [] \nfrance_cases = [] \n\nchina_deaths = [] \nitaly_deaths = []\nus_deaths = [] \nspain_deaths = [] \nfrance_deaths = [] \n\nchina_recoveries = [] \nitaly_recoveries = []\nus_recoveries = [] \nspain_recoveries = [] \nfrance_recoveries = [] \n\nfor i in dates:\n    confirmed_sum = confirmed[i].sum()\n    death_sum = deaths[i].sum()\n    recovered_sum = recoveries[i].sum()\n    \n    # confirmed, deaths, recovered, and active\n    world_cases.append(confirmed_sum)\n    total_deaths.append(death_sum)\n    total_recovered.append(recovered_sum)\n    total_active.append(confirmed_sum-death_sum-recovered_sum)\n    \n    # calculate rates\n    mortality_rate.append(death_sum\/confirmed_sum)\n    recovery_rate.append(recovered_sum\/confirmed_sum)\n\n    # case studies \n    china_cases.append(confirmed_df[confirmed_df['Country\/Region']=='China'][i].sum())\n    italy_cases.append(confirmed_df[confirmed_df['Country\/Region']=='Italy'][i].sum())\n    us_cases.append(confirmed_df[confirmed_df['Country\/Region']=='US'][i].sum())\n    spain_cases.append(confirmed_df[confirmed_df['Country\/Region']=='Spain'][i].sum())\n    france_cases.append(confirmed_df[confirmed_df['Country\/Region']=='France'][i].sum())\n    \n    china_deaths.append(deaths_df[deaths_df['Country\/Region']=='China'][i].sum())\n    italy_deaths.append(deaths_df[deaths_df['Country\/Region']=='Italy'][i].sum())\n    us_deaths.append(deaths_df[deaths_df['Country\/Region']=='US'][i].sum())\n    spain_deaths.append(deaths_df[deaths_df['Country\/Region']=='Spain'][i].sum())\n    france_deaths.append(deaths_df[deaths_df['Country\/Region']=='France'][i].sum())\n    \n    china_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='China'][i].sum())\n    italy_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='Italy'][i].sum())\n    us_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='US'][i].sum())\n    spain_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='Spain'][i].sum())\n    france_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='France'][i].sum())","caaa5d80":"def plot_map(df, col, pal):\n    df = df[df[col]>0]\n    fig = px.choropleth(df, locations=\"Country\/Region\", locationmode='country names', \n                  color=col, hover_name=\"Country\/Region\", \n                  title=col, hover_data=[col], color_continuous_scale=pal)\n#     fig.update_layout(coloraxis_showscale=False)\n    fig.show()","5dfe1512":"import pandas as aw\ndata2=aw.read_csv('..\/input\/datacsv201012\/data202012.csv')\n\n\n","abde7b2e":"def plot_daywise(col, hue):\n    fig = px.bar(day_wise, x=\"Date\", y=col, width=700, color_discrete_sequence=[hue])\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\")\n    fig.show()","205c7901":"# Country wise\n# ============\nimport pandas as pj\ndata202012 = pj.read_csv('..\/input\/covid-19-clean-complete\/covid_19_clean_complete.csv')\ndata202012 = data202012.replace('', np.nan).fillna(0)\n# country_wise.head()\n\n\n","42481202":"def plot_map(df, col, pal):\n    df = df[df[col]>0]\n    fig = px.choropleth(df, locations=\"Country\/Region\", locationmode='country names', \n                  color=col, hover_name=\"Country\/Region\", \n                  title=col, hover_data=[col], color_continuous_scale=pal)\n#     fig.update_layout(coloraxis_showscale=False)\n    fig.show()","6235d4fb":"plot_map(data202012, 'Confirmed','matter')","fc28cb7a":"def plot_daywise(col, hue):\n    fig = px.bar(day_wise, x=\"Date\", y=col, width=700, color_discrete_sequence=[hue])\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\")\n    fig.show()","901f408c":"def plot_daywise_line(col, hue):\n    fig = px.line(day_wise, x=\"Date\", y=col, width=700, color_discrete_sequence=[hue])\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\")\n    fig.show()","1dff19f1":"plot_map(data202012, 'Deaths','matter')","09eb2e35":"confirmed_df.head()","97650327":"confirmed_df.head().sum()","dc4e0c19":"confirmed_df['Country\/Region'].value_counts()","10522404":"import pandas as aw\ndata2=aw.read_csv('..\/input\/datacsv201012\/data202012.csv')\ndata2.head()\n","e5926dc5":"data2.tail()","f1571afd":"#confirmed_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')                       \n# loading data right from the source:\n\ndeath_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\n\nconfirmed_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\n\nrecovered_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv')\n\ncountry_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/web-data\/data\/cases_country.csv')    \n    \n    ","1da7a77d":"confirmed_df.head()","5cd3f014":"recovered_df.head()","8e45cd58":"# color pallette\ncnf, dth, rec, act = '#393e46', '#ff2e63', '#21bf73', '#fe9801' \n","55b281b6":"confirmed = confirmed_df.loc[:, cols[4]:cols[-1]]\ndeaths = deaths_df.loc[:, cols[4]:cols[-1]]\nrecoveries = recoveries_df.loc[:, cols[4]:cols[-1]]","a25c1692":"dates = confirmed.keys()\nworld_cases = []\ntotal_deaths = [] \nmortality_rate = []\nrecovery_rate = [] \ntotal_recovered = [] \ntotal_active = [] \n\nchina_cases = [] \nitaly_cases = []\nus_cases = [] \nspain_cases = [] \nfrance_cases = [] \ngermany_cases = [] \nuk_cases = [] \nhun_cases=[]\n\nchina_deaths = [] \nitaly_deaths = []\nus_deaths = [] \nspain_deaths = [] \nfrance_deaths = [] \ngermany_deaths = [] \nuk_deaths = [] \nhun_deaths=[]\n\nchina_recoveries = [] \nitaly_recoveries = []\nus_recoveries = [] \nspain_recoveries = [] \nfrance_recoveries = [] \ngermany_recoveries = [] \nuk_recoveries = [] \nhun_recoveires=[]\n\nfor i in dates:\n    confirmed_sum = confirmed[i].sum()\n    death_sum = deaths[i].sum()\n    recovered_sum = recoveries[i].sum()\n    \n    # confirmed, deaths, recovered, and active\n    world_cases.append(confirmed_sum)\n    total_deaths.append(death_sum)\n    total_recovered.append(recovered_sum)\n    total_active.append(confirmed_sum-death_sum-recovered_sum)\n    \n    # calculate rates\n    mortality_rate.append(death_sum\/confirmed_sum)\n    recovery_rate.append(recovered_sum\/confirmed_sum)\n\n    # case studies \n    china_cases.append(confirmed_df[confirmed_df['Country\/Region']=='China'][i].sum())\n    italy_cases.append(confirmed_df[confirmed_df['Country\/Region']=='Italy'][i].sum())\n    us_cases.append(confirmed_df[confirmed_df['Country\/Region']=='US'][i].sum())\n    spain_cases.append(confirmed_df[confirmed_df['Country\/Region']=='Spain'][i].sum())\n    france_cases.append(confirmed_df[confirmed_df['Country\/Region']=='France'][i].sum())\n    germany_cases.append(confirmed_df[confirmed_df['Country\/Region']=='Germany'][i].sum())\n    uk_cases.append(confirmed_df[confirmed_df['Country\/Region']=='United Kingdom'][i].sum())\n    \n    \n    china_deaths.append(deaths_df[deaths_df['Country\/Region']=='China'][i].sum())\n    italy_deaths.append(deaths_df[deaths_df['Country\/Region']=='Italy'][i].sum())\n    us_deaths.append(deaths_df[deaths_df['Country\/Region']=='US'][i].sum())\n    spain_deaths.append(deaths_df[deaths_df['Country\/Region']=='Spain'][i].sum())\n    france_deaths.append(deaths_df[deaths_df['Country\/Region']=='France'][i].sum())\n    germany_deaths.append(deaths_df[deaths_df['Country\/Region']=='Germany'][i].sum())\n    uk_deaths.append(deaths_df[deaths_df['Country\/Region']=='United Kingdom'][i].sum())\n    \n    china_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='China'][i].sum())\n    italy_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='Italy'][i].sum())\n    us_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='US'][i].sum())\n    spain_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='Spain'][i].sum())\n    france_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='France'][i].sum())\n    germany_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='Germany'][i].sum())\n    \n       \n    uk_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='United Kingdom'][i].sum())\n    \n   # hungary_recoverises(recoveries_df[recoveries_df['Country\/Region']=='Hungary'][i].sum())\n    ","cc54b805":"def plot_pie_country_with_regions(country_name, title):\n    regions = list(latest_data[latest_data['Country_Region']==country_name]['Province_State'].unique())\n    confirmed_cases = []\n    no_cases = [] \n    for i in regions:\n        cases = latest_data[latest_data['Province_State']==i]['Confirmed'].sum()\n        if cases > 0:\n            confirmed_cases.append(cases)\n        else:\n            no_cases.append(i)\n\n    # remove areas with no confirmed cases\n    for i in no_cases:\n        regions.remove(i)\n\n    # csak 10 sor mutat\n    regions = [k for k, v in sorted(zip(regions, confirmed_cases), key=operator.itemgetter(1), reverse=True)]\n\n    for i in range(len(regions)):\n        confirmed_cases[i] = latest_data[latest_data['Province_State']==regions[i]]['Confirmed'].sum()  \n    \n    # additional province\/state will be considered \"others\"\n    \n    if(len(regions)>10):\n        regions_10 = regions[:10]\n        regions_10.append('Others')\n        confirmed_cases_10 = confirmed_cases[:10]\n        confirmed_cases_10.append(np.sum(confirmed_cases[10:]))\n        plot_pie_charts(regions_10,confirmed_cases_10, title)\n    else:\n        plot_pie_charts(regions,confirmed_cases, title)","b471d5e4":"cases=['Lat','Long']\nfor i in cases:\n    fig=px.pie(data[:15],width=1000,height=600,values=i,names=\"Country\/Region\",template=\"plotly_dark\",hole=0.3,title=\"<b>{} Recordeded w.r.t. to WHO Region of 15 worst effected countries<\/b>\".format(i))\n    fig.update_traces(textinfo='percent+label')\n    fig.show()","c26b83e3":"cols = confirmed_df.keys()","251f556a":"confirmed = confirmed_df.loc[:, cols[4]:cols[-1]]\ndeaths = deaths_df.loc[:, cols[4]:cols[-1]]\nrecoveries = recoveries_df.loc[:, cols[4]:cols[-1]]","24efcbe5":"dates = confirmed.keys()\nworld_cases = []\ntotal_deaths = [] \nmortality_rate = []\nrecovery_rate = [] \ntotal_recovered = [] \ntotal_active = [] \n\nchina_cases = [] \nitaly_cases = []\nus_cases = [] \nspain_cases = [] \nfrance_cases = [] \nhun_cases =   []\n\nchina_deaths = [] \nitaly_deaths = []\nus_deaths = [] \nspain_deaths = [] \nfrance_deaths = [] \nhun_deaths =   []\n\nchina_recoveries = [] \nitaly_recoveries = []\nus_recoveries = [] \nspain_recoveries = [] \nfrance_recoveries = [] \nhun_recovires = []\n\nfor i in dates:\n    confirmed_sum = confirmed[i].sum()\n    death_sum = deaths[i].sum()\n    recovered_sum = recoveries[i].sum()\n    \n    # confirmed, deaths, recovered, and active\n    world_cases.append(confirmed_sum)\n    total_deaths.append(death_sum)\n    total_recovered.append(recovered_sum)\n    total_active.append(confirmed_sum-death_sum-recovered_sum)\n    \n    # calculate rates\n    mortality_rate.append(death_sum\/confirmed_sum)\n    recovery_rate.append(recovered_sum\/confirmed_sum)\n\n    # case studies \n    china_cases.append(confirmed_df[confirmed_df['Country\/Region']=='China'][i].sum())\n    italy_cases.append(confirmed_df[confirmed_df['Country\/Region']=='Italy'][i].sum())\n    us_cases.append(confirmed_df[confirmed_df['Country\/Region']=='US'][i].sum())\n    spain_cases.append(confirmed_df[confirmed_df['Country\/Region']=='Spain'][i].sum())\n    france_cases.append(confirmed_df[confirmed_df['Country\/Region']=='France'][i].sum())\n    \n    hungary_cases.append(confirmed_df[confirmed_df['Country\/Region']=='Hungary'][i].sum())\n  \n    \n    \n    china_deaths.append(deaths_df[deaths_df['Country\/Region']=='China'][i].sum())\n    italy_deaths.append(deaths_df[deaths_df['Country\/Region']=='Italy'][i].sum())\n    us_deaths.append(deaths_df[deaths_df['Country\/Region']=='US'][i].sum())\n    spain_deaths.append(deaths_df[deaths_df['Country\/Region']=='Spain'][i].sum())\n    france_deaths.append(deaths_df[deaths_df['Country\/Region']=='France'][i].sum())\n    \n    china_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='China'][i].sum())\n\n    \n   \n\n\n    \n    \n    \n    ","aed35d44":"def daily_increase(data):\n    d = [] \n    for i in range(len(data)):\n        if i == 0:\n            d.append(data[0])\n        else:\n            d.append(data[i]-data[i-1])\n    return d \n\n# confirmed cases\nworld_daily_increase = daily_increase(world_cases)\nchina_daily_increase = daily_increase(china_cases)\nitaly_daily_increase = daily_increase(italy_cases)\nus_daily_increase = daily_increase(us_cases)\nspain_daily_increase = daily_increase(spain_cases)\nfrance_daily_increase = daily_increase(france_cases)\n\n\n\n\n\n# deaths\nworld_daily_death = daily_increase(total_deaths)\nchina_daily_death = daily_increase(china_deaths)\nitaly_daily_death = daily_increase(italy_deaths)\nus_daily_death = daily_increase(us_deaths)\nspain_daily_death = daily_increase(spain_deaths)\nfrance_daily_death = daily_increase(france_deaths)\n\n# recoveries\nworld_daily_recovery = daily_increase(total_recovered)\nchina_daily_recovery = daily_increase(china_recoveries)\nitaly_daily_recovery = daily_increase(italy_recoveries)\nus_daily_recovery = daily_increase(us_recoveries)\nspain_daily_recovery = daily_increase(spain_recoveries)\nfrance_daily_recovery = daily_increase(france_recoveries)","9cbb32c6":"days_since_1_22 = np.array([i for i in range(len(dates))]).reshape(-1, 1)\nworld_cases = np.array(world_cases).reshape(-1, 1)\ntotal_deaths = np.array(total_deaths).reshape(-1, 1)\ntotal_recovered = np.array(total_recovered).reshape(-1, 1)","3af3f871":"days_in_future = 10\nfuture_forcast = np.array([i for i in range(len(dates)+days_in_future)]).reshape(-1, 1)\nadjusted_dates = future_forcast[:-10]","6aa8df52":"start = '12\/15\/2020'\nstart_date = datetime.datetime.strptime(start, '%m\/%d\/%Y')\nfuture_forcast_dates = []\nfor i in range(len(future_forcast)):\n    future_forcast_dates.append((start_date + datetime.timedelta(days=i)).strftime('%m\/%d\/%Y'))","de034341":"X_train_confirmed, X_test_confirmed, y_train_confirmed, y_test_confirmed = train_test_split(days_since_1_22, world_cases, test_size=0.05, shuffle=False)","ea3e6520":"plt.figure(figsize=(16, 9))\nplt.plot(adjusted_dates, world_cases)\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()\n\nplt.figure(figsize=(16, 9))\nplt.plot(adjusted_dates, total_deaths)\nplt.title('# of Coronavirus Deaths Over Time', size=30)\nplt.xlabel('Days Since 12\/15\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()\n\nplt.figure(figsize=(16, 9))\nplt.plot(adjusted_dates, total_recovered)\nplt.title('# of Coronavirus Recoveries Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()\n\nplt.figure(figsize=(16, 9))\nplt.plot(adjusted_dates, total_active)\nplt.title('# of Coronavirus Active Cases Over Time', size=30)\nplt.xlabel('Days Since 12\/15\/2020', size=30)\nplt.ylabel('# of Active Cases', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","ef78cc89":"plt.figure(figsize=(16, 9))\nplt.plot(adjusted_dates, china_cases)\nplt.plot(adjusted_dates, italy_cases)\nplt.plot(adjusted_dates, us_cases)\nplt.plot(adjusted_dates, spain_cases)\nplt.plot(adjusted_dates, france_cases)\n\nplt.plot(adjusted_dates, hun_cases)\n\n\nplt.title('# Korona v\u00edrus Fert\u00f6z\u00f6tt', size=30)\nplt.xlabel('Vizs\u00e1lat 20\/04\/2020', size=30)\nplt.ylabel('# ', size=30)\nplt.legend(['China', 'Italy', 'US', 'Spain', 'France','HUN','], prop={'size': 20})\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()\n","66ca629a":"import pandas as pd\nhundata_covid_df = pd.read_csv(\"..\/input\/datacsv201012\/data202012.csv\")\nhundata_covid_df.head()","28cc2f47":"hundata_covid_df = confirmed(columns = {: 'state','country\/region': 'country'})\n                                           \n#recovered_df = confirmed.rename(columns = {'provience\/state': 'state','country\/region': 'country'})\n#death_df = death_df.rename(columns = {'provience\/state': 'state','country\/region': 'country'})\n#country_df = country_df.rename(columns = {'country_region': 'country'})\n\n                                       \n                                           \n                                           ","80d027c4":"soted_country_df = country_df.sort_values('confirmed',ascending = false).head(5)\n","197fc24b":"hundata_covid_df.head()","40b12f74":"hundata_covid_df.head(n=20)\n\n\n","65e92d6e":"#osszegezni az ertekekeket osrsagok alapjan\ndata_totals = data.sum(axis=1)\n\n","31a5b5d6":"from_future_import print_function\nfrom ipywidgets import interact, interactive, fixed, interact_manual","94dda5ae":"from IPython.core.display import display, HTML","0e51b4c0":"import numpy as np\n\nimport matplotlib.pyplot as plt\nimport plotly.expressz as px\nimport folium\nimport plotly.graph_objects as go\nimport seaborn as sns\nimport ipywidgets as widgets\n","fcf99809":"death_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\nconfirmed_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\nrecovered_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv')\ncountry_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/web-data\/data\/cases_country.csv')\n# aggregalt koron adatok \naggregalt_df= pd.read_csv('https:\/\/raw.githubusercontent.com\/datasets\/covid-19\/master\/data\/countries-aggregated.csv')\n","e11c019c":"death_df.head()","877b0136":"# renaming the df column names to lowercase\ncountry_df.columns = map(str.lower, country_df.columns)\nconfirmed_df.columns = map(str.lower, confirmed_df.columns)\ndeath_df.columns = map(str.lower, death_df.columns)\nrecovered_df.columns = map(str.lower, recovered_df.columns)\n\n# changing province\/state to state and country\/region to country\nconfirmed_df = confirmed_df.rename(columns={'province\/state': 'state', 'country\/region': 'country'})\nrecovered_df = confirmed_df.rename(columns={'province\/state': 'state', 'country\/region': 'country'})\ndeath_df = death_df.rename(columns={'province\/state': 'state', 'country\/region': 'country'})\ncountry_df = country_df.rename(columns={'country_region': 'country'})","8f82a565":"# total number of confirmed, death and recovered cases\nconfirmed_total = int(country_df['confirmed'].sum())\ndeaths_total = int(country_df['deaths'].sum())\nrecovered_total = int(country_df['recovered'].sum())\nactive_total = int(country_df['active'].sum())","c0fbda7e":"sorted_country_df = country_df.sort_values('confirmed', ascending= False)","3afd0f6e":"def highlight_col(x):\n    r = 'background-color: red'\n    p = 'background-color: purple'\n    g = 'background-color: grey'\n    df1 = pd.DataFrame('', index=x.index, columns=x.columns)\n    df1.iloc[:, 4] = p\n    df1.iloc[:, 5] = r\n    df1.iloc[:, 6] = g\n    return df1","9bd3c3a6":"import pycountry\nimport plotly.express as px\nimport pandas as pd\nURL_DATASET = r'https:\/\/raw.githubusercontent.com\/datasets\/covid-19\/master\/data\/countries-aggregated.csv'\ndf1 = pd.read_csv(URL_DATASET)\nprint(df1.head(10))  # Get first 3 entries in the dataframe\nprint(df1.tail(10))  # Get last 3 entries in the dataframe","f14b13e4":"plotly.express.choropleth(data_frame=None, lat=None, lon=None, locations=None, locationmode=None, geojson=None, featureidkey=None, color=None, hover_name=None, hover_data=None, custom_data=None, animation_frame=None, animation_group=None, category_orders={}, labels={}, color_discrete_sequence=None, color_discrete_map={}, color_continuous_scale=None, range_color=None, color_continuous_midpoint=None, projection=None, scope=None, center=None, title=None, template=None, width=None, height=None)","8ba387d5":"import pycountry\nimport plotly.express as px\nimport pandas as pd\n# ----------- Step 1 ------------\nURL_DATASET = r'https:\/\/raw.githubusercontent.com\/datasets\/covid-19\/master\/data\/countries-aggregated.csv'\ndf1 = pd.read_csv(URL_DATASET)\n# print(df1.head) # \n# ----------- Step 2 ------------\nlist_countries = df1['Country'].unique().tolist()\n# print(list_countries) #\nd_country_code = {}  # Az orsz\u00e1gnevek \u00e9s ISO-juk megtart\u00e1sa\nfor country in list_countries:\n    try:\n        country_data = pycountry.countries.search_fuzzy(country)\n        \n        \n         # country_data a pycountry.db.Country oszt\u00e1ly objektumainak list\u00e1ja\n        # Az els\u0151 elem, azaz a lista 0. indexe a legalkalmasabb\n        # objektum\u00e1nak alfa_3 attrib\u00fatuma van\n        \n        \n        country_code = country_data[0].alpha_3\n        d_country_code.update({country: country_code})\n    except:\n        print('could not add ISO 3 code for ->', country)\n       \n#\n# Ha nem tal\u00e1lja az orsz\u00e1got, \u00edrja be az ISO k\u00f3dot ''\n        \n        d_country_code.update({country: ' '})\n\n# print(d_country_code) # Uncomment to check dictionary  \n\n\n\n# hozzon l\u00e9tre egy \u00faj oszlopot iso_alpha a df-ben\n# \u00e9s t\u00f6ltse ki megfelel\u0151 iso 3 k\u00f3ddal\n\nfor k, v in d_country_code.items():\n    df1.loc[(df1.Country == k), 'iso_alpha'] = v\n\n# print(df1.head)  # Uncomment to confirm that ISO codes added\n# ----------- Step 3 ------------\nfig = px.choropleth(data_frame = df1,\n                    locations= \"iso_alpha\",\n                    color= \"Confirmed\",  # oszlop erteke sz\u00ednmeghatarozas\n                    hover_name= \"Country\",\n                    color_continuous_scale= 'RdYlGn',  #  szin skala red, yellow green\n                    animation_frame= \"Date\")\n\nimport pandas as pd\nhundata_covid_df = pd.read_csv(\"..\/input\/datacsv201012\/data202012.csv\")\nhundata_covid_df.head()fig.show()","adac6bae":"\nimport pandas as pd\nhundata_covid_df = pd.read_csv(\"..\/input\/covid19-hun\/COVID19_HUN.csv\")\nhundata_covid_df.head()\n\ndf_confirmed = df_latest[df_latest['Type']=='Confirmed']\n","b8e93fe9":"df_confirmed = hundata_covid_df[hundata_covid_df['Type']=='Confirmed']","2e696064":"hundata_covid_df.head()","095b892d":"# HUN aggregalt adatok \nimport pandas as pd\nhundata_covid_df = pd.read_csv(\"..\/input\/covid19-2020huncsv\/COVID19_HUN_CSV.csv\")\nhundata_covid_df.head()\n","04db6b22":"hundata_covid_df.head(40)","9c4c19f8":"import interact \n\n#from ipywidgets import interact, interactive, fixed, interact_manual\n\n\ndef bubble_chart(n):\n    fig = px.scatter(, x=\"year\", y=\"cases\", size=\"Esetek\", color=\"countries\",\n               hover_name=\"countries_HUN\", size_max=60)\n    fig.update_layout(\n    title=str(n) +\" Worst hit countries\",\n    xaxis_title=\"Countries\",\n    yaxis_title=\"Confirmed Cases\",\n    width = 700\n    )\n    fig.show()\n\ninteract(bubble_chart, n=10)","f9178443":"\nhundata_covid_df.head.sum(axis = 0, skipna = True)","0bdac87a":"import branca.colormap as pp\nimport folium\nimport geopandas as gpd\nimport numpy as np\nimport pandas as ps\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom sklearn.prepprocessing import MinMaxScaler\n","70ed5112":"\n\ncorona_df = ps.read_csv ( '..\/input\/covid19ldata\/COVID19_ldata.csv')\ncorona_df.head()\n","bce939b1":"corona_df.age","92b3aa96":"corona_df.summary","8e4300f6":"corona_df.gender\n","05523d61":"corona_df.tail","554c91f8":"corona_df.describe","6c66671e":"corona_df.isnull().sum()","34a41b2c":"corona_df.columns","1560ebbe":"\ncorona_df = ps.read_csv ( '..\/input\/covid19ldata\/COVID19_ldata.csv')\n\n\nsns.relplot(x=\"location\", y=\"age\",corona_df = corona_df)","12d3b71a":"sns.pairplot(corona_df)","d7bd03bf":"corona_df.columns","443a23c9":"sns.catplot(X='death', y='recovered', corona_df = corona_df)","3e2cbf24":"> > > "}}