{"cell_type":{"3cf237dc":"code","19d4d663":"code","d8e20723":"code","0645b483":"code","9443b05a":"code","94cff4af":"code","be8fbfc2":"code","3bc539c6":"code","91d86a2a":"code","03c4e401":"code","a8389b16":"code","c4694abf":"code","6c4f95a5":"code","5d83a1c4":"code","6e8ac719":"markdown","b0616aa7":"markdown","b377fef3":"markdown","11704b03":"markdown","664761f8":"markdown","a449a264":"markdown","dbeb4574":"markdown"},"source":{"3cf237dc":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n%matplotlib inline","19d4d663":"df = pd.read_csv(\"..\/input\/petfinder-pawpularity-score\/train.csv\")\ndf.head()","d8e20723":"df.info()","0645b483":"submission_df = pd.read_csv(\"..\/input\/petfinder-pawpularity-score\/test.csv\")\nsubmission_df.head()","9443b05a":"from PIL import Image\nimport os\n\nsize_data = []\nfor idt in df['Id']:\n    p = os.path.join('..\/input\/petfinder-pawpularity-score\/train',idt + '.jpg')\n    image = Image.open(p)\n    width, height = image.size\n    size_data.append([width, height, width*height])\n\nsize_df = pd.DataFrame(size_data, columns=['width', 'height', 'size'])","94cff4af":"result_df = pd.concat([df, size_df],  axis=1)","be8fbfc2":"fig, ax = plt.subplots()\nax.set_title('Label Plot')\nax.boxplot(df[\"Pawpularity\"])\nplt.show()","3bc539c6":"import seaborn as sns\nfor col in df.columns[1:-1]:\n    fig, axs = plt.subplots(figsize=(12,4), ncols=2)\n    sns.histplot(df.iloc[df[col].to_numpy() == 0, -1], ax=axs[0]).set_title(col + '=0')\n    sns.histplot(df.iloc[df[col].to_numpy() == 1, -1], ax=axs[1]).set_title(col + '=1')","91d86a2a":"from matplotlib.pyplot import figure\nimport seaborn as sns\n\nfig = plt.figure(figsize=(12, 10))\nax = fig.add_subplot()\n\"\"\ncorr_data = result_df.iloc[:, 1:].corr()\nsns.heatmap(corr_data)\nplt.show()","03c4e401":"train_data, test_data = np.split(df, [int(.95*len(df))])\nX_train = train_data.iloc[:, 1:-1]\ny_train = train_data.iloc[:, -1]\nX_test = test_data.iloc[:, 1:-1]\ny_test = test_data.iloc[:, -1]\ny_train_bool = y_train > 60\ny_test_bool = y_test < 60","a8389b16":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neural_network import MLPClassifier\n\ndef create_model():\n    # return RandomForestRegressor(n_estimators=20, max_depth=8, random_state=1)\n    return RandomForestRegressor(n_estimators=20, max_depth=8, random_state=1)\n\ndef create_classification_model():\n    return RandomForestClassifier(n_estimators=20, max_depth=8, random_state=1)\n    # return MLPClassifier(hidden_layer_sizes=(8, 8, 8), max_iter=50000, random_state=1)\n    # return GradientBoostingClassifier(n_estimators=300, learning_rate=0.5, max_depth=1, max_features=8, random_state=1)","c4694abf":"regressor = create_model()\nregressor.fit(X_train, y_train)\n\nclassifier = create_classification_model()\nclassifier.fit(X_train, y_train_bool)","6c4f95a5":"from sklearn.metrics import mean_squared_error, r2_score, f1_score\n\ntrain_predictions = regressor.predict(X_train)\ntrain_predictions_bool = classifier.predict(X_train)\ntrain_mse = mean_squared_error(y_train, train_predictions)\ntrain_r2 = r2_score(y_train, train_predictions)\ntrain_f1 = f1_score(y_train_bool, train_predictions_bool)\n\ntest_predictions = regressor.predict(X_test)\ntest_predictions_bool = classifier.predict(X_test)\ntest_mse = mean_squared_error(y_test, test_predictions)\ntest_r2 = r2_score(y_test, test_predictions)\ntest_f1 = f1_score(y_test_bool, test_predictions_bool)\n\nprint(\"train_mse: \", train_mse, \", train_r2: \", train_r2, \", train_f1: \", train_f1)\nprint(\"test_mse: \", test_mse, \", test_r2: \", test_r2, \", test_f1: \", test_f1)","5d83a1c4":"importances = regressor.feature_importances_\nstd = np.std([tree.feature_importances_ for tree in regressor.estimators_], axis=0)\n\nforest_importances = pd.Series(importances, index=X_train.columns)\n\nfig, ax = plt.subplots()\nforest_importances.plot.bar(yerr=std, ax=ax)\nax.set_title(\"Feature importances using MDI\")\nax.set_ylabel(\"Mean decrease in impurity\")\nfig.tight_layout()","6e8ac719":"## create image width\/height\/size features","b0616aa7":"## Data Preview","b377fef3":"## Data distribution","11704b03":"## Metadata correlation","664761f8":"# Data Exploration","a449a264":"## Performance on basic model","dbeb4574":"# Introduction"}}