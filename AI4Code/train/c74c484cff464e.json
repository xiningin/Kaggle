{"cell_type":{"dde73a1e":"code","163317ed":"code","b3bd2cd3":"code","3386e060":"code","2995a679":"code","2ae5b5cf":"code","90ac1f17":"code","38c74a7f":"code","b60ca826":"code","a843a494":"code","1499c136":"code","01133810":"code","979eff55":"code","7cc90241":"code","bd7f73a5":"code","d15290b1":"code","bdc86180":"code","f3ac830d":"code","983e3801":"code","565ed74f":"code","e5e6767a":"code","68a2b54a":"code","53887df1":"code","5a343ab7":"code","a1fccfe3":"code","a742a072":"code","7859f759":"code","5b137acf":"code","9d675ed6":"code","9c294807":"code","27d9c40b":"code","85721ce6":"code","8f4d1b8f":"code","8bad81ab":"code","6a32c394":"markdown","1ea3e137":"markdown","b033b134":"markdown","3203f58d":"markdown","cf276ee8":"markdown","ea3fb5b8":"markdown","4af83cff":"markdown","137eb23e":"markdown","717903fb":"markdown","388bcfb5":"markdown","800c50a9":"markdown","0642d5dd":"markdown","7993b901":"markdown","03a85b5c":"markdown","6973d156":"markdown","88c1111e":"markdown","61f1f764":"markdown","58cbb3c3":"markdown","e6307125":"markdown","358edf32":"markdown","cc5727e0":"markdown","19c85155":"markdown","a162c337":"markdown","9a4fc9ba":"markdown","43857370":"markdown","a058311d":"markdown","02e8caec":"markdown","c3e13799":"markdown","6137df4d":"markdown","a5c36539":"markdown","d730ff6f":"markdown","6c552e0f":"markdown","d3333177":"markdown","286b948e":"markdown","ccf22d57":"markdown","54edf364":"markdown","ed245c16":"markdown","4e909769":"markdown","e6f41b2e":"markdown","9e11b703":"markdown"},"source":{"dde73a1e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","163317ed":"#import libraries\nimport pandas as pd               \nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('seaborn-white') #Set the matplotlib stylesheet","b3bd2cd3":"pip install xlrd","3386e060":"pip install openpyxl","2995a679":"yk=pd.read_excel('\/kaggle\/input\/finance-credit-cards-and-defaults\/Default.xlsx',usecols=[1,2,3,4])\nyk","2ae5b5cf":"yk.head()","90ac1f17":"yk.shape","38c74a7f":"yk.info()","b60ca826":"sns.heatmap(yk.isnull())","a843a494":"yk.isnull().sum()","1499c136":"pd.set_option('precision', 2)\nyk.describe()","01133810":"(yk.balance==0).sum(axis=0)","979eff55":"yk.student.value_counts()","7cc90241":"yk.default.value_counts()","bd7f73a5":"yk['default2'] = yk.default.factorize()[0]                       \nyk['student2'] = yk.student.factorize()[0]                       \nyk.head() ","d15290b1":"X_train = yk.balance.values.reshape(-1,1)        \ny = yk.default2\nX_test = np.arange(yk.balance.min(), yk.balance.max()).reshape(-1 ,1)","bdc86180":"import sklearn.linear_model as skl_lm\n\nclf = skl_lm.LogisticRegression(solver='newton-cg')\nclf.fit(X_train,y)                      \nprob = clf.predict_proba(X_test)\n\nfig, (ax1, ax2) = plt.subplots(1,2, figsize=(12,5)) \nsns.regplot(yk.balance, yk.default2, order=1, ci=None,scatter_kws={'color':'orange'},line_kws={'color':'lightblue', 'lw':2}, ax=ax1) \n\nax2.scatter(X_train, y, color='orange') \nax2.plot(X_test, prob[:,1], color='lightblue') \nfor ax in fig.axes: \n    ax.hlines(1, xmin=ax.xaxis.get_data_interval()[0],xmax=ax.xaxis.get_data_interval()[1], linestyles='dashed', lw=1) \n    ax.hlines(0, xmin=ax.xaxis.get_data_interval()[0],xmax=ax.xaxis.get_data_interval()[1], linestyles='dashed', lw=1) \n    ax.set_ylabel('Probability of default') \n    ax.set_xlabel('Balance') \n    ax.set_yticks([0, 0.25, 0.5, 0.75, 1.]) \n    ax.set_xlim(xmin=-100) ","f3ac830d":"print(clf)\nprint('classes: ',clf.classes_)\nprint('coefficients: ',clf.coef_)\nprint('intercept :', clf.intercept_)","983e3801":"import statsmodels.api as sm\nimport statsmodels.discrete.discrete_model as sms\n\npd.set_option('precision', 6)\nX_train = sm.add_constant(yk.balance)\nest = sm.Logit(y.ravel(), X_train).fit()","565ed74f":"est.summary2().tables[1]","e5e6767a":"X_train = sm.add_constant(yk.student2)\ny = yk.default2\nest = sms.Logit(y, X_train).fit()","68a2b54a":"print(est.summary().tables[1].as_text())","53887df1":"X_train = sm.add_constant(yk[['balance', 'income', 'student2']])\nest = sms.Logit(y, X_train).fit()","5a343ab7":"print(est.summary().tables[1])","a1fccfe3":"X_train = yk[yk.student == 'Yes'].balance.values.reshape(-1,1)\ny = yk[yk.student == 'Yes'].default2","a742a072":"X_train2 = yk[yk.student == 'No'].balance.values.reshape(-1,1)\ny2 = yk[yk.student == 'No'].default2","7859f759":"X_test = np.arange(yk.balance.min(), yk.balance.max()).reshape(-1,1)","5b137acf":"clf = skl_lm.LogisticRegression(solver='newton-cg')\nclf2 = skl_lm.LogisticRegression(solver='newton-cg')\nclf.fit(X_train,y)","9d675ed6":"clf2.fit(X_train2,y2) ","9c294807":"prob = clf.predict_proba(X_test)    \nprob2 = clf2.predict_proba(X_test)","27d9c40b":"yk.groupby(['student','default']).size().unstack('default')","85721ce6":"fig, (ax1, ax2) = plt.subplots(1,2, figsize=(12,5)) \n \n# Left plot \nax1.plot(X_test, prob[:,1], color='orange', label='Student') \nax1.plot(X_test, prob2[:,1], color='lightblue', label='Non-student') \nax1.hlines(127\/2817, colors='orange', label='Overall Student',xmin=ax1.xaxis.get_data_interval()[0],xmax=ax1.xaxis.get_data_interval()[1], linestyles='dashed') \nax1.hlines(206\/6850, colors='lightblue', label='Overall Non-Student',xmin=ax1.xaxis.get_data_interval()[0],xmax=ax1.xaxis.get_data_interval()[1], linestyles='dashed') \nax1.set_ylabel('Default Rate') \nax1.set_xlabel('Credit Card Balance') \nax1.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1.]) \nax1.set_xlim(450,2500) \nax1.legend(loc=2) \n\n# Right plot \nsns.boxplot('student', 'balance', data=yk, orient='v', ax=ax2);","8f4d1b8f":"from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n\nX = yk[['balance', 'income', 'student2']]\ny = yk.default2        \n\nlda = LinearDiscriminantAnalysis(solver='svd')\ny_pred = lda.fit(X, y).predict(X)\nyk_df = pd.DataFrame({'True default status': y, 'Predicted default status': y_pred})\nyk_df.replace(to_replace={0:'No', 1:'Yes'}, inplace=True)           \nyk_df.groupby(['Predicted default status','True default status']).size().unstack('True default status')","8bad81ab":"decision_prob = 0.2                                                    \n\ny_prob = lda.fit(X, y).predict_proba(X)                                \n\nyk_df = pd.DataFrame({'True default status': y,'Predicted default status': y_prob[:,1] > decision_prob})                                   \nyk_df.replace(to_replace={0:'No', 1:'Yes', 'True':'Yes', 'False':'No'}, inplace=True) \nyk_df.groupby(['Predicted default status','True default status']).size().unstack('True default status')","6a32c394":"***Create training and test data :-***\n\n    i)Training Data:-\n    input data (X) \u2013 balance\n    output data (y) \u2013 default2\n    \n    ii)Test Data:-\n    Create new data varies between min and max value of balance","1ea3e137":"# 14. Logistic Regression - Dummy Variable :-","b033b134":"# 11. Encode Categorical Variables :-\n\nMost machine learning models accept the numerical data only. It is necessary to pre-process the categorical variables. We need to convert the categorical variables into numbers. For any machine learning project, converting categorical data is an unavoidable activity.\n\nWe have created two dummy variable columns student2 and default2 after encoding the categorical data","3203f58d":"# 15. Multiple Logistic Regression :-","cf276ee8":"The dataset does not contain any null values.","ea3fb5b8":"# 2. Load The Data :- ","4af83cff":"# 1. Objective :-\n\n  \nPredict whether a credit card user will default on monthly credit card payment based on annual income and monthly credit card balance","137eb23e":"# Data Modeling : -","717903fb":"# Finance - Credit Card and Default","388bcfb5":"# 3. View the raw data:-","800c50a9":"***Calculate Probabilities :-***","0642d5dd":"***Calculate probability using logistic regression :-***","7993b901":"# 16. Cofounding :-","03a85b5c":"# 13. Logistic Regression - statsmodel :-","6973d156":"# Understanding Data : -","88c1111e":"# Exploratory Data Analysis : -","61f1f764":"# 7. Statistical Analysis :-","58cbb3c3":"# 12. Logistic Regression - Sklearn :-","e6307125":"This confirms that the predictor student has only 2 possible values. Yes and No. The distribution of students vs non-students is given above.","358edf32":"***Thank you....***\n\n***Please Upvote.....***","cc5727e0":"***Create balance and default vectors for students :-***","19c85155":"# 6. Null Values :-","a162c337":"# 8. Analysis of Zero Values in Predictors :-","9a4fc9ba":"***Graphical Representation:-***","43857370":"No. of Rows in Dataset is 10000 and No. of Columns in Dataset is 4.","a058311d":"***50% Threshold :-***","02e8caec":"***Create balance and default vectors for non- students :-***","c3e13799":"499 rows of the balance variable contain the zero value, which is possible. Hence we conclude the data cleaning steps are not required for the balance variable","6137df4d":"***Confusion Matrix :-***","a5c36539":"***20% Threshold :-***","d730ff6f":"# 10. Response Variable Analysis :-","6c552e0f":"# 9. Categorical Variable Analysis :-","d3333177":"We can see that the min value of balance is zero. We need to confirm how many zero values existing in the dataset.\nFor all other columns, the data cleaning is not required. However for categorical variables, the encoding is required.","286b948e":"This confirms that the response variable default has only 2 possible values. Yes and No. Data is highly skewed. Only 3.33% of the individuals in training data defaulted.","ccf22d57":"# 17. Linear Discriminant Analysis :-","54edf364":"***Fit both dataset to Logistic Regression :-***","ed245c16":"***Print the values of coefficient \u03b2^0,\u03b2^1 and array of distinct classes that y takes :-***","4e909769":"# 4. Dimension of the Data :-","e6f41b2e":"# 5. Data Types :-","9e11b703":"***Create test vector :-***"}}