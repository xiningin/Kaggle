{"cell_type":{"5ae03919":"code","7623d7b1":"code","c9eb84fb":"code","3cfd493e":"code","dd5269c9":"code","30ca2792":"code","4388783f":"code","3897d05a":"code","fec77636":"code","714bc3ff":"code","dd56c1b2":"code","07bc90ec":"code","31ff7338":"code","1fae2812":"code","cba77c7a":"code","902f0d1b":"code","8482fca2":"code","97793c71":"code","8aa4bd4d":"code","4887923c":"markdown","539cd179":"markdown","6986e095":"markdown"},"source":{"5ae03919":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7623d7b1":"from sklearn.datasets import load_boston","c9eb84fb":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","3cfd493e":"df=load_boston()","dd5269c9":"dataset = pd.DataFrame(df.data)","30ca2792":"dataset.head()","4388783f":"dataset.columns=df.feature_names","3897d05a":"# dataset.head()","fec77636":"df.target.shape","714bc3ff":"dataset[\"Price\"]=df.target","dd56c1b2":"dataset.head()","07bc90ec":"X=dataset.iloc[:,:-1]\ny=dataset.iloc[:,-1]","31ff7338":"from sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LinearRegression\n\nlin_regressor=LinearRegression()\nmse=cross_val_score(lin_regressor,X,y,scoring='neg_mean_squared_error', cv=5)\nmean_mse=np.mean(mse)\nprint(mean_mse)","1fae2812":"from sklearn.linear_model import Ridge\nfrom sklearn.model_selection import GridSearchCV\n\nridge = Ridge()\nparameters={'alpha': [1e-15,1e-10,1e-8,1e-3,1e-2,1,5,10,20,30,35,40,45,55,100]}\nridge_regressor=GridSearchCV(ridge,parameters,scoring='neg_mean_squared_error', cv=5)\nridge_regressor.fit(X,y)","cba77c7a":"print(ridge_regressor.best_params_)\nprint(ridge_regressor.best_score_)","902f0d1b":"from sklearn.linear_model import Lasso\nfrom sklearn.model_selection import GridSearchCV\nlasso=Lasso()\nparameters={'alpha': [1e-15,1e-10,1e-8,1e-3,1e-2,1,5,10,20,30,35,40,45,55,100]}\nlasso_regressor=GridSearchCV(lasso,parameters,scoring=\"neg_mean_squared_error\" , cv=5)\n\nlasso_regressor.fit(X,y)\nprint(lasso_regressor.best_params_)\nprint(lasso_regressor.best_score_)","8482fca2":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,random_state=0)\nprediction_lasso=lasso_regressor.predict(X_test)\nprediction_ridge=ridge_regressor.predict(X_test)","97793c71":"import seaborn as  sns\n\nsns.distplot(y_test-prediction_lasso)","8aa4bd4d":"sns.distplot(y_test-prediction_ridge)","4887923c":"## Lassor Regression","539cd179":"## Ridge Regression ","6986e095":"## Linear Regression  "}}