{"cell_type":{"8df2962f":"code","39fbb080":"code","e6268841":"code","4cb62006":"code","6cc9e4ad":"code","068894b4":"code","cd189c29":"code","a49be4b8":"code","f4b6f1ed":"code","ad779dc4":"code","a33e2830":"code","de790c75":"code","857df28a":"code","afd31ed9":"code","a6ffa871":"code","1092a0fc":"code","ed82c51f":"code","f5d49f21":"code","3fe83874":"code","c9f05294":"code","345b1434":"code","cd072b1a":"code","6316e95a":"code","139623fb":"code","f18bb510":"code","a8547587":"code","4e819f69":"code","fd8fe889":"code","188ee2de":"code","6d448edd":"code","0e6bd4ce":"code","99fcece7":"code","a9f3b5d2":"code","a173973e":"code","62d0a00a":"code","0943cf37":"code","e9e1d472":"code","3c2226cb":"code","c6d3cf9a":"code","42a3a604":"code","26b27dc6":"code","e563101f":"code","eb1846ae":"code","aed36bcd":"code","dd87f4a6":"code","169385ce":"code","154f5dca":"code","e13845e4":"code","70916233":"code","d1949324":"code","10304faf":"code","3f7ca43c":"code","2cef1cf0":"markdown","447f5bf0":"markdown"},"source":{"8df2962f":"import numpy as np, pandas as pd, matplotlib.pyplot as plt, seaborn as sns","39fbb080":"%matplotlib inline\n%config Completer.use_jedi = False","e6268841":"train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","4cb62006":"train.head(4)","6cc9e4ad":"train.info()","068894b4":"sns.heatmap(train.isnull(), cbar=False, yticklabels=False, cmap='viridis')","cd189c29":"sns.heatmap(test.isnull(), cbar=False, yticklabels=False, cmap='viridis')","a49be4b8":"sns.set_style('whitegrid')","f4b6f1ed":"plt.figure(figsize=(8,6))\np1 = sns.countplot(data = train, x = 'Survived', hue = 'Sex', palette='coolwarm')\np1.set_title('Comparing Survival rate based on gender',pad=30,fontsize=20)\np1.set_xlabel('')\np1.set_xticklabels(['Not Survive','Survive'],fontsize=15)","ad779dc4":"#To understand classwise survival rate\nsns.countplot(data = train, x = 'Survived', hue = 'Pclass')\n#Class 3(cheapest) survival was least","a33e2830":"plt.figure(figsize=(11,7))\nsns.distplot(train['Age'].dropna(), bins = 30, kde=False)\n#graph skewed towards kids. More people of age group 20-30","de790c75":"plt.figure(figsize=(8,5))\nsns.countplot(x='SibSp', data=train)\n#Most people on board were travelling alone. Some were either with spouse or single parent","857df28a":"train.info()","afd31ed9":"import cufflinks as cf\ncf.go_offline()","a6ffa871":"train['Fare'].iplot(kind='hist',bins=80, yTitle='Fare', xTitle='No. of Tickets')\n#most people on board 3rd class = cheap ticket","1092a0fc":"#Exploring Age\nplt.figure(figsize=(9,7))\nsns.boxplot(x='Pclass', y='Age',data=train)","ed82c51f":"mean_ages = train.groupby('Pclass').mean()['Age']\nmean_ages","f5d49f21":"def fill_age(col):\n    age = col[0]\n    pclass = col[1]\n    \n    if pd.isnull(age):\n        return mean_ages[pclass]\n    else:\n        return age","3fe83874":"#fill_age([None,1])","c9f05294":"train['Age']=train[['Age','Pclass']].apply(fill_age,axis=1)\ntest['Age']=test[['Age','Pclass']].apply(fill_age,axis=1)","345b1434":"sns.heatmap(train.isnull(), cbar=False, yticklabels=False, cmap='viridis')","cd072b1a":"sns.heatmap(test.isnull(), cbar=False, yticklabels=False, cmap='viridis')","6316e95a":"train.drop('Cabin',axis=1,inplace = True)\ntest.drop('Cabin',axis=1,inplace = True)","139623fb":"train.fillna('S',inplace=True)","f18bb510":"test['Fare'].fillna(test['Fare'].mean(),inplace=True)","a8547587":"sns.heatmap(train.isnull(), cbar=False, yticklabels=False, cmap='viridis')","4e819f69":"sns.heatmap(test.isnull(), cbar=False, yticklabels=False, cmap='viridis')","fd8fe889":"train.head(5)","188ee2de":"males = pd.get_dummies(train['Sex'],drop_first=True)\nemb = pd.get_dummies(train['Embarked'],drop_first=True)\npclss = pd.get_dummies(train['Pclass'],drop_first=True)\n\nmales2 = pd.get_dummies(test['Sex'],drop_first=True)\nemb2 = pd.get_dummies(test['Embarked'],drop_first=True)\npclss2 = pd.get_dummies(test['Pclass'],drop_first=True)","6d448edd":"train = pd.concat([train,emb,males,pclss],axis=1)\ntest = pd.concat([test,emb2,males2,pclss2],axis=1)","0e6bd4ce":"train.rename(columns = {2:'Pclass 2', 3:'Pclass 3'},inplace=True) \ntest.rename(columns = {2:'Pclass 2', 3:'Pclass 3'},inplace=True) ","99fcece7":"train.head(2)","a9f3b5d2":"test.head(2)","a173973e":"train.drop(['Name','Ticket','Embarked','Sex','Pclass'],axis=1,inplace=True)\ntest.drop(['Name','Ticket','Embarked','Sex','Pclass'],axis=1,inplace=True)","62d0a00a":"train.head(4)","0943cf37":"test.head(4)","e9e1d472":"train.tail(3)","3c2226cb":"train.shape","c6d3cf9a":"TestPass_id = test['PassengerId']\ntrain.drop('PassengerId',axis=1,inplace = True)\ntest.drop('PassengerId',axis=1,inplace = True)","42a3a604":"from sklearn.preprocessing import StandardScaler","26b27dc6":"std = StandardScaler()","e563101f":"train[['Age','Fare']] = std.fit_transform(train[['Age','Fare']])\ntest[['Age','Fare']] = std.fit_transform(test[['Age','Fare']])","eb1846ae":"train.head(5)","aed36bcd":"test.head(5)","dd87f4a6":"x = train.drop('Survived',axis=1)\ny = train['Survived']","169385ce":"from sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier(criterion='gini', n_estimators=700,)","154f5dca":"rf.fit(x,y)","e13845e4":"pred = rf.predict(test)","70916233":"submission = pd.DataFrame({'PassengerId':TestPass_id,'Survived':pred})","d1949324":"submission","10304faf":"filename = 'Titanic Predictions 4.csv'\nsubmission.to_csv(filename,index=False)\n\nprint('Saved file: ' + filename)","3f7ca43c":"#76% accuracy","2cef1cf0":"## Feature Engineering of Categorical Data - Dummy Var","447f5bf0":"# Training Model\n"}}