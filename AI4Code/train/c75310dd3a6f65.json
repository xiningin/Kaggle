{"cell_type":{"97934477":"code","f25a120f":"code","c0d4f9a8":"code","032e9f60":"code","7caa2aa9":"code","8cf03885":"code","77d7f644":"code","7571e30d":"code","d84a0a10":"code","ae8bbc1b":"code","e70c0962":"code","1b0aab25":"code","519997d4":"code","b1771c39":"code","23d1c3ca":"code","1d3df8b0":"code","8a66f0cc":"code","03db7e95":"code","e22204fc":"code","5b25fbe3":"code","627752f2":"code","c3b9eee1":"code","8064ec64":"code","647e2146":"code","c3c6cbf5":"code","3c56daed":"code","f80f7f6f":"code","2ea599ed":"code","5bc0ec8d":"code","28e7a3e4":"code","d3854073":"code","b94f6aa2":"code","75d14369":"code","1c9f4ee6":"code","ba20893e":"code","d2a04bda":"code","3735628d":"code","f15f945a":"code","f186bd3b":"code","727a5775":"code","a9b4184b":"code","9b22e975":"code","255478b2":"code","38188f31":"code","717f3dca":"code","39813746":"code","ba77840d":"code","ea7d769e":"code","fbe4ab1b":"code","2b858ca3":"code","72104946":"code","d62370be":"code","99433cce":"code","851842c5":"code","48d4af42":"code","b7db7877":"code","d6f4bbae":"code","6e82b8ab":"code","b4451fb1":"code","6c48f484":"code","14516e50":"code","6a4d0783":"code","df92aab6":"code","66cee185":"markdown","0da05d32":"markdown","e23e891b":"markdown","71b88bca":"markdown","2290e12c":"markdown","c3d036c8":"markdown","c77f56dc":"markdown","d1d1a970":"markdown","4f58cd06":"markdown","7407c158":"markdown","4e1fb218":"markdown","702d1eb8":"markdown","efac4d51":"markdown","17881eec":"markdown","183f440e":"markdown","48507310":"markdown","3b4d39d5":"markdown","9613cc20":"markdown","de20fae4":"markdown","f8fe17ce":"markdown","c8ee11e4":"markdown","56ab3a5e":"markdown","f29c9d63":"markdown","96f6d76e":"markdown","56813908":"markdown","62f72cdc":"markdown","5b10a14c":"markdown","3f605b5b":"markdown","ec2e0cdf":"markdown","f7a5f6df":"markdown","143df1f0":"markdown","2b916514":"markdown","65971f87":"markdown","457f2ea1":"markdown","9cba64d3":"markdown","4c01ea75":"markdown","e55edcbd":"markdown","52b63b3c":"markdown","77634955":"markdown","75aa7ba9":"markdown","4a1ff448":"markdown","2a3bdbbb":"markdown","20070ade":"markdown","319ed7d7":"markdown","90b30452":"markdown","7dce9c9a":"markdown","fa5c104e":"markdown","08ddd143":"markdown","8d5339cc":"markdown","eec64f9d":"markdown","388589e6":"markdown","4dd8719f":"markdown","d2250bad":"markdown","01100ed4":"markdown","3c9dfc30":"markdown","ded3e17e":"markdown","24de3092":"markdown","746e5967":"markdown","ceb9c36b":"markdown","dc85728e":"markdown","2636eb1e":"markdown","495f785b":"markdown","a5b36fa8":"markdown","27a5e079":"markdown","d4fa1122":"markdown","fcc5ec15":"markdown","0897544f":"markdown","b72f40b1":"markdown","b8e45da5":"markdown","0d5e1e78":"markdown","9b3108cc":"markdown","1ee220ec":"markdown","167232e3":"markdown","54ad349e":"markdown","6105c80c":"markdown","9648bd60":"markdown","cd3bd350":"markdown","ed688304":"markdown","b7184140":"markdown","bc37c5bb":"markdown","50906310":"markdown","0e4411bd":"markdown","eb89fa2d":"markdown","102bcec5":"markdown"},"source":{"97934477":"import pandas as pd \nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline \n\nimport gc\nfrom datetime import datetime \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom catboost import CatBoostClassifier\nimport lightgbm as lgb\nimport xgboost as xgb\n\npd.set_option('display.max_columns', 100)\n\n\nRFC_METRIC = 'gini'  #metric used for RandomForrestClassifier\nNUM_ESTIMATORS = 100 #number of estimators used for RandomForrestClassifier\nNO_JOBS = 4 #number of parallel jobs used for RandomForrestClassifier\n\n#VALIDATION\nVALID_SIZE = 0.20 # simple validation using train_test_split\n\n#CROSS-VALIDATION\nNUMBER_KFOLDS = 5 #number of KFolds for cross-validation\n\nRANDOM_STATE = 2018\n\nMAX_ROUNDS = 1000 #lgb iterations\nEARLY_STOP = 50 #lgb early stop \nOPT_ROUNDS = 1000  #To be adjusted based on best validation rounds\nVERBOSE_EVAL = 50 #Print out metric result\n\nIS_LOCAL = True\n\nimport os\n\nif(IS_LOCAL):\n    PATH=\"..\/input\/default-of-credit-card-clients-dataset\"\n","f25a120f":"data_df = pd.read_csv(PATH+\"\/UCI_Credit_Card.csv\")","c0d4f9a8":"print(\"Default Credit Card Clients data -  rows:\",data_df.shape[0],\" columns:\", data_df.shape[1])","032e9f60":"data_df.head()","7caa2aa9":"data_df.describe()","8cf03885":"total = data_df.isnull().sum().sort_values(ascending = False)\npercent = (data_df.isnull().sum()\/data_df.isnull().count()*100).sort_values(ascending = False)\npd.concat([total, percent], axis=1, keys=['Total', 'Percent']).transpose()","77d7f644":"temp = data_df[\"default.payment.next.month\"].value_counts()\ndf = pd.DataFrame({'default.payment.next.month': temp.index,'values': temp.values})\nplt.figure(figsize = (6,6))\nplt.title('Default Credit Card Clients - target value - data unbalance\\n (Default = 0, Not Default = 1)')\nsns.set_color_codes(\"pastel\")\nsns.barplot(x = 'default.payment.next.month', y=\"values\", data=df)\nlocs, labels = plt.xticks()\nplt.show()","7571e30d":"plt.figure(figsize = (14,6))\nplt.title('Amount of credit limit - Density Plot')\nsns.set_color_codes(\"pastel\")\nsns.distplot(data_df['LIMIT_BAL'],kde=True,bins=200, color=\"blue\")\nplt.show()","d84a0a10":"data_df['LIMIT_BAL'].value_counts().shape","ae8bbc1b":"data_df['LIMIT_BAL'].value_counts().head(5)","e70c0962":"class_0 = data_df.loc[data_df['default.payment.next.month'] == 0][\"LIMIT_BAL\"]\nclass_1 = data_df.loc[data_df['default.payment.next.month'] == 1][\"LIMIT_BAL\"]\nplt.figure(figsize = (14,6))\nplt.title('Default amount of credit limit  - grouped by Payment Next Month (Density Plot)')\nsns.set_color_codes(\"pastel\")\nsns.distplot(class_1,kde=True,bins=200, color=\"red\")\nsns.distplot(class_0,kde=True,bins=200, color=\"green\")\nplt.show()","1b0aab25":"fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(12,6))\ns = sns.boxplot(ax = ax1, x=\"SEX\", y=\"LIMIT_BAL\", hue=\"SEX\",data=data_df, palette=\"PRGn\",showfliers=True)\ns = sns.boxplot(ax = ax2, x=\"SEX\", y=\"LIMIT_BAL\", hue=\"SEX\",data=data_df, palette=\"PRGn\",showfliers=False)\nplt.show();","519997d4":"var = ['BILL_AMT1','BILL_AMT2','BILL_AMT3','BILL_AMT4','BILL_AMT5','BILL_AMT6']\n\nplt.figure(figsize = (8,8))\nplt.title('Amount of bill statement (Apr-Sept) \\ncorrelation plot (Pearson)')\ncorr = data_df[var].corr()\nsns.heatmap(corr,xticklabels=corr.columns,yticklabels=corr.columns,linewidths=.1,vmin=-1, vmax=1)\nplt.show()","b1771c39":"var = ['PAY_AMT1', 'PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5']\n\nplt.figure(figsize = (8,8))\nplt.title('Amount of previous payment (Apr-Sept) \\ncorrelation plot (Pearson)')\ncorr = data_df[var].corr()\nsns.heatmap(corr,xticklabels=corr.columns,yticklabels=corr.columns,linewidths=.1,vmin=-1, vmax=1)\nplt.show()","23d1c3ca":"var = ['PAY_0','PAY_2', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6']\n\nplt.figure(figsize = (8,8))\nplt.title('Repayment status (Apr-Sept) \\ncorrelation plot (Pearson)')\ncorr = data_df[var].corr()\nsns.heatmap(corr,xticklabels=corr.columns,yticklabels=corr.columns,linewidths=.1,vmin=-1, vmax=1)\nplt.show()","1d3df8b0":"def boxplot_variation(feature1, feature2, feature3, width=16):\n    fig, ax1 = plt.subplots(ncols=1, figsize=(width,6))\n    s = sns.boxplot(ax = ax1, x=feature1, y=feature2, hue=feature3,\n                data=data_df, palette=\"PRGn\",showfliers=False)\n    s.set_xticklabels(s.get_xticklabels(),rotation=90)\n    plt.show();","8a66f0cc":"boxplot_variation('MARRIAGE','AGE', 'SEX',8)","03db7e95":"boxplot_variation('EDUCATION','AGE', 'MARRIAGE',12)","e22204fc":"boxplot_variation('AGE','LIMIT_BAL', 'SEX',16)","5b25fbe3":"boxplot_variation('MARRIAGE','LIMIT_BAL', 'EDUCATION',12)","627752f2":"target = 'default.payment.next.month'\npredictors = [  'LIMIT_BAL', 'SEX', 'EDUCATION', 'MARRIAGE', 'AGE', \n                'PAY_0', 'PAY_2', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6', \n                'BILL_AMT1','BILL_AMT2', 'BILL_AMT3', 'BILL_AMT4', 'BILL_AMT5', 'BILL_AMT6',\n                'PAY_AMT1', 'PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5', 'PAY_AMT6']","c3b9eee1":"train_df, val_df = train_test_split(data_df, test_size=VALID_SIZE, random_state=RANDOM_STATE, shuffle=True )","8064ec64":"train_df_bkp = train_df.copy()\nval_df_bkp = val_df.copy()","647e2146":"clf = RandomForestClassifier(n_jobs=NO_JOBS, \n                             random_state=RANDOM_STATE,\n                             criterion=RFC_METRIC,\n                             n_estimators=NUM_ESTIMATORS,\n                             verbose=False)","c3c6cbf5":"clf.fit(train_df[predictors], train_df[target].values)","3c56daed":"preds = clf.predict(val_df[predictors])","f80f7f6f":"tmp = pd.DataFrame({'Feature': predictors, 'Feature importance': clf.feature_importances_})\ntmp = tmp.sort_values(by='Feature importance',ascending=False)\nplt.figure(figsize = (7,4))\nplt.title('Features importance',fontsize=14)\ns = sns.barplot(x='Feature',y='Feature importance',data=tmp)\ns.set_xticklabels(s.get_xticklabels(),rotation=90)\nplt.show()   \n","2ea599ed":"cm = pd.crosstab(val_df[target].values, preds, rownames=['Actual'], colnames=['Predicted'])\nfig, (ax1) = plt.subplots(ncols=1, figsize=(5,5))\nsns.heatmap(cm, \n            xticklabels=['Not Default', 'Default'],\n            yticklabels=['Not Default', 'Default'],\n            annot=True,ax=ax1,\n            linewidths=.2,linecolor=\"Darkblue\", cmap=\"Blues\")\nplt.title('Confusion Matrix', fontsize=14)\nplt.show()","5bc0ec8d":"roc_auc_score(val_df[target].values, preds)","28e7a3e4":"cat_features = ['EDUCATION', 'SEX', 'MARRIAGE', 'PAY_0', 'PAY_2', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6']","d3854073":"train_f_df = pd.get_dummies(train_df_bkp, columns = cat_features)\nval_f_df = pd.get_dummies(val_df_bkp, columns = cat_features)","b94f6aa2":"print(\"Default of Credit Card Clients train data -  rows:\",train_f_df.shape[0],\" columns:\", train_f_df.shape[1])\nprint(\"Default of Credit Card Clients val  data -  rows:\",val_f_df.shape[0],\" columns:\", val_f_df.shape[1])","75d14369":"train_fa_df, val_fa_df = train_f_df.align(val_f_df, join='outer', axis=1, fill_value=0)","1c9f4ee6":"print(\"Default of Credit Card Clients train data -  rows:\",train_fa_df.shape[0],\" columns:\", train_fa_df.shape[1])\nprint(\"Default of Credit Card Clients val  data -  rows:\",val_fa_df.shape[0],\" columns:\", val_fa_df.shape[1])","ba20893e":"train_fa_df.head(5)","d2a04bda":"val_fa_df.head(5)","3735628d":"target_f = 'default.payment.next.month'\npredictors_f = ['AGE', 'BILL_AMT1', 'BILL_AMT2', 'BILL_AMT3', 'BILL_AMT4',\n       'BILL_AMT5', 'BILL_AMT6', 'EDUCATION_0', 'EDUCATION_1',\n       'EDUCATION_2', 'EDUCATION_3', 'EDUCATION_4', 'EDUCATION_5',\n       'EDUCATION_6', 'LIMIT_BAL', 'MARRIAGE_0', 'MARRIAGE_1',\n       'MARRIAGE_2', 'MARRIAGE_3', 'PAY_0_-1', 'PAY_0_-2', 'PAY_0_0',\n       'PAY_0_1', 'PAY_0_2', 'PAY_0_3', 'PAY_0_4', 'PAY_0_5', 'PAY_0_6',\n       'PAY_0_7', 'PAY_0_8', 'PAY_2_-1', 'PAY_2_-2', 'PAY_2_0', 'PAY_2_1',\n       'PAY_2_2', 'PAY_2_3', 'PAY_2_4', 'PAY_2_5', 'PAY_2_6', 'PAY_2_7',\n       'PAY_2_8', 'PAY_3_-1', 'PAY_3_-2', 'PAY_3_0', 'PAY_3_1', 'PAY_3_2',\n       'PAY_3_3', 'PAY_3_4', 'PAY_3_5', 'PAY_3_6', 'PAY_3_7', 'PAY_3_8',\n       'PAY_4_-1', 'PAY_4_-2', 'PAY_4_0', 'PAY_4_1', 'PAY_4_2', 'PAY_4_3',\n       'PAY_4_4', 'PAY_4_5', 'PAY_4_6', 'PAY_4_7', 'PAY_4_8', 'PAY_5_-1',\n       'PAY_5_-2', 'PAY_5_0', 'PAY_5_2', 'PAY_5_3', 'PAY_5_4', 'PAY_5_5',\n       'PAY_5_6', 'PAY_5_7', 'PAY_5_8', 'PAY_6_-1', 'PAY_6_-2', 'PAY_6_0',\n       'PAY_6_2', 'PAY_6_3', 'PAY_6_4', 'PAY_6_5', 'PAY_6_6', 'PAY_6_7',\n       'PAY_6_8', 'PAY_AMT1', 'PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4',\n       'PAY_AMT5', 'PAY_AMT6', 'SEX_1', 'SEX_2']","f15f945a":"clf.fit(train_fa_df[predictors_f], train_df[target_f].values)","f186bd3b":"preds = clf.predict(val_fa_df[predictors_f])","727a5775":"tmp = pd.DataFrame({'Feature': predictors_f, 'Feature importance': clf.feature_importances_})\ntmp = tmp.sort_values(by='Feature importance',ascending=False)\nplt.figure(figsize = (16,4))\nplt.title('Features importance',fontsize=14)\ns = sns.barplot(x='Feature',y='Feature importance',data=tmp)\ns.set_xticklabels(s.get_xticklabels(),rotation=90)\nplt.show()","a9b4184b":"cm = pd.crosstab(val_fa_df[target].values, preds, rownames=['Actual'], colnames=['Predicted'])\nfig, (ax1) = plt.subplots(ncols=1, figsize=(5,5))\nsns.heatmap(cm, \n            xticklabels=['Not Default', 'Default'],\n            yticklabels=['Not Default', 'Default'],\n            annot=True,ax=ax1,\n            linewidths=.2,linecolor=\"Darkblue\", cmap=\"Blues\")\nplt.title('Confusion Matrix', fontsize=14)\nplt.show()","9b22e975":"roc_auc_score(val_fa_df[target].values, preds)","255478b2":"clf = AdaBoostClassifier(random_state=RANDOM_STATE,\n                         algorithm='SAMME.R',\n                         learning_rate=0.8,\n                             n_estimators=NUM_ESTIMATORS)","38188f31":"clf.fit(train_df[predictors], train_df[target].values)","717f3dca":"preds = clf.predict(val_df[predictors])","39813746":"tmp = pd.DataFrame({'Feature': predictors, 'Feature importance': clf.feature_importances_})\ntmp = tmp.sort_values(by='Feature importance',ascending=False)\nplt.figure(figsize = (7,4))\nplt.title('Features importance',fontsize=14)\ns = sns.barplot(x='Feature',y='Feature importance',data=tmp)\ns.set_xticklabels(s.get_xticklabels(),rotation=90)\nplt.show()   ","ba77840d":"cm = pd.crosstab(val_df[target].values, preds, rownames=['Actual'], colnames=['Predicted'])\nfig, (ax1) = plt.subplots(ncols=1, figsize=(5,5))\nsns.heatmap(cm, \n            xticklabels=['Not Default', 'Default'],\n            yticklabels=['Not Default', 'Default'],\n            annot=True,ax=ax1,\n            linewidths=.2,linecolor=\"Darkblue\", cmap=\"Blues\")\nplt.title('Confusion Matrix', fontsize=14)\nplt.show()","ea7d769e":"roc_auc_score(val_df[target].values, preds)","fbe4ab1b":"clf = CatBoostClassifier(iterations=500,\n                             learning_rate=0.02,\n                             depth=12,\n                             eval_metric='AUC',\n                             random_seed = RANDOM_STATE,\n                             bagging_temperature = 0.2,\n                             od_type='Iter',\n                             metric_period = VERBOSE_EVAL,\n                             od_wait=100)","2b858ca3":"clf.fit(train_df[predictors], train_df[target].values,verbose=True)","72104946":"preds = clf.predict(val_df[predictors])","d62370be":"tmp = pd.DataFrame({'Feature': predictors, 'Feature importance': clf.feature_importances_})\ntmp = tmp.sort_values(by='Feature importance',ascending=False)\nplt.figure(figsize = (7,4))\nplt.title('Features importance',fontsize=14)\ns = sns.barplot(x='Feature',y='Feature importance',data=tmp)\ns.set_xticklabels(s.get_xticklabels(),rotation=90)\nplt.show()   ","99433cce":"cm = pd.crosstab(val_df[target].values, preds, rownames=['Actual'], colnames=['Predicted'])\nfig, (ax1) = plt.subplots(ncols=1, figsize=(5,5))\nsns.heatmap(cm, \n            xticklabels=['Not Fraud', 'Fraud'],\n            yticklabels=['Not Fraud', 'Fraud'],\n            annot=True,ax=ax1,\n            linewidths=.2,linecolor=\"Darkblue\", cmap=\"Blues\")\nplt.title('Confusion Matrix', fontsize=14)\nplt.show()","851842c5":"roc_auc_score(val_df[target].values, preds)","48d4af42":"# Prepare the train and valid datasets\ndtrain = xgb.DMatrix(train_df[predictors], train_df[target].values)\ndvalid = xgb.DMatrix(val_df[predictors], val_df[target].values)\n\n#What to monitor (in this case, **train** and **valid**)\nwatchlist = [(dtrain, 'train'), (dvalid, 'valid')]\n\n# Set xgboost parameters\nparams = {}\nparams['objective'] = 'binary:logistic'\nparams['eta'] = 0.039\nparams['silent'] = True\nparams['max_depth'] = 2\nparams['subsample'] = 0.8\nparams['colsample_bytree'] = 0.9\nparams['eval_metric'] = 'auc'\nparams['random_state'] = RANDOM_STATE","b7db7877":"model = xgb.train(params, \n                dtrain, \n                MAX_ROUNDS, \n                watchlist, \n                early_stopping_rounds=EARLY_STOP, \n                maximize=True, \n                verbose_eval=VERBOSE_EVAL)","d6f4bbae":"fig, (ax) = plt.subplots(ncols=1, figsize=(8,5))\nxgb.plot_importance(model, height=0.8, title=\"Features importance (XGBoost)\", ax=ax, color=\"green\") \nplt.show()","6e82b8ab":"params = {\n          'boosting_type': 'gbdt',\n          'objective': 'binary',\n          'metric':'auc',\n          'learning_rate': 0.05,\n          'num_leaves': 7,  # we should let it be smaller than 2^(max_depth)\n          'max_depth': 4,  # -1 means no limit\n          'min_child_samples': 100,  # Minimum number of data need in a child(min_data_in_leaf)\n          'max_bin': 100,  # Number of bucketed bin for feature values\n          'subsample': 0.9,  # Subsample ratio of the training instance.\n          'subsample_freq': 1,  # frequence of subsample, <=0 means no enable\n          'colsample_bytree': 0.7,  # Subsample ratio of columns when constructing each tree.\n          'min_child_weight': 0,  # Minimum sum of instance weight(hessian) needed in a child(leaf)\n          'min_split_gain': 0,  # lambda_l1, lambda_l2 and min_gain_to_split to regularization\n          'nthread': 8,\n          'verbose': 0,\n          'scale_pos_weight':50, # because training data is sightly unbalanced \n         }","b4451fb1":"categorical_features = ['SEX', 'EDUCATION', 'MARRIAGE','PAY_0', 'PAY_2', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6']","6c48f484":"dtrain = lgb.Dataset(train_df[predictors].values, \n                     label=train_df[target].values,\n                     feature_name=predictors,\n                     categorical_feature=categorical_features)\n\ndvalid = lgb.Dataset(val_df[predictors].values,\n                     label=val_df[target].values,\n                     feature_name=predictors,\n                     categorical_feature=categorical_features)","14516e50":"evals_results = {}\n\nmodel = lgb.train(params, \n                  dtrain, \n                  valid_sets=[dtrain, dvalid], \n                  valid_names=['train','valid'], \n                  evals_result=evals_results, \n                  num_boost_round=MAX_ROUNDS,\n                  early_stopping_rounds=EARLY_STOP,\n                  verbose_eval=VERBOSE_EVAL, \n                  feval=None)\n\ndel dvalid\ngc.collect()","6a4d0783":"fig, (ax) = plt.subplots(ncols=1, figsize=(8,5))\nlgb.plot_importance(model, height=0.8, title=\"Features importance (LightGBM)\", ax=ax,color=\"red\") \nplt.show()","df92aab6":"kf = KFold(n_splits = NUMBER_KFOLDS, random_state = RANDOM_STATE, shuffle = True)\nfor train_index, test_index in kf.split(data_df):\n    train_X, valid_X = data_df.iloc[train_index], data_df.iloc[test_index]\n\n    dtrain = lgb.Dataset(train_X[predictors].values, label=train_X[target].values,\n                     feature_name=predictors)\n\n    dvalid = lgb.Dataset(valid_X[predictors].values, label=valid_X[target].values,\n                     feature_name=predictors)\n\n    evals_results = {}\n    model =  lgb.train(params, \n                  dtrain, \n                  valid_sets=[dtrain, dvalid], \n                  valid_names=['train','valid'], \n                  evals_result=evals_results, \n                  num_boost_round=MAX_ROUNDS,\n                  early_stopping_rounds=EARLY_STOP,\n                  verbose_eval=VERBOSE_EVAL, \n                  feval=None)","66cee185":"## <a id=\"62\">AdaBoostClassifier<\/a>\n\n\nAdaBoostClassifier stands for Adaptive Boosting Classifier <a href='#8'>[5]<\/a>.\n\n### Prepare the model\n\nLet's set the parameters for the model and initialize the model.","0da05d32":"Most of defaults are for credit limits 0-100,000 (and density for this interval is larger for defaults than for non-defaults). Larger defaults number are for the amounts of **50,000**, **20,000** and **30,000**.","e23e891b":"Let's calculate also the ROC-AUC.\n\n\n### Area under curve","71b88bca":"Correlation is decreasing with distance between months. Lowest correlations are between Sept-April.\n","2290e12c":"## Amount of credit limit grouped by default payment next month\n\nLet's visualize the density plot for amount of credit limit (LIMIT_BAL), grouped by default payment next month.","c3d036c8":"The limit credit amount is quite balanced between sexes. The males have a slightly smaller Q2 and larger Q3 and Q4 and a lower mean. The female have a larger outlier max value (1M NT dollars).","c77f56dc":"Let's now predict the **target** values for the **val_df** data, using **predict** function.","d1d1a970":"# <a id=\"3\">Read the data<\/a>","4f58cd06":"Indeed, the largest number of credit cards are with limit of 50,000 (3365), followed by 20,000 (1976) and 30,000 (1610).","7407c158":"## Age, sex and credit amount limit\n\n\nLet's show the  boxplots with credit amount limit distribution grouped by age and sex.\n\n","4e1fb218":"Let's run a model using the training set for training. Then, we will use the validation set for validation. \n\nWe will use as validation criterion **GINI**, which formula is **GINI = 2 * (AUC) - 1**, where **AUC** is the **Receiver Operating Characteristic - Area Under Curve (ROC-AUC)** <a href='#8'>[4]<\/a>.  Number of estimators is set to **100** and number of parallel jobs is set to **4**.\n\nWe start by initializing the RandomForestClassifier.","702d1eb8":"Because train and validation data does not have the same number of columns, we will align them.","efac4d51":"Let's prepare the model, creating the **Dataset**s data structures from the train and validation sets.\n\nWe will also initialize the Datasets with the list of the categorical features (**lgb** has a special treatment for categorical values).","17881eec":"## Marriage status, education level and credit amount limit\n\n\nLet's show the  boxplots with credit amount limit distribution grouped by marriage status and education level.","183f440e":"With the dummified features, the improvement of the AUC score is quite small.","48507310":"Let's train the **RandonForestClassifier** using the **train_fa_df** data and **fit** function.","3b4d39d5":"It looks like Married status 3 (others), with mean values over 40 and Q4 values over 60 means mostly vidowed or divorced whilst Married status 0 could be not specified or divorced, as Q1 values are above values for married of both sexes.\n\nMarried males have mean age above married women. Unmarried males have mean value for age above unmarried women as well but closer. Q3 abd Q4 values for married man are above corresponding values for married women.\n\n\nLet's show the boxplots with age distribution grouped by education and marriage.\n\nEducation status meaning is:\n\n* 1 : graduate school\n* 2 : university\n* 3 : high school\n* 4 : others\n* 5 : unknown\n* 6 : unknow\n","9613cc20":"# <a id=\"8\">References<\/a>\n\n[1] Default Credit Card Clients Dataset,  https:\/\/www.kaggle.com\/uciml\/default-of-credit-card-clients-dataset\/  \n[2] Principal Component Analysis, Wikipedia Page, https:\/\/en.wikipedia.org\/wiki\/Principal_component_analysis  \n[3] RandomForrestClassifier, http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.RandomForestClassifier.html  \n[4] ROC-AUC characteristic, https:\/\/en.wikipedia.org\/wiki\/Receiver_operating_characteristic#Area_under_the_curve   \n[5] AdaBoostClassifier, http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.AdaBoostClassifier.html   \n[6] CatBoostClassifier, https:\/\/tech.yandex.com\/catboost\/doc\/dg\/concepts\/python-reference_catboostclassifier-docpage\/  \n[7] XGBoost Python API Reference, http:\/\/xgboost.readthedocs.io\/en\/latest\/python\/python_api.html  \n[8] LightGBM Python implementation, https:\/\/github.com\/Microsoft\/LightGBM\/tree\/master\/python-package  \n[9] LightGBM algorithm, https:\/\/www.microsoft.com\/en-us\/research\/wp-content\/uploads\/2017\/11\/lightgbm.pdf   \n\n","de20fae4":"## <a id=\"42\">Check missing data<\/a>  \n\nLet's check if there is any missing data.","f8fe17ce":"There is no missing data in the entire dataset.","c8ee11e4":"### Predict the target values\n\nLet's now predict the **target** values for the **val_df** data, using predict function.","56ab3a5e":"### Features importance\n\nLet's see also the features importance.","f29c9d63":"Let's start with a RandomForrestClassifier <a href='#8'>[3]<\/a>   model.","96f6d76e":"Let's check data unbalance with respect with *target* value, i.e. **default.payment.next.month**.","56813908":"We investigated the data, checking for data unbalancing, visualizing the features and understanding the relationship between different features. \nWe then investigated four predictive models.\nWe started with RandomForrestClassifier, for which we obtained an AUC scode of **0.66**. For the RandomForrestClassifier we also experimented with OneHotEncoder, replacing the categorical features with dummified values (introducing one dummy variable for each category). We followed with an AdaBoostClassifier model, with lower AUC score (**0.65**). We followed with an CatBoostClassifier model, with lower AUC score (**0.66**). We the followed with a XGBoost model, for which the AUC score obtained was **0.77**. We then presented the data to a LightGBM model. We used both train-validation split and cross-validation to evaluate the model effectiveness to predict the target value, i.e. detecting if a credit card client  will default next month. With both methods for LightGBM the obtained values of AUC for the validation set were around **0.78**.","62f72cdc":"Largest group of amount of credit limit is apparently for amount of 50K. Let's verify this.","5b10a14c":"### Prepare the model\n\nWe initialize the DMatrix objects for training and validation, starting from the datasets. We also set some of the parameters used for the model tuning.","3f605b5b":"We also calculate area under curve (receiver operator characteristic)","ec2e0cdf":"# <a id=\"5\">Data exploration<\/a>","f7a5f6df":"We also make copies of the train_df and val_df for later usage.","143df1f0":"Best validation score  was obtained for round **265**, for which **AUC ~= 0.78**.\n\nLet's plot variable importance.","2b916514":"## Sex, Education, Age and Marriage\n\n\nLet's show sex, education, age and marriage distributions.\n\nWe start by showing the boxplots with age distribution grouped by marriage status and sex.\n\nMarriage status meaning is:\n\n* 0 : unknown (let's consider as others as well)\n* 1 : married\n* 2 : single\n* 3 : others\n\nSex meaning is:\n\n* 1 : male\n* 2 : female\n","65971f87":"### Prepare the model\n","457f2ea1":"## Amount of credit limit ","9cba64d3":"XGBoost is a gradient boosting algorithm <a href='#8'>[7]<\/a>.\n\nLet's prepare the model.","4c01ea75":"Let's define the categorical features.","e55edcbd":"Let's also visualize the features importance. \n\n#### Features importance","52b63b3c":"## <a id=\"65\">LightGBM<\/a>\n\n\nLet's continue with another gradient boosting algorithm, LightGBM <a href='#8'>[7]<\/a> <a href='#8'>[8]<\/a>.\n\n\n### Define model parameters\n\nLet's set the parameters for the model.","77634955":"## <a id=\"41\">Glimpse the data<\/a>\n\nWe start by looking to the data features (first 5 rows).","75aa7ba9":"There are 30,000 distinct credit card clients.  \n\nThe average value for the amount of credit card limit is 167,484. The standard deviation is unusually large, max value being 1M.\n\nEducation level is mostly graduate school and university.\n\nMost of the clients are either marrined or single (less frequent the other status).\n\nAverage age is 35.5 years, with a standard deviation of 9.2.\n\nAs the value 0 for default payment means 'not default' and value 1 means 'default', the mean of 0.221 means that there are 22.1% of credit card contracts that will default next month (will verify this in the next sections of this analysis).\n","4a1ff448":"### Plot variable importance","2a3bdbbb":"### Define predictors and target values\n\nLet's define the predictor features and the target features. Categorical features, if any, are also defined. In our case, there are no categorical feature.","20070ade":"### Train the model\n\nLet's train the model. ","319ed7d7":"Let's train the **RandonForestClassifier** using the **train_df** data and **fit** function.","90b30452":"# <a id=\"6\">Predictive models<\/a>  \n\n","7dce9c9a":"Let's look into more details to the data.","fa5c104e":"### Split data in train and validation set\n\nLet's define train and validation sets.","08ddd143":"Let's define the target and predictors lists.","8d5339cc":"The ROC-AUC score obtained with CatBoostClassifier is 0.66.","eec64f9d":"### Run the model\n\nLet's run the model, using the **train** function.","388589e6":"The ROC-AUC score obtained with AdaBoostClassifier is 0.65.","4dd8719f":"#### Confusion matrix\n\nLet's show a confusion matrix for the results we obtained. ","d2250bad":"There are no correlations between amounts of previous payments for April-Sept 2005.\n\nLet's check the correlation between Repayment status in April - September 2005.","01100ed4":"There are 81 distinct values for amount of credit limit.","3c9dfc30":"# <a id=\"7\">Conclusions<\/a>","ded3e17e":"A number of **6,636** out of **30,000** (or **22%**) of clients will default next month. The data has not a large unbalance with respect of the target value (default.payment.next.month).","24de3092":"The average validation **AUC** for the 5 folds obtained was **0.78**, with values between **0.778** and **0.79**.","746e5967":"Correlation is decreasing with distance between months. Lowest correlations are between Sept-April.\n\n\nLet's check the correlation of Amount of previous payment in April - September 2005.","ceb9c36b":"Let's also visualize the features importance.\n\n### Features importance","dc85728e":"### Features importance\n\nLet's see also the features importance.","2636eb1e":"We also calculate area under curve (receiver operator characteristic).","495f785b":"## Features correlation\n\n\nFor the numeric values, let's represent the features correlation.\n\n\nLet's check the correlation of Amount of bill statement in April - September 2005.","a5b36fa8":"Let's now predict the **target** values for the **val_df** data, using **predict** function.","27a5e079":"## Credit limit vs. sex\n\nLet's check the credit limit distribution vs. sex. For the sex, 1 stands for male and 2 for female.","d4fa1122":"The best validation score (ROC-AUC) was **0.78**, for round **453**.","fcc5ec15":"The **ROC-AUC** score obtained with **RandomForrestClassifier** is **0.66**.\n\n\nLet's use for RandomForrestClassifier **dummified variables** for the **categorical features**.\n\n\nWe start by defining the categorical features.\n\n\n### RandomForrest with OneHotEncoder","0897544f":"## <a id=\"63\">CatBoostClassifier<\/a>\n\n\nCatBoostClassifier is a gradient boosting for decision trees algorithm with support for handling categorical data <a href='#8'>[6]<\/a>.\n\n### Prepare the model\n\nLet's set the parameters for the model and initialize the model.","b72f40b1":"### Confusion matrix\n\nLet's visualize the confusion matrix.","b8e45da5":"# <a id=\"1\">Introduction<\/a>  \n\n\n## Dataset\n\nThis dataset contains information on default payments, demographic factors, credit data, history of payment, and bill statements of credit card clients in Taiwan from **April 2005** to **September 2005**. \n\n## Content\n\nThere are 25 variables:\n\n* **ID**: ID of each client\n* **LIMIT_BAL**: Amount of given credit in NT dollars (includes individual and family\/supplementary credit\n* **SEX**: Gender (1=male, 2=female)\n* **EDUCATION**: (1=graduate school, 2=university, 3=high school, 4=others, 5=unknown, 6=unknown)\n* **MARRIAGE**: Marital status (1=married, 2=single, 3=others)\n* **AGE**: Age in years\n* **PAY_0**: Repayment status in September, 2005 (-1=pay duly, 1=payment delay for one month, 2=payment delay for two months, ... 8=payment delay for eight months, 9=payment delay for nine months and above)\n* **PAY_2**: Repayment status in August, 2005 (scale same as above)\n* **PAY_3**: Repayment status in July, 2005 (scale same as above)\n* **PAY_4**: Repayment status in June, 2005 (scale same as above)\n* **PAY_5**: Repayment status in May, 2005 (scale same as above)\n* **PAY_6**: Repayment status in April, 2005 (scale same as above)\n* **BILL_AMT1**: Amount of bill statement in September, 2005 (NT dollar)\n* **BILL_AMT2**: Amount of bill statement in August, 2005 (NT dollar)\n* **BILL_AMT3**: Amount of bill statement in July, 2005 (NT dollar)\n* **BILL_AMT4**: Amount of bill statement in June, 2005 (NT dollar)\n* **BILL_AMT5**: Amount of bill statement in May, 2005 (NT dollar)\n* **BILL_AMT6**: Amount of bill statement in April, 2005 (NT dollar)\n* **PAY_AMT1**: Amount of previous payment in September, 2005 (NT dollar)\n* **PAY_AMT2**: Amount of previous payment in August, 2005 (NT dollar)\n* **PAY_AMT3**: Amount of previous payment in July, 2005 (NT dollar)\n* **PAY_AMT4**: Amount of previous payment in June, 2005 (NT dollar)\n* **PAY_AMT5**: Amount of previous payment in May, 2005 (NT dollar)\n* **PAY_AMT6**: Amount of previous payment in April, 2005 (NT dollar)\n* **default.payment.next.month**: Default payment (1=yes, 0=no)\n\n","0d5e1e78":"Let's calculate also the ROC-AUC.\n\n\n### Area under curve","9b3108cc":"### Predict the target values\n\nLet's now predict the **target** values for the **val_df** data, using predict function.","1ee220ec":"### Training and validation using cross-validation\n\nLet's use now cross-validation. We will use cross-validation (KFolds) with 5 folds. Data is divided in 5 folds and, by rotation, we are training using 4 folds (n-1) and validate using the 5th (nth) fold.","167232e3":"## <a id=\"43\">Data unbalance<\/a>","54ad349e":"<h1><center><font size=\"6\">Default of Credit Card Clients - Predictive Models<\/font><\/center><\/h1>\n\n\n<img src=\"https:\/\/kaggle2.blob.core.windows.net\/datasets-images\/306\/666\/d68d599bfe6995fa5772df1e82c4e83c\/dataset-card.jpg\" width=\"400\"><\/img>\n\n\n# <a id='0'>Content<\/a>\n\n- <a href='#1'>Introduction<\/a>  \n- <a href='#2'>Load packages<\/a>  \n- <a href='#3'>Read the data<\/a>  \n- <a href='#4'>Check the data<\/a>  \n    - <a href='#41'>Glimpse the data<\/a>  \n    - <a href='#42'>Check missing data<\/a>\n    - <a href='#43'>Check data unbalance<\/a>\n- <a href='#5'>Data exploration<\/a>\n- <a href='#6'>Predictive models<\/a>  \n    - <a href='#61'>RandomForrestClassifier<\/a> \n    - <a href='#62'>AdaBoostClassifier<\/a>\n    - <a href='#63'>CatBoostClassifier<\/a> \n    - <a href='#64'>XGBoost<\/a> \n    - <a href='#65'>LightGBM<\/a> \n- <a href='#7'>Conclusions<\/a>\n- <a href='#8'>References<\/a>\n","6105c80c":"# <a id=\"4\">Check the data<\/a>","9648bd60":"## <a id=\"61\">RandomForestClassifier<\/a>\n\n\n### Define model parameters\n\nLet's set the parameters for the model.","cd3bd350":"## <a id=\"64\">XGBoost<\/a>","ed688304":"### Fit the model\n\nLet's fit the model.","b7184140":"# <a id=\"2\">Load packages<\/a>","bc37c5bb":"Mean, Q3 and Q4 values are increasing for both male and female with age until aroung 35 years and then they are oscilating and get to a maximum of Q4 for males at age 64.\n\nMean values are generally smaller for males than for females, with few exceptions, for example at age 39, 48, until approximately 60, where mean values for males are generally larger than for females.\n\n","50906310":"The most important features are **PAY_0**, **AGE**, **BILL_AMT1**, **LIMIT_BAL**, **BILL_AMT2**, **BILL_AMT3**.\n\n\n### Confusion matrix\n\nLet's show a confusion matrix for the results we obtained. ","0e4411bd":"The most important features are **AGE**, **LIMIT_BAL**, **BILL_AMT1**, **PAY_0_2**, **BILL_AMT2**, **BILL_AMT3**.","eb89fa2d":"### Confusion matrix\n\nLet's visualize the confusion matrix.","102bcec5":"Let's check again the data."}}