{"cell_type":{"5bfc3857":"code","9d676f7e":"code","a161b77d":"code","d147e6e9":"code","4fd63d1d":"code","186e6f3b":"code","7daa27ec":"code","d9f48ced":"code","dfbc155a":"code","328a496e":"code","d2de07bd":"code","c1208dd6":"code","60767f48":"code","c3a771f1":"code","602460da":"code","ef041747":"code","1b6b1991":"code","d4e008a1":"code","cac42262":"code","9a0156d5":"markdown","175b3cb8":"markdown","b43ab6da":"markdown","fb99145c":"markdown","b9b7d597":"markdown","9315a94e":"markdown","59e88cbc":"markdown","01be23a7":"markdown","250ee9e4":"markdown","ae3cc4a8":"markdown","e79f9406":"markdown","7e6edf37":"markdown","151f3771":"markdown","3ed4d1bc":"markdown","994cb75b":"markdown","24117428":"markdown","1a4d99a2":"markdown","55309b0b":"markdown","5088ec08":"markdown","9d2e48ee":"markdown","448fec35":"markdown","af11cc2b":"markdown","452780b1":"markdown","01dc97f5":"markdown","efb22b84":"markdown","5044e9b6":"markdown"},"source":{"5bfc3857":"# Import torch and other required modules\nimport torch","9d676f7e":"# Example 1 - working (change this)\nfirst_tensor = torch.tensor([[1, 2], [3, 4]])\nsecond_tensor = torch.tensor([[3.2, 5]])\n\nresult = torch.add(first_tensor, second_tensor)\nprint(result)\nprint(\"Data type of result\",result.dtype)\nprint(\"Data type of first_tensor\",first_tensor.dtype)\nprint(\"Data type of second_tensor\",second_tensor.dtype)","a161b77d":"# Example 2 - working\nfirst_tensor = torch.tensor([[1, 2], [3, 4.]])\nsecond_tensor = torch.tensor([[False, True]])\nresult = torch.add(first_tensor, second_tensor)\nprint(result)\nprint(\"Result after setting alpha to 2\")\nresult = torch.add(first_tensor, second_tensor, alpha = 2)\nprint(result)","d147e6e9":"# Example 3 - breaking (to illustrate when it breaks)\nfirst_tensor = torch.tensor([[1, 2], [3, 4]])\nsecond_tensor = torch.tensor([[3.2, 5, 3]])\n\nresult = torch.add(first_tensor, second_tensor)","4fd63d1d":"# Example 1 - working\ninput_prob = torch.tensor([[0.5, 0.5],[1,0], [0.3, 0.7]])\ntorch.bernoulli(input_prob)","186e6f3b":"# Example 2 - working\ninput_prob = torch.tensor([[0, 0.5, 1]])\ntorch.bernoulli(input_prob)","7daa27ec":"# Example 3 - breaking (to illustrate when it breaks)\ninput_prob = torch.tensor([[0, 0, 1]])\nprint(\"Data Type of input probabilities\", input_prob.dtype)\ntorch.bernoulli(input_prob)","d9f48ced":"# Example 1 - working\ntorch.randn((3,4))","dfbc155a":"# Example 2 - working\ntorch.randn((1), dtype = torch.float32 )\n","328a496e":"# Example 3 - breaking (to illustrate when it breaks)\ntorch.randn((1), dtype = torch.long )","d2de07bd":"# Example 1 - working\ntorch.dot(torch.tensor([2, 3, 4]), torch.tensor([2, 1, 5]))","c1208dd6":"# Example 2 - working\ntorch.dot(torch.tensor([0.0, 2, 3, 4]), torch.tensor([2.0, 5.5, 0, 1]))","60767f48":"# Example 3 - breaking (to illustrate when it breaks)\ntorch.dot(torch.tensor([2.0, 5.5, 0, 1]), torch.tensor([0, 2, 3, 4]))","c3a771f1":"# Example 1 - working\ninput_tensor = torch.tensor([[1, 2], [3, 4]])\ntorch.rot90(input_tensor, k = 1, dims= [0,1])","602460da":"# Example 2 - working\ninput_tensor = torch.tensor([[1, 2], [3, 4]])\ntorch.rot90(input_tensor, k = 1, dims= [1,0])","ef041747":"# Example 3 - breaking (to illustrate when it breaks)\ninput_tensor = torch.tensor([[1, 2], [3, 4]])\ntorch.rot90(input_tensor, k = 1, dims= [1])","1b6b1991":"!pip install jovian --upgrade --quiet","d4e008a1":"import jovian","cac42262":"jovian.commit()","9a0156d5":"The example below shows that randn is not yet implemented for data type long for CPU exdecution","175b3cb8":"The above example shows that data type of both input tensors should be samee","b43ab6da":"The example 2 below shows that shape of input probabilities and output tensor is always same","fb99145c":"The example 2 shows the usage of optional argument alpha.\nIf alpha is set then each element of the second tensor  is multiplied by the scalar alpha and added to each element of the first tensor.\nAlso even Boolean data type tensor can be added to int data type tensor","b9b7d597":"Input proabilities tensor given to bernoulii must be of type float. In teh below example, whiule the probailities are between 0 and 1 but are of data type int. This breaks the bernoulii function","9315a94e":"## Function 3 - torch.randn\n\nThis function returns a tensor filled with random numbers from a uniform distribution.\nThis function mandatorily requires one argument which is is size of expected output tensor\n\nThe example below shows working of randn","59e88cbc":"The example below shows how to set data type for randn and that scalar tensor can also be generated by this","01be23a7":"torch.bernoulli is a statistical function and is useful when objective is to draw numbers based on pre-determined (in this case bernoulli distribution) distribution.","250ee9e4":"The above tensor is rotated 90 degrees anticlockwise based on axis 1","ae3cc4a8":"## Function 4 - torch.dot\n\ntorch.add computes inner product of 2 1-D tensors","e79f9406":"## Function 2 -  torch.bernoulli\n\nDraws binary random numbers (0 or 1) from a Bernoulli distribution.\n\nHere input tensor to function bernoulli is probabilities and should be between 0 and 1","7e6edf37":"## Function 1 - torch.add\n\nThis functions adds 2 tensor. The 2 tensor can be of different shape but broadcastable.\nThe data type of resulting tensor is that of larger data type to avoid the loss of data.","151f3771":"# Basic Torch tensor functions\n\n\nAn short introduction about PyTorch and about the chosen functions. \n- torch.add\n- torch.bernoulli\n- torch.randn\n- torch.dot\n- torch.rot90","3ed4d1bc":"## Conclusion\n\nThis notebook summarizes some of the basic functionalities provided by torch tensors. To know more about these basic functionalities refer https:\/\/pytorch.org\/docs\/stable\/tensors.html","994cb75b":"torch.rot90 requires both dimesnions of tensor as input else it breaks","24117428":"The above example shows simple matrix multiplication of 1-D tensors","1a4d99a2":"This function can be used to initialize weights and bias of Neural networks layers","55309b0b":"This function to be used when funding inner product of 2 1-D tensors of same data type","5088ec08":"torch.add function is handly anytime 2 tensor are to be added or the tensor has to be inflated by a scalar value.","9d2e48ee":"The 3rd example shows when the function add can break.\nOne of the top reasons for this function to fail if if 2 tensors are not broadcastable as shown below","448fec35":"## What is a Tensor\n\nTensor is a datasturcuture that can store data in N dimensions. Tensors have uniform data type and are immutable","af11cc2b":"## Function 5 - torch.rot90\n\nFunction to rotate the given tensor by 90 degrees","452780b1":"The above tensor is rotated 90 degrees clockwise based on axis 0","01dc97f5":"## Reference Links\nProvide links to your references and other interesting articles about tensors\n* Official documentation for `torch.Tensor`: https:\/\/pytorch.org\/docs\/stable\/tensors.html","efb22b84":"The above 2 examples show output datatype is same as data type of input tensors","5044e9b6":"Closing comments about when to use this function"}}