{"cell_type":{"48f92b4c":"code","4b6d76e8":"code","8f56c5ec":"code","aef8d197":"code","68320b09":"code","28cb5c14":"code","0cb310ef":"code","db49fde8":"code","3c61b977":"code","d7d2e314":"code","9d6ccfc9":"code","8f4606b6":"code","de40a99b":"code","2c4ca668":"code","f6ceb058":"code","a1c904cb":"code","55776314":"code","94c13281":"code","553a9aad":"code","d6f6fa30":"code","701fb6d7":"code","8341e1c3":"code","82a7978f":"code","eae1a9c7":"code","d19fe614":"code","ac71d763":"code","429189c3":"code","a81937a4":"code","2d4e0c0f":"code","48729e99":"code","217c5696":"code","893a27ed":"code","d6c1cd18":"code","fac7fd3c":"code","b0fbd93f":"code","c8975115":"code","98b065d1":"code","0138f7f2":"code","d792bbd3":"code","79d8ef51":"code","463c279f":"code","1c262519":"code","94c48876":"code","de562491":"code","373c9695":"code","16eaa956":"markdown","604b4bd8":"markdown","d0a2a9b0":"markdown","4a114a33":"markdown","c95f6f47":"markdown","80f2308d":"markdown","8d4388fa":"markdown","1fb73077":"markdown","39fdeaf1":"markdown","01213256":"markdown","de89e4e5":"markdown","1cf86fbc":"markdown","e6d3dd09":"markdown","08bc7c28":"markdown","a5628062":"markdown","1075d7f9":"markdown","a4ae609e":"markdown"},"source":{"48f92b4c":"import os\nimport warnings\nfrom pathlib import Path\n\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns","4b6d76e8":"pd.options.display.max_columns = 100\nwarnings.filterwarnings('ignore')","8f56c5ec":"data_path = Path('\/kaggle\/input\/tabular-playground-series-may-2021\/')","aef8d197":"train_df = pd.read_csv(data_path\/'train.csv')\ntest_df = pd.read_csv(data_path\/'test.csv')\n\ntrain_df.shape, test_df.shape","68320b09":"# concat train and test data for EDA study\n\ndf = pd.concat([train_df.drop(['id', 'target'], axis=1), test_df.drop('id', axis=1)], axis=0)\nlen(df)","28cb5c14":"sample_submission_df = pd.read_csv(data_path\/'sample_submission.csv')\nsample_submission_df.head()","0cb310ef":"target = train_df.target\ntrain_df.drop(['id', 'target'], axis=1, inplace=True)","db49fde8":"test_ids = test_df.id\ntest_df.drop('id', axis=1, inplace=True)","3c61b977":"print(df.columns)\nprint(f'Total no. of features: {len(df.columns)}')","d7d2e314":"print(len(train_df))\ntrain_df.drop_duplicates(keep='first', inplace=True)\nlen(train_df)","9d6ccfc9":"target = target[train_df.index]\nlen(target)","8f4606b6":"df.isnull().sum().sum()","de40a99b":"df.head()","2c4ca668":"# plotting the histogram graph with y axis set to log scale, as most of values are zeros","f6ceb058":"figure, ax = plt.subplots(10, 5, figsize=(20, 30))\nax = [x for y in ax for x in y]\nfor axis, feature in zip(ax, df.columns):\n    axis.hist(df[feature], bins=20, range=(df[feature].min(), df[feature].max()))\n    axis.set_yscale('log')\n    axis.set_title(feature)\nfigure.tight_layout()\nplt.show()","a1c904cb":"def get_min_max(x):\n    return x.min(), x.max(), len(x.unique())","55776314":"min_max_df = train_df.apply(lambda x: get_min_max(x), axis=0)\nmin_max_df.index = ['min', 'max', 'num unique']\nmin_max_df = min_max_df.transpose()\nmin_max_df.sort_values('num unique').head(15)","94c13281":"cat_features = ['feature_13', 'feature_36', 'feature_22', 'feature_2']","553a9aad":"train_df = pd.get_dummies(train_df, columns=cat_features, drop_first=True)\ntest_df = pd.get_dummies(test_df, columns=cat_features, drop_first=True)\n\ntrain_df.shape, test_df.shape","d6f6fa30":"from sklearn.preprocessing import LabelEncoder\n\nlabel_encoder = LabelEncoder()\ntarget_labels = label_encoder.fit_transform(target)\ntarget_labels[:10]","701fb6d7":"from sklearn.linear_model import LassoCV\n\nlasso = LassoCV()\nlasso.fit(train_df, target_labels)","8341e1c3":"print(f'best alpha: {lasso.alpha_}')\nprint(f'best score: {lasso.score(train_df, target_labels)}')","82a7978f":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(train_df, target_labels, test_size=0.2, random_state=13, shuffle=True,\n                                                    stratify=target_labels)\n\nX_train.shape, X_test.shape","eae1a9c7":"from xgboost import XGBClassifier\n\nxgb_model = XGBClassifier(objective='multi:softprob', \n                          random_state=13,\n                          use_label_encoder=False, \n                          num_class=4,\n                          eta=0.2,\n                          max_depth = 3,\n                          n_estimators = 1500)\nxgb_model.fit(X_train, y_train,\n              verbose=False,\n              early_stopping_rounds=10,\n              eval_metric=['mlogloss'],\n              eval_set=[(X_train, y_train), (X_test, y_test)])","d19fe614":"xgb_model.best_score","ac71d763":"# test results\n\npredictions = xgb_model.predict_proba(test_df)\npredictions_df = pd.DataFrame(predictions, columns=['class_1', 'class_2', 'class_3', 'class_4'])","429189c3":"submission_df = pd.concat([test_ids, predictions_df], axis=1)\nsubmission_df.head()","a81937a4":"submission_df.to_csv('xgb_baseline.csv', index=False)","2d4e0c0f":"# utility function to create submission csv for further predictions\ndef create_submission_df(test_ids, predictions):\n    predictions_df = pd.DataFrame(predictions, columns=['class_1', 'class_2', 'class_3', 'class_4'])\n    submission_df = pd.concat([test_ids, predictions_df], axis=1)\n    return submission_df","48729e99":"param_grid = {\n    'min_child_weight': [1, 5, 10],\n    'gamma': [0.5, 1, 1.5, 2, 5],\n    'subsample': [0.6, 0.8, 1.0],\n    'colsample_bytree': [0.6, 0.8, 1.0],\n    'max_depth': [2, 3, 4, 5]\n}\n\nprint(f'Total number of combinations: {3 * 5 * 3 * 3 * 4}')","217c5696":"# lets run xgboost on gpu for faster computationb\n!nvidia-smi","893a27ed":"folds = 5\nparam_combination = 10","d6c1cd18":"from sklearn.model_selection import StratifiedKFold, RandomizedSearchCV\n\nskf = StratifiedKFold(n_splits=folds, shuffle=True, random_state=13)","fac7fd3c":"xgb2 = XGBClassifier(learning_rate=0.1, n_estimators=500, early_stopping_rounds=10,\n                     objective='multi:softprob', eval_metric='mlogloss', verbose=1,\n                     tree_method='gpu_hist')  # uses gpu !*important\nrandom_search = RandomizedSearchCV(xgb2, param_distributions=param_grid,\n                                   n_iter=param_combination, scoring='roc_auc_ovr',\n                                   n_jobs=-1, cv=skf.split(X_train, y_train),\n                                   verbose=1, random_state=13)","b0fbd93f":"%time\nrandom_search.fit(X_train, y_train)","c8975115":"random_search.best_score_, random_search.best_params_","98b065d1":"from sklearn.metrics import log_loss\n\ndef eval_X_test(X_test, y_test, model):\n    y_test_pred = model.predict_proba(X_test)\n    return round(log_loss(y_test, y_test_pred), 6)\n\neval_X_test(X_test, y_test, random_search)","0138f7f2":"test_pred = random_search.predict_proba(test_df)\nsubmission_df2 = create_submission_df(test_ids, test_pred)\nsubmission_df2.head()","d792bbd3":"submission_df2.to_csv('xgb_random_search-2.csv', index=False)","79d8ef51":"param_combination = 100\n\nrandom_search_100 = RandomizedSearchCV(xgb2, param_distributions=param_grid,\n                                   n_iter=param_combination, scoring='roc_auc_ovr',\n                                   n_jobs=-1, cv=skf.split(X_train, y_train),\n                                   verbose=10, random_state=13)","463c279f":"random_search_100.fit(X_train, y_train)","1c262519":"random_search_100.best_score_, random_search.best_params_","94c48876":"eval_X_test(X_test, y_test, random_search_100)","de562491":"subm_pred = random_search_100.predict_proba(test_df)\nsubmission_df = create_submission_df(test_ids, subm_pred)\nsubmission_df.head()","373c9695":"submission_df.to_csv('xgb_random_search-100.csv', index=False)","16eaa956":"### Randomized grid search with XGBoost","604b4bd8":"1. Not much difference between features with max value >= 10.\n2. Considering only 13, 36, 22 and 2 as categorical","d0a2a9b0":"## Feature engineering","4a114a33":"> *All features are numeric*<br>\n\nLet's find out more from Histogram plot","c95f6f47":"#### Let's increase the param combination and search for more points in grid space","80f2308d":"### Imputation","8d4388fa":"*4 rows are duplicates*","1fb73077":"### Feature selection using Lasso","39fdeaf1":"> https:\/\/www.kaggle.com\/c\/tabular-playground-series-may-2021\/data","01213256":"## Baseline model building - XGBoost","de89e4e5":"## Data loading","1cf86fbc":"### Histogram plots of all features","e6d3dd09":"> Should we consider all the features with max value < 10 as **Categorical**?","08bc7c28":"> *No missing values in the training & testing datasets*","a5628062":"### Duplicate rows removal","1075d7f9":"### Identifying Categorical vs Numeric","a4ae609e":"### Insights from histogram plots\n1. All the feature data is right skewed\n1. Maximum values in any feature column are zeros, >90% in all columns\n2. Feature 2, 13, 22, 36 - looks like categorical features\n4. Lot of features looks correlated with each other. For example: feature_0 ~= feature_6 & feature_11 ~= feature_12 etc.,"}}