{"cell_type":{"0f5d0fe4":"code","146c801c":"code","d935b7bc":"code","d4c288a0":"code","bbb6fe1f":"code","5a8a7c22":"code","3d7e3835":"code","d8db1b9d":"code","22890811":"code","f933fa4f":"code","e1c501f1":"code","994444de":"code","dbe439fc":"markdown","37f8fc34":"markdown","3c3997e1":"markdown","45ddf692":"markdown","8d9d8d41":"markdown","a34a2e73":"markdown","fd4b120d":"markdown"},"source":{"0f5d0fe4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv) \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","146c801c":"train_df = pd.read_csv(\"\/kaggle\/input\/game-of-thronesgot\/game of thrones.csv\")\ntrain_df.head(10)","d935b7bc":"print(len(train_df))\nsummary = pd.DataFrame(train_df.dtypes)\nsummary[\"null\"] = train_df.isnull().sum()\nsummary[\"unique\"] = train_df.nunique()\nsummary[\"first\"] = train_df.loc[0]\nsummary[\"second\"] = train_df.loc[1]\nsummary[\"third\"] = train_df.loc[2]\nsummary","d4c288a0":"train_df[\"Novel(s) adapted\"].unique()\ntrain_df[\"Directed by\"].unique()\ntrain_df[\"Written by\"].unique()\n# Novels adapted are not always the same as we can see there are quite some unique values.","bbb6fe1f":"def write_percent_of_plot(ax, season_ratings):\n    for patches in ax.patches:\n        width = patches.get_width()\n        height = patches.get_height()\n        get_x = patches.get_x()\n        value = height \n        ax.text(x = get_x + width\/2, y = height, s = '{:1.1f}'.format(value), fontsize=12 )\nfig,ax = plt.subplots(1,1)\nseason_ratings = train_df.groupby(\"Season\").agg({\"Imdb rating\": \"mean\"})\nseason_ratings.reset_index(inplace=True)\nsns.barplot(data=season_ratings, x=\"Season\", y=\"Imdb rating\")\nwrite_percent_of_plot(ax, season_ratings)","5a8a7c22":"train_df.columns","3d7e3835":"def write_percent(ax, season_ratings):\n    for patches in ax.patches:\n        height = patches.get_width()\n        width = patches.get_height()\n        get_x = patches.get_y()\n        value = height\n        ax.text(y = get_x + width\/2, x = height+0.4, s = '{:1.1f}'.format(value), fontsize=12 )","d8db1b9d":"season_ratings = train_df.groupby(\"Directed by\").agg({\"Imdb rating\": \"mean\"}).sort_values(by = \"Imdb rating\")\nseason_ratings.reset_index(inplace = True)\nfg, ax = plt.subplots(1, 2, figsize = (20,20))\nplt.subplots_adjust(wspace=0)\n\nax[0].invert_xaxis()\nax[0].set_xticks(range(1, 11))\nax[0].barh(y = season_ratings[\"Directed by\"], width = season_ratings[\"Imdb rating\"], height = 0.5, tick_label = season_ratings[\"Directed by\"])\n\nwrite_percent(ax[0], season_ratings)\n\nepisodes = train_df.groupby(\"Directed by\").count()\nepisodes.reset_index(inplace=True)\nwholedf = season_ratings.merge(episodes, on=\"Directed by\", how = \"inner\")\n\nax[1].set_xticks(range(1,11))\nax[1].barh(y = wholedf[\"Directed by\"], width = wholedf[\"Imdb rating_y\"], height = 0.5, tick_label = wholedf[\"Directed by\"])\nax[1].yaxis.tick_right()\nwrite_percent(ax[1], episodes)\n\n\n\n","22890811":"train_df.columns","f933fa4f":"season_ratings = train_df.groupby(\"Written by\").agg({\"Imdb rating\": \"mean\"}).sort_values(by = \"Imdb rating\")\nseason_ratings.reset_index(inplace=True)\nfg, ax = plt.subplots(1, 2, figsize = (10,10))\n\nax[0].invert_xaxis()\nax[0].set_xticks(range(1, 10))\nax[0].barh(y = season_ratings[\"Written by\"], width = season_ratings[\"Imdb rating\"], height = 0.5, tick_label = season_ratings[\"Written by\"])\n\nwrite_percent(ax[0], season_ratings)\n\n\nepisodes = train_df.groupby(\"Written by\").count()\nepisodes.reset_index(inplace=True)\nwholedf = season_ratings.merge(episodes, on=\"Written by\", how = \"inner\")\n\nax[1].yaxis.tick_right()\nax[1].barh(y = wholedf[\"Written by\"], width = wholedf[\"Imdb rating_y\"], height= 0.5, tick_label = wholedf[\"Written by\"])\n\nwrite_percent(ax[1], episodes)","e1c501f1":"season_ratings = train_df.groupby(\"Novel(s) adapted\").agg({\"Imdb rating\": \"mean\"}).sort_values(by = \"Imdb rating\")\nseason_ratings.reset_index(inplace=True)\nfg, ax = plt.subplots(1, 2, figsize = (10,10))\n\nax[0].invert_xaxis()\nax[0].set_xticks(range(1, 10))\nax[0].barh(y = season_ratings[\"Novel(s) adapted\"], width = season_ratings[\"Imdb rating\"], height = 0.5, tick_label = season_ratings[\"Novel(s) adapted\"])\n\nwrite_percent(ax[0], season_ratings)\n\n\nepisodes = train_df.groupby(\"Novel(s) adapted\").count()\nepisodes.reset_index(inplace=True)\nwholedf = season_ratings.merge(episodes, on=\"Novel(s) adapted\", how = \"inner\")\n\nax[1].yaxis.tick_right()\nax[1].barh(y = wholedf[\"Novel(s) adapted\"], width = wholedf[\"Imdb rating_y\"], height= 0.5, tick_label = wholedf[\"Novel(s) adapted\"])\n\nwrite_percent(ax[1], episodes)","994444de":"for season in range(1, 2):\n    grouped_seasons = train_df[train_df[\"Season\"] == 8]\n    print(grouped_seasons[\"Directed by\"], grouped_seasons[\"Imdb rating\"], grouped_seasons[\"Written by\"])\n","dbe439fc":"# Average rating on the basis of season","37f8fc34":"Anybody who has seen GOT, these ratings would be quite relatable. Season 8 has been rated the lowest and season 4 seems to be the best season and on average except for season 8, it is quite visible that the average lies between 8.7 to 10","3c3997e1":" This chart shows that most of the episodes are taken from the novel \"A storm of words\". The second novel that have been used in many episodes is Outline from a dream of spring and original content and the overall rating to episodes that took the content from this novel got 7.8 which is lowest.","45ddf692":" We can see from above plot that David Benioff & D.B. Weiss got a very bad overall rating for the episodes he directed and Neill Masrhall got the highest. The number of episodes that Neil Marshall has done is 2 while David Benioff & D.B. Weiss did 1 episode and did not go well.","8d9d8d41":"There are 73 rows in total as in there are 73 episodes in GOT so it makes sense to have 73 rows and there are few null values as well in the case fo US viewers and original air date. Title will much not make much sense while analysing the data. No. overall is same as index which is just a range of 73 values and so are the no. in season. Imdb rating is quite nice part of this dataset and US viewers as well.","a34a2e73":"## Do let me know what you think of it.\n## Looking forward to your feedback.\n## Please upvote the notebook if you like it.","fd4b120d":"##### This chart is quite supporting the writing skills of David Benioff and D.B Weiss and most of the episodes are written by him and also he is having a solid 8.9 rating as well."}}