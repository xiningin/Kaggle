{"cell_type":{"264431a8":"code","01b92eeb":"code","7cd6941f":"code","7fa6b133":"code","8fa14b12":"code","ca6e50b5":"code","4c7f753a":"code","1234ee5b":"code","f7da46b9":"code","8e7a4fcd":"code","c7000ad5":"code","67c6da2e":"code","84879fa4":"code","5ceb8053":"code","08c045c8":"code","9873e7d7":"code","22cdcc44":"code","548b2cd5":"code","4957863f":"code","a1cc9a2e":"code","d11a5157":"code","91f7ae40":"code","393d837a":"code","b474a01d":"code","a78d6cdb":"code","e24ae4d3":"code","affc9327":"code","fe500115":"code","5403b071":"code","c2953200":"code","1cd48afd":"code","b1ac26be":"code","be2ed4fe":"code","0d2ab21a":"code","8b0626cf":"code","7546e1d5":"code","a9f357d7":"code","46038c99":"code","34849543":"code","77f685f6":"code","c6ddcead":"code","ff5060de":"code","4868e690":"code","9fa3998b":"code","c88f3fab":"code","1aa1587f":"code","f5fe7736":"code","18e93f02":"code","40cd5659":"code","f2c9b917":"code","82cf8a52":"code","9fee3850":"code","2ee81a69":"code","b1f6d103":"code","2f03fe55":"code","752d45bd":"code","8759e65f":"markdown","c95a96d0":"markdown","1b7c1fca":"markdown","c72bc95b":"markdown","f33c5d26":"markdown","d9893552":"markdown","6b9bf872":"markdown","1998865d":"markdown"},"source":{"264431a8":"import numpy as np\nimport pandas as pd\nimport os\nimport xgboost as xgb\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import log_loss\nfrom scipy.interpolate import UnivariateSpline\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nimport collections\nfrom dataclasses import dataclass\nimport dataclasses","01b92eeb":"@dataclass\nclass Config: \n    stage_2 = False # True for Stage 2 submission\n    debug = True # True for fast debug run\n\nconfig = Config()","7cd6941f":"tourney_results = pd.read_csv('..\/input\/ncaam-march-mania-2021\/MNCAATourneyDetailedResults.csv')\nseeds = pd.read_csv('..\/input\/ncaam-march-mania-2021\/MNCAATourneySeeds.csv')\nregular_results = pd.read_csv('..\/input\/ncaam-march-mania-2021\/MRegularSeasonDetailedResults.csv')\nkenpom = pd.read_csv('..\/input\/kenpom-2020\/Mkenpom2021.csv')","7fa6b133":"all(regular_results.columns == tourney_results.columns)","8fa14b12":"regular_results.columns","ca6e50b5":"regular_results_swap = regular_results[[\n    'Season', 'DayNum', 'LTeamID', 'LScore', 'WTeamID', 'WScore', 'WLoc', 'NumOT', \n    'LFGM', 'LFGA', 'LFGM3', 'LFGA3', 'LFTM', 'LFTA', 'LOR', 'LDR', 'LAst', 'LTO', 'LStl', 'LBlk', 'LPF', \n    'WFGM', 'WFGA', 'WFGM3', 'WFGA3', 'WFTM', 'WFTA', 'WOR', 'WDR', 'WAst', 'WTO', 'WStl', 'WBlk', 'WPF']]","4c7f753a":"regular_results_swap.head()","1234ee5b":"regular_results_swap.loc[regular_results['WLoc'] == 'H', 'WLoc'] = 'A'\nregular_results_swap.loc[regular_results['WLoc'] == 'A', 'WLoc'] = 'H'\nregular_results.columns.values[6] = 'location'\nregular_results_swap.columns.values[6] = 'location'","f7da46b9":"regular_results.columns = [x.replace('W','T1_').replace('L','T2_') for x in list(regular_results.columns)]\nregular_results_swap.columns = [x.replace('L','T1_').replace('W','T2_') for x in list(regular_results.columns)]","8e7a4fcd":"regular_results.head()","c7000ad5":"regular_data = pd.concat([regular_results, regular_results_swap]).sort_index().reset_index(drop = True)","67c6da2e":"regular_data.head(10)","84879fa4":"tourney_results = pd.read_csv('..\/input\/ncaam-march-mania-2021\/MNCAATourneyDetailedResults.csv')\nseeds = pd.read_csv('..\/input\/ncaam-march-mania-2021\/MNCAATourneySeeds.csv')\nregular_results = pd.read_csv('..\/input\/ncaam-march-mania-2021\/MRegularSeasonDetailedResults.csv')\n\ndef prepare_data(df):\n    dfswap = df[['Season', 'DayNum', 'LTeamID', 'LScore', 'WTeamID', 'WScore', 'WLoc', 'NumOT', \n    'LFGM', 'LFGA', 'LFGM3', 'LFGA3', 'LFTM', 'LFTA', 'LOR', 'LDR', 'LAst', 'LTO', 'LStl', 'LBlk', 'LPF', \n    'WFGM', 'WFGA', 'WFGM3', 'WFGA3', 'WFTM', 'WFTA', 'WOR', 'WDR', 'WAst', 'WTO', 'WStl', 'WBlk', 'WPF']]\n\n    dfswap.loc[df['WLoc'] == 'H', 'WLoc'] = 'A'\n    dfswap.loc[df['WLoc'] == 'A', 'WLoc'] = 'H'\n    df.columns.values[6] = 'location'\n    dfswap.columns.values[6] = 'location'    \n      \n    df.columns = [x.replace('W','T1_').replace('L','T2_') for x in list(df.columns)]\n    dfswap.columns = [x.replace('L','T1_').replace('W','T2_') for x in list(dfswap.columns)]\n\n    output = pd.concat([df, dfswap]).reset_index(drop=True)\n    output.loc[output.location=='N','location'] = '0'\n    output.loc[output.location=='H','location'] = '1'\n    output.loc[output.location=='A','location'] = '-1'\n    output.location = output.location.astype(int)\n    \n    output['PointDiff'] = output['T1_Score'] - output['T2_Score']\n    \n    return output","5ceb8053":"regular_data = prepare_data(regular_results)\ntourney_data = prepare_data(tourney_results)","08c045c8":"regular_data.shape","9873e7d7":"tourney_data.shape","22cdcc44":"tourney_data.columns","548b2cd5":"boxscore_cols = ['T1_Score', 'T2_Score', \n        'T1_FGM', 'T1_FGA', 'T1_FGM3', 'T1_FGA3', 'T1_FTM', 'T1_FTA', 'T1_OR', 'T1_DR', 'T1_Ast', 'T1_TO', 'T1_Stl', 'T1_Blk', 'T1_PF', \n        'T2_FGM', 'T2_FGA', 'T2_FGM3', 'T2_FGA3', 'T2_FTM', 'T2_FTA', 'T2_OR', 'T2_DR', 'T2_Ast', 'T2_TO', 'T2_Stl', 'T2_Blk', 'T2_PF', \n        'PointDiff']\n\nboxscore_cols = [\n        'T1_FGM', 'T1_FGA', 'T1_FGM3', 'T1_FGA3', 'T1_OR', 'T1_Ast', 'T1_TO', 'T1_Stl', 'T1_PF', \n        'T2_FGM', 'T2_FGA', 'T2_FGM3', 'T2_FGA3', 'T2_OR', 'T2_Ast', 'T2_TO', 'T2_Stl', 'T2_Blk',  \n        'PointDiff']\n\nfuncs = [np.mean]","4957863f":"season_statistics = regular_data.groupby([\"Season\", 'T1_TeamID'])[boxscore_cols].agg(funcs)\nseason_statistics.head()","a1cc9a2e":"season_statistics = regular_data.groupby([\"Season\", 'T1_TeamID'])[boxscore_cols].agg(funcs).reset_index()\nseason_statistics.head()","d11a5157":"season_statistics.columns = [''.join(col).strip() for col in season_statistics.columns.values]\nseason_statistics.head()","91f7ae40":"season_statistics_T1 = season_statistics.copy()\nseason_statistics_T2 = season_statistics.copy()\n\nseason_statistics_T1.columns = [\"T1_\" + x.replace(\"T1_\",\"\").replace(\"T2_\",\"opponent_\") for x in list(season_statistics_T1.columns)]\nseason_statistics_T2.columns = [\"T2_\" + x.replace(\"T1_\",\"\").replace(\"T2_\",\"opponent_\") for x in list(season_statistics_T2.columns)]\nseason_statistics_T1.columns.values[0] = \"Season\"\nseason_statistics_T2.columns.values[0] = \"Season\"","393d837a":"season_statistics_T1.head()","b474a01d":"season_statistics_T2.head()","a78d6cdb":"tourney_data = tourney_data[['Season', 'DayNum', 'T1_TeamID', 'T1_Score', 'T2_TeamID' ,'T2_Score']]\ntourney_data.head()","e24ae4d3":"tourney_data = pd.merge(tourney_data, season_statistics_T1, on = ['Season', 'T1_TeamID'], how = 'left')\ntourney_data = pd.merge(tourney_data, season_statistics_T2, on = ['Season', 'T2_TeamID'], how = 'left')","affc9327":"tourney_data.head()","fe500115":"last14days_stats_T1 = regular_data.loc[regular_data.DayNum>118].reset_index(drop=True)\nlast14days_stats_T1['win'] = np.where(last14days_stats_T1['PointDiff']>0,1,0)\nlast14days_stats_T1 = last14days_stats_T1.groupby(['Season','T1_TeamID'])['win'].mean().reset_index(name='T1_win_ratio_14d')\n\nlast14days_stats_T2 = regular_data.loc[regular_data.DayNum>118].reset_index(drop=True)\nlast14days_stats_T2['win'] = np.where(last14days_stats_T2['PointDiff']<0,1,0)\nlast14days_stats_T2 = last14days_stats_T2.groupby(['Season','T2_TeamID'])['win'].mean().reset_index(name='T2_win_ratio_14d')","5403b071":"tourney_data = pd.merge(tourney_data, last14days_stats_T1, on = ['Season', 'T1_TeamID'], how = 'left')\ntourney_data = pd.merge(tourney_data, last14days_stats_T2, on = ['Season', 'T2_TeamID'], how = 'left')","c2953200":"regular_season_effects = regular_data[['Season','T1_TeamID','T2_TeamID','PointDiff']].copy()\nregular_season_effects['T1_TeamID'] = regular_season_effects['T1_TeamID'].astype(str)\nregular_season_effects['T2_TeamID'] = regular_season_effects['T2_TeamID'].astype(str)\nregular_season_effects['win'] = np.where(regular_season_effects['PointDiff']>0,1,0)\nmarch_madness = pd.merge(seeds[['Season','TeamID']],seeds[['Season','TeamID']],on='Season')\nmarch_madness.columns = ['Season', 'T1_TeamID', 'T2_TeamID']\nmarch_madness.T1_TeamID = march_madness.T1_TeamID.astype(str)\nmarch_madness.T2_TeamID = march_madness.T2_TeamID.astype(str)\nregular_season_effects = pd.merge(regular_season_effects, march_madness, on = ['Season','T1_TeamID','T2_TeamID'])\nregular_season_effects.shape","1cd48afd":"def team_quality(season):\n    formula = 'win~-1+T1_TeamID+T2_TeamID'\n    glm = sm.GLM.from_formula(formula=formula, \n                              data=regular_season_effects.loc[regular_season_effects.Season==season,:], \n                              family=sm.families.Binomial()).fit()\n    \n    quality = pd.DataFrame(glm.params).reset_index()\n    quality.columns = ['TeamID','quality']\n    quality['Season'] = season\n    quality['quality'] = np.exp(quality['quality'])\n    quality = quality.loc[quality.TeamID.str.contains('T1_')].reset_index(drop=True)\n    quality['TeamID'] = quality['TeamID'].apply(lambda x: x[10:14]).astype(int)\n    return quality","b1ac26be":"glm_quality = pd.concat([team_quality(2015),\n                         team_quality(2016),\n                         team_quality(2017),\n                         team_quality(2018), \n                         team_quality(2019)]).reset_index(drop=True)\nif not config.debug: \n    glm_quality = [team_quality(2010),\n                 team_quality(2011),\n                 team_quality(2012),\n                 team_quality(2013),\n                 team_quality(2014)] + glm_quality","be2ed4fe":"glm_quality_T1 = glm_quality.copy()\nglm_quality_T2 = glm_quality.copy()\nglm_quality_T1.columns = ['T1_TeamID','T1_quality','Season']\nglm_quality_T2.columns = ['T2_TeamID','T2_quality','Season']","0d2ab21a":"tourney_data = pd.merge(tourney_data, glm_quality_T1, on = ['Season', 'T1_TeamID'], how = 'left')\ntourney_data = pd.merge(tourney_data, glm_quality_T2, on = ['Season', 'T2_TeamID'], how = 'left')","8b0626cf":"seeds.head()","7546e1d5":"seeds['seed'] = seeds['Seed'].apply(lambda x: int(x[1:3]))\nseeds.head()","a9f357d7":"seeds_T1 = seeds[['Season','TeamID','seed']].copy()\nseeds_T2 = seeds[['Season','TeamID','seed']].copy()\nseeds_T1.columns = ['Season','T1_TeamID','T1_seed']\nseeds_T2.columns = ['Season','T2_TeamID','T2_seed']","46038c99":"tourney_data = pd.merge(tourney_data, seeds_T1, on = ['Season', 'T1_TeamID'], how = 'left')\ntourney_data = pd.merge(tourney_data, seeds_T2, on = ['Season', 'T2_TeamID'], how = 'left')","34849543":"tourney_data[\"Seed_diff\"] = tourney_data[\"T1_seed\"] - tourney_data[\"T2_seed\"]","77f685f6":"y = tourney_data['T1_Score'] - tourney_data['T2_Score']\ny.describe()","c6ddcead":"features = list(season_statistics_T1.columns[2:999]) + \\\n    list(season_statistics_T2.columns[2:999]) + \\\n    list(seeds_T1.columns[2:999]) + \\\n    list(seeds_T2.columns[2:999]) + \\\n    list(last14days_stats_T1.columns[2:999]) + \\\n    list(last14days_stats_T2.columns[2:999]) + \\\n    [\"Seed_diff\"] + [\"T1_quality\",\"T2_quality\"]\n\nlen(features)","ff5060de":"tourney_data","4868e690":"X = tourney_data[features].values\ndtrain = xgb.DMatrix(X, label = y)","9fa3998b":"def cauchyobj(preds, dtrain):\n    labels = dtrain.get_label()\n    c = 5000 \n    x =  preds-labels    \n    grad = x \/ (x**2\/c**2+1)\n    hess = -c**2*(x**2-c**2)\/(x**2+c**2)**2\n    return grad, hess","c88f3fab":"param = {} \n#param['objective'] = 'reg:linear'\nparam['eval_metric'] =  'mae'\nparam['booster'] = 'gbtree'\nparam['eta'] = 0.02\nparam['subsample'] = 0.35\nparam['colsample_bytree'] = 0.7\nparam['num_parallel_tree'] = 10\nparam['min_child_weight'] = 40\nparam['gamma'] = 10\nparam['max_depth'] =  3\nparam['silent'] = 1\n\nprint(param)","1aa1587f":"xgb_cv = []\nrepeat_cv = 25\nn_splits = 5\nif config.debug: \n    repeat_cv = 2\n    n_splits = 2\n\nfor i in range(repeat_cv): \n    print(f\"Fold repeater {i}\")\n    xgb_cv.append(\n        xgb.cv(\n          params = param,\n          dtrain = dtrain,\n          obj = cauchyobj,\n          num_boost_round = 3000,\n          folds = KFold(n_splits = n_splits, shuffle = True, random_state = i),\n          early_stopping_rounds = 25,\n          verbose_eval = 50\n        )\n    )","f5fe7736":"iteration_counts = [np.argmin(x['test-mae-mean'].values) for x in xgb_cv]\nval_mae = [np.min(x['test-mae-mean'].values) for x in xgb_cv]\niteration_counts, val_mae","18e93f02":"oof_preds = []\nfor i in range(repeat_cv):\n    print(f\"Fold repeater {i}\")\n    preds = y.copy()\n    kfold = KFold(n_splits = 5, shuffle = True, random_state = i)    \n    for train_index, val_index in kfold.split(X,y):\n        dtrain_i = xgb.DMatrix(X[train_index], label = y[train_index])\n        dval_i = xgb.DMatrix(X[val_index], label = y[val_index])  \n        model = xgb.train(\n              params = param,\n              dtrain = dtrain_i,\n              num_boost_round = iteration_counts[i],\n              verbose_eval = 50\n        )\n        preds[val_index] = model.predict(dval_i)\n    oof_preds.append(np.clip(preds,-30,30))","40cd5659":"plot_df = pd.DataFrame({\"pred\":oof_preds[0], \"label\":np.where(y>0,1,0)})\nplot_df[\"pred_int\"] = plot_df[\"pred\"].astype(int)\nplot_df = plot_df.groupby('pred_int')['label'].mean().reset_index(name='average_win_pct')\n\nplt.figure()\nplt.plot(plot_df.pred_int,plot_df.average_win_pct)","f2c9b917":"spline_model = []\n\nfor i in range(repeat_cv):\n    dat = list(zip(oof_preds[i],np.where(y>0,1,0)))\n    dat = sorted(dat, key = lambda x: x[0])\n    datdict = {}\n    for k in range(len(dat)):\n        datdict[dat[k][0]]= dat[k][1]\n        \n    spline_model.append(UnivariateSpline(list(datdict.keys()), list(datdict.values())))\n    spline_fit = spline_model[i](oof_preds[i])\n    \n    print(f\"logloss of cvsplit {i}: {log_loss(np.where(y>0,1,0),spline_fit)}\") ","82cf8a52":"plot_df = pd.DataFrame({\"pred\":oof_preds[0], \"label\":np.where(y>0,1,0), \"spline\":spline_model[0](oof_preds[0])})\nplot_df[\"pred_int\"] = (plot_df[\"pred\"]).astype(int)\nplot_df = plot_df.groupby('pred_int')['spline','label'].mean().reset_index()\n\nplt.figure()\nplt.plot(plot_df.pred_int,plot_df.spline)\nplt.plot(plot_df.pred_int,plot_df.label)","9fee3850":"spline_model = []\n\nfor i in range(repeat_cv):\n    dat = list(zip(oof_preds[i],np.where(y>0,1,0)))\n    dat = sorted(dat, key = lambda x: x[0])\n    datdict = {}\n    for k in range(len(dat)):\n        datdict[dat[k][0]]= dat[k][1]\n    spline_model.append(UnivariateSpline(list(datdict.keys()), list(datdict.values())))\n    spline_fit = spline_model[i](oof_preds[i])\n    spline_fit = np.clip(spline_fit,0.025,0.975)\n    \n    print(f\"adjusted logloss of cvsplit {i}: {log_loss(np.where(y>0,1,0),spline_fit)}\") ","2ee81a69":"spline_model = []\n\nfor i in range(repeat_cv):\n    dat = list(zip(oof_preds[i],np.where(y>0,1,0)))\n    dat = sorted(dat, key = lambda x: x[0])\n    datdict = {}\n    for k in range(len(dat)):\n        datdict[dat[k][0]]= dat[k][1]\n    spline_model.append(UnivariateSpline(list(datdict.keys()), list(datdict.values())))\n    spline_fit = spline_model[i](oof_preds[i])\n    spline_fit = np.clip(spline_fit,0.025,0.975)\n\n    \n    print(f\"adjusted logloss of cvsplit {i}: {log_loss(np.where(y>0,1,0),spline_fit)}\") ","b1f6d103":"spline_model = []\n\nfor i in range(repeat_cv):\n    dat = list(zip(oof_preds[i],np.where(y>0,1,0)))\n    dat = sorted(dat, key = lambda x: x[0])\n    datdict = {}\n    for k in range(len(dat)):\n        datdict[dat[k][0]]= dat[k][1]\n    spline_model.append(UnivariateSpline(list(datdict.keys()), list(datdict.values())))\n    spline_fit = spline_model[i](oof_preds[i])\n    spline_fit = np.clip(spline_fit,0.025,0.975)\n    \n    print(f\"adjusted logloss of cvsplit {i}: {log_loss(np.where(y>0,1,0),spline_fit)}\") ","2f03fe55":"val_cv = []\nspline_model = []\n\nfor i in range(repeat_cv):\n    dat = list(zip(oof_preds[i],np.where(y>0,1,0)))\n    dat = sorted(dat, key = lambda x: x[0])\n    datdict = {}\n    for k in range(len(dat)):\n        datdict[dat[k][0]]= dat[k][1]\n    spline_model.append(UnivariateSpline(list(datdict.keys()), list(datdict.values())))\n    spline_fit = spline_model[i](oof_preds[i])\n    spline_fit = np.clip(spline_fit,0.025,0.975)\n    spline_fit[(tourney_data.T1_seed==1) & (tourney_data.T2_seed==16) & (tourney_data.T1_Score > tourney_data.T2_Score)] = 1.0\n    spline_fit[(tourney_data.T1_seed==2) & (tourney_data.T2_seed==15) & (tourney_data.T1_Score > tourney_data.T2_Score)] = 1.0\n    spline_fit[(tourney_data.T1_seed==3) & (tourney_data.T2_seed==14) & (tourney_data.T1_Score > tourney_data.T2_Score)] = 1.0\n    spline_fit[(tourney_data.T1_seed==4) & (tourney_data.T2_seed==13) & (tourney_data.T1_Score > tourney_data.T2_Score)] = 1.0\n    spline_fit[(tourney_data.T1_seed==16) & (tourney_data.T2_seed==1) & (tourney_data.T1_Score < tourney_data.T2_Score)] = 0.0\n    spline_fit[(tourney_data.T1_seed==15) & (tourney_data.T2_seed==2) & (tourney_data.T1_Score < tourney_data.T2_Score)] = 0.0\n    spline_fit[(tourney_data.T1_seed==14) & (tourney_data.T2_seed==3) & (tourney_data.T1_Score < tourney_data.T2_Score)] = 0.0\n    spline_fit[(tourney_data.T1_seed==13) & (tourney_data.T2_seed==4) & (tourney_data.T1_Score < tourney_data.T2_Score)] = 0.0\n    \n    val_cv.append(pd.DataFrame({\"y\":np.where(y>0,1,0), \"pred\":spline_fit, \"season\":tourney_data.Season}))\n    print(f\"adjusted logloss of cvsplit {i}: {log_loss(np.where(y>0,1,0),spline_fit)}\") \n    \nval_cv = pd.concat(val_cv)\nval_cv.groupby('season').apply(lambda x: log_loss(x.y, x.pred))","752d45bd":"if config.stage_2: \n    sub = pd.read_csv('..\/input\/MSampleSubmissionStage2.csv')\n    sub[\"Season\"] = 2021\n    sub[\"T1_TeamID\"] = sub[\"ID\"].apply(lambda x: x[5:9]).astype(int)\n    sub[\"T2_TeamID\"] = sub[\"ID\"].apply(lambda x: x[10:14]).astype(int)\n    sub = pd.merge(sub, season_statistics_T1, on = ['Season', 'T1_TeamID'])\n    sub = pd.merge(sub, season_statistics_T2, on = ['Season', 'T2_TeamID'])\n    sub = pd.merge(sub, glm_quality_T1, on = ['Season', 'T1_TeamID'])\n    sub = pd.merge(sub, glm_quality_T2, on = ['Season', 'T2_TeamID'])\n    sub = pd.merge(sub, seeds_T1, on = ['Season', 'T1_TeamID'])\n    sub = pd.merge(sub, seeds_T2, on = ['Season', 'T2_TeamID'])\n    sub = pd.merge(sub, last14days_stats_T1, on = ['Season', 'T1_TeamID'])\n    sub = pd.merge(sub, last14days_stats_T2, on = ['Season', 'T2_TeamID'])\n    sub[\"Seed_diff\"] = sub[\"T1_seed\"] - sub[\"T2_seed\"]\n    Xsub = sub[features].values\n    dtest = xgb.DMatrix(Xsub)\n    sub_models = []\n    for i in range(repeat_cv):\n        print(f\"Fold repeater {i}\")\n        sub_models.append(\n            xgb.train(\n              params = param,\n              dtrain = dtrain,\n              num_boost_round = int(iteration_counts[i] * 1.05),\n              verbose_eval = 50\n            )\n        )\n    sub_preds = []\n    for i in range(repeat_cv):\n        sub_preds.append(np.clip(spline_model[i](np.clip(sub_models[i].predict(dtest),-30,30)),0.025,0.975))\n\n    sub[\"Pred\"] = pd.DataFrame(sub_preds).mean(axis=0)\n    sub[['ID','Pred']].to_csv(\"submission.csv\", index = None)","8759e65f":"You can also add Kenpom data, 538 ratings data and spread data in the features","c95a96d0":"### Preparing the data","1b7c1fca":"### Model Building","c72bc95b":"### Submission","f33c5d26":"### Feature engineering","d9893552":"# If you fork, do leave an upvote!","6b9bf872":"### Load the data","1998865d":"# NCAAM Prediction\n---\nAll the credit for this solution goes to @raddar. Check out his [notebook](https:\/\/www.kaggle.com\/raddar\/paris-madness ) and leave an upvote there as well.\n\nThe 2019 best solution was based on @raddar's solution"}}