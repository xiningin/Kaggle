{"cell_type":{"599e25f9":"code","ab9df26e":"code","2cdff041":"code","eb8bbf1d":"code","779fa6d5":"code","e838d298":"code","bee52314":"code","0e29b3a1":"code","080e1363":"code","e7bbe6e6":"code","e6ac8cef":"code","9dac7200":"code","71f2e4f4":"code","94f0d723":"code","c7631bad":"code","936d2f57":"code","89c6089e":"code","33cf99de":"code","335b6e9a":"code","abed9f3f":"code","87c37883":"code","79427a3e":"code","078b4eb9":"code","5a770d77":"code","f2aaad3a":"code","453c11d9":"code","a9021ee9":"markdown","ba8fc91d":"markdown","49bd72fe":"markdown","4e1b7b6e":"markdown","ec7b8ddc":"markdown","d6539c2d":"markdown","37768ed5":"markdown","375d158a":"markdown","f76a4498":"markdown","8b003b18":"markdown","76f19a72":"markdown","1e91e91b":"markdown","e7d069fd":"markdown","5072fd88":"markdown","cf107521":"markdown"},"source":{"599e25f9":"#DATA\nimport os\nprint(os.listdir(\"..\/input\"))\n# Any results you write to the current directory are saved as output.\nimport pandas as pd\nimport numpy as np\n#random forest for regressor\nfrom sklearn.ensemble import RandomForestRegressor\n#split features  and target\nfrom sklearn.model_selection import train_test_split\n#Pour regression au lieu de accuracy c'est mean_square_error\nfrom sklearn.metrics import mean_squared_error\n#Ne pas afficher le warning lors du fit par exemple\n#Import for cross_validation\nfrom sklearn.model_selection  import cross_val_score\n#import random forest for regression\nfrom sklearn.ensemble import RandomForestRegressor\n#Validation\nfrom sklearn.model_selection import ShuffleSplit\nfrom sklearn.model_selection import KFold\n#Vizualisation\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# better visuals\nsns.set()  \n%matplotlib inline\nfrom math import *\n#ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')","ab9df26e":"# Train File\nX_train = pd.read_csv('..\/input\/train.csv', index_col='id')\n#Test File\nX_test = pd.read_csv('..\/input\/test.csv', index_col='id')\n#Submission File\nsubmission = pd.read_csv('..\/input\/sample_submission.csv')","2cdff041":"X_train.head(2)","eb8bbf1d":"X_train.describe()","779fa6d5":"X_test.head(2)","e838d298":"X_test.describe()","bee52314":"# TRAIN\nX_train.loc[X_train['store_and_fwd_flag'] == 'N', 'store_and_fwd_flag'] = 0\nX_train.loc[X_train['store_and_fwd_flag'] == 'Y', 'store_and_fwd_flag'] = 1\n# TEST\nX_test.loc[X_test['store_and_fwd_flag'] == 'N', 'store_and_fwd_flag'] = 0\nX_test.loc[X_test['store_and_fwd_flag'] == 'Y', 'store_and_fwd_flag'] = 1","0e29b3a1":"##Add column distance\n#R = 6367445 \n#X_train[\"distance\"] = R*acos(sin(X_train[\"pickup_latitude\"])sin(X_train[\"dropoff_latitude\"]) + cos(X_train[\"dropoff_latitude\"])cos(X_train[\"pickup_longitude\"] - X_train[\"dropoff_longitude\"])))\n","080e1363":"#plot the count of passenger_count\nsns.countplot(x=\"passenger_count\", data=X_train);","e7bbe6e6":"#plot the count of trip_duration\n#sns.countplot(x=\"trip_duration\", data=X_train);","e6ac8cef":"#X_train['trip_duration'].plot.kde()","9dac7200":"X_train = X_train[(X_train['trip_duration']  < 8000) & (X_train['passenger_count'] >= 1 )]","71f2e4f4":"X_train.describe()","94f0d723":"X_test.describe()","c7631bad":"## Fonction features et target\ndef split_dataset(df, features, target='trip_duration'):\n    X = df[features]\n    y = df[target]\n    return X, y","936d2f57":"def date_split(df_train, df_test, date='pickup_datetime'):\n    ##X_train\n    cols=df_train[date]\n    date_cols=pd.to_datetime(cols)\n    df_train['year'] = date_cols.dt.year\n    df_train['month'] = date_cols.dt.month\n    df_train['day'] = date_cols.dt.day\n    df_train['hour'] = date_cols.dt.hour\n    df_train['minute'] = date_cols.dt.minute\n    df_train['second'] = date_cols.dt.second\n    #df_train = df_train.drop(['pickup_datetime'], axis=1)\n    ##X_test\n    cols2=df_test[date]\n    date_cols2=pd.to_datetime(cols2)\n    df_test['year'] = date_cols2.dt.year\n    df_test['month'] = date_cols2.dt.month\n    df_test['day'] = date_cols2.dt.day\n    df_test['hour'] = date_cols2.dt.hour\n    df_test['minute'] = date_cols2.dt.minute\n    df_test['second'] = date_cols2.dt.second\n    #df_test = df_test.drop(['pickup_datetime'], axis=1)\n    return df_train, df_test","89c6089e":"#X_train['pickup_datetime']\n#date_cols=pd.to_datetime(cols)\n#X_train['year'] = date_cols.dt.year\n#X_train.head(1)","33cf99de":"#Split  date for X_train et X_test\nX_train, X_test = date_split(X_train, X_test)","335b6e9a":"# Get colums set test for set training\ndef Get_cols(df, features_test=X_test.columns):\n    #get X_test columns in  X_train\n    X_train_features = df[features_test]\n    return  X_train_features","abed9f3f":"#Same columns for X_test and X_train\nX_trainGet_cols = Get_cols(X_test)\n#Get only columns numbers\nnumbers = X_trainGet_cols.select_dtypes(np.number)\n#Definition features and target in the file train\nX_train_features, y_train_target = split_dataset(X_train, features=numbers.columns)\n#X_test numbers\nX_test = X_test.select_dtypes(np.number)","87c37883":"#rf = RandomForestRegressor()\n#kf = KFold(n_splits=5, random_state=1)                                                                                      \n#loses = cross_val_score(rf, X_train_features, y_train_target, cv=kf, scoring='neg_mean_squared_log_error')\n# np.sqrt(-loses.mean())\n#loses = [np.sqrt(-l) for l in loses]\n# np.mean(loses)\n#loses[:5]","79427a3e":"#Initialise Random Forest regressor\nrf = RandomForestRegressor()\ncv = ShuffleSplit(n_splits=3, test_size=0.05, train_size=0.1, random_state=42)\n#Cross Validation\nlossess = -cross_val_score(rf, X_train_features, y_train_target, cv=cv, scoring='neg_mean_squared_log_error')","078b4eb9":"## FIT all the train set\nrf = RandomForestRegressor()\nrf.fit(X_train_features, y_train_target)","5a770d77":"##### Predict in the training\ny_train_pred = rf.predict(X_train_features)\n\n###### Predict in the test\ny_test_pred = rf.predict(X_test)\n\ny_test_pred.mean()","f2aaad3a":"#!rm submission.csv","453c11d9":"submission[\"trip_duration\"] = y_test_pred\n#Convertir notre fichier en csv\nsubmission.to_csv('submission.csv', index=False)","a9021ee9":"## Vizualisation","ba8fc91d":"# 6 ------------------SUBMISSION-------------------------\n","49bd72fe":"### ENCODING","4e1b7b6e":"# 2  ------------------- FUNCTIONS---------------------------","ec7b8ddc":"## PREDICTION","d6539c2d":"## Function features and target","37768ed5":"# 1     ------------------   EDA  -----------------------","375d158a":"# 3 ----------------------TREATMENT---------------------","f76a4498":"## IMPORT TRAIN - TEST - SUBMISSION","8b003b18":"# 4----------------------Validation------------------------","76f19a72":"## Function same columns  X_train and X_test","1e91e91b":"## FILTER","e7d069fd":"## Function split date","5072fd88":"## FIT","cf107521":"# 5 -------------------FIT AND PREDICT----------------------"}}