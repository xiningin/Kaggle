{"cell_type":{"82b512df":"code","2a082138":"code","e65af375":"code","5ca833c3":"code","7ee88365":"code","4868e5f9":"code","913e88fd":"code","4b0aa481":"code","b01f96ff":"code","e09c3477":"code","0b797573":"code","28127cc4":"code","1b7c8a7d":"code","7e752e6f":"code","4da2d3b0":"code","150ecd89":"code","1b36dfec":"code","91ff077a":"code","4d17a57e":"code","d9d086d5":"code","3d868eb2":"code","e6a84c17":"code","65adaf76":"code","9840ec96":"code","49dcb5ab":"code","bd5e2b91":"code","826b3a5c":"code","0d2d1626":"code","4f12bf97":"markdown","4e0cc9d6":"markdown","a9a0c91a":"markdown","ddb44804":"markdown","49773c0d":"markdown","fca5055c":"markdown","d19716ac":"markdown","a3b05a7c":"markdown","3b6cb6e2":"markdown","935fc596":"markdown","6a5d04c6":"markdown","b6c03607":"markdown","e2ef08cb":"markdown","dd384b7c":"markdown","e71e68af":"markdown","7a1f9537":"markdown","2a2fedc4":"markdown"},"source":{"82b512df":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2a082138":"data=pd.read_csv(\"\/kaggle\/input\/heart-disease-uci\/heart.csv\")","e65af375":"data","5ca833c3":"data.info()","7ee88365":"data.target.value_counts()","4868e5f9":"x_data=data.drop([\"target\"], axis=1)\nx=((x_data-np.min(x_data))\/(np.max(x_data)-np.min(x_data))).values\ny=data.target.values","913e88fd":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test=train_test_split(x,y, test_size=0.2, random_state=42)","4b0aa481":"from sklearn.linear_model import LogisticRegression\nlr=LogisticRegression()\nlr.fit(x_train, y_train)\nprint(\"Logistic Regression Accuracy:\", 100*lr.score(x_test, y_test), \"%\")","b01f96ff":"from sklearn.metrics import confusion_matrix\ny_true=y_test\ny_pred=lr.predict(x_test)\ncmlr=confusion_matrix(y_true, y_pred)\nf,ax=plt.subplots(figsize=(6,6))\nsns.heatmap(cmlr, annot=True)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.show()","e09c3477":"from sklearn.neighbors import KNeighborsClassifier\nscore_list=[]\nfor each in range(1,30):\n    knn2=KNeighborsClassifier(n_neighbors=each)\n    knn2.fit(x_train, y_train)\n    score_list.append(100*knn2.score(x_test, y_test))\n    print(\"n=\", each, \"Accuracy:\", 100*knn2.score(x_test, y_test), \"%\")","0b797573":"plt.plot([*range(1,30)], score_list)\nplt.xlabel(\"n Value\")\nplt.ylabel(\"Accuracy %\")\nplt.show()","28127cc4":"optimal_n_value=score_list.index(max(score_list))+1\nknn=KNeighborsClassifier(n_neighbors=optimal_n_value)\nknn.fit(x_train, y_train)\nprint(\"KNN Prediction Accuracy:\", 100*knn.score(x_test, y_test), \"%\")","1b7c8a7d":"from sklearn.metrics import confusion_matrix\ny_true=y_test\ny_pred=knn.predict(x_test)\ncmknn=confusion_matrix(y_true, y_pred)","7e752e6f":"f,ax=plt.subplots(figsize=(6,6))\nsns.heatmap(cmknn, annot=True)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.show()","4da2d3b0":"from sklearn.svm import SVC\nsvm=SVC(random_state=42)\nsvm.fit(x_train, y_train)\nprint(\"SVM Prediction Accuracy:\", 100*svm.score(x_test, y_test), \"%\")","150ecd89":"y_true=y_test\ny_pred=svm.predict(x_test)\ncmsvm=confusion_matrix(y_true, y_pred)","1b36dfec":"f,ax=plt.subplots(figsize=(6,6))\nsns.heatmap(cmsvm, annot=True)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.show()","91ff077a":"from sklearn.naive_bayes import GaussianNB\nnb=GaussianNB()\nnb.fit(x_train, y_train)\nprint(\"Naive Bayes Prediction Accuracy:\", 100*nb.score(x_test, y_test), \"%\")","4d17a57e":"y_true=y_test\ny_pred=nb.predict(x_test)\ncmnb=confusion_matrix(y_true, y_pred)","d9d086d5":"f,ax=plt.subplots(figsize=(6,6))\nsns.heatmap(cmnb, annot=True)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.show()","3d868eb2":"from sklearn.tree import DecisionTreeClassifier\ndt=DecisionTreeClassifier()\ndt.fit(x_train, y_train)\nprint(\"Decision Trees Prediction Accuracy:\", 100*dt.score(x_test, y_test), \"%\")","e6a84c17":"y_true=y_test\ny_pred=dt.predict(x_test)\ncmdt=confusion_matrix(y_true, y_pred)","65adaf76":"f,ax= plt.subplots(figsize=(6,6))\nsns.heatmap(cmdt, annot=True)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.show()","9840ec96":"from sklearn.ensemble import RandomForestClassifier\nscore_list=[]\nfor each in range(1,75):\n    rf2=RandomForestClassifier(n_estimators=each, random_state=42)\n    rf2.fit(x_train, y_train)\n    score_list.append(100*rf2.score(x_test, y_test))\n    print(\"n_estimators=\", each, \"--> Accuracy:\", 100*rf2.score(x_test, y_test), \"%\")\n\nplt.plot([*range(1,75)], score_list)\nplt.xlabel(\"n_estimators Value\")\nplt.ylabel(\"Accuracy %\")\nplt.show()","49dcb5ab":"optimal_n_estimators_value=score_list.index(max(score_list))+1\nrf=RandomForestClassifier(n_estimators=optimal_n_estimators_value, random_state=42)\nrf.fit(x_train, y_train)\nprint(\"Random Forest Prediction Accuracy:\", 100*rf.score(x_test, y_test), \"%\")","bd5e2b91":"y_true=y_test\ny_pred=rf.predict(x_test)\ncmrf=confusion_matrix(y_true, y_pred)","826b3a5c":"f,ax= plt.subplots(figsize=(6,6))\nsns.heatmap(cmrf, annot=True)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.show()","0d2d1626":"print(\"Logistic Regression Accuracy:\", 100*lr.score(x_test, y_test), \"%\")\nprint(\"KNN Prediction Accuracy:\", 100*knn.score(x_test, y_test), \"%\")\nprint(\"SVM Prediction Accuracy:\", 100*svm.score(x_test, y_test), \"%\")\nprint(\"Naive Bayes Prediction Accuracy:\", 100*nb.score(x_test, y_test), \"%\")\nprint(\"Decision Trees Prediction Accuracy:\", 100*dt.score(x_test, y_test), \"%\")\nprint(\"Random Forest Prediction Accuracy:\", 100*rf.score(x_test, y_test), \"%\")","4f12bf97":"# Naive Bayes Classification","4e0cc9d6":"# Logistic Regression Classification","a9a0c91a":"# Decision Trees Classification","ddb44804":"It is seen that random forest classification model is the best prediction model for this data.","49773c0d":"This model is not successful either.","fca5055c":"# KNN Classification","d19716ac":"This model can be considered successful.","a3b05a7c":"Again, it is not successful because of the same problems.","3b6cb6e2":"It is balanced, the reason of the lack of the success of these models is the amount of data which is very low for a machine learning model.","935fc596":"# Conclusion","6a5d04c6":"This one is a little better than the other models.","b6c03607":"# Introduction\nI tried some classification models on this data, I hope you enjoy it! :)","e2ef08cb":"The data is not big but it is balanced.","dd384b7c":"# Random Forest Classification","e71e68af":"It cannot be considered successful but the prediction is balanced.","7a1f9537":"# SVM Classification","2a2fedc4":"It looks like there is no missing data, that's good."}}