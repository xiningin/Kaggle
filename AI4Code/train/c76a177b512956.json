{"cell_type":{"3a47cd9a":"code","4d2d86d0":"code","87ea0d02":"code","b6597e23":"code","b696741f":"code","15f9b991":"code","5b7bb0db":"code","f07f161a":"code","6249998a":"code","21631106":"code","28834444":"code","68260d6c":"code","aa33ba1e":"code","adde9aec":"code","9e6b2fe6":"code","947036ac":"code","6113e3bd":"code","11a2ed1a":"code","fa2ff488":"code","42b3205b":"code","1e67f007":"code","eb37fd50":"code","a72e6d37":"code","ef7f17fa":"code","0d69f31a":"code","888110ae":"code","92b8b733":"markdown","f073a349":"markdown","f1edae5a":"markdown","d83c9ad6":"markdown","6c1ccda9":"markdown"},"source":{"3a47cd9a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns #visualization\nimport matplotlib.pyplot as plt #visualization\n%matplotlib inline\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.offline as py\nimport plotly.express as px\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4d2d86d0":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBw8SDxAPDxAPFRAWDxAPFRUVFRUVFRUWFhUWFhcVFRUYHSggGBslGxUVITEiJSktLi4uFx8zODUsNygtLisBCgoKDg0OGhAQGy0lHyYuLS0rKy0tLSsrLS0tKyswLS0rLS0rLS0tLSstKy0tLS0tKy0tLS0tLS0tLS0tLS0tLf\/AABEIAKcBLQMBEQACEQEDEQH\/xAAcAAACAgMBAQAAAAAAAAAAAAABAgADBAUGBwj\/xABAEAACAQMCAwUEBggFBQEAAAABAgADBBESIQUxQQYTIlFhMnGBkRRSkqHB0QcVI0JysdLwJFRik+EWM2OC8VP\/xAAbAQACAwEBAQAAAAAAAAAAAAAAAQIEBQMGB\/\/EADYRAAICAQMBBAgFAwUBAAAAAAABAgMRBCExEgVBUWETFDJxgZGh0RUiscHwQlLhBhYjM\/Fy\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\/AKvLogurS2uHQYV3Hix6jBz90q+q4bcJNF\/8QcklZBSa72YtDtC6reL3dP8AxIw2MgJsw8A8vF906PTpuO\/snJa2SjYsL8309xTwnjDUKV1SVFYV6QpMSTlRhxkfbPykrKVZKMs8HKnUuqE4JZ6lj+fMsrccdra3tii6aNTvA2Tljljg\/agqEpynnkctXJ1Qqx7LznxM09qqn00XvdJrFPutOTjHnn4yHqq9F6PJ0faMvWPT9K4xjJTYdoHprWp1KVOrQq1DUam+cBic5VunIfIRz0yk008Nd5zq10oKUZRUot5wzG4lfJV0BLejRVdWBTByc43Zj7XKdK63DOZN58ThqL4246YKKXh+5hzqViRgEQIjQEOiEzjZqIQLNWkss34XmWigc4wc+Uqy1cnwXodn1r2nn6Fq2pzpI36eXzlezVzistneOkp\/tA1EbYySeW3x5g4ihrJS4kEtHV3xQponOMbyzHVzXO5wn2fVL2dhCpHOWa9TCe3BQt0Vle63XkSWCkSABgIkYBEBBxEIkYBgJkiEGAHLysbwRAQYxBEAZaqiAEZYyJuOzvDqdYXHeU676KWte6K+E+Ld9RG23T1nG6yUWsNb+Ja0tUbOrqTeF3fuU2XALyqiVKVB3RyVVhjBIznrtyO5kpXVxbTZyhpbppSjHKZj31jVo1DSrIyOADg45HkQRsR6iThOM1mLOdlcq5dM1hm37OcDp3FG8qu7qaNIVFC4wTpqHDZH+gfOcrrnXKKXeWNLpo3RnJv2V9zEs+A3dVEqUqDsjsVVhjBIznrt7J3PlOkr64tps416W6cVKMcpldbhdwlYW70nFYkAJjJOeWMbEeo8jJK2Dj1J7EJUWRn6NrfwOg4Z2TcJdm8p1Uanb97TwVwSA5OSMg8l2z1lazVLMVW+Xhl2ns99M3cmsLK+prbjh6Cxt66064qPVKFzp7phl8BBnOfCOfkZ2jY3bKLawvn3FadMVp4TSeW\/h38DVuy98iGo1u4UDJ3QnH8IOfugtVU3hSIy0GpjHqcH9DVASwUhgICCIAGMQYCGAg2kssEm3hGXa2hO55ef5TOu1LltHg1qNJGv8093+hlHY6KY8XU+XxlUue8vpUgo9epgJsR2JYgdFwTkDGeY+4bypfLdI61rbJWpB8JZBthQNWB6gdTnrOCbTyiZYoDqNXP+RmhF5WTg9mVjnoqD3Hz+MkHuKbi2K7jcf3zlmnUShs90U9RpIW7raX85KJpRkpLKMScJQl0yW5JI5hgAYCIIgDiAiRgQRCDGBzEqm8QQENGAYCHVoCCTGI67sDVVVv8AUyjNrgZIGTh9hmU9Wm+nHiaXZsklZl933HuLwpwG3SnUw5uHDBWw2nXVbfG+MhT8o1FPVPK7vsKVjjoIqL7\/AN2T9ItVXrWzKysfoygkEHfUeePfDRLCl7xdqSTlDHgP2IqqtrxMMygm3AGSBnwVuXnzhqk+uHv+w+z2lXbnw\/ZgubwrwK2VKmHNw4YK2G06qzbgb4yFPyjUE9TLK7vsQla46CCi8PP3Ogu+IUF4pZ1HdMG0NPXkYViTjJ6dR\/7StGuTpkl4l+y6uOqrlJ\/04yV2Nu9BOJivc0mNSnUdFFTUcEVPEQeWcgY\/0+klKSm6+mPHl7iNcJVq7rmnlNrf3mpqtTbhXDqbuAPpnjwRqVS9XLY6YBzO6yr7Gl3fYpTcXo6VJ\/1b\/U6fhtKhRuzoW2Sk1Lw1O+L1Kvsk5BPLOdz6ecpzcpQ3znwxsjUpjXXdsopY2ectnmFQDU2OWo\/zm1HhHk5+0\/ewRkAiABxGIMBGbZW2Tk8uv5TN1F3U8Lg2NLR6OPVLl\/QyKqlD4Dz2x+UrFtbmh\/a3H0thVenQt6feOEGXcAOSF3Az+zbGTjcbStqdT6Fxilly2Xh8TR0ukVqlJvCXP+Co3tS1a1Peu9C6p95SFT\/uKDpxrA2DeNdwcHfYRafUel6otbx2fh8A1WkVaU1w+PH4nTU6GBkaSTgnUMjPn95nSypTeSgp4HWmw5EL\/CB+MSoiHpCcOoNrNPOebaj5dYr7oaevqZ2o089TZ0x\/8MyraUXdqAqr3yqHK7ZAOMMV5gHPP0My12tNfmcPymv+DQ4U\/wAxrhSYuUqE5U40\/j6\/8zZrtjZBTjwzEuqlVNwkt0VXVDTuOX8pboucHvwUNVp1dHb2lx9jHmqYDWAiBEMQEjAMBEiBhgIkYHMSqbwRAQYxBgAyiMixoCCBGJjAQEMBGIbEZEIEBDBYxBCwIjBYwCF90BDAQEHEBBEYgwIllFMmV9RZ0wwu8t6Orrnl8Is4rxRaCBUwXIOPU8if4QRz64wOpXL5ex6CFax1S+C\/cHA+JCsSXwKgAGPxH99Y3scpx6eDErvVs6lyRQetbXCFXCbuh8WNuo8bD5bylrNL6bplF4cTR0GsjUnGXDNfXWvxG6oVO4NG2oKq0w2xOCDjHwX4DnvHpNN6CLy8tvLJa7WRtworZbI6a5uTRTVVemqjbJ2+Q6n0EuGVhM1dv2qtncJ3yIScDWCoPxO3zg9ifo33I6nhIIL6mJJXbG3Lyx\/e0ye1oSlXGS4T3NXsayKslF8tbfA4uhQ4gvEWLU66nUuqtthqZO6531eEIAN\/cMSNuo0z0yhHHkvM0NNpL\/WOufG\/y7jprxyX7wdAqH1x1lrs6uUKEn37mT2rOE9TJR7sL5GBxfi4pjamXXIVmBwqkjIGcHfrLyRnxhkqtq4dA68iP7E0tLZmPS+4xO0qOizrXf8AqXS0ZhIwDATJACRCDGBIAcxKpukEAGEYhhAQwjExhGRCIAOsCLY2JIQRAQwECIwgRCIwGEBDARkQwAMBEEYshgIzuHJvn4\/hM3VSzPHgbOjh01Z8TS8d4LU7zvEJdWIG\/NdsAfwgDA8gMSunsaMbM8m64PwxaKebnBJ9fyie5ynLJmXL4Q\/L5wIorr11o0WqP7KIWPr6fE7QHyzyfi3EalaoalRiWJ+Cjoq+Qjex3jE17DPOI6p4Oo7BdoKlOutrVdjSfwpk57txyAPRTjGPPHrIeTFbDK6o8nogqszMrsxxy93vnFaOiL6lFBLX6lw6et4Kr6k7KEp6QCSG3KnTg+yRyOcbyyipHGdzQWFiajnH1MPqAddWNB0nPtY8\/wAYzrKWEbZrNaSoicgMfHzPznbTS6bEUdbH0lMvLcWap5wgjAMBEiEGAEjEGIDlxKxvBEADGIYQExhGJjARkR1ECLY+IyOQiMGNiBEYCMBgIiLGEYgiMRICDAQYxBgJkgBsrBlAOSBymPa8zbN+qOK4ryQOJXlNFDMw0hsnG59wkEdopswv17V0d\/8ARK30fVp73fTnOOenTnO3OG2cHT0Dxky1vadVEZG21DIOxHoRA54aNN29vQLdaSkZeoM\/wrv\/AD0xpDgjzxabMRpBOSQMdSBkge4RNotKLAKTY1AZG24IPM4GcciTtiLqQ+iXgUO7JUDDZ1YMPMMp2z8REyceMM9nt7lXKVFI0vTVvmMj8JIoOONjZPR0lQ700ZvZV3VWbpsDuZHJJUzazgwkoik7oVCbg42A+EZGSfeLeOpUYIJzJReGmQlHMWjEm4eVDARICJEAYwJAQYgOXErG8EQAMZEYQBjCMQwjIlqQIseMgEiAEjEMICGAgRHEYEjEEQIjYgBMQEGMRMQEbKxRSDkA8pj2bSZ6Gt\/8cX5I0vbCngUcDC5fPv8ADj7syKLFXebu44jWXgpoh6g\/wFRtIFLutHcvtq069eD3nvAGobicX7Roxb6MHIdibhqhbUNgyAnoTv8Afy+6dclGzg1v6S7j\/E06K7KtANt1Ls2fuUSLbOlEV05Oi4H2KfiNpb3VGvTAemlGurFlYGkBTdE0qQNegMT1yNpWdii8M0OhyWUbviX6M3NOittUpLXSmQzMCtPWxJ1qApJKguq55Bs9JBW7vJJ1vCwedduOFCzajZ60ZgGrNpB2DYVAzHdm8Dsdh7funat9W5ysXTsd3+jaqtahasRulJ095psUB+WDOudijOOLH8wca7X9zc3NDuqbCpUNLx5JOmmFK7bafCxwfrHzjUUdE33dxuaV9TuLS3qlSH0U9judxht+u4zDhnC5rLRjXdNQuwAOZNcldvZmIJuHlAwEQRCLaCZ59JGTwThHJbUpDGwkVJ5JyisGPOhwJGBywlU3hhAAxiGEBDCMQ6xkWWLAgxxAQ4jIshWMWQiABEYhhAiNGIOICZICGgIggAYyI\/60pUBmqxAOwABJOPQe+Zepjixm\/o82VLHdsDiPELStTVTUUgkHqCPXcbH3zii1GMka+57KPUcOt44Tufo+wJJoltXdghsacknHL0kWdFe0sGyWzoWdBcEKisCWJ3JPU+ZOI0cupyZ5\/wBuOJU7mutWirDSndknm4BJB09MZPrvIyXeWtO8LpZsv0Y9uBw+q9OtqNpVIL6RlqbgYFQDqMbEcyAMcsHhZDq3Rdrn07M9V41+krhdGgalO5p16hXwU6RyxONtW3gHq2PidpXjXJs7ymksnz9xbiNW5uKteoc1ajljjkOgUegAAHoJbSwsIqt5fUzu+wPaS3pCjbt+ydAVBY+CozMSfF0JLHY\/AzotlgqWxk5daN5xzs0lau9dK1RNbFyuhG0MRglWPnv8zJJkFel3fUzeF24SmlJdWikqopY5ZiB7TERHGyXU233ll83sj4ztRHqmkVdRPoplLyMabB5okADEIam+DE1kcZdJY9bIwBEok5WZ4KpM5EgBy4lU3giABjEPE5JHanS2XZcVsuW9kve2EQy\/A6+r6dbSuXwi2vnsENDrxzsHqPpP+man5cS+T5+DLFMmUJRcXh8jgwIsIMZFosVoyAYAHEZEYQEERiGgIMBEgIIjEMICNZxO1WozEnHdW71jtnPjRFGPVmG8oaxrqRu9kp9En3fz7mklY0zoOzXE9C1VqHFJENXUf3dwMfHOw8\/fIs5WR7zke0fHXuapJJCDIRc+yPP+I9TDgnCGEabUPMRHTDKK1IHdSM\/zkXHwOkZvhmOm5wMesglk7PC3Zl0UVRzGfOdEsFecnIdsHbaNoSyjuOwvaQ4+iV2ywB7pieYA\/wC2T5+Xpt0EittjldXn8y+J2lquEyeuWkiszDqvqYn5S\/o4f1GV2nbsq173+wsvGQQRCDGBICDEBIwDADlhKpvBgA6KScCKTwWdHp\/TTfV7KWZPy8vN8IzESluq95q32ZUGccwNzv6RJNblq7UV3PoimkuI4WF\/nze7FoqjHSSVO+MBceg5c4l1NZyWbZaSi16f0SbW3U+948sYFFBskeXo35SUZcplPV6SPTC2pdPVnK3eGn3bZ38xnpY3AbGNzggZ8xtsP\/sWen3E3F6uDhJP0kVtLHtY5i\/cuHz9BROpisYRkRhGRGEBDAwIlixiYYxBgRCIAEwEECMQHYAFicAdYm0lljjFyaS5Nf3pJquQFpPQe3JOdtw6thck4dFzjln0OM67qs\/Olsjf0ThQ\/Qyf5n8s+AvZjs695U06glMbsxxkjyRf3j68h9xo6i9Ux6sGrp6vSz6c8c+JT+lDubepSsrU4prSD1FByS+TguerY3+I9Jx0dk7IuUvHY66umEJpR8Nz0js3wa3oWtFKdJN6SMzFQWdioJZj1P8ALlOM5NvctQgox2Nn9Hp\/UT7IkcsnhE+j0\/qJ9kQywwifRqf1E+yIZYYRPo9P6ifZEMsMIFSzpMCrUqZBGCCikEeoIhlhhHgfbSwShxC4pUMqqVFZMH2dSq+AemC23uEv1vqimZ9mIzaOx7OdovpVAKcCsgC1B5+TAeR+4ztVB2SwjN1co0JzfHcbMTZjFRWEeVnY5ycpcsOIyBIxEgBbRQHnIyeCcIp8i1FwSI4vKIySTBGRJARy0qm+EQAb\/j+\/ui\/qLr\/Jolj+qX0il+7yO1Y4GRlgRg75x5Hz5DEjZJxWxf7F0VeutlG7P5VlYeGUVeIhNIdqYydI1Abny9ZX9L0rB6jU9k6OdnXY3l+a+xk072pq5jcgHaSU3kjq+yavV2otrpTa49++xk3FTP72QQM4JAPnlenulnpysHgvWJQsjZF8Ye32KVjg8xQtfWq9TZFcZf13HWTKTGjIjiAmNAQwjIsYCBFsMYiQAYQEHMBLc5rhnEqtxcGnVGEGo4G2MbYJ8\/X5Y5zPjOV01GXBu20w0tLnXztudMoAGAAByA6e6aOFwYLbby+Tme1HGdOaFI4P75G2P9I\/H5ecoaqxP8iNrs7TyX\/LLv4ORY5yTzOSZTNg+juDNm1tz529E\/NFmbLlmrHhGZIkjM4fZ94SSfCPLmTJxjkTeDIveHKqlkztuQd9o5Q22EmaucyRIAeDfpAOeKXh\/wDIo+VNBNCn2EZt\/ts0dlePQqrXp8xzHRl6qfQ\/lOsZuEupFeyqN1brnwz07h16lektWmfCw+IPVT6ibNdinHqR4\/UUSoscJGUJI4BxGMECIREBIwDACQEcqJVN8IgA6\/l\/f3yPEi8l6TR4XMJZ+Elj9UWXA8CnHXGRyOB18j\/x8edpvf6YX55vHct+7n9Tmu0gGq1ymr9uCdicLtkH05fKUruUeg1+OqG3eb6n7S5+sP5zuuS3qf8Apn7n+hluunYnbmD0I8xLrltk+VVaeU7o1Lva+Xj8gLCCxFIettVuonNcNvHu7hxJlMcQEMIyIwgIcRkWODAiyGMCCAgwEERiZi39HlUXZl3O3Mefrj54LDrK98NuuPKLukuWXVP2ZbGRaXC1EV1Ox+OPMfAzrCanHqRVvqdU3CXcec8TVhWqauet8+\/UZlTWJPJ6ilpwWDHpuVIYYyCDuARtvuDsZA6n0TwCuXs7WocZa2oOccsmmpOJnT9pmrX7C9xnyBMy7IggoXK5ZSCPiCM\/EScfATMm8cLqOs6mQrpBJHlnPuElLYSNXORIkAPB+292xvb2lhdP0xqmceLIUJjPQYHKaFS\/IjMu9tmm4fw+tcVFoW9N6lVshUUZJ239APU7CTbwQhFt7Ho\/YrsTxWjTqrXtGTLqyg1KRztg+y58hLOk1EIJqTM3tbQX3Si6452eeP3Nre2NWi2ishVsZGcb+4jYzRrthYsxeTzt+mtol02RwzHE6HAMQEjEGAEgIkAOVEqm+EQAdWwcj84pLKLGl1Don1Yyns14p\/zbzHqVCwwcYznYKP5DfnIOKls9ma2n1dugk7qkp1vv4x5PHDXyfcClRBOMnONtxufKRdPmXYf6osk8ejWe7f8AwXrZgHVk4G+CrffgfjBVpb5Olnbl90XCFay1jiTe\/kl+4XrbaBjTnO2rB+DGdEup57jDsmtHW6011vbbOIp8rd+0\/oKDOpi4GEZEZYCY8YhlMCLHzAiERiCIxDCAgwEEQEGMRzdS\/FpXemql6TkPhf3CeePy9BKPpPQzcVun9Db9XerpjKW0lt7\/AANpxDhNC4Gph4sbOvP4+fxlidULdzOq1V2nfT3eDOT4n2drUssBrT6y8x716SlZp5w35Rs6fX1W7cPwZ7N2Qu0PD7PxDa2oqfeqhT94mRZF9TPRVNdCNx36fWX5zn0snknfp9ZfnDpYZJ36fWX5w6WGSd+n1l+cOlhkBuE+sIdLDJ8\/8fL1+I3fcI1Qm6rEBRnbWdyeQHrymjVFtJJZMu+UYNym8I9L\/QpwCrQuq9asU1m20BRuVBdCct8BsPnJ6iiVcE5HLQa6q+2UK1ws5PYpTNY5ftndCmKZanTqIXwysM5GN9Lc1PqJZ0UHK2STw8GT2xdGqmLlFSTlhp+GHx4M43itqKVepTUkqCMZ54YBhn1wRNmmxzrUmeR1lCovlWuFx7jFnYqhgMkCLJACQA5WVTfDAAiADCDSfJ0qvspfVXJp\/wA58Q\/3yi6fNnf17O8qoN\/\/ADj9Gv0CIdC7yMtfb0uMMQT\/ALVj68\/UYToURxAQwgRYwjIjCMQwgRY6mAmNGIaMiEQEMBAiECAGp4xdkju1WqN\/EdDAEeQONxKmosfspP5Gt2fp4p+kk15LKNNn0b7LflKRs5XivmZfDrhkcMFqFeTBUY5HuxznaqcoyzhlTWVwtrabWe5to6IjWgwXXO\/VWHwPKaWOqPevoedX\/HPdJ\/VFdva1aYIpXVyoJyRmmwz5gMhxKstDXJ5bZo19tXVrpjGOPj9yw\/S+l9X+xQ\/onP8ADq\/FnZdv3f2r6gxef5+t\/t0f6Ifh0PEf+4Lf7F9Sabz\/AD9b\/bo\/0Q\/DoeIv9wW\/2L5sYLd\/56v9ih\/RD8Oh4sT\/ANQXf2L6kelcMCrXt0QRg47lT81p5Ekuz6\/FkH29e\/6V9fuLw\/hyURhGfHkdOPkAJZrpVfDMzU6uWo3kl8P\/AE6Hs1xyhaXCm4dESqO5BZgoDEgg5PTbfyzK3aCTr5\/yaHYU5R1DSWU1h+R6D+ubf\/8Aaj\/u0\/6pidXkeywclx\/tLY1qxogitUpEMVR10ZxjDkZJAyM492Zd0NU5NyUks7eeDE7Y1NcOmM4N4eV\/a3jv7znLq4ao7VHOWZix+Pl6TahBQiorg8jdbK2bnLllcmcgiABgBIhAjA5WVEegZIxDCABjEEQEMDAiMIwGzGRGEBMcRkWOIyIRATGECIwjExhAiOIyLDAWAiABjEGBEMYEEBBjAIiEGAgiAgxgSAi6nbVGAK06hB5EKSDuBsQPMgfESLnFbNo6Rpsksxi38BvoVU7d1UOemhjn2fT\/AFr9oeci7K+9olGi5cRl8n\/O9fMxW4WgwTbqMkAE0xuSARg432IPxESVb8PoNy1C5cvqZ1twqqW7taLKRuQUKhRg4LbbZwYnbXFZyiUdNqLJ9Li8+eREs6pOBSqk8sBGzyDeXkQfcQZP0kPFHJae1vCi\/k\/f+m5ZU4dWXRmm51gFcKTnIJxy54B29IldB534JT0l0en8r34\/nj5Fa21QtoCOXGcqFOoY55XnJOcUs52OSqscuhRefDG4y2VY6cUqp1Z0+BvFjc423kXbDxXzJLTXPGIPfjZi1reom1RHXPLUpXONtsxxnGXsvJGyqde04te9YK5M5nJiVD0IRGIOYCCIAMIyIYCHEYhhGRYwgJjLGRHEZEYQEMDAiMIxDCMiMIEWNiAgwEGMBoESQAIjEGMQREBICCICDGAYCZnWfFq1JO7Qrp1M24ycsunn8AfeMzhZp4Tl1P8An8\/Qt0a62mHRDGN\/r\/M+8f8AXNfQqZXCikBtv+zOV3+C589K+UXq0Mt+\/wCpL8Ru6VHbbH04\/bPuRK3GazFSdGVYsvh9kllbI92kAem0I6aEU0s7in2hbNpyxtutuN0\/2x7iz9e1slsIdwRnUdJw4yuW22qN6byPqkMY\/nd9jp+KXZzt9dueN\/Ni\/rmrjSVpkadLAqfGNCp4sHyReWOUl6tDOdyH4jbjpaWO\/bnZLf5LgicYqgKAtPwhR7J3ChwoJz01sQRg5g9NBtvcF2jbFJJLby8M4+WWK3FHLu7LTJcFXyp8QOjY75\/cB9+Y\/QRUUk3tx9fuQeusc3NpZfPmttufIZuLVSmjCY0FDtuR3bUhnforED8Ylp4Zzv8Ax5G+0Lejo2xjH0x9Eym9v6lXGvGzO2wxu2M\/yEnXTGv2TlqNVZfjr7s\/X\/wxp1Kp\/9k=',width=400,height=400)","87ea0d02":"df = pd.read_excel('\/kaggle\/input\/cyber-crime-statewise\/datafile.xls')\ndf.head()","b6597e23":"# checking dataset\n\nprint (\"Rows     : \" ,df.shape[0])\nprint (\"Columns  : \" ,df.shape[1])\nprint (\"\\nFeatures : \\n\" ,df.columns.tolist())\nprint (\"\\nMissing values :  \", df.isnull().sum().values.sum())\nprint (\"\\nUnique values :  \\n\",df.nunique())","b696741f":"corr = df.corr()\ncorr.style.background_gradient(cmap = 'coolwarm')","15f9b991":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import Normalizer\nfrom sklearn.model_selection import train_test_split\n\n\nfrom scipy.stats import skew","5b7bb0db":"# categorical features\ncategorical_feat = [feature for feature in df.columns if df[feature].dtypes=='O']\nprint('Total categorical features: ', len(categorical_feat))\nprint('\\n',categorical_feat)","f07f161a":"#fill in mean for floats\nfor c in df.columns:\n    if df[c].dtype=='float16' or  df[c].dtype=='float32' or  df[c].dtype=='float64':\n        df[c].fillna(df[c].mean())\n\n#fill in -999 for categoricals\ndf = df.fillna(-999)\n# Label Encoding\nfor f in df.columns:\n    if df[f].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(df[f].values))\n        df[f] = lbl.transform(list(df[f].values))\n        \nprint('Labelling done.')","6249998a":"from sklearn.model_selection import train_test_split\n# Hot-Encode Categorical features\ndf = pd.get_dummies(df) \n\n# Splitting dataset back into X and test data\nX = df[:len(df)]\ntest = df[len(df):]\n\nX.shape","21631106":"df.columns.tolist()","28834444":"from category_encoders import OneHotEncoder\nfrom sklearn.linear_model import LinearRegression, Ridge\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, MaxAbsScaler\n\ncols_selected = ['Rate of Total Cyber Crimes (2018)++']\nohe = OneHotEncoder(cols=cols_selected, use_cat_names=True)\ndf_t = ohe.fit_transform(df[cols_selected+[2018]])\n\n#scaler = MaxAbsScaler()\nX = df_t.iloc[:,:-1]\ny = df_t.iloc[:, -1].fillna(df_t.iloc[:, -1].mean()) \/ df_t.iloc[:, -1].max()\n\nmdl = Ridge(alpha=0.1)\nmdl.fit(X,y)\n\npd.Series(mdl.coef_, index=X.columns).sort_values().head(10).plot.barh()","68260d6c":"ax = df.groupby('Rate of Total Cyber Crimes (2018)++')[2018].mean().plot(kind='barh', figsize=(12,8),\n                                                           title='Mean estimated Rate of Cyber Crimes 2018')\nplt.xlabel('Mean estimated Cyber Crimes 2018 ++')\nplt.ylabel('2018')\nplt.show()","aa33ba1e":"ax = df.groupby('Rate of Total Cyber Crimes (2018)++')[2017].min().sort_values(ascending=True).plot(kind='barh', figsize=(12,8), color='r',\n                                                                                  title='Min.estimated Cyber Crimes 2017')\nplt.xlabel('Min.estimated Cyber Crimes')\nplt.ylabel('2017')\nplt.show()","adde9aec":"ax = df.groupby('Percentage Share of State\/UT (2018)')[2018].max().sort_values(ascending=True).plot(kind='barh', figsize=(12,8), color='g',\n                                                                                   title='Max. Percentage Share of State\/UT')\nplt.xlabel('Max. Percentage Share of State\/UT 2018 ')\nplt.ylabel('2018')\nplt.show()","9e6b2fe6":"ax = df.groupby('Rate of Total Cyber Crimes (2018)++')[2017, 2018].sum().plot(kind='bar', rot=45, figsize=(12,6), logy=True,\n                                                                 title='Rate of Total Cyber Crimes')\nplt.xlabel('Rate of Total Cyber Crimes')\nplt.ylabel('2017 ++')\n\nplt.show()","947036ac":"ax = df.groupby('Mid-Year Projected Population (in Lakhs) (2018)+')[2016, 2017].sum().plot(kind='bar', rot=45, figsize=(12,6), logy=True,\n                                                                 title='Mid-Year Projected Population, in Lakhs')\nplt.xlabel('Mid-Year Projected Population (in Lakhs) 2018 +')\nplt.ylabel('2016++')\n\nplt.show()","6113e3bd":"ax = df.groupby(2018)['Rate of Total Cyber Crimes (2018)++', 'Mid-Year Projected Population (in Lakhs) (2018)+'].sum().plot(kind='bar', rot=45, figsize=(12,6), logy=True,\n                                                                 title='Rate of Cyber Crimes 2018')\nplt.xlabel('2018')\nplt.ylabel('Rate of Cyber Crimes & Mid-Year Projected Population')\n\nplt.show()","11a2ed1a":"ax = df.groupby(2018)['Rate of Total Cyber Crimes (2018)++', 'Mid-Year Projected Population (in Lakhs) (2018)+'].sum().plot(kind='barh', figsize=(14,8),\n                                                                 title='', logx=True, linewidth=3)\nplt.xlabel('2018')\nplt.ylabel('Rate of Cyber Crimes & Mid-Year Projected Population')\nplt.show()","fa2ff488":"ax = df.groupby('Rate of Total Cyber Crimes (2018)++')['State\/UT'].mean().sort_values(ascending=True).plot(kind='barh', figsize=(20,6), color='g',\n                                                                                    title='Rate of Cyber Crimes 2018')\nplt.xlabel('Rate of cyber Crimes 2018')\nplt.ylabel('States')\nplt.show()","42b3205b":"fig=sns.lmplot(x='State\/UT', y=\"Rate of Total Cyber Crimes (2018)++\",data=df)","1e67f007":"import matplotlib.ticker as ticker\nax = sns.distplot(df['Rate of Total Cyber Crimes (2018)++'])\nplt.xticks(rotation=45)\nax.xaxis.set_major_locator(ticker.MultipleLocator(2))\nfigsize=(10, 4)","eb37fd50":"from scipy.stats import norm, skew #for some statistics\nimport seaborn as sb\nfrom scipy import stats #qqplot\n#Lets check the ditribution of the target variable (Placement?)\nfrom matplotlib import rcParams\n# figure size in inches\nrcParams['figure.figsize'] = 4,2\n\nsb.distplot(df['Rate of Total Cyber Crimes (2018)++'], fit=norm)\n\n#Get the QQ-plot\nfig = plt.figure()\nres = stats.probplot(df['Rate of Total Cyber Crimes (2018)++'], plot=plt)\nplt.show()","a72e6d37":"plt.style.use('fivethirtyeight')\ndf.plot(subplots=True, figsize=(4, 4), sharex=False, sharey=False)\nplt.show()","ef7f17fa":"df = df.rename(columns={'State\/UT':'state'})","0d69f31a":"plt.figure(figsize=(14,8))\nsns.barplot(data=df,x='state',y='Rate of Total Cyber Crimes (2018)++',color=sns.color_palette('Set3')[0])\nplt.title('Number of Test Centers')\nplt.xlabel('States')\nplt.ylabel('Number of Test Centers')\nplt.xticks(rotation=45)\nfor i in range(df.shape[0]):\n    count = df.iloc[i]['Rate of Total Cyber Crimes (2018)++']\n    plt.text(i,count+1,df.iloc[i]['Rate of Total Cyber Crimes (2018)++'],ha='center')\n    \nfrom IPython.display import display, Markdown\ndisplay(Markdown(\"Most Number of cases of Cyber Crimes **20-50**\"))","888110ae":"fig, ax = plt.subplots(1,3, figsize = (20,6), sharex=True)\nsns.countplot(x='Rate of Total Cyber Crimes (2018)++',data=df, palette=\"copper\", ax=ax[0])\nsns.countplot(x='Rate of Total Cyber Crimes (2018)++',hue='state', palette=\"ocean\", data=df,ax=ax[1])\nsns.countplot(x='Rate of Total Cyber Crimes (2018)++',hue='Mid-Year Projected Population (in Lakhs) (2018)+', palette=\"flag\", data=df,ax=ax[2])\nax[0].title.set_text('Cyber Crimes')\nax[1].title.set_text('Cyber Crimes 2018')\nax[2].title.set_text('Cyber Crimes & Mid-Year Projected Population 2018')\nplt.xticks(rotation=45)\nplt.show()","92b8b733":"#Cybercrime, or computer-oriented crime\n\nIt's a crime that involves a computer and a network. The computer may have been used in the commission of a crime, or it may be the target. Cybercrime may threaten a person or a nation's security and financial health. https:\/\/en.wikipedia.org\/wiki\/Cybercrime","f073a349":"Das War's Kaggle Notebook Runner: Mar\u00edlia Prata  @mpwolke","f1edae5a":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcQ6uXiWF_7H-XfvjfxvEQONdUiAK7t-Oy8aoQ&usqp=CAU)yojana360.com","d83c9ad6":"#ATTENTION  years columns receive no ticks.","6c1ccda9":"educba.com"}}