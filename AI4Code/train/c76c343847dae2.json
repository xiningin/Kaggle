{"cell_type":{"a1d266e9":"code","63cc5425":"code","f8882de5":"code","6cd51a03":"code","c0b287dd":"code","b5546917":"code","cf163f29":"code","1ce5bc2f":"code","f215040e":"code","8355f4db":"code","6739483f":"code","099f2258":"code","0b3491e2":"code","3760a848":"code","a03cadba":"code","07214305":"code","00019e96":"code","2f5df254":"code","d169f7ba":"code","4ea456f8":"code","932ce53d":"code","9ab6437a":"code","7e8cc0b3":"code","55bb6cd9":"code","3f17825c":"code","7c80f775":"code","33bf8110":"code","28e42c1d":"code","847c9c82":"code","131471aa":"code","6c483df9":"code","be0f6bfb":"code","ee6c5e8f":"code","6d21e019":"code","68e0324f":"code","d323590f":"code","3501e3ca":"code","07dbb7a7":"code","bf4c88dd":"code","ee228e04":"code","87fc36e1":"code","9065a567":"code","d86e90a8":"code","48119ce9":"markdown","666dce1e":"markdown","b5de6239":"markdown"},"source":{"a1d266e9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","63cc5425":"from IPython.display import display, Image\nimport os\nimport PIL.Image\nimport cv2\nimport matplotlib.pyplot as plt","f8882de5":"dig_mnist = pd.read_csv(\"\/kaggle\/input\/Kannada-MNIST\/Dig-MNIST.csv\")\nprint(dig_mnist.shape)\ndig_mnist.head()","6cd51a03":"test = pd.read_csv(\"\/kaggle\/input\/Kannada-MNIST\/test.csv\")\nprint(test.shape)\ntest.head()","c0b287dd":"train = pd.read_csv(\"\/kaggle\/input\/Kannada-MNIST\/train.csv\")\nprint(train.shape)\ntrain.head()","b5546917":"ss = pd.read_csv(\"\/kaggle\/input\/Kannada-MNIST\/sample_submission.csv\")\nprint(ss.shape)\nss.head()","cf163f29":"lbl = train['label'].tolist()\nprint(lbl[:15])","1ce5bc2f":"train.drop(['label'],axis=1,inplace=True)\ntr = train.as_matrix(columns=None)\nprint(tr.shape)","f215040e":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(tr, lbl, test_size=0.20, random_state=42)","8355f4db":"from sklearn.tree import DecisionTreeClassifier \nfrom sklearn.metrics import accuracy_score\nclf = DecisionTreeClassifier()\nclf = clf.fit(X_train,y_train)\nprediction = clf.predict(X_test)\naccscore = accuracy_score(y_test,prediction)\nprint(accscore)","6739483f":"tr = tr.reshape((tr.shape[0],28,28))","099f2258":"%matplotlib inline\nn = np.random.randint(0,tr.shape[0])\nimage = tr[n]\nimgplot = plt.imshow(image,cmap=plt.get_cmap('gray'))","0b3491e2":"from __future__ import print_function\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.utils import np_utils\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau","3760a848":"nb_classes=10\ny = np_utils.to_categorical(lbl, nb_classes).astype(np.float32)\nclass_totals = y.sum(axis=0)\nclass_weight = class_totals.max() \/ class_totals\ny.shape","a03cadba":"X=tr.reshape(tr.shape[0],28,28,1)\nX.shape","07214305":"# An observation code for our dataset\ndatagen_try = ImageDataGenerator(rotation_range=15,\n                             width_shift_range = 0.25,\n                             height_shift_range = 0.25,\n                             shear_range = 25,\n                             zoom_range = 0.4,)\n# fit parameters from data\ndatagen_try.fit(X)\n# configure batch size and retrieve one batch of images\nfor x_batch, y_batch in datagen_try.flow(X, y, batch_size=9):\n    # create a grid of 3x3 images\n    for i in range(0, 9):\n        plt.subplot(330 + 1 + i)\n        plt.imshow(x_batch[i].reshape(28, 28), cmap=plt.get_cmap('gray'))\n    # show the plot\n    plt.show()\n    break","00019e96":"# construct the actual Python generator\nprint(\"[INFO] generating images...\")\ntotal = X.shape[0]\nprint(total,\"is total\")\nfinalX,finalY = [],[]\ni = 0\nfor x_batch, y_batch in datagen_try.flow(X, y, batch_size=1):\n    finalX.append(x_batch)\n    finalY.append(y_batch)\n    i+=1\n    if i==total:\n        break\n    if i%10000==0 and i>999:\n        print(i,\"\/60000 done\")","2f5df254":"finalX = np.array(finalX)\nfinalY = np.array(finalY)","d169f7ba":"finalX = finalX.reshape((60000, 28, 28, 1))","4ea456f8":"finalY = finalY.reshape((60000, 10))","932ce53d":"# from __future__ import print_function\n# from keras.utils import np_utils\n# import keras\n# from keras.models import Sequential\n# from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\n# from keras.optimizers import RMSprop\n# from keras.preprocessing.image import ImageDataGenerator\n# from keras.callbacks import ReduceLROnPlateau","9ab6437a":"# nb_classes=10\n# y = np_utils.to_categorical(lbl, nb_classes).astype(np.float32)\n# class_totals = y.sum(axis=0)\n# class_weight = class_totals.max() \/ class_totals\n# y.shape","7e8cc0b3":"# X=tr.reshape(tr.shape[0],28,28,1)\n# X.shape","55bb6cd9":"model = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = X.shape[1:]))\nmodel.add(Conv2D(filters = 32, kernel_size = (4,4),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.3))\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.3))\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.3))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))\noptimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)\nmodel.summary()","3f17825c":"# validation_split = 0.01\n# model.fit(X, y, batch_size=1000, class_weight=class_weight, epochs=30, verbose=1, validation_split=validation_split)","7c80f775":"validation_split = 0.01\nmodel.fit(finalX, finalY, batch_size=1000, class_weight=class_weight, epochs=80, verbose=1, validation_split=validation_split)","33bf8110":"open('model.json', 'w').write(model.to_json())\nmodel.save_weights('weights.h5')\nprint(\"Model Saved\")","28e42c1d":"%matplotlib inline\nfrom matplotlib import pyplot as plt\nplt.plot(model.model.history.history['loss'],'red')\nplt.plot(model.model.history.history['accuracy'],'blue')\nplt.plot(model.model.history.history['val_loss'],'yellow')\nplt.plot(model.model.history.history['val_accuracy'],'black')\nplt.show()","847c9c82":"print(model.model.history.history)","131471aa":"test.drop(['id'],axis=1,inplace=True)\nY = test.as_matrix(columns=None)\nY.shape","6c483df9":"Y=Y.reshape(test.shape[0],28,28,1)\nY.shape","be0f6bfb":"predict = model.predict(Y)","ee6c5e8f":"predict.shape","6d21e019":"results = np.argmax(predict,axis = 1)\nresults","68e0324f":"Y=Y.reshape(test.shape[0],28,28)","d323590f":"fig, axs = plt.subplots(4, 4,figsize=(15,15))\n\nnum_ims = 4\na,b = 4,4\nfor j in range(a):\n    for k in range(b):\n        ids  = np.random.randint(0,5000)\n        prob = results[ids]\n        image = Y[ids] \n        axs[j,k].imshow(image)\n        axs[j,k].set_title(\"Predicted label :\"+str(prob))\n\n    \nplt.axis('off')\n\n\n# Hide x labels and tick labels for top plots and y ticks for right plots.\nfor ax in axs.flat:\n    ax.label_outer()","3501e3ca":"ss.head()","07dbb7a7":"n = ss.columns[1]","bf4c88dd":"ss.drop(n,axis=1,inplace=True)","ee228e04":"ss.head()","87fc36e1":"ss[n] = results","9065a567":"ss.head()","d86e90a8":"ss.to_csv('submission.csv',index=False)","48119ce9":"**Deep Learning Part**","666dce1e":"**Image Augmentation Using Keras **","b5de6239":"Starting Plotting Loop"}}