{"cell_type":{"5ca08682":"code","f839efa3":"code","f01a852a":"code","89f0fc35":"code","90dda35c":"code","58ccbbab":"code","b0ad4631":"code","2708f146":"code","98e69c66":"code","2475c4f3":"code","fa0cbb57":"code","d73ee102":"code","177c355b":"code","f76fa776":"code","7934cc10":"code","0276c988":"code","ce9ae374":"code","73f0c7bd":"code","35e8509f":"code","589eaee4":"code","7b7bda1b":"code","b7b781b4":"code","e0558fb0":"code","dd6db616":"code","52449dd6":"code","aa24b23d":"code","2da2f0f1":"code","10f2626a":"code","945143af":"code","1b91ef86":"code","77eef073":"code","8e524d9a":"code","ccfa76f6":"code","62641d3f":"code","8d045f74":"code","973ec872":"code","75e9f203":"code","71ac4c09":"code","b7833d4a":"code","88558365":"code","2d25ef3a":"code","ad43f984":"code","b8bf5b7b":"code","87d57653":"code","ae2facc6":"code","3bbed374":"code","8384fe9f":"code","e8468f4e":"code","ffb12c95":"code","68fb20a3":"code","5ad272ec":"code","d3486d43":"code","8e8c1b23":"code","2f3ffc1d":"code","8d0fae83":"code","7afcf069":"code","17fbaba1":"code","2481a5ab":"code","c90a7bf1":"code","c54a9f27":"code","892f2452":"code","92592c79":"code","4196fdc9":"code","39c0fd80":"code","72ad4825":"markdown","cbe77a36":"markdown","2153e206":"markdown","68078ed1":"markdown","910dafed":"markdown","bdbc655a":"markdown","96447ea4":"markdown","20f7faed":"markdown","e36ba9d2":"markdown","6eca9841":"markdown","9e9ad237":"markdown","caa666f6":"markdown","3b7fbce4":"markdown","b8579088":"markdown","01a79477":"markdown","9f5c662f":"markdown","b6080eaa":"markdown","8e1f9cbc":"markdown","b5644210":"markdown","a8209861":"markdown","2252d2d6":"markdown","45363f9a":"markdown","6aacc809":"markdown","16276036":"markdown","0b000af9":"markdown","207f6c90":"markdown","9f38d574":"markdown","b55e1c29":"markdown","58f57706":"markdown","0f4acdf1":"markdown","4432ee34":"markdown","5b8fde44":"markdown","edf02b8a":"markdown","bb2b75c1":"markdown","10af364f":"markdown","e535bf59":"markdown","a96635a8":"markdown","37f51c29":"markdown","d5b7d085":"markdown","5d60a867":"markdown","d91b728c":"markdown"},"source":{"5ca08682":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Some visualization libraries\nfrom matplotlib import pyplot as plt\n\nimport seaborn as sns\ncolor = sns.color_palette()\nsns.set_style('darkgrid')\n\nfrom scipy.stats import norm, skew\nfrom scipy import stats\n\nfrom sklearn.preprocessing import StandardScaler\n\n## Some other snippit of codes to get the setting right \n## This is so that the chart created by matplotlib can be shown in the jupyter notebook. \n%matplotlib inline \n%config InlineBackend.figure_format = 'retina' ## This is preferable for retina display. \n\nimport warnings ## importing warnings library. \nwarnings.filterwarnings('ignore') ## Ignore warning\n\n#def ignore_warn(*args, **kwargs):\n#    pass\n#warnings.warn = ignore_warn #ignore annoying warning (from sklearn and seaborn)\n\npd.set_option('display.float_format', lambda x: '{:.3f}'.format(x)) #Limiting floats output to 3 decimal points\n\nimport os ## imporing os\nprint(os.listdir(\"..\/input\/\"))","f839efa3":"## Importing the datasets\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","f01a852a":"train.head()","89f0fc35":"print (\"The shape of the train data is (row, column):\"+ str(train.shape))\nprint (train.info())\nprint (\"The shape of the test data is (row, column):\"+ str(test.shape))\nprint (test.info())","90dda35c":"#correlation matrix\ncorrmat = train.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True);","58ccbbab":"#saleprice correlation matrix\nk = 10 #number of variables for heatmap\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(train[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","b0ad4631":"#scatterplot\nsns.set()\ncols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\nsns.pairplot(train[cols], size = 2.5)\nplt.show();","2708f146":"print(train.shape,test.shape)","98e69c66":"#bivariate analysis saleprice\/grlivarea\nvar = 'GrLivArea'\ndata = pd.concat([train['SalePrice'], train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","2475c4f3":"#Deleting outliers\ntrain = train.drop(train[(train['GrLivArea']>4000) & (train['SalePrice']<300000)].index)\n\n#bivariate analysis saleprice\/grlivarea\nvar = 'GrLivArea'\ndata = pd.concat([train['SalePrice'], train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","fa0cbb57":"#bivariate analysis saleprice\/grlivarea\nvar = 'TotalBsmtSF'\ndata = pd.concat([train['SalePrice'], train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","d73ee102":"sns.distplot(train['SalePrice'] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(train['SalePrice'], plot=plt)\nplt.show()","177c355b":"#We use the numpy fuction log1p which  applies log(1+x) to all elements of the column\ntrain[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])\n\n#another way\n#train['SalePrice'] = np.log(train['SalePrice'])\n\n#Check the new distribution \nsns.distplot(train['SalePrice'] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(train['SalePrice'], plot=plt)\nplt.show()","f76fa776":"#histogram and normal probability plot\nsns.distplot(train['GrLivArea'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(train['GrLivArea'], plot=plt)","7934cc10":"#data transformation\ntrain['GrLivArea'] = np.log(train['GrLivArea'])","0276c988":"#transformed histogram and normal probability plot\nsns.distplot(train['GrLivArea'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(train['GrLivArea'], plot=plt)","ce9ae374":"#histogram and normal probability plot\nsns.distplot(train['TotalBsmtSF'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(train['TotalBsmtSF'], plot=plt)","73f0c7bd":"#create column for new variable (one is enough because it's a binary categorical feature)\n#if area>0 it gets 1, for area==0 it gets 0\ntrain['HasBsmt'] = pd.Series(len(train['TotalBsmtSF']), index=train.index)\ntrain['HasBsmt'] = 0 \ntrain.loc[train['TotalBsmtSF']>0,'HasBsmt'] = 1\n\n#transform data\ntrain.loc[train['HasBsmt']==1,'TotalBsmtSF'] = np.log(train['TotalBsmtSF'])\n\ntrain.drop(['HasBsmt'], axis=1, inplace=True)\n\n#histogram and normal probability plot\nsns.distplot(train[train['TotalBsmtSF']>0]['TotalBsmtSF'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(train[train['TotalBsmtSF']>0]['TotalBsmtSF'], plot=plt)","35e8509f":"#scatter plot\nplt.scatter(train['GrLivArea'], train['SalePrice']);","589eaee4":"#scatter plot\nplt.scatter(train[train['TotalBsmtSF']>0]['TotalBsmtSF'], train[train['TotalBsmtSF']>0]['SalePrice']);","7b7bda1b":"#check the numbers of samples and features\nprint(\"The train data size before dropping Id feature is : {} \".format(train.shape))\nprint(\"The test data size before dropping Id feature is : {} \".format(test.shape))\n\n#Save the 'Id' column\ntrain_ID = train['Id']\ntest_ID = test['Id']\n\n#Now drop the  'Id' colum since it's unnecessary for  the prediction process.\ntrain.drop(\"Id\", axis = 1, inplace = True)\ntest.drop(\"Id\", axis = 1, inplace = True)\n\n#check again the data size after dropping the 'Id' variable\nprint(\"\\nThe train data size after dropping Id feature is : {} \".format(train.shape)) \nprint(\"The test data size after dropping Id feature is : {} \".format(test.shape))","b7b781b4":"print(train.shape,test.shape)","e0558fb0":"#Delete all columns that have missing data... Very radical...\n#train = train.drop((missing_data[missing_data['Total'] > 1]).index,1)\n#train = train.drop(train.loc[train['Electrical'].isnull()].index)\n#train.isnull().sum().max() #just checking that there's no missing data missing...","dd6db616":"ntrain = train.shape[0]\nntest = test.shape[0]\ny_train = train.SalePrice.values\nall_data = pd.concat((train, test)).reset_index(drop=True)\nall_data.drop(['SalePrice'], axis=1, inplace=True)\nprint(\"all_data size is : {}\".format(all_data.shape),train.shape,test.shape)","52449dd6":"all_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)[:30]\nmissing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\nmissing_data.head(20)","aa24b23d":"f, ax = plt.subplots(figsize=(15, 12))\nplt.xticks(rotation='90')\nsns.barplot(x=all_data_na.index, y=all_data_na)\nplt.xlabel('Features', fontsize=15)\nplt.ylabel('Percent of missing values', fontsize=15)\nplt.title('Percent missing data by feature', fontsize=15)","2da2f0f1":"all_data[\"PoolQC\"] = all_data[\"PoolQC\"].fillna(\"None\")\nall_data[\"MiscFeature\"] = all_data[\"MiscFeature\"].fillna(\"None\")\nall_data[\"Alley\"] = all_data[\"Alley\"].fillna(\"None\")\nall_data[\"Fence\"] = all_data[\"Fence\"].fillna(\"None\")\nall_data[\"FireplaceQu\"] = all_data[\"FireplaceQu\"].fillna(\"None\")\n\n#- **LotFrontage** : Since the area of each street connected to the house property most likely \n#have a similar area to other houses in its neighborhood , \n#we can **fill in missing values by the median LotFrontage of the neighborhood**.\n#\n#Group by neighborhood and fill in missing value by the median LotFrontage of all the neighborhood\nall_data[\"LotFrontage\"] = all_data.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(lambda x: x.fillna(x.median()))\n\n#- **GarageType, GarageFinish, GarageQual and GarageCond** : Replacing missing data with None\nfor col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond'):\n    all_data[col] = all_data[col].fillna('None')\n    \n    \n#- **GarageYrBlt, GarageArea and GarageCars** : Replacing missing data with 0 (Since No garage = no cars in such garage.)\nfor col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n    all_data[col] = all_data[col].fillna(0)\n\n#- **BsmtFinSF1, BsmtFinSF2, BsmtUnfSF, TotalBsmtSF, BsmtFullBath and BsmtHalfBath** : missing values are likely zero for having no basement\nfor col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    all_data[col] = all_data[col].fillna(0)\n\n#- **BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1 and BsmtFinType2** : For all these categorical basement-related features, NaN means that there is no  basement.\nfor col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    all_data[col] = all_data[col].fillna('None')\n\n#**MasVnrArea and MasVnrType** : NA most likely means no masonry veneer for these houses. We can fill 0 for the area and None for the type. \n\nall_data[\"MasVnrType\"] = all_data[\"MasVnrType\"].fillna(\"None\")\nall_data[\"MasVnrArea\"] = all_data[\"MasVnrArea\"].fillna(0)\n\n#- **MSZoning (The general zoning classification)** :  'RL' is by far  the most common value.  So we can fill in missing values with 'RL'\nall_data['MSZoning'] = all_data['MSZoning'].fillna(all_data['MSZoning'].mode()[0])\n\n#- **Utilities** : For this categorical feature all records are \"AllPub\", except for one \"NoSeWa\" \n#and 2 NA . Since the house with 'NoSewa' is in the training set, **this feature won't help in predictive modelling**. We can then safely  remove it.\nall_data = all_data.drop(['Utilities'], axis=1)\n\n#- **Functional** : data description says NA means typical\nall_data[\"Functional\"] = all_data[\"Functional\"].fillna(\"Typ\")\n\n#- **Electrical** : It has one NA value. Since this feature has mostly 'SBrkr', we can set that for the missing value.\nall_data['Electrical'] = all_data['Electrical'].fillna(all_data['Electrical'].mode()[0])\n\n#- **KitchenQual**: Only one NA value, and same as Electrical, we set 'TA' (which is the most frequent)  for the missing value in KitchenQual.\nall_data['KitchenQual'] = all_data['KitchenQual'].fillna(all_data['KitchenQual'].mode()[0])\n\n# **Exterior1st and Exterior2nd** : Again Both Exterior 1 & 2 have only one missing value. We will just substitute in the most common string\nall_data['Exterior1st'] = all_data['Exterior1st'].fillna(all_data['Exterior1st'].mode()[0])\nall_data['Exterior2nd'] = all_data['Exterior2nd'].fillna(all_data['Exterior2nd'].mode()[0])\n\n#- **SaleType** : Fill in again with most frequent which is \"WD\"\nall_data['SaleType'] = all_data['SaleType'].fillna(all_data['SaleType'].mode()[0])\n\n#- **MSSubClass** : Na most likely means No building class. We can replace missing values with None\nall_data['MSSubClass'] = all_data['MSSubClass'].fillna(\"None\")","10f2626a":"#Check remaining missing values if any \nall_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)\nmissing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\nmissing_data.head()","945143af":"#MSSubClass=The building class\nall_data['MSSubClass'] = all_data['MSSubClass'].apply(str)\n\n\n#Changing OverallCond into a categorical variable\nall_data['OverallCond'] = all_data['OverallCond'].astype(str)\n\n\n#Year and month sold are transformed into categorical features.\nall_data['YrSold'] = all_data['YrSold'].astype(str)\nall_data['MoSold'] = all_data['MoSold'].astype(str)","1b91ef86":"all_data.head()","77eef073":"from sklearn.preprocessing import LabelEncoder\ncols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n        'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond', \n        'YrSold', 'MoSold')\n# process columns, apply LabelEncoder to categorical features\nfor c in cols:\n    lbl = LabelEncoder() \n    lbl.fit(list(all_data[c].values)) \n    all_data[c] = lbl.transform(list(all_data[c].values))\n\n# shape        \nprint('Shape all_data: {}'.format(all_data.shape))","8e524d9a":"all_data.head()","ccfa76f6":"all_data['TotalSF'] = all_data['TotalBsmtSF'] + all_data['1stFlrSF'] + all_data['2ndFlrSF']","62641d3f":"numeric_feats = all_data.dtypes[all_data.dtypes != \"object\"].index\n\n# Check the skew of all numerical features\nskewed_feats = all_data[numeric_feats].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nprint(\"\\nSkew in numerical features: \\n\")\nskewness = pd.DataFrame({'Skew' :skewed_feats})\nskewness.head(10)","8d045f74":"skewness = skewness[abs(skewness) > 0.75]\nprint(\"There are {} skewed numerical features to Box Cox transform\".format(skewness.shape[0]))\n\nfrom scipy.special import boxcox1p\nskewed_features = skewness.index\nlam = 0.15\nfor feat in skewed_features:\n    #all_data[feat] += 1\n    all_data[feat] = boxcox1p(all_data[feat], lam)\n    \n#all_data[skewed_features] = np.log1p(all_data[skewed_features])","973ec872":"all_data.head()","75e9f203":"all_data = pd.get_dummies(all_data)\nprint(all_data.shape)","71ac4c09":"train = all_data[:ntrain]\ntest = all_data[ntrain:]","b7833d4a":"train.head()","88558365":"from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb","2d25ef3a":"#Validation function\nn_folds = 5\n\ndef rmsle_cv(model):\n    kf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(train.values)\n    rmse= np.sqrt(-cross_val_score(model, train.values, y_train, scoring=\"neg_mean_squared_error\", cv = kf))\n    return(rmse)","ad43f984":"lasso = make_pipeline(RobustScaler(), Lasso(alpha =0.0005, random_state=1))","b8bf5b7b":"ENet = make_pipeline(RobustScaler(), ElasticNet(alpha=0.0005, l1_ratio=.9, random_state=3))","87d57653":"KRR = KernelRidge(alpha=0.6, kernel='polynomial', degree=2, coef0=2.5)","ae2facc6":"GBoost = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n                                   max_depth=4, max_features='sqrt',\n                                   min_samples_leaf=15, min_samples_split=10, \n                                   loss='huber', random_state =5)","3bbed374":"model_xgb = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state =7, nthread = -1)","8384fe9f":"model_lgb = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.05, n_estimators=720,\n                              max_bin = 55, bagging_fraction = 0.8,\n                              bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)","e8468f4e":"score = rmsle_cv(lasso)\nprint(\"\\nLasso score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","ffb12c95":"score = rmsle_cv(ENet)\nprint(\"ElasticNet score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","68fb20a3":"score = rmsle_cv(KRR)\nprint(\"Kernel Ridge score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","5ad272ec":"score = rmsle_cv(GBoost)\nprint(\"Gradient Boosting score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","d3486d43":"score = rmsle_cv(model_xgb)\nprint(\"Xgboost score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","8e8c1b23":"score = rmsle_cv(model_lgb)\nprint(\"LGBM score: {:.4f} ({:.4f})\\n\" .format(score.mean(), score.std()))","2f3ffc1d":"class AveragingModels(BaseEstimator, RegressorMixin, TransformerMixin):\n    def __init__(self, models):\n        self.models = models\n        \n    # we define clones of the original models to fit the data in\n    def fit(self, X, y):\n        self.models_ = [clone(x) for x in self.models]\n        \n        # Train cloned base models\n        for model in self.models_:\n            model.fit(X, y)\n\n        return self\n    \n    #Now we do the predictions for cloned models and average them\n    def predict(self, X):\n        predictions = np.column_stack([\n            model.predict(X) for model in self.models_\n        ])\n        return np.mean(predictions, axis=1) ","8d0fae83":"averaged_models = AveragingModels(models = (ENet, GBoost, KRR, lasso))\n\nscore = rmsle_cv(averaged_models)\nprint(\" Averaged base models score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","7afcf069":"class StackingAveragedModels(BaseEstimator, RegressorMixin, TransformerMixin):\n    def __init__(self, base_models, meta_model, n_folds=5):\n        self.base_models = base_models\n        self.meta_model = meta_model\n        self.n_folds = n_folds\n   \n    # We again fit the data on clones of the original models\n    def fit(self, X, y):\n        self.base_models_ = [list() for x in self.base_models]\n        self.meta_model_ = clone(self.meta_model)\n        kfold = KFold(n_splits=self.n_folds, shuffle=True, random_state=156)\n        \n        # Train cloned base models then create out-of-fold predictions\n        # that are needed to train the cloned meta-model\n        out_of_fold_predictions = np.zeros((X.shape[0], len(self.base_models)))\n        for i, model in enumerate(self.base_models):\n            for train_index, holdout_index in kfold.split(X, y):\n                instance = clone(model)\n                self.base_models_[i].append(instance)\n                instance.fit(X[train_index], y[train_index])\n                y_pred = instance.predict(X[holdout_index])\n                out_of_fold_predictions[holdout_index, i] = y_pred\n                \n        # Now train the cloned  meta-model using the out-of-fold predictions as new feature\n        self.meta_model_.fit(out_of_fold_predictions, y)\n        return self\n   \n    #Do the predictions of all base models on the test data and use the averaged predictions as \n    #meta-features for the final prediction which is done by the meta-model\n    def predict(self, X):\n        meta_features = np.column_stack([\n            np.column_stack([model.predict(X) for model in base_models]).mean(axis=1)\n            for base_models in self.base_models_ ])\n        return self.meta_model_.predict(meta_features)","17fbaba1":"stacked_averaged_models = StackingAveragedModels(base_models = (ENet, GBoost, KRR),\n                                                 meta_model = lasso)\n\nscore = rmsle_cv(stacked_averaged_models)\nprint(\"Stacking Averaged models score: {:.4f} ({:.4f})\".format(score.mean(), score.std()))","2481a5ab":"def rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))","c90a7bf1":"stacked_averaged_models.fit(train.values, y_train)\nstacked_train_pred = stacked_averaged_models.predict(train.values)\nstacked_pred = np.expm1(stacked_averaged_models.predict(test.values))\nprint(rmsle(y_train, stacked_train_pred))","c54a9f27":"model_xgb.fit(train, y_train)\nxgb_train_pred = model_xgb.predict(train)\nxgb_pred = np.expm1(model_xgb.predict(test))\nprint(rmsle(y_train, xgb_train_pred))","892f2452":"model_lgb.fit(train, y_train)\nlgb_train_pred = model_lgb.predict(train)\nlgb_pred = np.expm1(model_lgb.predict(test.values))\nprint(rmsle(y_train, lgb_train_pred))","92592c79":"'''RMSE on the entire Train data when averaging'''\n\nprint('RMSLE score on train data:')\nprint(rmsle(y_train,stacked_train_pred*0.70 +\n               xgb_train_pred*0.15 + lgb_train_pred*0.15 ))","4196fdc9":"ensemble = stacked_pred*0.70 + xgb_pred*0.15 + lgb_pred*0.15","39c0fd80":"sub = pd.DataFrame()\nsub['Id'] = test_ID\nsub['SalePrice'] = ensemble\nsub.to_csv('submission.csv',index=False)","72ad4825":"take only signifacant features. Similar features, take only on of them: 'GarageCars' and 'GarageArea'; 'TotalBsmtSF' and '1stFloor' ; 'TotRmsAbvGrd' and 'GrLivArea'; ","cbe77a36":"**Getting dummy categorical features**","2153e206":"there is signifacant zero values. you can't LOG them. So log() only not 0 values","68078ed1":"**Part 2: Overview and Cleaning the Data**","910dafed":"Label Encoding some categorical variables that may contain information in their ordering set","bdbc655a":"Final Training and Prediction","96447ea4":"**Modelling**","20f7faed":"Stacking Averaged models Score","e36ba9d2":"Kernel Ridge Regression","6eca9841":"###Missing Data","9e9ad237":"Define a cross validation strategy","caa666f6":"*Stacking  models*","3b7fbce4":"so, we removed \"cones\", make 'homoscedasticity' right. current scatter plot doesn't have a conic shape anymore, this is because of log()","b8579088":"Elastic Net Regression","01a79477":"XGBoost:","9f5c662f":"Ensemble prediction:","b6080eaa":"Skewed features","8e1f9cbc":"LightGBM","b5644210":"Adding features","a8209861":"Gradient Boosting Regression","2252d2d6":"Transforming some numerical variables that are really categorical","45363f9a":"*Base models scores*","6aacc809":"Transforming target variable","16276036":"Box Cox Transformation of (highly) skewed features","0b000af9":"The skew seems now corrected and the data appears more normally distributed.","207f6c90":"StackedRegressor:","9f38d574":"outliers","b55e1c29":"Submission","58f57706":"Averaged base models score. Of course we could easily add more models in the mix. ","0f4acdf1":"**##Features engineering**","4432ee34":"XGBoost","5b8fde44":"Averaged base models class","edf02b8a":"**search for normality**\n\nThe target variable is right skewed. As (linear) models love normally distributed data , we need to transform this variable and make it more normally distributed.\n\nLog-transformation of the target variable","bb2b75c1":"Ensembling StackedRegressor, XGBoost and LightGBM","10af364f":"LASSO  Regression\n\n\nThis model may be very sensitive to outliers. So we need to made it more robust on them. For that we use the sklearn's  **Robustscaler()**  method on pipeline ","e535bf59":"Meta-model","a96635a8":"Imputing missing values. We impute them  by proceeding sequentially  through features with missing values ","37f51c29":"LightGBM:","d5b7d085":"**Part1. Import modules and data**","5d60a867":"we decide not delete here any data","d91b728c":"*Base models*"}}