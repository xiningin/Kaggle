{"cell_type":{"c8f1a961":"code","5a881ced":"code","665e8287":"code","1124ea13":"code","3d57326e":"code","918fb258":"code","42b2fe05":"code","e494dd69":"code","0563aebb":"code","386e845f":"markdown","d73686a0":"markdown","faf4ade0":"markdown","98587238":"markdown","1edf2009":"markdown","e2357e53":"markdown","04540b7e":"markdown","bc4f14b5":"markdown","581d5ce5":"markdown"},"source":{"c8f1a961":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pycountry\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom matplotlib.pyplot import plot\nimport matplotlib.pyplot as plt\nimport plotly.offline as pyo\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\npyo.init_notebook_mode()\n# %matplotlib inline","5a881ced":"data = pd.read_csv('\/kaggle\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv', skiprows=1)","665e8287":"# Check dimension of the data\nprint('Dimensions of the dataframe: ', data.shape) \nprint('Total no. of participants: ', data.shape[0])\n\n# drop the first column\ndata = data.drop('Duration (in seconds)', axis=1)\n\n# rename the columns\nnew_names = ['Age','Gender','Country','Education','Current\/Recent Title','Years of Coding',\n            'Python','R','SQL','C','C++','Java','Javascript','Julia','Swift','Bash','MATLAB','None','Other',\n            'Recommended Languages',\n            'Jupyter Products','RStudio','Visual_Studio','VSCode','PyCharm','Spyder','Notepad','Sublime','Vim\/emacs','Matlab','None','Other',\n            'Kaggle','Colab','Azure','Paperspace','Binder','Code Ocean','IBM Watson','Amazon_Sagemaker','Amazon_EMR','Google Cloud AI','Google Cloud Datalab',\n            'Databricks','None','Other',\n            'Computing Platform',\n            'GPU','TPU','None','Other',\n             'TPU Used times',\n             'Matplotlib','Seaborn','Plotly\/Plotly Express','Ggplot\/ggplot2','Shiny','D3','Altair','Bokeh','Geoplotlib','Leaflet\/Folium','None','Other']\n            \ndata.rename(columns=dict(zip(data.columns[list(range(0, 65))], new_names)), inplace=True)\n\n# print the column names\nprint(list(data.columns))\n\n# # Check if the first 3 columns (age, gender, Country) contain Nan, the rest can have Nan values\ndisplay(data.isnull().sum())\n\n# # Check unique country names\ndata.Country.unique()","1124ea13":"# group by gender\ngender_data = data['Gender'].value_counts()\ntotal_participants = gender_data.sum()\ngender_data = round((gender_data\/total_participants)*100,1)\n\n# plot gender data\ngender_data.plot(kind='bar', color=(0.2, 0.4, 0.6, 0.6), figsize=(9,5), rot=30)\nplt.xlabel(\"Gender\", labelpad=14)\nplt.ylabel(\"Count of People by gender\", labelpad=15)\nplt.title('Gap between Men and women: {}%'.format(round(gender_data.iloc[0]-gender_data.iloc[1],1)), y=1)\nplt.suptitle('Participation by Gender', y=1)    \nplt.show()","3d57326e":"# fuzzy search for country codes\ndef do_fuzzy_search(country):\n    try:\n        result = pycountry.countries.search_fuzzy(country)\n    except Exception:\n        return np.nan\n    else:\n        return result[0].alpha_3\n\n# Change South Korea and Iran to their recognized names\ndata['Country'] = data['Country'].replace('South Korea', 'Korea')   \ndata['Country'] = data['Country'].replace('Iran, Islamic Republic of...', 'Iran')   \n\n# group by countries, fetch codes\ncountry_data = data['Country'].value_counts().rename_axis('Country').reset_index(name='Participants')\ncountry_data['Country_Code'] = country_data['Country'].apply(lambda country: do_fuzzy_search(country))\n\n# delete 'Other'\ncountry_data = country_data[country_data.Country != 'Other']\n\n# display(country_data.isnull().sum())\n\n# plot map\nmap_data = [dict(type = 'choropleth', \n                 locations = country_data['Country_Code'],\n#                  locationmode = 'country names', \n                 z = country_data['Participants'], \n                 text = country_data['Country'],\n                 colorscale = 'Reds', \n                 colorbar = dict(title = 'No. of Participants'))]\n\nmap_layout = dict(title = 'Participation by Countries',\n             geo = dict(showframe = False, \n                        projection = {'type':'natural earth'}))\n\nfig = dict(data = map_data, layout = map_layout)\n# fig = go.Figure(data = map_data, layout = map_layout)\n# fig.show()\niplot(fig)\n","918fb258":"# count all genders country wise\ncountry_gender = data[['Country','Gender']].value_counts().unstack().reset_index()\n\n# drop other insignificant genders except man and woman \ncountry_gender = country_gender.drop(['Nonbinary', 'Prefer not to say', 'Prefer to self-describe'], axis=1)\ncountry_gender = country_gender[country_gender.Country != 'Other']\n\n# calculate the difference column\ncountry_gender['Difference'] = country_gender['Man'] - country_gender['Woman']\n# country_gender.head()\n\n# select 5 top and 5 bottom countires w.r.t differences in man and woman participant\nsliced_data = pd.concat([country_gender.sort_values(by=['Difference'], ascending = False)[:5], \n                            country_gender.sort_values(by=['Difference'])[:5]])\n# plot\nfig2 = go.Figure(\n    data=[\n        go.Bar(\n            name='Male Participants',\n            x=sliced_data['Country'],\n            y=sliced_data['Man'],\n            offsetgroup=0,\n        ),\n        go.Bar(\n            name='Female Participants',\n            x=sliced_data['Country'],\n            y=sliced_data['Woman'],\n            offsetgroup=1,\n        ),\n        go.Bar(\n            name='Difference',\n            x=sliced_data['Country'],\n            y=sliced_data['Difference'],\n            offsetgroup=2,\n        ),\n    ],\n    layout=go.Layout(\n        title='Participation by Country and Gender',\n        yaxis_title='Number of Participants'\n    )\n)\nfig2.show()","42b2fe05":"# group by age and plot\nage_data = data['Age'].value_counts()\nplt.subplot(2, 2, 1)\nage_data.plot(kind='bar', color=(0.2, 0.4, 0.6, 0.6), figsize=(10, 10), rot=30)\nplt.xlabel(\"Age\", labelpad=14)\nplt.ylabel(\"Count of People by age\", labelpad=15)\nplt.title('Participation by Age', y=1)  \n\n# group by education and plot\nedu_data = data['Education'].value_counts()\nplt.subplot(2, 2, 2)\nedu_data.plot(kind='barh', color=(0.2, 0.4, 0.6, 0.6), figsize=(10, 6))\nplt.xlabel(\"Count of People\", labelpad=15)\nplt.title('Participation by Education', y=1)\n\n# group by number of years coding and plot\ncoding_data = data['Years of Coding'].value_counts()\nplt.subplot(2, 2, 3)\ncoding_data.plot(kind='bar', color=(0.2, 0.4, 0.6, 0.6), figsize=(10, 10), rot=30)\nplt.xlabel(\"Years\", labelpad=14)\nplt.ylabel(\"Count of People by coding exp.\", labelpad=15)\nplt.title('Participants by Coding Experiences', y=1)\n\n# group by designation and plot\nrole_data = data['Current\/Recent Title'].value_counts()\ntotal_roles = role_data.sum()\nrole_data = round((role_data\/total_roles)*100,1)\nplt.subplot(2, 2, 4)\nrole_data.plot(kind='barh', color=(0.2, 0.4, 0.6, 0.6), figsize=(10, 10))\nplt.xlabel(\"Count of People\", labelpad=15)\nplt.title('Participants with Popular Designations ', y=1)\n\nplt.tight_layout(rect=[2, 0.02, 4, 0.8])\nplt.show()","e494dd69":"lang_cols = ['Current\/Recent Title','Python','R','SQL','C','C++','Java','Javascript','Julia','Swift','Bash','MATLAB']\nide_cols = ['Current\/Recent Title','Jupyter Products','RStudio','Visual_Studio','VSCode','PyCharm','Spyder','Notepad','Sublime','Vim\/emacs','Matlab']\nnotebk_cols = ['Current\/Recent Title','Kaggle','Colab','Azure','Paperspace','Binder','Code Ocean','IBM Watson','Amazon_Sagemaker','Amazon_EMR','Google Cloud AI','Google Cloud Datalab','Databricks']\nviz_cols = ['Current\/Recent Title','Matplotlib','Seaborn','Plotly\/Plotly Express','Ggplot\/ggplot2','Shiny','D3','Altair','Bokeh','Geoplotlib','Leaflet\/Folium']\n\nlang_d = data.loc[:, data.columns.isin(lang_cols)].copy()\nide_d = data.loc[:, data.columns.isin(ide_cols)].copy()\nnotebk_d = data.loc[:, data.columns.isin(notebk_cols)].copy()\nviz_d = data.loc[:, data.columns.isin(viz_cols)].copy()\n\n# replace Nan values with 0, else 1\nlang_d[lang_cols[1:]] = lang_d[lang_cols[1:]].applymap(lambda x: 0 if pd.isnull(x) else 1)\nide_d[ide_cols[1:]] = ide_d[ide_cols[1:]].applymap(lambda x: 0 if pd.isnull(x) else 1)\nnotebk_d[notebk_cols[1:]] = notebk_d[notebk_cols[1:]].applymap(lambda x: 0 if pd.isnull(x) else 1)\nviz_d[viz_cols[1:]] = viz_d[viz_cols[1:]].applymap(lambda x: 0 if pd.isnull(x) else 1)\n\n# group by and sum \nlang_d = lang_d.groupby(cols[0]).sum()\nide_d = ide_d.groupby(cols[0]).sum()\nnotebk_d = notebk_d.groupby(cols[0]).sum()\nviz_d = viz_d.groupby(cols[0]).sum()\n\n\n# Find the largest value for each row\nlang_d = lang_d.idxmax(axis=1).rename_axis('Designation').reset_index(name = 'Popular Language')\nide_d = ide_d.idxmax(axis=1).rename_axis('Designation').reset_index(name = 'Popular IDE')\nnotebk_d = notebk_d.idxmax(axis=1).rename_axis('Designation').reset_index(name = 'Popular Notebooks')\nviz_d = viz_d.idxmax(axis=1).rename_axis('Designation').reset_index(name = 'Popular Vizualization')\n\n# merge dataframes\njoined1 = pd.merge(lang_d, ide_d, on='Designation')\njoined2 = pd.merge(notebk_d, viz_d, on='Designation')\njoined = pd.merge(joined1, joined2, on='Designation')\n\njoined\n","0563aebb":"# Languages used commonly\nlan_used = data.iloc[:, 6:19].applymap(lambda x: 0 if pd.isnull(x) else 1).sum().sort_values(ascending=False).rename_axis('Languages').reset_index(name='Used')\ntotal = sum(lan_used.Used)\ntext = lan_used['Used'].apply(lambda x: str(round(x\/total*100,1))+'%')\n\n# Languages recommended to learn\nrecom = data['Recommended Languages'].value_counts().rename_axis('Languages').reset_index(name='Recommended')\ntotal1 = sum(recom.Recommended)\ntext1 = recom['Recommended'].apply(lambda x: str(round(x\/total1*100,1))+'%')\n\n# Merge the dataframes\nMerged = pd.merge(lan_used, recom, on='Languages')\n\n# plot charts\ngo.Figure(\n    data=[\n        go.Bar(\n            name='Popularly Used Languages',\n            x=Merged.Languages, y=Merged.Used,\n            text=text,\n            textposition='outside',\n            offsetgroup=0,\n        ),\n        go.Bar(\n            name='Recommended Languages',\n            x=Merged.Languages, y=Merged.Recommended,\n            text=text1,\n            textposition='outside',\n            offsetgroup=1,\n        )],\n    layout=go.Layout(\n        title='Participation by Country and Gender',\n        yaxis_title='Number of Participants'\n    )\n)","386e845f":"# Read Data","d73686a0":"# Participation by Country and Gender\n* Chart - Participation by Country and Gender : Shows top 5 and bottom 5 country-wise men and women participation w.r.t the differences between them. \n* There is no country where more women have participated than men, which verifies that there is less women in technology field as ever.","faf4ade0":"# Designation wise, we find the top languages, visualization libraries, notebooks and IDEs used\n**Popular Language** - Python, R and SQL\n\n**Popular IDE** - Jupyter Products and RStudio\n\n**Popular Notebooks** - Kaggle and Colab\n\n**Popular Vizualization** - Matplotlib and ggplot\n","98587238":"# Packages","1edf2009":"# Participation by Gender\n* Chart - Participation by Gender: Shows the huge gender gap between men and women taking part in Kaggle competitions","e2357e53":"# Data sanity check and preparation","04540b7e":"# Participation by Countries\n* Chart - Participation by Countries: India tops the list in number of participants somewhat followed by the USA and the rest are minorities\n![image.png](attachment:image.png)","bc4f14b5":"# Popular Languages Used and Recommended to Learn","581d5ce5":"# Participation by Age, Education, Coding Experiences and Designations\n**Age** - 25 to 29 wins closely followed by (22 to 25) and (18 to 22)\n\n**Education** - Master's Degree represents highest number of participants but it is tricky since the questions also involved \"what they are planning to do\" - which means maybe most students do not have masters right now but they are planning to do one. Same applied for Doctorate as well.\n\n**Coding Experience** - Most participants have 1 to 5 years of experiences in coding\n\n**Designations** - Majority of the participants are students, but that could mean students are doing a Master's degree"}}