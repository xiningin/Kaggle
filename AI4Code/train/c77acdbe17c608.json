{"cell_type":{"cded2b41":"code","d3e528a3":"code","243cc725":"code","3510908a":"code","98a9c73f":"code","92e2463e":"code","194467b4":"code","6a043ade":"code","c30761c2":"code","a20e1b2f":"code","086cf45a":"code","09899533":"code","f3df834e":"code","8b8249e9":"code","1a31cfbc":"code","3720926d":"code","0bd19918":"code","a3e421f6":"code","7dee0a78":"code","5fde31e3":"code","ba0ecf42":"code","e1f14d02":"code","d947d710":"code","c45501bd":"markdown","f520eaf9":"markdown"},"source":{"cded2b41":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d3e528a3":"import matplotlib.pyplot as plt\nimport tensorflow as tf\nimport nltk\nimport seaborn as sns\n\nfrom tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix","243cc725":"from sklearn.model_selection import train_test_split\nimport pandas as pd\nimport numpy as np\nfrom collections import Counter\nimport math\nfrom scipy.stats import norm","3510908a":"iris = pd.read_csv('..\/input\/iris\/Iris.csv')","98a9c73f":"iris.head()","92e2463e":"iris.shape","194467b4":"iris.info","6a043ade":"iris .describe","c30761c2":"target_category = iris[\"Species\"].unique()\ntarget_category=list(map(str,target_category))\nprint(target_category)","a20e1b2f":"iris.groupby(\"Species\").Species.count().plot.bar(ylim=0)","086cf45a":"sns.pairplot(iris.drop(columns='Id'), hue = 'Species')","09899533":"#Petal Length\nsns.swarmplot(x=iris.Species, y=iris.PetalLengthCm)","f3df834e":"#Petal Width\nsns.swarmplot(x=iris.Species, y=iris.PetalWidthCm)","8b8249e9":"#Sepal Length\nsns.swarmplot(x=iris.Species, y=iris.SepalLengthCm)","1a31cfbc":"sns.swarmplot(x=iris.Species, y=iris.SepalWidthCm)","3720926d":"species = iris.Species\ndata = iris.drop(columns=['Species','Id'])  ","0bd19918":"data.head()","a3e421f6":"iris['Category'] = iris['Species'].factorize()[0]\ncategory = iris['Category']\niris.head()","7dee0a78":"#split dataset into test set(20%) and train set(80%) using stratify to split into equal size\nX_train,X_test,Y_train,Y_test = train_test_split(data,category, test_size = 0.2, stratify = category,random_state=1)\nprint(len(X_train))\nprint(len(X_test))","5fde31e3":"nb = MultinomialNB()\nnb.fit(X_train,Y_train)\n\ntest_predict = nb.predict(X_test)\n\ntrain_accuracy = round(nb.score(X_train,Y_train)*100)\ntest_accuracy =round(accuracy_score(test_predict, Y_test)*100)\n\n\nprint(\"Naive Bayes Train Accuracy Score : {}% \".format(train_accuracy ))\nprint(\"Naive Bayes Test Accuracy Score  : {}% \".format(test_accuracy ))\nprint()\nprint(classification_report(test_predict, Y_test, target_names=target_category))\n","ba0ecf42":"conMat = confusion_matrix(test_predict, Y_test)\nsns.heatmap(conMat, annot=True)","e1f14d02":"rfc =  RandomForestClassifier(n_estimators=100)\n\nrfc.fit(X_train, Y_train)\n\ntest_predict = rfc.predict(X_test)\n\ntrain_accuracy = round(rfc.score(X_train,Y_train)*100)\ntest_accuracy =round(accuracy_score(test_predict, Y_test)*100)\n\nprint(\"Random Forest Classifier Train Accuracy Score : {}% \".format(train_accuracy ))\nprint(\"Random Forest Classifier Test Accuracy Score  : {}% \".format(test_accuracy ))\nprint()\nprint(classification_report(test_predict, Y_test, target_names=target_category))","d947d710":"conMat = confusion_matrix(test_predict, Y_test)\nsns.heatmap(conMat, annot=True)","c45501bd":"# About data","f520eaf9":"# Data Visualization"}}