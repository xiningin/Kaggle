{"cell_type":{"a38acfb4":"code","a529854a":"code","a5054e69":"code","5d8fe549":"code","99f1d19b":"code","62f74814":"code","94f55fb4":"code","195faa35":"code","6c09fac0":"code","38cc47ac":"code","0d4d3145":"code","5ad838cc":"code","e80a2d81":"code","12c56df7":"code","ea88f951":"code","ed239f75":"code","d2add740":"code","c5dd5799":"code","64c608e2":"code","32c8c9cb":"code","f2a0b223":"code","5924441a":"code","425be13b":"code","b0f4dca1":"code","8a4450f4":"code","dd09b3cf":"code","37c09135":"code","6c5fe027":"code","e5463f26":"code","ce0f69c4":"code","819bf862":"code","06645536":"code","6323ff30":"code","fff68dad":"code","3ef33d14":"code","673a9f50":"code","c6e9c05d":"code","96af8edc":"code","92976739":"code","938a0e79":"code","fa536e05":"code","35cdcf78":"code","82d001e1":"code","e6639459":"code","e36c2b8a":"code","cc1896f2":"code","3600f860":"code","e66d8f3a":"code","70f6c0c9":"code","c55be8ee":"code","4cdab3b3":"code","4e3a6434":"code","b0c7306a":"code","c0520745":"code","12d5bbd1":"code","34e20945":"code","a05c0fff":"code","a80794e3":"code","f85348a4":"code","e6285f6f":"code","e2f471b3":"code","8c9424bf":"code","b9b5424e":"code","22b84475":"code","18b16390":"code","d7f21915":"code","0ef2d6c4":"code","50cde7a1":"code","07c93953":"code","416e81b9":"code","96c9e88e":"code","13773c57":"code","f32b6112":"code","1c28ac6f":"code","56cadf91":"code","40d39dcd":"code","89f823a7":"code","107817e7":"code","6226dd3c":"code","04373d6a":"code","f9235760":"code","5667f2b9":"code","782e6e30":"code","5f388294":"code","43afd189":"code","1a543150":"code","8efb9dc5":"code","5289e445":"code","75e7f239":"code","4ee4fb02":"code","85e66056":"code","605751c1":"code","f7158505":"code","49d57a91":"code","77491ea8":"code","d5cfb399":"code","239a9afb":"code","519301c6":"code","94887b4a":"code","fe8556a7":"code","05cdac5a":"code","52f19139":"code","061a6968":"code","3a3d486d":"code","4d337ab9":"code","45b851f7":"code","65af0492":"code","d7fa9773":"code","9a964e67":"code","9849baa0":"code","2e395b3b":"code","b121e8f7":"code","68714132":"code","31bc0757":"code","62806a6c":"code","34aa9088":"code","d744ff96":"code","31c83ac6":"code","f5307c7d":"code","f3e68072":"code","4d768481":"code","8ed7d179":"code","07eab8a3":"code","8bf7bd0b":"code","6be98c69":"code","b63f5aa0":"code","7817cdd0":"code","b251cb6a":"code","b8dd3719":"code","94e707e8":"code","798cd63c":"code","bb9ea97b":"code","cba168f2":"code","6663bbe9":"code","f2837db9":"code","e0f2af6c":"code","70df76fc":"code","6e0853d2":"code","0ddf9a2a":"code","f4da65dc":"code","83882803":"code","d3d7872d":"code","42c3b126":"code","e3d50238":"code","a78ec81d":"code","c4bc149b":"code","0919bff9":"code","5095987f":"code","aa41e4d4":"code","86de75f0":"code","be0f8630":"code","8dd879d4":"code","85f6ce05":"code","0876120c":"code","4f4897e1":"code","31cf35ec":"code","cda7187f":"code","2e31c4c6":"code","a2b7936d":"code","88242b6c":"code","5b21dea6":"code","5df03532":"code","0d5fd8e7":"code","ade8ee96":"code","19dfd18c":"code","c0644ea2":"code","67c37bc2":"code","03a1a509":"code","0a9da030":"code","d814fb60":"code","c2954caf":"code","07390e3f":"code","7daad041":"code","c20ce2b6":"code","96582e6c":"code","6b8853e9":"code","1ce4512d":"code","682d8887":"code","1657350f":"code","7126944e":"code","ede65751":"code","1139bbc2":"code","8c5bab2e":"code","3063eb26":"code","f14ee135":"code","658ff895":"code","699e55b9":"code","3b29408f":"code","be291803":"code","a9fc8d3e":"code","129c9e29":"code","7cd00615":"code","db1438b3":"code","6582f68a":"code","e35c5037":"code","66e5750e":"code","e21941ff":"code","067f8dd2":"code","68121a29":"code","1ef7676e":"code","35d220e8":"code","b5567d39":"code","85bbc1e6":"code","62768c12":"code","c470b3f9":"code","1cfe25a0":"code","d46124ac":"code","3e603649":"code","45f91987":"code","db68ea7e":"code","3821ca76":"code","5d189883":"code","12d5bea5":"code","a0b5ff11":"code","90c63c15":"code","3a9d8479":"code","5ed78565":"code","17eaf798":"code","20ccb9ff":"code","ec985d45":"code","701a36bf":"code","86de7375":"code","e3b02ba4":"code","a6cafe41":"code","558dee70":"markdown","f3cebdc2":"markdown","c290df35":"markdown","5b9b9a7c":"markdown","0d60bb8a":"markdown","50f42bcf":"markdown","3942a57d":"markdown","32f2e716":"markdown","32438f17":"markdown","7ae3aeec":"markdown","14e2b27d":"markdown","858c14bc":"markdown","c63f5ab2":"markdown","4f99fcae":"markdown","bcfab534":"markdown","d1ed385d":"markdown","c10e77c1":"markdown","1bafa401":"markdown","bd12fee6":"markdown","6cbf1fc9":"markdown","cd1fd865":"markdown","065c8eb4":"markdown","76489f3d":"markdown","daba783a":"markdown","0b9839e3":"markdown","3a7df68f":"markdown","c996a8cc":"markdown","b9554590":"markdown","c157a845":"markdown","e4ccdcb3":"markdown","c251acf5":"markdown","76d80cbd":"markdown","20d31761":"markdown","14e53090":"markdown","9c6522e0":"markdown","dd9ab193":"markdown","cd9f74dc":"markdown","e09516db":"markdown","38e2afe6":"markdown","2655eab4":"markdown","27bb48e8":"markdown","760b1fb4":"markdown","89938834":"markdown","9d27d6a2":"markdown","eebc8650":"markdown","a2226587":"markdown","e8c93db3":"markdown","93489344":"markdown","4f0c8d59":"markdown","b5a34436":"markdown","f27f7034":"markdown","8a5e8703":"markdown","c36faf01":"markdown","1e25585b":"markdown","51f14248":"markdown","29c45737":"markdown","ca6cef30":"markdown","99198781":"markdown","9d061dcc":"markdown","84756765":"markdown","74385760":"markdown","4faa988f":"markdown","3a686315":"markdown","f066ecc3":"markdown","042e0818":"markdown","5bed69d1":"markdown","1f398815":"markdown","14b5e5a6":"markdown","eca1793f":"markdown","7ece65e3":"markdown","8590cfad":"markdown","7692278d":"markdown","e70a86ae":"markdown","9fc49fd6":"markdown","add19cb4":"markdown","39edf146":"markdown","afcce467":"markdown","4b589647":"markdown","d571184a":"markdown","137eae95":"markdown","4a8d6694":"markdown","dd5919ee":"markdown","f7f64ab6":"markdown","d38bd915":"markdown","b557286e":"markdown","0ac910fe":"markdown","d3bf9069":"markdown","370431f1":"markdown","418d42dc":"markdown","026cac74":"markdown","aa91e2a4":"markdown","56c57ec2":"markdown","7e608c57":"markdown","e1dd9648":"markdown","011e6d2f":"markdown","9e46f7fa":"markdown"},"source":{"a38acfb4":"import warnings\nwarnings.filterwarnings('ignore')\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport datetime as dt\nfrom datetime import timedelta\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import LinearRegression,Ridge,Lasso\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error,r2_score\nimport statsmodels.api as sm\nfrom statsmodels.tsa.api import Holt,SimpleExpSmoothing,ExponentialSmoothing\nfrom fbprophet import Prophet\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.ar_model import AR\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.graphics.tsaplots import plot_acf,plot_pacf\n#pd.set_option('display.float_format', lambda x: '%.6f' % x)","a529854a":"COUNTRY = \"Italy\"\ncountry = COUNTRY\n\ndf = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\ncovid=pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\n\ndf['Country\/Region'] = df['Country\/Region'].astype('category')\npoland = df[df.loc[:, 'Country\/Region'] == COUNTRY]\n#covid","a5054e69":"#Dropping column as SNo is of no use, and \"Province\/State\" contains too many missing values\ncovid.drop([\"SNo\"],1,inplace=True)","5d8fe549":"#Converting \"Observation Date\" into Datetime format\ncovid[\"ObservationDate\"]=pd.to_datetime(covid[\"ObservationDate\"])","99f1d19b":"#Grouping different types of cases as per the date\ndatewise=covid.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})","62f74814":"from datetime import date\n\nx = date.today()\n\nx.strftime(\"%b %d %Y\")\ntoday = x.strftime(\"%d-%m-%Y\")\n#today","94f55fb4":"print(\"Informa\u00e7\u00f5es b\u00e1sicas sobre o COVID-19 no mundo no dia \" + str(today) +\".\")\nprint(\" \")\nprint(\"No mundo, o n\u00famero total de pa\u00edses contaminados chegou a \" + str(len(covid[\"Country\/Region\"].unique())) + \".\\\n Hoje, o n\u00famero de casos confirmados em todo o mundo \u00e9 \"+ str(int(datewise[\"Confirmed\"].iloc[-1])) +\". \\\nO n\u00famero de mortes causadas por COVID-19 em todo o mundo \u00e9 \"+ str(int(datewise[\"Deaths\"].iloc[-1])) +\" \\\ne atualmente temos \"+ str(int(datewise[\"Confirmed\"].iloc[-1]-datewise[\"Recovered\"].iloc[-1]-datewise[\"Deaths\"].iloc[-1])) +\" de casos ativos em todo o mundo.\\\nO n\u00famero m\u00e9dio de casos confirmados por dia em todo o mundo '\u00e9 \" + str(int(np.round(datewise[\"Confirmed\"].iloc[-1]\/datewise.shape[0]))) +\" \\\ne o n\u00famero m\u00e9dio de mortes por COVID-19 por dia em todo o mundo \u00e9 de \"+ str(int(np.round(datewise[\"Deaths\"].iloc[-1]\/datewise.shape[0])))+\". \")","195faa35":"print(\"Informa\u00e7\u00f5es b\u00e1sicas sobre o COVID-19 no mundo no dia \" + str(today) +\".\")\nprint(\" \")\n\nprint(\"Pa\u00edses contaminados                           :   \",len(covid[\"Country\/Region\"].unique()))\nprint(\"Casos confirmados em todo o mundo             :  {:.0f} \".format(datewise[\"Confirmed\"].iloc[-1]))\nprint(\"Recupera\u00e7\u00f5es em todo o mundo                  :  {:.0f}\".format(datewise[\"Recovered\"].iloc[-1]))\nprint(\"Mortes por COVID-19 em todo o mundo           :   {:.0f}\".format(datewise[\"Deaths\"].iloc[-1]))\nprint(\"Casos ativos em todo o mundo                  : \",int((datewise[\"Confirmed\"].iloc[-1]-datewise[\"Recovered\"].iloc[-1]-datewise[\"Deaths\"].iloc[-1])))\nprint(\"Casos encerrados no mundo                     : \",int(datewise[\"Recovered\"].iloc[-1]+datewise[\"Deaths\"].iloc[-1]))\n\nprint(\" \")\n\nprint(\"Casos confirmados por dia em todo o mundo     :  \",int(np.round(datewise[\"Confirmed\"].iloc[-1]\/datewise.shape[0])))\nprint(\"Recupera\u00e7\u00f5es por dia em todo o mundo          :   \",int(np.round(datewise[\"Recovered\"].iloc[-1]\/datewise.shape[0])))\nprint(\"Mortes por COVID-19 por dia ao redor do mundo :    \",int(np.round(datewise[\"Deaths\"].iloc[-1]\/datewise.shape[0])))\nprint(\"Casos confirmados por hora em todo o mundo    :    \",int(np.round(datewise[\"Confirmed\"].iloc[-1]\/((datewise.shape[0])*24))))\nprint(\"Recupera\u00e7\u00f5es por hora em todo o mundo         :    \",int(np.round(datewise[\"Recovered\"].iloc[-1]\/((datewise.shape[0])*24))))\nprint(\"Mortes por COVID-19 por hora (media)          :     \",int(np.round(datewise[\"Deaths\"].iloc[-1]\/((datewise.shape[0])*24))))\n\nprint(\" \")\n\nprint(\"Reconhecimentos:\")\nprint(\"Agradecemos \u00e0 OMS e \u00e0 Universidade Johns Hopkins pelos dados dispon\u00edveis a\")\nprint(\"fins de pesquisa educacional e acad\u00eamica - Jair Ribeiro\")","6c09fac0":"plt.figure(figsize=(25,8))\nsns.barplot(x=datewise.index.date, y=datewise[\"Confirmed\"]-datewise[\"Recovered\"]-datewise[\"Deaths\"])\nplt.title(\"Gr\u00e1fico da distribui\u00e7\u00e3o de casos ativos no dia \" + str(today) +\".\")\nplt.xticks(rotation=90)\n\nplt.savefig('001br.png')","38cc47ac":"plt.figure(figsize=(25,8))\nsns.barplot(x=datewise.index.date, y=datewise[\"Recovered\"]+datewise[\"Deaths\"])\nplt.title(\"Gr\u00e1fico da distribui\u00e7\u00e3o dos casos conclu\u00eddos at\u00e9 o dia \" + str(today) +\".\")\nplt.xticks(rotation=90)\nplt.savefig('002br.png')","0d4d3145":"datewise[\"WeekOfYear\"]=datewise.index.weekofyear\n\nweek_num=[]\nweekwise_confirmed=[]\nweekwise_recovered=[]\nweekwise_deaths=[]\nw=1\nfor i in list(datewise[\"WeekOfYear\"].unique()):\n    weekwise_confirmed.append(datewise[datewise[\"WeekOfYear\"]==i][\"Confirmed\"].iloc[-1])\n    weekwise_recovered.append(datewise[datewise[\"WeekOfYear\"]==i][\"Recovered\"].iloc[-1])\n    weekwise_deaths.append(datewise[datewise[\"WeekOfYear\"]==i][\"Deaths\"].iloc[-1])\n    week_num.append(w)\n    w=w+1\n\nplt.figure(figsize=(8,5))\nplt.plot(week_num,weekwise_confirmed,linewidth=3)\nplt.plot(week_num,weekwise_recovered,linewidth=3)\nplt.plot(week_num,weekwise_deaths,linewidth=3)\nplt.ylabel(\"N\u00famero de casos\")\nplt.xlabel(\"N\u00famero da semana\")\nplt.title(\"Progresso semanal de diferentes tipos de casos\")\nplt.xlabel","5ad838cc":"fig, (ax1,ax2) = plt.subplots(1, 2,figsize=(25,8))\nsns.barplot(x=week_num,y=pd.Series(weekwise_confirmed).diff().fillna(0),ax=ax1)\nsns.barplot(x=week_num,y=pd.Series(weekwise_deaths).diff().fillna(0),ax=ax2)\nax1.set_xlabel(\"N\u00famero da semana\")\nax2.set_xlabel(\"N\u00famero da semanar\")\nax1.set_ylabel(\"N\u00famero de Casos Confirmados\")\nax2.set_ylabel(\"N\u00famero de mortes\")\nax1.set_title(\"Aumento semanal no n\u00famero de casos confirmados\")\nax2.set_title(\"Aumento semanal do n\u00famero de mortes por COVID-19\")\nplt.savefig('003br.png')","e80a2d81":"plt.figure(figsize=(25,8))\nplt.plot(datewise[\"Confirmed\"],marker=\"o\",label=\"Casos confirmados\")\nplt.plot(datewise[\"Recovered\"],marker=\"*\",label=\"Recupera\u00e7\u00f5es\")\nplt.plot(datewise[\"Deaths\"],marker=\"^\",label=\"Mortes\")\nplt.ylabel(\"N\u00famero de pacientes\")\nplt.xlabel(\"Datas\")\nplt.xticks(rotation=90)\nplt.title(\"Andamento dos diferentes tipos de casos ao longo do tempo\")\nplt.legend()\nplt.savefig('004br.png')","12c56df7":"#Calculating the Mortality Rate and Recovery Rate\ndatewise[\"Mortality Rate\"]=(datewise[\"Deaths\"]\/datewise[\"Confirmed\"])*100\ndatewise[\"Recovery Rate\"]=(datewise[\"Recovered\"]\/datewise[\"Confirmed\"])*100\ndatewise[\"Active Cases\"]=datewise[\"Confirmed\"]-datewise[\"Recovered\"]-datewise[\"Deaths\"]\ndatewise[\"Closed Cases\"]=datewise[\"Recovered\"]+datewise[\"Deaths\"]\n\n#Plotting Mortality and Recovery Rate \nfig, (ax1, ax2) = plt.subplots(1, 2,figsize=(25,8))\nax1.plot(datewise[\"Mortality Rate\"],label='Taxa de mortalidade',linewidth=3)\nax1.axhline(datewise[\"Mortality Rate\"].mean(),linestyle='--',color='black',label=\"Mortalidade Mediana\")\nax1.set_ylabel(\"Taxa de mortalidade\")\nax1.set_xlabel(\"Per\u00edodo\")\nax1.set_title(\"Taxa Geral de Mortalidade no per\u00edodo\")\nax1.legend()\nfor tick in ax1.get_xticklabels():\n    tick.set_rotation(90)\nax2.plot(datewise[\"Recovery Rate\"],label=\"Taxa de Recupera\u00e7\u00e3o\",linewidth=3)\nax2.axhline(datewise[\"Recovery Rate\"].mean(),linestyle='--',color='black',label=\"Recupera\u00e7\u00e3o Mediana\")\nax2.set_ylabel(\"Taxa de Recupera\u00e7\u00e3o\")\nax2.set_xlabel(\"Per\u00edodo\")\nax2.set_title(\"Taxa geral de recupera\u00e7\u00e3o no per\u00edodo\")\nax2.legend()\nfor tick in ax2.get_xticklabels():\n    tick.set_rotation(90)\n    \n\nprecision = 2\n#print( \"{:.{}f}\".format( pi, precision )) \n\nprint( \"M\u00e9dia de Mortalidade      :  {:.{}f}\".format( datewise[\"Mortality Rate\"].mean(), precision )) \nprint( \"Mortalidade Mediana       :  {:.{}f}\".format( datewise[\"Mortality Rate\"].median(), precision ))     \nprint( \"Taxa M\u00e9dia de Recupera\u00e7\u00e3o : {:.{}f}\".format( datewise[\"Recovery Rate\"].mean(), precision )) \nprint( \"Recupera\u00e7\u00e3o Mediana       :  {:.{}f}\".format( datewise[\"Recovery Rate\"].median(), precision ))\n\nplt.savefig('005br.png')","ea88f951":"daily_increase_confirm=[]\ndaily_increase_recovered=[]\ndaily_increase_deaths=[]\nfor i in range(datewise.shape[0]-1):\n    daily_increase_confirm.append(((datewise[\"Confirmed\"].iloc[i+1]\/datewise[\"Confirmed\"].iloc[i])))\n    daily_increase_recovered.append(((datewise[\"Recovered\"].iloc[i+1]\/datewise[\"Recovered\"].iloc[i])))\n    daily_increase_deaths.append(((datewise[\"Deaths\"].iloc[i+1]\/datewise[\"Deaths\"].iloc[i])))\ndaily_increase_confirm.insert(0,1)\ndaily_increase_recovered.insert(0,1)\ndaily_increase_deaths.insert(0,1)\n","ed239f75":"#Calculating countrywise Moratality and Recovery Rate\ncountrywise=covid[covid[\"ObservationDate\"]==covid[\"ObservationDate\"].max()].groupby([\"Country\/Region\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'}).sort_values([\"Confirmed\"],ascending=False)\ncountrywise[\"Mortality\"]=(countrywise[\"Deaths\"]\/countrywise[\"Confirmed\"])*100\ncountrywise[\"Recovery\"]=(countrywise[\"Recovered\"]\/countrywise[\"Confirmed\"])*100","d2add740":"fig, (ax1, ax2) = plt.subplots(1, 2,figsize=(25,8))\ntop_15_confirmed=countrywise.sort_values([\"Confirmed\"],ascending=False).head(15)\ntop_15_deaths=countrywise.sort_values([\"Deaths\"],ascending=False).head(15)\nsns.barplot(x=top_15_confirmed[\"Confirmed\"],y=top_15_confirmed.index,ax=ax1)\nax1.set_title(\"Os 15 principais pa\u00edses de acordo com o n\u00famero de casos confirmados\")\nsns.barplot(x=top_15_deaths[\"Deaths\"],y=top_15_deaths.index,ax=ax2)\nax2.set_title(\"Os 15 principais pa\u00edses de acordo com o n\u00famero de \u00f3bitos por COVID-19\")\nplt.savefig('006br.png')","c5dd5799":"fig, (ax1, ax2) = plt.subplots(1, 2,figsize=(25,8))\ncountrywise_plot_mortal=countrywise[countrywise[\"Confirmed\"]>500].sort_values([\"Mortality\"],ascending=False).head(15)\nsns.barplot(x=countrywise_plot_mortal[\"Mortality\"],y=countrywise_plot_mortal.index,ax=ax1)\nax1.set_title(\"Os 15 principais pa\u00edses de acordo com a alta taxa de mortalidade\")\nax1.set_xlabel(\"Mortalidade (em %)\")\ncountrywise_plot_recover=countrywise[countrywise[\"Confirmed\"]>500].sort_values([\"Recovery\"],ascending=False).head(15)\nsns.barplot(x=countrywise_plot_recover[\"Recovery\"],y=countrywise_plot_recover.index, ax=ax2)\nax2.set_title(\"Os 15 principais pa\u00edses com a mais alta taxa de recupera\u00e7\u00e3o\")\nax2.set_xlabel(\"Recupera\u00e7\u00e3o (em %)\")\nplt.savefig('007br.png')","64c608e2":"fig, (ax1, ax2) = plt.subplots(1, 2,figsize=(25,8))\ncountrywise_plot_mortal=countrywise[countrywise[\"Confirmed\"]>500].sort_values([\"Mortality\"],ascending=False).tail(15)\nsns.barplot(x=countrywise_plot_mortal[\"Mortality\"],y=countrywise_plot_mortal.index,ax=ax1)\nax1.set_title(\"Os 15 principais pa\u00edses com a mais baixa taxa de mortalidade\")\nax1.set_xlabel(\"Mortalidade (em %)\")\ncountrywise_plot_recover=countrywise[countrywise[\"Confirmed\"]>500].sort_values([\"Recovery\"],ascending=False).tail(15)\nsns.barplot(x=countrywise_plot_recover[\"Recovery\"],y=countrywise_plot_recover.index, ax=ax2)\nax2.set_title(\"Os 15 principais pa\u00edses com a mais baixa taxa de recupera\u00e7\u00e3o\")\nax2.set_xlabel(\"Recupera\u00e7\u00e3o (em %)\")\n\nplt.savefig('008br.png')","32c8c9cb":"no_recovered_countries=countrywise[(countrywise[\"Confirmed\"]>50)&(countrywise[\"Recovered\"]==0)][[\"Confirmed\",\"Deaths\"]]\nno_recovered_countries[\"Mortality Rate\"]=(no_recovered_countries[\"Deaths\"]\/no_recovered_countries[\"Confirmed\"])*100\nno_recovered_countries[no_recovered_countries[\"Mortality Rate\"]>0].sort_values([\"Mortality Rate\"],ascending=False)","f2a0b223":"no_deaths=countrywise[(countrywise[\"Confirmed\"]>100)&(countrywise[\"Deaths\"]==0)]\nno_deaths[no_deaths[\"Recovery\"]>0].sort_values([\"Recovery\"],ascending=False).drop([\"Mortality\"],1)","5924441a":"fig, (ax1, ax2) = plt.subplots(1, 2,figsize=(25,8))\ncountrywise[\"Active Cases\"]=(countrywise[\"Confirmed\"]-countrywise[\"Recovered\"]-countrywise[\"Deaths\"])\ncountrywise[\"Outcome Cases\"]=(countrywise[\"Recovered\"]+countrywise[\"Deaths\"])\ntop_15_active=countrywise.sort_values([\"Active Cases\"],ascending=False).head(15)\ntop_15_outcome=countrywise.sort_values([\"Outcome Cases\"],ascending=False).head(15)\nsns.barplot(x=top_15_active[\"Active Cases\"],y=top_15_active.index,ax=ax1)\nsns.barplot(x=top_15_outcome[\"Outcome Cases\"],y=top_15_outcome.index,ax=ax2)\nax1.set_title(\"Os 15 pa\u00edses com maior n\u00famero de casos ativos\")\nax2.set_title(\"Os 15 pa\u00edses com maior n\u00famero de casos encerrados\")\nplt.savefig('009br.png')","425be13b":"country_date=covid.groupby([\"Country\/Region\",\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\nconfirm_rate=[]\nfor country in countrywise.index:\n    days=country_date.ix[country].shape[0]\n    confirm_rate.append((countrywise.ix[country][\"Confirmed\"])\/days)\ncountrywise[\"Confirm Cases\/Day\"]=confirm_rate","b0f4dca1":"fig, (ax1, ax2) = plt.subplots(1, 2,figsize=(25,8))\ntop_15_ccpd=countrywise.sort_values([\"Confirm Cases\/Day\"],ascending=False).head(15)\nsns.barplot(y=top_15_ccpd.index,x=top_15_ccpd[\"Confirm Cases\/Day\"],ax=ax1)\nax1.set_title(\"Os 15 principais pa\u00edses por n\u00famero confirmado de casos por dia\")\nbottom_15_ccpd=countrywise[countrywise[\"Confirmed\"]>1000].sort_values([\"Confirm Cases\/Day\"],ascending=False).tail(15)\nsns.barplot(y=bottom_15_ccpd.index,x=bottom_15_ccpd[\"Confirm Cases\/Day\"],ax=ax2)\nax2.set_title(\"Os 15 pa\u00edses, com ou menor n\u00famero de casos confirmados por dia, com mais de 1000 casos confirmados\")\nplt.savefig('010br.png')","8a4450f4":"fig, (ax1, ax2) = plt.subplots(1, 2,figsize=(25,8))\ncountrywise[\"Survival Probability\"]=(1-(countrywise[\"Deaths\"]\/countrywise[\"Confirmed\"]))*100\ntop_25_survival=countrywise[countrywise[\"Confirmed\"]>1000].sort_values([\"Survival Probability\"],ascending=False).head(15)\nsns.barplot(x=top_25_survival[\"Survival Probability\"],y=top_25_survival.index,ax=ax1)\nax1.set_title(\"Os 25 pa\u00edses com maior probabilidade de sobreviv\u00eancia com mais de 1000 casos confirmados\")\n\nprecision = 2\n \n\nprint( \"Probabilidade m\u00e9dia de sobreviv\u00eancia em todos os pa\u00edses  : {:.{}f}%\".format( countrywise[\"Survival Probability\"].mean(), precision ))\nprint( \"Probabilidade de sobreviv\u00eancia mediana em todos os pa\u00edses: {:.{}f}%\".format( countrywise[\"Survival Probability\"].median(), precision ))\nprint( \"Probabilidade m\u00e9dia de morte em todos os pa\u00edses          :  {:.{}f}%\".format( 100-countrywise[\"Survival Probability\"].mean(), precision ))\nprint( \"probabilidade de morte mediana em todos os pa\u00edses        :  {:.{}f}%\".format( 100-countrywise[\"Survival Probability\"].median(), precision ))\n\n\nBottom_5_countries=countrywise[countrywise[\"Confirmed\"]>100].sort_values([\"Survival Probability\"],ascending=True).head(15)\nsns.barplot(x=Bottom_5_countries[\"Survival Probability\"],y=Bottom_5_countries.index,ax=ax2)\nplt.title(\"Os 15 pa\u00edses com a menor probabilidade de sobreviv\u00eancia\")\n\nplt.savefig('011br.png')","dd09b3cf":"china_data=covid[covid[\"Country\/Region\"]==\"Mainland China\"]\nItaly_data=covid[covid[\"Country\/Region\"]==\"Italy\"]\nUS_data=covid[covid[\"Country\/Region\"]==\"US\"]\nspain_data=covid[covid[\"Country\/Region\"]==\"Spain\"]\nrest_of_world=covid[(covid[\"Country\/Region\"]!=\"Mainland China\")&(covid[\"Country\/Region\"]!=\"Italy\")&(covid[\"Country\/Region\"]!=\"US\")&(covid[\"Country\/Region\"]!=\"Spain\")]\n\ndatewise_china=china_data.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\ndatewise_Italy=Italy_data.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\ndatewise_US=US_data.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\ndatewise_Spain=spain_data.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\ndatewise_restofworld=rest_of_world.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})","37c09135":"fig, (ax1, ax2, ax3) = plt.subplots(1, 3,figsize=(27,8))\nax1.plot(datewise_china[\"Confirmed\"],label=\"Casos confirmados da China continental\",linewidth=3)\nax1.plot(datewise_Italy[\"Confirmed\"],label=\"Casos confirmados da It\u00e1lia\",linewidth=3)\nax1.plot(datewise_US[\"Confirmed\"],label=\"Casos confirmados nos EUA\",linewidth=3)\nax1.plot(datewise_Spain[\"Confirmed\"],label=\"Casos confirmados da Espanha\",linewidth=3)\nax1.plot(datewise_restofworld[\"Confirmed\"],label=\"Casos Confirmados de resto do mundo\",linewidth=3)\nax1.set_title(\"Gr\u00e1fico de Casos Confirmados\")\nax1.set_ylabel(\"N\u00famero de pacientes\")\nax1.set_xlabel(\"Periodo\")\nax1.legend()\nfor tick in ax1.get_xticklabels():\n    tick.set_rotation(90)\nax2.plot(datewise_china[\"Recovered\"],label=\"Recupera\u00e7\u00f5es na China Continental\",linewidth=3)\nax2.plot(datewise_Italy[\"Recovered\"],label=\"Recupera\u00e7\u00f5es na It\u00e1lia\",linewidth=3)\nax2.plot(datewise_US[\"Recovered\"],label=\"Recupera\u00e7\u00f5es nos EUA\",linewidth=3)\nax2.plot(datewise_Spain[\"Recovered\"],label=\"Recupera\u00e7\u00f5es na Espanha\",linewidth=3)\nax2.plot(datewise_restofworld[\"Recovered\"],label=\"Recupera\u00e7\u00f5es no resto do mundo\",linewidth=3)\nax2.set_title(\"Gr\u00e1fico de Recupera\u00e7\u00f5es\")\nax2.set_ylabel(\"N\u00famero de pacientes\")\nax2.set_xlabel(\"Periodo\")\nax2.legend()\nfor tick in ax2.get_xticklabels():\n    tick.set_rotation(90)\nax3.plot(datewise_china[\"Deaths\"],label='Mortes na China continental',linewidth=3)\nax3.plot(datewise_Italy[\"Deaths\"],label='Mortes na It\u00e1lia',linewidth=3)\nax3.plot(datewise_US[\"Deaths\"],label='Mortes nos EUA',linewidth=3)\nax3.plot(datewise_Spain[\"Deaths\"],label='Mortes na Espanha',linewidth=3)\nax3.plot(datewise_restofworld[\"Deaths\"],label=\"Mortes no resto do mundo\",linewidth=3)\nax3.set_title(\"Gr\u00e1fico de mortes\")\nax3.set_ylabel(\"N\u00famero de mortes\")\nax3.set_xlabel(\"Periodo\")\nax3.legend()\nfor tick in ax3.get_xticklabels():\n    tick.set_rotation(90)\n    \nplt.savefig('012br.png')","6c5fe027":"datewise_china[\"Mortality\"]=(datewise_china[\"Deaths\"]\/datewise_china[\"Confirmed\"])*100\ndatewise_Italy[\"Mortality\"]=(datewise_Italy[\"Deaths\"]\/datewise_Italy[\"Confirmed\"])*100\ndatewise_US[\"Mortality\"]=(datewise_US[\"Deaths\"]\/datewise_US[\"Confirmed\"])*100\ndatewise_Spain[\"Mortality\"]=(datewise_Spain[\"Deaths\"]\/datewise_Spain[\"Confirmed\"])*100\ndatewise_restofworld[\"Mortality\"]=(datewise_restofworld[\"Deaths\"]\/datewise_restofworld[\"Confirmed\"])*100\n\ndatewise_china[\"Recovery\"]=(datewise_china[\"Recovered\"]\/datewise_china[\"Confirmed\"])*100\ndatewise_Italy[\"Recovery\"]=(datewise_Italy[\"Recovered\"]\/datewise_Italy[\"Confirmed\"])*100\ndatewise_US[\"Recovery\"]=(datewise_US[\"Recovered\"]\/datewise_US[\"Confirmed\"])*100\ndatewise_Spain[\"Recovery\"]=(datewise_Spain[\"Recovered\"]\/datewise_Spain[\"Confirmed\"])*100\ndatewise_restofworld[\"Recovery\"]=(datewise_restofworld[\"Recovered\"]\/datewise_restofworld[\"Confirmed\"])*100","e5463f26":"country =\"Brazil\"","ce0f69c4":"poland_data=covid[covid[\"Country\/Region\"]==country]\ndatewise_poland=poland_data.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\nprint(datewise_poland.iloc[-1])\nprint()\nprint(\"Total de casos ativos    : \",datewise_poland[\"Confirmed\"].iloc[-1]-datewise_poland[\"Recovered\"].iloc[-1]-datewise_poland[\"Deaths\"].iloc[-1])\nprint(\"Total de Casos Concluidos: \",datewise_poland[\"Recovered\"].iloc[-1]+datewise_poland[\"Deaths\"].iloc[-1])","819bf862":"print(\"Informa\u00e7\u00f5es b\u00e1sicas sobre o COVID-19 no Brasil no dia \" + str(today) +\".\")\nprint(\" \")\nprint(\"No Brasil, o n\u00famero total de casos confirmados \u00e9 \"+ str(int(datewise_poland[\"Confirmed\"].iloc[-1])) +\". \\\nO n\u00famero de mortes causadas por COVID-19 no Brasil \u00e9 \"+ str(int(datewise_poland[\"Deaths\"].iloc[-1])) +\" \\\ne atualmente temos \"+ str(int(datewise_poland[\"Confirmed\"].iloc[-1]-datewise_poland[\"Recovered\"].iloc[-1]-datewise_poland[\"Deaths\"].iloc[-1])) +\" de casos ativos.\\\nO n\u00famero m\u00e9dio de casos confirmados por dia \u00e9 \" + str(int(np.round(datewise_poland[\"Confirmed\"].iloc[-1]\/datewise_poland.shape[0]))) +\" \\\ne o n\u00famero m\u00e9dio de mortes \u00e9 \"+ str(int(np.round(datewise_poland[\"Deaths\"].iloc[-1]\/datewise_poland.shape[0])))+\". \")","06645536":"print(\"****************************************************************************\")\nprint(\"Informa\u00e7\u00f5es b\u00e1sicas sobre o COVID-19 no Brasil ate o dia \" + str(today) +\".\")\nprint(\"****************************************************************************\")\nprint(\" \")\n\nprint(\"****************************************************************************\")\nprint(\"N\u00famero total de casos confirmados no Brasil                   :  {:.0f} \".format(datewise_poland[\"Confirmed\"].iloc[-1]))\nprint(\"N\u00famero total de recupera\u00e7\u00f5es no Brasil                        :  {:.0f}\".format(datewise_poland[\"Recovered\"].iloc[-1]))\nprint(\"N\u00famero total de mortes por COVID-19 no Brasil                 :   {:.0f}\".format(datewise_poland[\"Deaths\"].iloc[-1]))\nprint(\"N\u00famero total de casos ativos no Brasil                        : \",int((datewise_poland[\"Confirmed\"].iloc[-1]-datewise_poland[\"Recovered\"].iloc[-1]-datewise_poland[\"Deaths\"].iloc[-1])))\nprint(\"N\u00famero total de casos encerrados no Brasil                    : \",int(datewise_poland[\"Recovered\"].iloc[-1]+datewise_poland[\"Deaths\"].iloc[-1]))\nprint(\"****************************************************************************\")\n\nprint(\" \")\nprint(\"****************************************************************************\")\nprint(\"N\u00famero aproximado de casos confirmados por dia no Brasil      :  \",int(np.round(datewise_poland[\"Confirmed\"].iloc[-1]\/datewise_poland.shape[0])))\nprint(\"N\u00famero aproximado de recupera\u00e7\u00f5es por dia no Brasil           :   \",int(np.round(datewise_poland[\"Recovered\"].iloc[-1]\/datewise_poland.shape[0])))\nprint(\"N\u00famero aproximado de mortes por COVID-19 por dia no Brasil    :    \",int(np.round(datewise_poland[\"Deaths\"].iloc[-1]\/datewise_poland.shape[0])))\nprint(\"AN\u00famero aproximado de casos confirmados por hora no Brasil    :    \",int(np.round(datewise_poland[\"Confirmed\"].iloc[-1]\/((datewise_poland.shape[0])*24))))\nprint(\"N\u00famero aproximado de recupera\u00e7\u00f5es por hora no Brasil          :    \",int(np.round(datewise_poland[\"Recovered\"].iloc[-1]\/((datewise_poland.shape[0])*24))))\nprint(\"N\u00famero aproximado de mortes por COVID-19 por hora no Brasil   :     \",int(np.round(datewise_poland[\"Deaths\"].iloc[-1]\/((datewise_poland.shape[0])*24))))\nprint(\"****************************************************************************\")\nprint(\" \")\nprint(\"****************************************************************************\")\nprint(\"Reconhecimentos:\")\nprint(\"Agradecemos \u00e0 OMS e \u00e0 Universidade Johns Hopkins pelos dados dispon\u00edveis a\")\nprint(\"fins de pesquisa educacional e acad\u00eamica - Jair Ribeiro\")\nprint(\"****************************************************************************\")","6323ff30":"#Calculating the Mortality Rate and Recovery Rate Worldwide\ndatewise[\"Mortality Rate\"]=(datewise[\"Deaths\"]\/datewise[\"Confirmed\"])*100\ndatewise[\"Recovery Rate\"]=(datewise[\"Recovered\"]\/datewise[\"Confirmed\"])*100\ndatewise[\"Active Cases\"]=datewise[\"Confirmed\"]-datewise[\"Recovered\"]-datewise[\"Deaths\"]\ndatewise[\"Closed Cases\"]=datewise[\"Recovered\"]+datewise[\"Deaths\"]\n\n#Calculating the Mortality Rate and Recovery Rate local\ndatewise_poland[\"Mortality Rate\"]=(datewise_poland[\"Deaths\"]\/datewise_poland[\"Confirmed\"])*100\ndatewise_poland[\"Recovery Rate\"]=(datewise_poland[\"Recovered\"]\/datewise_poland[\"Confirmed\"])*100\ndatewise_poland[\"Active Cases\"]=datewise_poland[\"Confirmed\"]-datewise_poland[\"Recovered\"]-datewise_poland[\"Deaths\"]\ndatewise_poland[\"Closed Cases\"]=datewise_poland[\"Recovered\"]+datewise_poland[\"Deaths\"]\n\n#Plotting Mortality and Recovery Rate \nfig, (ax1, ax2) = plt.subplots(1, 2,figsize=(25,8))\nax1.plot(datewise_poland[\"Mortality Rate\"],label='Taxa de mortalidade',linewidth=3)\nax1.axhline(datewise_poland[\"Mortality Rate\"].mean(),linestyle='--',color='black',label=\"Taxa M\u00e9dia de Mortalidade\")\nax1.set_ylabel(\"Taxa de mortalidade no \" + country +\".\")\nax1.set_xlabel(\"Periodo\")\nax1.set_title(\"Taxa global de mortalidade no \" + country +\".\")\nax1.legend()\n\nfor tick in ax1.get_xticklabels():\n    tick.set_rotation(90)\nax2.plot(datewise_poland[\"Recovery Rate\"],label=\"Taxa de recupera\u00e7\u00e3o\",linewidth=3)\nax2.axhline(datewise_poland[\"Recovery Rate\"].mean(),linestyle='--',color='black',label=\"Taxa M\u00e9dia de Recupera\u00e7\u00e3o\")\nax2.set_ylabel(\"Taxa de recupera\u00e7\u00e3o no \" + country +\".\")\nax2.set_xlabel(\"Periodo\")\nax2.set_title(\"Taxa de recupera\u00e7\u00e3o global no \" + country +\".\")\nax2.legend()\n\nfor tick in ax2.get_xticklabels():\n    tick.set_rotation(90)\n    \n\nprecision = 2\n#print( \"{:.{}f}\".format( pi, precision )) \n\nprint(\"Compara\u00e7\u00e3o entre as taxas m\u00e9dias de mortalidade e recupera\u00e7\u00e3o em todo o mundo e entre parenteses as m\u00e9dias no \" + country +\").\")\nprint()\n\nprint( \"Taxa M\u00e9dia de Mortalidade   :  {:.{}f}\".format( datewise[\"Mortality Rate\"].mean(), precision ) +\" ( {:.{}f}\".format( datewise_poland[\"Mortality Rate\"].mean(), precision )+\")\") \n#print( \"Taxa M\u00e9dia de Mortalidade   :  {:.{}f}\".format( datewise[\"Mortality Rate\"].median(), precision ) + \" ( {:.{}f}\".format( datewise_poland[\"Mortality Rate\"].median(), precision )+\")\")\nprint( \"Taxa M\u00e9dia de Recupera\u00e7\u00e3o   : {:.{}f}\".format( datewise[\"Recovery Rate\"].mean(), precision ) + \" ({:.{}f}\".format( datewise_poland[\"Recovery Rate\"].mean(), precision )+\")\")\n#print( \"Taxa de Recupera\u00e7\u00e3o Mediana :  {:.{}f}\".format( datewise[\"Recovery Rate\"].median(), precision ) + \" ( {:.{}f}\".format( datewise_poland[\"Recovery Rate\"].median(), precision )+\")\")\n\nplt.savefig('013br.png')","fff68dad":"print(\"Aumento m\u00e9dio di\u00e1rio no n\u00famero de casos confirmados : \",np.round(datewise_poland[\"Confirmed\"].diff().fillna(0).mean()))\nprint(\"Aumento m\u00e9dio di\u00e1rio no n\u00famero de casos recuperados:   \",np.round(datewise_poland[\"Recovered\"].diff().fillna(0).mean()))\nprint(\"Aumento m\u00e9dio di\u00e1rio no n\u00famero de mortes:              \",np.round(datewise_poland[\"Deaths\"].diff().fillna(0).mean()))","3ef33d14":"fig, (ax1,ax2) = plt.subplots(2, 1,figsize=(25,10))\nax1.plot(datewise_poland[\"Confirmed\"],marker='o',label=\"Casos confirmados\")\nax1.plot(datewise_poland[\"Recovered\"],marker='*',label=\"Recupera\u00e7\u00f5es\")\nax1.plot(datewise_poland[\"Deaths\"],marker='^',label=\"Casos de mortes\")\nax1.set_ylabel(\"N\u00famero de pacientes\")\nax1.set_xlabel(\"Data\")\nax1.legend()\nax1.set_title(\"Gr\u00e1fico de taxa de crescimento para diferentes tipos de casos no \" + country +\".\")\nfor tick in ax1.get_xticklabels():\n    tick.set_rotation(90)\nsns.barplot(datewise_poland.index.date,datewise_poland[\"Confirmed\"]-datewise_poland[\"Recovered\"]-datewise_poland[\"Deaths\"],ax=ax2)\nax2.set_xlabel(\"Data\")\nax2.set_ylabel(\"N\u00famero de Casos Ativos\")\nax2.set_title(\"Distribui\u00e7\u00e3o do n\u00famero de casos ativos por data\")\nfor tick in ax2.get_xticklabels():\n    tick.set_rotation(90)\n    \nplt.savefig('014br.png')","673a9f50":"poland_increase_confirm=[]\npoland_increase_recover=[]\npoland_increase_deaths=[]\nfor i in range(datewise_poland.shape[0]-1):\n    poland_increase_confirm.append(((datewise_poland[\"Confirmed\"].iloc[i+1])\/datewise_poland[\"Confirmed\"].iloc[i]))\n    poland_increase_recover.append(((datewise_poland[\"Recovered\"].iloc[i+1])\/datewise_poland[\"Recovered\"].iloc[i]))\n    poland_increase_deaths.append(((datewise_poland[\"Deaths\"].iloc[i+1])\/datewise_poland[\"Deaths\"].iloc[i]))\npoland_increase_confirm.insert(0,1)\npoland_increase_recover.insert(0,1)\npoland_increase_deaths.insert(0,1)","c6e9c05d":"datewise_poland[\"WeekOfYear\"]=datewise_poland.index.weekofyear\n\nweek_num_poland=[]\npoland_weekwise_confirmed=[]\npoland_weekwise_recovered=[]\npoland_weekwise_deaths=[]\nw=1\nfor i in list(datewise_poland[\"WeekOfYear\"].unique()):\n    poland_weekwise_confirmed.append(datewise_poland[datewise_poland[\"WeekOfYear\"]==i][\"Confirmed\"].iloc[-1])\n    poland_weekwise_recovered.append(datewise_poland[datewise_poland[\"WeekOfYear\"]==i][\"Recovered\"].iloc[-1])\n    poland_weekwise_deaths.append(datewise_poland[datewise_poland[\"WeekOfYear\"]==i][\"Deaths\"].iloc[-1])\n    week_num_poland.append(w)\n    w=w+1\n    \nplt.figure(figsize=(25,8))\nplt.plot(week_num_poland,poland_weekwise_confirmed,linewidth=3,label=\"Crescimento semanal dos casos confirmados\")\nplt.plot(week_num_poland,poland_weekwise_recovered,linewidth=3,label=\"Crescimento semanal das recupera\u00e7\u00f5es\")\nplt.plot(week_num_poland,poland_weekwise_deaths,linewidth=3,label=\"Crescimento semanal de casos de morte\")\nplt.xlabel('N\u00famero da semana')\nplt.ylabel(\"N\u00famero da casos\")\nplt.title(\"Crescimento semanal de diferentes tipos de casos no \" + country +\".\")\nplt.legend()\nplt.savefig('015br.png')","96af8edc":"fig, (ax1,ax2) = plt.subplots(1, 2,figsize=(25,8))\nsns.barplot(x=week_num_poland,y=pd.Series(poland_weekwise_confirmed).diff().fillna(0),ax=ax1)\nsns.barplot(x=week_num_poland,y=pd.Series(poland_weekwise_deaths).diff().fillna(0),ax=ax2)\nax1.set_xlabel(\"N\u00famero da semana\")\nax2.set_xlabel(\"N\u00famero da semana\")\nax1.set_ylabel(\"N\u00famero de Casos Confirmados\")\nax2.set_ylabel(\"N\u00famero de Casos de Morte\")\nax1.set_title(\"Aumento semanal do n\u00famero de casos confirmados no \" + country +\".\")\nax2.set_title(\"Aumento semanal do n\u00famero de casos de \u00f3bito no \" + country +\".\")\nplt.savefig('016br.png')","92976739":"max_ind=datewise_poland[\"Confirmed\"].max()\n#plt.figure(figsize=(25,8))\n#plt.plot(datewise_Italy[(datewise_Italy[\"Confirmed\"]>0)&(datewise_Italy[\"Confirmed\"]<=max_ind)][\"Confirmed\"],label=\"Confirmed Cases Italy\",linewidth=3)\n#plt.plot(datewise_US[(datewise_US[\"Confirmed\"]>0)&(datewise_US[\"Confirmed\"]<=max_ind)][\"Confirmed\"],label=\"Confirmed Cases USA\",linewidth=3)\n#plt.plot(datewise_Spain[(datewise_Spain[\"Confirmed\"]>0)&(datewise_Spain[\"Confirmed\"]<=max_ind)][\"Confirmed\"],label=\"Confirmed Cases Spain\",linewidth=3)\n#plt.plot(datewise_poland[datewise_poland[\"Confirmed\"]>0][\"Confirmed\"],label=\"Confirmed Cases in \" + country +\".\",linewidth=3)\n#plt.xlabel(\"Date\")\n#plt.ylabel(\"Number of Confirmed Cases\")\n#plt.title(\"Growth of Confirmed Cases in \" + country +\".\")\n#plt.legend()\n#plt.xticks(rotation=90)\n\n#print(\"It took\",datewise_Italy[(datewise_Italy[\"Confirmed\"]>0)&(datewise_Italy[\"Confirmed\"]<=max_ind)].shape[0],\"days in Italy to reach number of Confirmed Cases equivalent to \" + country +\"\")\n#print(\"It took\",datewise_US[(datewise_US[\"Confirmed\"]>0)&(datewise_US[\"Confirmed\"]<=max_ind)].shape[0],\"days in USA to reach number of Confirmed Cases equivalent to \" + country +\"\")\n#print(\"It took\",datewise_Spain[(datewise_Spain[\"Confirmed\"]>0)&(datewise_Spain[\"Confirmed\"]<=max_ind)].shape[0],\"days in Spain to reach number of Confirmed Cases equivalent to \" + country +\"\")\n#print(\"It took\",datewise_poland[datewise_poland[\"Confirmed\"]>0].shape[0],\"days in \" + country +\" to reach\",max_ind,\"Confirmed Cases\")","938a0e79":"#poland_data=covid[covid[\"Country\/Region\"]==\"Brazil\"]\ndatewise_poland=poland_data.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\nprint(datewise_poland.iloc[-1])\nprint(\"Total Active Cases: \",datewise_poland[\"Confirmed\"].iloc[-1]-datewise_poland[\"Recovered\"].iloc[-1]-datewise_poland[\"Deaths\"].iloc[-1])\nprint(\"Total Closed Cases: \",datewise_poland[\"Recovered\"].iloc[-1]+datewise_poland[\"Deaths\"].iloc[-1])","fa536e05":"datewise = datewise_poland\ndatewise[\"Days Since\"]=datewise.index-datewise.index[0]\ndatewise[\"Days Since\"]=datewise[\"Days Since\"].dt.days","35cdcf78":"train_ml=datewise.iloc[:int(datewise.shape[0]*0.90)]\nvalid_ml=datewise.iloc[int(datewise.shape[0]*0.90):]\nmodel_scores=[]","82d001e1":"lin_reg=LinearRegression(normalize=True)","e6639459":"lin_reg.fit(np.array(train_ml[\"Days Since\"]).reshape(-1,1),np.array(train_ml[\"Confirmed\"]).reshape(-1,1))","e36c2b8a":"prediction_valid_linreg=lin_reg.predict(np.array(valid_ml[\"Days Since\"]).reshape(-1,1))","cc1896f2":"model_scores.append(np.sqrt(mean_squared_error(valid_ml[\"Confirmed\"],prediction_valid_linreg)))\nprint(\"Root Mean Square Error for Linear Regression: \",np.sqrt(mean_squared_error(valid_ml[\"Confirmed\"],prediction_valid_linreg)))","3600f860":"plt.figure(figsize=(25,8))\nprediction_linreg=lin_reg.predict(np.array(datewise[\"Days Since\"]).reshape(-1,1))\nplt.plot(datewise[\"Confirmed\"],label=\"Actual Confirmed Cases\")\nplt.plot(datewise.index,prediction_linreg, linestyle='--',label=\"Predicted Confirmed Cases using Linear Regression\",color='black')\nplt.xlabel('Time')\nplt.ylabel('Confirmed Cases')\nplt.title(\"Confirmed Cases Linear Regression Prediction in \" + country +\".\")\nplt.xticks(rotation=90)\nplt.legend()","e66d8f3a":"#Intializing SVR Model and with hyperparameters for GridSearchCV\nsvm=SVR(C=1,degree=6,kernel='poly',epsilon=0.01)","70f6c0c9":"#Performing GridSearchCV to find the Best Estimator\nsvm.fit(np.array(train_ml[\"Days Since\"]).reshape(-1,1),np.array(train_ml[\"Confirmed\"]).reshape(-1,1))","c55be8ee":"prediction_valid_svm=svm.predict(np.array(valid_ml[\"Days Since\"]).reshape(-1,1))","4cdab3b3":"model_scores.append(np.sqrt(mean_squared_error(valid_ml[\"Confirmed\"],prediction_valid_svm)))\n\nprecision = 2\n#print( \"{:.{}f}\".format( pi, precision )) \n\nprint( \"Root Mean Square Error for Support Vectore Machine: {:.{}f}\".format( np.sqrt(mean_squared_error(valid_ml[\"Confirmed\"],prediction_valid_svm)), precision ))","4e3a6434":"plt.figure(figsize=(25,8))\nprediction_svm=svm.predict(np.array(datewise[\"Days Since\"]).reshape(-1,1))\nplt.plot(datewise[\"Confirmed\"],label=\"Train Confirmed Cases\",linewidth=3)\nplt.plot(datewise.index,prediction_svm, linestyle='--',label=\"Best Fit for SVR\",color='black')\nplt.xlabel('Time')\nplt.ylabel('Confirmed Cases')\nplt.title(\"Confirmed Cases Support Vector Machine Regressor Prediction in \" + country +\".\")\nplt.xticks(rotation=90)\nplt.legend()","b0c7306a":"new_date=[]\nnew_prediction_lr=[]\nnew_prediction_svm=[]\nfor i in range(1,18):\n    new_date.append(datewise.index[-1]+timedelta(days=i))\n    new_prediction_lr.append(lin_reg.predict(np.array(datewise[\"Days Since\"].max()+i).reshape(-1,1))[0][0])\n    new_prediction_svm.append(svm.predict(np.array(datewise[\"Days Since\"].max()+i).reshape(-1,1))[0])","c0520745":"pd.set_option('precision', 0)\npd.options.display.float_format = '{:,.0f}'.format\npd.set_option('display.float_format', lambda x: '%.6f' % x)\nmodel_predictions=pd.DataFrame(zip(new_date,new_prediction_lr,new_prediction_svm),columns=[\"Dates\",\"Linear Regression Prediction\",\"SVM Prediction\"])\n#model_predictions.head()","12d5bbd1":"df = pd.DataFrame(zip(new_date,new_prediction_lr,new_prediction_svm),columns=[\"Dates\",\"Linear Regression Prediction\",\"SVM Prediction\"])\n\ndf['Dates'] = pd.to_datetime(df['Dates'])\npd.options.display.float_format = '{:,.0f}'.format\npd.set_option('precision', 0)\n\n#df = df[(df['yhat']>0)]\ndf.rename(columns={'Linear Regression Prediction': 'LRP', 'SVM Prediction': 'SVM'}, inplace=True)\n#df","34e20945":"model_train=datewise.iloc[:int(datewise.shape[0]*0.90)]\nvalid=datewise.iloc[int(datewise.shape[0]*0.90):]","a05c0fff":"holt=Holt(np.asarray(model_train[\"Confirmed\"])).fit(smoothing_level=1.3, smoothing_slope=0.9)\ny_pred=valid.copy()","a80794e3":"y_pred[\"Holt\"]=holt.forecast(len(valid))\nmodel_scores.append(np.sqrt(mean_squared_error(y_pred[\"Confirmed\"],y_pred[\"Holt\"])))\n\nprecision = 2\n#print( \"{:.{}f}\".format( pi, precision )) \n\nprint( \"Root Mean Square Error Holt's Linear Model: {:.{}f}\".format( np.sqrt(mean_squared_error(y_pred[\"Confirmed\"],y_pred[\"Holt\"])), precision ))","f85348a4":"plt.figure(figsize=(25,8))\nplt.plot(model_train.Confirmed,label=\"Train Set\",marker='o')\nvalid.Confirmed.plot(label=\"Validation Set\",marker='*')\ny_pred.Holt.plot(label=\"Holt's Linear Model Predicted Set\",marker='^')\nplt.ylabel(\"Confirmed Cases\")\nplt.xlabel(\"Date Time\")\nplt.title(\"Confirmed Holt's Linear Model Prediction in \" + country +\".\")\nplt.xticks(rotation=90)\nplt.legend()","e6285f6f":"holt_new_date=[]\nholt_new_prediction=[]\nfor i in range(1,18):\n    holt_new_date.append(datewise.index[-1]+timedelta(days=i))\n    holt_new_prediction.append(holt.forecast((len(valid)+i))[-1])\n\nmodel_predictions[\"Holts Linear Model Prediction\"]=holt_new_prediction\n#model_predictions.head()","e2f471b3":"df = pd.DataFrame(model_predictions,columns=[\"Dates\",\"Linear Regression Prediction\",\"SVM Prediction\",\"Holts Linear Model Prediction\"])\n\ndf['Dates'] = pd.to_datetime(df['Dates'])\npd.options.display.float_format = '{:,.0f}'.format\npd.set_option('precision', 0)\n\n#df = df[(df['yhat']>0)]\ndf.rename(columns={'Linear Regression Prediction': 'LRP', 'SVM Prediction': 'SVM','Holts Linear Model Prediction': 'Holts'}, inplace=True)\n#df","8c9424bf":"model_train=datewise.iloc[:int(datewise.shape[0]*0.90)]\nvalid=datewise.iloc[int(datewise.shape[0]*0.90):]\ny_pred=valid.copy()","b9b5424e":"es=ExponentialSmoothing(np.asarray(model_train['Confirmed']),seasonal_periods=5,trend='add', seasonal='add').fit()","22b84475":"y_pred[\"Holt's Winter Model\"]=es.forecast(len(valid))","18b16390":"model_scores.append(np.sqrt(mean_squared_error(y_pred[\"Confirmed\"],y_pred[\"Holt's Winter Model\"])))\n\nprecision = 2\n#print( \"{:.{}f}\".format( pi, precision )) \n\nprint( \"Root Mean Square Error for Holt's Winter Model: {:.{}f}\".format( np.sqrt(mean_squared_error(y_pred[\"Confirmed\"],y_pred[\"Holt's Winter Model\"])), precision ))","d7f21915":"plt.figure(figsize=(25,8))\nplt.plot(model_train.Confirmed,label=\"Train Set\",marker='o')\nvalid.Confirmed.plot(label=\"Validation Set\",marker='*')\ny_pred[\"Holt\\'s Winter Model\"].plot(label=\"Holt's Winter Model Predicted Set\",marker='^')\nplt.ylabel(\"Confirmed Cases\")\nplt.xlabel(\"Date Time\")\nplt.title(\"Confiremd Cases Holt's Winter Model Prediction\")\nplt.xticks(rotation=90)\nplt.legend()","0ef2d6c4":"holt_winter_new_prediction=[]\nfor i in range(1,18):\n    holt_winter_new_prediction.append(es.forecast((len(valid)+i))[-1])\nmodel_predictions[\"Holts Winter Model Prediction\"]=holt_winter_new_prediction\nmodel_predictions.head()\n#model_predictions","50cde7a1":"df = pd.DataFrame(model_predictions,columns=[\"Dates\",\"Linear Regression Prediction\",\"SVM Prediction\"\\\n                                             ,\"Holts Linear Model Prediction\",\"Holts Winter Model Prediction\"])\n\ndf['Dates'] = pd.to_datetime(df['Dates'])\npd.options.display.float_format = '{:,.0f}'.format\npd.set_option('precision', 0)\n\n#df = df[(df['yhat']>0)]\ndf.rename(columns={'Linear Regression Prediction': 'LRP', 'SVM Prediction': 'SVM','Holts Linear Model Prediction': 'HLM'\\\n,'Holts Winter Model Prediction': 'HWM'}, inplace=True)\ndf","07c93953":"y_pred[\"Holt\\'s Winter Model\"].head()","416e81b9":"model_train=datewise.iloc[:int(datewise.shape[0]*0.90)]\nvalid=datewise.iloc[int(datewise.shape[0]*0.90):]\ny_pred=valid.copy()","96c9e88e":"from pandas.plotting import autocorrelation_plot\nplt.figure(figsize=(25,8))\nautocorrelation_plot(datewise[\"Confirmed\"])","13773c57":"#fig, (ax1,ax2,ax3) = plt.subplots(3, 1,figsize=(11,7))\n#import statsmodels.api as sm\n#results=sm.tsa.seasonal_decompose(model_train[\"Confirmed\"])\n#ax1.plot(results.trend)\n#ax2.plot(results.seasonal)\n#ax3.plot(results.resid)","f32b6112":"print(\"Results of Dickey-Fuller test for Original Time Series\")\ndftest = adfuller(model_train[\"Confirmed\"], autolag='AIC')\ndfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\nfor key,value in dftest[4].items():\n    dfoutput['Critical Value (%s)'%key] = value\nprint(dfoutput)","1c28ac6f":"log_series=np.log(model_train[\"Confirmed\"])","56cadf91":"prophet_c=Prophet(interval_width=0.95,weekly_seasonality=True,)\nprophet_confirmed=pd.DataFrame(zip(list(datewise.index),list(datewise[\"Confirmed\"])),columns=['ds','y'])","40d39dcd":"prophet_c.fit(prophet_confirmed)","89f823a7":"forecast_c=prophet_c.make_future_dataframe(periods=17)\nforecast_confirmed=forecast_c.copy()","107817e7":"confirmed_forecast=prophet_c.predict(forecast_c)\n#print(confirmed_forecast[['ds','yhat', 'yhat_lower', 'yhat_upper']])","6226dd3c":"model_scores.append(np.sqrt(mean_squared_error(datewise[\"Confirmed\"],confirmed_forecast['yhat'].head(datewise.shape[0]))))\n\nprecision = 2\n#print( \"{:.{}f}\".format( pi, precision )) \n\nprint( \"Root Mean Squared Error for Prophet Model: {:.{}f}\".format( np.sqrt(mean_squared_error(datewise[\"Confirmed\"],confirmed_forecast['yhat'].head(datewise.shape[0]))), precision ))","04373d6a":"print(prophet_c.plot(confirmed_forecast))","f9235760":"print(prophet_c.plot_components(confirmed_forecast))","5667f2b9":"model_names=[\"Linear Regression\",\"Support Vector Machine Regressor\",\"Holt's Linear\",\"Holt's Winter Model\",\n            \"Auto Regressive Model (AR)\",\"Moving Average Model (MA)\",\"ARIMA Model\",\"Facebook's Prophet Model\"]\npd.DataFrame(zip(model_names,model_scores),columns=[\"Model Name\",\"Root Mean Squared Error\"]).sort_values([\"Root Mean Squared Error\"])\nprint(datewise_poland.iloc[-1])","782e6e30":"model_predictions[\"Prophet's Prediction\"]=list(confirmed_forecast[\"yhat\"].tail(17))\nmodel_predictions[\"Prophet's Upper Bound\"]=list(confirmed_forecast[\"yhat_upper\"].tail(17))\n#model_predictions.head()","5f388294":"df = pd.DataFrame(model_predictions,columns=[\"Dates\",\"Linear Regression Prediction\"\\\n                                             ,\"SVM Prediction\",\"Holts Linear Model Prediction\",\"Holts Winter Model Prediction\",\"Prophet's Prediction\",\"Prophet's Upper Bound\"])\n\ndf['Dates'] = pd.to_datetime(df['Dates'])\npd.options.display.float_format = '{:,.0f}'.format\npd.set_option('precision', 0)\n\n#df = df[(df['yhat']>0)]\ndf.rename(columns={'Linear Regression Prediction': 'LRP', 'SVM Prediction': 'SVM','Holts Linear Model Prediction': 'HLM'\\\n,'Holts Winter Model Prediction': 'HWM','Prophet\\'s Prediction': 'Prophet','Prophet\\'s Upper Bound': 'PUB'}, inplace=True)\nforecast_table = df\n\ndf","43afd189":"from datetime import date\n\ntoday = date.today()\n#print(\"Today's date:\", today)\n\nstart_date = today\nend_date = today\ndf = forecast_table\nafter_start_date = df[\"Dates\"] >= start_date\nbefore_end_date = df[\"Dates\"] <= end_date\nbetween_two_dates = after_start_date & before_end_date\nfiltered_dates = df.loc[between_two_dates]\n\ntodays_cases_forecast = filtered_dates\n\nfiltered_dates","1a543150":"def closest(lst, K): \n      \n    return lst[min(range(len(lst)), key = lambda i: abs(lst[i]-K))] \n      \n# Driver code\nRecovered = int(datewise_poland[\"Confirmed\"].iloc[-1])\nlst =  [int(todays_cases_forecast.LRP),int(todays_cases_forecast.SVM),int(todays_cases_forecast.HLM),int(todays_cases_forecast.HWM)\\\n        ,int(todays_cases_forecast.Prophet),int(todays_cases_forecast.PUB)]\nK = int(datewise_poland[\"Confirmed\"].iloc[-1])\n\n# Visualization code\nprint(\"N\u00famero real de casos confirmados no \" + country +\":    \" + str(Recovered))\n\nprint(\"Previs\u00e3o para o dia \" + str(today) + \":  \" + str(int(closest(lst, K))))","8efb9dc5":"df = pd.DataFrame(model_predictions,columns=[\"Dates\",\"Prophet\\'s Upper Bound\"])\n\ndf['Dates'] = pd.to_datetime(df['Dates'])\npd.options.display.float_format = '{:,.0f}'.format\npd.set_option('precision', 0)\n\n#df = df[(df['yhat']>0)]\ndf.rename(columns={'Prophet\\'s Upper Bound': 'Forecast'}, inplace=True)\nforecast_table = df\ncases_forecast = df\ndf","5289e445":"plt.figure(figsize=(25,8))\nplt.plot(datewise[\"Confirmed\"],label=\"Actual Cases\")\nplt.bar(df.Dates, df.Forecast, color='royalblue', alpha=0.7)\n\n\nplt.grid(color='#95a5a6', linestyle='--', linewidth=2, axis='y', alpha=0.7)\nplt.legend(['Confirmed Cases until '+ str(today)])\n\n\nplt.show()","75e7f239":"#poland_data=covid[covid[\"Country\/Region\"]==\"Brazil\"]\ndatewise_poland=poland_data.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\nprint(datewise_poland.iloc[-1])\nprint(\"Total Active Cases: \",datewise_poland[\"Confirmed\"].iloc[-1]-datewise_poland[\"Recovered\"].iloc[-1]-datewise_poland[\"Deaths\"].iloc[-1])\nprint(\"Total Closed Cases: \",datewise_poland[\"Recovered\"].iloc[-1]+datewise_poland[\"Deaths\"].iloc[-1])","4ee4fb02":"datewise = datewise_poland\ndatewise[\"Days Since\"]=datewise.index-datewise.index[0]\ndatewise[\"Days Since\"]=datewise[\"Days Since\"].dt.days","85e66056":"train_ml=datewise.iloc[:int(datewise.shape[0]*0.90)]\nvalid_ml=datewise.iloc[int(datewise.shape[0]*0.90):]\nmodel_scores=[]","605751c1":"lin_reg=LinearRegression(normalize=True)","f7158505":"lin_reg.fit(np.array(train_ml[\"Days Since\"]).reshape(-1,1),np.array(train_ml[\"Deaths\"]).reshape(-1,1))","49d57a91":"prediction_valid_linreg=lin_reg.predict(np.array(valid_ml[\"Days Since\"]).reshape(-1,1))","77491ea8":"model_scores.append(np.sqrt(mean_squared_error(valid_ml[\"Deaths\"],prediction_valid_linreg)))\nprint(\"Root Mean Square Error for Linear Regression: \",np.sqrt(mean_squared_error(valid_ml[\"Deaths\"],prediction_valid_linreg)))","d5cfb399":"plt.figure(figsize=(20,6))\nprediction_linreg=lin_reg.predict(np.array(datewise[\"Days Since\"]).reshape(-1,1))\nplt.plot(datewise[\"Deaths\"],label=\"Actual Confirmed Cases\")\nplt.plot(datewise.index,prediction_linreg, linestyle='--',label=\"Predicted Deaths using Linear Regression\",color='black')\nplt.xlabel('Time')\nplt.ylabel('Deaths')\nplt.title(\"Deaths Linear Regression Prediction in \" + country +\".\")\nplt.xticks(rotation=90)\nplt.legend()","239a9afb":"#Intializing SVR Model and with hyperparameters for GridSearchCV\nsvm=SVR(C=1,degree=6,kernel='poly',epsilon=0.01)","519301c6":"#Performing GridSearchCV to find the Best Estimator\nsvm.fit(np.array(train_ml[\"Days Since\"]).reshape(-1,1),np.array(train_ml[\"Deaths\"]).reshape(-1,1))","94887b4a":"prediction_valid_svm=svm.predict(np.array(valid_ml[\"Days Since\"]).reshape(-1,1))","fe8556a7":"model_scores.append(np.sqrt(mean_squared_error(valid_ml[\"Deaths\"],prediction_valid_svm)))\n\nprecision = 2\n#print( \"{:.{}f}\".format( pi, precision )) \n\nprint( \"Root Mean Square Error for Support Vectore Machine: {:.{}f}\".format( np.sqrt(mean_squared_error(valid_ml[\"Deaths\"],prediction_valid_svm)), precision ))","05cdac5a":"plt.figure(figsize=(20,6))\nprediction_svm=svm.predict(np.array(datewise[\"Days Since\"]).reshape(-1,1))\nplt.plot(datewise[\"Deaths\"],label=\"Train cases of Deaths\",linewidth=3)\nplt.plot(datewise.index,prediction_svm, linestyle='--',label=\"Best Fit for SVR\",color='black')\nplt.xlabel('Time')\nplt.ylabel('Deaths')\nplt.title(\"Deaths Support Vector Machine Regressor Prediction in \" + country +\".\")\nplt.xticks(rotation=90)\nplt.legend()","52f19139":"new_date=[]\nnew_prediction_lr=[]\nnew_prediction_svm=[]\nfor i in range(1,18):\n    new_date.append(datewise.index[-1]+timedelta(days=i))\n    new_prediction_lr.append(lin_reg.predict(np.array(datewise[\"Days Since\"].max()+i).reshape(-1,1))[0][0])\n    new_prediction_svm.append(svm.predict(np.array(datewise[\"Days Since\"].max()+i).reshape(-1,1))[0])","061a6968":"pd.set_option('precision', 0)\npd.options.display.float_format = '{:,.0f}'.format\npd.set_option('display.float_format', lambda x: '%.6f' % x)\nmodel_predictions=pd.DataFrame(zip(new_date,new_prediction_lr,new_prediction_svm),columns=[\"Dates\",\"Linear Regression Prediction\",\"SVM Prediction\"])\n#model_predictions.head()","3a3d486d":"df = pd.DataFrame(zip(new_date,new_prediction_lr,new_prediction_svm),columns=[\"Dates\",\"Linear Regression Prediction\",\"SVM Prediction\"])\n\ndf['Dates'] = pd.to_datetime(df['Dates'])\npd.options.display.float_format = '{:,.0f}'.format\npd.set_option('precision', 0)\n\n#df = df[(df['yhat']>0)]\ndf.rename(columns={'Linear Regression Prediction': 'LRP', 'SVM Prediction': 'SVM'}, inplace=True)\n#df","4d337ab9":"model_train=datewise.iloc[:int(datewise.shape[0]*0.90)]\nvalid=datewise.iloc[int(datewise.shape[0]*0.90):]","45b851f7":"holt=Holt(np.asarray(model_train[\"Deaths\"])).fit(smoothing_level=1.3, smoothing_slope=0.9)\ny_pred=valid.copy()","65af0492":"y_pred[\"Holt\"]=holt.forecast(len(valid))\nmodel_scores.append(np.sqrt(mean_squared_error(y_pred[\"Deaths\"],y_pred[\"Holt\"])))\n\nprecision = 2\n#print( \"{:.{}f}\".format( pi, precision )) \n\nprint( \"Root Mean Square Error Holt's Linear Model: {:.{}f}\".format( np.sqrt(mean_squared_error(y_pred[\"Deaths\"],y_pred[\"Holt\"])), precision ))","d7fa9773":"plt.figure(figsize=(20,5))\nplt.plot(model_train.Deaths,label=\"Train Set\",marker='o')\nvalid.Deaths.plot(label=\"Validation Set\",marker='*')\ny_pred.Holt.plot(label=\"Holt's Linear Model Predicted Set\",marker='^')\nplt.ylabel(\"Deaths\")\nplt.xlabel(\"Date Time\")\nplt.title(\"Deaths Holt's Linear Model Prediction in \" + country +\".\")\nplt.xticks(rotation=90)\nplt.legend()","9a964e67":"holt_new_date=[]\nholt_new_prediction=[]\nfor i in range(1,18):\n    holt_new_date.append(datewise.index[-1]+timedelta(days=i))\n    holt_new_prediction.append(holt.forecast((len(valid)+i))[-1])\n\nmodel_predictions[\"Holts Linear Model Prediction\"]=holt_new_prediction\n#model_predictions.head()","9849baa0":"df = pd.DataFrame(model_predictions,columns=[\"Dates\",\"Linear Regression Prediction\",\"SVM Prediction\",\"Holts Linear Model Prediction\"])\n\ndf['Dates'] = pd.to_datetime(df['Dates'])\npd.options.display.float_format = '{:,.0f}'.format\npd.set_option('precision', 0)\n\n#df = df[(df['yhat']>0)]\ndf.rename(columns={'Linear Regression Prediction': 'LRP', 'SVM Prediction': 'SVM','Holts Linear Model Prediction': 'Holts'}, inplace=True)\n#df","2e395b3b":"model_train=datewise.iloc[:int(datewise.shape[0]*0.90)]\nvalid=datewise.iloc[int(datewise.shape[0]*0.90):]\ny_pred=valid.copy()","b121e8f7":"es=ExponentialSmoothing(np.asarray(model_train['Deaths']),seasonal_periods=5,trend='add', seasonal='add').fit()","68714132":"y_pred[\"Holt's Winter Model\"]=es.forecast(len(valid))","31bc0757":"model_scores.append(np.sqrt(mean_squared_error(y_pred[\"Deaths\"],y_pred[\"Holt's Winter Model\"])))\n\nprecision = 2\n#print( \"{:.{}f}\".format( pi, precision )) \n\nprint( \"Root Mean Square Error for Holt's Winter Model: {:.{}f}\".format( np.sqrt(mean_squared_error(y_pred[\"Deaths\"],y_pred[\"Holt's Winter Model\"])), precision ))","62806a6c":"plt.figure(figsize=(20,5))\nplt.plot(model_train.Deaths,label=\"Train Set\",marker='o')\nvalid.Deaths.plot(label=\"Validation Set\",marker='*')\ny_pred[\"Holt\\'s Winter Model\"].plot(label=\"Holt's Winter Model Predicted Set\",marker='^')\nplt.ylabel(\"Deaths\")\nplt.xlabel(\"Date Time\")\nplt.title(\"Deaths Cases Holt's Winter Model Prediction\")\nplt.xticks(rotation=90)\nplt.legend()","34aa9088":"holt_winter_new_prediction=[]\nfor i in range(1,18):\n    holt_winter_new_prediction.append(es.forecast((len(valid)+i))[-1])\nmodel_predictions[\"Holts Winter Model Prediction\"]=holt_winter_new_prediction\nmodel_predictions.head()\n#model_predictions","d744ff96":"df = pd.DataFrame(model_predictions,columns=[\"Dates\",\"Linear Regression Prediction\",\"SVM Prediction\"\\\n                                             ,\"Holts Linear Model Prediction\",\"Holts Winter Model Prediction\"])\n\ndf['Dates'] = pd.to_datetime(df['Dates'])\npd.options.display.float_format = '{:,.0f}'.format\npd.set_option('precision', 0)\n\n#df = df[(df['yhat']>0)]\ndf.rename(columns={'Linear Regression Prediction': 'LRP', 'SVM Prediction': 'SVM','Holts Linear Model Prediction': 'HLM'\\\n,'Holts Winter Model Prediction': 'HWM'}, inplace=True)\ndf","31c83ac6":"y_pred[\"Holt\\'s Winter Model\"].head()","f5307c7d":"model_train=datewise.iloc[:int(datewise.shape[0]*0.90)]\nvalid=datewise.iloc[int(datewise.shape[0]*0.90):]\ny_pred=valid.copy()","f3e68072":"from pandas.plotting import autocorrelation_plot\nplt.figure(figsize=(20, 5))\nautocorrelation_plot(datewise[\"Deaths\"])","4d768481":"#fig, (ax1,ax2,ax3) = plt.subplots(3, 1,figsize=(11,7))\n#import statsmodels.api as sm\n#results=sm.tsa.seasonal_decompose(model_train[\"Confirmed\"])\n#ax1.plot(results.trend)\n#ax2.plot(results.seasonal)\n#ax3.plot(results.resid)","8ed7d179":"print(\"Results of Dickey-Fuller test for Original Time Series\")\ndftest = adfuller(model_train[\"Deaths\"], autolag='AIC')\ndfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\nfor key,value in dftest[4].items():\n    dfoutput['Critical Value (%s)'%key] = value\nprint(dfoutput)","07eab8a3":"log_series=np.log(model_train[\"Deaths\"])","8bf7bd0b":"prophet_c=Prophet(interval_width=0.95,weekly_seasonality=True,)\nprophet_Deaths=pd.DataFrame(zip(list(datewise.index),list(datewise[\"Deaths\"])),columns=['ds','y'])","6be98c69":"prophet_c.fit(prophet_Deaths)","b63f5aa0":"forecast_c=prophet_c.make_future_dataframe(periods=17)\nforecast_Deaths=forecast_c.copy()","7817cdd0":"Deaths_forecast=prophet_c.predict(forecast_c)\n#print(confirmed_forecast[['ds','yhat', 'yhat_lower', 'yhat_upper']])","b251cb6a":"model_scores.append(np.sqrt(mean_squared_error(datewise[\"Deaths\"],Deaths_forecast['yhat'].head(datewise.shape[0]))))\n\nprecision = 2\n#print( \"{:.{}f}\".format( pi, precision )) \n\nprint( \"Root Mean Squared Error for Prophet Model: {:.{}f}\".format( np.sqrt(mean_squared_error(datewise[\"Deaths\"],Deaths_forecast['yhat'].head(datewise.shape[0]))), precision ))","b8dd3719":"print(prophet_c.plot(Deaths_forecast))","94e707e8":"print(prophet_c.plot_components(Deaths_forecast))","798cd63c":"model_names=[\"Linear Regression\",\"Support Vector Machine Regressor\",\"Holt's Linear\",\"Holt's Winter Model\",\n            \"Auto Regressive Model (AR)\",\"Moving Average Model (MA)\",\"ARIMA Model\",\"Facebook's Prophet Model\"]\npd.DataFrame(zip(model_names,model_scores),columns=[\"Model Name\",\"Root Mean Squared Error\"]).sort_values([\"Root Mean Squared Error\"])\nprint(datewise_poland.iloc[-1])","bb9ea97b":"model_predictions[\"Prophet's Prediction\"]=list(Deaths_forecast[\"yhat\"].tail(17))\nmodel_predictions[\"Prophet's Upper Bound\"]=list(Deaths_forecast[\"yhat_upper\"].tail(17))\n#model_predictions.head()","cba168f2":"df = pd.DataFrame(model_predictions,columns=[\"Dates\",\"Linear Regression Prediction\",\"SVM Prediction\"\\\n                                             ,\"Holts Linear Model Prediction\",\"Holts Winter Model Prediction\",\"Prophet's Prediction\",\"Prophet's Upper Bound\"])\n\ndf['Dates'] = pd.to_datetime(df['Dates'])\npd.options.display.float_format = '{:,.0f}'.format\npd.set_option('precision', 0)\n\n#df = df[(df['yhat']>0)]\ndf.rename(columns={'Linear Regression Prediction': 'LRP', 'SVM Prediction': 'SVM','Holts Linear Model Prediction': 'HLM'\\\n,'Holts Winter Model Prediction': 'HWM','Prophet\\'s Prediction': 'Prophet','Prophet\\'s Upper Bound': 'PUB'}, inplace=True)\nforecast_table = df\n\ndf","6663bbe9":"from datetime import date\n\ntoday = date.today()\n#print(\"Today's date:\", today)\n\nstart_date = today\nend_date = today\ndf = forecast_table\nafter_start_date = df[\"Dates\"] >= start_date\nbefore_end_date = df[\"Dates\"] <= end_date\nbetween_two_dates = after_start_date & before_end_date\nfiltered_dates = df.loc[between_two_dates]\n\nfiltered_dates","f2837db9":"def closest(lst, K): \n      \n    return lst[min(range(len(lst)), key = lambda i: abs(lst[i]-K))] \n      \n# Driver code\nDeaths = int(datewise_poland[\"Deaths\"].iloc[-1])\nlst =  [int(filtered_dates.LRP),int(filtered_dates.SVM),int(filtered_dates.HLM),int(filtered_dates.HWM),int(filtered_dates.Prophet),int(filtered_dates.PUB)]\nK = int(datewise_poland[\"Deaths\"].iloc[-1])\n\n# Visualization code\nprint(\"N\u00famero confirmado de mortes no \" + country +\":    \" + str(Deaths))\n\nprint(\"Previs\u00e3o para o dia \" + str(today) + \":   \" + str(int(closest(lst, K))))","e0f2af6c":"df = pd.DataFrame(model_predictions,columns=[\"Dates\",\"Prophet\\'s Upper Bound\"])\n\ndf['Dates'] = pd.to_datetime(df['Dates'])\npd.options.display.float_format = '{:,.0f}'.format\npd.set_option('precision', 0)\n\n#df = df[(df['yhat']>0)]\ndf.rename(columns={'Prophet\\'s Upper Bound': 'Deaths Forecast'}, inplace=True)\nforecast_table = df\ndeaths_forecast = df\ndf","70df76fc":"datewise_poland=poland_data.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\nprint(datewise_poland.iloc[-1])\nprint(\"Total Active Cases: \",datewise_poland[\"Confirmed\"].iloc[-1]-datewise_poland[\"Recovered\"].iloc[-1]-datewise_poland[\"Deaths\"].iloc[-1])\nprint(\"Total Closed Cases: \",datewise_poland[\"Recovered\"].iloc[-1]+datewise_poland[\"Deaths\"].iloc[-1])","6e0853d2":"datewise = datewise_poland\ndatewise[\"Days Since\"]=datewise.index-datewise.index[0]\ndatewise[\"Days Since\"]=datewise[\"Days Since\"].dt.days","0ddf9a2a":"train_ml=datewise.iloc[:int(datewise.shape[0]*0.90)]\nvalid_ml=datewise.iloc[int(datewise.shape[0]*0.90):]\nmodel_scores=[]","f4da65dc":"lin_reg=LinearRegression(normalize=True)","83882803":"lin_reg.fit(np.array(train_ml[\"Days Since\"]).reshape(-1,1),np.array(train_ml[\"Recovered\"]).reshape(-1,1))","d3d7872d":"prediction_valid_linreg=lin_reg.predict(np.array(valid_ml[\"Days Since\"]).reshape(-1,1))","42c3b126":"model_scores.append(np.sqrt(mean_squared_error(valid_ml[\"Recovered\"],prediction_valid_linreg)))\nprint(\"Root Mean Square Error for Linear Regression: \",np.sqrt(mean_squared_error(valid_ml[\"Recovered\"],prediction_valid_linreg)))","e3d50238":"plt.figure(figsize=(20,6))\nprediction_linreg=lin_reg.predict(np.array(datewise[\"Days Since\"]).reshape(-1,1))\nplt.plot(datewise[\"Recovered\"],label=\"Actual Recovered Cases\")\nplt.plot(datewise.index,prediction_linreg, linestyle='--',label=\"Predicted Recoverings using Linear Regression\",color='black')\nplt.xlabel('Time')\nplt.ylabel('Recovered')\nplt.title(\"Recovered Linear Regression Prediction in \" + country +\".\")\nplt.xticks(rotation=90)\nplt.legend()","a78ec81d":"#Intializing SVR Model and with hyperparameters for GridSearchCV\nsvm=SVR(C=1,degree=6,kernel='poly',epsilon=0.01)","c4bc149b":"#Performing GridSearchCV to find the Best Estimator\nsvm.fit(np.array(train_ml[\"Days Since\"]).reshape(-1,1),np.array(train_ml[\"Recovered\"]).reshape(-1,1))","0919bff9":"prediction_valid_svm=svm.predict(np.array(valid_ml[\"Days Since\"]).reshape(-1,1))","5095987f":"model_scores.append(np.sqrt(mean_squared_error(valid_ml[\"Recovered\"],prediction_valid_svm)))\n\nprecision = 2\n#print( \"{:.{}f}\".format( pi, precision )) \n\nprint( \"Root Mean Square Error for Support Vectore Machine: {:.{}f}\".format( np.sqrt(mean_squared_error(valid_ml[\"Recovered\"],prediction_valid_svm)), precision ))","aa41e4d4":"plt.figure(figsize=(20,6))\nprediction_svm=svm.predict(np.array(datewise[\"Days Since\"]).reshape(-1,1))\nplt.plot(datewise[\"Recovered\"],label=\"Train cases of Recovered cases\",linewidth=3)\nplt.plot(datewise.index,prediction_svm, linestyle='--',label=\"Best Fit for SVR\",color='black')\nplt.xlabel('Time')\nplt.ylabel('Recovered')\nplt.title(\"Recovered Support Vector Machine Regressor Prediction in \" + country +\".\")\nplt.xticks(rotation=90)\nplt.legend()","86de75f0":"new_date=[]\nnew_prediction_lr=[]\nnew_prediction_svm=[]\nfor i in range(1,18):\n    new_date.append(datewise.index[-1]+timedelta(days=i))\n    new_prediction_lr.append(lin_reg.predict(np.array(datewise[\"Days Since\"].max()+i).reshape(-1,1))[0][0])\n    new_prediction_svm.append(svm.predict(np.array(datewise[\"Days Since\"].max()+i).reshape(-1,1))[0])","be0f8630":"pd.set_option('precision', 0)\npd.options.display.float_format = '{:,.0f}'.format\npd.set_option('display.float_format', lambda x: '%.6f' % x)\nmodel_predictions=pd.DataFrame(zip(new_date,new_prediction_lr,new_prediction_svm),columns=[\"Dates\",\"Linear Regression Prediction\",\"SVM Prediction\"])\n#model_predictions.head()","8dd879d4":"df = pd.DataFrame(zip(new_date,new_prediction_lr,new_prediction_svm),columns=[\"Dates\",\"Linear Regression Prediction\",\"SVM Prediction\"])\n\ndf['Dates'] = pd.to_datetime(df['Dates'])\npd.options.display.float_format = '{:,.0f}'.format\npd.set_option('precision', 0)\n\n#df = df[(df['yhat']>0)]\ndf.rename(columns={'Linear Regression Prediction': 'LRP', 'SVM Prediction': 'SVM'}, inplace=True)\n#df","85f6ce05":"model_train=datewise.iloc[:int(datewise.shape[0]*0.90)]\nvalid=datewise.iloc[int(datewise.shape[0]*0.90):]","0876120c":"holt=Holt(np.asarray(model_train[\"Recovered\"])).fit(smoothing_level=1.3, smoothing_slope=0.9)\ny_pred=valid.copy()","4f4897e1":"y_pred[\"Holt\"]=holt.forecast(len(valid))\nmodel_scores.append(np.sqrt(mean_squared_error(y_pred[\"Recovered\"],y_pred[\"Holt\"])))\n\nprecision = 2\n#print( \"{:.{}f}\".format( pi, precision )) \n\nprint( \"Root Mean Square Error Holt's Linear Model: {:.{}f}\".format( np.sqrt(mean_squared_error(y_pred[\"Recovered\"],y_pred[\"Holt\"])), precision ))","31cf35ec":"plt.figure(figsize=(20,5))\nplt.plot(model_train.Recovered,label=\"Train Set\",marker='o')\nvalid.Recovered.plot(label=\"Validation Set\",marker='*')\ny_pred.Holt.plot(label=\"Holt's Linear Model Predicted Set\",marker='^')\nplt.ylabel(\"Recovered\")\nplt.xlabel(\"Date Time\")\nplt.title(\"Recovered Holt's Linear Model Prediction in \" + country +\".\")\nplt.xticks(rotation=90)\nplt.legend()","cda7187f":"holt_new_date=[]\nholt_new_prediction=[]\nfor i in range(1,18):\n    holt_new_date.append(datewise.index[-1]+timedelta(days=i))\n    holt_new_prediction.append(holt.forecast((len(valid)+i))[-1])\n\nmodel_predictions[\"Holts Linear Model Prediction\"]=holt_new_prediction\n#model_predictions.head()","2e31c4c6":"df = pd.DataFrame(model_predictions,columns=[\"Dates\",\"Linear Regression Prediction\",\"SVM Prediction\",\"Holts Linear Model Prediction\"])\n\ndf['Dates'] = pd.to_datetime(df['Dates'])\npd.options.display.float_format = '{:,.0f}'.format\npd.set_option('precision', 0)\n\n#df = df[(df['yhat']>0)]\ndf.rename(columns={'Linear Regression Prediction': 'LRP', 'SVM Prediction': 'SVM','Holts Linear Model Prediction': 'Holts'}, inplace=True)\n#df","a2b7936d":"model_train=datewise.iloc[:int(datewise.shape[0]*0.90)]\nvalid=datewise.iloc[int(datewise.shape[0]*0.90):]\ny_pred=valid.copy()","88242b6c":"es=ExponentialSmoothing(np.asarray(model_train['Recovered']),seasonal_periods=5,trend='add', seasonal='add').fit()","5b21dea6":"y_pred[\"Holt's Winter Model\"]=es.forecast(len(valid))","5df03532":"model_scores.append(np.sqrt(mean_squared_error(y_pred[\"Deaths\"],y_pred[\"Holt's Winter Model\"])))\n\nprecision = 2\n#print( \"{:.{}f}\".format( pi, precision )) \n\nprint( \"Root Mean Square Error for Holt's Winter Model: {:.{}f}\".format( np.sqrt(mean_squared_error(y_pred[\"Recovered\"],y_pred[\"Holt's Winter Model\"])), precision ))","0d5fd8e7":"plt.figure(figsize=(20,5))\nplt.plot(model_train.Recovered,label=\"Train Set\",marker='o')\nvalid.Recovered.plot(label=\"Validation Set\",marker='*')\ny_pred[\"Holt\\'s Winter Model\"].plot(label=\"Holt's Winter Model Predicted Set\",marker='^')\nplt.ylabel(\"Recovered\")\nplt.xlabel(\"Date Time\")\nplt.title(\"Recovered Cases Holt's Winter Model Prediction\")\nplt.xticks(rotation=90)\nplt.legend()","ade8ee96":"holt_winter_new_prediction=[]\nfor i in range(1,18):\n    holt_winter_new_prediction.append(es.forecast((len(valid)+i))[-1])\nmodel_predictions[\"Holts Winter Model Prediction\"]=holt_winter_new_prediction\nmodel_predictions.head()\n#model_predictions","19dfd18c":"df = pd.DataFrame(model_predictions,columns=[\"Dates\",\"Linear Regression Prediction\",\"SVM Prediction\"\\\n                                             ,\"Holts Linear Model Prediction\",\"Holts Winter Model Prediction\"])\n\ndf['Dates'] = pd.to_datetime(df['Dates'])\npd.options.display.float_format = '{:,.0f}'.format\npd.set_option('precision', 0)\n\n#df = df[(df['yhat']>0)]\ndf.rename(columns={'Linear Regression Prediction': 'LRP', 'SVM Prediction': 'SVM','Holts Linear Model Prediction': 'HLM'\\\n,'Holts Winter Model Prediction': 'HWM'}, inplace=True)\ndf","c0644ea2":"y_pred[\"Holt\\'s Winter Model\"].head()","67c37bc2":"model_train=datewise.iloc[:int(datewise.shape[0]*0.90)]\nvalid=datewise.iloc[int(datewise.shape[0]*0.90):]\ny_pred=valid.copy()","03a1a509":"from pandas.plotting import autocorrelation_plot\nplt.figure(figsize=(20, 5))\nautocorrelation_plot(datewise[\"Recovered\"])","0a9da030":"#fig, (ax1,ax2,ax3) = plt.subplots(3, 1,figsize=(11,7))\n#import statsmodels.api as sm\n#results=sm.tsa.seasonal_decompose(model_train[\"Confirmed\"])\n#ax1.plot(results.trend)\n#ax2.plot(results.seasonal)\n#ax3.plot(results.resid)","d814fb60":"print(\"Results of Dickey-Fuller test for Original Time Series\")\ndftest = adfuller(model_train[\"Recovered\"], autolag='AIC')\ndfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\nfor key,value in dftest[4].items():\n    dfoutput['Critical Value (%s)'%key] = value\nprint(dfoutput)","c2954caf":"log_series=np.log(model_train[\"Recovered\"])","07390e3f":"prophet_c=Prophet(interval_width=0.95,weekly_seasonality=True,)\nprophet_Recovered=pd.DataFrame(zip(list(datewise.index),list(datewise[\"Recovered\"])),columns=['ds','y'])","7daad041":"prophet_c.fit(prophet_Recovered)","c20ce2b6":"forecast_c=prophet_c.make_future_dataframe(periods=17)\nforecast_Recovered=forecast_c.copy()","96582e6c":"Recovered_forecast=prophet_c.predict(forecast_c)\n#print(confirmed_forecast[['ds','yhat', 'yhat_lower', 'yhat_upper']])","6b8853e9":"model_scores.append(np.sqrt(mean_squared_error(datewise[\"Recovered\"],Deaths_forecast['yhat'].head(datewise.shape[0]))))\n\nprecision = 2\n#print( \"{:.{}f}\".format( pi, precision )) \n\nprint( \"Root Mean Squared Error for Prophet Model: {:.{}f}\".format( np.sqrt(mean_squared_error(datewise[\"Recovered\"],Recovered_forecast['yhat'].head(datewise.shape[0]))), precision ))","1ce4512d":"print(prophet_c.plot(Recovered_forecast))","682d8887":"print(prophet_c.plot_components(Recovered_forecast))","1657350f":"model_names=[\"Linear Regression\",\"Support Vector Machine Regressor\",\"Holt's Linear\",\"Holt's Winter Model\",\n            \"Auto Regressive Model (AR)\",\"Moving Average Model (MA)\",\"ARIMA Model\",\"Facebook's Prophet Model\"]\npd.DataFrame(zip(model_names,model_scores),columns=[\"Model Name\",\"Root Mean Squared Error\"]).sort_values([\"Root Mean Squared Error\"])\nprint(datewise_poland.iloc[-1])","7126944e":"model_predictions[\"Prophet's Prediction\"]=list(Recovered_forecast[\"yhat\"].tail(17))\nmodel_predictions[\"Prophet's Upper Bound\"]=list(Recovered_forecast[\"yhat_upper\"].tail(17))\n#model_predictions.head()","ede65751":"df = pd.DataFrame(model_predictions,columns=[\"Dates\",\"Linear Regression Prediction\",\"SVM Prediction\"\\\n                                             ,\"Holts Linear Model Prediction\",\"Holts Winter Model Prediction\",\"Prophet's Prediction\",\"Prophet's Upper Bound\"])\n\ndf['Dates'] = pd.to_datetime(df['Dates'])\npd.options.display.float_format = '{:,.0f}'.format\npd.set_option('precision', 0)\n\n#df = df[(df['yhat']>0)]\ndf.rename(columns={'Linear Regression Prediction': 'LRP', 'SVM Prediction': 'SVM','Holts Linear Model Prediction': 'HLM'\\\n,'Holts Winter Model Prediction': 'HWM','Prophet\\'s Prediction': 'Prophet','Prophet\\'s Upper Bound': 'PUB'}, inplace=True)\nforecast_table = df\n\ndf","1139bbc2":"from datetime import date\n\ntoday = date.today()\n#print(\"Today's date:\", today)\n\nstart_date = today\nend_date = today\ndf = forecast_table\nafter_start_date = df[\"Dates\"] >= start_date\nbefore_end_date = df[\"Dates\"] <= end_date\nbetween_two_dates = after_start_date & before_end_date\nfiltered_dates = df.loc[between_two_dates]\n\nfiltered_dates","8c5bab2e":"def closest(lst, K): \n      \n    return lst[min(range(len(lst)), key = lambda i: abs(lst[i]-K))] \n      \n# Driver code\nRecovered = int(datewise_poland[\"Recovered\"].iloc[-1])\nlst =  [int(filtered_dates.LRP),int(filtered_dates.SVM),int(filtered_dates.HLM),int(filtered_dates.HWM),int(filtered_dates.Prophet),int(filtered_dates.PUB)]\nK = int(datewise_poland[\"Recovered\"].iloc[-1])\n\n# Visualization code\nprint(\"N\u00famero oficial de recupera\u00e7\u00f5es no \" + country +\":    \" + str(Recovered))\n\nprint(\"Previs\u00e3o para o dia \" + str(today) + \":            \" + str(int(closest(lst, K))))","3063eb26":"df = pd.DataFrame(model_predictions,columns=[\"Dates\",\"SVM Prediction\"])\n\ndf['Dates'] = pd.to_datetime(df['Dates'])\npd.options.display.float_format = '{:,.0f}'.format\npd.set_option('precision', 0)\n\n#df = df[(df['yhat']>0)]\ndf.rename(columns={'SVM Prediction': 'Recovered'}, inplace=True)\nforecast_table = df\nrecovered_forecast = df\n\ndf","f14ee135":"complete_forecast = pd.concat([cases_forecast,recovered_forecast, deaths_forecast])\n\n# Stack the DataFrames on top of each other\nvertical_stack = pd.concat([cases_forecast,recovered_forecast, deaths_forecast], axis=0)\n\n# Place the DataFrames side by side\nhorizontal_stack = pd.concat([cases_forecast,recovered_forecast, deaths_forecast], axis=1)","658ff895":"forecast_summary = pd.concat([cases_forecast.set_index('Dates'), recovered_forecast.set_index('Dates'), deaths_forecast.set_index('Dates')], axis=1, join='inner')\nforecast_summary.rename(columns={'Forecast': 'Casos','Recovered': 'Recupera\u00e7\u00f5es','Deaths Forecast': 'Mortes'}, inplace=True)","699e55b9":"plt.figure(figsize=(28,8))\nplt.plot(datewise_poland[\"Confirmed\"],label=\"Casos confirmados\")\nplt.bar(df.Dates, forecast_summary.Casos, color='royalblue', alpha=0.7)\n\n\nplt.grid(color='#95a5a6', linestyle='--', linewidth=2, axis='y', alpha=0.7)\nplt.legend(['Casos confirmados at\u00e9 o dia '+ str(today)])\n\n\nplt.show()\n\nplt.savefig('017br.png')","3b29408f":"plt.figure(figsize=(28,8))\nplt.plot(datewise_poland[\"Recovered\"],label=\"Recupera\u00e7\u00f5es\")\nplt.bar(df.Dates, forecast_summary.Recupera\u00e7\u00f5es, color='green', alpha=0.7)\n\n\nplt.grid(color='#95a5a6', linestyle='--', linewidth=2, axis='y', alpha=0.7)\nplt.legend(['Recupera\u00e7\u00f5es confirmadas at\u00e9 o dia'+ str(today)])\n\n\nplt.show()\nplt.savefig('018br.png')","be291803":"plt.figure(figsize=(28,8))\nplt.plot(datewise_poland[\"Deaths\"],label=\"Mortes\")\nplt.bar(df.Dates, forecast_summary.Mortes, color='red', alpha=0.7)\n\n\nplt.grid(color='#95a5a6', linestyle='--', linewidth=2, axis='y', alpha=0.7)\nplt.legend(['Mortes confirmadas at\u00e9 o dia  '+ str(today)])\n\n\nplt.show()\nplt.savefig('019br.png')","a9fc8d3e":"forecast_summary","129c9e29":"from IPython.core.display import HTML","7cd00615":"# install calmap\n# ==============\n\n! pip install calmap","db1438b3":"# Import\n# ======\n\n# essential libraries\nimport random\nfrom datetime import timedelta\n\n# storing and anaysis\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nimport calmap\nimport folium\n\n# color pallette\ncnf, dth, rec, act = '#393e46', '#ff2e63', '#21bf73', '#fe9801' \n\n# converter\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()   \n\n# hide warnings\nimport warnings\nwarnings.filterwarnings('ignore')","6582f68a":"# for offline ploting\n# ===================\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)","e35c5037":"# list files\n# ==========\n\n# !ls ..\/input\/corona-virus-report","66e5750e":"# importing datasets\n# ==================\n\nfull_table = pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv', \n                         parse_dates=['Date'])\nfull_table.sample(6)","e21941ff":"# dataframe info\n# full_table.info()","067f8dd2":"# checking for missing value\n# full_table.isna().sum()","68121a29":"# Ship\n# ====\n\n# ship rows\nship_rows = full_table['Province\/State'].str.contains('Grand Princess') | full_table['Province\/State'].str.contains('Diamond Princess') | full_table['Country\/Region'].str.contains('Diamond Princess') | full_table['Country\/Region'].str.contains('MS Zaandam')\n\n# ship\nship = full_table[ship_rows]\n\n# full table \nfull_table = full_table[~(ship_rows)]\n\n# Latest cases from the ships\nship_latest = ship[ship['Date']==max(ship['Date'])]\n\n# ship_latest.style.background_gradient(cmap='Pastel1_r')","1ef7676e":"# Cleaning data\n# =============\n\n# Active Case = confirmed - deaths - recovered\nfull_table['Active'] = full_table['Confirmed'] - full_table['Deaths'] - full_table['Recovered']\n\n# replacing Mainland china with just China\nfull_table['Country\/Region'] = full_table['Country\/Region'].replace('Mainland China', 'China')\n\n# filling missing values \nfull_table[['Province\/State']] = full_table[['Province\/State']].fillna('')\nfull_table[['Confirmed', 'Deaths', 'Recovered', 'Active']] = full_table[['Confirmed', 'Deaths', 'Recovered', 'Active']].fillna(0)\n\n# fixing datatypes\nfull_table['Recovered'] = full_table['Recovered'].astype(int)\n\nfull_table.sample(6)","35d220e8":"# Grouped by day, country\n# =======================\n\nfull_grouped = full_table.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\n\n# new cases ======================================================\ntemp = full_grouped.groupby(['Country\/Region', 'Date', ])['Confirmed', 'Deaths', 'Recovered']\ntemp = temp.sum().diff().reset_index()\n\nmask = temp['Country\/Region'] != temp['Country\/Region'].shift(1)\n\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\ntemp.loc[mask, 'Recovered'] = np.nan\n\n# renaming columns\ntemp.columns = ['Country\/Region', 'Date', 'New cases', 'New deaths', 'New recovered']\n# =================================================================\n\n# merging new values\nfull_grouped = pd.merge(full_grouped, temp, on=['Country\/Region', 'Date'])\n\n# filling na with 0\nfull_grouped = full_grouped.fillna(0)\n\n# fixing data types\ncols = ['New cases', 'New deaths', 'New recovered']\nfull_grouped[cols] = full_grouped[cols].astype('int')\n\nfull_grouped['New cases'] = full_grouped['New cases'].apply(lambda x: 0 if x<0 else x)\n\nfull_grouped.sample(6)","b5567d39":"# Day wise\n# ========\n\n# table\nday_wise = full_grouped.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active', 'New cases'].sum().reset_index()\n\n# number cases per 100 cases\nday_wise['Deaths \/ 100 Cases'] = round((day_wise['Deaths']\/day_wise['Confirmed'])*100, 2)\nday_wise['Recovered \/ 100 Cases'] = round((day_wise['Recovered']\/day_wise['Confirmed'])*100, 2)\nday_wise['Deaths \/ 100 Recovered'] = round((day_wise['Deaths']\/day_wise['Recovered'])*100, 2)\n\n# no. of countries\nday_wise['No. of countries'] = full_grouped[full_grouped['Confirmed']!=0].groupby('Date')['Country\/Region'].unique().apply(len).values\n\n# fillna by 0\ncols = ['Deaths \/ 100 Cases', 'Recovered \/ 100 Cases', 'Deaths \/ 100 Recovered']\nday_wise[cols] = day_wise[cols].fillna(0)\n\nday_wise.head()","85bbc1e6":"# Country wise\n# ============\n\n# getting latest values\ncountry_wise = full_grouped[full_grouped['Date']==max(full_grouped['Date'])].reset_index(drop=True).drop('Date', axis=1)\n\n# group by country\ncountry_wise = country_wise.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered', 'Active', 'New cases'].sum().reset_index()\n\n# per 100 cases\ncountry_wise['Deaths \/ 100 Cases'] = round((country_wise['Deaths']\/country_wise['Confirmed'])*100, 2)\ncountry_wise['Recovered \/ 100 Cases'] = round((country_wise['Recovered']\/country_wise['Confirmed'])*100, 2)\ncountry_wise['Deaths \/ 100 Recovered'] = round((country_wise['Deaths']\/country_wise['Recovered'])*100, 2)\n\ncols = ['Deaths \/ 100 Cases', 'Recovered \/ 100 Cases', 'Deaths \/ 100 Recovered']\ncountry_wise[cols] = country_wise[cols].fillna(0)\ncountry_wise.sort_values(by=['New cases'], inplace=True, ascending=False)\n\ncountry_wise.head()","62768c12":"# load population dataset\npop = pd.read_csv(\"..\/input\/population-by-country-2020\/population_by_country_2020.csv\")\n\n# select only population\npop = pop.iloc[:, :2]\n\n# rename column names\npop.columns = ['Country\/Region', 'Population']\n\n# merged data\ncountry_wise = pd.merge(country_wise, pop, on='Country\/Region', how='left')\n\n# update population\ncols = ['Burma', 'Congo (Brazzaville)', 'Congo (Kinshasa)', \"Cote d'Ivoire\", 'Czechia', \n        'Kosovo', 'Saint Kitts and Nevis', 'Saint Vincent and the Grenadines', \n        'Taiwan*', 'US', 'West Bank and Gaza', 'Poland', 'Brazil']\npops = [54409800, 89561403, 5518087, 26378274, 10708981, 1793000, \n        53109, 110854, 23806638, 330541757, 4543126,37854825,212253150]\nfor c, p in zip(cols, pops):\n    country_wise.loc[country_wise['Country\/Region']== c, 'Population'] = p\n    \n# missing values\n# country_wise.isna().sum()\n# country_wise[country_wise['Population'].isna()]['Country\/Region'].tolist()\n\n# Cases per population\ncountry_wise['Cases \/ Million People'] = round((country_wise['Confirmed'] \/ country_wise['Population']) * 1000000)\n\ncountry_wise.sort_values(by=['Cases \/ Million People'], inplace=True, ascending=False)\n\ncountry_wise.head()","c470b3f9":"poland_data=covid[covid[\"Country\/Region\"]==country]\n#datewise_poland=poland_data.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\n#print(datewise_poland.iloc[-1])\n#print(\"Total Active Cases: \",datewise_poland[\"Confirmed\"].iloc[-1]-datewise_poland[\"Recovered\"].iloc[-1]-datewise_poland[\"Deaths\"].iloc[-1])\n#print(\"Total Closed Cases: \",datewise_poland[\"Recovered\"].iloc[-1]+datewise_poland[\"Deaths\"].iloc[-1])\n\n\n\n\n# load population dataset\npop = pd.read_csv(\"..\/input\/population-by-country-2020\/population_by_country_2020.csv\")\n\n# select only population\npop = pop.iloc[:, :2]\n\n# rename column names\npop.columns = ['Country\/Region', 'Population']\n\n# merged data\ncountry_wise = pd.merge(country_wise, pop, on='Country\/Region', how='left')\n\n# update population\ncols = ['Burma', 'Congo (Brazzaville)', 'Congo (Kinshasa)', \"Cote d'Ivoire\", 'Czechia', \n        'Kosovo', 'Saint Kitts and Nevis', 'Saint Vincent and the Grenadines', \n        'Taiwan*', 'US', 'West Bank and Gaza', 'Poland', 'Brazil', 'Italy']\npops = [54409800, 89561403, 5518087, 26378274, 10708981, 1793000, \n        53109, 110854, 23806638, 330541757, 4543126,37854825,212253150,60360000]\nfor c, p in zip(cols, pops):\n    country_wise.loc[country_wise['Country\/Region']== c, 'Population'] = p\n    \n# missing values\n# country_wise.isna().sum()\n# country_wise[country_wise['Population'].isna()]['Country\/Region'].tolist()\n\n# Cases per population\ncountry_wise['Cases \/ Million People'] = round((country_wise['Confirmed'] \/ country_wise['Population']) * 1000000)\n\ncountry_wise_local=country_wise[country_wise[\"Country\/Region\"]==country]\n\nlocal_summary = country_wise_local\n\nlocal_summary.rename(columns={'Country\/Region': 'Pa\u00eds','Recovered': 'Recupera\u00e7\u00f5es','Deaths': 'Mortes',\\\n                              'Confirmed': 'Casos','Active': 'Ativos','New cases': 'Novos Casos'\\\n                             ,'Deaths \/ 100 Cases': '% de mortes','Recovered \/ 100 Cases': '% de recupera\u00e7\u00f5es','Deaths \/ 100 Recovered': '% de Mortes\/Recupera\u00e7\u00e3o'\\\n                             ,'Population_x': 'Popula\u00e7\u00e3o','Cases \/ Million People': 'Casos\/milh\u00e3o'\\\n                             ,'Confirmed last week': 'Confirmado na semana passada'\\\n                             ,'1 week % increase': '% de aumento semanal'}, inplace=True)\n\nlocal_summary.head()","1cfe25a0":"print(\"An\u00e1lise geral sobre o COVID-19 no \" +country +\" no dia \" + str(today) +\".\")\n\nprint(\" \")\n\nprint(\"Casos confirmados:                {:.0f} \".format(datewise_poland[\"Confirmed\"].iloc[-1]))\nprint(\"Recupera\u00e7\u00f5es:                      {:.0f}\".format(datewise_poland[\"Recovered\"].iloc[-1]))\nprint(\"Mortes:                             {:.0f}\".format(datewise_poland[\"Deaths\"].iloc[-1]))\nprint(\"Casos ativos:                     \",int((datewise_poland[\"Confirmed\"].iloc[-1]-datewise_poland[\"Recovered\"].iloc[-1]-datewise_poland[\"Deaths\"].iloc[-1])))\nprint(\"Casos Encerrados:                 \",int(datewise_poland[\"Recovered\"].iloc[-1]+datewise_poland[\"Deaths\"].iloc[-1]))\nprint(\"Casos \/ Milh\u00f5es de Pessoas :        \",int(country_wise_local[\"Casos\/milh\u00e3o\"].iloc[-1]))\nprint(\"Novos casos nas ultimas 24 horas : \",int(country_wise_local[\"Novos Casos\"].iloc[-1]))\n\nprint(\" \")\n\nprint(\"Mortes a cada 100 casos:              \",int(country_wise_local[\"% de mortes\"].iloc[-1]))\nprint(\"Recupera\u00e7\u00f5es a cada 100 casos:       \",int(country_wise_local[\"% de recupera\u00e7\u00f5es\"].iloc[-1]))\nprint(\"Mortes a cada 100 recuperados:       \",int(country_wise_local[\"% de Mortes\/Recupera\u00e7\u00e3o\"].iloc[-1]))\n\nprint(\" \")\n\nprint(\"Casos confirmados por dia:         \",int(np.round(datewise_poland[\"Confirmed\"].iloc[-1]\/datewise_poland.shape[0])))\nprint(\"Casos recuperados por dia:          \",int(np.round(datewise_poland[\"Recovered\"].iloc[-1]\/datewise_poland.shape[0])))\nprint(\"Casos de morte por dia:             \",int(np.round(datewise_poland[\"Deaths\"].iloc[-1]\/datewise_poland.shape[0])))\n\nprint(\"Casos confirmados por hora:          \",int(np.round(datewise_poland[\"Confirmed\"].iloc[-1]\/((datewise.shape[0])*24))))\nprint(\"Recupera\u00e7\u00f5es por hora:               \",int(np.round(datewise_poland[\"Recovered\"].iloc[-1]\/((datewise_poland.shape[0])*24))))\nprint(\"Mortes por hora:                      \",int(np.round(datewise_poland[\"Deaths\"].iloc[-1]\/((datewise_poland.shape[0])*24))))\n\nprint(\" \")\nprint(\"Acknowledgements:\")\nprint(\"Thanks to the WHO and Johns Hopkins University for making the \")\nprint(\"data available for educational and academic research purposes - Jair Ribeiro\")","d46124ac":"print(\"An\u00e1lise geral sobre o COVID-19 no \" +country +\" no dia \" + str(today) +\".\")\nprint(\" \")\n\nprint(\"No Brasil, o n\u00famero de casos confirmados de COVID-19 chegou a \"+ str(int(datewise_poland[\"Confirmed\"].iloc[-1])) +\", representando uma m\u00e9dia de \"+str(int(country_wise_local[\"Casos\/milh\u00e3o\"].iloc[-1]))+\" casos a cada milh\u00e3o de habitantes. O n\u00famero de mortes causadas por COVID-19 \u00e9 atualmente \"+ str(int(datewise_poland[\"Deaths\"].iloc[-1])) +\" \\\ne atualmente registramos \"+ str(int(datewise_poland[\"Confirmed\"].iloc[-1]-datewise_poland[\"Recovered\"].iloc[-1]-datewise_poland[\"Deaths\"].iloc[-1])) +\" casos ativos.\\\n O n\u00famero m\u00e9dio de casos confirmados por dia no pa\u00eds \u00e9 de \" + str(int(np.round(datewise_poland[\"Confirmed\"].iloc[-1]\/datewise_poland.shape[0]))) +\" \\\ne o n\u00famero m\u00e9dio de mortes por COVID-19 por dia \u00e9 de \"+ str(int(np.round(datewise_poland[\"Deaths\"].iloc[-1]\/datewise_poland.shape[0])))+ \" no pa\u00eds, mas nas \u00faltimas 24 horas, tivemos \"+str(int(country_wise_local[\"Novos Casos\"].iloc[-1]))+\" novos casos registrados.\")","3e603649":"today = full_grouped[full_grouped['Date']==max(full_grouped['Date'])].reset_index(drop=True).drop('Date', axis=1)[['Country\/Region', 'Confirmed']]\nlast_week = full_grouped[full_grouped['Date']==max(full_grouped['Date'])-timedelta(days=7)].reset_index(drop=True).drop('Date', axis=1)[['Country\/Region', 'Confirmed']]\n\ntemp = pd.merge(today, last_week, on='Country\/Region', suffixes=(' today', ' last week'))\n\n# temp = temp[['Country\/Region', 'Confirmed last week']]\ntemp['1 week change'] = temp['Confirmed today'] - temp['Confirmed last week']\n\ntemp = temp[['Country\/Region', 'Confirmed last week', '1 week change']]\n\ncountry_wise = pd.merge(country_wise, temp, on='Country\/Region')\n\ncountry_wise['1 week % increase'] = round(country_wise['1 week change']\/country_wise['Confirmed last week']*100, 2)\n\n\ncountry_wise.sort_values(by=['Cases \/ Million People'], inplace=True, ascending=False)\n\ncountry_wise.head()","45f91987":"temp = full_table.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\ntemp = temp[temp['Date']==max(temp['Date'])].reset_index(drop=True)\n\ntm = temp.melt(id_vars=\"Date\", value_vars=['Active', 'Deaths', 'Recovered'])\nfig = px.treemap(tm, path=[\"variable\"], values=\"value\", height=225, width=640,\n                 color_discrete_sequence=[act, rec, dth])\nfig.data[0].textinfo = 'label+text+value'\nfig.show()","db68ea7e":"fig_c = px.bar(day_wise, x=\"Date\", y=\"Confirmed\", color_discrete_sequence = [act])\nfig_d = px.bar(day_wise, x=\"Date\", y=\"Deaths\", color_discrete_sequence = [dth])\n\nfig = make_subplots(rows=1, cols=2, shared_xaxes=False, horizontal_spacing=0.1,\n                    subplot_titles=('Confirmed cases', 'Deaths reported'))\n\nfig.add_trace(fig_c['data'][0], row=1, col=1)\nfig.add_trace(fig_d['data'][0], row=1, col=2)\n\nfig.update_layout(height=480)\n\n# ===============================\n\nfig_1 = px.line(day_wise, x=\"Date\", y=\"Deaths \/ 100 Cases\", color_discrete_sequence = [dth])\nfig_2 = px.line(day_wise, x=\"Date\", y=\"Recovered \/ 100 Cases\", color_discrete_sequence = [rec])\nfig_3 = px.line(day_wise, x=\"Date\", y=\"Deaths \/ 100 Recovered\", color_discrete_sequence = ['#333333'])\n\nfig = make_subplots(rows=1, cols=3, shared_xaxes=False, \n                    subplot_titles=('Deaths \/ 100 Cases', 'Recovered \/ 100 Cases', 'Deaths \/ 100 Recovered'))\n\nfig.add_trace(fig_1['data'][0], row=1, col=1)\nfig.add_trace(fig_2['data'][0], row=1, col=2)\nfig.add_trace(fig_3['data'][0], row=1, col=3)\n\nfig.update_layout(height=480)\n\n# ===================================\n\nfig_c = px.bar(day_wise, x=\"Date\", y=\"New cases\", color_discrete_sequence = [act])\nfig_d = px.bar(day_wise, x=\"Date\", y=\"No. of countries\", color_discrete_sequence = [dth])\n\nfig = make_subplots(rows=1, cols=2, shared_xaxes=False, horizontal_spacing=0.1,\n                    subplot_titles=('N\u00ba de novos casos todos os dias', 'N\u00ba de pa\u00edses afetados'))\n\nfig.add_trace(fig_c['data'][0], row=1, col=1)\nfig.add_trace(fig_d['data'][0], row=1, col=2)\n\nfig.update_layout(height=480)","3821ca76":"# new cases - cases per million people\ntemp = country_wise[country_wise['Population']>1000000]\nfig_p = px.bar(temp.sort_values('Cases \/ Million People').tail(15), x=\"Cases \/ Million People\", y=\"Country\/Region\", \n               text='Cases \/ Million People', orientation='h', color_discrete_sequence = ['#741938'])\n\n# plot\nfig = make_subplots(rows=1, cols=1, shared_xaxes=False, horizontal_spacing=0.14, vertical_spacing=0.08,\n                    subplot_titles=('Pa\u00edses com o maior n\u00famero de casos a cada milh\u00e3o de habitantes', 'Deaths reported'))\n\nfig.add_trace(fig_p['data'][0], row=1, col=1)\nfig.update_layout(height=500)\n\n#plt.savefig('020br.png')","5d189883":"# confirmed - deaths\nfig_c = px.bar(country_wise.sort_values('Confirmed').tail(15), x=\"Confirmed\", y=\"Country\/Region\", \n               text='Confirmed', orientation='h', color_discrete_sequence = [act])\nfig_d = px.bar(country_wise.sort_values('Deaths').tail(15), x=\"Deaths\", y=\"Country\/Region\", \n               text='Deaths', orientation='h', color_discrete_sequence = [dth])\n\n# plot\nfig = make_subplots(rows=1, cols=2, shared_xaxes=False, horizontal_spacing=0.14, vertical_spacing=0.08,\n                    subplot_titles=('Casos confirmados', 'Mortes Confirmadas'))\n\nfig.add_trace(fig_c['data'][0], row=1, col=1)\nfig.add_trace(fig_d['data'][0], row=1, col=2)\nfig.update_layout(height=500)\n\n#plt.savefig('021br.png')","12d5bea5":"# recovered - active\nfig_r = px.bar(country_wise.sort_values('Recovered').tail(15), x=\"Recovered\", y=\"Country\/Region\", \n               text='Recovered', orientation='h', color_discrete_sequence = [rec])\nfig_a = px.bar(country_wise.sort_values('Active').tail(15), x=\"Active\", y=\"Country\/Region\", \n               text='Active', orientation='h', color_discrete_sequence = ['#333333'])\n\n# plot\nfig = make_subplots(rows=1, cols=2, shared_xaxes=False, horizontal_spacing=0.14, vertical_spacing=0.08,\n                    subplot_titles=('Recupera\u00e7\u00f5es', 'Casos ativos'))\n\nfig.add_trace(fig_r['data'][0], row=1, col=1)\nfig.add_trace(fig_a['data'][0], row=1, col=2)\nfig.update_layout(height=500)\n\n#plt.savefig('022br.png')","a0b5ff11":"# death - recoverd \/ 100 cases\nfig_dc = px.bar(country_wise.sort_values('Deaths \/ 100 Cases').tail(15), x=\"Deaths \/ 100 Cases\", y=\"Country\/Region\", \n               text='Deaths \/ 100 Cases', orientation='h', color_discrete_sequence = ['#f38181'])\nfig_rc = px.bar(country_wise.sort_values('Recovered \/ 100 Cases').tail(15), x=\"Recovered \/ 100 Cases\", y=\"Country\/Region\", \n               text='Recovered \/ 100 Cases', orientation='h', color_discrete_sequence = ['#a3de83'])\n\n# plot\nfig = make_subplots(rows=1, cols=2, shared_xaxes=False, horizontal_spacing=0.14, vertical_spacing=0.08,\n                    subplot_titles=('N\u00famero de mortes a cada 100 casos', 'N\u00famero de recupera\u00e7\u00f5es a cada 100 casos'))\n\nfig.add_trace(fig_dc['data'][0], row=1, col=1)\nfig.add_trace(fig_rc['data'][0], row=1, col=2)\nfig.update_layout(height=500)\n\n#plt.savefig('023br.png')","90c63c15":"# new cases - cases per million people\nfig_nc = px.bar(country_wise.sort_values('New cases').tail(15), x=\"New cases\", y=\"Country\/Region\", \n               text='New cases', orientation='h', color_discrete_sequence = ['#c61951'])\ntemp = country_wise[country_wise['Population']>1000000]\nfig_p = px.bar(temp.sort_values('Cases \/ Million People').tail(15), x=\"Cases \/ Million People\", y=\"Country\/Region\", \n               text='Cases \/ Million People', orientation='h', color_discrete_sequence = ['#741938'])\n\n# plot\nfig = make_subplots(rows=1, cols=2, shared_xaxes=False, horizontal_spacing=0.14, vertical_spacing=0.08,\n                    subplot_titles=('Novos casos registrados', \n                                    'Casos\/Milh\u00f5es de Habitantes'))\n\nfig.add_trace(fig_nc['data'][0], row=1, col=1)\nfig.add_trace(fig_p['data'][0], row=1, col=2)\nfig.update_layout(height=500)\n#plt.savefig('024br.png')","3a9d8479":"# week change, percent increase\nfig_wc = px.bar(country_wise.sort_values('1 week change').tail(15), x=\"1 week change\", y=\"Country\/Region\", \n               text='1 week change', orientation='h', color_discrete_sequence = ['#004a7c'])\ntemp = country_wise[country_wise['Confirmed']>100]\nfig_pi = px.bar(temp.sort_values('1 week % increase').tail(15), x=\"1 week % increase\", y=\"Country\/Region\", \n               text='1 week % increase', orientation='h', color_discrete_sequence = ['#005691'], \n                hover_data=['Confirmed last week', 'Confirmed'])\n\n# plot\nfig = make_subplots(rows=1, cols=2, shared_xaxes=False, horizontal_spacing=0.14, vertical_spacing=0.08,\n                    subplot_titles=('Aumento semanal no numero de casos', '% de aumento na semana'))\n\nfig.add_trace(fig_wc['data'][0], row=1, col=1)\nfig.add_trace(fig_pi['data'][0], row=1, col=2)\nfig.update_layout(height=500)\n#plt.savefig('025br.png')","5ed78565":"gt_100 = full_grouped[full_grouped['Confirmed']>100]['Country\/Region'].unique()\ntemp = full_table[full_table['Country\/Region'].isin(gt_100)]\ntemp = temp.groupby(['Country\/Region', 'Date'])['Confirmed'].sum().reset_index()\ntemp = temp[temp['Confirmed']>100]\n# print(temp.head())\n\nmin_date = temp.groupby('Country\/Region')['Date'].min().reset_index()\nmin_date.columns = ['Country\/Region', 'Min Date']\n# print(min_date.head())\n\nfrom_100th_case = pd.merge(temp, min_date, on='Country\/Region')\nfrom_100th_case['N days'] = (from_100th_case['Date'] - from_100th_case['Min Date']).dt.days\n# print(from_100th_case.head())\n\nfig = px.line(from_100th_case, x='N days', y='Confirmed', color='Country\/Region', title='N days from 100 case', height=600)\nfig.show()\n\n# ===========================================================================\n\ngt_1000 = full_grouped[full_grouped['Confirmed']>1000]['Country\/Region'].unique()\ntemp = full_table[full_table['Country\/Region'].isin(gt_1000)]\ntemp = temp.groupby(['Country\/Region', 'Date'])['Confirmed'].sum().reset_index()\ntemp = temp[temp['Confirmed']>1000]\n# print(temp.head())\n\nmin_date = temp.groupby('Country\/Region')['Date'].min().reset_index()\nmin_date.columns = ['Country\/Region', 'Min Date']\n# print(min_date.head())\n\nfrom_1000th_case = pd.merge(temp, min_date, on='Country\/Region')\nfrom_1000th_case['N days'] = (from_1000th_case['Date'] - from_1000th_case['Min Date']).dt.days\n# print(from_1000th_case.head())\n\nfig = px.line(from_1000th_case, x='N days', y='Confirmed', color='Country\/Region', title='N days from 1000 case', height=600)\nfig.show()\n\n# ===========================================================================\n\ngt_10000 = full_grouped[full_grouped['Confirmed']>10000]['Country\/Region'].unique()\ntemp = full_table[full_table['Country\/Region'].isin(gt_10000)]\ntemp = temp.groupby(['Country\/Region', 'Date'])['Confirmed'].sum().reset_index()\ntemp = temp[temp['Confirmed']>10000]\n# print(temp.head())\n\nmin_date = temp.groupby('Country\/Region')['Date'].min().reset_index()\nmin_date.columns = ['Country\/Region', 'Min Date']\n# print(min_date.head())\n\nfrom_10000th_case = pd.merge(temp, min_date, on='Country\/Region')\nfrom_10000th_case['N days'] = (from_10000th_case['Date'] - from_10000th_case['Min Date']).dt.days\n# print(from_10000th_case.head())full_grouped\n\nfig = px.line(from_10000th_case, x='N days', y='Confirmed', color='Country\/Region', title='N days from 10000 case', height=600)\nfig.show()","17eaf798":"full_latest = full_table[full_table['Date'] == max(full_table['Date'])]\n                        \n","20ccb9ff":"temp = full_grouped[full_grouped['New cases']>0].sort_values('Country\/Region', ascending=False)\n","ec985d45":"# first date\n# ==========\nfirst_date = full_table[full_table['Confirmed']>0]\nfirst_date = first_date.groupby('Country\/Region')['Date'].agg(['min']).reset_index()\n# first_date.head()\n\n# last date\n# =========\nlast_date = full_table.groupby(['Country\/Region', 'Date', ])['Confirmed', 'Deaths', 'Recovered']\nlast_date = last_date.sum().diff().reset_index()\n\nmask = last_date['Country\/Region'] != last_date['Country\/Region'].shift(1)\nlast_date.loc[mask, 'Confirmed'] = np.nan\nlast_date.loc[mask, 'Deaths'] = np.nan\nlast_date.loc[mask, 'Recovered'] = np.nan\n\nlast_date = last_date[last_date['Confirmed']>0]\nlast_date = last_date.groupby('Country\/Region')['Date'].agg(['max']).reset_index()\n# last_date.head()\n\n# first_last\n# ==========\nfirst_last = pd.concat([first_date, last_date[['max']]], axis=1)\n\n# added 1 more day, which will show the next day as the day on which last case appeared\nfirst_last['max'] = first_last['max'] + timedelta(days=1)\n\n# no. of days\nfirst_last['Days'] = first_last['max'] - first_last['min']\n\n# task column as country\nfirst_last['Task'] = first_last['Country\/Region']\n\n# rename columns\nfirst_last.columns = ['Country\/Region', 'Start', 'Finish', 'Days', 'Task']\n\n# sort by no. of days\nfirst_last = first_last.sort_values('Days')\n# first_last.head()\n\n# visualization\n# =============\n\n# produce random colors\nclr = [\"#\"+''.join([random.choice('0123456789ABC') for j in range(6)]) for i in range(len(first_last))]\n\n# plot\nfig = ff.create_gantt(first_last, index_col='Country\/Region', colors=clr, show_colorbar=False, \n                      bar_width=0.2, showgrid_x=True, showgrid_y=True, height=2500)\n#fig.show()","701a36bf":"temp = full_table.groupby(['Date', 'Country\/Region'])['Confirmed'].sum()\ntemp = temp.reset_index().sort_values(by=['Date', 'Country\/Region'])\ntemp = temp[temp['Country\/Region'].isin(gt_1000)]\n\nplt.style.use('seaborn')\ng = sns.FacetGrid(temp, col=\"Country\/Region\", hue=\"Country\/Region\", sharey=False, col_wrap=5)\ng = g.map(plt.plot, \"Date\", \"Confirmed\")\ng.set_xticklabels(rotation=90)\nplt.show()","86de7375":"temp = full_table.groupby(['Country\/Region', 'Date', ])['Confirmed', 'Deaths', 'Recovered']\ntemp = temp.sum().diff().reset_index()\ntemp = temp[temp['Country\/Region'].isin(gt_1000)]\n\nmask = temp['Country\/Region'] != temp['Country\/Region'].shift(1)\n\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\ntemp.loc[mask, 'Recovered'] = np.nan\n\n# plt.style.use('seaborn')\n# g = sns.FacetGrid(temp, col=\"Country\/Region\", hue=\"Country\/Region\",  sharey=False, col_wrap=5)\n# g = g.map(sns.lineplot, \"Date\", \"Confirmed\")\n# g.set_xticklabels(rotation=90)\n# plt.show()","e3b02ba4":"epidemics = pd.DataFrame({\n    'epidemic' : ['COVID-19', 'SARS', 'EBOLA', 'MERS', 'H1N1'],\n    'start_year' : [2019, 2003, 2014, 2012, 2009],\n    'end_year' : [2020, 2004, 2016, 2017, 2010],\n    'confirmed' : [full_latest['Confirmed'].sum(), 8096, 28646, 2494, 6724149],\n    'deaths' : [full_latest['Deaths'].sum(), 774, 11323, 858, 19654]\n})\n\nepidemics['mortality'] = round((epidemics['deaths']\/epidemics['confirmed'])*100, 4)\n\nepidemics.rename(columns={'epidemic': 'Epidemia','start_year': 'Inicio','end_year': 'Fim',\\\n                              'confirmed': 'Casos','deaths': 'Mortes','mortality': 'Mortalidade'}, inplace=True)\n\nepidemics.head()","a6cafe41":"temp = epidemics.melt(id_vars='Epidemia', value_vars=['Casos', 'Mortes', 'Mortalidade'],\n                      var_name='Case', value_name='Value')\n\nfig = px.bar(temp, x=\"Epidemia\", y=\"Value\", color='Epidemia', text='Value', facet_col=\"Case\",\n             color_discrete_sequence = px.colors.qualitative.Bold)\nfig.update_traces(textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.update_yaxes(showticklabels=False)\nfig.layout.yaxis2.update(matches=None)\nfig.layout.yaxis3.update(matches=None)\nfig.show()\n\nplt.savefig('026br.png')","558dee70":"#### Predictions of Linear Regression are nowhere close to actual numbers","f3cebdc2":"#### Growth rate of Confirmed, Recovered and Death Cases","c290df35":"# Prediction number of victims of covid-19 using Machine Learning Models","5b9b9a7c":"### Facebook's Prophet Model for forecasting new cases","0d60bb8a":"# Libraries","50f42bcf":"# This is the forecast for new cases today","3942a57d":"### Confirmed cases (countries with > 1000 cases)","32f2e716":"#### Cambodia has able to contain COVID-19 pretty well with no Deaths recorded so far with pretty healthy Recovery Rate.","32438f17":"# Preprocessing","7ae3aeec":"https:\/\/www.kaggle.com\/imdevskp\/mers-outbreak-analysis  \nhttps:\/\/www.kaggle.com\/imdevskp\/sars-2003-outbreak-analysis  \nhttps:\/\/www.kaggle.com\/imdevskp\/western-africa-ebola-outbreak-analysis","14e2b27d":"#### Linear Regression Model for Confirm Cases Prediction","858c14bc":"# Analysis on similar epidemics","c63f5ab2":"# Country Wise","4f99fcae":"#### Growth Factor constantly above 1 is an clear indication of Exponential increase in all form of cases.","bcfab534":"#### Mortality rate = (Number of Death Cases \/ Number of Confirmed Cases) x 100\n#### Recovery Rate= (Number of Recoverd Cases \/ Number of Confirmed Cases) x 100\n#### Mortality rate increment is pretty significant along with drastic drop in recovery rate falling even below the average Recovery Rate around the World. That's a conclusive evidence why number of Active Cases are rising, also there is increase in number of Closed Cases as the mortality rate is a clear indication of increase number of Death Cases","d1ed385d":"New Cases Forecast","c10e77c1":"finish here the timeseries forecast","1bafa401":"# Dataset","bd12fee6":"### Comparison of China, Italy, US, Spain and Rest of the World","6cbf1fc9":"### Facebook's Prophet Model for forecasting new cases","cd1fd865":"#### The Linear Regression Model seems to be really falling aprat. As it is clearly visible that the trend of Confirmed Cases in not at all Linear","065c8eb4":"Recovering Forecast","76489f3d":"#### Holt's Linear Model","daba783a":"## Time Series Forecasting","0b9839e3":"## Time Series Forecasting","3a7df68f":"### What is COVID-19?","c996a8cc":"# Cases over the time","b9554590":"Note : In the graph, last day is shown as one day after the last time a new confirmed cases reported in the Country \/ Region","c157a845":"#### China has been able to \"flatten the curve\" looking at their graphs of Confirmed and Death Cases. With staggering Recovery Rate.\n#### US seems to have good control on Deaths, but number of people getting affected is going way out of hand.","e4ccdcb3":"#### Countries with more than 100 Confirmed Cases and No Deaths with considerably high Recovery Rate","c251acf5":"# # **Forecast of recovery from covid-19 cases **","76d80cbd":"#### Holt's Winter Model for Daily Time Series","20d31761":"# # **Forecast of deaths by covid-19 cases **","14e53090":"#### Support Vector Machine ModelRegressor for Prediction of Deaths","9c6522e0":"#### Countries with more than 50 Confirmed and Cases with No Recovered Patients with considerable Mortality Rate","dd9ab193":"# Prediction of the number of patients will be recovered from the covid-19 using Machine Learning Models","cd9f74dc":"### Number of new cases every day","e09516db":"## Time Series Forecasting","38e2afe6":"#### Taking off Recovery Rate of Spain is a good sign but it's nowhere in comparison to the Moratality Rate. Its alarming sign for USA as Recovery Rate is dropping down with Mortality Rate taking off","2655eab4":"#### Predictions of Linear Regression are nowhere close to actual numbers","27bb48e8":"#### The Linear Regression Model seems to be really falling aproach. As it is clearly visible that the trend of Confirmed Cases in not at all Linear","760b1fb4":"**Beginning of Death Forecasts**","89938834":"# Choosing the best forecast model results.","9d27d6a2":"A mediana de um conjunto de n\u00fameros \u00e9 aquele n\u00famero em que metade dos n\u00fameros \u00e9 menor e metade dos n\u00fameros \u00e9 maior. ... A m\u00e9dia de um conjunto de n\u00fameros \u00e9 o total desses n\u00fameros dividido pelo n\u00famero de itens nesse conjunto. A mediana e a m\u00e9dia podem estar pr\u00f3ximas, mas tamb\u00e9m podem ser significativamente diferentes.","eebc8650":"Poland's Cases per million","a2226587":"#### Serbia is the country we need to look after as the number of Positive cases are well above 1000 with considerable number of death cases with sign of Recovered Patients.","e8c93db3":"****Comparing Average mortality and recovery rate in Poland and Worldwide","93489344":"#### Mortality and Recovery Rate analysis around the World","4f0c8d59":"## Importing required Python Packages and Libraries","b5a34436":"**End of Recovery Forecasts**","f27f7034":"Calculation of Forecasted Active Cases","8a5e8703":"# # **Forecast of new covid-19 cases in Poland **","c36faf01":"https:\/\/www.kaggle.com\/imdevskp\/covid19-vs-sars-vs-mers-vs-ebola-vs-h1n1","1e25585b":"## Countrywise Analysis","51f14248":"#### Summarization of Forecasts using different Models","29c45737":"### New cases (countries with > 1000 cases)","ca6cef30":"# Forecast Summary","99198781":"#### Comparison of Daily Increase in Number of Cases of Italy, Spain, USA and Poland, where maximum number of Confirmed Cases are equivalent to maximum number of Confirmed Cases in Poland","9d061dcc":"#### Top 25 Countries as per Mortatlity Rate and Recovery Rate with more than 500 Confirmed Cases","84756765":"#### Predictions of Linear Regression are nowhere close to actual numbers","74385760":"#### Holt's Linear Model","4faa988f":"#### Summarization of Forecasts using different Models","3a686315":"#### Support Vector Machine ModelRegressor for Prediction of Recoverings","f066ecc3":"### Facebook's Prophet Model for forecasting Recovered cases","042e0818":"# Composition of Cases","5bed69d1":"Objective of this notebook is to study COVID-19 outbreak with the help of some basic visualizations techniques. Comparison of Poland where the COVID-19 originally originated from with the Rest of the World. Perform predictions and Time Series forecasting in order to study the impact and spread of the COVID-19 in comming days.","1f398815":"#### Survival Probability is the only graph that looks the most promising! Having average survival probability of 97%+ across all countries but it's dropping by slight margin everyday. The difference between Mean and Death Probability is an clear indication that there few countries with really high mortality rate e.g. Italy, Algeria, UK etc.","14b5e5a6":"# Choosing the best forecast model results.","eca1793f":"### Number of new countries every day","7ece65e3":"## Data Analysis for Brazil","8590cfad":"**End of Death Forecasts**","7692278d":"> **Beginning of  Recovery Forecasts**","e70a86ae":"#### Holt's Winter Model for Daily Time Series","9fc49fd6":"# Epidemic Span","add19cb4":"# Country Dimentions","39edf146":"> ## Worldwide Analysis","afcce467":"#### Linear Regression Model for Confirm Cases Prediction","4b589647":"#### Holt's Linear Model","d571184a":"Number of Deaths Forecast","137eae95":"finish here the timeseries forecast","4a8d6694":"#### Summarization of Forecasts using different Models","dd5919ee":"#### Holt's Winter Model for Daily Time Series","f7f64ab6":"#### We can clearly notice the decreasing trend in the number of Daily Confirmed and Death Cases of Spain and Italy. That's really positive sign for both th countries.","d38bd915":"#### Support Vector Machine Model Regressor for Prediction of Confirmed Cases","b557286e":"Final forecast plotings","0ac910fe":"COVID-19 is a respiratory illness caused by a new virus. Symptoms include fever, coughing, sore throat and shortness of breath. The virus can spread from person to person, but good hygiene can prevent infection.","d3bf9069":"# Top 20 Countries","370431f1":"# COVID-19","418d42dc":"* #### Linear Regression Model for recovery Prediction","026cac74":"### Growth Factor\nGrowth factor is the factor by which a quantity multiplies itself over time. The formula used is:\n\n**Formula: Every day's new (Confirmed,Recovered,Deaths) \/ new (Confirmed,Recovered,Deaths) on the previous day.**\n\nA growth factor **above 1 indicates an increase correspoding cases**.\n\nA growth factor **above 1 but trending downward** is a positive sign, whereas a **growth factor constantly above 1 is the sign of exponential growth**.\n\nA growth factor **constant at 1 indicates there is no change in any kind of cases**.","aa91e2a4":"## Prediction using Machine Learning Models","56c57ec2":"#### Active Cases = Number of Confirmed Cases - Number of Recovered Cases - Number of Death Cases\n#### Increase in number of Active Cases is probably an indication of Recovered case or Death case number is dropping in comparison to number of Confirmed Cases drastically. Will look for the conclusive evidence for the same in the notebook ahead.","7e608c57":"https:\/\/app.flourish.studio\/visualisation\/1571387\/edit","e1dd9648":"# Calander map","011e6d2f":"# Comparison with similar epidemics","9e46f7fa":"#### Closed Cases = Number of Recovered Cases + Number of Death Cases \n#### Increase in number of Closed classes imply either more patients are getting recovered from the disease or more people are dying because of COVID-19"}}