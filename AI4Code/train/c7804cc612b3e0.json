{"cell_type":{"5390b2db":"code","d155b4fa":"code","bc53f744":"code","84e7f8a2":"code","ed5b5cb9":"code","48395000":"code","405b241e":"code","9bf2ce13":"code","8f488d6e":"code","6d6f86f7":"code","23cba730":"code","7056556a":"code","ba8dbd9a":"code","2d39330b":"code","3e678874":"code","b0cb6e25":"code","0533c84a":"code","73bc4d85":"code","a125f512":"code","035f0d99":"code","9e2a7e74":"code","efb10aca":"code","efb2b01e":"code","e0fd5cb2":"code","16c032e3":"code","4eca7770":"code","53009acb":"code","6d8be09e":"code","f713d9bf":"code","9488f425":"code","097da96f":"code","f6cda9cc":"code","6d8ae8d5":"code","5280df33":"code","117e8948":"code","a75bd07a":"code","50560e09":"code","306df8bf":"code","7cca18e9":"code","57424fbc":"code","b57405f2":"code","b48d32f5":"code","950eb241":"code","98d2d49c":"code","f2e00018":"code","0a374e35":"code","5a61cd9c":"code","6449d77a":"code","0ffd4a70":"code","fa7910bb":"code","1b4d9638":"code","857e6ac3":"code","59a50a88":"code","7d02cd86":"code","4779d029":"code","e7828e66":"code","45e3258a":"code","0de74410":"code","bcde0267":"code","6e3cde36":"code","9ea66a51":"code","ff7c1ddf":"code","9b19532b":"code","9128d7de":"code","6573fd6d":"code","6c41a2be":"code","72388d44":"code","53611a56":"code","55ba8879":"code","8f3762b5":"code","521c4b5f":"code","851b177b":"code","d5060c72":"code","35629035":"code","4d4deb78":"code","7f03ef30":"code","c8e996a3":"code","a9316a44":"code","23f00be1":"code","1a901085":"markdown","8b4eaa48":"markdown","649951b2":"markdown","93e735f9":"markdown","903c2a7c":"markdown","ce4b8053":"markdown","64473c1d":"markdown","0ee231f7":"markdown","894d732e":"markdown","84f2f728":"markdown","d3dd1763":"markdown","354d5572":"markdown","e403263e":"markdown","178643af":"markdown","325f2073":"markdown","a344d82f":"markdown","ead01cc6":"markdown","84640101":"markdown","6eb1297d":"markdown","7c6c6e6f":"markdown","a471e36f":"markdown","3914b5e6":"markdown","b3d1013b":"markdown","4c8d2b7b":"markdown","d853715f":"markdown","6227d4f1":"markdown","92941b6d":"markdown","8d8caac3":"markdown","252d499b":"markdown","10c576f5":"markdown","7d31d972":"markdown","ae8a874a":"markdown","45d37dfb":"markdown","8987f3f4":"markdown","4d28c011":"markdown","f018db87":"markdown","d5181a78":"markdown","39b7097d":"markdown","5e057284":"markdown","be7cb005":"markdown","f8e5b4cd":"markdown","bd43d20f":"markdown","9c236c44":"markdown","e5e40a70":"markdown","73381a44":"markdown","dbaa6a5c":"markdown","3820fb4e":"markdown","d2ad0f9f":"markdown","fce2bb37":"markdown","d8cf8aa2":"markdown","11da3714":"markdown","47714751":"markdown","3257fb1c":"markdown","79de19e7":"markdown","d5d0e961":"markdown","43bcace6":"markdown","c8c95617":"markdown","72e11b5c":"markdown","59cd25cb":"markdown","ca5445dd":"markdown","28423921":"markdown","04fd0b3c":"markdown","aa52a566":"markdown","cce2e17d":"markdown","91172505":"markdown","78200aa8":"markdown","f5a50d88":"markdown","6d0d6d07":"markdown","4bb49068":"markdown","57064269":"markdown","a8307215":"markdown","7ff339be":"markdown","f54b2f74":"markdown","b2a5ba34":"markdown","913f9e09":"markdown","000ffb0f":"markdown","7f695573":"markdown","485c3378":"markdown","b2dc34b2":"markdown","05427069":"markdown","4f5d6502":"markdown","d68e3c51":"markdown","da62fb21":"markdown","6f59576b":"markdown","c60aada8":"markdown","d73d6cfb":"markdown","322133db":"markdown","79a5e2c1":"markdown","306799f3":"markdown","750e2096":"markdown","2ff70666":"markdown","5a90f0cd":"markdown","d30ec870":"markdown","54cc03ee":"markdown","96c81e20":"markdown","b02e8d9a":"markdown","31ac1aaa":"markdown","944c3ceb":"markdown","0f498d85":"markdown","93cb5760":"markdown","18a12e67":"markdown","bd02c39b":"markdown","1c1e601e":"markdown","ec8a7a30":"markdown","9cd73660":"markdown","c878e2f1":"markdown","77d703b0":"markdown","2ba33ce5":"markdown","a02ce42f":"markdown","f3ffbbfb":"markdown","d399d266":"markdown","2fd60b4e":"markdown","fff8e0fd":"markdown","02338e66":"markdown","fadf378a":"markdown","b5565263":"markdown","bd69ea19":"markdown","3cf1fe21":"markdown","0ccb36ba":"markdown","4e53ddc4":"markdown","740b8cce":"markdown","7e123484":"markdown","2b71f3b1":"markdown"},"source":{"5390b2db":"# Timer\nimport time\nstart_time = time.time()\n\nimport platform,socket,re,uuid,json,psutil,logging\nfrom datetime import date\ndef getSystemInfo():\n    try:\n        info={}\n        info['platform']=platform.system()\n        info['platform-release']=platform.release()\n        info['platform-version']=platform.version()\n        info['architecture']=platform.machine()\n        info['hostname']=socket.gethostname()\n        info['ip-address']=socket.gethostbyname(socket.gethostname())\n        info['mac-address']=':'.join(re.findall('..', '%012x' % uuid.getnode()))\n        info['processor']=platform.processor()\n        info['ram']=str(round(psutil.virtual_memory().total \/ (1024.0 **3)))+\" GB\"\n        info['date']=str(date.today())\n        return json.dumps(info)\n    except Exception as e:\n        logging.exception(e)\n\njson.loads(getSystemInfo())","d155b4fa":"# Libraries\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\nfrom catboost import CatBoostRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\nfrom sklearn import preprocessing\n!pip install sweetviz\nimport sweetviz","bc53f744":"pd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)","84e7f8a2":"# Dataset load\ncars = pd.read_csv(\"\/kaggle\/input\/us-used-cars-dataset\/used_cars_data.csv\")\n\n# Dataset overview\ncars.head(2)","ed5b5cb9":"cars.describe()","48395000":"aux = cars[[\"city_fuel_economy\", \"engine_displacement\", \"highway_fuel_economy\", \"horsepower\", \"mileage\", \"year\", \"price\"]]\nfig, axs = plt.subplots(ncols=7, nrows=1, figsize=(20, 8))\nindex = 0\naxs = axs.flatten()\nfor k,v in aux.items():\n    sns.boxplot(y=k, data=aux, ax=axs[index])\n    index += 1\nplt.tight_layout(pad=0.4, w_pad=0.5, h_pad=5.0)","405b241e":"fig, axs = plt.subplots(ncols=3, nrows=3, figsize=(20, 10))\nindex = 0\naxs = axs.flatten()\nfor k,v in aux.items():\n    sns.histplot(v, ax=axs[index], bins=100)\n    index += 1\nplt.tight_layout(pad=0.4, w_pad=0.5, h_pad=5.0)","9bf2ce13":"plt.figure(figsize=(20, 10))\ncorr = aux.corr()\nmatrix = np.triu(corr)\nsns.heatmap(corr,  annot=True, mask=matrix)","8f488d6e":"# Let's scale the columns before plotting them against price\nmin_max_scaler = preprocessing.MinMaxScaler()\ncolumn_sels = [\"city_fuel_economy\", \"engine_displacement\", \"highway_fuel_economy\", \"horsepower\", \"mileage\", \"year\"]\nx = aux.loc[:,column_sels]\ny = aux['price']\nx = pd.DataFrame(data=min_max_scaler.fit_transform(x), columns=column_sels)\nfig, axs = plt.subplots(ncols=3, nrows=2, figsize=(20, 10))\nindex = 0\naxs = axs.flatten()\nfor i, k in enumerate(column_sels):\n    sns.regplot(y=y, x=x[k], ax=axs[i])\nplt.tight_layout(pad=0.4, w_pad=0.5, h_pad=5.0)\ndel aux","6d6f86f7":"cars_cat = cars.select_dtypes(include = 'object').copy()\ncars_cat_stats = pd.DataFrame(columns = ['column', 'values', 'values_count_incna', 'values_count_nona', \n                                         'num_miss', 'pct_miss'])\ntmp = pd.DataFrame()\n\nfor c in cars_cat.columns:\n    tmp['column'] = [c]\n    tmp['values'] = [cars_cat[c].unique()]\n    tmp['values_count_incna'] = len(list(cars_cat[c].unique()))\n    tmp['values_count_nona'] = int(cars_cat[c].nunique())\n    tmp['num_miss'] = cars_cat[c].isnull().sum()\n    tmp['pct_miss'] = (cars_cat[c].isnull().sum()\/ len(cars_cat)).round(3)*100\n    cars_cat_stats = cars_cat_stats.append(tmp)\n\n# Let's do an Ascending sort on the number of distinct categories for each categorical variable\ncars_cat_stats.sort_values(by = 'values_count_incna', inplace = True, ascending = True)\n\n# And set the index to column names\ncars_cat_stats.set_index('column', inplace = True)\ncars_cat_stats","23cba730":"cars_cat = cars_cat[[\"transmission\", \"wheel_system\", \"fuel_type\", \"body_type\", \"maximum_seating\", \"listing_color\"]]\ncars_cat['price'] = cars.loc[cars_cat.index, 'price'].copy()\n\nix = 1\nfig = plt.figure(figsize = (20,20))\nfor c in list(cars_cat.columns):\n    if ix <= 3:\n        if c != 'price':\n            ax1 = fig.add_subplot(2,3,ix)\n            sns.countplot(data = cars_cat, x=c, ax = ax1)\n            ax2 = fig.add_subplot(2,3,ix+3)\n            sns.boxplot(data=cars_cat, x=c, y='price', ax=ax2)\n            ax2.tick_params(axis='x', rotation=90)\n            ax1.tick_params(axis='x', rotation=90)\n            ax2.set_yscale(\"log\")\n            \n    ix = ix +1\n    if ix == 4: \n        fig = plt.figure(figsize = (20,20))\n        ix =1","7056556a":"cars_cat = cars.select_dtypes(include = 'object').copy()\ncars_cat = cars_cat[[\"engine_type\", \"transmission_display\", \"make_name\"]]\ncars_cat['price'] = cars.loc[cars_cat.index, 'price'].copy()\n\nix = 1\nfig = plt.figure(figsize = (20,40))\nfor c in list(cars_cat.columns):\n    if ix <= 3:\n        if c != 'price':\n            ax1 = fig.add_subplot(6,1,ix)\n            sns.countplot(data = cars_cat, x=c, ax = ax1)\n            ax2 = fig.add_subplot(6,1,ix+3)\n            sns.boxplot(data=cars_cat, x=c, y='price', ax=ax2)\n            ax2.tick_params(axis='x', rotation=90)\n            ax1.tick_params(axis='x', rotation=90)\n            ax2.set_yscale(\"log\")\n            \n    ix = ix +1\n    if ix == 4: \n        fig = plt.figure(figsize = (20,20))\n        ix =1\n    plt.tight_layout(pad=0.4, w_pad=0.5, h_pad=5.0)\ndel cars_cat\ndel cars_cat_stats","ba8dbd9a":"threshold = 40 # The threshold is set to 40% of missing data within a variable\ncolumns = round(cars.isnull().sum() * 100 \/ len(cars))\nmask = cars.isnull().sum() * 100 \/ len(cars) > threshold\ndroped_cols = columns[mask]\ncars = cars[columns.index[~mask]]\ndel columns, mask\nprint(droped_cols)","2d39330b":"cars = cars.drop(['latitude', 'longitude', 'vin', 'city', 'dealer_zip', 'back_legroom',  'front_legroom', 'height', 'length', \n                  'wheelbase', 'width'], axis=1)","3e678874":"cars = cars.drop(['daysonmarket', 'listing_id', 'sp_id', 'listed_date', 'main_picture_url', 'savings_amount', 'sp_name', 'trim_name', \n                  'trimId', 'franchise_dealer', 'seller_rating', 'franchise_make'], axis=1)","b0cb6e25":"cars = cars.drop(['description', 'major_options', 'interior_color'], axis=1)","0533c84a":"cars = cars.drop(['engine_cylinders', 'wheel_system_display', 'exterior_color'], axis=1)","73bc4d85":"print(\"Torque variable: \" + cars.torque[0] + \"\\nPower variable: \" + cars.power[0])","a125f512":"cars[\"torque\"] = cars[\"torque\"].str.replace(\",\",\"\").astype(\"str\")\ncars[\"torque\"] = cars[\"torque\"].apply(lambda x: [int(i) for i in x.split() if i.isdigit()])\ncars[\"torque\"] = [x if len(x) == 2 else [0,0] for x in cars[\"torque\"]]\ncars[\"torque_power\"] = [x[0] for x in cars[\"torque\"]]\ncars[\"torque_rpm\"] = [x[1] for x in cars[\"torque\"]]","035f0d99":"cars[\"power\"] = cars[\"power\"].str.replace(\",\",\"\").astype(\"str\")\ncars[\"power\"] = cars[\"power\"].apply(lambda x: [int(i) for i in x.split() if i.isdigit()])\ncars[\"power\"] = [x if len(x) == 2 else [0,0] for x in cars[\"power\"]]\ncars[\"power_hp\"] = [x[0] for x in cars[\"power\"]]\ncars[\"power_rpm\"] = [x[1] for x in cars[\"power\"]]","9e2a7e74":"print(\"This is how the variables look like after the cleaning:\\ntorque_power: \" + str(cars.torque_power[0]) + \"\\ntorque_rpm: \" + \n      str(cars.torque_rpm[0]) + \"\\npower_hp: \" + str(cars.power_hp[0]) + \"\\npower_rpm: \" + str(cars.power_rpm[0]))","efb10aca":"cars = cars.drop(['power', 'torque'], axis=1)","efb2b01e":"(cars.horsepower.isna() & cars.power_hp != 0).sum()","e0fd5cb2":"cars.drop(\"power_hp\", axis=1, inplace=True)","16c032e3":"cars.power_rpm.replace(0, np.nan, inplace=True)\ncars.torque_power.replace(0, np.nan, inplace=True)\ncars.torque_rpm.replace(0, np.nan, inplace=True)","4eca7770":"cars.transmission_display.value_counts().head(10)","53009acb":"dic_trans_dis = {\"Automatic\": \"6\", \"Continuously Variable Transmission\": \"6\", \"Manual\": \"6\"}\ncars[\"transmission_display\"].replace(dic_trans_dis, inplace=True)\ndel dic_trans_dis","6d8be09e":"cars[\"is_new\"] = cars[\"is_new\"].astype(int)","f713d9bf":"cars.fuel_tank_volume.value_counts().head(10)","9488f425":"cars.maximum_seating.value_counts()","097da96f":"cars.transmission_display.value_counts().head(10)","f6cda9cc":"# Removing the units of measurement and changing the data type to float16.\ncars[\"fuel_tank_volume\"] = cars[\"fuel_tank_volume\"].str.extract('(\\d+)', expand=False).astype(\"float16\")\ncars[\"maximum_seating\"] = cars[\"maximum_seating\"].str.extract('(\\d+)', expand=False).astype(\"float16\")\ncars[\"transmission_display\"] = cars[\"transmission_display\"].str.extract('(\\d+)', expand=False).astype(\"float16\")","6d8ae8d5":"# It is important to have a look first so that we can figure out how to proceed.\nperc = round(cars.isnull().sum() * 100 \/ len(cars))\ncount = cars.isnull().sum()\nnas = pd.concat([perc, count], axis=1)\ndel perc\ndel count\nnas.columns = [\"percentage\", \"count\"]\nnas.sort_values(by=[\"percentage\", \"count\"])","5280df33":"cars = cars.dropna(subset=['mileage'])\n# Overview\nperc = round(cars.isnull().sum() * 100 \/ len(cars))\ncount = cars.isnull().sum()\nnas = pd.concat([nas, perc, count], axis=1)\ndel perc\ndel count\nnas.columns = [\"percentage_0\", \"count_0\", \"percentage_1\", \"count_1\"]\nnas.sort_values(by=[\"percentage_0\", \"count_0\"])","117e8948":"cars.loc[cars[\"fuel_type\"] == \"Electric\", \"engine_type\"] = \"Electric_Motor\"","a75bd07a":"cars.loc[cars[\"fuel_type\"] == \"Electric\", \"transmission_display\"] = 6","50560e09":"cars.loc[cars[\"fuel_type\"] == \"Electric\", \"horsepower\"] = cars.horsepower.mean() # There is just a value in the whole column that is not an NA","306df8bf":"cars.loc[cars[\"fuel_type\"] == \"Electric\", \"engine_displacement\"] = cars.engine_displacement.mean()","7cca18e9":"cars.loc[cars[\"fuel_type\"] == \"Electric\", \"fuel_tank_volume\"] = cars.fuel_tank_volume.mean()","57424fbc":"cars[\"avg_maximum_seating\"] = cars.groupby([\"make_name\", \"model_name\", \"body_type\"])[\"maximum_seating\"].transform(\"mean\")","b57405f2":"cars[\"avg_city_fuel_economy\"] = cars.groupby([\"body_type\", \"engine_displacement\", \"engine_type\", \"fuel_type\", \"horsepower\", \"make_name\", \n                                              \"model_name\",  \"year\"])['city_fuel_economy'].transform('mean')\ncars[\"avg_highway_fuel_economy\"] = cars.groupby([\"body_type\", \"engine_displacement\", \"engine_type\", \"fuel_type\", \"horsepower\", \"make_name\", \n                                              \"model_name\",  \"year\"])['highway_fuel_economy'].transform('mean')","b48d32f5":"cars[\"avg_horsepower\"] = cars.groupby([\"engine_type\", \"fuel_type\", \"make_name\", \"model_name\",  \"year\"])['horsepower'].transform('mean')\ncars[\"avg_engine_displacement\"] = cars.groupby([\"engine_type\", \"fuel_type\", \"make_name\", \"model_name\",  \"year\"])['engine_displacement'].transform('mean')","950eb241":"cars[\"avg_power_rpm\"] = cars.groupby([\"engine_type\", \"engine_displacement\", \"horsepower\", \"fuel_type\", \"make_name\"])['power_rpm'].transform('mean')\ncars[\"avg_torque_power\"] = cars.groupby([\"engine_type\", \"engine_displacement\", \"horsepower\", \"fuel_type\", \"make_name\"])['torque_power'].transform('mean')\ncars[\"avg_torque_rpm\"] = cars.groupby([\"engine_type\", \"engine_displacement\", \"horsepower\", \"fuel_type\", \"make_name\"])['torque_rpm'].transform('mean')","98d2d49c":"cars[\"avg_fuel_tank_volume\"] = cars.groupby([\"make_name\", \"model_name\",  \"year\"])['fuel_tank_volume'].transform('mean')","f2e00018":"cars['maximum_seating'] = np.where(cars['maximum_seating'].isna(), cars['avg_maximum_seating'], cars['maximum_seating'])\ncars['city_fuel_economy'] = np.where(cars['city_fuel_economy'].isna(), cars['avg_city_fuel_economy'], cars['city_fuel_economy'])\ncars['highway_fuel_economy'] = np.where(cars['highway_fuel_economy'].isna(), cars['avg_highway_fuel_economy'], cars['highway_fuel_economy'])\ncars['horsepower'] = np.where(cars['horsepower'].isna(), cars['avg_horsepower'], cars['horsepower'])\ncars['engine_displacement'] = np.where(cars['engine_displacement'].isna(), cars['avg_engine_displacement'], cars['engine_displacement'])\ncars['fuel_tank_volume'] = np.where(cars['fuel_tank_volume'].isna(), cars['avg_fuel_tank_volume'], cars['fuel_tank_volume'])\ncars['power_rpm'] = np.where(cars['power_rpm'].isna(), cars['avg_power_rpm'], cars['power_rpm'])\ncars['torque_power'] = np.where(cars['torque_power'].isna(), cars['avg_torque_power'], cars['torque_power'])\ncars['torque_rpm'] = np.where(cars['torque_rpm'].isna(), cars['avg_torque_rpm'], cars['torque_rpm'])","0a374e35":"cars = cars.drop(['avg_maximum_seating', 'avg_city_fuel_economy', 'avg_highway_fuel_economy', 'avg_horsepower', 'avg_engine_displacement',\n                  'avg_fuel_tank_volume', 'avg_power_rpm', 'avg_torque_power', 'avg_torque_rpm'], axis=1)","5a61cd9c":"mode_body_type = cars.groupby(['make_name','model_name']).body_type.apply(lambda x: x.mode()).to_frame(name=\"mode\").reset_index()\nmode_body_type = mode_body_type.drop([\"level_2\"], axis=1)\n# Merge cars and the dataframe we just created to get the \"mode\" column in the cars dataset.\ncars = (cars.merge(mode_body_type, on=[\"make_name\", \"model_name\"]))\n# All records that are NA in the variable \"body_type\" are assigned the mode.\ncars['body_type'] = np.where(cars['body_type'].isna(), cars['mode'], cars['body_type'])\n# We drop the column we no longer need (mode)\ncars = cars.drop([\"mode\"], axis=1)\ndel mode_body_type","6449d77a":"mode_transmission = cars.groupby(['make_name','model_name']).transmission.apply(lambda x: x.mode()).to_frame(name=\"mode\").reset_index()\nmode_transmission = mode_transmission.drop([\"level_2\"], axis=1)\n# Merge cars and the dataframe we just created to get the \"mode\" column in the cars dataset.\ncars = (cars.merge(mode_transmission, on=[\"make_name\", \"model_name\"]))\n# All records that are NA in the variable \"transmission\" are assigned the mode.\ncars['transmission'] = np.where(cars['transmission'].isna(), cars['mode'], cars['transmission'])\ncars = cars.drop([\"mode\"], axis=1)\ndel mode_transmission","0ffd4a70":"mode_fuel_type = cars.groupby(['make_name','model_name']).fuel_type.apply(lambda x: x.mode()).to_frame(name=\"mode\").reset_index()\nmode_fuel_type = mode_fuel_type.drop([\"level_2\"], axis=1)\n# Merge cars and the dataframe we just created to get the \"mode\" column in the cars dataset.\ncars = (cars.merge(mode_fuel_type, on=[\"make_name\", \"model_name\"]))\n# All records that are NA in the variable \"fuel_type\" are assigned the mode.\ncars['fuel_type'] = np.where(cars['fuel_type'].isna(), cars['mode'], cars['fuel_type'])\ncars = cars.drop([\"mode\"], axis=1)\ndel mode_fuel_type","fa7910bb":"mode_engine_type = cars.groupby(['make_name','model_name']).engine_type.apply(lambda x: x.mode()).to_frame(name=\"mode\").reset_index()\nmode_engine_type = mode_engine_type.drop([\"level_2\"], axis=1)\n# Merge cars and the dataframe we just created to get the \"mode\" column in the cars dataset.\ncars = (cars.merge(mode_engine_type, on=[\"make_name\", \"model_name\"]))\n# All records that are NA in the variable \"engine_type\" are assigned the mode.\ncars['engine_type'] = np.where(cars['engine_type'].isna(), cars['mode'], cars['engine_type'])\ncars = cars.drop([\"mode\"], axis=1)\ndel mode_engine_type","1b4d9638":"mode_wheel_system = cars.groupby(['make_name','model_name']).wheel_system.apply(lambda x: x.mode()).to_frame(name=\"mode\").reset_index()\nmode_wheel_system = mode_wheel_system.drop([\"level_2\"], axis=1)\n# Merge cars and the dataframe we just created to get the \"mode\" column in the cars dataset.\ncars = (cars.merge(mode_wheel_system, on=[\"make_name\", \"model_name\"]))\n# All records that are NA in the variable \"wheel_system\" are assigned the mode.\ncars['wheel_system'] = np.where(cars['wheel_system'].isna(), cars['mode'], cars['wheel_system'])\ncars = cars.drop([\"mode\"], axis=1)\ndel mode_wheel_system","857e6ac3":"perc = round(cars.isnull().sum() * 100 \/ len(cars))\ncount = cars.isnull().sum()\ntemp_nas = pd.concat([perc, count], axis=1)\ndel perc\ndel count\ntemp_nas.columns = [\"percentage\", \"count\"]\ntemp_nas.sort_values(by=[\"percentage\", \"count\"])","59a50a88":"cars[cars.isna().any(axis=1)].shape","7d02cd86":"# Once those variables with a large number of NAs have been removed, we remove those records that have any NAs.\ns1 = cars.shape[0]\ncars = cars.dropna()\ndel_na = s1 - cars.shape[0]\nprint(\"{} rows have been deleted\".format(del_na))\ndel del_na\ndel s1","4779d029":"num_cols = cars.select_dtypes([np.number]).columns.tolist()\ncat_cols = cars.columns[~cars.columns.isin(num_cols)].tolist()\ncolumnas_ord = cat_cols + num_cols\ncars = cars[columnas_ord]\ncars.head()\ndel num_cols\ndel cat_cols\ndel columnas_ord","e7828e66":"cars.engine_type.value_counts().head(10)","45e3258a":"dic_engine = {\"I4 Hybrid\": \"I4\", \"I4 Diesel\": \"I4\", \"I4 Flex Fuel Vehicle\": \"I4\", \"V6 Hybrid\": \"V6\", \"V6 Biodiesel\": \"V6\" ,\n              \"V6 Flex Fuel Vehicle\": \"V6\", \"V8 Flex Fuel Vehicle\": \"V8\", \"I6 Diesel\": \"I6\", \"I6 Biodiesel\": \"I6\", \"V6 Diesel\": \"V6\", \n              \"H4 Hybrid\": \"H4\", \"W12 Flex Fuel Vehicle\": \"W12\", \"V8 Hybrid\": \"V8\", \"I4 Compressed Natural Gas\": \"I4\", \"I6 Hybrid\": \"I6\",\n              \"V6 Compressed Natural Gas\": \"V6\", \"V8 Biodiesel\": \"V8\", \"V8 Diesel\": \"V8\", \"I5 Biodiesel\": \"I5\", \"V8 Compressed Natural Gas\": \"V8\",\n              \"I5 Diesel\": \"I5\", \"V8 Propane\": \"V8\", \"I3 Hybrid\": \"I3\", \"V10 Diesel\": \"V10\", \"V12 Hybrid\": \"V12\"}\ncars[\"engine_type\"].replace(dic_engine, inplace=True)\ndel dic_engine","0de74410":"cars.transmission.value_counts()","bcde0267":"dic_transmission = {\"A\": \"Automatic Transmission (A)\", \"CVT\": \"Continuously Variable Transmission (CVT)\", \n                    \"Dual Clutch\": \"Dual Clutch Transmission (DCT)\", \"M\": \"Manual Transmission (M)\"}\ncars[\"transmission\"].replace(dic_transmission, inplace=True)\ndel dic_transmission","6e3cde36":"cars.engine_type.value_counts().head(10)","9ea66a51":"dic_engine_type = {\"I2\": \"Inline 2 cylinder\", \"I3\": \"Inline 3 cylinder\", \"I4\": \"Inline 4 cylinder\", \n                   \"I5\": \"Inline 5 cylinder\", \"I6\": \"Inline 6 cylinder\", \"R2\": \"Rotary Engine\", \"Electric_Motor\": \"Electric Motor\",\n                   \"H4\": \"Boxer 4 cylinder\", \"H6\": \"Boxer 6 cylinder\"}\ncars[\"engine_type\"].replace(dic_engine_type, inplace=True)\ndel dic_engine_type","ff7c1ddf":"cars.wheel_system.value_counts()","9b19532b":"dic_wheel_system = {\"FWD\": \"Front Wheel Drive (FWD)\", \"AWD\": \"All Wheel Drive (AWD)\", \"4WD\": \"Four Wheel Drive (4WD)\", \"RWD\": \"Rear Wheel Drive (RWD)\",\n                    \"4X2\": \"Two Wheel Drive (4X2)\"}\ncars[\"wheel_system\"].replace(dic_wheel_system, inplace=True)\ndel dic_wheel_system","9128d7de":"dic_listing_color = {\"WHITE\": \"White\", \"BLACK\": \"Black\", \"SILVER\": \"Silver\", \"UNKNOWN\": \"Unknown\", \"GRAY\": \"Gray\", \"BLUE\": \"Blue\", \"RED\": \"Red\",\n                     \"GREEN\": \"Green\", \"BROWN\": \"Brown\", \"ORANGE\": \"Orange\", \"GOLD\": \"Gold\", \"TEAL\": \"Teal\", \"YELLOW\": \"Yellow\", \"PURPLE\": \"Purple\",\n                     \"PINK\": \"Pink\"}\ncars[\"listing_color\"].replace(dic_listing_color, inplace=True)\ndel dic_listing_color","6573fd6d":"dic_make = {\"smart\": \"Smart\"}\ncars[\"make_name\"].replace(dic_make, inplace=True)\ndel dic_make","6c41a2be":"dic_model = {\"fortwo\": \"Fortwo\"}\ncars[\"model_name\"].replace(dic_model, inplace=True)\ndel dic_model","72388d44":"cars.dtypes","53611a56":"cars.city_fuel_economy = cars.city_fuel_economy.astype(\"uint8\")\ncars.highway_fuel_economy = cars.highway_fuel_economy.astype(\"uint8\")\ncars.fuel_tank_volume = cars.fuel_tank_volume.astype(\"uint8\")\ncars.maximum_seating = cars.maximum_seating.astype(\"uint8\")\ncars.transmission_display = cars.transmission_display.astype(\"uint8\")\ncars.is_new = cars.is_new.astype(\"uint8\")","55ba8879":"cars.engine_displacement = cars.engine_displacement.astype(\"uint16\")\ncars.horsepower = cars.horsepower.astype(\"uint16\")\ncars.power_rpm = cars.power_rpm.astype(\"uint16\")\ncars.torque_power = cars.torque_power.astype(\"uint16\")\ncars.torque_rpm = cars.torque_rpm.astype(\"uint16\")\ncars.year = cars.year.astype(\"uint16\")","8f3762b5":"cars.mileage = cars.mileage.astype(\"uint32\")\ncars.price = cars.price.astype(\"uint32\")","521c4b5f":"my_report = sweetviz.analyze(cars, target_feat='price')\nmy_report.show_html('FinalReport.html', layout=\"vertical\")","851b177b":"import json\nweb_dic = cars.drop_duplicates(subset=[\"make_name\", \"model_name\", \"body_type\", \n                                       \"fuel_type\", \"transmission\", \"horsepower\",\n                                       \"engine_displacement\", \"engine_type\",\n                                       \"torque_power\", \"torque_rpm\", \"power_rpm\",\n                                       \"wheel_system\", \"transmission_display\", \"year\",\n                                       \"fuel_tank_volume\", \"city_fuel_economy\", \n                                       \"highway_fuel_economy\", \"maximum_seating\"])[[\"make_name\", \n                                                                                    \"model_name\",\n                                                                                    \"body_type\",\n                                                                                    \"fuel_type\",\n                                                                                    \"transmission\",\n                                                                                    \"horsepower\",\n                                                                                    \"engine_displacement\", \n                                                                                    \"engine_type\",\n                                                                                    \"torque_power\", \n                                                                                    \"torque_rpm\", \n                                                                                    \"power_rpm\",\n                                                                                    \"wheel_system\",\n                                                                                    \"transmission_display\", \n                                                                                    \"year\",\n                                                                                    \"fuel_tank_volume\",\n                                                                                    \"city_fuel_economy\",\n                                                                                    \"highway_fuel_economy\",\n                                                                                    \"maximum_seating\"]].sort_values(by=[\"make_name\", \n                                                                                                                        \"model_name\",\n                                                                                                                        \"body_type\",\n                                                                                                                        \"fuel_type\",\n                                                                                                                        \"transmission\",\n                                                                                                                        \"horsepower\",\n                                                                                                                        \"engine_displacement\", \n                                                                                                                        \"engine_type\",\n                                                                                                                        \"torque_power\", \n                                                                                                                        \"torque_rpm\", \n                                                                                                                        \"power_rpm\",\n                                                                                                                        \"wheel_system\",\n                                                                                                                        \"transmission_display\", \n                                                                                                                        \"year\",\n                                                                                                                        \"fuel_tank_volume\",\n                                                                                                                        \"city_fuel_economy\",\n                                                                                                                        \"highway_fuel_economy\",\n                                                                                                                        \"maximum_seating\"])\nresult = web_dic.to_json(orient=\"records\")\nweb_dic.to_json(r'\/home\/jupyter\/imported\/web_dic', orient=\"records\")","d5060c72":"aux_dummy = pd.get_dummies(cars[\"body_type\"])\ncars = pd.concat([cars, aux_dummy], axis=1)\n\naux_dummy = pd.get_dummies(cars[\"engine_type\"])\ncars = pd.concat([cars, aux_dummy], axis=1)\n\naux_dummy = pd.get_dummies(cars[\"fuel_type\"])\ncars = pd.concat([cars, aux_dummy], axis=1)\n\naux_dummy = pd.get_dummies(cars[\"listing_color\"])\ncars = pd.concat([cars, aux_dummy], axis=1)\n\naux_dummy = pd.get_dummies(cars[\"transmission\"])\ncars = pd.concat([cars, aux_dummy], axis=1)\n\naux_dummy = pd.get_dummies(cars[\"wheel_system\"])\ncars = pd.concat([cars, aux_dummy], axis=1)\n\naux_dummy = pd.get_dummies(cars[\"make_name\"])\ncars = pd.concat([cars, aux_dummy], axis=1)\n\naux_dummy = pd.get_dummies(cars[\"model_name\"], prefix=\"model\")\ncars = pd.concat([cars, aux_dummy], axis=1)\n\ndel aux_dummy\n\n# Just to make sure that the model does not crash.\ncars = cars.select_dtypes(include=['uint8', 'uint16', 'uint32'])\n\ncars.head()","35629035":"X_train, X_test, y_train, y_test = train_test_split(cars.drop(\"price\", axis=1), cars.price, test_size=0.2, random_state=42)\nprint(\"{} rows\".format(X_train.shape[0]))\nprint(\"{} variables\".format(X_test.shape[0]))\ndel cars","4d4deb78":"CBR = CatBoostRegressor(iterations=15000, learning_rate=0.1, od_type=\"Iter\", od_wait=2000, random_seed=63, loss_function=\"RMSE\", verbose=False)\nCBR.fit(X_train, y_train, eval_set=(X_test, y_test))\nscore = CBR.score(X_test, y_test)","7f03ef30":"pred = CBR.predict(X_test)\nrmse = (np.sqrt(mean_squared_error(y_test, pred)))\nr2 = r2_score(y_test, pred)\nprint(\"Testing performance\")\nprint(\"RMSE: {:.2f}\".format(rmse))\nprint(\"R2: {:.2f}\".format(r2))","c8e996a3":"from matplotlib.pyplot import figure\nfigure(figsize=(15, 10), dpi=80)\n\nsorted_feature_importance = CBR.feature_importances_.argsort()\nmyX = X_train.columns[sorted_feature_importance]\nmyY = CBR.feature_importances_[sorted_feature_importance]\nmyX = myX[-20:]\nmyY = myY[-20:]\nplt.barh(myX, myY)\nplt.title(\"Variables' Importance\")\nplt.show()","a9316a44":"pd.to_pickle(CBR, \"..\/CBRModel_03092021_1\")","23f00be1":"print(\"The code took\", round((time.time() - start_time)\/60), \"minutes to run.\")","1a901085":"# Mileage - Vehicle's Price Predictor\n## M.Sc. in Big Data & Data Science Thesis - Universidad Complutense de Madrid\n### Alvaro Lozano, Andrea Lizondo, Mario Muriel, Pablo Abad and Pablo Casero\n#### September 3rd, 2021\n**www.mileage.one**","8b4eaa48":"#### 3.2.2.3. Correlation plot","649951b2":"# 7. Model Deployment","93e735f9":"## 4.3. Deletion of variables not useful for the final goal of the project\n\nRemember, the ultimate goal of the project is to create a model to predict the price of a vehicle using as few variables as possible so that a good result is still obtained. These variables have to be as representative as possible of a vehicle.","903c2a7c":"## 4.9. Coding of data types\n\nVariables have to be encoded in the appropriate data type because great care has to be taken with the use of processing resources.\n\nHere we have a description of the different data types.  \n**bool:** consumes 1 byte, true or false  \n**int8 \/ uint8:** consumes 1 byte of memory, range between -128\/127 or 0\/255  \n**float16 \/ int16 \/ uint16:** consumes 2 bytes of memory, range between -32768 and 32767 or 0\/65535  \n**float32 \/ int32 \/ uint32:** consumes 4 bytes of memory, range between -2147483648 and 2147483647 ","ce4b8053":"## 4.8. Recoding of variables","64473c1d":"## 4.2. Deletion of variables with many missing records\n\nVariables that exceed a 40% threshold missing value are deleted. These variables need to be removed because of the lack of data or other causes.","0ee231f7":"### 4.8.1. Recoding of \"engine_type\" variable\n\nThe variable \"engine_type\" contains some mistakes. Some records have the variable \"fuel_type\" in the \"engine_type\" variable. It was easily solved with a dictionary, eliminating the \"fuel_type\" variable from the original.","894d732e":"**Comments:**  \n*city_fuel_economy* is normally around 20, but high-tech vehicles can reach 100km per litre or even more.  \n*highway_fuel_economy* behaviour is like *city_fuel_economy*.      \n*engine_displacement* is normally between around 1l and 4l, but some sports cars can have 8l.  \nThe range for the variable *horsepower* lies between 80 to 1001hp, the highest value correspond to the Bugatti Veryon, a really expensive sports car.  \nThe *price* variable looks fine as well. Prices for exotic cars could easily go over a million dollars, even more than 3M.  \nFinally, the variable *year* has values lower than 1920 which is okay, because some cars of the dataset could be from the beginning of the century. ","84f2f728":"#### 4.6.5.4. Imputation of \"engine_type\"\n\nGroup by \"make_name\" and \"model_name\" to get the most frequent \"engine_type\" (mode) cateogry and save it as dataframe","d3dd1763":"### 4.8.2. Recoding of \"transmission\" variable\n\nThe variable \"transmission\" is perfectly fine for the model, but it could be hard to interpret for a person who has little knowledge about vehicle mechanics.","354d5572":"### 4.6.3. Treatment of special cases\n\nElectric vehicles are somewhat special. They have fewer mechanical parts than combustion vehicles and therefore there are variables that have to be coded in a special way.","e403263e":"***","178643af":"### 4.6.6. Deletion of non imputable NA values\n\nThrough the process of cleaning and imputation different techniques were used. Some resulted in improvements of the model and others were giving worse results. A second round of imputation was performed, but it did not work as expected and was then discarded. Deleting the rows that still contained NA values was, in the end, the best option for the model.","325f2073":"## 4.5. Cleaning variables\n\nTreatment of variables that needed to be re-coded in different ways.","a344d82f":"***","ead01cc6":"#### 4.6.5.2. Imputation of \"trasmission\"\n\nGroup by \"make_name\" and \"model_name\" to get the most frequent cateogry of \"transmission\" (mode) and save it as dataframe","84640101":"### 4.8.6. Recoding of \"make_name\" variable\n\nIt is just an aesthetic correction.","6eb1297d":"### 3.2.2. Plots of the numeric variables","7c6c6e6f":"### 4.3.4. Duplicated information\n\nIn the dataset there are some columns that contain the same or almost the same information.","a471e36f":"## 4.6. Treatment of NA values\n\nKeeping as many rows as possible is a priority, therefore it is necessary to impute as many missing values as possible.","3914b5e6":"### 3.2.3. Observations about the numeric variables.","b3d1013b":"### 4.6.2. Deletion of non imputable records\nThe variable 'mileage' is too important for the model (we can say this after having run the model over and over again) and there is no way to impute it properly. It must, therefore, be removed from the data when missing.","4c8d2b7b":"**0 vin:** Vehicle Identification Number is a unique encoded string for every vehicle. A vehicle identification number (VIN) (also called a chassis number or frame number) is a unique code, including a serial number, used by the automotive industry to identify individual motor vehicles, towed vehicles, motorcycles, scooters and mopeds, as defined in ISO 3779 (content and structure) and ISO 4030 (location and attachment).  \n**1. back_legroom:** Legroom in the rear seat measured in inches.  \n**2. bed:** Category of bed size (open cargo area) in pickup truck. Null usually means the vehicle isn't a pickup truck.  \n**3. bed_height:**  Height of bed in inches.  \n**4. bed_length:** Length of bed in inches.  \n**5. body_type:** Body Type of the vehicle. Like Convertible, Hatchback, Sedan, etc.  \n**6. cabin:** Category of cabin size (open cargo area) in pickup truck. Eg: Crew Cab, Extended Cab, etc.  \n**7. city:** City where the car is listed. Eg: Houston, San Antonio, etc.   \n**8. city_fuel_economy:** Fuel economy in city traffic in km per litre.  \n**9. combine_fuel_economy:** Combined fuel economy is a weighted average of City and Highway fuel economy in km per litre.  \n**10. daysonmarket:** Days since the vehicle was first listed on the website.  \n**11. dealer_zip:** Zipcode of the dealer.  \n**12. description:** Vehicle description on the vehicle's listing page.  \n**13. engine_cylinders:** The engine configuration. Eg: I4, V6, etc.   \n**14. engine_displacement:** Engine displacement is the measure of the cylinder volume swept by all of the pistons of a piston engine, excluding the combustion chambers.  \n**15. engine_type:** The engine configuration. Eg: I4, V6, etc.  \n**16. exterior_color:** Exterior color of the vehicle, usually a fancy one same as the brochure.  \n**17. fleet:** Whether the vehicle was previously part of a fleet.  \n**18. frame_damaged:** Whether the vehicle has a damaged frame.  \n**19. franchise_dealer:** Whether the dealer is a franchise dealer.  \n**20. franchise_make:** The company that owns the franchise.  \n**21. front_legroom:** The legroom in inches for the passenger seat.  \n**22. fuel_tank_volume:** Fuel tank's filling capacity in gallons.  \n**23. fuel_type:** Dominant type of fuel ingested by the vehicle.  \n**24. has_accidents:** Whether the vin has any accidents registered.  \n**25. height:** Height of the vehicle in inches.  \n**26. highway_fuel_economy:** Fuel economy in highway traffic in km per litre.  \n**27. horsepower:** Horsepower is the power produced by an engine.  \n**28. interior_color:** Interior color of the vehicle, usually a fancy one same as the brochure.  \n**29. isCab:** Whether the vehicle was previously taxi\/cab.  \n**30. is_certified:** Whether the vehicle is certified. Certified cars are covered through warranty period.  \n**31. is_cpo:** Pre-owned cars certified by the dealer. Certified vehicles come with a manufacturer warranty for free repairs for a certain time period.  \n**32. is_new:** If True means the vehicle was launched less than 2 years ago.  \n**33. is_oemcpo:** Pre-owned cars certified by the manufacturer.  \n**34. latitude:** Latitude from the geolocation of the dealership.  \n**35. length:** Length of the vehicle in inches.  \n**36. listed_date:** The date the vehicle was listed on the website. Does not make daysonmarket obsolete. The prices is dayson_market days after the listed date.  \n**37. listing_color:** Dominant color group from the exterior color.  \n**38. listing_id:** Listing id from the website.  \n**39. longitude:** Longitude from the geolocation of the dealership.  \n**40. main_picture_url:** URL of the vehicle's picture.  \n**41. major_options:** Optional packages of the vehicle.  \n**42. make_name:** Vehicle's brand.  \n**43. maximum_seating:** Total number of seats.  \n**44. mileage:** Refers to the distance that the vehicle has travelled, measured in miles.  \n**45. model_name:** Model name of the vehicle.  \n**46. owner_count:** Number of owners the vehicle has had along its life.  \n**47. power:** Maximum power of the vehicle and the rpm to develop the power.  \n**48. price:** Sale price of the vehicle on the website.  \n**49. salvage:** In North America, a salvage title is a form of vehicle title branding, which notes that the vehicle has been damaged and\/or deemed a total loss by an insurance company that paid a claim on it.  \n**50. savings_amount:** Non defined variable.  \n**51. seller_rating:** The Seller Rating is created by data received from buyers in an effort to measure the quality of the experience you provide your customers.  \n**52. sp_id:** Dealer id.  \n**53. sp_name:** Dealer name.  \n**54. theft_title:** Vehicle that was stolen and later recovered.  \n**55. torque:** Torque indicates the force to which the drive shaft is subjected. Also the revolutions needed to reach the maximum torque.  \n**56. transmission:** Type of transmission, such as Automatic, Manual, etc.  \n**57. transmission_display:** Number of gears and type of transmission.   \n**58. trimId:** Number of a particular version of a model with a particular set of configuration.  \n**59. trim_name:** Name of a particular version of a model with a particular set of configuration.  \n**60. vehicle_damage_category:** Category of a vehicle's damage, such as Category A meaning a \u2018Scrap\u2019 car.  \n**61. wheel_system:** Traction system of a vehicle, such as AWD or FWD.  \n**62. wheel_system_display:** Traction system of a vehicle, such as All Wheel Drive or Front Wheel Drive.  \n**63. wheelbase:** The distance between the front and rear axles of a vehicle.  \n**64. width:** The distance between both sides of a vehicle.  \n**65. year:** The year the car was built.  ","d853715f":"In order to work more comfortably, some variables were coded with 0 instead of NA. Now we have to undo this change and code them as NA.","6227d4f1":"#### 4.6.5.5. Imputation progress","92941b6d":"Variable after the cleaning process:","8d8caac3":"**We have successfully built a CatBoost Regressor using Python, which is capable of predicting 95% of the variability in US Used cars with an average error of 4,189.33$**  \n**Additionally, we have looked at Variable Importance Plots and the features associated with US Used cars predictions. As it can be seen on the last plot, there are some variables that contribute a great deal to the model. These are \"horsepower\", \"mileage\", \"torque_power\" and \"year\".**","252d499b":"**EDA report is available at www.mileage.one\/final_eda**","10c576f5":"#### 4.6.3.3. Variable horsepower for electric cars\n\nThis variable is originally empty for electric cars. Although the power is normally higher in electric vehicles than in combustion vehicles, we impute the mean.","7d31d972":"### 4.6.5. Imputation of categorical variables\n\nThe imputation of the categorical variables is based on the creation of groups of vehicles as if they were clusters sharing the same characteristics. From this, the mode is extracted, which is used for the imputation of missing values.  ","ae8a874a":"Extraction of the maximum power and the revolutions for the maximum power and store them in two new variables.","45d37dfb":"#### 4.6.3.5. Variable fuel_tank_volume for electric cars\n\nThis variable is originally empty for electric cars. As well as for engine_displacement, there is no tank for fuel here, but we need to do something. We impute the mean as well.","8987f3f4":"## 4.12. Creation of dummy variables\n\nThe regression model can not process categorical variables, that is why these variables should be converted to dummies.","4d28c011":"## 4.11. Creation of the JSON\n\nThe website that is built to predict the price of a car given its characteristics should show only the possible (real) choices when filling the form. That is called dependant (cascading) drop-down. In order to do so, it is necessary to build a JSON file to feed the dropdowns.","f018db87":"## 4.4. Feature extraction\n\nIn the dataset there are two very important variables that are coded in a way that cannot be introduced in a model. Therefore, they are cleaned and treated in such a way that information is extracted from them and stored in new numeric variables.","d5181a78":"Mileage is a master's thesis in big data and data science by five students from the Complutense University of Madrid that aims to generate predictions about the value of vehicles given certain characteristics.\n\nThe team is made up of Alvaro Lozano, Andrea Lizondo, Mario Muriel, Pablo Abad and Pablo Casero.\n\nThe motivation for this project was to put into practice the knowledge acquired during the course to develop a fully functional tool. With this project, the team wanted to challenge itself, expanding its limits and looking for solutions to all the problems that have arisen, in order to prepare itself for a professional data science environment.\n\nOrganisationally, a strategy has been followed that tries to tackle first those phases that posed the most problems to the team, progressing from simple solutions to the more complex ones implemented in the final project. This way of working allowed the team to have absolute control, in the way that having solved the problems at the beginning ensured that there were no major obstacles to reaching the final goal.\n\nDue to various factors such as the COVID-19 pandemic, the fact that most colleagues had to combine work and studies and that the release of the thesis was close to the holiday period, teamwork posed a major challenge. The team has been able to overcome all the difficulties and the organisation in this aspect has been unbeatable. Thanks to collaborative platforms, the team has been able to work together at all times, with regular meetings, taking advantage of each other's strengths and learning from each other.\n\nSeveral resources have been used to carry out the project, such as Google Cloud Platform (instance of AI Notebooks), Kaggle, Kaggle Kernel, Google Collaboratory, Django and Github, among others. The main programming language used was Python, but also, HTML, Javascript, CSS and Bash.\n\nThe project basic structure is the following:\n1. Project Goal\n2. Data Load\n3. Exploratory Data Analysis\n4. Data Cleaning and Feature Engineering\n5. Dataset Splitting\n6. Modeling\n7. Model Deployment\n8. Sources","39b7097d":"### 4.5.1. Variable transmission_display\n\nThe variable transmission_display is a string containing the number of gears and the type of transmission. However there are some rows where the nubmer of gears is missing. Since is has been proven that this variable is of high importance, we have to impute that number. In order to do so we will replace it with the most repeated value for every transmission, which is 6.\nThis decision could be somewhat controversial, but after trying different methods to encode it, the results showed that it was the best one.","5e057284":"### 4.8.3. Recoding of \"engine_type\" variable\n\nThe variable \"engine_type\" is perfectly fine for the model as well, but as it happens with \"transmission\", it is also hard to interpret for some people.","be7cb005":"## 2.2. Libraries load, parameters set and data load","f8e5b4cd":"##### The goal of this project is to deploy an online service that estimates the price of a vehicle given certain characteristics. To achieve it, a regression model is built from scratch using a dataset of cars from the United States of America.","bd43d20f":"# 4. Data Cleaning and Feature Engineering","9c236c44":"### 4.8.5. Recoding of \"listing_color\" variable\n\nThis variable is writting in all capitalized letters. It is just an aesthetic correction.","e5e40a70":"**Comments:**  \nThe first thing we notice when looking at the dataset is that there are high values for the variable \"mileage\". Surprisingly, the model performed better when no record was deleted.","73381a44":"#### 4.6.5.1. Imputation of \"body_type\"\n\nGroup by \"make_name\" and \"model_name\" to get the most frequent \"body_type\" cateogry (mode) and save it as dataframe","dbaa6a5c":"#### 4.6.4.2. Imputation of \"city_fuel_economy\" and \"highway_fuel_economy\"\n\nCharacteristics defining the fuel consumption of a car: \"body_type\", \"engine_displacement\", \"engine_type\", \"fuel_type\", \"horsepower\", \"make_name\", \"model_name\", \"transmission\", \"wheel_system\" and \"year\".","3820fb4e":"There are no cases such the mentioned. That means that we can delete power_hp without losing information.","d2ad0f9f":"**Comments:**  \nThe distributions for the variables look good except for the variable mileage that seems to have an outlier. ","fce2bb37":"**Comments:**  \nAs could be expected, being a US dataset, most of the vehicles have automatic transmission and gasoline as fuel.  \nThe boxplot show that the automatic cars are expected to be more expensive in mean than other transmissions.  \nActually, almost everything seems to be normal when looking at the plots, there is just one exception. The maximum_seating variable shows some problems, because some entries are wrongly coded.","d8cf8aa2":"### 3.2.1. Numeric description","11da3714":"## 4.7. Rearrangement of the dataset\n\nRearranging the dataset does not change the final result of the model, but it is much easier to understand for a human eye.\n\nThe categorical values are shown first, and the numerical ones are shown at the end.","47714751":"#### 4.6.4.3. Imputation of \"horsepower\" and \"engine_displacement\"\n\nVariables \"horsepower\" and \"engine_displacement\" have the same number of NAs, so we assume they are the same rows. We can't use one variable to impute the other, so we will use the rest.","3257fb1c":"## 6.4. Model extraction to pickle","79de19e7":"Once the dataset has been analyzed, cleaned, splitted and the model is producing good results, it had to be put into production so that customers could use it.\n\nTo do so, **we decided build a Django application and made it available online.** The project is hosted at **www.mileage.one**, but can also be run locally.   \n**The project files are available on Github https:\/\/github.com\/alvarico509\/TFM**.\n\nThe basic operating structure of the application is as follows:\n\nThe application defines a vehicle model that is composed of the different variables that are taken into account to estimate the price.  \nIn the \"model\" tab of the website there is a form with the vehicle parameters.  \nThe form consists of cascading dependent dropdowns. This was achieved using jQuery (Javascript).  \nThe JSON extracted in section 4.11. of the notebook is used to feed the dropdowns.  \nThe machine learning model is extracted into a pickle file (section 6.4.) that is later loaded into the application.  \nWhen the form is filled in and submitted, the variables are captured by a python function that processes them and feeds them into the model to estimate the price.  \nOnce the price is calculated, the application returns them to the HTML page along with the estimated price.  ","d5d0e961":"## 6.2. Feature importance","43bcace6":"***","c8c95617":"Data load and overview","72e11b5c":"##### During this part, the influence of the variables on the target variable is studied and missing or erroneous values are detected.","59cd25cb":"### 4.6.4. Imputations of continous variables","ca5445dd":"### 4.9.1. Variables as type uint8\n\nAmong these variables we have city_fuel_economy, highway_fuel_economy, fuel_tank_volume, maximum_seating, transmission_display and is_new.","28423921":"### 4.8.7. Recoding of \"model_name\" variable\n\nIt is just an aesthetic correction.","04fd0b3c":"Once the extraction is completed, the original variable is deleted.","aa52a566":"# 3. Exploratory Data Analysis","cce2e17d":"**Comments:**  \nThe variable \"engine_type\" has a mix between engine type and fuel type. We have to eliminate the fuel type because we already have a variable for this.  \nThe variable \"transmission_display\" has a mix between the number of gears and the transmission type. Since the transmission type is already in another variable, we have to remove it to keep only the numerical part.","91172505":"### 3.3.1. Numeric description","78200aa8":"### 4.9.2. Variables as type uint16\n\nAmong these variables we have engine_displacement, horsepower, power_rpm, torque_power, torque_rpm and year.","f5a50d88":"Catboost, CatBoost overview (2017), https:\/\/catboost.ai\/  \nCatBoost regression in 6 minutes, Towards Data Science (2018), https:\/\/towardsdatascience.com\/catboost-regression-in-6-minutes-3487f3e5b329","6d0d6d07":"#### 4.6.3.4. Variable engine_displacement for electric cars\n\nThis variable is originally empty for electric cars. Electric cars have no cylinders, but we need to impute something here, that is the mean.","4bb49068":"### 4.9.3. Variables as type uint32\n\nAmong these variables we have mileage and price.","57064269":"# 6. Modeling\n\n## 6.1. Catboost Regressor\n\nCatBoost is a relatively new open-source machine learning algorithm, developed in 2017 by a company named Yandex. Yandex is a Russian counterpart to Google, working within search and information services.  \n**The model shown here is the one that gave the best results, however, many other models were tested, as well as different hyperparameters were tested to achieve the best result.**","a8307215":"**Comments:**  \nThe strongest correlation is between price and power (0.61) followed by mileage (-0.48) and year (0.41). This means that the more power, the more expensive the vehicle. The newer, the more expensive and the higher the mileage, the less the vehicle is worth. ","7ff339be":"## 6.3. Results","f54b2f74":"#### 3.2.2.2. Histograms","b2a5ba34":"### 3.1.2. Observations about variables\n\nDue to the nature of some variables and the final purpose of this project, they are not valid and therefore have to be discarded.\n\nThese variables are: 'latitude', 'longitude', 'vin', 'city', 'dealer_zip', 'back_legroom',  'front_legroom', 'height', 'length', 'wheelbase', 'width', 'daysonmarket', 'listing_id', 'sp_id', 'listed_date', 'main_picture_url', 'savings_amount', 'sp_name', 'trim_name', 'trimId', 'franchise_dealer', 'seller_rating', 'franchise_make', 'description', 'major_options', 'interior_color', 'engine_cylinders', 'wheel_system_display' and 'exterior_color'.\n\n**The reasons to delete these variables are detailed in the section 4.3.**\n","913f9e09":"### 4.8.4. Recoding of \"wheel_system\" variable\n\nIt happens the same as with the last two recoded variables.","000ffb0f":"***","7f695573":"# 8. Sources","485c3378":"***","b2dc34b2":"#### 4.6.5.4. Imputation of \"wheel_system\"\n\nGroup by \"make_name\" and \"model_name\" to get the most frequent cateogry of \"wheel_system\" (mode) and save it as dataframe","05427069":"#### 4.6.5.3. Imputation of \"fuel_type\"\n\nGroup by \"make_name\" and \"model_name\" to get the most frequent \"fuel_type\" (mode) cateogry and save it as dataframe","4f5d6502":"**Comments:**  \nThere are many variables with a very high percentage of missing values (pct_miss). Such as: \"is_cpo\", \"is_oemcpo\", \"bed_height\", \"salvage\", \"isCab\", \"theft_title\", \"has_accidents\", \"fleet\", \"frame_damaged\", \"bed\", \"cabin\" and \"bed_length\". These will be later reomeved.  \nThe variables \"wheel_system_display\" and \"wheel_system\" seem to be the same one but coded differently.  \nSome variables need to be converted to numeric variables. These are: \"maximum_seating\", \"transmission_display\" and  all those with units such as \"in\" or \"gal\" at the end.  \nThere are two variables that contain more than one variable inside them, these are \"power\" and \"torque\".  \nFinally, there are variables that will not be considered in the model because they are not useful for the final purpose. They will not be intuitive for the user of www.mileage.one service. The variables are: \"franchise_make\", \"bed_length\", \"front_legroom\", \"back_legroom\", \"width\", \"wheelbase\", \"heigth\", \"city\", \"length\", \"listed_date\", \"sp_name\", \"trim_name\", \"exterior_color\", \"interior_color\", \"trimId\", \"major_options\", \"main_picture_url\", \"description\", \"vin\".","d68e3c51":"#### 4.6.4.6. Replacement of the NA values using the variables created\n\nDuring the previous procedure some variables were used to create new variables to later impute them. That is the reason why they were not imputed at the same time. It was necessary to create \"clean\" variables without the influence of imputated values. After the creation of all variables, they are imputed as follows.","da62fb21":"***","6f59576b":"##### Data is loded from Kaggle, some libraries are imported and notebooks parameters are set.","c60aada8":"***","d73d6cfb":"##### This is one of the most laborious phases of the project. It consists of preprocessing the dataset for later treatment in a machine learning model.","322133db":"### 4.6.1. Strategy definition\n\nThere are variables that can be deducted with others, but there are also variables that are specific to each vehicle and there would be no objective way to impute that value.\nWhen this happens, we have 2 cases. In the first case, the variable that cannot be deduced, could be categorical and we could impute it in another category as \"unknown\". The problem is when the variable is continuous and then we could be introducing errors in the model.\nFor example, if the colour of the car is missing, we can put \"unknown\" but if the mileage is missing, it would be better to get rid of that record (as it only represents 5% of them and it is a very important variable in the model).","79a5e2c1":"### 4.5.3. Variables fuel_tank_volume, maximum_seating and transmission_display","306799f3":"### 4.3.2. Nonsense variables\n\nSome variables would just make no sense on the model.","750e2096":"#### 4.6.4.1. Imputation of \"maximum_seating\"\n\nIt should be one of the easiest to impute. We just need to know \"make_name\", \"model_name\" and \"body_type\" and that should be enough in principle.","2ff70666":"***","5a90f0cd":"Extraction of the maximum torque and the revolutions for the maximum torque and store them in two new variables.","d30ec870":"Some visualizations parameters where set in order to see more rows and variables on the screen. ","54cc03ee":"## 4.10. Data Analysis after Cleaning and Feature Engineering\n\nAn analysis of the clean data is performed in order to make a final check.","96c81e20":"#### 4.6.4.7. Deletion of auxliary variables\n\nThe variables that were created to impute the missing values are no longer needed and should be removed.","b02e8d9a":"## 3.3. Categorical variables overview","31ac1aaa":"Reasons justifying the elimination of columns:  \nAs can be seen above, although the limit for removing columns is equal to 40%, the columns with the lowest number of missing data have 48% of NAs. This means that practically half of the records are missing. This would be reason enough for the elimination of the variables, but in addition, many of these columns contain information that is of little use to our ultimate goal.  \nThe first four variables (bed, bed_height, bed_length and cabin) only apply to Pickup Truck type vehicles. These types of vehicles only represent a small proportion of the dataset and are therefore not considered for the model. The variable combine_fuel_economy would have been useful, but is 100% missing. The same goes for other variables such as fleet, frame_damaged, has_accidents, owner_count, salvage or vehicle_damage_category they could have been useful, but it is not interesting to put them in the model when they have so much missing data. There are even variables that are not described in the dataset and it is not known what they represent.\n","944c3ceb":"### 3.1.1. Variables' definition\n\nA short description of the variables of the dataset.","0f498d85":"#### 3.2.2.4. Regression plots","93cb5760":"**Comments:**   \nHere we can see again the correlation that we just saw on the previous plot.","18a12e67":"## 3.1. Variables of the dataset","bd02c39b":"### 4.3.3. Discarded variables\n\nThere are variables that were not useful for the model and were therefore discarded.","1c1e601e":"#### 4.6.3.1. Variable engine_type for electric cars\n\nThis variable is originally empty for electric cars. \"Electric_Motor\" is imputed.","ec8a7a30":"### 4.5.2. Variable is_new\n\nThe variable is_new contains booleans and should be changed to integer","9cd73660":"Although some variables should be numeric, they are strings. It is because the variable contains the measurment unit attached to the number. The unit is removed and the variable is casted to numeric type. ","c878e2f1":"## 2.1. System Specs and running time","77d703b0":"### 4.4.1. Feature extraction from torque and power variables","2ba33ce5":"## 3.2. Numeric variables overview\n\nThe first analysis to perform on the dataset is common sense. Some results are visualised for the numerical variables.","a02ce42f":"#### 4.6.4.4. Imputation of \"power_rpm\", \"torque_power\" and \"torque_rpm\"\n\nThese variables depend on make, engine_type, engine_displacement, horsepower and fuel_type","f3ffbbfb":"### 3.3.2. Plots of categorical variables","d399d266":"All of the chosen numeric variables have correlations with price and they are probably going to be useful for the model.","2fd60b4e":"#### 4.6.3.2. Variable transmission_display for electric cars\n\nThis variable is originally empty for electric cars. Electric cars have no gears. The median gears is imputed here.","fff8e0fd":"#### 4.6.4.5. Imputation of \"fuel_tank_volume\"\n\nThe variable \"fuel_tank_volume\" will depend on make, model and year.","02338e66":"We have potentially duplicated variables in our dataset. These are horsepower and the just created power_hp. Horsepower contains less NA values than power_hp, so we should check if there is any case where there is an NA value in the horsepower variable and no 0 (0 is an NA) in the power_hp variable.","fadf378a":"## 4.1. Deletion of strange records","b5565263":"### 4.4.2. Treatment of a duplicated variable","bd69ea19":"Pandas and numpy are loaded for general purposes along the script.   \nSklearn and catboost are needed for the model.  \nMatplotlib and seaborn are loaded for some graphic representations.  \nThe package sweetviz was used to perfom a quick EDA.","3cf1fe21":"#### 3.2.2.1. Boxplots","0ccb36ba":"# 1. Project Goal","4e53ddc4":"# 2. Dataset Load","740b8cce":"### 4.3.1. Variables not useful for the final model\n\nIt makes no sense to ask a customer to enter this kind of information when trying to find out the price of their vehicle.","7e123484":"Although the EDA showed some extreme values for the variable \"mileage\", it ended up being better to not to delete any of them. The models performed better when all the records were present. ","2b71f3b1":"# 5. Dataset Splitting\n\nSplitting the dataset is essential for an unbiased evaluation of prediction performance. The dataset is randomly dividied into the training and the test subset: The training set is applied to train, or fit, the model, and the test set is for an unbiased evaluation of the final model."}}