{"cell_type":{"cad43d19":"code","3dd9faa6":"code","86e9d0d2":"code","54879557":"code","e69985c9":"code","29c8bbfe":"code","f377976e":"code","08a5fd11":"code","8c2c8abd":"code","7d9806d5":"code","2003f066":"markdown","8654919f":"markdown","8bdb897a":"markdown","f1a97de3":"markdown","23649238":"markdown","c957b277":"markdown","6bb73ca1":"markdown","43f495d1":"markdown","3be1dd8d":"markdown","dfcd132f":"markdown","ecdf4f41":"markdown","6d517445":"markdown","2851b1ea":"markdown","82eb6553":"markdown"},"source":{"cad43d19":"!pip install pydriller","3dd9faa6":"from pydriller import RepositoryMining\n\nproject_url = 'https:\/\/github.com\/ishepard\/pydriller.git'\n\nfor commit in RepositoryMining(project_url).traverse_commits():\n    print('Hash {}, author {}'.format(commit.hash, commit.author.name))\n    ","86e9d0d2":"urls = [ \"https:\/\/github.com\/ishepard\/pydriller.git\", \"https:\/\/github.com\/TheAlgorithms\/Java.git\", \"https:\/\/github.com\/hmkcode\/Java.git\"]\nfor commit in RepositoryMining(path_to_repo=urls).traverse_commits():\n    print(\"commit {}, Author {}, date {}\".format(commit.hash, commit.author.name, commit.author_date))","54879557":"for commit in RepositoryMining('https:\/\/github.com\/TheAlgorithms\/Java.git').traverse_commits():\n    for m in commit.modifications:\n        print(\n            \"Author {}\".format(commit.author.name),\n            \" modified {}\".format(m.filename),\n            \" with a change type of {}\".format(m.change_type.name),\n            \" and the complexity is {}\".format(m.complexity)\n        )","e69985c9":"# analyze only 1 local repository\nurl = \"repos\/pydriller\/\"\n\n# analyze 2 local repositories\nurl = [\"repos\/pydriller\/\", \"repos\/anotherrepo\/\"]\n\n# analyze both local and remote\nurl = [\"repos\/pydriller\/\", \"https:\/\/github.com\/apache\/hadoop.git\", \"repos\/anotherrepo\"]\n\n# analyze 1 remote repository\nurl = \"https:\/\/github.com\/ishepard\/pydriller.git\"","29c8bbfe":"url = \"https:\/\/github.com\/ishepard\/pydriller.git\"\nfor commit in RepositoryMining(url, single='05526fad873c3fc83e40bcbc424bd1b3e5393dd5').traverse_commits():\n    print('Hash {}, author {}'.format(commit.hash, commit.author.name))\n","f377976e":"from datetime import datetime\nimport socket\nfor commit in RepositoryMining(url, since=datetime(2020, 1, 1, 1, 0, 0)).traverse_commits():\n    print('Hash {}, author {} Date {}'.format(commit.hash, commit.author.name, commit.author_date))\n","08a5fd11":"dt1 = datetime(2020, 1, 1, 1, 0, 0)\ndt2 = datetime(2020, 1, 15, 17, 59, 0)\nfor commit in RepositoryMining(url, since=dt1, to=dt2).traverse_commits():\n    print('Hash {}, author {} Date {}'.format(commit.hash, commit.author.name, commit.author_date))","8c2c8abd":"dt1 = datetime(2018, 4, 1, 0, 0, 0)\nfor commit in RepositoryMining(url, to=dt1).traverse_commits():\n    print('Hash {}, author {} Date {}'.format(commit.hash, commit.author.name, commit.author_date))","7d9806d5":"# Only commits in branch1\nRepositoryMining('path\/to\/the\/repo', only_in_branch='branch1').traverse_commits()\n\n# Only commits in branch1 and no merges\nRepositoryMining('path\/to\/the\/repo', only_in_branch='branch1', only_no_merge=True).traverse_commits()\n\n# Only commits of author \"ishepard\" (yeah, that's me)\nRepositoryMining('path\/to\/the\/repo', only_authors=['ishepard']).traverse_commits()\n\n# Only these 3 commits\nRepositoryMining('path\/to\/the\/repo', only_commits=['hash1', 'hash2', 'hash3']).traverse_commits()\n\n# Only commit that modified \"Matricula.javax\"\nRepositoryMining('path\/to\/the\/repo', filepath='Matricula.javax').traverse_commits()\n\n# Only commits that modified a java file\nRepositoryMining('path\/to\/the\/repo', only_modifications_with_file_types=['.java']).traverse_commits()","2003f066":"## Example: Mining multiple project commits","8654919f":"## Commit Object\nA Commit object has all the information of a Git commit, and much more. More specifically:\n\n* hash (str): hash of the commit\n* msg (str): commit message\n* author (Developer): commit author (name, email)\n* author_date (datetime): authored date\n* author_timezone (int): author timezone (expressed in seconds from epoch)\n* committer (Developer): commit committer (name, email)\n* committer_date (datetime): commit date\n* committer_timezone (int): commit timezone (expressed in seconds from epoch)\n* branches (List[str]): List of branches that contain this commit\n* in_main_branch (Bool): True if the commit is in the main branch\n* merge (Bool): True if the commit is a merge commit\n* parents (Set[str]): list of the commit parents\n* project_name (str): project name\n* project_path (str): project path\n* modifications (List[Modifications]): list of modified files in the commit (see Modifications)\n","8bdb897a":"## Modifications\n\nYou can get the list of modified files, as well as their diffs and current source code. To that, all you have to do is to get the list of Modifications that exists inside Commit. A modification object has the following fields:\n\n* old_path: old path of the file (can be _None_ if the file is added)\n* new_path: new path of the file (can be _None_ if the file is deleted)\n* change_type: type of the change: can be Added, Deleted, Modified, or Renamed.\n* diff: diff of the file as Git presents it (e.g., starting with @@ xx,xx @@).\n* source_code: source code of the file (can be _None_ if the file is deleted)\n* source_code_before: source code of the file before the change (can be _None_ if the file is added)\n* added: number of lines added\n* removed: number of lines removed\n* nloc: Lines Of Code (LOC) of the file\n* complexity: Cyclomatic Complexity of the file\n* token_count: Number of Tokens of the file\n* methods: list of methods of the file. The list might be empty if the programming language is not supported or if the file is not a source code file.\n","f1a97de3":"# Pydriller Tool Demo\n### Presented By Sayed Mohsin Reza, PhD Student, CS, UTEP.\n* PyDriller is a Python framework that helps developers on mining software repositories. \n* With PyDriller you can easily extract information from any Git repository, such as commits, developers, modifications, diffs, and source codes, and quickly export CSV files.","23649238":"## Some Other Options\nPyDriller comes with a set of common commit filters that you can apply:\n\n* only_in_branch (str): only analyses commits that belong to this branch.\n* only_no_merge (bool): only analyses commits that are not merge commits.\n* only_authors (List[str]): only analyses commits that are made by these authors. The check is made on the username, NOT the email.\n* only_commits (List[str]): only these commits will be analyzed.\n* only_releases (bool): only commits that are tagged (\u201crelease\u201d is a term of GitHub, does not actually exist in Git)\n* filepath (str): only commits that modified this file will be analyzed.\n* only_modifications_with_file_types (List[str]): only analyses commits in which at least one modification was done in that file type, e.g., if you pass \u201c.java\u201d, it will visit only commits in which at least one Java file was modified; clearly, it will skip other commits (e.g., commits that did not modify Java files).","c957b277":"## Selection & Filtering Techniques\nOne of the main advantage of using PyDriller to mine software repositories, is that it is  configurable. We will now see all the options that once can pass to RepositoryMining.\n\n### Selection\nFor example, the following are all possible inputs for RepositoryMining:","6bb73ca1":"## Filter\nBy default, PyDriller analyzes all the commits in the repository. However, filters can be applied to RepositoryMining to visit only specific commits.","43f495d1":"## First Example (Mining single project commits)","3be1dd8d":"# Resources\n* Github https:\/\/github.com\/ishepard\/pydriller\n* Documentation https:\/\/pydriller.readthedocs.io\/en\/latest\/index.html\n* a video on Youtube: https:\/\/www.youtube.com\/watch?v=7Oui4bP9eN8","dfcd132f":"# filter by up to a date \nTill 4\/1\/2018","ecdf4f41":"### Filter by date\nSince 1\/1\/2020","6d517445":"### Filter by single commit","2851b1ea":"# filter by date range \nProvide commits between 1\/1\/2020 and 2\/1\/2020","82eb6553":"## Install Requirements\nInstalling PyDriller is easily done using pip. Assuming it is installed, just run the following from the command-line:\n> pip install pydriller\n\nPyDriller\u2019s git repo is available on GitHub, which can be browsed at:\n* https:\/\/github.com\/ishepard\/pydriller"}}