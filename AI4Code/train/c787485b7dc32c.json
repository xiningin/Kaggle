{"cell_type":{"72015360":"code","c9a164fe":"code","e4bbcb70":"code","024deb1a":"code","761c46f3":"code","af8ea835":"code","af606b76":"code","a90c9243":"code","30dd087e":"code","af5ac223":"code","b5bd1eb8":"code","22a1fe65":"code","ef369204":"code","650709e1":"code","54b48344":"code","bef7f236":"code","1ef0acf4":"code","7515c8bb":"code","48079075":"code","81303038":"code","0d8f9087":"code","3572a424":"code","d02a34cd":"code","b2c9f024":"code","51021e2a":"code","31013c1f":"code","f289702b":"code","d5bb63de":"code","b0270acd":"code","607685a6":"code","a4d81d28":"code","378282d9":"code","30131593":"code","d8d062b8":"code","edf0d2e3":"code","bc23965d":"code","d6102843":"code","00c0cdbe":"code","0ed60204":"code","18d3c03b":"code","45308533":"code","fd3c49ef":"code","166c5154":"code","4c8853d7":"code","a7894ee0":"code","15c29ecd":"code","03cfc7b0":"code","c8cb823c":"code","a4f96dfb":"code","d2a5f07e":"code","c06f0579":"code","d063d9f6":"code","1194dd26":"code","d8340b92":"code","f3274834":"code","c8a38d75":"code","784c2f78":"code","6ab4488c":"code","b528ec56":"code","d237cd4d":"code","7981835c":"code","5580b849":"code","248af61d":"code","996bc7ce":"code","d39d43c9":"code","859e508a":"code","be87dd14":"code","60e41a2d":"code","798afac4":"code","a23da79e":"code","eeb6e579":"code","87b6f0b9":"code","83f26afa":"code","f90ff3ba":"code","94a111aa":"code","c6984902":"code","fed49d9b":"code","0646c749":"code","72d19437":"code","39274d99":"code","ba6746be":"code","4131f914":"code","5b4d4bae":"markdown","6ab4a944":"markdown","1723d5f6":"markdown","3259f6e9":"markdown","eeae051a":"markdown","c5321e89":"markdown","6296e9d2":"markdown","b850ce46":"markdown","0dd34bde":"markdown","af05217a":"markdown","06b163ca":"markdown","4f262129":"markdown","8a56e52d":"markdown","120aee83":"markdown","baea691e":"markdown","342b312d":"markdown","e20ac7a4":"markdown","a826acfa":"markdown","453cc029":"markdown","7d4f281a":"markdown","d098d8fc":"markdown","ab4b1d10":"markdown","0ec6ecee":"markdown","4df9a921":"markdown","58c3aaa0":"markdown","40b105d0":"markdown","0f05db27":"markdown","831a76b7":"markdown","c2c9a704":"markdown","9085589a":"markdown","5a55783e":"markdown","be7c414b":"markdown","2f7c4bc2":"markdown"},"source":{"72015360":"# Importing Pandas and NumPy\nimport pandas as pd\nimport numpy as np","c9a164fe":"# Importing all datasets\nchurn_data = pd.read_csv(\"..\/input\/churn_data.csv\")\ncustomer_data = pd.read_csv(\"..\/input\/customer_data.csv\")\ninternet_data = pd.read_csv(\"..\/input\/internet_data.csv\")","e4bbcb70":"#Merging on 'customerID'\ndf_1 = pd.merge(churn_data, customer_data, how='inner', on='customerID')","024deb1a":"#Final dataframe with all predictor variables\ntelecom = pd.merge(df_1, internet_data, how='inner', on='customerID')","761c46f3":"# Let's see the head of our master dataset\ntelecom.head()","af8ea835":"telecom","af606b76":"telecom.describe()","a90c9243":"# Let's see the type of each column\ntelecom.info()","30dd087e":"# Converting Yes to 1 and No to 0\ntelecom['PhoneService'] = telecom['PhoneService'].map({'Yes': 1, 'No': 0})\ntelecom['PaperlessBilling'] = telecom['PaperlessBilling'].map({'Yes': 1, 'No': 0})\ntelecom['Churn'] = telecom['Churn'].map({'Yes': 1, 'No': 0})\ntelecom['Partner'] = telecom['Partner'].map({'Yes': 1, 'No': 0})\ntelecom['Dependents'] = telecom['Dependents'].map({'Yes': 1, 'No': 0})","af5ac223":"# Creating a dummy variable for the variable 'Contract' and dropping the first one.\ncont = pd.get_dummies(telecom['Contract'],prefix='Contract',drop_first=True)\n#Adding the results to the master dataframe\ntelecom = pd.concat([telecom,cont],axis=1)\n\n# Creating a dummy variable for the variable 'PaymentMethod' and dropping the first one.\npm = pd.get_dummies(telecom['PaymentMethod'],prefix='PaymentMethod',drop_first=True)\n#Adding the results to the master dataframe\ntelecom = pd.concat([telecom,pm],axis=1)\n\n# Creating a dummy variable for the variable 'gender' and dropping the first one.\ngen = pd.get_dummies(telecom['gender'],prefix='gender',drop_first=True)\n#Adding the results to the master dataframe\ntelecom = pd.concat([telecom,gen],axis=1)\n\n# Creating a dummy variable for the variable 'MultipleLines' and dropping the first one.\nml = pd.get_dummies(telecom['MultipleLines'],prefix='MultipleLines')\n#  dropping MultipleLines_No phone service column\nml1 = ml.drop(['MultipleLines_No phone service'],1)\n#Adding the results to the master dataframe\ntelecom = pd.concat([telecom,ml1],axis=1)\n\n# Creating a dummy variable for the variable 'InternetService' and dropping the first one.\niser = pd.get_dummies(telecom['InternetService'],prefix='InternetService',drop_first=True)\n#Adding the results to the master dataframe\ntelecom = pd.concat([telecom,iser],axis=1)\n\n# Creating a dummy variable for the variable 'OnlineSecurity'.\nos = pd.get_dummies(telecom['OnlineSecurity'],prefix='OnlineSecurity')\nos1= os.drop(['OnlineSecurity_No internet service'],1)\n#Adding the results to the master dataframe\ntelecom = pd.concat([telecom,os1],axis=1)\n\n# Creating a dummy variable for the variable 'OnlineBackup'.\nob =pd.get_dummies(telecom['OnlineBackup'],prefix='OnlineBackup')\nob1 =ob.drop(['OnlineBackup_No internet service'],1)\n#Adding the results to the master dataframe\ntelecom = pd.concat([telecom,ob1],axis=1)\n\n# Creating a dummy variable for the variable 'DeviceProtection'. \ndp =pd.get_dummies(telecom['DeviceProtection'],prefix='DeviceProtection')\ndp1 = dp.drop(['DeviceProtection_No internet service'],1)\n#Adding the results to the master dataframe\ntelecom = pd.concat([telecom,dp1],axis=1)\n\n# Creating a dummy variable for the variable 'TechSupport'. \nts =pd.get_dummies(telecom['TechSupport'],prefix='TechSupport')\nts1 = ts.drop(['TechSupport_No internet service'],1)\n#Adding the results to the master dataframe\ntelecom = pd.concat([telecom,ts1],axis=1)\n\n# Creating a dummy variable for the variable 'StreamingTV'.\nst =pd.get_dummies(telecom['StreamingTV'],prefix='StreamingTV')\nst1 = st.drop(['StreamingTV_No internet service'],1)\n#Adding the results to the master dataframe\ntelecom = pd.concat([telecom,st1],axis=1)\n\n# Creating a dummy variable for the variable 'StreamingMovies'. \nsm =pd.get_dummies(telecom['StreamingMovies'],prefix='StreamingMovies')\nsm1 = sm.drop(['StreamingMovies_No internet service'],1)\n#Adding the results to the master dataframe\ntelecom = pd.concat([telecom,sm1],axis=1)","b5bd1eb8":"#telecom['MultipleLines'].value_counts()","22a1fe65":"# We have created dummies for the below variables, so we can drop them\ntelecom = telecom.drop(['Contract','PaymentMethod','gender','MultipleLines','InternetService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection',\n       'TechSupport', 'StreamingTV', 'StreamingMovies'], 1)","ef369204":"#The varaible was imported as a string we need to convert it to float\ntelecom['TotalCharges'] =telecom['TotalCharges'].convert_objects(convert_numeric=True)\n#telecom['tenure'] = telecom['tenure'].astype(int).astype(float)","650709e1":"telecom.info()","54b48344":"# Checking for outliers in the continuous variables\nnum_telecom = telecom[['tenure','MonthlyCharges','SeniorCitizen','TotalCharges']]","bef7f236":"# Checking outliers at 25%,50%,75%,90%,95% and 99%\nnum_telecom.describe(percentiles=[.25,.5,.75,.90,.95,.99])","1ef0acf4":"# Adding up the missing values (column-wise)\ntelecom.isnull().sum()","7515c8bb":"# Checking the percentage of missing values\nround(100*(telecom.isnull().sum()\/len(telecom.index)), 2)","48079075":"# Removing NaN TotalCharges rows\ntelecom = telecom[~np.isnan(telecom['TotalCharges'])]","81303038":"# Checking percentage of missing values after removing the missing values\nround(100*(telecom.isnull().sum()\/len(telecom.index)), 2)","0d8f9087":"# Normalising continuous features\ndf = telecom[['tenure','MonthlyCharges','TotalCharges']]","3572a424":"normalized_df=(df-df.mean())\/df.std()","d02a34cd":"telecom = telecom.drop(['tenure','MonthlyCharges','TotalCharges'], 1)","b2c9f024":"telecom = pd.concat([telecom,normalized_df],axis=1)","51021e2a":"telecom","31013c1f":"churn = (sum(telecom['Churn'])\/len(telecom['Churn'].index))*100","f289702b":"churn","d5bb63de":"from sklearn.model_selection import train_test_split","b0270acd":"# Putting feature variable to X\nX = telecom.drop(['Churn','customerID'],axis=1)\n\n# Putting response variable to y\ny = telecom['Churn']","607685a6":"y.head()","a4d81d28":"# Splitting the data into train and test\nX_train, X_test, y_train, y_test = train_test_split(X,y, train_size=0.7,test_size=0.3,random_state=100)","378282d9":"import statsmodels.api as sm","30131593":"# Logistic regression model\nlogm1 = sm.GLM(y_train,(sm.add_constant(X_train)), family = sm.families.Binomial())\nlogm1.fit().summary()","d8d062b8":"# Importing matplotlib and seaborn\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","edf0d2e3":"# Let's see the correlation matrix \nplt.figure(figsize = (20,10))        # Size of the figure\nsns.heatmap(telecom.corr(),annot = True)","bc23965d":"X_test2 = X_test.drop(['MultipleLines_No','OnlineSecurity_No','OnlineBackup_No','DeviceProtection_No','TechSupport_No','StreamingTV_No','StreamingMovies_No'],1)\nX_train2 = X_train.drop(['MultipleLines_No','OnlineSecurity_No','OnlineBackup_No','DeviceProtection_No','TechSupport_No','StreamingTV_No','StreamingMovies_No'],1)","d6102843":"plt.figure(figsize = (20,10))\nsns.heatmap(X_train2.corr(),annot = True)","00c0cdbe":"logm2 = sm.GLM(y_train,(sm.add_constant(X_train2)), family = sm.families.Binomial())\nlogm2.fit().summary()","0ed60204":"from sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression()\nfrom sklearn.feature_selection import RFE\nrfe = RFE(logreg, 13)             # running RFE with 13 variables as output\nrfe = rfe.fit(X,y)\nprint(rfe.support_)           # Printing the boolean results\nprint(rfe.ranking_)           # Printing the ranking","18d3c03b":"# Variables selected by RFE \ncol = ['PhoneService', 'PaperlessBilling', 'Contract_One year', 'Contract_Two year',\n       'PaymentMethod_Electronic check','MultipleLines_No','InternetService_Fiber optic', 'InternetService_No',\n       'OnlineSecurity_Yes','TechSupport_Yes','StreamingMovies_No','tenure','TotalCharges']","45308533":"# Let's run the model using the selected variables\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nlogsk = LogisticRegression()\nlogsk.fit(X_train[col], y_train)","fd3c49ef":"#Comparing the model with StatsModels\nlogm4 = sm.GLM(y_train,(sm.add_constant(X_train[col])), family = sm.families.Binomial())\nlogm4.fit().summary()","166c5154":"# UDF for calculating vif value\ndef vif_cal(input_data, dependent_col):\n    vif_df = pd.DataFrame( columns = ['Var', 'Vif'])\n    x_vars=input_data.drop([dependent_col], axis=1)\n    xvar_names=x_vars.columns\n    for i in range(0,xvar_names.shape[0]):\n        y=x_vars[xvar_names[i]] \n        x=x_vars[xvar_names.drop(xvar_names[i])]\n        rsq=sm.OLS(y,x).fit().rsquared  \n        vif=round(1\/(1-rsq),2)\n        vif_df.loc[i] = [xvar_names[i], vif]\n    return vif_df.sort_values(by = 'Vif', axis=0, ascending=False, inplace=False)","4c8853d7":"telecom.columns\n['PhoneService', 'PaperlessBilling', 'Contract_One year', 'Contract_Two year',\n       'PaymentMethod_Electronic check','MultipleLines_No','InternetService_Fiber optic', 'InternetService_No',\n       'OnlineSecurity_Yes','TechSupport_Yes','StreamingMovies_No','tenure','TotalCharges']","a7894ee0":"# Calculating Vif value\nvif_cal(input_data=telecom.drop(['customerID','SeniorCitizen', 'Partner', 'Dependents',\n                                 'PaymentMethod_Credit card (automatic)','PaymentMethod_Mailed check',\n                                 'gender_Male','MultipleLines_Yes','OnlineSecurity_No','OnlineBackup_No',\n                                 'OnlineBackup_Yes', 'DeviceProtection_No', 'DeviceProtection_Yes',\n                                 'TechSupport_No','StreamingTV_No','StreamingTV_Yes','StreamingMovies_Yes',\n                                 'MonthlyCharges'], axis=1), dependent_col='Churn')","15c29ecd":"col = ['PaperlessBilling', 'Contract_One year', 'Contract_Two year',\n       'PaymentMethod_Electronic check','MultipleLines_No','InternetService_Fiber optic', 'InternetService_No',\n       'OnlineSecurity_Yes','TechSupport_Yes','StreamingMovies_No','tenure','TotalCharges']","03cfc7b0":"logm5 = sm.GLM(y_train,(sm.add_constant(X_train[col])), family = sm.families.Binomial())\nlogm5.fit().summary()","c8cb823c":"# Calculating Vif value\nvif_cal(input_data=telecom.drop(['customerID','PhoneService','SeniorCitizen', 'Partner', 'Dependents',\n                                 'PaymentMethod_Credit card (automatic)','PaymentMethod_Mailed check',\n                                 'gender_Male','MultipleLines_Yes','OnlineSecurity_No','OnlineBackup_No',\n                                 'OnlineBackup_Yes', 'DeviceProtection_No', 'DeviceProtection_Yes',\n                                 'TechSupport_No','StreamingTV_No','StreamingTV_Yes','StreamingMovies_Yes',\n                                 'MonthlyCharges'], axis=1), dependent_col='Churn')","a4f96dfb":"# Let's run the model using the selected variables\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nlogsk = LogisticRegression()\nlogsk.fit(X_train[col], y_train)","d2a5f07e":"# Predicted probabilities\ny_pred = logsk.predict_proba(X_test[col])","c06f0579":"# Converting y_pred to a dataframe which is an array\ny_pred_df = pd.DataFrame(y_pred)","d063d9f6":"# Converting to column dataframe\ny_pred_1 = y_pred_df.iloc[:,[1]]","1194dd26":"# Let's see the head\ny_pred_1.head()","d8340b92":"# Converting y_test to dataframe\ny_test_df = pd.DataFrame(y_test)","f3274834":"# Putting CustID to index\ny_test_df['CustID'] = y_test_df.index","c8a38d75":"# Removing index for both dataframes to append them side by side \ny_pred_1.reset_index(drop=True, inplace=True)\ny_test_df.reset_index(drop=True, inplace=True)","784c2f78":"# Appending y_test_df and y_pred_1\ny_pred_final = pd.concat([y_test_df,y_pred_1],axis=1)","6ab4488c":"# Renaming the column \ny_pred_final= y_pred_final.rename(columns={ 1 : 'Churn_Prob'})","b528ec56":"# Rearranging the columns\ny_pred_final = y_pred_final.reindex_axis(['CustID','Churn','Churn_Prob'], axis=1)","d237cd4d":"# Let's see the head of y_pred_final\ny_pred_final.head()","7981835c":"# Creating new column 'predicted' with 1 if Churn_Prob>0.5 else 0\ny_pred_final['predicted'] = y_pred_final.Churn_Prob.map( lambda x: 1 if x > 0.5 else 0)","5580b849":"# Let's see the head\ny_pred_final.head()","248af61d":"from sklearn import metrics","996bc7ce":"help(metrics.confusion_matrix)","d39d43c9":"# Confusion matrix \nconfusion = metrics.confusion_matrix( y_pred_final.Churn, y_pred_final.predicted )\nconfusion","859e508a":"# Predicted     not_churn    churn\n# Actual\n# not_churn        1326      166\n# churn            249       333  ","be87dd14":"#Let's check the overall accuracy.\nmetrics.accuracy_score( y_pred_final.Churn, y_pred_final.predicted)","60e41a2d":"TP = confusion[0,0] # true positive \nTN = confusion[1,1] # true negatives\nFP = confusion[0,1] # false positives\nFN = confusion[1,0] # false negatives","798afac4":"# Let's see the sensitivity of our logistic regression model\nTP \/ float(TP+FN)","a23da79e":"# Let us calculate specificity\nTN \/ float(TN+FP)","eeb6e579":"# Calculate false postive rate - predicting churn when customer does not have churned\nprint(FP\/ float(TN+FP))","87b6f0b9":"# positive predictive value \nprint (TP \/ float(TP+FP))","83f26afa":"# Negative predictive value\nprint (TN \/ float(TN+ FN))","f90ff3ba":"def draw_roc( actual, probs ):\n    fpr, tpr, thresholds = metrics.roc_curve( actual, probs,\n                                              drop_intermediate = False )\n    auc_score = metrics.roc_auc_score( actual, probs )\n    plt.figure(figsize=(6, 4))\n    plt.plot( fpr, tpr, label='ROC curve (area = %0.2f)' % auc_score )\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate or [1 - True Negative Rate]')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver operating characteristic example')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n\n    return fpr, tpr, thresholds","94a111aa":"draw_roc(y_pred_final.Churn, y_pred_final.predicted)","c6984902":"# Let's create columns with different probability cutoffs \nnumbers = [float(x)\/10 for x in range(10)]\nfor i in numbers:\n    y_pred_final[i]= y_pred_final.Churn_Prob.map( lambda x: 1 if x > i else 0)\ny_pred_final.head()","fed49d9b":"# Now let's calculate accuracy sensitivity and specificity for various probability cutoffs.\ncutoff_df = pd.DataFrame( columns = ['prob','accuracy','sensi','speci'])\nfrom sklearn.metrics import confusion_matrix\nnum = [0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]\nfor i in num:\n    cm1 = metrics.confusion_matrix( y_pred_final.Churn, y_pred_final[i] )\n    total1=sum(sum(cm1))\n    accuracy = (cm1[0,0]+cm1[1,1])\/total1\n    sensi = cm1[0,0]\/(cm1[0,0]+cm1[0,1])\n    speci = cm1[1,1]\/(cm1[1,0]+cm1[1,1])\n    cutoff_df.loc[i] =[ i ,accuracy,sensi,speci]\nprint(cutoff_df)","0646c749":"# Let's plot accuracy sensitivity and specificity for various probabilities.\ncutoff_df.plot.line(x='prob', y=['accuracy','sensi','speci'])","72d19437":"y_pred_final['final_predicted'] = y_pred_final.Churn_Prob.map( lambda x: 1 if x > 0.3 else 0)","39274d99":"y_pred_final.head()","ba6746be":"#Let's check the overall accuracy.\nmetrics.accuracy_score( y_pred_final.Churn, y_pred_final.final_predicted)","4131f914":"metrics.confusion_matrix( y_pred_final.Churn, y_pred_final.final_predicted )","5b4d4bae":"Now we can see we have all variables as integer.","6ab4a944":"### Re-Running the Model","1723d5f6":"From the distribution shown above, you can see that there no outliner in your data. The numbers are gradually increasing.","3259f6e9":"### Finding Optimal Cutoff Point","eeae051a":"### Feature Standardisation","c5321e89":"### Correlation Matrix","6296e9d2":"### Making Predictions","b850ce46":"Now let's run our model again after dropping highly correlated variables","0dd34bde":"### Running Your First Training Model","af05217a":"## Model Building\nLet's start by splitting our data into a training set and a test set.","06b163ca":"### Splitting Data into Training and Test Sets","4f262129":"We have almost 27% churn rate","8a56e52d":"### Dropping the repeated variables","120aee83":"### ROC Curve","baea691e":"### Checking the Correlation Matrix","342b312d":"## Telecom Churn Case Study\nWith 21 predictor variables we need to predict whether a particular customer will switch to another telecom provider or not. In telecom terminology, this is referred to as churning and not churning, respectively.","e20ac7a4":"### Feature Selection Using RFE","a826acfa":"Now we don't have any missing values","453cc029":"### Let's understand the structure of our dataframe","7d4f281a":"An ROC curve demonstrates several things:\n\n- It shows the tradeoff between sensitivity and specificity (any increase in sensitivity will be accompanied by a decrease in specificity).\n- The closer the curve follows the left-hand border and then the top border of the ROC space, the more accurate the test.\n- The closer the curve comes to the 45-degree diagonal of the ROC space, the less accurate the test.","d098d8fc":"### Dummy Variable Creation","ab4b1d10":"### Dropping highly correlated variables.","0ec6ecee":"After dropping highly correlated variables now let's check the correlation matrix again.","4df9a921":"Optimal cutoff probability is that prob where we get balanced sensitivity and specificity","58c3aaa0":"### Importing and Merging Data","40b105d0":"### Checking for Outliers","0f05db27":"### Checking the Churn Rate","831a76b7":"### Checking for Missing Values and Inputing Them","c2c9a704":"### Model Evaluation","9085589a":"### Dropping Variable with high VIF","5a55783e":"### Data Preparation","be7c414b":"It means that 11\/7043 = 0.001561834 i.e 0.1%, best is to remove these observations from the analysis","2f7c4bc2":"### From the curve above, 0.3 is the optimum point to take it as a cutoff probability."}}