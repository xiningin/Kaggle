{"cell_type":{"2d371cfa":"code","7c2bfc3e":"code","954dc4e4":"code","862977bc":"code","dbfbef3f":"code","cf61ec82":"code","9fef6f13":"code","0fccfc2a":"code","8710aafc":"code","aa3b51cd":"code","ac775cc6":"code","10e14181":"code","ab14f2ac":"code","368fe093":"code","8faa197f":"code","03c01144":"code","2924b2e6":"code","106fcef9":"code","1162db05":"code","896d5bbd":"code","9000b4e7":"code","90377185":"code","c3716ac5":"code","6f6a6f13":"code","6d3fb148":"code","29fbd86a":"code","cd4d2cca":"code","bfcb0c95":"code","1836c251":"code","9ebeec89":"code","8c7a876c":"code","4e24828c":"code","e16509da":"code","47e7b6a4":"code","b121e1b5":"code","158b9fed":"code","619ae2d4":"markdown","87715181":"markdown","e0ff7aa6":"markdown","3172edb4":"markdown","0339c5b3":"markdown","1d170972":"markdown","e8be105b":"markdown","fe2a7fa7":"markdown","dbf550cf":"markdown","ca987010":"markdown","6d1409a3":"markdown","2297974d":"markdown","6b50ee77":"markdown","61ea53c8":"markdown","af587dd0":"markdown","4075a6c5":"markdown","2c8240f9":"markdown","0595d615":"markdown","5972fd32":"markdown","d7ef9dbc":"markdown","a37ed5d6":"markdown","79f8427f":"markdown","aa44a0d0":"markdown","7514c8bb":"markdown","829d6459":"markdown"},"source":{"2d371cfa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings; warnings.simplefilter('ignore')\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","7c2bfc3e":"# Read the dataset\n\nipl_df=pd.read_csv(\"\/kaggle\/input\/indian-premier-league-match-analysis\/matches.csv\")","954dc4e4":"# Shape of the Dataset\n\nipl_df.shape","862977bc":"#First five dataset\n\nipl_df.head()","dbfbef3f":"#Tail of the Data Set\n\nipl_df.tail()","cf61ec82":"#Display the column names\n\nipl_df.columns","9fef6f13":"#Data type of the attribute\n\nipl_df.dtypes","0fccfc2a":"# Checking for the null values in the columns\nipl_df.isna().any()","8710aafc":"# Checking for the sum of the null values in the columns\n\nSum_train = ipl_df.isnull().sum()\nPercentage = ( ipl_df.isnull().sum()\/ipl_df.isnull().count())\npd.concat([Sum_train,Percentage], axis =1, keys= ['Sum', 'Percentage'])","aa3b51cd":"# The umpire3 column has is blank we will drop that column\n\nipl_df.drop(['umpire3'], axis=1,inplace=True)","ac775cc6":"# Dropping the null values column as their percentage is very less\n\nipl_df.dropna(inplace=True)","10e14181":"#We have not lost that much of data \n\nipl_df.shape","ab14f2ac":"ipl_df[\"season\"].value_counts()","368fe093":"# create a function for labeling #\ndef autolabel(rects):\n    for rect in rects:\n        height = rect.get_height()\n        ax.text(rect.get_x() + rect.get_width()\/2., 1.02*height,\n                '%d' % int(height),\n                ha='center', va='bottom')","8faa197f":"sns.countplot(ipl_df[\"season\"])","03c01144":"plt.figure(figsize=(12,6))\nsns.countplot(x='venue', data=ipl_df)\nplt.xticks(rotation='vertical')\nplt.show()","2924b2e6":"plt.figure(figsize=(12,6))\nsns.countplot(x='city', data=ipl_df)\nplt.xticks(rotation='vertical')\nplt.show()","106fcef9":"ipl_temp_df = pd.melt(ipl_df, id_vars=['id','season'], value_vars=['team1', 'team2'])\nplt.figure(figsize=(12,6))\nsns.countplot(x='value', data=ipl_temp_df)\nplt.xticks(rotation='vertical')\nplt.show()","1162db05":"plt.figure(figsize=(12,6))\nsns.countplot(x='winner', data=ipl_df)\nplt.xticks(rotation='vertical')\nplt.show()","896d5bbd":"ipl_temp_series = ipl_df.toss_decision.value_counts()\nlabels = (np.array(ipl_temp_series.index))\nsizes = (np.array((ipl_temp_series \/ ipl_temp_series.sum())*100))\ncolors = ['violet', 'red']\nplt.pie(sizes, labels=labels, colors=colors,\n        autopct='%1.1f%%', shadow=True, startangle=90)\nplt.title(\"Toss decision percentage\")\nplt.show()","9000b4e7":"plt.figure(figsize=(12,6))\nsns.countplot(x='season', hue='toss_decision', data=ipl_df)\nplt.xticks(rotation='vertical')\nplt.show()","90377185":"# Win percentage of the team batting second\n\nno_of_wins = (ipl_df.win_by_wickets>0).sum()\nno_of_loss = (ipl_df.win_by_wickets==0).sum()\nlabels = [\"Wins\", \"Loss\"]\ntotal = float(no_of_wins + no_of_loss)\nsizes = [(no_of_wins\/total)*100, (no_of_loss\/total)*100]\ncolors = ['red', 'green']\nplt.pie(sizes, labels=labels, colors=colors,\n        autopct='%1.1f%%', shadow=True, startangle=90)\nplt.title(\"Win percentage batting second\")\nplt.show()","c3716ac5":"# So percentage of times teams batting second has won is 53.6. Now let us split this by year and see the distribution.\n\nipl_df[\"field_win\"] = \"win\"\nipl_df[\"field_win\"].loc[ipl_df['win_by_wickets']==0] = \"loss\"\nplt.figure(figsize=(12,6))\nsns.countplot(x='season', hue='field_win', data=ipl_df)\nplt.xticks(rotation='vertical')\nplt.show()\n","6f6a6f13":"ipl_temp_series = ipl_df.player_of_match.value_counts()[:10]\nlabels = np.array(ipl_temp_series.index)\nind = np.arange(len(labels))\nwidth = 0.9\nfig, ax = plt.subplots()\nrects = ax.bar(ind, np.array(ipl_temp_series), width=width, color='g')\nax.set_xticks(ind+((width)\/2.))\nax.set_xticklabels(labels, rotation='vertical')\nax.set_ylabel(\"Count\")\nax.set_title(\"Top player of the match awardees\")\nautolabel(rects)\nplt.show()","6d3fb148":"temp_df = pd.melt(ipl_df, id_vars=['id'], value_vars=['umpire1', 'umpire2'])\n\ntemp_series = temp_df.value.value_counts()[:10]\nlabels = np.array(temp_series.index)\nind = np.arange(len(labels))\nwidth = 0.9\nfig, ax = plt.subplots()\nrects = ax.bar(ind, np.array(temp_series), width=width, color='y')\nax.set_xticks(ind+((width)\/2.))\nax.set_xticklabels(labels, rotation='vertical')\nax.set_ylabel(\"Count\")\nax.set_title(\"Top Umpires\")\nautolabel(rects)\nplt.show()","29fbd86a":"plt.subplots(figsize=(8,5))\nsns.barplot(x=ipl_df.toss_winner.value_counts().values,y=ipl_df.toss_winner.value_counts().index,palette=\"Set1\")","cd4d2cca":"ipl_df['toss_winner_is_winner'] = 'no'\nipl_df['toss_winner_is_winner'].loc[ipl_df.toss_winner == ipl_df.winner] = 'yes'\ntemp_series = ipl_df.toss_winner_is_winner.value_counts()\n\nlabels = (np.array(temp_series.index))\nsizes = (np.array((temp_series \/ temp_series.sum())*100))\ncolors = ['gold', 'lightskyblue']\nplt.pie(sizes, labels=labels, colors=colors,\n        autopct='%1.1f%%', shadow=True, startangle=90)\nplt.title(\"Toss winner is match winner\")\nplt.show()","bfcb0c95":"# Let us also look at the team wise break up. If the team wins the toss, will it end up in the winning side. Will be interesting to see.\n\nplt.figure(figsize=(12,6))\nsns.countplot(x='toss_winner', hue='toss_winner_is_winner', data=ipl_df)\nplt.xticks(rotation='vertical')\nplt.show()","1836c251":"\nx, y = 2008, 2017\nwhile x < y:\n    wins_percity = ipl_df[ipl_df['season'] == x].groupby(['winner', 'city'])['id'].count().unstack()\n    plot = wins_percity.plot(kind='bar', stacked=True, title=\"Team wins in different cities\\nSeason \"+str(x), figsize=(7, 5))\n    sns.set_palette(\"Paired\", len(ipl_df['city'].unique()))\n    plot.set_xlabel(\"Teams\")\n    plot.set_ylabel(\"No of wins\")\n    plot.legend(loc='best', prop={'size':8})\n    x+=1\n","9ebeec89":"x, y = 2008, 2017\nwhile x < y:\n    wins_pervenue = ipl_df[ipl_df['season'] == x].groupby(['winner', 'venue'])['id'].count().unstack()\n    plot = wins_pervenue.plot(kind='bar', stacked=True, title=\"Team wins in different venues\\nSeason \"+str(x), figsize=(10,15))\n    sns.set_palette(\"Paired\", len(ipl_df['city'].unique()))\n    plot.set_xlabel(\"Teams\")\n    plot.set_ylabel(\"No of wins\")\n    plot.legend(loc='best', prop={'size':8})\n    x+=1","8c7a876c":"# Seasons with D\/L method applied matches\ndl=ipl_df.query('dl_applied==1')['season']\ndl\n","4e24828c":"fig, ax=plt.subplots(figsize=(8,8))\n#ax.set_ylim([0,5])\nax.set_title('No. of matches where D\/L method was applied, season wise\\n')\nsns.countplot(x=dl, data=ipl_df)\nplt.xlabel('\\nSeason')\nplt.ylabel('No. of matches\\n')\nplt.show()","e16509da":"ipl_df[ipl_df['win_by_runs']>0].groupby(['winner'])['win_by_runs'].apply(np.median).sort_values(ascending = False)","47e7b6a4":"fig, ax = plt.subplots(figsize=(10,5))\nax.set_title(\"Winning by Runs - Team Performance\")\nsns.boxplot(y = 'winner', x = 'win_by_runs', data=ipl_df[ipl_df['win_by_runs']>0], orient = 'h');\nplt.show()\n","b121e1b5":"ipl_df[ipl_df['win_by_wickets']>0].groupby(['winner'])['win_by_wickets'].apply(np.median).sort_values(ascending = False)","158b9fed":"fig, ax = plt.subplots(figsize=(10, 5))\nax.set_title(\"Winning by Wickets - Team Performance\")\nsns.boxplot(y = 'winner', x = 'win_by_wickets', data=ipl_df[ipl_df['win_by_wickets']>0], orient = 'h')","619ae2d4":"## Maximum Toss Winners","87715181":"## Toss Decision","e0ff7aa6":"## No of matches Played at each city","3172edb4":"## No of matches played by each team","0339c5b3":"**We have around 5 attributes which are numeric and continuous in nature and others are categorical by nature** ","1d170972":"# 2. Data Exploration","e8be105b":"# How lucky are the toss winning teams?:\n\n","fe2a7fa7":"# Team Performance ","dbf550cf":"# No of matches in which D\/L applied Seasonwise","ca987010":"# BackGround \n\nThe Indian Premier League (IPL) is a professional Twenty20 cricket league in India contested during March or April and May of every year by eight teams representing eight different cities in India.The league was founded by the Board of Control for Cricket in India (BCCI) in 2008. The IPL is the most-attended cricket league in the world and in 2014 ranked sixth by average attendance among all sports leagues.In 2010, the IPL became the first sporting event in the world to be broadcast live on YouTube.\n\nPeople who are new to the cricket can go through the following links \n\n1. About Cricket\nhttps:\/\/en.wikipedia.org\/wiki\/Cricket\n\n2. Cricket Rules\nhttps:\/\/www.cricket-rules.com\/\n\n\n\n\n![image.png](attachment:image.png)\n","6d1409a3":"## No of matches played per season \n","2297974d":"# 4. Data Analysis thorugh visualization","6b50ee77":"## Handling Missing Values ","61ea53c8":"## Number of wins per team\n\n","af587dd0":"# About the Dataset\n\nThe Data contains following the columns :- \n\n1. id :- Each row has a unique id \n2. season :- The year in which the game is played\n3. city:- City in which the game was played\n4. date:- Data on which the game was played \n5. team1:- Name of the  team\n6. team2:- Name of the other team\n7. toss_winner:- team which won the toss\n8. toss_decision :- decision after winning the toss whether to bat ot bowl\n9. result:- whether the match has outcome , tie or others\n10. dl_applied:- Whether the duckworth lewis is applied or not\n11. winner :- team winning the game\n12. win_by_runs:- the no of runs by which the team won\n13. win_by_wickets:-the no of wickets by which the team win\n14. player_of_match:- the player with the most outstanding performance\n15. venue:- The stadium where the match was played\n16. umpire 1:- Name of the first Umpire\n17. umpire 2:- Name of the second Umpire\n18. umpire 3:- Name of the third empire\n\n\n","4075a6c5":"# 3. Data Preprocessing","2c8240f9":"# No. of wins by team in each city(all the seasons)","0595d615":"# 1. Import Libraries ","5972fd32":"## No of wins by team by each venue(all the seasons)","d7ef9dbc":"## Team Performance winning by run","a37ed5d6":"## Team Performance winning by wickets","79f8427f":"# Top players of the match","aa44a0d0":"### Most of the decision is to field first ","7514c8bb":"## No of matches at each Venue","829d6459":"# Top Empires of the Match"}}