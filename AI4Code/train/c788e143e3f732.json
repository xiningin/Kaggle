{"cell_type":{"831cc641":"code","a374f7d5":"code","360d8d19":"code","304ebf0a":"code","9435a6c3":"code","53c4381d":"code","4608264d":"code","9b5bc21f":"code","06871063":"code","7158b42b":"code","a5b71bac":"code","18a0a7af":"code","a9e0759f":"code","2e31a44c":"code","d719777e":"code","7c8f3589":"code","4e4d50d8":"code","e281585f":"code","c43a6b2a":"code","a81a95ca":"code","28def085":"code","d437e0f2":"markdown"},"source":{"831cc641":"import pandas as pd\nimport numpy as np\nimport os\nfrom pathlib import Path","a374f7d5":"path = Path('..\/input\/tabular-playground-series-jan-2021\/')\ntrain = pd.read_csv(path \/ 'train.csv')\ntest = pd.read_csv(path \/ 'test.csv')\nsub = pd.read_csv(path \/ 'sample_submission.csv')","360d8d19":"train.head()","304ebf0a":"train.columns","9435a6c3":"train.describe()","53c4381d":"from sklearn.model_selection import train_test_split\ny = train['target']\nx = train.drop(columns = ['target', 'id'])\nxtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size = 0.1)","4608264d":"from sklearn.ensemble import RandomForestRegressor\n\nrf = RandomForestRegressor(n_estimators = 80, max_features = 'auto')\nrf.fit(xtrain, ytrain)\nprint('Training Done using Random Forest')\n","9b5bc21f":"import matplotlib.pyplot as plt\nimport seaborn as sns","06871063":"ranking = np.argsort(-rf.feature_importances_)\nf, ax = plt.subplots(figsize = (11, 9))\nsns.barplot(x = rf.feature_importances_[ranking], y = xtrain.columns.values[ranking], orient = 'h')\nax.set_xlabel('Feature Importance')\nplt.tight_layout()\nplt.show()","7158b42b":"import xgboost as xgb\n\nxgb = xgb.XGBRegressor(max_depth=3,learning_rate=0.1,n_estimators=1000,reg_alpha=0.001,reg_lambda=0.000001,n_jobs=-1,min_child_weight=3)\nxgb.fit(xtrain, ytrain)","a5b71bac":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.wrappers.scikit_learn import KerasRegressor\n\ndef create_model(optimizer = 'Adam'):\n    model = Sequential()\n    model.add(Dense(xtrain.shape[1], input_dim = xtrain.shape[1], \n                    kernel_initializer = 'normal', activation = 'relu' ))\n    model.add(Dense(16, kernel_initializer = 'normal', activation = 'relu'))\n    model.add(Dense(1, kernel_initializer = 'normal'))\n    \n    model.compile(loss = 'mean_squared_error', optimizer = optimizer)\n    return model\n\ndl = KerasRegressor(build_fn = create_model, verbose = 0)\n\ndl.fit(xtrain, ytrain)","18a0a7af":"import lightgbm as lgb\nlgb_model = lgb.LGBMRegressor()\n\nparam_grid = {\n    \"boosting_type\": ['gbdt'],\n    \"num_leaves\": [9, 19],  #[ 19, 31, 37, 47],\n    \"max_depth\": [29], #[7, 15, 29, 37, 47, 53], \n    \"learning_rate\": [0.1, 0.15],\n    \"n_estimators\": [1000], #[500, 1000, 2000], \n    \"subsample_for_bin\": [200000], #[20000, 200000, 2000000], \n    \"objective\": [\"regression\"],\n    \"min_child_weight\": [0.01], #[0.001, 0.01], \n    \"min_child_samples\":[100, 200], #[20, 50, 100], \n    \"subsample\":[1.0], \n    \"subsample_freq\":[0], \n    \"colsample_bytree\":[1.0], \n    \"reg_alpha\":[0.0], \n    \"reg_lambda\":[0.0]\n}\n\n","a9e0759f":"from sklearn.model_selection import RandomizedSearchCV\n\nmodel = RandomizedSearchCV(\n    estimator=lgb_model,\n    param_distributions=param_grid,\n    n_iter=100,\n    scoring=\"neg_root_mean_squared_error\",\n    verbose=10,\n    n_jobs=-1,\n    cv=5\n)\n\nmodel.fit(xtrain, ytrain)","2e31a44c":"print(f\"Best score: {model.best_score_}\")\nprint(\"Best parameters from the RandomSearchCV:\")\nbest_parameters = model.best_estimator_.get_params()\nfor param_name in sorted(param_grid.keys()):\n    print(f\"\\t{param_name}: {best_parameters[param_name]}\")","d719777e":"lgb = model.best_estimator_","7c8f3589":"xtrain2 = pd.DataFrame(\n    {'XGB' : xgb.predict(xtrain),\n    'NN' : dl.predict(xtrain),\n    'LGB' : lgb.predict(xtrain)\n    }\n)\nxtrain2.head()","4e4d50d8":"from sklearn import linear_model\n\nreg = linear_model.LinearRegression()\nreg.fit(xtrain2, ytrain)","e281585f":"test_data = test.drop(columns = ['id'])","c43a6b2a":"xtest2 = pd.DataFrame( {'XGB':xgb.predict(test_data),\n     'DL': dl.predict(test_data).ravel(),\n     'SVR': lgb.predict(test_data),\n    })\n\nensemble_predictions = reg.predict(xtest2)","a81a95ca":"submission= pd.DataFrame({'id' : test['id'], 'target': ensemble_predictions })\n\nprint(submission.head())","28def085":"submission.to_csv('submission.csv', index = False)","d437e0f2":"Please give an upvote if you find this useful."}}