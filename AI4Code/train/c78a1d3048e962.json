{"cell_type":{"f2d011a6":"code","b570b8e2":"code","1a889920":"code","6e98b059":"code","dfba41b8":"code","d5e23e0f":"code","4f79bdba":"code","6d5d8e71":"code","47d58647":"code","002027fe":"code","ea3377ac":"code","44d38677":"code","77863928":"code","164567cf":"code","a927b839":"code","e3fd5e77":"markdown","16035902":"markdown","41969f16":"markdown","825708d3":"markdown","9ef256ad":"markdown","632f881a":"markdown","5075ce69":"markdown","22e0353a":"markdown"},"source":{"f2d011a6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom pandas_summary import DataFrameSummary\n\n# viz tools\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport matplotlib.animation as animation\nimport cufflinks as cf\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.tools as tls\nimport seaborn as sns\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot, iplot_mpl\n\ninit_notebook_mode(connected=True)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n%matplotlib inline","b570b8e2":"kaggle_path = \"\/kaggle\/input\/sweden-covid19-dataset\/\"\n\ndeath_df = pd.read_csv(kaggle_path + 'time_series_deaths-deaths.csv')\ndeath_summary = DataFrameSummary(death_df)\n\ncase_df = pd.read_csv(kaggle_path + 'time_series_confimed-confirmed.csv')\ncase_summary = DataFrameSummary(death_df)\n","1a889920":"ts_death = death_df[[i for i in death_df.columns if i not in ['Display_Name', 'Population', 'Lat', 'Long', 'Diff', 'At_Hospital', 'At_ICU',\n                       'FHM_Total', 'Region_Deaths', 'FHM_Deaths_Today', 'Hospital_Total']]].fillna(0)","6e98b059":"ts_case = case_df[[i for i in death_df.columns if i not in ['Display_Name', 'Population', 'Lat', 'Long', 'Diff', 'At_Hospital', 'At_ICU',\n                       'FHM_Total', 'Region_Deaths', 'FHM_Deaths_Today', 'Hospital_Total']]].fillna(0)","dfba41b8":"ts_cum_deaths = pd.concat([ts_death['Region'],ts_death.iloc[:,1:-2].cumsum(1)],1)\nts_cum_cases = pd.concat([ts_case['Region'], ts_case.iloc[:,1:-2].cumsum(1)],1)","d5e23e0f":"ts_cum_deaths.head()","4f79bdba":"ts_cum_death_count = ts_cum_deaths.set_index('Region').T.drop(0, 1).drop('Total', 1)\nts_cum_cases_count = ts_cum_cases.set_index('Region').T.drop(0, 1).drop('Total', 1)\ncase_start = np.where(ts_cum_cases_count['Todays_Total'] > 100)[0][0]\ndeath_start = np.where(ts_cum_cases_count['Todays_Total'] > 100)[0][0]","6d5d8e71":"ts_case = ts_case.set_index('Region').T.drop(0, 1).drop('Total', 1)\nfig = ts_case[case_start:].iloc[:,:-3].sum(1).rolling(7).mean().dropna().iplot(asFigure=True)\nfig.update_layout(yaxis_type=\"log\")\nfig.show()","47d58647":"ts_death = ts_death.set_index('Region').T.drop(0, 1).drop('Total', 1)\nfig = ts_death[death_start:].iloc[:,:-3].sum(1).rolling(7).mean().dropna().iplot(asFigure=True)\nfig.update_layout(yaxis_type=\"log\")\nfig.show()","002027fe":"fig = ts_death[death_start:].iloc[:,:-3].rolling(7).mean().dropna().iplot(asFigure=True)\nfig.update_layout(yaxis_type=\"log\")\nfig.show()","ea3377ac":"ts_cum_df = ts_cum_death_count[death_start:].T.reset_index().iloc[:,1:].divide(death_df['Population'].iloc[:-3]\/100000, axis=0).T.set_axis(ts_cum_death_count[death_start:].T.index, axis=1, inplace=False).iloc[:,:-3]\nfig = ts_cum_df.rolling(7).mean().dropna().iplot(asFigure=True)\nfig.update_layout(yaxis_type=\"log\")","44d38677":"fig = ts_death[death_start:].iloc[:,1:].divide(ts_case[death_start:].iloc[:,1:]).fillna(0).rolling(7, min_periods=1).mean().iplot(asFigure=True)\nfig.update_layout(yaxis_type=\"log\")","77863928":"ts_death = ts_death[death_start:][ts_death['Region Stockholm'] > 0]\n\n# Create the total score for each participant\ntotals = [i for i in ts_death['Todays_Total']]\n\n# Create the percentage of the total score the pre_score value for each participant was\npre_rel = [i \/ j * 100 for i,j in zip(ts_death['Region Stockholm'], totals)]\n\n# Create the percentage of the total score the mid_score value for each participant was\nmid_rel = [i \/ j * 100 for  i,j in zip(ts_death['V\u00e4stra G\u00f6talandsregionen'], totals)]\n\n# Create the percentage of the total score the post_score value for each participant was\npost_rel = [i \/ j * 100 for  i,j in zip(ts_death['Region Sk\u00e5ne'], totals)]\n\n# Create the percentage of the total score the post_score value for each participant was\n\nrest = [i \/ j * 100 for  i,j in zip(np.sum([ts_death[i] for i in ts_death.columns if i not in ['Region Stockholm', 'V\u00e4stra G\u00f6talandsregionen', 'Region Sk\u00e5ne', 'Todays_Total']], 0), totals)]\n\nimport plotly.graph_objects as go\nx=ts_death.index\n\nfig = go.Figure(data=[\n    go.Bar(name='Region Stockholm', x=x, y=pre_rel),\n    go.Bar(name='V\u00e4stra G\u00f6talandsregionen', x=x, y=mid_rel),\n    go.Bar(name=\"Region Sk\u00e5ne\", x=x, y=post_rel),\n    go.Bar(name=\"\u00d6vriga Sverige\", x=x, y=rest)\n])\n# Change the bar mode\nfig.update_layout(barmode='stack')\nfig.show()","164567cf":"ts_weekly_deaths = ts_death[death_start:][ts_death['Region Stockholm'] > 0].rolling(7).mean().dropna()\n\n# Create the total score for each participant\ntotals = [i for i in ts_weekly_deaths['Todays_Total']]\n\n# Create the percentage of the total score the pre_score value for each participant was\npre_rel = [i \/ j * 100 for i,j in zip(ts_weekly_deaths['Region Stockholm'], totals)]\n\n# Create the percentage of the total score the mid_score value for each participant was\nmid_rel = [i \/ j * 100 for  i,j in zip(ts_weekly_deaths['V\u00e4stra G\u00f6talandsregionen'], totals)]\n\n# Create the percentage of the total score the post_score value for each participant was\npost_rel = [i \/ j * 100 for  i,j in zip(ts_weekly_deaths['Region Sk\u00e5ne'], totals)]\n\n# Create the percentage of the total score the post_score value for each participant was\n\nrest = [i \/ j * 100 for  i,j in zip(np.sum([ts_weekly_deaths[i] for i in ts_weekly_deaths.columns if i not in ['Region Stockholm', 'V\u00e4stra G\u00f6talandsregionen', 'Region Sk\u00e5ne', 'Todays_Total']], 0), totals)]\n\nimport plotly.graph_objects as go\nx=ts_weekly_deaths.index\n\nfig = go.Figure(data=[\n    go.Bar(name='Region Stockholm', x=x, y=pre_rel),\n    go.Bar(name='V\u00e4stra G\u00f6talandsregionen', x=x, y=mid_rel),\n    go.Bar(name=\"Region Sk\u00e5ne\", x=x, y=post_rel),\n    go.Bar(name=\"\u00d6vriga Sverige\", x=x, y=rest)\n])\n# Change the bar mode\nfig.update_layout(barmode='stack')\nfig.show()","a927b839":"# END OF NOTEBOOK","e3fd5e77":"## **This notebook follows the regional story of COVID-19 reported cases and deaths across Sweden. **\n\n![COVID-19-SWEDEN](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/3\/34\/COVID-19_Outbreak_Cases_in_Sweden_by_Number_with_Legend.svg\/220px-COVID-19_Outbreak_Cases_in_Sweden_by_Number_with_Legend.svg.png)","16035902":"### Log-linear plot of 7-day moving average of deaths as a percentage of total reported cases per day (after 100 deaths were reported). ","41969f16":"### Daily view of deaths reported (since 100th death). It should be noted that there is a lag and thus deaths reported on a particular day do not correspond to the deaths that occurred on that day. ","825708d3":"### Due to a lag in reporting during the week, a weekly view may provide a more accurate picture of the distribution of deaths across various regions in Sweden.","9ef256ad":"## 7-day moving average log-linear plot of reported cases per day in Sweden as a whole","632f881a":"### Cumulative deaths per 100,000 inhabitants (after first 100 deaths)","5075ce69":"### 7-day moving average of daily reported deaths by region after 100 reported deaths.","22e0353a":"### 7-day moving average log-linear plot of reported deaths per day in Sweden as a whole"}}