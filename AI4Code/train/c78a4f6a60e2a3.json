{"cell_type":{"0a9a3764":"code","55647217":"code","2a99be45":"code","253380fc":"code","8ac3462a":"code","5a269038":"code","839567d2":"code","a81f4524":"code","29aa3030":"code","bc97d062":"markdown","5a078771":"markdown","08a6325d":"markdown","6f9586f9":"markdown","324dd57d":"markdown","b8b859e7":"markdown","d5263f2b":"markdown","627f5274":"markdown"},"source":{"0a9a3764":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder,MinMaxScaler\n\nfrom sklearn.model_selection import train_test_split,StratifiedKFold\nfrom sklearn.ensemble import RandomForestRegressor\n\nimport gc ","55647217":"train = pd.read_csv(\"..\/input\/tabular-playground-series-oct-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-oct-2021\/test.csv\")","2a99be45":"def reduce_memory_usage(df, verbose=True):\n    numerics = [\"int8\", \"int16\", \"int32\", \"int64\", \"float16\", \"float32\", \"float64\"]\n    start_mem = df.memory_usage().sum() \/ 1024 ** 2\n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == \"int\":\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            else:\n                if (\n                    c_min > np.finfo(np.float16).min\n                    and c_max < np.finfo(np.float16).max\n                ):\n                    df[col] = df[col].astype(np.float16)\n                elif (\n                    c_min > np.finfo(np.float32).min\n                    and c_max < np.finfo(np.float32).max\n                ):\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n    end_mem = df.memory_usage().sum() \/ 1024 ** 2\n    if verbose:\n        print(\n            \"Mem. usage decreased to {:.2f} Mb ({:.1f}% reduction)\".format(\n                end_mem, 100 * (start_mem - end_mem) \/ start_mem\n            )\n        )\n    return df\n\ntrain = reduce_memory_usage(train)\ntest = reduce_memory_usage(test)\ngc.collect()","253380fc":"def getColumnListExceptSomeColumns(df,exceptList):\n    return df.columns.difference(exceptList).to_list()\n\ntarget_col = \"target\"\ny = train[target_col]\n\nfeatures = getColumnListExceptSomeColumns(train,[\"target\",\"id\"])\nX = train[features]\nX_test = test[features]","8ac3462a":"str_list = [] # empty list to contain columns with strings\nnum_list = []\nfor colname, colvalue in X.iteritems():\n    if type(colvalue[1]) == str:\n        str_list.append(colname)\n    else:\n        num_list.append(colname)","5a269038":"model = RandomForestRegressor(\n    n_estimators=1000,\n    max_depth=2, \n    random_state=2021,\n    max_features='log2',\n    n_jobs=-1,\n    max_samples=0.5\n)","839567d2":"numeric_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='median')),\n    ('scaler', StandardScaler()),\n    ('minmax',MinMaxScaler())\n])\n\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))])\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numeric_transformer, num_list),\n        ('cat', categorical_transformer, str_list)])\nclf = Pipeline(steps=[('preprocessor', preprocessor),(\"rfr\", model)])\nclf.fit(X, y)","a81f4524":"predictions = clf.predict(X_test)","29aa3030":"submission = pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/sample_submission.csv')\nsubmission['target'] = predictions\nsubmission.to_csv('submission.csv', index=False)","bc97d062":"# device column by column type ","5a078771":"# submission","08a6325d":"# make model","6f9586f9":"# auto pipe line","324dd57d":"# load Data","b8b859e7":"# reduce memory ","d5263f2b":"# predict test data","627f5274":"# devide input data and target data"}}