{"cell_type":{"00860fff":"code","df16ffb7":"code","4d240839":"code","af1efb05":"code","c7ab0649":"code","c6fefe1c":"code","845b9ce3":"code","591c774d":"code","a446dc56":"code","6d01b367":"code","6592c081":"code","b9fafaef":"code","7362b539":"code","ceea0e17":"code","ba5d5df9":"code","ae61b9ae":"code","02428188":"code","d71ea09b":"code","a929a9ad":"code","29ad77ff":"code","e19f7503":"code","00f6921f":"code","fa9ccb47":"code","5c9b3590":"code","46baff16":"code","7cd392e8":"code","1f293280":"code","a410c838":"code","e3282af5":"code","e763bab0":"code","708483e7":"code","305a9043":"code","21e0ac10":"code","fe4f59e2":"code","5edbea42":"code","6973aafb":"code","afb329e0":"code","7abfcf9a":"code","9ef6c867":"code","9eda5227":"code","d3bd5fb1":"code","c3d6cbd2":"code","bc309319":"code","f9139f2e":"code","07eddd61":"code","e3e44092":"code","96c19235":"code","580fecda":"code","135503bf":"markdown","5ea64a91":"markdown","8e5d9fd9":"markdown","5fc44723":"markdown","aadb6624":"markdown","ba070c4d":"markdown","ffc50b48":"markdown","9fb7bbc7":"markdown","3be8f35c":"markdown","beeb673a":"markdown","f51578a0":"markdown","fa78e304":"markdown","8a4034fd":"markdown"},"source":{"00860fff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport math\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","df16ffb7":"#'..\/input\/LeagueofLegends.csv'\nlol = pd.read_csv(\"..\/input\/LeagueofLegends.csv\")\nlol.drop('Address', inplace=True, axis=1)\nlol.sample(1)","4d240839":"cblol = lol[lol['League'] == 'CBLoL']\nprint(cblol.shape)\ncblol.sample(1)","af1efb05":"rbkills = cblol.groupby(by=['Year'])['bResult', 'rResult'].sum()\nrbkills.plot.bar()\nplt.title('red team x blue team kills')\nplt.show()","c7ab0649":"cblol.columns\n#cblol[['blueTopChamp', 'blueJungleChamp', 'blueMiddleChamp', 'blueADCChamp','blueSupportChamp']]\ncblol['blueTopChamp'].value_counts()[:5]","c6fefe1c":"cblol['blueJungleChamp'].value_counts()[:5]","845b9ce3":"cblol['blueMiddleChamp'].value_counts()[:5]","591c774d":"cblol['blueADCChamp'].value_counts()[:5]","a446dc56":"cblol['blueSupportChamp'].value_counts()[:5]","6d01b367":"cblol['redTopChamp'].value_counts()[:5]","6592c081":"cblol['redJungleChamp'].value_counts()[:5]","b9fafaef":"cblol['redMiddleChamp'].value_counts()[:5]","7362b539":"cblol['redADCChamp'].value_counts()[:5]","ceea0e17":"cblol['redSupportChamp'].value_counts()[:5]","ba5d5df9":"def laneChamps(lane, cblol):\n    blue = 'blue' + str(lane) + 'Champ' \n    red = 'red' + str(lane) + 'Champ'\n    lanePick = cblol[red].value_counts()[:5] + cblol[blue].value_counts()[:5]\n\n    for i in range(0,len(lanePick)):\n        if math.isnan(lanePick.values[i]):\n            #top.values[i] = 0\n            if lanePick.index[i] in cblol[red].value_counts()[:5]:\n                lanePick.values[i] = cblol[red].value_counts()[:5].loc[lanePick.index[i]]\n            else:\n                lanePick.values[i] = cblol[blue].value_counts()[:5].loc[lanePick.index[i]]\n    return lanePick.sort_values(ascending=False)","ae61b9ae":"top = laneChamps('Top', cblol)\ntop\nplt.bar(top.index, top.values)\nplt.title('top 5 champions chosen as top')\nplt.show()","02428188":"jg = laneChamps('Jungle', cblol)\njg\nplt.bar(jg.index, jg.values)\nplt.title('top 5 champions chosen as jungle')\nplt.show()","d71ea09b":"mid = laneChamps('Middle', cblol)\nmid\nplt.bar(mid.index, mid.values)\nplt.title('top 5 champions chosen as middle')\nplt.show()","a929a9ad":"adc = laneChamps('ADC', cblol)\nadc\nplt.bar(adc.index, adc.values)\nplt.title('top 5 champions chosen as adc')\nplt.show()","29ad77ff":"sup = laneChamps('Support', cblol)\nsup\nplt.bar(sup.index, sup.values)\nplt.title('top 5 champions chosen as support')\nplt.show()","e19f7503":"bwins = cblol[cblol.bResult > cblol.rResult]['blueTeamTag'].value_counts()\nplt.bar(bwins.index, bwins.values)\nplt.show()","00f6921f":"rwins = cblol[cblol.bResult > cblol.rResult]['redTeamTag'].value_counts()\nplt.bar(rwins.index, rwins.values)\nplt.show()","fa9ccb47":"cblol[cblol.gamelength > 60][['blueTeamTag','redTeamTag','gamelength']].sort_values('gamelength', ascending=False)[:5]","5c9b3590":"cblol[cblol.gamelength < 30][['blueTeamTag','redTeamTag','gamelength']].sort_values('gamelength', ascending=True)[:5]","46baff16":"bans = pd.read_csv('..\/input\/bans.csv')\nbans.drop('Address', axis=1, inplace=True)\nbans.sample(1)","7cd392e8":"def bansChamps(ban_number, bans):\n    ban = 'ban_' + str(ban_number)\n    bans_ = bans[bans.Team == 'redBans'][ban].value_counts()[:5] + bans[bans.Team == 'blueBans'][ban].value_counts()[:5]\n\n    for i in range(0,len(bans_)):\n        if math.isnan(bans_.values[i]):\n            if bans_.index[i] in bans[bans.Team == 'redBans'][ban].value_counts()[:5]:\n                bans_.values[i] = bans[bans.Team == 'redBans'][ban].value_counts()[:5].loc[bans_.index[i]]\n            else:\n                bans_.values[i] = bans[bans.Team == 'blueBans'][ban].value_counts()[:5].loc[bans_.index[i]]\n    return bans_.sort_values(ascending=False)","1f293280":"ban1 = bansChamps(1, bans)\nban2 = bansChamps(2, bans)\nban3 = bansChamps(3, bans)\nban4 = bansChamps(4, bans)\nban5 = bansChamps(5, bans)","a410c838":"totalbans = ban1 + ban2 + ban3 + ban4 + ban5","e3282af5":"def bansTotal(totalbans, ban1, ban2, ban3, ban4, ban5):\n    for i in range(0, len(totalbans)):\n        if math.isnan(totalbans.values[i]):\n            totalbans.values[i] = 0\n            if totalbans.index[i] in ban1:\n                totalbans.values[i] += ban1.loc[totalbans.index[i]]\n            if totalbans.index[i] in ban2:\n                totalbans.values[i] += ban2.loc[totalbans.index[i]]\n            if totalbans.index[i] in ban3:\n                totalbans.values[i] += ban3.loc[totalbans.index[i]]\n            if totalbans.index[i] in ban4:\n                totalbans.values[i] += ban4.loc[totalbans.index[i]]\n            if totalbans.index[i] in ban5:\n                totalbans.values[i] += ban5.loc[totalbans.index[i]]\n    return totalbans.sort_values(ascending=False)","e763bab0":"bans = bansTotal(totalbans, ban1, ban2, ban3, ban4, ban5)[:5]\nplt.bar(bans.index, bans.values)\nplt.title('top 5 most banned champions')\nplt.show()","708483e7":"gold = pd.read_csv('..\/input\/gold.csv')\ngold.drop('Address', axis=1, inplace=True)\n#goldTotal = gold[gold.Type == 'goldblue'].sum() + gold[gold.Type == 'goldred'].sum()\ngold.Type.unique()","305a9043":"def goldlane(lane, gold):\n    red = 'goldred' + str(lane)\n    blue = 'goldblue' + str(lane)\n    goldLane = gold[gold.Type == blue].sum() + gold[gold.Type == red].sum()\n    goldLane.values[0] = 'gold' + str(lane)\n    return goldLane","21e0ac10":"top = goldlane('Top', gold)\nminutes = []\nfor m in top.index:\n    if m != 'Type':\n        minutes.append(m.split('_')[1])\n    else:\n        minutes.append(m.split('_'))\nminutes\n\nd = {'minute' : minutes[1:], 'gold' : top.values[1:]}\ntop_ = pd.DataFrame(data=d)\ntop_.plot.line()\nplt.title('gold per minute by top')\nplt.show()","fe4f59e2":"jg = goldlane('Jungle', gold)\nd = {'minute' : minutes[1:], 'gold' : jg.values[1:]}\njg_ = pd.DataFrame(data=d)\njg_.plot.line()\nplt.title('gold per minute by jungle')\nplt.show()","5edbea42":"mid = goldlane('Middle', gold)\nd = {'minute' : minutes[1:], 'gold' : mid.values[1:]}\nmid_ = pd.DataFrame(data=d)\nmid_.plot.line()\nplt.title('gold per minute by mid')\nplt.show()","6973aafb":"adc = goldlane('ADC', gold)\nd = {'minute' : minutes[1:], 'gold' : adc.values[1:]}\nadc_ = pd.DataFrame(data=d)\nadc_.plot.line()\nplt.title('gold per minute by adc')\nplt.show()","afb329e0":"sup = goldlane('Support', gold)\nd = {'minute' : minutes[1:], 'gold' : sup.values[1:]}\nsup_ = pd.DataFrame(data=d)\nsup_.plot.line()\nplt.title('gold per minute by sup')\nplt.show()","7abfcf9a":"d = {'minute' : minutes[1:], 'top' : top.values[1:], 'mid' : mid.values[1:], 'jg' : jg.values[1:], 'adc' : adc.values[1:], 'sup' : sup.values[1:]}\nlanes = pd.DataFrame(data=d)\nlanes.plot.line()","9ef6c867":"kills = pd.read_csv('..\/input\/kills.csv')\nkills.drop('Address', axis=1, inplace=True)\ntopkillers = kills.Killer.value_counts()[:5]\nplt.bar(topkillers.index, topkillers.values)\nplt.title('top Killers')\nplt.xlabel('Team and Nick')\nplt.show()","9eda5227":"topvictims = kills.Victim.value_counts()[:6]\ntopvictims = topvictims[topvictims.index != 'None']\ntopvictims\nplt.bar(topvictims.index, topvictims.values)\nplt.title('top victims')\nplt.xlabel('Team and Nick')\nplt.show()","d3bd5fb1":"kills[['Killer', 'Victim', 'Time']][kills.Time < 25][:5].sort_values('Time')","c3d6cbd2":"monsters = pd.read_csv('..\/input\/monsters.csv')\nprint(monsters.Type.unique())\nmonsters = monsters[['Type','Time']][monsters.Time < 25].sort_values('Time')\ndragon = monsters[['Type','Time']][monsters.Type == 'DRAGON'][:5]\nearth_dragon = monsters[['Type','Time']][monsters.Type == 'EARTH_DRAGON'][:5]\nwater_dragon = monsters[['Type','Time']][monsters.Type == 'WATER_DRAGON'][:5]\nair_dragon = monsters[['Type','Time']][monsters.Type == 'AIR_DRAGON'][:5]\nfire_dragon = monsters[['Type','Time']][monsters.Type == 'AIR_DRAGON'][:5]\nbaron = monsters[['Type','Time']][monsters.Type == 'BARON_NASHOR'][:5]","bc309319":"dragon.Time","f9139f2e":"earth_dragon.Time","07eddd61":"water_dragon.Time","e3e44092":"air_dragon.Time","96c19235":"fire_dragon.Time","580fecda":"baron.Time","135503bf":"**Wins as blue team**","5ea64a91":"**top 5 match with highest and lowest duration**","8e5d9fd9":"**Kills**","5fc44723":"**Data from CBLoL league**","aadb6624":"**Wins as red team**","ba070c4d":"**red teams champions**","ffc50b48":"**Bans**","9fb7bbc7":"**blue teams champions**","3be8f35c":"**fasters kills**","beeb673a":"**gold**","f51578a0":"**Data from NALCS, EULCS, LCK, LMS, and CBLoL leagues**","fa78e304":"**most faster killed monsters**","8a4034fd":"**most chosen champions by lane**"}}