{"cell_type":{"a06f397e":"code","e70ccd39":"code","ac70ebaf":"code","7c071816":"code","f9def516":"code","fed8170f":"code","0a3c6f7a":"code","24a2ff33":"code","cf8c420f":"code","2a147cac":"code","5654a251":"code","67abee1d":"code","ed5bd783":"code","35faac89":"code","916fc672":"code","ae8b17f7":"code","04729ffd":"code","c4cd4d7b":"code","712d339c":"code","b2caa872":"code","eb1196b1":"code","2a0ff733":"code","18273c1e":"code","33dd5bc1":"code","c5a7ce4f":"code","4e5a1016":"code","42fb184e":"code","6d7dd53c":"code","82afa416":"code","b9117275":"code","5a19437f":"code","ed2a10a0":"code","f857b537":"code","9ae41dd1":"code","0fd57dda":"code","42df4433":"code","c14cb268":"code","7e7bc38d":"code","25368c8c":"markdown","884b1615":"markdown","1828091e":"markdown","545e9cb6":"markdown","67529d09":"markdown","f5920c4c":"markdown","2177598b":"markdown","04bd2cd5":"markdown","a9fbf380":"markdown","0396dfa9":"markdown","16aaa0e0":"markdown","49d51ee1":"markdown","3a5953d3":"markdown","1c0317b4":"markdown","732819cb":"markdown","1ea455b8":"markdown","63ad94aa":"markdown","4502d738":"markdown"},"source":{"a06f397e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","e70ccd39":"import scipy.stats as stats\nimport pylab","ac70ebaf":"def plot_qq(df,feature):\n    plt.figure(figsize = (10,6))\n    plt.subplot(1,2,1)\n    df[feature].hist()\n    plt.subplot(1,2,2)\n    stats.probplot(df[feature], dist= 'norm', plot=pylab)\n    plt.show()","7c071816":"#df = pd.read_csv('forbes_billionaires.csv')\ndf = pd.read_csv(\"..\/input\/forbes-billionaires-of-2021-20\/forbes_billionaires.csv\")\n\ncategorical_columns = df.dtypes[df.dtypes == 'object'].index\nnumerical_columns = df.dtypes[df.dtypes != 'object'].index    ","f9def516":"df.head(2)","fed8170f":"df.shape","0a3c6f7a":"df.info()","24a2ff33":"df.isnull().sum().plot(kind = 'bar')","cf8c420f":"(df.isnull().sum()\/df.shape[0]*100).sort_values(ascending = False)","2a147cac":"df.describe().T","5654a251":"#df[\"Residence\"].value_counts()[df[\"Residence\"].value_counts() > 10]","67abee1d":"df[['City','State','Null']] = df.Residence.apply(lambda x: pd.Series(str(x).split(',')))","ed5bd783":"df.head(2)","35faac89":"df.shape","916fc672":"#df[df.Null.notnull()]","ae8b17f7":"#df[df.State.isnull()]","04729ffd":"df.loc[df['State'].isnull(),'State'] = df['Country']","c4cd4d7b":"df.loc[df['City']== 'nan','City'] = df['State']","712d339c":"df.drop(['Null','Children','Education','Residence'], axis =1, inplace = True)","b2caa872":"df.isnull().sum().plot(kind = 'bar')","eb1196b1":"df['Status'].value_counts()","2a0ff733":"df['Status'].isnull().sum()","18273c1e":"#Adding an extra column where status has null values\n#df['Status_Null'] = np.where(df['Status'].isnull(), 1, 0)","33dd5bc1":"#df['Status_Null'].value_counts()","c5a7ce4f":"df['Status'] = np.where(df['Status'].isnull(), 'Unknown', df['Status'])","4e5a1016":"#df.loc[df['Status'].isnull(),'Status'] = 'Unknown'","42fb184e":"df['Status'].value_counts()","6d7dd53c":"#df.isnull().sum().plot(kind = 'bar')","82afa416":"sns.histplot(x = 'Age', data = df)","b9117275":"df['Age'].hist()","5a19437f":"plot_qq(df,'Age')","ed2a10a0":"df['Age_Null'] = np.where(df['Age'].isnull(), 1, 0)","f857b537":"def na_randomfill(series):\n    na_mask = pd.isnull(series)   # boolean mask for null values\n    n_null = na_mask.sum()        # number of nulls in the Series\n    \n    if n_null == 0:\n        return series             # if there are no nulls, no need to resample\n    \n    # Randomly sample the non-null values from our series\n    #  only sample this Series as many times as we have nulls \n    fill_values = series[~na_mask].sample(n=n_null, replace=True, random_state=0)\n\n    # This ensures our new values will replace NaNs in the correct locations\n    fill_values.index = series.index[na_mask]\n    \n    return series.fillna(fill_values) ","9ae41dd1":"df[\"Age_new\"] = na_randomfill(df[\"Age\"])","0fd57dda":"# Dropping age columns\ndf.drop('Age', axis = True, inplace=True)","42df4433":"#df.isnull().sum().plot(kind = 'bar')","c14cb268":"df.dropna(axis = 0, how='any', inplace =True)","7e7bc38d":"#### Work in Progress","25368c8c":"### Imports","884b1615":"Looks like normal dist lets check with qq plot","1828091e":"Similarly filling null city values with state values; here null values are represented as nan","545e9cb6":"Filling State null values with country values","67529d09":"Now age colunmn","f5920c4c":"add a column which take records age missing values ","2177598b":"Children and Education columns has more than 40% of the data missing so we will dropt those columns","04bd2cd5":"We will fill the missing values as their own category as Unknown","a9fbf380":"Here Null column has all the null values so dropping that along with children and education and Residence","0396dfa9":"Citizenshipo and self made null values are so low we can directly drop those rows for now and we might work on them later if we want to improve the performance of the mdoel","16aaa0e0":"Checking rest of the columns","49d51ee1":"#### Dropping columns","3a5953d3":"#### Transforming Residence column into City and State column ","1c0317b4":"## EDA","732819cb":"replacing age null values with random values from the age distribition","1ea455b8":"## Read Data","63ad94aa":"It is a normal distribution","4502d738":"Majority of the people are married"}}