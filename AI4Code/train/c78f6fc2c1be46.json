{"cell_type":{"cadc5dcd":"code","46377d1f":"code","adc8e214":"code","068d9ed8":"code","d600d135":"code","17e6ad6f":"code","1ed1ef01":"code","3039aa2d":"code","55b89db3":"code","c52a0833":"code","b6646306":"code","f3023216":"code","e90521f1":"code","0997aa93":"code","441cb7d6":"code","cb03fd8e":"code","3c00d73a":"code","ba92456a":"code","44f79024":"code","e90b2db8":"code","7e8b07df":"code","99c20dcd":"code","20be43bd":"code","771fbece":"code","b8356057":"code","a6eb61ed":"code","57707291":"code","45fc96a0":"code","176fddb6":"code","d06074a5":"code","7bd28e70":"code","21587a1e":"code","43ae8d54":"code","fbe00856":"code","a37aa9bf":"code","665e598d":"code","fbfb49bf":"code","88f6fb76":"code","038cca2b":"code","330c7201":"code","22f35ec5":"code","46b154d1":"code","6b588594":"code","0cf8b496":"code","f006070c":"code","afd7cf7b":"code","52415fd1":"code","0c4f7f37":"code","7a0df5ed":"code","a6de0b0f":"code","87b770ec":"code","09cddd32":"code","95a7d316":"code","a5e52a6f":"code","d26fa05b":"code","5c4b8fe8":"code","07cb830b":"code","c67cbcaa":"markdown","adad5856":"markdown","bbcbcbb6":"markdown","da9d5df9":"markdown","47dbef22":"markdown","71511dae":"markdown","176d1e62":"markdown","9d9ef715":"markdown","d9513072":"markdown","87a69a4d":"markdown","18340156":"markdown","f48c8e35":"markdown","23cdadd8":"markdown","75c35587":"markdown","62e0906e":"markdown","8e2a4bd4":"markdown","703e12c5":"markdown","325b296e":"markdown","5543c73f":"markdown","3d6925bc":"markdown","2aa4415e":"markdown","b6d27b9c":"markdown","1c244a75":"markdown"},"source":{"cadc5dcd":"\nimport math\nfrom PIL import Image\nfrom keras import layers\nfrom keras.applications import ResNet50\nfrom keras.callbacks import Callback, ModelCheckpoint, ReduceLROnPlateau, TensorBoard\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.utils.np_utils import to_categorical# convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.optimizers import Adam\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import cohen_kappa_score, accuracy_score\nimport scipy\nfrom tqdm import tqdm\nimport tensorflow as tf\nfrom keras import backend as K\nimport gc\nfrom functools import partial\nfrom sklearn import metrics\nfrom collections import Counter\nimport json\nimport itertools\n%matplotlib inline\nfrom glob import glob\nfrom keras import Model\nfrom keras.callbacks import ReduceLROnPlateau, EarlyStopping\nimport os\nimport h5py\nimport shutil\nimport imgaug as aug\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mimg\nimport imgaug.augmenters as iaa\nfrom os import listdir, makedirs, getcwd, remove\nfrom os.path import isfile, join, abspath, exists, isdir, expanduser\nfrom pathlib import Path\nfrom skimage.io import imread\nfrom skimage.transform import resize\nfrom keras.models import Sequential, Model\nfrom keras.applications.vgg16 import VGG16, preprocess_input\nfrom keras.preprocessing.image import ImageDataGenerator,load_img, img_to_array\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Dense, Dropout, Input, Flatten, SeparableConv2D\nfrom keras.layers import GlobalMaxPooling2D\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.layers.merge import Concatenate\nfrom keras.models import Model\nfrom keras.optimizers import Adam, SGD, RMSprop\nfrom sklearn.preprocessing import StandardScaler\nfrom mlxtend.plotting import plot_confusion_matrix\nfrom sklearn.metrics import confusion_matrix\nimport cv2\nfrom keras import backend as K\nfrom keras.layers import Input, Lambda, Dense, Flatten\nfrom keras.models import load_model\n\n\ncolor = sns.color_palette()\n%matplotlib inline","46377d1f":"! pip install -q kaggle","adc8e214":"from IPython.display import Image \nImage(url=\"https:\/\/www.clinicbarcelona.org\/uploads\/media\/default\/0001\/09\/028fd0195b02b208a3118ea9797c3b2e37ed148f.png\")","068d9ed8":"# D\u00e9finir le chemin vers le r\u00e9pertoire de donn\u00e9es\ndata_dir = Path('..\/input\/chest-xray-pneumonia\/chest_xray')\n\n# Chemin vers le r\u00e9pertoire de donn\u00e9es de train\ntrain_dir = data_dir \/ 'train'\n\n# Chemin vers le r\u00e9pertoire de donn\u00e9es de validation\nval_dir = data_dir \/ 'val'\n\n# Chemin vers le r\u00e9pertoire de donn\u00e9es de teste\ntest_dir = data_dir \/ 'test'","d600d135":"path = \"..\/input\/chest-xray-pneumonia\/\/chest_xray\/train\/NORMAL\"\n#listdir =retourne une liste contenant les noms des entr\u00e9es dans le r\u00e9pertoire donn\u00e9 par chemin\ndata_exemple = os.listdir(path)\nplt.figure(figsize=(15, 10))\n\nfor i in range(12):\n    plt.subplot(4, 4, i + 1)\n    #imread =charge une image \u00e0 partir du fichier sp\u00e9cifi\u00e9\n    img = plt.imread(os.path.join(path, data_exemple[i]))\n    #imshow = affiche l'imagerie \n    plt.imshow(img, cmap='gray')\n    plt.axis('off')\n    \nplt.tight_layout()","17e6ad6f":"path = \"..\/input\/chest-xray-pneumonia\/\/chest_xray\/train\/PNEUMONIA\"\n#listdir =retourne une liste contenant les noms des entr\u00e9es dans le r\u00e9pertoire donn\u00e9 par chemin\ndata_exemple = os.listdir(path)\nplt.figure(figsize=(15, 10))\n\nfor i in range(12):\n    plt.subplot(4, 4, i + 1)\n    #imread =charge une image \u00e0 partir du fichier sp\u00e9cifi\u00e9\n    img = plt.imread(os.path.join(path, data_exemple[i]))\n    plt.imshow(img, cmap='gray')\n    plt.axis('off')\n    \nplt.tight_layout()","1ed1ef01":"#listdir =retourne une liste contenant les noms des entr\u00e9es dans le r\u00e9pertoire donn\u00e9 par chemin\nprint(\"PNEUMONIA=\",len(os.listdir(os.path.join(val_dir, 'PNEUMONIA'))))\nprint(\"NORMAL=\",len(os.listdir(os.path.join(val_dir, 'NORMAL'))))","3039aa2d":"#listdir =retourne une liste contenant les noms des entr\u00e9es dans le r\u00e9pertoire donn\u00e9 par chemin\nprint(\"PNEUMONIA=\",len(os.listdir(os.path.join(test_dir, 'PNEUMONIA'))))\nprint(\"NORMAL=\",len(os.listdir(os.path.join(test_dir, 'NORMAL'))))","55b89db3":"#listdir =retourne une liste contenant les noms des entr\u00e9es dans le r\u00e9pertoire donn\u00e9 par chemin\nprint(\"PNEUMONIA=\",len(os.listdir(os.path.join(train_dir, 'PNEUMONIA'))))\nprint(\"NORMAL=\",len(os.listdir(os.path.join(train_dir, 'NORMAL'))))","c52a0833":"#R\u00e9cup\u00e9rer le chemin  \nnormal_cases_dir = train_dir \/ 'NORMAL'\npneumonia_cases_dir = train_dir \/ 'PNEUMONIA'\n\n#Obtenez la liste de toutes les images\nnormal_cases = normal_cases_dir.glob('*.jpeg')\npneumonia_cases = pneumonia_cases_dir.glob('*.jpeg')","b6646306":"#Nous ins\u00e9rerons les donn\u00e9es dans une liste vide x et y\ntrain_data = []\ncount=0\n# Passez en tous les cas normaux\nfor img in normal_cases:\n    train_data.append((img,1,0))","f3023216":"# Passez en tous les cas pneumonie\nfor img in pneumonia_cases:\n    if count <1501 :\n      train_data.append((img,0,1))\n      count = count + 1","e90521f1":"#nom\u00e9e les atribut du tableau train_data\ntrain_data = pd.DataFrame(train_data, columns=['image', 'NORMAL','PNEUMONIA'],index=None)\n\n# Shuffle the data \ntrain_data = train_data.sample(frac=1.).reset_index(drop=True)\n\ntrain_data.head()","0997aa93":"train_data['PNEUMONIA']","441cb7d6":"# conter le nombre data\ncases_count = train_data['NORMAL'].value_counts()\nprint(cases_count)\n\n# Plot the results \nplt.figure(figsize=(10,8))\nsns.barplot(x=cases_count.index, y= cases_count.values)\nplt.title('Number of cases', fontsize=14)\nplt.xlabel('Case type', fontsize=12)\nplt.ylabel('Count', fontsize=12)\nplt.xticks(range(len(cases_count.index)), [ 'Normal(0)','Pneumonia(1)'])\nplt.show()","cb03fd8e":"cases_count","3c00d73a":"#R\u00e9cup\u00e9rer le chemin  \nnormal_cases_dir = test_dir \/ 'NORMAL'\npneumonia_cases_dir = test_dir \/ 'PNEUMONIA'\n\n#Obtenez la liste de toutes les images\nnormal_cases = normal_cases_dir.glob('*.jpeg')\npneumonia_cases = pneumonia_cases_dir.glob('*.jpeg')\n#Nous ins\u00e9rerons les donn\u00e9es dans une liste vide x et y\nval_data = []\n\n#Nous ins\u00e9rerons les donn\u00e9es dans une liste vide x et y\ntest_data = []\ncount = 0\n# Passez en tous les cas normaux(R\u00e9f\u00e9rencier par 0  )\nfor img in normal_cases:\n    if  count < 134 :\n      test_data.append((img,1,0))\n      count = count +1 \n    else :\n      val_data.append((img,1,0))\n\ncount = 0   \n\n# Passez en tous les cas pneumonie(R\u00e9f\u00e9rencier par 1  )\nfor img in pneumonia_cases:\n    if  count < 290 :\n      test_data.append((img,0,1))\n      count = count +1 \n    else :\n      val_data.append((img,0,1))\n\n\ntest_data = pd.DataFrame(test_data, columns=['image', 'NORMAL','PNEUMONIA'],index=None)\n\n#M\u00e9langez les donn\u00e9es\ntest_data = test_data.sample(frac=1.).reset_index(drop=True)\n\n#afficher\ntest_data.head()","ba92456a":"#R\u00e9cup\u00e9rer le chemin  \nnormal_cases_dir = val_dir \/ 'NORMAL'\npneumonia_cases_dir = val_dir \/ 'PNEUMONIA'\n\n#Obtenez la liste de toutes les images\nnormal_cases = normal_cases_dir.glob('*.jpeg')\npneumonia_cases = pneumonia_cases_dir.glob('*.jpeg')\n\n\n# Passez en tous les cas normaux(R\u00e9f\u00e9rencier par 0  )\nfor img in normal_cases:\n    val_data.append((img,1,0))\n\n\n# Passez en tous les cas pneumonie(R\u00e9f\u00e9rencier par 1  )\nfor img in pneumonia_cases:\n    val_data.append((img,0,1))\n\n\nval_data = pd.DataFrame(val_data, columns=['image','NORMAL','PNEUMONIA'],index=None)\n\n#M\u00e9langez les donn\u00e9es\nval_data = val_data.sample(frac=1.).reset_index(drop=True)\n\n#afficher\nval_data.head()","44f79024":"val_data.shape","e90b2db8":"#input de validation\nval_data['image'].shape","7e8b07df":"val_data['NORMAL'].shape","99c20dcd":"# lancer un conteure pour chaque attribut\ncases_count = val_data['NORMAL'].value_counts()\nprint(cases_count)","20be43bd":"cases_count.index","771fbece":"cases_count.values","b8356057":"plt.figure(figsize=(12,8))\n#x = soit 0 soit 1 \n#y = la somme de chaque type\nsns.barplot(x=cases_count.index, y= cases_count.values)\n\nplt.title('nombres des cas de data de validation', fontsize=14)\nplt.xlabel('Case type', fontsize=12)\nplt.ylabel('Count', fontsize=12)\n#renomer les label de x \nplt.xticks(range(len(cases_count.index)), ['Pneumonia(1)','Normal(0)'])\nplt.show()","a6eb61ed":"test_data.shape","57707291":"train_data.shape","45fc96a0":"\ncases_count = val_data['NORMAL'].value_counts()\nprint(cases_count)","176fddb6":"cases_count.index","d06074a5":"cases_count.values","7bd28e70":"plt.figure(figsize=(10,8))\n#x = soit 0 soit 1 \n#y = la somme de chaque type\nsns.barplot(x=cases_count.index, y= cases_count.values)\n\nplt.title('nombres des cas de data de test', fontsize=14)\nplt.xlabel('Case type', fontsize=12)\nplt.ylabel('Count', fontsize=12)\n#renomer les label de x \nplt.xticks(range(len(cases_count.index)), ['Pneumonia(1)','Normal(0)'])\nplt.show()","21587a1e":"#on va prendre quelque exemplaire\npneumonia_samples = (train_data[train_data['PNEUMONIA']==1]['image'].iloc[:5]).tolist()\nnormal_samples = (train_data[train_data['NORMAL']==1]['image'].iloc[:5]).tolist()\n\n#on cree une data de c'est exemple\nsamples = pneumonia_samples + normal_samples\n\n#on affiche\ndef affiche(samples):\n  f, ax = plt.subplots(2,5, figsize=(30,10))\n  for i in range(10):\n      img = imread(samples[i])\n      ax[i\/\/5, i%5].imshow(img, cmap='gray')\n      if i<5:\n          ax[i\/\/5, i%5].set_title(\"Pneumonia\")\n      else:\n          ax[i\/\/5, i%5].set_title(\"Normal\")\n      ax[i\/\/5, i%5].axis('off')\n      ax[i\/\/5, i%5].set_aspect('auto')\n  plt.show()","43ae8d54":"affiche(samples)","fbe00856":"\nfrom keras.applications.vgg16 import VGG16\n#la taille de notre input\ntaille=(224, 224,3)\n#importer le model vgg16\nmodel_vgg16 = VGG16(input_shape =  taille, \n                              include_top = False, weights = 'imagenet')","a37aa9bf":"model_vgg16.summary()","665e598d":"# Freeze the base_model\nmodel_vgg16.trainable = False","fbfb49bf":"model_vgg16.output","88f6fb76":"# ajouter un MaxPooling2D\nx = layers.GlobalMaxPooling2D()(model_vgg16.output)\n# ajouter une couche a  512 et ReLU comme activation\nx = layers.Dense(512, activation='relu')(x)\n# ajouter dropout rate of 0.5\nx = layers.Dropout(0.2)(x)\n# Ajout d\u2019une couche enti\u00e8rement connect\u00e9e avec 256 unit\u00e9s cach\u00e9es et activation ReLU\nx = layers.Dense(256, activation='relu')(x)\n# Ajout d\u2019une couche enti\u00e8rement connect\u00e9e avec 128 unit\u00e9s cach\u00e9es et activation ReLU\nx = layers.Dense(128, activation='relu')(x)\n# Ajouter une couche sigmo\u00efde finale pour la classification\nx = layers.Dense(2, activation='softmax')(x)\n\n# Configurer et compiler le mod\u00e8le\nmodel = Model(model_vgg16.input, x)\n","038cca2b":"model.summary()","330c7201":"train_data.head()","22f35ec5":"x_train_data = []\ny_train_data = []\n\nfor img in train_data['NORMAL']:\n    if img == 1:\n      y_train_data.append((1,0))\n    else:\n      y_train_data.append((0,1))\n\nfor img in train_data['image']:\n    img = cv2.imread(str(img))\n    img = cv2.resize(img, (224,224))\n    img = img.astype(np.float32)\/255\n    x_train_data.append(img)\n","46b154d1":"x_train_data=np.array(x_train_data)\ny_train_data=np.array(y_train_data)","6b588594":"x_train_data.shape","0cf8b496":"y_train_data.shape","f006070c":"x_val_data = []\ny_val_data = []\n\nfor img in val_data['NORMAL']:\n    if img == 1:\n      y_val_data.append((1,0))\n    else:\n      y_val_data.append((0,1))\n\nfor img in val_data['image']:\n    img = cv2.imread(str(img))\n    img = cv2.resize(img, (224,224))\n    img = img.astype(np.float32)\/255\n    x_val_data.append(img)\n\n\n","afd7cf7b":"x_val_data=np.array(x_val_data)\ny_val_data=np.array(y_val_data)","52415fd1":"y_val_data.shape","0c4f7f37":"x_val_data.shape","7a0df5ed":"x_test_data = []\ny_test_data = []\n\nfor img in test_data['NORMAL']:\n    if img == 1:\n      y_test_data.append((1,0))\n    else:\n      y_test_data.append((0,1))\n\nfor img in test_data['image']:\n    img = cv2.imread(str(img))\n    img = cv2.resize(img, (224,224))\n    img = img.astype(np.float32)\/255\n    x_test_data.append(img)\n\nx_test_data=np.array(x_val_data)\ny_test_data=np.array(y_val_data)","a6de0b0f":"x_test_data.shape","87b770ec":"# With data augmentation to prevent overfitting and handling the imbalance in dataset\n\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range = 30,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.2, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip = True,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\ndatagen.fit(x_train_data)\n#datagen.fit(y_train_data)\ndatagen.fit(x_val_data)\n#datagen.fit(y_val_data)","09cddd32":"#datagen.fit(x_train_data)","95a7d316":"callbacks1 = [\n    EarlyStopping(monitor='val_loss', patience=6, mode='min', verbose=1),\n    ReduceLROnPlateau(monitor = 'val_loss', factor = 0.1, patience = 3, min_lr=0.00001, verbose=1, mode='min'),\n    ModelCheckpoint(filepath='best_model.h5', monitor='val_loss', verbose=1, save_best_only=True, mode='min'),\n    ]\n","a5e52a6f":"model.compile(loss='categorical_crossentropy',\n              optimizer='Adam',\n              metrics=['accuracy'])","d26fa05b":"import time \nstart = time.time()\nhistory_vgg16 = model.fit(datagen.flow(x_train_data,y_train_data, batch_size = 124) ,epochs = 12 , validation_data = datagen.flow(x_val_data, y_val_data ,batch_size = 64 ) ,callbacks = [callbacks1])\nstop = time.time()","5c4b8fe8":"print(f\"Training time: {stop - start}s\")","07cb830b":"print(\"Loss of the model is - \" , model.evaluate(x_test_data,y_test_data)[0])\nprint(\"Accuracy of the model is - \" , model.evaluate(x_test_data,y_test_data)[1]*100 , \"%\")","c67cbcaa":"Chacun des r\u00e9pertoires contient deux sous-r\u00e9pertoires:\n\n\n*   **PNEUMONIE**: Ce r\u00e9pertoire contient les \u00e9chantillons qui sont les cas de pneumonie.\n*   **NORMAL**: Ce sont les \u00e9chantillons qui d\u00e9crivent le cas normal (pas de pneumonie).\n","adad5856":"# VGG16 Model","bbcbcbb6":"### cas pneumonia","da9d5df9":"### Pr\u00e9paration des donn\u00e9es de test","47dbef22":"## visualisation","71511dae":"**trainement**","176d1e62":"### visualisation data","9d9ef715":"## construction du modele","d9513072":"### cas normal","87a69a4d":"alors aucune valeur manquante","18340156":"## Pr\u00e9paration des donn\u00e9es","f48c8e35":"**chemin**","23cdadd8":"Comme vous pouvez le voir, les donn\u00e9es sont tr\u00e8s d\u00e9s\u00e9quilibr\u00e9es. Nous avons presque trois cas de pneumonie ici par rapport aux cas normaux. Cette situation est tout \u00e0 fait normale en ce qui concerne les donn\u00e9es m\u00e9dicales. Les donn\u00e9es seront toujours d\u00e9s\u00e9quilibr\u00e9es. soit il y aura trop de cas normaux, soit il y aura trop de cas avec la maladie.","75c35587":"**test**","62e0906e":"# data","8e2a4bd4":"### Pr\u00e9paration des donn\u00e9es de validation","703e12c5":"**validation**","325b296e":"## gestion de data","5543c73f":"## Data Augmentation","3d6925bc":"## c'est quoi la **pneumonie**?\nLa pneumonie est une infection pulmonaire qui cause de l\u2019inflammation et des dommages aux tissus pulmonaires. Les poumons sont compos\u00e9s de passages (bronches) \u00e0 travers lesquels l\u2019air circule et de petits sacs (alv\u00e9oles) o\u00f9 l\u2019\u00e9change de gaz se produit.<br\/>\nChez une personne en bonne sant\u00e9, les alv\u00e9oles se remplissent d\u2019air pendant la respiration; cependant, chez les personnes atteintes de pneumonie, les alv\u00e9oles sont d\u00e9j\u00e0 remplies de pus et de liquide qui affecte les \u00e9changes gazeux.\n","2aa4415e":"### Pr\u00e9paration des donn\u00e9es de trainement\n\n\n","b6d27b9c":"# Pneumonia","1c244a75":"## Types de **pneumonie**\n**La pneumonie peut \u00eatre class\u00e9e en deux groupes selon la pr\u00e9sentation clinique :**\nPneumonie d\u2019origine communautaire (CAP). La pneumonie communautaire se caract\u00e9rise par une apparition clinique rapide, une forte fi\u00e8vre, des douleurs d\u2019un c\u00f4t\u00e9 ou des douleurs abdominales transitoires, une respiration rapide (tachypnoea), une toux et un flegme purulent ou brun\u00e2tre. Un exemple de ce type commun de pr\u00e9sentation est la pneumonie induite par Streptococcus pneumoniae (pneumocoque), qui est consid\u00e9r\u00e9 comme le principal micro-organisme causant la pneumonie dans le monde entier.<br\/>\nPneumonie contract\u00e9e dans la communaut\u00e9 avec une pr\u00e9sentation clinique atypique. Elle se caract\u00e9rise par un d\u00e9but moins aigu, une faible fi\u00e8vre, une toux \u00e0 peine productive (s\u00e8che), de la diarrh\u00e9e et\/ou des vomissements. Les pneumonies caus\u00e9es par des bact\u00e9ries intracellulaires, par exemple Mycoplasma pneumoniae ou Legionella pneumophila, sont connues comme des pneumonies atypiques en raison de leur pr\u00e9sentation inhabituelle.\n"}}