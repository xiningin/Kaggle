{"cell_type":{"cf85872c":"code","9804fbc8":"code","2c073fed":"code","80807634":"code","d5100d51":"code","ec432002":"code","13614bee":"code","b0bf7935":"code","5dd33347":"code","d557ac90":"code","a65b8c7c":"code","0707ed08":"markdown","89d15954":"markdown"},"source":{"cf85872c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\nfrom sklearn.metrics import confusion_matrix,accuracy_score\nfrom sklearn.model_selection import train_test_split\n\nimport matplotlib\nimport matplotlib.pyplot as plt","9804fbc8":"# Utils\ndef print_metrics(y_train,y_pred):\n    conf_mx = confusion_matrix(y_train,y_pred)\n    print(conf_mx)\n    print (\"------------------------------------------\")\n    print (\" Accuracy    : \", accuracy_score(y_train,y_pred))\n    print (\"------------------------------------------\")\n\ndef shift_image(X, dx, dy,length=28):\n    X=X.reshape(length,length)\n    X = np.roll(X, dy, axis=0)#horizontal\n    X = np.roll(X, dx, axis=1)#vertical\n    return X.reshape([-1])\n\ndef print_image(flat_image,length=28):\n    plt.imshow(flat_image.reshape(length, length), cmap = matplotlib.cm.binary,interpolation=\"nearest\")\n    plt.axis(\"off\")\n    plt.show()  \n","2c073fed":"# Load the data\ntrain = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\").values\ny = train[\"label\"].values\nX = train.drop(labels = [\"label\"],axis = 1).values\nprint(\"Value Counts :\")\nprint(train[\"label\"].value_counts())\ndel train \n\n# we want value between [0,1]\nX = X \/ 255.0\ntest = test \/ 255.0\n# print Dimension\nprint(\"dim(X)    = \",X.shape)\nprint(\"dim(y)    = \",y.shape)\nprint(\"dim(test) = \",test.shape)","80807634":"DATA_AUGMENTED_WITH_SHIFT = False","d5100d51":"if DATA_AUGMENTED_WITH_SHIFT:\n    X_augmented = [image for image in X]\n    y_augmented = [label for label in y]\n\n    for dx, dy in ((1,1),(-1,-1),(-1,1),(1,-1)):\n        for image, label in zip(X, y):\n            X_augmented.append(shift_image(image, dx, dy))\n            y_augmented.append(label)\n\n        \n    X_augmented = np.array(X_augmented)\n    y_augmented = np.array(y_augmented)\n    print(\"   X_augmented Dimension : \",X_augmented.shape)\n    shuffle_idx = np.random.permutation(len(X_augmented))\n    X_augmented = X_augmented[shuffle_idx]\n    y_augmented = y_augmented[shuffle_idx]\n\n    X_train = X_augmented.reshape(-1,28,28,1)\n    test = test.reshape(-1,28,28,1)\n    Y_train = to_categorical(y_augmented, num_classes = 10)\nelse:\n    X_train = X.reshape(-1,28,28,1)\n    test = test.reshape(-1,28,28,1)\n    Y_train = to_categorical(y, num_classes = 10)\n\nprint(\"dim(X_train)    = \",X_train.shape)\nprint(\"dim(Y_train)    = \",Y_train.shape)\nprint(\"dim(test)       = \",test.shape)","ec432002":"X_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size=0.1, random_state=42)\n# define data preparation\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n# fit parameters from data\ndatagen.fit(X_train)","13614bee":"model = Sequential()\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","b0bf7935":"optimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)\n\n# Compile the model\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])\n\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)\n","5dd33347":"epochs = 30\nbatch_size = 71\n\nmodel.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_val,Y_val),\n                              verbose = 1, steps_per_epoch=X_train.shape[0] \/\/ batch_size\n                              , callbacks=[learning_rate_reduction])\n","d557ac90":"# Predict the values from the validation dataset\nY_pred = model.predict(X_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(Y_val,axis = 1) \n# compute the confusion matrix\n#confusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \nprint_metrics(Y_true, Y_pred_classes)","a65b8c7c":"# predict results\nresults = model.predict(test)\nresults = np.argmax(results,axis = 1)\nresults = pd.Series(results,name=\"Label\")\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\nsubmission.to_csv(\"submission.csv\",index=False)","0707ed08":"# Tool functions","89d15954":"# Load the data"}}