{"cell_type":{"b11f5687":"code","c100ceee":"code","0d2d0002":"code","9b071598":"code","956ed430":"code","e636d1ed":"code","e44b42c3":"code","1ddd2100":"code","dfdfe652":"code","231c0efc":"code","64c36c37":"code","13100932":"code","16d32d05":"code","2c9738f6":"code","f9e41b07":"code","2dd3774f":"code","9e179d21":"code","591342ea":"code","fc6fd6ca":"code","092894aa":"code","5a9d8ddf":"code","b14163e4":"code","3c90a6ca":"code","500be778":"code","eae724ad":"code","5d00a8ed":"code","fa269a5f":"code","44ef3942":"code","909c6921":"code","6f0f84c8":"code","1af95d3f":"code","7d50a705":"code","09e2b674":"code","3594c89c":"code","0d381b55":"code","61a40e2e":"code","36c8b667":"code","21cd49d5":"code","75172d71":"code","3f935529":"code","a6dc063d":"code","95b17bde":"code","615db9a7":"code","76b1b240":"code","1b99ac13":"code","b9dde15f":"code","b3686a87":"code","f6a32f3a":"code","41078c7e":"code","497a98f5":"code","5df43b55":"code","b9e4bc9a":"code","294c49ab":"code","429f5c62":"code","fa85a7ce":"code","4a8f874f":"code","1b0e9c22":"code","f35ae20f":"code","bffa7b95":"code","8b4a88a4":"code","c60c4b4a":"code","59a01f77":"code","b4e9d744":"code","425126c7":"code","a0ec6ce9":"code","72b930fc":"code","2250135b":"code","39379a30":"code","c86a4f5c":"code","15109343":"code","a46453ec":"code","40240257":"code","21058fdf":"code","aa2e3065":"code","05eeb3b6":"code","2cf830ce":"code","1dbb7be9":"code","c6910983":"code","191728e7":"code","6f6f5b09":"code","cc909e9c":"code","869207f4":"code","2ff16723":"code","8776f920":"code","6c250cf2":"code","8cba789b":"markdown","2a6615ad":"markdown","c5f6fbe7":"markdown","fc3993d5":"markdown","a2ff74bb":"markdown","0c9f906f":"markdown","ce7a1901":"markdown","6baf0522":"markdown","ca995836":"markdown","e9079b5d":"markdown","b3bbc13c":"markdown","198710f5":"markdown","be9f2035":"markdown","a48dfaef":"markdown","85f714dd":"markdown","d00582bd":"markdown","ee16eb1d":"markdown","68c18fe9":"markdown","7a983af8":"markdown","79f209c0":"markdown","a468e620":"markdown","1b0435ef":"markdown","279a4efe":"markdown","051fae35":"markdown","e4991a51":"markdown","1149ba2f":"markdown","f4616adc":"markdown","5a14bc89":"markdown","ea83e8f9":"markdown","5d2729b5":"markdown","44bb557b":"markdown","5d38a8fb":"markdown","26b5db36":"markdown","c2f52021":"markdown","6460bcab":"markdown","51325da2":"markdown","9e8aeba6":"markdown","6e84f70d":"markdown","b754e8f9":"markdown","3a40aaa3":"markdown","b29ed499":"markdown","0c651230":"markdown","4587cd37":"markdown","173050a4":"markdown","44e55aad":"markdown","f3fe0ffb":"markdown","f47e98ae":"markdown","d452fa1d":"markdown","c7b32c00":"markdown","e0010678":"markdown","7420ee0b":"markdown","3eda75bf":"markdown","8874ca61":"markdown","d8d06573":"markdown","29a69c7e":"markdown","c2ee8b95":"markdown","f5da8b9f":"markdown","3f5f8bca":"markdown","8feacfa7":"markdown","d1a2fe00":"markdown","9a5bc7e7":"markdown","3b6e0566":"markdown","914a316a":"markdown","e8a17a83":"markdown","10643ef1":"markdown","e516e302":"markdown","4598062c":"markdown","3b6d2048":"markdown","f1596c1c":"markdown","755e8b02":"markdown","4f5faa48":"markdown","798a382d":"markdown","7fc35ff7":"markdown","5d73cda0":"markdown","eec7a5b5":"markdown","db793e98":"markdown","3d409f14":"markdown","d6b7fd77":"markdown","05ff64a6":"markdown","62842fa8":"markdown","ee36eee1":"markdown","0f000d02":"markdown","a6e91975":"markdown","cd98c403":"markdown","c0805c31":"markdown","ed9b5b36":"markdown","787b0d38":"markdown","461f3e4e":"markdown","005b17d6":"markdown","c44ac1b3":"markdown","00e854c3":"markdown","adf2a3b6":"markdown","48731958":"markdown","46d8b146":"markdown","d71abd15":"markdown","d0f8d527":"markdown","3737888b":"markdown"},"source":{"b11f5687":"#import libraries for pre-processing\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nimport pandas as pd\nfrom pandas.plotting import scatter_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport numpy as np\n\nfrom dateutil.parser import parse\nfrom datetime import datetime\nfrom scipy.stats import norm\n\n# import all what you need for machine learning\nimport sklearn\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import RobustScaler","c100ceee":"#load data\n#housing= pd.read_csv('C:\/Users\/EAMC\/Desktop\/melbourne-housing-market\/Melbourne_housing_FULL.csv', sep=',')\nhousing= pd.read_csv('..\/input\/Melbourne_housing_FULL.csv')","0d2d0002":"# visualize the first two rows for every column\nhousing.head()","9b071598":"#Check the type of variables\nhousing.info()","956ed430":"#change Postcode\nhousing['Postcode']= housing['Postcode'].astype('object')\n#change Bathroom and car to integer. Before the transformation I need to convert all the missing values to 0. \n#lastly, change Propertycount to category\nhousing['Propertycount']= housing['Propertycount'].astype('object')","e636d1ed":"sns.lmplot(data= housing, x='Bedroom2', y='Rooms')","e44b42c3":"#drop Bedroom2\nhousing= housing.drop(['Bedroom2'], axis=1)","1ddd2100":"#check basic statistics\nhousing.describe()","dfdfe652":"# check number of bathrooms\nhousing['Bathroom'].value_counts()","231c0efc":"housing.loc[housing.Bathroom>7].head()","64c36c37":"#check building area \nhousing.loc[housing.BuildingArea<1].head()","13100932":"housing['BuildingArea'].loc[housing.BuildingArea<1].count()","16d32d05":"#use the unary operator ~ to delete the rows\nhousing = housing[~(housing['BuildingArea'] < 1)]  \n#check the deletion\nhousing['BuildingArea'].loc[housing.BuildingArea<1].count()","2c9738f6":"#it is important now to reset the index, otherwise I will have some missing rows in my dataframe, which may be troublesome later.\nhousing = housing.reset_index()","f9e41b07":"sns.boxplot(data = housing, y = 'BuildingArea')","2dd3774f":"housing.loc[housing.BuildingArea>40000]","9e179d21":"#replace outlier building area\nhousing['BuildingArea'].replace(44515.0, 445, inplace=True)","591342ea":"# check YearBuilt > 2018\nprint(housing['YearBuilt'].loc[housing.YearBuilt>2018])\n#replace 2106 with 2016 and 2019 with 2018\nhousing['YearBuilt'].replace([2106, 2019], [2016, 2018], inplace=True)","fc6fd6ca":"# check missing data\nhousing.isnull().sum()","092894aa":"# We will save the \"cured\" data columns in variables\n#first with the mean\npriceWithMean = housing['Price'].fillna(housing['Price'].mean())\nBAWithMean = housing['BuildingArea'].fillna(housing['BuildingArea'].mean())\n\n#now with the median\npriceMedian = housing['Price'].fillna(housing['Price'].median())\nBAMedian = housing['BuildingArea'].fillna(housing['BuildingArea'].median())","5a9d8ddf":"missVIDsJoint = housing['Price'].isnull() | housing['BuildingArea'].isnull()\n# missVIDsJoint now has a True for items that are missing an Age or a Fare value","b14163e4":"# create a dictionary to indicate different colors, missing values will be orange\ncolorChoiceDict = {True: (1.0, 0.55, 0.0, 1.0), False: (0.11, 0.65, 0.72, 0.1)}\n\n# create a column with color values using list comprehension\ncolorCol = [colorChoiceDict[val] for val in missVIDsJoint]","3c90a6ca":"plt.style.use('ggplot')\n\nf, (ax1, ax2) = plt.subplots(1, 2, sharey=True, figsize=(19, 8))\nax1.scatter(BAWithMean, priceWithMean, c = colorCol, linewidth=0)\nax1.set_title('MV with mean')\nax1.set_xlabel('Building Area')\nax1.set_ylabel('Price')\nax2.scatter(BAMedian, priceMedian, c = colorCol, linewidth=0)\nax2.set_title('MV with median')\nax2.set_xlabel('Building Area')\nax2.set_ylabel('Price')","500be778":"housing['Price']= housing['Price'].fillna(housing['Price'].median())\nhousing['Landsize']= housing['Landsize'].fillna(housing['Landsize'].median())\n#Similarly, fill the only missing value of  all the other numeric values\nhousing['Distance'] = housing['Distance'].fillna(housing['Distance'].median())\nhousing['BuildingArea']= housing['BuildingArea'].fillna(housing['BuildingArea'].median())\nhousing['Lattitude']= housing['Lattitude'].fillna(housing['Lattitude'].median())\nhousing['Longtitude']= housing['Longtitude'].fillna(housing['Longtitude'].median())\nhousing['YearBuilt']= housing['YearBuilt'].fillna(housing['YearBuilt'].median())\nhousing.isnull().sum()","eae724ad":"housing['Bathroom']= housing['Bathroom'].fillna(housing['Bathroom'].mode()[0])\nhousing['Car']= housing['Car'].fillna(housing['Car'].mode()[0])\nhousing['CouncilArea']= housing['CouncilArea'].fillna(housing['CouncilArea'].mode()[0])\nhousing['Regionname']= housing['Regionname'].fillna(housing['Regionname'].mode()[0])\nhousing['Propertycount']= housing['Propertycount'].fillna(housing['Propertycount'].mode()[0])\nhousing['Postcode']= housing['Postcode'].fillna(housing['Postcode'].mode()[0])\nhousing.isnull().sum()","5d00a8ed":"housing['Bathroom'] = pd.to_numeric(housing['Bathroom']).round(0).astype(int)\nhousing['Car'] = pd.to_numeric(housing['Car']).round(0).astype(int)","fa269a5f":"# create additional columns filled with 0 values\nhousing[\"isOutlierPrice\"] = 0 \nhousing[\"isOutlierDistance\"] = 0\n\n# save the mean and standard deviation in variables\nmeanPrice = housing['Price'].mean()\nstdDevPrice = housing['Price'].std()\n\nmeanDistance = housing['Distance'].mean()\nstdDevDistance = housing['Distance'].std()\n\n#mark outliers as \nhousing['isOutlierPrice'] = np.where(abs(housing['Price'] - meanPrice) > 5 * stdDevPrice, 1, 0)\nhousing['isOutlierDistance'] = np.where(abs(housing['Distance'] - meanDistance) > 5 * stdDevDistance, 1, 0)","44ef3942":"#create a function to compute the percentage of missing values\ndef percent(nom, denom):\n    res= (nom*100)\/denom\n    print(\"%.3f%%\" % round(res,3))\n\n#percentage of MV for Price\npercent(housing[\"isOutlierPrice\"].value_counts()[1], housing[\"isOutlierPrice\"].value_counts()[0])   ","909c6921":"#percentage of MV for Landsize\npercent(housing[\"isOutlierDistance\"].value_counts()[1], housing[\"isOutlierDistance\"].value_counts()[0])   ","6f0f84c8":"# This part helps us to generate a color array with different colors for the 1D outliers we compute\n\n# first create an empty list\ncolorColumn = []\n# we make use of the HEX color codes to use nicely distinguisable colors\nfor i in range(len(housing)):\n    if housing[\"isOutlierPrice\"][i]== 1:\n        colorColumn.append(\"#D06B36\") # orange color\n    elif housing[\"isOutlierDistance\"][i] == 1:\n        colorColumn.append(\"#40A0C9\") # a blueish color\n    else:\n        colorColumn.append(\"#B9BCC0\") # gray\n\nplt.figure(figsize=(15,10))\nplt.xlabel('Price')\nplt.suptitle('Price vs. Distance')\nplt.ylabel('Distance')\nplt.scatter(housing.Distance, housing.Price , c = colorColumn, s = 50, linewidth=0)","1af95d3f":"#take just the price outlier\nhousing.iloc[:,:19][housing.Price > 11000000]","7d50a705":"# We now get a part of the data frame as a numpy matrix to use in scipy\nhousing.dropna()\ncolumnValues = housing.as_matrix([\"Price\", \"Distance\"])\n\n# In order to generate a \"mean vector\", we use the mean values already computed above.\n# Notice that we make use of the reshape() function to get the mean vector in a compatible shape\n# as the data values.\nmeanVector = np.asarray([meanPrice, meanDistance]).reshape(1,2)\n\n# We make us of the scipy function which does the computations itself.\n# Alternatively, one can provide a covariance matrix that is computed outside as a parameter.\n# In cases where robustness of the covariance matrix is the issue, this can be a good option.\n\n# first import the spatial subpackage from scipy\nfrom scipy import spatial\nmahalanobisDistances = spatial.distance.cdist(columnValues, meanVector, 'mahalanobis')[:,0]\n\n# We create a new figure where we use a color mapping and use the computed mahalanobis distances \n# as the mapping value\nplt.figure(figsize=(15,10))\nplt.xlabel('Distance')\nplt.suptitle('Price & Distance')\nplt.ylabel('Price')\nplt.scatter(housing.Distance, housing.Price , c = mahalanobisDistances, cmap = plt.cm.Greens, s = 50, linewidth=0)","09e2b674":"housing['houseAge'] = 2018-housing['YearBuilt']","3594c89c":"#create the new column data restructuring the original Date column with pd.to_datetime\nhousing['data'] = pd.to_datetime(housing['Date'])","0d381b55":"# calculate day of year\nhousing['doy'] = housing['data'].dt.dayofyear\n# Create year\nhousing['Year'] = housing['data'].dt.year\n\n#to divide by season it's better to use the day of the year instead of the months\nspring = range(80, 172)\nsummer = range(172, 264)\nfall = range(264, 355)\n# winter = everything else\n\ndaje = []\nfor i in housing['doy']:\n    if i in spring:\n        season = 'spring'\n    elif i in summer:\n        season = 'summer'\n    elif i in fall:\n        season = 'fall'\n    else:\n        season = 'winter'\n    daje.append(season)   \n\n#add the resulting column to the dataframe (after transforming it as a Series)\nhousing['season']= pd.Series(daje)","61a40e2e":"housing.info()","36c8b667":"train_set, test_set = train_test_split(housing, test_size=0.2, random_state=42)\nhousing = train_set.copy()","21cd49d5":"#create my palette\nmyPal = [\"#1E90FF\", \"#FFD700\", \"#00EEEE\", \"#668B8B\", \"#EAEAEA\", \"#FF3030\"]\nsns.set_palette(myPal)\nsns.palplot(sns.color_palette())","75172d71":"l= ['Bathroom', 'Rooms', 'Car', 'season', 'Year']\nfor i in l:\n    plt.figure()\n    sns.countplot(x=i, data=housing)","3f935529":"l= [housing['Price'], housing['Distance'], housing['BuildingArea'], housing['houseAge'], housing['Propertycount']]\nfor i in l:\n    plt.figure(figsize=(11,6))\n    sns.distplot(i, fit=norm, kde=False)","a6dc063d":"plt.figure(figsize=(15,10))\nsns.distplot(housing['BuildingArea'], fit=norm, bins=120, kde=False)\nplt.xlim(0,1000)","95b17bde":"# Suplots of categorical features v price\nsns.set_style('darkgrid')\nf, axes = plt.subplots(2,2, figsize = (15,15))\n\n# Plot [0,0]\nsns.boxplot(data = housing, x = 'season', y = 'Price', ax = axes[0, 0])\naxes[0,0].set_xlabel('Season')\naxes[0,0].set_ylabel('Price')\naxes[0,0].set_title('Season & Price')\n\n# Plot [0,1]\nsns.violinplot(data = housing, x = 'Year', y = 'Price', ax = axes[0, 1])\naxes[0,1].set_xlabel('Year')\naxes[0,1].set_ylabel('Price')\naxes[0,1].set_title('Year & Price')\n\n# Plot [1,0]\nsns.boxplot(x = 'Type', y = 'Price', data = housing, ax = axes[1,0])\naxes[1,0].set_xlabel('Type')\naxes[1,0].set_ylabel('Price')\naxes[1,0].set_title('Type & Price')\n\n# Plot [1,1]\nsns.boxplot(x = 'Rooms', y = 'Price', data = housing, ax = axes[1,1])\naxes[1,1].set_xlabel('Rooms')\naxes[1,1].set_ylabel('Price')\naxes[1,1].set_title('Rooms & Price')","615db9a7":"#use shape to count the number of rows of the database grouped by day using a pivot table.\nhousing.pivot_table('Price', index='data', aggfunc='sum').shape","76b1b240":"import calendar\n# create new column storing the month of each operation\nhousing['month'] = housing['data'].dt.month\n#use group by (alternative to pivot_table) to have the total value of houses sold per month\nby_month= housing.groupby('month')['Price'].sum()\n#plot figure\nplt.figure(figsize=(15,10))\nplt.plot(by_month, color=\"red\")\nplt.xlabel('Month')\nplt.suptitle('Price by months')\nplt.ylabel('Price')\nplt.xticks(np.arange(13), calendar.month_name[0:13], rotation=20)","1b99ac13":"#create index month-year\nhousing['month_year'] = housing['data'].dt.to_period('M')\n#use groupby to compute the price for each available month, then store the result in a dataframe\nby_year_month= pd.Series.to_frame(housing.groupby('month_year')['Price'].sum())\n#draw graph\nfig, ax = plt.subplots(figsize=(15,10))\nby_year_month.plot(ax=ax, xticks=by_year_month.index, rot=45)\nax.set_xticklabels(by_year_month.index)","b9dde15f":"#select only the data we are interested in\nattributes= ['Price', 'Distance', 'Bathroom', 'Rooms', 'Car', 'Landsize', 'BuildingArea', 'houseAge', 'Lattitude', 'Longtitude', \n             'Year', 'Propertycount']\nh= housing[attributes]\n\n#whitegrid\nsns.set_style('whitegrid')\n#compute correlation matrix...\ncorr_matrix=h.corr(method='spearman')\n#...and show it with a heatmap\n#first define the dimension\nplt.figure(figsize=(20,15))\n\n# Generate a mask for the upper triangle\nmask = np.zeros_like(corr_matrix, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr_matrix, mask=mask, cmap=cmap, center=0, vmax=1, vmin =-1, annot=True,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","b3686a87":"# Scatterplot\nf, axes = plt.subplots(figsize = (15,10))\nplt.subplot(221)\nsns.regplot(data= housing, x='BuildingArea', y='Price')\nplt.subplot(222)\nsns.regplot(data= housing, x='houseAge', y='Price')\nplt.subplot(223)\nsns.regplot(data= housing, x='Rooms', y='Price')\nplt.subplot(224)\nsns.regplot(data= housing, x='Distance', y='Price')","f6a32f3a":"import warnings\nwith warnings.catch_warnings():\n    warnings.simplefilter(\"ignore\")\n    # Price and distance\n    sns.jointplot(y='Price', x='Rooms', data=housing, kind='hex', gridsize=15)","41078c7e":"sns.lmplot(data= housing, x='houseAge', y= 'Price', hue= 'Type')","497a98f5":"sns.lmplot(data= housing, x='BuildingArea', y= 'Price', hue='Type')","5df43b55":"sns.lmplot(data= housing, x='Rooms', y= 'Price', hue='Type')","b9e4bc9a":"housing.plot(kind=\"scatter\", x=\"Longtitude\", y=\"Lattitude\", alpha=0.4,\nc=housing.Price, cmap=plt.get_cmap(\"jet\"), label= 'Price by location', figsize=(15,10)) \nplt.ylabel(\"Latitude\", fontsize=14)\n\nplt.legend(fontsize=14)","294c49ab":"housing['Price_cut']= housing['Price'].loc[housing.Price<3500000]","429f5c62":"f, axes = plt.subplots(1,2, figsize = (12,7))\n# Plot [0,0] full price\nhousing['Price'].hist(ax = axes[0])\naxes[0].set_title('BEFORE CUT')\naxes[0].set_xlabel('Price')\n# Plot [0,1] price cut\nhousing['Price_cut'].hist(ax = axes[1])\naxes[1].set_xlabel('Price')\naxes[1].set_title('AFTER CUT')","fa85a7ce":"housing.plot(kind=\"scatter\", x=\"Longtitude\", y=\"Lattitude\", alpha=0.4,\nc=housing.Price_cut, cmap=plt.get_cmap(\"jet\"), label= 'Price by location', figsize=(15,10)) \nplt.ylabel(\"Latitude\", fontsize=14)\n\nplt.legend(fontsize=14)","4a8f874f":"housing.info()","1b0e9c22":"#dummy variable\nhD= pd.get_dummies(housing, columns= ['Type', 'Regionname', 'season'])\n#drop useless variables\nhD= hD.drop(['Suburb', 'Address', 'Method', 'SellerG', 'Date', 'Postcode', 'CouncilArea', 'isOutlierPrice', 'isOutlierDistance',\n            'YearBuilt', 'data', 'doy', 'month', 'month_year', 'Price_cut'], axis=1)\n#check variables\nhD.info()","f35ae20f":"#create x and y variables\nX = hD.drop(\"Price\", axis=1)\nY = hD[\"Price\"].copy()\n#transform to array size\n#feature scaling\nscaler = RobustScaler()\nhD= scaler.fit_transform(hD.astype(np.float64))","bffa7b95":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(X,Y, test_size = .20, random_state= 42)","8b4a88a4":"#fit decision tree\ntree = DecisionTreeRegressor()\ntree.fit(x_train, y_train)\n#fit random forest\nforest = RandomForestRegressor(n_jobs=-1)\nforest.fit(x_train, y_train)\n#fit regression\nlin_reg = LinearRegression(n_jobs=-1)\nlin_reg.fit(x_train, y_train)","c60c4b4a":"models= [('lin_reg', lin_reg), ('random forest', forest), ('decision tree', tree)]\nfrom sklearn.metrics import mean_squared_error\nfor i, model in models:    \n    predictions = model.predict(x_train)\n    MSE = mean_squared_error(y_train, predictions)\n    RMSE = np.sqrt(MSE)\n    msg = \"%s = %.2f\" % (i, round(RMSE, 2))\n    print('RMSE of', msg)","59a01f77":"for i, model in models:\n    # Make predictions on train data\n    predictions = model.predict(x_train)\n    # Performance metrics\n    errors = abs(predictions - y_train)\n    # Calculate mean absolute percentage error (MAPE)\n    mape = np.mean(100 * (errors \/ y_train))\n    # Calculate and display accuracy\n    accuracy = 100 - mape    \n    #print result\n    msg = \"%s= %.2f\"% (i, round(accuracy, 2))\n    print('Accuracy of', msg,'%')","b4e9d744":"models= [('lin_reg', lin_reg), ('forest', forest), ('dt', tree)]\nscoring = ['neg_mean_squared_error', 'neg_mean_absolute_error', 'r2']\n\n#for each model I want to test three different scoring metrics. Therefore, results[0] will be lin_reg x MSE, \n# results[1] lin_reg x MSE and so on until results [8], where we stored dt x r2\n\nresults= []\nmetric= []\nfor name, model in models:\n    for i in scoring:\n        scores = cross_validate(model, x_train, y_train, scoring=i, cv=10, return_train_score=True)\n        results.append(scores)","425126c7":"#this is an example of the stored results\nresults[8]","a0ec6ce9":"#THIS IS FOR Linear regression\n#if you change signa and square the Mean Square Error you get the RMSE, which is the most common metric to accuracy\nLR_RMSE_mean = np.sqrt(-results[0]['test_score'].mean())\nLR_RMSE_std= results[0]['test_score'].std()\n# note that also here I changed the sign, as the result is originally a negative number for ease of computation\nLR_MAE_mean = -results[1]['test_score'].mean()\nLR_MAE_std= results[1]['test_score'].std()\nLR_r2_mean = results[2]['test_score'].mean()\nLR_r2_std = results[2]['test_score'].std()\n\n#THIS IS FOR RF\nRF_RMSE_mean = np.sqrt(-results[3]['test_score'].mean())\nRF_RMSE_std= results[3]['test_score'].std()\nRF_MAE_mean = -results[4]['test_score'].mean()\nRF_MAE_std= results[4]['test_score'].std()\nRF_r2_mean = results[5]['test_score'].mean()\nRF_r2_std = results[5]['test_score'].std()\n\n#THIS IS FOR DT\nDT_RMSE_mean = np.sqrt(-results[6]['test_score'].mean())\nDT_RMSE_std= results[6]['test_score'].std()\nDT_MAE_mean = -results[7]['test_score'].mean()\nDT_MAE_std= results[7]['test_score'].std()\nDT_r2_mean = results[8]['test_score'].mean()\nDT_r2_std = results[8]['test_score'].std()","72b930fc":"modelDF = pd.DataFrame({\n    'Model'       : ['Linear Regression', 'Random Forest', 'Decision Trees'],\n    'RMSE_mean'    : [LR_RMSE_mean, RF_RMSE_mean, DT_RMSE_mean],\n    'RMSE_std'    : [LR_RMSE_std, RF_RMSE_std, DT_RMSE_std],\n    'MAE_mean'   : [LR_MAE_mean, RF_MAE_mean, DT_MAE_mean],\n    'MAE_std'   : [LR_MAE_std, RF_MAE_std, DT_MAE_std],\n    'r2_mean'      : [LR_r2_mean, RF_r2_mean, DT_r2_mean],\n    'r2_std'      : [LR_r2_std, RF_r2_std, DT_r2_std],\n    }, columns = ['Model', 'RMSE_mean', 'RMSE_std', 'MAE_mean', 'MAE_std', 'r2_mean', 'r2_std'])\n\nmodelDF.sort_values(by='r2_mean', ascending=False)","2250135b":"sns.factorplot(x= 'Model', y= 'RMSE_mean', data= modelDF, kind='bar', legend='True')","39379a30":"from sklearn.model_selection import GridSearchCV\n\nparam_grid = [\n{'n_estimators': [10, 25], 'max_features': [5, 10], \n 'max_depth': [10, 50, None], 'bootstrap': [True, False]}\n]\n\ngrid_search_forest = GridSearchCV(forest, param_grid, cv=10, scoring='neg_mean_squared_error')\ngrid_search_forest.fit(x_train, y_train)","c86a4f5c":"#now let's how the RMSE changes for each parameter configuration\ncvres = grid_search_forest.cv_results_\nfor mean_score, params in zip(cvres[\"mean_test_score\"], cvres[\"params\"]):\n    print(np.sqrt(-mean_score), params)","15109343":"#find the best model of grid search\ngrid_search_forest.best_estimator_","a46453ec":"# Performance metrics\ngrid_best= grid_search_forest.best_estimator_.predict(x_train)\nerrors = abs(grid_best - y_train)\n# Calculate mean absolute percentage error (MAPE)\nmape = np.mean(100 * (errors \/ y_train))\n# Calculate and display accuracy\naccuracy = 100 - mape    \n#print result\nprint('The best model from grid-search has an accuracy of', round(accuracy, 2),'%')","40240257":"#RMSE\ngrid_mse = mean_squared_error(y_train, grid_best)\ngrid_rmse = np.sqrt(grid_mse)\nprint('The best model from the grid search has a RMSE of', round(grid_rmse, 2))","21058fdf":"from sklearn.model_selection import RandomizedSearchCV\nfrom pprint import pprint\n\n# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 20, stop = 200, num = 5)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(1, 45, num = 3)]\n# Minimum number of samples required to split a node\nmin_samples_split = [5, 10]\n\n# Create the random grid\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split}\n\npprint(random_grid)","aa2e3065":"# Use the random grid to search for best hyperparameters\n\n# Random search of parameters, using 3 fold cross validation, \n# search across 100 different combinations, and use all available cores\nrf_random = RandomizedSearchCV(estimator = forest, param_distributions = random_grid, n_iter = 10, cv = 10, verbose=2, random_state=42, n_jobs = -1, scoring='neg_mean_squared_error')\n# Fit the random search model\nrf_random.fit(x_train, y_train)","05eeb3b6":"#now let's how the RMSE changes for each parameter configuration\ncvres2 = rf_random.cv_results_\nfor mean_score, params in zip(cvres2[\"mean_test_score\"], cvres2[\"params\"]):\n    print(np.sqrt(-mean_score), params)","2cf830ce":"# best random model \nrf_random.best_estimator_","1dbb7be9":"# best combination of parameters of random search\nrf_random.best_params_","c6910983":"rf_random.best_estimator_","191728e7":"# Performance metrics (MAPE)\nrandom_best= rf_random.best_estimator_.predict(x_train)\nerrors = abs(random_best - y_train)\n# Calculate mean absolute percentage error (MAPE)\nmape = np.mean(100 * (errors \/ y_train))\n# Calculate and display accuracy\naccuracy = 100 - mape    \n#print result\nprint('The best model from the randomized search has an accuracy of', round(accuracy, 2),'%')","6f6f5b09":"#this is the RMSE\nfinal_mse = mean_squared_error(y_train, random_best)\nfinal_rmse = np.sqrt(final_mse)\nprint('The best model from the randomized search has a RMSE of', round(final_rmse, 2))","cc909e9c":"# extract the numerical values of feature importance from the grid search\nimportances = rf_random.best_estimator_.feature_importances_\n\n#create a feature list from the original dataset (list of columns)\n# What are this numbers? Let's get back to the columns of the original dataset\nfeature_list = list(X.columns)\n\n#create a list of tuples\nfeature_importance= sorted(zip(importances, feature_list), reverse=True)\n\n#create two lists from the previous list of tuples\ndf = pd.DataFrame(feature_importance, columns=['importance', 'feature'])\nimportance= list(df['importance'])\nfeature= list(df['feature'])\n\n#see df\nprint(df)","869207f4":"# Set the style\nplt.style.use('bmh')\n# list of x locations for plotting\nx_values = list(range(len(feature_importance)))\n\n# Make a bar chart\nplt.figure(figsize=(15,10))\nplt.bar(x_values, importance, orientation = 'vertical')\n# Tick labels for x axis\nplt.xticks(x_values, feature, rotation='vertical')\n# Axis labels and title\nplt.ylabel('Importance'); plt.xlabel('Variable'); plt.title('Variable Importances');","2ff16723":"final_model = rf_random.best_estimator_\n# Predicting test set results\nfinal_pred = final_model.predict(x_test)\nfinal_mse = mean_squared_error(y_test, final_pred)\nfinal_rmse = np.sqrt(final_mse)\nprint('The final RMSE on the test set is', round(final_rmse, 2))","8776f920":"#calculate accuracy\nerrors = abs(final_pred - y_test)\n# Calculate mean absolute percentage error (MAPE)\nmape = np.mean(100 * (errors \/ y_test))\n# Calculate and display accuracy\naccuracy = 100 - mape    \n#print result\nprint('The best model achieves on the test set an accuracy of', round(accuracy, 2),'%')","6c250cf2":"max_depths = np.linspace(1, 50, 50, endpoint=True)\n\ntrain_results = []\ntest_results = []\n\nfor i in max_depths:\n    dt = RandomForestRegressor(max_depth=i)\n    dt.fit(x_train, y_train)    \n    #compute accuracy for train data\n    housing_tree = dt.predict(x_train)\n    errors = abs(housing_tree - y_train)\n    # Calculate mean absolute percentage error (MAPE)\n    mape = 100 * (errors \/ y_train)\n    # Calculate and display accuracy\n    accuracy = 100 - np.mean(mape)\n    #append results of accuracy\n    train_results.append(accuracy)\n    \n    #now again for test data\n    housing_tree = dt.predict(x_test)\n    errors = abs(housing_tree - y_test)\n    # Calculate mean absolute percentage error (MAPE)\n    mape = 100 * (errors \/ y_test)\n    # Calculate and display accuracy\n    accuracy = 100 - np.mean(mape)\n    #append results of accuracy\n    test_results.append(accuracy)\n    \nfrom matplotlib.legend_handler import HandlerLine2D\nline1, = plt.plot(max_depths, train_results, 'b', label='Train accuracy')\nline2, = plt.plot(max_depths, test_results, 'r', label= 'Test accuracy')\n\nplt.legend(handler_map={line1: HandlerLine2D(numpoints=2)})\nplt.ylabel('Accuracy score')\nplt.xlabel('Tree depth')","8cba789b":"Now the categorical variables. In this case I think the simplest way to deal with missing values is to sobstitute them with the mode","2a6615ad":"### b. Randomized search","c5f6fbe7":"Best RMSE is (416575.2611)","fc3993d5":"It seems that 46 properties do not have the bathroom! I think they should be old houses with a common bathroom outside, or something like that, so I will restrain myself from considering them an error. Of course, I do find strange that there is a property with 12 bathrooms, though I guess it is technically possible. Let's take a look to houses with more than 7 bathrooms.","a2ff74bb":"### 3.3. Correlation matrix and scatterplots\nIt is high time to have a look at the correlations between our variables. First I will draw a correlation matrix, and then I will visualize the most promising relationship with scatterplots. ","0c9f906f":"In the graph above I simply consider Price by month, similarly to what I did before with boxplots. However, we want to take into account also the year variable. The graph below shows the value of sales by month from 2016 to 2018. Note that in this case also, not all months have been profitable. In fact, only 28 months have been registered in the database, with many months in 2018 missing, as you can see from the x-axis of the graph. ","ce7a1901":"Now finally I will try to predict price using three basic ML methods: linear regression, decision trees and random forest. I will first prepare the inputs (feature scaling and one-hot encoding), then I will apply the models to the train set. RMSE will be the major metrics to evaluate the performances of the models. Cross-validation will also be used to select the best performing model, which I will then fine tune.  ","6baf0522":"So we now know that this house it's located at Brighton, which according to Wikipedia 'houses some of the wealthiest citizens in Melbourne'. The house is probably a cottage (Type h) on the sea.","ca995836":"## 5. P.S. Visualize Random Forest Hyperparameters\nI thought to dedicate a last visualization to one of the major hyperparameter that I tweaked in my training: max_depth. Of course this could be done with all the other parameters, but considering it was only a closing remark extending this part seemed pretty useless. ","e9079b5d":"Many of the variables suffer from missing values. Building area is the most affected by them. I would like to explore it's relationship with price and at the same time evaluate whether it is better to impute the missing values with their mean or median. ","b3bbc13c":"In conclusion, the metrics for our best models on the training set after our hyperparameter fine-tuning are the following:\n\n1. **Grid-search**:\n    * RMSE: 365356.56\n    * accuracy (MAPE): 77.27 %\n    \n    \n2. **Randomized Search**:\n    * RMSE: 243924.85\n    * accuracy: 85.74 %\n    \nThis of course does not mean that the grid-search is inherently inferior to randomized search. It's just that in this notebook I used the information provided by the former to refine the latter. Moreover, I tested more combinations with the randomized search. In any case, this time I will consider the model obtained by the randomized search as the best one. First I will plot the feature importance for this model. This will give me precious insight to the most important factor in predicting our dependent variable Price. Then I will apply the model to the test set. ","198710f5":"<a id='correlation'><\/a>","be9f2035":"Seaborn provides other interesting options to visualize a bivariate relationship, like the jointplot below. This time I used a trick to stop some useless warning that I was not able to fix in any other way.","a48dfaef":"<a id='grid'><\/a>","85f714dd":"A future aim may be to cut the less relevant features (let's say everything after 'car' in terms of importance), estimate a new model and compare it with the old ones. I reckon it would lose predictive power, but on the other hand it would gain in terms of training speed.  ","d00582bd":"I will explore only the train set to avoid data snooping as much as possible","ee16eb1d":"* Then create two new categories from the variable Date: year and season.","68c18fe9":"Another variable of great interest is distance. Let's visualize price and distance outliers. I would keep the threshold to identify outliers quite high in this situation. In this case I chose to keep an extremely high threshold to define outliers: over 5 standard deviation, where 2 or 3 would have been much more common. This decision is in my opinion justified by the high prevalence of outliers found in this database. In any case the script allows to easily change the threshold, so that many different values may be tried before taking a decision, which helped me a lot. ","7a983af8":"First let's check with boxplots the distribution of ordinal and categorical values","79f209c0":"<a id='time'><\/a>","a468e620":"## 3. Visualisations","1b0435ef":"The revious visualization was a simple 1D outlier measure: each point was either an outlier either for price or distance. But what about those points that are 2D outliers, that is on the edge of the distribution for both variables? In order to detect those points we need high-dimensional methods. Mahalanobis distance is one such measure, which will help to realize our next graph. ","279a4efe":"### 3.2. Time series\n\nMy first idea was obviously to organize the longitudinal plot wth days on the x-axis and price as y. Considering the size of the dataset I expected to have house sales for almost every day. Unexpectedly, out of all the 2 and a half years, houses were sold only during 78 days (see below the shape computation). I thus decided to order the x-axis by month (but even by week would have been possible). Y-axis represents the total amount of money spent in the housing market during the period of interest. ","051fae35":"With this graph it is really easy to see where the overfitting begins: after ~8 splits the test performance does not increase anymore, while the train stops increasing after 20 splits. In fact, the best model after random search had max_depth=23. This means that the performance of the best model could still be improved if the max_depth was decreased a bit...at least with this test set!","e4991a51":"**Future goals**:\n* more automation: write a couple of functions to speed up the pre-processing part; Build a pipeline to automate the preprocessing transformations.\n* more models: I would like to try a SVM and a NN, maybe a MLP.\n* improve the map.","1149ba2f":"Ok, so it appears that 77 houses do not have any building area. It may be that some of these values are simply data entry mistakes. Another possibility is that these properties were sold only because of their land, as building plots and that there was still no house in it. However, if this was not the case how come that we know for almost everyone of them YearBuilt, that is the year the house was built? In conclusion, I think there is something wrong with most of this subsample, so I will drop these rows.  ","f4616adc":"We can use the Mean absolute percentage error (MAPE) to compute a measure of accuracy that is more immediate to understand.","5a14bc89":"There is something wrong with data types. Let's change that. For example, there is no reason why postcode is considered as a float while it's clearly a category. I'll take the time to change all the problematic types, one by one:\n* Date. I will work with date later in the feature engineering section \n* change Bathroom and Car to integer Series\n* Postcode is a categorical variable, not a numeric one\n* Yearbuilt should be an integer\n* Propertycount is a category","ea83e8f9":"Is the type of house influencing the relationship of the variables we examined? For example, when a townhouse gets old I think that it loses value, as we tend to prize more modern venues in western cities. But what about an historical villa deep into the countryside? In that case I think that the price may well increase as the property ages, like a vintage item. ","5d2729b5":"Finally, let's talk about Bedroom2. I decided to drop Bedroom2. \nThis is for two main reasons:\n- the overview is quite vague about the origin of this variable - 'Scraped # of Bedrooms (from different source)' \n- from a quick view of the database, it seems to be very similar to Number of Rooms. Let's check it with a simple scatterplot: as you can see below the relationship is almost perfectly linear, which tells me that they are almost a perfect match. I do not think that the variable provides additional information that Rooms. ","44bb557b":"<a id='geo'><\/a>","5d38a8fb":"## 4.3. Evaluate best model on the test set","26b5db36":"Biggest insight here is that all variables have a different scale, there are many outliers for most of them and no one seem really close to normality. These observations will come useful later when I will scale my features. ","c2f52021":"<a id='compare'><\/a>","6460bcab":"As was to be expected, the performance drops considerably, but is still  beyond 75%, which I consider a discrete result. ","51325da2":"# 1. A first look to the dataset\nThis section is dedicated to a very preliminary analysis of the dataset, where I will try mostly to understand what I am dealing with.","9e8aeba6":"<a id='first_look'><\/a>","6e84f70d":"## [1. A First Look to the dataset](#first_look)\n\n## [2. Data Cleaning](#data_cleaning)\n * [2.1. Missing Values](#missing_data)\n * [2.2. Outliers](#outliers)\n * [2.3. Feature Engineering](#features)\n\n## [3. Visualisations](#visualisation)\n * [3.1 Boxplot and histogram](#box)\n * [3.2 Time Series](#time)\n * [3.3 Scatterplot](#correlation)\n * [3.4 Map](#geo)\n\n## [4. Machine Learning](#ml)\n * [4.1 Model Comparison](#compare)\n * [4.2 Fine Tuning](#tune)\n    - *[a. Grid Search](#grid)*\n    - *[b. Random  Search](#random)*\n * [4.3 Test set evaluation](#evaluate)\n\n## [5. RF hyperparameters](#hyper)","b754e8f9":"To understand better the distinction between MAE and RMSE read this [useful resourse](https:\/\/medium.com\/human-in-a-machine-world\/mae-and-rmse-which-metric-is-better-e60ac3bde13d)","3a40aaa3":"<a id='random'><\/a>","b29ed499":"Indeed, it seems that there is an interaction between type of house and its age to determine the price: as the house gets older, the price increases on average, but this is particularly true for Type h, that is cottages and villas. \nA similar interaction is shown in the second graph, where we see that the price steeply increases for larger properties (bigger BuildingArea), but not for the townhouse Type.\nOn the contrary, Type does not seem to influence the relationship between price and rooms: the more rooms, the better. This baffles me, as I would have expected the same result as in BuildingArea. Any ideas on how to comment these diverging results?","0c651230":"### 3.1 Boxplots and histograms","4587cd37":"We can see that more \"central\" points have a low Mahalanobis distance (white points), while those on the outskirts have more saturated colors, i.e., higher distance to the centre. In this plot, the only clear 2D outliers are the dark points on the top left corner. Notice that Mahalanobis distance is particularly suited for elliptical relationship between variables (and this is not one of them). In any case is a nice visual method to identify groups of potentially interesting outliers. ","173050a4":"* Regarding season, there is no big diffence in price between houses sold on different parts of the year;  \n* As for years, 2017 was the best year for the market, with apparently more high price outliers. 2018 has less activity, perhaps because data collection did not include the whole year. \n* It seems that there is a slight linear increase in Price for more rooms. Note that not all the levels of variable rooms are very stable, with 9 and 16 showing very little variability (they surely have few cases).\n* Type of house may be an important indicator for price, as is seems that h (cottages) cost more, and have more variability in price. ","44e55aad":"First I will create my color palette","f3fe0ffb":"## Test-Train Split\nTo test the performances of our algorithms I will split the dataset into two distinct train and test sets.","f47e98ae":"<a id='box'><\/a>","d452fa1d":"<a id='visualisation'><\/a>","c7b32c00":"I hope you find the kernel useful. If you catch some mistake or have any suggestion to improve it, please do not hesitate to write a comment. I posted this notebook mainly to understand what and where I need to improve most, so any constructive criticism is welcomed. Of course, I will try to implement the suggestions received. Thank you in advance and enjoy!","e0010678":"# Location, location, location (and size...)","7420ee0b":"* create variable number of years since building","3eda75bf":"## 2.1 Missing data","8874ca61":"<a id='outliers'><\/a>","d8d06573":"<a id='evaluate'><\/a>","29a69c7e":"Let's zoom in for Building Area, which is not very clear by the last graph","c2ee8b95":"### In conclusion, these are my final considerations on the model: \n* the best feature to reliably predict the price of a Melbourne house is Distance. After distance that there is a group of 5 features including: number of rooms, Longitude and Latitude, and Southern Metropolitan region. This last dummy attribute is the only one relevant out of the original group of 7 regions. Thus, it seems that the best features are primarily related to the house location, and then to its size (there is also Building size to consider). This is why I chose that title!\n* The type of the house seems less important than these two categories, as houseAge and Type_h are respectively 10th and 11th in this ranking. Category Type_t (or townhouse) is the less relevant feature in this cluster. \n* Date features (i.e. Year and the four seasons) are not that important, but in any case the year when the house was sold is slightly more important than the season.","f5da8b9f":"**Insights**:\n\n* most properties were sold on 2017;\n* More properties are sold during summer and fall;\n* most houses have space for 2 cars;\n* between 2 to four rooms and 1 or 2 bathrooms;","3f5f8bca":"## 4.1 Model comparison","8feacfa7":"Now, let's find out about the performance metrics of our new model: MAPE and RMSE. ","d1a2fe00":"<a id='missing_data'><\/a>","9a5bc7e7":"The boxplot shows an outstanding outlier, with a building area of more than 40000 squared meters. Let's get a closer look to its values.","3b6e0566":"I will now examine the relationship between Price and four other variables:\n* BuildingArea (r= .26)\n* HouseAge (.21)\n* Rooms - This is the strongest relationship (.43). \n* Distance - most negative correlation (-.17)","914a316a":"These results are interesting: it seems that decision tree is by far the best model, as its error is the lowest. However, at this point we are only evaluating our models on the train set, so the risk of overfitting for decision trees is quite high. To understand better the performances of the models we can use an alternative strategy: cross-validation. ","e8a17a83":"### a. Grid Search\n\nIn this grid search I will try different combinations of RF hyperparameters. \n\n**Most important hyperparameters of Random Forest:**\n* n_estimators = n of trees\n* max_features = max number of features considered for splitting a node\n* max_depth = max number of levels in each decision tree\n* min_samples_split = min number of data points placed in a node before the node is split\n* min_samples_leaf = min number of data points allowed in a leaf node\n* bootstrap = method for sampling data points (with or without replacement) \n\nAs for how I decided the numbers to try I simply followed the advice of Aurelion Geron (2017): '*When you have no idea what value a hyperparameter should have, a simple approach is to try out consecutive powers of 10 (or a smaller number if you want a more fine-grained search)'.*","10643ef1":"The grid search approach is often too costly, as many combinations are tested. In these cases it is easier to use a randomized search, that evaluates a only an user defined number of random combinations for each hyperparameter at every iteration. This way we could also test more hyperparameters. \nSee this [tutorial](https:\/\/github.com\/ageron\/handson-ml\/blob\/master\/02_end_to_end_machine_learning_project.ipynb) and this [resource](https:\/\/towardsdatascience.com\/hyperparameter-tuning-the-random-forest-in-python-using-scikit-learn-28d2aa77dd74), with its [notebook](https:\/\/github.com\/WillKoehrsen\/Machine-Learning-Projects\/blob\/master\/random_forest_explained\/Improving%20Random%20Forest%20Part%202.ipynb).","e516e302":"# 4. Machine learning","4598062c":"<a id='features'><\/a>","3b6d2048":"... and then test them on train data, in terms of MSE:","f1596c1c":"A 'Price' outlier clearly stands out: it is well beyond 7 standard deviation from the mean of the distribution (it's exact value is 11.200.000 dollars). Let's take a closer look to this property. ","755e8b02":"Ok, so this seems a very large property with a lot of land. The building area value is probably an error, as it is bigger than the landsize, and considering that this house has 5 rooms and three bathrooms, it is fair to assume that it cannot be much larger than 500 squared meters. The median value for building area is 136. I will change this value to 445 squared meters, a tenth of its reported size, on account that I think it's possibly bigger than the average house, given the landsize. Of course this line of thought may be biased: I cannot exclude that the property was some kind of factory or company headquarters. I'll stop here for building area. ","4f5faa48":"Now I want to compute for each combination the mean and std, so that to put into a dataframe all the metrics and easily compare them","798a382d":"<a id='ml'><\/a>","7fc35ff7":"In both graphs we can see where the imputed values would be. There is not a striking visual difference between the two graphs. However, after a careful look we can say that Price has a lot of outliers, and the median is less affected by them, as the horizontal line in the graph on the right is lower. In any case, considering the heavy presence of outliers, I think that in both cases it would be better to use the median, as the mean values are more sensitive to outliers. Another possible option - to guard against outliers - would be to use robust statistics. In the next cell I am going to impute all numerical variables with the median. ","5d73cda0":"## 4.2. Fine-tune Random Forest","eec7a5b5":"There are some strange values in this table, so let's check this values before moving on:\n* Check number of bathrooms (<1 and >7)\n* check building area=0 and building area 44515 square meters\n* check properties with YearBuilt > 2018","db793e98":"With this high threshold, less than 1% of values are considered outliers. The next graph visualize this proportion. ","3d409f14":"<a id='data_cleaning'><\/a>","d6b7fd77":"## 2.3 Feature engineering","05ff64a6":"It's time to check how many missing data each variable has.","62842fa8":"### 3.4. Geographical Data","ee36eee1":"This plot is quite confusing, because most values are in the low end of the Price range and they turn out as blue. Perhaps it would be better to first delete the most extreme outliers (let's say 5 std from the mean) and then plot the figure? I also tried normalising the price variable (with log transformation and standard scaler) but this resulted in a completely green map, that is a map dominated by middle values. Please let me know your suggestions in the comment section, if you have any.","0f000d02":"### max_depth\nMax_depth indicates how deep the tree can be. The deeper the tree, the more splits it has and it captures more information about the data. In our search we considered a depth ranging from 1 to 50 on the training set. Let's compare the training result with the test result. ","a6e91975":"**Feature Importance**","cd98c403":"**Feature Scaling**\n\nOur features have very different scales: room ranges from 1 to 16, while Price is in the range of millions. this difference can hinder the performance of our ML algorithms. I will thus apply a scaling algorithm. In this scenario is probably best to implement a robust scaling, which is not bound to Gaussian distribution of features and can deal with outliers, instead of the more common standard scaler or min-max scaling. [This resource](http:\/\/benalexkeen.com\/feature-scaling-with-scikit-learn\/) explains really well all the available options and their statistical meaning. For a still more detailed explanation, this [scikit-learn page](http:\/\/scikit-learn.org\/stable\/auto_examples\/preprocessing\/plot_all_scaling.html#sphx-glr-auto-examples-preprocessing-plot-all-scaling-py) is very interesting.","c0805c31":"Now let us check some variables that may influence our dependent variable price. ","ed9b5b36":"<a id='tune'><\/a>","787b0d38":"**One-hot encoding** for categorical variables","461f3e4e":"I will cross-validate the three models and compare them ","005b17d6":"<a id='hyper'><\/a>","c44ac1b3":"Now decision trees are not so good in comparison with the other two methods, both in terms of error and variance explained. The best model is random forest, though I must say that I expected it to outperform linear regression by a wider margin. In any case, let's proceed with fine tuning our random forest. ","00e854c3":"## 2.2 Outliers","adf2a3b6":"Fit our three basic models...","48731958":"<a id='models'><\/a>","46d8b146":"# 2. Data Cleaning","d71abd15":"This map let us see that most expensive properties are in a central area not too far from what I think is the sea. Next step would be to superimpose on this scatterplot a real map of the city.","d0f8d527":"Now I'll take a look at the distribution of continous variables using histograms","3737888b":"After deling with missing values, I can change the type of Bathroom and Car to integer"}}