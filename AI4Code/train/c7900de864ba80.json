{"cell_type":{"4244e935":"code","69f628b6":"code","41907ffc":"code","89a344a2":"code","ce371aba":"code","6ee6c402":"code","a69f2212":"code","449aec07":"code","335dafdf":"code","04828739":"code","79082b21":"code","9bbee8cc":"code","e074b737":"code","a36899b4":"code","824fd246":"code","6d1ca40b":"code","0a540683":"code","9fd9ff1c":"code","d4492496":"code","e41e4b91":"code","40a0e1ec":"code","0d6555ee":"code","e27dbc26":"markdown","f365d071":"markdown","7359975d":"markdown","d776360e":"markdown","23b21c53":"markdown","0e768a22":"markdown","9436e851":"markdown","3e2de882":"markdown","b036dc62":"markdown","3d29af74":"markdown","51a27090":"markdown","a81eabbb":"markdown","fb2a5e41":"markdown","cf105980":"markdown","51e3d1a7":"markdown","64b283ce":"markdown"},"source":{"4244e935":"import cartopy.crs as ccrs\nimport cartopy.io.shapereader as shpreader\nimport matplotlib.pyplot as plt\nimport geopandas as gpd\nimport geoplot\nimport pandas as pd","69f628b6":"fname = '..\/input\/gadm36_SWE_shp\/gadm36_SWE_1.shp'\n","41907ffc":"se_shapes = list(shpreader.Reader(fname).geometries())\nax = plt.axes(projection=ccrs.PlateCarree())\nplt.title('Sweden')\nax.coastlines(resolution='10m')\nax.add_geometries(se_shapes, ccrs.PlateCarree(),\n                  edgecolor='black', facecolor='gray', alpha=0.5)\nax.set_extent([11, 25, 55, 70], ccrs.PlateCarree())\nplt.show()","89a344a2":"map_df = gpd.read_file(fname)\nmap_df.crs","ce371aba":"data_proj = map_df.copy()\ndata_proj = data_proj.to_crs(epsg=3035)","6ee6c402":"import matplotlib.pyplot as plt\n\ndata_proj.plot(facecolor='green');\nplt.title(\"New projection\");\nplt.tight_layout()\n","a69f2212":"sweden_pop = pd.read_excel('..\/input\/be0101_tabkv1_2020eng_2.xlsx')","449aec07":"sweden_pop = sweden_pop.drop([0,312,313,314,315],axis=0)\nsweden_pop['County'] = sweden_pop['County'].str.rstrip()\nsweden_pop['County'] = sweden_pop['County'].apply(lambda row: 'Orebro' if row=='\u00d6rebro' else row)\nsweden_pop.head()","335dafdf":"sweden_pop['is_county'] = sweden_pop.apply(lambda row: 1 if len(row['Code'])==2 else 0, axis = 1)\nsweden_pop_by_county = sweden_pop[sweden_pop['is_county']==1]\n","04828739":"sweden_map_pop = pd.merge(data_proj, sweden_pop_by_county,how = 'outer', left_on = 'NAME_1', right_on = 'County')","79082b21":"import mapclassify\nscheme = mapclassify.Quantiles(sweden_map_pop['Population'], k=6)\ngeoplot.choropleth(\n    sweden_map_pop, hue=sweden_map_pop['Population'], scheme=scheme,\n    cmap='Blues', figsize=(4, 12)\n)","9bbee8cc":"import matplotlib.colors as mplc\n\nfig, ax = plt.subplots(1, figsize=(30, 10))\nax.axis('off')\nax.set_title('Popoulation by counties in Sweden', fontdict={'fontsize': '18', 'fontweight' : '3'})\nsm = plt.cm.ScalarMappable(cmap='Blues',\n                           norm=plt.Normalize()\n                          )\nfig.colorbar(sm)\nsweden_map_pop.plot(column='Population', cmap='Blues', linewidth=0.8, ax=ax, edgecolor='0.8',norm=mplc.LogNorm())\n","e074b737":"from mpl_toolkits.axes_grid1 import make_axes_locatable\nimport numpy as np\nvmin=min(sweden_map_pop['Population'])\nvmax=max(sweden_map_pop['Population'])\nfig, ax = plt.subplots(1, figsize=(30, 10))\nax.axis('off')\ndivider = make_axes_locatable(ax)\ncax = divider.append_axes(\"right\", size=\"5%\", pad=0.1)\nbase = sweden_map_pop.plot(column='Population',cmap='viridis', ax=ax, legend=True,\n                     linewidth=0.8, norm=mplc.LogNorm(vmin, vmax),\n                             edgecolor='0.8'\n                      , cax=cax\n                     )\ncolourbar = ax.get_figure().get_axes()[1]\nyticks = np.interp(colourbar.get_yticks(), [0,1], [vmin, vmax])\ncolourbar.set_yticklabels(['{0:.0f}'.format(ytick) for ytick in yticks])\nplt.show()","a36899b4":"from mpl_toolkits.axes_grid1 import make_axes_locatable\nimport numpy as np\nvmin=min(sweden_map_pop['Population'])\nvmax=max(sweden_map_pop['Population'])\nfig, ax = plt.subplots(1, figsize=(30, 10))\nax.axis('off')\ndivider = make_axes_locatable(ax)\nbase = sweden_map_pop.plot(column='Population',cmap='Reds', ax=ax, legend=True,\n                     linewidth=0.8, \n                             edgecolor='0.8', scheme='maxp'\n                     )\nplt.show()","824fd246":"from mpl_toolkits.axes_grid1 import make_axes_locatable\nimport numpy as np\nvmin=min(sweden_map_pop['Population'])\nvmax=max(sweden_map_pop['Population'])\nfig, ax = plt.subplots(1, figsize=(30, 10))\nax.axis('off')\ndivider = make_axes_locatable(ax)\nbase = sweden_map_pop.plot(column='Population',cmap='Reds', ax=ax, legend=True,\n                     linewidth=0.8, \n                             edgecolor='0.8', scheme='maxp'\n                     )\nleg = ax.get_legend()\nleg.set_bbox_to_anchor((0., 0.8, 0.3, 0.1))\nfor lbl in leg.get_texts():\n    label_text = lbl.get_text()\n    lower = label_text.split()[0]\n    upper = label_text.split()[2]\n    new_text = f'{float(lower):,.0f} - {float(upper):,.0f}'\n    lbl.set_text(new_text)\nplt.show()","6d1ca40b":"import json\nimport pandas as pd\nimport urllib","0a540683":"import requests\nurl = 'https:\/\/api.apify.com\/v2\/datasets\/Nq3XwHX262iDwsFJS\/items?format=json&clean=1'\nr = requests.get(url)\nprint(r.json()[0:2]) ","9fd9ff1c":"covid_19_data_json = r.json()[len(r.json())-1]","d4492496":"covid_19_data = pd.DataFrame(covid_19_data_json['infectedByRegion'], index=list(range(0,21,1)))\ncovid_19_data.head()","e41e4b91":"\ncovid_19_data['region'] = covid_19_data['region'].apply(lambda row: 'Orebro' if row=='\u00d6rebro' else row)\ncovid_19_data['region'] = covid_19_data['region'].apply(lambda row: 'S\u00f6dermanland' if row=='S\u00f6rmland' else row)\ncovid_19_data['region'] = covid_19_data['region'].apply(lambda row: 'J\u00e4mtland' if row=='J\u00e4mtland H\u00e4rjedalen' else row)\n","40a0e1ec":"sweden_map_covid = pd.merge(sweden_map_pop, covid_19_data,how = 'outer', left_on = 'NAME_1', right_on = 'region') \nsweden_map_covid.head()","0d6555ee":"from mpl_toolkits.axes_grid1 import make_axes_locatable\nimport matplotlib.cm as cm\nimport numpy as np\nvmin=min(sweden_map_covid['infectedCount'])\nvmax=max(sweden_map_covid['infectedCount'])\nfig, ax = plt.subplots(1, figsize=(30, 10))\nax.axis('off')\ndivider = make_axes_locatable(ax)\ncax = divider.append_axes(\"right\", size=\"5%\", pad=0.1)\ncmap_reversed = cm.get_cmap('viridis_r')\nbase = sweden_map_covid.plot(column='infectedCount',cmap=cmap_reversed, ax=ax, legend=True,\n                     linewidth=0.8, norm=mplc.LogNorm(vmin, vmax),\n                             edgecolor='0.8'\n                      , cax=cax\n                     )\ncolourbar = ax.get_figure().get_axes()[1]\nyticks = np.interp(colourbar.get_yticks(), [0,1], [vmin, vmax])\ncolourbar.set_yticklabels(['{0:.0f}'.format(ytick) for ytick in yticks])\nfig.savefig('Map_of_infected.png', dpi=150, transparent=True)\nplt.show()","e27dbc26":"Again we need to fix some issues with counties names. ","f365d071":"But if we want to have more control on out map we will need to use plot from geopandas project. ","7359975d":"Now we can easily add the data about the covid-19 deaths or confirmed cases to our map. We will download data directly from API. It gives data in json format. ","d776360e":"So, we have the proper shape of the graph. Now we want to add information about the [population density](http:\/\/www.statistikdatabasen.scb.se\/pxweb\/en\/ssd\/START__BE__BE0101__BE0101C\/BefArealTathetKon\/). ","23b21c53":"Doing your first map is really easy. Just read the data and you need few lines of code. ","0e768a22":"Schema \"maxp\" divided our data in 5 groups, but again something is wrong with description. And legend is overlapping the map. Let's fix it. ","9436e851":"In previous graphs we used the colorbar and the simple normalisation to get more distinguish colors. Geopandas allow us to use other option by [\"scheme\"](https:\/\/geopandas.org\/mapping.html)","3e2de882":"You can notice that the colorbar description is not useful. So let's change it. ","b036dc62":"But you can notice that our Sweden looks strange, it's to short. It's caused by the different [projections](https:\/\/kodu.ut.ee\/~kmoch\/geopython2018\/lessons\/L2\/projections.html) than we are used to. ","3d29af74":"And finally we have it. Note, that the color map is reversed. ","51a27090":"Changing projection is easy. ","a81eabbb":"We can do map with colours by population density in really easy way, by using choropleth. ","fb2a5e41":"As we need to join data with our map, we need to have the same name of counties. The Excel file have also data about all counties and municiplies, so we need to choose only data about counties. ","cf105980":"If you ever want to draw the map of some country that link will be useful: https:\/\/gadm.org\/download_country_v3.html \nYou can dowload there a file with the country shape (also with municipalities and counties). (Data are freely available for university and non-comercial use). ","51e3d1a7":"I wrote article about [Sweden and Covid-19 ](http:\/\/https:\/\/medium.com\/@izabellajaworska\/how-about-sweden-was-their-decision-disastrous-or-smart-5ffecf5210fd), and when I made it available for people, I've got a lot of questions about the density of population. So I decided that I want to add some maps with it. \nYou may also find interesting my [first notebook](https:\/\/www.kaggle.com\/malina015\/graphs-tutorial-covid-19-dataset\/) about the graphs build, but it's more bigginer guide. ","64b283ce":"We take only the last day data."}}