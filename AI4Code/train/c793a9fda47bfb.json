{"cell_type":{"e7dd1886":"code","4baf37c4":"code","4a536589":"code","c3472294":"code","14463f71":"code","552134fd":"code","8df9db96":"code","e9abc88b":"code","cb9a2f1d":"code","813ca74b":"code","4a2f2eb9":"code","f2687993":"code","72d89e31":"code","c6234463":"code","7007651a":"code","a712a9b7":"code","e990a3d5":"code","55b6ac1c":"code","c6a22c35":"code","c307a802":"code","6c1f4b89":"code","2b6bc934":"code","1e00c99d":"code","0959c40e":"markdown","a848d997":"markdown","2cca8169":"markdown","0bbaeaef":"markdown","9e0132fb":"markdown","3169db1e":"markdown","9d6f4ef4":"markdown","c7932a4f":"markdown","b7993bf0":"markdown","c89c352a":"markdown","7b8ceb7f":"markdown"},"source":{"e7dd1886":"from IPython.display import YouTubeVideo,HTML\nYouTubeVideo(\"IAQp2Zuqevc\", width=800, height=500)","4baf37c4":"!pip install -q efficientnet","4a536589":"# importing libraries\nimport os\nfrom glob import glob\nimport pandas as pd\nimport numpy as np\nimport numpy as np \nimport cv2\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# nn\nfrom keras.layers.core import Dense, Dropout\nfrom keras.layers import GlobalAveragePooling2D\nfrom keras.models import Model\nfrom keras.preprocessing.image import img_to_array\nfrom keras.preprocessing import image\nfrom PIL import Image\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.optimizers import Adam\nimport efficientnet.tfkeras as efn\nfrom keras.callbacks import ReduceLROnPlateau, Callback, ModelCheckpoint\n\n#bokeh\nfrom bokeh.models import ColumnDataSource, HoverTool, Panel, FactorRange\nfrom bokeh.plotting import figure\nfrom bokeh.io import output_notebook, show, output_file\nfrom bokeh.palettes import Spectral6\n\nimport warnings\nwarnings.filterwarnings('ignore')","c3472294":"# setup file structure\nbase_dir = \"..\/input\/chest-xray-pneumonia\/chest_xray\/\"\ntrain_dir = os.path.join(base_dir, \"train\/\")\ntest_dir = os.path.join(base_dir, \"test\/\")\nval_dir = os.path.join(base_dir, \"val\/\")","14463f71":"print(\"Number of images in Trian is {}\".format(len(glob(train_dir + \"*\/*\"))))\nprint(\"Number of images in Test is {}\".format(len(glob(test_dir + \"*\/*\"))))\nprint(\"Number of images in Validation is {}\".format(len(glob(val_dir + \"*\/*\"))))","552134fd":"# Distribution of images with different category\nCategories = [\"Train\", \"Test\", \"Validation\"]\nSubcategories = ['Normal', 'Pneumonia']\n\nTrain = [1341, 390]\nTest = [3875, 8]\nValidation = [234, 8]\n\ndata = {'Categories':Categories,\n        'Train':Train,\n        'Test':Test,\n        'Validation':Validation}\n\nx = [(categories, subcategories) for categories in Categories for subcategories in Subcategories]\ncounts = sum(zip(data['Train'], data['Test'], data['Validation']), ())\n\nsource = ColumnDataSource(data=dict(x=x, counts=counts, color=Spectral6))\n\np = figure(x_range=FactorRange(*x), plot_height=400, plot_width=800, title=\"Distribution of images with different category\",\n           tools=\"hover, pan, box_zoom, wheel_zoom, reset, save\", tooltips= (\"@x: @counts\"))\n\np.vbar(x='x', top='counts', width=0.9, color='color', legend_field=\"x\", source=source)\n\np.xgrid.grid_line_color = None\np.legend.orientation = \"horizontal\"\np.legend.location = \"top_center\"\noutput_notebook()\nshow(p)","8df9db96":"Normal = glob(train_dir + \"NORMAL\/*\")\nPneumonia = glob(test_dir + \"PNEUMONIA\/*\")","e9abc88b":"# Extract 9 random images from normal\nrandom_images = [Normal[i] for i in range(9)]\n\nprint('Display Normal Images')\n\n# Adjust the size of your images\nplt.figure(figsize=(10,8))\n\n# Iterate and plot random images\nfor i in range(9):\n    plt.subplot(3, 3, i + 1)\n    img = plt.imread(random_images[i])\n    plt.imshow(img, cmap='gray')\n    plt.axis('off')\n    \n# Adjust subplot parameters to give specified padding\nplt.tight_layout()  ","cb9a2f1d":"# Extract 9 random images from Pneumonia\nrandom_images = [Pneumonia[i] for i in range(9)]\n\nprint('Display Pneumonia Images')\n\n# Adjust the size of your images\nplt.figure(figsize=(10,8))\n\n# Iterate and plot random images\nfor i in range(9):\n    plt.subplot(3, 3, i + 1)\n    img = plt.imread(random_images[i])\n    plt.imshow(img, cmap='gray')\n    plt.axis('off')\n    \n# Adjust subplot parameters to give specified padding\nplt.tight_layout()  ","813ca74b":"images_shape = []\n\nfor k, image_path in enumerate(glob(train_dir + \"*\/*\")):\n    image = Image.open(image_path)\n    images_shape.append(image.size)\n\nimages_shape_df = pd.DataFrame(data = images_shape, columns = ['H', 'W'], dtype='object')\nimages_shape_df['Size'] = '[' + images_shape_df['H'].astype(str) + ',' + images_shape_df['W'].astype(str) + ']'","4a2f2eb9":"images_shape_df.head()","f2687993":"print(\"We have {} types of different shapes in training images\".format(len(list(images_shape_df['Size'].unique()))))","72d89e31":"# define architecture\n\nbaseModel = efn.EfficientNetB5(weights = \"imagenet\", include_top = False, input_shape = (299, 299, 3))\nheadModel = baseModel.output\nheadModel = GlobalAveragePooling2D()(headModel)\nheadModel = Dropout(0.5)(headModel)\nheadModel = Dense(1, activation='sigmoid', name = \"efficientnet_dense\")(headModel)\n\nmodel = Model(inputs = baseModel.input, outputs = headModel, name = \"EfficientNetB5\")\n\nmodel.trainable = True\nmodel.summary()","c6234463":"# image preprocessing\ntrain_datagen = ImageDataGenerator(rotation_range = 30,\n                                   zoom_range = 0.2,\n                                   width_shift_range=0.1,\n                                   height_shift_range=0.1,\n                                   horizontal_flip = True,\n                                   rescale=1.\/255)\nval_datagen = ImageDataGenerator(rescale=1.\/255)\ntest_datagen = ImageDataGenerator(rescale=1.\/255)","7007651a":"batch_size = 16\ntraining_set = train_datagen.flow_from_directory(train_dir, \n                                                 target_size = (299, 299), \n                                                 batch_size = batch_size, \n                                                 class_mode = \"binary\")\nval_set = val_datagen.flow_from_directory(val_dir,\n                                          target_size = (299, 299),\n                                          batch_size = batch_size,\n                                          class_mode = 'binary')\ntest_set = test_datagen.flow_from_directory(test_dir,\n                                          target_size = (299, 299),\n                                          batch_size = batch_size,\n                                          class_mode = 'binary')","a712a9b7":"# compile the model\nopt = Adam(lr = 0.001)\nmodel.compile(loss = \"binary_crossentropy\", optimizer = opt, metrics = [\"accuracy\"])","e990a3d5":"# this will help in reducing learning rate by factor of 0.1 when accuarcy will not improve\nreduce_lr = ReduceLROnPlateau(monitor = 'val_accuracy', patience = 2, verbose = 1,\n                                            factor = 0.1, min_lr = 0.000001)","55b6ac1c":"# define criteria for stopping. we will stop training if validation accuracy got reached 98%\nclass myCallback(Callback):\n\tdef on_epoch_end(self, epoch, logs={}):\n\t\tif(logs.get('val_accuracy') > 0.98):\n\t\t\tprint(\"\\nReached 98% accuracy so cancelling training!\")\n\t\t\tself.model.stop_training = True\n\ncallbacks = myCallback()","c6a22c35":"checkpoint_filepath = 'xray_model.h5'\nmodel_checkpoint_callback = ModelCheckpoint(filepath = checkpoint_filepath,\n                                            save_weights_only = True,\n                                            monitor = 'val_acc',\n                                            mode = 'max',\n                                            save_best_only = True)","c307a802":"H = model.fit_generator(training_set,\n                        steps_per_epoch = training_set.samples\/\/batch_size,\n                        validation_data = val_set,\n                        epochs = 10,\n                        validation_steps = val_set.samples,\n                        callbacks = [reduce_lr, callbacks, model_checkpoint_callback])","6c1f4b89":"print(\"Loss of the model is - \" , model.evaluate(test_set)[0])\nprint(\"Accuracy of the model is - \" , model.evaluate(test_set)[1]*100 , \"%\")","2b6bc934":"# Extract 9 random images from normal\nimageset = glob(test_dir + \"*\/*\")\nrandom_images = [np.random.choice(imageset) for i in range(9)]\n\nprint('Display Random Images')\n\n# Adjust the size of your images\nplt.figure(figsize=(10,8))\n\n# Iterate and plot random images\nfor i in range(9):\n    plt.subplot(3, 3, i + 1)\n    img = cv2.imread(random_images[i])\n    orig = img.copy()\n    img = cv2.resize(img, (299,299))\n    img = img_to_array(img)\n    img = np.expand_dims(img, axis=0)\n    img = img\/255\n    prediction = model.predict(img)\n    \n    if (prediction < 0.5):\n        plt.title(\"Normal\", fontdict = {'fontsize' : 30})\n    \n    else:\n        plt.title(\"Pneumonia\", fontdict = {'fontsize' : 30})\n    plt.imshow(orig, cmap='gray')\n    plt.axis('off')\n    \n# Adjust subplot parameters to give specified padding\nplt.tight_layout()  ","1e00c99d":"# Let's try this one more time\nimageset = glob(train_dir + \"*\/*\")\nrandom_images = [np.random.choice(imageset) for i in range(9)]\n\nprint('Display Random Images')\n\n# Adjust the size of your images\nplt.figure(figsize=(10,8))\n\n# Iterate and plot random images\nfor i in range(9):\n    plt.subplot(3, 3, i + 1)\n    img = cv2.imread(random_images[i])\n    orig = img.copy()\n    img = cv2.resize(img, (299,299))\n    img = img_to_array(img)\n    img = np.expand_dims(img, axis=0)\n    img = img\/255\n    prediction = model.predict(img)\n    \n    if (prediction < 0.5):\n        plt.title(\"Normal\", fontdict = {'fontsize' : 30})\n    \n    else:\n        plt.title(\"Pneumonia\", fontdict = {'fontsize' : 30})\n    plt.imshow(orig, cmap='gray')\n    plt.axis('off')\n    \n# Adjust subplot parameters to give specified padding\nplt.tight_layout()  ","0959c40e":"## Visualize the Dataset","a848d997":"## Importing libraries","2cca8169":"## Data Augmentation\n\nIn order to avoid overfitting problem, we need to perform augmentation on our dataset. We can make existing dataset even larger in this way. I am using ImageDataGenerator class to augment dataset. The methods used for Augmentation are rotation, zoom, width_shift, height_shift, horizontal_flip and rescale. Rescale is necessary for image normalization.   ","0bbaeaef":"We have way more images that are classified as pneumonia than normal. This shows that we have a imbalance in our data. for this notebook I am ignoring this imbalance.","9e0132fb":"## Traning  Convolution Neural Network\n\nI am trying EfficientNetB5 for 10 epochs with weights from ImageNet. To make our model more easier to understand, I have imported EfficientNetB5 from keras.application and appending GlobalAveragePooling, Dropout and Dense layer. ","3169db1e":"## What is Pneumonia\n\nPneumonia is a lung infection that can range from mild to so severe that you have to go to the hospital.\n\nIt happens when an infection causes the air sacs in your lungs (your doctor will call them alveoli) to fill with fluid or pus. That can make it hard for you to breathe in enough oxygen to reach your bloodstream.\n\nAnyone can get this lung infection. But infants younger than age 2 and people over age 65 are at higher risk. That\u2019s because their immune systems might not be strong enough to fight it.\n\nYou can get pneumonia in one or both lungs. You can also have it and not know it. Doctors call this walking pneumonia. Causes include bacteria, viruses, and fungi.  If your pneumonia results from bacteria or a virus, you can spread it to someone else. \n\n### Symptoms of Pneumonia\n\n<img src=\"https:\/\/assets-global.website-files.com\/5862e65e743316b605bc7fa4\/5c4fcdb8a6ea9c009b759bce_20190128-29-main-symptoms-of-infectious-pneumonia.jpg\">\n\nYour symptoms can vary depending on what\u2019s causing your pneumonia, your age, and your overall health. They usually develop over several days.\n\nCommon pneumonia symptoms include:\n\n1. Chest pain when you breathe or cough\n2. Cough that produces phlegm or mucus\n3. Fatigue and loss of appetite\n4. Fever, sweating, and chills\n5. Nausea, vomiting, and diarrhea\n6. Shortness of breath\n\n### Causes of Pneumonia\n\nBacteria, viruses, or fungi can cause pneumonia.\n\nCommon causes include:\n\n1. Flu viruses\n2. Cold viruses\n3. RSV virus (the top cause of pneumonia in babies age 1 or younger)\n4, Bacteria called Streptococcus pneumoniae and Mycoplasma pneumoniae\n\n### Pneumonia Diagnosis\n\nYour doctor will start with questions about your symptoms and your medical history, like whether you smoke and whether you\u2019ve been around sick people at home, school, or work. Then, they\u2019ll listen to your lungs. If you have pneumonia, they might hear cracking, bubbling, or rumbling sounds when you breathe in.\n\nIf your doctor thinks you might have pneumonia, they\u2019ll probably give you tests, including:\n\n1. Blood tests to look for signs of a bacterial infection\n2. A chest X-ray to find the infection in your lungs and how far it\u2019s spread\n3. Pulse oximetry to measure the level of oxygen in your blood\n4. A sputum test to check the fluid in your lungs for the cause of an infection\n\nIf your symptoms started in the hospital or you have other health problems, your doctor might give you more tests, such as:\n\n1. An arterial blood gas test to measure the oxygen in a small amount of blood taken from one of your arteries\n2. Bronchoscopy to check your airways for blockages or other problems\n3. A CT scan to get a more detailed image of your lungs\n4. A pleural fluid culture, in which the doctor removes a small amount of fluid from the tissues around your lungs to look for bacteria that might cause pneumonia\n\nLet's watch a video\n","9d6f4ef4":"That's all for this notebook. If you like my work please upvote this... This motivate me.","c7932a4f":"From the above two distribution, we can see that Images are not having same shape. Let's find out images shape ditribution within training folder","b7993bf0":"## Training the Model","c89c352a":"We have data splitted in Train, Test and Validation. All three folders have Normal and Pneumonia Images. We have only 16 validation images which is not sufficient for better training, however I am ignoring imbalancing right now and try to get better accuracy with 16 images for validation only. Let's visualize how many images are there in each folder and category.","7b8ceb7f":"## Load the data and initialize file structure"}}