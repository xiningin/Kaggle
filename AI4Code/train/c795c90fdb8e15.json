{"cell_type":{"434c918c":"code","cd887cba":"code","64b0fc1f":"code","eb7127cd":"code","4ef8b744":"code","16e74c15":"code","bb27ce98":"code","94697a8e":"code","6bbed2f8":"code","4938dcb3":"code","740c04f8":"code","4fa2e80a":"code","15d937a6":"code","f6e9a968":"code","9a9ac87c":"code","ce70ef9a":"code","b58639ff":"code","90d6b62c":"code","3cfbb1e7":"code","5938b57a":"code","6c3d559a":"code","ab4aae5b":"code","77a86f48":"code","063ebbef":"code","fb2bc53e":"code","8790a132":"code","19d09275":"code","8f2b80cd":"code","ae1f67ad":"code","3381d052":"code","3a51aa8b":"code","cf2f723f":"code","80494c56":"markdown","f3832d9b":"markdown","e85dfd6c":"markdown","024d6326":"markdown"},"source":{"434c918c":"#Importing necessary libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime\nimport geopandas as gpd\nimport pycountry\nfrom math import pi\nimport plotly.offline as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected = True)\nimport plotly.graph_objs as go\nimport warnings\nwarnings.filterwarnings('ignore')\n\npd.set_option('display.max_columns', 500)\npd.set_option('display.max_rows', 500)\n\n","cd887cba":"#Read data\ndata=pd.read_csv('\/kaggle\/input\/fifa-21-player-ratings\/fifa21.csv', sep=';')\ndata.shape","64b0fc1f":"#Have a look at the data\ndata.head(5)","eb7127cd":"#check is there any missing value in the data\ndata.isnull().any()","4ef8b744":"#Some team values have space at the end because of scraping. For trimming spaces we use strip function!\ndata['team'] = data['team'].str.strip()","16e74c15":"#Some players play in more than one position. In the initial version of the data, they are being seperated with \"|\" character. \n#With this function, we are splitting them and storing them in seperate columns.\n\nfoo = lambda x: pd.Series([i for i in x.split('|')])\npos = data['position'].apply(foo)\npos.head(5)\n","bb27ce98":"#Create new columns and store these position info in those columns.\ndata['pos_1']=pos[0]\ndata['pos_2']=pos[1]\ndata['pos_3']=pos[2]\ndata['pos_4']=pos[3]\ndata['pos_5']=pos[4]\n\ndata.head(5)","94697a8e":"#Because of being splitted into seperate columns, we don't need original position info any more.\ndata.drop(['position'], axis = 1,inplace=True) ","6bbed2f8":"for col in ['age', 'overall', 'potential', 'hits']:\n    data[col] = data[col].astype(int)","4938dcb3":"#Create functions for getting the data according to player, country and team information.\ndef player_data(x):\n    return data.loc[data['name']==x]\n\ndef country_data(x):\n    return data[data['nationality'] == x][['name','overall','potential','pos_1','hits','age','team']]\n\ndef team_data(x):\n    return data[data['team'] == x][['name','overall','potential','pos_1','hits','age']]\n\n\n\n","740c04f8":"player_data('Lionel Messi')","4fa2e80a":"country_data('Turkey')","15d937a6":"team_data('Fenerbah\u00e7e SK')","f6e9a968":"#Five eldest players\neldest = data.sort_values('age', ascending = False)[['name', 'nationality', 'age']].head(5)\neldest.set_index('name', inplace=True)\nprint(eldest)","9a9ac87c":"#Five youngest players\nyoungest = data.sort_values('age', ascending = True)[['name', 'nationality', 'age']].head(5)\nyoungest.set_index('name', inplace=True)\nprint(youngest)","ce70ef9a":"# The oldest team\ndata.groupby(['team'])['age'].mean().sort_values(ascending = False).head(5)","b58639ff":"# The youngest team\ndata.groupby(['team'])['age'].mean().sort_values(ascending = True).head(5)","90d6b62c":"# The clubs with largest number of different countries\ndata.groupby(['team'])['nationality'].nunique().sort_values(ascending = False).head()","3cfbb1e7":"# The clubs with smallest number of different countries\ndata.groupby(['team'])['nationality'].nunique().sort_values(ascending = True).head()","5938b57a":"# Top five teams with the best players\ndata.groupby(['team'])['overall'].max().sort_values(ascending = False).head()","6c3d559a":"# Top five teams with the most potential players\ndata.groupby(['team'])['potential'].max().sort_values(ascending = False).head()","ab4aae5b":"# defining the features of players\n\nplayer_features = ('age', 'overall', 'hits', 'potential')\n\n# Top 2 features for every position in football\n\nfor i, val in data.groupby(data['pos_1'])[player_features].mean().iterrows():\n    print('Position {}: {}, {}'.format(i, *tuple(val.nlargest(2).index)))\n","77a86f48":"\n# Correlation heatmap\nplt.rcParams['figure.figsize']=(16,9)\nhmap=sns.heatmap(data[['age', 'overall', 'potential', 'hits']].corr(), annot = True, linewidths=.5, cmap='BuPu')\nhmap.set_title(label='Heatmap of dataset', fontsize=20)\nhmap;\n\n","063ebbef":"# Scater plot shows correlation between potential and other chosen features\ndef scatter_plot(df):\n    feats = ('age', 'overall', 'hits')\n    \n    for index, feat in enumerate(feats):\n        plt.subplot(len(feats)\/3+1, 3, index+1)\n        ax = sns.regplot(x = 'potential', y = feat, data = df)\n\nplt.figure(figsize = (12, 12))\nplt.subplots_adjust(hspace = 0.4)\n\nscatter_plot(data)","fb2bc53e":"\n# Histogram: number of players's age\nsns.set(style =\"dark\", palette=\"colorblind\", color_codes=True)\nx = data.age\nplt.figure(figsize=(12,8))\nax = sns.distplot(x, bins = 58, kde = False, color='r')\nax.set_xlabel(xlabel=\"Player\\'s age\", fontsize=16)\nax.set_ylabel(ylabel='Number of players', fontsize=16)\nax.set_title(label='Histogram of players age', fontsize=20)\nplt.show()\n\n","8790a132":"# Compare six teams in relation to age\nturkish_teams = ('Fenerbah\u00e7e SK', 'Galatasaray SK', 'Besiktas JK', 'Sivasspor', 'Medipol Basaksehir FK', 'Trabzonspor')\ndf_team = data.loc[data['team'].isin(turkish_teams) & data['age']]\n\n\n\nfig, ax = plt.subplots()\nfig.set_size_inches(20, 10)\nax = sns.violinplot(x=\"team\", y=\"age\", data=df_team);\nax.set_title(label='Distribution of age in some teams', fontsize=20);","19d09275":"# Compare six teams in relation to overall ratings\nturkish_teams = ('Fenerbah\u00e7e SK', 'Galatasaray SK', 'Besiktas JK', 'Sivasspor', 'Medipol Basaksehir FK', 'Trabzonspor')\ndf_team = data.loc[data['team'].isin(turkish_teams)  & data['overall'] ]\n\nax = sns.barplot(x=df_team['team'], y=df_team['overall'], palette=\"rocket\");\nax.set_title(label='Distribution overall in several teams', fontsize=20);","8f2b80cd":"\nplt.figure(figsize = (18, 8))\nplt.style.use('fivethirtyeight')\nax = sns.countplot('pos_1', data = data, palette = 'bone')\nax.set_xlabel(xlabel = 'Different Positions in Football', fontsize = 16)\nax.set_ylabel(ylabel = 'Count of Players', fontsize = 16)\nax.set_title(label = 'Comparison of Positions and Players', fontsize = 20)\nplt.show()","ae1f67ad":"#Spider plot\n\nidx = 1\nplt.figure(figsize=(15,45))\nfor position_name, features in data.groupby(data['pos_1'])[player_features].mean().iterrows():\n    top_features = dict(features.nlargest(5))\n    \n    # number of variable\n    categories=top_features.keys()\n    N = len(categories)\n\n    # We are going to plot the first line of the data frame.\n    # But we need to repeat the first value to close the circular graph:\n    values = list(top_features.values())\n    values += values[:1]\n\n    # What will be the angle of each axis in the plot? (we divide the plot \/ number of variable)\n    angles = [n \/ float(N) * 2 * pi for n in range(N)]\n    angles += angles[:1]\n\n    # Initialise the spider plot\n    ax = plt.subplot(9, 3, idx, polar=True)\n\n    # Draw one axe per variable + add labels labels yet\n    plt.xticks(angles[:-1], categories, color='grey', size=8)\n\n    # Draw ylabels\n    ax.set_rlabel_position(0)\n    plt.yticks([25,50,75], [\"25\",\"50\",\"75\"], color=\"grey\", size=7)\n    plt.ylim(0,100)\n    \n    plt.subplots_adjust(hspace = 0.5)\n    \n    # Plot data\n    ax.plot(angles, values, linewidth=1, linestyle='solid')\n\n    # Fill area\n    ax.fill(angles, values, 'b', alpha=0.1)\n    \n    plt.title(position_name, size=11, y=1.1)\n    \n    idx += 1 ","3381d052":"\n\nsns.lineplot(data['age'], data['overall'], palette = 'Wistia')\nplt.title('Age vs Overall', fontsize = 20)\n\nplt.show()\n\n","3a51aa8b":"\nsns.lineplot(data['age'], data['potential'], palette = 'Wistia')\nplt.title('Age vs Potential', fontsize = 20)\n\nplt.show()","cf2f723f":"\n\nrating = pd.DataFrame(data.groupby(['nationality'])['overall'].sum().reset_index())\ncount = pd.DataFrame(rating.groupby('nationality')['overall'].sum().reset_index())\n\ntrace = [go.Choropleth(\n            colorscale = 'YlOrRd',\n            locationmode = 'country names',\n            locations = count['nationality'],\n            text = count['nationality'],\n            z = count['overall'],\n)]\n\nlayout = go.Layout(title = 'Country vs Overall Ratings')\n\nfig = go.Figure(data = trace, layout = layout)\npy.iplot(fig)\n         \n\n","80494c56":"# *2. Data Preprocessing and Exploratary Data Analysis*","f3832d9b":"# ***FIFA 21 Exploratary Data Analysis and Data Visualization***\n\n\n# *1. Import libraries and have a look at the data!*\n","e85dfd6c":"# *4. Some last words*\n\nI used Fifa 21 Player Ratings dataset which is scraped from https:\/\/www.fifaindex.com in this notebook. These ratings are not the final version of Fifa 21 ratings. Some players' team information and statistical scores were being updated after Fifa 20 release.\n\nYou can reach the dataset from https:\/\/www.kaggle.com\/ahmettezcantekin\/fifa-21-player-ratings\n\nI believe that this dataset is so attractive for data analysis and data visiualization. \nAlso, I want to give some credit about these graph to:\n\nRoshan Sharma, https:\/\/www.kaggle.com\/roshansharma\/fifa-data-visualization\n\nDaria Czerniawko, https:\/\/www.kaggle.com\/dczerniawko\/fifa19-analysis\n\n\n\nIf you have any ideas to feedback please let me know in comments, and if you liked my work please don't forget to vote, thank you!\n\n![](https:\/\/i2.cnnturk.com\/i\/cnnturk\/75\/650x325\/5ebb9392b57f150ec84c2440.jpg)","024d6326":"# *3. Data Visualization*"}}