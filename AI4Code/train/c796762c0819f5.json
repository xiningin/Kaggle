{"cell_type":{"30559f0c":"code","6d71b6e3":"code","a9665f7d":"code","755a007f":"code","26f7149c":"code","3570a14d":"code","57e00808":"code","d74bf990":"code","8a540e73":"code","48fb71b9":"code","736d3374":"code","86e688be":"code","a2b1ed37":"code","38e3961f":"code","9bdfc9ae":"code","ab0bab97":"code","9f5ade35":"code","5633225a":"code","5f613a5a":"code","7c32bd2c":"markdown","7f3f5278":"markdown","482662d6":"markdown"},"source":{"30559f0c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6d71b6e3":"TIME_FORMAT = '%Y-%m-%d %H:%M:%S'\n\ntrain_df = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/train.csv')\ntrain_df['date_time'] = pd.to_datetime(train_df['date_time'], format=TIME_FORMAT)\n\ntest_df = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/test.csv')\ntest_datetime = test_df['date_time']\ntest_df['date_time'] = pd.to_datetime(test_df['date_time'], format=TIME_FORMAT)\n\ntrain_df.head()","a9665f7d":"x_df = train_df[[c for c in train_df.columns if not c.startswith('target_')]]\ny_df = train_df[[c for c in train_df.columns if c.startswith('target_')]]\nx_df.head()","755a007f":"y_df.head()","26f7149c":"import seaborn as sns\nimport matplotlib.pyplot as plt \n\nsns.set_theme(style=\"darkgrid\")\n\nplt.figure(figsize=(20, 6))\nsns.lineplot(x=\"date_time\", y=\"deg_C\", data=x_df)\nsns.lineplot(x=\"date_time\", y=\"deg_C\", data=test_df)\nplt.legend(['Training', 'Testing'])\nplt.show()","3570a14d":"import seaborn as sns\nimport matplotlib.pyplot as plt \n\nsns.set_theme(style=\"darkgrid\")\n\nplt.figure(figsize=(20, 6))\nsns.lineplot(x=\"date_time\", y=\"absolute_humidity\", data=x_df)\nsns.lineplot(x=\"date_time\", y=\"absolute_humidity\", data=test_df)\nplt.legend(['Training', 'Testing'])\nplt.show()","57e00808":"import seaborn as sns\nimport matplotlib.pyplot as plt \n\nsns.set_theme(style=\"darkgrid\")\n# deg_C\trelative_humidity\tabsolute_humidity\tsensor_1\tsensor_2\tsensor_3\tsensor_4\tsensor_5\nplt.figure(figsize=(24, 6))\nplt.subplot(1, 4, 1), sns.histplot(x=\"deg_C\", data=x_df)\nplt.subplot(1, 4, 2), sns.histplot(x=\"relative_humidity\", data=x_df)\nplt.subplot(1, 4, 3), sns.histplot(x=\"absolute_humidity\", data=x_df)\nplt.subplot(1, 4, 4)\nsns.histplot(x=\"sensor_1\", data=x_df, bins=np.arange(0, 3000, 50), color='C1', alpha=.5)\nsns.histplot(x=\"sensor_2\", data=x_df, bins=np.arange(0, 3000, 50), color='C2', alpha=.5)\nsns.histplot(x=\"sensor_3\", data=x_df, bins=np.arange(0, 3000, 50), color='C3', alpha=.5)\nsns.histplot(x=\"sensor_4\", data=x_df, bins=np.arange(0, 3000, 50), color='C4', alpha=.5)\nsns.histplot(x=\"sensor_5\", data=x_df, bins=np.arange(0, 3000, 50), color='C5', alpha=.5)\nplt.show()","d74bf990":"for column in x_df.columns[1:]:\n    mean, std = x_df[column].mean(), x_df[column].std()\n    x_df[column] = (x_df[column] - mean) \/ std\n    test_df[column] = (test_df[column] - mean) \/ std","8a540e73":"test_df","48fb71b9":"import seaborn as sns\nimport matplotlib.pyplot as plt \n\nsns.set_theme(style=\"darkgrid\")\n# deg_C\trelative_humidity\tabsolute_humidity\tsensor_1\tsensor_2\tsensor_3\tsensor_4\tsensor_5\nplt.figure(figsize=(24, 6))\nplt.subplot(1, 4, 1), sns.histplot(x=\"deg_C\", data=x_df)\nplt.subplot(1, 4, 2), sns.histplot(x=\"relative_humidity\", data=x_df)\nplt.subplot(1, 4, 3), sns.histplot(x=\"absolute_humidity\", data=x_df)\nplt.subplot(1, 4, 4)\nsns.histplot(x=\"sensor_1\", data=x_df, bins=np.linspace(-3, 3, 50), color='C1', alpha=.5)\nsns.histplot(x=\"sensor_2\", data=x_df, bins=np.linspace(-3, 3, 50), color='C2', alpha=.5)\nsns.histplot(x=\"sensor_3\", data=x_df, bins=np.linspace(-3, 3, 50), color='C3', alpha=.5)\nsns.histplot(x=\"sensor_4\", data=x_df, bins=np.linspace(-3, 3, 50), color='C4', alpha=.5)\nsns.histplot(x=\"sensor_5\", data=x_df, bins=np.linspace(-3, 3, 50), color='C5', alpha=.5)\nplt.show()","736d3374":"from sklearn.model_selection import train_test_split\nx = x_df.iloc[:, 1:].to_numpy()\ny = y_df.to_numpy()\nx_train, x_val, y_train, y_val = train_test_split(x, y)\nx_train.shape, y_train.shape, x_val.shape, y_val.shape","86e688be":"from sklearn.ensemble import RandomForestRegressor\n\nrf = RandomForestRegressor()\nrf.fit(x_train, y_train[:,0])","a2b1ed37":"# Scoring\nfrom sklearn.metrics import mean_squared_error\ny_pred = rf.predict(x_val) #y_val\nmean_squared_error(y_pred, y_val[:, 0])","38e3961f":"from sklearn.multioutput import MultiOutputRegressor\nmorf = MultiOutputRegressor(RandomForestRegressor())\nmorf.fit(x_train, y_train)","9bdfc9ae":"y_pred = morf.predict(x_val)\nfor i in range(3):\n    print(f'{mean_squared_error(y_pred[:, i], y_val[:, i])}')","ab0bab97":"x_test = test_df.iloc[:, 1:].to_numpy()\ny_test_pred = morf.predict(x_test)\n","9f5ade35":"submission_df = pd.DataFrame(y_test_pred)\nsubmission_df.columns = y_df.columns\nsubmission_df = pd.concat([test_df['date_time'], submission_df], axis=1)\nsubmission_df.to_csv('solution2.csv', index=False)","5633225a":"submission_df.date_time.dt.strftime('%Y-%m-%d %H:%M:%S')\n","5f613a5a":"test_datetime","7c32bd2c":"# Submission","7f3f5278":"## Trying a single output regression (`target_carbon_monoxide`)","482662d6":"## Multiple output regression"}}