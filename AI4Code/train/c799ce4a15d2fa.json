{"cell_type":{"b3ffb0d8":"code","587c655a":"code","05678635":"code","1c95ea52":"code","4c966d4b":"code","9d15c4e6":"code","abda03af":"code","176f97e3":"code","2fc11c88":"code","69f50236":"code","d97a360c":"code","071250f0":"code","7db70383":"code","2a632dab":"code","629bea40":"code","abdfc7ce":"code","fc055ee8":"code","a5a4fd04":"code","07788f7c":"code","93476738":"code","b1920eeb":"code","9a92160b":"code","aac99725":"code","1816f06c":"code","c564e3bf":"code","8f6c20ac":"code","39113a32":"code","9ffaff56":"code","9c3799d9":"code","4fc8bfa3":"code","5e2e82b0":"code","f3917ef8":"code","2bc96cd5":"code","8004b25f":"code","da66ade8":"code","1f67b87a":"code","060a2788":"code","10b80489":"code","2b494852":"code","4649692a":"code","d75099a6":"code","9a3b4fc8":"code","7c8c0ccd":"code","7774a511":"code","d96b8c67":"code","37280265":"code","43104cdd":"code","07ddbd2f":"code","fab93070":"code","05a28592":"code","7e97454e":"code","f4909b27":"code","a6ceeac9":"code","52de2ef1":"code","bba9c965":"code","413d2091":"code","7ef77370":"code","e2527df8":"code","06f1fcb9":"code","c0edaf12":"code","69f91b59":"code","2e0dd1a2":"code","8623b3e9":"code","0c1dce9e":"code","2e7ce7fe":"code","47ac2934":"code","1d8e167a":"code","5ae1a188":"code","b6bbee7b":"code","916fa7b2":"code","981434fe":"code","049b2f72":"code","e5cd2d90":"code","d0bf898e":"code","e5d2b5bb":"code","1cb25822":"code","9ef406f8":"code","ded5701c":"code","81f3529f":"code","08c6361b":"code","8212e2a8":"code","713cc43c":"code","a10f4193":"code","5da2f819":"code","f4bfe6ca":"code","73e6fa2b":"code","c523d4bb":"code","092e8820":"code","3bf4a5ce":"code","a226e2b9":"code","77409eb8":"code","eb268b88":"code","c4852e95":"code","e10e59f6":"code","c5a70ea3":"markdown","0f1cf9fc":"markdown","035f5ae2":"markdown","7743679b":"markdown","6319dab8":"markdown","02515f6d":"markdown","ccdb3b1d":"markdown","150b4aa1":"markdown","1fb69e02":"markdown","51875863":"markdown","06dbf899":"markdown","92d505a7":"markdown","e4564184":"markdown","d2e1d38c":"markdown","165aadeb":"markdown","4bd785ef":"markdown","673b80da":"markdown","a85467fa":"markdown","2f47239f":"markdown","e4adba59":"markdown","d6d10892":"markdown","fd2a41c7":"markdown","876fe4c4":"markdown","425c56c5":"markdown","022aa2a3":"markdown","d0571775":"markdown","ba5e4b39":"markdown","b58d5f19":"markdown","1714c866":"markdown","80fccc32":"markdown","142c9c6b":"markdown","6f0ea052":"markdown","3dba04c4":"markdown","ad693097":"markdown","843543b0":"markdown","c6a9a998":"markdown","a1ef5014":"markdown","f35cebbc":"markdown","c8ae4c38":"markdown","d2f9ef7e":"markdown","0fe5e8a4":"markdown","59863df7":"markdown","d92b64df":"markdown"},"source":{"b3ffb0d8":"import nltk\nimport time \nimport pandas as pd \nimport  numpy as np\nfrom collections import Counter\nimport time \nfrom control import *\nfrom clean import *\nfrom clean_time import *\nfrom clean_age import *\nfrom text_analysis import *\nfrom python_expansion import *\nfrom jengineer import *","587c655a":"Control.v()\nClean.v()\nCTime.v()\nCage.v()\nTextAnalysis.v()\nPexpansion.v()\nJEngineer.v()","05678635":"%%time\nstart_all = time.time()\n# import all datasets\ncanada_cases = pd.read_csv(\"\/kaggle\/input\/coronaviruscovid19-canada\/cases.csv\")\ncanada_dead = pd.read_csv(\"\/kaggle\/input\/coronaviruscovid19-canada\/mortality.csv\")\n\nindia_data  = pd.read_csv(\"\/kaggle\/input\/covid19india\/data.csv\")\nindia_wiki = pd.read_csv(\"\/kaggle\/input\/covid19-coronavirus-patient-list-karnataka-india\/Corona Covid19 Karnataka.csv\")\n\nfrance = pd.read_csv(\"\/kaggle\/input\/coronavirus-france-dataset\/patient.csv\")\ntunisia = pd.read_csv(\"\/kaggle\/input\/coronavirus-tunisia\/Coronavirus_Tunisia.csv\")\njapan = pd.read_csv(\"\/kaggle\/input\/close-contact-status-of-corona-in-japan\/COVID-19_Japan_Mar_07th_2020.csv\")\nindonesia = pd.read_csv(\"\/kaggle\/input\/indonesia-coronavirus-cases\/patient.csv\")\nkorea = pd.read_csv(\"\/kaggle\/input\/coronavirusdataset\/PatientInfo.csv\")\nnew_zealand = pd.read_csv(\"\/kaggle\/input\/covid19-nz\/COVID19-NZ-known-cases (updated 23-3.2020).csv\")\nguatemala = pd.read_csv(\"\/kaggle\/input\/covid19-guatemala\/patients.csv\")\nsingapore = pd.read_csv(\"\/kaggle\/input\/singapores-covid19-cases\/singapore_covid-19_sg_cases_updated-2020-04-14.csv\")\nvietnam = pd.read_csv(\"\/kaggle\/input\/vietnam-covid19-patient-dataset\/Vietnam_COVID-19_patient_data_May10_2020.csv\")\ncolombia = pd.read_csv(\"\/kaggle\/input\/covid19co\/covid19co.csv\")\nmexico = pd.read_csv(\"\/kaggle\/input\/covid19-mx\/covid-19_general_MX.csv\")\nkerla = pd.read_csv(\"\/kaggle\/input\/covid19inkerala\/PatientData.csv\")\nphilippines  = pd.read_excel(\"\/kaggle\/input\/covid19-philippines-edges\/COVID-19 Philippines.xlsx\", sheet_name=\"Cases\")\ntoronto = pd.read_csv(r\"\/kaggle\/input\/toronto-covid19-cases\/COVID19 cases Toronto.csv\")\nhong_kong =  pd.read_csv(r\"\/kaggle\/input\/covid-19-hong-kong-cases\/covid19case_full_17_08.csv\")\nworld = pd.read_csv(r\"\/kaggle\/\/input\/covid19-re\/06122020latestdata.csv\")\nusa =  pd.read_csv(r\"\/kaggle\/input\/covid19-case-surveillance-public-use-dataset\/COVID-19_Case_Surveillance_Public_Use_Data.csv\")\n\nIOS_country_code = pd.read_csv(r\"\/kaggle\/input\/iso-country-codes-global\/wikipedia-iso-country-codes.csv\")","1c95ea52":"# Only include confirm cases\ntoronto = toronto[toronto.Classification == \"CONFIRMED\"]","4c966d4b":"# Only include confirm cases\nhong_kong = hong_kong[hong_kong.Confirmed == \"Confirmed\"]\n\nClean.clean_by_comparison(hong_kong, \"HK_Non_HK_resident\", \"HK_Non_HK_resident\",\n[\"Unknown\" , \"Non-HK resident\",\"Non-HK Resident\" ], np.nan)\n\n# Remove the cases that belonging to China\nhong_kong = hong_kong[hong_kong.HK_Non_HK_resident.notnull()]","9d15c4e6":"# Consolidation of information from canada_dead to canada_cases\nindexs = canada_dead.index[canada_dead.case_id.notnull()]\ncanada_cases['deceased_date'] = np.nan\n\nfor read_indx in indexs:   \n    case_id_dead = canada_dead.loc[read_indx, \"case_id\"]\n    write_indx = canada_cases.index[canada_cases.case_id == case_id_dead ]\n    canada_cases.loc[write_indx, 'deceased_date'] = canada_dead.loc[read_indx, 'date_death_report']","abda03af":"# duplicated  exsam\np = [ 'age', 'sex', 'health_region','province', 'country', \n     'date_report', 'report_week', 'travel_yn','travel_history_country', 'locally_acquired', \n     'case_source','additional_info', 'additional_source', 'method_note']\n\no = [ 'age', 'sex','health_region', 'province', 'country', 'date_death_report',\n       'death_source', 'additional_info', 'additional_source']\n\nprint(len(canada_cases.index[canada_cases.duplicated()== True]))\n\ncanada = canada_cases\ncanada","176f97e3":"# RAM save\ndel canada_dead, o,p","2fc11c88":"usa = usa[usa.current_status == \"Laboratory-confirmed case\"]","69f50236":"# Only include confirm cases\nmexico = mexico[mexico[\"RESULTADO\"] == 1]","d97a360c":"datasets_all = [france, tunisia, japan, indonesia, korea, new_zealand, canada, guatemala, singapore, philippines, india_data,\n            india_wiki,vietnam, colombia, mexico ,world, kerla, hong_kong, toronto, usa]\ndatasets_name_all = [\"france\", \"tunisia\", \"japan\", \"indonesia\", \"korea\", \"new_zealand\", \"canada\", \"guatemala\" , \"singapore\", \n                 \"philippines\", \"india_data\", \"india_wiki\", \"vietnam\", \"colombia\", \"mexico\",\"world\", \"kerla\", \"hong_kong\", \"toronto\", \"usa\"]","071250f0":"o = []\nfor i in range(len(datasets_all)):\n    print(datasets_name_all[i],datasets_all[i].shape)\n    o.append(datasets_all[i].shape[0])\nprint(\"\\nnum of i \" + str(sum(o)))","7db70383":"garbge = [print(\"\\n\"+datasets_name_all[i], [i for i in datasets_all[i].columns]) for i in range(len(datasets_name_all))]","2a632dab":"%%time\nfrance.rename(columns={\"health\":\"severity_illness\",\"status\":\"treatment\"}\n              , inplace = True)\n\ntunisia.rename(columns={\"date\":\"confirmed_date\", \"gender\":\"sex\", \"situation\":\"severity_illness\", \n                        \"return_from\":\"infection_place\", \"health\":\"background_diseases_origin\", \"hospital_name\":\"treatment\"},\n                           inplace = True)\n\njapan.rename(columns={\"No.\":\"id\", \"Fixed date\":\"confirmed_date\",\"Age\":\"age_band\", \"residence\":\"region\",\n                      \"Surrounding patients *\":\"infected_by\"}, inplace = True)\n\nindonesia.rename(columns={\"patient_id\":\"id\",\"gender\": \"sex\", \"province\":\"region\", \"hospital\":\"treatment\",\n                          \"contacted_with\":\"infected_by\", \"current_state\":\"severity_illness\"}, inplace = True)\n\nkorea.rename(columns={\"patient_id\":\"id\", \"disease\":\"more_data_and_background_diseases_binary\",\n                      \"state\":\"severity_illness\",\n                      \"province\":\"region\", \"infection_case\" :\"infection_place\",\n                      \"symptom_onset_date\":\"date_onset_symptoms\", \"age\": \"age_band\"}, inplace = True)\n\nworld = world.rename(columns={ \"province\":\"region\", \"date_confirmation\": \"confirmed_date\",\n                              \"chronic_disease_binary\":\"more_data_and_background_diseases_binary\", \n                              \"chronic_disease\":\"background_diseases_origin\",\n                              \"outcome\":\"origin_severity_illness\", \n                              \"travel_history_location\":\"infection_place\",'travel_history_dates': \"return_date\",\n                              \"symptoms\": \"symptoms_origin\"})\n\nnew_zealand.rename(columns={'Location':'city', 'Age Band':\"age_band\", 'Gender': \"sex\", \n                          \"Detection Date\": \"confirmed_date\", 'Arrival Date':\"return_date\",\n                          'Origin of Travel (Country)':\"infection_place\", }, inplace = True)\n\nguatemala.rename(columns={'department': 'region', 'illness':\"background_diseases\", 'arrival_date':\"return_date\", \n                          'infection_cause': \"infection_place\",'symptom_start_date':\"date_onset_symptoms\",\n                          'confirmation_date':'confirmed_date','recovery_date':'released_date'},\n                             inplace = True)\n\nsingapore.rename(columns={\"case\": \"id\", 'date':'confirmed_date', 'gender':\"sex\", 'hospital':\"treatment\", \n                          'imported':'infection_place', 'link':\"infected_by\",\n                          'date discharged':'released_date'}, inplace = True)\n\nphilippines.rename(columns={'Sex':\"sex\", 'Age': 'age','Residence in the Philippines':'city', \n                            \"Travel History\":\"infection_place\", 'Epi_Link':\"infected_by\", \n                            \"Date of Onset of Symptoms\":\"date_onset_symptoms\", 'travel_history_dates': \"return_date\", \n                            \"Date of Lab Confirmation\":'confirmed_date', \"Admission \/ Consultation\":\"treatment\",\n                            'Date of Admission':\"date_admission_hospital\", \"Symptoms\": \"symptoms_origin\", \n                            'Other disease':\"background_diseases_origin\", 'Health Status':\"severity_illness\", \n                            \"Date of Final Status (recovered\/expired)\":'date_death_or_discharge'}, inplace = True)\n\n\nindia_data.rename(columns={\"detected_city\":'city', 'detected_state':'region', 'diagnosed_date':'confirmed_date', \n                           'gender':\"sex\", 'current_status':\"severity_illness\", \n                           \"notes\":'infection_place', 'contacts':\"link_sicks\", \n                           'status_change_date':'date_death_or_discharge',\n                           'deceased':'deceased_date', 'link_sicks':\"infected_by\"}, inplace = True)\n\nindia_wiki.rename(columns={'Patient Number':'id', 'Date Confirmed':'confirmed_date', 'Status':\"severity_illness\", \n                           'gender':\"sex\", 'current_status':\"severity_illness\", 'Contact With':\"infected_by\", 'Outcome Date':'date_death_or_discharge',\n                           \"Patient Location\":'city','Sex':\"sex\", 'Age': 'age','Comments':\"link_sicks\"}, inplace = True)\n\n\ncanada.rename(columns={'province':'region', 'date_report':'confirmed_date',\n                       'travel_history_country':\"infection_place\",\n                       'current_status':\"severity_illness\", \n                        'locally_acquired':\"infection_cause\", \"Patient Location\":'city',\n                        'Sex':\"sex\", 'Age': 'age_band','Comments':\"link_sicks\"}, inplace = True)\n\nvietnam.rename(columns={\"ID\":\"id\",\"Gender\": \"sex\", 'Age': \"age\", 'Detection Location':\"region\", \"Hospital\":\"treatment\",\n                        'Confirmed Date': \"confirmed_date\", \n                        'Travel Country, Correct':\"infection_place\",\"Source of Infection\":\"infected_by\", \n                        'Detail Symptoms When Confirmed (clean up)': \"symptoms_origin\", \n                        'Flight ID (Date)':\"return_date\", \n                        'Underlying Health Condition': \"background_diseases_origin\", 'Discharged Date': \"released_date\",\n                        'Critical\/severe condition':\"severity_illness\"}, inplace = True)\n\nmexico.rename(columns={'SEXO': \"sex\", 'EDAD': \"age\",\n                        'TIPO_PACIENTE':\"treatment\",'FECHA_INGRESO': \"confirmed_date\", \n                        'FECHA_SINTOMAS': \"date_onset_symptoms\", 'FECHA_DEF': \"deceased_date\"}, inplace = True)\n\ncolombia.rename(columns={\"id\": 'ID DE CASO',\n                         'SEXO': \"sex\", 'EDAD': \"age\", \n                         'NOMBRE DEPARTAMENTO':\"region\",\n                         'NOMBRE MUNICIPIO': \"city\",\n#                          \"CODIGO ISO DEL PAIS\" : \"country\", ???\n                         'UBICACION DEL CASO':\"treatment_origin\",\n#                          'FECHA DE DIAGNOSTICO': \"confirmed_date\",\n#                          'FECHA DE INICIO DE SINTOMAS': \"date_onset_symptoms\",\n#                         'FECHA RECUPERADO': \"released_date\"\n#                          ,'FECHA DE MUERTE': \"deceased_date\",\n                        \"ESTADO\":\"severity_illness\",\n                         'TIPO DE CONTAGIO': \"infection_place\", \n                        \"TIPO DE RECUPERACION\": \"recovery_test\"}, inplace = True)\n\n\nkerla.rename(columns={'Gender': \"sex\", 'Age Bracket': \"age\", \"Origin Country\": \"country\",\n                         'Notes':\"infection_place\" , 'Related Patients': \"infected_by\",\n                         'Date Announced': \"confirmed_date\", \n                         'Released': \"released_date\",'Deceased': \"deceased_date\",\n                        'Status':\"severity_illness\", 'Residence City, District':\"city\"}, inplace = True)\n\nhong_kong.rename(columns={'Gender': \"sex\", 'Age':\"age\", 'Date_of_onset': \"date_onset_symptoms\",\n                          'Hospitalised_Discharged_Decease':\"severity_illness\" , \n                          'Date_of_laboratory_confirmation': \"confirmed_date\",\n                         'District':\"region\"}, inplace = True)\n\n\ntoronto.rename(columns={'Client Gender': \"sex\", \"Age Group\": \"age_band\", 'Episode Date': \"date_onset_symptoms\",\n                          'Outcome':\"severity_illness\" ,\"treatment\":\"Ever Hospitalized\" }, inplace = True)\n\nusa.rename(columns={ \"onset_dt\": \"date_onset_symptoms\", \n                    'age_group': \"age_band\",\n                   }, inplace = True)","629bea40":"%%time\nfrance  = france.drop([ 'group', 'infection_reason', 'infection_order', 'contact_number', 'source', 'comments'],axis=1)\n\nindonesia = indonesia.drop(['nationality'],axis=1)\n\njapan = japan.drop([\"Close contact situation\"],axis=1)\n\nkorea = korea.drop([\"contact_number\"],axis=1)\n\nnew_zealand = new_zealand.drop(['MOH Case Number',\"Contraction in NZ\", 'Outside of Infection Period', 'Origin of Travel (City)',\n                                'Travel Destination in NZ', 'Cities visited in Transit', 'Flight Numbers'],axis=1)\nguatemala = guatemala.drop(['birth_date','group','source'],axis=1)\n\nsingapore = singapore.drop(['nationality', 'cluster_local'],axis=1)\n\nphilippines = philippines.drop(['Nationality','Date of Announcement to the Public',\"Status\", 'Latitude', 'Longitude',\n                                'Residence Lat', 'Residence Long','Age Group','Location'],axis=1)\n\nindia_data = india_data.drop([\"id\",'government_id','nationality', 'detected_district', 'current_location', \n                              'current_location_pt', 'detected_city_pt'],axis=1)\n\nindia_wiki = india_wiki.drop(['Origin Location'],axis=1)\n\ncanada =  canada.drop(['case_id', 'provincial_case_id','health_region', 'report_week', 'travel_yn',\n                       'case_source','additional_source', 'method_note', \"additional_info\" ],axis=1)\n\nvietnam =  vietnam.drop(['Nationality', 'Treatment Location', 'Health Condition When Confirmed', \n                       'Detail Symptoms When Confirmed','Travel History',  'Reference 1', 'Reference 2', \n                       'Reference 3', 'Reference 4', 'Reference 5', 'Travel Country', 'Relationship', 'Infection Cluster'],\n                        axis=1)\n\nmexico =  mexico.drop( ['Unnamed: 0','SECTOR', 'ENTIDAD_UM', \n                        'NACIONALIDAD', 'ENTIDAD_RES'],\n                        axis=1)\n\ncolombia =  colombia.drop( ['FECHA REPORTE WEB', 'FECHA DE NOTIFICACION',\n    'CODIGO DIVIPOLA DEPARTAMENTO','CODIGO DIVIPOLA MUNICIPIO',  \n    'FECHA REPORTE WEB DIA', 'FECHA REPORTE WEB MES',\n    'FECHA REPORTE WEB ANIO', 'FECHA REPORTE WEB NOMBRE MES',\n    'FECHA REPORTE WEB DIA SEMANA', 'FECHA DE NOTIFICACION DIA', \n    'FECHA DE NOTIFICACION MES', 'FECHA DE NOTIFICACION ANIO',\n    'FECHA DE NOTIFICACION NOMBRE MES', 'FECHA DE NOTIFICACION DIA SEMANA',\n    'FECHA DE INICIO DE SINTOMAS DIA', 'FECHA DE INICIO DE SINTOMAS DIA SEMANA', \n    'FECHA DE MUERTE DIA','PERTENENCIA ETNICA', 'NOMBRE DEL GRUPO ETNICO',\n    'FECHA DE MUERTE MES', 'FECHA DE MUERTE ANIO',\n    'FECHA DE MUERTE NOMBRE MES', 'FECHA DE INICIO DE SINTOMAS MES',\n    'FECHA DE INICIO DE SINTOMAS ANIO',\n    'FECHA DE INICIO DE SINTOMAS NOMBRE MES', 'FECHA DE MUERTE DIA SEMANA',\n    'FECHA DE DIAGNOSTICO DIA', 'FECHA DE DIAGNOSTICO MES',\n    'FECHA DE DIAGNOSTICO ANIO', 'FECHA DE DIAGNOSTICO NOMBRE MES',\n    'FECHA DE DIAGNOSTICO DIA SEMANA', 'FECHA DE RECUPERACION DIA',\n    'FECHA DE RECUPERACION MES', 'FECHA DE RECUPERACION ANIO',\n    'FECHA DE RECUPERACION NOMBRE MES','NOMBRE DEL GRUPO ETNICO',\n    'FECHA DE RECUPERACION DIA SEMANA'],axis=1)\n\n\nworld = world.drop(['latitude', 'longitude', 'geo_resolution', \n                    'date_admission_hospital','lives_in_Wuhan', 'infection_place', \n                    'reported_market_exposure', 'additional_information','source', 'sequence_available', \n                    'notes_for_discussion', 'location', 'admin3', 'admin2', 'admin1', \n                    'country_new', 'admin_id', 'data_moderator_initials', 'travel_history_binary'],axis=1)\n\n\n\n\nkerla = kerla.drop(['1', 'Unnamed: 3', 'Date Added', 'Detected City', 'Detected District',\n                    'Transmission Type',  'Known Cluster', 'DHS (Orig) Patient Number', 'Origin State', \n                    'District Patient Number', 'City Patient Number','Recovery Time', 'Source(s)'],axis=1)\n\n\nhong_kong = hong_kong.drop(['OBJECTID',  'GlobalID','Case_no_', \"\u500b\u6848\u7de8\u865f\", \n                            'Name_of_hospital_admitted', \"\u767c\u75c5\u65e5\u671f\", \n                            'Confirmed',\"Shape__Area\", 'Shape__Length', 'Status_Chi', '\u5730\u5340', \n                            '\u6027\u5225', '\u5e74\u9f61', '\u5165\u4f4f\u91ab\u9662\u540d\u7a31', '\u4f4f\u9662_\u51fa\u9662_\u6b7b\u4ea1', '\u9999\u6e2f_\u975e\u9999\u6e2f\u5c45\u6c11', \n                            '\u500b\u6848\u5206\u985e', '\u78ba\u5b9a', 'Status', 'Case_classification',\"\u5be6\u9a57\u5ba4\u78ba\u8a3a\u5831\u544a\u65e5\u671f\", 'HK_Non_HK_resident'],axis=1)\n\n\ntoronto = toronto.drop([ 'Currently Intubated', 'Currently in ICU', 'Currently Hospitalized'\n                         ,'Reported Date','_id', 'Outbreak Associated','Neighbourhood Name',\n                         'FSA','Source of Infection', 'Classification' ],axis=1)\n\nusa = usa.drop([ 'Race and ethnicity (combined)', 'cdc_report_dt' ],axis=1)","abdfc7ce":"datasets_all = [france, tunisia, japan, indonesia, korea, new_zealand, canada, guatemala, singapore, philippines, india_data,\n            india_wiki,vietnam, colombia, mexico ,world, kerla, hong_kong, toronto, usa]\ndatasets_name_all = [\"france\", \"tunisia\", \"japan\", \"indonesia\", \"korea\", \"new_zealand\", \"canada\", \"guatemala\" , \"singapore\", \n                 \"philippines\", \"india_data\", \"india_wiki\", \"vietnam\", \"colombia\", \"mexico\",\"world\", \"kerla\", \"hong_kong\", \"toronto\", \"usa\"]","fc055ee8":"garbge = [print(\"\\n\"+datasets_name_all[i], [i for i in datasets_all[i].columns]) for i in range(len(datasets_name_all))]","a5a4fd04":"%%time\n# Manual care - handel on all \n# 1.61 s\n\n# most havy section 5 => 0.893\n\nt1 = []\nt1.append(time.time())  \n\n# japan\njapan[\"confirmed_date\"]  =japan[\"confirmed_date\"].apply(lambda x: np.nan if x=='investigating' else x)\nprint(1)\nt1.append(time.time())  \n\n# philippines \nphilippines.loc[ philippines.date_onset_symptoms == 'Asymptomatic', \"symptoms_origin\"] =\"no_symptom\"\n\nClean.clean_by_comparison(philippines, \"confirmed_date\", \"confirmed_date\",\n                          [ 'For Validation', 'For validation'], np.nan)\n\nClean.clean_by_comparison(philippines, \"date_onset_symptoms\", \"date_onset_symptoms\",\n                          ['Asymptomatic', 'For Validation', 'For validation'], np.nan)\nprint(2)\nt1.append(time.time()) \n\n# kerla \nClean.clean_by_comparison(kerla, \"deceased_date\", \"deceased_date\",\n                          [\"16\"], np.nan)\n\n# tunisia\ntunisia[\"return_date\"] = tunisia[\"return_date\"][tunisia[\"return_date\"] == 'Local'].apply(lambda x:np.nan)\nprint(3)\nt1.append(time.time()) \n\n# vietnam\nfor indx in vietnam.index[vietnam.released_date.notnull()]:\n    i = vietnam.released_date[indx]\n    if \"(\" in i:\n        vietnam.loc[indx, \"released_date\"] = np.nan\nt1.append(time.time()) \n\n# vietnam : return_date\nindx_full = []\nfor indx in vietnam.index[vietnam.return_date.notnull()]:\n    y = Clean.clean_str_replace(vietnam.return_date[indx], [\"(\",\")\"], \" \")\n    y = y.split(\" \")\n    \n    t = [x for x in y if \"\/\" in x]\n    if len(t)>0:\n        vietnam.loc[indx, \"return_date\"] = t[0]\n        indx_full.append(indx)\n\nl = list(vietnam.index[vietnam.return_date.notnull()].difference(indx_full))\nl.append([236])\nfor ind in l :\n    vietnam.loc[ind, \"return_date\"] = np.nan\nprint(4)\nt1.append(time.time()) \n\n# colombia\n# for col in [\"released_date\", \"deceased_date\", \"date_onset_symptoms\", \"confirmed_date\"]:\n#     colombia[col] = colombia[col].apply(lambda x: np.nan if x== \"-\" else x)\nprint(5)\nt1.append(time.time()) \n\n\n# mexico\nmexico[\"deceased_date\"] =mexico[\"deceased_date\"] .apply(lambda x: np.nan if x== \"9999-99-99\" else x)\nprint(6)\nt1.append(time.time()) \n\n# world\nindex_world = world.index[world[\"return_date\"] =='06.01.2020, 11.01.2020, 17.01.2020']\nClean.update_by_index(world, \"return_date\",index_world , '17.01.2020')\n\nindex_world = world.index[world[\"return_date\"] =='21.01.2020 - 23.012020']\nClean.update_by_index(world, \"return_date\",index_world , '21.01.2020 - 23.01.2020')\n\nindex_world = world.index[world[\"date_onset_symptoms\"] ==\"08.03.20202\"]\nClean.update_by_index(world, \"date_onset_symptoms\",index_world , \"08.03.2020\")\nprint(7)\n\n#  hong_kong \nhong_kong.loc[ hong_kong.date_onset_symptoms == 'Asymptomatic', \"symptoms\"] =\"no_symptom\"\nClean.clean_by_comparison(hong_kong , \"date_onset_symptoms\", \"date_onset_symptoms\",\n                          ['Asymptomatic', 'Unknown',\"Mid- July\", \"Pending\", 'Mid-March', \"January\"], np.nan)\nt1.append(time.time()) ","07788f7c":"%%time\n# user user 38.7 s\n\n\nt = []\nt.append(time.time()) \n# -confirmed_date-\nCTime.updat_s_time_basic_multi_df([france, korea, indonesia, tunisia, japan, canada,\n                             singapore, guatemala, philippines,india_wiki, india_data,\n                            mexico, kerla, hong_kong],\"confirmed_date\", False) # colombia,\nt.append(time.time())\nprint(7.5)\n\nCTime.updat_s_time_basic_multi_df([vietnam],\"confirmed_date\", \"%m\/%d\/%y\")\nt.append(time.time()) \nprint(8)\n\n# -deceased_date-\nCTime.updat_s_time_basic_multi_df([france, indonesia, korea,  \n                                   canada, guatemala, \n                                    mexico, kerla],\n                                  \"deceased_date\", False) # colombia,\nt.append(time.time())\nprint(9)\n\n# -released_date-\nCTime.updat_s_time_basic_multi_df([france, indonesia, korea, singapore, guatemala,\n                                   kerla], \"released_date\", False)  # colombia,\nCTime.updat_s_time_basic_multi_df([vietnam],\"released_date\", \"%m\/%d\/%y\")\nt.append(time.time()) \nprint(10)\n\n# -return_date-\nCTime.updat_s_time_basic_multi_df([tunisia, new_zealand, guatemala], \"return_date\", False)\nCTime.updat_s_time_basic_multi_df([vietnam],\"return_date\", \"%m\/%d\/%Y\")\nt.append(time.time()) \nprint(11)\n\n# -date_onset_symptoms-\nCTime.updat_s_time_basic_multi_df([ korea, philippines,\n                                   mexico, guatemala, hong_kong, \n                                   toronto ], \n                                  \"date_onset_symptoms\", False)# colombia, \n\nCTime.updat_s_time_basic_multi_df([usa],\"date_onset_symptoms\", \"%Y\/%m\/%d\")\nt.append(time.time()) \nprint(12)\n\n# -date_death_or_discharge-\nCTime.updat_s_time_basic_multi_df([ philippines, india_data, india_wiki, world], 'date_death_or_discharge', False)\nt.append(time.time()) \nprint(13)\n\n\nfor j in [\"confirmed_date\", \"return_date\", \"date_onset_symptoms\"]:\n    error = CTime.updat_s_time(world, j, \"-\", earliest=True)\n    print(error)\n    \nt.append(time.time()) ","93476738":"for x in range(0,8):\n    print(t1[x+1]-t1[x],x)","b1920eeb":"for x in range(0,8):\n    print(t[x+1]-t[x], x+7)","9a92160b":"datasets = [france, tunisia, japan, new_zealand, canada, guatemala, singapore, \n            philippines, india_data, india_wiki, vietnam, mexico, colombia, kerla, hong_kong, toronto, usa]\n\nsex_dict = {\"female\":[\"Woman\", \"F\", \"Female\", \"f\", \"FEMALE\", 2],\n            \"male\":[\"Man\", \"M\", \"male\\xa0?\", \"Male\", \"m\", \"MALE\", 1],\n            \"transgender\": [\"TRANSGENDER\"],\n            np.nan: [\"Checking\", \"investigating\", \"Not Reported\", \"x\", \"Unknown\",\n                     \"Unspecified\", \"UNKNOWN\",\"OTHER\", \"Missing\", \"Other\" ]}\n\nfor dataset in datasets:\n            dataset[\"sex\"] = dataset[\"sex\"].apply(lambda x: Pexpansion.get_key_from_dict_by_value(sex_dict,x))","aac99725":"datasets_all = [france, tunisia, japan, indonesia, korea, new_zealand, canada, guatemala, singapore, philippines, india_data,\n            india_wiki,vietnam, colombia, mexico ,world , kerla, hong_kong, toronto, usa]\nControl.examining_values_by_col (datasets_all , datasets_name_all , \"sex\") ","1816f06c":"%%time\n# 1min 7s\nsymptoms_bag_words = {\"pneumonia\":[\"pneumonia\",\"pneumon\"],\n                        \"hypertension\" : ['hypertens'],\n                        \"fever\":[\"fever\", 'febr' , 'feverish'], \n                        \"cough\": [\"cough\", 'dcough', 'toss', 'couh'],\n                        \"fatigue\":[\"fatigu\", 'fatigur','tired', 'lethargi', 'tire'],\n                        \"discomfort\": [\"discomfort\", 'unwel'],\n                        \"weakness\": [\"weak\", 'slump', 'somnol'],\n                        \"dizziness\": [\"dizzi\"],\n                        \"rhinorrhoea\": [\"rhinorrhoea\", 'rhinorrhea', 'cold'],\n                        \"sneezing\": [\"sneez\"],\n                        \"sputum\": [\"sputum\", \"expector\", 'phlegm', 'mucus'],\n                        \"headache\": [\"headach\"],\n                        \"backache\" :['backach'],\n                        \"diarrhea\": [\"diarrhea\", 'diarrhoea'],\n                        \"chills\": [\"chill\"],\n                        \"breathing difficulty\": [\"dyspnea\", \"dsypnea\"],\n                        \"rigor\": [\"rigor\"],\n                        \"pharyngalgia\": [\"pharyngalgia\", 'pharyng', 'pharynx'],\n                        \"no_symptom\": [\"asymptomat\", 'oligosymptomat', 'asymptomatic?'],\n                        \"nausea\": [\"nausea\"],\n                        \"myalgia\":[\"malais\", \"myalgia\", 'milagia', 'mialgia'],\n                        'anorexia':['anorexia', 'inapat', 'inappet'],\n                        \"conjunctivitis\" : ['conjunct'],\n                        \"toothache\" :['toothach'],\n                        \"vomiting\": ['vomit', 'emesi'],\n                        \"sweating\":['sweat'],\n                        \"wheezing\": ['wheez'], \n                        'gasp': ['gasp'],\n                        \"dysphagia\":['dysphagia'],\n                        \"sepsis\": ['sepsi'],\n                        \"gastritis\": ['gastriti'],\n                        \"hypoxia\" : ['hypoxia'],\n                        \"cardiac arrhythmia\": ['arrhythmia'],\n#                       \"ECMO\": ['ecmo'],\n                        'azotemia':['azotemia'],\n                     'influenza':['influenza'], \n                     \"rash\": [\"rash\"], \n                     \"atherosclerosis\": [\"atherosclerot\",'atherosclerosi'],\n                     \"diabetes\": [\"diabeti\"]}\n\nsymptoms_sentences_bag = {\"fever\":['flu', 'like'],\n                            \"nasal congestion\":['nasal', 'congest', 'discharg','flu', 'like'],\n                            \"pleural effusion\":['pleural', 'effus'],\n                            \"sore throat\":['sore', \"throat\",'flu', 'like', 'throath', 'throa'], \n                            \"pleuritic chest pain\": ['pleurit', 'chest', 'pain', 'pressur'],\n                            \"chest distress\":['chest', 'distress', 'tight'],\n                            \"muscular stiffness\":['muscular', 'stiff'],\n                            \"myalgia\":[ 'general', 'muscular',\"sore\", 'ach','muscl', \"pain\",'bodi', 'limb', 'flu', 'like'],\n                            \"joint pain\":[ 'stiff','joint', 'pain'],\n                            \"rhinorrhoea\": ['runni', 'nose','run'],\n                            \"stuffy nose\": ['stuffi', 'nose'],\n                            \"bleeding nose\":['bleed', 'nose'],\n                            \"weakness\": ['lack', 'energi','flu', 'like'],\n                            \"heart failure\":['heart', 'failur'],\n                            \"breathing difficulty\":['difficulti', 'breath','short', 'difficuti', 'distress','respiratori',\n                                                    'troubl', 'problem', 'sintoma', 'respirat', 'symptom', 'complaint'],\n                            \"esophageal reflux\":['esophag', 'reflux'],\n                            \"abdominal pain\":['abdomin', 'pain'],\n                            \"respiratory infection\":['pulmonari', 'inflamm', 'respiratori', 'infect','(arvi)', 'diseas'],\n                            \"bone pain\": ['bone', 'pain'],\n                            \"kidney failure\":['kidney', 'failur','renal', 'injuri'],\n                            \"aggressive pulmonary\":['aggress', 'pulmonari'], \n                            \"no_symptom\": ['no', 'symptom'],\n                            \"eye irritation\": ['eye', 'irrit'],\n                            \"lesions on chest\": ['lesion',  'chest'],\n                            \"dry mouth\":['dri', 'mouth'],\n                            \"dry throat\":['dri', 'throat'],\n                            \"acute coronary syndrome\": ['acut', 'coronari'],\n                            \"cardiac arrhythmia\": ['cardiac', 'arrhythmia', 'dysrhythmia'],\n                            \"septic shock\":['septic', 'shock', 'schock'], \n                            \"cardiogenic shock\":['cardiogen', 'shock'],\n                            \"heart attack\":['myocardi', 'infarct', 'myocordi'],\n                            \"electrolyte disorders\": ['multipl', 'electrolyt', 'imbal'],\n                            \"organ failure\": ['multipl', 'organ', 'failur'],\n                            \"primary myelofibrosis\":['primari', 'myelofibrosi'],\n                            \"myocardial dysfunction\":['myocardi', 'dysfunct'],\n                            \"cardiac arrest\" :['cardiopulmonari', 'arrest','cardiac', 'arrest'],\n                            \"respiratory failure\":['respiratori', 'failur'],\n                            \"difficulty walking\" :['difficulti', 'walk'],\n#                           \"oxygen mask\": ['oxygen', 'mask', \"oxi\"],\n#                           \"dialysis\" : ['dialysi'],\n#                           \"mechanical ventilation\":['mechan', 'ventil'],\n                            \"gastrointestinal bleeding\":['gastrointestin', 'bleed'],\n                          \"multisystem inflammatory syndrome to covid19\" : [\"syndrom\" ,\"secondari\" ,\"covid\"]\n\n\n}\n\nfor df in [ philippines, vietnam, world]:\n    TextAnalysis.analyze_text_for_multicategory_col(df,  \"symptoms_origin\" , \"symptoms\", symptoms_bag_words, symptoms_sentences_bag)\n\n    \nTextAnalysis.analyze_text_for_multicategory_col(philippines,  \"Final Diagnosis\" , \"diagnosis\", symptoms_bag_words, symptoms_sentences_bag)","c564e3bf":"Clean.unite_multicategries_columns(philippines,[ \"symptoms\", \"diagnosis\"])","8f6c20ac":"datasets_all = [france, tunisia, japan, indonesia, korea, new_zealand, canada, guatemala, singapore, philippines, india_data,\n            india_wiki,vietnam, colombia, mexico ,world , kerla]\n\nControl.examining_values_by_col(datasets_all , datasets_name_all , \"symptoms\") ","39113a32":"%%time\n# 17.2 s\nbackground_diseases_bag_words= {\"hypertension\":[\"hypertens\",'hypertenst'],\n                                \"tuberculosis\":['tuberculosi'],\n                                'myeloma':['myeloma'],\n                                'pneumonia': ['pneumonia'],\n                                \"diabetes\":['diabet', \"mellitus\"],\n                                \"tuberculosis\": [\"tuberculosi\"],\n                                \"atherosclerosis\":['atherosclerosi'],\n                                \"parkinson\": [\"parkinso\", \"madopar\", 'parkinson'],\n                                \"stenocardia\" : ['stenocardia'],\n                                \"hypertriglyceridemia\": ['hypertriglyceridemia',],\n                                \"hypothyroidism\":['hypothyroid'],\n                                \"obesity\": ['obes',],\n                                \"dyslipidemia\":['dyslipidemia', 'dislipidemia'], \n                                \"chronic obstructive pulmonary\": ['copd',],\n                                \"cardiomyopathy\":['cardiomyopathi'],\n                                \"hiv\": [\"hiv\",],\n                                \"asthma\": [\"asthma\",],\n                                \"azotemia\":[\"azotemia\"],\n                                \"encephalomalacia\": ['encephalomalacia'], \n                                \"on dialysis\": [\"dialysi\"],\n                                \"cardiovascular\":[\"cardiovascular\",'cardiac'],\n                                \"frequent ventricular premature beat\":[\"fvpb\"],\n                                \"stent  implanted\" :['stent'],\n                               'thalassemia':['thalassemia'],\n                               \"gastritis\":['gastriti'],\n                               \"leukemia\": ['leukemia']}\n\n\n\nbackground_diseases_sentences_bag ={\"hypertension\":['high', 'blood', 'pressur'],\n                                    \"prostate cancer\":['prostat', 'cancer'],\n                                    \"colon cancer\":['colon', 'cancer'],\n                                    \"coronary heart disease\": ['coronari', 'heart', 'arteri', 'ischem'], \n                                    \"coronary bypass surgery\": ['bypass', 'surgeri'],\n                                    \"lung cancer\":['lung', 'cancer'],\n                                    \"tongue cancer\":['tongu', 'cancer'],\n                                    \"valvular heart disease\":['valvular', 'heart'],\n                                    \"renal transplant\": ['renal', 'transplant'],\n                                    \"systemic arterial hypertension\":['system', 'hypertens'],\n                                    \"atrial fibrillation\":['atrial', 'fibril'],\n                                    \"kidney failure\":[ 'renal', \"insuffici\", 'kidney','injuri'],\n                                    \"chronic kidney disease\":['chronic', 'renal' ,'kidney', 'dz', 'diseas'],\n                                    \"impaired fasting glucose\":['impair', 'fast', 'glucos'],\n                                    \"gastrointestinal bleeding\":[ 'git', 'bleed','hemorrhag', 'digest', \"tra\"],\n                                    \"arrhythmia\":['cardiac', 'dysrhythmia'],\n                                    \"benign prostatic hyperplasia\" : ['benign', 'prostat'],\n                                    \"chronic obstructive pulmonary disease\": [ 'obstruct', 'pulmonari',\n                                                                        'condit', 'chronic', 'bronchiti','cronic'],\n                                    \"prostate hypertrophy\": ['prostat', 'hypertrophi'], \n                                    \"diabetic nephropathy\":['diabet', 'nephropathi'],\n                                    \"hip replacement\": ['hip', \"replac\"],\n                                    \"cerebral infarction\":['hypertens', 'cerebr', 'infarct'],\n                                    \"hepatitis B\": [\"hepat\", 'b'],\n                                    \"frequent ventricular premature beat\":[\"frequent\", 'ventricular', 'prematur', 'beat'],\n                                    \"endocrine condition\":['endocrin', 'condit'],\n                                    \"hypertensive nephrosclerosis\":['hypertens', 'nephrosclerosi'],\n                                    \"peripheral arterial occlusive disease\":[ 'arteri', 'occlus' ],\n                                   \"vestibular disorders\": ['vestibular', 'disord'],\n                                   \"brain haemorrhage\":['brain', 'haemorrhag'],\n                                    \"dilated cardiomyopathy\": [\"dilat\", \"cardiomyopathi\"],\n                                    \"prostat cancer\": [\"prostat\", \"cancer\"]}\n\n\n\nfor df in [world, philippines, tunisia, vietnam]:\n    TextAnalysis.analyze_text_for_multicategory_col(df,  \"background_diseases_origin\", \"background_diseases\",\n                                                    background_diseases_bag_words , background_diseases_sentences_bag)\n                                        ","9ffaff56":"datasets_all = [france, tunisia, japan, indonesia, korea, new_zealand, canada, guatemala, singapore, philippines, india_data,\n            india_wiki,vietnam, colombia, mexico ,world ]\n\nControl.examining_values_by_col(datasets_all , datasets_name_all , \"background_diseases\") ","9c3799d9":"%%time\n# 1min 12s\n# Completing information from other columns\nsymptoms_to_background_diseases_bag_words ={\"diabetes\":['diabet', \"mellitus\"],\n                                            \"cardiomyopathy\":['cardiomyopathi'],\n                                            \"atherosclerotic\": ['atherosclerot'],}\n\nsymptoms_to_background_diseases_sentences_bag ={\"chronic obstructive pulmonary disease\": ['obstruct', 'pulmonari'],\n                                                \"coronary heart disease\": ['ischem', 'heart'],\n                                                \"chronic kidney disease\":['chronic', 'kidney', 'diseas']}\n\n\n# take data from \"symptoms_origin\" and \"Final Diagnosis\"\n\n\nTextAnalysis.analyze_text_for_multicategory_col(world ,  \"symptoms_origin\" , \"l\", symptoms_to_background_diseases_bag_words , symptoms_to_background_diseases_sentences_bag,\n                                                input_col_is_dirty=False)\n\nTextAnalysis.analyze_text_for_multicategory_col(philippines,\"Final Diagnosis\" ,\"l\", symptoms_to_background_diseases_bag_words , symptoms_to_background_diseases_sentences_bag,\n                                                input_col_is_dirty=False)\n","4fc8bfa3":"#  unite data from different cols \nClean.unite_multicategries_columns(philippines, [ \"background_diseases\", \"l\"])\nClean.unite_multicategries_columns(world, [ \"background_diseases\", \"l\"])","5e2e82b0":"%%time\nmexico[\"background_diseases\"] = \"\"\n\nbackground_diseases_ls = [\" diabetes,\", \" chronic obstructive pulmonary,\",\" asthma,\", \" immunosuppression,\",\" hypertension,\",\n                          \" cardiovascular,\", \" obesity,\", \" kidney failure,\"]\n\ncols = ['DIABETES', 'EPOC', 'ASMA', 'INMUSUPR', 'HIPERTENSION', 'CARDIOVASCULAR',\n        'OBESIDAD', 'RENAL_CRONICA']\n\n\nfor ind in range(len(cols)):\n    col = cols[ind]\n    name = background_diseases_ls[ind]\n\n    mexico[\"background_diseases\"]  = mexico[\"background_diseases\"] + mexico[col].apply(lambda x: name if x==1 else \"\")\n\nmexico[\"background_diseases\"]  = mexico[\"background_diseases\"].apply(lambda x: np.nan if x== \"\" else x)\n","f3917ef8":"# guatemala.background_diseases\nbackground_diseases_cardiopat\u00eda =  guatemala.index[guatemala.background_diseases == \"cardiopat\u00eda\"]\n\nClean.update_by_index(guatemala, \"background_diseases\" ,background_diseases_cardiopat\u00eda ,\"coronary heart disease\")\n\nbackground_diseases_nan =  guatemala.index[guatemala.background_diseases == \"unknown\"].append(guatemala.index[guatemala.background_diseases == \"cardiaco\"])\nClean.update_by_index(guatemala, \"background_diseases\" , background_diseases_nan ,np.nan)","2bc96cd5":"datasets_all = [france, tunisia, japan, indonesia, korea, new_zealand, canada, guatemala, singapore, philippines, india_data,\n            india_wiki,vietnam, colombia, mexico ,world ]\n\nControl.examining_values_by_col(datasets_all , datasets_name_all , \"background_diseases\") ","8004b25f":"#TODO VEC if need \ntunisia[\"background_diseases_binary\"] = np.nan\nworld[\"background_diseases_binary\"] = np.nan\n\nfor dataset in [tunisia, world, philippines, guatemala, vietnam, mexico]:\n    dataset[\"background_diseases_binary\"] = dataset[\"background_diseases\"].apply(lambda x: 1 if x == x else 0)\n\n#  world   \nfor dataset in [world]:\n    dataset.loc[dataset[\"more_data_and_background_diseases_binary\"]==1, \"background_diseases_binary\"] = 1\n\n    \nworld.loc[world.symptoms_origin== \"yes\", \"background_diseases_binary\"] = 1","da66ade8":"datasets_all = [france, tunisia, japan, indonesia, korea, new_zealand, canada, guatemala, singapore, philippines, india_data,\n            india_wiki,vietnam, colombia, mexico ,world ]\nControl.examining_values_by_col (datasets_all , datasets_name_all , \"background_diseases_binary\") ","1f67b87a":"for x in [colombia, world, hong_kong, toronto]:\n    x[\"treatment\"] = np.nan\n\n\n# -del-\nphilippines.loc[philippines[\"treatment\"] == \"For validation\", \"treatment\"] = np.nan\nfrance.loc[france[\"treatment\"] ==\"deceased\", \"treatment\"] = np.nan\nvietnam.loc[vietnam[\"treatment\"] ==\"?\", \"treatment\"] = np.nan\n\n# notnull == hospitalized\nfor dataset in [vietnam, singapore, indonesia, philippines]:\n    dataset.loc[dataset[\"treatment\"].notnull(), \"treatment\"] = \"hospitalized\"\n \n\n#  tunisia  \ntunisia.loc[tunisia[\"hospital_place\"].notnull(), \"treatment\"] = \"hospitalized\"\ntunisia.loc[tunisia[\"severity_illness\"] == \"In progress\", \"treatment\"] = \"home isolation\"\ntunisia.loc[tunisia[\"severity_illness\"] == \"Stable\" , \"treatment\"] = \"hospitalized\"\ntunisia.loc[tunisia[\"severity_illness\"] == \"Critical\" , \"treatment\"] = \"hospitalized\"\ntunisia.loc[tunisia[\"treatment\"] == \"Self-insulation\", \"treatment\"] = \"home isolation\"\n\n\n#  france \nClean.clean_by_comparison(france, \"treatment\", \"treatment\", [\"released\",\"hospital\" ], \"hospitalized\")\n\n# india_data\nindia_data.loc[india_data[\"severity_illness\"]== \"Hospitalized\",  \"treatment\"] = \"hospitalized\"\n\n\n# colombia\nClean.clean_by_comparison(colombia,\"treatment_origin\", \"treatment\", [\"Hospital Uci\", \"Hospital\"], \"hospitalized\")\ncolombia.loc[colombia[\"treatment_origin\"] == \"Casa\", \"treatment\"] = \"home isolation\"\n\n\n# mexico\nmexico.loc[mexico[\"treatment\"] == 2, \"treatment\"] = \"hospitalized\"\nmexico.loc[mexico[\"treatment\"] == 1, \"treatment\"] = \"home isolation\"\n\n\n# kerla\nkerla.loc[kerla[\"severity_illness\"] == 'Hospitalized', \"treatment\"] = \"hospitalized\"\n\n# hong_kong\nhong_kong.loc[hong_kong[\"severity_illness\"] == \"Hospitalised\",  \"treatment\"]= \"hospitalized\"\n\n# toronto\ntoronto.loc[toronto[\"Ever in ICU\"]== \"Yes\", \"treatment\"] = \"hospitalized\"\ntoronto.loc[toronto[\"Ever Intubated\"]== \"Yes\",\"treatment\"] = \"hospitalized\"\n\n# usa\nusa.loc[usa[\"icu_yn\"]== \"Yes\", 'treatment'] = \"hospitalized\"\nusa.loc[usa[\"hosp_yn\"]== \"Yes\", 'treatment'] = \"hospitalized\"\nusa.loc[usa[\"hosp_yn\"]== \"No\", 'treatment'] = \"home isolation\"","060a2788":"%%time\n# world\nbag_words= {\"home isolation\":[\"home\",\"quarantin\"],\n            \"clinic\":[],\n            \"hospitalized\" :['hospit', \"follow-up\", 'intub', \"fever\"],            \n            }\n\nsentences_bag = {\"home isolation\":[ 'not', 'hospit'],\n                \"clinic\":[], \n                \"hospitalized\" : [ 'from', 'hospit','intens','care','under', 'treatment'],\n               }\n\n\nTextAnalysis.analyze_text_for_category_col(world, \n        \"origin_severity_illness\", \"treatment\", bag_words, \n        sentences_bag)\n\n\nTextAnalysis.analyze_text_for_category_col(world, \"symptoms_origin\",\n            \"treatment1\", bag_words, sentences_bag, input_col_is_dirty=False)\n\n\n# concat treatment cols\nfor col in [\"treatment\", \"treatment1\"]:\n    world[col] = world[col].apply(lambda x: x if x==x else \"\")\n    world.loc[world[col] == 0, col] = \"\"\n    \n\ndictionary_importance = {\"hospitalized\":0,\"clinic\":1,\n                         \"home isolation\":2}\n\nClean.unite_categories_columns(world, [ \"treatment\", \"treatment1\"], dictionary_importance)","10b80489":"datasets_all = [france, tunisia, japan, indonesia, korea, new_zealand, canada, guatemala, singapore, philippines, india_data,\n            india_wiki,vietnam, colombia, mexico ,world , kerla, hong_kong, toronto]\nControl.examining_values_by_col (datasets_all , datasets_name_all , \"treatment\") ","2b494852":"%%time\n# format severity_illness to categories (if they give him category col)\n\nseverity_illness_dict = {\"asymptomatic\":[\"Asymptomatic\", \"Asintom\u00e1tico\"],\n            \"good\":[\"good\",\"Leve\", \"Moderado\", \"Mild\", \"In progress\", \"In progress\", \"isolated\"],\n            \"critical\":[\"critical\",\"Grave\",\"Severe\", \"Critical\"],\n            \"deceased\":[\"deceased\",2,\"Fallecido\", \"Died\", \"Deceased\", \"FATAL\"],\n            \"cured\":[\"cured\",1,\"Discharged\", \"Recovered\", \"Cured\", \"released\",\n                     \"Clinically Recovered\", \"RESOLVED\"],\n            np.nan:[0,\"Nan\", \"health\", \"Hospitalized\", \"Under Treatment\", \"To be provided\",\n                    \"Pending admission\", \"Hospitalised\"]}\n\n\nfor dataset in [france, tunisia, indonesia, korea, \n          philippines, india_data,india_wiki,kerla,\n             colombia, hong_kong, toronto]:\n    dataset[\"severity_illness\"] = dataset.severity_illness.apply(lambda x: \n                               Pexpansion.get_key_from_dict_by_value(severity_illness_dict,x))\n    print(0)","4649692a":"%%time\n# Collects information about the severity_illness\n# from various columns in the database\n\nfor dataset in [canada, guatemala, singapore, vietnam,mexico]:\n    dataset[\"severity_illness\"] = \"\"\n    \nfor dataset in [france, tunisia, indonesia, korea,\n                canada, guatemala, singapore, colombia, \n                philippines, india_data,\n            india_wiki,vietnam,  mexico ,\n                world , kerla, hong_kong, toronto]: \n    dataset[\"severity_illness2\"] = np.nan\n\n\n\n\n#  -- deceased_date and released_date --\ndatasets_have_both =  [indonesia, france, guatemala , kerla, korea] #  colombia,\n\n# deceased_date\nfor x in datasets_have_both +[canada, mexico]:\n    x.loc[x.deceased_date.notnull(), 'severity_illness2'] = \"deceased\"\n    print(0)\n\n# released_date\nfor x in datasets_have_both +[singapore, vietnam]:\n    x.loc[x.released_date.notnull(), 'severity_illness2'] = \"cured\"\n    print(4)\n    \n    \n \n#  -- Unique --\n# singapore - deceased (deceased)\nsingapore.loc[singapore.deceased == True, 'severity_illness1'] = \"deceased\"\nprint(5)\n\n\n# mexico - critical (UCI)\nmexico.loc[mexico.UCI == 1 , 'severity_illness1'] = \"critical\"\nprint(6)\n\n\n# colombia (treatment_origin)\ncolombia.loc[colombia[\"treatment_origin\"] == \"Hospital Uci\", 'severity_illness1'] = \"critical\"\ncolombia.loc[colombia[\"treatment_origin\"] == \"Fallecido\", 'severity_illness1'] = \"deceased\"\ncolombia.loc[colombia[\"treatment_origin\"] == \"Recuperado\", 'severity_illness1'] = \"cured\"\ncolombia.loc[colombia[\"treatment_origin\"] == \"Casa\" , 'severity_illness1'] = \"good\"\ncolombia.loc[colombia[\"treatment_origin\"] == \"Hospital\" , 'severity_illness1'] = \"good\"\n# RECUPERADO\ncolombia.loc[colombia[\"RECUPERADO\"] == \"Recuperado\" , 'severity_illness2'] = \"cured\"\ncolombia.loc[colombia[\"RECUPERADO\"] == \"Fallecido\" , 'severity_illness2'] = \"deceased\"\nprint(7)\n\n\n\n# hong_kong\nhong_kong.loc[hong_kong[\"symptoms\"] == \"no_symptom\" ,'severity_illness1'] = \"asymptomatic\"\n\n# toronto\ntoronto.loc[toronto.severity_illness == \"ACTIVE\", 'severity_illness1'] = np.nan\ntoronto.loc[toronto[\"Ever in ICU\"]== \"Yes\", 'severity_illness1'] = \"critical\"\ntoronto.loc[toronto[\"Ever Intubated\"]== \"Yes\", 'severity_illness1'] = \"critical\"\n\n# usa order is matter (critical before deceased)\nusa.loc[usa[\"icu_yn\"]== \"Yes\", 'severity_illness'] = \"critical\"\nusa.loc[usa[\"death_yn\"]== \"Yes\", 'severity_illness'] = \"deceased\"\n\n# unit \"severity_illness2\", \"severity_illness1\"\nfor dataset in [toronto, hong_kong,singapore,  mexico, colombia]: \n    Clean.unite_multicategries_columns(dataset, [\"severity_illness2\", \"severity_illness1\"])\n\n","d75099a6":"%%time\nfor dataset in datasets_all:\n    if \"symptoms\" in dataset.columns:\n         dataset.loc[dataset.symptoms == \"no_symptom\", \"severity_illness5\"] =\"asymptomatic\"\n         Clean.unite_multicategries_columns(dataset, [\"severity_illness2\", \"severity_illness5\"])","9a3b4fc8":"%%time\n# Analyzes text from different columns and adds categories to severity_illness2\nbag_words= {\"asymptomatic\":['asymptomat'],\n            \"good\":[\"good\",\"stabl\", \"follow\", 'mild',\"follow-up\", 'moder'],\n            \"critical\":[\"critic\", \"intens\", \"sever\", 'unstabl'], \n            \"deceased\": [\"death\",\"dead\", \"die\", \"deceas\", 'fatal' ],\n            \"cured\":[\"discharg\", \"releas\", \"cure\", \"recov\", 'health','resolv' ],\n            \"\": [\"isol\", 'valid',  'treatment', \"For validation\"]}\n\nsentences_bag = {\"good\":[ 'not', 'hospit', 'in', 'progress' ],\n                \"critical\":['intens','care'], \n                \"deceased\": [ ],\n                \"cured\":[ \"discharged\", \"hospit\" ]}\n\n\nTextAnalysis.analyze_text_for_category_col(world, \"symptoms_origin\",\"severity_illness1\", bag_words, sentences_bag,\n                             input_col_is_dirty=False)\n\n\nTextAnalysis.analyze_text_for_category_col(world, \"origin_severity_illness\",\"severity_illness\", bag_words, sentences_bag,\n                             input_col_is_dirty=False)\n\nClean.unite_multicategries_columns(world, [\"severity_illness2\", \"severity_illness1\"] )\n","7c8c0ccd":"def division_by_symptoms_WHO(p, words_bag):\n    # clean str and make a list \n    i = p.split(\",\")\n    i = [x.strip() for x in i]\n    \n    op = []\n    for x in i:\n        for k, v in words_bag.items():\n            for l in v:\n                if l == x:\n    \n                    op.append(k)\n\n    test_dict = dict(Counter(op))\n    if len(test_dict) ==2:\n        return \"critical\"\n    elif len(test_dict) == 1:\n        return list(test_dict.keys())[0]","7774a511":"%%time\n# add to severity_illness2 severity_illness categories possible  \n# by analysis of the symptom column \n# according to the WHO classification (classification by symptoms)\n\nseverity_illness_from_symptoms_by_WHO = {\"good\" :[\"pneumonia\",'fever','cough','fatigue','discomfort','weakness','dizziness','rhinorrhoea','sneezing',\n                     'sneezing','sputum','headache','backache','diarrhea','chills','nausea','myalgia',\n                     'anorexia','toothache','vomiting','gasp','influenza','sweating ','rigor',\n                     'conjunctivitis','pharyngalgia','gastritis','influenza', 'nasal congestion',\n                     'sore throat','muscular stiffness','myalgia','joint pain','esophageal reflux',\n                     'abdominal pain','bone pain','eye irritation','dry mouth','dry throat',\n                     'gastrointestinal bleeding','stuffy nose',\"difficulty walking\", \"pleuritic chest pain\"],\n     \"asymptomatic\": [\"no_symptom\"],\n    'critical': [\"server\" , \"breathing difficulty\", \"dysphagia\", \"hypoxia\", \"septic\",\n                 \"cardiac arrhythmia\",'organ failure', 'respiratory failure',  'breathing difficulty'\n    \"sepsis\", \"hypertension\", \"azotemia\", \"pleural effusion\",\"heart failure\",\"kidney failure\",\n    \"chest distress\",\"acute coronary syndrome\",\"cardiac arrhythmia\",'septic shock',\n    'cardiogenic shock','heart attack','electrolyte disorders','organ failure','primary myelofibrosis',\n    'myocardial dysfunction','cardiac arrest','lesions on chest','respiratory failure',\"respiratory infection\",'primary myelofibrosis']}\n\ndictionary_importance = {\"deceased\":0,\"cured\":0, \"critical\":1, \"good\":2, \"asymptomatic\":3}\n\nfor dataset in [philippines, world, vietnam]:\n    print(0)\n    dataset[\"severity_illness3\"] = dataset[\"symptoms\"][dataset[\"symptoms\"].notnull()].apply(lambda x: division_by_symptoms_WHO(x , severity_illness_from_symptoms_by_WHO)) \n    Clean.unite_multicategries_columns(dataset, [\"severity_illness2\", \"severity_illness3\"])\n    ","d96b8c67":"# unit cols\nfor dataset in [france, tunisia,  indonesia, korea,\n                canada, guatemala, singapore, philippines, \n                india_data, india_wiki,vietnam, colombia,\n                mexico ,world , kerla, hong_kong, toronto]:\n    Clean.unite_multicategries_columns(dataset, [\"severity_illness\", \"severity_illness2\"])\n    dataset[\"severity_illness_over_time\"] = dataset[\"severity_illness\"]\n  ","37280265":"# choose category by dictionary_importance\ndictionary_importance = { \"deceased\":0,\"cured\":0, \"critical\":1, \"good\":2, \"asymptomatic\":3}\n\nfor dataset in [france, tunisia,  indonesia, korea,\n                canada, guatemala, singapore, philippines, \n                india_data, india_wiki,vietnam, colombia,\n                mexico ,world , kerla, hong_kong, toronto]:\n    dataset[\"t\"] =\"\"\n    Clean.unite_categories_columns(dataset, [\"severity_illness\", \"t\"], dictionary_importance )","43104cdd":"Control.examining_values_by_col (datasets_all , datasets_name_all , \"severity_illness_over_time\")","07ddbd2f":"Control.examining_values_by_col (datasets_all , datasets_name_all , \"severity_illness\")","fab93070":"%%time\ncategories = [\"deceased\", \"cured\"]\ncols = [\"deceased_date\",\"released_date\"]\n\nfor indx_j in range(len(cols)) :\n    j  = cols[indx_j]\n    category = categories[indx_j]\n    \n    for dataset in [philippines, india_data, india_wiki, world]:\n        dataset.loc[dataset[\"severity_illness\"] == category,j] = dataset[\"date_death_or_discharge\"]\n","05a28592":"Control.examining_values_by_col (datasets_all , datasets_name_all , \"released_date\") ","7e97454e":"%%time\n# clean kerla \nkerla[\"age\"] = kerla[\"age\"].astype(\"str\")\nClean.clean_by_comparison(kerla, \"age\", \"age\", [\"Unspecified\", \"51F\", \"nan\"], np.nan)\n\n\n# clean \ndfs_need_super_clean = [world, canada]\nfor df in dfs_need_super_clean :\n    df[\"age_band\"] = df[\"age\"]\n    Cage.clean_age_col(df, \"age\",  [\"Not Reported\"])\n\n    \n# formt to float \ndatasets = [india_wiki, india_data,guatemala, philippines, singapore, mexico, colombia, \n            vietnam, kerla, hong_kong, world, canada]\nfor dataset in datasets:\n    dataset[\"age\"] = dataset[\"age\"].astype(\"float\")\n    \n    \n# age from birth_year\nfrance[\"confirmed_date_year\"] = france[\"confirmed_date\"].apply(lambda x: x.year)\nfrance[\"age\"] = france[\"confirmed_date_year\"] - france[\"birth_year\"]\nfrance.drop(\"confirmed_date_year\", axis=1, inplace=True)","f4909b27":"Control.examining_values_by_col (datasets_all , datasets_name_all , \"age\") ","a6ceeac9":"%%time\n# Manual care \n# japan\njapan.age_band = japan.age_band.apply(lambda x : np.nan if x ==\"investigating\" or x==\"Checking\" else x )\njapan.age_band = japan.age_band.apply(lambda x : \"0s\" if x ==\"Under 10\" or x==\"Under teens\" else x )\n\n# canada\nClean.clean_by_comparison(canada, \"age_band\", \"age_band\", [\"<10\",\"<1\"], \"1\")\nprint(1)\n\n\n# usa  20 - 29 Years => 20-29\nusa.age_band = usa.age_band.apply(lambda x : np.nan if x ==\"Unknown\"  else x )\nusa.age_band = usa.age_band.apply(lambda x : Clean.clean_str_replace(x, [\" \", \"Years\"], \"\") if x==x else x)\nprint(2)\n\n# japan.loc[251,\"age_band\"] = \"30s\"\n# 30s => 30\nfor df in [korea, japan]:\n    df.age_band = df.age_band.apply(lambda x : int(Clean.clean_str_replace(x, [\"s\"], \"\")) if x==x else x)\nprint(3)\n\n\n\n\n# dataset with clean age \nfor dataset in [france, tunisia, indonesia, guatemala, singapore, philippines, india_data,\n            india_wiki,vietnam, colombia, mexico ,france,  kerla, hong_kong]:\n\n     dataset[\"age_band\"] = dataset[\"age\"][dataset[\"age\"].notnull()].apply(lambda x:(x\/\/10)*10)\n        \nprint(4)        \n\n# age_band from dirty age (range and more)\nfor df in dfs_need_super_clean + [toronto, usa]:\n    Cage.to_age_band(df , \"age_band\",[\"Not Reported\", \"19 and younger\"])\n    df.loc[ df[\"age_band\"] ==  \"nan\", \"age_band\"] = np.nan\nprint(5) \n","52de2ef1":"# india_data\nControl.examining_values_by_col (datasets_all , datasets_name_all ,\"age_band\") ","bba9c965":"%%time\n# Complete contry by dataset\ndatasets = [ france, tunisia, japan ,indonesia, new_zealand, singapore, philippines, india_wiki,\n            india_data, colombia, vietnam, mexico, hong_kong, toronto, usa]\ndatasets_name = [ \"france\", \"tunisia\", \"japan\",\"indonesia\", \"new zealand\", \"singapore\",\n                 \"philippines\", \"india\", \"india\", \"colombia\", \"vietnam\", \"mexico\", \"hongkong\", \"canada\", \"usa\"]\n\nfor indx in range(len(datasets_name)):\n    dataset = datasets[indx]\n    dataset[\"country\"] = [datasets_name[indx] for i in range(len(dataset))]","413d2091":"datasets_all = [france, tunisia, japan, indonesia, korea, new_zealand, canada, guatemala, singapore, philippines, india_data,\n            india_wiki,vietnam, colombia, mexico ,world , kerla, hong_kong, toronto]\nControl.examining_values_by_col (datasets_all , datasets_name_all ,\"country\") ","7ef77370":"%%time\nindia_wiki[\"region\"] = \"Karnataka\"\nkerla[\"region\"] = \"kerla\"\ntoronto[\"region\"] =\"greatekorea rtorontoarea\"\nhong_kong[\"region\"] = \"hongkong\"","e2527df8":"%%time\ntoronto[\"city\"] = \"toronto\"\nControl.examining_values_by_col (datasets_all , datasets_name_all ,\"city\") ","06f1fcb9":"%%time\n# japan\n# Manual care\njapan.loc[147, \"infected_by\"]= \"No.6\"\nnan_index = japan.index[japan.infected_by ==\"investigating\"].append([japan.index[japan.infected_by ==\"None\"],\n                                                                    japan.index[japan.infected_by ==\"unknown\"]])\nClean.update_by_index(japan, \"infected_by\", nan_index, np.nan)\n\n\n\n# from str ->  index str\nfor dataset in [japan, singapore]:\n    index = dataset.index[dataset.infected_by.notnull()]\n\n    index_e = []\n    for indx in index:\n        print(dataset.infected_by[indx])\n        i = Clean.clean_str_replace(dataset.infected_by[indx],[\",\", \".\",\"-\",\"No\",\";\",\"(\",\")\",\"No.\"], \" \" )\n        ls = i.split(\" \")\n        print(ls)\n        ls = [str(int(i)-1) for i in ls if i.isdigit()==True]\n        dataset.loc[indx, \"infected_by\"] = Clean.organize_ls_to_str(ls)","c0edaf12":"%%time\n# from str -> Special id -> index str\nfor dataset in [france, philippines, vietnam]:\n    index = dataset.index[dataset.infected_by.notnull()]\n\n    for indx in index:\n        n_ls = [ ]\n        i = Clean.clean_str_replace(dataset.infected_by[indx], \n                                     [\",\", \".\",\"-\",\"No\",\";\",\"(\",\")\",\"No.\"],\" \")\n        ls = i.split(\" \")\n\n        for i in ls:\n            [n_ls.append(str(i)) for i in dataset.index[dataset.id == i ].tolist()]\n        dataset.loc[indx, \"infected_by\"] = Clean.organize_ls_to_str(n_ls)\n","69f91b59":"%%time\n# from Special id -> index str\nkorea.id = korea.id.astype(\"str\")\nfor dataset in [india_wiki, korea]:\n    print(\"----------------------------------\")\n    index = dataset.index[dataset.infected_by.notnull()]\n\n    for indx in index:\n        i = dataset.infected_by[indx]\n        ls = dataset.index[dataset.id == i ].tolist()\n        ls = [str(i) for i in ls]\n        dataset.loc[indx, \"infected_by\"] = Clean.organize_ls_to_str(ls)","2e0dd1a2":"def jj(x):\n    x = Clean.clean_str_replace(x ,[\" \",\",\",\"[\",\"]\"], \" \")\n    x = x.split(\" \")\n    x = [i  for i in x if len(i)> 0 ]\n    x = Clean.organize_ls_to_str(x)\n    return x","8623b3e9":"%%time\nindia_data[\"infected_by\"] = india_data['link_sicks'][india_data['link_sicks'].notnull()].apply(lambda x: jj(x) )\n\nguatemala.loc[guatemala.infected_by == -99, \"infected_by\"] = np.nan","0c1dce9e":"%%time\n# kerla\nfor i in kerla.index[kerla.infected_by.notnull()]:\n    if kerla.loc[i ,\"infected_by\"].isdigit() == False:\n        kerla.loc[i ,\"infected_by\"] = kerla.loc[i ,\"infected_by\"].replace(\"P\", \"\")\n        kerla.loc[i ,\"infected_by\"] = kerla.loc[i ,\"infected_by\"].replace(\"Kollam\", \"\")\n        kerla.loc[i ,\"infected_by\"] = kerla.loc[i ,\"infected_by\"].strip()","2e7ce7fe":"datasets_all = [france, tunisia, japan, indonesia, korea, new_zealand, canada, guatemala, singapore, philippines, india_data,\n            india_wiki,vietnam, colombia, mexico ,world , kerla,  hong_kong, toronto]\ndatasets_name_all = [\"france\", \"tunisia\", \"japan\", \"indonesia\", \"korea\", \"new_zealand\", \"canada\", \"guatemala\" , \"singapore\", \n                 \"philippines\", \"india_data\", \"india_wiki\", \"vietnam\", \"colombia\", \"mexico\",\"world\", \"kerla\",  \"hong_kong\", \"toronto\"]\n\nControl.examining_values_by_col (datasets_all , datasets_name_all , \"infected_by\") ","47ac2934":"# philippines\n# Went to Greenhills \n# France, UAE,\n# Korea, USA\n# For validation                                    614\n# None\n# USA\n# With Exposure History to a known COVID-19 case\n# Diamond Princess Cruise Ship\n\n# singapore\n# uk                186\n# usa                70\n# unknown            36\n# uae\n\n\n# tunisia\n# Local\n# guatemala\n# unknown  \n# new_zealand\n# UAE\n# USA \n\n# canada\n# Not Reported \n# Cruise\ncolombia.loc[ colombia.infection_place == \"Relacionado\", \"infection_place\"] = \"colombia\"\n\nfor i in [\"En Estudio\", \"Importado\"]:\n    colombia.loc[ colombia.infection_place == i , \"infection_place\"] = np.nan\n","1d8e167a":"colombia.loc[ colombia.recovery_test == \"Tiempo\" , \"recovery_test\"] = \"time\"\ncolombia.loc[ colombia.recovery_test == \"Pcr\" , \"recovery_test\"] = \"pcr test\"\ncolombia.loc[ colombia.recovery_test == \"Nan\" , \"recovery_test\"] =  np.nan","5ae1a188":"vietnam.loc[ vietnam.severity_illness == \"cured\" , \"recovery_test\"] = \"pcr test\"","b6bbee7b":"%%time\nmexico[\"smoking\"] = np.nan\n\nmexico[\"smoking\"] = mexico['TABAQUISMO'].apply(lambda x: 0 if x==2 else x )\nmexico[\"smoking\"] = mexico[\"smoking\"].apply(lambda x: np.nan if x==98 else x )","916fa7b2":"mexico[\"smoking\"].value_counts()","981434fe":"for indx in range(len(datasets_name_all)):\n    dataset = datasets_all[indx]\n    dataset[\"origin\"] = datasets_name_all[indx]","049b2f72":"Control.examining_values_by_col (datasets_all , datasets_name_all , \"origin\") ","e5cd2d90":"garbge = [print(\"\\n\"+datasets_name_all[i], [i for i in datasets_all[i].columns]) for i in range(len(datasets_name_all))]","d0bf898e":"datasets_all = [france, tunisia, japan, indonesia, korea, new_zealand, canada, guatemala, singapore, philippines, india_data,\n            india_wiki,vietnam, colombia, mexico ,world, kerla ,  hong_kong, toronto, usa]\ndatasets_name_all = [\"france\", \"tunisia\", \"japan\", \"indonesia\", \"korea\", \"new_zealand\", \"canada\", \"guatemala\" , \"singapore\", \n                 \"philippines\", \"india_data\", \"india_wiki\", \"vietnam\", \"colombia\", \"mexico\",\"world\",\"kerla\",  \"hong_kong\", \"toronto\", \"usa\"]\n\nfinal_DS = pd.concat(datasets_all, axis=0)","e5d2b5bb":"d = [indx for indx in final_DS.index if type(indx) == str]\n\nfinal_DS = final_DS.drop(d, axis= 0)","1cb25822":"final_DS.index = range(len(final_DS))","9ef406f8":"lenDS = len(final_DS)\nlenDS","ded5701c":"final_DS.columns","81f3529f":"final_DS.country = final_DS.country.astype(\"str\")\nfinal_DS.country = final_DS.country.apply(lambda x: x.lower())\nfinal_DS.country = final_DS.country.apply(lambda x: x.replace(\" \", \"\"))\n\ncountry_dict = {\"oman\":[\"om\"],\n            \"united kingdom\":[\"uk\", \"inglaterra\", \"saintvincentandthegrenadines\"],\n            \"united arab emirates\": [\"uae\"],\n            \"southkorea\": [\"corea\"],\n            \"united states\":[\"u.s\", \"virginislands,u.s.\"],\n            \"india\":[\"delhi\", \"jammuandkashmir\"],\n               \"africa\": [\"southafrica\"],\n            np.nan: [\"abroad\",\"nan\", \"unknown\"]}\n\n\nfor c in country_dict:\n    for y in country_dict[c]:\n        final_DS[\"country\"] = final_DS[\"country\"].apply(lambda x: c if x== y else x)","08c6361b":"%%time\ndatasest_with_infected_by = []\nfor p in range(len(datasets_name_all)):\n    d = datasets_all[p]\n    c = d.columns\n    if \"infected_by\" in c:\n        datasest_with_infected_by.append(datasets_name_all[p])\n\nnum_indx = []\nfor datasest in datasest_with_infected_by:\n    num_indx.append(final_DS.index[final_DS.origin == datasest].min()) \n    \np = dict(zip(datasest_with_infected_by,num_indx))\np","8212e2a8":"%%time\n# clean\ndef orgnize_id(df, ind):\n    \n\n    i = str(df.infected_by[ind])\n    u = p[df.origin[ind]]\n    print()\n    print(i)\n    print(df.origin[ind])\n    print(u)\n    ls = i.split(\",\")\n    i = Clean.remove_from_ls(ls , \"\")\n    ls = [str(float(a)+ u) for a in i]\n    i = \",\".join(ls)\n    print(i)\n    return i","713cc43c":"final_DS[\"id\"] =[ ind for ind in range(0,len(final_DS.sex))]\nfinal_DS.id[final_DS[\"infected_by\"].notnull()].apply(lambda ind: orgnize_id(final_DS, ind))","a10f4193":"final_DS[\"infected_by\"].value_counts()","5da2f819":"final_DS.loc[final_DS.severity_illness == \"asymptomatic\" , \"symptoms\"] = \"no_symptom\"","f4bfe6ca":"f_all = time.time()","73e6fa2b":"print(f_all - start_all)","c523d4bb":"final_DS.columns","092e8820":"[i for i in final_DS.columns]","3bf4a5ce":"c = ['ASMA',\n 'CARDIOVASCULAR',\n 'CODIGO ISO DEL PAIS',\n 'DIABETES',\n 'Developing Symptoms',\n 'EPOC',\n 'Ever Hospitalized',\n 'Ever Intubated',\n 'Ever in ICU',\n 'FECHA DE DIAGNOSTICO',\n 'FECHA DE INICIO DE SINTOMAS',\n 'FECHA DE MUERTE',\n 'FECHA DE RECUPERACION',\n 'Final Diagnosis',\n 'HIPERTENSION',\n 'History of Travel \/ Exposure',\n 'ID',\n 'ID DE CASO',\n 'INMUSUPR',\n 'INTUBADO',\n 'NEUMONIA',\n 'NOMBRE DEL PAIS',\n 'Note',\n 'Number of negative test before discharged',\n 'OBESIDAD',\n 'OTRA_CON',\n 'OTRO_CASO',\n 'Origin Type',\n 'Patient Number',\n 'RECUPERADO',\n 'RENAL_CRONICA',\n 'RESULTADO',\n 'Re-Infected',\n 'Re-discharged',\n 'TABAQUISMO',\n 'UCI',\n 'UNIDAD DE MEDIDA DE EDAD',\n \n\n 'background_diseases_origin',\n 'birth_year',\n 'case',\n'infection_place',\n\n 'date_admission_hospital',\n 'date_death_or_discharge',\n\n 'deceased',\n\n 'departement',\n 'hospital_place',\n 'id',\n\n 'infection_cause',\n\n 'link_sicks',\n 'more_data_and_background_diseases_binary',\n 'origin_severity_illness',\n\n\n\n 'status',\n\n 'symptoms_origin',\n\n 'treatment_origin',\n 'unique_id']\n\n\n\nfinal_DS = final_DS.drop(c, axis= 1)","a226e2b9":"# Patient Number, origin_severity_illness\n# background_diseases_binary, infected_by, infection_place\n# mexico  \nfor i in final_DS.columns:\n    print(i)\n    print(final_DS[i].value_counts())\n    print(\"---------------------------------------------------------\")","77409eb8":"final_DS = final_DS.drop([], axis=1)","eb268b88":"final_DS.shape","c4852e95":"final_DS.columns","e10e59f6":"%%time\nfinal_DS.to_csv(r'\/kaggle\/working\/Characteristics_Corona_patients - 2 23012021.csv', index = False)\nfinal_DS.to_csv()","c5a70ea3":"city","0f1cf9fc":"sex","035f5ae2":"country ","7743679b":"del error row","6319dab8":"times : date_onset_symptoms, confirmed_datedeceased_date, released_date, return_date","02515f6d":"age_band","ccdb3b1d":"infected_by","150b4aa1":"canada","1fb69e02":"released_date \/ deceased_date","51875863":"usa","06dbf899":"# drop","92d505a7":"background_diseases_binary","e4564184":"hong_kong\n","d2e1d38c":"region","165aadeb":"origin","4bd785ef":"age","673b80da":"tretment","a85467fa":"This notebook is part of a project: \nCharacteristics Corona patients DS\n\nthe project's target :Build a clean and detailed database as detailed as possible on the characteristics of Corona patients from around the world\n\nPurpose of the notebook:\nBuild a patient-level database\nfrom different information sets\nby cleaning the heating and connecting the arrays","2f47239f":"symptoms","e4adba59":"# Complete features","d6d10892":"smoking","fd2a41c7":"# feature ","876fe4c4":"infected_by","425c56c5":"# Datasets columns","022aa2a3":"country","d0571775":"write csv","ba5e4b39":"background_diseases","b58d5f19":"recovery_test","1714c866":"country","80fccc32":"datasets list","142c9c6b":"# DS consolidation","6f0ea052":"# orgnaze DS","3dba04c4":"infection_place TODO","ad693097":"# look","843543b0":"# build final DS","c6a9a998":"# change name of columns","a1ef5014":"#  Garbage drop \n- Features that have only one dataset or  built with Engineered another feature with them","f35cebbc":"severity_illness","c8ae4c38":"# drop feature","d2f9ef7e":"# format col","0fe5e8a4":"# datasets.shape","59863df7":"mexico","d92b64df":"symptoms"}}