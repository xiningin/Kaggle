{"cell_type":{"ebe66f4e":"code","cfb98201":"code","e98db661":"code","36c24ced":"code","e51956ad":"code","200d2c9c":"code","0b317b92":"code","ae913f9f":"code","1c6b1ee9":"code","21606c32":"code","21df28f6":"code","aa1ec847":"code","071e9904":"code","25a046e9":"code","3bfb4fcd":"code","b4ea8e07":"markdown","e4931186":"markdown","d4be1930":"markdown","d1ce267d":"markdown","0d0bfc9b":"markdown"},"source":{"ebe66f4e":"from jt_mk_utils import *","cfb98201":"import os, sys, re, time\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom IPython.display import HTML, Image, display\nfrom datetime import datetime","e98db661":"tags = read_tags()\ntags[tags.Slug.str.contains('util')]","36c24ced":"ktags = read_kernel_tags()\nktags.nunique()","e51956ad":"ids = ktags.query('TagId==16074').KernelId\nkernels = read_kernels(filter=('Id', ids))\nkernels = kernels.dropna(subset=['CurrentKernelVersionId'])\nkernels.count()","200d2c9c":"users = read_users(filter=('Id', kernels.AuthorUserId))\nusers = users.set_index('Id')\nkernels = kernels.join(users, on='AuthorUserId')\nkernels = kernels.dropna(subset=['UserName'])\nkernels.count()","0b317b92":"ids = set(kernels.CurrentKernelVersionId)\noutput_files = read_kernel_version_output_files(filter=('KernelVersionId', ids))\noutput_files.head()","ae913f9f":"output_files.ContentTypeExtension.value_counts().head()","1c6b1ee9":"gb = output_files.groupby('KernelVersionId')\nstats = gb.ContentLength.agg(['count', 'sum'])\nstats.columns = ['Files', 'Content Length']\nstats.head()","21606c32":"kernels = kernels.join(stats, on='CurrentKernelVersionId')\nkernels.shape","21df28f6":"SHOW = ['User', 'Script', 'Votes', 'Content Length', 'Files']\nHOST = \"https:\/\/www.kaggle.com\"\n\nBC = '#40c4ff'\n\nplt.rc('figure', figsize=(15, 9))\nplt.rc('font', size=14)\nplt.style.use('bmh')\n\n\ndef odp(v):\n    return f'{v:.0f}'\n\n\ndef user_name_link(r):\n    return (f'<a href=\"{HOST}\/{r.UserName}\" '\n            f' title=\"UserName: {r.UserName}\\n'\n            f'RegisterDate: {r.RegisterDate.date()}\">'\n            f'{r.DisplayName}<\/a>')\n\n\ndef script_link(r):\n    return (\n        f'<a href=\"https:\/\/www.kaggle.com\/{r.UserName}\/{r.CurrentUrlSlug}\" '\n        f' title=\"UserName: {r.UserName}\\n'\n        f'CreationDate: {r.CreationDate.date()}\\n'\n        f'EvaluationDate: {r.EvaluationDate.date()}\\n'\n        f'MadePublicDate: {r.MadePublicDate.date()}\\n'\n        f'Medal: {r.Medal}\\n'\n        f'MedalAwardDate: {r.MedalAwardDate.date()}\\n'\n        f'TotalViews: {r.TotalViews}\\n'\n        f'TotalComments: {r.TotalComments}\">'\n        f'{r.CurrentUrlSlug}<\/a>')\n\n\ndf = kernels.copy()\ndf['User'] = df.apply(user_name_link, axis=1)\ndf['Script'] = df.apply(script_link, axis=1)\ndf = df.sort_values(['TotalVotes', 'TotalViews'], ascending=False)\ndf = df.rename(columns={'TotalVotes': 'Votes'})\n\n\ndef show_df(df):\n    return df[SHOW].style.bar(color=BC, width=85).format({\n        'Files': odp,\n        'Content Length': lambda v: f'{v\/1e6:.1f} Mb'\n    }).hide_index()","aa1ec847":"np.log(df['Content Length']).hist(bins=44, color=BC)\nplt.title('Utility Scripts - Log(Content Length)');","071e9904":"small = (df['Content Length'] <= 3e6)\nshow_df(df[small])","25a046e9":"show_df(df[~small])","3bfb4fcd":"kernels.to_csv('UtilityScripts.csv', index=False)","b4ea8e07":"Did you know that the the [Meta Kaggle](https:\/\/www.kaggle.com\/kaggle\/meta-kaggle) dataset lists all the output files of *every version* of *every public Notebook on the platform*?!\n\nIt looks like some of the Notebooks marked with the ***admin > utility script*** tag are not really utility scripts - we could filter Notebooks by the filename extensions of their outputs but I will leave that for a later version (or an exercise for ***you***, dear reader, hit that *Copy and Edit* button!)","e4931186":"# Utility Scripts\n\nSorted (above) by vote count, then view count (descending)","d4be1930":"# Plot Output Size","d1ce267d":"# List of Utility Scripts on Kaggle\n\nIt seems the ability to search for Utility scripts has been removed!\n\nUtility scripts (announced [here](https:\/\/www.kaggle.com\/product-feedback\/91185 \"Feature Launch: Import scripts into notebook kernels\")) are marked by an ***admin > utility script*** tag, and when run, save their source code as an output file; when attached to a Notebook as an *input source*, the code is available on the Python path, to import, exactly like the first cell below...\n\nThis Notebook generates a listing of Utility scripts using the [Meta Kaggle](https:\/\/www.kaggle.com\/kaggle\/meta-kaggle) dataset.\n(If it says \"dataset no longer available\" ignore that - Kaggle refreshes the dataset every day. The link in this paragraph should work.)\n\n## Contents\n\n * [Plot Output Size](#Plot-Output-Size)\n * [Utility Scripts](#Utility-Scripts)\n * [Large Utility Scripts - Mislabelled?](#Large-Utility-Scripts---Mislabelled?)","0d0bfc9b":"# Large Utility Scripts - Mislabelled?"}}