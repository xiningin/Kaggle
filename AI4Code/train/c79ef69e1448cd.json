{"cell_type":{"734f1666":"code","d6a8e3c9":"code","6d3015db":"code","87c40975":"code","d32d264f":"code","06c2727a":"code","f0618cd0":"code","34839d6c":"code","9d7bf141":"code","0de1d7a8":"markdown"},"source":{"734f1666":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d6a8e3c9":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsample_sub = pd.read_csv('\/kaggle\/input\/new-york-city-taxi-fare-prediction\/sample_submission.csv')\ntrain_df = pd.read_csv('\/kaggle\/input\/new-york-city-taxi-fare-prediction\/train.csv', nrows = 500000)\ntest_df = pd.read_csv('\/kaggle\/input\/new-york-city-taxi-fare-prediction\/test.csv')\n\ntest_df['pickup_datetime'] = pd.to_datetime(test_df['pickup_datetime'])\ntrain_df['pickup_datetime'] = pd.to_datetime(train_df['pickup_datetime'])\n\nkey = test_df['key']\ntest_df = test_df.drop('key',1)[['pickup_datetime',\n                                   'pickup_longitude',\n                                   'pickup_latitude',\n                                   'dropoff_longitude',\n                                   'dropoff_latitude',\n                                   'passenger_count',]]\n\ntrain_df = train_df.drop('key',1)[['pickup_datetime',\n                                   'pickup_longitude',\n                                   'pickup_latitude',\n                                   'dropoff_longitude',\n                                   'dropoff_latitude',\n                                   'passenger_count',\n                                   'fare_amount']]","6d3015db":"train_df = train_df[train_df['fare_amount']>0]\ntrain_df = train_df[train_df['fare_amount']<100]","87c40975":"def distance(lat1, lon1, lat2, lon2):\n    p = 0.017453292519943295 # Pi\/180\n    a = 0.5 - np.cos((lat2 - lat1) * p)\/2 + np.cos(lat1 * p) * np.cos(lat2 * p) * (1 - np.cos((lon2 - lon1) * p)) \/ 2\n    return 0.6213712 * 12742 * np.arcsin(np.sqrt(a))\n\ntrain_df['distance_miles'] = distance(train_df.pickup_latitude, train_df.pickup_longitude, \\\n                                      train_df.dropoff_latitude, train_df.dropoff_longitude)\n\ntest_df['distance_miles'] = distance(test_df.pickup_latitude, test_df.pickup_longitude, \\\n                                      test_df.dropoff_latitude, test_df.dropoff_longitude)","d32d264f":"train_df = train_df.drop(['pickup_longitude','pickup_latitude','dropoff_longitude','dropoff_latitude'],1)\ntrain_df['hour_of_day'] = train_df['pickup_datetime'].dt.hour\ntrain_df['dayofyear'] = train_df['pickup_datetime'].dt.dayofyear\ntrain_df['month'] = train_df['pickup_datetime'].dt.month\ntrain_df['year'] = train_df['pickup_datetime'].dt.year\ntrain_df['year'] = train_df['year'].apply(lambda X: int(str(X)[-2:]))\ntrain_df = train_df.drop('pickup_datetime',1)\ntrain_df = train_df[train_df['distance_miles']<17]\n\n\ntest_df = test_df.drop(['pickup_longitude','pickup_latitude','dropoff_longitude','dropoff_latitude'],1)\ntest_df['hour_of_day'] = test_df['pickup_datetime'].dt.hour\ntest_df['dayofyear'] = test_df['pickup_datetime'].dt.dayofyear\ntest_df['month'] = test_df['pickup_datetime'].dt.month\ntest_df['year'] = test_df['pickup_datetime'].dt.year\ntest_df['year'] = test_df['year'].apply(lambda X: int(str(X)[-2:]))\ntest_df = test_df.drop('pickup_datetime',1)","06c2727a":"X = train_df.drop('fare_amount',1).values\ny = train_df['fare_amount'].values\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=101)\n\nfrom sklearn.preprocessing import MinMaxScaler\n\nsclr = MinMaxScaler()\n\nX_train = sclr.fit_transform(X_train)\nX_test = sclr.transform(X_test)\n\n#for final predicion\ntest_df = sclr.transform(test_df)","f0618cd0":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping\n\nmodel = Sequential()\nmodel.add(Dense(6, activation = 'relu'))\nmodel.add(Dense(15, activation = 'relu'))\nmodel.add(Dense(7, activation = 'relu'))\nmodel.add(Dense(3, activation = 'relu'))\n\nmodel.add(Dense(1))\n\nmodel.compile(optimizer = 'adam',\n             loss = 'mse')\n\n\n\nes = EarlyStopping(monitor='val_loss',\n                  mode = 'min',\n                  verbose=1,\n                  patience=2)\n\nmodel.fit(X_train,y_train,\n          epochs=500,\n          verbose=1,\n          validation_data=(X_test, y_test),\n          callbacks=[es])","34839d6c":"model.evaluate(X_test,y_test)","9d7bf141":"sub = model.predict(test_df)\n\ns = pd.DataFrame(key)\nt = pd.DataFrame(sub)\n\ns.join(t).rename(columns = {0:'fare_amount'}).to_csv('Submission.csv', index = None)","0de1d7a8":"**For Sequential Model**"}}