{"cell_type":{"9f4a80a8":"code","ef0ca990":"code","9da3e92b":"code","5c8182d8":"code","720330ed":"code","592f9d09":"code","d625968f":"code","9b7c49cc":"code","2103b00b":"code","3de1446e":"code","7c0634a9":"code","9386800e":"code","b98ea7a2":"code","15e54019":"code","ddf50863":"code","6b77cf35":"code","92a23e14":"code","7c199c63":"code","1df03115":"code","11ad7c58":"code","9cce6eff":"code","d86c4f7a":"code","977e17fc":"code","e8030ca0":"code","33927648":"code","9ec4c856":"code","8dab7ef2":"code","84863f48":"code","92bd4c81":"code","09bda636":"code","084ffd5b":"code","0d15766d":"code","01abf693":"code","6b6001f8":"code","978d541d":"code","42a3c3ac":"code","90afa77e":"code","6a267812":"code","20db674b":"code","a3459d23":"code","37b86a11":"markdown","17498642":"markdown","b58fe828":"markdown","384c2a30":"markdown","7f12ba27":"markdown","8c083f77":"markdown"},"source":{"9f4a80a8":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom imblearn.over_sampling import SMOTE\nfrom imblearn.ensemble import BalancedRandomForestClassifier\nfrom imblearn.ensemble import EasyEnsembleClassifier\nfrom imblearn.metrics import classification_report_imbalanced\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import ConfusionMatrixDisplay\n\nimport warnings\n\nwarnings.filterwarnings('ignore')\npd.options.display.max_columns = 200\npd.options.display.max_rows = 200 \nplt.rcParams[\"figure.figsize\"] = (5,5)\n%matplotlib inline","ef0ca990":"import imblearn\nprint(imblearn.__version__) # We need Version 0.8.0 for this Notebook","9da3e92b":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","5c8182d8":"df = pd.read_csv('\/kaggle\/input\/company-bankruptcy-prediction\/data.csv')\ndf.head()","720330ed":"df.info()","592f9d09":"df.isna().sum()","d625968f":"df['Bankrupt?'].value_counts().plot.pie(autopct=\"%.2f\")","9b7c49cc":"sns.set(rc={'figure.figsize':(10, 6)})\nprint(df['Bankrupt?'].value_counts().to_dict())\nsns.countplot(df['Bankrupt?'])","2103b00b":"sns.scatterplot(data = df, x = ' Total income\/Total expense', \n                y = ' Net Value Per Share (A)',  \n                hue ='Bankrupt?')","3de1446e":"corr = df.corr()\nsns.set(style=\"darkgrid\")\nsns.set(rc={'figure.figsize':(15,15)})\nsns.heatmap(corr, cmap=\"YlOrBr\")","7c0634a9":"X = df[[col for col in df.columns if col not in ['Bankrupt?']]]\ny = df['Bankrupt?']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","9386800e":"clf = RandomForestClassifier(max_depth=75, random_state=42)\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)","b98ea7a2":"print('Accuracy: ',accuracy_score(y_test, y_pred))\nprint('Classification Report: \\n', classification_report(y_test, y_pred))","15e54019":"confusion_matrix(y_test, y_pred)","ddf50863":"plt.rcParams[\"figure.figsize\"] = (5,5)\ncm = confusion_matrix(y_test, y_pred, labels=clf.classes_)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm,\n                               display_labels=clf.classes_)\ndisp.plot(cmap=\"YlOrBr\")","6b77cf35":"clf = RandomForestClassifier(max_depth=75, \n                             random_state=42, \n                             n_estimators=10, \n                             class_weight='balanced') # place a penalty on misclassifying the minority class.\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)","92a23e14":"print('Accuracy: ',accuracy_score(y_test, y_pred))\nprint('Classification Report: \\n', classification_report(y_test, y_pred))","7c199c63":"confusion_matrix(y_test, y_pred)","1df03115":"plt.rcParams[\"figure.figsize\"] = (5,5)\ncm = confusion_matrix(y_test, y_pred, labels=clf.classes_)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm,\n                               display_labels=clf.classes_)\ndisp.plot(cmap=\"Greens\")","11ad7c58":"clf = RandomForestClassifier(max_depth=75, \n                             random_state=42, \n                             n_estimators=10, \n                             class_weight='balanced_subsample')\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)","9cce6eff":"print('Accuracy: ',accuracy_score(y_test, y_pred))\nprint('Classification Report: \\n', classification_report(y_test, y_pred))","d86c4f7a":"confusion_matrix(y_test, y_pred)","977e17fc":"plt.rcParams[\"figure.figsize\"] = (5,5)\ncm = confusion_matrix(y_test, y_pred, labels=clf.classes_)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm,\n                               display_labels=clf.classes_)\ndisp.plot(cmap=\"Purples\")","e8030ca0":"# is another ensemble method in which each tree of the forest will be \n# provided a balanced bootstrap sample [CLB+04]. \n# This class provides all functionality of the RandomForestClassifier:\nclf = BalancedRandomForestClassifier(n_estimators=10)\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)","33927648":"from imblearn.metrics import macro_averaged_mean_absolute_error \n# Computes MAE for each class and averages them while giving an equal weight to each class.\nmacro_averaged_mean_absolute_error(y_test, y_pred)\n# Requires version 0.8.0","9ec4c856":"print('Accuracy: ',accuracy_score(y_test, y_pred))\nprint('Classification Report:')\n\n# precision, recall, specificity, geometric mean, and index balanced accuracy of the geometric mean.\nprint(classification_report_imbalanced(y_test, y_pred))","8dab7ef2":"confusion_matrix(y_test, y_pred)","84863f48":"plt.rcParams[\"figure.figsize\"] = (5,5)\ncm = confusion_matrix(y_test, y_pred, labels=clf.classes_)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm,\n                               display_labels=clf.classes_)\ndisp.plot(cmap=\"YlOrRd\")","92bd4c81":"# A specific method which uses AdaBoostClassifier as learners in the bagging classifier is called \u201cEasyEnsemble\u201d. \n# The EasyEnsembleClassifier allows to bag AdaBoost learners which are trained on balanced bootstrap samples [LWZ08]. \n# Similarly to the BalancedBaggingClassifier API, one can construct the ensemble as:\nclf = EasyEnsembleClassifier(n_estimators=10)\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)\nconfusion_matrix(y_test, y_pred)","09bda636":"from imblearn.metrics import macro_averaged_mean_absolute_error \n# Computes MAE for each class and averages them while giving an equal weight to each class.\nmacro_averaged_mean_absolute_error(y_test, y_pred)\n# Requires version 0.8.0","084ffd5b":"print('Accuracy: ',accuracy_score(y_test, y_pred))\nprint('Classification Report:')\n\n# precision, recall, specificity, geometric mean, and index balanced accuracy of the geometric mean.\nprint(classification_report_imbalanced(y_test, y_pred))","0d15766d":"plt.rcParams[\"figure.figsize\"] = (5,5)\ncm = confusion_matrix(y_test, y_pred, labels=clf.classes_)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm,\n                               display_labels=clf.classes_)\ndisp.plot(cmap=\"Wistia\")","01abf693":"col_list = df.columns.to_list()[1:] # All the columns except the target variable\n# col_list","6b6001f8":"smote = SMOTE(random_state = 42)\nX, y = smote.fit_resample(df.drop('Bankrupt?', axis = 1), df['Bankrupt?'])\ndf_oversampled = pd.DataFrame(X, columns = col_list)\ndf_oversampled['Bankrupt?'] = y","978d541d":"print(df_oversampled['Bankrupt?'].value_counts().to_dict())\nsns.countplot(df_oversampled['Bankrupt?'])","42a3c3ac":"sns.scatterplot(data = df_oversampled, \n                x = ' Total income\/Total expense', \n                y = ' Net Value Per Share (A)',  \n                hue ='Bankrupt?')","90afa77e":"X = df_oversampled[col_list] #[[col for col in df_oversampled.columns if col not in ['Bankrupt?']]]\ny = df_oversampled['Bankrupt?']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","6a267812":"clf = RandomForestClassifier(max_depth=75, random_state=42)\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)","20db674b":"print('Accuracy: ',accuracy_score(y_test, y_pred))\nprint('Classification Report: \\n', classification_report(y_test, y_pred))","a3459d23":"plt.rcParams[\"figure.figsize\"] = (5,5)\ncm = confusion_matrix(y_test, y_pred, labels=clf.classes_)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm,\n                               display_labels=clf.classes_)\ndisp.plot(cmap=\"plasma\")","37b86a11":"# Weighted Random Forest Classifier for Imbalanced Classes","17498642":"# Random Forest Classifier for Imbalanced Classes with Bootstrap Class Weighting","b58fe828":"# Easy Ensemble Classifier","384c2a30":"# Balanced Random ForestClassifier","7f12ba27":"# Random Forest Classifier","8c083f77":"# Up-Sampling"}}