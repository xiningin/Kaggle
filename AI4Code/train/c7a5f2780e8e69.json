{"cell_type":{"96769cea":"code","03b4ec1d":"code","273477e5":"code","affb56c8":"code","a9db6b89":"code","f4cbdc93":"code","bd70f3a7":"code","e9106dfa":"code","75b7f320":"code","3b975c27":"code","19c0ad8c":"code","55a5a892":"code","edb703b0":"code","99031269":"code","7324a330":"code","1a7d7a4a":"code","b03256be":"code","084f4ae6":"code","c394004f":"code","152c1940":"code","d6df1fad":"code","7a727be9":"code","bc0390bb":"code","c517b4cc":"markdown","20a45ea8":"markdown","74beeed9":"markdown","e87e3846":"markdown","b3b52e42":"markdown","6c871f4c":"markdown","34ec23dd":"markdown","3e813f4d":"markdown","5cc88297":"markdown","7157ffe8":"markdown","4468a9cb":"markdown","12826479":"markdown","6301765a":"markdown","eef1e373":"markdown","cb786924":"markdown","664d12bd":"markdown","d575e7f5":"markdown","5f6cb50a":"markdown","619d2cf9":"markdown","8f7842b9":"markdown","16c4c8ff":"markdown","fceb8684":"markdown","e6d2cea1":"markdown","a75e7645":"markdown","d7f9250e":"markdown","795ea4a9":"markdown","1d413718":"markdown","de000375":"markdown"},"source":{"96769cea":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom matplotlib import pyplot as plt\n\n#plt.rcParams['figure.figsize'] = 12, 8\n%matplotlib inline\n\n#Take a look at a iceberg\nimport plotly.offline as py\nimport plotly.graph_objs as go\nfrom plotly import tools\n\n#Ignore warnings\nimport warnings \nwarnings.filterwarnings('ignore')\n\npy.init_notebook_mode(connected=True) # plotly \ub97c jupyter notebook \uc5d0 \uc0ac\uc6a9\ud558\ub824\uba74 \uc774 \ucee4\ub9e8\ub4dc\ub97c \uc785\ub825\ud574\uc57c \ud569\ub2c8\ub2e4.","03b4ec1d":"!pip install py7zr\nimport py7zr\nimport os\n\nif not os.path.exists('\/kaggle\/train\/') :\n    os.makedirs('\/kaggle\/train\/')\n\nif not os.path.exists('\/kaggle\/test\/') :\n    os.makedirs('\/kaggle\/test\/')\n\nwith py7zr.SevenZipFile(\"\/kaggle\/input\/statoil-iceberg-classifier-challenge\/train.json.7z\", 'r') as archive:\n    archive.extractall(path=\"\/kaggle\/train\")\n\nwith py7zr.SevenZipFile(\"\/kaggle\/input\/statoil-iceberg-classifier-challenge\/test.json.7z\", 'r') as archive:\n    archive.extractall(path=\"\/kaggle\/test\")\n\nfor dirname, _, filenames in os.walk('\/kaggle'): \n    for filename in filenames: \n        print(os.path.join(dirname, filename))","273477e5":"train = pd.read_json('\/kaggle\/train\/data\/processed\/train.json')\ntest = pd.read_json('\/kaggle\/test\/data\/processed\/test.json')","affb56c8":"train.head()","a9db6b89":"train['inc_angle'].value_counts()","f4cbdc93":"#na -> 0\ntrain.inc_angle = train.inc_angle.replace('na',0)","bd70f3a7":"len(train.loc[0,'band_1'])","e9106dfa":"#Generate the training data\n#Create 3 bands having HH, HV and avg of both\nX_band_1=np.array([np.array(band).astype(np.float32).reshape(75, 75) for band in train[\"band_1\"]])\nX_band_2=np.array([np.array(band).astype(np.float32).reshape(75, 75) for band in train[\"band_2\"]])\n#np.concatenate\ud574\uc11c \uc0c8\ub85c\uc6b4 \ucc44\ub110\uc744 \ud558\ub098\ub354 \ub9cc\ub4e4\uc5b4\uc8fc\ub294 \uac83\uc774\ub2e4 \uceec\ub7ec\uc774\ubbf8\uc9c0\uc774\uae30 \ub54c\ubb38\uc5d0 \nX_train = np.concatenate([X_band_1[:, :, :, np.newaxis], X_band_2[:, :, :, np.newaxis],((X_band_1+X_band_2)\/2)[:, :, :, np.newaxis]], axis=-1)\n\nX_band_test_1=np.array([np.array(band).astype(np.float32).reshape(75, 75) for band in test[\"band_1\"]])\nX_band_test_2=np.array([np.array(band).astype(np.float32).reshape(75, 75) for band in test[\"band_2\"]])\nX_test = np.concatenate([X_band_test_1[:, :, :, np.newaxis]\n                          , X_band_test_2[:, :, :, np.newaxis]\n                         , ((X_band_test_1+X_band_test_2)\/2)[:, :, :, np.newaxis]], axis=-1)","75b7f320":"#\ub9cc\ub4e4\uc5b4 \ubcf4\uae30 \uc608\uc2dc, \uc608\ub85c 14\ubc88 \ucd94\ucd9c \uac12\uc774 0, \uc989 \uc774\uac83\uc740 ship\uc774\ub2e4 \ntrain.loc[14, 'is_iceberg']","3b975c27":"#\uac19\uc740 14\ubc88 ship\uc774\uc9c0\ub9cc \ubcf4\ub294 \uac01\uc5d0 \ub530\ub77c\uc11c \ub098\uc624\ub294 \uac83\uc774 \ub2e4\ub974\ub2e4\ub294 \uac83\uc744 \ubcf4\uc5ec\uc8fc\ub294 \uac83 \nband1 = X_band_1[14,:,:]\nband2 = X_band_2[14,:,:]\n#from plotly import tools, \uc774\ub797\uac8c import tools\ub97c \ud558\uba74 \ub41c\ub2e4 \nfig = tools.make_subplots(rows=1,cols=2, specs=[[{'is_3d': True}, {'is_3d':True}]])\ndata = go.Surface(z = band1, colorscale='RdBu_r', scene='scene1', showscale=True)\ndata1 = go.Surface(z = band2, colorscale='RdBu_r', scene='scene1', showscale=True)\n\nfig['layout'].update(title='3D surface plot for \"{}\" ', titlefont=dict(size=30), height=800, width=1200)\n\n\nfig.append_trace(data,1,1)\nfig.append_trace(data1,1,2)\npy.iplot(fig)","19c0ad8c":"#\uc774 \uc0ac\uc9c4\uc740 z\ucd95\uc744 \uace0\ub824\ud558\uc9c0 \uc54a\uace0 \ubc14\ub85c \uc704\uc5d0\uc11c\ub9cc \ubc14\ub77c\ubcf8 \uadf8\ub9bc\uc774\ub2e4. \nplt.imshow(band1)\nplt.show()","55a5a892":"#\uc774\ub807\uac8c \ub9cc\ub4dc\ub294 \ubc29\ubc95\uc774 \uc788\ub2e4. \nlabel = 'ship'\n\nfig = tools.make_subplots(rows=1, cols=2,  specs=[[{'is_3d': True}, {'is_3d': True}]])\nfig.append_trace(dict(type='surface', z=band1, colorscale='RdBu_r',\n                          scene='scene1', showscale=False), 1, 1)\nfig.append_trace(dict(type='surface', z=band2, colorscale='RdBu_r',\n                          scene='scene2', showscale=False), 1, 2)\n\n#\ubc11\uc5d0 \uc774\uac70\ub294 \uc138\ud305\ud558\ub294\uac83 \ud06c\uae30\ub791, \uc81c\ubaa9\uc774\ub791 \uc774\ub807\uac8c\nfig['layout'].update(title='3D surface plot for \"{}\" (left is from band1, right is from band2)'.format(label), titlefont=dict(size=30), height=800, width=1200)\n\npy.iplot(fig)","edb703b0":"def plot_contour_2d(band1, band2, label):\n    fig = tools.make_subplots(rows=1, cols=2, specs=[[{'is_3d': True}, {'is_3d':True}]])\n    fig.append_trace(dict(type='surface', z=band1, colorscale='RdBu_r',\n                          scene='scene1', showscale=False), 1, 1)\n    fig.append_trace(dict(type='surface', z=band2, colorscale='RdBu_r',\n                          scene='scene2', showscale=False), 1, 2)\n    \n    fig['layout'].update(title='3D surface plot for \"{}\" (left is from band1, right is from band2)'.format(label), titlefont=dict(size=30), height=800, width=1200)\n\n    py.iplot(fig)\n    \n    #\uc5ec\uae30 \ubc11\uc5d0 \ubd80\ubd84\uc740 \uc774\uc81c z\ucd95 \uc5c6\uc774 \uc704\uc5d0\uc11c \ubcf4\ub294 \ubd80\ubd84 \ubcf4\uc5ec\uc8fc\ub294 \ucf54\ub4dc \n    fig, ax = plt.subplots(1,2,figsize=(16,10))\n    ax[0].imshow(X_band_1[num,:,:])\n    ax[0].set_title('Image from band_1', fontsize=15)\n    ax[1].imshow(X_band_2[num,:,:])\n    ax[1].set_title('Image from band_2', fontsize=15)\n    plt.show()\n\n    ","99031269":"num = 0\nlabel = 'iceberg' if (train['is_iceberg'].values[num] == 1) else'ship'\nplot_contour_2d(X_band_1[num,:,:], X_band_2[num,:,:], label)","7324a330":"#num\uc5d0 100\uc744 \ud574\uc11c \ud655\uc778\ud574\ubcf4\uae30 \nnum = 100\nlabel = 'iceberg' if (train['is_iceberg'].values[num] == 1) else'ship'\nplot_contour_2d(X_band_1[num,:,:], X_band_2[num,:,:], label)","1a7d7a4a":"#Import Keras.\nfrom matplotlib import pyplot\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Dense, Dropout, Input, Flatten, Activation\nfrom keras.layers import GlobalMaxPooling2D\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.layers.merge import Concatenate\nfrom keras.models import Model\nfrom keras import initializers\nfrom keras.optimizers import Adam\nfrom keras.callbacks import ModelCheckpoint, Callback, EarlyStopping","b03256be":"#define our model\ndef getModel():\n    #Building the model\n    gmodel=Sequential()\n    #Conv Layer 1\n    gmodel.add(Conv2D(64, kernel_size=(3, 3),activation='relu', input_shape=(75, 75, 3)))\n    gmodel.add(MaxPooling2D(pool_size=(3, 3), strides=(2, 2)))\n    gmodel.add(Dropout(0.2))\n\n    #Conv Layer 2\n    gmodel.add(Conv2D(128, kernel_size=(3, 3), activation='relu' ))\n    gmodel.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n    gmodel.add(Dropout(0.2))\n\n    #Conv Layer 3\n    gmodel.add(Conv2D(128, kernel_size=(3, 3), activation='relu'))\n    gmodel.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n    gmodel.add(Dropout(0.2))\n\n    #Conv Layer 4\n    gmodel.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\n    gmodel.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n    gmodel.add(Dropout(0.2))\n\n    #Flatten the data for upcoming dense layers\n    gmodel.add(Flatten())\n\n    #Dense Layers\n    gmodel.add(Dense(512))\n    gmodel.add(Activation('relu'))\n    gmodel.add(Dropout(0.2))\n\n    #Dense Layer 2\n    gmodel.add(Dense(256))\n    gmodel.add(Activation('relu'))\n    gmodel.add(Dropout(0.2))\n\n    #Sigmoid Layer\n    #Adam \uc740 \ubaa8\ub378\uc744 \ucd5c\uc801\ud654 \uc2dc\ucf1c\uc8fc\ub294 \uae30\ub2a5\uc744 \ud55c\ub2e4, \n    gmodel.add(Dense(1))\n    gmodel.add(Activation('sigmoid'))\n\n    mypotim=Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-08, decay=0.0)\n    gmodel.compile(loss='binary_crossentropy',\n                  optimizer=mypotim,\n                  metrics=['accuracy'])\n    gmodel.summary()\n    return gmodel\n\n\ndef get_callbacks(filepath, patience=2):\n    es = EarlyStopping('val_loss', patience=patience, mode=\"min\")\n    msave = ModelCheckpoint(filepath, save_best_only=True)\n    return [es, msave]\nfile_path = \".model_weights.hdf5\"\ncallbacks = get_callbacks(filepath=file_path, patience=5)","084f4ae6":"target_train = train['is_iceberg']\nX_train, X_valid, y_train, y_valid = train_test_split(X_train,\n                                                      target_train,\n                                                      random_state=1,\n                                                      train_size = 0.8)","c394004f":"#Without denoising, core features.\ngmodel=getModel()\ngmodel.fit(X_train, y_train,\n          batch_size=24,\n          epochs=10,\n          verbose=1,\n          validation_data=(X_valid, y_valid),\n          callbacks=callbacks)","152c1940":"gmodel.load_weights(filepath=file_path)\nscore = gmodel.evaluate(X_valid, y_valid, verbose=1)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","d6df1fad":"predicted_test = gmodel.predict_proba(X_test)","7a727be9":"predicted_test","bc0390bb":"submission = pd.DataFrame()\nsubmission['id']=test['id']\nsubmission['is_iceberg']=predicted_test.reshape((predicted_test.shape[0]))\nsubmission.to_csv('sub.csv', index=False)","c517b4cc":"\ubcf4\uba74 \uc81c\uc77c \uc704\uc5d0 'na'\ub77c\uace0 \uc788\ub294\ub370 \uc774\ub294 missing value\ub77c\uace0 \uc0dd\uac01\ud558\uba74 \ub41c\ub2e4\uace0 \ud55c\ub2e4. \uadf8\ub798\uc11c \uc774 \uac12\uc744 \ubc14\uafd4\uc8fc\ub3c4\ub85d \ud55c\ub2e4. ","20a45ea8":"* \uc800\uc7a5\ub41c weight \ub97c \ub2e4\uc2dc \ubd88\ub7ec\uc640\uc11c validation set \uc5d0 \ub300\ud55c loss \uc640 accuracy \ub97c \ud655\uc778\ud569\ub2c8\ub2e4.","74beeed9":"# Overall workflow\n![image.png](attachment:image.png)\n\uc774\uc81c \ub9e8 \ubc11\uc5d0\ub294 input layer -> \ube68\uac04\uc0c9\uc740 \uc774\ub4e4\uc758 \uc5f0\uacb0 \uac15\ub3c4\ub97c \ud45c\ud604\ud574\uc900\uac83\uc774\uace0 -> \ub178\ub780\uc0c9\uc740 dense -> \ud30c\ub780\uc0c9\uc740 sigmoid","e87e3846":"* \uc774\uc81c \ubcf8\uaca9\uc801\uc73c\ub85c \ub525\ub7ec\ub2dd\uc744 \uc2dc\uc791! \ub370\uc774\ud130\uc14b\uc740 \uc900\ube44\ub42c\uc73c\ub2c8 \uc2e0\uacbd\ub9dd \ubaa8\ub378\uc744 \uc124\uacc4\ud558\uba74 \ub41c\ub2e4. \n* \uc774\ubbf8\uc9c0\uc774\uae30 \ub54c\ubb38\uc5d0 2D CNN\uc744 \uac00\uc9c0\uace0 \uc2e4\uc2dc. keras\uc5d0\ub294 \ub525\ub7ec\ub2dd\uc5d0 \uc0ac\uc6a9\ub418\ub294 \uc5ec\ub7ec layer\ub4e4\uc774 \ub0b4\uc7a5\ub418\uc5b4 \uc788\uae30 \ub54c\ubb38\uc5d0 \uc6b0\ub9ac\ub294 \uadf8\ub0e5 \ube14\ub85d\ucc98\ub7fc \uc313\uae30\ub9cc \ud558\uba74 \ub41c\ub2e4. ","b3b52e42":"\ub2e4\ub978 \ubc29\ubc95 ","6c871f4c":"#### ReLU \ud568\uc218 \n![image.png](attachment:image.png)![](http:\/\/)\n* x>0 \uc774\uba74 \uae30\uc6b8\uae30\uac00 1\uc778 \uc9c1\uc120\uc774\uace0, x<0\uc774\uba74 \ud568\uc218\uac12\uc774 0\uc774\ub41c\ub2e4.\n* sigmoid, tanh \ud568\uc218\uc640 \ube44\uad50\uc2dc \ud559\uc2b5\uc774 \ud6e8\uc52c \ube68\ub77c\uc9c4\ub2e4.\n* \uc5f0\uc0b0 \ube44\uc6a9\uc774 \ud06c\uc9c0\uc54a\uace0, \uad6c\ud604\uc774 \ub9e4\uc6b0 \uac04\ub2e8\ud558\ub2e4.\n* x<0\uc778 \uac12\ub4e4\uc5d0 \ub300\ud574\uc11c\ub294 \uae30\uc6b8\uae30\uac00 0\uc774\uae30 \ub54c\ubb38\uc5d0 \ub274\ub7f0\uc774 \uc8fd\uc744 \uc218 \uc788\ub294 \ub2e8\uc810\uc774 \uc874\uc7ac\ud55c\ub2e4.\n","34ec23dd":"# Model Evaluation","3e813f4d":"# Start Deep Learning","5cc88297":"keras.callbacks\ub97c \ud1b5\ud574\uc11c loss\uac00 \ub354 \uc904\uc9c0 \uc54a\uc744 \uacbd\uc6b0 \ud559\uc2b5\uc744 \uc911\uc9c0\ud55c\ub2e4. ","7157ffe8":"\uc774\ubbf8\uc9c0\ub4e4\uc740 \uc704\uc131\uc5d0\uc11c \uc3dc radar\uac00 \ud2b9\uc815 object\ub97c \ub9cc\ub098\uc11c \ud295\uaca8\uc11c \ub2e4\uc2dc \ub3cc\uc544\uc624\uac8c \ub418\ub294\ub370 \uc774\ub97c \uc774\ubbf8\uc9c0\ub85c \uc800\uc7a5\ud55c \uac83\uc774\ub77c\uace0 \ud55c\ub2e4. \n\nobject\ub4e4\uc774 solid \ud560\uc218\ub85d(land, islands, sea ice, icebergs, ships) \ub354 \uac15\ud55c rader energy\uac00 reflection\ud574\uc11c \uc2e4\uc81c \uc774\ubbf8\uc9c0\uc5d0\uc11c \ub354 \ubc1d\uac8c \ub098\uc628\ub2e4\uace0 \ud55c\ub2e4. \uc774\ub7ec\ud55c \uac83\uc744 'backscatter'\ub77c\uace0 \ud55c\ub2e4 \n\n'backscatter'\ub294 \uc8fc\ubcc0 \ud658\uacbd\uc5d0 \uc601\ud5a5\uc744 \ub9ce\uc774 \ubc1b\ub294\ub370, \uc8fc\ubcc0\uc5d0 \ubc14\ub78c\uc774 \uac15\ud560\uc218\ub85d \uc774\ubbf8\uc9c0\uac00 \ubc1d\uc544\uc9c0\uace0, \ubc14\ub78c\uc774 \uc57d\ud560\uc218\ub85d \uc774\ubbf8\uc791 \uc5b4\ub450\uc6cc\uc9c4\ub2e4, \uc544\ub9c8 \uac15\ud55c \ubc14\ub78c\uc5d0 \ub2f4\uae34 \uc5ec\ub7ec \ubd84\uc790\ub4e4\uc758 \uc6b4\ub3d9\uc5d0\ub108\uc9c0\uac00 reflection\ub418\uba74\uc11c \ub808\uc774\ub354\uc5d0 \ub2f4\uae34\ub2e4\uace0 \ubcf8\ub2e4. \n\n\uc774 \uc774\ubbf8\uc9c0\ub97c \uc9c1\ub294 \uac83\uc740 \uce21\ubc29 \uac10\uc2dc \ub808\uc774\ub354\ub85c\uc11c \ud2b9\uc815 \uac01\ub3c4\ub85c \uc774\ubbf8\uc9c0\ub97c \ucd2c\uc6a9\ud558\ub294 \uac83\uc774\ub2e4. inc_angle\uc740 band_1.band_2\ub97c \ubc14\ub77c\ubcf4\ub294 angle\ub97c \uc758\ubbf8\ud55c\ub2e4. \n\n\uc77c\ubc18\uc801\uc73c\ub85c \ub192\uc740 incidence angle(\uc785\uc0ac\uac01)\uc77c\uc218\ub85d, ocean background\uac00 \uc5b4\ub46c\uc9c4\ub2e4\uace0 \ud55c\ub2e4. \n\nband_1, band_2\ub294 \uc774\ubbf8\uc9c0\ub85c \uc0dd\uac01\ud558\uba74 \ub41c\ub2e4.","4468a9cb":"# Reference\nThank you for his best lecture ever!! I made more detailed by listening his lecture! It will be really helpful for starter.\n\nCheck out 'You Han Lee' youtube and his kaggle. \n\nhttps:\/\/www.kaggle.com\/youhanlee\n\nhttps:\/\/www.youtube.com\/watch?v=uVoagNbaSwo&t=3s","12826479":"* batch_size = \uba87 \uac1c\uc758 \uc0d8\ud50c\ub85c \uac00\uc911\uce58\ub97c \uac31\uc2e0\ud560 \uac83\uc778\uc9c0 \uc124\uc815\ud55c\ub2e4.\n\n \uc608\ub97c \ub4e4\uc5b4 \ubc30\uce58\uc0ac\uc774\uc988\uac00 10\uc778 \uacbd\uc6b0  \ub370\uc774\ud130 10\uac1c\ub9c8\ub2e4 \uc2e4\uc81c \ub808\uc774\ube14 \uac12\uacfc \ube44\uad50\ud558\uae30 \ub54c\ubb38\uc5d0, \ucc98\uc74c\uc5d0 \ud2c0\ub9ac\uac8c \uc608\uce21\ud558\ub354\ub77c\ub3c4 \uac00\uc911\uce58 \uc5c5\ub370\uc774\ud2b8\ub97c \ud558\uba74\uc11c \ub4a4\uc5d0\ub294 \ub9de\ucd94\uac8c \ub420 \ud655\ub960\uc774 \ub192\uc2b5\ub2c8\ub2e4.\ubc30\uce58\uc0ac\uc774\uc988\uac00 \uc791\uc73c\uba74 \ud559\uc2b5\uc740 \ucd18\ucd18\ud558\uac8c \ub418\uaca0\uc9c0\ub9cc \uacc4\uc18d \ub808\uc774\ube14\uacfc \ube44\uad50\ud558\uace0, \uac00\uc911\uce58\ub97c \uc5c5\ub370\uc774\ud2b8\ud558\ub294 \uacfc\uc815\uc744 \uac70\uce58\uba74\uc11c \uc2dc\uac04\uc774 \uc624\ub798 \uac78\ub9bd\ub2c8\ub2e4.\n* epochs = \uc804\uccb4 \ub370\uc774\ud130\uc14b\uc744 \uba87 \ubc88 \ubc18\ubcf5\ud559\uc2b5\ud560\uc9c0 \uc124\uc815\ud55c\ub2e4. \n\n\ubc18\ubcf5\ud559\uc2b5\uc744 \ud1b5\ud574 \ubaa8\ub378\uc758 \uc131\ub2a5\uc744 \ud5a5\uc0c1\uc2dc\ud0ac \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc, \ub108\ubb34 \ub9ce\uc774 \ubc18\ubcf5\ud559\uc2b5\uc744 \ud558\uba74 \ud559\uc2b5\uc14b\uc5d0 \ub300\ud574 \uc131\ub2a5\uc740 \uc62c\ub77c\uac00\uc9c0\ub9cc \uad00\uce21\ub418\uc9c0 \ubabb\ud55c \ud14c\uc2a4\ud2b8\uc14b\uc5d0 \ub300\ud55c \uc131\ub2a5\uc774 \ub5a8\uc5b4\uc9c0\ub294 \uc624\ubc84\ud53c\ud305(overfitting)\uc774 \ubc1c\uc0dd\ud558\uac8c \ub429\ub2c8\ub2e4. \ub54c\ubb38\uc5d0, \uc624\ubc84\ud53c\ud305\uc774 \uc77c\uc5b4\ub0a0 \uac83 \uac19\uc73c\uba74 \ud559\uc2b5\uc744 \uc885\ub8cc\ud569\ub2c8\ub2e4.\n![image.png](attachment:image.png)","6301765a":"#### Input Shape\n\ucc98\uc74c\uc5d0 filters \uac2f\uc218 \nConv2D(filters, kernel_size, padding, input size= 75 x 75\uc778 3\uac1c \n\n\ud544\ud130 \uac2f\uc218\ub9cc \ub2ec\ub77c\uc9c0\uace0 \ub098\uba38\uc9c0 \ubaa8\uc591\uc740 \ube44\uc2b7 ","eef1e373":"\ube68\uac04\uc0c9 \ubd09\uc6b0\ub9ac\uac00 ship \uc758 \ubaa8\uc591\uc744 \ub098\ud0c0\ub0b4\uba70, HH, HV \uc5d0 \ub530\ub77c radar \ub97c \ubcf4\ub294 \ubc29\ud5a5\uc774 \ub2ec\ub77c \uc870\uae08 \ub2e4\ub974\uac8c \ub098\uc624\uc9c0\ub9cc, \uacb0\uad6d \uac19\uc740 \uac83\uc744 \ub098\ud0c0\ub0c4\uc744 \uc54c \uc218 \uc788\ub2e4. ","cb786924":"### CNN\nCNN(Convolutional Neural Network)\uc740 \uc774\ubbf8\uc9c0\ub97c \ubd84\uc11d\ud558\uae30 \uc704\ud574 \ud328\ud134\uc744 \ucc3e\ub294\ub370 \uc720\uc6a9\ud55c \uc54c\uace0\ub9ac\uc998\uc73c\ub85c \ub370\uc774\ud130\uc5d0\uc11c \uc774\ubbf8\uc9c0\ub97c \uc9c1\uc811 \ud559\uc2b5\ud558\uace0 \ud328\ud134\uc744 \uc0ac\uc6a9\ud574 \uc774\ubbf8\uc9c0\ub97c \ubd84\ub958\ud55c\ub2e4. CNN\uc758 \ud575\uc2ec\uc801\uc778 \uac1c\ub150\uc740 \uc774\ubbf8\uc9c0\uc758 \uacf5\uac04\uc815\ubcf4\ub97c \uc720\uc9c0\ud558\uba70 \ud559\uc2b5\uc744 \ud560\uc218 \uc788\ub2e4\ub294 \uac83\uc774\ub2e4. CNN\uc740 \uc774\ubbf8\uc9c0\uc758 \ud615\ud0dc\ub97c \ubcf4\uc874\ud558\ub3c4\ub85d \ud589\ub82c \ud615\ud0dc\uc758 \ub370\uc774\ud130\ub97c \uc785\ub825 \ubc1b\uae30 \ub54c\ubb38\uc5d0 \uc774\ubbf8\uc9c0\ub97c \ubca1\ud130\ud654 \ud558\ub294 \uacfc\uc815\uc5d0\uc11c \ubc1c\uc0dd\ud558\ub294 \uc815\ubcf4 \uc190\uc2e4\uc744 \ubc29\uc9c0\ud560 \uc218 \uc788\ub2e4. \uc989 \uae30\ubcf8 \uac1c\ub150\uc740 \"\ud589\ub82c\ub85c \ud45c\ud604\ub41c \ud544\ud130\uc758 \uac01 \uc694\uc18c\uac00 \ub370\uc774\ud130 \ucc98\ub9ac\uc5d0 \uc801\ud569\ud558\ub3c4\ub85d \uc790\ub3d9\uc73c\ub85c \ud559\uc2b5\ub418\uac8c \ud558\uc790\"\ub294 \uac83\uc774\ub2e4.\n\n![image.png](attachment:image.png)\n","664d12bd":"#### pool_size: \n\uc815\uc218 \ud639\uc740 2\uac1c \uc815\uc218\uc758 \ud29c\ud50c, \ucd95\uc18c \uc778\uc218 (\uac00\ub85c, \uc138\ub85c). (2, 2)\ub294 \uc778\ud48b\uc744 \ub450 \uacf5\uac04 \ucc28\uc6d0\uc5d0 \ub300\ud574 \ubc18\uc73c\ub85c \ucd95\uc18c\ud569\ub2c8\ub2e4. \ud55c \uc815\uc218\ub9cc \ud2b9\uc815\ub41c \uacbd\uc6b0, \ub3d9\uc77c\ud55c \uc708\ub3c4\uc6b0 \uae38\uc774\uac00 \ub450 \ucc28\uc6d0 \ubaa8\ub450\uc5d0 \ub300\ud574 \uc801\uc6a9\ub429\ub2c8\ub2e4.\n#### strides: \n\uc815\uc218, 2\uac1c \uc815\uc218\uc758 \ud29c\ud50c, \ud639\uc740 None. \ubcf4\ud3ed \uac12. None\uc77c \uacbd\uc6b0, \ub514\ud3f4\ud2b8 \uac12\uc778 pool_size\uac00 \ub429\ub2c8\ub2e4.","d575e7f5":"\uc57d\uac04 \uc774\uac74 num = 0 \uacfc\ub294 \ub2e4\ub978\ub370 \ubd09\uc6b0\ub9ac \uc774\uc678\uc5d0 \ub2e4\ub978 \ube59\ud558\ub4e4\uc774 \uc880 \uc788\ub294 \ub2e4\ub978 \ubaa8\uc2b5\uc744 \ud655\uc778 \uac00\ub2a5\ud558\ub2e4. ","5f6cb50a":"### Dropout\n:Dropout\uc740 \ub525\ub7ec\ub2dd \ud559\uc2b5\uc5d0 \uc788\uc5b4\uc11c\uc758 \ubb38\uc81c\uc911 \ud558\ub098\uc778 Overfitting\uc744 \ud574\uc18c\ud558\uae30 \uc704\ud55c \ubc29\ubc95\uc774\ub2e4. \uc694\uc57d\ud558\uc790\uba74 hidden layer\uc758 \uc77c\ubd80 \uc720\ub2db\uc774 \ub3d9\uc791\ud558\uc9c0 \uc54a\uac8c \ud558\uc5ec overfitting \ub418\ub294 \uac83\uc744 \ub9c9\ub294 \ubc29\ubc95\uc774\ub2e4.\n![image.png](attachment:image.png)\n\uc77c\ubd80\ub85c \ubaa8\ub378\uc744 \ub35c \ub611\ub611\ud558\uac8c \ub9cc\ub4e4\uc5b4\uc8fc\ub294 \uacfc\uc815\uc774\ub77c\uace0 \ud55c\ub2e4.","619d2cf9":"\ub370\uc774\ud130\uc758 \ud615\ud0dc\ub97c \ubcf4\uba74 \n* id\n* feature: band_1, band_2, inc_angle\n* target: is_iceberg -> iceberg = 1, ship = 0","8f7842b9":"\uadf8\ub9ac\uace0 \ucd94\uac00\uc801\uc73c\ub85c float\ud615\ud0dc\ub4e4\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\uae30 \ub54c\ubb38\uc5d0 float\uc73c\ub85c \ubc14\uafd4\uc8fc\uace0 \uc2dc\uc791","16c4c8ff":"* \ub354 \ub098\uc740 \ubaa8\ub378\uc744 \uc704\ud558\uc5ec \ubc14\ub85c test\ub97c \ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c, \uae30\uc874 train set \uc744 train, valid\ub85c \ub098\ub220\uc11c \uba3c\uc800 \ubaa8\ub378\uc744 \ud3c9\uac00\ud574\ubd05\ub2c8\ub2e4.\n* Sklearn \ub0b4\uc7a5 \ud568\uc218\uc778 train_test_split \uc744 \uc774\uc6a9\ud558\uba74 \uc27d\uac8c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","fceb8684":"\uc774\ub4e4\uc774 \uae38\uc774\ub294 5625\uc774\uace0 \uc774\ub4e4\uc744 \ud559\uc2b5\ud558\uae30 \uc704\ud574\uc11c \uc774\ubbf8\uc9c0 75x75 = 5625\uc774\ubbc0\ub85c \ud559\uc2b5\ud558\uae30 \uc88b\uac8c \ud558\uae30 \uc704\ud574\uc11c \uc0ac\uc774\uc988\ub97c 75x75\uc0ac\uc774\uc988\ub85c \ubc14\uafb8\uace0, 2D CNN\ud559\uc2b5\uc744 \uc704\ud574\uc11c [N, height, width, channel]\uc758 \ucc28\uc6d0\uc744 \uac00\uc9c0\ub3c4\ub85d \ubc14\uafd4\uc900\ub2e4. np.newaxis\ub97c \uc0ac\uc6a9\ud558\uba74 \uc27d\uac8c \uc0ac\uc6a9 \uac00\ub2a5\ud558\ub2e4.","e6d2cea1":"* \ub370\uc774\ud130\ub4e4\uc740 json\ud615\ud0dc\ub85c \uc8fc\uc5b4\uc838 \uc788\ub294\ub370 \uc774\ub97c pandas\ub85c pd.read_csv\ub85c \uc790\uc8fc\uc0ac\uc6a9\ud558\ub358 \ud615\ud0dc\uac00 \uc544\ub2c8\ub77c pd.read_json\uc73c\ub85c \uc77d\ub294\ub2e4. \n* \ub610\ud55c \uc774\ubc88 \ud30c\uc77c\uc740 7z\ud615\ud0dc\ub85c \ub418\uc5b4\uc788\uc5b4\uc11c \ubc11\uc5d0 \ucf54\ub4dc\ub85c \uc774\ub97c \uc5f4\uc5b4\uc8fc\ub3c4\ub85d \ud55c\ub2e4. ","a75e7645":"\uacb0\ub860\uc801\uc73c\ub85c \uc774\uac83\uc740 \uc774\ub807\uac8c \ubc14\uafc8\uc73c\ub85c\uc11c 3\uac1c\uc758 \ucc44\ub110\ub85c \uc774\ub8e8\uc5b4\uc9c4 \uc774\ubbf8\uc9c0\ub97c \uc5bb\uac8c \ub418\ub294 \ucf54\ub4dc\uc774\ub2e4. train, test\uc5d0 \ub300\ud574\uc11c \uc2e4\ud589. ","d7f9250e":"### MaxPooling2D\n\ubaa9\uc801\n1. input size\ub97c \uc904\uc784.\n: \uc5ec\ub7ec\ubc88 convolution layer\uc744 \ubc18\ubcf5\ud558\uac8c \ub418\ub294\ub370, \ubcc4\ub85c \ud544\uc694\ud558\uc9c0 \uc54a\uc740 \uc790\ub8cc\uae4c\uc9c0 \uc804\ubd80\ub97c \ub2e4 \ubd84\uc11d\ud560 \ud544\uc694\uac00 \uc5c6\ub2e4. \ud2b9\uc9d5\ub9cc \ubf51\uc544\ub0b4\uc11c, \ud559\uc2b5\ud558\ub294 \uac83\uc774 \ud569\ub9ac\uc801\uc774\uc9c0 \uc54a\uaca0\ub294\uac00? \n\n2. overfitting\uc744 \uc870\uc808\n: input size\uac00 \uc904\uc5b4\ub4dc\ub294 \uac83\uc740 \uadf8\ub9cc\ud07c \uc4f8\ub370\uc5c6\ub294 parameter\uc758 \uc218\uac00 \uc904\uc5b4\ub4dc\ub294 \uac83\uc774\ub77c\uace0 \uc0dd\uac01\ud560 \uc218 \uc788\ub2e4. \ud6c8\ub828\ub370\uc774\ud130\uc5d0\ub9cc \ub192\uc740 \uc131\ub2a5\uc744 \ubcf4\uc774\ub294 \uacfc\uc801\ud569(overfitting)\uc744 \uc904\uc77c \uc218 \uc788\ub2e4.\n\n3. \ud2b9\uc9d5\uc744 \uc798 \ubf51\uc544\ub0c4.\n: pooling\uc744 \ud588\uc744 \ub54c, \ud2b9\uc815\ud55c \ubaa8\uc591\uc744 \ub354 \uc798 \uc778\uc2dd\ud560 \uc218 \uc788\uc74c.","795ea4a9":"* \uc774\ubc88 \ucef4\ud53c\ud2f0\uc158\uc740 \uc774\ub4e4\uc774 \uc81c\uacf5\ud55c \uc704\uc131\uc0ac\uc9c4\uc744 \uac00\uc9c0\uace0 \ubc30\uc640 \ube59\ud558\ub97c \uad6c\ubd84\ud574\ub0b4\ub294 \uba38\uc2e0\ub7ec\ub2dd\uacfc \ub525\ub7ec\ub2dd \ubaa8\ub370\uc744 \uad6c\ucd95\ud558\ub294 \ucef4\ud53c\ud2f0\uc158\uc774\ub2e4.  \n* IMAGE CLASSIFICATION\uc774\uace0 BINARY CLASSIFICATION\uc774\ub2e4. \n* keras\ub97c \uc0ac\uc6a9\ud55c 2-D convolutional neural network(CNN)\uc744 \ubc30\uc6b8\uc218 \uc788\ub2e4.\n* keras\ub294 \uc720\uba85\ud55c \ub525\ub7ec\ub2dd \ud504\ub808\uc784\uc6cc\ud06c\ub85c, \ub525\ub7ec\ub2dd \ubaa8\ub378\uc744 \uc27d\uace0 \ube60\ub974\uac8c \uad6c\ucd95\ud55c\ub2e4. \n* plotly\ub294 interactive\ud55c visulization\uc744 \uac00\ub2a5\ud558\uac8c \ud558\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc774\ub2e4. ","1d413718":"### **Conv2D**\n-> \uc8fc\ub85c \uc601\uc0c1 \ucc98\ub9ac\uc5d0 \ud2b9\ud654\ub418\uc5b4 \uc788\uc5b4\uc11c \uc601\uc0c1\ucc98\ub9ac\ucabd\uc5d0\uc11c \ub9ce\uc774 \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95 \n\ngmodel.add(Conv2D(64, kernel_size=(3, 3),activation='relu', input_shape=(75, 75, 3)))\n\n* \uccab\ubc88\uc9f8 \uc778\uc790: 64 -> \ucee8\ubcfc\ub8e8\uc158 \ud544\ud130\uc758 \uc218, \uc989 \uc5f0\uacb0\ub418\uc788\ub294 \ub274\ub7f0\uc758 \uc218\ub77c\uace0 \uc0dd\uac01\ud558\uba74 \ub41c\ub2e4  \n* \ub450\ubc88\uc9f8 \uc778\uc790: kernel_size = (3,3) -> \ucee8\ubcfc\ub8e8\uc158 \ucee4\ub110\uc758(\ud589,\uc5f4)\n* \uc138\ubc88\uc7ac \uc778\uc790: activation='relu' -> \ud65c\uc131\ud654 \ud568\uc218 \uc124\uc815, rectifier\ud568\uc218\ub85c,\uc740\uc775\uce35\uc5d0 \uc8fc\ub85c \uc4f0\uc778\ub2e4 \n* *relu: \uc27d\uac8c \uc0dd\uac01\ud574\uc11c 0\ubcf4\ub2e4 \uac12\uc774 \uc791\uc73c\uba74 0\uc744 \ubc18\ud658\ud558\uace0, 0\ubcf4\ub2e4 \ud070 \uac12\uc774 \ub098\uc624\ub294 \uacbd\uc6b0 \uadf8 \uac12\uc744 \uadf8\ub300\ub85c \ubc18\ud658\ud558\ub294 \ud568\uc218\uc774\ub2e4. \n* \ub124\ubc88\uc7ac \uc778\uc790: input_shpae(75,75,3) -> \uc0ac\uc774\uc988 75x75 \uadf8\ub9ac\uace0 \uceec\ub7ec\uc0ac\uc9c4(RGB)\uc774\ub2c8\uae50 \ucc44\ub110\uc744 3, \ud751\ubc31\uc778 \uacbd\uc6b0 \ucc44\ub1101 ","de000375":"\ubc11\uc5d0 \uc774\uc81c num\ubd80\ubd84\uc5d0 \uc22b\uc790\ub97c \uc785\ub825\ud574\uc11c \uc6b0\ub9ac\uac00 \uc6d0\ud558\ub294 \ubd80\ubd84\uc744 \ubcfc \uc218 \uc788\ub2e4. "}}