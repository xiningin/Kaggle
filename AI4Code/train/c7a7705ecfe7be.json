{"cell_type":{"36ec5f56":"code","f981cbe8":"code","0c354769":"code","f8b0db8e":"code","591fca37":"code","f1fc12a9":"code","94856fd8":"code","00cbdf0d":"code","8cb2ff9f":"code","fcfd8840":"code","b4b828e1":"code","98fe9fa0":"code","fe36bc66":"code","8c4d3c33":"code","8c4ac8f6":"code","686da40e":"code","6c8923d2":"code","6030ce38":"code","17d812dc":"code","b88ad0a8":"code","92cae530":"code","d3f302f4":"code","927dfa26":"code","4a6e3cc4":"code","8de8f0cb":"code","878d7bcb":"code","c748688c":"code","72b0ba18":"code","8937b67e":"code","c30d1055":"code","52715d6d":"code","dcaa73b8":"code","bcb110a6":"code","1471a709":"code","5098264c":"code","1ae85879":"code","b5c60b10":"code","3b062969":"code","8c8b08aa":"code","4346e09f":"code","b31274d4":"code","428094d6":"code","84f087cd":"code","3125fbf0":"code","8de9bc44":"code","66244cf2":"code","e6f55f07":"code","ad6ca28e":"code","ec5d8a99":"code","22dc77bd":"code","2079243f":"code","71ad5c86":"code","fd1b3740":"code","afeb28b5":"code","47a736f2":"code","743e4473":"code","64862b75":"code","11a4a148":"code","1cacc1f3":"code","33b250fc":"code","9fed2910":"code","4cf0c4f9":"markdown","b08bba0b":"markdown","28dd02b6":"markdown","dd240425":"markdown","f5dc05a4":"markdown","8097b5a2":"markdown","1e1b019d":"markdown","1b50586a":"markdown","710e3d93":"markdown","94afb1b8":"markdown","29974189":"markdown","92277bbc":"markdown","98214564":"markdown","ff930098":"markdown","865162a5":"markdown","393ebbd5":"markdown","642c1f77":"markdown","8a73d31b":"markdown","42ec5bc0":"markdown","706890d0":"markdown","80520155":"markdown","05ad0a47":"markdown","48969840":"markdown","e11f5efd":"markdown","94b1387f":"markdown","f5f1acc6":"markdown","39548186":"markdown","bc76f41c":"markdown","1c38d587":"markdown","fa2cc968":"markdown","8cacfc50":"markdown","47fa104b":"markdown","71014525":"markdown","fe06f26a":"markdown","ea59db7f":"markdown"},"source":{"36ec5f56":"import math as mt\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","f981cbe8":"df_pcdata=pd.read_json(\"..\/input\/weeklyRivensPC.json\")\ndf_xboxdata=pd.read_json(\"..\/input\/weeklyRivensXB1.json\")\ndf_playstationdata=pd.read_json(\"..\/input\/weeklyRivensPS4.json\")\ndf_switchdata=pd.read_json(\"..\/input\/weeklyRivensSWI.json\")","0c354769":"print(\"pc data shape: \",df_pcdata.shape)\nprint(\"xbox one data shape: \",df_xboxdata.shape)\nprint(\"play station 4 data shape: \",df_playstationdata.shape)\nprint(\"switch data shape: \",df_switchdata.shape)","f8b0db8e":"df_pcdata.isnull().values.any()\ndf_pcdata.isnull().sum()","591fca37":"df_pcdata['cv']=round(df_pcdata['stddev']\/df_pcdata['avg']*100,0)\ndf_xboxdata['cv']=round(df_xboxdata['stddev']\/df_xboxdata['avg']*100,0)\ndf_playstationdata['cv']=round(df_playstationdata['stddev']\/df_playstationdata['avg']*100,0)\ndf_switchdata['cv']=round(df_switchdata['stddev']\/df_switchdata['avg']*100,0)","f1fc12a9":"df_pcdata.head()","94856fd8":"df_pcdata.describe()","00cbdf0d":"sns.set_style(\"white\")\n#cmap = sns.cubehelix_palette(rot=-.2, as_cmap=True)\n\nfig, ax = plt.subplots(figsize=(20,10))\n\nax = sns.scatterplot(x=\"compatibility\", \n                     y=\"median\",                    \n                     #size='rerolled', \n                     #sizes=(90, 30),\n                     #hue='itemType', \n                     #palette=cmap,\n                     data=df_pcdata,\n                     label='median')\n\nax = sns.scatterplot(x=\"compatibility\", \n                     y=\"avg\", \n                     #size='rerolled', \n                     #sizes=(90, 30),\n                     #hue='itemType', \n                     #palette=cmap,\n                     data=df_pcdata,\n                     label='mean')\n\nax.set(xticklabels=[])\n\nax.yaxis.grid(True, \n         which='major', \n         color='#666666', \n         linestyle='-',\n         linewidth=0.25, \n         alpha=0.4)\n\nplt.title('\\nMedian & mean Price for all compatibilities (PC)\\n', fontsize=14, fontweight='bold')\nplt.ylabel('\\nPrice', fontsize=12)\nplt.xlabel('Compatibility\\n', fontsize=12);","8cb2ff9f":"fig, ax = plt.subplots(figsize=(20,10))\n\nax = sns.scatterplot(x=\"compatibility\", \n                     y=\"median\",                    \n                     #size='rerolled', \n                     #sizes=(90, 30),\n                     #hue='itemType', \n                     #palette=cmap,\n                     data=df_pcdata,\n                     label='median')\n\nax = sns.scatterplot(x=\"compatibility\", \n                     y=\"stddev\", \n                     #size='rerolled', \n                     #sizes=(90, 30),\n                     #hue='itemType', \n                     #palette=cmap,\n                     data=df_pcdata,\n                     label='stddev',\n                     color='r')\n\nax.set(xticklabels=[])\nax.legend()\n\nax.yaxis.grid(True, \n         which='major', \n         color='#666666', \n         linestyle='-',\n         linewidth=0.25, \n         alpha=0.4)\n\n\n\nplt.title('\\nMedian & standard deviation of Price for all compatibilities (PC)\\n', fontsize=14, fontweight='bold')\nplt.ylabel('\\nPrice', fontsize=12)\nplt.xlabel('Compatibility\\n', fontsize=12);","fcfd8840":"fig, ax = plt.subplots(figsize=(20,10))\n\nax = sns.scatterplot(x=\"compatibility\", \n                     y=\"cv\",                    \n                     #size='rerolled', \n                     #sizes=(90, 30),\n                     #hue='itemType', \n                     #palette=cmap,\n                     data=df_pcdata,\n                     label='median')\n\nax.set(xticklabels=[])\nax.yaxis.grid(True, \n         which='major', \n         color='#666666', \n         linestyle='-',\n         linewidth=0.25, \n         alpha=0.4)\n\nplt.title('\\nCoefficient of variation (CV) for all compatibilities(PC)\\n', fontsize=14, fontweight='bold')\nplt.xlabel('\\nCompatibility\\n', fontsize=12)\nplt.ylabel('\\nCV\\n', fontsize=12);","b4b828e1":"df_underXcv = df_pcdata.copy()\ndf_underXcv = df_underXcv.loc[df_underXcv['cv']<100]\n#df_underXcv.head()","98fe9fa0":"#sns.set_style(\"white\")\n\nfig, ax = plt.subplots(figsize=(20,10))\n\nax = sns.scatterplot(x=\"compatibility\", \n                     y=\"median\",                    \n                     #size='rerolled', \n                     #sizes=(90, 30),\n                     #hue='itemType', \n                     #palette=cmap,\n                     data=df_underXcv,\n                     label='median')\n\nax = sns.scatterplot(x=\"compatibility\", \n                     y=\"avg\", \n                     #size='rerolled', \n                     #sizes=(90, 30),\n                     #hue='itemType', \n                     #palette=cmap,\n                     data=df_underXcv,\n                     label='mean')\n\nax.set(xticklabels=[])\n\nax.yaxis.grid(True, \n         which='major', \n         color='#666666', \n         linestyle='-',\n         linewidth=0.25, \n         alpha=0.4)\n\nplt.title('\\nMedian & mean Price for all compatibilities(PC) for CV<100\\n', fontsize=14, fontweight='bold')\nplt.ylabel('\\nPrice', fontsize=12)\nplt.xlabel('Compatibility\\n', fontsize=12);","fe36bc66":"df_pcdata_multi = df_pcdata.copy()\ndf_pcdata_multi = df_pcdata_multi.loc[(df_pcdata_multi['min']!=df_pcdata_multi['max'])&(df_pcdata_multi['min']!=df_pcdata_multi['avg'])&(df_pcdata_multi['max']!=df_pcdata_multi['avg'])]\n#df_pcdata_multi.head()","8c4d3c33":"df_pcdata.describe()","8c4ac8f6":"df_underXcv.describe()","686da40e":"\ndf_pcdata_multi.describe()","6c8923d2":"print(\"The total median of all compability-medians (PC data) is: \", df_pcdata['median'].median())\nprint(\"The total median of all compability-medians (cv below 100) is: \", df_underXcv['median'].median())\nprint(\"The total median of all compability-medians (2+ entries) is: \", df_pcdata_multi['median'].median())","6030ce38":"print(\"The total median of all compability-maxima (PC data) is: \", df_pcdata['max'].median())\nprint(\"The total median of all compability-maxima (cv below 100) is: \", df_underXcv['max'].median())\nprint(\"The total median of all compability-maxima (2+ entries) is: \", df_pcdata_multi['max'].median())","17d812dc":"df_pcdata_types = df_pcdata.groupby(['itemType']).agg({'avg':'count'}).rename(columns={'avg':'count'})\ndf_pcdata_types.head()","b88ad0a8":"\nfig, ax = plt.subplots(figsize=(12,12))\ndf_pcdata_types.plot(kind='pie', \n                     y = 'count', \n                     ax=ax, \n                     autopct='%1.1f%%', \n                     startangle=90, \n                     shadow=False, \n                     labels=df_pcdata['itemType'], \n                     legend = False, \n                     fontsize=10)\n# Equal aspect ratio ensures that pie is drawn as a circle\nax.axis('equal')\nplt.tight_layout()\n\nplt.xlabel('')\nplt.ylabel('')\nplt.title('\\nPie chart: Distrubution of compatibilities by itemTypes (PC)\\n', fontsize=14, fontweight='bold');","92cae530":"red_square = dict(markerfacecolor='salmon', markeredgecolor='salmon', marker='.', markersize='8')\n\ndf_pcdata.boxplot(column='median', \n                  by='itemType',\n                  flierprops=red_square,\n                  vert=False,\n                  figsize=(14,6))\n\nplt.xlabel('\\nmedian price', fontsize=12)\nplt.ylabel('itemType\\n', fontsize=12)\nplt.title('\\nBoxplot: Median prices by itemType (PC)\\n', fontsize=14, fontweight='bold')\n\n# get rid of automatic boxplot title\nplt.suptitle('');\nplt.grid(True, which='major', color='#666666', linestyle='-',linewidth=0.25, alpha=0.4)","d3f302f4":"sns.set_style(\"white\")\n\nfig, ax = plt.subplots(figsize=(20,6))\nred_square = dict(markerfacecolor='salmon', markeredgecolor='salmon', marker='.', markersize='8')\nax = sns.boxplot(x='avg', \n            y='itemType',                \n            hue='rerolled',\n            flierprops=red_square,\n            data=df_pcdata)\n\nplt.xlabel('\\nmedian price', fontsize=12)\nplt.ylabel('itemType\\n', fontsize=12)\nplt.title('\\nBoxplot: Average unrolled & rerolled prices by itemType (PC)\\n', fontsize=14, fontweight='bold')\n\n\nplt.grid(True, which='major', color='#666666', linestyle='-',linewidth=0.25, alpha=0.4);","927dfa26":"sns.set_style(\"white\")\n\nfig, ax = plt.subplots(figsize=(20,6))\nred_square = dict(markerfacecolor='salmon', markeredgecolor='salmon', marker='.', markersize='8')\nax = sns.boxplot(x='median', \n            y='itemType',                \n            hue='rerolled',\n            flierprops=red_square,\n            data=df_pcdata)\n\nplt.xlabel('\\nmedian price', fontsize=12)\nplt.ylabel('itemType\\n', fontsize=12)\nplt.title('\\nBoxplot: Median unrolled & rerolled prices by itemType (PC)\\n', fontsize=14, fontweight='bold')\n\n\nplt.grid(True, which='major', color='#666666', linestyle='-',linewidth=0.25, alpha=0.4);","4a6e3cc4":"df_pcdata_unrolled = df_pcdata.loc[df_pcdata['rerolled']==False].copy()\ndf_pcdata_rerolled = df_pcdata.loc[df_pcdata['rerolled']==True].copy()","8de8f0cb":"sns.set_style(\"white\")\n\nfig, ax = plt.subplots(figsize=(20,10))\n\nax = sns.scatterplot(x=\"compatibility\", \n                     y=\"median\",                    \n                     #size='rerolled', \n                     #sizes=(90, 30),\n                     #hue='itemType', \n                     #palette=cmap,\n                     data=df_pcdata_unrolled,\n                     label='median unrolled')\n\nax = sns.scatterplot(x=\"compatibility\", \n                     y=\"median\", \n                     #size='rerolled', \n                     #sizes=(90, 30),\n                     #hue='itemType', \n                     #palette=cmap,\n                     data=df_pcdata_rerolled,\n                     label='median rerolled')\n\nax.set(xticklabels=[])\n\nax.yaxis.grid(True, \n         which='major', \n         color='#666666', \n         linestyle='-',\n         linewidth=0.25, \n         alpha=0.4)\nax.axhline(df_pcdata_unrolled['median'].median(), ls='-.', color='C0')\nax.axhline(df_pcdata_rerolled['median'].median(), ls='--', color='C1')\nax.text(x=305, y=df_pcdata_unrolled['median'].median(), s='median unr.', alpha=0.7, color='C0')\nax.text(x=305, y=df_pcdata_rerolled['median'].median(), s='median rer.', alpha=0.7, color='C1')\n\nplt.title('\\nMedian unrolled & rerolled prices for all compatibilities (PC)\\n', fontsize=14, fontweight='bold')\nplt.ylabel('\\nPrice', fontsize=12)\nplt.xlabel('Compatibility\\n', fontsize=12);","878d7bcb":"print(\"The total median of all compability-medians is: \", df_pcdata['median'].median())\nprint(\"The total median of all compability-medians (unrolled) is: \", df_pcdata_unrolled['median'].median())\nprint(\"The total median of all compability-medians (rerolled) is: \", df_pcdata_rerolled['median'].median())","c748688c":"print(\"The total median of all compability-medians for Kitguns is: \", df_pcdata['median'].loc[df_pcdata['itemType']=='Kitgun Riven Mod'].median())\nprint(\"The total median of all compability-medians (unrolled) for Kitguns is: \", df_pcdata_unrolled['median'].loc[df_pcdata['itemType']=='Kitgun Riven Mod'].median())\nprint(\"The total median of all compability-medians (rerolled) for Kitguns is: \", df_pcdata_rerolled['median'].loc[df_pcdata['itemType']=='Kitgun Riven Mod'].median())","72b0ba18":"sns.set_style(\"white\")\n\nfig, ax = plt.subplots(figsize=(20,10))\n\nax = sns.scatterplot(x=\"compatibility\", \n                     y=\"max\",                    \n                     #size='rerolled', \n                     #sizes=(90, 30),\n                     #hue='itemType', \n                     #palette=cmap,\n                     data=df_pcdata_unrolled,\n                     label='max unrolled')\n\nax = sns.scatterplot(x=\"compatibility\", \n                     y=\"max\", \n                     #size='rerolled', \n                     #sizes=(90, 30),\n                     #hue='itemType', \n                     #palette=cmap,\n                     data=df_pcdata_rerolled,\n                     label='max rerolled')\n\nax.set(xticklabels=[])\n\nax.yaxis.grid(True, \n         which='major', \n         color='#666666', \n         linestyle='-',\n         linewidth=0.25, \n         alpha=0.4)\nax.axhline(df_pcdata_unrolled['max'].max(), ls='-.', color='C0')\nax.axhline(df_pcdata_rerolled['max'].max(), ls='--', color='C1')\nax.text(x=305, y=df_pcdata_unrolled['max'].max(), s='max unr.', alpha=0.7, color='C0')\nax.text(x=305, y=df_pcdata_rerolled['max'].max(), s='max rer.', alpha=0.7, color='C1')\n\nplt.title('\\nMaximum unrolled & rerolled prices for all compatibilities (PC)\\n', fontsize=14, fontweight='bold')\nplt.ylabel('\\nPrice', fontsize=12)\nplt.xlabel('Compatibility\\n', fontsize=12);","8937b67e":"print(\"The total max of all compability-max is: \", df_pcdata['max'].max())\nprint(\"The total max of all compability-max (unrolled) is: \", df_pcdata_unrolled['max'].max())\nprint(\"The total max of all compability-max (rerolled) is: \", df_pcdata_rerolled['max'].max())","c30d1055":"sns.set_style(\"white\")\n\nfig, ax = plt.subplots(figsize=(20,10))\n\nax = sns.scatterplot(x=\"compatibility\", \n                     y=\"avg\",                    \n                     #size='rerolled', \n                     #sizes=(90, 30),\n                     #hue='itemType', \n                     #palette=cmap,\n                     data=df_pcdata_unrolled,\n                     label='average unrolled')\n\nax = sns.scatterplot(x=\"compatibility\", \n                     y=\"avg\", \n                     #size='rerolled', \n                     #sizes=(90, 30),\n                     #hue='itemType', \n                     #palette=cmap,\n                     data=df_pcdata_rerolled,\n                     label='average rerolled')\n\nax.set(xticklabels=[])\n\nax.yaxis.grid(True, \n         which='major', \n         color='#666666', \n         linestyle='-',\n         linewidth=0.25, \n         alpha=0.4)\nax.axhline(df_pcdata_unrolled['avg'].mean(), ls='-.', color='C0')\nax.text(x=305, y=df_pcdata_unrolled['avg'].mean(), s='tot. avg unr.', alpha=0.7, color='C0')\nax.axhline(df_pcdata_rerolled['avg'].mean(), ls='--', color='C1')\nax.text(x=305, y=df_pcdata_rerolled['avg'].mean(), s='tot. avg rer.', alpha=0.7, color='C1')\n\nplt.title('\\nMean unrolled & rerolled prices for all compatibilities (PC)\\n', fontsize=14, fontweight='bold')\nplt.ylabel('\\nPrice', fontsize=12)\nplt.xlabel('Compatibility\\n', fontsize=12);","52715d6d":"print(\"The total average of all compability-max is: \", df_pcdata['avg'].max())\nprint(\"The total average of all compability-max (unrolled) is: \", df_pcdata_unrolled['avg'].max())\nprint(\"The total average of all compability-max (rerolled) is: \", df_pcdata_rerolled['avg'].max())","dcaa73b8":"df_pcdata_unrolled_gr = df_pcdata_unrolled.groupby(['itemType']).agg({'avg':'mean',\n                                            'itemType':'count',\n                                            'median':'median',\n                                            'max':'max',\n                                            'min':'min',\n                                            'pop':'median',\n                                             'cv':'median'})\ndf_pcdata_unrolled_gr.head()","bcb110a6":"df_pcdata_rerolled_gr = df_pcdata_rerolled.groupby(['itemType']).agg({'avg':'mean',\n                                            'itemType':'count',\n                                            'median':'median',\n                                            'max':'max',\n                                            'min':'min',\n                                            'pop':'median',\n                                              'cv':'median'})\ndf_pcdata_rerolled_gr.head()","1471a709":"sns.set_style(\"white\")\n\nfig, ax = plt.subplots(figsize=(20,15))\nax = sns.scatterplot(y=\"median\", \n                     x=\"compatibility\", \n                     size='rerolled', \n                     sizes=(90, 30),\n                     hue='itemType',\n                     data=df_pcdata)\nax.yaxis.grid()\n\nax.set(xticklabels=[])\n\nplt.title('\\nOverview median Price vs compatibility by rerolled state (PC)\\n', fontsize=14, fontweight='bold')\nplt.ylabel('\\nmedian price', fontsize=12)\nplt.xlabel('compatibility\\n', fontsize=12);","5098264c":"sns.set_style(\"white\")\n\nfig, ax = plt.subplots(figsize=(20,15))\nsns.scatterplot(y=\"median\", \n                     x=\"compatibility\", \n                     label='PC',\n                     data=df_pcdata)\nsns.scatterplot(y=\"median\", \n                     x=\"compatibility\", \n                     label='XBOX1',\n                     data=df_xboxdata)\nsns.scatterplot(y=\"median\", \n                     x=\"compatibility\", \n                     label='PS4',\n                     data=df_playstationdata)\nsns.scatterplot(y=\"median\", \n                     x=\"compatibility\", \n                     label='SWITCH',\n                     data=df_switchdata)\nax.yaxis.grid()\n\nax.set(xticklabels=[])\n\nax.axhline(df_pcdata['median'].median(), ls='-.', color='C0')\nax.axhline(df_xboxdata['median'].median(), ls='-.', color='C1')\nax.axhline(df_playstationdata['median'].median(), ls='-.', color='C2')\nax.axhline(df_switchdata['median'].median(), ls='-.', color='C3')\nax.text(x=305, y=df_pcdata['median'].median(), s='total medians', alpha=0.7, color='black')\n\nplt.title('\\nMedian Price for all compabilities and all platforms\\n', fontsize=14, fontweight='bold')\nplt.ylabel('\\nmedian price', fontsize=12)\nplt.xlabel('compatibility\\n', fontsize=12);","1ae85879":"print(\"The total median of all compability-medians for PC is: \", df_pcdata['median'].median())\nprint(\"The total median of all compability-medians for XBOX1 is: \", df_xboxdata['median'].median())\nprint(\"The total median of all compability-medians for PS4 is: \", df_playstationdata['median'].median())\nprint(\"The total median of all compability-medians for SWITCH is: \", df_switchdata['median'].median())","b5c60b10":"sns.set_style(\"white\")\n\nfig, ax = plt.subplots(figsize=(20,15))\nsns.scatterplot(y=\"max\", \n                     x=\"compatibility\", \n                     label='PC',\n                     data=df_pcdata)\nsns.scatterplot(y=\"max\", \n                     x=\"compatibility\", \n                     label='XBOX1',\n                     data=df_xboxdata)\nsns.scatterplot(y=\"max\", \n                     x=\"compatibility\", \n                     label='PS4',\n                     data=df_playstationdata)\nsns.scatterplot(y=\"max\", \n                     x=\"compatibility\", \n                     label='SWITCH',\n                     data=df_switchdata)\nax.yaxis.grid()\n\nax.set(xticklabels=[])\n\nax.axhline(df_pcdata['max'].max(), ls='-.', color='C0')\nax.text(x=305, y=df_pcdata['max'].max(), s='max PC', alpha=0.7, color='C0')\nax.axhline(df_xboxdata['max'].max(), ls='-.', color='C1')\nax.text(x=305, y=df_xboxdata['max'].max(), s='max XB', alpha=0.7, color='C1')\nax.axhline(df_playstationdata['max'].max(), ls='-.', color='C2')\nax.text(x=305, y=df_playstationdata['max'].max(), s='max PS', alpha=0.7, color='C2')\nax.axhline(df_switchdata['max'].max(), ls='-.', color='C3')\nax.text(x=305, y=df_switchdata['max'].max(), s='max SW', alpha=0.7, color='C3')\n\nplt.title('\\nMedian Price for all compabilities and all platforms\\n', fontsize=14, fontweight='bold')\nplt.ylabel('\\nmedian price', fontsize=12)\nplt.xlabel('compatibility\\n', fontsize=12);","3b062969":"print(\"The max of all compability-maxima for PC is: \", df_pcdata['max'].max())\nprint(\"The max of all compability-maxima for XBOX1 is: \", df_xboxdata['max'].max())\nprint(\"The max of all compability-maxima for PS4 is: \", df_playstationdata['max'].max())\nprint(\"The max of all compability-maxima for SWITCH is: \", df_switchdata['max'].max())","8c8b08aa":"sns.set_style(\"white\")\n\nfig, ax = plt.subplots(figsize=(20,15))\nsns.scatterplot(y=\"avg\", \n                     x=\"compatibility\", \n                     label='PC',\n                     data=df_pcdata)\nsns.scatterplot(y=\"avg\", \n                     x=\"compatibility\", \n                     label='XBOX1',\n                     data=df_xboxdata)\nsns.scatterplot(y=\"avg\", \n                     x=\"compatibility\", \n                     label='PS4',\n                     data=df_playstationdata)\nsns.scatterplot(y=\"avg\", \n                     x=\"compatibility\", \n                     label='SWITCH',\n                     data=df_switchdata)\nax.yaxis.grid()\n\nax.set(xticklabels=[])\n\nax.axhline(df_pcdata['avg'].mean(), ls='-.', color='C0')\nax.text(x=305, y=df_pcdata['avg'].mean(), s='avg PC', alpha=0.7, color='C0')\nax.axhline(df_xboxdata['avg'].mean(), ls='-.', color='C1')\nax.text(x=305, y=df_xboxdata['avg'].mean(), s='avg XB', alpha=0.7, color='C1')\nax.axhline(df_playstationdata['avg'].mean(), ls='-.', color='C2')\nax.text(x=305, y=df_playstationdata['avg'].mean(), s='avg PS', alpha=0.7, color='C2')\nax.axhline(df_switchdata['avg'].mean(), ls='-.', color='C3')\nax.text(x=305, y=df_switchdata['avg'].mean(), s='avg SW', alpha=0.7, color='C3')\n\nplt.title('\\nMedian Price for all compabilities and all platforms\\n', fontsize=14, fontweight='bold')\nplt.ylabel('\\nmedian price', fontsize=12)\nplt.xlabel('compatibility\\n', fontsize=12);","4346e09f":"print(\"The total average of all compability-averages for PC is: \", round(df_pcdata['avg'].mean(),2))\nprint(\"The total average of all compability-averages for XBOX1 is: \", round(df_xboxdata['avg'].mean(),2))\nprint(\"The total average of all compability-averages for PS4 is: \", round(df_playstationdata['avg'].mean(),2))\nprint(\"The total average of all compability-averages for SWITCH is: \", round(df_switchdata['avg'].mean(),2))","b31274d4":"fig, ax = plt.subplots()\ndf_pcdata.head(50).sort_values(['compatibility','rerolled']).plot.bar(x='compatibility', \n               y='median', \n               ax=ax, \n               legend=True,\n               color='C0',            \n               figsize=(18, 14))\n\ndf_xboxdata.head(50).sort_values(['compatibility','rerolled']).plot.bar(x='compatibility', \n               y='median', \n               ax=ax,\n               color='C1')\n\ndf_playstationdata.head(50).sort_values(['compatibility','rerolled']).plot.bar(x='compatibility', \n               y='median', \n               ax=ax,\n               color='C2')\n\ndf_switchdata.head(50).sort_values(['compatibility','rerolled']).plot.bar(x='compatibility', \n               y='median', \n               ax=ax,\n               color='C3')\n\nplt.grid(True, which='major', color='#666666', linestyle='-',linewidth=0.25, alpha=0.4)\nplt.legend(['PC', 'XBox1','PS4','Switch'])\nplt.title('\\nPlatform comparison: Median Prices for all compabilities\\n', fontsize=14, fontweight='bold')\nplt.ylabel('\\nmedian price', fontsize=12)\nplt.xlabel('compatibility\\n', fontsize=12);","428094d6":"#df_pcdata.head(50).sort_values(['compatibility','rerolled'])\n#df_switchdata.head(50).sort_values(['compatibility','rerolled'])","84f087cd":"df_pcdata_rerolledmerge = df_pcdata.copy()\n\ndf_pcdata_rerolledmerge =df_pcdata_rerolledmerge[['compatibility',\n                                              'avg', \n                                              'median', \n                                              'max', \n                                              'min', \n                                              'pop', \n                                              'stddev',\n                                              'cv']].groupby('compatibility').agg({'avg':'mean',\n                                                                                        'median':'median',\n                                                                                        'max':'max',\n                                                                                        'min':'min', \n                                                                                        'pop':'mean', \n                                                                                        'stddev':'median',\n                                                                                        'cv':'median'})\n# Note that I built the median price for **median**, mean for **avg**, max for **max**, min for **min**, mean for pop** (this is a constant anyways) and median for stddev for both rerolled (True and False) prices.  \n\ndf_pcdata_rerolledmerge =df_pcdata_rerolledmerge.reset_index(drop=False)","3125fbf0":"df_pcdata_rerolledmerge.head()","8de9bc44":"topx = 30","66244cf2":"df_pcdata_mediantop = df_pcdata_rerolledmerge.nlargest(topx, 'median')","e6f55f07":"df_pcdata_mediantop.head()","ad6ca28e":"fig, ax = plt.subplots(figsize=(20,6))\n\nchart = sns.barplot(x='compatibility',\n            y='median',\n            yerr=df_pcdata_mediantop['stddev'],\n            data=df_pcdata_mediantop,\n            label= 'median')\n\nchart.set_xticklabels(chart.get_xticklabels(), rotation=90)\nax.yaxis.grid(True, \n         which='major', \n         color='#666666', \n         linestyle='-',\n         linewidth=0.25, \n         alpha=0.4)\n\nfor p in ax.patches:\n             ax.annotate(\"%.0f\" % p.get_height(), \n                         (p.get_x() + p.get_width() \/ 2., \n                          p.get_height()),\n                          ha='center', \n                          va='center', \n                          fontsize=16, \n                          color='black', \n                          xytext=(0, 20),\n                          textcoords='offset points')\n\nplt.title('\\nMedian & standard deviation  of Price for all compatibilities\\n', fontsize=14, fontweight='bold')\nplt.ylabel('\\nPrice', fontsize=12)\nplt.xlabel('Compatibility\\n', fontsize=12);","ec5d8a99":"df_pcdata_avgtop = df_pcdata_rerolledmerge.nlargest(topx, 'avg')","22dc77bd":"fig, ax = plt.subplots(figsize=(20,6))\n\nchart = sns.barplot(x='compatibility',\n            y='avg',\n            yerr=df_pcdata_avgtop['stddev'],\n            data=df_pcdata_avgtop,\n            label= 'avg')\n\nchart.set_xticklabels(chart.get_xticklabels(), rotation=90)\nax.yaxis.grid(True, \n         which='major', \n         color='#666666', \n         linestyle='-',\n         linewidth=0.25, \n         alpha=0.4)\n\nfor p in ax.patches:\n             ax.annotate(\"%.0f\" % p.get_height(), \n                         (p.get_x() + p.get_width() \/ 2., \n                          p.get_height()),\n                          ha='center', \n                          va='center', \n                          fontsize=16, \n                          color='black', \n                          xytext=(0, 20),\n                          textcoords='offset points')\n\nplt.title('\\nAverage & standard deviation  of Price for all compatibilities\\n', fontsize=14, fontweight='bold')\nplt.ylabel('\\nPrice', fontsize=12)\nplt.xlabel('Compatibility\\n', fontsize=12);","2079243f":"df_pcdata_maxtop = df_pcdata_rerolledmerge.nlargest(topx, 'max')","71ad5c86":"fig, ax = plt.subplots(figsize=(20,6))\n\nchart = sns.barplot(x='compatibility',\n            y='max',\n            yerr=df_pcdata_maxtop['stddev'],\n            data=df_pcdata_maxtop,\n            label= 'max')\n\nchart.set_xticklabels(chart.get_xticklabels(), rotation=90)\nax.yaxis.grid(True, \n         which='major', \n         color='#666666', \n         linestyle='-',\n         linewidth=0.25, \n         alpha=0.4)\n\nfor p in ax.patches:\n             ax.annotate(\"%.0f\" % p.get_height(), \n                         (p.get_x() + p.get_width() \/ 2., \n                          p.get_height()),\n                          ha='center', \n                          va='center', \n                          fontsize=12, \n                          color='black', \n                          xytext=(0, 20),\n                          textcoords='offset points')\n\nplt.title('\\nMaximum & standard deviation of Price for all compatibilities\\n', fontsize=14, fontweight='bold')\nplt.ylabel('\\nPrice', fontsize=12)\nplt.xlabel('Compatibility\\n', fontsize=12);","fd1b3740":"df_pcdata_meantop = df_pcdata_rerolledmerge.nlargest(topx, 'avg')","afeb28b5":"fig, ax = plt.subplots(figsize=(20,6))\n\nchart = sns.barplot(x='compatibility',\n            y='avg',\n            yerr=df_pcdata_meantop['stddev'],\n            data=df_pcdata_meantop,\n            label= 'average')\n\nchart.set_xticklabels(chart.get_xticklabels(), rotation=90)\nax.yaxis.grid(True, \n         which='major', \n         color='#666666', \n         linestyle='-',\n         linewidth=0.25, \n         alpha=0.4)\n\nfor p in ax.patches:\n             ax.annotate(\"%.0f\" % p.get_height(), \n                         (p.get_x() + p.get_width() \/ 2., \n                          p.get_height()),\n                          ha='center', \n                          va='center', \n                          fontsize=12, \n                          color='black', \n                          xytext=(0, 20),\n                          textcoords='offset points')\n\nplt.title('\\nAverage & standard deviation of Price for all compatibilities\\n', fontsize=14, fontweight='bold')\nplt.ylabel('\\nPrice', fontsize=12)\nplt.xlabel('Compatibility\\n', fontsize=12);","47a736f2":"df_pcdata_mintop = df_pcdata_rerolledmerge.nlargest(topx, 'min')","743e4473":"fig, ax = plt.subplots(figsize=(20,6))\n\nchart = sns.barplot(x='compatibility',\n            y='min',\n            #yerr=df_pcdata_mintop['stddev'],\n            data=df_pcdata_mintop,\n            label= 'min')\n\nchart.set_xticklabels(chart.get_xticklabels(), rotation=90)\nax.yaxis.grid(True, \n         which='major', \n         color='#666666', \n         linestyle='-',\n         linewidth=0.25, \n         alpha=0.4)\n\nfor p in ax.patches:\n             ax.annotate(\"%.0f\" % p.get_height(), \n                         (p.get_x() + p.get_width() \/ 2., \n                          p.get_height()),\n                          ha='center', \n                          va='center', \n                          fontsize=12, \n                          color='black', \n                          xytext=(0, 20),\n                          textcoords='offset points')\n\nplt.title('\\nMinimum & standard deviation of Price for all compatibilities\\n', fontsize=14, fontweight='bold')\nplt.ylabel('\\nPrice', fontsize=12)\nplt.xlabel('Compatibility\\n', fontsize=12);","64862b75":"df_pcdata_mediantop_unrolled = df_pcdata_unrolled.nlargest(topx, 'median')","11a4a148":"fig, ax = plt.subplots(figsize=(20,6))\n\nchart = sns.barplot(x='compatibility',\n            y='median',\n            yerr=df_pcdata_mediantop_unrolled['stddev'],\n            data=df_pcdata_mediantop_unrolled,\n            label= 'median')\n\nchart.set_xticklabels(chart.get_xticklabels(), rotation=90)\nax.yaxis.grid(True, \n         which='major', \n         color='#666666', \n         linestyle='-',\n         linewidth=0.25, \n         alpha=0.4)\n\nfor p in ax.patches:\n             ax.annotate(\"%.0f\" % p.get_height(), \n                         (p.get_x() + p.get_width() \/ 2., \n                          p.get_height()),\n                          ha='center', \n                          va='center', \n                          fontsize=16, \n                          color='black', \n                          xytext=(0, 20),\n                          textcoords='offset points')\n\nplt.title('\\nMedian & standard deviation of price UNROLLED for all compatibilities (PC)\\n', fontsize=14, fontweight='bold')\nplt.ylabel('\\nPrice', fontsize=12);","1cacc1f3":"df_pcdata_mediantop_rerolled = df_pcdata_rerolled.nlargest(topx, 'median')","33b250fc":"fig, ax = plt.subplots(figsize=(20,6))\n\nchart = sns.barplot(x='compatibility',\n            y='median',\n            yerr=df_pcdata_mediantop_rerolled['stddev'],\n            data=df_pcdata_mediantop_rerolled,\n            label= 'median')\n\nchart.set_xticklabels(chart.get_xticklabels(), rotation=90)\nax.yaxis.grid(True, \n         which='major', \n         color='#666666', \n         linestyle='-',\n         linewidth=0.25, \n         alpha=0.4)\n\nfor p in ax.patches:\n             ax.annotate(\"%.0f\" % p.get_height(), \n                         (p.get_x() + p.get_width() \/ 2., \n                          p.get_height()),\n                          ha='center', \n                          va='center', \n                          fontsize=16, \n                          color='black', \n                          xytext=(0, 20),\n                          textcoords='offset points')\n\nplt.title('\\nMedian & standard deviation of price REROLLED for all compatibilities (PC)\\n', fontsize=14, fontweight='bold')\nplt.ylabel('\\nPrice', fontsize=12);","9fed2910":"print('Rubico unrolled median: ',df_pcdata_unrolled['median'].loc[df_pcdata_unrolled['compatibility']=='RUBICO'].values[0])\nprint('Rubico rerolled median: ',df_pcdata_rerolled['median'].loc[df_pcdata_rerolled['compatibility']=='RUBICO'].values[0])","4cf0c4f9":"For most riven modules we see strongly fluctuating prices, however most of these riven have been traded for a much lower price than the **best** ones.","b08bba0b":"## Mean unrolled vs rerolled","28dd02b6":"## CV - coefficient of variation\nTo have an additional way to compare data sets (and each riven observation here is already calculated from the complete dataset of all riven trades of its type) I calculate the coefficient of variation (CV). \n\n### <center>$cv={\\frac{stddev}{avg}}*100$<\/center>\n\nThis way we get a better idea on the dispersion of our data. CV is most often given as a percentage, which is why this unit less value should not be but in the same plot as the standard deviation.","dd240425":"Horizontal lines mark the total median values. Median prices for unrolled rivens are in generally lower compared to rerolled rivens. If we build the median over each category we even see that the total median for unrolled rivens is less than half of a rerolled riven.  ","f5dc05a4":"The pie chart shows the amount of types for all **compatibilities** that have been traded.  \n\n(This DOES NOT mean 38.7% of all trades that took place were melee riven mods. But of all compatibilities that occurred in the trades, 38.7% were melee rivens. We don't know the specific amount of trades!)\n\nThis heavily follows the distribution of all items in game and to which itemType they belong.","8097b5a2":"## All data vs data below 100 cv","1e1b019d":"<a id='section8'><\/a>\n# Final thoughts:\nKeeping the difficulties of this dataset in mind we clearly see the high fluctuation for all riven prices in general. This can be explained by a few factors:  \n\n* Riven modules follow a **Meta**, an opinion shared by a huge part of the game community, that dictates a rough ranking on what is good and bad. And while some players invest lots of resources and time to systematically figure out how well a certain items performs, there is almost never a clear answer. This 'trend' also changes from time to time.  \n* As stated in the beginning, riven modules receive balance changes every few month. These are often, but not always based on the popularity value. We also saw that popularity and price of the rivens don't show a clear correlation. Still, these changes have an impact on our data.\n* Rare items like newly introduced or not available anymore often peak and while new items often end up at a much lower price unavailable items will probably only increase in value.\n* Other items that offer great performance AND good usability can be clearly identified (RUBICO).\n* We have no information on organized trading groups (riven mafia etc.) which only adds up to the long list reasons to be careful with conclusions.\n\n## For players:\nIt is hard to giver general advice when data is as dispersive as in our case. However, while you could spend ALOT for specific items, almost every riven is traded for far less than you might think. And since even riven stats change based on popularity the smart move is often to invest closer to the median. Only if you can live with paying absurd amounts for an item that can drop in value on the next day you should consider buying \"god rolls\". \n## For the developer:\nRivens seem to provide a system of items some player greatly care about. While only time series can provide trends for the health of the feature, the feature shows a deep connect to the in game currency. \n\nWe can easily identify outlying items like the Rubico, but these items are not the only reason for the great spread. From a design perspective a great spread is even a great sign that a rivens value depends not only on the compatibility but of course on the roll.\n\nFor a better analysis of the features health a look at time based trades is required.\n## Next steps:\n* The analysis would greatly benefit from the information of standard error or amount of trades (N) each modules stats are based on. \n* To generate further insights a look into all data, including all time based trading data can improve the analysis' reliability.\n\n","1b50586a":"<a id='section6'><\/a>\n# TOP X items (unrolled & rerolled)\n\nWe will take a look at the top 20 items in regards to their median, average min and max trade values.","710e3d93":"These values still fit well to the up to date (22.7.19) values from rivenmarket.com:","94afb1b8":"<a id='section4'><\/a>\n# Unrolled vs Rerolled\nNow I'll look at differences between riven modules that have been found and left in their initial state versus modules that have their stats changed at least once. Keep in mind that even a non rolled can have a good stat combination and can be sold for a high price!\n\n## Frequency Distribution of itemTypes vs rerolled-state","29974189":"PC is the oldest and likely also the most popular platform. While Xbox and PlayStation versions have been introduced not too long after the PC release, the switch player base exists only for a few month at the time of the analysis. Presumably players also overlap and took the option to copy their account and most of its progression over to switch.  \nKeep in mind we have no information about actual player numbers and the linked amount of trades that took place. The first look only shows that switch data provides less than half of the item types that are traded on other platforms.  \nWe will get a deeper look later when we compare platforms specifically.  \n#### We will focus on **PC** for our first look at the data:  ","92277bbc":"We sadly don't know about the number of unrolled vs rerolled trades and with such high dispersion these values only represent the small time frame of the data set.","98214564":"### Interpretation:\nThe mean value is, in my opinion, better suited to give us an idea about the total currency flow in game. The mean price is stronger influenced by outliers (for example the maximum we just saw). While these deals are not too important for an average buyer they still happen and they make up a great portion of the total currency flow. \n\nHowever these players don't have to classify as high spenders (whales) since currency can be obtained by trading alone. This is more an indicator for some players willingness to get the best of the best and therefore spending potential.\n","ff930098":"<a id='section2'><\/a>\n# Overview for the PC market","865162a5":"These three desrcibtions show the initial PC data, PC data where CV is below 100% and PC data where min, max and average are not equal (to get data with more spread).","393ebbd5":"While the amount of data points looks relatively equal the subset for SWITCH is not even twice the size of PCs subset. This can be observed in the next chart that only shows the first 50 entries for each platform subset.","642c1f77":"This comparison shows that:\n* Most entries fulfill the spread criteria, so their numbers look quite like the regular PC data. Still, it is good to know that most entries seem to come from more than one trade.\n* While CV<100 is still a enormous dispersion, it is much lower compared to the rest and greatly reduces the dataset. \n* This subset has a higher median of 75 compared to 54 of the whole set.\n* This set also shows a much lower median maximum of 250 compared to 1000 for all data. While not surprising it confirms that the outliers are again the very high riven prices.\n","8a73d31b":"![image.png](attachment:image.png)","42ec5bc0":"The data description already show a lot of information. Some key numbers to point out are:\n\n * Prices vary **from 2 to 31000 Platinum**\n * **Median prices** are a lot lower compared to mean prices\n * The **standard deviation** also reflects a big variance in price","706890d0":"# Table of content\n* [1 Load and check data](#section1)  \n* [2 Overview for the PC market](#section2)  \n* [3 ItemType comparison](#section3)    \n* [4 Unrolled vs rerolled](#section4)  \n* [5 Platform comparison](#section5) \n* [6 Top X on PC](#section6) \n* [7 External website data](#section7)\n* [8 Final thoughts](#section8)","80520155":"# WARFRAME - EDA - riven market trading\nI created this EDA as a personal practice, out of curiosity for Warframes riven market situation and to share some insights with those who don't have time to do their own analysis. I will do my best giving some explanations to make it more readable for people not familiar with this game and its abbreviations.\n\n## Warframe information\nWarframe is a free to play (F2P) video game published by Digital Extremes on pc, Xbox, PlayStation and Nintendo Switch. Most items in Warframe can also be bought with an in game currency. However this currency (Platinum) has to be bought by players for real money first to enter the system. Player can find and equip a variety of modules (Mods) to become stronger. \n\n**\"Riven\"** modules are a special type that fits to a specific item (or an item group). Every module is potentially boosting a different configuration of item stats due to its randomly decided nature. For a cost these items can also change their stats to a (once again) new set of random stats (rerolling). These **random** stats give them very different value in Warframes in-game economy. \n\nA scaling factor on the item additionally decides on its strength which might **slightly** change every few month (see discussion below).\n\n* This data set has been provided by Digital Extremes (DE). \n* It shows actual ingame trading data for riven modules for a week (state of this data: 23.6.19)\n* the list gets repopulated every Monday 00:00 UTC\n* https:\/\/forums.warframe.com\/topic\/1077490-riven-trading-toolbuilders-phase-1\/ \n\n## A friendly warning\nI will show different aspects for the data based on a few handpicked features (platform, itemType, reroll status,...) to give an overview over the dataset. However, showing all variations of these features is beyond the scope of this EDA. So keep in mind which on restrictions the shown graph is based off (i.e. only PC data).\n\n**I am currently in the process of writing up some explanations and would be happy about any feedack!**\n","05ad0a47":"Median prices for a specific itemType will differ as shown above.  \n\n### Interpretation:\nI see the median price foremost as a tool for players willing to buy a riven. This value tells them where most trades for this riven are at. And since most rivens will not come with the perfect set of stats, this is more common scenario.\n","48969840":"Each compatibility has two bars: the first is unrolled, the second is rerolled. For these first entries surprisingly the SWITCH offers the most data points. By only taking a look at this very small group of items we could come to very different conclusions (what we will of course not do).  \n\nBut this again shows the big problem of having very dispersive data.\n","e11f5efd":"## Median unrolled vs rerolled","94b1387f":"The following plots show the top X median, min, average and max prices. They combine rerolled = True **and** False. ","f5f1acc6":"<a id='section5'><\/a>\n# Platform comparison","39548186":"The standard dev. is not shown in the minimum plot to provide better readability, but the std dev is in all but two cases higher that the minimum value itself.\n\n### Interpretation:\nThe first two outliers can be explained by being a riven not available anymore (deconstructor sentinel) and being an archwing riven that have been recently added to the game hence the other archwing rivens.\nBut still, this shows that except these few outliers EVERY OTHER riven that has been traded in the timespan of the dataset was traded at least once for less than 15 Platinum.","bc76f41c":"## Maximum unrolled vs rerolled","1c38d587":"## Comparability of mean and average prices\n**Since this data set does not provide the standard error OR the amount of trades the aggregated values have been calculated with we can not compare the average values in a way that makes assumptions for the whole population. We can only show values for this specific data set. This is why I will try to focus on more general interpretation or simply show the data set in various ways\/forms.**\n\n**The same is true the median!**","fa2cc968":"### Interpretation:\nThe maximum price is of course an indicator on only the highest price payed for a riven in this specific amount of time. I see this value more as a checking tool for\n* How much platinum are some player willing to spend?\n* What rivens fall completely out of line and could potentially be subject to unintended behavior (bugs\/balancing issues)\n* This can also be an indicator for fraud, bugs or other unintended behavior  \n\nHowever it should not be taken as a definitive indicator about the actual maximum worth in the game.\n","8cacfc50":"## ItemTypes for un\/rerolled","47fa104b":"And while our dataset was taken several weeks before this web sites data, we see that the price level of the Rubico riven keeps relatively stable. However, despite all efforts from the developers, this riven rather increased in price.  \n\nThis does not take the 'in site data' into account.\n","71014525":"<a id='section1'><\/a>\n# Load and check data \n","fe06f26a":"<a id='section7'><\/a>\n# External website data:\nWe'll quickly look again at unrolled and rerolled top X and focus on RUBICO to see if our data fits to what other sources use and to get an idea on how fast this data can change.\n","ea59db7f":"<a id='section3'><\/a>\n# ItemType comparison on PC\nNext I'll compare the seven item types riven mods can be put in. These are categories that stand for the slot the associated item belongs to (melee, primary weapon, etc.)"}}