{"cell_type":{"d950f2b6":"code","86d79540":"code","c76f1d20":"code","2080e0df":"code","1352c306":"code","da79c41a":"code","82224173":"code","244f35d8":"code","ee742b03":"code","8fa34770":"markdown"},"source":{"d950f2b6":"# For ability to exchange this notebook with plots\n%pylab inline","86d79540":"import scipy.constants as const\nimport scipy\nfrom scipy.io import wavfile\nfrom IPython.core.display import HTML\nimport os","c76f1d20":"# From a list of https:\/\/en.wikipedia.org\/wiki\/Piano_key_frequencies\nnotes = {'0': 0\n    ,'e0':20.60172,'f0':21.82676,'f#0':23.12465,'g0':24.49971,'g#0':25.95654,'a0':27.50000,'a#0':29.13524\n    ,'b0':30.86771,'c0':32.70320,'c#0':34.64783,'d0':36.70810,'d#0':38.89087\n    ,'e1':41.20344,'f1':43.65353,'f#1':46.24930,'g1':48.99943,'g#1':51.91309,'a1':55.00000,'a#1':58.27047\n    ,'b1':61.73541,'c1':65.40639,'c#1':69.29566,'d1':73.41619,'d#1':77.78175\n    ,'e2':82.40689,'f2':87.30706,'f#2':92.49861,'g2':97.99886,'g#2':103.8262,'a2':110.0000,'a#2':116.5409\n    ,'b2':123.4708,'c2':130.8128,'c#2':138.5913,'d2':146.8324,'d#2':155.5635\n    ,'e3':164.8138,'f3':174.6141,'f#3':184.9972,'g3':195.9977,'g#3':207.6523,'a3':220.0000,'a#3':233.0819\n    ,'b3':246.9417,'c3':261.6256,'c#3':277.1826,'d3':293.6648,'d#3':311.1270\n    ,'e4':329.6276,'f4':349.2282,'f#4':369.9944,'g4':391.9954,'g#4':415.3047,'a4':440.0000,'a#4':466.1638\n    ,'b4':493.8833,'c4':523.2511,'c#4':554.3653,'d4':587.3295,'d#4':622.2540\n    ,'e5':659.2551,'f5':698.4565,'f#5':739.9888,'g5':783.9909,'g#5':830.6094,'a5':880.0000,'a#5':932.3275\n    ,'b5':987.7666,'c5':1046.502,'c#5':1108.731,'d5':1174.659,'d#5':1244.508\n    ,'e6':1318.510,'f6':1396.913,'f#6':1479.978,'g6':1567.982,'g#6':1661.219,'a6':1760.000,'a#6':1864.655\n    ,'b6':1975.533,'c6':2093.005,'c#6':2217.461,'d6':2349.318,'d#6':2489.016\n    ,'e7':2637.020,'f7':2793.826,'f#7':2959.955,'g7':3135.963,'g#7':3322.438,'a7':3520.000,'a#7':3729.310\n    ,'b7':3951.066,'c7':4186.009,'c#7':4434.922,'d7':4698.636,'d#7':4978.032\n}","2080e0df":"# I modified the output of the function for esthetic purpose\ndef wav_Player(filepath):\n    src = \"\"\"\n    <head><meta http-equiv=\"Content-Type\" content=\"text\/html; charset=utf-8\">\n    <title>Simple Test<\/title><\/head><body><table><tr><td><b>%s<\/b><\/td><td>\n    <audio controls=\"controls\" style=\"width:300px\"><source src=\"files\/%s\" type=\"audio\/wav\" \/>\n    Your browser does not support the audio element.<\/audio><\/td><\/tr><\/table><\/body>\n    \"\"\"%(filepath, filepath)\n    display(HTML(src))","1352c306":"# sin wave experiment\nrate = 44100 #44.1 khz\nduration = 2 # in sec\nnormedsin = lambda f, t: 2**13*sin(2*pi*f*t)\ntime = np.linspace(0, duration, num = rate*duration)\nla = lambda t: normedsin(notes['a4'],t)\ntime = np.linspace(0, duration, num = rate*duration)\nchart_size, chart_image = figure(figsize=(15, 4)), plot(time[0:1000], la(time)[0:1000])\nwavfile.write('a4_sin.wav', rate, la(time).astype(np.int16))\nwav_Player(\"a4_sin.wav\")","da79c41a":"# Square wave experiment\nwave_len_half = int(rate\/notes['a4']\/2) # changeble\nsound_volume = 2**13 # standart for WAV files\nsound_duration = int(rate * 2) # rate * seconds\nsound_wave = np.array([int((i \/\/ wave_len_half % 2 - 0.5) * 2) * sound_volume for i in range(0, sound_duration)])\ntime = np.linspace(0, 2, num = sound_duration)\nchart_size, chart_image = figure(figsize=(15, 4)), plot(time[0:1000], sound_wave[0:1000])\nwavfile.write('a4_square.wav', rate, sound_wave.astype(np.int16))\nwav_Player('a4_square.wav')","82224173":"# triangular wave experiment\nwave_len_half = int(rate\/notes['a4']\/2) # changeble\nsound_volume = 2**13 # standart for WAV files\nsound_duration = int(rate * 2) # rate * seconds\n# ((i\/\/wave_len_half%2-0.5)*2*(i % wave_len_half)-(i\/\/wave_len_half%2)*wave_len_half + wave_len_half\/2)\/wave_len_half*2\nsound_wave = np.array([sound_volume*2*(i\/\/wave_len_half%2-0.5)*((i%wave_len_half)*2-wave_len_half)\/wave_len_half for i in range(0, sound_duration)])\ntime = np.linspace(0, 2, num = sound_duration)\nchart_size, chart_image = figure(figsize=(15, 4)), plot(time[0:1000], sound_wave[0:1000])\nwav_file_name = 'a4_triangular.wav'\nif os.path.exists(wav_file_name):\n    os.remove(wav_file_name)\nwavfile.write(wav_file_name, rate, sound_wave.astype(np.int16))\nwav_Player(wav_file_name)","244f35d8":"# For file actions\nmake_chart   = 1\nsave_file    = 2\ndisplay_HTML = 4\n# Universal wave generator\ndef generate_wave(\n    note = notes['a4']\n    , wave_type = 'tria'                # wave_type: 'sin', 'tria', 'square'. To be invented: saw, back_saw\n    , ADSR_share = [0, 10, 30, 90, 100] # ADSR: proportions for Attack, Decay, Sustain, Release\n    , ADSR_level = [0, 100, 70, 60, 0]  # ADSR: volume levels for different steps of ADSR\n    , duration = 1                      # duration: in seconds, float allowed\n    , volume = 2**13                    # volume: in terms of WAV file main sound volume (ADSR_level is secondary)\n    , bitrate = 44100                   # bitrate: values per second\n    , file_actions = 0                  # binary code: 1 = make chart, 2 = save file, 4 = display HTML\n    , file_name = 'some_wav'            #\n):\n    # ==>> Main generator ==>>\n    wave_len_half = int(bitrate \/ note \/ 2)\n    wave_duration = int(bitrate * duration)\n    time = np.linspace(0, duration, num = wave_duration)\n    if wave_type == 'tria':\n        wave = np.array([volume*2*(i\/\/wave_len_half%2-0.5)*((i%wave_len_half)*2-wave_len_half)\/wave_len_half for i in range(0, wave_duration)])\n    elif wave_type == '':\n        wave = [0]\n    elif wave_type == '':\n        wave = [0]\n    else:\n        wave = [0]\n    # ==>> ADSR applying ==>>\n    for i in range(0, wave_duration):\n        if i < wave_duration*ADSR_share[1]\/100:\n            path_done = i \/ (wave_duration*ADSR_share[1]\/100)\n            wave[i] = path_done*wave[i]*ADSR_level[1]\/100\n        elif i < wave_duration*ADSR_share[2]\/100:\n            path_done = 1 - (i - wave_duration*ADSR_share[1]\/100) \/ (wave_duration*(ADSR_share[2] - ADSR_share[1])\/100)\n            wave[i] = path_done*wave[i]*(ADSR_level[1]-ADSR_level[2])\/100 + wave[i]*ADSR_level[2]\/100\n        elif i < wave_duration*ADSR_share[3]\/100:\n            path_done = 1 - (i - wave_duration*ADSR_share[2]\/100) \/ (wave_duration*(ADSR_share[3] - ADSR_share[2])\/100)\n            wave[i] = path_done*wave[i]*(ADSR_level[2]-ADSR_level[3])\/100 + wave[i]*ADSR_level[3]\/100\n        else:\n            path_done = (wave_duration - i)\/((ADSR_share[4] - ADSR_share[3])\/100*wave_duration)\n            wave[i] = path_done*wave[i]*(ADSR_level[3]-ADSR_level[4])\/100 + wave[i]*ADSR_level[4]\/100\n    # ==>> File actions ==>>\n    file_name = file_name + '.wav'\n    if file_actions >> 0 & 1: # make chart\n        chart_size, chart_image = figure(figsize=(15, 4)), plot(time, wave) #plot(time[0:1000], wave[0:1000])\n    if file_actions >> 1 & 1: # save file\n        if os.path.exists(file_name):\n            os.remove(file_name)\n        wavfile.write(file_name, bitrate, wave.astype(np.int16))\n    if file_actions >> 2 & 1: # display HTML\n        wav_Player(file_name)\n    return wave","ee742b03":"test_wave = generate_wave(\n    note = notes['a5']\n    , ADSR_share = [0, 5, 30, 80, 100]\n    , ADSR_level = [0, 100, 80, 60, 0]\n    , file_actions = (make_chart + save_file + display_HTML)\n    , file_name = 'ADSR_test'\n)","8fa34770":"Useful links:<br>\nhttps:\/\/stackoverflow.com\/questions\/33879523\/python-how-can-i-generate-a-wav-file-with-beeps<br>\nhttps:\/\/musicinformationretrieval.com\/ipython_audio.html<br>\nhttps:\/\/nbviewer.jupyter.org\/gist\/Carreau\/5507501\/the%20sound%20of%20hydrogen.ipynb<br>"}}