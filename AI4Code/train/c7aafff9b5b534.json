{"cell_type":{"30b1b178":"code","5a65745f":"code","3a26a043":"code","11a61270":"code","52acd092":"code","b8d8d0e8":"code","116baa22":"code","cbe443bc":"code","e28b504f":"code","d1c417a4":"code","218fddd7":"code","a4298245":"code","97e8d123":"code","fce19a06":"code","2a9c699c":"code","5ec5e1ff":"code","9b51325a":"code","2a13acd1":"code","041c1648":"code","aa7396d4":"code","e2d2ac79":"code","bccad162":"code","1b53db57":"code","6d0b389c":"code","505028d0":"code","545f34bb":"code","a6544537":"code","474d710b":"code","0fbda868":"code","4800a149":"code","1be3a80c":"code","13f9dab4":"code","169d1bb7":"code","45ca8236":"code","a03d53d8":"code","684ce9ae":"code","90688a58":"code","081f769b":"markdown","0367a9af":"markdown","80e246d9":"markdown","a985c2e8":"markdown"},"source":{"30b1b178":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5a65745f":"# import ipympl\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport pydicom\nimport pandas_profiling as pdp\n\n%matplotlib inline","3a26a043":"TRAIN_CSV_PATH = '\/kaggle\/input\/osic-pulmonary-fibrosis-progression\/train.csv'\nTEST_CSV_PATH = '\/kaggle\/input\/osic-pulmonary-fibrosis-progression\/test.csv'\n\nTRAIN_DICOM_DIR = '\/kaggle\/input\/osic-pulmonary-fibrosis-progression\/train\/'\nTEST_DICOM_DIR = '\/kaggle\/input\/osic-pulmonary-fibrosis-progression\/test\/'\n","11a61270":"df = pd.read_csv(TRAIN_CSV_PATH)\ndf.head(4)","52acd092":"# Unique patients\ndf['Patient'].nunique()","b8d8d0e8":"df['Sex'].value_counts().plot(kind='bar')","116baa22":"# Histogram of Age\ndf.groupby('Sex')['Age'].plot(kind='hist', legend=True, alpha=0.5)","cbe443bc":"# Histogram of measurements\/patient\ndf['Patient'].value_counts().plot(kind='hist', bins=np.arange(df['Patient'].value_counts().max()+2))","e28b504f":"# Histogram of FVC values\ndf['FVC'].plot(kind='hist')","d1c417a4":"df.groupby( ['Sex','SmokingStatus'] )['FVC'].agg( ['mean','std','count'] )","218fddd7":"i = df.Patient == 'ID00007637202177411956430'\ndf[i][['Weeks', 'FVC']].plot(kind='line', x='Weeks', y='FVC', style=['d-'])\nplt.title(f'Patient {df[i][\"Patient\"][0]}:\\n{df[i][\"Sex\"][0]} \/ {df[i][\"Age\"][0]} \/ {df[i][\"SmokingStatus\"][0]}')\nplt.show()","a4298245":"# Generate report (https:\/\/www.kaggle.com\/piantic\/osic-pulmonary-fibrosis-progression-basic-eda)\nreport = pdp.ProfileReport(df)","97e8d123":"report","fce19a06":"series = np.array(\n    [\n        [\n            (os.path.join(dp, f), pydicom.dcmread(os.path.join(dp, f), stop_before_pixels = True))\n            for f in files\n        ]\n        for dp,_,files in os.walk(TRAIN_DICOM_DIR) if len(files) != 0\n    ]\n)\n","2a9c699c":"series[0][0][1]","5ec5e1ff":"# Total files\ninstances = [f for l in series for f in l]\nlen(instances)","9b51325a":"# Patients\npatient_ids = np.unique([inst[1].PatientID for inst in instances])\nlen(patient_ids)","2a13acd1":"# Series (3D volumes)\nlen(series)","041c1648":"# How many studies?\nstudies = {}\n\nfor s in series:\n    studies.setdefault(s[0][1].StudyInstanceUID, []).append(s)\n\nlen(studies)","aa7396d4":"# Studies per patient\n[len([st for st in studies.values() if st[0][0][1].PatientID == p]) for p in patient_ids]","e2d2ac79":"# Series per study\nseries_per_study = [(len(sr), sr[0][0][1].PatientID) for sr in studies.values()]\nseries_per_study","bccad162":"# Images per series\nimg_per_series = [len(s) for s in series]\nprint(img_per_series)","1b53db57":"res = {}\nspc = {}\nthck = {}\n\nfor sr in series:\n    try:\n        sr.sort(key = lambda inst: int(inst[1].ImagePositionPatient[2]))\n    except:\n        sr.sort(key = lambda inst: int(inst[1].InstanceNumber))\n    \n    dcm = sr[0][1]\n    key = str(dcm.PixelSpacing)\n    spc.setdefault(key, [])\n    spc[key].append((dcm.PatientID, ))#dcm.StudyDescription, dcm.StudyDate, dcm.SeriesDescription))\n    \n    key = str((dcm.Rows, dcm.Columns))\n    res.setdefault(key, [])\n    res[key].append((dcm.PatientID, ))#dcm.StudyDescription, dcm.StudyDate, dcm.SeriesDescription))\n    \n    try:\n        key = str(np.abs(sr[0][1].ImagePositionPatient[2] - sr[1][1].ImagePositionPatient[2]))\n        thck.setdefault(key, [])\n        thck[key].append((dcm.PatientID, ))#dcm.StudyDescription, dcm.StudyDate, dcm.SeriesDescription))\n    except:\n        print(dcm.PatientID)\n        continue\n    \n","6d0b389c":"thck.keys()","505028d0":"res.keys()","545f34bb":"spc.keys()","a6544537":"res","474d710b":"for key in res.keys():\n    print(f'{key}:{len(res[key])}')","0fbda868":"for key in ['(1302, 1302)', '(843, 888)', '(632, 632)', '(1100, 888)', '(788, 888)', '(734, 888)', '(752, 888)', '(733, 888)']:\n    print(f'{key}: {res[key]}')","4800a149":"spc","1be3a80c":"for key in spc.keys():\n    print(f'{key}:{len(spc[key])}')","13f9dab4":"seq1 = r\"ID00210637202257228694086\"\nseq1_slices = [pydicom.dcmread(os.path.join(TRAIN_DICOM_DIR, seq1, f)) for f in os.listdir(os.path.join(TRAIN_DICOM_DIR, seq1))]\nseq1_slices.sort(key = lambda inst: int(inst.ImagePositionPatient[2]))\n\nseq2 = r\"ID00132637202222178761324\"\nseq2_slices = [pydicom.dcmread(os.path.join(TRAIN_DICOM_DIR, seq2, f)) for f in os.listdir(os.path.join(TRAIN_DICOM_DIR, seq2))]\ntry:\n    seq2_slices.sort(key = lambda inst: int(inst.ImagePositionPatient[2]))\nexcept:\n    seq2_slices.sort(key = lambda inst: int(inst.InstanceNumber))","169d1bb7":"seq1 = np.stack([s.pixel_array for s in seq1_slices])\nseq2 = np.stack([s.pixel_array for s in seq2_slices])","45ca8236":"[ipp.ImagePositionPatient for ipp in seq1_slices]","a03d53d8":"seq1.shape, seq2.shape","684ce9ae":"plt.imshow(seq1[150,:,:], cmap='gray')","90688a58":"plt.imshow(seq2[150,:,:], cmap='gray')","081f769b":"Possible outliers","0367a9af":"So, one CT per patient","80e246d9":"## DICOM data","a985c2e8":"Visualize some images:"}}