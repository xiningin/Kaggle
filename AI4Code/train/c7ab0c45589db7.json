{"cell_type":{"72b8ca84":"code","474b4f25":"code","d5350e45":"code","db2ba816":"code","dc16675d":"markdown","c87b3f50":"markdown","f63970d9":"markdown"},"source":{"72b8ca84":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","474b4f25":"mining = pd.read_csv('\/kaggle\/input\/evolution-of-country-share\/Evolution of country share.csv')","d5350e45":"#Unfortunately, the data in the column is not numeric, let's create a column with a numeric value by removing the percent symbol\nmining['monthly_hashrate'] = mining['monthly_hashrate_%'].apply(lambda x: float(x.replace('%', '')))\nmining","db2ba816":"import plotly.graph_objects as go\nimport plotly.io as pio\n#pio.templates.default = \"simple_white\"\npio.templates.default = \"plotly_white\"\n\nx=mining['date']\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n    name = 'Mainland China',\n    x=mining[mining.country == 'Mainland China']['date'], y=mining[mining.country == 'Mainland China']['monthly_hashrate'],\n    hoverinfo='x+y',\n    mode='lines',\n    line=dict(width=0.5),\n    stackgroup='one' # define stack group\n))\nfig.add_trace(go.Scatter(\n    name = 'Other',\n    x=mining[mining.country == 'Other']['date'], y=mining[mining.country == 'Other']['monthly_hashrate'],\n    hoverinfo='x+y',\n    mode='lines',\n    line=dict(width=0.5),\n    stackgroup='one' # define stack group\n))\nfig.add_trace(go.Scatter(\n    name = 'Russian Federation',\n    x=mining[mining.country == 'Russian Federation']['date'], y=mining[mining.country == 'Russian Federation']['monthly_hashrate'],\n    hoverinfo='x+y',\n    mode='lines',\n    line=dict(width=0.5),\n    stackgroup='one' # define stack group\n))\nfig.add_trace(go.Scatter(\n    name = 'United States',\n    x=mining[mining.country == 'United States']['date'], y=mining[mining.country == 'United States']['monthly_hashrate'],\n    hoverinfo='x+y',\n    mode='lines',\n    line=dict(width=0.5),\n    stackgroup='one' # define stack group\n))\nfig.add_trace(go.Scatter(\n    name = 'Malaysia',\n    x=mining[mining.country == 'Malaysia']['date'], y=mining[mining.country == 'Malaysia']['monthly_hashrate'],\n    hoverinfo='x+y',\n    mode='lines',\n    line=dict(width=0.5),\n    stackgroup='one' # define stack group\n))\nfig.add_trace(go.Scatter(\n    name = 'Iran, Islamic Rep.',\n    x=mining[mining.country == 'Iran, Islamic Rep.']['date'], y=mining[mining.country == 'Iran, Islamic Rep.']['monthly_hashrate'],\n    hoverinfo='x+y',\n    mode='lines',\n    line=dict(width=0.5),\n    stackgroup='one' # define stack group\n))\nfig.add_trace(go.Scatter(\n    name = 'Kazakhstan',\n    x=mining[mining.country == 'Kazakhstan']['date'], y=mining[mining.country == 'Kazakhstan']['monthly_hashrate'],\n    hoverinfo='x+y',\n    mode='lines',\n    line=dict(width=0.5),\n    stackgroup='one' # define stack group\n))\nfig.add_trace(go.Scatter(\n    name = 'Canada',\n    x=mining[mining.country == 'Canada']['date'], y=mining[mining.country == 'Canada']['monthly_hashrate'],\n    hoverinfo='x+y',\n    mode='lines',\n    line=dict(width=0.5),\n    stackgroup='one' # define stack group\n))\nfig.add_trace(go.Scatter(\n    name = 'Germany *',\n    x=mining[mining.country == 'Germany *']['date'], y=mining[mining.country == 'Germany *']['monthly_hashrate'],\n    hoverinfo='x+y',\n    mode='lines',\n    line=dict(width=0.5),\n    stackgroup='one' # define stack group\n))\nfig.add_trace(go.Scatter(\n    name = 'Ireland *',\n    x=mining[mining.country == 'Ireland *']['date'], y=mining[mining.country == 'Ireland *']['monthly_hashrate'],\n    hoverinfo='x+y',\n    mode='lines',\n    line=dict(width=0.5),\n    stackgroup='one' # define stack group\n))\n\nfig.update_layout(yaxis_range=(0, 100))\nfig.show()","dc16675d":"## Here is a basic data visualization method, take a look and practice!","c87b3f50":"### **So, now you can try more interesting visualization methods! Explore, be creative and practice)**","f63970d9":"## Filled Area Plots in Python\nHere I use Plotly Open Source Graphing Libraries. [Learn more about how this is done.](https:\/\/plotly.com\/python\/filled-area-plots\/)"}}