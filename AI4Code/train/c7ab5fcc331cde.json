{"cell_type":{"dee882bb":"code","0df8aa8f":"code","023b7e53":"code","307cf58d":"code","f7faefc9":"code","f2293a9c":"code","54121743":"code","07696033":"code","66cd2d71":"code","8ebc7201":"code","93c7320f":"code","66d74494":"code","65fb0bee":"code","47da8b28":"markdown","337dba76":"markdown","f85929bd":"markdown","342fc3b0":"markdown","98afbeb4":"markdown","8c9c2726":"markdown","7fd87141":"markdown","16806faa":"markdown","b2ec44fd":"markdown","67a363f7":"markdown","93d3842e":"markdown","ee1f83a6":"markdown","9a20926f":"markdown"},"source":{"dee882bb":"import geopandas as gpd\nimport rasterio as rs\nfrom rasterio.plot import show  # imshow for raster\nfrom rasterio import features as feat  # handle binary mask\n\n# some standard libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","0df8aa8f":"ROOT_DIR = '..\/input\/spacenet-6-multisensor-allweather-mapping\/AOI_11_Rotterdam\/'\n\ndf = pd.read_csv(ROOT_DIR+'SummaryData\/SN6_Train_AOI_11_Rotterdam_Buildings.csv')\nprint(f'total rows: {df.shape[0]}')\ndisplay(df.head())","023b7e53":"df_mean_h = df.sort_values('Median_Building_Height')\ndf_mean_h.tail()","307cf58d":"# take unique ImageId for plotting the raster maps\nimage_ids = df.ImageId.unique()\nprint(f'total images: {len(image_ids)}')","f7faefc9":"def get_filepath(image_id, mode='PS-RGB'):\n    return f'{ROOT_DIR}{mode}\/SN6_Train_AOI_11_Rotterdam_{mode}_{image_id}.tif'\n\ndef get_raster(image_id, mode='PS-RGB'):\n    return rs.open(get_filepath(image_id, mode))\n\nex_image_id = image_ids[0]; print(f'tile: {ex_image_id}')\n\n# open the raster image\nex_raster = get_raster(ex_image_id)\n\n# print properties of the raster\nprint(ex_raster.meta)\n\n# view with rasterio's show\nshow(ex_raster)","f2293a9c":"def get_rgb(image_id):\n    raster = rs.open(get_filepath(ex_image_id,'PS-RGB'))\n    image = raster.read()\n    return rs.plot.reshape_as_image(image)\n\nplt.imshow(get_rgb(ex_image_id)); plt.show()","54121743":"def get_geopath(image_id):\n    return f'{ROOT_DIR}geojson_buildings\/SN6_Train_AOI_11_Rotterdam_Buildings_{image_id}.geojson'\n\ndef get_binary_mask(image_id, raster):\n    gdf = gpd.read_file(get_geopath(ex_image_id))\n    \n    if gdf.shape[0]==0:  # handle rasters with no buildings\n        mask = np.zeros((raster.height, raster.width))\n    \n    mask = feat.geometry_mask(\n        ex_gdf.geometry,\n        out_shape=(raster.height, raster.width),\n        transform=raster.transform,\n        invert=True\n    )\n    \n    return mask\n\nex_gdf = gpd.read_file(get_geopath(ex_image_id))\ndisplay(ex_gdf.head(3))\n\nmask = get_binary_mask(ex_image_id, ex_raster)\n\nplt.imshow(mask, cmap='gray'); plt.show()","07696033":"# 4ch sar raster\nex_raster_sar = get_raster(ex_image_id, mode='SAR-Intensity')\nprint(ex_raster_sar.meta)\n\nshow(ex_raster_sar); plt.show()","66cd2d71":"def norm(plane):\n    # make sure that no value is larger than 92.88, or else will return an overflow\n    max_val = plane.max() if plane.max()>92.88 else 92.88\n    plane = plane \/ max_val * 255\n    return plane.astype(np.uint8)\n\ndef get_sar(image_id, sar_ch=[1,2,3,4]):\n    raster = get_raster(image_id, mode='SAR-Intensity')\n\n    # read all 4ch\n    image = raster.read(indexes=sar_ch)\n    \n    # channel-wise norm\n    if norm:\n        for i in range(image.shape[0]):\n            image[i] = norm(image[i])\n    \n    # each channel is uint8, but the combined array is float, change this\n    image = image.astype(np.uint8)\n        \n    return rs.plot.reshape_as_image(image)\n\n# view each SAR polarity channel\nex_image_sar = get_sar(ex_image_id)\npol_title = ['HH','HV','VH','VV']\n\nf = plt.figure(figsize=(20,5))\nfor i in range(ex_image_sar.shape[-1]):\n    ax = f.add_subplot(1,4,i+1)\n    ax.imshow(ex_image_sar[:,:,i], cmap='gray')\n    ax.set_title(pol_title[i])\n    plt.axis('off')\n    \nplt.tight_layout();plt.show()","8ebc7201":"def show_hist(image, ax, start=1, end=256):\n    num_bins = 256\n    color = ['r','g','b','k']\n    if len(image.shape)==2:\n        ax.hist(image.ravel(), num_bins, [start,end])\n    else:\n        for i in range(image.shape[-1]):\n            ax.hist(image[:,:,i].ravel(), num_bins, [start,end],\n                    color=color[i], histtype='step', alpha=0.6)","93c7320f":"f,(ax1,ax2,ax3,ax4) = plt.subplots(1,4,figsize=(20,5))\n\nex_rgb = get_rgb(ex_image_id)\nax1.imshow(ex_rgb); ax1.set_title('Optical RGB Image')\nshow_hist(ex_rgb, ax2); ax2.set_title('RGB Histogram')\n\nex_raster_sar = get_raster(ex_image_id, mode='SAR-Intensity')\nex_image_sar = get_sar(ex_image_id)\n\nshow(ex_raster_sar, ax=ax3); ax3.set_title('SAR Raster')\nshow_hist(ex_image_sar, ax4); ax4.set_title('SAR Histogram')\nplt.show()","66d74494":"f,ax = plt.subplots(figsize=(5,5))\nshow_hist(ex_image_sar, ax, 0, 255)","65fb0bee":"def get_region_index(raster):\n    \"\"\"\n    leaves nodata trails in the edges\n    np.argwhere() returns list of index. [[row,col],[row,col]]\n        of every element that gets true condition\n    \"\"\"\n    bin_mask = raster.read_masks(1)\n    coords = np.argwhere(bin_mask==255)\n    row0,col0 = coords.min(axis=0)  # find lowest row and col\n    row1,col1 = coords.max(axis=0)  # find highest row and col\n    return row0,row1+1,col0,col1+1\n\nex_raster = get_raster(ex_image_id)\nr0,r1,c0,c1 = get_region_index(ex_raster)  # get cropping index\n\nex_image_sar = get_sar(ex_image_id, sar_ch=[1,4,3])\nplt.imshow(ex_image_sar[r0:r1,c0:c1,0])\nplt.title('Cropped SAR image false colored'); plt.show()","47da8b28":"I always like to start with viewing the annotations first","337dba76":"## Read as image\n- to convert the raster as normal images, use the `.read()` method\n- read() also takes some attributes such as which channel to extract, output dtype, cropping window etc. [docs](https:\/\/rasterio.readthedocs.io\/en\/latest\/api\/rasterio.io.html)\n- reshape the order of dimension from `c,w,h` to `w,h,c`","f85929bd":"# Raster maps\n4 types of sensor:\n- PAN: panchromatic, 900x900px, 1ch\n- PS-RGB: pan-sharpened RGB, 900x900px, 3ch\n- PS-RGBNIR: added Near InfraRed, 900x900px, 4ch\n- RGBNIR: 450x450px, 4ch\n- SAR-Intensity: quad polarimetric SAR, 900x900px, 4ch","342fc3b0":"- Here we can tell there are 214k buildings, are they all unique? Let's sort by mean height. Why are there NaN values?\n- You can also use geopandas for this, but it's faster to read from geojson files of each ImageId\n- let's list the unique ImageIds that we'll use for previewing some examples\n","98afbeb4":"## Normalizing\n- to stretch pixel range to `uint8` we normalize the pixel values and convert from float32\n- apply norm to each plane, and reshape","8c9c2726":"Notice if we set the histogram range from 0, we capture the `nodata` valued 0.0, which is dominant compared to other values","7fd87141":"# Geospatial packages\n\n- SN6 dataset contains geo-referenced images, to make our lives easier we'll use `geopandas` for processing geojson files, and `rasterio` for handling .tiff raster files.\n- `geopandas` is more or less like pandas with added spatial processing, and with `rasterio` you can read how to do stuffs in their documentation website\n- I like modular, reusable code, so I'll be creating functions for a group of process\n- I like bulletpoints explanation, since I'm busy, you're probably the same, so let's just understand what matters","16806faa":"# Histogram\nunderstand pixel distribution for each channel","b2ec44fd":"## Viewing optical raster\n- `rs.open` will load a .tiff file as a raster (with spatial information)\n- `show` will preview the raster","67a363f7":"## Loading the masks\n- to generate a binary mask from polygons, we'll be using `.geometry_mask` method from rasterio's features\n- some images have no buildings present, this will return an error, to handle, we'll output a mask of all zeros if the geojson file is empty\n- `.geometry_mask` has some important properties\n    - requires column containing geometry information\n    - out_shape: height and width of the mask, we can use the raster properties\n    - `invert` will show True for pixel buildings, and False for background pixels\n    - transform information, can also use from raster properties","93d3842e":"# Reference\n\n[1] Shermeyer, J., Hogan, D., Brown, J., Etten, A.V., Weir, N., Pacifici, F., H\u00e4nsch, R., Bastidas, A., Soenen, S., Bacastow, T.M., & Lewis, R. (2020). SpaceNet 6: Multi-Sensor All Weather Mapping Dataset. 2020 IEEE\/CVF Conference on Computer Vision and Pattern Recognition Workshops (CVPRW), 768-777. [Arxiv paper](https:\/\/arxiv.org\/abs\/2004.06500)","ee1f83a6":"## Loading SAR\n- pixel values are SAR-Intensity in dB. range value from 1e-5 to 92.88 dB [1]\n- values are type float32\n- notice the `nodata` region (area where there's no map) is set to the value 0.0\n- `.read` method allows to select which channel to extract and which order","9a20926f":"When applying transformation to the SAR image, this `nodata` pixel values also gets computed, to minimize this we can crop the values by grabbing the corners where the map still shows at `r0,r1,c0,c1`. When working with SAR it's common to show only 3 channels or processed the quad polarimetry channel as a false colored RGB. Here I show R=HH, G=VV and B=VH"}}