{"cell_type":{"40a1a4ed":"code","3891207d":"code","46ca6028":"code","6256c8c7":"code","bc4f61f1":"code","2db98ef2":"code","63f659ec":"code","8166b7aa":"code","14010445":"code","821a628f":"code","5d52fcc4":"code","4ebafc07":"code","d469f8d5":"code","87a46809":"code","124652af":"code","c09bd706":"code","802a1ccb":"code","f56beb10":"code","db4a3d6b":"code","dcb26f87":"code","64ce1a3f":"code","351efdf6":"code","c6bfdcd5":"code","b8dca77a":"code","3c60466b":"code","defd854b":"code","1e407b5c":"code","823efef1":"code","8d33227d":"code","ebd4c515":"code","122e6f35":"code","92804bab":"code","4d8e4160":"code","9006fda9":"code","bee134f8":"code","6ba0b4bd":"code","856b31af":"code","b5dcef37":"code","84200687":"code","99e9dd83":"markdown","2a0a3767":"markdown","b17e1ee8":"markdown"},"source":{"40a1a4ed":"from sklearn.model_selection import RandomizedSearchCV,GridSearchCV\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom xgboost import XGBClassifier\nimport matplotlib.pyplot as plt","3891207d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n        \nimport missingno\nimport seaborn as sns\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","46ca6028":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntrain_data.head()","6256c8c7":"test_data.head()","bc4f61f1":"missingno.matrix(train_data,figsize=(20,11))","2db98ef2":"train_data.isnull().sum() # check number of null values in the dataset","63f659ec":"test_data.isnull().sum()","8166b7aa":"test_data.mean()","14010445":"sns.distplot(train_data.Pclass)","821a628f":"# for a in train_data[\"Name\"].str[0:20]:\n#         print(a)","5d52fcc4":"train_data[train_data.Age.isnull()]","4ebafc07":"temp_notnull = train_data[train_data.Age.isnull()==False]\n\ntemp_female = temp_notnull[train_data.Sex==\"female\"]\ntemp_male = temp_notnull[train_data.Sex==\"male\"]\n","d469f8d5":"# temp_female_survived = temp_female[train_data.Survived == 1][\"Age\"].mean()\n# temp_female_notsurvived =temp_female[train_data.Survived == 0][\"Age\"].mean()\n# temp_male_survived = temp_male[train_data.Survived == 1][\"Age\"].mean()\n# temp_male_notsurvived =temp_male[train_data.Survived == 0][\"Age\"].mean()","87a46809":"temp_female[temp_female[\"Age\"] != \"None\"][20:30]","124652af":"plt.scatter(train_data[(train_data.Survived == 1)&(train_data.Sex == \"female\")].index,train_data[(train_data.Survived == 1)&(train_data.Sex == \"female\")].Age)","c09bd706":"temp_female[\"Age\"].mean(),temp_male[\"Age\"].mean(),temp_female_survived,temp_female_notsurvived,temp_male_survived,temp_male_notsurvived","802a1ccb":"# train_data.loc[(train_data.Age.isnull()) & (train_data.Sex ==\"female\")& (train_data.Survived ==1) ,\"Age\"] = temp_female_survived\n# train_data.loc[(train_data.Age.isnull()) & (train_data.Sex ==\"female\")& (train_data.Survived ==0) ,\"Age\"] = temp_female_notsurvived\n# train_data.loc[(train_data.Age.isnull()) & (train_data.Sex ==\"male\")& (train_data.Survived ==1) ,\"Age\"] = temp_male_survived\n# train_data.loc[(train_data.Age.isnull()) & (train_data.Sex ==\"male\")& (train_data.Survived ==0) ,\"Age\"] = temp_male_notsurvived\n\n\ntrain_data.loc[(train_data.Age.isnull()) & (train_data.Sex ==\"female\") ,\"Age\"] = temp_female[\"Age\"].mean()\ntrain_data.loc[(train_data.Age.isnull()) & (train_data.Sex ==\"male\"),\"Age\"] = temp_male[\"Age\"].mean()\n","f56beb10":"train_data.isnull().sum()","db4a3d6b":"train_data.Sex.isnull().sum()","dcb26f87":"women = train_data.loc[train_data.Sex =='female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived :\", rate_women)","64ce1a3f":"men = train_data.loc[train_data.Sex == 'male']['Survived']\nrate_men = sum(men)\/len(men)\n\nprint('% of men who survived: ',rate_men)","351efdf6":"test_data.loc[(test_data.Age.isnull()) & (test_data.Sex ==\"female\") ,\"Age\"] = temp_female[\"Age\"].mean()\ntest_data.loc[(test_data.Age.isnull()) & (test_data.Sex ==\"male\"),\"Age\"] = temp_male[\"Age\"].mean()\n","c6bfdcd5":"test_data.loc[test_data.Fare.isnull() == True ,\"Fare\"] = train_data[\"Fare\"].mean()\ntrain_data[\"familysize\"] = train_data[\"SibSp\"] + train_data[\"Parch\"]\ntest_data[\"familysize\"] =  test_data[\"SibSp\"] + test_data[\"Parch\"]\ntrain_data[\"farecalc\"]=train_data[\"Fare\"] \/ (train_data[\"familysize\"] +1)\ntest_data[\"farecalc\"]= test_data[\"Fare\"]\/ (test_data[\"familysize\"] +1)\n\n\n","b8dca77a":"test_data.loc[(test_data.farecalc.isnull())]","3c60466b":"from sklearn.ensemble import RandomForestClassifier\n\ny = train_data[\"Survived\"]\n\nfeatures = ['Pclass','Sex','SibSp','Parch']\nfeatures2 = ['Pclass','Sex','SibSp','Parch','Age']\n\n\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\nX['Age'] = train_data['Age']\nX_test['Age'] = test_data['Age']\n\nX['familysize'] = train_data['familysize']\nX_test['familysize'] = test_data['familysize']\n\nX['farecalc'] = train_data['farecalc']\nX_test['farecalc'] = test_data['farecalc']\n","defd854b":"X_test.isnull().sum()","1e407b5c":"# X[\"Fare\"] = train_data[\"Fare\"] \n# X_test[\"Fare\"] = test_data[\"Fare\"] ","823efef1":"# X_test.loc[X_test.Fare.isnull() == True ,\"Fare\"] = X[\"Fare\"].mean()","8d33227d":"len(X),len(X_test)","ebd4c515":"len(train_data)","122e6f35":"params = {\n        'min_child_weight': [1, 2, 5, 10],\n        'gamma': [0.5, 1, 1.5, 2, 5],\n        'subsample': [0.6, 0.8, 1.0],\n        'colsample_bytree': [0.6, 0.8, 1.0],\n        'max_depth': [3, 4, 5,10],\n        'n_estimators' : [50,100,150,200,300,400],\n        'learning_rate': [0.01,0.02,0.05,0.08,0.1]\n        }\n","92804bab":"xgb = XGBClassifier(learning_rate=0.02, n_estimators=600 , objective='binary:logistic',silent=True, nthread =1)\n\n","4d8e4160":"folds = 10\nparam_comb = 200\n\nskf = StratifiedKFold(n_splits=folds, shuffle = True, random_state = 42)\nrandom_search = RandomizedSearchCV(xgb,param_distributions = params,n_iter = param_comb , scoring='roc_auc',n_jobs = 4, cv=skf.split(X,y),verbose=3,random_state=42)\n\nrandom_search.fit(X,y)","9006fda9":"# print('\\n All results:')\n# print(random_search.cv_results_)\nprint('\\n Best estimator:')\nprint(random_search.best_estimator_)","bee134f8":"xgb1 =XGBClassifier(base_score=0.5, booster=None, colsample_bylevel=1,\n              colsample_bynode=1, colsample_bytree=1.0, gamma=1, gpu_id=-1,\n              importance_type='gain', interaction_constraints=None,\n              learning_rate=0.05, max_delta_step=0, max_depth=3,\n              min_child_weight=2, monotone_constraints=None,\n              n_estimators=300, n_jobs=1, nthread=1, num_parallel_tree=1,\n              objective='binary:logistic', random_state=0, reg_alpha=0,\n              reg_lambda=1, scale_pos_weight=1, silent=True, subsample=1.0,\n              tree_method=None, validate_parameters=False, verbosity=None)\n\n\nxgb1.fit(X,y)\npredictions = xgb1.predict(X_test)","6ba0b4bd":"predictions","856b31af":"X_test.columns\n\n#Index(['Pclass', 'SibSp', 'Parch', 'Sex_female', 'Sex_male'], dtype='object')","b5dcef37":"model = RandomForestClassifier(n_estimators=100, max_depth=8, random_state=1)\nmodel.fit(X,y)\npredictions = model.predict(X_test)","84200687":"output = pd.DataFrame({'PassengerId':test_data.PassengerId, 'Survived':predictions})\noutput.to_csv('my_submission_xgb.csv',index=False)\nprint('Your sumbmission was successfully saved!')","99e9dd83":"Feature : Plcass\nkey: 1-1st ,2-second 3-3rd","2a0a3767":"Taking average of the age of survived male and female to fill the null age valu\n","b17e1ee8":"* try to take the age of the survival \n* if the amount of missing data is not big try to fill the null value\n"}}