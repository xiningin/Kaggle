{"cell_type":{"4996775c":"code","79b7dcf1":"code","a3e4f736":"code","1645345b":"code","4fceb5fe":"code","a0d155b8":"code","a15ead44":"code","e795fd9c":"code","39180088":"code","3bc5b20f":"code","ddd8c116":"code","334eca77":"markdown","5d1fcf02":"markdown","e9dad5e9":"markdown"},"source":{"4996775c":"!pip uninstall fsspec -qq -y\n!pip install --no-index --find-links=..\/input\/hf-datasets\/wheels datasets -qq\n!pip uninstall transformers -qq -y\n!pip install --no-index --find-links=..\/input\/transformers-latest-model transformers -qq","79b7dcf1":"from datasets import Dataset\nimport pandas as pd\nfrom tqdm import tqdm\n\nimport torch, gc\nfrom transformers import default_data_collator\nfrom hf_qa_utils import *\nfrom passage_qa_utils import *\n\ntorch.set_grad_enabled(False)","a3e4f736":"test_df = pd.read_csv(\"..\/input\/chaii-hindi-and-tamil-question-answering\/test.csv\")","1645345b":"passage_ckpts = [\"..\/input\/rembert-finetuning-indicx-on-sq2-epoch3\/rembert_indicx_over_squad2\/checkpoint-1021\"]\n\n_, candidates, ds_feats = generate_output(passage_ckpts, test_df, 384, 128, \\\n                                           batch_size=256, return_feats=True, pp_cleanup=False)\npassage_df = []\nfor qid, arr in candidates.items():\n    rec = max(arr, key=lambda x: x[\"start_score\"])\n    rec[\"id\"] = qid\n    passage_df.append(rec)\npassage_df = pd.DataFrame(passage_df)\ncois = [\"id\", \"feature_index\"]\npassage_df = passage_df[cois].drop_duplicates()\ncodf_main = get_char_offsets_df(ds_feats)\npassage_df = pd.merge(passage_df, codf_main, on=cois, how=\"left\") \ndel codf_main\npassage_df = pd.merge(passage_df, test_df[[\"id\", \"question\", \"context\", \"language\"]], how=\"left\", on=\"id\")\npassage_df[\"subc\"] = passage_df.apply(lambda row: row[\"context\"][row[\"min_ix\"]:row[\"max_ix\"]], axis=1)\n\ndel ds_feats, candidates\ntorch.cuda.empty_cache()\ngc.collect()","4fceb5fe":"passage_df = passage_df[[\"id\", \"question\", \"subc\", \"language\"]].reset_index(drop=True)\npassage_df.rename(columns={\"subc\": \"context\"}, inplace=True)","a0d155b8":"hin_ckpts = [\"..\/input\/muril-finetuning-indicx-on-squad2-epoch-2\/muril_lg_indix_sq2ep1\/checkpoint-3480\", \\\n            \"..\/input\/folds-1-and-2-muril-indicx-sq2ep2-finetuning\/muril_lg_indix_sq2ep1_fold1\/checkpoint-3463\", \\\n            \"..\/input\/folds-1-and-2-muril-indicx-sq2ep2-finetuning\/muril_lg_indix_sq2ep1_fold2\/checkpoint-3452\", \\\n            \"..\/input\/folds-3-and-4-muril-indicx-sq2ep2-finetuning\/muril_lg_indix_sq2ep1_fold4\/checkpoint-3472\"]\n\nall_preds, hin_candidates = generate_output(hin_ckpts, passage_df[passage_df[\"language\"]==\"hindi\"], 384, 128, \\\n                                            batch_size=128, return_feats=False, pp_cleanup=True)\n\ntam_ckpts = [f\"..\/input\/folds-consolidated-xlmr-qa-finetune-on-indix\/fold{i}\" for i in range(5)]\ntam_preds, tam_candidates = generate_output(tam_ckpts, passage_df[passage_df[\"language\"]==\"tamil\"], 384, 128, \\\n                                            batch_size=128, return_feats=False, pp_cleanup=True)","a15ead44":"all_preds.update(tam_preds)\nanswers = pd.Series(all_preds).reset_index()\nanswers.columns = [\"id\", \"PredictionString\"]\ntest_df = pd.merge(test_df, answers, on='id', how='left')\ntest_df['PredictionString'].fillna('', inplace=True)","e795fd9c":"import re\nyear_ptrn = re.compile(\"\\d{4}\")\n\ntime_prefixes = [\"\u0b95\u0bbf.\u0bae\u0bc1\", \"\u0b95\u0bbf.\u0baa\u0bbf\", \" \u0908\", \"\u0908.\u092a\u0942\", \"\u0935\u0930\u094d\u0937\", \"\u0938\u0928\"]\ndef update_year_answer(pred_ans):\n    if any([tp in pred_ans for tp in time_prefixes]):\n        return pred_ans\n    ypreds = year_ptrn.findall(pred_ans)\n    if len(ypreds)!=1:\n        return pred_ans\n    return ypreds[0]\n\nyears = [\"\u0b8e\u0ba8\u0bcd\u0ba4 \u0b86\u0ba3\u0bcd\u0b9f\", \"\u0915\u093f\u0938 \u0935\u0930\u094d\u0937\", \"\u0915\u093f\u0938 \u0938\u093e\u0932\"]\nis_ans_year = (test_df[\"question\"].str.contains(\"|\".join(years), regex=True))\nif is_ans_year.any():\n    test_df.loc[is_ans_year, \"PredictionString\"] = test_df.loc[is_ans_year, \"PredictionString\"].apply(update_year_answer)\ntest_df['PredictionString'].fillna('', inplace=True)","39180088":"import unicodedata\nhin = [chr(i) for i in range(2406, 2416)]\nenn = [f\"{i}\" for i in range(10)]\n\nis_pred_hin = test_df[\"PredictionString\"].apply(lambda x: set(x)<=set(hin))\ntest_df[\"trans\"] = test_df[\"PredictionString\"].copy()\ntest_df.loc[is_pred_hin, \"trans\"] = test_df.loc[is_pred_hin, \"trans\"].apply(lambda txt: \"\".join([enn[hin.index(c)] for c in txt]))\n\nis_trans_in_context = test_df.apply(lambda row: row[\"trans\"] in row[\"context\"], axis=1)\ntest_df.loc[is_pred_hin&is_trans_in_context, \"PredictionString\"] = test_df.loc[is_pred_hin&is_trans_in_context, \"trans\"]","3bc5b20f":"test_df[\"PredictionString\"] = test_df[\"PredictionString\"].apply(lambda pred: pred if \"[\" not in pred else pred[:pred.index(\"[\")])","ddd8c116":"test_df['PredictionString'].fillna('', inplace=True)\ntest_df[['id', 'PredictionString']].to_csv('submission.csv', index=False)","334eca77":"# Generate QA predictions from sub-contexts","5d1fcf02":"# Postprocessing","e9dad5e9":"# Get feature from Rembert"}}