{"cell_type":{"ea52f5de":"code","e60aca42":"code","aa637ec8":"code","8c6bed9c":"code","c4ff1131":"code","5d2f9bdc":"code","5df1ca4e":"code","4cec2c6e":"code","1e2285b2":"code","c893284d":"code","29646b12":"code","eee9f17a":"code","084a74ab":"code","5ca7278f":"code","a31b76a5":"code","1066eea0":"code","00568f65":"code","9f5c3f44":"code","1c4643f4":"code","6a04afe8":"code","74fecdb6":"code","88cb5304":"code","51840b99":"code","43d9bf7d":"code","96939af8":"code","fc58f204":"markdown","355daa0d":"markdown","0d2e06ae":"markdown","93e79a6f":"markdown","17dfb555":"markdown","d3a99dff":"markdown","9f468856":"markdown","17087037":"markdown","7b60428c":"markdown","c32745b1":"markdown","bda5e976":"markdown"},"source":{"ea52f5de":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","e60aca42":"credit_df = pd.read_csv('..\/input\/default-of-credit-card-clients-dataset\/UCI_Credit_Card.csv')\ncredit_df","aa637ec8":"credit_df.info()","8c6bed9c":"credit_df.isnull().sum().sum()","c4ff1131":"credit_df.describe()","5d2f9bdc":"credit_df.hist(figsize=(20,20), bins=20);","5df1ca4e":"credit_df.drop(['ID'], axis=1, inplace=True)","4cec2c6e":"# Let's see how many customers could potentially default on their credit card payment!\ncc_default = credit_df[credit_df['default.payment.next.month']==1]\ncc_notdefault = credit_df[credit_df['default.payment.next.month']==0]\n\nprint('Total Customers = ', len(credit_df))\nprint('Number of customers who defaulted on their credit card payments = ', len(cc_default))\nprint('Percentage of customers who defaulted on their credit card payments = ', len(cc_default) \/ len(credit_df)*100, \"%\")\n\nprint('Number of customers who did not default on their credit card payments (paid their balance)= ', len(cc_notdefault))\nprint('Percentage of customers who did not default on their credit card payments (paid their balance)= {:.2f}%'.format(len(cc_notdefault) \/ len(credit_df)*100))","1e2285b2":"# Let's compare the mean and std of the customers who stayed and left \ncc_default.describe()","c893284d":"cc_notdefault.describe()","29646b12":"plt.figure(figsize=(20,20))\nsns.heatmap(credit_df.corr(), annot=True);","eee9f17a":"plt.figure(figsize=(25,12))\nsns.countplot(data=credit_df, x='AGE', hue='default.payment.next.month');","084a74ab":"plt.figure(figsize=(20,20))\nplt.subplot(311)\nsns.countplot(data=credit_df, x='EDUCATION', hue='default.payment.next.month');\nplt.subplot(312)\nsns.countplot(data=credit_df, x='MARRIAGE', hue='default.payment.next.month');\nplt.subplot(313)\nsns.countplot(data=credit_df, x='SEX', hue='default.payment.next.month');","5ca7278f":"# KDE (Kernel Density Estimate) is used for visualizing the Probability Density of a continuous variable. \n# KDE describes the probability density at different values in a continuous variable. \n\nplt.figure(figsize=(20,21));\n\nplt.subplot(311);\nsns.distplot(cc_notdefault['LIMIT_BAL'], bins = 250, color = 'r');\nsns.distplot(cc_default['LIMIT_BAL'], bins = 250, color = 'b');\n\nplt.xlabel('Amount of bill statement in September, 2005 (NT dollar)');\n\nplt.subplot(312);\nsns.kdeplot(cc_notdefault['BILL_AMT1'], label = 'Customers who did not default (paid balance)', shade = True, color = 'r');\nsns.kdeplot(cc_default['BILL_AMT1'], label = 'Customers who defaulted (did not pay balance)', shade = True, color = 'b');\n\nplt.xlabel('Amount of bill statement in September, 2005 (NT dollar)');\n\nplt.subplot(313);\nsns.kdeplot(cc_notdefault['PAY_AMT1'], label = 'Customers who did not default (paid balance)', shade = True, color = 'r');\nsns.kdeplot(cc_default['PAY_AMT1'], label = 'Customers who defaulted (did not pay balance)', shade = True, color = 'b');\n\nplt.xlabel('PAY_AMT1: Amount of previous payment in September, 2005 (NT dollar)');","a31b76a5":"#fig, axs = plt.subplots(3,2, figsize=(30,30))\naxs = 1\nfor i in ['MARRIAGE', 'SEX', 'EDUCATION']:\n    plt.figure(figsize=(25,25))\n    plt.subplot(3,2,axs)\n    sns.boxplot(data=credit_df, y='LIMIT_BAL', x=i)\n    plt.title(i + ' vs LIMIT_BAL (with Outlaiers)')\n    \n    plt.subplot(3,2,axs+1)\n    sns.boxplot(data=credit_df, y='LIMIT_BAL', x=i, showfliers=False)\n    plt.title(i + ' vs LIMIT_BAL (with Outlaiers disabled)')\n    axs += 2\n\nplt.show()","1066eea0":"#creating target values\ny = credit_df['default.payment.next.month']\ny","00568f65":"# one hot encoding for 'SEX', 'MARRIAGE' & 'EDUCATION'\nX = pd.get_dummies(data=credit_df, columns=['SEX', 'MARRIAGE', 'EDUCATION'])\nX.drop(columns=['default.payment.next.month'], axis=1, inplace=True)\nX","9f5c3f44":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25)\nprint(\"Variables in Train Set : {} & Test Set : {}\".format(len(X_train), len(X_test)))","1c4643f4":"import xgboost as xgb\n\nmodel = xgb.XGBClassifier(objective='reg:squarederror', learning_rate = 0.1, max_depth = 5, n_estimators = 100)\nmodel.fit(X_train, y_train)","6a04afe8":"from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n\ny_pred = model.predict(X_test)\nprint(\"Accuracy {:.2f} %\".format( 100 * accuracy_score(y_pred, y_test)))","74fecdb6":"# Testing Set Performance\ncm = confusion_matrix(y_pred, y_test)\nsns.heatmap(cm, annot=True);\nprint(\"Classification Report :- \\n\",classification_report(y_test, y_pred))","88cb5304":"from sklearn.model_selection import GridSearchCV\n\nparam_grid = {'gamma': [1, 5],   # regularization parameter\n              'subsample': [0.8, 1.0], # % of rows taken to build each tree\n              'colsample_bytree': [0.8, 1.0], # number of columns used by each tree\n              'max_depth': [7, 5], # depth of each tree\n              'n_estimators': [100, 300] #no. of trees\n             }\n\nxgb_model = xgb.XGBClassifier(objective='binary:logistic', learning_rate = 0.01)\ngrid = GridSearchCV(xgb_model, \n                    param_grid, \n                    refit = True, \n                    verbose = 4\n                   )\ngrid.fit(X_train, y_train)","51840b99":"print(\"Best Score: {:.2f} %\".format(grid.best_score_ * 100))\nprint(\"Best Parameters:\", grid.best_params_)\nmodel = grid.best_estimator_","43d9bf7d":"pred = model.predict(X_test)\n\nprint(\"Accuracy {:.2f} %\".format( 100 * accuracy_score(y_test, pred)))\n# Testing Set Performance\ncm = confusion_matrix(y_test, pred)\nsns.heatmap(cm, annot=True);\nprint(\"Classification Report :- \\n\",classification_report(y_test, pred))","96939af8":"fig, (ax) = plt.subplots(ncols=1, figsize=(15,15))\nxgb.plot_importance(model, height=0.8, title=\"Features importance (XGBoost)\", ax=ax, color=\"green\") \nplt.show()","fc58f204":"# 5: OPTIMIZE XGBOOST HYPERPARAMETERS BY PERFORMING GRID SEARCH","355daa0d":"# 4: TRAIN AND EVALUATE AN XGBOOST CLASSIFIER","0d2e06ae":"# 2: VISUALIZE DATASET","93e79a6f":"**OBSERVATIONS**\n* BILL_AMT1, BILL_AMT2, BILL_AMT3, BILL_AMT4, BILL_AMT5, & BILL_AMT6 are strongly correlated\n* PAY_0, PAY_2, PAY_3, PAY_4, PAY_5 & PAY_6 are highly correlated\n* There is a weak correlation between PAY and BILL_AMT (all columns)\n* There is a slight -ve correlation between PAY_ and PAY_AMT (all columns)\n* There is -ve corr of LIMIT_BAL with PAY_0, PAY_2, PAY_3, PAY_4, PAY_5 & PAY_6","17dfb555":"* LIMIT_BAL & BILL_AMT are the most important features\n* Your feedback in comments is much appreciated, Comment if you have any doubts or for inprovement\n* Please **UPVOTE** if you LIKE this notebook, it will keep me motivated","d3a99dff":"**OBESRVATIONS**\n* Most defaulters lie in Education 1=graduate school, 2=university\n* Most defaulters in Marrige are 1=married & 2=single\n* There are more female defaulters as compared to male but there are also more female customes paying the bills on time\n* Most defaulters belong to age group of 23 to 30 years and there is also increses after 34 to 38 years band","9f468856":"**OBSERVATIONS**\n* MARRIGE: married customers are having more credit limit\n* Gender don't seem to have much impact on credit limit\n* Customers with EDUCATED (1) and OTHERS (4) class are having higher credit limit","17087037":"# 3. DATA CLEANING, STANDARDIZING AND TRAIN & TEST SPLIT","7b60428c":"# 1: IMPORT LIBRARIES AND DATASETS","c32745b1":"**DATASET DESCRIPTION :** There are 25 variables\n\n* ID: ID of each client\n* LIMIT_BAL: Amount of given credit in NT dollars (includes individual and family\/supplementary credit\n* SEX: Gender (1=male, 2=female)\n* EDUCATION: (1=graduate school, 2=university, 3=high school, 4=others, 5=unknown, 6=unknown)\n* MARRIAGE: Marital status (1=married, 2=single, 3=others)\n* AGE: Age in years\n* PAY_0: Repayment status in September, 2005 (-1=pay duly, 1=payment delay for one month, 2=payment delay for two months, \u2026 8=payment delay for eight months, 9=payment delay for nine months and above)\n* PAY_2: Repayment status in August, 2005 (scale same as above)\n* PAY_3: Repayment status in July, 2005 (scale same as above)\n* PAY_4: Repayment status in June, 2005 (scale same as above)\n* PAY_5: Repayment status in May, 2005 (scale same as above)\n* PAY_6: Repayment status in April, 2005 (scale same as above)\n* BILL_AMT1: Amount of bill statement in September, 2005 (NT dollar)\n* BILL_AMT2: Amount of bill statement in August, 2005 (NT dollar)\n* BILL_AMT3: Amount of bill statement in July, 2005 (NT dollar)\n* BILL_AMT4: Amount of bill statement in June, 2005 (NT dollar)\n* BILL_AMT5: Amount of bill statement in May, 2005 (NT dollar)\n* BILL_AMT6: Amount of bill statement in April, 2005 (NT dollar)\n* PAY_AMT1: Amount of previous payment in September, 2005 (NT dollar)\n* PAY_AMT2: Amount of previous payment in August, 2005 (NT dollar)\n* PAY_AMT3: Amount of previous payment in July, 2005 (NT dollar)\n* PAY_AMT4: Amount of previous payment in June, 2005 (NT dollar)\n* PAY_AMT5: Amount of previous payment in May, 2005 (NT dollar)\n* PAY_AMT6: Amount of previous payment in April, 2005 (NT dollar)\n* default.payment.next.month: Default payment (1=yes, 0=no)","bda5e976":"the scores a little bit inproved there is not much difference"}}