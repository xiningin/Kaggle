{"cell_type":{"35640202":"code","0034a446":"code","beeb722c":"code","b179bdab":"code","dacc1966":"code","293fb440":"code","5e5457f0":"code","bbd75267":"code","07d15694":"code","13fd17a3":"code","042321c1":"code","a28f8349":"code","69ad9789":"code","2706dea3":"code","083491ae":"code","d139523e":"code","80ba8feb":"code","a26ea279":"code","5f601482":"code","5597d9ee":"code","29a3bb1d":"code","08f12c12":"code","e3b582c0":"code","36e7e0bd":"code","b77561f7":"code","8faab186":"code","8af5b624":"code","e19a31d5":"code","5a932de3":"code","a4b2fb07":"code","03c7f7a2":"code","ea4b0eb8":"code","61f1dcab":"code","1f5b271f":"code","484a9782":"markdown"},"source":{"35640202":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler\n### Create the Stacked LSTM model\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import LSTM\nimport math\nfrom sklearn.metrics import mean_squared_error\n# demonstrate prediction for next 10 days\nfrom numpy import array","0034a446":"read_data = pd.read_csv('\/kaggle\/input\/apple-stock-prices-from-2014-to-may-2020\/AAPL.csv')","beeb722c":"read_data.head()","b179bdab":"read_data.tail()","dacc1966":"df1 = read_data.reset_index()['Close']","293fb440":"df1.shape","5e5457f0":"plt.plot(df1)","bbd75267":"# convert to the minmaxscalar, which lies between 0 and 1\nscaler = MinMaxScaler(feature_range=(0,1))\n# reshaping \ndf1 = scaler.fit_transform(np.array(df1).reshape(-1,1))","07d15694":"df1","13fd17a3":"training_size = int(len(df1)*0.65)\ntesting_size = int(len(df1)-training_size)\ntraining_data, testing_data  = df1[0:training_size, :], df1[training_size:len(df1),:1]\n","042321c1":"training_size, testing_size","a28f8349":"# convert an array of values into a dataset matrix\ndef create_dataset(dataset, time_step=1):\n    dataX, dataY = [], []\n    for i in range(len(dataset)-time_step-1):\n        a = dataset[i:(i+time_step), 0]   ###i=0, 0,1,2,3-----99   100 \n        dataX.append(a)\n        dataY.append(dataset[i + time_step, 0])\n    return np.array(dataX), np.array(dataY)","69ad9789":"# reshape into X=t,t+1,t+2,t+3 and Y=t+4\ntime_step = 100\nX_train, y_train = create_dataset(training_data, time_step)\nX_test, ytest = create_dataset(testing_data, time_step)","2706dea3":"X_train","083491ae":"# reshape input to be [samples, time steps, features] which is required for LSTM\nX_train =X_train.reshape(X_train.shape[0],X_train.shape[1] , 1)\nX_test = X_test.reshape(X_test.shape[0],X_test.shape[1] , 1)","d139523e":"model=Sequential()\nmodel.add(LSTM(50,return_sequences=True,input_shape=(100,1)))\nmodel.add(LSTM(50,return_sequences=True))\nmodel.add(LSTM(50))\nmodel.add(Dense(1))\nmodel.compile(loss='mean_squared_error',optimizer='adam')","80ba8feb":"model.summary()","a26ea279":"model.fit(X_train,y_train,validation_data=(X_test,ytest),epochs=100,batch_size=64,verbose=1)","5f601482":"### Lets Do the prediction and check performance metrics\ntrain_predict=model.predict(X_train)\ntest_predict=model.predict(X_test)","5597d9ee":"train_predict=scaler.inverse_transform(train_predict)\ntest_predict=scaler.inverse_transform(test_predict)","29a3bb1d":"### Calculate RMSE performance metrics\n\nmath.sqrt(mean_squared_error(y_train,train_predict))","08f12c12":"### Test Data RMSE\nmath.sqrt(mean_squared_error(ytest,test_predict))","e3b582c0":"### Plotting \n# shift train predictions for plotting\nlook_back=100\ntrainPredictPlot = np.empty_like(df1)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[look_back:len(train_predict)+look_back, :] = train_predict\n# shift test predictions for plotting\ntestPredictPlot = np.empty_like(df1)\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[len(train_predict)+(look_back*2)+1:len(df1)-1, :] = test_predict\n# plot baseline and predictions\nplt.plot(scaler.inverse_transform(df1))\nplt.plot(trainPredictPlot)\nplt.plot(testPredictPlot)\nplt.show()","36e7e0bd":"len(testing_data)","b77561f7":"\nx_input=testing_data[429:].reshape(1,-1)\nx_input.shape","8faab186":"temp_input=list(x_input)\ntemp_input=temp_input[0].tolist()","8af5b624":"temp_input","e19a31d5":"lst_output=[]\nn_steps=100\ni=0\nwhile(i<30):\n    \n    if(len(temp_input)>100):\n        #print(temp_input)\n        x_input=np.array(temp_input[1:])\n        print(\"{} day input {}\".format(i,x_input))\n        x_input=x_input.reshape(1,-1)\n        x_input = x_input.reshape((1, n_steps, 1))\n        #print(x_input)\n        yhat = model.predict(x_input, verbose=0)\n        print(\"{} day output {}\".format(i,yhat))\n        temp_input.extend(yhat[0].tolist())\n        temp_input=temp_input[1:]\n        #print(temp_input)\n        lst_output.extend(yhat.tolist())\n        i=i+1\n    else:\n        x_input = x_input.reshape((1, n_steps,1))\n        yhat = model.predict(x_input, verbose=0)\n        print(yhat[0])\n        temp_input.extend(yhat[0].tolist())\n        print(len(temp_input))\n        lst_output.extend(yhat.tolist())\n        i=i+1\n    \n\nprint(lst_output)","5a932de3":"day_new=np.arange(1,101)\nday_pred=np.arange(101,131)","a4b2fb07":"len(df1)","03c7f7a2":"plt.plot(day_new,scaler.inverse_transform(df1[1411:]))\nplt.plot(day_pred,scaler.inverse_transform(lst_output))","ea4b0eb8":"df3=df1.tolist()\ndf3.extend(lst_output)\nplt.plot(df3[1200:])","61f1dcab":"df3=scaler.inverse_transform(df3).tolist()","1f5b271f":"plt.plot(df3)","484a9782":"### Stacked LSTM with Apple Stocks"}}