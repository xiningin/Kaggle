{"cell_type":{"1bf93822":"code","d6f61b93":"code","df7efcbd":"code","7ace6125":"code","b3a48084":"code","8f086b3c":"code","29adbcdc":"code","97f273e8":"code","2f113eb7":"code","77bada21":"code","bf7c5dcc":"code","f2ee8bf2":"code","2c2b49ab":"code","b17f9f01":"code","c98c0051":"code","b454e5ce":"code","420b9dce":"code","c608d2d9":"code","10d3b6b8":"code","3a9dfc84":"code","f510c00d":"code","f71e0b62":"code","edbe5962":"code","ecec1030":"code","054e3d69":"code","59ad2884":"code","621e7376":"code","d601e10f":"code","3f04a032":"code","7ab720bc":"code","7e38fd19":"code","9135f424":"markdown","482f8905":"markdown","d107f941":"markdown","6e1d4d7e":"markdown","f764de93":"markdown","069b7bcd":"markdown","0608c7ec":"markdown","4ecda5fd":"markdown","18a4e192":"markdown","d73cc948":"markdown","6acda7ac":"markdown","af98d056":"markdown","6b825bc1":"markdown","a70aa755":"markdown","67f8f480":"markdown","d0298272":"markdown","f95a2555":"markdown","705673c6":"markdown","75b0da0d":"markdown"},"source":{"1bf93822":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import svm\nfrom sklearn import metrics","d6f61b93":"df = pd.read_csv('..\/input\/parkinsons-data-set\/parkinsons.data')\ndf.head()","df7efcbd":"df.shape","7ace6125":"df.info()","b3a48084":"# Alternate way for checking of missing values.\n# df.isnull().sum()","8f086b3c":"df.describe()","29adbcdc":"# Distribution of Target\ndf.status.value_counts()","97f273e8":"df.groupby('status').mean()","2f113eb7":"X = df.drop(columns = ['status', 'name'], axis = 1)\ny = df.status\n\nX.shape, y.shape","77bada21":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size = 0.2, random_state = 99)\n\nX_train.shape, X_valid.shape, y_train.shape, y_valid.shape","bf7c5dcc":"y_train","f2ee8bf2":"# Distribution of Target\ny_train.value_counts()","2c2b49ab":"X_train_features = X_train.columns\nX_train_features","b17f9f01":"from sklearn.preprocessing import StandardScaler, MinMaxScaler","c98c0051":"sc = StandardScaler()\nsc.fit(X_train)","b454e5ce":"X_train = sc.transform(X_train)\nX_valid = sc.transform(X_valid)","420b9dce":"X_train[:2]","c608d2d9":"print(type(X_train))","10d3b6b8":"# Convert Array to Data Frame\nX_train = pd.DataFrame(X_train, columns = X_train_features)\nprint(type(X_train))","3a9dfc84":"X_train.head()","f510c00d":"model_svc = svm.SVC(kernel = 'linear')\nmodel_svc.fit(X_train, y_train)","f71e0b62":"# Prediction on Training Data Set\npred_train = model_svc.predict(X_train)\n\n# Accuracy on Training Data Set\nacc_train = metrics.accuracy_score(y_train, pred_train)\n\nacc_train","edbe5962":"# Prediction on Validation Data Set\npred_valid = model_svc.predict(X_valid)\n\n# Accuracy on Validation Data Set\nacc_valid = metrics.accuracy_score(y_valid, pred_valid)\n\nacc_valid","ecec1030":"\"\"\"\nSample Data =>\n* MDVP:Fo(Hz)       --> 162.56800\n* MDVP:Fhi(Hz)      --> 198.34600\n* MDVP:Flo(Hz)      --> 77.6300\n* MDVP:Jitter(%)    --> 0.00502\n* MDVP:Jitter(Abs)  --> 0.00003\n* MDVP:RAP          --> 0.00280\n* MDVP:PPQ          --> 0.00253\n* Jitter:DDP        --> 0.00841\n* MDVP:Shimmer      --> 0.01791\n* MDVP:Shimmer(dB)  --> 0.16800\n* Shimmer:APQ3      --> 0.00793\n* Shimmer:APQ5      --> 0.01057\n* MDVP:APQ          --> 0.01799\n* Shimmer:DDA       --> 0.02380\n* NHR               --> 0.01170\n* HNR               --> 25.67800\n* RPDE              --> 0.427785\n* DFA               --> 0.723797\n* spread1           --> -6.635729\n* spread2           --> 0.0209866\n* D2                --> 1.957961\n* PPE               --> 0.135242\n* status (Expected) --> 1 (Non-Healthy)\n\"\"\"\n# input_data = [162.56800,198.34600,77.6300,0.00502,0.00003,0.00280,0.00253,0.00841,0.01791,0.16800,0.00793,0.01057,0.01799,0.02380,0.01170,25.67800,0.427785,0.723797,-6.635729,0.0209866,1.957961,0.135242] # Array\ninput_data = (162.56800,198.34600,77.6300,0.00502,0.00003,0.00280,0.00253,0.00841,0.01791,0.16800,0.00793,0.01057,0.01799,0.02380,0.01170,25.67800,0.427785,0.723797,-6.635729,0.0209866,1.957961,0.135242) # Tuple","054e3d69":"# Changing input data to numpy array\ninput_data = np.asarray(input_data)\n\n# Reshape the array\ninput_data = input_data.reshape(1, -1)\n\n# Scale the data\ninput_data = sc.transform(input_data)\n\n# Predict \npred_new = model_svc.predict(input_data)\n\nprint(pred_new)\n\nif pred_new[0] == 1:\n    res = \"non-healthy, has Parkinson's Disease\"\nelse:\n    res = \"healthy.\"\n    \nprint('The given patient is diagonised as', res)","59ad2884":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size = 0.2, random_state = 99, stratify=y)\n\nX_train.shape, X_valid.shape, y_train.shape, y_valid.shape","621e7376":"# Distribution of Target\ny_train.value_counts()","d601e10f":"sc = StandardScaler()\nsc.fit(X_train)\n\nX_train = sc.transform(X_train)\nX_valid = sc.transform(X_valid)\n\n# Model\nmodel_svc = svm.SVC(kernel = 'linear')\nmodel_svc.fit(X_train, y_train)","3f04a032":"# Prediction on Training Data Set\npred_train = model_svc.predict(X_train)\n\n# Accuracy on Training Data Set\nacc_train = metrics.accuracy_score(y_train, pred_train)\n\nacc_train","7ab720bc":"# Prediction on Validation Data Set\npred_valid = model_svc.predict(X_valid)\n\n# Accuracy on Validation Data Set\nacc_valid = metrics.accuracy_score(y_valid, pred_valid)\n\nacc_valid","7e38fd19":"\"\"\"\nSample Data =>\n* MDVP:Fo(Hz)       --> 162.56800\n* MDVP:Fhi(Hz)      --> 198.34600\n* MDVP:Flo(Hz)      --> 77.6300\n* MDVP:Jitter(%)    --> 0.00502\n* MDVP:Jitter(Abs)  --> 0.00003\n* MDVP:RAP          --> 0.00280\n* MDVP:PPQ          --> 0.00253\n* Jitter:DDP        --> 0.00841\n* MDVP:Shimmer      --> 0.01791\n* MDVP:Shimmer(dB)  --> 0.16800\n* Shimmer:APQ3      --> 0.00793\n* Shimmer:APQ5      --> 0.01057\n* MDVP:APQ          --> 0.01799\n* Shimmer:DDA       --> 0.02380\n* NHR               --> 0.01170\n* HNR               --> 25.67800\n* RPDE              --> 0.427785\n* DFA               --> 0.723797\n* spread1           --> -6.635729\n* spread2           --> 0.0209866\n* D2                --> 1.957961\n* PPE               --> 0.135242\n* status (Expected) --> 1 (Non-Healthy)\n\"\"\"\n# input_data = [162.56800,198.34600,77.6300,0.00502,0.00003,0.00280,0.00253,0.00841,0.01791,0.16800,0.00793,0.01057,0.01799,0.02380,0.01170,25.67800,0.427785,0.723797,-6.635729,0.0209866,1.957961,0.135242] # Array\ninput_data = (162.56800,198.34600,77.6300,0.00502,0.00003,0.00280,0.00253,0.00841,0.01791,0.16800,0.00793,0.01057,0.01799,0.02380,0.01170,25.67800,0.427785,0.723797,-6.635729,0.0209866,1.957961,0.135242) # Tuple\n\n# Changing input data to numpy array\ninput_data = np.asarray(input_data)\n\n# Reshape the array\ninput_data = input_data.reshape(1, -1)\n\n# Scale the data\ninput_data = sc.transform(input_data)\n\n# Predict \npred_new = model_svc.predict(input_data)\n\nprint(pred_new)\n\nif pred_new[0] == 1:\n    res = \"non-healthy, has Parkinson's Disease\"\nelse:\n    res = \"healthy.\"\n    \nprint('The given patient is diagonised as', res)","9135f424":"# Test on Unseen data","482f8905":"This seems to be imbalanced data, as we have only 48 patients records with Healthy or non-Parkison's disease, and 147 data points are with Parkison's disease.\n\nSo lets get the mean value for each features w.r.t the target (status).","d107f941":"# DIstribution of Data","6e1d4d7e":"## Scale the data","f764de93":"# Load Data","069b7bcd":"On Validation data set we got accuracy of 79%... there seems to be difference of ~11%. This seems the model is Overfitted.\n\nNeed to work to avoid Overfitting.","0608c7ec":"From here I could say that healthy person has high frequency (Hz) in almost of the attributes, and person with low frequency is tend to have parkison's disease.\n\nJust refer to the difference between each feature.","4ecda5fd":"With this we will learn how to build a a ML system with Python which can detect weathre a person has Parkison's deisease or not. \n\nThis is one of the important project in ML as it comes under Health Care domain, and Health Care is one of those fields where ML can contribute a lot. \n\nWe can use these ML techniques to diagonize and find certain diseases early and can start early treatement, and patients live can be save.\n\nSb, before we begins, lets first understand the problem statement; what is this Parkisons disease, then we will go through the procedure we will follow to build this ML model.\n\n# PRoblem Statement\nLets say there is an Medical Institute, and they are doing some research on Parkisons disease, how you can detect or find the disease early and how to treat thoese patients early.\n\nUsing ML techniques we can achieve this.\n\n# WHat is Parkison's Disease\nParkison's disease is a progressive nervous system disorder that affects movement leading to shaking, stiffness, and difficulty with walking, balance, and coordinating. \n\nParkinson's symptoms usually begin gradually and gets worse over time.\n\n# Work Flow will be using\n* Import Library\n* Load Data\n* Understand Data, and visualize\n* Data Pre-Processing\n    * Data Cleaning \n    * Feature ENgineering\n    * Split the data into Train \/ Validation set\n* Model Building \/ Model Training \n    * Use SVM (SVC)\n* Evaluation of Model.\n* Test on unseen data","18a4e192":"# Import Library","d73cc948":"Accuracy for training and validation data set are 88% and 82%, difference of 6%.. nearly ok model.","6acda7ac":"Lets use some techniques\n# 1 : Stratified train-test split.","af98d056":"* We have 195 data obseravtions.\n* There are 24 Features including the Target.\n* Features \/ Attributes =>\n    * name           --> ASCII subject name and recording number\n    * MDVP:Fo(Hz)    --> Average vocal fundamental frequency\n    * MDVP:Fhi(Hz)   --> Maximum vocal fundamental frequency\n    * MDVP:Flo(Hz)   --> Minimum vocal fundamental frequency\n    * MDVP:Jitter(%),MDVP:Jitter(Abs),MDVP:RAP,MDVP:PPQ,Jitter:DDP --> Several measures of variation in fundamental frequency\n    * MDVP:Shimmer,MDVP:Shimmer(dB),Shimmer:APQ3,Shimmer:APQ5,MDVP:APQ,Shimmer:DDA --> Several measures of variation in amplitude\n    * NHR,HNR        --> Two measures of ratio of noise to tonal components in the voice\n    * status         --> Health status of the subject (one) - Parkinson's, (zero) - healthy\n    * RPDE, D2       --> Two nonlinear dynamical complexity measures\n    * DFA            --> Signal fractal scaling exponent\n    * spread1, spread2, PPE --> Three nonlinear measures of fundamental frequency variation\n    \nWe se that the data are in varioys ranges in each feature. We will be using some kind of data scaling may be via StandardScaler or MinMaxScaler.\n","6b825bc1":"# Data Preprocessing","a70aa755":"# Model Building","67f8f480":"# Evulate","d0298272":"Model is not working as expected. This is due to overfitting of model.","f95a2555":"Cool.. we got the accuracy as 91% on Training Data Set, now lets see how it works on our validation data set.","705673c6":"* No Missing values.\n* `name` is only categorical data, also we will drop this attribute as it is of no use while training the model.\n* rest all are non-categorical.","75b0da0d":"Now we see that our data looks on common range."}}