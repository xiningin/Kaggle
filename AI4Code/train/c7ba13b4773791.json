{"cell_type":{"e0a06aff":"code","fafad4cf":"code","5a3aebe3":"code","6c49efd6":"code","1899c350":"code","5c0ca5ae":"code","7c2b7a97":"code","f8f5d818":"code","1f4acd08":"code","9321087d":"code","cada0e63":"code","857aa30a":"code","f785b3b8":"code","593765dc":"code","445595d5":"code","6058e238":"code","e1a5c3be":"code","feafb949":"code","5e09d187":"code","b9e5cdb9":"code","fa90df0b":"code","ec765197":"code","7bcd6f54":"code","f5bd0b7c":"markdown","6970429d":"markdown"},"source":{"e0a06aff":"import pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nimport numpy as np","fafad4cf":"df = pd.read_csv('\/kaggle\/input\/cardiovascular-disease-dataset\/cardio_train.csv', sep=';', index_col=0)","5a3aebe3":"df.head()","6c49efd6":"df.describe()","1899c350":"if df.isna().sum().sum() > 0:\n    print('\u0412 \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435')\nelse:\n    print('\u0412 \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0435\u0442 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439')\n","5c0ca5ae":"df.info()","7c2b7a97":"df[['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active', 'cardio']] = df[['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active', 'cardio']].astype('category')","f8f5d818":"#\u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\n\nfig, axes = plt.subplots(1, 5, figsize=(16, 5))\nsns.boxplot(data=df, y='age', ax=axes[0])\nsns.boxplot(data=df, y='height', ax=axes[1])\nsns.boxplot(data=df, y='weight', ax=axes[2])\nsns.boxplot(data=df, y='ap_hi', ax=axes[3])\nsns.boxplot(data=df, y='ap_lo', ax=axes[4])\nplt.tight_layout()","1f4acd08":"#\u0438\u043d\u0434\u0438\u043a\u0430\u0446\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\n\nnum_cols = ['age', 'height', 'weight', 'ap_hi', 'ap_lo']\n\nfor col in num_cols:\n    high_q = df[col].quantile(0.95)\n    low_q = df[col].quantile(0.05)\n    \n    df['{}_outlier'.format(col)] = np.where((df[col] > high_q) | (df[col] < low_q), 1, 0)\n    df['{}_outlier'.format(col)] = df['{}_outlier'.format(col)].astype('category')\n    ","9321087d":"#\u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\n\nfig, axes = plt.subplots(2, 3, figsize=(16, 8), sharey=True)\nsns.countplot(data=df, x='cholesterol', ax=axes[0, 0])\nsns.countplot(data=df, x='gluc', ax=axes[0, 1])\nsns.countplot(data=df, x='smoke', ax=axes[0, 2])\nsns.countplot(data=df, x='alco', ax=axes[1, 0])\nsns.countplot(data=df, x='active', ax=axes[1, 1])\nsns.countplot(data=df, x='cardio', ax=axes[1, 2])\nplt.tight_layout()","cada0e63":"#\u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043f\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\n\nfig, axes = plt.subplots(2, 3, figsize=(16, 8), sharey=True)\nsns.countplot(data=df, x='cholesterol', hue='cardio', ax=axes[0, 0])\nsns.countplot(data=df, x='gluc', hue='cardio', ax=axes[0, 1])\nsns.countplot(data=df, x='smoke', hue='cardio', ax=axes[0, 2])\nsns.countplot(data=df, x='alco', hue='cardio', ax=axes[1, 0])\nsns.countplot(data=df, x='active', hue='cardio', ax=axes[1, 1])\n\nfig.delaxes(axes[1, 2])\n\nplt.tight_layout()","857aa30a":"#\u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445\n\nfig, axes = plt.subplots(2, 3, figsize=(16, 8))\nsns.kdeplot(data=df, x='age', hue='cardio', ax=axes[0, 0])\nsns.kdeplot(data=df, x='height', hue='cardio', ax=axes[0, 1])\nsns.kdeplot(data=df, x='weight', hue='cardio', ax=axes[0, 2])\nsns.kdeplot(data=df, x='ap_hi', hue='cardio', ax=axes[1, 0])\nsns.kdeplot(data=df, x='ap_lo', hue='cardio', ax=axes[1, 1])\n\nfig.delaxes(axes[1, 2])\n\nplt.tight_layout()","f785b3b8":"#\u043f\u043e\u0438\u0441\u043a \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0439 \u0446\u0435\u043b\u0435\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043f\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\nfig, axes = plt.subplots(2, 3, figsize=(16, 8), sharey=True)\nsns.countplot(data=df, x='age_outlier', hue='cardio', ax=axes[0, 0])\nsns.countplot(data=df, x='height_outlier', hue='cardio', ax=axes[0, 1])\nsns.countplot(data=df, x='weight_outlier', hue='cardio', ax=axes[0, 2])\nsns.countplot(data=df, x='ap_hi_outlier', hue='cardio', ax=axes[1, 0])\nsns.countplot(data=df, x='ap_lo_outlier', hue='cardio', ax=axes[1, 1])\n\nfig.delaxes(axes[1, 2])\n\nplt.tight_layout()","593765dc":"fig, axes = plt.subplots(1, 2, figsize=(12, 5))\nsns.kdeplot(x=np.log(df['ap_lo']+abs(df['ap_lo'].min()) + 1), hue=df['cardio'], ax=axes[0])\nsns.kdeplot(x=np.log(df['ap_hi']+abs(df['ap_hi'].min()) + 1), hue=df['cardio'], ax=axes[1])","445595d5":"df['ap_lo'] = df['ap_lo']+abs(df['ap_lo']) + 1\ndf['ap_hi'] = df['ap_hi']+abs(df['ap_hi']) + 1","6058e238":"#\u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438 \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e\nx = df.drop('cardio', axis=1)\ny = df['cardio']\n\n#\u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\ncat_cols = x.select_dtypes(include=['category']).columns\nnum_cols = x.select_dtypes(exclude=['category']).columns","e1a5c3be":"#\u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\n\ncat_pipe = OneHotEncoder(drop='first')\nnum_pipe = StandardScaler()\n\ncol_trans = ColumnTransformer([\n    ('cat', cat_pipe, cat_cols),\n    ('num', num_pipe, num_cols)\n])","feafb949":"#\u043e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score, train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.pipeline import make_pipeline\n\nclf = make_pipeline(col_trans, LogisticRegression())\n\ncvs_res = cross_val_score(clf, x, y)\nprint('\u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043f\u0435\u0440\u0435\u043a\u0440\u0435\u0441\u0442\u043d\u043e\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438: {:.2%} +\/-{:.2%}'.format(cvs_res.mean(), cvs_res.std()))","5e09d187":"#\u0434\u0435\u043b\u0438\u043c \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u0447\u043d\u044b\u0439\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, stratify=y)","b9e5cdb9":"#\u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f\nclf.fit(x_train, y_train)\npreds = clf.predict(x_test)","fa90df0b":"#\u043e\u0442\u0447\u0435\u0442 \u043f\u043e \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438\nprint(classification_report(y_test, preds))","ec765197":"#roc_auc\nfrom sklearn.metrics import roc_auc_score\nroc_auc_score(y_test, preds)","7bcd6f54":"#\u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u043e\u0448\u0438\u0431\u043e\u043a\ncf_matrix = confusion_matrix(y_test, preds)\nsns.heatmap(cf_matrix\/np.sum(cf_matrix), annot=True, fmt='.2%', cmap='Blues')","f5bd0b7c":"# \u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445","6970429d":"# \u041c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"}}