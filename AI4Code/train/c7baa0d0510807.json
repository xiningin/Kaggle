{"cell_type":{"1d20905a":"code","5de81337":"code","44f19102":"code","5f797b40":"code","3ad0b119":"code","efb8b9ea":"code","991ec5c1":"code","367953f7":"code","06e79876":"code","6b87bd1b":"code","1054b9ff":"code","50f65940":"code","58e4cb90":"code","7e61f09d":"code","2b0604a0":"code","9c2813c8":"code","704f4c74":"code","2edc1647":"code","3f7339a3":"code","77437243":"code","136db5d5":"code","67000997":"code","f52b8d1f":"code","4436dbb9":"code","5c7f4228":"code","ce3fda3c":"code","1d2183ea":"code","a74f1e07":"code","986d81f0":"code","f7c25301":"code","1c49032c":"code","53fc79f2":"code","76e603a3":"code","9ab54830":"code","68a2ce42":"code","93b81a4c":"code","6bd2ebd3":"code","415483ce":"code","67f69586":"code","e622c7d4":"code","383e945a":"code","661a8577":"markdown","eedc9bcf":"markdown","b33ee660":"markdown","62c4eaa4":"markdown","090c2b78":"markdown","6b5e09e1":"markdown","61903fc3":"markdown","443c8aca":"markdown","704ec591":"markdown","878dd632":"markdown","13066c18":"markdown","fb0443db":"markdown","a06d988f":"markdown","2580f1f2":"markdown","361766af":"markdown","06e4a4da":"markdown","b546780b":"markdown","8fec8702":"markdown","b708976d":"markdown","64fde0cd":"markdown","9f31b551":"markdown","8a061999":"markdown","d7d761ae":"markdown","0f4f7e66":"markdown","0b605ed8":"markdown","311355cb":"markdown"},"source":{"1d20905a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\nimport missingno as msno\nimport sklearn as sk\nfrom scipy import stats\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom sklearn.preprocessing import MinMaxScaler, LabelEncoder, StandardScaler, RobustScaler\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score,roc_auc_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.impute import KNNImputer\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5de81337":"diabetes = pd.read_csv('\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv')\nprint(\"Number of row and columns in dataset\",\"-\"*130)\ndisplay(diabetes.shape)\nprint(\"First five row of dataset\",\"-\"*145)\ndisplay(diabetes.head())\nprint(\"Last five row of dataset\",\"-\"*145)\ndisplay(diabetes.tail())\nprint(\"data type  of each values\",\"-\"*145)\ndisplay(diabetes.dtypes)\nprint(\"Null values in dataset\",\"-\"*145)\ndisplay(diabetes.isnull().sum())","44f19102":"diabetes = diabetes.astype({\"Outcome\":'category'})\ncols =['Glucose','BloodPressure','SkinThickness','Insulin','BMI','Age']\ndiabetes[cols] = diabetes[cols].replace({'0':np.nan, 0:np.nan})\ndiabetes.isnull().sum()","5f797b40":"msno.bar(diabetes)","3ad0b119":"diabetes.describe().round().T","efb8b9ea":"sns.set(rc={'figure.figsize':(11.7,8.27)})\nsns.set_theme(style=\"whitegrid\")\nsns.histplot(diabetes['Age'], kde=True, color='red', bins=30)\nplt.title('Age Distribution', fontsize=18)\nplt.xlabel('Age', fontsize=16)\nplt.ylabel('Count', fontsize=16)\nplt.axvline(x=diabetes.Age.mean(),color='green',label='mean')\nplt.axvline(x=diabetes.Age.median(),color='blue',ls='--',lw=2.5,label='medain')\nplt.legend();","991ec5c1":"sns.set(rc={'figure.figsize':(11.7,8.27)})\nsns.set_theme(style=\"whitegrid\")\nsns.histplot(diabetes['DiabetesPedigreeFunction'], kde=True, color='red', bins=50)\nplt.title('DiabetesPedigreeFunction Distribution', fontsize=18)\nplt.xlabel('DiabetesPedigreeFunction', fontsize=16)\nplt.ylabel('Count', fontsize=16)\nplt.axvline(x=diabetes.DiabetesPedigreeFunction.mean(),color='green',label='mean')\nplt.axvline(x=diabetes.DiabetesPedigreeFunction.median(),color='blue',ls='--',lw=2.5,label='medain')\nplt.legend();","367953f7":"sns.set(rc={'figure.figsize':(11.7,8.27)})\nsns.set_theme(style=\"whitegrid\")\nsns.histplot(diabetes['Insulin'], kde=True, color='red', bins=50)\nplt.title('Insulin Distribution', fontsize=18)\nplt.xlabel('Insulin', fontsize=16)\nplt.ylabel('Count', fontsize=16)\nplt.axvline(x=diabetes.Insulin.mean(),color='green',label='mean')\nplt.axvline(x=diabetes.Insulin.median(),color='blue',ls='--',lw=2.5,label='medain')\nplt.legend();","06e79876":"sns.set(rc={'figure.figsize':(11.7,8.27)})\nsns.set_theme(style=\"whitegrid\")\nsns.histplot(diabetes['SkinThickness'], kde=True, color='red', bins=50)\nplt.title('SkinThickness Distribution', fontsize=18)\nplt.xlabel('SkinThickness', fontsize=16)\nplt.ylabel('Count', fontsize=16)\nplt.axvline(x=diabetes.SkinThickness.mean(),color='green',label='mean')\nplt.axvline(x=diabetes.SkinThickness.median(),color='blue',ls='--',lw=2.5,label='medain')\nplt.legend();","6b87bd1b":"sns.set(rc={'figure.figsize':(11.7,8.27)})\nsns.set_theme(style=\"whitegrid\")\nsns.histplot(diabetes['BloodPressure'], kde=True, color='red', bins=50)\nplt.title('BloodPressure Distribution', fontsize=18)\nplt.xlabel('BloodPressure', fontsize=16)\nplt.ylabel('Count', fontsize=16)\nplt.axvline(x=diabetes.BloodPressure.mean(),color='green',label='mean')\nplt.axvline(x=diabetes.BloodPressure.median(),color='blue',ls='--',lw=2.5,label='medain')\nplt.legend();","1054b9ff":"sns.set(rc={'figure.figsize':(11.7,8.27)})\nsns.set_theme(style=\"whitegrid\")\nsns.histplot(diabetes['Glucose'], kde=True, color='red', bins=50)\nplt.title('Glucose Distribution', fontsize=18)\nplt.xlabel('Glucose', fontsize=16)\nplt.ylabel('Count', fontsize=16)\nplt.axvline(x=diabetes.Glucose.mean(),color='green',label='mean')\nplt.axvline(x=diabetes.Glucose.median(),color='blue',ls='--',lw=2.5,label='medain')\nplt.legend();","50f65940":"sns.set(rc={'figure.figsize':(11.7,8.27)})\nsns.set_theme(style=\"whitegrid\")\nsns.histplot(diabetes['BMI'], kde=True, color='red', bins=50)\nplt.title('BMI Distribution', fontsize=18)\nplt.xlabel('BMI', fontsize=16)\nplt.ylabel('Count', fontsize=16)\nplt.axvline(x=diabetes.BMI.mean(),color='green',label='mean')\nplt.axvline(x=diabetes.BMI.median(),color='blue',ls='--',lw=2.5,label='medain')\nplt.legend();","58e4cb90":"sns.set_theme(style=\"whitegrid\")\nfig, ax = plt.subplots(figsize=(24,24), nrows=3, ncols=3)\nsns.boxplot(data=diabetes, y=\"Pregnancies\", ax=ax[0,0], color='red')\nsns.boxplot(data=diabetes, y=\"Glucose\", ax=ax[0,1], color='red')\nsns.boxplot(data=diabetes, y=\"BloodPressure\", ax=ax[0,2], color='red')\nsns.boxplot(data=diabetes, y=\"SkinThickness\", ax=ax[1,0], color='red')\nsns.boxplot(data=diabetes, y=\"Insulin\", ax=ax[1,1], color='red')\nsns.boxplot(data=diabetes, y=\"Age\", ax=ax[2,1], color='red')\nsns.boxplot(data=diabetes, y=\"BMI\", ax=ax[2,0], color='red')\nsns.boxplot(data=diabetes, y=\"DiabetesPedigreeFunction\", ax=ax[1,2], color='red');","7e61f09d":"hm = sns.heatmap(diabetes.corr(), annot = True)\n\nhm.set(title = \"Correlation matrix\")\n\nplt.show()","2b0604a0":"diabetes['SkinThickness'].fillna(int(diabetes['SkinThickness'].median()), inplace=True)\ndiabetes['Insulin'].fillna(int(diabetes['Insulin'].median()), inplace=True)","9c2813c8":"diabetes.loc[(diabetes[\"Age\"] >= 21) & (diabetes[\"Age\"] < 50), \"age_group\"] = \"Adult\"\ndiabetes.loc[(diabetes[\"Age\"] >= 50), \"age_group\"] = \"Senior\"\ndiabetes[\"Glucose_Range\"] = pd.cut(x=diabetes[\"Glucose\"], bins=[0, 140, 200, 300], labels=[\"Normal\", \"Prediabetes\", \"Diabetes\"])\ndiabetes['BMI_Group'] = pd.cut(x=diabetes['BMI'], bins=[0, 18.5, 24.9, 29.9, 100],labels=[\"Underweight\", \"Healthy\", \"Overweight\", \"Obese\"])","704f4c74":"diabetes['SkinThickness_log']=np.log(diabetes['SkinThickness'])\ndiabetes['DiabetesPedigreeFunction_log']=np.log(diabetes['DiabetesPedigreeFunction'])\ndiabetes['Insulin_log']=np.log(diabetes['Insulin'])","2edc1647":"sugar=diabetes[['age_group','BMI_Group', 'BloodPressure','SkinThickness_log',\n       'Glucose_Range',  'Insulin_log','Pregnancies',\n       'DiabetesPedigreeFunction_log','Outcome']].copy()","3f7339a3":"X= sugar.drop(columns='Outcome',axis=1)","77437243":"X_f = pd.get_dummies(X)","136db5d5":"X_f","67000997":"num=['BloodPressure','Pregnancies']","f52b8d1f":"scaler = RobustScaler()\nX_f[num] = scaler.fit_transform(X_f[num])","4436dbb9":"X_f","5c7f4228":"high=X_f.drop(['BloodPressure'],axis=1)","ce3fda3c":"high","1d2183ea":"X_f.isnull().sum()","a74f1e07":"sns.set(rc={'figure.figsize':(11.7,8.27)})\nsns.set_theme(style=\"whitegrid\")\nsns.histplot(diabetes['SkinThickness_log'], kde=True, color='red', bins=30)\nplt.title('SkinThickness_log Distribution', fontsize=18)\nplt.xlabel('SkinThickness_log', fontsize=16)\nplt.ylabel('Count', fontsize=16)\nplt.axvline(x=diabetes.SkinThickness_log.mean(),color='green',label='mean')\nplt.axvline(x=diabetes.SkinThickness_log.median(),color='blue',ls='--',lw=2.5,label='medain')\nplt.legend();","986d81f0":"sns.set(rc={'figure.figsize':(11.7,8.27)})\nsns.set_theme(style=\"whitegrid\")\nsns.histplot(diabetes['Insulin_log'], kde=True, color='red', bins=20)\nplt.title('Insulin_log Distribution', fontsize=18)\nplt.xlabel('Insulin_log', fontsize=16)\nplt.ylabel('Count', fontsize=16)\nplt.axvline(x=diabetes.Insulin_log.mean(),color='green',label='mean')\nplt.axvline(x=diabetes.Insulin_log.median(),color='blue',ls='--',lw=2.5,label='medain')\nplt.legend();","f7c25301":"sugar=diabetes[['age_group','BMI_Group', 'BloodPressure','SkinThickness_log',\n       'Glucose_Range',  'Insulin_log','Pregnancies',\n       'DiabetesPedigreeFunction_log','Outcome']]","1c49032c":"diabetes['Outcome'].value_counts().plot(kind='pie',figsize=(10, 10));","53fc79f2":"diabetes['Glucose_Range'].value_counts().plot(kind='pie',figsize=(10, 10));","76e603a3":"diabetes['BMI_Group'].value_counts().plot(kind='pie',figsize=(10, 10));","9ab54830":"diabetes['age_group'].value_counts().plot(kind='pie',figsize=(10, 10));","68a2ce42":"Y=diabetes['Outcome']","93b81a4c":"labels = Y\nfeatures =X_f\ntrain_features, test_features, train_labels, test_labels = train_test_split(features, labels, test_size = 0.2, stratify=labels,random_state = 2)","6bd2ebd3":"train_features.replace([np.inf, -np.inf], np.nan, inplace=True)\ntest_features.replace([np.inf, -np.inf], np.nan, inplace=True)\ntrain_features.fillna(999, inplace=True)\ntest_features.fillna(999, inplace=True)","415483ce":"model = LogisticRegression(solver='liblinear')\nmodel.fit(train_features, train_labels);","67f69586":"predictions = model.predict(train_features)\ntraining_data_accuracy =  accuracy_score(predictions,train_labels)\ntraining_data_accuracy","e622c7d4":"predictions_test = model.predict(test_features)\ntest_data_accuracy =  accuracy_score(predictions_test,test_labels)\ntest_data_accuracy","383e945a":"rf_model = RandomForestClassifier(random_state=46).fit(train_features, train_labels)\ny_pred = rf_model.predict(test_features)\n\nprint(f\"Accuracy: {round(accuracy_score(y_pred, test_labels), 2)}\")\nprint(f\"Recall: {round(recall_score(y_pred,test_labels),3)}\")\nprint(f\"Precision: {round(precision_score(y_pred,test_labels), 2)}\")\nprint(f\"F1: {round(f1_score(y_pred,test_labels), 2)}\")\nprint(f\"Auc: {round(roc_auc_score(y_pred,test_labels), 2)}\")","661a8577":"## 2. Making New Categorical Feature from Numerical","eedc9bcf":"# Correlation Matrix","b33ee660":"### Missiing Values","62c4eaa4":"Observation\n\n-----------------------------------------\n\n","090c2b78":"# Objective\nThe objective of the dataset is to diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset.","6b5e09e1":"## 3. Transformation of Numerical Varraible ","61903fc3":"###  1. split into train and test data","443c8aca":"# Source\nThis dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. \n## Constraints\nIn particular, all patients here are females at least 21 years old of Pima Indian heritage.\n\n## Features:\n\n    Pregnancies: Number of times pregnant\n    \n    Glucose: Plasma glucose concentration 2 hours in an oral glucose tolerance test\n    \n    Blood Pressure: Diastolic blood pressure (mm Hg)\n    \n    Skin Thickness: Triceps skin fold thickness (mm\n    \n    Insulin: 2-Hour serum insulin (mu U\/ml)\n    \n    BMI: Body mass index (weight in kg\/(height in m)^2) \n    \n    Diabetes Pedigree Function: Diabetes pedigree function\n    \n    Age: Age (years)\n    \n    Outcome: Class variable (0 or 1) 0 mean non-diabetic and 1 means diabetic\n    ","704ec591":"# Training and Prediction","878dd632":"# Statistical Summary of dataset \/ Center of Measure","13066c18":"## 4. One hot enconding","fb0443db":"# Outlier & Five Point Summary","a06d988f":"# Univarate And multivate analysis","2580f1f2":"### Changing dtype and zero with NaN","361766af":"## 1.Logestic regression","06e4a4da":"# Feature Engenering","b546780b":"# Inspection of dataset","8fec8702":"# Exploratory Data Analyis","b708976d":"## 2. RandomForestClassifier","64fde0cd":"## 5. Scalling","9f31b551":"# Model building","8a061999":"Observation\n----------------------------\n\n\n","d7d761ae":"## 1. Filling NuN Values","0f4f7e66":"Observation\n\n-----------------------------------------\n","0b605ed8":"Observation\n\n_______________________________________________________________________________________\n","311355cb":"Observation\n----------------------------\n"}}