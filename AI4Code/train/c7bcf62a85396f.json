{"cell_type":{"47f6819b":"code","21b55f92":"code","b5d62a5a":"code","67c954d1":"code","f2d1f0c0":"code","f836c364":"code","b2b49f0f":"code","142cce26":"code","2f4f7bd8":"code","06cddbdc":"code","d749f250":"code","5678789e":"code","3ecba242":"code","6fad6bd1":"code","7da19706":"code","69caf4af":"code","8ffc42bb":"code","8e06c914":"code","a36e59cd":"code","6558f833":"code","3c3ef968":"code","8da257fb":"code","c4ce84bd":"code","113bc0b1":"code","c27198b2":"code","0ab7dcad":"code","e4441c7f":"code","810a1945":"code","79691bbf":"code","0f482406":"code","4694d6a2":"code","84e6f6cc":"code","77a7b7f9":"code","fafa2921":"code","f77492fb":"code","df358d79":"code","609f3b15":"code","871222b0":"code","5684ea50":"code","6923f423":"code","313da065":"code","90efa6b7":"code","9f60ab7e":"code","a3f37e3b":"code","10550bcf":"code","17784bb5":"code","a924ab81":"code","fedc98c6":"code","0ac615e8":"code","4dbdd6af":"code","a6ccda37":"code","de67dff5":"code","6b787e31":"code","2a4b0434":"code","d4b4625f":"code","d8690826":"code","79b2dbc9":"code","dab60026":"code","0b126b1d":"code","03ac37f5":"code","30e3fa91":"code","12a05dd7":"code","4dbe8ee5":"code","0f7f6a78":"code","11090641":"code","b00ffda3":"code","6938dda8":"markdown","f34a3dd8":"markdown","fe2b4742":"markdown","d7260140":"markdown","660ab3df":"markdown","408eb3a3":"markdown","b74bd2dc":"markdown","4d1b441f":"markdown","3f637390":"markdown","d9df593b":"markdown","18f781ee":"markdown","4a3a3fbe":"markdown","967f2032":"markdown","8818e3c3":"markdown","29805363":"markdown","b4fff668":"markdown","738aef7d":"markdown","163da59b":"markdown","6c5e4c20":"markdown","45d7940b":"markdown","994d88b7":"markdown","9c3951ea":"markdown","88918bc2":"markdown","7b2f2546":"markdown","c8963969":"markdown","45940057":"markdown","3b4d4f5e":"markdown","ad3806c7":"markdown","5f3fef5f":"markdown","4a1e039c":"markdown"},"source":{"47f6819b":"import numpy as np\nimport pandas as pd\n\n\nimport seaborn as sns\nimport plotly_express as px\nimport matplotlib.pyplot as plt\n\nimport chardet\nimport fuzzywuzzy\nfrom scipy import stats\n# !pip install missingno\nimport missingno as mno\nfrom fuzzywuzzy import process\nfrom sklearn.impute import KNNImputer\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import StandardScaler\n\nimport xgboost as xg\nfrom sklearn.svm import SVR\nfrom sklearn.svm import LinearSVR\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.ensemble import StackingRegressor\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\n\nimport warnings\nnp.random.seed(0)\nwarnings.filterwarnings('ignore')","21b55f92":"train  = pd.read_csv(\"..\/input\/bigmart-sales-data\/Train.csv\") \ntest = pd.read_csv(\"..\/input\/bigmart-sales-data\/Test.csv\")","b5d62a5a":"train.head()","67c954d1":"train.shape","f2d1f0c0":"test.shape","f836c364":"train.info()","b2b49f0f":"test.info()","142cce26":"train.isnull().sum().sort_values()","2f4f7bd8":"test.isnull().sum().sort_values()","06cddbdc":"train.describe()","d749f250":"sns.distplot(train['Item_Outlet_Sales'])","5678789e":"# Let's check for skewness and kurtosis\nprint(\"Skewness \", train['Item_Outlet_Sales'].skew())\nprint(\"Kurtosis \", train['Item_Outlet_Sales'].kurt())","3ecba242":"# Scatter plot of item weight v\/s outlet sales\nsale_MRP = pd.concat([train['Item_Outlet_Sales'],train['Item_MRP']],axis=1)\npx.scatter(sale_MRP,x='Item_MRP',y='Item_Outlet_Sales')","6fad6bd1":"sns.regplot(x='Item_MRP',y='Item_Outlet_Sales',data=sale_MRP)","7da19706":"sale_weight = pd.concat([train['Item_Outlet_Sales'],train['Item_Weight']],axis=1)\npx.scatter(sale_weight,x='Item_Weight',y='Item_Outlet_Sales')","69caf4af":"sale_visibility = pd.concat([train['Item_Outlet_Sales'],train['Item_Visibility']],axis=1)\npx.scatter(sale_visibility,x='Item_Visibility',y='Item_Outlet_Sales')","8ffc42bb":"cat_var = [cname for cname in train if train[cname].dtype == 'object']\ncat_test = [cname for cname in test if test[cname].dtype == 'object']","8e06c914":"print(\"Categories in train data are\")\nfor j in cat_var:\n    col_train = train[j].unique()\n    print(j,'-',col_train)\nprint(\"*\"*60)\nprint(\"Categories in test data are\")\nfor i in cat_test:\n    col_test = test[i].unique()\n    print(i,'-',col_test)","a36e59cd":"train_df = train.copy(deep=True)\ntest_1 = test.copy(deep=True)","6558f833":"fat = train_df['Item_Fat_Content'].unique()\nfat.sort()\nfat","3c3ef968":"sns.countplot(train_df['Item_Fat_Content'])","8da257fb":"# Converting fat content to lower case\ntrain_df['Item_Fat_Content'] = train_df['Item_Fat_Content'].str.lower()\ntest_1['Item_Fat_Content'] = test_1['Item_Fat_Content'].str.lower()\n# removing trailing white spaces\ntrain_df['Item_Fat_Content'] = train_df['Item_Fat_Content'].str.strip()\ntest_1['Item_Fat_Content'] = test_1['Item_Fat_Content'].str.strip()","c4ce84bd":"fat = train_df['Item_Fat_Content'].unique()\nfat.sort()\nfat","113bc0b1":"# !pip install fuzzywuzzy","c27198b2":"matches_lf = fuzzywuzzy.process.extract(\"low fat\",fat , limit=2, scorer=fuzzywuzzy.fuzz.token_sort_ratio)\nmatches_reg = fuzzywuzzy.process.extract(\"regular\",fat , limit=2, scorer=fuzzywuzzy.fuzz.token_sort_ratio)\n# take a look at them\nprint(\"Low fat\",matches_lf)\nprint(\"\\nRegular\",matches_reg)","0ab7dcad":"# function to replace rows in the provided column of the provided dataframe\n# that match the provided string above the provided ratio with the provided string\ndef replace_matches_in_column(df, column, string_to_match, min_ratio = 0):\n    # get a list of unique strings\n    strings = df[column].unique()    \n    # get the top 10 closest matches to our input string\n    matches = fuzzywuzzy.process.extract(string_to_match, strings, \n                                         limit=2, scorer=fuzzywuzzy.fuzz.token_sort_ratio)\n    # only get matches with a ratio > 90\n    close_matches = [matches[0] for matches in matches if matches[1] >= min_ratio]\n    # get the rows of all the close matches in our dataframe\n    rows_with_matches = df[column].isin(close_matches)\n    # replace all rows with close matches with the input matches \n    df.loc[rows_with_matches, column] = string_to_match  \n    # let us know the function's done\n    print(\"All Set\ud83d\udc4d\")","e4441c7f":"# use the function we just wrote to replace close matches to \"south korea\" with \"south korea\"\nreplace_matches_in_column(df=train_df, column='Item_Fat_Content', string_to_match=\"low fat\")\nreplace_matches_in_column(df=train_df, column='Item_Fat_Content', string_to_match=\"regular\")\nreplace_matches_in_column(df=test_1, column='Item_Fat_Content', string_to_match=\"low fat\")\nreplace_matches_in_column(df=test_1, column='Item_Fat_Content', string_to_match=\"regular\")","810a1945":"sns.countplot(train_df['Item_Fat_Content'])","79691bbf":"fat = train_df['Item_Fat_Content'].unique()\nfat.sort()\nfat","0f482406":"#Determine average visibility of a product\nvisibility_avg = train_df.pivot_table(values='Item_Visibility', index='Item_Identifier')\n\n#Impute 0 values with mean visibility of that product:\nmissing_values = (train_df['Item_Visibility'] == 0)\n\nprint ('Number of 0 values initially: %d'%sum(missing_values))\ntrain_df.loc[missing_values,'Item_Visibility'] = train_df.loc[missing_values,'Item_Identifier'].apply(lambda x: visibility_avg.at[x, 'Item_Visibility'])\nprint ('Number of 0 values after modification: %d'%sum(train_df['Item_Visibility'] == 0))","4694d6a2":"sale_type = pd.concat([train_df['Item_Outlet_Sales'],train_df['Item_Type']],axis=1)\npx.box(sale_type,x='Item_Type',y='Item_Outlet_Sales')","84e6f6cc":"train_df['Outlet_Identifier'].value_counts()","77a7b7f9":"sale_ident = pd.concat([train_df['Item_Outlet_Sales'],train_df['Outlet_Identifier']],axis=1)\npx.box(sale_ident,x='Outlet_Identifier',y='Item_Outlet_Sales')","fafa2921":"train_df['Outlet_Type'].value_counts()","f77492fb":"sale_out_type = pd.concat([train_df['Item_Outlet_Sales'],train_df['Outlet_Type']],axis=1)\npx.box(sale_out_type,x='Outlet_Type',y='Item_Outlet_Sales')","df358d79":"train_df['Outlet_Size'].value_counts()","609f3b15":"sale_out_size = pd.concat([train_df['Item_Outlet_Sales'],train_df['Outlet_Size']],axis=1)\npx.box(sale_out_size,x='Outlet_Size',y='Item_Outlet_Sales')","871222b0":"sale_year = pd.concat([train_df['Item_Outlet_Sales'],train_df['Outlet_Establishment_Year']],axis=1)\npx.box(sale_year,x='Outlet_Establishment_Year',y='Item_Outlet_Sales')","5684ea50":"sns.distplot(train_df['Item_Visibility'])","6923f423":"# Let's check for correlation matrix\ncorr_mat = train_df.corr()\nsns.heatmap(corr_mat,annot=True)","313da065":"sns.pairplot(train_df)","90efa6b7":"train_df['Outlet_Size'] = train_df.Outlet_Size.map({'Small':0,'Medium':1,'High':2})\ntest_1['Outlet_Size'] = test_1.Outlet_Size.map({'Small':0,'Medium':1,'High':2})","9f60ab7e":"total = train_df.isnull().sum().sort_values(ascending=False)\npercent = (train_df.isnull().sum()\/train_df.isnull().count()).sort_values(ascending = False)\nmissing_data = pd.concat([total,percent],axis=1,keys = ['Total','Percent'])\nmissing_data","a3f37e3b":"# Let's check if there is any trend in missing data\n","10550bcf":"mno.bar(train_df)","17784bb5":"mno.matrix(train_df)","a924ab81":"mno.heatmap(train_df)","fedc98c6":"print(\"Item Weight\",train_df['Item_Weight'][20:30])\nprint(\"Outlet Size\",train_df['Outlet_Size'][50:60])","0ac615e8":"imputer = KNNImputer(n_neighbors=2)\ntrain_df['Outlet_Size'] = imputer.fit_transform(train_df[['Outlet_Size']])\ntrain_df['Item_Weight'] = imputer.fit_transform(train_df[['Item_Weight']])\ntest_1['Outlet_Size'] = imputer.fit_transform(test_1[['Outlet_Size']])\ntest_1['Item_Weight'] = imputer.fit_transform(test_1[['Item_Weight']])\ntrain_df['Outlet_Size'] = round(train_df['Outlet_Size'],0)\ntest_1['Outlet_Size'] = round(test_1['Outlet_Size'],0)","4dbdd6af":"print(\"Item Weight\",train_df['Item_Weight'][20:30])\nprint(\"Outlet Size\",train_df['Outlet_Size'][50:60])","a6ccda37":"print(\"Categories in train data are\")\nfor j in cat_var:\n    col_train = train_df[j].unique()\n    print(j,col_train)","de67dff5":"train_df['Item_Type_Combined'] = train_df['Item_Identifier'].apply(lambda x: x[0:2])\n#Rename them to more intuitive categories:\ntrain_df['Item_Type_Combined'] = train_df['Item_Type_Combined'].map({'FD':'Food',\n                                                             'NC':\"Non_consumable\",\n                                                             'DR':\"Daily\"})\ntrain_df['Item_Type_Combined'].value_counts()\ntest_1['Item_Type_Combined'] = test_1['Item_Identifier'].apply(lambda x: x[0:2])\n#Rename them to more intuitive categories:\ntest_1['Item_Type_Combined'] = test_1['Item_Type_Combined'].map({'FD':'Food',\n                                                             'NC':\"Non_consumable\",\n                                                             'DR':\"Daily\"})\ntest_1['Item_Type_Combined'].value_counts()","6b787e31":"features = ['Item_Weight', 'Item_Fat_Content', 'Item_Visibility',\n        'Item_MRP', 'Outlet_Identifier',\n       'Outlet_Establishment_Year', 'Outlet_Size', 'Outlet_Location_Type',\n       'Outlet_Type', 'Item_Type_Combined']\nlabel = ['Item_Outlet_Sales']\nx=train_df[features]\ny=train_df[label]\ntest_model = test_1[features]","2a4b0434":"train_df[features].head()","d4b4625f":"x_train,x_test,y_train,y_test = train_test_split(x,y,random_state=45,test_size=0.2)","d8690826":"x.info()","79b2dbc9":"object_cols = [cname for cname in x if x[cname].dtype == 'object']\nnum_X_train = [cname for cname in x if x[cname].dtype in ['int64','float']]","dab60026":"\nohe = OneHotEncoder(handle_unknown = 'ignore', sparse=False)\nOH_X_train_1 = pd.DataFrame(ohe.fit_transform(x_train[object_cols])) # Your code here\nOH_X_valid_1 = pd.DataFrame(ohe.transform(x_test[object_cols])) # Your code here\n# ohe.get_feature_names([[object_cols], object_cols.index])\nOH_X_train_1.index = x_train[object_cols].index\nOH_X_valid_1.index = x_test[object_cols].index\nnum_X_train = x_train.drop(object_cols,axis =1)\nnum_X_valid = x_test.drop(object_cols,axis =1)\noh_x_train = pd.concat([num_X_train, OH_X_train_1], axis=1)\noh_x_valid = pd.concat([num_X_valid, OH_X_valid_1],axis=1)\n# On Test Data\ntest_model_oh = pd.DataFrame(ohe.transform(test_model[object_cols]))\ntest_model_oh.index = test_model[object_cols].index\nnum_X_test = test_model.drop(object_cols,axis =1)\ntest_final = pd.concat([num_X_test, test_model_oh], axis=1)","0b126b1d":"# function for comparing different approaches\nmodel1 = RandomForestRegressor(n_estimators=100, random_state=0)\nmodel1.fit(oh_x_train, y_train)\npred_rf = model1.predict(oh_x_valid)\nrand_for = mean_squared_error(y_test, pred_rf,squared=False)\nprint(rand_for)\npred1 = model1.predict(test_final)","03ac37f5":"model2 = LinearRegression()\nmodel2.fit(oh_x_train,y_train)\npred_lin = model2.predict(oh_x_valid)\nlin_reg = mean_squared_error(y_test, pred_lin,squared=False)\nprint(lin_reg)\npred2 = model2.predict(test_final)\npred2 = pred2.reshape(-1)","30e3fa91":"model_knn = KNeighborsRegressor()\nmodel_knn.fit(oh_x_train,y_train)\npred_knn = model_knn.predict(oh_x_valid)\nknn = mean_squared_error(y_test,pred_knn,squared=False)\nprint(knn)\ntest_pred = model_knn.predict(test_final)\ntest_pred = test_pred.reshape(-1)","12a05dd7":"model_dec = DecisionTreeRegressor()\nmodel_dec.fit(oh_x_train,y_train)\npred_dec = model_dec.predict(oh_x_valid)\ndec_tree = mean_squared_error(y_test,pred_dec,squared=False)\nprint(dec_tree)\npred_test_dec = model_dec.predict(test_final)\npred_test_dec = pred_test_dec.reshape(-1)","4dbe8ee5":"model_svm = LinearSVR()\nmodel_svm.fit(oh_x_train,y_train)\npred_svm = model_svm.predict(oh_x_valid)\nsvm = mean_squared_error(y_test,pred_svm,squared=False)\nprint(svm)\npred_test_svm = model_svm.predict(test_final)\npred_test_svm = pred_test_svm.reshape(-1)","0f7f6a78":"estimators = [('lr', RidgeCV()),('svr', LinearSVR(random_state=42))]\nstack_reg = StackingRegressor(estimators=estimators,final_estimator=RandomForestRegressor(n_estimators=10,random_state=42))   \nstack_reg.fit(oh_x_train,y_train)\npred_stack = stack_reg.predict(oh_x_valid)\nstack_regressor = mean_squared_error(y_test,pred_stack,squared=False)\nprint(stack_regressor)\nstack_ensemble_test = stack_reg.predict(test_final)\nstack_ensemble_test = stack_ensemble_test.reshape(-1)","11090641":"xgb_r = xg.XGBRegressor(objective ='reg:linear',\n                  n_estimators = 10, seed = 123)\n  \n# Fitting the model\nxgb_r.fit(oh_x_train,y_train)\n  \n# Predict the model\npred_xgb = xgb_r.predict(oh_x_valid)\n  \n# RMSE Computation\nrmse_xgboost = np.sqrt(mean_squared_error(y_test, pred_xgb))\nprint(\"RMSE : % f\" %(rmse_xgboost))\nxbg_test = xgb_r.predict(test_final)\nxbg_test = xbg_test.reshape(-1)","b00ffda3":"result = pd.DataFrame({'Model' : ['LINEAR REGRESSION','RANDOM FOREST','DECISION TREE','SVM','KNN','XGBoost','Stacking Regressor'],\n                       'Score' : [lin_reg,rand_for,dec_tree,svm,knn,rmse_xgboost,stack_regressor]})\nresult_df = result.sort_values(by='Score',ascending=True)\nresult_df = result_df.set_index('Score')\nresult_df","6938dda8":"From above it is clear that both test data and train data contains same categorical values.\nBut we can observe that in Item Fat Content column, for single category(low fat) there is three entries with different names(Low Fat,LF, and low fat). Similarly with regular, there are two different category names which means the same. Hence, ww will consider it as an inconsistent data entry. ","f34a3dd8":"![](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBw0PDw8ODg8PDg8QEA8QFg8VDxAPDw0NFRUWFxUVFRUYHSggGBolGxUVITEhJSkuLi4vFx8zODMtNygtLisBCgoKDg0OGxAQGy0lICYvLy8tKystLTA1LS0tMi0vKzAtKysvLTUvLS0tLS0tLS0tKy0tLS0rLy0vLSstKy0rLf\/AABEIAI4BYgMBIgACEQEDEQH\/xAAbAAEAAgMBAQAAAAAAAAAAAAAABQYBBAcDAv\/EAEkQAAIBAwEEBgUHCAkDBQAAAAECAAMEERIFBiExE0FRYYGRIjI0cbEHFEJyc6HRI1JTg5Kys8EVJDVUYnSCk\/DS4fEWM0Njov\/EABoBAQACAwEAAAAAAAAAAAAAAAADBQECBAb\/xAA7EQABAwIDBQUGBAUFAQAAAAABAAIRAyEEEjEFQVFxkWGBobHBExQiMtHwBjNy4RU0grLxIzVSYsJC\/9oADAMBAAIRAxEAPwCUiInhF7pIiIRIiIRIiIRIiIRIiZhFiJmIRYiIhEiIhEiJmEWImZiESIiESIiESIiESIiESIiESIiESIiESIiESIiESIiESIiESIiESIiESIiESIiYJA1WQJSIiYzN4hZyngkRgxGYcUylZnvY2Nau2ikhc9fUFHaT1TwRSSFHEkgAdpPATp2y7BLemtNQM4yzdbv1kywwOD95eZMAa\/QKvx+M92YIEuOn1KqqbmXGMmpSB7PSP34kVtLY1e341E9HlrX0kz7+rxnTZ5VqSupRwGVgQQeRBlvV2RQLYZIPOevYqintesHS+COnSFyiYm7tmy+b16lPmFOVP+AjI+448JpgdXXPNvaWEtdqLdF6Rjg8BzdCkT3FjXPKlVP6t\/wihZVGqJSKlWdlUZUjiTjPGZyO4FMzeKWljWrHFKm1THPA4D3nkJuHdy+H\/wAJ\/aQ\/znQLO1p0UWnTGFUY956ye+elc4Rj2Kx+6X7Ni08vxuM9kR4grz79svzfA0R2z9VyiJjqiedGi9ERBhIiJlYSIiESIiESIiESIiESIiESIiESImYRYiZmIRIiIRIiIRIiIRIiIRIiIRZnS9gey2\/2azmk6Xu\/7Lb\/AGay42L+a7l6hVG2fyW8\/QqQx7ox7pmQG195Ft6pomkzkKragQBxz+Ev61dlFuZ5gKgpUX1XZWCSp7HunlUoowwyKw7CoI++VylvnRJGqlUVe0FWx4Sy0nVlDKcqwBB6iDxBmlLE0q8hjp4\/4K2rYarRgvEcPsKBvt3aWtK9BQjo6PpzhHAIOP8ACeHuliiRFW+qpcNSNKpVplUfUi5NPVkYI6xlSe2YDadAkgRmO4b73gffiVvmq4gZSZyjed1t5\/z4BS8T4RwRnjjvBB8jxkHt7a9WlTPRUag6jWZMJTBOMjPEnwxN6tZlJhe7RR0aD6zwxv399eCXewFr3LVq3FAECoDgtgcSx6hkngJL29rSpDFJEQf4VAz7+2eych18Bx7Z9RToMY4uAudTv6pUr1KjQ1xsLAbrdi+WYDmQPHE+py\/bdR3uaxfORUcAH6KqSAB2DEt+5lZ3tvSJIWoyqTx9DAOPAkzjw20vbVzSyxE3nh2Qu3E7ONGiKuadJEceBm\/QKauUdkYIwRyDpYjUFbtxOfXe1L+m70qlaoGBKsvV4cOWPjOkSib8qouKZHNqQz4MwB\/52SLazHCmKjXERwJEzy8+FlvslzTUNNzQZE3A3dvpxuq9MTMYnmSQNSvTQSsTMT5d1X1mC+\/AiVhfUxMKQRkEEdoORMwiRMGYSqjcFZWPYGBMSFlfUTMTKwkxMzzesg5uo97ATAM2RekxMI6t6rBvcQZ9RImFlJiZjExmGkpCTyua6Uqb1HOERWdjjOFAyeE+3YKCWIAHMk4A8ZEbx3KGxuXRlqKaZTUrBhkkLzHvk9Cn7So1m4uA6kDr1UdV+VhPAE9Ate13vsqtWnRp9KzVGCA6NKgntyeUsM5But7dafar8Z1\/EtNuYKhgqrGUyYIm57SOzcuDZWKq4qm574sYsOwc1iIiUyskiIhEiIhEiIhEiIhFmdL3f9lt\/s1nNJ0vd\/2W3+zWXGxfzXcvUKo2z+S3n6FSMp28uxrqvcdJSTWmhBnWg4jOeBMuMS7xOHbiGZHEgdkeoKpMNiXYd+doB3Xn0IXO6O616SAUVAfpF0IA7cAkmXy1txTppTByERUz1nAxmbESPC4Gnh5ySSeP7AKTFY2piAA6ABwn1JWJB7DvhXuLt14oOhRT2quvj4kkzy3ktb6ojCiyGn101BWoy9hJJ1e4Y8ZpbhDHzkHgQaQxyIPp8JFVxDjiqdLKQLmePwnT74d81PDtGEqVcwJgCBuuDft+7q3yF3w9jq++n++smpFbw2xrUDSHAu9Fc9gNRcnwGZ04tpdQe0b2nyXLhCBXpk\/8h5qL3X230irQcOXUDDhSwKDlqx6p7zwMtM1LCxpUEFOkoA6z9Jj2sesxf9L0T9Bp6XHo55Zz+GYoNqUqQFQ5iOA8O1K7qdWtNMZQePn2DyWvd7Etara3pAv1kFlLe\/SRmbtvQSmoSmoRV5KBgCVMnbg\/O8qBmtWqbZPA9P8A6VC\/eonCMdTaS4UHgnfkAnmV3HA1HANNdhA0GYmOQVwv7+jQXXVYKOofSY9gHXOc7X2g1zWaoRgcAq\/moOQ\/n4xeWd0M1K1Ot3u4f72M1JV4\/HVK\/wABGUaxv5n0VpgcDToS8HMTad3dqvip6p9x+E4ot5WwPyr\/ALTfjO11PVP1T8Jw5OQ8ZffhXStzZ\/6VZ+ICR7OP+3or3tbeg0LW1oUG\/Lm2t2dz6RpA017fpHnx5eMplyK7\/laoqPnj0hDMD\/qMum4mwqbJ88rKKhLEU1PFRpOC5B5nIwOzEu54jBGR2dWJqdqUNmVDRoU8zp+N05ZJ1AgGw03R2mSt\/cauPYKlV+Uf\/LYmBuOo1149oXFrC\/rW7h6DvTYdh4HuI5Ee+dIob00fmPztwNQPRmmDxa4x6o7iOPcJSt8dnrb3jKgCoyq4Uck1ZyB3ZB855btbNN3cJRJIpjLvgn1FxnHeeAz3y0x2HwuPw7MVUkAAOJi5ZEltvTQi2pmvwlbEYSs7DsuT8IG4O3H779F57T2tdXjEuxZf0ShtCD6o+J4yMXgcjIIPMcCD\/KdutbenSQU6SLTQclUYErHygbMpvbm4CgVabICwHF0ZguD28SD59s48B+IKb6rcO2lkaTAg6TYSIAuY0J43uunF7IeKbqzqmZwEmR5GfSOSj9zt56pqJa3Llw50pUY5ZX6lJ6weXHjkjwtW3dr07OiarjUxOlEzgu\/ZnqHWTORW7lXRhwIZSD2EEETqu8O71K9KF6lRNAYALpK+ljJII7hOXbGDwlHGUqlT4WOnMAN7Y3DTNIBjde5up9m4rEVMM9rLubEEnjx5QVz6925f3j6NbHUcLRp6lU9wUcW8cz0p7n7RYZ6AD61SmCfDMvG7e7SWTVG1mq7gKGKaSqdY5nmceQk67qvrEL7yBMYn8Rig72WBa0NHEETyaMpEaGZJMnnmjsY1W58U5xdzFu+\/guN3uy7q1INWk9Enk3DBPcynGfGWTdLeqoKiW9y5qI5Cq7cXRzwGT1qTw48sy07yVKFSzuVL02xSdgNak61GVx35AnJlcqQw5qwPiOMtcHVbtjDObiGAEGJ4cCJuDxE7uBIXBiWHZtdrqLpBvHgQePSy6N8orstrS0syk1wMgkHGh+yV\/ci9K3LvVqP0aW9V2yzMABpycSe+Uk\/1Wj\/mB\/Dec8RmGQCfSGkgfSGQceYE59i0fedleyNs2YdSp9qVvYY8P1gAx1Unt7bda8qFmJWmD6FPPoovVkdbd80Qtbos4qdFnGcN0erszyzynRdg7o29KmrXCCrWIBIbjTp5+iF5HHaZ87729Ols90pIlNelpnSqhVyT2Cb0tt4YVmYTDM+GQ0HQRpI48zE6nitH7LrGm7EVnXgmN+kwfpuXOKYYsAgYtngBktnuxxzJfZtC\/wCmo5S5x0tLOVq49YZzmeO6\/t1r9qs6\/N9r7XdgntphgdImZjeRwK12Zs8YhpeXEQdByBQzEzMTwIECF61IiJlYSIiESIiESIiEWZ0vd\/2W3+zWc0nS93\/Zbf7NZcbF\/Ndy9QqjbP5LefoVIyo7ybcubev0dIqF0I2CgY5Oc8fCW6Vbb+71a5rdKj01BRFwxYHIz2A9stseKxpf6M5pGnDeqrZ5oir\/AK0RG\/jZRKb23gOT0bDsKYB8jLlsm9FxRSsBp1A5XnpYHBHmDKom5lxn0qtEDtGskeGB8ZbdnWaW9JKKZIQczzYk5JPvJM5tnjFhx9vMRvM3+9V0bRdhC0exjNO4bu3wW3NOjZolWrVXgaoQMO1l1el7yCPKbk8xUXUUyNQAbHWFOQD9x8paOAME7tPL1VUHEAgb9fA+i9JF7w3Jo0DVHEpUpNjtGtcjyzJSeNeglQaXUMuQcEZGQcj7xNarXOYWtMEgwVvSeGVGucJAIkL5srpK1NaqZ0sMjIKnyM2Ila3n2zcWzItOmullzrYEgtnGkcRxHPxmtas2hTz1Dzgei2o0HV6mSmNeJ9fuVZYlDG+N3+ZRP+lv+qelPfKvkBqVI9w1gnuHE8Zw\/wAYwvE9Pou47HxOgAPf9YV4lW3o2EhptXoqEdAWYAYDp1nHaOffLMrZAOCMgHHWJitp0tq9XSc\/VxxndiKLazCx3+O0Lhw9d9F4e3\/I4LklX1W+qfhOHLyncavqt7j8Jw5OQkH4UuK39H\/tWP4isaY\/V6Lru6gAsrXH6MHxJJMlpFbrew2v2SyVnmcX\/M1f1u\/uKvqH5TOQ8gua\/KH7Yv2CfvPPX5Nh\/Wqx\/wDoP79OeXyie2L9gn7zz2+TX2qt9g379Oewf\/sf9A8wvNt\/3b+o+RXRZAb9f2fcfqf4qSekDvz\/AGfcfqf4qTyez\/5yj+tn9wXocZ\/LVP0u\/tK5bT9ZfePjOs7ybep2SAka6r50U84zjmSeoCcmp+svvHxlg39qs1\/UU8kWko+rpDfFjPa7RwTMXi6DKnygVHEcYNMR1N+xeWwOKdhsPVczUloHeHegWvebxbQuW0io66jgU6WUBPYAvpN4kzbttyr+r6VTo6Wf0j5fxCg\/fN\/5NaNMvcVDg1EWmB2qrFtRHkBL\/KzaO13YCqcNhGNaBEmOImwEDQ3JmTMruwWzhi6YrYhxdMwJ7Y7eG6Fzi+3Hq0aNWu1xTPRKX0hGycDOAcypNyPv\/nOq77bQFGzqKSNdcdEq9ZB9Y+4D4icqbkffLfYOLxOKpGrXM\/FAsBYROnbI5gqv2th6NCoGUhFr6nlr2eELo3ykey0f8wv8N5Tt16Sve2yNxHSKfeFyw+8S4\/KR7LR\/zC\/w3lS3Q9vtvrn9xpX7GJbsdxHCp5Fdu0xO0WA\/9fNdblb+UD2FvtKXxlklb+UD2F\/r0vjPMbL\/AJ2j+tvmFe47+WqfpPkqJuv7dafarOvzj27dQLeWxPAdMgz72x\/Odhlx+KPz6f6fUqs2D+S\/9XoFiJmYnmVeJERCJERCJERCJERCLM6Xu\/7Lb\/Ziczm\/R2zd01VErMqqMAYGAPKd2AxbcM8ucCZEWjj2kLhx+FdiGBrSBBm\/JdOic1\/p++\/Tv5LH9P336d\/JZa\/xqj\/xd4fVVf8ABqv\/ACb4\/RdKic0\/9QX36d\/JZ8vtq8bgbir4Np+Efxqjua7w+qDYtXe5vj9F0HaG0KVuuuqwUdQ4amPYB1yE3WvmuK91Vbhq6LC\/moC+BKU7FjliWJ6ySSfEz3s7+tQ1GjUNPVjOMcccuY7zON21S+s1xENE2GpsRvjj9m6627KDKLmNMudFzoLg+i6rNPad+tvT6VwSoZQccwCcZlA\/p++\/Tv5LPK52tdVVKVarOpwdJAxkcuQnVU2zTLTkaZ3TH1XMzY7w4ZnAjfE6dF0i0u6VVdVJ1cdx5e8dU9aiBhhgCOwjInJ0dlOVJU9oJB8xN6nty8HKvU8Wz8czWntpsfGwz2H6xCy\/Ypn4H9QfSfJdBbZtsedvRP6pPwmadhbocrRpIR1imoI8cSiDeW+\/Tf8A4p\/9M8n2\/ennXfwAX4CbfxbDi4Yejfqh2XiSINQRzd9F0h2AGSQAOs8AJU95t4E0NQoHUWGGccVC9YU9ZPbKvXu61T\/3Kjv9Z2b4zynLitrOqNLKYgHfv\/bx7l04bZLKbg95mNBu++nevir6rfVPwnDV5DwncyJo\/wBC2X90tv8AYp\/hN9j7VZgc+ZpObLpG6ePNb7S2e7F5YdETu4x9F47rew2v2SyVnxRpIihEVUVRgKAAqjuAnpKms8VKrnjeSepJ9VYU25WBvAAdFzT5RPbF+wT9556\/Jr7TW+wP76S93Ozbeo2upQo1WwBqamrHHZkiZtdn29IlqVGlSYjBKU1QleeMgS8O2aZ2f7pkM5Q2bRbx3KrGzXDGe85hEzHdGq2ZA78\/2fcfqf4qSfnjcUKdRSlRFqIcZVlDKcHIyD3ymw1UUa7KpE5XNMciD6Kyr0zUpOYN4I6iFxSl6y\/WHxl93+2G9Qi6oqWKALUQDJ0jOHA6+eD4d8sg2JZf3S3\/ANin+EkJeYvb5fXpVqLSMmYEHeHZbW5dxg7lVYfY4ZSfTqOnNFwNIn6ri2zr+tb1BVovoccM8CGU8wR1iWBt\/b3GOjtwfztD\/DVLtebAsaxLVLemSeJIBRie8rjM+bTd2wpEMlvT1DiC2ahB7tROJ0V9tbOxEOrUCXD9PnMxzHcoaOy8ZR+GnVAb3+REeKqezdkXV+ta8uyzfkagpBuGpyp0lVH0QePeZSyeE7rI87Fsv7rbf7FP8Jpg\/wAR+ze41GW+HK1sQ0CbbvIcgIA3xOxRUa0Nfe8kiS4mLqvfKDUD2Nu45NVRx7jScyq7oe3231z+406jVsLd0Wk9Gm9NMaUKKUTAwNIPAcJ8Udk2qMHS3oI68Qy0kVlPcQJzYTa9LD4J2GykznAMjR0x0++KnxGzn1sS2vmFsto4XPVbsjd4bA3NrWorzZQV6hrUhlHiRjxklEo6VR1J4e3UEEcxcK0ewPaWu0IjquH1qbIxR1KMpwVIwynvEmKW9u0UXSK5YDkWRGYeJGT4zpd9sm2uONailQ4xqIw4H1hxmnR3X2cnFban4s9QeTEz1p\/EOCrNHvFAuI3Qxw7YLj6T22Xnm7GxFNx9jVgHfcHoLHqFLqeAPcJ9TAieOGi9IkREysJERCJERCJERCJNTaG0re3ANaqlPOcAn0mxzwo4mbcqu39kXfztL23SlcaUC9C+MDGRwyQOsnnkGdWCpUqtXLVflEGLgSdwzGzZ4mw3qDE1KlNk02yZHEwN5gXMcBqpnZ+3LO4bRQrK7YJ04dWIHPAYCetLadB672qsTWpprZdLYVfR+ljH0hInd2\/oXNapqtRbXdFSrcB6hOCMgDrA5jr4SD2fTrVl2lfU67UFLVSCqgs6oC6jVzAwVHDjyliNnUs9QOzMDQ35iHfE8jLdjTmaRJBAEnUgCVy+9VMrC2HSToCLNF7ONjMA6q\/xKfbbdr0NlLc1D0lVnZELcdXpEAt24Cse\/Amttl76yo290burUrO6hqRwaJypbAUDux49UjZseo6r7MvaCXljdfic3XQWA4netnbQYGZ8pjKHHSwOnM9gV5iVnee8uPnFla29Q0XqsSxABwnDGR1jg58J4WNW6pbT+btcvc02pF21DGjgSMAcF4gcsetIKez3PoirnAJY54becrTBuBHK91I7FhtQsymzg2bRJE8Z52srbN2z2NdVl1UqJZfzsqoPuLEZmkJbqV\/bXVKlSNapbVEVVCglabMABz5EcOHEGQ4SjTqOIe6OAkCTzNvBbYqrUpgFgkbzBMDkL9FWb3Z9egQK1MpqzjJBBxzwQe8TXliqbPr\/ADy3trioa6j0wSSc0uJIOeP0COZkpZU7OpcXNAWtILTBzUIz6Q4EAY9H6XEdknbgC98A5fiygOuZyyflt3qA44MYC4ZvhzEt0iYHzX7lSYlqt1tatlcVBbqi09So59OozYGkliM8yOHKa+wrVlpGo9G10u2VqXDaVK45KvHsPGRjBEuaA4EOEyAbeHQ2UwxYh0tIIOWCRc62v4CSq7PWtaVUVHdGVXGVYjAYYzwlj3itKFOraFKNPWx9KmvCm\/FQBy5EkjOJ672X1NSLYUUcikNLHnRLcMKPco+6bOwbaYqZ3fLAsDcm\/D7OtlG3GGoaeRvzSTcWAtx4+Gl1Uol0GzaFsETFm7kAu1eoAxH+BSDgc\/Lrke1hbvtCmlHQ1IgOwVgyAjUSOHVwXh3zLtnVGxJEkgRwnzjestx7HSQDEEz2DyndOqrcxJzblzaA16NK2C1A+npM8F0EA6V6s4PnITE5K1MU35MwPKfWPpddNJ5e3MWkc\/2lJqWO0KFwGahUWoFOCRnAPZPjbNz0NvXqDmtJyPrkYX7yJF7i23R2NM4wajPUPnpX7lEmZh2+6vrONw4NA7YJdPIARzUbqrvbtpgWgk+AHmVJ7U2rRtQhq6vyjaFCrqJb3f8AOc35XNp31Y7StbWk7KgQ1agGMMPSIB\/YH7U8qu1KlDaNcVqrfNhbGsE4YUgLy78hvOTe4FzG5fmyGpqTIzQABFjqdTIv8Oij95h5zaZg3cIOWSZm47hHarREqljtK5p2lxtCuxOv0qVAn8nTQthPMkeA75ENe7QektZG2k1w2GCrbH5mUJ6sc+HXjj98lZsh7nuaXtADsk3jNEkaaN3uNuErU49oAIaSYzRaY3W4ncOsLoU9rOzq1mKUkLsBqIGBheAzx9807Z2amjONLlFLL+a5AyPOW\/dFVp0Lm4c6V4JqxnSAMnh1818pxYbD+1rCm7S8kRoPDWylxNc0qJe0XtA7Ty8lA3WybqkuupRdV\/O4ED3nqmpLlVqkWFY0ar3IOpWeoW1KpAB0gjsP357p5WGzKVGhTqsLZqtUK39YfSioRnCjByeI851P2eHOHszbLJJvygixns6qBmOIBzi+bKALbpuHad6qU9a9pVphWqIyBxlSRjUOHLzHnJ\/a1va\/OLToVpO1RgKlKm4alqyoHLkOJ989t7L+mG+b9CjlUXDk+lTyQSqjHYB5yJ2EaxtRz3\/KQBrckTw4dDc6LcYpz302tYfiBJmLAGOPHqNFWmtKopiqUYU2OA+PRY8eXkfKeUuO8t6lCnSoGhTbNMtpPq0WxgFRjjxLeU+bTZdGhRpkraNWqKrH5w+lQMA4UYOcZAzJH7PHtCxjvlAzWNj++4brydy0p46WBzmxmJyi1xx1tH+JVQiWW9sbZ722Sj0bBsF0RgyALxI4csgHhPHbtxZo1ejStgHGE6TPooRjOlfPjIX4PIHFzxYxvuYm0esR3KVmLzFoDTJE7rCYvJ8pVfiZmJxrrSIiESIiESIiESIiEWZXn3bYVKlSje3VHpHaoyBgV1scnA4dssEzJ6GJq0J9mYnWwM9zgQo6lFlSMw05jyIUTs3YVKgtUI9RqtYEPXdg9Qnjx7Osn4zzo7vUktGs1dwjkkv6Os5YE9WOQx7pNRN\/fcQTmLzMh27Vvynu3DQcFqMNSAjKNCO469d6irjYVCpaJZNq0IqgMMBwy\/S5Yzz8zNa13bUVKVS4r1rrocdGr4CJjGDgczwHlJ2ZmW47ENaWteYJJOmpsYMSJ35SJWDhaRIJbpHhpzjdOiqVzs+vc7TqPmtbpQohadcJwZ8DIBYYPrvy7JMbH2JTtmqVS71q9X1qzkFiOwdg4DyHYJKxN620KtRgpCzQ1rYEXDeJiYJvExO5a08JTa4vNzJMnieA0sLTrG9fdCsabo4AJRlYA8QSDkZ7uEnG3mQnWbOgavPpNIzq7eWfvkBE56WJq0hDDA7j5hSVKFOoZeJ7yPIhStHb9YXBuXVajlCgByFRe77\/ADM+LXbVSmLgaVLXGrU+TkZ1cv2jI2JkYqtM5jvPXXqOm5Y93pRGUbvC46Le\/pV\/mvzQKoXVqLZOpjnP4eU203hIpU6T29Gr0WkKzZKgDgPR7cf+JDRDcTVbo7cG7tBoLjd1Q4emdRvnfqdTr+3YpK921Uq16VwVQNT04XiV9Fi3HzmdsbWFzj8glN8gmoMsWABAGccBx+4SMiHYmq4OBd81zpfw8kbh6bS0gfLYa28fNTh3j1qor29Gs6DAds5x3jHGa1ntt6Vd64p0yzrp08VRF4cFA7lAkZE297rEhxdcX0GunC9uMrAwtINLQ2xtEmI4RNu6F629yUqrWIDsripg8mYHPHxnptS\/e4qtVcBSQowM4AAx\/wA981okPtHZMk2mY7eKk9m3Nni8RPYtHbGzluqLUHZkVipJXGfROQOPeBIyz3Z6NqZW9vSlMqRS6XFMqp9UgfR4YxLDMSanjK9On7Jrvh4QOziDwC0dh6bn5yL6TdRtHZKLd1LzW7O6aNJxoRfR5cM\/R+8zX21u3Qu6yVqrVBpVVKrgK6hicHhnrI4SbiZZja9N4qMeQ4ANB4AaDT9+2bo\/DUntLHNBBMx26z1WteWdKtSag6\/k2XTpHDA6sdmMDykTb7uMoWn89uTQUjFLKrlQfVLAZ09WJPxNaOKq0m5GOtMxAN9JEgwYtIgrL6DHmXC\/eLcLRI7DZJL7O2+1Cj0HQ0qiZJOrJ1EnPEcuzykREipVX0jLDB03ad62qUmVBDxO9Su0dvVq1PoQtOjT4egi4B45492eyfdvt8imtGtRp11T1dWQygcuOD7pDxJfeq2cvzXiN2nCIiO5R+7UsuUNtM2nXjMzPbK36m1WNenXWnTp9Hp001GEwCT+PGfe1triuVYUKdJwwYuDqZyBgZ4DhwkbE194qQWzYmTpr0t3QtvYU8wdFxYa\/W\/fKltr7bFyo1UKa1MAdKCS2kHOBkcBmfdLeD8mlOtQpVxTGFZidQHLjwOf+0hpib+91sxfmudbC\/MRC0GFohoYG2GlzbkZlS1HbbLcdOKVMEJoWmAVRF7sePnIy4rGo7uebszH3k5PxnzEjfWe8ZXG0z3lSNpMacwF4juGiTERIlIkREIkREIkREIkREIkREIkREIkREIkREIkREIkREIkREIkREIkREIkREIkREIkREIkREIkREIkREIkREIkREIkREIkREIkREIkREIv\/9k=)","fe2b4742":"# Dealing with Inconsistent Data Entries","d7260140":"# Descriptive Statistics","660ab3df":"In both training and testing data, only column item weight and outlet size has null values.","408eb3a3":"#### Stacking Regressor","b74bd2dc":"#### KNearest Neighbors","4d1b441f":"# CONTENT\n\n1) DATA DESCRIPTION\n\n2) LOADING REQUIRED LIBRARIES AND DATA\n\n3) DESCRIPTIVE STATISTICS\n\n4) DATA VISUALIZATION\n\n5) DATA CLEANING\n\n*  DEALING WITH INCONSISTENT DATA\n\n*  MISSING VALUES IMPUTATION\n\n*  DEALING WITH CATEGORICAL VARIABLES\n\n6) BUILDING MODEL\n","3f637390":"## Relationship of Outlet sales with numerical variables","d9df593b":"## Relationship of outlet sale with categorical features","18f781ee":"# Data Description\nVariable\t   -                      Description\n\nItem_Identifier -  Unique product ID\n\nItem_Weight\t    -  Weight of product\n\nItem_Fat_Content -  Whether the product is low fat or not\n\nItem_Visibility\t -  The % of total display area of all products in a store allocated to the particular product\n\nItem_Type\t     - The category to which the product belongs\n\nItem_MRP\t    -   Maximum Retail Price (list price) of the product\n\nOutlet_Identifier -\tUnique store ID\n\nOutlet_Establishment_Year - \tThe year in which store was established\n\nOutlet_Size  - \tThe size of the store in terms of ground area covered\n\nOutlet_Location_Type - \tThe type of city in which the store is located\n\nOutlet_Type  - \tWhether the outlet is just a grocery store or some sort of supermarket\n\nItem_Outlet_Sales  - \tSales of the product in the particular store. This is the outcome variable to be predicted.","4a3a3fbe":"# Visualizing the data","967f2032":"#### Random Forest","8818e3c3":"# Missing Data Imputation","29805363":"#### Decision Tree","b4fff668":"# Score Card","738aef7d":"- Data is skewed towards right means positively skewed.\n- Show peakness.\n- Deviate from normal distribution.","163da59b":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcRGtzBVH2YmVIUoyIYo2tROiI_NhPYL48XhsA&usqp=CAU)","6c5e4c20":"![](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxUUExYUExQXFxYYGB8bGRkZGRsiIRwbHx4jGhseHhsiIiokHx4nHx8bIzQkJywtMDAwGSE2OzYvOiovMC0BCwsLDw4PHBERHC8nIigyLy8wLTQwLzEtLzQxLzExLS8vLzQwOC8vLzIvLy8vLy8vLzEvLzgyLTEvLy8vLy8vL\/\/AABEIAIEBhgMBIgACEQEDEQH\/xAAcAAACAgMBAQAAAAAAAAAAAAAFBgMEAAIHAQj\/xABJEAACAQIEBAMFBQMICQMFAAABAhEDIQAEEjEFBkFREyJhBzJxgZEUI0KhsTNSwTRDYnKy0eHwFRYkc4KDksLxF3TSJWOis8P\/xAAZAQADAQEBAAAAAAAAAAAAAAABAgMABAX\/xAAyEQACAgEDAwIEBAUFAAAAAAABAgARAxIhMQRBUWGREyJxgRQyofAFM7Hh8SM0QlLR\/9oADAMBAAIRAxEAPwDsozB9MbjMHtiM5j95P0xo9RSLLB+mBcapvUeTjSMeA4wE4009jGRjJx7jTTQDHmnG+PMaaaFMalMb1ZHT62xlLMxuhnvbAuaR6MZTYqZG+LZzAO6\/WMVnEmdvht9MGC5MM6fTGlTNMfT4Yi04pcR4pSoR41QJMkEzEDclogfM41wgWaEsNfGmnAyrzNQ2pE12\/dogMR21GQqzeCxAMGMRrzXQmHFamQQG1UnhSdgXUFJMjr1GDvx\/n2mhZl+ePdGKmW49lqjaEr0i8To1rqA9UnUPmMXKznSSoBnaWgfWDjEEcxZFVy6tZlBB6ETgdmuW8s481JQPQlf0IwQSrUt4lMLfdakjb1C4v06wW+hfj1+uF2M0ReI8lIBNAVJ7wCPlqEfQ4j4Zw9stUbxa9RzplQSQm\/WHI2B3\/ux0A5tjtAGFTjPFR4zLVpiw8jsoN1vItPUi2MMdnaTzZxjAvuaG1wLxvNGnWqBWkOARBEAsski9xM9L2wKSuNUuW1MDCqZI76vh2+eGLmR8jSbXmahPiBWC3APlFwI3PaRhUq8\/ZRG+4yhYDYuVHz\/H8emOcdMvBrm\/1nd+J2FA3VSTJeMSdFGWhogA9RpsJtA6fDFvI8oZyrT0uukanImNmcMN4PTt+mAOZ9rNe4o00Qdkpsx+rHT+WAGf9oObqWNSsfTXoHzCwMdARR5Mi2R2NzqVLksUkK5jMpSQksbgSS2o3lSb98RVBwmiSz1TWbfygtJt+ID0G7dBjjVfi+YN9IE9dJYn674JZPhOaqp4jBmQGDBIjaSQBZb7m3lPbD\/aJuZ0jM+0TJ0RFDKTFgahVfz85wB4h7Waje74NMDbSGYj84j0iMKHGuXXpUGqMpBsYj8Mi8xcXHyI74IcO5TGj7ymIMeZyQQ0AnSFkQJMy14ExGBfO8BFSav7Q8y+9asR\/RimP\/xjG3C\/aJmKRhC0fuu2ofn\/AAjG1bkyotY06S06p8MP5pgTvEEhoBEz+gutcU4NAMMrsaigaAYhgxJ1bRYWwSsXUJ1XgvPtKsujMU\/DkQSo1UyP6VMgx8gfji5xLlTK5mmTShdSkB6JlbiDNIsBG3usDbHAnpOCd4F7zAH+Ti\/wfi+Yy7B6DlLSQux295dj8++BuI3M7Ny\/y3Uy1RixpshFJQyllMhl95CNQNpi4vvh05koUmNNqzhFXWZZgovpvJ7YBcp8xfbcnTrAQ3iKrgEWYMNW\/SIPeD3x77QV1VcskTqFYR3skWwmZtKEkXK4QS4Cmj\/aWclQWtLZPMrUUfuuCO24kfXFLiFKs16g\/FBECPdgm3XfALKcCVqtFtJpVijEsphjApgXF+pNsGMlms5l5+8WupcArVHQsVEMLk3F2nriLBbK\/wCJReoZQGYA39jL3CaFRHc0mJBVdSmGHXTveN+uPOPcUcLS8GEqvUCG\/lWdvKw2+A+uNTzBlw331JstUIsy+ZD81+PbHvEco2YWlUo1VqqraiVI1XIkGDaIxtOgbfv7TZcutbH9\/fvNU5ufLNUXOr5VAZXSmdiSpnSWG4ABOnfbF3L8+5VhJZlMTpiW+YUmPnGBdYeHV1uWkIQJMWvKnaQbfM4UeaUSlmJCmHJghTp0kdCsj3gbQfeF7Yu5YoCi7n9mT6REZv8AWagOZ1jhfHEriaYj+uQJ+ET9MElc7EfS4+sY57wCrooo3XRrXYgSwMEixupvscGuGcaqmvVRzq8NXMeUe6wHQWm98TXIRStsY741Z2+EbUbj6RrnGTill89qFlP1HxxKKrExpxbac9GWJx7qxGEqH8ONvsz\/AOYwZp7OMx59jb94YzGsQTQZp\/3kPxDD\/twKzHGbklR\/1IP7TA4J089Jg233IP6En8sVOPZjTQJ1aZIGoCYBNzHW04nrXzHKkSkvHl7fQqf7LHFDPc5KhhaTORvuAPiSN\/TC1nuO1aiKaN6bSJZfNIBMWO5Ajbrglw3Ig001UVJKyVU7T3Mgk374Q5LHy8xkH\/aM2Q4+lRAxhfi398Yu08+jbOp+BB\/Q4U\/9LU8sadF6LprMKdVySTtBk9euCKcw5dQagLkSVJK6oIMESWsJIE7XGGDbbneIxF7RkouD+ID44l924dcBzxFHCqGQFhIEKGI9JBHUbXuDgVxXNimACYZjsaiL0\/osN5H1GGsQXGls\/AJLKABJJIEfPAHO84ZZKmh6h1QTqCMRAnUZA2EGT6YAijUqaRURn3Kp5ivVTqZnKmxNjGwN8COYaWZSqpp0adRTTFJlXxG8MVCNQJQ2DAliT3BEXkjeGo+0+YKDe64Yd1Kn8pn8sTjiif04\/wB2\/wCumMcpyXBABHhyxDkBXESPHUkgi4JLMBb8N8NHs+4hT1mlTV1NTzDWJEqAWC9gNQF74xFd4Lh7jfE2AXw30qQSTpv6QWsOsyJ+GFXM8RoFwXQ16o28rVSPdNiBCXHoPhhl5hyTVagJpq5Vdz7oPzIHbA05mjTtUzOXSOinWR6aUGIkNr9J0BlCAd5QoVs21V3p5cBWChRWqAARMmED7z\/npV+25pBV1ZbV98keHUVhP3Y8oYLI237+k4tVubOHoYatUqHqQFA\/6Z1YhXmjhzFozFZNTKxLUzErpjZbe6MHT6D9ZPVIc3xZSKorZWsJrUrGkHGoCmdk1SbWienwxd4JxjLrWiiNDNVKQVKnTpkgqQIgj\/xOLOXzmVrEilnqDEuGiVBsAsXebx264u1eC1ZR9VMqtY1TBM6Srix03PmG574ZQQeKmJBEH+1lQtKkF1TUe6hjL6SpCLMhZ9I2OFTmDitZKFEUaL06pjUEOq22lnUBzMi0kmCZw0+1rMUqYytSvRasqVHbSrFbhRBJHQY05d4Vk+IZdcwlN6QLFAmtjBRrXkgmwNxOKb2Nz9Iq1W4lOrzlVp0KFWSruQHpsdcLYlypYNZfNFtza1yn+kK2stUBZKmnzUVaNtwssAT2LeuAHNWXyeUalTr5rMDUhZWUa10zGxVv164KcMrF1DUajVadRFJayMEuqb7EkG8WA\/pYKX\/y\/ficvVobQrfPYyLn3gq5l6LPrUCkuoH3hI6gWm0R3OFf\/UmmqGXapK3jy6Ol9IiJ2vth15irinVpOUUL4NMlARAiYAOxi0d4GAed5gZxpKmJCwW\/pbncnovyJuccGR8tsB24nq41TQpI+sDryWWuZIDEBtrgTFjeAV+pxJ\/qWJZlFIqpCMKi6jq8uozbuRY4MVObDHhUgtOAw1XiQ1h5mgEyST6YFLx1qaVdBiqKgjSpMghSTEEd9\/lhS2UBQpPrGYLZsSxw3lQIadQMhVPOwAPlIJKXtaQL2tg5Sz1BE8khZ8yiQG3BMDUNW467RIFwpZXiebOqRUYEMLh76j8IkCSD6+uN34XmHV1XLVHDoR59xbodQ6zcjF\/hlj8w8Uf6zmDKO8YeMZulUyrimAuqJSuQNJ1DWSBY+6TK2MdcVKXMiU6KZdEpsiQvnaQ5ICzA6E9zMRbA+vytm3phKeW0GbmXE79yRexxNS5AzTBZIERYlSBBDEAmIBI29cHp+mCBge59orZPmB8QHXzPjsSoJVCWAp0qjCCt9UnULQB5j0AjY7ZYB384aqtJBWjy01JcFnETY6WDQIiDAtg\/kPZxXpXbMU0AHmMLto0n8UD978sa5zkOoPECZim2oAedWUGKYT3rgzE79cdOkAVIEBmLRXzeQpijV10HUjLoTBBGrzAO0d4\/U+uKeW4QhqPSlFiiCG1wCWVQqybAzPX6xBL8R5WzqJUPhFwRpHgsGlQNOwJJmWsR1wN4jUqUsw+tdLGkFgrpDAQoFxeTY7GMYRWU9o3+zBDRo1FdDpeumnykhWUrIINxuIPoCcOPOa\/7Tkz28U\/\/AK8KvIlSMvUUDTpzSiPEI\/DS\/Ed5\/d6zGHLmvKPUr5YpEKKsyQN\/Dje52O2J5gTjIHidGAgZATKFOojZijqKNpRwQ0eU\/d6Rf0H64I1FKqyiSuqQZJFjr3P9+F6nwapTqoaihgNS7gi+jSPoMeZnVTWqaT1KZ8xVYaJiQO0ExYjEmGpyPT7cRci0gMznDIa6iA6VhLEmAZPmtNiIHcebCPWyucoJ4zUyAokvRqAW7+8G\/wDOHPi\/D1zrDxKpY0kI1HSLkyRttYGRf88X8nxKjVQUatI6PD0EEagbAXG\/5YJJudGBAyRZ4BzxmqpNE01rjQXitHugSYaN47zN8Fl4rlaylnV8tUA0K8a0UiJgEDtFhESMSDhGSo1qT0dQYnQ41N7jAqbN7o+GJ6+RSmalGm0pXpvPiQStTSwUrba7TN7DAGdkNXGfp1I2uF+E5akaAFJ1rFUKKVII3JExtuJtibIcJUPUFg70JLA38xbUNvRe91xybhPBq9LMqhYBioYVEd1gMJFwJ9IGHdeYMzl6aVarI6GV8243EahDCYNzIxiAzXc56Km4408p4VFGLTIS\/WTpUCwEyR+eAnBOINUoUmqMTUNTQ1o\/nNMEdIsSMVqPNdHMURTV2oEFSCRrXysGHmF+kSRgnSy7Ghp8tRPFFQNTIMnxPEMxtN+lvlijIGUWN+PtMDTA3DeQ5mo1qtSkjHXT94FWHWOovft6Yprx2ouaemylqZAgx7jRceqnefX6CK3LpOaOYRyjmGBGxEAQw9Yg4NvR1OrkeYDT8t8SbMQCF5naMeNd+QR7S+3FVG5A+OMxCFHbGYlrfzI1j8H3i1nuSnKVkRaJV2VlDF5UoxceaNpaI7DHnFeV2dwxpqE8NlKq1gxM6hbcX6dcZV5MSF0vmzO\/h1aKx23VZ+XbFLOcpaBIr8SB7DNUR\/3Y6vhoR\/mefr3I3hDg3LS00WbsNJ+BCgR8Jn6415j5bq14Wk5VTTYNcjzH3SII\/wAkYo5jld1RXXOZ2WIDL49KUFwSfOqkCJMSe04Dplc4ldqbZ3MlJPhmmyM5EgS4eooA3930+RGIAbSgyCo20uXMxTddFdnpqEHnuxZdHmVifILOYvilW5TqCoVUK1NqreKSWlgWNQA9DBIuALjHuTyeZYHwuJu8f\/apse2wq+h6dMRU6efZwq5\/MLPV8hC2EmWbb54D4R3gOSvvPeMcs1DVorTnQpAZreUKFZbdR5QNzcDFDI8tV6pSpUOltb6gIEqSRuInZcTVs5mgfLxQQIB15RbT1JVfKp6TgO\/M+fSqE+00NJAId6FQLvEWWR1MkRAN8SXGpGxjm+4hfiXGKuWpKi0EGo1DLkmYqGCF2uIa464FZTm3OVvFZXVVpKGIFNGJkwAJFuvTphyo5Z69Kk+YaixKA6l06G6yur8Pw9MKfF+Xqr1vEovFMqilErUwxIYamgMFKwPdJ6ERiwFChG2G5mlPmbNCqcsaOVc6tJXwwA2okTIcA2Em3fB3kPi2WzBVhl0oZgKr6VNitRZldpsqzb92+A3DOVsyFqGq9Yv4SgMjghj94SoJE7lLGBgjynwbMZfM0FfV4Qy7z5YVakoFUGP3dUD44oAO8nch9p3ExWKZUAwHV3JKgAElFufUmbW3xz2jwSmXZSPE0sF\/aFh0BMrpkXkQTZTjofNXLdevXasi01UqsOWCiR67i83\/AL8B6nBFQEVsxkkE+XXmixXzTAlb\/Ptgyq8xO4jy\/Dg0odCkn7usmlrSsPUljBJkGLY2zXAaIFIqQ7sPMngZhSpt+NnCsATuPphsoUMmgKtneHMChTS1MVBe8\/tFhuk9gB64sZbLZGaQFbh7lE0iPIW925ipvY7dzhTGBHic+TJpoRppyTGnxIY+UmQsN5bQT0kd8PXsyz9VGelp+5ZXBAqA6WWIZVIXykG5FjgjluWKbinoWkwQG9POZgEmANgrAfDF\/gHKpy7ipoIim6kmszzJBFmQEbbzjRWIqEfaBo+5LnSPPLb6bLJjrbCDR4m9MBMtmWQSWJ0IQRA1bg4bPahxatl3yr0NAfVUEusgCFuRPeO+FHPc5cQUoai5UhjCnwmhpttqBI\/w9MTOIkkg8wrmCqBUtcQ8PMVqNStX8VUDpLKFEHSQCABbfDjS5RdD9w6hIVdBJ06VACiBfYXv3wjPzdXSBUymTe4UhabDfqbmBMTfDZT4lTNdtNJUrKx0lEIZo9+SJmSJva98MiMrE3c5+qy4mCq22+0scyV8lTKJnXhlpqsL4oUwJsFm09CcLVXmngiG1Mv\/AMtiZ+eNfankWq1KLENLUgXiBpMDf87DthPyvLjjSxAILLMrFp74V8qLd1tzOlMTMFrvGw+0nhlP9nlHPqEQfq+NW9r2XHuZJj2koP0BwB\/1N1kGConcKbGQTuDMf34rUuVHNeolTUVp+UFBJkRadrao+WMM6UDY3mbCwMYj7X6k+TJKPjVP8KYxQzftezDH9lTGnpNQi17iRONK3KzSQaLaosbWJFpg\/lGLHAuU6lOnrLoviQ5GgEhWMqCxG\/S3+GMc6Hg3FGIj0g2t7W8423hD4Uz\/ABc4gPtG4g+1UD4JT\/ipwa4xyoxUwyxexUDSJv5gBtH0+OKPDOQXCjxn3M6acNoWRdiJ7kQAfjg4sy5Lq4rppgupznnz72ZqKP8AhH6KMRpz3nKUaMy7Drq0n+0pOGleWMlTos9XM6H0ynhsvmIMDSFu4N72AM9IhLzfCFOkjUoYMysQSCFBgW6mOncfKpElrANGH+H+1CoD9\/Qpv\/SUlG+Mxf8ALDlwv2g5OuNDVKlPutUBl+bHUoHzxyx+A\/iVtKmmCuqQSGOkgd4MiTYj1IBpcR4WUcg+s6RsBBn5gj54Wo2oT6IHD6SUwaKIuuqjHw6aXkiSQLbfiiQL9MBvabzRVyhy5pEDX4kyO2iPhucBvZbnXqZI0asE0MxTC69VlJVlFryCTHT3ZsMWva3wqrXbKikGMeLOkTbyeuA5pbMogBbeLuT9ouZJMwwNzYdLb6QT\/wBWDuX9p+r7ypRDQIby7j1u36dMJX+rVVKoQFGIGo+c+7abRI+ImZwYzWZVzWarCeKjppCuTq0hV3UeW0zMjtjnL0Z2fh1K3Gin7QchVHnohT6E\/PcJixQ47w1iIqFAZ6MYPqV1CMczyXJOYqwYWmhEq7NCnt8CfUYJcG5YAzHhZgB5QkFWJuCIM274xyCrgTA90Np0luG5arD08yggqRJH4TPXfGVuEVjVpMgWpTUMCVYdRAJne87H8WEjMct00\/Z6kEG2pwDcXswMi4se84krcGqU8o2Zp163iI6hUB1alLKpN5YxLXBjy+hxL4uJ2K1vM4yINzDqcDqo6O9Nx4aIhEWOk3uJ6H8sV+Ya2h6FKrTHgPWIIZehkgyY6x06YRafP+dp1DTFQqdRHn1HburG02x0nhGYzmZy9Osz5arrExWp+7FveWDvsfiel+lMIqhvOZ8hLWYDq8DybV1Wg1WhqGo6S37ygWboVbVHYjBLgHDZq0Gpu7301CW0kxckMsSsTEG+nHh45maNSanD6j+ETFSjV1LBOklVcsQpKWkA26YYOHcaDGmBlKtKRqA+4sAACCNYYQDBBFr4fR8wq9ojMDFjjfNWcFVkyzt4a2HiZWozyLNJFiJ64G\/6d4u2z1o\/oZGf1jHUanGK2vSlNWSAQesWsfN2mCLWwQGdfTPgyfj\/AAP8JxT4Y5IktbcAzjTZzjDbVM78skg\/7sZjra5rMn+ZK270jJ+GoEEW6nfHuBoTxNb+ZYRiALMe0Ko6f1vhj1azED9oOt1p\/wB84WqHNuW0BqalgBtTRyyj1TTqA26R64G1faBljIhiJt905PrO36fXBZGH5QJmYjvGLjmQeorS9RRp3hABBm4Gw+pwjctZz\/agaVekXZTpiopll1EqLxdZuZAscb8T5oTMI1GgaqO6NDeERGn7wnVrsNCkWE9cc04TmXpPTqqCT5io8hlbobPY21C\/pHTDG6hU3vPoHM5wmi5aTCg+apQCgnpqQzvaTvirn+LUaCH\/AGhnKLLqlSmWWmLF9JOy2mR1GFfjXHAmQcKlSjV8qirpSmXYMJ0aSpYRNwoEdtsFaPNtJXRF++1MAT4cWMQZkA337DvaYvgVjqIjfEKjSDMzXEeGrWqrmayrWWpDio8Fo9xivumx2AjAvJcb4dVqvRQ1QnmLMalI0wqK5JiSVXRrtGxvtjbNc05g59svTTxE8PXAFIPNvxMsaRMQRPrglUzuYBgZZmkTOrK\/P+bwy41G9D2hLNBHMmWStXy3g0fGy9OkEUrT1xL9h08hv3+WLOd5Ny1Qlny1TWWXUVSkRNpixtHfE3GOP0EqKtelmAygE6PCgwHtusiGJt2XqMUanMnD9QDU8wCL3Vx06xU2uDjoxgDcg+1iKbIlbinJtNaTfZKdZKpYBL1UA\/ekp0gHobxgj7MuKZgvVyuYYuaV9TMxKkWKyw1EXtO0euJcjxjJVDpptmBBn3c1AmTcqxG0\/TBTlPgNOlUq5ilW8RaxNirAi53LMWPa+++Bl0+vtUwBgv2gcV8SmuWHlBY6idvKxQde8n5DHLuMcLCVFpKVAC6ybwJWSR9QI9MdN5p4JXzFTWtEMgLDcA2qMB+IbiD\/ABwGzXL+YVCv2RjKgMQGMxMSJIIv8RjiZWZwJ6\/TDGEtiBf0nOKXDSWXQogmAzQNTHY+g9Tbc4K8J4ElWsaIbU0T5YOoEEmD02P0+WGNeE1Vl3yjyLqQlWx6dJI+A674H8MWpSzS1vs8AGSPDq6YAsoDKCL7HeeuOlMNMCxB9JdVx8qQfSUeKcoLQZCysoYke+pb+jABmd\/ph65KavlSaVWq1Wi6wFJOqm8wp88HSRvAI2PckVzfxw5pUFLLOvhupGsMSRIkaYiPntO04MZ\/m5a3g0hQNMK4ZmggBgfw2Fj\/AHdsWIBHA9+JHMqslaQCfBG3iEfaMH+0ZIJTap53JRQDqA0tF7bgG9pAwtZrL556yVRlmRUqBlVIvHddRUkbbi+Gb2mcPqVny4pV3oFRUYujFTHkESCLX\/TCb\/q7nFWRm6+kH3lrvHwA179IMfPHGXRWsnfieUEJG0lzeWz9Z1apl63ldWCiIYhtXniNoHTqdpwez2ZBrOlekJ1Hw9QXYTI1EgwxvhcPL+dm2erhVmS1aqs9oOoiN7+v0aK6Vkq1BUQurklX0sQIJ0z5e0A98UR1a9O84urVgUPG\/i\/eWOPVxTOW91V8FdjIAGkgAi5ExtgDmOOmvoUBAJ94AgSLXBG3\/nbDVnclTrimrJUfQiKTTDADUqnYCw90+g27YoUeW0UgeFWG590kCIAvG5kmf7jjlydPr1es9jCx0L6DzK55gKKAXpuSD5Qse7uwbaLzuZgW7isvzGUBUDqZ828sL7WbzTMCwjF2lwrKo8V8wcs0SBUNJC3cqKiSV9RjZ+XMmzFhnNeqPxUD85CjDLgNgmjQI48xMuVQdJHcHmVeF8yg6tahihmWqQd9ItFjbeTJGIM1zUwm6+YXAMjSQulCABMA9I3MzgknKFDzaKoIPw\/hjX\/UCnaKsR3DnaI\/nPQfT44CdJpZmB5qJ8dQQfEFUeOMcvUFVauiqLMwHl1dAQACsmwJEX3jFJuY6mlWKnS6AhfDBBAXqGJUmZ2i59cMTezpCI8dQLWCsNoI3Y9hifLcihFVUel5fxQQxjqSBvtt2xXF0649VCr5k2y2wYciIVZPtFVg2qY6Ig0mSouGjRbYRvPWMWOGUqY0OrAeRmL1BKkDyAeHMA+U3BPvT6YZv\/TgzK1dJkkFSZk6jN42LE\/IYp53kSrGhMwgAGmWVgSJLG62iWPfFdIAqSYBm1d4tUTCuAwuqofGhiTDKPDAFrRv+eNOL1gz1D4zkmRdQLgUhcj8JaQB0hJ3ODjck5gKfv8ALFiykEtUUQumxGg\/u\/nikORs5q1ePlSfxfeONVwxn7sROkbYQKoMJFiowciZULTqvDq\/2lQfvbm1OSSfek6vLvcgYfOYMzRpPSqVqi04DgFmgXCz8cLHLPBKmXosKhpEtmEaEIqeXyL2WDI3i2Pfa\/SZqVFVIB1k3Nvwj9SMZqreMqajpluvnuHeN9pObpLUZdI1PYgRFpHpirU4zkKyFamaog7wKiQW9PMYP5Y5oODh5WpqYIrsBrYiVSbHaCRH0xrw3h2WZpKPp0ggloIYkDabj19cTbSZ1prXYH0nX+H8XyNOkoXNUWCiwZ03mYmRecQZziGQq1UrVM7QRkVkADpBDRe53tbHHeN5YKrqYOlgQJJsdoG2xxV4Xw3xJbyrHQrOJsyhKPEDnIrWDv5nbK+dyDroTO0O5IqK17CIm2w26nFyjxbJJQWj9tyrRqE+OltR1XWfljkVPLBGhbwiyVSJLXvb4Ww4UuU\/GyrU6lMpU99G0KDMrA1HoQbj0tvjk1Yg5peRR3PEBZzuT6\/eCuMcr5etXNVeJZNfMDGtJsoUSdd9p2x0rl\/OZanQSl42VfQTHhuhW7EgCWtAP645geTUR6c1mIYBmI0krO8gdR2np6jHTuVuCLQoAU63ipdlcgqDN4s0bz9cd\/T5FbZe0g4PJk+ZzlBhU++p+ZY99BF2YGx2831xaXMo1VXWuhGhlgMhuzLEDV6Hb0wDXkinmHbM1atXVVUK9MFNBUNqCe7qifWcS5TlzKU6sU6AQowYN5t1aYF+h0bm4mZx0bmKAOZfPDHNQEN+EELp6rHm1BSX6DfBn72I0Ik92v8AQqJwncaoZl1f7O7Kz+GysNUBQp1bXBLQbdvTEHDslnwZeud7CK0aQRH4dwBiY1EfMSPTaABQSQBHHO5XMGBSqoI3JgE\/SRjzCzmOF5ksWFU3LW1VwoBMgBdJEgWnoIGMwDgxnfWfeUDsOwkVH2V5QEGKsi4IqXB7gjE+a9muUd2d6dR2YySahue9ow\/KuPdOLfEMlpnOa3IFGilRspRVazUmphnqNADiG6m8enXCUOQs0jK1daDKtMov3hMORpQwNJgEg\/347rWpAg4qJlF2jALXGE5jxnJscv8AZpd6ilPIj0z+HzQXMQLmSREgYTM\/xWtl3qUkq1SqxBVgBZR5iAjCdpAaBjtvHOD0ijsKeqoQNO+422xw\/mjSM3mAseWoQs3sIAtJ\/Mf4ujHVFZRUrNzHmDvUrsSIJ1MDEAAGKW1jb4\/HE2R5tr0itR2c6VsXZ2EkETpMCbnAuqFkDSTIN4+QgaD2wP4lApGFjYe7HY\/uLh3J07wAb3O3VErV2VyzBJLalBUSKYEaSYaHJvEG9upE5vgIaqg8F2PhVdkp+adA1Db3QY6bj44g4px3N5UUTl6jMpDl0cKyKFZR\/XHvCwIFxvsKlfnniRKN9koCV8pgiVaDAmoLHyn1tiQd0bUGobbS7FWWiJtkcuqZ2sujRBWFYJIlSex7zY\/TcP8Ayas0UFwPOT0\/F8BO\/rvjneU5vzbvVP2DLGspJqLoYMQlmJJaJG0TPbD1yPx416DE5bwKib0tJAIEHUvl9dr3GKZs4yV6CRRaseZX9qHGSlEZfLllqVPM1RAT4VMGJJBEFiCBF7NF8c1ocSziqhpZ7NVGYMSFdiBpYidLSRaDfucN3tSy7msmgDz0QAkGdQYgQ4ELGvrAOF+rmqwoIlaqpCAFU0gOsWguJUA7e9BjYGRiToSAVv7RwdzcCZrnrPiUOaqHuGSl+cpis\/O2fW\/jtfvTpfpox7mqmvSQxadwFdtiQIJABt8MD\/ssNqqKyqYALgII3ME2+VyYtGEquZjDeT9pOaWA7o3cmmn6DHSuVOYRmVZKwphihKMoADdIj96829ccyp8Jom1NPEeBNxAn3bh5M\/1hgryyTSrrCoA7KsmoukGDICb6mkAANInrgDc1Ux4nQvaHrarl0p1KdPWtUEu2kCNBEdTeLdcK1PhrpOriOXBMb1BaPS3WT88GPaxwj7Q2XBjSoqE\/E6AI\/PHNMjywPtHhkeXT11AdT5utwNhhGOME325lER2XaOT00ZdFXjNEgtJGoH0EDVhqyXMwWq6HN0cxDEGitIq6XgDUCQSLLcXPUYQjwbKa1QHQoEkjT8dyWHr332ww0OHAVswBQco9WoSxVDqYmYBF1SAfqeuDjKWQo9eJHqQ6rZIv37x9y9J2NdqTaGdkILCY+7Xcd4tj1kzOwqpY9uk7bDpN73xUpZmtTQMiKwOgMWOzGmgBLb6ZIkweuJK3GkSnTq6b1abVCAdglM1DfreANt5xcEDmMMbEAje5yf215bXnackiMusWJH7SpPwO2Od1slG0Hpboe0d\/T0OOq+0ysKtWg7roJok6dStbV3UkN0IgxffAbl7guotUqDQgUKp0gkswN4\/or+oxHJl09pdMGraJT8N8gby2BJje24I74r0cy\/4XqKJtDN\/DD5U4EBJ1aqYkF9LDva8EmAZHTEOT5YZ8uKqp5n1OoJEmmDpEDubn4T8p\/HF1HbpSAD5iinFcyLLmK3yqP\/fgll+JZ2NSZjMx0PiORvHfuCPlg5wrgFStWFJjAAliyxEDqYsdrR\/fhmXkqsIQEqikw9zqMCSBpaBZhsO04cZlLaRzJHAwWzEdeY+IpvmawHqAfzIxXqc65\/pmWj+rTn8lw0Z\/lqsVIZkKAfh3Y6jaSqwdQNo69QcLNfhj0XVAvSQHHST07+vxxjlW6jfhnC6qntDnzPpfxyw\/pKsfkBgtlPajnVBZkouoiZQg37GcUqXLgNFmYkVGaGM2ALDYR8t8W+KcvIm1gSpI9SbfDr9cTPUIO8qvQ5D2nVOBcwJncpTrKAp8VAylo0uGErI33BHcEbTil7VFLLQX95mnboUP+PywK5AotQWrTCsytXpkMoB07G422gEzbTbDfza+VBo\/azSA82nxGgT5Zj8sUsMm3ec4U4slHtOWLWpqAApKncsQsg72A7RI9Bglw96f3gp0qIKLqUQpt5Y\/X88MD8X4ZSLfeZfTHlYee9rFV1Hv0xj+0Lh1MwlF2YD8NMKJAmJbT8MZSKqMxLEkCUKZZiU8MahBsgIiBbSB0PT8sV8rwLMVGYnLCY8soFmJ2263v3OL2W9qT1WCUMmFBE66tUDbeVVCfzxR45zjn2qhabUliQrLRMg\/i99yGA2\/hiZKLtc6AubIoIW+P0hXL8s5nzQgpreR4gI1AWkLvBMmewwVXlh2ILilGo+9JuO5i3fCHxXiXEFDM2bdtXRAEPSAAnvdsacRp+NQo1Wdy\/8AOJUczGkAGDfebemOdmxFg1E9vT7yORXViGFHxH+r9ny6qKmby9MQAFhQfX8Rv6RipW554dQprT8arUVBA0UnM7nchV+hxzzO8HpVmp38qBpgm5gEbx2jFzK8tZjONDLVejMrI0idjcQCZtjqxUN1AFzmc1GV\/a1RAAoZfMVAdg5VRvESFY\/+RhkyPH2rZfx1pU1IFMspBYkGPEWT+LUGXYe6JwucC5ErUCtWvXXLohBUFwdosSYG47nf0wVp5nKUEdhVeuKrFtCKAklixAYes7N0w+sj82wiKSd41Dh9KuFqFfeUbGNv6seuNP8AV+gJlCL\/ALzX698c25t5urZauKdFhRQ0kbw6eh9OqT5tSyrRFhIiDN8C6HtFzA\/nAbz5km4+EYwQEC4CwBnYKXA6IA069ujtjMcrX2nV+rUj\/wAp\/wD5YzCnGfAjalndwMatjNWI2fFY01qnECC+N6lQYxKowDNNcwu0DHI+L+z7M1a1Zw9ELUqEideoCZHSx+Hwx1+pUwJr1SCYU4ZWowVc5cvsurH3q6CZmKYO\/wBMWF9lErpesGHpTA7f0j\/k46H9ofoPzxNQLndRHxOHLEijBQEUeNcOR66Jl6q08wissMSs60A8sb3gx0ucC8nyjxEKKZzVaFkSjHzXmZLyPzw2cwcr0cxOsAP++N\/n0I+OLWUp5mmiUlp0SiIqhzUeTAAnSKZj\/qxErHJic\/ImaZgTmcxBHmDViTM9G7RHTvfBrlnlQ5ZqjOdWsRq8Ri1tr2g3O2DrU8yf5ygv\/Ldvz1r+mPFyVfd8xPotNQPzJOF4muJ3MnDangtmKpFXwVap4VTVMapgM2oGwHwwm0+Yco6mk9avQjSIcalEQw0OsspncldmYdbdN5zNRcnmRB\/k7nVBmQLXFv4\/w4dS4MgHiENcnSCIGmLGN53v6YszaFuMQW5j3keC5N11f6RIWbf7X9JXyFT0i22I85yxww3OepgnZtbG+8gmsQcc6q5MT5AdU9JxfyWXYzqBEGNWkxMAj4EesC\/fEVVfzWfcxCpPMf14BkQsHiCREWVZ+ra98EeBcoZR4rUMy1YU3ny+CQGEHSYphh0tIOE\/MLTRFVaOt7AqqlzNwPxqIIEgkN8cWOQ809LNDSgQVjodSrjy+8PLOgMDsZ2YiOuHxtkdmscQsoA2McvaRmqC1KC5ivUooy1Z8NZ1EGn73lawmcJf+keEU21pWzTuRHkBUmZke6u8nDV7VOHLVrZUvGlRVkHrOgdx1jrhH\/0LRpVgUaVFiCNQHabmYuY9MIzoCR377S2PDkKgjg33lheYeFqRpyOYczs9WL+oDnp6Yb81nKhqVNek0WY6dShghUstyydYP8DvhPzNHL+IjBDCgqzW8wmbSJt39cP9Xgtek71FVmSqWJAGpl8xdSADJmRaLTGHVgeJx9XjddJvv23MasjRFTLaAygui30gr7i\/hNisdO2KuZ4AYTRUvTUooYDQV8MoA6\/i8zEmIsYwv8U4hWomVq1KSBae1NGBJpizI5DKRH5gdMR0eeyFWa2XYXDFw9MlgOmoKu\/qYkXOAHUmp248bhAVYb9oN5u5Nq5irTVXRWWmxZRJUeI7PpFvdWwFht64A1ORc2jalCsvQo\/eJ96NyJ674m505ursadbL16dJrqy06yVARuGIggRBG34hfA7Ie1DOowVxSq2m6GY7yjADvtig0mSc5ATc94hSzqQBQrII83vsCZW+5AMau3u\/DGtbjlZRD6RA0hSqwFA9wAfhsRfDFlPasCA1bKn18N1b8mC3t3wSoe0LhtaBUJXVcCrTJj0kalH1wpxg7wLmdeIE4NxuijgSEQUmBOl\/wmy2c6pvc38sXm+1fmtZJEsuslIvHmhSFZbWIsThmocP4VmD92csWPRGUN8YUhu\/1OPMz7PMs3uNUX\/jnqDswNpA+nTEj0qltfeVXqzVNFHL8RRmBd6tNi1vEQxBJIAuTqsd5mxOFzjea15tbkgKLm\/Ugkn5Y6HU9nzgoFzJKq6tDoGFrHZhciemMyns\/wAspmpVZqo3ZGZD3soOAemUGx3lvx7EAHeop5nPU0owGNmU7WABuT+X54pca4tBKrAB0zJuTAP+PzGOityNlTJcV6kmTLsJPqRE97k4s5fkzILtlaR9ajBifjqJk+uJr0qDneM\/8QduNoA5Iz4qUn9yBXoxIYj0iL6p2Jt3xr7bVJOVibeN+lOMOtHhVGjTAo0qdIGohIpAJJ1AXP4rdOu2AntI4FUzLZcUwTp1kiTB9yJEGdsWKjTpWcbZCz6jONtwupUg0kLKRMiwF43JxPU4RUBU1CqAgWYk\/EgAH\/IOH\/IcmZhjDlgBEAnp6AxbpYdMHKfJ1Ko4p1WJZBsFIG\/r1vvEYUqJZMpE5twyslBhUWqGdWBWAOnfcfEHFuh9pqFTSWoxBJABdhc9vd23JF+uHj\/6VltQq+H4imNE+I3\/AEgf9owLPtWp6vCyuWmWiakIBeJCKSflIwUwq11Gfqnof1muS5Tzr6qlZggIuSTMdtKzHwwey\/KmWy1IDNZlQNoJAntE7\/IYB0+O53Mz4tQom2ml5BNyJIlgpAPX8PxwKbLg0B4rnUGk9W97Td52ie9zjnyMoNBbiMrk2x5jZl+YMlTIp5LKVMzU2JA8q\/1ma6j1iLYBcyc75gV2oLXFGmKYYGiqwzXGku590NA1KBYfDBLIVHr6qNJG0VKYkokkKRBBqWAM3jA7jfs7UItTMZtKLKmmAsgLqMQAQSdhAiMNhfITbbCuJB1A2G5havRp5mk1Osrz7yVGuwZTpLaokxrVtPXSR1xNy9yuxTxM1U0oW+7UMv74KMD2YRY3+sYnzueenlkOSVark6RUqhveAIYhSYB1Lvfcb4CnjhzNGi7OEzNN50spYSCJkBhpQlZ3m5AtBxVQDuTcUakXeLHtKpUvtrGmSZRSwMWYDTAiJsB0+uFdaQ\/ycd+blrL5hEq16FI1WXzakEyLACRIEbDtinV9neTb+YUf1Wdf0OKrsADEbGpJInDxRxmOyv7K8odvEX4VD\/EHGYfVF+CJ0ZjiNjiV8QtgSs0IxiIcbLiUIYwDDNdOIDlxviZTjbQIwtTSsuWGLSUAMbUlGLJAw4MBgevvjPExvmRfFKrUOBNJzUONkBIxQNRpxZpva+NU0Ac0ccoBKmWruU1pGsGYU2nbfewBvgNkOCVKaE5CulWmzSQYkzE7\/D02wV5i5QoZltTFlePeX+OErN8j18s5q5ao096ZKt81nzD0v8MBtxpIsRgfG0vZXlrN0xU8EJrdi7awsrIgwVIMW92I+WPG4NVpEMaWYao+5UWJAgEwW9d7bWwU5E5kzOYrmhmRTcJTZ9ZXS0hlUBgPL+KZAG2H96oG8D4\/44GlSbPt2m1MOJyOhyZXdf2bqSI0tVK\/kgQfGbn6YK8N5GrrWSqUpKFZWJly9jeGg7i2+1tsOWb5oy1M6XzFIMdlDgsfgq3\/ACxXXmMP+xy2aq338FkHxmrokfDFDkPmJUB+0DhjVqtFjWFCilOoalRhIF0jqI639D3wm5leFofvM9Vq2NqSkgzEgkIe372HzmDK5rM03pDL+GtSmULVaiSJIvpTXIibSOmFjKey5B+1rfJV\/iT\/AAxO\/AjajVEwCOYeGUyBSydar2LtA37Fj19MdAynHqtKu+tT4bGUWQRAJWB+6TYz\/A4q5TkLJpurv8Wj9IxJmGenVrJVAei7SCZhCJgGbAlSPjbDqfM4+pLfLpJG\/PP6SvzlxtRWZNJUsqNBCkQVAKsoO\/mExOFrgPDfEctqSDTZ4tBNvwwvci4ET9XzO5LJVnArPTWuypbXBYaFiJMMPrgFm\/Z2VM0K1oI0uJ9R5lvaO2IP06kHTsT3no4+oKijF5MnlR5NPmgNDKREiLXuCR2FyO+L1LlDLaFqEmmxUFypjST0CzGnp1OIa\/Bc1ltU0S6mAY8wAAA2BJHX8sQPzCzmkNIBCC4Yq0lS5mI6jtib4sgZSp27zqXPjK1Xn1lZuT2aqq06lOpJMrHnlR2sOnWNz1OIK\/KT0VH3PiKty6m6kgFg1xtcWOw6TcrwbiVOkyPU\/EgIhg1rOTqE7RFwDt3wSqc1ggxqLgFDpIjc31arRDGAoM7nATJlVyGG3mFkwsPl\/wDJzHPZP74tplQksCJAPuwJF73+pwUo5LN0Pcq1aUbeFVZR9CQI\/wAcPjZqnnq4auqoKdMLYAByWvq20jb64mbhtEqfdRxHl11QsRcL5vNsSe0+oxVepUkiTbpKoWL\/AH3iRW514jl2VWq6yfw1UQ9Y3WDuCLnFStz5xCs2haiUztCoBPzaTOGfinLKGpd1qEix3juBBv8AG+FxOXUdq2mSywQ0xBjU0iPQ9t8A9ShNRvwLgAwDQ4nnKzhfHrO0jyio9xMWgx1\/PEbis7afEqMxaNJZzbpeZmZEemHjhXCVR6ZRgNVInYAyGO56zIAxJVySrXWF02tI2gyI7m+JN1S9hLr\/AA418xjL7MuJ1K2VanVJZqFdEBZdRKagVkG8i4npA7Yu+0vm18i2XZKQqB\/EmXKkRoiCPicQcs5VQDU0jUcyAW1aeoYk92kkaeu2IPbJwwVfs66oP3mmYgkmnYkkAYvqpdRnntjAcqIsf+p9Z6hehQSk5WGLuWUDvAC3gDrjwcSrZlWfMu7fBzT1AjYqpCafiJid8Acrw9KRUOSSIJGmBq33MkjpEYN0OH1q8JQpvaCSLT8SdgfXEmDMaGwl1CIL5PrLGXzFFFAhAXgRJEKJBWPX59MAc3wym1bVSpux6qT8lJAufqNsOnCvZmZBzDFQTshk37tMfQNhiz3EcnkKRZACQ2gusO2og7sTawvf5YfFj+EwYGSy53yDSfyiKvAuU827K1QeEkD3rkjsFFzvu31wx5gcPyIH2h\/FYCyxJnp92Np\/pW9cJlXnDNZo+Dl9aqTZaQlr\/vVYn\/pC\/E434llKWWpaWoUvGcSasvqmJJ06iWa+9hPSMDJlBb5RZkA3beowc0c6V1ov9m0UUgaSNJaJAIA90deh7zgPlai\/ZRVzFRqlZ0ZrklvMDEk9hpPyGJuB5d8zT8NaBDERqR1nTYHUCLfH8+mD9LhOWyKJUzlTxKmgaVBJki0Bd26CSAO5xEJkyj59qMraqbHiQcDoVs3RC0yKdMGzBSASDqBDG7Hrbt9IavEMvlH8PLUjmsxJBqGIU9ljrvZfm2IDzFnM4606FHRQBgqIFv6RsP8AhFvjvh44By\/ToS0TUYklviZgemOlFCChEYk8wnwai3hKazana5tET2EAj59ZxdNBemPVHrjZU9cUuJIvA9cZifw8ZgzSZjiB2xYZcV2GDNI9WJQ9sRxj0DAMM1JxurdMeacbqMaaS01xtUxinHpwJpSqpOKr5fBBhjQjAuaDhlvXEqUMWSmPMNcErtlseNlx2xZbEatjTQZmeBU6hJBdGIjXTOl4kSNQvFh9MVaXJOVHv0zWm58d2qT8nJH0GGBTj3XjTStlMjTpCKVNEHZVAH5YsTj0nGoN8Aiaa1EnEBy+LL41nvhCIZVNDthRzDvRzFc0yH16dVidB\/CW030wf4Th4KYVuK8Lq06jV6Et4sBwBOmAAGCzc7\/3YZJy9UppSL2PbmKPPfABmcwmqFAoox0xCmAJiDIAG0YVMvVzOWreD9pqUCu3mJSAYAVZIje0Ra4w6c3cSenmVhqfieApgyNVgGvsBfqR1PTAcIlZ6fjg0z0EQI2OgixTa46YmXdCTVietjxY8iKAd6+9wtlufq9Mj7RRpVU38Wm4WY6Q3lm43ZZm2CuS5o4Zm41Mqsfw1hpknoGa3eythJ5j4PSpqHQhlUHVTmVLwYYwSJnoSR9MUuG8DHhKtamQ5ltYlt4nWFGpYGkAQRdj1OKplRzUjk6Z0Gqto+cY5Kyg0eHVakz2TSSwOy2BmB7vXAbP8kZqmS1Pw6kMWAPlv57ENYzqA3PXCnnzXyCq9GsyhvdUMIDWPuSUJB3MYK8J9qWaVA+YpLVSY1LKNbcxdT9Bh6FyNkDae8F4g1KoXzFGqFggqQyhYZ23uCRAEbe6e2Jc5xqfEAUgFmA2BAJIMMLA\/LDRwb2kZGv5XqeCT+GqIHzN0+pwZzHLmUrjWqLe4ekdM+sr5Tuel5xM4VLau\/77R0zldiJz7JVRCOS6qwsWEhvLqIDLsYlfN2OKlXiSlKpG7uFCCAANIABJi+0fA4b8x7PYZfCzBVBIKukmCugQy9he464mo+zbKBQtStWq3mzxfuAov8ycSbplJudY696A5qJNTi2lKTIsQH8x76Qwj6NHWe+LXBuH5zMVDUpUKhRlARiAqmZltTEeUbeWTcwDh6p8tZDLTVelT9XzD6goHYOSF+QGI+Je0bJUR+1aray0UJFuze7264K4UUcRH6vI5u5a4BwCtlsvTp1HVn8YM3hiRBbaG6C3m3G\/TF3mrga5mpR1VGQJrPlAMnyxMg2tjfh\/GaOay9OtRINNqie8CIIcCDFwwO3SY6HCh7WdZr5NadapSYitDIzAyPCsdN43w7URvOXcmGspwDK0qhFRSxUSWd7AAA9+nckbRGMzfO+WpKRlx4yjqkCmp2F+sm0qD8cczbPVMwhpZis5qpVKBXY7aiBIJuRa8Tb1GK\/BlZSVOpQIGm9wDF\/7+k4fCtkgxsZDuVPaFuN855itVId\/uSpimo0gxBIO5MidyYjG3Fcmj5XQtl8QNebCLG5tvN+9vSXP8I8TwVorCom0RrO5OoiYlj9d9sMfCeXNelWGhTtqCw1r6V3tva3cjHIzEudPEu1AafvAXA+MHLItOgkkGZ1QC0diL4Zsvy34rHNZ4hRvpJsgsJuYUdSTJ32xY05XLOU8MGpECDLfPog\/P44Qvtea4gy07+GPdQTpXtP7x9T8ow2PCmO6G53P1kGJaMXE\/aElCaOSpDSDHiAWPbSpux9W\/PEvDuW6mdanXrB1UJDaxDMdTNb0hhg3yxyZSoQ9TzVPyGG1W6DFTZ5i7Svw\/hyUUCU1AA7YtA411Y2VsGzNNxixRGIgBiejbBuapMF9cZjYMMZg3BMfFV8ZjMNBMGPcZjMCaZj0YzGY002XEoxmMwIZC+NDjMZgTTDiJcZjMYTTw7HGjYzGYaCepjY4zGY001xsMZjMaaeHGPjMZgTSM+98sbpt8sZjMAczHicj9pP8rP8A7YfrgDR\/YP8AHGYzDHiVw\/mEsZ39i\/8AxfqcFcj\/ADv9UfqMZjMcCfzB9Z7rfyT9Ipce\/lFT\/dP\/AGsCuFfyY\/1m\/srjMZj0O88FuIDyf7QfE\/pjqXsp\/lFf4D+wMZjMFeZMzrFPbFXK+58h+gxmMwGirOB+0j+UH+scCW\/Zp\/xfxxmMwkqs7N7Gf5E\/+\/8A+1Me+0X+W8P\/AOb\/APzxmMwp4hH5xEHin8szX\/uG\/tDBrNfsl\/3p\/tDGYzFMfJnPh\/3DQ7wv3U\/3X\/cMNtX+VN\/u1\/TGYzHOvH3ne\/f6TnPC\/wCUt\/XfDL7NP2WMxmHHMh2j1jTGYzFIk2GMXGYzAmlgYnp74zGY0MmxmMxmNNP\/2Q==)","45d7940b":"# Loading Libraries and Data","994d88b7":"#### SVM","9c3951ea":"Outlet size has 28% of the total data missing whereas item weight has 17% missing data.","88918bc2":"**Fuzzy matching:** \n\n    The process of automatically finding text strings that are very similar to the target string. \n    In general, a string is considered \"closer\" to another one the fewer characters you'd need to change if you were transforming one string into another. So \"apple\" and \"snapple\" are two changes away from each other (add \"s\" and \"n\") while \"in\" and \"on\" and one change away (rplace \"i\" with \"o\"). You won't always be able to rely on fuzzy matching 100%, but it will usually end up saving you at least a little time.\n    \nFuzzywuzzy returns a ratio given two strings. The closer the ratio is to 100, the smaller the edit distance between the two strings.","7b2f2546":"We may say that outlets which have items with high price can have high outlet sale.","c8963969":"# Dealing With Categorical Variables","45940057":"As expected, outlet sales show positive correlation with marked price but for rest of the data we could not see any strong correlation between variables.","3b4d4f5e":"#### Linear Regression","ad3806c7":"# Model Building","5f3fef5f":"#### XGBoost","4a1e039c":"This seems like outlet sale and item weight follows Uniform distribution."}}