{"cell_type":{"f9bf4848":"code","2a251c29":"code","8e5f8c6b":"code","0078b497":"code","2382e5d8":"code","06b90ff2":"code","e7ca714b":"code","9bd21698":"code","1f04102b":"code","9fd9faa7":"code","99d9981d":"code","34d8ed7e":"code","c5526027":"code","f5f68176":"code","7ccaaab5":"code","e10e8fda":"code","31fab9c4":"code","03fa065e":"code","6196baba":"code","bed9f179":"code","ed7cbfcf":"code","87c145ee":"code","58eccee6":"code","8a14a851":"code","9442d136":"code","5826132b":"code","d7ab6f03":"code","57c6d08a":"code","b1d53a2a":"code","f61f8471":"markdown","8f317940":"markdown","952dbb01":"markdown","0339980a":"markdown","750bc2ac":"markdown","bea73c1b":"markdown","5e135dbe":"markdown","f1548505":"markdown","62bce482":"markdown","e30089d8":"markdown","f57691df":"markdown","42f01a00":"markdown","20198d64":"markdown","3cf8c4f0":"markdown","6c3c596f":"markdown","aed483b9":"markdown","d2f5c247":"markdown","c3075080":"markdown","26ebb08d":"markdown","da935168":"markdown","8a9e4fb0":"markdown","0a5a2232":"markdown","4fb1f134":"markdown","e9eb9732":"markdown"},"source":{"f9bf4848":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\npd.set_option('display.max_colwidth', -1)\nimport os\nimport re\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nnp.random.seed(1)","2a251c29":"train = pd.read_csv('\/kaggle\/input\/nlp-getting-started\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/nlp-getting-started\/test.csv')\ntest = test.sample(frac=1,random_state = 1)\ntrain = train.sample(frac=1,random_state = 1)\n\ntrain.head()","8e5f8c6b":"embeddings_index = {}\nwith open('\/kaggle\/input\/glove100d\/glove.6B.50d.txt','r',encoding = 'utf8') as f:\n    for line in f:\n        values = line.split()\n        word = values[0]\n        coefs = np.array(values[1:]).astype(np.float)\n        embeddings_index[word] = coefs\n        \nprint('Found %s word vectors.' % len(embeddings_index))","0078b497":"print(train.info())\n\nprint(test.info())","2382e5d8":"train.drop(['keyword','location'],axis =1, inplace = True)\n\nprint(train.info())","06b90ff2":"test.drop(['keyword','location'], axis = 1, inplace = True)\n\nprint(test.info())","e7ca714b":"def clean_text(text):\n    #2. remove unkonwn characrters\n    emoji_pattern = re.compile(\"[\"\n                           u\"\\U0001F600-\\U0001F64F\"  # emoticons\n                           u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n                           u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n                           u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n                           u\"\\U00002702-\\U000027B0\"\n                           u\"\\U000024C2-\\U0001F251\"\n                           \"]+\", flags=re.UNICODE)\n    text = emoji_pattern.sub(r'', text)\n   \n    #1. remove http links\n    url = re.compile(r'https?:\/\/\\S+|www\\.\\S+')\n    text = url.sub(r'',text)\n    \n    #3,4. remove #,@ and othet symbols\n    text = text.replace('#',' ')\n    text = text.replace('@',' ')\n    symbols = re.compile(r'[^A-Za-z0-9 ]')\n    text = symbols.sub(r'',text)\n    \n    #5. lowercase\n    text = text.lower()\n    \n    return text","9bd21698":"train['text'] = train['text'].apply(lambda x: clean_text(x))\ntest['text'] = test['text'].apply(lambda x: clean_text(x))","1f04102b":"train.head()","9fd9faa7":"train_id = train['id']\ntrain.drop(['id'],axis=1, inplace = True)\n\ntest_id = test['id']\ntest.drop(['id'],axis = 1, inplace = True)","99d9981d":"word2idx = {}\nnew_embedding_index = {}","34d8ed7e":"train_X_list = []\nindex = 1\n\nembed_keys = embeddings_index.keys()\nfor x in train['text']:\n        list1 = x.split(' ')\n        new_list = []\n        for i in list1:\n            if((i in embed_keys)  and (i not in word2idx.keys())):\n                new_embedding_index[index] = embeddings_index[i]\n                word2idx[i] = index\n                new_list.append(index)\n                index=index+1   \n                \n            elif(i not in word2idx.keys()):\n                new_embedding_index[index] = np.random.normal(scale=0.4, size=(50, )).astype(np.float)\n                word2idx[i] = index\n                new_list.append(index)\n                index=index+1   \n\n            else:\n                new_list.append(word2idx[i])\n\n        train_X_list.append(new_list)","c5526027":"test_X_list = []\nindex = len(word2idx)+1\n\nembed_keys = embeddings_index.keys()\nfor x in test['text']:\n        list1 = x.split(' ')\n        new_list = []\n        for i in list1:\n            if((i in embed_keys)  and (i not in word2idx.keys())):\n                new_embedding_index[index] = embeddings_index[i]\n                word2idx[i] = index\n                new_list.append(index)\n                index=index+1   \n                \n            elif(i not in word2idx.keys()):\n                new_embedding_index[index] = np.random.normal(scale=0.4, size=(50, )).astype(np.float)\n                word2idx[i] = index\n                new_list.append(index)\n                index=index+1   \n\n            else:\n                new_list.append(word2idx[i])\n\n        test_X_list.append(new_list)","f5f68176":"print(len(new_embedding_index))","7ccaaab5":"max(map(len, train_X_list)) ","e10e8fda":"max(map(len, test_X_list)) ","31fab9c4":"def pad_features(reviews_int, seq_length):\n    features = np.zeros((len(reviews_int), seq_length), dtype = int)\n    for i, review in enumerate(reviews_int):\n        review_len = len(review)\n        \n        if review_len <= seq_length:\n            zeroes = list(np.zeros(seq_length-review_len))\n            new = zeroes+review \n        \n        elif review_len > seq_length:\n            new = review[0:seq_length]\n        \n        features[i,:] = np.array(new)\n    \n    return features","03fa065e":"train_X_list = pad_features(train_X_list,55)\n\nfor i in range(3):\n    extra_list =[np.array(np.zeros(55).astype(int))]\n    train_X_list =  np.append(train_X_list,extra_list, axis=0)\n    \nprint(len(train_X_list))   ","6196baba":"train_y_list=[]\nfor i in train['target']:\n    train_y_list.append(i)\n    \nfor i in range(3):\n    train_y_list.append(0)\nprint(len(train_y_list))\n\ntrain_y_list=np.array(train_y_list)","bed9f179":"test_X_list = pad_features(test_X_list,55)\n\n\nextra_list =[np.array(np.zeros(55).astype(int))]\n\n\ntest_X_list =  np.append(test_X_list,extra_list, axis=0)","ed7cbfcf":"new_embedding_index[0] = np.array(np.zeros(50)).astype(np.float)","87c145ee":"import torch\nfrom torch.utils.data import DataLoader, TensorDataset\n\ntrain_data = TensorDataset(torch.from_numpy(train_X_list),torch.from_numpy(train_y_list))\n\n\nbatch_size = 16\ntrain_loader = DataLoader(train_data, batch_size = batch_size, drop_last = True)\n","58eccee6":"import torch.nn as nn\n\nclass BiLSTM(nn.Module):\n    #rnn for sentiment analysis\n    \n    def __init__(self,weights_matrix, output_size, hidden_dim,hidden_dim2, n_layers, drop_prob=0.5):\n        #initialize model by setting up the layers\n        super(BiLSTM, self).__init__()\n        \n        self.output_size = output_size\n        self.n_layers = n_layers\n        self.hidden_dim = hidden_dim\n        \n        #embedding and lstm layers and embedding from the glove\n        num_embeddings, embedding_dim = weights_matrix.shape\n        self.embedding = nn.Embedding(num_embeddings, embedding_dim)\n       \n        #getting values or parameters for embedding layer \n        self.embedding.weight = nn.Parameter(weights_matrix)\n        \n        self.lstm = nn.LSTM(embedding_dim,hidden_dim, n_layers, dropout = drop_prob, bidirectional=True, batch_first=True)\n        \n        \n        #dropoutlayer\n        self.dropout = nn.Dropout(0.3)\n        \n        #linear and sigmoid layers\n        self.fullyconnect1 = nn.Linear(hidden_dim,hidden_dim2)\n        \n        self.fullyconnect2 = nn.Linear(hidden_dim2, output_size)\n\n        #self.fullyconnect3 = nn.Linear(hidden_dim3, output_size)\n        \n        self.sig = nn.Sigmoid()\n        \n    def forward(self, x, hidden):\n        #forward pass of our model \n        batch_size = x.size(0)\n         \n        #embedding and lstm out\n        embeds = self.embedding(x)\n        lstm_outs, hidden = self.lstm(embeds, hidden)\n        \n        # stack up lstm outputs\n        lstm_outs = lstm_outs.contiguous().view(-1, self.hidden_dim)\n        \n        \n        #dropout and fully connected layer\n        out = self.dropout(lstm_outs)\n        out = self.fullyconnect1(out)\n        out = self.dropout(out)\n        out = self.fullyconnect2(out)\n        #sigmoid function\n        sig_out = self.sig(out)\n        \n         # reshape to be batch_size first\n        sig_out = sig_out.view(batch_size, -1)\n        sig_out = sig_out[:, -1] # get last batch of labels\n        \n        #return last sigmoid output and hidden state\n        return sig_out, hidden\n    \n    def init_hidden(self, batch_size,train_on_gpu=False):\n        # initialize hidden state\n        # Create two new tensors with sizes n_layers x batch_size x hidden_dim,\n        # initialized to zero, for hidden state and cell state of LSTM\n        weight = next(self.parameters()).data\n            \n        if (train_on_gpu):\n            hidden = (weight.new(self.n_layers*2, batch_size, self.hidden_dim).zero_().cuda(),\n                  weight.new(self.n_layers*2, batch_size, self.hidden_dim).zero_().cuda())\n        else:\n            hidden = (weight.new(self.n_layers*2, batch_size, self.hidden_dim).zero_(),\n                      weight.new(self.n_layers*2, batch_size, self.hidden_dim).zero_())\n        \n        return hidden ","8a14a851":"vals = np.array(list(new_embedding_index.values()))\nvals = torch.from_numpy(vals)\n\noutput_size = 1\nhidden_dim = 200\nhidden_dim2 = 50\n#hidden_dim3 = 50\nn_layers = 2\n\nnet = BiLSTM(vals, output_size, hidden_dim,hidden_dim2, n_layers)\n\nprint(net)","9442d136":"train_on_gpu = True","5826132b":"lr=0.001\n\ncriterion = nn.BCELoss()\noptimizer = torch.optim.Adam(net.parameters(), lr=lr)\n\n\n# training params\n\nepochs =12\n\ncounter = 0\nprint_every = 64\nclip=5 # gradient clipping\n\nnet = net.float()\n# move model to GPU, if available\nif(train_on_gpu):\n    net.cuda()\n\nnet.train()\n# train for some number of epochs\nfor e in range(epochs):\n    # initialize hidden state\n    h = net.init_hidden(batch_size)\n\n    # batch loop\n    for inputs, labels in train_loader:\n        counter += 1\n\n\n        # Creating new variables for the hidden state, otherwise\n        # we'd backprop through the entire training history\n        h = tuple([each.data for each in h])\n\n        # zero accumulated gradients\n        net.zero_grad()\n\n        # get the output from the model\n        inputs = inputs.type(torch.LongTensor)\n        inputs = inputs.cuda() \n        labels = labels.cuda()\n        output, h = net(inputs, h)\n        # calculate the loss and perform backprop\n        loss = criterion(output.squeeze(), labels.float())\n        loss.backward()\n        # `clip_grad_norm` helps prevent the exploding gradient problem in RNNs \/ LSTMs.\n        nn.utils.clip_grad_norm_(net.parameters(), clip)\n        optimizer.step()\n\n        # loss stats\n       \n    print(\"Epoch: {}\/{}...\".format(e+1, epochs),\n                \"Loss: {:.6f}...\".format(loss.item()))","d7ab6f03":"\n\ntest_data = torch.from_numpy(test_X_list)\n\ntest_loader = DataLoader(test_data,batch_size=batch_size)\n\nh = net.init_hidden(batch_size)\n\npred = []\n\nnet.eval()\n# iterate over test data\nfor inputs in test_loader:\n\n    # Creating new variables for the hidden state, otherwise\n    # we'd backprop through the entire training history\n    h = tuple([each.data for each in h])\n    \n    # get predicted outputs\n    inputs = inputs.type(torch.LongTensor)\n    if(train_on_gpu):\n        inputs = inputs.cuda()\n        \n    output, h = net(inputs, h)\n    \n    # convert output probabilities to predicted class (0 or 1)\n    pred.append(torch.round(output.squeeze()))","57c6d08a":"prediction = []\nfor i in pred:\n    prediction.append(i.tolist())\n\npred = []\n\npred = [item for sublist in prediction for item in sublist]\n\npred = pred[:-1] # because in test we added extra row in the last for batch size matching.\n\npred = [int(i) for i in pred]\nprint(len(pred))","b1d53a2a":"output = pd.DataFrame({'id': test_id,'target': pred})\n\noutput.sort_values([\"id\"], axis=0, \n                 ascending=True, inplace=True)\n\noutput.to_csv('submission.csv', index=False)","f61f8471":"## LSTM model with Pytorch utilizes GPU","8f317940":"As we added three new rows in train_X_list we need to add three new rows in train_y_list. all three will be zeros.","952dbb01":"### glove embeddings","0339980a":"Here the test_X_list has 3263 elements i am considering 64 as batchsize. so in the training or testing it happens in batches format, but in the test set last 63 elements will be left over because of batch size. so to make them also to go through the LSTM i am adding  another row in test list which contains only zeors. so that 3264 can be divided by 64.","750bc2ac":"## drop unnecessary","bea73c1b":"embedding dictionary starts with 1 so at 0 index nothing will be there. i am placing all zeors in 0 index.","5e135dbe":"## Word2idx and embedding dicts for LSTM model","f1548505":"train list total length is 7613. but for batch size we need 7616 elements so that all of them will go in batches or else last batch will be left over.","62bce482":"#### lest pad train and test lists","e30089d8":"## import inputs and randomize","f57691df":"## loading libraries","42f01a00":"### its just 22652 unique words including words which may not be in the glove vector.","20198d64":"### instead of using all the 400000 word vectors lets use only vectors form words present in the train and test data. Next codes mean that we are giving each unique word a index(number) and storing in word2idx dictionary and also creating a new embedding dictionary which maps those numbers to a coeff from glove embeddings. If the word does not exist in the glove embedding then we give them a random coeffs of same dimension.","3cf8c4f0":"## seperate id column ","6c3c596f":"### lest see total no of unique words in train and test data","aed483b9":"1. remove http links\n2. removing unkonwn characters \\x89U0 etc.\n3. remove #,@ =>\n4. remove special characters ',:;. etc ","d2f5c247":"#### first lets find the maximum length or no of words in a text column of train and test","c3075080":"## test data","26ebb08d":"## Padding","da935168":"1. #### so we will pad for length of 64","8a9e4fb0":"## Data loading and batching","0a5a2232":"### initialize bilstm","4fb1f134":"## clean the text column","e9eb9732":"### training loop"}}