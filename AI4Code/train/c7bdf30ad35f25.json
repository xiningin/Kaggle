{"cell_type":{"3cfc0736":"code","9d3da75b":"code","549db5aa":"code","7aa9de0a":"code","3159ee51":"code","b0cc9311":"code","622ccdc2":"code","d892c8d4":"code","a9728f8c":"code","3d76a68f":"code","166fef9c":"code","caad5c7c":"code","5066d995":"code","cca4d506":"code","ffa357b5":"code","2648bb22":"code","a9b0a2b9":"code","d915aaac":"code","1bb87078":"code","b988c455":"code","438b0ebe":"markdown","23e9b465":"markdown","93143f2d":"markdown","c1e6d13e":"markdown","8a1b91b3":"markdown","13a84cf5":"markdown","9e3f0ae0":"markdown","bef9aab3":"markdown","33b4b484":"markdown","1d7583b9":"markdown"},"source":{"3cfc0736":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9d3da75b":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, r2_score, accuracy_score, confusion_matrix\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import StandardScaler\nfrom warnings import filterwarnings\nfrom sklearn.metrics import confusion_matrix, accuracy_score\n\nfilterwarnings(\"ignore\")\ndata =pd.read_csv(\"..\/input\/szeged-weather\/weatherHistory.csv\")","549db5aa":"delete =[\"Summary\",\"Precip Type\",\"Apparent Temperature (C)\",\"Loud Cover\",\"Apparent Temperature (C)\",\"Daily Summary\"]","7aa9de0a":"data=data.drop(delete,axis=1)\ndata =data.iloc[:8786]","3159ee51":"data['Month']= data['Formatted Date'].str.split(\" \").str[0].str.split(\"-\").str[1]\ndata['Formatted Date']= data['Formatted Date'].str.split(\" \").str[0].str.split(\"-\").str[2]\n\nprint(data[\"Formatted Date\"])","b0cc9311":"temperature=[]\nhumidity=[]\nwind_speed=[]\nwind_bearing=[]\nvisibility=[]\npressure = []\n\ntemperature =data.groupby(['Month','Formatted Date'])[\"Temperature (C)\"].mean()\nhumidity =data.groupby(['Month','Formatted Date'])[\"Humidity\"].mean()\nwind_speed=data.groupby(['Month','Formatted Date'])[\"Wind Speed (km\/h)\"].mean()\nwind_bearing=data.groupby(['Month','Formatted Date'])[\"Wind Bearing (degrees)\"].mean()\nvisibility=data.groupby(['Month','Formatted Date'])[\"Visibility (km)\"].mean()\npressure=data.groupby(['Month','Formatted Date'])[\"Pressure (millibars)\"].mean()","622ccdc2":"data_two = {\"Temperature (C)\":temperature\n           ,\"Humidity \" :humidity,\"Wind Speed (km\/h)\":wind_speed\n,\"Wind Bearing (degrees)\":wind_bearing,\"Visibility (km)\":visibility,\"Pressure (millibars)\":pressure}\n\n\ndatam=pd.DataFrame(data_two)\nprint(datam)","d892c8d4":"print(datam.head())\nprint(datam.shape)\nprint(datam.isnull().sum())\nprint(datam.info())\nprint(datam.describe().T)","a9728f8c":"plt.plot(datam[\"Temperature (C)\"],datam[\"Wind Speed (km\/h)\"], 'o',color ='black')\nplt.xlabel(\"Temperature (C)\")\nplt.ylabel(\"Wind Speed (km\/h)\")\nplt.show()","3d76a68f":"plt.plot(datam[\"Temperature (C)\"],datam[\"Wind Bearing (degrees)\"], 'o',color ='red')\nplt.xlabel(\"Temperature (C)\")\nplt.ylabel(\"Wind Bearing (degrees)\")\nplt.show()","166fef9c":"corr_matrix=datam.corr()\nsns.clustermap(corr_matrix,annot=True,fmt =\".2f\")\nplt.show()","caad5c7c":"sns.pairplot(datam)\nplt.show()","5066d995":"from sklearn.preprocessing import LabelEncoder\nlbe=LabelEncoder()\ndata[\"Month\"]=lbe.fit_transform(data[\"Month\"])","cca4d506":"y = datam[\"Temperature (C)\"]\nx=datam.drop([\"Temperature (C)\"],axis=1)\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.4, random_state=1)\n\nprint(\"x train: \",x_train.shape)\nprint(\"x test: \",x_test.shape)\nprint(\"y train: \",y_train.shape)\nprint(\"y test: \",y_test.shape)\n","ffa357b5":"scaler = StandardScaler()\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)","2648bb22":"from sklearn import metrics\nmodel = LinearRegression().fit(x_train,y_train)\nprint(model.score(x_train,y_train))\ny_pred =model.predict(x_test)\n\n\nprint('MAE:', metrics.mean_absolute_error(y_test, y_pred))\nprint('MSE:', metrics.mean_squared_error(y_test, y_pred))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","a9b0a2b9":"model = LinearRegression().fit(x_train,y_train)\nprint(model.score(x_train,y_train))\ny_pred =model.predict(x_test)\n\n\nprint('MAE:', metrics.mean_absolute_error(y_test, y_pred))\nprint('MSE:', metrics.mean_squared_error(y_test, y_pred))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","d915aaac":"pred=pd.DataFrame(y_pred)\n\nplt.figure(figsize = (18, 6))\nindex=y_test.reset_index()[\"Temperature (C)\"]\nax=index.plot(label=\"original values\")\nax=pred[0].plot(label = \"predicted values\")\nplt.legend(loc='upper right')\nplt.title(\"Test vs Pred\")\nplt.xlabel(\"Day\")\nplt.ylabel(\"Temperature\")\nplt.show()\n","1bb87078":"from sklearn.neighbors import KNeighborsRegressor\nmodel =KNeighborsRegressor().fit(x_train,y_train)\ny_pred =model.predict(x_test)\n\nprint(model.score(x_train,y_train))\nprint(\"***************************\")\nprint('MAE:', metrics.mean_absolute_error(y_test, y_pred))\nprint(\"***************************\")\nprint('MSE:', metrics.mean_squared_error(y_test, y_pred))\nprint(\"***************************\")\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))\nprint(\"***************************\")\n\n","b988c455":"pred=pd.DataFrame(y_pred)\n\nplt.figure(figsize = (18, 6))\nindex=y_test.reset_index()[\"Temperature (C)\"]\nax=index.plot(label=\"original values\")\nax=pred[0].plot(label = \"predicted values\")\nplt.legend(loc='upper right')\nplt.title(\"Test vs Pred\")\nplt.xlabel(\"Day\")\nplt.ylabel(\"Temperature\")\nplt.show()\n","438b0ebe":"# Creating a New Data Set","23e9b465":"# Standardize","93143f2d":"# Split Data","c1e6d13e":"# Deleting Some Features","8a1b91b3":"# Build Model ","13a84cf5":"# Import Library and Data","9e3f0ae0":"# Label Encoder","bef9aab3":"# Exploratory Data Analysis","33b4b484":"# Creating Month and Day Properties","1d7583b9":"# Taking One Year of Data"}}