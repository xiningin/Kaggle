{"cell_type":{"21af78da":"code","2741731f":"code","781b14a3":"code","596abeac":"code","24fb2e5d":"code","a030161f":"code","cf508b85":"code","f293abe2":"code","aa24e3e2":"code","f7270051":"code","df16f6b2":"code","389f9651":"code","86ea20db":"code","dbddffe5":"code","57fa311f":"code","950a2654":"code","c5f4aa86":"code","61af08ae":"code","ae94f464":"code","11f85db8":"code","51535070":"code","3ed4e4f9":"code","400a06b0":"code","176ae257":"code","093ac3af":"code","760ccd01":"code","d17ec325":"code","ca5701d3":"code","83527798":"code","861df27a":"code","45ac6c86":"code","a06a2cb5":"code","bb1a3c58":"code","4c3392a6":"code","72b34e08":"code","3d7c670c":"code","388e7f60":"code","706453c8":"code","a1ca8d44":"code","e01bdad5":"code","8c371fd9":"code","b10c14c7":"code","db595c9e":"code","c3f13d2b":"code","84aa2269":"code","ce5ca229":"code","71da2296":"code","e3783419":"code","43db323b":"code","a6f6d101":"code","ae37922b":"code","d0c54642":"code","d2666a37":"code","4b2f68d1":"code","2837fe06":"code","6997c1a8":"code","c88fc343":"code","9a544090":"code","a86d3ac4":"code","af4cbd03":"code","c27295ce":"code","ca4cad71":"code","436f2570":"code","95654c5f":"code","a23d0b77":"code","29c025f7":"code","b53c3e6c":"code","bb2fde0f":"code","2a9e820a":"code","fb20c746":"code","5abf9c2f":"code","8697573e":"code","1267a78c":"code","0fd2c828":"code","582d0858":"code","44e43b52":"code","7b38dbee":"code","565ef16f":"code","17e01164":"code","ee979eb9":"code","9d6e399f":"code","e947125d":"code","42a21d8e":"markdown","8e5c78eb":"markdown","4ba5a50b":"markdown","6b3ccb5b":"markdown","ac39d5da":"markdown","51cc8de0":"markdown","bed2db80":"markdown","54a63b0b":"markdown","78818b31":"markdown","ebb90741":"markdown","987c9568":"markdown","e032385d":"markdown","e2ede946":"markdown","d9b78ae8":"markdown","b705fd4f":"markdown"},"source":{"21af78da":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2741731f":"import numpy as np \nimport pandas as pd\nimport calendar\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport squarify\nimport gc\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\nsns.set_style('white')\n\npd.options.display.float_format = '{:,.2f}'.format","781b14a3":"def calcula_diferencias_mensuales (dataset, variable):\n    dataset[variable+'_pm']  = dataset.groupby('pk_cid')[variable].shift(1)\n    dataset['dif_'+variable] = dataset[variable] - dataset[variable+'_pm']\n    #dataset['dif_'+variable]  = dataset.groupby('pk_cid')[variable].diff()\n    dataset.drop(variable+'_pm',axis=1,inplace=True)\n","596abeac":"products_file = '\/kaggle\/input\/easymoney\/products_df.csv'\nproducts = pd.read_csv(products_file)\nproducts.drop('Unnamed: 0', axis=1, inplace=True)","24fb2e5d":"sd_file = '\/kaggle\/input\/easymoney\/sociodemographic_df.csv'\nsociodemographic = pd.read_csv(sd_file)\nsociodemographic.drop('Unnamed: 0',axis=1, inplace=True)","a030161f":"ca_file = '\/kaggle\/input\/easymoney\/commercial_activity_df.csv'\ncommercial = pd.read_csv(ca_file)\ncommercial.drop('Unnamed: 0',axis=1, inplace=True)","cf508b85":"df_= pd.merge(products,commercial, how=\"inner\",on=['pk_cid','pk_partition' ])","f293abe2":"df=pd.merge(df_,sociodemographic, how=\"inner\",on=['pk_cid','pk_partition'])","aa24e3e2":"del products, sociodemographic, commercial,df_","f7270051":"gc.collect()","df16f6b2":"# we sorted the dataset by pk_cid (Client id), pk_partition (date)\ndf_sorted = df.sort_values(by=['pk_cid', 'pk_partition'])","389f9651":"# Easymoney product list\nproductos_easymoney=['loans',\n 'mortgage',\n 'funds',\n 'securities',\n 'long_term_deposit',\n 'em_account_pp',\n 'credit_card',\n 'payroll',\n 'pension_plan',\n 'payroll_account',\n 'emc_account',\n 'debit_card',\n 'em_account_p',\n 'em_acount']","86ea20db":"# We calculate the diferent by months for each Easymoney product. \nfor x in productos_easymoney:\n    calcula_diferencias_mensuales (df_sorted, x)","dbddffe5":"# Look at this example of how \"dif_\" columns works.\ndf_sorted[df_sorted['pk_cid']==1035440][['pk_cid', 'pk_partition','em_acount','dif_em_acount']]","57fa311f":"# we fix this dates\ndf_sorted.loc[ (df_sorted['entry_date']=='2019-02-29'), \n              'entry_date']='2019-02-28'\ndf_sorted.loc[ (df_sorted['entry_date']=='2015-02-29'), \n              'entry_date']='2015-02-28'","950a2654":"# we put the dates as dates\nfor i in [\"pk_partition\",\"entry_date\"]:\n    df_sorted[i]=pd.to_datetime(df_sorted[i], format='%Y-%m-%d')","c5f4aa86":"# We do the subtraction of the position date with the entry date and we convert it in months\ndf_sorted['mesesAlta']=(df_sorted['pk_partition']-df_sorted['entry_date'])\/np.timedelta64(1,'M')","61af08ae":"#We  looking for clients with \"mesesAlta\" < 0\nlen(df_sorted[df_sorted['mesesAlta']<0])","ae94f464":"# And they have no products\ndf_sorted[df_sorted['mesesAlta']<0].agg({'em_acount':np.sum,\n'loans':np.sum,\n 'mortgage':np.sum,\n 'funds':np.sum,\n 'securities':np.sum,\n 'long_term_deposit':np.sum,\n 'em_account_pp':np.sum,\n 'credit_card':np.sum,\n 'payroll':np.sum,\n 'pension_plan':np.sum,\n 'payroll_account':np.sum,\n 'emc_account':np.sum,\n 'debit_card':np.sum,\n 'em_account_p':np.sum,\n 'em_acount':np.sum})","11f85db8":"# These are clients registered on the 29th, 30th and 31st of the month. \n# According to our process, they have signed in the next month\ndf_sorted[df_sorted['mesesAlta']<0]['mesesAlta'].value_counts()","51535070":"# we create the new boolean variable isNewClient\ndf_sorted['isNewClient']=((df_sorted['mesesAlta'] < 1) & \n                          (df_sorted['mesesAlta'] > 0)).astype(int)","3ed4e4f9":"# We can se the isNewClient is in the correct month.\ndf_sorted[df_sorted['pk_cid']==16502][['pk_cid', 'pk_partition','mesesAlta','isNewClient','em_acount','dif_em_acount']].T","400a06b0":"# Look at this example of how \"isNewClient\" column works.\ndf_sorted[df_sorted['pk_cid']==16502][['pk_cid', 'pk_partition','isNewClient','mesesAlta','em_acount','dif_em_acount']]","176ae257":"# Look at this example of how \"isNewClient\" column works.\ndf_sorted[df_sorted['pk_cid']==16502][['pk_cid', 'pk_partition','isNewClient','mesesAlta','em_acount','dif_em_acount']]","093ac3af":"# We paint customer registrations per month\naltas_=df_sorted.groupby(['pk_partition'])['isNewClient'].sum()\nfig = plt.figure(figsize = (10, 8))\nplt.plot(altas_, color = \"green\", label = \"Altas mensuales\")\nplt.title(\"Altas mensuales de clientes\")\nplt.legend()","760ccd01":"# When the client is a new user, all the diff fields of this month are 0. But he may have hired\n# something in the same month and would not be collected in the diff field.\n# For new registrations we match the dif_ columns with the product counters\ndf_sorted[(df_sorted['dif_em_acount'].isnull()) &\n          (df_sorted['isNewClient']==1) &\n          (df_sorted['em_acount']==1)].T","d17ec325":"# look at this client as example:\ndf_sorted[df_sorted['pk_cid']==32560][\n    ['pk_cid', 'pk_partition','isNewClient','mesesAlta','em_acount','dif_em_acount','debit_card','dif_debit_card']].T","ca5701d3":"# For new registrations we match the dif_ columns with the product counters\nfor x in productos_easymoney:\n    df_sorted.loc[ (df_sorted['isNewClient']==1) &\n                   (df_sorted['dif_'+x].isnull()==True), \n                  'dif_'+x]=df_sorted[x]","83527798":"# Now the dif_variables are ok. \ndf_sorted[df_sorted['pk_cid']==32560][\n    ['pk_cid', 'pk_partition','isNewClient','mesesAlta','em_acount','dif_em_acount','debit_card','dif_debit_card']].T","861df27a":"# If the client does not have any product, he is not active\ndf_sorted['isActive']=((df_sorted['loans']==0) &\n                        (df_sorted['mortgage']==0) &\n                        (df_sorted['funds']==0) &\n                        (df_sorted['securities']==0) &\n                        (df_sorted['long_term_deposit']==0) &\n                        (df_sorted['em_account_pp']==0) &\n                        (df_sorted['credit_card']==0) &\n                        (df_sorted['payroll']==0) &\n                        (df_sorted['pension_plan']==0) &\n                        (df_sorted['payroll_account']==0) &\n                        (df_sorted['emc_account']==0) &\n                        (df_sorted['debit_card']==0) &\n                        (df_sorted['em_account_p']==0) &\n                        (df_sorted['em_acount']==0)).astype(int)\n# but it is the inverse. We have to do the negation:\ndf_sorted['isActive']=(df_sorted['isActive']!=1).astype(int)","45ac6c86":"# Look at this example of how \"isNewClient\" column works.\ndf_sorted[df_sorted['pk_cid']==16502][\n    ['pk_cid', 'pk_partition','isNewClient','isActive','mesesAlta','em_acount','dif_em_acount']]","a06a2cb5":"# We paint activecustomer registrations per month\naltas_=df_sorted.groupby(['pk_partition'])['isActive'].sum()\nfig = plt.figure(figsize = (10, 8))\nplt.plot(altas_, color = \"green\", label = \"Activos mensuales\")\nplt.title(\"Clientes activos mensuales\")\nplt.legend()","bb1a3c58":"df_sorted['region_code'].isnull().sum()","4c3392a6":"# There are only 169 clients without informed region\ndf_sorted[df_sorted['region_code'].isnull()].groupby('pk_cid').size()","72b34e08":"df_sorted['region_code'].fillna(-999, inplace=True)","3d7c670c":"provincias={1:'Alava',\n2:'Albacete',\n3:'Alicante',\n4:'Almeria',\n5:'Avila',\n6:'Badajoz',\n7:'Baleares',\n8:'Barcelona',\n9:'Burgos',\n10:'Caceres',\n11:'Cadiz',\n12:'Castellon',\n13:'Ciudad Real',\n14:'Cordoba',\n15:'La Coruna',\n16:'Cuenca',\n17:'Gerona',\n18:'Granada',\n19:'Guadalajara',\n20:'Guipuzcoa',\n21:'Huelva',\n22:'Huesca',\n23:'Jaen',\n24:'Leon',\n25:'Lerida',\n26:'La Rioja',\n27:'Lugo',\n28:'Madrid',\n29:'Malaga',\n30:'Murcia',\n31:'Navarra',\n32:'Orense',\n33:'Asturias',\n34:'Palencia',\n35:'Las Palmas',\n36:'Pontevedra',\n37:'Salamanca',\n38:'Santa Cruz de Tenerife',\n39:'Cantabria',\n40:'Segovia',\n41:'Sevilla',\n42:'Soria',\n43:'Tarragona',\n44:'Teruel',\n45:'Toledo',\n46:'Valencia',\n47:'Valladolid',\n48:'Vizcaya',\n49:'Zamora',\n50:'Zaragoza',\n51:'Ceuta',\n52:'Melilla',\n-999:'Desconocida'}","388e7f60":"df_sorted['Provincia']=df_sorted['region_code'].map(provincias)","706453c8":"df_sorted[['region_code','Provincia']]","a1ca8d44":"df_sorted['entry_date'].value_counts(dropna=False)","e01bdad5":"df_sorted['entry_date'].isnull().sum()","8c371fd9":"df_sorted['entry_date'].hist()","b10c14c7":"df_sorted['entry_channel'].value_counts(dropna=False)","db595c9e":"df_sorted['entry_channel'].isnull().sum()","c3f13d2b":"df_sorted['entry_channel'].fillna('XXX', inplace=True)","84aa2269":"df_sorted['active_customer'].value_counts(dropna=False)","ce5ca229":"df_sorted['active_customer'].hist()","71da2296":"df_sorted['segment'].value_counts(dropna=False)","e3783419":"df_sorted['segment'].hist()","43db323b":"df_sorted['segment'].fillna('04 - NOINFORMADO',inplace=True)","a6f6d101":"df_sorted['country_id'].value_counts(dropna=False)","ae37922b":"df_sorted['country_id']=pd.Categorical(df_sorted['country_id'], categories=['ES','GB','FR','DE','US','CH','OTHER'])","d0c54642":"df_sorted['country_id'].fillna('OTHER',inplace=True)","d2666a37":"df_sorted['country_id'].value_counts(dropna=False)","4b2f68d1":"df_sorted['gender'].value_counts(dropna=False)","2837fe06":"df_sorted['gender'].fillna('NoInformado',inplace=True)","6997c1a8":"df_sorted['age'].value_counts(dropna=False)","c88fc343":"df_sorted['age'].hist()","9a544090":"df_sorted['deceased'].value_counts(dropna=False)","a86d3ac4":"#df_sorted[df_sorted['deceased']=='S'].head() ","af4cbd03":"df_sorted[df_sorted['pk_cid']==81958].T","c27295ce":"df_sorted['salary'].value_counts(dropna=False)","ca4cad71":"#df_sorted[ df_sorted['salary']<500000 ]['salary'].hist()","436f2570":"df_sorted['salary'].isnull().sum()","95654c5f":"len(df_sorted['salary'])","a23d0b77":"df_sorted['salary'].describe()","29c025f7":"df_sorted.loc[ (df_sorted['salary'] <= 61500.63), 'SalaryQtil'  ]='1Qtil'\ndf_sorted.loc[ (df_sorted['salary'] > 61500.63) &\n               (df_sorted['salary'] <= 88654.65), 'SalaryQtil'  ]='2Qtil'\ndf_sorted.loc[ (df_sorted['salary'] >  88654.65) &\n               (df_sorted['salary'] <= 131669.91), 'SalaryQtil'  ]='3Qtil'\ndf_sorted.loc[ (df_sorted['salary'] > 131669.91) , 'SalaryQtil'  ]='4Qtil'\ndf_sorted.loc[ (df_sorted['salary'].isnull()) , 'SalaryQtil'  ]='NOInformado'","b53c3e6c":"df_sorted['salary'].fillna(-999, inplace=True)","bb2fde0f":"df_sorted[['salary','SalaryQtil']]","2a9e820a":"#df_sorted[ df_sorted['salary']<500000 ]['salary'].hist()","fb20c746":"# Easymoney dif product list\ndif_productos_easymoney=['dif_loans',\n 'dif_mortgage',\n 'dif_funds',\n 'dif_securities',\n 'dif_long_term_deposit',\n 'dif_em_account_pp',\n 'dif_credit_card',\n 'dif_payroll',\n 'dif_pension_plan',\n 'dif_payroll_account',\n 'dif_emc_account',\n 'dif_debit_card',\n 'dif_em_account_p',\n 'dif_em_acount']","5abf9c2f":"for x in dif_productos_easymoney:\n    df_sorted[x].fillna(0,inplace=True)","8697573e":"df_sorted[dif_productos_easymoney].isnull().sum()","1267a78c":"# Easymoney product list\nproductos_easymoney=['loans',\n 'mortgage',\n 'funds',\n 'securities',\n 'long_term_deposit',\n 'em_account_pp',\n 'credit_card',\n 'payroll',\n 'pension_plan',\n 'payroll_account',\n 'emc_account',\n 'debit_card',\n 'em_account_p',\n 'em_acount']","0fd2c828":"df_assets=df_sorted.melt(id_vars=['pk_partition','pk_cid'],\n              value_vars=productos_easymoney,\n              var_name='Product',\n              value_name='Count')","582d0858":"df_assets=df_assets.groupby(['pk_partition','pk_cid']).agg({'Count':np.sum}).reset_index(drop=False)","44e43b52":"df_assets.rename(columns={'Count':'totalAssets'}, inplace=True)","7b38dbee":"len(df_sorted),len(df_assets)","565ef16f":"df_sorted=pd.merge(df_sorted,df_assets, how=\"inner\",on=['pk_cid','pk_partition'])","17e01164":"df_sorted['totalAssets'].value_counts().to_frame()","ee979eb9":"df_sorted[df_sorted['totalAssets']==9]","9d6e399f":"df_sorted.to_pickle('EasyMoney_base.pkl',compression='zip')","e947125d":"df_sorted = pd.read_pickle('EasyMoney_base.pkl',compression='zip')","42a21d8e":"# Variable Age","8e5c78eb":"# Variable Variable Entry Channel","4ba5a50b":"# Variable Entry Date","6b3ccb5b":"# Variable totalAssets","ac39d5da":"# Add Region (provincia)","51cc8de0":"# Variable country_id","bed2db80":"# New column IsActive","54a63b0b":"# Variable salary","78818b31":"# We calculate the differences by months","ebb90741":"# Variable active_customer","987c9568":"# New column IsNewClient","e032385d":"# Rellenamos los nulos de los dif_","e2ede946":"# Variable gender","d9b78ae8":"# variable segment","b705fd4f":"# Variable deceased"}}