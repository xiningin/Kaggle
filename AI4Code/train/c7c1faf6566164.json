{"cell_type":{"aa9a7495":"code","c4929375":"code","64c9b880":"code","48ff26bf":"code","0aacde94":"code","e0c1a940":"code","fa29dcb7":"code","f2e9273b":"code","92606fbf":"code","308d1dc7":"code","f42897e4":"code","752ffb1c":"code","4cde0be1":"code","f12db025":"code","fbe39b6d":"code","a18f7ef4":"code","28819e74":"code","231232ea":"code","6f799dc0":"code","9dc21184":"code","dbb53f53":"code","bb281482":"markdown","175fb339":"markdown","868a5064":"markdown","982c09b3":"markdown","57c55258":"markdown","7f4557b2":"markdown","1dec961c":"markdown","9c5eb70b":"markdown","1cebf439":"markdown","2f307bdd":"markdown","529f2306":"markdown"},"source":{"aa9a7495":"import pandas as pd\nimport numpy as np\nimport missingno\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.metrics import classification_report\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import BaggingClassifier\nfrom imblearn.over_sampling import KMeansSMOTE\nfrom sklearn.calibration import CalibratedClassifierCV\nimport warnings\n\n# Importing packages for SMOTE\nfrom imblearn.over_sampling import SMOTE\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom imblearn.pipeline import Pipeline\nfrom imblearn.over_sampling import BorderlineSMOTE\n\nnp.random.seed(32)\n\nwarnings.filterwarnings(\"ignore\")","c4929375":"train=pd.read_csv(\"..\/input\/tabular-playground-series-may-2021\/train.csv\")","64c9b880":"# Dropping id \ntrain.drop(\"id\",axis=1,inplace=True)\n\n# Showing the data\ntrain.head()","48ff26bf":"dic={\"Class_1\":0,\"Class_2\":1,\"Class_3\":2,\"Class_4\":3}\ntrain['target'].replace(dic,inplace=True)","0aacde94":"train.head()","e0c1a940":"X=train.drop('target',axis=1).values\ny=train['target'].values\n# undersample = KMeansSMOTE()\n# X, y = undersample.fit_resample(X, y)\nfrom sklearn.preprocessing import MinMaxScaler\nmm=MinMaxScaler()\nX=mm.fit_transform(X)\nX_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.1, random_state=42 , stratify = y )\n# transform the dataset","fa29dcb7":"# Bernolli model\nnb=BernoulliNB(alpha=0.2)\nnb.fit(X,y)\nnb_clf = CalibratedClassifierCV(nb, method=\"sigmoid\", cv=\"prefit\")\nnb_clf.fit(X_train,y_train)\nnb_predict=nb_clf.predict_proba(X_test)\nprint(classification_report(y_test,nb_clf.predict(X_test)))","f2e9273b":"mlp=MLPClassifier()\nmlp.fit(X,y)\nmlp_clf = CalibratedClassifierCV(mlp, method=\"sigmoid\", cv=\"prefit\")\nmlp_clf.fit(X_train,y_train)\nmlp_predict=mlp_clf.predict_proba(X_test)\nprint(classification_report(y_test,mlp_clf.predict(X_test)))","92606fbf":"from sklearn.metrics import accuracy_score\nimport optuna","308d1dc7":"BEST_PARAMS = {\n    'n_estimators': 10000, # Waiting for early-stopping\n    'learning_rate': 0.05, # Me\n    'metric': 'auc' # Me\n}\n# Objective function\ndef objective(trial):\n    # Search spaces\n    hyperparams = {\n        'reg_alpha': trial.suggest_float('reg_alpha', 0.001, 10.0),\n        'reg_lambda': trial.suggest_float('reg_lambda', 0.001, 10.0),\n        'num_leaves': trial.suggest_int('num_leaves', 5, 1000),\n        'min_child_samples': trial.suggest_int('min_child_samples', 5, 100),\n        'max_depth': trial.suggest_int('max_depth', 5, 64),\n        'colsample_bytree': trial.suggest_float('colsample_bytree', 0.1, 0.5),\n        'cat_smooth' : trial.suggest_int('cat_smooth', 10, 100),\n        'cat_l2': trial.suggest_int('cat_l2', 1, 20),\n        'min_data_per_group': trial.suggest_int('min_data_per_group', 50, 200)\n    }\n    lgbc=LGBMClassifier(**hyperparams)\n    lgbc.fit(X_train,y_train)\n    return accuracy_score(y_test,lgbc.predict(X_test))\n","f42897e4":"# Optimization\n# study = optuna.create_study(direction='maximize')\n# study.optimize(objective, timeout=600)","752ffb1c":"params={'reg_alpha': 4.434234469181169, 'reg_lambda': 2.2973211767274404, 'num_leaves': 192, 'min_child_samples': 13, 'max_depth': 38, 'colsample_bytree': 0.2902544137376231, 'cat_smooth': 87, 'cat_l2': 17, 'min_data_per_group': 150}\nlgbc=LGBMClassifier(**params)\nlgbc.fit(X,y)\nlgbc_clf = CalibratedClassifierCV(lgbc, method=\"sigmoid\", cv=\"prefit\")\nlgbc_clf.fit(X_train,y_train)\npredict_lgbc=lgbc_clf.predict_proba(X_test)\nprint(classification_report(y_test,lgbc_clf.predict(X_test)))","4cde0be1":"# Catboost Classifier\ncbc=CatBoostClassifier(iterations=400)\ncbc.fit(X,y)\ncbc_predict=cbc.predict_proba(X_test)\nprint(classification_report(y_test,cbc.predict(X_test)))","f12db025":"kn=KNeighborsClassifier(n_neighbors=40)\nkn.fit(X,y)\nkn_clf = CalibratedClassifierCV(kn, method=\"sigmoid\", cv=\"prefit\")\nkn_clf.fit(X_train,y_train)\nprediction=kn_clf.predict(X_test)\nprint(classification_report(prediction,y_test))","fbe39b6d":"bc=BaggingClassifier()\nbc.fit(X,y)\nbc_clf = CalibratedClassifierCV(bc, method=\"sigmoid\", cv=\"prefit\")\nbc_clf.fit(X_train,y_train)\nprediction=bc_clf.predict(X_test)\nprint(classification_report(prediction,y_test))","a18f7ef4":"test=pd.read_csv(\"..\/input\/tabular-playground-series-may-2021\/test.csv\")\ntest.head()","28819e74":"ids=test['id'].values\nX_rtest=test.drop('id',axis=1).values\npred1=nb_clf.predict_proba(X_rtest)\npred1=np.clip(pred1,0.08,0.95)\npred2=mlp_clf.predict_proba(X_rtest)\npred2=np.clip(pred2,0.08,0.95)\npred3=lgbc_clf.predict_proba(X_rtest)\npred3=np.clip(pred3,0.08,0.95)\npred4=cbc.predict_proba(X_rtest)\npred4=np.clip(pred4,0.08,0.95)\npred5=kn_clf.predict_proba(X_rtest)\npred5=np.clip(pred5,0.08,0.95)\npred6=bc_clf.predict_proba(X_rtest)\npred6=np.clip(pred6,0.08,0.95)\ntotal=(pred1*0.1+pred2*0.25+pred3*0.2+pred4*0.25+pred5*0.1+pred6*0.1)","231232ea":"sample=pd.read_csv(\"..\/input\/tabular-playground-series-may-2021\/sample_submission.csv\")","6f799dc0":"sample['Class_1']=total[:,0]\nsample['Class_2']=total[:,1]\nsample['Class_3']=total[:,2]\nsample['Class_4']=total[:,3]","9dc21184":"sample.to_csv(\"Sample.csv\",index=False)","dbb53f53":"sample.head()","bb281482":"# Making submission notebook","175fb339":"# Using Catboost Classifier","868a5064":"# Bagging Classifier","982c09b3":"# Importing packages","57c55258":"# Using MLP Classifier","7f4557b2":"# Doing train test split","1dec961c":"# Importing Data","9c5eb70b":"# Using LGBMCLassifier","1cebf439":"# Checking For Multicollinearity","2f307bdd":"# BernoulliNB","529f2306":"# KNN model"}}