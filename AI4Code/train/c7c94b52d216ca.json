{"cell_type":{"973b5a3b":"code","c2014cba":"code","f553fb1b":"code","6ac8bfdc":"code","c57e03cd":"code","4e60e808":"code","b3f5e521":"code","ce6d0174":"code","ce326259":"code","13a15062":"code","83501578":"code","c5fd757a":"code","2088257a":"code","a8f9cd21":"code","48815c2b":"code","7846f230":"markdown","1c7e7a4e":"markdown","252c343e":"markdown","a90fe9de":"markdown","94e9d89e":"markdown","087f319b":"markdown","21a1e613":"markdown"},"source":{"973b5a3b":"!pip install pyphen\n!pip install tidybear","c2014cba":"import numpy as np\nimport pandas as pd\nimport tidybear as tb\n\nfrom tqdm import tqdm\n\nimport nltk\nfrom pyphen import Pyphen\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \ndef summarise_cv_scores(scores):\n    return (len(scores), np.mean(scores), np.std(scores))","f553fb1b":"train_ = pd.read_csv(\"\/kaggle\/input\/commonlitreadabilityprize\/train.csv\")\ntrain_ = train_.loc[:, [\"id\", \"excerpt\", \"target\", \"standard_error\"]]\n\ngrade_lbls = [i for i in range(12, 2, -1)]\ntrain_[\"grade\"] = pd.qcut(train_.target, q=len(grade_lbls), labels=grade_lbls)\ntrain_[\"grade\"] = train_.grade.astype(int)\n\ndef get_school_level(grade):\n    if grade <= 5:\n        return \"elementary\"\n    elif grade <= 8:\n        return \"middle\"\n    else:\n        return \"high\"\n    \ntrain_[\"school\"] = train_.grade.apply(get_school_level)\n\nprint(train_.shape)\ntrain_.tail()","6ac8bfdc":"print(\"Max Target - Easiest to read - lowest grade level\\n\")\nprint(train_[train_.target == train_.target.max()].excerpt.values[0])\n\nprint(\"\\n-------------------------\\n\")\n\nprint(\"Min Target - Hardest to read - highest grade level\\n\")\nprint(train_[train_.target == train_.target.min()].excerpt.values[0])","c57e03cd":"train_.target.plot.hist();","4e60e808":"train = train_.copy()\n\npyphen = Pyphen(lang=\"en\")\n\ndef syllables(word):\n    return len(pyphen.positions(word)) + 1\n\ndef engineer_features(df):\n    word_tok = df.excerpt.apply(nltk.tokenize.word_tokenize)\n    sent_tok = df.excerpt.apply(nltk.tokenize.sent_tokenize)\n    syls_tok = word_tok.apply(lambda x: [syllables(w) for w in x])\n\n    total_charachters = word_tok.apply(lambda x: np.sum([len(w) for w in x]))\n    total_words = word_tok.apply(lambda x: len(x))\n    total_syllables = syls_tok.apply(lambda x: np.sum(x))\n    total_sentences = sent_tok.apply(lambda x: len(x))\n\n    df[\"unique_words\"] = word_tok.apply(lambda x: np.unique(x).shape[0]) \/ total_words\n    df[\"words_geq_len8\"] = word_tok.apply(lambda x: np.sum([len(w) >= 8 for w in x])) \/ total_words\n    df[\"hard_words\"] = syls_tok.apply(lambda x: np.sum([s >= 3 for s in x])) \/ total_words\n\n    df[\"characters_per_word\"] = total_charachters \/ total_words\n    df[\"syllables_per_word\"] = total_syllables \/ total_words\n    df[\"words_per_sentence\"] = total_words \/ total_sentences\n\nengineer_features(train)\ntrain.drop(columns=[\"standard_error\", \"grade\"]).corr()","b3f5e521":"non_text_features = [\n    \"unique_words\",\n    \"words_geq_len8\",\n    \"words_per_sentence\"\n]\n\nwith tb.GroupBy(train, \"grade\") as g:\n    g.mean(non_text_features, decimals=2)\n    grade_summary = g.summarise()\n    \ngrade_summary = grade_summary \\\n    .stack() \\\n    .rename(\"value\") \\\n    .reset_index() \\\n    .rename(columns={\"level_1\": \"feature\"})\n\ng = sns.FacetGrid(grade_summary, col=\"feature\", col_wrap=3, sharey=False, height=4)\ng.map_dataframe(sns.barplot, x=\"grade\", y=\"value\");","ce6d0174":"from sklearn.model_selection import cross_val_score, GridSearchCV\n\nfrom sklearn.preprocessing import StandardScaler, PolynomialFeatures\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.decomposition import PCA\n\nfrom sklearn.dummy import DummyRegressor\nfrom sklearn.linear_model import RidgeCV, LassoCV\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.ensemble import RandomForestRegressor\n\nfrom sklearn.pipeline import Pipeline, make_pipeline\nfrom sklearn.compose import make_column_transformer\n\nfrom sklearn.feature_selection import RFECV","ce326259":"gs_params = {\n    \"cv\": 10, \n    \"scoring\": \"neg_root_mean_squared_error\", \n    \"n_jobs\": -1, \n    \"verbose\": 2\n}\n\nmodel_grid = {\"reg\": [\n    DummyRegressor(),\n    LinearRegression(),\n    RidgeCV(),\n    RandomForestRegressor(max_depth=3, random_state=123)\n]}\n\npipe = Pipeline([\n    (\"impute\", SimpleImputer(strategy=\"median\")),\n    (\"scale\", StandardScaler()),\n    (\"reg\", RidgeCV())\n])\n\ngrid = GridSearchCV(pipe, model_grid, **gs_params)\n\nX = train[non_text_features]\ny = train.target\n\ngrid.fit(X, y)\n\npd.DataFrame(grid.cv_results_)[[\"param_reg\", \"mean_test_score\", \"std_test_score\"]]","13a15062":"non_text_pipe = Pipeline([\n    (\"impute\", SimpleImputer(strategy=\"median\")),\n    (\"scale\", StandardScaler()),\n    (\"poly\", PolynomialFeatures()),\n    (\"feat\", RFECV(LinearRegression(), cv=10)),\n    (\"reg\", RidgeCV())\n])\n\ngrid = GridSearchCV(non_text_pipe, model_grid, **gs_params)\ngrid.fit(X, y)\n\npd.DataFrame(grid.cv_results_)[[\"param_reg\", \"mean_test_score\", \"std_test_score\"]]","83501578":"non_text_lm = Pipeline([\n    (\"impute\", SimpleImputer(strategy=\"median\")),\n    (\"scale\", StandardScaler()),\n    (\"reg\", LinearRegression())\n])\n\nscores = cross_val_score(non_text_lm, X, y, **gs_params)\nprint(\"RMSE (cv={}): {:.3f} ({:.3f})\".format(*summarise_cv_scores(-scores)))\n\nnon_text_lm.fit(X, y)\ncoefs = pd.DataFrame({\"coef\": non_text_lm.named_steps[\"reg\"].coef_}, index=non_text_features)\ncoefs.sort_values(\"coef\").plot.barh()","c5fd757a":"from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer\n\ntm_grid = {\"reg\": [\n    LinearRegression(),\n    Ridge(),\n    Lasso()\n]}\n\ntext_pipe = Pipeline([\n    (\"count\", CountVectorizer()),\n    (\"scale\", TfidfTransformer()),\n    (\"reg\", Ridge())\n])\n\ngrid = GridSearchCV(text_pipe, tm_grid, **gs_params)\ngrid.fit(train.excerpt, train.target)\n\npd.DataFrame(grid.cv_results_)[[\"param_reg\", \"mean_test_score\", \"std_test_score\"]]","2088257a":"from sklearn.compose import make_column_transformer\nfrom sklearn.pipeline import make_pipeline\n\nnon_text_trans = make_pipeline(\n    SimpleImputer(strategy=\"median\"),\n    StandardScaler(),\n    PolynomialFeatures(),\n    RFECV(LinearRegression(), cv=10)\n)\n\ntext_trans = make_pipeline(\n    CountVectorizer(),\n    TfidfTransformer(),\n)\n\ncombined_pipe = Pipeline([\n    (\"transform\", make_column_transformer(\n        (non_text_trans, non_text_features),\n        (text_trans, \"excerpt\"),\n        remainder=\"drop\"\n    )),\n    (\"predict\", Ridge())\n])\n\nscores = cross_val_score(combined_pipe, train, train.target, **gs_params)\nprint(\"RMSE (cv={}): {:.3f} ({:.3f})\".format(*summarise_cv_scores(-scores)))","a8f9cd21":"test = pd.read_csv(\"\/kaggle\/input\/commonlitreadabilityprize\/test.csv\")\nengineer_features(test)\n\ntrain_cols = [\"excerpt\"] + non_text_features\ncombined_pipe.fit(train[train_cols], train.target.values)\ntest_pred = combined_pipe.predict(test[train_cols])\n\nsubmission = pd.DataFrame({\n    \"id\": test.id,\n    \"target\": test_pred\n})\n\nsubmission","48815c2b":"submission.to_csv(\"submission.csv\", index=False)","7846f230":"## Non-Text Features","1c7e7a4e":"## Set Up\n\nTo start, I read in the training data and select the columns I care about.\n\nThen I assign an approx grade by dividing the target into 10 regioins (deciles, grades 3-12).","252c343e":"## Combine Non-Text and Simple NLP","a90fe9de":"## Simple NLP","94e9d89e":"Looking at the distribution above, the target is pretty normal. This tells me there is lots of overlap between grade level readability... or as the discussion puts it, the categories are squisy....\n\nHowever below, using the approx grade level, the words being used on average for higher grade levels are longer.","087f319b":"With no NLP, just summary stats about the vocab of the text, we get an average RMSE across 10 folds of .84 for the Ridge regression. We'll need to halve that to win...","21a1e613":"Next, we look at an example of the easiest and hardest (by target) excerpts to read. As per the discussion and by example, higher scores are eaiser (lower grade level), lower scores are harder (higher grade level)."}}