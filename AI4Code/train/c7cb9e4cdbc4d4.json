{"cell_type":{"0b3aaed7":"code","37cbef97":"code","03c27030":"code","e3b0b8bc":"code","0ad6eddf":"code","75f67f0f":"markdown"},"source":{"0b3aaed7":"import numpy as np\nimport pandas as pd\nimport random\nfrom sklearn.datasets import make_classification\nfrom sklearn.neighbors import NearestNeighbors","37cbef97":"def create_dataset(n_sample=1000):\n    ''' \n    Create a unevenly distributed sample data set multilabel  \n    classification using make_classification function\n    \n    args\n    nsample: int, Number of sample to be created\n    \n    return\n    X: pandas.DataFrame, feature vector dataframe with 10 features \n    y: pandas.DataFrame, target vector dataframe with 5 labels\n    '''\n    X, y = make_classification(n_classes=5, class_sep=2,\n                               weights=[0.1,0.025, 0.205, 0.008, 0.9], n_informative=3, n_redundant=1, flip_y=0,\n                               n_features=10, n_clusters_per_class=1, n_samples=1000, random_state=10)\n    y = pd.get_dummies(y, prefix='class')\n    return pd.DataFrame(X), y\n\ndef get_tail_label(df: pd.DataFrame, ql=[0.05, 1.]) -> list:\n    \"\"\"\n    Find the underrepresented targets.\n    Underrepresented targets are those which are observed less than the median occurance.\n    Targets beyond a quantile limit are filtered.\n    \"\"\"\n    irlbl = df.sum(axis=0)\n    irlbl = irlbl[(irlbl > irlbl.quantile(ql[0])) & ((irlbl < irlbl.quantile(ql[1])))]  # Filtering\n    irlbl = irlbl.max() \/ irlbl\n    threshold_irlbl = irlbl.median()\n    tail_label = irlbl[irlbl > threshold_irlbl].index.tolist()\n    return tail_label\n\ndef get_minority_samples(X: pd.DataFrame, y: pd.DataFrame, ql=[0.05, 1.]):\n    \"\"\"\n    return\n    X_sub: pandas.DataFrame, the feature vector minority dataframe\n    y_sub: pandas.DataFrame, the target vector minority dataframe\n    \"\"\"\n    tail_labels = get_tail_label(y, ql=ql)\n    index = y[y[tail_labels].apply(lambda x: (x == 1).any(), axis=1)].index.tolist()\n    \n    X_sub = X[X.index.isin(index)].reset_index(drop = True)\n    y_sub = y[y.index.isin(index)].reset_index(drop = True)\n    return X_sub, y_sub\n\ndef nearest_neighbour(X: pd.DataFrame, neigh) -> list:\n    \"\"\"\n    Give index of 10 nearest neighbor of all the instance\n    \n    args\n    X: np.array, array whose nearest neighbor has to find\n    \n    return\n    indices: list of list, index of 5 NN of each element in X\n    \"\"\"\n    nbs = NearestNeighbors(n_neighbors=neigh, metric='euclidean', algorithm='kd_tree').fit(X)\n    euclidean, indices = nbs.kneighbors(X)\n    return indices\n\ndef MLSMOTE(X, y, n_sample, neigh=5):\n    \"\"\"\n    Give the augmented data using MLSMOTE algorithm\n    \n    args\n    X: pandas.DataFrame, input vector DataFrame\n    y: pandas.DataFrame, feature vector dataframe\n    n_sample: int, number of newly generated sample\n    \n    return\n    new_X: pandas.DataFrame, augmented feature vector data\n    target: pandas.DataFrame, augmented target vector data\n    \"\"\"\n    indices2 = nearest_neighbour(X, neigh=5)\n    n = len(indices2)\n    new_X = np.zeros((n_sample, X.shape[1]))\n    target = np.zeros((n_sample, y.shape[1]))\n    for i in range(n_sample):\n        reference = random.randint(0, n-1)\n        neighbor = random.choice(indices2[reference, 1:])\n        all_point = indices2[reference]\n        nn_df = y[y.index.isin(all_point)]\n        ser = nn_df.sum(axis = 0, skipna = True)\n        target[i] = np.array([1 if val > 0 else 0 for val in ser])\n        ratio = random.random()\n        gap = X.loc[reference,:] - X.loc[neighbor,:]\n        new_X[i] = np.array(X.loc[reference,:] + ratio * gap)\n    new_X = pd.DataFrame(new_X, columns=X.columns)\n    target = pd.DataFrame(target, columns=y.columns)\n    return new_X, target","03c27030":"X, y = create_dataset()  # Creating a Dataframe\nX_sub, y_sub = get_minority_samples(X, y)  # Getting minority samples of that datframe\nX_res, y_res = MLSMOTE(X_sub, y_sub, 100, 5)  # Applying MLSMOTE to augment the dataframe","e3b0b8bc":"y_res.head()","0ad6eddf":"X_res.head()","75f67f0f":"# MLSMOTE\n\nA python code that implemented the [MLSMOTE](https:\/\/www.sciencedirect.com\/science\/article\/abs\/pii\/S0950705115002737) algorithm was available here: https:\/\/github.com\/niteshsukhwani\/MLSMOTE. However, the code had a bug and wasn't efficiently using the pandas. I fixed and modified the code, and here it is.\n\n**If you find this notebook useful, please don't forget to upvote.**"}}