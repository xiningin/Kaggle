{"cell_type":{"d31b3c9e":"code","bd8c4dc3":"code","e109a724":"code","460c5dba":"code","d333de91":"code","7a00b698":"code","330ee4d1":"code","448d7608":"code","06bc7288":"code","e86e604a":"code","88b046f5":"code","988cac83":"code","db81c2b9":"code","99b4f744":"code","71fd5275":"code","110d969f":"code","d38c012b":"code","895a8bbb":"code","6a0221ed":"code","1df04868":"code","f840ed91":"code","4fa3a8a1":"code","830e1d1b":"code","5a2774c8":"code","d403fffd":"code","e328b488":"code","cdb6483d":"code","3a3a3f18":"code","af975435":"code","623ecc1f":"code","c79987cf":"code","d478d141":"code","e3be431c":"code","e8bf20e6":"code","b3828f5a":"code","f1950b44":"code","0cd869c5":"code","976e1e09":"code","4e4e81c9":"code","79a302ed":"code","4347eb30":"code","50165143":"code","af7371ab":"code","08c32e22":"code","db67409e":"code","a4be6e55":"code","15530917":"code","2c30267d":"code","285f819a":"code","4d8b723b":"code","7a9e8a3e":"code","e00a763f":"code","2f8295c1":"code","f9cc1ebf":"markdown","d6933361":"markdown","e54e2040":"markdown","2fe5c34f":"markdown","54028867":"markdown","15d9705c":"markdown","84f9e2ef":"markdown","a3d9f336":"markdown","23d3d001":"markdown"},"source":{"d31b3c9e":"import pandas as pd                                 # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport numpy as np                                  # linear algebra\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import confusion_matrix,accuracy_score,precision_score,recall_score,f1_score,classification_report\nfrom sklearn.preprocessing import StandardScaler\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n","bd8c4dc3":"# Loading the Dataset using Pandas Library using pd.read_csv(filename with extenstion)\n\ndataframe=pd.read_csv(\"..\/input\/redwinequality\/redwinequality.csv\")","e109a724":"dataframe    #print the all the row of the dataset","460c5dba":"#view the first five rows of the dataset\n\ndataframe.head()","d333de91":"#view the last five rows of the dataset\n\n\ndataframe.tail()","7a00b698":"# print the random five rows of the dataset\n\ndataframe.sample(5)","330ee4d1":"#print the number of rows and column of the dataset\n\ndataframe.shape\n","448d7608":"#print the information of the dataset\n# info(): This method prints information about a DataFrame including the index dtype and column dtypes, non-null values\n\ndataframe.info()","06bc7288":"# print the stastical information of the dataset\n# describe() : is used to view some basic statistical details like percentile,mean, std, etc\n\n\ndataframe.describe()","e86e604a":"#Checking for Null \/ Missing Values\n\ndataframe.isnull().sum()\n","88b046f5":"duplicate = dataframe.duplicated()\nprint(duplicate.sum())\ndataframe[duplicate]","988cac83":"#call drop duplicate on ataframe to remove dulicate and assign it back to dataframe\n\ndataframe.drop_duplicates(inplace=True)","db81c2b9":"#after removing duplicate data\n\ndataframe.shape","99b4f744":"1599-1359","71fd5275":"#view the number of labes of each class\n\nprint(dataframe.quality.value_counts())","110d969f":"plt.figure(figsize = (12,6))\nsns.countplot(dataframe['quality'])\nplt.show()","d38c012b":"dataframe.corr()","895a8bbb":"plt.figure(figsize = (12,6))\nsns.scatterplot(x='citric acid', y = 'pH', data = dataframe)\nplt.show()","6a0221ed":"plt.figure(figsize = (12,6))\nsns.barplot(x='quality', y = 'alcohol', data = dataframe, palette = 'inferno')\nplt.show()","1df04868":"plt.figure(figsize = (12,6))\nsns.heatmap(dataframe.corr())\nplt.title('Heatmap for Correlation of Parameters')\nplt.show()","f840ed91":"corr = dataframe.corr()\nplt.figure(figsize=(20,10))\nsns.heatmap(corr, annot = True, cmap = 'coolwarm')\nplt.title('Heatmap with cool and warm value')\n","4fa3a8a1":"plt.figure(figsize = (12,6))\nsns.pairplot(dataframe)\nplt.show()","830e1d1b":"# PLotting Histogram for whole dataset using hist()\n\ndataframe.hist(figsize=(17,12),color='red')\nplt.show()","5a2774c8":"# Quality is out target variable so we are see its distribution  \n\ndataframe['quality'].hist(color='yellow')\nplt.title('Quality of wine')\nplt.show()","d403fffd":"#create seperate objects \ntarget = 'quality'\n\n#seperate obj for target features\ny = dataframe[target]\n\n#seperate obj for input features\nX = dataframe.drop(target, axis = 1)","e328b488":"X.head()","cdb6483d":"y.head()","3a3a3f18":"X.shape","af975435":"y.shape","623ecc1f":"#standard scalling\nsc = StandardScaler()\nx_res = sc.fit_transform(X)\n","c79987cf":"x_res","d478d141":"\nvif = pd.DataFrame()\nvif[\"vif\"] = [variance_inflation_factor(x_res,i) for i in range(x_res.shape[1])]\nvif[\"Features\"] = X.columns\n\n#chack the values\nvif\n","e3be431c":"x_res.shape","e8bf20e6":"X1 = X.drop(['density'], axis=1)\nX1.shape","b3828f5a":"scaler = StandardScaler()\nscaler.fit(X1)\nrescaled = scaler.transform(X1)","f1950b44":"rescaled.shape","0cd869c5":"y.value_counts()","976e1e09":"sns.countplot(dataframe['quality'])","4e4e81c9":"X_train, X_test, y_train, y_test = train_test_split(rescaled, y, test_size=0.2, random_state=7)","79a302ed":"X_train.shape,y_train.shape","4347eb30":"X_test.shape,y_test.shape","50165143":"dt = DecisionTreeClassifier()\ndt.fit(X_train,y_train)","af7371ab":"dt_train_pred = dt.predict(X_train)\ndt_test_pred = dt.predict(X_test)","08c32e22":"#confusion_matrix,accuracy_score,precision_score,recall_score\nprint('Train Accuracy:-', accuracy_score(y_train,dt_train_pred)*100)","db67409e":"print('Accuracy Score:-', accuracy_score(y_test,dt_test_pred)*100)","a4be6e55":"#Confusion Matrix\nprint(confusion_matrix(y_test, dt_test_pred))","15530917":"#claffision report\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test, dt_test_pred,digits=4))","2c30267d":"#macro avarage = avarage socre of all (6) classes\n(0.0000+0.1053+0.6750+0.4468+0.3824+0.2500)\/6","285f819a":"print(\"Precision Score of macro is:-\",round(precision_score(y_test,dt_test_pred,average='macro')*100,2))\nprint(\"Precision Score of micro is:-\",round(precision_score(y_test,dt_test_pred,average='micro')*100,2))\nprint(\"Precision Score of weighted is:-\",round(precision_score(y_test,dt_test_pred,average='weighted')*100,2))","4d8b723b":"print(\"Recall Score of macro is:-\",round(recall_score(y_test,dt_test_pred,average='macro')*100,2))\nprint(\"Recall Score of micro is:-\",round(recall_score(y_test,dt_test_pred,average='micro')*100,2))\nprint(\"Recall Score of weighted is:-\",round(recall_score(y_test,dt_test_pred,average='weighted')*100,2))\n","7a9e8a3e":"print(\"f1_score of macro is:-\",round(f1_score(y_test,dt_test_pred,average='macro')*100,2))\nprint(\"f1_score of macro is:-\",round(f1_score(y_test,dt_test_pred,average='micro')*100,2))\nprint(\"f1_score of macro is:-\",round(f1_score(y_test,dt_test_pred,average='weighted')*100,2))\n\n","e00a763f":"dataframe.head()","2f8295c1":"\ninput_data = (7.4,0.70,0.00,1.9,0.076,11.0,34.0,3.51,0.56,9.4)\n\n#changing the input data to a numpy array\ninput_data_as_numpy_array = np.asarray(input_data)\n\n#reshape the data as we are predicting the label for only one instance\ninput_data_reshaped = input_data_as_numpy_array.reshape(1,-1)\n\nprediction = dt.predict(input_data_reshaped)\nprint(prediction)","f9cc1ebf":"## f1_score","d6933361":"# Create TEST and TEST Datasets","e54e2040":"## Decision tree","2fe5c34f":"# Recall","54028867":"# coorelation matrix","15d9705c":"# Datafram devide into indepedent and depedent variables","84f9e2ef":"# Modeling","a3d9f336":"# Check duplicate records","23d3d001":"### Precision"}}