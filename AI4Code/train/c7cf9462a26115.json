{"cell_type":{"e3409075":"code","c982c7ad":"code","107d977f":"code","223616d8":"code","325f5d70":"code","84e5206f":"code","4deb8073":"code","99bdb248":"code","761b2329":"code","8ff1f08b":"code","197cfa33":"code","18e03b6a":"code","0b917076":"code","f456795d":"markdown","3d455925":"markdown","9ff41804":"markdown","400b1fda":"markdown"},"source":{"e3409075":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfilelist = list()\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        filename = os.path.join(dirname, filename)\n        print(filename)\n        filelist.append(filename)\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c982c7ad":"%%time \n\ndutch_tweet = pd.DataFrame()\nfor filename in filelist:\n    temp = pd.read_json(filename)\n    dutch_tweet = pd.concat([dutch_tweet, temp])\n    print(filename)\n    print(dutch_tweet.shape)","107d977f":"dutch_tweet.columns","223616d8":"from collections import Counter\n\nprovince = Counter(dutch_tweet['province'].values.tolist())\nprovince.most_common()","325f5d70":"len(province)","84e5206f":"provinceDF = pd.DataFrame(list(zip(province.keys(),province.values())),columns=[\"province\", \"frequency\"] ) ","4deb8073":"# plotly\n# import plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# word cloud library\nfrom wordcloud import WordCloud\n\n# matplotlib\nimport matplotlib.pyplot as plt","99bdb248":"# prepare frame by renaming Unavailable data as NA\nprovinceDF.sort_values(by='frequency' , inplace=True)\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n# Creating trace1\ntrace1 = go.Bar(\n                    x = provinceDF.province,\n                    y = provinceDF.frequency,\n                    name = \"geospread\",\n                marker = dict(color = 'rgba(255, 174, 255, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = provinceDF.province)\n\ndata = [trace1]\nlayout = dict(title = 'Users from province',\n              xaxis= dict(title= 'province',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'frequency',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","761b2329":"dutch_tweet.industry.value_counts()","8ff1f08b":"hisco_code = Counter(dutch_tweet['hisco_code'])\nhisco_standard = Counter(dutch_tweet['hisco_standard'])","197cfa33":"# prepare dataset \nhisco_standard_df = pd.DataFrame(zip(hisco_standard.keys(), hisco_standard.values()), columns=[\"HISCO_STD\",\"Frequency\"]).sort_values(by=[\"Frequency\"], ascending=False).reset_index(drop=True)\nhisco_standard_df = hisco_standard_df.iloc[1:,:]","18e03b6a":"# Creating trace1\ntrace1 = go.Bar(\n                    x = hisco_standard_df.HISCO_STD,\n                    y = hisco_standard_df.Frequency,\n                    name = \"Industry Code\",\n                marker = dict(color = 'rgba(0, 174, 255, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = hisco_standard_df.HISCO_STD)\n\ndata = [trace1]\nlayout = dict(title = 'Industry standard code(HISCO)',\n              xaxis= dict(title= 'HISCO Standard',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Frequency',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","0b917076":"# prepare dataset \nhisco_code_df = pd.DataFrame(zip(hisco_code.keys(), hisco_code.values()), columns=[\"HISCO_CODE\",\"Frequency\"]).sort_values(by=[\"Frequency\"], ascending=False).reset_index(drop=True)\nhisco_code_df = hisco_code_df.iloc[1:,:]\n\n# Creating trace1\ntrace2 = go.Bar(\n                    x = hisco_code_df.HISCO_CODE,\n                    y = hisco_code_df.Frequency,\n                    name = \"HISCO Code\",\n                marker = dict(color = 'rgba(0, 174, 255, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = hisco_code_df.HISCO_CODE)\n\ndata = [trace2]\nlayout = dict(title = 'Industry standard code(HISCO)',\n              xaxis= dict(title= 'HISCO CODE',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Frequency',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","f456795d":"* Total wall time reading the 10 json files: 1min 1sec (*for excel files>> 1min 53sec*)\n* Number of rows: 271,342\n* Number of columns: 20","3d455925":"###UPDATED: 4th DECEMBER 2020\n\nFiles were converted to json files (*prv the data was in excel format*)\n\nSentiment & subjectivity scores were added using pattern library\n\nweekofyear was added for each tweet","9ff41804":"* Industry classification is possible for 25% of the tweets\n* There is long tail for HISCO codes as can be seen from the below plots ","400b1fda":"* Normally users don't enable their location information while tweeting. (almost never!) \n* Geo-location data is considerd if the user has shared their location\n* 60% of the users have not provided their location in their bios ( 161\/271) \n* The distribution of other users is shown below"}}