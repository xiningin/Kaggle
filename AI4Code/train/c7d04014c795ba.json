{"cell_type":{"73d08163":"code","1380c95b":"code","52f36574":"code","2475e56b":"code","fc5b10b6":"code","7919588f":"code","69f2d391":"code","7097a0f3":"code","007c2b92":"code","146c74e3":"code","eeae8227":"code","b7785610":"code","eefbf287":"code","56780201":"code","34cf2f70":"code","9ec0c027":"markdown"},"source":{"73d08163":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport nltk\nfrom nltk.corpus import stopwords\nimport string\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1380c95b":"emails_df = pd.read_csv('..\/input\/emails-dataset-spam-detection\/emails.csv')\nemails_df","52f36574":"emails_df.isnull().sum()","2475e56b":"emails_df.shape","fc5b10b6":"emails_df.drop_duplicates(inplace=True)\nemails_df.shape","7919588f":"nltk.download('stopwords')","69f2d391":"def textClean(text):\n    nopunc = [char for char in text if char not in string.punctuation]\n    nopunc = ''.join(nopunc)\n    \n    clean = [word for word in nopunc.split() if word.lower() not in stopwords.words('english')]\n    return clean\nemails_df.text.head(10).apply(textClean)","7097a0f3":"from sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(analyzer=textClean)\nmessage = vectorizer.fit_transform(emails_df['text'])\nmessage.shape","007c2b92":"#split the data into 80% training and 20% testing\nfrom sklearn.model_selection import train_test_split\nxtrain, xtest, ytrain, ytest = train_test_split(message,emails_df.spam,test_size=0.20,random_state=0)","146c74e3":"# create and train the Naive Bayes Classifier\nfrom sklearn.naive_bayes import MultinomialNB\nclassifier = MultinomialNB().fit(xtrain, ytrain)","eeae8227":"print(classifier.predict(xtrain))\nprint(ytrain.values)","b7785610":"# Evaluating the model on the training data set\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\npred = classifier.predict(xtrain)\nprint(classification_report(ytrain, pred))\nprint()\nprint(\"Confusion Matrix: \\n\", confusion_matrix(ytrain, pred))\nprint(\"Accuracy: \\n\", accuracy_score(ytrain, pred))","eefbf287":"#print the predictions\nprint(classifier.predict(xtest))\n#print the actual values\nprint(ytest.values)","56780201":"# Evaluating the model on the training data set\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\npred = classifier.predict(xtrain)\nprint(classification_report(ytrain, pred))\nprint()\nprint(\"Confusion Matrix: \\n\", confusion_matrix(ytrain, pred))\nprint(\"Accuracy: \\n\", accuracy_score(ytrain, pred))","34cf2f70":"# Evaluating the model on the test data set\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\npred = classifier.predict(xtest)\nprint(classification_report(ytest, pred))\nprint()\nprint(\"Confusion Matrix: \\n\", confusion_matrix(ytest, pred))\nprint(\"Accuracy: \\n\", accuracy_score(ytest, pred))","9ec0c027":"# Learn from here"}}