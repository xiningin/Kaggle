{"cell_type":{"701c6dfb":"code","bf9f62a2":"code","e3f5e659":"code","0680f09e":"code","5821eb5a":"code","ab1e8816":"code","f6173296":"code","48b41acf":"code","6120c7bc":"code","86e78faa":"code","12556673":"code","a63b5879":"code","8bd7f0df":"code","885016ea":"code","84c78d24":"code","8a379eb0":"code","e4794e13":"code","ca59ed04":"code","6c4274fa":"code","851cc0c0":"code","6a773356":"code","7c955679":"code","0cfa74b1":"code","7e889753":"code","8faae721":"code","5b2e39f3":"code","777025ee":"code","feb62cf7":"code","39c949e6":"code","ab595cd7":"code","f2e16a10":"code","b649942b":"code","663fa3df":"code","0c1bfba0":"code","a9dbed67":"code","207648c9":"code","36272b9e":"code","37c6e148":"code","87b7d751":"code","46ebcc01":"code","d2c562d8":"code","4b9d9aac":"code","da7f9787":"code","9480f23c":"code","3c06e4b4":"code","28f77313":"code","dc43de60":"code","8d6fba5e":"code","912dddef":"code","4b6cfa33":"code","77333252":"code","696a1bc8":"code","d00dce1a":"code","63fa6cef":"code","778b6df0":"code","83f23951":"code","149fe728":"code","a93cacd5":"code","5853906f":"code","629c51fe":"code","1ad107e9":"code","f3f44497":"code","a7e0d098":"code","f1b5168e":"code","00173c75":"code","6b655335":"code","b7f127bb":"code","0bd78d9a":"code","55343f27":"code","2e04681c":"code","4648a678":"code","b3f894ab":"code","6bdbdb48":"code","d087b730":"code","0c776ad4":"code","1c0d9950":"code","196a8754":"code","ed0cebb6":"code","0adb25b9":"code","9ad4aa26":"code","de5412f5":"code","323821f4":"code","c70b4f57":"code","6c3a907d":"code","bb40a9b0":"code","9fd46063":"code","2e7dc544":"code","384a5418":"code","1a11284f":"code","4c77877b":"code","a92461a8":"markdown","ec560cae":"markdown","aa9fbdc5":"markdown","b0b8d090":"markdown","dd7508d5":"markdown","eb6c1bfe":"markdown","de264184":"markdown","d2ccfd02":"markdown","6145c382":"markdown","02318f3c":"markdown","6990d45a":"markdown","6e8cb46d":"markdown","81245079":"markdown","1e6ca03c":"markdown","7cfa8898":"markdown","4018226f":"markdown","3a5ae820":"markdown","2e97990a":"markdown","af314da3":"markdown","75a6a413":"markdown","117d9f0e":"markdown","4d1b7123":"markdown","3dfd090c":"markdown","42891699":"markdown","898464b5":"markdown","090699d5":"markdown"},"source":{"701c6dfb":"from google.colab import drive\n\ndrive.mount(\"\/content\/gdrive\",force_remount=False)","bf9f62a2":"#importing the required libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel\n","e3f5e659":"from google.colab import drive\ndrive.mount('\/content\/drive')","0680f09e":"ratings = pd.read_csv('\/content\/drive\/My Drive\/ratings.csv')\nlen(ratings)","5821eb5a":"ratings.columns","ab1e8816":"ratings_df = ratings.groupby(['userId','movieId']).aggregate(np.max)","f6173296":"len(ratings_df)","48b41acf":"ratings.head()","6120c7bc":"ratings_df.head()","86e78faa":"len(ratings['userId'].unique())","12556673":"count_ratings = ratings.groupby('rating').count()\ncount_ratings['perc_total']=round(count_ratings['userId']*100\/count_ratings['userId'].sum(),1)","a63b5879":"count_ratings","8bd7f0df":"count_ratings['perc_total'].plot.bar()","885016ea":"movie_list = pd.read_csv('\/content\/drive\/My Drive\/movies.csv')","84c78d24":"len(movie_list)","8a379eb0":"movie_list.head()","e4794e13":"tags = pd.read_csv('\/content\/drive\/My Drive\/tags.csv')","ca59ed04":"tags.head()","6c4274fa":"genres = movie_list['genres']","851cc0c0":"genres.head()\n","6a773356":"genre_list = \"\"\nfor index,row in movie_list.iterrows():\n        genre_list += row.genres + \"|\"\n#split the string into a list of values\ngenre_list_split = genre_list.split('|')\n#de-duplicate values\nnew_list = list(set(genre_list_split))\n#remove the value that is blank\nnew_list.remove('')\n#inspect list of genres\nnew_list","7c955679":"for genre in new_list :\n    movie_list[genre] = movie_list.apply(lambda _:int(genre in _.genres), axis = 1)","0cfa74b1":"movie_list.head()","7e889753":"movie_list['movieId'] = movie_list['movieId'].astype(object)","8faae721":"movie_list.shape","5b2e39f3":"no_of_users = len(ratings['userId'].unique())\nno_of_movies = len(ratings['movieId'].unique())\n\nsparsity = round(1.0 - len(ratings)\/(1.0*(no_of_movies*no_of_users)),3)\nprint(sparsity)","777025ee":"len(ratings['movieId'].unique())","feb62cf7":"avg_movie_rating = pd.DataFrame(ratings.groupby('movieId')['rating'].agg(['mean','count']))\navg_movie_rating['movieId']= avg_movie_rating.index","39c949e6":"avg_movie_rating.head()","ab595cd7":"len(avg_movie_rating)","f2e16a10":"#Get the average movie rating across all movies \navg_rating_all=ratings['rating'].mean()\navg_rating_all\n#set a minimum threshold for number of reviews that the movie has to have\nmin_reviews=5\nmin_reviews\nmovie_score = avg_movie_rating.loc[avg_movie_rating['count']>min_reviews]\nmovie_score.head()","b649942b":"def weighted_rating(x, m=min_reviews, C=avg_rating_all):\n    v = x['count']\n    R = x['mean']\n    # Calculation based on the IMDB formula\n    return (v\/(v+m) * R) + (m\/(m+v) * C)","663fa3df":"movie_score['weighted_score'] = movie_score.apply(weighted_rating, axis=1)\nmovie_score.head()","0c1bfba0":"movie_score = movie_score.drop(columns = 'movieId')","a9dbed67":"movie_score.reset_index()","207648c9":"movie_score = pd.merge(movie_score,movie_list,on='movieId')\nmovie_score.head()","36272b9e":"movie_score = pd.merge(movie_score,tags,on='movieId')","37c6e148":"movie_score.head()","87b7d751":"movie_score.shape","46ebcc01":"def best_movies_by_genre(genre,top_n):\n    d = pd.DataFrame(movie_score.loc[(movie_score[genre]==1)].sort_values(['weighted_score'],ascending=False)[['title','count','mean','weighted_score']])\n    d = d.drop_duplicates(keep = \"first\")\n    return d[:top_n]","d2c562d8":"#run function to return top recommended movies by genre\nbest_movies_by_genre('Comedy',10)","4b9d9aac":"#run function to return top recommended movies by genre\nbest_movies_by_genre('Action',10)","da7f9787":"#run function to return top recommended movies by genre\nbest_movies_by_genre('Drama',10)","9480f23c":"def best_movies_bollywood():\n    d= pd.DataFrame(movie_score.loc[(movie_score[\"tag\"]==\"Bollywood\")].sort_values(['weighted_score'],ascending=False)[['title','count','mean','weighted_score','tag']])\n    d = d.drop_duplicates(keep = \"first\")\n    e = pd.DataFrame(movie_score.loc[(movie_score[\"tag\"]==\"bollywood\")].sort_values(['weighted_score'],ascending=False)[['title','count','mean','weighted_score','tag']])\n    e = e.drop_duplicates(keep = \"first\")\n    e.append(d)\n    return e","3c06e4b4":"best_movies_bollywood()","28f77313":"def best_movies_by_genre(genre,top_n):\n    d= pd.DataFrame(movie_score.loc[(movie_score[genre]==1) & ((movie_score[\"tag\"]==\"Bollywood\") | (movie_score[\"tag\"]==\"bollywood\"))].sort_values(['weighted_score'],ascending=False)[['title','count','mean','weighted_score','tag']])\n    d = d.drop_duplicates(keep = \"first\")\n    return d[:top_n]","dc43de60":"best_movies_by_genre('Drama',10)","8d6fba5e":"best_movies_by_genre('Romance',10)","912dddef":"best_movies_by_genre('Animation',10)","4b6cfa33":"best_movies_by_genre('Comedy',10)","77333252":"# Gives the best movies according to genre based on weighted score which is calculated using IMDB formula\ndef best_movies_by_genre(genre,top_n):\n    d= pd.DataFrame(movie_score.loc[(movie_score[genre]==1) & ((movie_score[\"tag\"]==\"Hollywood\") | (movie_score[\"tag\"]==\"hollywood\"))].sort_values(['weighted_score'],ascending=False)[['title','count','mean','weighted_score','tag']])\n    d = d.drop_duplicates(keep = \"first\")[:top_n]\n    return d","696a1bc8":"best_movies_by_genre('Drama',10)","d00dce1a":"best_movies_by_genre('Action',10)","63fa6cef":"best_movies_by_genre('Children',10)","778b6df0":"best_movies_by_genre('Romance',10)","83f23951":"# Gives the best movies according to 2 genres based on weighted score which is calculated using IMDB formula\ndef best_movies_by_collective_genre(genre1,genre2,top_n):\n    d = pd.DataFrame(movie_score.loc[(movie_score[genre1]==1) & (movie_score[genre2]==1)].sort_values(['weighted_score'],ascending=False)[['title','count','mean','weighted_score']])\n    d = d.drop_duplicates(keep = \"first\")\n    return d[:top_n]","149fe728":"best_movies_by_collective_genre(\"Fantasy\", \"Comedy\" ,10)","a93cacd5":"best_movies_by_collective_genre(\"Drama\", \"Action\" ,10)","5853906f":"best_movies_by_collective_genre(\"Drama\", \"Animation\" ,10)","629c51fe":"def best_movies_by_collective_genre(genre1,genre2,genre3,top_n):\n    d = pd.DataFrame(movie_score.loc[(movie_score[genre1]==1) & (movie_score[genre2]==1) & (movie_score[genre3]==1)].sort_values(['weighted_score'],ascending=False)[['title','count','mean','weighted_score']])\n    d = d.drop_duplicates(keep = \"first\")\n    return d[:top_n]","1ad107e9":"best_movies_by_collective_genre(\"Drama\", \"Action\", \"Thriller\" ,5)","f3f44497":"best_movies_by_collective_genre(\"Drama\", \"Children\" , \"Romance\" ,5)","a7e0d098":"tags.head()","f1b5168e":"def best_movies_by_collective_genre(genre1,genre2,genre3,top_n):\n    d = pd.DataFrame(movie_score.loc[(movie_score[genre1]==1) & (movie_score[genre2]==1) & (movie_score[genre3]==1) & ((movie_score[\"tag\"]==\"Hollywood\") | (movie_score[\"tag\"]==\"hollywood\"))].sort_values(['weighted_score'],ascending=False)[['title','count','mean','weighted_score','tag']])\n    d = d.drop_duplicates(keep = \"first\")\n    return d[:top_n]","00173c75":"best_movies_by_collective_genre(\"Drama\", \"Action\", \"Thriller\" ,5)","6b655335":"del tags","b7f127bb":"from sklearn.neighbors import NearestNeighbors\n","0bd78d9a":"avg_movie_rating.head()\n","55343f27":"movie_plus_10_ratings = avg_movie_rating.loc[avg_movie_rating['count']>=10]\nprint(len(movie_plus_10_ratings))","2e04681c":"movie_plus_10_ratings","4648a678":"movie_plus_10_ratings = movie_plus_10_ratings.drop(columns='movieId')","b3f894ab":"movie_plus_10_ratings = movie_plus_10_ratings.reset_index()","6bdbdb48":"movie_plus_10_ratings.head()","d087b730":"movie_plus_10_ratings.shape","0c776ad4":"ratings.head()","1c0d9950":"ratings.shape","196a8754":"filtered_ratings = pd.merge(movie_plus_10_ratings, ratings[:100000], on=\"movieId\")","ed0cebb6":"len(filtered_ratings)","0adb25b9":"#create a matrix table with movieIds on the rows and userIds in the columns.\n#replace NAN values with 0\nmovie_wide = filtered_ratings.pivot(index = 'movieId', columns = 'userId', values = 'rating').fillna(0)\nmovie_wide.head()","9ad4aa26":"#specify model parameters\nmodel_knn = NearestNeighbors(metric='cosine',algorithm='brute')\n#fit model to the data set\nmodel_knn.fit(movie_wide)","de5412f5":"def print_similar_movies(query_index) :\n    #get the list of user ratings for a specific userId\n    query_index_movie_ratings = movie_wide.loc[query_index,:].values.reshape(1,-1)\n    #get the closest 10 movies and their distances from the movie specified\n    distances,indices = model_knn.kneighbors(query_index_movie_ratings,n_neighbors = 11) \n    #write a lopp that prints the similar movies for a specified movie.\n    for i in range(0,len(distances.flatten())):\n        #get the title of the random movie that was chosen\n        get_movie = movie_list.loc[movie_list['movieId']==query_index]['title']\n        #for the first movie in the list i.e closest print the title\n        if i==0:\n            print('Recommendations for {0}:\\n'.format(get_movie))\n        else :\n            #get the indiciees for the closest movies\n            indices_flat = indices.flatten()[i]\n            #get the title of the movie\n            get_movie = movie_list.loc[movie_list['movieId']==movie_wide.iloc[indices_flat,:].name]['title']\n            #print the movie\n            print('{0}: {1}, with distance of {2}:'.format(i,get_movie,distances.flatten()[i]))","323821f4":"print_similar_movies(112552)","c70b4f57":"print_similar_movies(1)","6c3a907d":"print_similar_movies(100)","bb40a9b0":"tfidf = TfidfVectorizer(stop_words=\"english\")\nmovie_list['title'] = movie_list['title'].fillna(\" \")","9fd46063":"overview_matrix = tfidf.fit_transform(movie_list['title'])","2e7dc544":"overview_matrix.shape","384a5418":"similarity_matrix = linear_kernel(overview_matrix,overview_matrix)\nmapping = pd.Series(movie_list.index,index = movie_list[\"title\"])","1a11284f":"def recommend_movies(movie_input):\n    movie_index = mapping[movie_input]\n    #get similarity values with other movies\n    #similarity_score is the list of index and similarity matrix\n    similarity_score = list(enumerate(similarity_matrix[movie_index]))\n    #sort in descending order the similarity score of movie inputted with all the other movies\n    similarity_score = sorted(similarity_score, key=lambda x: x[1], reverse=True)\n    # Get the scores of the 15 most similar movies. Ignore the first movie.\n    similarity_score = similarity_score[1:15]\n    #return movie names using the mapping series\n    movie_indices = [i[0] for i in similarity_score]\n    return (movie_list[\"title\"].iloc[movie_indices])","4c77877b":"recommend_movies(\"Animal Kingdom (2010)\")","a92461a8":"> Finding the average rating for movie and the number of ratings for each movie","ec560cae":"\n\n# > Get top movie recommendations by a combination of genres\n\n\n\n\n\n","aa9fbdc5":"> Visualising the percentage total for each rating","b0b8d090":"# Gives the best movies according to 3 genre based on weighted score which is calculated using IMDB formula\n","dd7508d5":"# COLLABORATIVE FILTERING USING K MEANS CLUSTERING ALGORITHM","eb6c1bfe":"> Reading the tags dataset","de264184":"# > Gives the best movies with BOLLYWOOD tag according to genre based on weighted score which is calculated using IMDB formula\n","d2ccfd02":"> > # Only include movies with more than 10 ratings\n","6145c382":"> # Enriching the movies dataset by adding the various genres columns.\n","02318f3c":">  In this case there are no such cases where the user has rated the same movie twice.\n","6990d45a":"# > Gives the best movies with HOLLYWOOD tag according to genre based on weighted score which is calculated using IMDB formula","6e8cb46d":"Now, we have a \u2018tfidf\u2019 feature matrix for all the movies. Every movie has 21709 number of features (words ). Now, in order to find the similarity between the movies, we will use the cosine_similarity","81245079":"> # This function will give the best movies according to genre based on weighted score which is calculated using **IMDB formula**\n","1e6ca03c":"> Reading the movies dataset","7cfa8898":"> # Creating a function for weighted rating score based on the count of reviews","4018226f":"> # Calculating the sparsity","3a5ae820":"> # Calculating the weighted score for each movie","2e97990a":"> # Hollywood movies from a collection of 3 genres","af314da3":"> # Joining the  movie details to the movie ratings","75a6a413":"> Just including the tag \"bollywood\"","117d9f0e":">  Counting no of unique users\n","4d1b7123":"Mounting at google drive","3dfd090c":"> # Using only the title of the movie","42891699":"> Getting the percentage count of each rating value \n","898464b5":"> # Checking if the user has rated the same movie twice, in that case we just take max of them\n","090699d5":">  Counting the number of unique movies in the dataset."}}