{"cell_type":{"bba2978b":"code","3306dfa0":"code","9591c427":"code","52d3f362":"code","eaf50ab9":"code","9a210fae":"code","fb1a17f6":"code","f9ee244f":"code","ce4dc14f":"code","a0ed44ef":"code","8f15d75e":"code","1817e33f":"code","18cc28d1":"code","78e0e17d":"code","d3d6648a":"code","1828e346":"code","89c74fca":"code","0e6d4e96":"code","305defc3":"code","2435bd05":"code","dff37a2f":"code","9827587a":"code","03e80177":"code","e8fb39d3":"code","23b3e310":"code","d1e6f2ec":"code","2d20ef28":"code","587e3645":"markdown","a2a05063":"markdown","203b22ca":"markdown","60001f3f":"markdown","7778d06f":"markdown","4d6caca2":"markdown","b3e49bf3":"markdown","7c0f5442":"markdown"},"source":{"bba2978b":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score\nfrom scipy import stats\n\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.naive_bayes import GaussianNB","3306dfa0":"df = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")","9591c427":"df.head(10)","52d3f362":"df.shape","eaf50ab9":"df.info()","9a210fae":"df.describe().T","fb1a17f6":"df.isnull().sum()","f9ee244f":"df.duplicated().sum()","ce4dc14f":"plt.figure(figsize=(10,6))\nsns.countplot(df[\"Outcome\"])\nplt.title(\"Quantity of Diabetes\", size=15)\nplt.show()","a0ed44ef":"plt.figure(figsize=(10,6))\nsns.boxplot(x=df[\"Outcome\"], y=df[\"Age\"])\nplt.title(\"Age vs Diabetes\")\nplt.show()","8f15d75e":"plt.figure(figsize=(10,6))\nsns.boxplot(x=df[\"Outcome\"], y=df[\"BMI\"])\nplt.title(\"BMI vs Diabetes\", size=15)\nplt.show()","1817e33f":"people_with_diabetes = df[df[\"Outcome\"]==1]\n\nplt.figure(figsize=(10,6))\nsns.distplot(people_with_diabetes[\"Age\"])\nplt.title(\"Age of the People with Diabetes\", size=15)\nplt.show()","18cc28d1":"plt.figure(figsize=(10,6))\nsns.scatterplot(x=people_with_diabetes[\"Insulin\"], y=people_with_diabetes[\"Glucose\"])\nplt.title(\"Amounts of Glucose and Insulin in the Blood of People with Diabetes\", size=15)\nplt.show()","78e0e17d":"plt.figure(figsize=(10,6))\nsns.distplot(people_with_diabetes[\"BloodPressure\"])\nplt.title(\"Age of the People with Diabetes\", size=15)\nplt.show()","d3d6648a":"df = df[np.abs(stats.zscore(df)<3).all(axis=1)]","1828e346":"df.shape","89c74fca":"X = df.drop(\"Outcome\", axis=1)\ny = df[\"Outcome\"]\n\ndisplay(X.head())\ndisplay(pd.DataFrame(y, columns=[\"Outcome\"]).head())","0e6d4e96":"scaler = StandardScaler()\nX = scaler.fit_transform(X)\nX = pd.DataFrame(X, columns = df.drop(\"Outcome\", axis=1).columns)\nX.head()","305defc3":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","2435bd05":"models = pd.DataFrame(columns=[\"Model\",\"Accuracy Score\"])","dff37a2f":"log_reg = LogisticRegression()\nlog_reg.fit(X_train, y_train)\npredictions = log_reg.predict(X_test)\nscore = accuracy_score(predictions, y_test)\nprint(f\"Accuracy Score of LogisticRegression: {score}\")\n\nnew_row = {\"Model\": \"LogisticRegression\", \"Accuracy Score\": score}\nmodels = models.append(new_row, ignore_index=True)","9827587a":"GNB = GaussianNB()\nGNB.fit(X_train, y_train)\npredictions = GNB.predict(X_test)\nscore = accuracy_score(predictions, y_test)\nprint(f\"Accuracy Score of GaussianNB: {score}\")\n\nnew_row = {\"Model\": \"GaussianNB\", \"Accuracy Score\": score}\nmodels = models.append(new_row, ignore_index=True)","03e80177":"BNB = BernoulliNB()\nBNB.fit(X_train, y_train)\npredictions = BNB.predict(X_test)\nscore = accuracy_score(predictions, y_test)\nprint(f\"Accuracy Score of BernoulliNB: {score}\")\n\nnew_row = {\"Model\": \"BernoulliNB\", \"Accuracy Score\": score}\nmodels = models.append(new_row, ignore_index=True)","e8fb39d3":"svc = SVC()\nsvc.fit(X_train, y_train)\npredictions = svc.predict(X_test)\nscore = accuracy_score(predictions, y_test)\nprint(f\"Accuracy Score of SVC: {score}\")\n\nnew_row = {\"Model\": \"SVC\", \"Accuracy Score\": score}\nmodels = models.append(new_row, ignore_index=True)","23b3e310":"random_forest = RandomForestClassifier(n_estimators=1000, random_state=42)\nrandom_forest.fit(X_train, y_train)\npredictions = random_forest.predict(X_test)\nscore = accuracy_score(predictions, y_test)\nprint(f\"Accuracy Score of RandomForestClassifier: {score}\")\n\nnew_row = {\"Model\": \"RandomForestClassifier\", \"Accuracy Score\": score}\nmodels = models.append(new_row, ignore_index=True)","d1e6f2ec":"xgb = XGBClassifier(use_label_encoder=False)\nxgb.fit(X_train, y_train)\npredictions = xgb.predict(X_test)\nscore = accuracy_score(predictions, y_test)\nprint(f\"Accuracy Score of XGBClassifier: {score}\")\n\nnew_row = {\"Model\": \"XGBClassifier\", \"Accuracy Score\": score}\nmodels = models.append(new_row, ignore_index=True)","2d20ef28":"models.sort_values(by=\"Accuracy Score\", ascending=False)","587e3645":"# Comparison of Machine Learning Models","a2a05063":"# Data Visualization","203b22ca":"# Detection of Missing Values and Duplicates","60001f3f":"# Exploratory Data Analysis","7778d06f":"# Standardization of Data","4d6caca2":"# Splitting the Data into Train and Test Datasets","b3e49bf3":"# Machine Learning Models","7c0f5442":"# Handling Outliers"}}