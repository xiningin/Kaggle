{"cell_type":{"af3e40ab":"code","07a60179":"code","3c581d76":"code","0769d9e8":"code","19b54fe7":"code","a36c20bb":"code","b96f45c3":"code","bc9d6a06":"code","c7021be6":"code","c40e8dfa":"code","49abf768":"code","2fccd965":"code","5c28b861":"code","0c1016ef":"code","c6b79cf1":"code","18dafb8c":"code","aa773b1f":"code","051945b7":"code","c40acc30":"code","f6391879":"code","ddf0aa61":"code","54d1eaa7":"code","c79e2e3d":"code","8490da87":"code","c7a941a7":"code","e59acb66":"code","80d1edb8":"markdown","8ab55dfd":"markdown","3a48bf9f":"markdown","c7d8fbc1":"markdown"},"source":{"af3e40ab":"# the following three lines are suggested by the fast.ai course\n%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","07a60179":"# hide warnings\nimport warnings\nwarnings.simplefilter('ignore')","3c581d76":"# the fast.ai library, used to easily build neural networks and train them\nfrom fastai import *\nfrom fastai.vision import *\nimport torchvision.models","0769d9e8":"# to get all files from a directory\nimport os\n\n# to easier work with paths\nfrom pathlib import Path\n\n# to read and manipulate .csv-files\nimport pandas as pd","19b54fe7":"INPUT = Path(\"..\/input\/digit-recognizer\")\nos.listdir(INPUT)","a36c20bb":"train_df = pd.read_csv(INPUT\/\"train.csv\")\ntrain_df.head(3)","b96f45c3":"test_df = pd.read_csv(INPUT\/\"test.csv\")\ntest_df.head(3)","bc9d6a06":"TRAIN = Path(\"..\/train\")\nTEST = Path(\"..\/test\")","c7021be6":"# Create training directory\nfor index in range(10):\n    try:\n        os.makedirs(TRAIN\/str(index))\n    except:\n        pass","c40e8dfa":"#Create test directory\ntry:\n    os.makedirs(TEST)\nexcept:\n    pass","49abf768":"# import numpy to reshape array from flat (1x784) to square (28x28)\nimport numpy as np\n\n# import PIL to display images and to create images from arrays\nfrom PIL import Image\n\ndef saveDigit(digit, filepath):\n    digit = digit.reshape(28,28)\n    digit = digit.astype(np.uint8)\n\n    img = Image.fromarray(digit)\n    img.save(filepath)","2fccd965":"# save training images\nfor index, row in train_df.iterrows():\n    \n    label,digit = row[0], row[1:]\n    \n    folder = TRAIN\/str(label)\n    filename = f\"{index}.jpg\"\n    filepath = folder\/filename\n    \n    digit = digit.values\n    \n    saveDigit(digit, filepath)","5c28b861":"# save testing images\nfor index, digit in test_df.iterrows():\n\n    folder = TEST\n    filename = f\"{index}.jpg\"\n    filepath = folder\/filename\n    \n    digit = digit.values\n    \n    saveDigit(digit, filepath)","0c1016ef":"# transforms\ntfms = get_transforms(do_flip=False)","c6b79cf1":"data = ImageDataBunch.from_folder(\n    path = TRAIN,\n    test = TEST,\n    valid_pct = 0.2,\n    bs = 256,\n    size = 28,\n    num_workers = 5,\n    ds_tfms = tfms\n).normalize(mnist_stats)","18dafb8c":"# all the classes in data\nprint(data.classes)","aa773b1f":"resnet_learn = Learner(data, torchvision.models.resnet50(pretrained=True), metrics=[error_rate, accuracy, top_k_accuracy], model_dir=\"\/tmp\/models\", callback_fns=ShowGraph)\ngooglenet_learn = Learner(data, torchvision.models.googlenet(pretrained=True), metrics=[error_rate, accuracy, top_k_accuracy], model_dir=\"\/tmp\/models\", callback_fns=ShowGraph)\nresnext_learn = Learner(data, torchvision.models.resnext50_32x4d(pretrained=True), metrics=[error_rate, accuracy, top_k_accuracy], model_dir=\"\/tmp\/models\", callback_fns=ShowGraph)\nwideres_learn = Learner(data, torchvision.models.wide_resnet50_2(pretrained=True), metrics=[error_rate, accuracy, top_k_accuracy], model_dir=\"\/tmp\/models\", callback_fns=ShowGraph)\nmobilenet_learn = Learner(data, torchvision.models.mobilenet_v2(pretrained=True), metrics=[error_rate, accuracy, top_k_accuracy], model_dir=\"\/tmp\/models\", callback_fns=ShowGraph)","051945b7":"model = [resnet_learn, googlenet_learn, resnext_learn, wideres_learn, mobilenet_learn]","c40acc30":"for learn in model:\n    learn.lr_find()\n    learn.recorder.plot(suggestion=True)","f6391879":"resnet_learn.fit_one_cycle(10)","ddf0aa61":"googlenet_learn.fit_one_cycle(10)","54d1eaa7":"resnext_learn.fit_one_cycle(10)","c79e2e3d":"wideres_learn.fit_one_cycle(10)","8490da87":"mobilenet_learn.fit_one_cycle(10)","c7a941a7":"ImageId = [int(os.path.splitext(path)[0])+1 for path in os.listdir(TEST)]","e59acb66":"model_name = ['resnet', 'googlenet', 'resnext', 'wideres', 'mobilenet']\ni = 0\nfor learn in model:\n    class_score, y = learn.get_preds(DatasetType.Test)\n    class_score = np.argmax(class_score, axis=1)\n    submission  = pd.DataFrame({\"ImageId\": ImageId,\"Label\": class_score})\n    submission.to_csv(\"submission_\"+str(model_name[i])+\".csv\", index=False)\n    i += 1","80d1edb8":"# Training","8ab55dfd":"## Set up environment","3a48bf9f":"## Explore Data","c7d8fbc1":"# Prediction"}}