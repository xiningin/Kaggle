{"cell_type":{"b9566827":"code","76f1a510":"code","a1018b15":"code","733b9670":"code","dcdd2598":"code","52e2fd33":"code","e17c13d7":"code","a43b9e98":"code","8761bf15":"code","f226a9e6":"code","dd90f1ad":"code","6887df17":"code","dd357689":"code","8a452781":"code","5526f864":"code","e5c8b36d":"code","91ccd280":"code","4af62b0e":"code","27df1471":"code","18d836a9":"code","78dbadb6":"code","bae29157":"code","8984ddc0":"code","d38cc286":"code","02f20f28":"markdown","5c5f9b6b":"markdown","e5dab7e0":"markdown"},"source":{"b9566827":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ntrain = pd.read_csv('\/kaggle\/input\/epitope-prediction\/input_bcell.csv')\ntest = pd.read_csv('\/kaggle\/input\/epitope-prediction\/input_sars.csv')","76f1a510":"sns.set_style('darkgrid')","a1018b15":"merged = pd.concat([train,test],axis=0,ignore_index=True)","733b9670":"merged.head(5)","dcdd2598":"merged.info()","52e2fd33":"merged.describe()","e17c13d7":"merged.isnull().sum()","a43b9e98":"sns.countplot(merged['target'])\nplt.show()","8761bf15":"plt.figure(figsize=(12,12))\nsns.heatmap(merged.corr(),annot=True,cmap='coolwarm')\nplt.show()","f226a9e6":"merged.hist(figsize=(15,15))\nplt.show()","dd90f1ad":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import GroupKFold\nfrom sklearn.decomposition import PCA\nfrom sklearn.cluster import KMeans","6887df17":"# Feature Preprocessing function\n\n# Scale function    \ndef scale(data):\n    scaler = StandardScaler()\n    data_scaled = scaler.fit_transform(data)\n    return data_scaled\n\n    \n# Feature Engineering functions       \ndef get_length(df):\n    df['length'] = df['end_position'] - df['start_position']+1\n    \n# Using KMeans clustering and PCA to generate new features\ndef kmeans_features(X,X_test):\n    X_scaled,X_test_scaled = scale(X),scale(X_test)\n    pca = PCA(n_components=2)\n    X_pca_train = pca.fit_transform(X_scaled)\n    X_pca_test = pca.fit_transform(X_test_scaled)\n    \n    kmeans_train = KMeans(n_clusters=4,max_iter=500,random_state=42)\n    kmeans_train.fit(X_pca_train)\n\n    kmeans_test = KMeans(n_clusters=4,max_iter=500,random_state=42)\n    kmeans_test.fit(X_pca_test)\n    \n    X = pd.DataFrame(X)\n    X['kmeans_feature'] = kmeans_train.labels_\n    \n    X_test = pd.DataFrame(X_test)\n    X_test['kmeans_feature'] = kmeans_test.labels_\n    \n    return X,X_test","dd357689":"get_length(train)\nget_length(test)","8a452781":"features = [\"chou_fasman\",\"emini\",\"kolaskar_tongaonkar\",\"parker\",\"length\",\"isoelectric_point\",\"aromaticity\",\"hydrophobicity\",\"stability\"]\n\nX,y = train[features],train['target']\nX_test,y_test = test[features],test['target']","5526f864":"gkf = GroupKFold(n_splits=5)","e5c8b36d":"X,X_test = kmeans_features(X,X_test)","91ccd280":"for train_index,test_index in gkf.split(X,y,train['parent_protein_id']):\n    X_train,X_valid = X.iloc[train_index],X.iloc[test_index],\n    y_train,y_valid = y[train_index],y[test_index]","4af62b0e":"from sklearn.metrics import classification_report,accuracy_score,confusion_matrix,roc_auc_score,roc_curve\nfrom sklearn.neural_network import MLPClassifier","27df1471":"mlp = MLPClassifier(random_state=42,max_iter=400,hidden_layer_sizes=(100,))","18d836a9":"mlp.fit(X_train,y_train)","78dbadb6":"def visual_evaluation(model,gradient_booster=True):    \n    plt.figure(figsize=(10,10))\n    sns.heatmap(confusion_matrix(y_test,model.predict(X_test)),cmap='coolwarm',annot=True)\n    plt.show()\n    \n    fpr, tpr, _ = roc_curve(y_test, model.predict(X_test))\n    plt.plot(fpr,tpr,linestyle='--')\n    plt.show()","bae29157":"def text_evaluation(model):\n    print(classification_report(y_test,model.predict(X_test)))\n    print(\"Accuracy: \" + str(accuracy_score(y_test,model.predict(X_test))))\n    print('AUC Score: ' + str(roc_auc_score(y_test,model.predict(X_test))))","8984ddc0":"visual_evaluation(mlp,gradient_booster=False)","d38cc286":"text_evaluation(mlp)","02f20f28":"<h1 align='center'> Modelling <\/h1>","5c5f9b6b":"<h1 align='center'> Feature Engineering <\/h1>","e5dab7e0":"<h1 align='center'> Exploratory Data Analysis <\/h1>"}}