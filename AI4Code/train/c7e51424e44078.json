{"cell_type":{"09c738be":"code","0f6ab245":"code","bbec73c9":"code","8c525e61":"code","c7c8d79e":"code","7edab31e":"code","5b882491":"code","6f837a4b":"code","b6461c46":"code","7115ce42":"code","f125f528":"code","1f3a266b":"code","cfc84437":"code","06ce8a0a":"code","9a2d4043":"code","32e28a19":"code","6aa14484":"code","91f25107":"code","e830765b":"code","0d0ab548":"code","f5bb0e1c":"code","178c6f4c":"code","c9a473fb":"code","11865515":"code","74a1f9d5":"code","47d4d8e5":"code","4ffcefbf":"code","75effdf5":"markdown","21ba63cf":"markdown","c285fb8d":"markdown","03d3c65b":"markdown","e37d06bd":"markdown","798d87e7":"markdown","8a3f9c0b":"markdown","f6baa50c":"markdown","def322ab":"markdown","b156f7f1":"markdown","15a3b0c9":"markdown","c6c3ebcd":"markdown","a213b241":"markdown","2395f2d4":"markdown","92b53daa":"markdown","a71cc30c":"markdown","bd161cbb":"markdown","dde25170":"markdown","16cd3954":"markdown","aac22b5d":"markdown","27fd7e7f":"markdown","ddfef865":"markdown","740ce8c2":"markdown","79a31d97":"markdown","d50e0709":"markdown","7e94fbb0":"markdown"},"source":{"09c738be":"#Import packages\n\nimport numpy as np \nimport pandas as pd \nimport sqlite3\nimport matplotlib.pyplot as plt\n\npath = \"..\/input\/soccer\/\" #Everything preceding the file name\ndatabase = path + 'database.sqlite' #The path + the file name ","0f6ab245":"# sqlite3.connect() Creates a connection object\n# database is the variable we established above\nconn = sqlite3.connect(database)\n\n#pd.read_sql() is a retrieve function that retrieves what we put in the parenthesis\n\n#After SELECT, put what you want to see. In this case we put *, which means see everything\n\n#After FROM choose a source\n    # sqlite_master is an internal table that is present in all SQLite databases. The content of this table describes the database's schema.\n    \n#After WHERE specify a condiction\n    # condition here is where type = table\n    \n#End with a \";\" and close the quotation marks\n\n# conn is our connection object\n\ntables = pd.read_sql(\"\"\"SELECT *\n                        FROM sqlite_master\n                        WHERE type='table';\"\"\", conn)\ntables","bbec73c9":"# Find list of 11 countries\n    # select all from countries\ncountries = pd.read_sql(\"\"\"SELECT *\n                        FROM Country; \"\"\", conn)\n\n\ncountries","8c525e61":"# Look at leagues table, country_id is a uniquely identifying value for each of the countries\n\nLeague = pd.read_sql(\"\"\"SELECT *\n                        FROM League; \"\"\", conn)\n\n\nLeague","c7c8d79e":"# Make a list of leagues and their country by using join\n    # So we select everything from League\n    # Join Country on the id columns with the corresponding country_id columns from league\nteam_league = pd.read_sql(\"\"\"SELECT *\n                        FROM League\n                        JOIN Country ON Country.id = league.country_id; \"\"\", conn)\n\n\nteam_league","7edab31e":"# Order teams alphabetically\n    # numbers come first\n# Can limit results with LIMIT after ORDER BY\n\n\nTeams_alphabetical = pd.read_sql(\"\"\"SELECT *\n                                    FROM Team\n                                    ORDER BY team_long_name\n                                    LIMIT 11;\"\"\",conn)\n\nTeams_alphabetical","5b882491":"# Look at Match table\n\nMatch = pd.read_sql(\"\"\"SELECT *\n                        FROM Match; \"\"\", conn)\n\n\nMatch","6f837a4b":"# Select id columns from match\n# Select name column from Country AS country_name\n# Select name column from League AS league_name\n    # This is being done because those two have the same name, so it needs to be renamed\n# Season, stage, and date are unique to Match so no need to specify\n\n# (HT is what we rename V1 of Team table to to- see later on in code)\n# (AT is what we rename V1 of Team table to to- see later on in code)\n    # This works because SQL, unlike python, scans the whole query before executing\n        # versus python executes in order and is not aware of each query until it is executed\n\n# Take team_long_name from HT as home_team\n# Take team_long_name from AT as away_team\n\n# home_team_goal and away_team_goal are unique to match\n\n# FROM Match\n# Inner join Country on Country.id = Match.country_id because the two correlate. \n    # This is an inner join so only matching records remain\n        # So this gets us the name of the country next to the id as country_name\n    \n# Inner join League on League.id = match.league_id because the two correlate\n    # Inner join so only matching records remain\n        # So this gets us the name of the league next to the country name as league_name\n\n# Left join team AS HT on HT.team_api_id = Match.home_team_api_id\n    # Left join keeps all of the values from the left table and only the values from the right table that match\n        # left table is match because it our \"FROM\" table\n        # SO because we selected team_long_name as home_team above, this adds home team\n            # So this adds only teams that were included in the home team column from the match table that correlate to the api id column from the team table.\n                # Automatically filters to only home teams.\n    \n# Left join team AS AT on AT.team_api_id = Match.home_team_api_id\n    # Left join keeps all of the values from the left table and only the values from the right table that match\n        # left table is match because it our \"FROM\" table\n        # SO because we selected team_long_name as away_team above, this adds away team\n         # So this adds only teams that were included in the home team column from the match table that correlate to the api id column from the team table.\n            # Automatically filters to only home teams.\n            \n# WHERE country_name = 'Spain' \n    # condition that filters to only spanish teams\n    \n# Order by date and limit to 10 results\n    # Without limit 10 there is 3000+ results\n    \ndetailed_matches = pd.read_sql(\"\"\"SELECT Match.id,\n                                        Country.name AS country_name,\n                                        League.name AS league_name,\n                                        season,\n                                        stage,\n                                        date,\n                                        HT.team_long_name AS home_team,\n                                        AT.team_long_name AS away_team,\n                                        home_team_goal,\n                                        away_team_goal\n                                    FROM Match\n                                    JOIN Country on Country.id = Match.country_id\n                                    JOIN League on League.id = Match.league_id\n                                    LEFT JOIN Team AS HT on HT.team_api_id = Match.home_team_api_id\n                                    LEFT JOIN Team AS AT on AT.team_api_id = Match.away_team_api_id\n                                    WHERE country_name = 'Spain'\n                                    ORDER by date\n                                    LIMIT 10;\"\"\", conn)\n\ndetailed_matches","b6461c46":"count_of_countries = pd.read_sql(\"\"\"SELECT \n                                        count(distinct name) AS number_of_counries\n                                FROM Country\n                                ;\"\"\",conn)\n\ncount_of_countries","7115ce42":"# What we are selecting:\n    # Name column from country as country_name\n    # Name column from league as league_name\n    # Season column from match\n    # Count of distinct stages\n        # So if you look at the match table, the 5th column shows the stage number\n        # The stage could be 1, 5, 28, etc.\n        # So it sums the number of distinct stage number it sees. This will tell us how many stages exist for each league that season.\n    # Average home team goal\n        # Takes the average value for home_team_goal from match table.\n        # Average home team goal will then be broken out as an individual value per season per league\n    # Average away team goal\n        # Takes the average value for away_team_goal from match table.\n        # Average away team goal will then be broken out as an individual value per season per league\n    # Average Goal differential (average of home goals minus away goals) broken out as an individual value per season per league\n    # avg goals (average of home goals + away goals) broken out as an individual value per season per league\n    # sum of goals (sum of home+ away goals) as a total per season per league\n    \n# What we are joining\n    # Inner join country.id with match.country_id, getting us the country_name column\n    # Inner join league.id with match.league.id, getting us the league name column\n    # Left join team as HT on HT.team_api_id = Match.home_team_api_id\n        # This allows the count function to give us the home teams portion of number_of_teams column\n    # Left join team as AT on AT.team_api_id = Match.away_team_api_id\n        # This allows the count function to give us the away teams portion number_of_teams column. Basically just ensures that we get all teams accounted for\n            # (even though most teams were accounted for just in home since teams are both home and away)\n# Where conditions\n    # The country name has to be IN the following list:\n        # Spain, Germany, France, Italy, England\n        \n# Group by\n    # First, we group  by country name\n        # Then, within those country name groups, We group by league name\n            # Then within those league names, we group by season\n# HAVING\n    # Only include those seasons within leagues that have 10+ stages\n\n# Order by country name first (alphabetical), then within that newly ordered list order alphabetically by league name, then descending chronological order by season \n\nleagues_by_season = pd.read_sql(\"\"\"SELECT Country.name AS country_name,\n                                        League.name AS league_name,\n                                        season,\n                                        count(distinct stage) AS number_of_stages,\n                                        count(distinct HT.team_long_name) AS number_of_teams,\n                                        avg(home_team_goal) AS avg_home_team_goals,\n                                        avg(away_team_goal) AS avg_away_team_goals,\n                                        avg(home_team_goal-away_team_goal) AS avg_goal_dif,\n                                        avg(home_team_goal+away_team_goal) AS avg_goals,\n                                        sum(home_team_goal+away_team_goal) AS total_goals\n                                    FROM Match\n                                        JOIN Country on Country.id = Match.country_id\n                                        JOIN League on League.id = Match.league_id\n                                        LEFT JOIN Team AS HT on HT.team_api_id = Match.home_team_api_id\n                                        LEFT JOIN Team AS AT on AT.team_api_id = Match.away_team_api_id\n                                    WHERE country_name in ('Spain', 'Germany', 'France', 'Italy', 'England')\n                                    GROUP BY Country.name, League.name, season\n                                    HAVING count (distinct stage) > 10\n                                    ORDER BY Country.name, League.name, season DESC\n                                    ;\"\"\", conn)\n\nleagues_by_season","f125f528":"# Example- first create a dataframe using pd.dataframe\n\ndf1 = pd.DataFrame([[1, 2], [4, 5], [7, 8]],\n     index=['cobra', 'viper', 'sidewinder'],\n     columns=['max_speed', 'shield'])\ndf1","1f3a266b":"# Now use df.loc and input the 'viper label'\ndf1.loc['viper']","cfc84437":"# Use df1.loc[:]\n    # note the ':'\ndf1.loc[:'viper']= 1, 2","06ce8a0a":"# Look at df1- something is different!\ndf1","9a2d4043":"# use df1.loc[:,]\n    # note the ':' and the ','\ndf1.loc[:,'strength']= 30, 2, 3","32e28a19":"# Look at df1- something is different (again!)\ndf1","6aa14484":"# use df1.loc[:,]\n    # note the ':' and the ','\ndf1.loc[:,'max_speed']= 0, 12, 4","91f25107":"#max_speed has been updated\ndf1","e830765b":"# pd.dataframe(index,columns)\n\n# index= index to use for the resulting dataframe (rows)\n    # So for the index, we are getting a chronologically sorted list of the unique seasons included in the leagues_by_season table\n# columns = columns to use for resulting dataframe (columns)\n    # So for the columns, we get the unique country names included in the leagues_by_season table\n\n# df.loc[:,] inserts data into the table\n    # So in this case, it is inserting a list of the average goals for the country\n\n# This function gets us everything from the leagues_by_season table where the country name is Germany\n\nleagues_by_season.loc[leagues_by_season['country_name']=='Germany']","0d0ab548":"# This function gets us a list of the average goal figures from the leagues_by_season table where the country name is Germany\n\nlist(leagues_by_season.loc[leagues_by_season['country_name']=='Germany', 'avg_goals'])","f5bb0e1c":"# put it all togethere here. Put those lists into a table.\ndf = pd.DataFrame(index=np.sort(leagues_by_season['season'].unique()),columns=leagues_by_season['country_name'].unique())\n\ndf.loc[:,'Germany'] = list(leagues_by_season.loc[leagues_by_season['country_name']== 'Germany','avg_goals'])\ndf.loc[:,'Spain'] = list(leagues_by_season.loc[leagues_by_season['country_name']== 'Spain','avg_goals'])\ndf.loc[:,'France'] = list(leagues_by_season.loc[leagues_by_season['country_name']== 'France','avg_goals'])\ndf.loc[:,'Italy'] = list(leagues_by_season.loc[leagues_by_season['country_name']== 'Italy','avg_goals'])\ndf.loc[:,'England'] = list(leagues_by_season.loc[leagues_by_season['country_name']== 'England','avg_goals'])","178c6f4c":"df","c9a473fb":"# Plot the df\ndf.plot(figsize=(12,5),title='Average Goals per Game Over Time')","11865515":"df = pd.DataFrame(index=np.sort(leagues_by_season['season'].unique()),columns=leagues_by_season['country_name'].unique())\n\ndf.loc[:,'Germany'] = list(leagues_by_season.loc[leagues_by_season['country_name']== 'Germany','avg_goal_dif'])\ndf.loc[:,'Spain'] = list(leagues_by_season.loc[leagues_by_season['country_name']== 'Spain','avg_goal_dif'])\ndf.loc[:,'France'] = list(leagues_by_season.loc[leagues_by_season['country_name']== 'France','avg_goal_dif'])\ndf.loc[:,'Italy'] = list(leagues_by_season.loc[leagues_by_season['country_name']== 'Italy','avg_goal_dif'])\ndf.loc[:,'England'] = list(leagues_by_season.loc[leagues_by_season['country_name']== 'England','avg_goal_dif'])\n\ndf","74a1f9d5":"# Plot the df\ndf.plot(figsize=(12,5),title='Average Goal Differential Home vs Away')","47d4d8e5":"# Case goes through conditions and returns a value when the condition is met\n# When...then is the conditions\n# End as is the column name\n\n# Count(height) as distribution gives how many players fall into each height bracket\n# avg overall rating, avg potential will be pulled from PA_grouped when we make it later in this stagement\n# Avg weight is calculated by group\n\n#FROM PLayer\n    # Left Join (SELECT player id)\n    # Get avg attributes and potential\n    #FROM Player_Attributes\n    #GROUP BY Player_Attributes.player_api_id)\n    \n    # As PA_Grouped ON PLAYER.player_api_id = PA_Grouped.player_api_id\n    \n    \n# So the left join selects api id, rating, and potential from player_attributes. It then groups them by API ID\n# All of that is then left joined AS PA_grouped based on player_api_id\n\n# It is then grouped by height and ordered by height\n\nplayers_height = pd.read_sql(\"\"\"SELECT CASE\n                                        WHEN ROUND(height)<165 then 165\n                                        WHEN ROUND(height)>195 then 195\n                                        ELSE ROUND(height)\n                                        END AS calc_height, \n                                        COUNT(height) AS distribution, \n                                        (avg(PA_Grouped.avg_overall_rating)) AS avg_overall_rating,\n                                        (avg(PA_Grouped.avg_potential)) AS avg_potential,\n                                        AVG(weight) AS avg_weight \n                            FROM PLAYER\n                            LEFT JOIN (SELECT Player_Attributes.player_api_id, \n                                        avg(Player_Attributes.overall_rating) AS avg_overall_rating,\n                                        avg(Player_Attributes.potential) AS avg_potential  \n                                        FROM Player_Attributes\n                                        GROUP BY Player_Attributes.player_api_id) \n                                        AS PA_Grouped ON PLAYER.player_api_id = PA_Grouped.player_api_id\n                            GROUP BY calc_height\n                            ORDER BY calc_height\n                                ;\"\"\", conn)\nplayers_height","4ffcefbf":"# importing the required module\nimport matplotlib.pyplot as plt\n\n# Set size\nplt.figure(figsize=(12,5))\n\n# x axis values - height\nx = players_height['calc_height']\n# corresponding y axis values - rating\ny = players_height['avg_overall_rating']\n \n# plotting the points\nplt.plot(x, y)\n \n# naming the x axis\nplt.xlabel('calc_height')\n# naming the y axis\nplt.ylabel('avg_overall_rating')\n \n# giving a title to my graph\nplt.title('Rating vs Height')\n \n# function to show the plot\nplt.show()","75effdf5":"### Height vs Rating Table","21ba63cf":"## Connect to Database\nCreate a connection to the DB to see what tables we have.","c285fb8d":"## Count Function","03d3c65b":"## Motivation\n**The purpose of this notebook is to learn from Dima Rudov's SQL example notebook.**","e37d06bd":"## Switch back to Python to do some Visualization","798d87e7":"Additional use of df.loc[:,]","8a3f9c0b":"## Import Packages","f6baa50c":"### Average Goal Differential by Season by Country Table","def322ab":"**So the output code goes in the order of our above select statements.**  \nThe id of the country (from country.id) is correlated with the 20k+ country_id values in the match table. So now all of the table has a country name written in text associated with it.  \nThe id of the league from league.id follows the same logic and adds league name\nSeason, stage, and date come straight from match    \nWhen we left join team as HT, the first table with the \"overriding authority\" is Match. So we keep only the team names that match the home_team_api_id column from match  \nWhen we left join team as AT, the first table with the \"overriding authority\" is Match. So we keep only the team names that match the away_team_api_id column from match  \nWhat we are left with is a list of Spain's matches","b156f7f1":"As you can see, df.loc[:,] allows you to create a new column.","15a3b0c9":"## Matches Table","c6c3ebcd":"The columns of the dataframe (max_speed and shield) along with the name of the label and the data type, are returned","a213b241":"## Detailed Matches Table","2395f2d4":"## Leagues Table","92b53daa":"## Alphabetical Table of Teams","a71cc30c":"**Let's try df.loc[:,]**","bd161cbb":"### Pandas.dataframe[] overview","dde25170":"## Countries Table","16cd3954":"## Joined Table of Leagues by Country","aac22b5d":"**Now, lets use df.loc[:]**","27fd7e7f":"### Df.loc[] overview","ddfef865":"So we see above that we have 8 tables\n\n1. The SQLite internal table sqlite_sequence is used to store information about SQLite: autoincrement columns. In fact, it is created when the first table with an autoincrement column is created.  \n\n    a. Auto-increment allows a unique number to be generated automatically when a new record is inserted into a table.  \n\nOther tables include player_attributes, player, match, league, country, team, and team_attributes.  \n\n","740ce8c2":"**Explanation of Df.loc[]**  \nDf.loc[] allows you to input into rows and columns by labels","79a31d97":"As you can see, df.loc[:] allows you to input a new value into an existing row!","d50e0709":"## Analysis of individual seasons ordered by Country Name, League name, and descending year\n    ","7e94fbb0":"### Average Goals by Season by Country Table"}}