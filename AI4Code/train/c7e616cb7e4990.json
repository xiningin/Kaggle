{"cell_type":{"2867c2f8":"code","03064d5c":"code","a89c68f0":"code","4fe63c5d":"code","3d8d4bce":"code","21cbb99d":"code","dde40b3b":"code","c5a308f3":"code","15aa07bd":"code","6d643ab3":"code","e44566ba":"code","4e393a60":"code","eb72e435":"markdown","f2538dec":"markdown","ce881d30":"markdown","2c91b030":"markdown","77dec9dc":"markdown","531c2901":"markdown","a1bd9cd0":"markdown","6627fa00":"markdown"},"source":{"2867c2f8":"!pip install -U tf-nightly\nimport tensorflow as tf\ntf.__version__","03064d5c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n# import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.layers.experimental.preprocessing import Normalization\nfrom tensorflow.keras.layers.experimental.preprocessing import CategoryEncoding\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a89c68f0":"pip show tensorflow keras","4fe63c5d":"## load data\ndf = pd.read_csv('\/kaggle\/input\/heart-disease-uci\/heart.csv')\nprint(df.shape)\ndf.sample(10)","3d8d4bce":"# test-train split\nval_df = df.sample(frac = 0.1, random_state = 42)\ntrain_df = df.drop(val_df.index)\n\nprint(\n      \"Using %d samples for training and %d for validation\"\n      % (len(train_df), len(val_df))\n)","21cbb99d":"# generate tf.data.Dataset objects for each dataframe\ndef dataframe_to_dataset(dataframe):\n    dataframe = dataframe.copy()\n    labels = dataframe.pop(\"target\")\n    ds = tf.data.Dataset.from_tensor_slices((dict(dataframe), labels))\n    ds = ds.shuffle(buffer_size = len(dataframe))\n    return ds\n\ntrain_ds = dataframe_to_dataset(train_df)\nval_ds = dataframe_to_dataset(val_df)\n\n# Each Dataset yields a tuple (input, target) where input is a dictionary of features and target is the value 0 or 1\nfor x, y in train_ds.take(2):\n    print(\"Input:\", x)\n    print(\"Target:\", y)\n\n# only oldpeak is of float64 type, else all other vars are of int64 type","dde40b3b":"# batch the datasets\ntrain_ds = train_ds.batch(8)\nval_ds = val_ds.batch(8)","c5a308f3":"# encoding functions\ndef encode_numerical_feature(feature, name, dataset):\n    # Create a Normalisation layer for our feature\n    normaliser = Normalization()\n\n    # Prepare a Dataset that only yields our feature\n    feature_ds = dataset.map(lambda x, y: x[name])\n    feature_ds = feature_ds.map(lambda x: tf.expand_dims(x, -1))\n\n    # Learn the statistics of the data\n    normaliser.adapt(feature_ds)\n\n    # Normalize the input feature\n    encoded_feature = normaliser(feature)\n    return encoded_feature\n\ndef encode_string_categorical_feature(feature, name, dataset):\n    # Create a StringLookup layer which will turn strings into integer indices\n    index = StringLookup()\n\n    # Prepare a Dataset that only yields our feature\n    feature_ds = dataset.map(lambda x, y: x[name])\n    feature_ds = feature_ds.map(lambda x: tf.expand_dims(x, -1))\n\n    # Learn the set of possible string values and assign them a fixed integer index\n    index.adapt(feature_ds)\n\n    # Turn the string input into integer indices\n    encoded_feature = index(feature)\n\n    # Create a CategoryEncoding for our integer indices\n    encoder = CategoryEncoding(output_mode = \"binary\")\n\n    # Prepare a dataset of indices\n    feature_ds = feature_ds.map(index)\n\n    # Learn the space of possible indices\n    encoder.adapt(feature_ds)\n\n    # Apply one-hot encoding to our indices\n    encoded_feature = encoder(encoded_feature)\n    return encoded_feature\n\ndef encode_integer_categorical_feature(feature, name, dataset):\n    # Create a CategoryEncoding for our integer indices\n    encoder = CategoryEncoding(output_mode = \"binary\")\n\n    # Prepare a Dataset that only yields our feature\n    feature_ds = dataset.map(lambda x, y: x[name])\n    feature_ds = feature_ds.map(lambda x: tf.expand_dims(x, -1))\n\n    # Learn the space of possible indices\n    encoder.adapt(feature_ds)\n\n    # Apply one-hot encoding to our indices\n    encoded_feature = encoder(feature)\n    return encoded_feature","15aa07bd":"# Categorical features encoded as integers\nsex = keras.Input(shape =(1, ), name = \"sex\", dtype = \"int64\")\nfbs = keras.Input(shape =(1, ), name = \"fbs\", dtype = \"int64\")\nrestecg = keras.Input(shape =(1, ), name = \"restecg\", dtype = \"int64\")\nexang = keras.Input(shape =(1, ), name = \"exang\", dtype = \"int64\")\nca = keras.Input(shape =(1, ), name = \"ca\", dtype = \"int64\")\nthal = keras.Input(shape =(1, ), name = \"thal\", dtype = \"int64\")\nslope = keras.Input(shape =(1, ), name = \"slope\", dtype = \"int64\")\n\n# Numerical features\noldpeak = keras.Input(shape =(1, ), name = \"oldpeak\", dtype = \"float64\")\nage = keras.Input(shape =(1, ), name = \"age\", dtype = \"int64\")\ncp = keras.Input(shape =(1, ), name = \"cp\", dtype = \"int64\")\ntrestbps = keras.Input(shape =(1, ), name = \"trestbps\", dtype = \"int64\")\nchol = keras.Input(shape =(1, ), name = \"chol\", dtype = \"int64\")\nthalach = keras.Input(shape =(1, ), name = \"thalach\", dtype = \"int64\")\n\nall_inputs = [\n    sex,\n    cp,\n    fbs,\n    restecg,\n    exang,\n    ca,\n    thal,\n    age,\n    trestbps,\n    chol,\n    thalach,\n    oldpeak,\n    slope,\n]\n\n# Integer categorical features\nsex_encoded = encode_integer_categorical_feature(sex, \"sex\", train_ds)\nfbs_encoded = encode_integer_categorical_feature(fbs, \"fbs\", train_ds)\nrestecg_encoded = encode_integer_categorical_feature(restecg, \"restecg\", train_ds)\nexang_encoded = encode_integer_categorical_feature(exang, \"exang\", train_ds)\nca_encoded = encode_integer_categorical_feature(ca, \"ca\", train_ds)\nthal_encoded = encode_integer_categorical_feature(thal, \"thal\", train_ds)\nslope_encoded = encode_integer_categorical_feature(slope, \"slope\", train_ds)\n\n# Numerical features (mean = 0, sd = 1)\noldpeak_encoded = encode_numerical_feature(oldpeak, \"oldpeak\", train_ds)\nage_encoded = encode_integer_categorical_feature(age, \"age\", train_ds)\ncp_encoded = encode_integer_categorical_feature(cp, \"cp\", train_ds)\ntrestbps_encoded = encode_numerical_feature(trestbps, \"trestbps\", train_ds)\nchol_encoded = encode_numerical_feature(chol, \"chol\", train_ds)\nthalach_encoded = encode_numerical_feature(thalach, \"thalach\", train_ds)\n\nall_features = layers.concatenate(\n    [\n        sex_encoded,\n        cp_encoded,\n        fbs_encoded,\n        restecg_encoded,\n        exang_encoded,\n        slope_encoded,\n        ca_encoded,\n        thal_encoded,\n        age_encoded,\n        trestbps_encoded,\n        chol_encoded,\n        thalach_encoded,\n        oldpeak_encoded,\n    ]\n)\n\nx = layers.Dense(8, activation = \"relu\")(all_features)\nx = layers.Dropout(0.5)(x)\noutput = layers.Dense(1, activation = \"sigmoid\")(x)\nmodel = keras.Model(all_inputs, output)\nmodel.compile(\"adam\", loss = \"binary_crossentropy\", metrics = [\"accuracy\"])","6d643ab3":"keras.utils.plot_model(model, show_shapes = True, rankdir = \"LR\")","e44566ba":"model.fit(train_ds, epochs = 64, validation_data = val_ds)","4e393a60":"sample = {\n    \"age\": 50,\n    \"sex\": 1,\n    \"cp\": 0,\n    \"trestbps\": 120,\n    \"chol\": 120,\n    \"fbs\": 0,\n    \"restecg\": 0,\n    \"thalach\": 160,\n    \"exang\": 0,\n    \"oldpeak\": 6,\n    \"slope\": 1,\n    \"ca\": 0,\n    \"thal\": 1,\n}\n\ninput_dict = {name: tf.convert_to_tensor([value]) for name, value in sample.items()}\nmodel.predict(input_dict)","eb72e435":"# Plot & fit model","f2538dec":"Example from Structured data classification @keras.io\/examples\n\nAuthor: Francois Chollet\n\nOn: 9th June, 2020","ce881d30":"Based on the model, the person has 1% chance of having Ischaemic Heart Disease.","2c91b030":"# Load data","77dec9dc":"# Pre-processing","531c2901":"We obtain a validation accuracy of 90%","a1bd9cd0":"# Data description:\n\n**Age** Age in years\n\n**Sex** (1 = male; 0 = female)\n\n**CP** Killip's Chest pain class (0, 1, 2, 3, 4)\n\n**Trestbpd** Resting BP Systolic (mm Hg on admission)\n\n**Chol** S. Cholesterol (mg \/ dl)\n\n**FBS** Fasting bl. sugar (>120 mg\/dl) (1 = true; 0 = false)\n\n**RestECG** Resting ECG (0, 1, 2)\n\n**Thalach** Max HR on exercise\n\n**Exang** Exercise induced angina (1 = yes; 0 = no)\n\n**Oldpeak** ST depression?? induced by exercise (range: 0 - 6.2)\n\n**Slope** Slope ST segment by exercise (1 = normal; 2 = abnormal)\n\n**CA** No. of major vessels (0 - 3) affected on fluoroscopy\n\n**Thal** 1 = normal; 2 = fixed defect (not 6); 3 = reversible defect (not 7)\n\n**Target** Ischaemic Heart Disease (1 = yes; 0 = no)","6627fa00":"# Prediction on a new example"}}