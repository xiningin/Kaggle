{"cell_type":{"7a4770bb":"code","79c81ab3":"code","2edf1f9a":"code","47719a0e":"code","09316e8d":"code","1ae2d1ec":"code","69cde491":"code","c40d036d":"markdown","42fe8523":"markdown","31d32129":"markdown","6b083f60":"markdown","6a156778":"markdown"},"source":{"7a4770bb":"import numpy as np # linear algebra\nimport matplotlib.pyplot as plt","79c81ab3":"y  = np.load('\/kaggle\/input\/ml-turbulence-dataset\/kepsilonphitf\/kepsilonphitf_DUCT_1100_Cy.npy')\nz  = np.load('\/kaggle\/input\/ml-turbulence-dataset\/kepsilonphitf\/kepsilonphitf_DUCT_1100_Cz.npy')\nwd = np.load('\/kaggle\/input\/ml-turbulence-dataset\/kepsilonphitf\/kepsilonphitf_DUCT_1100_wallDistance.npy')\nuu = np.load('\/kaggle\/input\/ml-turbulence-dataset\/labels\/DUCT_1100_uu.npy')\nvv = np.load('\/kaggle\/input\/ml-turbulence-dataset\/labels\/DUCT_1100_vv.npy')\nww = np.load('\/kaggle\/input\/ml-turbulence-dataset\/labels\/DUCT_1100_ww.npy')\n\nplt.figure(figsize=(10,10))\nplt.scatter(z,y,color='k')\nplt.xlabel('z')\nplt.ylabel('y')","2edf1f9a":"from matplotlib import cm\nfig = plt.figure(figsize=(30,10))\nax = fig.add_subplot(1,3,1,projection='3d')\nsurf = ax.plot_trisurf(z, y, uu, cmap=cm.coolwarm,\n                       linewidth=0, antialiased=False)\nax.set_title('uu')\n\nax = fig.add_subplot(1,3,2,projection='3d')\nsurf = ax.plot_trisurf(z, y, vv, cmap=cm.coolwarm,\n                       linewidth=0, antialiased=False)\nax.set_title('vv')\n\nax = fig.add_subplot(1,3,3,projection='3d')\nsurf = ax.plot_trisurf(z, y, ww, cmap=cm.coolwarm,\n                       linewidth=0, antialiased=False)\nax.set_title('ww')","47719a0e":"fig = plt.figure(figsize=(10,10))\nax = fig.add_subplot(projection='3d')\nsurf = ax.plot_trisurf(z, y, wd, cmap=cm.coolwarm,\n                       linewidth=0, antialiased=False)\nax.set_title('Wall distance')","09316e8d":"plt.figure(figsize=(10,10))\nplt.scatter(z,y,color='k')\nplt.xlabel('z')\nplt.ylabel('y')\n\nys1 = np.arange(min(z),0,0.01)\nzs1 = -0.4*np.ones(ys1.shape)\n\nys2 = np.arange(min(z),0,0.01)\nzs2 = -0.3*np.ones(ys1.shape)\n\nys3 = np.arange(min(z),0,0.01)\nzs3 = -0.2*np.ones(ys1.shape)\n\nplt.scatter(zs1,ys1,color='r')\nplt.scatter(zs2,ys2,color='r')\nplt.scatter(zs3,ys3,color='r')\n","1ae2d1ec":"from scipy.interpolate import griddata\n\nuu1 = griddata((z,y),uu,(zs1,ys1))\nuu2 = griddata((z,y),uu,(zs2,ys2))\nuu3 = griddata((z,y),uu,(zs3,ys3))\n\nplt.figure(figsize=(10,10))\nplt.plot(ys1,uu1,label='z=0.4')\nplt.plot(ys2,uu2,label='z=0.3')\nplt.plot(ys3,uu3,label='z=0.2')\nplt.xlabel('y')\nplt.ylabel('uu')\nplt.legend()","69cde491":"wd1 = griddata((z,y),wd,(zs1,ys1))\nwd2 = griddata((z,y),wd,(zs2,ys2))\nwd3 = griddata((z,y),wd,(zs3,ys3))\n\nplt.figure(figsize=(10,10))\nplt.plot(ys1,wd1,label='z=0.4')\nplt.plot(ys2,wd2,label='z=0.3')\nplt.plot(ys3,wd3,label='z=0.2')\nplt.xlabel('y')\nplt.ylabel('Wall distance')\nplt.legend()","c40d036d":"# Purpose\nThis notebook demonstrates the field format, using the square duct case as an example.","42fe8523":"## The grid","31d32129":"## The fields\nShown here are the DNS Reynolds normal stresses, interpolated onto the grid.","6b083f60":"## Sampling the data along a line","6a156778":"## Wall distance"}}