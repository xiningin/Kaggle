{"cell_type":{"078262e0":"code","f40753f6":"code","5d502956":"code","9d34344d":"code","8aa2c22f":"code","744b3255":"code","c08fa81f":"code","bd7bb043":"code","24d71a23":"code","a6e9a296":"code","04c04dcd":"code","115e8439":"code","ecf2414e":"code","2b7ce95d":"code","8825b4f3":"code","58ef446b":"code","570432a7":"code","635bbbc4":"code","2481da2c":"code","05dc19b4":"code","827aad16":"code","e4792c32":"code","d5719010":"code","b4e95185":"code","81be1d96":"code","5486f3fa":"code","6f7ef3ac":"code","10e1b404":"code","339a3fea":"code","1f4d4b39":"code","55949750":"code","e3eab616":"code","9b6d95f8":"code","fa3d4909":"code","9f885280":"markdown","f7ac93f5":"markdown","1b8a0047":"markdown","0bf6078b":"markdown","f09315a6":"markdown","9857cf8c":"markdown","9fb67443":"markdown","a975b3ad":"markdown","ed9e3350":"markdown","7d701f7f":"markdown","58f78a29":"markdown","d078d039":"markdown","fa1ce5af":"markdown","eb67367d":"markdown","9481eb60":"markdown"},"source":{"078262e0":"import pandas as pd\nimport os\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.linear_model import LogisticRegression, SGDClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_auc_score\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","f40753f6":"# DataFrame display settings\npd.set_option('display.max_colwidth', 250)","5d502956":"# Charts display settings\nplt.style.use('fivethirtyeight')\nplt.rcParams['figure.figsize'] = 12, 8\nplt.rcParams.update({'font.size': 11})","9d34344d":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","8aa2c22f":"data = pd.read_csv('\/kaggle\/input\/sentiment-analysis-for-financial-news\/all-data.csv',\n                   header=None,\n                   names=['sentiment', 'text'],\n                   encoding='latin-1',\n                   dtype={'sentiment': 'category'})","744b3255":"# Number of rows and columns\ndata.shape","c08fa81f":"# Examples of news classes\ndata.head()","bd7bb043":"# Balance of classes\nclasses_distribution = data['sentiment'].value_counts(normalize=True)\nclasses_distribution","24d71a23":"labels = classes_distribution.index\nvalues = classes_distribution.values\nplt.pie(values, labels=labels, startangle=90, autopct='%1.1f%%')\nplt.title('Distribution of Classes')\nplt.tight_layout()\nplt.show()","a6e9a296":"# Headlines length\ndata['n_words'] = data['text'].str.split()  # Split sentences by spaces and convert into lists of words\ndata['n_words'] = data['n_words'].apply(lambda x: [word for word in x if len(word) > 1])  # Remove words shorter than 2 characters\ndata['n_words'] = data['n_words'].apply(lambda x: len(x))","04c04dcd":"# Length statistics\nmin_length = data['n_words'].min()\nmax_length = data['n_words'].max()\nmean_length = data['n_words'].mean()\nmedian_length = data['n_words'].median()","115e8439":"plt.hist(data['n_words'], bins=10)\nplt.axvline(mean_length, color='red', label='Mean')\nplt.axvline(median_length, color='green', label='Median')\nplt.legend()\nplt.title('Headlines Length')\nplt.xlabel('Number of words')\nplt.ylabel('Frequency')\nplt.show()","ecf2414e":"print(f'Sentence length: {min_length} - {max_length} words\\nMean length = {mean_length}\\nMedian length = {median_length}')","2b7ce95d":"# Examples of the shortest headlines\ndata[data['n_words'] < 5]","8825b4f3":"def classification_heatmap(cm):\n    \"\"\"Function produces a heatmap based on the confusion matrix.\"\"\"\n    sns.heatmap(cm, annot=True, fmt='d', cmap=plt.cm.Reds)\n    plt.yticks(rotation=0)\n    plt.title('Confusion Matrix')\n    plt.show()","58ef446b":"def accuracy_estimator(model, name):\n    \"\"\"Function evaluates accuracy metrics for classification model.\"\"\"\n    # Prediction on the test data\n    y_pred_class = model.predict(X_test)\n    \n    acc = accuracy_score(y_test, y_pred_class)\n    print(f'{name} model accuracy: {acc}')\n    \n    conf_matrix = confusion_matrix(y_test, y_pred_class)\n    classes_names = le.classes_\n    columns = ['pred_' + name for name in classes_names]\n    indexes = ['actual_' + name for name in classes_names]\n    conf_matrix = pd.DataFrame(conf_matrix, columns=columns, index=indexes)\n    classification_heatmap(conf_matrix)\n    \n    cls_report = classification_report(y_test, y_pred_class, target_names=classes_names)\n    print(cls_report)\n    \n    try:\n        y_pred_prob = model.predict_proba(X_test)\n        roc_auc = roc_auc_score(y_test, y_pred_prob, multi_class='ovr')\n        print(f'ROC AUC = {roc_auc}')\n    except Exception as e:\n        print('Probability estimations and ROC AUC are not available.')","570432a7":"def sentiment_reader(model, name):\n    \"\"\"Function creates a pipeline that includes preprocessing steps\n    and a classifier, fits the model on the training data and\n    calls a function to estimate classification accuracy on the test data.\"\"\"\n    pipe = Pipeline([\n        ('vect', CountVectorizer(ngram_range=(1, 3), max_df=0.8)),  # Transform text into tokens using individual words, pairs and triplets\n        ('tfidf', TfidfTransformer()),  # Take into account word frequency\n        ('clf', model)  # Classification model passed to the function\n    ])\n    pipe.fit(X_train, y_train)\n    accuracy_estimator(pipe, name)","635bbbc4":"# Transform categories into numbers\nle = LabelEncoder()\ny = le.fit_transform(data['sentiment'])\nle.classes_","2481da2c":"# Withhold 20% of the original data for test purposes.\n# Take into account class imbalances during the split stratifying the data accoording to y labels.\nX_train, X_test, y_train, y_test = train_test_split(data['text'],\n                                                    y,\n                                                    stratify=y,\n                                                    test_size=0.2,\n                                                    random_state=1)","05dc19b4":"# Create and evaluate NaiveBayes model with base parameters.\nsentiment_reader(MultinomialNB(), 'NaiveBayes')","827aad16":"# Create and evaluate LogisticRegression model specifying 'class_weight' parameter as 'balanced'\n# to compensate for class imbalances. Large 'max_iter' will ensure that the model converges.\nsentiment_reader(LogisticRegression(class_weight='balanced', max_iter=1000), 'LogisticRegression')","e4792c32":"# Create and evaluate SGDClassifier with linear SVM parameters and balanced class weights.\nsentiment_reader(SGDClassifier(class_weight='balanced', loss='hinge', penalty='l2', tol=None), 'SGDClassifier')","d5719010":"# Number of samples in the least represented class\nquota = data['sentiment'].value_counts().min()\nquota","b4e95185":"# New DataFrame to add equal number of samples from each class\nbalanced_data = pd.DataFrame(columns=['sentiment', 'text'])","81be1d96":"# Reduce each group to the chosen number of samples\ndata_groups = data.groupby('sentiment')\nfor group in data_groups.indices:\n    reduced_class = data_groups.get_group(group)[['sentiment', 'text']].iloc[:quota, :]\n    balanced_data = balanced_data.append(reduced_class, ignore_index=True)","5486f3fa":"# Class distribution in the new dataset\nbalanced_data['sentiment'].value_counts()","6f7ef3ac":"# Target values\ny = le.fit_transform(balanced_data['sentiment'])","10e1b404":"# Training and test samples\nX_train, X_test, y_train, y_test = train_test_split(balanced_data['text'],\n                                                    y,\n                                                    stratify=y,\n                                                    test_size=0.2,\n                                                    random_state=1)","339a3fea":"# Create and evaluate SGDClassifier model\nsentiment_reader(SGDClassifier(loss='hinge', penalty='l2', tol=None), 'SGDClassifier')","1f4d4b39":"# Instantiate the model and train it on balanced dataset without withholding test samples.\nX = balanced_data['text']\n\npipe = Pipeline([\n        ('vect', CountVectorizer(ngram_range=(1, 3), max_df=0.8)),\n        ('tfidf', TfidfTransformer()),\n        ('clf', SGDClassifier(loss='hinge', penalty='l2', tol=None))\n    ])\npipe.fit(X, y)","55949750":"# Accuracy on this training dataset\npipe.score(X, y)","e3eab616":"# Make a prediction on the unreduced original dataset\nunreduced_X = data['text']\nunreduced_y = le.transform(data['sentiment'])\npipe.score(unreduced_X, unreduced_y)","9b6d95f8":"# Confusion matrix\npredicted_y = pipe.predict(unreduced_X)\nconf_matrix = confusion_matrix(unreduced_y, predicted_y)\n\nclasses_names = le.classes_\ncolumns = ['pred_' + name for name in classes_names]\nindexes = ['actual_' + name for name in classes_names]\nconf_matrix = pd.DataFrame(conf_matrix, columns=columns, index=indexes)\n\nclassification_heatmap(conf_matrix)","fa3d4909":"# Try to get a prediction for out of sample headlines with obvious sentiment.\nnew_samples = ['Experts expect the world economy to grow at a steady rate of 3% a year.',\n               'Local retailers reported much lower revenues this year. Expansion plans are suspended.']\nprediction = pipe.predict(new_samples)\nfor pred in prediction:\n    print(le.classes_[pred])","9f885280":"SGDClassifier showed the highest accuracy among the three tested sklearn models, though error rate in the least represented categories is still high. Only about 59% of the actual negative news are correctly classified, which is not nearly enough recall to use for actual investment decisions. In the positive category recall is 0.66 and precision is 0.69, which is also rather mediocre.\n\nExperiments with optimizing model parameters through grid search did not resolve this issue. The data is highly imbalanced and most important classes are underrepresented. There is evidence that grid search on imbalanced classes of data does not lead to satisfactory results.","f7ac93f5":"### Data analysis and visualization","1b8a0047":"# Investment Sentiment from the News\nThis notebook compares several ML models applying them to the task of classifying news headlines sentiment. The models could be used to predict the behaviour of retail investors.","0bf6078b":"Logistic regression model demonstrated higher accuracy score and higher ROC AUC compared to the previous model. This model is more adequate for the task at hand. In each category the largest numbers in the confusion matrix are located on the main diagonal. Both precision and recall scores are above 50%, which proves that the model is not just guessing and randomly assigning classes. However, prediction accuracy for negative and positive news is still not high enough to use this model for any business decisions.","f09315a6":"### Compare base sklearn models","9857cf8c":"### Functions for modelling","9fb67443":"Text corpus available for analysis and classification is not large. It contains less than 5,000 samples in total. Headline samples are paired with sentiment labels.","a975b3ad":"### Balancing the classes\nTo resolve the issue with underrepresented classes and improve recall and precision metrics we will try to balance the classes in the dataset. Two approaches are possible:\n- Make all three classes equally represented in the training and test set.\n- Reduce the number of samples in the prevailing category to make it proportional to the second most represented group.\n\nTesting showed that the first approach leads to higher increase in accuracy scores.","ed9e3350":"All the metrics improved considerably:\n- Recall score for negative and positive categories increased to acceptable levels. However prediction accuracy for the neutral news category slightly decreased compared to the previous trial when we used all the data available for this group.\n- Precision score increased for the underrepresented groups without negative side effects to the neutral category.","7d701f7f":"Accuracy score of this model is higher than the share of the most frequent class in the dataset, but confusion matrix shows that the model is largerly useless. The model fails to correctly classify negative news - the least represented category in the training set. Majority of the samples in the negative category were attributed to the wrong classes. The highest recall was shown for the neutral news. However, the model frequently confuses positive and neutral news, and in the positive category recall is very low. ROC AUC is relatively high, but this high level could not be considered as an indicator of the model's quality. For any practical business purposes it would be more useful to correctly classify the extremes (positive and negative sentiment), which lead to changes in investment behaviour, than to be pricise in labelling neutral sentiment.","58f78a29":"If we compare this confusion matrix with the case, when we trained the model on unbalanced dataset and checked the accuracy on the test data, there is obvious improvement. The model learned to differentiate negative news from other news categories with high degree of accuracy. However, we should remember that in this training the model saw all available negative samples. It's still unclear if this recall score will be the same in testing on any new samples.\n\nConfusion between positive and neutral news is still visible on the chart. The model did not see all positive news samples during the training process, which confirmes that this approach only partially solves the issue with imbalanced classes.\n\nWe can conclude that the best approach to solve this classification problem would be to increase the dataset and find additional text samples to add to the negative and positive sentiment categories. All categories should be more or less equally represented. Imbalances in the original data prevent the models from correctly learning distinctive features for sentiment categories. Dropping samples from overrepresented groups inreases accuracy scores but potentially harms the training process because we limit the available training set.","d078d039":"Lets check if this model makes sense when we train it on the balanced dataset without withholding a test portion and then evaluate the accuracy on all available samples from the original unreduced dataset.","fa1ce5af":"Dataset is highly imbalanced. Majority of the samples represent one category - neutral headlines. Negative news account for only 12.5% of the samples.","eb67367d":"Headlines differ in their length and styles. Texts could consist of words or combine words with numbers and percentages. Some samples contain irregular punctuation, double spaces or extra spaces around punctuation marks.","9481eb60":"Text samples are not uniform in structure. Headlines length varies greately from just one word to 50 words. Mean length value is about 20 words. Distribution is slightly skewed to the right."}}