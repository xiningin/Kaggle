{"cell_type":{"e1178bc6":"code","2e7d9b53":"code","2afe5a10":"code","e3d21ce6":"code","b93c7813":"code","bc7c1e8d":"code","3d1a9132":"code","c46cdbf2":"code","f28ed845":"code","78ada71e":"code","3e550c7f":"code","300e33fd":"code","23b61db1":"code","bd52ea5f":"code","f5ea92a2":"code","3930119a":"markdown","982f507a":"markdown","fb78c44b":"markdown","5ac4ce52":"markdown","c7d13814":"markdown","c41957da":"markdown","9d4f0314":"markdown","f5c2df78":"markdown","187974bd":"markdown","68048df8":"markdown","2ac5e38d":"markdown","470781ec":"markdown","e92a4296":"markdown","7a9ad99e":"markdown","57ac471c":"markdown"},"source":{"e1178bc6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","2e7d9b53":"import numpy as np\nimport pandas as pd\nfrom copy import deepcopy","2afe5a10":"# Euclidean Distance Caculator\ndef dist(a, b, axis=1):\n    return np.linalg.norm(a - b, axis=axis)","e3d21ce6":"def kmeans_custom(Data,k) :\n    # Select k random datapoints as centroids\n    Centroids = np.array(pd.DataFrame(Data).sample(n=k))\n    # To store the value of centroids when it updates\n    Centroids_old = np.zeros(Centroids.shape)\n    # Cluster lables to be appended (Initialize with zeros)\n    clusters = np.zeros(len(Data))\n    # Loss function - Distance between new centroids and old centroids\n    loss = dist(Centroids, Centroids_old, None)\n    # Looping through all the points till the loss becomes zero\n    while loss != 0:\n        \n        for i in range(len(Data)):\n            distances = dist(Data[i], Centroids)\n            cluster = np.argmin(distances)\n            clusters[i] = cluster\n        # Storing the old centroid values\n        Centroids_old = deepcopy(Centroids)\n        # Finding the new centroids by taking the average value\n        for i in range(k):\n            points = [Data[j] for j in range(len(Data)) if clusters[j] == i]\n            Centroids[i] = np.mean(points, axis=0)\n        loss = dist(Centroids, Centroids_old, None)\n    new_DataFrame = pd.DataFrame(Data)\n    # Appending clusters column to the original dataframe\n    new_DataFrame['Cluster']= clusters\n    return new_DataFrame","b93c7813":"data = pd.read_csv('..\/input\/insurance.csv')\ndata.head()","bc7c1e8d":"new_data = data.iloc[:500,[0,2]]\nnew_data.head()","3d1a9132":"from sklearn import preprocessing\nnew_data2 = preprocessing.normalize(new_data)\nnew_data3 = pd.DataFrame(new_data2)\nnew_data3.head()","c46cdbf2":"result = kmeans_custom(new_data2,4)\nresult.head()","f28ed845":"from matplotlib import pyplot as plt\nplt.scatter(result[0],result[1], c=result['Cluster'])","78ada71e":"new_data4 = data.iloc[:500,[0,2,6]]\nnew_data4.head()","3e550c7f":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(new_data4.iloc[:,0:2], new_data4.iloc[:,2], test_size=0.2, random_state=42)\nX_train.head()","300e33fd":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","23b61db1":"def knn_regr_predictor(point,k):\n    distance = []\n    # Calculate distance from the test point to every point in train data\n    distance.append(dist(X_train,point))\n    # Select k nearest points\n    d2 = np.argpartition(distance, k)\n    d2 = d2.flatten()\n    # calculate average of their targets\n    return np.average([ y_train[i] for i in d2[:k] ])","bd52ea5f":"knn_regr_predictor(X_test[1:2],10)","f5ea92a2":"y_test[1:2]","3930119a":"# K Means Clustering","982f507a":"## Custom Function","fb78c44b":"Passing it through the custom function","5ac4ce52":"Actual target","c7d13814":"# KNN Regressor","c41957da":"Plotting the clusters to validate","9d4f0314":"### Custom Function for K-means Clustering","f5c2df78":" Objective : Defining a custom function for k-means clustering (Euclidean distance)","187974bd":"Prediction for a test point","68048df8":"#### Testing with a simple dataset","2ac5e38d":"Train test Split","470781ec":"#### Normalizing the dataset","e92a4296":" Objective : Defining a simple custom function for k-nearest neighbors Regressor which takes a single test point and predicts its target\n \n -Euclidean distance\n \n -Simple mean of n nearest neighbor targets","7a9ad99e":"### Importing Libraries","57ac471c":"Scaling the numeric features"}}