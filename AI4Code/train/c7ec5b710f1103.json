{"cell_type":{"d070c3b6":"code","5a33ba54":"code","5ab493f8":"code","ace4e2fa":"code","a9798690":"code","5f688af5":"code","cbc0b833":"code","03fceba3":"code","fc5a6623":"code","09806ce7":"code","5bfbfeef":"code","49239b20":"code","37f733a7":"code","309a0ca9":"code","d7c8cbc8":"code","d7b832be":"code","cd11f7ed":"code","1e5af51a":"code","5ebbb29d":"code","bf472051":"code","b8a615d1":"code","dcf02350":"code","4197392b":"code","130fc5eb":"code","0acbd92a":"code","a8bf499c":"code","0cc68574":"code","d1d8429b":"code","2c0e1c64":"code","0921f426":"code","6cfdc54b":"code","90a23753":"code","3b65421d":"code","8c9b05e3":"code","f975a564":"markdown","5b2e64b2":"markdown","b1b3b17b":"markdown","552a3f64":"markdown","63511db5":"markdown","d14055dc":"markdown","a281d128":"markdown","4ead9591":"markdown","026819ae":"markdown","fb012097":"markdown"},"source":{"d070c3b6":"import pandas as pd                                     # load & manipulate data and for One-Hot Encoding\nimport numpy as np                                      # Data manipulation\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as colors\nfrom sklearn.utils import resample                      # downsample the dataset\nfrom sklearn.model_selection import train_test_split    # split the data into training and test sets\nfrom sklearn.preprocessing import scale                 # Scale and certer data\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV        # for cross validation\nfrom sklearn.metrics import confusion_matrix            # create confusion matrix\nfrom sklearn.metrics import plot_confusion_matrix       \nfrom sklearn.decomposition import PCA                   # to perform PCA to plot the data","5a33ba54":"df = pd.read_excel('https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/00350\/default%20of%20credit%20card%20clients.xls',\n                 header=1)","5ab493f8":"df.head()","ace4e2fa":"# Rename the dependent variable(y) to 'default'\n\ndf.rename({'default payment next month': 'DEFAULT'}, axis = 'columns', inplace=True)\ndf.head()","a9798690":"# Drop ID Column\n\ndf.drop('ID', axis=1, inplace=True)\ndf.head()","5f688af5":"df.dtypes","cbc0b833":"# Sex (Should contains 1 and 2)\ndf['SEX'].unique()","03fceba3":"# Education (Should contains 1, 2, 3, 4)\ndf['EDUCATION'].unique()","fc5a6623":"# Marriage (should contains 1, 2, 3)\ndf['MARRIAGE'].unique()","09806ce7":"# Missing Values\nlen(df.loc[(df['EDUCATION']==0) | (df['MARRIAGE']==0)])","5bfbfeef":"len(df)","49239b20":"df_no_missing = df.loc[(df['EDUCATION'] !=0) & (df['MARRIAGE'] != 0)]","37f733a7":"len(df_no_missing)","309a0ca9":"df_no_missing['EDUCATION'].unique()","d7c8cbc8":"df_no_missing['MARRIAGE'].unique()","d7b832be":"len(df_no_missing)","cd11f7ed":"df_no_default = df_no_missing[df_no_missing['DEFAULT'] == 0]\ndf_default = df_no_missing[df_no_missing['DEFAULT'] == 1]","1e5af51a":"print(len(df_no_default))\nprint(len(df_default))","5ebbb29d":"# Downsample the dataset that did not default\n\ndf_no_default_downsampled = resample(df_no_default,\n                                     replace=False,\n                                     n_samples=1000,\n                                     random_state=42)\nlen(df_no_default_downsampled)","bf472051":"# Downsample the dataset that defaulted\n\ndf_default_downsampled = resample(df_default,\n                                  replace=False,\n                                  n_samples=1000,\n                                  random_state=42)\nlen(df_default_downsampled)","b8a615d1":"# Merge both downsampled dataset into a single dataframe\n\ndf_downsample = pd.concat([df_no_default_downsampled, df_default_downsampled])\nlen(df_downsample)","dcf02350":"# Spliting the dataset into Independent & Dependent Variable\n\nX = df_downsample.drop('DEFAULT', axis=1).copy()\nX.head()","4197392b":"y = df_downsample['DEFAULT'].copy()\ny.head()","130fc5eb":"X_encoded = pd.get_dummies(X, columns=['SEX',\n                                       'EDUCATION',\n                                       'MARRIAGE',\n                                       'PAY_0',\n                                       'PAY_2',\n                                       'PAY_3',\n                                       'PAY_4',\n                                       'PAY_5',\n                                       'PAY_6'])\nX_encoded.head()","0acbd92a":"X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, random_state=42)\nX_train_scaled = scale(X_train)\nX_test_scaled = scale(X_test)","a8bf499c":"clf_svm = SVC(random_state=42)\nclf_svm.fit(X_train_scaled, y_train)","0cc68574":"# Confusion Matrix\n\nplot_confusion_matrix(clf_svm,\n                      X_test_scaled,\n                      y_test,\n                      values_format='d',\n                      display_labels = [\"Did not default\", \"Defaulted\"])","d1d8429b":"param_grid = [\n              {'C':[0.5, 1, 10, 100],\n               'gamma':['scale', 1, 0.1, 0.01, 0.001, 0.0001],\n               'kernel': ['rbf']},\n]\n\noptimal_params = GridSearchCV(\n    SVC(),\n    param_grid,\n    cv=5,\n    scoring='accuracy',\n    \n)\n\noptimal_params.fit(X_train_scaled, y_train)\nprint(optimal_params.best_params_)\n","2c0e1c64":"#Support Vector Machines\nclf_svm = SVC(random_state=42, C=100, gamma=0.001)\nclf_svm.fit(X_train_scaled, y_train)","0921f426":"# Confusion Matrix\n\nplot_confusion_matrix(clf_svm,\n                      X_test_scaled,\n                      y_test,\n                      values_format='d',\n                      display_labels = [\"Did not default\", \"Defaulted\"])","6cfdc54b":"len(df_downsample.columns)","90a23753":"pca = PCA()\nX_train_pca = pca.fit_transform(X_train_scaled)\n\nper_var = np.round(pca.explained_variance_ratio_* 100, decimals=1)\nlabels = [str(x) for x in range(1, len(per_var)+1)]\n\nplt.bar(x=range(1, len(per_var)+1), height=per_var)\nplt.tick_params(\n    axis='x',\n    which='both',\n    bottom=False,\n    top=False,\n    labelbottom=False)\n\nplt.ylabel('Percentage of Explained Varriance')\nplt.xlabel('Principal Component')\nplt.title('Scree Plot')\nplt.show()","3b65421d":"train_pc1_coords = X_train_pca[:, 0]\ntrain_pc2_coords = X_train_pca[:, 1]\n\npca_train_scaled = scale(np.column_stack((train_pc1_coords, train_pc2_coords)))\n\nparam_grid = [\n              {'C':[1, 10, 100, 1000],\n               'gamma':['scale', 1, 0.1, 0.01, 0.001, 0.0001],\n               'kernel': ['rbf']},\n]\n\noptimal_params = GridSearchCV(\n    SVC(),\n    param_grid,\n    cv=5,\n    scoring='accuracy',\n    verbose=0\n    \n)\n\noptimal_params.fit(X_train_scaled, y_train)\nprint(optimal_params.best_params_)","8c9b05e3":"clf_svm = SVC(random_state=42, C=1000, gamma=0.001)\nclf_svm.fit(pca_train_scaled, y_train)\n\n# Transform the test dataset with the PCA\nX_test_pca = pca.transform(X_train_scaled)\n\ntest_pc1_coords = X_test_pca[:, 0]\ntest_pc2_coords = X_test_pca[:, 1]\n\n\nx_min = test_pc1_coords.min() - 1\nx_max = test_pc1_coords.max() + 1\n\ny_min = test_pc2_coords.min() - 1\ny_max = test_pc2_coords.max() + 1\n\nxx, yy = np.meshgrid(np.arange(start=x_min, stop=x_max, step=0.1),\n                     np.arange(start=y_min, stop=y_max, step=0.1))\n\n\nZ = clf_svm.predict(np.column_stack((xx.ravel(), yy.ravel())))\n\nZ = Z.reshape(xx.shape)\n\nfig, ax = plt.subplots(figsize=(10, 10))\n\nax.contourf(xx, yy, Z, alpha=0.1)\ncmap = colors.ListedColormap(['#0000FF', '#FF4500'])\n\nscatter = ax.scatter(test_pc1_coords, test_pc2_coords, c=y_train,\n                     cmap=cmap,\n                     s=100,\n                     edgecolors='k', # 'k' = black\n                     alpha = 0.7)\n\nlegend = ax.legend(scatter.legend_elements()[0],\n                   scatter.legend_elements()[1],\n                    loc = \"upper right\")\n\nlegend.get_texts()[0].set_text(\"No Default\")\nlegend.get_texts()[1].set_text(\"Yes Default\")\n\nax.set_ylabel('PC2')\nax.set_xlabel('PC2')\nax.set_title('Decision Surface Using the PCA')\nplt.show()","f975a564":"**Details:**   \nData-set: UCI Dataset, contains continous and categorical data\n\n**Model:**     \nA **support vector machine** for **classification** using **scikit-learn** and the **Radial Basis Function (RBF) Kernel**\n","5b2e64b2":"**Preliminary Support Vector Machine**","b1b3b17b":"**Downsample the data**","552a3f64":"**Optimize Parameters with Cross Validation and GridSearchCV()**","63511db5":"**Managing Missing Data**","d14055dc":"**The Ideal Value of C:100 and Ideal Value of gamma:0.001**","a281d128":"**Centering and Scaling**","4ead9591":"## **Predict whether a person will Default their credit card or not.**\n\n","026819ae":"**One-Hot Encoding**        \n**\"SEX\"**, **\"EDUCATION\"**, **\"MARRIAGE\"** and **\"PAY\"** are categorical and need to be modified!(Using One-Hot Encoding)","fb012097":"**PCA (Principle Component Analysis)**"}}