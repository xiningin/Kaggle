{"cell_type":{"18f5b28e":"code","3acc44ad":"code","11f18f71":"code","f9c37295":"code","c7620360":"code","fb7d1bdf":"code","d1f67a20":"code","48679a8a":"code","ff98ddcb":"code","861e7815":"code","a92f6f03":"code","19a76808":"code","a6726a82":"code","21ba057c":"code","fec29a89":"code","e8cee22a":"code","cde5ece1":"code","683e9cbd":"code","1d96e11a":"code","dd2c50fe":"code","5028f778":"code","dd8de702":"code","6166349e":"code","b2362a66":"code","4be09355":"code","8c0bc70f":"code","8d48e531":"markdown","89f26535":"markdown","2600ada4":"markdown","5ebef404":"markdown","2bbf4e28":"markdown","48061749":"markdown","0c5b65d7":"markdown","ca0250c7":"markdown","21aa9da9":"markdown","065f4441":"markdown","cd446308":"markdown","ace380ab":"markdown","299bf110":"markdown"},"source":{"18f5b28e":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","3acc44ad":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns\nimport statsmodels.api as sm\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn import metrics\n\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet\n%matplotlib inline","11f18f71":"data = pd.read_csv(\"..\/input\/advertising-data\/Advertising.csv\")","f9c37295":"data.head()","c7620360":"data.drop(['Unnamed: 0'], axis=1, inplace=True)","fb7d1bdf":"X = data.drop(['Sales', 'Newspaper'], axis=1)\nY = data['Sales'].values.reshape(-1,1)","d1f67a20":"X2 = sm.add_constant(X)\nest = sm.OLS(Y, X2)\nest2 = est.fit()\nprint(est2.summary())","48679a8a":"X_train, X_test, Y_train, Y_test = train_test_split(\n    X, Y, test_size=0.25, random_state=42\n    )","ff98ddcb":"def print_evaluate(y_test, predicted):  \n    mae = metrics.mean_absolute_error(y_test, predicted)\n    mse = metrics.mean_squared_error(y_test, predicted)\n    r2_square = metrics.r2_score(y_test, predicted)\n    print('MAE:', mae)\n    print('MSE:', mse)\n    print('R2 Square', r2_square)\ndef cross_val(model, X = X, Y = Y, cv=10):\n    MSE = cross_val_score(model, X, Y, scoring='neg_mean_squared_error', cv=cv)\n    return print(-np.mean(MSE))","861e7815":"# Linear Regression\nlinear_reg = LinearRegression()\n# Ridge Regression\nridge = Ridge()\n# Lasso\nlasso = Lasso(tol=1e4)\n# Elastic Net\nelastic_net = ElasticNet()","a92f6f03":"linear_reg.fit(X_train, Y_train)\nlinear_reg_pred = linear_reg.predict(X_test)\nprint_evaluate(Y_test, linear_reg_pred)","19a76808":"results = pd.DataFrame(\n    data = [\n            [\"Linear Regression\",\n             metrics.mean_squared_error(Y_test, linear_reg_pred),\n             metrics.r2_score(Y_test, linear_reg_pred)\n             ]\n            ],\n            columns=['Model', 'Mean Squared Error', 'R2 Square'])","a6726a82":"parameters = {'alpha':[1e-15, 1e-10, 1e-8, 1e-4, 1e-3, 1e-2, 1, 5, 10, 20]}\nridgeCV = GridSearchCV(\n    ridge, parameters, scoring='neg_mean_squared_error', cv=5\n    )\nridgeCV.fit(X_train, Y_train)\nridgeCV_pred = ridgeCV.predict(X_test)\nprint_evaluate(Y_test, ridgeCV_pred)","21ba057c":"ridge_result = pd.DataFrame(\n    data = [\n            [\"Ridge Regression\",\n             metrics.mean_squared_error(Y_test, ridgeCV_pred),\n             metrics.r2_score(Y_test, ridgeCV_pred)\n             ]\n            ],\n            columns=['Model', 'Mean Squared Error', 'R2 Square'])\nresults = results.append(ridge_result, ignore_index=True)","fec29a89":"parameters =  {'alpha':[1e-15, 1e-10, 1e-8, 1e-4, 1e-3, 1e-2, 1, 5, 10, 20]}\nlassoCV = GridSearchCV(\n    lasso, parameters, scoring='neg_mean_squared_error', cv=5,\n    )\nlassoCV.fit(X_train, Y_train)\nlassoCV_pred = lassoCV.predict(X_test)\nprint_evaluate(Y_test, lassoCV_pred)","e8cee22a":"lasso_result = pd.DataFrame(\n    data = [\n            [\"Lasso\",\n             metrics.mean_squared_error(Y_test, lassoCV_pred),\n             metrics.r2_score(Y_test, lassoCV_pred)\n             ]\n            ],\n            columns=['Model', 'Mean Squared Error', 'R2 Square'])\nresults = results.append(lasso_result, ignore_index=True)","cde5ece1":"elastic_net_default = ElasticNet()\nelastic_net_default.fit(X_train, Y_train)\nelastic_net_default_pred = elastic_net_default.predict(X_test)\nprint_evaluate(Y_test, elastic_net_default_pred)","683e9cbd":"elastic_net_default_result = pd.DataFrame(\n    data = [\n            [\"Elastic Net (alpha=1)\",\n             metrics.mean_squared_error(Y_test, elastic_net_default_pred),\n             metrics.r2_score(Y_test, elastic_net_default_pred)\n             ]\n            ],\n            columns=['Model', 'Mean Squared Error', 'R2 Square'])\nresults = results.append(elastic_net_default_result, ignore_index=True)","1d96e11a":"elastic_net = ElasticNet(alpha = 10.5)\nelastic_net.fit(X_train, Y_train)\nelastic_net_pred = elastic_net.predict(X_test)\nprint_evaluate(Y_test, elastic_net_pred)","dd2c50fe":"elastic_net_result = pd.DataFrame(\n    data = [\n            [\"Elastic Net (alpha=10.5)\",\n             metrics.mean_squared_error(Y_test, elastic_net_pred),\n             metrics.r2_score(Y_test, elastic_net_pred)\n             ]\n            ],\n            columns=['Model', 'Mean Squared Error', 'R2 Square'])\nresults = results.append(elastic_net_result, ignore_index=True)","5028f778":"from sklearn.linear_model import RANSACRegressor\nfrom sklearn.preprocessing import PolynomialFeatures","dd8de702":"ransac = RANSACRegressor()\nransac.fit(X_train, Y_train)\nransac_pred = ransac.predict(X_test)\nprint_evaluate(Y_test, ransac_pred)","6166349e":"ransac_result = pd.DataFrame(\n    data = [\n            [\"Robust RANSAC Regressor\",\n             metrics.mean_squared_error(Y_test, ransac_pred),\n             metrics.r2_score(Y_test, ransac_pred)\n             ]\n            ],\n            columns=['Model', 'Mean Squared Error', 'R2 Square'])\nresults = results.append(ransac_result, ignore_index=True)","b2362a66":"poly_reg = PolynomialFeatures(degree=3)\nX_poly = poly_reg.fit_transform(X)\n\nX_poly_train, X_poly_test, y_poly_train, y_poly_test = train_test_split(\n    X_poly, Y, test_size=0.25, random_state=42\n    )\n\nlin_reg_poly = LinearRegression()\n\nlin_reg_poly.fit(X_poly_train,y_poly_train)\npoly_pred = lin_reg_poly.predict(poly_reg.transform(X_test))\nprint_evaluate(Y_test, poly_pred)","4be09355":"poly_result = pd.DataFrame(\n    data = [\n            [\"Linear Regression using Polynomial Features\",\n             metrics.mean_squared_error(Y_test, poly_pred),\n             metrics.r2_score(Y_test, poly_pred)\n             ]\n            ],\n            columns=['Model', 'Mean Squared Error', 'R2 Square'])\nresults = results.append(poly_result, ignore_index=True)","8c0bc70f":"results.sort_values(by=['Mean Squared Error', 'R2 Square'])","8d48e531":"### Import libraries\n\n","89f26535":"### Linear Regression","2600ada4":"### Dataset","5ebef404":"### Useful functions","2bbf4e28":"### Dataset splitting Train \/ Test","48061749":"### Elastic Net","0c5b65d7":"### Robust","ca0250c7":"### Polynomial Features","21aa9da9":"### Conclusion","065f4441":"Hi! In this notebook we will compare the linear regression to many regularization models as Ridge regression, Lasso, Elastic-Net, and others. If you not yet try a linear regression I advice you to look [this](https:\/\/www.kaggle.com\/raisssaid\/supervised-learning-linear-regression-advertising).","cd446308":"### Lasso","ace380ab":"### Ridge Regression","299bf110":"### Create models"}}