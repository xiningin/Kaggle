{"cell_type":{"9e99185c":"code","5175832d":"code","00b616f6":"code","cc984ed8":"code","60b41478":"code","ef791240":"code","7206c342":"code","db598e37":"code","f7b75f05":"code","09d7e27d":"code","2a415b75":"code","e5423941":"code","52fff4c0":"code","00a071f9":"code","190b1019":"code","a803a8da":"code","7222ebae":"code","13b0cd6b":"code","621747c3":"markdown"},"source":{"9e99185c":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport cv2\nfrom sklearn.utils import shuffle\nfrom random import randint\n\nfrom tensorflow.keras.layers import Conv2D,MaxPool2D,Flatten,Dense,Dropout\nimport tensorflow.keras.activations as Actications\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import RMSprop,Adam\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom keras.preprocessing import image\nimport matplotlib.image as mpimg","5175832d":"def getImages(directory):\n    \n    Images = list()\n    Labels = list()\n    \n    label = 0\n    \n    for di in os.listdir(directory):\n        if di == 'Mask':\n            label = 0\n        elif di == 'Non Mask':\n            label = 1\n        for image_file in os.listdir(os.path.join(directory,di)):\n            img_path = os.path.join(directory,di)\n            image = cv2.imread(os.path.join(img_path,image_file))\n            image = cv2.resize(image,(224,224))\n            \n            Images.append(image)\n            Labels.append(label)\n    return shuffle(Images, Labels, random_state= 0)","00b616f6":"Images, Labels = getImages('..\/input\/covid-face-mask-detection-dataset\/New Masks Dataset\/Train')\n\ntrain_Images = np.array(Images)\ntrain_Labels = np.array(Labels)","cc984ed8":"print(f'Train images shape: {train_Images.shape}')\nprint(f'Train Labels shape: {train_Labels.shape}')","60b41478":"def get_label(code):\n    label = {0:'Mask', 1:'Non Mask'}\n    \n    return label[code]","ef791240":"fig, ax = plt.subplots(5,5)\nfig.subplots_adjust(0,0,3,3)\n\nfor i in range(0, 5, 1):\n    for j in range(0, 5, 1):\n        rand_number = randint(0, len(Images))\n        ax[i, j].imshow(train_Images[rand_number])\n        ax[i, j].set_title(get_label(train_Labels[rand_number]))\n        ax[i, j].axis('off')","7206c342":"data_gen = ImageDataGenerator(\n    rescale=1.\/255,\n    zoom_range = 0.2,\n    horizontal_flip = True,\n    vertical_flip = True,\n    rotation_range = 40,\n    width_shift_range = 0.2,\n    height_shift_range = 0.2,\n    validation_split=0.2)","db598e37":"base_dir = '..\/input\/covid-face-mask-detection-dataset\/New Masks Dataset'\ntrain_data_gen = data_gen.flow_from_directory(os.path.join(base_dir,'Train'),\n                                              target_size=(224, 224),\n                                             batch_size = 32,\n                                             class_mode='binary')\nvalidation_data_gen = data_gen.flow_from_directory(os.path.join(base_dir,'Validation'),\n                                              target_size=(224, 224),\n                                             batch_size = 32,\n                                             class_mode='binary')                                         ","f7b75f05":"model = Sequential([\n    Conv2D(16, (3, 3), activation = 'relu', input_shape = (224, 224,3)),\n    MaxPool2D(2, 2),\n    Conv2D(32, (3,3), activation='relu'),\n    MaxPool2D(2,2),\n    Conv2D(64, (3,3), activation='relu'),\n    MaxPool2D(2,2),\n    Conv2D(128, (3,3), activation='relu'),\n    MaxPool2D(2,2),\n    Dropout(0.1),\n    Flatten(),\n    Dense(512, activation='relu'),\n    Dense(1, activation='sigmoid')\n    \n])","09d7e27d":"model.summary()","2a415b75":"model.compile(loss='binary_crossentropy',\n              optimizer=Adam(),\n              metrics=['accuracy'])\nhistory = model.fit(train_data_gen, epochs= 50, validation_data = validation_data_gen,verbose = 2)","e5423941":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(len(acc))\n\nplt.plot(epochs, acc, 'r', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\n\nplt.figure()\n\nplt.plot(epochs, loss, 'r', label='Training Loss')\nplt.plot(epochs, val_loss, 'b', label='Validation Loss')\nplt.title('Training and validation loss')\nplt.legend()\n\nplt.show()","52fff4c0":"test_data_gen = data_gen.flow_from_directory(os.path.join(base_dir,'Test'),\n                                              target_size=(224, 224),\n                                             batch_size = 32,\n                                             class_mode='binary')   ","00a071f9":"STEP_SIZE_TEST=test_data_gen.n\/\/test_data_gen.batch_size\n\npred=model.predict_generator(test_data_gen,\nsteps=STEP_SIZE_TEST,\nverbose=1)","190b1019":"scores = model.evaluate_generator(test_data_gen,50)\nprint(\"Accuracy = \", scores[1])","a803a8da":"model.evaluate(test_data_gen)","7222ebae":"def test_mask(path):\n    im = mpimg.imread(path)\n    plt.imshow(im)\n    img = image.load_img(path, target_size=(224, 224))\n    y = image.img_to_array(img)\n    y = np.expand_dims(y, axis=0)\n    images = np.vstack([y])\n    classes = model.predict_classes(images, batch_size=10)\n    return get_label(classes[0][0])","13b0cd6b":"test_mask('..\/input\/covid-face-mask-detection-dataset\/New Masks Dataset\/Test\/Mask\/2114.jpeg')","621747c3":"# **STAY HOME, STAY SAFE**"}}