{"cell_type":{"46231c27":"code","d26bfd5b":"code","d97ac7b6":"code","38153d10":"code","b0c5c926":"code","1dd3a189":"code","d33dc0e4":"code","7293235f":"code","95f67b8b":"code","d4540d49":"code","6b513dda":"code","45162283":"code","0a2d2a54":"code","d60a0942":"code","6fed24e7":"code","57a25cf6":"code","3e4f0ee8":"code","b7239f20":"code","f7bb34d9":"code","a99a65f3":"code","3c3b7935":"code","7cbbfc1b":"code","c157bbe2":"code","e5c4047c":"code","b9d987a4":"code","44905a03":"code","15f56333":"code","43857500":"code","558fe9c0":"code","fdf4bc24":"code","2c115d54":"code","783be8e3":"markdown","ee573d7c":"markdown","4bf75d15":"markdown","8f4990ba":"markdown","3960a27c":"markdown","639ffcbf":"markdown","d8296dcf":"markdown","59ec2417":"markdown","b85f397f":"markdown","5c80ba58":"markdown","0a57f73d":"markdown"},"source":{"46231c27":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline","d26bfd5b":"from sklearn.datasets import fetch_california_housing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler","d97ac7b6":"housing = fetch_california_housing()\ntype(housing)","38153d10":"print(housing['DESCR'])","b0c5c926":"X_train_full,X_test,y_train_full,y_test = train_test_split(housing.data,housing.target)\nX_train,X_valid,y_train,y_valid = train_test_split(X_train_full,y_train_full)","1dd3a189":"scaler = StandardScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_valid = scaler.transform(X_valid)\nX_test = scaler.transform(X_test)","d33dc0e4":"from tensorflow import keras\n\ninput_ = keras.layers.Input(shape=X_train.shape[1:])\nhidden1 = keras.layers.Dense(30, activation=\"relu\")(input_)\nhidden2 = keras.layers.Dense(30, activation=\"relu\")(hidden1)\nconcat = keras.layers.concatenate([input_, hidden2])\noutput = keras.layers.Dense(1)(concat)\nmodel = keras.models.Model(inputs=[input_], outputs=[output])","7293235f":"model.summary()","95f67b8b":"keras.utils.plot_model(model,'wide_alpha.png',show_shapes=True)","d4540d49":"model.compile(loss = 'mean_squared_error',optimizer=keras.optimizers.SGD(lr = 1e-3))","6b513dda":"history = model.fit(X_train,y_train,\n          epochs = 50,\n          validation_data = (X_valid,y_valid))","45162283":"fig = plt.figure(dpi = 100,figsize = (5,3))\nax = fig.add_axes([1,1,1,1])\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1,len(loss)+1)\nax.plot(epochs,loss,lw = 2,color = 'green',label = 'Loss')\nax.plot(epochs,val_loss,lw = 2,color = 'blue',label = 'Val Loss')\nplt.grid(True)\nplt.legend()\nax.set(xlabel = 'Number of Epochs',ylabel = 'Loss',title = 'Loss Curve')\nplt.show()","0a2d2a54":"X_new = X_test[:3]\ny_pred = model.predict(X_new)\ny_pred","d60a0942":"input_A = keras.layers.Input(shape = [5],name = 'wide_input')\ninput_B = keras.layers.Input(shape = [6],name = 'deep_input')\n\nhidden1 = keras.layers.Dense(30,activation = 'relu')(input_B)\nhidden2 = keras.layers.Dense(30,activation='relu')(hidden1)\n\nconcat = keras.layers.concatenate([input_A,hidden2])\n\noutput = keras.layers.Dense(1)(concat)\n\nmodel = keras.Model(inputs = [input_A,input_B],outputs = [output])","6fed24e7":"model.summary()","57a25cf6":"keras.utils.plot_model(model,'multi.png',show_shapes=True)","3e4f0ee8":"model.compile(loss = 'mean_squared_error',optimizer=keras.optimizers.SGD(lr = 1e-3))","b7239f20":"X_train_A, X_train_B = X_train[:, :5], X_train[:, 2:]\nX_valid_A, X_valid_B = X_valid[:, :5], X_valid[:, 2:]\nX_test_A, X_test_B = X_test[:, :5], X_test[:, 2:]\nX_new_A, X_new_B = X_test_A[:3], X_test_B[:3]","f7bb34d9":"history = model.fit((X_train_A,X_train_B),y_train,\n          epochs = 50,\n          validation_data = ((X_valid_A,X_valid_B),y_valid))","a99a65f3":"fig = plt.figure(dpi = 100,figsize = (5,3))\nax = fig.add_axes([1,1,1,1])\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1,len(loss)+1)\nax.plot(epochs,loss,lw = 2,color = 'green',label = 'Loss')\nax.plot(epochs,val_loss,lw = 2,color = 'blue',label = 'Val Loss')\nplt.grid(True)\nplt.legend()\nax.set(xlabel = 'Number of Epochs',ylabel = 'Loss',title = 'Loss Curve')\nplt.show()","3c3b7935":"y_pred = model.predict((X_new_A,X_new_B))\ny_pred","7cbbfc1b":"input_A = keras.layers.Input(shape = [5],name = 'wide_input')\ninput_B = keras.layers.Input(shape = [6],name = 'deep_input')\n\nhidden1 = keras.layers.Dense(30,activation='relu')(input_B)\nhidden2 = keras.layers.Dense(30,activation='relu')(hidden1)\n\nconcat = keras.layers.concatenate([input_A,hidden2])\n\noutput = keras.layers.Dense(1,name = 'main_output')(concat)\naux_output = keras.layers.Dense(1,name = 'aux_output')(hidden2)\n\nmodel = keras.Model(inputs = [input_A,input_B],outputs = [output,aux_output])\n\nmodel.summary()","c157bbe2":"keras.utils.plot_model(model,'complex.png',show_shapes=True)","e5c4047c":"model.compile(loss = ['mse','mse'],loss_weights = [0.9,0.1],optimizer='sgd')","b9d987a4":"history = model.fit((X_train_A,X_train_B),(y_train,y_train),\n          epochs = 50,\n          validation_data = ((X_valid_A,X_valid_B),(y_valid,y_valid)))","44905a03":"pd.DataFrame(history.history).head()","15f56333":"fig = plt.figure(dpi = 100,figsize = (5,3))\nax = fig.add_axes([1,1,1,1])\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(1,len(loss)+1)\nax.plot(epochs,loss,lw = 2,color = 'green',label = 'Loss')\nax.plot(epochs,val_loss,lw = 2,color = 'blue',label = 'Val Loss')\nplt.grid(True)\nplt.legend()\nax.set(xlabel = 'Number of Epochs',ylabel = 'Loss',title = 'Loss Curve')\nplt.show()","43857500":"total_loss,main_loss,aux_loss = model.evaluate((X_test_A,X_test_B),\n                                               (y_test,y_test))","558fe9c0":"y_pred_main,y_pred_aux = model.predict([X_new_A,X_new_B])","fdf4bc24":"y_pred_main","2c115d54":"y_pred_aux","783be8e3":"> Evaluate returns total_loss, main_loss and aux_loss.","ee573d7c":"> Please read this : I have not included much explaination in this code because they are preety easy to understand. If you are finding anything complex, please let me know i will explain that.\n\n# Introduction\n\nTopics Covered :-\n\n1. Functional API (Concat Layers)\n2. Multiple Inputs\n3. Multiple Outputs\n\n> I am using Keras and Tensorflow to build these models.\n\n![](https:\/\/2.bp.blogspot.com\/-wkrmRibw_GM\/V3Mg3O3Q0-I\/AAAAAAAABG0\/Jm3Nl4-VcYIJ44dA5nSz6vpTyCKF2KWQgCKgB\/s640\/image03.png)\n\nRead more about [Wide Deep Neural Networks](https:\/\/ai.googleblog.com\/2016\/06\/wide-deep-learning-better-together-with.html)","4bf75d15":"# Multiple Outputs\n\nNow build a model with multiple inputs as well as multiple outputs.","8f4990ba":"# Multiple Inputs\n\nNetwork with multiple inputs, I will overlap some inputs. I will pass 5 features directly to output layer and 6 features to Deep Networks.","3960a27c":"> I am using same target at both outputs , So i am passing y_train multiple times.","639ffcbf":"> We can also predict at each output.","d8296dcf":"> As we are passing two inputs, We need two input set. Let us make that.","59ec2417":"> Let us make train and dev set to build our model and I will use test set to evaluate at end.","b85f397f":"> Now let us predict outcome for first three observation in our test set.","5c80ba58":"> Thank you for reading my notebook. Let me know how you find this useful. Happy Learning !!","0a57f73d":"# Functional API\n\n## Concat Layers\n\nThe Keras functional API is a way to create models that is more flexible than the tf.keras.Sequential API. The functional API can handle models with non-linear topology, models with shared layers, and models with multiple inputs or outputs.\n\nThe main idea that a deep learning model is usually a directed acyclic graph (DAG) of layers. So the functional API is a way to build graphs of layers."}}