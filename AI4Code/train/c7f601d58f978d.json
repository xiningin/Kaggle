{"cell_type":{"0d078801":"code","4b2acbfc":"code","c05d0186":"code","3e683907":"code","ef99327a":"code","b3e9ff90":"code","df63148b":"code","0b643142":"code","0e73c8bf":"code","1357ab86":"code","fda5f63d":"code","8e412a96":"code","4383087f":"code","5eb9c6a3":"code","aa258f99":"code","085d2806":"code","f5f73618":"code","9f212ef0":"code","41b5bae4":"code","74a58031":"code","6853fb13":"code","fe235446":"code","c00f8496":"code","7e1c06f8":"code","2ce01407":"code","7d0b3ece":"code","faa4f989":"code","ef0b9241":"code","416e6a05":"code","f673a957":"code","201a62ae":"code","92a2c968":"code","6a2606df":"code","8bffaba8":"code","af4d0823":"code","1c8ec56f":"code","13605ae7":"code","003982a9":"code","099ca5e9":"code","b490658a":"code","b1ad0353":"code","880c9f96":"code","e45c1ca2":"code","409bf2a2":"code","8d3020b9":"code","089f293d":"code","64114be3":"code","6a0116a3":"code","8a16424b":"code","12abd38d":"code","af709376":"code","9161b8f7":"code","0718a2b7":"code","ca2b43ba":"code","51d7d4b2":"code","54480348":"code","9fbda5a8":"code","43c0c13f":"code","922dc4b3":"code","6f3ab829":"code","65f45c35":"markdown","37d6284c":"markdown","78f262f0":"markdown","6e1c4f90":"markdown","35e7ab91":"markdown","593957ee":"markdown","e453629d":"markdown","13d7389d":"markdown","af99ebf8":"markdown","42f28419":"markdown","a791c0e7":"markdown","e74b8fd2":"markdown","65e99f18":"markdown","88039fdc":"markdown","5c88fb2f":"markdown","06903704":"markdown","ae5aacba":"markdown","1ec0e795":"markdown","b791cc7c":"markdown","d20545c0":"markdown","a072b624":"markdown","cfbf04da":"markdown","1e37c1d3":"markdown","5a6325ed":"markdown","d43322e6":"markdown","6ec71d63":"markdown","cb8f9ef1":"markdown","82385606":"markdown","9751547c":"markdown","b82720d7":"markdown"},"source":{"0d078801":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.special import boxcox1p\nfrom scipy.stats import skew, boxcox_normmax\nsns.set()","4b2acbfc":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","c05d0186":"train = pd.read_csv('..\/input\/home-data-for-ml-course\/train.csv', index_col=0)\ntest = pd.read_csv('..\/input\/home-data-for-ml-course\/test.csv', index_col=0)","3e683907":"train.info()","ef99327a":"train.describe()","b3e9ff90":"train.shape","df63148b":"train.head()","0b643142":"test.info()","0e73c8bf":"test.describe()","1357ab86":"test.shape","fda5f63d":"test.head()","8e412a96":"len_train = train.shape\nlen_train","4383087f":"y = train['SalePrice']\ntrain_l = train.drop('SalePrice',axis=1)\ntest_l = test","5eb9c6a3":"combine = pd.concat([train_l, test_l])","aa258f99":"combine.shape","085d2806":"combine.isnull().sum()[combine.isnull().sum()>0]","f5f73618":"fill_Na = ['Alley', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'FireplaceQu', \n          'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond', 'PoolQC', 'Fence', 'MiscFeature', 'MasVnrType']\n\nfor col in fill_Na:\n    combine[col] = combine[col].fillna(\"NA\")","9f212ef0":"fill_0 = ['MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'BsmtFullBath',\n         'BsmtHalfBath', 'GarageYrBlt', 'GarageCars', 'GarageArea']\n\nfor col in fill_0:\n    combine[col] = combine[col].fillna(0)","41b5bae4":"fill_mode = ['Utilities', 'Exterior1st', 'Exterior2nd', 'Electrical', 'KitchenQual', 'Functional', 'SaleType']\n\nfor col in fill_mode:\n    combine[col] = combine[col].fillna(combine[col].mode()).astype(str)","74a58031":"combine['KitchenQual'].value_counts()","6853fb13":"combine['KitchenQual'] = combine['KitchenQual'].replace('nan','NA').astype(str)","fe235446":"combine.isnull().sum()[combine.isnull().sum() > 0]","c00f8496":"combine['MSZoning'] = combine.groupby(\"MSSubClass\")['MSZoning'].apply(lambda x: x.fillna(x.mode()[0]))\ncombine['LotFrontage'] = combine.groupby(\n    ['Neighborhood'])['LotFrontage'].apply(lambda x: x.fillna(x.median()))","7e1c06f8":"combine['MoSold'] = combine[\"MoSold\"].astype(str)\ncombine['YrSold'] = combine['YrSold'].astype(str)\ncombine['MSSubClass'] = combine['MSSubClass'].astype(str)","2ce01407":"numeric_ = combine.select_dtypes(exclude='object').copy()\nnumeric_.columns","7d0b3ece":"disc_num_var = ['OverallQual','OverallCond','BsmtFullBath','BsmtHalfBath','FullBath','HalfBath',\n                'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageCars']\n\ncont_num_var = []\nfor i in numeric_.columns:\n    if i not in disc_num_var:\n        cont_num_var.append(i)","faa4f989":"cat_train = combine.select_dtypes(include='object').copy()\ncat_train.columns","ef0b9241":"fig = plt.figure(figsize=(18,16))\nfor index,col in enumerate(cont_num_var):\n    plt.subplot(6,4,index+1)\n    sns.distplot(numeric_.loc[:,col], kde=False)","416e6a05":"fig = plt.figure(figsize=(14,15))\nfor index,col in enumerate(cont_num_var):\n    plt.subplot(6,4,index+1)\n    sns.boxplot(y=col, data=numeric_)\nfig.tight_layout(pad=1.0)","f673a957":"fig = plt.figure(figsize=(20,15))\nfor index,col in enumerate(disc_num_var):\n    plt.subplot(4,3,index+1)\n    sns.countplot(x=col, data=numeric_)\n#fig.tight_layout(pad=1.0)","201a62ae":"fig = plt.figure(figsize=(20,26))\nfor index in range(len(cat_train.columns)):\n    plt.subplot(10,5,index+1)\n    sns.countplot(x=cat_train.iloc[:,index], data=cat_train)\n    plt.xticks(rotation=90)\nfig.tight_layout(pad=1.0)","92a2c968":"f, ax = plt.subplots(figsize=(14,12))\nplt.title('Correlation of numerical attributes', size=16)\nsns.heatmap(combine.corr())\nplt.show()","6a2606df":"Qual_map = {'NA': 0, 'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5}","8bffaba8":"Quality_columns = ['BsmtQual', 'BsmtCond', 'ExterQual', 'ExterCond', 'HeatingQC', 'KitchenQual',  'FireplaceQu', \n                  'GarageCond', 'GarageQual']\nfor col in Quality_columns:\n    combine[col] = combine[col].map(Qual_map).astype(int)","af4d0823":"bsmt_map = {'NA': 0,'Unf': 1,'LwQ': 2,'Rec': 3,'BLQ': 4,'ALQ': 5,'GLQ': 6}\ncombine['BsmtFinType1'] = combine['BsmtFinType1'].map(bsmt_map).astype('int')\ncombine['BsmtFinType2'] = combine['BsmtFinType2'].map(bsmt_map).astype('int')","1c8ec56f":"combine['TotalPorch'] = (combine['OpenPorchSF'] + combine['3SsnPorch'] + combine['EnclosedPorch'] + \n                        combine['ScreenPorch'] + combine['WoodDeckSF'])\n    \ncombine['TotalSF'] = (combine['1stFlrSF'] + combine['2ndFlrSF'] + combine['BsmtFinSF1'] + combine['BsmtFinSF2'])\n\ncombine['TotalBath'] = (combine['FullBath'] + combine['BsmtFullBath'] + 0.5 * \n                        combine['HalfBath'] + 0.5 * combine['BsmtHalfBath'])\n\n\ncombine['TotalBsmtQual'] = (combine['BsmtQual'] + combine['BsmtCond'] + \n                           combine['BsmtFinType1'] + combine['BsmtFinType2'])\ncombine['TotalExtQual'] = (combine['ExterQual'] + combine['ExterCond'])\ncombine['TotalGargQual'] = (combine['GarageQual'] + combine['GarageCond'])\ncombine['TotalQual'] = (combine['OverallQual'] + combine['TotalBsmtQual'] + \n                       combine['TotalExtQual'] + combine['TotalGargQual']+ combine['KitchenQual'])\n\ncombine['QualGr'] = (combine['TotalQual'] * combine['GrLivArea'])\ncombine['QualBsm'] = combine['TotalBsmtQual'] * (combine['BsmtFinSF1'] +\n                                                  combine['BsmtFinSF2'])\ncombine['QualPorch'] = combine['TotalExtQual'] * combine['TotalPorch']\ncombine['QualExt'] = combine['TotalExtQual'] * combine['MasVnrArea']\ncombine['QualGrg'] = combine['TotalGargQual'] * combine['GarageArea']\ncombine['QlLivArea'] = (combine['GrLivArea'] -\n                         combine['LowQualFinSF']) * (combine['TotalQual'])","13605ae7":"combine['HasPool'] = combine['PoolArea'].apply(lambda x: 1 if x > 0 else 0)\ncombine['Has2ndFloor'] = combine['2ndFlrSF'].apply(lambda x: 1\n                                                     if x > 0 else 0)\ncombine['HasGarage'] = combine['QualGrg'].apply(lambda x: 1 if x > 0 else 0)\ncombine['HasBsmt'] = combine['QualBsm'].apply(lambda x: 1 if x > 0 else 0)\ncombine['HasFireplace'] = combine['Fireplaces'].apply(lambda x: 1\n                                                        if x > 0 else 0)\ncombine['HasPorch'] = combine['QualPorch'].apply(lambda x: 1 if x > 0 else 0)","003982a9":"combine.shape","099ca5e9":"skewed = [\n    'LotFrontage', 'LotArea', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2',\n    'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'GrLivArea',\n    'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch',\n    'ScreenPorch', 'PoolArea', 'LowQualFinSF', 'MiscVal'\n]","b490658a":"skew_columns = np.abs(combine[skewed]).apply(lambda x: x.skew()).sort_values(ascending=False)\nskew_columns","b1ad0353":"highly_skewed = skew_columns[skew_columns > 3]\nskew_index = highly_skewed.index","880c9f96":"for col in skew_index:\n     combine[col] = boxcox1p(combine[col], boxcox_normmax(combine[col] + 1))","e45c1ca2":"to_drop = [\n    'Utilities',\n    'PoolQC',\n    'YrSold',\n    'MoSold',\n    'ExterQual',\n    'BsmtQual',\n    'GarageQual',\n    'KitchenQual',\n    'HeatingQC',\n]\n\ncombine.drop(columns=to_drop, inplace=True)","409bf2a2":"combine = pd.get_dummies(combine)","8d3020b9":"combine.shape","089f293d":"train_outlier = combine.iloc[:len_train[0], :]\ntest = combine.iloc[len_train[0]:, :]","64114be3":"train = pd.concat([train_outlier, y], axis=1)","6a0116a3":"train.shape","8a16424b":"train = train.drop(train[train['LotFrontage'] > 200].index)\ntrain = train.drop(train[train['LotArea'] > 100000].index)\ntrain = train.drop(train[train['BsmtFinSF1'] > 4000].index)\ntrain = train.drop(train[train['TotalBsmtSF'] > 5000].index)\ntrain = train.drop(train[train['GrLivArea'] > 4000].index)","12abd38d":"train.shape","af709376":"correlation = train.corr()\ncorrelation['SalePrice'].sort_values(ascending=False)[:15]","9161b8f7":"X = train.drop('SalePrice', axis=1)\nX_test = test\ny = np.log1p(train['SalePrice'])","0718a2b7":"X.shape, y.shape, X_test.shape","ca2b43ba":"from sklearn.preprocessing import RobustScaler\n\ncols = X.select_dtypes(np.number).columns\ntransformer = RobustScaler().fit(X[cols])\nX[cols] = transformer.transform(X[cols])\nX_test[cols] = transformer.transform(X_test[cols])","51d7d4b2":"from sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=2021)","54480348":"from xgboost import XGBRegressor\nfrom sklearn.model_selection import cross_val_score","9fbda5a8":"xgb = XGBRegressor(booster='gbtree', objective='reg:squarederror')","43c0c13f":"from sklearn.model_selection import RandomizedSearchCV\n\nparam_lst = {\n    'learning_rate' : [0.01, 0.1, 0.15, 0.3, 0.5],\n    'n_estimators' : [100, 500, 1000, 2000, 3000],\n    'max_depth' : [3, 6, 9],\n    'min_child_weight' : [1, 5, 10, 20],\n    'reg_alpha' : [0.001, 0.01, 0.1],\n    'reg_lambda' : [0.001, 0.01, 0.1]\n}\n\nxgb_reg = RandomizedSearchCV(estimator = xgb, param_distributions = param_lst,\n                              n_iter = 100, scoring = 'neg_root_mean_squared_error',\n                              cv = 5)\n       \nxgb_search = xgb_reg.fit(X_train, y_train)\n\n# XGB with tune hyperparameters\nbest_param = xgb_search.best_params_\nxgb = XGBRegressor(**best_param)","922dc4b3":"def mean_cross_val(model, X, y):\n    score = cross_val_score(model, X, y, cv=5)\n    mean = score.mean()\n    return mean\n\nxgb.fit(X_train, y_train)   \npreds = xgb.predict(X_val) \npreds_test_xgb = xgb.predict(X_test)\nscore_xgb = xgb.score(X_val, y_val)\ncv_xgb = mean_cross_val(xgb, X, y)","6f3ab829":"submission = pd.DataFrame({'Id': test.index,\n                           'SalePrice': np.expm1(preds_test_xgb)})\nsubmission.to_csv('submission_xgb.csv', index = False)","65f45c35":"We use dataframe method's to get a sense of the train and test data.","37d6284c":"We achieve accuracy of 14980.82616 on the test dataset, which is not so bad for such a basic implementation.","78f262f0":"# Feature Engineering\n","6e1c4f90":"One hot Encoding for categorical feature's","35e7ab91":"Making some binary feature's to improve our dataset.","593957ee":"We will be converting categorical feature's to numerical ordinal feature's wherever it's applicable.","e453629d":"Scaling our training and test data using RobustScaler.","13d7389d":"In this notebook we are going through the Housing dataset, we will explore the features, use different visualizations to better understand our data, clean the data, perform some feature engineering and finally build a predictive model.\n\nOur aim is to achieve a good prediction of house price's, while following the general steps one would follow in such a project.","af99ebf8":"Skewed: Street, Alley, Utilities, Landslopes, conditionn2, Roofmati, Heating, PoolQC, MiscFeature","42f28419":"Checking for missing values in the dataset, we can see that there are many columns with missing value's.","a791c0e7":"Removing outlier's from our data.","e74b8fd2":"# Data Preprocessing","65e99f18":"References:\n\nangqx95 : https:\/\/www.kaggle.com\/angqx95\/data-science-workflow-top-2-with-tuning\n\ndatafan07 : https:\/\/www.kaggle.com\/datafan07\/top-1-approach-eda-new-models-and-stacking","88039fdc":"Combining the train and test dataset's so we dont have to perform the same tasks twice","5c88fb2f":"\nfeature's containing Outliers: LotFrontage, Lotarea, BsmtFinSf1, TotalbsmtFinSF","06903704":"We can see Highly correlated feature's with target feature are the one's we created in feature engineering.","ae5aacba":"# Univariate and Bi-variate Analysis","1ec0e795":"Further improvement's to the model will be made in the future, i will be trying out differrent technique's like stacking and blending different algorithms.","b791cc7c":"Removing skewness from highly skewed numerical data to help our model in prediction.","d20545c0":"We are now dropping some feature's which hold irrelevant correlation with target variable or are replaced by a similar and better feature.","a072b624":"Actual missing value's are replaced by the mode of that feature.","cfbf04da":"We can see there are a lot of feature's with major row's containing 0 as their value's, some of these features are,\nzero values: BsmtFinSF2, LowQualSinSF, EnclosedPorch, 3SsnPorch, ScreenPorch, PostArea, MiscVal","1e37c1d3":"We estimate the value's of MSZoning and LotFrontage with the help of correlating feature's.","5a6325ed":"combining features to make more meaningful and powerful features like \nTotalSF, TotalPorch, Totalbath, TotalLot and many more.\n","d43322e6":"# Data Exploration","6ec71d63":"Using XGBRegressor as our model, tuning parameters with RandomizedSearchCV.","cb8f9ef1":"Many columns with missing values actually mean that the house doesnt have that feature, according to data description.","82385606":"These numerical value's are actually categorical in disguise and hence should be treated as categorical.","9751547c":"**Steps:**\n* Imports\n* Data Exploration\n* Data Cleaning\n* Feature Engineering\n* Data Preprocessing\n* Model building and tuning\n* Prediction with Final model","b82720d7":"Highly correlated feature's are as follows,\n* GarageArea and GarageCars\n* GarageYrBlt and YearBuilt\n* 1stFlrSF and TotalBsmtSF\n* TotRmsAbvGrd and GrLivArea"}}