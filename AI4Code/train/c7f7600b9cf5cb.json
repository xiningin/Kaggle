{"cell_type":{"0cd2b027":"code","096df798":"code","07b2863e":"code","798df923":"code","16420134":"code","59d25f72":"code","66c4fb34":"code","a0ad51c7":"code","31031940":"code","d89a97ff":"code","8eef7b8b":"code","dbed807c":"code","b0c4f4b8":"code","41f92ca1":"code","362b76b5":"code","4b3ca30d":"markdown","075805bb":"markdown"},"source":{"0cd2b027":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","096df798":"X = np.load(\"\/kaggle\/input\/sign-language-digits-dataset\/Sign-language-digits-dataset\/X.npy\")\nY = np.load(\"\/kaggle\/input\/sign-language-digits-dataset\/Sign-language-digits-dataset\/Y.npy\")\nprint(\"X.shape: \",X.shape)\nprint(\"Y.shape: \",Y.shape)","07b2863e":"X = X.reshape(-1,64,64,1)\n","798df923":"import matplotlib.pyplot as plt\nimg_size = 64\nplt.subplot(1, 2, 1)\nplt.imshow(X[276].reshape(img_size, img_size))\nplt.axis('off')\nplt.subplot(1, 2, 2)\n\nplt.imshow(X[900].reshape(img_size, img_size))\nplt.axis('off')","16420134":"print(\" Max value of X: \",X.max())\nprint(\" Min value of X: \",X.min())\nprint(\" Shape of X: \",X.shape)\n\nprint(\"\\n Max value of Y: \",Y.max())\nprint(\" Min value of Y: \",Y.min())\nprint(\" Shape of Y: \",Y.shape)\n# G\u00f6rd\u00fc\u011f\u00fcm\u00fcz gibi veri zaten one hot coding i\u015fleminden ge\u00e7mi\u015f.","59d25f72":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.20, random_state = 1)\n\nprint('Shape of x_train: ', x_train.shape)\nprint('Shape of y_train: ', y_train.shape)\nprint('....')\nprint('Shape of x_test: ', x_test.shape)\nprint('Shape of y_test: ', y_test.shape)","66c4fb34":"# import libary\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau","a0ad51c7":"#from keras.preprocessing.image import ImageDataGenerator\n\ntrain_gen = ImageDataGenerator(\n            rotation_range = 5,        # 5 degrees of rotation will be applied\n            zoom_range = 0.1,          # 10% of zoom will be applied\n            width_shift_range = 0.1,   # 10% of shifting will be applied\n            height_shift_range = 0.1)  # 10% of shifting will be applied\n\ntrain_gen.fit(x_train)","31031940":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\n\n# Creating model structure\nmodel = Sequential()\n# Adding the first layer of CNN\nmodel.add(Conv2D(filters=20, kernel_size=(4,4), padding='Same', activation='relu', input_shape=(64, 64, 1)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.15))\n# Adding the second layer of CNN\nmodel.add(Conv2D(filters=30, kernel_size=(3,3), padding='Same', activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.15))\n# Flattening the x_train data\nmodel.add(Flatten()) \n# Creating fully connected NN with 4 hidden layers\nmodel.add(Dense(220, activation='relu'))\nmodel.add(Dropout(0.15))\nmodel.add(Dense(150, activation='relu'))\nmodel.add(Dropout(0.15))\nmodel.add(Dense(80, activation='relu'))\nmodel.add(Dropout(0.15))\nmodel.add(Dense(10, activation='softmax'))","d89a97ff":"optimizer = Adam(lr = 0.001, beta_1 = 0.9, beta_2 = 0.99)","8eef7b8b":"model.compile(optimizer = optimizer, loss = 'categorical_crossentropy', metrics=['accuracy'])\n","dbed807c":"batch_size = 100\nepochs = 25","b0c4f4b8":"history = model.fit_generator(train_gen.flow(x_train, y_train, batch_size = batch_size), \n                                                  epochs = epochs, \n                                                  validation_data = (x_test, y_test), \n                                                  steps_per_epoch = x_train.shape[0] \/\/ batch_size)","41f92ca1":"# Visiualize the validation loss and validation accuracy progress:\n\nplt.figure(figsize=(13,5))\nplt.subplot(1,2,1)\nplt.plot(history.history['val_loss'], color = 'r', label = 'validation loss')\nplt.title('Validation Loss Function Progress')\nplt.xlabel('Number Of Epochs')\nplt.ylabel('Loss Function Value')\n\nplt.subplot(1,2,2)\nplt.plot(history.history['val_accuracy'], color = 'g', label = 'validation accuracy')\nplt.title('Validation Accuracy Progress')\nplt.xlabel('Number Of Epochs')\nplt.ylabel('Accuracy Value')\nplt.show()","362b76b5":"# Confusion Matrix\n\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\n\n# First of all predict labels from x_test data set and trained model\ny_pred = model.predict(x_test)\n\n# Convert prediction classes to one hot vectors\ny_pred_classes = np.argmax(y_pred, axis = 1)\n\n# Convert validation observations to one hot vectors\ny_true_classes = np.argmax(y_test, axis = 1)\n\n# Create the confusion matrix\nconfmx = confusion_matrix(y_true_classes, y_pred_classes)\nf, ax = plt.subplots(figsize = (8,8))\nsns.heatmap(confmx, annot=True, fmt='.1f', ax = ax)\nplt.xlabel('Predicted Labels')\nplt.ylabel('True Labels')\nplt.title('Confusion Matrix')\nplt.show();","4b3ca30d":"## Create CNN Model","075805bb":"## Prepering Data\n### -Load\n### -Normalize\n### -reshape\n### -label encoding"}}