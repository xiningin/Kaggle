{"cell_type":{"d75881e8":"code","e54160e3":"code","e3048020":"code","9b3c9062":"code","de78b87f":"code","0f6b8120":"code","a0a347ac":"code","af8c4f02":"code","4938e1b8":"code","38c42e54":"code","c928c280":"code","cc861128":"code","d466541c":"code","c6b48f72":"code","dc8a8f2f":"code","16d24442":"code","7b9db5d6":"code","3b207cf5":"code","7dbacdfb":"code","2ce3c05b":"code","9a58193b":"markdown","1a1486d1":"markdown"},"source":{"d75881e8":"#!\/usr\/bin\/env python3 ","e54160e3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n# Importing the necessary Packages\nimport os \nimport numpy as np \nimport pandas as pd \nimport tensorflow as tf \nimport matplotlib.pyplot as plt \nimport seaborn as sns \n\n# loading the dataset into memory \nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        dataset = os.path.join(dirname, filename)\n        \n# loading the dataset from the input directory into memroy \ndf = pd.read_csv(dataset)\ndf.fillna(df.mean(), inplace=True)\n\n# Removing columns with NaN values \ndf = df.drop(['HTHG', 'HTAG', 'HTR'], axis=1)\n\n# viewing the head of the datast \ndf.head() ","e3048020":"# Plotting a graph of the total counts for the potential winnings \ndegree_count = df['FTR'].value_counts() \ndegree_count.plot(kind='bar')\nplt.xlabel('Winnings')\nplt.ylabel('Counts')\nplt.show() ","9b3c9062":"# showing the count of the lowest value which would be used for the \n# undersampling process. \ndf.loc[df['FTR'] == 'D']['FTR'].count() ","de78b87f":"# Balancing the dataset by using undersampling techniques \nshuffled_df = df.sample(frac=2, random_state=4, replace=True)\n\n# getting the value count for the matches that ended in a Draw \ndraw = shuffled_df.loc[shuffled_df['FTR'] == 'D'].sample(n=1964, random_state=42)\n\n# getting only 1964 value count for the awayteam winnings\nawayteam = shuffled_df.loc[shuffled_df['FTR'] == 'A'].sample(n=1964, random_state=42)\n\n# sampling the Home winnings to 1964 rows \nhometeam = shuffled_df.loc[shuffled_df['FTR'] == 'H'].sample(n=1964, random_state=42)\n\n# normalizing the sampled values into a single column \ndf = pd.concat([draw, awayteam, hometeam])\n\n# getting another dataframe for plotting \nraw_df = df","0f6b8120":"# Plotting a graph of the total counts for the potential winnings \ndegree_count = df['FTR'].value_counts() \ndegree_count.plot(kind='bar')\nplt.xlabel('Winnings')\nplt.ylabel('Counts')\nplt.show() ","a0a347ac":"# converting the data and season into a date time format and \n# changing the datetime for the actual data in the matched played. \ntime = pd.to_datetime(df['Date'], dayfirst=True, errors='coerce')\n# creating the columns for year, month, and day \ndf['year'] = time.dt.year \ndf['month'] = time.dt.month \ndf['day'] = time.dt.day \n\n# Dropping the data column \ndf = df.drop(['Date'], axis=1)\ndf = df[[\n    'year', 'month', 'day', 'HomeTeam', 'AwayTeam', \n    'FTHG', 'FTAG', 'FTR'\n]]\n# viewing the dataframe \ndf.head()","af8c4f02":"# showing the unique values for all the clubs in total \ndf['HomeTeam'].unique() ","4938e1b8":"# Creating a dictionary to store the numerical values for the respective clubs \nC = {\n    \"Bayern Munich\": 1, \"Dortmund\": 2, \"Duisburg\": 3, \"FC Koln\": 4, \n    \"Hamburg\": 5, \"Leipzig\": 6, \"M'Gladbach\": 7, \"Wattenscheid\": 8, \"Werder Bremen\": 9, \n    \"Dresden\": 10, \"Ein Frankfurt\": 11, \"Freiburg\": 12, \"Kaiserslautern\": 13, \n    \"Karlsruhe\": 14, \"Leverkusen\": 15, \"Nurnberg\": 16, \"Schalke 04\": 17, \n    \"Stuttgart\": 18, \"Uerdingen\": 19, \"Bochum\": 20, \"Munich 1860\": 21, \n    \"M'gladbach\": 22, \"Hansa Rostock\": 23, \"St Pauli\": 24, \"Dusseldorf\": 25, \n    \"Bielefeld\": 26, \"Hertha\": 27, \"Wolfsburg\": 28, \"Ulm\": 29, \n    \"Unterhaching\": 30, \"Cottbus\": 31, \"Hannover\": 32, \"Mainz\": 33, \n    \"Aachen\": 34, \"Hoffenheim\": 35, \"Augsburg\": 36, \"Greuther Furth\": 37, \n    \"Fortuna Dusseldorf\": 38, \"Braunschweig\": 39, \"Paderborn\": 40, \"Darmstadt\": 41   \n}\n\n# mapping the values of the respective dictionary and its corresponding values \n# to the created cleaned dataframe \ndf['HomeTeam'] = df['HomeTeam'].map(C)\ndf['AwayTeam'] = df['AwayTeam'].map(C)\n\n# Creating a dictionary to convert the values in the FTR column into numerical values \nFT = {}\nFT['H'] = 1  # Home team won for values on one \nFT['A'] = 2  # Away team won for values of two \nFT['D'] = 3  # the match ended a Draw for values of three. \n\n# Mapping the values to the FTR column \ndf['FTR'] = df['FTR'].map(FT)\n\n# viewing the dataset \ndf.head() ","38c42e54":"# Getting the numbers of winnings for the HOME TEAM \nhometeam_count = raw_df[raw_df['FTR'] == 'H'].count() \nprint(hometeam_count['FTR'], 'winnings for the HOME TEAM')\n\n\n# Getting the number of winnings for the AWAY TEAM \nawayteam_count = raw_df[raw_df['FTR'] == 'A'].count() \nprint(awayteam_count['FTR'], 'winnings for the AWAY TEAM')\n\n\n# f, axis = plt.subplots(1, 3)\n# Plotting a count plot of graph of winnings for the HOME TEAM only\n# Against the month inwhich they won the most.\nhometeam_count = raw_df[raw_df['FTR'] == 'H']\nsns.countplot(x='month', hue='FTR', data=hometeam_count)\nplt.grid(True)\nplt.ylabel('Count for Home team Winnings')\nplt.show()","c928c280":"# Plotting a count plot of winnings for the home team only against \n# the month in which they won the most \n# here the month being the 4th month \nmonth_4th_count = hometeam_count[hometeam_count['month'] == 4]\nax = sns.countplot(x='day', hue='FTR', data=month_4th_count)\nplt.grid(True)\nplt.ylabel('Count for Home Team winnings')\nplt.show() \n\nprint('Recall that 1 stands for Home Team')","cc861128":"# From the plot below, it show that Dortmund win more home games in April\nmonth_4th_win = month_4th_count['HomeTeam'].value_counts() \nmonth_4th_win.plot(kind='bar')\nplt.xlabel('Winnings')\nplt.ylabel('Counts')\nplt.show() ","d466541c":"# Sample figsize in inches\nfig, ax = plt.subplots(figsize=(20,10))         \n# Imbalanced DataFrame Correlation\ncorr = df.corr()\nsns.heatmap(corr, cmap='YlGnBu', annot_kws={'size':30}, ax=ax)\nax.set_title(\"balanced Correlation Matrix\", fontsize=14)\nplt.show()","c6b48f72":"# Building a machine learning model to fit the dataset \n# Importing the necessary packages for building the NN model \nfrom keras.models import Sequential \nfrom keras.layers import Dense \nfrom keras.optimizers import SGD \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LogisticRegression \nfrom sklearn.ensemble import RandomForestRegressor \nfrom sklearn.ensemble import RandomForestClassifier \nfrom sklearn.metrics import accuracy_score \nfrom sklearn.svm import SVC ","dc8a8f2f":"# saving the dataset into input(x) features and output(y) label \n# and converting into numpy arrays \nX = df.iloc[:, 0:5]\ny = df.iloc[:, 7].values\n\n# Splitting the dataset into train test split \nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                   test_size = 0.2, \n                                                   random_state = 20)\n\n# Balancing the X_input features \nX_train.fillna(X_train.mean(), inplace=True)\nX_test.fillna(X_test.mean(), inplace=True)","16d24442":"# Displaying the shape of the training dataset \nprint('XTrain Shape: {}'.format(X_train.shape))\nprint('yTrain Shape: {}'.format(y_train.shape))","7b9db5d6":"# Displaying the shape of the testing shape dataset \nprint('Xtest Shape: {}'.format(X_test.shape))\nprint('ytest Shape: {}'.format(y_test.shape))","3b207cf5":"# Building The Model using Linear Regression \nmodel = SVC() \nmodel.fit(X_train, y_train)","7dbacdfb":"# Finding how accurate the model would perform on input data. \ny_pred = model.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))","2ce3c05b":"# To predict, the inputs must be given \n# [year, month, day, HomeTeam, AwayTeam]\nnew_value = [\n    \"1995\", '3', '4', '22.0', '1.0'\n]\n\n# reshaping the new input data so that the model could predict it \nnew_value = np.array(new_value).reshape(1, -1)\n\n# predicting the value for full time results \nmodel.predict(new_value)","9a58193b":"## Actual Prediction on matches\nSo here we decided to make a prediction to actually see how good our model would perfom on new input data","1a1486d1":"**Showing a count plot of the home team winnings in the month of April (4th month)****\n* And the Analysis shows that Dortmund wins most of their Home matches in April \n"}}