{"cell_type":{"267775c2":"code","99e00401":"code","deb52af4":"code","87cbc2bb":"code","c5178c7c":"code","e3e0a6fe":"code","7edc1ee8":"code","2bfdc8d7":"code","103210ad":"code","33648fbe":"code","d7ca1baa":"code","55b72a15":"code","c399178f":"code","9010628d":"code","09fc2d91":"code","1ca2ae2c":"code","039b3a6e":"code","4ba0327a":"code","80c7a3b2":"code","23cb7548":"code","0a613649":"code","742d6fc6":"code","2fc0b4b9":"code","c1ed529f":"code","778daee5":"code","e5ea2624":"markdown","40ce3282":"markdown","91263123":"markdown","a33591e2":"markdown","fb320e4c":"markdown","8363a975":"markdown","6ed80ff3":"markdown","5c98fce0":"markdown","dca9866e":"markdown","173fc800":"markdown","5d5319b3":"markdown"},"source":{"267775c2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn import feature_extraction, linear_model, model_selection, preprocessing\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","99e00401":"train_df = pd.read_csv(\"..\/input\/nlp-getting-started\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/nlp-getting-started\/test.csv\") ","deb52af4":"train_df.head()","87cbc2bb":"test_df.head()","c5178c7c":"!pip install tweet-preprocessor","e3e0a6fe":"train_df.count()","7edc1ee8":"train_df = train_df.dropna()\ntrain_df = train_df.drop_duplicates()","2bfdc8d7":"train_df.count()","103210ad":"train_df.head()","33648fbe":"import preprocessor as p\n\ndef preprocess_tweet(row):\n    text = row['text']\n    text = p.clean(text)\n    return text","d7ca1baa":"train_df['text'] = train_df.apply(preprocess_tweet, axis=1)","55b72a15":"train_df.head()","c399178f":"from gensim.parsing.preprocessing import remove_stopwords\n\ndef stopword_removal(row):\n    text = row['text']\n    text = remove_stopwords(text)\n    return text","9010628d":"train_df['text'] = train_df.apply(stopword_removal, axis = 1)","09fc2d91":"train_df.head()","1ca2ae2c":"train_df['text'] = train_df['text'].str.lower().str.replace('[^\\w\\s]',' ').str.replace('\\s\\s+', ' ')","039b3a6e":"train_df.head()","4ba0327a":"from sklearn.feature_extraction.text import TfidfVectorizer\n\ntweets = train_df['text']\nvectorizer = TfidfVectorizer(stop_words='english')\n\n# Learn vocabulary from sentences. \nvectorizer.fit(tweets)\n\n# Get vocabularies.\nvectorizer.vocabulary_","80c7a3b2":"import nltk\nfrom nltk.corpus import stopwords\nfrom sklearn.feature_extraction.text import CountVectorizer\n\nstopwords = stopwords.words('english')\n\nprint(stopwords)\n\ncount_vector = CountVectorizer(token_pattern = r'\\w{1,}', ngram_range = (1, 2), stop_words = stopwords)","23cb7548":"from sklearn.model_selection import train_test_split\nX = train_df.text\ny = train_df.target\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1)","0a613649":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import Pipeline\n\nclf = LogisticRegression()\npipe = Pipeline([\n    ('count_vector', CountVectorizer()),\n    ('clf', LogisticRegression())\n])\npipe.fit(X_train, y_train)","742d6fc6":"from sklearn import metrics\npredicted = pipe.predict(X_test)","2fc0b4b9":"print(\"accuracy :\", metrics.accuracy_score(predicted, y_test))","c1ed529f":"submission = pd.read_csv('\/kaggle\/input\/nlp-getting-started\/sample_submission.csv')\nsubmission['target'] = pipe.predict(test_df.text)\nsubmission.to_csv(\"submission.csv\", index = False)","778daee5":"submission.head(10)","e5ea2624":"## Final Result","40ce3282":"### Tweet has been cleaned to normal text.","91263123":"# Reading Datasets","a33591e2":"# Normal Preprocessing\n\n### Now We can apply bormal text preprocessing like\n* Lowercasing\n* Punctuation Removal\n* Replace Extra white Spaces\n* Stopwords removal","fb320e4c":"### Now input tweet has been pre-processed and lets find features.","8363a975":"Since we are dealing with tweets in this competation, we need to do specific tweet text cleaning along with normal text pre-processing. A tweet may contains\n* URL's\n* Mentions\n* Hashtags\n* Emojis\n* Specific words etc.\n\nTo clean the tweet, we can use a python library tweet-preprocessor instead of writing the cleaning logic ourself.","6ed80ff3":"## Remove Extra white spaces, punctuation and apply lower casing","5c98fce0":"# Applying Tweet Processing\n\nApply tweet preprocessing first. Define a process function and use pandas to apply it on each value of 'text'","dca9866e":"# Droppping duplicates and NaN from the DataFrame.","173fc800":"# Tweet Preprocessing","5d5319b3":"# Storing Result"}}