{"cell_type":{"26b811c6":"code","d47555db":"code","260d10eb":"code","b869ed41":"code","b11ca894":"code","b57b7c16":"code","aae67089":"code","607ec336":"code","7a76896a":"code","18c59564":"code","2da14ae2":"code","483e1fca":"code","c119d675":"code","2c4f4594":"code","609f561e":"code","12fa9563":"code","7da87ad5":"code","eb3fc819":"code","e9240d13":"markdown","5d8befa5":"markdown","23277227":"markdown","83a74895":"markdown","88b363d3":"markdown"},"source":{"26b811c6":"import numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score\nfrom sklearn import preprocessing\nimport random\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d47555db":"data = pd.read_csv('..\/input\/fish-market\/Fish.csv')\ndf = data.copy()\n\nrand1 = [random.uniform(10,100) for num in range(len(df))]  # randomly generated between 10 and 100\nrand2 = [random.randint(1,6) for num in range(len(df))] # randomly generated between 1 and 6\n\ndf['Rand1'] = rand1\ndf['Rand2'] = rand2\ndf.sample(5)","260d10eb":"###Preprocessing\nle = preprocessing.LabelEncoder()\nle.fit(df['Species'])\n\ndf['Species'] = le.transform(df['Species'])\ndf.sample(5)","b869ed41":"###MODEL 1\n\ny = df['Weight'] # dependant variable\nX = df.drop('Weight', axis=1) # multiple independant variables\n\nop_y = y.copy() # copy of the variables for other tasks\nop_X = X.copy() # copy of the variables for other tasks\n\nreg = LinearRegression()\nreg.fit(X,y)\n\n\nprint('Intercept: ', reg.intercept_)\nprint('Coefficients: ', reg.coef_)","b11ca894":"y_head = reg.predict(X) # test model with training data\nr2_score(y, y_head) # score the results","b57b7c16":"###MODEL 2\n\nX.drop('Rand1', inplace=True, axis=1)\n\nreg = LinearRegression()\nreg.fit(X,y)\n\nprint('Intercept: ', reg.intercept_)\nprint('Coefficients: ', reg.coef_)","aae67089":"y_head = reg.predict(X)\nr2_score(y, y_head)","607ec336":"###MODEL 3\n\nX.drop('Rand2', inplace=True, axis=1)\n\nreg = LinearRegression()\nreg.fit(X,y)\n\nprint('Intercept: ', reg.intercept_)\nprint('Coefficients: ', reg.coef_)","7a76896a":"y_head = reg.predict(X)\nr2_score(y, y_head)","18c59564":"###MODEL 4\n\nX = X[:2]\ny = y[:2]\n\nreg = LinearRegression()\nreg.fit(X,y)","2da14ae2":"y_head = reg.predict(X)\nr2_score(y, y_head)","483e1fca":"###OPTIMIZATION TASK","c119d675":"from scipy.optimize import minimize\nimport matplotlib.pyplot as plt","2c4f4594":"def calc_y(x):\n    b0, b1, b2, b3, b4, b5, b6, b7, b8 = x\n    y = op_X.iloc[:,0]*b1 +\\\n        op_X.iloc[:,1]*b2 +\\\n        op_X.iloc[:,2]*b3 +\\\n        op_X.iloc[:,3]*b4 +\\\n        op_X.iloc[:,4]*b5 +\\\n        op_X.iloc[:,5]*b6 +\\\n        op_X.iloc[:,6]*b7 +\\\n        op_X.iloc[:,7]*b8 +\\\n        b0\n    return y\n\ndef objective(x):\n    return np.sum((calc_y(x) - op_y)**2)\n                \nx0 = np.zeros(9)     \n\nsol = minimize(objective, x0, method='SLSQP', options={'disp':True})\n\nx_sol = sol.x\ny_sol = calc_y(x_sol)\n\nprint(x_sol)\nprint('Score is ',r2_score(op_y, y_sol))\n\nplt.figure(1)\nplt.plot(op_X,op_y,'ro')\nplt.plot(op_X,y_sol,'bx');\nplt.xlabel('x')\nplt.ylabel('y')\nplt.legend(['Measured','Predicted'],loc='best')\nplt.show()","609f561e":"def constraints(x):\n    return 1000 - np.sum(np.absolute(x))\n\ncons = {'type':'ineq', 'fun': constraints}\n\nsol_reg = minimize(objective, x0, method='SLSQP', constraints=cons, options={'disp':True})\n\nx_sol_reg = sol_reg.x\ny_sol_reg = calc_y(x_sol_reg)\n\nprint(x_sol_reg)\nprint('Score is ',r2_score(op_y, y_sol_reg))\n\nplt.figure(1)\nplt.plot(op_X,op_y,'ro')\nplt.plot(op_X,y_sol_reg,'bx');\nplt.xlabel('x')\nplt.ylabel('y')\nplt.legend(['Measured','Predicted'],loc='best')\nplt.show()","12fa9563":"def constraints(x):\n    return 100 - np.sum(np.absolute(x))\n\ncons = {'type':'ineq', 'fun': constraints}\n\nsol_reg = minimize(objective, x0, method='SLSQP', constraints=cons, options={'disp':True})\n\nx_sol_reg = sol_reg.x\ny_sol_reg = calc_y(x_sol_reg)\n\nprint(x_sol_reg)\nprint('Score is ',r2_score(op_y, y_sol_reg))\n\nplt.figure(1)\nplt.plot(op_X,op_y,'ro')\nplt.plot(op_X,y_sol_reg,'bx');\nplt.xlabel('x')\nplt.ylabel('y')\nplt.legend(['Measured','Predicted'],loc='best')\nplt.show()","7da87ad5":"def constraints(x):\n    return 100 - 0.0001 * (np.sum(np.absolute(x)))\n\ncons = {'type':'ineq', 'fun': constraints}\n\nsol_reg = minimize(objective, x0, method='SLSQP', constraints=cons, options={'disp':True})\n\nx_sol_reg = sol_reg.x\ny_sol_reg = calc_y(x_sol_reg)\n\nprint(x_sol_reg)\nprint('Score is ',r2_score(op_y, y_sol_reg))\n\nplt.figure(1)\nplt.plot(op_X,op_y,'ro')\nplt.plot(op_X,y_sol_reg,'bx');\nplt.xlabel('x')\nplt.ylabel('y')\nplt.legend(['Measured','Predicted'],loc='best')\nplt.show()","eb3fc819":"def constraints(x):\n    return 100 - 2 * (np.sum(np.absolute(x)))\n\ncons = {'type':'ineq', 'fun': constraints}\n\nsol_reg = minimize(objective, x0, method='SLSQP', constraints=cons, options={'disp':True})\n\nx_sol_reg = sol_reg.x\ny_sol_reg = calc_y(x_sol_reg)\n\nprint(x_sol_reg)\nprint('Score is ',r2_score(op_y, y_sol_reg))\n\nplt.figure(1)\nplt.plot(op_X,op_y,'ro')\nplt.plot(op_X,y_sol_reg,'bx');\nplt.xlabel('x')\nplt.ylabel('y')\nplt.legend(['Measured','Predicted'],loc='best')\nplt.show()","e9240d13":"Model 1","5d8befa5":"Model 3","23277227":"Model 4","83a74895":"Model 2","88b363d3":"###REGULARIZATION TASK"}}