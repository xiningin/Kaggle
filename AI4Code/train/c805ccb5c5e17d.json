{"cell_type":{"6db27759":"code","1366ebd4":"code","5c937b78":"code","c7f8d331":"code","bff69560":"code","31670dba":"code","bfedf1b0":"code","a09ae8e2":"code","5df7c1da":"code","2dae2064":"code","1b3dd09b":"code","a283e0c6":"code","4b07c5ae":"markdown","075f0cfb":"markdown","69e44b34":"markdown","c90edd6c":"markdown","7f3e8242":"markdown","c72d08b1":"markdown","1cdc3668":"markdown","bb3dab7b":"markdown","3ca5bac2":"markdown"},"source":{"6db27759":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1366ebd4":"\ndf = pd.read_csv('..\/input\/persona-data\/persona.csv')\ndf.head()","5c937b78":"def check_df(dataframe, head=5):\n    print(\"##################### Shape #####################\")\n    print(dataframe.shape)\n    print(\"##################### Types #####################\")\n    print(dataframe.dtypes)\n    print(\"##################### Head #####################\")\n    print(dataframe.head(head))\n    print(\"##################### Tail #####################\")\n    print(dataframe.tail(head))\n    print(\"##################### NA #####################\")\n    print(dataframe.isnull().sum())\n    print(\"##################### Quantiles #####################\")\n    print(dataframe.quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T)\n\n\ncheck_df(df)","c7f8d331":"df[\"PRICE\"].unique()","bff69560":"df[\"AGE\"].unique()","31670dba":"df[\"COUNTRY\"].unique()","bfedf1b0":"df[\"SOURCE\"].unique()","a09ae8e2":"def define_persona(dataframe):\n    agg_df = dataframe.groupby(by=[\"COUNTRY\", 'SOURCE', \"SEX\", \"AGE\"]).agg({\"PRICE\": \"mean\"}).sort_values(\"PRICE\",\n                                                                                                          ascending=False)\n    agg_df.reset_index(inplace=True)\n\n    bins = [agg_df[\"AGE\"].min(), 18, 23, 30, 40, agg_df[\"AGE\"].max()]\n    labels = [str(agg_df[\"AGE\"].min()) + '_18', '19_23', '24_30', '31_40', '41_' + str(agg_df[\"AGE\"].max())]\n    agg_df[\"AGE_CAT\"] = pd.cut(agg_df[\"AGE\"], bins, labels=labels).astype(\"object\")\n    \n    agg_df[\"CUSTOMERS_LEVEL_BASED\"] = [row[0].upper() + \"_\" + row[1].upper() + \"_\" + row[2].upper() + \"_\" + str(row[5]) for row in agg_df.values]\n\n    # Calculating average amount of personas:\n    df_persona = agg_df.groupby(\"CUSTOMERS_LEVEL_BASED\").agg({\"PRICE\": \"mean\"})\n    df_persona = df_persona.reset_index()\n\n    return df_persona\n","5df7c1da":"define_persona(df).head()\n# That's good :)","2dae2064":"def create_segments(dataframe):\n    df_persona = define_persona(dataframe)\n    df_persona[\"SEGMENT\"] = pd.qcut(df_persona[\"PRICE\"], 4, labels=[\"D\", \"C\", \"B\", \"A\"])\n\n    return df_persona\n\n\ncreate_segments(df).head()","1b3dd09b":"def AGE_CAT(age):\n    \"\"\"\n        With this function we find that the user is at CUSTOMERS_LEVEL_BASED\n\n        Let's remember we created a variable called AGE_CAT. We will find the range of the entered age and return that value.\n        \n        Parameter:\n            age: str\n            Customer age\n            \n        Return:\n            customer's CUSTOMERS_LEVEL_BASED\n    \"\"\"\n    if age <= 18:\n        AGE_CAT = \"0_18\"\n        return AGE_CAT\n    elif (age > 18 and age <= 23):\n        AGE_CAT = \"19_23\"\n        return AGE_CAT\n    elif (age > 23 and age <= 30):\n        AGE_CAT = \"24_30\"\n        return AGE_CAT\n    elif (age > 30 and age <= 40):\n        AGE_CAT = \"31_40\"\n        return AGE_CAT\n    elif (age > 40 and age <= agg_df[\"AGE\"].max()):\n        AGE_CAT = '41_' + str(agg_df[\"AGE\"].max())\n        return AGE_CAT","a283e0c6":"def new_users(dataframe, userInput=False):\n    df_segment = create_segments(dataframe)\n    if userInput:\n        COUNTRY = input(\"Enter a country name (USA\/EUR\/BRA\/DEU\/TUR\/FRA):\")\n        SOURCE = input(\"Enter the operating system of phone (IOS\/ANDROID):\")\n        SEX = input(\"Enter the gender (FEMALE\/MALE):\")\n        AGE = int(input(\"Enter the age:\"))\n    else:\n        COUNTRY = 'USA'\n        SOURCE = 'IOS'\n        SEX = 'MALE'\n        AGE = 28\n    AGE_SEG = AGE_CAT(AGE)\n    new_user = COUNTRY.upper() + '_' + SOURCE.upper() + '_' + SEX.upper() + '_' + AGE_SEG\n\n    print(new_user)\n    print(\"Segment:\" + str(df_segment[df_segment[\"CUSTOMERS_LEVEL_BASED\"] == new_user].loc[:, \"SEGMENT\"].values[0]))\n    print(\"Price:\" + str(df_segment[df_segment[\"CUSTOMERS_LEVEL_BASED\"] == new_user].loc[:, \"PRICE\"].values[0]))\n\n    return new_user\n\n\nnew_users(df)\n","4b07c5ae":"* When we look at the data set, we can see that the observations are multiplexed.\n* ","075f0cfb":"## A New Customer Has Arrived Let's See How Much It Will Earn For Us?","69e44b34":"## Defining Segments","c90edd6c":"* We have seen that the numeric variables in the dataset are not categorical\n* So there is no cardinal data\n\n* Then first of all, let's create CUSTOMERS LEVEL BASED","7f3e8242":"## Eda Analysis","c72d08b1":"COUNTRY: USA\nSOURCE: IOS\nSEX: MALE\nAGE: 28\n\n**You can observe the results by entering their values or by entering different values. According to the values above, we saw that the customer is in the B segment and earns us an average income of 34.8381.\n\nThat's it, we are now able to establish our segment-based strategy.\n\nSee you in other data sets.\n \n#### Let data be your friend :)","1cdc3668":"## First Look\n* Our dataset consists of 5000 observations and 5 variables.\n* We observed that there are no empty observations and there are 2 numerical variables.\n* By looking at the numerical variables Age and price on a quarterly basis, we saw that there were no outliers.","bb3dab7b":"#  **Rule-Based Classification**\n\n## Business Problem\n-------\nA game company using some features of its customers new level-based customer definitions (persona) and add these new customer definitions.\nCreate segments according to these segments and create new How much is the average number of customers coming to the company?\n**He wants to guess what he can earn.**\n\n**E.g:**\nA 25-year-old male from Turkey who is an IOS user how much the user can earn on average is to be determined.\n\n## Dataset Story\n-----------\n\nPersona.csv dataset shows the prices of products sold by an international game company. Some demographic information of users purchasing these products contains.\n\n**** The data set consists of records created in each sales transaction.**\n\n**This means that a user with certain demographics has more than one may have shopped.**\n\n\n## Variables\n---\n###### PRICE \u2013 Customer's spending amount\n###### SOURCE \u2013 The type of device the customer is connecting to\n###### SEX \u2013 Gender of the client\n###### COUNTRY \u2013 Country of the customer\n###### AGE \u2013 Customer's age\n\n## LEVEL BASED PERSONA IDENTIFICATION, SIMPLE SEGMENTATION and RULE-BASED CLASSIFICATION\n-----\n\n#### Project Purpose:\n - Thinking about the concept of persona.\n - LEVEL BASED PERSONA DEFINITION: To be able to define new customers according to category levels (Level).\n - SIMPLE SEGMENTATION: Simply segment new customer definitions using the qcut function.\n - RULE-BASED CLASSIFICATION: When a new customer arrives, to classify this customer by segments.\n","3ca5bac2":"################# Previous #####################\n\n######    PRICE   SOURCE   SEX COUNTRY  AGE\n###### 0     39  android  male     bra   17\n###### 1     39  android  male     bra   17\n###### 2     49  android  male     bra   17\n###### 3     29  android  male     tur   17\n###### 4     49  android  male     tur   17\n\n################# Later #####################\n\n######       customers_level_based        PRICE SEGMENT\n###### 0   BRA_ANDROID_FEMALE_0_18  1139.800000       A\n###### 1  BRA_ANDROID_FEMALE_19_23  1070.600000       A\n###### 2  BRA_ANDROID_FEMALE_24_30   508.142857       A\n###### 3  BRA_ANDROID_FEMALE_31_40   233.166667       C\n###### 4  BRA_ANDROID_FEMALE_41_66   236.666667       C"}}