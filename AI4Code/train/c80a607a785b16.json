{"cell_type":{"ccf509a3":"code","bb834f4e":"code","060a59a2":"code","69e3d197":"code","b4b31b28":"code","add348a7":"code","d7ffc5cb":"code","928bf1fd":"code","1ef2eac4":"code","76a78aca":"code","7875fac7":"code","e648131d":"code","42a579b2":"code","cf88da82":"code","bd1f8faf":"code","bcb23499":"code","8ced4dee":"code","c3702d8d":"code","8c51d6b0":"code","d4c43deb":"code","4e2cb23f":"code","3ff614d2":"code","ce5fe192":"code","c4203871":"code","97741a6a":"code","faa0c868":"code","540acdde":"code","5dde01d5":"code","8327daea":"code","c2b194e1":"code","fca24a30":"code","56410cc4":"code","4134782d":"code","291eafc1":"code","dd83d666":"code","f10399b7":"code","be866a92":"code","86875a38":"code","9c687391":"code","e046476a":"code","9fcb3d63":"code","5e1ee42a":"code","c9c79144":"code","dd5dcec9":"code","f3723770":"code","4a06d45b":"code","e2eaedad":"code","d824d867":"code","8f2e0007":"code","462dc031":"code","1fd32cd4":"code","0bec58ea":"code","693dda33":"code","f84b2448":"code","dbc14a6d":"code","67bf145e":"code","584e223e":"code","3f8ead0d":"code","b0a1f131":"code","ac06637c":"code","da6e0e06":"markdown","b1a82a6a":"markdown","15ef4056":"markdown","4390027a":"markdown","c36ba682":"markdown","b5915dc8":"markdown","4d47fb7b":"markdown","68a9d06f":"markdown","8a0a1acc":"markdown","58479094":"markdown","96243b12":"markdown","97180e2d":"markdown","29ce6a69":"markdown","7fcd8e48":"markdown","38a402d0":"markdown","9feb2775":"markdown","25a3895f":"markdown","ae2871d3":"markdown","f0281a22":"markdown","566a7840":"markdown","66ce0bbb":"markdown","26dafb2c":"markdown"},"source":{"ccf509a3":"import pandas as pd\nimport numpy as np\nimport os\nimport re\nimport sklearn\nimport scipy.stats as stats\nimport missingno\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\nfrom matplotlib import gridspec as gspec\nimport seaborn as sns\n\n%matplotlib notebook\n%matplotlib inline","bb834f4e":"os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom keras import layers","060a59a2":"train_data = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('..\/input\/titanic\/test.csv')","69e3d197":"print(train_data.shape)\ntrain_data.head(5)","b4b31b28":"survived = train_data['Survived']","add348a7":"male_count = len(train_data[train_data['Sex'] == 'male'])\nfemale_count = len(train_data[train_data['Sex'] == 'female'])\n\nmale_srvd = len(train_data[(train_data['Sex'] == 'male') & (train_data['Survived'] == 1)])\nmale_dsrvd = male_count - male_srvd\n\nfemale_srvd = len(train_data[(train_data['Sex'] == 'female') & (train_data['Survived'] == 1)])\nfemale_dsrvd = female_count - female_srvd","d7ffc5cb":"fig = plt.figure(constrained_layout = True, figsize = (12, 6), dpi = 200)\ngrid = gspec.GridSpec(ncols = 4, nrows = 4, figure = fig)\n\nax1 = fig.add_subplot(grid[:, :2])\nax1.bar([3,5.25], height = [male_srvd, female_srvd], width = 1,  color = '#3b98ce')\nax1.bar([4,6.25], height = [male_dsrvd, female_dsrvd], width = 1, color = '#ed5447')\nax1.set_title(\"Gender vs Survival\")\n\nax1.set_xticks([3,4,5.25,6.25])\nax1.set_xticklabels(['Male\\nSurvived', 'Male\\nNot Survived', 'Female\\nSurvived', 'Female\\nNot Survived'])\n\nax1_xticks = ax1.get_xticks()\ny_labels = [male_srvd, male_dsrvd, female_srvd, female_dsrvd]\n\nfor ind, val in enumerate(y_labels):\n    plt.text(ax1_xticks[ind] - 0.1, val+2, val, color = \"#000\", size = 10)\n\nax2 = fig.add_subplot(grid[:2, 2:])\nax2.pie([male_srvd, male_dsrvd], explode = [0.02]*2, radius = 1.2, colors = ['#3b98ce', '#ed5447'], \n        autopct=\"%.1f%%\", pctdistance=0.5)\nax2.set_title('PERCENTAGE MALE', size = 11)\nax2.legend(labels = ['Survived', 'Did not Survive'], loc = (1,0.8))\n\nax3 = fig.add_subplot(grid[2:, 2:])\nax3.pie([female_srvd, female_dsrvd], explode = [0.02]*2, radius = 1.2, colors = ['#3b98ce', '#ed5447'],\n       autopct=\"%.1f%%\", pctdistance=0.4)\nax3.set_title('PERCENTAGE FEMALE', size = 10)","928bf1fd":"plt.figure(figsize = (12, 6), dpi = 200)\nsns.distplot(train_data['Age'], bins = 25, color = '#000b54')\nax = plt.gca()\n\nfor loc in ['top', 'bottom', 'left', 'right']: \n    ax.spines[loc].set_visible(False)\n\nax.xaxis.set_ticks_position('none') \nax.yaxis.set_ticks_position('none')\n\nax.grid(color = '#160054', linestyle = '--', alpha = 0.5)\n    \nax.set_xlabel('Age', size = 12, labelpad = 13)\nax.set_ylabel('Distribution', size = 12, labelpad = 13)\nax.set_title('Histogram representing Age Groups', pad = 15, size = 15)","1ef2eac4":"age_cut_labels = ['<20', '20-40', '40-60', '>60']\ntrain_data['age_cut'] = pd.cut(train_data['Age'], 4, labels = age_cut_labels)\ntrain_data.head(5)","76a78aca":"age_sur = {}\nage_dsur = {}\nfor label in age_cut_labels:\n    age_sur[label] = len(train_data[(train_data['age_cut'] == label) & train_data['Survived'] == 1])\n    age_dsur[label] = len(train_data[(train_data['age_cut'] == label) & train_data['Survived'] == 0])","7875fac7":"male_sur = {}\nfemale_sur = {}\nmale_dsur = {}\nfemale_dsur = {}\n\nfor label in age_cut_labels:\n        male_sur[label] = len(train_data[(train_data['age_cut'] == label) & (train_data['Survived'] == 1) & \n                                        (train_data['Sex'] == 'male')])\n        male_dsur[label] = len(train_data[(train_data['age_cut'] == label) & (train_data['Survived'] == 0) & \n                                        (train_data['Sex'] == 'male')])\n        female_sur[label] = len(train_data[(train_data['age_cut'] == label) & (train_data['Survived'] == 1) & \n                                        (train_data['Sex'] == 'female')])\n        female_dsur[label] = len(train_data[(train_data['age_cut'] == label) & (train_data['Survived'] == 0) & \n                                        (train_data['Sex'] == 'female')])","e648131d":"plt.figure();\nplot, ((ax1, ax2), (ax3, ax4)) = plt.subplots(nrows = 2, ncols = 2, figsize = (12, 8), dpi = 200, constrained_layout = True);\n\nax1.pie(age_sur.values(), radius = 1.1, explode = [0.005]*4, colors = sns.color_palette('Blues', n_colors = 4),\n        autopct=\"%.1f%%\", pctdistance=0.6, textprops = {'size':10});\nax1.legend(labels = age_cut_labels, title = 'Age Group', loc = (1,0.5));\nax1.set_title(\"Age Groups vs Number Survived\", size = 12);\n\nax2.bar([1,2.25,3.5,4.75],width = 0.5, height = male_sur.values(), color = '#3b98ce')\nax2.bar([1.5,2.75,4,5.25],width = 0.5, height = female_sur.values(), color = '#ed5447')\n\nxticks = [1.25, 2.5, 3.75, 5]\nax2.set_xticks(xticks)\nax2.set_xticklabels(age_cut_labels)\nax2.set_xlabel('Age Group', size = 12)\nax2.set_ylabel('Number Survived', size = 12)\nax2.legend(labels = ['Male', 'Female'], title = 'Gender')\nax2.set_title('Survived, Age Group vs Gender', pad = 14, size = 14)\n\nax3.pie(age_dsur.values(), radius = 1.1, explode = [0.005]*4, colors = sns.color_palette('Reds', n_colors = 4),\n        autopct=\"%.1f%%\", pctdistance=0.6, textprops = {'size':10});\nax3.legend(labels = age_cut_labels, title = 'Age Group', loc = (1, 0.5));\nax3.set_title(\"Age Groups vs Number Not Survived\", size = 12);\n\nax4.bar([1,2.25,3.5,4.75],width = 0.5, height = male_dsur.values(), color = '#3b98ce')\nax4.bar([1.5,2.75,4,5.25],width = 0.5, height = female_dsur.values(), color = '#ed5447')\n\nxticks = [1.25, 2.5, 3.75, 5]\nax4.set_xticks(xticks)\nax4.set_xticklabels(age_cut_labels)\nax4.set_xlabel('Age Group', size = 12)\nax4.set_ylabel('Number Not Survived', size = 12)\nax4.legend(labels = ['Male', 'Female'], title = 'Gender')\nax4.set_title('Not Survived, Age Group vs Gender', pad = 14, size = 14)\n\nplt.figure()","42a579b2":"plt.figure()\n_, ax = plt.subplots(nrows = 1, ncols = 2, constrained_layout = True, dpi = 200, figsize = (12, 6))\n\nsns.violinplot(x = train_data['age_cut'], y = train_data['Survived'], hue = train_data['Sex'], ax = ax[0], \n               palette = sns.color_palette('mako'))\nax[0].set_title('Violin Plot, KDE of age groups and Survival', size = 12)\n\nsns.stripplot(x = train_data['Sex'], y = train_data['Age'], ax = ax[1], palette = sns.color_palette('rocket_r'))\nax[1].set_title('Strip Plot, Count of Gender and Age')","cf88da82":"sib1_survd = len(train_data[(train_data['SibSp'] == 0) & (train_data['Survived'] == 1)])\nsib1_dsurvd = len(train_data[(train_data['SibSp'] == 0) & (train_data['Survived'] == 0)])\nsib2_survd = len(train_data[(train_data['SibSp'] > 0) & (train_data['Survived'] == 1)])\nsib2_dsurvd = len(train_data[(train_data['SibSp'] >0) & (train_data['Survived']) == 0])","bd1f8faf":"unique_sib = train_data['SibSp'].unique()\n\ncnt_unique = {}\nfor sib in unique_sib:\n    cnt_unique[sib] = len(train_data[train_data['SibSp'] == sib])","bcb23499":"fig = plt.figure(constrained_layout=True, dpi = 200, figsize = (10,6))\ngrid = gspec.GridSpec(nrows = 2, ncols = 2, figure = fig)\n\nax1 = fig.add_subplot(grid[1:,0])\nax1.pie([sib1_survd, sib1_dsurvd], radius = 1.1, explode = [0.01]*2, autopct = \"%.1f%%\", \n        colors = ['#3b98ce', '#ed5447'], pctdistance = 0.5)\nax1.set_xlabel(\"Survival, No Sibling and Spouse\", size = 10)\nax1.legend(labels = ['Survived', 'Not Survived'], loc = (0.9, 0.75), fontsize = 8)\n\nax2 = fig.add_subplot(grid[1:, 1])\nax2.pie([sib2_survd, sib2_dsurvd], radius = 1.1, explode = [0.02]*2, autopct = \"%.1f%%\", \n        colors = ['#3b98ce', '#ed5447'], pctdistance = 0.5)\nax2.set_xlabel(\"Survival, One or more Sibling and Spouse\", size = 10)\nax2.legend(labels = ['Survived', 'Not Survived'], loc = (0.9, 0.75), fontsize = 8)\n\nax3 = fig.add_subplot(grid[0,:])\nax3.bar(cnt_unique.keys(), cnt_unique.values(), color = sns.color_palette('Blues', n_colors = len(cnt_unique)))\nax3.set_xticks(range(0,9));\nax3.set_title('Count of Siblings and Spouse')\nax3.set_xlabel('No. of Siblings and Spouse')\nax3.set_ylabel('Count', labelpad = 14)","8ced4dee":"sib1_survd = len(train_data[(train_data['SibSp'] <= 1) & (train_data['Survived'] == 1)])\nsib1_dsurvd = len(train_data[(train_data['SibSp'] <= 1) & (train_data['Survived'] == 0)])\nsib2_survd = len(train_data[(train_data['SibSp'] > 1) & (train_data['Survived'] == 1)])\nsib2_dsurvd = len(train_data[(train_data['SibSp'] > 1) & (train_data['Survived']) == 0])","c3702d8d":"plt.figure()\n_, ax = plt.subplots(nrows = 1, ncols = 2, constrained_layout = True, dpi = 100, figsize = (12, 6))\n\nsns.violinplot(x = train_data['SibSp'], y = train_data['Sex'], hue = train_data['Survived'], ax = ax[0], \n               palette = sns.color_palette('rocket_r'))\nax[0].set_title('Violin Plot, KDE of Gender, Age Groups and Survival')\n\nsns.stripplot(y = train_data['Age'], x = train_data['SibSp'], ax = ax[1], palette = sns.color_palette('viridis'))\nax[1].set_title('Strip Plot, Count of SibSp vs Age Group')","8c51d6b0":"plt.figure()\n_, ax = plt.subplots(nrows = 1, ncols = 2, dpi = 200, constrained_layout = True, figsize = (8, 4))\n\nax[0].pie([sib1_survd, sib1_dsurvd], radius = 0.7, explode = [0.01]*2, autopct = \"%.1f%%\", textprops = {'size' : 8},\n        colors = ['#3b98ce', '#ed5447'], pctdistance = 0.5)\nax[0].set_xlabel(\"Survival, 1 or less Sibling and Spouse\", size = 9)\nax[0].legend(labels = ['Survived', 'Not Survived'], loc = (0.8, 0.75), fontsize = 6)\n\nax[1].pie([sib2_survd, sib2_dsurvd], radius = 0.7, explode = [0.03]*2, autopct = \"%.1f%%\", textprops = {'size' : 8},\n        colors = ['#3b98ce', '#ed5447'], pctdistance = 0.5)\nax[1].set_xlabel(\"Survival, Two or more Sibling and Spouse\", size = 9,)\nax[1].legend(labels = ['Survived', 'Not Survived'], loc = (0.8, 0.75), fontsize = 6)","d4c43deb":"parch_unique = train_data['Parch'].unique()\ndf_parch = pd.DataFrame()\ndf_parch['count'] = train_data.groupby('Parch')['Survived'].count()\ndf_parch['survived'] = train_data.groupby('Parch')['Survived'].sum()\ndf_parch['survived_percentage'] = (df_parch['survived']\/df_parch['count'])*100\n\ndf_parch","4e2cb23f":"plt.figure()\n_, ax = plt.subplots(nrows = 1, ncols = 2, constrained_layout = True, figsize = (12, 6), dpi = 200)\nax[0].bar(df_parch.index, df_parch['count'], color = sns.color_palette('Blues', n_colors = df_parch.shape[0]))\nax[0].set_title('Count of Parent and Child', size = 15, pad = 14)\nax[0].set_ylabel('Count', size = 12, labelpad = 12)\nax[0].set_xlabel('No. of Parents and Child', size = 12, labelpad = 12)\n\nax[1].bar(df_parch.index, df_parch['survived_percentage'], color = sns.color_palette('Reds', df_parch.shape[0]))\nax1_yticklabels = [str(label) + '%' for label in range(0, 70, 10)]\nax[1].set_yticklabels(ax1_yticklabels)\nax[1].set_title('Survial Percentage Parent and Children', size = 14, pad = 14)\nax[1].set_ylabel('Percentage', size = 12, labelpad = 12)\nax[1].set_xlabel('No. of Parents and Child', size = 12, labelpad = 12)","3ff614d2":"plt.figure()\n_, ax = plt.subplots(nrows = 1, ncols = 2, constrained_layout = True, dpi = 100, figsize = (12, 6))\n\nsns.violinplot(x = train_data['Parch'], y = train_data['Sex'], hue = train_data['Survived'], ax = ax[0], \n               palette = sns.color_palette('rocket_r'))\nax[0].set_title('Violin Plot, KDE Gender vs Age')\nsns.boxplot(y = train_data['Age'], x = train_data['Parch'], ax = ax[1], palette = sns.color_palette('viridis'))\nax[1].set_title('Box Plot, Parch and Age')","ce5fe192":"df_family =  pd.DataFrame()\ndf_family['size'] = train_data['Parch'] + train_data['SibSp'] + 1\ndf_family['Survived'] = train_data['Survived']\ndf_family['cut'] = pd.cut(df_family['size'], 3, labels = ['Small', 'Medium', 'Large'])\ntrain_data['family_cut'] =  pd.cut(df_family['size'], 3, labels = ['Small', 'Medium', 'Large'])\nnew_family = pd.DataFrame()\nnew_family['size'] = df_family.groupby('cut')['size'].count()\nnew_family['survived'] = df_family.groupby('cut')['Survived'].sum()\nnew_family['survived_percentage'] = (new_family['survived']\/new_family['size'])*100","c4203871":"plt.figure()\n_, ax = plt.subplots(nrows = 1, ncols = 2, constrained_layout = True, figsize = (12, 6), dpi = 200)\nax[0].bar(new_family.index, new_family['size'], color = sns.color_palette('Blues', n_colors = new_family.shape[0]))\nax[0].set_title('Count various Family Size', size = 15, pad = 14)\nax[0].set_ylabel('Count', size = 12, labelpad = 12)\nax[0].set_xlabel('Size of Family', size = 12, labelpad = 12)\n\nax[1].bar(new_family.index, new_family['survived_percentage'], color = sns.color_palette('Reds', n_colors = new_family.shape[0]))\ny_ticklabels = [str(label) + '%' for label in range(0, 41, 5)]\nax[1].set_yticklabels(y_ticklabels)\nax[1].set_title('Survial Percentage of Various Famiilies', size = 14, pad = 14)\nax[1].set_ylabel('Percentage', size = 12, labelpad = 12)\nax[1].set_xlabel('Size of Family', size = 12, labelpad = 12)","97741a6a":"class_unique = train_data['Pclass']\nclass_cnt = {}\nfor pclass in class_unique:\n    class_cnt[pclass] = len(train_data[train_data['Pclass'] == pclass])\n\nage_class = np.zeros((len(class_cnt), len(age_cut_labels)))\n\nfor i, pclass in enumerate(class_cnt):\n    for j, age in enumerate(age_cut_labels):\n        age_class[i][j] = len(train_data[(train_data['Pclass'] == pclass) & (train_data['age_cut'] == age)])\n        \nsur_class = {}\nfor pclass in class_unique:\n    sur_class[pclass] = (len(train_data[(train_data['Pclass'] == pclass) & (train_data['Survived'] == 1)])\/class_cnt[pclass])*100\n    \nclass_cnt = {key : value for key, value in sorted(class_cnt.items(), key = lambda x: x[0])}\nsur_class = {key : value for key, value in sorted(sur_class.items(), key = lambda x: x[0])}","faa0c868":"fig = plt.figure(constrained_layout = True, dpi = 200, figsize = (12, 6))\ngrid = gspec.GridSpec(nrows = 2, ncols = 2, figure = fig)\nax1 = fig.add_subplot(grid[:, 1])\nax1.imshow(age_class, cmap = sns.color_palette(\"flare\", as_cmap = True))\n\nax1_xticks = list(range(4))\nax1.set_xticks(ax1_xticks)\nax1.set_xticklabels(age_cut_labels)\n\nax1_yticks = list(range(3))\nax1.set_yticks(ax1_yticks)\nax1.set_yticklabels(class_cnt)\n\nax1.set_title('Survival Chances of Age Group vs Passenger Class', size = 14, pad = 14)\nax1.set_xlabel('Age Group', size = 12, labelpad = 14)\nax1.set_ylabel('Passenger Class', size = 12, labelpad = 1)\n\nax2 = fig.add_subplot(grid[0, :1])\nax2.barh(y = range(len(class_cnt.keys())), width = class_cnt.values(), \n         color = sns.color_palette('Blues', n_colors = len(class_cnt)))\n\nax2_yticks = [0,1,2]\nax2.set_yticks(ax2_yticks)\nax2.set_yticklabels([str(label) + \" Class\" for label in list(class_cnt.keys())])\n\nax2.set_xlabel('Count', size = 12, labelpad = 10)\nax2.set_title('Count of various Class', size = 14, pad = 14)\n\nax3 = fig.add_subplot(grid[1, :1])\nax3.barh(y = range(len(sur_class)), width = sur_class.values(), \n         color = sns.color_palette('Reds', n_colors = len(class_cnt)))\n\nax3_yticks = [0,1,2]\nax3.set_yticks(ax3_yticks)\nax3.set_yticklabels([str(label) + \" Class\" for label in list(class_cnt.keys())])\nax3_xticklabels = [str(label) + '%' for label in range(0, 70, 10)]\nax3.set_xticklabels(ax3_xticklabels);\n\nax3.set_xlabel('Survival Percentage', size = 12, labelpad = 14)\nax3.set_title('Survival Percentage of various Class', size = 15, pad = 13)","540acdde":"plt.figure()\n_, ax = plt.subplots(nrows = 1, ncols = 2, constrained_layout = True, dpi = 100, figsize = (12, 6))\n\nsns.boxplot(x = train_data['Sex'], y = train_data['Age'], hue = train_data['Pclass'], ax = ax[0], palette = sns.color_palette('rocket_r'))\nsns.boxplot(x = train_data['family_cut'], y = train_data['Age'], palette = sns.color_palette('flare'))\n\nax[0].set_title('BoxPlot, Pclass, Age and Gender')\nax[1].set_title('BoxPlot, Age vs Family Size')","5dde01d5":"embarked_df = pd.DataFrame()\nembarked_df['count'] = train_data.groupby('Embarked')['Survived'].count()\nembarked_df['survived_cnt']  = train_data.groupby('Embarked')['Survived'].sum()\nembarked_df['survived_percent'] = (embarked_df['survived_cnt']\/embarked_df['count'])*100","8327daea":"plt.figure()\n_, ax = plt.subplots(nrows = 1, ncols = 2, constrained_layout = True, figsize = (12, 6), dpi = 200)\nax[0].bar(embarked_df.index, embarked_df['count'], color = sns.color_palette('Blues', n_colors = embarked_df.shape[0]))\nax[0].set_title('Count of various Boarding Towns', size = 15, pad = 14)\nax[0].set_ylabel('Count', size = 12, labelpad = 12)\nax[0].set_xlabel('Town', size = 12, labelpad = 12)\n\nax[1].bar(embarked_df.index, embarked_df['survived_percent'], color = sns.color_palette('Reds', n_colors = embarked_df.shape[0]))\nax[1].set_title('Survial Percentage vs Boarding Town', size = 14, pad = 14)\nax[1].set_ylabel('Percentage', size = 12, labelpad = 12)\nax[1].set_xlabel('Town', size = 12, labelpad = 12)\nax1_yticklabels = [str(label) + \"%\" for label in range(0,60,10)]\nax[1].set_yticklabels(ax1_yticklabels);","c2b194e1":"plt.figure()\n_, ax = plt.subplots(nrows = 1, ncols = 2, constrained_layout = True, dpi = 100, figsize = (12, 6))\n\nsns.violinplot(x = train_data['Embarked'], y = train_data['Pclass'], hue = train_data['Survived'], ax = ax[0], \n               palette = sns.color_palette('mako'))\nsns.boxplot(x = train_data['Embarked'], y = train_data['Age'], ax = ax[1], palette = sns.color_palette('viridis'))\n\nax[0].set_title('ViolinPlot, KDE Embarked vs Pclass')\nax[1].set_title('BoxPlot, Age Group vs Embarked')","fca24a30":"plt.figure(dpi = 200, figsize = (12, 6))\nsns.distplot(train_data['Fare'], color = '#c9431a')\n\nax = plt.gca()\n\nfor loc in ['top', 'bottom', 'left', 'right']: \n    ax.spines[loc].set_visible(False)\n\nax.xaxis.set_ticks_position('none') \nax.yaxis.set_ticks_position('none')\n\nax.grid(color = '#160054', linestyle = '--', alpha = 0.5)\n    \nax.set_xlabel('Fare', size = 12, labelpad = 13)\nax.set_ylabel('Distribution', size = 12, labelpad = 13)\nax.set_title('Histogram representing Passenger Fare', pad = 15, size = 15)","56410cc4":"fare_df = pd.DataFrame()\nfare_df['fare_cut'] = pd.cut(train_data['Fare'], bins = 3, labels = ['Low', 'Medium', 'High'])\nfare_df['survived'] = train_data['Survived']\nnew_fare = pd.DataFrame()\nnew_fare['count'] = fare_df.groupby('fare_cut')['survived'].count()\nnew_fare['survived_cnt'] = fare_df.groupby('fare_cut')['survived'].sum()\nnew_fare['survived_percentage'] = (new_fare['survived_cnt']\/new_fare['count'])*100","4134782d":"plt.figure()\n_, ax = plt.subplots(nrows = 1, ncols = 2, constrained_layout = True, figsize = (12, 6), dpi = 200)\nax[0].bar(new_fare.index, new_fare['count'], color = sns.color_palette('Blues', n_colors = new_fare.shape[0]))\nax[0].set_title('Count of Passengers of various Fare', size = 15, pad = 14)\nax[0].set_ylabel('Count', size = 12, labelpad = 12)\nax[0].set_xlabel('Fare Price', size = 12, labelpad = 12)\n\nax[1].bar(new_fare.index, new_fare['survived_percentage'], color = sns.color_palette('Reds', n_colors = new_fare.shape[0]))\nax[1].set_title('Survial Percentage vs Fare', size = 14, pad = 14)\nax[1].set_ylabel('Percentage', size = 12, labelpad = 12)\nax[1].set_xlabel('Fare Price', size = 12, labelpad = 12)\nax1_yticklabels = [str(label) + \"%\" for label in range(0,101,20)]\nax[1].set_yticklabels(ax1_yticklabels);","291eafc1":"def split_name(row):\n    row['Name'] = row['Name'].split(', ')[1].split('. ')[0]\n    if(row['Name'] == 'Miss'):\n        row['Name'] = 'Ms'\n    if(row['Name'] not in ['Mr', 'Ms', 'Master', 'Mrs']):\n        row['Name'] = 'Others'\n    return row\n\ndf_name = pd.DataFrame()\ndf_name['Name'] = train_data['Name']\ndf_name = df_name.apply(split_name, axis = 1)\ndf_name['Survived'] = train_data['Survived']\n\nnew_name = pd.DataFrame()\nnew_name['Count'] = df_name.groupby('Name')['Survived'].count()\nnew_name['Survived_Count'] = df_name.groupby('Name')['Survived'].sum()\nnew_name['Survived_Percentage'] = (new_name['Survived_Count']\/new_name['Count'])","dd83d666":"plt.figure()\n_, ax = plt.subplots(nrows = 1, ncols = 2, dpi = 200, constrained_layout = True, figsize = (8, 4))\n\nax[0].bar(new_name.index, new_name['Count'], color = sns.color_palette('Blues', n_colors = new_name.shape[0]))\nax[0].set_title('Count of Passengers of various Titles', size = 10, pad = 14)\nax[0].set_ylabel('Count', size = 9, labelpad = 12)\nax[0].set_xlabel('Titles', size = 9, labelpad = 12)\n\nax[1].pie(new_name['Survived_Percentage'], radius = 1, explode = [0.006]*len(new_name), autopct = \"%.1f%%\", textprops = {'size' : 8},\n        colors = sns.color_palette('Reds', n_colors = len(new_name)), pctdistance = 0.5)\nax[1].set_xlabel(\"Survival, Titles\", size = 9,)\nax[1].legend(labels = new_name.index, loc = (0.8, 0.75), fontsize = 6)","f10399b7":"train_data.drop(['age_cut', 'family_cut'], axis = 1, inplace = True)","be866a92":"plt.figure(dpi = 120, figsize = (16,7))\nsns.heatmap(train_data[[\"Age\", \"Sex\", \"SibSp\", \"Parch\", \"Pclass\"]].corr(), cmap = \"flare\", annot = True, )","86875a38":"train_num = train_data.select_dtypes(include = np.number)\ntest_num = test_data.select_dtypes(include = np.number)","9c687391":"train_num.head()","e046476a":"missingno.bar(train_num)","9fcb3d63":"train_num.interpolate(method = 'linear', inplace = True)","5e1ee42a":"print(\"Original skew of fare is : \", train_num['Fare'].skew())\nnew_skew = train_num['Fare'].map(lambda x : np.log(x+1))\nprint(\"New_Skew is : \", new_skew.skew())","c9c79144":"train_num.loc[:, 'Fare'] = train_num.loc[:, 'Fare'].map(lambda x : np.log(x+1))\ntest_num.loc[:, 'Fare'] = test_num.loc[:, 'Fare'].map(lambda x : np.log(x+1))","dd5dcec9":"plt.figure(dpi = 200, figsize = (12, 6))\nsns.distplot(train_num['Fare'], color = '#c9431a')\nax = plt.gca()\nfor loc in ['top', 'bottom', 'left', 'right']: \n    ax.spines[loc].set_visible(False)\nax.xaxis.set_ticks_position('none') \nax.yaxis.set_ticks_position('none')\nax.grid(color = '#160054', linestyle = '--', alpha = 0.5)    \nax.set_xlabel('Fare', size = 12, labelpad = 13)\nax.set_ylabel('Distribution', size = 12, labelpad = 13)\nax.set_title('Histogram representing Passenger Fare', pad = 15, size = 15)","f3723770":"train_num['Family Size'] = train_num['Parch'] + train_num['SibSp'] + 1\ntest_num['Family Size'] = test_num['Parch'] + test_num['SibSp'] + 1","4a06d45b":"train_cat = train_data.select_dtypes(include = np.object)\ntest_cat = test_data.select_dtypes(include = np.object)","e2eaedad":"train_cat.head()","d824d867":"def split_name(row):\n    row['Name'] = row['Name'].split(', ')[1].split('. ')[0]\n    if(row['Name'] == 'Miss'):\n        row['Name'] = 'Ms'\n    if(row['Name'] not in ['Mr', 'Ms', 'Master', 'Mrs']):\n        row['Name'] = 'Others'\n    return row","8f2e0007":"train_cat = train_cat.apply(split_name, axis = 1)\ntest_cat = test_cat.apply(split_name, axis = 1)","462dc031":"num_cols = ['PassengerId', 'Pclass', 'Age', 'SibSp', 'Parch', 'Family Size', 'Fare']\ncat_cols = ['Name', 'Sex', 'Embarked']","1fd32cd4":"X_train = pd.DataFrame()\nX_test = pd.DataFrame()\n\ndef dummies(inp, out):\n    for col in cat_cols:\n        dummy_cols = pd.get_dummies(inp[col], drop_first = True)\n        out[dummy_cols.columns.tolist()] = dummy_cols[dummy_cols.columns.tolist()]\n    return out\n\nX_train = pd.concat([train_num[num_cols], dummies(train_cat, X_train)], axis = 1).set_index('PassengerId')\nX_test_main = pd.concat([test_num[num_cols], dummies(test_cat, X_test)], axis = 1).set_index('PassengerId')\ny_train = train_num['Survived']","0bec58ea":"print(X_train.shape, X_test_main.shape, y_train.shape)","693dda33":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.1, shuffle = True)","f84b2448":"X_train.head(5)","dbc14a6d":"model = keras.Sequential([\n    keras.Input(X_train.shape[1]),\n    layers.Dense(32, activation = 'relu',kernel_regularizer = keras.regularizers.l2(0.001)),\n    layers.Dense(64, activation = 'relu', kernel_regularizer = keras.regularizers.l2(0.001)),\n    layers.BatchNormalization(),\n    layers.Dense(64, activation = 'relu', kernel_regularizer = keras.regularizers.l2(0.001)),\n    layers.Dense(64, activation = 'relu', kernel_regularizer = keras.regularizers.l2(0.001)),\n    layers.BatchNormalization(),\n    layers.Dense(128, activation = 'relu', kernel_regularizer = keras.regularizers.l2(0.001)),\n    layers.Dense(128, activation = 'relu', kernel_regularizer = keras.regularizers.l2(0.001)),\n    layers.BatchNormalization(),\n    layers.Dense(128, activation = 'relu', kernel_regularizer = keras.regularizers.l2(0.001)),\n    layers.Dense(1, activation = 'sigmoid')\n    \n])","67bf145e":"model.compile(loss = keras.losses.BinaryCrossentropy(),\n             optimizer = keras.optimizers.Adam(0.001),\n             metrics = ['accuracy'])","584e223e":"history =  model.fit(X_train, y_train, batch_size = 64, epochs = X_train.shape[0]\/\/16)","3f8ead0d":"plt.figure()\n_, ax = plt.subplots(nrows = 1, ncols = 2, figsize = (12, 4), dpi = 200, constrained_layout = True)\nax[0].plot(history.history['accuracy'])\nax[1].plot(history.history['loss'])\n\nax[0].set_xlabel('Epochs')\nax[1].set_xlabel('Epochs')\nax[0].set_ylabel('Accuracy')\nax[1].set_ylabel('Loss')\nax[0].set_title('Train Accuracy')\nax[1].set_title('Train Loss')","b0a1f131":"y_pred = model.predict(X_test)\ny_pred = (y_pred>0.5).reshape(y_pred.shape[0], )","ac06637c":"accuracy = np.sum(y_pred == y_test)\/y_test.shape[0]*100\nprint(\"Test accuracy is %.2f%%\"%accuracy)","da6e0e06":"<a id = \"3.10\"><\/a>\n### **3.10 Title Analysis**","b1a82a6a":"<a id = \"3.6\"><\/a>\n### **3.6 Passenger Class Analysis**","15ef4056":"<a id = \"3.4\"><\/a>\n### **3.4 Parent and Children Analysis**","4390027a":"<a id = \"3.8\"><\/a>\n### **3.8 Embarked Analysis**","c36ba682":"<a id = \"5\"><\/a>\n# **5. Modeling**","b5915dc8":"<a id = \"4\"><\/a>\n# **4. Feature Engineering**","4d47fb7b":"<a id = \"4.0\"><\/a>\n### **Missing Values**","68a9d06f":"<a id = \"4.2\"><\/a>\n### **4.2 Family Size**","8a0a1acc":"<a id = \"4.3\"><\/a>\n### **4.3 Name**","58479094":"<a id = \"3.2\"><\/a>\n### **3.2 Age Analysis**","96243b12":"# **Titanic EDA and Builiding Predictive Model \ud83d\udea2**\n\n#### Hi,this is my first notebook ever and here we explore the Titanic Dataset using tools such as **Matplotlib** and **Seaborn**, and create a Deep Learning Model using **TensorFlow** and **Keras** that achieves **84%** Test Set Accuracy.\n\n### **INDEX**\n1. [Importing the libraries](#1)\n2. [Reading the Dataset](#2)\n3. [EDA](#3)\n    * [Gender Analysis](#3.1)\n    * [Age Analysis](#3.2)\n    * [Sibling and Spouses Analysis](#3.3)\n    * [Parent and Children Analysis](#3.4)\n    * [Family Size Analysis](#3.5)\n    * [Passenger Class Analysis](#3.6)\n    * [Pclass,Age,Gender  Analysis](#3.7)\n    * [Embarked Analysis](#3.8)\n    * [Fare Analysis](#3.9)\n    * [Ttitle Analysis](#3.10)\n    * [Correlation Matrix](#3.11)\n4. [Feature Engineering](#4)\n    * [Missing Values](#4.0)\n    * [Fare](#4.1)\n    * [Family Size](#4.2)\n    * [Name](#4.3)\n    * [Test Train Split](#4.4)\n5. [Modeling and Submission](#5)\n\n#### **->** Please leave any **comments\/suggestions**\ud83d\udcc3 on how to improve this notebook.\n#### **->** Do **upvote**\ud83d\udc4d if you find the notebook intersting!\n#### **->** Thank you for your time, **CHEERS!\ud83c\udf1f**","97180e2d":"<a id = \"3\"><\/a>\n# **3. Exploratory Data Analysis**","29ce6a69":"<a id = \"3.7\"><\/a>\n### **3.7 Factor Plots (Pclass, Age, Gender, Family Size)**","7fcd8e48":"<a id = \"3.11\"><\/a>\n### **3.11 Corelation Matrix**","38a402d0":"<a id = \"1\"><\/a>\n# **1. Importing The Libraries**\n\nHere we import some of the libraries that we will use in this notebook for EDA as well as building a predective model.","9feb2775":"<a id = \"3.5\"><\/a>\n### **3.5 Family Size Analysis**","25a3895f":"<a id = \"2\"><\/a>\n# **2. Reading The Dataset**","ae2871d3":"<a id = \"3.9\"><\/a>\n### **3.9 Fare Analysis**","f0281a22":"<a id = \"3.3\"><\/a>\n### **3.3 Sibling And Spouses Analysis**","566a7840":"<a id = \"3.1\"><\/a>\n### **3.1 Gender Analysis**","66ce0bbb":"<a id = \"4.4 Train Test Split\"><\/a>\n### **4.4 Train Test Split**","26dafb2c":"<a id = \"4.1\"><\/a>\n### **4.1 Fare**"}}