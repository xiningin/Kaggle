{"cell_type":{"2db629ce":"code","6bcb6edc":"code","0cc6cdaa":"code","64a48d91":"code","cbbce244":"code","84b98d4c":"code","30d1b756":"code","83794c63":"code","cd9ee288":"code","297d3833":"code","9fe0517f":"code","2d3e501f":"code","cfe1fb7d":"code","5afeeeea":"code","9d4bf1bf":"code","66ac9cd9":"code","d5168f0c":"code","d00e8335":"code","9f613724":"code","27111024":"code","3d11b6df":"code","b7f7f1f7":"code","e15684f3":"code","386ac3ec":"code","a12a6a86":"code","7535023b":"code","caee2768":"code","72785c4c":"code","06dd08bf":"code","37f2cfb2":"code","691cb1b1":"code","8de96dfa":"code","b39a3c4f":"code","0848fbbd":"code","a744179f":"code","9a2124c1":"code","7d7117df":"code","55516b30":"code","6685f238":"code","a42c27dd":"code","219f7e8f":"code","bb932bf1":"code","b4503c60":"code","7a25e7ed":"code","662c7c5c":"code","f9ff1b8a":"code","5613fcfe":"code","90342689":"code","dd1b7561":"code","00780d7d":"code","aa02ff71":"code","78ef1a98":"code","26af5db2":"code","7f1d0b1b":"code","248a3374":"code","249473a1":"code","ace009f5":"code","b0380fc6":"code","6ae14d7b":"code","77af56a2":"code","7bf938ff":"code","598c68ad":"code","33561bbf":"code","eb85ec4e":"markdown","a43bad2d":"markdown","a99b5db9":"markdown","c1dd5e8d":"markdown","1d24b3b4":"markdown","78d6e52d":"markdown","e13e2c2c":"markdown","f850e06a":"markdown","5efdfef5":"markdown","64ab4970":"markdown"},"source":{"2db629ce":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sn\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6bcb6edc":"# reading the csv file.\nhousing_data = pd.read_csv('..\/input\/housesalesprediction\/kc_house_data.csv')","0cc6cdaa":"# viewing the dataset and it's distribution.\nhousing_data.describe()","64a48d91":"#disp the first 5 rows of data.\nhousing_data.head()","cbbce244":"# checking all the data types and is there any inconsistencies.\nhousing_data.dtypes","84b98d4c":"# checking is there any missing data in the datasset.\nmissing_data = housing_data.isnull()\nmissing_data.head(5)","30d1b756":"housing_floors = housing_data","83794c63":"housing_data['floors'].value_counts()","cd9ee288":"#Dropping id and date from the housing dataset.\nhousing_floors=housing_floors.drop(\"id\",axis=1)\nhousing_floors=housing_floors.drop(\"date\", axis=1)","297d3833":"housing_floors.describe()","9fe0517f":"# checking for missing data.\nhousing_data.isnull().sum()","2d3e501f":"#checking the shape of the dataset.\nhousing_data.shape","cfe1fb7d":"#checking whether the column id and date are dropped.\nhousing_floors.columns","5afeeeea":"# checking correlation for the whole dataset.\nrs = np.random.RandomState(0)\ndf = pd.DataFrame(rs.rand(10, 10))\ncorr = housing_data.corr()\ncorr.style.background_gradient(cmap='coolwarm').set_precision(2)","9d4bf1bf":"# checking the distribution of waterfront in relation to price.\nsn.boxplot(x=\"waterfront\", y=\"price\", data=housing_data)","66ac9cd9":"# plotting the regression plot to check the correlation between sqft_above and price.\nsn.regplot(x=\"sqft_above\", y=\"price\", data=housing_data)\nplt.ylim(0,)","d5168f0c":"# importing the libraries for linear regression from scikit learn\nfrom sklearn.linear_model import LinearRegression","d00e8335":"# specifying individual objects or variable for sqft_living and price.\nlm = LinearRegression()\nX = housing_data[['sqft_living']]\ny = housing_data[['price']]","9f613724":"#fitting the linear regression model.\nlm.fit(X,y)","27111024":"# predicting the model.\nhousing_pred = lm.predict(X)","3d11b6df":"# viewing the predicted array.\nhousing_pred[0:5]","b7f7f1f7":"# printing the intercept and coefficient for the simple linear regression.\nprint(\"Intercept:\",lm.intercept_, \"coefficient:\", lm.coef_)","e15684f3":"#measuring mse and R^2\nfrom sklearn.metrics import mean_squared_error\nhousing_data_mse = mean_squared_error(housing_data['price'], housing_pred)\nprint(\"Mean square error for the linear regression:\", housing_data_mse)\nprint(\"R square for the linear regression is:\", lm.score(X,y))","386ac3ec":"#plotting the residual plot to see the distribution to determine whether it is linear or non-linear.\nwidth = 12\nheight = 10\nplt.figure(figsize=(width, height))\nsn.residplot(housing_data['sqft_living'], housing_data['price'])\nplt.show()","a12a6a86":"# Creating a dataframe to include wanted attributes or feature for further analysis.\nhousing_data_mlr = housing_data.filter(['bedrooms', 'bathrooms', 'sqft_living','floors', 'waterfront', 'view', 'grade','sqft_above', 'sqft_basement', 'lat', 'sqft_living15'], axis = 1)","7535023b":"#checking all data types are as desired.\nhousing_data_mlr.dtypes","caee2768":"# creating one more list to hold price attribute.\nhousing_data_target = housing_data.filter(['price'], axis = 1)","72785c4c":"housing_data_target.dtypes","06dd08bf":"# importing the test train split function from scikit learn.\nfrom sklearn.model_selection import train_test_split","37f2cfb2":"# splitting the dataset into 75:25.\nX_train, X_test ,Y_train ,Y_test =train_test_split(housing_data_mlr, housing_data_target,test_size=0.25,random_state=101)","691cb1b1":"# printing the shape of the splitted dataset.\nprint(X_train.shape, X_test.shape, Y_train.shape, Y_test.shape)","8de96dfa":"# fitting the model with multiple linear regression\nhousing_mlr = lm.fit(X_train, Y_train)","b39a3c4f":"housing_mlr_pred = lm.predict(X_test)","0848fbbd":"housing_mlr_pred[:,]","a744179f":"#measuring mse and R^2\nfrom sklearn.metrics import mean_squared_error\nhousing_mlr_mse = mean_squared_error(Y_test['price'], housing_mlr_pred)\nprint(\"Mean square error for the linear regression:\", housing_mlr_mse)\nprint(\"R square for the linear regression is:\", lm.score(X_test,Y_test))\nprint(\"Intercept:\",lm.intercept_, \"coefficient:\", lm.coef_)","9a2124c1":"# plotting the model to see how well it is fitting to the actual data.\nwidth = 12\nheight = 10\n\nplt.figure(figsize=(width, height))\na = sn.distplot(Y_test['price'], hist=False, color=\"purple\", label=\"Actual Value\")\nsn.distplot(housing_mlr_pred, hist=False, color=\"orange\", label=\"Fitted Values\" , ax=a)\nplt.title('Actual vs Fitted Values for Price')\nplt.xlabel('Price (in dollars)')\nplt.ylabel('Proportion of ')\nplt.legend()\nplt.show()\nplt.close()","7d7117df":"# standardizing the variable before using multiple linear regression to fit the data to predict the price of the house using features.\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()","55516b30":"# pipeline for linear regression.\nfrom sklearn.pipeline import Pipeline\nfunction =[('scale',StandardScaler()), ('model',LinearRegression())]","6685f238":"# creating funnel object for pipeline function.\nfunnel = Pipeline(function)\nfunnel","a42c27dd":"# fitting the Linear regression via pipeline that we created.\nhousing_poly_linear_fit = funnel.fit(X_train, Y_train)","219f7e8f":"# prediction through the pipeline.\nhousing_poly_linear_pred = funnel.predict(X_test)","bb932bf1":"#measuring mse and R^2\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score","b4503c60":"# measuring R^2 value for the pipeline linear regression.\nr_square = r2_score(Y_test, housing_poly_linear_pred)\nr_square","7a25e7ed":"# Ridge regression with alpha parameter to 0.1\nfrom sklearn.linear_model import Ridge\nridge=Ridge(alpha=0.1)","662c7c5c":"housing_ridge_fit =  ridge.fit(X_train, Y_train)","f9ff1b8a":"housing_ridge_pred = ridge.predict(X_test)","5613fcfe":"# measuring R^2 value for the ridge regression.\nr_square_ridge = r2_score(Y_test, housing_ridge_pred)\nr_square_ridge","90342689":"# Creating a second order polynomial transform and training it using trainin set with alpha parameter set to 0.1.\nfrom sklearn.preprocessing import PolynomialFeatures\npoly = PolynomialFeatures(degree=2)","dd1b7561":"x_train_poly=poly.fit_transform(X_train[['bedrooms', 'bathrooms', 'sqft_living','floors', 'waterfront', 'view', 'grade','sqft_above', 'sqft_basement', 'lat', 'sqft_living15']])\nx_test_poly=poly.fit_transform(X_test[['bedrooms', 'bathrooms', 'sqft_living','floors', 'waterfront', 'view', 'grade','sqft_above', 'sqft_basement', 'lat', 'sqft_living15']])","00780d7d":"housing_ridge_poly = ridge.fit(x_train_poly, Y_train)","aa02ff71":"housing_rid_pol_pred = ridge.predict(x_test_poly)","78ef1a98":"# calculating the mean square error for the polynomial ridge regression.\nhousing_rid_pol_mse = mean_squared_error(Y_test['price'], housing_rid_pol_pred)\nhousing_rid_pol_mse","26af5db2":"# measuring R^2 value for the polynamial transform ridge regression.\nr_square_ridge_pol = r2_score(Y_test, housing_rid_pol_pred)\nr_square_ridge_pol","7f1d0b1b":"# installing libraries for the plot and training and testing the modle with different alpha parameters to fit the model.\nfrom tqdm import tqdm\n\nRsqu_test = []\nRsqu_train = []\ndummy1 = []\nAlpha = 10 * np.array(range(0,1000))\npbar = tqdm(Alpha)\n\nfor alpha in pbar:\n    RigeModel = Ridge(alpha=alpha) \n    RigeModel.fit(x_train_poly, Y_train)\n    test_score, train_score = RigeModel.score(x_test_poly, Y_test), RigeModel.score(x_train_poly, Y_train)\n    \n    pbar.set_postfix({\"Test Score\": test_score, \"Train Score\": train_score})\n\n    Rsqu_test.append(test_score)\n    Rsqu_train.append(train_score)","248a3374":"# plottig the training iteration of polynomia ridge regression.\nwidth = 12\nheight = 10\nplt.figure(figsize=(width, height))\n\nplt.plot(Alpha,Rsqu_test, label='validation data  ')\nplt.plot(Alpha,Rsqu_train, 'r', label='training Data ')\nplt.xlabel('alpha')\nplt.ylabel('R^2')\nplt.legend()","249473a1":"# creating data frame for projection on to map with lat and long\nhousing_data_geo = housing_data.filter(['price','bedrooms', 'bathrooms', 'sqft_living','floors', 'waterfront', 'view', 'grade','sqft_above', 'sqft_basement', 'long','lat', 'sqft_living15'], axis = 1)","ace009f5":"housing_data_geo.describe()","b0380fc6":"# specifing conditions to form a new column named price_range.\nconditions = [\n    (housing_data_geo['price'] <= 200000),\n    (housing_data_geo['price'] > 200000) & (housing_data_geo['price'] <= 450000),\n    (housing_data_geo['price'] > 450000) & (housing_data_geo['price'] <= 1000000),\n    (housing_data_geo['price'] > 1000000)\n    ]\n    ","6ae14d7b":"# create a list of the values we want to assign for each condition\nvalues = ['low', 'medium', 'high', 'very_high']","77af56a2":"# creating joing the condition and value to form new column.\nhousing_data_geo['price_range'] = np.select(conditions, values)","7bf938ff":"housing_data_geo.head()","598c68ad":"housing_data_geo.dtypes","33561bbf":"#plotting to find with of the price range is dominant in king county.\n#from the graph below we know that most of the houses are in a range of 200,000 to 450,000.\nsn.set_theme(style=\"darkgrid\")\nax = sn.countplot(x=\"price_range\", data=housing_data_geo)","eb85ec4e":"## Dataset Description\n\nThis dataset contains house sale prices for King County, which includes Seattle. It includes homes sold between May 2014 and May 2015. It was taken from here. Here is the description of the data:\n\n### Variable\tDescription\nid:\tA notation for a house\ndate:\tDate house was sold\nprice:\tPrice is prediction target\nbedrooms:\tNumber of bedrooms\nbathrooms:\tNumber of bathrooms\nsqft_living:\tSquare footage of the home\nsqft_lot:\tSquare footage of the lot\nfloors:\tTotal floors (levels) in house\nwaterfront:\tHouse which has a view to a waterfront\nview:\tHas been viewed\ncondition:\tHow good the condition is overall\ngrade:\toverall grade given to the housing unit, based on King County grading system\nsqft_above:\tSquare footage of house apart from basement\nsqft_basement:\tSquare footage of the basement\nyr_built:\tBuilt Year\nyr_renovated:\tYear when house was renovated\nzipcode:\tZip code\nlat:\tLatitude coordinate\nlong:\tLongitude coordinate\nsqft_living15:\tLiving room area in 2015(implies-- some renovations) This might or might not have affected the lotsize area\nsqft_lot15:\tLotSize area in 2015(implies-- some renovations)","a43bad2d":"# # Linear Regression","a99b5db9":"# Conditional formating to see with price category is dominant in King County USA","c1dd5e8d":"# # Pipeline for Linear Regression","1d24b3b4":"# # Polynomial Ridge Regression","78d6e52d":"# Housing Price Prediction in King County, USA","e13e2c2c":"# # Multiple Linear Regression","f850e06a":"# # Ridge Regression","5efdfef5":"Real Estate Investment Trust would like to start investing in Residential real estate. To determining the market price of a house given a set of features. Analyze and predict housing prices using attributes or features such as square footage, number of bedrooms, number of floors, and so on. ","64ab4970":"#### Before analysing the dataset we need to understand it's distribution.\n\nInorder to do that, we will be using describe, isnull, info, dtypes and some plot to analyse the distribution of the dataset."}}