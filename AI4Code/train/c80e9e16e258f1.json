{"cell_type":{"8b8e36a8":"code","e74dd230":"code","25e46ac6":"code","71f93a1c":"code","82885bea":"code","e7b4617f":"code","c1560743":"code","1b0fa531":"code","751f4cfe":"code","3a0fe3c9":"code","596af37c":"code","134d49ae":"code","b4330585":"code","1223e2b7":"markdown","b52caf36":"markdown","f26950b0":"markdown","1911f469":"markdown","e74bfa91":"markdown","d58ada04":"markdown","41d612c2":"markdown"},"source":{"8b8e36a8":"import numpy as np \nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.arima_model import ARIMA\nimport statsmodels.api as sm\nfrom statsmodels.tsa.stattools import acf, pacf\nimport os\nprint(os.listdir(\"..\/input\"))","e74dd230":"df = pd.read_csv('..\/input\/cherkizovo\/GCHE.ME.csv', index_col = 0)\ndf.index = pd.to_datetime(df.index, format = \"%Y\/%m\/%d\")\ndf.head()","25e46ac6":"df_final = df.drop(['Open','High','Low','Volume'], axis = 1)\ndf_final = pd.Series(df_final['Close'])","71f93a1c":"def check_stationarity(ts_data):\n    \n    roll_mean = ts_data.rolling(30).mean()\n    roll_std = ts_data.rolling(5).std()\n    \n    fig = plt.figure(figsize = (20, 10))\n    plt.subplot(211)\n    plt.plot(ts_data, color = 'black', label = 'Original Data')\n    plt.plot(roll_mean, color = 'red', label = 'Rolling Mean(30 days)')\n    plt.legend()\n    plt.subplot(212)\n    plt.plot(roll_std, color = 'green', label = 'Rolling Std Dev(5 days)')\n    plt.legend()\n    \n    print('Dickey-Fuller test results\\n')\n    df_test = adfuller(ts_data, regresults = False)\n    test_result = pd.Series(df_test[0:4], index = ['Test Statistic', 'p-value', \n                                                   '# of lags', '# of obs'])\n    print(test_result)\n    for k,v in df_test[4].items():\n        print('Critical value at %s: %1.5f' %(k, v))","82885bea":"check_stationarity(df_final)","e7b4617f":"df_final_log = np.log(df_final)\ndf_final_log.dropna(inplace = True)\n\ndf_final_log_diff = df_final_log - df_final_log.shift()\ndf_final_log_diff.dropna(inplace = True)\ndf_final_diff = df_final - df_final.shift()\ndf_final_diff.dropna(inplace = True)\n\ndf_acf = acf(df_final_diff)\ndf_pacf = pacf(df_final_diff)","c1560743":"fig1 = plt.figure(figsize = (20, 10))\nax1 = fig1.add_subplot(211)\nfig1 = sm.graphics.tsa.plot_acf(df_acf, ax = ax1)\nax2 = fig1.add_subplot(212)\nfig1 = sm.graphics.tsa.plot_pacf(df_pacf, ax = ax2)","1b0fa531":"model = ARIMA(df_final_diff, (1, 1, 0))\nfit_model = model.fit(full_output = True)\npredictions = model.predict(fit_model.params, start = 2753, end = 2853)\nfit_model.predict(start = 2753, end = 2853)","751f4cfe":"predictions[:5]","3a0fe3c9":"pred_model_diff = pd.Series(fit_model.fittedvalues, copy = True)\npred_model_diff.head()\n\npred_model_diff_cumsum = pred_model_diff.cumsum()\npred_model_diff_cumsum.head()\n\ndf_final_trans = df_final.add(pred_model_diff_cumsum, fill_value = 0)\ndf_final_trans.tail()","596af37c":"plt.figure(figsize = (20, 10))\nplt.plot(df_final, color = 'black', label = 'Original data')\nplt.plot(df_final_trans, color = 'red', label = 'Fitted Values')\nplt.legend()","134d49ae":"x = df_final.values\ny = df_final_trans.values\n\nfinal_pred = []\nfor i in predictions:\n    t = df_final[-1] + i\n    final_pred.append(t)\n    \nfinal_pred = pd.Series(final_pred)\nfinal_pred[:5]","b4330585":"plt.figure(figsize = (20, 8))\nplt.plot((x - y), color = 'red', label = 'Delta')\nplt.axhline((x - y).mean(), color = 'black', label = 'Delta avg line')\nplt.legend()","1223e2b7":"## \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","b52caf36":"## \u0412\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445","f26950b0":"## \u0418\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","1911f469":"## \u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\n","e74bfa91":"## \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438","d58ada04":"## \u0412\u044b\u0433\u0440\u0443\u0437\u043a\u0430 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439","41d612c2":"# \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430"}}