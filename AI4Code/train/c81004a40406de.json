{"cell_type":{"83e3a2b1":"code","3ebd6593":"code","bcad625d":"code","8f1a1f37":"code","94663aa6":"code","faa22c5b":"code","8580953e":"code","ba00cc12":"code","f0cf48a7":"code","273eb6a3":"code","aff2be81":"code","560f69a5":"code","22cae121":"code","67af7108":"code","77c6afd2":"code","2c7a2bec":"code","aa4a8cde":"code","ee7e4e50":"code","c32f58fc":"code","507cc896":"code","13542eed":"code","49f63dbd":"code","b121bcef":"code","295ca7ec":"code","c704ba9b":"code","03d19f05":"code","3474d327":"code","a913151b":"code","fc620e6e":"code","e84cd1f2":"code","52e71d7c":"code","08c341cf":"code","9b8fb87f":"code","9b727b4b":"code","b8cf8791":"markdown","3333e0a1":"markdown","fde389ea":"markdown","0e02678d":"markdown","01e6fe72":"markdown","1669798d":"markdown","dfc845c1":"markdown","5727afaf":"markdown"},"source":{"83e3a2b1":"# imports ","3ebd6593":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer, WordNetLemmatizer\nimport re\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\nfrom sklearn.pipeline import Pipeline","bcad625d":"# reading the data file '\/kaggle\/input\/spam-email\/","8f1a1f37":"df = pd.read_csv('\/kaggle\/input\/spam-email\/spam.csv')\ndf.head()","94663aa6":"df.shape","faa22c5b":"df.info()","8580953e":"category_count = df['Category'].value_counts()\nplt.figure(figsize=(10,5))\nplt.subplot(1,2,1)\nplt.pie(x=category_count.values, labels=category_count.index, autopct='%.2f%%')\nplt.subplot(1,2,2)\nsns.countplot(x='Category', data=df)\nplt.tight_layout()","ba00cc12":"df.isna().sum()  # no null values","f0cf48a7":"df.groupby('Category').describe()","273eb6a3":"df['Spam']=df['Category'].apply(lambda x:1 if x=='spam' else 0)\ndf.drop('Category',axis=1, inplace=True)","aff2be81":"df.head()","560f69a5":"ps = PorterStemmer()  # PortStemmer for Stemming\ncorpus = []","22cae121":"for i in range(len(df['Message'])):\n    words = re.sub('[^a-zA-z]', ' ', df['Message'][i]) # removing all special characters\n    words = words.lower()  # lowering all characters\n    words = words.split()  # spliting the sentence into words\n    # applying stemming using PortStemmer\n    words = [ps.stem(word) for word in words if word not in stopwords.words('english')]  \n    words = ' '.join(words)\n    corpus.append(words)  # appending it to a list","67af7108":"X = corpus\ny = df['Spam'] ","77c6afd2":"len(X), len(y)","2c7a2bec":"X_train, X_test,y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)","aa4a8cde":"clf = Pipeline([('Vectorizer', CountVectorizer()), ('lr', LogisticRegression())]) ","ee7e4e50":"clf.fit(X_train, y_train)","c32f58fc":"clf.score(X_test, y_test)","507cc896":"y_pred = clf.predict(X_test)","13542eed":"conf_matrix = confusion_matrix(y_test, y_pred)\nconf_matrix","49f63dbd":"print(f'The Accuracy Score is {np.round(accuracy_score(y_test, y_pred), 2)}% ') ","b121bcef":"# 99% Accuracy..","295ca7ec":"lemmatizer = WordNetLemmatizer()  # WordNetLemmatizer for lemmatization\ncorpus = []","c704ba9b":"for i in range(len(df['Message'])):\n    words = re.sub('[^a-zA-z]', ' ', df['Message'][i]) # removing all special characters\n    words = words.lower()  # lowering all characters\n    words = words.split()  # spliting the sentence into words\n    # applying lemmatization using WordNetLemmatizer\n    words = [lemmatizer.lemmatize(word) for word in words if word not in stopwords.words('english')]  \n    words = ' '.join(words)\n    corpus.append(words)  # appending it to a list","03d19f05":"X = corpus\ny = df['Spam'] ","3474d327":"len(X), len(y)","a913151b":"X_train, X_test,y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)","fc620e6e":"clf = Pipeline([('Vectorizer', CountVectorizer()), ('lr', LogisticRegression())])","e84cd1f2":"clf.fit(X_train, y_train)","52e71d7c":"clf.score(X_test, y_test)","08c341cf":"y_pred = clf.predict(X_test)","9b8fb87f":"conf_matrix = confusion_matrix(y_test, y_pred)\nconf_matrix","9b727b4b":"print(f'The Accuracy Score is {np.round(accuracy_score(y_test, y_pred), 2)}% ') ","b8cf8791":"### Thank You","3333e0a1":"#### Splitting before Transforming and fitting to avoid Overfitting","fde389ea":"#### Splitting before Transforming and fitting to avoid Overfitting","0e02678d":"### using Stemming ","01e6fe72":"### Using Lemmatization","1669798d":"#### Pipleine -  transformer (CountVectorizer\/ one hot encoder) and estimator(LogisticRegression)","dfc845c1":"\n## Data Preprocessing or Cleaning","5727afaf":"#### Pipleine -  transformer (CountVectorizer\/ one hot encoder) and estimator(LogisticRegression)"}}