{"cell_type":{"756fc119":"code","9385102d":"code","e16563ef":"code","9d917c35":"code","3371f561":"code","3fd4f8b1":"code","c39bb3c8":"code","b1e015ed":"code","419f9756":"code","5adb28ac":"code","ea91686c":"code","14a6c65d":"code","53e5c506":"code","d09f3892":"code","af247d26":"markdown","bfbd506d":"markdown","d4aabfd0":"markdown","f826ca86":"markdown","1c338edf":"markdown"},"source":{"756fc119":"# import the bigquery\nfrom google.cloud import bigquery","9385102d":"# initializing the client object\nclient = bigquery.Client()","e16563ef":"# asking client to take the reference\ndataset_ref = client.dataset('hacker_news', project = 'bigquery-public-data')\n\ndataset = client.get_dataset(dataset_ref)","9d917c35":"tables = list(client.list_tables(dataset))\n\nfor i in tables:\n    print(i.table_id)","3371f561":"# wee need only comments table\n\ntable_ref = dataset_ref.table('comments')\ntable = client.get_table(table_ref)","3fd4f8b1":"table.schema","c39bb3c8":"client.list_rows(table, max_results = 5).to_dataframe()","b1e015ed":"query = \"\"\" select parent, count(id) from `bigquery-public-data.hacker_news.comments` \n            group by parent\n            having count(id) > 10   \n         \"\"\"","419f9756":"# Set up the query (cancel the query if it would use too much of \n# your quota, with the limit set to 10 GB)\n\n# sending query to the database\n\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nquery_job = client.query(query, job_config = safe_config)\n\n\npopular_comments = query_job.to_dataframe()","5adb28ac":"popular_comments.sort_values(by = ['f0_'], ascending = False).head()","ea91686c":"query_improved = \"\"\"\n                 SELECT parent, COUNT(1) AS NumPosts\n                 FROM `bigquery-public-data.hacker_news.comments`\n                 GROUP BY parent\n                 HAVING COUNT(1) > 10\n                 \"\"\"\n\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nquery_job = client.query(query_improved, job_config=safe_config)\n\n# API request - run the query, and convert the results to a pandas DataFrame\nimproved_df = query_job.to_dataframe()\n\n# Print the first five rows of the DataFrame\nimproved_df.head()","14a6c65d":"improved_df.sort_values(by = ['NumPosts'], ascending = False).head(10)","53e5c506":"query_good = \"\"\"\n             SELECT parent, COUNT(id)\n             FROM `bigquery-public-data.hacker_news.comments`\n             GROUP BY parent\n             \"\"\"","d09f3892":"query_bad = \"\"\"\n            SELECT author, parent, COUNT(id)\n            FROM `bigquery-public-data.hacker_news.comments`\n            GROUP BY parent\n            \"\"\"","af247d26":"If make this error, you'll get the error message SELECT list expression references column (column's name) which is neither grouped nor aggregated at.","bfbd506d":"Let's use the table to see which comments generated the most replies. Since:\n\n* the parent column indicates the comment that was replied to, and\n* the id column has the unique ID used to identify each comment,\n\nwe can GROUP BY the parent column and COUNT() the id column in order to figure out the number of comments that were made as responses to a specific comment. (This might not make sense immediately -- take your time here to ensure that everything is clear!)\n\nFurthermore, since we're only interested in popular comments, we'll look at comments with more than ten replies. So, we'll only return groups HAVING more than ten ID's.","d4aabfd0":"## Note on using GROUP BY","f826ca86":"Note that because it tells SQL how to apply aggregate functions (like COUNT()), it doesn't make sense to use GROUP BY without an aggregate function. Similarly, if you have any GROUP BY clause, then all variables must be passed to either a\n\n* GROUP BY command, or\n* an aggregation function.\n\nConsider the query below:","1c338edf":"Note that there are two variables: parent and id.\n\n* parent was passed to a GROUP BY command (in GROUP BY parent), and\n* id was passed to an aggregate function (in COUNT(id)).\n\nAnd this query won't work, because the author column isn't passed to an aggregate function or a GROUP BY clause:"}}