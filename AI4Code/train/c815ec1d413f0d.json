{"cell_type":{"0c5abb21":"code","237f7a70":"code","385cc827":"code","f3dcd369":"code","8665b46c":"code","885c1ec6":"code","6e61caaa":"code","c0565dc6":"code","7ca85cec":"code","470987a3":"code","7394f29f":"code","a82f647a":"markdown","6342490e":"markdown","92cf2115":"markdown","4b467f00":"markdown","a3db3a08":"markdown","69b52f50":"markdown","8f669086":"markdown","41e6b14f":"markdown","f1eebcd3":"markdown","990edfe6":"markdown","a6ebfc24":"markdown","d515733e":"markdown","928a5543":"markdown"},"source":{"0c5abb21":"\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\nfrom keras.preprocessing.image import ImageDataGenerator     # for images\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n%config Completer.use_jedi = False\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","237f7a70":"train_datagen = ImageDataGenerator(\n        rescale=1.\/255,\n        shear_range=0.2,\n        zoom_range=0.2,\n        horizontal_flip=True)\ntraining_set = train_datagen.flow_from_directory(\n        '..\/input\/cat-and-dog\/training_set\/training_set',\n        target_size=(64, 64),\n        batch_size=32,\n        class_mode='binary')","385cc827":"test_datagen = ImageDataGenerator(rescale=1.\/255)\ntest_set= test_datagen.flow_from_directory(\n        '..\/input\/cat-and-dog\/test_set\/test_set',\n        target_size=(64, 64),\n        batch_size=32,\n        class_mode='binary')","f3dcd369":"# Initialising the CNN with cnn variable\ncnn = tf.keras.models.Sequential()\n\n#step1: Convolution Layer\ncnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu',input_shape=[64,64,3]))","8665b46c":"cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))","885c1ec6":"cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu'))\ncnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))","6e61caaa":"cnn.add(tf.keras.layers.Flatten())","c0565dc6":"cnn.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))","7ca85cec":"#compiling cnn\ncnn.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])\n\n#trining the cnn on training set and evaluating it on test set\ncnn.fit(x=training_set, validation_data=test_set, epochs=25)","470987a3":"training_set.class_indices","7394f29f":"from keras.preprocessing import image\ntest_image = image.load_img('..\/input\/cat-and-dog\/test_set\/test_set\/dogs\/dog.4022.jpg', target_size=(64,64))\ntest_image = image.img_to_array(test_image)\ntest_image = np.expand_dims(test_image, axis=0)\nresult = cnn.predict(test_image)\n\nif result[0][0] >0.5:\n    prediction = 'dog'\nelse:\n    prediction = 'cat'\n    \nprint(prediction)","a82f647a":"` THats COOL `\n\n**Thank You**","6342490e":"# Part 4 Making a Prediction","92cf2115":"### Second Conv Layer","4b467f00":"\"USE KERAS FOR THIS\"\n### Preprocessing the Training Set\n- Apply some transformation to avoid overfitting\n- Apply some geometrical transformation and then apply some rotation or zoom in zoom out ie `Image Augmentation`","a3db3a08":"### Preprocessing the test set","69b52f50":"### step2: Pooling\n\n\" We will apply Max Pooling Layer \"","8f669086":"### IMporting Libraies","41e6b14f":"### Step3: Flatenning","f1eebcd3":"### Step4: Full Connection","990edfe6":"# 2. Building the CNN","a6ebfc24":"In this NoteBook we will Implement a CNN MODEL USING TENSORFLOW to classify `Dogs` and `Cats`","d515733e":"# 1. Data Preprocessing","928a5543":"# Part 3: Training The CNN"}}