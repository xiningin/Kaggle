{"cell_type":{"ba981dbf":"code","565005bc":"code","2edeb910":"code","c2a3bcf2":"code","3bc00768":"markdown","1be248f2":"markdown","b32f1917":"markdown","137b677c":"markdown"},"source":{"ba981dbf":"from google.cloud import bigquery\n\n# Create a \"Client\" object\nclient = bigquery.Client()\n\n# Construct a reference to the \"stackoverflow\" dataset\ndataset_ref = client.dataset(\"stackoverflow\", project=\"bigquery-public-data\")\n\n# API request - fetch the dataset\ndataset = client.get_dataset(dataset_ref)\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport pandas as pd","565005bc":"tags_query = \"\"\"\n                SELECT\n                tag_name,\n                COUNT(q.id) AS Number_of_Questions,\n                AVG (u.reputation) AS avg_reputation,\n                SUM (u.reputation) AS sum_reputation\n                    FROM \n                        `bigquery-public-data.stackoverflow.tags` AS t\n                    INNER JOIN\n                        `bigquery-public-data.stackoverflow.posts_questions` AS q\n                    ON t.tag_name = q.tags\n                    INNER JOIN\n                        `bigquery-public-data.stackoverflow.users` AS u\n                    ON q.owner_user_id = u.id\n                    WHERE q.creation_date >= '2021-01-01' # Can be adjusted to your needs!\n                    GROUP BY tag_name\n                    HAVING Number_of_Questions > 500 # Adjust to your taste\n                    ORDER BY sum_reputation DESC\n                    \"\"\"\ntags = client.query(tags_query).result().to_dataframe()","2edeb910":"# Change display format to remove all digits after the decimal point\n\npd.options.display.float_format = '{:,.0f}'.format\ntags","c2a3bcf2":"# As values in 'Number_of_Questions' and 'avg_reputation' are much smaller than 'sum_reputation'\n# we need to multiply them by 1000 to make visible on the same plot\n\ntags_to_plot = tags\n\ntags_to_plot[\"tag_name\"] = tags[\"tag_name\"]\ntags_to_plot[\"Number_of_Questions\"] = tags[\"Number_of_Questions\"] * 1000\ntags_to_plot[\"avg_reputation\"] = tags[\"avg_reputation\"] * 1000\ntags_to_plot[\"sum_reputation\"] = tags[\"sum_reputation\"]\n\nimport matplotlib.pyplot as plt\n\nplt.rcParams[\"figure.figsize\"] = (18, 5)\n\ntags_to_plot.plot.bar(x='tag_name', rot=90)","3bc00768":"If you like this notebook, you may also like\n* [Titanic: Decision Tree Explained](https:\/\/www.kaggle.com\/sergejnuss\/titanic-decision-tree-explained)\n* [Hacker News: Domination & Bias](https:\/\/www.kaggle.com\/sergejnuss\/hacker-news-domination-bias)\n* [Stack Overflow: Who can help with SQL & Python?](https:\/\/www.kaggle.com\/sergejnuss\/stack-overflow-who-can-help-with-sql-python)","1be248f2":"We see that questions on [TypeScript](https:\/\/stackoverflow.com\/questions\/tagged\/typescript) has the highest sum of reputations and questions on [Python](https:\/\/stackoverflow.com\/questions\/tagged\/python) were the most frequent.","b32f1917":"What are **hot topics** on Stack Overflow? What values display the hotness? Can it be **tags on questions**? Does a reputation of an asking user tell us something about his **experience and qualification**? I created an SQL-query which displays a tag, a number of questions with this tag, an average reputation of users who asked questions with this tag and the sum of all reputations of users asking questions with this tag.\n\nThe idea is that **tags with the highest sum of user reputations can be considered the hottest topics on Stack Overflow** because not only there are many questions to this particular subject, but users asking these questions are relatively experienced and qualified.","137b677c":"![](https:\/\/images.unsplash.com\/photo-1596577843272-67744c9d0e4f?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80)"}}