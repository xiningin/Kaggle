{"cell_type":{"ca295605":"code","a827fd81":"code","e47ab632":"code","480c1919":"code","69c1c0a2":"code","fbd4f8da":"code","933e43e9":"code","f9b7abd9":"code","ac20b871":"code","7d359c62":"code","f025488a":"code","375fe7c5":"markdown","46fd6e93":"markdown","12d04226":"markdown","9ecfe970":"markdown","9dbe08b3":"markdown","8c4d90f3":"markdown","5bc1d067":"markdown","dd6b7ded":"markdown","1408f129":"markdown","5d1e8daa":"markdown","13ac4434":"markdown","dac14ffb":"markdown","7b6f6ca0":"markdown","ce716fd7":"markdown","1a241337":"markdown","62562aab":"markdown","abb14863":"markdown","23bb5cb0":"markdown","792641a5":"markdown","0c9e95cc":"markdown"},"source":{"ca295605":"!cp ..\/input\/pe-models\/gdcm.tar .\n!tar -xvzf gdcm.tar\n!conda install --offline .\/gdcm\/gdcm-2.8.9-py37h71b2a6d_0.tar.bz2\nprint(\"done\")","a827fd81":"from fastai.torch_core import set_seed\nfrom fastai.vision.all import *\nfrom fastai.medical.imaging import *\nfrom torchvision.utils import save_image\n\nimport gdcm\nmatplotlib.rcParams['image.cmap'] = 'bone'","e47ab632":"!cp -r ..\/input\/fmipackage\/fmi-master\/* .\/","480c1919":"from fmi.explore import *\nfrom fmi.preprocessing import *\nfrom fmi.pipeline import *","69c1c0a2":"source = '..\/input\/osic-pulmonary-fibrosis-progression'\ntrain_source = '..\/input\/osic-pulmonary-fibrosis-progression\/train'\nos_items = get_dicom_files(source, folders='train')\nos_items","fbd4f8da":"dicom_dataframe = pd.DataFrame.from_dicoms2(os_items, windows=dicom_windows.lungs)","933e43e9":"dicom_dataframe.head()","f9b7abd9":"dicom_dataframe.to_csv('dicom_dataframe.csv', index=False)","ac20b871":"dicom_dataframe = pd.read_csv('..\/input\/pct-5\/dicom_dataframe.csv', low_memory=False)","7d359c62":"sort_w5 = dicom_dataframe.sort_values(['img_pct_window'],ascending=False).groupby('PatientID').head(5)\nsort_w5","f025488a":"sort_w5.to_csv('sort_w5.csv', index=False)","375fe7c5":"Load `gdcm` library - use `pe-models` database to access gdcm.tar file","46fd6e93":"save the dataframe","12d04226":"![dataframe.PNG](attachment:dataframe.PNG)","9ecfe970":"The new dataframe now only contains 880 entires sorted by the top 5 `img_pct_window` values for each patient.  The `img_pct_window` value depends on the window width and level chosen when using `from_dicoms2`","9dbe08b3":"- Create a dicom metadata dataframe from the images (using from_dicoms2)\n\n- Within each folder(which represents each patient) we will choose 5 images that represent the best representation of the patient based on what window level and width","8c4d90f3":"Currently the `fmi` package is still under construction and not pip installable. Instead install via the `fmipackage` dataset","5bc1d067":"## Dependancies","dd6b7ded":"`fastai` provides a very convenient way of getting all the dicom metadata and display it as a dataframe.  This works in parallel and is very quick.  The `fmi` library has a slightly updated version `from_dicoms2` which allows you to specify the value of `dicom_windows`.","1408f129":"One of the issues with dicom datasets can be the sheer number of images, in this dataset there are over 33000 images.  Where does one start to get a quick and decent baseline?","5d1e8daa":"## Top 5 DataFrame and Dataset","13ac4434":"For more about the `fmi` library: [view on Github](https:\/\/github.com\/asvcode\/fmi)","dac14ffb":"## Goal","7b6f6ca0":"> Creating the dataframe could take a while depending on the size of the database.  For convenience the dicom_datframe is provided in the 'pct_5' dataset","ce716fd7":"Sort the values by `img_pct_window` and then group them by `PatientID`","1a241337":"There are currently `33026` images in this dataset.  It is important to drastically reduce this amout during the exploration stage. One way to do this is to only include images with the highest `img_pct_window` as specified by the window width and level.","62562aab":"import libraries","abb14863":"One of the advantages of dicoms is that they contain a vast amount of metadata.  If you want to learn more about dicoms and medical imaging you can view my [blog](https:\/\/asvcode.github.io\/MedicalImaging\/) for more information","23bb5cb0":"You can now save the new dataframe for later tasks","792641a5":"Here we create a dataframe which will include all the information contained in the head of the dicom as well as the max, min, mean and standard deviation of each image.  The dataframe will also contain the percentage of pixels in the chosen window (width and level).  Here we use the `lungs` window","0c9e95cc":"This tutorial refers to using the `fmi` library which can be found [here](https:\/\/github.com\/asvcode\/fmi) and the [fastai](https:\/\/github.com\/fastai) medical imaging module"}}