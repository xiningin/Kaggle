{"cell_type":{"fc93c4cd":"code","69232021":"code","fe0e6654":"code","5e0a5f92":"code","a1a0d15c":"code","0320c23c":"code","cc3fed0e":"code","bbc67f00":"code","7e7e2862":"code","4114c821":"code","122e1c49":"code","b9ed5115":"code","ee953a6b":"code","96b9df6e":"code","64112dd1":"code","3ead91a8":"code","fd4783bb":"code","c4f4367f":"code","049c88c3":"code","0416faba":"code","3f78c179":"code","e6790861":"markdown","28395844":"markdown"},"source":{"fc93c4cd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","69232021":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()","fe0e6654":"train = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest= pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\n\nprint(train.shape)\nprint(test.shape)\n\n","5e0a5f92":"x_train = train.drop(labels = [\"label\"],axis = 1) \ny_train = train[\"label\"]\n\nprint(x_train.shape)\nprint(y_train.shape)\n","a1a0d15c":"\nplt.figure(figsize=(15,7))\n\nsns.countplot(y_train)\nplt.title(\"Number of digit classes\")\nplt.xlabel(\"classes\")\nplt.ylabel(\"numbers\")\nprint(y_train.value_counts())\nplt.show()","0320c23c":"# Images from the dataset\n\nplt.subplot(2,2,1)\nimg = x_train.iloc[5000].values\nimg = img.reshape((28,28))\nplt.imshow(img,cmap='gray')\nplt.title(x_train.iloc[5000,0])\nplt.axis(\"off\")\nplt.colorbar()\n\nplt.subplot(2,2,2)\nimg = x_train.iloc[10000].values\nimg = img.reshape((28,28))\nplt.imshow(img,cmap='gray')\nplt.title(x_train.iloc[10000,0])\nplt.axis(\"off\")\nplt.colorbar()\n\n\nplt.subplot(2,2,3)\nimg = x_train.iloc[12000].values\nimg = img.reshape((28,28))\nplt.imshow(img,cmap='gray')\nplt.title(x_train.iloc[12000,0])\nplt.axis(\"off\")\nplt.colorbar()\n\nplt.subplot(2,2,4)\nimg = x_train.iloc[525].values\nimg = img.reshape((28,28))\nplt.imshow(img,cmap='gray')\nplt.title(x_train.iloc[525,0])\nplt.axis(\"off\")\nplt.colorbar()\nplt.show()","cc3fed0e":"# Normalization\n\nx_train= x_train\/ 255\n\ntest= test\/ 255\n\n# Reshape\n\nx_train= x_train.values.reshape(-1,28,28,1)\n\ntest= test.values.reshape(-1,28,28,1)\n\nprint( \"x_train.shape: \", x_train.shape)\nprint( \"test shape: \", test.shape)\n\n\n\n","bbc67f00":"#Label Encoding\n\nfrom tensorflow.keras.utils import to_categorical\ny_train = to_categorical(y_train, num_classes=10)","7e7e2862":"from sklearn.model_selection import train_test_split\nX_train, X_val, Y_train, Y_val = train_test_split(x_train, y_train, test_size=0.1, random_state=100)\n\nprint(\"x_train shape :\", X_train.shape)\nprint(\"x_val shape :\", X_val.shape)\nprint(\"y_train shape :\", Y_train.shape)\nprint(\"y_val shape :\", Y_val.shape)\n\n","4114c821":"#import\n\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom sklearn.model_selection import cross_val_score\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Conv2D, MaxPool2D, Flatten\nfrom tensorflow.keras.optimizers import RMSprop, Adam\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau\n\n","122e1c49":"#model creating\n\nmodel= Sequential()\n\n# Convolutional layer 1\n\nmodel.add(Conv2D(filters=8, kernel_size=(5,5), padding =\"Same\", activation= \"relu\", input_shape=(28,28,1)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n# Convolutional Layer 2\n\nmodel.add(Conv2D(filters=16, kernel_size=(3,3), padding =\"Same\", activation= \"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2), strides= (2,2)))\nmodel.add(Dropout(0.25))\n\n# Convolutional Layer 3\n\nmodel.add(Conv2D(filters=16, kernel_size=(3,3), padding =\"Same\", activation= \"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2), strides= (2,2)))\nmodel.add(Dropout(0.25))\n\n# Fully Connected Layers\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation= \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(128, activation= \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation= \"softmax\"))\n","b9ed5115":"#Adam Optimizer\n\noptimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999)","ee953a6b":"#Compile \n\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","96b9df6e":"#Epoch and Batchsize\n\nepochs=100\nbatch_size=250","64112dd1":"# Data Augmentation\n\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # dimesion reduction\n        rotation_range=5,  # randomly rotate images in the range 5 degrees\n        zoom_range = 0.1, # Randomly zoom image 10%\n        width_shift_range=0.1,  # randomly shift images horizontally 10%\n        height_shift_range=0.1,  # randomly shift images vertically 10%\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\ndatagen.fit(X_train)","3ead91a8":"# Fit the model\n\nhistory = model.fit_generator(datagen.flow(x_train,y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_val,Y_val), steps_per_epoch=X_train.shape[0] \/\/ batch_size)\n","fd4783bb":"model.save('.\/my_model.h5')","c4f4367f":"plt.plot(history.history[\"val_loss\"], color=\"g\", label=\"Validation loss\")\nplt.title(\"Validation loss\")\nplt.xlabel(\"Number of Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.show()","049c88c3":"Y_pred = model.predict(X_val)\n\nY_pred_classes =np.argmax(Y_pred, axis=1)\n\nY_true= np.argmax(Y_val, axis=1)\n\nconfusion_m= confusion_matrix(Y_true, Y_pred_classes)\n\nf, ax = plt.subplots(figsize=(8,8))\n\nsns.heatmap(confusion_m, annot=True, linewidths=0.01,cmap=\"Greens\",linecolor=\"gray\", fmt= '.1f',ax=ax)\n\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()\n\n","0416faba":"results = model.predict(test)\n\n# select the indix with the maximum probability\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")\n\n","3f78c179":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"cnn_mnist_datagen.csv\",index=False)","e6790861":"# Convolutional Neural Network\n","28395844":"# Datasets"}}