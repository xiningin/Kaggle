{"cell_type":{"deef7205":"code","4ef00b25":"code","09be151e":"code","13ca0051":"code","c9937747":"code","d3487adb":"code","53dce38b":"code","e15da390":"code","580432ac":"code","76e6d51b":"code","419e1e05":"code","ca740c50":"code","1cc4b3f4":"code","03713cd6":"code","c7729fa1":"code","a46c8811":"code","dab50b29":"code","92b46321":"code","98b49f68":"code","5b2b562d":"code","05a66c68":"code","ede80bd1":"code","c7f29ddb":"code","6de36f1c":"code","2f4e19b1":"markdown","3699b87b":"markdown","6c8f6638":"markdown","e9cc8afd":"markdown","9dd797ee":"markdown","b67d64fd":"markdown","db330453":"markdown","c5f77075":"markdown","52e1569f":"markdown","6674252b":"markdown","0afa949b":"markdown","56aed271":"markdown"},"source":{"deef7205":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn.metrics import mean_absolute_error as MAE\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\n\n%matplotlib inline\nimport matplotlib.pyplot as plt # Data visualization\n\nimport seaborn as sns","4ef00b25":"train = pd.read_csv('..\/input\/home-data-for-ml-course\/train.csv')\ntest = pd.read_csv('..\/input\/home-data-for-ml-course\/test.csv')\n\nprint('Data shape  (row, col)')\nprint('Train Data:', train.shape)\nprint('Test Data: ', test.shape)","09be151e":"train.head()","13ca0051":"target = train.SalePrice","c9937747":"numeric_features = train.select_dtypes(include=[np.number])\nnumeric_features.info()","d3487adb":"numeric_features.describe()","53dce38b":"corr = numeric_features.corr()\nprint(corr['SalePrice'].sort_values(ascending=False)[:10], '\\n')\nprint(corr['SalePrice'].sort_values(ascending=False)[:-5])\n# should this be used after handling the skewness ?","e15da390":"train.OverallQual.unique()","580432ac":"# Relation between qualty and sale price median\nquality_pivot = train.pivot_table(index = 'OverallQual', values = \"SalePrice\", aggfunc = np.median)","76e6d51b":"quality_pivot.plot(kind = 'bar', color = '#f44336')\nplt.xlabel('Overall Quality')\nplt.ylabel(\"Sale price\")","419e1e05":"plt.scatter(x=train['GrLivArea'], y=target)\nplt.ylabel(\"Sale Price\")\nplt.xlabel(\"Ground Living Area\")\n# plt.figure(figsize=(16, 8))","ca740c50":"# Mapping price vs Lotfrontage\nsns.scatterplot(x='LotFrontage', y='SalePrice', data=train);\nplt.title('House price versus lot frontage size');\n\n# plt.figure(figsize=(16, 8))\n# plt.subplot(1, 2, 1)\n# plt.scatter(train['LotFrontage'], train['SalePrice'])\n# plt.title('House price versus lot frontage size')","1cc4b3f4":"categ_features = train.select_dtypes(exclude = [np.number])\ncateg_features.describe()","03713cd6":"print(train.SaleCondition.unique())","c7729fa1":"# Pivot table for the sale condition values occurance\nsale_condition_pivot =  train.pivot_table(index = 'SaleCondition', values = 'SalePrice', aggfunc = np.median)\nsale_condition_pivot.plot(kind = 'bar', color = '#f44336')\nplt.xlabel('Sale Condition')\nplt.ylabel(\"Sale price\")","a46c8811":"def encode(x):\n    return 1 if x == 'Partial' else 0\ntrain['enc_saleCondition'] = train.SaleCondition.apply(encode)\ntest['enc_saleCondition'] = test.SaleCondition.apply(encode)","dab50b29":"# Pivot table for the new encoded sale condition values occurance\nsale_condition_pivot =  train.pivot_table(index = 'enc_saleCondition', values = 'SalePrice', aggfunc = np.median)\nsale_condition_pivot.plot(kind = 'bar', color = '#f44336')\nplt.xlabel('Sale Condition')\nplt.ylabel(\"Sale price\")","92b46321":"# Visualizing missing values in train and test sets\nwith sns.axes_style(style= \"whitegrid\"):    \n    for dataset in [\"train\", \"test\"]:\n        fig, ax = plt.subplots(1, 1, figsize=(18, 10))\n        bar = eval(dataset).isna().sum().plot(kind = \"bar\")\n        bar.set_title(f\"No. of missing values in {dataset}\", fontsize = 17)","98b49f68":"# Drop columns with many missing values and \ntrain.drop(['Alley','FireplaceQu', 'PoolQC', 'Fence', 'MiscFeature'],axis=1,inplace=True)\ntest.drop(['Alley','FireplaceQu', 'PoolQC', 'Fence', 'MiscFeature'],axis=1,inplace=True)","5b2b562d":"# look for columns with null values\ndata = train.select_dtypes(include=[np.number]).interpolate().dropna()\nsum(data.isnull().sum() != 0)","05a66c68":"# Impute missing LotFrontage values with Median\ntrain['LotFrontage'] = train['LotFrontage'].replace(np.NaN, train['LotFrontage'].median()) # Mean will be affected by scattered outliers\ntest['LotFrontage'] = test['LotFrontage'].replace(np.NaN, test['LotFrontage'].median())\n\ntrain['GarageCars'] = train['GarageCars'].replace(np.NaN, train['GarageCars'].median())\ntest['GarageArea'] = test['GarageArea'].replace(np.NaN, test['GarageArea'].median())","ede80bd1":"y = train.SalePrice\nX = data.drop(['SalePrice', 'Id'], axis=1)\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, random_state=42, test_size=.2)","c7f29ddb":"#test model on validation set\nforest_model = RandomForestRegressor(random_state = 42, max_depth=10, n_estimators = 1000)\nforest_model.fit(X_train,y_train)\n\nprediction = forest_model.predict(X_val)\n\nprint('Mean Absolute Error: ', MAE(y_val, prediction))\nprint('Model Score: ', forest_model.score(X_val, y_val))","6de36f1c":"submission = pd.DataFrame()\nsubmission['Id'] = test.Id\n\nfeats = test.select_dtypes(include=[np.number]).drop(['Id'], axis=1).interpolate()\n\nprediction = forest_model.predict(feats)\nsubmission['SalePrice'] = prediction\nsubmission.to_csv('submission1.csv', index=False)","2f4e19b1":"Partial value has higer frequency than the other values so we give it higher rank.","3699b87b":"separate features and target variables, split the train data into train and validate.\n","6c8f6638":"# Data Cleaning\nRemove non-numeric values and handle missing data.","e9cc8afd":"# Handling Numeric Features","9dd797ee":"Start by converting -hmmm 1 value?- to a numeric dummy value. ","b67d64fd":"Examine the correlation between the features and the target","db330453":"# Handling Non-Numeric Features","c5f77075":"# Modeling","52e1569f":"The higher the above ground living area, the higher the sale price.","6674252b":"Random Forest Regressor","0afa949b":"Overall quality affects price highly, \nwe can draw a pivot table to find more about the relation.","56aed271":"Now we are mapping the Ground Living Area values"}}