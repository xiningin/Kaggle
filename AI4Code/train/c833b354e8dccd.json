{"cell_type":{"590a5b14":"code","b8c4dadf":"code","279c86e3":"code","aa99db3a":"code","9adda793":"code","4b957fae":"code","73cab9fc":"code","c98301de":"code","4a46f6c8":"code","1121cf80":"code","6e711293":"code","63a69981":"code","d87ab2b3":"code","d35ce85e":"code","fa0a1301":"code","a2ed9bbd":"code","58880248":"code","2ea2604a":"code","1009d9b7":"markdown","e19ef038":"markdown","a11441f9":"markdown","f06dbbee":"markdown","fa4d0dd5":"markdown","4899958e":"markdown","4606cc2b":"markdown","ae56654b":"markdown","d68940fa":"markdown","339174b3":"markdown","c0f8cdd7":"markdown","fa623dd6":"markdown","10829198":"markdown","33b9d87d":"markdown","dfa75caf":"markdown","965d3d93":"markdown","ab9d2832":"markdown","81c3b46c":"markdown","b4770712":"markdown","48cc27d6":"markdown","03e786dd":"markdown","a490d4c1":"markdown"},"source":{"590a5b14":"spam_amount=0\nprint(spam_amount)\nspam_amount=spam_amount+4\n\nif spam_amount>0:\n    print(\"i do not want any spam\")\nviking_song=\"spam  \" * 4\nprint(viking_song)","b8c4dadf":"spam_amount = 0","279c86e3":"print(spam_amount)","aa99db3a":"# Ordering Spam, egg, Spam, Spam, bacon and Spam (4 more servings of Spam)\nspam_amount = spam_amount + 4","9adda793":"if spam_amount > 0:\n    print(\"But I don't want ANY spam!\")\n\nviking_song = \"Spam Spam Spam\"\nprint(viking_song)","4b957fae":"viking_song = \"Spam \" * spam_amount\nprint(viking_song)","73cab9fc":"spam_amount = 0","c98301de":"type(spam_amount)","4a46f6c8":"type(19.95)","1121cf80":"print(5 \/ 2)\nprint(6 \/ 2)","6e711293":"print(5 \/\/ 2)\nprint(6 \/\/ 2)","63a69981":"8 - 3 + 2","d87ab2b3":"-3 + 4 * 2","d35ce85e":"hat_height_cm = 25\nmy_height_cm = 190\n# How tall am I, in meters, when wearing my hat?\ntotal_height_meters = hat_height_cm + my_height_cm \/ 100\nprint(\"Height in meters =\", total_height_meters, \"?\")","fa0a1301":"total_height_meters = (hat_height_cm + my_height_cm) \/ 100\nprint(\"Height in meters =\", total_height_meters)","a2ed9bbd":"print(min(1, 2, 3))\nprint(max(1, 2, 3))","58880248":"print(abs(32))\nprint(abs(-32))","2ea2604a":"print(float(10))\nprint(int(3.33))\n# They can even be called on strings!\nprint(int('807') + 1)","1009d9b7":"### Order of operations\n\nThe arithmetic we learned in primary school has conventions about the order in which operations are evaluated. Some remember these by a mnemonic such as **PEMDAS** - **P**arentheses, **E**xponents, **M**ultiplication\/**D**ivision, **A**ddition\/**S**ubtraction.\n\nPython follows similar rules about which calculations to perform first. They're mostly pretty intuitive.","e19ef038":"Sometimes the default order of operations isn't what we want:","a11441f9":"# Hello, Python!\n\nPython was named for the British comedy troupe [Monty Python](https:\/\/en.wikipedia.org\/wiki\/Monty_Python), so we'll make our first Python program a homage to their skit about Spam.\n\nJust for fun, try reading over the code below and predicting what it's going to do when run. (If you have no idea, that's fine!)\n\nThen click the \"output\" button to see the results of our program.","f06dbbee":"---\n\n\n\n\n*Have questions or comments? Visit the [Learn Discussion forum](https:\/\/www.kaggle.com\/learn-forum\/161283) to chat with other Learners.*","fa4d0dd5":"Can you think of where this would be useful? You'll see an example soon in the coding challenges.","4899958e":"It's an `int` - short for integer. There's another sort of number we commonly encounter in Python:","4606cc2b":"**Function calls:**. `print` is a Python function that displays the value passed to it on the screen. We call functions by putting parentheses after their name, and putting the inputs (or *arguments*) to the function in those parentheses.","ae56654b":"**Variable assignment:** Here we create a variable called `spam_amount` and assign it the value of 0 using `=`, which is called the assignment operator.\n\n> **Aside**: If you've programmed in certain other languages (like Java or C++), you might be noticing some things Python *doesn't* require us to do here:  \n- we don't need to \"declare\" `spam_amount` before assigning to it\n- we don't need to tell Python what type of value `spam_amount` is going to refer to. In fact, we can even go on to reassign `spam_amount` to refer to a different sort of thing like a string or a boolean.","d68940fa":"A natural thing to want to do with numbers is perform arithmetic. We've seen the `+` operator for addition, and the `*` operator for multiplication. Python also has us covered for the rest of the basic buttons on your calculator:\n\n| Operator     | Name           | Description                                            |\n|--------------|----------------|--------------------------------------------------------|\n| ``a + b``    | Addition       | Sum of ``a`` and ``b``                                 |\n| ``a - b``    | Subtraction    | Difference of ``a`` and ``b``                          |\n| ``a * b``    | Multiplication | Product of ``a`` and ``b``                             |\n| ``a \/ b``    | True division  | Quotient of ``a`` and ``b``                            |\n| ``a \/\/ b``   | Floor division | Quotient of ``a`` and ``b``, removing fractional parts |\n| ``a % b``    | Modulus        | Integer remainder after division of ``a`` by ``b``     |\n| ``a ** b``   | Exponentiation | ``a`` raised to the power of ``b``                     |\n| ``-a``       | Negation       | The negative of ``a``                                  |\n\n<span style=\"display:none\"><\/span>\n\nOne interesting observation here is that, whereas your calculator probably just has one button for division, Python can do two kinds. \"True division\" is basically what your calculator does:","339174b3":"A `float` is a number with a decimal place - very useful for representing things like weights or proportions.\n\n`type()` is the second built-in function we've seen (after `print()`), and it's another good one to remember. It's very useful to be able to ask Python \"what kind of thing is this?\". ","c0f8cdd7":"### Builtin functions for working with numbers\n\n`min` and `max` return the minimum and maximum of their arguments, respectively...","fa623dd6":"The first line above is a **comment**. In Python, comments begin with the `#` symbol.\n\nNext we see an example of reassignment. Reassigning the value of an existing variable looks just the same as creating a variable - it still uses the `=` assignment operator.\n\nIn this case, the value we're assigning to `spam_amount` involves some simple arithmetic on its previous value. When it encounters this line, Python evaluates the expression on the right-hand-side of the `=` (0 + 4 = 4), and then assigns that value to the variable on the left-hand-side.","10829198":"## Numbers and arithmetic in Python\n\nWe've already seen an example of a variable containing a number above:","33b9d87d":"Parentheses are useful here. You can add them to force Python to evaluate sub-expressions in whatever order you want.","dfa75caf":"`abs` returns the absolute value of an argument:","965d3d93":"# Your Turn\n\nNow is your chance. Try your **[first Python programming exercise](https:\/\/www.kaggle.com\/kernels\/fork\/1275163)**!","ab9d2832":"There's a lot to unpack here! This silly program demonstrates many important aspects of what Python code looks like and how it works. Let's review the code from top to bottom.","81c3b46c":"This course covers the key Python skills you\u2019ll need so you can start using Python for data science. \n\nWe'll start with a brief overview of Python syntax, variable assignment, and arithmetic operators. If you have previous Python experience, you can [skip straight to the hands-on exercise](https:\/\/www.kaggle.com\/kernels\/fork\/1275163).","b4770712":"It always gives us a `float`. \n\nThe `\/\/` operator gives us a result that's rounded down to the next integer.","48cc27d6":"The `*` operator can be used to multiply two numbers (`3 * 3` evaluates to 9), but we can also multiply a string by a number, to get a version that's been repeated that many times. Python offers a number of cheeky little time-saving tricks like this where operators like `*` and `+` have a different meaning depending on what kind of thing they're applied to. (The technical term for this is [operator overloading](https:\/\/en.wikipedia.org\/wiki\/Operator_overloading).)","03e786dd":"\"Number\" is a fine informal name for the kind of thing, but if we wanted to be more technical, we could ask Python how it would describe the type of thing that `spam_amount` is:","a490d4c1":"In addition to being the names of Python's two main numerical types, `int` and `float` can also be called as functions which convert their arguments to the corresponding type:"}}