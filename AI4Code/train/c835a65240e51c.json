{"cell_type":{"3963ad47":"code","b39fdd14":"code","b53d4372":"code","b0a42848":"code","ad80e89a":"code","5ece4cb4":"code","646862ae":"code","d9998ccb":"code","6ab09606":"code","8bfa239f":"code","f50c2161":"code","e9e86a19":"code","4dca3218":"code","ee877ecf":"code","8db4f1be":"code","50a459cf":"code","50730e3d":"code","3f552481":"code","d8879b7d":"code","8db2aebc":"code","8e6dc6db":"code","55c77a82":"code","d16be527":"code","5e3571d5":"code","1e4bd2e2":"code","87f92c9c":"code","17307a91":"code","ec1fa88f":"code","406237d4":"code","f606c8ca":"code","0d82aacd":"code","00646258":"code","883da2ef":"markdown","4ca34c15":"markdown","7035ef26":"markdown","55552d8d":"markdown","8c65c0ea":"markdown","70975503":"markdown","c4f9c132":"markdown","19627428":"markdown","dca4909e":"markdown","2822808a":"markdown"},"source":{"3963ad47":"import dask\nimport dask.dataframe as dd\n\nimport plotly.express as px\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport gc\nimport numpy as np\n\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport cufflinks as cf\ninit_notebook_mode(connected=True)\ncf.go_offline()\n\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go","b39fdd14":"calendar = dd.read_csv(\"..\/input\/m5-forecasting-accuracy\/calendar.csv\")\nsales_train_validation = dd.read_csv(\"..\/input\/m5-forecasting-accuracy\/sales_train_validation.csv\")\nsample_submission = dd.read_csv(\"..\/input\/m5-forecasting-accuracy\/sample_submission.csv\")\nsell_prices = dd.read_csv(\"..\/input\/m5-forecasting-accuracy\/sell_prices.csv\")\n\nsales_train_validation = dd.melt(sales_train_validation,id_vars=['id','item_id','dept_id','cat_id','store_id','state_id'],var_name='day',value_name='demand')","b53d4372":"item_demand = sales_train_validation.groupby('item_id').sum().compute().sort_values(by='demand',ascending=False)[:50].reset_index()\nstate_demand = sales_train_validation.groupby('state_id').sum().compute().sort_values(by='demand',ascending=False).reset_index()\ncat_demand = sales_train_validation.groupby('cat_id').sum().compute().sort_values(by='demand',ascending=False).reset_index()\ndept_demand = sales_train_validation.groupby('dept_id').sum().compute().sort_values(by='demand',ascending=False).reset_index()","b0a42848":"fig = make_subplots(rows=2, cols=2,subplot_titles=['cat_demand','state_demand','cat_demand,item_demand','dept_demand'])\nfig.add_trace(go.Bar(x=item_demand.item_id, y=item_demand.demand),row=2, col=1)\nfig.add_trace(go.Bar(x=state_demand.state_id, y=item_demand.demand),row=1, col=2)\nfig.add_trace(go.Bar(x=cat_demand.cat_id, y=item_demand.demand),row=1, col=1)\nfig.add_trace(go.Bar(x=dept_demand.dept_id, y=item_demand.demand),row=2, col=2)\nfig.update_layout(\n    title_text=\"Plots\",\n     title_font_size=30,\n    autosize=False,\n    margin=dict(l=50,r=50,b=100,t=100,pad=4),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.update_xaxes(automargin=True)","ad80e89a":"del item_demand,state_demand,cat_demand,dept_demand\ngc.collect()","5ece4cb4":"department_id = ['FOODS_3','FOODS_2','FOODS_1','HOUSEHOLD_1','HOUSEHOLD_2','HOBBIES_1','HOBBIES_2']\ndept_over_days_demand = {}\nfor i in department_id:\n    dept_over_days_demand[i] = sales_train_validation[sales_train_validation.dept_id==i].groupby('day').demand.sum().compute()\nfor i in department_id:\n    f = dept_over_days_demand[i].reset_index()\n    f['day']=f.day.apply(lambda x: x.split('_')[1]).astype('int')\n    f = f.sort_values(by=['day']).set_index('day')\n    dept_over_days_demand[i] = f","646862ae":"def c_reset_index(dic):\n    for i in dic.keys():\n        f = dic[i].reset_index()\n        f['day']=f.day.apply(lambda x: x.split('_')[1]).astype('int')\n        f = f.sort_values(by=['day']).set_index('day')\n        dic[i] = f\n    return dic","d9998ccb":"df_list = ['FOODS_3','FOODS_2','FOODS_1','HOUSEHOLD_1','HOUSEHOLD_2','HOBBIES_1','HOBBIES_2']\ndf_titles = ['FOODS_3','FOODS_2','FOODS_1','HOUSEHOLD_1','HOUSEHOLD_2','HOBBIES_1','HOBBIES_2']\nrc=[(1,1),(1,2),(1,3),(2,1),(2,2),(2,3),(3,1)]\nfig = make_subplots(rows=3, cols=3,subplot_titles=df_titles)\nfor i in range(len(df_list)):\n    fig = fig.add_trace(go.Scatter(\n    x=dept_over_days_demand[df_list[i]].index,\n    y=dept_over_days_demand[df_list[i]].demand,\n),row=rc[i][0],col=rc[i][1])\nfig.update_layout(\n    title_text=\"Plots over different deptartment id\",\n     title_font_size=30,\n    autosize=False,\n    showlegend=False,\n    width=1000,\n    height=500,\n    margin=dict(l=50,r=50,b=100,t=100,pad=4),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.update_xaxes(automargin=True)","6ab09606":"#Less demand days????\nless_dlist = ['d_1062','d_1427','d_1792','d_331','d_697']\nless_d=calendar[calendar.d.isin(less_dlist)].compute()\nless_d","8bfa239f":"#seperate data by years \nyears = [2011,2012,2013,2014,2015]\ndic_years = {}\n#add in list of days in given year\nfor i in years:\n    dic_years[i] = calendar.loc[calendar.year==i,'d'].compute().values.tolist()\ndef getbyyear(groupby_list,aggregate,dic_years=dic_years,years=years):\n    d_year = {}\n    for i in years:\n        d_year[i] = sales_train_validation.loc[sales_train_validation.day.isin(dic_years[i])].groupby(groupby_list).agg({'demand':aggregate}).compute()\n    return d_year","f50c2161":"#year wise trend over all products on days\nyear_trend = getbyyear(['day'],'sum')\nyear_trend_mean = getbyyear(['day'],'mean')\nyear_trend_std = getbyyear(['day'],'std')\n\nyear_trend = c_reset_index(year_trend)\nyear_trend_mean = c_reset_index(year_trend_mean)\nyear_trend_std = c_reset_index(year_trend_std)","e9e86a19":"\nfig = go.Figure(data=go.Scatter(x=[str(i)for i in years], y=[year_trend[i].sum().values[0] for i in years]))\nfig.update_layout(\n    title_text=\"Demand over years\",\n     title_font_size=30,\n    autosize=False,\n    showlegend=False,\n    margin=dict(l=50,r=50,b=100,t=100,pad=4),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.update_xaxes(automargin=True)","4dca3218":"yearly = year_trend[2011]\nyearly_mean = year_trend_mean[2011]\nyearly_std = year_trend_std[2011]\nfor i in years[1:]:\n    yearly = yearly.append(year_trend[i])\n    yearly_mean = yearly_mean.append(year_trend_mean[i])\n    yearly_std = yearly_std.append(year_trend_std[i])","ee877ecf":"daily_trend = pd.merge(pd.merge(yearly,yearly_mean,on='day'),yearly_std,on='day')\ndaily_trend.columns = ['sum','mean','std']","8db4f1be":"fig = make_subplots(rows=2, cols=1,subplot_titles=['Mean','Std'])\nfig = fig.add_trace(go.Scatter(\n    x=daily_trend.index,\n    y=daily_trend['mean'],\n),row=1,col=1)\nfig.add_trace(go.Scatter(\n    x=daily_trend.index,\n    y=daily_trend['std'],\n),row=2,col=1)\nfig.update_layout(\n    title_text=\"Mean and Std over all days over all Items\",\n     title_font_size=30,\n    autosize=False,\n    showlegend=False,\n    margin=dict(l=50,r=50,b=100,t=100,pad=4),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.update_xaxes(automargin=True)","50a459cf":"def make_summary(gby=None,columns=None):\n    daily_trend_item = getbyyear(gby,'sum')\n    daily_trend_mean_item = getbyyear(gby,'mean')\n    daily_trend_std_item = getbyyear(gby,'std')\n    daily_trend_item = c_reset_index(daily_trend_item)\n    daily_trend_mean_item = c_reset_index(daily_trend_mean_item)\n    daily_trend_std_item = c_reset_index(daily_trend_std_item)\n\n    daily = daily_trend_item[2011]\n    daily_mean = daily_trend_mean_item[2011]\n    daily_std = daily_trend_std_item[2011]\n    for i in years[1:]:\n        daily = daily.append(daily_trend_item[i])\n        daily_mean = daily_mean.append(daily_trend_mean_item[i])\n        daily_std = daily_std.append(daily_trend_std_item[i])\n    daily_item_merged = pd.merge(pd.merge(daily,daily_mean,on=gby),daily_std,on=gby)\n    daily_item_merged.columns = columns#['state_id','sum','mean','std']\n    return daily_trend_item,daily_trend_mean_item,daily_trend_std_item,daily_item_merged","50730e3d":"dept_sum,dept_mean,dept_std,department = make_summary(['day','dept_id'],columns=['dept_id','sum','mean','std'])","3f552481":"fig = px.line(department.reset_index(), x=\"day\", y=\"sum\", color=\"dept_id\",\n              line_group=\"dept_id\", hover_name=\"dept_id\")\nfig.show()","d8879b7d":"fig = go.Figure()\nfor i in department.dept_id.value_counts().index:\n    fig.add_trace(go.Histogram(x=department.loc[department.dept_id==i,'sum'],name=i))\nfig.update_layout(barmode='overlay')\nfig.update_traces(opacity=0.75)\nfig.update_layout(\n    title_text=\"Histogram over states\",\n     title_font_size=30,\n    autosize=False,\n    margin=dict(l=50,r=50,b=100,t=100,pad=4),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.update_xaxes(automargin=True)","8db2aebc":"fig = px.box(department, x=\"dept_id\", y=\"sum\",color=\"dept_id\")\nfig.update_layout(barmode='overlay')\nfig.update_traces(opacity=0.75)\nfig.update_layout(\n    title_text=\"Boxplot over dept_id\",\n     title_font_size=30,\n    autosize=False,\n    margin=dict(l=50,r=50,b=100,t=100,pad=4),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.update_xaxes(automargin=True)\nfig.show()","8e6dc6db":"cat_sum,cat_mean,cat_std,category = make_summary(gby=['day','cat_id'],columns=['cat_id','sum','mean','std'])","55c77a82":"fig = px.line(category.reset_index(), x=\"day\", y=\"sum\", color=\"cat_id\",\n              line_group=\"cat_id\", hover_name=\"cat_id\")\nfig.update_layout(barmode='overlay')\nfig.update_traces(opacity=0.75)\nfig.update_layout(\n    title_text=\"LinePlot over cat_id\",\n     title_font_size=30,\n    autosize=False,\n    margin=dict(l=50,r=50,b=100,t=100,pad=4),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.update_xaxes(automargin=True)\nfig.show()","d16be527":"fig = go.Figure()\nfor i in category.cat_id.value_counts().index:\n    fig.add_trace(go.Histogram(x=category.loc[category.cat_id==i,'sum'],name=i))\nfig.update_layout(barmode='overlay')\nfig.update_traces(opacity=0.75)\nfig.update_layout(\n    title_text=\"Histogram over cat_id\",\n     title_font_size=30,\n    autosize=False,\n    margin=dict(l=50,r=50,b=100,t=100,pad=4),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.update_xaxes(automargin=True)","5e3571d5":"fig = px.box(category, x=\"cat_id\", y=\"sum\",color=\"cat_id\")\nfig.update_layout(barmode='overlay')\nfig.update_traces(opacity=0.75)\nfig.update_layout(\n    title_text=\"Boxplot over cat_id\",\n     title_font_size=30,\n    autosize=False,\n    margin=dict(l=50,r=50,b=100,t=100,pad=4),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.update_xaxes(automargin=True)\nfig.show()","1e4bd2e2":"item_sum,item_mean,item_std,item = make_summary(gby=['day','item_id'],columns=['item_id','sum','mean','std'])","87f92c9c":"fig = px.line(item.reset_index(), x=\"day\", y=\"sum\", color=\"item_id\",\n              line_group=\"item_id\", hover_name=\"item_id\")\nfig.update_layout(barmode='overlay')\nfig.update_traces(opacity=0.75)\nfig.update_layout(\n    title_text=\"LinePlot over item_id\",\n     title_font_size=30,\n    autosize=False,\n    margin=dict(l=50,r=50,b=100,t=100,pad=4),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.update_xaxes(automargin=True)\nfig.show()","17307a91":"fig = go.Figure()\nfor i in item.item_id.value_counts().index:\n    fig.add_trace(go.Histogram(x=item.loc[item.item_id==i,'sum'],name=i))\nfig.update_layout(barmode='overlay')\nfig.update_traces(opacity=0.75)\nfig.update_layout(\n    title_text=\"Histogram over cat_id\",\n     title_font_size=30,\n    autosize=False,\n    margin=dict(l=50,r=50,b=100,t=100,pad=4),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.update_xaxes(automargin=True)","ec1fa88f":"fig = px.box(category, x=\"item_id\", y=\"sum\",color=\"item_id\")\nfig.update_layout(barmode='overlay')\nfig.update_traces(opacity=0.75)\nfig.update_layout(\n    title_text=\"Boxplot over item_id\",\n     title_font_size=30,\n    autosize=False,\n    margin=dict(l=50,r=50,b=100,t=100,pad=4),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.update_xaxes(automargin=True)\nfig.show()","406237d4":"state_sum,state_mean,state_std,state = make_summary(gby=['day','state_id'],columns=['state_id','sum','mean','std'])","f606c8ca":"fig = px.line(state.reset_index(), x=\"day\", y=\"sum\", color=\"state_id\",\n              line_group=\"state_id\", hover_name=\"state_id\")\nfig.update_layout(barmode='overlay')\nfig.update_traces(opacity=0.75)\nfig.update_layout(\n    title_text=\"LinePlot over state_id\",\n     title_font_size=30,\n    autosize=False,\n    margin=dict(l=50,r=50,b=100,t=100,pad=4),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.update_xaxes(automargin=True)\nfig.show()","0d82aacd":"fig = go.Figure()\nfor i in state.state_id.value_counts().index:\n    fig.add_trace(go.Histogram(x=state.loc[item.state_id==i,'sum'],name=i))\nfig.update_layout(barmode='overlay')\nfig.update_traces(opacity=0.75)\nfig.update_layout(\n    title_text=\"Histogram over cat_id\",\n     title_font_size=30,\n    autosize=False,\n    margin=dict(l=50,r=50,b=100,t=100,pad=4),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.update_xaxes(automargin=True)","00646258":"fig = px.box(state, x=\"state_id\", y=\"sum\",color=\"state_id\")\nfig.update_layout(barmode='overlay')\nfig.update_traces(opacity=0.75)\nfig.update_layout(\n    title_text=\"Boxplot over state_id\",\n     title_font_size=30,\n    autosize=False,\n    margin=dict(l=50,r=50,b=100,t=100,pad=4),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.update_xaxes(automargin=True)\nfig.show()","883da2ef":"Std is high","4ca34c15":"<h1> Click on legands in plot to view data individually <\/h1>","7035ef26":"Sudden drop in sales at certain days are due to christmas holiday which is an expected behaviour.","55552d8d":"*  There is drop in demand over all categories for 5 days\n* We can observe there are high peaks in FOOD_1 on certain days compared to other categories","8c65c0ea":"<h2>Item<\/h2>","70975503":"There seems to be seasonality to data.","c4f9c132":"* Demand for items like **FOODS** are high compared to other items like Households and hobbies.\n* **CA** leads** in terms of demand closely followed by TX .\n* Food at department 3 has high demand followed by demand in Household at deptarment 1.\n* Top 50 catogery demand is being taken by FOOD_3 with different categories.","19627428":"## Demand based on department","dca4909e":"State","2822808a":"<h2>Category<\/h2> "}}