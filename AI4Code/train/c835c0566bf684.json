{"cell_type":{"70040157":"code","4a2fbe6d":"code","5ff1255d":"code","43c27fe0":"code","9f79a022":"code","fb207e84":"code","5a9d9708":"code","44eca3dc":"code","5411dc6b":"code","ff4db408":"code","d0914680":"code","45b65002":"code","7e4f5398":"code","63eb8dfa":"code","e2e01b1a":"code","660afe37":"code","ac3186f2":"code","e500216e":"markdown","ded371c8":"markdown"},"source":{"70040157":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.set_printoptions(precision=4)\nfrom sklearn.metrics import accuracy_score, recall_score, precision_score , confusion_matrix,roc_auc_score\nfrom sklearn.inspection import permutation_importance\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import GridSearchCV\nfrom IPython.display import display,Markdown,HTML\nimport warnings\nwarnings.filterwarnings('ignore')","4a2fbe6d":"df = pd.read_csv('\/kaggle\/input\/creditcardfraud\/creditcard.csv')\ndf.head(5)","5ff1255d":"df.shape","43c27fe0":"df = df.drop_duplicates()\ndf.shape","9f79a022":"text_negative = \"Negative\"\ntext_positive = \"Positive\"\ntarget_column = \"Class\"\n\ndf_all = df.copy()\n\ndf_positive = df[df[target_column]==1]\n\ndf_negative = df[df[target_column]==0]","fb207e84":"def plot_pie(column, title=\"All Group\/Class\"):\n    fig,axs = plt.subplots(1,1)\n    data = df_all[column].value_counts()\n    plt.pie(data,autopct='%1.2f%%',labels=data.index)\n    plt.title(title)\n    plt.show()\n    \ndef plot_hist(column, title=\"All Group\/Class\"):\n    plt.hist(df_all[column],density=True)\n    plt.title(title)\n    plt.show()\n\ndef plot_bar(column, sort=False, title=\"All Group\/Class\"):\n    if sort:\n        data_all = df_all[column].value_counts().sort_index()\n    else:\n        data_all = df_all[column].value_counts()\n    plt.bar(data_all.index.astype(str),data_all)\n    plt.title(title)\n    plt.show()\n    \ndef plot_bar_compare(column, sort=False):\n    if sort:\n        data_positive = df_positive[column].value_counts().sort_index()\n        data_negative = df_negative[column].value_counts().sort_index()\n    else:\n        data_positive = df_positive[column].value_counts()\n        data_negative = df_negative[column].value_counts()\n    \n    fig,axs = plt.subplots(2,1)\n    plt.subplots_adjust(left=0, bottom=0, right=1, top=2, wspace=0, hspace=0.2)\n    axs[0].bar(data_negative.index.astype(str),data_negative)\n    axs[0].title.set_text(text_negative)\n    axs[1].bar(data_positive.index.astype(str),data_positive)\n    axs[1].title.set_text(text_positive)\n    plt.show()\n\ndef plot_hist_compare(column, bins=5):\n    plt.hist([df_negative[column], df_positive[column]] , color=['c','r'])\n    plt.legend((text_negative, text_positive))\n    plt.show()\n    \ndef plot_pie_compare(column):\n    data_positive = df_positive[column].value_counts()\n    data_negative = df_negative[column].value_counts()\n    \n    fig,axs = plt.subplots(2,1)\n    plt.subplots_adjust(left=0, bottom=0, right=1, top=2, wspace=0, hspace=0.2)\n    axs[0].pie(data_negative,autopct='%1.2f%%',labels=data_negative.index)\n    axs[0].title.set_text(text_negative)\n    axs[1].pie(data_positive,autopct='%1.2f%%',labels=data_positive.index)\n    axs[1].title.set_text(text_positive)\n    plt.show()\n\ndef plot_boxplot(column, title=\"\"):\n    ax = sns.boxplot(x=target_column, y=column, palette=[\"c\", \"r\"],\n            hue=target_column,  data=df_all).set_title(title, fontsize=15)\n    plt.show()\n\ndef check_median(column):\n    data_negative = df_negative[column].describe()\n    data_positive = df_positive[column].describe()\n    print(\"Median:\")\n    print('{}: {}'.format(text_negative,data_negative['50%']))\n    print('{}: {}'.format(text_positive,data_positive['50%']))\n\ndef check_most(column):\n    data_negative = df_negative[column].value_counts()\n    data_positive = df_positive[column].value_counts()\n    print(\"Most:\")\n    print('{}: {}'.format(text_negative,data_negative.index[0]))\n    print('{}: {}'.format(text_positive,data_positive.index[0]))","5a9d9708":"def eda(df_all):\n    display(HTML('<h1>Exploratory Data Analysis<h1>'))\n    \n    for column in df_all.columns:\n        if column == target_column:\n                continue\n        display(HTML('<h2>{}<h2>'.format(column)))\n        if df[column].dtype == 'int64' or df[column].dtype == 'float64':\n            if len(df[column].unique())>10 :\n                plot_boxplot(column)\n                check_median(column)\n            else:\n                plot_bar(column)\n                plot_pie(column)\n                plot_pie_compare(column)\n                check_most(column)\n        elif df[column].dtype == 'object':\n            if len(df[column].unique())>10 :\n                df[column].value_counts().head(5)\n            else:\n                plot_bar(column)\n                plot_pie(column)\n                plot_pie_compare(column)\n                check_most(column)\n        else:\n            None","44eca3dc":"df['Class'].value_counts()","5411dc6b":"plot_pie('Class')","ff4db408":"eda(df_all)","d0914680":"X = df.copy()\n\ny = X['Class']\n\n#Drop the Attrition_Flag Column\nX = X.drop(['Class','V5','V6','V8','V13','V15','V19','V20','V21','V22','V23', 'V24','V25','V26','V27','V28'], axis=1)","45b65002":"X.columns","7e4f5398":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 1234)","63eb8dfa":"from imblearn.over_sampling import SMOTE\n\nsm = SMOTE(random_state=1234)\n\nX_sm, y_sm = sm.fit_resample(X_train, y_train)\n\nprint(f'''Shape of X before SMOTE: {X.shape}\nShape of X after SMOTE: {X_sm.shape}''')\n\nprint('\\nBalance of positive and negative classes (%):')\ny_sm.value_counts(normalize=True) * 100","e2e01b1a":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\n\nX_sm = sc.fit_transform(X_sm)\nX_test = sc.transform(X_test)","660afe37":"# Import ML Libraries\nfrom xgboost import XGBClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom sklearn.svm import SVC\nfrom catboost import CatBoostClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\n\nclassifiers = [[CatBoostClassifier(verbose=0),'CatBoost Classifier'],[XGBClassifier(),'XGB Classifier'], [RandomForestClassifier(),'Random Forest'], \n    [KNeighborsClassifier(), 'K-Nearest Neighbours'], [SGDClassifier(),'SGD Classifier'], [SVC(),'SVC'],[LGBMClassifier(),'LGBM Classifier'],\n              [GaussianNB(),'GaussianNB'],[DecisionTreeClassifier(),'Decision Tree Classifier'],[LogisticRegression(),'Logistic Regression'],[AdaBoostClassifier(),\"AdaBoostClassifier\"]]","ac3186f2":"for cls in classifiers:\n    model = cls[0]\n    model.fit(X_sm, y_sm)\n    \n    y_pred = model.predict(X_test)\n    print(cls[1])\n    print ('Confusion Matrix:')\n    print(confusion_matrix(y_test, y_pred))\n    print(\"Accuracy : \", accuracy_score(y_test, y_pred) *  100)\n    print(\"Recall : \", recall_score(y_test, y_pred) *  100)\n    print(\"Precision : \", precision_score(y_test, y_pred) *  100)\n    print(\"ROC AUC : \", roc_auc_score(y_test, y_pred) *  100)","e500216e":"# Split data to train data and test data","ded371c8":"# Data Preprocessing"}}