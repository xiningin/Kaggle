{"cell_type":{"46d7f961":"code","8d414e43":"code","cedc60f1":"code","bd2f1f38":"code","a2c42bc0":"code","5509ca31":"code","9a17ad06":"code","37a85f29":"code","775bd1e3":"code","a949d847":"code","2775b32d":"code","30113f14":"code","4b64b221":"code","84cf16d9":"code","b4b562cd":"code","68f80fca":"code","0b320e39":"code","f3b21457":"code","cc875abe":"code","182707c3":"code","15c85969":"code","b9a13a58":"code","078b6923":"code","719457bc":"code","f86f6d16":"code","4b8529e7":"code","b8c9760e":"code","d39138fb":"code","0484ff10":"code","a834d646":"code","337003c9":"code","45330fa9":"code","a286394a":"markdown","9393ff17":"markdown","0fa9b011":"markdown","9c1de999":"markdown","f3f9e378":"markdown"},"source":{"46d7f961":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('ggplot')","8d414e43":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","cedc60f1":"train.shape","bd2f1f38":"train.head(3)","a2c42bc0":"#Check the ratio of hacdor & hacapo\nlen(train.loc[train.hacdor == 1])\/len(train.loc[train.hacapo == 1])","5509ca31":"# Slicing the dataset\ntrain = train[['v2a1','hacdor','rooms','hacapo','v14a','refrig','v18q','r4h1','r4h3','r4m1','r4m3','tamhog',\n               'tamviv','pisonotiene','cielorazo','abastaguano','noelec','epared1',\n               'epared2','epared3','etecho1','etecho2','etecho3','eviv1','eviv2','eviv3','dis','idhogar','instlevel1',\n               'instlevel2','instlevel3','instlevel4','instlevel5','instlevel6','instlevel7','instlevel8','instlevel9',\n               'bedrooms','overcrowding','Target']]","9a17ad06":"df = train[['epared1','epared2','epared3']]\nx = df.stack()\ntrain['epared'] = np.array(pd.Categorical(x[x!=0].index.get_level_values(1)))\ntrain['epared'] = train['epared'].apply(lambda x : 1 if x == 'epared1' else (2 if x == 'epared2' else 3))","37a85f29":"df = train[['etecho1','etecho2','etecho3']]\nx = df.stack()\ntrain['etecho'] = np.array(pd.Categorical(x[x!=0].index.get_level_values(1)))\ntrain['etecho'] = train['epared'].apply(lambda x : 1 if x == 'etecho1' else (2 if x == 'etecho2' else 3))","775bd1e3":"df = train[['eviv1','eviv2','eviv3']]\nx = df.stack()\ntrain['eviv'] = np.array(pd.Categorical(x[x!=0].index.get_level_values(1)))\ntrain['eviv'] = train['epared'].apply(lambda x : 1 if x == 'eviv1' else (2 if x == 'eviv2' else 3))","a949d847":"train.drop(['epared1','epared2','epared3','etecho1','etecho2','etecho3','eviv1','eviv2','eviv3'],axis=1,inplace=True)","2775b32d":"train.head()","30113f14":"train.info()","4b64b221":"train.idhogar.value_counts()","84cf16d9":"train.drop('idhogar',axis=1,inplace=True)","b4b562cd":"pd.isnull(train).sum()","68f80fca":"train.v2a1.describe()","0b320e39":"sns.boxplot(train.v2a1)","f3b21457":"train['unavailable_v2a1'] = train.v2a1.apply(lambda x: 1 if pd.isnull(x) else 0)","cc875abe":"train['v2a1'] = train['v2a1'].fillna(130000)","182707c3":"sns.countplot(train.Target)\nplt.title('Distribution of Target')","15c85969":"corr = train.corr()\nf, ax = plt.subplots(figsize=(11, 9))\nsns.heatmap(corr)","b9a13a58":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split, RandomizedSearchCV\nfrom sklearn.metrics import confusion_matrix, accuracy_score","078b6923":"X = train.drop('Target',axis=1)\ny = train[['Target']]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","719457bc":"# Create the model and assign it to the variable model.\nmodel = DecisionTreeClassifier()\n\n# Fit the model.\nmodel.fit(X_train,y_train)\n# Make predictions. Store them in the variable y_pred.\ny_pred = model.predict(X_test)\n\n# Calculate the accuracy and assign it to the variable acc.\nprint('The accuracy for the model is:', accuracy_score(y_test,y_pred))","f86f6d16":"sns.heatmap(confusion_matrix(y_test,y_pred),annot=True,fmt='2.0f')\nplt.xlabel('Predicted label')\nplt.ylabel('True label')","4b8529e7":"features = X_train.columns[:X_train.shape[1]]\nimportances = model.feature_importances_\nindices = np.argsort(importances)\n\nfig = plt.gcf()\nfig.set_size_inches(18.5, 10.5)\nplt.title('Feature Importances')\nplt.barh(range(len(indices)), importances[indices], color='b', align='center')\nplt.yticks(range(len(indices)), [features[i] for i in indices])\nplt.xlabel('Relative Importance')\nplt.show()","b8c9760e":"model = DecisionTreeClassifier()\n\nparam_dist = {\"max_depth\": [3,5,7,9,10,15,20,None],\n              \"min_samples_split\": [2,5,10,15],\n              \"min_samples_leaf\": [1,3,5]}\n\nSearch = RandomizedSearchCV(model, param_distributions=param_dist)\n\n# Fit the model on the training data\nSearch.fit(X_train, y_train)\n\n# Make predictions on the test data\npreds = Search.best_estimator_.predict(X_test)\n\nprint('The accuracy for the model is:', accuracy_score(y_test,preds))","d39138fb":"sns.heatmap(confusion_matrix(y_test,preds),annot=True,fmt='2.0f')\nplt.xlabel('Predicted label')\nplt.ylabel('True label')","0484ff10":"features = X_train.columns[:X_train.shape[1]]\nimportances = Search.best_estimator_.feature_importances_\nindices = np.argsort(importances)\n\nfig = plt.gcf()\nfig.set_size_inches(18.5, 10.5)\nplt.title('Feature Importances')\nplt.barh(range(len(indices)), importances[indices], color='b', align='center')\nplt.yticks(range(len(indices)), [features[i] for i in indices])\nplt.xlabel('Relative Importance')\nplt.show()","a834d646":"test_df = test[['v2a1','hacdor','rooms','hacapo','v14a','refrig','v18q','r4h3','r4m1','r4m3','tamhog',\n               'tamviv','pisonotiene','cielorazo','abastaguano','noelec','epared1','bedrooms','overcrowding','r4h1',\n               'epared2','epared3','etecho1','etecho2','etecho3','eviv1','eviv2','eviv3','dis','instlevel1',\n               'instlevel2','instlevel3','instlevel4','instlevel5','instlevel6','instlevel7','instlevel8','instlevel9']]\n\ndf = test_df[['epared1','epared2','epared3']]\nx = df.stack()\ntest_df['epared'] = np.array(pd.Categorical(x[x!=0].index.get_level_values(1)))\ntest_df['epared'] = test_df['epared'].apply(lambda x : 1 if x == 'epared1' else (2 if x == 'epared2' else 3))\n\ndf = test_df[['etecho1','etecho2','etecho3']]\nx = df.stack()\ntest_df['etecho'] = np.array(pd.Categorical(x[x!=0].index.get_level_values(1)))\ntest_df['etecho'] = test_df['epared'].apply(lambda x : 1 if x == 'etecho1' else (2 if x == 'etecho2' else 3))\n\ndf = test_df[['eviv1','eviv2','eviv3']]\nx = df.stack()\ntest_df['eviv'] = np.array(pd.Categorical(x[x!=0].index.get_level_values(1)))\ntest_df['eviv'] = test_df['epared'].apply(lambda x : 1 if x == 'eviv1' else (2 if x == 'eviv2' else 3))\n\n\ntest_df.drop(['epared1','epared2','epared3','etecho1','etecho2','etecho3','eviv1','eviv2','eviv3'],axis=1,inplace=True)\n\ntest_df['unavailable_v2a1'] = test_df.v2a1.apply(lambda x: 1 if pd.isnull(x) else 0)\ntest_df['v2a1'] = test_df['v2a1'].fillna(0)","337003c9":"model = DecisionTreeClassifier()\nmodel.fit(X_train,y_train)\nprediction = model.predict(test_df)\nsubmission1 = pd.read_csv('..\/input\/sample_submission.csv')\nsubmission1['Target'] = prediction\nsubmission1.to_csv('submission1.csv',index=False)","45330fa9":"model = DecisionTreeClassifier()\n\nparam_dist = {\"max_depth\": [3,5,7,9,10,15,20,None],\n              \"min_samples_split\": [2,5,10,15],\n              \"min_samples_leaf\": [1,3,5]}\n\nSearch = RandomizedSearchCV(model, param_distributions=param_dist)\n\n# Fit the model on the training data\nSearch.fit(X_train, y_train)\n\n# Make predictions on the test data\npreds = Search.best_estimator_.predict(test_df)\n\nsubmission2 = pd.read_csv('..\/input\/sample_submission.csv')\nsubmission2['Target'] = prediction\nsubmission2.to_csv('submission2.csv',index=False)","a286394a":"## Overlook","9393ff17":"**And there are some columns that actually can be ordinal. I'll put them together''\n\nepared1, =1 if walls are bad   \nepared2, =1 if walls are regular   \nepared3, =1 if walls are good   \n\netecho1, =1 if roof are bad   \netecho2, =1 if roof are regular   \netecho3, =1 if roof are good  \n\neviv1, =1 if floor are bad   \neviv2, =1 if floor are regular   \neviv3, =1 if floor are good  ","0fa9b011":"![Crowede](https:\/\/jtf.org\/wp-content\/uploads\/2016\/05\/syrian_refugees_keleti_railway_station.jpg)\n\n**We might think that most of our social welfare rarely help those people who need help indeed. Therefore, here comes the power of data science!**\n\n### Outline\n\n* Overlook\n\n* Cleaning\n\n* Basic EDA\n\n* Modeling \n\n* Validation","9c1de999":"## Cleaning","f3f9e378":"**Here, since I don't have too much time, I'll start it with some columns that I think are really important to the target. I'll add on other columns gradually if time allows**\n\nHere are some features that I think it's important:\n\n* v2a1, Monthly rent payment\n* hacdor, =1 Overcrowding by bedrooms\n* rooms,  number of all rooms in the house\n* hacapo, =1 Overcrowding by rooms\n* v14a, =1 has bathroom in the household\n* refrig, =1 if the household has refrigerator\n* v18q, owns a tablet\n* r4h1, Males younger than 12 years of age\n* r4h3, Total males in the household\n* r4m1, Females younger than 12 years of age\n* r4m3, Total females in the household\n* tamhog, size of the household\n* tamviv, number of persons living in the household\n* pisonotiene, =1 if no floor at the household\n* cielorazo, =1 if the house has ceiling\n* abastaguano, =1 if no water provision\n* noelec, =1 no electricity in the dwelling\n* sanitario1, =1 no toilet in the dwelling\n* epared1, =1 if walls are bad\n* epared2, =1 if walls are regular\n* epared3, =1 if walls are good\n* etecho1, =1 if roof are bad\n* etecho2, =1 if roof are regular\n* etecho3, =1 if roof are good\n* eviv1, =1 if floor are bad\n* eviv2, =1 if floor are regular\n* eviv3, =1 if floor are good\n* dis, =1 if disable person\n* idhogar, Household level identifier\n* instlevel1, =1 no level of education\n* instlevel2, =1 incomplete primary\n* instlevel3, =1 complete primary\n* instlevel4, =1 incomplete academic secondary level\n* instlevel5, =1 complete academic secondary level\n* instlevel6, =1 incomplete technical secondary level\n* instlevel7, =1 complete technical secondary level\n* instlevel8, =1 undergraduate and higher education\n* instlevel9, =1 postgraduate higher education\n* bedrooms, number of bedrooms\n* overcrowding, # persons per room"}}