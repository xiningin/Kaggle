{"cell_type":{"b394f6fb":"code","8e42c895":"code","61473cd2":"code","a0e57203":"code","62bf36de":"code","f03cbcb5":"code","5f6ddc20":"code","bac24472":"code","1dbea3af":"code","6f2e1fc6":"code","be0e5cde":"code","e28b5951":"code","5665df63":"code","b6002799":"code","90f6310d":"code","baf7b8d0":"code","81d14b9f":"code","6cf0fd25":"code","87dad05d":"code","0c45736c":"code","657504e8":"code","b5b1e043":"code","886f38f5":"markdown","5154d8a2":"markdown","1eed7964":"markdown","b90c4a19":"markdown","0a02a0e1":"markdown"},"source":{"b394f6fb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8e42c895":"import pandas as pd\nimport numpy as np\nimport seaborn as sb\nimport matplotlib.pyplot as plt\nfrom matplotlib import rcParams\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings(\"ignore\")","61473cd2":"data = pd.read_csv('\/kaggle\/input\/toy-dataset\/toy_dataset.csv')\ndata.head()","a0e57203":"data.shape","62bf36de":"data.isnull().sum()","f03cbcb5":"data.info()","5f6ddc20":"data.describe()","bac24472":"data['City'].value_counts()","1dbea3af":"data['Gender'].value_counts()","6f2e1fc6":"data['Illness'].value_counts()","be0e5cde":"df = pd.DataFrame(data)\ndf.head(2)","e28b5951":"rcParams['figure.figsize'] = 10,5\nsb.barplot(x = df['City'].value_counts().values, y = df['City'].value_counts().index)\nplt.title('City wise')\nplt.xlabel('Counts')\nplt.ylabel('Cities')\nplt.show()","5665df63":"rcParams['figure.figsize'] = 10,7\nvalues = data['Gender'].value_counts().values\ncounts = data['Gender'].value_counts().index\ncolors = ['yellow','red']\nplt.pie(values,labels = counts,colors = colors,autopct='%1.1f')\nplt.title('Comparision of Gender')\nplt.legend()\nplt.show()","b6002799":"rcParams['figure.figsize'] = 10,5\nsb.barplot(x = df['Illness'].value_counts().index, y = df['Illness'].value_counts().values)\nplt.title('Ilness')\nplt.xlabel('Counts')\nplt.ylabel('Type')\nplt.show()","90f6310d":"rcParams['figure.figsize'] = 10,7\nvalues = data['Illness'].value_counts().values\ncounts = data['Illness'].value_counts().index\ncolors = ['yellow','red']\nexplode = [0,0.1]\nplt.pie(values,labels = counts,colors = colors,explode = explode,autopct='%1.1f')\nplt.title('Illness')\nplt.legend()\nplt.show()","baf7b8d0":"rcParams['figure.figsize'] = 10,5\nax = df['Age'].hist(bins = 15,alpha = 0.9, color = 'cyan')\nax.set(xlabel = 'Age',ylabel = 'Count',title = 'Visualization of Ages')\nplt.show()","81d14b9f":"rcParams['figure.figsize'] = 10,5\nsb.heatmap(df.corr(),annot = True,square = True,linewidths = 2,linecolor = 'black',cmap=\"YlGnBu\")","6cf0fd25":"rcParams['figure.figsize'] = 10,5\nax = df['Income'].hist(bins = 15,alpha = 0.9, color = 'cyan')\nax.set(xlabel = 'Incomes',ylabel = 'Count',title = 'Visualization of Incomes')\nplt.show()","87dad05d":"rcParams['figure.figsize'] = 15,5\nsb.countplot(x = 'City',hue = 'Gender',data = df,palette=['c','b'])\nplt.title('Gender Distribution by city')\nplt.show()","0c45736c":"rcParams['figure.figsize'] = 15,5\nsb.countplot(x = 'Illness',hue = 'Gender',data = df,palette=['c','b'])\nplt.title('Gender Classification by illness')\nplt.show()","657504e8":"rcParams['figure.figsize'] = 15,5\nsb.boxenplot(x = df['Income'], y = df['City'])\nplt.title('Distribution of income per city')\nplt.show()","b5b1e043":"m = df[df['Gender'] == 'Male']\nf = df[df['Gender'] == 'Female']\nx = pd.Series(m['Income'])\ny = pd.Series(f['Income'])\nrcParams['figure.figsize'] = 15,5\nplt.hist(x,alpha = 0.7,label = 'Male')\nplt.hist(y,alpha = 0.4,label = 'Female')\nplt.title('Income Distribution by Gender')\nplt.xlabel('Income')\nplt.ylabel('Count')\nplt.legend()\nplt.show()","886f38f5":"# Importing Necessary Packages","5154d8a2":"# Basic checks on the data","1eed7964":"* It's an imbalanced data set","b90c4a19":"# Knowing about each variables","0a02a0e1":"# Exploratory Data Analysis"}}