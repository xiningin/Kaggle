{"cell_type":{"8d5f6de0":"code","7462eb68":"code","e85b6601":"code","895abc05":"code","53a778bf":"code","d71ac402":"code","8219effc":"code","702b0185":"code","4f15b243":"code","4a5b4e11":"code","a078f497":"code","1574b29d":"code","614ac0c9":"code","daac6d96":"code","6a8b9943":"code","df810e30":"code","f24c3fa7":"code","52bd21a3":"code","7cbd9c66":"code","c8d1d074":"code","3ac0cbd1":"code","b4d46b6b":"code","2619d25e":"code","4e35e442":"code","2a91f09c":"code","9512c263":"code","3eb21dca":"code","e2a70278":"code","4eedb30f":"code","0ad475fd":"code","3c7112a7":"code","9bd2bde2":"code","bfe1892c":"code","2aff165d":"code","281f1a84":"code","f2ffe515":"code","5bc8d679":"code","f86daeb8":"code","681f1768":"code","68b620ec":"code","ba159f00":"code","e3df9d39":"code","f7b71ffb":"code","d7c794a0":"code","9d9ec096":"code","baac2a63":"code","cf42d31d":"code","5b8f6c42":"code","827be5a0":"code","12d05314":"code","a68b9a5b":"code","497ccdf0":"markdown","b2b129d0":"markdown","0b4d5a8b":"markdown","25ca52b1":"markdown","03029e18":"markdown","8e78d6ca":"markdown","904cafe5":"markdown","526c1f5c":"markdown","408771f8":"markdown","d77ff71c":"markdown","d7975146":"markdown","99d64eb6":"markdown","aa838fab":"markdown","5668aa12":"markdown","25a8fe94":"markdown","ce62685f":"markdown","9192235e":"markdown","547de299":"markdown","590d6c07":"markdown","656b5cfb":"markdown","764be718":"markdown","3aae1db9":"markdown","79aea027":"markdown","12012fed":"markdown"},"source":{"8d5f6de0":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","7462eb68":"import os\nprint(os.listdir(\"..\/input\/\"))","e85b6601":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","895abc05":"train_data = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain_data.head()","53a778bf":"test_data = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest_data.head()","d71ac402":"train_data.info()","8219effc":"test_data.info()","702b0185":"survived = train_data[train_data['Survived']==1]\nnot_survived = train_data[train_data['Survived']==0]\nprint (\"Survival ratio: %.1f\"%float(len(survived)\/(len(survived)+len(not_survived))))","4f15b243":"#variables info:\n\n#pclass:\n#    1 = 1st\n#    2 = 2nd\n#    3 = 3rd\n#sibsp:\n#     number of siblings\/spouse aboard the Titanic\n#parch:\n#    number of parents\/children aboard the Titanic\n#embarked:\n#    C = Cherbourgh\n#    Q = Queenstown\n#    S = Southampton\n","4a5b4e11":"data = pd.concat([train_data,test_data],sort=False)","a078f497":"data.tail()","1574b29d":"data['Age'] = data['Age'].fillna(value=data['Age'].median())\ndata['Fare'] = data['Fare'].fillna(value=data['Fare'].median())\ndata['Embarked'] = data['Embarked'].fillna(value='S')","614ac0c9":"df = data[:891]\ndf.head()","daac6d96":"pd.crosstab(df.Embarked,df.Survived).plot(kind='bar',figsize=(3,3))\nplt.ylabel('No. of Passengers')\nplt.show()\n# passengers who embarked from Southampton have higher ration of deaths as compared to other cities","6a8b9943":"pd.crosstab(df.Sex,df.Survived).plot(kind='bar',figsize=(3,3))\nplt.ylabel('No. of Passengers')\nplt.show()\n# ratio of deaths of male is higher than that of female\ngender_survival_average = df[['Sex','Survived']].groupby(['Sex'],as_index=False).mean()\nprint (gender_survival_average)\n# females have higher survival ratio than males","df810e30":"pd.crosstab(df.Cabin.str[0],df.Survived).plot(kind='bar',figsize=(3,3))\n# type of cabin can be of much use in predicting survival\n# so it can be splitted but it contains some missing values \n# so another type= missing can be added to it","f24c3fa7":"# now the changes has to be made on both training and test set\ndata['Cabin'] = data['Cabin'].fillna('Missing')\ndata['Cabin'] = data['Cabin'].str[0]\ndata['Cabin'].value_counts()","52bd21a3":"pd.crosstab(df.Cabin.str[0],df.Survived).plot(kind='bar',figsize=(3,3))\nplt.show()\n# it can be  observed that the ones whose cabins are missing have much lower survival raion as compared to others","7cbd9c66":"pd.crosstab(df.Parch,df.Survived).plot(kind='bar',figsize=(3,3))\nplt.show()\n# as the values are low we need to print actual values to get more information\nprint(df.groupby('Parch').Survived.value_counts())\n#  those with less no companions have higher lower survival ratio.  ","c8d1d074":"pd.crosstab(df.Pclass,df.Survived).plot(kind='bar',figsize=(3,3))\n# pclass=3(lower class) have very less survival ratio as compared to other pclass\nplt.show()\npclass_survival_average = df[['Pclass','Survived']].groupby(['Pclass'],as_index=False).mean()\nprint (pclass_survival_average)\n# class 1 (higher class) have highest survival ratio","3ac0cbd1":"pd.crosstab(df.SibSp,df.Survived).plot(kind='bar',figsize=(3,3))\nplt.show()\n# as values are low , we can print to get more information\nprint(df.groupby('SibSp').Survived.value_counts())\n\n#for SibSp = 0 i.e. travellig alone class have lower survival ratio .","b4d46b6b":"x = np.array(df['Age'])\ny = np.array(df['Survived'])\nsns.scatterplot(x,y)\nplt.xlabel('Age')\nplt.ylabel('Survival')\nplt.show()\n# no much prediction  can be made on the basis of this scatter plot \n","2619d25e":"# combining age with other variables to get more info\nfig = plt.figure(figsize=(15,5))\nax1 = fig.add_subplot(131)\nax2 = fig.add_subplot(132)\nax3 = fig.add_subplot(133)\nsns.boxplot(x=\"Embarked\", y=\"Age\",hue=\"Survived\",data=df,ax=ax1)\nsns.boxplot(x=\"Pclass\", y=\"Age\",hue=\"Survived\",data=df,ax=ax2)\nsns.boxplot(x=\"Sex\", y=\"Age\",hue=\"Survived\",data=df,ax=ax3)\n# deductions:\n# in first plot those who boarded from C and having age > 30 have ","4e35e442":"sns.heatmap(df.drop('PassengerId',axis=1).corr(),vmax=0.6,square=True,annot=True)\n#this heatmap shows the correlation between features, more the absolute value more is \n# the dependance so we can neglect features with lower correlation coefficient","2a91f09c":"# cabin and sex can be extracted from data\n# coefficients of fare and age are high so they need to be categorized\n# into categories or bands for better visualization.\n# one way is to one hot encode variables but by doing so the number of features will\n# increase which will not be reliable for feature selection \n# other useful and appropriate way is to label the categories as integers.","9512c263":"data.info()","3eb21dca":"data.head()","e2a70278":"train_test_data = [data]","4eedb30f":"#'embarked' has three categories S,C,Q\n# we can label it as 0,1 and 2 respectively.\nfor dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n","0ad475fd":"# labelling sex as 1 and 0 \nfor item in train_test_data:\n    item['Sex'] = item['Sex'].map({'male':1,'female':0})","3c7112a7":"# labelling cabin\ndata.Cabin.unique()","9bd2bde2":"for item in train_test_data:\n    item['Cabin'] = item['Cabin'].map({'M':0, 'C':1, 'E':2, 'G':3, 'D':4, 'A':5, 'B':6, 'F':7, 'T':8})","bfe1892c":"# merging sibsp and parch features to generate a new feature like companions\nfor item in train_test_data:\n    item['Companions'] = item['SibSp'] + item['Parch']\n","2aff165d":"print (data[['Companions','Survived']].groupby(['Companions'],as_index=False).mean())","281f1a84":"sns.barplot(x = 'Companions',y = 'Survived',ci=None,data=data)\n# those who travel alone have less surival ratio.\n# those with 4,5,6 companions also have less survival ratio.\n# so it can be converted into travelling alone (is_alone) feature","f2ffe515":"# lets check if is_alone feature will be reliable or not\nfor item in train_test_data:\n    item['Is_alone'] = 0\n    item.loc[item['Companions'] == 0,'Is_alone'] = 1\nprint (data[['Is_alone', 'Survived']].groupby(['Is_alone'], as_index=False).mean())\n# those who are travlling alone have only 30% chances of survival\n# so this feature can be used in place of companions i.e. Sibsp and parch","5bc8d679":"#categorising fare\ncat = [0,7,10,21, 41,512]\nlab = ['0','1','2','3','4']\ndata['FareBand'] = pd.cut(data['Age'], bins = cat, labels = lab)","f86daeb8":"#categorising age\ncat = [0,16,32,48, 64,80]\nlab = ['0','1','2','3','4']\ndata['AgeBand'] = pd.cut(data['Age'], bins = cat, labels = lab)\n","681f1768":"data.head()","68b620ec":"# feature selection for training the classifier\ntrain = data[0:891]\ntrain.head()\ntest = data[891:]\ntest.head()\ntraining_data = train.drop(['PassengerId','Name','SibSp','Age','Parch','Ticket','Fare'],axis=1)\ntesting_data = test.drop(['Name','SibSp','Parch','Ticket','Fare','Survived','Age'],axis=1)","ba159f00":"y = training_data['Survived']\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(training_data.drop(['Survived'],axis=1),y,random_state=0,test_size=0.2)","e3df9d39":"from sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier","f7b71ffb":"clf1 = LogisticRegression(solver='liblinear').fit(x_train,y_train)\nclf2 = SVC().fit(x_train,y_train)\nclf3 = DecisionTreeClassifier().fit(x_train,y_train)\nclf4 = RandomForestClassifier(n_estimators=1000).fit(x_train,y_train)","d7c794a0":"pred1 = clf1.predict(x_test)\npred2 = clf2.predict(x_test)\npred3 = clf3.predict(x_test)\npred4 = clf4.predict(x_test)","9d9ec096":"from sklearn.metrics import accuracy_score\nprint ('accuracy score of Logistic regression classifier: ', accuracy_score(pred1,y_test))\nprint ('accuracy score of support vector classifier: ', accuracy_score(pred2,y_test))\nprint ('accuracy score of decision tree: ', accuracy_score(pred3,y_test))\nprint ('accuracy_score: ', accuracy_score(pred4,y_test))","baac2a63":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,pred1))\nprint(classification_report(y_test,pred2))\nprint(classification_report(y_test,pred3))\nprint(classification_report(y_test,pred4))\n","cf42d31d":"testing_data.tail()","5b8f6c42":"Testing = testing_data.drop(['PassengerId'], axis = 1)","827be5a0":"T_pred = clf2.predict(Testing).astype(int)\n","12d05314":"PassengerId = testing_data['PassengerId']\nresult = pd.DataFrame({'PassengerId': PassengerId, 'Survived':T_pred })\nresult.head()","a68b9a5b":"result.to_csv(\"Titanic_sinking_Submission2.csv\", index = False)","497ccdf0":"# Loading data","b2b129d0":"## Correlating features\n","0b4d5a8b":"## 6. Sibsp vs survival","25ca52b1":"## 1. Embarked vs survival\n","03029e18":"Note:\n\nThere are 891 entries in the training set and 418 in the test set","8e78d6ca":"## comparing model accuracies ","904cafe5":"## 3.Cabin vs survival\n","526c1f5c":"# Training the classifiers","408771f8":"# Visualization","d77ff71c":"# Data Cleaning","d7975146":"So the data is not biased and is suitable for training","99d64eb6":"Combining the test and training data for cleaning ","aa838fab":"Looking more into training dataset","5668aa12":"## 4. parch vs survival\n","25a8fe94":"'age', 'cabin', 'Fare' and 'embarked' columns contains some nans.\n\nnans value in age and embarked can be replaced with the median of the their column values.","ce62685f":"## 5. pclass vs survival\n","9192235e":"### Based on above visualization, parch and sibsip can be merged to find out if a person is travelling alone or with how many members.","547de299":"## 7. age vs survival\n","590d6c07":"# Predictions on the test set","656b5cfb":"# Importing libraries and dataset","764be718":"### By seeing the accuracy scores support vector classifier works best among all used classifiers with an accuracy of 83%","3aae1db9":"## Feature Extraction\n","79aea027":"## 2. gender vs survival \n","12012fed":"### Finding dependence of various features on survival"}}