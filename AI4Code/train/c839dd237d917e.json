{"cell_type":{"93acecbd":"code","c3127125":"code","1a3e5e1c":"code","6b44f21f":"code","a0af1c1e":"code","d436ea0f":"code","dc8ba9ad":"code","01c26d2b":"code","67f39988":"code","4281d193":"code","bb56ee2f":"code","5bf5712b":"code","cc5d350a":"code","98b57661":"code","c3a48a2a":"code","1618835b":"code","b037ab06":"code","36506413":"code","17d33dbc":"code","54e45d27":"code","a40cc45a":"code","a4326e95":"code","7b262b73":"code","c2cfa018":"code","a397ff35":"code","f3e85bbc":"code","85a26d45":"code","d46f94e4":"code","f5ab3d0f":"code","4a5fa8df":"code","272cd3bd":"code","a13ecec0":"code","e81f8c54":"code","dbd54499":"code","a20ac148":"code","ce0b8917":"code","8dd6082c":"code","e9314bb8":"code","dfbb8832":"code","d0b04a9b":"code","82dc9979":"code","c72c6f71":"code","07620cb5":"code","7728e811":"code","78c7380d":"code","14d7d211":"code","144fea5e":"code","d7e34599":"code","709e7847":"code","9c21e1a1":"code","44b7ad36":"code","21c17b8d":"code","e5ed7358":"code","5337a370":"code","ed680b81":"code","2d173287":"code","13697428":"code","c4b1de80":"code","927c6cf7":"code","dfe2e5d7":"code","e5efc46f":"code","593f61c7":"code","bf95b740":"code","e53dc7fc":"code","10651177":"code","a9456c92":"code","617ed1fe":"code","108e87b2":"code","b8eab87c":"code","5237ea07":"code","101da597":"code","4d56b9bc":"code","a9881cd0":"code","6fd91d4b":"code","f8edd1c6":"code","78a4a360":"code","69f220d2":"code","b0775738":"code","712e5c12":"code","19935976":"code","2b7cda18":"code","996ba4a2":"code","8c239a20":"code","1bbaee62":"code","f06db644":"code","806347b9":"code","1a308bf1":"code","bfdfa989":"code","d98f119f":"code","b47faa71":"code","c5e0e6fd":"markdown","19a0dd9a":"markdown","3f3a982f":"markdown","84144f4d":"markdown","d7fda3fa":"markdown","5ba1509c":"markdown","80278dcb":"markdown","5445c424":"markdown","5832c28d":"markdown","bac8eccf":"markdown","7396e67c":"markdown","fa9c065c":"markdown","d0ae1159":"markdown","50167eb5":"markdown","05adb51b":"markdown","85855cb5":"markdown","966be0f8":"markdown","27fb2be8":"markdown","dcae8cd8":"markdown","4fcefdbd":"markdown","d5ad167b":"markdown","42ed8463":"markdown","84574007":"markdown","e8ecdd04":"markdown","5a62fc71":"markdown","bb2132b6":"markdown","75b6148c":"markdown","1139267c":"markdown","a2fcb967":"markdown","18472b52":"markdown","b9a7c527":"markdown","f50a3a9f":"markdown","bc2f3525":"markdown","b3f5f6ed":"markdown","28017475":"markdown"},"source":{"93acecbd":"import sys\nprint(sys.version)","c3127125":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1a3e5e1c":"from scipy import stats\nimport plotly\nfrom plotly.offline import iplot,init_notebook_mode\nimport plotly.graph_objs as go\ninit_notebook_mode(connected=True)","6b44f21f":"finalfinal=pd.read_csv(\"..\/input\/finalfinal\/finalfinal.csv\")\nfinalfinal.info()","a0af1c1e":"preterm=pd.read_csv(\"..\/input\/preterm\/final.csv\")\npreterm.info()","d436ea0f":"preterm.to_csv(\"final.csv\")","dc8ba9ad":"preterm.head()","01c26d2b":"print(preterm[\"gestational age\"].value_counts().sort_index())\npreterm.loc[preterm[\"gestational age\"]<28,\"week\"]= 0\npreterm.loc[((preterm[\"gestational age\"]>=28) & (preterm[\"gestational age\"]<32)),\"week\"]= 1\npreterm.loc[((preterm[\"gestational age\"]>=32) & (preterm[\"gestational age\"]<=36)),\"week\"]= 2\npreterm.loc[preterm[\"gestational age\"]>=37,\"week\"]= 3","67f39988":"preterm[preterm[\"gestational age\"]==40][\"maternal_age\"].value_counts()","4281d193":"preterm[(preterm[\"gestational age\"]==40)&(preterm[\"maternal_age\"]==34)][\"id\"]","bb56ee2f":"preterm[preterm[\"gestational age\"]==40][\"maternal_age\"].value_counts()","5bf5712b":"print(preterm[\"delivery_time\"][0])\n# https:\/\/stackoverflow.com\/questions\/29947574\/splitting-at-underscore-in-python-and-storing-the-first-value\npreterm[\"delivery_date\"] = preterm[\"delivery_time\"].str.split().str[0]\n# https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.to_datetime.html\npreterm[\"delivery_date\"] = pd.to_datetime(preterm[\"delivery_date\"])\npreterm[\"delivery_year\"] = preterm[\"delivery_date\"].dt.year\npreterm[\"delivery_month\"] = preterm[\"delivery_date\"].dt.month\n\n# http:\/\/www.datasciencemadesimple.com\/concatenate-two-columns-dataframe-pandas-python-2\/\n#preterm[\"delivery_year_month\"] = preterm[\"delivery_year\"].astype(str)+\"-\"+preterm[\"delivery_month\"].astype(str)","cc5d350a":"# https:\/\/stackoverflow.com\/questions\/8142364\/how-to-compare-two-dates\nimport datetime\nd = datetime.datetime(2016, 7, 1) \npreterm.loc[preterm[\"delivery_date\"]<d,\"policy\"] = 0\npreterm.loc[preterm[\"delivery_date\"]>=d,\"policy\"] = 1","98b57661":"# 2009-2013 vs 2014-2018\ny5 = datetime.datetime(2014, 1, 1) \npreterm.loc[preterm[\"delivery_date\"]<y5,\"year5\"] = 0\npreterm.loc[preterm[\"delivery_date\"]>=y5,\"year5\"] = 1\n\n# 2009-2015 vs 2016-2018\ny7 = datetime.datetime(2016, 1, 1) \npreterm.loc[preterm[\"delivery_date\"]<y7,\"year7\"] = 0\npreterm.loc[preterm[\"delivery_date\"]>=y7,\"year7\"] = 1","c3a48a2a":"# preterm births : gestational age < 37 weeks\n\npreterm.loc[preterm[\"gestational age\"]<37,\"preterm\"] = 1\npreterm.loc[preterm[\"gestational age\"]>=37,\"preterm\"] = 0\n\n# extremely preterm: gestational age < 28 weeks\n# very preterm: gestational age >= 28 weeks & gestational age < 28 weeks\n# late preterm: gestational age >= 32 weeks & gestational age < 37 weeks\n\npreterm.loc[preterm[\"gestational age\"]<28,\"term\"] = 0\npreterm.loc[((preterm[\"gestational age\"]>=28) & (preterm[\"gestational age\"]<32)),\"term\"] = 1\npreterm.loc[((preterm[\"gestational age\"]>=32) & (preterm[\"gestational age\"]<37)),\"term\"] = 2\n","1618835b":"# group maternal_age into 3 age groups\npreterm.loc[preterm[\"maternal_age\"]<=20,\"age\"] = 1\npreterm.loc[(preterm[\"maternal_age\"]>20) & (preterm[\"maternal_age\"]<=35),\"age\"] = 0\npreterm.loc[preterm[\"maternal_age\"]>35,\"age\"] = 2\n\nprint(preterm[\"age\"].value_counts().sort_index())","b037ab06":"print(preterm[\"maternal_edu\"].value_counts())\n\n# Primary School and Below: \"\u5c0f\u5b66\",\"\u62a4\u7167\",\"\u6587\u76f2\",\"\u519b\u5b98\u8bc1\",\"\u6280\u5de5\"\n# Secondary and High School:\"\u521d\u4e2d\",\"\u9ad8\u4e2d\",\"\u4e2d\u4e13\"\n# College and Above:\"\u5927\u4e13\"\uff0c\"\u5927\u5b66\"\uff0c\"\u7855\u58eb\"\n\npreterm.loc[((preterm[\"maternal_edu\"]==\"\u5c0f\u5b66\") | (preterm[\"maternal_edu\"]==\"\u62a4\u7167\") | (preterm[\"maternal_edu\"]==\"\u6587\u76f2\") | (preterm[\"maternal_edu\"]==\"\u519b\u5b98\u8bc1\") | (preterm[\"maternal_edu\"]==\"\u6280\u5de5\")),\"edu\"] = 1\npreterm.loc[((preterm[\"maternal_edu\"]==\"\u521d\u4e2d\") | (preterm[\"maternal_edu\"]==\"\u9ad8\u4e2d\") | (preterm[\"maternal_edu\"]==\"\u4e2d\u4e13\")),\"edu\"] = 2\npreterm.loc[((preterm[\"maternal_edu\"]==\"\u5927\u4e13\") | (preterm[\"maternal_edu\"]==\"\u5927\u5b66\") | (preterm[\"maternal_edu\"]==\"\u7855\u58eb\")),\"edu\"] = 0\n\nprint(preterm[\"edu\"].value_counts().sort_index())","36506413":"preterm.loc[preterm[\"parity\"]==1,\"new_parity\"] = 0\npreterm.loc[((preterm[\"parity\"]>1) & (preterm[\"parity\"]<=6)),\"new_parity\"] = 1\n# parity > 6 are taken as missing values\/outliers","17d33dbc":"# prenatal care visit\n# Prenatal Care Utilization Index: the ratio between the actual number of visits and the recommended number. \n# missing value: visit times > 46\n# 21-24: 3 times\n# 25-28: 4 times\n# 29-32: 5 times\n# 33-36: 6 times\n# 37: 7 times\n# 38: 8 times\n# 39: 9 times\n# 40:10 times\n# 41+: 11 times\npreterm.loc[preterm[\"visit\"]<=46,\"new_visit\"] = preterm[\"visit\"]\npreterm.loc[preterm[\"gestational age\"]<=24,\"visit_ratio\"] = preterm[\"new_visit\"]\/3 \npreterm.loc[((preterm[\"gestational age\"]>=25) & (preterm[\"gestational age\"]<=28)),\"visit_ratio\"] = preterm[\"new_visit\"]\/4\npreterm.loc[((preterm[\"gestational age\"]>=29) & (preterm[\"gestational age\"]<=32)),\"visit_ratio\"] = preterm[\"new_visit\"]\/5\npreterm.loc[((preterm[\"gestational age\"]>=33) & (preterm[\"gestational age\"]<=36)),\"visit_ratio\"] = preterm[\"new_visit\"]\/6\npreterm.loc[preterm[\"gestational age\"]==37,\"visit_ratio\"] = preterm[\"new_visit\"]\/7\npreterm.loc[preterm[\"gestational age\"]==38,\"visit_ratio\"] = preterm[\"new_visit\"]\/8\npreterm.loc[preterm[\"gestational age\"]==39,\"visit_ratio\"] = preterm[\"new_visit\"]\/9\npreterm.loc[preterm[\"gestational age\"]==40,\"visit_ratio\"] = preterm[\"new_visit\"]\/10\npreterm.loc[preterm[\"gestational age\"]>=41,\"visit_ratio\"] = preterm[\"new_visit\"]\/11\n\n# inadequate: visit_ratio<0.5 \n# appropriate: >=0.5 - <1.1\n# appropriate plus: visit_ratio: >=1.1\n\npreterm.loc[preterm[\"visit_ratio\"]<0.5,\"visit_group\"] = 1\npreterm.loc[((preterm[\"visit_ratio\"]>=0.5) & (preterm[\"visit_ratio\"]<1.1)),\"visit_group\"] = 0\npreterm.loc[preterm[\"visit_ratio\"]>=1.1,\"visit_group\"] = 2","54e45d27":"# chronic maternal conditions: hypertension, hepatopathy, nephropathy, heart disease, diabetes, anemia. \npreterm[\"conditions\"] = np.where(preterm[\"conditions\"]==1,1,0)","a40cc45a":"preterm[\"risk_factor\"].describe()","a4326e95":"print(preterm[\"risk_factor\"].str.contains(\"\u6162\u6027\u9ad8\u8840\u538b\").value_counts())\n# https:\/\/stackoverflow.com\/questions\/19169649\/using-str-contains-in-pandas-with-dataframes\npreterm.loc[preterm[\"risk_factor\"].str.contains(\"\u6162\u6027\u9ad8\u8840\u538b\")==True,\"ges_hyper\"]=1\npreterm.loc[preterm[\"risk_factor\"].str.contains(\"\u6162\u6027\u9ad8\u8840\u538b\")!=True,\"ges_hyper\"]=0","7b262b73":"# https:\/\/stackoverflow.com\/questions\/19169649\/using-str-contains-in-pandas-with-dataframes\nprint(preterm[\"risk_factor\"].str.contains(\"\u5b50\u75eb\").value_counts())\npreterm.loc[preterm[\"risk_factor\"].str.contains(\"\u5b50\u75eb\")==True,\"ges_preecla\"]= 1\npreterm.loc[preterm[\"risk_factor\"].str.contains(\"\u5b50\u75eb\")!=True,\"ges_preecla\"]= 0","c2cfa018":"# \u5973\u6027:gender=0\n# \u7537\u6027:gender=1\nprint(preterm[\"gender\"].value_counts())\npreterm.loc[preterm[\"gender\"]==\"\u5973\u6027\",\"new_gender\"] = 0\npreterm.loc[preterm[\"gender\"]==\"\u7537\u6027\",\"new_gender\"] = 1","a397ff35":"preterm[\"miscarriage\"] = np.where(preterm[\"miscarriage\"]==1,1,0)","f3e85bbc":"preterm[\"abortion\"] = np.where(preterm[\"abortion\"]==1,1,0)","85a26d45":"preterm.loc[((preterm[\"BMI0\"]>=15.0) & (preterm[\"BMI0\"]<18.5)),\"new_BMI0\"] = 1\npreterm.loc[((preterm[\"BMI0\"]>=18.5) & (preterm[\"BMI0\"]<24.0)),\"new_BMI0\"] = 0\npreterm.loc[((preterm[\"BMI0\"]>=24.0) & (preterm[\"BMI0\"]<=60.0)),\"new_BMI0\"] = 2\npreterm.loc[((preterm[\"BMI0\"]<15) & (preterm[\"BMI0\"]>60.0) | (pd.isna(preterm[\"BMI0\"])==True)),\"new_BMI0\"] = \"\"","d46f94e4":"preterm[\"BMI1\"] = preterm[\"weight\"]\/((preterm[\"height\"]\/100)*(preterm[\"height\"]\/100))","f5ab3d0f":"#preterm.loc[((preterm[\"BMI1\"]>=15.0) & (preterm[\"BMI1\"]<18.5)),\"new_BMI1\"] = 1\n#preterm.loc[((preterm[\"BMI1\"]>=18.5) & (preterm[\"BMI1\"]<24.0)),\"new_BMI1\"] = 0\n#preterm.loc[((preterm[\"BMI1\"]>=24.0) & (preterm[\"BMI1\"]<=60.0)),\"new_BMI1\"] = 2\n#preterm.loc[((preterm[\"BMI1\"]<15) & (preterm[\"BMI1\"]>60.0) | (pd.isna(preterm[\"BMI1\"])==True)),\"new_BMI1\"] = \"\"","4a5fa8df":"preterm[\"tube\"] = np.where(preterm[\"tube\"]==1,1,0)\npreterm[\"tube\"].value_counts()\nprint(pd.crosstab(preterm[\"tube\"],preterm[\"preterm\"]))\nfrom scipy.stats import chisquare\nchisquare([449204, 1011, 27463, 366])\nprint(pd.crosstab(preterm[\"tube\"],preterm[\"multiple\"]))","272cd3bd":"preterm[\"position\"].value_counts()\npreterm.loc[((preterm[\"position\"]==\"ROA\") | (preterm[\"position\"]==\"LOA\")),\"new_position\"] = 0\npreterm.loc[((preterm[\"position\"]==\"RSA\") | (preterm[\"position\"]==\"LSA\")),\"new_position\"] = 1\npreterm.loc[preterm[\"position\"]==\"\u6a2a\u4f4d\",\"new_position\"] = 2\npreterm.loc[preterm[\"position\"]==\"\u5176\u4ed6\",\"new_position\"] = 3  \npreterm[\"new_position\"].value_counts()\nprint(pd.crosstab(preterm[\"new_position\"],preterm[\"preterm\"]))","a13ecec0":"print(preterm[\"delivery_mode\"].value_counts())\npreterm.loc[preterm[\"delivery_mode\"]==\"\u987a\u4ea7\",\"new_mode\"] = 0\npreterm.loc[((preterm[\"delivery_mode\"]==\"\u5256\u5bab\u4ea7\") | (preterm[\"delivery_mode\"]==\"\u6025\u8bca\u5256\u5bab\u4ea7\uff08\u5256\u5bab\u4ea7\uff09\") | (preterm[\"delivery_mode\"]==\"\u9009\u62e9\u6027\u5256\u5bab\u4ea7\uff08\u5256\u5bab\u4ea7\uff09\")),\"new_mode\"] = 1\npreterm.loc[((preterm[\"delivery_mode\"]==\"\u4ea7\u94b3\") | (preterm[\"delivery_mode\"]==\"\u80ce\u5934\u5438\u5f15\")),\"new_mode\"] = 2\npreterm.loc[((preterm[\"delivery_mode\"]==\"\u81c0\u4f4d\") | (preterm[\"delivery_mode\"]==\"\u5176\u4ed6\")),\"new_mode\"] = 3\nprint(preterm[\"new_mode\"].value_counts())","e81f8c54":"preterm.loc[preterm[\"gestational age\"]<28,\"term\"] = 0\npreterm.loc[((preterm[\"gestational age\"]>=28) & (preterm[\"gestational age\"]<32)),\"term\"] = 1\npreterm.loc[((preterm[\"gestational age\"]>=32) & (preterm[\"gestational age\"]<37)),\"term\"] = 2\n","dbd54499":"single = preterm[preterm[\"multiple\"]==0]\nmultiple = preterm[preterm[\"multiple\"]==1]","a20ac148":"single[\"multiple\"].value_counts()","ce0b8917":"pd.crosstab(preterm[\"preterm\"],preterm[\"delivery_mode\"])","8dd6082c":"preterm.info()","e9314bb8":"12453+394+14982","dfbb8832":"finalfinal.loc[finalfinal[\"subgroup\"]==1,\"group\"]=","d0b04a9b":"df = preterm[[\"id\",\"preterm\",\"term\"]]\n\ndf[\"age\"]=preterm[\"age\"]\ndf[\"edu\"]=preterm[\"edu\"]\ndf[\"ethnicity\"]=finalfinal[\"ethnicity\"]\n\n\ndf[\"smoking\"]=finalfinal[\"smoking\"]\ndf[\"drinking\"]=finalfinal[\"drinking\"]\n\n\ndf[\"parity\"]=preterm[\"new_parity\"]\ndf[\"multiple\"]=preterm[\"multiple\"]\ndf[\"mode\"]=finalfinal[\"mode\"]\ndf[\"treatment\"]=finalfinal[\"treatment\"]\n\n\ndf[\"first\"]=finalfinal[\"first\"]\ndf[\"utilization\"]=preterm[\"visit_group\"]\n\n\ndf[\"conditions\"]=preterm[\"conditions\"]\ndf[\"hypertension\"]=preterm[\"ges_hyper\"]\ndf[\"diabetes\"]=finalfinal[\"diabetes\"]\ndf[\"preeclampsia\"]=preterm[\"ges_preecla\"]\n\ndf[\"policy\"]=preterm[\"policy\"]\ndf[\"gender\"]=preterm[\"new_gender\"]\ndf[\"year\"]=preterm[\"delivery_year\"]\n","82dc9979":"df.info()","c72c6f71":"df","07620cb5":"df.columns","7728e811":"s1 = [\"age\",\"edu\",\"ethnicity\",\"smoking\",\"drinking\",\"parity\",\"multiple\",\"mode\",\"treatment\",\"first\",\"utilization\",\"conditions\",\"hypertension\",\"diabetes\",\"preeclampsia\",\"policy\",\"gender\",\"year\"]\nfor i in s1:\n    print(\"============\")\n    print(i)\n    print(preterm[i].value_counts().sort_index())\n    print(\"------------\")\n    tab = pd.crosstab(preterm[i],preterm[\"preterm\"])\n    print(tab)\n    print(\"------------\")\n    print(stats.chi2_contingency(tab))","78c7380d":"# Logistic Regression\nimport statsmodels.api as sm \ntab_age = pd.crosstab(preterm[\"age\"],preterm[\"preterm\"])\nprint(tab_age)\na0 = np.asarray([[1846,21209],[22734,393874]])\na1 = np.asarray([[3249,35132],[22734,393874]])\nt_age_1=sm.stats.Table2x2(a0)\nt_age_2=sm.stats.Table2x2(a1)\nprint(t_age_1)\nprint(t_age_1.summary())\nprint(t_age_2)\nprint(t_age_2.summary())","14d7d211":"tab_edu = pd.crosstab(preterm[\"edu\"],preterm[\"preterm\"])\nprint(tab_edu)\nb0 = np.asarray([[20973,330947],[994,15693]])\nb1 = np.asarray([[5862,103575],[994,15693]])\nt_edu_1=sm.stats.Table2x2(b0)\nt_edu_2=sm.stats.Table2x2(b1)\nprint(t_edu_1)\nprint(t_edu_1.summary())\nprint(t_edu_2)\nprint(t_edu_2.summary())","144fea5e":"tab_parity = pd.crosstab(preterm[\"new_parity\"],preterm[\"preterm\"])\nprint(tab_parity)\nc = np.asarray([[14076,239604],[13640,209789]])\nt_c=sm.stats.Table2x2(c)\nprint(t_c)\nprint(t_c.summary())","d7e34599":"tab_multiple = pd.crosstab(preterm[\"multiple\"],preterm[\"preterm\"])\nprint(tab_multiple)\nd = np.asarray([[4596,5577],[23233,444638]])\nt_d=sm.stats.Table2x2(d)\nprint(t_d)\nprint(t_d.summary())","709e7847":"tab_visit = pd.crosstab(preterm[\"visit_group\"],preterm[\"preterm\"])\nprint(tab_visit)\ne0 = np.asarray([[7780,114194],[13579,264111]])\ne1 = np.asarray([[6454,71829],[7780,114194]])\nt_visit_1=sm.stats.Table2x2(e0)\nt_visit_2=sm.stats.Table2x2(e1)\nprint(t_visit_1)\nprint(t_visit_1.summary())\nprint(t_visit_2)\nprint(t_visit_2.summary())","9c21e1a1":"tab_conditions = pd.crosstab(preterm[\"conditions\"],preterm[\"preterm\"])\nprint(tab_conditions)\nf = np.asarray([[436,6551],[27393,443664]])\nt_f=sm.stats.Table2x2(f)\nprint(t_f)\nprint(t_f.summary())","44b7ad36":"tab_ges_hyper = pd.crosstab(preterm[\"ges_hyper\"],preterm[\"preterm\"])\nprint(tab_ges_hyper)\ng = np.asarray([[26,192],[27803,450023]])\nt_g=sm.stats.Table2x2(g)\nprint(t_g)\nprint(t_g.summary())","21c17b8d":"tab_ges_preecla = pd.crosstab(preterm[\"ges_preecla\"],preterm[\"preterm\"])\nprint(tab_ges_preecla)\nh = np.asarray([[167,325],[27662,449890]])\nt_h=sm.stats.Table2x2(h)\nprint(t_h)\nprint(t_h.summary())","e5ed7358":"tab_policy = pd.crosstab(preterm[\"policy\"],preterm[\"preterm\"])\nprint(tab_policy)\ni = np.asarray([[8152,123667],[19677,326548]])\nt_i=sm.stats.Table2x2(i)\nprint(t_i)\nprint(t_i.summary())","5337a370":"tab_new_gender = pd.crosstab(preterm[\"new_gender\"],preterm[\"preterm\"])\nprint(tab_new_gender)\nj = np.asarray([[16139,242257],[11683,207946]])\nt_j=sm.stats.Table2x2(j)\nprint(t_j)\nprint(t_j.summary())","ed680b81":"s1=[\"preterm\",\"term\",\"age\",\"edu\",\"new_parity\",\"visit_group\",\"multiple\",\"conditions\",\"ges_hyper\",\"ges_preecla\",\"policy\",\"new_gender\"]\nfor i in s1:\n    print(\"============\")\n    print(i)\n    print(preterm[i].value_counts().sort_index())\n    print(\"------------\")\n    tab = pd.crosstab(preterm[i],preterm[\"preterm\"])\n    print(tab)\n    print(\"------------\")\n    print(stats.chi2_contingency(tab))","2d173287":"m = preterm[[\"preterm\",\"age\",\"edu\",\"new_parity\",\"visit_group\",\"multiple\",\"ges_hyper\",\"ges_preecla\",\"policy\",\"new_gender\"]]\nmm = m.dropna()\nmm = mm.astype(int)\nmmm = pd.get_dummies(mm,columns=[\"age\",\"edu\",\"visit_group\"])\nmmm = mmm.astype(int)\nmmm_x = mmm[[\"age_1\",\"age_2\",\"edu_1\",\"edu_2\",\"new_parity\",\"visit_group_1\",\"visit_group_2\",\"multiple\",\"ges_hyper\",\"ges_preecla\",\"policy\",\"new_gender\"]]\nmmm_y = mmm[[\"preterm\"]]\n\n# https:\/\/www.programcreek.com\/python\/example\/88635\/statsmodels.api.Logit\nmmm_x = sm.add_constant(mmm_x)\nlogit_model=sm.Logit(mmm_y,mmm_x)\nresult=logit_model.fit()\nprint(result.summary())","13697428":"l = [\"age\",\"edu\",\"new_parity\",\"multiple\",\"visit_group\",\"ges_hyper\",\"ges_preecla\",\"policy\",\"new_gender\"]\nfor i in l:\n    print(mm[i].value_counts().sort_index())","c4b1de80":"\npreterm.loc[preterm[\"parity\"]==1,\"newer_parity\"] = 1\npreterm.loc[((preterm[\"parity\"]>1) & (preterm[\"parity\"]<=6)),\"newer_parity\"] = 0\n# parity > 6 are taken as missing values\/outliers\n\nn = preterm[[\"preterm\",\"age\",\"edu\",\"newer_parity\",\"visit_group\",\"multiple\",\"ges_hyper\",\"ges_preecla\",\"new_gender\",\"year7\",\"week\"]]\nnn = n.dropna()\nnn = nn.astype(int)\nnnn = pd.get_dummies(nn,columns=[\"age\",\"edu\",\"visit_group\"])\nnnn = nnn.astype(int)\n\nnnn_2009 = nnn[nnn[\"year7\"]==0]\nnnn_2016 = nnn[nnn[\"year7\"]==1]\n\nnnn_x_2009 = nnn_2009[[\"age_1\",\"age_2\",\"edu_1\",\"edu_2\",\"newer_parity\",\"multiple\",\"visit_group_1\",\"visit_group_2\",\"new_gender\"]]\nnnn_y_2009 = nnn_2009[[\"preterm\"]]\n\n# https:\/\/www.programcreek.com\/python\/example\/88635\/statsmodels.api.Logit\nnnn_x_2009 = sm.add_constant(nnn_x_2009)\nlogit_model_2009=sm.Logit(nnn_y_2009,nnn_x_2009)\nresult_2009=logit_model_2009.fit()\nprint(result_2009.summary())","927c6cf7":"nnn_x_2016 = nnn_2016[[\"age_1\",\"age_2\",\"edu_1\",\"edu_2\",\"newer_parity\",\"multiple\",\"visit_group_1\",\"visit_group_2\",\"new_gender\"]]\nnnn_y_2016 = nnn_2016[[\"preterm\"]]\nnnn_x_2016 = sm.add_constant(nnn_x_2016)\nlogit_model_2016=sm.Logit(nnn_y_2016,nnn_x_2016)\nresult_2016=logit_model_2016.fit()\nprint(result_2016.summary())","dfe2e5d7":"nnn_x_2016 = nnn_2016[[\"age_1\",\"age_2\",\"edu_1\",\"edu_2\",\"newer_parity\",\"multiple\",\"visit_group_1\",\"visit_group_2\",\"new_gender\"]]\nnnn_y_2016 = nnn_2016[[\"preterm\"]]\nnnn_x_2016 = sm.add_constant(nnn_x_2016)\nlogit_model_2016=sm.Logit(nnn_y_2016,nnn_x_2016)\nresult_2016=logit_model_2016.fit()\nprint(result_2016.summary())\n\n","e5efc46f":"nn.head()","593f61c7":"g = [\"week\",\"age\",\"edu\",\"newer_parity\",\"multiple\",\"visit_group\",\"ges_hyper\",\"ges_preecla\",\"new_gender\"]\nnn_2009=nn[nn[\"year7\"]==0]\nnn_2016=nn[nn[\"year7\"]==1]\nfor i in g:\n    print(nn_2009[i].value_counts().sort_index())\n    print(nn_2016[i].value_counts().sort_index())    \n    print(\"=\"*30)","bf95b740":"p = [\"age\",\"edu\",\"newer_parity\",\"multiple\",\"visit_group\",\"ges_hyper\",\"ges_preecla\",\"new_gender\"]\nfor i in p:\n    print(pd.crosstab(nn_2009[i],nn_2009[\"preterm\"]))\n    print(pd.crosstab(nn_2016[i],nn_2016[\"preterm\"]))\n    print(\"=\"*30)","e53dc7fc":"nn_2009[\"preterm\"].value_counts()","10651177":"nn_2016[\"preterm\"].value_counts()","a9456c92":"p = preterm[[\"preterm\",\"age\",\"edu\",\"newer_parity\",\"visit_group\",\"multiple\",\"ges_hyper\",\"ges_preecla\",\"new_gender\",\"policy\",\"week\"]]\npp = p.dropna()\npp = pp.astype(int)\nppp = pd.get_dummies(pp,columns=[\"age\",\"edu\",\"visit_group\"])\nppp = ppp.astype(int)\n\nppp_2009 = ppp[ppp[\"policy\"]==0]\nppp_2016 = ppp[ppp[\"policy\"]==1]\n\nppp_x_2009 = ppp_2009[[\"age_1\",\"age_2\",\"edu_1\",\"edu_2\",\"newer_parity\",\"multiple\",\"visit_group_1\",\"visit_group_2\",\"new_gender\"]]\nppp_y_2009 = ppp_2009[[\"preterm\"]]\n\n# https:\/\/www.programcreek.com\/python\/example\/88635\/statsmodels.api.Logit\nppp_x_2009 = sm.add_constant(ppp_x_2009)\nlogit_model_2009=sm.Logit(ppp_y_2009,ppp_x_2009)\nresult_2009=logit_model_2009.fit()\nprint(result_2009.summary())","617ed1fe":"ppp_x_2016 = ppp_2016[[\"age_1\",\"age_2\",\"edu_1\",\"edu_2\",\"newer_parity\",\"multiple\",\"visit_group_1\",\"visit_group_2\",\"new_gender\"]]\nppp_y_2016 = ppp_2016[[\"preterm\"]]\nppp_x_2016 = sm.add_constant(ppp_x_2016)\nlogit_model_2016=sm.Logit(ppp_y_2016,ppp_x_2016)\nresult_2016=logit_model_2016.fit()\nprint(result_2016.summary())","108e87b2":"g = [\"week\",\"age\",\"edu\",\"newer_parity\",\"multiple\",\"visit_group\",\"new_gender\"]\npp_2009=pp[pp[\"policy\"]==0]\npp_2016=pp[pp[\"policy\"]==1]\nfor i in g:\n    print(pp_2009[i].value_counts().sort_index())\n    print(pp_2016[i].value_counts().sort_index())    \n    print(\"=\"*30)","b8eab87c":"p = [\"age\",\"edu\",\"newer_parity\",\"multiple\",\"visit_group\",\"new_gender\"]\nfor i in p:\n    print(pd.crosstab(pp_2009[i],pp_2009[\"preterm\"]))\n    print(pd.crosstab(pp_2016[i],pp_2016[\"preterm\"]))\n    print(\"=\"*30)","5237ea07":"print(preterm[\"delivery_year\"].value_counts().sort_index())\n\ns2=[\"preterm\",\"term\",\"age\",\"edu\",\"new_parity\",\"multiple\",\"visit_group\",\"new_gender\"]\nfor i in s2:\n    print(\"=\"*30)\n    print(pd.crosstab(preterm[i],preterm[\"delivery_year\"]))\n    print(\"-\"*30)\n    print(pd.crosstab([preterm[i],preterm[\"delivery_year\"]],preterm[\"preterm\"])) ","101da597":"for i in s2:\n    print(\"=\"*30)\n    print(pd.crosstab(preterm[i],preterm[\"year7\"]))\n    print(\"-\"*30)\n    print(pd.crosstab([preterm[i],preterm[\"year7\"]],preterm[\"preterm\"]))","4d56b9bc":"# https:\/\/stackoverflow.com\/questions\/42739327\/iloc-giving-indexerror-single-positional-indexer-is-out-of-bounds\nimport statsmodels.api as sm\nyear_preterm = pd.crosstab(preterm[\"delivery_year\"],preterm[\"preterm\"])\nfor i in range(len(year_preterm)-1):\n    t=np.asarray([[year_preterm.iloc[0,0],year_preterm.iloc[0,1]],[year_preterm.iloc[i+1,0],year_preterm.iloc[i+1,1]]])\n    t1=sm.stats.Table2x2(t)\n    print(t)\n    print(t1.summary())","a9881cd0":"year = np.array([2009,2010,2011,2012,2013,2014,2015,2016,2017,2018])\n\n# live = np.array([38590,41912,46617,54957,46861,50063,45872,51328,52823,49021])","6fd91d4b":"#https:\/\/www.kaggle.com\/merryyundi\/airbnb-market-in-beijing\n#https:\/\/plot.ly\/~dmiller123\/4\/name-circle-name-circle-open-name-circle-dot-name-circle-open-dot-name-square-na\/#code\n#https:\/\/plot.ly\/~empet\/14349\/plotly-plot-with-two-y-axes\npbr0 = np.array([5.54,5.80,5.65,5.76,5.61,5.54,5.65,6.02,6.36,6.16])\ntrace = go.Scatter(x=year,\n                   y=pbr0,\n                   mode = \"lines+markers\",\n                   name=\"<b>XXX<\/b>\",\n                   marker = dict(color = \"#B0122C\",size=9,symbol=\"circle\"))\n\n\n\nlayout = go.Layout(xaxis=dict(title=\"<b>Year<\/b>\",\n                              titlefont=dict(color=\"Black\"),\n                              showline=True,\n                              showgrid=True,\n                              showticklabels=True,\n                              tickangle= -45,\n                              autorange=True,\n                              tickfont=dict(family=\"Times New Roman\",size=14,color=\"Black\"),\n                              type=\"category\"),\n                   yaxis=dict(title=\"<b>Preterm birth rate(%)<\/b>\",\n                              titlefont=dict(color=\"Black\"),\n                              showline=True,\n                              showgrid=True,\n                              showticklabels=True,\n                              tickformat=\".1f\",\n                              tickfont=dict(family=\"Times New Roman\",size=14,color=\"Black\")),\n                    \n                   showlegend=True,\n                   legend_orientation=\"h\",\n                   legend=dict(x=0, y=1.1),\n                   font=dict(family=\"Times New Roman\",size=14,color=\"Black\"),\n                   title=\"<b>b<b>\",\n                   width= 550,\n                   height= 500)   \n\n\ndata = [trace]\n\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","f8edd1c6":"pbr1 = np.array([0.00,0.01,0.04,0.03,0.05,0.05,0.10,0.11,0.10,0.14])\npbr2 = np.array([0.59,0.65,0.57,0.58,0.61,0.52,0.46,0.58,0.53,0.56])\npbr3 = np.array([4.94,5.14,5.04,5.15,4.96,4.97,5.09,5.34,5.73,5.46])","78a4a360":"trace1 = go.Scatter(x=year,\n                   y=pbr1,\n                   mode = \"lines+markers\",\n                   name=\"<b>28 weeks<\/b>\",\n                   marker = dict(color = \"#B0122C\",size=9,symbol=\"circle\"))\n\ntrace2 = go.Scatter(x=year,\n                   y=pbr2,\n                   mode = \"lines+markers\",\n                   name=\"<b>28-<32 weeks<\/b>\",\n                   marker = dict(color = \"#1E90FF\",size=9,symbol=\"triangle-down\"))\n\ntrace3 = go.Scatter(x=year,\n                   y=pbr3,\n                   mode = \"lines+markers\",\n                   name=\"<b>32-<37 weeks<\/b>\",\n                   marker = dict(color = \"#29a329\",size=9,symbol=\"diamond-cross\"))\n\nlayout1 = go.Layout(xaxis=dict(title=\"<b>Year<\/b>\",\n                              titlefont=dict(color=\"Black\"),\n                              showline=True,\n                              showgrid=True,\n                              showticklabels=True,\n                              tickangle= -45,\n                              autorange=True,\n                              tickfont=dict(family=\"Arial\",size=14,color=\"Black\"),\n                              type=\"category\"),\n                   yaxis=dict(title=\"<b>Preterm birth rate(%)<\/b>\",\n                              titlefont=dict(color=\"Black\"),\n                              showline=True,\n                              showgrid=True,\n                              showticklabels=True,\n                              tickformat=\".1f\",\n                              tickfont=dict(family=\"Arial\",size=14,color=\"Black\")),\n                    \n                   showlegend=True,\n                   legend_orientation=\"h\",\n                   legend=dict(x=0, y=1.1),\n                   font=dict(family=\"Arial\",size=14,color=\"Black\"),\n                   title=\"<b>b<b>\",\n                   width= 550,\n                   height= 500)   \n\n\ndata1 = [trace1,trace2,trace3]\n\nfig1 = go.Figure(data=data1,layout=layout1)\niplot(fig1)","69f220d2":"pbr4 = np.array([7.00,7.69,8.17,8.62,8.38,6.96,8.92,7.69,8.98,8.1])\npbr5 = np.array([5.23,5.54,5.30,5.40,5.24,5.23,5.21,5.66,5.95,5.73])\npbr6 = np.array([8.19,7.29,7.94,8.26,8.19,8.43,8.47,9.05,8.76,8.91])","b0775738":"trace4 = go.Scatter(x=year,\n                   y=pbr4,\n                   mode = \"lines+markers\",\n                   name=\"<b>\u226420y<\/b>\",\n                   marker = dict(color = \"#B0122C\",size=9,symbol=\"circle\"))\n\ntrace5 = go.Scatter(x=year,\n                   y=pbr5,\n                   mode = \"lines+markers\",\n                   name=\"<b>21-35y<\/b>\",\n                   marker = dict(color = \"#29a329\",size=9,symbol=\"diamond-cross\"))\n\ntrace6 = go.Scatter(x=year,\n                   y=pbr6,\n                   mode = \"lines+markers\",\n                   name=\"<b>\u226536<\/b>\",\n                   marker = dict(color = \"#1E90FF\",size=9,symbol=\"triangle-down\"))\n\nlayout2 = go.Layout(xaxis=dict(title=\"<b>Year<\/b>\",\n                              titlefont=dict(color=\"Black\"),\n                              showline=True,\n                              showgrid=True,\n                              showticklabels=True,\n                              tickangle= -45,\n                              autorange=True,\n                              tickfont=dict(family=\"Arial\",size=14,color=\"Black\"),\n                              type=\"category\"),\n                   yaxis=dict(title=\"<b>Preterm birth rate(%)<\/b>\",\n                              titlefont=dict(color=\"Black\"),\n                              showline=True,\n                              showgrid=True,\n                              showticklabels=True,\n                              tickfont=dict(family=\"Arial\",size=14,color=\"Black\"),\n                              tickformat=\".1f\"),\n                              #tick0=4,\n                              #dtick=1),\n                   showlegend=True,\n                   legend_orientation=\"h\",\n                   legend=dict(x=0, y=1.1),\n                   font=dict(family=\"Arial\",size=14,color=\"Black\"),\n                   title=\"<b>c<b>\",\n                   width= 550,\n                   height= 500)    \n\ndata2 = [trace4,trace5,trace6]\n\nfig2 = go.Figure(data=data2,layout=layout2)\niplot(fig2)","712e5c12":"pbr7 = np.array([5.30,5.49,5.85,6.27,6.90,6.17,6.72,8.38,7.37,8.66])\npbr8 = np.array([5.68,5.96,5.65,5.80,5.59,5.59,5.67,6.14,6.48,6.32])\npbr9 = np.array([3.89,4.38,5.28,5.10,5.79,4.96,5.33,5.11,5.73,5.40])\npbr10 = np.array([4.42,4.07,6.07,4.81,2.59,3.45,5.00,4.99,5.49,5.23])","19935976":"trace7 = go.Scatter(x=year,\n                   y=pbr7,\n                   mode = \"lines+markers\",\n                   name=\"<b>Less than high school<\/b>\",\n                   marker = dict(color = \"#B0122C\",size=9,symbol=\"square\"))\n\ntrace8 = go.Scatter(x=year,\n                   y=pbr8,\n                   mode = \"lines+markers\",\n                   name=\"<b>High school and college<\/b>\",\n                   marker = dict(color = \"#1E90FF\",size=9,symbol=\"triangle-down\"))\n\ntrace9 = go.Scatter(x=year,\n                   y=pbr9,\n                   mode = \"lines+markers\",\n                   name=\"<b>Bachelor<\/b>\",\n                   marker = dict(color = \"blue\",size=9,symbol=\"circle\"))\n\n\ntrace10 = go.Scatter(x=year,\n                   y=pbr10,\n                   mode = \"lines+markers\",\n                   name=\"<b>Postgraduate<\/b>\",\n                   marker = dict(color = \"#29a329\",size=9,symbol=\"diamond-cross\"))\n\nlayout3 = go.Layout(xaxis=dict(title=\"<b>Year<\/b>\",\n                              titlefont=dict(color=\"Black\"),\n                              showline=True,\n                              showgrid=True,\n                              showticklabels=True,\n                              tickangle= -45,\n                              autorange=True,\n                              tickfont=dict(family=\"Arial\",size=14,color=\"Black\"),\n                              type=\"category\"),\n                   yaxis=dict(title=\"<b>Preterm birth rate(%)<\/b>\",\n                              titlefont=dict(color=\"Black\"),\n                              showline=True,\n                              showgrid=True,\n                              showticklabels=True,\n                              tickformat=\".1f\",\n                              tickfont=dict(family=\"Arial\",size=14,color=\"Black\"),\n                              tick0=2,\n                              dtick=1),\n                   showlegend=True,\n                   legend_orientation=\"h\",\n                   legend=dict(x=0, y=1.15),\n                   font=dict(family=\"Arial\",size=14,color=\"Black\"),\n                   title=\"<b>d<b>\",\n                   width= 580,\n                   height= 500)\n\ndata3 = [trace7,trace8,trace9,trace10]\n\nfig3 = go.Figure(data=data3,layout=layout3)\niplot(fig3)","2b7cda18":"fig = go.Figure(data=[\n    go.Bar(name='<28 weeks', x=[\"2003-2012\",\"2009-2018\"], y=[20, 14]),\n    go.Bar(name='28-<37 weeks', x=[\"2003-2012\",\"2009-2018\"], y=[12, 18])\n])\n# Change the bar mode\nfig.update_layout(barmode='stack')\nfig.show()","996ba4a2":"\n\ntrace0 = go.Bar(x=[\"2003-2012\",\"2009-2018\"],\n                y=[10.27,1.12],\n                type: \"bar\",\n                barmode = 'stack',\n                name = \"<28 weeks\",\n                marker = dict(color = \"blue\"))\n\ntrace1 = go.Bar(x=[\"2003-2012\",\"2009-2018\"],\n                y=[89.73,98.88],\n                barmode = 'stack',\n                name = \"28-<37 weeks\",\n                marker = dict(color = \"green\"))\n\ntrace2 = go.Bar(x=[\"2003-2012\",\"2009-2018\"],\n                y=[94.67,91.97],\n                barmode = 'stack',\n                name = \"<36\",\n                marker = dict(color = \"blue\"))\n\ntrace3 = go.Bar(x=[\"2003-2012\",\"2009-2018\"],\n                y=[5.33,8.03],\n                barmode = 'stack',\n                name = \"\u226536\",\n                marker = dict(color = \"green\"))\n\ntrace4 = go.Bar(x=[\"2003-2012\",\"2009-2018\"],\n                y=[79.25,89.75],\n                barmode = 'stack',\n                name = \"Less than Bachelor\",\n                marker = dict(color = \"blue\"))\n\ntrace5 = go.Bar(x=[\"2003-2012\",\"2009-2018\"],\n                y=[20.75,10.24],\n                barmode = 'stack',\n                name = \"Bachelor and Postgraduate\",\n                marker = dict(color = \"green\"))\n                \ntrace6 = go.Bar(x=[\"2003-2012\",\"2009-2018\"],\n                y=[85.76,83.3],\n                barmode = 'stack',\n                name = \"Inadequate\",\n                marker = dict(color = \"blue\"))\n\ntrace7 = go.Bar(x=[\"2003-2012\",\"2009-2018\"],\n                y=[14.23,16.7],\n                barmode = 'stack',\n                name = \"Appropriate\",\n                marker = dict(color = \"green\"))\n\n        \ntrace8 = go.Bar(x=[\"2003-2012\",\"2009-2018\"],\n                y=[45.72,45.95],\n                barmode = 'stack',\n                name = \"Female\",\n                marker = dict(color = \"blue\"))\n\ntrace9 = go.Bar(x=[\"2003-2012\",\"2009-2018\"],\n                y=[54.28,54.05],\n                barmode = 'stack',\n                name = \"Male\",\n                marker = dict(color = \"green\"))\n                \n\nlayout = go.Layout(\n                   font=dict(family=\"Arial\",size=14,color=\"Black\"),\n                   title=\"<b>c<b>\",\n                   width= 580,\n                   height= 500)\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9]\n\nfig = go.Figure(data=data,layout=layout)\niplot(fig)           ","8c239a20":"\n\nfig = go.Figure(data=[\n    go.Bar(name='SF Zoo', x=animals, y=[20, 14, 23]),\n    go.Bar(name='LA Zoo', x=animals, y=[12, 18, 29])\n])\n# Change the bar mode\nfig.update_layout(barmode='stack')\nfig.show()\n\n\nyears = [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,\n         2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012]\n\nfig = go.Figure()\nfig.add_trace(go.Bar(x=years,\n                y=[219, 146, 112, 127, 124, 180, 236, 207, 236, 263,\n                   350, 430, 474, 526, 488, 537, 500, 439],\n                name='Rest of world',\n                marker_color='rgb(55, 83, 109)'\n                ))\nfig.add_trace(go.Bar(x=years,\n                y=[16, 13, 10, 11, 28, 37, 43, 55, 56, 88, 105, 156, 270,\n                   299, 340, 403, 549, 499],\n                name='China',\n                marker_color='rgb(26, 118, 255)'\n                ))\n\nfig.update_layout(\n    title='US Export of Plastic Scrap',\n    xaxis_tickfont_size=14,\n    yaxis=dict(\n        title='USD (millions)',\n        titlefont_size=16,\n        tickfont_size=14,\n    ),\n    legend=dict(\n        x=0,\n        y=1.0,\n        bgcolor='rgba(255, 255, 255, 0)',\n        bordercolor='rgba(255, 255, 255, 0)'\n    ),\n    barmode='group',\n    bargap=0.15, # gap between bars of adjacent location coordinates.\n    bargroupgap=0.1 # gap between bars of the same location coordinate.\n)\nfig.show()","1bbaee62":"12.5-10.6","f06db644":"0.1\/(12.5-10.6)","806347b9":"(0.1\/(12.5-10.6))*(6.18-5.63)","1a308bf1":"(0.3\/(12.5-10.6))*(6.18-5.63)","bfdfa989":"6.18-5.63","d98f119f":"p1 = 5.63\np2 = 6.18\nchange_age = 0.02\nchange_edu = -0.08\nchange_parity = -0.08\nchange_multiple = 0.20\nchange_pcur = 0.15\nchange_hypertension = 0.01\nchange_eclampsia = 0.01\nchange_gender = 0.02\nOther = 0.34","b47faa71":"import matplotlib.pyplot as plt\nfrom brokenaxes import brokenaxes\nimport numpy as np\n\nfig = plt.figure(figsize=(5,5))\nbax = brokenaxes(xlims=((1, 500), (600, 10000)),\n\t     ylims=((1, 500), (600, 10000)),\n\t\t hspace=.15, xscale='log', yscale='log')\n\nx = np.logspace(0.0, 4, 100)\nbax.loglog(x, x, label='$y=x=10^{0}$ to $10^{4}$')\n\nbax.legend(loc='best')\nbax.grid(axis='both', which='major', ls='-')\nbax.grid(axis='both', which='minor', ls='--', alpha=0.4)\nbax.set_xlabel('x')\nbax.set_ylabel('y')\nplt.show()","c5e0e6fd":"## 10.chronic maternal conditions","19a0dd9a":"# Table 1","3f3a982f":"## 16.BMI0\nBMI before pregnancy  \n15 <= BMI0 < 18.5:  0   \n18.5 <= BMI0 < 24.0: 1     \n24.0 <= BMI0 <= 60:  2  \nBMI0 < 15 or BMI0 > 60: missing","84144f4d":"# Figure 1","d7fda3fa":"# geatational age vs \n\u63a2\u7a76\u5355\u80ce\u65e9\u4ea7\u513f\u7684\u5b55\u5468\u4e0e\u8eab\u9ad8\u7684\u5173\u7cfb","5ba1509c":"## 14.miscarriage","80278dcb":"## 0.gestational week","5445c424":"## 12.preeclampsia or eclampsia","5832c28d":"The classification criteria were as follows: \n\n(1) MI-PTB, subgroup = 0; \u533b\u6e90\u6027\u65e9\u4ea7=12453 \n\n(2) PROM-PTB, regardless of delivery mode or induction and status; subgroup = 1; \u80ce\u819c\u65e9\u7834=394 \n\n(3) S-PTB, which included all non-PROM associated vaginal deliveries. Based on this classification scheme, remaining births that did not meet the criteria for PROM-PTB and MI-PTB were categorized as S-PTB. \nsubgroup = 2 \u975e\u80ce\u819c\u65e9\u7834\u6027\u81ea\u53d1\u65e9\u4ea7=14982","bac8eccf":"# Table A4","7396e67c":"## 5.maternal age group","fa9c065c":"## 1.date","d0ae1159":"## 13. infant gender","50167eb5":"# Feature Engineer","05adb51b":"# 2009.01-2016.06 vs 2016.07-2018.12","85855cb5":"## 6.maternal education group","966be0f8":"# Table A3","27fb2be8":"## 18.tube","dcae8cd8":"## 11.gestational hypertension","4fcefdbd":"# Table A1 & A2","d5ad167b":"## 3.year5 and year7","42ed8463":"# Risk factor contribution","84574007":"## 7.new_parity ","e8ecdd04":"# 2009-2015 vs 2016-2018","5a62fc71":"## 17.BMI1\nDelivery BMI  ","bb2132b6":"## 2.policy","75b6148c":"## 9.multiple","1139267c":"## 19.position\n\u6795\u5148\u9732:\u5de6\u6795\u524d\uff08LOA\uff09\/ \u53f3\u6795\u524d\uff08ROA) => 0\n\u81c0\u5148\u9732:\u5de6\u9ab6\u524d\uff08LSA\uff09\/ \u53f3\u9ab6\u524d\uff08RSA\uff09=> 1\n\u6a2a\u4f4d: 2\n\u5176\u4ed6: 3","a2fcb967":"## 8.visit_group ","18472b52":"## 20.delivery mode","b9a7c527":"# Table 1 OR ","f50a3a9f":"Subtypes of preterm birth: iatrogenic and spontaneous","bc2f3525":"## 15.abortion","b3f5f6ed":"# Table 2","28017475":"## 4.preterm and term"}}