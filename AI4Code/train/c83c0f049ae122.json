{"cell_type":{"c8b4132b":"code","62df5955":"code","90c7f34f":"code","3624efdb":"code","c4832fa1":"code","3c15113f":"code","228399bd":"code","2cae4f22":"code","e90aba28":"code","f3b28dc2":"code","ead46c06":"code","e50cdf3f":"code","8f8acacc":"code","a82d8819":"code","ea6a56dd":"code","b623ac44":"code","55323190":"code","a0ae3436":"code","be025b83":"code","680530ff":"code","b855a5c1":"code","bea72d17":"code","33a82bad":"code","a5499260":"code","1c301a37":"code","df5720b5":"code","d9595fb1":"code","692eca5c":"code","c8fadbb3":"code","3c2e0a33":"code","83557621":"code","2d6b651b":"code","df6d8773":"code","8bcb2d99":"code","6506a1e6":"code","5d863759":"code","d3d075bd":"code","b5fe5044":"code","91cc11e1":"code","be81de30":"code","79d49e66":"code","ec85f102":"code","fae89d94":"code","d724dae3":"code","e381aa11":"markdown"},"source":{"c8b4132b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","62df5955":"data = '..\/input\/breast-cancer-wisconsin-data\/data.csv'","90c7f34f":"table = pd.read_csv(data)","3624efdb":"table = table.sample(frac = 1)","c4832fa1":"table.shape","3c15113f":"table.head()","228399bd":"table.drop('Unnamed: 32', axis=1, inplace=True)","2cae4f22":"table.drop('id', axis=1, inplace=True)","e90aba28":"ax = sns.countplot(table['diagnosis'],label=\"Count\")\nB, M = table['diagnosis'].value_counts()\nprint('Number of Benign: ',B)\nprint('Number of Malignant : ',M)","f3b28dc2":"from sklearn.preprocessing import  MinMaxScaler\nscl=MinMaxScaler()","ead46c06":"table['diagnosis'].replace({'M':1, 'B':0}, inplace=True)","e50cdf3f":"test_set = table.iloc[-20:, :]","8f8acacc":"test_set.head()","a82d8819":"drop_index = test_set.index","ea6a56dd":"drop_index","b623ac44":"table.drop(drop_index, inplace=True)","55323190":"table.shape","a0ae3436":"x = table.iloc[:,1:]","be025b83":"y = table.iloc[:,:1]","680530ff":"from sklearn.model_selection import train_test_split","b855a5c1":"x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2)","bea72d17":"x_train=scl.fit_transform(x_train)\nx_test=scl.fit_transform(x_test)","33a82bad":"print(x_train.shape, y_train.shape, x_test.shape, y_test.shape)","a5499260":"from imblearn.over_sampling import SMOTE","1c301a37":"sm = SMOTE()","df5720b5":"x_train_f, y_train_f = sm.fit_sample(x_train, y_train)\nx_test_f, y_test_f = sm.fit_sample(x_test, y_test)","d9595fb1":"print(x_train_f.shape, y_train_f.shape, x_test_f.shape, y_test_f.shape)","692eca5c":"import tensorflow as tf\nimport tensorflow.keras.layers as L\nfrom tensorflow.keras.optimizers import Adam, Nadam, SGD, Adamax\nfrom tensorflow.keras.models import Sequential","c8fadbb3":"act = ['relu', 'swish']\nlr = 0.001\nopt = [Adam(learning_rate=lr),SGD(learning_rate=lr),Nadam(learning_rate=lr), Adamax(learning_rate=lr)]\nepoch = 200\noptim = opt[3]\nactiv=act[1]","3c2e0a33":"def the_model():\n    model = Sequential([\n        L.Dense(x_train.shape[1], input_shape= (x_train.shape[1],)),\n        L.BatchNormalization(),\n        L.Dropout(0.3),\n        L.Dense(50, activation=activ),\n        L.BatchNormalization(),\n        L.Dropout(0.3),\n        L.Dense(50, activation=activ),\n        L.BatchNormalization(),\n        L.Dropout(0.2),\n        L.Dense(20, activation=activ),\n        L.BatchNormalization(),\n        L.Dropout(0.2),\n        L.Dense(1, activation='sigmoid')\n    ])\n    model.compile(optimizer= optim, loss='binary_crossentropy',metrics='accuracy')\n    return model","83557621":"model = the_model()\nhist = model.fit(x_train, y_train, epochs=epoch, validation_data=(x_test,y_test))","2d6b651b":"model1 = the_model()\nhist1 = model1.fit(x_train_f, y_train_f, epochs=epoch, validation_data=(x_test_f,y_test_f))","df6d8773":"pd.DataFrame(hist.history).plot(figsize=(18, 5))\nplt.grid(True)\nplt.gca().set_ylim(0,1)\nplt.show()","8bcb2d99":"pd.DataFrame(hist1.history).plot(figsize=(18, 5))\nplt.grid(True)\nplt.gca().set_ylim(0,1)\nplt.show()","6506a1e6":"pd.DataFrame(hist.history).tail()","5d863759":"pd.DataFrame(hist1.history).tail()","d3d075bd":"valid_x = scl.fit_transform(test_set.iloc[:,1:])","b5fe5044":"valid_y=test_set.iloc[:,:1]","91cc11e1":"print(valid_x.shape, valid_y.shape)","be81de30":"print(valid_y)","79d49e66":"prediction = model.predict(valid_x)","ec85f102":"prediction1 = model1.predict(valid_x)","fae89d94":"for i,j in zip(prediction, valid_y.values):\n    if i >= 0.5:\n        print('Malignant',j)\n    else: print('Fine',j)","d724dae3":"for i,j in zip(prediction1, valid_y.values):\n    if i >= 0.5:\n        print('Malignant',j)\n    else: print('Fine',j)","e381aa11":"# Prediction"}}