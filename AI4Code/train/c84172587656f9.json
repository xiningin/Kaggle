{"cell_type":{"98914d5f":"code","b078d66b":"code","7097caf2":"code","63ec21cb":"code","428d3d59":"code","5c75c8b7":"code","abc1598e":"code","fa80769a":"code","d5d9c3d9":"code","92ece877":"code","530bbfc1":"code","c02cb0b7":"code","425e1b2f":"markdown","4f449cb5":"markdown","ed9066e1":"markdown","9e975216":"markdown","1f731a4b":"markdown","9acff552":"markdown","77e1d8ff":"markdown","2f386db9":"markdown","57605acd":"markdown","f26f9ccf":"markdown","6a35a342":"markdown","178bbe77":"markdown"},"source":{"98914d5f":"import numpy as np\nimport pandas as pd\nimport warnings\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, accuracy_score, roc_curve, auc\n\nimport matplotlib.pyplot as plt\n\nwarnings.filterwarnings(action='ignore')","b078d66b":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\n\nfeatures = train.drop([\"id\", \"target\"], axis=1)\nlabels = train[\"target\"]\n\nx_train, x_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, random_state=42)\nprint(\"train size: \", train.shape)\nprint(\"test size: \", test.shape)","7097caf2":"columns = x_train.columns\nmeans = []\n\nfor i in columns:\n    means.append((i, x_train[i].mean()))\n\ns_means = sorted(means, key=lambda x: x[1])\n\nprint(\"min: \", s_means[0])\nprint(\"max: \", s_means[-1])","63ec21cb":"plt.style.use('seaborn')\n%matplotlib inline\n\ndef performance(pred, true, name=\"\", printed=True):\n    # ROC curve\n    fpr, tpr, _ = roc_curve(pred, true)\n    area = auc(fpr, tpr)\n    \n    if printed:\n        print(\"AUC for {0} is {1:.4f}\".format(name, area))\n    return (name, area)","428d3d59":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.feature_selection import VarianceThreshold\nfrom xgboost import XGBClassifier\nfrom matplotlib.colors import ListedColormap\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.gaussian_process import GaussianProcessClassifier\nfrom sklearn.gaussian_process.kernels import RBF\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\n\nnum_sets = x_train['wheezy-copper-turtle-magic'].max() + 1\n\nnames = [\"Nearest Neighbors\", \"Linear SVM\", \"RBF SVM\",\n         \"Decision Tree\", \"Random Forest\",\n         \"Naive Bayes\", \"QDA\"]\n\nclassifiers = [\n    KNeighborsClassifier(3),\n    SVC(kernel=\"linear\", C=0.025),\n    SVC(gamma=2, C=1),\n    DecisionTreeClassifier(max_depth=5),\n    RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1),\n    GaussianNB(),\n    QuadraticDiscriminantAnalysis()]\n\nx_train_2 = x_train.drop('wheezy-copper-turtle-magic', axis=1)\nx_test_2 = x_test.drop('wheezy-copper-turtle-magic', axis=1)\n\nfor name, clf in zip(names, classifiers):\n    total_pred = []\n    total_test = []\n    total_acc = []\n    \n    for i in range(num_sets):\n        train_indices = x_train[x_train['wheezy-copper-turtle-magic'] == i].index\n        test_indices = x_test[x_test['wheezy-copper-turtle-magic'] == i].index\n\n        vt = VarianceThreshold(threshold=2.0).fit(x_train_2.loc[train_indices])\n\n        slim_x_train = vt.transform(x_train_2.loc[train_indices])\n        slim_x_test = vt.transform(x_test_2.loc[test_indices])\n\n        clf.fit(slim_x_train, y_train.loc[train_indices])\n        pred = clf.predict(slim_x_test)\n        total_pred += list(pred.ravel())\n        total_test += list(y_test.loc[test_indices].ravel())\n    performance(total_pred, total_test, name)","5c75c8b7":"clf = QuadraticDiscriminantAnalysis()\n\ntest_features = test.drop([\"id\", \"wheezy-copper-turtle-magic\"], axis=1)\nthresholds_auc = []\nfor threshold in np.arange(0.0, 3.1, 0.1):\n    total_pred = []\n    total_test = []\n    total_auc = []\n    total_same_as = []\n    \n    for i in range(num_sets):\n        train_indices = x_train[x_train['wheezy-copper-turtle-magic'] == i].index\n        test_indices = x_test[x_test['wheezy-copper-turtle-magic'] == i].index\n\n        vt_train = VarianceThreshold(threshold=threshold).fit(x_train_2.loc[train_indices])\n        \n        slim_x_train = vt_train.transform(x_train_2.loc[train_indices])\n        slim_x_test = vt_train.transform(x_test_2.loc[test_indices])\n        \n        clf.fit(slim_x_train, y_train.loc[train_indices])\n        pred = clf.predict(slim_x_test)        \n        \n        total_pred += list(pred.ravel())\n        total_test += list(y_test.loc[test_indices].ravel())\n        total_auc += [performance(pred.ravel(), y_test.loc[test_indices], i, False)]\n    \n    t_auc = performance(total_pred, total_test, \"QDA @ {0:.2f} threshold\".format(threshold), False)\n    thresholds_auc.append(t_auc)","abc1598e":"x = np.arange(0.0, 3.1, 0.1)\ny = list(map(lambda x: x[1], thresholds_auc))\nplt.title(\"AUC \/ variance threshold\")\nplt.scatter(x, y)\nplt.xlabel(\"threshold\");\nplt.ylabel(\"AUC\");","fa80769a":"clf = QuadraticDiscriminantAnalysis()\n\ntest_features = test.drop([\"id\", \"wheezy-copper-turtle-magic\"], axis=1)\ntrain_features = features.drop([\"wheezy-copper-turtle-magic\"], axis=1)\nfeature_indices = []\nsim_score = []\n\nfor i in range(num_sets):\n    train_indices = features[features['wheezy-copper-turtle-magic'] == i].index\n    test_indices = test[test['wheezy-copper-turtle-magic'] == i].index\n    \n    # keep track of indices for each set\n    feature_indices.append(np.argwhere(vt_train.get_support() == True))\n\n    # are the same features important in the test and train sets?\n    vt_train = VarianceThreshold(threshold=1.5).fit(train_features.loc[train_indices])\n    vt_test = VarianceThreshold(threshold=1.5).fit(test_features.loc[test_indices])\n    \n    sim = np.sum(vt_train.get_support() == vt_test.get_support()) \/ train_features.shape[1]\n    sim_score.append(sim)","d5d9c3d9":"prev = feature_indices[0]\nsame = []\nfor idx in feature_indices[1:]:\n    same.append(np.all(prev == idx))\n\nprint(\"% of sets with same features as previous: {0:.3f}\".format((np.sum(same) * 100.0) \/ len(same)))","92ece877":"plt.scatter(range(num_sets), sim_score);\nplt.xlabel(\"wheezy-copper-turtle-magic\")\nplt.ylabel(\"similarity between test and train features\");","530bbfc1":"columns = train_features.columns\n\ntotal_pred = []\ntotal_test = []\ntotal_delta = 0\nfor i in range(num_sets):\n    train_indices = x_train[x_train['wheezy-copper-turtle-magic'] == i].index\n    test_indices = x_test[x_test['wheezy-copper-turtle-magic'] == i].index\n\n    vt_train = VarianceThreshold(threshold=1.5).fit(x_train_2.loc[train_indices])\n\n    slim_x_train = vt_train.transform(x_train_2.loc[train_indices])\n    slim_x_test = vt_train.transform(x_test_2.loc[test_indices])\n\n    # plot correlations for set 0\n    corr = pd.DataFrame(slim_x_train).corr()\n    corr_sum_per_colum = corr[np.abs(corr) > 0.31].fillna(0).sum()\n    high_corr_idx = np.argwhere((corr_sum_per_colum > 1.0) == True)\n    \n    clf.fit(slim_x_train, y_train.loc[train_indices])\n    pred = clf.predict(slim_x_test)\n    \n    if len(high_corr_idx) > 0:\n        print(\"high correlation columns for block {0}: \".format(i), list(columns[high_corr_idx].ravel()))\n        # these usually occur in pairs, so simply drop the first redundant feature\n        n_features = slim_x_train.shape[1]\n        slim_x_train = np.delete(slim_x_train, high_corr_idx[0], axis=1)\n        slim_x_test = np.delete(slim_x_test, high_corr_idx[0], axis=1)\n        \n        _, s1 = performance(pred, y_test.loc[test_indices].ravel(), name=\"\", printed=False)\n        clf.fit(slim_x_train, y_train.loc[train_indices])\n        pred2 = clf.predict(slim_x_test)\n        _, s2 = performance(pred2, y_test.loc[test_indices].ravel(), name=\"\", printed=False)\n        delta = s2 - s1\n        \n        if delta > 0:\n            pred = pred2\n            total_delta += delta\n        \n    total_pred += list(pred.ravel())\n    total_test += list(y_test.loc[test_indices].ravel())\n    \nprint(\"\\ntotal delta after removing highly correlated features: {0: .2f}\".format(total_delta))\n# performance(total_pred, total_test, \"QDA @ {0} threshold\".format(names[j]));","c02cb0b7":"from sklearn.preprocessing import normalize, minmax_scale, scale\n\nclf = QuadraticDiscriminantAnalysis()\n\ntest_features = test.drop([\"id\", \"wheezy-copper-turtle-magic\"], axis=1)\nthresholds_auc = []\nnames = [ \"min max scale\", \"scale\"]\nprocesses = [ \n    minmax_scale,\n    scale\n]\nfor j, process in enumerate(processes):\n    total_pred = []\n    total_test = []\n    total_auc = []\n    total_same_as = []\n    \n    for i in range(num_sets):\n        train_indices = x_train[x_train['wheezy-copper-turtle-magic'] == i].index\n        test_indices = x_test[x_test['wheezy-copper-turtle-magic'] == i].index\n\n        vt_train = VarianceThreshold(threshold=2.0).fit(x_train_2.loc[train_indices])\n        \n        slim_x_train = process(vt_train.transform(x_train_2.loc[train_indices]))\n        slim_x_test = process(vt_train.transform(x_test_2.loc[test_indices]))\n        \n        clf.fit(slim_x_train, y_train.loc[train_indices])\n        pred = clf.predict(slim_x_test)        \n        \n        total_pred += list(pred.ravel())\n        total_test += list(y_test.loc[test_indices].ravel())\n        total_auc += [performance(pred.ravel(), y_test.loc[test_indices], i, False)]\n    \n    t_auc = performance(total_pred, total_test, \"QDA @ {0} threshold\".format(names[j]))\n    thresholds_auc.append(t_auc)","425e1b2f":"### What's the best variance threshold?","4f449cb5":"### Test multiple classifiers <em>out of the box<\/em>","ed9066e1":"#### Does the test set come from the same distribution? Does every <em>set<\/em> use the same features? \nWe can compare what features pass the variance threshold for the train and test set. This has it's limitations since the size of both <em>train<\/em> and <em>test<\/em> are different.","9e975216":"### Does pre processing the data help?\n* min max scaler \u2013 transforms feature space to a given range\n* scale - zero mean and unit variance","1f731a4b":"split into test\/train set","9acff552":"From all of these, it looks like the best performing algo is QDA. This ligns up with the findings from other people's kernels. ","77e1d8ff":"### Does removing highly correlated features help?","2f386db9":"Doesn't seem to really help...","57605acd":"A threshold of 1.5 seems reasonable.","f26f9ccf":"Looks like removing features can give a minor boost in performance","6a35a342":"standardize our performance methods","178bbe77":"# Exploring fake data"}}