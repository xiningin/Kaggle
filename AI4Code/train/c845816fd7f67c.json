{"cell_type":{"d0550782":"code","e215e4d2":"code","b258db7b":"code","26cd7068":"code","c94f4bf8":"code","2ffcabec":"code","623b9490":"code","8802918c":"code","3f737d0f":"code","b23377d4":"code","7ffae6eb":"code","e4afab41":"code","6d52322c":"code","772bf326":"code","6f235801":"code","5f8bec0f":"code","3bb59517":"code","74f5f434":"code","54f85afc":"code","8b964f94":"markdown","385eb4c3":"markdown","a67c25dd":"markdown","34f84283":"markdown","8ad013b9":"markdown","e8771ec2":"markdown","ee5a979c":"markdown","e9a9fd68":"markdown","44f70217":"markdown","70f97414":"markdown","caa0f465":"markdown","9d283f0a":"markdown","13df03e9":"markdown","be547c0b":"markdown","6eb0286e":"markdown","ff8d0c01":"markdown","ebaae614":"markdown","ce21e834":"markdown"},"source":{"d0550782":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport math\nimport matplotlib.pyplot as plt\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport time\n\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e215e4d2":"data = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ndata.head()","b258db7b":"labels = data['label']\nfeatures = data.drop('label', axis=1)\n\ntrain, val, y_train, y_val = train_test_split(features, labels, test_size=0.3, random_state=42)","26cd7068":"image_pixels = train.iloc[0].values.reshape(28,28)\nplt.imshow(image_pixels)","c94f4bf8":"X = train.values\nX_val = val.values\n\nmodel = LogisticRegression()\n\nstart = time.time()\nmodel.fit(X, y_train)\nstop = time.time()\n\npredictions = model.predict(X_val)\naccuracy = accuracy_score(y_val, predictions)\nprint(f'Liczba sk\u0142adowych: {X.shape[1]}. Czas: {stop - start:.2f}s. Accuracy:{accuracy:.2f}.')","2ffcabec":"class CustomStandardScaler(BaseEstimator, TransformerMixin):\n    def __init__(self, mean=0, std=1):\n        self.mean = mean\n        self.std = std\n    def fit(self, X, y=None):\n        '''\n        Calculates the mean and std of each column of X\n        and assigns it to instance attributes.\n        For this transformer, we'll only use the X attribute\n        \n        X - for simplicity, we'll assume it is a numpy's ndarray\n        '''\n        self.mean = X.mean(axis=0)\n        self.std = np.std(X, axis=0)\n        # if standard deviation equals 0, we want to change it to 1\n        # so it doesn't break our scaler\n        self.std[self.std == 0] = 1\n        return self\n    def transform(self, X, y=None):\n        '''\n        Performs the standarization of X\n        using the parameters set in fit method.\n        \n        X - for simplicity, we'll assume it is a numpy's ndarray\n        '''\n        return (X - self.mean) \/ self.std","623b9490":"scaler = CustomStandardScaler()\n\nX = train.values\nX = scaler.fit_transform(X)","8802918c":"m = X.shape[0]\ncovariance_matrix = 1\/m * X.T.dot(X)\ncovariance_matrix","3f737d0f":"U, S, V = np.linalg.svd(covariance_matrix)","b23377d4":"variance_explained = []\nfor eigen_value in S:\n    variance_explained.append((eigen_value\/sum(S))*100)\n        \ncumulative_variance_explained = np.cumsum(variance_explained)","7ffae6eb":"plt.plot(range(1, len(cumulative_variance_explained) + 1), cumulative_variance_explained)\nplt.xlabel(\"Number of components\")\nplt.ylabel(\"Cumulative explained variance [%]\")\nplt.show()","e4afab41":"X_val = val.values\nX_val = scaler.transform(X_val)","6d52322c":"for k in range(1, 784, 150):\n    U_reduced = U[:,0:k]\n    \n    X_train_reduced = X.dot(U_reduced)\n    y_train\n    X_val_reduced = X_val.dot(U_reduced)\n    y_val    \n    \n    # training with time measurements\n    model = LogisticRegression()\n    start = time.time()\n    model.fit(X_train_reduced, y_train)\n    stop = time.time()\n    \n    # retained variance\n    retained_variance = cumulative_variance_explained[k - 1]\n\n    predictions = model.predict(X_val_reduced)\n    accuracy = accuracy_score(y_val, predictions)\n    print(f'Liczba sk\u0142adowych: {k}. Czas: {stop - start:.2f}s. Accuracy:{accuracy:.2f}. Zachowana wariancja: {retained_variance:.2f}%.')","772bf326":"best_k = 350\n\nU_reduced = U[:,0:best_k]\n    \nX_train_reduced = X.dot(U_reduced)\ny_train\nX_val_reduced = X_val.dot(U_reduced)\ny_val \n\n# training with the best parameters\nmodel = LogisticRegression(max_iter=800)\nstart = time.time()\nmodel.fit(X_train_reduced, y_train)\nstop = time.time()\n\npredictions = model.predict(X_val_reduced)\naccuracy = accuracy_score(y_val, predictions)\nprint(f'Liczba sk\u0142adowych: {best_k}. Czas: {stop - start:.2f}s. Accuracy:{accuracy:.2f}.')","6f235801":"X_test = pd.read_csv('..\/input\/digit-recognizer\/test.csv').values\nX_test = scaler.transform(X_test)\n\nZ_test = X_test.dot(U_reduced)\nX_test_reduced = Z_test\n    \ntest_predictions = model.predict(X_test_reduced)","5f8bec0f":"scaler = StandardScaler()\n\nX = train.values\nX = scaler.fit_transform(X)\n\nX_val = val.values\nX_val = scaler.transform(X_val)","3bb59517":"pca = PCA(n_components=best_k)\nX_train_reduced = pca.fit_transform(X)\nX_val_reduced = pca.transform(X_val)","74f5f434":"# training with time measurements\nmodel = LogisticRegression(max_iter=800)\nstart = time.time()\nmodel.fit(X_train_reduced, y_train)\nstop = time.time()\n\npredictions = model.predict(X_val_reduced)\naccuracy = accuracy_score(y_val, predictions)\nprint(f'Liczba sk\u0142adowych: {best_k}. Czas: {stop - start:.2f}s. Accuracy:{accuracy:.2f}.')","54f85afc":"image_id = range(1, len(test_predictions) + 1)\nmy_submission = pd.DataFrame({'ImageId': image_id, 'Label': test_predictions})\n\nmy_submission.to_csv('submission.csv', index=False)","8b964f94":"The model performed 100 iterations in 8 seconds. It's not much in case of this particular dataset, but imagine having  more features. This could take much, much longer. That is why we use PCA.","385eb4c3":"2. Next, we calculate covariance matrix, which defines how correlated the features are with each other.","a67c25dd":"# Training the model\n\nNow we will train the model using first k computed features. What should the value of k be? We don't know that yet, so we're going to try different values and evaluate the models on the validation set. We will choose k with the highest accuracy.\n\nWe will also check, how much variance was retained using the S matrix from cell above","34f84283":"The data is a set of image of size 28x28 pixels. Each image is represented as a set of pixel colors unfolded into a single row, which gives us 28x28=784 features. \n\nLet's look at an example image from the data","8ad013b9":"# Performing the model training without PCA\n\nFirst, we will see how logistic regression performs without Principal Component Analysis. We also won't be using standarization for now.","e8771ec2":"We can also plot this cumulative sums as a function of k values","ee5a979c":"# Bibliography\n\n- [Andrew Ng's Machine Learning Course](https:\/\/www.coursera.org\/learn\/machine-learning)\n- [scikit's PCA documentation](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.decomposition.PCA.html)\n- [PCA explanation](https:\/\/towardsdatascience.com\/a-one-stop-shop-for-principal-component-analysis-5582fb7e0a9c)\n\nI also used materials from lectures at my university.","e9a9fd68":"# Using the sklearn's PCA\n\nNow, we will compare the results of our model with the scikit's implementation. We'll use the best_k value as the number of components","44f70217":"Lastly, we can upload the results to the leaderboards, because why not...","70f97414":"Although times may differ a bit due to system's resource allocation, we can see that the scikit's PCA gives us the same results as our implementation.","caa0f465":"As we can see, the more principal components we use, the more variance of our data we keep.","9d283f0a":"1. To use PCA, we have to perform standarization of the data first. To make things more interesting, instead of using scikit's StandardScaler, we'll create and use our own implementation","13df03e9":"In this notebook, we'll take a closer look at the Principal Component Analysis (PCA). PCA is a technique that lets us reduce the number of features in our dataset and perform faster model training and testing.\n\nFor the purpose of this demonstration, we will use the MNIST dataset. We'll also use a logistic regression model to categorize digits.\n\nFirst, we'll perform the model training without PCA. Then, we'll implement the Principal Component Analysis and finally, we'll compare our version's performance with scikit's implementation.","be547c0b":"We'd like to retain at least about 95%, so judging by the above results, a reasonable k to choose would be around 350.\nLet's train the model with this parameter then, check the results and run it on the test set","6eb0286e":"First, I will split the data into training and validation sets using scikit's train_test_split function. \nI use 30% of training data as my validation set.","ff8d0c01":"3. We perform SVD (Singular Value Decomposition) of the covariance matrix.","ebaae614":"Now we will use matrix S to see, how much variance do we retain depending on the value of k.\n\nThe explained variance tells us, how much variance of the data is described by each principal component.\nWhen we sum the first k elements of the explained variance list and divide it by sum of all elements, we get a percentage of variation retained within first k elements.","ce21e834":"# Preprocessing the data\n\n784 features is a bit much, so we're going to use PCA (Principal Component Analysis) to reduce the dimensionality of our data. This will be our own implementation, which we'll compare later to the scikit's version."}}