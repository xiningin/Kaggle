{"cell_type":{"a0c39b12":"code","3b2fcb10":"code","dca49655":"code","5a93e699":"code","108c192b":"code","01680030":"code","790e036d":"code","867393ca":"code","6561bd4a":"code","bbdab464":"code","eeac9ea7":"code","c964c353":"code","ca334d5e":"code","9eee5836":"code","9a3e1dba":"code","e5a8afd8":"code","0722f413":"code","d6e27382":"code","b75f8000":"code","254cfad8":"code","66472425":"code","dd5b5465":"code","a92a1b04":"code","b4bb01c6":"code","a8ce42d0":"code","393e40e6":"code","5afb4d9d":"code","880c645c":"code","8b8a1a29":"code","48a76fa5":"code","9c174cd3":"code","f067088b":"code","cbe25620":"code","8e7694b7":"code","9baeda6a":"code","b918e657":"code","957d0ace":"code","a02f8272":"code","6a877543":"code","af28e75c":"code","65524b2c":"code","9a71db4c":"code","5aa59acd":"code","233cfca1":"code","dcfa3bc3":"code","b9ddd1bd":"code","eb29ad7f":"code","2b034578":"code","02472008":"code","4bb361b4":"code","0ba131eb":"code","39469b4d":"code","7c60c828":"code","55908425":"code","388795b3":"code","8c9474f8":"code","262774fe":"code","06d2ef74":"code","5e31d489":"code","deee5243":"code","16ca6b47":"code","f57e20f9":"code","c94987e9":"code","fe1e953a":"code","3cc043a7":"code","d745ea62":"code","59421400":"code","bc08b21f":"code","f3278eb4":"code","b1ffc8f2":"code","cfb894c8":"code","d284c0e2":"code","cb6925f6":"code","6c8bca25":"code","8a7c0976":"code","32629cc1":"code","89024bc3":"code","144d3cd7":"code","2ceb7ff4":"code","80e239f2":"code","e7f3120d":"code","c40a7ed3":"code","37cb604a":"code","77a657b6":"code","bf4da2d5":"code","abfc4cde":"code","90f3b827":"code","ee63771e":"code","e0b1d7b1":"markdown","cf6b1a74":"markdown","5a265ff6":"markdown","498e81ef":"markdown","b61e5570":"markdown","6b8db064":"markdown","2e8c4ff7":"markdown","95a51c26":"markdown","7c18c699":"markdown","f3c44f91":"markdown","82f683e4":"markdown","6c68b15a":"markdown","884fc471":"markdown","534f948c":"markdown","54f46202":"markdown","689b278f":"markdown","4b605484":"markdown","cfe5d658":"markdown","7b92ef97":"markdown","0d0e6977":"markdown","ddc2d737":"markdown","09913754":"markdown","ca9f8cc0":"markdown","bf5a7a1f":"markdown","b3b562f0":"markdown","08b4e56b":"markdown","b7284f08":"markdown","f0bc70d3":"markdown","08243896":"markdown","2037dadb":"markdown","14073a58":"markdown","08898cc0":"markdown","d9d91ae9":"markdown","cb893129":"markdown","2ddcc099":"markdown"},"source":{"a0c39b12":"import numpy as np\nimport pandas as pd\nimport random\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.metrics import r2_score as r2\nfrom sklearn.model_selection import KFold, GridSearchCV\n\nfrom datetime import datetime\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","3b2fcb10":"def evaluate_preds(train_true_values, train_pred_values, test_true_values, test_pred_values):\n    print(\"Train R2:\\t\" + str(round(r2(train_true_values, train_pred_values), 3)))\n    print(\"Test R2:\\t\" + str(round(r2(test_true_values, test_pred_values), 3)))\n    \n    plt.figure(figsize=(18,10))\n    \n    plt.subplot(121)\n    sns.scatterplot(x=train_pred_values, y=train_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Train sample prediction')\n    \n    plt.subplot(122)\n    sns.scatterplot(x=test_pred_values, y=test_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Test sample prediction')\n\n    plt.show()","dca49655":"#TRAIN_DATASET_PATH = '.\/train.csv'\n#TEST_DATASET_PATH = '.\/test.csv'\nTRAIN_DATASET_PATH = '\/kaggle\/input\/real-estate-price-prediction-moscow\/train.csv'\nTEST_DATASET_PATH = '\/kaggle\/input\/real-estate-price-prediction-moscow\/test.csv'","5a93e699":"train_df = pd.read_csv(TRAIN_DATASET_PATH, sep=',')\ntrain_df.head()","108c192b":"train_df.sample()","01680030":"test_df = pd.read_csv(TEST_DATASET_PATH)\ntest_df.tail()","790e036d":"print('\u0421\u0442\u0440\u043e\u043a \u0432 \u0442\u0440\u0435\u0439\u043d\u0435:', train_df.shape[0])\nprint('\u0421\u0442\u0440\u043e\u043a \u0432 \u0442\u0435\u0441\u0442\u0435', test_df.shape[0])","867393ca":"train_df.shape[1] - 1 == test_df.shape[1]","6561bd4a":"train_df.columns, len(train_df.columns)","bbdab464":"test_df.columns,len(test_df.columns)","eeac9ea7":"train_df['Id'] = train_df['Id'].astype(str)\ntrain_df['DistrictId'] = train_df['DistrictId'].astype(str)","c964c353":"train_df.dtypes","ca334d5e":"plt.figure(figsize = (16, 8))\n\ntrain_df['Price'].hist(bins=30)\nplt.ylabel('Count')\nplt.xlabel('Price')\n\nplt.title('Target distribution')\nplt.show()","9eee5836":"train_df.describe()","9a3e1dba":"train_df.select_dtypes(include='object').columns.tolist()","e5a8afd8":"train_df['DistrictId'].value_counts()","0722f413":"train_df['Ecology_2'].value_counts()","d6e27382":"train_df['Ecology_3'].value_counts()","b75f8000":"train_df['Shops_2'].value_counts()","254cfad8":"train_df['Rooms'].value_counts()","66472425":"train_df['Rooms_outlier'] = 0\ntrain_df.loc[(train_df['Rooms'] == 0) | (train_df['Rooms'] >= 6), 'Rooms_outlier'] = 1\ntrain_df.head()","dd5b5465":"train_df[train_df['Rooms_outlier'] == 1]","a92a1b04":"train_df.loc[train_df['Rooms'] == 0, 'Rooms'] = 1  # \u043d\u0443\u043b\u0435\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043a 1\ntrain_df.loc[train_df['Rooms'] >= 6, 'Rooms'] = train_df['Rooms'].median()  # \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0431\u043e\u043b\u044c\u0448\u0435 6 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439","b4bb01c6":"train_df['Rooms'].value_counts()","a8ce42d0":"train_df['KitchenSquare'].value_counts()","393e40e6":"train_df['KitchenSquare'].quantile(.975), train_df['KitchenSquare'].quantile(.025)","5afb4d9d":"# \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043c\u0435\u043d\u0435\u0435 3 \u043a\u0432 \u043c = 3 \u043a\u0432 \u043c, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u043b\u0435\u0436\u0430\u0449\u0438\u0435 \u0432 \u0431\u043e\u043b\u0435\u0435 \u0447\u0435\u043c 3 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u044f\u0445, \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439\ncondition = (train_df['KitchenSquare'].isna()) | (train_df['KitchenSquare'] > train_df['KitchenSquare'].quantile(.975))\n\ntrain_df.loc[condition, 'KitchenSquare'] = train_df['KitchenSquare'].median()\ntrain_df.loc[train_df['KitchenSquare'] < 3, 'KitchenSquare'] = 3\n","880c645c":"train_df['KitchenSquare'].value_counts()","8b8a1a29":"train_df['KitchenSquare'].median()","48a76fa5":"train_df['HouseFloor'].sort_values().unique()","9c174cd3":"train_df['Floor'].sort_values().unique()","f067088b":"#  \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0437\u0430\u043f\u0438\u0441\u0435\u0439, \u0433\u0434\u0435 \u044d\u0442\u0430\u0436 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0431\u043e\u043b\u044c\u0448\u0435 \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u043e\u043c\u0430\n(train_df['Floor'] > train_df['HouseFloor']).sum()","cbe25620":"train_df['HouseFloor_outlier'] = 0\ntrain_df.loc[train_df['HouseFloor'] == 0, 'HouseFloor_outlier'] = 1\ntrain_df.loc[train_df['Floor'] > train_df['HouseFloor'], 'HouseFloor_outlier'] = 1","8e7694b7":"#  \u043d\u0443\u043b\u0435\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439\ntrain_df.loc[train_df['HouseFloor'] == 0, 'HouseFloor'] = train_df['HouseFloor'].median()","9baeda6a":"floor_outliers = train_df.loc[train_df['Floor'] > train_df['HouseFloor']].index\nfloor_outliers","b918e657":"#  \u0437\u0430\u043c\u0435\u043d\u0430 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0449\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043d\u0430 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u043c\u0435\u0436\u0434\u0443 1 \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c \u044d\u0442\u0430\u0436\u0430\u043c\u0438\ntrain_df.loc[floor_outliers, 'Floor'] = train_df.loc[floor_outliers, 'HouseFloor'].apply(lambda x: random.randint(1, x))","957d0ace":"(train_df['Floor'] > train_df['HouseFloor']).sum()","a02f8272":"train_df.loc[19, ['HouseFloor', 'Floor']]","6a877543":"train_df['HouseYear'].sort_values(ascending=False)","af28e75c":"train_df.loc[train_df['HouseYear'] > 2020, 'HouseYear'] = 2020 # \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043a\u043b\u0430\u0441\u0441\u0430 \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u0437\u0430\u043c\u0435\u043d\u0443 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0433\u043e\u0434","65524b2c":"train_df.loc[8828]","9a71db4c":"train_df.isna().sum()","5aa59acd":"train_df[['Square', 'LifeSquare', 'KitchenSquare']].head(10)","233cfca1":"train_df['LifeSquare_NaN'] = train_df['LifeSquare'].isna() * 1\ntrain_df[['Square', 'LifeSquare', 'KitchenSquare', 'LifeSquare_NaN']].head()","dcfa3bc3":"#  \u0444\u043e\u0440\u043c\u0443\u043b\u0438\u0440\u043e\u0432\u043a\u0430 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0438:  LifeSquare - \u043f\u0443\u0441\u0442\u044b\u0435 \u0437\u0430\u043d\u0430\u0447\u0435\u043d\u0438\u044f, Square \u0438 KitchenSquare - \u043d\u0435 \u043f\u0443\u0441\u0442\u044b\u0435\ncondition = (train_df['LifeSquare'].isna()) & (~train_df['Square'].isna()) & (~train_df['KitchenSquare'].isna())\n\n#  \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0443\u0441\u0442\u044b\u0435 \u043f\u043e\u043b\u044f \u0436\u0438\u043b\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 LifeSquare \u0440\u0430\u0441\u0447\u0435\u0442\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c.  \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u043c, \u0447\u0442\u043e \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0432\u0441\u0435\u0445 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u043d\u0435\u0436\u0438\u043b\u044b\u0445 \u043f\u043e\u043c\u0435\u0449\u0435\u043d\u0438\u0439 = 3 \u043a\u0432 \u043c\ntrain_df.loc[condition, 'LifeSquare'] = train_df.loc[condition, 'Square'] - train_df.loc[condition, 'KitchenSquare'] - 3","b9ddd1bd":"train_df[['Square', 'LifeSquare', 'KitchenSquare', 'LifeSquare_NaN']].head()","eb29ad7f":"# \u043f\u043e\u0447\u0442\u0438 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432\u0441\u0435\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 =NaN.  \u0443\u0434\u0430\u043b\u044f\u0435\u043c\ntrain_df.drop('Healthcare_1', axis=1, inplace=True)","2b034578":"class DataPreprocessing:\n    \n    def __init__(self):\n        self.medians=None\n        self.kitchen_square_quantile = None\n        \n    def fit(self, X):\n        \"\"\"\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\"\"\"       \n        # \u0420\u0430\u0441\u0447\u0435\u0442 \u043c\u0435\u0434\u0438\u0430\u043d\n        self.medians = X.median()\n        self.kitchen_square_quantile = X['KitchenSquare'].quantile(.975)\n        \n    def transform(self, X):\n        \"\"\"\u0422\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n\n        # Rooms\n        X['Rooms_outlier'] = 0\n        X.loc[(X['Rooms'] == 0) | (X['Rooms'] >= 6), 'Rooms_outlier'] = 1\n        \n        X.loc[X['Rooms'] == 0, 'Rooms'] = 1\n        X.loc[X['Rooms'] >= 6, 'Rooms'] = self.medians['Rooms']\n        \n        # KitchenSquare\n        condition = (X['KitchenSquare'].isna()) | (X['KitchenSquare'] > self.kitchen_square_quantile)\n        \n        X.loc[condition, 'KitchenSquare'] = self.medians['KitchenSquare']\n\n        X.loc[X['KitchenSquare'] < 3, 'KitchenSquare'] = 3\n        \n        # HouseFloor, Floor\n        X['HouseFloor_outlier'] = 0\n        X.loc[X['HouseFloor'] == 0, 'HouseFloor_outlier'] = 1\n        X.loc[X['Floor'] > X['HouseFloor'], 'HouseFloor_outlier'] = 1\n        \n        X.loc[X['HouseFloor'] == 0, 'HouseFloor'] = self.medians['HouseFloor']\n        \n        floor_outliers = X.loc[X['Floor'] > X['HouseFloor']].index\n        X.loc[floor_outliers, 'Floor'] = X.loc[floor_outliers, 'HouseFloor'].apply(lambda x: random.randint(1, x))\n        \n        # HouseYear\n        current_year = datetime.now().year\n        \n        X['HouseYear_outlier'] = 0\n        X.loc[X['HouseYear'] > current_year, 'HouseYear_outlier'] = 1\n        \n        X.loc[X['HouseYear'] > current_year, 'HouseYear'] = current_year\n        \n        # Healthcare_1\n        if 'Healthcare_1' in X.columns:\n            X.drop('Healthcare_1', axis=1, inplace=True)\n            \n        # LifeSquare\n        X['LifeSquare_nan'] = X['LifeSquare'].isna() * 1\n        condition = (X['LifeSquare'].isna()) & (~X['Square'].isna()) & (~X['KitchenSquare'].isna())\n        \n        #  \u0441\u0447\u0438\u0442\u0430\u0435\u043c, \u0447\u0442\u043e \u043f\u043e\u043b\u0449\u0430\u0434\u044c \u043d\u0435\u0436\u0438\u043b\u044b\u0445 \u043a\u0440\u043e\u043c\u0435 \u043a\u0443\u0445\u043d\u0438 = 20% \u043e\u0442 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 (\u0431\u044b\u043b\u043e 3 \u043a\u0432 \u043c)\n        X.loc[condition, 'LifeSquare'] = X.loc[condition, 'Square'] - X.loc[condition, 'KitchenSquare'] - X.loc[condition, 'Square']*.2\n        \n        \n        X.fillna(self.medians, inplace=True)\n        \n        return X","02472008":"#  ecology 2,3, shops2\nbinary_to_numbers = {'A': 0, 'B': 1}\n\ntrain_df['Ecology_2'] = train_df['Ecology_2'].replace(binary_to_numbers)\ntrain_df['Ecology_3'] = train_df['Ecology_3'].replace(binary_to_numbers)\ntrain_df['Shops_2'] = train_df['Shops_2'].replace(binary_to_numbers)","4bb361b4":"train_df[['Ecology_2', 'Ecology_3', 'Shops_2']].sample()","0ba131eb":"district_size = train_df['DistrictId'].value_counts().reset_index().rename(columns={'index':'DistrictId', 'DistrictId':'DistrictSize'})","39469b4d":"district_size","7c60c828":"train_df = train_df.merge(district_size, on = 'DistrictId', how = 'left')\ntrain_df.head()","55908425":"(train_df['DistrictSize'] > 100).value_counts()","388795b3":"train_df['IsDistrictLarge'] = (train_df['DistrictSize'] > 100).astype(int)","8c9474f8":"train_df.head()","262774fe":"med_price_by_district = train_df.groupby(['DistrictId', 'Rooms'], as_index=False).agg({'Price':'median'}).rename(columns={'Price':'MedPriceByDistrict'})\n\nmed_price_by_district.head()","06d2ef74":"train_df = train_df.merge(med_price_by_district, on = ['DistrictId', 'Rooms'], how = 'left')","5e31d489":"train_df.head()","deee5243":"#  \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e \u044d\u0442\u0430\u0436\u0443 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b\n\ndef floor_to_cat(X):\n\n    X['floor_cat'] = 0\n\n    X.loc[X['Floor'] <= 3, 'floor_cat'] = 1  \n    X.loc[(X['Floor'] > 3) & (X['Floor'] <= 5), 'floor_cat'] = 2\n    X.loc[(X['Floor'] > 5) & (X['Floor'] <= 9), 'floor_cat'] = 3\n    X.loc[(X['Floor'] > 9) & (X['Floor'] <= 15), 'floor_cat'] = 4\n    X.loc[X['Floor'] > 15, 'floor_cat'] = 5\n\n    return X","16ca6b47":"#  \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e \u0433\u043e\u0434\u0443 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043e\u043c\u0430\n\ndef year_to_cat(X):\n\n    X['year_cat'] = 0\n\n    X.loc[X['HouseYear'] <= 1941, 'year_cat'] = 1\n    X.loc[(X['HouseYear'] > 1941) & (X['HouseYear'] <= 1945), 'year_cat'] = 2\n    X.loc[(X['HouseYear'] > 1945) & (X['HouseYear'] <= 1980), 'year_cat'] = 3\n    X.loc[(X['HouseYear'] > 1980) & (X['HouseYear'] <= 2000), 'year_cat'] = 4\n    X.loc[(X['HouseYear'] > 2000) & (X['HouseYear'] <= 2010), 'year_cat'] = 5\n    X.loc[(X['HouseYear'] > 2010), 'year_cat'] = 6\n\n    return X","f57e20f9":"train_df = year_to_cat(train_df)\ntrain_df = floor_to_cat(train_df)\ntrain_df.head()","c94987e9":"med_price_by_floor_year = train_df.groupby(['year_cat', 'floor_cat'], as_index=False).agg({'Price':'median'}).rename(columns={'Price':'MedPriceByFloorYear'})\nmed_price_by_floor_year.head()","fe1e953a":"train_df = train_df.merge(med_price_by_floor_year, on = ['year_cat', 'floor_cat'], how = 'left')\ntrain_df.head()","3cc043a7":"class FeatureGenetator():\n    \"\"\"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0447\"\"\"\n    \n    def __init__(self):\n        self.DistrictId_counts = None\n        self.binary_to_numbers = None\n        self.med_price_by_district = None\n        self.med_price_by_floor_year = None\n        self.house_year_max = None\n        self.floor_max = None\n        self.district_size = None\n        \n    def fit(self, X, y=None):\n        \n        X = X.copy()\n        \n        # Binary features\n        self.binary_to_numbers = {'A': 0, 'B': 1}\n        \n        # DistrictID\n        self.district_size = X['DistrictId'].value_counts().reset_index().rename(columns={'index':'DistrictId', 'DistrictId':'DistrictSize'})\n                \n        # Target encoding\n        ## District, Rooms\n        df = X.copy()\n        \n        if y is not None:\n            df['Price'] = y.values\n            \n            self.med_price_by_district = df.groupby(['DistrictId', 'Rooms'], as_index=False).agg({'Price':'median'}).rename(columns={'Price':'MedPriceByDistrict'})\n            \n            self.med_price_by_district_median = self.med_price_by_district['MedPriceByDistrict'].median()\n            \n        ## floor, year\n        if y is not None:\n            self.floor_max = df['Floor'].max()\n            self.house_year_max = df['HouseYear'].max()\n            df['Price'] = y.values\n            df = self.floor_to_cat(df)\n            df = self.year_to_cat(df)\n            self.med_price_by_floor_year = df.groupby(['year_cat', 'floor_cat'], as_index=False).agg({'Price':'median'}).rename(columns={'Price':'MedPriceByFloorYear'})\n            self.med_price_by_floor_year_median = self.med_price_by_floor_year['MedPriceByFloorYear'].median()\n        \n\n        \n    def transform(self, X):\n        \n        # Binary features\n        X['Ecology_2'] = X['Ecology_2'].map(self.binary_to_numbers)  # self.binary_to_numbers = {'A': 0, 'B': 1}\n        X['Ecology_3'] = X['Ecology_3'].map(self.binary_to_numbers)\n        X['Shops_2'] = X['Shops_2'].map(self.binary_to_numbers)\n        \n        # DistrictId, IsDistrictLarge\n        X = X.merge(self.district_size, on='DistrictId', how='left')\n        \n        X['new_district'] = 0\n        X.loc[X['DistrictSize'].isna(), 'new_district'] = 1\n        \n        X['DistrictSize'].fillna(5, inplace=True)\n        \n        X['IsDistrictLarge'] = (X['DistrictSize'] > 100).astype(int)\n        \n        # More categorical features\n        X = self.floor_to_cat(X)  # add floor_cat column\n        X = self.year_to_cat(X)   # add year_cat column\n        \n        # Target encoding\n        if self.med_price_by_district is not None:\n            X = X.merge(self.med_price_by_district, on=['DistrictId', 'Rooms'], how='left')\n            X.fillna(self.med_price_by_district_median, inplace=True)\n            \n        if self.med_price_by_floor_year is not None:\n            X = X.merge(self.med_price_by_floor_year, on=['year_cat', 'floor_cat'], how='left')\n            X.fillna(self.med_price_by_floor_year_median, inplace=True)\n        \n        return X\n    \n \n    def floor_to_cat(self, X):\n\n        X['floor_cat'] = 0\n\n        X.loc[X['Floor'] <= 3, 'floor_cat'] = 1  \n        X.loc[(X['Floor'] > 3) & (X['Floor'] <= 5), 'floor_cat'] = 2\n        X.loc[(X['Floor'] > 5) & (X['Floor'] <= 9), 'floor_cat'] = 3\n        X.loc[(X['Floor'] > 9) & (X['Floor'] <= 15), 'floor_cat'] = 4\n        X.loc[X['Floor'] > 15, 'floor_cat'] = 5\n\n        X['floor_cat'].fillna(-1, inplace=True)\n        \n        return X\n     \n    \n    def year_to_cat(self, X):\n\n        X['year_cat'] = 0\n\n        X.loc[X['HouseYear'] <= 1941, 'year_cat'] = 1\n        X.loc[(X['HouseYear'] > 1941) & (X['HouseYear'] <= 1945), 'year_cat'] = 2\n        X.loc[(X['HouseYear'] > 1945) & (X['HouseYear'] <= 1980), 'year_cat'] = 3\n        X.loc[(X['HouseYear'] > 1980) & (X['HouseYear'] <= 2000), 'year_cat'] = 4\n        X.loc[(X['HouseYear'] > 2000) & (X['HouseYear'] <= 2010), 'year_cat'] = 5\n        X.loc[(X['HouseYear'] > 2010), 'year_cat'] = 6\n\n        X['year_cat'].fillna(-1, inplace=True)\n\n        return X","d745ea62":"train_df.columns.tolist()","59421400":"feature_names = ['Rooms', 'Square', 'LifeSquare', 'KitchenSquare', 'Floor', 'HouseFloor', 'HouseYear',\n                 'Ecology_1', 'Ecology_2', 'Ecology_3', 'Social_1', 'Social_2', 'Social_3',\n                 'Helthcare_2', 'Shops_1', 'Shops_2']\n\nnew_feature_names = ['Rooms_outlier', 'HouseFloor_outlier', 'HouseYear_outlier', 'LifeSquare_nan', 'DistrictSize',\n                     'IsDistrictLarge',  'MedPriceByFloorYear']  #  MedPriceByDistrict', 'new_district', \n\ntarget_name = 'Price'","bc08b21f":"len(feature_names)+len(new_feature_names)","f3278eb4":"train_df = pd.read_csv(TRAIN_DATASET_PATH)\ntest_df = pd.read_csv(TEST_DATASET_PATH)","b1ffc8f2":"X = train_df.drop(columns=target_name)\ny = train_df[target_name]","cfb894c8":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.33, shuffle=True, random_state=21)","d284c0e2":"X_train.shape, X_valid.shape, test_df.shape","cb6925f6":"preprocessor = DataPreprocessing()\npreprocessor.fit(X_train)  #  fit \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043a X_train\n\nX_train = preprocessor.transform(X_train)\nX_valid = preprocessor.transform(X_valid)\ntest_df = preprocessor.transform(test_df)\n\nX_train.shape, X_valid.shape, test_df.shape","6c8bca25":"features_gen = FeatureGenetator()\nfeatures_gen.fit(X_train, y_train)  #  fit \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043a X_train, y_train\n\nX_train = features_gen.transform(X_train)\nX_valid = features_gen.transform(X_valid)\ntest_df = features_gen.transform(test_df)\n\nX_train.shape, X_valid.shape, test_df.shape","8a7c0976":"\"\"\" \u0432\u043e \u0432\u0441\u0435\u0445 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430\u0445 \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 5 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \"\"\"\nX_train = X_train[feature_names + new_feature_names]\nX_valid = X_valid[feature_names + new_feature_names]\ntest_df = test_df[feature_names + new_feature_names]","32629cc1":"X_train.shape, X_valid.shape, test_df.shape","89024bc3":"X_train.isna().sum().sum(), X_valid.isna().sum().sum(), test_df.isna().sum().sum()","144d3cd7":"gb_model = GradientBoostingRegressor(criterion='mse',\n                                     max_depth=6,\n                                     min_samples_leaf=50, \n                                     n_estimators = 2000,\n                                     random_state=21, \n                                     max_features='sqrt', \n                                     loss='huber', \n                                     learning_rate=0.025)\ngb_model.fit(X_train, y_train)","2ceb7ff4":"y_train_preds = gb_model.predict(X_train)\ny_test_preds = gb_model.predict(X_valid)\n\nevaluate_preds(y_train, y_train_preds, y_valid, y_test_preds)","80e239f2":"cv_score = cross_val_score(gb_model, X_train, y_train, scoring='r2', cv=KFold(n_splits=3, shuffle=True, random_state=21))\ncv_score.mean()","e7f3120d":"feature_importances = pd.DataFrame(zip(X_train.columns, gb_model.feature_importances_), \n                                   columns=['feature_name', 'importance'])\n\nfeature_importances.sort_values(by='importance', ascending=False)","c40a7ed3":"test_df.shape","37cb604a":"test_df","77a657b6":"#submit = pd.read_csv('.\/sample_submission.csv')\nsubmit = pd.read_csv('\/kaggle\/input\/real-estate-price-prediction-moscow\/sample_submission.csv')\nsubmit.head()","bf4da2d5":"predictions = gb_model.predict(test_df)\npredictions","abfc4cde":"len(predictions)","90f3b827":"submit['Price'] = predictions\nsubmit.head()","ee63771e":"submit.to_csv('rf_submit.csv', index=False)","e0b1d7b1":"### 3. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432  <a class='anchor' id='nan'>","cf6b1a74":"### 6. \u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043d\u0430 train \u0438 test  <a class='anchor' id='split'>","5a265ff6":"**LifeSquare**","498e81ef":"**\u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**","b61e5570":"**\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0438 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432**","6b8db064":"\u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043b\u0438\u0441\u044c \u043c\u043e\u0434\u0435\u043b\u0438 RandomForestRegressor \u0438 GradientBoostingRegressor.  \u041c\u043e\u0434\u0435\u043b\u044c GradientBoostingRegressor \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0430 \u043b\u0443\u0447\u0448\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b, \u0447\u0435\u043c Random Forest.","2e8c4ff7":"\u0421\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435. \u041f\u043e \u0441\u0442\u0440\u043e\u043a\u0430\u043c - \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f, \u043f\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u043c - \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438.","95a51c26":"**\u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432**","7c18c699":"**\u041e\u0446\u0435\u043d\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438**","f3c44f91":"\u043e\u0442\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u0443\u0434\u0435\u043c \u043e\u0431\u0443\u0447\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c.  \u0432 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u044f\u0445 \u043e\u0442\u043f\u0430\u043b\u0438 \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438  MedPriceByDistrict (\u0432\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u0431\u043e\u043b\u0435\u0435 50% => \u0441\u0438\u043b\u044c\u043d\u043e\u0435 \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438), new_district (\u0432\u0430\u0436\u043d\u043e\u0441\u0442\u044c = 0)","82f683e4":"**\u041d\u043e\u043c\u0438\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435**","6c68b15a":"**\u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u043c\u043e\u0434\u0435\u043b\u0438**","884fc471":"### 2. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432  <a class='anchor' id='outlier'>\n\u0427\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u0441 \u043d\u0438\u043c\u0438?\n1. \u0412\u044b\u043a\u0438\u043d\u0443\u0442\u044c \u044d\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 (\u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 \u0442\u0440\u0435\u0439\u043d\u0435, \u043d\u0430 \u0442\u0435\u0441\u0442\u0435 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0432\u044b\u043a\u0438\u0434\u044b\u0432\u0430\u0435\u043c)\n2. \u0417\u0430\u043c\u0435\u043d\u044f\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438 (\u043c\u0435\u0434\u0438\u0430\u043d\u044b, \u0441\u0440\u0435\u0434\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, np.clip \u0438 \u0442.\u0434.)\n3. \u0414\u0435\u043b\u0430\u0442\u044c\/\u043d\u0435 \u0434\u0435\u043b\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0444\u0438\u0447\u0443\n4. \u041d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0434\u0435\u043b\u0430\u0442\u044c","534f948c":"### 5. \u041e\u0442\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432  <a class='anchor' id='feature_selection'>","54f46202":"### 7. \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438  <a class='anchor' id='modeling'>","689b278f":"**KitchenSquare** ","4b605484":"### 8. \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435  <a class='anchor' id='prediction'>\n\n1. \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0442\u0435 \u0436\u0435 \u044d\u0442\u0430\u043f\u044b \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u043d\u0438\u044f\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n2. \u041d\u0435 \u043f\u043e\u0442\u0435\u0440\u044f\u0442\u044c \u0438 \u043d\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u0448\u0430\u0442\u044c \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u043f\u0440\u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0438 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u043e\u0432\n3. \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0434\u043b\u044f \u0432\u0441\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0438\u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 (\u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u0442\u0440\u043e\u043a)","cfe5d658":"**Rooms**","7b92ef97":"**HouseFloor, Floor**","0d0e6977":"**HouseYear**","ddc2d737":"**\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435**","09913754":"**Dummies**","ca9f8cc0":"**\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435**","bf5a7a1f":"### 2. \u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445<a class='anchor' id='types'>","b3b562f0":"### 4. \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432  <a class='anchor' id='feature'>","08b4e56b":"**DistrictSize, IsDistrictLarge**","b7284f08":"### 1. \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 <a class='anchor' id='load'>\n\n\n**\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430**\n\n\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n* Id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b\n* DistrictId - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0440\u0430\u0439\u043e\u043d\u0430\n* Rooms - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442\n* Square - \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* LifeSquare - \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* KitchenSquare - \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438\n* Floor - \u044d\u0442\u0430\u0436\n* HouseFloor - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439 \u0432 \u0434\u043e\u043c\u0435\n* HouseYear - \u0433\u043e\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043e\u043c\u0430\n* Ecology_1, Ecology_2, Ecology_3 - \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* Social_1, Social_2, Social_3 - \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* Healthcare_1, Helthcare_2 - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043e\u0445\u0440\u0430\u043d\u043e\u0439 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u044f\n* Shops_1, Shops_2 - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043d\u0430\u043b\u0438\u0447\u0438\u0435\u043c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432, \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u0446\u0435\u043d\u0442\u0440\u043e\u0432\n* Price - \u0446\u0435\u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b","f0bc70d3":"**MedPriceByFloorYear**","08243896":"**\u041a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f**","2037dadb":"**\u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**","14073a58":"**Healthcare_1**","08898cc0":"**\u041f\u0443\u0442\u0438 \u043a \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f\u043c \u0438 \u0444\u0430\u0439\u043b\u0430\u043c**","d9d91ae9":"**\u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f**","cb893129":"## 1. EDA  <a class='anchor' id='eda'>\n\u0414\u0435\u043b\u0430\u0435\u043c EDA \u0434\u043b\u044f:\n- \u0418\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\n- \u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f NaN\n- \u0418\u0434\u0435\u0439 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0447","2ddcc099":"**MedPriceByDistrict**"}}