{"cell_type":{"99da3f85":"code","2230bfb5":"code","7a96bde8":"code","1e70f220":"code","8f8b0bfa":"code","85bb7ea7":"code","d7da6bc9":"code","2345fbf2":"code","2a5f0dc8":"code","ab444b79":"code","2bdfa7f4":"code","715f1d07":"code","4c14ea49":"code","7c5c24d6":"code","5f12f6a9":"code","e4a8d15a":"code","aefef7a5":"code","7b785215":"code","550e13c4":"code","fd0bf78d":"code","abb5ad63":"code","6dec03dc":"code","eaedb6d0":"markdown","8cdf504e":"markdown","bcdcd4b8":"markdown","5d7af5e1":"markdown","56ad8bf8":"markdown","2c5f83f6":"markdown","d3678712":"markdown","b0edeffd":"markdown","192969a9":"markdown","2045f63f":"markdown","4822965e":"markdown","078bc785":"markdown","85450b91":"markdown","fde918f6":"markdown","37424d32":"markdown"},"source":{"99da3f85":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","2230bfb5":"dataset = pd.read_csv(\"..\/input\/google-play-store-apps\/googleplaystore.csv\")","7a96bde8":"dataset.head()","1e70f220":"dataset.describe()","8f8b0bfa":"dataset.info()","85bb7ea7":"print(\"Category unique values:\",dataset[\"Category\"].unique())\n\nprint(\"Content rating unique values:\",dataset[\"Content Rating\"].unique())\n\nprint(\"Type unique values:\",dataset[\"Type\"].unique())\n\n","d7da6bc9":"# Drop nan values\ndataset.drop(dataset[dataset[\"Type\"] == \"0\"].index,inplace = True)\ndataset.drop(dataset[dataset[\"Type\"].isna()].index,inplace = True)\ndataset.drop(dataset[dataset[\"Category\"] == \"1.9\"].index,inplace = True)\ndataset[\"Content Rating\"].dropna(inplace = True)","2345fbf2":"# Clean Price column\ndataset[\"Price\"] = dataset[\"Price\"].apply(lambda x: float(x.replace(\"$\",'')))\n# Convert reviews to int\ndataset[\"Reviews\"] = dataset[\"Reviews\"].apply(lambda x: int(x))","2a5f0dc8":"# Clean Installs column\ndataset['Installs'] = dataset['Installs'].apply(lambda x: x.replace('+', '') if '+' in str(x) else x)\ndataset['Installs'] = dataset['Installs'].apply(lambda x: x.replace(',', '') if ',' in str(x) else x)\ndataset['Installs'] = dataset['Installs'].apply(lambda x: int(x))","ab444b79":"# Make another dataset for Size analysis as dropping rows will reduce the amount of dataset\ndef kb_to_mb(row):\n    \n    if \"k\" in str(row):\n        row = row.replace('k','')\n        size = float(row)\/1000\n    else:\n        row = row.replace(\"M\",'').replace(\",\",'').replace(\"+\",'')\n        size = float(row)\n    return size\nds_clear_size = dataset[dataset[\"Size\"] != 'Varies with device']\nds_clear_size[\"Size\"] = ds_clear_size[\"Size\"].apply(kb_to_mb)","2bdfa7f4":"sns.distplot(dataset[\"Rating\"],kde = True,bins = 20)","715f1d07":"sns.jointplot(y = \"Size\",x = \"Rating\",data=ds_clear_size,kind=\"hex\")","4c14ea49":"sns.pairplot(ds_clear_size,kind = \"scatter\",diag_kind = \"hist\",hue = \"Type\")","7c5c24d6":"ax = sns.stripplot(x = \"Content Rating\",y = \"Rating\",data=dataset,jitter = True,hue = \"Type\",dodge = True)\nax.set_xticklabels(ax.get_xticklabels(),rotation = 30)","5f12f6a9":"ax = sns.swarmplot(x = \"Content Rating\",y = \"Rating\",data=dataset[1500:2000],hue = \"Type\")\nax.set_xticklabels(ax.get_xticklabels(),rotation = 30)","e4a8d15a":"ax = sns.boxplot(x = \"Content Rating\",y = \"Rating\",data=dataset,hue = \"Type\")\nax.set_xticklabels(ax.get_xticklabels(),rotation = 30)","aefef7a5":"ax = sns.boxenplot(x = \"Content Rating\",y = \"Rating\",data=dataset,hue = \"Type\")\nax.set_xticklabels(ax.get_xticklabels(),rotation = 30)","7b785215":"ax = sns.violinplot(x = \"Content Rating\",y = \"Rating\",data=dataset,hue = \"Type\",split = True,inner = \"quartile\")\nax.set_xticklabels(ax.get_xticklabels(),rotation = 30)","550e13c4":"sns.countplot(x = \"Type\",data=dataset,hue = \"Content Rating\")","fd0bf78d":"ax = sns.barplot(x = \"Content Rating\",y = \"Rating\",data=dataset,hue = \"Type\",ci=\"sd\")\nax.set_xticklabels(ax.get_xticklabels(),rotation = 30)","abb5ad63":"dataset.corr()","6dec03dc":"sns.heatmap(ds_clear_size.corr(),annot = True,linewidth = .5)","eaedb6d0":"<a id = 18><\/a>\n# Heatmap\nWith the help of pandas we can see correlation value among numerical features( df.corr() ).Adding seaborn will make it easier to grasp the information with just one look.seaborn.heatmap() we can visualize matrices.From the result we can easily see that there is correlation between Installs and Reviews which is pretty reasonable.Note: correlation doesnt;\n<br>The attributes that you will most need in seaborn.heatmap() are:\n\n* data - dataframe that contains data to visualize\n* annot - whether to write correlation values on plot or not(True,False)\n* fmt - text format when using annotation\n* linewidth - width of the lines that will divide each cell","8cdf504e":"<a id=\"3\"><\/a> <br>\n# Distribution of dataset - univariate and bivariate\n<a id=\"4\"><\/a>\n# Distplot\nWith sns.distplot function we can see how the univariate values has distributed.\nFrom the distrubiton of ratings we can easily see that most apps in PlayStore has rating near to 4.5<br>\n<br>The attributes that you will most need in seaborn.distplot() are:\n* a - Series object(observed data)\n* kde - Whether to plot a gaussian kernel density estimate.Takes boolean(True,False).Default - True\n* bins - Number of bins in histogram.Default - finds optimal","bcdcd4b8":"<a id = 11><\/a>\n# Categorical distribution plots:\n<a id = 12><\/a>\n# Boxplot\nWe saw that with massive dataset we can't plot scatter and get information,so we use sns.boxplot() to see the distribution among categories.\nIf you want to get information about boxplots,this article will be more than enough:https:\/\/towardsdatascience.com\/understanding-boxplots-5e2df7bcbd51\n\n<br>The attributes that you will most need in seaborn.boxplot() are:\n* data - dataframe that contains data to visualize\n* x,y - names of variables in data\n* hue - column in dataframe to categorize plots","5d7af5e1":"# Columns definition\n* **App** - name of application\n* **Category** - category that app belongs to (ex:ART_AND_DESIGN)\n* **Rating** - overall user rating of the app   \n* **Reviews** - number of user reviews for the app \n* **Size** - size of the app (as when scraped)\n* **Installs** -Number of user downloads\/installs for the app (as when scraped)\n* **Type** - paid or Free\n* **Price** - price of the app (as when scraped)\n* **Content Rating** - age group the app is targeted at - Children \/ Mature 21+ \/ Adult\n* **Genre** - beside category,multiple genres app belongs to(ex: Art & Design;Creativity)\n* **Last Updated** - Date when the app was last updated on Play Store \n* **Current Ver** - Current version of the app available on Play Store \n* **Android Ver** - Min required Android version","56ad8bf8":"<a id = 17><\/a>\n# Barplot\nA bar plot represents an estimate of central tendency for a numeric variable with the height of each rectangle and provides some indication of the uncertainty around that estimate using error bars.\n<br>The attributes that you will most need in seaborn.barplot() are:\n\n* data - dataframe that contains data to visualize\n* x or y - names of variables in data,x for vertical and y for horizontal plots\n* hue - column in dataframe to categorize plots\n* ci - size of confidence intervals to draw around estimated values(\"sd\" just draw standard deviation,float,None)","2c5f83f6":"<a id=\"5\"><\/a>\n# Jointplot\nseaborn.jointplot() is used to draw a bivariate graph that also shows univariate distribution of values.<br>\n<br>The attributes that you will most need in seaborn.jointplot() are:\n* x,y - columns in data for x and y axis\n* data - dataframe consisting x and y columns\n* kind - kind of plot to draw(\u201cscatter\u201d,\u201creg\u201d,\u201cresid\u201d,\u201ckde\u201d,\u201chex\u201d )\n","d3678712":"# Seaborn\n\nSeaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics.\nSo if you are familiar with matplotlib it will be very easy for you, but if you are not don't worry because seaborn has pretty easy api draw graphics faster.\n\nContent:<br>\n* [Get Familiar with data](#1)\n* [Cleaning Data](#2)\n* [Distribution of dataset - univariate and bivariate](#3)\n    * [Distplot](#4)\n    * [Jointplot](#5)\n    * [Pairplot](#6)\n* [Plotting categorical features](#7)\n* [Categorical scatterplots](#8)\n    * [Stripplot](#9)\n    * [Swarmplot](#10)\n* [Categorical distribution](#11)\n    * [Boxplot](#12)\n    * [Boxenplot](#13)\n    * [Violinplot](#14)\n* [Categorical estimate plots](#15)\n    * [Countplot](#16)\n    * [Barplot](#17)\n* [Heatmap](#18)","b0edeffd":"<a id=2><\/a>\n# Cleaning data","192969a9":"<a id = 14><\/a>\n# Violinplot\nSimilar approach to boxplot is violinplot which combines boxplot and kernel density estimation(kde).\n<br>The attributes that you will most need in seaborn.violinplot() are:\n* data - dataframe that contains data to visualize\n* x,y - names of variables in data\n* hue - column in dataframe to categorize plots\n* split - whether combine hue categories\n* inner - draw datapoints in violinplot(\u201cbox\u201d - for boxplot,\u201cquartile\u201d - showing quartiles,\u201cpoint\u201d and \u201cstick\u201d to show each datapoint,None )","2045f63f":"<a id = 15><\/a>\n# Categorical estimate plots\n<a id = 16><\/a>\n# Countplot\nShows the number of datapoints in each category.\n<br>The attributes that you will most need in seaborn.countplot() are:\n\n* data - dataframe that contains data to visualize\n* x or y - names of variables in data,x for vertical and y for horizontal plots\n* hue - column in dataframe to categorize plots\n","4822965e":"<a id = 1><\/a>\n# Get Familiar with Data\nBefore diving in seaborn functions lets first check what we have in our data<br>\nGoogle Play, formerly Android Market, is an American digital distribution service operated and developed by Google. It serves as the official app store for devices running on \"Google certified\" Android operating system, allowing users to browse and download applications developed with the Android software development kit (SDK) and published through Google. Google Play also serves as a digital media store, offering music, books, movies, and television programs. It previously offered Google hardware devices for purchase until the introduction of a separate online hardware retailer, Google Store, on March 11, 2015, and it also offered news publications and magazines before the revamp of Google News on May 15, 2018.","078bc785":"<a id =13><\/a>\n# Boxenplot\nSame as boxplot but gives more information about distribution.Good for larger datasets.\n<br>The attributes that you will most need in seaborn.boxenplot() are:\n* data - dataframe that contains data to visualize\n* x,y - names of variables in data\n* hue - column in dataframe to categorize plots","85450b91":"<a id = 7><\/a>\n# Plotting Categorical Features\n<a id = 8><\/a>\n\n# Categorical scatterplots:\n<a id = 9><\/a>\n# Stripplot\n\n\nstripplot() function treats one of the variables as categorical and draws data at ordinal positions. With the help of this funtion you can see scatter of numerical values among the categories\n\n<br> **Small Tip**: there can be many categories or long names in categories,to prevent overlapping them you can return an axes object from the function and give rotation to tiks with set_xticklabels() function(giving rotation degree),it requires names of labels we can get them with the help of get_xticklabels() function\n\n<br>The attributes that you will most need in seaborn.stripplot() are:\n* data - dataframe that contains data to visualize\n* x,y - names of variables in data\n* hue - column in dataframe to categorize plots\n* jitter - amount of jitter,prevent overlapping points\n* dodge - when hue used to split plots\n","fde918f6":"<a id=6><\/a>\n# Pairplot\nShows pairwise relations between numerical features<br>\n<br>The attributes that you will most need in seaborn.pairplot() are:\n* data - dataframe that contains data to visualize\n* kind - kind of plot to draw in pairwise relations(\u201cscatter\u201d,\u201creg\"}\n* diag_kind - kind of plots in diagonal{\u2018auto\u2019, \u2018hist\u2019, \u2018kde\u2019, None}\n* hue - column in dataframe to categorize plots","37424d32":"<a id = 10><\/a>\n# Swarmplot\nSwarmplot does same job as stripplot with one difference that no point overlaps in graph and helps to see distribution. As we have too many instances we will use sliced version.\n<br>The attributes that you will most need in seaborn.swarmplot() are:\n* data - dataframe that contains data to visualize\n* x,y - names of variables in data\n* hue - column in dataframe to categorize plots\n* dodge - when hue used to split plots"}}