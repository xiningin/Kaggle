{"cell_type":{"62fd12d9":"code","2905cbe2":"code","1bf047b6":"code","3a8eb1e4":"code","ed3ff1e5":"code","3d4107bc":"code","6d22c7ad":"code","ca3e6673":"code","21b09199":"code","0c5c32a3":"code","9963b2e5":"code","7fb74e36":"code","9e190e24":"code","a45a9504":"code","fb0e3320":"code","811a28ee":"code","fe5f50b5":"code","58b10d93":"code","8423d014":"code","45637b5b":"markdown","9060ced4":"markdown","676a45f0":"markdown","56bce42b":"markdown","421e2a3b":"markdown","7a2b01a9":"markdown","1b097b52":"markdown","98b8eaf8":"markdown","ec269858":"markdown","682da904":"markdown","4cddcfc7":"markdown","328b7d9d":"markdown","206350a1":"markdown","258a28ee":"markdown","40b87468":"markdown","68328a0a":"markdown","916caf2d":"markdown","365488f3":"markdown","c4b69fa4":"markdown"},"source":{"62fd12d9":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd","2905cbe2":"dfStudents = pd.read_csv('..\/input\/students-performance-in-exams\/StudentsPerformance.csv')\ndfStudents.dataframeName = 'StudentsPerformance.csv'","1bf047b6":"rows, cols = dfStudents.shape\nprint(f'{rows} observaciones y {cols} caracter\u00edsticas')","3a8eb1e4":"dfStudents.head(10)","ed3ff1e5":"def plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]]\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('Cantidad de observaciones')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (columna {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()","3d4107bc":"plotPerColumnDistribution(dfStudents, 10, 5)","6d22c7ad":"def plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.show()\n","ca3e6673":"plotCorrelationMatrix(dfStudents, 8)","21b09199":"def plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","0c5c32a3":"plotScatterMatrix(dfStudents, 9, 10)","9963b2e5":"dfStudents['total score'] = dfStudents['math score']+dfStudents['reading score']+dfStudents['writing score']","7fb74e36":"dfStudents.head(5)","9e190e24":"dfStudents = pd.get_dummies(dfStudents, columns=['gender'])\ndfStudents = pd.get_dummies(dfStudents, columns=['test preparation course'])\ndfStudents = pd.get_dummies(dfStudents, columns=['race\/ethnicity'])\ndfStudents = pd.get_dummies(dfStudents, columns=['parental level of education'])\ndfStudents = pd.get_dummies(dfStudents, columns=['lunch'])","a45a9504":"dfStudents.head()","fb0e3320":"from sklearn.decomposition import PCA","811a28ee":"dfSatander = pd.read_csv('..\/input\/santander-customer-satisfaction\/train.csv')","fe5f50b5":"rows, cols = dfSatander.shape\nprint(f'{rows} observaciones y {cols} caracter\u00edsticas')","58b10d93":"reducer = PCA(n_components=10)\ndfSantanderReduced = reducer.fit_transform(dfSatander)\nrows, cols = dfSantanderReduced.shape\nprint(f'{rows} observaciones y {cols} caracter\u00edsticas')","8423d014":"reducer.explained_variance_ratio_.sum()","45637b5b":"Dimensiones del dataset","9060ced4":"Se importan las bibliotecas necesarias para este ejercicio","676a45f0":"Se reduce su dimensionalidad","56bce42b":"Gr\u00e1ficos de densidad y dispersi\u00f3n","421e2a3b":"## Exploratory Analysis","7a2b01a9":"# **Reducci\u00f3n de la dimensionalidad**","1b097b52":"Se carga el dataset en pandas","98b8eaf8":"Se carga el dataset en pandas","ec269858":"Proporci\u00f3n de esencia del conjunto de datos que se mantuvo despu\u00e9s de la reducci\u00f3n","682da904":"# **Pipeline de Data Science**","4cddcfc7":"Dimensiones del dataset","328b7d9d":"Score total","206350a1":"Gr\u00e1ficos de distribuci\u00f3n (Histogramas y gr\u00e1ficos de barras)","258a28ee":"## Construcci\u00f3n de nuevas caracter\u00edsticas","40b87468":"One hot encoding de variables categ\u00f3ricas","68328a0a":"Se importan las bibliotecas necesarias para este ejercicio","916caf2d":"### Graficando los datos","365488f3":"Se verfican algunas observaciones del dataset","c4b69fa4":"Matriz de correlaci\u00f3n"}}