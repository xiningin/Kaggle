{"cell_type":{"aee016ef":"code","02078265":"code","c259b44e":"code","4f36e6d0":"code","c623e586":"code","5e03c07d":"code","03dbe721":"code","443cf793":"code","f06901ce":"code","b416be57":"code","8418aff9":"code","1995e831":"code","bb67934e":"code","f296ce2c":"code","129c507b":"code","a01de614":"code","a568576e":"code","f1e4c234":"code","0d819de9":"code","dd1252f8":"code","f6e5dc55":"code","ba8ee65f":"code","97fc4bd0":"markdown","a2de5bcf":"markdown","e31ad849":"markdown","4f0167a1":"markdown","fb8f2695":"markdown","57a1e9e4":"markdown"},"source":{"aee016ef":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","02078265":"data = pd.read_csv('..\/input\/2017.csv')","c259b44e":"data.head()","4f36e6d0":"dictionary = {\"SCHOOL\":[\"marmara\",\"istanbul\",\"yildiz\"],\n              \"FACULTY\":[\"engineering\",\"economic sciences\",\"education\"],\n              \"DEPARTMENT\":[\"industry\",\"economy\",\"math teaching\"]}      \ndata_1 = pd.DataFrame(dictionary)","c623e586":"data_1.head()","5e03c07d":"film = [\"titanic\",\"amelie\",\"leon\"]\nimdb = [\"9.7\",\"8.6\",\"7.5\"]\nlabel = [\"film\",\"imdb\"]\ncolumn = [film,imdb]\nzipp = list(zip(label,column))\ndictt = dict(zipp)\ndata_2 = pd.DataFrame(dictt)","03dbe721":"data_2.head()","443cf793":"#Add new columns\ndata_2[\"kind\"] = [\"dram\",\"comedy\",\"dram\"]\ndata_2","f06901ce":"#Broadcasting : Creates new column and assign a value to entire column\ndata_2[\"income\"] = 0\ndata_2","b416be57":"#Line plot\ndata1 = data.loc[:,[\"Happiness.Score\",\"Whisker.high\",\"Whisker.low\"]] #create new data consisting of three columns of data\ndata1.plot() \nplt.show()","8418aff9":"#Subplot\ndata1.plot(subplots = True)\nplt.show()","1995e831":"#Scatter plot\ndata1.plot(kind = \"scatter\",x=\"Whisker.high\",y = \"Whisker.low\")\nplt.show()","bb67934e":"#Histogram\ndata1.plot(kind = \"hist\",y = \"Happiness.Score\",bins = 20,range= (0,10),normed = True)","f296ce2c":"data1.plot(kind = \"hist\",y = \"Happiness.Score\",bins = 5,range= (0,10),normed = True,cumulative = True)","129c507b":"#Histogram subplot with non cumulative and cumulative\nfig, axes = plt.subplots(nrows=2,ncols=1)\ndata1.plot(kind = \"hist\",y = \"Whisker.high\",bins = 20,range= (0,10),normed = True,ax = axes[0])\ndata1.plot(kind = \"hist\",y = \"Whisker.high\",bins = 20,range= (0,10),normed = True,ax = axes[1],cumulative = True)\nplt.savefig('graph.png')\nplt","a01de614":"time = [\"1996-02-26\",\"1996-05-16\"]  #list with each index string\nprint(type(time[0])) \n\ndatetime = pd.to_datetime(time)   #now each index's type is Datetime\nprint(type(datetime))","a568576e":"# close warning\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\ndata2 = data.head()\ndate = [\"1996-02-26\",\"1996-03-26\",\"1996-04-26\",\"1995-03-15\",\"1995-03-16\"]   #list consisting of strings\ndatetime = pd.to_datetime(date)\ndata2[\"date\"] = datetime\n\ndata2= data2.set_index(\"date\")  #now our index are dates\ndata2 ","f1e4c234":"print(data2.loc[\"1996-04-26\"])  #use date for indexing","0d819de9":"data2.resample(\"A\").mean() #average accounts by years","dd1252f8":"data2.resample(\"M\").mean()  #average calculations per month","f6e5dc55":"data2.resample(\"M\").first().interpolate(\"linear\") #fill gaps linearly based on first month","ba8ee65f":"data2.resample(\"M\").mean().interpolate(\"linear\") #fill gaps with average values","97fc4bd0":"**RESAMPLING PANDAS TIME SERIES**\n\nResampling: statistical method over different time intervals.\n\nNeeds string to specify frequency like \"M\" = month or \"A\" = year.","a2de5bcf":"**We can build data frames from csv .**","e31ad849":"**INDEXING PANDAS TIME SERIES**","4f0167a1":"**We can build dataframe with zip() method.**","fb8f2695":"**We can build dataframe from dictionaries.**","57a1e9e4":"**VISUAL DATA ANALYSIS**"}}