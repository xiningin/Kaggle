{"cell_type":{"691f96fd":"code","dd6c6b7b":"code","a96781d9":"code","07bdc57d":"code","ba1bc94f":"code","cf84fdb3":"code","c337d9de":"code","8a08e195":"code","193ff509":"code","2fb29202":"code","067578d9":"code","2fe78b64":"code","53d6568d":"code","342630af":"code","a07d0f6e":"code","f6422dec":"code","7c483d78":"code","e752c09e":"code","5725068c":"code","e4e483b5":"markdown","ab17de77":"markdown","d845461d":"markdown","56b12887":"markdown","5caa7993":"markdown","d0a61f9a":"markdown","6541739d":"markdown","3bee9739":"markdown","075995d7":"markdown","13c0ef83":"markdown","f7d5b05a":"markdown","2c0afb51":"markdown","15b42b42":"markdown","d9fb15f9":"markdown","9492de01":"markdown","1dc6d9b4":"markdown","197a68f8":"markdown","327caa1e":"markdown","25899398":"markdown","25432884":"markdown","d96a0c26":"markdown","bbb79074":"markdown"},"source":{"691f96fd":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\nfrom sklearn.datasets import load_boston","dd6c6b7b":"boston = load_boston()","a96781d9":"print(\"Shape for Data is\", boston.data.shape) \nprint(\"Shape for Target is\", boston.target.shape) \nprint(\"Names of header :\\n\", boston.feature_names)\nprint(\"Dataset description :\\n\", boston.DESCR)","07bdc57d":"# Create a Pandas Data Frame from this data set\n\ndf = pd.DataFrame(boston.data)\ndf.head(2)","ba1bc94f":"df.columns = boston.feature_names\ndf['MEDV'] = boston.target\ndf.head(2)","cf84fdb3":"df.info()","c337d9de":"df.isnull().sum()","8a08e195":"# Descriptive Statistics\ndf.describe()","193ff509":"df.hist(bins=30, figsize=(18,18))","2fb29202":"plt.figure(figsize=(25, 25))\nfor i, col in enumerate(boston.feature_names):\n    plt.subplot(4, 4 , i+1)\n    sns.regplot(x=col, y='MEDV', data=df)\n    plt.title(\"%s vs MEDV\" %(col))","067578d9":"sns.set(rc={'figure.figsize':(8,8)})\nsns.heatmap(df.corr().round(2), square=True, cmap='RdYlGn', annot=True)","2fe78b64":"pearson_coef1, p_value1 = stats.pearsonr(df['RM'], df['MEDV'])\nprint(\"The Pearson Correlation Coefficient for RM is\", pearson_coef1, \" with a P-value of P = \", p_value1)  \n\npearson_coef2, p_value2 = stats.pearsonr(df['LSTAT'], df['MEDV'])\nprint(\"The Pearson Correlation Coefficient for LSTAT is\", pearson_coef2, \" with a P-value of P = \", p_value2) \n\nprint(\"Is there strong evidence if corelation is signifcant for RM :- \", p_value1 < 0.001) \nprint(\"Is there strong evidence if corelation is signifcant for LSTAT :- \", p_value2 < 0.001) ","53d6568d":"from sklearn.linear_model import LinearRegression\n\n# Create Linear Regression Object\nlm1 = LinearRegression()\nX1 = df[['RM']]\nY1 = df[['MEDV']] # Target\n\n# Fit (Train) the model\nlm1.fit(X1,Y1)\n\nprint(\"Intercept for the model is\", lm1.intercept_, \"and the scope is\",lm1.coef_)\n\n# Prediction\nYout1 = lm1.predict(X1)\n\n# Actual and Predicted values (first five)\nprint(\"Predicted Values:\",Yout1[0:5])\nprint(\"Actual Values:\",Y1.values[0:5])\n","342630af":"lm2 = LinearRegression()\nX2 = df[['RM', 'LSTAT']]\nY2 = df[['MEDV']]\n\n# Fit (Train) the model\nlm2.fit(X2,Y2)\n\nprint(\"Intercept for the model is\", lm2.intercept_, \"and the scope is\",lm2.coef_)\n\n# Prediction\nYout2 = lm2.predict(X2)\n\n# Actual and Predicted values (first five)\nprint(\"Predicted Values:\",Yout2[0:5])\nprint(\"Actual Values:\",Y2.values[0:5])","a07d0f6e":"# Seaborn library to be used for Residual Plot\nplt.figure(figsize=(6,6))\nsns.residplot(df['RM'],df['MEDV'])\nplt.show()","f6422dec":"plt.figure(figsize=(6,6))\nax1 = sns.distplot(df['MEDV'], hist=False, color=\"r\", label=\"Actual\")\nsns.distplot(Yout2, hist=False, color=\"b\", label=\"Fitted\", ax=ax1)","7c483d78":"from sklearn.metrics import mean_squared_error\n\n# Simple Linear Regression\n\nmse1 = mean_squared_error(Y1,Yout1)\nprint(\"Mean square error for simple linear regression is\",mse1)\nprint(\"R-Square value for simple linear regression is\", lm1.score(X1,Y1))\nprint(\"\\n\")\n\n# Multiple Linear Regression\n\nmse2 = mean_squared_error(Y2,Yout2)\nprint(\"Mean square error for mulitple linear regression is\",mse2)\nprint(\"R-Square value for multiple linear regression is\", lm2.score(X2,Y2))","e752c09e":"# First step that we will take is to seperate target data\n\ny_data = df['MEDV']\nx_data = df.drop('MEDV',axis=1)\n\nfrom sklearn.model_selection import train_test_split\n\n# Split the data into test and training (15% as test data)\n\nx_train, x_test, y_train, y_test = train_test_split(x_data, y_data, test_size=0.15, random_state=10)\n\nprint(\"Number of test samples :\", x_test.shape[0])\nprint(\"Number of training samples:\",x_train.shape[0])\n\nlm = LinearRegression()\n\n# Fit (Train) the model using the training data \n\nlm.fit(x_train[['RM','LSTAT']],y_train)\n\n# Prediction using Training Data\nyout_train = lm.predict(x_train[['RM','LSTAT']])\nprint(yout_train[0:5])\n\n# Prediction using Test Data\nyout_test = lm.predict(x_test[['RM','LSTAT']])\nprint(yout_test[0:5])\nprint(\"\\n\")\n\n# Model accuracy using Test Data\nmse_test = mean_squared_error(y_test,yout_test)\nprint(\"Mean square error is\",mse_test)\nprint(\"R-Square value using test data is\", lm.score(x_test[['RM','LSTAT']],y_test))\nprint(\"\\n\")\n\n# Model accuracy using Training Data\nmse_train = mean_squared_error(y_train,yout_train)\nprint(\"Mean square error is\",mse_train)\nprint(\"R-Square value using training data is\", lm.score(x_train[['RM','LSTAT']],y_train))","5725068c":"from sklearn.model_selection import cross_val_score, KFold\n\nrcross = cross_val_score(lm, x_data, y_data, cv=KFold(n_splits=5,shuffle=True))\n\nprint(rcross)\nprint(\"The mean of the folds are\", rcross.mean())","e4e483b5":"# Linear Regression ","ab17de77":"### Exploratory Data Analysis","d845461d":"As you can notice, our corelation is significant for variables **'RM'** and **'LSTAT'**.","56b12887":"We will load the dataset using load_boston method, this will return a Bunch object. Bunch object is like a Python dictionary, let's quickly look at the significance of keys :- <br>\n\ndata &emsp;: &emsp; Data to learn<br>\ntarget &emsp;: &emsp; Target column, for this example Median value of owner occupied home will be the target<br>\nDESCR &emsp;: &emsp; Description of dataset including the headers significance<br>\nfeature_names &emsp;: &emsp; Names of header<br>\nfilename &emsp;: &emsp; Physical location from where the data was created<br>\n","5caa7993":"We will visualize our models that we have created. For Simple Linear Regression, we can either use **Regression Plot** or **Residual Plot**. In case of regression plot, we need to focus on spread of data from regression line. If the data is too far from regression line, then we can say that Linear Model is not the best fit.\n\nSince we have already used Regression Plot, we will use Residual Plot. A Residual is the difference between observed value (Y) and predicted value (Yout). In residual plot, X-axis will have independent variable and Y-Axis will have residuals.\n\nWhat to look in residual plot?\n\n- If the points in a residual plot are randomly spread out around the x-axis, then a linear model is appropriate \nfor the data. Randomly spread out residuals means that the variance is constant, and thus the linear model is a good\nfit for this data.\n","d0a61f9a":"For Multiple Linear Regression, we can't use Regression or Residual Plot because of multiple independent variables, so we will use Distribution Plot.","6541739d":"If we check our data, it doesn't seems to have any missing value. So, we will assume this as cleaned data and will use as such.","3bee9739":"## Linear Model Creation\n\nNow that we have indentified few variables which appears to have linear relationship with our target data, we will start developing the Linear Regression Model.\n\nWe will start with **Simple Linear Regression**. As stated above, Simple Linear Regression only uses one variable, so we will use only **'RM'** attribute.\n\nFirst, we will import the LinearRegression class from the SciKit library and create a LinearRegression object. Then we will train the model, find the slope and intercept and finally we will do some prediction.\n\nNOTE : For this post as part of explaining linear regression model, I will be using the entire data set for training. In real world, we will split the data into test and training data. This will be covered in a later post.","075995d7":"**Cross Validation :**\n\nDivision of data into testing and training data may result into a problem especially if the data is sorted by some particular features and our testing data does not have that data. With Cross Validation, we will use entire subset of data for training and testing in iterations. This is just a brief introduction on this topic and there are other methods to perform cross validation. \n\nIn the example below, we are using K-Fold validation technique and dividing our data into 5 folds and each of the fold will be used as a test data. We will then take the mean of all the iterations.","13c0ef83":"Let's use some visualization techniques on our data to understand the distribution and relationship of independent variables with our target variable.\n\nFor distribution of data, we will use Histogram. Before proceeding, let's look at what Histogram is :-\n\nA **histogram** is a type of bar graph that shows the frequency or number of values compared to a set of value ranges.\nTo construct a histogram, the first step is to \u201cbin\u201d the range of values\u200a\u2014\u200athat is, divide the entire range of values\ninto a series of intervals\u200a\u2014\u200aand then count how many values fall into each interval. The bins are usually specified as consecutive, non-overlapping intervals of a variable. The bins (intervals) must be adjacent, and are often (but are not required to be) of equal size.\n\nLet's use histogram to view the data distribution in our case. *Look closely at our target (MEDV) and notice that the \nprices are mainly in the mid range distribution*.","f7d5b05a":"As you can see that the data frame has no header names and is also missing our target column. Let's fix this first :-","2c0afb51":"**Observations so far :-**\n\n- Variable **'RM'** seems to have positive linear relationship with target variable **'MEDV'**.\n- Variable **'LSTAT'** seems to have negative linear relationship with target variable **'MEDV'**.\n\nLet's use other statistical methods to confirm our observations. We will use Pearson Corelation as our statistical tool.\n\n**What is Pearson Corelation?**\n\nA Pearson Corelation is a number between -1 and 1 which indicates the extent to which two variables are linearly related.\n\nCorelation Cofficient:\n\n1 - Positively correlated\n-1 - Negatively correlated.\n0 - Not correlated.\n\nP-value:\n\nThe P-value is the probability value that the correlation between these two variables is statistically significant.\n\nBy convention, when the\n\np-value is  < 0.001: we say there is strong evidence that the correlation is significant. <br>\nthe p-value is  < 0.05: there is moderate evidence that the correlation is significant. <br>\nthe p-value is  < 0.1: there is weak evidence that the correlation is significant. <br>\nthe p-value is  > 0.1: there is no evidence that the correlation is significant. <br>\n\nWe will use the Pandas data frame method \"corr()\" to find the co-relation and then use the Seaborn's Heatmap to plot it.","15b42b42":"To visualize the relationship between independent variables and target variable (MEDV), we will use **Regression Plot**, which is basically a Scatter Plot with fitted regression line. We use regression plot for variables with continous values, while a box plot will be used for categorical variables.","d9fb15f9":"**Linear Regression** is one of the common and popular algorithm in Machine Learning. Infact, typically this would be the first algorithm that you will encounter while learning Machine Learning.\n\nLinear regression as the name suggests is a model that assumes a linear relationship between independent variable (x) and the dependent or target variable (y). There are two types on Linear Regression Model :-\n\n**Simple Linear Regression** : Linear model between  one independent variable (x) and target variable (y).\n\n**Multiple Linear Regression** : Linear model between two or more independent variables (x1, x2 ...) and target variable (y).\n\nLinear regression model would predict the output (dependent variable) as a function of independent variable.\n\n               Y = a + b X\n\nwhere, Y : Predictor Variable\n            X : Independent Variable\n            a  : Intercept of regression line (i.e. value of Y when X=0)\n            b  : Slope of regression line (i.e. rate of change of Y when X is incremented by 1 unit)\n\n\nFor Multiple Linear Regression, equation would be\n\n             Y = a + b1X1 + b2X2 + b3X3 + ......\n\nLet's start with Linear Regression using Python. For this tutorial, I'll be using Boston Housing Price Data Set, which is provided in SciKit Learn library [SciKit Link](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.datasets.load_boston.html). Details about this data set can be found at [Link](https:\/\/www.cs.toronto.edu\/~delve\/data\/boston\/bostonDetail.html)\n\nFirst import all the required libraries.","9492de01":"### Quick Analysis of Data Set","1dc6d9b4":"### Data Wrangling","197a68f8":"Now, we will develop the **Multiple Linear Regression** with two variables - 'RM' and 'LSTAT'.","327caa1e":"## Model Accuracy\n\nWe will use the following quantitative methods for finding model accuracy.\n\n**Mean Squared Error (MSE)**\n\nThe Mean Squared Error measures the average of the squares of errors. It is calculated by :-\n\n- Finding the error between actual and predicted value\n- Taking a square of it\n- Sum up all the values\n- Divide by number of values\n\n**R-squared**\n\nR squared, also known as the coefficient of determination is a measure to indicate how close the data is to the fitted regression line.\n\nR^2 = 1 - MSE of regression line \/ MSE of average of data\n\n**Which one is better model?**\n\n- Model will less MSE and high R-Square value\n\nWe can use the sklearn.metrics.mean_squared_error to find the Mean Squared Error and model score() method to obtain R-Square value. ","25899398":"We can see that the multiple linear regression model seems to perform better because of high R-Square value and low mean square error.","25432884":"We observed visually that attributes **'RM'** exhibits postive linear relationship, which seems correct as per Corelation Cofficient with a value of 0.7. We also observed that **'LSTAT'** exhibits negative linear relationship with **'MEDV'** and this seems to be correct statistically as well with a cofficient value of -0.74.\n\nLet's also look at the p-value as well.","d96a0c26":"## Model Visualization","bbb79074":"## Model Evaluation : Train and Test Data, Cross Validation \n\nAs I mentioned before, in real-world we will split our data into test and training data to evaluate our model. We will use \"train_test_split\" method to split our data into testing and training data. In this section, I will be using  Multiple Regression Model to illustrate this process.\n"}}