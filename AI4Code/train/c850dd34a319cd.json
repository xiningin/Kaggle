{"cell_type":{"87ba4d5a":"code","aab0ea8c":"code","5c4713ec":"code","6bb7aa8f":"code","0bf0f61f":"code","fb678bdb":"code","97653fa7":"code","b0e25b87":"code","38b5738d":"code","dd38444c":"code","1bb61aed":"code","3a5ef82a":"code","2cf512c6":"code","02d5a99b":"code","ba366274":"code","b4ddadac":"code","9ba47f2a":"code","d5c4714b":"code","4d141af2":"code","a416577a":"code","22d496d8":"code","f1c6703e":"code","5bebb1da":"code","4284c8c4":"code","122d5c99":"code","3039bcaf":"code","02602ecd":"code","64eee74e":"code","1e449349":"code","6ae40e3b":"code","e5265ef0":"code","6fe87463":"markdown","f982abfc":"markdown","a31a1222":"markdown"},"source":{"87ba4d5a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aab0ea8c":"print(os.listdir(\"..\/input\/snu-2021-1-ds-project-2\/\"))","5c4713ec":"train = pd.read_csv(\"..\/input\/snu-2021-1-ds-project-2\/train.csv\")\ntest = pd.read_csv(\"..\/input\/snu-2021-1-ds-project-2\/test.csv\")\nsubmission = pd.read_csv(\"..\/input\/snu-2021-1-ds-project-2\/sample_submission.csv\")","6bb7aa8f":"train.info()","0bf0f61f":"import matplotlib.pyplot as plt\nimport seaborn as sns","fb678bdb":"sns.set(rc={'figure.figsize':(11.7,8.27)})","97653fa7":"# distribution of labels in training data\nsns.distplot(train.label)\nplt.xticks(rotation=45)\nplt.show() ","b0e25b87":"# unique values in label coulum\nnp.unique(train.label)","38b5738d":"sns.countplot(train.label)\nplt.xticks(rotation=45)\nplt.show()","dd38444c":"# What percentage of labels in training set equal to 0?\ntrain[train.label == 0].shape[0] \/ train.shape[0]","1bb61aed":"# scatterplot + histogram of time and label\nsns.jointplot(x='time', y='label', data=train)\nplt.show()","3a5ef82a":"# scatterplot + histogram of s1 and label\nsns.jointplot(x='s1', y='label', data=train)\nplt.show()","2cf512c6":"from sklearn.linear_model import LinearRegression","02d5a99b":"X = train.copy()\nx_cols = ['s'+ str(i) for i in list(range(1,17,1))]\nX = X[x_cols]\nX.head()","ba366274":"y = train['label']","b4ddadac":"lm_model = LinearRegression()\nlm_model.fit(X, y)","9ba47f2a":"new_X = test[x_cols]\nnew_y = lm_model.predict(new_X)","d5c4714b":"submission_lm = submission.copy()\nsubmission_lm['label'] = new_y","4d141af2":"submission_lm.shape","a416577a":"submission_lm.head()","22d496d8":"submission_lm.to_csv('submission_lm.csv', index=False)","f1c6703e":"from sklearn.tree import DecisionTreeRegressor","5bebb1da":"# Pearson correlation coefficient\ncorr = train.corr(method='pearson')\nprint(corr.label)","4284c8c4":"# select columns for plotting\nplt_cols = ['s'+ str(i) for i in [1, 5, 6, 14]]\nplt_cols = ['label'] + plt_cols\nplt_cols","122d5c99":"sns.pairplot(train[plt_cols])\nplt.show()","3039bcaf":"# Train with selected columns\nsub_x_cols = ['s1', 's5', 's6', 's14']\nsub_X = train[sub_x_cols]\nsub_X.head()","02602ecd":"dt_model = DecisionTreeRegressor()\ndt_model.fit(sub_X, y)","64eee74e":"new_X = test[sub_x_cols]\nnew_y = dt_model.predict(new_X)","1e449349":"submission_dt = submission.copy()\nsubmission_dt['label'] = new_y","6ae40e3b":"submission_dt.head()","e5265ef0":"submission_dt.to_csv('submission_dt.csv', index=False)","6fe87463":"## Basic EDA","f982abfc":"## Baseline model: Linear Regression","a31a1222":"## Baseline model 2: Decision Tree"}}