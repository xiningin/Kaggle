{"cell_type":{"b3bdc568":"code","c013c145":"code","da4dcdbe":"code","1417898b":"code","c89201ba":"code","b8a2de35":"code","c73944fc":"code","7fbaf303":"code","2d4d3f53":"code","256812de":"code","e71e4b0f":"code","e5e1bc20":"code","dafe6a19":"code","9e7260d1":"code","97bc76d9":"code","b79fc7bc":"code","7db065bc":"code","ff4218d4":"code","a5905a22":"code","cad9e29f":"code","fa537531":"code","11731c16":"code","71901076":"markdown","ee3bff68":"markdown","beedd1a5":"markdown","c21b41a5":"markdown","543402a4":"markdown","5113cb0d":"markdown","c27f2bea":"markdown"},"source":{"b3bdc568":"import numpy as np\nimport pandas as pd\nimport re\nfrom sklearn.preprocessing import StandardScaler","c013c145":"df = pd.read_csv(\"..\/input\/google-play-store-apps\/googleplaystore.csv\")","da4dcdbe":"df.head(60)","1417898b":"df.shape","c89201ba":"df.drop_duplicates(keep = False, inplace = True)\n","b8a2de35":"df.shape","c73944fc":"df.info() ","7fbaf303":"df.drop(['Price'],axis=1,inplace=True) \n","2d4d3f53":"\ndf[\"Installs\"] = df[\"Installs\"].replace({\"\\W+\":\"\"},regex=True).replace({\"\\D+\":\"\"},regex=True).replace({\"\\s+\":\"\"},regex=True).replace(\"\",np.nan).astype(\"float64\") \ndf[\"Size\"] = df[\"Size\"].replace({\"[^\\d\\.']\":\"\"},regex=True).replace(\"\",np.nan).astype(\"float32\")*df[\"Size\"].replace({\"[^mMkK']\":\"\"},regex=True).replace({\"M\":1000000,\"k\":1000,\"\\s+\":\"\"}).replace(\"\",1).astype(\"float64\")\ndf[\"Reviews\"] = df[\"Reviews\"].replace({\"[^\\d\\.']\":\"\"},regex=True).replace(\"\",np.nan).astype(\"float32\")*df[\"Reviews\"].replace({\"[^mMkK']\":\"\"},regex=True).replace({\"M\":1000000,\"k\":1000,\"\\s+\":\"\"}).replace(\"\",1).astype(\"float64\")\n","256812de":"df.head(60)","e71e4b0f":"for k in df.columns:\n    print(k,round((df[k].isnull().sum()\/df[k].count()*100),3))","e5e1bc20":"# Here we should have replaced the size and rating of NA values from mean & mode repectively.\n#but here we are not replacing since we need to find largest size \n\ndf.Size.fillna(df.Size.mean(),inplace=True)\ndf.Rating.fillna(df.Rating.mode()[0],inplace=True)","dafe6a19":"#removing rest of the nan data row \nfor k in df.columns:\n    df.dropna(subset = [k], inplace=True)\n    ","9e7260d1":"for k in df.columns:\n    print(k,round((df[k].isnull().sum()\/df[k].count()*100),3))","97bc76d9":"df.select_dtypes(include=['float64']).columns","b79fc7bc":"import seaborn as sns\nimport matplotlib.pyplot as plt","7db065bc":"# #removing outliers \n# lower_bound = 0.1\n# upper_bound = 0.95\n# # there are lower bound and upper bound vlaues of the percentile \n# res = df.Rating.quantile([0.1,0.95])","ff4218d4":"# df1 = df[(df.Rating > res.values[0]) & (df.Rating < res.values[1])] #and df.Rating < res.values[1]","a5905a22":"# df1.shape","cad9e29f":"df1 = df.groupby(['Category']).sum().sort_values(by=\"Installs\",ascending=False)[:10]\ndf1\n# game has the maximum installs ","fa537531":"df.sort_values(by=\"Size\",ascending=False)[:20]\n# here we see top size apps ","11731c16":"print(df.Size[df.App == \"Stickman Legends: Shadow Wars\"])","71901076":"# Removing duplicats\n","ee3bff68":"# changing object to numberic value ","beedd1a5":"## App with the largest size","c21b41a5":"# Dropping price column as 93% of the data is 0 which correlated with Free in type column\n","543402a4":"# Removing outliers (Do this part only if you are feeding data to ML model)\n# for most popular category and others do not remove outliers","5113cb0d":"# % of empty value in each column","c27f2bea":"# Most Popular Category  (one with maximum installs)"}}