{"cell_type":{"3742549c":"code","594efbe5":"code","b112b60d":"code","11927374":"code","75b6f559":"code","49b67486":"code","8bfdad13":"code","67cb0946":"code","52777e8f":"code","016dc7e6":"code","fd457aa3":"code","ea9686f5":"code","afc63b9b":"code","f70f2fde":"code","3915f6de":"markdown"},"source":{"3742549c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","594efbe5":"from tensorflow import keras\nfrom keras.layers import Dense,Flatten,Conv2D,MaxPool2D\nfrom keras.models import Sequential\nfrom keras.preprocessing import image\nfrom keras.preprocessing.image import ImageDataGenerator\nimport cv2\nfrom matplotlib import pyplot as plt","b112b60d":"train=ImageDataGenerator(rescale=1\/255,validation_split=0.05)","11927374":"train_dataset=train.flow_from_directory('..\/input\/surface-crack-detection',\n                                       target_size=(150,150),\n                                       batch_size=32,\n                                       class_mode='binary',\n                                       subset='training',           \n                                       )\nval_dataset=train.flow_from_directory('..\/input\/surface-crack-detection',\n                                       target_size=(150,150),\n                                      batch_size=32,\n                                       class_mode='binary',\n                                       subset='validation',           \n                                       )","75b6f559":"train_dataset.class_indices","49b67486":"model=Sequential()\nmodel.add(Conv2D(256,(1,1),input_shape=(128,128,3),activation='relu',kernel_initializer='he_uniform'))\nmodel.add(MaxPool2D(2,2))\nmodel.add(Conv2D(256,(1,1),activation='relu',kernel_initializer='he_uniform'))\nmodel.add(MaxPool2D(2,2))\nmodel.add(Conv2D(256,(1,1),activation='relu',kernel_initializer='he_uniform'))\nmodel.add(MaxPool2D(2,2))\nmodel.add(Conv2D(256,(3,3),activation='relu',kernel_initializer='he_uniform'))\nmodel.add(MaxPool2D(2,2))\nmodel.add(Conv2D(256,(3,3),activation='relu',kernel_initializer='he_uniform'))\nmodel.add(MaxPool2D(2,2))\nmodel.add(Conv2D(256,(1,1),activation='relu',kernel_initializer='he_uniform'))\nmodel.add(MaxPool2D(2,2))\nmodel.add(Flatten())\nmodel.add(Dense(128,activation='relu',kernel_initializer='he_uniform',kernel_regularizer='l2'))\nmodel.add(Dense(64,activation='relu',kernel_initializer='he_uniform',kernel_regularizer='l2'))\nmodel.add(Dense(32,activation='relu',kernel_initializer='he_uniform',kernel_regularizer='l2'))\nmodel.add(Dense(1,activation='sigmoid'))\nprint(model.summary())","8bfdad13":"model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])","67cb0946":"history=model.fit(train_dataset,epochs=1,validation_data=val_dataset,batch_size=128)","52777e8f":"img=image.load_img('..\/input\/my-data1\/nocrack1.jpg',target_size=(150,150))","016dc7e6":"plt.imshow(img)","fd457aa3":"img1=image.img_to_array(img)\nimg1=img1\/255","ea9686f5":"img1=np.expand_dims(img1,[0])\nprint(img1.shape)","afc63b9b":"pred=model.predict(img1)\nif(pred[0]>=0.5):\n    print(\"Crack Detected\")\nelse:\n    print(\"No Crack Detected\")","f70f2fde":"pred","3915f6de":"#  **Check For Your Own Image**"}}