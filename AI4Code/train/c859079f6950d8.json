{"cell_type":{"f4e614d1":"code","ecc7aad1":"code","327afe27":"code","f42e743b":"code","b14b0197":"code","e30d905b":"code","1a6965b0":"code","6209bb4d":"code","e51cd647":"code","e1b5d5b8":"code","96939a6f":"code","293d3218":"code","7e6ef56e":"code","0e760ab7":"code","37e4e14e":"code","f42477b7":"code","8378fbcd":"code","9228acd7":"code","dc4cba5a":"code","100842cb":"code","0632d37d":"code","e6881e11":"code","9eed3e7f":"code","edff479f":"code","851fafe7":"code","53aec8ab":"code","e6194da9":"code","642fd8f0":"code","08f14638":"code","a2b21009":"code","36f07e12":"code","89debcd5":"code","22cd6fd1":"code","f124b749":"code","d157b8cc":"code","ebec8438":"code","ec71617d":"code","0e196d61":"code","64688336":"code","6e8efd71":"code","9bb9e013":"code","036e8601":"code","b052196e":"code","7b447b3c":"code","07f14065":"code","46e8d51f":"code","35a88545":"code","16fc8ef5":"code","f4452221":"code","24f7bb6e":"markdown","0a9af523":"markdown","184344c4":"markdown","c4a51b26":"markdown"},"source":{"f4e614d1":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ecc7aad1":"import numpy as np\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom plotly.offline import iplot, init_notebook_mode\nimport plotly.express as px\nimport bokeh \nfrom bokeh.io import output_notebook\nfrom bokeh.resources import INLINE\nimport tensorflow as tf\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nimport warnings\nwarnings.filterwarnings(\"ignore\")\noutput_notebook(resources=INLINE)\n%matplotlib inline","327afe27":"train = pd.DataFrame(pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-4\/train.csv\"))","f42e743b":"print(\"The shape of training data is = {}\".format(train.shape))","b14b0197":"train.Province_State.fillna(\"\", inplace = True)\ntrain.ConfirmedCases.fillna(\"\", inplace = True)\ntrain.Fatalities.fillna(\"\", inplace = True)","e30d905b":"train[\"Country_Region\"].unique()","1a6965b0":"confirmed_cases_us = train[train[\"Country_Region\"] == \"US\"].groupby([\"Date\"]).ConfirmedCases.sum()\nfatal_cases_us = train[train[\"Country_Region\"] == \"US\"].groupby([\"Date\"]).Fatalities.sum()\n\nconfirmed_cases_italy = train[train[\"Country_Region\"] == \"Italy\"].groupby([\"Date\"]).ConfirmedCases.sum()\nfatal_cases_italy = train[train[\"Country_Region\"] == \"Italy\"].groupby([\"Date\"]).Fatalities.sum()\n\nconfirmed_cases_india = train[train[\"Country_Region\"] == \"India\"].groupby([\"Date\"]).ConfirmedCases.sum()\nfatal_cases_india = train[train[\"Country_Region\"] == \"India\"].groupby([\"Date\"]).Fatalities.sum()\n\nconfirmed_cases_france = train[train[\"Country_Region\"] == \"France\"].groupby([\"Date\"]).ConfirmedCases.sum()\nfatal_cases_france = train[train[\"Country_Region\"] == \"France\"].groupby([\"Date\"]).Fatalities.sum()\n\nconfirmed_cases_china = train[train[\"Country_Region\"] == \"China\"].groupby([\"Date\"]).ConfirmedCases.sum()\nfatal_cases_china = train[train[\"Country_Region\"] == \"China\"].groupby([\"Date\"]).Fatalities.sum()\n\nconfirmed_cases_taiwan = train[train[\"Country_Region\"] == \"Taiwan*\"].groupby([\"Date\"]).ConfirmedCases.sum()\nfatal_cases_taiwan = train[train[\"Country_Region\"] == \"Taiwan*\"].groupby([\"Date\"]).Fatalities.sum()\n\nconfirmed_cases_uk = train[train[\"Country_Region\"] == \"United Kingdom\"].groupby([\"Date\"]).ConfirmedCases.sum()\nfatal_cases_uk = train[train[\"Country_Region\"] == \"United Kingdom\"].groupby([\"Date\"]).Fatalities.sum()\n\ndate = train[\"Date\"].unique()","6209bb4d":"plt.figure(figsize = (12,8))\nplt.plot(date, confirmed_cases_us, color = \"b\", label = \"US\")\nplt.plot(date, confirmed_cases_italy, color = \"g\", label = \"Italy\")\nplt.plot(date, confirmed_cases_india, color = \"y\", label = \"India\")\nplt.plot(date, confirmed_cases_france, color = \"r\", label = \"France\")\nplt.plot(date, confirmed_cases_china, color = \"c\", label = \"China\")\nplt.plot(date, confirmed_cases_taiwan, color = \"m\", label = \"Taiwan\")\nplt.plot(date, confirmed_cases_uk , color = \"k\", label = \"UK\")\nplt.grid(\"both\")\nplt.title(\"A comparitive study of confirmed cases across the globe\")\nplt.legend()\n\nplt.plot()","e51cd647":"plt.figure(figsize = (12, 8))\nplt.plot(date, fatal_cases_us, color = \"b\", label = \"US\")\nplt.plot(date, fatal_cases_italy, color = \"g\", label = \"Italy\")\nplt.plot(date, fatal_cases_india, color = \"y\", label = \"India\")\nplt.plot(date, fatal_cases_france, color = \"r\", label = \"France\")\nplt.plot(date, fatal_cases_china, color = \"c\", label = \"China\")\nplt.plot(date, fatal_cases_taiwan, color = \"m\", label = \"Taiwan\")\nplt.plot(date, fatal_cases_uk , color = \"k\", label = \"UK\")\nplt.grid(\"both\")\nplt.title(\"A comparitive study of fatal cases across the globe\")\nplt.legend()\n\nplt.plot()","e1b5d5b8":"train[\"Region\"] = train[\"Country_Region\"].astype(str) + train[\"Province_State\"].astype(str)\ntrain.drop([\"Country_Region\" , \"Province_State\"], axis = 1, inplace = True)","96939a6f":"train.head()","293d3218":"choro_map = px.choropleth(train, locations = \"Region\", locationmode = \"country names\", color = \"ConfirmedCases\",\n                                        hover_name = \"Region\", animation_frame = \"Date\")\nchoro_map.update_layout(title_text = \"Global Confirmed Cases\", title_x = 0.5, \n                         geo = dict(showframe = False, showcoastlines = True))\nchoro_map.show()","7e6ef56e":"choro_map = px.choropleth(train, locations = \"Region\", locationmode = \"country names\", color = \"Fatalities\",\n                                        hover_name = \"Region\", animation_frame = \"Date\")\nchoro_map.update_layout(title_text = \"Fatalities Across The Globe\", title_x = 0.5, \n                         geo = dict(showframe = False, showcoastlines = True))\nchoro_map.show()","0e760ab7":"df = train","37e4e14e":"df_cc = df.pivot(index = \"Region\", columns = \"Date\", values =\"ConfirmedCases\")\ndf_cc.head()","f42477b7":"df_fc = df.pivot(index = \"Region\" , columns = \"Date\", values = \"Fatalities\")\ndf_fc.head()","8378fbcd":"df_cc.to_csv(\"confirmed_cases.csv\", encoding = \"utf-8-sig\")\ndf_fc.to_csv(\"Fatal_cases.csv\", encoding = \"utf-8-sig\")","9228acd7":"import IPython\nurl = \"https:\/\/preview.flourish.studio\/2028487\/MSZ6a_Ik9B_0QweCuvJ6rs6D4N51xPsZwqIiymulW2sjdt_iKQcrLXrIG9d7HezS\/\"\niframe = '<iframe src=' + url + ' width=700 height=350><\/iframe>'\nIPython.display.HTML(iframe)","dc4cba5a":"train.head()","100842cb":"train = train.set_index(\"Id\")\ntrain.head()","0632d37d":"train_india = train[train[\"Region\"] == \"India\"]\ntrain_india","e6881e11":"train_india[\"ConfirmedCases\"] = train_india[\"ConfirmedCases\"].astype(int)\ntrain_india[\"Fatalities\"] = train_india[\"Fatalities\"].astype(int)","9eed3e7f":"train_india_size = int(len(train_india) * 0.75)\nval_india_size = len(train_india) - train_india_size\nprint(\"Training size = {}\".format(train_india_size))\nprint(\"Validation size = {}\".format(val_india_size))","edff479f":"train_india_confirmed_cases = train_india[[\"ConfirmedCases\"]]\ntrain_india_fatal_cases = train_india[[\"Fatalities\"]]","851fafe7":"print(train_india_confirmed_cases, train_india_fatal_cases)","53aec8ab":"plt.figure(figsize = (8, 8))\nx = np.arange(1, 116, 1)\ny1 = train_india_confirmed_cases \ny2 = train_india_fatal_cases \nplt.plot(x, y1, color = \"m\", label = \"Confirmed Cases in India from Jan-May\")\nplt.plot(x, y2, color = \"r\", label = \"Fatal Cases in India from Jan-May\")\nplt.grid(True)\nplt.legend()","e6194da9":"len(train_india_confirmed_cases)","642fd8f0":"train_india_confirmed_cases","08f14638":"train_india_confirmed_cases_data = train_india_confirmed_cases.iloc[0:train_india_size]\nval_india_confirmed_cases_data = train_india_confirmed_cases.iloc[train_india_size : len(train_india_confirmed_cases)]","a2b21009":"print(len(train_india_confirmed_cases_data))\nprint(len(val_india_confirmed_cases_data))","36f07e12":"scaler = MinMaxScaler(feature_range = (0,1))\ndef createDataset(train) : \n    train_scaled = scaler.fit_transform(train)\n    x_train = [] \n    y_train = []\n    time_step = 2\n    for i in range(time_step, train_scaled.shape[0]):\n        x_train.append(train_scaled[i-time_step : i , 0])\n        y_train.append(train_scaled[i, 0])\n    \n    x_train, y_train = np.array(x_train), np.array(y_train)\n    x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1 ))\n    y_train = np.reshape(y_train, (y_train.shape[0], 1 ))\n    return x_train, y_train     ","89debcd5":"x_train, y_train = createDataset(train_india_confirmed_cases_data)\nx_val, y_val = createDataset(val_india_confirmed_cases_data)","22cd6fd1":"print(x_train.shape, y_train.shape)\nprint(x_val.shape, y_val.shape)","f124b749":"model = tf.keras.Sequential()\nmodel.add(tf.keras.layers.LSTM(units = 50, return_sequences = True, input_shape = (x_train.shape[1], 1)))\nmodel.add(tf.keras.layers.Dropout(0.2))\nmodel.add(tf.keras.layers.LSTM(units = 50, return_sequences = True))\nmodel.add(tf.keras.layers.Dropout(0.2))\nmodel.add(tf.keras.layers.LSTM(units = 50, return_sequences = True))\nmodel.add(tf.keras.layers.Dropout(0.2))\nmodel.add(tf.keras.layers.LSTM(units = 50, return_sequences = False))\nmodel.add(tf.keras.layers.Dropout(0.2))\nmodel.add(tf.keras.layers.Dense(units = 1))","d157b8cc":"model.compile(tf.keras.optimizers.Adam(lr = 0.001), loss = \"mean_squared_error\")","ebec8438":"model.summary()","ec71617d":"EPOCHS = 200\nBATCH_SIZE = 1","0e196d61":"with tf.device(\"\/device:GPU:0\"):\n  history = model.fit(x_train, y_train,epochs = EPOCHS, verbose = 1,\n                     batch_size = BATCH_SIZE, validation_data = (x_val, y_val))","64688336":"x = np.arange(0, EPOCHS, 1)                                                                  \nplt.figure(1, figsize = (20, 12))                                  \nplt.subplot(121)\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.plot(x, history.history[\"loss\"], label = \"Training Loss\")\nplt.plot(x, history.history[\"val_loss\"], label = \"Validation Loss\")\nplt.grid(True)\nplt.legend()   ","6e8efd71":"predicted_cases = model.predict(x_val)\npredicted_cases = scaler.inverse_transform(predicted_cases)\nreal_cases = scaler.inverse_transform(y_val)\nplt.figure(figsize= (12, 8))\nplt.subplot(1,1,1)\nplt.plot(real_cases, color = \"red\", label = \"Real Number Of Cases\")\nplt.plot(predicted_cases, color = \"blue\", label = \"Predicted Number Of Cases (Validation set)\")\nplt.title(\"Corona Cases\")\nplt.xlabel(\"Time\")\nplt.ylabel(\"Case Count\")\nplt.legend()\nplt.grid(\"both\")\nplt.show()","9bb9e013":"\"\"\"\nSaving model's topology\n\"\"\"\nmodel_json = model.to_json()\nwith open(\"model.json\", \"w\") as json_file:\n    json_file.write(model_json)\n\n\"\"\"\nSaving model's weights\n\"\"\"\nmodel.save_weights(\"model.h5\")","036e8601":"len(train_india_fatal_cases)","b052196e":"train_india_fatal_cases_data = train_india_fatal_cases.iloc[0:train_india_size]\nval_india_fatal_cases_data = train_india_fatal_cases.iloc[train_india_size : len(train_india_fatal_cases)]","7b447b3c":"print(len(train_india_fatal_cases_data))\nprint(len(val_india_fatal_cases_data))","07f14065":"x_train, y_train = createDataset(train_india_fatal_cases_data)\nx_val, y_val = createDataset(val_india_fatal_cases_data)","46e8d51f":"print(x_train.shape, y_train.shape)\nprint(x_val.shape, y_val.shape)","35a88545":"with tf.device(\"\/device:GPU:0\"):\n  history = model.fit(x_train, y_train,epochs = EPOCHS, verbose = 1, batch_size = BATCH_SIZE, \n                     validation_data = (x_val, y_val))","16fc8ef5":"x = np.arange(0, EPOCHS, 1)                                                                  \nplt.figure(1, figsize = (20, 12))                                  \nplt.subplot(121)\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.plot(x, history.history[\"loss\"], label = \"Training Loss\")\nplt.plot(x, history.history[\"val_loss\"], label = \"Validation Loss\")\nplt.grid(True)\nplt.legend()   ","f4452221":"predicted_cases = model.predict(x_val)\npredicted_cases = scaler.inverse_transform(predicted_cases)\nreal_cases = scaler.inverse_transform(y_val)\nplt.figure(figsize= (12, 8))\nplt.subplot(1,1,1)\nplt.plot(real_cases, color = \"red\", label = \"Real Number Of Fatalities\")\nplt.plot(predicted_cases, color = \"blue\", label = \"Predicted Number Of Fatalities (Validation set)\")\nplt.title(\"Fatal Cases\")\nplt.xlabel(\"Time\")\nplt.ylabel(\"Case Count\")\nplt.legend()\nplt.grid(\"both\")\nplt.show()","24f7bb6e":"Using the same model architecture to predict. Re-training the same model on Fatal cases.","0a9af523":"# Analyzing Confirmed Cases","184344c4":"# Fatalities : ","c4a51b26":"## CONFIRMED CASES : "}}