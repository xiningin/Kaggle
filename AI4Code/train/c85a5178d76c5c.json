{"cell_type":{"8bb06656":"code","fcf9c9b2":"code","3c2f26aa":"code","976445e3":"code","379efeab":"code","9c04d535":"code","9c75e906":"code","05a1dfb9":"code","15c3c5a5":"code","b9764f63":"code","c4e8597a":"code","4e08b722":"code","21ce73b2":"code","76f741f4":"code","0578cb13":"code","e706cf38":"code","1865f3e6":"code","c6967334":"code","90a7c0c5":"code","93a28c1a":"code","063920e3":"code","45226406":"code","69109f72":"code","c326a544":"code","6b5876b0":"code","4a4ef1dc":"code","d86891cc":"markdown","244f8816":"markdown","5f7bba79":"markdown","f03997d8":"markdown"},"source":{"8bb06656":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport os","fcf9c9b2":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","3c2f26aa":"users = pd.read_csv('\/kaggle\/input\/mts-ml-summer-school\/users.csv')\nusers.info()","976445e3":"user_labels = sorted(list(users.age.dropna().unique()))\nug = users.groupby(['age', 'sex']).size()\nug","379efeab":"# Users age and sex distribution\nfemale = ug.to_numpy()[::2]\nmale = ug.to_numpy()[1::2]\n\nplt.bar(user_labels, female, label='female')\nplt.bar(user_labels, male, bottom=female, label='male')\nplt.legend()\nplt.show()","9c04d535":"items = pd.read_csv('\/kaggle\/input\/mts-ml-summer-school\/items.csv')\nitems.head()","9c75e906":"items.info()","05a1dfb9":"# Top authors distribution\nag = items.groupby(['authors']).size()\ntop_authors = ag[ag > 150]\n\nauthor_labels = list(top_authors.index)\nplt.figure(figsize=(16, 8))\nplt.xticks(rotation='vertical')\nplt.bar(author_labels, top_authors)\nplt.show()","15c3c5a5":"# Top years distribution\nig = items.groupby(['year']).size()\ntop_years = ig[ig > 100]\nyear_labels = list(top_years.index)\n\nplt.figure(figsize=(16, 8))\nplt.bar(year_labels, top_years)\nplt.show()","b9764f63":"genres = items.genres.str.split(',', expand=True)\ngenres.info()","c4e8597a":"# Top genres distribution\ngg = genres.groupby([0]).size()\ntop_genres = gg[gg>800]\n\ngenre_labels = list(top_genres.index)\nplt.figure(figsize=(16, 8))\nplt.xticks(rotation='vertical')\nplt.bar(genre_labels, top_genres)\nplt.show()","4e08b722":"interactions = pd.read_csv('\/kaggle\/input\/mts-ml-summer-school\/interactions.csv')\ninteractions.head()","21ce73b2":"interactions.info()","76f741f4":"# Some users are presented in interactions, but not presented in users dataframe\nlen(interactions.user_id.unique()), len(users.user_id.unique())","0578cb13":"from implicit.nearest_neighbours import CosineRecommender\nimport scipy.sparse as sp","e706cf38":"users_inv_mapping = dict(enumerate(interactions['user_id'].unique()))\nusers_mapping = {v: k for k, v in users_inv_mapping.items()}\nlen(users_mapping)","1865f3e6":"items_inv_mapping = dict(enumerate(interactions['item_id'].unique()))\nitems_mapping = {v: k for k, v in items_inv_mapping.items()}\nlen(items_mapping)","c6967334":"def get_coo_matrix(df, \n                   user_col='user_id', \n                   item_col='item_id', \n                   weight_col=None, \n                   users_mapping=users_mapping, \n                   items_mapping=items_mapping):\n    if weight_col is None:\n        weights = np.ones(len(df), dtype=np.float32)\n    else:\n        weights = df[weight_col].astype(np.float32)\n\n    interaction_matrix = sp.coo_matrix((\n        weights, \n        (\n            df[user_col].map(users_mapping.get), \n            df[item_col].map(items_mapping.get)\n        )\n    ))\n    return interaction_matrix","90a7c0c5":"train_mat = get_coo_matrix(interactions).tocsr()\ntrain_mat","93a28c1a":"cosine_model = CosineRecommender(K=10)\ncosine_model.fit(train_mat.T)","063920e3":"default_rec = [283713, 276903, 184549, 168963, 357309, 143175, 385281, 80003, 55466, 287060]\n\ndef generate_implicit_recs_mapper(model, train_matrix, N, user_mapping, item_inv_mapping):\n    def _recs_mapper(user):\n        try:\n            user_id = user_mapping[user]\n        except KeyError:\n            return default_rec\n        recs = model.recommend(user_id, \n                               train_matrix, \n                               N=N, \n                               filter_already_liked_items=True)\n        return [item_inv_mapping[item] for item, _ in recs]\n    return _recs_mapper","45226406":"top_N = 10\nmapper = generate_implicit_recs_mapper(cosine_model, train_mat, top_N, users_mapping, items_inv_mapping)\nmapper","69109f72":"submission = pd.read_csv('\/kaggle\/input\/mts-ml-summer-school\/sample_submission.csv')\nsubmission.head()","c326a544":"submission['Predicted'] = submission['Id'].map(mapper)\nsubmission['Predicted'] = submission['Predicted'].map(lambda x: ' '.join(map(str, x)))","6b5876b0":"submission.head()","4a4ef1dc":"submission.to_csv('submission.csv', index=False)","d86891cc":"## Interactions EDA","244f8816":"# Implicit model","5f7bba79":"# Submit","f03997d8":"## Users EDA"}}