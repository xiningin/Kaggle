{"cell_type":{"23745434":"code","f4295e77":"code","d348d40d":"code","0b28d0ca":"code","6699d931":"code","6fa2bbe8":"code","d533583b":"code","1a93ad64":"code","aee621cd":"code","26b2c07e":"code","9ad52cd0":"code","5d596ea8":"code","4accefd4":"code","cbfe441d":"code","fa5c8800":"code","c2832ccb":"code","bf9af2af":"code","669682b7":"code","9778b372":"code","b5a06f0b":"code","02bf34cf":"code","fc6b2c80":"code","44aec4e3":"code","6ade3210":"code","acb4c8a1":"code","1d140f68":"code","248e282b":"code","75eedc87":"code","727f5cf0":"markdown","00171efb":"markdown","efa95b3d":"markdown","f2aa0ef0":"markdown","7368ebff":"markdown","575fb270":"markdown","dd973098":"markdown","32bbfa2a":"markdown"},"source":{"23745434":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport sklearn\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import KFold","f4295e77":"!ls \/kaggle\/input\/more-cute-pets\/","d348d40d":"train = pd.read_csv(\"..\/input\/petfinder-pawpularity-score\/train.csv\")\ntest = pd.read_csv(\"..\/input\/petfinder-pawpularity-score\/test.csv\")\nsample_submission = pd.read_csv(\"..\/input\/petfinder-pawpularity-score\/sample_submission.csv\")","0b28d0ca":"len(train)","6699d931":"train.head()","6fa2bbe8":"exog = sm.add_constant(train.drop(['Pawpularity', 'Id'], axis=1))\nexog","d533583b":"import statsmodels.api as sm\n\nsm.OLS(endog=train['Pawpularity'], exog=exog).fit().summary()","1a93ad64":"train[train.Id == '0007de18844b0dbbb5e1f607da0606e0']","aee621cd":"train['Pawpularity'].hist()","26b2c07e":"file = '..\/input\/petfinder-pawpularity-score\/train\/0007de18844b0dbbb5e1f607da0606e0.jpg'\n\nfrom IPython.display import Image\nImage(filename=file) ","9ad52cd0":"sample_submission","5d596ea8":"train[\"file_path\"] = train[\"Id\"].apply(lambda identifier: \"..\/input\/petfinder-pawpularity-score\/train\/\" + identifier + \".jpg\")\ntest[\"file_path\"] = test[\"Id\"].apply(lambda identifier: \"..\/input\/petfinder-pawpularity-score\/test\/\" + identifier + \".jpg\")","4accefd4":"train.head()","cbfe441d":"train[\"Pawpularity\"].hist()","fa5c8800":"tabular_columns = ['Subject Focus', 'Eyes', 'Face', 'Near', 'Action', 'Accessory', 'Group', 'Collage', 'Human', 'Occlusion', 'Info', 'Blur']\nimage_size = 150\nbatch_size = 128","c2832ccb":"def preprocess(image_url, tabular):\n    image_string = tf.io.read_file(image_url)\n    image = tf.image.decode_jpeg(image_string, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0\n    image = tf.image.central_crop(image, 1.0)\n    image = tf.image.resize(image, (image_size, image_size))\n    return (image, tabular[1:]), tabular[0]","bf9af2af":"def rmse(y_true, y_pred):\n    return tf.sqrt(tf.reduce_mean((y_true - y_pred) ** 2))","669682b7":"def block(x, filters, kernel_size, repetitions, pool_size=2, strides=2):\n    for i in range(repetitions):\n        x = tf.keras.layers.Conv2D(filters, kernel_size, activation='relu', padding='same')(x)\n    x = tf.keras.layers.MaxPooling2D(pool_size, strides)(x)\n    return x","9778b372":"import tensorflow.keras as keras\n\nbase_model = keras.applications.Xception(\n    weights = '..\/input\/xception\/xception_weights_tf_dim_ordering_tf_kernels_notop.h5',  # Load weights pre-trained on ImageNet.\n    input_shape=(image_size, image_size, 3),\n    include_top=False) ","b5a06f0b":"base_model.summary()","02bf34cf":"def get_model():\n    \n    image_inputs = tf.keras.Input((image_size, image_size , 3))\n    tabular_inputs = tf.keras.Input(len(tabular_columns))\n\n    image_x = base_model(image_inputs)\n#     image_x = block(image_inputs, 8, 3, 2)\n#     image_x = block(image_x, 16, 3, 2)\n#     image_x = block(image_x, 32, 3, 2)\n#     image_x = block(image_x, 64, 3, 2)\n#     image_x = block(image_x, 128, 3, 2)\n    image_x = tf.keras.layers.Dropout(0.8)(image_x)\n    image_x = tf.keras.layers.Flatten()(image_x)\n    image_x = tf.keras.layers.Dense(64, activation=\"relu\", kernel_regularizer=tf.keras.regularizers.l2())(image_x)\n\n    tabular_x = tf.keras.layers.Dense(16, activation=\"relu\")(tabular_inputs)\n    tabular_x = tf.keras.layers.Dense(16, activation=\"relu\")(tabular_x)\n    tabular_x = tf.keras.layers.Dense(16, activation=\"relu\")(tabular_x)\n    tabular_x = tf.keras.layers.Dense(16, activation=\"relu\", kernel_regularizer=tf.keras.regularizers.l2())(tabular_x)\n    x = tf.keras.layers.Concatenate(axis=1)([image_x, tabular_x])\n    output = tf.keras.layers.Dense(1)(x)\n    model = tf.keras.Model(inputs=[image_inputs, tabular_inputs], outputs=[output])\n    return model","fc6b2c80":"model =  get_model()\ntf.keras.utils.plot_model(model, show_shapes=True)","44aec4e3":"model.summary()","6ade3210":"image = np.random.normal(size=(2, image_size, image_size, 3))\ntabular = np.random.normal(size=(2, len(tabular_columns)))\nprint(image.shape, tabular.shape)\nprint(model((image, tabular)).shape)","acb4c8a1":"tf.keras.backend.clear_session()\nmodels = []\nhistorys = []\nkfold = KFold(n_splits=5, shuffle=True, random_state=997)\n# For the current random state, 5th fold can generate a better validation rmse and faster convergence.\ntrain_best_fold = False\nbest_fold = 4\nfor index, (train_indices, val_indices) in enumerate(kfold.split(train)):\n    if train_best_fold and index != best_fold:\n        continue\n    x_train = train.loc[train_indices, \"file_path\"]\n    tabular_train = train.loc[train_indices, [\"Pawpularity\"] + tabular_columns]\n    x_val= train.loc[val_indices, \"file_path\"]\n    tabular_val = train.loc[val_indices, [\"Pawpularity\"] + tabular_columns]\n    checkpoint_path = \"model_%d.h5\"%(index)\n    checkpoint = tf.keras.callbacks.ModelCheckpoint(\n        checkpoint_path, \n        monitor='val_rmse', \n        mode=\"min\",\n        save_best_only=True,\n        restore_best_weights = True\n    )\n    early_stop = tf.keras.callbacks.EarlyStopping(\n        monitor='val_rmse', \n        mode=\"min\",\n        min_delta=1e-4, \n        patience=10\n    )\n    reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n        monitor='val_rmse', \n        mode=\"min\",\n        factor=0.5,\n        patience=2, \n        min_lr=1e-6\n    )\n    callbacks = [early_stop, checkpoint, reduce_lr]\n    \n    loss = tf.keras.losses.MeanSquaredError()\n\n    optimizer = tf.keras.optimizers.Adam()\n    \n    train_ds = tf.data.Dataset.from_tensor_slices((x_train, tabular_train)).map(preprocess).shuffle(512).batch(batch_size).cache().prefetch(2)\n    val_ds = tf.data.Dataset.from_tensor_slices((x_val, tabular_val)).map(preprocess).batch(batch_size).cache().prefetch(2)\n    model = get_model()\n    model.compile(loss=loss, optimizer=optimizer, metrics=[tf.keras.metrics.RootMeanSquaredError(name=\"rmse\"), \"mae\", \"mape\"])\n    history = model.fit(train_ds, epochs=300, validation_data=val_ds, callbacks=callbacks)\n    for metrics in [(\"loss\", \"val_loss\"), (\"mae\", \"val_mae\", \"rmse\", \"val_rmse\"), (\"mape\", \"val_mape\"), [\"lr\"]]:\n        pd.DataFrame(history.history, columns=metrics).plot()\n        plt.show()\n    model.load_weights(checkpoint_path)\n    historys.append(history)\n    models.append(model)","1d140f68":"def preprocess_test_data(image_url, tabular):\n    print(image_url, tabular)\n    image_string = tf.io.read_file(image_url)\n    image = tf.image.decode_jpeg(image_string, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0\n    image = tf.image.central_crop(image, 1.0)\n    image = tf.image.resize(image, (image_size, image_size))\n    return (image, tabular), 0","248e282b":"test_ds = tf.data.Dataset.from_tensor_slices((test[\"file_path\"], test[tabular_columns])).map(preprocess_test_data).batch(batch_size).cache().prefetch(2)","75eedc87":"use_best_result = False\nif use_best_result:\n    if train_best_fold:\n        best_model = models[0]\n    else:\n        best_fold = 0\n        best_score = 10e8\n        for fold, history in enumerate(historys):\n            for val_rmse in history.history[\"val_rmse\"]:\n                if val_rmse < best_score:\n                    best_score = val_rmse\n                    best_fold = fold\n        print(\"Best Score:%.2f Best Fold: %d\"%(best_score, best_fold + 1))\n        best_model = models[best_fold]\n    sample_submission[\"Pawpularity\"] = best_model.predict(test_ds).reshape(-1)\n    sample_submission.to_csv(\"submission.csv\", index=False)\nelse:\n    total_results = []\n    for model in models:\n        total_results.append(model.predict(test_ds).reshape(-1))\n    results = np.mean(total_results, axis=0).reshape(-1)\n    sample_submission[\"Pawpularity\"] = results\n    sample_submission.to_csv(\"submission.csv\", index=False)","727f5cf0":"## Model Development","00171efb":"Let's have a big picture of how this Model looks like.","efa95b3d":"# TensorFlow multi-input Pet Pawpularity Model\n\n## Table of Contents\n- Summary\n- Set up\n- Import datasets\n- Data Preprocessing\n- Model Development\n- Model Evaluation\n- Submission\n\n\n## Summary\nIn this notebook, I will build a TensorFlow multi-input Model that can receive image inputs and tabular inputs at the same time for training, so that I can get the most out of this dataset.\n## Set up","f2aa0ef0":"## Submission","7368ebff":"## Data Preprocessing","575fb270":"This Model accepts images with shape (image_size, image_size, 3) and tabular information with shape (12) as input. Since it's a Regression problem, it generate output with shape (1). ","dd973098":"## Import datasets","32bbfa2a":"### Model Training\nI will use tensorflow Dataset here to preprocess and cache tensors, first epoch is very slow because it's preprocessing data; after that, it would be must faster."}}