{"cell_type":{"c06bb164":"code","b5ed1a26":"code","0f3dcbf3":"code","a748b955":"code","01c30c24":"code","fee3e0a1":"code","e5854d3c":"code","49f74a77":"code","8f145443":"code","26d8c99a":"code","99ff41fc":"code","55cf1b8b":"code","050cc1ef":"code","cbf404f3":"code","7d2fa6e2":"code","b0a71303":"code","101f1e7b":"code","1d153ea5":"code","c12b778d":"markdown","dfc1ef0d":"markdown","ca5b073c":"markdown","cd38c42f":"markdown"},"source":{"c06bb164":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b5ed1a26":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nfrom sklearn.model_selection import cross_val_score, StratifiedKFold\nfrom sklearn import metrics # to use roc_curve and auc value\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import StandardScaler\n\n%matplotlib inline\nsns.set(style='whitegrid')\nsns.color_palette(\"Spectral\", as_cmap=True)\nplt.rcParams['figure.figsize']=(16,9)\nmyScore={}","0f3dcbf3":"# Load the train and test data\ntrain = pd.read_csv('\/kaggle\/input\/tabular-playground-series-sep-2021\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-sep-2021\/test.csv')\ntest_id = test.id","a748b955":"#Check the shape\nprint(\"Train Shape:\",train.shape)\nprint(\"Test Shape:\",test.shape)","01c30c24":"features=train.columns.tolist()\nfeatures.remove('id')\nfeatures.remove('claim')","fee3e0a1":"def missing_values(df):\n    total = df.isna().sum()\n    percent = df.isna().sum()\/df.count()\n    missing_data=pd.concat([total,percent],axis=1,keys=['Total','Percent'])\n    figure,ax = plt.subplots()\n    sns.barplot(x=missing_data.index,y=missing_data['Percent'])\n    ax.set_xticklabels(missing_data.index,rotation='90')\n    ax.set_xlabel('Features')\n    ax.set_ylabel('Percent of Missing Values')\n    ax.set_title('Train Missing Values in Percent')\n    \n    return missing_data\n    ","e5854d3c":"train_missing_data=missing_values(train)","49f74a77":"test_missing_data=missing_values(test)","8f145443":"train[features]=train[features].fillna(train[features].mean())\ntest[features]=test[features].fillna(test[features].mean())","26d8c99a":"print(\"Train Missing Value\",train.isna().sum()[train.isna().sum()>0].count())\nprint(\"Test Missing Value\",test.isna().sum()[test.isna().sum()>0].count())","99ff41fc":"train[features].describe()","55cf1b8b":"# From the data it can be seen that it is spread from less than zero to greater than 1e16 so for better prediction\n# it is better to standardize them with a Standard scaler\n\nscaler = StandardScaler()\ntrain[features] = scaler.fit_transform(train[features])\ntest[features] = scaler.transform(test[features])","050cc1ef":"def oof(model,train,y,test, nfold):\n    folds=StratifiedKFold(n_splits=nfold,shuffle=True,random_state=42)\n    test_pred=np.zeros((test.shape[0],2),float)\n    train_pred=np.empty((0,1),float)\n  \n    for train_indices,val_indices in folds.split(train,y.values):\n        x_train,x_val=train.iloc[train_indices],train.iloc[val_indices]\n        y_train,y_val=y.iloc[train_indices],y.iloc[val_indices]\n        model.fit(X=x_train,y=y_train)\n        y_train_pred=model.predict_proba(x_val)\n        fpr, tpr, thresholds = metrics.roc_curve(y_val.values, y_train_pred[:,1], pos_label=1)\n        print(\"ROC AUC:\",metrics.auc(fpr, tpr))\n        train_pred=np.append(train_pred,y_train_pred[:,1])\n    \n        test_pred +=model.predict_proba(test)\/nfold\n    \n    return test_pred,train_pred","cbf404f3":"X = train[features]\ny = train.claim\nX_test = test[features]","7d2fa6e2":"%%time\nrf_model=RandomForestClassifier(\n    n_estimators=100,\n    criterion='gini',\n    max_depth=5,\n    random_state=42,\n    n_jobs = -1)\n\nprint(\"Running RF Model\")\nrf_test_pred ,rf_train_pred=oof(model=rf_model,nfold=5, train=X,test=X_test,y=y)\n\n#fpr, tpr, thresholds = metrics.roc_curve(y.values, rf_train_pred[:,1], pos_label=1)\n#myScore['rf_model'] = metrics.auc(fpr,tpr)\n#print(\"RF Model RMSE\",myScore['rf_model'])","b0a71303":"rf_train_pred.shape","101f1e7b":"fpr, tpr, thresholds = metrics.roc_curve(y.values, rf_train_pred, pos_label=1)\nmyScore['rf_model'] = metrics.auc(fpr,tpr)\nprint(\"RF Model RMSE\",myScore['rf_model'])","1d153ea5":"output=pd.DataFrame({'id':test_id,'claim':rf_test_pred[:,1]})\noutput.to_csv('rf_baseline.csv',index=False)","c12b778d":"#### From the result it can be seen that there is about 1.7% missing data for train and test. So we need fill in the missing value.\n#### Since this is a baseline prediction so will impute missing value with mean.","dfc1ef0d":"# Load the necessary Libraries","ca5b073c":"# Base Line Predicition","cd38c42f":"# EDA"}}