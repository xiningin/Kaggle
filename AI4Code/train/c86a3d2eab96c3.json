{"cell_type":{"6f4ae903":"code","119dcad8":"code","79fe4379":"code","10a4d03d":"code","e6fce317":"code","e4d8dfa1":"code","58368d0c":"code","295e27fb":"code","a60c09d8":"code","9bc753a3":"code","390f9848":"code","26818569":"code","b785f04a":"code","7d47a17a":"code","af64c169":"code","ff608651":"code","4718d96d":"code","2c385775":"code","68cf33fe":"code","ff3d98f4":"code","95978c64":"code","7696bfac":"code","63893703":"code","59252b4e":"code","d751438b":"code","7444f1b0":"code","1e146ba9":"code","ac9c2157":"code","c3250fec":"code","0e22e590":"code","be4d7e4c":"code","174e0927":"code","35238783":"code","748a554b":"code","b6a9d151":"code","88b3069c":"code","8a06e0db":"code","69b599e9":"code","9398b9c5":"code","e1a71ee5":"code","dfa43302":"code","127754cd":"code","d3020119":"code","578a4506":"code","3a05a395":"code","bbd174f0":"code","5e339d7a":"code","0a78243e":"code","0584b4be":"code","10db0374":"code","3dc29470":"code","95478668":"code","55d57d38":"code","4f693ba6":"code","6b829bf6":"code","5fb84dcc":"code","527c1109":"code","bc09cffb":"code","d0c0f843":"code","bb71256b":"code","f553e32c":"code","136c9a46":"code","1448f0dd":"code","3a2fcbdf":"code","fd5ffa10":"code","f1c03e5b":"code","31b46cd2":"code","10816b5b":"code","80f73c6c":"code","e60d1340":"code","0cb07148":"code","ea66031a":"code","e7d132ef":"code","4e9b60eb":"code","37cde1f5":"code","c4ff1a6a":"code","993f83d8":"code","06cec240":"code","6b934280":"code","0e56b892":"code","3c8eff56":"code","66ca1eb5":"code","300ddf52":"code","3bf1b587":"code","09d48420":"code","1f769312":"code","8fdfde5b":"code","a31cf3c8":"code","4236bf03":"code","70183b47":"code","10706db0":"markdown","7add0b59":"markdown","c043ca55":"markdown","db9d380d":"markdown","42144e06":"markdown","3b0fedb0":"markdown","06858298":"markdown","4cb921f5":"markdown","ff13d300":"markdown","83066ad8":"markdown","607e7f0d":"markdown","93033161":"markdown","91185a43":"markdown","af456160":"markdown","286c27bd":"markdown","9feda297":"markdown","4ab3ee26":"markdown","eb66c3d0":"markdown","2ad20eb5":"markdown","95e71c58":"markdown","70f0b1ed":"markdown","e6775fce":"markdown","5a89479f":"markdown"},"source":{"6f4ae903":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","119dcad8":"df=pd.read_csv('\/kaggle\/input\/ccdata\/CC GENERAL.csv')","79fe4379":"df.head()","10a4d03d":"df.shape","e6fce317":"df.info()","e4d8dfa1":"df.describe().T","58368d0c":"df.isna().sum().sort_values(ascending=False)","295e27fb":"# Filling missing value with median","a60c09d8":"df.MINIMUM_PAYMENTS.fillna(df.MINIMUM_PAYMENTS.median(),inplace=True)","9bc753a3":"df.CREDIT_LIMIT.fillna(df.CREDIT_LIMIT.median(),inplace=True)","390f9848":"df.isna().sum().sort_values(ascending=False)","26818569":"i = 1\nplt.figure(figsize=(20,20))\nfor x in df.columns[1:]:\n    if i != 9:\n        plt.subplot(3,3,i)\n        sns.boxplot(y=df[x])\n        plt.title(x)\n    else:\n        break\n    i+=1","b785f04a":"# Converting into numerical","7d47a17a":"def convert(s):\n    return int(s[1:])","af64c169":"df.CUST_ID=df.CUST_ID.apply(convert)","ff608651":"sns.scatterplot(x=df.BALANCE,y=df.CUST_ID)","4718d96d":"X = df[['CUST_ID','BALANCE']]","2c385775":"X","68cf33fe":"from sklearn.cluster import KMeans\n\nwcss = []\n\nfor i in range(1,11):\n    km = KMeans(n_clusters=i,random_state=10)\n    km.fit(X)\n    wcss.append(km.inertia_)\n    \nplt.plot(range(1,11),wcss)\nplt.title('The Elbow Method')\nplt.xlabel('Number of clusters')\nplt.ylabel('WSSE')#Within Cluster sum of squares\nplt.show()","ff3d98f4":"km = KMeans(n_clusters=4,random_state=10)\nY_pred=km.fit_predict(X)","95978c64":"X['cluster'] = Y_pred\nX","7696bfac":"sns.scatterplot( data=X, x='CUST_ID', y='BALANCE',\n           hue='cluster',palette=\"Set1\")  \n\nplt.scatter(km.cluster_centers_[:, 0], km.cluster_centers_[:, 1], \n            s = 300, c = 'yellow')\nplt.show()","63893703":"X['cluster']=X.cluster.map({0:'No',1:'No',2:'Target',3:'No'})","59252b4e":"X","d751438b":"newdf1 = df.copy()","7444f1b0":"df","1e146ba9":"newdf1['cluster'] = X['cluster']","ac9c2157":"newdf1.head()","c3250fec":"target1 = newdf1[newdf1.cluster=='Target']","0e22e590":"target1","be4d7e4c":"sns.scatterplot(x=df.PURCHASES,y=df.CUST_ID)","174e0927":"X = df[['CUST_ID','PURCHASES']]","35238783":"X","748a554b":"from sklearn.cluster import KMeans\n\nwcss = []\n\nfor i in range(1,11):\n    km = KMeans(n_clusters=i,random_state=10)\n    km.fit(X)\n    wcss.append(km.inertia_)\n    \nplt.plot(range(1,11),wcss)\nplt.title('The Elbow Method')\nplt.xlabel('Number of clusters')\nplt.ylabel('WSSE')#Within Cluster sum of squares\nplt.show()","b6a9d151":"km = KMeans(n_clusters=3,random_state=10)\nY_pred=km.fit_predict(X)","88b3069c":"X['cluster'] = Y_pred\nX","8a06e0db":"sns.scatterplot( data=X, x='CUST_ID', y='PURCHASES',\n           hue='cluster',palette=\"Set1\")  \n\nplt.scatter(km.cluster_centers_[:, 0], km.cluster_centers_[:, 1], \n            s = 300, c = 'yellow')\nplt.show()","69b599e9":"X['cluster']=X.cluster.map({0:'No',1:'No',2:'Target'})","9398b9c5":"X","e1a71ee5":"newdf2 = df.copy()\nnewdf2['cluster'] = X['cluster']","dfa43302":"newdf2.head()","127754cd":"target2 = newdf2[newdf2.cluster=='Target']","d3020119":"target2.head()","578a4506":"sns.scatterplot(x=df.PAYMENTS,y=df.CUST_ID)","3a05a395":"X = df[['CUST_ID','PAYMENTS']]","bbd174f0":"from sklearn.cluster import KMeans\n\nwcss = []\n\nfor i in range(1,11):\n    km = KMeans(n_clusters=i,random_state=10)\n    km.fit(X)\n    wcss.append(km.inertia_)\n    \nplt.plot(range(1,11),wcss)\nplt.title('The Elbow Method')\nplt.xlabel('Number of clusters')\nplt.ylabel('WSSE')#Within Cluster sum of squares\nplt.show()","5e339d7a":"km = KMeans(n_clusters=3,random_state=10)\nY_pred=km.fit_predict(X)","0a78243e":"X['cluster'] = Y_pred\nX","0584b4be":"sns.scatterplot( data=X, x='CUST_ID', y='PAYMENTS',\n           hue='cluster',palette=\"Set1\")  \n\nplt.scatter(km.cluster_centers_[:, 0], km.cluster_centers_[:, 1], \n            s = 300, c = 'yellow')\nplt.show()","10db0374":"X['cluster']=X.cluster.map({0:'No',1:'No',2:'Target'})","3dc29470":"X","95478668":"newdf3 = df.copy()","55d57d38":"newdf3['cluster'] = X['cluster']","4f693ba6":"newdf3.head()","6b829bf6":"target3 = newdf3[newdf3.cluster=='Target']","5fb84dcc":"target3.head()","527c1109":"sns.scatterplot(x=df.CASH_ADVANCE,y=df.CUST_ID)","bc09cffb":"X = df[['CUST_ID','CASH_ADVANCE']]","d0c0f843":"from sklearn.cluster import KMeans\n\nwcss = []\n\nfor i in range(1,11):\n    km = KMeans(n_clusters=i,random_state=10)\n    km.fit(X)\n    wcss.append(km.inertia_)\n    \nplt.plot(range(1,11),wcss)\nplt.title('The Elbow Method')\nplt.xlabel('Number of clusters')\nplt.ylabel('WSSE')#Within Cluster sum of squares\nplt.show()","bb71256b":"km = KMeans(n_clusters=3,random_state=10)\nY_pred=km.fit_predict(X)","f553e32c":"X['cluster'] = Y_pred\n","136c9a46":"sns.scatterplot( data=X, x='CUST_ID', y='CASH_ADVANCE',\n           hue='cluster',palette=\"Set1\")  \n\nplt.scatter(km.cluster_centers_[:, 0], km.cluster_centers_[:, 1], \n            s = 300, c = 'yellow')\nplt.show()","1448f0dd":"X['cluster']=X.cluster.map({0:'No',1:'No',2:'Target'})","3a2fcbdf":"newdf4 = df.copy()","fd5ffa10":"newdf4['cluster'] = X['cluster']","f1c03e5b":"target4 = newdf4[newdf4.cluster=='Target']","31b46cd2":"target4","10816b5b":"sns.scatterplot(x=df.CREDIT_LIMIT,y=df.CUST_ID)","80f73c6c":"X = df[['CUST_ID','CREDIT_LIMIT']]","e60d1340":"from sklearn.cluster import KMeans\n\nwcss = []\n\nfor i in range(1,11):\n    km = KMeans(n_clusters=i,random_state=10)\n    km.fit(X)\n    wcss.append(km.inertia_)\n    \nplt.plot(range(1,11),wcss)\nplt.title('The Elbow Method')\nplt.xlabel('Number of clusters')\nplt.ylabel('WSSE')#Within Cluster sum of squares\nplt.show()","0cb07148":"km = KMeans(n_clusters=4,random_state=10)\nY_pred=km.fit_predict(X)","ea66031a":"X['cluster'] = Y_pred\n","e7d132ef":"sns.scatterplot( data=X, x='CUST_ID', y='CREDIT_LIMIT',\n           hue='cluster',palette=\"Set1\")  \n\nplt.scatter(km.cluster_centers_[:, 0], km.cluster_centers_[:, 1], \n            s = 300, c = 'yellow')\nplt.show()","4e9b60eb":"X['cluster']=X.cluster.map({0:'Target',1:'No',2:'No',3:'No'})","37cde1f5":"newdf5 = df.copy()","c4ff1a6a":"newdf5['cluster'] = X['cluster']","993f83d8":"newdf5.head()","06cec240":"target5 = newdf5[newdf5.cluster=='Target']","6b934280":"target5.head()","0e56b892":"target1.shape","3c8eff56":"target2.shape","66ca1eb5":"target3.shape","300ddf52":"target4.shape","3bf1b587":"target5.shape","09d48420":"final_target = pd.concat([target1,target2,target3,target4,target5])","1f769312":"final_target.shape","8fdfde5b":"# Removing similar records\nfinal_target.drop_duplicates(inplace=True)","a31cf3c8":"final_target.shape","4236bf03":"final_target.to_csv('Target_Customers.csv')","70183b47":"pd.read_csv('Target_Customers.csv',index_col=0)","10706db0":"# Selecting 2 Columns","7add0b59":"# Data Inspection","c043ca55":"# Selecting 2 Columns ","db9d380d":"# Selection customers that have high credit card limit","42144e06":"CUSTID : Identification of Credit Card holder \\\nBALANCE : Balance amount left in their account to make purchases ","3b0fedb0":"No missing values, Data is clean now","06858298":"# Targeting Customers that make high advance payments","4cb921f5":"# Final CSV of Target Customers","ff13d300":"PAYMENTS : Amount of Payment done by user \\\nCUSTID : Identification of Credit Card holder ","83066ad8":"# Select 2 Columns","607e7f0d":"CASHADVANCE : Cash in advance given by the user \\\nCUSTID : Identification of Credit Card holder ","93033161":"# Targeting Customers that have made high payments","91185a43":"# Select 2 columns","af456160":"# Targeting Customer card holders that have made higher amount of purchases","286c27bd":"# Checking Outliers","9feda297":"No outliers, all data points are in clusters and other higher points are acceptable","4ab3ee26":"# Final Target Customers","eb66c3d0":"# Select 2 Colummns","2ad20eb5":"# Read Data","95e71c58":"# Targeting customer card holder that have high balance left in their account ","70f0b1ed":"PURCHASES : Amount of purchases made from account\nCUSTID : Identification of Credit Card holder ","e6775fce":"# Checking Missing Values","5a89479f":"CREDITLIMIT : Limit of Credit Card for user \\\nCUSTID : Identification of Credit Card holder "}}