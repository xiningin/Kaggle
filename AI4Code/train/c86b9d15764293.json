{"cell_type":{"60d433f4":"code","d8ab071b":"code","6402398a":"code","f881d7a3":"code","fa5f55dd":"code","87a44b2a":"code","c427129a":"code","e4905cfd":"code","da0ee522":"code","3aba1f8c":"code","c27acbd2":"code","b426f6e2":"code","ddad5c21":"code","4d7032da":"code","1d131ac2":"code","d001d2e0":"code","901f06a9":"code","9a11ddb4":"code","90a48206":"markdown","1ee81550":"markdown","0a127970":"markdown","14695b78":"markdown","2865061a":"markdown","628a0202":"markdown"},"source":{"60d433f4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d8ab071b":"import tensorflow as tf\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nimport tensorflow.keras.layers as layer\nfrom tensorflow.keras.losses import categorical_crossentropy\nfrom tensorflow.keras.optimizers import Adam\n\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\n\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud \nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport seaborn as sns\n\n\nimport numpy as np \nimport pandas as pd\n\nimport nltk\nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.tokenize import TweetTokenizer\nfrom nltk.tokenize import word_tokenize \nfrom nltk.corpus import stopwords\n\nimport random as rn\n\nimport re","6402398a":"data = pd.read_csv(\"\/kaggle\/input\/trip-advisor-hotel-reviews\/tripadvisor_hotel_reviews.csv\")","f881d7a3":"print(data.head())\n\nprint(\"Data shape {}\".format(data.shape))","fa5f55dd":"check = data.Rating.value_counts()\ncheck.plot.bar()","87a44b2a":"# Null values\n\ndata.isnull().sum()","c427129a":"def wordCloud_generator(data, title=None):\n    wordcloud = WordCloud(width = 800, height = 800,\n                          background_color ='black',\n                          min_font_size = 10\n                         ).generate(\" \".join(data.values))\n    # plot the WordCloud image                        \n    plt.figure(figsize = (8, 8), facecolor = None) \n    plt.imshow(wordcloud, interpolation='bilinear') \n    plt.axis(\"off\") \n    plt.tight_layout(pad = 0) \n    plt.title(title,fontsize=30)\n    plt.show() ","e4905cfd":"wordCloud_generator(data['Review'], title=\"Most used words in reviews\")\n","da0ee522":"X = data['Review'].copy()\ny = data['Rating'].copy()","3aba1f8c":"ps = PorterStemmer() \nstop_words = stopwords.words('english')\ndef dataPreprocessor(review):\n    # Remove all the special characters\n    processed_feature = re.sub(r'\\W', ' ', str(review))\n\n    # remove all single characters\n    processed_feature= re.sub(r'\\s+[a-zA-Z]\\s+', ' ', processed_feature)\n\n    # Remove single characters from the start\n    processed_feature = re.sub(r'\\^[a-zA-Z]\\s+', ' ', processed_feature) \n\n    # Substituting multiple spaces with single space\n    processed_feature = re.sub(r'\\s+', ' ', processed_feature, flags=re.I)\n\n    # Converting to Lowercase\n    processed_feature = processed_feature.lower()\n    \n    # Converting to stopwords\n    review = processed_feature.split()\n    review = [word for word in review if not word in stop_words]\n    \n    # Stemming words\n    \n    review = [ps.stem(word) for word in review]\n    review = \" \".join(word for word in review)\n    \n    return review\n\n\nX_cleaned = X.apply(dataPreprocessor)\n    \n    ","c27acbd2":"print(\"Origional :\" , X[1])\nprint(\"After Preprocessing :\", X_cleaned[1])","b426f6e2":"length_dist = [len(x.split(\" \")) for x in X_cleaned]\nplt.hist(length_dist , bins = 20)\nplt.show()","ddad5c21":"tokenizer = Tokenizer()\ntokenizer.fit_on_texts(X_cleaned)\n\nX = tokenizer.texts_to_sequences(X_cleaned)\n\nmax_length = max([len(x) for x in X])\nvocab_size = len(tokenizer.word_index)+1\nexp_sen = 1\n\nprint(\"Vocabulary size: {}\".format(vocab_size))\nprint(\"max length of sentence: {}\".format(max_length))\nprint(\"\\nExample:\\n\")\nprint(\"Sentence:\\n{}\".format(X_cleaned[exp_sen]))\nprint(\"\\nAfter tokenizing :\\n{}\".format(X[exp_sen]))\n\nX = pad_sequences(X, padding='pre', maxlen=350)\nprint(\"\\nAfter padding :\\n{}\".format(X[exp_sen]))","4d7032da":"encoder = OneHotEncoder(sparse=False)\ny = np.asanyarray(y)\ny_encoded = encoder.fit_transform(y.reshape((-1,1)))\n","1d131ac2":"sample = 5\nprint(y_encoded[sample])\nprint(y[sample])","d001d2e0":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y_encoded, test_size=0.33, random_state=67, stratify=y\n)","901f06a9":"# hyper parameters\nEPOCHS = 10\nBATCH_SIZE = 32\nembedding_dim = 32\nunits = 32\n\nmodel = tf.keras.Sequential([\n    layer.Embedding(vocab_size, embedding_dim, input_length=X.shape[1]),\n    layer.Bidirectional(layer.LSTM(units,return_sequences=True)),\n    layer.Bidirectional(layer.LSTM(units,return_sequences=True)),\n\n    #L.LSTM(units,return_sequences=True),\n    layer.Flatten(),\n    layer.Dropout(0.3),\n    layer.Dense(2048, activation=\"relu\"),\n    layer.Dropout(0.3),\n    layer.Dense(512, activation=\"relu\"),\n    layer.Dropout(0.3),\n    layer.Dense(5, activation=\"softmax\")\n])\n\n\nmodel.compile(loss='categorical_crossentropy',\n              optimizer='adam',metrics=['accuracy']\n             )\n\nmodel.summary()","9a11ddb4":"history = model.fit(X_train, y_train, epochs=EPOCHS, validation_split=0.1, batch_size=BATCH_SIZE, verbose=1)\n","90a48206":"## Model Building & Training","1ee81550":"## Data Prepeocessing","0a127970":"## Distribution of sentence length","14695b78":"Let's check the districution of Rating","2865061a":"## Train_Test Split","628a0202":"### Most Words Used\n"}}