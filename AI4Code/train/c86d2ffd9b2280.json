{"cell_type":{"9dab44cd":"code","7667ae3f":"code","7af9c3c2":"code","3e246659":"code","53eb9ae7":"code","4160ddd9":"code","663c2f5b":"code","cd9a5be3":"code","04b42d33":"code","f4b3b9bd":"code","8bf4b092":"code","6deceffa":"code","45eae848":"code","338a3a8e":"code","2d6b9a03":"code","90d7b899":"code","2a0590e5":"code","16c70166":"code","3208abd7":"code","59a32f18":"code","b32cea24":"code","70e5ec96":"code","85e928c3":"markdown","6a7d5efd":"markdown","a6e34360":"markdown","134e3062":"markdown","d3ffbc19":"markdown","06bb03dd":"markdown","7429ce33":"markdown","f6b51d60":"markdown","e1e4dbdf":"markdown","e54f21fa":"markdown","da2669a4":"markdown","997364a7":"markdown","8445368c":"markdown","61f372b0":"markdown","cc92d8b3":"markdown","898d0cec":"markdown","5255a10b":"markdown","2ab3c1ac":"markdown","28dc840c":"markdown","20dd6db0":"markdown","f33898a9":"markdown","cb149051":"markdown","41351485":"markdown","19d54cc4":"markdown","f7b5ac35":"markdown","29921b6c":"markdown","4158303d":"markdown","9b044933":"markdown","95f82b02":"markdown","2fa4d760":"markdown","bdf778e5":"markdown","3631b5c3":"markdown","f0f67bc6":"markdown","de3bb30b":"markdown","f9d38258":"markdown","00cebcd8":"markdown"},"source":{"9dab44cd":"import logging\nimport time\nimport warnings\n\nimport catboost as cb\nimport joblib\nimport lightgbm as lgbm\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport optuna\nimport pandas as pd\nimport seaborn as sns\nimport xgboost as xgb\nfrom optuna.samplers import TPESampler\nfrom sklearn.compose import (\n    ColumnTransformer,\n    make_column_selector,\n    make_column_transformer,\n)\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.metrics import log_loss, mean_squared_error\nfrom sklearn.model_selection import (\n    KFold,\n    StratifiedKFold,\n    cross_validate,\n    train_test_split,\n)\nfrom sklearn.pipeline import Pipeline, make_pipeline\nfrom sklearn.preprocessing import OneHotEncoder, OrdinalEncoder\n\nlogging.basicConfig(\n    format=\"%(asctime)s - %(message)s\", datefmt=\"%d-%b-%y %H:%M:%S\", level=logging.INFO\n)\noptuna.logging.set_verbosity(optuna.logging.WARNING)\nwarnings.filterwarnings(\"ignore\")","7667ae3f":"tps_df = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/train.csv\")\ntps_df.head()","7af9c3c2":"tps_df.shape","3e246659":"# Find the number of missing values across rows\ntps_df.isnull().sum(axis=1)","53eb9ae7":"def num_missing_row(X: pd.DataFrame, y=None):\n    # Calculate some metrics across rows\n    num_missing = X.isnull().sum(axis=1)\n    num_missing_std = X.isnull().std(axis=1)\n\n    # Add the above series as a new feature to the df\n    X[\"#missing\"] = num_missing\n    X[\"num_missing_std\"] = num_missing_std\n\n    return X","4160ddd9":"from sklearn.preprocessing import FunctionTransformer\n\nnum_missing_estimator = FunctionTransformer(num_missing_row)","663c2f5b":"# Check number of columns before\nprint(f\"Number of features before preprocessing: {len(tps_df.columns)}\")\n\n# Apply the custom estimator\ntps_df = num_missing_estimator.transform(tps_df)\nprint(f\"Number of features after preprocessing: {len(tps_df.columns)}\")","cd9a5be3":"def custom_function(X, y=None):\n    ...\n\n\ndef inverse_of_custom(X, y=None):\n    ...\n\n\nestimator = FunctionTransformer(func=custom_function, inverse_func=inverse_of_custom)","04b42d33":"from sklearn.base import BaseEstimator, TransformerMixin\n\n\nclass CustomLogTransformer(BaseEstimator, TransformerMixin):\n    pass","f4b3b9bd":"from sklearn.preprocessing import PowerTransformer\n\n\nclass CustomLogTransformer(BaseEstimator, TransformerMixin):\n    def __init__(self):\n        self._estimator = PowerTransformer()","8bf4b092":"class CustomLogTransformer(BaseEstimator, TransformerMixin):\n    def __init__(self):\n        self._estimator = PowerTransformer()\n\n    def fit(self, X, y=None):\n        X_copy = np.copy(X) + 1\n        self._estimator.fit(X_copy)\n\n        return self","6deceffa":"custom_log = CustomLogTransformer()\ncustom_log.fit(tps_df)","45eae848":"class CustomLogTransformer(BaseEstimator, TransformerMixin):\n    def __init__(self):\n        self._estimator = PowerTransformer()\n\n    def fit(self, X, y=None):\n        X_copy = np.copy(X) + 1\n        self._estimator.fit(X_copy)\n\n        return self\n\n    def transform(self, X):\n        X_copy = np.copy(X) + 1\n\n        return self._estimator.transform(X_copy)","338a3a8e":"custom_log = CustomLogTransformer()\ncustom_log.fit(tps_df)\n\ntransformed_tps = custom_log.transform(tps_df)","2d6b9a03":"transformed_tps[:5, :5]","90d7b899":"class CustomLogTransformer(BaseEstimator, TransformerMixin):\n    def __init__(self):\n        self._estimator = PowerTransformer()\n\n    def fit(self, X, y=None):\n        X_copy = np.copy(X) + 1\n        self._estimator.fit(X_copy)\n\n        return self\n\n    def transform(self, X):\n        X_copy = np.copy(X) + 1\n\n        return self._estimator.transform(X_copy)\n\n    def inverse_transform(self, X):\n        X_reversed = self._estimator.inverse_transform(np.copy(X))\n\n        return X_reversed - 1","2a0590e5":"custom_log = CustomLogTransformer()\n\ntps_transformed = custom_log.fit_transform(tps_df)\ntps_inversed = custom_log.inverse_transform(tps_transformed)","16c70166":"tps_df.values[:5, 5]","3208abd7":"tps_inversed[:5, 5]","59a32f18":"from sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import make_pipeline\n\nxgb_pipe = make_pipeline(\n    FunctionTransformer(num_missing_row),\n    SimpleImputer(strategy=\"constant\", fill_value=-99999),\n    CustomLogTransformer(),\n    xgb.XGBClassifier(\n        n_estimators=1000, tree_method=\"gpu_hist\", objective=\"binary:logistic\"\n    ),\n)\n\nX, y = tps_df.drop(\"claim\", axis=1), tps_df[[\"claim\"]].values.flatten()\nsplit = train_test_split(X, y, test_size=0.33, random_state=1121218)\nX_train, X_test, y_train, y_test = split","b32cea24":"xgb_pipe.fit(X_train, y_train)\npreds = xgb_pipe.predict_proba(X_test)\n\nroc_auc_score(y_test, preds[:, 1])","70e5ec96":"class CustomTransformer(BaseEstimator, TransformerMixin):\n    def __init__(self):\n        pass\n\n    def fit(self):\n        pass\n\n    def transform(self):\n        pass\n\n    def inverse_transform(self):\n        pass","85e928c3":"Let's make another check:","6a7d5efd":"# Introduction","a6e34360":"In this month's (September) TPS Competition on Kaggle, one of the ideas that boosted model performance significantly was adding the number of missing values in a row as a new feature. This is a custom operation, not implemented in Sklearn, so let's create a function to achieve that after importing the data:","134e3062":"# You might also be interested...\n\nhttps:\/\/towardsdatascience.com\/how-to-work-with-million-row-datasets-like-a-pro-76fb5c381cdd\n\nhttps:\/\/towardsdatascience.com\/how-to-beat-the-heck-out-of-xgboost-with-lightgbm-comprehensive-tutorial-5eba52195997\n\nhttps:\/\/towardsdatascience.com\/kagglers-guide-to-lightgbm-hyperparameter-tuning-with-optuna-in-2021-ed048d9838b5\n\nhttps:\/\/towardsdatascience.com\/tired-of-clich%C3%A9-datasets-here-are-18-awesome-alternatives-from-all-domains-196913161ec9\n\nhttps:\/\/towardsdatascience.com\/love-3blue1brown-animations-learn-how-to-create-your-own-in-python-in-10-minutes-8e0430cf3a6d","d3ffbc19":"```python\n# FunctionTransformer signature\ndef custom_function(X, y=None):\n    ...\n\nestimator = FunctionTransformer(custom_function)  # no errors\n\ncustom_pipeline = make_pipeline(StandardScaler(), estimator, xgb.XGBRegressor())\ncustom_pipeline.fit(X, y)\n```","06bb03dd":"> This section assumes some knowledge of Python object-oriented programming (OOP). Specifically, the basics of creating classes and inheritance. If you are not already down with those, check out my [Python OOP series](https:\/\/ibexorigin.medium.com\/list\/objectoriented-programming-essentials-for-data-scientists-cf2ff3dc9fc9?source=user_lists---------1-------cf2ff3dc9fc9---------------------), written for data scientists.","7429ce33":"Let's create a function that takes a DataFrame as input and implements the above operation:","f6b51d60":"Next, we have the `transform`, in which we just use the `transform` method of PowerTransformer after adding 1 to the passed data:","e1e4dbdf":"> But wait! We didn't write `fit_transform` - where did that come from? It is simple - when you inherit from `BaseEstimator` and `TransformerMixin`, you get a `fit_transform` method for free. \n\nAfter the inverse transform, you can compare it with the original data:","e54f21fa":"This way, you get `fit_transform` for free. If you don't need any of `__init__`, `fit`, `transform` or `inverse_transform` methods, omit them and the parent Sklearn classes take care of everything. The logic of these methods are entirely up to your coding skills and needs.","da2669a4":"Now, adding this function into a pipeline is just as easy as passing it to the `FunctionTransformer`:","997364a7":"Single `fit`, single `predict` - how awesome would that be?\n\nYou get the data, fit your pipeline just one time, and it takes care of everything\u200a-\u200apreprocessing, feature engineering, modeling, everything. All you have to do is call predict and have the output.\n\nWhat kind of pipeline is *that* powerful? Yes, Sklearn has many transformers, but it doesn't have one for every imaginable preprocessing scenario. So, is such a pipeline a *pipe* dream?\n\nAbsolutely not. Today, we will learn how to create custom Sklearn transformers that enable you to integrate virtually any function or data transformation into Sklearn's Pipeline classes.","8445368c":"# Setup","61f372b0":"# Integrating more complex preprocessing steps with custom transformers","cc92d8b3":"Check out the [documentation](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.preprocessing.FunctionTransformer.html) for details on other arguments.","898d0cec":"The `fit` method should return the transformer itself, which is done by returning `self`. Let's test what we have done so far:","5255a10b":"Writing good code is a skill developed over time. You will realize that a big part of it comes from using the existing tools and libraries at the right time and place, without having to reinvent the wheel.\n\nOne of such tools is Sklearn pipelines and custom transformers are just extensions of them. Use them well and you will produce quality code with little effort.","2ab3c1ac":"`FunctionTransformer` also accepts an inverse of the passed function if you ever need to revert the changes:","28dc840c":"We first create a class that inherits from `BaseEstimator` and `TransformerMixin` classes of `sklearn.base`. Inheriting from these classes allows Sklearn pipelines to recognize our classes as custom estimators. \n\nThen, we will write the `__init__` method, where we just initialize an instance of `PowerTransformer`:","20dd6db0":"This works, but we have the same old problem\u200a-\u200awe can't include this into a pipeline out of the box. Sure, we could use our newfound friend `FunctionTransformer`, but it is not well-suited for more complex preprocessing steps such as this.\n\nInstead, we will write a custom transformer class and create the `fit`, `transform` functions manually. In the end, we will again have a Sklearn-compatible estimator that we can pass into a pipeline. Let's start:","f33898a9":"Working as expected. Now, as I said earlier, we need a method for reverting the transform:","cb149051":"One of the most common scaling options for skewed data is a logarithmic transform. But here is a caveat: if a feature has even a single 0, the transformation with `np.log` or Sklearn's `PowerTransformer` return an error.\n\nSo, as a workaround, people add 1 to all samples and then apply the transformation. If the transformation is performed on the target array, you will also need an inverse transform. For that, after making predictions, you need to use the exponential function and subtract 1. Here is what it looks like in code:","41351485":"I have talked at length about the nitty-gritty of Sklearn pipelines and their benefits in an [older post](https:\/\/towardsdatascience.com\/how-to-use-sklearn-pipelines-for-ridiculously-neat-code-a61ab66ca90d). The most notable advantages are their ability to collapse all preprocessing and modeling steps into a single estimator, preventing data leakage by never calling `fit` on validation sets and an added bonus that makes the code concise, reproducible, and modular.\n\nBut this whole idea of atomic, neat pipelines breaks when we need to perform operations that are not built into Sklearn as estimators. For example, what if you need to extract regex patterns to clean text data? What do you do if you want to create a new feature combining existing ones based on domain knowledge?\n\nTo preserve all the benefits that come with pipelines, you need a way to integrate your custom preprocessing and feature engineering logic into Sklearn. That's where custom transformers come into play.","19d54cc4":"Below is a simple pipeline that imputes the missing values in numeric data, scales them, and fits an XGBRegressor to `X`, `y`:","f7b5ac35":"# Wrapping up...","29921b6c":"Next, we write the `fit` where we add 1 to all features in the data and fit the PowerTransformer:","4158303d":"We also could have used `np.exp` instead of `inverse_transform`. Now, let's make a final check:","9b044933":"# Integrating simple functions with `FunctionTransformer`","95f82b02":"# How to Write Powerful Code Others Envy With Custom Sklearn Transformers\n## Do everything in Sklearn and everyone will be happy\n![](https:\/\/cdn-images-1.medium.com\/max\/1440\/1*y3zaj2WueHb-j6hPwugEGA.jpeg)","2fa4d760":"```python\ny_transformed = np.log(y + 1)\n\n_ = model.fit(X, y_transformed)\npreds = np.exp(model.predict(X, y_transformed) - 1)\n```","bdf778e5":"# What are Sklearn pipelines?","3631b5c3":"Even though log transform actually hurt the score, we got our custom pipeline working!\n\nIn short, the signature of your custom transformer class should be like this:","f0f67bc6":"ince we have a simple function, no need to call `fit` as it just returns the estimator untouched. The only requirement of `FunctionTransformer` is that the passed function should accept the data as its first argument. Optionally, you can pass the target array as well if you need it inside the function:","de3bb30b":"Passing a custom function to `FunctionTransformer` creates an estimator with `fit`, `transform` and `fit_transform` methods:","f9d38258":"Now, we have a custom transformer ready to be included in a pipeline. Let's put everything together:","00cebcd8":"```python\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.impute import SimpleImputer\nimport xgboost as xgb\n\nxgb_pipe = make_pipeline(\n                SimpleImputer(strategy='mean'),\n                StandardScaler(),\n                xgb.XGBRegressor()\n            )\n\n_ = xgb_pipe.fit(X, y)\n```"}}