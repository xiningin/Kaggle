{"cell_type":{"e021ba7a":"code","dc21c76c":"code","db9f366b":"code","ec4acad8":"code","2028cd9b":"code","944a6a6d":"code","e3b00dda":"code","62c7ad45":"code","0688f4a7":"code","14a2a138":"code","b9a71e3a":"markdown","d39fed79":"markdown","e10c0551":"markdown","64c793c9":"markdown","f4214f79":"markdown","e25b860f":"markdown"},"source":{"e021ba7a":"import numpy as np\nimport pandas as pd\npd.set_option('max_columns', None)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import LinearSVC, SVC\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n\nimport warnings\nwarnings.filterwarnings(action='ignore')","dc21c76c":"data = pd.read_csv('..\/input\/audit-data\/audit_data.csv')","db9f366b":"data","ec4acad8":"data.info()","2028cd9b":"def preprocess_inputs(df):\n    df = df.copy()\n    \n    # Fill missing value\n    df['Money_Value'] = df['Money_Value'].fillna(df['Money_Value'].mean())\n    \n    # One-hot encode the LOCATION_ID column\n    location_dummies = pd.get_dummies(df['LOCATION_ID'], prefix='location')\n    df = pd.concat([df, location_dummies], axis=1)\n    df = df.drop('LOCATION_ID', axis=1)\n    \n    # Split df into X and y\n    y = df['Risk']\n    X = df.drop('Risk', axis=1)\n    \n    # Train-test split\n    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, shuffle=True, random_state=1)\n    \n    # Scale X\n    scaler = StandardScaler()\n    scaler.fit(X_train)\n    X_train = pd.DataFrame(scaler.transform(X_train), index=X_train.index, columns=X_train.columns)\n    X_test = pd.DataFrame(scaler.transform(X_test), index=X_test.index, columns=X_test.columns)\n    \n    return X_train, X_test, y_train, y_test","944a6a6d":"X_train, X_test, y_train, y_test = preprocess_inputs(data)","e3b00dda":"X_train","62c7ad45":"y_train","0688f4a7":"models = {\n    \"                   Logistic Regression\": LogisticRegression(),\n    \"                   K-Nearest Neighbors\": KNeighborsClassifier(),\n    \"                         Decision Tree\": DecisionTreeClassifier(),\n    \"Support Vector Machine (Linear Kernel)\": LinearSVC(),\n    \"   Support Vector Machine (RBF Kernel)\": SVC(),\n    \"                        Neural Network\": MLPClassifier(),\n    \"                         Random Forest\": RandomForestClassifier(),\n    \"                     Gradient Boosting\": GradientBoostingClassifier()\n}\n\nfor name, model in models.items():\n    model.fit(X_train, y_train)\n    print(name + \" trained.\")","14a2a138":"for name, model in models.items():\n    print(name + \": {:.2f}%\".format(model.score(X_test, y_test) * 100))","b9a71e3a":"# Preprocessing","d39fed79":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/CutEMQcbN68","e10c0551":"# Getting Started","64c793c9":"# Results","f4214f79":"# Training","e25b860f":"# Task for Today  \n\n***\n\n## Fraudulent Firm Prediction  \n\nGiven *data about audits of firms*, let's try to predict whether a given firm will be **fraudulent** or not.\n\nWe will use a variety of classification models to make our predictions."}}