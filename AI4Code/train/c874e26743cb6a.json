{"cell_type":{"6e8050b1":"code","628023bc":"code","a788b50e":"code","94f53d19":"code","153de71e":"code","6c4dc73e":"code","96d91b00":"code","c8aec4f0":"code","e024eae7":"code","6bfcc745":"code","12e1f98c":"code","52cecbf6":"code","6fe067a3":"code","c09d66ca":"code","07554eca":"code","cd27e1d4":"code","2e80a8bf":"code","3b7862a4":"code","d2a2e4d7":"code","4e60fd07":"code","73f54cd0":"code","9545871a":"markdown","adac94a9":"markdown","6292b466":"markdown","4ed3ba96":"markdown","37f8fc5f":"markdown","df1648bf":"markdown","1fe94fdd":"markdown","616fdbc3":"markdown","3a3cf99c":"markdown","a809e190":"markdown"},"source":{"6e8050b1":"import sys\nsys.path.append('..\/input\/scanpy-related-packages\/related_packages')\n\nimport numpy as np\nimport pandas as pd\nimport scanpy as sc\nfrom anndata import AnnData\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\n\nimport leidenalg\nimport scanpy as sc\nfrom anndata import AnnData\nfrom sklearn import preprocessing\n\n\nsc.settings.verbosity = 3             # verbosity: errors (0), warnings (1), info (2), hints (3)\nsc.logging.print_header()\nsc.settings.set_figure_params(dpi=80, facecolor='white')","628023bc":"def label_encoding(train: pd.DataFrame, test: pd.DataFrame, encode_cols):\n    n_train = len(train)\n    idx_train = train.index\n    idx_test = test.index\n    train = pd.concat([train, test], sort=False).reset_index(drop=True)\n    for f in encode_cols:\n        try:\n            lbl = preprocessing.LabelEncoder()\n            train[f] = lbl.fit_transform(list(train[f].values))\n        except:\n            print(f)\n    test = train[n_train:].reset_index(drop=True)\n    train = train[:n_train]\n    train.index = idx_train\n    test.index = idx_test\n    return train, test","a788b50e":"train = pd.read_csv('\/kaggle\/input\/lish-moa\/train_features.csv', \n                    index_col=0)\ntest = pd.read_csv('\/kaggle\/input\/lish-moa\/test_features.csv',\n                  index_col=0)\n\ntrain_target = pd.read_csv(\"..\/input\/lish-moa\/train_targets_scored.csv\", \n                           index_col=0)\n\ntrain, test = label_encoding(train, test, ['cp_type', 'cp_dose'])\ntrain['dataset'] = 'train'\ntest['dataset'] = 'test'\n\ndf = pd.concat([train, test])\n\nlist_obs_col = ['cp_type', 'cp_time', 'cp_dose', 'dataset']\nlist_genes = [x for x in df.columns if x not in list_obs_col]\n\nadata = AnnData(df[list_genes], obs=df[list_obs_col])\nadata.obs = pd.concat([adata.obs, train_target.reindex(df.index)], \n                      axis=1)\nadata","94f53d19":"sc.pp.highly_variable_genes(adata, min_mean=0.0125, max_mean=3, min_disp=0.5)\nsc.pl.highly_variable_genes(adata)","153de71e":"adata.raw = adata\nadata = adata[:, adata.var.highly_variable]","6c4dc73e":"sc.tl.pca(adata, svd_solver='arpack')","96d91b00":"sc.pl.pca(adata, color='g-0', size=10)","c8aec4f0":"sc.pl.pca_variance_ratio(adata, log=True)","e024eae7":"sc.pp.neighbors(adata, n_neighbors=10, n_pcs=40)\nsc.tl.umap(adata)","6bfcc745":"adata.obs","12e1f98c":"sc.pl.umap(adata, color=['g-0', 'dataset', '5-alpha_reductase_inhibitor',\n                        '11-beta-hsd1_inhibitor', '11-beta-hsd1_inhibitor', 'acat_inhibitor',\n                        'acetylcholine_receptor_agonist', 'acetylcholine_receptor_antagonist', \n                         'acetylcholinesterase_inhibitor'],\n          size=10)","52cecbf6":"sc.tl.leiden(adata)\nsc.pl.umap(adata, color='leiden')","6fe067a3":"sc.tl.rank_genes_groups(adata, 'leiden', method='t-test')\nsc.pl.rank_genes_groups(adata, n_genes=25, sharey=False)","c09d66ca":"sc.pl.umap(adata, color=['g-37', 'c-26', 'g-369', 'leiden'],\n          size=10)","07554eca":"sc.pl.rank_genes_groups_matrixplot(adata, groupby='leiden', n_genes=3)","cd27e1d4":"X_train = pd.concat([adata.obs.loc[train.index, ['cp_type', 'cp_time', 'cp_dose']].reset_index(drop=True), \n              pd.DataFrame(adata.obsm['X_pca'][adata.obs.loc[train.index].reset_index().index]),\n              pd.DataFrame(adata.obsm['X_umap'][adata.obs.loc[train.index].reset_index().index]),\n              pd.get_dummies(pd.DataFrame(adata.obs['leiden'][adata.obs.loc[train.index].reset_index().index])\n                            ).drop('leiden_0', axis=1).reset_index(drop=True)],\n         axis=1)\n\nX_test = pd.concat([adata.obs.loc[test.index, ['cp_type', 'cp_time', 'cp_dose']].reset_index(drop=True), \n              pd.DataFrame(adata.obsm['X_pca'][adata.obs.loc[test.index].reset_index().index]),\n              pd.DataFrame(adata.obsm['X_umap'][adata.obs.loc[test.index].reset_index().index]),\n              pd.get_dummies(pd.DataFrame(adata.obs['leiden'][adata.obs.loc[test.index].reset_index().index])\n                            ).drop('leiden_0', axis=1).reset_index(drop=True)],\n             axis=1)","2e80a8bf":"from sklearn.linear_model import LogisticRegression\n\n\ndef lr(X_train, y_train, X_test):\n    reg = LogisticRegression().fit(X_train, y_train)\n    return reg.predict_proba(X_test)[:,1]\n\nlist_pred = []\nfor c in train_target.columns:\n    list_pred.append(lr(X_train, train_target[c], X_test))\ndf_pred = pd.DataFrame(list_pred).T\ndf_pred.index = test.index\ndf_pred.columns = train_target.columns\ndf_pred.to_csv('submission.csv')","3b7862a4":"adata.obs.loc[df_pred.index, df_pred.columns] = df_pred","d2a2e4d7":"adata[adata.obs['dataset'] == 'train']","4e60fd07":"sc.pl.umap(adata[adata.obs['dataset'] == 'train'], color=['5-alpha_reductase_inhibitor',\n                        '11-beta-hsd1_inhibitor', '11-beta-hsd1_inhibitor', 'acat_inhibitor',\n                        'acetylcholine_receptor_agonist', 'acetylcholine_receptor_antagonist', \n                         'acetylcholinesterase_inhibitor'],\n          size=10)","73f54cd0":"sc.pl.umap(adata[adata.obs['dataset'] == 'test'], color=['5-alpha_reductase_inhibitor',\n                        '11-beta-hsd1_inhibitor', '11-beta-hsd1_inhibitor', 'acat_inhibitor',\n                        'acetylcholine_receptor_agonist', 'acetylcholine_receptor_antagonist', \n                         'acetylcholinesterase_inhibitor'],\n          size=40)","9545871a":"scanpy can take anndata object. In this notebook, I handle cell viabilities as gene expression to make it easier.","adac94a9":"PCA variance ratio is used to determin the threshold of PCx.","6292b466":"scanpy can easily take feature genes for each leiden clusters.","4ed3ba96":"# EDA by scanpy which is one of the most usful library for single-cell RNAseq analysis\n\n![https:\/\/scanpy.readthedocs.io\/en\/latest\/_static\/Scanpy_Logo_BrightFG.svg](https:\/\/scanpy.readthedocs.io\/en\/latest\/_static\/Scanpy_Logo_BrightFG.svg)\n\nScanpy is a very useful library designed for single-cell RNAseq analysis which deals with the massive gene expression profile of cell x gene. Now, Let's take a look into the dataset by common workflow for bioinformaticians. Though this dataset is not a single-cell RNAseq experiment, the pattern of data resembles it. Therefore, I introduce the standard analysis workflow of single-cell RNAseq.\n\nTutolials : https:\/\/scanpy.readthedocs.io\/en\/stable\/index.html\n\nOriginal Article : Wolf, F., Angerer, P. & Theis, F. SCANPY: large-scale single-cell gene expression data analysis. Genome Biol 19, 15 (2018). https:\/\/doi.org\/10.1186\/s13059-017-1382-0","37f8fc5f":"Biological dataset is very noisy, so we sometimes uses only highly variable genes for UMAP and Defferntially expressed genes.","df1648bf":"Let's see cluster 0 specific genes.","1fe94fdd":"Original post: https:\/\/www.kaggle.com\/yyoshiaki\/eda-scanpy-bioinformatics-standard-analysis\n\nBecause internet access should be disabled in the submission file, I uploaded the Scanpy & leidenalg packages so that we can use features created by scanpy in our submission.","616fdbc3":"PCA can explain dataset well.","3a3cf99c":"You can easily plot gene expression and other features.","a809e190":"Check the predicted score in a sample population."}}