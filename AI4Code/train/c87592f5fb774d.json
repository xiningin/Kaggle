{"cell_type":{"d51eefb1":"code","5e2361be":"code","009c56b5":"code","186c79ea":"code","89eb482d":"code","98cbf32b":"code","67e3c973":"code","d98da70b":"code","f1d0e5bf":"code","d232ab39":"code","bc6cf680":"code","5f23298e":"code","38b2d944":"code","d79f1aa2":"code","1a95ed1d":"code","1d6cb7b1":"code","20c6cec2":"code","751162a6":"code","9153a5bf":"code","e3ffd401":"code","ef743d41":"code","87d875bd":"code","4aca26f3":"code","ce56bb3a":"markdown","281a7186":"markdown","4132fb65":"markdown","3eb6e951":"markdown","ff9e3895":"markdown","dc97afb3":"markdown","98ae1a7a":"markdown","cf33c6e2":"markdown","9e25f12d":"markdown","e4f683f1":"markdown","f35c70bb":"markdown","07ee94f7":"markdown","27b3c9b6":"markdown","4af0cb82":"markdown","6d8943d9":"markdown","10f69f32":"markdown","3f615d60":"markdown","cad74040":"markdown","d1482dfd":"markdown","33b77820":"markdown","2cc5ebaf":"markdown","5e144bc2":"markdown","0576ead7":"markdown","a3abb58f":"markdown","9206a3a2":"markdown","88ce7dd9":"markdown"},"source":{"d51eefb1":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\n\n%matplotlib inline\n\n# _______________________________________\n\n# Kernels Data (Public Score & File Path)\n\ndfk = pd.DataFrame({ \n    'Kernel ID': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U'],  \n    'Score':     [ 0.84362, 0.84358, 0.84352, 0.84318, 0.84310, 0.84303, 0.84266, 0.84251, 0.84245, 0.84243, 0.84233, 0.84229, 0.84221, 0.84220, 0.84209, 0.84207, 0.84202, 0.84200, 0.84199, 0.84198, 0.84193],   \n    'File Path': ['..\/input\/feb84362\/FEB84362.csv', '..\/input\/feb84358\/FEB84358.csv', '..\/input\/feb84352\/FEB84352.csv', '..\/input\/feb84318\/FEB84318.csv', '..\/input\/feb84310\/FEB84310.csv', '..\/input\/feb84303\/FEB84303.csv', '..\/input\/feb84266\/FEB84266.csv', '..\/input\/feb84251\/FEB84251.csv', '..\/input\/feb84245\/FEB84245.csv', '..\/input\/feb84243\/FEB84243.csv', '..\/input\/feb84233\/FEB84233.csv' , '..\/input\/feb84229\/FEB84229.csv', '..\/input\/feb84221\/FEB84221.csv', '..\/input\/feb84220\/FEB84220.csv', '..\/input\/feb84209\/FEB84209.csv', '..\/input\/feb84207\/FEB84207.csv', '..\/input\/feb84202\/FEB84202.csv', '..\/input\/feb84200\/FEB84200.csv', '..\/input\/feb84199\/FEB84199.csv', '..\/input\/feb84198\/FEB84198.csv', '..\/input\/feb84193\/FEB84193.csv']     \n})    \n    \ndfk      ","5e2361be":"def generate(main, support, coeff):\n    \n    g = main.copy()    \n    for i in main.columns[1:]:\n        \n        res = []\n        lm, Is = [], []        \n        lm = main[i].tolist()\n        ls = support[i].tolist()  \n        \n        for j in range(len(main)):\n            res.append((lm[j] * coeff) + (ls[j] * (1.- coeff)))            \n        g[i] = res\n        \n    return g\n","009c56b5":"def drawing(main, support, generated):\n    \n    X  = main.iloc[:, 1]\n    Y1 = support.iloc[:, 1]\n    Y2 = generated.iloc[:, 1]\n    \n    plt.style.use('seaborn-whitegrid') \n    plt.figure(figsize=(8, 8), facecolor='lightgray')\n    plt.title(f'\\nOn the X axis >>> main\\nOn the Y axis >>> support\\n')           \n    plt.scatter(X, Y1, s=0.1)\n    plt.show() \n    \n    plt.style.use('seaborn-whitegrid') \n    plt.figure(figsize=(8, 8), facecolor='lightgray')\n    plt.title(f'\\nOn the X axis >>> main\\nOn the Y axis >>> generated\\n')           \n    plt.scatter(X, Y2, s=0.1)\n    plt.show()     \n    ","186c79ea":"def drawing1(main, support, generated):\n    \n    X  = main.iloc[:, 1]\n    Y1 = support.iloc[:, 1]\n    Y2 = generated.iloc[:, 1]\n    \n    plt.style.use('seaborn-whitegrid') \n    plt.figure(figsize=(8, 8), facecolor='lightgray')\n    plt.title(f'\\nBlue | X axis >> main | Y axis >> support\\n\\nOrange | X axis >> main | Y axis >> generated\\n') \n    \n    plt.scatter(X, Y1, s=0.1)    \n    plt.scatter(X, Y2, s=0.1)\n    \n    plt.show() \n    ","89eb482d":"def drawing2(pxy, mxy):\n    \n    plt.style.use('seaborn-whitegrid') \n    plt.figure(figsize=(8, 8), facecolor='lightgray')\n    plt.title(f'\\nComparative Method\\n\\nBlue | X(main) | Y(average - smaller result)\\n\\nOrange | X(main) | Y(generated)\\n') \n    plt.scatter(pxy[0], pxy[1], s=0.1)\n    plt.scatter(pxy[0], pxy[2], s=0.1)\n    plt.show() \n\n    plt.style.use('seaborn-whitegrid') \n    plt.figure(figsize=(8, 8), facecolor='lightgray')\n    plt.title(f'\\nComparative Method\\n\\nBlue | X(main) | Y(average - bigger results)\\n\\nOrange | X(main) | Y(generated)\\n') \n    plt.scatter(mxy[0], mxy[1], s=0.1)\n    plt.scatter(mxy[0], mxy[2], s=0.1)\n    plt.show()\n    ","98cbf32b":"def comparison(main, majority, pcoeff, mcoeff):\n    '''\n    majority: Must be greater than half the total number of kernels. \n              In this example it must be greater than ten.(Hyper parameter)\n    \n    pcoeff:   Hyper parameter\n    mcoeff:   Hyper parameter\n    '''    \n    comp = main.copy()\n    for i in main.columns[1:]:\n        res = []\n        pxy = [[],[],[]]\n        mxy = [[],[],[]]        \n        lm  = main[i].tolist() \n        ls  = [[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]]\n        for n in range (20):       \n            csv   = pd.read_csv(dfk.iloc[n, 2])  \n            ls[n] = csv[i].tolist() \n            \n        for j in range(len(main)):\n            pcount = 0\n            pvalue = 0.0        \n            mcount = 0\n            mvalue = 0.0 \n    \n            for k in range (20):            \n                if lm[j] > ls[k][j]:\n                    pcount += 1\n                    pvalue += ls[k][j]                 \n                else: \n                    mcount += 1\n                    mvalue += ls[k][j] \n                    \n            if (pcount > majority): \n                res.append(lm[j] * pcoeff)\n                pxy[2].append(lm[j] * pcoeff)                \n                pxy[1].append(pvalue \/ pcount)\n                pxy[0].append(lm[j])\n                        \n            elif (mcount > majority): \n                res.append(lm[j] * mcoeff)\n                mxy[2].append(lm[j] * mcoeff)                \n                mxy[1].append(mvalue \/ mcount)\n                mxy[0].append(lm[j])\n                        \n            else: \n                res.append(lm[j])       \n    \n        comp[i] = res    \n\n    drawing2(pxy, mxy)    \n    return comp\n    ","67e3c973":"def comparison2(main, majority, pcoeff, mcoeff):\n    '''\n    majority: Must be greater than half the total number of kernels. \n              In this example it must be greater than six.(Hyper parameter)\n    \n    pcoeff:   Hyper parameter\n    mcoeff:   Hyper parameter\n    '''    \n    comp = main.copy()\n    for i in main.columns[1:]:\n        res = []\n        pxy = [[],[],[]]\n        mxy = [[],[],[]]        \n        lm  = main[i].tolist() \n        ls  = [[],[],[],[],[],[],[],[],[],[],[],[],[]]\n        for n in range (13):       \n            csv   = pd.read_csv(dfk.iloc[n, 2])  \n            ls[n] = csv[i].tolist() \n            \n        for j in range(len(main)):\n            pcount = 0\n            pvalue = 0.0        \n            mcount = 0\n            mvalue = 0.0 \n    \n            for k in range (13):            \n                if lm[j] > ls[k][j]:\n                    pcount += 1\n                    pvalue += ls[k][j]                 \n                else: \n                    mcount += 1\n                    mvalue += ls[k][j] \n                    \n            if (pcount > majority): \n                res.append(lm[j] * pcoeff)\n                pxy[2].append(lm[j] * pcoeff)                \n                pxy[1].append(pvalue \/ pcount)\n                pxy[0].append(lm[j])\n                        \n            elif (mcount > majority): \n                res.append(lm[j] * mcoeff)\n                mxy[2].append(lm[j] * mcoeff)                \n                mxy[1].append(mvalue \/ mcount)\n                mxy[0].append(lm[j])\n                        \n            else: \n                res.append(lm[j])       \n    \n        comp[i] = res    \n\n    drawing2(pxy, mxy)    \n    return comp\n    ","d98da70b":"def comparison3(main, majority, pcoeff, mcoeff):\n    '''\n    majority: Must be greater than half the total number of kernels. \n              In this example it must be greater than nine.(Hyper parameter)\n    \n    pcoeff:   Hyper parameter\n    mcoeff:   Hyper parameter\n    '''    \n    comp = main.copy()\n    for i in main.columns[1:]:\n        res = []\n        pxy = [[],[],[]]\n        mxy = [[],[],[]]        \n        lm  = main[i].tolist() \n        ls  = [[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]]\n        for n in range (19):       \n            csv   = pd.read_csv(dfk.iloc[n, 2])  \n            ls[n] = csv[i].tolist() \n            \n        for j in range(len(main)):\n            pcount = 0\n            pvalue = 0.0        \n            mcount = 0\n            mvalue = 0.0 \n    \n            for k in range (19):            \n                if lm[j] > ls[k][j]:\n                    pcount += 1\n                    pvalue += ls[k][j]                 \n                else: \n                    mcount += 1\n                    mvalue += ls[k][j] \n                    \n            if (pcount > majority): \n                res.append(lm[j] * pcoeff)\n                pxy[2].append(lm[j] * pcoeff)                \n                pxy[1].append(pvalue \/ pcount)\n                pxy[0].append(lm[j])\n                        \n            elif (mcount > majority): \n                res.append(lm[j] * mcoeff)\n                mxy[2].append(lm[j] * mcoeff)                \n                mxy[1].append(mvalue \/ mcount)\n                mxy[0].append(lm[j])\n                        \n            else: \n                res.append(lm[j])       \n    \n        comp[i] = res    \n\n    drawing2(pxy, mxy)    \n    return comp\n    ","f1d0e5bf":"def comparison5(main, orig, majority, pcoeff, mcoeff):\n    '''\n    majority: Must be greater than half the total number of kernels. \n              In this example it must be greater than ten.(Hyper parameter)\n    \n    pcoeff:   Hyper parameter\n    mcoeff:   Hyper parameter\n    '''    \n    comp = main.copy()\n    for i in main.columns[1:]:\n        res = []\n        pxy = [[],[],[]]\n        mxy = [[],[],[]]        \n        lm  = main[i].tolist() \n        lo  = orig[i].tolist()\n        ls  = [[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]]\n        for n in range (20):       \n            csv   = pd.read_csv(dfk.iloc[n, 2])  \n            ls[n] = csv[i].tolist() \n            \n        for j in range(len(main)):\n            pcount = 0\n            pvalue = 0.0        \n            mcount = 0\n            mvalue = 0.0 \n    \n            for k in range (20):            \n                if lm[j] > ls[k][j]:\n                    pcount += 1\n                    pvalue += ls[k][j]                 \n                else: \n                    mcount += 1\n                    mvalue += ls[k][j] \n                    \n            if (pcount > majority): \n                res.append(lo[j] * pcoeff)\n                pxy[2].append(lo[j] * pcoeff)                \n                pxy[1].append(pvalue \/ pcount)\n                pxy[0].append(lm[j])\n                        \n            elif (mcount > majority): \n                res.append(lo[j] * mcoeff)\n                mxy[2].append(lo[j] * mcoeff)                \n                mxy[1].append(mvalue \/ mcount)\n                mxy[0].append(lm[j])\n                        \n            else: \n                res.append(lm[j])       \n    \n        comp[i] = res    \n\n    drawing2(pxy, mxy)    \n    return comp\n    ","d232ab39":"support = pd.read_csv(dfk.iloc[0, 2])\n    \nfor k in range (1, 6):\n    main = pd.read_csv(dfk.iloc[k, 2])\n    support = generate(main, support, 0.60)\n    \nsub1 = support ","bc6cf680":"print('sub1(Last Support)    | Score: 0.84251')\n\na = pd.read_csv(dfk.iloc[0, 2])\n\nf = pd.read_csv(dfk.iloc[5, 2])\n\ndrawing1(f, a, sub1)\n\nsub1.describe()","5f23298e":"support = sub1\n    \nfor k in range (6, 14):\n    main = pd.read_csv(dfk.iloc[k, 2])\n    support = generate(main, support, 0.50)\n    \nsub2 = support ","38b2d944":"print('sub2(Last Support)    | Score: 0.84211')\n\nn = pd.read_csv(dfk.iloc[13, 2])\n\ndrawing1(n, sub1, sub2)\n\nsub2.describe()","d79f1aa2":"sub2 = comparison2(sub2, 10, 0.9970, 1.0000)","1a95ed1d":"support = sub2\n    \nfor k in range (14, 20):\n    main = pd.read_csv(dfk.iloc[k, 2])\n    support = generate(main, support, 0.40)\n    \nsub3 = support ","1d6cb7b1":"print('sub3(Last Support)    | Score: 0.84195')\n\nt = pd.read_csv(dfk.iloc[19, 2])\n\ndrawing1(t, sub2, sub3)\n\nsub3.describe()","20c6cec2":"sub3 = comparison3(sub3, 16, 1.0000, 0.9970)\n","751162a6":"main = pd.read_csv(dfk.iloc[20, 2])\n\nsub4 = generate(main, sub3, 0.60)","9153a5bf":"print('sub4    | Score: 0.84191')\n\ndrawing1(main, sub3, sub4)\n\nsub4.describe()","e3ffd401":"sub4 = comparison(sub4, 17, 0.9955, 0.9985)","ef743d41":"original = pd.read_csv(\"..\/input\/feb84186\/FEB84186.csv\") \n\nsub5 = comparison5(sub4, original, 18, 1.0000, 0.9960)\n","87d875bd":"print('sub5    | Score: 0.84185')\nsub5.describe()","4aca26f3":"sub = sub5\nsub.to_csv(\"submission.csv\", index=False)\n\nsub1.to_csv(\"submission1.csv\", index=False)\nsub2.to_csv(\"submission2.csv\", index=False)\nsub3.to_csv(\"submission3.csv\", index=False)\nsub4.to_csv(\"submission4.csv\", index=False)\nsub5.to_csv(\"submission5.csv\", index=False)\n\n!ls","ce56bb3a":"## Result:\n\n[ sub2: (Score: 0.84211), O: (Score: 0.84209), ... , T: (Score: 0.84198) ] >>> sub3: (Score: 0.84195)","281a7186":"<div class=\"alert alert-success\">  \n<\/div>","4132fb65":"<div class=\"alert alert-success\">  \n<\/div>","3eb6e951":"## Step #4\nUse the results of the \"U\" kernel as well as the results of step #3.","ff9e3895":"<div class=\"alert alert-success\">  \n<\/div>","dc97afb3":"## Result:\n\nsub4: (Score: 0.84191)  >>>  sub5: (Score: **0.84185**)","98ae1a7a":"<div class=\"alert alert-success\">  \n<\/div>","cf33c6e2":"# Import & Data Set","9e25f12d":"<div class=\"alert alert-success\">  \n<\/div>","e4f683f1":"<div class=\"alert alert-success\">  \n<\/div>","f35c70bb":"# Description:\n\n\n### - In this notebook, I used the results of my notebook and the results of twenty public notebooks. These results have been used for \"Ensembling\" and \"Comparative Method\". Thanks to everyone who shared their notebook, the addresses of some of the used notebooks are as follows:\n\nhttps:\/\/www.kaggle.com\/awwalmalhi\/extreme-fine-tuning-lgbm-using-7-step-training\n\nhttps:\/\/www.kaggle.com\/hiro5299834\/tps-feb-2021-with-single-lgbm-tuned\n\nhttps:\/\/www.kaggle.com\/craigmthomas\/tps-feb-2021-lgb-xgb-combo\n\nhttps:\/\/www.kaggle.com\/andreshg\/tps-feb-a-complete-study\n\nhttps:\/\/www.kaggle.com\/rmiperrier\/step-by-step-lgb-optimization\n\nhttps:\/\/www.kaggle.com\/tunguz\/tps-feb-2021-with-lgbmregressor\n\nhttps:\/\/www.kaggle.com\/ttahara\/tps-feb-2021-3gbdts-ensemble-baseline\n\n### - More information about the \"Comparative Method\" can be found at the following addresses:\n\nhttps:\/\/www.kaggle.com\/c\/tabular-playground-series-jan-2021\/discussion\/213093\n\nhttps:\/\/www.kaggle.com\/somayyehgholami\/0-69470-results-driven-january-tabular-301\n\nhttps:\/\/www.kaggle.com\/somayyehgholami\/results-driven-tabular-playground-series-201\n\n### - You can definitely mix your notebook results with the results of this notebook and get better results. You can also get better results by changing the hyperparameters of this notebook.\n\n### >>> Good Luck <<<\n","07ee94f7":"## Step #3\nIn this step, we use the results of kernels \"O, P, Q, R, S, T\".","27b3c9b6":"<div class=\"alert alert-success\">  \n<\/div>","4af0cb82":"<div>\n    <h1 align=\"center\">Optimizing Results<\/h1><\/h1>\n    <h1 align=\"center\">Ensembling & Comparative Method<\/h1>\n    <h3 align=\"center\">Tabular Playground Series - Feb 2021<\/h3>\n<\/div>","6d8943d9":"<div class=\"alert alert-success\">  \n<\/div>","10f69f32":"## Step #1\nIn this step, we use the results of kernels \"A, B, C, D, E, F\".","3f615d60":"## Result: \n[ sub1: (Score: 0.84251), G: (Score: 0.84266), ... , N: (Score: 0.84220) ] >>> sub2: (Score: **0.84211**)","cad74040":"## Step #5\n## Comparative Method\nIn this step, we so-called recover some of the results of the previous step. That is, we compensate for the bad effects of the previous stages.","d1482dfd":"## Result: \n[ A: (Score: 0.84362), ... , F: (Score: 0.84303) ] >>> sub1: (Score: **0.84251**)","33b77820":"# Functions:","2cc5ebaf":"# If you find this work useful, please don't forget upvoting :)","5e144bc2":"<div class=\"alert alert-success\">  \n<\/div>","0576ead7":"<div class=\"alert alert-success\">  \n<\/div>","a3abb58f":"## Step #2\nIn this step, we use the results of kernels \"G, H, I, J, K, L, M, N\".","9206a3a2":"<div class=\"alert alert-success\">  \n<\/div>","88ce7dd9":"## Result:\n\n[ U: (Score: 0.84193) , sub3: (Score: 0.84195) ] >>> sub4: (Score: 0.84191)"}}