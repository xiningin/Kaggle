{"cell_type":{"b92c1628":"code","f46a53d9":"code","c3145c24":"code","2b567c5a":"code","d91f95b3":"code","374842e8":"code","b0ad5264":"code","5c9edc48":"code","a85f6cff":"code","fa59f807":"code","930cc34b":"code","a135f787":"code","798a474c":"code","0bca2fb5":"code","66243b6a":"markdown","d11d9acc":"markdown","42749a44":"markdown","5b00e4e5":"markdown","0375f307":"markdown","ce8e1ac9":"markdown","93a048dc":"markdown"},"source":{"b92c1628":"from fastai import *\nfrom fastai.vision import *\nfrom fastai.metrics import accuracy,error_rate","f46a53d9":"class CustomImageItemList(ImageItemList):\n    def open(self, fn):\n        img = fn.reshape(28,28)\n        img = np.stack((img,)*3, axis=-1) # convert to 3 channels\n        return Image(pil2tensor(img, dtype=np.float32))\n\n    @classmethod\n    def from_csv_custom(cls, path:PathOrStr, csv_name:str, imgIdx:int=1, header:str='infer', **kwargs)->'ItemList':\n        df = pd.read_csv(Path(path)\/csv_name, header=header)\n        res = super().from_df(df, path=path, cols=0, **kwargs)\n        # convert pixels to an ndarray\n        res.items = df.iloc[:,imgIdx:].apply(lambda x: x.values \/ 255.0, axis=1).values\n        return res","c3145c24":"path = '..\/input'","2b567c5a":"# note: there are no labels in a test set, so we set the imgIdx to begin at the 0 col\ntest = CustomImageItemList.from_csv_custom(path=path, csv_name='test.csv', imgIdx=0)","d91f95b3":"tfms = get_transforms(do_flip=False)\ndata = (CustomImageItemList.from_csv_custom(path=path, csv_name='train.csv')\n                           .random_split_by_pct(.2)\n                           .label_from_df(cols='label')\n                           .add_test(test, label=0)\n                           .transform(tfms)\n                           .databunch(bs=64, num_workers=0)\n                           .normalize(imagenet_stats))\n                          ","374842e8":"data.show_batch(rows=3, figsize=(5,5))","b0ad5264":"learn = create_cnn(data, arch=models.resnet50, metrics=[accuracy,error_rate], model_dir='\/kaggle\/working\/models')","5c9edc48":"learn.lr_find()\nlearn.recorder.plot()","a85f6cff":"lr = 1e-2\nlearn.fit_one_cycle(8, lr)","fa59f807":"interp = ClassificationInterpretation.from_learner(learn)\ninterp.most_confused(min_val=2)","930cc34b":"learn.save('stage1-resnet50')","a135f787":"learn.load('stage1-resnet50')\nlearn.validate()","798a474c":"#learn.unfreeze()\n#learn.fit_one_cycle(1, 5e-6)","0bca2fb5":"# get the predictions\npredictions, *_ = learn.get_preds(DatasetType.Test)\nlabels = np.argmax(predictions, 1)\n# output to a file\nsubmission_df = pd.DataFrame({'ImageId': list(range(1,len(labels)+1)), 'Label': labels})\nsubmission_df.to_csv(f'submission.csv', index=False)","66243b6a":"**Final:** output the predictions to a competition file format","d11d9acc":"## Resnet50","42749a44":"## Training\nfound something somewhere that caused me to set `num_workers` equal to zero. Was getting an error and at the end of the day it seems it was pytorch\/windows thing and that was the work around.","5b00e4e5":"**Stage 1:** basic model fit","0375f307":"**Stage 2:** tweak all the layers","ce8e1ac9":"Below is a custom `ImageItemList` that allows us to load the kaggle datasets. Essentially, the images are stored as a label plus a pixel array wrapped up in a csv file.","93a048dc":"# Digit Recognizer "}}