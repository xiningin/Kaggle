{"cell_type":{"f9be1945":"code","016e6738":"code","62767b9c":"code","f5bbaca6":"code","8b919922":"code","7e39dcc4":"code","a604f6c7":"code","909f0b57":"code","afcabb11":"code","93e3bda1":"code","3cd6a6d0":"code","97078840":"code","a06f57f3":"code","896cd561":"code","8dd86c32":"code","f2fd2b06":"code","351b0b84":"code","c57ec4cc":"code","43c25fd7":"code","0d715468":"code","da0fcdb4":"code","6c1420a3":"code","55d7109a":"code","7344ea9a":"code","46795bf7":"code","81c5064a":"code","f4b198ad":"code","7deb37c6":"code","0ac4e0c6":"code","aea438f2":"code","15884ec2":"code","c4917dc2":"code","9099cf79":"code","8518bf69":"code","a3f50d88":"code","d47ed443":"code","6cc8d83d":"code","2a9f14f4":"code","f9b29f23":"markdown","c6ead382":"markdown","6913da7b":"markdown","10f5e7ac":"markdown","0a9d87f9":"markdown","2be3e85c":"markdown","7859bdaf":"markdown","189f46d4":"markdown","497b6d8b":"markdown","1f612e50":"markdown","bfb9dc7a":"markdown","6a663bbe":"markdown","c7c5fa85":"markdown","1e51b9af":"markdown","3f6780e0":"markdown","aed46e04":"markdown","ea514b09":"markdown","95ed4139":"markdown","6b9ab6b8":"markdown","8c961305":"markdown","7be1e1c0":"markdown","1560d8a2":"markdown","711c6e63":"markdown","6c140c8d":"markdown","31d180cc":"markdown"},"source":{"f9be1945":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","016e6738":"df = pd.read_csv(\"\/kaggle\/input\/housedata\/data.csv\")","62767b9c":"df","f5bbaca6":"df.info()","8b919922":"df.city.value_counts()","7e39dcc4":"df.country.value_counts()\n","a604f6c7":"df.street.value_counts()","909f0b57":"df.street = df.street.apply(lambda x: ' '.join(x.split(' ')[1:]))","afcabb11":"df.street.value_counts()","93e3bda1":"df.statezip.value_counts()","3cd6a6d0":"df.date = df.date.apply(lambda x: pd.to_datetime(x.split(' ')[0], format='%Y-%m-%d'))\n#remove hour:min:sec, and then cast the column into datetime","97078840":"df['year'] = df.date.dt.year\ndf.year.value_counts()\n#All of the datas are enetered on 2014, so this column worth nothing","a06f57f3":"df['month'] = df.date.dt.month\ndf.month.value_counts()\n\n#There are only 3 months, but it might be useful","896cd561":"df.yr_renovated","8dd86c32":"df.yr_renovated = df[[\"yr_built\", \"yr_renovated\"]].max(axis=1)","f2fd2b06":"sns.scatterplot(x=\"yr_renovated\", y=\"price\", data=df[df[\"price\"]  <= df[\"price\"].quantile(.99)])","351b0b84":"sns.scatterplot(x=\"sqft_living\", y=\"price\", data=df[df.price <= df.price.quantile(.99)])","c57ec4cc":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndf.city = le.fit_transform(df[[\"city\"]])\ndf.statezip = le.fit_transform(df[\"statezip\"])\n","43c25fd7":"df.drop([\"street\", \"date\", \"country\", \"year\"],axis = 1, inplace = True)","0d715468":"sns.boxplot(x=\"condition\", y=\"price\", data=df[df.price<=df.price.quantile(.98)])","da0fcdb4":"sns.swarmplot(x=\"condition\", y=\"price\", data=df[df.price<=df.price.quantile(.995)])","6c1420a3":"plt.figure(figsize=(20,20))\nsns.countplot(y=df[\"yr_renovated\"])\n","55d7109a":"df=df[(df.price >= df.price.quantile(.005)) & (df.price <= df.price.quantile(.995)) ]","7344ea9a":"plt.figure(figsize=(15,10))\nsns.heatmap(df.corr(), annot=True, cmap=\"Blues\")","46795bf7":"sns.distplot(df.price)\nplt.show()","81c5064a":"sns.distplot(df.sqft_living)","f4b198ad":"sns.distplot(df[df.sqft_lot <= df.sqft_lot.quantile(.95)].sqft_lot)","7deb37c6":"plt.figure(figsize=(12,5))\nsns.countplot(df.bathrooms)","0ac4e0c6":"sns.countplot(df.bedrooms)","aea438f2":"from sklearn.compose import make_column_transformer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import make_pipeline, Pipeline\n\ncol_trans = make_column_transformer(\n        (OneHotEncoder(handle_unknown = 'ignore'), [\"waterfront\", \"view\", \"condition\", \"city\", \"statezip\"]),\n        (StandardScaler(), [\"bedrooms\", \"bathrooms\", \"sqft_living\", \"sqft_lot\", \"floors\", \"sqft_above\", \"sqft_basement\"]),\n        remainder = \"passthrough\"\n)","15884ec2":"from sklearn.model_selection import train_test_split\nX = df.drop(\"price\", axis=1)\ny = df.price\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)","c4917dc2":"\nfrom sklearn.linear_model import LinearRegression\nlinR = LinearRegression()\npipe = make_pipeline(col_trans, linR)\n\npipe.fit(X_train, y_train)","9099cf79":"print(\"Mean Absolute Error: %f\" %(np.abs(pipe.predict(X_test) - y_test).mean()))\n","8518bf69":"import tensorflow as tf\nfrom keras.models import *\nfrom keras.layers import *\nfrom keras.optimizers import Adam\nfrom keras.metrics import MeanAbsoluteError as mae\n\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\n# early_stop = EarlyStopping(patience=20, verbose=1, monitor='val_accuracy', mode='max')","a3f50d88":"model = Sequential()\n\nmodel.add(Dense(32))\nmodel.add(Dense(64))\nmodel.add(Dense(128))\nmodel.add(Dense(1))\n\nmodel.compile(optimizer = Adam(1e-4),\n             loss = \"mean_absolute_error\",\n#              metrics = [mae]\n)","d47ed443":"early_stop = EarlyStopping(patience=10, verbose=1, monitor='mean_absolute_error', mode='min')","6cc8d83d":"\nhistory = model.fit(\n        X_train,\n        y_train,\n        epochs = 200,\n        callbacks=[early_stop],\n        validation_split=0.2,\n        verbose = 0\n    \n)","2a9f14f4":"model.evaluate(X_test, y_test)","f9b29f23":"160k, it's way higher\n\n**That's it!**, I have no idea what to do anymore here, I'll be back on this notebook later when I discovered more things to do","c6ead382":"Still 2600+ different values, but it can be more useful now\n\nHow about statezip?","6913da7b":"97k, still high :(\n\nhow about Neural Network?","10f5e7ac":"Remove Outliers","0a9d87f9":"Almost every row have different street, but it might be different if we delete the number","2be3e85c":"Well, my assumption is wrong, how about correlation between price with sqft living?","7859bdaf":"Dropping unecessary columns","189f46d4":"Data on each year","497b6d8b":"House price is most likely dependant to it's location, let's check the location","1f612e50":"Inspecting the distributions","bfb9dc7a":"Inspecting Price based on conditions","6a663bbe":"Since all of the houses are in USA, that column is completely useless, it will be dropped later\n\nLet's inspect the street","c7c5fa85":"Filling the 0 value with yr_built, yr_built = last renovated if it's never renovated, right?","1e51b9af":"So today, I'm going to use the techniques I learnt yesterday and put them to this dataset","3f6780e0":"I'm just using simple linear regression and neural network, numerical features will be scaled and categorical featores will be one-hot encoded\n","aed46e04":"There's nothing I can do anymore (so far), Let's predict the price!\n\n# Prediction","ea514b09":"Price Distribution based on Condition","95ed4139":"# EDA","6b9ab6b8":"My assumption is the price will be linear with yr_renovated, let's see the scatterplot","8c961305":"Encoding Categorical Features","7be1e1c0":"It seems this feature would be useful, how about country?","1560d8a2":"There are 0 values in yr_renovated, it means that the house is never renovated","711c6e63":"Inspecting the Correlation","6c140c8d":"77 values, it will be useful","31d180cc":"Now let's process the date, because it's a string column, we have to convert it into datetime first\n\nThen I'm splitting the year and month into new columns to see what we can get"}}