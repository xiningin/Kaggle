{"cell_type":{"40353cf2":"code","6c978ecb":"code","f14041de":"code","a91df3b2":"code","b8267023":"code","670e1c80":"code","2b995e4c":"code","fbc33991":"code","c38e54c6":"code","b7b2825e":"code","3dc1ff31":"code","ab015b9a":"code","0fcf356c":"code","c5080638":"markdown","09f7a492":"markdown"},"source":{"40353cf2":"# Importing LIBRARIES\nfrom keras.preprocessing.image import ImageDataGenerator, load_img\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.layers import Activation, Dropout, Flatten, Dense\nfrom keras import backend as K\nimport os\nimport numpy as np\nimport pandas as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","6c978ecb":"# Specifying the path of the data(train,test,validaton)\ntrain = '..\/input\/chest_xray\/chest_xray\/train'\ntest = '..\/input\/chest_xray\/chest_xray\/test' \nval = '..\/input\/chest_xray\/chest_xray\/val'","f14041de":"#Here we have backended keras to tensorflow ,so we go for channel_last ie to specify the channel value as the last dimension in shape of the input.\nimg_width,img_height= 150,150\ninput_shape = (img_width,img_height,3)\n\n\n","a91df3b2":"#It\u2019s just a thing function that you use to get the output of node. It is also known as Transfer Function.\n\n\nmodel = Sequential()\n# The number of filters are 32 and the kernal_size is (3,3)\nmodel.add(Conv2D(32, (3, 3), input_shape=input_shape))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(32, (3, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(64, (3, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(128, (3, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Flatten())\nmodel.add(Dropout(50))\nmodel.add(Dense(128))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(50))\nmodel.add(Dense(64))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(50))\nmodel.add(Dense(1))\nmodel.add(Activation('sigmoid'))","b8267023":"#Here we use RMSPROP optimizer and BINARY_CROSSENTROPY as loss function  \nmodel.compile(loss='binary_crossentropy',\n              optimizer='rmsprop',\n              metrics=['accuracy'])","670e1c80":"model.summary()","2b995e4c":"#ImageDataGenerator-Generate batches of tensor image data with real-time data augmentation. The data will be looped over (in batches).\n\ntrain_datagen = ImageDataGenerator(rescale=1. \/ 255,shear_range=0.2,zoom_range=0.2,horizontal_flip=True)\ntest_datagen = ImageDataGenerator(rescale=1. \/ 255)\n","fbc33991":"# Here we import images directly from Directory by using flow_from_directory method.\n#flow_from_directory() automatically infers the labels from the directory structure of the folders containing images\ntrain_generator = train_datagen.flow_from_directory(\n    train,\n    target_size=(img_width, img_height),\n    batch_size=16,\n    class_mode='binary')\n\ntest_generator = test_datagen.flow_from_directory(\n    test,\n    target_size=(img_width, img_height),\n    batch_size=16,\n    class_mode='binary')\n\nvalidation_generator = test_datagen.flow_from_directory(\n    val,\n    target_size=(img_width, img_height),\n    batch_size=16,\n    class_mode='binary')","c38e54c6":"#We Fit the model here using fit_generator as we are dealing with large datasets.\nmodel.fit_generator(\n    train_generator,\n    steps_per_epoch=5217 \/\/ 16,\n    epochs=20,\n    validation_data=validation_generator,\n    validation_steps=17 \/\/ 16)","b7b2825e":"#Accuracy of test data.\nscores = model.evaluate_generator(test_generator,624\/16)\nprint(\"\\nAccuracy:\"+\" %.2f%%\" % ( scores[1]*100))\n\n\n\n\n","3dc1ff31":"# saving model in H5 format.\nmodel.save('vison_v1.0.h5')","ab015b9a":"# saving model in Json format.\nmodel_json = model.to_json()\nwith open(\"model.json\",\"w\") as json_file:\n    json_file.write(model_json)","0fcf356c":"# Displaying images of Normal and Pneumonia \nimg_n = load_img('..\/input\/chest_xray\/chest_xray\/train\/NORMAL\/NORMAL2-IM-0927-0001.jpeg') \nplt.imshow(img_n)\nplt.title(\"Normal\")\nplt.show()\nimg_p = load_img('..\/input\/chest_xray\/chest_xray\/train\/PNEUMONIA\/person755_bacteria_2659.jpeg') \nplt.imshow(img_p) \nplt.title(\"Pneumonia\")\nplt.show()","c5080638":"# PNEUMONIA DETECTION USING CONVOLUTIONAL NEURAL NETWORKS(CNN)","09f7a492":"# Creating Model"}}