{"cell_type":{"fdfe3c2d":"code","ff090135":"code","953d975d":"code","27746021":"code","c8f765a5":"code","29ac60b0":"code","8f55565d":"code","1ad1078a":"code","3ecae7a8":"code","cea0bc37":"code","93bfa149":"code","52b82581":"code","b9b59c15":"code","286abd44":"code","94def94c":"code","c89990e3":"code","ff508723":"code","df3c8a8c":"code","518c64d2":"code","e3032b8b":"code","1dab4b88":"code","f7670d9f":"code","2af784d6":"code","6880f4a9":"code","4b4aa1a4":"code","669bb4df":"code","1b14f2cc":"code","15907187":"markdown"},"source":{"fdfe3c2d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ff090135":"df = pd.read_csv(\"..\/input\/heart.csv\")\ndf.head()","953d975d":"df.info()\n","27746021":"df.describe()","c8f765a5":"import seaborn as sns\nimport matplotlib.pyplot as plt\ndef correlation_heatmap(dataframe):\n    correlations = dataframe.corr()\n    sns.heatmap(correlations, vmax=1.0, center=0, fmt=\".2f\", square=True, \n               linewidth=.5, annot=True, cmap=\"coolwarm\", \n                cbar_kws={\"shrink\":.70})\n    fig=plt.gcf()\n    fig.set_size_inches(10,8)\n    plt.show()\ncorrelation_heatmap(df)\n","29ac60b0":"sns.pairplot(df)","8f55565d":"df.isnull().sum().sum()","1ad1078a":"X = df.drop([\"target\"],1)\ny = df[\"target\"]","3ecae7a8":"from sklearn.model_selection import train_test_split\ntrain_x, test_x, train_y, test_y = train_test_split(X, y, test_size=.33,\n                                                   random_state=2)","cea0bc37":"train_x.shape, test_x.shape, train_y.shape, test_y.shape","93bfa149":"from tpot import TPOTClassifier\ntpot = TPOTClassifier(generations=5, population_size=50, verbosity=2,\n                     n_jobs=-1)","52b82581":"tpot.fit(train_x, train_y)","b9b59c15":"print(\"Accuracy is {}\".format(tpot.score(test_x,test_y)))","286abd44":"\nfrom sklearn.model_selection import StratifiedKFold,cross_val_score,cross_val_predict\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier,GradientBoostingClassifier,ExtraTreesClassifier\nfrom sklearn import svm\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score,confusion_matrix,precision_score,recall_score,classification_report","94def94c":"k_fold = StratifiedKFold(n_splits=10)\nclassifiers = []","c89990e3":"classifiers.append(LogisticRegression())\nclassifiers.append(KNeighborsClassifier())\nclassifiers.append(DecisionTreeClassifier())\nclassifiers.append(svm.SVC())\nclassifiers.append(RandomForestClassifier())\nclassifiers.append(AdaBoostClassifier(DecisionTreeClassifier(),learning_rate=0.1))\nclassifiers.append(GradientBoostingClassifier())\nclassifiers.append(ExtraTreesClassifier())","ff508723":"results_list=[]\nmeans=[]\nstds=[]\n\nfor classifier in classifiers:\n    results_list.append(cross_val_score(classifier,X,y, scoring='accuracy',\n                                      cv=k_fold,n_jobs=-1))\n\nfor i in results_list:\n    means.append(i.mean())\n    stds.append(i.std())\n    \ncv_res=pd.DataFrame({'cross_val_means':means,'cross_val_errors':stds,\n                     'Algorithm':['Logistic Regression','Decision Tree',\n                                  'Random Forest','AdaBoost',\n                                  'Gradient Boosting',\n                                  'Extra Trees Classifier','SVM', 'KNN']})    \n","df3c8a8c":"g=sns.barplot(cv_res.cross_val_means,cv_res.Algorithm,data=cv_res,\n              palette='coolwarm',orient='h',**{'xerr':stds})\ng.set_xlabel('Mean Accuracy')\ng=g.set_title('Cross Validation Scores')","518c64d2":"logreg = LogisticRegression()\nlogreg.fit(train_x, train_y)\ny_hat = logreg.predict(test_x)\nprint(\"Accuracy is {}\".format(accuracy_score(test_y, y_hat)))","e3032b8b":"knn = KNeighborsClassifier(n_neighbors=20)\nknn.fit(train_x, train_y)\ny_hat_knn = knn.predict(test_x)\nprint(\"Accuracy is {}\".format(accuracy_score(test_y, y_hat_knn)))\n","1dab4b88":"Ks = 20\nmean_acc = np.zeros((Ks-1))\nstd_acc = np.zeros((Ks-1))\nConfustionMx = [];\nfor n in range(1,Ks):\n    \n    #Train Model and Predict  \n    neigh = KNeighborsClassifier(n_neighbors = n).fit(train_x,train_y)\n    yhat=neigh.predict(test_x)\n    mean_acc[n-1] = accuracy_score(test_y, yhat)\n\n    \n    std_acc[n-1]=np.std(yhat==test_y)\/np.sqrt(yhat.shape[0])\nmean_acc","f7670d9f":"plt.plot(range(1,Ks),mean_acc,'g')\nplt.fill_between(range(1,Ks),mean_acc - 1 * std_acc,mean_acc + 1 * std_acc, alpha=0.10)\nplt.legend(('Accuracy ', '+\/- 3xstd'))\nplt.ylabel('Accuracy ')\nplt.xlabel('Number of Nabors (K)')\nplt.tight_layout()\nplt.show()\n\nprint( \"The best accuracy was with\", mean_acc.max(), \"with k=\", \n      mean_acc.argmax()+1) \n","2af784d6":"confusion_m=confusion_matrix(test_y,y_hat)","6880f4a9":"sns.heatmap(confusion_m,annot=True,fmt='d',cmap='coolwarm')\nfig=plt.gcf()\nfig.set_size_inches(10,8)\nplt.xlabel('True')\nplt.ylabel('Predicted')\nplt.title('Confusion Matrix for SVM')\nplt.show();","4b4aa1a4":"print(classification_report(test_y,y_hat))","669bb4df":"from sklearn.pipeline import make_pipeline, make_union\nfrom tpot.builtins import StackingEstimator\n\nfeatures = X.values\ntraining_x,testing_x,training_y,testing_y=train_test_split(features, y.values, random_state=None)\n\n","1b14f2cc":"exported_pipeline = make_pipeline(\n    StackingEstimator(estimator=LogisticRegression(C=0.5,solver=\"liblinear\",dual=False,penalty=\"l2\")),\n    LogisticRegression(C=20.0, dual=False, penalty=\"l2\"))\n\nexported_pipeline.fit(training_x, training_y)\nresults = exported_pipeline.predict(testing_x)\nresults","15907187":"So the logistic regression scored better."}}