{"cell_type":{"02cbdd06":"code","e30a1e1c":"code","0ca16a2e":"code","e251aca2":"code","3c92e291":"code","407f57f0":"code","eafd6426":"code","fc085e62":"code","e2724e66":"code","25c1dbb3":"code","944d27c5":"code","bf6a574e":"code","e1e31878":"code","a621956e":"code","49e9fed8":"code","7a192714":"code","d8d24c18":"code","ff9b21f6":"code","8efaf184":"code","80158135":"code","89b9f821":"code","dc9dcb2b":"code","82f66b1b":"code","e5447940":"markdown","1ba0dcf2":"markdown","8f057e6d":"markdown","a19ce3cf":"markdown","fdb9d788":"markdown","da6001b6":"markdown","7fb23e0c":"markdown","30004bd3":"markdown","37a84542":"markdown","00c0e389":"markdown","dfc0766a":"markdown","3625aac4":"markdown","bc0ff868":"markdown","073a1533":"markdown"},"source":{"02cbdd06":"import warnings\nwarnings.filterwarnings('ignore')","e30a1e1c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras import models, layers","0ca16a2e":"train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","e251aca2":"train.head()","3c92e291":"y_train = train['label']\nX_train = train.drop(['label'], axis=1)","407f57f0":"X_train \/= 255.0\ntest \/= 255.0","eafd6426":"X_train = X_train.values.reshape(-1, 28, 28, 1)\ntest = test.values.reshape(-1, 28, 28, 1)","fc085e62":"def plot(data, labels, title='Label'):\n    plt.figure(figsize=(10, 9))\n    for i in range(12):\n        plt.subplot(3, 4, i+1)\n        plt.imshow(data[i][:,:,0])\n        plt.title('{}: {}'.format(title, labels[i]))\n        plt.axis('off');","e2724e66":"plot(X_train, y_train)","25c1dbb3":"model = models.Sequential([\n    layers.Conv2D(32, (3, 3), activation='relu', padding = 'Same', input_shape=(28, 28, 1)),\n    layers.MaxPooling2D(),\n    layers.Conv2D(64, (3, 3), activation='relu', padding = 'Same'),\n    layers.MaxPooling2D(),\n    layers.Conv2D(128, (3, 3), activation='relu'),\n    layers.MaxPooling2D(),\n    layers.Flatten(),\n    layers.Dense(512, activation='relu'),\n    layers.Dense(10, activation='softmax')\n])","944d27c5":"model.compile(optimizer='adam',\n             loss='sparse_categorical_crossentropy',\n             metrics=['acc'])","bf6a574e":"model.summary()","e1e31878":"EPOCHS = 5","a621956e":"%%time\nhistory = model.fit(X_train, y_train.values,\n                   validation_split=.1,\n                   epochs=EPOCHS, batch_size=64,\n                   verbose=2)","49e9fed8":"acc = history.history['acc']\nval_acc = history.history['val_acc']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']","7a192714":"epochs = range(EPOCHS)","d8d24c18":"plt.figure(figsize=(15, 6))\n\nplt.subplot(1, 2, 1)\nplt.title('Training and Validation Loss')\nplt.plot(epochs, loss, label='Training')\nplt.plot(epochs, val_loss, label='Validation')\nplt.legend()\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\n\nplt.subplot(1, 2, 2)\nplt.title('Training and Validation Accuracy')\nplt.plot(epochs, acc, label='Training')\nplt.plot(epochs, val_acc, label='Validation')\nplt.legend()\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\n\nplt.show()","ff9b21f6":"%%time\nresults = model.predict(test)","8efaf184":"results = np.argmax(results, axis=1)","80158135":"plot(test, results, 'Predicted label')","89b9f821":"results = pd.Series(results, name='Label')","dc9dcb2b":"submission = pd.concat([pd.Series(range(1, 28001), name='ImageId'), results], axis=1)","82f66b1b":"submission.to_csv('digit_recognizer.csv', index=False)","e5447940":"Let's see some of our predictions.","1ba0dcf2":"# Export predictions","8f057e6d":"# Import necessary modules","a19ce3cf":"Following function plots $12$ images from the dataset in a $3$ x $4$ grid. Title of each image represents its corresponding label.","fdb9d788":"Now, as we are ready with our data, it's time for defining and fitting a model. But before that, let's visualize what we have.","da6001b6":"# Load and prepare the data","7fb23e0c":"Plot Accuracy vs. Loss!","30004bd3":"# Visualization","37a84542":"It's time for some normalization and reshaping.","00c0e389":"As we can see, apart from **label**, dataset has $784$ more columns, which represnets pixle values of an $28$ x $28$ image.\n\nLet's create `X_train` and `y_train` from `train`.","dfc0766a":"Convert `results` to **Pandas Series**.","3625aac4":"# Make predictions","bc0ff868":"# Fit the model","073a1533":"# Define the model"}}