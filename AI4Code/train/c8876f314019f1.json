{"cell_type":{"5cf59885":"code","66fd3723":"code","d90783da":"code","3498d531":"code","a1f8e410":"code","d61bf129":"code","09d81c13":"code","5b230392":"code","0ab65c79":"code","4045077b":"code","58137866":"code","290e3924":"code","554e3c7a":"code","269f9c6a":"code","c2e94645":"code","cfb1737d":"code","f5554941":"code","3fb17b2a":"markdown","d44789fe":"markdown","367e2941":"markdown","6bdcd30e":"markdown","a5c82c60":"markdown","eb6da5b9":"markdown","308917f1":"markdown","073b190d":"markdown","008e2c43":"markdown","78e11b5d":"markdown","38a31a8b":"markdown","b4ef061c":"markdown","3cc2e5ab":"markdown","34cee72a":"markdown"},"source":{"5cf59885":"!pip install tensorflow==2.2.0rc3","66fd3723":"import tensorflow as tf\nprint(tf.__version__)","d90783da":"from tensorflow.keras import layers\nfrom tensorflow.keras import Model\nfrom tensorflow.keras.applications.inception_v3 import InceptionV3\n\nimage_size = 300\npre_trained_model = InceptionV3(\n  input_shape = (image_size, image_size, 3),\n  include_top = False,\n  weights = 'imagenet')\n\nfor layer in pre_trained_model.layers:\n  layer.trainable = False\n\nlast_layer = pre_trained_model.get_layer('mixed7')\nprint('last layer output shape: ', last_layer.output_shape)\nlast_output = last_layer.output","3498d531":"from tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.metrics import TruePositives, FalsePositives, TrueNegatives, FalseNegatives, BinaryAccuracy, Precision, Recall, AUC\n\n# Flatten the output layer to 1 dimension\nx = layers.Flatten()(last_output)\n# Add a fully connected layer with 1,024 hidden units and ReLU activation\nx = layers.Dense(1024, activation='relu')(x)\n# Add a dropout rate of 0.4\nx = layers.Dropout(0.4)(x)\n# Add a final sigmoid layer for classification\nx = layers.Dense(1, activation='sigmoid')(x)\n\nmodel = Model(pre_trained_model.input, x)\n\nthreshold = 0.5\nMETRICS = [\n  TruePositives(name='tp', thresholds = threshold),\n  FalsePositives(name='fp', thresholds = threshold),\n  TrueNegatives(name='tn', thresholds = threshold),\n  FalseNegatives(name='fn', thresholds = threshold),\n  BinaryAccuracy(name='accuracy', threshold = threshold),\n  Precision(name='precision', thresholds = threshold),\n  Recall(name='recall', thresholds = threshold),\n  AUC(name='auc')\n]\n\nmodel.compile(\n  optimizer = Adam(lr=1e-3), \n  loss = 'binary_crossentropy', \n  metrics = METRICS)","a1f8e410":"import os\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define our example directories and files\nbase_dir = '..\/input\/chest-xray-pneumonia\/chest_xray'\n\ntrain_dir = os.path.join(base_dir, 'train')\nvalidation_dir = os.path.join(base_dir, 'val')\ntest_dir = os.path.join( base_dir, 'test')\n\n\ntrain_normal_dir = os.path.join(train_dir, 'NORMAL')\ntrain_pneumonia_dir = os.path.join(train_dir, 'PNEUMONIA')\nvalidation_normal_dir = os.path.join(validation_dir, 'NORMAL')\nvalidation_pneumonia_dir = os.path.join(validation_dir, 'PNEUMONIA')\ntest_normal_dir = os.path.join(test_dir, 'NORMAL')\ntest_pneumonia_dir = os.path.join(test_dir, 'PNEUMONIA')\n\ntrain_normal_fnames = os.listdir(train_normal_dir)\ntrain_pneumonia_fnames = os.listdir(train_pneumonia_dir)\n\n# Show some examples\nplt.figure(figsize=(12,8))\nfor n in range(3):\n  plt.subplot(2,3,n+1)\n  path = os.path.join(train_normal_dir, train_normal_fnames[n])\n  img = plt.imread(path)\n  plt.imshow(img, cmap='gray')\n  plt.title(train_normal_fnames[n])\n  plt.axis('off')\n  plt.subplot(2,3,n+4)\n  path = os.path.join(train_pneumonia_dir, train_pneumonia_fnames[n])\n  img = plt.imread(path)\n  plt.imshow(img, cmap='gray')\n  plt.title(train_pneumonia_fnames[n])\n  plt.axis('off')\n","d61bf129":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\n# Add our data-augmentation parameters to ImageDataGenerator\ntrain_datagen = ImageDataGenerator(\n  rescale = 1.\/255.,\n  rotation_range = 10,\n  width_shift_range = 0.2,\n  height_shift_range = 0.2,\n  shear_range = 0,\n  zoom_range = 0.2,\n  horizontal_flip = False)\n\n# Note that the validation data should not be augmented!\nvalidation_datagen = ImageDataGenerator(rescale = 1.\/255.)\n\ntrain_generator = train_datagen.flow_from_directory(\n  train_dir,\n  batch_size = 20,\n  class_mode = 'binary',\n  target_size = (image_size, image_size))\n\nprint(train_generator.class_indices)\nclasses = np.array(train_generator.classes)\n(_ , occurences) = np.unique(classes, return_counts=True)\nneg = occurences[0]\npos = occurences[1]\ntot = neg + pos\nprint('Training normal cases: {}'.format(neg))\nprint('Training pneumonia cases: {}'.format(pos))\nprint('Training total cases: {}'.format(tot))\n\nvalidation_generator = validation_datagen.flow_from_directory(\n  validation_dir,\n  batch_size = 20,\n  class_mode = 'binary',\n  target_size = (image_size, image_size))","09d81c13":"weight_for_0 = tot\/neg\/2.0 \nweight_for_1 = tot\/pos\/2.0\n\nclass_weight = {0: weight_for_0, 1: weight_for_1}\n\nprint('Weight for class 0: {:.2f}'.format(weight_for_0))\nprint('Weight for class 1: {:.2f}'.format(weight_for_1))","5b230392":"history = model.fit(\n  train_generator,\n  validation_data = validation_generator,\n  steps_per_epoch = len(train_generator),\n  validation_steps = len(validation_generator),\n  epochs = 10,\n  class_weight = class_weight,\n  verbose = 2)","0ab65c79":"import matplotlib.pyplot as plt\n\nacc = history.history['accuracy']\nloss = history.history['loss']\nrecall = history.history['recall']\nepochs = range(1, len(acc) + 1)\nplt.plot(epochs, acc, 'r', label='Training accuracy')\nplt.plot(epochs, loss, 'b', label='Training loss')\nplt.plot(epochs, val_loss, 'g', label='Validation loss')\nplt.title('Training')\nplt.legend(loc=0)\nplt.axis([1, len(acc), 0, 1])\nplt.grid(True)\nplt.figure()\nplt.show()","4045077b":"test_datagen = ImageDataGenerator(rescale = 1.\/255.)\ntest_generator = test_datagen.flow_from_directory(\n  test_dir,\n  batch_size = 20,\n  class_mode = 'binary',\n  shuffle = False,\n  target_size = (image_size, image_size))\n\nprint(test_generator.class_indices)\n(_ , occurences) = np.unique(test_generator.classes, return_counts=True)\ntest_neg = occurences[0]\ntest_pos = occurences[1]\ntest_tot = test_neg + test_pos\nprint('Test normal cases: {}'.format(test_neg))\nprint('Test pneumonia cases: {}'.format(test_pos))\nprint('Test total cases: {}'.format(test_tot))","58137866":"results = model.evaluate(test_generator, steps=len(test_generator))\nfor name, value in zip(model.metrics_names, results):\n  print(name, ': ', value)","290e3924":"predictions = []\nlabels = []\nfor i in range(len(test_generator)):\n  x, y = next(test_generator)\n  predictions.append(model.predict(x))\n  labels.append(y)\npredictions = np.concatenate(predictions)\nlabels = np.concatenate(labels)","554e3c7a":"import seaborn as sns\nfrom sklearn.metrics import confusion_matrix\n\ndef plot_cm(labels, predictions, p=0.5):\n  cm = confusion_matrix(labels, predictions > p)\n  plt.figure(figsize=(5,5))\n  sns.heatmap(cm, annot=True, fmt=\"d\")\n  plt.title('Confusion matrix @{:.2f}'.format(p))\n  plt.ylabel('Actual label')\n  plt.xlabel('Predicted label')\n\nplot_cm(labels, predictions)","269f9c6a":"import sklearn.metrics\n\ndef plot_roc(name, labels, predictions, **kwargs):\n  fpr, tpr, thresholds = sklearn.metrics.roc_curve(labels, predictions)\n  plt.figure(figsize=(5,5))\n  plt.plot(fpr, tpr, label=name, linewidth=2, **kwargs)\n  plt.xlabel('False positives rate')\n  plt.ylabel('True positives rate')\n  plt.grid(True)\n  # Youden's J statistic\n  J = tpr - fpr\n  ix = np.argmax(J)\n  best_threshold = thresholds[ix]\n  print('Best Threshold : {:.2f}'.format(best_threshold))\n  plt.plot([0,1], [0,1], linestyle='--', color='k', label='No Skill')\n  plt.scatter(fpr[ix], tpr[ix], marker='o', color='r', label='Best')\n  ax = plt.gca()\n  ax.set_aspect('equal')\n  return best_threshold\n\nbest_threshold = plot_roc(\n  \"Test\",\n  labels,\n  predictions,\n  color='b')\nplt.legend(loc='lower right')","c2e94645":"plot_cm(labels, predictions, p=best_threshold)","cfb1737d":"NEW_METRICS = [\n  TruePositives(name='tp', thresholds = best_threshold),\n  FalsePositives(name='fp', thresholds = best_threshold),\n  TrueNegatives(name='tn', thresholds = best_threshold),\n  FalseNegatives(name='fn', thresholds = best_threshold),\n  BinaryAccuracy(name='accuracy', threshold = best_threshold),\n  Precision(name='precision', thresholds = best_threshold),\n  Recall(name='recall', thresholds = best_threshold),\n  AUC(name='auc')\n]\nfor m in NEW_METRICS:\n  m.update_state(labels, predictions) \n  print (m.name, ': ', m.result().numpy())","f5554941":"import numpy as np\nfrom keras.preprocessing import image\n\ntest_normal_fnames = os.listdir(test_normal_dir)\ntest_pneumonia_fnames = os.listdir(test_pneumonia_dir)\n\ntrue_negatives = 0\nfalse_positives = 0\nfor fn in test_normal_fnames:\n  path = os.path.join(test_normal_dir, fn)\n  img = image.load_img(path, target_size=(image_size, image_size))\n  x = image.img_to_array(img)\n  x \/= 255.0\n  x = np.expand_dims(x, axis=0)\n  images = np.vstack([x])\n  out = model.predict(images)\n  if out <= best_threshold:\n    true_negatives += 1\n  else:\n    false_positives += 1\n\ntrue_positives = 0\nfalse_negatives = 0\nfor fn in test_pneumonia_fnames:\n  path = os.path.join(test_pneumonia_dir, fn)\n  img = image.load_img(path, target_size=(image_size, image_size))\n  x = image.img_to_array(img)\n  x \/= 255.0\n  x = np.expand_dims(x, axis=0)\n  images = np.vstack([x])\n  out = model.predict(images)\n  if out <= best_threshold:\n    false_negatives += 1\n  else:\n    true_positives += 1\n\nprint('Best threshold: ', best_threshold)\nprint('True negatives: ', true_negatives)\nprint('False positives: ', false_positives)\nprint('False negatives: ', false_negatives)\nprint('True positives: ', true_positives)","3fb17b2a":"This code works well with tensorflow 2.2.0rc3. Let's install this version.","d44789fe":"Let's train our model. We deal with our imbalanced dataset by setting different weights for our 2 classes, as suggested in https:\/\/www.tensorflow.org\/tutorials\/structured_data\/imbalanced_data#class_weights. The model will 'pay more attention' to our negative class, which has fewer examples.","367e2941":"Let's start by using the Inception v3 model. We use the weights obtained by training on the ImageNet dataset.","6bdcd30e":"Let's plot the confusion matrix of the model with a threshold equal to 0.5.","a5c82c60":"Let's get predictions of our model on the test images.","eb6da5b9":"Let's evaluate our model with our test subfolder.","308917f1":"Let's add some layers which we will train. We use some metrics, which are useful for our classification task.","073b190d":"Let's check the results without generators.","008e2c43":"Let's plot some training metrics as a function of epochs","78e11b5d":"Let's use ImageDataGenerator to load images from disk. We also use data augmentation for our training images to help prevent overfitting. This data augmentation technique works directly in memory.","38a31a8b":"Let's check the results.","b4ef061c":"Let's plot the ROC curve. We find the optimal threshold, which maximizes the Youden's J statistic, as suggested at https:\/\/machinelearningmastery.com\/threshold-moving-for-imbalanced-classification\/.","3cc2e5ab":"Let's plot the confusion matrix at optimal threshold.","34cee72a":"Let's define some paths. We show some example images from the training portion of the dataset."}}