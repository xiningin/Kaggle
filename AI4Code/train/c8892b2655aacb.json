{"cell_type":{"a60beb35":"code","aa94b600":"code","2012e955":"code","daa100ab":"code","13e79c55":"code","29e16daf":"code","4fde9e86":"code","28d88f8c":"code","2dc99ec2":"code","046c2f18":"code","eed523f4":"code","b9ef22a1":"code","aa81d1bb":"code","cf0bdcfa":"code","103b1be5":"code","9c8e9939":"code","73d8c80c":"code","af42135f":"code","c931a198":"code","3d4e171f":"code","d071f5e9":"code","437b3235":"code","ca3d8ca6":"code","64b5be96":"markdown","af5066b7":"markdown","50914303":"markdown","89053786":"markdown"},"source":{"a60beb35":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport lightgbm as lgb\nfrom category_encoders.ordinal import OrdinalEncoder\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import f1_score","aa94b600":"train = pd.read_csv('\/kaggle\/input\/kakr-4th-competition\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/kakr-4th-competition\/test.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/kakr-4th-competition\/sample_submission.csv')","2012e955":"train.head()","daa100ab":"sns.distplot(train.age)\nsns.distplot(np.log1p(train.age))","13e79c55":"train.age = np.log1p(train.age)\ntest.age = np.log1p(test.age)","29e16daf":"sns.distplot(train.hours_per_week)\nsns.distplot(np.log1p(train.hours_per_week))","4fde9e86":"train.hours_per_week = np.log1p(train.hours_per_week)\ntest.hours_per_week = np.log1p(test.hours_per_week)","28d88f8c":"sns.distplot(train.fnlwgt)\nsns.distplot(np.log1p(train.fnlwgt))","2dc99ec2":"train.fnlwgt = np.log1p(train.fnlwgt)\ntest.fnlwgt = np.log1p(test.fnlwgt)","046c2f18":"train['capital_d'] = train.capital_gain - train.capital_loss\ntest['capital_d'] = test.capital_gain - test.capital_loss","eed523f4":"train.capital_gain = np.log1p(train.capital_gain)\ntest.capital_gain = np.log1p(test.capital_gain)","b9ef22a1":"train.capital_loss = np.log1p(train.capital_loss)\ntest.capital_loss = np.log1p(test.capital_loss)","aa81d1bb":"train.capital_d = np.log1p(train.capital_d)\ntest.capital_d = np.log1p(test.capital_d)","cf0bdcfa":"target = train['income'] != '<=50K'\ntrain.drop(['income'], axis=1, inplace=True)","103b1be5":"train_le = train\ntest_le = test\n# LE_encoder = OrdinalEncoder(list(train.columns))\n# train_le = LE_encoder.fit_transform(train, target)\n# test_le = LE_encoder.transform(test)","9c8e9939":"cat_features = ['workclass', 'education', 'marital_status', 'occupation', 'relationship', 'race', 'sex', 'native_country']","73d8c80c":"for f in cat_features:\n    train_le[f] = train_le[f].astype('category')\n    test_le[f] = test_le[f].astype('category')","af42135f":"skf = StratifiedKFold(n_splits=5)\n# train_le['fold'] = 0\nfold_id_list = list()\nfor fold_id, (trn_id, val_id) in enumerate(skf.split(X=train_le.index, y=target)):\n    fold_id_list.append(val_id)","c931a198":"params = {\n        'objective':'binary',\n        \"boosting\": \"gbdt\",\n        'num_leaves': 100,\n        'max_depth': 6,#16\n        'learning_rate': 0.1,#0.1\n#         'min_data_in_leaf': 16, \n#         'min_child_samples': 30,\n#         'min_child_weight': 0.5,\n#         'min_split_gain': 0.1,\n#         \"feature_fraction\": 0.9,\n#         \"bagging_fraction\": 0.9,\n#         \"bagging_freq\": 2,\n        \"bagging_seed\": 42,\n        \"colsample_bytree\": 0.8,\n        \"metric\": 'lgb_f1_score',\n        \"lambda_l1\": 0.2,\n        \"lambda_l2\": 0.5,\n        'verbose':-1\n    }","3d4e171f":"def custom_round(predict, threshold):\n    data = predict.copy()\n    try:\n        data.loc[data>=threshold] = 1\n        data.loc[data<threshold] = 0\n    except:\n        data[data>=threshold] = 1\n        data[data<threshold] = 0\n    return data\n\ndef lgb_f1_score(y_hat, data):\n    y_true = data.get_label()\n#     y_hat = custom_round(y_hat, np.quantile(y_hat, 0.7))\n    y_hat = custom_round(y_hat, 0.5) #  \n    return 'f1', f1_score(y_true, y_hat), True","d071f5e9":"C_FOLD = 0\nresult_pred = list()\nfor C_FOLD in range(5):\n    valid_fold_id = fold_id_list[C_FOLD]\n    \n    train_dataset = train_le.loc[train_le.index.isin(valid_fold_id) == False]\n    valid_dataset = train_le.loc[train_le.index.isin(valid_fold_id)]\n    \n    train_target = target[train_le.index.isin(valid_fold_id) == False]\n    valid_target = target[train_le.index.isin(valid_fold_id)]\n    \n    # LightGBM\n    trn_df = lgb.Dataset(train_dataset, label=train_target)\n    val_df = lgb.Dataset(valid_dataset, label=valid_target)\n    \n    model = lgb.train(params, trn_df, 1000, \n                            valid_sets = [trn_df, val_df], \n                            early_stopping_rounds = 100, \n                            verbose_eval=100, \n                            feval=lgb_f1_score)\n    pred = model.predict(test_le)\n    result_pred.append(pred)\n    \n    # RandomForest\n#     RF_clf = RandomForestClassifier()\n#     RF_clf.fit(train_dataset, train_target)\n    \n#     pred = RF_clf.predict_proba(test_le)\n#     result_pred.append(pred[:, 1])\nresult_pred = np.stack(result_pred)","437b3235":"# result_pred = custom_round(result_pred.mean(axis=0), np.quantile(result_pred.mean(axis=0), 0.7))\nresult_pred = (result_pred.mean(axis=0) >= 0.5)","ca3d8ca6":"sample_submission['prediction'] = result_pred.astype(int)\nsample_submission.to_csv('submission.csv', index=False)","64b5be96":"## EDA & pre-process","af5066b7":"## Label data convert","50914303":"## Load library","89053786":"## Load data"}}