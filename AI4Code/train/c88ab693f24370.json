{"cell_type":{"eafedb1e":"code","1cb83b35":"code","bbd62f79":"code","46196072":"code","2d70d3a9":"code","e15a5905":"code","33340d00":"code","a70d41b1":"code","79534c7c":"code","f10568bf":"code","b35aee3d":"code","7d174cb0":"code","e9512287":"code","becbbb09":"code","0491b27d":"code","21b2f12e":"code","c84d5e2d":"code","44a6cff4":"code","fe8b29f3":"code","51601af8":"code","129e616b":"code","1ed2595f":"code","c011c94a":"code","95788f99":"code","14ad3825":"code","70d25263":"code","b69bca24":"code","d0a39c39":"code","9799a4fd":"code","e70929d5":"code","16b105e4":"code","c39f41b0":"code","b0eac9a7":"code","8d141900":"code","25dfab60":"code","67852448":"code","18c13d34":"code","66c18dd6":"code","ac132646":"code","1b508e2a":"code","8b4264e1":"code","0b06a334":"code","8e2a808f":"code","cba074ad":"code","ba2987d1":"code","e69ee573":"code","4929898f":"code","f8f495d6":"code","947c506e":"code","b6c770e5":"code","db647fa2":"code","c86b1e52":"code","65072a67":"code","3c4a900c":"code","3e136fee":"code","6232b50a":"code","b7e7b50c":"code","6ccfdb5a":"markdown","f6409103":"markdown","7c438777":"markdown","f6b36bd3":"markdown"},"source":{"eafedb1e":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\n%matplotlib inline\nimport matplotlib\nmatplotlib.rcParams[\"figure.figsize\"] = (20,10)","1cb83b35":"df1 = pd.read_csv('..\/input\/bengaluru-house-price-data\/Bengaluru_House_Data.csv')\ndf1.head()","bbd62f79":"df1.shape","46196072":"df1.groupby('area_type')['area_type'].agg('count')","2d70d3a9":"df2 = df1.drop(['area_type','society','balcony','availability'],axis='columns')\ndf2.head()","e15a5905":"df2.isnull().sum()","33340d00":"df3 = df2.dropna()\ndf3.isnull().sum()","a70d41b1":"df3.shape","79534c7c":"df3['size'].unique()","f10568bf":"df3['bhk'] = df3['size'].apply(lambda x: int(x.split(' ')[0]))","b35aee3d":"df3.head()","7d174cb0":"df3['bhk'].unique()","e9512287":"df3[df3.bhk>20]","becbbb09":"df3.total_sqft.unique()","0491b27d":"def is_float(x):\n    try:\n        float(x)\n    except:\n        return False\n    return True","21b2f12e":"df3[~df3['total_sqft'].apply(is_float)].head(10)","c84d5e2d":"def convert_sqft_to_num(x):\n    tokens = x.split('-')\n    if len(tokens) == 2:\n        return (float(tokens[0])+float(tokens[1]))\/2\n    try:\n        return float(x)\n    except:\n        return None","44a6cff4":"df4 = df3.copy()\ndf4['total_sqft'] = df4['total_sqft'].apply(convert_sqft_to_num)\ndf4.head()","fe8b29f3":"df5 = df4.copy()\n#price_per_sqrt columns\ndf5['price_per_sqft'] = df5['price']*100000\/df5['total_sqft']\ndf5.head()","51601af8":"len(df5.location.unique())","129e616b":"# how many datapoint for loacation\ndf5.location = df5.location.apply(lambda x: x.strip())\n\nlocation_stats = df5.groupby('location')['location'].agg('count').sort_values(ascending=False)","1ed2595f":"location_stats","c011c94a":"len(location_stats[location_stats<=10])","95788f99":"location_stats_less_than_10 = location_stats[location_stats<=10]","14ad3825":"location_stats_less_than_10","70d25263":"df5.location = df5.location.apply(lambda x: 'other' if x in location_stats_less_than_10 else x)\nlen(df5.location.unique())","b69bca24":"df5.head(10)","d0a39c39":"df5[df5.total_sqft\/df5.bhk<300].head()","9799a4fd":"df5.shape","e70929d5":"df6 = df5[~(df5.total_sqft\/df5.bhk<300)]\ndf6.shape","16b105e4":"df6.price_per_sqft.describe()","c39f41b0":"def remove_pps_outlier(df):\n    df_out = pd.DataFrame()\n    for key, subdf in df.groupby('location'):\n        m = np.mean(subdf.price_per_sqft)\n        st = np.std(subdf.price_per_sqft)\n        reduced_df = subdf[(subdf.price_per_sqft>(m-st)) & (subdf.price_per_sqft<=(m+st))]\n        df_out = pd.concat([df_out,reduced_df],ignore_index=True)\n    return df_out","b0eac9a7":"df7 = remove_pps_outlier(df6)\ndf7.shape","8d141900":"def plot_scatter_chart(df,location):\n    bhk2 = df[(df.location==location) & (df.bhk==2)]\n    bhk3 = df[(df.location==location) & (df.bhk==3)]\n    matplotlib.rcParams['figure.figsize']=(15,10)\n    plt.scatter(bhk2.total_sqft,bhk2.price,color='blue',label='2 BHK', s=50)\n    plt.scatter(bhk3.total_sqft,bhk3.price,marker='+',color='green',label='3 BHK', s=50)\n    plt.xlabel('Total per square Area')\n    plt.ylabel('Price per square Feet')\n    plt.title(location)\n    plt.legend()\n    \nplot_scatter_chart(df7,'HSR Layout')","25dfab60":"def remove_bhk_outliers(df):\n    exclude_indices = np.array([])\n    for location, location_df in df.groupby('location'):\n        bhk_stats = {}\n        for bhk,bhk_df in location_df.groupby('bhk'):\n            bhk_stats[bhk] = {\n                'mean': np.mean(bhk_df.price_per_sqft),\n                'std': np.std(bhk_df.price_per_sqft),\n                'count':bhk_df.shape[0]\n            }\n        for bhk, bhk_df in location_df.groupby('bhk'):\n            stats = bhk_stats.get(bhk-1)\n            if stats and stats['count']>5:\n                exclude_indices = np.append(exclude_indices, bhk_df[bhk_df.price_per_sqft<(stats['mean'])].index.values)\n    return df.drop(exclude_indices, axis='index')\n\ndf8 = remove_bhk_outliers(df7)\ndf8.shape","67852448":"plot_scatter_chart(df8,'Old Airport Road')","18c13d34":"import matplotlib\nmatplotlib.rcParams['figure.figsize']=(20,10)\nplt.hist(df8.price_per_sqft,rwidth=0.8)\nplt.xlabel('Price per square feet')\nplt.ylabel('Count')\nplt.show()","66c18dd6":"df8.bath.unique()","ac132646":"df8[df8.bath>10]","1b508e2a":"plt.hist(df8.bath,rwidth=0.8)\nplt.xlabel('Number of bathrooms')\nplt.ylabel('Count')\nplt.show()","8b4264e1":"df8[df8.bath>df8.bhk+2]","0b06a334":"df9 = df8[df8.bath<df8.bhk+2]\ndf9.shape","8e2a808f":"df10 = df9.drop(['size','price_per_sqft'],axis='columns')\ndf10.head(3)","cba074ad":"dummies = pd.get_dummies(df10.location)\ndummies.head(3)","ba2987d1":"df11 = pd.concat([df10,dummies.drop('other',axis='columns')],axis='columns')\ndf11.head()","e69ee573":"df12 = df11.drop('location',axis='columns')\ndf12.head(2)","4929898f":"df12.shape","f8f495d6":"X = df12.drop('price',axis='columns')\nX.head()","947c506e":"y = df12.price\ny.head()","b6c770e5":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=10)","db647fa2":"from sklearn.linear_model import LinearRegression\nlr_clf = LinearRegression()\nlr_clf.fit(X_train,y_train)\nlr_clf.score(X_test,y_test)","c86b1e52":"from sklearn.model_selection import ShuffleSplit\nfrom sklearn.model_selection import cross_val_score\n\ncv = ShuffleSplit(n_splits=5, test_size=0.2,random_state=0)\ncross_val_score(LinearRegression(), X, y, cv=cv)","65072a67":"from sklearn.model_selection import GridSearchCV\n\nfrom sklearn.linear_model import Lasso\nfrom sklearn.tree import DecisionTreeRegressor\n\ndef find_best_model_using_gridsearchcv(X,y):\n    algos = {\n        'linear_regression' : {\n            'model' : LinearRegression(),\n            'params' : {\n                'normalize' : [True,False]\n            }\n        },\n        'lasso' : {\n            'model' : Lasso(),\n            'params' : {\n                'alpha': [1,2],\n                'selection' : ['random','cyclic']\n            }\n        },\n        'decision_tree' : {\n            'model' : DecisionTreeRegressor(),\n            'params' : {\n                'criterion' : ['mse','friedman_mse'],\n                'splitter' : ['best','random']\n            }\n        }\n    }\n    scores = []\n    cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\n    for algo_name, config in algos.items():\n        gs = GridSearchCV(config['model'],config['params'], cv=cv, return_train_score=False)\n        gs.fit(X,y)\n        scores.append({\n            'model': algo_name,\n            'best_score': gs.best_score_,\n            'best_params': gs.best_params_\n        })\n    return pd.DataFrame(scores,columns=['model','best_score','best_params'])\n\nfind_best_model_using_gridsearchcv(X,y)","3c4a900c":"def predict_price(location,sqft,bath,bhk):\n    loc_index = np.where(X.columns == location)[0][0]\n    \n    x = np.zeros(len(X.columns))\n    x[0] = sqft\n    x[1] = bath\n    x[2] = bhk\n    if loc_index>=0:\n        x[loc_index] = 1\n        \n    return lr_clf.predict([x])[0]","3e136fee":"predict_price('8th Phase JP Nagar',1200,3,3)","6232b50a":"predict_price('Indira Nagar',1200,3,3)","b7e7b50c":"predict_price('Indira Nagar',1000,2,3)","6ccfdb5a":"# Outlier Removal","f6409103":"# Feature Engineering","7c438777":"# Data Cleaning","f6b36bd3":"# Load Data"}}