{"cell_type":{"0a3c506c":"code","d130f39c":"code","15536601":"code","82a93900":"code","a8d524f1":"code","418b4e93":"code","f53d6562":"code","92a58b29":"markdown","c3116c5d":"markdown","06319daf":"markdown","013ff618":"markdown","1a67793b":"markdown","82553f3b":"markdown","7596d41d":"markdown","2749656a":"markdown"},"source":{"0a3c506c":"import numpy as np\nimport pandas as pd\nimport bq_helper\nfrom bq_helper import BigQueryHelper\nimport plotly.offline as py\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.figure_factory as ff\ninit_notebook_mode(connected=True)","d130f39c":"list_of_names = ['LI XIAO',\n                'YUAN YUAN',\n                'LU LU',\n                'JIA LI',\n                'WEI LIU']\nlist_of_names = [x.upper() for x in list_of_names]\npatents = bq_helper.BigQueryHelper(active_project=\"patents-public-data\",dataset_name=\"patents\") ","15536601":"inventor_query = \"\"\"\nWITH temp1 AS (\n    SELECT\n      DISTINCT\n      PUB.country_code,\n      PUB.application_number AS patent_number,\n      inventor_name\n    FROM\n      `patents-public-data.patents.publications` PUB\n    CROSS JOIN\n      UNNEST(PUB.inventor) AS inventor_name\n    WHERE\n          PUB.grant_date > 0\n      AND PUB.country_code IS NOT NULL\n      AND PUB.application_number IS NOT NULL\n      AND PUB.inventor IS NOT NULL\n)\nSELECT\n  *\nFROM (\n    SELECT\n     temp1.country_code AS country,\n     temp1.inventor_name AS inventor,\n     COUNT(temp1.patent_number) AS count_of_patents\n    FROM temp1\n    GROUP BY\n     temp1.country_code,\n     temp1.inventor_name\n     )\nWHERE\n count_of_patents > 0\n;\n\"\"\"","82a93900":"print('Query Size: ', patents.estimate_query_size(inventor_query), 'GB')\ninventor_query_results = patents.query_to_pandas_safe(inventor_query, max_gb_scanned=7)\ntop_inventors_in_both_datasets = inventor_query_results[inventor_query_results.inventor.isin(list_of_names)].nlargest(500,'count_of_patents')","a8d524f1":"print('Most Prolific Inventors That Are Also In \"list_of_names\":')\ninventors_in_both_datasets_table = ff.create_table(top_inventors_in_both_datasets)\npy.iplot(inventors_in_both_datasets_table, filename='jupyter-table1')","418b4e93":"top_inventors_in_both_datasets_with_combined_duplicates = top_inventors_in_both_datasets.groupby(top_inventors_in_both_datasets.iloc[:,1]).sum()\ntop_inventors_in_both_datasets_with_combined_duplicates = top_inventors_in_both_datasets_with_combined_duplicates.reset_index()\ntop_inventors_in_both_datasets_with_combined_duplicates = top_inventors_in_both_datasets_with_combined_duplicates.sort_values(by=['count_of_patents'],ascending=False)\npd.options.display.max_rows = 9999\ntop_inventors_in_both_datasets_with_combined_duplicates.head(9999)","f53d6562":"top_inventors_in_both_datasets_with_combined_duplicates.to_csv('candidates_sorted_by_patent_number.csv',index=False)","92a58b29":"*Step 6: Sum results for names that show up twice (associated with two different countries)*","c3116c5d":"*Step 3: Write queries for the Google Patents Public BigQuery Dataset*","06319daf":"*Step 5: Which names from the \"list_of_names\" are associated with the largest number of patents?*","013ff618":"*Step 4: Use your queries to download data from the Google Patents Public BigQuery Dataset*","1a67793b":"*Step 7: Save the results as a .CSV file that can be opened using Google Sheets*","82553f3b":"*Step 2: Load Data*","7596d41d":"*Step 1: Import the Python Modules and the Datasets*","2749656a":"# Number of patents per person for a given list of names\n\nAdapted from https:\/\/www.kaggle.com\/jasonduncanwilson\/top-inventors-racking-up-patents"}}