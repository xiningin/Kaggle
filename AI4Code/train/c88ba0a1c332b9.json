{"cell_type":{"511406a1":"code","8fb3de6d":"code","d09d0efc":"code","8c40a9b3":"code","c60d6cdf":"code","6b4e83ab":"code","9aabf695":"code","bd48fd6d":"code","e0c5ae6b":"code","57a22a4c":"code","e72d26f0":"code","50e09eca":"code","19b081d3":"code","cc3090a7":"code","cd603cfe":"code","85266b91":"code","5f11afdc":"code","01153b2e":"code","720a8fa7":"code","b7d3070c":"code","b0d3b617":"markdown","389c4680":"markdown","940d181c":"markdown","917e101b":"markdown","6f10e3c8":"markdown"},"source":{"511406a1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8fb3de6d":"# load the data\ntrain = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","d09d0efc":"test.head()","8c40a9b3":"# check the shape of the train and test\nprint(\"Train Shape :\" , train.shape)\nprint(\"Test Shape  :\", test.shape)","c60d6cdf":"train.head()","6b4e83ab":"import matplotlib.pyplot as plt\nfrom matplotlib.pyplot import show\nimport seaborn as sns\nfig = plt.figure(figsize=(12,8))\nax = sns.countplot(x=\"label\", palette=\"GnBu_d\", data=train)\ntotal = float(len(train))\nplt.ylabel('Count')\nplt.xlabel('Digits')\nplt.title('Frquency of each digit')\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height),\n            ha=\"center\") \nshow()\n","9aabf695":"X_train = train.drop('label',axis=1)\ny_train = train['label']\nX_train=X_train.values.reshape(-1,28,28,1)\ny_train.values.reshape(-1,1)\n\nX_test = test\nX_test=X_test.values.reshape(-1,28,28,1)","bd48fd6d":"# normalizing pixel values in range [0,1]\nX_train = X_train\/255\nX_test = X_test\/255","e0c5ae6b":"W_grid = 4\nL_grid = 4\n\nfig, axes = plt.subplots(L_grid, W_grid, figsize = (25, 25))\naxes = axes.ravel()\n\nn_training = len(X_train)\n\nfor i in np.arange(0, L_grid * W_grid):\n    index = np.random.randint(0, n_training) # pick a random number\n    axes[i].imshow(X_train[index].reshape([28,28]))\n    axes[i].set_title(y_train[index],fontsize=25, color='red')\n    axes[i].axis('off')\n    \nplt.subplots_adjust(hspace = 0.4)\n","57a22a4c":"# initialize the input shape\nInput_shape = X_train.shape[1:]","e72d26f0":"# load libraries\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, AveragePooling2D, Dense, Flatten, Dropout\nfrom keras.optimizers import Adam\nfrom keras.callbacks import TensorBoard,ReduceLROnPlateau","50e09eca":"# build the model\ncnn_model = Sequential()\ncnn_model.add(Conv2D(filters = 128, kernel_size = (3,3), activation = 'relu', input_shape = Input_shape))\ncnn_model.add(Conv2D(filters = 128, kernel_size = (3,3), activation = 'relu'))\ncnn_model.add(MaxPooling2D(2,2))\ncnn_model.add(Dropout(0.2))\n\n\ncnn_model.add(Conv2D(filters = 512, kernel_size = (3,3), activation = 'relu'))\ncnn_model.add(Conv2D(filters = 512, kernel_size = (3,3), activation = 'relu'))\ncnn_model.add(AveragePooling2D(2,2))\ncnn_model.add(Dropout(0.2))\n\ncnn_model.add(Flatten())\n\ncnn_model.add(Dense(units = 1024, activation = 'relu'))\n\ncnn_model.add(Dense(units = 1024, activation = 'relu'))\n\ncnn_model.add(Dense(units = 10, activation = 'softmax'))","19b081d3":"cnn_model.summary()","cc3090a7":"# compile the model\ncnn_model.compile(loss = 'sparse_categorical_crossentropy', optimizer = keras.optimizers.RMSprop(lr = 0.001), metrics = ['accuracy'])","cd603cfe":"# fit the model with training data\nhist = cnn_model.fit(X_train, y_train, batch_size = 32, epochs = 5, shuffle = True)","85266b91":"# check for the keys to plot\nhist.history.keys()","5f11afdc":"# plot the loss and accuracy\nplt.plot(hist.history['loss'])\nplt.plot(hist.history['accuracy'])\nplt.title('Model Loss vs Accuracy')\nplt.ylabel('Value')\nplt.xlabel('Epoch Number')\nplt.legend(['Training Loss', 'Acccuracy'])","01153b2e":"# predicted the labels \npredicted_classes = cnn_model.predict_classes(X_test) \npredicted_classes","720a8fa7":"# create a submission copy\ndf_submission = pd.DataFrame([test.index+1,predicted_classes],[\"ImageId\",\"Label\"]).transpose()","b7d3070c":"# convert to CSV\ndf_submission.to_csv('digits_submission.csv',index=False)","b0d3b617":"Let's plot the frequecy chart for each digit in Training data","389c4680":"Split the data into train and test","940d181c":"![](https:\/\/res.cloudinary.com\/practicaldev\/image\/fetch\/s--WNLJ9xLZ--\/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\/https:\/\/thepracticaldev.s3.amazonaws.com\/i\/3soqhs8850b2h7klkqia.png)","917e101b":"Plot random images with the labels","6f10e3c8":"In neural networks, Convolutional neural network (ConvNets or CNNs) is one of the main categories to perform image recognition, image classifications. Object detections, facial recognition etc."}}