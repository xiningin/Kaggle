{"cell_type":{"4218756f":"code","3afd67d8":"code","0443330f":"code","5f05d672":"code","1b126885":"code","918e8572":"code","41ad351f":"code","827eecf5":"code","c1bfba0b":"code","d79a946e":"code","a32e20d9":"code","df4128e4":"code","10e7ea53":"code","9d508a16":"code","c21048e3":"code","de1f480d":"code","a9f57e27":"code","89ab10a8":"code","493b9456":"code","bfbb9089":"code","1909d362":"code","40cc99e3":"code","ad632ac4":"code","39472c81":"code","45b8e9e0":"code","971c0b87":"code","12ebb839":"code","cd8a7254":"code","06775870":"markdown","60025ab0":"markdown","8afe69a9":"markdown","6194059e":"markdown","bfc8c0a0":"markdown","0bb27a6f":"markdown"},"source":{"4218756f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3afd67d8":"train = pd.read_csv('..\/input\/sign-language-mnist\/sign_mnist_train.csv')\ntest = pd.read_csv('..\/input\/sign-language-mnist\/sign_mnist_test.csv')\nprint(train.shape)\nprint(test.shape)\ntrain.head()","0443330f":"from IPython.display import Image\nImage(\"..\/input\/sign-language-mnist\/amer_sign3.png\")","5f05d672":"test.tail()","1b126885":"Y_train = train[\"label\"]\nX_train = train.drop(labels = [\"label\"], axis = 1)","918e8572":"plt.figure(figsize = (15,7))\ng = sns.countplot(Y_train, palette =\"icefire\")\nplt.title(\"Number of sign classes\")\nY_train.value_counts()","41ad351f":"img = X_train.iloc[2].as_matrix()\nimg = img.reshape((28,28))\nplt.imshow(img,cmap='gray')\nplt.title(X_train.iloc[3,0])\nplt.axis(\"off\")\nplt.show()","827eecf5":"img = X_train.iloc[1].as_matrix()\nimg = img.reshape((28,28))\nplt.imshow(img,cmap='gray')\nplt.title(X_train.iloc[3,0])\nplt.axis(\"off\")\nplt.show()","c1bfba0b":"# Normalization\n\nX_train = (X_train - np.min(X_train))\/(np.max(X_train)-np.min(X_train))\ntest = ( test - np.max(test))\/(np.max(test)-np.min(test))\nprint(\"X_train Shape : \", X_train.shape)\nprint(\"test shape : \", test.shape)","d79a946e":"test = test.drop([\"label\"], axis = 1)","a32e20d9":"test.shape","df4128e4":"X_train.head()","10e7ea53":"# Reshape\n\nX_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)\nprint(\"X_train shape : \", X_train.shape)\nprint(\"test shape : \",test.shape)","9d508a16":"Y_train.value_counts()","c21048e3":"Y_train = Y_train.values.reshape(-1,1)\nY_train.shape","de1f480d":"# Label Encoding\nfrom keras.utils.np_utils import to_categorical\nY_train= to_categorical(Y_train)","a9f57e27":"from numpy import argmax\ninverted = argmax(Y_train[4])\nprint(inverted)","89ab10a8":"from sklearn.model_selection import train_test_split\nX_train,X_val,Y_train,Y_val = train_test_split(X_train,Y_train, random_state = 42, test_size = 0.1)\n\n\nprint(\"x_train shape\",X_train.shape)\nprint(\"x_test shape\",X_val.shape)\nprint(\"y_train shape\",Y_train.shape)\nprint(\"y_test shape\",Y_val.shape)","493b9456":"# Some examples\nplt.imshow(X_train[2][:,:,0],cmap='gray')\nplt.show()","bfbb9089":"# Some examples\nplt.imshow(X_train[3][:,:,0],cmap='gray')\nplt.show()","1909d362":"# Create CNN \n\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 8, kernel_size = (5,5), padding = 'Same', activation = 'relu', input_shape = (28,28,1)))\nmodel.add(MaxPool2D(pool_size = (2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 16, kernel_size=(3,3), padding = 'Same', activation = 'relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides = (2,2)))\nmodel.add(Dropout(0.5))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(25, activation = \"softmax\"))","40cc99e3":"# Optimizer\n\noptimizer = Adam(lr = 0.001, beta_1 = 0.9, beta_2 = 0.999)\n","ad632ac4":"# Model Compile\n\nmodel.compile(optimizer = optimizer, loss =\"categorical_crossentropy\", metrics =[\"accuracy\"])","39472c81":"epochs = 50\nbatch_size = 255","45b8e9e0":"# data augmentation\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # dimesion reduction\n        rotation_range=0.5,  # randomly rotate images in the range 5 degrees\n        zoom_range = 0.5, # Randomly zoom image 5%\n        width_shift_range=0.5,  # randomly shift images horizontally 5%\n        height_shift_range=0.5,  # randomly shift images vertically 5%\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\ndatagen.fit(X_train)","971c0b87":"# Fit the model\nhistory = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_val,Y_val), steps_per_epoch=X_train.shape[0] \/\/ batch_size)","12ebb839":"# Plot the loss and accuracy curves for training and validation \nplt.plot(history.history['val_loss'], color='b', label=\"validation loss\")\nplt.title(\"Test Loss\")\nplt.xlabel(\"Number of Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.show()","cd8a7254":"# confusion matrix\nimport seaborn as sns\n# Predict the values from the validation dataset\nY_pred = model.predict(X_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(Y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nf,ax = plt.subplots(figsize=(25, 25))\nsns.heatmap(confusion_mtx, annot=True, linewidths=0.01,cmap=\"Reds\",linecolor=\"gray\", fmt= '.1f',ax=ax)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()","06775870":"### * ** Step 4. Pooling Layer :** *\n* The purpose of the pooling is to reduce the dimensionality of the input image. \n* By diminishing the dimensionality, the network has lower weights to compute, so it prevents overfitting.\n* There are many pooling operations, but the most popular is pooling max.\n\n<a href=\"https:\/\/ibb.co\/vPkcyh3\"><img src=\"https:\/\/i.ibb.co\/T8twj14\/pooling.png\" alt=\"pooling\" border=\"0\"><\/a>","60025ab0":"### * ** Step 2. Convolutional Layer :** *\n* The most critical component in the model is the convolutional layer. This part aims at reducing the size of the image for faster computations of the weights and improve its generalization.\n* It is responsible for detecting the properties of the image. This layer applies some filters to the image to remove the low and high level features in the image.\n* The purpose of the convolution is to extract the features of the object on the image locally. It means the network will learn specific patterns within the picture and will be able to recognize it everywhere in the picture.\n\n<a href=\"https:\/\/ibb.co\/m6MPW5Q\"><img src=\"https:\/\/i.ibb.co\/XSvGRxm\/convolution-operation-24.png\" alt=\"convolution-operation-24\" border=\"0\"><\/a>\n","8afe69a9":"# **                     Convolutional Neural Network (CNN)**\n##  **What is CNN?** \n   * CNN, is a well-known method in computer vision applications.\n   * CNN are the most representative supervised Deep Learning model.\n   \n### CNN Architecture\n* A typical CNN architecture can be summarized in the picture below.\n<br>\n<br>\n \n<a href=\"https:\/\/ibb.co\/xfMnpRK\"><img src=\"https:\/\/i.ibb.co\/X3znhvf\/cnn.jpg\" alt=\"cnn\" border=\"0\"><\/a>\n\n\n\n### ** Convolutional Neural Network Steps :**\n\n### * ** Step 1. Upload Dataset :** *\n* We will use the Sign Language MNIST dataset.\n\n","6194059e":"### * ** Step 3. ReLu (Non Linearity) :** *\n* All the pixel with a negative value will be replaced by zero.\n* ReLu Function f (x) = max (0, x)\n\n* Applying the ReLu function to the Feature Map produces a result as follows.\n\n<a href=\"https:\/\/ibb.co\/L9hC4X0\"><img src=\"https:\/\/i.ibb.co\/8P4jFLm\/relu.png\" alt=\"relu\" border=\"0\" height=\"500\" width=\"500\"><\/a>\n\n","bfc8c0a0":"### * ** Step 5. Flattening Layer:** *\n* The task of this layer is simply to prepare the data in the input of the last and most important layer, Fully Connected Layer.\n* Incoming matrices are converted to one-dimensional arrays.\n\n<a href=\"https:\/\/ibb.co\/Vw8cysm\"><img src=\"https:\/\/i.ibb.co\/3RH9Xnz\/flatten.png\" alt=\"flatten\" border=\"0\"><\/a>","0bb27a6f":"### * ** Step 6.  Fully Connected Layer (FC Layer):** *\n* It takes the data from the Flattening process and performs the learning process through the Neural network.\n\n<a href=\"https:\/\/ibb.co\/BnwTcc1\"><img src=\"https:\/\/i.ibb.co\/GHFCnnh\/fc.jpg\" alt=\"fc\" border=\"0\" height=\"1000\" width=\"2650\"><\/a>"}}