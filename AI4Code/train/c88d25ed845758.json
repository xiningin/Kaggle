{"cell_type":{"76556aee":"code","6b9e6a7b":"code","69936c81":"code","5c9b064c":"code","fcfe8f7b":"code","01239a4d":"code","2bae8425":"code","21ff3837":"code","4c4bf3e0":"code","b7c9f06b":"code","10dd326d":"code","3284e652":"code","b2812881":"code","5d7270d2":"code","76b4f7dc":"code","b0ac86e7":"code","b457a987":"code","d9c30b31":"code","eabd9b85":"code","7c119e30":"code","db2b68c9":"code","89eac646":"code","9adf1451":"code","a2608508":"code","baa46325":"code","8b13b55e":"code","8640f587":"code","e11dbdd7":"code","c778781b":"code","4d8cd866":"code","655f8828":"code","b7f81793":"code","952f29c6":"code","584edbb9":"code","8e018ae5":"code","10c1eb85":"code","1d3ecfe4":"code","996745dd":"code","57dcef95":"code","75b7e95d":"code","5cc9da30":"code","3aeb0b95":"code","d694038d":"code","baa0a0d4":"code","ec837df7":"code","5347fcfa":"code","41a5cfac":"code","f2672e39":"code","47935410":"code","32c594f3":"code","ac92d5d8":"code","d633ecdb":"code","6c9f2d2a":"code","5d6585fe":"code","f9e6c2df":"code","5d296f3e":"code","00607a0c":"code","a66014db":"code","c2853032":"code","118e34ad":"code","b24f8273":"code","63311af2":"code","94003eaf":"code","2b038bc1":"code","1bc41194":"code","5843399c":"code","d4011766":"code","32c39c91":"code","190809b6":"code","7cfcff52":"code","3dc09c66":"code","0a43de43":"code","4d104aec":"code","281fab3f":"code","687fbb4e":"code","60fb2ab3":"code","ad5ef620":"code","03843360":"code","9d946376":"code","97be53a7":"code","e81bf59e":"code","b1f1e353":"code","a2d32903":"code","510fca80":"code","8bf5a2a1":"code","b2ce06ff":"code","d6b47f82":"code","628bebcf":"code","9f7c4101":"code","a3fddb09":"code","42894565":"code","7ed00d28":"code","6118695e":"code","4a98482a":"code","688cf0dc":"code","a08ed1c4":"code","f7d63a22":"code","e0663090":"code","9db36970":"code","91f2d307":"code","79e686c9":"code","49a89b15":"code","05a570e8":"code","8a059238":"code","2f5bf29d":"code","31dd5428":"code","a77ac102":"code","743ab52d":"code","65f8c036":"code","53cfcec4":"code","25e3946f":"code","b2999886":"code","5c5a1962":"code","01a1ae5e":"code","880a070c":"code","05952de4":"code","c540e4c6":"code","8261fb68":"code","845e314d":"code","c9484fb0":"code","b9ae146f":"code","1558cd2f":"code","0b02298a":"code","887d5199":"code","e53f804e":"code","c5b23b5a":"code","7146cc77":"code","84c2ec30":"code","a0087cd4":"markdown","3528f805":"markdown","10538560":"markdown","32774069":"markdown","c6bd9aea":"markdown","08e9b71e":"markdown","7e9257bd":"markdown","2f97a0ad":"markdown","c47c15a0":"markdown","ca75df6e":"markdown","339f0fc8":"markdown","6a3bab7b":"markdown","01b32c18":"markdown","89186947":"markdown","e8837911":"markdown","61f30e4a":"markdown","e22c7699":"markdown","302ee75c":"markdown","314268ae":"markdown","ac492974":"markdown","3eba413e":"markdown","a309f4db":"markdown","3333182d":"markdown","8ed5e948":"markdown","9c54850c":"markdown","99bfc501":"markdown","42824eca":"markdown","6cc55be6":"markdown","325d53ef":"markdown","0bb188eb":"markdown","bd2635b0":"markdown","7e64fd9d":"markdown","62d35614":"markdown","8cb9a723":"markdown","2dbab6b2":"markdown","cce52e4d":"markdown","f8cbfeef":"markdown","e46ef6c9":"markdown","91a28073":"markdown","204a4301":"markdown","c86a6f69":"markdown","9417091e":"markdown","eac63b34":"markdown","c32315db":"markdown","d43c4eb0":"markdown","eb0d7431":"markdown","6897ddee":"markdown","3510d3e9":"markdown","1157caa6":"markdown","70867f9c":"markdown","202ccd8f":"markdown","7b565484":"markdown","8d8e4667":"markdown","7a856463":"markdown","a655c8fd":"markdown","f97ab8ad":"markdown"},"source":{"76556aee":"import numpy as np","6b9e6a7b":"x = np.array([1, 2, 3, 4, 5])\ny = np.array([6, 7, 8, 9, 10])","69936c81":"x + y","5c9b064c":"x - y","fcfe8f7b":"x * y","01239a4d":"x \/ y","2bae8425":"x ** 2","21ff3837":"arr = np.array([0, 1, 2, 3, 4, 5])","4c4bf3e0":"# Warning on division by zero, but not an error!\n# Just replaced with nan\narr\/arr","b7c9f06b":"# Also warning, but not an error instead infinity\n1\/arr","10dd326d":"# Also warning, but not an error instead -infinity\n-1\/arr","3284e652":"my_list = [1,2,3]\nmy_list","b2812881":"np.array(my_list)","5d7270d2":"# Find if a value exists in the array\n# Returns true if value exists else returns false\n\nintegerArray = np.array(my_list)\n\n2 in integerArray # Returns true","76b4f7dc":"my_matrix = [[1,2,3],[4,5,6],[7,8,9]]\nmy_matrix","b0ac86e7":"np.array(my_matrix)","b457a987":"# Define an array arr with integer elements 1,2,3 and 4 of type int\nintegerArray = np.array([1,2,3,4], int)\n\nprint(integerArray)","d9c30b31":"np.arange(0,10)","eabd9b85":"np.arange(0,11,2)","7c119e30":"np.zeros(3)","db2b68c9":"np.zeros((5,5))","89eac646":"np.ones(3)","9adf1451":"np.ones((3,3))","a2608508":"arr = np.array([0, 1, 2, 3, 4, 5])","baa46325":"#Taking Square Roots\nnp.sqrt(arr)","8b13b55e":"#Calcualting exponential (e^)\nnp.exp(arr)","8640f587":"np.max(arr) #same as arr.max()","e11dbdd7":"np.sin(arr)","c778781b":"np.log(arr)","4d8cd866":"# 3 evenly spaced points from 0-10\nnp.linspace(0,10,3)","655f8828":"# 10 evenly spaced points from 0-5\nnp.linspace(0, 5, 10)","b7f81793":"np.linspace(0,10,50)","952f29c6":"np.eye(4)","584edbb9":"y = np.ones(3)\n\nnp.diag(y)","8e018ae5":"integerArray = np.array([1,2,3,4])\nintegerArray2 = np.array([5,6])\n\n# Concatenate two arrays\nnp.concatenate((integerArray, integerArray2))","10c1eb85":"# Concatenation of multi-dimensional arrays\narr1 = np.array([[1,2], [3,4]])\narr2 = np.array([[5,6], [7,8]])\n\nnp.concatenate((arr1, arr2))","1d3ecfe4":"# Based on dimension 1 (Column)\n\nnp.concatenate((arr1, arr2), axis=0)","996745dd":"# Based on dimension 2 (Row)\n\nnp.concatenate((arr1, arr2), axis=1)","57dcef95":"# Repeating element wise\n\nnp.repeat([1, 2, 3], 3)","75b7e95d":"# Repeating the whole list \n\nnp.array([1, 2, 3] * 3)","5cc9da30":"p = np.ones([2, 3])\n\nnp.vstack([p, 2*p])","3aeb0b95":"np.hstack([p, 2*p])","d694038d":"np.random.rand(2)","baa0a0d4":"np.random.rand(5,5)","ec837df7":"# Getting the integer value of random int (0 - 9)\n\nrandomArray = np.floor(np.random.rand(10) * 10)\nrandomArray","5347fcfa":"np.random.randn(2)","41a5cfac":"np.random.randn(5,5)","f2672e39":"np.random.randint(1,100)","47935410":"np.random.randint(1,100,10)","32c594f3":"arr = np.arange(25)\nranarr = np.random.randint(0,50,10)","ac92d5d8":"arr","d633ecdb":"ranarr","6c9f2d2a":"arr = np.array([1, 2, 3])\n\n# Vector\narr.shape","5d6585fe":"arr = np.array([[1, 2, 3], [4, 5, 6]])\n\narr","f9e6c2df":"arr.T","5d296f3e":"arr.T.shape","00607a0c":"arr = np.arange(25)\n\narr.reshape(5,5)","a66014db":"arr.shape","c2853032":"# Notice the two sets of brackets\narr.reshape(1,25)","118e34ad":"arr.reshape(1,25).shape","b24f8273":"arr.reshape(25,1)","63311af2":"arr = np.arange(9)\narr","94003eaf":"arr.resize(3, 3)\narr","2b038bc1":"a = np.array([-4, -2, 1, 3, 5])","1bc41194":"# Sum of array elements\na.sum()","5843399c":"# Max of array elements\na.max()","d4011766":"# Min of array elements\na.min()","32c39c91":"# Mean of array elements\na.mean()","190809b6":"# Standard Deviation\na.std()","7cfcff52":"# Gives the index at which the max maximum value is in the array\n\na.argmax()","3dc09c66":"# Gives the index at which the max maximum value is in the array\n\na.argmin()","0a43de43":"x = np.array([[5,2,3], [3,4,5], [1,1,1]])","4d104aec":"# Get unqiue values\nnp.unique(x)","281fab3f":"# Get diagonal values\nx.diagonal()","687fbb4e":"# Sort values in the multidimensional array\nnp.sort(x)","60fb2ab3":"arr = np.array([1, 2, 3, 4, 5])","ad5ef620":"arr.dtype","03843360":"arr = arr.astype('f')\narr.dtype","9d946376":"#Creating sample array\narr = np.arange(0,11)","97be53a7":"#Show\narr","e81bf59e":"#Get a value at an index\narr[8]","b1f1e353":"# We can also assign -ve index (counts from the back)\narr[0], arr[4], arr[-1]","a2d32903":"#Get values in a range\narr[1:5]","510fca80":"#Get values in a range\narr[0:5]","8bf5a2a1":"arr[5:]","b2ce06ff":"# Use negatives to count from the back.\narr[-4:]","d6b47f82":"arr[-5::-2]","628bebcf":"#Setting a value with index range (Broadcasting)\narr[0:5]=100\n\n#Show\narr","9f7c4101":"# Add a row to a matrix\nmat = np.array([[1,2,3], [9,8,7]])\narr = np.array([1,1,1])\n\n# On adding the two, arr will get broadcasted and will get added as a matrix with both rows same as [1,1,1]\nmat + arr","a3fddb09":"arr = np.arange(0,11)\n\n#Show\narr","42894565":"#Important notes on Slices\nslice_of_arr = arr[0:6]\n\n#Show slice\nslice_of_arr","7ed00d28":"#Change Slice\nslice_of_arr[:]=99\n\n#Show Slice again\nslice_of_arr","6118695e":"arr","4a98482a":"arr = np.arange(10)\nprint(arr) \n\narr_copy = arr[: 5]      # Here arr_copy and arr points to the same array\nprint(arr_copy)","688cf0dc":"# Showing that arr and arr_copy points to the same array\n\narr_copy[:] = 0\n\nprint(arr)","a08ed1c4":"arr = np.arange(10)\n\n#To get a copy, need to be explicit\narr_copy = arr.copy()\n\narr_copy","f7d63a22":"# Showing that arr and arr_copy points to the same array\n\narr_copy[:] = 0\n\nprint(arr)      # now we can see that changing arr_copy elements have no effect on arr elements","e0663090":"arr_2d = np.array(([5,10,15],[20,25,30],[35,40,45]))\n\n#Show\narr_2d","9db36970":"#Indexing row\narr_2d[1]","91f2d307":"# Format is arr_2d[row][col] or arr_2d[row,col]\n\n# Getting individual element value\narr_2d[1][0]","79e686c9":"# Getting individual element value\narr_2d[1,0]","49a89b15":"# 2D array slicing\n\n#Shape (2,2) from top right corner\narr_2d[:2,1:]","05a570e8":"#Shape bottom row\narr_2d[-1]","8a059238":"#Shape bottom row\narr_2d[2,:]","2f5bf29d":"arr_2d[:2, :-1]","31dd5428":"arr_2d[-1, ::2]","a77ac102":"#Set up matrix\narr2d = np.zeros((10,10))","743ab52d":"#Length of array\narr_length = arr2d.shape[1]","65f8c036":"#Set up array\n\nfor i in range(arr_length):\n    arr2d[i] = i\n    \narr2d","53cfcec4":"arr2d[[2,4,6,8]]","25e3946f":"#Allows in any order\narr2d[[6,4,2,7]]","b2999886":"arr = np.arange(1,11)\narr","5c5a1962":"arr > 4","01a1ae5e":"bool_arr = arr > 4","880a070c":"bool_arr","05952de4":"arr[bool_arr]","c540e4c6":"arr[arr > 2]","8261fb68":"x = 2\narr[arr > x]","845e314d":"arr[arr > 5] = 10\n\narr","c9484fb0":"arr1 = np.array([[1,2], [3,4]])\narr2 = np.array([[5,6], [7,8]])","b9ae146f":"# We can compare complete arrays of equal size element wise\narr1 > arr2","1558cd2f":"# We can compare elements of an array with a given value\narr1 == 2","0b02298a":"# Also warning, but not an error instead -infinity\n-1\/arr","887d5199":"matrix1 = np.array([[1,2,3], [4,5,6], [7,8,9]])\nmatrix2 = np.array([[1,1,1], [0,0,0], [1,1,1]])","e53f804e":"# Dot operator\nnp.dot(matrix1, matrix2)","c5b23b5a":"# Cross operator\nnp.cross(matrix1, matrix2)","7146cc77":"# Outer operator\nnp.outer(matrix1, matrix2)","84c2ec30":"# Inner operator\nnp.inner(matrix1, matrix2)","a0087cd4":"---\nConcatenate function on multidimensional arrays can be performed on any axis. For a two dimensional array (array[row][column]), to concatenate along row, we set axis as 0 (default is also 0). To concatenate along column, we set axis to 1","3528f805":"---\n`resize` changes the shape and size of array in-place.","10538560":"## Concatenate\n\nCombines 2 arrays and returns a single array","32774069":"## Random \n\nNumpy also has lots of ways to create random number arrays:\n\n### rand\nCreate an array of the given shape and populate it with\nrandom samples from a uniform distribution\nover ``[0, 1)``.","c6bd9aea":"## Shape\n\nShape is an attribute that arrays have (not a method):\n\n(row, column)","08e9b71e":"---\nUse `vstack` to stack arrays in sequence vertically (row wise).","7e9257bd":"---\nA second `:` can be used to indicate step-size. `array[start:stop:stepsize]`\n\nHere we are starting 5th element from the end, and counting backwards by 2 until the beginning of the array is reached.","2f97a0ad":"Thanks, and dont forget to upvote.","c47c15a0":"On changing arr_copy elements, we can see it those elements also got changed in the original array","ca75df6e":"## Copying Array\n\nBe careful with copying and modifying arrays in NumPy!","339f0fc8":"---\nUse `.T` to get the transpose.","6a3bab7b":"## diag\n\n`diag` extracts a diagonal or constructs a diagonal array.","01b32c18":"## Built-in Methods\n\nThere are lots of built-in ways to generate Arrays","89186947":"## Selection\n\nLet's briefly go over how to use brackets for selection based off of comparison operators.","e8837911":"**Now note the changes also occur in our original array!**","61f30e4a":"## Using NumPy\n\nOnce you've installed NumPy you can import it as a library:","e22c7699":"### Universal Array Functions\n\nNumpy comes with many [universal array functions](http:\/\/docs.scipy.org\/doc\/numpy\/reference\/ufuncs.html), which are essentially just mathematical operations we can use to perform the operation across the array.","302ee75c":"## Arithmetic\n\nNumpy arrays allow us to directly apply a range of operations such as addition, subtraction etc. The operators are overloaded in the library which makes the process possible. The operations occur on an element by element basis.\n\nUse `+`, `-`, `*`, `\/` and `**` to perform element wise addition, subtraction, multiplication, division and power.\n\n**Numpy performs element wise operations**","314268ae":"\n## Combining Arrays","ac492974":"## Reshape\nReturns an array containing the same data with a new shape.\n\n**If we cant fill the new array, it will throw an error**","3eba413e":"---\nUse `hstack` to stack arrays in sequence horizontally (column wise).","a309f4db":"(3, ) indicates that it is a 1D array","3333182d":"### Fancy Indexing\n\nFancy indexing allows you to select entire rows or columns out of order,to show this, let's quickly build out a numpy array:","8ed5e948":"---\nThis is a slice of the last row, and only every other element.","9c54850c":"### randint\nReturn random integers from `low` (inclusive) to `high` (exclusive).","99bfc501":"### zeros and ones\n\nGenerate arrays of zeros or ones","42824eca":"## Bracket Indexing and Selection\nThe simplest way to pick one or some elements of an array looks very similar to python lists:","6cc55be6":"---\n**Dot Product:**  \n\n$ \\begin{bmatrix}x_1 \\ x_2 \\ x_3\\end{bmatrix}\n\\cdot\n\\begin{bmatrix}y_1 \\\\ y_2 \\\\ y_3\\end{bmatrix}\n= x_1 y_1 + x_2 y_2 + x_3 y_3$","325d53ef":"---\nUse `.dtype` to see the data type of the elements in the array.","0bb188eb":"## Array Attributes and Methods\n\nLet's discuss some useful attributes and methods or an array:","bd2635b0":"# NumPy Operations","7e64fd9d":"Fancy indexing allows the following","62d35614":"## Compare Arrays\n\nWe can also use comparison operators to compare complete arrays with one another","8cb9a723":"### linspace\nReturn evenly spaced numbers over a specified interval.\n\nReturns the given no of points between the given range","2dbab6b2":"# NumPy Indexing and Selection","cce52e4d":"## Vector and Matrix Operations","f8cbfeef":"------\nTo avoid this, use `arr.copy` to create a copy that will not affect the original array\n\n**To make arr_copy and arr point to different arrays use copy() method**","e46ef6c9":"## Broadcasting\n\n\n**Broadcasting helps in performing element wise operations on arrays of different dimensions.**\n\n**The smaller array is broadcast to the size of the larger array so that they have compatible shapes.**\n\nNumpy arrays differ from a normal Python list because of their ability to broadcast:","91a28073":"**Data is not copied, it's a view of the original array! This avoids memory problems!**","204a4301":"---\n`argmax` and `argmin` return the index of the maximum and minimum values in the array.","c86a6f69":"## Indexing a 2D array (matrices)\n\nThe general format is **arr_2d[row][col]** or **arr_2d[row,col]**. I recommend usually using the comma notation for clarity.","9417091e":"### randn\n\nReturn a sample (or samples) from the \"standard normal\" distribution. Unlike rand which is uniform:\n\nNormal distribution, also known as the Gaussian distribution, is a probability distribution that is symmetric about the mean, showing that data near the mean are more frequent in occurrence than data far from the mean","eac63b34":"### dtype , astype\n\nYou can also grab the data type of the object in the array:","c32315db":"## Repeat\n\nRepeat elements of an array using `repeat`.","d43c4eb0":"---\nWe can also define the output array type","eb0d7431":"\n`arr_copy` is a slice of `arr`\n\n**Here r and r2 point to the same array**","6897ddee":"## Math Functions\n\nNumpy has many built in math functions that can be performed on arrays.","3510d3e9":"\n\n# Numpy Arrays\n\nNumPy arrays are the main way we use Numpy. Numpy arrays essentially come in two flavors: vectors and matrices. Vectors are strictly 1-d arrays and matrices are 2-d (but you should note a matrix can still have only one row or one column).\n\nLet's begin our introduction by exploring how to create NumPy arrays.\n\n## Creating NumPy Arrays\n\n### From a Python List\n\nWe can create an array by directly converting a list or list of lists:","1157caa6":"**Getting Transpose**","70867f9c":"## More Indexing Help\nIndexing a 2d matrix can be a bit confusing at first, especially when you start to add in step size. Try google image searching NumPy indexing to fins useful images, like this one:","202ccd8f":"### arange\n\nReturn evenly spaced values within a given interval.\n\nReturns integer having the given step size between them","7b565484":"---\nUse `.astype` to cast to a specific type.","8d8e4667":"# NumPy \n\nNumPy (or Numpy) is a Linear Algebra Library for Python, the reason it is so important for Data Science with Python is that almost all of the libraries in the PyData Ecosystem rely on NumPy as one of their main building blocks.\n\nNumpy is also incredibly fast, as it has bindings to C libraries. \n\nHelps in working with arrays and matrices in python","7a856463":"## Resize","a655c8fd":"## eye\n\nCreates an identity matrix","f97ab8ad":"---\nWe dont need to pass tuple, we can just pass the # row and columns for the random matrix"}}