{"cell_type":{"2cb0d913":"code","8d8a648f":"code","a0504f06":"code","54152f3b":"code","645f606f":"code","c69eda2c":"code","3a128b18":"code","3e2b7461":"code","fb2d45f6":"code","8b71aa6a":"code","c951e674":"code","c872933c":"markdown","49b6bfe6":"markdown","456fcb89":"markdown","4bb90403":"markdown","3230c8ce":"markdown","723359e3":"markdown","9bcc0452":"markdown"},"source":{"2cb0d913":"import sys, os\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom tqdm.notebook import tqdm\nimport cv2 \n","8d8a648f":"import plotly.graph_objs as go\nfrom plotly.offline import iplot\ndef plot(x,y,type='scatter',title=\"title\",xlabel=\"x\", ylabel=\"y\"):\n    if type=='scatter':\n        data = go.Scatter(x=x, y=y)\n    elif type=='bar':\n        data = go.Bar(x=x, y=y)\n        \n    layout = go.Layout(title=title, xaxis=dict(title=xlabel), yaxis=dict(title=ylabel))\n    fig = go.Figure(data=[data], layout=layout)\n    iplot(fig)","a0504f06":"import tarfile\n\n#simple function to extract the train data\n#tar_file : the path to the .tar file\n#path : the path where it will be extracted\ndef extract(tar_file, path):\n    opened_tar = tarfile.open(tar_file)\n     \n    if tarfile.is_tarfile(tar_file):\n        opened_tar.extractall(path)\n    else:\n        print(\"The tar file you entered is not a tar file\")\n\n# Extract data\nextract(\"\/kaggle\/input\/facial-expression-recognition-challenge\/fer2013.tar\",\".\")\n","54152f3b":"# Read Metadata\nmeta_df = pd.read_csv('.\/fer2013\/fer2013.csv')\n\nemotions = ['Angry', 'Disgust', 'Fear', 'Happy', 'Sad', 'Surprise', 'Neutral']\n\nmeta_df = meta_df.rename(columns={\"emotion\":\"label\",\"pixels\":\"image\"})\nmeta_df['emotion'] = meta_df['label'].apply(lambda x: emotions[int(x)])\nmeta_df = meta_df.drop(columns=['Usage'])","645f606f":"meta_df","c69eda2c":"# Check data\nid = 6\nimage = np.reshape(np.array(meta_df.image[id].split(' ')).astype(int),(48,48))\nplt.imshow(image)\nprint(meta_df.emotion[id])","3a128b18":"plot(x=meta_df.emotion.unique().tolist(),\n     y=meta_df.groupby('emotion').count().label.tolist(), \n     type='bar',\n     title='Emotion Distribution',\n     xlabel='Emotions',\n     ylabel='Count')","3e2b7461":"meta_df","fb2d45f6":"# Find the average of all emotion counts\nm = meta_df.groupby('label').count().mean().values[0]\nprint(\"Mean of all emotion counts: \" + str(m))\n\noversampled = pd.DataFrame()\nfor emotion in emotions:\n    print('\\n' + emotion)\n    l = len(meta_df[meta_df.emotion==emotion])\n    print('Before sampling: ' + str(l))\n    \n    if (l>=m):\n        dft = meta_df[meta_df.emotion==emotion].sample(int(m))\n        oversampled = oversampled.append(dft)\n        print('Ater sampling: ' + str(len(dft)))\n    else:\n        frac = int(m\/l)\n        dft = pd.DataFrame()\n        for i in range(frac+1):\n            dft = dft.append(meta_df[meta_df.emotion==emotion])\n        dft = dft[dft.emotion==emotion].sample(int(m))\n        oversampled = oversampled.append(dft)\n        print('Ater sampling: ' + str(len(dft)))\n        \noversampled = oversampled.sample(frac=1).reset_index().drop(columns=['index'])","8b71aa6a":"plot(x=oversampled.emotion.unique().tolist(),\n     y=oversampled.groupby('emotion').count().label.tolist(), \n     type='bar',\n     title='Emotion Distribution',\n     xlabel='Emotions',\n     ylabel='Count')","c951e674":"oversampled.to_csv('metadata_processed.csv', index=False)","c872933c":"### Oversample","49b6bfe6":"### Visualize Emotion Distribution","456fcb89":"## Plotly","4bb90403":"## Export Processed Data","3230c8ce":"## Import Packages","723359e3":"### Process Metadata","9bcc0452":"## Data I\/O"}}