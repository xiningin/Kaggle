{"cell_type":{"8cc0cac4":"code","97c53a40":"code","929270a3":"code","27ba3b79":"code","f9919959":"code","34aa43e5":"code","1e03a409":"code","b25a5a42":"code","46f3b9ab":"code","b4cfe479":"code","dda61911":"code","a5e375e2":"markdown","d6a978b5":"markdown","3604bc8d":"markdown","951c15a9":"markdown","8a056d38":"markdown","09ea10da":"markdown","b931956e":"markdown"},"source":{"8cc0cac4":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\nimport time","97c53a40":"path = '..\/input\/g-research-crypto-forecasting\/'\n\ndef read_csv_strict(file_name='train.csv'): \n    df = pd.read_csv(path+file_name)\n    for asset in df['Asset_ID'].unique():\n        df.loc[df['Asset_ID']==asset, 'datetime'] = pd.to_datetime(df.loc[df['Asset_ID']==asset,'timestamp'], unit='s')\n    df = df[df['datetime']<'2021-06-13 00:00:00']\n    df.drop('timestamp', axis=1, inplace=True)\n    return df","929270a3":"#  Load train data and asset details\ntrain_data = read_csv_strict()\nasset_details = pd.read_csv(path+'asset_details.csv')","27ba3b79":"train_data.head()","f9919959":"asset_details.head()","34aa43e5":"# Join train and asset details to get asset names and weight alongside their time series\ntrain_data = pd.merge(train_data, asset_details, on='Asset_ID')\ntrain_data.set_index('datetime', inplace=True)","1e03a409":"# Global plot\n# logarithm is for visual considerations\n\nf = plt.figure(figsize=(20, 8))\nfor asset in train_data['Asset_Name'].unique():\n    plt.plot(np.log(train_data[train_data['Asset_Name']==asset]['Close']), label=asset);\nplt.title('Assets close value evolution over time');\nplt.xlabel('Time');\nplt.ylabel('Close value');\nplt.legend();","b25a5a42":"# Seasonal plots\n# Daily average Close\nfor asset in train_data['Asset_Name'].unique():\n    f, ax = plt.subplots(figsize=(10,7))\n    t = train_data[train_data['Asset_Name']==asset]\n    for year in t.index.year.unique():\n        y = t[t.index.year==year]\n        y.groupby([y.index.month, y.index.day])['Close'].mean().plot(label=str(year))\n        \n        plt.title(f'{asset} daily average close value yearly plot')\n        plt.xlabel('Time');\n        plt.ylabel(f'{asset} daily average close value');\n        plt.legend();","46f3b9ab":"# Seasonal plots\n# Monthly average Close\nfor asset in train_data['Asset_Name'].unique():\n    f, ax = plt.subplots(figsize=(10,7))\n    t = train_data[train_data['Asset_Name']==asset]\n    for year in t.index.year.unique():\n        y = t[t.index.year==year]\n        y.groupby([y.index.month])['Close'].mean().plot(label=str(year))\n        \n        plt.title(f'{asset} monthly average close value yearly plot')\n        plt.xlabel('Time');\n        plt.ylabel(f'{asset} monthly average close value');\n        plt.legend();","b4cfe479":"# Compute log of return = percentage change\ndef log_return(series, periods=1):\n    return np.log(series).diff(periods=periods)","dda61911":"for asset in train_data['Asset_Name'].unique():\n    f, ax = plt.subplots(figsize=(10,7))\n    log_return(train_data[train_data['Asset_Name']==asset]['Close'], periods=1)[1:].plot() # First row has an empty return as previous value is unknown\n    plt.title(f'{asset} monthly average close value daily log return')\n    plt.xlabel('Time');\n    plt.ylabel('log(pct_change)');\n    plt.legend();","a5e375e2":"### Time Series-Specific Exploratory Methods\n\nTime series can be approached in a more specific manner by looking at values at different times in a given series. More precisely, relationships between values at different times in the same series constitute the basis of what we're going to study in the following part of the notebook.","d6a978b5":"#### Log returns","3604bc8d":"## Exploratory Data Analysis","951c15a9":"### Get the Data\n\nAvailable train data inclues test data, this leading to astounding scores on the public leaderboard. In time series, such a phenomenon when info about the future is leaked to our analysis or training process is called a lookahead. A lookahead is a way, through data, to find out something about the future earlier thant you ought to know it. Information about what will happen in the future propagates back in time in our modelling and affects how our model behaves earlier in time (generally tends to faking model performance improvement). Here, data posterior to `2021-06-13` is leaky, i.e. it is data bout the future that should not be used for anything else than testing models or assumptions. The `read_csv_strict()` function designed by [dataista0](https:\/\/www.kaggle.com\/julian3833) helps in avoiding the caveat of using future data for training models.","8a056d38":"# G-Research Time Series-Specific Exploratory Data Analysis","09ea10da":"#### Plots, plots, plots","b931956e":"## Data Wrangling"}}