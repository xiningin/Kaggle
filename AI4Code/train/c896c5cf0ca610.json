{"cell_type":{"f3bbb2e7":"code","50b2554f":"code","b2ba2912":"code","2fd04904":"code","1b4e997a":"code","5def16dd":"code","7ca97310":"code","d977a31b":"code","f877107b":"code","2097862a":"code","b04867e4":"code","f01f29a0":"code","f013250d":"code","6f2ccf79":"code","3988e304":"code","3f53f936":"code","040f22f6":"code","8cbec1ee":"code","6dc724f4":"code","86e18812":"code","211c33d0":"code","5d7931ee":"code","fd2e939e":"code","2d2004c1":"code","eb85aff8":"code","5247e303":"code","bd19a6de":"code","762630dc":"code","1ab1a9a9":"code","8f698d40":"code","6bcd298f":"code","5fac69ca":"code","5186b13c":"code","f9f4f096":"code","3e9f4439":"code","f7722f88":"code","0eb22916":"code","35d1a90a":"code","3f223403":"code","a7836533":"code","bab7006c":"code","d6596616":"code","cf0ffc2d":"code","0ac01d98":"code","ff337907":"code","a7a88fbc":"code","1ec20a95":"code","c67d51da":"code","93f82f7b":"code","ecc2d063":"code","4c124fcf":"code","0970cdbf":"code","56d1a1ca":"code","73df3c14":"code","7ed24570":"code","c4179008":"code","9afa97df":"code","30f6c88a":"code","0b8aacc3":"code","90801b74":"code","6a83e0b7":"code","103a5ede":"code","6a6b4929":"code","e690d80d":"code","67b30b8c":"code","96960e81":"code","7e747b9a":"code","8ea9dcec":"code","2dd3aae9":"code","7e591ca1":"code","448cb7c9":"code","ade86b2d":"code","ad140b47":"code","659de6da":"code","047c579a":"code","e3fb9065":"code","d3882066":"code","f822d1b1":"code","9b1e7e71":"code","e5322b6b":"code","38e32055":"code","d3a11564":"markdown","45a028e1":"markdown","57c69c3e":"markdown","9e64284b":"markdown","94a62d21":"markdown","5391f9f7":"markdown","648bd7fd":"markdown","99291336":"markdown","95883185":"markdown","02cfd6bb":"markdown","5dc945bc":"markdown","ca2214ae":"markdown","33e92fcd":"markdown","491625a5":"markdown","d9863712":"markdown","796ad100":"markdown","34710324":"markdown","35c534f2":"markdown","eca929ea":"markdown","1ddc4efd":"markdown"},"source":{"f3bbb2e7":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n#setting pandas dataframe display option\npd.set_option('display.max_columns',500)\npd.set_option('display.max_rows',500)\npd.set_option('display.float_format', lambda x: '%.5f' % x)","50b2554f":"df=pd.read_csv(r'..\/input\/lending-club-data\/loan.csv',low_memory=False)","b2ba2912":"df.head()","2fd04904":"df.shape #nearly 40000 records and 111 attributes to analyse","1b4e997a":"print(\"Total records:\",len(df.id),\"\\n\\nTotal unique loan records:\",df.id.nunique(),\"\\nTotal unique members:\",df.member_id.nunique())\n\n#We see that every borrower has only one loan record ","5def16dd":"# assessing missing values present in the data\n\n((df.isnull().sum().sum())\/(df.shape[0]*df.shape[1]))*100\n\n#Nearly 50% of the individual cell entries have a missing value in the dataset","7ca97310":"# Observing missing values across columns\n\nmissing_columns=pd.DataFrame((df.isnull().sum()\/df.shape[0])*100,columns={\"% missing\"})\nmissing_columns.sort_values(by=\"% missing\",ascending=False,inplace=True)\n#We will drop columns with % missing more than 7%\n\nmissing_columns","d977a31b":"#only including columns with less than 7% missing\n\ndf=df.loc[:,missing_columns['% missing']<7]","f877107b":"#checking the column missing % after dropping\n\n((df.isnull().sum())\/df.shape[0])*100","2097862a":"df.head()","b04867e4":"df.purpose.value_counts()","f01f29a0":"#since 'purpose' column has a much better capture than 'title' column we chose to drop 'title'\n\ndf.title.value_counts()","f013250d":"df.pymnt_plan.value_counts() #only one category present, so we drop this column\n\n#all loans have no payment plan in place","6f2ccf79":"df.initial_list_status.value_counts() #only one category present, so we drop this column\n\n#all loans were initally listed as fractional loans to disbursed and no loan was listed as a whole","3988e304":"df.policy_code.value_counts() #only one category present, so we drop this column\n\n#only publicly available policies are availed","3f53f936":"df.delinq_amnt.value_counts() #only one category present, so we drop this column","040f22f6":"df.chargeoff_within_12_mths.value_counts() #only one category present, so we drop this column","8cbec1ee":"df.application_type.value_counts() #only one category present, so we drop this column\n\n#there is no joint loan application","6dc724f4":"df.acc_now_delinq.value_counts() #only one category present, so we drop this column","86e18812":"df.tax_liens.value_counts() #only one category present, so we drop this column","211c33d0":"df.collections_12_mths_ex_med.value_counts() #only one category present, so we drop this column","5d7931ee":"#since the recovery collection fee is about 1%-2% of the total recoveries made, we drop this column \n\n(df.collection_recovery_fee\/df.recoveries).describe()","fd2e939e":"# dropping columns that add no business value to the analysis\n\ndf=df.drop(columns=['id','member_id','url','emp_title','zip_code','pymnt_plan','title','initial_list_status','collection_recovery_fee',\n                    'policy_code','delinq_amnt','chargeoff_within_12_mths','application_type','acc_now_delinq','tax_liens','delinq_2yrs',\n                    'total_pymnt','total_pymnt_inv','total_rec_prncp','total_rec_int','total_rec_late_fee',\n                   'recoveries','collections_12_mths_ex_med','out_prncp','out_prncp_inv','last_pymnt_d','last_pymnt_amnt','last_credit_pull_d'])\n\n#we also drop columns that have significance after the approval of the loan and that do not influence the decision of providing loan\n#Eg: total_pymnt,recoveries\n\n#Now we have only features that are significant on or before approval of a loan (baseline features)","2d2004c1":"df.shape","eb85aff8":"df['issued_month'], df['issued_year'] = df['issue_d'].str.split('-').str","5247e303":"df['issued_year'] = '20' + df['issued_year']\n\ncolumns = ['issued_year']\ndf[columns] = df[columns].astype(np.int)","bd19a6de":"df.head()","762630dc":"df.head(3)","1ab1a9a9":"#Removing % from interest rate column, revol_util column\n\ndf.int_rate=df.int_rate.apply(lambda x:str(x).replace(\"%\",\"\")).astype('float64')\ndf.revol_util=df.revol_util.apply(lambda x:str(x).replace(\"%\",\"\")).astype('float64')","8f698d40":"df.info()","6bcd298f":"df.head()","5fac69ca":"col_names=['term','grade','sub_grade','emp_length','home_ownership','verification_status','issue_d','loan_status','purpose',\n   'addr_state','earliest_cr_line']\nfor i in col_names:\n    df[i]=df[i].str.upper().str.strip()","5186b13c":"df.head() #checking if operation is successful","f9f4f096":"# Now, lets Extract the term_months from term column and drop term\n\ndf['term_months'] = df['term'].str.rstrip('MONTHS')\ndf.head()","3e9f4439":"df[df.funded_amnt>df.loan_amnt] #no loan where funded amount > listed loan amount","f7722f88":"df[df.funded_amnt_inv>df.funded_amnt] #no loan where funded amount by investor > total funded amount","0eb22916":"df[df.total_acc<df.open_acc] #this does not seem to be possible, so we remove such records\n\ndf=df[df.total_acc>=df.open_acc]","35d1a90a":"df['revol_credit_limit']=round(100*df['revol_bal']\/df.revol_util,2)\n\ndf.drop(columns=['revol_bal'],inplace=True)\ndf.head()","3f223403":"df['loan_issued_year']=df['issue_d'].apply(lambda x:x.split('-')[1]) #getting year of loan issued","a7836533":"#tagging states to a region\nmidwest=['IA','IL','IN','KS','MI','MN','MO','ND','NE','OH','SD','WI']\nnortheast=['CT','MA','ME','NH','NJ','NY','PA','RI','VT']\nsouth=['AL','AR','DC','DE','FL','GA','KY','LA','MD','MS','NC','OK','SC','TN','TX','VA','WV']\nwest=['AK','AZ','CA','CO','HI','ID','MT','NM','NV','OR','UT','WA','WY']\n\ndef states_to_region(state_addr):\n    if state_addr in midwest:\n        return 'MIDWEST'\n    elif state_addr in northeast:\n        return 'NORTHEAST'\n    elif state_addr in south:\n        return 'SOUTH'\n    elif state_addr in west:\n        return 'WEST'\n    else:\n        return 'MISSING'\n    \ndf['region']=df['addr_state'].apply(states_to_region)","bab7006c":"df['loan_amnt_category']=pd.cut(df.loan_amnt,bins=[0,11500,23000,35000],labels=['<=$11500','$11500,$23000','>$23000'],right=True)\ndf['funded_amnt_category']=pd.cut(df.funded_amnt,bins=[0,11500,23000,35000],labels=['<=$11500','$11500,$23000','>$23000'],right=True)\ndf['funded_amnt_inv_category']=pd.cut(df.funded_amnt_inv,bins=[0,11500,23000,35000],labels=['<=$11500','$11500,$23000','>$23000'],right=True)\ndf['int_rate_category']=pd.cut(df.int_rate,bins=[0,12,18,25],labels=['<=12%','12%-18%','>18%'],right=True)\ndf['annual_inc_category']=pd.cut(df.annual_inc,bins=[0,10000,50000,6000000],labels=['LOW INCOME','AVERAGE INCOME','HIGH INCOME'],right=True)","d6596616":"df['purpose']=df['purpose'].apply(lambda x:str(x).replace(\"_\",\" \"))","cf0ffc2d":"#We exclude borrowers with abnormally high incomes\n\ndf=df[df.annual_inc<np.percentile(df.annual_inc,99)]","0ac01d98":"#Since we are interested in loans that are either defaulted or fully paid, we exclude records with loan_status='CURRENT'\n\ndf=df[df.loan_status!='CURRENT']\ndf.loan_status.value_counts()","ff337907":"df.loan_status.value_counts(normalize=True)","a7a88fbc":"defaulted_loans=df[df.loan_status=='CHARGED OFF']\npaid_loans=df[df.loan_status=='FULLY PAID']\nCurrent_loans = df[df.loan_status=='CURRENT']","1ec20a95":"df.head()","c67d51da":"colors = ['#f29999','#62b3ff','#99ff99','#ffcc99']\nfig, (ax1,ax2) = plt.subplots(1,2,figsize=(10,10)) \n\nax1.pie(paid_loans.term.value_counts().values,labels = paid_loans.term.value_counts().index,colors = colors,autopct = '%1.1f%%',explode=[0.05]*2,shadow=True)\nax1.set_title('Term in Paid loans')\nax1.legend()\nax2.pie(defaulted_loans.term.value_counts().values,labels = defaulted_loans.term.value_counts().index,colors = colors,autopct = '%1.1f%%',explode=[0.05]*2,shadow=True)\nax2.set_title('Term in Defaulted loans')\nax2.legend()\nplt.tight_layout()\nplt.show()\n\n\n#long term loans tend to default more often","93f82f7b":"fig=px.sunburst(paid_loans,path=['grade','sub_grade'],title=\"Loan grade in paid loans\")\nfig.update_traces(textinfo=\"label+value\")\nfig.update_layout(\n    title={\n        'text': \"Loan grade in Paid loans\",\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\n\nfig.show()\n\n#paid loans have a better loan grade (that is grade A or B)","ecc2d063":"fig=px.sunburst(defaulted_loans,path=['grade','sub_grade'],title=\"Loan grade in Defaulted loans\")\nfig.update_traces(textinfo=\"label+value\")\nfig.update_layout(\n    title={\n        'text': \"Loan grade in Defaulted loans\",\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\nfig.show()\n\n#defaulted loans have a lower loan grade","4c124fcf":"colors = ['#f29999','#62b3ff','#99ff99','#ffcc99']\nfig, (ax1,ax2) = plt.subplots(1,2,figsize=(20,5)) \n\nax1.bar(height=paid_loans.home_ownership.value_counts().values,x = paid_loans.home_ownership.value_counts().index,color=colors)\nax1.set_title('Home ownership in Paid loans')\nax1.set_ylabel('Number of borrowers')\nax2.bar(height=defaulted_loans.home_ownership.value_counts().values,x = defaulted_loans.home_ownership.value_counts().index,color=colors)\nax2.set_title('Home ownership in Defaulted loans')\nax2.set_ylabel('Number of borrowers')\nplt.show()\n\n#Nothing significant observed from home ownership type","0970cdbf":"colors = ['#f29999','#62b3ff','#99ff99','#ffcc99']\nfig, (ax1,ax2) = plt.subplots(1,2,figsize=(10,10)) \n\nax1.pie(paid_loans.verification_status.value_counts().values,labels = paid_loans.verification_status.value_counts().index,colors = colors,autopct = '%1.1f%%',explode=[0.05]*len(paid_loans.verification_status.value_counts().index),shadow=True)\nax1.set_title('Income verification status in Paid loans')\n\nax2.pie(defaulted_loans.verification_status.value_counts().values,labels = defaulted_loans.verification_status.value_counts().index,colors = colors,autopct = '%1.1f%%',explode=[0.05]*len(paid_loans.verification_status.value_counts().index),shadow=True)\nax2.set_title('Income verification status in Defaulted loans')\n\nplt.tight_layout()\nplt.show()\n\n\n#Nothing significant observed from Income verification status","56d1a1ca":"colors = ['#f29999','#62b3ff','#99ff99','#ffcc99']\nfig, (ax1,ax2) = plt.subplots(2,1,figsize=(10,10)) \n\nax1.barh(width=paid_loans.emp_length.value_counts().values,y = paid_loans.emp_length.value_counts().index,color=colors)\nax1.set_title('Employment length in Paid loans')\nax1.set_xlabel('Number of borrowers')\nax2.barh(width=defaulted_loans.emp_length.value_counts().values,y = defaulted_loans.emp_length.value_counts().index,color=colors)\nax2.set_title('Employment length in Defaulted loans')\nax2.set_xlabel('Number of borrowers')\nplt.tight_layout()\nplt.show()\n\n#Many borrowers seem to have mostly 10+ years of work length","73df3c14":"colors = ['#f29999','#62b3ff','#99ff99','#ffcc99']\nfig, (ax1,ax2) = plt.subplots(2,1,figsize=(10,10)) \n\nax1.barh(width=paid_loans.purpose.value_counts().values,y = paid_loans.purpose.value_counts().index,color=colors)\nax1.set_title('Loan purpose in Paid loans')\nax1.set_xlabel('Number of borrowers')\nax2.barh(width=defaulted_loans.purpose.value_counts().values,y = defaulted_loans.purpose.value_counts().index,color=colors)\nax2.set_title('Loan purpose in Defaulted loans')\nax2.set_xlabel('Number of borrowers')\nplt.tight_layout()\nplt.show()\n\n#Top common reason seems to be 'DEBT CONSOLIDATION'","7ed24570":"colors = ['#f29999','#62b3ff','#99ff99','#ffcc99']\nfig, (ax1,ax2) = plt.subplots(1,2,figsize=(20,5)) \n\nax1.bar(height=paid_loans.loan_issued_year.value_counts().values,x = paid_loans.loan_issued_year.value_counts().index,color=colors)\nax1.set_title('Year at which loans were given for Paid loans')\nax1.set_ylabel('Number of borrowers')\nax2.bar(height=defaulted_loans.loan_issued_year.value_counts().values,x = defaulted_loans.loan_issued_year.value_counts().index,color=colors)\nax2.set_title('Year at which loans were given for Defaulted loans')\nax2.set_ylabel('Number of borrowers')\nplt.show()\n\n#More loans are disbursed from 2007 to 2011","c4179008":"colors = ['#f29999','#62b3ff','#99ff99','#ffcc99']\nfig, (ax1,ax2) = plt.subplots(2,1,figsize=(18,18)) \n\nax1.barh(width=paid_loans.addr_state.value_counts().values,y = paid_loans.addr_state.value_counts().index,color=colors)\nax1.set_title('Loan purpose in Paid loans')\nax1.set_xlabel('Number of borrowers')\nax2.barh(width=defaulted_loans.addr_state.value_counts().values,y = defaulted_loans.addr_state.value_counts().index,color=colors)\nax2.set_title('Loan purpose in Defaulted loans')\nax2.set_xlabel('Number of borrowers')\nplt.tight_layout()\nplt.show()\n\n#Top common state seems to be California","9afa97df":"df.head()","30f6c88a":"colors = ['#f29999','#62b3ff','#99ff99','#ffcc99']\nsns.boxplot(x=df.loan_status,y=df.int_rate)\nplt.xlabel('STATUS OF LOAN')\nplt.ylabel('INTEREST RATE')\nplt.show()\n\n#Charged off loan have a higher interest rate","0b8aacc3":"sns.boxplot(x=df.loan_status,y=df.annual_inc)\nplt.xlabel('STATUS OF LOAN')\nplt.ylabel('ANNUAL INCOME')\nplt.show()\n\n#Annual income of FULLY PAID borrowers seems to be higher","90801b74":"sns.violinplot(y=df.funded_amnt,x=df.loan_status)\nplt.show()\n\n#Both types of borrowers seem to get a similar amount funded","6a83e0b7":"sns.boxplot(y=df.installment,x=df.loan_status)\nplt.show()\n\n#Similar installment amount per month is also observed","103a5ede":"sns.kdeplot(x=df.installment,hue=df.loan_status)\nplt.show()\n\n#The number of borrowers who are charged off are lesser, so this difference is observed","6a6b4929":"sns.boxplot(y=df.dti,x=df.loan_status)\nplt.xlabel('STATUS OF LOAN')\nplt.ylabel('DTI')\nplt.show()\n #As expected, the debt to income ratio of defaulted borrowers is slightly higher","e690d80d":"# Loan granted for various purposes\n\nsns.countplot(x='purpose', hue=\"loan_status\", data=df)\nplt.xticks(rotation=90)\nplt.title('Loan count based on Loan Status')\nplt.show()","67b30b8c":"# Charged off loan counts as per loan count\n\nsns.countplot( x=\"term_months\", hue='loan_status', data=df)\nplt.xlabel('Loan Term (Months)')\nplt.title('No. of charged off loans based on term(Months)')\nplt.show()","96960e81":"# Loans corresponding to Rent and Mortage were mostly paid\nsns.countplot(x='home_ownership',hue='loan_status', data=df)\nplt.xticks(rotation=90)\nplt.title(\"Home Ownership\")\nplt.show()","7e747b9a":"# Heatmap \n\nplt.figure(figsize=(15,15))\ncorr = df.corr()\nsns.heatmap(corr, annot=True, center=0.5)\nplt.show()","8ea9dcec":"# Bivariate Analysis on annual income against Charged off Proportion\n\ninc_range_vs_loan = df.groupby(['annual_inc_category', 'loan_status']).loan_status.count().unstack().fillna(0).reset_index()\ninc_range_vs_loan['Total'] = inc_range_vs_loan['CHARGED OFF'] + inc_range_vs_loan['FULLY PAID'] \ninc_range_vs_loan['Chargedoff_Proportion'] = inc_range_vs_loan['CHARGED OFF'] \/ inc_range_vs_loan['Total']\ninc_range_vs_loan.sort_values('Chargedoff_Proportion', ascending=False)","2dd3aae9":"# Annual Income VS charged off loans\n\nfig, ax1 = plt.subplots(figsize=(12, 8))\nax1.set_title('Annual Income vs Chargedoff Proportion')\nax1=sns.barplot(x='annual_inc_category', y='Chargedoff_Proportion', data = inc_range_vs_loan)\nax1.set_ylabel('Chargedoff Proportion',fontsize=14)\nax1.set_xlabel('Annual Income',fontsize=14)\nplt.show()","7e591ca1":"sns.pairplot(data=df[['int_rate','installment','loan_amnt','funded_amnt','funded_amnt_inv','annual_inc','dti','revol_util']],corner=True)\nplt.show()","448cb7c9":"# This function plots a given column buckets against loan_status (default = 'Charged Off')\n\ndef plotLoanStatus(dataframe, by, loanstatus='CHARGED OFF'):\n    grp = dataframe.groupby(['loan_status',by])[by].count()\n    cnt = dataframe.groupby(by)[by].count()\n    percentages = grp.unstack() * 100 \/ cnt.T\n    ax = percentages.loc[loanstatus].plot.bar(color=sns.color_palette('husl', 16))\n    ax.set_ylabel('% of loans ' + loanstatus)\n    plt.margins(0.2, 0.2)\n    plt.tight_layout()\n    return ax","ade86b2d":"# Plot\nplt.figure(figsize=(7,5))\nplotLoanStatus(df, 'pub_rec_bankruptcies')\nplt.title(\"Public recorded Bankrupcies\")\nplt.show()","ad140b47":"#Analysis on purpose of Loan against Chargedoff_Proportion\npurpose_vs_loan = df.groupby(['purpose', 'loan_status']).loan_status.count().unstack().fillna(0).reset_index()\npurpose_vs_loan['Total'] = purpose_vs_loan['CHARGED OFF'] + purpose_vs_loan['FULLY PAID'] \npurpose_vs_loan['Chargedoff_Proportion'] = purpose_vs_loan['CHARGED OFF'] \/ purpose_vs_loan['Total']\npurpose_vs_loan.sort_values('Chargedoff_Proportion', ascending=False)","659de6da":"#Bar plot on above calculated values.\nfig, ax1 = plt.subplots(figsize=(14, 8))\nax1.set_title('Purpose of Loans vs Chargedoff Proportion')\nax1=sns.barplot(y='purpose', x='Chargedoff_Proportion', data=purpose_vs_loan)\nax1.set_ylabel('Purpose of Loans',fontsize=14)\nax1.set_xlabel('Chargedoff Proportion',fontsize=14)\nplt.show()","047c579a":"# grade against Charged off Proportion\ngrade_vs_loan = df.groupby(['grade', 'loan_status']).loan_status.count().unstack().fillna(0).reset_index()\ngrade_vs_loan['Total'] = grade_vs_loan['CHARGED OFF'] + grade_vs_loan['FULLY PAID'] \ngrade_vs_loan['Chargedoff_Proportion'] = grade_vs_loan['CHARGED OFF'] \/ grade_vs_loan['Total']\ngrade_vs_loan.sort_values('Chargedoff_Proportion', ascending=False)","e3fb9065":"#Analysing\nfig, ax1 = plt.subplots(figsize=(14, 8))\nax1.set_title('Grades vs Chargedoff Proportion')\nax1=sns.barplot(x='grade', y='Chargedoff_Proportion', data=grade_vs_loan)\nax1.set_xlabel('Grades',fontsize=14)\nax1.set_ylabel('Chargedoff Proportion',fontsize=14)\nplt.show()","d3882066":"# Most number of defaulters are from the state of CA, followed by FL\n\ng = df[df['loan_status']=='CHARGED OFF'].groupby('addr_state')['loan_status'].count().reset_index()\nplt.figure(figsize=(10,10))\nsns.barplot(y='addr_state', x='loan_status', data=g)\nplt.xlabel('Count of loan status to be defaulter')\nplt.ylabel('State')\nplt.show()","f822d1b1":"g = df.groupby('issued_year')['loan_status'].count()\ng.plot.line(x_compat=True)\nplt.xticks(np.arange(min(g.index), max(g.index)+1, 1.0))\nplt.title('Number of loan granted over the years')\nplt.xlabel('Issue Year')\nplt.ylabel('Count')\nplt.show()","9b1e7e71":"# Box Plot\nplt.figure(figsize=(14,8))\nax = sns.boxplot(y='int_rate', x='issued_year', data =df,palette='rainbow')\nax.set_title('Year vs Interest Rate',fontsize=15,color='w')\nax.set_ylabel('Interest Rate',fontsize=14,color = 'w')\nax.set_xlabel('Year',fontsize=14,color = 'w')\nplt.show()","e5322b6b":"sns.jointplot('loan_amnt', 'int_rate', df.loc[df.pub_rec_bankruptcies > 0])","38e32055":"sns.jointplot('dti', 'int_rate', data = df)","d3a11564":"**`AIM`** : To identify those significant attributes\/drivers that influences loan default","45a028e1":"### Handling missing values","57c69c3e":"### Filtering data","9e64284b":"### Binning data","94a62d21":"### Creating additional features","5391f9f7":"\n### Dropping columns","648bd7fd":"### Importing libraries","99291336":"#### `continuous features`","95883185":"## `SEGMENTED ANALYSIS`","02cfd6bb":"#### `categorical features`","5dc945bc":"## `UNIVARIATE ANALYSIS`","ca2214ae":"# `LENDING CLUB CASE STUDY`","33e92fcd":"### Validating internal rules","491625a5":"### Removing unwanted characters","d9863712":"### Removing outliers","796ad100":"## `Part 1: Importing Data`","34710324":"### Converting all cases to uppercase","35c534f2":"### Correcting column types","eca929ea":"## `Part 2: DATA WRANGLING`","1ddc4efd":"## `BIVARIATE ANALYSIS`"}}