{"cell_type":{"a5ee7103":"code","e0f0f7fc":"code","eeb03e85":"code","269304eb":"code","f8e6f952":"code","82509e60":"code","b2ad3c60":"code","26be3dd2":"code","12958a7d":"code","fcebd2bc":"code","11de7546":"code","b4792f3c":"code","c4818caa":"code","edae6db2":"code","956fe0ec":"markdown","ef054d6e":"markdown","93bfab73":"markdown","b1f45d71":"markdown","1fad7940":"markdown","1f7825bb":"markdown","c5225ad8":"markdown","88bd9902":"markdown","baf28261":"markdown"},"source":{"a5ee7103":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e0f0f7fc":"df = pd.read_csv(\"\/kaggle\/input\/marble-racing\/marbles.csv\")","eeb03e85":"df.head()","269304eb":"df.site.unique()","f8e6f952":"df.race.unique()","82509e60":"df[\"Points\"] = df.pole.map({\n    \"P1\": 25, \n    \"P2\": 18,\n    \"P3\": 15,\n    \"P4\": 12,\n    \"P5\": 10,\n    \"P6\": 8,\n    \"P7\": 6,\n    \"P8\": 4,\n    \"P9\": 2,\n    \"P10\": 1,\n    \"P11\": 0,\n    \"P12\": 0,\n    \"P13\": 0,\n    \"P14\": 0,\n    \"P15\": 0,\n    \"P16\": 0\n})\ndf.head()","b2ad3c60":"Player_stats = df[[\"race\", \"marble_name\", \"Points\", \"avg_time_lap\", \"points\"]]\nOrangin = Player_stats[Player_stats.marble_name == \"Anarchy\"].reset_index()\nOrangin","26be3dd2":"player_wise = Player_stats.groupby('marble_name').mean().reset_index()\n# len(player_wise)\nprint(\"Qualifier Races ---\\n\" + \"median Score Across all rounds: \" + str(np.median(player_wise.Points.values)) + \"\\nmean Score Across all rounds: \" + str(np.average(player_wise.Points.values)) + \n     \"\\nMarbulaOne Races ---\\n\"+ \"median Score Across all rounds: \" + str(np.median(player_wise.points.values)) + \"\\nmean Score Across all rounds: \" + str(np.average(player_wise.points.values)))","12958a7d":"x = player_wise.marble_name.values\ny1 = player_wise.Points.values\ny2 = player_wise.avg_time_lap.values\nplt.figure(figsize=(25, 6))\nplt.xlabel(\"Players\")\nplt.ylabel(\"Average performance among all Qualifier Rounds rounds\")\nplt.bar(x, y1)\n","fcebd2bc":"plt.figure(figsize=(25, 7))\nsns.set_style('whitegrid')\ngraph = sns.boxplot(data=Player_stats, x='marble_name', y='Points')\ngraph.axhline(np.median(player_wise.Points.values))\nplt.xlabel(\"Players\")\nplt.ylabel(\"Average Performance among all Qualifier Rounds\")","11de7546":"plt.figure(figsize=(25, 7))\nsns.set_style('whitegrid')\ngraph = sns.boxplot(data=Player_stats, x='marble_name', y='points')\ngraph.axhline(np.median(player_wise.points.values))\nplt.xlabel(\"Players\")\nplt.ylabel(\"Average performance among all rounds\")","b4792f3c":"player_wise_sum = Player_stats.groupby('marble_name').sum().reset_index()\nqualifier_score = player_wise_sum.Points.values\nrace_score = player_wise_sum.points.values\nplayers = player_wise_sum.marble_name.values\ncolors = ['lightskyblue', 'gold', 'lightcoral', 'gainsboro', 'royalblue', 'lightpink', 'darkseagreen', 'sienna',\n          'khaki', 'gold', 'violet', 'yellowgreen']\n\nplt.figure(figsize=(24, 10))\n\nax1 = plt.subplot(1, 2, 1)\nax1 = plt.pie(qualifier_score, autopct='%0.f%%', pctdistance=0.8, colors=colors, startangle=345, shadow=True, labels=players)\nplt.title(\"Qualifier Points achieved per Player\")\n\nax2 = plt.subplot(1, 2, 2)\nax2 = plt.pie(race_score, autopct='%0.f%%', pctdistance=0.8, colors=colors, startangle=345, shadow=True, labels=players)\nplt.title(\"Race Points achieved per Player\")\n\nplt.subplots_adjust(left=0.1, right=0.90)","c4818caa":"team_wise = df[['team_name', 'Points', 'points']]\nteam_wise_score = team_wise.groupby('team_name').sum().reset_index()\nteam_wise_score.head()","edae6db2":"plt.figure(figsize=(24, 8))\nsns.set_style('whitegrid')\n\nax1 = plt.subplot(1, 2, 1)\nax1 = sns.barplot(data=team_wise_score, x='team_name', y='Points')\nplt.xticks(rotation=75)\nax1.set_yticks(range(0, 111, 10))\nplt.xlabel(\"Team Name\")\nplt.title('Qualifier Round Total Score per Team')\n\nax2 = plt.subplot(1, 2, 2)\nax2 = sns.barplot(data=team_wise_score, x='team_name', y='points')\nplt.xticks(rotation=75)\nax2.set_yticks(range(0, 111, 10))\nplt.xlabel(\"Team Name\")\nplt.title('Race Round Total Score per Team')\n\nplt.subplots_adjust(left=0.02, right=0.98)","956fe0ec":"## Team-wise Average Performance among Qualifier and Race Rounds\n* I have kept the scoring similar in both qualifier and Race rounds as they were judged in the actual MarbulaOne Race.","ef054d6e":"## The Savage Speeders went on to win the MarbulaOne Season1\n* They will be the favourites for the next time too!\n* And they have a higher chance to fish out more athlete marbles, followed by atletes of **Hazers, O'Rangers, Snowballs and Team Momo**","93bfab73":"## A General Comment:\n* **Mary (Team Primary)** consistently under-performed through the MarbulaOne Season1\n* Anarchy (Balls of Chaos), Wispy (Midnight Wisps) and Razzy (Raspberry Racers) did not do much help to their team either, in both the qualifier or the race rounds\n* Prim (Team Primary), Orangin (O'Rangers), Smoggy (Hazers) and Speedy(Savage Speeders) did pretty well throughout the tournament.\n* In a general sense, top performers in Qualifiers did make a considerable impact on the Race Rounds too (as the top performers list in both the cases Suggest) and marbles doing poorly in Qualifiers did not have any significant improvement too. ","b1f45d71":"* It is clear that **Mary from Team Primary** always came in the bottom 6 across all the four qualifier rounds it took part in, consistently performing poorly\n\n### Worst Performers (worst at top):\n   1. Mary *(Team Primary)*\n   2. Pulsar *(Team Galactic)*\n   3. Anarchy *(Balls of Chaos)*\n   4. Razzy *(Raspberry Racers)*\n   5. Wispy *(Midnight Wisps)*\n\n### Top Performers (Best at top, going by median Preformance):\n   1. Prim *(Team Primary)*\n   2. Orangin *(O'rangers)*\n   3. Smoggy *(Hazers)*\n   4. Momo *(Team Momo)*\n   5. Speedy *(Savage Speeders)*, Wospy *(Midnight Wisps)*, Yellup *(Mellow Yellow)*, Mimo*(Team Momo)* for Winning a Single Qualifier with decent median Performance","1fad7940":"## Team-Wise Split of MarbulaOne Season1","1f7825bb":"## Analysing the Race Rounds\n* Here too, each marble participated in 4 Race rounds.","c5225ad8":"* It very clearly shows that **Mary from Team Primary** has majorly underperformed throughout the tournament.\n\n### Worst Performers (worst at top):\n   1. Mary *(Team Primary)* and Vespa *(Hornets)*\n   2. Sublime *(Limers)*\n   3. Snowflake *(Snowballs)*\n   4. Anarchy *(Balls of Chaos)* and Wispy *(Midnight Wisps)*\n   5. Razzy *(Raspberry Racers)*  and Hive *(Hornets)*\n\n### Top Performers (Best at top, going by median Preformance):\n   1. Snowy *(Snowballs)*\n   2. Speedy *(Savage Speeders)* and Smoggy *(Hazers)*\n   3. Orangin *(O'Rangers)* \n   4. Prim *(Team Primary)* and Rapidly *(Savage Speeders)*\n   5. Clutter *(Balls of Chaos)*, Mimo *(Team Momo)* for Winning a Single Race with decent median Performance","88bd9902":"## Analysing the Qualifier Rounds\n* Each marble participated in 4 Qualifier Rounds (Out of total 8 Rounds)","baf28261":"The difference in the mean\/median of the Qualifier and Race Rounds is due to the **bonus points given in the Race Rounds for the fastest lap time**."}}