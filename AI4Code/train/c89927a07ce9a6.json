{"cell_type":{"155afff0":"code","9b2a08cb":"code","8ede7677":"code","ec5d2e52":"code","e3ab1090":"code","c5edf59d":"code","7d3945ab":"code","3bd8bf83":"code","934bebe9":"code","05157cd6":"code","70a58021":"code","fb314e9b":"code","5fd2fc6e":"code","1169ea5d":"code","872f06ea":"code","4d30b4ec":"code","47fa1196":"code","95b6af02":"code","c58cd4ae":"code","46da7ddd":"code","ee7c2199":"code","a5215336":"code","1f6f9166":"code","fcea2a24":"code","789db765":"code","c327270a":"code","2d9a8b81":"code","23c4d4df":"code","ee333802":"code","f476e946":"code","58ade0e0":"code","9b8add2a":"code","4879f86d":"code","87007a84":"code","649c4578":"code","670db9b9":"code","e913105d":"code","acb5ddf0":"code","af51ce60":"code","92aeebfb":"code","6f498942":"code","bd3c93fe":"code","11e8feee":"code","e53586f7":"code","508295b2":"code","88cfbca1":"code","896738bf":"code","85dd6587":"code","fac12fe1":"code","56ef0af8":"code","13aa21ab":"code","27e2c722":"code","f626ca54":"code","a797e76c":"code","1c415d0c":"code","f4023954":"code","63e749fa":"code","01592e16":"code","e7ddc0b7":"code","92c18aef":"code","1cff0f09":"code","876a02a3":"code","5f2bc655":"code","ac166af2":"code","9a2616f3":"code","27cbaba9":"code","03ff9348":"code","715c60ac":"code","16febbc5":"code","9dbca276":"code","7c0f2251":"code","9c74c7be":"code","bbc005ef":"code","bbad2f14":"code","50e240d8":"code","8765e408":"code","6ed1b079":"code","b60448e2":"code","eb5a0d4b":"code","2c1c8815":"code","1489f33f":"code","d3f2d19b":"code","59f67cbe":"code","fc374873":"code","0ab1baff":"code","e9ee7fb9":"code","81ae1b04":"code","474084f7":"code","93b6ee14":"code","b8a7b55c":"code","6ba6a26c":"code","64f6a669":"code","d7d32e7a":"code","a589c6d6":"code","4165be1f":"code","f1794469":"code","d7a77ac2":"code","9db146c4":"code","dc9387a9":"code","87ee08f5":"code","d900ec62":"code","da9721a5":"code","573bca29":"code","b57f18d0":"code","f90ecec3":"code","2cc60a68":"code","e1e65e56":"code","0e3f8a0c":"code","408a35a8":"code","1c12c017":"code","aa774489":"code","9ad7838a":"code","54d6fd24":"code","ce3107c7":"code","95216b5e":"code","eae1c6e0":"code","11a6c182":"code","378e75d4":"code","2dcc8c58":"code","c43eac7a":"code","edc36b3d":"code","6b2da0e8":"code","d217294e":"code","c8642a1b":"code","1879a07a":"code","52831820":"code","d04bc3c1":"code","6e861907":"code","fa8c5e37":"code","95bc61f4":"code","32ca0864":"code","2b3e5b8e":"code","3a020a58":"code","2c10a2a3":"code","597d3549":"code","2d49df07":"code","a4ef38ca":"code","1c70014e":"code","8ada419e":"code","8212b2be":"code","5e7f8a26":"code","48e747f9":"code","d6c6edce":"code","dc1bbf43":"code","b463ac7c":"code","5d88a945":"code","a7f0b741":"code","77901229":"code","e5fd8fc0":"code","96ead344":"code","305ac597":"code","5c627d35":"code","39c8d7c6":"code","62e8cdda":"code","74ca979e":"code","3aad678a":"code","1df84edc":"code","ebef58bd":"code","be947a57":"code","a9a8154e":"code","902d366b":"code","5473565e":"code","f3df78cb":"code","c8a4b284":"code","44b87bb6":"code","0a3c3a0a":"code","224aa4d3":"code","42fdf728":"code","6d00c699":"code","d9651dc0":"code","777b9e80":"code","29ce031f":"code","43bac71e":"code","f3d9bcc3":"code","6b9ef2b5":"code","2c5a6cc5":"code","0e0b3012":"code","b17a1de2":"code","70b83c31":"code","1a0ca77f":"code","46ed4685":"code","cc05e16e":"code","8b82ecb8":"markdown","d4f161ca":"markdown","38c71bcc":"markdown","538ef14f":"markdown","27012a19":"markdown","c6d57851":"markdown","3b70c7a6":"markdown","744d7b5f":"markdown","be6f8c9e":"markdown","90c43da4":"markdown","60a5abfa":"markdown","c4ce9a5a":"markdown","cd675724":"markdown","86b7e761":"markdown","4dffe5f0":"markdown","63ab8e40":"markdown","d442b01b":"markdown","a9ec2e03":"markdown","27021f17":"markdown","49f77828":"markdown","679005a7":"markdown","5bfa4db6":"markdown","439b7553":"markdown","457a4ece":"markdown","6af55f23":"markdown","309b8f3f":"markdown","40d2dfa0":"markdown","4b81d0af":"markdown","9d602f70":"markdown","72120684":"markdown","f3cfb2ab":"markdown","a8003d90":"markdown","390327f8":"markdown","1e813614":"markdown","70f03d8e":"markdown","3f2c2172":"markdown","81280510":"markdown","13187386":"markdown","9605002a":"markdown","d8da4761":"markdown","f6d1b392":"markdown","9c59e5a0":"markdown","9e13b9ec":"markdown","a013daa2":"markdown"},"source":{"155afff0":"import numpy as np\nimport scipy as sp\nimport pandas as pd\nfrom pandas import DataFrame, Series\n\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n%matplotlib inline\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom category_encoders import OrdinalEncoder, OneHotEncoder, TargetEncoder\nfrom tqdm import tqdm_notebook as tqdm\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, quantile_transform\nimport seaborn as sns\nimport datetime\n\nimport gc\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier, GradientBoostingRegressor, RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import roc_auc_score, mean_squared_error, mean_squared_log_error, log_loss, roc_curve, confusion_matrix, plot_roc_curve\nfrom sklearn.model_selection import StratifiedKFold, GroupKFold, KFold, train_test_split\nfrom sklearn.preprocessing import LabelEncoder\n\nimport lightgbm as lgb\nfrom lightgbm import LGBMClassifier\n\n# NN\n# from tensorflow.keras.layers import Dense ,Dropout, BatchNormalization, Input, Embedding, SpatialDropout1D, Reshape, Concatenate\n# from tensorflow.keras.optimizers import Adam\n# from tensorflow.keras.models import Model\n# from tensorflow.keras.callbacks import EarlyStopping\n# from tensorflow.keras.metrics import AUC\n\nfrom hyperopt import fmin, tpe, hp, rand, Trials\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\n\nfrom lightgbm import LGBMClassifier\n# import xgboost as xgb","9b2a08cb":"#\u30cf\u30f3\u30ba\u30aa\u30f3\u306e\u30b9\u30e0\u30fc\u30ba\u306a\u9032\u884c\u306e\u305f\u3081\u306b\u5168\u4f53\u306e20\u5206\u306e1\u3060\u3051\u8aad\u307f\u8fbc\u3080\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n#\u5b9f\u969b\u306b\u8ab2\u984c\u3067\u30e2\u30c7\u30ea\u30f3\u30b0\u3059\u308b\u969b\u306b\u306f\"skiprows=lambda x: x%20!=0\"\u3092\u524a\u9664\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n# df_train = pd.read_csv('..\/input\/homework-for-students4plus\/train.csv', index_col=0, skiprows=lambda x: x%20!=0)\ndf_train = pd.read_csv('..\/input\/homework-for-students4plus\/train.csv', index_col=0)\ndf_test = pd.read_csv('..\/input\/homework-for-students4plus\/test.csv', index_col=0)","8ede7677":"# DataFrame\u306eshape\u3067\u884c\u6570\u3068\u5217\u6570\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\ndf_train.shape, df_test.shape","ec5d2e52":"#\u6700\u5927\u8868\u793a\u6570\u306e\u8a2d\u5b9a\npd.set_option('display.max_columns',100)\npd.set_option('display.max_rows',100)","e3ab1090":"# \u5148\u982d5\u884c\u3092\u307f\u3066\u307f\u307e\u3059\u3002\ndf_train.head()","c5edf59d":"df_train.tail()","7d3945ab":"df_test.head()","3bd8bf83":"df_test.tail()","934bebe9":"# \u7def\u5ea6\u7d4c\u5ea6\ndf_lat = pd.read_csv('..\/input\/homework-for-students4plus\/statelatlong.csv', index_col=0)","05157cd6":"# \u7d50\u5408\ndf_train_lat=pd.merge(df_train, df_lat, left_on='addr_state', right_on='State', how='left')\ndf_test_lat=pd.merge(df_test, df_lat, left_on='addr_state', right_on='State', how='left')","70a58021":"df_train=df_train_lat\ndf_test=df_test_lat","fb314e9b":"# GDP\ndf_gdp = pd.read_csv('..\/input\/homework-for-students4plus\/US_GDP_by_State.csv', index_col=0)","5fd2fc6e":"# \u30ea\u30fc\u30b1\u30fc\u30b8\u56de\u907f\u306e\u305f\u3081\u3001\u501f\u308a\u305f\u65e5\u306e\u524d\u5e74\u306eGDP\u3068\u7d50\u5408\u306b\u3059\u308b\u3002\u7533\u8acb\u306e\u5e74\u306b-1\u3059\u308b\ndf_train['issue_d'].str[-4:].astype(int)-1","1169ea5d":"df_test['issue_d'].str[-4:].astype(int)-1","872f06ea":"df_train=df_train.assign(issue_y_pre=df_train['issue_d'].str[-4:].astype(int)-1)","4d30b4ec":"df_test=df_test.assign(issue_y_pre=df_test['issue_d'].str[-4:].astype(int)-1)","47fa1196":"# \u7d50\u5408\ndf_train_gdp=pd.merge(df_train, df_gdp, left_on=['City','issue_y_pre'], right_on=['State','year'], how='left')\ndf_test_gdp=pd.merge(df_test, df_gdp, left_on=['City','issue_y_pre'], right_on=['State','year'], how='left')","95b6af02":"df_train=df_train_gdp\ndf_test=df_test_gdp","c58cd4ae":"# S&P Index\ndf_spi = pd.read_csv('..\/input\/homework-for-students4plus\/spi.csv', index_col=0, parse_dates=[0])","46da7ddd":"# issue_d\u3092yyyy-mm\u5f62\u5f0f\u306b\u5909\u66f4\ndf_train['issue_d']=pd.to_datetime(df_train['issue_d']).dt.strftime('%Y-%m')\ndf_test['issue_d']=pd.to_datetime(df_test['issue_d']).dt.strftime('%Y-%m')","ee7c2199":"# spi\u3092\u6708\u5225\u96c6\u8a08\ndf_spi_m=df_spi.resample(rule=\"M\").mean()","a5215336":"# index\u5316\u3057\u305fdate\u5217\u3092\u5217\u306b\u623b\u3059\ndf_spi_m=df_spi_m.reset_index()","1f6f9166":"# yyyy-mm\u5f62\u5f0f\u306b\u5909\u66f4\ndf_spi_m['date']=df_spi_m['date'].dt.strftime('%Y-%m')","fcea2a24":"# \u7d50\u5408\ndf_train_spi=pd.merge(df_train, df_spi_m, left_on='issue_d', right_on='date', how='left')\ndf_test_spi=pd.merge(df_test, df_spi_m, left_on='issue_d', right_on='date', how='left')","789db765":"df_train=df_train_spi\ndf_test=df_test_spi","c327270a":"df_train.shape,df_test.shape","2d9a8b81":"df_train['issue_d'] = pd.to_datetime(df_train['issue_d'])\ndf_test['issue_d'] = pd.to_datetime(df_test['issue_d'])","23c4d4df":"# issue_d\u3092\u5e74\u306b\u5206\u89e3\ndf_train['issue_d_year'] = df_train['issue_d'].dt.year\ndf_test['issue_d_year'] = df_test['issue_d'].dt.year","ee333802":"# issue_d\u3092\u6708\u306b\u5206\u89e3\ndf_train['issue_d_month'] = df_train['issue_d'].dt.month\ndf_test['issue_d_month'] = df_test['issue_d'].dt.month","f476e946":"# Feature Engineering\ndf_train['loan_month']=df_train['loan_amnt']\/df_train['installment'] #\u8fd4\u6e08\u3059\u308b\u307e\u3067\u306e\u6708\ndf_train['loan_end_date']=df_train['issue_d']+pd.to_timedelta(df_train['loan_month']*30,unit='D') #\u8fd4\u6e08\u5f8c\u306e\u65e5\u4ed8\ndf_train['inst_late']=df_train['installment']*12\/(df_train['annual_inc']+1) #\u5e74\u53ce\u306b\u5bfe\u3059\u308b\u8fd4\u6e08\u984d\u306e\u5272\u5408\ndf_train['line_late']=df_train['open_acc']\/df_train['total_acc'] #\u30af\u30ec\u30b8\u30c3\u30c8\u30e9\u30a4\u30f3\u7dcf\u6570\u306b\u5bfe\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306e\u5272\u5408\ndf_train['earliest_cr_line_y']=pd.to_datetime(df_train['earliest_cr_line'],format='%b-%Y').dt.year\ndf_train['earliest_cr_line_m']=pd.to_datetime(df_train['earliest_cr_line'],format='%b-%Y').dt.month\n\ndf_test['loan_month']=df_test['loan_amnt']\/df_test['installment'] #\u8fd4\u6e08\u3059\u308b\u307e\u3067\u306e\u6708\ndf_test['loan_end_date']=df_test['issue_d']+pd.to_timedelta(df_test['loan_month']*30,unit='D') #\u8fd4\u6e08\u5f8c\u306e\u65e5\u4ed8\ndf_test['inst_late']=df_test['installment']*12\/(df_test['annual_inc']+1) #\u5e74\u53ce\u306b\u5bfe\u3059\u308b\u8fd4\u6e08\u984d\u306e\u5272\u5408 \u5206\u6bcd0\u3092\u9632\u3050\u305f\u3081+1\ndf_test['line_late']=df_test['open_acc']\/df_test['total_acc'] #\u30af\u30ec\u30b8\u30c3\u30c8\u30e9\u30a4\u30f3\u7dcf\u6570\u306b\u5bfe\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306e\u5272\u5408\ndf_test['earliest_cr_line_y']=pd.to_datetime(df_test['earliest_cr_line'],format='%b-%Y').dt.year\ndf_test['earliest_cr_line_m']=pd.to_datetime(df_test['earliest_cr_line'],format='%b-%Y').dt.month","58ade0e0":"# emp_length\u3000\u6570\u5024\u578b\u306b\u5909\u63db\nemp_length_dic = {'4 years':4, '1 year':1, '10+ years':15, '3 years':3, '2 years':2, '6 years':6,\n       '8 years':8, '5 years':5, '9 years':9, '< 1 year':0.5, '7 years':7}","9b8add2a":"df_train['emp_length'] = df_train['emp_length'].map(emp_length_dic).fillna(0)\ndf_test['emp_length'] = df_test['emp_length'].map(emp_length_dic).fillna(0)","4879f86d":"# grade\ngrade_dic = {\n        \"A\": 0,\"B\": 1,\"C\": 2,\"D\": 3,\"E\": 4,\"F\": 5,\"G\": 6\n}","87007a84":"df_train['grade'] = df_train['grade'].map(grade_dic)\ndf_test['grade'] = df_test['grade'].map(grade_dic)","649c4578":"# sub_grade\nsub_grade_dic = {\n    \"A1\": 0,\"A2\": 1,\"A3\": 2,\"A4\": 3,\"A5\": 4,\n    \"B1\": 5,\"B2\": 6,\"B3\": 7,\"B4\": 8,\"B5\": 9,\n    \"C1\": 10,\"C2\": 11,\"C3\": 12,\"C4\": 13,\"C5\": 14,\n    \"D1\": 15,\"D2\": 16,\"D3\": 17,\"D4\": 18,\"D5\": 19,\n    \"E1\": 20,\"E2\": 21,\"E3\": 22,\"E4\": 23,\"E5\": 24,\n    \"F1\": 25,\"F2\": 26,\"F3\": 27,\"F4\": 28,\"F5\": 29,\n    \"G1\": 30,\"G2\": 31,\"G3\": 32,\"G4\": 33,\"G5\": 34\n}","670db9b9":"df_train['sub_grade'] = df_train['sub_grade'].map(sub_grade_dic)\ndf_test['sub_grade'] = df_test['sub_grade'].map(sub_grade_dic)","e913105d":"ep=0.01 #\u5206\u6bcd\u304c0\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306b\ndf_train['annual_inc_acc_now_delinq']= df_train.annual_inc\/(df_train.acc_now_delinq+ep)\ndf_train['annual_inc_open_acc']= df_train.annual_inc\/(df_train.open_acc+ep)\ndf_train['annual_inc_total_acc']= df_train.annual_inc\/(df_train.total_acc+ep)\ndf_train['annual_inc_loan_amnt']= df_train.annual_inc\/(df_train.loan_amnt+ep)\ndf_train['annual_inc_emp_length']= df_train.annual_inc\/(df_train.emp_length+ep)\ndf_train['installment_tot_cur_bal']= df_train.installment\/(df_train.tot_cur_bal+ep)\ndf_train['installment_acc_now_delinq']= df_train.installment\/(df_train.acc_now_delinq+ep)\ndf_train['installment_open_acc']= df_train.installment\/(df_train.open_acc+ep)\ndf_train['installment_total_acc']= df_train.installment\/(df_train.total_acc+ep)\ndf_train['installment_emp_length']= df_train.installment\/(df_train.emp_length+ep)\ndf_train['tot_cur_bal_acc_now_delinq']= df_train.tot_cur_bal\/(df_train.acc_now_delinq+ep)\ndf_train['tot_cur_bal_total_acc']= df_train.tot_cur_bal\/(df_train.total_acc+ep)\ndf_train['tot_cur_bal_loan_amnt']= df_train.tot_cur_bal\/(df_train.loan_amnt+ep)\ndf_train['tot_cur_bal_emp_length']= df_train.tot_cur_bal\/(df_train.emp_length+ep)\ndf_train['acc_now_delinq_open_acc']= df_train.acc_now_delinq\/(df_train.open_acc+ep)\ndf_train['acc_now_delinq_total_acc']= df_train.acc_now_delinq\/(df_train.total_acc+ep)\ndf_train['acc_now_delinq_loan_amnt']= df_train.acc_now_delinq\/(df_train.loan_amnt+ep)\ndf_train['acc_now_delinq_emp_length']= df_train.acc_now_delinq\/(df_train.emp_length+ep)\ndf_train['open_acc_loan_amnt']= df_train.open_acc\/(df_train.loan_amnt+ep)\ndf_train['open_acc_emp_length']= df_train.open_acc\/(df_train.emp_length+ep)\ndf_train['open_acc_loan_amnt']= df_train.total_acc\/(df_train.loan_amnt+ep)\ndf_train['open_acc_emp_length']= df_train.total_acc\/(df_train.emp_length+ep)","acb5ddf0":"df_test['annual_inc_acc_now_delinq']= df_test.annual_inc\/(df_test.acc_now_delinq+ep)\ndf_test['annual_inc_open_acc']= df_test.annual_inc\/(df_test.open_acc+ep)\ndf_test['annual_inc_total_acc']= df_test.annual_inc\/(df_test.total_acc+ep)\ndf_test['annual_inc_loan_amnt']= df_test.annual_inc\/(df_test.loan_amnt+ep)\ndf_test['annual_inc_emp_length']= df_test.annual_inc\/(df_test.emp_length+ep)\ndf_test['installment_tot_cur_bal']= df_test.installment\/(df_test.tot_cur_bal+ep)\ndf_test['installment_acc_now_delinq']= df_test.installment\/(df_test.acc_now_delinq+ep)\ndf_test['installment_open_acc']= df_test.installment\/(df_test.open_acc+ep)\ndf_test['installment_total_acc']= df_test.installment\/(df_test.total_acc+ep)\ndf_test['installment_emp_length']= df_test.installment\/(df_test.emp_length+ep)\ndf_test['tot_cur_bal_acc_now_delinq']= df_test.tot_cur_bal\/(df_test.acc_now_delinq+ep)\ndf_test['tot_cur_bal_total_acc']= df_test.tot_cur_bal\/(df_test.total_acc+ep)\ndf_test['tot_cur_bal_loan_amnt']= df_test.tot_cur_bal\/(df_test.loan_amnt+ep)\ndf_test['tot_cur_bal_emp_length']= df_test.tot_cur_bal\/(df_test.emp_length+ep)\ndf_test['acc_now_delinq_open_acc']= df_test.acc_now_delinq\/(df_test.open_acc+ep)\ndf_test['acc_now_delinq_total_acc']= df_test.acc_now_delinq\/(df_test.total_acc+ep)\ndf_test['acc_now_delinq_loan_amnt']= df_test.acc_now_delinq\/(df_test.loan_amnt+ep)\ndf_test['acc_now_delinq_emp_length']= df_test.acc_now_delinq\/(df_test.emp_length+ep)\ndf_test['open_acc_loan_amnt']= df_test.open_acc\/(df_test.loan_amnt+ep)\ndf_test['open_acc_emp_length']= df_test.open_acc\/(df_test.emp_length+ep)\ndf_test['open_acc_loan_amnt']= df_test.total_acc\/(df_test.loan_amnt+ep)\ndf_test['open_acc_emp_length']= df_test.total_acc\/(df_test.emp_length+ep)","af51ce60":"df_train.head()","92aeebfb":"df_test","6f498942":"df_train.describe()","bd3c93fe":"df_test.describe()","11e8feee":"df_train.dtypes","e53586f7":"df_test.dtypes","508295b2":"df_train.shape,df_test.shape","88cfbca1":"pd.crosstab(pd.to_datetime(df_train['issue_d'], format='%Y-%m-%d').dt.strftime('%Y'), df_train['loan_condition'])","896738bf":"# 2013\u5e74\u672b\u4ee5\u524d\u306e\u30c7\u30fc\u30bf\u306f\u524a\u9664\ndf_train=df_train[df_train['issue_d'] > datetime.datetime(2013,12,31)]","85dd6587":"pd.crosstab(pd.to_datetime(df_train['issue_d'], format='%Y-%m-%d').dt.strftime('%Y'), df_train['loan_condition'])","fac12fe1":"df_train['earliest_cr_line'] = pd.to_datetime(df_train['earliest_cr_line'],format='%b-%Y')\ndf_test['earliest_cr_line'] = pd.to_datetime(df_test['earliest_cr_line'],format='%b-%Y')","56ef0af8":"# \u65e5\u4ed8\u578b\u3092\u6570\u5024\u306b\u5909\u63db\ndf_train['issue_d']=df_train['issue_d'].astype(np.int64)\ndf_train['loan_end_date']=df_train['loan_end_date'].astype(np.int64)\ndf_train['earliest_cr_line']=df_train['earliest_cr_line'].astype(np.int64)\n\ndf_test['issue_d']=df_test['issue_d'].astype(np.int64)\ndf_test['loan_end_date']=df_test['loan_end_date'].astype(np.int64)\ndf_test['earliest_cr_line']=df_test['earliest_cr_line'].astype(np.int64)","13aa21ab":"df_train.head()","27e2c722":"df_test.head()","f626ca54":"df_train.describe()","a797e76c":"df_train.shape,df_test.shape","1c415d0c":"df_train[df_train.loan_condition==1].loan_amnt.mean() # \u8cb8\u3057\u5012\u308c\u305f\u30ed\u30fc\u30f3\u306e\u5e73\u5747\u984d","f4023954":"# \u4e0a\u306e\u8cb8\u3057\u5012\u308c\u305f\u30ed\u30fc\u30f3\u306b\u5bfe\u3059\u308b\u3082\u306e\u3092\u53c2\u8003\u306b\u3001\u8cb8\u3057\u5012\u308c\u3066\u3044\u306a\u3044\u30ed\u30fc\u30f3\u306e\u5e73\u5747\u984d\u3092\u7b97\u51fa\u307f\u3066\u304f\u3060\u3055\u3044\u3002","63e749fa":"df_train.loan_condition==0","01592e16":"df_train[df_train.loan_condition==0].loan_amnt.mean() # \u8cb8\u3057\u5012\u308c\u3066\u3044\u306a\u3044\u30ed\u30fc\u30f3\u306e\u5e73\u5747\u984d","e7ddc0b7":"df_train[df_train.emp_title.isnull()==False].loan_amnt.mean() #emp_title\u304cnull\u3067\u306a\u3044\u4eba\u306e\u30ed\u30fc\u30f3\u306e\u5e73\u5747\u984d","92c18aef":"f = 'loan_amnt'\n\nplt.figure(figsize=[7,7])\ndf_train[f].hist(density=True, alpha=0.5, bins=50,color='r') # \u03b1:\u900f\u904e\u7387 color\u304c\u306a\u304f\u3066\u3082\u3044\u3044\ndf_test[f].hist(density=True, alpha=0.5, bins=50,color='b') # color\u304c\u306a\u304f\u3066\u3082\u3044\u3044\n# test\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u53ef\u8996\u5316\u3092\u8a18\u5165\u3057\u3066\u307f\u307e\u3057\u3087\u3046\nplt.xlabel(f)\nplt.ylabel('density') #\u3000density:\u7d76\u5bfe\u5024\u3067\u306a\u304f\u76f8\u5bfe\u5024\nplt.show()","1cff0f09":"df_train[f].value_counts() #\u4f55\u304b\u8cb7\u3044\u305f\u3044\u5546\u54c1\u306b\u5408\u308f\u305b\u3066\u501f\u308a\u3066\u3044\u308b\u53ef\u80fd\u6027","876a02a3":"f = 'purpose'\n# value_counts\u3092\u7528\u3044\u3066train\u306epurpose\u306b\u5bfe\u3057\u3066\u96c6\u8a08\u7d50\u679c\u3092\u307f\u3066\u307f\u307e\u3057\u3087\u3046\u3002","5f2bc655":"df_train[f].value_counts()","ac166af2":"df_train[f].value_counts()\/len(df_train) #\u76f8\u5bfe\u3067\u898b\u308b","9a2616f3":"# \u540c\u69d8\u306btest\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066(df_test)","27cbaba9":"df_test[f].value_counts()","03ff9348":"df_test[f].value_counts()\/len(df_test) #\u76f8\u5bfe\u3067\u898b\u308b","715c60ac":"df_train.shape,df_test.shape","16febbc5":"# \u53ef\u8996\u5316\n# df_train_corr=df_train.corr().style.background_gradient(axis=None)","9dbca276":"# df_train_corr.to_excel('df_train_corr.xlsx')","7c0f2251":"# \u4ed6\u306e\u7279\u5fb4\u91cf\u3068\u76f8\u95a2\u4fc2\u6570|0.95|\u4ee5\u4e0a\u306e\u7279\u5fb4\u91cf\u306f\u524a\u9664\ndf_train.drop(['installment'], axis=1, inplace=True)\ndf_train.drop(['grade'], axis=1, inplace=True)\ndf_train.drop(['annual_inc'], axis=1, inplace=True)\ndf_train.drop(['earliest_cr_line'], axis=1, inplace=True)\ndf_train.drop(['tot_cur_bal'], axis=1, inplace=True)\ndf_train.drop(['issue_y_pre'], axis=1, inplace=True)\ndf_train.drop(['State & Local Spending'], axis=1, inplace=True)\ndf_train.drop(['Gross State Product'], axis=1, inplace=True)\ndf_train.drop(['year'], axis=1, inplace=True)","9c74c7be":"# \u4ed6\u306e\u7279\u5fb4\u91cf\u3068\u76f8\u95a2\u4fc2\u6570|0.95|\u4ee5\u4e0a\u306e\u7279\u5fb4\u91cf\u306f\u524a\u9664\ndf_test.drop(['installment'], axis=1, inplace=True)\ndf_test.drop(['grade'], axis=1, inplace=True)\ndf_test.drop(['annual_inc'], axis=1, inplace=True)\ndf_test.drop(['earliest_cr_line'], axis=1, inplace=True)\ndf_test.drop(['tot_cur_bal'], axis=1, inplace=True)\ndf_test.drop(['issue_y_pre'], axis=1, inplace=True)\ndf_test.drop(['State & Local Spending'], axis=1, inplace=True)\ndf_test.drop(['Gross State Product'], axis=1, inplace=True)\ndf_test.drop(['year'], axis=1, inplace=True)","bbc005ef":"y_train = df_train.loan_condition #\u76ee\u7684\u5909\u6570\nX_train = df_train.drop(['loan_condition'], axis=1) #\u8aac\u660e\u5909\u6570\n\nX_test = df_test","bbad2f14":"X_train","50e240d8":"X_test","8765e408":"f='loan_amnt'","6ed1b079":"scaler = StandardScaler()\nscaler.fit(X_train[[f]])","b60448e2":"# dtype\u304cobject\uff08\u6570\u5024\u3067\u306a\u3044\u3082\u306e\uff09\u306e\u30ab\u30e9\u30e0\u540d\u3068\u30e6\u30cb\u30fc\u30af\u6570\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\ncats = []\nfor col in X_train.columns:\n    if X_train[col].dtype == 'object':\n        cats.append(col)\n        \n        print(col, X_train[col].nunique())","eb5a0d4b":"# dtype\u304c\u6570\u5024\u306e\u30ab\u30e9\u30e0\u540d\u3068\u30e6\u30cb\u30fc\u30af\u6570\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nnum_cols = []\nfor col in X_train.columns:\n    if X_train[col].dtype != 'object':\n        num_cols.append(col)\n        \n        print(col, X_train[col].nunique())","2c1c8815":"# \u6b20\u640d\u5024\u30d5\u30e9\u30b0\u4f5c\u3063\u3066\u307f\u308b\nnullflagcol = X_train.columns[X_train.isnull().sum()!=0].values ","1489f33f":"nullflagcol","d3f2d19b":"for col in nullflagcol:\n    # \u5143\u306e\u5217(col)\u306e\u3046\u3061\u6b20\u640d\u3057\u3066\u3044\u308b\u884c\u3092\u62bd\u51fa\u3002\u305d\u306e\u884c\u306b\u5bfe\u3057colnull\u5217=1\u3092\u5165\u308c\u308b    \n    X_train.loc[X_train[col].isnull(),col+'null']=1\n    # 0\u57cb\u3081    \n    X_train[col+'null']=X_train[col+'null'].fillna(0)\n    # \u5143\u306e\u5217(col)\u306e\u3046\u3061\u6b20\u640d\u3057\u3066\u3044\u308b\u884c\u3092\u62bd\u51fa\u3002\u305d\u306e\u884c\u306b\u5bfe\u3057colnull\u5217=1\u3092\u5165\u308c\u308b    \n    X_test.loc[X_test[col].isnull(),col+'null']=1\n    # 0\u57cb\u3081    \n    X_test[col+'null']=X_test[col+'null'].fillna(0)    ","59f67cbe":"# X_train[X_train['mths_since_last_delinqnull']==0].head()","fc374873":"# X_train[X_train['mths_since_last_delinqnull']==1].head()","0ab1baff":"X_train.shape,X_test.shape","e9ee7fb9":"X_train.describe()","81ae1b04":"X_test.describe()","474084f7":"# 2\u03c3\u3092\u57fa\u6e96\u306b\u5916\u308c\u5024\u3092\u57cb\u3081\u308b\u95a2\u6570\ndef outlier_2s(df):\n\n    for i in range(len(df.columns)):\n        # \u5217\u3092\u62bd\u51fa\u3059\u308b\n        col = df.iloc[:,i]\n        # \u5e73\u5747\u3068\u6a19\u6e96\u504f\u5dee\n        average = np.mean(col)\n        sd = np.std(col)\n        # \u5916\u308c\u5024\u306e\u57fa\u6e96\u70b9\n        outlier_min = average - (sd) * 2\n        outlier_max = average + (sd) * 2\n#         # \u7bc4\u56f2\u304b\u3089\u5916\u308c\u3066\u3044\u308b\u5024\u3092\u9664\u304f\n#         col[col < outlier_min] = None\n#         col[col > outlier_max] = None\n        # \u7bc4\u56f2\u304b\u3089\u5916\u308c\u3066\u3044\u308b\u5024\u3092min\u3088\u308a\u5c0f\u3055\u3044\u5024,max\u3088\u308a\u5927\u304d\u3044\u5024\u3067\u57cb\u3081\u308b\n        col[col < outlier_min] = np.min(col)-1\n        col[col > outlier_max] = np.max(col)+1\n\n    return df","93b6ee14":"X_train_numcols=X_train[num_cols]\nX_train_numcol =outlier_2s(X_train_numcols)\nX_test_numcols=X_test[num_cols]\nX_test_numcol =outlier_2s(X_test_numcols)","b8a7b55c":"X_train[num_cols]=X_train_numcols\nX_test[num_cols]=X_test_numcols","6ba6a26c":"X_train.describe()","64f6a669":"X_test.describe()","d7d32e7a":"# \u5bfe\u6570\u5909\u63db\n# X_train['loan_amnt'] = X_train['loan_amnt'].apply(np.log1p)\n# X_test['loan_amnt'] = X_test['loan_amnt'].apply(np.log1p)","a589c6d6":"# \u30ed\u30fc\u30f3\u984d\u3092RankGauss\u3057\u3066\u307f\u308b\n# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u7d50\u5408\u3057\u305f\u4e0a\u3067RankGauss\u306b\u3088\u308b\u5909\u63db\u3092\u5b9f\u65bd\nX_all = pd.concat([X_train, X_test], axis=0)\n\nX_all['loan_amnt'] = quantile_transform(X_all['loan_amnt'].to_frame(),\nn_quantiles=100, random_state=0, output_distribution='normal')\n\n# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u518d\u5206\u5272\nX_train = X_all.iloc[:X_train.shape[0], :]\nX_test = X_all.iloc[X_train.shape[0]:, :]","4165be1f":"# mths_since_last_record\u3092RankGauss\u3057\u3066\u307f\u308b\n\n# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u7d50\u5408\u3057\u305f\u4e0a\u3067RankGauss\u306b\u3088\u308b\u5909\u63db\u3092\u5b9f\u65bd\nX_all = pd.concat([X_train, X_test], axis=0)\n\nX_all['mths_since_last_record'] = quantile_transform(X_all['mths_since_last_record'].to_frame(),\nn_quantiles=100, random_state=0, output_distribution='normal')\n\n# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u518d\u5206\u5272\nX_train = X_all.iloc[:X_train.shape[0], :]\nX_test = X_all.iloc[X_train.shape[0]:, :]","f1794469":"# # \u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u7d50\u5408\u3057\u305f\u4e0a\u3067RankGauss\u306b\u3088\u308b\u5909\u63db\u3092\u5b9f\u65bd\n# X_all = pd.concat([X_train, X_test], axis=0)\n\n# X_all[num_cols] = quantile_transform(X_all[num_cols],\n# n_quantiles=100, random_state=0, output_distribution='normal')\n\n# # \u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u518d\u5206\u5272\n# X_train = X_all.iloc[:X_train.shape[0], :]\n# X_test = X_all.iloc[X_train.shape[0]:, :]","d7a77ac2":"# X_train","9db146c4":"# X_test","dc9387a9":"# X_train.describe()","87ee08f5":"# X_test.describe()","d900ec62":"X_train['emp_title'].head(10) # \u30ab\u30c6\u30b4\u30ea\u3088\u308a\u30c6\u30ad\u30b9\u30c8\u3068\u3057\u3066\u6271\u3063\u305f\u307b\u3046\u304c\u826f\u3044\u304b\u3082\u3057\u308c\u306a\u3044","da9721a5":"X_train['emp_title'].value_counts()","573bca29":"X_train['emp_title'].value_counts().hist(bins=100)","b57f18d0":"# col = 'purpose'\n\n# encoder = OneHotEncoder()\n# enc_train = encoder.fit_transform(X_train[col].values) #fit\u3068transform\u3092\u5206\u3051\u308b\u66f8\u304d\u65b9\u3082\u3042\u308b\n# enc_test = encoder.transform(X_test[col].values)","f90ecec3":"# enc_train.head()","2cc60a68":"# enc_test.head()","e1e65e56":"# Onehot\u306e\u4f8b\u3092\u53c2\u8003\u306b\u3084\u3063\u3066\u307f\u307e\u3057\u3087\u3046\n# https:\/\/contrib.scikit-learn.org\/categorical-encoding\/ordinal.html","0e3f8a0c":"# # col = 'purpose'\n\n# col ='grade'\n\n# encoder = OrdinalEncoder()\n# enc_train = encoder.fit_transform(X_train[col].values) #fit\u3068transform\u3092\u5206\u3051\u308b\u66f8\u304d\u65b9\u3082\u3042\u308b\n# enc_test = encoder.transform(X_test[col].values)","408a35a8":"# enc_train.head(30)","1c12c017":"# enc_test.head(30)","aa774489":"# pd.crosstab(df_train['grade'], df_train['loan_condition'])","9ad7838a":"# pd.crosstab(df_train['sub_grade'], df_train['loan_condition'])","54d6fd24":"# # value_couonts\u3067\u96c6\u8a08\u3057\u305f\u7d50\u679c\u3092\u3001\n# summary = X_train[col].value_counts()\n# summary","ce3107c7":"# # map\u3059\u308b\u3002\n# enc_train = X_train[col].map(summary)\n# enc_test = X_test[col].map(summary)","95216b5e":"# enc_train.head()","eae1c6e0":"# enc_test.head()","11a6c182":"target = 'loan_condition'\nX_temp = pd.concat([X_train, y_train], axis=1)\n\n# X_test\u306fX_train\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nsummary = X_temp.groupby([col])[target].mean()\nenc_test = X_test[col].map(summary) \n\n    \n# X_train\u306e\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092oof\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\n# \u3053\u3053\u3067\u306f\u7406\u89e3\u306e\u305f\u3081\u306b\u81ea\u5206\u3067\u4ea4\u5dee\u691c\u5b9a\u7684\u306b\u5b9f\u65bd\u3059\u308b\u304c\u3001xfeat\u306a\u3069\u3092\u7528\u3044\u3066\u3082\u826f\u3044\nskf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\nenc_train = Series(np.zeros(len(X_train)), index=X_train.index)\n\nfor i, (train_ix, val_ix) in enumerate((skf.split(X_train, y_train))):\n    X_train_, _ = X_temp.iloc[train_ix], y_train.iloc[train_ix]\n    X_val, _ = X_temp.iloc[val_ix], y_train.iloc[val_ix]\n\n    summary = X_train_.groupby([col])[target].mean()\n    enc_train.iloc[val_ix] = X_val[col].map(summary)","378e75d4":"enc_train","2dcc8c58":"enc_test","c43eac7a":"TXT_train = X_train.emp_title.copy()\nTXT_test = X_test.emp_title.copy()","edc36b3d":"cats.remove('emp_title')","6b2da0e8":"TXT_train","d217294e":"# oe = OrdinalEncoder(cols=cats, return_df=False)\n\n# X_train[cats] = oe.fit_transform(X_train[cats])\n# X_test[cats] = oe.transform(X_test[cats])","c8642a1b":"# \u4ee5\u4e0b\u3092\u53c2\u8003\u306b\u81ea\u5206\u3067\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046 \nX_train.drop(['emp_title'], axis=1, inplace=True)\nX_test.drop(['emp_title'], axis=1, inplace=True)\n\nX_train['mths_since_last_delinq'].fillna(-9999, inplace=True)\nX_test['mths_since_last_delinq'].fillna(-9999, inplace=True)\nX_train['mths_since_last_record'].fillna(-9999, inplace=True)\nX_test['mths_since_last_record'].fillna(-9999, inplace=True)\nX_train['mths_since_last_major_derog'].fillna(-9999, inplace=True)\nX_test['mths_since_last_major_derog'].fillna(-9999, inplace=True)\nX_train.fillna(X_train.median(), inplace=True)\nX_test.fillna(X_train.median(), inplace=True)\n# https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.drop.html\n# https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.fillna.html","1879a07a":"# Target Encoding\ntarget = 'loan_condition'\nX_temp = pd.concat([X_train, y_train], axis=1)\n\nfor col in cats:\n\n    # X_test\u306fX_train\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\n    summary = X_temp.groupby([col])[target].mean()\n    X_test[col] = X_test[col].map(summary) \n\n\n    # X_train\u306e\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092oof\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\n    skf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\n    enc_train = Series(np.zeros(len(X_train)), index=X_train.index)\n\n    for i, (train_ix, val_ix) in enumerate((skf.split(X_train, y_train))):\n        X_train_, _ = X_temp.iloc[train_ix], y_train.iloc[train_ix]\n        X_val, _ = X_temp.iloc[val_ix], y_train.iloc[val_ix]\n\n        summary = X_train_.groupby([col])[target].mean()\n        enc_train.iloc[val_ix] = X_val[col].map(summary)\n        \n    X_train[col]  = enc_train","52831820":"X_train.fillna(X_train.mean(), axis=0, inplace=True)\nX_test.fillna(X_train.mean(), axis=0, inplace=True)","d04bc3c1":"# \u5b66\u7fd2\u7528\u3068\u691c\u8a3c\u7528\u306b\u5206\u5272\u3059\u308b\n# X_train_, X_val, y_train_, y_val= train_test_split(X_train, y_train, test_size=0.05, random_state=43)","6e861907":"# clf = LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=0.7000000000000001,\n#                             importance_type='split', learning_rate=0.05, max_depth=10,\n#                             min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n#                             n_estimators=9999, n_jobs=-1, num_leaves=15, objective=None,\n#                             random_state=0, reg_alpha=0.0, reg_lambda=0.0, silent=True,\n#                             subsample=0.9929417385040324, subsample_for_bin=200000, subsample_freq=0)\n\n# clf.fit(X_train_, y_train_, early_stopping_rounds=200, eval_metric='auc', eval_set=[(X_val, y_val)])","fa8c5e37":"# imp = DataFrame(clf.booster_.feature_importance(importance_type='gain'), index = X_train.columns, columns=['importance']).sort_values(['importance'], ascending=False)","95bc61f4":"# imp","32ca0864":"# fig, ax = plt.subplots(figsize=(5, 16))\n# lgb.plot_importance(clf, ax=ax, importance_type='gain')","2b3e5b8e":"# # importance 1000\u4ee5\u4e0b\u3092\u524a\u9664\n# X_train.drop(['close'], axis=1, inplace=True)\n# X_train.drop(['initial_list_status'], axis=1, inplace=True)\n# X_train.drop(['issue_d_month'], axis=1, inplace=True)\n# X_train.drop(['pub_rec'], axis=1, inplace=True)\n# X_train.drop(['application_type'], axis=1, inplace=True)\n# X_train.drop(['mths_since_last_major_derognull'], axis=1, inplace=True)\n# X_train.drop(['collections_12_mths_ex_med'], axis=1, inplace=True)\n# X_train.drop(['mths_since_last_recordnull'], axis=1, inplace=True)\n# X_train.drop(['acc_now_delinq_emp_length'], axis=1, inplace=True)\n# X_train.drop(['issue_d_year'], axis=1, inplace=True)\n# X_train.drop(['mths_since_last_delinqnull'], axis=1, inplace=True)","3a020a58":"# # importance 1000\u4ee5\u4e0b\u3092\u524a\u9664\n# X_test.drop(['close'], axis=1, inplace=True)\n# X_test.drop(['initial_list_status'], axis=1, inplace=True)\n# X_test.drop(['issue_d_month'], axis=1, inplace=True)\n# X_test.drop(['pub_rec'], axis=1, inplace=True)\n# X_test.drop(['application_type'], axis=1, inplace=True)\n# X_test.drop(['mths_since_last_major_derognull'], axis=1, inplace=True)\n# X_test.drop(['collections_12_mths_ex_med'], axis=1, inplace=True)\n# X_test.drop(['mths_since_last_recordnull'], axis=1, inplace=True)\n# X_test.drop(['acc_now_delinq_emp_length'], axis=1, inplace=True)\n# X_test.drop(['issue_d_year'], axis=1, inplace=True)\n# X_test.drop(['mths_since_last_delinqnull'], axis=1, inplace=True)","2c10a2a3":"TXT_train","597d3549":"# \u5927\u6587\u5b57\u5c0f\u6587\u5b57\u3067\u5225\u6271\u3044\u304b\u3082\u3057\u308c\u306a\u3044\nTXT_train = TXT_train.str.upper()\nTXT_test = TXT_test.str.upper()","2d49df07":"TXT_train.fillna('#', inplace=True)\nTXT_test.fillna('#', inplace=True)","a4ef38ca":"TXT_train","1c70014e":"tfidf = TfidfVectorizer(max_features=100, use_idf=True)","8ada419e":"TXT_train_enc = tfidf.fit_transform(TXT_train)\nTXT_test_enc = tfidf.transform(TXT_test)","8212b2be":"#\u758e\u884c\u5217\u304c\u5e30\u3063\u3066\u304d\u307e\u3059\u3002\nTXT_train_enc","5e7f8a26":"# todense\u3067\u5bc6\u884c\u5217\u306b\u5909\u63db\u3067\u304d\u307e\u3059\u304c\u3001\u307b\u3069\u3093\u3069\u30bc\u30ed\u3067\u3042\u308b\u3053\u3068\u304c\u307f\u3066\u53d6\u308c\u307e\u3059\u3002\nTXT_train_enc.todense()","48e747f9":"X_train_hstack=sp.sparse.hstack([X_train.values, TXT_train_enc])\nX_test_hstack=sp.sparse.hstack([X_test.values, TXT_test_enc])","d6c6edce":"X_train_text=pd.DataFrame.sparse.from_spmatrix(X_train_hstack)\nX_test_text=pd.DataFrame.sparse.from_spmatrix(X_test_hstack)","dc1bbf43":"X_train_text.head()","b463ac7c":"X_test_text.head()","5d88a945":"X_train=X_train_text\nX_test=X_test_text","a7f0b741":"# df_train = pd.read_csv('..\/input\/homework-for-students4plus\/train.csv', index_col=0, parse_dates=['issue_d'], skiprows=lambda x: x%20!=0)\n# #df_train = pd.read_csv('..\/input\/train.csv', index_col=0)\n# y_train = df_train.loan_condition\n# X_train = df_train.drop(['loan_condition'], axis=1)\n\n# X_test = pd.read_csv('..\/input\/homework-for-students4plus\/test.csv', index_col=0, parse_dates=['issue_d'])","77901229":"# X_train","e5fd8fc0":"# y_train","96ead344":"# X_test","305ac597":"# cat = []\n# num = []\n\n# for col in X_train.columns:\n#     if X_train[col].dtype == 'object':\n#         if col != 'emp_title':\n#             cat.append(col)\n#     else:\n#         if col != 'issue_d':\n#             num.append(col)","5c627d35":"# # train\/test\n# # \u7279\u5fb4\u91cf\u30bf\u30a4\u30d7\u3054\u3068\u306b\u5206\u5272\u3059\u308b\n# cat_train = X_train[cat]\n# txt_train = X_train.emp_title\n# num_train = X_train[num]\n\n# cat_test = X_test[cat]\n# txt_test = X_test.emp_title\n# num_test = X_test[num]","39c8d7c6":"# scaler = StandardScaler()\n# num_train = scaler.fit_transform(num_train.fillna(num_train.median()))\n# num_test = scaler.transform(num_test.fillna(num_test.median()))","62e8cdda":"# for col in tqdm(cat):\n#     oe = OrdinalEncoder(return_df=False)\n    \n#     cat_train[col] = oe.fit_transform(cat_train[[col]])\n#     cat_test[col] = oe.transform(cat_test[[col]]) ","74ca979e":"# len(num_train),len(num_test)","3aad678a":"# # \u30d0\u30e9\u3057\u3066\u30ea\u30b9\u30c8\u306b\u3059\u308b\n# cat_train = [cat_train.values[:, k].reshape(-1,1) for k in range(len(cat))]\n# cat_test = [cat_test.values[:, k].reshape(-1,1) for k in range(len(cat))]","1df84edc":"# cat_train","ebef58bd":"# # numeric\u3068categorical\u3092\u7d50\u5408\u3057\u3066\u4e00\u3064\u306e\u30ea\u30b9\u30c8\u306b\u3059\u308b\n# X_train = [num_train] + cat_train\n# X_test = [num_test] + cat_test","be947a57":"# X_train","a9a8154e":"# X_test","902d366b":"# y_train","5473565e":"# # \u30b7\u30f3\u30d7\u30eb\u306aNN\n# def create_model():\n#     num= Input(shape=(num_train.shape[1],))\n#     out_num = Dense(194, activation='relu')(num)\n#     out_num = BatchNormalization()(out_num)\n#     out_num = Dropout(0.5)(out_num)\n    \n#     inputs = [num]\n#     outputs = [out_num]\n    \n#     # \u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u306fembedding\u3059\u308b\n#     for c in cat:\n#         num_unique_values = int(df_train[c].nunique())\n#         emb_dim = int(min(np.ceil((num_unique_values)\/2), 50))\n#         inp = Input(shape=(1,))\n#         inputs.append(inp)\n#         out = Embedding(num_unique_values+2, emb_dim, name=c)(inp)\n#         out = SpatialDropout1D(0.3)(out)\n#         out = Reshape((emb_dim, ))(out)\n#         outputs.append(out)\n    \n#     x = Concatenate()(outputs)\n#     x = BatchNormalization()(x)\n#     x = Dropout(0.5)(x)\n#     x = Dense(64, activation='relu')(x)\n#     x = BatchNormalization()(x)\n#     x = Dropout(0.5)(x)\n#     x = Dense(64, activation='relu')(x)\n#     x = BatchNormalization()(x)\n#     x = Dropout(0.5)(x)\n#     outp = Dense(1, activation='sigmoid')(x)\n#     model = Model(inputs=inputs, outputs=outp)\n#     model.compile(loss='binary_crossentropy', optimizer='adam', metrics=[AUC()])\n    \n#     return model","f3df78cb":"# X_test.shape[0]","c8a4b284":"# model = create_model()\n\n# es = EarlyStopping(monitor='val_loss', patience=0)\n\n# model.fit(X_train, y_train, batch_size=32, epochs=999, validation_split=0.2, callbacks=[es])","44b87bb6":"# model.predict(X_test).ravel()","0a3c3a0a":"# def objective(space):\n#     scores = []\n\n#     skf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\n\n#     for i, (train_ix, test_ix) in enumerate(tqdm(skf.split(X_train, y_train))):\n#         X_train_, y_train_ = X_train.values[train_ix], y_train.values[train_ix]\n#         X_val, y_val = X_train.values[test_ix], y_train.values[test_ix]\n\n#         clf = LGBMClassifier(n_estimators=9999, **space) \n\n#         clf.fit(X_train_, y_train_, early_stopping_rounds=20, eval_metric='auc', eval_set=[(X_val, y_val)])\n#         y_pred = clf.predict_proba(X_val)[:,1]\n#         score = roc_auc_score(y_val, y_pred)\n#         scores.append(score)\n        \n#     scores = np.array(scores)\n#     print(scores.mean())\n    \n#     return -scores.mean()","224aa4d3":"# space ={\n#         'max_depth': hp.choice('max_depth', np.arange(10, 30, dtype=int)),\n#         'subsample': hp.uniform ('subsample', 0.8, 1),\n#         'learning_rate' : hp.quniform('learning_rate', 0.025, 0.5, 0.025),\n#         'colsample_bytree' : hp.quniform('colsample_bytree', 0.5, 1, 0.05)\n#     }","42fdf728":"# trials = Trials()\n\n# best = fmin(fn=objective,\n#               space=space, \n#               algo=tpe.suggest,\n#               max_evals=20, \n#               trials=trials, \n#               rstate=np.random.RandomState(71) \n#              )","6d00c699":"# LGBMClassifier(**best)","d9651dc0":"# trials.best_trial['result']","777b9e80":"# # \u4eca\u5ea6\u306f\u30ab\u30c6\u30b4\u30ea\u7279\u5fb4\u91cf\u3082\u8ffd\u52a0\u3057\u3066\u30e2\u30c7\u30ea\u30f3\u30b0\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n# # CV\u3057\u3066\u30b9\u30b3\u30a2\u3092\u898b\u3066\u307f\u308b\u3002\u5c64\u5316\u62bd\u51fa\u3067\u826f\u3044\u304b\u306f\u5225\u9014\u3088\u304f\u8003\u3048\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n# # \u6570\u5024 \u4e2d\u592e\u5024,-9999\u57cb\u3081\n# # \u30ab\u30c6\u30b4\u30ea TargetEncoding\n# # \u30c6\u30ad\u30b9\u30c8 'emp_title' 100\u5b57","29ce031f":"# LightGB CV Averaging random1\nscores = []\ny_pred_test = np.zeros(len(X_test)) # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u683c\u7d0d\u7528array\n\nskf = StratifiedKFold(n_splits=10, random_state=30, shuffle=True)\n\n# for i, (train_ix, test_ix) in enumerate(tqdm(skf.split(X_train, y_train))):\n#     X_train_, y_train_, text_train_ = X_train.iloc[train_ix], y_train.iloc[train_ix]\n#     X_val, y_val, text_val = X_train.iloc[test_ix], y_train.iloc[test_ix ]\nfor i, (train_ix, test_ix) in tqdm(enumerate(skf.split(X_train, y_train))):\n    X_train_, y_train_ = X_train.values[train_ix], y_train.values[train_ix]\n    X_val, y_val = X_train.values[test_ix], y_train.values[test_ix]\n\n    clf = LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=0.7000000000000001,\n                                importance_type='split', learning_rate=0.05, max_depth=10,\n                                min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n                                n_estimators=9999, n_jobs=-1, num_leaves=15, objective=None,\n                                random_state=0, reg_alpha=0.0, reg_lambda=0.0, silent=True,\n                                subsample=0.9929417385040324, subsample_for_bin=200000, subsample_freq=0)\n    \n    clf.fit(X_train_, y_train_, early_stopping_rounds=200, eval_metric='auc', eval_set=[(X_val, y_val)])\n    y_pred = clf.predict_proba(X_val)[:,1]\n    scores.append(roc_auc_score(y_val, y_pred))\n    \n    y_pred_test += clf.predict_proba(X_test)[:,1] # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u5024\u3092\u8db3\u3057\u3066\u3044\u304f\n","43bac71e":"scores = np.array(scores)\nprint('Ave. CV score is %f' % scores.mean())\nscore1 = scores.mean()\n\ny_pred_test \/= 10 # \u6700\u5f8c\u306bfold\u6570\u3067\u5272\u308b\ny_pred1 = y_pred_test","f3d9bcc3":"# LightGB CV Averaging random2\nscores = []\ny_pred_test = np.zeros(len(X_test)) # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u683c\u7d0d\u7528array\n\nskf = StratifiedKFold(n_splits=10, random_state=60, shuffle=True)\n\n# for i, (train_ix, test_ix) in enumerate(tqdm(skf.split(X_train, y_train))):\n#     X_train_, y_train_, text_train_ = X_train.iloc[train_ix], y_train.iloc[train_ix]\n#     X_val, y_val, text_val = X_train.iloc[test_ix], y_train.iloc[test_ix ]\nfor i, (train_ix, test_ix) in tqdm(enumerate(skf.split(X_train, y_train))):\n    X_train_, y_train_ = X_train.values[train_ix], y_train.values[train_ix]\n    X_val, y_val = X_train.values[test_ix], y_train.values[test_ix]\n\n    clf = LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=0.7000000000000001,\n                                importance_type='split', learning_rate=0.05, max_depth=10,\n                                min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n                                n_estimators=9999, n_jobs=-1, num_leaves=15, objective=None,\n                                random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent=True,\n                                subsample=0.9929417385040324, subsample_for_bin=200000, subsample_freq=0)\n    \n    clf.fit(X_train_, y_train_, early_stopping_rounds=200, eval_metric='auc', eval_set=[(X_val, y_val)])\n    y_pred = clf.predict_proba(X_val)[:,1]\n    scores.append(roc_auc_score(y_val, y_pred))\n    \n    y_pred_test += clf.predict_proba(X_test)[:,1] # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u5024\u3092\u8db3\u3057\u3066\u3044\u304f\n","6b9ef2b5":"scores = np.array(scores)\nprint('Ave. CV score is %f' % scores.mean())\nscore2 = scores.mean()\n\ny_pred_test \/= 10 # \u6700\u5f8c\u306bfold\u6570\u3067\u5272\u308b\ny_pred2 = y_pred_test","2c5a6cc5":"# LightGB CV Averaging random3\nscores = []\ny_pred_test = np.zeros(len(X_test)) # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u683c\u7d0d\u7528array\n\nskf = StratifiedKFold(n_splits=10, random_state=85, shuffle=True)\n\n# for i, (train_ix, test_ix) in enumerate(tqdm(skf.split(X_train, y_train))):\n#     X_train_, y_train_, text_train_ = X_train.iloc[train_ix], y_train.iloc[train_ix]\n#     X_val, y_val, text_val = X_train.iloc[test_ix], y_train.iloc[test_ix ]\nfor i, (train_ix, test_ix) in tqdm(enumerate(skf.split(X_train, y_train))):\n    X_train_, y_train_ = X_train.values[train_ix], y_train.values[train_ix]\n    X_val, y_val = X_train.values[test_ix], y_train.values[test_ix]\n\n    clf = LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=0.7000000000000001,\n                                importance_type='split', learning_rate=0.05, max_depth=10,\n                                min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n                                n_estimators=9999, n_jobs=-1, num_leaves=15, objective=None,\n                                random_state=100, reg_alpha=0.0, reg_lambda=0.0, silent=True,\n                                subsample=0.9929417385040324, subsample_for_bin=200000, subsample_freq=0)\n    \n    clf.fit(X_train_, y_train_, early_stopping_rounds=200, eval_metric='auc', eval_set=[(X_val, y_val)])\n    y_pred = clf.predict_proba(X_val)[:,1]\n    scores.append(roc_auc_score(y_val, y_pred))\n    \n    y_pred_test += clf.predict_proba(X_test)[:,1] # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u5024\u3092\u8db3\u3057\u3066\u3044\u304f\n","0e0b3012":"scores = np.array(scores)\nprint('Ave. CV score is %f' % scores.mean())\nscore3 = scores.mean()\n\ny_pred_test \/= 10 # \u6700\u5f8c\u306bfold\u6570\u3067\u5272\u308b\ny_pred3 = y_pred_test","b17a1de2":"# \u5e73\u5747\u30b9\u30b3\u30a2\u3092\u7b97\u51fa \n# np.array(scores).mean()\n(score1+score2+score3)\/3","70b83c31":"# \u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\ny_pred = (y_pred1+y_pred2+y_pred3)\/3","1a0ca77f":"# sample submission\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u4e88\u6e2c\u5024\u3092\u4ee3\u5165\u306e\u5f8c\u3001\u4fdd\u5b58\u3059\u308b\nsubmission = pd.read_csv('..\/input\/homework-for-students4plus\/sample_submission.csv', index_col=0)\n\nsubmission.loan_condition = y_pred\n# submission.loan_condition = y_pred_test\nsubmission.to_csv('submission.csv')","46ed4685":"submission.head() # \u307e\u305a\u306f\u521d\u56desubmit\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff01\u3053\u308c\u304b\u3089\u3053\u306e\u30e2\u30c7\u30eb\u306e\u6539\u5584\u3092\u9032\u3081\u3066\u3044\u304f\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002","cc05e16e":"### The end of this notebook ###","8b82ecb8":"## RankGauss\u3053\u3053\u304b\u3089","d4f161ca":"### \u6b21\u306bcategorical\u3092Ordinal Encoding","38c71bcc":"## Count\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","538ef14f":"### \u307e\u305aNumeric\u3092StandardScaler","27012a19":"## Target\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","c6d57851":"## \u2605\u2605\u2605\u6570\u5024\u578b\u2605\u2605\u2605","3b70c7a6":"## \u5916\u308c\u5024\u524a\u9664\u3053\u3053\u307e\u3067","744d7b5f":"## \u30ed\u30fc\u30f3\u76ee\u7684\u306b\u3064\u3044\u3066\u3001value_counts\u3068\u898b\u3066\u307f\u308b","be6f8c9e":"## \u30c7\u30fc\u30bf\u7d5e\u8fbc\u3053\u3053\u304b\u3089","90c43da4":"## \u30c6\u30ad\u30b9\u30c8\u7279\u5fb4\u91cf","60a5abfa":"### sp.sparse.hstack\u3067\u5143\u306eX_train\u306b\u7d50\u5408\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u5bc6\u884c\u5217\u306b\u5909\u63db\u3057\u3066\u7528\u3044\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3057\u3001\u6700\u8fd1\u306f\u758e\u884c\u5217\u306e\u307e\u307e\u3067\u826f\u3044\u30e9\u30a4\u30d6\u30e9\u30ea\u3082\u591a\u3044\u3067\u3059\u3002","c4ce9a5a":"## hyperopt\u3082\u3084\u3063\u3066\u307f\u308b \u3053\u3053\u307e\u3067","cd675724":"## \u7279\u5fb4\u91cf\u8ffd\u52a0\u3053\u3053\u307e\u3067","86b7e761":"## Ordinal\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","4dffe5f0":"\u8272\u3005\u306a\u7279\u5fb4\u91cf\u306b\u3064\u3044\u3066\u53ef\u8996\u5316\u3084\u96c6\u8a08\u3092\u884c\u3044\u3001\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u7406\u89e3\u3092\u6df1\u3081\u307e\u3057\u3087\u3046\u3002Kaggle\u306eKernel (notebook)\u306a\u3069\u3082\u6709\u7528\u3067\u3059\u3002\u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u3084\u30e2\u30c7\u30ea\u30f3\u30b0\u3060\u3051\u3067\u306a\u304f\u3001EDA\u306b\u7279\u5316\u3057\u305f\u3082\u306e\u3082\u591a\u304f\u3001\u53c2\u8003\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u3002","63ab8e40":"## RankGauss\u3053\u3053\u307e\u3067","d442b01b":"### tfidf\u3067\u5358\u8a9e\u306e\u51fa\u73fe\u983b\u5ea6\u306b\u5909\u63db\u3057\u307e\u3059\u3002\u306a\u304a\u3001idf\u306fTree\u7cfb\u3067\u306f\u3042\u307e\u308a\u610f\u5473\u304c\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u7dda\u5f62\u30e2\u30c7\u30eb\u3084NN\u3067\u306f\u6709\u7528\u3067\u3059\u306e\u3067\u3001\u3053\u3053\u3067\u306f\u9069\u7528\u3057\u3066\u304a\u304d\u307e\u3059\u3002","a9ec2e03":"## Feature Selection\u3053\u3053\u304b\u3089","27021f17":"## NN\u3053\u3053\u307e\u3067","49f77828":"## dtype\u304cobject\u306e\u30ab\u30e9\u30e0\u3092\u5168\u3066Ordinal\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3057\u3066\u304a\u304d\u307e\u3059\u3002","679005a7":"## \u7279\u5fb4\u91cf\u8ffd\u52a0\u3053\u3053\u304b\u3089","5bfa4db6":"## X\u3068y\u306b\u5206\u5272\u3057\u307e\u3059","439b7553":"## \u2605\u65e5\u4ed8\u578b","457a4ece":"## hyperopt\u3082\u3084\u3063\u3066\u307f\u308b \u3053\u3053\u304b\u3089","6af55f23":"## NN\u3053\u3053\u304b\u3089","309b8f3f":"## \u30c6\u30ad\u30b9\u30c8\u8ffd\u52a0\u3000\u3053\u3053\u307e\u3067","40d2dfa0":"## \u6b20\u640d\u5024\u30d5\u30e9\u30b0\u3053\u3053\u307e\u3067","4b81d0af":"## \u2605\u2605\u2605\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u8272\u3005\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046","9d602f70":"# \u30c7\u30fc\u30bf\u52a0\u5de5","72120684":"# \u30e2\u30c7\u30ea\u30f3\u30b0","f3cfb2ab":"## \u30c6\u30ad\u30b9\u30c8\u7279\u5fb4\u91cf\u3092\u9664\u3044\u3066\u3001\u6b20\u640d\u5024\uff08\u7a7a\u6b04\uff09\u3092\u4e2d\u592e\u5024\u3067\u57cb\u3081\u3066\u304a\u304d\u307e\u3059\u3002","a8003d90":"##  One-hot\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","390327f8":"## \u6b20\u640d\u5024\u30d5\u30e9\u30b0\u3053\u3053\u304b\u3089","1e813614":"## \u57fa\u672c\u7d71\u8a08\u91cf\u3092train\/test\u3067\u6bd4\u8f03\u3057\u3066\u307f\u3088\u3046","70f03d8e":"### \u30ed\u30fc\u30f3\u984d\u3092\u5bfe\u6570\u5909\u63db\u3057\u3066\u307f\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u3053\u308c\u306ftree\u7cfb\u306b\u5bfe\u3057\u3066\u306f\u307b\u307c\u52b9\u679c\u304c\u306a\u3044\u3067\u3057\u3087\u3046\u3002\u3069\u306e\u3088\u3046\u306a\u5909\u63db\u304c\u52b9\u679c\u7684\u304b\u3001\u8ab2\u984c\u306b\u53d6\u308a\u7d44\u3080\u4e2d\u3067\u8272\u3005\u8003\u3048\u3066\u8a66\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002","3f2c2172":"# \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3068\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f","81280510":"### \u307e\u305a\u306f\u6b20\u640d\u5024\u3092\u57cb\u3081\u3066\u304a\u304d\u307e\u3059\u3002","13187386":"## emp_title\u306f\u30c6\u30ad\u30b9\u30c8\u306b\u898b\u3048\u308b\u306e\u3067\u4e00\u65e6\u5206\u96e2\u3057\u3066\u304a\u304d\u307e\u3059\u3002","9605002a":"## \u30c7\u30fc\u30bf\u7d5e\u8fbc\u3053\u3053\u307e\u3067","d8da4761":"## \u5916\u308c\u5024\u524a\u9664\u3053\u3053\u304b\u3089","f6d1b392":"## \u30ed\u30fc\u30f3\u984d\u306b\u3064\u3044\u3066\u3001\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u898b\u3066\u307f\u308b\u3002","9c59e5a0":"## Feature Selection\u3053\u3053\u307e\u3067","9e13b9ec":"## \u30c6\u30ad\u30b9\u30c8\u8ffd\u52a0\u3000\u3053\u3053\u304b\u3089","a013daa2":"# AI Academy FE&Modeling Notebook"}}