{"cell_type":{"69b810d3":"code","74e3a34c":"code","71de4343":"code","d9d58f5b":"code","5836ac85":"code","78cb7d3b":"code","eef7e8b7":"code","f037fe30":"code","ba04e6a4":"code","4c7619cb":"code","e720f353":"code","9f18d288":"code","03cb5340":"code","51c765ba":"code","ded6aa36":"code","1e1df06e":"code","4ea6e85f":"code","c92085cb":"code","35e63a88":"code","644afc82":"code","6e65e0a6":"code","fab29aa7":"code","4d047da5":"code","8b4a4ddf":"code","fb23dfa8":"code","b0c4063b":"code","f239856f":"code","4cb7d632":"code","2bf0919e":"code","601465e9":"code","edce5a7e":"code","5eed6194":"code","d9c06093":"code","9bc8b678":"code","188d7621":"code","9f3596bc":"code","ecd02e26":"code","fcdbde92":"code","2e90c9a8":"code","34b248d3":"code","5429aeaa":"code","81adbf6f":"code","9a48447f":"code","79db857f":"code","ad30bdd0":"code","3249e595":"code","7f89d489":"code","9155eb77":"code","256c0b2b":"code","2daf0029":"code","7b08cde1":"code","da3361ab":"code","e143bf2b":"code","e99bc451":"code","4a6c6d8f":"code","fef066eb":"code","96309c3a":"code","3458f518":"code","61e31f91":"code","b9cce71c":"code","e2ad274a":"code","7c226fc4":"code","eea40514":"code","86442c36":"code","b82f780f":"code","ce3da655":"code","f81c988d":"markdown","3a846699":"markdown","1fd3f1bd":"markdown","2be69749":"markdown","d3399225":"markdown"},"source":{"69b810d3":"#import library\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, log_loss\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import LinearSVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis\nfrom xgboost import XGBClassifier\nimport xgboost\nimport math\nfrom sklearn import metrics","74e3a34c":"df = pd.read_csv('..\/input\/example-churn-data\/churn_100k.csv')","71de4343":"df.shape","d9d58f5b":"df.head()","5836ac85":"df.describe()","78cb7d3b":"df.info()","eef7e8b7":"#handling missing value\ndf.dropna(inplace = True)","f037fe30":"#heatmap correlation\nplt.figure(figsize = (10,6))\nsns.heatmap(df.corr(), vmax = 0.5, square = True)\nplt.title(\"Pearson Correlation\")\nplt.show()","ba04e6a4":"#handling categorical data\nfor i in df.columns.tolist():\n    df[i] = df[i].astype('category').cat.codes\n\ndf.head()","4c7619cb":"#indexing customer ID\ndf = df.set_index('customerId')\n\n#split data\nX = df.drop('EVENT_LABEL', axis = 1)\ny = df['EVENT_LABEL']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","e720f353":"#prepare models\nclassifiers = [\n    KNeighborsClassifier(n_neighbors = 5),\n    LinearSVC(),\n    DecisionTreeClassifier(criterion = 'gini', max_depth = 3),\n    RandomForestClassifier(random_state = 1, max_features = 'sqrt', n_jobs = 1, verbose = 1),\n    XGBClassifier(),\n    AdaBoostClassifier(),\n    GradientBoostingClassifier(),\n    GaussianNB(),\n    LinearDiscriminantAnalysis(),\n    QuadraticDiscriminantAnalysis()]","9f18d288":"#report models\nlog_cols = [\"Classifier\", \"Accuracy\", \"Log Loss\"]\nlog = pd.DataFrame(columns = log_cols)\n\nfor clf in classifiers:\n    clf.fit(X_train, y_train)\n    name = clf.__class__.__name__\n    print(\"=\" * 30)\n    print(name)\n    print('****Results****')\n    \n    train_predictions = clf.predict(X_test)\n    acc = accuracy_score(y_test, train_predictions)\n    print(\"Accuracy: {:.4%}\".format(acc))\n    \n    train_predictions = clf.predict(X_test)\n    ll = log_loss(y_test, train_predictions)\n    print(\"Log Loss: {}\".format(ll))\n    print(\"\\n\")\n    \n    log_entry = pd.DataFrame([[name, acc * 100, ll]], columns = log_cols)\n    log = log.append(log_entry)\n    \nprint(\"=\" * 30)","03cb5340":"#visualize accuracy models\nplt.figure(figsize = (8,6))\nsns.set_color_codes(\"muted\")\nsns.barplot(x = 'Accuracy', y = 'Classifier', data = log, color = \"deepskyblue\")\nplt.xlabel('Accuracy %')\nplt.title('Accuracy of Classification Model')\nplt.show()\n\n#visualize log loss models\nplt.figure(figsize = (8,6))\nsns.barplot(x = 'Log Loss', y = 'Classifier', data = log, color = \"salmon\")\nplt.xlabel('Log Loss')\nplt.title('Log Loss of Classification Model')\nplt.show()","51c765ba":"#build model\nxgb = XGBClassifier()\n%time xgb.fit(X_train, y_train)\nxgb.score(X_test, y_test)","ded6aa36":"#prediction\ny_pred = xgb.predict(X_test)\nprint(y_pred)","1e1df06e":"#check of MSE & RMSE \nmse = metrics.mean_squared_error(y_test, y_pred)\nprint('Mean Squared Error : '+ str(mse))\nrmse = math.sqrt(metrics.mean_squared_error(y_test, y_pred))\nprint('Root Mean Squared Error : '+ str(rmse))","4ea6e85f":"#confusion matrix\nmatrix = metrics.confusion_matrix(y_test, y_pred)\nprint(matrix)\n\n#heatmap matrix\nplt.figure(figsize = (8,6))\nsns.heatmap(matrix, annot = True, fmt = '.0f', cmap = 'viridis')\nplt.title(\"Confusion Matrix\")\nplt.xlabel(\"Prediction\")\nplt.ylabel(\"Actual\")\nplt.show()","c92085cb":"#classification report\nreport = metrics.classification_report(y_test, y_pred)\nprint(report)","35e63a88":"df_new = pd.read_csv('..\/input\/example-churn-data\/churn_100k.csv')\ndf_new.dropna(inplace = True)\ndf_new.head()","644afc82":"#visualize event label\nplt.figure(figsize = (8,6))\nsns.countplot(df_new['EVENT_LABEL'])\nplt.title(\"Event Label\")\nplt.show()","6e65e0a6":"#visualize event label ~ monthly minutes\nplt.figure(figsize = (8,6))\nsns.boxplot(data = df_new, x = 'EVENT_LABEL', y = 'monthly_minutes', palette = 'Set1')\nplt.title(\"Event Label ~ Monthly Minutes\")\nplt.show()","fab29aa7":"#visualize event label ~ customer service calls\nplt.figure(figsize = (8,6))\nsns.boxplot(data = df_new, x = 'EVENT_LABEL', y = 'customerServiceCalls', palette = 'Set2')\nplt.title(\"Event Label ~ Customer Service Calls\")\nplt.show()","4d047da5":"#visualize event label ~ streaming minutes\nplt.figure(figsize = (8,6))\nsns.boxplot(data = df_new, x = 'EVENT_LABEL', y = 'streaming_minutes')\nplt.title(\"Event Label ~ Streaming Minutes\")\nplt.show()","8b4a4ddf":"#visualize event label ~ total billed\nplt.figure(figsize = (8,6))\nsns.boxplot(data = df_new, x = 'EVENT_LABEL', y = 'TotalBilled', palette = 'Set1')\nplt.title(\"Event Label ~ Total Billed\")\nplt.show()","fb23dfa8":"#visualize event label ~ previous balance\nplt.figure(figsize = (8,6))\nsns.boxplot(data = df_new, x = 'EVENT_LABEL', y = 'PrevBalance', palette = 'Set2')\nplt.title(\"Event Label ~ Previous Balance\")\nplt.show()","b0c4063b":"#visualize event label ~ ip address asn\nplt.figure(figsize = (8,6))\nsns.boxplot(data = df_new, x = 'EVENT_LABEL', y = 'ip_address_asn')\nplt.title(\"Event Label ~ ip Address Asn\")\nplt.show()","f239856f":"#visualize event label ~ late payments\nplt.figure(figsize = (8,6))\nsns.boxplot(data = df_new, x = 'EVENT_LABEL', y = 'latePayments', palette = 'Set1')\nplt.title(\"Event Label ~ Late Payments\")\nplt.show()","4cb7d632":"#visualize event label ~ ip address asn\nplt.figure(figsize = (8,6))\nsns.boxplot(data = df_new, x = 'EVENT_LABEL', y = 'phone_area_code', palette = 'Set2')\nplt.title(\"Event Label ~ Phone Area Code\")\nplt.show()","2bf0919e":"#visualize event label ~ number phones\nplt.figure(figsize = (8,6))\nsns.boxplot(data = df_new, x = 'EVENT_LABEL', y = 'number_phones')\nplt.title(\"Event Label ~ Number Phones\")\nplt.show()","601465e9":"#group event label & email domain\nlabel_email = df_new.groupby(['EVENT_LABEL', 'email_domain']).size().reset_index(name = 'Count')\nprint(label_email)","edce5a7e":"#visualize event label ~ email domain\nplt.figure(figsize = (8,6))\nsns.barplot(data = label_email, x = 'EVENT_LABEL', y = 'Count', hue = 'email_domain', palette = 'Set1')\nplt.title(\"Event Label ~ Email Domain\")\nplt.legend(bbox_to_anchor = (1.23, 1), borderaxespad = 0)\nplt.show()","5eed6194":"#group event phone model & event label\nphone_label = df_new.groupby(['phoneModel', 'EVENT_LABEL']).size().reset_index(name = 'Count')\nprint(phone_label)","d9c06093":"#visualize phone model ~ event label\nplt.figure(figsize = (15,6))\nchart = sns.barplot(data = phone_label, x = 'phoneModel', y = 'Count', hue = 'EVENT_LABEL', palette = 'Set2')\nchart.set_xticklabels(chart.get_xticklabels(), rotation = 50)\nplt.title(\"Phone Model ~ Event Label\")\nplt.legend(bbox_to_anchor = (1.08, 1), borderaxespad = 0)\nplt.show()","9bc8b678":"#group event partner & event label\npartner_label = df_new.groupby(['EVENT_LABEL', 'partner']).size().reset_index(name = 'Count')\nprint(partner_label)","188d7621":"#visualize billing state ~ event label\nplt.figure(figsize = (8,6))\nsns.barplot(data = partner_label, x = 'EVENT_LABEL', y = 'Count', hue = 'partner')\nplt.title(\"Event Label ~ Partner\")\nplt.legend(bbox_to_anchor = (1.12, 1), borderaxespad = 0)\nplt.show()","9f3596bc":"#group phone service & event label\nphone_label = df_new.groupby(['EVENT_LABEL', 'PhoneService']).size().reset_index(name = 'Count')\nprint(phone_label)","ecd02e26":"#visualize event label ~ phone service\nplt.figure(figsize = (8,6))\nsns.barplot(data = phone_label, x = 'EVENT_LABEL', y = 'Count', hue = 'PhoneService', palette = 'Set1')\nplt.title(\"Event Label ~ Phone Service\")\nplt.legend(bbox_to_anchor = (1.12, 1), borderaxespad = 0)\nplt.show()","fcdbde92":"#group multiple lines & event label\nmultiple_label = df_new.groupby(['EVENT_LABEL', 'MultipleLines']).size().reset_index(name = 'Count')\nprint(multiple_label)","2e90c9a8":"#visualize event label ~ multiple line\nplt.figure(figsize = (8,6))\nsns.barplot(data = multiple_label, x = 'EVENT_LABEL', y = 'Count', hue = 'MultipleLines')\nplt.title(\"Event Label ~ Multiple Lines\")\nplt.legend(bbox_to_anchor = (1.12, 1), borderaxespad = 0)\nplt.show()","34b248d3":"#group streaming plan & event label\nstreaming_label = df_new.groupby(['streamingPlan', 'EVENT_LABEL']).size().reset_index(name = 'Count')\nprint(streaming_label)","5429aeaa":"#visualize streaming plan ~ event label\nplt.figure(figsize = (8,6))\nsns.barplot(data = streaming_label, x = 'streamingPlan', y = 'Count', hue = 'EVENT_LABEL')\nplt.title(\"Streaming Plan ~ Event Label\")\nplt.legend(bbox_to_anchor = (1.15, 1), borderaxespad = 0)\nplt.show()","81adbf6f":"#group mobile hotspot & event label\nhotsplot_label = df_new.groupby(['EVENT_LABEL', 'mobileHotspot']).size().reset_index(name = 'Count')\nprint(hotsplot_label)","9a48447f":"#visualize mobile hotsplot ~ event label\nplt.figure(figsize = (8,6))\nsns.barplot(data = hotsplot_label, x = 'EVENT_LABEL', y = 'Count', hue = 'mobileHotspot', palette = 'Set1')\nplt.title(\"Event Label ~ Mobile Hotspot\")\nplt.legend(bbox_to_anchor = (1.12, 1), borderaxespad = 0)\nplt.show()","79db857f":"#group wifi calling text & event label\nwifi_label = df_new.groupby(['EVENT_LABEL', 'wifiCallingText']).size().reset_index(name = 'Count')\nprint(wifi_label)","ad30bdd0":"#visualize mobile hotsplot ~ event label\nplt.figure(figsize = (8,6))\nsns.barplot(data = wifi_label, x = 'EVENT_LABEL', y = 'Count', hue = 'wifiCallingText', palette = 'Set2')\nplt.title(\"Event Label ~ Wifi Calling Text\")\nplt.legend(bbox_to_anchor = (1.12, 1), borderaxespad = 0)\nplt.show()","3249e595":"#group online backup & event label\nonline_label = df_new.groupby(['OnlineBackup', 'EVENT_LABEL']).size().reset_index(name = 'Count')\nprint(online_label)","7f89d489":"#visualize online backup ~ event label\nplt.figure(figsize = (8,6))\nsns.barplot(data = online_label, x = 'OnlineBackup', y = 'Count', hue = 'EVENT_LABEL')\nplt.title(\"Event Label ~ Online Backup\")\nplt.legend(bbox_to_anchor = (1.15, 1), borderaxespad = 0)\nplt.show()","9155eb77":"#group device protection & event label\nprotection_label = df_new.groupby(['device_protection', 'EVENT_LABEL']).size().reset_index(name = 'Count')\nprint(protection_label)","256c0b2b":"#visualize device protection ~ event label\nplt.figure(figsize = (12,6))\nsns.barplot(data = protection_label, x = 'device_protection', y = 'Count', hue = 'EVENT_LABEL', palette = 'Set1')\nplt.title(\"Event Label ~ Device Protection\")\nplt.legend(bbox_to_anchor = (1.1, 1), borderaxespad = 0)\nplt.show()","2daf0029":"#group contract code & event label\ncontract_label = df_new.groupby(['contract_code', 'EVENT_LABEL']).size().reset_index(name = 'Count')\nprint(contract_label)","7b08cde1":"#visualize contract code ~ event label\nplt.figure(figsize = (12,6))\nsns.barplot(data = contract_label, x = 'contract_code', y = 'Count', hue = 'EVENT_LABEL', palette = 'Set2')\nplt.title(\"Event Label ~ Contract Code\")\nplt.legend(bbox_to_anchor = (1.1, 1), borderaxespad = 0)\nplt.show()","da3361ab":"#group currency code & event label\ncurrency_label = df_new.groupby(['EVENT_LABEL', 'currency_code']).size().reset_index(name = 'Count')\nprint(currency_label)","e143bf2b":"#visualize contract code ~ event label\nplt.figure(figsize = (8,6))\nsns.barplot(data = currency_label, x = 'EVENT_LABEL', y = 'Count', hue = 'currency_code')\nplt.title(\"Event Label ~ Currency Code\")\nplt.legend(bbox_to_anchor = (1.13, 1), borderaxespad = 0)\nplt.show()","e99bc451":"#group mailing code & event label\nmailing_label = df_new.groupby(['maling_code', 'EVENT_LABEL']).size().reset_index(name = 'Count')\nprint(mailing_label)","4a6c6d8f":"#visualize mailing code ~ event label\nplt.figure(figsize = (12,6))\nsns.barplot(data = mailing_label, x = 'maling_code', y = 'Count', hue = 'EVENT_LABEL', palette = 'Set1')\nplt.title(\"Event Label ~ Mailing Code\")\nplt.legend(bbox_to_anchor = (1.1, 1), borderaxespad = 0)\nplt.show()","fef066eb":"#group paper less billing & event label\npaper_label = df_new.groupby(['EVENT_LABEL', 'paperlessBilling']).size().reset_index(name = 'Count')\nprint(paper_label)","96309c3a":"#visualize paper less billing ~ event label\nplt.figure(figsize = (8,6))\nsns.barplot(data = paper_label, x = 'EVENT_LABEL', y = 'Count', hue = 'paperlessBilling', palette = 'Set2')\nplt.title(\"Event Label ~ Paper Less Billing\")\nplt.legend(bbox_to_anchor = (1.13, 1), borderaxespad = 0)\nplt.show()","3458f518":"#group payment method & event label\npayment_label = df_new.groupby(['paymentMethod', 'EVENT_LABEL']).size().reset_index(name = 'Count')\nprint(payment_label)","61e31f91":"#visualize mailing code ~ event label\nplt.figure(figsize = (8,6))\nsns.barplot(data = payment_label, x = 'paymentMethod', y = 'Count', hue = 'EVENT_LABEL')\nplt.title(\"Event Label ~ Payment Method\")\nplt.legend(bbox_to_anchor = (1.01, 1), borderaxespad = 0)\nplt.show()","b9cce71c":"#group gender & event label\ngender_label = df_new.groupby(['EVENT_LABEL', 'gender']).size().reset_index(name = 'Count')\nprint(gender_label)","e2ad274a":"#visualize paper less billing ~ event label\nplt.figure(figsize = (8,6))\nsns.barplot(data = gender_label, x = 'EVENT_LABEL', y = 'Count', hue = 'gender', palette = 'Set1')\nplt.title(\"Event Label ~ Gender\")\nplt.legend(bbox_to_anchor = (1.17, 1), borderaxespad = 0)\nplt.show()","7c226fc4":"#group network speed & event label\nnetwork_label = df_new.groupby(['EVENT_LABEL', 'networkSpeed']).size().reset_index(name = 'Count')\nprint(network_label)","eea40514":"#visualize paper less billing ~ event label\nplt.figure(figsize = (8,6))\nsns.barplot(data = network_label, x = 'EVENT_LABEL', y = 'Count', hue = 'networkSpeed', palette = 'Set2')\nplt.title(\"Event Label ~ Network Speed\")\nplt.legend(bbox_to_anchor = (1.15, 1), borderaxespad = 0)\nplt.show()","86442c36":"#group senior citizen & event label\ncitizen_label = df_new.groupby(['senior_citizen', 'EVENT_LABEL']).size().reset_index(name = 'Count')\nprint(citizen_label)","b82f780f":"#visualize senior citizen ~ event label\ndf_new['senior_citizen'] = df_new['senior_citizen'].astype('int')\n\nplt.figure(figsize = (8,6))\nsns.barplot(data = citizen_label, x = 'EVENT_LABEL', y = 'Count', hue = 'senior_citizen')\nplt.title(\"Event Label ~ Senior Citizen\")\nplt.legend(bbox_to_anchor = (1.11, 1), borderaxespad = 0)\nplt.show()","ce3da655":"df_new.hist(figsize = (10,15))\nplt.show()","f81c988d":"## Data Extraction","3a846699":"# Churn Prediction","1fd3f1bd":"### Extreme Gradient Boosting Model is the best score result","2be69749":"## Visualization","d3399225":"## Classification Model"}}