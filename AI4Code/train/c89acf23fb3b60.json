{"cell_type":{"9c27ecbd":"code","5ce816f5":"code","8a2a2ff8":"code","e874a73f":"code","af2ee14e":"code","cdd03a4d":"code","35f0d470":"code","812cc421":"code","235e100d":"code","5190e43e":"code","5aaa87ef":"code","094f76c4":"code","02643245":"code","3ffd8868":"markdown","d91f6a7e":"markdown","f6ac665b":"markdown","5de56c67":"markdown","d8aba3db":"markdown","69ead4a4":"markdown","cc806442":"markdown","ab893d8c":"markdown","cc8ece12":"markdown","2b5403f1":"markdown","9513293d":"markdown","fb8a1c6d":"markdown","a61dcefb":"markdown","f7f7b887":"markdown","5be57f5f":"markdown","ec37b823":"markdown","ce3e006d":"markdown","d17ce362":"markdown","513391ed":"markdown","6229ae6e":"markdown","75a4ce55":"markdown","cc23549f":"markdown","00c54c15":"markdown","8618e82a":"markdown","e2007fc8":"markdown","78333a9d":"markdown"},"source":{"9c27ecbd":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline","5ce816f5":"import os\nimport json\nfrom pandas.io.json import json_normalize\n\ndef load_df(csv_path='..\/input\/train.csv', nrows=None):\n    JSON_COLUMNS = ['device', 'geoNetwork', 'totals', 'trafficSource']\n    \n    df = pd.read_csv(csv_path, \n                     converters={column: json.loads for column in JSON_COLUMNS}, \n                     dtype={'fullVisitorId': 'str'}, \n                     nrows=nrows) # Important!!\n    \n    for column in JSON_COLUMNS:\n        column_as_df = json_normalize(df[column])\n        column_as_df.columns = [f\"{column}.{subcolumn}\" for subcolumn in column_as_df.columns]\n        df = df.drop(column, axis=1).merge(column_as_df, right_index=True, left_index=True)\n    print(f\"Loaded {os.path.basename(csv_path)}. Shape: {df.shape}\")\n    return df\n\nprint(os.listdir(\"..\/input\"))\n\ntrain = load_df(nrows=100000)\ntest =load_df('..\/input\/test.csv', nrows=100000)\ntrain.head()","8a2a2ff8":"train[\"totals.transactionRevenue\"] = train[\"totals.transactionRevenue\"].astype('float')\ngdf = train.groupby(\"fullVisitorId\")[\"totals.transactionRevenue\"].sum().reset_index()\n\nplt.figure(figsize=(6,4))\nplt.scatter(range(gdf.shape[0]), np.sort(np.log1p(gdf[\"totals.transactionRevenue\"].values)))\nplt.xlabel('index', fontsize=12)\nplt.ylabel('TransactionRevenue', fontsize=12)\nplt.show()","e874a73f":"gdf.describe()","af2ee14e":"zeroColumns = [c for c in train.columns if train[c].nunique() == 1]\nzeroColumns\n# \u6570\u636e\u4e2d\u65b9\u5dee\u4e0d\u4e3a0\u7684\u7279\u5f81","cdd03a4d":"nzi = pd.notnull(train[\"totals.transactionRevenue\"]).sum()\nnzr = (gdf[\"totals.transactionRevenue\"] > 0).sum()\nprint(\"Nusmber of instances in train set with non-zero revenue : \", nzi, \" and ratio is : \", nzi \/ train.shape[0])\nprint(\"Number of unique customers with non-zero revenue : \", nzr, \"and the ratio is : \", nzr \/ gdf.shape[0])\n","35f0d470":"print(\"Number of unique visitors in train set : \",train.fullVisitorId.nunique(), \" out of rows : \",train.shape[0])\nprint(\"Number of unique visitors in test set : \",test.fullVisitorId.nunique(), \" out of rows : \",test.shape[0])\nprint(\"Number of common visitors in train and test set : \",len(set(train.fullVisitorId.unique()).intersection(set(test.fullVisitorId.unique())) ))","812cc421":"import seaborn as sns\nfrom plotly import tools\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\ndef horizontal_bar_chart(cnt_srs, color):\n    trace = go.Bar(\n        y=cnt_srs.index[::-1],\n        x=cnt_srs.values[::-1],\n        showlegend=False,\n        orientation = 'h',\n        marker=dict(\n            color=color,\n        ),\n    )\n    return trace","235e100d":"# Device Browser\ncnt_srs = train.groupby('device.browser')['totals.transactionRevenue'].agg(['size', 'count'])\ncnt_srs.columns = [\"count\", \"count of non-zero revenue\"]\ncnt_srs = cnt_srs.sort_values(by=\"count\", ascending=False)\ntrace1 = horizontal_bar_chart(cnt_srs[\"count\"].head(10), 'rgba(50, 171, 96, 0.6)')\ntrace2 = horizontal_bar_chart(cnt_srs[\"count of non-zero revenue\"].head(10), 'rgba(50, 171, 96, 0.6)')\n\n# Device Category\ncnt_srs = train.groupby('device.deviceCategory')['totals.transactionRevenue'].agg(['size', 'count'])\ncnt_srs.columns = [\"count\", \"count of non-zero revenue\"]\ncnt_srs = cnt_srs.sort_values(by=\"count\", ascending=False)\ntrace3 = horizontal_bar_chart(cnt_srs[\"count\"].head(10), 'rgba(71, 58, 131, 0.8)')\ntrace4 = horizontal_bar_chart(cnt_srs[\"count of non-zero revenue\"].head(10), 'rgba(71, 58, 131, 0.8)')\n\n# Operating system\ncnt_srs = train.groupby('device.operatingSystem')['totals.transactionRevenue'].agg(['size', 'count'])\ncnt_srs.columns = [\"count\", \"count of non-zero revenue\"]\ncnt_srs = cnt_srs.sort_values(by=\"count\", ascending=False)\ntrace5 = horizontal_bar_chart(cnt_srs[\"count\"].head(10), 'rgba(246, 78, 139, 0.6)')\ntrace6 = horizontal_bar_chart(cnt_srs[\"count of non-zero revenue\"].head(10),'rgba(246, 78, 139, 0.6)')\n\n# Creating two subplots\nfig = tools.make_subplots(rows=3, cols=2, vertical_spacing=0.04, \n                          subplot_titles=[\"Device Browser - Count\", \"Device Browser - Non-zero Revenue Count\",\n                                          \"Device Category - Count\",  \"Device Category - Non-zero Revenue Count\",\n                                          \"Device Operating System - Count\", \"Device Operating System - Non-zero Revenue Count\"])\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 2, 1)\nfig.append_trace(trace4, 2, 2)\nfig.append_trace(trace5, 3, 1)\nfig.append_trace(trace6, 3, 2)\n\nfig['layout'].update(height=1200, width=800, paper_bgcolor='rgb(233,233,233)', title=\"Device Plots\")\npy.iplot(fig, filename='device-plots')","5190e43e":"import datetime\n\ndef scatter_plot(cnt_srs, color):\n    trace = go.Scatter(\n        x=cnt_srs.index[::-1],\n        y=cnt_srs.values[::-1],\n        showlegend=False,\n        marker=dict(\n            color=color,\n        ),\n    )\n    return trace\n\ntrain['date'] = train['date'].apply(lambda x: datetime.date(int(str(x)[:4]), int(str(x)[4:6]), int(str(x)[6:])))\ncnt_srs = train.groupby('date')['totals.transactionRevenue'].agg(['size', 'count'])\ncnt_srs.columns = [\"count\", \"count of non-zero revenue\"]\ncnt_srs = cnt_srs.sort_index()\n#cnt_srs.index = cnt_srs.index.astype('str')\ntrace1 = scatter_plot(cnt_srs[\"count\"], 'red')\ntrace2 = scatter_plot(cnt_srs[\"count of non-zero revenue\"], 'blue')\n\nfig = tools.make_subplots(rows=2, cols=1, vertical_spacing=0.08,\n                          subplot_titles=[\"Date - Count\", \"Date - Non-zero Revenue count\"])\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 2, 1)\nfig['layout'].update(height=800, width=800, paper_bgcolor='rgb(233,233,233)', title=\"Date Plots\")\npy.iplot(fig, filename='date-plots')","5aaa87ef":"test['date'] = test['date'].apply(lambda x: datetime.date(int(str(x)[:4]), int(str(x)[4:6]), int(str(x)[6:])))\ncnt_srs = test.groupby('date')['fullVisitorId'].size()\n\n\ntrace = scatter_plot(cnt_srs, 'red')\n\nlayout = go.Layout(\n    height=400,\n    width=800,\n    paper_bgcolor='rgb(233,233,233)',\n    title='Dates in Test set'\n)\n\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"ActivationDate\")","094f76c4":"# Geographic Information:\n\n# Continent\ncnt_srs = train.groupby('geoNetwork.continent')['totals.transactionRevenue'].agg(['size', 'count'])\ncnt_srs.columns = [\"count\", \"count of non-zero revenue\"]\ncnt_srs = cnt_srs.sort_values(by=\"count\", ascending=False)\ntrace1 = horizontal_bar_chart(cnt_srs[\"count\"].head(10), 'rgba(58, 71, 80, 0.6)')\ntrace2 = horizontal_bar_chart(cnt_srs[\"count of non-zero revenue\"].head(10), 'rgba(58, 71, 80, 0.6)')\n\n# Sub-continent\ncnt_srs = train.groupby('geoNetwork.subContinent')['totals.transactionRevenue'].agg(['size', 'count'])\ncnt_srs.columns = [\"count\", \"count of non-zero revenue\"]\ncnt_srs = cnt_srs.sort_values(by=\"count\", ascending=False)\ntrace3 = horizontal_bar_chart(cnt_srs[\"count\"], 'orange')\ntrace4 = horizontal_bar_chart(cnt_srs[\"count of non-zero revenue\"], 'orange')\n\n# Network domain\ncnt_srs = train.groupby('geoNetwork.networkDomain')['totals.transactionRevenue'].agg(['size', 'count'])\ncnt_srs.columns = [\"count\", \"count of non-zero revenue\"]\ncnt_srs = cnt_srs.sort_values(by=\"count\", ascending=False)\ntrace5 = horizontal_bar_chart(cnt_srs[\"count\"].head(10), 'blue')\ntrace6 = horizontal_bar_chart(cnt_srs[\"count of non-zero revenue\"].head(10), 'blue')\n\n# Creating two subplots\nfig = tools.make_subplots(rows=3, cols=2, vertical_spacing=0.08, horizontal_spacing=0.15, \n                          subplot_titles=[\"Continent - Count\", \"Continent - Non-zero Revenue Count\",\n                                          \"Sub Continent - Count\",  \"Sub Continent - Non-zero Revenue Count\",\n                                          \"Network Domain - Count\", \"Network Domain - Non-zero Revenue Count\"])\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 2, 1)\nfig.append_trace(trace4, 2, 2)\nfig.append_trace(trace5, 3, 1)\nfig.append_trace(trace6, 3, 2)\n\nfig['layout'].update(height=1200, width=800, paper_bgcolor='rgb(233,233,233)', title=\"Geography Plots\")\npy.iplot(fig, filename='geo-plots')\n","02643245":"cnt_srs = train.groupby('trafficSource.source')['totals.transactionRevenue'].agg(['size', 'count'])\ncnt_srs.columns = [\"count\", \"count of non-zero revenue\"]\ncnt_srs = cnt_srs.sort_values(by=\"count\", ascending=False)\ntrace1 = horizontal_bar_chart(cnt_srs[\"count\"].head(10), 'green')\ntrace2 = horizontal_bar_chart(cnt_srs[\"count of non-zero revenue\"].head(10), 'green')\n\n# Sub-continent\ncnt_srs = train.groupby('trafficSource.medium')['totals.transactionRevenue'].agg(['size', 'count'])\ncnt_srs.columns = [\"count\", \"count of non-zero revenue\"]\ncnt_srs = cnt_srs.sort_values(by=\"count\", ascending=False)\ntrace3 = horizontal_bar_chart(cnt_srs[\"count\"], 'purple')\ntrace4 = horizontal_bar_chart(cnt_srs[\"count of non-zero revenue\"], 'purple')\n\n# Creating two subplots\nfig = tools.make_subplots(rows=2, cols=2, vertical_spacing=0.08, horizontal_spacing=0.15, \n                          subplot_titles=[\"Traffic Source - Count\", \"Traffic Source - Non-zero Revenue Count\",\n                                          \"Traffic Source Medium - Count\",  \"Traffic Source Medium - Non-zero Revenue Count\"])\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 2, 1)\nfig.append_trace(trace4, 2, 2)\n\nfig['layout'].update(height=1000, width=800, paper_bgcolor='rgb(233,233,233)', title=\"Traffic Source Plots\")\npy.iplot(fig, filename='traffic-source-plots')","3ffd8868":"\u8bbf\u5ba2\u4eba\u6570\u548c\u5171\u540c\u8bbf\u5ba2\u4eba\u6570\uff1a\n\n\u73b0\u5728\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u8bad\u7ec3\u548c\u6d4b\u8bd5\u96c6\u4e2d\u7684\u4e0d\u540c\u8bbf\u5ba2\u6570\u91cf\uff0c\u4ee5\u53ca\u5171\u540c\u7684\u8bbf\u5ba2\u7684\u6570\u91cf\u3002","d91f6a7e":"\u6700\u540e\u5206\u89e3\u621054\u4e2a\u7279\u5f81, \u5305\u62ec 'channelGrouping', 'date', 'fullVisitorId', 'sessionId',\n       'socialEngagementType', 'visitId', 'visitNumber', 'visitStartTime',\n       'device.browser', 'device.browserSize', 'device.browserVersion',\n       'device.deviceCategory', 'device.flashVersion', 'device.isMobile',\n       'device.language', 'device.mobileDeviceBranding',\n       'device.mobileDeviceInfo', 'device.mobileDeviceMarketingName',\n       'device.mobileDeviceModel', 'device.mobileInputSelector',\n       'device.operatingSystem', 'device.operatingSystemVersion',\n       'device.screenColors', 'device.screenResolution', 'geoNetwork.city',\n       'geoNetwork.cityId', 'geoNetwork.continent', 'geoNetwork.country',\n       'geoNetwork.latitude', 'geoNetwork.longitude', 'geoNetwork.metro',\n       'geoNetwork.networkDomain', 'geoNetwork.networkLocation',\n       'geoNetwork.region', 'geoNetwork.subContinent', 'totals.bounces',\n       'totals.hits', 'totals.newVisits', 'totals.pageviews',\n       'totals.transactionRevenue', 'totals.visits', 'trafficSource.adContent',\n       'trafficSource.adwordsClickInfo.adNetworkType',\n       'trafficSource.adwordsClickInfo.criteriaParameters',\n       'trafficSource.adwordsClickInfo.gclId',\n       'trafficSource.adwordsClickInfo.isVideoAd',\n       'trafficSource.adwordsClickInfo.page',\n       'trafficSource.adwordsClickInfo.slot', 'trafficSource.campaign',\n       'trafficSource.isTrueDirect', 'trafficSource.keyword',\n       'trafficSource.medium', 'trafficSource.referralPath',\n       'trafficSource.source' ","f6ac665b":"### \u8bbe\u5907\u4e0e target \u7684\u5173\u7cfb\n\n\u4e0e\u8bbe\u5907\u76f8\u5173\u7684\u4e09\u4e2a\u91cd\u8981\u5c5e\u6027\u662f\uff1a\n\n- \u6d4f\u89c8\u5668(chrome,firefox, IE)\n- \u64cd\u4f5c\u7cfb\u7edf\uff08mac, linux, windows\uff09\n- \u8bbe\u5907\u7c7b\u578b\uff08\u79fb\u52a8\u7aef\uff0c\u684c\u9762\u7aef\u548c\u5e73\u677f\uff09\n\n\u6211\u4eec\u8003\u5bdf\u8fd9\u4e09\u4e2a\u53d8\u91cf\u548c\u76ee\u6807\u53d8\u91cf\u7684\u5173\u7cfb\u3002","5de56c67":"\n\u5173\u4e8e\u6570\u636e\u96c6\uff1a\n\n\u4e0e\u5927\u591a\u6570\u5176\u4ed6\u7684kaggle\u6bd4\u8d5b\u7c7b\u4f3c\uff0c\u6211\u4eec\u7ed9\u51fa\u4e86\u4e24\u4e2a\u6570\u636e\u96c6\n\n    train.csv\n    test.csv\n\n\u6570\u636e\u96c6\u4e2d\u7684\u6bcf\u4e00\u884c\u90fd\u662f\u5bf9\u5546\u5e97\u7684\u4e00\u6b21\u8bbf\u95ee\u3002\u6211\u4eec\u9884\u6d4b\u6bcf\u4e2a\u7528\u6237\u7684\u6240\u6709\u4ea4\u6613\u603b\u548c\u7684\u81ea\u7136\u5bf9\u6570\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6709\u591a\u4e2a\u5217\u5305\u542b\u4e0d\u540c\u6df1\u5ea6\u7684JSON blob\u3002\u5728\u5176\u4e2d\u4e00\u4e2aJSON\u5217\uff08`total`\uff09\u4e2d\uff0c\u5b50\u5217 `transactionRevenue` \u5305\u542b\u6211\u4eec\u5c1d\u8bd5\u9884\u6d4b\u7684\u6536\u5165\u4fe1\u606f\u3002","d8aba3db":"\u4ece\u4e2d\u53ef\u4ee5\u770b\u51fa\u4e00\u4e2a\u91cd\u8981\u7684\u70b9\uff1a\n\n*The 80\/20 rule has proven true for many businesses\u2013only a small percentage of customers produce most of the revenue. As such, marketing teams are challenged to make appropriate investments in promotional strategies.*","69ead4a4":"\n\u63a8\u8bba\uff1a\n\n- \u6211\u4eec\u7684\u8bad\u7ec3\u6570\u636e\u96c6\u4e2d\u5305\u542b2016\u5e748\u67081\u65e5\u81f32017\u5e747\u670831\u65e5\u7684\u6570\u636e\n- 2016\u5e7411\u6708\uff0c\u867d\u7136\u8bbf\u5ba2\u4eba\u6570\u6709\u6240\u589e\u52a0\uff0c\u4f46\u5728\u6b64\u671f\u95f4\u975e\u96f6\u6536\u5165\u8ba1\u6570\u6ca1\u6709\u589e\u52a0\u3002","cc806442":"\n\u63a8\u8bba\uff1a\n\n- \u5728\u6d41\u91cf\u6765\u6e90\u56fe\u4e2d\uff0c\u5c3d\u7ba1Youtube\u5728\u6570\u636e\u96c6\u4e2d\u5177\u6709\u5927\u91cf\u8ba1\u6570\uff0c\u4f46\u975e\u96f6\u6536\u5165\u8ba1\u6570\u7684\u6570\u91cf\u975e\u5e38\u5c11\u3002\n- Google plex\u7684\u975e\u96f6\u6536\u5165\u8ba1\u6570\u4e0e\u6d41\u91cf\u6765\u6e90\u56fe\u4e2d\u7684\u603b\u8ba1\u6570\u4e4b\u6bd4\u5f88\u9ad8\u3002\n- \u5728\u6d41\u91cf\u6765\u6e90\u5a92\u4f53\u4e0a\uff0c\u4e0e\u201corganic\u201d\u5a92\u4f53\u76f8\u6bd4\uff0c\u201creferral\u201d\u5177\u6709\u66f4\u591a\u7684\u975e\u96f6\u6536\u5165\u8ba1\u6570\u3002","ab893d8c":"\n\u603b\u517112\u4e2a\u53d8\u91cf\uff1a\n\n1. `channelGrouping`  - \u7528\u6237\u901a\u8fc7\u5176\u8fdb\u5165\u5546\u5e97\u7684\u6e20\u9053\u3002\n1. `date` - \u7528\u6237\u8bbf\u95eeStore\u7684\u65e5\u671f\n1. `device` - \u7528\u6237\u8bbf\u95ee Store \u7684\u8bbe\u5907\u7c7b\u578b\n1. `fullVisitorId` - Google Merchandise Store\u7684\u6bcf\u4e2a\u7528\u6237\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002\n1. `geoNetwork`  - \u5305\u542b\u6709\u5173\u7528\u6237\u5730\u7406\u4f4d\u7f6e\u7684\u4fe1\u606f\u3002\n1. `sessionId` - \u6b64\u6b21\u8bbf\u95ee\u5546\u5e97\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002\n1. `socialEngagementType` - Engagement type, either \"Socially Engaged\" or \"Not Socially Engaged\".\n1. `totals` - This section contains aggregate values across the session.\n1. `trafficSource` - This section contains information about the Traffic Source from which the session originated.\n1. `visitId`  - \u6b64\u4f1a\u8bdd\u7684\u6807\u8bc6\u7b26\u3002\u8fd9\u662f\u901a\u5e38\u5b58\u50a8\u4e3a_utmb cookie\u7684\u503c\u7684\u4e00\u90e8\u5206\u3002\u8fd9\u4ec5\u5bf9\u7528\u6237\u800c\u8a00\u662f\u552f\u4e00\u7684\u3002\u5bf9\u4e8e\u5b8c\u5168\u552f\u4e00\u7684ID\uff0c\u60a8\u5e94\u8be5\u4f7f\u7528fullVisitorId\u548cvisitId\u7684\u7ec4\u5408\u3002\n1. `visitNumber`  - \u6b64\u7528\u6237\u7684\u4f1a\u8bdd\u53f7\u3002\u5982\u679c\u8fd9\u662f\u7b2c\u4e00\u4e2a\u4f1a\u8bdd\uff0c\u5219\u5c06\u5176\u8bbe\u7f6e\u4e3a1\u3002\n1. `visitStartTime`  - \u65f6\u95f4\u6233\uff08\u8868\u793a\u4e3aPOSIX\u65f6\u95f4\uff09\u3002\n\n\u5176\u4e2d\u7684\u56db\u4e2a\u53d8\u91cf `device, geoNetwork, totals, trafficSource` \u8fdb\u4e00\u6b65\u5904\u7406\u6210\u591a\u4e2a\u53d8\u91cf\u3002","cc8ece12":"### target \u5f53\u6210\u65f6\u95f4\u5e8f\u5217\n\n","2b5403f1":"# \u53c2\u8003\u8d44\u6599","9513293d":"###  Target variable","fb8a1c6d":"\n\u6211\u4eec\u9884\u6d4b\u6bcf\u4e2a\u7528\u6237\u7684\u6240\u6709\u4ea4\u6613\u603b\u548c\u7684\u81ea\u7136\u5bf9\u6570\u3002\u5bf9\u4e8e\u6d4b\u8bd5\u96c6\u4e2d\u7684\u6bcf\u4e2a\u7528\u6237\uff0c\u76ee\u6807\u662f\uff1a\n\n$$\n\\text{target}^\\text{user} = \\ln \\sum_{i=1}^n \\text{transaction}_i^\\text{user}\n$$\n\n\u770b\u770b\u8fdb\u884c\u6563\u70b9\u56fe\u3002","a61dcefb":"# \u76f8\u5173\u53d8\u91cf\u5206\u6790\n\n*By Jared Gong*\n\n\u672c\u6587\u6863\u4e13\u6ce8\u4e8e\u5206\u6790\u5404\u4e2a\u53d8\u91cf\u3002","f7f7b887":"<h1>Table of Contents<span class=\"tocSkip\"><\/span><\/h1>\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#\u76f8\u5173\u53d8\u91cf\u5206\u6790\" data-toc-modified-id=\"\u76f8\u5173\u53d8\u91cf\u5206\u6790-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;<\/span>\u76f8\u5173\u53d8\u91cf\u5206\u6790<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#\u6bd4\u8d5b\u4ecb\u7ecd\" data-toc-modified-id=\"\u6bd4\u8d5b\u4ecb\u7ecd-1.1\"><span class=\"toc-item-num\">1.1&nbsp;&nbsp;<\/span>\u6bd4\u8d5b\u4ecb\u7ecd<\/a><\/span><\/li><li><span><a href=\"#\u76f8\u5173\u6709\u8da3\u7684\u77e5\u8bc6\u70b9\" data-toc-modified-id=\"\u76f8\u5173\u6709\u8da3\u7684\u77e5\u8bc6\u70b9-1.2\"><span class=\"toc-item-num\">1.2&nbsp;&nbsp;<\/span>\u76f8\u5173\u6709\u8da3\u7684\u77e5\u8bc6\u70b9<\/a><\/span><\/li><li><span><a href=\"#\u8bfb\u5165\u6570\u636e\" data-toc-modified-id=\"\u8bfb\u5165\u6570\u636e-1.3\"><span class=\"toc-item-num\">1.3&nbsp;&nbsp;<\/span>\u8bfb\u5165\u6570\u636e<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Target-variable\" data-toc-modified-id=\"Target-variable-1.3.1\"><span class=\"toc-item-num\">1.3.1&nbsp;&nbsp;<\/span>Target variable<\/a><\/span><\/li><li><span><a href=\"#full-Visitor-ld\" data-toc-modified-id=\"full-Visitor-ld-1.3.2\"><span class=\"toc-item-num\">1.3.2&nbsp;&nbsp;<\/span>full Visitor ld<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#\u57fa\u672c\u6570\u636e\u5206\u6790\" data-toc-modified-id=\"\u57fa\u672c\u6570\u636e\u5206\u6790-1.4\"><span class=\"toc-item-num\">1.4&nbsp;&nbsp;<\/span>\u57fa\u672c\u6570\u636e\u5206\u6790<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#\u76ee\u6807\u53d8\u91cf\" data-toc-modified-id=\"\u76ee\u6807\u53d8\u91cf-1.4.1\"><span class=\"toc-item-num\">1.4.1&nbsp;&nbsp;<\/span>\u76ee\u6807\u53d8\u91cf<\/a><\/span><\/li><li><span><a href=\"#\u8bbe\u5907\u4e0e-target-\u7684\u5173\u7cfb\" data-toc-modified-id=\"\u8bbe\u5907\u4e0e-target-\u7684\u5173\u7cfb-1.4.2\"><span class=\"toc-item-num\">1.4.2&nbsp;&nbsp;<\/span>\u8bbe\u5907\u4e0e target \u7684\u5173\u7cfb<\/a><\/span><\/li><li><span><a href=\"#target-\u5f53\u6210\u65f6\u95f4\u5e8f\u5217\" data-toc-modified-id=\"target-\u5f53\u6210\u65f6\u95f4\u5e8f\u5217-1.4.3\"><span class=\"toc-item-num\">1.4.3&nbsp;&nbsp;<\/span>target \u5f53\u6210\u65f6\u95f4\u5e8f\u5217<\/a><\/span><\/li><li><span><a href=\"#geographic-\u4e0e-target-\u5173\u7cfb\" data-toc-modified-id=\"geographic-\u4e0e-target-\u5173\u7cfb-1.4.4\"><span class=\"toc-item-num\">1.4.4&nbsp;&nbsp;<\/span>geographic \u4e0e target \u5173\u7cfb<\/a><\/span><\/li><li><span><a href=\"#traffic-source-\u548c-target-\u7684\u5173\u7cfb\" data-toc-modified-id=\"traffic-source-\u548c-target-\u7684\u5173\u7cfb-1.4.5\"><span class=\"toc-item-num\">1.4.5&nbsp;&nbsp;<\/span>traffic source \u548c target \u7684\u5173\u7cfb<\/a><\/span><\/li><\/ul><\/li><\/ul><\/li><li><span><a href=\"#\u53c2\u8003\u8d44\u6599\" data-toc-modified-id=\"\u53c2\u8003\u8d44\u6599-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;<\/span>\u53c2\u8003\u8d44\u6599<\/a><\/span><\/li><\/ul><\/div>","5be57f5f":"## \u8bfb\u5165\u6570\u636e\n\n\u672c\u6570\u636e\u6709\u591a\u4e2a\u5217\u5305\u542b\u4e0d\u540c\u6df1\u5ea6\u7684JSON blob\u3002","ec37b823":"### full Visitor ld\n\n\u4e0e\u5ba2\u6237 Id \u76f8\u5173\u7684\u53d8\u91cf\u5305\u62ec `fullVisitorId, sessionId, visitId, visitNumber`\uff0c\u4e00\u4e2a `fullVisitorId` \u5305\u542b\u591a\u4e2a `sessionId`, \u800c\u4e00\u4e2a `sessionId` \u552f\u4e00\u5bf9\u5e94\u4e00\u4e2a `visitId`\uff0c\u4e2a\u6570\u548c `visitNumber` \u76f8\u5173\u3002\n\n> \u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u4ee5 `fullVisitorId` \u4e3a index \u7684\u6570\u636e\u6846\u3002","ce3e006d":"### traffic source \u548c target \u7684\u5173\u7cfb","d17ce362":"## \u76f8\u5173\u6709\u8da3\u7684\u77e5\u8bc6\u70b9","513391ed":"\n\u63a8\u8bba\uff1a\n\n- \u8bbe\u5907\u6d4f\u89c8\u5668\u5206\u5e03\u5728\u975e\u96f6\u6536\u5165\u56fe\u7684\u8ba1\u6570\u548c\u8ba1\u6570\u65b9\u9762\u770b\u8d77\u6765\u76f8\u4f3c\n- \u5728\u8bbe\u5907\u7c7b\u522b\u65b9\u9762\uff0c\u4e0e\u79fb\u52a8\u8bbe\u5907\u76f8\u6bd4\uff0c\u684c\u9762\u4f3c\u4e4e\u5177\u6709\u66f4\u9ad8\u7684\u975e\u96f6\u6536\u5165\u8ba1\u6570\u767e\u5206\u6bd4\u3002\n- \u5728\u8bbe\u5907\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u867d\u7136\u8ba1\u6570\u7684\u6b21\u6570\u591a\u6765\u81eaWindows\uff0c\u4f46\u6536\u5165\u4e0d\u4e3a\u96f6\u7684\u8ba1\u6570\u6570\u91cf\u5bf9\u4e8eMacintosh\u6765\u8bf4\u66f4\u591a\u3002\n- Chrome\u64cd\u4f5c\u7cfb\u7edf\u7684\u975e\u96f6\u6536\u5165\u5360\u6bd4\u4e5f\u8f83\u9ad8\n- \u5728\u79fb\u52a8\u64cd\u4f5c\u7cfb\u7edf\u65b9\u9762\uff0c\u4e0eAndroid\u76f8\u6bd4\uff0ciOS\u62e5\u6709\u66f4\u591a\u7684\u975e\u96f6\u6536\u5165\u8ba1\u6570","6229ae6e":"\n\u63a8\u8bba\uff1a\n\n- \u5728\u975e\u6d32\u5927\u9646\u7684\u60c5\u8282\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u7f8e\u56fd\u7684\u8ba1\u6570\u6570\u91cf\u66f4\u591a\uff0c\u800c\u4e14\u6536\u5165\u975e\u96f6\u7684\u8ba1\u6570\u6700\u591a\n- \u867d\u7136\u4e9a\u6d32\u548c\u6b27\u6d32\u7684\u8ba1\u6570\u5f88\u591a\uff0c\u4f46\u6765\u81ea\u8fd9\u4e9b\u5927\u9646\u7684\u975e\u96f6\u6536\u5165\u6570\u91cf\u76f8\u5bf9\u8f83\u4f4e\u3002\n- \u6211\u4eec\u4e5f\u53ef\u4ee5\u4ece\u6b21\u5927\u9646\u7684\u56fe\u63a8\u65ad\u524d\u4e24\u70b9\u3002\n- \u5982\u679c\u7f51\u7edc\u57df\u662f\u201cunknown.unknown\u201d\u800c\u4e0d\u662f\u201c\uff08\u672a\u8bbe\u7f6e\uff09\u201d\uff0c\u5219\u5177\u6709\u975e\u96f6\u6536\u5165\u7684\u8ba1\u6570\u6570\u91cf\u5f80\u5f80\u8f83\u4f4e\u3002","75a4ce55":"- Simple Exploration+Baseline - GA Customer Revenue\n https:\/\/www.kaggle.com\/sudalairajkumar\/simple-exploration-baseline-ga-customer-revenue","cc23549f":"### \u76ee\u6807\u53d8\u91cf","00c54c15":"## \u6bd4\u8d5b\u4ecb\u7ecd\n\n>> Google Analytics Customer Revenue Prediction \n\n**Objective of the competition:**\n\n\u5728\u672c\u6b21\u7ade\u8d5b\u4e2d\uff0c\u6211\u4eec\u9762\u4e34\u7684\u6311\u6218\u662f\u5206\u6790Google Merchandise Store\uff08\u4e5f\u79f0\u4e3aGStore\uff0c\u9500\u552e\u8c37\u6b4c\u5468\u8fb9\uff09\u5ba2\u6237\u6570\u636e\u96c6\uff0cpredicting the log of the total revenue per user, be aware that not all rows in `test.csv` will correspond to a row in the submission, but all unique `fullVisitorIds` will correspond to a row in the submission.\n\n\n\u6709\u591a\u4e2a\u5217\u5305\u542b\u4e0d\u540c\u6df1\u5ea6\u7684JSON blob\u3002\u5728\u5176\u4e2d\u4e00\u4e2aJSON\u5217\uff08`total`\uff09\u4e2d\uff0c\u5b50\u5217 `transactionRevenue` \u5305\u542b\u6211\u4eec\u5c1d\u8bd5\u9884\u6d4b\u7684\u6536\u5165\u4fe1\u606f\u3002\u8be5\u5b50\u5217\u4ec5\u5b58\u5728\u4e8e\u8bad\u7ec3\u6570\u636e\u4e2d\u3002\u5177\u4f53\u7684\u6765\u8bf4\uff0c\u6211\u4eec\u9884\u6d4b\u6bcf\u4e2a\u7528\u6237\u7684\u6240\u6709\u4ea4\u6613\u603b\u548c\u7684\u81ea\u7136\u5bf9\u6570\u3002\u5bf9\u4e8e\u6d4b\u8bd5\u96c6\u4e2d\u7684\u6bcf\u4e2a\u7528\u6237\uff0c\u76ee\u6807\u662f\uff1a\n\n$$\n\\text{target}^\\text{user} = \\ln \\sum_{i=1}^n \\text{transaction}_i^\\text{user}\n$$","8618e82a":"\n\u5728\u6d4b\u8bd5\u96c6\u4e2d\uff0c\u6211\u4eec\u7684\u65e5\u671f\u4e3a2017\u5e748\u67082\u65e5\u81f32018\u5e744\u670830\u65e5\u3002\u56e0\u6b64\uff0c\u8bad\u7ec3\u548c\u6d4b\u8bd5\u96c6\u4e4b\u95f4\u6ca1\u6709\u5171\u540c\u65e5\u671f\u3002\u56e0\u6b64\uff0c\u5bf9\u6b64\u6570\u636e\u96c6\u8fdb\u884c\u57fa\u4e8e\u65f6\u95f4\u7684\u9a8c\u8bc1\u53ef\u80fd\u662f\u4e2a\u597d\u4e3b\u610f\u3002","e2007fc8":"## \u57fa\u672c\u6570\u636e\u5206\u6790","78333a9d":"### geographic \u4e0e target \u5173\u7cfb"}}