{"cell_type":{"4d8dbe1d":"code","0187649e":"code","2fe4042e":"code","1a99a6f7":"code","d63641f4":"markdown","e08e9b78":"markdown","db3e77e0":"markdown","887e65d1":"markdown"},"source":{"4d8dbe1d":"from keras.datasets.cifar10 import load_data\nfrom keras.utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Dense\nfrom keras.layers import Flatten\nfrom keras.layers import BatchNormalization","0187649e":"(trainX, trainY), (testX, testY) = load_data()\n\ntrainX = trainX.astype('float32') \/ 255\ntestX = testX.astype('float32') \/ 255\n\ntrainY = to_categorical(trainY)\ntestY = to_categorical(testY)","2fe4042e":"model = Sequential()\nmodel.add(Conv2D(32, (3, 3), activation='relu', padding='same', kernel_initializer='he_uniform', input_shape=(32, 32, 3)))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Conv2D(64, (3, 3), activation='relu', padding='same', kernel_initializer='he_uniform'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu', kernel_initializer='he_uniform'))\nmodel.add(BatchNormalization())\nmodel.add(Dense(10, activation='softmax'))","1a99a6f7":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\nhistory = model.fit(trainX, trainY, epochs=3, batch_size=128)\n\n_, acc = model.evaluate(testX, testY, verbose=0)\nprint(acc)","d63641f4":"# Training","e08e9b78":"# CIFAR CNN","db3e77e0":"# Model","887e65d1":"# Data"}}