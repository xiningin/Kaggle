{"cell_type":{"d57c1192":"code","8736da9f":"code","3bfa5f6c":"code","14240008":"code","e6bec967":"code","06973e44":"code","d479d185":"code","e3a2b9c4":"code","7fd58116":"code","cf704535":"code","0688095e":"code","64659b5b":"code","e49d7762":"code","bf9b8f5d":"code","e9412461":"code","9237ac97":"code","3b45d10e":"code","4c8910a8":"code","4d379ff4":"code","ae285adf":"code","d172b379":"code","768647ac":"code","846dc25b":"code","3e812f27":"code","88eedc21":"code","27146206":"code","eb160ecd":"code","9e81bacf":"code","4551112d":"code","3e79e073":"code","4d021a62":"code","5cfde88a":"code","5dbc5072":"code","f467256c":"code","d36025fb":"code","e01c3fb4":"code","8499ef8e":"code","c0ef27a8":"code","153cfcc8":"code","b68ff69e":"code","8d6add4c":"code","525d9b2a":"code","422da07e":"code","a80b5f64":"code","630ed0b5":"code","323e7a2e":"code","fb9ec8cc":"code","31b3e6c7":"code","42470f1c":"code","fb377f24":"code","6a0eeb34":"code","cf41a3c6":"code","8ec1b469":"markdown","3834812b":"markdown","5973abb6":"markdown","e98a5a4a":"markdown","d245dbcf":"markdown","c99eb6d2":"markdown","9908f3bf":"markdown","3b30335f":"markdown","b5d7dd88":"markdown","aa2f7c84":"markdown","ed564392":"markdown","c88572f1":"markdown","6c241d18":"markdown","89454153":"markdown","8ee24447":"markdown","8f9fce5e":"markdown","964e2835":"markdown","d9ea0256":"markdown"},"source":{"d57c1192":"# Importing Libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport ast \nfrom collections import Counter\nimport nltk\nimport wordcloud\nfrom wordcloud import WordCloud","8736da9f":"# Importing Datasets\nmovies=pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv')\ncredits=pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv')","3bfa5f6c":"movies.head(3)","14240008":"credits.head(3)","e6bec967":"print(\"Shape of movies dataset:\",movies.shape)\nprint(\"Shape of credits dataset:\",credits.shape)","06973e44":"movies.info()","d479d185":"credits.info()","e3a2b9c4":"# Joining the two datsets\nmovies=pd.merge( left = movies, right = credits, on='title')","7fd58116":"# Making a copy of movies dataset, using 'movies1' for EDA and 'movies' for recommender system\nmovies1=movies.copy()","cf704535":"#Dropping unncessary columns\nmovies1=movies1.drop(columns=['homepage','tagline','id','overview','status','original_title','movie_id'])","0688095e":"# Duartion of the data\nmovies1['release_date'] = pd.to_datetime(movies1['release_date'])\nprint(movies1['release_date'].max()-movies1['release_date'].min())","64659b5b":"movies1.head(3)","e49d7762":"# Tidying up genre, production_companies and production_countries column\ndef func(obj):\n    List = []\n    for i in ast.literal_eval(obj):\n        List.append(i['name'])\n    return List","bf9b8f5d":"movies1['genres'] = movies1['genres'].apply(func)\nmovies1['production_companies'] = movies1['production_companies'].apply(func)\nmovies1['production_countries'] = movies1['production_countries'].apply(func)","e9412461":"genres = Counter()\nfor i in range(movies1.shape[0]):\n    for j in movies1.genres[i]:\n        genres[j]+=1\nGenres = pd.DataFrame.from_dict(genres, orient='index').reset_index()\nGenres = Genres.rename(columns = {'index': 'Genres' ,0: 'Frequency'})\n\nGenres.loc[Genres['Frequency'] < 200, 'Genres'] = 'Others'\nfig = px.pie(Genres, values='Frequency', names='Genres',width=800,height=500)\nfig.update_layout(\n    title=\"Distribution of Genres\",\n    legend_title=\"Genre\",\n    font=dict(\n        size=14\n    )\n)\nfig.layout.template = 'plotly'\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","9237ac97":"# Word cloud for Genre\nwc = WordCloud(background_color='white',min_font_size = 5, width = 1600, height=900, margin=2)\nwc=wc.fit_words(genres)\nplt.imshow(wc)\nplt.axis('off')\nplt.show()","3b45d10e":"# Top production Comapanies\nprod = Counter()\nfor i in range(movies1.shape[0]):\n    for j in movies1.production_companies[i]:\n        prod[j]+=1\nmovie_prod = pd.DataFrame.from_dict(prod, orient='index').reset_index()\nmovie_prod = movie_prod.rename(columns = {'index': 'Production Company' ,0: 'Frequency'})\nmovie_prod=movie_prod.sort_values(by = ['Frequency'],ascending=False).reset_index().head(15)\nmovie_prod.drop(columns='index',axis=0,inplace=True)\nmovie_prod.style.background_gradient(cmap='RdBu_r')","4c8910a8":"fig = px.bar( movie_prod, x='Production Company',y='Frequency', color ='Production Company',width=1000, height=650) \nfig.update_layout(\n    title=\"Top 15 Production Companies\",\n    xaxis_title=\"Production Companies\",\n    yaxis_title=\"Frequency\",\n    legend_title=\"Production Companies\",\n    font=dict(\n        size=14\n    )\n)\nfig.layout.template = 'plotly'\nfig.show()","4d379ff4":"popular = movies1[['title','popularity']]\npopular=popular.sort_values(by='popularity',ascending=False).reset_index().head(15)\npopular.drop(columns='index',axis=0,inplace=True)\n\nfig = px.scatter( popular, x='title',y='popularity', color ='popularity',size='popularity',width=950, height=650) \nfig.update_layout(\n    title=\"Top 15 popular movies of all time\",\n    xaxis_title=\"Movies\",\n    yaxis_title=\"Popularity\",\n    legend_title=\"Popularity\",\n    font=dict(\n        size=14\n    )\n)\nfig.layout.template = 'plotly'\nfig.show()","ae285adf":"pd.options.mode.chained_assignment = None\nrelease_date=movies1[['title','release_date']]\nrelease_date['release_date']=pd.to_datetime(release_date['release_date'])\nrelease_date['Year']=release_date['release_date'].dt.year\nrelease= release_date.groupby('Year')[['title']].count() \n\nfig = px.bar(release, x=release.index,y='title', color ='title',width=950, height=500) \nfig.update_layout(\n    title=\"No. of movies produced over the years\",\n    xaxis_title=\"Time Period\",\n    yaxis_title=\"Frequency\",\n    legend_title=\"Frequency\",\n    font=dict(\n        size=14\n    )\n)\nfig.layout.template = 'plotly'\nfig.show()","d172b379":"# Top Production Counties\nprod_cont = Counter()\nfor i in range(movies1.shape[0]):\n    for j in movies1.production_countries[i]:\n        prod_cont[j]+=1\nmovie_prod_cont = pd.DataFrame.from_dict(prod_cont, orient='index').reset_index()\nmovie_prod_cont = movie_prod_cont.rename(columns = {'index': 'Production Country' ,0: 'Frequency'})\nmovie_prod_cont=movie_prod_cont.sort_values(by = ['Frequency'],ascending=False).reset_index().head(5)\nmovie_prod_cont.drop(columns='index',axis=0,inplace=True)\nmovie_prod_cont.style.background_gradient(cmap='coolwarm')","768647ac":"lang= movies1.groupby('original_language')[['title']].count() \nlang.loc[lang['title'] < 20, 'title'] = 'Others'\nfig = px.pie(lang, values='title', names=lang.index,width=800,height=500)\nfig.update_layout(\n    title=\"Distribution of Languages\",\n    legend_title=\"Language\",\n    font=dict(\n        size=14\n    )\n)\nfig.layout.template = 'plotly'\nfig.update_traces(textposition='outside', textinfo='percent+label')\nfig.show()","846dc25b":"fig = px.scatter(movies1, y='budget',x='revenue',width=950, height=500) \nfig.update_layout(\n    title=\"No. of movies produced over the years\",\n    xaxis_title=\"Revenue\",\n    yaxis_title=\"Budget\",\n    font=dict(\n        size=14\n    )\n)\nfig.layout.template = 'plotly'\nfig.show()","3e812f27":"budget=movies1[['title','budget','revenue']].sort_values(by='budget',ascending=False).reset_index().head(15)\nbudget.drop(columns='index',axis=0,inplace=True)\n\nfig = go.Figure(\n    data=[\n        go.Bar(\n            name=\"Budget\",\n            x=budget[\"title\"],\n            y=budget[\"budget\"],\n            offsetgroup=0, \n            marker_color='rgb(116, 18, 25)'\n        ),\n        go.Bar(\n            name=\"Revenue\",\n            x=budget[\"title\"],\n            y=budget[\"revenue\"],\n            offsetgroup=1,\n            marker_color='rgb(56, 208, 95)'\n        ),\n    ],\n    layout=go.Layout(\n        title=\"Budget v\/s Revenue of top 15 movies by budget\",\n        xaxis_title=\"Movies\",\n        yaxis_title=\"Price\"\n    )\n)\nfig.show()","88eedc21":"runtime=movies1[['title','runtime']].sort_values(by='runtime',ascending=False).reset_index().head(15)\nruntime.drop(columns='index',axis=0,inplace=True)\nruntime['runtime']=runtime['runtime']\/60\n\nfig=px.line(runtime,y='runtime',x='title')\nfig.update_layout(\n    title=\"Top 5 movies with highest runtime\",\n    yaxis_title=\"Time(in hours)\",\n    xaxis_title=\"Movies\",\n    font=dict(\n        size=14\n    )\n)\nfig.update_traces(mode='markers+lines')\nfig.layout.template = 'plotly'\nfig.show()","27146206":"#Selecting only the useful features\nmovies = movies[['id','title','overview','genres','cast','keywords','crew']]","eb160ecd":"movies.head(3)","9e81bacf":"# Checking null values\nmovies.isnull().sum()","4551112d":"# Dropping Null values\nmovies.dropna(inplace=True) ","3e79e073":"def func(obj):\n    List = []\n    for i in ast.literal_eval(obj):\n        List.append(i['name'])\n    return List","4d021a62":"movies['genres'] = movies['genres'].apply(func)\nmovies['keywords'] = movies['keywords'].apply(func)","5cfde88a":"def func1(obj):\n    List = []\n    counter = 0\n    for i in ast.literal_eval(obj):\n        if counter !=3:\n            List.append(i['name'])\n            counter+=1\n        else:\n            break\n    return List","5dbc5072":"movies['cast'] = movies['cast'].apply(func1)","f467256c":"def func2(obj):\n    List = []\n    for i in ast.literal_eval(obj):\n        if i['job'] == 'Director':\n            List.append(i['name'])\n            break\n    return List","d36025fb":"movies['crew'] = movies['crew'].apply(func2)","e01c3fb4":"# Splitting the text in the overwiew column\nmovies['overview'] = movies['overview'].apply(lambda x:x.split())","8499ef8e":"movies.head()","c0ef27a8":"# Applying a transformation to remove spaces between words \n\nmovies['genres'] = movies['genres'].apply(lambda x:[i.replace(\" \",\"\") for i in x])\nmovies['keywords'] = movies['keywords'].apply(lambda x:[i.replace(\" \",\"\") for i in x])\nmovies['cast'] = movies['cast'].apply(lambda x:[i.replace(\" \",\"\") for i in x])\nmovies['crew'] = movies['crew'].apply(lambda x:[i.replace(\" \",\"\") for i in x])","153cfcc8":"# Making tags column by combining other 5 columns\nmovies['tags'] = movies['overview'] + movies['genres'] + movies['keywords'] + movies['cast'] + movies['crew']","b68ff69e":"movies2=movies[['id','title','tags']]","8d6add4c":"movies2.head(5)","525d9b2a":"pd.options.mode.chained_assignment = None\nmovies2['tags'] = movies2['tags'].apply(lambda x:\" \".join(x))","422da07e":"#lower casing all the alphabets in the tags column\nmovies2['tags'] = movies2['tags'].apply(lambda x:x.lower())","a80b5f64":"#Text Vectorization\nfrom sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer(max_features=5000,stop_words='english')","630ed0b5":"vectors = cv.fit_transform(movies2['tags']).toarray()","323e7a2e":"#Stemming Process\nfrom nltk.stem.porter import PorterStemmer\nps = PorterStemmer()","fb9ec8cc":"#defining the stemming function\ndef stem(text):\n    a=[]\n    for i in text.split():\n        a.append(ps.stem(i))\n    return \" \".join(a)","31b3e6c7":"movies2['tags'] = movies2['tags'].apply(stem)","42470f1c":"# Measuring similarity between Movies using cosine distance\nfrom sklearn.metrics.pairwise import cosine_similarity\nsimilarity = cosine_similarity(vectors)","fb377f24":"def recommend_me(movie):\n    movie_index = movies2[movies2['title'] == movie].index[0]\n    distances = similarity[movie_index]\n    movies_list = sorted(list(enumerate(distances)),reverse=True, key=lambda x:x[1])[1:6]\n    \n    for i in movies_list:\n        print(movies2.iloc[i[0]].title)","6a0eeb34":"recommend_me('Batman') ","cf41a3c6":"recommend_me('Thor') ","8ec1b469":"Warner Bros. has produced highest number of movies, follwed by Universal Pictures and Paramount Pictures.","3834812b":"### Let us try to visualise our data for better understanding!","5973abb6":"We can clearly there is a linear relationship between Budget and Revenue of the movie. Higher the budget, higher will be its revenue.","e98a5a4a":"The following func1() function extracts the top 3 actors of the movie.","d245dbcf":"About 96% of the movies are in English language.","c99eb6d2":"![1_l9dIvOVH5KhpK1LFvgoClA.jpeg](attachment:2b0d4358-3057-4849-87a3-b2964a4a9e3a.jpeg)","9908f3bf":"'Carlos' movie has the highest run time of about 5.5 hr.","3b30335f":"Most of the movies are of Drama, Comedy, Thriller and Action genre.","b5d7dd88":"### There are mainly 2 types of recommendation systems:\n2. **Content-based Filtering:** These suggest recommendations based on the item metadata (movie, product, song, etc). Here, the main idea is if a user likes an item, then the user will also like items similar to it.\n3. **Collaboration-based Filtering:** These systems make recommendations by grouping the users with similar interests. For this system, metadata of the item is not required.\n\n##### In this project, we are building a Content-based recommendation engine for movies.","aa2f7c84":"# Conclusion\nWe have been able to successfully build a movie recommendation engine.","ed564392":"# Exploratory Data Analysis","c88572f1":"Most of the movies were produced after the year 2000.","6c241d18":"### About Dataset\n1. The first dataset, **'tmdb_5000_credits.csv'** contains the following features:-\n* **movie_id** - A unique identifier for each movie.\n* **title** - The title of the movie.\n* **cast** - The name of lead and supporting actors.\n* **crew** - The name of Director, Editor, Composer, Writer etc.\n\n2. The second dataset, **'tmdb_5000_movies.csv'** has the following features:-\n* **budget** - The budget in which the movie was made.\n* **genre** - The genre of the movie, Action, Comedy ,Thriller etc.\n* **homepage** - A link to the homepage of the movie.\n* **id** - This is infact the movie_id as in the first dataset.\n* **keywords** - The keywords or tags related to the movie.\n* **original_language** - The language in which the movie was made.\n* **original_title** - The title of the movie before translation or adaptation.\n* **overview** - A brief description of the movie.\n* **popularity** - A numeric quantity specifying the movie popularity.\n* **production_companies** - The production house of the movie.\n* **production_countries** - The country in which it was produced.\n* **release_date** - The date on which it was released.\n* **revenue** - The worldwide revenue generated by the movie.\n* **runtime** - The running time of the movie in minutes.\n* **status** - \"Released\" or \"Rumored\".\n* **tagline** - Movie's tagline.\n* **title** - Title of the movie.\n* **vote_average** - average ratings the movie recieved.\n* **vote_count** - the count of votes recieved.","89454153":"The movie data is present in the form of lists containing strings, we need to convert the data into a safe and usable structure. Let\u2019s apply the literal_eval() function to the features.","8ee24447":"# Recommendation System\nRecommendation System is a system that seeks to predict or filter preferences according to the user\u2019s choices. Recommendation systems are utilized in a variety of areas including movies, music, news, books, research articles, search queries, social tags, and products in general. Netflix, Amazon, and other companies use recommendation systems to help their users find the right product or movie for them.","8f9fce5e":"![1_VpYW2bpFIpnxAPbXTL27ag.png](attachment:dc3cba22-1c12-4257-8c8f-6a12e587d414.png)","964e2835":"The following func2() function extracts the director of the movie.","d9ea0256":"# Movie Recommender System\nLet's make a recommendation system by using **Content-based filtering** that will suggest movies to the user which are most similar to a particular movies. "}}