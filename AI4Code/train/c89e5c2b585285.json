{"cell_type":{"c2338d19":"code","e0b7e0e4":"code","f0b6cf0f":"code","98fdd74a":"code","f5c6fa1e":"code","b89603ca":"code","3221eb83":"code","498bdff1":"code","9dd72ffc":"code","2e1746ac":"code","742e84e9":"code","2028e6b3":"code","8761caf7":"code","715ff9ad":"code","94e30843":"code","f3bb203a":"code","61a90c1c":"code","3626d767":"code","55ff0d3a":"code","73e345d7":"code","23992418":"code","2d080a14":"code","4864c6a3":"code","be5efbb1":"code","bbd5e69b":"code","6d815425":"code","f0ad4839":"code","0b5619b4":"code","48c7b9c5":"code","d4d66a5b":"code","41eee86f":"code","75bcd33f":"code","f4ef7977":"code","e89714c9":"code","d3c805c3":"code","abcdeff9":"code","38de814a":"code","93542f4e":"code","868e5039":"code","cfd2e7ad":"code","5763c8a5":"code","500bd01b":"code","7719dc1c":"code","cba71eda":"code","8a9462f2":"code","579a2266":"code","31f51341":"code","699dd1f3":"code","0a836354":"code","717c329d":"code","b1d75e12":"code","8048a093":"code","80f6c9ea":"code","80850dc4":"code","75d0bd97":"markdown","e556dadf":"markdown","aa0d89fd":"markdown","48fd32c9":"markdown","196ba6bd":"markdown","aced4529":"markdown","a02a7f49":"markdown","e21086e7":"markdown","cef76d23":"markdown","88676539":"markdown","eb756029":"markdown","388a6e00":"markdown","b9de8da7":"markdown","0df9b09d":"markdown","538e0a76":"markdown","d0c2d604":"markdown","00587a46":"markdown"},"source":{"c2338d19":"# copy the weights and configurations for the pre-trained models","e0b7e0e4":"!pwd","f0b6cf0f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # showing and rendering figures\n# io related\nfrom skimage.io import imread\nimport os\nfrom glob import glob\n# not needed in Kaggle, but required in Jupyter\n%matplotlib inline ","98fdd74a":"!ls -l ..\/input\/rsna-bone-age","f5c6fa1e":"base_bone_dir = os.path.join('..', 'input', 'rsna-bone-age')\nage_df = pd.read_csv(os.path.join(base_bone_dir, 'boneage-training-dataset.csv'))","b89603ca":"age_df.describe","3221eb83":"age_df['path'] = age_df['id'].map(lambda x: os.path.join(base_bone_dir,\n                                                         'boneage-training-dataset', \n                                                         'boneage-training-dataset', \n                                                         '{}.png'.format(x)))\n","498bdff1":"age_df.sample(3)","9dd72ffc":"age_df['exists'] = age_df['path'].map(os.path.exists)\nprint(age_df['exists'].sum(), 'images found of', age_df.shape[0], 'total')","2e1746ac":"age_df['gender'] = age_df['male'].map(lambda x: 'male' if x else 'female')\nage_df['gender'].sample(3)","742e84e9":"boneage_mean = age_df['boneage'].mean()\n#boneage_div = 2*age_df['boneage'].std()\nboneage_div = age_df['boneage'].std()\nprint(boneage_mean)\nprint(boneage_div)","2028e6b3":"age_df['boneage_zscore'] = age_df['boneage'].map(lambda x: (x-boneage_mean)\/boneage_div)","8761caf7":"age_df.dropna(inplace = True)\nage_df.sample(10)","715ff9ad":"age_df['boneage_zscore'].hist(figsize=(10,5))","94e30843":"age_df[['boneage', 'boneage_zscore']].hist(alpha=1.0)","f3bb203a":"age_df['boneage_zscore'].hist(stacked=True, bins=20)","61a90c1c":"age_df['boneage_category'] = pd.cut(age_df['boneage'], 10)\nage_df.sample(10)","3626d767":"from sklearn.model_selection import train_test_split\nraw_train_df, valid_df = train_test_split(age_df, \n                                   test_size = 0.25, \n                                   random_state = 2018,\n                                   stratify = age_df['boneage_category'])\nprint('train', raw_train_df.shape[0], 'validation', valid_df.shape[0])","55ff0d3a":"valid_df.sample(5)","73e345d7":"train_df = raw_train_df.groupby(['boneage_category', 'male']).apply(lambda x: x.sample(500, replace = True)\n                                                      ).reset_index(drop = True)\nprint('New Data Size:', train_df.shape[0], 'Old Size:', raw_train_df.shape[0])\n","23992418":"train_df[['boneage', 'gender']].hist(figsize = (10, 5))","2d080a14":"train_df[['boneage', 'gender']].hist(stacked=True, bins=20)","4864c6a3":"from keras.preprocessing.image import ImageDataGenerator\nfrom keras.applications.vgg16 import preprocess_input\nIMG_SIZE = (384, 384) # slightly smaller than vgg16 normally expects\ncore_idg = ImageDataGenerator(samplewise_center=False, \n                              samplewise_std_normalization=False, \n                              horizontal_flip = True, \n                              vertical_flip = False, \n                              height_shift_range = 0.15, \n                              width_shift_range = 0.15, \n                              rotation_range = 5, \n                              shear_range = 0.01,\n                              fill_mode = 'nearest',\n                              zoom_range=0.25,\n                              preprocessing_function = preprocess_input)","be5efbb1":"def flow_from_dataframe(img_data_gen, in_df, path_col, y_col, **dflow_args):\n    base_dir = os.path.dirname(in_df[path_col].values[0])\n    print('base_dir:', base_dir)\n    print('## Ignore next message from keras, values are replaced anyways')\n    df_gen = img_data_gen.flow_from_directory(base_dir, \n                                     class_mode = 'sparse', #1D integer labels,\n                                     **dflow_args)\n    df_gen.filenames = in_df[path_col].values\n    print('df_gen.filenames:', df_gen.filenames )\n    df_gen.classes = np.stack(in_df[y_col].values)\n    print('df_gen_classes:', df_gen.classes)\n    df_gen.samples = in_df.shape[0]\n    print('df_gen_samples:', df_gen.samples)\n    df_gen.n = in_df.shape[0]\n    print('df_gen.n: ', df_gen.n)\n    df_gen._set_index_array()\n    df_gen.directory = '' # since we have the full path\n    print('Reinserting dataframe: {} images'.format(in_df.shape[0]))\n    return df_gen","bbd5e69b":"c = np.stack(train_df['boneage_zscore'].values)","6d815425":"c.shape","f0ad4839":"type(train_df['path'].values)","0b5619b4":"train_df['path'].values","48c7b9c5":"train_gen = flow_from_dataframe(core_idg, train_df, \n                            path_col = 'path',\n                            y_col = 'boneage_zscore', \n                            target_size = IMG_SIZE,\n                            color_mode = 'rgb',\n                            batch_size = 32)\n\nvalid_gen = flow_from_dataframe(core_idg, valid_df, \n                            path_col = 'path',\n                            y_col = 'boneage_zscore', \n                            target_size = IMG_SIZE,\n                            color_mode = 'rgb',\n                            batch_size = 256) # we can use much larger batches for evaluation","d4d66a5b":"# used a fixed dataset for evaluating the algorithm\ntest_X, test_Y = next(flow_from_dataframe(core_idg, \n                            valid_df, \n                            path_col = 'path',\n                            y_col = 'boneage_zscore', \n                            target_size = IMG_SIZE,\n                            color_mode = 'rgb',\n                            batch_size = 1024)) # one big batch","41eee86f":"print(test_X.shape)\nprint(test_Y.shape)","75bcd33f":"train_gen.dtype","f4ef7977":"train_gen.n","e89714c9":"len(train_gen)","d3c805c3":"train_gen[0][0].shape","abcdeff9":"type(train_gen)","38de814a":"t_x, t_y = next(train_gen)","93542f4e":"t_x.shape","868e5039":"t_y.shape","cfd2e7ad":"fig, m_axs = plt.subplots(2, 4, figsize = (16, 8))\nfor (c_x, c_y, c_ax) in zip(t_x, t_y, m_axs.flatten()):\n    c_ax.imshow(c_x[:,:,0], cmap = 'bone', vmin = -127, vmax = 127)\n    #c_ax.set_title('%2.0f months' % (c_y*boneage_div+boneage_mean))\n    c_ax.axis('off')","5763c8a5":"t_x.shape[1:]","500bd01b":"from keras.applications.vgg16 import VGG16\nfrom keras.layers import GlobalAveragePooling2D, Dense, Dropout, Flatten, Input, Conv2D, multiply, LocallyConnected2D, Lambda\nfrom keras.models import Model\nin_lay = Input(t_x.shape[1:]) #(384, 384, 3)\n#in_lay = (384, 384, 3)\nbase_pretrained_model = VGG16(input_shape =  t_x.shape[1:], include_top = False, weights = 'imagenet')\n#base_pretrained_model = VGG16(input_shape =  (384,3), include_top = False, weights = 'imagenet')\nbase_pretrained_model.trainable = False\npt_depth = base_pretrained_model.get_output_shape_at(0)[-1]\npt_features = base_pretrained_model(in_lay)\nfrom keras.layers import BatchNormalization\nbn_features = BatchNormalization()(pt_features)","7719dc1c":"# here we do an attention mechanism to turn pixels in the GAP on an off\n\nattn_layer = Conv2D(64, kernel_size = (1,1), padding = 'same', activation = 'relu')(bn_features)\nattn_layer = Conv2D(16, kernel_size = (1,1), padding = 'same', activation = 'relu')(attn_layer)\nattn_layer = LocallyConnected2D(1, \n                                kernel_size = (1,1), \n                                padding = 'valid', \n                                activation = 'sigmoid')(attn_layer)\n# fan it out to all of the channels\nup_c2_w = np.ones((1, 1, 1, pt_depth))\nup_c2 = Conv2D(pt_depth, kernel_size = (1,1), padding = 'same', \n               activation = 'linear', use_bias = False, weights = [up_c2_w])\nup_c2.trainable = False\nattn_layer = up_c2(attn_layer)\n\nmask_features = multiply([attn_layer, bn_features])\ngap_features = GlobalAveragePooling2D()(mask_features)\ngap_mask = GlobalAveragePooling2D()(attn_layer)\n# to account for missing values from the attention model\ngap = Lambda(lambda x: x[0]\/x[1], name = 'RescaleGAP')([gap_features, gap_mask])\ngap_dr = Dropout(0.5)(gap)\ndr_steps = Dropout(0.25)(Dense(1024, activation = 'elu')(gap_dr))\nout_layer = Dense(1, activation = 'linear')(dr_steps) # linear is what 16bit did\nbone_age_model = Model(inputs = [in_lay], outputs = [out_layer])\nfrom keras.metrics import mean_absolute_error\ndef mae_months(in_gt, in_pred):\n    return mean_absolute_error(boneage_div*in_gt, boneage_div*in_pred)\n\nbone_age_model.compile(optimizer = 'adam', loss = 'mse',\n                           metrics = [mae_months])\n\nbone_age_model.summary()","cba71eda":"weight_path=\"{}_weights.best.hdf5\".format('bone_age')\nweight_path","8a9462f2":"from keras.callbacks import ModelCheckpoint, LearningRateScheduler, EarlyStopping, ReduceLROnPlateau\nweight_path=\"{}_weights.best.hdf5\".format('bone_age')\n\ncheckpoint = ModelCheckpoint(weight_path, monitor='val_loss', verbose=1, \n                             save_best_only=True, mode='min', save_weights_only = True)\n\n\nreduceLROnPlat = ReduceLROnPlateau(monitor='val_loss', factor=0.8, patience=10, verbose=1, mode='auto', min_delta=0.0001, cooldown=5, min_lr=0.0001)\nearly = EarlyStopping(monitor=\"val_loss\", \n                      mode=\"min\", \n                      patience=5) # probably needs to be more patient, but kaggle time is limited\ncallbacks_list = [checkpoint, early, reduceLROnPlat]","579a2266":"bone_age_model.fit_generator(train_gen, \n                                  validation_data = (test_X, test_Y), \n                                  epochs = 2, #15\n                                  callbacks = callbacks_list,\n                                  steps_per_epoch=10)","31f51341":"!python -c 'import keras; print(keras.__version__)'","699dd1f3":"# load the best version of the model\nbone_age_model.load_weights(weight_path)","0a836354":"# get the attention layer since it is the only one with a single output dim\nfor attn_layer in bone_age_model.layers:\n    c_shape = attn_layer.get_output_shape_at(0)\n    if len(c_shape)==4:\n        if c_shape[-1]==1:\n            print(attn_layer)\n            break","717c329d":"import keras.backend as K\nrand_idx = np.random.choice(range(len(test_X)), size = 6)\nattn_func = K.function(inputs = [bone_age_model.get_input_at(0), K.learning_phase()],\n           outputs = [attn_layer.get_output_at(0)]\n          )\nfig, m_axs = plt.subplots(len(rand_idx), 2, figsize = (8, 4*len(rand_idx)))\n[c_ax.axis('off') for c_ax in m_axs.flatten()]\nfor c_idx, (img_ax, attn_ax) in zip(rand_idx, m_axs):\n    cur_img = test_X[c_idx:(c_idx+1)]\n    attn_img = attn_func([cur_img, 0])[0]\n    img_ax.imshow(cur_img[0,:,:,0], cmap = 'bone')\n    attn_ax.imshow(attn_img[0, :, :, 0], cmap = 'viridis', \n                   vmin = 0, vmax = 1, \n                   interpolation = 'lanczos')\n    real_age = boneage_div*test_Y[c_idx]+boneage_mean\n    img_ax.set_title('Hand Image\\nAge:%2.2fY' % (real_age\/12))\n    pred_age = boneage_div*bone_age_model.predict(cur_img)+boneage_mean\n    attn_ax.set_title('Attention Map\\nPred:%2.2fY' % (pred_age\/12))\nfig.savefig('attention_map.png', dpi = 300)","b1d75e12":"pred_Y = boneage_div*bone_age_model.predict(test_X, batch_size = 32, verbose = True)+boneage_mean\ntest_Y_months = boneage_div*test_Y+boneage_mean","8048a093":"fig, ax1 = plt.subplots(1,1, figsize = (6,6))\nax1.plot(test_Y_months, pred_Y, 'r.', label = 'predictions')\nax1.plot(test_Y_months, test_Y_months, 'b-', label = 'actual')\nax1.legend()\nax1.set_xlabel('Actual Age (Months)')\nax1.set_ylabel('Predicted Age (Months)')","80f6c9ea":"ord_idx = np.argsort(test_Y)\nord_idx = ord_idx[np.linspace(0, len(ord_idx)-1, 8).astype(int)] # take 8 evenly spaced ones\nfig, m_axs = plt.subplots(4, 2, figsize = (16, 32))\nfor (idx, c_ax) in zip(ord_idx, m_axs.flatten()):\n    c_ax.imshow(test_X[idx, :,:,0], cmap = 'bone')\n    \n    c_ax.set_title('Age: %2.1fY\\nPredicted Age: %2.1fY' % (test_Y_months[idx]\/12.0, \n                                                           pred_Y[idx]\/12.0))\n    c_ax.axis('off')\nfig.savefig('trained_img_predictions.png', dpi = 300)","80850dc4":"!rm -rf ~\/.keras","75d0bd97":"# Examine the distribution of age and gender\nAge is shown in months","e556dadf":"!ls -l ..\/input\/rsna-bone-age\/boneage-training-dataset\/boneage-training-dataset | wc -l","aa0d89fd":"raw_train_df.head","48fd32c9":"!mkdir ~\/.keras\n!mkdir ~\/.keras\/models\n!cp ..\/input\/keras-pretrained-models\/*notop* ~\/.keras\/models\/\n!cp ..\/input\/keras-pretrained-models\/imagenet_class_index.json ~\/.keras\/models\/\n!cp ..\/input\/keras-pretrained-models\/resnet50* ~\/.keras\/models\/","196ba6bd":"# Attention Model\nThe basic idea is that a Global Average Pooling is too simplistic since some of the regions are more relevant than others. So we build an attention mechanism to turn pixels in the GAP on an off before the pooling and then rescale (Lambda layer) the results based on the number of pixels. The model could be seen as a sort of 'global weighted average' pooling. There is probably something published about it and it is very similar to the kind of attention models used in NLP.\nIt is largely based on the insight that the winning solution annotated and trained a UNET model to segmenting the hand and transforming it. This seems very tedious if we could just learn attention.","aced4529":"age_df['male'].hist(figsize=(10,5))","a02a7f49":"# Balance the distribution in the training set","e21086e7":"# Overview\nThis is just a simple first attempt at a model using InceptionV3 as a basis and attempting to do regression directly on the age variable using low-resolution images (384x384) in attempt to match the winning solution [here](https:\/\/www.16bit.ai\/blog\/ml-and-future-of-radiology) which scored an ```mae_months``` on the test set of 4.2\n\nThis can be massively improved with \n* high-resolution images\n* better data sampling\n* ensuring there is no leaking between training and validation sets, ```sample(replace = True)``` is real dangerous\n* better target variable (age) normalization\n* pretrained models\n* attention\/related techniques to focus on areas","cef76d23":"df4 = pd.DataFrame({'a': np.random.randn(1000) + 1, 'b': np.random.randn(1000),\n                    'c': np.random.randn(1000) - 1}, columns=['a', 'b', 'c'])\n   \nplt.figure()\n\ndf4.plot.hist(alpha=0.5)","88676539":"# Show Attention\nDid our attention model learn anything useful?","eb756029":"train_gen[0]","388a6e00":"# we don't want normalization for now\nboneage_mean = 0\nboneage_div = 1.0\nprint(boneage_mean)\nprint(boneage_div)","b9de8da7":"train_df.sample(5)","0df9b09d":"# Split Data into Training and Validation","538e0a76":"age_df[['boneage', 'male', 'boneage_zscore']].hist(figsize = (10, 5))\n","d0c2d604":"train_df[['boneage', 'male']].hist(figsize = (10, 5))","00587a46":"# Evaluate the results\nHere we evaluate the results by loading the best version of the model and seeing how the predictions look on the results. We then visualize spec"}}