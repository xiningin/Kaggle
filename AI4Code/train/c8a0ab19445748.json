{"cell_type":{"4137762a":"code","72604954":"code","32b50178":"code","e6724ec8":"code","fe016d0e":"code","91b67910":"code","ab7e7da2":"code","4858186e":"code","eb507cee":"code","e018677c":"code","8a2bdf90":"code","33849584":"code","825edea2":"code","acb85d5c":"code","d582ec0c":"code","c1bd9a44":"code","d081a4f9":"code","e6690881":"code","2770048a":"code","2050cc29":"code","c2e15326":"code","dd3f6bfd":"code","81e8a6a8":"code","f4d6eb43":"code","c29a64ff":"code","047dee69":"code","2c0035f8":"code","bfeb8de1":"code","c12f2ebe":"code","32835049":"code","e2f3e1a0":"code","610ed622":"code","c22b50cf":"code","d07ff8d4":"code","413625d2":"code","66d652f0":"code","987810b7":"code","2d9f793d":"code","f297b12d":"code","e55742fd":"code","2b9de995":"code","656848ba":"code","fddc7d95":"code","03893432":"code","9dc73fbf":"markdown","b571b8b1":"markdown","d3271776":"markdown"},"source":{"4137762a":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns","72604954":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","32b50178":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e6724ec8":"data_train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndata_test = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\n","fe016d0e":"data_train.head(1000)","91b67910":"data_test.head(10)","ab7e7da2":"data_train.shape","4858186e":"data_test.shape","eb507cee":"data_test['SalePrice'] = 0","e018677c":"data = pd.concat([data_train, data_test], axis=0)","8a2bdf90":"data.shape","33849584":"data.columns","825edea2":"data['SalePrice']","acb85d5c":"data.isnull().sum()","d582ec0c":"sns.heatmap(data.isnull(), yticklabels=False, cbar=False, cmap=\"viridis\")","c1bd9a44":"data.info()","d081a4f9":"data['LotFrontage']=data['LotFrontage'].fillna(data['LotFrontage'].mean())\ndata['BsmtFinSF1']=data['BsmtFinSF1'].fillna(data['BsmtFinSF1'].mean())\ndata['BsmtFinSF2']=data['BsmtFinSF2'].fillna(data['BsmtFinSF2'].mean())\ndata['BsmtUnfSF']=data['BsmtUnfSF'].fillna(data['BsmtUnfSF'].mean())\ndata['TotalBsmtSF']=data['TotalBsmtSF'].fillna(data['TotalBsmtSF'].mean())\ndata['GarageCars']=data['GarageCars'].fillna(data['GarageCars'].mean())\ndata['GarageArea']=data['GarageArea'].fillna(data['GarageArea'].mean())","e6690881":"data.drop(['Alley', 'PoolQC', 'Fence', 'MiscFeature'], axis = 1, inplace = True)\ndata.drop(['GarageYrBlt'], axis = 1, inplace = True)","2770048a":"data['MSZoning'] = data['MSZoning'].fillna(data['MSZoning'].mode()[0])\ndata['MasVnrType'] = data['MasVnrType'].fillna(data['MasVnrType'].mode()[0])\ndata['BsmtQual'] = data['BsmtQual'].fillna(data['BsmtQual'].mode()[0])\ndata['BsmtCond'] = data['BsmtCond'].fillna(data['BsmtCond'].mode()[0])\ndata['BsmtExposure'] = data['BsmtExposure'].fillna(data['BsmtExposure'].mode()[0])\ndata['BsmtFinType1'] = data['BsmtFinType1'].fillna(data['BsmtFinType1'].mode()[0])\ndata['BsmtFinType2'] = data['BsmtFinType2'].fillna(data['BsmtFinType2'].mode()[0])\ndata['FireplaceQu'] = data['FireplaceQu'].fillna(data['FireplaceQu'].mode()[0])\ndata['GarageType'] = data['GarageType'].fillna(data['GarageType'].mode()[0])\ndata['GarageFinish'] = data['GarageFinish'].fillna(data['GarageFinish'].mode()[0])\ndata['GarageQual'] = data['GarageQual'].fillna(data['GarageQual'].mode()[0])\ndata['GarageCond'] = data['GarageCond'].fillna(data['GarageCond'].mode()[0])\ndata['SaleType'] = data['SaleType'].fillna(data['SaleType'].mode()[0])\ndata['Utilities'] = data['Utilities'].fillna(data['Utilities'].mode()[0])\ndata['Exterior1st'] = data['Exterior1st'].fillna(data['Exterior1st'].mode()[0])\ndata['Exterior2nd'] = data['Exterior2nd'].fillna(data['Exterior2nd'].mode()[0])\ndata['Electrical'] = data['Electrical'].fillna(data['Electrical'].mode()[0])\ndata['Functional'] = data['Functional'].fillna(data['Functional'].mode()[0])\ndata['MasVnrArea']=data['MasVnrArea'].fillna(data['MasVnrArea'].mode()[0])\ndata['BsmtFullBath']=data['BsmtFullBath'].fillna(data['BsmtFullBath'].mode()[0])\ndata['BsmtHalfBath']=data['BsmtHalfBath'].fillna(data['BsmtHalfBath'].mode()[0])\ndata['KitchenQual']=data['KitchenQual'].fillna(data['KitchenQual'].mode()[0])","2050cc29":"## data.drop(['Id'], axis = 1, inplace = True)\nsol = data_test[\"Id\"]\ndata_test.shape","c2e15326":"data.info()","dd3f6bfd":"data.shape","81e8a6a8":"data.isnull().sum()","f4d6eb43":"sns.heatmap(data.isnull(), yticklabels=False, cbar=False, cmap=\"viridis\")","c29a64ff":"data.corr()","047dee69":"columns=['MSZoning','Street','LotShape','LandContour','Utilities','LotConfig','LandSlope','Neighborhood',\n         'Condition2','BldgType','Condition1','HouseStyle','SaleType',\n        'SaleCondition','ExterCond',\n         'ExterQual','Foundation','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2',\n        'RoofStyle','RoofMatl','Exterior1st','Exterior2nd','MasVnrType','Heating','HeatingQC',\n         'CentralAir',\n         'Electrical','KitchenQual','Functional',\n         'FireplaceQu','GarageType','GarageFinish','GarageQual','GarageCond','PavedDrive']","2c0035f8":"len(columns)","bfeb8de1":"def category(multcolumns):\n    data_final=data\n    i=0\n    for field in multcolumns:\n        \n        df1=pd.get_dummies(data[field],drop_first=True)\n        \n        data.drop([field],axis=1,inplace=True)\n        if i==0:\n            data_final=df1.copy()\n        else:\n            \n            data_final=pd.concat([data_final,df1],axis=1)\n        i=i+1\n       \n        \n    data_final=pd.concat([data,data_final],axis=1)\n        \n    return data_final","c12f2ebe":"data = category(columns)","32835049":"data.shape","e2f3e1a0":"data = data.loc[:,~data.columns.duplicated()]","610ed622":"data.shape","c22b50cf":"data.head()","d07ff8d4":"data_train=data.iloc[:1460,:]\ndata_test=data.iloc[1460:,:]","413625d2":"data_test.drop([\"SalePrice\"],axis=1,inplace=True)","66d652f0":"y_train=data_train['SalePrice']\nX_train=data_train.drop(['SalePrice'],axis=1)","987810b7":"X_train.shape","2d9f793d":"from sklearn.preprocessing import StandardScaler\nscalar = StandardScaler()\nX_train = scalar.fit_transform(X_train)\ndata_test = scalar.transform(data_test)","f297b12d":"from sklearn.linear_model import LinearRegression\nlr=LinearRegression()\nlr.fit(X_train,y_train)","e55742fd":"y_tr=lr.predict(X_train)\nlr.coef_","2b9de995":"lr.intercept_","656848ba":"y_pred = lr.predict(data_test)","fddc7d95":"l1 = sol\nl2 = list(y_pred)\ndf = pd.DataFrame(list(zip(l1, l2)),\n               columns =['id', 'SalePrice'])","03893432":"df.to_csv('result.csv',index=False)\n","9dc73fbf":"## Concatenating both data's","b571b8b1":"## Handling Categorical Features","d3271776":"## Handling Missing Values"}}