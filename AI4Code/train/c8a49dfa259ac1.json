{"cell_type":{"f366bdf6":"code","bf043591":"code","220706c2":"code","eb68e6e1":"code","c1163382":"code","72893544":"code","1e78c48c":"code","fa745ea8":"code","b35eae4f":"code","671960c7":"code","fe308f37":"code","4a0e9b99":"code","b10f0e5c":"code","5fa0f99e":"code","8676b96f":"code","76ba41d0":"code","37cbbb4f":"code","b3697bfa":"code","6af38e89":"code","60c42c00":"code","e2e7b30b":"code","06d59570":"code","ead8d1e7":"code","a17b91ba":"code","7f426bee":"code","3bd52da7":"code","460d3fc5":"code","38581dca":"code","45bb3a1e":"code","9d879100":"code","18c6b995":"code","2d5ea12b":"code","ffe36d65":"markdown","9cda9a26":"markdown","82e4bc2c":"markdown","40e2f9fd":"markdown","d141d717":"markdown","d92f17c9":"markdown","f49a9dff":"markdown","1fc98246":"markdown","854e046d":"markdown","8205f92f":"markdown"},"source":{"f366bdf6":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datatable as dt\n\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\nimport plotly.io as pio\n\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.metrics import accuracy_score, recall_score, roc_auc_score, precision_score, f1_score\n\nimport warnings\nwarnings.filterwarnings('ignore')","bf043591":"def reduce_memory_usage(df):\n    for col in df.columns:\n        col_type = df[col].dtype\n        if col_type != 'object':\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    pass\n        else:\n            df[col] = df[col].astype('category')\n    return df","220706c2":"df_train = pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/train.csv')\nreduce_memory_usage(df_train)\ndf_test = pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/test.csv')\nreduce_memory_usage(df_test)\ndf_subm = pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/sample_submission.csv\")","eb68e6e1":"#Custom Color Palette \ud83c\udfa8\ncustom_colors = [\"#70D6FF\",\"#FF70A6\",\"#FF9770\",\"#FFD670\",\"#E9FF70\"]\ncustomPalette = sns.set_palette(sns.color_palette(custom_colors))\nsns.palplot(sns.color_palette(custom_colors),size=1.2)\nplt.tick_params(axis='both', labelsize=0, length = 0)","c1163382":"df_train_row_count, df_train_column_count = df_train.shape\nprint('Total number of rows:', df_train_row_count)\nprint('Total number of columns:', df_train_column_count)","72893544":"df_test_row_count, df_test_column_count = df_test.shape\nprint('Total number of rows:', df_test_row_count)\nprint('Total number of columns:', df_test_column_count)","1e78c48c":"df_train.head()","fa745ea8":"df_train.describe().T","b35eae4f":"df_train.info()","671960c7":"df_train.isna().sum()","fe308f37":"df_test.isna().sum()","4a0e9b99":"print (\"Unique values are:\\n\",df_train.nunique())","b10f0e5c":"df_train.drop(columns = 'Id', inplace = True)\ndf_test.drop(columns = 'Id', inplace = True)","5fa0f99e":"plt.figure(figsize = (11,11))\ncorr = df_train.corr()\nmask = np.triu(np.ones_like(corr, dtype=bool))\nsns.heatmap(corr, mask=mask, cmap=custom_colors, robust=True, center=0,square=True, linewidths =.6)\nplt.title('Correlation')\nplt.show()","8676b96f":"df_train.drop(columns = ['Soil_Type7','Soil_Type15'], inplace = True)\ndf_test.drop(columns = ['Soil_Type7','Soil_Type15'], inplace = True)","76ba41d0":"df_train.Cover_Type.value_counts()","37cbbb4f":"fig, ax = plt.subplots(figsize=(12,7))\nbar_ch = ax.bar(df_train['Cover_Type'].value_counts().sort_index().index, df_train['Cover_Type'].value_counts().sort_index().values, color=['#70D6FF',\"#FF70A6\",\"#FF9770\",'#70D6FF',\"#FF70A6\",\"#FFD670\",\"#E9FF70\"])\nplt.text(3.9,2650000, 'How cover type is distributed?',{'font': 'Times New Roman','fontsize': 'xx-large','style':'normal'})\nax.tick_params(axis=\"x\", pad=20)\nax.bar_label(bar_ch, [f\"{x*100:2.1f}%\" for x in df_train['Cover_Type'].value_counts().sort_index().values\/len(df_train)])\nax.set_xticklabels(('0','1', '2', '3','4','5','6','7'))\nax.axes.get_xaxis().set_visible(True)\nax.axes.get_yaxis().set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)","b3697bfa":"# define dataset\nX = df_train.drop('Cover_Type', axis=1)\ny = df_train['Cover_Type']","6af38e89":"from sklearn.model_selection import train_test_split\n\n# creating dataset split for prediction\nX_train, X_test , y_train , y_test = train_test_split(X,y,test_size=0.2,random_state=42) # 80-20 split\n\n# Checking split \nprint('X_train:', X_train.shape)\nprint('y_train:', y_train.shape)\nprint('X_test:', X_test.shape)\nprint('y_test:', y_test.shape)","60c42c00":"import xgboost as xgb\nfrom xgboost import XGBClassifier\nmodel1 = XGBClassifier(random_state=42,n_estimators= 500,learning_rate=0.05,eval_metric=\"auc\",\n                      max_depth=8,booster='gbtree',verbosity=0,tree_method = 'gpu_hist',task_type=\"GPU\")\nmodel1.fit(X,y)","e2e7b30b":"predicted1 = model1.predict(X)","06d59570":"m1_cm = confusion_matrix(y, predicted1)\nm1_acc_score = accuracy_score(y, predicted1)\nprint(\"Confusion Matrix\")\nprint(m1_cm)\nsns.heatmap(m1_cm, annot=True,cmap=custom_colors)\nprint(\"\\n\")\nprint(\"Accuracy of XGBoost:\",round(m1_acc_score*100,2),'\\n')\nprint(classification_report(y,predicted1))","ead8d1e7":"y_pred1 = model1.predict(df_test)","a17b91ba":"from xgboost import plot_importance\nfig, ax = plt.subplots(1,1,figsize=(12,12))\nplot_importance(model1, ax=ax, xlabel=None)\nplt.show()","7f426bee":"df_subm['Cover_Type'] = y_pred1\ndf_subm","3bd52da7":"df_subm.to_csv('submission_xgb.csv', index=False)","460d3fc5":"from catboost import CatBoostClassifier\nmodel2 = CatBoostClassifier(random_state=42,max_depth = 3, iterations = 5000,learning_rate=0.005,\n                           early_stopping_rounds=50,task_type=\"GPU\")\nmodel2.fit(X,y, verbose=0)","38581dca":"predicted2 = model2.predict(X)","45bb3a1e":"m2_cm = confusion_matrix(y, predicted2)\nm2_acc_score = accuracy_score(y, predicted2)\nprint(\"Confusion Matrix\")\nprint(m2_cm)\nsns.heatmap(m2_cm, annot=True,cmap=custom_colors)\nprint(\"\\n\")\nprint(\"Accuracy of CatBoost:\",round(m2_acc_score*100,2),'\\n')\nprint(classification_report(y,predicted2))","9d879100":"y_pred2 = model2.predict(df_test)","18c6b995":"df_subm['Cover_Type'] = y_pred2\ndf_subm","2d5ea12b":"df_subm.to_csv('submission_catb.csv', index=False)","ffe36d65":"<h3 style=\"font-family: Arial;background-color:#ff4d6d;color:white;text-align: center;padding-top: 5px;padding-bottom: 5px;border-radius: 15px 50px;letter-spacing: 2px;font-size: 20px\"><strong><centre>XGBOOST <\/centre><\/strong><\/h3>","9cda9a26":"<h3 style=\"font-family: Arial;background-color:#ff4d6d;color:white;text-align: center;padding-top: 5px;padding-bottom: 5px;border-radius: 15px 50px;letter-spacing: 2px;font-size: 20px\"><strong><centre>If you found this notebook useful, please Upvote. Thanks! <\/centre><\/strong><\/h3>","82e4bc2c":"**Observations on this TPS dataset:**\n- `Cover_Type` column is the target variable\n- `Train` dataset has `40,00,000` rows and `56` columns which contains`54` features, `1` target variable `target` and `1` column of `id`\n- `10` features are numerical and rest`44` features are categorical\n- `Test` dataset has `10,00,000` rows and `55` columns which contains`54` features with`1` column of `id`\n- No missing values in train and test dataset\n","40e2f9fd":"<h3 style=\"font-family: Arial;background-color:#ff4d6d;color:white;text-align: center;padding-top: 5px;padding-bottom: 5px;border-radius: 15px 50px;letter-spacing: 2px;font-size: 20px\"><strong><centre>Importing & Reading the dataset \ud83d\udcdd <\/centre><\/strong><\/h3>","d141d717":"<p style=\"font-family: Trebuchet MS; line-height: 2; font-size: 18px; font-weight: bold; letter-spacing: 2px; text-align: center; color: #3a0ca3\">There are no missing values.<\/p>","d92f17c9":"<h3 style=\"font-family: Arial;background-color:#ff4d6d;color:white;text-align: center;padding-top: 5px;padding-bottom: 5px;border-radius: 15px 50px;letter-spacing: 2px;font-size: 20px\"><strong><centre>Importing Libraries & Packages \ud83d\udcda <\/centre><\/strong><\/h3>","f49a9dff":"<p style=\"font-family: Trebuchet MS; line-height: 2; font-size: 14px; font-weight: bold; letter-spacing: 2px; text-align: center; color: #3a0ca3\">Target distribution is imbalanced. Covertype 2 is the most dominated. There is no existence of Covertype 4 and 5.<\/p>","1fc98246":"<h3 style=\"font-family: Arial;background-color:#ff4d6d;color:white;text-align: center;padding-top: 5px;padding-bottom: 5px;border-radius: 15px 50px;letter-spacing: 2px;font-size: 20px\"><strong><centre>Checking for missing values \u270f\ufe0f <\/centre><\/strong><\/h3>","854e046d":"![TPS.jpg](attachment:dce55df4-c6ee-4514-a645-ccd0fd2a58ea.jpg)","8205f92f":"<h3 style=\"font-family: Arial;background-color:#ff4d6d;color:white;text-align: center;padding-top: 5px;padding-bottom: 5px;border-radius: 15px 50px;letter-spacing: 2px;font-size: 20px\"><strong><centre>CATBOOST <\/centre><\/strong><\/h3>"}}