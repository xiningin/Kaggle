{"cell_type":{"db0bf474":"code","e434ee4f":"code","b8416ac4":"code","3a27ce57":"code","a6726a45":"code","26cbfc92":"code","dad27783":"code","ee6c582a":"code","4e7aadbd":"code","6b8d86ac":"code","8b2a4f8e":"code","5765bf4c":"code","7c8e942d":"code","7b0d355f":"code","c32b52a9":"code","fe28c527":"code","004c8f62":"code","e615125c":"code","34de8c3d":"code","b1eab5f4":"markdown","4282b1ee":"markdown","4c522209":"markdown","d4e74b03":"markdown","e962e223":"markdown","3c806a27":"markdown","80a4db00":"markdown","8321cfa2":"markdown"},"source":{"db0bf474":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import ListedColormap\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.neighbors import KNeighborsClassifier, NeighborhoodComponentsAnalysis\nfrom sklearn.decomposition import PCA","e434ee4f":"data = pd.read_csv(\"..\/input\/breast-cancer-wisconsin-data\/data.csv\")\ndata.head()","b8416ac4":"data.drop([\"Unnamed: 32\",\"id\"],inplace=True ,axis=1)\ndata.rename(columns={\"diagnosis\":\"target\"},inplace=True)\nsns.countplot(data[\"target\"])\nprint(data.target.value_counts())","3a27ce57":"data[\"target\"] = [1 if i.strip()==\"M\" else 0 for i in data.target]\ndata.head()\nprint(\"Data Shape\",data.shape)\ndata.info()\ndata.describe()","a6726a45":"#Correlation\ncorr_matrix = data.corr()\nsns.clustermap(corr_matrix, annot= True, fmt = \".2f\",figsize=(18,18))\nplt.title(\"Correlation Between Features\") \nplt.show()","26cbfc92":"threshold = 0.5\nfltr = np.abs(corr_matrix[\"target\"]) > threshold\ncorr_features = corr_matrix.columns[fltr].tolist()\nsns.clustermap(data[corr_features].corr(), annot= True, fmt = \".2f\")\nplt.title(\"Correlation Between Features with Corr Threshold 0.75\") \nplt.show()","dad27783":"#box_plot\ndata_melted = pd.melt(data, id_vars=\"target\",\n                     var_name= \"features\",\n                     value_name=\"value\")\nplt.figure()\nsns.boxplot(x = \"features\", y = \"value\", hue = \"target\", data = data_melted)\nplt.xticks(rotation=90)\nplt.show()","ee6c582a":"#pairplot\nsns.pairplot(data[corr_features],diag_kind=\"kde\",markers = \"+\", hue=\"target\")\nplt.show()","4e7aadbd":"from sklearn.neighbors import LocalOutlierFactor\ny = data.target\nx = data.drop([\"target\"],axis=1)\n\ncolumns = x.columns.tolist()\n\nclf = LocalOutlierFactor()\ny_pred = clf.fit_predict(x)","6b8d86ac":"X_score = clf.negative_outlier_factor_\n\noutlier_score = pd.DataFrame()\noutlier_score[\"score\"] = X_score","8b2a4f8e":"#threshold\nthreshold = -2.5\nfltr = outlier_score[\"score\"] < threshold\noutlier_index = outlier_score[fltr].index.tolist()","5765bf4c":"plt.figure()\nplt.scatter(x.iloc[outlier_index,0],x.iloc[outlier_index,1],color=\"blue\",s = 50,label =\"Outliers\")\nplt.scatter(x.iloc[:,0],x.iloc[:,1],color=\"k\",s = 3,label =\"Data Points\")\n\nradius = (X_score.max()-X_score)\/(X_score.max()-X_score.min())\noutlier_score[\"radius\"] = radius\nplt.scatter(x.iloc[:,0],x.iloc[:,1],s = 1000*radius, edgecolors=\"r\", facecolors = \"none\",label = \"Outlier Scores\")\nplt.legend()\nplt.show()","7c8e942d":"#Drop Outliers\nx = x.drop(outlier_index)\ny = y.drop(outlier_index).values","7b0d355f":"from sklearn.model_selection import train_test_split\n\ntest_size = 0.3\nX_train, X_test, Y_train, Y_test = train_test_split(x,y,test_size = test_size,random_state = 42)","c32b52a9":"#Standardization\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\nX_train_df = pd.DataFrame(X_train,columns=columns)\nX_train_df_describe = X_train_df.describe()\nX_train_df_describe","fe28c527":"#box_plot\nX_train_df[\"target\"] = Y_train\ndata_melted = pd.melt(X_train_df, id_vars=\"target\",\n                     var_name= \"features\",\n                     value_name=\"value\")\nplt.figure()\nsns.boxplot(x = \"features\", y = \"value\", hue = \"target\", data = data_melted)\nplt.xticks(rotation=90)\nplt.show()","004c8f62":"#pairplot\nsns.pairplot(X_train_df[corr_features],diag_kind=\"kde\",markers = \"+\", hue=\"target\")\nplt.show()","e615125c":"knn = KNeighborsClassifier(n_neighbors=2)\nknn.fit(X_train,Y_train)\ny_pred = knn.predict(X_test)\ncm = confusion_matrix(Y_test,y_pred)\nacc = accuracy_score(Y_test,y_pred)\nscore = knn.score(X_test,Y_test)\nprint(\"Score: \",score)\nprint(\"CM: \",cm)\nprint(\"Basic KNN Acc: \",acc)","34de8c3d":"def KNN_Best_Params(x_train,x_test,y_train,y_test):\n    k_range = list(range(1,31))\n    weight_options = [\"uniform\",\"distance\"]\n    print()\n    param_grid = dict(n_neighbors = k_range,weights = weight_options)\n    \n    knn = KNeighborsClassifier()\n    grid = GridSearchCV(knn,param_grid,cv = 10, scoring = \"accuracy\")\n    grid.fit(x_train,y_train)\n    \n    print(\"Best training score: {} with parameters {}\".format(grid.best_score_,grid.best_params_))\n    print()\n    \n    knn = KNeighborsClassifier(**grid.best_params_)\n    knn.fit(x_train,y_train)\n    \n    y_pred_test = knn.predict(x_test)\n    y_pred_train = knn.predict(x_train)\n    \n    cm_test = confusion_matrix(y_test,y_pred_test)\n    cm_train = confusion_matrix(y_train,y_pred_train)\n    \n    acc_test = accuracy_score(y_test,y_pred_test)\n    acc_train = accuracy_score(y_train,y_pred_train)\n    print(\"Test Score: {}, Train Score: {}\".format(acc_test,acc_train))\n    print()\n    print(\"CM Test: \",cm_test)\n    print(\"CM Train: \",cm_train)\n    \n    return grid\ngrid = KNN_Best_Params(X_train,X_test,Y_train,Y_test)","b1eab5f4":"# Outlier Detection\n","4282b1ee":"# EDA","4c522209":"# KNN Best Parameters\n","d4e74b03":"# Library and Data Import","e962e223":"# Breast Cancer Classification","3c806a27":"# Standardization\n\nAs you can see, there are large numerical differences between the data. \n\nTo eliminate these numerical differences, we need to standardization.","80a4db00":"# KNN","8321cfa2":"# Train,Test Split and Standardization\n* If you want your results to be the same as mine, you should set the random_state parameter to be the same as mine."}}