{"cell_type":{"40d5ef06":"code","5a757485":"code","2dc6310d":"code","d556564b":"code","ba8f2c21":"code","3f448061":"code","0934ff37":"code","296facc0":"code","f0c19ec7":"code","27bd15aa":"code","18a780b4":"code","6dbacea4":"code","9aa3e1ab":"code","64baf564":"code","243cc812":"code","92256fbf":"code","0a94ffd0":"code","d44ab7fe":"code","b52f891e":"code","2d06b769":"code","a031f45e":"code","f7e02183":"code","d8cbe233":"code","df2b6da8":"code","29f9c121":"code","bc6709b4":"code","ffa95f16":"code","e24d76e2":"code","e88d6147":"markdown","75ee26eb":"markdown","60a0453e":"markdown","3e86ba03":"markdown","f2edb44e":"markdown","d8b5741b":"markdown","d7c2024a":"markdown","4fbd8b66":"markdown","afd0531a":"markdown","7e1ce729":"markdown"},"source":{"40d5ef06":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport collections\n\nfrom scipy import stats\nfrom datetime import datetime\nfrom tqdm import tqdm\nimport itertools\nimport networkx as nx\nimport community\nimport seaborn as sns\nimport operator\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5a757485":"df_av = pd.read_csv('..\/input\/avocado-prices-2020\/avocado-updated-2020.csv')\ndf_av.head()","2dc6310d":"print(sorted(list(set(df_av['geography'].values))))","d556564b":"delete_list = ['Total U.S.','West','Southeast','South Central',\n               'Plains','California','South Carolina',\n               'Northeast','Great Lakes','Midsouth','West Tex\/New Mexico']\ndf_av = df_av[['date','average_price','type','geography','year']]\ndf_av = df_av[~df_av['geography'].isin(delete_list)]\ndf_av.head()","ba8f2c21":"fig, ax = plt.subplots(figsize=(15,7))\nfig.suptitle('Price Distribution of Avocadoes', fontsize = 22)\nax1 = sns.distplot(df_av[df_av['type']=='conventional'][\"average_price\"], \n                   color = 'b', \n                   label = 'Conventional')\nax2 = sns.distplot(df_av[df_av['type']=='organic'][\"average_price\"], \n                   color = 'g', \n                   label = 'Organic');\nplt.legend(title = 'Avocado Type', title_fontsize = 12);","3f448061":"df_conv_pr = df_av[df_av['type']=='conventional'][\"average_price\"]\ndf_orgn_pr = df_av[df_av['type']=='organic'][\"average_price\"]\n\npd.DataFrame([['Mean', df_conv_pr.mean(),df_orgn_pr.mean()],\n              ['Median', df_conv_pr.median(),df_orgn_pr.median()],\n              ['Std', df_conv_pr.std(),df_orgn_pr.std()],\n              ['Skewness', df_conv_pr.skew(),df_orgn_pr.skew()]],\n              columns = ['Metric','Conventional','Organic'])","0934ff37":"factor_c = sns.factorplot('average_price','geography',hue='year',\n                height = 12,aspect=0.7, \n                palette='rocket', \n                join = False,\n                data = df_av[df_av['type']=='conventional'],\n                );","296facc0":"factor_o = sns.factorplot('average_price','geography',hue='year',\n                height = 12,aspect=0.7, \n                palette='GnBu', \n                join = False,\n                data = df_av[df_av['type']=='organic'],\n                );","f0c19ec7":"def norm_checker(df, year_thresh = 2015):\n    df = df[df['year']>=year_thresh]\n    final_data = []\n    for r in tqdm(sorted(set(df['geography']))):\n        prices_c = df.loc[(df['geography'] == r) & (df['type'] == 'conventional')]['average_price']\n        prices_o = df.loc[(df['geography'] == r) & (df['type'] == 'organic')]['average_price']\n\n        ks_statistic_c, p_value_c = stats.kstest(prices_c, 'norm')\n        ks_statistic_o, p_value_o = stats.kstest(prices_o, 'norm')\n        \n        if p_value_c > 0.05:\n            normal_c = 'normal'\n        else:\n            normal_c = 'not normal'\n            \n        if p_value_o > 0.05:\n            normal_o = 'normal'\n        else:\n            normal_o = 'not normal' \n        \n        data = [r,ks_statistic_c,p_value_c,ks_statistic_o,p_value_o, normal_c,normal_o]\n        final_data.append(data)\n    return pd.DataFrame(final_data, columns = ['Region', 'Kstat_conv','p_conv','Kstat_org','p_org','result_c','result_o'])\nnorms  = norm_checker(df_av, 2016)\nnorms.head()","27bd15aa":"def corr_creator_spearman(df, year_thresh = 2015):\n    df = df[df['year']>=year_thresh]\n    all_regions = sorted(set(df['geography']))\n    region_combos = list(itertools.combinations(all_regions, 2))\n    final_data_c = []\n    final_data_o = []\n    for c in tqdm(region_combos):\n        \n        df.loc[(df['geography'] == c[0]) & (df['type'] == 'organic')][['date','average_price']]\n        df.loc[(df['geography'] == c[1]) & (df['type'] == 'organic')][['date','average_price']]\n        merged_c = pd.merge(df.loc[(df['geography'] == c[0]) & (df['type'] == 'conventional')][['date','average_price']],\n                               df.loc[(df['geography'] == c[1]) & (df['type'] == 'conventional')][['date','average_price']],\n                               on='date')\n        \n        merged_o = pd.merge(df.loc[(df['geography'] == c[0]) & (df['type'] == 'organic')][['date','average_price']],\n                            df.loc[(df['geography'] == c[1]) & (df['type'] == 'organic')][['date','average_price']],\n                            on='date')\n\n        spearmanr_c = stats.spearmanr(merged_c['average_price_x'],\n                                      merged_c['average_price_y'])\n        \n        spearmanr_o = stats.spearmanr(merged_o['average_price_x'],\n                                      merged_o['average_price_y'])\n        \n\n        c_data = [c[0],c[1], round(spearmanr_c[0],6),round(spearmanr_c[1],6)]\n        o_data = [c[0],c[1], round(spearmanr_o[0],6),round(spearmanr_c[1],6) ]\n        \n        final_data_c.append(c_data)\n        final_data_o.append(o_data)\n        \n    df_c = pd.DataFrame(final_data_c, columns = ['region_1','region_2','spearman_corr','significance'])\n    df_o = pd.DataFrame(final_data_o, columns = ['region_1','region_2','spearman_corr','significance'])\n    return [df_c,df_o]\n\ndf_spear = corr_creator_spearman(df_av, 2016)\ndf_spear","18a780b4":"def construct_network_spear(df, signthresh = 0.05, corrthresh = 0.50):\n    av_G = nx.Graph()\n    for i in tqdm(df.iterrows()):\n        if i[1][3] <= signthresh:\n            av_G.add_edge(i[1][0], i[1][1], weight = i[1][2])\n        else:\n            av_G.add_node(i[1][0])\n            av_G.add_node(i[1][1])\n    \n    av_G.remove_edges_from(nx.selfloop_edges(av_G))\n    low_weight_edges = [i[:2]  for i in av_G.edges(data=True) if abs(i[2]['weight']) <= corrthresh]\n    av_G.remove_edges_from(low_weight_edges)\n            \n    return av_G\n\ndef get_network_metrics(df):\n    \n    thresh_list = np.arange(0.1,1,0.05)\n    list_of_graphs = [construct_network_spear(df, 0.05, thresh) for thresh in thresh_list]\n\n    final_list = []\n    for n, g in enumerate(list_of_graphs):\n        GC_nodes = max(nx.connected_components(g), key=len)\n        GC = g.subgraph(GC_nodes).copy()\n        SC = [g.subgraph(i).copy() for i in \n              list(nx.connected_components(g)) if i != GC_nodes]\n        L = g.size() \n        avg_deg = float(L) \/ g.order()  \n        \n        #Try\/Except logic as the function will error if SC == 0\n        try:\n            SC_average_nodes = np.mean([len(i) for i in SC])\n            SC_max_nodes = np.max([len(i) for i in SC])\n            SC_min_nodes = np.min([len(i) for i in SC])\n        except:\n            SC_average_nodes = np.nan\n            SC_max_nodes = np.nan\n            SC_min_nodes = np.nan\n        \n        data_point = (L, avg_deg, len(GC), len(SC), \n                      SC_average_nodes, SC_max_nodes, SC_min_nodes, thresh_list[n])\n        final_list.append(data_point)\n    return pd.DataFrame(final_list,\n                        columns =  ['Size','Ave Degree',\n                                    '# of Nodes in GC','# of SC', 'Mean of SCs',\n                                    'Max of SCs', 'Min of SCs', 'Corr Thresh'])\n\ndf_spear_c_metrics = get_network_metrics(df_spear[0])\ndf_spear_o_metrics = get_network_metrics(df_spear[1])","6dbacea4":"fig, ax = plt.subplots(1,2,figsize=(15,5))\nax[0].set_title('Conventional', fontsize = 17)\nax[0].plot(df_spear_c_metrics['Corr Thresh'],\n           df_spear_c_metrics['# of Nodes in GC'],\n           color = 'blue', linewidth = 1.75)\nax[0].axvline(x=0.70, color='r', linestyle='--')\n\nax[1].set_title('Organic', fontsize = 17)\nax[1].plot(df_spear_o_metrics['Corr Thresh'],\n           df_spear_o_metrics['# of Nodes in GC'],\n           color = 'green', linewidth = 1.75)\nax[1].axvline(x=0.50, color='r', linestyle='--')\nfig.tight_layout();","9aa3e1ab":"df_spear_c_metrics","64baf564":"df_spear_o_metrics","243cc812":"### Create the Spearman Correlation DataFrames\nspear_c_network = construct_network_spear(df_spear[0], 0.05, 0.70)\nspear_o_network = construct_network_spear(df_spear[1], 0.05, 0.50)\n\ndef plot_single_network(network, title):\n    plt.figure(figsize=(15,7)) \n    \n    g_corr = network.subgraph(sorted(nx.connected_components(network), key = len, reverse = True)[0])\n    d = dict(network.degree)\n    d_g = dict(g_corr.degree)\n    plt.suptitle(title, fontsize=20, y=0.95)\n    pos = nx.spring_layout(network, seed = 45);\n    nx.draw_networkx_nodes(network , pos, cmap=plt.cm.RdYlBu_r,\n                           node_color = [val for (node, val) in network.degree()],\n                           node_size=[v * 25 for v in d.values()]);\n    nx.draw_networkx_edges(network , pos, width=0.75, alpha=0.45, \n                            edge_color=\"grey\");\n    nx.draw_networkx_labels(network, pos, font_color  = 'grey')\n    plt.show();\n    \n    plt.figure(figsize=(15,7)) \n    plt.suptitle(f'{title} Giant Component', fontsize=20, y=0.95)\n    pos = nx.spring_layout(g_corr, seed = 45);\n    nx.draw_networkx_nodes(g_corr , pos, cmap=plt.cm.RdYlBu_r,\n                           node_color = [val for (node, val) in g_corr.degree()],\n                           node_size=[v * 25 for v in d_g.values()]);\n    nx.draw_networkx_edges(g_corr , pos, width=0.75, alpha=0.45, \n                            edge_color=\"grey\");\n    nx.draw_networkx_labels(g_corr, pos, font_color  = 'grey')\n    \n    plt.show();\n    \ndef degree_dist(network1, network2):\n    degrees1 = [d for n,d in network1.degree()]\n    degrees2 = [d for n,d in network2.degree()]\n    \n    fig, ax = plt.subplots(figsize=(15,7))\n    fig.suptitle('Degree Distribution of Networks', fontsize = 22)\n    ax1 = sns.histplot(degrees1, edgecolor='white', linewidth=0.75,\n                       color = 'b', kde = False, binwidth=1,alpha = 0.55,\n                       label = 'Conventional')\n    ax2 = sns.histplot(degrees2, edgecolor='white', linewidth=0.75,\n                       color = 'g', kde = False, binwidth=1,alpha = 0.55,\n                       label = 'Organic');\n    plt.legend(title = 'Degree Distribution', title_fontsize = 12);","92256fbf":"def plot_single_network(network, title):\n    fig, ax = plt.subplots(1,2, figsize=(20,7))\n    \n    g_corr = network.subgraph(sorted(nx.connected_components(network), key = len, reverse = True)[0])\n    d = dict(network.degree)\n    d_g = dict(g_corr.degree)\n    ax[0].set_title(title, fontsize=20, y=1.0)\n    pos = nx.spring_layout(network, seed = 45)\n    nx.draw_networkx_nodes(network , pos, cmap=plt.cm.RdYlBu_r,\n                           node_color = [val for (node, val) in network.degree()],\n                           node_size=[v * 25 for v in d.values()], \n                           ax = ax[0]);\n    nx.draw_networkx_edges(network , pos, width=0.75, alpha=0.45, \n                            edge_color=\"grey\", ax = ax[0]);\n    nx.draw_networkx_labels(network, pos, font_color  = 'grey', \n                            ax = ax[0])\n    \n    ax[1].set_title(f'{title} Giant Component', fontsize=20, y=1.0)\n    pos = nx.spring_layout(g_corr, seed = 45);\n    nx.draw_networkx_nodes(g_corr , pos, cmap=plt.cm.RdYlBu_r,\n                           node_color = [val for (node, val) in g_corr.degree()],\n                           node_size=[v * 25 for v in d_g.values()],\n                           ax = ax[1]);\n    nx.draw_networkx_edges(g_corr , pos, width=0.75, alpha=0.45, \n                            edge_color=\"grey\",ax = ax[1]);\n    nx.draw_networkx_labels(g_corr, pos, font_color  = 'grey',\n                            ax = ax[1])\n    \n    fig.tight_layout();","0a94ffd0":"plot_single_network(spear_c_network, 'Conventional Avocado Price Network')","d44ab7fe":"plot_single_network(spear_o_network, 'Organic Avocado Price Network')","b52f891e":"degree_dist(spear_c_network,spear_o_network)","2d06b769":"### Get top 5 nodes with the most degrees\ndeg_c = sorted([(n,d) for n,d in spear_c_network.degree()], key = lambda x:(-x[1], x[0]))[:5]\ndeg_o = sorted([(n,d) for n,d in spear_o_network.degree()], key = lambda x:(-x[1], x[0]))[:5]\n\n### Plot the distribution\nfig, ax = plt.subplots(1,2,figsize=(15,5))\nax[0].set_title('Conventional', fontsize = 17)\nax[0].bar(range(len(deg_c)), \n          [val[1] for val in deg_c],\n          color = 'blue', \n          alpha = 0.50,\n          align='center')\nax[0].set_xticks(range(len(deg_c)))\nax[0].set_xticklabels([val[0] for val in deg_c])\nax[0].tick_params(rotation=45)\n\nax[1].set_title('Organic', fontsize = 17)\nax[1].bar(range(len(deg_o)), \n          [val[1] for val in deg_o],\n          color = 'green', \n          alpha = 0.50,\n          align='center')\nax[1].set_xticks(range(len(deg_o)))\nax[1].set_xticklabels([val[0] for val in deg_o])\nax[1].tick_params(rotation=45)\n\nfig.tight_layout()","a031f45e":"### Get the Clustering Coefficiencts of the Graph\ncc_c = sorted(nx.clustering(spear_c_network).items(), key = lambda x:(-x[1],x[0]))\ncc_o = sorted(nx.clustering(spear_o_network).items(), key = lambda x:(-x[1],x[0]))\n\n### Plot the distribution\nfig, ax = plt.subplots(1,2,figsize=(15,5))\nfig.suptitle('Clustering Coefficients', fontsize=22)\nax[0].set_title('Conventional', fontsize = 17)\nax[0].bar(range(len(cc_c)), \n          [val[1] for val in cc_c],\n          color = 'blue', \n          alpha = 0.50,\n          align='center')\n\nax[1].set_title('Organic', fontsize = 17)\nax[1].bar(range(len(cc_o)), \n          [val[1] for val in cc_o],\n          color = 'green', \n          alpha = 0.50,\n          align='center')\n\nfig.tight_layout();","f7e02183":"### Get the Rich Club Coefficiencts of the Graph\nrc_c = nx.rich_club_coefficient(spear_c_network, normalized=False, seed=42)\nrc_o = nx.rich_club_coefficient(spear_o_network, normalized=False, seed=42)\n\n### Plot the distribution\nfig, ax = plt.subplots(1,2,figsize=(15,5))\nfig.suptitle('Rich Club Coefficients', fontsize=22)\nax[0].set_title('Conventional', fontsize = 17)\nax[0].bar(rc_c.keys(),\n          rc_c.values(),\n          color = 'blue', \n          alpha = 0.50,\n          align='center')\n\nax[1].set_title('Organic', fontsize = 17)\nax[1].bar(rc_o.keys(), \n          rc_o.values(),\n          color = 'green', \n          alpha = 0.50,\n          align='center')\n\nfig.tight_layout();","d8cbe233":"def centrality_plotter(network, title):\n    g_corr = network.subgraph(sorted(nx.connected_components(network), key = len, reverse = True)[0])\n    fig, ax = plt.subplots(2,2, figsize=(20,15))\n    \n    centralities = [list(nx.degree_centrality(g_corr).values()), \n                    list(nx.closeness_centrality(g_corr).values()), \n                    list(nx.betweenness_centrality(g_corr).values()),\n                    list(nx.eigenvector_centrality(g_corr).values())]\n    titles = ['Degree Centrality', 'Closeness Centrality', \n              'Betweenness Centrality', 'Eigenvector Centrality']\n    fig.suptitle(title, fontsize=25)\n    for n, ax in enumerate(ax.flatten()):\n        ax.set_title(titles[n], fontsize = 19);\n        pos = nx.spring_layout(g_corr, seed = 45)\n        \n        nc = nx.draw_networkx_nodes(g_corr, pos, node_size=300, cmap=plt.cm.RdYlBu_r,\n                                    node_color=centralities[n], ax = ax);\n        \n        \n        nx.draw_networkx_edges(g_corr, pos, alpha=0.40, ax = ax);\n        nx.draw_networkx_labels(g_corr, pos, font_color='grey', ax = ax);\n        ax.set_axis_off()\n        plt.colorbar(nc, ax = ax);\n\n    fig.tight_layout()\n    fig.subplots_adjust(top=0.90);","df2b6da8":"centrality_plotter(spear_c_network, 'Conventional Avocado Network')","29f9c121":"centrality_plotter(spear_o_network,'Organic Avocado Network')","bc6709b4":"def community_plotter(network1, network2):\n    titles = ['Conventional Communities','Organic Communities']\n    g_corr_1 = network1.subgraph(sorted(nx.connected_components(network1), key = len, reverse = True)[0])\n    g_corr_2 = network2.subgraph(sorted(nx.connected_components(network2), key = len, reverse = True)[0])\n    \n    partition_1 = community.best_partition(g_corr_1, random_state = 42)\n    partition_2 = community.best_partition(g_corr_2, random_state = 42)\n    \n    identifier = [list(partition_1.values()),\n                  list(partition_2.values())]\n    \n    graphs = [g_corr_1,g_corr_2]\n    \n    fig, ax = plt.subplots(1,2, figsize=(15,7))\n    for n, ax in enumerate(ax.flatten()):\n        ax.set_title(titles[n], fontsize = 17);\n        pos = nx.spring_layout(graphs[n], seed = 45)\n        \n        nc = nx.draw_networkx_nodes(graphs[n], pos, node_size=300, cmap=plt.cm.RdYlBu_r,\n                                    node_color=identifier[n], ax = ax);\n        \n        nx.draw_networkx_edges(graphs[n], pos, alpha=0.40, ax = ax);\n        nx.draw_networkx_labels(graphs[n], pos, font_color='grey', font_size = 9.5, ax = ax);\n        \n    fig.tight_layout();","ffa95f16":"community_plotter(spear_c_network, spear_o_network)","e24d76e2":"### Extract Giant Components\ng_corr_c = spear_c_network.subgraph(sorted(nx.connected_components(spear_c_network), key = len, reverse = True)[0])\ng_corr_o = spear_o_network.subgraph(sorted(nx.connected_components(spear_o_network), key = len, reverse = True)[0])\n\npartition_c = community.best_partition(g_corr_c, random_state = 42)\npartition_o = community.best_partition(g_corr_o, random_state = 42)\n\nfig, ax = plt.subplots(1,2, figsize=(15,5))\nsns.countplot(x = 0, data = pd.DataFrame(partition_c, index = [0]).T.reset_index(), \n              ax = ax[0], palette =['#000fff', '#00D1FF','#Ffa700', '#Ff1f00'] ).set_title(\"Count of Conventional Community Memebers\", fontsize = 15);\nsns.countplot(x = 0, data = pd.DataFrame(partition_o, index = [0]).T.reset_index(), \n              ax = ax[1], palette =['#000fff', '#00D1FF','#f2ff00', '#ff8400','#Ff2900']).set_title(\"Count of Organic Community Memebers\", fontsize = 15);\nax[0].set(xlabel=None)\nax[1].set(xlabel=None)\n\nfig.tight_layout();","e88d6147":"## Exploratory Data Analysis\n### Price Distribution Examination\n\nTo get us started, let us take a look at the distribution of avocado prices. We must consider three things:\n1. There are two kinds of avocadoes `Conventional` and `Organic`.\n2. The data contains values that are aggregates of several regions.\n3. The data contains information on both time and space.\n\nTo address these issues we will do the following:\n1. Filter the data for the aggregate `region` figures.\n2. Disaggregate `Conventional` and `Organic` avocadoes.\n3. Begin with a total price view then drill down to consider `region` and `Date` differences.\n\n### Filter the data for the aggregated region figures\nLooking at the list below we can see several regions that we should omit. Apart from the specific aggregate regions, we shall also only choose the columns that are of interest to us.","75ee26eb":"### Centrality Measurements\nTo better understand the structure of the network, we can look into the four primary centrality measurements. <br>\n1. **Degree Centrality** - based on **number of direct connections** a node has.\n2. **Closeness Centrality** - based on **how short the shortest paths** a node has.\n3. **Betweenness Centrality** - based on **how many shortest paths pass** through node.\n4. **Eigenvector Centrality** -  based on **connectedness of a node's direct neighbors**.\n\nWe can see that for the `Conventional` market, there is a high overlap in their Degree, Closeness, and Eigenvector centralities. Nodes located at the center seemingly having highest centrality values while those at the periphery have much lower values. Betweeness though is concentrated in only a few nodes, studying these nodes should then be of particular importance to market researchers. \n\nThe `Organic` market on the other hand has noticeable overlap in its Degree and Closeness. It seems that each small group of nodes have their own highly connected network. We notice the relative unimportance of the northeastern regions, such as **Albany**, **Northern New England**, and **Boston**. This highlights that the avocado price behaviour in these regions should not be compared to avocado prices in the rest of the United States.Interestingly, we can see that the most in-between nodes sit on the opposite ends of the network. This implies that it can pay off to spend more resources understanding those two particular regions. They may be the key in understanding the behaviour of different markets. ","60a0453e":"### Choosing Threshold Metric\nThe next task is the selection of correlation that we should use to create linkages. Admittedly, the methodology for this is more analytical than theoretical. In choosing the appropriate threshold we have to consider the following:\n1. Networks where nodes exhibiit **low correlation** may not be useful to analysts.\n2. Networks where there is a **highly atomized** are also not useful.\n3. Large networks are **computationally expensive** to run tests and simulations on.\n\nThe below tables show us that the behaviour of the `Conventional` avocado network seems very different from the `Organic` network. This highlight that the difference between the two markets runs deeper than the cost of production and consumer's willingness to pay. On a larger scale, the correlations between regional markets are quite different. Practically speaking, it would be wise to choose the **highest correlation** that still yields a large **Giant Component (the largest portion of the network)**.\n\nFor the `Conventional` market it seems that this figure is **0.70** while for the `Organic` market it is **0.50**. We shall continue the analysis using those specific threshold figures.","3e86ba03":"### Disaggregating the Data using Factor Plots\nWe also have to consider the fact that the prices affected by both the `region` and the `Date` features. To give us a better idea of the differences we can make use of Factor Plots.\n\nImmediately we can see the vast difference between regions with a noticable difference between regions in the southern United States and their northern counterparts. Intuitively, this can be attributed to the greater cost of moving avocadoes from the south to the north. For those who are unfamiliar, **avocadoes** are primarily produced in [**California**](https:\/\/www.agmrc.org\/commodities-products\/fruits\/avocados#:~:text=According%20to%20NASS%2C%20California%20now,followed%20by%20Florida%20and%20Hawaii.) with other varieties being sources from [**Latin America**](https:\/\/en.wikipedia.org\/wiki\/List_of_countries_by_avocado_production). Both centers of production lead to lower prices in the Southerwestern area of the United States.\n\nThe relationship with `Date` is less certain. However, there was a notable jump in the **2017** prices across all `regions` and affecting both `types` of avocadoes. One reason for the spike was a [notable drought in **California**](https:\/\/www.bbc.com\/news\/business-39768480), avocades of course being a particulary drough-sensitive crop. Furthermore, we can see that avocado prices have hit record lows in **2020**.","f2edb44e":"### Measuring Interconnectivity\n\nThe interconnectivity of the graph helps us improve our understanding of the its dynamics. To a lesser extent we get an idea through the **Average Degree** and **Nodes in the Giant Component** metrics, however such measures are quite rough and may not always give the full picutre. Below are two measurements we shall focus on:<br>\n\n**Clustering Coefficient** - The level of interconnectivity a system has based on the level of connectiviy of each node.<br>\n**Rich Club Coefficient** - The level of interconnectivity of the nodes with the most connections with each other. <br>\n\nFor the **Clustering Coefficient**, we can see that the `Conventional` market has a notable decline after the most highly connected nodes. The `Organic` market takes much longer to drop off. This highlights the difference in connectivity level hinted at when visually examining the graph. \n\nThe **Rich Club Coefficient** tells quite an interesting story. The `Conventional` market shows a a coefficient that consistently grows and then shoots up and plateaus at degrees greater than 10. The `Organic` market shows a much slower increase over the number of degrees; however, it exhibits a massive jump also at degrees greater than 10. This highlights the centralized nature of the `Conventional` market, with a regions connectivity with other regions growing consistently as it gains more connections. The decentralized nature of the `Organic` market means that even though a region increases its connectivity with other nodes will not guarantee it suddenly \"joins the club\". It seems that it must connect with a specific hub to gain the benefits.","d8b5741b":"### Checking for Normality\nTo enable a better understanding of the underlying data, we can check for the level of normality of the data. In this case, we check if price distribution can be considered **Normally Distributed**. To do this we make use of the **Kolmogorv-Smirnov** test.\n\nThe hypothesis of the test is:<br>\n\n**H<sub>0<\/sub>** : The Sample Distributions are from the same continuous distribution.\n\n**H<sub>1<\/sub>**  : The Sample Distributions are **NOT** from the same continuous distribution.\n\nBy setting the **Kolmogorv-Smirnov** to `norm`, we are essentially checking whether or not the prices per `region` are normally distributed. In our case, all the prices per region are **NOT Normally Distributed**.","d7c2024a":"### Network Analysis\nExamining the networks, we can see the vast difference between the `Conventional` and `Organic` markets. The `Conventional` markets being far more closely linked, evidenced by their high degree of connectivity despite their higher correlation threshold. `Organic` markets are far more diverse, almost splitting apart at even their lower threshold. \n\nLooking into the degree distribution, we find that the two networks have extremely different underlying structures. In the `Conventional` market we see that the central nodes dominate when it comes to degree of connections. The `Organic` market on the other hand has a much more distributed level of degrees. This implies that prices tend to be stickier in the `Conventional` and far more reactive in the `Organic`. ","4fbd8b66":"### Data Wrangling","afd0531a":"### Price Examination of Conventional and Organic Avocadoes\nWe can see that `Conventional` avocadoes are generally less expensive than `Organic` avocadoes. Likewise, the `Conventional` avocadoes are far more concentrated around their mean. This is highlighted by the differences in their **Means**, **Medians**, **Skewness**, and level of **Standard Deviation** as seen in the below table.\n\nThis could highlight that `Conventional` avocadoes are subject to greater market competition, compelling sellers to keep their prices close to market prices. This greater adherence to market conditions can be seen quantitatively through its lower **Standard Deviation**. `Organic` avocadoes by contrast are both more expensive and have a much more diverse range of values. This can be attributed to the greater product differentiation `Organic` avocadoes have. Additionally, the buyers of `Organic` avocadoes may also be willing to accept a greater variety of prices depending on the conditions the avocadoe was grown in.","7e1ce729":"### Community Detection\nFinally, one of the most useful functions of a network is the construction of communities. In this case we make use of the popular **Louvain Method** which works by optimizing the modularity of the network. \n\nThe below graphs show that the algorithm identifies 4 communities for the `Conventional` market and 5 communities for the `Organic` market. However, the exculsion of **Boston** and **New England** in the `Organic` market seems unnecessary. When selecting a framework to analyze the data it could be beneficial to include them as part of the light blue community. "}}