{"cell_type":{"7ae37111":"code","03d346e7":"code","e3fe3966":"code","ab86a6c2":"code","698b37e4":"code","fb32b6db":"code","7c003088":"code","f14fc8b7":"code","cc8f3def":"code","68ed0f35":"code","ee03277d":"code","e3d95127":"code","febc5b25":"code","0215459e":"code","c9e606d9":"code","3d5edd31":"code","8ccda17e":"code","d60dd1ae":"code","efbde6f6":"code","69d41f24":"markdown","faff6df2":"markdown","184a2e8e":"markdown","f0154bae":"markdown","9fe2e741":"markdown","7c0471cb":"markdown"},"source":{"7ae37111":"import math\nimport pandas as pd\nimport numpy as np \nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport scipy\nfrom tensorflow.python.framework import ops\n\n%matplotlib inline\nplt.rcParams['figure.figsize'] = (5.0, 4.0) # set default size of plots\nplt.rcParams['image.interpolation'] = 'nearest'\nplt.rcParams['image.cmap'] = 'gray'","03d346e7":"dataset = pd.read_csv(\"..\/input\/creditcard.csv\")","e3fe3966":"dataset.head()","ab86a6c2":"dataset.describe()","698b37e4":"print(\"Percent of total transactions that are fraudulent\")\nprint(dataset[\"Class\"].mean()*100)","fb32b6db":"print(\"Losses due to fraud:\")\nprint(\"Total amount lost to fraud\")\nprint(dataset.Amount[dataset.Class == 1].sum())\nprint(\"Mean amount per fraudulent transaction\")\nprint(dataset.Amount[dataset.Class == 1].mean())\nprint(\"Compare to normal transactions:\")\nprint(\"Total amount from normal transactions\")\nprint(dataset.Amount[dataset.Class == 0].sum())\nprint(\"Mean amount per normal transactions\")\nprint(dataset.Amount[dataset.Class == 0].mean())","7c003088":"f, (ax1, ax2) = plt.subplots(2, 1, sharex=True, figsize=(12,4))\n\nbins = 40\n\nax1.hist(dataset.Amount[dataset.Class == 1], bins = bins, normed = True, alpha = 0.75, color = 'red')\nax1.set_title('Fraud')\n\nax2.hist(dataset.Amount[dataset.Class == 0], bins = bins, normed = True, alpha = 0.5, color = 'blue')\nax2.set_title('Not Fraud')\n\nplt.xlabel('Amount')\nplt.ylabel('% of Transactions')\nplt.yscale('log')\nplt.show()","f14fc8b7":"bins = 75\nplt.hist(dataset.Time[dataset.Class == 1], bins = bins, normed = True, alpha = 0.75, label = 'Fraud', color = 'red')\nplt.hist(dataset.Time[dataset.Class == 0], bins = bins, normed = True, alpha = 0.5, label = 'Not Fraud', color = 'blue')\nplt.legend(loc='upper right')\nplt.xlabel('Time (seconds)')\nplt.ylabel('% of ')\nplt.title('Transactions over Time')\nplt.show()","cc8f3def":"Vfeatures = dataset.iloc[:,1:29].columns\nprint(Vfeatures)","68ed0f35":"import matplotlib.gridspec as gridspec\nimport seaborn as sns\nbins = 50\nplt.figure(figsize=(12,28*4))\ngs = gridspec.GridSpec(28, 1)\nfor i, V in enumerate(dataset[Vfeatures]):\n    ax = plt.subplot(gs[i])\n    sns.distplot(dataset[V][dataset.Class == 1], bins = bins, norm_hist = True, color = 'red')\n    sns.distplot(dataset[V][dataset.Class == 0], bins = bins, norm_hist = True, color = 'blue')\n    ax.set_xlabel('')\n    ax.set_title('distributions (w.r.t fraud vs. non-fraud) of feature: ' + str(V))\nplt.show()","ee03277d":"model_features = dataset.iloc[:,1:30].columns\nprint(model_features)\n\n# normalize Amount column\ndataset[\"Amount\"] = (dataset[\"Amount\"]-dataset[\"Amount\"].mean())\/dataset[\"Amount\"].std()\n\n# shuffle and split our data set\ndataset = dataset.sample(frac=1).reset_index(drop=True)\nsplit = np.random.rand(len(dataset)) < 0.95\ndataset_train = dataset[split]\ndataset_test = dataset[~split]\ntrain_x = dataset_train.as_matrix(columns = model_features)\ntrain_y = dataset_train[\"Class\"]\ntest_x = dataset_test.as_matrix(columns = model_features)\ntest_y = dataset_test[\"Class\"]\n\n# check the distribution of fraud between train and test\n# if these are too far off, try shuffling again\nprint(dataset[\"Amount\"].sum())\nprint(train_y.mean()*100)\nprint(test_y.mean()*100)","e3d95127":"''' \nmodify train and test sets for correct dimensions and check it.\ndimensions should be \nX - (# of features, # of examples)\nY - (1, # of examples)\n'''\ntrain_x = train_x.T\ntrain_y = np.reshape(train_y, (1,len(dataset_train)))\ntest_x = test_x.T\ntest_y = np.reshape(test_y, (1,len(dataset_test)))\n\nprint(train_x.shape)\nprint(train_y.shape)\nprint(test_x.shape)\nprint(test_y.shape)","febc5b25":"def create_placeholders(n_x, n_y):\n    # n_x - number of features\n    # n_y - number of classes\n    X = tf.placeholder(tf.float32, shape = (n_x, None))\n    Y = tf.placeholder(tf.float32, shape = (n_y, None))\n    return X, Y","0215459e":"def initialize_parameters():                  \n    W1 = tf.get_variable(\"W1\", [14,29], initializer = tf.contrib.layers.xavier_initializer(seed = 1))\n    b1 = tf.get_variable(\"b1\", [14,1], initializer = tf.zeros_initializer())\n    W2 = tf.get_variable(\"W2\", [7,14], initializer = tf.contrib.layers.xavier_initializer(seed = 1))\n    b2 = tf.get_variable(\"b2\", [7,1], initializer = tf.zeros_initializer())\n    W3 = tf.get_variable(\"W3\", [1,7], initializer = tf.contrib.layers.xavier_initializer(seed = 1))\n    b3 = tf.get_variable(\"b3\", [1,1], initializer = tf.zeros_initializer())\n\n    parameters = {\"W1\": W1,\n                  \"b1\": b1,\n                  \"W2\": W2,\n                  \"b2\": b2,\n                  \"W3\": W3,\n                  \"b3\": b3}\n    \n    return parameters","c9e606d9":"def forward_propagation(X, parameters):\n    # Retrieve the parameters from the dictionary parameters\n    W1 = parameters['W1']\n    b1 = parameters['b1']\n    W2 = parameters['W2']\n    b2 = parameters['b2']\n    W3 = parameters['W3']\n    b3 = parameters['b3']\n\n    Z1 = tf.add(tf.matmul(W1, X), b1)                                   \n    A1 = tf.nn.elu(Z1)                                              \n    Z2 = tf.add(tf.matmul(W2, A1), b2)                                      \n    A2 = tf.nn.elu(Z2)                                         \n    Z3 = tf.add(tf.matmul(W3, A2), b3)\n    \n    return Z3","3d5edd31":"def compute_cost(Z3, Y):\n    logits = tf.transpose(Z3)\n    labels = tf.transpose(Y)\n    cost = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits = logits, labels = labels))\n    \n    return cost","8ccda17e":"def random_mini_batches(X, Y, mini_batch_size = 64, seed = 0):\n    \n    m = X.shape[1]                  # number of training examples\n    mini_batches = []\n    np.random.seed(seed)\n    \n    permutation = list(np.random.permutation(m))\n    shuffled_X = X[:, permutation]\n    shuffled_Y = Y[:, permutation].reshape((Y.shape[0],m))\n\n    # Step 2: Partition (shuffled_X, shuffled_Y). Minus the end case.\n    num_complete_minibatches = math.floor(m\/mini_batch_size) # number of mini batches of size mini_batch_size in your partitionning\n    for k in range(0, num_complete_minibatches):\n        mini_batch_X = shuffled_X[:, k * mini_batch_size : k * mini_batch_size + mini_batch_size]\n        mini_batch_Y = shuffled_Y[:, k * mini_batch_size : k * mini_batch_size + mini_batch_size]\n        mini_batch = (mini_batch_X, mini_batch_Y)\n        mini_batches.append(mini_batch)\n    \n    # Handling the end case (last mini-batch < mini_batch_size)\n    if m % mini_batch_size != 0:\n        mini_batch_X = shuffled_X[:, num_complete_minibatches * mini_batch_size : m]\n        mini_batch_Y = shuffled_Y[:, num_complete_minibatches * mini_batch_size : m]\n        mini_batch = (mini_batch_X, mini_batch_Y)\n        mini_batches.append(mini_batch)\n    \n    return mini_batches","d60dd1ae":"def model(X_train, Y_train, X_test, Y_test, learning_rate = 0.001,\n          num_epochs = 1500, minibatch_size = 1024, print_cost = True):\n    # Implements a three layer layer neural network using tensorflow\n    \n    ops.reset_default_graph()                         # to be able to rerun the model without overwriting tf variables\n    tf.set_random_seed(1)                             # to keep consistent results\n    seed = 3                                          # to keep consistent results\n    (n_x, m) = X_train.shape                          # (n_x: input size, m : number of examples in the train set)\n    n_y = Y_train.shape[0]                            # n_y : output size\n    costs = []                                        # To keep track of the cost\n\n    X, Y = create_placeholders(n_x, n_y)\n\n    parameters = initialize_parameters()\n    Z3 = forward_propagation(X, parameters)\n    cost = compute_cost(Z3, Y)\n    optimizer = tf.train.AdamOptimizer(learning_rate = learning_rate).minimize(cost)\n    \n    init = tf.global_variables_initializer()\n\n    with tf.Session() as sess:\n        sess.run(init)\n        for epoch in range(num_epochs):\n\n            epoch_cost = 0.                       # Defines a cost related to an epoch\n            num_minibatches = int(m \/ minibatch_size) # number of minibatches of size minibatch_size in the train set\n            seed = seed + 1\n            minibatches = random_mini_batches(X_train, Y_train, minibatch_size, seed)\n\n            for minibatch in minibatches:\n                (minibatch_X, minibatch_Y) = minibatch\n                _ , minibatch_cost = sess.run([optimizer, cost], feed_dict={X: minibatch_X, Y: minibatch_Y})\n                epoch_cost += minibatch_cost \/ num_minibatches\n                \n            if print_cost == True and epoch % 100 == 0:\n                print (\"Cost after epoch %i: %f\" % (epoch, epoch_cost))\n            if print_cost == True and epoch % 5 == 0:\n                costs.append(epoch_cost)\n                \n        plt.plot(np.squeeze(costs))\n        plt.ylabel('cost')\n        plt.xlabel('iterations (per tens)')\n        plt.title(\"Learning rate =\" + str(learning_rate))\n        plt.show()\n\n        parameters = sess.run(parameters)\n        print (\"Parameters have been trained!\")\n        correct_prediction = tf.equal(tf.argmax(Z3), tf.argmax(Y))\n\n        accuracy = tf.reduce_mean(tf.cast(correct_prediction, \"float\"))\n\n        print (\"Train Accuracy:\", accuracy.eval({X: X_train, Y: Y_train}))\n        print (\"Test Accuracy:\", accuracy.eval({X: X_test, Y: Y_test}))\n        \n        return parameters","efbde6f6":"model_params = model(train_x, train_y, test_x, test_y)","69d41f24":"This histogram shows the percentage of transactions made over the time period. We see that more fraudulent activity typically happens when there is downtime in overall transactions. If we assume that the data is collected from Day 0 12:01 AM to Day 2 11:59 PM, since it is described as being collected over \"two days\", we see that fraudulent activity is occuring in the very early AM. I am reluctant to use Time as a feature here in our predictive model because there is only two days of data. If there was a month or so of data, this would definitely be useful as a feature if we see a similar pattern over a longer time period.\n\nLet's take a look at the V1,...,V28 features.","faff6df2":"Fraudulent transactions represent only ~0.17% of total transactions. This means that we are aiming to predict anomalous events.","184a2e8e":"# Neural Network Model Implemented in TensorFlow\n\nHere we develop the neural network model we will use to try and predict fraudulent transactions.","f0154bae":"# Data Analysis and Prediction of Credit Card Fraud Detection Data\n\nThis Python notebook contains a data analysis of credit card fraud data from Kaggle (https:\/\/www.kaggle.com\/dalpozz\/creditcardfraud), along with a predictive model aiming at detecting a fraudulent transaction. The predictive model to be developed is a neural network implemented in tensorflow.\n\nFirst we load in the required libraries and the data set we are going to be working with.\n\nThe data set has been anonymized for confidentiality and the features V1,..., V28 are the principal components of a PCA transformation. There is three other variables: Amount, Class, Time. Amount denotes the amount of money of the transaction; Class denotes a fraudulent transaction, 0, or normal transaction, 1; and Time is an integer denoting time since first transaction in seconds. Also note that the entire data set is two days of credit card transactions.\n\n## Data Exploration\n\nSo let's take a look at the structure of the data set and do some analysis.","9fe2e741":"It is interesting to see that while fraudulent transactions make up a small portion of the data set, they have a higher average amount per transaction. It may be useful to try a model with Amount as a feature.","7c0471cb":"This shows the distribution differences of the features when comparing fraudulent transactions to normal transactions. \n\nOk, let's develop a neural network in tensorflow with the goal of predicting credit card fraud. We will use the all the V features and Amount as features in our model. First we need to put our input data sets into the correct format."}}