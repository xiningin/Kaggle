{"cell_type":{"98b22dac":"code","71822c9a":"code","98178d21":"code","12d50052":"code","a0fbb220":"code","9d08e3ed":"code","2d14d3b4":"code","94720eee":"code","bb2817b4":"code","352aa4de":"code","2d9c977c":"code","a6aa7979":"code","1c7750ec":"code","aa5b78c8":"code","d93ee356":"code","5d2a9631":"code","4929eb83":"code","8622a585":"code","856c73e4":"code","32fd5567":"code","15f148fd":"code","7e41a7d4":"code","74236610":"code","f354c4df":"code","da684653":"code","2bc7edf5":"code","7beb2437":"code","d29980dc":"code","6204f059":"code","6393914a":"code","106dfa9a":"code","42aa7a58":"code","469d0550":"code","7858301e":"code","00aecd91":"code","995cc3aa":"markdown","83768977":"markdown","fd3f6fea":"markdown","815b1df2":"markdown","2e410744":"markdown","85932f37":"markdown","7665d59c":"markdown","529038fc":"markdown","16657180":"markdown","64393dd2":"markdown","fa6c0734":"markdown","70101c72":"markdown","4855ed82":"markdown","35259b8e":"markdown","afceca76":"markdown","aab85087":"markdown","410b1dba":"markdown","d7293001":"markdown","6e713495":"markdown"},"source":{"98b22dac":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.style.use(\"fivethirtyeight\")\nplt.style.use(\"dark_background\")\nimport warnings as w\nw.filterwarnings(\"ignore\")\n\ndf=pd.read_csv(\"..\/input\/graduate-admissions\/Admission_Predict.csv\")","71822c9a":"df.head()","98178d21":"#LOR = Letter of Recommendation\n#SOP = Statement of Purpose\ndf.tail()","12d50052":"df.describe()","a0fbb220":"df.shape #checking shape of data set","9d08e3ed":"#count NA values in data frame\ndf.isnull().sum()","2d14d3b4":"#fillinf missing values using fill na\ndf['University Rating'].fillna(df['University Rating'].mean(),inplace=True)","94720eee":"df.info()","bb2817b4":"df.drop([\"Serial No.\"],axis=1,inplace = True)\n\ndf=df.rename(columns = {'Chance of Admit ':'Chance of Admit'})","352aa4de":"plt.scatter(df[\"CGPA\"],df.SOP)\nplt.xlabel(\"CGPA\")\nplt.ylabel(\"SOP\")\nplt.title(\"SOP for CGPA\")\nplt.show()\n","2d9c977c":"df[df.CGPA >= 8.5].plot(kind='scatter', x='GRE Score', y='TOEFL Score',color=\"red\")\nplt.xlabel(\"GRE Score\")\nplt.ylabel(\"TOEFL SCORE\")\nplt.title(\"CGPA>=8.5\")\nplt.grid(True)\nplt.show()","a6aa7979":"df[\"GRE Score\"].plot(kind = 'hist',bins = 200,figsize = (6,6))\nplt.title(\"GRE Scores\")\nplt.xlabel(\"GRE Score\")\nplt.ylabel(\"Frequency\")\nplt.show()","1c7750ec":"\ny = np.array([df[\"TOEFL Score\"].min(),df[\"TOEFL Score\"].mean(),df[\"TOEFL Score\"].max()])\nx = [\"Worst\",\"Average\",\"Best\"]\nplt.bar(x,y)\nplt.title(\"TOEFL Scores\")\nplt.xlabel(\"Level\")\nplt.ylabel(\"TOEFL Score\")\nplt.show()\n","aa5b78c8":"sns.violinplot(x=\"University Rating\",y=\"GRE Score\",data=df)","d93ee356":"sns.violinplot(x=\"University Rating\",y=\"TOEFL Score\",data=df)\nsns.swarmplot(x=\"University Rating\",y=\"TOEFL Score\",data=df,color=\"white\")","5d2a9631":"sns.swarmplot(x=\"University Rating\",y=\"GRE Score\",data=df)","4929eb83":"#integer columns\ncolors = ['#58FAF4','#FE2EF7']\nfig=plt.figure(figsize=(20,8), tight_layout=True)\nplt.suptitle(\"Analysing the Numeric variables\", size=20, weight='bold')\nax=fig.subplot_mosaic(\"\"\"AB\n                         CC\n                         DE\"\"\")\nsns.kdeplot(df[\"GRE Score\"], ax=ax['A'], color=colors[0], fill=True, linewidth=2)\nsns.kdeplot(df['CGPA'], ax=ax['B'], color=colors[1],fill=True, linewidth=2)\nsns.kdeplot(df['TOEFL Score'], ax=ax['C'], color=colors[0],fill=True, linewidth=2)\nsns.kdeplot(df['SOP'], ax=ax['D'], color=colors[1],fill=True, linewidth=2)\nsns.kdeplot(df['Chance of Admit'], ax=ax['E'], color=colors[0],fill=True, linewidth=2)\nax['B'].yaxis.set_visible(False)\nax['E'].yaxis.set_visible(False)\nax['A'].yaxis.label.set_alpha(0.5)\nax['C'].yaxis.label.set_alpha(0.5)\nax['A'].yaxis.label.set_alpha(0.5)\nax['C'].yaxis.label.set_alpha(0.5)\nax['D'].yaxis.label.set_alpha(0.5)\nfor s in ['left','right','top','bottom']:\n    ax['A'].spines[s].set_visible(False)\n    ax['B'].spines[s].set_visible(False)\n    ax['C'].spines[s].set_visible(False)\n    ax['D'].spines[s].set_visible(False)\n    ax['E'].spines[s].set_visible(False)","8622a585":"df_p=sns.PairGrid(df,hue=\"Chance of Admit\")\ndf_p.map(plt.scatter)","856c73e4":"#checking feature dependance on outcome\n\nplt.figure(figsize=(10, 10))\nsns.heatmap(df.corr(), annot=True, linewidths=0.05, fmt= '.2f',cmap=\"magma\")\nplt.show()","32fd5567":"corr=df.corr()\nmask=np.triu(np.ones_like(corr,dtype=bool))\nplt.figure(figsize=(10,10))\nplt.title(\"Correlation Matrix\")\nsns.heatmap(corr,mask=mask,cmap=\"rocket\",linewidths=.5)\nplt.show()","15f148fd":"#finding correlation\nvar = df[df.columns[1:]].corr()['Chance of Admit'][:]\nvar.sort_values(ascending=False)","7e41a7d4":"df.Research.value_counts()","74236610":"sns.barplot(x=\"University Rating\", y=\"Chance of Admit\", hue=\"Research\", data=df)","f354c4df":"\ny = df[\"Chance of Admit\"]\n\nx = df.drop([\"Chance of Admit\"],axis=1)","da684653":"\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.20,random_state=1)\n","2bc7edf5":"#using minmax Scaler for scaling the data in same Scale\nfrom sklearn.preprocessing import MinMaxScaler\nscalerX = MinMaxScaler(feature_range=(0, 1))\nx_train[x_train.columns] = scalerX.fit_transform(x_train[x_train.columns])\nx_test[x_test.columns] = scalerX.transform(x_test[x_test.columns])\n\n","7beb2437":"#fiting the data in Algo\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(x_train,y_train)\n\n\n","d29980dc":"#making prediction on test data \ny_predict = model.predict(x_test)\n\n#Evaluating the model performance\nscore=model.score(x_test, y_test)\nprint(score)\n","6204f059":"print (y_predict[0:5])\n\nprint(y_test[0:5])","6393914a":"from sklearn.ensemble import RandomForestRegressor\nrfr = RandomForestRegressor(n_estimators = 100, random_state = 42)\nrfr.fit(x_train,y_train)\n","106dfa9a":"y_predict_rfr = rfr.predict(x_test) \n\nscore_rfr=rfr.score(x_test, y_test)\nprint(score_rfr)","42aa7a58":"from sklearn.tree import DecisionTreeRegressor\ndtr = DecisionTreeRegressor(random_state = 42)\ndtr.fit(x_train,y_train)\ny_predict_dtr = dtr.predict(x_test) \n\nscore_dtr=dtr.score(x_test, y_test)\nprint(score_dtr)","469d0550":"#evaluating LinearRegression perpormance\ndf = pd.DataFrame({'Actual': y_test, 'Predicted': y_predict})\ndf.head()","7858301e":"from sklearn.metrics import mean_squared_error, r2_score,mean_absolute_error\n\nprint('Mean Absolute Error:', mean_absolute_error(y_test, y_predict))  \nprint('Mean Squared Error:', mean_squared_error(y_test, y_predict))  \nprint('Root Mean Squared Error:', np.sqrt(mean_squared_error(y_test, y_predict)))","00aecd91":"red = plt.scatter(np.arange(0,80,5),y_predict[0:80:5],color = \"red\")\ngreen = plt.scatter(np.arange(0,80,5),y_predict_rfr[0:80:5],color = \"green\")\nblue = plt.scatter(np.arange(0,80,5),y_predict_dtr[0:80:5],color = \"blue\")\nblack = plt.scatter(np.arange(0,80,5),y_test[0:80:5],color = \"yellow\")\nplt.title(\"Comparison of Regression Algorithms\")\nplt.xlabel(\"Index of Candidate\")\nplt.ylabel(\"Chance of Admit\")\nplt.legend((red,green,blue,black),('LR', 'RFR', 'DTR', 'REAL'))\nplt.show()","995cc3aa":"**Partition preprocessed data into a training set(80%) and testing set(20%)**","83768977":"**By the scater plot we can see data distribution**","fd3f6fea":"# Data Visualization","815b1df2":"<center><h4 style=\"font-size:300%;\"><b style=\"color:#FE2EF7;\">Model Buliding<\/b><\/h4><\/center>","2e410744":"**By the histogram we can see frequency of data and identfy outliers**","85932f37":"# Data Pre-Processing","7665d59c":"# Pair Plot","529038fc":"**Swarm Plot**","16657180":"**Data Description**\n\nThe dataset contains several parameters which are considered important during the application for Masters Programs.\nThe parameters included are :\n\n* GRE Scores ( out of 340 )\n* TOEFL Scores ( out of 120 )\n* University Rating ( out of 5 )\n* Statement of Purpose(SOP) and (LOR)Letter of Recommendation Strength ( out of 5 )\n* Undergraduate GPA ( out of 10 )\n* Research Experience ( either 0 or 1 )\n* Chance of Admit ( ranging from 0 to 1 ) **outcome feature to predict**\n","64393dd2":"**By Pair plot we can see data distribution for each feature**","fa6c0734":"**RandomForestRegressor**","70101c72":"**Now we can see LinearRegression give good score**","4855ed82":"# \n<center><h6 style=\"font-size:300%;\"><b style=\"color:#FE2EF7;\">Training the defferent ML Algo<\/b><\/h6><\/center>","35259b8e":"### Thanks","afceca76":"**LinearRegression**","aab85087":"<center><h1 style=\"font-size:300%;\"><b style=\"color:red;\">Welcome! to Admission Predictrion<\/b><\/h1><\/center>","410b1dba":"\n<center><h1 style=\"font-size:300%;\"><b style=\"color:#FE2EF7;\">If you like please do a up vote<\/b><\/h1><\/center>","d7293001":"* We can see all features normally corelated, so we didn't remove any fo them","6e713495":"**here by the bar plot we idintfy worst ,average and best Toefal score**"}}