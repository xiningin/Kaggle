{"cell_type":{"506bcb23":"code","c590691a":"code","cbb7cd20":"code","d094658e":"code","cc53f84a":"code","c55c352f":"code","d1ca0090":"code","0a330923":"code","430dc292":"code","ef28f440":"code","9d641051":"code","e242f8b1":"markdown","d0d04ea8":"markdown"},"source":{"506bcb23":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c590691a":"data=pd.read_csv('..\/input\/chess\/games.csv')","cbb7cd20":"threshold = sum(data.turns) \/ len(data.turns)\nprint(threshold)\n","d094658e":"data[\"turns_level\"]= [ \"high\" if i > threshold else \"low\" for i in data.turns]\nprint(data[\"turns_level\"])\ndata.loc[:20,[\"turns_level\" , \"turns\"]]","cc53f84a":"data_new=data.head()\ndata.tail()\ndata.shape\ndata.info()\nprint(data.columns)\nprint(data_new)","c55c352f":"melted=pd.melt(frame=data_new , id_vars='id' , value_vars=['rated','victory_status' ])\nprint(melted)\n","d1ca0090":"melted.pivot(index='id' , columns='variable' , values='value')","0a330923":"data_1=data[\"victory_status\"].head()\ndata_2=data[\"winner\"].head()\n\ntot_data=pd.concat([data_1 , data_2] , axis=1)\nprint(tot_data)","430dc292":"data[\"turns\"]=data[\"turns\"].astype(\"float\")\ndata.dtypes","ef28f440":"data[\"turns\"].value_counts(dropna=False)\ndata1=data\n\ndata1[\"turns\"].dropna(inplace=True)\nprint(data1)","9d641051":"assert data1[\"turns\"].notnull().all() # if the code has not a null character , it don't return anything.","e242f8b1":"This part is about  concatanating","d0d04ea8":"M\u0130SS\u0130NG VALUE"}}