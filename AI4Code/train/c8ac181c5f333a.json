{"cell_type":{"66f1a5af":"code","25fc41b1":"code","5a7f1281":"code","477ee48e":"code","ce0eafc1":"code","b3f23f60":"code","0b146ade":"code","96d9bc99":"code","dfb95ed1":"code","9dd42b42":"markdown"},"source":{"66f1a5af":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport os\nprint(os.listdir(\"..\/input\"))\nimport nltk\nfrom nltk.corpus import stopwords\n\nfrom sklearn.metrics import f1_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.feature_extraction.text import TfidfVectorizer,CountVectorizer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score\n# Any results you write to the current directory are saved as output.","25fc41b1":"import numpy as np # linear algebra\nimport pandas as pd ","5a7f1281":"train_data = pd.read_csv('..\/input\/train.csv')\ntest_data = pd.read_csv('..\/input\/test.csv')","477ee48e":"train_data.shape","ce0eafc1":"train_text = train_data['question_text']\ntest_text = test_data['question_text']\ntrain_target = train_data['target']\nall_text = train_text.append(test_text)","b3f23f60":"tfidf_vectorizer = TfidfVectorizer()\ntfidf_vectorizer.fit(all_text)\n\ncount_vectorizer = CountVectorizer()\ncount_vectorizer.fit(all_text)\n\ntrain_text_features_cv = count_vectorizer.transform(train_text)\ntest_text_features_cv = count_vectorizer.transform(test_text)\n\ntrain_text_features_tf = tfidf_vectorizer.transform(train_text)\ntest_text_features_tf = tfidf_vectorizer.transform(test_text)","0b146ade":"kfold = KFold(n_splits = 5, shuffle = True, random_state = 2018)\ntest_preds = 0\noof_preds = np.zeros([train_data.shape[0],])\n\nfor i, (train_idx,valid_idx) in enumerate(kfold.split(train_data)):\n    x_train, x_valid = train_text_features_tf[train_idx,:], train_text_features_tf[valid_idx,:]\n    y_train, y_valid = train_target[train_idx], train_target[valid_idx]\n    classifier = LogisticRegression()\n    print('fitting.......')\n    classifier.fit(x_train,y_train)\n    print('predicting......')\n    print('\\n')\n    oof_preds[valid_idx] = classifier.predict_proba(x_valid)[:,1]\n    test_preds += 0.2*classifier.predict_proba(test_text_features_tf)[:,1]","96d9bc99":"pred_train = (oof_preds > .25).astype(np.int)\nf1_score(train_target, pred_train)","dfb95ed1":"submission1 = pd.DataFrame.from_dict({'qid': test_data['qid']})\nsubmission1['prediction'] = (test_preds>0.25).astype(np.int)\n# submission1.to_csv('logistic_submission.csv', index=False)\nsubmission1['prediction'] = (test_preds>0.25)","9dd42b42":"**Basic Logistic Regression**"}}