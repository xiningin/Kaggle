{"cell_type":{"556630ca":"code","c2e39628":"code","575af23b":"code","42bc4171":"code","a7392209":"code","08969859":"code","88659502":"code","2fb18a69":"code","f90db8ea":"code","d5abf6c4":"code","eaab8d01":"code","716a0794":"code","0d9ea03c":"code","34ca51e4":"code","2f929a3c":"code","cb6711a8":"code","c378d094":"code","73a99483":"code","0694908b":"code","3d5b06d3":"code","917ada80":"markdown","69f3c4f3":"markdown","f6bb0092":"markdown","24ef1559":"markdown","ca34bc04":"markdown","98a5b566":"markdown","2d36ceca":"markdown","569e541e":"markdown","149aa537":"markdown","010e2f15":"markdown","092670cf":"markdown","756ee25a":"markdown","bb28c6bb":"markdown"},"source":{"556630ca":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c2e39628":"#Configure necessary imports\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix,accuracy_score,roc_auc_score\nfrom sklearn.linear_model import LogisticRegression\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\nins = pd.read_csv('\/kaggle\/input\/ds-nigeria-2019-challenge-insurance-prediction\/train_data.csv')","575af23b":"#Inspecting the data\nins.head()","42bc4171":"# Encoding Categorical data with discrete numerical values\nto_num = {'V':1,'N':0,'O':0,'U':1,'R':0}\nins.iloc[:,[4,5,6,7]]  =  ins.iloc[:,[4,5,6,7]].applymap(to_num.get)\nins.head()","a7392209":"ins.NumberOfWindows.value_counts()","08969859":"#Conducting String replacement to convert the NumberOfWindows column to int64\nins.NumberOfWindows = ins.NumberOfWindows.str.replace(\".\",\"0\")\nins.NumberOfWindows = ins.NumberOfWindows.str.replace(\">=10\",\"10\")\nins.NumberOfWindows = ins.NumberOfWindows.astype('int64')\nins.NumberOfWindows.value_counts()","88659502":"ins.info()","2fb18a69":"#Imputing missing values, 0 for binary categorical columns, column mode for discrete columns\nins.Garden = ins.Garden.fillna(0)\nins['Building Dimension'] = ins['Building Dimension'].fillna(0)\nins.Date_of_Occupancy = ins.Date_of_Occupancy.fillna(1960)\nins.Date_of_Occupancy = ins.Date_of_Occupancy.astype('int64')\nins.info()","f90db8ea":"plt.hist(ins['Date_of_Occupancy'],bins=25)\nplt.xlabel('Year of Occupancy')\nplt.ylabel('Count')","d5abf6c4":"sns.catplot('YearOfObservation','Date_of_Occupancy',data = ins)\n","eaab8d01":"import numpy as np\nt = ins[['YearOfObservation','Residential',\n       'Building_Painted', 'Building_Fenced']].groupby('YearOfObservation').agg([np.sum])\n\nt","716a0794":"t.plot()","0d9ea03c":"#Splitting Training Data into further train and test sets\nX = ins.iloc[:,1:12]\ny = ins.Claim\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size = .2,random_state = 2)","34ca51e4":"#Model training and evaluation\nlr = LogisticRegression(C = 1,max_iter = 3000,class_weight = 'balanced')\nlr.fit(X_train,y_train)\ny_pred = lr.predict(X_test)\nconfusion_matrix(y_test,y_pred)","2f929a3c":"accuracy_score(y_test,y_pred)","cb6711a8":"roc_auc_score(y_test,y_pred)","c378d094":"\ncoefs = dict(zip(X_train,lr.coef_.reshape(-1,1)))\ncoefs = pd.DataFrame(coefs)\ncoefs = coefs.T\ncoefs.columns = ['Odds']\ncoefs.Odds = np.exp(coefs.Odds)\ncoefs","73a99483":"inst = pd.read_csv(\"\/kaggle\/input\/ds-nigeria-2019-challenge-insurance-prediction\/test_data.csv\")\ninst.head()","0694908b":"#Cleaning the Data as was done in the test set\ninst.iloc[:,[4,5,6,7]]  =  inst.iloc[:,[4,5,6,7]].applymap(to_num.get)\ninst.NumberOfWindows = inst.NumberOfWindows.str.replace(\".\",\"0\")\ninst.NumberOfWindows = inst.NumberOfWindows.str.replace(\">=10\",\"10\")\ninst.NumberOfWindows = inst.NumberOfWindows.astype('int64')\n\ninst.Garden = inst.Garden.fillna(0)\ninst['Building Dimension'] = inst['Building Dimension'].fillna(0)\ninst.Date_of_Occupancy = inst.Date_of_Occupancy.fillna(1960)\n\n#Assigning new explanatory variables to fit the model\nX_test1 = inst.iloc[:,1:12]\n\n#Predicting the requisite values\ny_pred1 = lr.predict(X_test1)\n\n#Creating the result dataframe\nresult = pd.DataFrame(zip(inst['Customer Id'],y_pred1))\nresult.columns = ['Client','Claim']\nresult = result.set_index('Client')","3d5b06d3":"result","917ada80":"From the onset there are numerous issues with the data that have to be dealt with prior to EDA and model building. The first thing we will be taking care of is converting categorical columns into dummy variables.","69f3c4f3":"The final step in the analysis would be to further split the training data into test and train data and fitting a ***Logistic Regression model*** to it. For more interpretable coefficients, I will not be adding Regularization to this model.","f6bb0092":"\n Now that we'vw coded the categorical columns we can proceed to the **NumberOfWindows** column which consists of missing values","24ef1559":"We can see that a good chunk of our buildings are on the newer side built in the second half of the twentieth century with a few outliers. It would be a good idea to look at the spread of the outliers via a categorical strip plot.","ca34bc04":"We can see a downward trend in Residential buildings being insured as well as painted and fenced buildings being insured. This is likely due to the former drop in residential buildings being insured or the Insurance firm taking on more risk.","98a5b566":"With the model being about two thirds accurate we take a look at some of the coefficeints to interpret the odds before proceeding with processing and predicting the test data","2d36ceca":"We see here that fenced, buildings with gardens are more likey to make a claim, also the odds of filing an insurance claim are atleast doubled for claimants who've insured the building the entire time that they've occupied it.","569e541e":"Before we get to the ML model, some basic EDA is in order. Since we're dealing with Insurance Claims for properties as the Predictor in this case, it would be a good idea to look at the distribution of how old these buildings are via the **Date_of_Occupancy** column","149aa537":"We see the presence of a dozen or so outliers from the seventeenth and eighteenth centuries.\n\nLastly prior to the regression, it would be useful to take a look at some of the other caterogical variables like Residential, Building Painted etc. to capture any chronological trends in the Insurance Pool","010e2f15":"We assume that buildings with greater than 10 windows have exactly 10 windows for the sake of model simplicity before proceeding with String substituion. We will also convert the DateofOccupancy column to Int64 since years are best captured by integers.","092670cf":"At this point in the Data Cleaning stage, we've still got missing values, so we take a look via the .info() method at exactly which columns we're going to be working on.","756ee25a":"The code for imputation of missing values to complete the dataset is below:","bb28c6bb":"Lastly we import the test data and compile our results in the result dataframe as specified by the sample"}}