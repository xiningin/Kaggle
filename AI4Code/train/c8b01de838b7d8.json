{"cell_type":{"e8a04574":"code","41000da0":"code","3f394093":"code","c115a2a7":"code","954ac76f":"code","49e7d672":"code","2ca22940":"code","9fb5140f":"code","ca6affa9":"code","be323b64":"code","e2925b37":"code","1960d2fb":"code","7cd2fcfc":"code","17820289":"code","1cdc4e8d":"code","6cf27ba2":"code","9f70ea5c":"code","c6c221f8":"code","66109185":"code","98e3cade":"code","c9cf3471":"code","8974cb23":"code","634321dc":"code","41ef8078":"code","f305e925":"code","042c8133":"code","e5a41677":"code","02d5291f":"markdown","8ff41e19":"markdown","92ed9653":"markdown","3d19f571":"markdown","fcc5ee50":"markdown","c379d754":"markdown","7d1584e0":"markdown","c449953a":"markdown","6c981739":"markdown","0ae38755":"markdown","e11d142b":"markdown"},"source":{"e8a04574":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","41000da0":"train_df = pd.read_csv(\"\/kaggle\/input\/facial-keypoints-detection\/training\/training.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/facial-keypoints-detection\/test\/test.csv\")\nsample_submit_df = pd.read_csv(\"\/kaggle\/input\/facial-keypoints-detection\/SampleSubmission.csv\")\nlookup_df = pd.read_csv(\"\/kaggle\/input\/facial-keypoints-detection\/IdLookupTable.csv\")","3f394093":"train_df.columns.tolist()","c115a2a7":"test_df.head()","954ac76f":"\n\n# imag = []\n# for i in range(0,7049):\n#     img = train_data['Image'][i].split(' ')\n#     img = ['0' if x == '' else x for x in img]\n#     imag.append(img)\n    \n    \n\n\nimg_list = []\nfor i in range(len(train_df.Image)):\n    \n\n    img  = np.array(train_df.Image[i].split(\" \"),dtype=float)\n    img = img.reshape(-1,96,96,1)\n    img_list.append(img)\n","49e7d672":"\nfor im in img_list[:5]:\n    \n    plt.imshow(im.reshape(96,96),cmap='gray')\n    plt.show()","2ca22940":"#Test data\n\ntest_img_list =[]\nfor i in range(len(test_df.Image)):\n    img  = np.array(test_df.Image[i].split(\" \"),dtype=float)\n    img = img.reshape(96,96,1)\n    test_img_list.append(img)","9fb5140f":"test_df.count()\nlen(test_img_list)","ca6affa9":"#showing images of test data set\nfor im in test_img_list[:5]:\n    plt.imshow(im.reshape(96,96),cmap='gray')\n    plt.show()","be323b64":"# plotting points in image\n# For Train Data\n\ncols= train_df.columns.tolist()\n\n# for i in range(len(img_list)):\n#     plt.imshow(img_list[i].reshape(96,96),cmap='gray')\n\n#     for j in range(0,len(cols)-1,2):\n#         plt.scatter(train_df[cols[j]][i],train_df[cols[j+1]][i],color='red')\n\n#     plt.show()","e2925b37":"\nplt.imshow(img_list[1].reshape(96,96),cmap='gray')\n\nfor j in range(0,len(cols)-1,2):\n    plt.scatter(train_df[cols[j]][1],train_df[cols[j+1]][1],color='green')\n\nplt.show()","1960d2fb":"# train_df[train_df.isnull()]\n\ntrain_df.isnull().sum()\/len(train_df)\n","7cd2fcfc":"train_df.isnull().sum()","17820289":"drop_df = train_df.dropna(axis=0).reset_index()\n# len(drop_df)\nlen(drop_df)\/len(train_df)\n# we have only 30 percent data remain for now if we removed all the rows conataining nan values","1cdc4e8d":"# extra index was came so i removed the previous index and reset \ndrop_df.drop(['index'],axis=1)\n","6cf27ba2":"# drop df has images data to be converted into list\ndrop_img_list =[]\nfor i in range(len(drop_df.Image)):\n    dimg  = np.array(drop_df.Image[i].split(\" \"),dtype=float)\n    dimg = dimg.reshape(96,96,1)\n    drop_img_list.append(dimg)\n#     print(img)\n# print(len(drop_df.Image))\n\n","9f70ea5c":"from keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Dropout, GlobalAveragePooling2D, Activation\nfrom keras.layers import Flatten, Dense\nfrom keras.layers.normalization import BatchNormalization\nfrom keras import optimizers\nfrom keras.callbacks import ModelCheckpoint, History\n\n\ndef the_model():\n    model = Sequential()\n    \n    model.add(Conv2D(16, (3,3), padding='same', activation='relu', input_shape=(96, 96, 1))) # Input shape: (96, 96, 1)\n    \n    model.add(MaxPooling2D(pool_size=2))\n    \n    model.add(Conv2D(32, (3,3), padding='same', activation='relu'))\n    model.add(MaxPooling2D(pool_size=2))\n    \n    model.add(Conv2D(64, (3,3), padding='same', activation='relu'))\n    model.add(MaxPooling2D(pool_size=2))\n    \n    model.add(Conv2D(128, (3,3), padding='same', activation='relu'))\n    model.add(MaxPooling2D(pool_size=2))\n    \n    model.add(Conv2D(256, (3,3), padding='same', activation='relu'))\n    model.add(MaxPooling2D(pool_size=2))\n    \n    # Convert all values to 1D array\n    model.add(Flatten())\n    \n    model.add(Dense(512, activation='relu'))\n    model.add(Dropout(0.2))\n\n    model.add(Dense(30))\n    \n    return model","c6c221f8":"# for data in train_df[:1]:\n#     print(data)\n    \n# x_train =drop_df.T[-1:].T\n\n\n\nx_train = np.array(drop_img_list)\n\n\ny_train = drop_df.T[:-1].T\n\n# y train has extra index columns so we have to remove this\ny_train = y_train.drop(['index'],axis=1)\n\nprint(len(x_train))\nprint(len(y_train))\n\nprint('x shape ',x_train.shape)\nprint('y shape ',y_train.shape)\n","66109185":"y_train","98e3cade":"# x_train.reshape(96,96,1)\n# y_train.shape","c9cf3471":"# print(\"Training datapoint shape: X_train.shape:{}\".format(x_train.shape))\n# print(\"Training labels shape: y_train.shape:{}\".format(y_train.shape))\n\nepochs = 60\nbatch_size = 64\n\nmodel = the_model()\nhist = History()\n\ncheckpointer = ModelCheckpoint(filepath='checkpoint1.hdf5', \n                               verbose=1, save_best_only=True)\n\n# training the model\nmodel.compile(optimizer='adam', loss='mean_squared_error', metrics=['accuracy'])\n\n# new_x_train = x_train[1:]\nmodel_fit = model.fit(x_train, y_train, validation_split=0.2, epochs=epochs, batch_size=batch_size, callbacks=[checkpointer, hist], verbose=1)\n\nmodel.save('model1.h5')","8974cb23":"# %reload_ext tensorboard.notebook\n# %tensorboard --logdir logs","634321dc":"# test_df.shape\nlen(test_img_list)","41ef8078":"test_imgs = np.array(test_img_list)\ntest_imgs.shape\nres= model.predict(test_imgs)\nlen(res)","f305e925":"# res[0]\n\nfor x in range(100):\n    res_img =x\n\n    # print(res[2])\n    plt.imshow(test_imgs[res_img].reshape(96,96),cmap='gray')\n    for i in range(0,len(res[res_img]),2):\n\n        plt.scatter(res[res_img][i],res[res_img][i+1],color='green')\n\n    plt.show()\n","042c8133":"# except image column\nmain_cols = cols[:-1]\nnew_lookup_df=pd.DataFrame(columns=['RowId', 'ImageId', 'FeatureName','Location'])\nnew_lookup_df=lookup_df\n\n\n\n# lookup_df['ImageId'].unique()\n\nfor RowId,ImageId,FeatureName,Location in lookup_df.values:\n\n#     print(res[ImageId][main_cols.index(str(FeatureName))])\n    new_lookup_df['Location'][RowId]=res[int(ImageId)-1][main_cols.index(str(FeatureName))]\n    \n#     new_lookup_df = new_lookup_df.append({'RowId':RowId,'ImageId':ImageId,'FeatureName':FeatureName,'Location':res[RowId][main_cols.index(str(FeatureName))]},ignore_index=True)\n#     new_lookup_df[RowId]= res[ImageId][main_cols.index(str(FeatureName))]\n    \n\nprint(new_lookup_df)\n\n#     print( )\n    \n\n#         print(res[ImageId][j])\n#         if FeatureName == colName:\n# #             print('yes')\n#             print(FeatureName)\n","e5a41677":"\nnew_lookup_df = new_lookup_df.drop(['ImageId','FeatureName'],axis=1)\nnew_lookup_df.to_csv('output.csv')\n\nfrom IPython.display import FileLink\nFileLink(r'output.csv')","02d5291f":"**Preprocessing For X train and Y train**","8ff41e19":"**Plotting Test Data Faces**","92ed9653":"**Showing Some HardCoded Results**","3d19f571":"**Dropping row**\n    ","fcc5ee50":"**Plotting Facial Notes On Image**","c379d754":"**Single Image Facial Notes**","7d1584e0":"**Checking Null Values In Data**","c449953a":"**Save And Download The Files**","6c981739":"**Converting Image Data into [-1,96,96,1] Shape For Reading Images**","0ae38755":"**Creating Submission File**","e11d142b":"**These Fields have More than 50% data with NAN**\n\n* left_eye_inner_corner_x      0.677827\n* left_eye_inner_corner_y      0.677827\n* left_eye_outer_corner_x      0.678394\n* left_eye_outer_corner_y      0.678394\n* right_eye_inner_corner_x     0.678252\n* right_eye_inner_corner_y     0.678252\n* right_eye_outer_corner_x     0.678252\n* right_eye_outer_corner_y     0.678252\n* left_eyebrow_inner_end_x     0.677969\n* left_eyebrow_inner_end_y     0.677969\n* left_eyebrow_outer_end_x     0.684352\n* left_eyebrow_outer_end_y     0.684352\n* right_eyebrow_inner_end_x    0.677969\n* right_eyebrow_inner_end_y    0.677969\n* right_eyebrow_outer_end_x    0.682792\n* right_eyebrow_outer_end_y    0.682792\n\n* mouth_left_corner_x          0.678110\n* mouth_left_corner_y          0.678110\n* mouth_right_corner_x         0.677969\n* mouth_right_corner_y         0.677969\n* mouth_center_top_lip_x       0.677259\n* mouth_center_top_lip_y       0.677259\n\n\n"}}