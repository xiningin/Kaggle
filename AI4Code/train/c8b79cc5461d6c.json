{"cell_type":{"aff175ef":"code","71de5ae6":"code","8900b0bf":"code","b1979ac6":"code","b0e1296a":"code","9d6ed683":"code","251100eb":"code","5749e9e4":"code","dca19c4d":"code","eac029ba":"code","fcb034b2":"code","7af21ae2":"code","e4fb908d":"code","6874fbea":"markdown","f238dfc9":"markdown","a2b30d49":"markdown","3adfed51":"markdown","f614d02f":"markdown","bac8792a":"markdown"},"source":{"aff175ef":"from itertools import product\nfrom typing import Callable\n\nimport numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport requests\nimport seaborn as sns\nfrom plotly.subplots import make_subplots","71de5ae6":"apple_price_data = pd.read_csv(\n    \"..\/input\/apple-product-price-list-from-26-countries-2022\/\"\n    \"apple product price list from 26 countries.csv\",\n    index_col=\"pid\",\n    parse_dates=[\"scraped_date\"],\n)\n\n# Make the index unique\napple_price_data.index = (\n    apple_price_data[\"country_code\"] + \"-\" + apple_price_data.index.map(str)\n)\napple_price_data.head()","8900b0bf":"apple_price_data.info()","b1979ac6":"model_info = apple_price_data[\"model\"].copy()\n\n\ndef clean_product_names(search_phrase: str, correct_name: str) -> None:\n    \"\"\"Rename all products containing `search_phrase` as `correct_name`.\"\"\"\n    matches = model_info.str.contains(search_phrase, case=False)\n    model_info[matches] = correct_name\n\n\nclean_product_names(\"iMac\", \"24-inch iMac\u00b2\")\nclean_product_names(\n    \"AirPods\\(2|AirPods\\(se|AirPods\\(andra|AirPods\\(\u0e23\u0e38\u0e48\u0e19\u0e17\u0e35\u0e48 2\",\n    \"AirPods(2nd generation)\",\n)\nclean_product_names(\n    \"AirPods\\(3|AirPods\\(t|AirPods\\(\u0e23\u0e38\u0e48\u0e19\u0e17\u0e35\u0e48 3\", \"AirPods(3nd generation)\"\n)\nclean_product_names(\"Apple Pencil\", \"Apple Pencil\")\nclean_product_names(\n    \"Spor|Correa deportiva|\u0421\u043f\u043e\u0440\u0442\u0438\u0432\u043d\u044b\u0439 \u0440\u0435\u043c\u0435\u0448\u043e\u043a|Urheiluranneke\", \"Sports Band\"\n)\nclean_product_names(\"regalo|Tarjetas|\u041f\u043e\u0434\u0430\u0440\u043e\u0447\u043d\u044b\u0435 \u043a\u0430\u0440\u0442\u044b|Hediye Kart\u0131\", \"Gift Cards\")\nclean_product_names(\"Mouse\", \"Magic Mouse\")\n\napple_price_data[\"model\"] = model_info\nprint(\"\\tProducts in dataset:\\n\", \"\\t\" + \"*\" * 19 + \"\\n\", model_info.unique())","b0e1296a":"fig = px.scatter(\n    apple_price_data,\n    x=\"country\",\n    y=\"model\",\n    height=600,\n    width=850,\n    title=\"Market Coverage (As per the Dataset)\"\n)\nfig.update_traces(\n    marker=dict(color=\"#44dd44\", symbol=\"cross\", size=11),\n    hovertemplate=\"<i>%{y}<\/i>, <b>%{x}<\/b>\"\n)\nfig.update_layout(\n    plot_bgcolor=\"#fff\", font_family=\"serif\", title_x=0.5, title_y=0.99, title_font_size=20,\n)\nfig.update_xaxes(fixedrange=True, gridcolor=\"#ddd\", side=\"top\", tickangle=-60, title=\"\")\nfig.update_yaxes(fixedrange=True, gridcolor=\"#ddd\", title=\"Model\", title_font_size=16)","9d6ed683":"def clean_prices(countries: list, cleaning_func: Callable) -> pd.DataFrame:\n    \"\"\"Extract only the digits from the prices.\n\n    Parameters\n    ----------\n    countries : list\n        A list of countries with similar thousands' and\/or decimal delimiters.\n    cleaning_func : Callable\n        A function that extracts digits from text.\n\n    Returns\n    -------\n    pandas.core.frame.DataFrame\n        A DataFrame with a single column having digits as strings.\n    \"\"\"\n    return cleaning_func(apple_price_data.query(\"country in @countries\")[\"price\"])\n\n\n# Undelimited prices e.g. 'From $949'\nundelimited = dict(\n    countries=[\"Canada\", \"India\", \"Poland\", \"Portugal\", \"United States\"],\n    cleaning_func=lambda prices: prices.str.extract(\"(\\d+)\"),\n)\n\n# Space-delimited prices e.g. '\u00c0 partir de 1 449 \u20ac'\nspace_delimited = dict(\n    countries=[\n        \"Czech Republic\",\n        \"Finland\",\n        \"France\",\n        \"Hungary\",\n        \"Norway\",\n        \"Russia\",\n        \"Sweden\",\n    ],\n    cleaning_func=lambda prices: prices.str.replace(\" \", \"\").str.extract(\"(\\d+)\"),\n)\n\n# Space-delimited prices with comma as decimal seperator e.g. '\u00c0 partir de 1 401,10 \u20ac'\nspace_delimited_with_comma_decimal = dict(\n    countries=[\"Luxembourg\"],\n    cleaning_func=lambda prices: prices.str.replace(\" \", \"\")\n    .str.replace(\",\", \".\")\n    .str.extract(\"(\\d+\\.?\\d*)\"),\n)\n\n# Comma-delimited prices e.g. 'From A$1,899'\ncomma_delimited_no_decimal = dict(\n    countries=[\"Australia\", \"Ireland\", \"Mexico\", \"Philippines\", \"Thailand\"],\n    cleaning_func=lambda prices: prices.str.replace(\",\", \"\").str.extract(\"(\\d+)\"),\n)\n\n# Period-delimited prices e.g. 'Ab 1.449 \u20ac'\nperiod_delimited_no_decimal = dict(\n    countries=[\"Austria\", \"Brazil\", \"Denmark\", \"Italy\", \"Spain\", \"Turkey\"],\n    cleaning_func=lambda prices: (\n        prices.str.replace(\".\", \"\", regex=False).str.extract(\"(\\d+)\")\n    ),\n)\n# Period-delimited prices with decimals e.g. '1.612,70 \u20ac'\nperiod_delimited_with_comma_decimal = dict(\n    countries=[\"Germany\", \"Netherlands\"],\n    cleaning_func=lambda prices: (\n        prices.str.replace(\".\", \"\", regex=False)\n        .str.replace(\",\", \".\")\n        .str.extract(\"(\\d+\\.?\\d*)\")\n    ),\n)\n\n\ncleaned_prices = pd.concat(\n    clean_prices(**category)\n    for category in [\n        undelimited,\n        space_delimited,\n        space_delimited_with_comma_decimal,\n        comma_delimited_no_decimal,\n        period_delimited_no_decimal,\n        period_delimited_with_comma_decimal,\n    ]\n)\napple_price_data[\"price\"] = cleaned_prices.astype(\"float32\")","251100eb":"# All the data was scraped on 2022-01-02\napple_price_data[\"scraped_date\"].dt.date.unique()","5749e9e4":"exchange_rates_to_usd = requests.get(\n    \"https:\/\/cdn.jsdelivr.net\/gh\/fawazahmed0\/currency-api@1\/2022-01-02\/currencies\/usd.json\"\n).json()[\"usd\"]\n\n# Convert prices to dollars for uniformity\nexchange_rates = {\n    \"Australia\": exchange_rates_to_usd[\"aud\"],\n    \"Austria\": exchange_rates_to_usd[\"eur\"],\n    \"Brazil\": exchange_rates_to_usd[\"brl\"],\n    \"Canada\": exchange_rates_to_usd[\"cad\"],\n    \"Czech Republic\": exchange_rates_to_usd[\"czk\"],\n    \"Denmark\": exchange_rates_to_usd[\"dkk\"],\n    \"Finland\": exchange_rates_to_usd[\"eur\"],\n    \"France\": exchange_rates_to_usd[\"eur\"],\n    \"Germany\": exchange_rates_to_usd[\"eur\"],\n    \"Hungary\": exchange_rates_to_usd[\"huf\"],\n    \"India\": exchange_rates_to_usd[\"inr\"],\n    \"Ireland\": exchange_rates_to_usd[\"eur\"],\n    \"Italy\": exchange_rates_to_usd[\"eur\"],\n    \"Luxembourg\": exchange_rates_to_usd[\"eur\"],\n    \"Mexico\": exchange_rates_to_usd[\"mxn\"],\n    \"Netherlands\": exchange_rates_to_usd[\"eur\"],\n    \"Norway\": exchange_rates_to_usd[\"nok\"],\n    \"Philippines\": exchange_rates_to_usd[\"php\"],\n    \"Poland\": exchange_rates_to_usd[\"pln\"],\n    \"Portugal\": exchange_rates_to_usd[\"eur\"],\n    \"Russia\": exchange_rates_to_usd[\"rub\"],\n    \"Spain\": exchange_rates_to_usd[\"eur\"],\n    \"Sweden\": exchange_rates_to_usd[\"sek\"],\n    \"Thailand\": exchange_rates_to_usd[\"thb\"],\n    \"Turkey\": exchange_rates_to_usd[\"try\"],\n    \"United States\": exchange_rates_to_usd[\"usd\"],\n}\napple_price_data[\"price\"] = apple_price_data.apply(\n    lambda x: x[\"price\"] \/ exchange_rates[x[\"country\"]], axis=1\n)\n\n# Convert income_group to categorical for efficiency and to allow sorting\napple_price_data[\"income_group\"] = pd.Categorical(\n    apple_price_data[\"income group\"],\n    categories=[\"Lower middle income\", \"Upper middle income\", \"High income\"],\n    ordered=True,\n)\napple_price_data.drop(\"income group\", axis=1, inplace=True)\napple_price_data.head()","dca19c4d":"average_prices = (\n    apple_price_data.groupby(\"model\")[\"price\"]\n    .mean()\n    .dropna()\n    .sort_values(ascending=False)\n)\nfig = px.bar(\n    average_prices,\n    color_discrete_sequence=[\"#99bbee\"],\n    height=600,\n    width=720,\n    title=\"Products (Average Price)\",\n)\nfig.update_layout(\n    font_family=\"serif\", plot_bgcolor=\"#fff\", title_x=0.5, title_font_size=20\n)\nfig.update_traces(\n    hovertemplate=\"<b>%{x}:<\/b> $%{y:,.2f}<extra><\/extra>\", showlegend=False\n)\nfig.update_xaxes(fixedrange=True, title=\"Model\", title_font_size=16, tickangle=-90)\nfig.update_yaxes(\n    fixedrange=True,\n    title=\"Average Price\",\n    title_font_size=16,\n    gridcolor=\"#aaa\",\n    tickformat=\"$,\",\n)","eac029ba":"fig = px.box(\n    apple_price_data.dropna(),\n    y=\"income_group\",\n    x=\"price\",\n    color=\"income_group\",\n    color_discrete_sequence=[\"orange\", \"lawngreen\", \"cyan\"],\n    custom_data=[\"model\", \"country\"],\n    category_orders={\n        \"income_group\": [\"High income\", \"Upper middle income\", \"Lower middle income\"]\n    },\n    points=\"all\",\n    title=\"Distribution of Prices by Income Group\",\n)\nfig.update_traces(\n    hovertemplate=\"<b>%{customdata[0]}<\/b>, %{customdata[1]}<extra><\/extra>: $%{x:,.2f}\",\n    showlegend=False,\n)\nfig.update_xaxes(\n    fixedrange=True,\n    title=\"Price\",\n    title_font_size=16,\n    tickformat=\"$,\",\n    gridcolor=\"#bbb\",\n)\nfig.update_yaxes(fixedrange=True, title=\"Income Group\", title_font_size=16)\nfig.update_layout(\n    font_family=\"serif\", title_x=0.5, title_font_size=20, plot_bgcolor=\"#fff\"\n)","fcb034b2":"(\n    apple_price_data.groupby([\"model\", \"income_group\"], as_index=False)[\"price\"]\n    .mean()\n    .dropna()\n    .pivot(columns=\"income_group\", index=\"model\")\n    .sort_values((\"price\", \"Lower middle income\"), ascending=False)\n    .style.format(\"${:,.2f}\", na_rep=\"?\")\n    .bar(axis=None, color=\"#99bbee\")\n)","7af21ae2":"products = apple_price_data[\"model\"].unique()\nfig = make_subplots(rows=len(products) \/\/ 2, cols=2, subplot_titles=products)\naxes = list(product(range(1, len(products) \/\/ 2 + 1), [1, 2]))\n\nfor model, ax in zip(products, axes):\n    data = apple_price_data.query(\"model == @model\").sort_values(\n        \"price\", ascending=False\n    )\n    row, col = ax\n    bar_plot = fig.add_bar(\n        x=data[\"country\"],\n        y=data[\"price\"],\n        row=row,\n        col=col,\n        showlegend=False,\n    )\nfig.update_layout(font_family=\"serif\", height=3500, plot_bgcolor=\"#fff\")\nfig.update_traces(hovertemplate=\"<i>%{x}<\/i>: $%{y:,.2f}<extra><\/extra>\")\nfig.update_xaxes(fixedrange=True, tickangle=-90)\nfig.update_yaxes(fixedrange=True, gridcolor=\"#bbb\", tickformat=\"$,\")","e4fb908d":"countries = sorted(apple_price_data[\"country\"].unique())\nfig = make_subplots(rows=len(countries) \/\/ 2, cols=2, subplot_titles=countries)\naxes = list(product(range(1, len(countries) \/\/ 2 + 1), [1, 2]))\n\nfor country, ax in zip(countries, axes):\n    data = (\n        apple_price_data.query(\"country == @country\")\n        .sort_values(\"price\", ascending=False)\n        .dropna()\n    )\n    row, col = ax\n    bar_plot = fig.add_bar(\n        x=data[\"model\"],\n        y=data[\"price\"],\n        row=row,\n        col=col,\n        showlegend=False,\n    )\nfig.update_traces(hovertemplate=\"<b>%{x}<\/b>: $%{y:,.2f}<extra><\/extra>\")\nfig.update_xaxes(fixedrange=True, tickangle=-90)\nfig.update_yaxes(fixedrange=True, gridcolor=\"#bbb\", tickformat=\"$,\")\nfig.update_layout(height=5200, font_family=\"serif\", plot_bgcolor=\"#fff\")","6874fbea":"# 1. Data Cleaning\n\n## 1.1 Clean up product names","f238dfc9":"## 2.2 Product Prices by Income Group","a2b30d49":"## 2.4 Product Prices in each Country","3adfed51":"## 1.2 Clean up prices","f614d02f":"## 2.3 Product Prices by Country","bac8792a":"# 2. Exploratory Data Analysis\n\n## 2.1 Most Expensive Products"}}