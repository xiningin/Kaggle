{"cell_type":{"dadeac8f":"code","daf870db":"code","4ca625bd":"code","023e918e":"code","e4902296":"code","0aa93fd0":"code","5608579e":"code","c32548f8":"code","8fcecc88":"code","3d7198e5":"code","b24dcf50":"code","f4a3d742":"code","f9bfd508":"code","584db83f":"code","c6e60b4e":"code","baee4285":"code","8fac3fa1":"code","6b162c11":"code","4f642771":"code","bd9c5607":"code","409d7b6e":"code","4bf44247":"code","68ab1de0":"code","a2376798":"code","e7411052":"code","77960525":"code","2e71304b":"code","76b643da":"code","305493e6":"code","4d415b94":"markdown","cddb4649":"markdown","635565fe":"markdown","dc7e8fd7":"markdown","701ec413":"markdown","a2093dff":"markdown","54bb38c5":"markdown","8acd0d5c":"markdown","709330c5":"markdown","fca02a28":"markdown","bd2f0d59":"markdown","13123aad":"markdown","7b6ddb3f":"markdown"},"source":{"dadeac8f":"import re","daf870db":"string= 'Data Jameson is an exceptional ML Engineer!'\nre.search('Jameson',string)","4ca625bd":"print(re.search('ab*','ac'))\nprint(re.search('ab*','abc'))\nprint(re.search('ab*','abbc'))","023e918e":"# '?': Zero or one (tells whether a pattern is absent or present)\nprint(re.search('ab?','ac'))\nprint(re.search('ab?','abc'))\nprint(re.search('ab?','abbc'))","e4902296":"# '+': One or more\nprint(re.search('ab+','ac'))\nprint(re.search('ab+','abc'))\nprint(re.search('ab+','abbc'))","0aa93fd0":"# {n}: Matches if a character is present exactly n number of times\nprint(re.search('ab{2}','abc'))\nprint(re.search('ab{2}','abbc'))","5608579e":"# {m,n}: Matches if a character is present from m to n number of times\nprint(re.search('ab{3,5}','aabbbbbbc')) # return match if 'b' is present 3-5 times\nprint(re.search('ab{7,10}','aabbbbbbc')) # return match if 'b' is present 7-10 times\nprint(re.search('ab{,10}','aabbbbbbc')) # return match if 'b' is present atmost 10 times\nprint(re.search('ab{10,}','aabbbbbbc')) # return match if 'b' is present from at least 10 times\nprint(re.search('ab{,2}','aac'))","c32548f8":"# '^': Indicates start of a string\n# '$': Indicates end of string\nprint(re.search('^J','James')) # return match if string starts with 'J' otherwise None\nprint(re.search('^J','Pramod')) # return match if string starts with 'J'  otherwise None\nprint(re.search('a$','India')) # return match if string ends with 'a'  otherwise None\nprint(re.search('a$','Japan'))  # return match if string ends with 'a'  otherwise None","8fcecc88":"# '.': Matches any character\nprint(re.search('.','a'))\nprint(re.search('.','#'))","3d7198e5":"# Now we will look at '[' and ']'.\n# They're used for specifying a character class, which is a set of characters that you wish to match.\n# Characters can be listed individually as follows\nprint(re.search('[abc]','a'))\n# Or a range of characters can be indicated by giving two characters and separating them by a '-'.\nprint(re.search('[a-c]','c')) #Ascii 97-99","b24dcf50":"print(re.search('ab{3,5}','aabbbbb')) # return if a is followed by b 3-5 times GREEDY","f4a3d742":"print(re.search('ab{3,5}?','aabbbbb')) # return if a is followed by b 3-5 times Non - GREEDY\n#Stops when minimum requirement is met ","f9bfd508":"# Example of HTML code\nprint(re.search(\"<.*>\",\"<HTML><TITLE>My Page<\/TITLE><\/HTML>\")) #Greedy or lazy regex","584db83f":"# Example of HTML code\nprint(re.search(\"<.*?>\",\"<HTML><TITLE>My Page<\/TITLE><\/HTML>\")) #Non Greedy or Lazy regex","c6e60b4e":"print(re.search('b+','abbc'))","baee4285":"print(re.match('b+','abbc')) #RE matches at the beginning of the string","8fac3fa1":"print(re.match('\\w+','abbc')) #RE matches at the beginning of the string","6b162c11":"## Example usage of the sub() function. Replace Road with rd.\nstreet = '21 Ramakrishna Road'\nprint(re.sub('Road','Rd',street,flags=re.I))","4f642771":"## Example usage of the sub() function. Replace Road with rd.\nstreet = '21 Ramakrishna Road'\nprint(re.sub('[a-z]+','Rd',street,flags=re.I))","bd9c5607":"## Example usage of finditer(). Find all occurrences of word Festival in given sentence\ntext=  'Diwali is a festival of lights, Holi is a festival of colors!'\npattern='festival'\nlst=[]\nfor match in re.finditer(pattern,text):\n    lst.append(match)\nlst","409d7b6e":"## Example usage of finditer(). Find all occurrences of word Festival in given sentence\ntext=  'Diwali is a festival of lights, Holi is a festival of colors!'\npattern='festival'\nfor match in re.finditer(pattern,text):\n    print('Start-',match.start(),end=' ')\n    print('END -', match.end())","4bf44247":"# Example usage of findall(). In the given URL find all dates\nurl = \"http:\/\/www.telegraph.co.uk\/formula-1\/2017\/10\/28\/mexican-grand-prix-2017-time-does-start-tv-channel-odds-lewisl\/2017\/05\/12\"\ndate_regex='\/(\\d{4})\/(\\d{1,2})\/(\\d{1,2})'\nprint(re.findall(date_regex,url))","68ab1de0":"## Exploring Groups\nresult=re.search(date_regex,url)\nresult","a2376798":"result.group(1)","e7411052":"print(result.group(2)) # - Print second group","77960525":"print(result.group(3)) # - Print third group","2e71304b":"print(result.group(0)) # - Print zero or the default group","76b643da":"print(re.search('ab{2}','abbbc'))","305493e6":"print(re.search('ab{2}$','abbbc'))","4d415b94":"<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h1 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='background:#AAB7B8; border:0; color:#1C2833' role=\"tab\" aria-controls=\"home\"><center>Thank You \ud83d\ude4f <\/center><\/h1>\n","cddb4649":"<a id=\"3\"><\/a>\n## Wildcard","635565fe":"### Character sets\n| Pattern  | Matches                                                                                    |\n|----------|--------------------------------------------------------------------------------------------|\n| [abc]    | Matches either an a, b or c character                                                      |\n| [abcABC] | Matches either an a, A, b, B, c or C character                                             |\n| [a-z]    | Matches any characters between a and z, including a and z                                  |\n| [A-Z]    | Matches any characters between A and Z, including A and Z                                  |\n| [a-zA-Z] | Matches any characters between a and z, including a and z ignoring cases of the characters |\n| [0-9]    | Matches any character which is a number between 0 and 9                                    |","dc7e8fd7":"<a id=\"6\"><\/a>\n## Greedy vs non-greedy regex","701ec413":"Let's do a quick search using a pattern.","a2093dff":"<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h1 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='background:#AAB7B8; border:0; color:#1C2833' role=\"tab\" aria-controls=\"home\"><center>Table of Contents<\/center><\/h1>\n\n- [Quantifiers](#1)\n- [Anchors](#2)\n- [Wildcard](#3)     \n- [Character sets](#4)\n- [Meta sequences](#5)\n- [Greedy vs non-greedy regex](#6)","54bb38c5":"### The five most important re functions that you would be required to use most of the times are\n\nmatch() Determine if the RE matches at the beginning of the string\n\nsearch() Scan through a string, looking for any location where this RE matches\n\nfinall() Find all the substrings where the RE matches, and return them as a list\n\nfinditer() Find all substrings where RE matches and return them as asn iterator\n\nsub() Find all substrings where the RE matches and substitute them with the given string","8acd0d5c":"<a id=\"1\"><\/a>\n## Quantifiers","709330c5":"<a id=\"4\"><\/a>\n## Character sets","fca02a28":"<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h1 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='background:#AAB7B8; border:0; color:#1C2833' role=\"tab\" aria-controls=\"home\"><center>Regular Expression Tutorial<\/center><\/h1>","bd2f0d59":"<a id=\"2\"><\/a>\n## Anchors","13123aad":"\n<a id=\"5\"><\/a>\n## Meta sequences\n\n| Pattern  | Equivalent to    |\n|----------|------------------|\n| \\s       | [ \\t\\n\\r\\f\\v]    |\n| \\S       | [^ \\t\\n\\r\\f\\v]   |\n| \\d       | [0-9]            |\n| \\D       | [^0-9]           |\n| \\w       | [a-zA-Z0-9_]     |\n| \\W       | [^a-zA-Z0-9_]    |","7b6ddb3f":"## Regular Expressions\nRegular expression is a set of characters, called as the pattern, which helps in finding substrings in a given string. The pattern is used to detect the substrings\n\nFor example, suppose you have a dataset of customer reviews about your restaurant. Say, you want to extract the emojis from the reviews because they are a good predictor os the sentiment of the review.\n\nTake another example, the artificial assistants such as Siri, Google Now use information retrieval to give you better results. When you ask them for any query or ask them to search for something interesting on the screen, they look for common patterns such as emails, phone numbers, place names, date and time and so on. This is because then the assitant can automatically make a booking or ask you to call the resturant to make a booking.\n\nRegular expressions are very powerful tool in text processing. It will help you to clean and handle your text in a much better way."}}