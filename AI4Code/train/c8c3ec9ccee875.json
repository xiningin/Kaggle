{"cell_type":{"a6135390":"code","f72baf1f":"code","94666d80":"code","3e7e118c":"code","12629c7f":"code","4b17d7a8":"code","96337db7":"code","95185f25":"code","da0fc48f":"code","08f0c779":"code","f7186551":"code","4c506397":"code","7529a6e8":"code","c34d0767":"code","e95bfb3b":"code","fb2c7d42":"code","79e08ee4":"code","fe031eea":"code","bf5087f7":"code","dd6793d7":"code","fcd57394":"code","6198a598":"markdown","29899654":"markdown","ecdddd43":"markdown","018a8434":"markdown","484f00c5":"markdown","3e32742c":"markdown"},"source":{"a6135390":"import pandas as pd \nimport numpy as np \nimport numpy\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport plotly\nimport plotly.express as ex\nimport plotly.graph_objs as go\nimport ipywidgets \nfrom plotly.subplots import make_subplots\nimport plotly.figure_factory as ff\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import KFold\nfrom pandas_profiling import ProfileReport\nfrom sklearn.impute import KNNImputer\nfrom sklearn.model_selection import GridSearchCV\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.wrappers.scikit_learn import KerasClassifier","f72baf1f":"train= pd.read_csv('..\/input\/titanic\/train.csv')\ntest= pd.read_csv('..\/input\/titanic\/test.csv')","94666d80":"# define imputer\nimputer = KNNImputer()\n# fit on the dataset\nimputer.fit(train['Age'].values.reshape(-1,1))\n# transform the dataset\ntraintrans = imputer.transform(train['Age'].values.reshape(-1,1))\ntesttrans = imputer.transform(test['Age'].values.reshape(-1,1))","3e7e118c":"train['Age_new']=traintrans\ntest['Age_new']=testtrans","12629c7f":"train['Age_new']=train['Age_new'].astype(int)\ntest['Age_new']=test['Age_new'].astype(int)","4b17d7a8":"display(train['Age_new'].isna().sum())\ndisplay(test['Age_new'].isna().sum())","96337db7":"train['Embarked'].value_counts()","95185f25":"#repalce the missing values 'Embarked' column with the highest occuring frequency.\ntrain['Embarked'] = train['Embarked'].fillna('S') \ntest['Embarked'] = test['Embarked'].fillna('S') ","da0fc48f":"### Check for missing values\n# train.isna().sum()\n## all the required columns are imputed, drop the previous Age column\ntrain.drop('Age',axis=1,inplace=True)\ntest.drop('Age',axis=1,inplace=True)","08f0c779":"train = train.drop(['PassengerId','Name','Ticket','Cabin'],axis = 1)\ntest = test.drop(['PassengerId','Name','Ticket','Cabin'],axis = 1)\ntrain = pd.get_dummies(train)\ntest = pd.get_dummies(test)","f7186551":"train['Survived']=train['Survived'].astype(int)","4c506397":"col=['Pclass', 'SibSp', 'Parch', 'Fare', 'Age_new', 'Sex_female',\n       'Sex_male', 'Embarked_C', 'Embarked_Q', 'Embarked_S']\nX = train\nY = X['Survived'].values\nX = X.drop('Survived', axis = 1)\nX = X[col]","7529a6e8":"col=['Sex_female','Sex_male']\nX = train\nY = X['Survived'].values\nX = X.drop('Survived', axis = 1)\nX = X[col]","c34d0767":"X_train, X_valid, y_train, y_valid = train_test_split(X,Y, test_size = 0.2)","e95bfb3b":"from keras.optimizers import SGD\nfrom keras.layers import Dense, Dropout, Activation\n\n# Function to create model, required for KerasClassifier\ndef create_model(learn_rate=0.01, momentum=0):\n    # create model\n    model = Sequential()\n    model.add(Dense(15, input_dim=2, activation='relu'))\n    model.add(Dense(600, activation='relu'))\n    model.add(Dense(15, activation='relu'))\n    model.add(Dense(600, activation='relu'))\n    model.add(Dropout(0.5))\n    model.add(Dense(15, activation='relu'))\n    model.add(Dense(60, activation='relu'))\n    model.add(Dropout(0.5))\n    model.add(Dense(150, activation='relu'))\n    model.add(Dense(60, activation='relu'))\n    model.add(Dropout(0.5))\n    model.add(Dense(150, activation='relu'))\n    model.add(Dense(60, activation='relu'))\n    model.add(Dropout(0.5))\n    \n    model.add(Dense(1, activation='sigmoid'))\n    # Compile model\n    optimizer = SGD(lr=learn_rate, momentum=momentum)\n    model.compile(loss='binary_crossentropy', optimizer=optimizer, metrics=['accuracy'])\n    return model","fb2c7d42":"# fix random seed for reproducibility\nseed = 7\nnumpy.random.seed(seed)\n# create model\nmodel = KerasClassifier(build_fn=create_model, epochs=100, batch_size=100, verbose=1)\n# define the grid search parameters\nlearn_rate = [0.01, 0.02, 0.03,0.04,0.05]\nmomentum = [0.0, 0.2, 0.4, 0.6, 0.8, 0.9,0.95]\nparam_grid = dict(learn_rate=learn_rate, momentum=momentum)\ngrid = GridSearchCV(estimator=model, param_grid=param_grid, n_jobs=-1, cv=3)\ngrid_result = grid.fit(X, Y)\n# summarize results\nprint(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\nmeans = grid_result.cv_results_['mean_test_score']\nstds = grid_result.cv_results_['std_test_score']\nparams = grid_result.cv_results_['params']\nfor mean, stdev, param in zip(means, stds, params):\n    print(\"%f (%f) with: %r\" % (mean, stdev, param))","79e08ee4":"print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))","fe031eea":"col=['Sex_female','Sex_male']\nX = test\ntest = test[col]","bf5087f7":"pred = grid_result.best_estimator_.model.predict(test)","dd6793d7":"n = len(pred)\npred_test = [1 if pred[i]>0.5 else 0 for i in range(n)]\nlen(pred_test)","fcd57394":"submission = pd.DataFrame()\ntest2= pd.read_csv('..\/input\/titanic\/test.csv')\nsubmission['PassengerId']=test2['PassengerId']\nsubmission['Survived']= pred_test\n\nsubmission.to_csv('keras_submission.csv', index=False)","6198a598":"# Submission ","29899654":"# PreProcess ","ecdddd43":"# Load Data ","018a8434":"# Keras Modeling","484f00c5":"# Predict Test Data ","3e32742c":"# Split Train and Valid Data "}}