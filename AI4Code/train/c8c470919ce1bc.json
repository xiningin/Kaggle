{"cell_type":{"79216270":"code","606c566f":"code","5d4bfc19":"code","d168ba6d":"code","3e655bf3":"code","ef576672":"code","2c9ffdbc":"code","9831bb4f":"code","c51a809a":"code","599ac885":"code","d0b32d9a":"code","fd0a794b":"code","36c545d9":"code","3381d8ce":"code","7e3bca1a":"code","190b3314":"code","988d6f92":"code","81c186a2":"code","07fc9613":"code","ce273c14":"code","000b2b97":"code","8eddd73f":"code","d0dbcd29":"code","4e3c1067":"code","59224c7f":"code","cd96aeca":"code","183e1169":"code","2f373432":"code","1dd2e756":"code","15d783bd":"code","406b8ba7":"code","d8599c51":"code","5ae0aa5b":"code","aefebd21":"code","99728978":"markdown","71c27b20":"markdown","2d0942a4":"markdown","2ee52a87":"markdown","b1542159":"markdown","ba43a4ce":"markdown","b0739b71":"markdown","8048eebb":"markdown","745efe26":"markdown","70a01077":"markdown","77397d4c":"markdown","2098529d":"markdown","c26524f2":"markdown","416654aa":"markdown","dda2e197":"markdown","cac71fc7":"markdown","9b4be7f7":"markdown","9e8e1a21":"markdown","641585be":"markdown","ccc83357":"markdown","966a1cab":"markdown","7d317f6d":"markdown"},"source":{"79216270":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","606c566f":"!pip install catboost\n!pip install optuna\n\nimport numpy as np \nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\n\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","5d4bfc19":"train = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")\n\ntest_ids = test.Id # Storing test Set ID for Final Submission File","d168ba6d":"train.shape, test.shape","3e655bf3":"train.head()","ef576672":"test.head()","2c9ffdbc":"sns.pairplot(train[[\"SalePrice\", 'GrLivArea']])","9831bb4f":"train = train.drop(train[(train['GrLivArea']>4000) & (train['SalePrice']<300000)].index)","c51a809a":"# Merging The Data for uniform preprocessing\nall_data = pd.concat((train.loc[:,'MSSubClass':'SaleCondition'],\n                      test.loc[:,'MSSubClass':'SaleCondition']))\n\nall_data.shape","599ac885":"all_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)[:30]\n\nmissing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\nmissing_data.head(20)","d0b32d9a":"all_data[\"PoolQC\"] = all_data[\"PoolQC\"].fillna(\"None\")\nall_data[\"MiscFeature\"] = all_data[\"MiscFeature\"].fillna(\"None\")\nall_data[\"Alley\"] = all_data[\"Alley\"].fillna(\"None\")\nall_data[\"Fence\"] = all_data[\"Fence\"].fillna(\"None\")\nall_data[\"FireplaceQu\"] = all_data[\"FireplaceQu\"].fillna(\"None\")\nall_data['MSSubClass'] = all_data['MSSubClass'].fillna(\"None\")\nall_data[\"Functional\"] = all_data[\"Functional\"].fillna(\"Typ\")\nall_data[\"MasVnrType\"] = all_data[\"MasVnrType\"].fillna(\"None\")\nall_data[\"MasVnrArea\"] = all_data[\"MasVnrArea\"].fillna(0)\n\nfor col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond'):\n    all_data[col] = all_data[col].fillna('None')\n\nfor col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n  all_data[col] = all_data[col].fillna(0)\n\nfor col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    all_data[col] = all_data[col].fillna(0)\n\nfor col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    all_data[col] = all_data[col].fillna('None')","fd0a794b":"all_data[\"LotFrontage\"] = all_data.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(lambda x: x.fillna(x.median()))","36c545d9":"all_data['MSZoning'] = all_data['MSZoning'].fillna(all_data['MSZoning'].mode()[0])\nall_data['Electrical'] = all_data['Electrical'].fillna(all_data['Electrical'].mode()[0])\nall_data['KitchenQual'] = all_data['KitchenQual'].fillna(all_data['KitchenQual'].mode()[0])\nall_data['Exterior1st'] = all_data['Exterior1st'].fillna(all_data['Exterior1st'].mode()[0])\nall_data['Exterior2nd'] = all_data['Exterior2nd'].fillna(all_data['Exterior2nd'].mode()[0])\nall_data['SaleType'] = all_data['SaleType'].fillna(all_data['SaleType'].mode()[0])","3381d8ce":"# Dropping Utilities Feature because it has no use\nall_data = all_data.drop(['Utilities'], axis=1)","7e3bca1a":"all_data['MSSubClass'] = all_data['MSSubClass'].apply(str)\n\nall_data['OverallCond'] = all_data['OverallCond'].astype(str)\n\nall_data['YrSold'] = all_data['YrSold'].astype(str)\nall_data['MoSold'] = all_data['MoSold'].astype(str)","190b3314":"from sklearn.preprocessing import LabelEncoder","988d6f92":"cols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n        'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond', \n        'YrSold', 'MoSold') # Cols to be Label Encoded\n\nfor c in cols:\n    le = LabelEncoder() \n    le.fit(list(all_data[c].values)) \n    all_data[c] = le.transform(list(all_data[c].values))","81c186a2":"all_data['TotalSF'] = all_data['TotalBsmtSF'] + all_data['1stFlrSF'] + all_data['2ndFlrSF']","07fc9613":"all_data = pd.get_dummies(all_data)","ce273c14":"all_data.shape","000b2b97":"X = all_data.iloc[:train.shape[0], :]\ny = np.asarray(train.iloc[:, -1].tolist()).reshape(-1, 1)\n\ntest = all_data.iloc[train.shape[0]:, :]","8eddd73f":"from sklearn.model_selection import train_test_split","d0dbcd29":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=0)","4e3c1067":"from sklearn.preprocessing import StandardScaler, MinMaxScaler\nX_scaler = MinMaxScaler()\ny_scaler = StandardScaler()","59224c7f":"X_scaler.fit(X_train)\nX_train = X_scaler.transform(X_train)\nX_test = X_scaler.transform(X_test)\n\ntest = X_scaler.transform(test)","cd96aeca":"y_scaler.fit(y_train)\ny_train = y_scaler.transform(y_train).ravel()\ny_test = y_scaler.transform(y_test).ravel()","183e1169":"from sklearn.svm import NuSVR\nfrom sklearn.metrics import mean_squared_error\nimport optuna","2f373432":"def objective_svr(trial):\n    params ={\n        'C': trial.suggest_float('C', 0.0001, 5.0),\n        'nu':  trial.suggest_float('nu', 0.0, 1.0),\n    }\n\n    model = NuSVR(**params).fit(X_train, y_train) # Training nuSVR Model\n    y_pred = model.predict(X_test)\n    loss = np.sqrt(mean_squared_error(y_test, y_pred)) # Returning Mean Squared As Loss\n    return loss","1dd2e756":"study = optuna.create_study(sampler=optuna.samplers.TPESampler(seed=123),\n                            direction=\"minimize\",\n                            pruner=optuna.pruners.HyperbandPruner())","15d783bd":"%%time\nstudy.optimize(objective_svr, n_trials=250)","406b8ba7":"full_x = np.concatenate((X_train, X_test), axis=0)\nfull_y = np.concatenate((y_train, y_test), axis=0)","d8599c51":"%%time\nfinal_model = NuSVR(**study.best_params).fit(full_x, full_y)","5ae0aa5b":"y_pred = final_model.predict(test)\ny_pred = y_scaler.inverse_transform(y_pred)","aefebd21":"output = pd.DataFrame({'Id': test_ids, 'SalePrice': y_pred})\noutput.to_csv('submission.csv', index=False)","99728978":"## Feature Engineering","71c27b20":"### MSZoning, KitchenQual, Exterior1st, Exterior2nd, SaleType and Electrical: Fill in missing values with most common value","2d0942a4":"## Feature Scaling","2ee52a87":"# Importing Libraries","b1542159":"Using help of \"data_description.txt\" for filling null values","ba43a4ce":"### Adding a Feature with Total Area","b0739b71":"### Training Model with Best Params","8048eebb":"### Getting dummy features","745efe26":"### Label Encoding","70a01077":"# Preparing Data for the Prediction Model","77397d4c":"# Prediction","2098529d":"## Outliers","c26524f2":"### Number of missing values","416654aa":"## Split data into train and test sets","dda2e197":"### Filling null values in LotFrontage by Median Value\n","cac71fc7":"# Using optuna to Parameter Selection for nuSVR ML Model","9b4be7f7":"### Transforming Numerical Columns\/Variables which are actually Categorical","9e8e1a21":"#### Select parameters","641585be":"### Filling missing values","ccc83357":"## Many of the code cells has been copied from Alexey Kolobyanin Kaggle Kernel for Learning Purpose.","966a1cab":"# Getting Data Ready","7d317f6d":"# Preprocessing"}}