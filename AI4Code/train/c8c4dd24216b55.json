{"cell_type":{"9a6d6f2b":"code","08b65d40":"code","04c045f6":"code","bc20f51e":"code","488eda58":"code","d56ae48c":"code","ca6acf3b":"code","122dbfed":"code","2ed2f0c0":"code","f47275c5":"code","dcffd392":"code","04807d90":"code","65a2eb39":"code","f0c4e497":"code","05bf3d71":"code","788498a8":"code","90da3350":"code","568346aa":"code","e335c134":"code","43c7d428":"markdown","9129cd17":"markdown","35bc8248":"markdown","41f52a00":"markdown","38ddb7c6":"markdown","6bec404f":"markdown","e69714dc":"markdown","536a0e50":"markdown","668f680b":"markdown","ea24126b":"markdown","d56df798":"markdown","d99e4e15":"markdown","043d280e":"markdown"},"source":{"9a6d6f2b":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn import model_selection","08b65d40":"train = pd.read_csv(\"\/kaggle\/input\/ytbtopics\/train.csv\", lineterminator='\\n').assign(test=False) \ntest = pd.read_csv(\"\/kaggle\/input\/ytbtopics\/test.csv\", lineterminator='\\n').assign(test=True)","04c045f6":"df = pd.concat([train, test])","bc20f51e":"df.head(2)","488eda58":"df[\"tags\"] = df[\"tags\"].apply(lambda x: str(x).replace('|', \" \").replace('\"', \"\"))","d56ae48c":"df[\"text\"] = df[\"tags\"] + \" \" + df[\"channel\"] + \" \" + df[\"title\"] ","ca6acf3b":"tfidf = TfidfVectorizer(min_df = 0.001)\ntfidf.fit(df[\"text\"])","122dbfed":"matrix = pd.DataFrame(\n    tfidf.transform(df[\"text\"]).todense(), \n    columns = tfidf.get_feature_names()\n)","2ed2f0c0":"matrix[\"channel\"] = df[\"channel\"].values\nmatrix[\"test\"] = df[\"test\"].values\nmatrix[\"category\"] = df[\"category\"].values","f47275c5":"matrix.head()","dcffd392":"X_train = matrix[matrix[\"test\"] == False]\nX_test = matrix[matrix[\"test\"]]\ny_train = X_train[\"category\"]","04807d90":"columns_to_drop = [\"channel\", \"test\", \"category\"]\n\nX_train = X_train.drop(columns_to_drop, axis = \"columns\")\nX_test = X_test.drop(columns_to_drop, axis = \"columns\")","65a2eb39":"mapping = {\n    0: 'People & Blogs',\n    1: 'Sports',\n    2: 'Comedy',\n    3: 'Education',\n    4: 'Entertainment',\n    5: 'News & Politics',\n    6: 'Science & Technology',\n    7: 'Music',\n    8: 'Gaming',\n    9: 'Film & Animation',\n    10: 'Autos & Vehicles',\n    11: 'Howto & Style',\n    12: 'Travel & Events',\n    13: 'Shows',\n    14: 'Pets & Animals',\n    15: 'Movies',\n}","f0c4e497":"from sklearn import naive_bayes\nfrom sklearn import metrics\nfrom sklearn import ensemble, linear_model","05bf3d71":"model = naive_bayes.MultinomialNB()\n\nk = 5\n\naccuracy = 0\n\ncv = model_selection.KFold(k)\n\nfor fit_idx, val_idx in cv.split(X_train, y_train):\n    \n    X_fit = X_train.iloc[fit_idx]\n    X_val = X_train.iloc[val_idx]\n    \n    y_fit = y_train.iloc[fit_idx]\n    y_val = y_train.iloc[val_idx]\n    \n    model.fit(X_fit, y_fit)\n    \n    y_pred = model.predict(X_val)\n    \n    accuracy += ((y_pred == y_val).sum() \/ len(y_val)) \/ k\n    \nprint(f\"Average accuracy: {accuracy:2f}\")","788498a8":"print(metrics.classification_report(\n    y_val.astype(int), \n    y_pred.astype(int), \n    target_names=[mapping[c] for c in y_val.drop_duplicates().sort_values()],\n    zero_division = 0\n)) ","90da3350":"pd.DataFrame(\n    metrics.confusion_matrix(y_pred, y_val), \n    index=[mapping[c] for c in y_val.drop_duplicates().sort_values()], \n    columns = [mapping[c] for c in y_val.drop_duplicates().sort_values()]\n)","568346aa":"submission = pd.DataFrame(\n    {\"id\": test[\"id\"], \"category\": model.predict(X_test).astype(int)}\n)\n\n# Assert that the submission format is correct.\nassert len(submission) == len(pd.read_csv(\"\/kaggle\/input\/ytbtopics\/sample_submission.csv\"))\nassert (submission[\"id\"] == pd.read_csv(\"\/kaggle\/input\/ytbtopics\/sample_submission.csv\")[\"id\"]).all()","e335c134":"submission.to_csv(\"submission.csv\", index=False)\nsubmission","43c7d428":"### TF-IDF\n\nThe TF-IDF allows to build a matrix with in rows the different youtube videos and in columns the whole vocabulary of the tags. It is a sparse matrix, i.e. it has many 0's. We can use this matrix to train a machine learning model. This one will learn specific patterns, like for example, the mention of the word \"Fortnite\" in the tags indicates the category \"Gaming\". [TF-IDF explained](https:\/\/www.wikiwand.com\/fr\/TF-IDF). ","9129cd17":"#### Drop useless columns for training","35bc8248":"We concatenate the train and the test to be able to standardize the data processing. They will be separated during the training of the model.","41f52a00":"# Quick start\n\nThis notebook should allow you to build your first solution to this challenge. ","38ddb7c6":"### Loading the training and test data set.\nWe create a new column called \"test\" to distinguish training from testing.","6bec404f":"#### Let's submit our prediction","e69714dc":"#### Classification report","536a0e50":"Creation of a text field dedicated to tags, channel name and video title","668f680b":"### Confusion matrix","ea24126b":"### Processing\n\nThe character | is used to separate the tags, we will replace this character by a space to be able to use a TF-IDF.","d56df798":"#### Add extra columns, channels, test, category","d99e4e15":"#### Train test split","043d280e":"### KFold cross-validation"}}