{"cell_type":{"b102ca63":"code","48b044a5":"code","ea485e0c":"code","927a29ba":"code","a5048aa7":"code","893ad78c":"code","eb5ea821":"code","4939d2c2":"code","fab5f435":"code","401e2980":"code","697c4454":"code","7cc22023":"code","e9b8d591":"code","6505218f":"code","578a6836":"code","326e7de7":"code","937d4852":"code","a3e95b34":"code","ebfbbfe8":"code","364012dd":"code","996a4d6d":"code","b5d2633c":"code","1a5ecdf1":"code","89803174":"code","992ad71e":"code","25086acf":"code","2c7cda07":"code","af47ad72":"code","55f3d02f":"code","fb11f24f":"code","155e51f5":"code","90c62d48":"code","68716f23":"code","6a9b2178":"code","e7c946f9":"code","9b47c11f":"code","33de3f2a":"code","f544dde0":"code","2af23aa2":"markdown","5f405c2f":"markdown","4adb3876":"markdown","fce01d9c":"markdown","8649ed1f":"markdown","7e755293":"markdown","12446840":"markdown","62f501ba":"markdown","20e5b731":"markdown","5374cb1c":"markdown","e86f5d8a":"markdown","de8d963d":"markdown"},"source":{"b102ca63":"#importing required libraries\n\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport tensorflow as tf\nfrom keras import Sequential\nfrom keras.layers import Dense,Dropout, Flatten, BatchNormalization,Activation\nfrom keras.layers import Lambda, Input, GlobalAveragePooling2D\nfrom keras.optimizers import Adam, SGD\nfrom keras.utils import to_categorical\nfrom keras.models import Model\nfrom keras.preprocessing.image import load_img\nfrom keras.callbacks import ReduceLROnPlateau,EarlyStopping, ModelCheckpoint\nfrom keras.preprocessing.image import ImageDataGenerator\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom tqdm.autonotebook import tqdm\n\nfrom sklearn.model_selection import train_test_split\n\n\nimport os\nimport gc\n\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","48b044a5":"#Checking if 'GPU' is aailable or not\n\nprint('Yes !! GPU is available' if tf.config.list_physical_devices('GPU') else 'GPU in not available !')\nprint(tf.config.list_physical_devices('GPU') )","ea485e0c":"print(tf.__version__)\nprint(tf.keras.__version__)","927a29ba":"# set seed\nseed = 42\n\ndef seed_everything(seed):\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    tf.random.set_seed(seed)\n    \nseed_everything(seed)","a5048aa7":"#directory of train and test images\n\ntrain_dir = '..\/input\/cassava-leaf-disease-classification\/train_images\/'\ntest_dir = '..\/input\/cassava-leaf-disease-classification\/test_images\/'","893ad78c":"train_df = pd.read_csv('..\/input\/cassava-leaf-disease-classification\/train.csv')\ntrain_df.head(10)","eb5ea821":"if len(os.listdir(train_dir)) == len(train_df['image_id']):\n    print('Number of image ids in train.csv file matches with the actual number of images present in train folder')\nelse:\n    print('Number of image ids in train.csv file does not match with the actual number of images present in train folder')","4939d2c2":"train_df.info()","fab5f435":"import json\n\nwith open('..\/input\/cassava-leaf-disease-classification\/label_num_to_disease_map.json') as f:\n    classes = json.load(f)\n    \nclasses","401e2980":"train_df['class_name'] = train_df['label'].astype('str').map(classes) #We are converting the data type of 'label' from 'int' to 'str' as map requires 'str' format for mapping\ntrain_df.head()","697c4454":"#Potting the categorical ratio\n\n#function to plot bar height information\n\ndef barh(ax):\n    \n    for p in ax.patches:\n        val = p.get_height() #height of the bar\n        x = p.get_x()+ p.get_width()\/2 # x- position \n        y = p.get_x()+ p.get_height()+100 #y-position\n        ax.annotate(round(val,2),(x,y))\n    \n#Plotting the class distribution in a descending order\n\nplt.figure(figsize = (15,7))\nax0 =sns.countplot(x=train_df['class_name'],order=train_df['class_name'].value_counts().index )\nbarh(ax0)\nplt.show()   ","7cc22023":"from plotly.express import pie\n\nclass_val = pd.DataFrame(train_df['class_name'].value_counts())\nprint(class_val)\n\nfig = pie(class_val,values ='class_name', names = list(class_val.index), title = 'Image Class distribution ')\nfig.show()\n","e9b8d591":"train_df.shape","6505218f":"#list of img_dir accoring to train.csv file\nimg_dir =[]\nfor ix,img_id in enumerate(tqdm(train_df['image_id'].values)):\n    img_dir.append(os.path.join(train_dir,img_id))\n\ntrain_df['img_dir'] = img_dir #creatinga new column\ntrain_df= train_df.astype('str') #datagen requires the target value in str format\ntrain_df.head()\n","578a6836":"#Creating train and validation dataset ( as we can not apply validation_split =0.2 when we are working with ImageDataGenerator )\n\ntrain_df, val_df = train_test_split(train_df, test_size = 0.2, random_state = 100,\n                                    stratify = train_df['label'].values) # stratify as we have class imbalance\ntrain_df.shape","326e7de7":"#validation dataframe shape\nval_df.shape","937d4852":"# Hyperparameters\nbatch_size= 32 # Batch size > 32 will cause ResourceExhaustedError during model.fit()\nepochs=20\nlearn_rate=0.001\n# sgd=SGD(lr=learn_rate,momentum=.9,nesterov=False)\nadam=Adam(lr=learn_rate, beta_1=0.9, beta_2=0.999, epsilon=None,  amsgrad=False)\n\ninput_shape = (300,300,3)\nn_classes = len(classes)","a3e95b34":"# #using Xception \n\n# from keras.applications.xception import Xception, preprocess_input\n# # xception_preprocessor = preprocess_input\n# xception = Xception(include_top= False, weights = 'imagenet',\n#                        input_shape = input_shape,\n#                        classes = n_classes) ","ebfbbfe8":"# # we are defining ImageDataGenerator\n\n# datagen = ImageDataGenerator(horizontal_flip = True,\n#                             vertical_flip = True,\n#                              zoom_range = 0.2,\n# #                              shear_range = 0.2,\n#                              rescale = 1.0\/255,  # Ar RGB colors are presented in 0-155 range (1 pixel = 8 bits, since each bit can be 1 or 0, 8 bits info 2^8 = 256 , 0-255 , total 256)\n# #                              width_shift_range = 0.2,\n# #                              height_shift_range = 0.2,\n#                              fill_mode = 'nearest',\n# #                              preprocessing_function = preprocess_input\n                             \n#                             ) \n# datagen_val = ImageDataGenerator(#preprocessing_function = preprocess_input,\n#                                  rescale = 1.0\/255) # as we don not need all transformation during validation\n\n# datagen_pred = ImageDataGenerator(#preprocessing_function = preprocess_input,\n#                                   rescale = 1.0\/255 )","364012dd":"datagen = ImageDataGenerator(\n                    rotation_range = 30,\n                    width_shift_range = 0.2,\n                    height_shift_range = 0.2,\n                    shear_range = 0.2,\n                    zoom_range = 0.2,\n                    brightness_range = [0.5,1.5],\n                    horizontal_flip = True,\n                    vertical_flip = True,\n                    fill_mode = 'nearest'\n)\n\ndatagen_val = ImageDataGenerator()\ndatagen_pred = ImageDataGenerator()\n\n","996a4d6d":"#we can use datagen from dataframe : https:\/\/vijayabhaskar96.medium.com\/tutorial-on-keras-imagedatagenerator-with-flow-from-dataframe-8bd5776e45c1\n\ntrain_generator= datagen.flow_from_dataframe(dataframe=train_df, directory=train_dir, x_col=\"image_id\", y_col=\"label\",\n                                            class_mode=\"sparse\", target_size=(300,300), batch_size=batch_size,shuffle = True,\n                                             seed = seed,interpolation = \"nearest\",\n                                            color_mode = 'rgb')","b5d2633c":"val_generator = datagen_val.flow_from_dataframe(dataframe=val_df, directory=train_dir, x_col=\"image_id\", y_col=\"label\",\n                                            class_mode=\"sparse\", target_size=(300,300), batch_size=batch_size,shuffle = False,\n                                                seed = seed,interpolation = \"nearest\",\n                                                \n                                               color_mode = 'rgb')","1a5ecdf1":"#test datagen\n\npred_datagen = datagen_pred.flow_from_directory(\"..\/input\/cassava-leaf-disease-classification\/\",\n                                               batch_size = 1, # as we want all images in one batch during prediction\n                                               target_size = (300,300),\n                                                classes=['test_images'], # https:\/\/kylewbanks.com\/blog\/loading-unlabeled-images-with-imagedatagenerator-flowfromdirectory-keras\n                                               color_mode ='rgb',\n                                              seed = seed\n                                               ) ","89803174":"#plotting some images from image generator https:\/\/www.analyticsvidhya.com\/blog\/2020\/08\/image-augmentation-on-the-fly-using-keras-imagedatagenerator\/\n\nfig,ax = plt.subplots(nrows=1,ncols=5,figsize=(16,16))\n\n\nfor i in range (5):\n    \n    image = next(train_generator)[0][0] # getting images\n    \n    image = np.squeeze(image) # changing size from (1, 200, 200, 3) to (200, 200, 3) for plotting the image\n    \n    ax[i].imshow(image)\n    ax[i].axis('off')","992ad71e":"# Stop training when the validation loss metric has stopped decreasing for 5 epochs.\nearly_stopping = EarlyStopping(monitor = 'val_loss',\n                               patience = 5,\n                               mode = 'min',\n                               restore_best_weights = True)\n\n# Save the model with the minimum validation loss\ncheckpoint = ModelCheckpoint('best_model.hdf5', \n                             monitor = 'val_loss',\n                             verbose = 1,\n                             mode = 'min', \n                             save_best_only = True)\n# reduce learning rate\nreduce_lr = ReduceLROnPlateau(monitor = 'val_loss',\n                              factor = 0.2,\n                              patience = 3,\n                              min_lr = 0.001,\n                              mode = 'min',\n                              verbose = 1)","25086acf":"from tensorflow.keras.applications import EfficientNetB3\neffB3 = EfficientNetB3(input_shape = input_shape, include_top = False, weights = 'imagenet')","2c7cda07":"#creating a function to build the FC by taking the base model and return the final model\n\ndef build_model(base_modelx):\n    \n#     for layer in base_modelx.layers:\n#         layer.trainable = False\n    \n    model = Sequential(base_modelx)\n#     model.add(Flatten())\n    model.add(GlobalAveragePooling2D())\n#     model.add(Dropout(0.3))\n    model.add(Dense(256,activation ='relu'))#, kernel_regularizer = tf.keras.regularizers.l2(0.01)))\n#     model.add(BatchNormalization())\n#     model.add(Dropout(0.5))\n#     model.add(Dense(512,activation = 'relu',kernel_regularizer = tf.keras.regularizers.l2(0.01)))\n#     model.add(BatchNormalization())\n#     model.add(Dropout(0.3))\n#     model.add(Dense(256,activation = 'relu'))\n#     model.add(Dropout(0.2))\n#     model.add(Dense(128,activation = 'relu'))\n#     model.add(Dropout(0.15))\n    model.add(Dense(n_classes,activation='softmax'))\n    \n    print(model.summary())\n    \n    model.compile(loss = 'sparse_categorical_crossentropy',optimizer = adam,metrics =['accuracy'])\n    \n    return model","af47ad72":"model = build_model(effB3)","55f3d02f":"STEP_SIZE_TRAIN = train_generator.n\/\/train_generator.batch_size\nSTEP_SIZE_VALID = val_generator.n\/\/val_generator.batch_size","fb11f24f":"history = model.fit(train_generator,\n                    validation_data = val_generator,\n                    epochs = epochs,\n                    steps_per_epoch = STEP_SIZE_TRAIN,\n                    validation_steps = STEP_SIZE_VALID,\n                    callbacks = [early_stopping, checkpoint, reduce_lr]\n                   )","155e51f5":"# (model.history.history)","90c62d48":"#Ploting acc and loss\n\ndef plot_result(modelx):\n    results = pd.DataFrame({'epochs':list(range(1,len(modelx.history.history['accuracy'])+1)),'Training_acc':modelx.history.history['accuracy'],'Validation_acc':modelx.history.history['val_accuracy'],\n                          'Training_loss':modelx.history.history['loss'],'Validation_loss':modelx.history.history['val_loss']})\n\n    plt.figure(figsize=(12,5))\n    sns.lineplot(x = 'epochs', y ='Training_acc', data = results, color='r' )\n    sns.lineplot(x = 'epochs', y ='Validation_acc', data = results, color='blue' )\n    plt.title('Training Accuracy vs Validation Accuracy')\n    plt.show()\n\n    plt.figure(figsize=(12,5))\n    sns.lineplot(x = 'epochs', y ='Training_loss', data = results, color='r' )\n    sns.lineplot(x = 'epochs', y ='Validation_loss', data = results, color='blue' )\n    plt.title('Training Loss vs Validation Loss')\n    plt.show()\n\nplot_result(model)","68716f23":"model.save(\"final_model_effB3.h5\")","6a9b2178":"pred = model.predict(pred_datagen)","e7c946f9":"# First prediction\nprint(pred[0])\nprint(f\"Max value (probability of prediction): {np.max(pred[0])}\") # the max probability value predicted by the model\nprint(f\"Sum: {np.sum(pred[0])}\") # because we used softmax activation in our model, this will be close to 1\nprint(f\"Max index: {np.argmax(pred[0])}\") # the index of where the max value in predictions[0] occurs\nprint(f\"Predicted label: {classes[str(np.argmax(pred[0]))]}\")","9b47c11f":"sub = pd.DataFrame(columns =['image_id','label'])\nsub","33de3f2a":"sub['image_id'] = [os.path.splitext(path)[0]+'.jpg' for path in os.listdir(test_dir)]\nsub['label']= np.argmax(pred,axis=1)\n\nsub\n","f544dde0":"#submitting\n\nsub.to_csv('submission.csv',index= None)","2af23aa2":"### Observation:\n1. We have class imbalance here.i.e. label 'Cassa Mosaic Disease(CMD) has 13158 images while othe classes have less than 3000 images.\n2. We will be using stratify= train_df.label.values while spliting for validation data","5f405c2f":"### Creating submission file","4adb3876":"## Model Building:\n","fce01d9c":"### Please give a upvote if you like this notebook :)","8649ed1f":"### NOTE:\n1. This competition requires no internet connection. Hence we will save the model and use that in the inference notebook.\n2. The model can be fine tuned to get better accuracy\n","7e755293":"### Observation:\n1. Images of train folder are present in the same order as that of train.csv file.","12446840":"### Reading images from thr train DIR","62f501ba":"### Observation:\n1. We have atleast 1000 images per class or category","20e5b731":"### Data augmentation:\n1. Data augmentation encompasses a wide range of techniques used to generate \u201cnew\u201d training samples from the original ones by applying random jitters and perturbations (but at the same time ensuring that the class labels of the data are not changed).\n2. The basic idea behind the augmentation is to train the model on all kind of possible transformations of an image\n3. Here we are using flow_from_dataframe. This is because we have limited ram and we need to get images in batches with respect to the image_id available in the train.csv file","5374cb1c":"Inference notebook: https:\/\/www.kaggle.com\/deepakat002\/efficientnetb3-inference-0-860","e86f5d8a":"### Observation:\n1. We have 5 different clases\n2. Classes 0 - 3 ---> represents diseases \n3. Class 4 ---> Helthy leaf\n4. We don't have any null values","de8d963d":"### Taking data in batches\n\nAs we have limited ram memory and huge number of images, We will be taking images in batches and will extract features"}}