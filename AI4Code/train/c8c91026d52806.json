{"cell_type":{"2f1e7d98":"code","750bb7e1":"code","d371f6b2":"code","476dd054":"code","2f85c486":"code","0fd977ea":"code","b0e69c18":"code","dba95f6e":"code","43e1c235":"code","d6c167ce":"code","87001599":"code","f64b5b4a":"code","7b7a8e53":"code","ef2d2ffd":"code","c2347ec2":"markdown","0eec3119":"markdown","0a726cdd":"markdown","f634663c":"markdown","aa6ebc3b":"markdown","edf494d9":"markdown","f83875e2":"markdown","0a2f8408":"markdown","1c3298a4":"markdown","2455c892":"markdown","eb0e621c":"markdown","f16d9a1a":"markdown","4ed9f180":"markdown"},"source":{"2f1e7d98":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","750bb7e1":"import warnings\nwarnings.filterwarnings('ignore')\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom matplotlib import rcParams\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\n","d371f6b2":"\ntrain = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nsubmission = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')","476dd054":"train","2f85c486":"test","0fd977ea":"train.info()","b0e69c18":"num = train.select_dtypes('number')\nnum","dba95f6e":"catg = train.select_dtypes('object')\ncatg","43e1c235":"train.describe().T","d6c167ce":"corr = train.corr()\nfig, ax = plt.subplots(figsize=(20, 15))\ndropSelf = np.zeros_like(corr)\ndropSelf[np.triu_indices_from(dropSelf)] = True\nsns.heatmap(corr, linewidths=.5, annot=True, fmt=\".2f\", mask=dropSelf,cmap=\"RdBu\")\nplt.title(\"Correlation Plot Between Variables with values\", size=15)\nplt.show()","87001599":"main_features = list(train.corr()[\"SalePrice\"][(train.corr()[\"SalePrice\"]>0.50) | (train.corr()[\"SalePrice\"]<-0.50)].index)\ncat_cols = [\"MSZoning\", \"Utilities\",\"BldgType\",\"Heating\",\"KitchenQual\",\"SaleCondition\",\"LandSlope\"]\nmain_features = main_features + cat_cols\n\ntrain_new = train[main_features]\ntrain_new","f64b5b4a":"print(\"Missing Values by Column\")\nprint(\"-\"*30)\nprint(train.isna().sum())\nprint(\"-\"*30)\nprint(\"TOTAL MISSING VALUES:\",train.isna().sum().sum())","7b7a8e53":"sns.pairplot(train_new)","ef2d2ffd":"\nplt.figure(figsize=(15,10))\nsns.jointplot(x=train[\"OverallQual\"], y=train[\"SalePrice\"],hue = train['SaleCondition'])\nsns.jointplot(x=train[\"YearBuilt\"], y=train[\"SalePrice\"], hue = train['SaleCondition'])\nsns.jointplot(x=train[\"YearRemodAdd\"], y=train[\"SalePrice\"], hue = train['SaleCondition'])\nsns.jointplot(x=train[\"TotalBsmtSF\"], y=train[\"SalePrice\"], hue = train['SaleCondition'])\nsns.jointplot(x=train[\"1stFlrSF\"], y=train[\"SalePrice\"], hue = train['SaleCondition'])\nsns.jointplot(x=train[\"GrLivArea\"], y=train[\"SalePrice\"], hue = train['SaleCondition'])\nsns.jointplot(x=train[\"FullBath\"], y=train[\"SalePrice\"], hue = train['SaleCondition'])\nsns.jointplot(x=train[\"TotRmsAbvGrd\"], y=train[\"SalePrice\"], hue = train['SaleCondition'])\nsns.jointplot(x=train[\"GarageCars\"], y=train[\"SalePrice\"], hue = train['SaleCondition'])\nsns.jointplot(x=train[\"GarageArea\"], y=train[\"SalePrice\"], hue = train['SaleCondition'])\nplt.show()","c2347ec2":"### Viewing the train data","0eec3119":"##### Inferences\nThere are a total of 43 categorical parameters in the data","0a726cdd":"### Checking number of categorical variables","f634663c":"##### Inferences:\nThere are a total of 38 numeric variables in the data including the ID.","aa6ebc3b":"##### Inferences from the correlation plot:\n1. It is evident that few parameters are highly related to each other like GarageArea and GarageCars with correlation coefficient of 0.88.Similarly GarageYrBit and YearBuilt,TotRmsAbvGrd and GrLivArea have correlation coefficient of 0.83.\n2.When focussed only on SalePrice we can observe that it has many influencing parameters. It has a high positive correlation with OverallQual followed by GrLivArea,GarageCars,GarageArea,TotalBsmtSF,1stFlrSF.\n3.So now I am only considering the important features that affect SalePrice(The parameters which have correlation coefficient more than 0.5 or less than -0.5)\n\nThis plot gives only relation between the numeric variables but I want to consider other influencing categorical data on the predictor SalePrice.\n","edf494d9":"### Check the correlation between all the variables in the train data and let us also see which parameters influence more on the SalePrice","f83875e2":"### Checking the statistics of the train data","0a2f8408":"### Viewing the test data","1c3298a4":"### Checking number of numeric variables","2455c892":"### Importing all the required packages and modules for the project","eb0e621c":"##### SalePrice is our predictor and other variables are considered as response variables. Among all the parameters there will be few which affect the predictor the most. Let us explore the data and check for important features and try to see their individual and combined effect on the predictor. Also let us do some machine learning techniques to predict the SalePrice for the test data.\n","f16d9a1a":"# Exploratory Data Analysis","4ed9f180":"### Loading the data using pandas and storing them as dataframes for further manipulations"}}