{"cell_type":{"341cfd8a":"code","dc52357a":"code","5969e52e":"code","f5f0ef8f":"code","72608bb0":"code","b6e61cce":"code","5e9797d1":"code","f9335147":"code","ed9df31d":"code","b3ce8c7b":"code","969233c7":"code","d16172f6":"code","ca67b661":"code","1568119d":"code","ba772334":"code","e7c5c166":"code","eadcfd7c":"code","e9fa6548":"code","ba731fee":"code","55acce16":"code","cda20a98":"code","1b551265":"code","8aba256c":"code","daa4a9a2":"code","9b867263":"code","fab15938":"code","62120579":"markdown"},"source":{"341cfd8a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \npd.set_option(\"display.max_columns\", None)\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dc52357a":"train_df = pd.read_csv(\"\/kaggle\/input\/dont-overfit-ii\/train.csv\")","5969e52e":"test_df = pd.read_csv(\"\/kaggle\/input\/dont-overfit-ii\/test.csv\")\nsub = pd.read_csv","f5f0ef8f":"train_df.head(10)","72608bb0":"print(len(test_df))\nprint()","b6e61cce":"test_df.head(10)","5e9797d1":"target = train_df[\"target\"]\ntrain_df = train_df.drop([\"target\"], axis = 1)","f9335147":"Summary = pd.DataFrame(train_df.dtypes, columns=[\"dtype\"])\nSummary[\"max\"] = train_df.max()\nSummary[\"min\"] = train_df.min()\nSummary[\"null\"] = train_df.isnull().sum()\nSummary[\"first\"] = train_df.iloc[0]\nSummary[\"second\"] = train_df.iloc[1]\nSummary[\"third\"] = train_df.iloc[2]\nSummary","ed9df31d":"train_df.isnull().sum().sum()\ntest_df.isnull().sum().sum()\n# So, there are no null values","b3ce8c7b":"target.value_counts()\n# so, we can say that target value is not balanced","969233c7":"train_df = train_df.drop([\"id\"], axis = 1)\ntest_df = test_df.drop([\"id\"], axis = 1)","d16172f6":"# train_df[\"max\"] = train_df.max(axis=1)\n# train_df[\"min\"] = train_df.min(axis = 1)\n# train_df[\"std\"] = train_df.std(axis =1)\n# train_df[\"skew\"] = train_df.skew(axis =1)\n# train_df[\"mean\"] = train_df.mean(axis=1)\n# train_df[\"median\"] = train_df.median(axis=1)","ca67b661":"# test_df[\"max\"] = test_df.max(axis=1)\n# test_df[\"min\"] = test_df.min(axis = 1)\n# test_df[\"std\"] = test_df.std(axis =1)\n# test_df[\"skew\"] = test_df.skew(axis =1)\n# test_df[\"mean\"] = test_df.mean(axis=1)\n# test_df[\"median\"] = test_df.median(axis=1)","1568119d":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import roc_auc_score, auc, roc_curve\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.feature_selection import mutual_info_classif","ba772334":"# X_train, X_test, y_train, y_test = train_test_split(train_df.drop('target',axis=1), target, stratify = target,\n#                                                     random_state = 123, test_size = 0.25) \nX_train, X_test, y_train, y_test = train_test_split(train_df, target,stratify = target,\n                                                    random_state = 123, test_size = 0.25) ","e7c5c166":"mi = mutual_info_classif(X_train, y_train, random_state=123)","eadcfd7c":"selectedFeature  =  np.array( mi > 0.02)\nprint('number of selected columns',selectedFeature.sum())\nprint('number of selected columns',train_df.drop('target',axis =1).columns[selectedFeature])","e9fa6548":"dropFeaturesdrop = train_df.drop('target', axis =1).columns[~selectedFeature]\nX_train.drop(dropFeaturesdrop,axis= 1,inplace= True)\nX_test.drop(dropFeaturesdrop,axis= 1 ,inplace= True)\ntest_df.drop(dropFeaturesdrop,axis= 1 ,inplace= True)\n# y_train.drop(dropFeaturesdrop,axis= 1 ,inplace= True)\n# y_test.drop(dropFeaturesdrop,axis= 1 ,inplace= True)","ba731fee":"scale = StandardScaler()\nX_train = scale.fit_transform(X_train)\nX_test = scale.transform(X_test)\ntest_df = scale.transform(test_df)","55acce16":"# Grid search cross validation\ngrid={\"C\":np.logspace(-4,4,7),\n      \"penalty\":[\"l1\",\"l2\"]\n     }# l1 lasso l2 ridge\nlm = LogisticRegression()\nlogreg_cv=GridSearchCV(lm, grid, cv = 10, scoring='roc_auc' )\nlogreg_cv.fit(X_train,y_train)\n\nprint(\"tuned hpyerparameters :(best parameters) \",logreg_cv.best_params_)\nprint(\"roc_auc :\",logreg_cv.best_score_)","cda20a98":"\n# lm = LogisticRegression(C = 0.0001, penalty = 'l2' )\nlm = LogisticRegression(C = 0.1, class_weight = 'balanced', penalty =  'l2')\nlm.fit(X_train,y_train)\n# lm.fit(X_train, y_train)","1b551265":"y_pred = lm.predict_proba(X_test)\ny_pred = y_pred[:,1]","8aba256c":"# tps, fps, _ = roc_curve(X_test, y_pred)\nfpr, tpr, thresholds = roc_curve(y_test, y_pred)\nprint(auc(fpr, tpr))\n# Score: 0.6253196930946292, 0.46 pretty bad\n# Score with regularization is 0.5537084398976982\n# above with added features: 0.5588235294117647\n# with just regularization: 0.7429667519181585","daa4a9a2":"y_res = lm.predict_proba(test_df)\ny_res = y_res[:,1]","9b867263":"sub = pd.read_csv(\"\/kaggle\/input\/dont-overfit-ii\/sample_submission.csv\")\nprint(len(sub))\nsub[\"target\"] = y_res\nsub.to_csv(\"lr_reg_lib_linear.csv\", index=False)\n\n","fab15938":"len(test_df)","62120579":"So it is a classification task"}}