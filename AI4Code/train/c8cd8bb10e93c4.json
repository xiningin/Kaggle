{"cell_type":{"87e84a4b":"code","5da75e56":"code","1dc01182":"code","a1ee0836":"code","ddd63ef7":"code","69713a6a":"code","a7afdd88":"code","4134f9e4":"code","8f246825":"code","d5c680c3":"code","c4a525ea":"code","b9ae4f20":"code","318252fe":"code","19744698":"code","0bcb8f65":"code","b06a3797":"code","72f9f149":"code","f5c22392":"code","6bf76309":"code","cc6a8f54":"code","f4b1067a":"code","e06764f0":"code","d3a24138":"code","153e132d":"code","c4770d7e":"code","94973e66":"code","2f425f9a":"code","8570bf62":"code","66bee912":"code","a76be8cf":"code","5532686d":"code","a842cbc5":"code","c44689ee":"code","5111a54f":"code","03348cd2":"code","4a223dc8":"code","0902940a":"code","4e66e68f":"code","0577e9fb":"code","2675086c":"code","090d9993":"code","c2ee5cca":"code","5436c63b":"code","bee40232":"code","740eeacb":"code","38c86d05":"code","39040861":"code","05f588c7":"markdown","6699c948":"markdown","ccbb2256":"markdown","ace0d813":"markdown","17e1d6b7":"markdown","0dd79018":"markdown","63d5e02c":"markdown","60d6872d":"markdown","7dda0f1f":"markdown","9d1a97a6":"markdown","f2f38659":"markdown","1ff02117":"markdown","f3250bbd":"markdown","eead3527":"markdown","b0c876de":"markdown","29f9f706":"markdown","415f8901":"markdown","073ea409":"markdown","aecfc3cd":"markdown","78ccf503":"markdown","33ebea81":"markdown","ed7e23a0":"markdown","e5a4d275":"markdown","7ae4e6ae":"markdown","fb54fec8":"markdown"},"source":{"87e84a4b":"! pip install dexplot","5da75e56":"# Importing the necessary libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px \nimport plotly.graph_objs as go\nfrom plotly.offline import iplot\nimport dexplot as dxp\nimport re\nimport string\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom wordcloud import WordCloud\nfrom nltk.tokenize import sent_tokenize, word_tokenize\nfrom nltk.util import ngrams\nfrom sklearn.feature_extraction.text import CountVectorizer","1dc01182":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a1ee0836":"youtube_TN = pd.read_csv('\/kaggle\/input\/chai-time-data-science\/YouTube Thumbnail Types.csv')\nepisodes = pd.read_csv('\/kaggle\/input\/chai-time-data-science\/Episodes.csv')\nanchor_TN = pd.read_csv('\/kaggle\/input\/chai-time-data-science\/Anchor Thumbnail Types.csv')\nresults = pd.read_csv('\/kaggle\/input\/chai-time-data-science\/Results.csv')\ndescription = pd.read_csv('\/kaggle\/input\/chai-time-data-science\/Description.csv')","ddd63ef7":"print(\"Youtube Thumbnails\")\nyoutube_TN.head()","69713a6a":"print(\"Anchor Thumbnails\")\nanchor_TN","a7afdd88":"print('episodes')\nepisodes.head()","4134f9e4":"print(\"results\")\nresults.head()","8f246825":"print(\"description\")\ndescription.head()","d5c680c3":"youtube_TN.info()","c4a525ea":"episodes.info()","b9ae4f20":"anchor_TN.info()","318252fe":"results.info()","19744698":"description.info()","0bcb8f65":"# integrate episodes and thumbnail types datasets\nimport datetime as datetime\n\n\nepisodes_youtube_TN = episodes.merge(\nyoutube_TN, left_on=\"youtube_thumbnail_type\", right_on=\"youtube_thumbnail_type\")\nepisodes_youtube_TN['recording_date'] = pd.to_datetime(episodes_youtube_TN[\"recording_date\"])\nepisodes_youtube_TN[\"release_date\"] = pd.to_datetime(episodes_youtube_TN[\"release_date\"])","b06a3797":"# Visualize the change in thumbnail types over the episodes\n\ndxp.count(\nval=\"release_date\",\ndata=episodes_youtube_TN,\nsplit=\"description\",\norientation=\"h\",\nstacked=True,\nfigsize=(12,24),\nxlabel=\"Number of episodes\")","72f9f149":"labels = episodes[\"heroes_gender\"].value_counts()[:10].index\nvalues = episodes[\"heroes_gender\"].value_counts()[:10].values\n\ncolors=['#2678bf', '#98adbf']\n\nfig = go.Figure(data=[go.Pie(labels = labels, values=values, textinfo=\"label+percent\",\n                            insidetextorientation=\"radial\", marker=dict(colors=colors))])\n\nfig.show()","f5c22392":"labels = episodes[\"heroes_nationality\"].value_counts()[:10].index\nvalues = episodes[\"heroes_nationality\"].value_counts()[:10].values\n\ncolors=['#bfbfbf',\n '#98adbf',\n '#1d4466',\n '#2678bf',\n '#2c6699',\n '#3780bf',\n '#3a88cc',\n '#4c89bf',\n '#729bbf',\n '#98adbf',\n '#bfbfbf'] \n\nfig = go.Figure(data=[go.Pie(labels=labels, values = values, textinfo=\"label+percent\",\n                            insidetextorientation=\"radial\", marker = dict(colors=colors))])\nfig.show()","6bf76309":"labels = episodes[\"heroes_location\"].value_counts()[:10].index\nvalues = episodes[\"heroes_location\"].value_counts()[:10].values\n\ncolors = episodes[\"heroes_location\"]\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, textinfo=\"label+percent\",\n                             insidetextorientation=\"radial\", marker=dict(colors=colors))])\nfig.show()    ","cc6a8f54":"labels = episodes['flavour_of_tea'].value_counts()[:10].index\nvalues = episodes['flavour_of_tea'].value_counts()[:10].values\n\ncolors = episodes['flavour_of_tea']\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, textinfo=\"label+percent\",\n                             insidetextorientation=\"radial\", marker=dict(colors=colors))])\nfig.show()    ","f4b1067a":"labels = episodes['youtube_thumbnail_type'].value_counts()[:10].index\nvalues = episodes['youtube_thumbnail_type'].value_counts()[:10].values\n\ncolors = episodes['youtube_thumbnail_type']\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, textinfo=\"label+percent\",\n                             insidetextorientation=\"radial\", marker=dict(colors=colors))])\nfig.show()    ","e06764f0":"dxp.count(val='category', data=episodes, figsize=(4,3), normalize=True)","d3a24138":"dxp.count(val='category', data=episodes, normalize=True, split=\"heroes_gender\", figsize=(4,3))","153e132d":"dxp.count(val='category', data=episodes, split=\"heroes_nationality\", figsize=(4,3), normalize=True)","c4770d7e":"dxp.count(val=\"heroes_nationality\", data=episodes, split=\"heroes_gender\", normalize=True, figsize=(10,6),\n         size=0.9, stacked=True)","94973e66":"dxp.count(val=\"heroes_nationality\", data=episodes, split=\"category\", normalize=True, stacked=True, figsize=(10,6), size=0.9)","2f425f9a":"dxp.count(val=\"heroes_nationality\", data=episodes, split=\"youtube_dislikes\", figsize=(10,3), normalize=True)","8570bf62":"dxp.count(val=\"heroes_nationality\", data=episodes, split=\"youtube_comments\", figsize=(10,3), normalize=True)","66bee912":"dxp.count(val=\"flavour_of_tea\", data=episodes, normalize=True, figsize=(8,5))","a76be8cf":"dxp.count(val=\"flavour_of_tea\", data=episodes, split=\"heroes_gender\", figsize=(6,4), normalize=True)","5532686d":"dxp.count(val=\"flavour_of_tea\", data=episodes, split=\"heroes_nationality\", figsize=(10,8), normalize=True,stacked=True)","a842cbc5":"episodes['episode_id'].count()","c44689ee":"labels = episodes['recording_time'].value_counts()[:10].index\nvalues = episodes['recording_time'].value_counts()[:10].values\n\ncolors = episodes['recording_time']\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, textinfo='label+percent', \n                             insidetextorientation='radial', marker=dict(colors=colors))])\nfig.show()","5111a54f":"labels = episodes['recording_date'].value_counts()[:10].index\nvalues = episodes['recording_date'].value_counts()[:10].values\n\ncolors = episodes['recording_date']\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, textinfo='label+percent', \n                             insidetextorientation='radial', marker=dict(colors=colors))])\nfig.show()","03348cd2":"labels = episodes['release_date'].value_counts()[:10].index\nvalues = episodes['release_date'].value_counts()[:10].values\n\ncolors = episodes['release_date']\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, textinfo='label+percent', \n                             insidetextorientation='radial', marker=dict(colors=colors))])\nfig.show()","4a223dc8":"labels = episodes['episode_duration'].value_counts()[:10].index\nvalues = episodes['episode_duration'].value_counts()[:10].values\n\ncolors = episodes['episode_duration']\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, textinfo='label+percent', \n                             insidetextorientation='radial', marker=dict(colors=colors))])\nfig.show()","0902940a":"dxp.count(val='flavour_of_tea', data=episodes, split=\"recording_time\", orientation='v', stacked=True)","4e66e68f":"dxp.count(val='flavour_of_tea', data=episodes, split=\"recording_date\", orientation='v', figsize = (10,8), stacked=True)","0577e9fb":"dxp.count(val='flavour_of_tea', data=episodes, split=\"release_date\", orientation='v', figsize = (10,8), stacked=True)","2675086c":"dxp.count(val='flavour_of_tea', data=episodes, split=\"episode_duration\", orientation='v', figsize = (10,8), stacked=True)","090d9993":"import cufflinks as cf\ncf.go_offline()\ncf.set_config_file(offline=False, world_readable=True)","c2ee5cca":"episodes['episode_duration'].iplot(kind='area',fill=True,opacity=1,xTitle='Episode',yTitle='Duration(sec)')","5436c63b":"df = episodes[['release_date','episode_duration']]\ndf.set_index('release_date').iplot(kind='scatter',mode='markers',symbol='cross',xTitle='Release Date',yTitle='Duration(sec)')","bee40232":"description.head()","740eeacb":"# text preprocessing helper functions\n\ndef clean_text(text):\n    '''Make text lowercase, remove text in square brackets,remove links,remove punctuation\n    and remove words containing numbers.'''\n    text = text.lower()\n    text = re.sub('\\[.*?\\]', '', text)\n    text = re.sub('https?:\/\/\\S+|www\\.\\S+', '', text)\n    text = re.sub('<.*?>+', '', text)\n    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)\n    text = re.sub('\\n', '', text)\n    text = re.sub('\\w*\\d\\w*', '', text)\n    return text\n\n\ndef text_preprocessing(text):\n    \"\"\"\n    Cleaning and parsing the text.\n\n    \"\"\"\n    tokenizer = nltk.tokenize.RegexpTokenizer(r'\\w+')\n    nopunc = clean_text(text)\n    tokenized_text = tokenizer.tokenize(nopunc)\n    #remove_stopwords = [w for w in tokenized_text if w not in stopwords.words('english')]\n    combined_text = ' '.join(tokenized_text)\n    return combined_text","38c86d05":"# Applying the cleaning function to both test and training datasets\ndescription['description'] = description['description'].apply(str).apply(lambda x: text_preprocessing(x))\ndescription.head()\n","39040861":"from wordcloud import WordCloud\n\n\nword_cloud = WordCloud(\n                       width=1600,\n                       height=800,\n                       colormap='PuRd', \n                       margin=0,\n                       max_words=500, # Maximum numbers of words we want to see \n                       min_word_length=3, # Minimum numbers of letters of each word to be part of the cloud\n                       max_font_size=150, min_font_size=20,  # Font size range\n                       background_color=\"white\").generate(\" \".join(description['description']))\n\nplt.figure(figsize=(10, 16))\nplt.imshow(word_cloud, interpolation=\"gaussian\")\nplt.axis(\"off\")\nplt.show()","05f588c7":"Viewing the datasets for some useful insights","6699c948":"## Genderwise Tea Distribution","ccbb2256":"## Episode Duration vs Release Date","ace0d813":"# Dataset Loading\n","17e1d6b7":"Although the nationality of the Heroes is different but most of them are located in  the USA","0dd79018":"## Recording Date","63d5e02c":"## Gender Distribution","60d6872d":"## Nationality","7dda0f1f":"![](http:\/\/)Nationality wise category and gender distribution","9d1a97a6":"Youtube Dislikes and Comments","f2f38659":"# Tea","1ff02117":"# Episodes","f3250bbd":"## Release Date Vs Tea Flavour","eead3527":"## Heroes Location","b0c876de":"# Heroes","29f9f706":"## Release Date","415f8901":"## Episode Duration","073ea409":"## Episode Duration Vs Tea Flavour","aecfc3cd":"## Episode duration in sec","78ccf503":"## Recording Date Vs Tea Flavour","33ebea81":"Genderwise Category Distribution","ed7e23a0":"## Recording Time vs Tea Flavour","e5a4d275":"Majority of people who are interviewed have the U.S.A. Nationality","7ae4e6ae":"# Category Distribution","fb54fec8":"## Total no of Episodes recorded"}}