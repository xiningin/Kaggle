{"cell_type":{"d33972d2":"code","c9253a8d":"code","c8057a90":"code","fef7bcf4":"code","4a6ddc46":"code","32fec051":"code","9b6cad81":"code","a7b2eec7":"code","170fe80b":"code","b89c12d6":"code","6322e823":"code","6ed62b78":"code","50346616":"code","85b326ee":"code","7e20808c":"code","acc7612e":"code","437ac4ef":"code","7fca8628":"code","12d72268":"code","5a5f46ff":"code","6e59924d":"code","9379b090":"markdown","a7f46b7c":"markdown","68fdc88a":"markdown"},"source":{"d33972d2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\n%matplotlib inline\nfrom sklearn import tree\nfrom sklearn.metrics import r2_score\n\nfrom sklearn.metrics import accuracy_score","c9253a8d":"# Loading the data\ntrain = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n\n# Store our test passenger IDs for easy access\nPassengerId = test['PassengerId']\n\n# Showing overview of the train dataset\ntrain\n","c8057a90":"full_data = [train, test]\n\n# Feature that tells whether a passenger had a cabin on the Titanic\ntrain['Has_Cabin'] = train[\"Cabin\"].apply(lambda x: 0 if type(x) == float else 1)\ntest['Has_Cabin'] = test[\"Cabin\"].apply(lambda x: 0 if type(x) == float else 1)\n\n# Create new feature FamilySize as a combination of SibSp and Parch\nfor dataset in full_data:\n    dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1\n# Create new feature IsAlone from FamilySize\nfor dataset in full_data:\n    dataset['IsAlone'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1\n    \n    \n# Remove all NULLS in the Embarked column    \nfor dataset in full_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')\n# Remove all NULLS in the Fare column\nfor dataset in full_data:\n    dataset['Fare'] = dataset['Fare'].fillna(train['Fare'].median())\n# Remove all NULLS in the Age column\nfor dataset in full_data:\n    dataset['Age'] = dataset['Age'].fillna(train['Age'].mean())\n    \n# Define function to extract titles from passenger names\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+)\\.', name)\n    # If the title exists, extract and return it.\n    if title_search:\n        return title_search.group(1)\n    return \"\"\n\nfor dataset in full_data:\n    dataset['Title'] = dataset['Name'].apply(get_title)\n    \n# Group all non-common titles into one single grouping \"Rare\"\nfor dataset in full_data:\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n\nfor dataset in full_data:\n    # Mapping Sex\n    dataset['Sex'] = dataset['Sex'].map( {'female': 0, 'male': 1} ).astype(int)\n    # Mapping titles\n    title_mapping = {\"Mr\": 1, \"Master\": 2, \"Mrs\": 3, \"Miss\": 4, \"Rare\": 5}\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)\n    # Mapping Embarked\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n    \n    # Mapping Fare\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[ dataset['Fare'] > 31, 'Fare'] = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)\n    \n    # Mapping Age\n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age'] ;\n    \n","fef7bcf4":"# Feature selection: remove variables no longer containing relevant information\ndrop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp']\ntrain = train.drop(drop_elements, axis = 1)\ntest  = test.drop(drop_elements, axis = 1)","4a6ddc46":"train.head()","32fec051":"test.head()","9b6cad81":"count_classes = pd.value_counts(train['Survived'], sort=True)\ncount_classes.plot(kind='bar', rot=0)\nplt.title('survived class Distribution')\nplt.xticks(range(2))\nplt.xlabel('Class')\nplt.ylabel('Frequency')\nplt.show()","a7b2eec7":"NoSurvived = len(train[train.Survived == 0])\nSurvived = len(train[train.Survived == 1])\n\nprint(\"Percentage of Passenger who didn't Survived: {:.2f}%\".format((NoSurvived \/ (len(train.Survived))*100)))\nprint(\"Percentage of Passenger who survived: {:.2f}%\".format((Survived \/ (len(train.Survived))*100)))","170fe80b":"# Correlation Matrix\n\ncorr_matrix = train.corr()\ncorr_matrix","b89c12d6":"!pip install pycaret","6322e823":"from pycaret.classification import *\nclf1 = setup(data = train, \n             target = 'Survived',\n             numeric_imputation = 'mean',\n             categorical_features = ['Sex','Embarked', 'Pclass', 'Parch', 'Has_Cabin', 'IsAlone', 'Title'], \n             silent = True,\n            remove_outliers = True,\n            normalize = True)","6ed62b78":"compare_models()","50346616":"model = create_model('gbc')","85b326ee":"model=tune_model('gbc')","7e20808c":"model=tune_model('gbc')","acc7612e":"plot_model(estimator = model, plot = 'auc')","437ac4ef":"plot_model(estimator = model, plot = 'feature')","7fca8628":"plot_model(estimator = model, plot = 'confusion_matrix')","12d72268":"predictions = predict_model(model, data=test)\npredictions.head()","5a5f46ff":"submissions=pd.DataFrame({\"PassengerId\": PassengerId,\n                         \"Survived\": predictions['Label']})\nsubmissions.to_csv(\"submission.csv\", index=False, header=True)","6e59924d":"submissions","9379b090":"# Pycaret","a7f46b7c":"# Plot curve","68fdc88a":"# Prediction"}}