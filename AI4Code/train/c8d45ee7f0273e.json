{"cell_type":{"27740943":"code","162dc973":"code","0163eb85":"code","2c4ad654":"code","38cd8226":"code","a23248b9":"code","0786495b":"code","832cd6e7":"code","c9a8fe85":"code","9b334ab4":"code","76900793":"code","d37557c8":"code","0b90de19":"code","678ddbad":"code","802703ad":"code","64727936":"code","345f0bb7":"code","79905cde":"code","beca5866":"code","c12175b9":"code","66cbcf64":"code","5caf2418":"code","04f0195a":"code","420ba10d":"code","438bf4b2":"code","d8c2bbd0":"code","125af1df":"code","73a09235":"code","a1b117eb":"code","403a71ce":"code","90682291":"code","d8eb363a":"code","48f1784d":"markdown","a3e24c9c":"markdown","3fed48a6":"markdown","ef9ee297":"markdown","27cd4310":"markdown","e18e368f":"markdown","5318efef":"markdown","8bcd76ed":"markdown","c2e3b127":"markdown","683c0e72":"markdown","11d8d68c":"markdown","91f3297d":"markdown","6b0c3ba1":"markdown","d264bda2":"markdown","db48989c":"markdown","c8214072":"markdown","3c4c7063":"markdown","d3d9999e":"markdown","cb613ee7":"markdown","8fe8c522":"markdown","95d60e7e":"markdown","57283194":"markdown"},"source":{"27740943":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","162dc973":"pip install pmdarima","0163eb85":"import pandas as pd\nimport numpy as np\n\n#visualisation imports\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# consistent plot size\nfrom pylab import rcParams\nrcParams['figure.figsize'] = (12,5)\n\n# handle unwanted warnings\nimport warnings\nwarnings.filterwarnings(action='ignore',category=DeprecationWarning)\nwarnings.filterwarnings(action='ignore',category=FutureWarning)\n\n# time series related imports\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.graphics.tsaplots import plot_acf,plot_pacf\nfrom pmdarima import auto_arima\n\n# Load the Restaurant visitors dataset\ndf = pd.read_csv('\/kaggle\/input\/time-series-data-1\/RestaurantVisitors.csv',index_col='date',parse_dates=True)","2c4ad654":"df.head()","38cd8226":"df.tail()","a23248b9":"df.index.freq = 'D'","0786495b":"df1 = df.dropna()\ndf1.tail()","832cd6e7":"# change the dtype of the restaurant columns\ncols = ['rest1','rest2','rest3','rest4']\n\nfor col in cols:\n    df1[col] = df1[col].astype(int)\ndf1.info()","c9a8fe85":"title = 'Restaurant Visitors'\nxlabel = ''\nylabel = 'Visitors per Day'\n\nax = df1['total'].plot(title=title)\nax.autoscale(axis='x',tight=True)\nax.set(xlabel=xlabel,ylabel=ylabel);","9b334ab4":"title='Restaurant Visitors'\nylabel='Visitors per day'\nxlabel='' # we don't really need a label here\n\nax = df1['total'].plot(figsize=(16,5),title=title)\nax.autoscale(axis='x',tight=True)\nax.set(xlabel=xlabel, ylabel=ylabel)\nfor i in df1[df1['holiday']==1].index:\n    ax.axvline(x=i,color='k',alpha=0.4)","76900793":"result = seasonal_decompose(df1['total'])","d37557c8":"result.plot();","0b90de19":"from statsmodels.tsa.stattools import adfuller","678ddbad":"def dickey_fuller(series,title='Dickey Fuller test of your dataset reveals the following about stationarity'):\n    '''This function takes a series and returns whether the time series is stationary or not.\n    The result is based on the p-value returned by the dickey fuller test    \n    '''\n    \n    print(f'Test of Stationarity using Dickey Fuller Test of the dataset {title}')\n    result = adfuller(series.dropna(),autolag='AIC')\n    labels = ['ADF test statistics','p-value','#lags','# observations']\n    \n    out = pd.Series(data=result[0:4],index=labels)\n    \n    for key,val in result[4].items():\n        out[f'critical value ({key})'] = val\n        \n    print(out.to_string())\n    \n    if result[1] <= 0.05:\n        print(\"Strong evidence against the null hypothesis\")\n        print(\"Reject the null hypothesis\")\n        print(\"Data has no unit root and is stationary\")\n    else:\n        print(\"Weak evidence against the null hypothesis\")\n        print(\"Fail to reject the null hypothesis\")\n        print(\"Data has a unit root and is non-stationary\")         \n    ","802703ad":"dickey_fuller(df1['total'])","64727936":"warnings.filterwarnings(action='ignore',message='')\nauto_arima(df1['total'],seasonal=True,m=7).summary()","345f0bb7":"len(df1)","79905cde":"train = df1.iloc[:436]\ntest = df1.iloc[436:]","beca5866":"model = SARIMAX(train['total'],order=(0,0,0),seasonal_order=(1,0,1,7),enforce_invertibility=False)\nresults = model.fit()\nresults.summary()","c12175b9":"start = len(train)\nend = len(train) + len(test) - 1\npredictions = results.predict(start=start,end=end,dynamic=False).rename('SARIMA(0,0,0)(1,0,[1],7) Predictions')","66cbcf64":"title = 'Restaurant Visitors'\nylabel = 'Visitors per Day'\nxlabel = ''\n\nax = test['total'].plot(legend=True,title=title)\npredictions.plot(legend=True)\nax.autoscale(axis='x',tight=True)\nax.set(xlabel=xlabel,ylabel=ylabel)\nfor x in test[test['holiday']==1].index:\n    ax.axvline(x=x,color='k',alpha=0.3)","5caf2418":"from statsmodels.tools.eval_measures import mse,rmse","04f0195a":"mse_error = mse(test['total'],predictions)\nrmse_error = rmse(test['total'],predictions)","420ba10d":"print(f'SARIMA(0,0,0)(1,0,[1],7) MSE Error: {mse_error:11.10}')\nprint(f'SARIMA(0,0,0)(0,0,[1],7) RMSE Error: {rmse_error:11.10}')","438bf4b2":"model = SARIMAX(train['total'],exog=train['holiday'],order=(0,0,0),seasonal_order=(1,0,[1],7),enforce_invertibility=False)\nresults = model.fit()\nresults.summary()","d8c2bbd0":"# Obtain the predicted values\nstart = len(train)\nend = len(train)+len(test)-1\nexog_forecast = test[['holiday']] ## requires two brackets to yield a shape of (35,1), print test[['holiday']] if you like\npredictions =  results.predict(start=start,end=end,exog=exog_forecast).rename('SARIMAX(0,0,0)(1,0,[1],7) Predictions')\n","125af1df":"test[['holiday']][:10]","73a09235":"title = 'Restaurant Visitors'\nylabel = 'Visitors per Day'\nxlabel = ''\n\nax = test['total'].plot(legend=True,title=title)\npredictions.plot(legend=True)\nax.autoscale(axis='x',tight=True)\nax.set(xlabel=xlabel,ylabel=ylabel)\nfor x in test[test['holiday']==1].index:\n    ax.axvline(x=x,color='k',alpha=0.3)","a1b117eb":"# Print values from SARIMA above\nprint(f'SARIMA(1,0,0)(2,0,0,7) MSE Error: {mse_error:11.10}')\nprint(f'SARIMA(1,0,0)(2,0,0,7) RMSE Error: {rmse_error:11.10}')\nprint()\n\nmse_error_x = mse(test['total'], predictions)\nrmse_error_x = rmse(test['total'], predictions)\n\n# Print new SARIMAX values\nprint(f'SARIMAX(1,0,0)(2,0,0,7) MSE Error: {mse_error_x:11.10}')\nprint(f'SARIMAX(1,0,0)(2,0,0,7) RMSE Error: {rmse_error_x:11.10}')","403a71ce":"model = SARIMAX(df1['total'],exog=df1['holiday'],order=(1,0,0),seasonal_order=(2,0,0,7),enforce_invertibility=False)\nresults = model.fit()\nexog_forecast = df[478:][['holiday']] ## forecast into the original dataframe where the values were NaN for visitors\nfcast = results.predict(len(df1),len(df1)+38,exog=exog_forecast).rename('SARIMAX(1,0,0)(2,0,0,7) Forecast')","90682291":"# Plot the forecast alongside historical values\ntitle='Restaurant Visitors'\nylabel='Visitors per day'\nxlabel=''\n\nax = df1['total'].plot(legend=True,figsize=(16,6),title=title)\nfcast.plot(legend=True)\nax.autoscale(axis='x',tight=True)\nax.set(xlabel=xlabel, ylabel=ylabel)\nfor x in df.query('holiday==1').index: \n    ax.axvline(x=x, color='k', alpha = 0.3);","d8eb363a":"df[478:].head()","48f1784d":"## Test for Stationarity \n### Augmented Dickey Fuller Test for Stationarity","a3e24c9c":"## Perform the standard imports and load the datasets\n\n","3fed48a6":"## Obtain the predicted values and compare against the true test values","ef9ee297":"## Thank you, please leave a comment if you have any feedback.","27cd4310":"The datatype of the restaurant visitors is in floats. Lets check a few additional rows. ","e18e368f":"## Split into train and test set","5318efef":"### For quick reference, here is the original dataset df features beyond iloc 478","8bcd76ed":"We can see that the exogenous variable (holidays) had a positive impact on the forecast by raising predicted values.","c2e3b127":"Okay, so there are NaN are pandas does not use intergers to represent the missing values. Hence these are floats. We will eventually drop these missing rows. Before that lets change the dtype of restaurant visitor column to int64","683c0e72":"### Plot the predicted and the real test values","11d8d68c":"## Closer look at the holidays\nlets try to shade the holidays in the existing plot","91f3297d":"Passing dynamic=False means that forecasts at each point are generated using the full history up to that point (all lagged values).","6b0c3ba1":"## Retrain on the full data and forecast into the future\nHere the future timing would be those dates where we had the NaN values for the visitors but the holiday columns had the values. This way we can forecast the number of visitors during the normal days and also the future holidays.","d264bda2":"## Error Trend and Seasonality Decomposition","db48989c":"# SARIMAX - Seasonal ARIMA with eXogenous regressor\n\nMany times,in time series modeling we encounter cases where there is an external factor which can influence the outcome for a particular time period. These external factors can be considered to be exogenous variables or regressors. In this example, I have taken the daily restaurant visitors for forecasting into the future. Mostly, time series models like AR, ARMA, ARIMA and also SARIMA are based on endogenous or endog variable, basically all factors which play together and define thenature of the time series. Naturally, in the case of restaurant visitors, the number of visitors would change and heavily depend on whether a particular day is a regular day or a holiday like Sundays for example. The dataset constains a separate feature called as holidays where the value 1 means it is a holiday. \n\nWe will first forecast using only SARIMA without exogenous variable 'holidays' and then compare the results when we include the exogenous variable $holidays$","c8214072":"## Plot the source data","3c4c7063":"## Evaluate the model predictions with the exogenous variable included and compare with the previous model errors","d3d9999e":"## Fit the SARIMAX Model","cb613ee7":"## Now we will include the exog variable","8fe8c522":"Clearly, the model performs better when we included the exogneous regressor holiday in the training. Now  this is good enough model to forecast into the real future. We will train a new model on the entire dataset included with the exogenous variable.","95d60e7e":"## Run pmdarima to get the recommended orders (p,d,q)(P,D,Q)m","57283194":"## Evaluate the Model"}}