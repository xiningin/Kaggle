{"cell_type":{"59430d1b":"code","b5193c8b":"code","0c4e23a9":"code","0d1137d0":"code","de1b9956":"code","e64f0624":"code","1cbf87bf":"code","6cd6a50b":"code","3da7daef":"code","0151c2cb":"code","0427d934":"code","9bb7593f":"code","2d5e5c87":"code","3888c5d3":"code","13f60cde":"code","38e50f6c":"code","f0d7ce21":"code","fc3c6ca0":"code","6dae9767":"code","9ae91ecb":"code","a719f041":"code","66c6d81f":"code","70383a5e":"code","1ae31fd4":"code","0319f170":"code","86ad18b7":"code","1de97a1f":"code","34b80578":"code","02a76a72":"code","705a60e4":"code","5343bb2a":"code","a55822c0":"code","0b0c8b27":"markdown","f7833d60":"markdown","c02c46c9":"markdown","93184603":"markdown","ef646c5c":"markdown","80789765":"markdown","23041a62":"markdown","f639c8dd":"markdown","c76de413":"markdown","4b93d9a6":"markdown"},"source":{"59430d1b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b5193c8b":"data = pd.read_csv(\"..\/input\/mbti-type\/mbti_1.csv\")","0c4e23a9":"data.head()","0d1137d0":"types = np.unique(data.type.values)","de1b9956":"def get_type_index(string):\n    return list(types).index(string)","e64f0624":"data['type_index'] = data['type'].apply(get_type_index)","1cbf87bf":"data.posts.values[0]","6cd6a50b":"import string\nimport re\n\ndef clean_text(text):\n    regex = re.compile('[%s]' % re.escape('|'))\n    text = regex.sub(\" \", text)\n    words = str(text).split()\n    words = [i.lower() + \" \" for i in words]\n    words = [i for i in words if not \"http\" in i]\n    words = \" \".join(words)\n    words = words.translate(words.maketrans('', '', string.punctuation))\n    return words\n","3da7daef":"data['cleaned_text'] = data['posts'].apply(clean_text)","0151c2cb":"data.cleaned_text.values[0]","0427d934":"data.head()","9bb7593f":"from sklearn.model_selection import train_test_split\n\ntrain, test = train_test_split(data)\ntrain, val = train_test_split(train)","2d5e5c87":"import tensorflow as tf\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n\nvocab_size = 10000\ntrunc_type = \"post\"\npad_type = \"post\"\noov_tok = \"<OOV>\"\ntokenizer = Tokenizer(num_words = vocab_size, oov_token=oov_tok)\ntokenizer.fit_on_texts(data.cleaned_text.values)","3888c5d3":"maxlen = 1500\ntrain_sequences = tokenizer.texts_to_sequences(train.cleaned_text.values)\ntrain_padded = pad_sequences(train_sequences, maxlen = maxlen, truncating = trunc_type, padding = pad_type)\n\nval_sequences = tokenizer.texts_to_sequences(val.cleaned_text.values)\nval_padded = pad_sequences(val_sequences, maxlen = maxlen, truncating = trunc_type, padding = pad_type)\n","13f60cde":"train_padded","38e50f6c":"one_hot_labels = tf.keras.utils.to_categorical(train.type_index.values, num_classes=16)\nval_labels= tf.keras.utils.to_categorical(val.type_index.values, num_classes=16)","f0d7ce21":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Bidirectional, Flatten, Dropout, Conv1D, GlobalMaxPooling1D\n\ndef create_model():\n    op = tf.keras.optimizers.Adam(learning_rate=0.00001)\n\n    model = Sequential()\n    model.add(Embedding(vocab_size, 256, input_length=maxlen-1))\n    model.add(Dropout(0.3))\n    model.add(Bidirectional(LSTM(200, return_sequences=True)))\n    model.add(Dropout(0.3))\n    model.add(Bidirectional(LSTM(20)))\n    model.add(Dropout(0.3))\n    model.add(Dense(64, activation='relu'))\n    model.add(Dense(16, activation='softmax'))\n    model.compile(loss='categorical_crossentropy', optimizer=op, metrics=['accuracy'])\n    return model","fc3c6ca0":"use_tpu = True\nif use_tpu:\n    # Create distribution strategy\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\n\n    # Create model\n    with strategy.scope():\n        model = create_model()\nelse:\n    model = create_model()\n    \nmodel.summary()","6dae9767":"model.fit(train_padded, one_hot_labels, epochs =20, verbose = 1, \n          validation_data = (val_padded, val_labels),  callbacks = [tf.keras.callbacks.EarlyStopping(patience = 3)])","9ae91ecb":"from tensorflow.keras import layers\nfrom tensorflow import keras\nclass MultiHeadSelfAttention(layers.Layer):\n    def __init__(self, embed_dim, num_heads=8):\n        super(MultiHeadSelfAttention, self).__init__()\n        self.embed_dim = embed_dim\n        self.num_heads = num_heads\n        if embed_dim % num_heads != 0:\n            raise ValueError(\n                f\"embedding dimension = {embed_dim} should be divisible by number of heads = {num_heads}\"\n            )\n        self.projection_dim = embed_dim \/\/ num_heads\n        self.query_dense = layers.Dense(embed_dim)\n        self.key_dense = layers.Dense(embed_dim)\n        self.value_dense = layers.Dense(embed_dim)\n        self.combine_heads = layers.Dense(embed_dim)\n\n    def attention(self, query, key, value):\n        score = tf.matmul(query, key, transpose_b=True)\n        dim_key = tf.cast(tf.shape(key)[-1], tf.float32)\n        scaled_score = score \/ tf.math.sqrt(dim_key)\n        weights = tf.nn.softmax(scaled_score, axis=-1)\n        output = tf.matmul(weights, value)\n        return output, weights\n\n    def separate_heads(self, x, batch_size):\n        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.projection_dim))\n        return tf.transpose(x, perm=[0, 2, 1, 3])\n\n    def call(self, inputs):\n        # x.shape = [batch_size, seq_len, embedding_dim]\n        batch_size = tf.shape(inputs)[0]\n        query = self.query_dense(inputs)  # (batch_size, seq_len, embed_dim)\n        key = self.key_dense(inputs)  # (batch_size, seq_len, embed_dim)\n        value = self.value_dense(inputs)  # (batch_size, seq_len, embed_dim)\n        query = self.separate_heads(\n            query, batch_size\n        )  # (batch_size, num_heads, seq_len, projection_dim)\n        key = self.separate_heads(\n            key, batch_size\n        )  # (batch_size, num_heads, seq_len, projection_dim)\n        value = self.separate_heads(\n            value, batch_size\n        )  # (batch_size, num_heads, seq_len, projection_dim)\n        attention, weights = self.attention(query, key, value)\n        attention = tf.transpose(\n            attention, perm=[0, 2, 1, 3]\n        )  # (batch_size, seq_len, num_heads, projection_dim)\n        concat_attention = tf.reshape(\n            attention, (batch_size, -1, self.embed_dim)\n        )  # (batch_size, seq_len, embed_dim)\n        output = self.combine_heads(\n            concat_attention\n        )  # (batch_size, seq_len, embed_dim)\n        return output","a719f041":"class TransformerBlock(layers.Layer):\n    def __init__(self, embed_dim, num_heads, ff_dim, rate=0.1):\n        super(TransformerBlock, self).__init__()\n        self.att = MultiHeadSelfAttention(embed_dim, num_heads)\n        self.ffn = keras.Sequential(\n            [layers.Dense(ff_dim, activation=\"relu\"), layers.Dense(embed_dim),]\n        )\n        self.layernorm1 = layers.LayerNormalization(epsilon=1e-6)\n        self.layernorm2 = layers.LayerNormalization(epsilon=1e-6)\n        self.dropout1 = layers.Dropout(rate)\n        self.dropout2 = layers.Dropout(rate)\n\n    def call(self, inputs, training):\n        attn_output = self.att(inputs)\n        attn_output = self.dropout1(attn_output, training=training)\n        out1 = self.layernorm1(inputs + attn_output)\n        ffn_output = self.ffn(out1)\n        ffn_output = self.dropout2(ffn_output, training=training)\n        return self.layernorm2(out1 + ffn_output)","66c6d81f":"class TokenAndPositionEmbedding(layers.Layer):\n    def __init__(self, maxlen, vocab_size, emded_dim):\n        super(TokenAndPositionEmbedding, self).__init__()\n        self.token_emb = layers.Embedding(input_dim=vocab_size, output_dim=emded_dim)\n        self.pos_emb = layers.Embedding(input_dim=maxlen, output_dim=emded_dim)\n\n    def call(self, x):\n        maxlen = tf.shape(x)[-1]\n        positions = tf.range(start=0, limit=maxlen, delta=1)\n        positions = self.pos_emb(positions)\n        x = self.token_emb(x)\n        return x + positions\n","70383a5e":"embed_dim = 32  # Embedding size for each token\nnum_heads = 2  # Number of attention heads\nff_dim = 32  # Hidden layer size in feed forward network inside transformer\n\ndef create_model(): \n    inputs = layers.Input(shape=(maxlen,))\n    embedding_layer = TokenAndPositionEmbedding(maxlen, vocab_size, embed_dim)\n    x = embedding_layer(inputs)\n    transformer_block = TransformerBlock(embed_dim, num_heads, ff_dim)\n    x = transformer_block(x)\n    # x = layers.GlobalAveragePooling1D()(x)\n    # x = layers.Dropout(0.1)(x)\n    x = (Bidirectional(LSTM(200, return_sequences=True)))(x)\n    x = (Dropout(0.3))(x)\n    x = (Bidirectional(LSTM(20)))(x)\n    x = layers.Dense(20, activation=\"relu\")(x)\n    x = layers.Dropout(0.1)(x)\n    outputs = layers.Dense(16, activation=\"softmax\")(x)\n    \n    op = tf.keras.optimizers.Adam(learning_rate=0.00001)\n\n    model = keras.Model(inputs=inputs, outputs=outputs)\n    model.compile(op, 'categorical_crossentropy', metrics = ['accuracy'])\n    return model","1ae31fd4":"use_tpu = True\nif use_tpu:\n    # Create distribution strategy\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\n\n    # Create model\n    with strategy.scope():\n        model = create_model()\nelse:\n    model = create_model()\n    \nmodel.summary()","0319f170":"model.fit(train_padded, one_hot_labels, epochs =30, verbose = 1, \n          validation_data = (val_padded, val_labels), callbacks = [tf.keras.callbacks.EarlyStopping(patience = 3)])","86ad18b7":"import transformers\ntokenizer = transformers.AutoTokenizer.from_pretrained('bert-large-uncased')","1de97a1f":"maxlen = 1500\n\ntrain_input_ids = [tokenizer.encode(str(i), max_length = maxlen , pad_to_max_length = True) for i in train.cleaned_text.values]\nval_input_ids = [tokenizer.encode(str(i), max_length = maxlen , pad_to_max_length = True) for i in val.cleaned_text.values]","34b80578":"def create_model(): \n    input_word_ids = tf.keras.layers.Input(shape=(maxlen,), dtype=tf.int32,\n                                           name=\"input_word_ids\")\n    bert_layer = transformers.TFBertModel.from_pretrained('bert-large-uncased')\n    bert_outputs = bert_layer(input_word_ids)[0]\n    pred = tf.keras.layers.Dense(16, activation='softmax')(bert_outputs[:,0,:])\n    \n    model = tf.keras.models.Model(inputs=input_word_ids, outputs=pred)\n    loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)\n    model.compile(loss='categorical_crossentropy', optimizer=tf.keras.optimizers.Adam(\n    learning_rate=0.00001), metrics=['accuracy'])\n    return model","02a76a72":"use_tpu = True\nif use_tpu:\n    # Create distribution strategy\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\n\n    # Create model\n    with strategy.scope():\n        model = create_model()\nelse:\n    model = create_model()\n    \nmodel.summary()","705a60e4":"batch_size = 16\n\nmodel.fit(np.array(train_input_ids), one_hot_labels,validation_data = (np.array(val_input_ids), val_labels),\n          verbose = 1, epochs = 20, batch_size = batch_size,  callbacks = [tf.keras.callbacks.EarlyStopping(patience = 5)])","5343bb2a":"test_input_ids = [tokenizer.encode(str(i), max_length = maxlen , pad_to_max_length = True) for i in test.cleaned_text.values]\ntest_labels= tf.keras.utils.to_categorical(test.type_index.values, num_classes=16)","a55822c0":"model.evaluate(np.array(test_input_ids), test_labels)","0b0c8b27":"Using a TPU can greatly reduce the amount of time spent training the model.","f7833d60":"That one didn't work too well, either. Looks like I'm going to have to bring out the big guns. BERT is arguably the most powerful transformer out there right now. For more information: https:\/\/towardsdatascience.com\/bert-explained-state-of-the-art-language-model-for-nlp-f8b21a9b6270","c02c46c9":"The first thing I want to do is turn the personality types into numbered categories, ranging from 0 to 15. These will serve as the output of the model when it is categorizing people.","93184603":"The Myers-Briggs Type Indicator (MBTI) is one of the most widely-used personality tests. It classifies people into 16 4-letter categories. For more information on the MBTI, see: https:\/\/www.16personalities.com\/personality-types\n\nThis dataset contains a person's Myers-Briggs type and the text of their online posts. So, can we use deep learning to predict someone's personality type based on what they write online?","ef646c5c":"This model didn't do very well, only achieving around 20% accuracy. This is a difficult challenge- to classify people into 16 different categories based on text that may loosely correlate with those categories. Let's see if we can do a bit better by incorporating a transformer. I used the one from this Keras example: https:\/\/keras.io\/examples\/nlp\/text_classification_with_transformer\/\n\nFor more information about transformers in general, see: https:\/\/medium.com\/inside-machine-learning\/what-is-a-transformer-d07dd1fbec04","80789765":"So, our model is going to take in these arrays of numbers that represent the text, and it's going to output the personality type that it thinks is associated with it. Here, I'm going to convert the personality types to one-hot-encoded labels. This simply means that to represent a particular category, we make an array with the length of the total possible number of categories, and make all of the values zero except at the index of the category we're trying to represent. ","23041a62":"Now, we split the data into training, testing, and validation sets,","f639c8dd":"The BERT model isn't perfect, but it's much better than the other models. Looks like there is some relationship between your personality type and what you post online, after all. ","c76de413":"Keras has a great tokenizer that we can use to turn sequences of words into arrays of numbers. For more information, see: https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/preprocessing\/text\/Tokenizer","4b93d9a6":"Now, I want to clean the text to get rid of hyperlinks, puncuation, and anything else that's cluttering up the text. Specifically, the pipe (|) character seems like it separates different posts, but without spaces between them. First, I'm going to replace the pipes with spaces so that the tokenizer won't parse those parts as one long word. Then, I'll clean up the rest."}}