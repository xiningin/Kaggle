{"cell_type":{"609a93c0":"code","07b507ec":"code","e44cb7ae":"code","348aa806":"code","3ee48dd0":"code","500ed7eb":"code","cd1c9400":"code","d9769732":"code","c62ada5e":"code","61cfa96d":"code","776b7bf3":"markdown","4defcae4":"markdown","2022c972":"markdown","577f0513":"markdown"},"source":{"609a93c0":"import matplotlib.pyplot as plt\nimport numpy as np \nimport pandas as pd \n\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import Pipeline","07b507ec":"PATH_DATA = '..\/input\/covid19-global-forecasting-week-5\/'\nRANDOM_STATE = 0","e44cb7ae":"def MakeDataFrame(file, Path = PATH_DATA):\n    df = (pd.read_csv(f'{PATH_DATA}{file}.csv'\n                      , sep = ','\n                      , header = 0)\n         )\n    \n    df.Date = pd.to_datetime(df.Date).dt.strftime(\"%Y%m%d\").astype(int)\n    \n    return df\n\ndf = MakeDataFrame('train')\n\ndf.head()","348aa806":"Grafico, ax1 = plt.subplots()\n\nax1.pie(np.array(df.groupby('Target').sum()['TargetValue'])\n        , explode = (0.1, 0.2)\n        , autopct = '%1.2f%%'\n        , textprops = {'fontsize': 14, 'color': 'w'}\n        , colors = ['b','r']\n        , shadow = True\n        , startangle = 10\n       )\n\nplt.title('Fatalities vs confirmed cases')\nax1.axis('equal') \nGrafico.show()","3ee48dd0":"XE, XT, ye, yt = train_test_split(df.iloc[:,1:-1]\n                                  , df['TargetValue']\n                                  , test_size = 0.2\n                                  , random_state = RANDOM_STATE)\n\nXE.head()","500ed7eb":"Nums = Pipeline(\n    steps = [\n        ('imputer', SimpleImputer(strategy = 'median'))\n        , ('scaler' , StandardScaler())\n    ])\n\nText = Pipeline(\n    steps = [\n        ('imputer', SimpleImputer(strategy = 'constant', fill_value = 'missing'))\n        , ('onehot' , OneHotEncoder(handle_unknown = 'ignore'))\n    ])\n\nPipe = ColumnTransformer(\n    n_jobs = -1\n    , transformers = [\n        ('num', Nums, XE.select_dtypes(include = ['int64','float64']).columns)\n        , ('cat', Text, XE.select_dtypes(include = ['object']).columns)\n    ])\n\nModel = Pipeline(\n    steps=[\n        ('Prepo', Pipe)\n        , ('Clf', RandomForestRegressor()) \n    ])\n\nModel.fit(XE, ye)\n\nModel.score(XT, yt)","cd1c9400":"df = MakeDataFrame('test')\n\ndf.head()","d9769732":"pred = Model.predict(df[XE.columns.tolist()])\n\ndf = pd.DataFrame({'Id': df.index, 'TargetValue': pred.tolist()})","c62ada5e":"q = ['0.05', '0.5', '0.95']\ndfq = None\n\nfor i in q:\n    k = (df.groupby(['Id'])['TargetValue'].quantile(q=float(i)).reset_index()\n         .rename(columns = {'TargetValue':i})\n        )\n    if dfq is None:\n        dfq = k\n    else:\n        dfq = pd.concat([dfq, k[i]], 1)\n        \ndfq.Id = dfq.Id + 1\n\ndfq.head()","61cfa96d":"df = (pd.melt(dfq, id_vars = ['Id'], value_vars = q)\n      .rename(columns = {'value':'TargetValue'})\n     )\n\ndf['ForecastId_Quantile'] = df['Id'].astype(str) + '_' + df['variable']\n\ndf[['ForecastId_Quantile','TargetValue']].to_csv('submission.csv', index=False)","776b7bf3":"## Import\n* Preprocesing `Date`column to Integer","4defcae4":"## Make Pipeline\n* `StandardScaler` to standardize numericals features.\n* `OneHotEncoder` to make dummies in categorical features.\n* `ColumnTransformer` to run previous two steps.\n* The estimator `RandomForestRegressor`.","2022c972":"### Fatalities vs confirmed cases","577f0513":"## Make Submission"}}