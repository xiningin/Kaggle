{"cell_type":{"571b2604":"code","11b49788":"code","75685baa":"code","6ca09a99":"code","4c55f53e":"code","218fd42b":"code","fc1f53d2":"code","72669248":"code","b59c0bff":"code","83535abd":"code","b923d4ad":"code","bddd5681":"code","dc2d3df1":"code","6f5e0055":"code","b21d70a8":"code","0c624ed3":"code","38192fb3":"code","6092bd51":"code","01a603b4":"code","cf78b4a4":"code","834db71e":"code","99e1e06a":"code","d7329e43":"code","8102bdca":"code","e1437747":"code","6b534b25":"code","7f17ed73":"code","cb858c6e":"code","d730b88f":"markdown","5a180adb":"markdown","d0d709fc":"markdown","f68c1d9b":"markdown","3bd29fc4":"markdown","62a9c428":"markdown","f8412172":"markdown","384ff331":"markdown","b7452ba3":"markdown","9b38ecca":"markdown","2fedeae2":"markdown"},"source":{"571b2604":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","11b49788":"import matplotlib.pyplot as plt\n%matplotlib inline\npd.set_option('display.max_columns', 140)\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import Lasso, Ridge, LinearRegression","75685baa":"df = pd.read_csv('..\/input\/jane-street-data-prep\/clean.csv')\ncolumns = df.columns\ndf.head()","6ca09a99":"columns","4c55f53e":"df.shape","218fd42b":"# df = pd.DataFrame()","fc1f53d2":"# train = df[df.index % 3 == 0]","72669248":"target_cols = ['resp', 'resp_1', 'resp_2', 'resp_3', 'resp_4']","b59c0bff":"features = df.drop(labels=target_cols, axis=1)\nfeatures_cols = features.columns\nfeatures.head()","83535abd":"# df = train\n# train = pd.DataFrame()","b923d4ad":"targets = pd.concat([df.resp, df.resp_1, df.resp_2, df.resp_3, df.resp_4], axis=1)\ntargets.head()","bddd5681":"df.isnull().sum().sum()","dc2d3df1":"# features = StandardScaler().fit_transform(features)\n# targets = StandardScaler().fit_transform(targets)","6f5e0055":"lasso = Lasso(alpha = 0.1)\nlasso.fit(features, targets)","b21d70a8":"print(f'Coefficients: {lasso.coef_}')\nprint(f'Intercept: {lasso.intercept_}')","0c624ed3":"print(f'Score: {lasso.score(features, targets)}')\n# previous score (with unscaled complete data) below 1e-15","38192fb3":"for i in range(5):\n    print(np.where(lasso.coef_[i] != 0))\n    \nprint(f'Non-null coeffficient: {lasso.coef_[lasso.coef_ != 0]}')","6092bd51":"ols = LinearRegression()\nols.fit(features, targets)","01a603b4":"print(f'Coefficients: {ols.coef_}')\nprint(f'Intercept: {ols.intercept_}')","cf78b4a4":"print(f'Score: {ols.score(features, targets)}')\n# previous score of ca. 0.00661 (complete, unscaled data), now 0.00664","834db71e":"plt.figure(figsize=(15, 6))\nplt.hist(ols.coef_[0], bins=133)\nplt.show()","99e1e06a":"columns.shape","d7329e43":"features_cols.shape","8102bdca":"# checking the magnitude of coefficients\n\n# predictors = features.columns\ncoef = pd.Series(ols.coef_[0], features_cols).sort_values()\n\nplt.figure(figsize=(15, 6))\ncoef.plot(kind='bar', title='Modal Coefficients')\nplt.show()","e1437747":"ridge = Ridge(0.05)\nridge.fit(features, targets)\n\nprint(f'Coefficients: {ridge.coef_}')\nprint(f'Intercept: {ridge.intercept_}')","6b534b25":"print(f'Score: {ridge.score(features, targets)}')\n# previous score of ca. 0.00661 (complete, unscaled data)","7f17ed73":"plt.figure(figsize=(15, 6))\nplt.hist(ridge.coef_[0], bins=133)\nplt.show()","cb858c6e":"# checking the magnitude of coefficients\n\n# predictors = features.columns\ncoef = pd.Series(ridge.coef_[0],features_cols).sort_values()\n\nplt.figure(figsize=(15, 6))\ncoef.plot(kind='bar', title='Modal Coefficients')\nplt.show()","d730b88f":"### Baseline 3: ridge regression","5a180adb":"## Scaling the data","d0d709fc":"Choose only a certain proportion of data: how to choose one in every 3 rows?","f68c1d9b":"Conclusion: LASSO regression is quite useless. Why? Is it because there is too much data?","3bd29fc4":"Investigate which coefficients have a higher magnitude. **Do the same work after scaling the data.**","62a9c428":"### Loading dependencies","f8412172":"### Are there missing values?","384ff331":"### Baseline 1: LASSO regression","b7452ba3":"### Split into target and feature dataframes","9b38ecca":"### Baseline 2: classic regression","2fedeae2":"### Loading clean data"}}