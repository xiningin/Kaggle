{"cell_type":{"5c29f060":"code","8c39e856":"code","383f3a10":"code","00ab2da7":"code","f72854ef":"code","28f72252":"code","d19b9089":"code","81c12efe":"code","c8aa6d50":"code","256b1a25":"code","2a2b2386":"code","cf36772b":"code","f9d68de5":"code","ce04aaf0":"code","b583dda6":"code","433ce395":"code","49944f31":"code","0b980bce":"code","6e8e8bc8":"code","c427ab46":"code","d8fd71bf":"code","02e5e337":"code","d8413e99":"code","b388e451":"code","f60979f8":"code","32570a2d":"code","44350505":"code","f47e42e4":"code","26144810":"code","8cba41b1":"code","c5efa816":"code","4cddddef":"code","2a88ca1e":"code","21c52e0a":"code","eb45bb94":"code","ad46cc5a":"code","596ff7e4":"code","bee9276f":"code","a31d2e9d":"code","b6fdeff9":"code","a348a180":"code","7669094d":"code","3d1e5b2b":"code","7d35b8ae":"code","2642a4c3":"code","46781109":"code","1392be73":"code","efb9ceac":"code","1d1f1fe1":"code","fedbe13f":"code","5ea94408":"code","69954e5a":"code","af3c9edf":"code","854d6469":"code","2ffd4355":"code","76d0d88f":"code","91d0aa56":"code","034f2aaa":"code","6d0c5836":"code","7d230fa9":"code","41e819f0":"code","ed3b80ef":"code","dc2e4f03":"code","2aede828":"code","c768d860":"code","253870c9":"code","bbef4c7f":"code","1ad36c52":"code","66d6dd82":"code","a5df51f1":"code","020f1288":"code","1099a441":"code","06f2f2a8":"code","e40038cb":"code","a3658c8d":"code","b3571519":"code","87d8b6d6":"code","d1a7a156":"code","e5ec1ae2":"code","20c22d65":"code","05144c48":"code","f9aeb135":"code","9bc10638":"code","e5427010":"code","a3f4684b":"code","1869efe6":"code","f5c6a442":"code","0983604c":"code","d723ad08":"code","6b95dd11":"code","24ce9d4c":"code","9c36a14a":"code","aafef317":"code","f00bf314":"code","b1e2d1b2":"code","67058d1b":"code","83d0fc51":"code","6d681875":"code","f401b510":"code","036bdba8":"code","6a70f10f":"code","45bd322a":"code","87411756":"code","cd680f68":"code","2fd4223a":"code","09d7e739":"code","605e17a0":"code","b217ce77":"code","177c7687":"code","84ad5127":"code","47c674d8":"code","e94ceea2":"code","2cf6330b":"code","782e6572":"code","83b281d4":"code","8f8b2c33":"code","0680cadf":"code","dbed9685":"code","ec5a377d":"code","d544b598":"code","f68b3343":"code","88863245":"code","97b8fa1f":"code","1ded638b":"code","de82b474":"code","f651da52":"code","9729800f":"code","cc17c5d3":"code","fa9aefa8":"code","88816407":"code","945844dc":"code","93366bc6":"code","31f8587b":"code","6348c311":"code","d6277e6b":"code","4f73ecfb":"code","285da7fb":"code","ac601507":"code","828e2e5e":"code","9abefdba":"code","d5867539":"code","651d27d4":"code","5fdac1b2":"code","ef7dcb10":"code","feb1113e":"code","0a3b3943":"code","dfa86da4":"code","39b7ce93":"code","3a38918f":"code","480f5b4f":"code","80522745":"code","486e4fef":"code","0ebc985a":"code","2b84eddd":"markdown","305befe7":"markdown","668db2a4":"markdown","6ba8e942":"markdown","ca286328":"markdown","16531ca5":"markdown","84ab756a":"markdown","e6c4c1e7":"markdown","f2aba57e":"markdown","d8000173":"markdown","8c2aae7f":"markdown","1c319c64":"markdown","37dce464":"markdown","976ec620":"markdown","02e732de":"markdown","4e8e4b76":"markdown","1a83292f":"markdown","cdf81aab":"markdown","779c917d":"markdown","827e2c5c":"markdown","6e61a4ca":"markdown","b1c80ae7":"markdown","fd002812":"markdown","286b9ca7":"markdown","e94b7aa0":"markdown","7aefc4e0":"markdown","31f2bfbd":"markdown","e2c2b305":"markdown","5845ff4e":"markdown","d116855a":"markdown","a27647d1":"markdown","91242fa2":"markdown","e145d5b1":"markdown","cc5781f1":"markdown","7e73dd36":"markdown","c37e56cd":"markdown","a6a2f505":"markdown","a6ee6a75":"markdown","800beba3":"markdown","f134786e":"markdown","ab581e05":"markdown","a05fba68":"markdown","3af3b7bd":"markdown"},"source":{"5c29f060":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","8c39e856":"df = pd.read_csv(r'..\/input\/train.csv')","383f3a10":"df.head()","00ab2da7":"pd.options.display.max_columns = 100","f72854ef":"df.head()","28f72252":"df.shape","d19b9089":"df.info()","81c12efe":"df_null=(df.isnull().sum()\/len(df))*100","c8aa6d50":"df_null.sort_values(ascending=False)","256b1a25":"df.drop(['PoolQC', 'MiscFeature', 'Alley', 'Fence', 'FireplaceQu', 'LotFrontage'], axis=1, inplace=True)","2a2b2386":"df_null=(df.isnull().sum()\/len(df))*100","cf36772b":"df_null.sort_values(ascending=False)","f9d68de5":"df.info()","ce04aaf0":"df.head()","b583dda6":"df['GarageCond'].fillna(df['GarageCond'].mode()[0], inplace=True)","433ce395":"df['GarageCond'].astype('category').value_counts()","49944f31":"df_null=(df.isnull().sum()\/len(df))*100","0b980bce":"df_null.sort_values(ascending=False).head()","6e8e8bc8":"df['GarageType'].fillna(df['GarageType'].mode()[0], inplace=True)","c427ab46":"df['GarageType'].astype('category').value_counts()","d8fd71bf":"df_null=(df.isnull().sum()\/len(df))*100\ndf_null.sort_values(ascending=False).head()","02e5e337":"df['GarageQual'].fillna(df['GarageQual'].mode()[0], inplace=True)\ndf['GarageQual'].astype('category').value_counts()","d8413e99":"df_null=(df.isnull().sum()\/len(df))*100\ndf_null.sort_values(ascending=False).head()","b388e451":"df['GarageYrBlt'].fillna(df['GarageYrBlt'].mode()[0], inplace=True)\ndf['GarageYrBlt'].astype('category').value_counts().head()","f60979f8":"df_null=(df.isnull().sum()\/len(df))*100\ndf_null.sort_values(ascending=False).head()","32570a2d":"df['GarageFinish'].fillna(df['GarageFinish'].mode()[0], inplace=True)\ndf['GarageFinish'].astype('category').value_counts()","44350505":"df_null=(df.isnull().sum()\/len(df))*100\ndf_null.sort_values(ascending=False).head()","f47e42e4":"df['BsmtFinType2'].fillna(df['BsmtFinType2'].mode()[0], inplace=True)\ndf['BsmtFinType2'].astype('category').value_counts()","26144810":"df_null=(df.isnull().sum()\/len(df))*100\ndf_null.sort_values(ascending=False).head()","8cba41b1":"df['BsmtExposure'].fillna(df['BsmtExposure'].mode()[0], inplace=True)\ndf['BsmtExposure'].astype('category').value_counts()","c5efa816":"df_null=(df.isnull().sum()\/len(df))*100\ndf_null.sort_values(ascending=False).head()","4cddddef":"df['BsmtQual'].fillna(df['BsmtQual'].mode()[0], inplace=True)\ndf['BsmtQual'].astype('category').value_counts()","2a88ca1e":"df_null=(df.isnull().sum()\/len(df))*100\ndf_null.sort_values(ascending=False).head()","21c52e0a":"df['BsmtFinType1'].fillna(df['BsmtFinType1'].mode()[0], inplace=True)\ndf['BsmtFinType1'].astype('category').value_counts()","eb45bb94":"df_null=(df.isnull().sum()\/len(df))*100\ndf_null.sort_values(ascending=False).head()","ad46cc5a":"df['BsmtCond'].fillna(df['BsmtCond'].mode()[0], inplace=True)\ndf['BsmtCond'].astype('category').value_counts()","596ff7e4":"df_null=(df.isnull().sum()\/len(df))*100\ndf_null.sort_values(ascending=False).head()","bee9276f":"df['MasVnrArea'].fillna(df['MasVnrArea'].mode()[0], inplace=True)\ndf['MasVnrArea'].astype('category').value_counts().head()","a31d2e9d":"df_null=(df.isnull().sum()\/len(df))*100\ndf_null.sort_values(ascending=False).head()","b6fdeff9":"df['MasVnrType'].fillna(df['MasVnrType'].mode()[0], inplace=True)\ndf['MasVnrType'].astype('category').value_counts()","a348a180":"df_null=(df.isnull().sum()\/len(df))*100\ndf_null.sort_values(ascending=False).head()","7669094d":"df['Electrical'].fillna(df['Electrical'].mode()[0], inplace=True)\ndf['Electrical'].astype('category').value_counts()","3d1e5b2b":"df_null=(df.isnull().sum()\/len(df))*100\ndf_null.sort_values(ascending=False).head()","7d35b8ae":"df.info()","2642a4c3":"sns.barplot(x=\"OverallQual\", y=\"Id\", data=df)","46781109":"sns.barplot(x=\"OverallCond\", y=\"Id\", data=df)","1392be73":"df['OverallQual'].astype('category').value_counts()","efb9ceac":"df['OverallCond'].astype('category').value_counts()","1d1f1fe1":"df[['OverallQual','OverallCond']] = df[['OverallQual','OverallCond']].astype(str)","fedbe13f":"df.info()","5ea94408":"df['YearBuilt_diff'] = df['YrSold'] - df['YearBuilt']\ndf['YearRemodAdd_diff'] = df['YrSold'] - df['YearRemodAdd']\ndf['GarageYrBlt_diff'] = df['YrSold'] - df['GarageYrBlt']","69954e5a":"df.drop(['YearBuilt', 'YearRemodAdd','GarageYrBlt', 'YrSold', 'MoSold'], axis=1, inplace = True )","af3c9edf":"df_1 = df.select_dtypes(include=['float64', 'int64'])","854d6469":"df_1.head()","2ffd4355":"df_1=df","76d0d88f":"df_1.drop(['Id'], axis=1, inplace=True)","91d0aa56":"df_1.head()","034f2aaa":"X=df_1","6d0c5836":"y = X.pop('SalePrice')","7d230fa9":"X.head()","41e819f0":"df_categ = X.select_dtypes(include=['object'])\ndf_categ.head()","ed3b80ef":"df_dummies = pd.get_dummies(df_categ, drop_first = True)","dc2e4f03":"df_dummies.shape","2aede828":"df_categ.columns","c768d860":"df_dummies.head()","253870c9":"X = X.drop(list(df_categ.columns), axis=1)","bbef4c7f":"X = pd.concat([X, df_dummies], axis=1)","1ad36c52":"X.shape","66d6dd82":"from sklearn.preprocessing import scale\nfrom sklearn.preprocessing import StandardScaler","a5df51f1":"scaler = StandardScaler()\nscaler.fit_transform(X)","020f1288":"X.columns","1099a441":"X.head()","06f2f2a8":"cols=X.columns","e40038cb":"from sklearn.model_selection import train_test_split","a3658c8d":"X_train, X_test, y_train, y_test = train_test_split(X, y,train_size=0.7,test_size = 0.3, random_state=100)","b3571519":"# Possibles values of alpha to tune\nparams = {'alpha': [0.0001, 0.001, 0.01, 0.05, 0.1, \n 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 2.0, 3.0, \n 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 20.0, 50.0, 100.0,\n 500.0, 600.0, 700.0, 800.0, 900.0, 1000.0]}","87d8b6d6":"from sklearn.linear_model import Ridge\nfrom sklearn.model_selection import GridSearchCV","d1a7a156":"ridge = Ridge()","e5ec1ae2":"folds = 5\nmodel_cv = GridSearchCV(estimator = ridge, \n                        param_grid = params, \n                        scoring= 'neg_mean_absolute_error', \n                        cv = folds, \n                        return_train_score=True,\n                        verbose = 1)            \nmodel_cv.fit(X_train, y_train) ","20c22d65":"model_cv.cv_results_","05144c48":"cv_results = pd.DataFrame(model_cv.cv_results_)","f9aeb135":"cv_results.head()","9bc10638":"cv_results = cv_results[cv_results['param_alpha']<=1000]","e5427010":"cv_results.head()","a3f4684b":"cv_results['param_alpha'] = cv_results['param_alpha'].astype('int32')\n\n# plotting\nplt.figure(figsize=(8,5))\nplt.plot(cv_results['param_alpha'], cv_results['mean_train_score'])\nplt.plot(cv_results['param_alpha'], cv_results['mean_test_score'])\nplt.xlabel('alpha')\nplt.ylabel('Negative Mean Absolute Error')\nplt.title(\"Negative Mean Absolute Error and alpha\")\nplt.legend(['train score', 'test score'], loc='upper left')\nplt.grid(True)\nplt.show()","1869efe6":"alpha = 15\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)","f5c6a442":"ridge_coeff = list(zip(X_train.columns, sorted(abs(ridge.coef_), reverse=True)))","0983604c":"#from sklearn.metrics import r2_score\n#r2_score(y_test, y_pred)","d723ad08":"ridge_coeff","6b95dd11":"pd.DataFrame(ridge_coeff, columns={'Feature','Coefficient'}).head(5)","24ce9d4c":"from sklearn.linear_model import Lasso","9c36a14a":"lasso = Lasso()","aafef317":"model_cv = GridSearchCV(estimator = lasso, \n                        param_grid = params, \n                        scoring= 'neg_mean_absolute_error', \n                        cv = folds, \n                        return_train_score=True,\n                        verbose = 1) ","f00bf314":"model_cv.fit(X_train, y_train) ","b1e2d1b2":"import warnings\nwarnings.filterwarnings('ignore')","67058d1b":"cv_results = pd.DataFrame(model_cv.cv_results_)","83d0fc51":"cv_results","6d681875":"cv_results['param_alpha'] = cv_results['param_alpha'].astype('float32')","f401b510":"plt.figure(figsize=(8,5))\nplt.plot(cv_results['param_alpha'], cv_results['mean_train_score'])\nplt.plot(cv_results['param_alpha'], cv_results['mean_test_score'])\nplt.xlabel('alpha')\nplt.ylabel('Negative Mean Absolute Error')\n\nplt.title(\"Negative Mean Absolute Error and alpha\")\nplt.legend(['train score', 'test score'], loc='upper left')\nplt.grid(True)\nplt.show()","036bdba8":"alpha =15\nlasso = Lasso(alpha=alpha)\nlasso.fit(X_train, y_train) ","6a70f10f":"lasso_coeff = list(zip(X_train.columns, sorted(abs(lasso.coef_),reverse=True)))","45bd322a":"#from sklearn.metrics import r2_score\n#r2_score(y_test, y_pred_model_4)","87411756":"y_pred=lasso.predict(X_test)","cd680f68":"from sklearn.metrics import r2_score\nr2_score(y_test, y_pred)","2fd4223a":"pd.DataFrame(lasso_coeff, columns={'Feature','Coefficient'}).head(10)","09d7e739":"import statsmodels.api as sm\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor","605e17a0":"def calculate_VIF(data_frame):\n    vif = pd.DataFrame(columns = ['Features', 'VIF'])\n    vif['Features'] = data_frame.columns\n    vif['VIF'] = [variance_inflation_factor(data_frame.values, i) for i in range(data_frame.shape[1])]\n    vif['VIF'] = round(vif['VIF'], 2)\n    vif = vif.sort_values(by = \"VIF\", ascending = False)\n    return vif","b217ce77":"X_train_copy1 = X_train","177c7687":"X_train_copy1 = sm.add_constant(X_train_copy1)","84ad5127":"lr_model_1= sm.OLS(y_train, X_train_copy1).fit()","47c674d8":"lr_model_1.params","e94ceea2":"lr_model_1.summary()","2cf6330b":"vif_model_1 = calculate_VIF(X_train)\nvif_model_1","782e6572":"drop_cols= ['Exterior2nd_Other', 'ExterCond_Po', 'Electrical_Mix']","83b281d4":"X_train.drop(drop_cols, axis=1, inplace = True)","8f8b2c33":"drop_columns = vif_model_1[vif_model_1['VIF'] >= 1.7]['Features']","0680cadf":"drop_columns","dbed9685":"for col in drop_columns:\n    X_train.drop([col], axis=1, inplace = True)","ec5a377d":"X_train.shape","d544b598":"X_train_2 = X_train","f68b3343":"X_train_2 = sm.add_constant(X_train_2)","88863245":"lr_model_2 = sm.OLS(y_train, X_train_2).fit()","97b8fa1f":"lr_model_2.params","1ded638b":"lr_model_2.summary()","de82b474":"vif_model2_col = calculate_VIF(X_train)\nvif_model2_col","f651da52":"cols_drop = ['LotConfig_FR3', 'LotConfig_FR2']\nX_train.drop(cols_drop, axis=1, inplace = True)","9729800f":"X_train_3 = X_train","cc17c5d3":"X_train_3 = sm.add_constant(X_train_3)","fa9aefa8":"lr_model_3 = sm.OLS(y_train, X_train_3).fit()","88816407":"lr_model_3.params","945844dc":"lr_model_3.summary()","93366bc6":"vif_model3_cols = calculate_VIF(X_train)\nvif_model3_cols","31f8587b":"cols_drop = ['SaleType_ConLw', 'Foundation_Wood', 'Neighborhood_Blueste', 'Utilities_NoSeWa', 'Condition1_RRNe']\nX_train.drop(cols_drop, axis=1, inplace = True)","6348c311":"X_train_4 = X_train","d6277e6b":"X_train_4 = sm.add_constant(X_train_4)","4f73ecfb":"lr_model_4 = sm.OLS(y_train, X_train_4).fit()","285da7fb":"lr_model_4.params","ac601507":"lr_model_4.summary()","828e2e5e":"vif_model4_cols = calculate_VIF(X_train)\nvif_model4_cols","9abefdba":"y_train_price = lr_model_4.predict(X_train_4)","d5867539":"fig = plt.figure()\nsns.distplot((y_train - y_train_price), bins = 50)","651d27d4":"X_train.columns","5fdac1b2":"X_test_model_4=X_test[['BsmtHalfBath', 'WoodDeckSF', '3SsnPorch', 'ScreenPorch', 'MiscVal',\n       'LotShape_IR2', 'HeatingQC_Po', 'SaleType_CWD', 'SaleType_Con',\n       'SaleType_ConLI', 'SaleType_Oth', 'SaleCondition_Family']]","ef7dcb10":"X_test_model_4.head()","feb1113e":"X_test_model_4 = sm.add_constant(X_test_model_4)","0a3b3943":"y_pred_model_4 = lr_model_4.predict(X_test_model_4)","dfa86da4":"y_pred_model_4.shape","39b7ce93":"y_test.shape","3a38918f":"c = [i for i in range(1,439,1)]\n\nfig = plt.figure()\nplt.figure(figsize = (25, 10))\n\nplt.plot(c,y_test, color=\"red\", linewidth=2, linestyle=\"-\")     \nplt.plot(c,y_pred_model_4, color=\"green\",  linewidth=2, linestyle=\"-\")  \n\nfig.suptitle('Actual vs Predicted', fontsize=15)              \n\nplt.xlabel('Index', fontsize=15)                              \nplt.ylabel('SalePrice', fontsize=15) ","480f5b4f":"y_pred_model_4.head()","80522745":"from sklearn.metrics import r2_score\nr2_score(y_test, y_pred_model_4)","486e4fef":"y_test","0ebc985a":"y_pred_model_4","2b84eddd":"##### GarageQual imputed with mode","305befe7":"##### BsmtExposure imputed with mode","668db2a4":"##### Concat dummy df with the original df X","6ba8e942":"##### GarageFinish imputed with mode","ca286328":"### Ridge Regression","16531ca5":"##### Dropping last three columns from X_train","84ab756a":"##### Creating dummy variables for the categorical data","e6c4c1e7":"## Finding missing values","f2aba57e":"##### Creating derivative variable for years difference","d8000173":"## Imputing the missing values\n     Categorical with mode\n     Numerical with mean\/median","8c2aae7f":"### Model 3","1c319c64":"##### GarageCond imputed with mode","37dce464":"### Step 3: Model building and evaluation","976ec620":"### Model 2","02e732de":"## Dropping columns beyond GarageCond according to the sort values","4e8e4b76":"##### Electrical imputed with mode","1a83292f":"##### BsmtFinType1 imputed with mode","cdf81aab":"##### Vif for model 1","779c917d":"### Missing values imputed","827e2c5c":"### Residual","6e61a4ca":"##### Here bias-variance trade-off comes into play and we need to select the optimum value for alpha","b1c80ae7":"##### BsmtFinType2 imputed with mode","fd002812":"##### Splitting data into test train","286b9ca7":"##### Scaling the features","e94b7aa0":"### Model 1","7aefc4e0":"##### Changing data type to str for OverallCond and OverallQual columns","31f2bfbd":"# Importing Libraries","e2c2b305":"##### Exploring the numeric columns in the data set","5845ff4e":"### Model 4","d116855a":"##### BsmtCond imputed with mode","a27647d1":"### Step 2: Preparing data for modelling - Test-Train split","91242fa2":"##### MasVnrArea imputed with mode","e145d5b1":"##### GarageType imputed with mode","cc5781f1":"##### Here we are selecting 15 as the optimum value as test and train error are bit positive","7e73dd36":"##### Dropping the id column before test train split","c37e56cd":"##### BsmtQual imputed with mode","a6a2f505":"### Regression\n    Ridge Regression\n    Lasso Regression","a6ee6a75":"### Model Evaluation","800beba3":"##### Optimum value for the alpha is 15","f134786e":"### Lasso Regression","ab581e05":"##### MasVnrType imputed with mode","a05fba68":"# Step 1: EDA","3af3b7bd":"##### GarageYrBlt imputed with mode"}}