{"cell_type":{"8c3ee8fd":"code","b177f0b1":"code","0bfc3380":"code","9c53c7ba":"code","75b81a06":"code","34fc2ec6":"code","795d23b9":"code","59de72f7":"code","7944f6c7":"code","e51f9045":"code","79623055":"code","3a2d1648":"code","32c350f7":"code","1b4f9b30":"code","2d606fc5":"code","35406af1":"code","7d05e57d":"code","e2d675ef":"code","1c28b5fc":"code","a21d0379":"code","2caa1108":"code","bc5d3b17":"code","47d20688":"code","dbb90ea9":"code","827393cb":"code","2eff309f":"code","b5faa56e":"code","68052b6f":"code","449eb983":"code","7a49682d":"code","0938d6bc":"code","75858639":"code","136d9c49":"code","26a6b2e0":"code","8a687210":"code","054f2c31":"code","4bb58f10":"code","c9ad40ff":"markdown","3b5b4854":"markdown"},"source":{"8c3ee8fd":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nimport warnings\nfrom collections import Counter\n\nwarnings.filterwarnings(\"ignore\")\nprint(os.listdir(\"..\/input\"))","b177f0b1":"average_income = pd.read_csv('..\/input\/MedianHouseholdIncome2015.csv', encoding=\"windows-1252\")\npoverty_level = pd.read_csv('..\/input\/PercentagePeopleBelowPovertyLevel.csv', encoding=\"windows-1252\")\ncompleted_highschool = pd.read_csv('..\/input\/PercentOver25CompletedHighSchool.csv', encoding=\"windows-1252\")\npolice_killings = pd.read_csv('..\/input\/PoliceKillingsUS.csv', encoding=\"windows-1252\")\nkilled_people = pd.read_csv('..\/input\/ShareRaceByCity.csv', encoding=\"windows-1252\")","0bfc3380":"average_income.head()","9c53c7ba":"killed_people.head()","75b81a06":"completed_highschool.head()","34fc2ec6":"police_killings.head()","795d23b9":"poverty_level.head()","59de72f7":"poverty_level.info()","7944f6c7":"poverty_level['Geographic Area'].unique()","e51f9045":"poverty_level.poverty_rate.replace(['-'], 0.0, inplace = True)\npoverty_level.poverty_rate = poverty_level.poverty_rate.astype(float)\ncity_list = list(poverty_level['Geographic Area'].unique())\ncities_poverty_rate = []\nfor each in city_list:\n    tmp = poverty_level[poverty_level['Geographic Area'] == each]\n    average = sum(tmp.poverty_rate) \/ len(tmp)\n    cities_poverty_rate.append(average)\n\n#Filtering\ndata_Frame = pd.DataFrame({'city': city_list, 'poverty_rate': cities_poverty_rate})\nnewIndex = (data_Frame.poverty_rate.sort_values(ascending = False)).index.values\nsorted_data = data_Frame.reindex(newIndex)\n\n#visualization\nplt.figure(figsize = (15,10))\nsns.barplot(x = sorted_data['city'], y = sorted_data['poverty_rate'])\nplt.xticks(rotation = 45)\nplt.xlabel('Cities')\nplt.ylabel('Poverty Rate')\nplt.title('Cities Poverty Rate of Cities')\nplt.show()","79623055":"police_killings.info()","3a2d1648":"# Most common 20 Name of killed people\n\nseperate = police_killings.name[police_killings.name != 'TK TK'].str.split()\nx,y = zip(*seperate)\nname_list = x\nname_count = Counter(name_list)\nmost_name = name_count.most_common(20)\na,b = zip(*most_name)\na, b = list(a), list(b)\n\n#visualization\nplt.figure(figsize = (15,10))\nsns.barplot(x = a, y = b, palette = sns.cubehelix_palette(len(a)))\nplt.xlabel('Names')\nplt.ylabel('Frequency')\nplt.title('Most common 15 Name of killed people')","32c350f7":"killed_people.head()","1b4f9b30":"killed_people.info()","2d606fc5":"killed_people.replace(['-'], 0.0, inplace = True)\nkilled_people.replace(['(X)'], 0.0, inplace= True)\nkilled_people.loc[:,['share_white','share_black','share_native_american', 'share_asian', 'share_hispanic']] = killed_people.loc[:,['share_white','share_black','share_native_american', 'share_asian', 'share_hispanic']].astype(float)\ncity_list = list(killed_people['Geographic area'].unique())\n\nwhite_rate = []\nblack_rate = []\nnative_rate = []\nasian_rate = []\nhispanic_rate = []\n\nfor each in city_list:\n    tmp = killed_people[killed_people['Geographic area'] == each]\n    white_rate.append(sum(tmp.share_white) \/ len(tmp))\n    black_rate.append(sum(tmp.share_black) \/ len(tmp))\n    native_rate.append(sum(tmp.share_native_american) \/ len(tmp))\n    asian_rate.append(sum(tmp.share_asian) \/ len(tmp))\n    hispanic_rate.append(sum(tmp.share_hispanic) \/ len(tmp))\n    \n    \n#visualization\nf,vs = plt.subplots(figsize = (10, 15))\nsns.barplot(x = white_rate, y = city_list, color = 'grey', alpha = 0.5, label = 'White American')\nsns.barplot(x = black_rate, y = city_list, color = 'brown', alpha = 0.5, label = 'African American')\nsns.barplot(x = native_rate, y = city_list, color = 'red', alpha = 0.5, label = 'Native American')\nsns.barplot(x = asian_rate, y = city_list, color = 'aqua', alpha = 0.5, label = 'Asian American')\nsns.barplot(x = hispanic_rate, y = city_list, color = 'blue', alpha = 0.5, label = 'Hispanic American')\nvs.legend(loc = 'lower right', frameon = True)\nvs.set(xlabel = 'Cities', ylabel = 'Race of People', title = ' The percentage of States Population According to Races')","35406af1":"completed_highschool.head()","7d05e57d":"completed_highschool.info()","e2d675ef":"# high school graduation rate vs Poverty rate of each state\nsorted_data.poverty_rate = sorted_data.poverty_rate \/ max(sorted_data.poverty_rate)\n\ncompleted_highschool.percent_completed_hs.replace(['-'], 0.0, inplace = True)\ncompleted_highschool.percent_completed_hs = completed_highschool.percent_completed_hs.astype(float)\ncity_list = list(completed_highschool['Geographic Area'].unique())\ncompleted_rate = []\nfor each in city_list:\n    tmp = completed_highschool[completed_highschool['Geographic Area'] == each]\n    average = sum(tmp.percent_completed_hs) \/ len(tmp)\n    completed_rate.append(average)\n\ndataFrame = pd.DataFrame({'city': city_list, 'rate': completed_rate})\nnewIndex = (dataFrame.rate.sort_values(ascending = False)).index.values\nsorted_data2 = dataFrame.reindex(newIndex)\nsorted_data2.rate = sorted_data2.rate \/ max(sorted_data2.rate)\n\nmerge_data = pd.concat([sorted_data, sorted_data2['rate']], axis = 1)\nmerge_data.sort_values('poverty_rate', inplace = True)\n\n# visualization\nf, vs1 = plt.subplots(figsize = (18,10))\nsns.pointplot(x = 'city', y = 'poverty_rate', data = merge_data, color = 'r', alpha = 0.7)\nsns.pointplot(x = 'city', y = 'rate', data = merge_data, color = 'b', alpha = 0.7)\nplt.text(37, 0.5, 'High School Graduate Ratio', color = 'red', size = 18)\nplt.text(40, 0.45, 'Poverty Ratio', color = 'blue', size = 18)\nplt.xlabel('Poverty Rate', fontsize = 18, color = 'blue')\nplt.ylabel('Graduate Rate', fontsize = 18, color = 'blue')\nplt.title('High School Graduation Rate vs Poverty Rate', color = 'blue', fontsize = 20)\nplt.grid()","1c28b5fc":"# The same graphic with joint plot\n\nsns.jointplot(merge_data.poverty_rate, merge_data.rate, kind = 'kde', size = 7)\nplt.savefig('graph.png')\nplt.show()","a21d0379":"police_killings.race.value_counts()","2caa1108":"# Race rates  \n\npolice_killings.race.dropna(inplace = True)\nlabels = police_killings.race.value_counts().index\ncolors = ['red', 'blue', 'brown', 'grey','green','aqua']\nexplode = [0,0,0,0,0,0]\nvalues = police_killings.race.value_counts().values\n\n#visualization\nplt.figure(figsize = (9, 9))\nplt.pie(values, explode = explode, labels = labels, colors = colors, autopct = '%1.1f%%')\nplt.title('Killed People According to Races', color = 'blue', size = 20)\nplt.show()","bc5d3b17":"#The same graphic with lmplot\n\nsns.lmplot(x = 'poverty_rate', y = 'rate', data = merge_data)\nplt.show()","47d20688":"# The same table with kde plot\n# cut = size of the graphic\n# shade = whether or not inside of the grafic is fill\nsns.kdeplot(merge_data.poverty_rate, merge_data.rate, color = 'green', shade = True, cut = 5)\nplt.show()","dbb90ea9":"# The same table with violin plot\n\npal = sns.cubehelix_palette(2, rot=-.5, dark=.3)\nsns.violinplot(data= merge_data, palette = pal, inner = 'point')\nplt.show()","827393cb":"# The same table with heatmap to see their correlation\n\nf,vs = plt.subplots(figsize = (8,7))\nsns.heatmap(merge_data.corr(), annot = True, fmt = '.1f', ax = vs)\nplt.show()","2eff309f":"police_killings.head()","b5faa56e":"sns.boxplot(x = 'gender', y = 'age', hue = 'manner_of_death', data = police_killings, linewidth=1.5, palette=\"hls\")\nplt.show()","68052b6f":"#Swarm Plot \n\nsns.swarmplot(x = 'gender', y = 'age', hue = 'manner_of_death', data = police_killings)\nplt.show()","449eb983":"#Pair Plot with same example\nsns.pairplot(merge_data)\nplt.show()","7a49682d":"police_killings.head()","0938d6bc":"sns.countplot(police_killings.threat_level)\nplt.title('The dates of Killings', fontsize = 15, color='red')","75858639":"armed = police_killings.armed.value_counts()\n\nplt.figure(figsize = (15,10))\nsns.barplot(x = armed[:10].index, y = armed[:10].values)\nplt.title('The Type of Kill Weapon', fontsize = 20, color = 'red')\nplt.xlabel('Weapons')\nplt.ylabel('Counts')\n","136d9c49":"filtred_data = ['above 25' if each >= 20 else 'below 25' for each in police_killings.age]\ndf = pd.DataFrame({'age' : filtred_data})\n\nsns.countplot(x = df.age)\nplt.title('The Age of Killed People')\nplt.show()","26a6b2e0":"sns.countplot(data = police_killings, x = 'race')\nplt.title('The Race of Killed People')\nplt.show()","8a687210":"#Most Dangerous Cities\ncities = police_killings.city.value_counts()\nplt.figure(figsize = (10,6))\nsns.barplot(x = cities[0:10].index, y = cities.values[:10])\nplt.title('Most Dangerous Cities', fontsize = 20, color = 'red')","054f2c31":"# Having mental ilness or not for killed people\nplt.figure(figsize = (7,5))\nsns.countplot(police_killings.signs_of_mental_illness)\nplt.xlabel('Mental Ilness')\nplt.ylabel('The number of mental ilness')\nplt.title('Having mental ilness or not')","4bb58f10":"# Kill numbers from states in kill data\nstate = police_killings.state.value_counts().index[:10]\nsns.barplot(x = state, y = police_killings.state.value_counts().values[:10])\nplt.title('Kill numbers from states', fontsize = 20, color = 'r')","c9ad40ff":"**CONCLUS\u0130ON**\n***if you have any question, feel free to ask***","3b5b4854":"**Visualization with Count Plot**"}}