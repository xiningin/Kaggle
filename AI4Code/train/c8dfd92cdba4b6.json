{"cell_type":{"acafc68e":"code","18ea062c":"code","a113ebf5":"code","1d350d02":"code","9064bac1":"code","4372becb":"code","447b1544":"code","c294b340":"code","0d2acbb2":"code","04c5a2fd":"code","7cf5d6aa":"code","54c135a4":"code","0eda860d":"code","433fed42":"code","70822a35":"code","fa260809":"code","0e9789b1":"code","356325df":"code","28df32ef":"code","b7fa3c94":"code","f8ad1c58":"code","1e87925c":"code","a5fa18c7":"code","6042fbba":"code","376a9786":"code","c8252ad3":"code","b3d19a6b":"code","d3d35302":"code","5bd59466":"markdown","797ac380":"markdown","b20a1993":"markdown","a729fbc3":"markdown","5d2111ed":"markdown","7ea4bf09":"markdown","3ecf9f6e":"markdown","3d2c935c":"markdown","b101cd7a":"markdown","1a1c27c7":"markdown","63ced8ae":"markdown","3ac3cea6":"markdown","1e33eb43":"markdown","54663e66":"markdown","d418e2ba":"markdown","0fcab6ab":"markdown","213ad9b0":"markdown","5a3f31f6":"markdown","6fc45575":"markdown","951562a0":"markdown","13c6e0b1":"markdown"},"source":{"acafc68e":"# loading packages by using the build-in code from the notebook\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Inputing file by using the build-in code from the notebook\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","18ea062c":"#loading original data\ntrain = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\n\n#checking if it is the correct data\ntrain.head()","a113ebf5":"#loading the predictive data\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n\n#checking if it is the correct data\ntest.head()","1d350d02":"#information of train\ntrain.info()\ntrain.describe()","9064bac1":"#combine the data for comvenience of preapration\nfull = pd.DataFrame()\nfull = pd.concat([train,test],ignore_index=True)","4372becb":"#information of full\nfull.info()\nfull.describe()","447b1544":"#check the embarked\nfull['Embarked'].value_counts() ","c294b340":"#use S to fulfill the empty\nfull['Embarked'] = full['Embarked'].fillna('S')","0d2acbb2":"#use mode to fulfill the empty\nfull['Fare'] = full['Fare'].fillna(full['Fare'].mean())","04c5a2fd":"#check Cabin\nfull['Cabin'].value_counts() ","7cf5d6aa":"#use S to fulfill the empty\nfull['Cabin'] = full['Cabin'].fillna('N')","54c135a4":"#use mean to fill the age\nfull['Age'] = full['Age'].fillna(full['Age'].mean())","0eda860d":"#check the data\nfull.info()","433fed42":"# Sex\n\n#'male' for 1, and 'female' for 0\nfull['Sex'] = full['Sex'].map(lambda x : 1 if x=='male' else 0)","70822a35":"# Embarked\n\n#use dummy matrix\nEbarkedD = pd.DataFrame()\nEmbarkedD = pd.get_dummies(full['Embarked'],prefix='Embarked')\nfull = pd.concat([full, EmbarkedD],axis=1)\n\n#Delete 'Embarked'\nfull.drop('Embarked',axis=1,inplace=True)","fa260809":"#Cabin\n\n#Classify Cabin by Initial\nfull['Cabin'] = full['Cabin'].map(lambda c:c[0])\n\n#use dummy matrix\nCabinD = pd.DataFrame()\nCabinD = pd.get_dummies(full['Cabin'],prefix='Cabin')\nfull = pd.concat([full, CabinD],axis=1)\n\n#Delete 'Cabin'\nfull.drop('Cabin',axis=1,inplace=True)","0e9789b1":"#Ticket\n\n#define if there is Letter or simple numbers\ndef is_number(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n    \n#Classify Ticket by if there is Letter or simple numbers\nfull['Ticket'] = full['Ticket'].map(lambda x:1 if is_number(x) == True else 0 )\n\n#use dummy matrix\nTicketD = pd.DataFrame()\nTicketD = pd.get_dummies(full['Ticket'],prefix='Ticket')\nfull = pd.concat([full, TicketD],axis=1)\n\n#Delete 'Ticket'\nfull.drop('Ticket',axis=1,inplace=True)","356325df":"#Name\n\n#define get titile\ndef get_t(n):\n    s1 = n.split(',')[1]    # delete first name\n    s2 = s1.split('.')[0]   # delete last name\n    s3 = s2.strip()         # delete blank\n    return s3\n\n#get title\nTitleD = pd.DataFrame()\nTitleD['Title'] = full['Name'].map(get_t)\nTitleD['Title'].value_counts()","28df32ef":"#narrow the titles\nnarrow_t = {'Mr':              'Mr',\n            'Miss':            'Miss',\n            'Mrs':             'Mrs',\n            'Master':          'Profession',\n            'Rev':             'Profession',\n            'Dr':              'Profession',\n            'Col':             'Profession',\n            'Major':           'Profession',\n            'Mlle':            'Miss',\n            'Ms':              'Mrs',\n            'Mme':             'Mrs',\n            'Sir':             'Nobility',\n            'Jonkheer':        'Nobility',\n            'Dona':            'Nobility',\n            'the Countess':    'Nobility',\n            'Capt':            'Profession',\n            'Don':             'Nobility',\n            'Lady':            'Nobility',\n           }\n\nTitleD['Title'] = TitleD['Title'].map(narrow_t)\nTitleD['Title'].value_counts()","b7fa3c94":"#use dummy matrix\nTitleD = pd.get_dummies(TitleD['Title'])\nfull = pd.concat([full, TitleD],axis=1)\n\n#Delete 'Name'\nfull.drop('Name',axis=1,inplace=True)","f8ad1c58":"corrF = full.corr()\ncorrF","1e87925c":"corrF['Survived'].sort_values(ascending = False)","a5fa18c7":"#The left variables\nselect = pd.concat([TitleD,\n                    full['Pclass'],\n                    full['Sex'],\n                    full['Fare'],\n                    CabinD,\n                    EmbarkedD\n                   ],\n                   axis=1)","6042fbba":"#the row of train file\noriginal_row=891\n#train variable\noriginal_x = select.loc[0:890,:]\n#train prediction\noriginal_y = full.loc[0:890,'Survived']\n#test variable\npred_x = select.loc[891:,:]","376a9786":"from sklearn.model_selection import train_test_split\ntrain_x,test_x,train_y,test_y = train_test_split(original_x,\n                                                 original_y,\n                                                 train_size=0.9)","c8252ad3":"#Create model\nfrom sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\n\n#Import data\nmodel.fit(train_x,train_y)\n\n#score of the model\nmodel.score(test_x,test_y)","b3d19a6b":"pred_x.info()","d3d35302":"#predict\npred_y = model.predict(pred_x)\n#change into int\npred_y = pred_y.astype(int)\n#ID\npassengerId = full.loc[891:,'PassengerId']\n#result\npredD = pd.DataFrame({\n            'PassengerId':passengerId,\n            'Survived':pred_y\n})\n#output\npredD.to_csv('Titanic_09102020.csv',index = False)","5bd59466":"# 2.1 Missing Value","797ac380":"# 2.2 Transition","b20a1993":"\nBased on descrption, there is no significant outlier in the dataset","a729fbc3":"# **2 Exploring the data**","5d2111ed":"Because there 1014 missing values in ***Cabin***, fill the empty with a new value 'N', meaning NA","7ea4bf09":"Because there are only 2 missing values in ***Embarked***, use the mode to fill the empty","3ecf9f6e":"# 3.2 Create model","3d2c935c":"# **1 Loding and Checking Data**","b101cd7a":"Delete the varibels with less corr (-0.1<x<0.1),which is Parch, TickstD, PassengerId,SibSp, and Age. \n","1a1c27c7":"Becaseu ***Age*** is a numeric type, use mean to fill the empty","63ced8ae":"# 3.3 Output","3ac3cea6":"# **2 Data Preparation**","1e33eb43":"# 1.2 Loading files","54663e66":"# 2.3 Select Variables","d418e2ba":"# **Introduction**\n\nThis is a record of my first attempt at Kaggle. \n\nOnly basic models will be used, and I'm trying to explain my process of thinking as clearly as possible. So, there may be explanations for every step.  \nAs a beginner in the machine learning world, I feel that there are so many things to learn. So, any feedbacks are very welcomed.  \n\nHopefully, this simple script will be some kind of useful for you. ","0fcab6ab":"# **3 Model**","213ad9b0":"# 1.1 Loading packages","5a3f31f6":"Because of 1 missing value in ***Fare***, use the mean","6fc45575":"Clearly, there are 891 passengers in the 'train' file. Unfortunately, there are missing values in both *'**Age**'* and *'**Cabin**'*.  ","951562a0":"# 3.1 creat dataset","13c6e0b1":"There are missing values in Float-colunm: ***Age*** and ***Fare***; Object-colunm:\n***Embarked*** and ***Cabin***"}}