{"cell_type":{"1cdb1213":"code","ccf0ec0c":"code","7dde24b9":"code","3c068798":"code","c670c5db":"code","b349abf1":"code","7cce2b87":"code","338c69aa":"code","4de6b689":"code","f32293f8":"code","7e37ccf9":"code","44bd34f1":"code","d4e41f6c":"code","9b8f8606":"code","802b4b90":"code","e0396c83":"code","51e4d88f":"code","93af1869":"code","73bae58f":"code","0c6b9690":"code","a009e236":"code","c59bdd81":"code","6cf414ac":"code","8cf67c46":"code","e3f180f9":"code","f36c2d3e":"code","954c315b":"code","eb47c0f4":"markdown","5a1b5d38":"markdown","4f794c20":"markdown","337c9dae":"markdown","6a04ac6a":"markdown","a6d0a211":"markdown","08da2f3b":"markdown","7cb2af57":"markdown","784f67f4":"markdown","900ea5d7":"markdown","d9b71be0":"markdown","9f0f9d71":"markdown","35cb2d60":"markdown"},"source":{"1cdb1213":"import pandas as pd\nimport numpy as np\n\ndf = pd.read_csv(\"..\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv\")\ndf.head()","ccf0ec0c":"df.shape","7dde24b9":"#check missing values\ndf.isnull().sum()","3c068798":"df.Gender.value_counts()","c670c5db":"df['Gender'] = df['Gender'].map({'Female': 0, 'Male': 1})","b349abf1":"#understanding relationship between age and income visually\nimport matplotlib.pyplot as plt\nimport seaborn as sn\n%matplotlib inline\n\nsn.lmplot(\"Age\", \"Annual Income (k$)\", data = df, fit_reg = False, size = 5)","7cce2b87":"#scatterplot between age and spending score\nsn.lmplot(\"Age\", \"Spending Score (1-100)\", data = df, fit_reg = False, size = 5)","338c69aa":"sn.lmplot(\"Gender\", \"Annual Income (k$)\", data = df, fit_reg = False, size = 5)","4de6b689":"sn.lmplot(\"Annual Income (k$)\", \"Spending Score (1-100)\", data = df, fit_reg = False, size = 5)","f32293f8":"sn.lmplot(\"Gender\", \"Spending Score (1-100)\", data = df, fit_reg = False, size = 5)","7e37ccf9":"from sklearn.cluster import KMeans\nclusters = KMeans(3)\nclusters.fit(df)","44bd34f1":"df[\"cluster_id\"] = clusters.labels_","d4e41f6c":"#Plotting Clusters with their segments\nmarkers = ['+', '^','.']\nsn.lmplot(x=\"Age\", y=\"Annual Income (k$)\", data= df, hue = \"cluster_id\", fit_reg=False, markers = markers,\n         height = 6)","9b8f8606":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaled_df = scaler.fit_transform(df[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']])","802b4b90":"from sklearn.cluster import KMeans\nclusters_new = KMeans(3)\nclusters_new.fit(scaled_df)\ndf['cluster_id_new'] = clusters_new.labels_","e0396c83":"#Plotting Clusters with their segments\nmarkers = ['+', '^','.']\nsn.lmplot(x=\"Age\", y=\"Annual Income (k$)\", data= df, hue = \"cluster_id_new\", fit_reg=False, markers = markers,\n         height = 6)","51e4d88f":"clusters_new.cluster_centers_","93af1869":"#Cluster centres and their interpretation\n\ndf.groupby('cluster_id_new')['Age','Annual Income (k$)','Spending Score (1-100)'].agg(['mean','std']).reset_index()","73bae58f":"cluster_range = range(1,10)\ncluster_errors = []\n\nfor num_clusters in cluster_range:\n    clusters = KMeans(num_clusters)\n    clusters.fit(scaled_df)\n    #inertia parameter in KMeans provides total variance for a particular number of clusters\n    cluster_errors.append(clusters.inertia_)\n    \nplt.figure(figsize=(10,8))\nplt.plot(cluster_range, cluster_errors, marker = \"o\");","0c6b9690":"#creating clusters\n\nk = 4\nclusters = KMeans(4, random_state = 42)\nclusters.fit(scaled_df)\ndf['scaled_cluster_id'] = clusters.labels_\n#remove the previous cluster ids\ndf= df.drop(['cluster_id', 'cluster_id_new'], axis = 1)","a009e236":"df[df.scaled_cluster_id ==0]","c59bdd81":"df[df.scaled_cluster_id ==1]","6cf414ac":"df[df.scaled_cluster_id ==2]","8cf67c46":"df[df.scaled_cluster_id ==3]","e3f180f9":"#Plotting Clusters with their segments\nmarkers = ['+', '^','.', '*']\nsn.lmplot(x=\"Age\", y=\"Annual Income (k$)\", data= df, hue = \"scaled_cluster_id\", fit_reg=False, markers = markers,\n         height = 6)","f36c2d3e":"from sklearn.cluster import AgglomerativeClustering\n\nh_cluster = AgglomerativeClustering(4)\nh_cluster.fit(scaled_df)\ndf[\"h_clusterid\"] = h_cluster.labels_","954c315b":"#Plotting Clusters with their segments\nmarkers = ['+', '^','.', '*']\nsn.lmplot(x=\"Age\", y=\"Annual Income (k$)\", data= df, hue = \"h_clusterid\", fit_reg=False, markers = markers,\n         height = 6)","eb47c0f4":"### Normalizing features","5a1b5d38":"## Hierarchical clustering","4f794c20":"Upvote please if you liked it :)","337c9dae":"## Finding optimal number of clusters using Elbow method","6a04ac6a":"Lower the age higher the spending score","a6d0a211":"Annual income of $40-60k corresponds to 40-60 spending score","08da2f3b":"Spending score of females are slightly higher than male","7cb2af57":"Male annual income is slightly higher than Female annual income","784f67f4":"A significant change! Before normalizing, cluster id markers were different than now","900ea5d7":"Highest income is around age 30-35","d9b71be0":"Algorithm:\n### 1) Start with each data point in a single cluster\n### 2) Find the data points with the shortest distance and merge them to form a cluster\n### 3) Repeat step 2 until data points are merged together to form a single cluster","9f0f9d71":"![](http:\/\/frankdatascience.files.wordpress.com\/2018\/09\/1_2bpc6k2c4ojhp00ijxbska.jpeg?w=1023)","35cb2d60":"Elbow point is at 4 which indicates there might be 4 clusters in the dataset"}}