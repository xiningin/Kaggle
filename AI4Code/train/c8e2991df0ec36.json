{"cell_type":{"a8dc95eb":"code","7c926bee":"code","81fc8a05":"code","18353291":"code","7d310fe9":"code","75de5c9d":"code","91600e1d":"code","8aeea559":"code","48862e19":"code","6193dba4":"code","005aa7a7":"markdown","9431a7cd":"markdown"},"source":{"a8dc95eb":"from imblearn.over_sampling import SMOTE\nfrom collections import Counter\nimport pandas as pd\nimport numpy as np\nimport sklearn","7c926bee":"test = pd.read_csv(\"..\/input\/features-corected\/Feature_Corrected_Test.csv\")\nsubmit =  pd.read_csv(\"..\/input\/av-healthcare-analytics-ii\/healthcare\/sample_sub.csv\")\ntrain = pd.read_csv(\"..\/input\/features-corected\/Feature_Corrected_Train.csv\")\ntrain.pivot_table(index=[\"Stay\"],aggfunc= \"size\")","81fc8a05":"y = train.Stay\nX = train.drop(\"Stay\",axis = 1)\nX","18353291":"smote = SMOTE({0:50000,4:50000,5:50000,6:20000,7:20000,8:20000,9:20000,10:20000},random_state= 0)\nX_res,y_res = smote.fit_resample(X,y)\nprint('Resampled dataset shape %s' % Counter(y_res))","7d310fe9":"boost = \"gbdt\"\nlr = 0.21\ntrees = 300\nmax_depth = 10\ncrit = \"gini\"\nsplit = 4\nleaf = 4\nleaf_weight = 0.2\nfeatures_select = \"auto\"\nrandom_state = 0\nclass_weight = None\nobj = \"multiclass\"\nreg_l = 1.1\nreg_al = 1.6\n# method = \"gpu_hist\" Uncomment if using a GPU","75de5c9d":"from sklearn.model_selection import train_test_split\ntrain_X,valid_X,train_y,valid_y = train_test_split(X_res,y_res,test_size = 0.2,stratify = y_res,random_state = 0)","91600e1d":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators=800,criterion=crit,min_samples_split=split,\n                           min_samples_leaf=leaf,min_weight_fraction_leaf= leaf_weight,max_features=features_select,\n                           random_state=random_state, class_weight=class_weight,n_jobs=-1)\nrf.fit(train_X,train_y)\nrf.score(valid_X,valid_y)","8aeea559":"import lightgbm\nlg = lightgbm.LGBMClassifier(boosting_type=boost,max_depth=max_depth,learning_rate=lr,n_estimators=trees,\n                            objective=obj,class_weight=class_weight,reg_alpha=reg_al,reg_lambda=reg_l,\n                            random_state=random_state,n_jobs=-1)\nlg.fit(train_X,train_y)\nlg.score(valid_X,valid_y)","48862e19":"import xgboost\nxg = xgboost.XGBClassifier(max_depth= max_depth,learning_rate = lr,objective=\"multi:softmax\",booster = \"gbtree\",\n                           min_child_weight = leaf_weight,reg_alpha = reg_al,reg_lambda = reg_l,\n                          n_jobs = -1,random_state = random_state,num_classes = 11,eval_metric =\"logloss\")\n                          #tree_method = method)\nxg.fit(train_X,train_y)\nxg.score(valid_X,valid_y)","6193dba4":"import catboost\nct = catboost.CatBoostClassifier(iterations= 100,learning_rate=lr,depth=max_depth,loss_function=\"Logloss\",\n                                reg_lambda=reg_l,class_weights=class_weight,objective=\"MultiClass\",\n                                random_state=random_state) #task_type = \"GPU\")\n\nct.fit(train_X,train_y)\nct.score(valid_X,valid_y)","005aa7a7":"# Here is the hyperparameters that I tuned change the method to gpu_hist if you are using a GPU","9431a7cd":"# Rectifying imbalanced features with Synthetic methods and trying some models"}}