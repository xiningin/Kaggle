{"cell_type":{"8fd7009e":"code","01dfcd4b":"code","27d06810":"code","c5f5d051":"code","d073cfc4":"code","e2273b16":"code","40bb3438":"code","3abe178c":"code","d0fa0365":"code","acf769c4":"code","338043c6":"code","a7139374":"code","a6db4fd9":"code","bfe18f97":"code","1075c135":"code","00e5631c":"code","3d5c4155":"code","8b2b18b3":"code","e788d138":"code","34be21bf":"code","e686a999":"code","9dc3db4a":"code","7f4e2763":"code","0322f256":"code","153cb88e":"code","5d488b1a":"code","aeef867b":"code","6229c05c":"code","3283048a":"code","3720cb2e":"code","75516517":"code","9b29b560":"code","9e111e44":"code","39de7f5a":"code","a780b661":"code","bdbb2572":"code","fe455736":"code","f25761c3":"code","94b50bf3":"code","2333a88e":"code","a24d05aa":"code","5c0830d8":"code","710b2b27":"code","47be0882":"code","aa1c0624":"code","66bbd835":"code","c4a69816":"markdown","2f8983e3":"markdown","435fe6c0":"markdown","f6c2273c":"markdown","4fd5294d":"markdown","08a4c549":"markdown","7b443750":"markdown","ec7f0008":"markdown","870ce7d1":"markdown","5714aeaa":"markdown"},"source":{"8fd7009e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns\n\nimport re\n\nplt.style.use('seaborn')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","01dfcd4b":"print(\"\"\"\n\n## Information about data ##\n\nPclass Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd)\nsurvival Survival (0 = No; 1 = Yes)\nname Name\nsex Sex\nage Age\nsibsp Number of Siblings\/Spouses Aboard\nparch Number of Parents\/Children Aboard\nticket Ticket Number\nfare Passenger Fare (British pound)\ncabin Cabin\nembarked Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton)\n\n\"\"\")","27d06810":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")","c5f5d051":"train_df.head().style.background_gradient(cmap='Blues')","d073cfc4":"train_df.shape","e2273b16":"train_df.info()","40bb3438":"train_df.describe().style.background_gradient(cmap='Blues')","3abe178c":"check_null_df = train_df.isnull()\nprint(check_null_df.sum())\n\nsns.heatmap(check_null_df, yticklabels='', cmap='plasma')\nplt.show()","d0fa0365":"def add_percentage_in_countplot(ax):\n    patches = ax.patches\n    total = sum([p.get_height() for p in patches])\n\n    for p in patches:\n        percentage = p.get_height() \/ total\n        x, y = (p.get_x() + (p.get_width() \/ 2)), p.get_height()\n        ax.annotate(f\"{percentage*100:.2f}%\", (x, y), ha='center')","acf769c4":"ax = sns.countplot(x='Survived', data=train_df)\nplt.title(\"Target Distribution\")\nplt.xticks([0,1], [\"Not Survived\", \"Survived\"])\nplt.xlabel(\"\")\nadd_percentage_in_countplot(ax)\nplt.show()","338043c6":"fig, (ax1, ax2) = plt.subplots(1,2, figsize=(18, 5))\n\nsns.histplot(x=train_df.Age, bins=20, kde=True, ax=ax1)\nax1.axvline(x=train_df.Age.mean(), label=\"Mean Line\")\nax1.legend()\n\n\nsns.histplot(x='Fare', data=train_df, kde=True, ax=ax2)\nax2.axvline(x=train_df.Fare.mean(), label=\"Mean Line\")\nax2.legend()\n\nplt.suptitle(\"[Age & Fare] Continues variable distributions\")\nplt.show()","a7139374":"_, (ax1, ax2) = plt.subplots(1,2, figsize=(18, 5))\n\nsns.countplot(x='SibSp', data=train_df, ax=ax1)\nadd_percentage_in_countplot(ax1)\n\nsns.countplot(x='Parch', data=train_df, ax=ax2)\nadd_percentage_in_countplot(ax2)\n\nplt.suptitle(\"(Sibling\/Spause & Parent\/Child) Categorical Distribution\")\n\nplt.show()","a6db4fd9":"def add_percentage_in_horizontal_chart(ax):\n    patches = ax.patches\n    total = sum([p.get_width() for p in patches])\n\n    for p in patches:\n        percentage = p.get_width() \/ total\n        x, y = p.get_width(), (p.get_y() + p.get_height() \/ 2)\n        ax.annotate(f\"{percentage*100:.2f}%\", (x, y), va='center')","bfe18f97":"ax = sns.countplot(y='Pclass', data=train_df, palette='plasma')\nadd_percentage_in_horizontal_chart(ax)\nplt.show()","1075c135":"ax = sns.countplot(y='Embarked', data=train_df)\nadd_percentage_in_horizontal_chart(ax)\nplt.show()","00e5631c":"ax = sns.countplot(x='Survived', hue='Sex', data=train_df)\nadd_percentage_in_countplot(ax)\nplt.xticks([0,1], [\"Not Survived\", \"Survived\"])\nplt.show()","3d5c4155":"sns.stripplot(x='Pclass', y=\"Age\", data=train_df)\nplt.show()","8b2b18b3":"sns.jointplot(x='Age', y='Fare', data=train_df, kind='hex')\nplt.show()","e788d138":"sns.catplot(x='Pclass', y='Fare', hue='Sex', data=train_df, kind='point')\nplt.show()","34be21bf":"sns.heatmap(train_df.corr(), annot=True)\nplt.title(\"Correlation Map\")\nplt.show()","e686a999":"# person name\nname_list = [\"Mr\",\"Ms\",\"Mrs\",\"Miss\",\"Master\",\"Don\",\"Dr\",\"Major\",\"Sir\",\"Col\",\"Rev\",\"Mme\",\"Lady\"]\nname_vocab = {n:i for i,n in enumerate(name_list)}\nname_vocab[\"Unk\"] = len(name_vocab)\n\npattern = re.compile(f\"(\" + \"|\".join(name_list) + \")\\.\")\n\ndef find_person_name(n):\n    rs = pattern.search(n) \n    if rs: return rs.group(1)\n    return \"Unk\"","9dc3db4a":"cabin_first_char_ls = set([f[0] for f in train_df.Cabin.dropna().unique().tolist()])\ncabin_first_char_dict = {c:i for i,c in enumerate(cabin_first_char_ls)}\nprint(cabin_first_char_dict)\n\ndef transform_cabin(x):\n    if x is np.nan : return x\n    return cabin_first_char_dict.get(x[0], np.nan)","7f4e2763":"def preprocess_data(data):\n    \n    data.drop(['PassengerId', 'Ticket'], axis=1, inplace=True)\n    \n    sex_vocab = {\"male\":0, \"female\": 1}\n    \n    data['Sex'] = data['Sex'].apply(lambda x : sex_vocab[x])\n    \n    data['Age'].fillna(28, inplace=True)\n    \n    embarked_vocab = {\"S\":0, \"C\": 1, \"Q\": 2}\n    data['Embarked'] = data['Embarked'].apply(lambda x : embarked_vocab.get(x, np.nan))\n\n    data['Embarked'].fillna(0, inplace=True)\n    \n\n    data['person_name'] = data['Name'].apply(lambda x : name_vocab[find_person_name(x)])\n    \n    data.drop('Name', axis=1, inplace=True)\n    \n    data['family_members'] = data.apply(lambda x: x['SibSp'] + x['Parch'], axis=1)\n    \n    data['cabin_class'] = data.Cabin.apply(lambda x: transform_cabin(x))\n    data['cabin_class'].fillna(3, inplace=True)\n    \n    data.drop('Cabin', axis=1, inplace=True)","0322f256":"preprocess_data(train_df)","153cb88e":"train_df.info()","5d488b1a":"numeric_cols = train_df.select_dtypes(include=np.number).columns.tolist()\nprint(numeric_cols)\n\nfor col in numeric_cols:\n    fig, (ax1, ax2) = plt.subplots(1,2, figsize=(12, 2))\n    sns.histplot(x=col, data=train_df, ax=ax2)\n    sns.boxplot(x=col, data=train_df, ax=ax1)\n    plt.show()","aeef867b":"sns.heatmap(train_df.corr(),annot=True, cmap='viridis')\nplt.show()","6229c05c":"dropped_features = ['Survived', 'cabin_class', 'Embarked', 'family_members']\n\ny = train_df.Survived\nx = train_df.drop(dropped_features, axis=1)","3283048a":"sns.heatmap(x.corr(), annot=True, cmap='viridis')\nplt.show()","3720cb2e":"from sklearn.model_selection import train_test_split","75516517":"from sklearn.preprocessing import StandardScaler, MinMaxScaler","9b29b560":"scaler = MinMaxScaler()\nx = scaler.fit_transform(x)","9e111e44":"X_train, X_val, y_train, y_val = train_test_split(x,y, test_size=0.2, random_state=1)","39de7f5a":"len(X_train), len(X_val)","a780b661":"from sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\n\nfrom sklearn.model_selection import GridSearchCV","bdbb2572":"estimator = VotingClassifier(\n    estimators=[\n        ('random_forest', RandomForestClassifier(random_state=1)),\n        ('svc', SVC(C=10, probability=True, random_state=1)),\n    ],\n    voting='soft'\n)","fe455736":"estimator.fit(X_train, y_train)","f25761c3":"estimator.score(X_val, y_val)","94b50bf3":"test_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","2333a88e":"preprocess_data(test_df)","a24d05aa":"test_df.Fare.fillna(train_df.Fare.median(), inplace=True)","5c0830d8":"tmp_dropped_features = list(dropped_features)\ntmp_dropped_features.remove('Survived')\ntest_df = test_df.drop(tmp_dropped_features, axis=1)","710b2b27":"test_df = scaler.transform(test_df)","47be0882":"predicted = estimator.predict(test_df)","aa1c0624":"sns.histplot(predicted)\nplt.show()","66bbd835":"submission = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\nsubmission['Survived'] = predicted\nsubmission.to_csv('submission.csv', index=False)","c4a69816":"> Most of travelers traveled in **Economic class**, and it's true actually.\n\n> Travelers in **First class and Second class** is almost similar.","2f8983e3":"> Maximum number of records are found at **10 to 50 fare** and **15 to 32 age group**.","435fe6c0":"> Negative correlation between Fare and Pclass is **-0.55**.\n\n> Also Negative correlation between Age and Pclass is **-0.34**.\n\n> SibSp positively correlated with Parch is **+0.41**.","f6c2273c":"> We can see **Age** feature has **177** missing values and **Cabin** has lot more **687** missing values found.","4fd5294d":"> **61%** Peoples were not survived","08a4c549":"> Distribution of **SibSp** and **Parch** is look like similar.\n\n> **68% to 76%**  people were **zero\/one\/two** family members","7b443750":"> **72%** of travelers from **Southampton Port**.","ec7f0008":"> **52%** from whole population male were **not survived**. \n\n> **26%** female were **survived**. ","870ce7d1":"> Hmm more price paid my **FEMALES** in every classes :))","5714aeaa":"> Most **15 to 30 aged** group traveled in **Economic Class (3rd)**.\n\n> Few peoples above **60 aged** traveled in **First Class (1st)**.\n\n> **1 to 10 aged** people not traveled in **First Class (1st)**.\n\n> "}}