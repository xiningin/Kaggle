{"cell_type":{"d0d81262":"code","feaf2e52":"code","fdebadf8":"code","49ba584a":"code","5e10671d":"code","fdebf7f0":"code","6adb579c":"code","2eca696a":"code","31e5f2ec":"code","e26674ac":"code","79037c88":"code","4a4cfaa8":"code","a68f889a":"code","872951ae":"code","00f33388":"code","4a898d81":"code","4edf6700":"code","1ad33a37":"code","bdccb3ef":"code","0ea8b40a":"code","df07cb06":"code","ef22c738":"code","8b0392db":"code","97cb2fdf":"code","4844ecd9":"code","02c29cf8":"code","0c5a6e2e":"code","1463c103":"code","fc4897f0":"code","bc1d8662":"code","eae0125b":"code","2206125e":"code","911c96b1":"code","9b09d591":"code","67e629c5":"code","cf459ddd":"code","8e23855d":"code","6d874817":"code","3bf7479e":"code","417d3087":"markdown","7c625519":"markdown","794441c5":"markdown","96fcb1f7":"markdown","f6ed4b64":"markdown","b4741193":"markdown","aa9ec729":"markdown","890edc5f":"markdown","0af970f7":"markdown","15e8eab3":"markdown","b66a866e":"markdown","4928c0f1":"markdown","27bfcf06":"markdown","796b22db":"markdown","0eb1d221":"markdown","126387d0":"markdown","d8d4f15f":"markdown","d7ee80a4":"markdown","6c0bf494":"markdown","6e9807c6":"markdown","13f1b8be":"markdown","54efff64":"markdown","3c6e4bb1":"markdown","2f2e786a":"markdown","99fb578f":"markdown"},"source":{"d0d81262":"# Basic libraries (Data Manipulation)\nimport pandas as pd\nimport numpy as np\n\n# Data visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n# OS\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","feaf2e52":"df = pd.read_csv(\"\/kaggle\/input\/predict-test-scores-of-students\/test_scores.csv\")\ndf.head()","fdebadf8":"rows = df.shape[0]\ncolumns = df.shape[1]\n\nprint(f\"This data frame has {rows} rows and {columns} columns.\")","49ba584a":"df.info()","5e10671d":"df.isna().sum()","fdebf7f0":"plt.figure(figsize=(10, 8))\nsns.countplot(data=df, x=\"school\", order=df[\"school\"].value_counts().index)\nplt.title(\"Number of students for each school\")\nplt.xticks(rotation=45)\nplt.show()","6adb579c":"school_prtg = df[\"school\"].value_counts()\/len(df[\"school\"]) * 100\nprint(\"Number of students in percentage for each school:\\n\")\nprint(school_prtg)","2eca696a":"plt.figure(figsize=(10, 8))\nax = sns.countplot(data=df, x=\"school_setting\") # order=df[\"school_setting\"].value_counts().index\nplt.title(\"School settings\")\nplt.xlabel(\"School setting\")\nfor value in ax.patches:\n    ax.annotate(\"%d\" % value.get_height(), (value.get_x() + value.get_width() \/ 2, value.get_height()),\n                ha='center', va='bottom', fontsize=12, color=\"black\")\nplt.show()","31e5f2ec":"school_sttg = df[\"school_setting\"].value_counts()\/len(df[\"school_setting\"]) * 100\nprint(school_sttg)","e26674ac":"public = df.loc[df[\"school_type\"] == \"Public\"]\nprivate = df.loc[df[\"school_type\"] == \"Non-public\"]","79037c88":"labels = [\"Public\", \"Non-public\"]\nvalues = [public.value_counts().sum(), private.value_counts().sum()]\ncolors = ['#2E86C1', '#A9CCE3']\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values)])\nfig.update_traces(hoverinfo=\"label+percent\", textinfo=\"label\", textfont_size=15,\n                  marker=dict(colors=colors, line=dict(color=\"#1C2833\", width=2)))\nfig.update_layout(title={\"text\": \"Type of schools\"})\nfig.show()","4a4cfaa8":"methods = df[\"teaching_method\"].unique()\nprint(methods)","a68f889a":"standard = df.loc[df[\"teaching_method\"] == \"Standard\"]\nexperimental = df.loc[df[\"teaching_method\"] == \"Experimental\"]","872951ae":"labels = [\"Standard\", \"Experimental\"]\nvalues = [standard.value_counts().sum(), experimental.value_counts().sum()]\ncolors = [\"#626567\", \"#CACFD2\"]\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values)])\nfig.update_traces(hoverinfo=\"label+percent\", textinfo=\"label\", textfont_size=15,\n                 marker=dict(colors=colors, line=dict(color=\"#1C2833\", width=2)))\nfig.update_layout(title={\"text\": \"Teaching methods\"})\nfig.show()","00f33388":"male = df.loc[df[\"gender\"] == \"Male\"]\nfemale = df.loc[df[\"gender\"] == \"Female\"]","4a898d81":"labels = [\"Male\", \"Female\"]\nvalues = [male.value_counts().sum(), female.value_counts().sum()]\ncolors = [\"#0B5345\", \"#48C9B0\"]\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values)])\nfig.update_traces(hoverinfo=\"label+percent\", textinfo=\"label\", textfont_size=15,\n                 marker=dict(colors=colors, line=dict(color=\"#1C2833\", width=2)))\nfig.update_layout(title={\"text\": \"Gender\"})\nfig.show()","4edf6700":"student_df = df.drop([\"classroom\"], axis=1)\n\ndf.drop([\"classroom\", \"student_id\"], axis=1, inplace=True)","1ad33a37":"X = df.drop([\"posttest\"], axis=1)\ny = df[\"posttest\"]\n\nstudent_id = student_df.drop([\"posttest\"], axis=1)\nother = student_df[\"posttest\"]","bdccb3ef":"from sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\n\ncategories = [\"school\", \"school_setting\", \"school_type\", \"teaching_method\", \"gender\", \"lunch\"]\n\nencoder = OneHotEncoder()\ntransform = ColumnTransformer([(\"one_hot\", encoder, categories)], remainder=\"passthrough\")\n\nX_transformed = transform.fit_transform(X)","0ea8b40a":"from sklearn.metrics import accuracy_score, mean_squared_error, mean_absolute_error, r2_score\n\ndef model_evaluation(y_test, prediction):\n    '''Show model score accuracy, with MAE and MSE'''\n    \n    MAE = mean_absolute_error(y_test, prediction)\n    MSE = mean_squared_error(y_test, prediction)\n    r2 = r2_score(y_test, prediction)\n    \n    print(f\"Mean absolute error: {round(MAE, 3)}\\nMean squared error: {round(MSE, 3)}\\nR2: {round(r2, 3)}\")","df07cb06":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X_transformed, y, test_size=0.2, random_state=42)\nID_train, ID_test, other_train, other_test = train_test_split(student_id, other, test_size=0.2, random_state=42)","ef22c738":"from sklearn.ensemble import RandomForestRegressor\n\nrf_regressor = RandomForestRegressor()\nregressor_model = rf_regressor.fit(X_train, y_train)\nmodel_score = regressor_model.score(X_test, y_test)\n\nprint(f\"Random Forest Regressor model score: {round(model_score, 2)}\")\nprint(f\"Random Forest Regressor model score (percentage): {round(model_score, 4) * 100} %\")","8b0392db":"rf_prediction = regressor_model.predict(X_test)\n\nmodel_evaluation(y_test, rf_prediction)","97cb2fdf":"list_residual = []\n\nfor i, p in zip(y_test, rf_prediction):\n    residual = i - p\n    list_residual.append(round(residual, 3))","4844ecd9":"test_scores = pd.DataFrame({\"Stundet ID\": ID_test.student_id, \"Predicted scores\": rf_prediction, \"Real scores\": y_test, \"Residual\": list_residual})\ntest_scores.head()","02c29cf8":"test_scores.reset_index(drop=True, inplace=True)\ntest_scores.head()","0c5a6e2e":"plt.figure(figsize=(10, 8))\nsns.regplot(data=test_scores, x=\"Real scores\", y=\"Predicted scores\", scatter_kws={\"color\": \"black\"}, line_kws={\"color\": \"red\"})\nplt.show()","1463c103":"reg = sns.jointplot(data=test_scores, x=\"Real scores\", y=\"Predicted scores\", kind='reg')\nregline = reg.ax_joint.get_lines()[0]\nregline.set_color('red')\nregline.set_zorder(5)","fc4897f0":"plt.figure(figsize=(10, 8))\nsns.regplot(data=test_scores, x=\"Predicted scores\", y=\"Residual\", scatter_kws={\"color\": \"black\"}, line_kws={\"color\": \"red\"})\nplt.title(\"Random Forest Regression Residual plot\")\nplt.show()","bc1d8662":"from sklearn.linear_model import LinearRegression\n\nlr = LinearRegression()\nlr_model = lr.fit(X_train, y_train)\nlr_score = lr_model.score(X_test, y_test)\n\nprint(f\"Linear Regression model score: {round(lr_score, 3)}\")\nprint(f\"Linear Regression model score (percentage): {round(lr_score, 4) * 100} %\")","eae0125b":"lr_prediction = lr_model.predict(X_test)\nmodel_evaluation(y_test, lr_prediction)","2206125e":"list_residual = []\n\nfor i, p in zip(y_test, lr_prediction):\n    residual = i - p\n    list_residual.append(round(residual, 3))","911c96b1":"lr_test_scores = pd.DataFrame({\"Stundet ID\": ID_test.student_id, \"Predicted scores\": lr_prediction, \"Real scores\": y_test, \"Residual\": list_residual})\nlr_test_scores.reset_index(drop=True, inplace=True)\nlr_test_scores.head()","9b09d591":"plt.figure(figsize=(10, 8))\nsns.regplot(data=lr_test_scores, x=\"Real scores\", y=\"Predicted scores\", scatter_kws={\"color\": \"black\"}, line_kws={\"color\": \"red\"})\nplt.title(\"Linear Regression plot\")\nplt.show()","67e629c5":"reg = sns.jointplot(data=lr_test_scores, x=\"Real scores\", y=\"Predicted scores\", kind='reg')\nregline = reg.ax_joint.get_lines()[0]\nregline.set_color('red')\nregline.set_zorder(5)","cf459ddd":"plt.figure(figsize=(10, 8))\nsns.regplot(data=lr_test_scores, x=\"Predicted scores\", y=\"Residual\", scatter_kws={\"color\": \"black\"}, line_kws={\"color\": \"red\"})\nplt.title(\"Linear Regression Residual plot\")\nplt.show()","8e23855d":"models = pd.DataFrame({\"Model\": [\"Random Forest Regression\", \"Linear Regression\"], \"Accuracy\": [model_score, lr_score]})\nmodels = models.sort_values(by=\"Accuracy\", ascending=False)\nmodels","6d874817":"fig = px.bar(models, x=\"Accuracy\", y=\"Model\", orientation=\"h\",\n             color=\"Model\", title=\"Regression Models accuracy score\")\nfig.show()","3bf7479e":"csv_name = \"students_test_score_prediction.csv\"\nlr_test_scores.to_csv(csv_name, index=False)\nprint(f\"Your CSV file, ({csv_name}), has been saved!\")","417d3087":"## 1. Import modules\n<a id=\"modules\"><\/a>","7c625519":"## 4. Machine Learning Models\n<a id=\"models\"><\/a>","794441c5":"#### 3.2.1 Schools\n<a id=\"schools\"><\/a>","96fcb1f7":"#### 3.2.2 Schools settings\n<a id=\"settings\"><\/a>","f6ed4b64":"![image.png](attachment:92e816f6-4870-4cd2-91ad-4fc8a862c423.png)","b4741193":"### 4.2 Linear Regression\n<a id=\"linear\"><\/a>","aa9ec729":"#### 4.1.1 Random Forest Regressor Plots\n<a id=\"rfr_plots\"><\/a>","890edc5f":"In this 2 models (*Random Forest Regression* and *Linear Regression*) we have **0,70%** difference between them!\n<br>\nBut, as *Linear Regression* model has a higher value, I will save his predictions in CSV.","0af970f7":"# Index","15e8eab3":"## 5. Conclusion\n<a id=\"conclusion\"><\/a>","b66a866e":"#### 4.2.1 Linear Regression Plots\n<a id=\"lr_plots\"><\/a>","4928c0f1":"Loop for each value in *predicted* and *real scores*, to save the residual value in a lista and add those values in data frame.","27bfcf06":"### 3.2 Info plots\n<a id=\"info_plots\"><\/a>","796b22db":"#### 3.2.5 Gender","0eb1d221":"#### 3.2.3 Type of schools\n<a id=\"type\"><\/a>","126387d0":"* [1. Import modules](#modules)\n* [2. Read data](#read_data)\n* [3. Data info](#info)\n    * [3.1 NA Values](#navalues)\n    * [3.2 Info plots](#info_plots)\n        * [3.2.1 Schools](#schools)\n        * [3.2.2 Schools settings](#settings)\n        * [3.2.3 Type of schools](#type)\n        * [3.2.4 Teaching methods](#methods)\n* [4. Machine Learning Models](#models)\n    * [4.1 Random Forest Regressor Model](#rf_regressor)\n        * [4.1.1 Random Forest Regressor Plots](#rfr_plots)\n    * [4.2 Linear Regression](#linear)\n        * [4.2.1 Linear Regression Plots](#lr_plots)\n* [5. Conclusion](#conclusion)","d8d4f15f":"#### 3.2.4 Teaching methods\n<a id=\"methods\"><\/a>","d7ee80a4":"### 4.1 Random Forest Regressor Model\n<a id=\"rf_regressor\"><\/a>","6c0bf494":"### 3.1 NA Values\n<a id=\"navalues\"><\/a>","6e9807c6":"## 3. Data info\n<a id=\"info\"><\/a>","13f1b8be":"# Test score prediction","54efff64":"Save *predicted values* in data frame, and compare them with *real values*.","3c6e4bb1":"## 2. Read data\n<a id=\"read_data\"><\/a>","2f2e786a":"Now, we will convert **categorical** values to **numbers**.\n<br>\nThis can be done manually, with a dict and edit each *categorical* value and replace them for a number.","99fb578f":"**Random state** show us same values for each run, this keep *train* and *test* split values, always the same.\n<br>\nAs well, we have another split to keep *id_student* value and compare predicted values with the real values. With the same random_state, we don't have any problem beacuse the split has same index values to predicted values."}}