{"cell_type":{"404bb1a0":"code","15f0f4a0":"code","ee2e785d":"code","9445f23b":"code","7ca5665b":"code","8122f24c":"code","8b76675c":"code","754e45fb":"code","760e97e1":"code","ec2b8f00":"code","e2d2cac8":"markdown","973b05a5":"markdown","7427ef34":"markdown","4827f047":"markdown","3ab79490":"markdown","acb06085":"markdown","e1cce9f4":"markdown"},"source":{"404bb1a0":"import tensorflow as tf\nimport os\nimport numpy as np\n\nfrom matplotlib import pyplot as plt\n%matplotlib inline\n\nif not os.path.isdir('models'):\n    os.mkdir('models')\n    \nprint('TensorFlow version:', tf.__version__)\nprint('Is using GPU?', tf.test.is_gpu_available())","15f0f4a0":"def get_three_classes(x, y):\n    def indices_of(class_id):\n        indices, _ = np.where(y == float(class_id))\n        return indices\n\n    indices = np.concatenate([indices_of(0), indices_of(1), indices_of(2)], axis=0)\n    \n    x = x[indices]\n    y = y[indices]\n    \n    count = x.shape[0]\n    indices = np.random.choice(range(count), count, replace=False)\n    \n    x = x[indices]\n    y = y[indices]\n    \n    y = tf.keras.utils.to_categorical(y)\n    \n    return x, y","ee2e785d":"(x_train, y_train), (x_test, y_test) = tf.keras.datasets.cifar10.load_data()\n\nx_train, y_train = get_three_classes(x_train, y_train)\nx_test, y_test = get_three_classes(x_test, y_test)\n\nprint(x_train.shape, y_train.shape)\nprint(x_test.shape, y_test.shape)","9445f23b":"class_names = ['aeroplane', 'car', 'bird']\n\ndef show_random_examples(x, y, p):\n    indices = np.random.choice(range(x.shape[0]), 10, replace=False)\n    \n    x = x[indices]\n    y = y[indices]\n    p = p[indices]\n    \n    plt.figure(figsize=(10, 5))\n    for i in range(10):\n        plt.subplot(2, 5, i + 1)\n        plt.imshow(x[i])\n        plt.xticks([])\n        plt.yticks([])\n        col = 'green' if np.argmax(y[i]) == np.argmax(p[i]) else 'red'\n        plt.xlabel(class_names[np.argmax(p[i])], color=col)\n    plt.show()\n\nshow_random_examples(x_train, y_train, y_train)","7ca5665b":"show_random_examples(x_test, y_test, y_test)","8122f24c":"from tensorflow.keras.layers import Conv2D, MaxPooling2D, BatchNormalization\nfrom tensorflow.keras.layers import Dropout, Flatten, Input, Dense\n\ndef create_model():\n    \n    def add_conv_block(model, num_filters):\n        \n        model.add(Conv2D(num_filters, 3, activation='relu', padding='same'))\n        model.add(BatchNormalization())\n        model.add(Conv2D(num_filters, 3, activation='relu', padding='valid'))\n        model.add(MaxPooling2D(pool_size=2))\n        model.add(Dropout(0.2))\n\n        return model\n    \n    model = tf.keras.models.Sequential()\n    model.add(Input(shape=(32, 32, 3)))\n    \n    model = add_conv_block(model, 32)\n    model = add_conv_block(model, 64)\n    model = add_conv_block(model, 128)\n\n    model.add(Flatten())\n    model.add(Dense(3, activation='softmax'))\n\n    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n    return model\n\nmodel = create_model()\nmodel.summary()","8b76675c":"%%time\n\nh = model.fit(\n    x_train\/255., y_train,\n    validation_data=(x_test\/255., y_test),\n    epochs=10, batch_size=128,\n    callbacks=[\n        tf.keras.callbacks.EarlyStopping(monitor='val_accuracy', patience=2),\n        tf.keras.callbacks.ModelCheckpoint('models\/model_{val_accuracy:.3f}.h5', save_best_only=True,\n                                          save_weights_only=False, monitor='val_accuracy')\n    ]\n)","754e45fb":"accs = h.history['accuracy']\nval_accs = h.history['val_accuracy']\n\nplt.plot(range(len(accs)),accs, label = 'Training')\nplt.plot(range(len(accs)),val_accs, label = 'Validation')\nplt.legend()\nplt.show()","760e97e1":"model = tf.keras.models.load_model('models\/model_0.923.h5')\npreds = model.predict(x_test\/255.)","ec2b8f00":"show_random_examples(x_test, y_test, preds)","e2d2cac8":"# Task 2: Preprocess Data","973b05a5":"# Task 1: Import Libraries","7427ef34":"# Task 3: Visualize Examples","4827f047":"# Task 6: Final Predictions","3ab79490":"# Task 5: Train the Model","acb06085":"# Image Classification with CNNs using Keras","e1cce9f4":"# Task 4: Create Model"}}