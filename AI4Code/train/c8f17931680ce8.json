{"cell_type":{"49d395da":"code","e4b53bef":"code","15d3491a":"code","ad812440":"code","1271766b":"code","e2083fcc":"code","26d6c732":"code","dfebd265":"code","aedc4ffc":"code","546b65eb":"code","39a382bd":"code","e90ac830":"code","b94941bc":"code","6d8d4282":"code","fb261d84":"code","9b02fc1f":"code","87a7cb17":"code","bfd37a65":"code","e115c55f":"code","a82a46e7":"code","b3ba9999":"code","c0bb786f":"code","297ec88f":"code","9539424b":"code","5394a4e6":"code","af942ad3":"code","967b2119":"code","f2f97c8f":"code","85ded9b9":"code","20af0683":"code","5db2656e":"code","cee1d7ad":"code","89e63a9e":"code","65bb25bd":"code","7fe3d13a":"code","3dfebdc3":"code","af613f3c":"code","41a83c35":"code","d545e58a":"code","fd128b8b":"code","8675616f":"code","b042864f":"code","781f9c1d":"code","cc96977b":"code","3d8b7667":"code","5a811c24":"code","db7142b2":"code","f6e4580d":"code","f2b5bd42":"code","823a455d":"code","3b1a035c":"code","d275058d":"code","37583c55":"code","62f2dba5":"code","a2024e7f":"code","543b102c":"code","bba91519":"code","139a248f":"code","d08b00ea":"code","e0e9be17":"code","43068906":"code","3394d373":"code","41d21b40":"code","d5c3efe8":"code","728292fe":"code","fb8533c3":"code","c3cf9c90":"code","f5766de6":"code","f9357f33":"code","c062b59b":"code","2b4ac373":"code","a23cac5f":"code","c2a3cadd":"code","b2c8fe9f":"code","efc44470":"code","28a5aba2":"code","2f6a09f5":"code","0849f7a7":"code","3dba47ff":"code","04b96dcd":"code","d8aeb231":"code","370248e7":"code","39dfb2d1":"code","29bda2fc":"code","373e3f0c":"code","5a2852bb":"code","81db6149":"code","f5b0ed90":"code","dbe61b14":"code","fccfcc2e":"code","87045788":"code","f3729934":"code","b5aac071":"markdown","d6a5d58f":"markdown","5c189674":"markdown","51a825cc":"markdown","2b316753":"markdown","0de8f8ae":"markdown","29bb647c":"markdown","de293d06":"markdown","d96919f2":"markdown","c6d0fa9a":"markdown","25bb7713":"markdown","3641786e":"markdown","a714b219":"markdown","ae215b34":"markdown","430c064c":"markdown","0abd9c4f":"markdown","a91dcc3b":"markdown","22e2408a":"markdown","369e4e61":"markdown","e416bff2":"markdown","46b2ad88":"markdown","82404392":"markdown"},"source":{"49d395da":"import numpy as np \nimport pandas as pd \nimport plotly.express as px\nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt\nfrom wordcloud import STOPWORDS\nimport wordcloud\n\n%matplotlib inline\n\ndf = pd.read_csv('..\/input\/disney-plus-shows\/disney_plus_shows.csv')","e4b53bef":"from IPython.core.display import HTML\nHTML(\"\"\"\n<style>\n.output_png {\n    display: table-cell;\n    text-align: center;\n    vertical-align: middle;\n}\n<\/style>\n\"\"\")","15d3491a":"df.head(5)","ad812440":"df.info()","1271766b":"df.describe()","e2083fcc":"fig = px.histogram(df['imdb_rating'],nbins=40,labels={'value':'imbd_rating'})\nfig.update_layout(title='Distribution of IMBD Ratings',title_x=0.5)","26d6c732":"fig = px.box(df,y='imdb_rating')\nfig.update_layout(title='Box Plot of IMBD Ratings',title_x=0.5)","dfebd265":"df_top10 = df.sort_values('imdb_rating',ascending=False).head(10)\nfig = go.Figure(data=[go.Bar(\n            x=df_top10['title'], y=df_top10['imdb_rating'],\n            text=df_top10['imdb_rating'],\n            textposition='auto',\n        )])\nfig.update_layout(title='Top 10 shows\/movies\/episodes with the Highest IMDB Ratings',title_x=0.5)","aedc4ffc":"top10_m = df[df['type'] == 'movie'].sort_values('imdb_rating',ascending=False).head(10)\n\nfig = px.bar(top10_m,top10_m['title'],top10_m['imdb_rating'],text=top10_m['imdb_rating'])\nfig.update_layout(title='Top 10 Movies with highest IMDB Rating',title_x=0.5)\nfig.show()","546b65eb":"fig = go.Figure(data=[go.Scatter(\n    x=top10_m['title'],\n    y=top10_m['imdb_rating'],\n    mode='markers',\n    marker=dict(\n        color=10+np.random.randn(200),\n\n        size=top10_m['imdb_rating']*5,\n        showscale=True\n        )\n)])\nfig.update_layout(\n    title='Top 10 Movies with the Highest IMDB Ratings',\n    title_x=0.5,\n    xaxis_title=\"name\",\n    yaxis_title=\"IMDB Rating\",\n        template='plotly_white'\n\n)\nfig.show()","39a382bd":"top10_m = df[df['type'] == 'series'].sort_values('imdb_rating',ascending=False).head(10)\n\nfig = px.bar(top10_m,top10_m['title'],top10_m['imdb_rating'],text=top10_m['imdb_rating'])\nfig.update_layout(title='Top 10 Series with highest IMDB Rating',title_x=0.5)\nfig.show()","e90ac830":"fig = go.Figure(data=[go.Scatter(\n    x=top10_m['title'],\n    y=top10_m['imdb_rating'],\n    mode='markers',\n    marker=dict(\n        color=10+np.random.randn(200),\n\n        size=top10_m['imdb_rating']*5,\n        showscale=True\n        )\n)])\nfig.update_layout(\n    title='Top 10 Series with the Highest IMDB Ratings',\n    title_x=0.5,\n    xaxis_title=\"name\",\n    yaxis_title=\"IMDB Rating\",\n        template='plotly_white'\n\n)\nfig.show()","b94941bc":"top10_m = df[df['type'] == 'episode'].sort_values('imdb_rating',ascending=False).head(10)\n\nfig = px.bar(top10_m,top10_m['title'],top10_m['imdb_rating'],text=top10_m['imdb_rating'])\nfig.update_layout(title='Top 10 Episodes with highest IMDB Rating',title_x=0.5)\nfig.show()","6d8d4282":"fig = go.Figure(data=[go.Scatter(\n    x=top10_m['title'],\n    y=top10_m['imdb_rating'],\n    mode='markers',\n    marker=dict(\n        color=10+np.random.randn(200),\n\n        size=top10_m['imdb_rating']*5,\n        showscale=True\n        )\n)])\nfig.update_layout(\n    title='Top 10 Episodes with the Highest IMDB Ratings',\n    title_x=0.5,\n    xaxis_title=\"name\",\n    yaxis_title=\"IMDB Rating\",\n        template='plotly_white'\n\n)\nfig.show()","fb261d84":"fig = px.histogram(df['imdb_votes'])\nfig.update_layout(title='Distribution of IMBD Votes',title_x=0.5)","9b02fc1f":"df_top10_v = df.sort_values('imdb_votes',ascending=False).head(10)\ndf_top10_v['imdb_votes'] = df_top10_v['imdb_votes'].apply(lambda x: x.replace(',','.')).astype(float)\n\nfig = go.Figure(data=[go.Bar(\n            x=df_top10_v['title'], y=df_top10_v['imdb_votes'],\n            text=df_top10_v['imdb_votes'],\n            textposition='auto',\n        )])\n\nfig.update_layout(title='Top 10 shows\/movies\/episodes with the most IMDB Votes',title_x=0.5)\nfig.show()\n","87a7cb17":"fig = go.Figure(data=[go.Bar(\n            x=df_top10_v['genre'], y=df_top10_v['imdb_votes'],\n            text=round(df_top10_v['imdb_votes'],0),\n            textposition='auto',\n        )])\n\nfig.update_layout(title='Top 10 Genres with the most IMDB Votes',title_x=0.5)\nfig.show()","bfd37a65":"top10_m = df[df['type'] == 'movie'].sort_values('imdb_votes',ascending=False).head(10)\ntop10_m['imdb_votes'] = top10_m['imdb_votes'].apply(lambda x: x.replace(',','.')).astype(float)\n\n\nfig = px.bar(top10_m,top10_m['title'],top10_m['imdb_votes'],text=top10_m['imdb_votes'])\nfig.update_layout(title='Top 10 Movies with highest IMDB Votes',title_x=0.5)\nfig.show()","e115c55f":"top10_m = df[df['type'] == 'series'].sort_values('imdb_votes',ascending=False).head(10)\ntop10_m['imdb_votes'] = top10_m['imdb_votes'].apply(lambda x: x.replace(',','.')).astype(float)\n\nfig = px.bar(top10_m,top10_m['title'],top10_m['imdb_rating'],text=top10_m['imdb_rating'])\nfig.update_layout(title='Top 10 Series with highest IMDB Votes',title_x=0.5)\nfig.show()","a82a46e7":"top10_m = df[df['type'] == 'episode'].sort_values('imdb_votes',ascending=False).head(10)\ntop10_m['imdb_votes'] = top10_m['imdb_votes'].apply(lambda x: x.replace(',','.')).astype(float)\n\nfig = px.bar(top10_m,top10_m['title'],top10_m['imdb_rating'],text=top10_m['imdb_rating'])\nfig.update_layout(title='Top 10 Episodes with highest IMDB Votes',title_x=0.5)\nfig.show()","b3ba9999":"stopwords = ['dtype','Name','object','Length'] + list(STOPWORDS)\n\n\ngenre = wordcloud.WordCloud(max_words=6000,stopwords=stopwords,background_color='white')\n\ngenre.generate(str(df['title']))\n\nplt.figure(figsize=(15,15))\nplt.imshow(genre,interpolation='bilinear')\nplt.axis('off')\nplt.show()","c0bb786f":"stopwords = ['plot','an','In'] + list(STOPWORDS)\n\ngenre = wordcloud.WordCloud(max_words=6000,stopwords=stopwords,background_color='white')\n\ngenre.generate(str(df['plot']))\n\nplt.figure(figsize=(15,15))\nplt.imshow(genre,interpolation='bilinear')\nplt.axis('off')\nplt.show()","297ec88f":"stopwords = set(STOPWORDS)\n\ngenre = wordcloud.WordCloud(stopwords=stopwords,background_color='white')\n\ngenre.generate(str(df['actors']))\n\nplt.figure(figsize=(15,15))\nplt.imshow(genre,interpolation='bilinear')\nplt.axis('off')\nplt.show()","9539424b":"df_writer = df.assign(var1 = df.writer.str.split(',')).explode('var1').reset_index(drop = True)\n\ndf_writer['splitted'] = df_writer.var1.str.lstrip()","5394a4e6":"writers = pd.DataFrame(df_writer['splitted'].value_counts()).reset_index().head(10)\n\nfig = px.bar(writers,writers['index'],writers['splitted'],labels={'index':'name','splitted':'count'})\nfig.update_layout(title='Top 10 Writers',title_x=0.5)","af942ad3":"stopwords = ['object','director'] + list(STOPWORDS)\n\ngenre = wordcloud.WordCloud(max_words=6000,stopwords=stopwords,background_color='white')\n\ngenre.generate(str(df['director']))\n\nplt.figure(figsize=(15,15))\nplt.imshow(genre,interpolation='bilinear')\nplt.axis('off')\nplt.show()","967b2119":"df_director = df.assign(var1 = df.director.str.split(',')).explode('var1').reset_index(drop = True)\n\ndf_director['splitted'] = df_director.var1.str.lstrip()\n\ndirectors = pd.DataFrame(df_director['splitted'].value_counts()).reset_index().head(10)\n\nfig = px.bar(directors,directors['index'],directors['splitted'],labels={'index':'name','splitted':'count'})\nfig.update_layout(title='Top 10 Directors',title_x=0.5)","f2f97c8f":"stop_words = ['dtype','Name','object','Length'] + list(STOPWORDS)\n\ngenre = wordcloud.WordCloud(max_words=6000,stopwords=stop_words,background_color='white')\n\ngenre.generate(str(df['genre']))\n\nplt.figure(figsize=(15,15))\nplt.imshow(genre,interpolation='bilinear')\nplt.axis('off')\nplt.show()","85ded9b9":"df_genres = df.groupby('genre')[['imdb_rating']].sum().reset_index().sort_values('imdb_rating',ascending=False)","20af0683":"df_genre = df.assign(var1 = df.genre.str.split(',')).explode('var1').reset_index(drop = True)\n\ndf_genre['splitted'] = df_genre.var1.str.lstrip()\n\ngenres = pd.DataFrame(df_genre['splitted'].value_counts()).reset_index().head(10)\n\nfig = px.bar(genres,genres['index'],directors['splitted'],labels={'index':'name','splitted':'count'})\nfig.update_layout(title='Top 10 Genres',title_x=0.5)","5db2656e":"fig = go.Figure(data=[go.Bar(\n            x=df_genres['genre'], y=df_genres['imdb_rating'],\n            text=df_genres['imdb_rating'],\n            textposition='auto',\n        )])\n\nfig.update_layout(title='Sum of IMBD Ratings per Genre',title_x=0.5)\nfig.show()","cee1d7ad":"fig = go.Figure(data=[go.Bar(\n            x=df_genres['genre'].head(10), y=df_genres['imdb_rating'].head(10),\n            text=round(df_genres['imdb_rating'].head(10),2),\n            textposition='auto',\n        )])\n\nfig.update_layout(title='Top 10 Genres with the highest sum of IMDB ratings',title_x=0.5)\nfig.show()","89e63a9e":"df_genres_m = df.groupby('genre')[['metascore']].sum().reset_index().sort_values('metascore',ascending=False)","65bb25bd":"fig = go.Figure(data=[go.Bar(\n            x=df_genres_m['genre'], y=df_genres_m['metascore'],\n            text=df_genres_m['metascore'],\n            textposition='auto',\n        )])\n\nfig.update_layout(title='Sum of Metascore Ratings per Genre',title_x=0.5)\nfig.show()","7fe3d13a":"fig = go.Figure(data=[go.Bar(\n            x=df_genres_m['genre'].head(10), y=df_genres_m['metascore'].head(10),\n            text=round(df_genres_m['metascore'].head(10),2),\n            textposition='auto',\n        )])\n\nfig.update_layout(title='Top 10 Genres with the highest sum of Metascore ratings',title_x=0.5)\nfig.show()","3dfebdc3":"fig = px.histogram(df['year'],labels={'value':'year'})\nfig.update_layout(title='Distribution of show years',title_x=0.5)","af613f3c":"df_years = df.groupby('year')[['imdb_rating']].sum().reset_index().sort_values('imdb_rating',ascending=False)","41a83c35":"fig = px.bar(df_years,x=df_years['year'],y=df_years['imdb_rating'])\nfig.update_layout(title='Sum of Imdb ratings per year',title_x=0.5)","d545e58a":"fig = px.pie(df_years.head(10),names=df_years['year'].head(10),values=df_years['imdb_rating'].head(10),labels=df_years['year'],hole=0.5)\nfig.update_traces(textposition='inside',name='year+label')\n\nfig.update_layout(title='Top 10 years with the highest Cumulative IMDB ratings',title_x=0.5)","fd128b8b":"df_years_m = df.groupby('year')[['metascore']].sum().reset_index().sort_values('metascore',ascending=False)","8675616f":"fig = px.bar(df_years_m,x=df_years['year'],y=df_years_m['metascore'])\nfig.update_layout(title='Sum of Metascore ratings per year',title_x=0.5)","b042864f":"fig = px.pie(df_years_m.head(10),names=df_years_m['year'].head(10),values=df_years_m['metascore'].head(10),labels=df_years_m['year'],hole=0.5)\nfig.update_traces(textposition='inside',name='year+label')\n\nfig.update_layout(title='Top 10 years with the highest Cumulative Metascore ratings',title_x=0.5)","781f9c1d":"fig = px.box(df,y='runtime')\nfig.update_layout(title='Box Plot of Runtimes',title_x=0.5)","cc96977b":"fig = px.histogram(df['runtime'])\nfig.update_layout(title='Distribution of movie\/show runtimes',title_x=0.5)","3d8b7667":"df_runtime_top10 = df.sort_values('runtime',ascending=False).head(10)\ndf_runtime_top10['runtime'] = df_runtime_top10['runtime'].apply(lambda x:x.replace('min','')).astype(int)\n\nfig = px.bar(df_runtime_top10,x=df_runtime_top10['title'],y=df_runtime_top10['runtime'],text=df_runtime_top10['runtime'])\nfig.update_layout(title='Top 10 movies\/shows with the most runtimes',title_x=0.5)\nfig.show()","5a811c24":"df_runtime = df.groupby('runtime')[['imdb_rating']].sum().reset_index().sort_values('imdb_rating',ascending=False)","db7142b2":"fig = px.bar(df_runtime,x=df_runtime['runtime'],y=df_runtime['imdb_rating'],text=df_runtime['imdb_rating'])\nfig.update_layout(title='Cumulative IMDB Ratings grouped by runtimes',title_x=0.5)\n\nfig.show()","f6e4580d":"fig = px.bar(df_runtime.head(10),x=df_runtime['runtime'].head(10),y=df_runtime['imdb_rating'].head(10),text=round(df_runtime['imdb_rating'],2).head(10))\nfig.update_layout(title='Top 10 Runtimes with the highest sum of IMDB Ratings',title_x=0.5)\n\nfig.show()","f2b5bd42":"df_runtime_m = df.groupby('runtime')[['metascore']].sum().reset_index().sort_values('metascore',ascending=False)","823a455d":"fig = px.bar(df_runtime_m,x=df_runtime_m['runtime'],y=df_runtime_m['metascore'],text=df_runtime_m['metascore'])\nfig.update_layout(title='Cumulative Metascore Ratings grouped by runtimes',title_x=0.5)\n\nfig.show()","3b1a035c":"fig = px.bar(df_runtime_m.head(10),x=df_runtime_m['runtime'].head(10),y=df_runtime_m['metascore'].head(10),text=round(df_runtime_m['metascore'],2).head(10))\nfig.update_layout(title='Top 10 Runtimes with the highest sum of Metascore Ratings',title_x=0.5)\n\nfig.show()","d275058d":"fig = px.histogram(df['metascore'])\nfig.update_layout(title='Metascore Distribution',title_x=0.5)","37583c55":"fig = px.box(df,y='metascore')\nfig.update_layout(title='Box Plot of Metascore Ratings',title_x=0.5)","62f2dba5":"df_top10 = df.sort_values('metascore',ascending=False).head(10)\nfig = go.Figure(data=[go.Bar(\n            x=df_top10['title'], y=df_top10['metascore'],\n            text=df_top10['imdb_rating'],\n            textposition='auto',\n        )])\nfig.update_layout(title='Top 10 movies\/shows\/espisodes with the Highest Metascore Ratings',title_x=0.5)","a2024e7f":"fig = px.pie(df['metascore'],values=df['metascore'],names=df['genre'])\nfig.update_traces(textposition='inside')\nfig.update_layout(title='Number of Metascore Ratings by Genre',title_x=0.5)\nfig.show()","543b102c":"df_lang = df.assign(var1 = df.language.str.split(',')).explode('var1').reset_index(drop = True)\n\ndf_lang['splitted'] = df_lang.var1.str.lstrip()\n\nlang = pd.DataFrame(df_lang['splitted'].value_counts()).reset_index().head(10)\nlang.drop(df.index[5], inplace=True)\n\nfig = px.bar(lang,lang['index'],lang['splitted'])\nfig.update_layout(title='Top 10 Languages',title_x=0.5)","bba91519":"fig = px.histogram(df['type'])\nfig.update_layout(title='Distribution of show types',title_x=0.5)","139a248f":"df_type = df.groupby('type')[['imdb_rating']].sum().reset_index().sort_values('imdb_rating',ascending=False)\nfig = px.histogram(df_type,df_type['type'],df_type['imdb_rating'])\nfig.update_layout(title='Sum of IMDB Ratings per show types',title_x=0.5)","d08b00ea":"fig = px.pie(df_type,names=df_type['type'],values=df_type['imdb_rating'],labels=df_type['type'],hole=0.5)\nfig.update_layout(title='Sum of IMDB Ratings per show types',title_x=0.5)","e0e9be17":"fig = px.histogram(df['rated'])\nfig.update_layout(title='Distribution of age ratings',title_x=0.5)","43068906":"df_r = df.groupby('rated')[['imdb_rating']].sum().reset_index().sort_values('imdb_rating',ascending=False)\n","3394d373":"fig = px.histogram(df_type,df_r['rated'],df_r['imdb_rating'])\nfig.update_layout(title='Sum of IMDB Ratings per Age ratings',title_x=0.5)","41d21b40":"fig = px.pie(df_r,names=df_r['rated'],values=df_r['imdb_rating'],labels=df_r['rated'],hole=0.5)\nfig.update_traces(textposition='inside')\nfig.update_layout(title='Sum of IMDB Ratings grouped by Age Ratings',title_x=0.5)","d5c3efe8":"fig = px.treemap(df_r, path=['rated'], values=df_r['imdb_rating'], height=700,\n                 title='Sum of IMDB Ratings grouped by Age Ratings', color_discrete_sequence = px.colors.qualitative.Dark2)\nfig.data[0].textinfo = 'label+text+value'\nfig.update_layout(title_x=0.5)\nfig.show()","728292fe":"fig = px.histogram(df['added_at'])\nfig.update_layout(title='Distribution of the added dates of the shows',title_x=0.5)","fb8533c3":"df_aa = df.groupby('added_at')[['imdb_rating']].sum().reset_index().sort_values('imdb_rating',ascending=False)\n","c3cf9c90":"fig = px.bar(df_aa,df_aa['added_at'],df_aa['imdb_rating'])\nfig.update_layout(title='Added_at dates with the highest sum of IMDB ratings',title_x=0.5)","f5766de6":"fig = px.bar(df_aa.head(10),df_aa['added_at'].head(10),df_aa['imdb_rating'].head(10))\nfig.update_layout(title='Top 10 added_at dates with the highest sum of IMDB ratings',title_x=0.5)","f9357f33":"import warnings\nfrom pandas.core.common import SettingWithCopyWarning\nwarnings.simplefilter(action=\"ignore\", category=SettingWithCopyWarning)","c062b59b":"from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel","2b4ac373":"df['plot'] = df['plot'].fillna('')","a23cac5f":"tfidf = TfidfVectorizer()\nplot_matrix = tfidf.fit_transform(df['plot'])","c2a3cadd":"similarity_matrix = linear_kernel(plot_matrix,plot_matrix)","b2c8fe9f":"mapping = pd.Series(df.index,index=df.title)","efc44470":"def plot_content_recommender(m_name):\n    m_index = mapping[m_name]\n    similarity_score = list(enumerate(similarity_matrix[m_index]))\n    similarity_score = sorted(similarity_score,key=lambda x:x[1],reverse=True)\n    similarity_score = similarity_score[1:10]\n    indices = [i[0] for i in similarity_score]\n    return df.title.iloc[indices]","28a5aba2":"plot_content_recommender('Coco')","2f6a09f5":"plot_content_recommender('Finding Nemo')","0849f7a7":"plot_content_recommender('Cars 3')","3dba47ff":"data = df[['title','plot','director','actors','imdb_rating','genre','plot']]\ndata['actors'] = data['actors'].str.split(',').fillna('')\ndata['genre_splitted'] = data['genre'].str.split(',').fillna('')\ndata['director'] = data['director'].fillna('')\ndata['plot'] = data['plot'].fillna('')","04b96dcd":"def clean_data(x):\n    if isinstance(x, list):\n        return [str.lower(i.replace(\" \", \"\")) for i in x]\n    else:\n        if isinstance(x, str):\n            return str.lower(x.replace(\" \", \"\"))\n        else:\n            return ''","d8aeb231":"features = ['actors', 'genre', 'director']\n\nfor feature in features:\n    data[feature] = data[feature].apply(clean_data)","370248e7":"data","39dfb2d1":"def create_soup(x):\n    return ' '.join(x['actors']) + ' ' + x['director'] + ' ' + ' '.join(x['genre'] + ' '.join(x['plot']))","29bda2fc":"data['soup'] = data.apply(create_soup, axis=1)\n","373e3f0c":"from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity","5a2852bb":"count = CountVectorizer()\ncount_matrix = count.fit_transform(data['soup'])","81db6149":"sim_matrix = cosine_similarity(count_matrix,count_matrix)","f5b0ed90":"data = data.reset_index()\nmapping = pd.Series(data.index, index=data['title'])","dbe61b14":"def extended_recommender(m_name):\n    m_index = mapping[m_name]\n    similarity_score = list(enumerate(sim_matrix[m_index]))\n    similarity_score = sorted(similarity_score,key=lambda x:x[1],reverse=True)\n    similarity_score = similarity_score[1:10]\n    indices = [i[0] for i in similarity_score]\n    return data.title.iloc[indices]","fccfcc2e":"extended_recommender('Coco')","87045788":"extended_recommender('Moana')","f3729934":"extended_recommender('Toy Story')","b5aac071":"<h1 style='text-align:center; font-size:30px'>Runtime<\/h1>","d6a5d58f":"<h1 style='text-align:center; font-size:25px'>WordCloud of the most frequent Director names<\/h1>","5c189674":"<h1 style='text-align:center; font-size:30px'>Languages<\/h1>","51a825cc":"<h2 style='text-align:center; font-size:20px; font-weight:none;'>1. Exploratory Data Analysis<\/h2>\n<h2 style='text-align:center; font-size:20px; font-weight:none;'>2. Content-Based Recommender Systems<\/h2>","2b316753":"<h1 style='text-align:center; font-size:30px'>Type<\/h1>","0de8f8ae":"<h1 style='text-align:center; font-size:30px'>Date added at<\/h1>","29bb647c":"<h1 style='text-align:center; font-size:30px'>1. Content based Recommender System based on movie plots<\/h1>","de293d06":"<h1 style='text-align:center; font-size:30px'>Year<\/h1>","d96919f2":"<h1 style='text-align:center; font-size:50px; font-weight:bold;'>Recommender Systems<\/h1>","c6d0fa9a":"<h1 style='text-align:center; font-size:50px; font-weight:bold;'>Exploratory Data Analysis<\/h1>","25bb7713":"<h1 style='text-align:center; font-size:30px'>Genres<\/h1>","3641786e":"<h1 style='text-align:center; font-size:25px'>WordCloud of the most frequent actor names<\/h1>","a714b219":"<h1 style='text-align:center; font-size:30px'>2. Content based Recommender System based on movie plot,actors,directors and genre<\/h1>","ae215b34":"<h1 style='text-align:center; font-size:25px'>WordCloud of the Genres<\/h1>","430c064c":"<h1 style='text-align:center; font-size:30px'>Metascore<\/h1>","0abd9c4f":"<h1 style='text-align:center; font-size:30px'>IMBD Ratings<\/h1>","a91dcc3b":"<h1 style='text-align:center; font-size:30px'>Age Ratings<\/h1>","22e2408a":"<h1 style='text-align:center; font-size:50px; font-weight:bold;'>Disney+ Visualisations & Recommender Systems<\/h1>","369e4e61":"<h1 style='text-align:center; font-size:30px'>IMBD Votes<\/h1>","e416bff2":"<h1 style='text-align:center; font-size:25px'>WordCloud of the most frequent words in the Titles<\/h1>","46b2ad88":"<h1 style='text-align:center; font-size:30px; font-weight:none;'>Table of Contents<\/h1>","82404392":"<h1 style='text-align:center; font-size:30px'>Title,Plot,Actors & Directors<\/h1>"}}