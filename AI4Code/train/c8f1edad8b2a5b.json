{"cell_type":{"20d34293":"code","3e9bcda4":"code","46cdd25a":"code","ad8953d3":"code","e3b4e35f":"code","77102acb":"code","487b8baa":"code","93958cbc":"code","1cf6aa37":"code","41a0b60e":"code","b024d0b2":"code","4885200a":"code","5174d8f7":"code","5616f14c":"code","6e23d0a5":"code","6f439cc5":"code","56e6ee15":"code","82b54446":"code","e251e6bd":"code","a8c5d223":"code","b162975d":"code","a6ac4150":"code","040db20f":"code","d9cabaec":"code","255196f5":"code","5fd475b5":"code","6849a341":"code","480057fe":"code","9f77c77c":"code","e6be15e7":"markdown","5cede06b":"markdown","b2d5ab24":"markdown","806fe67f":"markdown","02a67185":"markdown","91029544":"markdown","8885db58":"markdown","1210d4e3":"markdown","5a931c1f":"markdown","d6c8b555":"markdown"},"source":{"20d34293":"import numpy as np \nimport pandas as pd \n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import StratifiedKFold\n\nfrom sklearn.model_selection import train_test_split\n#from sklearn.cross_validation import KFold\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nimport os\nprint(os.listdir(\"..\/input\"))\nnp.random.seed(0)","3e9bcda4":"train = pd.read_csv(\"..\/input\/train.csv\",index_col='PassengerId')\ntest = pd.read_csv(\"..\/input\/test.csv\",index_col='PassengerId')#","46cdd25a":"train.shape,test.shape","ad8953d3":"train.head()","e3b4e35f":"def replaceGen(sex):\n    gen =0\n    if sex=='male':\n        gen=0\n    elif sex=='female':\n        gen=1\n    return gen\n    ","77102acb":"train['Sex'] = train['Sex'].apply(replaceGen)\ntest['Sex'] = test['Sex'].apply(replaceGen)","487b8baa":"train['Age'].hist(figsize=(10, 4));","93958cbc":"train['Age'].fillna(train['Age'].mean(), inplace=True)\ntest['Age'].fillna(test['Age'].mean(), inplace=True)","1cf6aa37":"test[test['Fare'].isna()]","41a0b60e":"Age_mean = train[(train['Pclass']==3) & (train['Embarked']=='S') & (train['Age']>55) & (train['Sex']==0)]['Fare'].mean()","b024d0b2":"test['Fare'].fillna(Age_mean, inplace=True)","4885200a":"X =train.drop(['Survived','Name','Ticket','Cabin','Embarked'],axis=1)\ny =pd.DataFrame(train['Survived'])\ntest_f =test.drop(['Name','Ticket','Cabin','Embarked'],axis=1)","5174d8f7":"X.shape,y.shape","5616f14c":"x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","6e23d0a5":"x_train, x_val, y_train, y_val = train_test_split(x_train, y_train, test_size=0.33, random_state=42)","6f439cc5":"model1 = DecisionTreeClassifier()\nmodel1.fit(x_train, y_train)\nval_pred1=pd.DataFrame(model1.predict(x_val))\ntest_pred1=pd.DataFrame(model1.predict(x_test))\n\nmodel2 = KNeighborsClassifier()\nmodel2.fit(x_train,y_train)\nval_pred2=pd.DataFrame(model2.predict(x_val))\ntest_pred2=pd.DataFrame(model2.predict(x_test))\n\nmodel3 = RandomForestClassifier()\nmodel3.fit(x_train,y_train)\nval_pred3=pd.DataFrame(model3.predict(x_val))\ntest_pred3=pd.DataFrame(model3.predict(x_test))\n\nmodel4 = GradientBoostingClassifier()\nmodel4.fit(x_train,y_train)\nval_pred4=pd.DataFrame(model4.predict(x_val))\ntest_pred4=pd.DataFrame(model4.predict(x_test))","56e6ee15":"x_val.head()","82b54446":"df_val=pd.concat([x_val.reset_index(drop=True), val_pred1.reset_index(drop=True),val_pred2.reset_index(drop=True),val_pred3.reset_index(drop=True),val_pred4.reset_index(drop=True)],axis=1)\ndf_test=pd.concat([x_test.reset_index(drop=True), test_pred1.reset_index(drop=True),test_pred2.reset_index(drop=True),test_pred3.reset_index(drop=True),test_pred4.reset_index(drop=True)],axis=1)\n","e251e6bd":"df_val.head()","a8c5d223":"model = LogisticRegression()\nmodel.fit(df_val,y_val)\nmodel.score(df_test,y_test)","b162975d":"x_train, x_val, y_train, y_val = train_test_split(X, y, test_size=0.33, random_state=42)","a6ac4150":"model1 = DecisionTreeClassifier()\nmodel1.fit(x_train, y_train)\nval_pred1=pd.DataFrame(model1.predict(x_val))\ntest_pred1=pd.DataFrame(model1.predict(test_f))\n\nmodel2 = KNeighborsClassifier()\nmodel2.fit(x_train,y_train)\nval_pred2=pd.DataFrame(model2.predict(x_val))\ntest_pred2=pd.DataFrame(model2.predict(test_f))\n\nmodel3 = RandomForestClassifier()\nmodel3.fit(x_train,y_train)\nval_pred3=pd.DataFrame(model3.predict(x_val))\ntest_pred3=pd.DataFrame(model3.predict(test_f))\n\nmodel4 = GradientBoostingClassifier()\nmodel4.fit(x_train,y_train)\nval_pred4=pd.DataFrame(model4.predict(x_val))\ntest_pred4=pd.DataFrame(model4.predict(test_f))","040db20f":"x_val.head()","d9cabaec":"df_val=pd.concat([x_val.reset_index(drop=True), val_pred1.reset_index(drop=True),val_pred2.reset_index(drop=True),val_pred3.reset_index(drop=True),val_pred4.reset_index(drop=True)],axis=1)\ndf_test=pd.concat([test_f.reset_index(drop=True), test_pred1.reset_index(drop=True),test_pred2.reset_index(drop=True),test_pred3.reset_index(drop=True),test_pred4.reset_index(drop=True)],axis=1)","255196f5":"df_val.head()","5fd475b5":"model = LogisticRegression()\nmodel.fit(df_val,y_val)\ny_target = model.predict(df_test)","6849a341":"test_salida = pd.DataFrame( { 'PassengerId': test_f.index , 'Survived': y_target } )","480057fe":"#Show Output\ntest_salida.head(20)","9f77c77c":"test_salida.to_csv( 'titanic_pred.csv' , index = False )","e6be15e7":"Show my Dataset","5cede06b":"## Advanced Ensemble Techniques Blending\nthis Kernel is built in base to this documents: https:\/\/www.analyticsvidhya.com\/blog\/2018\/06\/comprehensive-guide-for-ensemble-models\/ \nIf I help you please upvote","b2d5ab24":"i count data missing and count dataset","806fe67f":"This Kernel es a basic example of implementation about Stacking, this technique is very import for understand techniques more avanzed ","02a67185":"Show the accuracy in the model of second level","91029544":"Upload dataset","8885db58":"## Engineer Features\nWe work in the features Dataset, this example is about Stacking, and it's not important to deep in the feature","1210d4e3":"Split the Dataset in Train and test and data validation\n\n![Explained](https:\/\/s3-ap-south-1.amazonaws.com\/av-blog-media\/wp-content\/uploads\/2018\/05\/image-7-300x226.png)","5a931c1f":"We test the models and its accuracy","d6c8b555":"Run model with all Dataset"}}