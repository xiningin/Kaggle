{"cell_type":{"8e0a5525":"code","95a7a47d":"code","03376581":"code","ee700ed5":"code","2493d972":"code","18c46175":"code","4da766e3":"code","20fe70d2":"code","dd6710c1":"code","2cfeb674":"code","c7958012":"code","33bb68a5":"code","08185280":"code","ed8ebad7":"code","8e6440ee":"code","679983c5":"code","0bd3b156":"code","18cc620c":"code","8bfb5d75":"code","af797eaa":"code","37ca5f7a":"code","393535ca":"code","9ccbb23e":"code","e2d3ffba":"code","0a8805f5":"code","2826273e":"code","f514c586":"code","5bccc5c9":"code","4e1f751c":"code","45a26a83":"code","e1f04d7b":"code","f386f97f":"code","ef20cfb0":"code","ba8f1d64":"code","eb4cd537":"code","b2b20a66":"code","6ab63316":"code","f7b276e3":"code","bb5d5676":"code","264b6856":"code","e2032837":"code","484d21ea":"code","d758abe1":"code","972e0291":"code","d9a20faf":"code","b406d3a3":"code","d7ebbb4c":"code","89b521c6":"code","edb39938":"code","514bae97":"code","a26b6b22":"code","921381a3":"code","20164e4e":"code","ab328bf0":"code","9f1939a2":"code","c511972b":"code","9287cca5":"code","a16905cb":"code","2896837f":"code","4e48746b":"code","31de59eb":"code","8f837314":"code","2092adb0":"code","4d9673f2":"code","a4f34345":"code","c391b39a":"code","c40e15c3":"code","d93c30e9":"code","d07a762f":"code","de2f04cd":"code","331862a2":"code","ec6e79b5":"code","bbdf3d00":"code","ddfed836":"code","00c41335":"code","32eed922":"code","385cda2d":"code","2476e3c5":"code","6fb1be13":"code","4ef57c92":"code","4ddb5f3b":"code","f7e5627e":"code","89e4cf2e":"code","af8d4a92":"code","e4159cdc":"code","b2443b92":"code","3eaf0a25":"code","585cf1fe":"code","d83211bb":"code","bbd887d6":"code","c02e7223":"code","b8c61b0d":"code","290d46f9":"code","344f1323":"code","e649d12e":"code","eeb0ebea":"code","31aea9a4":"code","c476b394":"code","c33db6f3":"code","c7cbc06d":"code","be1a75af":"code","463bcde4":"code","f04a9e86":"code","0734c20d":"code","a2bb3bf8":"code","dc545400":"code","a236e346":"code","95d5c2a7":"code","99e205a0":"code","6ee94bfe":"code","a0ab336d":"code","1790669c":"code","59dbae28":"code","277e84d8":"code","a572f367":"code","1a7a179b":"code","a453df1d":"code","c610613d":"code","fd3bcbb1":"code","15f695bf":"code","bd0e6d02":"code","58809d44":"code","6d79b46c":"code","881034dc":"code","f45f8963":"code","775a5fd9":"code","fd8e2b27":"code","4a06dd8e":"code","9d7067d0":"code","f00b7a9f":"code","3f4f75ed":"code","981a1b3b":"code","a09c331a":"code","f5b5ddb1":"code","181834fd":"code","63a6bb24":"code","48f6f41d":"code","7c33c1b0":"code","ff4f3479":"code","c330a03e":"code","7351d30f":"code","b7cc5b83":"code","46dbcbc6":"code","0f893bf6":"code","97af7616":"code","8c56f602":"code","14926ca5":"code","c916f9ae":"code","38f89e6e":"code","2b69630b":"code","ac075786":"code","ec3dcfbc":"code","b35a939d":"code","6f39edf1":"code","0abba2c3":"code","28252e8a":"code","0b3320c6":"code","16fd1186":"code","dbfbe706":"code","ef951d61":"code","3a26efc1":"code","383188cd":"code","0ac52f43":"code","c09831bd":"code","90838340":"code","55dead76":"code","70b03cdb":"code","7a09ae4f":"code","d29e7639":"code","aadf069f":"code","9d5718de":"code","2462a1d0":"code","13e2bb9d":"code","d79e5cd1":"code","00687f6b":"code","6d9e86ed":"code","e87f3b42":"code","7b338cd0":"code","9c2ca6f8":"code","aaa0a0bf":"code","db220255":"code","f6e52e40":"code","b611a823":"code","119acbf7":"markdown","d3e2a9c7":"markdown","9f376349":"markdown","3b338916":"markdown","a17b5571":"markdown","c460a4d0":"markdown","62ee63ab":"markdown","3fa348d7":"markdown","60948d29":"markdown","dd7fb452":"markdown","0201c5c8":"markdown","1f39d063":"markdown","ec20ea20":"markdown","a365e9a2":"markdown","b1cb75a4":"markdown","433df9a0":"markdown","13f19c7c":"markdown","fd8c0583":"markdown","e103e3ff":"markdown","e4a78e59":"markdown","3fb36562":"markdown","937d649d":"markdown","967b12d1":"markdown","504b2742":"markdown","c4239fba":"markdown","36669ac5":"markdown","545dd25b":"markdown","25980990":"markdown","02f6c671":"markdown","84c6122c":"markdown","ab9f372b":"markdown","526d659d":"markdown","87a77822":"markdown","9dba4abf":"markdown","c76a0984":"markdown","e9984082":"markdown","fd8087b5":"markdown","373b8f9a":"markdown","e21aea43":"markdown","f9a92a5f":"markdown","720b61b7":"markdown","2eb93959":"markdown","36c31ee2":"markdown","6d52efb0":"markdown","57115773":"markdown","812be775":"markdown","8af7a2bc":"markdown","c64223d9":"markdown","3e63581e":"markdown","a15a2abb":"markdown","fb042819":"markdown","7aab9e95":"markdown","3adc707a":"markdown"},"source":{"8e0a5525":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)","95a7a47d":"\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\n\n\nfrom sklearn.preprocessing import minmax_scale\nfrom sklearn.decomposition import PCA\n## Hyperopt modules\nfrom hyperopt import fmin, hp, tpe, Trials, space_eval, STATUS_OK, STATUS_RUNNING\nfrom functools import partial\nimport os\nimport gc\n\n","03376581":"test_ID=pd.read_csv(\"\/kaggle\/input\/ieee-fraud-detection\/test_identity.csv\")\ntrain_ID=pd.read_csv(\"\/kaggle\/input\/ieee-fraud-detection\/train_identity.csv\")\ntest_TR=pd.read_csv(\"\/kaggle\/input\/ieee-fraud-detection\/test_transaction.csv\")\n# train_TR=pd.read_csv(\"\/kaggle\/input\/ieee-fraud-detection\/sample_submission.csv\")\ntrain_df=pd.read_csv(\"\/kaggle\/input\/ieee-fraud-detection\/train_transaction.csv\")","ee700ed5":"train_df.info()","2493d972":"train_ID.head()","18c46175":"train_ID.info()","4da766e3":"## Function to reduce the DF size\ndef memory(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(\n        end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df\n\n","20fe70d2":"data=memory(train_df)\n","dd6710c1":"del train_df","2cfeb674":"data.head()","c7958012":"\ndef PCA_(df, cols, prefix='PCA_', rand_seed=4):\n    pca = PCA(random_state=rand_seed)\n    pca.fit_transform(df[cols])\n    represent=np.cumsum(np.round(pca.explained_variance_ratio_, decimals = 4)*100)\n    print(represent)\n    n_components=0\n    for i in represent:\n        \n        n_components+=1\n        if i >=98:\n            print(\"n_components= \",n_components)\n            break\n            \n    pca = PCA(random_state=rand_seed,n_components=n_components)\n    principalComponents = pca.fit_transform(df[cols])\n    \n    principalDf = pd.DataFrame(principalComponents)\n\n    df.drop(cols, axis=1, inplace=True)\n\n    principalDf.rename(columns=lambda x: str(prefix)+str(x), inplace=True)\n\n    df = pd.concat([df, principalDf], axis=1)\n    \n    return df","33bb68a5":"def frekans(data,columns,n_label=\"NONE\"):\n    \n    for col in columns:\n        data[col].fillna(n_label,inplace=True)\n        fq_encode = data[col].value_counts(dropna=False).to_dict()   \n        data[col+\"_Fr\"] = data[col].map(fq_encode)\n        data=data.drop(col,axis=1)\n    return data\n","08185280":"data.head()","ed8ebad7":"V_columns=data.columns[55:]\ns=data.loc[:,V_columns].head()","8e6440ee":"!pip install missingno\nimport missingno as msno\nmsno.bar(data.loc[:,V_columns]);","679983c5":"\nfor col in V_columns:\n    data[col] = data[col].fillna((data[col].min() - 1))\n    data[col] = (minmax_scale(data[col], feature_range=(0,1)))\ndata=PCA_(data,V_columns,prefix='PCA_V_')\n    ","0bd3b156":"M_columns = ['M1','M2','M3','M5','M6','M7','M8','M9']\ndata.loc[:,M_columns].head()","18cc620c":"for col in M_columns:\n    print(data[col].value_counts())\n    print(\"NaN\",data[col].isnull().sum())\n    print(\"****************\")","8bfb5d75":"\nM_columns = ['M1','M2','M3','M5','M6','M7','M8','M9']\n\ndata=frekans(data,M_columns)\n\n","af797eaa":"data.head()","37ca5f7a":"M_fr=list(data.columns[-len(M_columns):])\nfor col in M_fr:\n    data[col] = (minmax_scale(data[col], feature_range=(0,1)))\ndata=PCA_(data,M_fr,prefix=\"PCA_M_\")\n\n","393535ca":"data.head()","9ccbb23e":"# i_cols = ['M1','M2','M3','M5','M6','M7','M8','M9']\n\n# for df in [df]:\n#     df['M_sum'] = df[i_cols].sum(axis=1).astype(np.int8)\n#     df['M_na'] = df[i_cols].isna().sum(axis=1).astype(np.int8)","e2d3ffba":"C_columns = ['C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7','C8', 'C9', 'C10', 'C11', 'C12', 'C13', 'C14']\n\ndata.loc[:,C_columns].head()","0a8805f5":"msno.bar(data.loc[:,C_columns]);","2826273e":"C_columns = ['C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7','C8', 'C9', 'C10', 'C11', 'C12', 'C13', 'C14']\n\nfor col in C_columns:\n    data[col] = data[col].fillna((data[col].min() - 1))\n    data[col] = (minmax_scale(data[col], feature_range=(0,1)))\n\ndata=PCA_(data,C_columns,prefix='PCA_C_')","f514c586":"data.head()","5bccc5c9":"D_columns = ['D1', 'D2', 'D3', 'D4', 'D5', 'D6', 'D7','D8', 'D9', 'D10', 'D11', 'D12', 'D13', 'D14','D15']\n\ndata.loc[:,D_columns].head()\n","4e1f751c":"msno.bar(data.loc[:,D_columns]);","45a26a83":"D_columns = ['D1', 'D2', 'D3', 'D4', 'D5', 'D6', 'D7','D8', 'D9', 'D10', 'D11', 'D12', 'D13', 'D14','D15']\n\n\nfor col in D_columns:\n    data[col] = (minmax_scale(data[col], feature_range=(0,1)))\n    data[col] = data[col].fillna(-1)\ndata=PCA_(data,D_columns,prefix='PCA_D_')","e1f04d7b":"data.head()","f386f97f":"data.M4.value_counts()","ef20cfb0":"for col in [\"M4\"]:\n    print(data[col].value_counts())\n    print(\"NaN\",data[col].isnull().sum())\n    print(\"****************\")","ba8f1d64":"col=[\"M4\"]\ndata=frekans(data,col)","eb4cd537":"data.head()","b2b20a66":"data=memory(data)","6ab63316":"df=memory(train_ID)","f7b276e3":"new=data.merge(df,how='left', \n               left_index=True, \n               right_index=True, on='TransactionID')","bb5d5676":"del df\ndel data","264b6856":"new.head()","e2032837":"ID_columns = ['id_01', 'id_02', 'id_03', 'id_04', 'id_05','id_06', 'id_07', 'id_08', 'id_09', 'id_10', 'id_11']\nnew.loc[:,ID_columns].head()","484d21ea":"ID_columns = ['id_01', 'id_02', 'id_03', 'id_04', 'id_05','id_06', 'id_07', 'id_08', 'id_09', 'id_10', 'id_11']\n    \nfor col in ID_columns:\n    new[col] = (minmax_scale(new[col], feature_range=(0,1)))\n    new[col].fillna(-1, inplace=True)\n    \nnew=PCA_(new,ID_columns,prefix='PCA_id_')","d758abe1":"new.head()","972e0291":"id_mix_columns=['id_12','id_15','id_16','id_27','id_28','id_29','id_23']\nnew.loc[:,id_mix_columns].head()\n","d9a20faf":"for col in id_mix_columns:\n    \n    print(new[col].value_counts())\n    print(\"NaN \",new[col].isnull().sum())\n    print(\"****************\")\n    ","b406d3a3":"id_mix_columns=['id_12','id_15','id_16','id_27','id_28','id_29','id_23']\nnew=frekans(new,id_mix_columns)","d7ebbb4c":"new.head()","89b521c6":"id_mix_2=['id_35','id_36','id_37','id_38']\nnew.loc[:,id_mix_2].head()","edb39938":"for col in id_mix_2:\n    print(new[col].value_counts())\n    print(\"NaN\",new[col].isnull().sum())\n    print(\"****************\")\n    ","514bae97":"id_mix_2=['id_35','id_36','id_37','id_38']\nnew=frekans(new,id_mix_2)\n","a26b6b22":"new.head()","921381a3":"id_mix_3=['id_13','id_14', 'id_17', 'id_18', 'id_19', 'id_20','id_21', 'id_22','id_24', 'id_25', 'id_26']\nnew.loc[:,id_mix_3].head()","20164e4e":"\nmsno.bar(new.loc[:,id_mix_3]);","ab328bf0":"id_mix_3=['id_13','id_14', 'id_17', 'id_18', 'id_19', 'id_20','id_21', 'id_22','id_24', 'id_25', 'id_26']\nfor col in id_mix_3: \n    new[col].fillna(new[col].min()-100, inplace=True)\n    new[col] = (minmax_scale(new[col], feature_range=(0,1)))\n    \n\nnew=PCA_(new,id_mix_3,prefix='PCA_id_13_26_')","9f1939a2":"new.head()","c511972b":"for col in [\"DeviceInfo\"]:\n    print(new[col].value_counts())\n    print(\"NaN\",new[col].isnull().sum())\n    print(\"****************\")\n    ","9287cca5":"new.rename(columns={'DeviceInfo':\"device_name\"},inplace=True)\n\nnew.loc[new['device_name'].str.contains('SM', na=False), 'device_name'] = 'Samsung' \nnew.loc[new['device_name'].str.contains('SAMSUNG', na=False), 'device_name'] = 'Samsung' \nnew.loc[new['device_name'].str.contains('GT-', na=False), 'device_name'] = 'Samsung' \nnew.loc[new['device_name'].str.contains('Moto G', na=False), 'device_name'] = 'Motorola' \nnew.loc[new['device_name'].str.contains('Moto', na=False), 'device_name'] = 'Motorola' \nnew.loc[new['device_name'].str.contains('moto', na=False), 'device_name'] = 'Motorola' \nnew.loc[new['device_name'].str.contains('LG-', na=False), 'device_name'] = 'LG' \nnew.loc[new['device_name'].str.contains('rv:', na=False), 'device_name'] = 'RV' \nnew.loc[new['device_name'].str.contains('HUAWEI', na=False), 'device_name'] = 'Huawei' \nnew.loc[new['device_name'].str.contains('ALE-', na=False), 'device_name'] = 'Huawei' \nnew.loc[new['device_name'].str.contains('-L', na=False), 'device_name'] = 'Huawei' \nnew.loc[new['device_name'].str.contains('Blade', na=False), 'device_name'] = 'ZTE' \nnew.loc[new['device_name'].str.contains('BLADE', na=False), 'device_name'] = 'ZTE' \nnew.loc[new['device_name'].str.contains('Linux', na=False), 'device_name'] = 'Linux' \nnew.loc[new['device_name'].str.contains('XT', na=False), 'device_name'] = 'Sony' \nnew.loc[new['device_name'].str.contains('HTC', na=False), 'device_name'] = 'HTC' \nnew.loc[new['device_name'].str.contains('ASUS', na=False), 'device_name'] = 'Asus'\n\nnew.loc[new.device_name.isin(new.device_name.value_counts()[new.device_name.value_counts() < 200].index), 'device_name'] = \"Others\"","a16905cb":"new.device_name.value_counts()","2896837f":"col=[\"device_name\"]\nnew=frekans(new,col)","4e48746b":"new.head()","31de59eb":"new.loc[new['id_30'].str.contains('Windows', na=False), 'id_30'] = 'Windows' \nnew.loc[new['id_30'].str.contains('Mac', na=False),  'id_30'] = 'Mac' \nnew.loc[new['id_30'].str.contains('iOS', na=False),  'id_30'] = 'iOS' \nnew.loc[new['id_30'].str.contains('Android', na=False),  'id_30'] = 'Android'\n","8f837314":"new.id_30.unique()","2092adb0":"new.id_30.value_counts()","4d9673f2":"col=[\"id_30\"]\nnew=frekans(new,col)","a4f34345":"new.head()","c391b39a":"new.id_31.unique()","c40e15c3":"\nnew.loc[new['id_31'].str.contains('amsung', na=False), 'id_31'] = 'Samsung' \nnew.loc[new['id_31'].str.contains('chrom', na=False), 'id_31'] = 'Chrome'  \nnew.loc[new['id_31'].str.contains('ndroid', na=False), 'id_31'] = 'Chrome' \nnew.loc[new['id_31'].str.contains('google', na=False), 'id_31'] = 'Chrome' \nnew.loc[new['id_31'].str.contains('icrosoft', na=False), 'id_31'] = 'Microsoft'\nnew.loc[new['id_31'].str.contains('edge', na=False), 'id_31'] = 'Microsoft'\nnew.loc[new['id_31'].str.contains('ie', na=False), 'id_31'] = 'Microsoft'\nnew.loc[new['id_31'].str.contains('opera', na=False), 'id_31'] = 'Opera'\nnew.loc[new['id_31'].str.contains('safari', na=False), 'id_31'] = 'Safari'  \nnew.loc[new['id_31'].str.contains('fox', na=False), 'id_31'] = 'Firefox'\n\nnew.loc[new.id_31.isin(new.id_31.value_counts()[new.id_31.value_counts() < 400].index), 'id_31'] = \"Others\"\n","d93c30e9":"new.id_31.unique()","d07a762f":"new.id_31.value_counts()","de2f04cd":"col=[\"id_31\"]\nnew=frekans(new,col)","331862a2":"new.head()","ec6e79b5":"new.DeviceType.unique()","bbdf3d00":"new.DeviceType.value_counts()","ddfed836":"col=[\"DeviceType\"]\nnew=frekans(new,col)","00c41335":"new.head()","32eed922":"new.id_32.value_counts()","385cda2d":"col=[\"id_32\"]\nnew=frekans(new,col)","2476e3c5":"new.head()","6fb1be13":"new.id_34.unique()","4ef57c92":"col=[\"id_34\"]\nnew=frekans(new,col)","4ddb5f3b":"new.head()","f7e5627e":"new['screen_width'] = new['id_33'].str.split('x', expand=True)[0] \nnew['screen_height'] = new['id_33'].str.split('x', expand=True)[1] \nnew['screen_width'].fillna(-1, inplace=True) \nnew['screen_height'].fillna(-1, inplace=True) \nnew.drop('id_33', axis=1, inplace=True)","89e4cf2e":"new.head()","af8d4a92":"df=memory(new)","e4159cdc":"del new","b2443b92":"df.head()","3eaf0a25":"# data.select_dtypes(include=['object'])","585cf1fe":"\ndata=df.loc[:,'TransactionID':'R_emaildomain']\nmsno.bar(data);\n","d83211bb":"msno.matrix(data);","bbd887d6":"msno.heatmap(data)\npercent_missing = data.isnull().sum() * 100 \/ len(data)\npercent_missing","c02e7223":"del df['dist2']","b8c61b0d":"df.card1.describe()","290d46f9":"df.card2.describe()","344f1323":"df['card2'].value_counts()    #belli bir sayida yigilma yok","e649d12e":"import matplotlib.pyplot as plt\n\nplt.scatter(data.TransactionID, df.card2,s=0.00001)\nplt.show()","eeb0ebea":"df['card2'].fillna(df['card2'].median(),inplace=True)","31aea9a4":"df.card2.describe()","c476b394":"df['card3'].value_counts()","c33db6f3":"df['card3'].mode()","c7cbc06d":"(df['card3']==df['card3'].mode()[0]).sum()*100\/(len(data))","be1a75af":"df.card3.fillna(df['card3'].mode()[0],inplace=True)","463bcde4":"df['card4'].value_counts()","f04a9e86":"import numpy as np\nimport matplotlib.pyplot as plt\nfraud0_visa=len(data[(data.card4=='visa')&(data.isFraud==0)])\nfraud0_master=len(data[(data.card4=='master')&(data.isFraud==0)])\nfraud0_american=len(data[(data.card4=='american express')&(data.isFraud==0)])\nfraud0_disc=len(data[(data.card4=='discover')&(data.isFraud==0)])\n\nfraud1_visa=len(data[(data.card4=='visa')&(data.isFraud==1)])\nfraud1_master=len(data[(data.card4=='master')&(data.isFraud==1)])\nfraud1_american=len(data[(data.card4=='american express')&(data.isFraud==1)])\nfraud1_disc=len(data[(data.card4=='discover')&(data.isFraud==1)])\n# data to plot\nn_groups = 4\nisFraud_0= (fraud0_visa, fraud0_master, fraud0_american, fraud0_disc)\nisFraud_1 = (fraud1_visa, fraud1_master, fraud1_american, fraud1_disc)\n\n# create plot\nfig, ax = plt.subplots()\nindex = np.arange(n_groups)\nbar_width = 0.35\nopacity = 0.8\n\nrects1 = plt.bar(index, isFraud_0, bar_width,\nalpha=opacity,\ncolor='b',\nlabel='isFraud=0')\n\nrects2 = plt.bar(index + bar_width, isFraud_1, bar_width,\nalpha=opacity,\ncolor='g',\nlabel='isFraud=1')\n\nplt.xlabel('Card Type')\nplt.ylabel('Scores')\nplt.title('Scores by card type')\nplt.xticks(index + bar_width, ('visa', 'mastercard', 'americanexpress', 'discover'))\nplt.legend()\n\nplt.tight_layout()\nplt.show()\n","0734c20d":"print('bos ve dolandiricilik:',len(data[(data.card4=='naN')&(data.isFraud==1)]))\nprint('bos ve dolandiricilik yok;',len(data[(data.card4=='naN')&(data.isFraud==0)]))\nprint('tum dolandiricilik;',len(data[(data.isFraud==1)]))\nprint('-------------------------')\nprint('visa ve dolandiricilik',len(data[(data.card4=='visa')&(data.isFraud==1)]))\nprint('master ve dolandiricilik',len(data[(data.card4=='mastercard')&(data.isFraud==1)]))\nprint('american ve dolandiricilik',len(data[(data.card4=='american express')&(data.isFraud==1)]))\nprint('discover ve dolandiricilik',len(data[(data.card4=='discover')&(data.isFraud==1)]))","a2bb3bf8":"df.card4.unique()","dc545400":"df.card4.value_counts()","a236e346":"col=['card4']\ndf=frekans(df,col)","95d5c2a7":"df.head()","99e205a0":"df['card5'].value_counts()\n","6ee94bfe":"df['card5'].mode()","a0ab336d":"(df['card5']==df['card5'].mode()[0]).sum()*100\/(len(df))","1790669c":"df.card5.describe()","59dbae28":"df['card5'].fillna(df['card5'].median(),inplace=True)  #%0.72 si bostu","277e84d8":"df['card5'].isnull().sum()","a572f367":"df.card5.describe()","1a7a179b":"df['card6'].value_counts()","a453df1d":"data.card6.replace('debit or credit','debit',inplace=True)\ndata.card6.replace('charge card','debit',inplace=True)","c610613d":"(df['card6'].isnull().sum())*100\/(len(df))","fd3bcbb1":"col=[\"card6\"]\ndf=frekans(df,col,n_label=\"debit\")","15f695bf":"df.head()","bd0e6d02":"#simdilik mail adreslerinin ayni veya farkli oldugunu belirten ek column\ndf['the_same']=np.where(df['P_emaildomain'] == df['R_emaildomain'],True,False)  ","58809d44":"df.the_same.value_counts()","6d79b46c":"diff_addr_Fraud=len(df[(df.the_same== False) & (df.isFraud==1)])\ndiff_addr_Fraud","881034dc":"diff_addr_Fraud*100\/len(df.loc[(df.isFraud==1)])","f45f8963":"x=len(df[(df.the_same== False) & (df.isFraud==1)]) \/len(df)\nx","775a5fd9":"y=len(df[(df.isFraud==1)])\/len(df)\ny","fd8e2b27":"x\/y ","4a06dd8e":"x=len(df[(df.the_same== False) & (df.isFraud==0)]) \/len(df)\nx","9d7067d0":"y=len(df.loc[(df.isFraud==0)])\/len(df)\ny","f00b7a9f":"x\/y  ","3f4f75ed":"del df['the_same']","981a1b3b":"df[\"P_emaildomain\"].value_counts()","a09c331a":"df.loc[df['P_emaildomain'].isin(['gmail.com', 'gmail']),'P_emaildomain'] = 'Google'\n\ndf.loc[df['P_emaildomain'].isin([\"yahoo.co.jp\", \"yahoo.co.uk\",\"yahoo.com\",\n                                     \"yahoo.com.mx\", \"yahoo.de\", \"yahoo.es\", \"yahoo.fr\",\n                                     \"ymail.com\",\"frontier.com\", \"frontiernet.net\", \n                                     \"rocketmail.com\"]), 'P_emaildomain'              ] = 'Yahoo Mail'\n\ndf.loc[df['P_emaildomain'].isin([\"hotmail.co.uk\", \"hotmail.com\", \"hotmail.de\", \n                                     \"hotmail.es\",\"hotmail.fr\", \"live.com\", \"live.com.mx\", \n                                     \"live.fr\",\"msn.com\",\"outlook.com\", \"outlook.es\"  ]), \n                                     'P_emaildomain'                                  ] = 'Microsoft'\n\ndf.loc[df['P_emaildomain'].isin([\"icloud.com\",\"mac.com\",\"me.com\"]),'P_emaildomain'] = \"Apple\"\n\ndf.loc[df['P_emaildomain'].isin([\"att.net\", \"prodigy.net.mx\", \"sbcglobal.net\"\n]), 'P_emaildomain'                                                                   ] = \"AT&T\"\n\ndf.loc[df['P_emaildomain'].isin([\"centurylink.net\", \"embarqmail.com\",\"q.com\"]), \n                                     'P_emaildomain'                                  ] = \"Centurylink\"\n\ndf.loc[df['P_emaildomain'].isin([\"aim.com\", \"aol.com\"]), 'P_emaildomain'          ] = \"AOL\"\n\ndf.loc[df['P_emaildomain'].isin([\"charter.net\",\"twc.com\"]), 'P_emaildomain'       ] = \"Spectrum\"\n\ndf.loc[df.P_emaildomain.isin(df.P_emaildomain.value_counts()\n                                 [df.P_emaildomain.value_counts() <= 500 ]\\\n                                         .index), 'P_emaildomain'                     ] = \"Others\"\ndf.P_emaildomain.fillna(\"NoInf\", inplace=True)","f5b5ddb1":"df[\"P_emaildomain\"].unique()","181834fd":"df[\"P_emaildomain\"].value_counts()","63a6bb24":"col=[\"P_emaildomain\"]\ndf=frekans(df,col)","48f6f41d":"df.head()","7c33c1b0":"df.R_emaildomain.value_counts()\n","ff4f3479":"emails = {'gmail': 'google', 'att.net': 'att', 'twc.com': 'spectrum',\n          'scranton.edu': 'other', 'netzero.net': 'other',\n          'optonline.net': 'other', 'comcast.net': 'other', \n          'cfl.rr.com': 'other', 'sc.rr.com': 'other',\n          'suddenlink.net': 'other', 'windstream.net': 'other',\n          'gmx.de': 'other', 'earthlink.net': 'other', \n          'servicios-ta.com': 'other', 'bellsouth.net': 'other', \n          'web.de': 'other', 'mail.com': 'other',\n          'cableone.net': 'other', 'roadrunner.com': 'other', \n          'protonmail.com': 'other', 'anonymous.com': 'other',\n          'juno.com': 'other', 'ptd.net': 'other',\n          'netzero.com': 'other', 'cox.net': 'other', \n          'hotmail.co.uk': 'microsoft', \n          'yahoo.com.mx': 'yahoo', 'yahoo.fr': 'yahoo', \n          'yahoo.es': 'yahoo', 'charter.net': 'spectrum', \n          'live.com': 'microsoft', 'aim.com': 'aol',\n          'hotmail.de': 'microsoft', 'centurylink.net': 'centurylink',\n          'gmail.com': 'google', 'me.com': 'apple', \n          'hotmail.com': 'microsoft',  \n          'hotmail.fr': 'microsoft',\n          'outlook.es': 'microsoft', 'yahoo.co.jp': 'yahoo', \n          'yahoo.de': 'yahoo', \n          'live.fr': 'microsoft', 'verizon.net': 'yahoo', \n          'msn.com': 'microsoft', 'q.com': 'centurylink',\n          'prodigy.net.mx': 'att', 'frontier.com': 'yahoo', \n           'rocketmail.com': 'yahoo', \n          'sbcglobal.net': 'att', 'frontiernet.net': 'yahoo', \n          'ymail.com': 'yahoo', 'outlook.com': 'microsoft', \n          'embarqmail.com': 'centurylink', \n          'hotmail.es': 'microsoft', 'mac.com': 'apple', 'yahoo.co.uk': 'yahoo',\n          'yahoo.com': 'yahoo', 'live.com.mx': 'microsoft',\n           'aol.com': 'aol', 'icloud.com': 'apple'}","c330a03e":"df[\"new_R_emaildomain\"] = df[\"R_emaildomain\"].map(emails)","7351d30f":"df.new_R_emaildomain.unique()","b7cc5b83":"df.new_R_emaildomain.value_counts()","46dbcbc6":"del df[\"R_emaildomain\"]","0f893bf6":"col=[\"new_R_emaildomain\"]\ndf=frekans(df,col)","97af7616":"df.head()","8c56f602":"df.dist1.value_counts()","14926ca5":"df.dist1.describe()","c916f9ae":"sns.boxplot(x=df.dist1)","38f89e6e":"import seaborn as sns\ndata_dist1_Fraud=df[['isFraud','dist1']]\nfig, ax = plt.subplots(figsize=(5,5))\nsns.heatmap(data_dist1_Fraud.corr(), ax=ax,linewidths=.5,annot=True)\nplt.show()","2b69630b":"Q1=df.dist1.quantile(0.25)\nQ3=df.dist1.quantile(0.75)\nIQR=Q3-Q1\naltsinir=Q1-1.5*IQR\nustsinir=Q3+1.5*IQR\nprint('altsinir:',altsinir)\nprint('ustsinir:',ustsinir)","ac075786":"def Quantile(x):\n    \n    if x > ustsinir:\n       \n        x=ustsinir\n    elif x < altsinir:\n       \n        x=-altsinir\n    \n    return x\n\nu=df[\"dist1\"].apply(lambda x: Quantile(x))\ndf[\"dist1\"]=u","ec3dcfbc":"df.head()","b35a939d":"sns.boxplot(x=df.dist1)","6f39edf1":"df.dist1.describe()","0abba2c3":"df.dist1.fillna(df.dist1.mean(),inplace=True)\n","28252e8a":"df.dist1.isnull().sum()","0b3320c6":"df.head()","16fd1186":"df.dist1.describe()","dbfbe706":"sns.boxplot(x=df.dist1)","ef951d61":"df.head()","3a26efc1":"import seaborn as sns\ndata_dist1_Fraud=df[['isFraud','dist1']]\nfig, ax = plt.subplots(figsize=(5,5))\nsns.heatmap(data_dist1_Fraud.corr(), ax=ax,linewidths=.5,annot=True)\nplt.show()","383188cd":"df.TransactionDT.value_counts()","0ac52f43":"import datetime\nSTART_DATE = '2017-12-01'\nstartdate = datetime.datetime.strptime(START_DATE, \"%Y-%m-%d\")\ndf[\"Date\"] = df['TransactionDT'].apply(lambda x: (startdate + datetime.timedelta(seconds=x)))\ndf['_Weekdays'] = df['Date'].dt.dayofweek\ndf['_Hours'] = df['Date'].dt.hour\ndf['_Days'] = df['Date'].dt.day","c09831bd":"df.head()","90838340":"df.ProductCD.value_counts()","55dead76":"col=[\"ProductCD\"]\ndf=frekans(df,col)","70b03cdb":"df.head()","7a09ae4f":"df.screen_height.value_counts()","d29e7639":"df.loc[df.screen_height.isin(df.screen_height.value_counts()[df.screen_height.value_counts() < 300].index), 'screen_height'] = \"Others\"","aadf069f":"df.screen_height.value_counts()","9d5718de":"col=[\"screen_height\"]\ndf=frekans(df,col)","2462a1d0":"df.head()","13e2bb9d":"df.screen_width.value_counts()","d79e5cd1":"df.loc[df.screen_width.isin(df.screen_width.value_counts()[df.screen_width.value_counts() < 300].index), 'screen_width'] = \"Others\"","00687f6b":"df.screen_width.value_counts()","6d9e86ed":"col=[\"screen_width\"]\ndf=frekans(df,col)","e87f3b42":"df.head()","7b338cd0":"finally_data=memory(df)","9c2ca6f8":"del df","aaa0a0bf":"X_train = finally_data.sort_values('TransactionDT').drop(['isFraud','TransactionDT', 'Date'], axis=1)\ny_train = finally_data.sort_values('TransactionDT')['isFraud']","db220255":"X_train.head()","f6e52e40":"cols=X_train.columns\nprint(cols)\nX_train.shape","b611a823":"from xgboost import XGBClassifier\nfrom sklearn.model_selection import cross_val_score, KFold, GridSearchCV\nfrom sklearn.metrics import accuracy_score\n\n\n# **************************Gridvalidation******************************\n# xgb_params = {\n#         'n_estimators': [100, 500, 1000, 2000],\n#         'subsample': [0.6, 0.8, 1.0],\n#         'max_depth': [3, 4, 5,6],\n#         'learning_rate': [0.1,0.01,0.02,0.05],\n#         \"min_samples_split\": [2,5,10]}\n\n\n# model = XGBClassifier()\n# model.fit(X_train, y_train)\n# print(model)\n# y_pred = model.predict(X_train)\n# # predictions = [round(value) for value in y_pred]\n# model_2=XGBClassifier()\n# xgb_cv_model = GridSearchCV(model_2, xgb_params, cv = 10,  verbose = 2)\n\n# xgb_cv_model.fit(X_train, y_train)\n\n# print(xgb_cv_model.best_params_)\n\n\n# Grid degerler\n# Fitting 10 folds for each of 576 candidates, totalling 5760 fits\n# [CV] learning_rate=0.1, max_depth=3, min_samples_split=2, n_estimators=100, subsample=0.6 \n# ***************************************************************************\n\n\nmodel = XGBClassifier(learning_rate=0.1, max_depth=3, min_samples_split=2, n_estimators=100, subsample=0.6)\nmodel.fit(X_train, y_train)\nprint(model)\ny_pred = model.predict(X_train)\n\n\n# accuracy = accuracy_score(y_train, y_pred)\n# print(\"Accuracy: %.2f%%\" % (accuracy * 100.0))\n\n\nscores = cross_val_score(model, X_train, y_train, cv=5)\nprint(\"Mean cross-validation score: %.2f\" % scores.mean())\n\n\nfeature_imp = pd.DataFrame(sorted(zip(model.feature_importances_,cols)), columns=['Value','Feature'])\nplt.figure(figsize=(20, 10))\nsns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\", ascending=False).iloc[:20])\nplt.title('XGBClassifier Feature importances')\nplt.tight_layout()\nplt.show()\n\nx=gc.collect()","119acbf7":"# public accuracy_score=0.95\n\n\n# Fraud Detection\n\n\n\n\n\u0130brahim FIRAT\n\n  https:\/\/www.kaggle.com\/ibrahimfirat\n  \nRamazan AKTA\u015e\n\n  https:\/\/www.kaggle.com\/nsraktas\n  \nEsra TEPEBAS\u0130\n\n https:\/\/www.kaggle.com\/esratepebasi\n \n \nNaim U\u00c7AR \n\nhttps:\/\/www.kaggle.com\/naimensucares\n\n\n\nMentorlerimiz:\n\nBeyzanur KARAMAN\n\n\n\u0130rfan Bey\n\n \n ","d3e2a9c7":"# ProductCD","9f376349":"# DeviceType","3b338916":" (%0.266 ) nan\n\nnan degerleri yerine  'debit'  yazdiralim.(verinin modu)","a17b5571":"**card3** un %88.2 si 150.0 degerini almis. ayrica %0.26lik kismi bos. NaN degerlerini 150.0 ile doldurabiliriz","c460a4d0":"bu grafik ve bilgilere dayanarak nan degerlerini yeni ort ile dolduralim","62ee63ab":"# card 6","3fa348d7":"dolandiricilik olmadigi bilindiginde(isFraud=0) adreslerin farkli olma ihtimali","60948d29":"# card 2","dd7fb452":"# M Features(M4 expect)\n","0201c5c8":"# Frekans","1f39d063":"dist2 nin %93.628374 lik kismi Nan.bu column u silebiliriz","ec20ea20":"train_df.head()","a365e9a2":"10771 veride adresler farkli ve dolandiricilik mevcut","b1cb75a4":"# TransactionDT","433df9a0":"ortalama median std de degisiklik olmadi","13f19c7c":"# Memory Reducation","fd8c0583":"# fraud==0\n\nP(A\\B)=P(A KESISIM B)\\ P(B)= x\/y\nB:isFraud=0 \nA:the_same=False","e103e3ff":"# Device Info","e4a78e59":"# 'id_13', 'id_14', 'id_17', 'id_18', 'id_19', 'id_20','id_21', 'id_22','id_24', 'id_25', 'id_26'","3fb36562":"dolandiricilik oldugu bilindiginde(isFraud=1) adreslerin farkli olma ihtimali (ikisinin de nan oldugu kisimlar burada)","937d649d":"# 'id_12','id_15','id_16','id_27','id_28','id_29','id_23' object degerler","967b12d1":"# id_35,id_36,id_37,id_38","504b2742":"asagidaki kisim gozlemleme amacli.buna gore daha detayli incelenip doldurma yapilabilir.ornegin bayes e bakilip hangi haneye ekleme yapmali.ya da anlamli bir dolandiricilik sayisi varmi incelenebilir\n\nayni incelemeler ve duzenlemeler card6 icin de yapilabilir.modellerin dusuk dogruluk sergilemesi durumunda","c4239fba":"aykiri gozlemlere baskilama yontemiyle ice duzenleme yapalim","36669ac5":"# id_33","545dd25b":"# D Features","25980990":"# P_emaildomain","02f6c671":"# R_emaildomain","84c6122c":"yukaridaki 0.83 luk ihtimal isFraud=0 olan kisimlarda adreslerin farkli olma ihtimalinin yuksek oldugunu gosteriyor.","ab9f372b":"mod() incelemesi","526d659d":"# PCA","87a77822":"# 'id_01', 'id_02', 'id_03', 'id_04', 'id_05','id_06', 'id_07', 'id_08', 'id_09', 'id_10', 'id_11'\n\n","9dba4abf":"card5 in %50 si 226.0 degerinde","c76a0984":"# screen_height-screen_width","e9984082":"# email adres karsilastirmasi Bayes yaklasimi\n# fraud==1\n\nP(A\\B)=P(A KESISIM B)\\ P(B)= x\/y\n\nB:isFraud=1 A:the_same=False","fd8087b5":"V FEATURES","373b8f9a":"# 'TransactionID':'R_emaildomain","e21aea43":"# id_30","f9a92a5f":"# C FEATURES","720b61b7":"# card 3","2eb93959":"Bu deger saniye cinsinden oldugu icin daha anlamli zaman dilimlerine ayiriyoruz","36c31ee2":"Company yahoo \/ ymail \/ frontier \/ rocketmail -> Yahoo\n\nhotmail \/ outlook \/ live \/ msn -> Microsoft\n\nicloud \/ mac \/ me -> Appe\n\nprodigy \/ att \/ sbcglobal-> AT&T\n\ncenturylink \/ embarqmail -> Centurylink\n\naim \/ aol -> AOL\n\ntwc \/ charter -> Spectrum\n\ngmail.com \/ gmail -> Google","6d52efb0":"# M4","57115773":"# card 5","812be775":"# id_34","8af7a2bc":"# id_32","c64223d9":"# id_31","3e63581e":"# Train ID","a15a2abb":"102504 veride satin alan email ile teslim alan email ayni her ikisi de NaN oldugunda mailleri ayni kabul etmedigine dikkat edelim","fb042819":"# Mail","7aab9e95":"# dist1","3adc707a":"# card 4"}}