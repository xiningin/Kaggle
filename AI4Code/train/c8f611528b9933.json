{"cell_type":{"d6075df8":"code","c77e2eec":"code","392e794d":"code","26906c98":"code","33579b30":"code","f05aabb8":"code","fa0278fb":"code","f7cc6a97":"code","93ee5a7c":"code","1410a9af":"code","0449bbdf":"code","6be87463":"markdown","820464c6":"markdown","bece7eee":"markdown","4ef86744":"markdown","0484e98d":"markdown","fbb337f7":"markdown","d02a571f":"markdown","a71b5726":"markdown"},"source":{"d6075df8":"import pandas as pd\nimport numpy as np\nimport random\nimport time\nimport os\n\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport seaborn as sns\n\nfrom tqdm import tqdm\n\nfrom catboost import CatBoostRegressor, CatBoostClassifier\nfrom xgboost import XGBRegressor, XGBClassifier\nfrom lightgbm import LGBMClassifier, LGBMRegressor\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import RobustScaler, StandardScaler, MinMaxScaler, QuantileTransformer\nfrom sklearn.metrics import mean_squared_error, roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold, KFold\nfrom sklearn.ensemble import StackingRegressor, StackingClassifier\n\nimport optuna\nfrom optuna.samplers import TPESampler","c77e2eec":"SEED = 2021\nTARGET = \"target\"","392e794d":"def seed_everything(seed=2021):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n\nseed_everything(SEED)","26906c98":"X = pd.read_parquet(r\"..\/input\/tps-10-21-dataset-parquet\/X.parquet\")\ny = pd.read_parquet(r\"..\/input\/tps-10-21-dataset-parquet\/y.parquet\")\nX_test = pd.read_parquet(r\"..\/input\/tps-10-21-dataset-parquet\/X_test.parquet\")","33579b30":"X.head(10)","f05aabb8":"X.describe().T.style.bar(subset=['mean'], color='#205ff2')\\\n                            .background_gradient(subset=['std'], cmap='Reds')\\\n                            .background_gradient(subset=['50%'], cmap='coolwarm')","fa0278fb":"binary_features = []\nfor col in X.columns:\n    if ((X[col]==0).astype('int') + (X[col]==1).astype('int')).sum() == len(X):\n        binary_features.append(col)\n\nprint(f'Number of binary features : {len(binary_features)}')\nif len(binary_features)>0: \n    print(binary_features)","f7cc6a97":"print(\"Total of missing values:\", pd.DataFrame(X.isna().sum(), columns =[\"# missing values\"]).sum().values)\npd.DataFrame(X.isna().sum(), columns =[\"# missing values\"]).T","93ee5a7c":"y_cnt = y.value_counts(normalize=True)\ny_cnt.index = [f[0] for f in y_cnt.index]\ny_cnt.plot.pie(label=\"ratio\", colors = ['red', 'snow'])\nplt.show()","1410a9af":"#non binary features\nfeatures_non_bin = X.columns.to_list()\nfor f in binary_features:\n    features_non_bin.remove(f)\n\ndf_frac= pd.concat((X[features_non_bin],y), axis=1).sample(frac=0.1)\nn_raw = int(len(features_non_bin)\/8)+1\nfig, axs = plt.subplots(n_raw, 8, figsize=(18,2*n_raw))\n\nfor i_col, ax in enumerate(tqdm(axs.flatten())):\n    if i_col<len(df_frac.columns):\n        f = df_frac.columns[i_col]\n        sns.kdeplot(data = df_frac, x=f, hue=TARGET, ax=ax, legend=False)\n        ax.set_title(f)\n        ax.set_yticks([])\n        ax.set_xlabel('')\n        ax.set_ylabel('')\n        ax.spines[['left', 'top', 'right']].set_visible(False)\n    else:\n        ax.set_xticks([])\n        ax.set_yticks([])\n        ax.spines[:].set_visible(False)\n        \nfig.tight_layout()","0449bbdf":"df_frac= pd.concat((X[binary_features],y), axis=1).sample(frac=0.1)\nn_raw = int(len(binary_features)\/8)+1\nfig, axs = plt.subplots(n_raw, 8, figsize=(18,2*n_raw))\nfor i_col, ax in enumerate(tqdm(axs.flatten())):\n    if i_col<len(binary_features):\n        f = df_frac.columns[i_col]\n        sns.countplot(data = df_frac, x=f, ax=ax, hue=TARGET)\n        ax.get_legend().remove()\n        ax.set_title(f)\n        #ax.set_yticks([])\n        ax.set_xlabel('')\n        ax.set_ylabel('')\n        ax.spines[['left', 'top', 'right']].set_visible(False)\n    else:\n        ax.set_xticks([])\n        ax.set_yticks([])\n        ax.spines[:].set_visible(False)\n        \nfig.tight_layout()","6be87463":"* scaling seems ok : between 0 and 1\n* features \"f22\", \"f43\" and above from  \"f242\" median egals to 0 or 1 -> binary features ?","820464c6":"## EDA","bece7eee":"# Using parquet format... much faster !!\n\nhttps:\/\/www.kaggle.com\/data2science\/save-some-time-switch-to-parquet\/notebook?kernelSessionId=76100662","4ef86744":"* target distribution : even distibution (pokeball style \ud83d\ude0a)","0484e98d":"* binary features (f22 seems promising ...)","fbb337f7":"* No missing values","d02a571f":"* features distribution\n\nsome features might be categorical : f10, F18, ..","a71b5726":"* binary features"}}