{"cell_type":{"788edb68":"code","efe7eb79":"code","d15075db":"code","78957e8e":"code","417c74f9":"code","243d6a78":"code","b9bb2376":"code","812ddf9d":"code","57ba9413":"code","e3595506":"code","1ecbc429":"code","f7749deb":"code","b85e87be":"code","a3638889":"code","f4a277cc":"code","c95cf626":"code","828587c3":"code","a2fe9fe6":"code","f63c86d5":"code","4e77f45e":"code","e2c2dd63":"code","b66bf7b6":"code","19488f4a":"code","1c2461f6":"code","add0edca":"code","6ff8e0f8":"code","bc92d87e":"code","aa7f4106":"code","791f4b51":"markdown","8d3c06b1":"markdown","b213bddb":"markdown","d93c1e3d":"markdown","8da759db":"markdown","33b7c7ad":"markdown","1eb5053b":"markdown","575574f4":"markdown","580da970":"markdown","09da2bfe":"markdown","5d728311":"markdown"},"source":{"788edb68":"%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n\nimport sqlite3\nimport pandas as pd\nimport numpy as np\nimport nltk\nimport string\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import metrics\nfrom sklearn.metrics import roc_curve, auc\nfrom nltk.stem.porter import PorterStemmer\n\nimport re\n# Tutorial about Python regular expressions: https:\/\/pymotw.com\/2\/re\/\nimport string\nfrom nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\nfrom nltk.stem.wordnet import WordNetLemmatizer\n\nfrom gensim.models import Word2Vec\nfrom gensim.models import KeyedVectors\nimport pickle\n\nfrom tqdm import tqdm\nimport os","efe7eb79":"# using the SQLite Table to read data.\ncon = sqlite3.connect('..\/input\/amazon-fine-food-reviews\/database.sqlite') \n#filtering only positive and negative reviews i.e. \n# not taking into consideration those reviews with Score=3\n# SELECT * FROM Reviews WHERE Score != 3 LIMIT 500000, will give top 500000 data points\n# you can change the number to any other number based on your computing power\n\n# filtered_data = pd.read_sql_query(\"\"\" SELECT * FROM Reviews WHERE Score != 3 LIMIT 500000\"\"\", con) \n# for tsne assignment you can take 5k data points\n\nfiltered_data = pd.read_sql_query(\"\"\" SELECT * FROM Reviews WHERE Score != 3 LIMIT 5000\"\"\", con) \n\n# Give reviews with Score>3 a positive rating, and reviews with a score<3 a negative rating.\ndef partition(x):\n    if x < 3:\n        return 0\n    return 1\n\n#changing reviews with score less than 3 to be positive and vice-versa\nactualScore = filtered_data['Score']\npositiveNegative = actualScore.map(partition)\nfiltered_data['Score'] = positiveNegative\nprint(\"Number of data points in our data\", filtered_data.shape)\nfiltered_data.head(3)","d15075db":"display = pd.read_sql_query(\"\"\"\nSELECT UserId, ProductId, ProfileName, Time, Score, Text, COUNT(*)\nFROM Reviews\nGROUP BY UserId\nHAVING COUNT(*)>1\n\"\"\", con)","78957e8e":"print(display.shape)\ndisplay.head()","417c74f9":"display[display['UserId']=='AZY10LLTJ71NX']","243d6a78":"display['COUNT(*)'].sum()","b9bb2376":"display= pd.read_sql_query(\"\"\"\nSELECT *\nFROM Reviews\nWHERE Score != 3 AND UserId=\"AR5J8UI46CURR\"\nORDER BY ProductID\n\"\"\", con)\ndisplay.head()","812ddf9d":"#Sorting data according to ProductId in ascending order\nsorted_data=filtered_data.sort_values('ProductId', axis=0, ascending=True, inplace=False, kind='quicksort', na_position='last')\n\n#Deduplication of entries\nfinal=sorted_data.drop_duplicates(subset={\"UserId\",\"ProfileName\",\"Time\",\"Text\"}, keep='first', inplace=False)\nfinal.shape","57ba9413":"#Checking to see how much % of data still remains\n(final['Id'].size*1.0)\/(filtered_data['Id'].size*1.0)*100","e3595506":"display= pd.read_sql_query(\"\"\"\nSELECT *\nFROM Reviews\nWHERE Score != 3 AND Id=44737 OR Id=64422\nORDER BY ProductID\n\"\"\", con)\n\ndisplay.head()","1ecbc429":"final=final[final.HelpfulnessNumerator<=final.HelpfulnessDenominator]","f7749deb":"#Before starting the next phase of preprocessing lets see the number of entries left\nprint(final.shape)\n\n#How many positive and negative reviews are present in our dataset?\nfinal['Score'].value_counts()","b85e87be":"# https:\/\/stackoverflow.com\/a\/47091490\/4084039\nimport re\n\ndef decontracted(phrase):\n    # specific\n    phrase = re.sub(r\"won't\", \"will not\", phrase)\n    phrase = re.sub(r\"can\\'t\", \"can not\", phrase)\n\n    # general\n    phrase = re.sub(r\"n\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'re\", \" are\", phrase)\n    phrase = re.sub(r\"\\'s\", \" is\", phrase)\n    phrase = re.sub(r\"\\'d\", \" would\", phrase)\n    phrase = re.sub(r\"\\'ll\", \" will\", phrase)\n    phrase = re.sub(r\"\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'ve\", \" have\", phrase)\n    phrase = re.sub(r\"\\'m\", \" am\", phrase)\n    return phrase","a3638889":"\nstopwords= set(['br', 'the', 'i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \"you're\", \"you've\",\\\n            \"you'll\", \"you'd\", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', \\\n            'she', \"she's\", 'her', 'hers', 'herself', 'it', \"it's\", 'its', 'itself', 'they', 'them', 'their',\\\n            'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', \"that'll\", 'these', 'those', \\\n            'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', \\\n            'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', \\\n            'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after',\\\n            'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further',\\\n            'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more',\\\n            'most', 'other', 'some', 'such', 'only', 'own', 'same', 'so', 'than', 'too', 'very', \\\n            's', 't', 'can', 'will', 'just', 'don', \"don't\", 'should', \"should've\", 'now', 'd', 'll', 'm', 'o', 're', \\\n            've', 'y', 'ain', 'aren', \"aren't\", 'couldn', \"couldn't\", 'didn', \"didn't\", 'doesn', \"doesn't\", 'hadn',\\\n            \"hadn't\", 'hasn', \"hasn't\", 'haven', \"haven't\", 'isn', \"isn't\", 'ma', 'mightn', \"mightn't\", 'mustn',\\\n            \"mustn't\", 'needn', \"needn't\", 'shan', \"shan't\", 'shouldn', \"shouldn't\", 'wasn', \"wasn't\", 'weren', \"weren't\", \\\n            'won', \"won't\", 'wouldn', \"wouldn't\"])","f4a277cc":"from tqdm import tqdm\nfrom bs4 import BeautifulSoup\n\npreprocessed_reviews = []\n# tqdm is for printing the status bar\nfor sentance in tqdm(final['Text'].values):\n    sentance = re.sub(r\"http\\S+\", \"\", sentance)\n    sentance = BeautifulSoup(sentance, 'lxml').get_text()\n    sentance = decontracted(sentance)\n    sentance = re.sub(\"\\S*\\d\\S*\", \"\", sentance).strip()\n    sentance = re.sub('[^A-Za-z]+', ' ', sentance)\n    # https:\/\/gist.github.com\/sebleier\/554280\n    sentance = ' '.join(e.lower() for e in sentance.split() if e.lower() not in stopwords)\n    preprocessed_reviews.append(sentance.strip())","c95cf626":"preprocessed_reviews[1500]","828587c3":"tf_idf_vect = TfidfVectorizer(ngram_range=(1,2), min_df=10)\ntf_idf_vect.fit(preprocessed_reviews)\nprint(\"some sample features(unique words in the corpus)\",tf_idf_vect.get_feature_names()[0:10])\nprint('='*50)\n\nfinal_tf_idf = tf_idf_vect.transform(preprocessed_reviews)\nprint(\"the type of count vectorizer \",type(final_tf_idf))\nprint(\"the shape of out text TFIDF vectorizer \",final_tf_idf.get_shape())\nprint(\"the number of unique words including both unigrams and bigrams \", final_tf_idf.get_shape()[1])","a2fe9fe6":"from sklearn.manifold import TSNE","f63c86d5":"tsne = TSNE(n_components=2, perplexity=30, learning_rate=200)\n\nX_embedding = tsne.fit_transform(final_tf_idf)\n\nfor_tsne_df = pd.DataFrame(X_embedding, columns=['Dim_X','Dim_Y'])\nfor_tsne_df['Score'] = final['Score'].tolist()\n\n\ncolors = {0:'red',1:'blue',2:'green'}\nplt.scatter(for_tsne_df['Dim_X'], for_tsne_df['Dim_Y'], c=for_tsne_df['Score'].apply(lambda x : colors[x]))\nplt.show()","4e77f45e":"from sklearn.metrics import accuracy_score\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score","e2c2dd63":"X_train,X_test, y_train, y_test = train_test_split(for_tsne_df[[\"Dim_X\",\"Dim_Y\"]], for_tsne_df[\"Score\"], test_size=0.3, stratify=for_tsne_df[\"Score\"], random_state = 42)\nX_train,X_cv, y_train, y_cv = train_test_split(X_train[[\"Dim_X\",\"Dim_Y\"]], y_train, test_size=0.2, stratify=y_train, random_state = 42)","b66bf7b6":"for i in range(1,30,2):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    pred = knn.predict(X_cv)\n    acc = accuracy_score(y_cv,pred, normalize=True)*100\n    print('\\nCV accuracy for k = %d is %d%%' % (i, acc))\n    ","19488f4a":"knn = KNeighborsClassifier(n_neighbors=9)\nknn.fit(X_train,y_train)\npredictions = knn.predict(X_test)\nacc = accuracy_score(y_test,predictions, normalize=True)*100\nprint('\\nCV accuracy for k = %d is %d%%' % (9, acc))","1c2461f6":"X_train,X_test, y_train, y_test = train_test_split(for_tsne_df[[\"Dim_X\",\"Dim_Y\"]], for_tsne_df[\"Score\"], test_size=0.3, stratify=for_tsne_df[\"Score\"], random_state = 42)\n","add0edca":"myList = list(range(1,50))\nneighbors = list(filter(lambda x : x%2 !=0,myList))\ncv_score = []\n\nfor k in neighbors:\n    knn = KNeighborsClassifier(n_neighbors=k)\n    scores = cross_val_score(knn,X_train, y_train, cv=3,scoring='accuracy')\n    cv_score.append(np.round(scores.mean()*100,2))\n    \nMSE = [100-x for x in cv_score]","6ff8e0f8":"# plot misclassification error vs k \nplt.figure(figsize=(15,10))\nplt.plot(neighbors, MSE)\n\nfor xy in zip(neighbors, np.round(MSE,3)):\n    plt.annotate('(%s, %s)' % xy, xy=xy, textcoords='data')\n\nplt.xlabel('Number of Neighbors K')\nplt.ylabel('Misclassification Error')\n\nplt.show()\n\nprint(\"the misclassification error for each k value is : \", np.round(MSE,3))","bc92d87e":"knn = KNeighborsClassifier(n_neighbors=15)\nknn.fit(X_train,y_train)\npred_train = knn.predict(X_train)\npred_test = knn.predict(X_test)","aa7f4106":"print(\"Train Recall : \",metrics.recall_score(y_train,pred_train))\nprint(\"Test Recall : \", metrics.recall_score(y_test,pred_test))\nprint(\"Train Precision : \",metrics.precision_score(y_train,pred_train))\nprint(\"Test Precision : \",metrics.precision_score(y_test,pred_test))\nprint(\"Train Accuracy :\", metrics.f1_score(y_train,pred_train))\nprint(\"Test Accuracy :\", metrics.f1_score(y_test,pred_test))","791f4b51":"# Amazon Fine Food Reviews Analysis\n\n\nThe Amazon Fine Food Reviews dataset consists of reviews of fine foods from Amazon.<br>\n\nNumber of reviews: 568,454<br>\nNumber of users: 256,059<br>\nNumber of products: 74,258<br>\nTimespan: Oct 1999 - Oct 2012<br>\nNumber of Attributes\/Columns in data: 10 \n\nAttribute Information:\n\n1. Id\n2. ProductId - unique identifier for the product\n3. UserId - unqiue identifier for the user\n4. ProfileName\n5. HelpfulnessNumerator - number of users who found the review helpful\n6. HelpfulnessDenominator - number of users who indicated whether they found the review helpful or not\n7. Score - rating between 1 and 5\n8. Time - timestamp for the review\n9. Summary - brief summary of the review\n10. Text - text of the review\n\n\n#### Objective:\nGiven a review, determine whether the review is positive (Rating of 4 or 5) or negative (rating of 1 or 2).\n\n<br>\n[Q] How to determine if a review is positive or negative?<br>\n<br> \n[Ans] We could use the Score\/Rating. A rating of 4 or 5 could be cosnidered a positive review. A review of 1 or 2 could be considered negative. A review of 3 is nuetral and ignored. This is an approximate and proxy way of determining the polarity (positivity\/negativity) of a review.\n\n\n","8d3c06b1":"<b>Observation:-<\/b> It was also seen that in two rows given below the value of HelpfulnessNumerator is greater than HelpfulnessDenominator which is not practically possible hence these two rows too are removed from calcualtions\n","b213bddb":"As can be seen above the same user has multiple reviews of the with the same values for HelpfulnessNumerator, HelpfulnessDenominator, Score, Time, Summary and Text  and on doing analysis it was found that <br>\n<br> \nProductId=B000HDOPZG was Loacker Quadratini Vanilla Wafer Cookies, 8.82-Ounce Packages (Pack of 8)<br>\n<br> \nProductId=B000HDL1RQ was Loacker Quadratini Lemon Wafer Cookies, 8.82-Ounce Packages (Pack of 8) and so on<br>\n\nIt was inferred after analysis that reviews with same parameters other than ProductId belonged to the same product just having different flavour or quantity. Hence in order to reduce redundancy it was decided to eliminate the rows having same parameters.<br>\n\nThe method used for the same was that we first sort the data according to ProductId and then just keep the first similar product review and delelte the others. for eg. in the above just the review for ProductId=B000HDL1RQ remains. This method ensures that there is only one representative for each product and deduplication without sorting would lead to possibility of different representatives still existing for the same product.","d93c1e3d":"### Simple Cross Validation Manually","8da759db":"# [4] Featurization","33b7c7ad":"# [3].  Text Preprocessing.\n\nNow that we have finished deduplication our data requires some preprocessing before we go on further with analysis and making the prediction model.\n\nHence in the Preprocessing phase we do the following in the order below:-\n\n1. Begin by removing the html tags\n2. Remove any punctuations or limited set of special characters like , or . or # etc.\n3. Check if the word is made up of english letters and is not alpha-numeric\n4. Check to see if the length of the word is greater than 2 (as it was researched that there is no adjective in 2-letters)\n5. Convert the word to lowercase\n6. Remove Stopwords\n7. Finally Snowball Stemming the word (it was obsereved to be better than Porter Stemming)<br>\n\nAfter which we collect the words used to describe positive and negative reviews","1eb5053b":"## Loading the data\n\nThe dataset is available in two forms\n1. .csv file\n2. SQLite Database\n\nIn order to load the data, We have used the SQLITE dataset as it easier to query the data and visualise the data efficiently.\n<br> \n\nHere as we only want to get the global sentiment of the recommendations (positive or negative), we will purposefully ignore all Scores equal to 3. If the score id above 3, then the recommendation wil be set to \"positive\". Otherwise, it will be set to \"negative\".","575574f4":"# As we can see optimal K = 11","580da970":"##  TF-IDF","09da2bfe":"## [2] Data Cleaning: Deduplication\n\nIt is observed (as shown in the table below) that the reviews data had many duplicate entries. Hence it was necessary to remove duplicates in order to get unbiased results for the analysis of the data.  Following is an example:","5d728311":"### 10 fold cross validation with inbuilt CV"}}