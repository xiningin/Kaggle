{"cell_type":{"2b0d26e5":"code","31c9840d":"code","6bd9d154":"code","0467df9a":"code","4e0c964c":"code","a8680f6f":"code","6039e1b7":"code","f80522d0":"markdown","300792ef":"markdown","303fabe6":"markdown","98bdbee7":"markdown","2c1b00b8":"markdown","0c7b90c6":"markdown","ee9eb91c":"markdown","f3034916":"markdown","1b37a8bc":"markdown","57f52998":"markdown","d1ebbffd":"markdown","8a760a18":"markdown","a1bee670":"markdown","e2a20964":"markdown"},"source":{"2b0d26e5":"import numpy as np, pandas as pd\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport plotly.offline as py\nimport seaborn as sns\nimport missingno as msno\ntrain = pd.read_csv('..\/input\/jane-street-market-prediction\/train.csv')\nfeats = pd.read_csv('..\/input\/jane-street-market-prediction\/features.csv')","31c9840d":"train.head()","6bd9d154":"t_start = 0\nt_end = 30\n\nfig = px.histogram(\n    train[(train.date >= t_start) & (train.date <= t_end)], \n    x=['resp_1', 'resp_2', 'resp_3', 'resp_4'], \n    facet_col='variable', animation_frame='date', template=\"plotly_white\")\nfig.show()","0467df9a":"x, cl = 1, 2\nt_start, t_end = 0, 5\nresp = 'resp_1'\n\nfig = px.scatter(\n    train[(train.date >= t_start) & (train.date <= t_end)], \n    x=f'feature_{x}', \n    y=resp, \n    color=f'feature_{cl}',\n    animation_frame='date',\n    template=\"plotly_white\"\n)\nfig.show()","4e0c964c":"import missingno as msno\nmsno.matrix(df=train.head(50_000), figsize=(20, 14), color=(0.42, 0.1, 0.05));","a8680f6f":"feats.head()","6039e1b7":"bin_col = [col for col in feats.columns if 'tag' in col]\nt_l = []\nf_l = []\nfor col in bin_col:\n    t_l.append((feats[col]==True).sum())\n    f_l.append((feats[col]==False).sum())\ntrace1 = go.Bar(\n    x=bin_col,\n    y=t_l ,\n    name='True count'\n)\ntrace2 = go.Bar(\n    x=bin_col,\n    y=f_l,\n    name='False count'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    barmode='stack',\n    title='Count of True and False in tags',\n    template=\"plotly_white\"\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='stacked-bar')","f80522d0":"First we take a few general imports that will be relevant to the scope of this notebook (numpy, pandas and plotly for interactive plots etc.) and we also read in the data.","300792ef":"So apparently the missing values all occur in a very neat pattern in the data which is definitely interesting to have a look at. Again, a reminder to *clean your data* here before moving on.","303fabe6":"Now we have a look at the first few rows of the training data:","98bdbee7":"## WIP","2c1b00b8":"# Jane Street Exploratory Data Analysis","0c7b90c6":"### TOC:\n\n<ol>\n    <li><a href=\"#introduction\">Introduction<\/a><\/li>\n    <li><a href=\"#exp\">Data exploration<\/a><\/li>\n   <\/ol>","ee9eb91c":"<h1 id=\"introduction\">Introduction<\/h1>","f3034916":"So in every tag it seems like we have very few True values and a lot of False values. ","1b37a8bc":"So this is the evolution of the targets present over time, and it's interesting to observe the fluctuations in the target time series. Let's have a look at the missing values, to account for the NaNs we saw earlier::","57f52998":"Let's just quickly check the counts of each tag, since it looks like the tags correspond to the features earlier discussed. ","d1ebbffd":"Let's just have a quick look at the features provided:","8a760a18":"<h1 id=\"exp\">Exploration<\/h1>","a1bee670":"So over here it seems like the response columns (all those columns with resp) are our labels and the features will be used to predict the labels. Let's proceed to check the response distributions over time (thank you to @xhlulu for his wonderful kernel detailing this https:\/\/www.kaggle.com\/xhlulu\/jane-street-animated-and-interactive-plots):","e2a20964":"Welcome to my notebook for the Jane Street Market Prediction competition, in which I'm going to be analyzing and taking a look at what exactly to do in the wonderful world of forecasting. Last TS comp I participated in (M5) had the largest shakeup of any competition, with people shaking up and down by ~5500 places and here, since we do not want something similar, our models need to be incredibly robust."}}