{"cell_type":{"0ef74e98":"code","eaa0f211":"code","6ada2d9e":"code","1c1c3409":"code","2707b509":"code","e94ce208":"code","9fbdfa0e":"code","462587c0":"code","8ebdae47":"code","37cba378":"code","8cadb459":"code","aece6613":"code","800922e0":"code","2a9679a7":"code","b385578f":"code","5e60ae9d":"code","1f93990a":"code","9e2f1a10":"code","a23766e9":"code","22fc1275":"code","5a4bd892":"code","d9feaa5f":"code","1aa78de2":"markdown","57319a59":"markdown","523ecdc2":"markdown","8fec7004":"markdown","56482272":"markdown","bc30160d":"markdown","385381ad":"markdown","a8f9d9ca":"markdown","113aa310":"markdown"},"source":{"0ef74e98":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandas_profiling\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nimport datetime\nfrom matplotlib import pyplot as plt\nimport matplotlib.ticker as ticker\nimport seaborn as sns\n\n%matplotlib inline\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","eaa0f211":"def update_covid_data():\n    url = 'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv'\n    dfconfirm = pd.read_csv(url, error_bad_lines=False,header=0)\n    id_cols = dfconfirm.columns[:4]\n    val_cols = dfconfirm.columns[4:]\n    dfconfirm = dfconfirm.melt(id_vars=id_cols,value_vars=val_cols,var_name ='Date',value_name='ConfirmedCases')\n    dfconfirm['Date']= dfconfirm['Date'].apply(lambda x : datetime.datetime.strptime(x,'%m\/%d\/%y'))\n    dfconfirm.columns = ['State', 'Country', 'Lat', 'Long', 'Date',\n           'ConfirmedCases']\n    dfconfirm['LatLong'] =dfconfirm.apply(lambda x:str(x['Lat']) + ',' + str(x['Long']),axis=1)\n    dfconfirm['DailyIncConirmedCases']=0\n    for ll in dfconfirm['LatLong'].unique():\n            dfconfirm.loc[dfconfirm['LatLong']==ll,'DailyIncConirmedCases'] = dfconfirm.loc[dfconfirm['LatLong']==ll,'ConfirmedCases'] - dfconfirm.loc[dfconfirm['LatLong']==ll,'ConfirmedCases'].shift(periods=1,fill_value=0)\n    dfconfirm.drop(['Lat','Long'],inplace=True,axis=1)\n    print(\"Confirmed database refreshed\")\n    \n    \n    url = 'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv'\n    dfdeaths = pd.read_csv(url, error_bad_lines=False,header=0)\n    id_cols = dfdeaths.columns[:4]\n    val_cols = dfdeaths.columns[4:]\n    dfdeaths = dfdeaths.melt(id_vars=id_cols,value_vars=val_cols,var_name ='Date',value_name='Fatalities')\n    dfdeaths['Date']= dfdeaths['Date'].apply(lambda x : datetime.datetime.strptime(x,'%m\/%d\/%y'))\n    dfdeaths.columns = ['State', 'Country', 'Lat', 'Long', 'Date',\n           'Fatalities']\n    dfdeaths['LatLong'] =dfdeaths.apply(lambda x:str(x['Lat']) + ',' + str(x['Long']),axis=1)\n    dfdeaths['DailyFatalities']=0\n    for ll in dfdeaths['LatLong'].unique():\n            dfdeaths.loc[dfdeaths['LatLong']==ll,'DailyFatalities'] = dfdeaths.loc[dfdeaths['LatLong']==ll,'Fatalities'] - dfdeaths.loc[dfdeaths['LatLong']==ll,'Fatalities'].shift(periods=1,fill_value=0)\n\n    dfdeaths.drop(['Lat','Long'],inplace=True,axis=1)\n    print(\"fatalities database refreshed\")\n    \n    \n    \n    url = 'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv'\n    dfrecover = pd.read_csv(url, error_bad_lines=False,header=0)\n    id_cols = dfrecover.columns[:4]\n    val_cols = dfrecover.columns[4:]\n    dfrecover = dfrecover.melt(id_vars=id_cols,value_vars=val_cols,var_name ='Date',value_name='Recovered')\n    dfrecover['Date']= dfrecover['Date'].apply(lambda x : datetime.datetime.strptime(x,'%m\/%d\/%y'))\n    dfrecover.columns = ['State', 'Country', 'Lat', 'Long', 'Date',\n           'Recovered']\n    dfrecover['LatLong'] =dfrecover.apply(lambda x:str(x['Lat']) + ',' + str(x['Long']),axis=1)\n    dfrecover['DailyRecovered']=0\n    for ll in dfrecover['LatLong'].unique():\n            dfrecover.loc[dfrecover['LatLong']==ll,'DailyRecovered'] = dfrecover.loc[dfrecover['LatLong']==ll,'Recovered'] - dfrecover.loc[dfrecover['LatLong']==ll,'Recovered'].shift(periods=1,fill_value=0)\n    dfrecover.drop(['Lat','Long'],inplace=True,axis=1)\n    print(\"Recovered database refreshed\")\n    \n    dfconfirm.set_index(['LatLong','Date'],inplace=True)\n    dfdeaths.set_index(['LatLong','Date'],inplace=True)\n    dfrecover.set_index(['LatLong','Date'],inplace=True)\n    dfconfirm.sort_index(inplace=True)\n    dfdeaths.sort_index(inplace=True)\n    dfrecover.sort_index(inplace=True)\n    \n    \n\n    url = 'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_US.csv'\n    usdeaths = pd.read_csv(url, error_bad_lines=False,header=0)\n    usdeaths.drop(['UID','iso2','iso3','code3','FIPS','Admin2','Combined_Key'],axis=1,inplace=True)\n    id_cols = usdeaths.columns[:5]\n    val_cols = usdeaths.columns[5:]\n    usdeaths = usdeaths.melt(id_vars=id_cols,value_vars=val_cols,var_name ='Date',value_name='Fatalities')\n    usdeaths['Date']= usdeaths['Date'].apply(lambda x : datetime.datetime.strptime(x,'%m\/%d\/%y'))\n    usdeaths.columns = ['State', 'Country', 'Lat', 'Long', 'Population','Date',\n           'Fatalities']\n    usdeaths.drop(['Lat','Long'],inplace=True,axis=1)\n    usd = usdeaths.groupby(['State','Date']).sum()\n    usd.sort_index(inplace=True)\n    usd['DailyFatalities'] = usd['Fatalities'] - usd['Fatalities'].shift(periods=1,fill_value=0)\n    usd.reset_index(inplace=True)\n    print(\"USA fatalities database refreshed\")\n    \n    return dfconfirm,dfdeaths,dfrecover, usd\n    \n    ","6ada2d9e":"#get daily updates of corona cases by countries\ndfc,dfd,dfr,usd = update_covid_data()\nalldf= pd.merge(dfc,dfr,how='inner',left_on=['LatLong','Date','State','Country'],right_on=['LatLong','Date','State','Country']).merge(dfd,how='inner',left_on=['LatLong','Date','State','Country'],right_on=['LatLong','Date','State','Country'])\nalldf.reset_index(drop=False,inplace=True)\nalldf.loc[alldf['State'].isnull(),'State']  = alldf.loc[alldf['State'].isnull(),'Country']","1c1c3409":"lockdf = pd.read_csv('\/kaggle\/input\/covid19-lockdown-dates-by-country\/countryLockdowndates.csv')\nlockdf.drop('Reference',axis=1,inplace=True)\nlockdf.columns = ['Country', 'State', 'LockdownDate', 'Type']\nlockdf.loc[lockdf['State'].isnull(),'State']  = lockdf.loc[lockdf['State'].isnull(),'Country']\nlockdf = alldf.merge(lockdf,how='left',on=['Country','State'])\nlockdf['LockdownDate'] = lockdf['LockdownDate'].apply(lambda x: datetime.datetime.strptime(x,'%d\/%m\/%Y') if not pd.isna(x) else datetime.date(2020,12,31))","2707b509":"world_data= alldf.groupby('Date').sum()[['ConfirmedCases','Fatalities','Recovered']]\nworld_data = world_data.reset_index()\nworld_data['MortalityRate'] = np.round(world_data['Fatalities']\/world_data['ConfirmedCases'],3)*100\n\nimport matplotlib.ticker as ticker\nfig=plt.figure(figsize=(16,7))\nax1=sns.lineplot(x='Date',y='ConfirmedCases',data=world_data,color='b',legend='brief')\n\nax2 = sns.lineplot(x='Date',y='Fatalities',data=world_data,color='r',legend='brief')\nax3 = sns.lineplot(x='Date',y='Recovered',data=world_data,color='g',legend='brief')\n\nplt.xticks(rotation=45,fontsize=10)\nplt.ylabel(ylabel='Cases',fontsize=14)\nplt.xlabel(xlabel='',fontsize=14)\nax4 = plt.twinx()\nsns.lineplot(x='Date',y='MortalityRate',data=world_data,color='gray',legend='brief',ax=ax4)\nax4.xaxis.set_major_locator(ticker.MultipleLocator(3))\nfig.legend(labels=['Confirmed Cases','Deaths Cases','Recovered Cases','Mortality Rate'],loc='upper left',fontsize=10)\nplt.show()","e94ce208":"world_data = alldf.groupby('Date').sum()['ConfirmedCases']\nworld_data = world_data.reset_index()\n\nfrom datetime import date\nfrom matplotlib.ticker import FormatStrFormatter\nstarting_date = world_data['Date'].head(1).values[0]\n\nevery_laks = {\n    \n    \"Lakhs\":[],\n    \"Days\":[]\n}\nfor i in range(1,100):\n    \n    if i > world_data['ConfirmedCases'].max() \/\/ 100000:\n        break\n    date = world_data[world_data['ConfirmedCases']>=i*100000].head(1)['Date'].values[0]\n    daysince = date-starting_date\n    daysince  = daysince.astype('timedelta64[D]') \/ np.timedelta64(1, 'D')\n    #print(\"Days since first {} lakhs cases {}\".format(i,daysince))\n    starting_date = date\n    every_laks['Lakhs'].append(i)\n    every_laks['Days'].append(daysince)\n    \nevery_laks = pd.DataFrame(every_laks)    \n#fig = plt.figure(figsize=(10,8))\nax = every_laks.plot(y='Days',x='Lakhs',figsize=(16,6),color='r',alpha=0.5)\n\n#ax = sns.lineplot(x=\"Days\",y=\"Lakhs\",data=every_laks)    \n\nax.xaxis.set_minor_formatter(FormatStrFormatter(\"%.2f\"))\n#ax.grid(b=False, which='minor', color='white', linestyle='--')\nplt.minorticks_on()\nplt.yticks(fontsize=10)\nplt.legend([''])\nplt.xlabel('Cases in Lakhs',fontsize=14)\nplt.ylabel('Days Since every Lakh',fontsize=14)\nx = every_laks['Lakhs']\ny = every_laks['Days']\nfor i,j in zip(x,y):\n    ax.annotate(str(np.int(j)) + ' Days',xy=(i,j),fontsize=9,rotation=-10)\n\n\nplt.show()\n","9fbdfa0e":"country_data= alldf.query('Date>\"2020-02-20\"').groupby(['Country','Date']).sum()[['DailyIncConirmedCases','DailyFatalities','DailyRecovered']]\ncountry_data = country_data.reset_index()\ncountry_data['MortalityRate'] = np.round(country_data['DailyFatalities']\/country_data['DailyIncConirmedCases'],4)*100\n\nfig=plt.figure(figsize=(15,6))\nsns.lineplot(x='Date',y='MortalityRate',data=country_data.query('Country==\"Italy\"'),color='b')\nsns.lineplot(x='Date',y='MortalityRate',data=country_data.query('Country==\"Spain\"'),color='g')\nsns.lineplot(x='Date',y='MortalityRate',data=country_data.query('Country==\"France\"'),color='r')\nsns.lineplot(x='Date',y='MortalityRate',data=country_data.query('Country==\"US\"'),color='gray')\nsns.lineplot(x='Date',y='MortalityRate',data=country_data.query('Country==\"India\"'),color='pink')\nplt.legend(['Italy','Spain','France','USA','India'])\nplt.ylabel('Mortality Rate (%)')\nplt.axhline(y=5,linestyle='--')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()","462587c0":"dfmalaria = pd.read_csv('\/kaggle\/input\/malaria-by-country\/malaria_country.csv')\ndfcumulative = alldf.groupby('Country').sum()['DailyIncConirmedCases']\ndfcumulative = dfcumulative.reset_index()\ndfcumulative = pd.merge(dfcumulative,dfmalaria,how='inner',left_on='Country',right_on='Location')\ndfcumulative.drop(['Location','Indicator','Period'],axis=1,inplace=True)\ndfcumulative.columns = ['Country', 'TotalCoronaCases',\n       'TotalMalariaCases']\ndfcumulative = pd.melt(dfcumulative, id_vars=['Country']).sort_values(['variable','value'])\n\n\nfig=plt.figure(figsize=(13,8))\nsns.barplot(x='Country', y='value', hue='variable', data=dfcumulative.query('Country!=\"China\"'))\nplt.xticks(rotation=90,fontsize=12)\nplt.ylabel('Cases')\nplt.title('Corona vs Malaria by Country');\nplt.tight_layout()\nplt.show()","8ebdae47":"import matplotlib.transforms as transforms\ndef visualize_lockdown(cntry):\n    fig = plt.figure(figsize=(14,6))\n    sns.reset_orig()\n    sns.set_style('whitegrid')\n    ax = sns.lineplot('Date','DailyIncConirmedCases',data= lockdf[lockdf['Country']==cntry],color='b',alpha=0.4)\n    ax.xaxis.set_major_locator(ticker.MultipleLocator(5))\n    \n    lockdate = lockdf[lockdf['State']==cntry]['LockdownDate'].sample(1)\n    trans = transforms.blended_transform_factory(ax.transData, ax.transAxes)\n    plt.axvline(x=lockdate,color='r',linestyle='--')\n    plt.text(lockdate, 0.95, 'Lock Down Start', transform=trans,rotation=270,fontsize=13,color='red')\n    recoverydate = lockdate + datetime.timedelta(days=14)\n    \n    plt.axvline(x=recoverydate,color='r',linestyle='--',label='True')\n    plt.text(recoverydate, 0.5, 'Incubation Period Ends', transform=trans,rotation=270,fontsize=13,color='red')\n    plt.ylabel('Daily Addtion of Cases')\n    plt.xticks(rotation=45)\n    plt.title(\"How lockdown impacted the addition of daily cases in \" + str(cntry),fontsize=13,color='blue')\n    \n    plt.savefig(cntry + '.png')\n    plt.show()","37cba378":"visualize_lockdown('Italy')","8cadb459":"visualize_lockdown('Germany')","aece6613":"visualize_lockdown('Spain')","800922e0":"visualize_lockdown('France')","2a9679a7":"visualize_lockdown('Iran')","b385578f":"visualize_lockdown('United Kingdom')","5e60ae9d":"visualize_lockdown('India')","1f93990a":"visualize_lockdown('Turkey')","9e2f1a10":"visualize_lockdown('Switzerland')","a23766e9":"visualize_lockdown('Belgium')","22fc1275":"visualize_lockdown('Netherlands')","5a4bd892":"visualize_lockdown('Austria')","d9feaa5f":"sns.set_style('whitegrid')\nfig = plt.figure(figsize=(20,8))\nfatalus = usd.query('Date>=\"2020-02-20\"')\nfataldf = alldf.query('Date>=\"2020-02-20\"')\nax = sns.lineplot(x='Date',y='DailyFatalities',data=fataldf[fataldf['Country']=='Italy'],color='r',linestyle='--',alpha=0.5,ci=None)\nax = sns.lineplot(x='Date',y='DailyFatalities',data=fataldf[fataldf['Country']=='France'],color='g',linestyle='--',alpha=0.5,ci=None)\nax = sns.lineplot(x='Date',y='DailyFatalities',data=fataldf[fataldf['Country']=='Spain'],color='b',linestyle='--',alpha=0.5,ci=None)\nax = sns.lineplot(x='Date',y='DailyFatalities',data=fataldf[fataldf['Country']=='Germany'],color='black',linestyle='--',alpha=0.5,ci=None)\nax = sns.lineplot(x='Date',y='DailyFatalities',data=fataldf[fataldf['Country']=='India'],color='gray',linestyle='--',alpha=0.5,ci=None)\nax = sns.lineplot(x='Date',y='DailyFatalities',data=fatalus.query('State==\"New York\"'),color='purple',linestyle='--',alpha=1,ci=None)\nax.xaxis.set_major_locator(ticker.MultipleLocator(3))\nplt.xticks(rotation=45)\nplt.legend(['Italy','France','Spain','Germany','India','New York'])\nplt.tight_layout()\nplt.show()","1aa78de2":"### This notebook explores the covid 19 dataset available on john hopkins collaborated github repo which is refreshed daily.","57319a59":"> ###### Global Mortality Rate has spiked from 3% to 5% in March","523ecdc2":"# Comparision of Daily addition of deaths across different regions","8fec7004":"#### So far it looks like, countries with higher cases of covid 19 had lesser number of Malaria cases","56482272":"# Fetch daily covid cases data","bc30160d":"# Study of Malaria cases by Country and its correlation with Corona Cases","385381ad":"# How many days it took to add another Hundred Thousand Cases","a8f9d9ca":"## Global  Confirmed cases, Fatalities and Recovered cases and Global  Mortality Rate from Jan-22 Till Date.","113aa310":"# Impact of Lockdowns on the countries daily addition of Covid Cases"}}