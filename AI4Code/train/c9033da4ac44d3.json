{"cell_type":{"cbee223e":"code","11ef5ea4":"code","7bf82473":"code","8de27f1a":"code","73b42427":"code","f3114098":"code","aac1f00f":"code","7325c3fc":"code","a5b4c136":"code","315881a5":"markdown","00cb2979":"markdown","59fd7c62":"markdown","156c7546":"markdown","f6f1b415":"markdown","896c4679":"markdown","8558415c":"markdown"},"source":{"cbee223e":"# install dependencies: (use cu100 because colab is on CUDA 10.0)\n!pip install -U torch==1.4+cu100 torchvision==0.5+cu100 -f https:\/\/download.pytorch.org\/whl\/torch_stable.html \n!pip install cython pyyaml==5.1\n!pip install -U 'git+https:\/\/github.com\/cocodataset\/cocoapi.git#subdirectory=PythonAPI'\nimport torch, torchvision\ntorch.__version__\n!gcc --version\n# opencv is pre-installed on colab","11ef5ea4":"# install detectron2:\n!pip install detectron2 -f https:\/\/dl.fbaipublicfiles.com\/detectron2\/wheels\/cu100\/index.html","7bf82473":"import detectron2\nfrom detectron2.utils.logger import setup_logger\nsetup_logger()\n\n# import some common libraries\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\n\n# import some common detectron2 utilities\n\n\nimport detectron2\nfrom detectron2.utils.logger import setup_logger\nsetup_logger()\n\n# import some common libraries\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\n\n# import some common detectron2 utilities\nfrom detectron2 import model_zoo\nfrom detectron2.engine import DefaultPredictor\nfrom detectron2.config import get_cfg\nfrom detectron2.utils.visualizer import Visualizer\nfrom detectron2.data import MetadataCatalog","8de27f1a":"import os\nimport numpy as np\nimport json\nfrom detectron2.structures import BoxMode\nimport itertools\nimport cv2\nimport xml.etree.ElementTree as ET\n\n\n# write a function that loads the dataset into detectron2's standard format\ndef get_dataset_dicts(annotation_path, image_path):\n    classes = ['white-rook', 'white-knight', 'white-bishop', 'white-king', 'white-queen', 'white-pawn', 'black-rook', 'black-knight', 'black-bishop', 'black-king', 'black-queen', 'black-pawn']\n\n    dataset_dicts = []\n    for filename in os.listdir(annotation_path):\n        record = {}\n        root = ET.parse(os.path.join(annotation_path, filename)).getroot()\n        record[\"file_name\"] = os.path.join(image_path, root.find('filename').text)\n        record[\"height\"] = 2248\n        record[\"width\"] = 4000\n\n        objs = []\n        for member in root.findall('object'):\n          obj = {\n              'bbox': [int(member[4][0].text), int(member[4][1].text), int(member[4][2].text), int(member[4][3].text)],\n              'bbox_mode': BoxMode.XYXY_ABS,\n              'category_id': classes.index(member[0].text),\n              \"iscrowd\": 0\n          }\n          objs.append(obj)\n        record[\"annotations\"] = objs\n        dataset_dicts.append(record)\n    return dataset_dicts","73b42427":"from detectron2.data import DatasetCatalog, MetadataCatalog\n\nclasses = ['white-rook', 'white-knight', 'white-bishop', 'white-king', 'white-queen', 'white-pawn', 'black-rook', 'black-knight', 'black-bishop', 'black-king', 'black-queen', 'black-pawn']\n\nDatasetCatalog.register('chess_piece_dataset', lambda: get_dataset_dicts('..\/input\/chess-piece-detection\/Chess Detection\/annotations', '..\/input\/chess-piece-detection\/Chess Detection\/images'))\nMetadataCatalog.get('chess_piece_dataset').set(thing_classes=classes)\nchess_metadata = MetadataCatalog.get('chess_piece_dataset')","f3114098":"import random\nfrom detectron2.utils.visualizer import Visualizer\n\ndataset_dicts = DatasetCatalog.get('chess_piece_dataset')\nfor d in random.sample(dataset_dicts, 10):\n    img = cv2.imread(d[\"file_name\"])\n    visualizer = Visualizer(img[:, :, ::-1], metadata=chess_metadata, scale=0.5)\n    vis = visualizer.draw_dataset_dict(d)\n    plt.figure(figsize = (14, 10))\n    plt.imshow(cv2.cvtColor(vis.get_image()[:, :, ::-1], cv2.COLOR_BGR2RGB))\n    plt.show()","aac1f00f":"from detectron2.engine import DefaultTrainer\nfrom detectron2.config import get_cfg\n\ncfg = get_cfg()\ncfg.merge_from_file(model_zoo.get_config_file(\"COCO-Detection\/faster_rcnn_R_101_FPN_3x.yaml\"))\ncfg.DATASETS.TRAIN = ('chess_piece_dataset',)\ncfg.DATASETS.TEST = ()   # no metrics implemented for this dataset\ncfg.DATALOADER.NUM_WORKERS = 2\ncfg.MODEL.WEIGHTS = model_zoo.get_checkpoint_url(\"COCO-Detection\/faster_rcnn_R_101_FPN_3x.yaml\")\ncfg.SOLVER.IMS_PER_BATCH = 2\ncfg.SOLVER.MAX_ITER = 1000\ncfg.MODEL.ROI_HEADS.NUM_CLASSES = 12\n\nos.makedirs(cfg.OUTPUT_DIR, exist_ok=True)\ntrainer = DefaultTrainer(cfg) \ntrainer.resume_or_load(resume=False)\ntrainer.train()","7325c3fc":"cfg.MODEL.WEIGHTS = os.path.join(cfg.OUTPUT_DIR, \"model_final.pth\")\ncfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.8   # set the testing threshold for this model\ncfg.DATASETS.TEST = (\"chess_piece_dataset\", )\npredictor = DefaultPredictor(cfg)","a5b4c136":"from detectron2.utils.visualizer import ColorMode\nimport random\n\ndataset_dicts = DatasetCatalog.get('chess_piece_dataset')\nfor d in random.sample(dataset_dicts, 5):    \n    im = cv2.imread(d[\"file_name\"])\n    outputs = predictor(im)\n    v = Visualizer(im[:, :, ::-1], metadata=chess_metadata, scale=0.8)\n    v = v.draw_instance_predictions(outputs[\"instances\"].to(\"cpu\"))\n    plt.figure(figsize = (14, 10))\n    plt.imshow(cv2.cvtColor(v.get_image()[:, :, ::-1], cv2.COLOR_BGR2RGB))\n    plt.show()","315881a5":"# Detectron2 Chess Piece Detection","00cb2979":"## Install detectron2\n\n> **Important**: If you're running on a local machine, be sure to follow the [installation instructions](https:\/\/github.com\/facebookresearch\/detectron2\/blob\/master\/INSTALL.md). This notebook includes only what's necessary to run in Colab.","59fd7c62":"## Get data","156c7546":"## Use model for inference\n\nNow, we can perform inference on our validation set by creating a predictor object.","f6f1b415":"## Train model","896c4679":"## Register data-set\n\nIn order to use a dataset with Detectron2 we need to register it. For more information check out the [official documentation](https:\/\/detectron2.readthedocs.io\/tutorials\/datasets.html#register-a-dataset).","8558415c":"We can check if our code works correctly by plotting a few images."}}