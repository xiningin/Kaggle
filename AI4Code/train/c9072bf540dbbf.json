{"cell_type":{"7a3fffaf":"code","538a3535":"code","2336f9e3":"code","1ad30033":"code","52eb3593":"code","2be6ce9e":"code","fdf0db35":"code","b45cc95e":"code","71f020d3":"code","6b4a4a0f":"code","b9d94c90":"code","1d29a80a":"code","ac655e21":"code","c07d9c31":"code","07151258":"code","74ee320c":"code","d8fb27bc":"code","26c78d0a":"code","30aae158":"code","5c2e2f83":"code","de826bab":"code","26f0123c":"code","04f16cd7":"code","f325358a":"code","bf1f3c97":"code","72689529":"code","9d3b41c7":"code","7d44676a":"code","e30c6801":"code","f0e1f274":"code","a0b0d7ae":"markdown","cc3e4789":"markdown","22606f20":"markdown","84917e5e":"markdown","5f700946":"markdown","9dfb0075":"markdown","7f316c84":"markdown","5a29d14f":"markdown","a21d67a6":"markdown","f717c500":"markdown","951259a1":"markdown","7abe348b":"markdown","8f0bb08c":"markdown","175cf3eb":"markdown","4b17d1f0":"markdown","d4689e3a":"markdown","67e71fb3":"markdown"},"source":{"7a3fffaf":"# Usual library imports.... more later \nimport numpy as np\nimport pandas as pd\nimport datetime\nfrom datetime import date, timedelta\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport matplotlib.dates as mdates\nmpl.rcdefaults()\n\nplt.style.use('seaborn')\n\n# Set display precision to 3 decimals\npd.set_option(\"display.precision\", 2)\n\n# Define date format for charts like Apr 16 or Aug 8\nmy_date_fmt = mdates.DateFormatter('%b %e')","538a3535":"# Download files from github\ncases_url = \"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv\"\ndf_cases = pd.read_csv(cases_url, error_bad_lines=False)\n\ndeaths_url = \"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv\"\ndf_deaths = pd.read_csv(deaths_url, error_bad_lines=False)\n\nrecovered_url = \"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv\"\ndf_recovered = pd.read_csv(recovered_url, error_bad_lines=False)","2336f9e3":"# Drop Province\/State, Lat and Long\ndf_cases.drop(columns=['Province\/State', 'Lat', 'Long'], inplace=True)\ndf_deaths.drop(columns=['Province\/State', 'Lat', 'Long'], inplace=True)\ndf_recovered.drop(columns=['Province\/State', 'Lat', 'Long'], inplace=True)\n\n# Rename Country\/Region as Country\ndf_cases.rename(columns={'Country\/Region' : 'Country'}, inplace=True)\ndf_deaths.rename(columns={'Country\/Region' : 'Country'}, inplace=True)\ndf_recovered.rename(columns={'Country\/Region' : 'Country'}, inplace=True)\n\n# Some countries (Australia, Canada...) report data by province so we need to aggregate it\ndf_cases = df_cases.groupby(by='Country').sum()\ndf_deaths = df_deaths.groupby(by='Country').sum()\ndf_recovered = df_recovered.groupby(by='Country').sum()\n\n# Transpose dataframes and make the date column index of datetime type\ndf_cases = df_cases.T\ndf_cases.index = pd.to_datetime(df_cases.index)\ndf_deaths = df_deaths.T\ndf_deaths.index = pd.to_datetime(df_deaths.index)\ndf_recovered = df_recovered.T\ndf_recovered.index = pd.to_datetime(df_recovered.index)","1ad30033":"# Get last date in the set\nlast_date = df_cases.tail(1).index[0].date()\nprint('Last date in the set: ' + str(last_date))","52eb3593":"# List of countries for this work\ncountry_list = ['Belgium', 'France', 'Germany', 'Italy', 'Netherlands', 'Portugal', 'Spain', 'Sweden', 'Switzerland',  \n                 'Brazil', 'Canada', 'China', 'India', 'Iran',  'Mexico', 'Russia', 'United Kingdom', 'US']\nclist1 = ['Belgium', 'France', 'Germany', 'Italy', 'Netherlands', 'Portugal', 'Spain', 'Sweden', 'Switzerland']\nclist2 = ['Brazil', 'Canada', 'China', 'India', 'Iran',  'Mexico', 'Russia', 'United Kingdom', 'US']\n\nprint('Countries selection:')\nprint(country_list)","2be6ce9e":"# Extract selection of countries\ndf_cases = df_cases[country_list]\ndf_recovered = df_recovered[country_list]\ndf_deaths = df_deaths[country_list]","fdf0db35":"# Calculate Active cases = Confirmed - Deaths - Recovered\ndf_active = pd.DataFrame(columns=df_cases.columns, index=df_cases.index)\nfor col in df_cases.columns:\n    df_active[col] = df_cases[col] - df_deaths[col] - df_recovered[col]","b45cc95e":"# Calculate Mortality = Deaths \/ Confirmed * 100\ndf_mortality = pd.DataFrame(columns=df_cases.columns, index=df_cases.index)\nfor col in df_cases.columns:\n    df_mortality[col] = 100 * df_deaths[col] \/ df_cases[col]","71f020d3":"df_totals = pd.DataFrame(columns=df_cases.columns, index=['CONFIRMED', 'DEATHS', 'RECOVERED', 'ACTIVE', 'MORTALITY'], dtype=np.int64)\ndf_totals.loc['CONFIRMED'] = df_cases.tail(1).values\ndf_totals.loc['DEATHS'] = df_deaths.tail(1).values\ndf_totals.loc['RECOVERED'] = df_recovered.tail(1).values\ndf_totals.loc['ACTIVE'] = df_active.tail(1).values\ndf_totals.loc['MORTALITY'] = df_mortality.tail(1).values\ndf_totals","6b4a4a0f":"# Plot cases and deaths numbers (European set)\n\nfig1, ax1 = plt.subplots(1,2, figsize=(24,6))\nfig1.autofmt_xdate(rotation=30, ha='right')\n\n# Confirmed cases\nax1[0].set_title('Covid-19 confirmed cases in Europe', fontsize='large')\nax1[0].xaxis.set_major_formatter(my_date_fmt)\nax1[0].xaxis.set_major_locator(plt.MultipleLocator(21))\n\nfor x in clist1:\n    ax1[0].plot(df_cases.index, df_cases[x], linewidth=1.5, label=x)\n    ax1[0].annotate(xy=(last_date + timedelta(2), df_cases[x][-1]), text=x, fontsize='small')\n    \nax1[0].legend(loc='upper left', fontsize='small')\n\n# Deaths\nax1[1].set_title('Covid-19 deaths in Europe', fontsize='large')\nax1[1].xaxis.set_major_formatter(my_date_fmt)\nax1[1].xaxis.set_major_locator(plt.MultipleLocator(21))\n\nfor x in clist1:\n    ax1[1].plot(df_deaths.index, df_deaths[x], linewidth=1.5, label=x)\n    ax1[1].annotate(xy=(last_date + timedelta(2), df_deaths[x][-1]), text=x, fontsize='small')\n    \nax1[1].legend(loc='upper left', fontsize='small')","b9d94c90":"# Plot cases and deaths numbers (Rest of the world)\n\nfig2, ax2 = plt.subplots(1,2, figsize=(24,6))\nfig2.autofmt_xdate(rotation=30, ha='right')\n\n# Confirmed cases\nax2[0].set_title('Covid-19 confirmed cases in the world (excl. Europe)', fontsize='large')\nax2[0].xaxis.set_major_formatter(my_date_fmt)\nax2[0].xaxis.set_major_locator(plt.MultipleLocator(21))\n\nfor x in clist2:\n    ax2[0].plot(df_cases.index, df_cases[x], linewidth=1.5, label=x)\n    ax2[0].annotate(xy=(last_date + timedelta(2), df_cases[x][-1]), text=x, fontsize='small')\n    \nax2[0].legend(loc='upper left', fontsize='small')\n\n# Deaths\nax2[1].set_title('Covid-19 deaths in the world (excl. Europe)', fontsize='large')\nax2[1].xaxis.set_major_formatter(my_date_fmt)\nax2[1].xaxis.set_major_locator(plt.MultipleLocator(21))\n\nfor x in clist2:\n    ax2[1].plot(df_deaths.index, df_deaths[x], linewidth=1.5, label=x)\n    ax2[1].annotate(xy=(last_date + timedelta(2), df_deaths[x][-1]), text=x, fontsize='small')\n    \nax2[1].legend(loc='upper left', fontsize='small')","1d29a80a":"fig, ax = plt.subplots(1,2, figsize=(24,6))\n\n# Axis 0: total number of cases per country\nlabels = country_list\nfor x in df_cases.columns:\n  ax[0].bar(x, df_cases[x].tail(1), alpha=0.8, color='navy')\n\nax[0].set_xticklabels(labels, rotation=45, horizontalalignment='right')\nax[0].set_title('Covid-19 confirmed cases per country as of ' + str(last_date), fontsize='large')\n\n# Axis 1: distribution of cases by status per country\ndeaths = df_deaths.tail(1).values\nrecovered = df_recovered.tail(1).values\nactive = df_active.tail(1).values\nax[1].bar(labels, active[0], label='Active cases', color='skyblue', alpha=0.75)\nax[1].bar(labels, recovered[0], bottom=active[0], label='Recovered', color='lime', alpha=0.75)\nax[1].bar(labels, deaths[0], bottom=active[0] + recovered[0], label='Deaths', color='coral', alpha=0.75)\nax[1].set_xticklabels(labels, rotation=45, horizontalalignment='right')\nax[1].set_title('Covid-19 cases by outcome as of ' + str(last_date), fontsize='large')\nax[1].legend(loc='upper left', fontsize='medium')\n\nplt.show()","ac655e21":"# Countries populations\n# Source: https:\/\/www.worldometers.info\/world-population\/population-by-country\/\n\npop = {}\n\npop['Belgium'] = 11589623\npop['France'] = 65273511\npop['Germany'] = 83783942\npop['Italy'] = 60461826\npop['Netherlands'] = 17134872\npop['Portugal'] = 10196709\npop['Spain'] = 46754778\npop['Sweden'] = 10099265\npop['Switzerland'] = 8654622\npop['Brazil'] = 212559417\npop['Canada'] = 37600000\npop['China'] = 1439323776\npop['India'] = 1380004385\npop['Iran'] = 83992949\npop['Mexico'] = 128932753\npop['Russia'] = 145934462\npop['United Kingdom'] = 67886011\npop['US'] = 331002651\n\npop","c07d9c31":"# Calculate nbr of cases per million people\ndf_cases_per_million = pd.DataFrame(columns=df_cases.columns)\nfor x in df_cases_per_million.columns:\n  df_cases_per_million[x] = 1000000 * df_cases[x].tail(1) \/\/ pop[x]\n\nprint('Nbr of covid-19 cases per million people')\ndf_cases_per_million","07151258":"# Calculate nbr of deaths per million people\ndf_deaths_per_million = pd.DataFrame(columns=df_deaths.columns)\nfor x in df_deaths_per_million.columns:\n  df_deaths_per_million[x] = 1000000 * df_deaths[x].tail(1) \/\/ pop[x]\n\nprint('Nbr of covid-19 deaths per million people')\ndf_deaths_per_million","74ee320c":"fig, ax = plt.subplots(1,2, figsize=(24,6))\n\n# Axis 0: cases per million\nfor x in df_cases.columns:\n  ax[0].bar(x, df_cases_per_million[x].tail(1))\n\n# ax[0].set_ylabel('Number of cases per million')\nax[0].set_xticklabels(labels, rotation=45, horizontalalignment='right')\nax[0].set_title('Covid-19 confirmed cases per million people as of ' + str(last_date), fontsize='large')\n\n# Axis 1: deaths per million \nfor x in df_cases.columns:\n  ax[1].bar(x, df_deaths_per_million[x].tail(1))\n\n# ax[1].set_ylabel('Number of deaths per million')\nax[1].set_xticklabels(labels, rotation=45, horizontalalignment='right')\nax[1].set_title('Covid-19 deaths per million people as of ' + str(last_date), fontsize='large')\n\nplt.show()","d8fb27bc":"# Create new dataframes with daily variation of confirmed cases, deaths and active cases\n\ndf_cases_diff = pd.DataFrame(index=df_cases.index, columns=df_cases.columns)\ndf_deaths_diff = pd.DataFrame(index=df_deaths.index, columns=df_deaths.columns)\n\nfor x in df_cases_diff.columns:\n  df_cases_diff[x] = df_cases[x].diff()\n  df_deaths_diff[x] = df_deaths[x].diff()\n\ndf_cases_diff.fillna(value=0, inplace=True)\ndf_deaths_diff.fillna(value=0, inplace=True)\n\n# Confirmed cases and deaths are always growing, hence their derivatives must be positive or zero\ndf_cases_diff[df_cases_diff < 0] = 0\ndf_deaths_diff[df_deaths_diff < 0] = 0","26c78d0a":"# Evolution of covid-19 cases: confirmed cases growth rate\nfig1, ax1 = plt.subplots(6,3, figsize=(32,20))\nfig1.subplots_adjust(top=0.95)\ni = 0\nj = 0\nfor x in df_cases_diff.columns:\n  ax1[i,j].set_title(x, fontsize='large')\n  ax1[i,j].xaxis.set_major_formatter(my_date_fmt)\n  ax1[i,j].xaxis.set_major_locator(plt.MultipleLocator(21)) \n  ax1[i,j].bar(df_cases_diff.index, df_cases_diff[x], color='grey', alpha=0.3, label='Confirmed cases daily diff')\n  ax1[i,j].plot(df_cases_diff.index, df_cases_diff[x].rolling(window=7).mean(), color='navy', alpha=0.75, linewidth=2, label='7-day moving average')\n  if j<2:\n    j = j + 1\n  else:\n    j = 0\n    i = i + 1\n\nax1[0,0].legend(loc='upper left', fontsize='large')\nfig1.suptitle('Confirmed cases growth rate by country', fontsize='xx-large')  \nfig1.autofmt_xdate(rotation=30, ha='right')\nplt.show()","30aae158":"# Evolution of covid-19 cases: deaths growth rate\nfig3, ax3 = plt.subplots(6,3, figsize=(32,20))\nfig3.subplots_adjust(top=0.95)\ni = 0\nj = 0\nfor x in df_cases.columns:\n  ax3[i,j].set_title(x, fontsize='large')\n  ax3[i,j].xaxis.set_major_formatter(my_date_fmt)\n  ax3[i,j].xaxis.set_major_locator(plt.MultipleLocator(21)) \n  ax3[i,j].bar(df_deaths_diff.index, df_deaths_diff[x], color='grey', alpha=0.3, label='Deaths daily diff')\n  ax3[i,j].plot(df_deaths_diff.index, df_deaths_diff[x].rolling(window=7).mean(), color='coral', linewidth=2, label='7-day moving average')\n  if j<2:\n    j = j + 1\n  else:\n    j = 0\n    i = i + 1\n  \nax3[0,0].legend(loc='upper left', fontsize='large')\nfig3.suptitle('Deaths growth rate by country', fontsize='xx-large')  \nfig3.autofmt_xdate(rotation=30, ha='right')\nplt.show()","5c2e2f83":"from fbprophet import Prophet\n\n# Define function that automates Prophet training and predicting process\ndef prophetize(data, npred, ys, ws, ds): \n    m = Prophet(yearly_seasonality=ys, weekly_seasonality=ws, daily_seasonality=ds)\n    m.fit(data)\n    future = m.make_future_dataframe(periods=npred)\n    future = m.predict(future)\n    return future","de826bab":"# Model parameters \n\n# Number of samples\nNBR_SAMPLES = df_cases.shape[0]\n\n# Number of features Xi \nNBR_FEATURES = len(df_cases.columns)\n\n# Number of predictions\nNBR_PREDICTIONS = 30 \n\n# Seasonalitites\nys = 'auto'\nws = True\nds = False\n\nprint('Prophet model parameters for confirmed cases, active cases and deaths')\nprint('.....................................................................')\nprint('Nbr. Features (countries): ', NBR_FEATURES)\nprint('Nbr. Samples (training days): ', NBR_SAMPLES)\nprint('Nbr. Predictions (future days): ', NBR_PREDICTIONS)\nprint('.....................................................................')\nprint('Yearly seasonality: ', str(ys))\nprint('Weekly seasonality: ', str(ws))\nprint('Daily seasonality: ', str(ds))","26f0123c":"%%time\n# Prophet predictions of confirmed cases\n\ndf_fbp_inputs = {}\nfor x in df_cases.columns:\n  df_fbp_inputs[x] = pd.DataFrame(data={'ds' : df_cases.index, 'y' : df_cases[x]}, columns = ['ds', 'y'])\n    \ndf_fbp_outputs = {}\nfor x in df_cases.columns:\n  df_fbp_outputs[x] = prophetize(df_fbp_inputs[x], NBR_PREDICTIONS, ys, ws, ds)","04f16cd7":"# Plot Prophet predictions\nfig, ax = plt.subplots(6,3, figsize=(32,20))\nfig.subplots_adjust(top=0.95)\ni = 0\nj = 0\n\nfor x in df_cases.columns:\n  ax[i,j].set_title(x, fontsize='large')\n  ax[i,j].xaxis.set_major_formatter(my_date_fmt)\n  ax[i,j].xaxis.set_major_locator(plt.MultipleLocator(21)) \n  ax[i,j].plot(df_fbp_inputs[x].ds, df_fbp_inputs[x].y, color='navy', lw=1.5, label='Historical data')\n  ax[i,j].plot(df_fbp_outputs[x].ds, df_fbp_outputs[x].yhat, color= 'aqua',  lw=1.5, label='Prediction (yhat)')\n  ax[i,j].fill_between(df_fbp_outputs[x].ds, df_fbp_outputs[x].yhat_lower, df_fbp_outputs[x].yhat_upper, alpha=0.2)\n  ax[i,j].legend(loc='upper left', fontsize='medium')\n  if j<2:\n    j = j + 1\n  else:\n    j = 0\n    i = i + 1\n\n\nfig.suptitle(str(NBR_PREDICTIONS) + '-day Prophet predictions of confirmed cases by country', fontsize='xx-large')  \nfig.autofmt_xdate(rotation=30, ha='right')\nplt.show()","f325358a":"%%time\n# Prophet predictions of deaths\n\ndf_fbp_inputs = {}\nfor x in df_deaths.columns:\n  df_fbp_inputs[x] = pd.DataFrame(data={'ds' : df_deaths.index, 'y' : df_deaths[x]}, columns = ['ds', 'y'])\n\ndf_fbp_outputs = {}\nfor x in df_deaths.columns:\n  df_fbp_outputs[x] = prophetize(df_fbp_inputs[x], NBR_PREDICTIONS, ys, ws, ds)","bf1f3c97":"# Plot Prophet predictions\nfig, ax = plt.subplots(6,3, figsize=(32,20))\nfig.subplots_adjust(top=0.95)\ni = 0\nj = 0\n\nfor x in df_deaths.columns:\n  ax[i,j].set_title(x, fontsize='large')\n  ax[i,j].xaxis.set_major_formatter(my_date_fmt)\n  ax[i,j].xaxis.set_major_locator(plt.MultipleLocator(21)) \n  ax[i,j].plot(df_fbp_inputs[x].ds, df_fbp_inputs[x].y, color='coral', lw=1.5, label='Historical data')\n  ax[i,j].plot(df_fbp_outputs[x].ds, df_fbp_outputs[x].yhat, color= 'violet',  lw=1.5, label='Prediction (yhat)')\n  ax[i,j].fill_between(df_fbp_outputs[x].ds, df_fbp_outputs[x].yhat_lower, df_fbp_outputs[x].yhat_upper, alpha=0.2)\n  ax[i,j].legend(loc='upper left', fontsize='medium')  \n  if j<2:\n    j = j + 1\n  else:\n    j = 0\n    i = i + 1\n    \nfig.suptitle(str(NBR_PREDICTIONS) + '-day Prophet predictions of deaths by country', fontsize='xx-large')  \nfig.autofmt_xdate(rotation=30, ha='right')\nplt.show()","72689529":"# Model parameters \n\n# Number of samples\nNBR_SAMPLES = df_cases_diff.shape[0]\n\n# Number of features Xi \nNBR_FEATURES = len(df_cases_diff.columns)\n\n# Number of predictions\nNBR_PREDICTIONS = 30 \n\n# Seasonalitites\nys = 'auto'\nws = True\nds = False\n\nprint('Prophet model parameters for growth rates')\nprint('.........................................')\nprint('Nbr. Features (countries): ', NBR_FEATURES)\nprint('Nbr. Samples (training days): ', NBR_SAMPLES)\nprint('Nbr. Predictions (future days): ', NBR_PREDICTIONS)\nprint('.........................................')\nprint('Yearly seasonality: ', str(ys))\nprint('Weekly seasonality: ', str(ws))\nprint('Daily seasonality: ', str(ds))","9d3b41c7":"%%time\n# Prophet predictions of the confirmed cases growth rate\n\ndf_fbp_inputs = {}\nfor x in df_cases_diff.columns:\n  df_fbp_inputs[x] = pd.DataFrame(data={'ds' : df_cases_diff.index, 'y' : df_cases_diff[x]}, columns = ['ds', 'y'])\n\ndf_fbp_outputs = {}\nfor x in df_cases_diff.columns:\n  df_fbp_outputs[x] = prophetize(df_fbp_inputs[x], NBR_PREDICTIONS, ys, ws, ds)","7d44676a":"# Plot results\nfig, ax = plt.subplots(6,3, figsize=(32,20))\nfig.subplots_adjust(top=0.95)\ni = 0\nj = 0\nfor x in df_cases_diff.columns:\n  ax[i,j].set_title(x, fontsize='large')\n  ax[i,j].xaxis.set_major_formatter(my_date_fmt)\n  ax[i,j].xaxis.set_major_locator(plt.MultipleLocator(21))\n  ax[i,j].plot(df_fbp_inputs[x].ds, df_fbp_inputs[x].y, color='navy', lw=1.5, label='Historical data')\n  ax[i,j].plot(df_fbp_outputs[x].ds, df_fbp_outputs[x].yhat, color= 'aqua',  lw=1.5, label='Prediction (yhat)')\n  ax[i,j].fill_between(df_fbp_outputs[x].ds, df_fbp_outputs[x].yhat_lower, df_fbp_outputs[x].yhat_upper, alpha=0.2)\n  ax[i,j].legend(loc='upper left', fontsize='medium')\n  if j<2:\n    j = j + 1\n  else:\n    j = 0\n    i = i + 1\n\nfig.suptitle(str(NBR_PREDICTIONS) + '-day Prophet predictions of the confirmed cases growth rate by country', fontsize='xx-large')  \nfig.autofmt_xdate(rotation=30, ha='right')\nplt.show()","e30c6801":"%%time\n# Prophet predictions of the deaths growth rate\n\ndf_fbp_inputs = {}\nfor x in df_deaths_diff.columns:\n    df_fbp_inputs[x] = pd.DataFrame(data={'ds' : df_deaths_diff.index, 'y' : df_deaths_diff[x]}, columns = ['ds', 'y'])\n    \ndf_fbp_outputs = {}\nfor x in df_deaths_diff.columns:\n  df_fbp_outputs[x] = prophetize(df_fbp_inputs[x], NBR_PREDICTIONS, ys, ws, ds)","f0e1f274":"# Plot results\nfig, ax = plt.subplots(6,3, figsize=(32,20))\nfig.subplots_adjust(top=0.95)\ni = 0\nj = 0\n\nfor x in df_deaths_diff.columns:\n  ax[i,j].set_title(x, fontsize='large')\n  ax[i,j].xaxis.set_major_formatter(my_date_fmt)\n  ax[i,j].xaxis.set_major_locator(plt.MultipleLocator(21)) \n  ax[i,j].plot(df_fbp_inputs[x].ds, df_fbp_inputs[x].y, color='coral', lw=1.5, label='Historical data')\n  ax[i,j].plot(df_fbp_outputs[x].ds, df_fbp_outputs[x].yhat, color= 'violet',  lw=1.5, label='Prediction (yhat)')\n  ax[i,j].fill_between(df_fbp_outputs[x].ds, df_fbp_outputs[x].yhat_lower, df_fbp_outputs[x].yhat_upper, alpha=0.2)\n  ax[i,j].legend(loc='upper left', fontsize='medium')  \n  if j<2:\n    j = j + 1\n  else:\n    j = 0\n    i = i + 1\n\nfig.suptitle(str(NBR_PREDICTIONS) + '-day Prophet predictions of the deaths growth rate by country', fontsize='xx-large')  \nfig.autofmt_xdate(rotation=30, ha='right')\nplt.show()","a0b0d7ae":"## Number of confirmed cases and deaths per million population\nGiven the different populations of the countries, ranging from the really small (Switzerland, Sweden or Portugal around 10M) through to the USA with 330M or China and India in the range of 1300 - 1500M, it seems appropriate to calculate these numbers per million people, in order to compare the impact of covid-19 among them.\n\nLet's do it.","cc3e4789":"Above are the countries populations.","22606f20":"Please be aware the recovered cases series is not updated by Spain since sometime in May, and it went down to zero for UK too around that same time or earlier. So just be cautious when interpreting the charts, or just focus on confirmed cases and deaths which are the most reliable series.","84917e5e":"# Prediction models with Facebook Prophet\n---\n\nPredicting time-series with FB Prophet, at least in its simplest form, is pretty easy. The engineers at FB have made a great job in creating a simple to use and effective library. \n\nCompared to a LSTM neural network, which works very well but is tedious to code and hard to configure, Prophet is a toy for kids.\n\nThe following function summarizes all you need for a basic, linear growth implementation of the model. I will be calling it for the different dataset variables to make predictions.","5f700946":"## Predictions of confirmed cases and deaths","9dfb0075":"## Current numbers: country comparison","7f316c84":"These charts deserves a bullet list of insight  and comments:\n\n- China, the country where covid-19 originated, can hardly be seen in the charts..... which, well, in my view is simply not credible, or at least it is not the full story.\n- In the Americas, USA with over 300M people, Brazil with over 200M, and Mexico with more than 128M, all with large dense urban areas, have been hit hard in terms of cases per million but their figures are in line with those of the European most affected countries.\n- In Europe, Belgium leads the way in both contagions and deaths, although the pandemic is widely spread, with most countries (whether big or small) scoring high. It is worth explaining here that the death count from Belgium includes both PCR and AC diagnostics, whilst Spain for instance only counts deaths with a positive PCR.\n- Sweden case, scoring high both in cases and deaths per million and with a small population, is worth a mention too as it is the only country in the list that opted from the very start for the \"herd immunity\" pandemic strategy. Only time will tell if they were right or wrong, but they may well be on their way to that immunity, while showing numbers comparable to other European countries that opted for more strict containment measures.","5a29d14f":"## Calculate and plot growth rates\n\nIt is also interesting, from an investigative perspective, to calculate the daily variation of some of these variables, that is their **rate of growth**, which tells us how fast they are changing. \n\nThe daily variation can be computed by substracting the number of confirmed cases (or deaths or active cases) on day t-1 from the number of cases on day t. Although I had initially calculated the active cases growth rate, I have now dropped that part of the code as the active cases variables is a low quality set that would give misleading results.\n\nI will calculate then the following new variables:\n\n    - daily variation of cases\n    - daily variation of deaths","a21d67a6":"## Calculate other variables: mortality and active cases\n\nThe three available (measured) variables in our data are the number of confirmed cases, recovered and deaths. From these, we can calculate the number of **active cases** at any point in time, as follows:\n\n> **Active Cases (t) = Confirmed Cases (t) - Recovered (t) - Deaths (t)**\n\nwhere t is the date.\n\nWhilst confirmed, recovered and deaths are cumulative variables and therefore always increase, the active cases variable will increase and decrease over time, forming a series of waves of different peaks and waves, until it eventually reaches zero, once the pandemic has been controlled. In practise, experimentation with this variable has yielded poor results.\n\nAnother variable of interest that we can calculate from the measured variables is Mortality (expressed in %), defined as:\n\n> **Mortality % (t) = 100 * Deaths (t) \/ Confirmed Cases (t)**\n\nUnlike the other variables, where their instant values make sense, the \"truth mortality\" can not be known until the pandemic is fully erradicated (and the full numbers of deaths and contagions are known). Plotting the \"instant mortality\" is at best confusing, so I will save that effort.\n\nThe best value of the covid-19 mortality for each country is the last value available in the mortality column, as shown in the summary table below.","f717c500":"Let's now plot the growth rates that I just calculated.","951259a1":"# Descriptive statistics\n---","7abe348b":"Note that the data used in this work only accounts for PCR diagnosed cases. If you compare these numbers with other sources such as www.worldometers.info\/coronavirus\/ you might find a significant difference in the number of confirmed cases. \n\nThe reason for this is that worldometers.info also accounts for cases diagnosed through other types of tests along with PCR. \n\nRecovered and death figures seem to be more aligned.\n\nThe following table shows the numbers for each country at the date of running the notebook.","8f0bb08c":"The model works reasonably well, however it may predict negative values of the rates of growth in some cases, which would be impossible. In order to fix that, I would need to set some upper and lower limits for the Prophet algorithm outputs. I have read this can be done by using \"logistic\" growth (which has saturation properties that would certainly improve also the cumulative variables predictions). I tried to implement it but I could not get it to work. So this notebook is pending a revisit.\n\nAnyway, thanks for reading, and I hope you liked it. \n\n---","175cf3eb":"## Exogenous data: country populations","4b17d1f0":"## Data loading and pre-process","d4689e3a":"# Using Facebook Prophet algorithm to predict Covid-19 cases\n---\n\nLast updated: 02\/04\/2021\n\nIn this notebook, I will first do a comparative analysis of the covid-19 expansion across a number of countries in Europe and beyond, and then will use Facebook Prophet to make 30-days predictions. The following countries form the selection for this work:\n\n*     9 European Union countries: Spain, Belgium, France, Germany, Italy, Netherlands, Portugal, Sweden, Switzerland\n\n*     9 world countries: Brazil, Canada, China, India, Iran, Mexico, Russia, United Kingdom, United States (US)\n\nProphet implements a procedure for forecasting time series data based on an additive model where non-linear trends are fit with yearly, weekly, and daily seasonality, plus holiday effects. It works best with time series that have strong seasonal effects and several seasons of historical data. Prophet is robust to missing data and shifts in the trend, and typically handles outliers well.\n\nThe data is obtained directly from the COVID-19 Data Repository by the Center for Systems Science and Engineering (CSSE) at Johns Hopkins University:\n\n    https:\/\/github.com\/CSSEGISandData\/COVID-19\n\nThese files are updated daily and hence you can get an up-to-date, fresh execution any time you run the notebook. Also these files contain confirmed cases, recovered and dates cumulative numbers for 188 countries in the world, so whilst I use a subset of 18 countries, you can easily fork the notebook and taylor it to your needs.\n\nThe primary (measured) variables I will work with, as obtained from the repository files, are:\n\n    - number of confirmed cases\n    - number of recovered cases\n    - number of deaths\n\nThen I will calculate the number of active cases, the mortality and the cases rate of growth, just to finish off with some predictions.\n\nI hope you will find it interesting!","67e71fb3":"## Predictions of growth rates (of confirmed cases and deaths)"}}