{"cell_type":{"b4c23361":"code","4116f9d3":"code","bc83f694":"code","9e873889":"code","65da1ead":"code","8b746449":"code","cd4f272f":"code","3af9be0f":"code","0959ee8d":"code","a95e30f9":"code","a3a26c88":"code","1adacdd9":"code","86af3c9c":"code","3d5832fa":"code","9ef0ff58":"code","12dfd4e1":"code","0fdfa738":"code","adadf4fd":"markdown","9a91aae6":"markdown","1b245b9d":"markdown","6a79b7f2":"markdown","fccd2b07":"markdown","62bb6604":"markdown","93f0faf9":"markdown","6269dd79":"markdown"},"source":{"b4c23361":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.linear_model import LogisticRegression","4116f9d3":"data = pd.read_csv('..\/input\/sundown-and-sunset-data-20102020\/Sunup_Sundown_Data.csv')","bc83f694":"data","9e873889":"data.info()","65da1ead":"data['Month'] = data['Date'].apply(lambda date: date[5:7])","8b746449":"data['SunupHour'] = data['Sunup'].apply(lambda time: time[:2])\ndata['SunupMinute'] = data['Sunup'].apply(lambda time: time[-2:])\n\ndata['SundownHour'] = data['Sundown'].apply(lambda time: time[:2])\ndata['SundownMinute'] = data['Sundown'].apply(lambda time: time[-2:])","cd4f272f":"data['City'].unique()","3af9be0f":"data = data.drop(['City', 'Date', 'Sunup', 'Sundown'], axis=1)","0959ee8d":"data","a95e30f9":"data = data.astype(np.int)","a3a26c88":"corr = data.corr()\n\nplt.figure(figsize=(12, 10))\nsns.heatmap(corr, annot=True, vmin=-1.0, vmax=1.0, cmap='rocket')\nplt.show()","1adacdd9":"plt.figure(figsize=(16, 5))\nfor column in data.columns:\n    sns.kdeplot(data[column], shade=True)\nplt.show()","86af3c9c":"y = data['Month'].copy()\nX = data.drop('Month', axis=1)","3d5832fa":"scaler = StandardScaler()\n\nX = scaler.fit_transform(X)","9ef0ff58":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=122)","12dfd4e1":"models = []\nCs = [0.01, 0.1, 1.0, 10.0, 100.0, 1000.0, 10000.0]\n\nfor C in Cs:\n    model = LogisticRegression(C=C)\n    model.fit(X_train, y_train)\n    models.append(model)","0fdfa738":"model_acc = [model.score(X_test, y_test) for model in models]\n\nprint(f\"   Model Accuracy (C={Cs[0]}):\", model_acc[0])\nprint(f\"    Model Accuracy (C={Cs[1]}):\", model_acc[1])\nprint(f\"    Model Accuracy (C={Cs[2]}):\", model_acc[2])\nprint(f\"   Model Accuracy (C={Cs[3]}):\", model_acc[3])\nprint(f\"  Model Accuracy (C={Cs[4]}):\", model_acc[4])\nprint(f\" Model Accuracy (C={Cs[5]}):\", model_acc[5])\nprint(f\"Model Accuracy (C={Cs[6]}):\", model_acc[6])","adadf4fd":"# Preprocessing","9a91aae6":"# Task for Today  \n\n***\n\n## Month Prediction From Sunrise\/Sunset Data  \n\nGiven *data about daily sunrise and sunset in Toronto*, let's try to predict the **month** of a given record.  \n  \nWe will use a logistic regression model to make our predictions.","1b245b9d":"# Getting Started","6a79b7f2":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/ZkRJhWJ5n2A","fccd2b07":"# Splitting and Scaling","62bb6604":"# Training","93f0faf9":"# Visualization","6269dd79":"# Results"}}