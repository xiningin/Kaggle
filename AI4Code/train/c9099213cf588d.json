{"cell_type":{"362f62ea":"code","3416745b":"code","459eb456":"code","08fedb53":"code","0ab9607e":"code","88be493e":"code","c81d6f28":"code","eb05dab7":"code","6c306206":"code","580c2c95":"code","99241e00":"code","e4564eb4":"code","f695e8d4":"code","f7c544df":"code","f55757d6":"code","3a420782":"code","036a1a5d":"code","49a98d0d":"code","482c29d0":"code","0bd41cf8":"code","fae10674":"markdown","e5bdef8d":"markdown","39f89ecc":"markdown","cef22999":"markdown","11f6f0a2":"markdown","c36fc439":"markdown","f996a2e8":"markdown","46b6e4a0":"markdown","2fa8ea43":"markdown"},"source":{"362f62ea":"import pandas as pd\nimport numpy as np\nimport matplotlib.pylab as plt\nimport seaborn as sns\nplt.style.use('ggplot')","3416745b":"train = pd.read_csv('..\/input\/nbme-score-clinical-patient-notes\/train.csv')\ntest = pd.read_csv('..\/input\/nbme-score-clinical-patient-notes\/test.csv')\nss = pd.read_csv('..\/input\/nbme-score-clinical-patient-notes\/sample_submission.csv')\npn = pd.read_csv('..\/input\/nbme-score-clinical-patient-notes\/patient_notes.csv')\nfeatures = pd.read_csv('..\/input\/nbme-score-clinical-patient-notes\/features.csv')\ntrain = train.merge(features, on=['case_num','feature_num'], validate='m:1')\ntrain = train.merge(pn, validate='m:1')","459eb456":"# Print an example patient history notes\nprint(pn.query('pn_num == 16 and case_num == 0')['pn_history'].values[0])","08fedb53":"# Add label if the test taker correctly identified the feature\ntrain['correct'] = ~(train['annotation'] == \"[]\")","0ab9607e":"train.groupby('pn_num')['correct'].mean().sort_values() \\\n    .plot(kind='hist', bins=25, figsize=(12, 5),\n          title='% of Features Correctly Noted by Doctor')\nplt.show()","88be493e":"print(train.query('pn_num == 52923')['pn_history'].values[0])","c81d6f28":"print(train.query('pn_num == 71865')['pn_history'].values[0])","eb05dab7":"test_taker_results = train.groupby(['pn_num','case_num'])['correct'] \\\n    .mean().reset_index()","6c306206":"fig, ax = plt.subplots(figsize=(12, 5))\nsns.boxplot(data=test_taker_results, x='case_num', y='correct')\nax.set_title('% of Features Captured by Case Number')\nax.set_xlabel('Case Number')\nax.set_ylabel('% of Features Captured')\nplt.show()","580c2c95":"ax = test_taker_results.groupby('case_num')['correct'].max() \\\n    .plot(kind='bar', color='#F8766D', figsize=(12, 5),\n         title='Best Score for Each Case', edgecolor='black')","99241e00":"# This case is the hardest to get correct.\n# Even the best test taker only found 76% of the features.\ntest_taker_results.query('case_num == 2').sort_values('correct', ascending=False).head(1)","e4564eb4":"print(train.query('pn_num == 21325')['pn_history'].values[0])","f695e8d4":"train.groupby('feature_num')['correct'].mean() \\\n    .plot(kind='hist', bins=50, color='#00BFC4', figsize=(12, 5),\n          title='% of Correct Annotation for Features', edgecolor='black')\nax.set_xlabel('% of Correct Annotations')\nplt.show()","f7c544df":"train.groupby('feature_num')['correct'].mean().sort_values()","f55757d6":"train.query('feature_num == 807').head()","3a420782":"train.query('feature_num == 807').loc[\n    train.query('feature_num == 807')['pn_history'].str.lower().str.contains('hallucinations')\n]","036a1a5d":"print(\n    train.query('feature_num == 807').loc[\n    train.query('feature_num == 807')['pn_history'].str.lower().str.contains('hallucinations') &\n    train.query('feature_num == 807')['pn_history'].str.lower().str.contains('ambien')\n]['pn_history'].values[0]\n)","49a98d0d":"print(train.query('feature_num == 209').loc[\n    train.query('feature_num == 209')['pn_history'].str.lower().str.contains('stress')\n]['pn_history']\n     )","482c29d0":"print(train.query('feature_num == 209').sort_values('correct') \\\n    .query('pn_num == 21054')['pn_history'].values[0])","0bd41cf8":"# import spacy\n# sample_text = train.query('pn_num == 16')['pn_history'].values[0]\n# # vocab = spacy.vocab.Vocab()\n# ?nlp = spacy.load(vocab)\n# doc = nlp(sample_text)\n# spacy.displacy.render(doc, style='ent', manual=True, jupyter=True)","fae10674":"# Score the Test Takers\n- Which test takers performed best\/worst?\n- Which cases were hard or easy to score?\n\nThese results may help you when designing a model to predict the annotations.","e5bdef8d":"## Whats the least identified feature(s)?\n- There were 2 features that were identified only once out of 100!","39f89ecc":"# NBME Data Exploration\n\nThis notebook was created during a live coding session on twitch.\n\nFollow here for future streams: [Follow here](https:\/\/www.twitch.tv\/medallionstallion_)\n\nInitially I had a hard time understanding the dataset until I realized the data is from a test being taken by future doctors. This is why features and case numbers are repeated in the training set. This notebook explores some of the best\/worst test takers and hard\/easy cases.","cef22999":"## Bad Test Taker?\nThis is an example of a test taker who labeled 27.7% of the features from this case:","11f6f0a2":"# Are any \"cases\" harder for test takers?\n- We can aggregate the percent correct for each test taker.\n- Take a look at scores per case.","c36fc439":"# Make colored annotations","f996a2e8":"## Test Taker Score by Feature","46b6e4a0":"# What is the best score of a test taker for each case?","2fa8ea43":"## Perfect test taker!\n\nThis test taker captured 100% of the features."}}