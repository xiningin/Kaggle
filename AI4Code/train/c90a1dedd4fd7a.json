{"cell_type":{"3e736f7d":"code","986c0e04":"code","a2a98691":"code","8c75de6d":"code","c8c96428":"code","011211d9":"code","e3b1b789":"code","bbe4d804":"code","0beda3d5":"code","8fa68147":"code","15144d33":"code","544681d5":"code","3fd5a2eb":"code","07a05dc6":"code","6ee75687":"code","5baacd82":"code","45a3f344":"code","a3a78f4a":"code","1fdd267f":"code","3c52e16e":"code","2b1cd843":"markdown","49af47ef":"markdown","2ab69831":"markdown","dd02e049":"markdown","91a00059":"markdown","215ad3b0":"markdown","6c498849":"markdown","bab636a7":"markdown","75a0041b":"markdown","ff834f32":"markdown","746c03aa":"markdown","7c97af5c":"markdown","abe79d54":"markdown"},"source":{"3e736f7d":"import pandas as pd\ndf = pd.read_csv('..\/input\/imdb-dataset-of-50k-movie-reviews\/IMDB Dataset.csv')\ndf.head()","986c0e04":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndf['sentiment'] = le.fit_transform(df.sentiment)\ndf.head()","a2a98691":"### Defining hyperparameters for Text Processing","8c75de6d":"TOP_WORDS      = 5000      # to keep only 5000 top used words\nMAX_REVIEW_LEN = 500       # caps the sequence length to this number (Keras requires all sequences to be of same length)\nOOV_TOKEN      = '<OOV>'   # any out of vocabulary word (not part of top words) is replaced with this text\nTRUNC_TYPE     = 'post'\nPADDING_TYPE   = 'post'\nTEST_SIZE      = 0.5\nEMBEDDING_LEN  = 32 \nEPOCHS         = 10\nBATCH_SIZE     = 64","c8c96428":"from tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n\ntokenizer = Tokenizer(num_words = TOP_WORDS, oov_token = OOV_TOKEN)\ntokenizer.fit_on_texts(df.review.to_numpy())\nword_index = tokenizer.word_index\nword_index_inv = dict([(v,k) for (k,v) in word_index.items()])","011211d9":"def decode_sentence(text):\n    return ' '.join([word_index_inv.get(i, '?') for i in text])\n\nsample_seq = [' '.join(df.review[0].split(' ')[:50])]\ntokenized_sample = tokenizer.texts_to_sequences(sample_seq)\nprint (sample_seq[0])\nprint ('------------------')\nprint (tokenized_sample[0])\nprint ('------------------')\nprint (decode_sentence(tokenized_sample[0]))","e3b1b789":"reviews = df.review.to_numpy()\nlabels  = df.sentiment.to_numpy()\n\ntrain_count      = int(len(reviews) * (1 - TEST_SIZE))\ntraining_reviews = reviews[:train_count]\ntesting_reviews  = reviews[train_count:]\ny_train          = labels[:train_count]\ny_test           = labels[train_count:]\n\nprint ('Training Count :', len(training_reviews))\nprint ('Testing Count :', len(testing_reviews))","bbe4d804":"training_sequences = tokenizer.texts_to_sequences(training_reviews)\nX_train            = pad_sequences(training_sequences, maxlen = MAX_REVIEW_LEN, padding = PADDING_TYPE, truncating = TRUNC_TYPE)\n\ntesting_sequences  = tokenizer.texts_to_sequences(testing_reviews)\nX_test             = pad_sequences(testing_sequences,  maxlen = MAX_REVIEW_LEN, padding = PADDING_TYPE, truncating = TRUNC_TYPE)","0beda3d5":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, GlobalAveragePooling1D\nfrom tensorflow.keras.optimizers import Adam\n\nmodel = Sequential() \nmodel.add(Embedding(TOP_WORDS, EMBEDDING_LEN, input_length=MAX_REVIEW_LEN))\nmodel.add(GlobalAveragePooling1D())\nmodel.add(Dense(100, activation = 'relu'))\nmodel.add(Dense(1, activation = 'sigmoid')) \nmodel.compile(loss = 'binary_crossentropy', optimizer = Adam(0.0005), metrics = ['accuracy']) \nmodel.summary()\n%time history = model.fit(X_train, y_train, validation_data =(X_test, y_test), epochs=EPOCHS, batch_size=BATCH_SIZE, verbose = 0)","8fa68147":"results = model.evaluate(X_test, y_test, batch_size = 128, verbose = 0)\nprint (f'Accuracy : {round(results[1]*100, 2)} %')","15144d33":"import matplotlib.pyplot as plt\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('LOSS')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'])\nplt.show()\n\n\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('ACCURACY')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'])\nplt.show()   ","544681d5":"model = Sequential() \nmodel.add(Embedding(TOP_WORDS, EMBEDDING_LEN, input_length=MAX_REVIEW_LEN))\nmodel.add(LSTM(100))\nmodel.add(Dense(1, activation = 'sigmoid')) \nmodel.compile(loss = 'binary_crossentropy', optimizer = Adam(0.005), metrics = ['accuracy']) \nmodel.summary()\n%time history = model.fit(X_train, y_train, validation_data =(X_test, y_test), epochs=EPOCHS, batch_size=BATCH_SIZE, verbose = 0)","3fd5a2eb":"results = model.evaluate(X_test, y_test, batch_size = 128, verbose = 0)\nprint (f'Accuracy : {round(results[1]*100, 2)} %')","07a05dc6":"import matplotlib.pyplot as plt\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('LOSS')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'])\nplt.show()\n\n\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('ACCURACY')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'])\nplt.show()   ","6ee75687":"from tensorflow.keras.layers import Embedding, LSTM, Dense, GlobalAveragePooling1D, Dropout\n\nmodel = Sequential() \nmodel.add(Embedding(TOP_WORDS, EMBEDDING_LEN, input_length=MAX_REVIEW_LEN))\nmodel.add(Dropout(0.2)) \nmodel.add(LSTM(100))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(1, activation = 'sigmoid')) \nmodel.compile(loss = 'binary_crossentropy', optimizer = Adam(0.005), metrics = ['accuracy']) \nmodel.summary()\n%time history = model.fit(X_train, y_train, validation_data =(X_test, y_test), epochs=EPOCHS, batch_size=BATCH_SIZE, verbose = 0)","5baacd82":"results = model.evaluate(X_test, y_test, batch_size = 128, verbose = 0)\nprint (f'Accuracy : {round(results[1]*100, 2)} %')","45a3f344":"import matplotlib.pyplot as plt\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('LOSS')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'])\nplt.show()\n\n\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('ACCURACY')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'])\nplt.show()   ","a3a78f4a":"from tensorflow.keras.layers import Embedding, LSTM, Dense, Conv1D, MaxPooling1D\n\nmodel = Sequential() \nmodel.add(Embedding(TOP_WORDS, EMBEDDING_LEN, input_length = MAX_REVIEW_LEN))\nmodel.add(Conv1D(32, (3), activation = 'relu')) \nmodel.add(MaxPooling1D(2)) \nmodel.add(LSTM(100))\nmodel.add(Dense(1, activation = 'sigmoid'))\n\nmodel.compile(loss = 'binary_crossentropy', optimizer = Adam(0.005), metrics = ['accuracy']) \nmodel.summary()\n%time history = model.fit(X_train, y_train, validation_data =(X_test, y_test), epochs=EPOCHS, batch_size=BATCH_SIZE, verbose = 0)","1fdd267f":"results = model.evaluate(X_test, y_test, batch_size = 128, verbose = 0)\nprint (f'Accuracy : {round(results[1]*100, 2)} %')","3c52e16e":"import matplotlib.pyplot as plt\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('LOSS')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'])\nplt.show()\n\n\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('ACCURACY')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'])\nplt.show()   ","2b1cd843":"# Sequence Classification of Movie Reviews\n\nSequence classification is a predictive modeling problem where you have some sequence of inputs over space or time and the task is to predict a category for the sequence.\n\nProblem with sequences is that\n* They can vary in length\n* Can be comprised of very large vocabulary of input symbols\n* May require model to learn long-term contexts or dependencies between input symbols\n\nIMBD movie reviews dataset has review and it's corresponding sentiment. The dataset has 50,000 such observations. We will use this datasets to build the following models and compare which works best for sentiment classification\n\n1. Model 1 : Baseline Model\n2. Model 2 : LSTM with 100 units\n3. Model 3 : LSTM with Dropout\n4. Model 4 : LSTM with CNNs\n","49af47ef":"## Baseline Model\nWe first define the embedding layer which represents each words with 32 length vectors. Next, we define LSTM layer with 100 memory units. Lastly, we use a Dense layer with `sigmoid` activation to classify the sentiment.","2ab69831":"We can observe from the dataset that sentiment label is in textual form. This needs to be converted to numeric. We will use `LabelEncoder` from `sklearn.preprocessing` to encode `positive` and `negative` sentiment to `1` and `0`","dd02e049":"## LSTM with Dropout\nLSTMs are prone to overfitting, for which we can use Dropout. Dropout can be added \n1. To the embedding input layer\n2. Between embedding and LSTM layer\n3. Between LSTM and Dense layer\n4. To the input and recurrent connections of the memory units with the LSTM","91a00059":"### Loading the dataset","215ad3b0":"**Note**\n* All words are converted to lowercase\n* Words like *brutality* and *unflinching* do not feature in tokenized sentence and are replaced with our defined Out of Vocabulary token `<OOV>`\n* punctuations are removed - this could be a problem while extracting meanings of sentences. May not be an issue for sentiment classification\n\n### Train Test Split","6c498849":"Accuracy becomes better with dropout than without for LSTM model","bab636a7":"### Tokenize\nWe will use `Tokenizer` from Keras API. The `Tokenizer` vectorizes the text corpus by converting text to integers (each integer being the index of a token in a dictionary).\nThe dictionary containing word integer mapping can be accessed from `tokenizer.word_index`","75a0041b":"Converting reviews to sequences by fitting tokenizer to these reviews. The resulting sequences will be padded i.e. If the review size is less than `MAX_REVIEW_LEN` parameter, the resulting sequences will get populated with `0` after the sentence","ff834f32":"## LSTMs","746c03aa":"## LSTM with CNN\nConvolutional neural networks excel at learning the spatial structure in input data. The IMDB review data does have a one-dimensional spatial structure in the sequence of words in reviews and the CNN may be able to pick out invariant features for good and bad sentiment. This learned spatial features may then be learned as sequences by an LSTM layer.","7c97af5c":"## Next Steps\n\n1. Trying out different LSTM layers\n2. Experiment with different number of `TOP_WORDS`, `MAX_REVIEW_LEN` for input_data\n3. Try `pre` paddings and truncations while creating sequences\n4. Eperimenting with stacked mulitple convolutional and LSTM layers ","abe79d54":"We can compare the tokenized and orignal sentences using the reversed `word_index`. In the sample below, the first 50 words of first review was tokenized and decoded to get the output strings."}}