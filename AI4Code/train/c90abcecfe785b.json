{"cell_type":{"6b180f7f":"code","88a2e54c":"code","59bb17ce":"code","fa1860e1":"code","8a01565d":"code","b0f48e80":"code","637497f0":"code","4022bc13":"code","be0a87e4":"code","859cfef2":"code","91b294a5":"code","ee864303":"code","ed80f912":"code","fe17ca1e":"code","19196927":"code","306b58f8":"code","ef74c6d8":"code","59ba0c52":"code","9e12513e":"code","f8fa537b":"code","1833e725":"code","fdd7d836":"code","6af09b8d":"code","c9c1550f":"code","ebd63eb4":"code","b6c8577b":"code","6872407d":"code","df331a3e":"code","9e407754":"code","bda51383":"code","b6a89fc4":"code","da8d9cac":"code","8798e1cb":"code","a20acef3":"code","e28d266b":"code","8e8653bd":"code","7f16f291":"markdown","9c238212":"markdown","b55b3dd9":"markdown","1dfabcbd":"markdown","91dc0eb2":"markdown","b9b50648":"markdown","f98eb771":"markdown","4aa46b01":"markdown","7632d86b":"markdown","996eff21":"markdown","3fcfa9f0":"markdown","47cea21e":"markdown","8ac0059a":"markdown","0c775e61":"markdown"},"source":{"6b180f7f":"pip install chart_studio","88a2e54c":"### Data Analysis\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport chart_studio.plotly as py\nimport plotly.graph_objs as go\nimport plotly.express as px\nfrom plotly.offline import iplot\nfrom plotly import subplots\n\nfrom wordcloud import WordCloud,STOPWORDS\nfrom PIL import Image\n\n\n### NPL\nimport re\nimport nltk\n\nfrom nltk.corpus import stopwords\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n    \n\ntry:\n    nltk.data.find('tokenizers\/punkt')\nexcept LookupError:\n    nltk.download('punkt')\ntry:\n    nltk.data.find('corpora\/stopwords')\nexcept LookupError:\n    nltk.download('stopwords')  \ntry:\n    nltk.data.find('corpora\/wordnet')\nexcept LookupError:\n    nltk.download('wordnet')\ntry:\n    nltk.data.find('sentiment\/vader_lexicon.zip')\nexcept LookupError:\n    nltk.download('vader_lexicon')\n    \n\n# Read files are available in the .\/input\nimport os\nprint(os.listdir(\"..\/input\"))","59bb17ce":"# Read the different parts of the script\n\npart1 = pd.read_csv('..\/input\/jldata\/part1.txt', delim_whitespace=True, names=[\"character\",\"dialogue\"] ,header = None)\npart2 = pd.read_csv('..\/input\/jldata\/part2.txt', delim_whitespace=True, names=[\"character\",\"dialogue\"] ,header = None)\npart3 = pd.read_csv('..\/input\/jldata\/part3.txt', delim_whitespace=True, names=[\"character\",\"dialogue\"] ,header = None)\npart4 = pd.read_csv('..\/input\/jldata\/part4.txt', delim_whitespace=True, names=[\"character\",\"dialogue\"] ,header = None)\npart5 = pd.read_csv('..\/input\/jldata\/part5.txt', delim_whitespace=True, names=[\"character\",\"dialogue\"] ,header = None)\npart6 = pd.read_csv('..\/input\/jldata\/part6.txt', delim_whitespace=True, names=[\"character\",\"dialogue\"] ,header = None)\npart7 = pd.read_csv('..\/input\/jldata\/part7.txt', delim_whitespace=True, names=[\"character\",\"dialogue\"] ,header = None)\n","fa1860e1":"# Remove Part title\n\npart1.drop(0,inplace=True)\npart2.drop(0,inplace=True)\npart3.drop(0,inplace=True)\npart4.drop(0,inplace=True)\npart5.drop(0,inplace=True)\npart6.drop(0,inplace=True)\npart7.drop(0,inplace=True)\n\n# Add part number\nnb=1\nfor part in [part1, part2, part3, part4, part5, part6, part7]:\n    part['Part'] = 'Part ' + str(nb)\n    nb += 1\n\n# Merge all parts\npdList = [part1, part2, part3, part4, part5, part6, part7]  # List of your dataframes\ncomplete = pd.concat(pdList)\n","8a01565d":"complete.head()","b0f48e80":"## Merge character alter egos\n## For the heros, keep trace of the alter-ego currently speaking\n\nfor df in [part1, part2, part3, part4, part5, part6, part7, complete]:\n    \n    df['alias'] = df['character']\n    \n    df['character'][(df['character'] == 'Bruce Wayne') | (df['character'] == 'Batman')]  = 'Batman \/ Bruce Wayne'\n    df['character'][(df['character'] == 'Diana Prince') | (df['character'] == 'Wonder Woman')]  = 'Wonder Woman \/ Diana Prince'\n    df['character'][(df['character'] == 'Barry Allen') | (df['character'] == 'The Flash')]  = 'The Flash \/ Barry Allen'\n    df['character'][(df['character'] == 'Arthur Curry') | (df['character'] == 'Aquaman')]  = 'Aquaman \/ Arthur Curry'\n    df['character'][(df['character'] == 'Victor Stone') | (df['character'] == 'Cyborg')]  = 'Victor Stone \/ Cyborg'\n    df['character'][(df['character'] == 'Clark Kent') | (df['character'] == 'Superman')]  = 'Clark Kent \/ Superman'","637497f0":"summary = pd.DataFrame(columns=['Part', 'Lines Count','Line per mn', 'Word Could', 'Word per mn'])\n\ndurations = [37,31,42,31,31,41,20]\ntotal_lenght = 233\n\nnb = 0\nfor df in [part1, part2, part3, part4, part5, part6, part7]:\n    words_count = 0\n    for line in df['dialogue'].str.lower().str.split():\n        words_count += len(line)\n    \n    print(\"PART \" + str(nb+1)+\" :\\nDuration : \" + str(durations[nb]) + \" mn.\\nLines of script : \" + str(len(df)) + \" lines of scripts.\\nWords : \" + str(words_count) + \"\\nIt's an average of \" + str(round(words_count \/ durations[nb], 2)) + \" words and \" + str(round(len(df) \/ durations[nb], 2)) + \" lines per minute.\\n\")\n    \n    summary = summary.append({'Part': 'Part ' + str(nb+1), 'Lines Count': len(df), 'Line per mn': round(len(df) \/ durations[nb], 2),'Word Could': words_count, 'Word per mn': round(words_count \/ durations[nb], 2) }, ignore_index=True)\n\n    nb+=1\n\nwords_count = 0\nfor line in complete['dialogue'].str.lower().str.split():\n    words_count += len(line)\nprint(\"TOTAL MOVIE \" + str(nb+1)+\" :\\nDuration : \" + str(total_lenght) + \" mn.\\nLines of script : \" + str(len(complete)) + \" lines of scripts.\\nWords : \" + str(words_count) + \"\\nIt's an average of : \" + str(round(words_count \/ total_lenght, 2)) + \" words and \"+ str(round(len(complete) \/ total_lenght, 2)) + \" lines per minute.\\n\")\nsummary = summary.append({'Part': 'Total ', 'Lines Count': len(complete), 'Line per mn': round(len(complete) \/ total_lenght, 2),'Word Could': words_count, 'Word per mn': round(words_count \/ total_lenght, 2) }, ignore_index=True)\n\nsummary\n\n","4022bc13":"# Let's remove total for our graph\nsummary = summary.drop(7)\n\n# Print the evolution of speach\nfig = subplots.make_subplots(specs=[[{\"secondary_y\": True}]])\n\nfig.add_trace(go.Scatter(x=summary['Part'], y=summary['Line per mn'],\n                    mode='lines+markers',\n                    name='Lines per minute',\n                    line=dict(color='blue', width=3)))\nfig.add_trace(go.Scatter(x=summary['Part'], y=summary['Word per mn'], \n                    mode='lines+markers',\n                    name='Words per minute',\n                    line=dict(color='red', width=3)), secondary_y=True)\n\nfig['layout'].update(showlegend=True ,height=500,title=\"Evolution of Speaking Time by Part\",paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)')\n\nfig.show()","be0a87e4":"script_part1=pd.DataFrame(part1.character.value_counts()).iloc[:20]\nscript_part2=pd.DataFrame(part2.character.value_counts()).iloc[:20]\nscript_part3=pd.DataFrame(part3.character.value_counts()).iloc[:20]\nscript_part4=pd.DataFrame(part4.character.value_counts()).iloc[:20]\nscript_part5=pd.DataFrame(part5.character.value_counts()).iloc[:20]\nscript_part6=pd.DataFrame(part6.character.value_counts()).iloc[:20]\nscript_part7=pd.DataFrame(part7.character.value_counts()).iloc[:20]\n\nscript_complete=pd.DataFrame(complete.character.value_counts()).iloc[:20]","859cfef2":"bar1 = go.Bar(y=script_part1.character, x=script_part1.index,  marker=dict(color=\"maroon\",line=dict(color='black', width=2)),opacity=0.75)\nbar2 = go.Bar(y=script_part2.character,x=script_part2.index,marker=dict(color=\"blue\",line=dict(color='black', width=2)),opacity=0.75)\nbar3 = go.Bar(y=script_part3.character, x=script_part3.index,marker=dict(color=\"green\",line=dict(color='black', width=2)),opacity=0.75)\nbar4 = go.Bar(y=script_part4.character, x=script_part4.index,marker=dict(color=\"orange\",line=dict(color='black', width=2)),opacity=0.75)\nbar5 = go.Bar(y=script_part5.character, x=script_part5.index,marker=dict(color=\"gray\",line=dict(color='black', width=2)),opacity=0.75)\nbar6 = go.Bar(y=script_part6.character, x=script_part6.index,marker=dict(color=\"darkblue\",line=dict(color='black', width=2)),opacity=0.75)\nbar7 = go.Bar(y=script_part7.character, x=script_part7.index,marker=dict(color=\"crimson\",line=dict(color='black', width=2)),opacity=0.75)\n\nbar8 = go.Bar(y=script_complete.character, x=script_complete.index,marker=dict(color=\"green\",line=dict(color='black', width=2)),opacity=0.75)\n\n\nfig = subplots.make_subplots(rows=8, cols=1,horizontal_spacing=1, subplot_titles=(\"Part 1 : Don't Count On It, Batman\",\n                                                                                  \"Part 2 : The Age of Heroes\",\n                                                                                  \"Part 3 : Beloved Mother, Beloved Son\",\n                                                                                  \"Part 4 : Change Machine\",\n                                                                                  \"Part 5 : All The King's Horses\",\n                                                                                  \"Part 6 : Something Darker\",\n                                                                                  \"Part 7 : A Father Twice Over\",\n                                                                                  \"Entire Script\"))\n \nfig.append_trace(bar1, 1, 1)\nfig.append_trace(bar2, 2, 1)\nfig.append_trace(bar3, 3, 1)\nfig.append_trace(bar4, 4, 1)\nfig.append_trace(bar5, 5, 1)\nfig.append_trace(bar6, 6, 1)\nfig.append_trace(bar7, 7, 1)\nfig.append_trace(bar8, 8, 1)\n\nfig['layout'].update(showlegend=False ,height=2500,title=\"Number of Dialogues by Character\",paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)')\n\n\niplot(fig)","91b294a5":"sia = SentimentIntensityAnalyzer()\nsia.polarity_scores(\"Wow, NLTK is really powerful!\")\n\nnew_words = {\n    'steppenwolf': -3.0,\n    'darkseid': -3.0,\n    'desaad': -3.0,\n    'parademons': -2.5\n}\nsia.lexicon.update(new_words)","ee864303":"complete_sentiments = complete\n\ncomplete_sentiments['scores'] = complete_sentiments['dialogue'].apply(lambda dialogue: sia.polarity_scores(dialogue))\n\ncomplete_sentiments['compound'] = complete_sentiments['scores'].apply(lambda score_dict: score_dict['compound'])\ncomplete_sentiments['comp_sentiment'] = complete_sentiments['compound'].apply(lambda c: 'positive' if c > 0.1 else 'negative' if c < 0 else 'neutral')\n\n\n#complete_sentiments[(complete_sentiments['comp_sentiment'] == 'negative') & (complete_sentiments['character'] == 'Wonder Woman \/ Diana Prince')].head(40)\n","ed80f912":"# Evolution of sentiments\nsentiments_by_part = complete_sentiments.groupby(['Part'])['comp_sentiment'].value_counts().reset_index(name='count_sentiment')\nsentiments_by_part = pd.merge(sentiments_by_part, summary, on=\"Part\")\n\nsentiments_by_part['count_sentiment_on_lines'] = sentiments_by_part['count_sentiment'] \/ sentiments_by_part['Lines Count']\n\n# Print the evolution of sentiments\nfig = go.Figure()\n\n\nfig.add_trace(go.Scatter(x=sentiments_by_part[sentiments_by_part['comp_sentiment'] == 'negative']['Part'], y=sentiments_by_part[sentiments_by_part['comp_sentiment'] == 'negative']['count_sentiment_on_lines'],\n                    mode='lines+markers',\n                    name='Negative',\n                    line=dict(color='red', width=1)))\n\nfig.add_trace(go.Scatter(x=sentiments_by_part[sentiments_by_part['comp_sentiment'] == 'neutral']['Part'], y=sentiments_by_part[sentiments_by_part['comp_sentiment'] == 'neutral']['count_sentiment_on_lines'],\n                    mode='lines+markers',\n                    name='Neutral',\n                    line=dict(color='lightgray', width=1)))\n\nfig.add_trace(go.Scatter(x=sentiments_by_part[sentiments_by_part['comp_sentiment'] == 'positive']['Part'], y=sentiments_by_part[sentiments_by_part['comp_sentiment'] == 'positive']['count_sentiment_on_lines'],\n                    mode='lines+markers',\n                    name='Positive',\n                    line=dict(color='blue', width=1)))\n\nfig['layout'].update(showlegend=True ,height=500,title=\"Evolution of Sentiments\",paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)')\n\nfig.show()\n","fe17ca1e":"characters = pd.DataFrame()\n\nscript_part1=pd.DataFrame(part1.alias.value_counts().rename(index=\"Lines\")).iloc[:20]\nscript_part2=pd.DataFrame(part2.alias.value_counts().rename(index=\"Lines\")).iloc[:20]\nscript_part3=pd.DataFrame(part3.alias.value_counts().rename(index=\"Lines\")).iloc[:20]\nscript_part4=pd.DataFrame(part4.alias.value_counts().rename(index=\"Lines\")).iloc[:20]\nscript_part5=pd.DataFrame(part5.alias.value_counts().rename(index=\"Lines\")).iloc[:20]\nscript_part6=pd.DataFrame(part6.alias.value_counts().rename(index=\"Lines\")).iloc[:20]\nscript_part7=pd.DataFrame(part7.alias.value_counts().rename(index=\"Lines\")).iloc[:20]\n\nnb = 1\nfor part in [script_part1, script_part2, script_part3, script_part4, script_part5, script_part6, script_part7]:\n    part['Part'] = 'Part ' + str(nb)\n    characters = pd.concat([characters, part])\n    nb += 1\n\n\ncharacters['Alias'] = characters.index\ncharacters.reset_index(drop=True, inplace=True)","19196927":"# Extract important words from the dialogue\n\nexclude_words = ['okay', 'got', 'know', 'one']\ndescription_list=[]\n\nfor description in complete.dialogue:\n    description=re.sub(\"[^a-zA-Z]\", \" \", description)\n    description=description.lower()\n    description=nltk.word_tokenize(description)\n    \n    # Exclude stopwords and unwanteds words\n    description=[word for word in description if not word in set(stopwords.words(\"english\"))]\n    description=[word for word in description if not word in exclude_words]\n    \n    # Lemmatize to convert to base form\n    lemma=nltk.WordNetLemmatizer()\n    description=[lemma.lemmatize(word) for word in description]\n    description=\" \".join(description)\n    description_list.append(description)\n\ncomplete[\"new_script\"]=description_list","306b58f8":"# Print the evolution of speach\nfig = go.Figure()\n\n\nfig.add_trace(go.Scatter(x=characters[characters['Alias'] == 'Bruce Wayne']['Part'], y=characters[characters['Alias'] == 'Bruce Wayne']['Lines'],\n                    mode='lines+markers',\n                    name='Bruce Wayne',\n                    line=dict(color='lightgrey', width=1), stackgroup='one'))\nfig.add_trace(go.Scatter(x=characters[characters['Alias'] == 'Batman']['Part'], y=characters[characters['Alias'] == 'Batman']['Lines'],\n                    mode='lines+markers',\n                    name='Batman',\n                    line=dict(color='black', width=1), stackgroup='one'))\n\nfig['layout'].update(showlegend=True ,height=500,title=\"Evolution of Batman \/ Bruce Wayne's lines\",paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)')\n\nfig.show()\n","ef74c6d8":"batman=complete[complete.character==\"Batman \/ Bruce Wayne\"]\nwave_mask= np.array(Image.open(\"..\/input\/jlwordclouds\/batman.png\"))\n\nplt.subplots(figsize=(15,15))\nstopwords= set(STOPWORDS)\nwordcloud = WordCloud(mask=wave_mask,background_color=\"black\",contour_width=4,\n                      contour_color=\"darkgrey\",colormap=\"gist_gray\",\n                      stopwords=stopwords,\n                      width=950,height=950\n                      ).generate(\" \".join(batman.new_script))\n\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('batman.png')\n\nplt.show()\n","59ba0c52":"character_sentiments = pd.DataFrame(complete_sentiments[complete_sentiments['character'] == 'Batman \/ Bruce Wayne'].comp_sentiment.value_counts().reset_index(name='count')).rename(columns={\"index\": \"sentiment\"})\n\nfig = px.pie(character_sentiments, values='count', names='sentiment', title=\"Batman's sentiments\",\n             color='sentiment', \n             color_discrete_map={'Thur':'lightcyan',\n                                 'neutral':'papayawhip',\n                                 'positive':'green',\n                                 'negative':'firebrick'},\n            height=450, width=450)\n\nfig.update_traces(textposition='inside', textinfo='percent+label')\n\nfig['layout'].update(paper_bgcolor='rgb(248, 248, 255)', plot_bgcolor='rgb(248, 248, 255)')\n                     \nfig.show()","9e12513e":"# Add at least 1 value with 0 for Diana in Part 1 to diplay the fig in order\ndata = []\ndata.insert(0, {'Part': 'Part 1', 'Lines': 0, 'Alias':'Diana Prince' })\n\ncharacters = pd.concat([pd.DataFrame(data), characters], ignore_index=True)\n\n# Print the evolution of speach\nfig = go.Figure()\n\n\nfig.add_trace(go.Scatter(x=characters[characters['Alias'] == 'Diana Prince']['Part'], y=characters[characters['Alias'] == 'Diana Prince']['Lines'],\n                    mode='lines+markers',\n                    name='Diana Prince',\n                    line=dict(color='lightgrey', width=1), stackgroup='one'))\nfig.add_trace(go.Scatter(x=characters[characters['Alias'] == 'Wonder Woman']['Part'], y=characters[characters['Alias'] == 'Wonder Woman']['Lines'],\n                    mode='lines+markers',\n                    name='Wonder Woman',\n                    line=dict(color='goldenrod', width=1), stackgroup='one'))\n\nfig['layout'].update(showlegend=True ,height=500,title=\"Evolution of Wonder Woman \/ Diana Prince's lines\",paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)')\n\nfig.show()\n","f8fa537b":"wonder_woman=complete[complete.character==\"Wonder Woman \/ Diana Prince\"]\nwave_mask = np.array(Image.open(\"..\/input\/jlwordclouds\/wonderwoman.png\"))\n\n\nplt.subplots(figsize=(15,15))\nstopwords= set(STOPWORDS)\nwordcloud = WordCloud(mask=wave_mask,background_color=\"black\",contour_width=2,\n                      contour_color=\"palegoldenrod\",colormap=\"YlOrRd\",\n                      stopwords=stopwords,   \n                      width=950,height=950\n                         ).generate(\" \".join(wonder_woman.new_script))\n\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('wonderwoman.png')\n\nplt.show()","1833e725":"character_sentiments = pd.DataFrame(complete_sentiments[complete_sentiments['character'] == 'Wonder Woman \/ Diana Prince'].comp_sentiment.value_counts().reset_index(name='count')).rename(columns={\"index\": \"sentiment\"})\n\nfig = px.pie(character_sentiments, values='count', names='sentiment', title=\"Wonder Woman's sentiments\",\n             color='sentiment', \n             color_discrete_map={'Thur':'lightcyan',\n                                 'neutral':'papayawhip',\n                                 'positive':'green',\n                                 'negative':'firebrick'},\n            height=450, width=450)\n\nfig.update_traces(textposition='inside', textinfo='percent+label')\n\nfig['layout'].update(paper_bgcolor='rgb(248, 248, 255)', plot_bgcolor='rgb(248, 248, 255)')\n                     \nfig.show()","fdd7d836":"# Print the evolution of speach\nfig = go.Figure()\n\n\nfig.add_trace(go.Scatter(x=characters[characters['Alias'] == 'Barry Allen']['Part'], y=characters[characters['Alias'] == 'Barry Allen']['Lines'],\n                    mode='lines+markers',\n                    name='Barry Allen',\n                    line=dict(color='lightgrey', width=1), stackgroup='one'))\nfig.add_trace(go.Scatter(x=characters[characters['Alias'] == 'The Flash']['Part'], y=characters[characters['Alias'] == 'The Flash']['Lines'],\n                    mode='lines+markers',\n                    name='The Flash',\n                    line=dict(color='firebrick', width=1), stackgroup='one'))\n\nfig['layout'].update(showlegend=True ,height=500,title=\"Evolution of The Flash \/ Barry Allen's lines\",paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)')\n\nfig.show()\n","6af09b8d":"flash=complete[complete.character==\"The Flash \/ Barry Allen\"]\nwave_mask = np.array(Image.open(\"..\/input\/jlwordclouds\/flash.png\"))\n\nplt.subplots(figsize=(15,15))\nstopwords= set(STOPWORDS)\nwordcloud = WordCloud(mask=wave_mask,background_color=\"black\",contour_width=2,\n                      contour_color=\"darkred\",colormap=\"Oranges\",\n                      stopwords=stopwords,   \n                      width=950, height=950\n                     ).generate(\" \".join(flash.new_script))\n\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('flash.png')\n\nplt.show()","c9c1550f":"character_sentiments = pd.DataFrame(complete_sentiments[complete_sentiments['character'] == 'The Flash \/ Barry Allen'].comp_sentiment.value_counts().reset_index(name='count')).rename(columns={\"index\": \"sentiment\"})\n\nfig = px.pie(character_sentiments, values='count', names='sentiment', title=\"Flash's sentiments\",\n             color='sentiment', \n             color_discrete_map={'Thur':'lightcyan',\n                                 'neutral':'papayawhip',\n                                 'positive':'green',\n                                 'negative':'firebrick'},\n            height=450, width=450)\n\nfig.update_traces(textposition='inside', textinfo='percent+label')\n\nfig['layout'].update(paper_bgcolor='rgb(248, 248, 255)', plot_bgcolor='rgb(248, 248, 255)')\n                     \nfig.show()","ebd63eb4":"# Print the evolution of speach\nfig = go.Figure()\n\n\nfig.add_trace(go.Scatter(x=characters[characters['Alias'] == 'Arthur Curry']['Part'], y=characters[characters['Alias'] == 'Arthur Curry']['Lines'],\n                    mode='lines+markers',\n                    name='Arthur Curry',\n                    line=dict(color='lightgrey', width=1), stackgroup='one'))\nfig.add_trace(go.Scatter(x=characters[characters['Alias'] == 'Aquaman']['Part'], y=characters[characters['Alias'] == 'Aquaman']['Lines'],\n                    mode='lines+markers',\n                    name='Aquaman',\n                    line=dict(color='navy', width=1), stackgroup='one'))\n\nfig['layout'].update(showlegend=True ,height=500,title=\"Evolution of Aquaman \/ Arthur Curry's lines\",paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)')\n\nfig.show()\n","b6c8577b":"aquaman=complete[complete.character==\"Aquaman \/ Arthur Curry\"]\nwave_mask = np.array(Image.open(\"..\/input\/jlwordclouds\/aquaman.png\"))\n\nplt.subplots(figsize=(15,15))\nstopwords= set(STOPWORDS)\nwordcloud = WordCloud(mask=wave_mask,background_color=\"black\",contour_width=2,\n                      contour_color=\"darkblue\",colormap=\"Blues\",\n                      stopwords=stopwords,   \n                      width=950, height=950\n                     ).generate(\" \".join(aquaman.new_script))\n\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('aquaman.png')\n\nplt.show()","6872407d":"character_sentiments = pd.DataFrame(complete_sentiments[complete_sentiments['character'] == 'Aquaman \/ Arthur Curry'].comp_sentiment.value_counts().reset_index(name='count')).rename(columns={\"index\": \"sentiment\"})\n\nfig = px.pie(character_sentiments, values='count', names='sentiment', title=\"Aquaman's sentiments\",\n             color='sentiment', \n             color_discrete_map={'Thur':'lightcyan',\n                                 'neutral':'papayawhip',\n                                 'positive':'green',\n                                 'negative':'firebrick'},\n            height=450, width=450)\n\nfig.update_traces(textposition='inside', textinfo='percent+label')\n\nfig['layout'].update(paper_bgcolor='rgb(248, 248, 255)', plot_bgcolor='rgb(248, 248, 255)')\n                     \nfig.show()","df331a3e":"# Print the evolution of speach\nfig = go.Figure()\n\n\nfig.add_trace(go.Scatter(x=characters[characters['Alias'] == 'Victor Stone']['Part'], y=characters[characters['Alias'] == 'Victor Stone']['Lines'],\n                    mode='lines+markers',\n                    name='Victor Stone',\n                    line=dict(color='lightgrey', width=1), stackgroup='one'))\nfig.add_trace(go.Scatter(x=characters[characters['Alias'] == 'Cyborg']['Part'], y=characters[characters['Alias'] == 'Cyborg']['Lines'],\n                    mode='lines+markers',\n                    name='Cyborg',\n                    line=dict(color='darkgray', width=1), stackgroup='one'))\n\nfig['layout'].update(showlegend=True ,height=500,title=\"Evolution of Cyborg \/ Victor Stone's lines\",paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)')\n\nfig.show()\n","9e407754":"cyborg=complete[complete.character==\"Victor Stone \/ Cyborg\"]\nwave_mask = np.array(Image.open(\"..\/input\/jlwordclouds\/cyborg.png\"))\n\nplt.subplots(figsize=(15,15))\nstopwords= set(STOPWORDS)\nwordcloud = WordCloud(mask=wave_mask,background_color=\"black\",contour_width=2,\n                      contour_color=\"gray\",colormap=\"RdGy\",\n                      stopwords=stopwords,   \n                      width=950, height=950\n                     ).generate(\" \".join(cyborg.new_script))\n\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('cyborg.png')\n\nplt.show()","bda51383":"character_sentiments = pd.DataFrame(complete_sentiments[complete_sentiments['character'] == 'Victor Stone \/ Cyborg'].comp_sentiment.value_counts().reset_index(name='count')).rename(columns={\"index\": \"sentiment\"})\n\nfig = px.pie(character_sentiments, values='count', names='sentiment', title=\"Cyborg's sentiments\",\n             color='sentiment', \n             color_discrete_map={'Thur':'lightcyan',\n                                 'neutral':'papayawhip',\n                                 'positive':'green',\n                                 'negative':'firebrick'},\n            height=450, width=450)\n\nfig.update_traces(textposition='inside', textinfo='percent+label')\n\nfig['layout'].update(paper_bgcolor='rgb(248, 248, 255)', plot_bgcolor='rgb(248, 248, 255)')\n                     \nfig.show()","b6a89fc4":"# Print the evolution of speach\nfig = go.Figure()\n\n\nfig.add_trace(go.Scatter(x=characters[characters['Alias'] == 'Clark Kent']['Part'], y=characters[characters['Alias'] == 'Clark Kent']['Lines'],\n                    mode='lines+markers',\n                    name='Clark Kent',\n                    line=dict(color='lightgrey', width=1), stackgroup='one'))\nfig.add_trace(go.Scatter(x=characters[characters['Alias'] == 'Superman']['Part'], y=characters[characters['Alias'] == 'Superman']['Lines'],\n                    mode='lines+markers',\n                    name='Superman',\n                    line=dict(color='darkred', width=1), stackgroup='one'))\n\nfig['layout'].update(showlegend=True ,height=500,title=\"Evolution of Superman \/ Clark Kent's lines\",paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)')\n\nfig.show()\n","da8d9cac":"superman=complete[complete.character==\"Clark Kent \/ Superman\"]\nwave_mask = np.array(Image.open(\"..\/input\/jlwordclouds\/superman.png\"))\n\nplt.subplots(figsize=(15,15))\nstopwords= set(STOPWORDS)\nwordcloud = WordCloud(mask=wave_mask,background_color=\"black\",contour_width=2,\n                      contour_color=\"darkred\",colormap=\"Reds\",\n                      stopwords=stopwords,   \n                      width=950, height=950\n                     ).generate(\" \".join(superman.new_script))\n\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('superman.png')\n\nplt.show()","8798e1cb":"character_sentiments = pd.DataFrame(complete_sentiments[complete_sentiments['character'] == 'Clark Kent \/ Superman'].comp_sentiment.value_counts().reset_index(name='count')).rename(columns={\"index\": \"sentiment\"})\n\nfig = px.pie(character_sentiments, values='count', names='sentiment', title=\"Superman's sentiments\",\n             color='sentiment', \n             color_discrete_map={'Thur':'lightcyan',\n                                 'neutral':'papayawhip',\n                                 'positive':'green',\n                                 'negative':'firebrick'},\n            height=450, width=450)\n\nfig.update_traces(textposition='inside', textinfo='percent+label')\n\nfig['layout'].update(paper_bgcolor='rgb(248, 248, 255)', plot_bgcolor='rgb(248, 248, 255)')\n                     \nfig.show()","a20acef3":"# Print the evolution of speach\nfig = go.Figure()\n\n\nfig.add_trace(go.Scatter(x=characters[characters['Alias'] == 'Steppenwolf']['Part'], y=characters[characters['Alias'] == 'Steppenwolf']['Lines'],\n                    mode='lines+markers',\n                    name='Steppenwolf',\n                    line=dict(color='saddlebrown', width=1), stackgroup='one'))\n\nfig['layout'].update(showlegend=True ,height=500,title=\"Evolution of Steppenwolf's lines\",paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)')\n\nfig.show()\n","e28d266b":"steppenwolf=complete[complete.character==\"Steppenwolf\"]\nwave_mask = np.array(Image.open(\"..\/input\/jlwordclouds\/steppenwolf.png\"))\n\nplt.subplots(figsize=(15,15))\nstopwords= set(STOPWORDS)\nwordcloud = WordCloud(mask=wave_mask,background_color=\"black\",contour_width=2,\n                      contour_color=\"saddlebrown\",colormap=\"copper\",\n                      stopwords=stopwords,   \n                      width=950, height=950\n                     ).generate(\" \".join(steppenwolf.new_script))\n\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('steppenwolf.png')\n\nplt.show()","8e8653bd":"character_sentiments = pd.DataFrame(complete_sentiments[complete_sentiments['character'] == 'Steppenwolf'].comp_sentiment.value_counts().reset_index(name='count')).rename(columns={\"index\": \"sentiment\"})\n\nfig = px.pie(character_sentiments, values='count', names='sentiment', title=\"Steppenwolf's sentiments\",\n             color='sentiment', \n             color_discrete_map={'Thur':'lightcyan',\n                                 'neutral':'papayawhip',\n                                 'positive':'green',\n                                 'negative':'firebrick'},\n            height=450, width=450)\n\nfig.update_traces(textposition='inside', textinfo='percent+label')\n\nfig['layout'].update(paper_bgcolor='rgb(248, 248, 255)', plot_bgcolor='rgb(248, 248, 255)')\n                     \nfig.show()","7f16f291":"## 2.2. Analysis by Character","9c238212":"Zack Snyder's Justice League was just released on March 18, 2021. This notebook is a quick data-analysis of the movie script, available on <a href=\"https:\/\/transcripts.fandom.com\/wiki\/Zack_Snyder's_Justice_League_(2021)\">transcript wiki<\/a>\n\nA complete description of this notebook, and some interpretations are <a href=\"https:\/\/medium.com\/@davidjmartins\/data-analysis-nlp-on-zack-snyders-justice-league-2b1fc9d63848\">available on medium<\/a>.","b55b3dd9":"## Wonder Woman \/ Diana Prince","1dfabcbd":"## Steppenwolf","91dc0eb2":"### Sentiment Analysis","b9b50648":"## 2.1. Global Analysis","f98eb771":"# 1. Data Preparation","4aa46b01":"## Batman \/ Bruce Wayne","7632d86b":"## Superman \/ Clark Kent","996eff21":"## Cyborg \/ Victor Stone","3fcfa9f0":"## The Flash \/ Barry Allen","47cea21e":"# Introduction","8ac0059a":"# 2. Analysis","0c775e61":"## Aquaman \/ Arthur Curry"}}