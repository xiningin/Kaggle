{"cell_type":{"135c2769":"code","cd288e0c":"code","9bde35b2":"code","1f065b3a":"code","b83f7412":"code","a86a2969":"code","0b123776":"code","4c4f4f71":"code","7b981bd2":"code","f8bd79f8":"code","7cc30052":"markdown","40a943c9":"markdown","105136c7":"markdown","09fe326b":"markdown","083070a1":"markdown","167ea176":"markdown"},"source":{"135c2769":"import pandas as pd\nimport numpy as np\nimport cv2\nimport pydicom\nimport os\nimport sys\nimport glob2\nimport shutil\n\nfrom PIL import Image\nfrom matplotlib import pyplot as plt\n\nsys.path.append('..\/input\/siim-acr-pneumothorax-segmentation\/')\nfrom mask_functions import rle2mask\n\n\nprint(os.listdir(\"..\/input\"))","cd288e0c":"data_path = '..\/input\/siim-acr-pneumothorax-segmentation-data'\ntrain_path = os.path.join(data_path, 'pneumothorax\/dicom-images-train')\ntest_path = os.path.join(data_path, 'pneumothorax\/dicom-images-test')\n\ntrain_rle_path = os.path.join(data_path, 'pneumothorax\/train-rle.csv')\nannotation = pd.read_csv(train_rle_path)\nannotation.head(10)","9bde35b2":"imageId = annotation['ImageId']\nannotation = annotation.rename(columns={' EncodedPixels': 'EncodedPixels'})\nencodedPixels = annotation['EncodedPixels']","1f065b3a":"dataset_path = '.\/dataset'\ntrain_new_path = os.path.join(dataset_path, 'dicom-images-train')\ntest_new_path = os.path.join(dataset_path, 'dicom-images-test')\nif not os.path.isdir(dataset_path):\n    os.mkdir(dataset_path)\nif not os.path.isdir(train_new_path):\n    os.mkdir(train_new_path)\nif not os.path.isdir(test_new_path):\n    os.mkdir(test_new_path)\n\nfor filename in glob2.glob('{}\/**\/*.dcm'.format(train_path)):\n    fname = str(filename).split('\/')[-1]\n#     print(fname)\n    shutil.copy(str(filename), os.path.join(train_new_path, fname))\n\nfor filename in glob2.glob('{}\/**\/*.dcm'.format(test_path)):\n    fname = str(filename).split('\/')[-1]\n#     print(fname)\n    shutil.copy(str(filename), os.path.join(test_new_path, fname))\n    \nprint(\"dicom-images-train \", len(os.listdir(train_new_path)))\nprint(\"dicom-images-test  \", len(os.listdir(test_new_path)))","b83f7412":"duplicate_data = annotation[imageId.duplicated()]\nunique_data = duplicate_data['ImageId'].unique()\nexcept_duplicate_data = imageId.unique()\n\nprint(\"num of annotation data   :\", len(annotation))\nprint(\"num of duplicate data    :\", len(duplicate_data))\nprint(\"num of unique data       :\", len(unique_data))\nprint(\"num of except duplicate  :\", len(except_duplicate_data))","a86a2969":"start_index = 61\nnum_output = 10\nfig, ax = plt.subplots(2, num_output, figsize=(30,10))\n\nfor i in range(num_output):\n    index = i\n    index += start_index\n    ds = pydicom.read_file(os.path.join(train_new_path, imageId[index] + '.dcm'))\n    img = ds.pixel_array\n    img_men = Image.fromarray(img)\n    print('Index {}, '.format(index) + imageId[index])\n    \n    if encodedPixels[index].strip() != '-1':\n        rleToMask = rle2mask(\n            rle=encodedPixels[index],\n            width=img.shape[0],\n            height=img.shape[1]\n        )\n        ax[0][i].imshow(img_men, cmap=plt.cm.bone)\n        ax[0][i].imshow(rleToMask.astype(np.bool), alpha=0.4, cmap=\"Blues\")\n        ax[0][i].set_title('Index: {}'.format(index))\n        \n    elif encodedPixels[index].strip() == '-1':\n        mask_0 = np.zeros((img.shape[:2]))\n        ax[0][i].imshow(mask_0.astype(np.bool))\n        ax[0][i].set_title('Index: {}'.format(index)) \n    \ncheck_data = None\ntemp_mask = np.zeros((1024, 1024), dtype=np.bool)\nfor i in range(num_output):\n    index = i\n    index += start_index\n    ds = pydicom.read_file(os.path.join(train_new_path, imageId[index] + '.dcm'))\n    img = ds.pixel_array\n    img_men = Image.fromarray(img)\n    \n    if encodedPixels[index].strip() != '-1':\n        rleToMask = rle2mask(\n            rle=encodedPixels[index],\n            width=img.shape[0],\n            height=img.shape[1]\n        )\n        if check_data == imageId[index]:\n            temp_mask += rleToMask\n            ax[1][i].imshow(temp_mask.astype(np.bool))\n        else:\n            temp_mask = rleToMask\n            ax[1][i].imshow(rleToMask.astype(np.bool))\n            \n    elif encodedPixels[index].strip() == '-1':\n        mask_0 = np.zeros((img.shape[:2]))\n        temp_mask = mask_0\n        ax[1][i].imshow(mask_0.astype(np.bool))\n        \n    check_data = imageId[index]\n    \nplt.show()","0b123776":"train_mask_path = os.path.join(dataset_path, 'mask-images-train')\ntest_mask_path = os.path.join(dataset_path, 'mask-images-test')\nif not os.path.isdir(train_mask_path):\n    os.mkdir(train_mask_path)\nif not os.path.isdir(test_mask_path):\n    os.mkdir(test_mask_path)\n\ncheck_data = None\ntemp_mask = np.zeros((1024, 1024))\nfor i in range(len(imageId)):\n    if encodedPixels[i].strip() != '-1':\n        ds = pydicom.read_file(os.path.join(train_new_path, imageId[i] + '.dcm'))\n        img = ds.pixel_array\n        img_mem = Image.fromarray(img)\n        \n        rleToMask = rle2mask(\n            rle=encodedPixels[i],\n            width=img.shape[0],\n            height=img.shape[1]\n        )\n        if check_data == imageId[i]:\n            temp_mask += rleToMask\n            cv2.imwrite(train_mask_path + '\/{}_mask.png'.format(imageId[i]), temp_mask.astype('int32'))\n        else:\n            temp_mask = rleToMask\n            cv2.imwrite(train_mask_path + '\/{}_mask.png'.format(imageId[i]), rleToMask.astype('int32'))\n        \n    elif encodedPixels[i].strip() == '-1':\n        ds = pydicom.read_file(os.path.join(train_new_path, imageId[i] + '.dcm'))\n        img = ds.pixel_array\n        img_mem = Image.fromarray(img)\n        \n        mask_0 = np.zeros((img.shape[:2]))\n        temp_mask = mask_0\n        cv2.imwrite(train_mask_path + '\/{}_mask.png'.format(imageId[i]), mask_0.astype('int32'))\n        \n    check_data = imageId[i]\n        \nprint(\"mask-images-train\", len(os.listdir(train_mask_path)))","4c4f4f71":"print(os.listdir(dataset_path))\nprint('dicom-images-train ', len(os.listdir(train_new_path)))\nprint('dicom-images-test  ', len(os.listdir(test_new_path)))\nprint('mask-images-train  ', len(os.listdir(train_mask_path)))","7b981bd2":"start_index = 0\nnum_output = 10\nfig, ax = plt.subplots(3, num_output, figsize=(30,10))\n\nfor i in range(num_output):\n    index = i\n    index += start_index\n    \n    ds = pydicom.read_file(os.path.join(train_new_path, imageId[index] + '.dcm'))\n    img = ds.pixel_array\n    ori_img = Image.fromarray(img)\n    ax[0][i].imshow(ori_img)\n    ax[0][i].set_title('Index: {}'.format(index))\n    \nfor i in range(num_output):\n    index = i\n    index += start_index\n    \n    ds = pydicom.read_file(os.path.join(train_new_path, imageId[index] + '.dcm'))\n    img = ds.pixel_array\n    img_men = Image.fromarray(img)\n    if encodedPixels[index].strip() != '-1':\n        rleToMask = rle2mask(\n            rle=encodedPixels[index],\n            width=img.shape[0],\n            height=img.shape[1]\n        )\n        ax[1][i].imshow(img_men, cmap=plt.cm.bone)\n        ax[1][i].imshow(rleToMask, alpha=0.4, cmap=\"Blues\")\n        ax[1][i].set_title('Index: {}'.format(index)) \n        \n    elif encodedPixels[index].strip() == '-1':\n        mask_0 = np.zeros((img.shape[:2]))\n        mask_0 = mask_0\n        ax[1][i].imshow(mask_0.astype(np.bool))\n        ax[1][i].set_title('Index: {}'.format(index)) \n    \nfor i in range(num_output):\n    index = i\n    index += start_index\n    \n    mask_img = cv2.imread(os.path.join(train_mask_path, imageId[index] + '_mask.png'))\n    ax[2][i].imshow(mask_img)\n    ax[2][i].set_title('Index: {}'.format(index))\n    \nprint(annotation[start_index : start_index + num_output])\n    \nplt.show()","f8bd79f8":"! rm -rf dataset","7cc30052":"# Create mask images","40a943c9":"# Check the duplicate data","105136c7":"# Training set visualization","09fe326b":"# Merge duplicate data","083070a1":"# Merge images and train\/test split","167ea176":"# Check the training data"}}