{"cell_type":{"c3c6b41f":"code","30a40968":"code","c15b46e6":"code","958e3fc6":"code","352c2a95":"code","c9f9b662":"code","e70bf582":"code","6abc806d":"code","62e80c6c":"code","768026c4":"code","66ee540d":"code","61949d67":"code","3d2b4e59":"code","8b0f4ba2":"code","2cf512d4":"code","cd91418d":"code","2ac8de70":"code","8350049f":"code","864cc730":"code","0ad399bb":"code","6da20f3b":"code","c436f825":"code","012bdf5c":"code","28cf3f59":"code","a6cc9092":"code","da24d69b":"code","b77d74fe":"code","127f8328":"code","b6e50e3e":"code","a6e6bf6b":"code","2cae3711":"code","68789f50":"code","ed0d2eaf":"code","1c59e27b":"code","9d5cba00":"code","63a72d8f":"markdown","fb2c091c":"markdown","02132a4e":"markdown","fbe2b0a6":"markdown","4042dee7":"markdown","0f8684b7":"markdown","9c35f977":"markdown","bf5c6a32":"markdown","d6231dbf":"markdown","686bef7f":"markdown","8195a5ac":"markdown","3439044b":"markdown"},"source":{"c3c6b41f":"import numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')","30a40968":"df = pd.read_csv('..\/input\/paris-housing-classification\/ParisHousingClass.csv')","c15b46e6":"df.head()","958e3fc6":"df.shape","352c2a95":"df.info()","c9f9b662":"df.isnull().sum()","e70bf582":"df.describe()","6abc806d":"background_color = '#F8EDF4'","62e80c6c":"fig = plt.figure(figsize=(14, 6))\ngs = fig.add_gridspec(1, 2)\ngs.update(wspace=0.3)\n\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\n\naxes = [ax0, ax1]\nfig.patch.set_facecolor(background_color)\n\n\n# Title\nax0.text(0.5, 0.5, 'Countplot of Category\\n____________',\n        horizontalalignment='center',\n        verticalalignment='center',\n        fontsize=18, fontfamily='serif', fontweight='bold')\nax0.set_xticklabels([])\nax0.set_yticklabels([])\nax0.tick_params(left=False, bottom=False)\nax0.spines['bottom'].set_visible(False)\n\n\n# Graph\nsns.countplot(x='category', data=df, ax=ax1, palette='spring_r')\nax1.grid(color='#000000', linestyle=':', axis='y', zorder=0, dashes=(1,5))\nax1.set_xlabel('')\nax1.set_ylabel('')\n\n# Settings\nfor ax in axes:\n    ax.set_facecolor(background_color)\n    for s in ['top', 'right', 'left']:\n        ax.spines[s].set_visible(False)","768026c4":"df['category'].value_counts()","66ee540d":"fig = plt.figure(figsize=(16, 5))\ngs = fig.add_gridspec(1, 3)\ngs.update(hspace=0.2, wspace=0.3)\n\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\nax2 = fig.add_subplot(gs[0, 2])\n\naxes = [ax0, ax1, ax2]\nfig.patch.set_facecolor(background_color)\n\n\n# Title\nax0.text(0.5, 0.5, \"Countplot of 'hasYard'\\n_________________\",\n        horizontalalignment='center',\n        verticalalignment='center',\n        fontsize=18, fontweight='bold', fontfamily='serif')\nax0.set_xticklabels([])\nax0.set_yticklabels([])\nax0.tick_params(left=False, bottom=False)\nax0.spines['bottom'].set_visible(False)\n\n# Graph1\nsns.countplot(x='hasYard', data=df, ax=ax1, palette='spring_r')\nax1.grid(color='#000000', linestyle=':', axis='y', zorder=0, dashes=(1,5))\nax1.set_xlabel('')\nax1.set_ylabel('')\n\n# Graph2\nsns.countplot(x='hasYard', data=df, hue='category', ax=ax2, palette='spring_r')\nax2.grid(color='#000000', linestyle=':', axis='y', zorder=0, dashes=(1,5))\nax2.set_xlabel('')\nax2.set_ylabel('')\n\n\n# Settings\nfor ax in axes:\n    ax.set_facecolor(background_color)\n    for s in ['top', 'right', 'left']:\n        ax.spines[s].set_visible(False)","61949d67":"pd.crosstab(df['category'], df['hasYard'], margins=True).style.background_gradient(cmap=\"Wistia\")","3d2b4e59":"fig = plt.figure(figsize=(16, 5))\ngs = fig.add_gridspec(1, 3)\ngs.update(hspace=0.2, wspace=0.3)\n\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\nax2 = fig.add_subplot(gs[0, 2])\n\naxes = [ax0, ax1, ax2]\nfig.patch.set_facecolor(background_color)\n\n\n# Title\nax0.text(0.5, 0.5, \"Countplot of 'hasPool'\\n_________________\",\n        horizontalalignment='center',\n        verticalalignment='center',\n        fontsize=18, fontweight='bold', fontfamily='serif')\nax0.set_xticklabels([])\nax0.set_yticklabels([])\nax0.tick_params(left=False, bottom=False)\nax0.spines['bottom'].set_visible(False)\n\n# Graph1\nsns.countplot(x='hasPool', data=df, ax=ax1, palette='spring_r')\nax1.grid(color='#000000', linestyle=':', axis='y', zorder=0, dashes=(1,5))\nax1.set_xlabel('')\nax1.set_ylabel('')\n\n# Graph2\nsns.countplot(x='hasPool', data=df, hue='category', ax=ax2, palette='spring_r')\nax2.grid(color='#000000', linestyle=':', axis='y', zorder=0, dashes=(1,5))\nax2.set_xlabel('')\nax2.set_ylabel('')\n\n\n# Settings\nfor ax in axes:\n    ax.set_facecolor(background_color)\n    for s in ['top', 'right', 'left']:\n        ax.spines[s].set_visible(False)","8b0f4ba2":"pd.crosstab(df['category'], df['hasPool'], margins=True).style.background_gradient(cmap='Wistia')","2cf512d4":"fig = plt.figure(figsize=(16, 5))\ngs = fig.add_gridspec(1, 3)\ngs.update(hspace=0.2, wspace=0.3)\n\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\nax2 = fig.add_subplot(gs[0, 2])\n\naxes = [ax0, ax1, ax2]\nfig.patch.set_facecolor(background_color)\n\n\n# Title\nax0.text(0.5, 0.5, \"Countplot of 'cityPartRange'\\n_________________\",\n        horizontalalignment='center',\n        verticalalignment='center',\n        fontsize=18, fontweight='bold', fontfamily='serif')\nax0.set_xticklabels([])\nax0.set_yticklabels([])\nax0.tick_params(left=False, bottom=False)\nax0.spines['bottom'].set_visible(False)\n\n# Graph1\nsns.countplot(x='cityPartRange', data=df, ax=ax1, palette='spring_r')\nax1.grid(color='#000000', linestyle=':', axis='y', zorder=0, dashes=(1,5))\nax1.set_xlabel('')\nax1.set_ylabel('')\n\n# Graph2\nsns.countplot(x='cityPartRange', data=df, hue='category', ax=ax2, palette='spring_r')\nax2.grid(color='#000000', linestyle=':', axis='y', zorder=0, dashes=(1,5))\nax2.set_xlabel('')\nax2.set_ylabel('')\n\n\n# Settings\nfor ax in axes:\n    ax.set_facecolor(background_color)\n    for s in ['top', 'right', 'left']:\n        ax.spines[s].set_visible(False)","cd91418d":"pd.crosstab(df['category'], df['cityPartRange'], margins=True).style.background_gradient(cmap=\"Wistia\")","2ac8de70":"fig = plt.figure(figsize=(16, 5))\ngs = fig.add_gridspec(1, 3)\ngs.update(hspace=0.2, wspace=0.3)\n\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\nax2 = fig.add_subplot(gs[0, 2])\n\naxes = [ax0, ax1, ax2]\nfig.patch.set_facecolor(background_color)\n\n\n# Title\nax0.text(0.5, 0.5, \"Countplot of 'numPrevOwners'\\n_________________\",\n        horizontalalignment='center',\n        verticalalignment='center',\n        fontsize=18, fontweight='bold', fontfamily='serif')\nax0.set_xticklabels([])\nax0.set_yticklabels([])\nax0.tick_params(left=False, bottom=False)\nax0.spines['bottom'].set_visible(False)\n\n# Graph1\nsns.countplot(x='numPrevOwners', data=df, ax=ax1, palette='spring_r')\nax1.grid(color='#000000', linestyle=':', axis='y', zorder=0, dashes=(1,5))\nax1.set_xlabel('')\nax1.set_ylabel('')\n\n# Graph2\nsns.countplot(x='numPrevOwners', data=df, hue='category', ax=ax2, palette='spring_r')\nax2.grid(color='#000000', linestyle=':', axis='y', zorder=0, dashes=(1,5))\nax2.set_xlabel('')\nax2.set_ylabel('')\n\n\n# Settings\nfor ax in axes:\n    ax.set_facecolor(background_color)\n    for s in ['top', 'right', 'left']:\n        ax.spines[s].set_visible(False)","8350049f":"pd.crosstab(df['category'], df['numPrevOwners'], margins=True).style.background_gradient(cmap=\"Wistia\")","864cc730":"fig = plt.figure(figsize=(16, 5))\ngs = fig.add_gridspec(1, 3)\ngs.update(hspace=0.2, wspace=0.3)\n\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\nax2 = fig.add_subplot(gs[0, 2])\n\naxes = [ax0, ax1, ax2]\nfig.patch.set_facecolor(background_color)\n\n\n# Title\nax0.text(0.5, 0.5, \"Countplot of 'isNewBuilt'\\n_________________\",\n        horizontalalignment='center',\n        verticalalignment='center',\n        fontsize=18, fontweight='bold', fontfamily='serif')\nax0.set_xticklabels([])\nax0.set_yticklabels([])\nax0.tick_params(left=False, bottom=False)\nax0.spines['bottom'].set_visible(False)\n\n# Graph1\nsns.countplot(x='isNewBuilt', data=df, ax=ax1, palette='spring_r')\nax1.grid(color='#000000', linestyle=':', axis='y', zorder=0, dashes=(1,5))\nax1.set_xlabel('')\nax1.set_ylabel('')\n\n# Graph2\nsns.countplot(x='isNewBuilt', data=df, hue='category', ax=ax2, palette='spring_r')\nax2.grid(color='#000000', linestyle=':', axis='y', zorder=0, dashes=(1,5))\nax2.set_xlabel('')\nax2.set_ylabel('')\n\n\n# Settings\nfor ax in axes:\n    ax.set_facecolor(background_color)\n    for s in ['top', 'right', 'left']:\n        ax.spines[s].set_visible(False)","0ad399bb":"pd.crosstab(df['category'], df['isNewBuilt'], margins=True).style.background_gradient(cmap=\"Wistia\")","6da20f3b":"fig = plt.figure(figsize=(16, 5))\ngs = fig.add_gridspec(1, 3)\ngs.update(hspace=0.2, wspace=0.3)\n\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\nax2 = fig.add_subplot(gs[0, 2])\n\naxes = [ax0, ax1, ax2]\nfig.patch.set_facecolor(background_color)\n\n\n# Title\nax0.text(0.5, 0.5, \"Countplot of 'hasStormProtector'\\n_________________\",\n        horizontalalignment='center',\n        verticalalignment='center',\n        fontsize=18, fontweight='bold', fontfamily='serif')\nax0.set_xticklabels([])\nax0.set_yticklabels([])\nax0.tick_params(left=False, bottom=False)\nax0.spines['bottom'].set_visible(False)\n\n# Graph1\nsns.countplot(x='hasStormProtector', data=df, ax=ax1, palette='spring_r')\nax1.grid(color='#000000', linestyle=':', axis='y', zorder=0, dashes=(1,5))\nax1.set_xlabel('')\nax1.set_ylabel('')\n\n# Graph2\nsns.countplot(x='hasStormProtector', data=df, hue='category', ax=ax2, palette='spring_r')\nax2.grid(color='#000000', linestyle=':', axis='y', zorder=0, dashes=(1,5))\nax2.set_xlabel('')\nax2.set_ylabel('')\n\n\n# Settings\nfor ax in axes:\n    ax.set_facecolor(background_color)\n    for s in ['top', 'right', 'left']:\n        ax.spines[s].set_visible(False)","c436f825":"pd.crosstab(df['category'], df['hasStormProtector'], margins=True).style.background_gradient(cmap=\"Wistia\")","012bdf5c":"fig = plt.figure(figsize=(16, 5))\ngs = fig.add_gridspec(1, 3)\ngs.update(hspace=0.2, wspace=0.3)\n\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\nax2 = fig.add_subplot(gs[0, 2])\n\naxes = [ax0, ax1, ax2]\nfig.patch.set_facecolor(background_color)\n\n\n# Title\nax0.text(0.5, 0.5, \"Countplot of 'hasStorageRoom'\\n_________________\",\n        horizontalalignment='center',\n        verticalalignment='center',\n        fontsize=18, fontweight='bold', fontfamily='serif')\nax0.set_xticklabels([])\nax0.set_yticklabels([])\nax0.tick_params(left=False, bottom=False)\nax0.spines['bottom'].set_visible(False)\n\n# Graph1\nsns.countplot(x='hasStorageRoom', data=df, ax=ax1, palette='spring_r')\nax1.grid(color='#000000', linestyle=':', axis='y', zorder=0, dashes=(1,5))\nax1.set_xlabel('')\nax1.set_ylabel('')\n\n# Graph2\nsns.countplot(x='hasStorageRoom', data=df, hue='category', ax=ax2, palette='spring_r')\nax2.grid(color='#000000', linestyle=':', axis='y', zorder=0, dashes=(1,5))\nax2.set_xlabel('')\nax2.set_ylabel('')\n\n\n# Settings\nfor ax in axes:\n    ax.set_facecolor(background_color)\n    for s in ['top', 'right', 'left']:\n        ax.spines[s].set_visible(False)","28cf3f59":"pd.crosstab(df['category'], df['hasStorageRoom'], margins=True).style.background_gradient(cmap=\"Wistia\")","a6cc9092":"fig = plt.figure(figsize=(16, 5))\ngs = fig.add_gridspec(1, 3)\ngs.update(hspace=0.2, wspace=0.3)\n\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\nax2 = fig.add_subplot(gs[0, 2])\n\naxes = [ax0, ax1, ax2]\nfig.patch.set_facecolor(background_color)\n\n\n# Title\nax0.text(0.5, 0.5, \"Countplot of 'hasGuestRoom'\\n_________________\",\n        horizontalalignment='center',\n        verticalalignment='center',\n        fontsize=18, fontweight='bold', fontfamily='serif')\nax0.set_xticklabels([])\nax0.set_yticklabels([])\nax0.tick_params(left=False, bottom=False)\nax0.spines['bottom'].set_visible(False)\n\n# Graph1\nsns.countplot(x='hasGuestRoom', data=df, ax=ax1, palette='spring_r')\nax1.grid(color='#000000', linestyle=':', axis='y', zorder=0, dashes=(1,5))\nax1.set_xlabel('')\nax1.set_ylabel('')\n\n# Graph2\nsns.countplot(x='hasGuestRoom', data=df, hue='category', ax=ax2, palette='spring_r')\nax2.grid(color='#000000', linestyle=':', axis='y', zorder=0, dashes=(1,5))\nax2.set_xlabel('')\nax2.set_ylabel('')\n\n\n# Settings\nfor ax in axes:\n    ax.set_facecolor(background_color)\n    for s in ['top', 'right', 'left']:\n        ax.spines[s].set_visible(False)","da24d69b":"pd.crosstab(df['category'], df['hasGuestRoom'], margins=True).style.background_gradient(cmap=\"Wistia\")","b77d74fe":"cont_features = ['squareMeters', 'numberOfRooms', 'floors', 'cityPartRange', 'numPrevOwners', 'made', 'basement', 'attic', 'garage', 'hasGuestRoom', 'price']","127f8328":"# I plotted them in two cells because the code becomes TOO LONG\n\nfig = plt.figure(figsize=(18, 25))\ngs = fig.add_gridspec(4, 3)\ngs.update(wspace=0.3, hspace=0.3)\n\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\nax2 = fig.add_subplot(gs[0, 2])\nax3 = fig.add_subplot(gs[1, 0])\nax4 = fig.add_subplot(gs[1, 1])\nax5 = fig.add_subplot(gs[1, 2])\n\naxes = [ax0, ax1, ax2, ax3, ax4, ax5]\nfig.patch.set_facecolor(background_color)\n\n\n# Title\nax0.text(0.5, 0.5, 'Distribution of Continuous Features\\n by Category\\n ___________________\\n',\n        fontsize=18, fontfamily='serif', fontweight='bold',\n        horizontalalignment='center',\n        verticalalignment='center')\n \nax0.text(0.5, 0.3, 'Orange : Basic\\n Red : Luxury',\n        fontsize=14, fontfamily='serif', fontweight='bold',\n        horizontalalignment='center',\n        verticalalignment='center')\n\n\n# Graphs\nfor i, ax in enumerate(axes):\n    for s in ['top', 'right', 'left']:\n        ax.spines[s].set_visible(False)\n        \n    ax.set_facecolor(background_color)\n    \n    if i == 0:\n        ax.set_xticklabels([])\n        ax.set_yticklabels([])\n        ax.tick_params(left=False, bottom=False)\n        ax.spines[['bottom']].set_visible(False)\n    else:\n        ax.set_title(cont_features[i-1], fontsize=14, fontfamily='serif', fontweight='bold')\n        ax.grid(color='#000000', linestyle=':', axis='y', zorder=0, dashes=(1,5))\n    \n        sns.kdeplot(x=cont_features[i-1], data=df, ax=ax, hue='category', \n                    palette='spring_r', fill=True, legend=False)\n        ax.set_xlabel('')\n        ax.set_ylabel('')","b6e50e3e":"fig = plt.figure(figsize=(18, 25))\ngs = fig.add_gridspec(4, 3)\ngs.update(wspace=0.3, hspace=0.3)\n\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\nax2 = fig.add_subplot(gs[0, 2])\nax3 = fig.add_subplot(gs[1, 0])\nax4 = fig.add_subplot(gs[1, 1])\nax5 = fig.add_subplot(gs[1, 2])\n\naxes = [ax0, ax1, ax2, ax3, ax4, ax5]\nfig.patch.set_facecolor(background_color)\n\n\n# Graphs\nfor i, ax in enumerate(axes):\n    for s in ['top', 'right', 'left']:\n        ax.spines[s].set_visible(False)\n        \n    ax.set_facecolor(background_color)\n    ax.set_title(cont_features[i+5], fontsize=14, fontfamily='serif', fontweight='bold')\n    ax.grid(color='#000000', linestyle=':', axis='y', zorder=0, dashes=(1,5))\n    \n    sns.kdeplot(x=cont_features[i+5], data=df, ax=ax, hue='category', \n                palette='spring_r', fill=True, legend=False)\n    ax.set_xlabel('')\n    ax.set_ylabel('')","a6e6bf6b":"from sklearn.preprocessing import LabelEncoder\n\nlabel = LabelEncoder()\ndf['category'] = label.fit_transform(df['category'])","2cae3711":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n\nX = df.drop('category', axis=1)\ny = df['category']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)","68789f50":"from sklearn.linear_model import LogisticRegression\n\nlogreg = LogisticRegression(C=0.3, solver='newton-cg')\nlogreg.fit(X_train, y_train)\ny_pred = logreg.predict(X_test)\n\nprint('Accuracy Score of Logistic Regression : ', accuracy_score(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))","ed0d2eaf":"from sklearn.svm import SVC\n\nsvc = SVC(C=0.2, kernel='sigmoid')\nsvc.fit(X_train, y_train)\ny_pred = svc.predict(X_test)\n\nprint('Accuracy Score of Suppor Vector Machine : ', accuracy_score(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))","1c59e27b":"from sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier()\nrf.fit(X_train, y_train)\ny_pred = rf.predict(X_test)\n\nprint('Accuracy Score of Random Forest : ', accuracy_score(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))","9d5cba00":"from sklearn.tree import DecisionTreeClassifier\n\ndt = DecisionTreeClassifier()\ndt.fit(X_train, y_train)\ny_pred = dt.predict(X_test)\n\nprint('Accuracy Score of Decision Tree : ', accuracy_score(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))","63a72d8f":"# Preprocessing","fb2c091c":"I have no idea why some models got perfect 1.0 accuracy score..","02132a4e":"Good! We have no null values.","fbe2b0a6":"## Pleas Upvote if you like my notebook!\n## Thank you!","4042dee7":"# EDA","0f8684b7":"I thought the distribution of 'Basic' and 'Luxury' would be quite different. But that was wrong..","9c35f977":"# Modeling","bf5c6a32":"### Countplots of Categorical Features","d6231dbf":"### Countplot of Target Feature (Category)","686bef7f":"### Distributions of Continuous Features","8195a5ac":"What I can see from the graphs:\n\n\n- All of the categorical features are quite balanced\n- Every 'Luxury' house has Yard and Pool.","3439044b":"## About Features\n\nAll attributes are numeric variables and they are listed bellow:\n\n- squareMeters\n- numberOfRooms\n- hasYard\n- hasPool\n- floors : number of floors\n- cityCode : zip code\n- cityPartRange : the higher the range, the more exclusive the neighbourhood is\n- numPrevOwners : number of prevoious owners\n- made : year\n- isNewBuilt\n- hasStormProtector\n- basement : basement square meters\n- attic : attic square meteres\n- garage : garage size\n- hasStorageRoom\n- hasGuestRoom : number of guest rooms\n- price : price of a house\n- category : Luxury or Basic\n\n**Our task is to predict the 'category'**"}}