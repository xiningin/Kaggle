{"cell_type":{"bb0943e3":"code","73e0a44b":"code","1b7586e4":"code","0db38307":"code","1082896e":"code","ed1cb505":"code","8db4e626":"code","d7357631":"code","91891b5c":"code","173a9dd5":"code","f01e0ce4":"code","ce85fb80":"code","8dcded9c":"code","4e3ec887":"code","489288ea":"code","d82fadf3":"code","dfaf1423":"code","b13086cf":"code","d92c9b74":"code","bcdfab91":"code","4f8b4d73":"code","2e52b1a9":"code","f737e6f4":"code","2379bf02":"code","bac073e0":"code","f125d977":"code","18bc0517":"code","5e9a0b11":"code","0d890cad":"code","13b8d0ce":"code","4a407f36":"code","b3ed3589":"code","fde86a4d":"code","ad32ef08":"code","88a5d0d4":"code","687610b3":"code","0d55df5d":"code","ff4ca888":"code","bb054aac":"code","3f98fe8f":"code","4a5b49a7":"code","e70b8fa6":"code","c049a485":"code","7def0299":"code","a251326c":"code","6a2cc81b":"code","9f235086":"code","b32f1c10":"code","d09044ce":"code","9aa5a828":"code","ba86ed08":"code","43c0c758":"code","78673a26":"code","5c47d69f":"code","7791929b":"code","fd33f3e7":"code","9120f786":"code","96182916":"code","c9dcc3b2":"code","0afde326":"code","ecbdcd96":"code","4e91d066":"code","88dfe091":"code","b3a75b8b":"code","58aefae2":"code","8d847951":"code","57f5f273":"code","97d7e87e":"code","ad0eefe0":"code","5377cb51":"code","0b91337d":"code","f57a4236":"code","d3f37002":"code","fe6c8dd5":"code","ea5a87af":"code","dbd82749":"code","1d22dde6":"code","5532bac0":"code","077584d0":"code","f8e76b13":"markdown","418a99cf":"markdown","c328df07":"markdown","c49e28fb":"markdown","c8521c48":"markdown","00a6f94d":"markdown","01df82d0":"markdown","9eabd339":"markdown","e52bd8fd":"markdown","80177275":"markdown","576eb8b0":"markdown","95188b7d":"markdown","7d562a43":"markdown","7ab30ac2":"markdown","618675d2":"markdown","a17c4010":"markdown","d472057f":"markdown","0e5f0f9b":"markdown","045fb047":"markdown","7fdeda4e":"markdown","c0ba3a66":"markdown","4849f3d0":"markdown","b167f746":"markdown","89aae076":"markdown","1323351d":"markdown","34129032":"markdown","6601f34e":"markdown","0e318951":"markdown","fd529247":"markdown","4df26810":"markdown","61ed731d":"markdown","525a4d35":"markdown","78232d4d":"markdown","28278901":"markdown","5f9e9e8f":"markdown","61192792":"markdown","bcebe6c6":"markdown","7762702b":"markdown","c879d56c":"markdown","68c9b941":"markdown","f6f24e85":"markdown","25887f06":"markdown","4e2dad5d":"markdown","acfec90b":"markdown","ff9c1025":"markdown","28545e4a":"markdown","d7c0be5e":"markdown","a6298d4e":"markdown","c7fb11dd":"markdown","92fde171":"markdown","33a8f843":"markdown","c1d9512b":"markdown","eb732004":"markdown","f0a5d30f":"markdown","7c8f0406":"markdown","14ac7e98":"markdown","60b44ca4":"markdown","574b7605":"markdown","8acd9bb4":"markdown","349a2d83":"markdown","c58d69fc":"markdown","dc63b802":"markdown","0d9f7034":"markdown","f2a371df":"markdown","a3f43849":"markdown","042c4beb":"markdown","9d15de69":"markdown","74f2d810":"markdown","3950cc0f":"markdown","a7c54f91":"markdown","fa3fef8f":"markdown","02cc73de":"markdown","3b05a2a3":"markdown","fae483ee":"markdown","37a7847b":"markdown","dfd24319":"markdown","d3879ee1":"markdown","71f4e04c":"markdown","135c143f":"markdown","494a218c":"markdown","b0d2ae35":"markdown","205ae1a2":"markdown","10f70092":"markdown","62c9111a":"markdown","4dc7fe9f":"markdown","2dd4e4bc":"markdown","edb559ea":"markdown","5ec3e431":"markdown","07cc5865":"markdown"},"source":{"bb0943e3":"# basic\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n% matplotlib inline\n\n# split data\nfrom sklearn.model_selection import train_test_split\n\n# scale data\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import StandardScaler\n\n# ML\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nimport xgboost as xgb\nfrom sklearn.naive_bayes import GaussianNB\n\n\n# score\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn import metrics\n\n\npd.pandas.set_option('display.max_columns', None)\n\nimport warnings\nwarnings.filterwarnings('ignore')","73e0a44b":"data = pd.read_csv('..\/input\/weatherAUS.csv')\ndata.head(3)","1b7586e4":"data.drop(['Location','RISK_MM'], axis=1, inplace=True)","0db38307":"data['RainTomorrow'] = data['RainTomorrow'].map( {'No': 0, 'Yes': 1} ).astype(int)","1082896e":"data.dtypes","ed1cb505":"len(data.dtypes)","8db4e626":"data.describe()","d7357631":"data['DateNew']= pd.to_datetime(data.Date)","91891b5c":"data['Month'] = data['DateNew'].dt.month\ndata['Day'] = data['DateNew'].dt.day\ndata['Year'] = data['DateNew'].dt.year","173a9dd5":"data.drop(['Date','DateNew'], axis=1, inplace=True)","f01e0ce4":"categorical = [var for var in data.columns if data[var].dtype=='O']\n#list(set(categorical))\ncategorical","ce85fb80":"numerical = [var for var in data.columns if data[var].dtype!='O']\n#list(set(categorical))\nnumerical","8dcded9c":"data.isnull().mean()","4e3ec887":"plt.figure(figsize=(12,8))\ndata.boxplot(column=['MinTemp','MaxTemp','Evaporation','Sunshine'])","489288ea":"plt.figure(figsize=(12,8))\ndata.boxplot(column=['WindGustSpeed','WindSpeed9am','WindSpeed3pm','Humidity9am','Humidity3pm'])","d82fadf3":"plt.figure(figsize=(12,8))\ndata.boxplot(column=['Pressure9am','Pressure3pm'])","dfaf1423":"plt.figure(figsize=(12,8))\ndata.boxplot(column=['Cloud9am','Temp3pm','Temp9am'])","b13086cf":"plt.figure(figsize=(12,8))\ndata.boxplot(column=['Rainfall'])","d92c9b74":"plt.figure(figsize=(15,6))\nplt.subplot(1, 2, 1)\nfig = data.MinTemp.hist(bins=20)\nfig.set_ylabel('Temp')\nfig.set_xlabel('MinTemp')\n\nplt.subplot(1, 2, 2)\nfig = data.MaxTemp.hist(bins=20)\nfig.set_ylabel('Temp')\nfig.set_xlabel('MaxTemp')","bcdfab91":"plt.figure(figsize=(15,6))\nplt.subplot(1, 2, 1)\nfig = data.Rainfall.hist(bins=20)\nfig.set_ylabel('Rainfall')\nfig.set_xlabel('mm')\n\nplt.subplot(1, 2, 2)\nfig = data.Evaporation.hist(bins=20)\nfig.set_ylabel('Evaporation')\nfig.set_xlabel('mm')","4f8b4d73":"plt.figure(figsize=(15,6))\nplt.subplot(1, 2, 1)\nfig = data.WindSpeed9am.hist(bins=20)\nfig.set_ylabel('WindSpeed9am')\nfig.set_xlabel('WindSpeed9am')\n\nplt.subplot(1, 2, 2)\nfig = data.WindSpeed3pm.hist(bins=20)\nfig.set_ylabel('WindSpeed3pm')\nfig.set_xlabel('WindSpeed3pm')","2e52b1a9":"plt.figure(figsize=(15,6))\nplt.subplot(1, 2, 1)\nfig = data.WindGustSpeed.hist(bins=20)\nfig.set_ylabel('WindGustSpeed')\nfig.set_xlabel('WindGustSpeed')\n\nplt.subplot(1, 2, 2)\nfig = data.Humidity9am.hist(bins=20)\nfig.set_ylabel('Humidity9am')\nfig.set_xlabel('Humidity9am')","f737e6f4":"plt.figure(figsize=(15,6))\nplt.subplot(1, 2, 1)\nfig = data.Pressure9am.hist(bins=20)\nfig.set_ylabel('Pressure9am')\nfig.set_xlabel('Pressure9am')\n\nplt.subplot(1, 2, 2)\nfig = data.Pressure3pm.hist(bins=20)\nfig.set_ylabel('Pressure3pm')\nfig.set_xlabel('Pressure3pm')","2379bf02":"plt.figure(figsize=(15,6))\nplt.subplot(1, 2, 1)\nfig = data.Temp9am.hist(bins=20)\nfig.set_ylabel('Temp9am')\nfig.set_xlabel('Temp9am')\n\nplt.subplot(1, 2, 2)\nfig = data.Temp3pm.hist(bins=20)\nfig.set_ylabel('Temp3pm')\nfig.set_xlabel('Temp3pm')","bac073e0":"Upper_boundary = data.MinTemp.mean() + 3* data.MinTemp.std()\nLower_boundary = data.MinTemp.mean() - 3* data.MinTemp.std()\nprint('MinTemp outliers are values < {lowerboundary} or > {upperboundary}'.format(lowerboundary=Lower_boundary, upperboundary=Upper_boundary))","f125d977":"Upper_boundary = data.MaxTemp.mean() + 3* data.MaxTemp.std()\nLower_boundary = data.MaxTemp.mean() - 3* data.MaxTemp.std()\nprint('MaxTemp outliers are values < {lowerboundary} or > {upperboundary}'.format(lowerboundary=Lower_boundary, upperboundary=Upper_boundary))","18bc0517":"Upper_boundary = data.WindSpeed3pm.mean() + 3* data.WindSpeed3pm.std()\nLower_boundary = data.WindSpeed3pm.mean() - 3* data.WindSpeed3pm.std()\nprint('WindSpeed3pm outliers are values < {lowerboundary} or > {upperboundary}'.format(lowerboundary=Lower_boundary, upperboundary=Upper_boundary))","5e9a0b11":"Upper_boundary = data.WindGustSpeed.mean() + 3* data.WindGustSpeed.std()\nLower_boundary = data.WindGustSpeed.mean() - 3* data.WindGustSpeed.std()\nprint('WindGustSpeed outliers are values < {lowerboundary} or > {upperboundary}'.format(lowerboundary=Lower_boundary, upperboundary=Upper_boundary))","0d890cad":"Upper_boundary = data.Pressure9am.mean() + 3* data.Pressure9am.std()\nLower_boundary = data.Pressure9am.mean() - 3* data.Pressure9am.std()\nprint('Pressure9am outliers are values < {lowerboundary} or > {upperboundary}'.format(lowerboundary=Lower_boundary, upperboundary=Upper_boundary))","13b8d0ce":"Upper_boundary = data.Pressure3pm.mean() + 3* data.Pressure3pm.std()\nLower_boundary = data.Pressure3pm.mean() - 3* data.Pressure3pm.std()\nprint('Pressure3pm outliers are values < {lowerboundary} or > {upperboundary}'.format(lowerboundary=Lower_boundary, upperboundary=Upper_boundary))","4a407f36":"Upper_boundary = data.Temp9am.mean() + 3* data.Temp9am.std()\nLower_boundary = data.Temp9am.mean() - 3* data.Temp9am.std()\nprint('Temp9am outliers are values < {lowerboundary} or > {upperboundary}'.format(lowerboundary=Lower_boundary, upperboundary=Upper_boundary))","b3ed3589":"Upper_boundary = data.Temp3pm.mean() + 3* data.Temp3pm.std()\nLower_boundary = data.Temp3pm.mean() - 3* data.Temp3pm.std()\nprint('Temp3pm outliers are values < {lowerboundary} or > {upperboundary}'.format(lowerboundary=Lower_boundary, upperboundary=Upper_boundary))","fde86a4d":"IQR = data.Rainfall.quantile(0.75) - data.Rainfall.quantile(0.25)\nLower_fence = data.Rainfall.quantile(0.25) - (IQR * 3)\nUpper_fence = data.Rainfall.quantile(0.75) + (IQR * 3)\nprint('Rainfall outliers are values < {lowerboundary} or > {upperboundary}'.format(lowerboundary=Lower_fence, upperboundary=Upper_fence))","ad32ef08":"IQR = data.Evaporation.quantile(0.75) - data.Evaporation.quantile(0.25)\nLower_fence = data.Evaporation.quantile(0.25) - (IQR * 3)\nUpper_fence = data.Evaporation.quantile(0.75) + (IQR * 3)\nprint('Evaporation outliers are values < {lowerboundary} or > {upperboundary}'.format(lowerboundary=Lower_fence, upperboundary=Upper_fence))","88a5d0d4":"IQR = data.WindSpeed9am.quantile(0.75) - data.WindSpeed9am.quantile(0.25)\nLower_fence = data.WindSpeed9am.quantile(0.25) - (IQR * 3)\nUpper_fence = data.WindSpeed9am.quantile(0.75) + (IQR * 3)\nprint('WindSpeed9am outliers are values < {lowerboundary} or > {upperboundary}'.format(lowerboundary=Lower_fence, upperboundary=Upper_fence))","687610b3":"IQR = data.Humidity9am.quantile(0.75) - data.Humidity9am.quantile(0.25)\nLower_fence = data.Humidity9am.quantile(0.25) - (IQR * 3)\nUpper_fence = data.Humidity9am.quantile(0.75) + (IQR * 3)\nprint('Humidity9am outliers are values < {lowerboundary} or > {upperboundary}'.format(lowerboundary=Lower_fence, upperboundary=Upper_fence))","0d55df5d":"for var in ['WindGustDir',  'WindDir9am', 'WindDir3pm']:\n    print(data[var].value_counts() \/ np.float(len(data)))\n    print()","ff4ca888":"for var in categorical:\n    print(var, ' contains ', len(data[var].unique()), ' labels')","bb054aac":"X = data.drop('RainTomorrow', axis=1)","3f98fe8f":"y = data[['RainTomorrow']]","4a5b49a7":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,\n                                                    random_state=0)\nX_train.shape, X_test.shape","e70b8fa6":"numerical = [var for var in X_train.columns if data[var].dtype!='O']","c049a485":"for col in numerical:\n    if X_train[col].isnull().mean()>0:\n        print(col, X_train[col].isnull().mean())","7def0299":"for col in numerical:\n    X_train[col] = X_train[col].fillna((X_train[col].mean()))","a251326c":"for col in numerical:\n    X_test[col] = X_test[col].fillna((X_test[col].mean()))","6a2cc81b":"for col in categorical:\n    if X_train[col].isnull().mean()>0:\n        print(col, X_train[col].isnull().mean())","9f235086":"for df in [X_train, X_test]:\n    df['WindGustDir'].fillna(X_train['WindGustDir'].mode()[0], inplace=True)\n    df['WindDir9am'].fillna(X_train['WindDir9am'].mode()[0], inplace=True)\n    df['WindDir3pm'].fillna(X_train['WindDir3pm'].mode()[0], inplace=True)\n    df['RainToday'].fillna(X_train['RainToday'].mode()[0], inplace=True)","b32f1c10":"X_train.isnull().sum()","d09044ce":"X_test.isnull().sum()","9aa5a828":"to_describe = ['MinTemp','MaxTemp','WindSpeed3pm','WindGustSpeed','Pressure9am','Pressure3pm',\n               'Temp9am','Temp3pm','Rainfall','Evaporation','WindSpeed9am','Humidity9am']","ba86ed08":"X_train[to_describe].describe()","43c0c758":"def top_code(df, variable, top):\n    return np.where(df[variable]>top, top, df[variable])","78673a26":"def bottom_code(df, variable, bottom):\n    return np.where(df[variable]<bottom, bottom, df[variable])","5c47d69f":"for df in [X_train, X_test]:\n    df['MinTemp'] = top_code(df, 'MinTemp', 31.38)\n    df['MinTemp'] = bottom_code(df, 'MinTemp', -7.02)\n    df['MaxTemp'] = top_code(df, 'MaxTemp', 44.57)\n    df['MaxTemp'] = bottom_code(df, 'MaxTemp', 1.87)\n    df['WindSpeed3pm'] = top_code(df, 'WindSpeed3pm', 45.04)\n    df['WindGustSpeed'] = top_code(df, 'WindGustSpeed', 80.75)\n    df['Pressure9am'] = top_code(df, 'Pressure9am', 1038.97)\n    df['Pressure9am'] = bottom_code(df, 'Pressure9am', 996.33)\n    df['Pressure3pm'] = top_code(df, 'Pressure3pm', 1036.36)\n    df['Pressure3pm'] = bottom_code(df, 'Pressure3pm', 994.14)\n    df['Temp9am'] = top_code(df, 'Temp9am', 36.46)\n    df['Temp9am'] = bottom_code(df, 'Temp9am', -2.49)\n    df['Temp3pm'] = top_code(df, 'Temp3pm', 42.50)\n    df['Temp3pm'] = bottom_code(df, 'Temp3pm', 0.87)\n    \n    df['Rainfall'] = top_code(df, 'Rainfall', 3.20)\n    df['Evaporation'] = top_code(df, 'Evaporation', 21.80)\n    df['WindSpeed9am'] = top_code(df, 'WindSpeed9am', 55.00)\n    df['Humidity9am'] = top_code(df, 'Humidity9am', 161.00)","7791929b":"X_train[to_describe].describe()","fd33f3e7":"X_test[to_describe].describe()","9120f786":"categorical","96182916":"for df in [X_train, X_test]:\n    df['WindGustDir']  = pd.get_dummies(df.WindGustDir, drop_first=False)\n    df['WindDir9am']  = pd.get_dummies(df.WindDir9am, drop_first=False)\n    df['WindDir3pm']  = pd.get_dummies(df.WindDir3pm, drop_first=False)\n    df['RainToday']  = pd.get_dummies(df.RainToday, drop_first=False)","c9dcc3b2":"mx = MinMaxScaler()","0afde326":"X_train_mx = mx.fit_transform(X_train)","ecbdcd96":"X_test_mx = mx.fit_transform(X_test)","4e91d066":"knn = KNeighborsClassifier()","88dfe091":"knn.fit(X_train_mx, y_train)","b3a75b8b":"predictions = knn.predict(X_test_mx)","58aefae2":"print(accuracy_score(y_test, predictions))","8d847951":"print(confusion_matrix(y_test, predictions))","57f5f273":"print(classification_report(y_test, predictions))","97d7e87e":"logreg = LogisticRegression()","ad0eefe0":"logreg.fit(X_train_mx, y_train)","5377cb51":"predictions = logreg.predict(X_test_mx)","0b91337d":"print(accuracy_score(y_test, predictions))","f57a4236":"print(confusion_matrix(y_test, predictions))","d3f37002":"print(classification_report(y_test, predictions))","fe6c8dd5":"gaussian = GaussianNB()","ea5a87af":"gaussian.fit(X_train_mx, y_train)","dbd82749":"predictions = gaussian.predict(X_test_mx)","1d22dde6":"print(accuracy_score(y_test, predictions))","5532bac0":"print(confusion_matrix(y_test, predictions))","077584d0":"print(classification_report(y_test, predictions))","f8e76b13":"**Cardinlity:** Nope.","418a99cf":"###### WindGustSpeed Outliers","c328df07":"---","c49e28fb":"At this point i am not doing any manipulation at all. I am just dealing with pre processing problems of our data.","c8521c48":"## Rain in Australia - Info","00a6f94d":"###### Temp3pm Outliers","01df82d0":"In this kernel i am going to do some basic Feature Engineering i learned from reading around the web and some udemy tutorials. I was looking for a classification problem and this dataset looked promising and interesting. I am not going to do Feature Selection Engineering and I' ll go all in. Feature Selection will be done on 2nd part.","9eabd339":"## STEP ONE - GET TO KNOW OUR PROBLEMS","e52bd8fd":"##### ENGINEER NUMERICAL MISSING VALUES","80177275":"----\n","576eb8b0":"----","95188b7d":"##### Temp9am Outliers","7d562a43":"----","7ab30ac2":"-----","618675d2":"###### Humidity9am Outliers","a17c4010":"##### Logistic Regression","d472057f":"---","0e5f0f9b":"##### MinTemp Outliers","045fb047":"----","7fdeda4e":"**Content**\n\nThis dataset contains daily weather observations from numerous Australian weather stations.\n\nThe target variable RainTomorrow means: Did it rain the next day? Yes or No.\n\nNote: You should exclude the variable Risk-MM when training a binary classification model. Not excluding it will leak the answers to your model and reduce its predictability. https:\/\/www.kaggle.com\/jsphyg\/weather-dataset-rattle-package\n","c0ba3a66":"##### TAKE CARE OF RainTomorrow COLUMN","4849f3d0":"##### Pressure9am Outliers","b167f746":"----","89aae076":"##### Evaporation Outliers","1323351d":"---","34129032":"##### FIND OUTLIERS - SKEWED","6601f34e":"**Outliers:** Checking for outliers on all numerical values. I will use boxplots.I am using multiple boxplots so it will be more clear.","0e318951":"---","fd529247":"----","4df26810":"Predict whether or not it will rain tomorrow by training a binary classification model on target RainTomorrow","61ed731d":"##### ENGINEER OUTLIERS","525a4d35":"Theese are some pretty bad results i guess but for now i just want to familiarize on Feature Engineering.\n\nAny suggestions would be welcome. Have fun xD","78232d4d":"##### ENGINEER CATECORIGAL MISSING VALUES","28278901":"##### Rainfall Outliers","5f9e9e8f":"##### FEATURE ENGINEERING","61192792":"##### LOAD DATASET","bcebe6c6":"##### WindSpeed9am Outliers","7762702b":"---","c879d56c":"----","68c9b941":"We are not going to use Location and RISK_MM.\n\n\n**Note from uploader:** You should exclude the variable Risk-MM when training a binary classification model. Not excluding it will leak the answers to your model and reduce its predictability\n\n**About Location:** In my opinion, location is an important feature  but i will avoid it for the moment just so it will be simplier for me.\n","f6f24e85":"----","25887f06":"##### WindSpeed3pm Outliers","4e2dad5d":"#### DATA MANIPULATION","acfec90b":"##### SOME MORE DATA INFO","ff9c1025":"##### MaxTemp Outliers","28545e4a":"**Rare Labels:** There are no rare labels. All atributes are seen more than 1%","d7c0be5e":"### Outliers\n\n##### Gaussian\n\n- MinTemp:            -7.02 to 31.39\n- MaxTemp:             1.87 to 44.57\n- WindSpeed3pm:       -7.77 to 45.04 (!)\n- WindGustSpeed:      -0.78 to 80.75 (!)\n- Pressure9am:         996.33 to 1038.97\n- Pressure3pm:         994.14 to 1036.36\n- Temp9am:            -2.49 to 36.46\n- Temp3pm:             0.87 to 42.50\n\n##### Skewed\n\n- Rainfall:           -2.40 to 3.20\n- Evaporation:        -11.80 to 21.80\n- WindSpeed9am:       -29.0 to 55.00\n- Humidity9am:        -21.00 to 161.00","a6298d4e":"**Missing Values:** There are many missing values on our dataset.","c7fb11dd":"---","92fde171":"Type of variables","33a8f843":"---","c1d9512b":"**Categorical:** There are four categorical variables","eb732004":"---","f0a5d30f":"----","7c8f0406":"**Gaussian**: MinTemp, MaxTemp, WindSpeed3pm, WindGustSpeed, Pressure9am, Pressure3pm, Temp9am, Temp3pm ","14ac7e98":"##### Kernel Target","60b44ca4":"Take advantage of date column","574b7605":"##### SPLIT DATA TO AVOID OVERFITTING WHILE ENGINEERING","8acd9bb4":"---","349a2d83":"#### DATA INFO\n","c58d69fc":"#### IMPORTS","dc63b802":"Number of variables","0d9f7034":"----","f2a371df":"##### FILL ALL MISSING VALUES WITH MEAN","a3f43849":"**Skew or Gaussian:** In order to take care of outliers we need to know about being skew or gaussian.","042c4beb":"---","9d15de69":"##### Gaussian","74f2d810":"##### FIND OUTLIERS - GAUSSIAN","3950cc0f":"##### PREDICTIONS","a7c54f91":"#### CONCLUSION","fa3fef8f":"##### SOME MORE DATA MANIPULATION","02cc73de":"---","3b05a2a3":"----","fae483ee":"We can see that MinTemp, MaxTemp, Rainfall, Evaporation, WindGustSpeed, WindSpeed9am, WindSpeed3pm, Humidity9am, Pressure9am, Pressure3pm, Temp9am, Temp3pm have outliers. Let'e check each one of theese.","37a7847b":"----","dfd24319":"##### VARIABLE TYPES","d3879ee1":"**Numerical:** There are 20 numerical variables","71f4e04c":"---","135c143f":"**Skewed:** Rainfall, Evaporation, WindSpeed9am, Humidity9am","494a218c":"---","b0d2ae35":"---","205ae1a2":"----","10f70092":"#### DROP THE COLUMNS\n","62c9111a":"###### Pressure3pm Outliers","4dc7fe9f":"##### SCALE DATA","2dd4e4bc":"##### KNN","edb559ea":"##### ENCODE CATEGORICAL VARIABLES","5ec3e431":"---","07cc5865":"----"}}