{"cell_type":{"c474e42d":"code","9640fed8":"code","2292993e":"code","cbd42424":"code","df65cc6e":"code","3d95f7d0":"code","983961af":"code","a3629f98":"code","f5dc4c7b":"code","5a4a792a":"code","d0570b42":"code","852fab5b":"code","4a2982e9":"code","82cc6d1e":"code","8e5dd96e":"code","f3bf5b4c":"code","343d807b":"code","dd9862db":"code","c0f21c0c":"code","91321268":"code","162a57a5":"code","44e4d56c":"markdown","c094ea2e":"markdown","69431731":"markdown","6a5b228e":"markdown"},"source":{"c474e42d":"%%capture\n!pip install pycaret[full]\n!pip install autoviz","9640fed8":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport gc\nimport os\nimport shutil\nimport warnings\nimport seaborn as sns\nimport datatable as dt\nfrom pathlib import Path\nimport plotly.express as px\nfrom pycaret.regression import *\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom autoviz.AutoViz_Class import AutoViz_Class\nAV = AutoViz_Class()\n%matplotlib inline\nwarnings.filterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","2292993e":"train = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2022\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2022\/test.csv')","cbd42424":"train['date'] = pd.to_datetime(train['date'])\ntrain['year'] = train['date'].dt.year\ntrain['month'] = train['date'].dt.month\ntrain['day'] = train['date'].dt.day\ntrain['dayofweek'] = train['date'].dt.dayofweek\ntrain['dayofmonth'] = train['date'].dt.days_in_month\ntrain['dayofyear'] = train['date'].dt.dayofyear\ntrain['weekday'] = train['date'].dt.weekday\n\ntest['date'] = pd.to_datetime(test['date'])\ntest['year'] = test['date'].dt.year\ntest['month'] = test['date'].dt.month\ntest['day'] = test['date'].dt.day\ntest['dayofweek'] = test['date'].dt.dayofweek\ntest['dayofmonth'] = test['date'].dt.days_in_month\ntest['dayofyear'] = test['date'].dt.dayofyear\ntest['weekday'] = test['date'].dt.weekday\n\ntrain.drop('date', axis = 1, inplace = True)\ntest.drop('date', axis = 1, inplace = True)","df65cc6e":"train.head()","3d95f7d0":"fig = px.pie(train, values='num_sold', names='product', title= \"Distribution of Products Sold\")\nfig.show()","983961af":"fig = px.pie(train, values='num_sold', names='country', title= \"Distribution of Products Sold by Country\")\nfig.show()","a3629f98":"norway  = train[train.country == 'Norway']\nnorway  = pd.DataFrame(norway.groupby('product')['num_sold'].sum()).reset_index()\n\nfinland = train[train.country == 'Finland']\nfinland = pd.DataFrame(finland.groupby('product')['num_sold'].sum()).reset_index()\n\nsweden  = train[train.country == 'Sweden']\nsweden  = pd.DataFrame(sweden.groupby('product')['num_sold'].sum()).reset_index()","f5dc4c7b":"fig = make_subplots(rows=3, cols=1,\n                    specs=[[{'type':'domain'}],[{'type':'domain'}],[{'type':'domain'}]],\n                    vertical_spacing = 0.1)\n\nfig.add_trace(go.Pie(\n             values = norway['num_sold'],\n             labels = norway['product'],\n             title = dict(text = 'Distribution of<br>Kaggle Products<br>sales in Norway',\n                          font = dict(size=18, family = 'monospace'),\n                          ),\n             hole = 0.5,\n             hoverinfo='label+percent',),1,1)\nfig.add_trace(go.Pie(\n             values = finland['num_sold'],\n             labels = finland['product'],\n             title = dict(text = 'Distribution of<br>Kaggle Products<br>sales in Finland',\n                          font = dict(size=18, family = 'monospace'),\n                          ),\n             hole = 0.5,\n             hoverinfo='label+percent',),2,1)\n\nfig.add_trace(go.Pie(\n             values = sweden['num_sold'],\n             labels = sweden['product'],\n             title = dict(text = 'Distribution of<br>Kaggle Products<br>sales in Sweden',\n                          font = dict(size=18, family = 'monospace'),\n                          ),\n             hole = 0.5,\n             hoverinfo='label+percent',),3,1)\nfig.update_traces(row=1, col=1, hoverinfo='label+percent',\n                  textinfo='label+percent',\n                  textfont_size=12,\n                  opacity = 0.8,\n                  showlegend = False,\n                  marker = dict(colors = sns.color_palette('Reds').as_hex(),\n                              line=dict(color='#000000', width=1)))\n\nfig.update_traces(row=2, col=1, hoverinfo='label+percent',\n                  textinfo='label+percent',\n                  textfont_size=12,\n                  opacity = 0.8,\n                  showlegend = False,\n                  marker = dict(colors = sns.color_palette('Blues').as_hex(),\n                              line=dict(color='#000000', width=1)))\n\nfig.update_traces(row=3, col=1, hoverinfo='label+percent',\n                  textinfo='label+percent',\n                  textfont_size=12,\n                  opacity = 0.8,\n                  showlegend = False,\n                  marker = dict(colors = sns.color_palette('Wistia').as_hex(),\n                              line=dict(color='#000000', width=1)))\n\nfig.update_layout(margin=dict(t=0, b=0, l=0, r=0),\n                  height = 1200,\n                  font_family   = 'monospace',)","5a4a792a":"sold = pd.DataFrame(train.groupby('country')['num_sold'].sum()).reset_index()","d0570b42":"fig = go.Figure()\n\nfig.add_trace(go.Bar(x = sold['country'],\n                     y = sold['num_sold'],\n                     text = sold['num_sold'],\n                     textposition = 'outside',\n                     marker_color= ['#2d8fb5', '#eb8f8f', '#ebe88f'],\n                     width=0.4\n                 ))\n\nfig.update_xaxes(tickfont = dict(size=17),\n                 tickmode = 'array',\n                 ticklen = 6,\n                 showline = False,\n                 showgrid = False,\n                 ticks = 'outside')\n\nfig.update_yaxes(showgrid=False,categoryorder='total ascending',\n                 showline=False)\n\nfig.update_layout(font_family   = 'monospace',\n                  title         = dict(text = 'Total units sold by Country', x = 0.525),\n                  margin        = dict(t=80, b=0, l=70, r=40),\n                  font          = dict(color='black'),\n                  showlegend    = False,\n                 )\nfig.show()","852fab5b":"sep = \",\"\ndft = AV.AutoViz('',sep=\",\",depVar=\"\",dfte = train,\n                 header=0,verbose=0,lowess=False,chart_format=\"svg\",max_rows_analyzed=150000,\n                 max_cols_analyzed=30,)","4a2982e9":"# Credit to https:\/\/www.kaggle.com\/c\/web-traffic-time-series-forecasting\/discussion\/36414\ndef SMAPE(y_true, y_pred):\n    denominator = (y_true + np.abs(y_pred)) \/ 200.0\n    diff = np.abs(y_true - y_pred) \/ denominator\n    diff[denominator == 0] = 0.0\n    return np.mean(diff)","82cc6d1e":"train.isna().sum()","8e5dd96e":"setup(data = train,\n            target = 'num_sold',\n            data_split_shuffle = False, # we do not use \"future\" observations to predict \"past\" observations\n            create_clusters = True,\n            use_gpu = True,\n            silent = True,\n            n_jobs = -1)","f3bf5b4c":"add_metric('SMAPE', 'SMAPE', SMAPE, greater_is_better = False)","343d807b":"N = 3\ntop = compare_models(sort = 'SMAPE', n_select = N)","dd9862db":"blend = blend_models(top)\npredict_model(blend);","c0f21c0c":"final_blend = finalize_model(blend)\npredict_model(final_blend);","91321268":"gc.collect()\nunseen_predictions = predict_model(final_blend, data=test)\nunseen_predictions.head()","162a57a5":"gc.collect()\n\nassert(len(test.index)==len(unseen_predictions))\n\nsub = pd.DataFrame(list(zip(test.row_id, unseen_predictions.Label)),columns = ['row_id', 'num_sold'])\n\nsub.to_csv('submission.csv', index = False)\n\nsub.head()","44e4d56c":"# EDA","c094ea2e":"Upvote, If you like the work.\n\nWorking on this NB daily check out for more information.\n\nThank you.","69431731":"# Modelling","6a5b228e":"# Import Libraries"}}