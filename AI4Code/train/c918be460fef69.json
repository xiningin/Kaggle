{"cell_type":{"0f59aa62":"code","27ab0608":"code","4fe8e495":"code","8563ae4c":"code","4475ccfd":"code","4fef507d":"code","ecfe85f4":"code","9edb022f":"code","04fb413e":"code","942e958b":"code","76d1ef12":"code","3bffae93":"code","43acf946":"code","5e06b204":"code","ff1dd473":"markdown","b8342639":"markdown","7c3a374c":"markdown","f9cdd668":"markdown","6f50accb":"markdown","d21400cc":"markdown"},"source":{"0f59aa62":"%cd \/kaggle\/working","27ab0608":"!git clone https:\/\/github.com\/AlexeyAB\/darknet.git","4fe8e495":"%cd darknet","8563ae4c":"#OpenCV configuration\n!apt update\n!apt install --yes python-opencv\n!apt install --yes libopencv-dev\n!\/bin\/bash -c 'echo \"\/opt\/conda\/lib\/\" > \/etc\/ld.so.conf.d\/opencv.conf'\n!ldconfig","4475ccfd":"!cp '..\/..\/input\/libcuda\/libcuda.so' .","4fef507d":"!sed -i 's\/OPENCV=0\/OPENCV=1\/g' Makefile\n!sed -i 's\/GPU=0\/GPU=1\/g' Makefile\n!sed -i 's\/CUDNN=0\/CUDNN=1\/g' Makefile\n!sed -i 's\/CUDNN_HALF=0\/CUDNN_HALF=1\/g' Makefile\n!sed -i 's\/LIBSO=0\/LIBSO=1\/' Makefile\n!sed -i \"s\/ARCH= -gencode arch=compute_60,code=sm_60\/ARCH= ${ARCH_VALUE}\/g\" Makefile","ecfe85f4":"!sed -i 's\/LDFLAGS+= -L\\\/usr\\\/local\\\/cuda\\\/lib64 -lcuda -lcudart -lcublas -lcurand\/LDFLAGS+= -L\\\/usr\\\/local\\\/cuda\\\/lib64 -lcudart -lcublas -lcurand -L\\\/kaggle\\\/working\\\/darknet -lcuda\/' Makefile","9edb022f":"!make &> compile.log","04fb413e":"!tail compile.log","942e958b":"!.\/darknet detector train","76d1ef12":"!wget https:\/\/github.com\/AlexeyAB\/darknet\/releases\/download\/darknet_yolo_v3_optimal\/yolov4.weights","3bffae93":"# define helper functions\ndef imShow(path):\n    import cv2\n    import matplotlib.pyplot as plt\n    %matplotlib inline\n\n    image = cv2.imread(path)\n    height, width = image.shape[:2]\n    resized_image = cv2.resize(image,(3*width, 3*height), interpolation = cv2.INTER_CUBIC)\n\n    fig = plt.gcf()\n    fig.set_size_inches(18, 10)\n    plt.axis(\"off\")\n    plt.imshow(cv2.cvtColor(resized_image, cv2.COLOR_BGR2RGB))\n    plt.show()\n\n# use this to upload files\ndef upload():\n    from google.colab import files\n    uploaded = files.upload() \n    for name, data in uploaded.items():\n        with open(name, 'wb') as f:\n            f.write(data)\n            print ('saved file', name)\n\n# use this to download a file  \ndef download(path):\n    from google.colab import files\n    files.download(path)","43acf946":"!.\/darknet detector test cfg\/coco.data cfg\/yolov4.cfg yolov4.weights data\/person.jpg","5e06b204":"imShow('predictions.jpg')","ff1dd473":"### Modify Makefile by adding your local path towards libcuda.so and compile ","b8342639":"### Check there are no errors during compilation","7c3a374c":"### Check predictions","f9cdd668":"### Download yolov4 weights","6f50accb":"## Install OpenCV dependencies\ncode copied from [here](https:\/\/www.kaggle.com\/sushantiit\/yolov4-detection-kaggle)","d21400cc":"# Build YOLO_V4 with Darknet\nInputs needed: `libcuda.so` imported from [here](https:\/\/www.kaggle.com\/denispotapov\/libcuda)\n"}}