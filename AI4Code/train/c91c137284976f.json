{"cell_type":{"e31f9554":"code","753acc3b":"code","6d53e02d":"code","4160aaf8":"code","c01225cd":"code","2c410d0c":"code","fefb31f2":"code","db287635":"code","1dfb0171":"code","75bb2400":"code","096c0c49":"code","259423ad":"code","b98feb79":"code","1775a27e":"code","4f1a91c5":"code","29b4dccf":"code","91a96b52":"code","73af27ef":"code","ccf9dd51":"code","fc3344d4":"code","7dca290d":"code","68ef93a8":"markdown","cb434c7f":"markdown","f2dc9892":"markdown","7a9bba66":"markdown","22c62ad7":"markdown","07dcd4f4":"markdown","f7cff4b8":"markdown","c4b2e742":"markdown","679540c6":"markdown"},"source":{"e31f9554":"import numpy as np\nimport pandas as pd\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import accuracy_score\n\nfrom xgboost import XGBClassifier\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","753acc3b":"# Read the data\nX_full = pd.read_csv('..\/input\/titanic\/train.csv', index_col='PassengerId')\nX_full.head()\n\nX_test_full = pd.read_csv('..\/input\/titanic\/test.csv', index_col='PassengerId')","6d53e02d":"X_full.describe(include='all')","4160aaf8":"# Pair plot, we can look at the interaction of features with each other\npair_grid_plot = sns.PairGrid(data=X_full)\npair_grid_plot.map(plt.scatter)\nplt.show()","c01225cd":"# Estimate how many passengers survived in total\nsns.countplot(x='Survived', data=X_full)\nplt.show()\n\nprint(f\"Totally survived: {(X_full.Survived.sum() \/ X_full.Survived.count()):.2f}\")","2c410d0c":"# Assess whether gender affects survival\nsns.catplot(x='Sex', col='Survived', kind='count', data=X_full)\nplt.show()","fefb31f2":"# More clearly\nplt.figure(figsize=(16, 8))\nplt.subplot(1, 2, 1)\nX_full.Survived[X_full.Sex == 'male'].value_counts().plot.pie(explode=[0, 0.2], autopct='%1.1f%%', shadow=True)\nplt.subplot(1, 2, 2)\nX_full.Survived[X_full.Sex == 'female'].value_counts().plot.pie(explode=[0, 0.2], autopct='%1.1f%%', shadow=True)\nplt.show()","db287635":"# Crosstab of survived people depending on class\npd.crosstab(index=X_full.Pclass, columns=X_full.Survived, margins=True)","1dfb0171":"# Let's look at the correlation between features and make the first\n# conclusion about which features are important in analysis\nX_full_corr = X_full.copy()\n\nX_full_corr = pd.get_dummies(X_full_corr, columns=['Sex', 'Embarked', 'Pclass'], drop_first=True)\nX_full_corr.drop(['Name', 'Ticket', 'Cabin'], axis=1, inplace=True)\nX_full_corr.dropna(inplace=True)\n\ncorr = X_full_corr.corr()\n\nplt.figure(figsize=(10, 8))\nsns.heatmap(corr, annot=True, fmt='.2f')\nplt.show()","75bb2400":"# Remove rows with missing target, separate target from predictors\nX_full.dropna(axis=0, subset=['Survived'], inplace=True)\ny = X_full.Survived\nX_full.drop(['Survived'], axis=1, inplace=True)","096c0c49":"# Break off validation set from training data\nX_train_full, X_valid_full, y_train, y_valid = train_test_split(X_full, y,\n                                                                train_size=0.7,\n                                                                test_size=0.3,\n                                                                random_state=0)","259423ad":"# Select numerical columns\nnumerical_cols = [c_name for c_name in X_train_full.columns if \n                  X_train_full[c_name].dtype in ['int64', 'float64']]\n\n# Select categorical columns\ncategorical_cols = [c_name for c_name in X_train_full.columns if \n                    X_train_full[c_name].nunique() < 10 and\n                    X_train_full[c_name].dtype == 'object']","b98feb79":"# Keep selected cols only\ncols = numerical_cols + categorical_cols\n\nX_train = X_train_full[cols].copy()\nX_valid = X_valid_full[cols].copy()\nX_test = X_test_full[cols].copy()","1775a27e":"# Processing for numerical data\nnumerical_transformer = SimpleImputer(strategy='most_frequent')\n\n# Processing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])","4f1a91c5":"model = XGBClassifier(n_estimators=1000, learning_rate=0.05)\n\nclf = Pipeline(steps=[\n    ('preprocessor', preprocessor),\n    ('model', model)\n])\n\nclf.fit(X_train, y_train)\n\npreds = clf.predict(X_valid)\nprint(f'Accuracy: = {accuracy_score(y_valid, preds):.2f}')","29b4dccf":"clf.get_params().keys()","91a96b52":"parameters_grid = {\n    'model__learning_rate': [0.01, 0.05, 0.1],\n    'model__n_estimators': [n for n in range(200, 1001, 200)],\n    'preprocessor__num__strategy': ['mean', 'median', 'most_frequent', 'constant'],\n    'preprocessor__cat__imputer__strategy': ['most_frequent', 'constant']\n}","73af27ef":"#grid_cv = GridSearchCV(clf, parameters_grid, scoring='accuracy', cv=5)\n#grid_cv.fit(X_train, y_train)\n\n#print(grid_cv.best_score_)\n#print(grid_cv.best_params_)","ccf9dd51":"# Processing for numerical data\nnumerical_transformer = SimpleImputer(strategy='most_frequent')\n\n# Processing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])","fc3344d4":"model = XGBClassifier(n_estimators=200, learning_rate=0.01)\n\nclf = Pipeline(steps=[\n    ('preprocessor', preprocessor),\n    ('model', model)\n])\n\nclf.fit(X_train, y_train)\n\npreds = clf.predict(X_valid)\nprint(f'Accuracy: = {accuracy_score(y_valid, preds):.2f}')","7dca290d":"preds_test = clf.predict(X_test)\n\ny_test = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\n\nprint(f\"Accuracy: {(accuracy_score(y_test.Survived.values, preds_test) * 100):.2f} %\")","68ef93a8":"# Extra: testing on test data","cb434c7f":"# 4. Final model","f2dc9892":"# 2. Building first model","7a9bba66":"#### 1.1. Loading data","22c62ad7":"# 3. Tuning hyperparameters","07dcd4f4":"#### 1.4. Transforming data","f7cff4b8":"#### 1.2. Visualize data","c4b2e742":"#### 1.3. Preparing data","679540c6":"# 1. Preparing data"}}