{"cell_type":{"15e1cfe7":"code","3ab0fa48":"code","2c7b8b49":"code","b89b89fe":"code","cab18745":"code","e1526c60":"code","ddec84f8":"code","9f938b89":"code","1ec76ad7":"code","680eafcf":"code","a3b1dec8":"code","e829e86f":"code","5418a6bd":"code","c4fb996c":"code","b5f6ba36":"code","68691471":"code","ad9cafae":"code","96086216":"code","2ecb678e":"code","6a2300bf":"code","2c6f9e6a":"code","5c0ef961":"code","28f09c87":"code","cd4f56a9":"code","1a3c8c4f":"code","22b84285":"code","e66f7c63":"code","7b4bd957":"code","88aa8f9b":"code","168ad3c0":"code","3b7a253e":"code","40197f11":"code","dbbfc72d":"code","773fbb4e":"code","3af7bff1":"code","dccfc9f4":"code","3c4af0f5":"code","f39bf321":"code","dca8e109":"code","c06ea6db":"code","f9f98924":"code","d7fd8a51":"code","162b7de4":"code","362de051":"code","dc003be3":"code","f83190d6":"code","f5e2bd84":"code","25781f41":"code","b2703aec":"code","2ee9f90f":"code","84def63c":"code","332dff69":"code","adcb702b":"code","1728f096":"code","51031a28":"code","4d878b23":"code","ad9c7252":"code","96aab56d":"code","6f99f013":"code","a8001659":"code","1a4f4753":"code","f03cde7e":"code","4b1922df":"code","b76ee2c1":"code","5535f4f0":"code","b9947494":"code","fcdb060a":"code","c8e7473d":"code","d27ab862":"code","87a15be1":"code","1618075a":"code","08fa6091":"code","d4eadf5b":"code","508a172b":"code","9db6e84a":"code","438b6dbb":"code","b631bb50":"code","1e80515c":"code","a08a65ed":"code","e5653733":"code","9e516100":"code","2a57df69":"code","1a54bc48":"code","c54262b5":"code","14e1ba78":"code","ae25fab3":"code","2a56cdf8":"code","1b188ea7":"code","2090cf3d":"code","9c87ce20":"code","f1055249":"code","97d19ddb":"markdown","67d11f34":"markdown","4a472fa0":"markdown","014661c6":"markdown","0297c832":"markdown","a465da80":"markdown","37b7a114":"markdown","cc4e560c":"markdown","9d9bd032":"markdown","70b4032a":"markdown","d6211f8d":"markdown","61a54bf1":"markdown","2aa3dc2d":"markdown","7de50491":"markdown","795f4494":"markdown","b1af56c8":"markdown","b889b1fb":"markdown","d7875163":"markdown","1995d607":"markdown"},"source":{"15e1cfe7":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy             as np\nimport pandas            as pd\nimport seaborn           as sns\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\n\nplt.rcParams['figure.dpi'] = 100","3ab0fa48":"# Path of the file to read\ncandy_filepath = '..\/input\/data-for-datavis\/candy.csv'\n\n# Fill in the line below to read the file into a variable candy_data\ncandy_data = pd.read_csv(candy_filepath, index_col='id')\n\n# Scatter plot showing the relationship between 'sugarpercent' and 'winpercent'\nsns.scatterplot(x=candy_data['sugarpercent'], y=candy_data['winpercent'])","2c7b8b49":"# Scatter plot showing the relationship between 'pricepercent', 'winpercent', and 'chocolate'\nsns.scatterplot(x=candy_data['pricepercent'], y=candy_data['winpercent'], hue=candy_data['chocolate'])","b89b89fe":"# Color-coded scatter plot with regression lines\nsns.lmplot(x='pricepercent', y='winpercent', hue='chocolate', data=candy_data)","cab18745":"# Scatter plot showing the relationship between 'chocolate' and 'winpercent'\nsns.swarmplot(x=candy_data['chocolate'], y=candy_data['winpercent'])","e1526c60":"tips = pd.read_csv('..\/input\/seaborn-tips-dataset\/tips.csv')\n\n# Scatter plot with two variables (two-demensional)\nsns.relplot(x='total_bill', y='tip', color='b', data=tips)","ddec84f8":"# Scatter plot with three variables (third dimension is a color of points)\nsns.relplot(x='total_bill', y='tip', hue='smoker', palette='viridis', data=tips)","9f938b89":"# Scatter plot with different marker styles\nsns.relplot(x='total_bill', y='tip', hue='smoker', style='smoker',\n            data=tips, palette = 'viridis')","1ec76ad7":"# Scatter plot with four variables\nsns.relplot(x='total_bill', y='tip', hue='smoker', style='time', data=tips, palette='viridis')","680eafcf":"# Scatter plot with numeric hue semantic\nsns.relplot(x='total_bill', y='tip', hue='size', data=tips)","a3b1dec8":"# Scatter plot with size semantic as third variable \nsns.relplot(x='total_bill', y='tip', size='size', data=tips)","e829e86f":"# Scatter plt with customized markers size\nsns.relplot(x='total_bill', y='tip', size='size', sizes=(15, 200), data=tips)","5418a6bd":"# Path of the file to read\nmuseum_filepath = '..\/input\/data-for-datavis\/museum_visitors.csv'\n\n# Fill in the line below to read the file into a variable museum_data\nmuseum_data = pd.read_csv(museum_filepath, index_col='Date', parse_dates=True)\n\n# Line chart showing the number of visitors to each museum over time\nplt.figure(figsize=(10, 5))\nsns.lineplot(data=museum_data)","c4fb996c":"# Line plot showing the number of visitors to Avila Adobe over time\nplt.figure(figsize=(10, 5))\nsns.lineplot(data=museum_data['Avila Adobe'])","b5f6ba36":"df = pd.DataFrame(dict(time=np.arange(500), value=np.random.randn(500).cumsum()))","68691471":"# Line plot using sns.relplot() with kind='line'\ng = sns.relplot(x='time', y='value', kind='line', data=df)\ng.fig.autofmt_xdate()","ad9cafae":"# Line plot without sorting x values: sort=False\ndf = pd.DataFrame(np.random.randn(500, 2).cumsum(axis=0), columns=['x', 'y'])\nsns.relplot(x='x', y='y', sort=False, kind='line', data=df);","96086216":"fmri = pd.read_csv('..\/input\/seaborn-fmri-dataset\/fmri.csv')\n\n# Line plot with default aggregation the multiple measurements at each x value \n# plotting the mean and the 95% confidence interval around the mean\n\nsns.relplot(x='timepoint', y='signal', kind='line', data=fmri, color='blue')","2ecb678e":"# Line plot without visualization of Confidence Interval: ci=None\nsns.relplot(x='timepoint', y='signal', ci=None, kind='line', color='blue', data=fmri)","6a2300bf":"# Lineplot with standard deviation instead of confidence interval\nsns.relplot(x='timepoint', y='signal', kind='line', ci=\"sd\", data=fmri)","2c6f9e6a":"# Line plot without aggregation: estimator=None\nsns.relplot(x='timepoint', y='signal', estimator=None, kind='line', data=fmri)","5c0ef961":"# Line plot with aggregation for three variables (hue semantic)\nsns.relplot(x='timepoint', y='signal', hue='event', kind='line', data=fmri)","28f09c87":"# Line plot with aggregation wuth four variables (x, y, hue, style) without markers\nsns.relplot(x=\"timepoint\", y=\"signal\", hue=\"region\", style=\"event\",\n            kind=\"line\", data=fmri)","cd4f56a9":"# line plot with aggregation wuth four variables (x, y, hue, style) with markers\n\nsns.relplot(x=\"timepoint\", y=\"signal\", hue=\"region\", style=\"event\",\n            dashes=False, markers=True, kind=\"line\", data=fmri);","1a3c8c4f":"# line plot with both hue and style used for one variable\n\nsns.relplot(x=\"timepoint\", y=\"signal\", hue=\"event\", style=\"event\",\n            kind=\"line\", data=fmri);","22b84285":"# line plot with numeric hue variable\n\ndots = pd.read_csv('..\/input\/seaborn-dots-dataset\/dots.csv').query(\"align == 'dots'\")\nsns.relplot(x=\"time\", y=\"firing_rate\",\n            hue=\"coherence\", style=\"choice\",\n            kind=\"line\", data=dots);","e66f7c63":"# line plot with customized specific color values for each line\n\npalette = sns.cubehelix_palette(light=0.6, n_colors=6)\nsns.relplot(x=\"time\", y=\"firing_rate\",\n            hue=\"coherence\", style=\"choice\",\n            palette=palette,\n            kind=\"line\", data=dots);","7b4bd957":"# line plot with Data values\n\ndf = pd.DataFrame(dict(time=pd.date_range(\"2017-1-1\", periods=500),\n                       value=np.random.randn(500).cumsum()))\ng = sns.relplot(x=\"time\", y=\"value\", kind=\"line\", data=df)\ng.fig.autofmt_xdate()","88aa8f9b":"# line plots on one picture with subset of data devided by columns and rows\n\nsns.relplot(x=\"timepoint\", y=\"signal\", hue=\"subject\",\n            col=\"region\", row=\"event\",palette = 'viridis', height=3,\n            kind=\"line\", estimator=None, data=fmri);","168ad3c0":"# line plots faceted on the columns and 'wraped' into rows\n\nsns.relplot(x=\"timepoint\", y=\"signal\", hue=\"event\", style=\"event\",\n            col=\"subject\", col_wrap=5,palette = 'viridis',\n            height=3, aspect=.75, linewidth=2.5,\n            kind=\"line\", data=fmri.query(\"region == 'frontal'\"));","3b7a253e":"sns.set(style=\"ticks\", color_codes=True)","40197f11":"# catplot with default parameters\n\nsns.catplot(x=\"day\", y=\"total_bill\", data=tips, jitter = True)","dbbfc72d":"# catplot with jitter=False\n\nsns.catplot(x=\"day\", y=\"total_bill\", data=tips, jitter = False);","773fbb4e":"# catplot without points overlapping: kind='swarm'\n\nsns.catplot(x=\"day\", y=\"total_bill\", kind=\"swarm\", data=tips)","3af7bff1":"# catplot with third variable - hue semantic\n\nsns.catplot(x=\"day\", y=\"total_bill\", hue=\"sex\", kind=\"swarm\", data=tips);","dccfc9f4":"sns.catplot(x=\"size\", y=\"total_bill\", kind=\"swarm\",\n            data=tips.query(\"size != 3\"));","3c4af0f5":"# catplot with customized values order\n\nsns.catplot(x=\"smoker\", y=\"tip\", order=[\"No\", \"Yes\"], data=tips);","f39bf321":"# catplot with horizontal axis of categorical data\n\nsns.catplot(x=\"total_bill\", y=\"day\", hue=\"time\", kind=\"swarm\", data=tips);","dca8e109":"# boxplot\n\nsns.catplot(x=\"day\", y=\"total_bill\", kind=\"box\", data=tips);","c06ea6db":"# boxplot with third variable by hue semantic\n\nsns.catplot(x=\"day\", y=\"total_bill\", hue=\"smoker\", kind=\"box\", data=tips);","f9f98924":"# boxplot without 'dodging': dodge=False\n\ntips[\"weekend\"] = tips[\"day\"].isin([\"Sat\", \"Sun\"])\nsns.catplot(x=\"day\", y=\"total_bill\", hue=\"weekend\",\n            kind=\"box\", dodge=False, data=tips);","d7fd8a51":"# boxplot with 'boxen' style\n\ndiamonds = pd.read_csv('..\/input\/diamonds\/diamonds.csv')\nsns.catplot(x=\"color\", y=\"price\", kind=\"boxen\",\n            data=diamonds.sort_values(\"color\"));","162b7de4":"sns.catplot(x=\"total_bill\", y=\"day\", hue=\"sex\",\n            kind=\"violin\", data=tips);","362de051":"# violinplot with 'splited' violins\n\nsns.catplot(x=\"day\", y=\"total_bill\", hue=\"sex\",\n            kind=\"violin\", split=True, data=tips);","dc003be3":"sns.catplot(x=\"day\", y=\"total_bill\", hue=\"sex\",\n            kind=\"violin\", inner=\"stick\", split=True,\n            palette=\"pastel\", data=tips);","f83190d6":"# violinplot combined with swarmplot\n\ng = sns.catplot(x=\"day\", y=\"total_bill\", kind=\"violin\", inner=None, data=tips)\nsns.swarmplot(x=\"day\", y=\"total_bill\", color=\"k\", size=3, data=tips, ax=g.ax);","f5e2bd84":"# Path of the file to read\nign_filepath = '..\/input\/data-for-datavis\/ign_scores.csv'\n\n# Fill in the line below to read the file into a variable ign_data\nign_data = pd.read_csv(ign_filepath, index_col=\"Platform\")\n\n# Bar chart showing average score for racing games by platform\nplt.figure(figsize=(15, 4)) # Your code here\nsns.barplot(x=ign_data.index, y=ign_data['Racing'])","25781f41":"titanic = pd.read_csv('..\/input\/python-seaborn-datas\/titanic.csv')\nsns.catplot(x=\"Sex\", y=\"Survived\", hue=\"Pclass\", kind=\"bar\", data=titanic);","b2703aec":"sns.catplot(x=\"Survived\", kind=\"count\", palette=\"ch:.25\", data=titanic);","2ee9f90f":"sns.catplot(y=\"Survived\", hue=\"Pclass\", kind=\"count\",\n            palette=\"pastel\", edgecolor=\".6\",\n            data=titanic);","84def63c":"plt.figure(figsize=[10,5])\nsns.countplot(x = 'chocolate', hue = 'hard', data = candy_data)\nplt.xticks(rotation = 20);","332dff69":"# Heatmap showing average game score by platform and genre\nplt.figure(figsize=(14, 7))\nsns.heatmap(data=ign_data, annot=True)","adcb702b":"sns.catplot(x=\"Sex\", y=\"Survived\", hue=\"Pclass\", kind=\"point\", data=titanic);","1728f096":"sns.catplot(x=\"Pclass\", y=\"Survived\", hue=\"Sex\",\n            palette={\"male\": \"g\", \"female\": \"m\"},\n            markers=[\"^\", \"o\"], linestyles=[\"-\", \"--\"],\n            kind=\"point\", data=titanic);","51031a28":"iris = pd.read_csv('..\/input\/seaborn-iris-dataset\/iris.csv')\nsns.catplot(data=iris, orient=\"h\", kind=\"box\");","4d878b23":"sns.violinplot(x=iris.species, y=iris.sepal_length);","ad9c7252":"g = sns.catplot(x=\"Fare\", y=\"Survived\", row=\"Pclass\",\n                kind=\"box\", orient=\"h\", height=1.5, aspect=4,\n                data=titanic.query(\"Fare > 0\"))\ng.set(xscale=\"log\");","96aab56d":"from scipy import stats\nsns.set(color_codes=True)","6f99f013":"# Paths of the files to read\ncancer_b_filepath = '..\/input\/data-for-datavis\/cancer_b.csv'\ncancer_m_filepath = '..\/input\/data-for-datavis\/cancer_m.csv'\n\n# Fill in the line below to read the (benign) file into a variable cancer_b_data\ncancer_b_data = pd.read_csv(cancer_b_filepath, index_col='Id')\n\n# Fill in the line below to read the (malignant) file into a variable cancer_m_data\ncancer_m_data = pd.read_csv(cancer_m_filepath, index_col='Id')","a8001659":"# Histograms for benign and maligant tumors\nsns.distplot(a=cancer_m_data['Area (mean)'], kde=False)\nsns.distplot(a=cancer_b_data['Area (mean)'], kde=False)","1a4f4753":"# KDE plots for benign and malignant tumors\nsns.kdeplot(data=cancer_b_data['Radius (worst)'], shade=True)\nsns.kdeplot(data=cancer_m_data['Radius (worst)'], shade=True)","f03cde7e":"x = np.random.normal(size=100)\nsns.distplot(x);","4b1922df":"# displot as Histogram\n\nsns.distplot(x, kde=False, rug=True);","b76ee2c1":"sns.distplot(x, bins=20, kde=False, rug=True);","5535f4f0":"sns.distplot(x, hist=False, rug=True);","b9947494":"sns.kdeplot(x, shade=True);","fcdb060a":"# The bandwidth (bw) parameter of the KDE controls how tightly the estimation is fit to the data,\n# much like the bin size in a histogram. \n# The default behavior tries to guess a good value using a common reference rule, \n# but it may be helpful to try larger or smaller values\n\nsns.kdeplot(x)\nsns.kdeplot(x, bw=.2, label=\"bw: 0.2\")\nsns.kdeplot(x, bw=2, label=\"bw: 2\")\nplt.legend();","c8e7473d":"sns.kdeplot(x, shade=True, cut=0)\nsns.rugplot(x);","d27ab862":"mean, cov = [0, 1], [(1, .5), (.5, 1)]\ndata = np.random.multivariate_normal(mean, cov, 200)\ndf = pd.DataFrame(data, columns=[\"x\", \"y\"])","87a15be1":"# jointplot for sctterplots - visualizing a bivariate distribution\n\nsns.jointplot(x=\"x\", y=\"y\", data=df);","1618075a":"# jointplot 'hexbin' plot - a bivariate analogue of a histogram - \n\nx, y = np.random.multivariate_normal(mean, cov, 1000).T\nwith sns.axes_style(\"white\"):\n    sns.jointplot(x=x, y=y, kind=\"hex\", color=\"k\");","08fa6091":"# jointplot as KDE\n\nsns.jointplot(x=\"x\", y=\"y\", data=df, kind=\"kde\");","d4eadf5b":"f, ax = plt.subplots(figsize=(6, 6))\nsns.kdeplot(df.x, df.y, ax=ax)\nsns.rugplot(df.x, color=\"g\", ax=ax)\nsns.rugplot(df.y, vertical=True, ax=ax);","508a172b":"f, ax = plt.subplots(figsize=(6, 6))\ncmap = sns.cubehelix_palette(as_cmap=True, dark=0, light=1, reverse=True)\nsns.kdeplot(df.x, df.y, cmap=cmap, n_levels=60, shade=True);","9db6e84a":"# customizing JointGrid object\n\ng = sns.jointplot(x=\"x\", y=\"y\", data=df, kind=\"kde\", color=\"m\")\ng.plot_joint(plt.scatter, c=\"w\", s=30, linewidth=1, marker=\"+\")\ng.ax_joint.collections[0].set_alpha(0)\ng.set_axis_labels(\"$X$\", \"$Y$\");","438b6dbb":"sns.pairplot(iris);","b631bb50":"sns.pairplot(iris, hue=\"species\");","1e80515c":"g = sns.PairGrid(iris)\ng.map_diag(sns.kdeplot)\ng.map_offdiag(sns.kdeplot, n_levels=6);","a08a65ed":"sns.regplot(x=\"total_bill\", y=\"tip\", data=tips);","e5653733":"sns.lmplot(x=\"size\", y=\"tip\", data=tips);","9e516100":"sns.lmplot(x=\"size\", y=\"tip\", data=tips, x_jitter=.05);","2a57df69":"sns.lmplot(x=\"size\", y=\"tip\", data=tips, x_estimator=np.mean);","1a54bc48":"# lmplot with binary y variable\n\ntips[\"big_tip\"] = (tips.tip \/ tips.total_bill) > .15\nsns.lmplot(x=\"total_bill\", y=\"big_tip\", data=tips,\n           y_jitter=.03);","c54262b5":"# lmplot with Loistic regression (in case of binary y data)\n\nsns.lmplot(x=\"total_bill\", y=\"big_tip\", data=tips,\n           logistic=True, y_jitter=.03);","14e1ba78":"sns.lmplot(x=\"total_bill\", y=\"tip\", data=tips,\n           lowess=True);","ae25fab3":"sns.lmplot(x=\"total_bill\", y=\"tip\", hue=\"smoker\", data=tips);","2a56cdf8":"sns.lmplot(x=\"total_bill\", y=\"tip\", hue=\"smoker\", data=tips,\n           markers=[\"o\", \"x\"], palette=\"Set1\");","1b188ea7":"sns.lmplot(x=\"total_bill\", y=\"tip\", hue=\"smoker\",\n           col=\"time\", row=\"sex\", data=tips);","2090cf3d":"g = sns.FacetGrid(tips, col=\"sex\", hue=\"smoker\")\ng.map(plt.scatter, \"total_bill\", \"tip\", alpha=.7)\ng.add_legend();","9c87ce20":"ordered_days = tips.day.value_counts().index\n\ng = sns.FacetGrid(tips, row=\"day\", row_order=ordered_days,\n                  height=1.7, aspect=4,)\n\ng.map(sns.distplot, \"total_bill\", hist=False, rug=True);","f1055249":"# Change the style of the figure to the \"dark\" theme\nsns.set_style('dark')\nplt.figure(figsize=(10, 4))\nsns.lineplot(data=museum_data['Avila Adobe'])","97d19ddb":"# FacetGrid","67d11f34":"# Jointplots","4a472fa0":"# Linear Relationships","014661c6":"# Changing styles with seaborn","0297c832":"# Bar plots","a465da80":"# Point plots","37b7a114":"# Pairplot","cc4e560c":"![What would you like to show?](https:\/\/sun9-70.userapi.com\/MG2SPUAk0SYYCFyOUkGBd-UNST5yeLoNXrfNjA\/xepSbWe4jKg.jpg) ","9d9bd032":"# Line Plots","70b4032a":"# Scatter Plots","d6211f8d":"Seaborn has five different themes:\n* 'darkgrid',\n* 'whitegrid',\n* 'dark',\n* 'white',\n* 'ticks'.","61a54bf1":"# Categorical Scatterplots","2aa3dc2d":"**Trends** - A trend is defined as a pattern of change.\n* sns.lineplot - **Line charts** are best to show trends over a period of time, and multiple lines can be used to show trends in more than one group.\n\n**Relationship** - There are many different chart types that you can use to understand relationships between variables in your data.\n* sns.barplot - **Bar charts** are useful for comparing quantities corresponding to different groups.\n* sns.heatmap - **Heatmaps** can be used to find color-coded patterns in tables of numbers.\n* sns.scatterplot - **Scatter plots** show the relationship between two continuous variables; if color-coded, we can also show the relationship with a third categorical variable.\n* sns.regplot - Including a **regression line** in the scatter plot makes it easier to see any linear relationship between two variables.\n* sns.lmplot - This command is useful for drawing **multiple regression lines**, if the scatter plot contains multiple, color-coded groups.\n* sns.swarmplot - **Categorical scatter plots** show the relationship between a continuous variable and a categorical variable.\n\n**Distribution** - We visualize distributions to show the possible values that we can expect to see in a variable, along with how likely they are.\n* sns.distplot - **Histograms** show the distribution of a single numerical variable.\n* sns.kdeplot - **KDE plots** (or **2D KDE plots**) show an estimated, smooth distribution of a single numerical variable (or two numerical variables).\n* sns.jointplot - This command is useful for simultaneously displaying a 2D KDE plot with the corresponding KDE plots for each individual variable.\n\n**Categorical scatterplots:**\n* sns.stripplot() (with kind=\"strip\"; the default)\n* sns.swarmplot() (with kind=\"swarm\")\n\n**Categorical distribution plots:**\n* sns.boxplot() (with kind=\"box\")\n* sns.violinplot() (with kind=\"violin\")\n* sns.boxenplot() (with kind=\"boxen\")\n\n**Categorical estimate plots:**\n* sns.pointplot() (with kind=\"point\")\n* sns.barplot() (with kind=\"bar\")\n* sns.countplot() (with kind=\"count\")","7de50491":"# Heatmap","795f4494":"This is a cheat sheet for Data Visualization with Seaborn.\nIn this notebooks I use information from:\n* kaggle notebook [Complete Data Visualization Tutorial Seaborn !!!](https:\/\/www.kaggle.com\/ravichaubey1506\/complete-data-visualization-tutorial-seaborn#Statistical-Relationships);\n* kaggle course [Data Visualization](https:\/\/www.kaggle.com\/learn\/data-visualization).\n\n*Please feel free to leave comments and advices, up-votes are really appreciated!)*","b1af56c8":"# Plotting Distributions","b889b1fb":"# Violinplots","d7875163":"# Boxplots","1995d607":"# Count Plots"}}