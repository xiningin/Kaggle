{"cell_type":{"fff232ca":"code","366f95ab":"code","52d84579":"code","af57a6ae":"code","aa1b384e":"code","5e95c57d":"code","2057591e":"code","de5002ce":"code","f8f6fb25":"code","cfbb90a1":"code","ada40427":"code","48a33808":"code","0bbcae1e":"code","d7033dc8":"code","96e3dfb9":"code","7e2c7843":"code","bb6a680b":"code","0be51325":"code","08efa3a5":"code","6777fc6a":"code","b8d15fc6":"code","bcf52ea6":"code","0ba664fe":"code","a71cfe9a":"code","24ab29b5":"code","356dcd37":"code","8dae403c":"code","b2210215":"code","b99972a9":"code","e01ba0f9":"code","a0aa1964":"code","c0f5d329":"code","ea11d7ff":"code","2d9f8a0e":"code","07118d81":"code","b26a4894":"code","f68f72fa":"code","97029433":"code","0a8c8619":"code","96b559ca":"code","3d658617":"code","7504c58f":"code","022d111d":"code","254faf12":"code","b057b354":"code","7e1f62ca":"code","6f32c06f":"code","f558ae6e":"code","1cfb0377":"code","2b10021e":"code","0f1142dd":"code","4a7c5fae":"code","00c1600a":"code","cb346d47":"code","0441c0d6":"code","af6f38ba":"code","e151a6b0":"code","45b12138":"code","dc14b5f4":"code","e148ea74":"code","7bb29c28":"code","e462c259":"code","abd22ffb":"code","8e3b5f96":"code","f465573d":"code","073eaedd":"code","e2d4c1f6":"code","8fd75dad":"code","8f188fbf":"code","c186da1a":"code","4d440173":"code","e957e1ba":"code","29c6df83":"code","95aae377":"code","29ef22fa":"code","65b1bb93":"code","98732b69":"code","b1010483":"code","67d7fc54":"code","b6ddfcd4":"code","c67f03b5":"code","7e5a789c":"code","0c1e8d5c":"code","dbb1bf42":"code","f8b9467a":"code","24aa8bd9":"code","c9f6fb4e":"code","fcc3b577":"code","08eb0372":"code","806a0006":"code","c07cfdff":"code","ec4474f9":"code","52cd1d23":"code","536cd534":"code","1180d437":"code","d46b41ba":"code","0c77a81a":"code","5fa79bc2":"code","4ac2385a":"code","b7d652ca":"code","3430afb6":"code","aaa046ab":"code","780a6712":"code","604245d0":"code","43ad36a1":"code","9314cac0":"code","031a7145":"markdown","61b318dd":"markdown","e22a77a2":"markdown","be6aecc0":"markdown","4ec59f7a":"markdown","651b2ef0":"markdown","5978e034":"markdown","e7df8a50":"markdown","6682c5a7":"markdown","9c142763":"markdown","d457039c":"markdown","638e97e2":"markdown","b2c23616":"markdown","614a8a15":"markdown","a888f53e":"markdown","749bfc4a":"markdown","89711796":"markdown","94b020e1":"markdown","615a892d":"markdown","d03ced17":"markdown","4eb57709":"markdown","e7d70db6":"markdown","e45390b5":"markdown","5ea02778":"markdown","5496cbb4":"markdown","6585b049":"markdown","075ec6ae":"markdown","72dc5ee3":"markdown","e9872e4b":"markdown","46832574":"markdown","728a9f4a":"markdown","24c101a5":"markdown","65ea86f1":"markdown","7747d3f1":"markdown","210af032":"markdown","c874b11f":"markdown","206f6b9e":"markdown","e3426217":"markdown","7e010f55":"markdown","6495c9ed":"markdown","ad30da54":"markdown","9ac62ed8":"markdown","8ab587d1":"markdown","1327a716":"markdown","1bb317c7":"markdown","5a8c3581":"markdown","c3c0c13b":"markdown","5fa10a0a":"markdown","57c27d7b":"markdown","848b1d5c":"markdown","40f05bb1":"markdown","63e8690b":"markdown","feb9fdc5":"markdown","6e7c0d72":"markdown","52f1c926":"markdown","56d86a2c":"markdown","e2b74ed8":"markdown","d3a79c38":"markdown","6da1ea74":"markdown","e9c2b004":"markdown","211ff12d":"markdown","8513f49c":"markdown","07e670d1":"markdown","abc16261":"markdown","7a311cf2":"markdown","b8ad3f56":"markdown","66f713bf":"markdown","aed08b2b":"markdown","2f1e8ba4":"markdown","30f7d2e6":"markdown","ccbc2f08":"markdown","a3bcb1e9":"markdown","e5ddad5b":"markdown","f39448e2":"markdown","6c9778a8":"markdown","705857c2":"markdown","05084c32":"markdown","bda3837e":"markdown","c8e534ec":"markdown"},"source":{"fff232ca":"# Alumnos:\n#CALVO, MATEO IV\u00c1N - 98290\n#GUTIERREZ, MAT\u00cdAS - 92172\n#PENNA, SEBASTIAN IGNACIO - 98752\n#Link de GitHub: https:\/\/github.com\/mateoicalvo\/OrganizacionDeDatos","366f95ab":"import numpy as np\nimport pandas as pd\nimport math\nimport matplotlib.pyplot as plt\nfrom IPython.display import HTML\nfrom IPython.core.display import display, HTML\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nplt.style.use('default')\ndisplay(HTML(\"<style>.container { width:90% !important; }<\/style>\"))\nimport seaborn as sns\nsns.set(style=\"whitegrid\")\n#plotly :\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly import tools\nfrom plotly.offline import iplot, init_notebook_mode\ninit_notebook_mode()","52d84579":"#Importamos los datos a un Data Frame\ndf = pd.read_csv('..\/input\/events.csv',low_memory=False)\nFIG_X, FIG_Y = 5, 5","af57a6ae":"#Verificamos si hay alg\u00fan elemento nulo\n#Hay elementos nulos\ndf.info()","aa1b384e":"#Realizamos la convesion de las fechas\ndf['timestamp']= df['timestamp'].astype('datetime64')\ndf['sku'] = pd.to_numeric(df['sku'], errors = 'coerce')","5e95c57d":"fechas_nulas = df['timestamp'].isnull().any()\nprint('Hay fechas nulas: {}'.format(fechas_nulas))","2057591e":"print('Fecha m\u00ednima: {}'.format(df['timestamp'].min()))\nprint('Fecha m\u00e1xima: {}'.format(df['timestamp'].max()))","de5002ce":"df['mes'] = [x for x in df['timestamp'].dt.month]\ndf['quincena'] = [(1 if x <= 15 else 2) for x in df['timestamp'].dt.day]\ndf['hora'] = [x for x in df['timestamp'].dt.hour]\ndf['dia'] = [x for x in df['timestamp'].dt.day]\ndf['semana'] = [x for x in df['timestamp'].dt.week]\ndf['dia_del_anio'] = [x for x in df['timestamp'].dt.dayofyear]","f8f6fb25":"# Eventos por mes\nfig, ax = plt.subplots(figsize=(FIG_X,FIG_Y))\n\nax.set_title('Eventos por mes')\n\ndf.groupby('mes').count()['event'].plot(kind=\"bar\")\n\nax.set(xlabel='Mes', ylabel='Cantidad de eventos')","cfbb90a1":"# Eventos por d\u00eda del mes\nfig, ax = plt.subplots(figsize=(FIG_X,FIG_Y))\n\nax.set_title('Eventos por dia del mes')\n\ndf.groupby('dia').count()['event'].plot(kind=\"bar\")\n\nax.set(xlabel='D\u00eda del mes', ylabel='Cantidad de eventos')","ada40427":"# Eventos por hora\nfig, ax = plt.subplots(figsize=(FIG_X,FIG_Y))\n\nax.set_title('Eventos por hora del dia')\n\ndf.groupby('hora').count()['event'].plot(kind=\"bar\")\n\nax.set(xlabel='Hora', ylabel='Cantidad de eventos')","48a33808":"# Eventos por mes y quincena\nfig, ax = plt.subplots(figsize=(FIG_X,FIG_Y))\n\nax.set_title('Eventos por quincena')\n\ndf.groupby(['mes', 'quincena']).count()['event'].plot(kind=\"bar\")\n\nax.set(xlabel='(mes, quincena)', ylabel='Cantidad de eventos')","0bbcae1e":"# Producto visto por quincena\nfig, ax = plt.subplots(figsize=(FIG_X,FIG_Y))\n\nax.set_title('Productos vistos por quincena')\n\nax.set(xlabel='Quincena', ylabel='Cantidad de productos vistos')\n\nproductos_vistos = df.loc[df['event'] == 'viewed product',['mes','quincena','event']]\nproductos_vistos.groupby(['mes', 'quincena']).count()['event'].plot(kind=\"bar\")","d7033dc8":"# Producto visto por quincena\nfig, ax = plt.subplots(figsize=(FIG_X,FIG_Y))\n\nax.set_title('Brand listing por quincena')\n\nax.set(xlabel='Quincena', ylabel='Cantidad de listados')\n\nlistados = df.loc[df['event'] == 'brand listing',['mes','quincena','event']]\nlistados.groupby(['mes', 'quincena']).count()['event'].plot(kind=\"bar\")","96e3dfb9":"#Visitas por quincena\nfig, ax = plt.subplots(figsize=(FIG_X,FIG_Y))\n\nax.set_title('Visitas por quincena')\n\nax.set(xlabel='Quincena', ylabel='Cantidad de visitas')\n\nvisitas = df.loc[df['event'] == 'visited site',['mes','quincena','event']]\nvisitas.groupby(['mes', 'quincena']).count()['event'].plot(kind=\"bar\")","7e2c7843":"# Hits a capa\u00f1a de marketing por quincena\nfig, ax = plt.subplots(figsize=(FIG_X,FIG_Y))\n\nax.set_title('Ad campaign hit por quincena')\n\nax.set(xlabel='Quincena', ylabel='Cantidad de hits')\n\nad_hits = df.loc[df['event'] == 'ad campaign hit',['mes','quincena','event']]\nad_hits.groupby(['mes', 'quincena']).count()['event'].plot(kind=\"bar\")","bb6a680b":"\n# Producto buscado por quincena\nfig, ax = plt.subplots(figsize=(FIG_X,FIG_Y))\n\nax.set_title('Busquedas por quincena')\n\nax.set(xlabel='Quincena', ylabel='Cantidad de b\u00fasquedas')\n\nbusquedas = df.loc[df['event'] == 'searched products',['mes','quincena','event']]\nbusquedas.groupby(['mes', 'quincena']).count()['event'].plot(kind=\"bar\")","0be51325":"# Checkouts por quincena\nfig, ax = plt.subplots(figsize=(FIG_X,FIG_Y))\n\nax.set_title('Checkouts por quincena')\n\nax.set(xlabel='Quincena', ylabel='Cantidad de checkouts')\n\ncheckouts = df.loc[df['event'] == 'checkout',['mes','quincena','event']]\ncheckouts.groupby(['mes', 'quincena']).count()['event'].plot(kind=\"bar\")","08efa3a5":"# Conversiones por quincena\nfig, ax = plt.subplots(figsize=(FIG_X,FIG_Y))\n\nax.set_title('Conversiones por quincena')\n\nax.set(xlabel='Quincena', ylabel='Cantidad de conversiones')\n\nconversiones = df.loc[df['event'] == 'conversion',['mes','quincena','event']]\nconversiones.groupby(['mes', 'quincena']).count()['event'].plot(kind=\"bar\")","6777fc6a":"\n# Leads por quincena\nfig, ax = plt.subplots(figsize=(FIG_X,FIG_Y))\n\nax.set_title('Leads por quincena')\n\nax.set(xlabel='Quincena', ylabel='Cantidad de leads')\n\nleads = df.loc[df['event'] == 'lead',['mes','quincena','event']]\nleads.groupby(['mes', 'quincena']).count()['event'].plot(kind=\"bar\")","b8d15fc6":"x = df.loc[df['event'] == 'ad campaign hit',['dia_del_anio','event']]\nx = x.groupby('dia_del_anio').count()['event']\n\ny = df.loc[df['event'] == 'viewed product',['dia_del_anio','event']]\ny = y.groupby('dia_del_anio').count()['event']\n\n\nfor j in x.index:\n    if j not in y.index:\n        y = y.append(pd.Series([0], index=[j]))\n\nplt.scatter(x,y)","bcf52ea6":"x = df.loc[df['event'] == 'searched products',['dia_del_anio','event']]\nx = x.groupby('dia_del_anio').count()['event']\n\ny = df.loc[df['event'] == 'viewed product',['dia_del_anio','event']]\ny = y.groupby('dia_del_anio').count()['event']\n\n\nfor j in x.index:\n    if j not in y.index:\n        y = y.append(pd.Series([0], index=[j]))\n\nplt.scatter(x,y)","0ba664fe":"x = df.loc[df['event'] == 'search engine hit',['dia_del_anio','event']]\nx = x.groupby('dia_del_anio').count()['event']\n\ny = df.loc[df['event'] == 'viewed product',['dia_del_anio','event']]\ny = y.groupby('dia_del_anio').count()['event']\n\n\nfor j in x.index:\n    if j not in y.index:\n        y = y.append(pd.Series([0], index=[j]))\n\nplt.scatter(x,y)","a71cfe9a":"x = df.loc[df['event'] == 'ad campaign hit',['dia_del_anio','event']]\nx = x.groupby('dia_del_anio').count()['event']\n\ny = df.loc[df['event'] == 'brand listing',['dia_del_anio','event']]\ny = y.groupby('dia_del_anio').count()['event']\n\n\nfor j in x.index:\n    if j not in y.index:\n        y = y.append(pd.Series([0], index=[j]))\n\nplt.scatter(x,y)","24ab29b5":"x = df.loc[df['event'] == 'search engine hit',['dia_del_anio','event']]\nx = x.groupby('dia_del_anio').count()['event']\n\ny = df.loc[df['event'] == 'brand listing',['dia_del_anio','event']]\ny = y.groupby('dia_del_anio').count()['event']\n\n\nfor j in x.index:\n    if j not in y.index:\n        y = y.append(pd.Series([0], index=[j]))\n\nplt.scatter(x,y)","356dcd37":"x = df.loc[df['event'] == 'ad campaign hit',['dia_del_anio','event']]\nx = x.groupby('dia_del_anio').count()['event']\n\ny = df.loc[df['event'] == 'visited site',['dia_del_anio','event']]\ny = y.groupby('dia_del_anio').count()['event']\n\n\nfor j in x.index:\n    if j not in y.index:\n        y = y.append(pd.Series([0], index=[j]))\n\nplt.scatter(x,y)","8dae403c":"x = df.loc[df['event'] == 'ad campaign hit',['dia_del_anio','event']]\nx = x.groupby('dia_del_anio').count()['event']\n\ny = df.loc[df['event'] == 'visited site',['dia_del_anio','event']]\ny = y.groupby('dia_del_anio').count()['event']\n\n\nfor j in x.index:\n    if j not in y.index:\n        y = y.append(pd.Series([0], index=[j]))\n\nplt.scatter(x,y)","b2210215":"x = df.loc[df['event'] == 'ad campaign hit',['dia_del_anio','event']]\nx = x.groupby('dia_del_anio').count()['event']\n\ny = df.loc[df['event'] == 'generic listing',['dia_del_anio','event']]\ny = y.groupby('dia_del_anio').count()['event']\n\n\nfor j in x.index:\n    if j not in y.index:\n        y = y.append(pd.Series([0], index=[j]))\n\nplt.scatter(x,y)","b99972a9":"x = df.loc[df['event'] == 'search engine hit',['dia_del_anio','event']]\nx = x.groupby('dia_del_anio').count()['event']\n\ny = df.loc[df['event'] == 'generic listing',['dia_del_anio','event']]\ny = y.groupby('dia_del_anio').count()['event']\n\n\nfor j in x.index:\n    if j not in y.index:\n        y = y.append(pd.Series([0], index=[j]))\n\nplt.scatter(x,y)","e01ba0f9":"x = df.loc[df['event'] == 'visited site',['dia_del_anio','event']]\nx = x.groupby('dia_del_anio').count()['event']\n\ny = df.loc[df['event'] == 'searched products',['dia_del_anio','event']]\ny = y.groupby('dia_del_anio').count()['event']\n\n\nfor j in x.index:\n    if j not in y.index:\n        y = y.append(pd.Series([0], index=[j]))\n\nplt.scatter(x,y)","a0aa1964":"x = df.loc[df['event'] == 'ad campaign hit',['dia_del_anio','event']]\nx = x.groupby('dia_del_anio').count()['event']\n\ny = df.loc[df['event'] == 'search engine hit',['dia_del_anio','event']]\ny = y.groupby('dia_del_anio').count()['event']\n\n\nfor j in x.index:\n    if j not in y.index:\n        y = y.append(pd.Series([0], index=[j]))\n\nfor k in y.index:\n    if k not in x.index:\n        x = x.append(pd.Series([0], index=[k]))\n        \nplt.scatter(x,y)","c0f5d329":"x = df.loc[df['event'] == 'viewed product',['dia_del_anio','event']]\nx = x.groupby('dia_del_anio').count()['event']\n\ny = df.loc[df['event'] == 'checkout',['dia_del_anio','event']]\ny = y.groupby('dia_del_anio').count()['event']\n\n\nfor j in x.index:\n    if j not in y.index:\n        y = y.append(pd.Series([0], index=[j]))\n\nfor k in y.index:\n    if k not in x.index:\n        x = x.append(pd.Series([0], index=[k]))\n        \nplt.scatter(x,y)","ea11d7ff":"x = df.loc[df['event'] == 'visited site',['dia_del_anio','event']]\nx = x.groupby('dia_del_anio').count()['event']\n\ny = df.loc[df['event'] == 'checkout',['dia_del_anio','event']]\ny = y.groupby('dia_del_anio').count()['event']\n\n\nfor j in x.index:\n    if j not in y.index:\n        y = y.append(pd.Series([0], index=[j]))\n\nfor k in y.index:\n    if k not in x.index:\n        x = x.append(pd.Series([0], index=[k]))\n        \nplt.scatter(x,y)","2d9f8a0e":"x = df.loc[df['event'] == 'ad campaign hit',['dia_del_anio','event']]\nx = x.groupby('dia_del_anio').count()['event']\n\ny = df.loc[df['event'] == 'checkout',['dia_del_anio','event']]\ny = y.groupby('dia_del_anio').count()['event']\n\n\nfor j in x.index:\n    if j not in y.index:\n        y = y.append(pd.Series([0], index=[j]))\n\nfor k in y.index:\n    if k not in x.index:\n        x = x.append(pd.Series([0], index=[k]))\n        \nplt.scatter(x,y)","07118d81":"x = df.loc[df['event'] == 'viewed product',['dia_del_anio','event']]\nx = x.groupby('dia_del_anio').count()['event']\n\ny = df.loc[df['event'] == 'conversion',['dia_del_anio','event']]\ny = y.groupby('dia_del_anio').count()['event']\n\n\nfor j in x.index:\n    if j not in y.index:\n        y = y.append(pd.Series([0], index=[j]))\n\nfor k in y.index:\n    if k not in x.index:\n        x = x.append(pd.Series([0], index=[k]))\n        \nplt.scatter(x,y)","b26a4894":"x = df.loc[df['event'] == 'ad campaign hit',['dia_del_anio','event']]\nx = x.groupby('dia_del_anio').count()['event']\n\ny = df.loc[df['event'] == 'conversion',['dia_del_anio','event']]\ny = y.groupby('dia_del_anio').count()['event']\n\n\nfor j in x.index:\n    if j not in y.index:\n        y = y.append(pd.Series([0], index=[j]))\n\nfor k in y.index:\n    if k not in x.index:\n        x = x.append(pd.Series([0], index=[k]))\n        \nplt.scatter(x,y)","f68f72fa":"x = df.loc[df['event'] == 'checkout',['dia_del_anio','event']]\nx = x.groupby('dia_del_anio').count()['event']\n\ny = df.loc[df['event'] == 'conversion',['dia_del_anio','event']]\ny = y.groupby('dia_del_anio').count()['event']\n\n\nfor j in x.index:\n    if j not in y.index:\n        y = y.append(pd.Series([0], index=[j]))\n\nfor k in y.index:\n    if k not in x.index:\n        x = x.append(pd.Series([0], index=[k]))\n        \nplt.scatter(x,y)","97029433":"x = df.loc[df['event'] == 'lead',['dia_del_anio','event']]\nx = x.groupby('dia_del_anio').count()['event']\n\ny = df.loc[df['event'] == 'conversion',['dia_del_anio','event']]\ny = y.groupby('dia_del_anio').count()['event']\n\n\nfor j in x.index:\n    if j not in y.index:\n        y = y.append(pd.Series([0], index=[j]))\n\nfor k in y.index:\n    if k not in x.index:\n        x = x.append(pd.Series([0], index=[k]))\n        \nplt.scatter(x,y)","0a8c8619":"x = df.loc[df['event'] == 'visited site',['dia_del_anio','event']]\nx = x.groupby('dia_del_anio').count()['event']\n\ny = df.loc[df['event'] == 'lead',['dia_del_anio','event']]\ny = y.groupby('dia_del_anio').count()['event']\n\n\nfor j in x.index:\n    if j not in y.index:\n        y = y.append(pd.Series([0], index=[j]))\n\nfor k in y.index:\n    if k not in x.index:\n        x = x.append(pd.Series([0], index=[k]))\n        \nplt.scatter(x,y)","96b559ca":"\nx = df.loc[df['event'] == 'ad campaign hit',['dia_del_anio','event']]\nx = x.groupby('dia_del_anio').count()['event']\n\ny = df.loc[df['event'] == 'lead',['dia_del_anio','event']]\ny = y.groupby('dia_del_anio').count()['event']\n\n\nfor j in x.index:\n    if j not in y.index:\n        y = y.append(pd.Series([0], index=[j]))\n\nfor k in y.index:\n    if k not in x.index:\n        x = x.append(pd.Series([0], index=[k]))\n        \nplt.scatter(x,y)","3d658617":"visitspercountry = df.loc[(df['event']=='visited site') & (df['country']!='Unknown')].groupby(['country'])['event'].agg(['count']).sort_values('count',ascending = False).reset_index()\nvisitspercountry.head(10)","7504c58f":"data = [ dict(\n        type = 'choropleth',\n        showscale = True,\n        locations = visitspercountry['country'],\n        z = visitspercountry['count'],\n        locationmode = 'country names',\n        marker = dict(\n            line = dict (\n                color = 'rgb(200, 200, 200)',\n                width = 1\n            ) ),\n        ) ]\n \nlayout = dict(\n        title = 'Numero de Visitas por Pais',\n        geo = dict(\n            scope = 'world',\n            projection = dict( type='natural earth' ),\n            countrycolor = 'rgb(255, 255, 255)')\n             )\n\nfigure = dict(data=data, layout=layout)\niplot(figure)","022d111d":"plotx = visitspercountry['count'].head(5)\/len(df.loc[(df['event']=='visited site') ,'event'])*100\nploty = visitspercountry['country'].head(5)\n#calculo lo mismo sacando a Brasil\nvisitspercountry = df.loc[(df['event']=='visited site') & (df['country']!='Brazil')  & (df['country']!='Unknown')].groupby(['country'])['event'].agg(['count']).sort_values('count',ascending = False).reset_index()\nplotxb = visitspercountry['count'].head(5)\/len(df.loc[(df['event']=='visited site') ,'event'])*100\nplotyb = visitspercountry['country'].head(5)","254faf12":"fig, ax = plt.subplots(figsize=(10, 3))\nbarlist1 = ax.bar(ploty, plotx,)\nbarlist1[0].set_color('g')\nax.text((barlist1[0].get_x()+(barlist1[0].get_width()\/2))-0.1,barlist1[0].get_height()-10,'%d'%int(barlist1[0].get_height()) + '%', color = 'w')\nlabels = ax.get_xticklabels()\nax.set( xlabel='Pais', ylabel='%',\n       title='Visitas por pais')\nplt.tight_layout()","b057b354":"visitsperregion = df.loc[(df['event']=='visited site') & (df['region']!='Unknown') & (df['country']!='Brazil')].groupby(['country','region'])['event'].value_counts()\nvisitsperregion.sort_values(ascending = False,inplace= True)\nvisitsperregion= visitsperregion.sort_values(ascending = False).reset_index(drop = True, level = 2).reset_index()\nfig, ax = plt.subplots( figsize=(10, 12),)\nplt.axvline(visitsperregion.max().event,color = 'r',ls='--',)\nplt.text(visitsperregion.max().event,-3,'Maximo fuera de Brasil: ' + '%d'%int(visitsperregion.max().event),rotation=90,color ='r')\n#ax.barh(visitsperregion['region'], visitsperregion['event'])\nlabels = ax.get_xticklabels()\nplt.setp(labels, rotation=45, horizontalalignment='right')\nax.set(xlim=[0, visitsperregion.max().event+50], xlabel='Total de visitas', ylabel='Region',\n       title='Visitas por region fuera de Brasil')\nvisitsperregion = df.loc[(df['event']=='visited site') & (df['region']!='Unknown') & (df['country']=='Brazil')].groupby(['country','region'])['event'].value_counts()\nvisitsperregion.sort_values(ascending = False,inplace= True)\nvisitsperregion= visitsperregion.sort_values(ascending = False).reset_index(drop = True, level = 2).reset_index()\nax.barh(visitsperregion['region'], visitsperregion['event'])\nlabels = ax.get_xticklabels()\nplt.setp(labels, rotation=45, horizontalalignment='right')\nax.set(xlim=[0, visitsperregion.max().event+10000], xlabel='Total de visitas', ylabel='Region',\n       title='Visitas por region en Brasil')\nplt.tight_layout()\n\n","7e1f62ca":"visitscity= df.loc[(df['event']=='visited site') & (df['region']!='Unknown')].groupby(['region','city'])['event'].value_counts().reset_index(drop = True , level = 2)\nvisitscity.sort_values(ascending = False,inplace= True)\nvisitscity.to_frame().reset_index().head(10)","6f32c06f":"visitsperregion = df.loc[(df['event']=='visited site') & (df['region']!='Unknown') & (df['country']=='Brazil')].groupby(['region','city'])['event'].value_counts()\nvisitsperregion.sort_values(ascending = False,inplace= True)\nvisitsperregion= visitsperregion.sort_values(ascending = False).head(10).reset_index(drop = True, level = 2).reset_index()\nfig, ax = plt.subplots(figsize=(4, 3))\nax.barh(visitsperregion['city'],visitsperregion['event'],edgecolor='black' )\nax.set(xlim=[0, visitsperregion.max().event+1000], xlabel='Total de visitas', ylabel='Ciudad',\n       title='Visitas por ciudad en Brasil')\nplt.tight_layout()","f558ae6e":"incrementovisitas = df.loc[(df['event']=='visited site')].groupby(['region','timestamp'])['event'].agg(['count']).sort_values('count',ascending = False).reset_index()\nincrementovisitas['just_date'] = incrementovisitas['timestamp'].dt.date\nincrem = incrementovisitas[['region','just_date','count']]","1cfb0377":"increm1 = increm.loc[increm['region']=='Sao Paulo'].groupby(['region','just_date'])['count'].agg(['sum']).reset_index()\nincrem2 = increm.loc[increm['region']=='Minas Gerais'].groupby(['region','just_date'])['count'].agg(['sum']).reset_index()\nincrem3 = increm.loc[increm['region']=='Rio de Janeiro'].groupby(['region','just_date'])['count'].agg(['sum']).reset_index()\nincrem4 = increm.loc[increm['region']=='Bahia'].groupby(['region','just_date'])['count'].agg(['sum']).reset_index()\nincrem5 = increm.loc[increm['region']=='Pernambuco'].groupby(['region','just_date'])['count'].agg(['sum']).reset_index()\nincrem6 = increm.loc[increm['region']=='Ceara'].groupby(['region','just_date'])['count'].agg(['sum']).reset_index()\nincrem7 = increm.loc[increm['region']=='Parana'].groupby(['region','just_date'])['count'].agg(['sum']).reset_index()\nincrem8 = increm.loc[increm['region']=='Rio Grande do Sul'].groupby(['region','just_date'])['count'].agg(['sum']).reset_index()\nincrem9 = increm.loc[increm['region']=='Federal District'].groupby(['region','just_date'])['count'].agg(['sum']).reset_index()\nincrem10 = increm.loc[increm['region']=='Goias'].groupby(['region','just_date'])['count'].agg(['sum']).reset_index()\nfig, ax = plt.subplots(figsize=(10, 6))\nax.set( xlabel='Fecha de visita', ylabel='Cantidad de visitas',\n       title='Visitas por Region en el periodo')\nplt.tight_layout()\nplt.plot(increm1['just_date'],increm1['sum'],label='Sao Paulo')\nplt.plot(increm2['just_date'],increm2['sum'],label ='Minas Gerais')\nplt.plot(increm3['just_date'],increm3['sum'], label ='Rio de Janeiro')\nplt.plot(increm4['just_date'],increm4['sum'], label ='Bahia')\nplt.plot(increm5['just_date'],increm5['sum'], label ='Pernambuco')\nplt.plot(increm6['just_date'],increm6['sum'], label ='Ceara')\nplt.plot(increm7['just_date'],increm7['sum'], label ='Parana')\nplt.plot(increm8['just_date'],increm8['sum'], label ='Rio Grande do Sul')\nplt.plot(increm9['just_date'],increm9['sum'], label ='Federal District')\nplt.plot(increm10['just_date'],increm10['sum'], label ='Goias')\nplt.grid(color='grey', linestyle='--', linewidth=1)\nplt.legend()","2b10021e":"canalincrementovisitas = df.loc[(df['event']=='visited site')].groupby(['channel','timestamp'])['channel'].agg(['count']).sort_values('count',ascending = False).reset_index()\ncanalincrementovisitas['just_date'] = incrementovisitas['timestamp'].dt.date\nincrem = canalincrementovisitas[['channel','just_date','count']]","0f1142dd":"increm1 = increm.loc[increm['channel']=='Direct'].groupby(['channel','just_date'])['count'].agg(['sum']).reset_index()\nincrem2 = increm.loc[increm['channel']=='Paid'].groupby(['channel','just_date'])['count'].agg(['sum']).reset_index()\nincrem3 = increm.loc[increm['channel']=='Email'].groupby(['channel','just_date'])['count'].agg(['sum']).reset_index()\nincrem4 = increm.loc[increm['channel']=='Organic'].groupby(['channel','just_date'])['count'].agg(['sum']).reset_index()\nincrem5 = increm.loc[increm['channel']=='Referral'].groupby(['channel','just_date'])['count'].agg(['sum']).reset_index()\nincrem6 = increm.loc[increm['channel']=='Social'].groupby(['channel','just_date'])['count'].agg(['sum']).reset_index()\nincrem7 = increm.loc[increm['channel']=='Unknown'].groupby(['channel','just_date'])['count'].agg(['sum']).reset_index()\nfig, ax = plt.subplots(figsize=(10, 6))\nax.set( xlabel='Fecha de visita', ylabel='Cantidad de visitas',\n       title='Visitas por Canal en el periodo')\nplt.tight_layout()\nplt.plot(increm1['just_date'],increm1['sum'],label='Direct')\nplt.plot(increm2['just_date'],increm2['sum'],label ='Paid')\nplt.plot(increm3['just_date'],increm3['sum'], label ='Email')\nplt.plot(increm4['just_date'],increm4['sum'], label ='Organic')\nplt.plot(increm5['just_date'],increm5['sum'], label ='Referral')\nplt.plot(increm6['just_date'],increm6['sum'], label ='Social')\nplt.plot(increm7['just_date'],increm7['sum'], label ='Unknown')\nplt.grid(color='grey', linestyle='--', linewidth=1)\nplt.legend()","4a7c5fae":"visitsplatform = df.groupby(['device_type'])['event'].value_counts().reset_index(drop= True, level = 1)\nvisitsplatform.sort_values(ascending = False,inplace= True)\nvisitsplatform = visitsplatform.to_frame().reset_index()\nvisitsplatform","00c1600a":"fig, ax = plt.subplots(1,2,figsize=(10, 2))\nax[0].barh(visitsplatform['device_type'],visitsplatform['event'], color = 'rgb',edgecolor='black')\nax[0].set(xlabel='Total de visitas', ylabel='Dispositivo', title='Dispositivos usados para ingresar al sitio')\nax[1].barh(visitsplatform['device_type'],visitsplatform['event']\/visitsplatform['event'].sum()*100, color = 'rgb',edgecolor='black')\nax[1].set(xlabel='% Total de visitas', ylabel='Dispositivo', title='Dispositivos usados para ingresar al sitio')\nplt.tight_layout()","cb346d47":"visitsos= df.groupby(['device_type','operating_system_version'])['event'].value_counts()\nvisitsos = visitsos.reset_index(drop = True, level = 2).reset_index()\ncomputeros = visitsos.loc[visitsos['device_type']=='Computer']\ntabletos = visitsos.loc[visitsos['device_type']=='Tablet']\nsmartphoneos = visitsos.loc[visitsos['device_type']=='Smartphone']\nOS = computeros.groupby(['operating_system_version'])['event'].sum()\ntOS = tabletos.groupby(['operating_system_version'])['event'].sum()\nsOS = smartphoneos.groupby(['operating_system_version'])['event'].sum()\n","0441c0d6":"Linux = OS.filter(like = 'Linux').sum()  + OS.filter(like = 'Ubuntu').sum()\nMac = OS.filter(like = 'Mac').sum()\nWindows = OS.filter(like = 'Windows').sum()\n\noses = pd.DataFrame(data = {'cant' :[Linux, Mac, Windows]}, index = ['Linux', 'Mac', 'Windows'])\n\noses","af6f38ba":"fig, ax = plt.subplots(1,2,figsize=(10, 2))\nax[0].barh(oses.index,oses['cant'], color = 'rgb',edgecolor='black')\nax[0].set(xlabel='Total de visitas', ylabel='Sistema Operativo', title='Sistemas Operativo usados (computadora)')\nax[1].barh(oses.index,oses['cant']\/oses['cant'].sum()*100, color = 'rgb',edgecolor='black')\nax[1].set(xlabel='% Total de visitas', ylabel='Sistema Operativo', title='Sistemas Operativo usados (computadora)')\nplt.tight_layout()","e151a6b0":"iOS = tOS.filter(like = 'iOS').sum() \nAndroid = tOS.filter(like = 'Android').sum()\ntoses = pd.DataFrame(data = {'cant' :[iOS, Android]}, index = ['iOS', 'Android'])\ntoses","45b12138":"fig, ax = plt.subplots(1,2,figsize=(10, 2))\nax[0].barh(toses.index,toses['cant'], color = 'rgb',edgecolor='black')\nax[0].set(xlabel='Total de visitas', ylabel='Sistema Operativo', title='Sistemas Operativo usados (tablet)')\nax[1].barh(toses.index,toses['cant']\/toses['cant'].sum()*100, color = 'rgb',edgecolor='black')\nax[1].set(xlabel='% Total de visitas', ylabel='Sistema Operativo', title='Sistemas Operativo usados (tablet)')\nplt.tight_layout()","dc14b5f4":"sOS.reset_index()['operating_system_version'].unique()","e148ea74":"Android = sOS.filter(like = 'Android').sum()  + OS.filter(like = 'Ubuntu').sum()\niOS = sOS.filter(like = 'iOS').sum()\nWindows = sOS.filter(like = 'Windows').sum()\nOther = sOS.filter(like = 'Other').sum()\n\nsoses = pd.DataFrame(data = {'cant' :[Android, iOS, Windows, Other]}, index = ['Android', 'iOS', 'Windows','Other'])\n\nsoses","7bb29c28":"fig, ax = plt.subplots(1,2,figsize=(10, 2))\nax[0].barh(soses.index,soses['cant'], color = 'rgb',edgecolor='black')\nax[0].set(xlabel='Total de visitas', ylabel='Sistema Operativo', title='Sistemas Operativo usados (smartphone)')\nax[1].barh(soses.index,soses['cant']\/soses['cant'].sum()*100, color = 'rgb',edgecolor='black')\nax[1].set(xlabel='% Total de visitas', ylabel='Sistema Operativo', title='Sistemas Operativo usados (smartphone)')\nplt.tight_layout()","e462c259":"visitsbrowser= df.groupby(['browser_version'])['event'].value_counts()\nvisitsbrowser.sort_values(ascending = False,inplace= True)\nvisitsbrowser.to_frame().reset_index(drop=True,level = 1).reset_index().head(10)","abd22ffb":"visitsscreen= df.groupby(['screen_resolution','device_type' ])['event'].value_counts()\nvisitsscreen.sort_values(ascending = False,inplace= True)\nscreens = visitsscreen.to_frame().reset_index(drop=True, level = 2).reset_index()","8e3b5f96":"screens.loc[screens['device_type']=='Computer'].head(10).reset_index(drop = True)","f465573d":"screens.loc[screens['device_type']=='Smartphone'].head(10).reset_index(drop = True)","073eaedd":"screens.loc[screens['device_type']=='Tablet'].head(10).reset_index(drop = True)","e2d4c1f6":"# Agrupados por modelos vendidos y sus cantidades\nmodelSales = df.loc[(df['event'] == 'conversion')].groupby('model').agg('size').sort_values(ascending = False)\nmodelSales.head()","8fd75dad":"plt.rcParams['figure.figsize'] = (10, 6)\n# Se consideran los modelos con m\u00e1s de 10 ventas\ntopSales = modelSales.iloc[0:36]\ngTS = sns.barplot(x = topSales , y = topSales.index , orient='h',palette = (sns.color_palette(\"gist_stern\", 20)))\ngTS.set_title(\"Modelos m\u00e1s vendidos\", fontsize = 20)\ngTS.set_xlabel(\"Ventas\", fontsize = 15)\ngTS.set_ylabel(\" Modelo\", fontsize = 15)","8f188fbf":"# Filtro los datos sobre cada marca\niPhone = modelSales.filter(like = 'iPhone')\nsamsung = modelSales.filter(like = 'Samsung')\nmotorola = modelSales.filter(like = 'Motorola')\nlg = modelSales.filter(like = 'LG')\nasus = modelSales.filter(like = 'Asus')\nsony = modelSales.filter(like = 'Sony')\nlenovo = modelSales.filter(like = 'Lenovo')","c186da1a":"# Creo DataFrame con los datos obtenidos\nd = {'amount' : [samsung.sum(),iPhone.sum(), motorola.sum(), sony.sum(), lg.sum(), lenovo.sum(), asus.sum()]}\nbrands = pd.DataFrame(data = d, index = ['Samsung', 'iPhone', 'Motorola', 'Sony', 'LG', 'Lenovo', 'Asus'])\nbrands.head(10)","4d440173":"# Grafico sobre las ventas por marca\ngMarcas = sns.barplot(x = brands.index , y = brands.amount , orient='v', palette = (sns.color_palette(\"Set1\", 7)))\ngMarcas.set_title(\"Ventas por marca\", fontsize = 20)\ngMarcas.set_xlabel(\"Marca\", fontsize = 15)\ngMarcas.set_ylabel(\"Ventas\", fontsize = 15)","e957e1ba":"# Funcion que analiza un string pasado como parametro y determina la marca segun el nombre del producto\ndef brandName(model):\n    if 'iPhone' in model:\n        return 'iPhone'\n    if 'Samsung' in model:\n        return 'Samsung'\n    if 'Sony' in model:\n        return 'Sony'\n    if 'Lenovo' in model:\n        return 'Lenovo'\n    if 'Asus' in model:\n        return 'Asus'\n    if 'Motorola' in model:\n        return 'Motorola'\n    if 'LG' in model:\n        return 'LG'","29c6df83":"# Informacion detallada de los productos vendidos\nsales = df.loc[df.event=='conversion'].loc[:,('model','condition','storage','color')]\nsales['brand'] = sales.model.apply(brandName)\nsales.head()","95aae377":"# Se organiza la cantidad de ventas segun la condicion para cada Marca\nconditions = pd.pivot_table(sales.loc[:,('condition','brand')].set_index('brand'), index = ['brand'], columns = ['condition'], aggfunc = pd.Series.count).fillna('0')\nconditions.columns = ['Bueno','Bueno - Sin Touch Id', 'Excelente', 'Muy Bueno', 'Nuevo']\nconditions = conditions.loc[('Samsung','iPhone','Motorola','Sony','LG','Lenovo','Asus'),:]\nfor col in conditions.columns:\n    conditions[col] = pd.to_numeric(conditions[col])\nconditions","29ef22fa":"# Elimino las condicones Bueno - Sin Touch Id y Nuevo al no presentar un gran efecto en las ventas\nconditions = conditions.loc[:,('Bueno','Excelente','Muy Bueno')]\nconditions","65b1bb93":"# Sabiendo cuanto vendio cada marca se analiza la condicion de los productos en dichas ventas\nconditions.plot(kind = 'bar', stacked = False, colormap = 'tab10', width = 0.8, grid = False)\nplt.legend(loc = 'center right', bbox_to_anchor = (1.2, 0.5))\nplt.xlabel('Marca', fontsize = 15)\nplt.ylabel('Ventas', fontsize = 15)\nplt.title('Condici\u00f3n de producto vendido seg\u00fan marca', fontsize=20)\nplt.xticks(rotation = 40)","98732b69":"storageSales = sales.groupby('storage').size().to_frame(name='amount')\nstorageSales = storageSales.loc[('512MB','4GB','8GB','16GB','32GB','64GB','128GB','256GB'),:]\nstorageSales.amount = pd.to_numeric(storageSales.amount)\nstorageSales.head(10)","b1010483":"gStS = sns.barplot(x = storageSales.index, y = storageSales['amount'], data = storageSales)\ngStS.set_title(\"Capacidad del producto seg\u00fan ventas\", fontsize = 20)\ngStS.set_xlabel(\"Capacidad\", fontsize = 15)\ngStS.set_ylabel(\"Ventas\", fontsize = 15)","67d7fc54":"# Funcion que convierte el valor string del almacenaje en numerico (medido en GB)\ndef absMemValue(x):\n    switcher = {\n        '4GB': 4,\n        '512MB' : 0.512,\n        '8GB' : 8,\n        '16GB' : 16,\n        '32GB' : 32,\n        '64GB' : 64,\n        '128GB' : 128,\n        '256GB' : 256\n    }\n    return switcher.get(x)","b6ddfcd4":"# Cada produto vendido con su marca y capacidad\nstorageBrand = sales.loc[:,('brand','storage')]\nstorageBrand.storage = storageBrand.storage.apply(absMemValue)\nstorageBrand.head(5)","c67f03b5":"sns.boxplot(x=storageBrand.brand, y=storageBrand.storage, data=storageBrand, width=0.9, fliersize = 8)\nplt.title('Capacidad de los productos vendidos seg\u00fan marca', fontsize = 20)\nplt.xlabel('Marca', fontsize = 15)\nplt.ylabel('Capacidad (GB)', fontsize = 15)","7e5a789c":"# Filtro el iPhone de 256 gb para analizar mejor cada box\nsns.boxplot(x=storageBrand.loc[storageBrand.storage<200].brand, y=storageBrand.loc[storageBrand.storage<200].storage, data=storageBrand, width=0.9, fliersize = 8)\nplt.title('Capacidad de los productos vendidos seg\u00fan marca', fontsize = 20)\nplt.xlabel('Marca', fontsize = 15)\nplt.ylabel('Capacidad', fontsize = 15)","0c1e8d5c":"# Relacion entre cantidad visitas a pagina producto (event=viewed product) y cantidad conversiones\ncantViewedProduct = df.loc[df.event=='viewed product'].groupby('person').size().apply('to_frame').reset_index()\ncantViewedProduct.columns = ['person','viewed products']\ncantConversion =  df.loc[df.event=='conversion'].groupby('person').size().apply('to_frame').reset_index()\ncantConversion.columns = ['person','conversions']\ncantConversion['vp'] = cantViewedProduct['viewed products']\ncantConversion.head()","dbb1bf42":"plt.scatter(x=cantConversion.conversions,y=cantConversion.vp)\nplt.title('Relacion conversiones y visitas a productos por usuario', fontsize = 20)\nplt.xlabel('Conversiones', fontsize = 15)\nplt.ylabel('Visitas a productos', fontsize = 15)","f8b9467a":"# Me quedo s\u00f3lo con los t\u00e9rminos de b\u00fasqueda\nbusquedas = df.loc[df['event'] == 'searched products']['search_term']\n#busquedas.str.split(expand=True).stack().value_counts()\n\n# Todo a may\u00fascula\nbusquedas = busquedas.str.upper()\nfrecuencias = busquedas.str.split(expand=True).stack().value_counts().reset_index().values\n\n#Solo se consideran las de longitud mayor que 4\ndiccionario = dict([tuple(x) for x in frecuencias if (len(x[0]) > 4)])\n\nwordcloud = WordCloud(background_color=\"white\", width=500, height=500, prefer_horizontal=0.9).generate_from_frequencies(frequencies=diccionario)\n\ndef grey_color_func(word, font_size, position,orientation,random_state=None, **kwargs):\n    return(\"hsl(230,100%%, %d%%)\" % np.random.randint(49,51))\n\n\nwordcloud.recolor(color_func = grey_color_func)\n\n\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()\nwordcloud.to_file(\"first_review.png\")","24aa8bd9":"# Me quedo s\u00f3lo con los t\u00e9rminos de b\u00fasqueda\nbusquedas = df.loc[df['event'] == 'searched products']['search_term']\nbusquedas.str.split(expand=True).stack().value_counts()\n\n# Todo a may\u00fascula\nbusquedas = busquedas.str.upper()\nfrecuencias = busquedas.str.split(expand=True).stack().value_counts().reset_index()\nfrecuencias.columns = ['palabra','cantidad']\nfrecuencias['longitud_palabra'] = frecuencias.agg({'palabra' : len})\nfrecuencias = frecuencias.set_index('palabra')\nfrecuencias.loc[frecuencias['longitud_palabra'] > 4,:].head(15)['cantidad'].plot(kind='bar')\n\n#frecuencias.head(15).plot(kind='bar')\n#Solo se consideran las de longitud mayor que 4","c9f6fb4e":"# AHORA S\u00f3lo por termino de busqueda\n# Me quedo s\u00f3lo con los t\u00e9rminos de b\u00fasqueda\nbusquedas = df.loc[df['event'] == 'searched products']['search_term']\n#busquedas.str.split(expand=True).stack().value_counts()\n\n# Todo a may\u00fascula\nbusquedas = busquedas.str.upper()\nfrecuencias = busquedas.value_counts().reset_index().values\n\ndiccionario = dict([tuple(x) for x in frecuencias if (len(x[0]) > 4)])\n\nwordcloud = WordCloud(background_color=\"white\", width=500, height=500).generate_from_frequencies(frequencies=diccionario)\n\n#def grey_color_func(word, font_size, position,orientation,random_state=None, **kwargs):\n#    return(\"hsl(230,100%%, %d%%)\" % np.random.randint(49,51))\n\n\n#wordcloud.recolor(color_func = grey_color_func)\n\n\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()\nwordcloud.to_file(\"first_review.png\")","fcc3b577":"# Me quedo s\u00f3lo con los t\u00e9rminos de b\u00fasqueda\nbusquedas = df.loc[df['event'] == 'searched products']['search_term']\n# Todo a may\u00fascula\nbusquedas = busquedas.str.upper()\nfrecuencias = busquedas.str.split(expand=True).stack().value_counts().reset_index()\nfrecuencias.columns = ['palabra','cantidad']\nfrecuencias['longitud_palabra'] = frecuencias.agg({'palabra' : len})\nfrecuencias = frecuencias.set_index('palabra')\nfrecuencias.loc[frecuencias['longitud_palabra'] > 3,:].head(20)['cantidad'].plot(kind='bar')","08eb0372":"# Me quedo s\u00f3lo con los t\u00e9rminos de b\u00fasqueda\nbusquedas = df.loc[df['event'] == 'searched products']['search_term']\n# Todo a may\u00fascula\nbusquedas = busquedas.str.upper()\nfrecuencias = busquedas.str.split(expand=True).stack().value_counts().reset_index()\nfrecuencias.columns = ['palabra','cantidad']\nfrecuencias['longitud_palabra'] = frecuencias.agg({'palabra' : len})\nfrecuencias = frecuencias.set_index('palabra')\nfrecuencias.loc[frecuencias['longitud_palabra'] < 4,:].head(20)['cantidad'].plot(kind='bar')","806a0006":"# Me quedo s\u00f3lo con los t\u00e9rminos de b\u00fasqueda\nbusquedas = df.loc[df['event'] == 'searched products']['search_term']\n# Todo a may\u00fascula\nbusquedas = busquedas.str.upper()\nbusquedas = busquedas.str.split(expand=True).stack().value_counts().reset_index()\nbusquedas.columns = ['palabra', 'cantidad']\nbusquedas = busquedas.loc[busquedas['palabra'].str.contains('GB'),:]\nbusquedas['longitud_palabra'] = busquedas.agg({'palabra' : len})\nbusquedas = busquedas.loc[busquedas['longitud_palabra'] > 2,:]\nbusquedas.set_index('palabra')['cantidad'].nlargest(10).plot(kind='bar')","c07cfdff":"# Me quedo s\u00f3lo con los t\u00e9rminos de b\u00fasqueda\nbusquedas = df.loc[df['event'] == 'searched products']['search_term']\n# Todo a may\u00fascula\nbusquedas = busquedas.str.upper()\nbusquedas.value_counts().nlargest(20).plot(kind='bar')","ec4474f9":"len(df['person'].value_counts())","52cd1d23":"\ndf['channel'].value_counts().plot(kind='bar')","536cd534":"df[['event', 'channel']].dropna()['event'].value_counts()","1180d437":"df[['person','channel']].groupby('channel').agg('count').plot(kind='bar')","d46b41ba":"nulos = len(df) - df['channel'].count()\nprint('Hay {} eventos que no tienen informacion de channel'.format(nulos))","0c77a81a":"df.set_index('timestamp').groupby(['person', pd.Grouper(freq='240Min')])","5fa79bc2":"# Funcion que convierte el valor numerico del dia de la semana en su valor string\ndef toDay (x):\n        switch = {\n            0 : 'Lunes',\n            1 : 'Martes',\n            2 : 'Mi\u00e9rcoles',\n            3 : 'Jueves',\n            4 : 'Viernes',\n            5 : 'S\u00e1bado',\n            6 : 'Domingo'\n        }\n        return switch.get(x)","4ac2385a":"datesEvent = pd.DataFrame(data = {'day' : df['timestamp'].dt.dayofweek, 'event' : df['event']})\ndatesEvent = datesEvent.sort_values('day').set_index('day')\ndatesEvent = pd.pivot_table(datesEvent, index = ['day'], columns = ['event'], aggfunc = pd.Series.count)\ndatesEvent.index = datesEvent.index.map(toDay)\ndatesEvent","b7d652ca":"plt.rcParams['figure.figsize'] = (10, 6)\ngDE = sns.heatmap(datesEvent, cmap='Spectral', annot = True, fmt= 'd')\ngDE.set_title(\"Eventos por d\u00eda\", fontsize = 20)\ngDE.set_xlabel(\"Tipo de evento\", fontsize = 15)\ngDE.set_ylabel(\"D\u00eda\", fontsize = 15)\nplt.yticks(rotation=0)\nplt.xticks(rotation=45)","3430afb6":"origenes = df.loc[df['new_vs_returning'] == 'New',['person','channel']].set_index('person')\norigenes.columns = ['canal_origen']\npor_persona = df.set_index('person')\npor_persona = por_persona.merge(origenes, on='person', how='left')\npor_persona.head()","aaa046ab":"#por_persona['event'].value_counts().plot(kind='bar', hue='canal_origen')\n#sns.barplot(x=\"event\", hue=\"canal_origen\", data=por_persona);\n#sns.catplot(x=\"event\", kind=\"count\", hue=\"canal_origen\", data=por_persona);\nf, ax = plt.subplots(figsize=(15, 15))\nsns.countplot(y=\"event\", data=por_persona, hue=\"canal_origen\");","780a6712":"f, ax = plt.subplots(figsize=(15, 15))\nsns.countplot(y=\"canal_origen\", data=por_persona, hue=\"event\");","604245d0":"f, ax = plt.subplots(figsize=(10, 10))\nsns.countplot(y=\"canal_origen\", data=por_persona.loc[por_persona['event'] == 'conversion']);","43ad36a1":"srchTrms = df.groupby('search_term').size().sort_values(ascending=False).to_frame('hits')\n# Se convierten todos los caracteres a minusculas de manera de poder agruparlos \n# independientemente del formato en que lo haya escrito el usuario en su motor de busqueda\nsrchTrms.index = srchTrms.index.str.lower()\nsrchTrms = srchTrms.reset_index()\nsrchTrms = srchTrms.groupby('search_term').agg({'hits':'sum'}).sort_values('hits',ascending=False)\nsrchTrms.head()","9314cac0":"# 200 o m\u00e1s b\u00fasquedas\ntopSrchTrms = srchTrms.iloc[0:41]\ngTST = sns.barplot(x = topSrchTrms.hits , y = topSrchTrms.index , orient='h',palette = (sns.color_palette(\"winter\",20)))\ngTST.set_title(\"T\u00e9rminos de b\u00fasqueda m\u00e1s utilizados\", fontsize = 20)\ngTST.set_xlabel(\"B\u00fasquedas\", fontsize = 15)\ngTST.set_ylabel(\"T\u00e9rmino\", fontsize = 15)","031a7145":"# Checkouts por quincena","61b318dd":"# Brand listing vs search engine hit","e22a77a2":"# Producto visto por quincena","be6aecc0":"# Brand listing por quincena","4ec59f7a":"# \u00bfCual son los sitemas operativos de los SmartPhones utilizados por los usuarios?","651b2ef0":"# Searched products vs visited site","5978e034":"# Lead vs ad campaign hit","e7df8a50":"# Agregado de columnas","6682c5a7":"# Ranking de palabras, longitud mayor que 3","9c142763":"# Conversion vs viewed product","d457039c":"Condici\u00f3n del producto vendido seg\u00fan la marca:","638e97e2":"# Conversiones seg\u00fan el origen","b2c23616":"# T\u00e9rminos de b\u00fasqueda m\u00e1s utilizados:","614a8a15":"#  4) An\u00e1lisis de Ventas","a888f53e":"# \u00bfCu\u00e1ntos usuarios por canal?","749bfc4a":"# B\u00fasquedas de productos","89711796":"Distribucion de los paises que utilizan el sitio en el mapa","94b020e1":"Modelos m\u00e1s vendidos:","615a892d":"Para comenzar primero realizamos un an\u00e1lisis de las visitas que se realizaron en el sitio y su localizaci\u00f3n geogr\u00e1fica","d03ced17":"# Visited site vs search engine hit","4eb57709":"# 1) Ordenar los datos","e7d70db6":"# \u00bfCua es el browser mas utilizado?","e45390b5":"# Search engine hit vs ad campaign hit","5ea02778":"# Analisis Exploratorio","5496cbb4":"Almacenaje seg\u00fan marca:","6585b049":"# 2.1) Visitas por Pais","075ec6ae":"# Viewed product vs searched products","72dc5ee3":"# Hits a campa\u00f1a de marketing","e9872e4b":"# Viewed product vs ad campaign hit","46832574":"Listado de los 10 paises con mayor cantidad de visitas","728a9f4a":"Porcentajes de los 5 paises mas relevantes en nivel de visitas respecto del total ","24c101a5":"# 2.3) Visitas por ciudad ","65ea86f1":"# Top 20 t\u00e9rminos de b\u00fasqueda","7747d3f1":"# An\u00e1lisis por quincena","210af032":"# Visitas por quincena","c874b11f":"# \u00bfCuales son las Resoluciones mas comunes en las computadoras de los usuarios? ","206f6b9e":"# 2.4) Distribucion de las visitas en el tiempo por region\n    \n        Distribucion de visitas para las regiones mas importantes en el periodo evaluado","e3426217":"# Distribuci\u00f3n de eventos por mes","7e010f55":"# Distribuci\u00f3n de eventos por hora del d\u00eda","6495c9ed":"# Visited site vs ad campaign hit","ad30da54":"# Ranking de palabras longitud menor que 4","9ac62ed8":"#  3) An\u00e1lisis de plataformas utilizadas para visitar el sitio \n    \n    Listado de dispositivos utilizados para ingresar","8ab587d1":"# Generic listing vs search engine hit","1327a716":"# Checkout vs ad campaign hit","1bb317c7":"Capacidad de almacenaje en los productos vendidos:","5a8c3581":"# Conversiones por quincena","c3c0c13b":"Relaci\u00f3n entre conversiones y visitas a productos:","5fa10a0a":"Cantidad de visitas por region","57c27d7b":"# Gr\u00e1ficos de eventos y or\u00edgenes","848b1d5c":"# Conversion vs lead","40f05bb1":"# Generic listing vs ad campaign hit","63e8690b":"# Infiero que los datos estan guardados por sesion de usuario","feb9fdc5":"# Fecha m\u00e1xima y fecha m\u00ednima","6e7c0d72":"Lo que haremos en el siguiente apartado es verificar los datos y asi mismo ordenarlos para facilitar su posterior analisis\n","52f1c926":"A continuaci\u00f3n se analizaran los datos otorgados por la empresa Trocafone para poder sacar algunas conclusiones","56d86a2c":"# Cantidad de cada evento seg\u00fan el d\u00eda de la semana:","e2b74ed8":"Listado de las 10 ciudades mas importantes ","d3a79c38":"# \u00bfCuales son las Resoluciones mas comunes en las tablets de los usuarios? ","6da1ea74":"# Viewed product vs search engine hit","e9c2b004":"# Ranking de palabras","211ff12d":"Distribuci\u00f3n de eventos por d\u00eda del mes","8513f49c":"# \u00bfCuales son los Sistemas Operativos de computadora utilizados?","07e670d1":"# Checkout vs viewed product","abc16261":"Ventas por marca :","7a311cf2":"# 2.2) Visitas por Region","b8ad3f56":"# Lead vs visited site","66f713bf":"Se observa que la informaci\u00f3n de channel s\u00f3lo est\u00e1 disponible para los eventos del tipo 'visited site'","aed08b2b":"# Conversion vs ad campaign hit","2f1e8ba4":"# Leads por quincena","30f7d2e6":"# \u00bfCual son los sitemas operativos de las tablets utilizadas por los usuarios?","ccbc2f08":"# Fuentes de tr\u00e1fico, cantidad de eventos por canal","a3bcb1e9":"# \u00bfCuales son las Resoluciones mas comunes en los SmartPhones de los usuarios? ","e5ddad5b":"# Checkout vs visited site","f39448e2":"# Exploraci\u00f3n de Timestamp","6c9778a8":"# Brand listing vs ad campaign hit","705857c2":"# 2) Analisis Regional","05084c32":"# An\u00e1lisis de nulos","bda3837e":"# Cantidad de personas distintas","c8e534ec":"# Conversion vs checkout"}}