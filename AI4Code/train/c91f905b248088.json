{"cell_type":{"49233d14":"code","99b987a3":"code","613a1ebe":"code","0c7d0381":"code","e7a583af":"code","cb95ad64":"code","8808035b":"code","dc4fd01b":"code","ebd320fd":"code","294fbe16":"code","adccd84e":"code","44b4ed4f":"code","2bfa4c04":"code","be347a08":"code","5f9e510d":"code","901feddb":"code","4bb7eb76":"code","d85372a1":"code","5459dac6":"code","fb59c187":"code","6ea45462":"code","b1de5a46":"code","5859a904":"code","c2192428":"code","f9153001":"code","5897ed38":"code","2bb3deed":"code","3595b7e8":"code","8ed3463e":"code","e10f52ef":"code","7d0e9267":"code","6fb3a72f":"code","ccd3e30d":"code","7b454e7e":"code","283b5b81":"code","73ddc7f9":"code","5c74a606":"code","2b63fe99":"code","824604e3":"code","123d498f":"code","4f3f35b0":"code","7719ebce":"code","996db880":"code","d3c01633":"code","c44f5626":"code","9c7b508e":"code","0b4344f3":"code","18776f64":"code","4b84cafc":"code","010b92ac":"code","15d5b864":"code","701ba555":"code","ee999bb4":"code","5ae24dae":"code","cf02e559":"code","6aa768ba":"code","7f7d514e":"code","a9b13c3f":"code","e45685eb":"code","3e43f5c0":"code","a959f9ac":"code","65f36db2":"markdown","11506ac7":"markdown","2ca5634f":"markdown","e7e768e2":"markdown","25a56d9d":"markdown","49fd624d":"markdown","98b1ea98":"markdown","d98b962f":"markdown"},"source":{"49233d14":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","99b987a3":"#For Visualization \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","613a1ebe":"#For machine learning Models\nfrom sklearn.linear_model import LogisticRegression \nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier \nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier","0c7d0381":"#Acquiring the data \ntrain_df = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/titanic\/test.csv\")","e7a583af":"train_df.head()","cb95ad64":"train_df.shape","8808035b":"test_df.shape","dc4fd01b":"print(train_df.columns.values)","ebd320fd":"#Training Datset Summary\ntrain_df.info()","294fbe16":"#We have filter out the categorical variables from the dataset\ncat_var = ['Survived', 'Pclass','SibSp',\n       'Parch', 'Embarked', 'Sex']","adccd84e":"#Finding Categorical Varibles\nfor i in cat_var:\n    print(round(train_df[i].value_counts(normalize=True)*100,2))\n    print(\"_\"*50)","44b4ed4f":"round(train_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False),2)","2bfa4c04":"round(train_df[[\"Sex\", \"Survived\"]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False),2)","be347a08":"round(train_df[[\"SibSp\", \"Survived\"]].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False),2)","5f9e510d":"round(train_df[[\"Parch\", \"Survived\"]].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False),2)","901feddb":"round(train_df[[\"Embarked\", \"Survived\"]].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False),2)","4bb7eb76":"round(train_df.describe(),2)","d85372a1":"#Including categorical variables\ntrain_df.describe(include = [\"O\"])","5459dac6":"#Age \ng = sns.FacetGrid(train_df, col = \"Survived\")\ng.map(plt.hist, \"Age\", bins=20)","fb59c187":"grid = sns.FacetGrid(train_df, col=\"Survived\", row=\"Pclass\", height=2.2, aspect=1.6)\ngrid.map(plt.hist, \"Age\", alpha=0.5, bins=20)\ngrid.add_legend();","6ea45462":"#Dropping the Ticket and the Cabin Feature \ntrain_df = train_df.drop([\"Ticket\",\"Cabin\"], axis=1)\ntest_df = test_df.drop([\"Ticket\", \"Cabin\"], axis=1)\ncombine = [train_df, test_df]","b1de5a46":"#Checking the dimension of Train and Test dataset after dropping the Ticket and Cabin Feature\ntrain_df.shape, test_df.shape","5859a904":"for dataset in combine:\n    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n\npd.crosstab(train_df['Title'], train_df['Sex'])","c2192428":"for dataset in combine:\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col',\\\n \t'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n    \ntrain_df[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","f9153001":"title_mapping = { \"Mr\" : 1, \"Miss\" : 2, \"Mrs\" : 3 , \"Master\" : 4, \"Rare\" : 5 }\nfor dataset in combine:\n    dataset[\"Title\"] = dataset[\"Title\"].map(title_mapping)\n    dataset[\"Title\"] = dataset[\"Title\"].fillna(0)\n    \ntrain_df.head()","5897ed38":"#Dropping name and passengerId from training set and name from test Set\ntrain_df = train_df.drop([\"Name\", \"PassengerId\"],axis=1)\ntest_df = test_df.drop([\"Name\"],axis=1)\ncombine = [train_df,test_df]\ntrain_df.shape, test_df.shape","2bb3deed":"train_df.head()","3595b7e8":"train_df[\"Sex\"] = train_df[\"Sex\"].map({\"female\" : 1, \"male\" : 0})\ntest_df[\"Sex\"] = test_df[\"Sex\"].map({\"female\" : 1, \"male\" : 0})","8ed3463e":"train_df.head(), test_df.head()","e10f52ef":"grid = sns.FacetGrid(train_df, row=\"Pclass\", col=\"Sex\", height=2.2, aspect=1.6)\ngrid.map(plt.hist, \"Age\",alpha=.5, bins=20)\ngrid.add_legend()","7d0e9267":"guess_ages = np.zeros((2,3))\nguess_ages","6fb3a72f":"for dataset in combine:\n    for i in range(0, 2):\n        for j in range(0, 3):\n            guess_df = dataset[(dataset['Sex'] == i) & \\\n                                  (dataset['Pclass'] == j+1)]['Age'].dropna()\n\n            # age_mean = guess_df.mean()\n            # age_std = guess_df.std()\n            # age_guess = rnd.uniform(age_mean - age_std, age_mean + age_std)\n\n            age_guess = guess_df.median()\n\n            # Convert random age float to nearest .5 age\n            guess_ages[i,j] = int( age_guess\/0.5 + 0.5 ) * 0.5\n            \n    for i in range(0, 2):\n        for j in range(0, 3):\n            dataset.loc[ (dataset.Age.isnull()) & (dataset.Sex == i) & (dataset.Pclass == j+1),\\\n                    'Age'] = guess_ages[i,j]\n\n    dataset['Age'] = dataset['Age'].astype(int)\n\ntrain_df.head()","ccd3e30d":"train_df[\"AgeBand\"] = pd.cut(train_df[\"Age\"],5)\ntrain_df[[\"AgeBand\", \"Survived\"]].groupby([\"AgeBand\"], as_index=False).mean().sort_values(by=\"AgeBand\", ascending=True)","7b454e7e":"for dataset in combine:\n    dataset.loc[dataset[\"Age\"] <=16, \"Age\"] = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age']\n    \ntrain_df.head()","283b5b81":"#Remvoing the age band feature\n\ntrain_df = train_df.drop([\"AgeBand\"], axis=1)\ncombine = [\"train_df\", \"test_df\"]\ntrain_df.head()","73ddc7f9":"train_df['FamilySize'] = train_df['SibSp'] + train_df['Parch'] + 1\ntest_df['FamilySize'] = test_df['SibSp'] + test_df['Parch'] + 1\n\n\ntrain_df[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean().sort_values(by='Survived', ascending=False)","5c74a606":"train_df['IsAlone'] = 0\ntrain_df.loc[train_df['FamilySize'] == 1, 'IsAlone'] = 1\n\ntest_df['IsAlone'] = 0\ntest_df.loc[test_df['FamilySize'] == 1, 'IsAlone'] = 1\n\ntrain_df[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean()","2b63fe99":"train_df.head()","824604e3":"train_df = train_df.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\ntest_df = test_df.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\ncombine = [train_df, test_df]\n\ntrain_df.head()","123d498f":"for dataset in combine:\n    dataset['Age*Class'] = dataset.Age * dataset.Pclass\n\ntrain_df.loc[:, ['Age*Class', 'Age', 'Pclass']].head(10)","4f3f35b0":"train_df.head()","7719ebce":"freq_port = train_df.Embarked.dropna().mode()[0]\nfreq_port","996db880":"for dataset in combine:\n    dataset['Embarked'] = dataset['Embarked'].fillna(freq_port)\n    \ntrain_df[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)","d3c01633":"for dataset in combine:\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n\ntrain_df.head()","c44f5626":"test_df['Fare'].fillna(test_df['Fare'].dropna().median(), inplace=True)\ntest_df.head()","9c7b508e":"train_df['FareBand'] = pd.qcut(train_df['Fare'], 4)\ntrain_df[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean().sort_values(by='FareBand', ascending=True)","0b4344f3":"for dataset in combine:\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[ dataset['Fare'] > 31, 'Fare'] = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)\n\ntrain_df = train_df.drop(['FareBand'], axis=1)\ncombine = [train_df, test_df]\n    \ntrain_df.head(10)","18776f64":"test_df.head()","4b84cafc":"X_train = train_df.drop(\"Survived\", axis=1)\nY_train = train_df[\"Survived\"]\nX_test  = test_df.drop(\"PassengerId\", axis=1).copy()\nX_train.shape, Y_train.shape, X_test.shape","010b92ac":"# Logistic Regression\n\nlogreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)\nY_pred = logreg.predict(X_test)\nacc_log = round(logreg.score(X_train, Y_train) * 100, 2)\nacc_log","15d5b864":"coeff_df = pd.DataFrame(train_df.columns.delete(0))\ncoeff_df.columns = ['Feature']\ncoeff_df[\"Correlation\"] = pd.Series(logreg.coef_[0])\n\ncoeff_df.sort_values(by='Correlation', ascending=False)","701ba555":"# Support Vector Machines\n\nsvc = SVC()\nsvc.fit(X_train, Y_train)\nY_pred = svc.predict(X_test)\nacc_svc = round(svc.score(X_train, Y_train) * 100, 2)\nacc_svc","ee999bb4":"knn = KNeighborsClassifier(n_neighbors = 6)\nknn.fit(X_train, Y_train)\nY_pred = knn.predict(X_test)\nacc_knn = round(knn.score(X_train, Y_train) * 100, 2)\nacc_knn","5ae24dae":"# Gaussian Naive Bayes\n\ngaussian = GaussianNB()\ngaussian.fit(X_train, Y_train)\nY_pred = gaussian.predict(X_test)\nacc_gaussian = round(gaussian.score(X_train, Y_train) * 100, 2)\nacc_gaussian","cf02e559":"# Perceptron\n\nperceptron = Perceptron()\nperceptron.fit(X_train, Y_train)\nY_pred = perceptron.predict(X_test)\nacc_perceptron = round(perceptron.score(X_train, Y_train) * 100, 2)\nacc_perceptron","6aa768ba":"# Linear SVC\n\nlinear_svc = LinearSVC()\nlinear_svc.fit(X_train, Y_train)\nY_pred = linear_svc.predict(X_test)\nacc_linear_svc = round(linear_svc.score(X_train, Y_train) * 100, 2)\nacc_linear_svc","7f7d514e":"# Stochastic Gradient Descent\n\nsgd = SGDClassifier()\nsgd.fit(X_train, Y_train)\nY_pred = sgd.predict(X_test)\nacc_sgd = round(sgd.score(X_train, Y_train) * 100, 2)\nacc_sgd","a9b13c3f":"# Decision Tree\n\ndecision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, Y_train)\nY_pred = decision_tree.predict(X_test)\nacc_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)\nacc_decision_tree","e45685eb":"# Random Forest\n\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\nY_pred = random_forest.predict(X_test)\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\nacc_random_forest","3e43f5c0":"models = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n              'Random Forest', 'Naive Bayes', 'Perceptron', \n              'Stochastic Gradient Decent', 'Linear SVC', \n              'Decision Tree'],\n    'Score': [acc_svc, acc_knn, acc_log, \n              acc_random_forest, acc_gaussian, acc_perceptron, \n              acc_sgd, acc_linear_svc, acc_decision_tree]})\nmodels.sort_values(by='Score', ascending=False, ignore_index=True)","a959f9ac":"submission = pd.DataFrame({\n        \"PassengerId\": test_df[\"PassengerId\"],\n        \"Survived\": Y_pred\n    })\nsubmission.to_csv('.\/submission.csv', index=False)","65f36db2":"# Analyzing by Pivoting Feature","11506ac7":"# Analyzing by Visualization","2ca5634f":"# **Completing a numerical continuous feature**\n\nNow we should start estimating and completing features with missing or null values. We will first do this for the Age feature.\n\nWe can consider three methods to complete a numerical continuous feature.\n\n* A simple way is to generate random numbers between mean and standard deviation.\n\n* More accurate way of guessing missing values is to use other correlated features. In our case we note correlation among Age, Gender, and Pclass. Guess Age values using median values for Age across sets of Pclass and Gender feature combinations. So, median Age for Pclass=1 and Gender=0, Pclass=1 and Gender=1, and so on...\n\n* Combine methods 1 and 2. So instead of guessing age values based on median, use random numbers between mean and standard deviation, based on sets of Pclass and Gender combinations.\n\nMethod 1 and 3 will introduce random noise into our models. The results from multiple executions might vary. We will prefer method 2.","e7e768e2":"# Feature Engineering","25a56d9d":"1. 38% passengers survived in the training dataset(Original survival rate 1502\/2224 = 32%)\n2. 55% passengers were class-3 (consiting of crew and lower class)\n3. 68% of people were traveling alone (without siblings, spouse)\n4. 76% passengers were not travelling with parents or childrens\n5. 72% passengers belonged to Southampton, Hamsphire, England","49fd624d":"# Implementing Models","98b1ea98":"# **Exploring the dataset**","d98b962f":"**Correcting : **\n1. Ticket feature may be dropped , high ratio of duplicates 22% \n2. Cabin feature can be dropped, only 204 missing values out of 891\n3. PassengerID and Name can be dropped as these don't have any value add to the analysis \n\n**Creating : **\n1. We can create family feature, to check how many families where ther eon the ship\n2. We can engieer the name feature to get \"Titles\"\n3. Age feature can be converted into ordinal , age bands\n4. Fare range feature can be as same as the age band feature\n5. Deck can formed using cabin deatils \n6. Fare per person can be calculated \n7. Titles can be engineered and formed a variable"}}