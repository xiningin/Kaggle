{"cell_type":{"26ddf4d8":"code","467b1391":"code","56482481":"code","1ec88ef3":"code","ad1de498":"code","dcac903d":"code","06ef16bc":"code","eaeb62f4":"code","5e009d16":"code","83a61416":"code","6993b271":"code","5b90b254":"markdown","5a284ee4":"markdown","756532d0":"markdown","089fbceb":"markdown","2f572076":"markdown","c35906ee":"markdown","f09799b2":"markdown","f9d62638":"markdown","1cb5d0d0":"markdown","8ea6ed44":"markdown","c7c50c6f":"markdown","1327c915":"markdown","4851ff52":"markdown","0991ec8e":"markdown","a38b8f16":"markdown"},"source":{"26ddf4d8":"!ls ..\/input\/pap-smear-datasets","467b1391":"!cp -r ..\/input\/pap-smear-datasets ..\/working\/","56482481":"!ls ..\/working\/","1ec88ef3":"%matplotlib inline\nfrom fastai import *\nfrom fastai.vision import *\nfrom fastai.utils.ipython import *\nfrom fastai.metrics import *\nfrom fastai.callbacks.tracker import SaveModelCallback","ad1de498":"path = Path(\"..\/working\/pap-smear-datasets\")\npath.ls()","dcac903d":"classes = [\"normal\", \"abnormal\"]\n\ndef labelling_func(fname):\n    c = fname.parent.name\n    if \"abnormal\" in c or \"benign\" in c:\n        return classes.index(\"abnormal\")\n    else:\n        return classes.index(\"normal\")\n\ntfms = get_transforms(flip_vert=True, max_zoom=0.5, max_warp=0.0)\n\nwith gpu_mem_restore_ctx():\n    data = (ImageList.from_folder(path\/\"sipakmed_fci_pap_smear\")\n           .split_by_rand_pct(seed=19)\n           .label_from_func(labelling_func)\n           .transform(tfms, size=32)\n           .databunch(bs=8)\n           .normalize(imagenet_stats))","06ef16bc":"print(data)\ndata.show_batch(rows=2, figsize=(9, 9))","eaeb62f4":"class PapMetrics(ConfusionMatrix):\n    \n    def on_epoch_end(self, last_metrics, **kwargs):\n        self.tn, self.fn, self.fp, self.tp = self.cm.flatten().numpy().ravel()\n    \n    def calc_prec(self):\n        return self.tp \/ (self.tp + self.fp)\n    \n    def calc_recall(self):\n        return self.tp \/ (self.tp + self.fn)\n    \n    def calc_fbeta(self):\n        prec = self.calc_prec()\n        recall = self.calc_recall()\n        return 2 * ((prec * recall) \/ (prec + recall))\n    \n    def calc_spec(self):\n        return self.tn \/ (self.tn + self.fp)\n    \n    def calc_hmean(self):\n        sens = self.calc_recall()\n        spec = self.calc_spec()\n        return 2 * ((sens * spec) \/ (sens + spec))\n    \n    def calc_acc(self):\n        return (self.tp + self.tn) \/ (self.tp + self.tn + self.fp + self.fn)\n    \nclass Accuracy(PapMetrics):\n    \n    def on_epoch_end(self, last_metrics, **kwargs):\n        super().on_epoch_end(last_metrics, **kwargs)\n        return add_metrics(last_metrics, self.calc_acc())\n    \nclass Sensitivity(PapMetrics):\n    \n    def on_epoch_end(self, last_metrics, **kwargs):\n        super().on_epoch_end(last_metrics, **kwargs)\n        return add_metrics(last_metrics, self.calc_recall())\n    \nclass Specificity(PapMetrics):\n    \n    def on_epoch_end(self, last_metrics, **kwargs):\n        super().on_epoch_end(last_metrics, **kwargs)\n        return add_metrics(last_metrics, self.calc_spec())\n    \nclass HMean(PapMetrics):\n    \n    def on_epoch_end(self, last_metrics, **kwargs):\n        super().on_epoch_end(last_metrics, **kwargs)\n        return add_metrics(last_metrics, self.calc_hmean())\n    \nclass F1Score(PapMetrics):\n    \n    def on_epoch_end(self, last_metrics, **kwargs):\n        super().on_epoch_end(last_metrics, **kwargs)\n        return add_metrics(last_metrics, self.calc_fbeta())\n    \nour_metrics = [Accuracy(), Sensitivity(), Specificity(), HMean(), F1Score(), AUROC()]","5e009d16":"with gpu_mem_restore_ctx():\n    learner = cnn_learner(data, models.resnet34,\n                          metrics=our_metrics).to_fp16()\n    callback=[SaveModelCallback(learner, every='improvement', monitor='accuracy', name='best-rn34-stage1')]","83a61416":"with gpu_mem_restore_ctx():\n    learner.fit_one_cycle(2, callbacks=callback)\n    learner.save(\"rn34-stage1-last\")","6993b271":"!ls ..\/working\/pap-smear-datasets\/sipakmed_fci_pap_smear\/models","5b90b254":"Oh you beauty...","5a284ee4":"Let's check whether the pipeline was built as per our requirements...","756532d0":"Let's train it for a couple of epochs in order to see whether all our efforts truly pay-off","089fbceb":"We will be using the following metrics :-\n* Accuracy\n* Sensitivity (or Recall)\n* Specificity\n* H-mean\n* F1-score\n* AUROC score","2f572076":"# Imports\nWe need the dependencies in order to build a model using the Fastai library.","c35906ee":"# Copying the datasets\nYes. You read that right. I'm copying the datasets from ``input`` directory to ``working`` directory in order to get rid of the **read-only** filesystem errors.","f09799b2":"# Conclusion\nThat's a wrap for this tutorial. Next time, we'll be training our models on the Herlev and SipakMed datasets respectively.","f9d62638":"## Note\nThe models will be saved inside the ``models`` directory in the path used to build your data pipeline","1cb5d0d0":"# Data pipeline\nAs observed from my previous tutorial, let's build a data pipeline of the Sipakmed pap smear dataset using the data-block API of the fastai library","8ea6ed44":"Let's see if they actually get copied into the ``working`` directory","c7c50c6f":"Let's copy them to the ``working`` directory","1327c915":"# Building our model with some tricks..\nLet's build a simple started model using Fastai library","4851ff52":"# Defining our metrics for performance evaluation\nWe need some metrics to evaluate our model's performance on the validation set. With these, we can compare our model with rest of the models seen in research papers.","0991ec8e":"# Introduction\nLet's start the data modelling process which is the second phase of our project.","a38b8f16":"Check the directory of the datasets (currently)"}}