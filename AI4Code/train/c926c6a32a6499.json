{"cell_type":{"078c5f23":"code","8cc742e5":"code","471b83a0":"code","b75b299a":"code","5260bb7a":"code","bfb73d99":"code","37b46eeb":"code","3771567a":"code","a89ff244":"code","1e3ea34d":"code","691ed4ee":"code","4511520f":"code","fbd72036":"code","289dceae":"code","01fc8a1c":"code","7efe92de":"code","741cd13c":"code","5f875847":"markdown","87615c39":"markdown","4327c768":"markdown","fc1b20e5":"markdown"},"source":{"078c5f23":"# load pandas \nimport pandas as pd\n\n# load numpy so that we can generate some sample data\nimport numpy as np\n\n# load the pyplot function from the matplotlib library\nimport matplotlib.pyplot as plt\n\n#load the seaborn \nimport seaborn as sns\n\n# ignore the warning\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Read the data from my Github\ndf_happiness = pd.read_csv('..\/input\/world-happiness\/2016.csv')\n","8cc742e5":"# print the happiness report dataset\ndf_happiness","471b83a0":"df_suicide = pd.read_csv('..\/input\/mental-health-and-suicide-rates\/Crude suicide rates.csv')\ndf_suicide","b75b299a":"# read country status via data source\ndf_countryStatus = pd.read_csv('..\/input\/life-expectancy-who\/Life Expectancy Data.csv')\ndf_countryStatus.head(2)","5260bb7a":"# get the data includes GDP, Status of developed or developing for each country only\ndf_countryStatus = df_countryStatus[['Country','Status','GDP']]","bfb73d99":"# drop duplicate rows since it includes data in different years \ndf_countryStatus.drop_duplicates(subset = ['Country'],inplace = True)","37b46eeb":"# print the data\ndf_countryStatus.head(2)","3771567a":"df_population = pd.read_csv('..\/input\/population-country\/Population_country')\ndf_population","a89ff244":"!pip install plotly","1e3ea34d":"# import the iplotand init_notebook_mode function from plotly library\nfrom plotly.offline import init_notebook_mode, iplot","691ed4ee":"# import the iplotand init_notebook_mode function from plotly library\nfrom plotly.offline import init_notebook_mode, iplot\n# create data for using in iplot function\ncount = [ dict(\n        # set the map type is choropleth  \n        type = 'choropleth',\n        locations = df_happiness['Country'],\n        locationmode='country names',\n        z = df_happiness['Happiness Score'],\n        text = df_happiness['Country'],\n        colorscale = 'Viridis',\n        autocolorscale = False,\n        reversescale = True,\n        # set the plotly gragh color\n        marker = dict(\n            line = dict (\n                color = 'rgb(180,180,180)',\n                width = 0.5\n            ) ),\n        # add a color bar \n        colorbar = dict(\n            autotick =False,\n            title = 'Happiness Score Country-based'),\n      ) ]\n# create layout for gragh\nlayout = dict(\n    title = 'Happiness Score across the Global',\n    # \n    geo = dict(\n        showframe = True,\n        showcoastlines = True,\n        projection = dict(\n            type = 'Mercator'\n        )\n    )\n)\n# prepare the fig parameter\nfig = dict( data=count, layout=layout )\niplot( fig, validate=False, filename='d3-world-map' )","4511520f":"# wide to long transform\ndf_suicide_long = pd.melt(df_suicide, id_vars = ['Country','Sex'], var_name='Age', value_name='Suicide_num')\ndf_suicide_long\n","fbd72036":"# get only sex has Both sexes data\nindex_MFSexes = df_suicide[(df_suicide['Sex'] == 'Male') | (df_suicide['Sex'] == 'Female')].index\n# Delete these row indexes from dataFrame\ndf_BothSex_suicide = df_suicide.drop(index_MFSexes)\n\ndf_BothSex_suicide['Total_suicide_number'] = df_BothSex_suicide[list(df_BothSex_suicide.columns)].sum(axis=1)\ndf_BothSex_suicide.head(3)","289dceae":"# create data for using in iplot function\ncount = [ dict(\n        # set the map type is choropleth   \n        type = 'choropleth',\n        locations = df_BothSex_suicide['Country'],\n        locationmode='country names',\n        z = df_BothSex_suicide['Total_suicide_number'],\n        text = df_BothSex_suicide['Country'],\n        colorscale = 'Viridis',\n        autocolorscale = False,\n        reversescale = True,\n        # set the plotly gragh color \n        marker = dict(\n            line = dict (\n                color = 'rgb(180,180,180)',\n                width = 0.5\n            ) ),\n        # add a color bar \n        colorbar = dict(\n            autotick =False,\n            title = 'Total Suicide Number Country-based'),\n      ) ]\n# create layout for gragh\nlayout = dict(\n    title = 'Total Suicide Number across the Global',\n    geo = dict(\n        showframe = True,\n        showcoastlines = True,\n        projection = dict(\n            type = 'Mercator'\n        )\n    )\n)\nfig = dict( data=count, layout=layout )\niplot( fig, validate=False, filename='d3-world-map' )","01fc8a1c":"import plotly.graph_objects as go\n\n# use the bar plot in go function to show the suicide number across the world\nfig = go.Figure([go.Bar(x=df_BothSex_suicide['Country'], y=df_BothSex_suicide['Total_suicide_number'])])\n# setting layout with title and sort the country\nfig.update_layout(title=\"Sort the Suicide Number Across the World\",barmode='stack', xaxis={'categoryorder':'total descending'})\nfig.show()","7efe92de":"# use the bar plot in go function to show the GDP per capita across the world\nfig = go.Figure([go.Bar(x=df_countryStatus['Country'], y=df_countryStatus['GDP'])])\n# setting layout with title and sort the country\nfig.update_layout(title=\"Sort the GDP per Capita Across the World\",barmode='stack', xaxis={'categoryorder':'total descending'})\nfig.show()","741cd13c":"# using the bar plot in go function to show the population number across the world\nfig = go.Figure([go.Bar(x=df_population['Country'], y=df_population['Population'])])\n# setting layout with title and sort the country\nfig.update_layout(title=\"Population Across the World\",barmode='stack', xaxis={'categoryorder':'total descending'})\nfig.show()","5f875847":"# AIM 5001 Final Project\n\n### Group members\uff1a Alejandra Zapata, Jinming Chen, Xiaolan Li","87615c39":"First, we will check the 'Country' and 'Happiness Score' with interactive map by using plotly library.","4327c768":"### EDA: GDP","fc1b20e5":"## EDA: Population"}}