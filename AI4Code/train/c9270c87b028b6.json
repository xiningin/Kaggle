{"cell_type":{"ed3eb77e":"code","6fb9479c":"code","6232001e":"code","895c0286":"code","5b92bede":"code","a8e597e8":"code","87775d69":"code","1d8abdff":"code","85d638c9":"code","d20dc2fe":"markdown"},"source":{"ed3eb77e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6fb9479c":"data = pd.read_csv(\"\/kaggle\/input\/imdb-extensive-dataset\/IMDb movies.csv\")\n\nprint(data.columns)","6232001e":"data = data[['director', 'actors']]","895c0286":"def clean(x):\n    answer = []\n    for word in x:\n        answer.append(word.replace(\"[\",\"\").replace(\"]\",\"\").replace(\"\\'\",\"\").replace(\"\\\"\",\"\").strip(\"\\\\\"))\n    return answer\n\ndef cartesian(x):\n    answer = []\n    for w1 in x[0]:\n        for w2 in x[1]:\n            answer.append((w1,w2))\n    return answer\n\ndirectors = []\nactors = []\ndata[\"actors\"] = data[\"actors\"].apply(lambda x: str(x).split(\", \")).apply(clean)\ndata[\"director\"] = data[\"director\"].apply(lambda x: str(x).split(\", \")).apply(clean)\ndata[\"cartesian\"] = data[[\"actors\", \"director\"]].apply(cartesian, axis=1)\ndata = data.explode('cartesian').reset_index(drop=True)\ndata[\"actors\"] = data[\"cartesian\"].apply(lambda x: x[0])\ndata[\"director\"] = data[\"cartesian\"].apply(lambda x: x[1])\ndel data[\"cartesian\"]\nprint(data)\n    ","5b92bede":"data = data.merge(data, on =\"actors\")\ndata","a8e597e8":"data = data[data[\"director_x\"]!=data[\"director_y\"]]","87775d69":"data[\"count\"] = 1\ndata","1d8abdff":"data = data.groupby(by=[\"director_x\", \"director_y\"],as_index=False).sum()\ndata = data.reset_index(drop = True)\ndata","85d638c9":"data = data.sort_values(by=\"count\", axis=0, ascending=False)\ndata = data.reset_index(drop = True)\ndata","d20dc2fe":"# \u0417\u0430\u0434\u0430\u043d\u0438\u0435\n\n\u0421\u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b\u0439 \u043f\u043e\u0434\u0441\u0447\u0435\u0442, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0431\u0449\u0438\u0445 \u0440\u0435\u0436\u0438\u0441\u0441\u0435\u0440\u043e\u0432 \u0431\u044b\u043b\u043e \u0443 \u043f\u0430\u0440 \u0430\u043a\u0442\u0435\u0440\u043e\u0432."}}