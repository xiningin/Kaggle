{"cell_type":{"d3032746":"code","15be10b5":"code","f560dfbd":"code","17115790":"code","9e5c3e85":"code","15b0113b":"code","d4ee7d46":"code","b090c652":"code","e10bd7e2":"code","84f5aabb":"code","438671b5":"code","5bbb6d65":"code","c30c8b83":"code","943990b9":"code","c38db784":"code","0891e1a3":"code","9bfd4fa7":"code","39a295ec":"code","0825a242":"code","030babc1":"code","6725854a":"code","625615bf":"code","c5b47a11":"code","e0aed7cd":"code","9f65c796":"code","f84a334c":"code","09ab87d0":"code","f97b1284":"code","42832771":"code","ec004f4f":"code","6fc19901":"code","d07d0a42":"code","4f4c97ac":"code","f8325369":"markdown","73fd382a":"markdown","2f0ee5a8":"markdown","4c9a31e3":"markdown","d6a4c936":"markdown","00528171":"markdown","b7910150":"markdown","df847c4d":"markdown"},"source":{"d3032746":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport torch\nimport torchvision\nfrom torch import nn\nfrom torch import optim\nfrom torch.autograd import Variable\nimport torch.nn.functional as F\nfrom torchvision import datasets, transforms, models\nfrom torch.utils.data import DataLoader, Dataset\nimport torch.utils.data as utils\nprint(\"PyTorch Version: \",torch.__version__)\nprint(\"Torchvision Version: \",torchvision.__version__)\n\nfrom PIL import Image\nimport cv2\n\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.model_selection import train_test_split\n\nimport time\nimport copy\nimport glob\nimport sys\nsys.setrecursionlimit(100000)  # To increase the capacity of the stack\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","15be10b5":"# check if CUDA is available\ntrain_on_gpu = torch.cuda.is_available()\n\nfrom os import path\nfrom wheel.pep425tags import get_abbr_impl, get_impl_ver, get_abi_tag\nplatform = '{}{}-{}'.format(get_abbr_impl(), get_impl_ver(), get_abi_tag())\ncuda_output = !ldconfig -p|grep cudart.so|sed -e 's\/.*\\.\\([0-9]*\\)\\.\\([0-9]*\\)$\/cu\\1\\2\/'\naccelerator = cuda_output[0]\n\nif not train_on_gpu:\n    print('CUDA is not available. Training on CPU ...')\nelse:\n    print('CUDA is available! Training on GPU ...')","f560dfbd":"# Load data\ntrain_dir = '..\/input\/aptos2019-blindness-detection\/train_images\/'\n\ntrain = pd.read_csv('..\/input\/aptos2019-blindness-detection\/train.csv')\ntest = pd.read_csv('..\/input\/aptos2019-blindness-detection\/test.csv')\n\nsample_submission = pd.read_csv('..\/input\/aptos2019-blindness-detection\/sample_submission.csv')\n\n# Split off data for validation set\ntrain, valid = train_test_split(train, train_size=0.75, test_size=0.25, shuffle=False)","17115790":"print('Number of train samples: ', train.shape[0])\nprint('Number of validation samples: ', valid.shape[0])\nprint('Number of test samples: ', test.shape[0])\ndisplay(train.head(10))","9e5c3e85":"df = pd.DataFrame(train)\n\nClassCounts = pd.value_counts(df['diagnosis'], sort=True)\nprint(ClassCounts)\nplt.figure(figsize=(10, 7))\nClassCounts.plot.bar(rot=0);\nplt.title('Severity Counts for Training Data');","15b0113b":"# To display 5 unique retina images from each of the 5 classes\n\nj = 1\nfig=plt.figure(figsize=(15, 15))\nfor class_id in sorted(train['diagnosis'].unique()):\n    plot_no = j\n    for i, (idx, row) in enumerate(train.loc[train['diagnosis'] == class_id].sample(5).iterrows()):\n        ax = fig.add_subplot(5, 5, plot_no)\n        im = Image.open(f\"..\/input\/aptos2019-blindness-detection\/train_images\/{row['id_code']}.png\")\n        plt.imshow(im)\n        ax.set_title(f'Label: {class_id}')\n        plot_no += 5\n    j += 1\n\nplt.show()\nplt.savefig(\"samples_viz.png\")","d4ee7d46":"def estimate_radius(img):\n    mx = img[img.shape[0] \/\/ 2,:,:].sum(1)\n    rx = (mx > mx.mean() \/ 10).sum() \/ 2\n    my = img[:,img.shape[1] \/\/ 2,:].sum(1)\n    ry = (my > my.mean() \/ 10).sum() \/ 2\n    return (ry, rx)\n\ndef subtract_gaussian_blur(img):\n    gb_img = cv2.GaussianBlur(img, (0, 0), 5)\n    return cv2.addWeighted(img, 4, gb_img, -4, 128)\n\ndef remove_outer_circle(a, p, r):\n    b = np.zeros(a.shape, dtype=np.uint8)\n    cv2.circle(b, (a.shape[1] \/\/ 2, a.shape[0] \/\/ 2), int(r * p), (1, 1, 1), -1, 8, 0)\n    return a * b + 128 * (1 - b)\n\ndef crop_img(img, h, w):\n        h_margin = (img.shape[0] - h) \/\/ 2 if img.shape[0] > h else 0\n        w_margin = (img.shape[1] - w) \/\/ 2 if img.shape[1] > w else 0\n        crop_img = img[h_margin:h + h_margin,w_margin:w + w_margin,:]\n        return crop_img\n\ndef place_in_square(img, r, h, w):\n    new_img = np.zeros((2 * r, 2 * r, 3), dtype=np.uint8)\n    new_img += 128\n    new_img[r - h \/\/ 2:r - h \/\/ 2 + img.shape[0], r - w \/\/ 2:r - w \/\/ 2 + img.shape[1]] = img\n    return new_img","b090c652":"def preprocess(image):\n    ry, rx = estimate_radius(img)\n    resize_scale = r \/ max(rx, ry)\n    w = min(int(rx * resize_scale * 2), r * 2)\n    h = min(int(ry * resize_scale * 2), r * 2)\n    img = cv2.resize(img, (0,0), fx=resize_scale, fy=resize_scale)\n    img = crop_img(img, h, w)\n    if debug_plot:\n        plt.figure(figsize=(10, 10))\n        plt.imshow(img)\n    img = subtract_gaussian_blur(img)\n    img = remove_outer_circle(img, 0.9, r)\n    img = place_in_square(img, r, h, w)\n    image = PIL.ImageOps.autocontrast(image)","e10bd7e2":"import PIL\n\nclass ImageLoader(Dataset):\n    \n    def __init__(self, df, datatype):\n        self.datatype = datatype\n        #self.labels = df['diagnosis'].values\n        if self.datatype == 'train':\n            self.image_files = [f'..\/input\/aptos2019-blindness-detection\/train_images\/{i}.png' for i in train['id_code'].values]\n            self.transform = transforms.Compose([\n                                                 transforms.RandomVerticalFlip(p=0.5),\n                                                 transforms.RandomHorizontalFlip(p=0.5),\n                                                 #transforms.Grayscale(num_output_channels=3),\n                                                 transforms.ToTensor(),\n                                                 transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n                                                ])\n            self.labels = train['diagnosis'].values\n        elif self.datatype == 'valid':\n            self.image_files = [f'..\/input\/aptos2019-blindness-detection\/train_images\/{i}.png' for i in valid['id_code'].values]\n            self.transform = transforms.Compose([\n                                                #transforms.Grayscale(num_output_channels=3),\n                                                transforms.RandomVerticalFlip(p=0.5),\n                                                transforms.RandomHorizontalFlip(p=0.5),\n                                                transforms.ToTensor(),\n                                                transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n                                                ])\n            self.labels = valid['diagnosis'].values\n        \n    def __len__(self):\n        return len(self.image_files)\n\n    def __getitem__(self, index):\n        image = Image.open(self.image_files[index])\n        image = image.convert('RGB')\n        image = image.resize((224, 224))\n        \n#         image = preprocess(image)\n\n        image = self.transform(image)\n        if self.datatype == 'train' or self.datatype == 'valid':\n            label = torch.tensor(self.labels[index], dtype=torch.long)\n            return image, label\n        elif self.datatype == 'test':\n#             label = torch.tensor(self.labels[index], dtype=torch.long)\n            return image","84f5aabb":"trainloader = torch.utils.data.DataLoader(ImageLoader(df=train, datatype='train'), batch_size=60, shuffle=True)\ntestloader = torch.utils.data.DataLoader(ImageLoader(df=valid, datatype='valid'), batch_size=60, shuffle=False)  # serving as validation set...","438671b5":"print(\"lenght of dataset:\", len(train))\nprint(\"length of the loader divided into batches:\", len(trainloader))\nimg, labels = next(iter(trainloader))\nprint(img.shape)","5bbb6d65":"#model = models.densenet121(pretrained=False)\nmodel = models.resnet50(pretrained=True)\nmodel\nif train_on_gpu:\n    model = model.cuda()\nmodel\n","c30c8b83":"for param in model.parameters():\n    param.requires_grad = False\n","943990b9":"from collections import OrderedDict\nfc = nn.Sequential(OrderedDict([\n                          ('fc1', nn.Linear(2048, 1024)),\n                          ('relu', nn.ReLU()),\n                          ('dropout', nn.Dropout(p=0.2)),\n                          ('fc2', nn.Linear(1024, 5)),\n                          ('output', nn.LogSoftmax(dim=1))\n                          ]))\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\") \nweights = torch.tensor([2., 11., 5., 13., 12.])\nweights = weights.to(device)\ncriterion = nn.NLLLoss(weight=weights, reduction='mean')\n#criterion = nn.NLLLoss()\n\n# Only train the classifier parameters, feature parameters are frozen\noptimizer = optim.SGD(model.fc.parameters(), lr=0.0005, momentum=0.9)\n\n#model = load_checkpoint('\/kaggle\/checkpoint.pth')\n\nmodel.fc = nn.Linear(512, 5)\nmodel.fc = fc\n\nmodel.to(device)  \noptimizer.state_dict()\n","c38db784":"models.AlexNet()","0891e1a3":"checkpoint = {'model': fc,\n          'state_dict': model.state_dict(),\n          'optimizer' : optimizer.state_dict()}\n\ntorch.save(checkpoint, '\/kaggle\/checkpoint.pth')\ncheckpoint = torch.load('\/kaggle\/checkpoint.pth')\nmodel = checkpoint['model']\nmodel.load_state_dict(checkpoint['state_dict'])\noptimizer = checkpoitn['optimizer']","9bfd4fa7":"torch.save(model, '\/kaggle\/checkpoint.pth')\nmodel2 = torch.load('\/kaggle\/checkpoint.pth')","39a295ec":"torch.save(model.state_dict(), '\/kaggle\/checkpoint.pth')\n","0825a242":"model2 = models.resnet50(pretrained=False)\nmodel2.load_state_dict(torch.load('\/kaggle\/checkpoint.pth'))","030babc1":"def load_checkpoint(filepath):\n    checkpoint = torch.load(filepath)\n    model = checkpoint['model']\n    model.load_state_dict(checkpoint['state_dict'])\n    for parameter in model.parameters():\n        parameter.requires_grad = False\n\n    model.eval()\n    return model","6725854a":"!ls \/kaggle\/working","625615bf":"for i, (inputs, labels) in enumerate(trainloader):\n    # Move input and label tensors to the GPU\n    \n    inputs, labels = inputs.to(device), labels.to(device)\n    \n    start = time.time()\n\n    outputs = model.forward(inputs)\n    loss = criterion(outputs, labels)\n    loss.backward()\n    optimizer.step()\n\n    if i==3:\n        break\n        \nprint(f\"Device = {device}; Time per batch: {(time.time() - start)\/3:.3f} seconds\")","c5b47a11":"epochs = 5\nsteps = 0\nrunning_loss = 0\nprint_every = 10\n\nvalidation_accuracy = []\n\nfor epoch in range(epochs):\n    for inputs, labels in trainloader:\n        steps += 1\n        # Move input and label tensors to the default device\n        inputs, labels = inputs.to(device), labels.to(device)\n        \n        optimizer.zero_grad()\n        \n        logps = model.forward(inputs)\n        loss = criterion(logps, labels)\n        loss.backward()\n        optimizer.step()\n\n        running_loss += loss.item()\n        \n        if steps % print_every == 0:\n            test_loss = 0\n            accuracy = 0\n            model.eval()\n            \n            with torch.no_grad():\n                for inputs, labels in testloader:\n                    inputs, labels = inputs.to(device), labels.to(device)\n                    logps = model.forward(inputs)\n                    #print(logps)\n                    batch_loss = criterion(logps, labels)\n                    \n                    test_loss += batch_loss.item()\n                    \n                    # Calculate accuracy\n                    ps = torch.exp(logps)\n                    #print(ps)\n                    top_p, top_class = ps.topk(1, dim=1)\n                    #print(top_class)\n                    equals = top_class == labels.view(*top_class.shape)\n                    \n                    accuracy += torch.mean(equals.type(torch.FloatTensor)).item()\n                    \n                    validation_accuracy.append(accuracy)\n            \n            print(f\"Epoch {epoch+1}\/{epochs}... \"\n                  f\"Validation accuracy: {accuracy\/len(testloader):.3f}\"\n                  )\n            \n        running_loss = 0\n        model.train()","e0aed7cd":"%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\nimport matplotlib.pyplot as plt","9f65c796":"plt.plot(validation_accuracy, label='Validation accuracy')\nplt.legend(frameon=False)","f84a334c":"print(test['id_code'].values)","09ab87d0":"class SubmissionLoader(Dataset):\n    \n    def __init__(self, df):\n        self.datatype = 'test'\n        self.image_files = [f'..\/input\/aptos2019-blindness-detection\/test_images\/{i}.png' for i in test['id_code'].values]\n        self.transform = transforms.Compose([\n                                            #transforms.Grayscale(num_output_channels=3),\n                                            transforms.ToTensor(),\n                                            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n                                            ])\n        self.id_code = test['id_code'].values\n\n    def __len__(self):\n        return len(self.image_files)\n\n    def __getitem__(self, index):\n        image = Image.open(self.image_files[index])\n        image = image.convert('RGB')\n        image = image.resize((224, 224))\n        #image = PIL.ImageOps.autocontrast(image)\n        image = self.transform(image)\n        id_code = self.id_code[index]\n        return image, id_code","f97b1284":"submissions = torch.utils.data.DataLoader(SubmissionLoader(df=test), batch_size=1, shuffle=False)","42832771":"len(submissions)","ec004f4f":"preds = []\nid_codes = []\n\nmodel.eval()\nwith torch.no_grad():\n\n    for i, (image, id_code) in enumerate(submissions):\n\n        image = image.to(device)\n        output = model.forward(image)\n        ps = torch.exp(output)\n        top_p, top_class = ps.topk(1, dim=1)\n        pred = torch.squeeze(top_class).item()\n        preds.append(pred)\n        id_codes.append(id_code)","6fc19901":"output = pd.read_csv(\"..\/input\/aptos2019-blindness-detection\/sample_submission.csv\")\npreds = list(map(int, preds))\noutput.diagnosis = preds\noutput.to_csv(\"submission.csv\", index=False)","d07d0a42":"pd.read_csv('\/kaggle\/working\/submission.csv')","4f4c97ac":"freq, _ = np.histogram(output.diagnosis, density=True, bins=5)\nfreq","f8325369":"## Preprocess the data","73fd382a":"## We don't need to execute the next cell if we unfreeze the parameters","2f0ee5a8":"## To save only the trained weights","4c9a31e3":"models.AlexNet()","d6a4c936":"## To save the whole model","00528171":"# Required to re-define the last layer","b7910150":"## Dataloader","df847c4d":"## To resume the training"}}