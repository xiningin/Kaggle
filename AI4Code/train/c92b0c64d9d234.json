{"cell_type":{"fc7c99be":"code","4b1dd420":"code","eb2cb142":"code","34a51d75":"code","bab105b1":"code","285a8640":"code","198a00ba":"code","1a9f1a89":"code","a5fae78e":"code","465fed4d":"code","a163994d":"code","67b5fe1f":"code","91bac982":"code","ea51a569":"code","39db4ab2":"code","32fbed59":"code","2d72af7c":"code","bc52a4a3":"code","2195c626":"code","ecec592e":"code","3686f055":"code","dbab314e":"markdown"},"source":{"fc7c99be":"from __future__ import absolute_import, division, print_function\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\nimport cv2\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom PIL import Image\nimport os\nprint(os.listdir(\"..\/input\/cell_images\/cell_images\"))","4b1dd420":"infected = os.listdir('..\/input\/cell_images\/cell_images\/Parasitized\/') \nuninfected = os.listdir('..\/input\/cell_images\/cell_images\/Uninfected\/')","eb2cb142":"data = []\nlabels = []\n\nfor i in infected:\n    try:\n    \n        image = cv2.imread(\"..\/input\/cell_images\/cell_images\/Parasitized\/\"+i)\n        image_array = Image.fromarray(image , 'RGB')\n        resize_img = image_array.resize((50 , 50))\n        rotated45 = resize_img.rotate(45)\n        rotated75 = resize_img.rotate(75)\n        blur = cv2.blur(np.array(resize_img) ,(10,10))\n        data.append(np.array(resize_img))\n        data.append(np.array(rotated45))\n        data.append(np.array(rotated75))\n        data.append(np.array(blur))\n        labels.append(1)\n        labels.append(1)\n        labels.append(1)\n        labels.append(1)\n        \n    except AttributeError:\n        print('')\n    \nfor u in uninfected:\n    try:\n        \n        image = cv2.imread(\"..\/input\/cell_images\/cell_images\/Uninfected\/\"+u)\n        image_array = Image.fromarray(image , 'RGB')\n        resize_img = image_array.resize((50 , 50))\n        rotated45 = resize_img.rotate(45)\n        rotated75 = resize_img.rotate(75)\n        data.append(np.array(resize_img))\n        data.append(np.array(rotated45))\n        data.append(np.array(rotated75))\n        labels.append(0)\n        labels.append(0)\n        labels.append(0)\n        \n    except AttributeError:\n        print('')","34a51d75":"cells = np.array(data)\nlabels = np.array(labels)\n\nnp.save('Cells' , cells)\nnp.save('Labels' , labels)","bab105b1":"print('Cells : {} | labels : {}'.format(cells.shape , labels.shape))","285a8640":"plt.figure(1 , figsize = (15 , 9))\nn = 0 \nfor i in range(49):\n    n += 1 \n    r = np.random.randint(0 , cells.shape[0] , 1)\n    plt.subplot(7 , 7 , n)\n    plt.subplots_adjust(hspace = 0.5 , wspace = 0.5)\n    plt.imshow(cells[r[0]])\n    plt.title('{} : {}'.format('Infected' if labels[r[0]] == 1 else 'Unifected' ,\n                               labels[r[0]]) )\n    plt.xticks([]) , plt.yticks([])\n    \nplt.show()","198a00ba":"plt.figure(1, figsize = (15 , 7))\nplt.subplot(1 , 2 , 1)\nplt.imshow(cells[0])\nplt.title('Infected Cell')\nplt.xticks([]) , plt.yticks([])\n\nplt.subplot(1 , 2 , 2)\nplt.imshow(cells[60000])\nplt.title('Uninfected Cell')\nplt.xticks([]) , plt.yticks([])\n\nplt.show()","1a9f1a89":"n = np.arange(cells.shape[0])\nnp.random.shuffle(n)\ncells = cells[n]\nlabels = labels[n]","a5fae78e":"cells = cells.astype(np.float32)\nlabels = labels.astype(np.int32)\ncells = cells\/255","465fed4d":"from sklearn.model_selection import train_test_split\n\ntrain_x , x , train_y , y = train_test_split(cells , labels , \n                                            test_size = 0.2 ,\n                                            random_state = 111)\n\neval_x , test_x , eval_y , test_y = train_test_split(x , y , \n                                                    test_size = 0.5 , \n                                                    random_state = 111)","a163994d":"plt.figure(1 , figsize = (15 ,5))\nn = 0 \nfor z , j in zip([train_y , eval_y , test_y] , ['train labels','eval labels','test labels']):\n    n += 1\n    plt.subplot(1 , 3  , n)\n    sns.countplot(x = z )\n    plt.title(j)\nplt.show()","67b5fe1f":"print('train data shape {} ,eval data shape {} , test data shape {}'.format(train_x.shape,\n                                                                           eval_x.shape ,\n                                                                           test_x.shape))","91bac982":"tf.reset_default_graph()\ndef cnn_model_fn(features , labels , mode):\n    input_layers = tf.reshape(features['x'] , [-1 , 50 , 50 ,3])    \n    conv1 = tf.layers.conv2d(\n        inputs = input_layers , \n        filters = 50 , \n        kernel_size = [7 , 7],\n        padding = 'same',\n        activation = tf.nn.relu\n        ) \n    \n    \n    conv2 = tf.layers.conv2d(\n        inputs = conv1, \n        filters = 90,\n        kernel_size = [3 , 3],\n        padding = 'valid',\n        activation = tf.nn.relu\n        )\n\n        \n    conv3 = tf.layers.conv2d(\n        inputs = conv2 ,\n        filters = 10,\n        kernel_size = [5 , 5],\n        padding = 'same', \n        activation = tf.nn.relu\n        )\n    \n    pool1 = tf.layers.max_pooling2d(inputs = conv3 , pool_size = [2 , 2] ,\n                                    strides = 2 )\n    conv4 = tf.layers.conv2d(\n        inputs = pool1 ,\n        filters = 5,\n        kernel_size = [3 , 3],\n        padding = 'same', \n        activation = tf.nn.relu\n        )\n\n    pool2 = tf.layers.max_pooling2d(inputs = conv4 , pool_size = [2 , 2] ,\n                                    strides = 2 , padding = 'same')\n    \n    pool2_flatten = tf.layers.flatten(pool2)\n    fc1 = tf.layers.dense(\n        inputs = pool2_flatten,\n        units = 2000,\n        activation = tf.nn.relu\n        )\n    fc2 = tf.layers.dense(\n        inputs = fc1,\n        units = 1000,\n        activation = tf.nn.relu\n        )\n    fc3 = tf.layers.dense(\n        inputs = fc2 , \n        units = 500 ,\n        activation = tf.nn.relu\n        )\n    logits = tf.layers.dense(\n        inputs = fc3 ,\n        units = 2\n        )\n    \n    predictions = {\n        'classes': tf.argmax(input = logits , axis = 1),\n        'probabilities': tf.nn.softmax(logits , name = 'softmax_tensor')\n    }\n    \n    if mode == tf.estimator.ModeKeys.PREDICT:\n        return tf.estimator.EstimatorSpec(mode = mode , \n                                          predictions = predictions)\n    \n    loss = tf.losses.sparse_softmax_cross_entropy(labels = labels , \n                                                 logits = logits)\n    \n    if mode == tf.estimator.ModeKeys.TRAIN:\n        optimizer = tf.train.GradientDescentOptimizer(learning_rate = 0.001)\n        train_op = optimizer.minimize(loss = loss , \n                                      global_step = tf.train.get_global_step())\n        \n        return tf.estimator.EstimatorSpec(mode = mode , \n                                            loss = loss , \n                                            train_op = train_op \n                                           )\n    eval_metric_op = {'accuracy' : tf.metrics.accuracy(labels = labels ,\n                                         predictions =  predictions['classes'])}\n    \n    return tf.estimator.EstimatorSpec(mode = mode , \n                                      loss = loss , \n                                      eval_metric_ops = eval_metric_op)    ","ea51a569":"malaria_detector = tf.estimator.Estimator(model_fn = cnn_model_fn , \n                                         model_dir = '\/tmp\/modelchkpt')","39db4ab2":"tensors_to_log = {'probabilities':'softmax_tensor'}\nlogging_hook = tf.train.LoggingTensorHook(\n    tensors = tensors_to_log , every_n_iter = 50 \n    )","32fbed59":"train_input_fn = tf.estimator.inputs.numpy_input_fn(\n    x = {'x': train_x},\n    y = train_y,\n    batch_size = 100 , \n    num_epochs = None , \n    shuffle = True\n    )\nmalaria_detector.train(input_fn = train_input_fn , steps = 1 , hooks = [logging_hook])","2d72af7c":"malaria_detector.train(input_fn = train_input_fn , steps = 10000)","bc52a4a3":"eval_input_fn = tf.estimator.inputs.numpy_input_fn(\n    x = {'x': eval_x},\n    y = eval_y , \n    num_epochs = 1 , \n    shuffle = False\n    )\neval_results = malaria_detector.evaluate(input_fn = eval_input_fn)\nprint(eval_results)","2195c626":"pred_input_fn = tf.estimator.inputs.numpy_input_fn(\n    x = {'x' : test_x},\n    y = test_y,\n    num_epochs = 1,\n    shuffle = False\n    )\n\ny_pred = malaria_detector.predict(input_fn = pred_input_fn)\nclasses = [p['classes'] for p in y_pred]","ecec592e":"from sklearn.metrics import confusion_matrix , classification_report , accuracy_score\nprint('{} \\n{} \\n{}'.format(confusion_matrix(test_y , classes) , \n                           classification_report(test_y , classes) , \n                           accuracy_score(test_y , classes)))","3686f055":"plt.figure(1 , figsize = (15 , 9))\nn = 0 \nfor i in range(49):\n    n += 1 \n    r = np.random.randint( 0  , test_x.shape[0] , 1)\n    plt.subplot(7 , 7 , n)\n    plt.subplots_adjust(hspace = 0.5 , wspace = 0.5)\n    plt.imshow(test_x[r[0]])\n    plt.title('true {} : pred {}'.format(test_y[r[0]] , classes[r[0]]) )\n    plt.xticks([]) , plt.yticks([])\n\nplt.show()","dbab314e":"<center><h1>Detecting Malaria cells using Convolutional Neural Network<\/h1><\/center>\n![ml](https:\/\/www.h-its.org\/wp-content\/uploads\/2018\/07\/Malaria_Press_image_1.png)    \n    \n   ### Steps to solve the problem :- \n   1. Importing Libraries.\n   2. Loading the data.\n   3. Data preprocessing.\n   4. Data augmentation.\n   5. Ploting images and its labels to understand how does an infected cell and uninfected cell looks like.\n   6. Spliting data in Train , Evaluation and Test set.\n   7. Creating a Convolution Neural Network function.\n   8. Wrapping it with Tensorflow Estimator function.\n   9. Training the data on Train data.\n   10. Evaluating on evaluation data.\n   11. Predicting on Test data\n   12. Ploting the predicted image and its respective True value and predicted value.\n   \n   ### Note :\n*   This is my second image classification task.\n*    Please feel free to suggest me what should i have done more to improve the model to perform more better.\n*    Please upvote this kernel if you liked my work , Thank you."}}