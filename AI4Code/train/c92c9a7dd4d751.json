{"cell_type":{"9ed7b2c6":"code","9671ad81":"code","58bf4c68":"code","5304c9d0":"code","a9c8ae9a":"code","b7c1b74a":"code","c4486ef4":"code","f987633f":"code","8d926313":"code","d4ddb537":"code","336da589":"code","39e12f8e":"code","604ff3e5":"code","6cea90f8":"code","d7fd15cb":"code","1c423464":"code","64603ae2":"code","29996863":"code","7b734006":"code","0fd64d6a":"code","0b439758":"code","69244635":"code","2ac0f673":"code","aa24ec1e":"code","06ddbcad":"code","858f2c28":"code","940d2b4a":"code","f6aa09cc":"code","6c355972":"code","80d8fb6b":"code","b92ab3e2":"code","3f3b5481":"code","98252372":"code","21aca430":"markdown","d7b5417a":"markdown","b861131b":"markdown","e3eed8a8":"markdown","5e9edece":"markdown","c4269f6b":"markdown","0e261461":"markdown","f4640baa":"markdown","2bc914ab":"markdown","cc363386":"markdown","1e27f65c":"markdown","a566bc68":"markdown","e990963f":"markdown","8af2c79e":"markdown","3b30a344":"markdown","93b88ce0":"markdown","f737142b":"markdown","b6b751f3":"markdown","dc4f2d85":"markdown","51fe3826":"markdown","0a8ca143":"markdown","e5b231c0":"markdown","e7320443":"markdown","2dec14ea":"markdown","a7ea1adc":"markdown","ef7bb579":"markdown","bd6c3d5f":"markdown","9014b0c1":"markdown","13dc176a":"markdown","2f75a435":"markdown","058d9052":"markdown","de0ee05d":"markdown","df8208b6":"markdown","4e0203f7":"markdown","4d580ff3":"markdown","42af13b9":"markdown","4c864fe4":"markdown","d3574e04":"markdown","0cd2bc98":"markdown","0c9d1abb":"markdown","66ae48bf":"markdown","fbdebd3d":"markdown","de4ceda4":"markdown","977acc7c":"markdown","e3ae41b1":"markdown"},"source":{"9ed7b2c6":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport math\nimport matplotlib.mlab as mlab\nimport datetime\nimport scipy\nimport scipy.stats as stats\nimport seaborn as sns\n\nimport os\nprint(os.listdir(\"..\/input\"))","9671ad81":"OR_df=pd.read_excel('..\/input\/Online Retail.xlsx')\nOR_df.head()","58bf4c68":"OR_df.Country.value_counts().reset_index().head(20)","5304c9d0":"OR_df.CustomerID.unique().shape","a9c8ae9a":"(OR_df.CustomerID.value_counts()\/sum(OR_df.CustomerID.value_counts())*100).head(13).cumsum()","b7c1b74a":"OR_df.StockCode.unique().shape","c4486ef4":"OR_df.Description.unique().shape","f987633f":"des_df=OR_df.groupby(['Description','StockCode']).count().reset_index()\ndes_df.StockCode.value_counts()[des_df.StockCode.value_counts()>1].reset_index().head()","8d926313":"OR_df.Quantity.describe()","d4ddb537":"OR_df.UnitPrice.describe()","336da589":"OR_df=OR_df[OR_df.Country=='United Kingdom']\nOR_df.head()","39e12f8e":"OR_df['Amount']=OR_df.Quantity*OR_df.UnitPrice\nOR_df['Amount'].head()","604ff3e5":"OR_df=OR_df[~(OR_df['Amount']<0)]\nOR_df.head()","6cea90f8":"OR_df=OR_df[~(OR_df.CustomerID.isnull())]\nprint(OR_df.shape)\nOR_df.head()","d7fd15cb":"reference_date=OR_df.InvoiceDate.max()\nreference_date=reference_date+datetime.timedelta(days=1)#timedelta function returns to total number of seconds\nprint(OR_df.InvoiceDate.max(),OR_df.InvoiceDate.min())\nreference_date","1c423464":"OR_df['days_since_last_purchase']=reference_date-OR_df.InvoiceDate\nOR_df['days_since_last_purchase_num']=OR_df['days_since_last_purchase'].astype('timedelta64[D]')\nOR_df['days_since_last_purchase_num'].head()                                                                ","64603ae2":"customer_history_df=OR_df.groupby('CustomerID').min().reset_index()[['CustomerID', 'days_since_last_purchase_num']]\ncustomer_history_df.rename(columns={'days_since_last_purchase_num':'Recency'}, inplace=True)\nprint(customer_history_df.describe())\ncustomer_history_df.head()","29996863":"x=customer_history_df.Recency\nmu=np.mean(x)\nsigma=math.sqrt(np.var(x))\nn,bins,patches=plt.hist(x,1000,facecolor='blue',alpha=0.75)#alpha=transparency parameter\n# Add a best fit line\ny=scipy.stats.norm.pdf(bins,mu,sigma)#norm.pdf-probability density function for norm\nl=plt.plot(bins,y,'r--',lw=2)\n\nplt.xlabel('Recency in days')\nplt.ylabel('Number of transactions')\nplt.title('Histogram of Sales Recency')\nplt.grid(True)\nplt.show()","7b734006":"customer_monetary_val=OR_df[['CustomerID','Amount']].groupby('CustomerID').sum().reset_index()\ncustomer_history_df=customer_history_df.merge(customer_monetary_val,how='outer')\ncustomer_history_df.Amount=customer_history_df.Amount+0.001\ncustomer_freq=OR_df[['CustomerID','Amount']].groupby('CustomerID').count().reset_index()\ncustomer_freq.rename(columns={'Amount':'Frequency'},inplace=True)\ncustomer_history_df=customer_history_df.merge(customer_freq,how='outer')\n\ncustomer_history_df=pd.DataFrame(customer_history_df,columns=['CustomerID','Recency','Amount','Frequency'])\ncustomer_history_df.head()","0fd64d6a":"from sklearn import preprocessing\ncustomer_history_df['Recency_log'] = customer_history_df['Recency'].apply(math.log)\ncustomer_history_df['Frequency_log'] = customer_history_df['Frequency'].apply(math.log)\ncustomer_history_df['Amount_log'] = customer_history_df['Amount'].apply(math.log)\nfeature_vector=['Recency_log','Frequency_log','Amount_log']\nX=customer_history_df[feature_vector].values\nscaler=preprocessing.StandardScaler()\nX_scaled=scaler.fit_transform(X)","0b439758":"plt.scatter(customer_history_df.Recency_log,customer_history_df.Amount_log,alpha=0.5)\n\nplt.scatter(customer_history_df.Frequency_log,customer_history_df.Amount_log,alpha=0.5)","69244635":"x=customer_history_df.Amount_log\nn,bins,patches=plt.hist(x,1000,facecolor='b',alpha=0.8)\nplt.xlabel('Log of Sales Amount')\nplt.ylabel('Probability')\nplt.title('Histogram of log transformed monetary value ')\nplt.grid(True)\nplt.show()","2ac0f673":"from mpl_toolkits.mplot3d import Axes3D\nfig=plt.figure(figsize=(10,8))\nax=fig.add_subplot(111,projection='3d')\nxs=customer_history_df.Recency_log\nys=customer_history_df.Frequency_log\nzs=customer_history_df.Amount_log\nax.scatter(xs,ys,zs,s=5)\nax.set_xlabel('Recency')\nax.set_ylabel('Frequency')\nax.set_zlabel('Monetary value')\nplt.show()","aa24ec1e":"from sklearn.cluster import KMeans\nimport matplotlib.cm as cm\nfrom sklearn.metrics import silhouette_samples,silhouette_score\nX=X_scaled\ncluster_centers=dict()\nfor n_clusters in range(3,6,2):\n    fig,(ax1,ax2)=plt.subplots(1,2)\n    fig.set_size_inches(18,7)\n    ax1.set_xlim([-0.1,1])\n    ax1.set_ylim([0,len(X)+(n_clusters+1)*10])\n    \n    clusterer=KMeans(n_clusters=n_clusters,random_state=10)\n    cluster_labels=clusterer.fit_predict(X)\n    \n    silhouette_avg=silhouette_score(X,cluster_labels)\n    cluster_centers.update({n_clusters:{'cluster_centre':clusterer.cluster_centers_,\n                                       'silhouette_score':silhouette_avg,\n                                       'labels':cluster_labels}\n                           })\n    \n    sample_silhouette_values=silhouette_samples(X,cluster_labels)\n    y_lower=10\n    for i in range(n_clusters):\n        ith_cluster_silhouette_values=sample_silhouette_values[cluster_labels==i]\n        ith_cluster_silhouette_values.sort()\n        size_cluster_i=ith_cluster_silhouette_values.shape[0]\n        y_upper=y_lower+size_cluster_i\n    \n        cmap = cm.get_cmap(\"Spectral\")\n        color=cmap(float(i)\/n_clusters)\n        ax1.fill_betweenx(np.arange(y_lower,y_upper),0,\n                ith_cluster_silhouette_values,facecolor=color,edgecolor=color,alpha=0.75)\n        ax1.text(-0.05,y_lower+0.5*size_cluster_i,str(i))\n        y_lower=y_upper+10 # 10 for 0 samples\n        \n    ax1.set_title('The silhouette plot for the various clusters')\n    ax1.set_xlabel('The silhouette coefficient values')\n    ax1.set_ylabel('Cluster_label')\n    ax1.axvline(x=silhouette_avg,color='red',linestyle='--')\n    ax1.set_yticks([])\n    ax1.set_xticks([-0.1,0,0.2,0.4,0.6,0.8,1])\n    \n    colors=cmap(cluster_labels.astype(float)\/n_clusters)\n    feature1=0\n    feature2=2\n    ax2.scatter(X[:,feature1],X[:,feature2],marker='.',s=30,\n                    lw=0,alpha=0.7,edgecolor='k',c=colors)\n    centers=clusterer.cluster_centers_\n    ax2.scatter(centers[:,feature1],centers[:,feature2],marker=\"o\",\n                   alpha=1,c='white',s=200,edgecolor='k')\n    for i,c in enumerate(centers):\n        ax2.scatter(c[feature1],c[feature2],marker='$%d$'%i,alpha=1,\n                       edgecolor='k',s=50)\n    ax2.set_title('The visulization of clustered data')\n    ax2.set_xlabel('Feature space for the 2nd feature(Monetary Value)')\n    ax2.set_ylabel('Feature space for the 1st feature(Recency)')\n    plt.suptitle('Silhouetee analysis for KMeans clustering on sample data' 'with n_clusters=%d'\n                         % n_clusters,fontsize=14,fontweight='bold')\n    plt.show()","06ddbcad":"from sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_samples, silhouette_score\nimport matplotlib.cm as cm\n\nX = X_scaled\n\ncluster_centers = dict()\n\nfor n_clusters in range(3,6,2):\n    fig, (ax1, ax2) = plt.subplots(1, 2)\n    #ax2 = plt.subplot(111, projection='3d')\n    fig.set_size_inches(18, 7)\n    ax1.set_xlim([-0.1, 1])\n    ax1.set_ylim([0, len(X) + (n_clusters + 1) * 10])\n\n    clusterer = KMeans(n_clusters=n_clusters, random_state=10)\n    cluster_labels = clusterer.fit_predict(X)\n\n    silhouette_avg = silhouette_score(X, cluster_labels)\n    cluster_centers.update({n_clusters :{\n                                        'cluster_center':clusterer.cluster_centers_,\n                                        'silhouette_score':silhouette_avg,\n                                        'labels':cluster_labels}\n                           })\n\n    sample_silhouette_values = silhouette_samples(X, cluster_labels)\n    y_lower = 10\n    for i in range(n_clusters):\n        ith_cluster_silhouette_values = \\\n            sample_silhouette_values[cluster_labels == i]\n\n        ith_cluster_silhouette_values.sort()\n\n        size_cluster_i = ith_cluster_silhouette_values.shape[0]\n        y_upper = y_lower + size_cluster_i\n\n        cmap=cm.get_cmap('Spectral')\n        color = cmap(float(i) \/ n_clusters)\n        ax1.fill_betweenx(np.arange(y_lower, y_upper),\n                          0, ith_cluster_silhouette_values,\n                          facecolor=color, edgecolor=color, alpha=0.7)\n\n        ax1.text(-0.05, y_lower + 0.5 * size_cluster_i, str(i))\n        y_lower = y_upper + 10  # 10 for the 0 samples\n\n    ax1.set_title(\"The silhouette plot for the various clusters.\")\n    ax1.set_xlabel(\"The silhouette coefficient values\")\n    ax1.set_ylabel(\"Cluster label\")\n    ax1.axvline(x=silhouette_avg, color=\"red\", linestyle=\"--\")\n    ax1.set_yticks([])\n    ax1.set_xticks([-0.1, 0, 0.2, 0.4, 0.6, 0.8, 1])\n    \n    colors = cmap(cluster_labels.astype(float) \/ n_clusters)\n    feature1 = 1\n    feature2 = 2\n    ax2.scatter(X[:, feature1], X[:, feature2], marker='.', s=30, lw=0, alpha=0.7,\n                c=colors, edgecolor='k')\n    \n    centers = clusterer.cluster_centers_\n    ax2.scatter(centers[:, feature1], centers[:, feature2], marker='o',\n                c=\"white\", alpha=1, s=200, edgecolor='k')\n    for i, c in enumerate(centers):\n        ax2.scatter(c[feature1], c[feature2], marker='$%d$' % i, alpha=1,\n                    s=50, edgecolor='k')\n    ax2.set_title(\"The visualization of the clustered data.\")\n    ax2.set_xlabel(\"Feature space for the 2nd feature (Monetary Value)\")\n    ax2.set_ylabel(\"Feature space for the 1st feature (Frequency)\")\n    plt.suptitle((\"Silhouette analysis for KMeans clustering on sample data \"\n                  \"with n_clusters = %d\" % n_clusters),\n                 fontsize=14, fontweight='bold')\n    plt.show()","858f2c28":"for i in range(3,6,2):\n    print('for {} number of clusters'.format(i))\n    cent_transformed=scaler.inverse_transform(cluster_centers[i]['cluster_center'])\n    print(pd.DataFrame(np.exp(cent_transformed),columns=feature_vector))\n    print('Silhouette score for cluster {} is {}'.format(i,cluster_centers[i]['silhouette_score']))\n    ","940d2b4a":"labels=cluster_centers[5]['labels']\ncustomer_history_df['num_cluster5_labels']=labels\nlabels=cluster_centers[3]['labels']\ncustomer_history_df['num_cluster3_labels']=labels\n\ncustomer_history_df.head()","f6aa09cc":"import plotly as py\nimport plotly.graph_objs as go\npy.offline.init_notebook_mode()\n\nx_data=['Cluster 1','Cluster 2','Cluster 3','Cluster 4','Cluster 5']\ncutoff_quantile=100\nfield_to_plot='Recency'\ny0 = customer_history_df[customer_history_df['num_cluster5_labels']==0][field_to_plot].values\ny0 = y0[y0<np.percentile(y0, cutoff_quantile)]\ny1=customer_history_df[customer_history_df['num_cluster5_labels']==1][field_to_plot].values\ny1=y1[y1<np.percentile(y1,cutoff_quantile)]\ny2 = customer_history_df[customer_history_df['num_cluster5_labels']==2][field_to_plot].values\ny2 = y2[y2<np.percentile(y2, cutoff_quantile)]\ny3 = customer_history_df[customer_history_df['num_cluster5_labels']==3][field_to_plot].values\ny3 = y3[y3<np.percentile(y3, cutoff_quantile)]\ny4 = customer_history_df[customer_history_df['num_cluster5_labels']==4][field_to_plot].values\ny4 = y4[y4<np.percentile(y4, cutoff_quantile)]\ny_data=[y0,y1,y2,y3,y4]\n\ncolors = ['rgba(93, 164, 214, 0.5)', 'rgba(255, 144, 14, 0.5)', 'rgba(44, 160, 101, 0.5)', 'rgba(255, 65, 54, 0.5)',\n          'rgba(207, 114, 255, 0.5)', 'rgba(127, 96, 0, 0.5)']\ntraces=[]\n\nfor xd,yd,cls in zip(x_data,y_data,colors):\n    traces.append(go.Box(y=yd,\n                         name=xd,\n                         boxpoints=False,\n                         jitter=0.5,\n                         whiskerwidth=0.2,\n                         fillcolor=cls,\n                         marker=dict(size=2,),\n                         line=dict(width=1),\n                        ))\nlayout=go.Layout(\ntitle='Difference in sales {} from cluster to cluster'.format(field_to_plot),\nyaxis=dict(autorange=True,\n           showgrid=True,\n           zeroline=True,\n           dtick=50,\n           gridcolor='rgb(255, 255, 255)',\n           gridwidth=0.1,\n           zerolinecolor='rgb(255,255,255)',\n           zerolinewidth=2,),\nmargin=dict(\n    l=40,\n    r=30,\n    b=80,\n    t=100,\n),\npaper_bgcolor='rgb(243, 243, 243)',\nplot_bgcolor='rgb(243, 243, 243)',\nshowlegend=False\n)\nfig=go.Figure(data=traces,layout=layout)\npy.offline.iplot(fig)\n","6c355972":"import plotly as py\nimport plotly.graph_objs as go\npy.offline.init_notebook_mode()\n\nx_data = ['Cluster 1','Cluster 2','Cluster 3','Cluster 4', 'Cluster 5']\ncutoff_quantile = 90\nfield_to_plot = 'Frequency'\n\ny0 = customer_history_df[customer_history_df['num_cluster5_labels']==0][field_to_plot].values\ny0 = y0[y0<np.percentile(y0, cutoff_quantile)]\ny1 = customer_history_df[customer_history_df['num_cluster5_labels']==1][field_to_plot].values\ny1 = y1[y1<np.percentile(y1, cutoff_quantile)]\ny2 = customer_history_df[customer_history_df['num_cluster5_labels']==2][field_to_plot].values\ny2 = y2[y2<np.percentile(y2, cutoff_quantile)]\ny3 = customer_history_df[customer_history_df['num_cluster5_labels']==3][field_to_plot].values\ny3 = y3[y3<np.percentile(y3, cutoff_quantile)]\ny4 = customer_history_df[customer_history_df['num_cluster5_labels']==4][field_to_plot].values\ny4 = y4[y4<np.percentile(y4, cutoff_quantile)]\ny_data = [y0,y1,y2,y3,y4]\n\ncolors = ['rgba(93, 164, 214, 0.5)', 'rgba(255, 144, 14, 0.5)', 'rgba(44, 160, 101, 0.5)', 'rgba(255, 65, 54, 0.5)', 'rgba(207, 114, 255, 0.5)', 'rgba(127, 96, 0, 0.5)']\ntraces = []\n\nfor xd, yd, cls in zip(x_data, y_data, colors):\n        traces.append(go.Box(\n            y=yd,\n            name=xd,\n            boxpoints=False,\n            jitter=0.5,\n            whiskerwidth=0.2,\n            fillcolor=cls,\n            marker=dict(\n                size=2,\n            ),\n            line=dict(width=1),\n        ))\n\nlayout = go.Layout(\n    title='Difference in sales {} from cluster to cluster'.format(field_to_plot),\n    yaxis=dict(\n        autorange=True,\n        showgrid=True,\n        zeroline=True,\n        dtick=50,\n        gridcolor='black',\n        gridwidth=0.1,\n        zerolinecolor='rgb(255, 255, 255)',\n        zerolinewidth=2,\n    ),\n    margin=dict(\n        l=40,\n        r=30,\n        b=80,\n        t=100,\n    ),\n    paper_bgcolor='white',\n    plot_bgcolor='white',\n    showlegend=False\n)\n\nfig = go.Figure(data=traces, layout=layout)\npy.offline.iplot(fig)","80d8fb6b":"x_data = ['Cluster 1','Cluster 2','Cluster 3','Cluster 4', 'Cluster 5']\ncutoff_quantile = 80\nfield_to_plot = 'Amount'\ny0 = customer_history_df[customer_history_df['num_cluster5_labels']==0][field_to_plot].values\ny0 = y0[y0<np.percentile(y0, cutoff_quantile)]\ny1 = customer_history_df[customer_history_df['num_cluster5_labels']==1][field_to_plot].values\ny1 = y1[y1<np.percentile(y1, cutoff_quantile)]\ny2 = customer_history_df[customer_history_df['num_cluster5_labels']==2][field_to_plot].values\ny2 = y2[y2<np.percentile(y2, cutoff_quantile)]\ny3 = customer_history_df[customer_history_df['num_cluster5_labels']==3][field_to_plot].values\ny3 = y3[y3<np.percentile(y3, cutoff_quantile)]\ny4 = customer_history_df[customer_history_df['num_cluster5_labels']==4][field_to_plot].values\ny4 = y4[y4<np.percentile(y4, cutoff_quantile)]\ny_data = [y0,y1,y2,y3,y4]\n\ncolors = ['rgba(93, 164, 214, 0.5)', 'rgba(255, 144, 14, 0.5)', 'rgba(44, 160, 101, 0.5)', 'rgba(255, 65, 54, 0.5)', 'rgba(207, 114, 255, 0.5)', 'rgba(127, 96, 0, 0.5)']\ntraces = []\n\nfor xd, yd, cls in zip(x_data, y_data, colors):\n        traces.append(go.Box(\n            y=yd,\n            name=xd,\n            boxpoints=False,\n            jitter=0.5,\n            whiskerwidth=0.2,\n            fillcolor=cls,\n            marker=dict(\n                size=2,\n            ),\n            line=dict(width=1),\n        ))\n\nlayout = go.Layout(\n    title='Difference in sales {} from cluster to cluster'.format(field_to_plot),\n    yaxis=dict(\n        autorange=True,\n        showgrid=True,\n        zeroline=True,\n        dtick=1000,\n        gridcolor='black',\n        gridwidth=0.1,\n        zerolinecolor='rgb(255, 255, 255)',\n        zerolinewidth=2,\n    ),\n    margin=dict(\n        l=40,\n        r=30,\n        b=80,\n        t=100,\n    ),\n    paper_bgcolor='white',\n    plot_bgcolor='white',\n    showlegend=False\n)\n\nfig = go.Figure(data=traces, layout=layout)\npy.offline.iplot(fig)","b92ab3e2":"x_data = ['Cluster 1','Cluster 2','Cluster 3']\ncutoff_quantile = 100\nfield_to_plot = 'Recency'\ny0 = customer_history_df[customer_history_df['num_cluster3_labels']==0][field_to_plot].values\ny0 = y0[y0<np.percentile(y0, cutoff_quantile)]\ny1 = customer_history_df[customer_history_df['num_cluster3_labels']==1][field_to_plot].values\ny1 = y1[y1<np.percentile(y1, cutoff_quantile)]\ny2 = customer_history_df[customer_history_df['num_cluster3_labels']==2][field_to_plot].values\ny2 = y2[y2<np.percentile(y2, cutoff_quantile)]\n\ny_data = [y0,y1,y2]\n\ncolors = ['rgba(93, 164, 214, 0.5)', 'rgba(255, 144, 14, 0.5)',\n          'rgba(44, 160, 101, 0.5)', 'rgba(255, 65, 54, 0.5)', 'rgba(207, 114, 255, 0.5)', 'rgba(127, 96, 0, 0.5)']\ntraces = []\n\nfor xd, yd, cls in zip(x_data, y_data, colors):\n        traces.append(go.Box(\n            y=yd,\n            name=xd,\n            boxpoints=False,\n            jitter=0.5,\n            whiskerwidth=0.2,\n            fillcolor=cls,\n            marker=dict(\n                size=2,\n            ),\n            line=dict(width=1),\n        ))\n\nlayout = go.Layout(\n    title='Difference in sales {} from cluster to cluster'.format(field_to_plot),\n    yaxis=dict(\n        autorange=True,\n        showgrid=True,\n        zeroline=True,\n        dtick=50,\n        gridcolor='black',\n        gridwidth=0.1,\n        zerolinecolor='rgb(255, 255, 255)',\n        zerolinewidth=2,\n    ),\n    margin=dict(\n        l=40,\n        r=30,\n        b=80,\n        t=100,\n    ),\n    plot_bgcolor='white',\n    showlegend=False\n)\n\nfig = go.Figure(data=traces, layout=layout)\npy.offline.iplot(fig)","3f3b5481":"x_data = ['Cluster 1','Cluster 2','Cluster 3']\ncutoff_quantile = 90\nfield_to_plot = 'Frequency'\ny0 = customer_history_df[customer_history_df['num_cluster3_labels']==0][field_to_plot].values\ny0 = y0[y0<np.percentile(y0, cutoff_quantile)]\ny1 = customer_history_df[customer_history_df['num_cluster3_labels']==1][field_to_plot].values\ny1 = y1[y1<np.percentile(y1, cutoff_quantile)]\ny2 = customer_history_df[customer_history_df['num_cluster3_labels']==2][field_to_plot].values\ny2 = y2[y2<np.percentile(y2, cutoff_quantile)]\n\ny_data = [y0,y1,y2]\n\ncolors = ['rgba(93, 164, 214, 0.5)', 'rgba(255, 144, 14, 0.5)', 'rgba(44, 160, 101, 0.5)', 'rgba(255, 65, 54, 0.5)', 'rgba(207, 114, 255, 0.5)', 'rgba(127, 96, 0, 0.5)']\ntraces = []\n\nfor xd, yd, cls in zip(x_data, y_data, colors):\n        traces.append(go.Box(\n            y=yd,\n            name=xd,\n            boxpoints=False,\n            jitter=0.5,\n            whiskerwidth=0.2,\n            fillcolor=cls,\n            marker=dict(\n                size=2,\n            ),\n            line=dict(width=1),\n        ))\n\nlayout = go.Layout(\n    title='Difference in sales {} from cluster to cluster'.format(field_to_plot),\n    yaxis=dict(\n        autorange=True,\n        showgrid=True,\n        zeroline=True,\n        dtick=50,\n        gridcolor='black',\n        gridwidth=0.1,\n        zerolinecolor='rgb(255, 255, 255)',\n        zerolinewidth=2,\n    ),\n    margin=dict(\n        l=40,\n        r=30,\n        b=80,\n        t=100,\n    ),\n    plot_bgcolor='white',\n    showlegend=False\n)\n\nfig = go.Figure(data=traces, layout=layout)\npy.offline.iplot(fig)\n","98252372":"x_data = ['Cluster 1','Cluster 2','Cluster 3']\ncutoff_quantile = 80\nfield_to_plot = 'Amount'\ny0 = customer_history_df[customer_history_df['num_cluster3_labels']==0][field_to_plot].values\ny0 = y0[y0<np.percentile(y0, cutoff_quantile)]\ny1 = customer_history_df[customer_history_df['num_cluster3_labels']==1][field_to_plot].values\ny1 = y1[y1<np.percentile(y1, cutoff_quantile)]\ny2 = customer_history_df[customer_history_df['num_cluster3_labels']==2][field_to_plot].values\ny2 = y2[y2<np.percentile(y2, cutoff_quantile)]\n\ny_data = [y0,y1,y2]\n\ncolors = ['rgba(93, 164, 214, 0.5)', 'rgba(255, 144, 14, 0.5)', 'rgba(44, 160, 101, 0.5)', 'rgba(255, 65, 54, 0.5)', 'rgba(207, 114, 255, 0.5)', 'rgba(127, 96, 0, 0.5)']\ntraces = []\n\nfor xd, yd, cls in zip(x_data, y_data, colors):\n        traces.append(go.Box(\n            y=yd,\n            name=xd,\n            boxpoints=False,\n            jitter=0.5,\n            whiskerwidth=0.2,\n            fillcolor=cls,\n            marker=dict(\n                size=2,\n            ),\n            line=dict(width=1),\n        ))\n\nlayout = go.Layout(\n    title='Difference in sales {} from cluster to cluster'.format(field_to_plot),\n    yaxis=dict(\n        autorange=True,\n        showgrid=True,\n        zeroline=True,\n        dtick=1000,\n        gridcolor='black',\n        gridwidth=0.1,\n        zerolinecolor='rgb(255, 255, 255)',\n        zerolinewidth=2,\n    ),\n    margin=dict(\n        l=40,\n        r=30,\n        b=80,\n        t=100,\n    ),\n    plot_bgcolor='white',\n    showlegend=False\n)\n\nfig = go.Figure(data=traces, layout=layout)\npy.offline.iplot(fig)\n","21aca430":"We can observed that clusters 1 and 2 have a higher sales frequency then to the other clusters.","d7b5417a":"Frequency and Monetary value","b861131b":"Data preprocessing","e3eed8a8":"Visualizing Monetary Value distribution","5e9edece":"Visualize segments of Amount having 5 number of clusters","c4269f6b":"We can observed that cluster 2 have a highest sales recency then to the other clusters.","0e261461":"We can observed that cluster 3 have a highest sales amount then to other clusters.","f4640baa":"Visualization of RFM model on 3D plot","2bc914ab":"Visualize segments of Recency having 5 number of clusters","cc363386":"We can observed that from 3D plot, people who buy with a higher frequency and more Recency tends to spend more\nbased on the increasing trend in monetray value corresponding inceasing and decreasing trend on frequency and recency, respectively.","1e27f65c":"Recency","a566bc68":"Visualize segments of Recency having 3 number of clusters","e990963f":"Out of 4373 unique customers only 13 were ordered the 10% of the  total sales of retailer based on\ncumulative sum.","8af2c79e":"Remove negative or return transactions","3b30a344":"Import the dataset","93b88ce0":"Visualize segaments of Frequency having 3 number of clusters.","f737142b":"We can obeserved that cluster 3 have a highest sales frequency then to other clusters.","b6b751f3":"Import the necessary libraries","dc4f2d85":"Data Preprocessing","51fe3826":"We will construct a reference variable as number of days before the reference date when a customer last made a purchase.","0a8ca143":"Customer segmentation fro Recency vs Monetary Value","e5b231c0":"The RFM (Recency,Frequency,Monetary value) based model of customer value for finding the customer segments.\n","e7320443":"We have a skewd distribution of sales recency with a much higher frequent number of transactions and a fairly unifirm number of sales less in recent transactions.","2dec14ea":"Visualize segments of Amount having 3 number of clusters","a7ea1adc":"The unique customers of the retailer having customer ID and their percentage of orders by top 10 orders.","ef7bb579":"Online Retail Customer Segmentation Analysis","bd6c3d5f":"Visualizing Recency and Frequency vs Monetary Value (Scaled)","9014b0c1":"Cluster Segmentation for Frequency vs Monetary value","13dc176a":"Distribution of customer recency","2f75a435":"Based on the Silhouette score matrix cluster 5 segments is less optimal than to the cluster 3 segments.\nBut,along with silhouette score we should think about the business aspects while deciding number of clusters.\n","058d9052":"Exploratery data analysis","de0ee05d":"Cluster analysis","df8208b6":"We can obserevd that clusters 1 and 2 have a highest sales amount then to the other clusters.","4e0203f7":"We can see that clusters 3 and 4 have a higer avearge sales recency,thus they were being the highest spenders.","4d580ff3":"Remove transactions having missing values for the Customer ID field","42af13b9":"Create the RFM model (Recency, Frequency,Monetary value)","4c864fe4":"Separate attribute based on amount","d3574e04":"Customer history of last transactions","0cd2bc98":"To create a Recency feature variable, we need to decide the reference date for analysis and we wil define the reference date as one day before the last transaction.","0c9d1abb":"Clustering for Customer segements by using KMeans Custering algorithm.","66ae48bf":"Visualize segments of Frequency having 5 number of clusters","fbdebd3d":"The output of the two attributes having negitive values,which means that may have some return transactions in this data.","de4ceda4":"Assign cluster labels","977acc7c":"From the above, we observed that there is a mismatch between StockCode and Description and also number of Descriptions\nmore than the Stock code values,which means that we have multiple descriptions for some of the Stockcodes.","e3ae41b1":"Separate data for one geography"}}