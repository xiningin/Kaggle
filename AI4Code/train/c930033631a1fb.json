{"cell_type":{"f3de2f45":"code","cee5486d":"code","86d4bd11":"code","76aaab2c":"code","d0c7f4e1":"code","cff1b3f8":"code","78a645fd":"code","0b434682":"code","8a2232bf":"code","871e2c70":"code","9195017a":"code","69aa745d":"code","878861ed":"code","a9b44f9b":"code","9baba0ec":"code","90ada3a9":"code","b9735f56":"code","ffdbc421":"code","40192776":"code","6ff1388b":"code","1c8297d7":"code","80df5012":"code","94db2954":"code","c10aa938":"code","d0e2a2a3":"code","3202616e":"code","b4eb475f":"code","7b69ecb6":"code","0431bbff":"code","b77a4d9f":"code","4f52bc91":"code","534b11fc":"code","d24b7d13":"code","13c9df92":"code","09ceb5be":"code","d34d304a":"code","1a0038e2":"code","08d65837":"code","22e679c4":"code","c1289c86":"code","e664e440":"code","9b2b509d":"code","87a7a95b":"code","08e42cae":"code","0f8f20a3":"code","105c6677":"code","e00bd831":"code","0a0244c3":"code","7789e94c":"code","543b2d63":"code","2d7b8993":"code","8952d670":"code","85808c07":"code","4ee7914e":"code","926ab572":"code","c215a27f":"code","c5fc053a":"code","a45bb4b7":"code","03bd8ab5":"code","9ed043b2":"code","2a5a4f6e":"code","10482a80":"code","c269b96b":"code","0e4fceb8":"code","a383a3b7":"code","b13aba8d":"code","b03b7d08":"code","6ad1c03b":"code","7286140a":"code","e6ecbc1e":"code","804d14e0":"code","80ecd9c3":"code","04a56315":"code","70e27c12":"code","a18794db":"code","5f0dc296":"code","aec0b954":"code","ed560f23":"code","0a17bbe6":"code","d0c88409":"code","b04aa81a":"code","a90cb99c":"code","44afca2c":"code","b60234c3":"code","1be9fe17":"code","897d1981":"code","441fb8ef":"code","116a0099":"code","b48e5e5e":"code","cb0dee84":"code","4d0a9896":"code","77747149":"code","e11b8ea0":"code","804cd307":"code","41645d66":"code","166713a5":"code","9d9a0609":"code","f159a073":"code","9fa88fa3":"code","65d9cd9b":"code","d325fe0f":"code","fe9f424f":"code","cdb74055":"code","e9bba095":"code","dca9b394":"markdown","930d834b":"markdown","6d5e9811":"markdown","09cbbf23":"markdown","0f2474ce":"markdown","9d7eb8e7":"markdown","06349bf5":"markdown","26b7f64f":"markdown","015b3cdc":"markdown","44b8d375":"markdown","a4db8d7c":"markdown","d50f309d":"markdown","eda6a03a":"markdown","aa86313b":"markdown","a2dcf7f9":"markdown","58f6f786":"markdown","04fa38e1":"markdown","db628a99":"markdown","81a2182d":"markdown","64705c70":"markdown","b221af9c":"markdown","3cbede11":"markdown","1b27b92d":"markdown","24c49f8c":"markdown","3ea226b6":"markdown","1989937c":"markdown","804b0629":"markdown","31d661c0":"markdown","d1696be2":"markdown","84bed690":"markdown","c0f02f5a":"markdown","451a6c97":"markdown","47b1143d":"markdown","82c7ba90":"markdown","929f6b08":"markdown","29a80e28":"markdown","a924c3ff":"markdown","d6c17d1b":"markdown","8592c691":"markdown","0c822881":"markdown"},"source":{"f3de2f45":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cee5486d":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","86d4bd11":"Loan_train=pd.read_csv('..\/input\/loan-predication\/train_u6lujuX_CVtuZ9i (1).csv')","76aaab2c":"Loan_train.head()","d0c7f4e1":"print('Number of Rows in the Data',Loan_train.shape[0])\nprint('Number of Columns in the Data',Loan_train.shape[1])","cff1b3f8":"Loan_train.info()","78a645fd":"dups=Loan_train.duplicated()\nprint('Number of duplicate records',dups.sum())","0b434682":"Loan_train['Credit_History']=Loan_train['Credit_History'].astype('object')\nLoan_train['Loan_Amount_Term']=Loan_train['Loan_Amount_Term'].astype('object')","8a2232bf":"Loan_train['Dependents']=np.where(Loan_train['Dependents']=='0',0,Loan_train['Dependents'])\nLoan_train['Dependents']=np.where(Loan_train['Dependents']=='1',1,Loan_train['Dependents'])\nLoan_train['Dependents']=np.where(Loan_train['Dependents']=='2',2,Loan_train['Dependents'])\nLoan_train['Dependents']=np.where(Loan_train['Dependents']=='3+',3,Loan_train['Dependents'])","871e2c70":"Loan_train['Dependents']=Loan_train['Dependents'].astype('float64')","9195017a":"Loan_train.drop(['Loan_ID'],axis=1,inplace=True)","69aa745d":"cat=[]\nnum=[]\nfor i in Loan_train.columns:\n    if Loan_train[i].dtype=='object':\n        cat.append(i)\n    else:\n        num.append(i)\n\nprint(cat)\nprint(num)","878861ed":"#Looking at unique values\nfor i in Loan_train[cat]:\n    print(i)\n    print( Loan_train[i].value_counts())\n    print('**********************************')","a9b44f9b":"Loan_train[num].describe().T","9baba0ec":"Loan_train[cat].describe().T","90ada3a9":"Loan_train[num].isnull().sum()","b9735f56":"Loan_train[cat].isnull().sum()","ffdbc421":"#We observe that there are Null values in the Dataset","40192776":"#Updating the values in  Tagret Variable","6ff1388b":"Loan_train['Loan_Status']=np.where(Loan_train['Loan_Status']=='Y',1,Loan_train['Loan_Status'])\nLoan_train['Loan_Status']=np.where(Loan_train['Loan_Status']=='N',0,Loan_train['Loan_Status'])","1c8297d7":"Loan_train['Loan_Status']=Loan_train['Loan_Status'].astype('int64')","80df5012":"for i in Loan_train[num]:\n    plt.figure(figsize=(8,6))\n    sns.histplot(Loan_train[i],kde=True)","94db2954":"plt.subplot(1,1,1)\nLoan_train['Loan_Status'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%')\nplt.show()\nplt.subplot(1,2,2)\nsns.countplot(Loan_train['Loan_Status'])\nplt.show()","c10aa938":"#68.7% of the Loans get approved while 31.3% get rejected","d0e2a2a3":"Loan_train['Gender'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%')\nplt.show()\nsns.countplot(Loan_train['Gender'])\nplt.show()","3202616e":"#81.4% of the applicants are Male","b4eb475f":"Loan_train['Self_Employed'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%')\nplt.show()\nsns.countplot(Loan_train['Self_Employed'])\nplt.show()","7b69ecb6":"#85.9% of the applicants are Self_Employed","0431bbff":"Loan_train['Dependents'].value_counts().plot.pie(autopct='%1.1f%%')\nplt.show()\nsns.countplot(Loan_train['Dependents'])\nplt.show()","b77a4d9f":"# 57.6% of the Applicants have no dependents\n# Most Applicant have no Dependents","4f52bc91":"Loan_train['Education'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%')\nplt.show()\nsns.countplot(Loan_train['Education'])","534b11fc":"#78.2% of the Applicants are Graduates","d24b7d13":"Loan_train['Credit_History'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%')\nplt.show()\nsns.countplot(Loan_train['Credit_History'])\nplt.show()","13c9df92":"#84.2% of the Applicants have very good Credit Score","09ceb5be":"Loan_train['Property_Area'].value_counts().plot.pie(autopct='%1.1f%%')\nplt.show()\nsns.countplot(Loan_train['Property_Area'])\nplt.show()","d34d304a":"# Most Applicants are from Urban  or Semiurban Area","1a0038e2":"sns.countplot(Loan_train['Gender'],hue=Loan_train['Loan_Status'])\nplt.show()","08d65837":"pd.crosstab(Loan_train['Gender'],Loan_train['Loan_Status'],margins=True)","22e679c4":"print('Approaval rate of Loans of Male Applicants',np.round(339\/489,2))\nprint('Approaval rate of Loans of Female Applicants',np.round(75\/112,2))","c1289c86":"#Although Female Applicants are much less, does not mean that their Loans are less likely to be approved.","e664e440":"sns.countplot(Loan_train['Married'],hue=Loan_train['Loan_Status'])\nplt.show()","9b2b509d":"pd.crosstab(Loan_train['Married'],Loan_train['Loan_Status'],margins=True)","87a7a95b":"print('Approaval rate of Loans of Married Applicants',np.round(285\/398,2))\nprint('Approaval rate of Loans of Non-Married Applicants',np.round(134\/213,2))","08e42cae":"#Loans of Married Applicants are more likely to be approved","0f8f20a3":"sns.countplot(Loan_train['Dependents'],hue=Loan_train['Loan_Status'])\nplt.show()","105c6677":"pd.crosstab(Loan_train['Dependents'],Loan_train['Loan_Status'],margins=True,normalize=True)","e00bd831":"#Applicants with 0 Dependents have more chances of Loan Approval, while 3+ Dependents have very low chances","0a0244c3":"sns.countplot(Loan_train['Education'],hue=Loan_train['Loan_Status'])\nplt.show()","7789e94c":"pd.crosstab(Loan_train['Education'],Loan_train['Loan_Status'],margins=True)","543b2d63":"print('Approaval rate of Loans of Graduate Applicants',np.round(340\/480,2))\nprint('Approaval rate of Loans of Not Graduate Applicants',np.round(82\/134,2))","2d7b8993":"#Applicants who are Graduate have more chances of Loan Approval.","8952d670":"sns.countplot(Loan_train['Credit_History'],hue=Loan_train['Loan_Status'])\nplt.show()\npd.crosstab(Loan_train['Credit_History'],Loan_train['Loan_Status'],margins=True)","85808c07":"print('Approaval rate of Loans for Applicants who do not have credit history meets guidelines',np.round(7\/89,2))\nprint('Approaval rate of Loans for Applicants who have credit history meets guidelines',np.round(378\/475,2))","4ee7914e":"#As we Expect Applicants with good credit History have more chances of Loan Approval while for Applicants with Poor Credit History there is almost no individual.","926ab572":"sns.countplot(Loan_train['Property_Area'],hue=Loan_train['Loan_Status'])\nplt.show()","c215a27f":"pd.crosstab(Loan_train['Property_Area'],Loan_train['Loan_Status'],margins=True)","c5fc053a":"print('Approaval rate of Loans for Applicants from Rural Area',np.round(110\/179,2))\nprint('Approaval rate of Loans for Applicants from Semiurban Area',np.round(179\/233,2))\nprint('Approaval rate of Loans for Applicants from Urban Area',np.round(133\/202,2))","a45bb4b7":"#Applicants from Semiurban Area have more chances of Loan Approval while for Applicants from Rural area have least.","03bd8ab5":"sns.kdeplot('ApplicantIncome',hue='Loan_Status',data=Loan_train)","9ed043b2":"sns.barplot('Loan_Status','ApplicantIncome',data=Loan_train)","2a5a4f6e":"# We Would Expect Applicant with Higer Income have more chances for their Loans to be approved\n# But as we can see Applicants with Higher Income also have thier Loans Rejected.\n# NOthing can be concluded on the relation b\/w Loan_Status and ApplicantIncome","10482a80":"sns.kdeplot('CoapplicantIncome',hue='Loan_Status',data=Loan_train)","c269b96b":"sns.barplot('Loan_Status','CoapplicantIncome',data=Loan_train)\nplt.show()","0e4fceb8":"# We Would Expect Applicant with Co applicant Income Income have more chances for their Loans to be approved as they are less likely to Default\n# Nothing can be concluded on the relation b\/w Loan_Status and Co applicant Income","a383a3b7":"sns.kdeplot('LoanAmount',hue='Loan_Status',data=Loan_train)","b13aba8d":"# Nothing can be concluded on the relation b\/w Loan_Status and Co applicant Income","b03b7d08":"for i in Loan_train[num]:\n    x=1\n    axes=plt.subplots(x)\n    sns.boxplot(Loan_train[i],ax=axes[x])\n    x=x+1","6ad1c03b":"#We observe there are Significant Outliers","7286140a":"sns.pairplot(Loan_train[num],corner=True)","e6ecbc1e":"sns.heatmap(Loan_train.corr(),annot=True,mask=np.triu(Loan_train.corr(),+1))","804d14e0":"# We observe there is no significan correlation Between the variables ","80ecd9c3":"cat_cols=['Gender','Married','Education','Self_Employed','Loan_Amount_Term','Credit_History','Property_Area']","04a56315":"con_col=num","70e27c12":"Loan_train['Gender']=Loan_train['Gender'].fillna(Loan_train['Gender'].mode()[0])\nLoan_train['Married']=Loan_train['Married'].fillna(Loan_train['Married'].mode()[0])\nLoan_train['Dependents']=Loan_train['Dependents'].fillna(Loan_train['Dependents'].mode()[0])\nLoan_train['Self_Employed']=Loan_train['Self_Employed'].fillna(Loan_train['Self_Employed'].mode()[0])\nLoan_train['LoanAmount']=Loan_train['LoanAmount'].fillna(Loan_train['LoanAmount'].median())\nLoan_train['Loan_Amount_Term']=Loan_train['Loan_Amount_Term'].fillna(Loan_train['Loan_Amount_Term'].median())\nLoan_train.loc[(Loan_train.Credit_History.isnull())&(Loan_train.ApplicantIncome>=3859),'Credit_History']=1\nLoan_train.loc[(Loan_train.Credit_History.isnull())&(Loan_train.ApplicantIncome<=3859),'Credit_History']=0","a18794db":"Loan_train = pd.get_dummies(Loan_train, columns = cat_cols, drop_first = True)\nfrom sklearn.preprocessing import StandardScaler\nscaler=StandardScaler()\nLoan_train[con_col] = scaler.fit_transform(Loan_train[con_col])\nprint(\"The first 5 rows of data are\")\nLoan_train.head()","5f0dc296":"X=Loan_train.drop('Loan_Status',axis=1)\nY=Loan_train[['Loan_Status']]","aec0b954":"from sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=.30,stratify=Y)","ed560f23":"from sklearn import metrics","0a17bbe6":"from sklearn.ensemble import RandomForestClassifier\nRFCL=RandomForestClassifier(n_estimators=1000,max_depth=7,max_features='auto',min_samples_split=10,min_samples_leaf=5,random_state=1)\nRFCL_model=RFCL.fit(X_train,Y_train)\nprint('Accuracy Score is ',RFCL_model.score(X_train,Y_train))\nY_train_predict_RFCL=RFCL_model.predict(X_train)\nY_test_predict_RFCL=RFCL_model.predict(X_test)\nprint('Accuracy Score is ',RFCL_model.score(X_test,Y_test))","d0c88409":"print(\"Confusion Matrix\")\ncm_test=metrics.confusion_matrix(Y_test, Y_test_predict_RFCL)\ncm_test","b04aa81a":"cr_test=metrics.classification_report(Y_test, Y_test_predict_RFCL)\nprint(\"Classification_report\",'\\n',cr_test )","a90cb99c":"from sklearn.linear_model import LogisticRegression\nLR=LogisticRegression(solver='newton-cg',max_iter=10000)\nLR_Model=LR.fit(X_train,Y_train)\nprint('Accuracy Score is ',LR_Model.score(X_train,Y_train))\nY_train_predict_LR=LR_Model.predict(X_train)\nY_test_predict_LR=LR_Model.predict(X_test)\nprint('Accuracy Score is ',LR_Model.score(X_test,Y_test))","44afca2c":"cm_lr_test=metrics.confusion_matrix(Y_test, Y_test_predict_LR)\nprint(\"Classification_report\",'\\n',cm_lr_test )","b60234c3":"cr_lr_test=metrics.classification_report(Y_test, Y_test_predict_LR)\nprint(\"Classification_report\",'\\n',cr_lr_test )","1be9fe17":"from sklearn.discriminant_analysis import LinearDiscriminantAnalysis \nLDA=LinearDiscriminantAnalysis()\nLDA_model=LDA.fit(X_train,Y_train)\nLDA_train_model = LDA_model.score(X_train, Y_train)\nY_train_predict_LDA=LDA_model.predict(X_train)\nprint('Accuracy Score is ',LDA_train_model)\nLDA_test_model = LDA_model.score(X_test, Y_test)\nY_test_predict_LDA=LDA_model.predict(X_test)\nprint('Accuracy Score is ',LDA_test_model)","897d1981":"cm_lda_test=metrics.confusion_matrix(Y_test, Y_test_predict_LDA)\nprint(\"confusion_matrix\",'\\n',cm_lda_test )","441fb8ef":"cr_lda_test=metrics.classification_report(Y_test, Y_test_predict_LDA)\nprint(\"Classification_report\",'\\n',cr_lda_test )","116a0099":"from sklearn.neighbors import KNeighborsClassifier\nKNN=KNeighborsClassifier(n_neighbors=19,weights='distance' )\nKNN_model=KNN.fit(X_train,Y_train)\nKNN_train_model = KNN_model.score(X_train, Y_train)\nprint('Accuracy Score is ',KNN_train_model)\nKNN_test_model = KNN_model.score(X_test, Y_test)\nprint('Accuracy Score is ',KNN_test_model)","b48e5e5e":"#We observe that KNN overfits the data","cb0dee84":"from sklearn.naive_bayes import GaussianNB\nNB= GaussianNB()\nNB_model = NB.fit(X_train,Y_train)\nNB_train_model = NB_model.score(X_train, Y_train)\nY_train_predict_NB=NB_model.predict(X_train)\nprint('Accuracy Score is ',NB_train_model)\nNB_test_model = NB_model.score(X_test, Y_test)\nY_test_predict_NB=NB_model.predict(X_test)\nprint('Accuracy Score is ',NB_test_model)\n","4d0a9896":"cm_NB_test=metrics.confusion_matrix(Y_test, Y_test_predict_NB)\nprint(\"confusion_matrix\",'\\n',cm_NB_test )","77747149":"cr_NB_test=metrics.classification_report(Y_test, Y_test_predict_NB)\nprint(\"classification_report\",'\\n',cr_NB_test )","e11b8ea0":"from sklearn.ensemble import BaggingClassifier\nBag = BaggingClassifier(n_estimators=20,random_state=1)\nBag_model = Bag.fit(X_train,Y_train)\nBag_train_model = Bag_model.score(X_train, Y_train)\nprint('Accuracy Score is ',Bag_train_model)\nBag_test_model = Bag_model.score(X_test, Y_test)\nprint('Accuracy Score is ',Bag_test_model)","804cd307":"Y_train_predict_Bag=Bag_model.predict(X_train)\nY_test_predict_Bag=Bag_model.predict(X_test)","41645d66":"cm_test_Bag=metrics.confusion_matrix(Y_test, Y_test_predict_Bag)\nprint(\"confusion_matrix\",'\\n',cm_test_Bag )","166713a5":"cr_test_Bag=metrics.classification_report(Y_test, Y_test_predict_Bag)\nprint(\"classification_report\",'\\n',cr_test_Bag )","9d9a0609":"from sklearn.ensemble import AdaBoostClassifier\nBoost = AdaBoostClassifier(n_estimators=5, random_state=1)\nBoost_model = Boost.fit(X_train,Y_train)\nBoost_train_model = Boost_model.score(X_train, Y_train)\nprint('Accuracy Score is ',Boost_train_model)\nBoost_test_model = Boost_model.score(X_test, Y_test)\nprint('Accuracy Score is ',Bag_test_model)","f159a073":"Y_train_predict_Ad_boost=Boost_model.predict(X_train)\nY_test_predict_Ad_boost=Boost_model.predict(X_test)","9fa88fa3":"cm_test_Ad_boost=metrics.confusion_matrix(Y_test, Y_test_predict_Ad_boost)\nprint(\"confusion_matrix\",'\\n',cm_test_Ad_boost )","65d9cd9b":"cr_test_Ad_boost=metrics.classification_report(Y_test, Y_test_predict_Ad_boost)\nprint(\"classification_report\",'\\n',cr_test_Ad_boost )","d325fe0f":"from sklearn.ensemble import GradientBoostingClassifier\ngbcl=GradientBoostingClassifier(n_estimators=15,random_state=1)\ngbcl_model = gbcl.fit(X_train,Y_train)\ngbcl_train_model = gbcl_model.score(X_train, Y_train)\nprint('Accuracy Score is ',gbcl_train_model)\ngbcl_test_model = gbcl_model.score(X_test, Y_test)\nprint('Accuracy Score is ',gbcl_test_model)","fe9f424f":"Y_train_predict_Gradient_boost=Boost_model.predict(X_train)\nY_test_predict_Gradient_boost=Boost_model.predict(X_test)","cdb74055":"cm_test_Gradient_boost=metrics.confusion_matrix(Y_test, Y_test_predict_Gradient_boost)\nprint(\"confusion_matrix\",'\\n',cm_test_Gradient_boost )","e9bba095":"cr_test_Gradient_boost=metrics.classification_report(Y_test, Y_test_predict_Gradient_boost)\nprint(\"classification_report\",'\\n',cr_test_Gradient_boost )","dca9b394":"Train file:\u00a0CSV\u00a0containing the customers for whom loan eligibility is known as 'Loan_Status'\n\nLoan_ID - Unique Loan ID\n\nGender  - Male\/ Female\n\nMarried - Applicant married (Y\/N)\n\nDependents - Number of dependents\n\nEducation - Applicant Education (Graduate\/ Under Graduate)\n\nSelf_Employed - Self employed (Y\/N)\n\nApplicantIncome - Applicant income\n\nCoapplicantIncome - Coapplicant income\n\nLoanAmount - Loan amount in thousands\n\nLoan_Amount_Term - Term of loan in months\n\nCredit_History - credit history meets guidelines\n\nProperty_Area - Urban\/ Semi Urban\/ Rural\n\nLoan_Status - (Target) Loan approved (Y\/N)","930d834b":"#### Looking at the aproval rate with Respect to Credit Score","6d5e9811":"# Train_Test_Split","09cbbf23":"* Most Applicants are Male\n* Most applicant are Married\n* Most Applicants have no dependents\n* Most Applicants are not Self Employed\n* Most Applicants are from Semi urban\n* MOst of the Loans have been Approved\n* Minimum Term of loan in months is 12 and Maximum is 480 months.","0f2474ce":"##### Shape of the Dataset","9d7eb8e7":"#### Looking at the aproval rate with Respect to Co-applicant Income.","06349bf5":"#### Looking at the distribution of the Dataset","26b7f64f":"#### Looking at the aproval rate for gender","015b3cdc":"# Multivariate Analysis","44b8d375":"### We observe that apart from KNN all the models give similar Accuracy but the recall and F1-Score is very low \n### Overall Looking at all the parameters Naive Bayes gives the best results","a4db8d7c":"#### Summary of the Non - Numeric Data","d50f309d":"#### Separating object and numeric data","eda6a03a":"#### Checking for duplicate values","aa86313b":"### K- Nearest Neighbour","a2dcf7f9":"#### Looking at the aproval rate with Respect to Property Area","58f6f786":"#### Looking at the aproval rate with Respect to Applicant Income.","04fa38e1":"#### Looking at the aproval rate with Respect to Marital Status ","db628a99":"#### Checking for NUll Values","81a2182d":"#### Looking at the aproval rate with Respect to  Loan Amount","64705c70":"## Modeling selection ","b221af9c":"* We observe there are Null values in the Data \n* Credit_History and Loan_Amount_Term are Categorical varible we need to change its Data type\n* Loan_Status is the Target Variables\n* We can drop the Loan_ID Column as it does not provide any information","3cbede11":"## Bagging Classifier","1b27b92d":"#### Summary of the Numeric Data","24c49f8c":"### Importing Libraries","3ea226b6":"#### Looking at the aproval rate with Respect to Education","1989937c":"### Linear Discriminant Analysis ","804b0629":"### Treating Null Values","31d661c0":"#### Univariate Analysis","d1696be2":"*  we observe that there is high standard deviation i.e there is a lot of variance in the Dataset.\n*  some Records are missing in LoanAmount and Loan_Amount_Term columns\n*  Maximum Loan Amount  applied for is 700 thousand","84bed690":"#### Looking at the Dataset","c0f02f5a":"### Naive Bayes","451a6c97":"## AdaBoosting","47b1143d":"### Random Forest","82c7ba90":"## Checking for the Outliers.","929f6b08":"### Gradient Boosting ","29a80e28":"* We observe that the numeric Columns are highly Skewed towards right","a924c3ff":"# Encoding and Scaling","d6c17d1b":"# Bivariate Analysis","8592c691":"#### Looking at the aproval rate with Respect to Dependents","0c822881":"#### Importing the data"}}