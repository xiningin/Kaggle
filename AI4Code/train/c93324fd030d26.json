{"cell_type":{"27cf7a50":"code","7d10c743":"code","d1d5e5ff":"code","d1f451db":"code","06affb55":"code","8344624b":"code","14c4b5d8":"code","be6fde60":"code","be152b59":"code","2e324357":"code","4ab54625":"code","c389219f":"code","23c5d28f":"code","482effea":"code","b9b43dbe":"code","d0f84be0":"code","f2c68fdc":"code","f71d7068":"code","3d3ed0bb":"code","314f110e":"code","677162dd":"code","49ae11dc":"code","31ea35d4":"code","6ffd6aa9":"code","2bf6a3ca":"code","95b70cc1":"code","8e96e4f4":"code","0a63ba2c":"code","f9f3f11c":"code","7d1ad5d0":"code","cd6ac06c":"code","2f49df57":"code","f574867e":"code","8fa6e7e3":"code","b3ef5ff2":"code","cdb1146c":"markdown","473b7b17":"markdown","2f93b751":"markdown","18a49b5a":"markdown","e30af429":"markdown","dda378c0":"markdown","7a726013":"markdown","237ac116":"markdown","a2bda8a4":"markdown","50c1f2c4":"markdown","7d24ec12":"markdown","b9c611e2":"markdown","eb12324f":"markdown","5458fb2a":"markdown","ce634305":"markdown","12753ebc":"markdown","747031ad":"markdown","92bdbe05":"markdown"},"source":{"27cf7a50":"### Imports ###\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport altair as alt # Interactive data visualization\nimport os\nfrom datetime import date, timedelta\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()\n\n# Listing all files available\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","7d10c743":"# Loading deaths and confirmed cases to memory\ndeaths = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv')\nconfirmed = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv')\nrecovered = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv')","d1d5e5ff":"# Summing up the regions of countries\ndf = confirmed.groupby('Country\/Region').sum()","d1f451db":"def plotGR(country, days = None, start = None):\n    '''Function to plot and return exponential growth rate \u00b5.\n    Exponential growth: N(t) = N0 * exp(\u00b5 * t)\n    At \u00b5 = 0.693 the population is doubling once per day'''\n    \n    valid = df.loc[country,'1\/22\/20':][df.loc[country,'1\/22\/20':] > 100].values[start:days]\n    f = np.polyfit(np.arange(len(valid)), np.log(valid), 1)\n    f = np.poly1d(f)\n    t = np.arange(len(valid))\n\n    plt.scatter(np.arange(len(valid)), np.log(valid), label = f'{country}, \u00b5 = {round(f[1], 2)}, tD = {round(np.log(2)\/f[1],1)} days')\n    plt.plot(t, f(t), label = '_nolabel')\n\n    plt.legend(bbox_to_anchor = (1,1))\n    return(f)","06affb55":"# Countries with signifficant number of confirmed cases\nhigh = list(df[(df.iloc[:,-14] > 100) &\n               (df.iloc[:,-1] > 5000)].index)","8344624b":"# Plotting Growth rates\ngrowth_rates = []\nplt.figure(dpi = 144)\nfor country in high:\n    growth_rates.append(plotGR(country, 7))\nplt.xlabel('Days after reaching 100 confirmed infections')\nplt.ylabel('ln(confirmed cases)')\nplt.title(f'''Average Initial growth rate \u00b5 = {round(np.mean([a[1] for a in growth_rates]),3)} \n+\/- {round(np.std([a[1] for a in growth_rates]),3)} (std. dev.)''')","14c4b5d8":"# Summing up the regions of countries\ndf2 = deaths.groupby('Country\/Region').sum()\n# Focusing on countries with at least 100 confirmed deaths (as of 26.3.2020)\nhigh_deaths = df2.loc[df2.loc[:,'3\/26\/20'] > 100,:].index","be6fde60":"def plotGR_death(country, days = None, start = None):\n    '''Function to plot and return exponential growth rate \u00b5.\n    Exponential growth: N(t) = N0 * exp(\u00b5 * t)\n    At \u00b5 = 0.693 the population is doubling once per day'''\n    \n    valid = df2.loc[country,'1\/22\/20':][df2.loc[country,'1\/22\/20':] > 10].values[start:days]\n    f = np.polyfit(np.arange(len(valid)), np.log(valid), 1)\n    f = np.poly1d(f)\n    t = np.arange(len(valid))\n\n    plt.scatter(np.arange(len(valid)), np.log(valid), label = f'{country}, \u00b5 = {round(f[1], 2)}, tD = {round(np.log(2)\/f[1],1)} days')\n    plt.plot(t, f(t), label = '_nolabel')\n\n    plt.legend(bbox_to_anchor = (1,1))\n    return(f)","be152b59":"## Same as above, just based on deceased\ngrowth_rates_death = []\nplt.figure(dpi = 144)\nfor country in high_deaths:\n    growth_rates_death.append(plotGR_death(country, 7))\nl = plt.xlabel('Days after reaching 10 confirmed deaths')\nl = plt.ylabel('ln(deaths)')\nl = plt.title(f'''Average Inital growth rate (based on deaths) \u00b5 = {round(np.mean([a[1] for a in growth_rates_death]),3)} \n+\/- {round(np.std([a[1] for a in growth_rates_death]),3)} (std. dev.)''')","2e324357":"plt.figure(dpi = 144, figsize = (6,5))\nfor i, country in enumerate(high):\n    if i < 9:\n        p1 = plt.subplot(2,1,1)\n        plotGR(country, start = -7)\n    else:\n        p2 = plt.subplot(2,1,2, sharex = p1)\n        plotGR(country, start = -7)\n\nl = plt.ylabel('ln(confiremd cases)')\nl = plt.suptitle('Growth rate of confirmed cases during the last week')","4ab54625":"plt.figure(dpi = 144, figsize = (6,5))\nfor i, country in enumerate(high):\n    if i < 9:\n        p1 = plt.subplot(2,1,1)\n        plotGR_death(country, start = -7)\n    else:\n        p2 = plt.subplot(2,1,2, sharex = p1)\n        plotGR_death(country, start = -7)\n\nl = plt.ylabel('ln(deaths)')\nl = plt.suptitle('Growth rate of deaths during the last week')","c389219f":"# Sliding window fit \ndef slidingWindowFit(df, lower_cases_limit = 100):\n    window_len = 7 # 7 days sliding window\n    growth_rates = pd.DataFrame([])\n    for country in df.index:\n        ts = df.loc[country,'1\/22\/20':]\n        mu = {}\n        for start in range(3, len(ts) - 3):\n            if ts[start] > lower_cases_limit: # We are above the noise threshold\n                f = np.polyfit(np.arange(window_len), np.log(ts[start - 3:start + 4]), 1)\n                f = np.poly1d(f)\n                mu[ts.index[start]] = f[1]\n            else:\n                mu[ts.index[start]] = np.nan\n        \n        growth_rates = pd.concat([growth_rates, pd.DataFrame(mu, index = [country])])\n    return (growth_rates)","23c5d28f":"growth_rates = slidingWindowFit(df)\ngrowth_rates_death = slidingWindowFit(df2, 10)","482effea":"plt.figure(dpi = 144)\nfor country in high:\n    plt.plot( growth_rates.loc[country,:], label = country)\nl = plt.xticks(range(0,len(growth_rates.columns),2),growth_rates.columns[0:-1:2], fontSize = 6, rotation = 60)\nl = plt.legend(bbox_to_anchor = (1,1))\nl = plt.xlabel('Date')\nl = plt.ylabel('7 day sliding window exponential growth')\nl = plt.title('Growth Rates over time (7 day sliding window fit)')","b9b43dbe":"plt.figure(dpi = 144)\nfor country in high:\n    plt.plot( growth_rates_death.loc[country,:], label = country)\nl = plt.xticks(range(0,len(growth_rates.columns),2),growth_rates.columns[0:-1:2], \n               fontSize = 6, rotation = 60)\nl = plt.legend(bbox_to_anchor = (1,1))\nl = plt.xlabel('Date')\nl = plt.ylabel('7 day sliding window exponential growth')\nl = plt.title('Growth Rates of deaths over time (7 day sliding window fit)')","d0f84be0":"td = np.log(2) \/ growth_rates.iloc[:,-1].dropna()\ntd_death = np.log(2) \/ growth_rates_death.iloc[:,-1]\nprint('Doubling times of confirmed cases | deaths in days (tD)')\nprint('Date:',str(date.today()))\nprint('------------')\nl = [print(a,':',round(b,1),'|', round(td_death.loc[a],1)) for (a, b) in zip(td.index, td)]","f2c68fdc":"for country in high:\n    plt.figure()\n    plt.plot( growth_rates_death.loc[country,:], label = 'Deaths')\n    plt.plot(growth_rates.columns, growth_rates.loc[country,:], label = 'Confirmed cases')\n    l = plt.xticks(range(0,len(growth_rates.columns),2),growth_rates.columns[0:-1:2], \n                   fontSize = 6, rotation = 60)\n    l = plt.legend(bbox_to_anchor = (1,1))\n    l = plt.xlabel('Date')\n    l = plt.ylabel('7 day sliding window exponential growth rate')\n    l = plt.title(f'Growth Rates of COVID-19 in {country}')\n    plt.show()","f71d7068":"from mpl_toolkits.basemap import Basemap","3d3ed0bb":"gr = pd.merge(df.iloc[:,:2],growth_rates, left_index = True, right_index = True)\ngrd = pd.merge(df.iloc[:,:2],growth_rates_death, left_index = True, right_index = True)","314f110e":"plt.figure(dpi = 300)\nm=Basemap(llcrnrlon=-180, llcrnrlat=-65,urcrnrlon=180,urcrnrlat=80)\nm.drawmapboundary(fill_color='#A6CAE0', linewidth=0)\nm.fillcontinents(color='grey', alpha = 0.3)\nm.drawcoastlines(linewidth=0.1, color=\"white\")\nm.scatter(df['Long'], df['Lat'], latlon = True, c = np.log(df.iloc[:,-1]), s = 10, alpha = 0.8, cmap='jet')\n#m.contourf(df['Long'].values, df['Lat'].values,  data = np.log(df.iloc[:,-1].fillna(0.001).values))#, latlon = True)\nm.colorbar()\nl = plt.title('Natural Logarithm of Confirmed Cases')","677162dd":"plt.figure(dpi = 300)\nm=Basemap(llcrnrlon=-180, llcrnrlat=-65,urcrnrlon=180,urcrnrlat=80)\nm.drawmapboundary(fill_color='#A6CAE0', linewidth=0)\nm.fillcontinents(color='grey', alpha = 0.3)\nm.drawcoastlines(linewidth=0.1, color=\"white\")\nm.scatter(df2['Long'], df2['Lat'], latlon = True, c = np.log(df2.iloc[:,-1]), s = 10, alpha = 0.8, cmap='jet')\n#m.contourf(df['Long'].values, df['Lat'].values,  data = np.log(df.iloc[:,-1].fillna(0.001).values))#, latlon = True)\nm.colorbar()\nl = plt.title('Natural Logarithm of Deaths')","49ae11dc":"plt.figure(dpi = 300)\nm=Basemap(llcrnrlon=-180, llcrnrlat=-65,urcrnrlon=180,urcrnrlat=80)\nm.drawmapboundary(fill_color='#A6CAE0', linewidth=0)\nm.fillcontinents(color='grey', alpha = 0.3)\nm.drawcoastlines(linewidth=0.1, color=\"white\")\nm.scatter(gr['Long'], gr['Lat'], latlon = True, c = gr.iloc[:,-1], s = 5, alpha = 0.8, cmap='jet', vmax = 0.05)\n#m.contourf(df['Long'].values, df['Lat'].values,  data = np.log(df.iloc[:,-1].fillna(0.001).values))#, latlon = True)\nm.colorbar()\nl = plt.title('Growth Rate of Confirmed Cases \\n(> 0.05 = Virus spreading exponentially)')","31ea35d4":"plt.figure(dpi = 300)\nm=Basemap(llcrnrlon=-180, llcrnrlat=-65,urcrnrlon=180,urcrnrlat=80)\nm.drawmapboundary(fill_color='#A6CAE0', linewidth=0)\nm.fillcontinents(color='grey', alpha = 0.3)\nm.drawcoastlines(linewidth=0.1, color=\"white\")\nm.scatter(grd['Long'], grd['Lat'], latlon = True, c = grd.iloc[:,-1], s = 10, alpha = 0.8, cmap='jet')\n#m.contourf(df['Long'].values, df['Lat'].values,  data = np.log(df.iloc[:,-1].fillna(0.001).values))#, latlon = True)\nm.colorbar()\nl = plt.title('Growth Rate of Deaths')","6ffd6aa9":"def gompertz(t, N0, K, b):\n    Nt = K * np.exp(np.log(N0 \/ K) * np.exp(- b * t))\n    return (Nt)","2bf6a3ca":"from scipy.optimize import curve_fit\n\ny_data = df2.loc[df2.index != 'China','2\/22\/20':].sum()\n#y_data = df2.loc['US','2\/22\/20':]\ny_data  = y_data[y_data > 0]\nx_data = np.arange(len(y_data)) + 1\n\n\npopt, pcov = curve_fit(gompertz,x_data, y_data, bounds = (\n    [1, 1, 0.001], [1000, 1e10 , 1] ))","95b70cc1":"def plotGompertz(country = 'Global (excl. China)', fig = None, deceased = True):\n    if deceased:\n        dfp = df2\n        name = 'Deaths'\n    else:\n        dfp = df\n        name = 'Reported Cases'\n        \n    if country == 'Global (excl. China)':\n        y_data = dfp.loc[dfp.index != 'China','2\/22\/20':].sum()\n    else:\n        y_data = dfp.loc[country,'2\/22\/20':]\n        \n    y_data  = y_data[y_data > 0]\n    x_data = np.arange(len(y_data)) + 1\n    \n    time = pd.to_datetime(y_data.index)\n    time_extra = pd.date_range(time[0], time[-1] + timedelta(days = 90))\n\n    popt, pcov = curve_fit(gompertz,x_data, y_data, bounds = (\n        [0, 1e2, 0.001], [y_data[0] * 2, 1e9 , 1] ))\n\n    print(popt)\n    if not fig:\n        fig = plt.figure(dpi = 144, figsize = (8, 8))\n    p1 = plt.subplot(311)\n    plt.scatter(time, y_data, label = f'{name} {country}')\n    plt.scatter(time, gompertz(x_data , *popt), s = 5, label = f'Model fit {name} {country}')\n    plt.ylabel('Total #')\n    plt.title(f'Gompertz model fit')\n    plt.legend(bbox_to_anchor = (1,1))\n\n\n    plt.subplot(312, sharex=p1)\n    plt.plot(time, gompertz(np.arange(len(time)), *popt), label = f'{name} {country}', linewidth='2')\n    plt.scatter(time_extra, gompertz(np.arange(len(time_extra)), *popt), label = '_nolabel',  s = 1)\n    plt.ylabel('Total')\n    plt.title('Extrapolation of Model')\n    plt.legend(bbox_to_anchor = (1,1))\n\n    plt.subplot(313, sharex=p1)\n    plt.plot(time, np.diff(gompertz(np.arange(len(time) + 1) , *popt)),label = f'{name} {country}' , linewidth='2')\n    plt.scatter(time_extra, np.diff(gompertz(np.arange(len(time_extra) + 1) , *popt)), label = f'_nolabel', s = 1)\n    \n    p_max = np.max(np.diff(gompertz(np.arange(len(time_extra) + 1) , *popt)))\n    plt.plot([date.today(),date.today()], [0, p_max], color='red')\n    plt.ylabel('Daily increase in #')\n    plt.title('Extrapolation of Model - Daily increase')\n    plt.tight_layout()\n    plt.legend(bbox_to_anchor = (1,1))\n    \n    return(fig)","8e96e4f4":"f = plotGompertz()","0a63ba2c":"f = plotGompertz('Italy', deceased = False)\nf = plotGompertz('Spain', f, deceased = False)\nf = plotGompertz('Germany', f, deceased = False)\nf = plotGompertz('France', f, deceased = False)","f9f3f11c":"f = plotGompertz('Italy', deceased = True)\nf = plotGompertz('Spain', f, deceased = True)\nf = plotGompertz('Germany', f, deceased = True)\nf = plotGompertz('France', f, deceased = True)","7d1ad5d0":"f = plotGompertz('Italy',  deceased = False)\nf = plotGompertz('Spain', f, deceased = False)\nf = plotGompertz('US', f, deceased = False)","cd6ac06c":"# Exponential decay of growth rate\ndef mu_with_decay(t, \u00b50, lam, b):\n    \u00b5 = \u00b50  * (np.exp(lam * t) + b)\n    return(\u00b5)","2f49df57":"from scipy.integrate import odeint\n\ndef SIR(y, t, \u00b5_params):\n    # Extract data from vector\n    S, I, R = y \n    \n    # From Growth rate decay model\n    \u00b50, lam, b = \u00b5_params\n    \u00b5 = \u00b50  * (np.exp(lam * t) + b)\n    \n    ### CONSTANTS ###\n    #c = 0.26 # Growth constant\n    #p = 0.37 # Policy factor, to take into account things lice social distancing, shutdowns etc. (range=(0,1))\n    omega = 1 \/ 30 # Recovery rate\n    N = S + I + R # Total Population size\n    \n    ### ODE system ###\n    dSdt = - \u00b5 * S \/ N * I \n    dIdt =   \u00b5 * S \/ N * I - omega * I\n    dRdt = omega * I\n    \n    return([dSdt, dIdt, dRdt])","f574867e":"# First,  getting growth rate parameters\n\nfor country in ['China','US','Austria','Denmark','Germany']:\n    y_data = growth_rates.loc[country].dropna().values[:]\n    x_data = np.arange(len(y_data))\n\n    popt, pcov = curve_fit(mu_with_decay, x_data, y_data, bounds = ([0.1, -1, 0],[1, 0, 1])) \n\n    plt.plot(x_data,mu_with_decay(x_data, *popt), label = country)\n    plt.scatter(x_data, y_data)\n\n    y_test = confirmed[confirmed['Country\/Region'] == country].values[0][-len(x_data):]\n\n    mu_params = popt\n    timesteps = len(x_data)\n    I0 = y_test[0]\n\n    print(country,':')\n    print('-----------')\n    print('\u00b50:',round(popt[0], 3))\n    print('lam:',round(popt[1], 3))\n    print('b:',round(popt[2], 3))\n    print('timesteps:', len(x_data))\n    print('I0:', I0)\n    print()\n    \nl = plt.legend()\nl = plt.ylabel('Exponential Growth Rate (\u00b5)')","8fa6e7e3":"#I0 = 15000\ny0= [80e6, I0, 0]\nt = np.arange(timesteps)\n\nres = odeint(SIR, y0, t, args = (mu_params,))\nextrap = odeint(SIR, y0, np.arange(100), args = (mu_params,))\n\n\nplt.plot([a[1] for a in extrap], label = 'Infected extrapolated', linestyle=':')\nplt.plot([a[1] for a in res], label = 'Infected')\n#plt.plot([a[0] for a in res], label = 'Susceptible')\nplt.plot([a[2] for a in extrap] , label = 'Removed')\n\ny_test_deaths = deaths[deaths['Country\/Region'] == country].values[0][-len(x_data):]\n#plt.plot( y_test_deaths, label = 'Reported')\n\nl = plt.legend()\n#plt.plot(np.diff([y0[0] - a[0] for a in res]))","b3ef5ff2":"plt.figure(dpi = 144)\nfor country, color in zip(['Sweden', 'Norway', 'Finland', 'Denmark'],\n                          ['blue', 'orange', 'red', 'green']):\n    plt.plot( growth_rates.loc[country,:], linestyle='--', \n             color = color, label = f'\u00b5_infected {country}')\n    plt.plot(growth_rates_death.loc[country,:], \n             color = color, label = f'\u00b5_deceased {country}')\n\nl = plt.xticks(fontSize = 10, rotation = 60)\nl = plt.ylabel('Exponetnial Growth Rate (\u00b5), 7 day sliding window')\nl = plt.title('Slowing of reported cases in Skandinavia')\nl = plt.legend(bbox_to_anchor = (1,1))","cdb1146c":"## SIR Model <a class=\"anchor\" id=\"sir\"><\/a>\nhttps:\/\/de.wikipedia.org\/wiki\/SIR-Modell\n\n-- Still needs work --\n","473b7b17":"## Geography <a class=\"anchor\" id=\"geography\"><\/a>\nUsing the geocordinates from the input data to overlay growth rates and cases numbers on matplotlib global basemap.\nStill some work needed. Some country coordinates seem not to be accurate.","2f93b751":"#### Current situation\nLooking back one week to see how the current situation is in terms of growth rates. \nIf the growth rate is roughly below 0.05 (doubling time  >= 14 days), the virus should be on its way to extinction as people are not infected faster than they are cured.","18a49b5a":"#### Listing the most recent doubling times of cases and deaths per country\n","e30af429":"#### Growth rate of deceased\nThe same as above, now looking at deceased numbers.\nWe use 10 reported deaths as the minimum starting value and a number of 100 reported deaths as the minimum to include countries in the analysis.","dda378c0":"Using the parameters for Germany to generate SIR model predictions","7a726013":"#### Growth Rate of confirmed cases\nTo remove noise from low numbers, we focus on countries with more than 5000 confirmed cases.\nTo get an estimate of the inital growth (spreading) rate of the virus, before any government regulations and\/ or social distancing effects kick in, we focus on the first 7 days after reaching 100 confirmed cases.","237ac116":"To accomodate for slowing growth rates, we first fit an exponential decay function to the growth rates over time.\nWe get the initial or maximum growth rate **\u00b50**, the decay coefficient **lam** and the residual growth rate **b** (if growth is not slowed to zero) ","a2bda8a4":"### USA\nAdding in Spain and Italy for comparrison","50c1f2c4":"## Growth Rate Analysis <a class=\"anchor\" id=\"growth_rate\"><\/a>\nLiving entities grow at an exponential rate, if nothing limits growth. For viral outbreaks, epecially the early days, before any government measurements are taken provide good data for the maximum exponential growth rate \u00b5. \n\nIt can be calculated by fitting a linear regression to the natural logarithm of confirmed cases versus days and reading of the slope value. \nWe will use a cutoff point of 100 confirmed cases as the starting point. Lower numbers are inherently noisy, due to statistical effects of low numbers.\n\nThe Exponential growth function is described as follows:\n\nNt = N0 * exp(\u00b5 * t)\n\nTherefore \n\nln(Nt) = ln(N0) + \u00b5 * t\n\nThe doubling time in days (tD) can be calculated as follows:\n\ntD = ln(2) \/ \u00b5","7d24ec12":"#### Country wise comparison of growth rates of confirmed cases vs deaths\nComparing growth rates of confirmed cases to growth rates of deaths. The average lag period should be informative about progression of the disease. \nHere, data on the type and date of interventions taken by individual countries could be used to see effectiveness of intervention.","b9c611e2":"## Growth Rates per Day per Country <a class=\"anchor\" id=\"growth_rate_daily\"><\/a>\nFor a continuous development of the growth rate we can apply a sliding window of 7 days to fit an exponential function and retrieve the growth rate.","eb12324f":"# COVID-19 Population Dynamics\n\nSome open ended thoughts on Covid-19 growth rates and ways to model propagation and spread.\n\n### Table of Contents\n* [Growth Rate Analysis](#growth_rate)\n* [Growth Rate over Time](#growth_rate_daily)\n* [Geography](#geography)\n* [Gompertz Model](#gompertz)\n* [SIR Model](#sir)","5458fb2a":"Same as above, but for reported deaths. Only countries, which already show a slowing in their increase of deaths can be modeled.","ce634305":"Using the Gompertz model to estimate progression of reported cases.\nNote that the model is merely a fit to observations, asuming a resource limited growth behaviour. Predictions are based on the current dynamics of the reported cases dynamics. This is taking into acocunt the rate of slowing of the viral growth rate. In explicit, if countries were to introduce more drastic measurements to slow viral spreading, this might considerably lower total numbers. In turn, if countries relax their policies on social distancing et. cetera this could lead to a new increase in viral spreading rates.","12753ebc":"#### Just out of curiosity...","747031ad":"Here we can see that countries like China and Austria, that show a fast response in controlling the confirmed cases growth rates have a large negative lambda value (exponential decay rate). Denmark has  a very high value of lambda, however the values do not decay towards zero, reflected in a non zero b value. \nGermany and the US have somewhat smaller negative lambda values, reflecting a slower decay of the confirmed cases growth rates. \n\n--> It would be interesting to correlate countries political actions\/incentives with speed of growth rate decay ","92bdbe05":"## Gompertz Growth model <a class=\"anchor\" id=\"gompertz\"><\/a>\nhttps:\/\/en.wikipedia.org\/wiki\/Gompertz_function\n![https:\/\/wikimedia.org\/api\/rest_v1\/media\/math\/render\/svg\/722b5070a2cae597925f44cc6a776bb5ef1f5c1b](https:\/\/wikimedia.org\/api\/rest_v1\/media\/math\/render\/svg\/722b5070a2cae597925f44cc6a776bb5ef1f5c1b)\n\nTypically a model developed for microbial growth under resource limitation. Has probably little to no predictive power in this context, but can be used as a descriptive model for data smoothing."}}