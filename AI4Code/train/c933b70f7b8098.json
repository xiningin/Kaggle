{"cell_type":{"a10f4fbd":"code","60e5d4ea":"code","e1cb6815":"code","8bdd981c":"code","ba16aca5":"code","db1752dc":"code","270d4df7":"code","bd0130bc":"code","df1d3372":"code","e57f40ee":"code","6952a485":"code","233d8eae":"code","a9b51d3c":"code","69fe4b5f":"code","ca6b192c":"code","8f9cd837":"code","1717a86a":"code","b45d3f35":"code","a77b4ebb":"code","dfa7e427":"code","43652f8f":"code","d2177dc3":"code","b5022c8c":"code","1543705b":"code","f75226ac":"code","312cf192":"code","6df59761":"code","19c8a450":"code","21a802ab":"code","253020b3":"code","0825f6e7":"code","efb8e2a2":"code","d144e0e9":"code","42db1821":"code","b5e3fc28":"code","d74fe081":"code","ae7d8d59":"code","dca51b46":"code","3461d345":"code","3951739b":"code","c7b3b032":"code","daf85825":"code","5f1d7329":"code","142e12bc":"code","e7e06f1e":"code","8cfb2e5a":"code","2b22646f":"code","5a442b0a":"code","98743ffe":"code","972b1090":"code","8befa4c4":"code","b0a815cb":"code","364756be":"code","dc737053":"code","92918491":"code","66e2bea6":"code","67122f9e":"code","c8653ef7":"code","86d5f70d":"code","f20c395b":"code","8c905ecc":"markdown","7bcb97b5":"markdown","abefe310":"markdown","cb9f8146":"markdown","1589b248":"markdown","f8285e6b":"markdown","af8477b6":"markdown","ac6455f2":"markdown","7cd19a8d":"markdown","b03155b6":"markdown","acba661a":"markdown","def6a2bc":"markdown","6dd26a16":"markdown","30a64b72":"markdown","dabfcce9":"markdown","5e8868c7":"markdown","1a969e05":"markdown","ca7939ae":"markdown","e0c276fe":"markdown","b2ff34ea":"markdown","0f91f3a1":"markdown","02d492a1":"markdown","2ea47992":"markdown","b14c35e8":"markdown","f347d64b":"markdown","048cc07c":"markdown","a32f424a":"markdown","b489c2cb":"markdown","40a4fc1f":"markdown","0dfb6ec9":"markdown"},"source":{"a10f4fbd":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport re\nfrom datetime import datetime\nfrom matplotlib.dates import date2num\nimport warnings\nwarnings.filterwarnings('ignore')","60e5d4ea":"districts_data = pd.read_csv(\"..\/input\/learnplatform-covid19-impact-on-digital-learning\/districts_info.csv\")\nproducts_data = pd.read_csv(\"..\/input\/learnplatform-covid19-impact-on-digital-learning\/products_info.csv\",\n                           usecols=[\"LP ID\", \"Product Name\", \"Sector(s)\", \"Primary Essential Function\"])","e1cb6815":"districts_data.head()","8bdd981c":"# find primary function from `Primary Essential Function`\nproducts_data['primary_function_main'] = products_data['Primary Essential Function'].apply(lambda x: x.split(' - ')[0] if x == x else x)","ba16aca5":"products_data.head()","db1752dc":"PATH = '..\/input\/learnplatform-covid19-impact-on-digital-learning\/engagement_data' \n\ntemp = []\n\nfor district in districts_data.district_id.unique():\n    df = pd.read_csv(f'{PATH}\/{district}.csv', index_col=None, header=0)\n    df[\"district_id\"] = district\n    temp.append(df)\n    \n    \nengagement = pd.concat(temp)\nengagement = engagement.reset_index(drop=True)\n\nengagement.head()","270d4df7":"engagement = pd.merge(engagement, products_data, left_on=\"lp_id\", right_on=\"LP ID\", how=\"left\")\n\nengagement.drop(['LP ID', \"lp_id\"], inplace=True, axis=1)\n\n# convert 'time' column to data type datetime\nengagement['time'] = pd.to_datetime(engagement['time'])\n# create column for Month names\nengagement['month'] = engagement['time'].dt.month_name()\n\nengagement.head()","bd0130bc":"del products_data","df1d3372":"engagement = pd.merge(engagement, districts_data, on=\"district_id\", how=\"left\")\n\nengagement.head()","e57f40ee":"# Standardize 'engagement_index' and 'pct_access' using Min Max\n# apply normalization techniques\nfor column in ['pct_access', 'engagement_index']:\n    engagement[column+'_norm'] = (engagement[column] - engagement[column].min()) \/ (engagement[column].max() - engagement[column].min())\n\n# adding a column\nengagement['prdt_use'] = engagement['pct_access'] * engagement['engagement_index']\n\nengagement.head()","6952a485":"covid_statewise = pd.read_csv(\"..\/input\/usastatewisecovid19-cases\/all-states-history.csv\", \n                              usecols=[\"date\", \"state\", 'positiveIncrease'])\n\ncovid_statewise.head()","233d8eae":"state_map_dict = {'AL': 'Alabama',\n 'AK': 'Alaska',\n 'AS': 'American Samoa',\n 'AZ': 'Arizona',\n 'AR': 'Arkansas',\n 'CA': 'California',\n 'CO': 'Colorado',\n 'CT': 'Connecticut',\n 'DE': 'Delaware',\n 'DC': 'District of Columbia',\n 'D.C.': 'District of Columbia',\n 'FM': 'Federated States of Micronesia',\n 'FL': 'Florida',\n 'GA': 'Georgia',\n 'GU': 'Guam',\n 'HI': 'Hawaii',\n 'ID': 'Idaho',\n 'IL': 'Illinois',\n 'IN': 'Indiana',\n 'IA': 'Iowa',\n 'KS': 'Kansas',\n 'KY': 'Kentucky',\n 'LA': 'Louisiana',\n 'ME': 'Maine',\n 'MH': 'Marshall Islands',\n 'MD': 'Maryland',\n 'MA': 'Massachusetts',\n 'MI': 'Michigan',\n 'MN': 'Minnesota',\n 'MS': 'Mississippi',\n 'MO': 'Missouri',\n 'MT': 'Montana',\n 'NE': 'Nebraska',\n 'NV': 'Nevada',\n 'NH': 'New Hampshire',\n 'NJ': 'New Jersey',\n 'NM': 'New Mexico',\n 'NY': 'New York',\n 'NC': 'North Carolina',\n 'ND': 'North Dakota',\n 'MP': 'Northern Mariana Islands',\n 'OH': 'Ohio',\n 'OK': 'Oklahoma',\n 'OR': 'Oregon',\n 'PW': 'Palau',\n 'PA': 'Pennsylvania',\n 'PR': 'Puerto Rico',\n 'RI': 'Rhode Island',\n 'SC': 'South Carolina',\n 'SD': 'South Dakota',\n 'TN': 'Tennessee',\n 'TX': 'Texas',\n 'UT': 'Utah',\n 'VT': 'Vermont',\n 'VI': 'Virgin Islands',\n 'VA': 'Virginia',\n 'WA': 'Washington',\n 'WV': 'West Virginia',\n 'WI': 'Wisconsin',\n 'WY': 'Wyoming'}\n\n\ndef get_state_codes(x):\n    try:\n        return state_map_dict[x]\n    except:\n        return \"Others\"\n    \ncovid_statewise[\"state\"] = covid_statewise[\"state\"].apply(lambda x: get_state_codes(x))\n\n\n# convert 'time' column to data type datetime\ncovid_statewise['date'] = pd.to_datetime(covid_statewise['date'])\n# create column for Month names\ncovid_statewise['month'] = covid_statewise['date'].dt.month_name()\n\ncovid_statewise['year'] = covid_statewise['date'].dt.year\n\ncovid_statewise = covid_statewise.loc[covid_statewise['year'] == 2020]\ncovid_statewise.drop(labels=['year'], inplace=True, axis=1)\n\ncovid_statewise.head()","a9b51d3c":"posInc_monthlyMean = covid_statewise.groupby(['state','month']).agg({'positiveIncrease': 'mean'})\n\nposInc_monthlyMean = posInc_monthlyMean.reset_index()\n\nposInc_monthlyMean","69fe4b5f":"popu_statewise = pd.read_csv(\"..\/input\/2019-census-us-population-data-by-state\/2019_Census_US_Population_Data_By_State_Lat_Long.csv\", \n                              usecols=[\"STATE\", \"POPESTIMATE2019\"])\n\npopu_statewise.head()","ca6b192c":"def getPopuPercent(x):\n    #print(x['state'])\n    statePopulation = popu_statewise.loc[popu_statewise['STATE']==x['state'],'POPESTIMATE2019']\n    if len(statePopulation)>0:\n        statePopulation = statePopulation.values[0]\n    else:\n        return np.nan\n    #print(statePopulation)\n    positiveIncreasePercent = (x['positiveIncrease']\/statePopulation)*100\n    positiveIncreasePercent = np.round(positiveIncreasePercent, 3)\n    #print(positiveIncreasePercent)\n    return positiveIncreasePercent\n    \nposInc_monthlyMean[\"positiveIncreasePercent\"] = posInc_monthlyMean.apply(getPopuPercent, axis=1)\n\n\n\n#posInc_monthlyMean.loc[posInc_monthlyMean['state']=='Virgin Islands']\n\nposInc_monthlyMean.head()","8f9cd837":"# States as column headers\nstateCovid = posInc_monthlyMean.pivot_table('positiveIncreasePercent', ['month'], 'state')\n\n# order months\nmonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\nstateCovid.reset_index(inplace=True)\nstateCovid['month'] = pd.Categorical(stateCovid['month'], categories=months, ordered=True)\nstateCovid.sort_values(by='month',inplace=True) \nstateCovid.set_index('month', inplace=True)\n\nstateCovid","1717a86a":"# Covid increase in all states\nfig,ax1 = plt.subplots(figsize=(20,16))\n\nsns.lineplot(data=stateCovid, markers=True, lw=2, ax=ax1)\n\ntitle = 'The monthly average COVID-19 increase rate in each state in the US'\n\nax1.set_xlabel('')\nax1.set_ylabel('Covid Increase % mean', size=14)\nplt.title(title, fontsize=16, weight='bold', color=\"gray\")\n\nax1.tick_params(labelsize=14, width=0.5, length=1.5)","b45d3f35":"national_covid = pd.read_csv(\"..\/input\/d\/sreeedevi\/us-covid-summary\/national-history.csv\", \n                              usecols=[\"date\", \"positiveIncrease\"])\n\nnational_covid.head()","a77b4ebb":"# convert 'time' column to data type datetime\nnational_covid['date'] = pd.to_datetime(national_covid['date'])\n# create column for Month names\nnational_covid['month'] = national_covid['date'].dt.month_name()\n\nnational_covid['year'] = national_covid['date'].dt.year\n\nnational_covid = national_covid.loc[national_covid['year'] == 2020]\nnational_covid.drop(labels=['year'], inplace=True, axis=1)\n\n\n# Min Max normalizing 'positiveIncrease'\ncolumn = 'positiveIncrease'\nnational_covid['positiveIncreaseNorm'] = (national_covid[column] - national_covid[column].min()) \/ (national_covid[column].max() - national_covid[column].min())    \n\nnational_covid.head()","dfa7e427":"state_policy = pd.read_csv(\"..\/input\/covid19-us-state-policy-database\/data.csv\", \n                          usecols=[\"STATE\", \"STEMERG\", \"STEMERGEND\", \"STEMERG2\", \"STAYHOME\", \"STAYHOMENOGP\", \"END_STHM\"])\n\nstate_policy.head()","43652f8f":"overall = engagement.groupby(['month']).agg({'pct_access': 'mean','engagement_index': 'mean'})\n\n# order months\nmonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\noverall.reset_index(inplace=True)\noverall['month'] = pd.Categorical(overall['month'], categories=months, ordered=True)\noverall.sort_values(by='month',inplace=True) \noverall.set_index('month', inplace=True)\n\noverall","d2177dc3":"#plt.rcParams['figure.dpi'] = 600\nfig = plt.figure(figsize=(20, 16), facecolor='#f6f5f5')\ngs = fig.add_gridspec(5,1)\ngs.update(wspace=0.3, hspace=0.4)\n\nbackground_color = \"#f6f5f5\" # same as fig facecolor\nsns.set_palette(['#ffd514'])\n\ntitle = 'Overall student engagement trend'\nplt.suptitle(title, fontsize=20, weight='bold')\n\nax1 = fig.add_subplot(gs[0, 0])\n\nax2 = ax1.twinx()\nsns.lineplot(data=overall.loc[:,'pct_access'], \n             markers=True, lw=2, ax=ax1, color='y', marker='o', zorder=2, label = 'pct_access',legend=0)\nsns.lineplot(data=overall.loc[:,'engagement_index'], \n             markers=True, lw=2, ax=ax2, color=\"green\", marker='o', zorder=2, label = 'engagement_index',legend=0)\n\n\n\nax1.set_xlabel('')\nax1.set_ylabel('pct_access', color='gray', size=14)\nax2.set_ylabel('engagement_index', color=\"gray\", size=14)\nplt.title('', fontsize=16, weight='bold', color=\"gray\")\n\nax1.tick_params(labelsize=14, width=0.5, length=1.5)\nax2.tick_params(labelsize=14, width=0.5, length=1.5)\n\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\nax1.set_xticklabels(months, rotation=90);\n","b5022c8c":"def findPopularPrdtsInSector(df_engagement, sector):\n\n    mostUsedProduct = df_engagement.groupby(['month','district_id', \"Sector(s)\", \"Product Name\"]).agg({'pct_access': 'mean', 'prdt_use':'mean'})\n\n    mostUsedProduct.reset_index(inplace=True)\n\n    all_months = mostUsedProduct['month'].unique()\n    #print(all_months)\n\n    all_districts = mostUsedProduct['district_id'].unique()\n    #print(all_districts.shape)\n\n    all_sectors = mostUsedProduct[\"Sector(s)\"].unique()\n#     print(all_sectors)\n\n    mostUsedProduct_sec = mostUsedProduct.loc[mostUsedProduct[\"Sector(s)\"]==sector]\n\n    mostUsedProduct_sec.reset_index(inplace=True, drop=True)\n\n    # max pct_access product\n\n    idx = mostUsedProduct_sec.groupby(['month','district_id'])['pct_access'].transform(max) == mostUsedProduct_sec['pct_access']\n    popular = mostUsedProduct_sec[idx]\n\n    popular.drop(['Sector(s)', 'prdt_use'], axis=1, inplace=True)\n\n\n    \n\n    # # max pct_access and engagement_index product\n    # idx = mostUsedProduct_sec.groupby(['month','district_id'])['prdt_use'].transform(max) == mostUsedProduct_sec['prdt_use']\n    # most_used = mostUsedProduct_sec[idx]\n    # most_used\n    \n    return popular\n","1543705b":"popular = findPopularPrdtsInSector(engagement, \"PreK-12\")\n\npopular","f75226ac":"def findPopularPrdtsInState(df_popular, state):\n    \n    # merge with district info dataset to get the state names\n    popular_merged = pd.merge(df_popular, districts_data, on=\"district_id\", how=\"left\")\n    popular_merged['district_id'] = popular_merged['district_id'].apply(lambda x: str(x))\n\n    #popular_merged\n    #stateslist = popular_merged['state'].unique()\n    \n    popular_state = popular_merged.loc[popular_merged['state']==state]\n    \n    return popular_state","312cf192":"popular_state = findPopularPrdtsInState(popular, 'Illinois')\n\npopular_state.head()","6df59761":"# Plot function\n\ndef plotDistCategories(popular_state,states):\n    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n\n    #plt.rcParams['figure.dpi'] = 600\n    fig = plt.figure(figsize=(24, 20), facecolor='#f6f5f5')\n    rows, cols = 3, 4\n    gs = fig.add_gridspec(rows,cols)\n    gs.update(wspace=0.3, hspace=0.4)\n\n    title = 'Popular products - ' + states\n    plt.suptitle(title, fontsize=14, weight='bold')\n\n    k = 0\n\n    for r in range(rows):\n        for c in range(cols):\n            ax1 = fig.add_subplot(gs[r, c])\n\n            eachMonth = months[k]\n            k = k + 1\n\n            popular_temp = popular_state.loc[popular_state['month']==eachMonth]\n            popular_temp.reset_index(inplace=True, drop=True)\n            ax1.barh(popular_temp['district_id'], popular_temp['pct_access'])\n\n            ax1.set_xlabel('pct_access',  color='gray', size=14)\n            plt.title(eachMonth, fontsize=16, weight='bold', color=\"gray\")\n\n            for e, p in enumerate(ax1.patches):\n                x = p.get_x() + p.get_width() + 1\n                y = p.get_y() + p.get_height() \/ 2 \n                ax1.text(x, y, popular_temp.loc[e,\"Product Name\"], ha='center', va='center', fontsize=10)\n\n    plt.show()","19c8a450":"plotDistCategories(popular_state, 'Illinois')","21a802ab":"##### # districts as column headers\npopular_prdt = popular.pivot_table(\"Product Name\", ['month'], 'district_id', aggfunc=lambda x: x)\n# order months\nmonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\npopular_prdt.reset_index(inplace=True)\npopular_prdt['month'] = pd.Categorical(popular_prdt['month'], categories=months, ordered=True)\npopular_prdt.sort_values(by='month',inplace=True) \npopular_prdt.set_index('month', inplace=True)\n\npopular_prdt = popular_prdt.T\n\npopular_prdt\n\n\n# districts as column headers\npopular_pct = popular.pivot_table('pct_access', ['month'], 'district_id')\n# order months\nmonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\npopular_pct.reset_index(inplace=True)\npopular_pct['month'] = pd.Categorical(popular_pct['month'], categories=months, ordered=True)\npopular_pct.sort_values(by='month',inplace=True) \npopular_pct.set_index('month', inplace=True)\n\npopular_pct = popular_pct.T\n\npopular_pct\n\nstatewise_distlist = districts_data.groupby('state').agg(lambda x:list(x))['district_id']\ndistInEachState = statewise_distlist['Illinois']\n\nmonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\ndf = pd.DataFrame(index=months)\n\nfor i in distInEachState:\n    df['prdt_'+str(i)] = popular_prdt.loc[i]\n    df['pct_'+str(i)] = popular_pct.loc[i]\n\ndf","253020b3":"# Plot function\n\n# prdtToPlot = popular_prdt.loc[1000]\n# pctToPlot = popular_pct.loc[1000]\n# color = 'y'\n\n# prdtToPlot_1 = popular_prdt.loc[1039]\n# pctToPlot_1 = popular_pct.loc[1039]\n# color_1 = 'g'\n\n#def plotDistricts(prdtToPlot, pctToPlot, color='gray'):\n\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\n#plt.rcParams['figure.dpi'] = 600\nfig = plt.figure(figsize=(20, 10), facecolor='#f6f5f5')\ngs = fig.add_gridspec(1,1)\ngs.update(wspace=0.3, hspace=0.4)\n\nbackground_color = \"#f6f5f5\" # same as fig facecolor\nsns.set_palette(['#ffd514'])\n\ntitle = 'Popular products (Statewise)'\nplt.suptitle(title, fontsize=20, weight='bold')\n\nax1 = fig.add_subplot(gs[0, 0])\n\nn = len(distInEachState)\ncolors = plt.cm.jet(np.linspace(0,1,n))\n\nfor i in range(len(distInEachState)):\n    ax1.plot(months, df.loc[:,'pct_'+str(distInEachState[i])], \n             color=colors[i], lw=2, marker='o', label = str(distInEachState[i]))\n\nax1.legend(loc=1)\nax1.set_xlabel('')\nax1.set_ylabel('pct_access', color='gray', size=14)\nplt.title('', fontsize=16, weight='bold', color=\"gray\")\nax1.tick_params(labelsize=14, width=0.5, length=1.5)\nax1.set_xticklabels(months, rotation=90);\n\n# for x,y,prdt in zip(months,pctToPlot,prdtToPlot):\n#     ax1.annotate(prdt, xy=(x,y), textcoords='data', color=color, fontweight='bold', fontsize=12)\n","0825f6e7":"def findHighLowDistID(popular_state, verbose=1):\n    mean_pct_statewise = popular_state.groupby('district_id').agg({'pct_access':'mean'})\n\n    mean_pct_statewise\n\n    if mean_pct_statewise.shape[0] > 1:\n        idx = mean_pct_statewise.idxmin()\n        lowest_district_id = idx[0]\n        lowest_pct = mean_pct_statewise.loc[lowest_district_id][0]\n\n        idx = mean_pct_statewise.idxmax()\n        highest_district_id = idx[0]\n        highest_pct = mean_pct_statewise.loc[highest_district_id][0]\n    else:\n        return []\n\n    mean_pct = mean_pct_statewise['pct_access'].mean()\n\n    if verbose:\n        print(\"District ID with Highest Pct:%s (pct = %.3f)\" %(highest_district_id,highest_pct) )\n        print(\"District ID with Lowest Pct:%s (pct = %.3f)\" %(lowest_district_id,lowest_pct) )\n        print(\"Mean pct fot the state = %.3f\" %mean_pct)\n\n    return [(lowest_district_id, lowest_pct), (highest_district_id, highest_pct), mean_pct]\n","efb8e2a2":"popular = findPopularPrdtsInSector(engagement, \"PreK-12\")\n\npopular_state = findPopularPrdtsInState(popular, 'Illinois')\n\npopular_state","d144e0e9":"outList = findHighLowDistID(popular_state)\n\n(lowest_district_id, lowest_pct) = outList[0]\n(highest_district_id, highest_pct) = outList[1]\nmean_pct = outList[2]","42db1821":"def getHighLowPctInSector(engagement, sector):\n\n    stateslist = engagement['state'].unique()\n\n    popular = findPopularPrdtsInSector(engagement, sector)\n\n    lowhigh_pct_dists = pd.DataFrame(columns=['state', 'sector', 'val_prop', 'pct_dist', 'pct'])\n    e = 0\n    for st in stateslist:\n\n        popular_state = findPopularPrdtsInState(popular, st)\n\n        outList = findHighLowDistID(popular_state, verbose=0)\n\n        if len(outList) > 0:\n\n            (lowest_district_id, lowest_pct) = outList[0]\n            (highest_district_id, highest_pct) = outList[1]\n            mean_pct = outList[2]\n\n            lowhigh_pct_dists.loc[e, 'state'] = st \n            lowhigh_pct_dists.loc[e, 'sector'] = \"PreK-12\" \n            lowhigh_pct_dists.loc[e, 'val_prop'] = \"Low\" \n            lowhigh_pct_dists.loc[e, 'pct_dist'] = lowest_district_id \n            lowhigh_pct_dists.loc[e, 'pct'] = lowest_pct\n\n            e = e + 1\n\n            lowhigh_pct_dists.loc[e, 'state'] = st \n            lowhigh_pct_dists.loc[e, 'sector'] = \"PreK-12\" \n            lowhigh_pct_dists.loc[e, 'val_prop'] = \"High\" \n            lowhigh_pct_dists.loc[e, 'pct_dist'] = highest_district_id \n            lowhigh_pct_dists.loc[e, 'pct'] = highest_pct\n\n            e = e + 1\n\n            lowhigh_pct_dists.loc[e, 'state'] = st \n            lowhigh_pct_dists.loc[e, 'sector'] = \"PreK-12\" \n            lowhigh_pct_dists.loc[e, 'val_prop'] = \"Mean\" \n            lowhigh_pct_dists.loc[e, 'pct'] = mean_pct\n\n            e = e + 1\n\n\n    return lowhigh_pct_dists","b5e3fc28":"def getAnanlysis(lowhigh_pct_dists):\n    # Analysis to get the distribution of racial, economic, geographical factors in high and low pct districts\n\n    lowhigh_pct_dists_1 = lowhigh_pct_dists.loc[lowhigh_pct_dists['val_prop']!=\"Mean\"]\n    lowhigh_pct_dists_1['pct_dist'] = lowhigh_pct_dists_1['pct_dist'].astype(int)\n    # print(lowhigh_pct_dists_1.shape)\n    lowhigh_pct_dists_1 = pd.merge(lowhigh_pct_dists_1, districts_data, right_on='district_id', left_on=\"pct_dist\", how=\"left\")\n\n    low_temp = lowhigh_pct_dists_1.loc[lowhigh_pct_dists_1['val_prop']==\"Low\"]\n    high_temp = lowhigh_pct_dists_1.loc[lowhigh_pct_dists_1['val_prop']==\"High\"]\n\n    def countVal(low_temp, high_temp, categories):\n        low_valcount = pd.DataFrame(low_temp[categories].value_counts())\n        low_valcount['type'] = \"Low\"\n        low_valcount\n\n        high_valcount = pd.DataFrame(high_temp[categories].value_counts())\n        high_valcount['type'] = \"High\"\n        high_valcount\n\n        return (low_valcount,high_valcount)\n\n    low_valcount,high_valcount = countVal(low_temp, high_temp, 'locale')\n    locale_count = pd.concat([low_valcount, high_valcount])\n    locale_count.reset_index(inplace=True)\n\n    low_valcount,high_valcount = countVal(low_temp, high_temp, 'pct_black\/hispanic')\n    race_count = pd.concat([low_valcount, high_valcount])\n    race_count.reset_index(inplace=True)\n\n    low_valcount,high_valcount = countVal(low_temp, high_temp, 'pct_free\/reduced')\n    eco_count = pd.concat([low_valcount, high_valcount])\n    eco_count.reset_index(inplace=True)\n\n    low_valcount,high_valcount = countVal(low_temp, high_temp, 'county_connections_ratio')\n    conn_count = pd.concat([low_valcount, high_valcount])\n    conn_count.reset_index(inplace=True)\n\n    low_valcount,high_valcount = countVal(low_temp, high_temp, 'pp_total_raw')\n    pp_count = pd.concat([low_valcount, high_valcount])\n    pp_count.reset_index(inplace=True)\n    \n    return [locale_count, race_count, eco_count, conn_count, pp_count]","d74fe081":"def plotDistStateSector(lowhigh_pct_dists, locale_count, race_count, eco_count, conn_count, pp_count):\n    #plt.rcParams['figure.dpi'] = 600\n    fig = plt.figure(figsize=(20, 16), facecolor='#f6f5f5')\n\n    ax1 = plt.subplot2grid((3, 3), (0, 0), colspan=2, rowspan=2)\n    sns.barplot(data = lowhigh_pct_dists, x='state', y = 'pct', hue='val_prop', ax=ax1)\n\n    ax1.set_xlabel('pct_access',  color='gray', size=14)\n    plt.title('', fontsize=16, weight='bold', color=\"gray\")\n    labels = ax1.get_xticklabels()\n    ax1.set_xticklabels(labels, rotation=90);\n    \n    \n\n    ax1 = plt.subplot2grid((3, 3), (0, 2))\n    plt.subplots_adjust(hspace=1)\n    sns.barplot(data = locale_count, x='index', y = 'locale', hue='type', ax=ax1)\n\n    ax1 = plt.subplot2grid((3, 3), (1, 2))\n    sns.barplot(data = race_count, x='index', y = 'pct_black\/hispanic', hue='type', ax=ax1)\n\n    ax1 =  plt.subplot2grid((3, 3), (2, 2))\n    sns.barplot(data = eco_count, x='index', y = 'pct_free\/reduced', hue='type', ax=ax1)\n\n    ax1 = plt.subplot2grid((3, 3), (2, 1))\n    sns.barplot(data = conn_count, x='index', y = 'county_connections_ratio', hue='type', ax=ax1)\n\n    ax1 = plt.subplot2grid((3, 3), (2, 0))\n    sns.barplot(data = pp_count, x='index', y = 'pp_total_raw', hue='type', ax=ax1)\n\n    ax1.set_xlabel('pct_access',  color='gray', size=14)\n    plt.title('', fontsize=16, weight='bold', color=\"gray\")\n    labels = ax1.get_xticklabels()\n    ax1.set_xticklabels(labels, rotation=90);","ae7d8d59":"sectorlist = engagement[\"Sector(s)\"].unique()\nsectorlist","dca51b46":"lowhigh_pct_dists = getHighLowPctInSector(engagement, \"PreK-12\")\n[locale_count, race_count, eco_count, conn_count, pp_count] = getAnanlysis(lowhigh_pct_dists)\n\nplotDistStateSector(lowhigh_pct_dists, locale_count, race_count, eco_count, conn_count, pp_count)","3461d345":"lowhigh_pct_dists = getHighLowPctInSector(engagement, \"PreK-12; Higher Ed\")\n[locale_count, race_count, eco_count, conn_count, pp_count] = getAnanlysis(lowhigh_pct_dists)\n\nplotDistStateSector(lowhigh_pct_dists, locale_count, race_count, eco_count, conn_count, pp_count)","3951739b":"lowhigh_pct_dists = getHighLowPctInSector(engagement, \"Higher Ed; Corporate\")\n[locale_count, race_count, eco_count, conn_count, pp_count] = getAnanlysis(lowhigh_pct_dists)\n\nplotDistStateSector(lowhigh_pct_dists, locale_count, race_count, eco_count, conn_count, pp_count)","c7b3b032":"lowhigh_pct_dists = getHighLowPctInSector(engagement, \"Corporate\")\n[locale_count, race_count, eco_count, conn_count, pp_count] = getAnanlysis(lowhigh_pct_dists)\n\nplotDistStateSector(lowhigh_pct_dists, locale_count, race_count, eco_count, conn_count, pp_count)","daf85825":"lowhigh_pct_dists = getHighLowPctInSector(engagement, \"PreK-12; Higher Ed; Corporate\")\n[locale_count, race_count, eco_count, conn_count, pp_count] = getAnanlysis(lowhigh_pct_dists)\n\nplotDistStateSector(lowhigh_pct_dists, locale_count, race_count, eco_count, conn_count, pp_count)","5f1d7329":"pct_access_MonthlyMean = engagement.groupby(['state','month']).agg({'pct_access': 'mean'})\n\npct_access_MonthlyMean = pct_access_MonthlyMean.reset_index()\n# States as column headers\npct_access_MonthlyMean = pct_access_MonthlyMean.pivot_table('pct_access', ['month'], 'state')\n# order months\nmonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\npct_access_MonthlyMean.reset_index(inplace=True)\npct_access_MonthlyMean['month'] = pd.Categorical(pct_access_MonthlyMean['month'], categories=months, ordered=True)\npct_access_MonthlyMean.sort_values(by='month',inplace=True) \npct_access_MonthlyMean.set_index('month', inplace=True)\n\n\npct_access_MonthlyMean","142e12bc":"# Find out if any states in the Online learnrning data missing in the covid data list\n\npctList = list(pct_access_MonthlyMean.columns)\n\ncovidList = list(stateCovid.columns)\n\nmain_list = list(set(pctList) - set(covidList))\n#print(main_list)\n# ['District Of Columbia']\n\n# Rename 'District of Columbia' as in online learning dataset\n\n#stateCovid.columns\n\nstateCovid.rename(columns = {'District of Columbia':'District Of Columbia'}, inplace = True)\n\n# States that are not in the online learning dataset to be removed from the covid state list also\n\npctList = list(pct_access_MonthlyMean.columns)\n\ncovidList = list(stateCovid.columns)\n\ndel_list = list(set(covidList) - set(pctList))\n\ndel_list\n\nstateCovid.drop(columns = del_list, inplace=True)\n\n# Merge online learning and covid data\npct_access_covid = pct_access_MonthlyMean.merge(stateCovid, on=\"month\", suffixes=(\"_pctAccess\", \"_popu\"))\n\n# pct_access_covid.columns","e7e06f1e":"statesList = list(pct_access_MonthlyMean.columns)\n\nrows, cols = 12, 2\n\n#plt.rcParams['figure.dpi'] = 600\nfig = plt.figure(figsize=(20, 60), facecolor='#f6f5f5')\ngs = fig.add_gridspec(rows,cols)\ngs.update(wspace=0.3, hspace=0.4)\n\n\nfig.tight_layout()\nfig.subplots_adjust(top=0.9)\n\nbackground_color = \"#f6f5f5\" # same as fig facecolor\nsns.set_palette(['#ffd514'])\n\ntitle = 'How Covid Increase Rate affected Online learning?'\nplt.suptitle(title, fontsize=20, weight='bold')\n\n#fig.text(0.5, 0.04, 'Months', ha='center')\nfig.text(0.04, 0.5, 'pct_access', va='center', rotation='vertical', fontsize=16)\n\nk = 0\nfor i in range(rows):\n    for j in range(cols):\n        if k<len(statesList):\n            statename = statesList[k]\n            specificStateData = pct_access_covid[pct_access_covid.columns[pd.Series(pct_access_covid.columns).str.startswith(statename)]]\n        else:\n            continue\n        \n        \n        ax1 = fig.add_subplot(gs[i, j])\n            \n            \n        ax2 = ax1.twinx()\n        \n        sns.lineplot(data=specificStateData.iloc[:,0], markers=True, lw=2, ax=ax1, marker='o', zorder=2, label = 'pct_access',legend=0)\n        sns.lineplot(data=specificStateData.iloc[:,1], markers=True, lw=2, ax=ax2, color=\"red\", marker='o', zorder=2, label = 'Covid increase rate',legend=0)\n        \n        k = k + 1\n        \n        title = statename\n\n        ax1.set_xlabel('')\n        ax1.set_ylabel('', color='b', size=14)\n        ax2.set_ylabel('', color='r', size=14)\n        plt.title(title, fontsize=16, weight='bold', color=\"gray\")\n\n        ax1.tick_params(labelsize=14, width=0.5, length=1.5)\n        ax2.tick_params(labelsize=14, width=0.5, length=1.5)\n        \n        months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n        ax1.set_xticklabels(months, rotation=90)\n        \nhandles, labels = [(a + b) for a, b in zip(ax1.get_legend_handles_labels(), ax2.get_legend_handles_labels())]\nfig.legend(handles, labels, loc='upper center')","8cfb2e5a":"national_covid.head()","2b22646f":"national_covid_mean = national_covid.groupby(['month']).agg({'positiveIncreaseNorm': 'mean'})\nnational_covid_mean","5a442b0a":"main_learning_technologies = engagement.groupby(['primary_function_main','month']).agg({'pct_access_norm': 'mean','engagement_index_norm': 'mean'})\n\nmain_learning_technologies.reset_index(inplace=True)\n\n# States as column headers\nmain_learning_technologies = main_learning_technologies.pivot_table(['pct_access_norm','engagement_index_norm'], ['month'], 'primary_function_main')\n\n# join different levels of columns by '_'\nmain_learning_technologies.columns = main_learning_technologies.columns.map('_'.join)\n\n# order months\nmonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\nmain_learning_technologies.reset_index(inplace=True)\nmain_learning_technologies['month'] = pd.Categorical(main_learning_technologies['month'], categories=months, ordered=True)\nmain_learning_technologies.sort_values(by='month',inplace=True) \nmain_learning_technologies.set_index('month', inplace=True)\n\nmain_learning_technologies","98743ffe":"\n#plt.rcParams['figure.dpi'] = 600\nfig = plt.figure(figsize=(20, 26), facecolor='#f6f5f5')\ngs = fig.add_gridspec(5,1)\ngs.update(wspace=0.3, hspace=0.4)\n\nbackground_color = \"#f6f5f5\" # same as fig facecolor\nsns.set_palette(['#ffd514'])\n\ntitle = 'How National Covid Increase Rate affected different Online learning technologies?'\nplt.suptitle(title, fontsize=20, weight='bold')\n\n# Graph 1 - Pandemic progression\nax1 = fig.add_subplot(gs[0, 0])\n\nsns.lineplot(data=national_covid_mean.loc[:,'positiveIncreaseNorm'], \n             markers=True, lw=2, ax=ax1, color=\"red\", marker='o', zorder=2, label = 'Covid increase rate',legend=0)\n\nax1.set_xlabel('')\nax1.set_ylabel('positiveIncreaseRate', color='gray', size=14)\nplt.title('Pandemic Progression', fontsize=16, weight='bold', color=\"gray\")\n\nax1.tick_params(labelsize=14, width=0.5, length=1.5)\nax2.tick_params(labelsize=14, width=0.5, length=1.5)\n\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\nax1.set_xticklabels(months, rotation=90)\n\n# Graph 2 - CM\nax1 = fig.add_subplot(gs[1, 0])\n\nax2 = ax1.twinx()\nsns.lineplot(data=main_learning_technologies.loc[:,'pct_access_norm_CM'], \n             markers=True, lw=2, ax=ax1, color='y', marker='o', zorder=2, label = 'pct_access',legend=0)\nsns.lineplot(data=main_learning_technologies.loc[:,'engagement_index_norm_CM'], \n             markers=True, lw=2, ax=ax2, color=\"green\", marker='o', zorder=2, label = 'engagement_index',legend=0)\n\n\n\nax1.set_xlabel('')\nax1.set_ylabel('pct_access', color='gray', size=14)\nax2.set_ylabel('engagement_index', color=\"gray\", size=14)\nplt.title('CM', fontsize=16, weight='bold', color=\"gray\")\n\nax1.tick_params(labelsize=14, width=0.5, length=1.5)\nax2.tick_params(labelsize=14, width=0.5, length=1.5)\n\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\nax1.set_xticklabels(months, rotation=90)\n\n# Graph 3 - LC\nax1 = fig.add_subplot(gs[2, 0])\n\nax2 = ax1.twinx()\nsns.lineplot(data=main_learning_technologies.loc[:,'pct_access_norm_LC'], \n             markers=True, lw=2, ax=ax1, color='y', marker='o', zorder=2, label = 'pct_access',legend=0)\nsns.lineplot(data=main_learning_technologies.loc[:,'engagement_index_norm_LC'], \n             markers=True, lw=2, ax=ax2, color=\"green\", marker='o', zorder=2, label = 'engagement_index',legend=0)\n\n\n\nax1.set_xlabel('')\nax1.set_ylabel('pct_access', color='gray', size=14)\nax2.set_ylabel('engagement_index', color=\"gray\", size=14)\nplt.title('LC', fontsize=16, weight='bold', color=\"gray\")\n\nax1.tick_params(labelsize=14, width=0.5, length=1.5)\nax2.tick_params(labelsize=14, width=0.5, length=1.5)\n\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\nax1.set_xticklabels(months, rotation=90)\n\n# Graph 4 - SDO\nax1 = fig.add_subplot(gs[3, 0])\n\nax2 = ax1.twinx()\nsns.lineplot(data=main_learning_technologies.loc[:,'pct_access_norm_SDO'], \n             markers=True, lw=2, ax=ax1, color='y', marker='o', zorder=2, label = 'pct_access',legend=0)\nsns.lineplot(data=main_learning_technologies.loc[:,'engagement_index_norm_SDO'], \n             markers=True, lw=2, ax=ax2, color=\"green\", marker='o', zorder=2, label = 'engagement_index',legend=0)\n\n\n\nax1.set_xlabel('')\nax1.set_ylabel('pct_access', color='gray', size=14)\nax2.set_ylabel('engagement_index', color=\"gray\", size=14)\nplt.title('SDO', fontsize=16, weight='bold', color=\"gray\")\n\nax1.tick_params(labelsize=14, width=0.5, length=1.5)\nax2.tick_params(labelsize=14, width=0.5, length=1.5)\n\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\nax1.set_xticklabels(months, rotation=90)\n        \n\n# Graph 5 - LC\/CM\/SDO\nax1 = fig.add_subplot(gs[4, 0])\n\nax2 = ax1.twinx()\nsns.lineplot(data=main_learning_technologies.loc[:,'pct_access_norm_LC\/CM\/SDO'], \n             markers=True, lw=2, ax=ax1, color='y', marker='o', zorder=2, label = 'pct_access',legend=0)\nsns.lineplot(data=main_learning_technologies.loc[:,'engagement_index_norm_LC\/CM\/SDO'], \n             markers=True, lw=2, ax=ax2, color=\"green\", marker='o', zorder=2, label = 'engagement_index',legend=0)\n\n\n\nax1.set_xlabel('')\nax1.set_ylabel('pct_access', color='gray', size=14)\nax2.set_ylabel('engagement_index', color=\"gray\", size=14)\nplt.title('LC\/CM\/SDO', fontsize=16, weight='bold', color=\"gray\")\n\nax1.tick_params(labelsize=14, width=0.5, length=1.5)\nax2.tick_params(labelsize=14, width=0.5, length=1.5)\n\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\nax1.set_xticklabels(months, rotation=90)\n    \n# common legends for figure\nhandles, labels = [(a + b) for a, b in zip(ax1.get_legend_handles_labels(), ax2.get_legend_handles_labels())]\nfig.legend(handles, labels, loc='upper right', fontsize=16)","972b1090":"# Select and filter for only the 'top_n' 'Primary Essential Function' categories\ntop_n = 7\ntop_learning_funct = list(engagement['Primary Essential Function'].value_counts().head(top_n).index)\n\nboolean_series = engagement['Primary Essential Function'].isin(top_learning_funct)\nengagement_filt = engagement[boolean_series]\n\n\nsub_learning_technologies = engagement_filt.groupby(['Primary Essential Function','month']).agg({'pct_access_norm': 'mean','engagement_index_norm': 'mean'})\n\nsub_learning_technologies\n\nsub_learning_technologies.reset_index(inplace=True)\n\n# States as column headers\nsub_learning_technologies = sub_learning_technologies.pivot_table(['pct_access_norm','engagement_index_norm'], ['month'], 'Primary Essential Function')\n\n# join different levels of columns by '_'\nsub_learning_technologies.columns = sub_learning_technologies.columns.map('_'.join)\n\n# order months\nmonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\nsub_learning_technologies.reset_index(inplace=True)\nsub_learning_technologies['month'] = pd.Categorical(sub_learning_technologies['month'], categories=months, ordered=True)\nsub_learning_technologies.sort_values(by='month',inplace=True) \nsub_learning_technologies.set_index('month', inplace=True)\n\nsub_learning_technologies","8befa4c4":"\n#plt.rcParams['figure.dpi'] = 600\nfig = plt.figure(figsize=(20, 26), facecolor='#f6f5f5')\ngs = fig.add_gridspec(7,2)\ngs.update(wspace=0.3, hspace=0.4)\n\nbackground_color = \"#f6f5f5\" # same as fig facecolor\nsns.set_palette(['#ffd514'])\n\ntitle = 'National Covid Increase Rate vs Top Primary Essential Function categories?'\nplt.suptitle(title, fontsize=20, weight='bold')\n\n\n\ndef plot_pct_and_index(sub_cat, row_no):\n    # Graph 1 - LC - Content Creation & Curation Vs pct_access\n    ax1 = fig.add_subplot(gs[row_no, 0])\n\n    ax2 = ax1.twinx()\n    sns.lineplot(data=sub_learning_technologies.loc[:,'pct_access_norm_'+sub_cat], \n                 markers=True, lw=2, ax=ax1, color='y', marker='o', zorder=2, label = 'pct_access',legend=0)\n    sns.lineplot(data=national_covid_mean.loc[:,'positiveIncreaseNorm'], \n                 markers=True, lw=2, ax=ax2, color=\"red\", marker='o', zorder=2, label = 'Covid increase rate',legend=0)\n\n    ax1.set_xlabel('')\n    ax1.set_ylabel('pct_access', color='gray', size=14)\n    ax2.set_ylabel('positiveIncreaseRate', color=\"gray\", size=14)\n    plt.title(sub_cat + ' vs pct_access', fontsize=16, weight='bold', color=\"gray\")\n\n    ax1.tick_params(labelsize=14, width=0.5, length=1.5)\n    ax2.tick_params(labelsize=14, width=0.5, length=1.5)\n\n    months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n    ax1.set_xticklabels(months, rotation=90)\n\n    # Graph 2 - LC - Content Creation & Curation Vs  engagement_index\n    ax1 = fig.add_subplot(gs[row_no, 1])\n\n    ax2 = ax1.twinx()\n    sns.lineplot(data=sub_learning_technologies.loc[:,'engagement_index_norm_'+sub_cat], \n                 markers=True, lw=2, ax=ax1, color=\"green\", marker='o', zorder=2, label = 'engagement_index',legend=0)\n    sns.lineplot(data=national_covid_mean.loc[:,'positiveIncreaseNorm'], \n                 markers=True, lw=2, ax=ax2, color=\"red\", marker='o', zorder=2, label = 'Covid increase rate',legend=0)\n\n\n\n    ax1.set_xlabel('')\n    ax1.set_ylabel('engagement_index', color='gray', size=14)\n    ax2.set_ylabel('positiveIncreaseRate', color=\"gray\", size=14)\n    plt.title(sub_cat + ' vs engagement_index', fontsize=16, weight='bold', color=\"gray\")\n\n    ax1.tick_params(labelsize=14, width=0.5, length=1.5)\n    ax2.tick_params(labelsize=14, width=0.5, length=1.5)\n\n    months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n    ax1.set_xticklabels(months, rotation=90)\n    \n# Category: LC - Content Creation & Curation\nsub_cat = 'LC - Content Creation & Curation'\nplot_pct_and_index(sub_cat, 0)\n\n# Category: LC - Courseware & Textbooks\nsub_cat = 'LC - Courseware & Textbooks'\nplot_pct_and_index(sub_cat, 1)\n\n# Category: LC - Digital Learning Platforms\nsub_cat = 'LC - Digital Learning Platforms'\nplot_pct_and_index(sub_cat, 2)\n\n# Category: LC - Sites, Resources & Reference\nsub_cat = 'LC - Sites, Resources & Reference'\nplot_pct_and_index(sub_cat, 3)\n\n# Category: LC - Sites, Resources & Reference - Games & Simulations\nsub_cat = 'LC - Sites, Resources & Reference - Games & Simulations'\nplot_pct_and_index(sub_cat, 4)\n\n# Category: LC - Study Tools\nsub_cat = 'LC - Study Tools'\nplot_pct_and_index(sub_cat, 5)\n\n# Category: LC\/CM\/SDO - Other\nsub_cat = 'LC\/CM\/SDO - Other'\nplot_pct_and_index(sub_cat, 6)\n\n# common legends for figure\nhandles, labels = [(a + b) for a, b in zip(ax1.get_legend_handles_labels(), ax2.get_legend_handles_labels())]\nfig.legend(handles, labels, loc='upper right', fontsize=16)","b0a815cb":"locale = engagement.groupby(['locale','month']).agg({'pct_access_norm': 'mean','engagement_index_norm': 'mean'})\n\nlocale.reset_index(inplace=True)\n\n# States as column headers\nlocale = locale.pivot_table(['pct_access_norm','engagement_index_norm'], ['month'], 'locale')\n\n# join different levels of columns by '_'\nlocale.columns = locale.columns.map('_'.join)\n\n# order months\nmonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\nlocale.reset_index(inplace=True)\nlocale['month'] = pd.Categorical(locale['month'], categories=months, ordered=True)\nlocale.sort_values(by='month',inplace=True) \nlocale.set_index('month', inplace=True)\n\nlocale","364756be":"\n#plt.rcParams['figure.dpi'] = 600\nfig = plt.figure(figsize=(20, 26), facecolor='#f6f5f5')\ngs = fig.add_gridspec(2,1)\ngs.update(wspace=0.3, hspace=0.4)\n\nbackground_color = \"#f6f5f5\" # same as fig facecolor\nsns.set_palette(['#ffd514'])\n\ntitle = 'Online learning rates in different locales'\nplt.suptitle(title, fontsize=20, weight='bold')\n\n\n# Graph 1 - pct_access\nax1 = fig.add_subplot(gs[0, 0])\n\nlocale_pct = locale[locale.columns[pd.Series(locale.columns).str.startswith('pct_access_norm_')]]\n\nax2 = ax1.twinx()\n\nsns.lineplot(data=locale_pct, \n             markers=True, lw=2, ax=ax1, marker='o', zorder=2, legend=1)\n\nsns.lineplot(data=national_covid_mean.loc[:,'positiveIncreaseNorm'], \n             markers=True, lw=2, ax=ax2, color=\"red\", marker='o', zorder=2, label = 'Covid increase rate',legend=1)\n\nax1.set_xlabel('')\nax1.set_ylabel('pct_access', color='gray', size=14)\nax2.set_ylabel('positiveIncreaseRate', color=\"gray\", size=14)\nplt.title('pct_access rates in different locales', fontsize=16, weight='bold', color=\"gray\")\n\nax1.tick_params(labelsize=14, width=0.5, length=1.5)\nax2.tick_params(labelsize=14, width=0.5, length=1.5)\n\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\nax1.set_xticklabels(months, rotation=90)\n\n# Graph 2 - engagement_index\nax1 = fig.add_subplot(gs[1, 0])\n\nlocale_index = locale[locale.columns[pd.Series(locale.columns).str.startswith('engagement_index_norm_')]]\n\nax2 = ax1.twinx()\n\nsns.lineplot(data=locale_index, \n             markers=True, lw=2, linestyle='-', ax=ax1, marker='o', zorder=2, legend=1)\n\nsns.lineplot(data=national_covid_mean.loc[:,'positiveIncreaseNorm'], \n             markers=True, lw=2, ax=ax2, color=\"red\", marker='o', zorder=2, label = 'Covid increase rate',legend=1)\n\nax1.set_xlabel('')\nax1.set_ylabel('engagement_index', color='gray', size=14)\nax2.set_ylabel('positiveIncreaseRate', color=\"gray\", size=14)\nplt.title('engagement_index rates in different locales', fontsize=16, weight='bold', color=\"gray\")\n\nax1.tick_params(labelsize=14, width=0.5, length=1.5)\nax2.tick_params(labelsize=14, width=0.5, length=1.5)\n\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\nax1.set_xticklabels(months, rotation=90);\n    \n# # common legends for figure\n# handles, labels = [(a + b) for a, b in zip(ax1.get_legend_handles_labels(), ax2.get_legend_handles_labels())]\n# fig.legend(handles, labels, loc='upper right', fontsize=16)","dc737053":"\nrace = engagement.groupby(['pct_black\/hispanic','month']).agg({'pct_access_norm': 'mean','engagement_index_norm': 'mean'})\n\nrace.reset_index(inplace=True)\n\n# States as column headers\nrace = race.pivot_table(['pct_access_norm','engagement_index_norm'], ['month'], 'pct_black\/hispanic')\n\n# join different levels of columns by '_'\nrace.columns = race.columns.map('_'.join)\n\n# order months\nmonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\nrace.reset_index(inplace=True)\nrace['month'] = pd.Categorical(race['month'], categories=months, ordered=True)\nrace.sort_values(by='month',inplace=True) \nrace.set_index('month', inplace=True)\n\nrace","92918491":"\n#plt.rcParams['figure.dpi'] = 600\nfig = plt.figure(figsize=(20, 26), facecolor='#f6f5f5')\ngs = fig.add_gridspec(2,1)\ngs.update(wspace=0.3, hspace=0.4)\n\nbackground_color = \"#f6f5f5\" # same as fig facecolor\nsns.set_palette(['#ffd514'])\n\ntitle = 'Online learning rates in different race population distributions'\nplt.suptitle(title, fontsize=20, weight='bold')\n\n\n# Graph 1 - pct_access\nax1 = fig.add_subplot(gs[0, 0])\n\nrace_pct = race[race.columns[pd.Series(race.columns).str.startswith('pct_access_norm_')]]\n\nax2 = ax1.twinx()\n\nsns.lineplot(data=race_pct, \n             markers=True, lw=2, ax=ax1, marker='o', zorder=2, legend=1)\n\nsns.lineplot(data=national_covid_mean.loc[:,'positiveIncreaseNorm'], \n             markers=True, lw=2, ax=ax2, color=\"red\", marker='o', zorder=2, label = 'Covid increase rate',legend=1)\n\nax1.set_xlabel('')\nax1.set_ylabel('pct_access', color='gray', size=14)\nax2.set_ylabel('positiveIncreaseRate', color=\"gray\", size=14)\nplt.title('pct_access rates in different race distribution areas', fontsize=16, weight='bold', color=\"gray\")\n\nax1.tick_params(labelsize=14, width=0.5, length=1.5)\nax2.tick_params(labelsize=14, width=0.5, length=1.5)\n\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\nax1.set_xticklabels(months, rotation=90)\n\n# Graph 2 - engagement_index\nax1 = fig.add_subplot(gs[1, 0])\n\nrace_index = race[race.columns[pd.Series(race.columns).str.startswith('engagement_index_norm_')]]\n\nax2 = ax1.twinx()\n\nsns.lineplot(data=race_index, \n             markers=True, lw=2, linestyle='-', ax=ax1, marker='o', zorder=2, legend=1)\n\nsns.lineplot(data=national_covid_mean.loc[:,'positiveIncreaseNorm'], \n             markers=True, lw=2, ax=ax2, color=\"red\", marker='o', zorder=2, label = 'Covid increase rate',legend=1)\n\nax1.set_xlabel('')\nax1.set_ylabel('engagement_index', color='gray', size=14)\nax2.set_ylabel('positiveIncreaseRate', color=\"gray\", size=14)\nplt.title('engagement_index rates in different race distribution areas', fontsize=16, weight='bold', color=\"gray\")\n\nax1.tick_params(labelsize=14, width=0.5, length=1.5)\nax2.tick_params(labelsize=14, width=0.5, length=1.5)\n\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\nax1.set_xticklabels(months, rotation=90);\n    \n# # common legends for figure\n# handles, labels = [(a + b) for a, b in zip(ax1.get_legend_handles_labels(), ax2.get_legend_handles_labels())]\n# fig.legend(handles, labels, loc='upper right', fontsize=16)","66e2bea6":"\neconomy = engagement.groupby(['pct_free\/reduced','month']).agg({'pct_access_norm': 'mean','engagement_index_norm': 'mean'})\n\neconomy.reset_index(inplace=True)\n\n# States as column headers\neconomy = economy.pivot_table(['pct_access_norm','engagement_index_norm'], ['month'], 'pct_free\/reduced')\n\n# join different levels of columns by '_'\neconomy.columns = economy.columns.map('_'.join)\n\n# order months\nmonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\neconomy.reset_index(inplace=True)\neconomy['month'] = pd.Categorical(economy['month'], categories=months, ordered=True)\neconomy.sort_values(by='month',inplace=True) \neconomy.set_index('month', inplace=True)\n\neconomy","67122f9e":"\n#plt.rcParams['figure.dpi'] = 600\nfig = plt.figure(figsize=(20, 26), facecolor='#f6f5f5')\ngs = fig.add_gridspec(2,1)\ngs.update(wspace=0.3, hspace=0.4)\n\nbackground_color = \"#f6f5f5\" # same as fig facecolor\nsns.set_palette(['#ffd514'])\n\ntitle = 'Online learning rates in different Economic population distributions'\nplt.suptitle(title, fontsize=20, weight='bold')\n\n\n# Graph 1 - pct_access\nax1 = fig.add_subplot(gs[0, 0])\n\neconomy_pct = economy[economy.columns[pd.Series(economy.columns).str.startswith('pct_access_norm_')]]\n\nax2 = ax1.twinx()\n\nsns.lineplot(data=economy_pct, \n             markers=True, lw=2, ax=ax1, marker='o', zorder=2, legend=1)\n\nsns.lineplot(data=national_covid_mean.loc[:,'positiveIncreaseNorm'], \n             markers=True, lw=2, ax=ax2, color=\"red\", marker='o', zorder=2, label = 'Covid increase rate',legend=1)\n\nax1.set_xlabel('')\nax1.set_ylabel('pct_access', color='gray', size=14)\nax2.set_ylabel('positiveIncreaseRate', color=\"gray\", size=14)\nplt.title('pct_access rates in different Economic distribution areas', fontsize=16, weight='bold', color=\"gray\")\n\nax1.tick_params(labelsize=14, width=0.5, length=1.5)\nax2.tick_params(labelsize=14, width=0.5, length=1.5)\n\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\nax1.set_xticklabels(months, rotation=90)\n\n# Graph 2 - engagement_index\nax1 = fig.add_subplot(gs[1, 0])\n\neconomy_index = economy[economy.columns[pd.Series(economy.columns).str.startswith('engagement_index_norm_')]]\n\nax2 = ax1.twinx()\n\nsns.lineplot(data=economy_index, \n             markers=True, lw=2, linestyle='-', ax=ax1, marker='o', zorder=2, legend=1)\n\nsns.lineplot(data=national_covid_mean.loc[:,'positiveIncreaseNorm'], \n             markers=True, lw=2, ax=ax2, color=\"red\", marker='o', zorder=2, label = 'Covid increase rate',legend=1)\n\nax1.set_xlabel('')\nax1.set_ylabel('engagement_index', color='gray', size=14)\nax2.set_ylabel('positiveIncreaseRate', color=\"gray\", size=14)\nplt.title('engagement_index rates in different Economic distribution areas', fontsize=16, weight='bold', color=\"gray\")\n\nax1.tick_params(labelsize=14, width=0.5, length=1.5)\nax2.tick_params(labelsize=14, width=0.5, length=1.5)\n\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\nax1.set_xticklabels(months, rotation=90);\n    \n# # common legends for figure\n# handles, labels = [(a + b) for a, b in zip(ax1.get_legend_handles_labels(), ax2.get_legend_handles_labels())]\n# fig.legend(handles, labels, loc='upper right', fontsize=16)","c8653ef7":"#pct_access_timeseries = engagement.groupby(['state']).agg({'pct_access': 'mean'})\n\n# States as column headers\npct_access_timeseries = engagement.pivot_table(['pct_access_norm','engagement_index_norm'], ['time'], 'state')\n\n# join different levels of columns by '_'\npct_access_timeseries.columns = pct_access_timeseries.columns.map('_'.join)\n\npct_access_timeseries","86d5f70d":"\n#plt.rcParams['figure.dpi'] = 600\nfig = plt.figure(figsize=(20, 60), facecolor='#f6f5f5')\ngs = fig.add_gridspec(len(statesList),1)\ngs.update(wspace=0.3, hspace=0.4)\n\nbackground_color = \"#f6f5f5\" # same as fig facecolor\nsns.set_palette(['#ffd514'])\n\n# title = 'How National Covid Increase Rate affected different Online learning technologies?'\n# plt.suptitle(title, fontsize=20, weight='bold')\n\nfor k in range(len(statesList)):\n    \n    ax1 = fig.add_subplot(gs[k, 0])\n\n    try:\n        dates_to_plot_1 = pd.to_datetime(state_policy[\"STEMERG\"].loc[state_policy['STATE']==statesList[k]].values[0])\n        dates_to_plot_2 = pd.to_datetime(state_policy[\"STEMERGEND\"].loc[state_policy['STATE']==statesList[k]].values[0])\n    except:\n        a = state_policy[\"STEMERG\"].loc[state_policy['STATE']==statesList[k]]\n        b = state_policy[\"STEMERGEND\"].loc[state_policy['STATE']==statesList[k]]\n        #print(a, b)\n    \n\n    #print(statesList[k], dates_to_plot_1, dates_to_plot_2)\n    \n    \n    # label_list = [\n    #     (dates_to_plot_1, 'STEMERG', 'r'),\n    #     (dates_to_plot_2, \"STEMERGEND\", 'b')\n    # ]\n\n    ax2 = ax1.twinx()\n\n    sns.lineplot(data=pct_access_timeseries.loc[:,'pct_access_norm_'+statesList[k]], \n                 markers=True, lw=2, ax=ax1, color=\"red\", zorder=2, label = 'Covid increase rate',legend=0)\n    sns.lineplot(data=pct_access_timeseries.loc[:,'engagement_index_norm_'+statesList[k]], \n                 markers=True, lw=2, ax=ax2, color=\"blue\", zorder=2, label = 'Covid increase rate',legend=0)\n    \n    if not pd.isnull(dates_to_plot_1) and not pd.isnull(dates_to_plot_2) :\n        if dates_to_plot_2 > pd.Timestamp(2020, 12, 31):\n            dates_to_plot_2 = pd.Timestamp(2020, 12, 31)\n            \n        ax1.axvspan(dates_to_plot_1, dates_to_plot_2, \n                   label=\"Stay at home\",color=\"green\", alpha=0.5)\n    elif not pd.isnull(dates_to_plot_1) and pd.isnull(dates_to_plot_2):\n        ax1.axvline(dates_to_plot_1, \n                   label=\"Stay at home started\",color=\"green\", alpha=0.5)\n    \n\n    \n    ax1.set_xlabel('')\n    ax1.set_ylabel('pct_access', color='gray', size=14)\n    ax2.set_ylabel('engagement_index', color='gray', size=14)\n    plt.title(statesList[k], fontsize=16, weight='bold', color=\"gray\")\n\n    ax1.tick_params(labelsize=14, width=0.5, length=1.5)\n    ax2.tick_params(labelsize=14, width=0.5, length=1.5)","f20c395b":"\n#plt.rcParams['figure.dpi'] = 600\nfig = plt.figure(figsize=(20, 60), facecolor='#f6f5f5')\ngs = fig.add_gridspec(len(statesList),1)\ngs.update(wspace=0.3, hspace=0.4)\n\nbackground_color = \"#f6f5f5\" # same as fig facecolor\nsns.set_palette(['#ffd514'])\n\n# title = 'How National Covid Increase Rate affected different Online learning technologies?'\n# plt.suptitle(title, fontsize=20, weight='bold')\n\nfor k in range(len(statesList)):\n    \n    ax1 = fig.add_subplot(gs[k, 0])\n\n    try:\n        dates_to_plot_1 = pd.to_datetime(state_policy[\"STAYHOME\"].loc[state_policy['STATE']==statesList[k]].values[0])\n        dates_to_plot_2 = pd.to_datetime(state_policy[\"END_STHM\"].loc[state_policy['STATE']==statesList[k]].values[0])\n    except:\n        a = state_policy[\"STAYHOME\"].loc[state_policy['STATE']==statesList[k]]\n        b = state_policy[\"END_STHM\"].loc[state_policy['STATE']==statesList[k]]\n        #print(a, b)\n    \n\n    #print(statesList[k], dates_to_plot_1, dates_to_plot_2)\n    \n    \n    # label_list = [\n    #     (dates_to_plot_1, 'STEMERG', 'r'),\n    #     (dates_to_plot_2, \"STEMERGEND\", 'b')\n    # ]\n\n    ax2 = ax1.twinx()\n\n    sns.lineplot(data=pct_access_timeseries.loc[:,'pct_access_norm_'+statesList[k]], \n                 markers=True, lw=2, ax=ax1, color=\"red\", zorder=2, label = 'Covid increase rate',legend=0)\n    sns.lineplot(data=pct_access_timeseries.loc[:,'engagement_index_norm_'+statesList[k]], \n                 markers=True, lw=2, ax=ax2, color=\"blue\", zorder=2, label = 'Covid increase rate',legend=0)\n    \n    if not pd.isnull(dates_to_plot_1) and not pd.isnull(dates_to_plot_2) :\n        if dates_to_plot_2 > pd.Timestamp(2020, 12, 31):\n            dates_to_plot_2 = pd.Timestamp(2020, 12, 31)\n            \n        ax1.axvspan(dates_to_plot_1, dates_to_plot_2, \n                   label=\"Stay at home\",color=\"yellow\", alpha=0.5)\n    elif not pd.isnull(dates_to_plot_1) and pd.isnull(dates_to_plot_2):\n        ax1.axvline(dates_to_plot_1, \n                   label=\"Stay at home started\",color=\"yellow\", alpha=0.5)\n    \n\n    \n    ax1.set_xlabel('')\n    ax1.set_ylabel('pct_access', color='gray', size=14)\n    ax2.set_ylabel('engagement_index', color='gray', size=14)\n    plt.title(statesList[k], fontsize=16, weight='bold', color=\"gray\")\n\n    ax1.tick_params(labelsize=14, width=0.5, length=1.5)\n    ax2.tick_params(labelsize=14, width=0.5, length=1.5)","8c905ecc":"### How does student engagement varies in districs of different Black\/Hispanic population percent?","7bcb97b5":"### The most used product (`Product Name`) in each district in each month in each `Sector(s)` and `Primary Essential Function`","abefe310":"#### US Statewise COVID Data","cb9f8146":"### How pandemic progression affected the monthly average online learning of each `primary_function_main`?\n\nNext, the effect of pandemic progression on each type of online learning technology is analyzed below.","1589b248":"## Competition Data","f8285e6b":"## Additional Data","af8477b6":"### How monthly average `pct_access` in each state relate to pandemic progression?","ac6455f2":"# INTRODUCTION","7cd19a8d":"#### Nation wide covid data summary","b03155b6":"It is considered that COVID-19 affected all the aspects of human life around the world in a way that was never seen before. It is iportant to understand how the pandemic affected each part of our life. \n\nIn this notebook the effect of COVID-19 on education is analyzed. Since the mode of learning changed to digital and online learning during pandemic, data from LearnPlatform is being used.\n\n> This notbook is part of the analytics competion [ LearnPlatform COVID-19 Impact on Digital Learning](https:\/\/www.kaggle.com\/c\/learnplatform-covid19-impact-on-digital-learning)","acba661a":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:white;\n           font-size:80%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 20px;\n              color:purple\">\n<a id=\"Q1\"> <\/a>\nQ1. What is the picture of digital connectivity and engagement in 2020?\n<\/h1>\n<\/div>","def6a2bc":"### How does student engagement varies in different Locale?","6dd26a16":"## Merging Datasets","30a64b72":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:white;\n           font-size:80%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 20px;\n              color:purple\">\n<a id=\"Q3\"> <\/a>\nQ3. How does student engagement with different types of education technology change over the course of the pandemic?\n<\/h1>\n<\/div>","dabfcce9":"* How monthly average `pct_access` in each state relate to pandemic progression?\n\n* How pandemic progression affected the monthly average online learning of each `primary_function_main`?\n\n* How some of the top subclasses of primary functions of technologies got affected with pandemic progression? ","5e8868c7":"### How the overall monthly mean of pct_access and engagement_index changes over time?","1a969e05":"### How does student engagement varies in districs of different Economic status (`pct_free\/reduced`) population percent?","ca7939ae":"Merge the competion datasets `districts_info` and `product_info` to `engagement` data.\n\nUse `LP ID` to merge `product_info`.\nUse `district_id` to merge `districts_info`.","e0c276fe":"### How some of the top subclasses of primary functions of technologies got affected with pandemic progression? \n\nThis is being analyzed below.","b2ff34ea":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:purple;\n           font-size:100%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 40px;\n              color:white\">\n<a id=\"analysis\"> <\/a>\n2. Analysis\n<\/h1>\n<\/div>","0f91f3a1":"* How the  monthly mean of `pct_access` and `engagement_index`  changes over time for disctricts based on their `'locale', pct_black\/hispanic`, `pct_free\/reduced` , `county_connections_ratio` and `pp_total_raw`?\n\n* How does student engagement varies in different Locale?\n\n* How does student engagement varies in districs of different Black\/Hispanic population percent?\n\n* How does student engagement varies in districs of different Economic status (`pct_free\/reduced`) population percent?","02d492a1":"### What is the racial-economic status of districts with lower pct values in relation to districts with highter pct value *in each state*?\n\nFirst, lets find the districts with higher and lower pct values *in each state*","2ea47992":"**Competition data**\n\nThe data used in this notebook is from [ LearnPlatform COVID-19 Impact on Digital Learning](https:\/\/www.kaggle.com\/c\/learnplatform-covid19-impact-on-digital-learning)\n\nThis data includes 3 datasets as follows:\n\n1. `products_info.csv`\n2. `districts_info.csv`\n3. `engagement_data` folder \n\nMore information regarding the data is available in the link above.\n\n**Additional Data**\n\nIn addition to the above data, the following covid related data is also being used:\n\n1. [COVID-19 US State Policy Database](https:\/\/www.kaggle.com\/cavfiumella\/covid19-us-state-policy-database)\n    \n    File name: `data.csv` - only selected columns of this data are used\n2. [USA-statewise(COVID-19 cases)](https:\/\/www.kaggle.com\/umeshkumar017\/usastatewisecovid19-cases)\n    \n    File name: `all-states-history.csv`\n    \n    Columns used: `state`, `date` and `positiveIncrease`\n3. [2019 Census US Population Data By State](https:\/\/www.kaggle.com\/peretzcohen\/2019-census-us-population-data-by-state)\n    \n    This dataset was used to convert the covid increase rate(`positiveIncrease` column from statewise covid data) as a percentage of population in each state.\n    \n    File name: `2019_Census_US_Population_Data_By_State_Lat_Long.csv`\n    \n    Columns used: `STATE` and `POPESTIMATE2019`\n4. [Summary of COVID-19 data for the United States](https:\/\/covidtracking.com\/data\/download)\n    \n    Daily increase rate of positive COVID-19 cases in the US.\n    \n    File name: `national-history.csv`\n    \n    Columns used: `date` and `positiveIncrease`","b14c35e8":"#### US Statewise population data","f347d64b":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:white;\n           font-size:80%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 20px;\n              color:purple\">\n<a id=\"Q5\"> <\/a>\nQ5. Do certain state interventions, practices or policies (e.g., stimulus, reopening, eviction moratorium) correlate with the increase or decrease online engagement?\n<\/h1>\n<\/div>","048cc07c":"* How the overall monthly mean of `pct_access` and `engagement_index` changes over time?\n\n* Which is the most used product (`Product Name`) in each district in each month in each `Sector(s)` and `Primary Essential Function`? (Based on `pct_access` and `engagement_index`)\n    - Does in change over time?\n    - Is there a common product that is used in most districts?\n        - is there a trend in districts based on `pct_black\/hispanic`, `pct_free\/reduced` , `county_connections_ratio` and `pp_total_raw`?\n        - is there a trend based on states?\n        \n        - what is the racial-economic status of districts with lower pct values in relation to districts with highter pct value *in each state*?","a32f424a":"[Q1. What is the picture of digital connectivity and engagement in 2020?](#Q1)\n\n[Q2. What is the effect of the COVID-19 pandemic on online and distance learning, and how might this also evolve in the future?](#Q2)\n\n[Q3. How does student engagement with different types of education technology change over the course of the pandemic?](#Q3)\n\n[Q4. How does student engagement with online learning platforms relate to different geography? Demographic context (e.g., race\/ethnicity, ESL, learning disability)? Learning context? Socioeconomic status?](#Q4)\n\n[Q5. Do certain state interventions, practices or policies (e.g., stimulus, reopening, eviction moratorium) correlate with the increase or decrease online engagement](#Q5)","b489c2cb":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:white;\n           font-size:80%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 20px;\n              color:purple\">\n<a id=\"Q4\"> <\/a>\nQ4. How does student engagement with online learning platforms relate to different geography? Demographic context (e.g., race\/ethnicity, ESL, learning disability)? Learning context? Socioeconomic status?\n<\/h1>\n<\/div>","40a4fc1f":"#### COVID-19 US State Policy Database","0dfb6ec9":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:purple;\n           font-size:100%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 40px;\n              color:white\">\n<a id=\"data\"> <\/a>\n1. Data Preparation\n<\/h1>\n<\/div>"}}