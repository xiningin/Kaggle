{"cell_type":{"682c3ea8":"code","20d08d43":"code","848490b1":"code","a3336ef3":"code","4f879462":"code","6b48c3f1":"code","c72ae17a":"code","59c1f5f8":"code","d3d9dcd8":"code","c09b78b3":"code","3fe4413b":"code","99583fa7":"code","cb1ca862":"code","7b1196b5":"code","eb87220e":"code","c29b6f13":"code","0ba27a2d":"code","b536e602":"code","21ccf9b7":"code","eaa724e5":"code","9dd0fcac":"code","ce08c1cf":"markdown","9726c058":"markdown","daafe473":"markdown","c05c77da":"markdown","4a8c2795":"markdown","d1d44efa":"markdown","82570b21":"markdown","c30c73fb":"markdown","f94d649b":"markdown","448754a7":"markdown","75a24d9e":"markdown","7d17082d":"markdown","06520b7c":"markdown","2eb0204c":"markdown","4dcfc27c":"markdown","512f4568":"markdown"},"source":{"682c3ea8":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom tqdm.notebook import tqdm\nimport datetime\nimport plotly\nimport plotly.express as px\nimport sklearn\nimport sklearn.model_selection\nimport sklearn.linear_model\nimport sklearn.ensemble\nimport sklearn.tree\nsns.set_style('whitegrid')\n\n%load_ext cython","20d08d43":"data = pd.read_csv('\/kaggle\/input\/stripe\/takehome_ds_written.csv')\ndata.drop('Unnamed: 0', axis=1, inplace=True)\ndata['time'] = pd.to_datetime(data['time'])\ndata['amount_usd_in_cents'] = data['amount_usd_in_cents']\/100\n\n# select for smaller cash transactions\n# data = data[data['amount_usd_in_cents'] < 20_000]","848490b1":"# by_merchant = {'merchant':[], 'median_amount':[]}\n# for merchant_id in tqdm(data['merchant'].unique()):\n#     by_merchant['merchant'].append(merchant_id)\n#     median = data[data['merchant'] == merchant_id]['amount_usd_in_cents'].median()\n#     by_merchant['median_amount'].append(median)\n# curr = pd.DataFrame(by_merchant)","a3336ef3":"# plt.figure(figsize=(20,10), dpi=200)\n# sns.histplot(curr['median_amount'])\n# plt.xlabel('Median Spend Per Transaction Amount, in $')\n# plt.ylabel('Merchant Frequency')\n# plt.title('Histogram of Median Spend Per Transaction Amount')\n# plt.show()","4f879462":"# fig = px.histogram(curr['median_amount'],\n#                    labels={'value':'Median Spend Per Transaction Amount, in $',\n#                            'count':'Merchant Frequency'},\n#                    title='Histogram of Median Spend Per Transaction Amount',\n#                    nbins=100)\n# fig.show()","6b48c3f1":"# by_merchant = {'merchant':[], 'median_monthly_spend':[]}\n# for merchant_id in tqdm(data['merchant'].unique()):\n#     by_merchant['merchant'].append(merchant_id)\n#     sel_data = data[data['merchant'] == merchant_id]\n#     sel_data['month'] = sel_data['time'].apply(lambda x:x.month)\n#     median = sel_data.groupby('month').sum()['amount_usd_in_cents'].median()\n#     by_merchant['median_monthly_spend'].append(median)\n# curr = pd.DataFrame(by_merchant)","c72ae17a":"# plt.figure(figsize=(20,10), dpi=200)\n# sns.histplot(curr['median_monthly_spend'])\n# plt.xlabel('Median Monthly Spend Per Transaction Amount, in $')\n# plt.ylabel('Merchant Frequency')\n# plt.title('Histogram of Median Monthly Spend Per Transaction Amount')\n# plt.show()","59c1f5f8":"# fig = px.histogram(curr['median_monthly_spend'],\n#                    labels={'value':'Median Monthly Spend Per Transaction Amount, in $',\n#                            'count':'Merchant Frequency'},\n#                    title='Histogram of Median Monthly Spend Amount',\n#                    nbins=100)\n# fig.show()","d3d9dcd8":"# by_merchant = {'merchant':[], 'median_amount':[]}\n# for merchant_id in tqdm(data['merchant'].unique()):\n#     by_merchant['merchant'].append(merchant_id)\n#     sel_data = data[data['merchant'] == merchant_id]\n#     sel_data['month'] = sel_data['time'].apply(lambda x:x.month)\n#     median = sel_data.groupby('month').size().median()\n#     by_merchant['median_amount'].append(median)\n# curr = pd.DataFrame(by_merchant)","c09b78b3":"# plt.figure(figsize=(20,10), dpi=200)\n# sns.histplot(curr['median_amount'])\n# plt.xlabel('Median Number of Monthly Transactions')\n# plt.ylabel('Merchant Frequency')\n# plt.title('Histogram of Median Number of Monthly Transactions')\n# plt.show()","3fe4413b":"# fig = px.histogram(curr['median_amount'],\n#                    labels={'value':'Median Number of Monthly Transactions',\n#                            'count':'Merchant Frequency'},\n#                    title='Histogram of Median Number of Monthly Transactions',\n#                    nbins=100)\n# fig.show()","99583fa7":"# diff = lambda start_date, end_date: (end_date.year - start_date.year) * 12 + (end_date.month - start_date.month)\n\n# by_merchant = {'merchant':[], 'tenure':[]}\n# for merchant_id in tqdm(data['merchant'].unique()):\n#     by_merchant['merchant'].append(merchant_id)\n#     sel_data = data[data['merchant'] == merchant_id]['time'].sort_values()\n#     first, last = sel_data[sel_data.index[0]], sel_data[sel_data.index[-1]]\n#     by_merchant['tenure'].append(diff(first, last))\n# curr = pd.DataFrame(by_merchant)","cb1ca862":"# plt.figure(figsize=(20,10), dpi=200)\n# sns.histplot(curr['median_amount'])\n# plt.xlabel('Tenure, in Months')\n# plt.ylabel('Merchant Frequency')\n# plt.title('Histogram of Merchant Tenure')\n# plt.show()","7b1196b5":"# fig = px.histogram(curr['tenure'],\n#                    labels={'value':'Tenure, in Months',\n#                            'count':'Merchant Frequency'},\n#                    title='Histogram of Merchant Tenure',\n#                    nbins=100)\n# fig.show()","eb87220e":"data['time_comp'] = data['time'].apply(lambda x:x.time())\n\nmerchants = {'day merchants':[],\n             'night merchants':[],\n             'weekend merchants':[],\n             'weekday merchants':[],\n             'Q1':[],\n             'Q2':[],\n             'Q3':[],\n             'Q4':[],\n             'restaurant merchants':[],\n             'breakfast merchants':[],\n             'median spend level':[]}\n\ndef day_func(time):\n    if datetime.time(6,0) < time < datetime.time(18,0):\n        return True\n    return False\n\ndef night_func(time):\n    if time < datetime.time(6,0) or time > datetime.time(18,0):\n        return True\n    return False\n\ndef restaurant_func(time):\n    if datetime.time(11,0) < time < datetime.time(13,0) or datetime.time(18,0) < time < datetime.time(20,0):\n        return True\n    return False\n\ndef breakfast_func(time):\n    if datetime.time(7,0) < time < datetime.time(9,0):\n        return True\n    return False\n\ndef weekend_func(time):\n    if time.weekday() >= 5:\n        return True\n    return False\n\ndef weekday_func(time):\n    if time.weekday() < 5:\n        return True\n    return False\n\ndef get_quarter(time):\n    return time.month % 12 \/\/ 3 + 1\n\nfor merchant_id in tqdm(data['merchant'].unique()):\n    \n    sel_data = data[data['merchant'] == merchant_id].reset_index().drop('index', axis=1)\n    \n    # day merchant\n    merchants['day merchants'].append(sum(sel_data['time_comp'].apply(day_func)) \/ len(sel_data))\n        \n    # night merchant=\n    merchants['night merchants'].append(sum(sel_data['time_comp'].apply(night_func)) \/ len(sel_data))\n        \n    # weekend merchant\n    merchants['weekend merchants'].append(sum(sel_data['time'].apply(weekend_func)) \/ len(sel_data))\n        \n    # weekday merchant\n    merchants['weekday merchants'].append(sum(sel_data['time'].apply(weekday_func)) \/ len(sel_data))\n        \n    # holiday merchant\n    counts = pd.value_counts(sel_data['time'].apply(get_quarter))\n    for quarter in [1,2,3,4]:\n        if quarter not in counts.index:\n            merchants[f'Q{quarter}'].append(0)\n        else:\n            merchants[f'Q{quarter}'].append(counts[quarter] \/ len(sel_data))\n    \n    # restaurant merchant\n    merchants['restaurant merchants'].append(sum(sel_data['time_comp'].apply(restaurant_func)) \/ len(sel_data))\n        \n    # breakfast merchant\n    merchants['breakfast merchants'].append(sum(sel_data['time_comp'].apply(breakfast_func)) \/ len(sel_data))\n        \n    # median spend level\n    merchants['median spend level'].append(sel_data['amount_usd_in_cents'].median())\n        \ncluster = pd.DataFrame(merchants)\n\n# # read in cluster data (previously derived to save time)\n# cluster = pd.read_csv('\/kaggle\/input\/stripeclustering\/merchants-data.csv')\n# cluster.drop('Unnamed: 0', axis=1, inplace=True)\ncluster.head()","c29b6f13":"# from sklearn.manifold import TSNE\n# embeddings = TSNE(n_components = 2).fit_transform(cluster)\n# fig = px.scatter(x=embeddings[:,0],\n#                  y=embeddings[:,1],\n#                  custom_data=[cluster[col] for col in cluster.columns],\n#                  title='Dimensionality Reduction')\n# fig.update_traces(\n#     hovertemplate=\"<br>\".join([\n#         col + ': %{customdata[' + str(i) + ']}' for i, col in enumerate(cluster.columns)\n#     ])\n# )\n# fig.show()","0ba27a2d":"# from sklearn.cluster import KMeans\n# from sklearn.metrics import silhouette_score as ss\n\n# ss_scores = {}\n# for clusternum in tqdm(range(0, 20)):\n#     kmeans = KMeans(n_clusters=clusternum, random_state=0).fit(cluster)\n#     ss_scores[clusternum] = ss(cluster, kmeans.predict(cluster))\n\n# sns.barplot(list(ss_scores.keys()), list(ss_scores.values()), color='blue')","b536e602":"# kmeans = KMeans(n_clusters=np.argmax(np.array(list(ss_scores.values()))), random_state=0).fit(cluster)\n# pd.DataFrame(kmeans.cluster_centers_, columns=cluster.columns)","21ccf9b7":"diff = lambda start_date: (2034 - start_date.year) * 12 + (12 - start_date.month)\n\ncurr = []\nfor i, merchant_id in tqdm(enumerate(data['merchant'].unique())):\n    \n    sel_data = data[data['merchant'] == merchant_id]['time'].sort_values()\n    if diff(sel_data[sel_data.index[0]]) >= 3:\n        last = sel_data[sel_data.index[-1]]\n        curr.append(diff(last))\n    else:\n        cluster.drop(i, inplace=True)\n        \ncurr = pd.Series(curr)","eaa724e5":"labels = (curr >= 3).apply(int)\nX_train, X_val, y_train, y_val = sklearn.model_selection.train_test_split(cluster, labels,\n                                                                          test_size=0.2)\n# model = sklearn.linear_model.LogisticRegression()\nmodel = sklearn.tree.DecisionTreeClassifier()\nmodel.fit(X_train, y_train)\n\nprint(sklearn.metrics.precision_score(y_train, model.predict(X_train)))\nprint(sklearn.metrics.recall_score(y_train, model.predict(X_train)))\nprint(sklearn.metrics.precision_score(y_val, model.predict(X_val)))\nprint(sklearn.metrics.recall_score(y_val, model.predict(X_val)))\nsklearn.metrics.confusion_matrix(y_val, model.predict(X_val))","9dd0fcac":"churn_month = []\nfor month_min in range(1,14):\n    churn_month.append(sum(curr >= month_min)\/len(curr))\n    \nx = np.array(churn_month)\ny = np.array(list(range(1,14)))\ncoefficients = np.polyfit(x, y, 3)\npoly = np.poly1d(coefficients)\nnew_x = np.linspace(x[0], x[-1])\nnew_y = poly(new_x)\n\nplt.figure(figsize=(20,10))\nplt.plot(x, y, \"o\", new_x, new_y, color='red')\nplt.bar(x=list(range(1,14)), height=churn_month, color='blue')\nplt.ylabel('Proportion of Customers Churned')\nplt.xlabel('Minimum Months Churned')","ce08c1cf":"### Deriving Labels","9726c058":"## Churn Prediction","daafe473":"#### Histogram of Merchants By Median Spend Per Transaction","c05c77da":"#### Dimensionality Reduction","4a8c2795":"---","d1d44efa":"#### Histogram of Tenure","82570b21":"#### Histogram of Merchants by Median Monthly Spend","c30c73fb":"```\nTentative churn definition: a merchant who has at least 3months or more no transaction\nTo verify 3month is a good threshold, we can show % of merchants who have at least 1m+, 2m+, 3m+, 4m+, 5m+, 6m+ no activity after any transaction\nLabel merchants with 3m+ no transaction as churn users, others no-churn users.  use 80% data as training data, and 20% data as validate data. Build a logistic regression model with training data. Show precision and recall with validate data\n```","f94d649b":"# Analysis of Stripe Data","448754a7":"## Load Data and Libraries","75a24d9e":"---","7d17082d":"#### Cluster","06520b7c":"#### Histogram of Median Number of Monthly Transactions","2eb0204c":"---","4dcfc27c":"## Infer Merchant Type","512f4568":"### Overall Distribution"}}