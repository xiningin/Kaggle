{"cell_type":{"78886c0b":"code","d46cd919":"code","b643c22c":"code","1aebff79":"code","6ab496e1":"code","5194160e":"code","52279211":"code","8dc5ce22":"code","f5fb0aa9":"code","6b36e836":"code","8f790d53":"code","65a3ed88":"code","4fea4c6f":"code","09d73dc3":"code","948b9253":"code","c2cab650":"code","cf36d580":"code","59ac6a3f":"code","71f1659b":"code","6bc85c33":"code","39e571cd":"code","fece1df6":"code","e18bcd5c":"code","a6398ee0":"code","9aad252b":"code","b8f035c6":"code","c6ac9ec5":"code","188321bb":"markdown","f51bb04c":"markdown","7127ba9f":"markdown","e3f1270b":"markdown","287134af":"markdown","2911a9c0":"markdown","4e2c6337":"markdown","3bca9d41":"markdown","39a0d34b":"markdown","a653611f":"markdown","61563ee9":"markdown","20cf2261":"markdown","e40fdb4f":"markdown","f46481d7":"markdown","b3542bde":"markdown","f3f2ca5a":"markdown","d0e61d3a":"markdown","03162063":"markdown","e5e3c28b":"markdown","bb863667":"markdown","84705217":"markdown","f491d18e":"markdown","5a3d51a4":"markdown","6b33fbac":"markdown","f5334d0d":"markdown","6953f03c":"markdown","6a446d4b":"markdown","480fc316":"markdown","7cbf0838":"markdown"},"source":{"78886c0b":"!pip install ppscore","d46cd919":"# importing the libraries\nimport os\nimport gc\nimport random\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy.stats as stats\nimport ipywidgets as widgets\nimport ppscore as pps\n\n\n# setting the notebook parameters\nroot_dir = \"\/kaggle\/input\/lish-moa\"\nplt.rcParams[\"figure.figsize\"] = (16, 8)\nsns.set_style(\"darkgrid\")\npd.set_option(\"display.max_rows\", 20, \"display.max_columns\", None)","b643c22c":"##########################\n#### Helper Functions ####\n##########################\n\ndef info_df(df):\n    \"\"\"\n    returns a dataframe with number of unique values and nulls\n    \n    args: dataframe\n    returns: dataframe\n    \"\"\"\n    info = pd.DataFrame({\n        \"nuniques\": df.nunique(),\n        \"% nuniques\": round((df.nunique() \/ len(df) * 100), 2),\n        \"nulls\": df.isnull().sum(),\n        \"% nulls\": round((df.isnull().sum() \/ len(df) * 100), 2)\n    })\n    \n    return info.T","1aebff79":"# importing the datasets\n\ntrain_df = pd.read_csv(os.path.join(root_dir, \"train_features.csv\"))\ntrain_targets = pd.read_csv(os.path.join(root_dir, \"train_targets_scored.csv\"))\ntrain_targets_nonscored = pd.read_csv(os.path.join(root_dir, \"train_targets_nonscored.csv\"))","6ab496e1":"train_df.head()","5194160e":"train_targets.head()","52279211":"info_df(train_df)","8dc5ce22":"info_df(train_targets)","f5fb0aa9":"pd.DataFrame({\n    \"% non-zero class - scored\": round(train_targets.drop(columns = [\"sig_id\"]).sum() \/ len(train_targets) * 100, 2)\n}).T","6b36e836":"plt.subplot(1, 3, 1)\nax = sns.countplot(x = \"cp_type\", data = train_df)\nfor p in ax.patches:\n    ax.annotate(\"{}\".format(p.get_height()), (p.get_x() + 0.25, p.get_height() + 150))   # for annotation of counts\nplt.xlabel(\"CP Type\")\n\nplt.subplot(1, 3, 2)\nax = sns.countplot(x = \"cp_time\", data = train_df)\nfor p in ax.patches:\n    ax.annotate(\"{}\".format(p.get_height()), (p.get_x() + 0.25, p.get_height() + 50))\nplt.xlabel(\"CP Time\")\n\nplt.subplot(1, 3, 3)\nax = sns.countplot(x = \"cp_dose\", data = train_df)\nfor p in ax.patches:\n    ax.annotate(\"{}\".format(p.get_height()), (p.get_x() + 0.25, p.get_height() + 100))\nplt.xlabel(\"CP Dose\")\n\nplt.suptitle(\"CP - Features\", fontsize = 20)\nplt.show()","8f790d53":"# list of gene expression columns\nge_list = [i for i in train_df.columns if i.startswith(\"g-\")]\n\n# feeding the above list to the dropdown\ndropdown_ge_cols = widgets.Dropdown(options = ge_list)\nge_plot = widgets.Output()\n\ndef dropdown_ge_eventhandler(change):\n    ge_plot.clear_output()\n    with ge_plot:\n        display(sns.distplot(train_df[change.new], kde = True, color = \"g\", label = change.new))\n        plt.legend()\n        plt.title(\"Density plot of {}\".format(change.new))\n        plt.show()\n        \ndropdown_ge_cols.observe(dropdown_ge_eventhandler, names = \"value\")","65a3ed88":"# display(dropdown_ge_cols)","4fea4c6f":"# display(ge_plot)","09d73dc3":"sns.distplot(train_df[\"g-2\"], kde = True, color = \"g\", label = \"g-2\")\nplt.legend()\nplt.title(\"Density plot of g-2\")\nplt.show()","948b9253":"# list of gene expression columns\ncv_list = [i for i in train_df.columns if i.startswith(\"c-\")]\n\n# feeding the above list to the dropdown\ndropdown_cv_cols = widgets.Dropdown(options = cv_list)\ncv_plot = widgets.Output()\n\ndef dropdown_cv_eventhandler(change):\n    cv_plot.clear_output()\n    with cv_plot:\n        display(sns.distplot(train_df[change.new], kde = True, color = \"y\", label = change.new))\n        plt.legend()\n        plt.title(\"Density plot of {}\".format(change.new))\n        plt.show()\n        \ndropdown_cv_cols.observe(dropdown_cv_eventhandler, names = \"value\")","c2cab650":"# display(dropdown_cv_cols)","cf36d580":"# display(cv_plot)","59ac6a3f":"sns.distplot(train_df[\"c-2\"], kde = True, color = \"y\", label = \"c-2\")\nplt.legend()\nplt.title(\"Density plot of c-2\")\nplt.show()","71f1659b":"plt.subplots_adjust(hspace = 0.5)\n\nplt.subplot(2, 2, 1)\nsns.distplot(train_df[\"c-0\"], kde = True)\nplt.title(\"Distribution of C-0\")\n\nplt.subplot(2, 2, 2)\nstats.probplot(train_df[\"c-0\"], dist = \"norm\", plot = plt)\n\nplt.subplot(2, 2, 3)\nsns.distplot(train_df[\"c-1\"], kde = True)\nplt.title(\"Distribution of C-1\")\n\nplt.subplot(2, 2, 4)\nstats.probplot(train_df[\"c-1\"], dist = \"norm\", plot = plt)\n\nplt.suptitle(\"Q-Q Plots of Cell Viability predictors\")\nplt.show()","6bc85c33":"# types of target variables\ntarget_types = [\"_inhibitor\", \"_agonist\", \"_antagonist\", \"_activator\", \"_blocker\"]\ncol_counts = {} # key => the target column; val => number of such columns \ncount = 0       # running count of how many columns are currently considered\nfor i in target_types:\n    col_counts[i[1:]] = len([j for j in train_targets.columns if j.endswith(i)])\n    count += col_counts[i[1:]]\ncol_counts[\"others\"] = train_targets.shape[1] - count - 1 # -1 for sig_id column\n\n# plot\nsns.set_palette(\"hls\")\nbar_colors = [\"r\", \"g\", \"b\", \"y\", \"m\", \"c\"]\nplt.bar(*zip(*col_counts.items()), color = bar_colors)\nplt.title(\"Frequency plot of Targets types\")\nplt.show()","39e571cd":"sns.catplot(x = \"cp_type\", col = \"cp_time\", hue = \"cp_dose\", data = train_df, kind = \"count\")\nplt.suptitle(\"Interaction among the CP Variables\")\nplt.tight_layout(rect = [0, 0.03, 1, 0.95])\nplt.show()","fece1df6":"sns.color_palette(\"tab10\")\n\ng1 = sns.jointplot(x = \"g-0\", y = \"g-1\", data = train_df, kind = \"reg\", marker = \"+\")\ng1.plot_marginals(sns.rugplot, height = -.15, clip_on = False)\n\nplt.show()","e18bcd5c":"g1 = sns.jointplot(x = \"g-0\", y = \"g-1\", data = train_df, kind = \"kde\", color = \"b\")\ng1.plot_marginals(sns.rugplot, color = \"b\", height = -.15, clip_on = False)\n\nplt.show()","a6398ee0":"# the ge_list used in the following line is defined in section 2.1.2\nppdf = pps.matrix(train_df[random.sample(ge_list, 10)])\nppdf = ppdf[[\"x\", \"y\", \"ppscore\"]].pivot(columns = \"x\", index = \"y\", values = \"ppscore\")\nsns.heatmap(ppdf, vmin = 0, vmax = 1, cmap = \"Blues\", linewidths = 0.5, annot = True)\nplt.show()\n\ndel ppdf","9aad252b":"g1 = sns.jointplot(x = \"c-0\", y = \"c-1\", data = train_df, kind = \"reg\", marker = \"+\")\ng1.plot_marginals(sns.rugplot, height = -.15, clip_on = False)\n\nplt.show()","b8f035c6":"g1 = sns.jointplot(x = \"c-0\", y = \"c-1\", data = train_df, kind = \"kde\", color = \"b\")\ng1.plot_marginals(sns.rugplot, color = \"b\", height = -.15, clip_on = False)\n\nplt.show()","c6ac9ec5":"# the cv_list used in the following line is defined in section 2.1.2\nppdf = pps.matrix(train_df[random.sample(cv_list, 10)])\nppdf = ppdf[[\"x\", \"y\", \"ppscore\"]].pivot(columns = \"x\", index = \"y\", values = \"ppscore\")\nsns.heatmap(ppdf, vmin = 0, vmax = 1, cmap = \"Blues\", linewidths = 0.5, annot = True)\nplt.show()\n\ndel ppdf","188321bb":"There are total of 206 target features, which belongs to categories such as inhibitor, activators, agonists etc. In the following visualization, we plot a frequency plot of different types of features available to us. ","f51bb04c":"#### Insights:-\n1. The distributions seems very similar across different dose time frames. \n2. There is some difference in the 48 hour dose time between the D1 and D2 distribution for samples treated with the compound.","7127ba9f":"**Note**:- The Jupyter Widgets doesn't work after committing the notebook. Don't why that's the case. But it works fairly well in the edit mode. It would be advisable to fork and open the NB in edit mode to access the Dropdown Widget. To use the widget, uncomment the following two cells blocks.","e3f1270b":"#### Train Targets (scored and non-scored)\nThe `train_targets` contains the binary MoA targets. These targets are divided into two categories, scored and non-scored. Following table shows the `train_targets` that are scored.","287134af":"#### Insights\n1. The `cp_type` indicates sample treated with compound (`trt_cp`) or control pertubations (`ctl_vehicle`). The control pertubations have no MoAs. In the training set, majority of the data samples are the one treated with compound, 11 times the data samples of control pertubations.\n2. The `cp_time` indicated treatment duration and contains three distinct time durations, 24, 48 and 72 hours, with observations (almost) evenly distributed among these durations.\n3. The `cp_dose` indicates dose being high or low. Like `cp_time`, it is also evenly distributed.","2911a9c0":"#### Insights\n1. Unlike the gene-expression predictors, the predictors do have a predictive among themselves.\n2. The predictive score isn't much high here, which backs our hypothesis that **High positive correlation is due to two primary areas of concentration, one being in range of `(-2, 2)` and other around `-10`**. In the section 2.1.3, we did a fat tail analysis that shed light on how, despite looking like a bell curve, the distributions of Cell-Viability predictors deviate largely from the *theoretical normal distribution*. ","4e2c6337":"### 2.2.3. Cell Viability\nThe appraoch to explore the relationships among the Cell Viability predictors will remain the same as that in Gene Expression predictors. We will explore the predictors first with the regression plot and kde plot and then look into the predictive power among these variables.","3bca9d41":"#### Predictive power score of Cell Viability predictors","39a0d34b":"### 2.2.2. Gene Expression\nTo identify the relationship between two predictors in the gene expression data, we plot a jointplot with a regression line. Because the number of variables in the gene-expression predictor family are way too high, it won't be feasible to plot each and every one of those in this notebook.","a653611f":"#### Insights:-\n1. Most of the target variables are inhibitors.\n2. The agonists and antagonists are not equal to each other. While by definition, agonist causes an action and antagonist will inhibit it, my initial understanding was they **might** be equal to each other.","61563ee9":"#### Insights:-\n1. There is isn't much predictive power in among the gene expression variables. This is backed by the jointplots above, where two variables were weakly correlated.\n2. This communicates that there might not be any redundant information coming from these variables.","20cf2261":"Similarly, checking the number of nulls and uniques in `train_targets` (scored).","e40fdb4f":"Due to similar reason as above, widgets are not working after committing. To use the widget, uncomment the following two cells blocks.","f46481d7":"# 1.0. Introduction\nThe objective of this notebook is to do a exploratory analysis of [Mechanism of Action (MoA) Prediction](https:\/\/www.kaggle.com\/c\/lish-moa\/overview\/description) data, using Matplotlib and Seaborn.\n\n## 1.1. About the Challenge\nTo understand the biological mechanism of the disease, scientists seek to identify the protein target associated with the disease and develop a molecule that can modulate that protein target. To describe the biological activity of a given molecule, scientist assign a label referred to as Mechanism-of-action or MoA. ","b3542bde":"Checking the number of nulls and uniques in each predictor of the `train_df`.","f3f2ca5a":"### 2.1.3. Cell Viability Data\nAll the columns that starts with `c-` refers to cell viability data. Like gene expression predictors, these too are quite a few in numbers, 100 to be precise. So, we will use the dropdown widget here too, to include all the cell viability data predictors.","d0e61d3a":"In the `train_target`, every target has two classes, 0 and 1. To check the sparsity of data, we will calculate the percentage of the non-zero classes in each `train_targets`.","03162063":"#### Trainset\nThe trainset contains 876 predictors, which can be divided into four broad categories:-\n1. Gene Expression\n2. Cell Viability\n3. Whether the sample is treated with compound or not\n4. Identifier (`sig_id`)","e5e3c28b":"#### Insights:-\n1. The probability distributions of `g-` predictors are bell-shaped, with mean of all around 0.\n2. Skewness is also visible in the many of the gene-expression predictors.","bb863667":"#### Insights:-\n1. All the `c-` predictors have fat tails, with peak around the `-10`. These tails are all on the left side. **These tails indicate high likelihood of the improbable events** and could be hard of for the machine learning model to grasp. The risk associated with imperfectly modelling these tails is called tail risk. In the competition like this, fat tail could carry disproportionately high impact.\n2. Though the distributions seems like normal distribution, the tails cause quite a deviation as seen in the QQ plot. The tails in the both graphs shows that the distribution are skewed to right.","84705217":"### 2.1.4. Target Features","f491d18e":"#### Predictive Power score of gene-expression predictors\nIn this section, we explore the predictive power score among the variables in the gene-expression family. Looking at the alternatives of the correlation (it can be quite misleading), I found this [blog](https:\/\/towardsdatascience.com\/rip-correlation-introducing-the-predictive-power-score-3d90808b9598) and thought of using this in the analysis.\nOne of the greatest disadvantage of using predictive power is the speed, it is much slower than the correlation. So, I am selecting 10 random variables below and calculating PPScore for them.","5a3d51a4":"#### Insights\n1. Unlike the gene-expression predictors, the cell-viability predictors do have significant correlation among themselves. This is evident in the above graphs.\n2. The concentration of the observations here too is in the range of `(-2, 2)`, but with some concentration around negative tail too. *I guess, it is because of this tail, that we see positive correlations here*.","6b33fbac":"## 2.2. Multivariate Analysis\nAfter looking into the distributions and frequency plots (whichever applicable), and developing a understanding of individual predictors, we will look how these predictors interact among themselves.\n\n### 2.2.1. CP Variables","f5334d0d":"#### Analyze fat-tail using Q-Q Plot\nAs we see quite a fat tails in all the cell viability predictors, we will analyze it bit more using the Q-Q plots. A Q-Q plot or quantile-quantile plot, compares quantiles of the dataset. It compares the quantiles of the \"real-world\" dataset against the theoretical normal distribution. ","6953f03c":"---\n# 2.0. Exploratory Data Analysis\nNow that we have a brief overview of the data, we can delve deeper into the data exploration. The section 02 will visualize different predictors, alone and against other variables. The univariate analysis will help us understand the predictors while multivariate analysis will help us establishes cause and effect or other relationships.\n## 2.1. Univariate Analysis\nIn this section, we will visualize the predictors one by one, to understand their distribution, describe statistical summaries, and find patterns in the data. \n\n### 2.1.1. CP Variables\nThese predictors indicates whether a certain observation or sample is treated with compound or not.","6a446d4b":"### 2.1.2. Gene Expression Data\nAll the columns that starts with `g-` signifies the *gene expression data*. Becuase the gene-expression predictors are 772 in number, it won't be possible to show each as a seperate plot, so, we will go with **Dropdown Widget**.","480fc316":"## 1.2. Dataset\nIn this competition, we have a dataset that combines gene expression and cell viability data. The data is based on a technology that measures simultaneously human's cell response to drugs in a pool of 100 different cell types. Drugs can have multiple MoA annotations which describe binary cell responses from different cell type in different ways. Thus, the problem that we have here is of multi-label classification.","7cbf0838":"#### Insights:-\n1. The variance between two gene-expression predictors, (here, `g-0` and `g-1`) is high. This affects the correlation in general as the best fitted line is more or less parallel to the x-axis, hence, predictors are weakly correlated.\n2. Though the variance is high, it is clear from the density plot above, the data is concentrated in the range `(-2, 2)`."}}