{"cell_type":{"16692f3a":"code","06947f8e":"code","8356b1eb":"code","93a2244b":"code","1640dd19":"code","4ebab689":"code","73fa91d1":"code","2ff71aaf":"code","1b8071ed":"code","d89c390d":"code","d6274a52":"code","a69dbafa":"code","01d6ec2b":"code","49aec2eb":"code","22a1496a":"code","889c9f19":"code","684d39d1":"code","7167d6c3":"code","16cadf65":"code","9980aaac":"code","4a440f88":"code","89b37673":"code","4763102a":"code","e15df0e2":"code","64f08b54":"code","a3bd3959":"code","a456db57":"code","d7fb100b":"code","f9483bb8":"code","c4eef21b":"code","c21513d5":"code","7dcf3ed1":"code","f92e9a16":"code","d1ec450b":"code","2cbc715b":"code","62bf2556":"code","a143a022":"code","4d2acea9":"code","bc3d1871":"code","a56308b2":"code","9bf7c3a2":"code","94941832":"code","679ce930":"code","ef2b9542":"code","df07f686":"code","30755c47":"code","a488b8ca":"code","30e14969":"code","bf09ad24":"code","06dd2ac2":"code","6d705741":"code","e4186684":"code","0eeeb8a0":"code","6da7aca7":"code","bdab9229":"code","95a7d134":"code","f996e723":"code","f1ddd911":"code","0e22110a":"code","c408b3d1":"code","f5bcfc9a":"code","d02c4c89":"code","a3dcf050":"code","efd3d805":"code","1371e699":"code","1ea815c2":"code","6e2d49b4":"code","9a8181c0":"code","6d8e0f92":"code","a593ffb1":"code","0c95d5c2":"code","463a1a93":"code","eeb719e5":"code","23793029":"code","402011fd":"code","d154bbc1":"code","1ca61e19":"code","e3f58f5e":"code","ed4183a9":"code","efff0cd5":"code","2b213c26":"code","98dfe4d5":"code","2b51df7e":"code","db13eb3a":"code","51705365":"code","10285738":"code","15dc2868":"code","e9c57268":"code","b6e05c8e":"code","c0134806":"code","13fed2cb":"code","d08cc51d":"code","61d9fe82":"code","7f8acb26":"code","0bb037a3":"code","789e6f5d":"code","198545a4":"code","6780642a":"code","a9d6e14b":"markdown","81066fe2":"markdown","a55bcd0c":"markdown","e27fa548":"markdown","cdbab30a":"markdown"},"source":{"16692f3a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","06947f8e":"df = pd.read_csv(\"\/kaggle\/input\/btcusd-dataset\/btc.csv\") #csv datam\u0131z\u0131 import ediyoruz.","8356b1eb":"df.info()","93a2244b":"df.columns","1640dd19":"df.describe()","4ebab689":"df_reserved = df[::-1] #liste tersten yazd\u0131r\u0131yoruz.\ndf_reserved.head(10) #sonras\u0131nda ilk 10 indexi inceliyoruz","73fa91d1":"df.head(10)","2ff71aaf":"df.corr()","1b8071ed":"#correlation map\nf,ax = plt.subplots(figsize=(18,18))\nsns.heatmap(df.corr(), annot=True, linewidths=.5, fmt='.1f',ax=ax)\nplt.show()","d89c390d":"# lineplot\n\ndf.High.plot(kind='line', color='r', label='High Cost', linewidth=1, alpha=1,grid=True)\ndf.Low.plot(kind='line', color='b', label='Low Cost', linewidth=1, alpha=1,grid=True)\nplt.legend(loc='upper right')\nplt.xlabel('x axis')\nplt.ylabel('y axis')\nplt.title('High\/Low Cost')\nplt.show()","d6274a52":"#scatter plot\n\"\"\"\nHigh ile bid datalar\u0131n\u0131z\u0131 almam\u0131zda ki sebep; fiyat\u0131n tepe noktas\u0131nda, fiyatlar\u0131n genel\nseviyesi de y\u00fckselece\u011finden dolay\u0131 insanlar daha y\u00fcksek bir fiyattan sat\u0131n almalar\u0131 gerecektir.\n\"\"\"\n\ndf.plot(kind='scatter',color='orange',x='High', y='Ask',alpha=0.5)\nplt.xlabel('High')\nplt.ylabel('Ask')\nplt.title('High\/Ask')\nplt.show()","a69dbafa":"# Histogram\n\ndf.Ask.plot(kind = 'hist',bins = 15,figsize = (12,12),color='darkblue')\nplt.show()","01d6ec2b":"dictionary = {'NAME': [\"enes\",\"serhat\",\"lokman\",\"omer\",\"ibrahim\"],\n              'AGE': [25,20,15,14],\n              'JOBS': [\"investor\",\"doctor\",\"trainer\",\"teacher\",\"nurse\"]}\n\n# print(dictionary)\nprint(dictionary.keys())\nprint(dictionary.values())","49aec2eb":"dictionary['NAME'] = [\"enes\",\"kemal\",\"sahin\"]\nprint(dictionary)\n\n# del dictionary['JOBS']\n# print(dictionary)\n\nprint(\"sahin\" in dictionary['NAME'])\n\ndictionary.clear()\nprint(dictionary)","22a1496a":"df1 = pd.read_csv('\/kaggle\/input\/btcusd-dataset\/btc.csv')","889c9f19":"series = df1['High']\nprint(type(series))\ndata_frame = df1[['High']]\nprint(type(data_frame))","684d39d1":"#Comparison operator:  ==, <, >, <=\n\nprint(3 > 2)\nprint(3 != 9)\nprint(4 == 16)\n\nprint(True or False)\nprint(True and True)\n","7167d6c3":"x = df1['High']>3000.0\ndf1[x]","16cadf65":"df1[(df1['High'] > 3000.0) & (df1['Ask'] > 1000.0)]","9980aaac":"s = 0\n\nwhile s != 10:\n    print('s is: ',s)\n    s += 1\nprint('s degeri 10 degerine ulasti')","4a440f88":"yeniliste = [1,2,3,4,5,6,7,8]\nfor x in yeniliste:\n    print('x is: ',x)\nprint('')\n\nfor index, value in enumerate(yeniliste):\n    print(index,\" : \",value)\nprint('')   \n\ndictionary = {'enes':'investor','kemal':'doctor'}\nfor key,value in dictionary.items():\n    print(key,\" : \",value)\nprint('')\n\nfor index,value in df[['Mid']][0:1].iterrows():\n    print(index,\" : \",value)","89b37673":"#user defined function\n\ndef tuble_ex():\n    t = (1,2,3)\n    return t\n\na,b,c = tuble_ex()\nprint(a,b,c)","4763102a":"x = 2 #global variable\n\ndef f():\n    x = 3\n    return x\n\nprint(x)\nprint(f())","e15df0e2":"x = 5\n\ndef f():\n    y = 2*x\n    return y\n\nprint(x)\nprint(f())","64f08b54":"import builtins\n\ndir(builtins)","a3bd3959":"#nested function\n\ndef square():\n    \"\"\"return square of value\"\"\"\n    def add():\n        \"\"\"add two local variable\"\"\"\n        x = 2\n        y = 3\n        z = x + y\n        return z\n    return add()**2\n\nprint(square())","a456db57":"#default and flexible arguments\n\ndef f(a,b=1,c=2):\n    y = a + b + c\n    return y\n\nprint(f(5))\nprint(f(5,4,3))\n\ndef s(*args):\n    for i in args:\n        print(i)\ns(1)\nprint(\"\")\n\ns(1,2,3,4)\n\ndef x(**kwargs):\n    for key, value in kwargs.items():\n        print(key, \": \", value)\n\nx = {\"country\": \"turkey\",\"capitalcity\": \"ankara\",\"flag\": \"TR\"}\nprint(x)","d7fb100b":"#lambda function\n\nsquare = lambda a: a**2\n\nprint(square(5))\n\ntpl = lambda x,y,z: x+y+z\nprint(tpl(5,5,5))","f9483bb8":"#anonymous function\n\nyeniliste = [1,2,3]\ny = map(lambda x: x**2, yeniliste)\nprint(list(y))","c4eef21b":"#iterators\n\nname = \"enes\"\nit = iter(name)\nprint(next(it))\nprint(*it)","c21513d5":"#zip method\n\nlist1 = [1,2,3,4]\nlist2 = [5,6,7,8]\n\nz = zip(list1,list2)\nprint(z)\nz_list = list(z)\nprint(z_list)","7dcf3ed1":"un_zip = zip(*z_list)\nun_list1,un_list2 = list(un_zip)\nprint(un_list1)\nprint(un_list2)\n\nprint(type(un_zip))\nprint(type(un_list2))","f92e9a16":"#list comprehension\n\nnum1 = [1,2,3]\nnum2 = [i + 1 for i in num1]\nprint(num2)","d1ec450b":"#conditionals on iterrable\n\nnum3 = [5,10,15]\nnum4 = [i**2 if i == 10 else i-5 if i < 7 else i+5 for i in num3]\nprint(num4)","2cbc715b":"#pandas comprehension\nimport pandas as pd\n\ndf2 = pd.read_csv('\/kaggle\/input\/btcusd-dataset\/btc.csv')\n\ntreshold = sum(df2.High)\/len(df2.High)\ndf2['HL_PCT'] = [\"High\" if i > treshold else 'Low' for i in df2.High]\ndf2.loc[:10,[\"HL_PCT\",\"High\"]]","62bf2556":"num1 = [1,2,3,4]\n\nnum2 = [i**2 if i % 2 == 0 else i-i  for i in num1]\n\nprint(num2)","a143a022":"#cleaning data\n\nimport pandas as pd\n\ndf3 = pd.read_csv('\/kaggle\/input\/btcusd-dataset\/btc.csv')\ndf3.head()","4d2acea9":"df3.tail()","bc3d1871":"df3.columns","a56308b2":"df3.shape","9bf7c3a2":"df3.info()","94941832":"#explore data analysis\n#value_counts()\nimport pandas as pd\n\ndf4 = pd.read_csv(\"\/kaggle\/input\/btcusd-dataset\/btc.csv\")\nprint(df4['Low'].value_counts(dropna=False))","679ce930":"df4.describe()","ef2b9542":"#visual exploratory data analysis\nimport matplotlib.pyplot as plt\n\ndf4.boxplot(column='Low')\nplt.show()","df07f686":"#tidy data\n\ndf_new = df4.head()\ndf_new","30755c47":"# Belirli datalar\u0131 \u00e7\u0131kart\u0131p ekleyebilmemezi sa\u011fl\u0131yor.\n\nmelted = pd.melt(frame=df_new,id_vars='Date',value_vars=['High','Low','Mid'])\nmelted","a488b8ca":"#pivoting data; melted datay\u0131 eski hale getirme\n\nmelted.pivot(index='Date',columns='variable',values='value')","30e14969":"#concatenating data\n\ndf0 = df4.head()\ndf8 = df4.tail()\n\nconc_data_row = pd.concat([df0,df8],axis=0,ignore_index=True) #datalar\u0131 birle\u015ftirme\nconc_data_row","bf09ad24":"df7 = df4['High'].head()\ndf9 = df4['Ask'].head()\n\nconc_df_row = pd.concat([df7,df9],axis=1)\nconc_df_row","06dd2ac2":"#data types\n\ndf4.dtypes","6d705741":"df4['Date'] = df4['Date'].astype('category')","e4186684":"df4.dtypes","0eeeb8a0":"#missing data\n\ndf4.info()","6da7aca7":"df4[\"Ask\"].value_counts(dropna=False)","bdab9229":"data2 = df4\ndata2[\"Ask\"].dropna(inplace=True)","95a7d134":"assert 1==1 #\u00e7al\u0131\u015ft\u0131\u011f\u0131n\u0131 kontrol ediyoruz","f996e723":"assert data2['Ask'].notnull().all() #null olan k\u0131s\u0131mlar\u0131n hepsi silindi mi kontrol ediyoruz","f1ddd911":"data2['Ask'].fillna('empty',inplace=True)","0e22110a":"assert data2['Ask'].notnull().all() #null olan k\u0131s\u0131mlar\u0131n hepsi silindi mi kontrol ediyoruz","c408b3d1":"#Pandas Foundation\n\nimport pandas as pd\n\nname = [\"enes\",\"ali\",\"omer\"]\nage = [19,23,35]\nlist_label = [\"name\",\"age\"]\nlist_col = [name,age]\nzipped = zip(list_label,list_col)\ndata_dict = dict(zipped)\ndf88 = pd.DataFrame(data_dict)\ndf88","f5bcfc9a":"df88['City'] = [\"istanbul\",\"rize\",\"hakkari\"]\n# df44 = df88.drop(columns=['Cit'])\ndf88","d02c4c89":"df88['Cost'] = 0\ndf88","a3dcf050":"#visual exploratory\n\ndf4 = df4.loc[:,['High','Low','Ask']]\ndf4.plot()","efd3d805":"df4.plot(subplots = True)\nplt.show()","1371e699":"df4.plot(kind='scatter',x='High',y='Ask',label='High\/Ask',color='r')\nplt.show()","1ea815c2":"df4.plot(kind='hist',y='High',bins=50,range=(0,250),color='r',normed=True,grid=True)\nplt.show()","6e2d49b4":"fig, axes = plt.subplots(nrows=2,ncols=1)\ndf4.plot(kind='hist',y='High',bins=50,range=(0,250),color='r',normed=True,grid=True,ax=axes[0])\ndf4.plot(kind='hist',y='High',bins=50,range=(0,250),color='r',normed=True,grid=True,ax=axes[1],cumulative=True)\nplt.savefig('graph.png')\nplt.show()\n","9a8181c0":"#indexing pandas time series\n\ndf88 = pd.read_csv('\/kaggle\/input\/btcusd-dataset\/btc.csv')\ndf88.head()","6d8e0f92":"import warnings\n\nwarnings.filterwarnings(\"ignore\")\n\ndata5 = df88.head()\ndata5.drop(columns='Date')\ndate_list = [\"2020-05-27\",\"2020-05-26\",\"2020-03-25\",\"2020-02-24\",\"2019-01-23\"]\ndatetime_object = pd.to_datetime(date_list)\ndata5['Date'] = datetime_object\n\ndata5 = data5.set_index(\"Date\")\ndata5","a593ffb1":"print(data5.loc['2020-05-27'])\nprint(data5.loc['2020-05-27':'2020-03-23'])","0c95d5c2":"#resampling pandas time series\n\ndata5.resample(\"M\").mean()","463a1a93":"data5.resample(\"M\").first().interpolate(\"linear\") #NaN datalar\u0131m\u0131z\u0131 linear olarak doldururu 1,2,3,?,5,6,7 && ? == 4","eeb719e5":"data5.resample(\"M\").mean().interpolate(\"linear\")","23793029":"#manipulating data frames with pandas\n\nimport pandas as pd\n\ndata66 = pd.read_csv(\"\/kaggle\/input\/btcusd-dataset\/btc.csv\")\n# data66.columns = ['D','High','Low','Mid','Last','Bid','Ask','Volume']\n# data66 = data66.set_index('Date')\ndata66.head()","402011fd":"data66.Mid[1]","d154bbc1":"data66.iloc[2,2]","1ca61e19":"data66[[\"High\",\"Low\"]]","e3f58f5e":"#slicing dataframe\n\ndata66.loc[1:10,\"High\":\"Mid\"]","ed4183a9":"data66.loc[1:10,\"High\":]","efff0cd5":"#filtering data frames\n\nboolean = data66.High > 6500.0\n\ndata66[boolean]","2b213c26":"first_filter = data66.High > 6500.0\nsecond_filter = data66.Low < 6000.0\n\ndata66[first_filter & second_filter]","98dfe4d5":"data66[data66.High > 6000]","2b51df7e":"data66.Low[data66.High > 6000]","db13eb3a":"#transforming data\n\ndef div(n):\n    return n\/2\n    \ndata66.High.apply(div)","51705365":"data66[\"HIGH-LOW\"] = (data66['High']- data66['Low'])\ndata66.head()","10285738":"#index objects labeled data\n\nprint(data66.index.name)\n\n# data66.index_name = \"index_name\"\ndata66.head()","15dc2868":"import pandas as pd\n\ndata67 = pd.read_csv(\"\/kaggle\/input\/btcusd-dataset\/btc.csv\")\n\ndata67.index = range(100,2228,1)\ndata67.head()","e9c57268":"data67.tail()","b6e05c8e":"#hierarchical indexing\nimport pandas as pd\n\ndata27 = pd.read_csv(\"\/kaggle\/input\/btcusd-dataset\/btc.csv\")\ndata27.head()","c0134806":"data28 = data27.drop(columns='Date')","13fed2cb":"data28 = data28.set_index(['High','Low'])","d08cc51d":"data28.head(100)","61d9fe82":"#pivoting dataframes\n\ndic4 = {\"GENDER\": [\"MALE\" , \"FEMALE\"],\n        \"NAME\": [\"SERKAN\",\"BERNA\"],\n        \"AGE\": [19,22]}\n\ndata101 = pd.DataFrame(dic4)\n\ndata101","7f8acb26":"#pivoting\n\ndata101.pivot(index='NAME',columns='GENDER',values='AGE')","0bb037a3":"#stacking and unstacking dataframe\n\ndata100 = data101.set_index([\"NAME\",\"AGE\"])\ndata100","789e6f5d":"data100.unstack(level=0)","198545a4":"df4 = data100.swaplevel(0,1)\ndf4","6780642a":"#MELTING DATA FRAMES\n\ndata100","a9d6e14b":"<a id=\"1\"><\/a> <br>\n# 4. WHILE FOR LOOPS\n\u00d6devimin bu k\u0131sm\u0131nda while ve for \u00fczerine \u00e7al\u0131\u015fmalar yap\u0131lm\u0131\u015ft\u0131r.","81066fe2":"<a id=\"1\"><\/a> <br>\n# 3. PANDAS\n\u00d6devimin bu k\u0131sm\u0131nda pandas \u00fczerine \u00e7al\u0131\u015fmalar yap\u0131lm\u0131\u015ft\u0131r.","a55bcd0c":"<a id=\"1\"><\/a> <br>\n# 2. DICTIONARY\n\u00d6devimin bu k\u0131sm\u0131nda dictionary \u00fczerine \u00e7al\u0131\u015fmalar yap\u0131lm\u0131\u015ft\u0131r.","e27fa548":"<a id=\"1\"><\/a> <br>\n# 1. MATPLOTLIB\n\u00d6devimin bu k\u0131sm\u0131nda mathplotlib \u00fczerine \u00e7al\u0131\u015fmalar yap\u0131lm\u0131\u015ft\u0131r.","cdbab30a":"EXPLORATORY DATA ANALYSIS\n\nvalue_counts(): Frequency counts\noutliers: the value that is considerably higher or lower from rest of the data\n\nLets say value at 75% is Q3 and value at 25% is Q1.\nOutlier are smaller than Q1 - 1.5(Q3-Q1) and bigger than Q3 + 1.5(Q3-Q1). (Q3-Q1) = IQR\nWe will use describe() method. Describe method includes:\ncount: number of entries\nmean: average of entries\nstd: standart deviation\nmin: minimum entry\n25%: first quantile\n50%: median or second quantile\n75%: third quantile\nmax: maximum entry\n\nWhat is quantile?\n\n1,4,5,6,8,9,11,12,13,14,15,16,17\nThe median is the number that is in middle of the sequence. In this case it would be 11.\n\nThe lower quartile is the median in between the smallest number and the median i.e. in between 1 and 11, which is 6.\n\nThe upper quartile, you find the median between the median and the largest number i.e. between 11 and 17, which will be 14 according to the question above."}}