{"cell_type":{"c72f3baf":"code","53683c2b":"code","4df1676b":"code","f9e96f8a":"code","c8b97f48":"code","2a82588e":"code","283338d6":"code","bbea21e2":"code","aeaec030":"code","4e51e67c":"code","3c434420":"code","9de2761c":"code","93699e16":"code","e06d5aab":"code","8734ca5c":"code","dadcf88c":"code","17660f61":"code","751a0d03":"code","64e1fa5c":"code","6ce55262":"code","a2f6c5e7":"code","e6a287bb":"code","f9d97c49":"code","835ca23b":"code","6dff8775":"code","1d489b71":"code","5d736136":"code","94d6833c":"code","85d8eef6":"code","011a367c":"code","b8aa2464":"markdown","f8adb066":"markdown","befd352b":"markdown","ddf8277d":"markdown"},"source":{"c72f3baf":"squares = [1, 4, 9, 16, 25] # Index starts from 0 (index 0 refers to the element 1, index 2 refers to the element 4 and so on)\nsquares","53683c2b":"print(squares[0])  # indexing returns the item\n\nprint(squares[-1]) # [-1] refers to the element from the last index, so the output will be 25\n\nprint(squares[:4]) # While slicing, the last index (4 here) value gets excluded and rest gets printed.\n\nprint(squares[-3:])  # slicing returns a new list.","4df1676b":"squares[:]   # Prints the whole list","f9e96f8a":"squares + [1, 2, 10, 4, 75, 'hi']     # '+' operator adds the elements of the new list to the existing list","c8b97f48":"new_list = [1, 8, 27, 65, 125] \n\nnew_list[3] = 64  # Replacing a specific value by the index\nnew_list","2a82588e":"new_list.append(12)  # .append() adds an element in the last position to the existing list.\nnew_list","283338d6":"new_list.pop()   # .pop() removes the last element present in the list\nnew_list","bbea21e2":"letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\nletters","aeaec030":"# replace some values\nletters[2:5] = ['C', 'D', 'E']  # Replaces the values at 2nd, 3rd and 4th indices\nletters","4e51e67c":"# now remove them\nletters[2:5] = []     # An empty list removes the elements present at the specified indices\nletters","3c434420":"# clear the list by replacing all the elements with an empty list\nletters[:] = []\nletters","9de2761c":"alphabets = ['a', 'b', 'c', 'd']\nlen(alphabets)   # Gives the number of elements present in a list.","93699e16":"a = ['a', 'b', 'c']    # List1\nn = [1, 2, 3]          # List2\nx = [a, n]             # This line makes a list of lists.\nx","e06d5aab":"x[0]    # It selects the list present in 0th index.","8734ca5c":"x[0][1] # It selects the value present in 1st index in 0th list.","dadcf88c":"# The planets sorted in alphabetical order\nplanets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\nsorted(planets)   # Sorts the list elements alphabetically","17660f61":"planets.index('Earth')    # .index() gives the index in which the specified value is present.","751a0d03":"z = [2, 3, 5, 7]\nsum(z)    # Adds all the elements present in the list","64e1fa5c":"max(z)  # Gives the max value present in the list","6ce55262":"\"Earth\" in planets    # It checks if 'Earth' is oresent in list planets or not.","a2f6c5e7":"'Pluto' in planets   # It checks if 'Pluto' is present in list planets or not.","e6a287bb":"list_comp = [i for i in range(15)]    # Syntax : ['output' for 'element' in list\/range]\nlist_comp","f9d97c49":"[i for i in list_comp]     # Gives the element present in list_comp","835ca23b":"[i for i in list_comp if i%2==0]   # Syntax : ['output' for 'element' in list\/range if 'condition']   \n# (If else part is there it would be different)","6dff8775":"[i if i%2==0 else 'X' for i in list_comp]   # Syntax : ['output' 'condition' for 'element' in list\/range]","1d489b71":"k = [1,2,4,3,5,80]\n\n[1 for i in k]   # Syntax : ['output' for 'element' in list\/range]","5d736136":"[i+1 for i in k]","94d6833c":"greets = ['Hi', 'hellO' , 'byE']\n\n[greet+' sipu' for greet in greets]   # We can add a specific string to all the elements.","85d8eef6":"[greet.upper() for greet in greets]  # Converts to upper","011a367c":"[greet.lower() for greet in greets]  # Converts to lower","b8aa2464":"##### Reference:  https:\/\/docs.python.org\/3\/tutorial\/introduction.html#lists        ","f8adb066":"### -------------------------------------------Thanks------------------------------------------------ ###","befd352b":"## List :\n\n### Properties of list:\n- #### 1. A Python list is an ordered and changeable collection of data objects. \n\n- #### 2. Unlike an array, which can contain objects of a single type, a list can contain a mixture of objects. \n\n- #### 3. A list can contain objects of any data type, including another list.\n\n- #### 4. List elements can be accessed by index.\n\n- #### 5. Lists are mutable.\n\n- #### 6. Lists are dynamic.","ddf8277d":"## List comprehension :"}}