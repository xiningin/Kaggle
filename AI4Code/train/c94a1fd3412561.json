{"cell_type":{"ab51ceeb":"code","332713c1":"code","48ab6a97":"code","d53b4fb6":"code","63b7e534":"code","a208f1bc":"code","cbcc0c26":"code","1d60def2":"code","7a1b11d1":"code","1d3ab35c":"markdown"},"source":{"ab51ceeb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","332713c1":"# import numba\n\n# @numba.jit\ndef reduce_memory_usage(df, verbose=True):\n    numerics = [\"int8\", \"int16\", \"int32\", \"int64\", \"float16\", \"float32\", \"float64\"]\n    start_mem = df.memory_usage().sum() \/ 1024 ** 2\n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == \"int\":\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            else:\n                if (\n                    c_min > np.finfo(np.float16).min\n                    and c_max < np.finfo(np.float16).max\n                ):\n                    df[col] = df[col].astype(np.float16)\n                elif (\n                    c_min > np.finfo(np.float32).min\n                    and c_max < np.finfo(np.float32).max\n                ):\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n    end_mem = df.memory_usage().sum() \/ 1024 ** 2\n    if verbose:\n        print(\n            \"Mem. usage decreased to {:.2f} Mb ({:.1f}% reduction)\".format(\n                end_mem, 100 * (start_mem - end_mem) \/ start_mem\n            )\n        )\n    return df","48ab6a97":"%%time\n# Reading the  csv files with pandas.read_csv take 8.78 s.\ntrain_0 = pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/test.csv\").set_index(\"Id\")\ntest_0 = pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/test.csv\").set_index(\"Id\")\nsample_0 = pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/sample_submission.csv').set_index(\"Id\")\n","d53b4fb6":"\nimport datatable as dt  # pip install datatable","63b7e534":"%%time\n# Reading csv files with datatable takes 3.47 s\n\ntrain = dt.fread(\"..\/input\/tabular-playground-series-dec-2021\/train.csv\").to_pandas().set_index(\"Id\")\ntest = dt.fread(\"..\/input\/tabular-playground-series-dec-2021\/test.csv\").to_pandas().set_index(\"Id\")\nsample = dt.fread('..\/input\/tabular-playground-series-dec-2021\/sample_submission.csv').to_pandas().set_index(\"Id\")\n\nTARGET = \"Cover_Type\"","a208f1bc":"# Creating Feather file:\ntrain.reset_index().to_feather(\"Dec21TP_train.feather\");\ntest.reset_index().to_feather(\"Dec21TP_test.feather\");\nsample.reset_index().to_feather(\"Dec21TP_sample.feather\");\n\n# To read these files just write\n\n# train = pd.read_feather('..\/input\/nov21tp-feathercreator\/Nov21TP_train.feather')\n\n# test = pd.read_feather('..\/input\/nov21tp-feathercreator\/Nov21TP_test.feather')\n# This operation will take 4 times faster than ","cbcc0c26":"%%time\n# Reading the feather files and creating the same dataset takes 0.539 s!\n\ntrain_2 = pd.read_feather('..\/working\/Dec21TP_train.feather')\ntest_2 = pd.read_feather('..\/working\/Dec21TP_test.feather')\nsample_2 = pd.read_feather('..\/working\/Dec21TP_sample.feather')\n# This operation will take 8 times faster than with datatable files: Just use this file as input of your work","1d60def2":"from sklearn.preprocessing import StandardScaler, MinMaxScaler, RobustScaler\nss = StandardScaler()\nmms = MinMaxScaler()\nrs = RobustScaler()\ntarget = train[TARGET]\ntrain = train.drop(columns=TARGET)","7a1b11d1":"DATASET = \"Dec21\"\n\ntransforms = {\"StandardScaler\": ss,\n              \"MinMaxScalermms\": mms, \n              \"RobustScaler\":rs}\nfor name, transform_ in transforms.items():\n    print(f\"Fitting {name}\")\n    t_train = pd.DataFrame(transform_.fit_transform(train), columns=train.columns, index = train.index)\n    print(\"train done\")\n    t_test = pd.DataFrame(transform_.transform(test), columns=test.columns, index = test.index)\n    print(\"test done\")\n    t_train[\"target\"] = target\n    train_file_name = DATASET + \"_train_\" + name + \".feather\"\n    test_file_name = DATASET + \"_test_\" + name + \".feather\"\n    t_train.reset_index().to_feather(train_file_name);\n    print(f\"{train_file_name} created\")\n    t_test.reset_index().to_feather(test_file_name);\n    print(f\"{test_file_name} created\")","1d3ab35c":"# Feather File Format In Python | Less Space, More Speed !\n\".feather\" file format is an optimized binary format, really faster to be read by python.\n\nUsing this file as input you can download the whole dataset 8 time faster than using \"datatable\" and almoust 20 time faster than the commonly used read_csv() method."}}