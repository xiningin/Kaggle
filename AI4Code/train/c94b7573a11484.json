{"cell_type":{"1209071a":"code","0b29e5ec":"code","6f03bd65":"code","5324fdd8":"code","802880d7":"code","33f63c25":"code","e8f2aaee":"code","bf68219c":"code","599b9c6f":"code","00cc3aa2":"code","3b3dbedd":"code","b587a4ce":"code","6efa3ed1":"code","1a6e31d6":"code","b2b06b34":"code","a209be30":"code","3ecd57b9":"markdown","a14d59ac":"markdown","e25fa587":"markdown","f0fb62bf":"markdown","0ea9e55d":"markdown","cb99d6c7":"markdown","556e737c":"markdown","24ffe518":"markdown"},"source":{"1209071a":"# Familiar imports\nimport warnings\nimport numpy as np\nimport pandas as pd\nimport os\nfrom tqdm.notebook import tqdm\n\n# Mute warnings\nwarnings.filterwarnings('ignore')\npd.set_option('max_columns', 300)","0b29e5ec":"# Load the training data\nKaggle = True\nif Kaggle:\n    path = r'..\/input\/30-days-of-ml\/'\nelse:\n    path = r'..\/data\/'\n\ntrain = pd.read_csv(os.path.join(path, 'train.csv'), index_col=0)\ntest = pd.read_csv(os.path.join(path, 'test.csv'), index_col=0)\n\n# Preview the data\ntrain.head()","6f03bd65":"# Separate target from features\nfeatures = train.drop(['target'], axis=1)\ntarget = train['target']\nfeatures.describe()","5324fdd8":"features.describe(include=['object'])","802880d7":"from scipy.stats import ks_2samp\n\nfrom sklearn.model_selection import StratifiedKFold, KFold","33f63c25":"import matplotlib.pyplot as plt\n%matplotlib inline\n%config InlineBackend.figure_format = 'svg'\n\nimport warnings\nwarnings.filterwarnings('ignore')","e8f2aaee":"from sklearn.model_selection import StratifiedKFold\nimport pandas as pd\n\n\nclass ContinuousTargetStratifiedKFold:\n    \"\"\"\n    \u5c06\u8fde\u7eed\u53d8\u91cf\u7684\u6570\u636e\u4f7f\u7528StratifiedKFold\u8fdb\u884c\u8f93\u51fa\n    Obtain stratified cross validation splits from the continuous targets\n    -------\n    Parameters\n    -------\n    - n_splits(int): Number of folds(folds\u7684\u6570\u91cf)\n    - nbins(int): The criteria to bin by(\u5206\u6876\u6570, from pd.cut)\n    - shuffle(bool): Whether to shuffle(\u662f\u5426\u6253\u4e71)\n    - random_state(int): \u6253\u4e71\u7684\u968f\u673a\u6570\u79cd\u5b50\n    -------\n    Examples\n    -------\n    >>> cskf = ContinuousTargetStratifiedKFold(n_splits=n_s)\n    >>> for fold_no, (t, v) in enumerate(skf.split(target, target)):\n            pass\n    -------\n    Sources\n    -------\n    - [Continuous Target Stratification](https:\/\/www.kaggle.com\/tolgadincer\/continuous-target-stratification)\n    - [How to generate a custom cross-validation generator in scikit-learn?](https:\/\/stackoverflow.com\/questions\/30040597\/how-to-generate-a-custom-cross-validation-generator-in-scikit-learn\/39721727)\n    \"\"\"\n    def __init__(self, n_splits=5, nbins=100, shuffle=False,\n                 random_state=None):\n        self.skf = StratifiedKFold(n_splits=n_splits,\n                                   shuffle=shuffle,\n                                   random_state=random_state)\n        self.nbins = nbins\n        self.n_splits = n_splits\n\n    def split(self, X, y):\n        y = pd.cut(y, self.nbins, labels=False)\n        for train_index, test_index in self.skf.split(y, y):\n            yield train_index, test_index\n\n    def get_n_splits(self, X=None, y=None):\n        return self.n_splits\n","bf68219c":"def create_folds(df, n_s=5, n_grp=None):\n    df['Fold'] = -1\n    \n    if n_grp is None:\n        skf = KFold(n_splits=n_s)\n    else:\n        skf = ContinuousTargetStratifiedKFold(n_splits=n_s)\n        \n    target = df.target\n    for fold_no, (t, v) in enumerate(skf.split(target, target)):\n        df.loc[v, 'Fold'] = fold_no\n    return df","599b9c6f":"plt.hist(train['target'], bins=200, density=True)\nplt.xlabel('Target')\nplt.ylabel('Frequency')\nplt.show()","00cc3aa2":"train.reset_index(drop=True, inplace=True)","3b3dbedd":"train = create_folds(train, n_s=5, n_grp=1000)\n\nfig, axs = plt.subplots(1, 5, sharex=True, sharey=True, figsize=(10,4))\nfor i, ax in enumerate(axs):\n    ax.hist(train[train.Fold == i]['target'], bins=100, density=True, label=f'Fold-{i}')\n    if i == 0:\n        ax.set_ylabel('Frequency')\n    if i == 2:\n        ax.set_xlabel(\"Target\")\n    ax.legend(frameon=False, handlelength=0)\nplt.tight_layout()\nplt.show()","b587a4ce":"for fold_i in np.sort(train.Fold.unique()):\n    for fold_j in np.sort(train.Fold.unique()):\n        print(f'Fold {fold_i} vs {fold_j}:', ks_2samp(train.loc[train.Fold==fold_i,'target'], train.loc[train.Fold==fold_j,'target']))","6efa3ed1":"for fold_j in np.sort(train.Fold.unique()):\n        print(f'Fold trian vs {fold_j}:', ks_2samp(train.loc[:, 'target'], train.loc[train.Fold==fold_j,'target']))","1a6e31d6":"train = create_folds(train, n_s=5, n_grp=None)\n\nfig, axs = plt.subplots(1, 5, sharex=True, sharey=True, figsize=(10,4))\nfor i, ax in enumerate(axs):\n    ax.hist(train[train.Fold == i]['target'], bins=100, density=True, label=f'Fold-{i}')\n    if i == 0:\n        ax.set_ylabel('Frequency')\n    if i == 2:\n        ax.set_xlabel(\"Target\")\n    ax.legend(frameon=False, handlelength=0)\nplt.tight_layout()\nplt.show()","b2b06b34":"for fold_i in np.sort(train.Fold.unique()):\n    for fold_j in np.sort(train.Fold.unique()):\n        print(f'Fold {fold_i} vs {fold_j}:', ks_2samp(train.loc[train.Fold==fold_i,'target'], train.loc[train.Fold==fold_j,'target']))","a209be30":"for fold_j in np.sort(train.Fold.unique()):\n        print(f'Fold trian vs {fold_j}:', ks_2samp(train.loc[:, 'target'], train.loc[train.Fold==fold_j,'target']))","3ecd57b9":"|Type|KFold1|KFold2|KFold3|KFold4|KFold5|CV|CV_STD|LB|\n|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|\n|KFold|0.721889|0.718128|0.716234|0.716236|0.715987|0.717695|**0.002234**|0.71894|\n|StratifiedKFold|0.716923|0.716750|0.717882|0.718152|0.719225|0.717787|**0.000898**|0.71896|","a14d59ac":"# Load Data","e25fa587":"Mainly from\n- [\nContinuous Target Stratification](https:\/\/www.kaggle.com\/tolgadincer\/continuous-target-stratification)\n- [How to generate a custom cross-validation generator in scikit-learn?](https:\/\/stackoverflow.com\/questions\/30040597\/how-to-generate-a-custom-cross-validation-generator-in-scikit-learn\/39721727)","f0fb62bf":"# Testing\nReplacing only the CV scheme, we can see that the CV STD using scheme **StratifiedKFold** is lower","0ea9e55d":"# KFold","cb99d6c7":"# Continuous Target StratifiedKFold","556e737c":"# Continuous Target Stratification","24ffe518":"We can compare any two folds with the Kolmogorov-Smirnov test to examine if the folds come from the same distribution. Indeed, the low KS (~0.001) and high probability (1.0) values confirm that all folds come from the same distribution."}}