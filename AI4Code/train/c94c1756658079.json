{"cell_type":{"ff734e35":"code","a899f6d6":"code","10b09ccc":"code","82430aa1":"code","8f68f6da":"code","bb756154":"code","769fc0bd":"code","39f6c775":"code","a4e0b857":"code","56dc2fb6":"code","9da09f0a":"code","031cbb2b":"code","2bd28519":"code","65ece5f2":"code","e65e5b05":"code","a5547035":"code","04d6677d":"code","037acac8":"code","a83396d3":"code","043568e3":"code","2216279b":"code","a7ba26bb":"code","1248753a":"code","0076d36e":"code","b5c85700":"code","04cae610":"code","6bbca535":"code","9574c3de":"code","134df8e3":"code","e6632393":"code","1272ffc2":"code","9a792b98":"code","2400ec3e":"code","739e3bc7":"markdown","ea8a1248":"markdown"},"source":{"ff734e35":"########################################################\n#Importing Libraries and Plugins                       # \n########################################################\nimport pickle\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, \\\n    roc_auc_score, confusion_matrix, classification_report, plot_roc_curve\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom catboost import CatBoostClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.svm import SVC\nimport warnings\nwarnings.simplefilter(action=\"ignore\")\n\npd.set_option('display.max_columns', None)\npd.set_option('display.width', 170)\npd.set_option('display.max_rows', 20)\npd.set_option('display.float_format', lambda x: '%.3f' % x)","a899f6d6":"#########################################\n#Loading the Data Set                   #\n#########################################\ndef dataset():\n    df = pd.read_csv('..\/input\/diabets\/diabetes.csv')\n    return df\n\ndf = dataset()","10b09ccc":"#first 5 observations\ndf.head()","82430aa1":"#missing observations\ndf.isnull().sum()\n    ","8f68f6da":"#row and column\ndf.shape","bb756154":"####################################################\n#                      EDA                         #\n####################################################","769fc0bd":"def dat_val(df,cat_th=10,car_th=20):\n    cat_cols = [col for col in df.columns if df[col].dtypes ==\"O\"]\n    num_but_cat = [col for col in df.columns if df[col].nunique() < cat_th and\n                  df[col].dtypes != \"O\"]\n    cat_but_car = [col for col in df.columns if df[col].nunique() > car_th and\n                  df[col].dtypes == \"O\"]\n    cat_cols = cat_cols + num_but_cat\n    cat_cols = [col for col in cat_cols if col not in cat_but_car]\n    num_cols = [col for col in df.columns if df[col].dtypes != \"O\"]\n    num_cols = [col for col in num_cols if col not in num_but_cat]\n    \n    \n    print(f\"Observation: {df.shape[0]}\")\n    print(f\"Variables: {df.shape[1]}\")\n    print(f'cat_cols: {len(cat_cols)}')\n    print(f'num_cols: {len(num_cols)}')\n    print(f'cat_but_car: {len(cat_but_car)}')\n    print(f'num_but_cat: {len(num_but_cat)}')\n    \n    \n    return cat_cols, cat_but_car, num_cols","39f6c775":"cat_cols, cat_but_car ,num_cols= dat_val(df)","a4e0b857":"print(num_cols)","56dc2fb6":"for col in num_cols:\n    plt.title('Histogram of numeric variables')\n    plt.xlabel('Value')\n    plt.ylabel(print(col))\n    df[col].hist()\n    plt.show() ","9da09f0a":"###################################\n#Analysis of Categorical Variables#\n###################################\n\n\ndef categorical_analysis(df, col, plot=True):\n    print(pd.DataFrame({col: df[col].value_counts(),\n                       \"Ratio\": 100*df[col].value_counts()\/len(df)}))\n    \n    if plot:\n        sns.countplot(x=df[col], data=df)\n        plt.show()\n\ncategorical_analysis(df, col, True)","031cbb2b":"df.corr()","2bd28519":"# Correlation Matrix\nf, ax = plt.subplots(figsize=[20, 15])\nsns.heatmap(df.corr(), annot=True, fmt=\".2f\", ax=ax, cmap=\"magma\")\nax.set_title(\"Correlation Matrix\", fontsize=20)\nplt.show()","65ece5f2":"# Distribution of Dependent Variable\nsns.countplot('Outcome', data=df)\nplt.show()","e65e5b05":"list_num = []\nfor col in df.columns:\n    if df[col].dtypes != 'O' and col not in [\"Outcome\"]:\n        list_num.append(col)\n\n#Outliers boxplot plot observed\ndef plot_outliers(df):\n    for col in df.columns:\n       if col in list_num:\n                sns.boxplot(x=df[col])\n                plt.title(\"BoxPlot Graphic Display\")\n                plt.show()\nplot_outliers(df)\n","a5547035":"#Target Analysis\ndef target_summary_with_num(dataframe, target, numerical_col):\n\n     print(dataframe.groupby(target).agg({numerical_col: \"mean\"}), end=\"\\n\\n\\n\")\n\nfor col in num_cols:\n    target_summary_with_num(df, \"Outcome\", col)","04d6677d":"#examined the breakdown chart to find the threshold value\nclf = LocalOutlierFactor(n_neighbors = 20, contamination = 0.1)\nclf.fit_predict(df)\ndf_scores = clf.negative_outlier_factor_\nscores = pd.DataFrame(np.sort(df_scores))\nscores.plot(stacked=True, xlim=[0, 20], style='.-')\nplt.show()\n","037acac8":"esik_deger = np.sort(df_scores)[5] \ndf[df_scores < esik_deger] #we have selected selection outliers based on threshold value\ndf[df_scores < esik_deger].shape \n","a83396d3":"df[df_scores < esik_deger].index","043568e3":"df.shape","2216279b":"df = df.drop(axis=0, labels=df[df_scores < esik_deger].index)\ndf.head()","a7ba26bb":"df.shape","1248753a":"for col in [\"Glucose\", \"BloodPressure\", \"SkinThickness\", \"Insulin\", \"BMI\"]:\n    df[col].replace({0: np.nan},inplace=True)\ndf.dropna(inplace=True)\n    ","0076d36e":"df.shape","b5c85700":"clf = LocalOutlierFactor(n_neighbors = 20, contamination = 0.1)\nclf.fit_predict(df)\ndf_scores = clf.negative_outlier_factor_\nscores = pd.DataFrame(np.sort(df_scores))\nscores.plot(stacked=True, xlim=[0, 20], style='.-')\nplt.show()\n\nesik_deger = np.sort(df_scores)[5] ##our threshold\ndf[df_scores < esik_deger] \ndf[df_scores < esik_deger].shape \ndf.describe().T\n\ndf[df_scores < esik_deger].index\n\ndf.drop(axis=0, labels=df[df_scores < esik_deger].index)\ndf = df.drop(axis=0, labels=df[df_scores < esik_deger].index)\ndf.head()","04cae610":" #person's relatives to have diabetes between 0-1\ntransformer = MinMaxScaler()\ndf[\"DiabetesPedigreeFunction\"] = transformer.fit_transform(df[[\"DiabetesPedigreeFunction\"]])\ndf.head()","6bbca535":"df[\"NEW_GLUCOSE\"] = pd.cut(x=df[\"Glucose\"], bins=[0, 140, 200, 300], labels=[\"Normal\", \"Prediabetes\", \"Diabetes\"])","9574c3de":"df['NEW_BMI'] = pd.cut(x=df['BMI'], bins=[0, 18.5, 24.9, 29.9, 100],\n                       labels=[\"Underweight\", \"Healthy\", \"Overweight\", \"Obese\"])","134df8e3":"df[\"New_Insulin_Category\"] = pd.cut(x=df[\"Insulin\"],\n                           bins=[0, 140, 200, df[\"Insulin\"].max()],\n                           labels=[\"Normal\", \"Hidden_diabetes\", \"Diabetes\"])\n\ndf[\"New_Insulin_Category\"] = df[\"New_Insulin_Category\"].fillna(\"Normal\")\ndf = df.drop(\"Insulin\", axis=1)\ndf.head()","e6632393":"df = pd.get_dummies(df, drop_first=True)\ndf.head()","1272ffc2":"###########################\n#        MODEL\n############################\ny = df[\"Outcome\"]\nX = df.drop([\"Outcome\"], axis=1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=17)\n\ncart_model = DecisionTreeClassifier(random_state=17).fit(X_train, y_train)\n# train error\ny_pred = cart_model.predict(X_train) \ny_prob = cart_model.predict_proba(X_train)[:, 1]\nprint(classification_report(y_train, y_pred))\nroc_auc_score(y_train, y_prob) #1.0 overfit\nprint(\"#########################################################################\")\n# test error\ny_pred = cart_model.predict(X_test)\ny_prob = cart_model.predict_proba(X_test)[:, 1]\nprint(classification_report(y_test, y_pred))\nroc_auc_score(y_test, y_prob) ","9a792b98":"cart_model = DecisionTreeClassifier(random_state=17)\n\ncart_params = {'max_depth': range(1, 11),\n               \"min_samples_split\": [2, 3, 4]}\n\n\ncart_cv = GridSearchCV(cart_model, cart_params, cv=5, n_jobs=-1, verbose=True)\ncart_cv.fit(X_train, y_train) ","2400ec3e":"cart_tuned = DecisionTreeClassifier(**cart_cv.best_params_).fit(X_train, y_train)\n\n# train hatas\u0131\ny_pred = cart_tuned.predict(X_train)\ny_prob = cart_tuned.predict_proba(X_train)[:, 1]\nprint(classification_report(y_train, y_pred))\nroc_auc_score(y_train, y_prob)\n\n\n#test  hatas\u0131\ny_pred = cart_tuned.predict(X_test)\ny_prob = cart_tuned.predict_proba(X_test)[:, 1]\nprint(classification_report(y_test, y_pred))\nroc_auc_score(y_test, y_prob)\n\n","739e3bc7":"<h2>Variables<\/h2>\n<ul>\n<li>Pregnancies: Number of pregnancies <\/li>\n<li>Glucose: Glucose <\/li>\n<li>BloodPressure: Blood pressure <\/li>\n<li>SkinThickness: Skin Thickness<\/li>\n<li>Insulin: Insulin <\/li>\n<li>BMI: Body mass index. <\/li>\n<li>DiabetesPedigreeFunction: A function that calculates our probability of having diabetes based on our ancestry <\/li>\n<li>Age: Age (years) <\/li>\n<li>Outcome: Information whether the person has diabetes or not. Have the disease (1) or not (0) <\/li>\n\n<\/ul>","ea8a1248":"<center>\n<h1 style=\"background-color:orange; color:white\" >Diabetes Classification EDA-ML<\/h1>\n\n<center><img\nsrc=\"https:\/\/res.cloudinary.com\/grohealth\/image\/upload\/f_auto,fl_lossy,q_auto\/v1581692228\/DCUK\/Content\/iStock-9217203841.jpg\" style=\"width:90%;height:40%;\">\n<\/center>\n    \n<br>    \n    \n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n  <h3 class=\"list-group-item list-group-item-action active\" style=\"background-color:orange; color:white\" data-\n    toggle=\"list\"  role=\"tab\" aria-controls=\"home\">Content<\/h3>  \n<ul>\n        <li>EDA<\/li>\n        <li>Modelling<\/li>\n    <\/ul>\n"}}