{"cell_type":{"08751faf":"code","a97d05f0":"code","b1d99fba":"markdown","b855c106":"markdown","79cbf261":"markdown"},"source":{"08751faf":"y_ini = 0.01 #initial condition in the range (0,1)\nx_min, x_max = [3.5, 4] #maximum range [0, 4]\ny_min, y_max = [0, 1]\niters = 1000 #number of iterations, higher is more accurate and more computationally expensive","a97d05f0":"import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\n%matplotlib inline\n\nlast = round(0.8*iters)\nn_pixels = 3000\nZx = np.linspace(x_min, x_max, n_pixels)\ny = np.repeat(y_ini, n_pixels)\nfor i in range(iters):\n    y = Zx*y*(1-y)\n    if i >= (iters-last): \n        if i == (iters-last): \n            D = np.array([Zx, y]).T\n        else: D = np.concatenate([D,np.array([Zx, y]).T], axis = 0)            \nX = D[:,0]\nY = D[:,1]\n\nfig, ax = plt.subplots(figsize=(10, 10), \n                       dpi=300, \n                       facecolor='steelblue', \n                       edgecolor='none'\n                      )\nplt.axis('off')\nax.set_xlim(x_min, x_max)\nax.set_ylim(y_min, y_max)\nplt.gca().set_axis_off()\nplt.subplots_adjust(top = 1, bottom = 0, right = 1, left = 0, hspace = 0, wspace = 0)\nplt.margins(0,0)\nplt.gca().xaxis.set_major_locator(plt.NullLocator())\nplt.gca().yaxis.set_major_locator(plt.NullLocator())\n\nplt.scatter(X,Y\n            ,s = (3*72\/n_pixels)**2\n            ,alpha = 0.8\n            ,c = 'darkred'\n            ,marker = '.'\n           )","b1d99fba":"# Tunable parameters ","b855c106":"# Generation of the plot","79cbf261":"This is a simple notebook showing the capabilities of matplotlib for mathematical art applications. It will generate the bifurcation set for the logistic map. See [this link](https:\/\/en.wikipedia.org\/wiki\/Logistic_map) for more information on the underlying mathematics."}}