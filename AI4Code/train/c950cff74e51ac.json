{"cell_type":{"3195d3d0":"code","bdbc2615":"code","e1cd91e9":"code","051f04cf":"code","b0dd311f":"code","eb12fdb4":"code","e9d14bd9":"code","bc6dde7d":"code","a6441bad":"code","4971a644":"code","61e3fadb":"code","8a221d9c":"code","31be0224":"code","6ee42353":"code","078fd376":"code","91e1903a":"code","6cd48ed5":"code","fb769e96":"code","6999b95f":"code","2080516f":"code","e0b8da8d":"code","71b7e413":"code","928613e2":"code","f9159080":"code","aaabd948":"code","a43496a1":"markdown","f109c697":"markdown","924a1225":"markdown","df68fc15":"markdown","9acb93bd":"markdown","85cb05f0":"markdown","e3137507":"markdown","17a7f925":"markdown","8d7854b7":"markdown","ed728ba1":"markdown","e4fd6277":"markdown","7f9b04d8":"markdown","72f2d547":"markdown"},"source":{"3195d3d0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('seaborn')\n%matplotlib inline\npd.options.display.float_format = '{:.2f}'.format\nfrom matplotlib.pyplot import figure\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bdbc2615":"name = '\/kaggle\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv'\nairbnb = pd.read_csv(name)","e1cd91e9":"airbnb.info()","051f04cf":"airbnb.describe()","b0dd311f":"airbnb['host_id'] = airbnb['host_id'].astype(str)\nairbnb['id'] = airbnb['id'].astype(str)\nairbnb[\"last_review\"] = pd.to_datetime(airbnb[\"last_review\"])","eb12fdb4":"airbnb.info()","e9d14bd9":"#checking the missing values\nairbnb.isna().sum()","bc6dde7d":"#drop missing value of name and host_name\nairbnb.dropna(axis=0, how='any', subset=['name','host_name'], inplace=True)","a6441bad":"#replace last_review by most common date\nairbnb['last_review'].fillna(airbnb['last_review'].mode()[0], inplace=True)","4971a644":"#Fill the missing value in reviews_per_month with the mean\nairbnb['reviews_per_month'].fillna(airbnb['reviews_per_month'].mean(), inplace=True)","61e3fadb":"#checking the missing values again\nairbnb.isna().sum()","8a221d9c":"#create a list of the conditions\nconditions = [\n        (airbnb['price'] < 50),\n        (airbnb['price'] >= 50) & (airbnb['price'] <= 99),\n        (airbnb['price'] >= 100)\n        ]\n\n# create a list of the values we want to assign for each condition\nvalues = ['Cheap','Medium','Expensive']\n\n# create a new column and use np.select to assign values to it using our lists as arguments\nairbnb['Price_Category'] = np.select(conditions, values)\nairbnb","31be0224":"sns.boxplot(data=airbnb, x = 'room_type', y = 'price')\nplt.show()","6ee42353":"#Remove the outlier\nQ1 = airbnb['price'].quantile(0.25)\nQ2 = airbnb['price'].quantile(0.5)\nQ3 = airbnb['price'].quantile(0.75)\nIQR = Q3 - Q1\nprint(Q1)\nprint(Q2)\nprint(Q3)\nprint(IQR)\nprint(Q3+1.5*IQR)\nprint(Q1-1.5*IQR)\nprint(airbnb['price'].min())\nprint(airbnb['price'].max())","078fd376":"airbnb_b = airbnb.loc[~((airbnb['price'] < (Q1-1.5*IQR))|(airbnb['price']>(Q3+1.5*IQR)))]\nairbnb_b","91e1903a":"figure(figsize=(10,6))\nsns.boxplot(data=airbnb_b, x = 'room_type', y = 'price')\nplt.show()","6cd48ed5":"airbnb.groupby(['room_type','neighbourhood_group'])['price'].agg(['mean'])","fb769e96":"figure(figsize=(10,6))\nsns.barplot(data=airbnb, x='room_type', y='price', hue = 'neighbourhood_group', ci=False)\nplt.show()","6999b95f":"sns.countplot(data=airbnb, x='room_type')\nplt.show()","2080516f":"airbnb.groupby(['room_type','neighbourhood_group'])['room_type'].agg(['count'])","e0b8da8d":"sns.countplot(data=airbnb, x='room_type', hue='neighbourhood_group')\nplt.show()","71b7e413":"df2 = airbnb.loc[:,['id','number_of_reviews']]\ndf2","928613e2":"df3 = df2.sort_values(by=[\"number_of_reviews\"], ascending=False)\ndf3","f9159080":"figure(figsize=(10,6))\nreviews = df3['number_of_reviews']\n\nplt.hist(reviews, color='#034c65', edgecolor='k', log=True)\n\nplt.title(\"Visitors' Place Concentration\")\nplt.xlabel(\"Number of Reviews\")\nplt.ylabel(\"Frequency\")\n\nplt.show()","aaabd948":"figure(figsize=(10,6))\nsns.heatmap(airbnb.corr(), cmap='crest', annot=True)\nplt.show()","a43496a1":"**Relationship of each numeric variable**","f109c697":"Each rooms rented in NYC mostly receives reviews around 0 - 50","924a1225":"From the analysis above, we conclude that there's still missing values for several variables and the last_review column is still classified as object, not date.\nThe host id is better to be classified as object than int","df68fc15":"**Price Distribution of Room Types**","9acb93bd":"Handling Missing Value","85cb05f0":"From the graph above, manhattan is the place where rent price is the most expensive","e3137507":"From the data above, room type which is most available in NYC is entire home, and most of it rented in Manhattan. Brooklyn is the neighbourhood where private room most rented.","17a7f925":"From the boxplot above we can conclude that Entire home\/apt is the most expensive compared to private room and shared room","8d7854b7":"**Average price of room types in each neighbourhood**","ed728ba1":"Make some category based on price\nless than 50 = Cheap\n50 - 99 = Medium\nmore than 99 = Expensive","e4fd6277":"**Frequency of AirBnB Reviews in NYC**","7f9b04d8":"**Availability of each room types in NYC**","72f2d547":"From correlation above, there are no (positive\/negative) high correlation between the columns."}}