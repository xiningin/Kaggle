{"cell_type":{"f7fbea56":"code","8b4fdf2a":"code","218f0e2b":"code","6c3d6c50":"code","2d3d4cb1":"code","c2f3e6fe":"code","49354f2e":"code","296fc859":"code","bb673409":"code","3d3b0db8":"code","aa8e824e":"code","e090b235":"code","d5e2a042":"code","dba7d9a4":"code","d0ba2301":"code","4f931b93":"code","14aecf02":"code","14082ad8":"code","d5c60293":"code","5f3c6f39":"code","ac9b5981":"code","9da88ca2":"code","4bd0d729":"code","7729467f":"code","20fad9bd":"code","e4a8fe64":"code","4394b5a4":"code","c572fdc2":"code","742aa2f6":"code","aee925a7":"code","aadad3b2":"markdown","c06e63c8":"markdown","77c07a78":"markdown","7fab9a5b":"markdown","3888e40b":"markdown","7c4c5c38":"markdown","9177e653":"markdown","793af28e":"markdown","77b631af":"markdown","db057fc7":"markdown","e6f71cc7":"markdown","514afc05":"markdown","c9516e54":"markdown","6223bb25":"markdown","a0692951":"markdown","46a34622":"markdown","ea762553":"markdown","250417e0":"markdown","69d7ef7e":"markdown","03e647f1":"markdown","fb808087":"markdown","485ba1dd":"markdown","cd4c40af":"markdown","d6917001":"markdown"},"source":{"f7fbea56":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8b4fdf2a":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nimport os\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib.image import imread\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Activation, Dropout, Flatten, Dense, Conv2D, MaxPooling2D\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom keras.utils.np_utils import to_categorical \nfrom keras.models import Sequential, load_model\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\nfrom keras.callbacks import EarlyStopping\nfrom tensorflow.keras.applications.inception_v3 import InceptionV3\nfrom tensorflow.keras import Model,layers\nfrom sklearn.metrics import classification_report,confusion_matrix\n\n","218f0e2b":"train_path = \"\/kaggle\/input\/brain-tumor-classification-mri\/Training\/\"\ntest_path=\"\/kaggle\/input\/brain-tumor-classification-mri\/Testing\/\"","6c3d6c50":"os.listdir(test_path)","2d3d4cb1":"os.listdir(train_path)","c2f3e6fe":"para_cell = \"..\/input\/brain-tumor-classification-mri\/Training\/pituitary_tumor\/p (102).jpg\"\npara_img= imread(para_cell)\nplt.imshow(para_img)","49354f2e":"para_cell1 = \"..\/input\/brain-tumor-classification-mri\/Training\/glioma_tumor\/gg (112).jpg\"\npara_img= imread(para_cell1)\nplt.imshow(para_img)","296fc859":"para_cell2 = \"..\/input\/brain-tumor-classification-mri\/Training\/no_tumor\/image (21).jpg\"\npara_img= imread(para_cell2)\nplt.imshow(para_img)","bb673409":"para_cell3 = \"..\/input\/brain-tumor-classification-mri\/Training\/meningioma_tumor\/m (125).jpg\"\npara_img= imread(para_cell3)\nplt.imshow(para_img)","3d3b0db8":"image_gen = ImageDataGenerator( ImageDataGenerator(\n        featurewise_center=False,  \n        samplewise_center=False, \n        rescale=1. \/ 255,\n        zca_whitening=False,  \n        rotation_range=0.9,\n        zoom_range = 0.9,\n        width_shift_range=0,  \n        height_shift_range=0,  \n        horizontal_flip=True,  \n        vertical_flip=False)  \n                              )","aa8e824e":"image_shape = (224,224,3)","e090b235":"image_gen.flow_from_directory(train_path)","d5e2a042":"image_gen.flow_from_directory(test_path)","dba7d9a4":"model = Sequential()\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (5,5),padding = 'Same', activation ='relu', input_shape = (224,224,3)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(filters = 128, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(filters = 128, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(filters = 128, kernel_size = (2,2),padding = 'Same', activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.2))\n\n\nmodel.add(Conv2D(filters = 256, kernel_size = (2,2),padding = 'Same', activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(1024, activation = \"relu\"))\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(4, activation = \"softmax\"))\n\noptimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999)\n\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])\n","d0ba2301":"model.summary()","4f931b93":"batch_size = 16","14aecf02":"train_image_gen = image_gen.flow_from_directory(train_path,\n                                               target_size=image_shape[:2],\n                                                color_mode='rgb',\n                                               batch_size=batch_size,\n                                               class_mode='categorical')","14082ad8":"test_image_gen = image_gen.flow_from_directory(test_path,\n                                               target_size=image_shape[:2],\n                                               color_mode='rgb',\n                                               batch_size=batch_size,\n                                               class_mode='categorical',shuffle=False)","d5c60293":"early_stop = EarlyStopping(monitor='val_loss',patience=10)","5f3c6f39":"history = model.fit_generator(train_image_gen,epochs=20,\n                              validation_data=test_image_gen,\n                              callbacks=[early_stop])","ac9b5981":"plt.plot(history.history[\"accuracy\"],c = \"red\")\nplt.plot(history.history[\"val_accuracy\"],c = \"black\")\nplt.title(\"Loss\")\nplt.ylabel(\"Loss\")\nplt.xlabel(\"Epochs\")\nplt.legend([\"train\", \"test\"])\nplt.rcParams[\"figure.figsize\"] = (6,6)\nplt.show()","9da88ca2":"model.evaluate_generator(test_image_gen)","4bd0d729":"model.save(\"model_brainTumor.h5\")\nclassifier = load_model('model_brainTumor.h5')","7729467f":"from tensorflow.keras.applications import ResNet50\n\npretrained_model=ResNet50( input_shape=(224,224,3),\n                                  include_top=False,\n                                  weights='imagenet'\n                                   )\n\nfor layer in pretrained_model.layers:\n     layer.trainable = False\n\npretrained_model.summary()","20fad9bd":"last_layer = pretrained_model.get_layer('conv5_block3_out')\nprint('last layer of rsnet50 : output shape: ', last_layer.output_shape)\nlast_output = last_layer.output\n\nx = layers.Flatten()(last_output)\nx = layers.Dense(1024, activation='relu')(x)\nx = layers.Dropout(0.2)(x)                  \nx = layers.Dense(4, activation='softmax')(x)\n\nmodel_resnet = Model(pretrained_model.input, x) ","e4a8fe64":"model_resnet.compile(optimizer = RMSprop(lr=0.0001), \n              loss = 'categorical_crossentropy', \n              metrics = ['acc'])","4394b5a4":"history = model_resnet.fit_generator(train_image_gen,epochs=20,\n                              validation_data=test_image_gen,)","c572fdc2":"plt.plot(history.history[\"acc\"],c = \"green\")\nplt.plot(history.history[\"val_acc\"],c = \"blue\")\nplt.axis([0, 20, 0, 1])\nplt.title(\"Accuracy\")\nplt.ylabel(\"Accuracy\")\nplt.xlabel(\"Epochs\")\nplt.legend([\"train\", \"test\"])\nplt.rcParams[\"figure.figsize\"] = (10,10)\nplt.show()","742aa2f6":"model_resnet.evaluate_generator(test_image_gen)","aee925a7":"model_resnet.save('Resnet')","aadad3b2":"Los tumores de cerebro son generalmente evaluados inicialmente mediante Resonancia Magnetica, y confirmados posteriormente con biopsia. A continuacion tratare de crear un prototipo de Modelo de Inteligencia Artificial, para poder clasificar diferentes tipos de tumores adecuadamente. Los datos que utilizo son de Kaggle, y estan conformados por multiples Resonancias Magneticas en T1 y T2, esta misma tiene 4 categorias. Las categorias estan conformadas por gliomas, meningiomas, tumores de hipofisis, y cerebros sin patologias. \n\nEn una primera parte utilizare una Red Neuronal Convolucional tipica para el modelo, en una segunda etapa voy a utilizar una tecnica que se esta popularizando, llamada TransferLearning. Una de las grandes limitaciones de la inteligencia artificial es el dificil acceso a una base de datos en buenas condiciones estructurales. La utilizacion de redes neuronales \"pre-entrenadas\", puede sortear este obstaculo y generalmente suele producir mejores resultados sobre todo en datasets de baja calidad o de baja cuantia. ","c06e63c8":"# Adenoma de hipofisis","77c07a78":"> # TransferLearning","7fab9a5b":"Autor: Gabriel Cerono","3888e40b":"Resnet50 es una arquitectura de Redes Convolucionales, con una estructura Residual, inspirada en las Celulas Piramidales de la corteza cerebral. Esta arquitectura utiliza conexiones en salto, es decir, ciertas nueronas no conectan con la capa siguiente, como lo harian en un modelo convencional sino que saltan 2 o 3 capas mas adelante. Este tipo de arquitectura le proporciona al modelo la capacidad de apilar un gran numeros de capas neuronales sin correr riesgo del famoso \"Vanishing Gradients\".","7c4c5c38":"# Programamos una Red Neuronal Convolucional. ","9177e653":"# Limitaciones","793af28e":"# Un Glioma","77b631af":"# Un Meningioma","db057fc7":"early_stop = EarlyStopping(monitor='val_loss',patience=2)","e6f71cc7":"# Como pudimos ver, la red neuronal tal vez no funciono tan bien como hubiesemos querido. Utilizaremos otra tecnica para ver si podemos mejorar los resultados. ","514afc05":"> Como pudimos ver, con unas simples lineas de codigo podemos brindar una elegante solucion a lo que podria ser una posible falta de personal especializado en reconocimiento de imagenes. Aunque un 80% de certeza, no es aceptable en el ambito medico, con un mayor numero de imagenes y de mayor caldiad podriamos aumentar la certeza del modelo.\nEsto no reemplazaria el rol del profesional especializado pero podria ser una herramienta util en el workflow, o para proporcionar conocimientos tecnico en areas rurales o sin acceso a este tipo de profesionales. \n\n","c9516e54":"# Hacemos un pre-procesamiento de las imagenes, y producimos artificialmente un aumento en el volumen de imagenes de entrenamiento, como resultado esto nos prosporcionara un modelo mas robusto.[](http:\/\/)","6223bb25":"Como podemos ver, el modelo tiene un 64% de Accuracy. Con 4 categorias (Con el mismo numero dei magenes en cada una), si eligieramos al azar tendriamos un 25% chances de acertar. Esto es bueno pero no lo suficiente. ","a0692951":"# Podemos guardar nuestro modelo en un simple archivo, y utilizarlo luego facilmente para clasificar tumores.","46a34622":"# Una Resonancia sin patologia","ea762553":"# Evaluemos que tambien le ha ido a nuestro modelo.","250417e0":"# Resnet50","69d7ef7e":"![](https:\/\/www.mayoclinic.org\/-\/media\/kcms\/gbs\/patient-consumer\/images\/2014\/10\/30\/15\/17\/mcdc7_brain_cancer-8col.jpg)","03e647f1":"# Utilizacion de Inteligencia Artificial para el reconocimiento de tumores cerebrales","fb808087":"TransferLearning, es una tecnica en la cual tomamos redes neuronales \"pre-entrenadas\" y las utilizamos en nuestro propio DataSet, en este caso, en las resonancias magneticas de tumores cerebrales. La tecnica consiste solamente en tomar las capas inferiores de la misma, que sirven para el reconocimiento de patrones generales, como linea y curvas, mientras que retiramos la capa de neuronas mas superficiales y que detectan patrones mas especificos, y lo reemplazamos por capas programadas por nosotros mismos. Esto reduce bastante el tiempo de entrenamiento y generalmente mejora el valor predictivo del modelo. ","485ba1dd":"# **Miremos algunas de las Resonancias Magneticas**\n\n","cd4c40af":"Checkeamos que tenemos bien las direcciones de nuestras Imagenes. ","d6917001":"**Como podemos ver, nuestro nuevo modelo tiene unas chances del casi 80% de predecir correctamente un tumor de craneo. Bastante superior al 64% del Modelo anterior, incluso con menor tiempo de entrenamiento. Esto podria demostrar a priori la superioridad del TransferLearning.**"}}