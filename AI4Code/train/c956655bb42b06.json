{"cell_type":{"5d1fbb73":"code","66e68e91":"code","59f02f6a":"code","26c0e98c":"code","46a48855":"code","31488e34":"code","c1d4642c":"code","63fc9aef":"code","b103b3fa":"code","1ff0a7ae":"code","c5b88179":"code","93098c66":"code","e3eafab6":"code","37a0131b":"code","272999bf":"code","ab5ba362":"code","f0b466e4":"code","8c54ad91":"code","906e277f":"code","ccf4479f":"code","95542476":"code","848a4df5":"code","7675082f":"code","aad1e01f":"code","c8e87fe3":"code","28853697":"code","07261b38":"code","acce18bf":"code","b00ef286":"code","32be68b8":"code","054b7a91":"code","79df0a62":"markdown","bb880d45":"markdown","07455eb0":"markdown","3989b0e1":"markdown","0946b47f":"markdown","d58119d8":"markdown","0e8e6779":"markdown","a738c1c7":"markdown","cba9d96e":"markdown","30e01d5e":"markdown","9cd3835a":"markdown","7758beb4":"markdown","6ca42418":"markdown","f846e9bf":"markdown","000de18e":"markdown","10e6ab84":"markdown"},"source":{"5d1fbb73":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid')\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","66e68e91":"train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n\ntest_PassengerId = test_df['PassengerId']","59f02f6a":"train_df.columns","26c0e98c":"train_df.head()","46a48855":"# shows numeric and statistic data related the dataframe.\n\ntrain_df.describe()","31488e34":"train_df.info()","c1d4642c":"def bar_plot(variable):\n    '''\n        input: variable ex: \"Sex\"\n        output: bar plot & value count\n    '''\n    # get feature\n    var = train_df[variable]\n    # count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    # visualize\n    plt.figure(figsize=(9, 3))\n    \n    plt.bar(varValue.index, varValue)\n    \n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel('Frequency')\n    \n    plt.title(variable)\n    \n    plt.show()\n    \n    print('{}: \\n {}'.format(variable, varValue))","63fc9aef":"categories1 = ['Survived', 'Sex', 'Pclass', 'Embarked', 'SibSp', 'Parch']\n\nfor category in categories1:\n    bar_plot(category)","b103b3fa":"categories2 = ['Cabin', 'Name', 'Ticket']\n\nfor category in categories2:\n    print(f'{train_df[category].value_counts()} \\n')","1ff0a7ae":"def hist_plot(variable):\n    plt.figure(figsize=(9, 3)) \n    plt.hist(train_df[variable], bins=50) # bins enable us to see as detailed.\n    plt.xlabel(variable)\n    plt.ylabel('Frequency')\n    plt.title(f'{variable} distribution with hist')\n    plt.show()","c5b88179":"numeric_variables = ['Fare', 'Age', 'PassengerId']\n\nfor variable in numeric_variables:\n    hist_plot(variable)","93098c66":"def compare_two_features(features, sort = None):\n    return train_df[features].groupby(features[0], as_index = False).mean().sort_values(by = features[1], ascending = False)","e3eafab6":"# Pclass - Survived\ncompare_two_features(['Pclass', 'Survived'])\n\n# When class level increases, survival rate will decrease.","37a0131b":"# Sex - Survived\ncompare_two_features(['Sex', 'Survived'])\n\n# Female people have higher change than male people.","272999bf":"# Sibsp - Survived\ncompare_two_features(['SibSp', 'Survived'])\n\n# If counts of siblings and apouses increase aboard, survival rate will decrease.","ab5ba362":"# Parch - Survived\ncompare_two_features(['SibSp', 'Survived'])\n\n# When parent or children counts increase aboard, survival rate will decrease.","f0b466e4":"# Pclass - Survived\ncompare_two_features(['Embarked', 'Survived'])\n\n# People who embarked from C have highest survival rate in these ports.","8c54ad91":"def detect_outliers(df, features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c], 25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c], 75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        smaller_ones_filter = (df[c] < Q1 - outlier_step)\n        higher_ones_filter = (df[c] > Q3 + outlier_step)\n        \n        outlier_list_col = df[(smaller_ones_filter | higher_ones_filter)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    # That shows how many people are outlier.\n    outlier_indices = Counter(outlier_indices)\n    \n    # Remove item if item has more outliers than one.\n    return list(i for i, v in outlier_indices.items() if v > 2)","906e277f":"outliers_of_train = detect_outliers(train_df, ['Age', 'SibSp', 'Parch', 'Fare'])\n\ntrain_df.loc[outliers_of_train]","ccf4479f":"# drop outliers\n\ntrain_df = train_df.drop(outliers_of_train, axis = 0).reset_index(drop = True)","95542476":"def has_missig_value(feature):\n    return train_df[train_df[feature].isnull()]","848a4df5":"train_df_len = len(train_df)\n\ntrain_df = pd.concat([train_df, test_df], axis = 0).reset_index(drop = True)","7675082f":"train_df.columns[train_df.isnull().any()]","aad1e01f":"train_df.isnull().sum()","c8e87fe3":"has_missig_value('Embarked')","28853697":"train_df.loc[(train_df['Fare'] < 80) & (train_df['Fare'] > 79) & (train_df['Pclass'] == 1)]","07261b38":"#\u00a0Show distribution of Fare by Embarked value\ntrain_df.boxplot(column = 'Fare', by = 'Embarked')\nplt.show()","acce18bf":"# fill NaN embarked rows with C\ntrain_df['Embarked'] = train_df['Embarked'].fillna('C')\n\n# check whether the embarked column has NaN value or not\nhas_missig_value('Embarked')","b00ef286":"has_missig_value('Fare')","32be68b8":"# find mean of rows that have Pclass 3\n\nmean_of_people_has_class = np.mean(train_df[train_df['Pclass'] == 3]['Fare'])\n\ntrain_df['Fare'] = train_df['Fare'].fillna(mean_of_people_has_class)","054b7a91":"has_missig_value('Fare')","79df0a62":"<a id = \"3\"> <\/a><br>\n\n# Univarite Variable Analysis\n* Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch.\n* Numerical Variable: Fare, age and passengerId","bb880d45":"<a id = '7'><\/a><br>\n# Outlier Detection","07455eb0":"#\u00a0Introduction\n\nThe shinking of Titanic is one of the most famous and bad crash in the history. In 1912, during its voyage, it shinked after colliding with an Iceberg. As a result of shinking of Titanic, 1502 out of 2224 passengers and crews died.\n\n<font color = 'green'>\nContent:\n\n1. [Load and Check Data](#1)\n2. [Variable Desciption](#2)\n    * [Univarite Variable Analysis](#3)\n        * [Categorical Variable](#4)\n        * [Numerical Variable](#5)\n3. [Basic Data Analysis](#6)\n4. [Outlier Detection](#7)\n5. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n\n\n    \n<\/font>\n\n","3989b0e1":"First quarter = Q1\nMedian = Q2\nThird quarter = Q3\n\nIQR = Q3 - Q1\n\nStep of outlier detection equals IOR x 1.5\nQ1 - step of outlier -> small outlier\nQ3 + step of outlier ->\u00a0high outlier\n","0946b47f":"<a id = \"1\"> <\/a><br>\n# Load And Check Data","d58119d8":"<a id ='6'><\/a><br>\n#\u00a0Basic Data Analysis\n\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived\n* Embarked - Survived","0e8e6779":"<a id = \"4\"> <\/a><br>\n\n## Categorical Variable","a738c1c7":"### Fare","cba9d96e":"<a id = \"5\"> <\/a><br>\n\n## Numerical Variable\n","30e01d5e":"<a id = '10'><\/a><br>\n##\u00a0Fill Missing Value\n* Embarked has two missing value\n* Fare has only one missing value","9cd3835a":"<a id = '8'><\/a><br>\n# Missing Value\nWe need to concat train and test dataframes to find missing values.\n* Find Missing Value\n* Fill Missing Value","7758beb4":"* float64(2) = Age and Fare\n* int64(5) = PassengerId, Survived, Pclass, SibSp and Parch\n* object(5) = Name, Sex, Ticket, Cabi and Embarked","6ca42418":"We choose C port because its median is near to 80 fare.","f846e9bf":"<a id = \"2\"> <\/a><br>\n# Variable Description\n\n1. PassengerId = unique id number to each passenger\n1. Survived = passenger survive (1) and died(0)\n1. Pclass = passenger class\n1. Name = passenger name\n1. Sex = gender of passenger\n1. Age = age of passenger\n1. SibSp = number of siblings\/spouses of passenger in the ship.\n1. Parch = number of parents\/childs of passenger in the ship.\n1. Ticket = number of ticket\n1. Fare = amount of money spent on ticket\n1. Cabin = cabin category\n1. Embarked = port where passenger embarked (C=Cherbourg, Q=Queenstown, S=Southampton)","000de18e":"### Embarked","10e6ab84":"<a id = '9'><\/a><br>\n##\u00a0Find Missing Value"}}