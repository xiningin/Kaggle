{"cell_type":{"8033febb":"code","724aa108":"code","8f60122f":"code","a415d0c4":"code","dd711949":"code","93610a4e":"code","0a940904":"code","3bc3aa60":"code","bdf913e3":"code","79431fd6":"code","873f289f":"code","ba342890":"code","79b84687":"markdown"},"source":{"8033febb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","724aa108":"#Read the file as a panda dataframe\niris_df_unprocessed = pd.read_csv('..\/input\/iris\/Iris.csv')","8f60122f":"# Check the value count for each iris specie\niris = iris_df_unprocessed \niris['Species'].value_counts()","a415d0c4":"#Check data type for iris characteristics, and correct if necessary\nprint(iris.dtypes)","dd711949":"#Checking if any NaN in the data \niris.isnull().sum()","93610a4e":"#Simple stats to see any correlation between each characteristics\niris.corr()","0a940904":"# Transform Species into dummies variables\nX = iris[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm','PetalWidthCm']]\nY = pd.get_dummies(iris[['Species']])\nY = iris[['Species']]","3bc3aa60":"#Divide the data into training and testing set (20% of dataset)\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,Y, test_size = 0.2, random_state = 4)\nprint( 'Train set size is: ', X_train.shape, y_train.shape)\nprint( 'Test set size is: ', X_test.shape, y_test.shape)","bdf913e3":"#For this type of data I chose Support Vector Machine (SVM) which is an excellent tool when it comes to supervised learning task. For this problem we need to be able to classify iris into different type of species based on it's physical char. \n#Additionally, SVM are ideal from small-to-medium sized datasets. \n#Support Vector Classification (SVC) is an excellent choice for this size of dataset. \nfrom sklearn import svm\nclf = svm.SVC(kernel = 'rbf')\nclf.fit(X_train, y_train)","79431fd6":"#Let's test the model and observe results\nyhat = clf.predict(X_test)\nyhat[0:10]","873f289f":"#Confusion matrix helps us to understand how the model's output compares to actual testing sample\nfrom sklearn.metrics import confusion_matrix\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nmat = confusion_matrix(y_test, yhat)\nsns.heatmap(mat.T, square=True, annot=True, cbar=False, cmap=plt.cm.Blues)\nplt.xlabel('Predicted Values')\nplt.ylabel('True Values');\nplt.show();\n","ba342890":"#F1 a.k.a. balanced F-score helps us to understand how well are model performed as a percentile number\nfrom sklearn.metrics import f1_score\nf1_score(y_test, yhat, average = 'weighted')","79b84687":"At this point we can see that the data does not require any pre-processing steps and can directly be fed into a chosen machine learning algorithm. \nNext steps will be:\n1. Divided the dataset into training and testing labels.\n2. Choose a machine learning algorithm based on desired output and data available.\n3. Train the chosen model.\n4. Test the model. \n5. Provide visualization tools to see the performance of the model. "}}