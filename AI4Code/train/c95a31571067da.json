{"cell_type":{"322816c5":"code","08e1da05":"code","d94bdc5f":"code","b34a74eb":"code","75629e18":"code","e45d0c33":"code","94707a68":"code","a2a5739a":"code","5b2b3f17":"markdown","6f49f72a":"markdown","b019e8bc":"markdown","4f853edc":"markdown","980579e2":"markdown","d3bb437a":"markdown","ff03dd9d":"markdown","9bc1d48f":"markdown"},"source":{"322816c5":"import os\nimport sys\n\nimport numpy as np\nimport pandas as pd\nimport cv2\n\nfrom PIL import Image\nfrom matplotlib import pyplot as plt\n\nfrom keras.applications.inception_v3 import preprocess_input\nfrom keras.preprocessing.image import ImageDataGenerator, load_img","08e1da05":"DATA_PATH = '..\/input\/aptos2019-blindness-detection'\nTRAIN_IMG_PATH = os.path.join(DATA_PATH, 'train_images')\nTRAIN_LABEL_PATH = os.path.join(DATA_PATH, 'train.csv')\n\ndf_train = pd.read_csv(TRAIN_LABEL_PATH)\ndf_train['diagnosis'] = df_train['diagnosis'].astype('str')\ndf_train = df_train[['id_code', 'diagnosis']]\nif df_train['id_code'][0].split('.')[-1] != 'png':\n    for index in range(len(df_train['id_code'])):\n        df_train['id_code'][index] = df_train['id_code'][index] + '.png'\nX_train = df_train","d94bdc5f":"def generator(datagen):\n    return datagen.flow_from_dataframe(\n        dataframe=X_train, \n        directory=TRAIN_IMG_PATH,\n        x_col='id_code',\n        y_col='diagnosis',\n        target_size=(299, 299),\n        color_mode='rgb',\n        class_mode='categorical',\n        batch_size=32,\n        shuffle=False\n    )\n\ndef visualization(generator):\n    fig, ax = plt.subplots(1, 5, figsize=(30,50))\n    count = 0\n    for X_batch, y_batch in generator:\n        while count < 5:\n            ax[count].imshow(X_batch[count])\n            count += 1\n        break\n\n        plt.show()","b34a74eb":"datagen1 = ImageDataGenerator(\n    rescale=1.\/255\n)\nvisualization(generator(datagen1))","75629e18":"datagen2 = ImageDataGenerator(\n    rescale=1.\/255,\n    horizontal_flip=True,\n    vertical_flip=True\n)\nvisualization(generator(datagen2))","e45d0c33":"datagen3 = ImageDataGenerator(\n    rescale=1.\/255,\n    brightness_range=[0.5, 1.5]\n)\nvisualization(generator(datagen3))","94707a68":"datagen4 = ImageDataGenerator(\n    rescale=1.\/255,\n    rotation_range=30,\n    brightness_range=[0.5, 1.5],\n    zoom_range=[0.8, 1.2],\n    horizontal_flip=True,\n    vertical_flip=False\n)\nvisualization(generator(datagen4))","a2a5739a":"datagen5 = ImageDataGenerator(\n    preprocessing_function=preprocess_input\n)\nvisualization(generator(datagen5))","5b2b3f17":"## Image Augmentation and Visualization with Keras\n\nImage augmentation is a way to generate more training image from original training image.\nThis way increases the image by applying several random transformations to produce a plausible image.\nIn addition, models will train many aspects of the image, which will help you create a generalized model.","6f49f72a":"## Image Generator","b019e8bc":"## 1) Original Images (No augmentation)","4f853edc":"## 3) Apply brightness","980579e2":"## 5) Apply Pre-Processing of ImageNet","d3bb437a":"## 2) Apply horizontal flip","ff03dd9d":"#### Arguments\n\n- rotation_range      :  Rotation range of the image.\n\n- width_shift_range   :  Horizontal shift range of the image.\n\n- height_shift_range  :  vertical shift range of the image.\n\n- brightness_range    :  Range the brightness of the image.\n\n- zoom_range          :  Range for random zoom.\n\n- fill_mode           :  Fills the space created when rotating, moving, and shrinking an image.\n\n- horizontal_flip     :  When set to True, flip the image vertically with a 50% probability.\n\n- vertical_flip       :  When set to True, flip the image horizontally with a 50% probability.\n\n- rescale             :  The original image consists of 0-255 RGB coefficients, which are too high to effectively learn the model. Therefore, it scales it by 1\/255 and converts it into 0-1 range.\n\n[Reference: Keras Documentation](https:\/\/keras.io\/preprocessing\/image)","9bc1d48f":"## 4) Apply vrious"}}