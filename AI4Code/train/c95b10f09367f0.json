{"cell_type":{"6cd16f60":"code","bb6d6c36":"code","8b895ef7":"code","201002b3":"code","cfea9697":"code","ba830d17":"code","be65c758":"code","7553adde":"code","51abddd9":"code","663204c4":"code","37482887":"code","2a718e03":"code","57df5dab":"code","bf657574":"code","8e2284f9":"code","5dcf6c22":"code","99dd5984":"code","14295dfc":"code","df1754ce":"code","73bd97c0":"code","6feb4362":"code","ade7925a":"code","fc0fbc46":"code","ba236c05":"code","547e5e8f":"code","6788b6ee":"code","dcc3cf79":"markdown","d1406981":"markdown","9bd6c372":"markdown","ce74d499":"markdown","66e2c893":"markdown","e3b59f34":"markdown","07bcf7ba":"markdown","03ff7c86":"markdown","32c58732":"markdown","f950831b":"markdown","f0a17b61":"markdown","75b6685d":"markdown","b3107cb6":"markdown","c672c9ac":"markdown","1f2099f9":"markdown","bfddc8dc":"markdown","e013f6f7":"markdown","83fb1a39":"markdown","43020e58":"markdown"},"source":{"6cd16f60":"import pandas as pd\nimport numpy as np\nimport sklearn\nimport matplotlib.pyplot as plt\nimport math","bb6d6c36":"d = pd.read_csv(\"..\/input\/flight-take-off-data-jfk-airport\/M1_final.csv\")\nd","8b895ef7":"d.info()","201002b3":"from sklearn.preprocessing import LabelEncoder \nlabel = LabelEncoder()\n\nd['OP_UNIQUE_CARRIER'] = label.fit_transform(d['OP_UNIQUE_CARRIER'])\nd['TAIL_NUM'] = label.fit_transform(d['TAIL_NUM'])\nd['DEST'] = label.fit_transform(d['DEST'])\nd['Dew Point'] = label.fit_transform(d['Dew Point'])\nd['Wind'] = label.fit_transform(d['Wind'])\nd['Condition']= label.fit_transform(d['Condition'])\nd.head()","cfea9697":"Y = d[\"TAXI_OUT\"].values\nX = d.drop(\"TAXI_OUT\",axis=1).values","ba830d17":"from sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.10,shuffle= True)\nprint(X_train.shape,X_test.shape,Y_train.shape,Y_test.shape)","be65c758":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\nle_linear = LinearRegression()\nle_linear = le_linear.fit(X_train,Y_train)\n\nle_linear_rms = (mean_squared_error(Y_test,le_linear.predict(X_test))**0.5)\nprint(le_linear_rms)","7553adde":"from sklearn.linear_model import Ridge\n\nle_ridge = Ridge(alpha=0.05, normalize=True)\nle_ridge.fit(X_train,Y_train)\n\nle_ridge_rms = mean_squared_error(Y_test,le_ridge.predict(X_test))**0.5\nprint(le_ridge_rms)","51abddd9":"from sklearn.linear_model import Lasso\n\nle_lasso = Lasso(alpha=0.05, normalize=True)\nle_lasso.fit(X_train,Y_train)\n\nle_lasso_rms = mean_squared_error(Y_test,le_lasso.predict(X_test))**0.5\nprint(le_lasso_rms)\n","663204c4":"from sklearn.neighbors import KNeighborsRegressor\n\nle_KNN = KNeighborsRegressor(n_neighbors = 200)\nle_KNN.fit(X_train, Y_train)\n\nle_KNN_rms = mean_squared_error(Y_test,le_KNN.predict(X_test))**0.5\nprint(le_KNN_rms)","37482887":"from sklearn.svm import SVR\nfrom sklearn.preprocessing import StandardScaler\n\nsc1 = StandardScaler()\nsc2 = StandardScaler()\n\nx1 = X_train.copy()\nx2 = X_test.copy()\n\nx1 = sc1.fit_transform(x1)\nx2 = sc2.fit_transform(x2)\n\nsvr = SVR()\nsvr.fit(x1,Y_train)\n\nle_svr_rms = mean_squared_error(Y_test,svr.predict(x2),squared = False)\nprint(le_svr_rms)","2a718e03":"from sklearn.linear_model import BayesianRidge\n\nle_bayes = BayesianRidge()\nle_bayes.fit(X_train, Y_train)\n\nle_bayes_rms = mean_squared_error(Y_test,le_bayes.predict(X_test))**0.5\nprint(le_bayes_rms)","57df5dab":"from sklearn.ensemble import RandomForestRegressor\n\nle_random = RandomForestRegressor()\nle_random.fit(X_train,Y_train)\n\nle_random_rms = mean_squared_error(Y_test,le_random.predict(X_test))**0.5\nprint(le_random_rms)","bf657574":"from lightgbm import LGBMRegressor\n\nle_gbm = LGBMRegressor()\nle_gbm.fit(X_train,Y_train)\n\nle_gbm_rms = mean_squared_error(Y_test,le_gbm.predict(X_test))**0.5\nprint(le_gbm_rms)","8e2284f9":"print(d['OP_UNIQUE_CARRIER'].unique())\nprint(d['TAIL_NUM'].unique()) \nprint(d['DEST'].unique())\nprint(d['Dew Point'].unique())\nprint(d['Wind'].unique())\nprint(d['Condition'].unique())\nd['DEST'].value_counts()","5dcf6c22":"Y = d[\"TAXI_OUT\"].values\nX = d.drop(\"TAXI_OUT\",axis=1)\nX = pd.get_dummies(X, columns=[\"MONTH\",\"DAY_OF_MONTH\",\"DAY_OF_WEEK\",\"OP_UNIQUE_CARRIER\",\"DEST\",\"Wind\",\"Condition\"])\n\nX.tail()","99dd5984":"from sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.10,shuffle= True)\nprint(X_train.shape,X_test.shape,Y_train.shape,Y_test.shape)","14295dfc":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\nohe_linear = LinearRegression()\nohe_linear = ohe_linear.fit(X_train,Y_train)\n\nohe_linear_rms = (mean_squared_error(Y_test,ohe_linear.predict(X_test))**0.5)\nprint(ohe_linear_rms)","df1754ce":"from sklearn.linear_model import Ridge\n\nohe_ridge = Ridge(alpha=0.05, normalize=True)\nohe_ridge.fit(X_train,Y_train)\n\nohe_ridge_rms = mean_squared_error(Y_test,ohe_ridge.predict(X_test))**0.5\nprint(ohe_ridge_rms)","73bd97c0":"from sklearn.linear_model import Lasso\n\nohe_lasso = Lasso(alpha=0.05, normalize=True)\nohe_lasso.fit(X_train,Y_train)\n\nohe_lasso_rms = mean_squared_error(Y_test,ohe_lasso.predict(X_test))**0.5\nprint(ohe_lasso_rms)\n\n","6feb4362":"from sklearn.neighbors import KNeighborsRegressor\n\nohe_KNN = KNeighborsRegressor(n_neighbors = 200)\nohe_KNN.fit(X_train, Y_train)\n\nohe_KNN_rms = mean_squared_error(Y_test,ohe_KNN.predict(X_test))**0.5\nprint(ohe_KNN_rms)","ade7925a":"from sklearn.svm import SVR\nfrom sklearn.preprocessing import StandardScaler\n\nsc1 = StandardScaler()\nsc2 = StandardScaler()\n\nx1 = X_train.copy()\nx2 = X_test.copy()\n\nx1 = sc1.fit_transform(x1)\nx2 = sc2.fit_transform(x2)\n\nsvr = SVR()\nsvr.fit(x1,Y_train)\n\nohe_svr_rms = mean_squared_error(Y_test,svr.predict(x2),squared = False)\nprint(ohe_svr_rms)","fc0fbc46":"from sklearn.linear_model import BayesianRidge\n\nohe_bayes = BayesianRidge()\nohe_bayes.fit(X_train, Y_train)\n\nohe_bayes_rms = mean_squared_error(Y_test,ohe_bayes.predict(X_test))**0.5\nprint(ohe_bayes_rms)","ba236c05":"from sklearn.ensemble import RandomForestRegressor\n\nohe_random = RandomForestRegressor()\nohe_random.fit(X_train,Y_train)\n\nohe_random_rms = mean_squared_error(Y_test,ohe_random.predict(X_test))**0.5\nprint(ohe_random_rms)","547e5e8f":"from lightgbm import LGBMRegressor\n\nohe_gbm = LGBMRegressor()\nohe_gbm.fit(X_train,Y_train)\n\nohe_gbm_rms = mean_squared_error(Y_test,ohe_gbm.predict(X_test))**0.5\nprint(ohe_gbm_rms)","6788b6ee":"array1 = np.array([le_linear_rms,le_ridge_rms,le_lasso_rms,le_KNN_rms,le_svr_rms,le_bayes_rms,le_random_rms,le_gbm_rms])\narray2 = np.array([ohe_linear_rms,ohe_ridge_rms,ohe_lasso_rms,ohe_KNN_rms,ohe_svr_rms,ohe_bayes_rms,ohe_random_rms,ohe_gbm_rms])\nmodels = [\"LNR\",\"RR\",\"LSR\",\"KNNR\",\"SVR\",\"NBR\",\"RFR\",\"LGBM\"]\nplt.plot(models,array1)\nplt.plot(models,array2)\nplt.legend([\"Label Encoding\",\"One Hot Encoding\"])\nplt.xlabel(\"models\")\nplt.ylabel(\"RMSE\")\nplt.show()","dcc3cf79":"**NAIVE BAYES(ONE-HOT-ENCODING)**","d1406981":"**LABEL ENCODING**","9bd6c372":"**SVR(LABEL ENCODING)**","ce74d499":"**KNN(ONE-HOT-ENCODING)**","66e2c893":"**SVR(ONE-HOT-ENCODING)**","e3b59f34":"**LINEAR REGRESSION(ONE-HOT-ENCODING)**","07bcf7ba":"**RIDGE REGRESSION(ONE-HOT-ENCODING)**","03ff7c86":"**COMPARISON**","32c58732":"**KNN MODEL(LABEL ENCODING)**","f950831b":"**RANDOM FOREST(ONE-HOT-ENCODING)**","f0a17b61":"**LASSO REGRESSION(ONE-HOT-ENCODING)**","75b6685d":"**LINEAR REGRESSION(LABEL ENCODING)**","b3107cb6":"**ONE HOT ENCODING**","c672c9ac":"**RIDGE REGRESSION(LABEL ENCODING)**","1f2099f9":"**NAIVE BAYES(LABEL ENCODING)**","bfddc8dc":"**LIGHT GBM(ONE-HOT-ENCODING)**","e013f6f7":"**LASSO REGRESSION(LABEL ENCODING)**","83fb1a39":"**RANDOM FOREST(LABEL ENCODING)**","43020e58":"**LIGHT GBM(LABEL ENCODING)**"}}