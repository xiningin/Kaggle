{"cell_type":{"dcca7a95":"code","2e41ba77":"code","6cd5fbd9":"code","02960205":"code","150c4695":"code","575f0c9e":"code","eca932dd":"code","386f173d":"code","5286f903":"code","f76aebab":"code","1d9dbcb8":"code","9075b0ad":"code","4ab7fc84":"code","b7fba1be":"code","d128e2e0":"code","b311736d":"code","05938511":"code","951631a6":"code","b18b378d":"code","1a24c23a":"code","24de73ff":"code","866be135":"code","5337099c":"code","8cda09ca":"code","f7d97924":"code","2a51dc27":"code","af07c391":"code","e8d66e2a":"code","8507c31c":"code","15f2f199":"code","dca519d6":"code","72a11219":"code","2efb1c22":"code","ae47e9d2":"code","72859897":"code","f6b08673":"code","64f48e90":"code","15ad78d1":"code","f6db72c3":"code","7115ea73":"code","1d710634":"code","c6ec10e0":"code","9e8d57fd":"code","7be8be53":"code","c1b2df77":"code","84a4d7a3":"code","43148b57":"code","9f5d608e":"code","d3e80b7a":"code","8e986b5b":"code","50fe37f6":"code","109330a7":"code","1c1f4049":"markdown","ea16b6f1":"markdown","f030d303":"markdown","16a61175":"markdown","09764b7d":"markdown","99fb28bb":"markdown","98c4d50c":"markdown","44737430":"markdown","c6fd92de":"markdown","f56be658":"markdown","675474fb":"markdown","e4eec077":"markdown"},"source":{"dcca7a95":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","2e41ba77":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","6cd5fbd9":"df = pd.read_csv('\/kaggle\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')","02960205":"df.info()","150c4695":"df.describe().T","575f0c9e":"df.head()","eca932dd":"df['TotalCharges'] =  pd.to_numeric(df['TotalCharges'],errors='coerce')","386f173d":"sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')","5286f903":"sns.countplot(x='Churn',data=df)","f76aebab":"sns.countplot(x='Churn',hue='PaymentMethod',data=df,palette='coolwarm')","1d9dbcb8":"sns.countplot(x='Churn',hue='gender',data=df,palette='coolwarm')","9075b0ad":"sns.countplot(x='Churn',hue='SeniorCitizen',data=df,palette='coolwarm')","4ab7fc84":"sns.pairplot(data=df,palette='coolwarm')","b7fba1be":"sns.factorplot(x='Churn',y=\"tenure\",data=df,kind=\"violin\",palette=\"muted\")","d128e2e0":"sns.factorplot(x='Churn',y=\"MonthlyCharges\",data=df,kind=\"violin\",palette=\"muted\")","b311736d":"target = ['Churn']","05938511":"cat_cols = df.nunique()[df.nunique() < 6].keys().tolist()","951631a6":"bin_cols = df.nunique()[df.nunique() == 2].keys().tolist()","b18b378d":"multi_cols= [i for i in cat_cols if i not in bin_cols + target]       ","1a24c23a":"# Dropping missing values|\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler","24de73ff":"le = LabelEncoder()\nfor i in bin_cols :\n    df[i] = le.fit_transform(df[i])","866be135":"#Duplicating columns for multi value columns\ndf = pd.get_dummies(data = df ,columns = multi_cols)\n","5337099c":"df.info()","8cda09ca":"num_cols = ['tenure', 'MonthlyCharges', 'TotalCharges']","f7d97924":"df[num_cols].info()","2a51dc27":"df.drop(['customerID'],axis=1,inplace=True)","af07c391":"ss = StandardScaler()","e8d66e2a":"scaled = ss.fit_transform(df[num_cols])","8507c31c":"scaled = pd.DataFrame(data=scaled,columns=num_cols)","15f2f199":"scaled.head()","dca519d6":"scaled.info()","72a11219":"df.drop(columns = num_cols,axis =1,inplace=True)","2efb1c22":"df = pd.merge(df,scaled,left_index=True,right_index=True,how='left')","ae47e9d2":"df.info()","72859897":"df.dropna(inplace=True)","f6b08673":"df.head()","64f48e90":"print(len(df.columns))\ndf.columns","15ad78d1":"from sklearn.model_selection import train_test_split","f6db72c3":"X_train, X_test, y_train, y_test = train_test_split(df.drop(['Churn'],axis=1),df['Churn'],test_size=0.3,random_state=101)","7115ea73":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\n\nmodel = LogisticRegression()\nmodel.fit(X_train,y_train)\n\npredictions = model.predict(X_test)\nscore = model.score(X_test,y_test)\n\nprint(\"Accuracy =\" + str(score))\nprint(confusion_matrix(y_test,predictions))\nprint(classification_report(y_test,predictions))","1d710634":"arr_coeff= np.reshape(abs(model.coef_),(40,1))","c6ec10e0":"column_name = ['Coeff']","9e8d57fd":"coeff = pd.DataFrame(data=arr_coeff,index=X_test.columns.values,columns=column_name)","7be8be53":"coeff.sort_values(by='Coeff',ascending=False)","c1b2df77":"from sklearn.neighbors import KNeighborsClassifier","84a4d7a3":"knn = KNeighborsClassifier(n_neighbors=1)","43148b57":"knn.fit(X_train,y_train)","9f5d608e":"pred = knn.predict(X_test)","d3e80b7a":"score = model.score(X_test,y_test)\nprint(\"Accuracy =\" + str(score*100))\nprint(confusion_matrix(pred,y_test))\nprint(classification_report(pred,y_test))","8e986b5b":"error_rate = []\n\n# Will take some time\nfor i in range(1,40):\n    \n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    pred_i = knn.predict(X_test)\n    error_rate.append(np.mean(pred_i != y_test))","50fe37f6":"plt.figure(figsize=(10,6))\nplt.plot(range(1,40),error_rate,color='blue', linestyle='dashed', marker='o',\n         markerfacecolor='red', markersize=10)\nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')","109330a7":"knn = KNeighborsClassifier(n_neighbors=8)\nknn.fit(X_train,y_train)\npred = knn.predict(X_test)\nscore = model.score(X_test,y_test)\nprint(\"Accuracy =\" + str(score*100))\nprint(confusion_matrix(pred,y_test))\nprint(classification_report(pred,y_test))","1c1f4049":"Fitting again with k = 8 (low value)","ea16b6f1":"Precision and recall have improved","f030d303":"Find out if there are any null values","16a61175":"Compare with KNN","09764b7d":"Feature Engineering","99fb28bb":"Load data & observe the features","98c4d50c":"Most Important Features","44737430":"Label Encode the categorical features and Scale the continous features","c6fd92de":"Modelling using Logistic Regression","f56be658":"Drop original columns","675474fb":"EDA and observe","e4eec077":"Find Best K"}}