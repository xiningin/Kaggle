{"cell_type":{"4daea539":"code","5e5cd4aa":"code","8e8fbffd":"code","ce3c86ee":"code","7665a271":"code","f8b1801b":"code","3825d58e":"code","efdcb64e":"code","93589c21":"code","f704c7cd":"code","fa3e9676":"code","7176e05b":"code","7fd72f25":"code","c43e7707":"code","3d388f76":"code","86b94f72":"code","9337e773":"code","ed965b57":"code","90d45541":"markdown","5ccc8d0c":"markdown","fefe2430":"markdown","570f13e1":"markdown","8b43a697":"markdown"},"source":{"4daea539":"import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()\nimport scipy as sc\nimport numpy as np\nimport matplotlib.ticker as mticker","5e5cd4aa":"df = pd.read_csv('..\/input\/website-views\/fcc-forum-pageviews.csv', parse_dates= ['date'])\ndf = df.set_index(['date'])\ndf","8e8fbffd":"bottom = int(df.quantile(q=.025))\ntop = int(df.quantile(q=.975))\ntop, bottom","ce3c86ee":"top_data = df[df['value'] >= top]\nbottom_data = df[df['value'] <= bottom]\nlen(top_data), len(bottom_data)","7665a271":"cleaned_data = df[(df['value'] < top) & (df['value'] > bottom)]\ncleaned_data","f8b1801b":"top_data.plot(), bottom_data.plot(), cleaned_data.plot()","3825d58e":"x = cleaned_data.index\ny = cleaned_data['value']\ndef draw_line_plot():\n    fig, ax = plt.subplots(figsize = (15,5))\n    ax.plot(x,y,color='r',linewidth = 1.5)\n    ax.set(title = \"Daily freeCodeCamp Forum Page Views 5\/2016-12\/2019\", xlabel = \"Date\", ylabel = \"Page Views\")\n    fig.savefig('line_plot.png')\n    return fig","efdcb64e":"fig, ax = plt.subplots(figsize = (15,5))\nax.plot(x,y, color = 'red', linewidth = 1.5)\nax.set(title = \"Daily freeCodeCamp Forum Page Views 5\/2016-12\/2019\", xlabel = \"Date\", ylabel = \"Page Views\")\nfig.savefig('line_plot.png')","93589c21":"data_2016_to_2019 = df.groupby([df.index.strftime('%Y-%m')])['value'].mean().reset_index(name = 'Average Page Views')\ndata_2016_to_2019_month = []\ndata_2016_to_2019_views =  []\nfor i in data_2016_to_2019['date']:\n    data_2016_to_2019_month.append(i)\nfor j in data_2016_to_2019['Average Page Views']:\n    data_2016_to_2019_views.append(j)\n\ndata_2016_to_2019_dict = dict(zip(data_2016_to_2019_month,data_2016_to_2019_views))\n\ndata_2016_list = []\nfor i in range (0,4):\n    data_2016_list.append(0)\ndata_2017_list = []\ndata_2018_list = []\ndata_2019_list = []\nfor i in data_2016_to_2019['date']:\n    if '2016' in i:\n        data_2016_list.append(i)\nfor i in data_2016_to_2019['date']:\n    if '2017' in i:\n        data_2017_list.append(i)\nfor i in data_2016_to_2019['date']:\n    if '2018' in i:\n        data_2018_list.append(i)\nfor i in data_2016_to_2019['date']:\n    if '2019' in i:\n        data_2019_list.append(i)\ndata_2016_list, data_2017_list, data_2018_list, data_2019_list","f704c7cd":"data_2016_views_list = []\nfor i in range(0,4):\n    data_2016_views_list.append(0)\ndata_2017_views_list = []\ndata_2018_views_list = []\ndata_2019_views_list = []\nfor i in data_2016_to_2019_dict.keys():\n    if '2016' in i:\n        data_2016_views_list.append(data_2016_to_2019_dict.get(i))\n    elif '2017' in i:\n        data_2017_views_list.append(data_2016_to_2019_dict.get(i))\n    elif '2018' in i:\n        data_2018_views_list.append(data_2016_to_2019_dict.get(i))\n    elif '2019' in i:\n        data_2019_views_list.append(data_2016_to_2019_dict.get(i))\ndata_2016_views_list, data_2017_views_list, data_2018_views_list, data_2019_views_list","fa3e9676":"year = ['2017','2018','2019']\nviews = [data_2017_views_list,data_2018_views_list,data_2019_views_list]\ndict_views_2017_to_2019 = dict(zip(year,views))\ndf_views_2017_to_2019 = pd.DataFrame(dict_views_2017_to_2019)\ndf_views_2016 = pd.DataFrame({'2016' : data_2016_views_list})\ndf_views_new = pd.concat([df_views_2016,df_views_2017_to_2019], axis = 1)\ndf_views_new['2016'] = df_views_new['2016'].fillna(0) \ndf_views_new['months'] = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\ndf_views_final = df_views_new.set_index('months')\ndf_views_final.T","7176e05b":"df_views_final.T.plot.bar(figsize = (15,10), xlabel = \"Years\", ylabel = \"Average Page Views\")\nplt.show()\n","7fd72f25":"def draw_bar_plot():\n    df_bar = df_views_final.T\n    df_bar.plot.bar(figsize = (15,10), xlabel = \"Years\", ylabel = \"Average Page Views\")\n    fig.savefig('bar_plot.png')\n    return fig","c43e7707":"df_box = df.copy()\ndf_box.reset_index(inplace=True)\ndf_box['year'] = [d.year for d in df_box.date]\ndf_box['month'] = [d.strftime('%b') for d in df_box.date]\ndf_box","3d388f76":"sns.set(rc={\"figure.figsize\":(15,20)})\nsns.boxplot(x=df_box['year'], y = df_box['value']).set(xlabel = \"Year\", ylabel = \"Page Views\", title = \"Year-wise Box Plot (Trend)\")","86b94f72":"plt.rcParams[\"figure.figsize\"] = [13, 13.50]\nplt.rcParams[\"figure.autolayout\"] = True\nfig, axes = plt.subplots(1, 2)\n\nsns.boxplot(data = df_box, x = 'year', y = 'value', ax=axes[0])\naxes[0].set(title = \"Year-wise Box Plot (Trend)\", ylabel = \"Page Views\", xlabel=\"Year\")\nsns.boxplot(data = df_box, x = df_box['month'], y = 'value', ax=axes[1])\naxes[1].set(title = \"Month-wise Box Plot (Seasonality)\", ylabel = \"Page Views\", xlabel=\"Month\")\nplt.show()","9337e773":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 14))\nsns.boxplot(ax=ax1, data=df_box, x=df_box[\"year\"], y=df_box[\"value\"])\nax1.set(xlabel=\"Year\", ylabel=\"Page Views\", title=\"Year-wise Box Plot (Trend)\")\nsns.boxplot(ax=ax2,data=df_box,x=df_box[\"month\"],y=df_box[\"value\"],order=[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"])\nax2.set_title(\"Month-wise Box Plot (Seasonality)\")\nax2.set_xlabel(\"Month\")\nax2.set_ylabel(\"Page Views\")\ny_ticks = [\"0\",\"20000\",\"40000\",\"60000\",\"80000\",\"100000\",\"120000\",\"140000\",\"160000\",\"180000\",\"200000\"]\nax1.yaxis.set_major_locator(mticker.FixedLocator([int(s) for s in y_ticks]))\nax1.set_yticklabels(y_ticks)\nax2.yaxis.set_major_locator(mticker.FixedLocator([int(s) for s in y_ticks]))\nax2.set_yticklabels(y_ticks)\nfig.savefig('box_plot.png')","ed965b57":"def draw_box_plot():\n    # Prepare data for box plots (this part is done!)\n    df_box = df.copy()\n    df_box.reset_index(inplace=True)\n    df_box['year'] = [d.year for d in df_box.date]\n    df_box['month'] = [d.strftime('%b') for d in df_box.date]\n\n    # Draw box plots (using Seaborn)\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 14))\n    sns.boxplot(ax=ax1, data=df_box, x=df_box[\"year\"], y=df_box[\"value\"])\n    ax1.set(xlabel=\"Year\", ylabel=\"Page Views\", title=\"Year-wise Box Plot (Trend)\")\n    sns.boxplot(ax=ax2,data=df_box,x=df_box[\"month\"],y=df_box[\"value\"],order=[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"])\n    ax2.set_title(\"Month-wise Box Plot (Seasonality)\")\n    ax2.set_xlabel(\"Month\")\n    ax2.set_ylabel(\"Page Views\")\n    y_ticks = [\"0\",\"20000\",\"40000\",\"60000\",\"80000\",\"100000\",\"120000\",\"140000\",\"160000\",\"180000\",\"200000\"]\n    ax1.yaxis.set_major_locator(mticker.FixedLocator([int(s) for s in y_ticks]))\n    ax1.set_yticklabels(y_ticks)\n    ax2.yaxis.set_major_locator(mticker.FixedLocator([int(s) for s in y_ticks]))\n    ax2.set_yticklabels(y_ticks)\n    # Save image and return fig (don't change this part)\n    fig.savefig('box_plot.png')\n    return fig","90d45541":"<h2> Create a `draw_bar_plot` function that draws a bar chart <\/h2>\n<h2> It should show average daily page views for each month grouped by year. <\/h2>\n<h2> The legend should show month labels and have a title of \"Months\". <\/h2>\n<h2>  On the chart, the label on the x axis should be \"Years\" and the label on the y axis should be \"Average Page Views\".<\/h2>","5ccc8d0c":"<h2> Create a `draw_box_plot` function that uses Searborn to draw two adjacent box plots <\/h2>\n<h2> These box plots should show how the values are distributed within a given year or month and how it compares over time.<\/h2>\n<h2> The title of the first chart should be \"Year-wise Box Plot (Trend)\" and the title of the second chart should be \"Month-wise Box Plot (Seasonality)\".<\/h2>\n<h2> Make sure the month labels on bottom start at \"Jan\" and the x and x axis are labeled correctly.<\/h2>\n<h2>For each chart, make sure to use a copy of the data frame.<\/h2>","fefe2430":"<h2> Import data (Make sure to parse dates.Consider setting index column to 'date'.) <\/h2>","570f13e1":"<h2> Clean the data by filtering out days when the page views were in the top 2.5% of the dataset or bottom 2.5% of the dataset. <\/h2>","8b43a697":"<h2> Create a `draw_line_plot` function that uses Matplotlib to draw a line chart <\/h2>\n<h2> The title should be \"Daily freeCodeCamp Forum Page\n Views 5\/2016-12\/2019\". The label on the x axis should be \"Date\" and the label on the y axis should be \"Page Views\". <\/h2>"}}