{"cell_type":{"13d83112":"code","75ae5223":"code","c69603bd":"code","7f1e101d":"code","da7ffd0e":"code","f90c9173":"code","897a7f37":"code","10a04b3e":"code","05ff6600":"code","7bf96c59":"code","38a06328":"code","e75aa253":"code","29ede53d":"code","25958fac":"code","54495710":"code","a24c6dfa":"code","4e6f24d5":"code","3f9956c6":"code","81f6be2e":"code","738fb262":"code","c217e2c5":"code","068bd66d":"code","fb821a37":"code","562ba5f6":"code","675bdd66":"code","cf8eaeeb":"code","3d365c45":"code","def43f7c":"code","836c195a":"code","d5384864":"code","e88f5830":"code","d5178542":"code","519c8728":"code","d06146d0":"code","42af6990":"code","cf112838":"code","79ad3261":"code","d47381fb":"code","a373a0f0":"code","d6afc295":"code","030c71da":"code","0db6be4e":"code","12f38e18":"code","a6b359eb":"code","36f37dd4":"code","6cb83587":"code","336f640a":"code","60d452cf":"code","bf8a197f":"code","ebf067eb":"code","f8c0e10b":"code","ba649661":"code","9abb372b":"code","797fdd7d":"code","11f15d78":"code","33794709":"code","719f8da7":"code","1b50eec8":"code","6afa884a":"code","e244ac26":"code","31363ef1":"code","dd60d33d":"code","ec709642":"code","a30b9a72":"code","15fe3d66":"code","9aa80b5a":"code","a03f80b6":"code","157b87aa":"code","0dd8c7a4":"code","4fa7cf7e":"code","b4422c20":"code","c716658a":"code","f5743754":"code","5bfd72a0":"code","3e08fe41":"code","d8d0bd20":"markdown","c53e8840":"markdown","d5dc5d67":"markdown","37d8c6b2":"markdown","8f88ae78":"markdown","37c9f98a":"markdown","7acfa110":"markdown","9fef9aaa":"markdown","1dc21023":"markdown","193e1784":"markdown","26700c95":"markdown","67056ef6":"markdown"},"source":{"13d83112":"#Various modules\n%matplotlib inline\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O \n\n#Visualization\nimport matplotlib.pyplot as plt\nimport missingno\nimport seaborn as sns\nplt.style.use(\"seaborn-whitegrid\")\n\n#Encoding\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder, label_binarize\n\n#Models\nimport catboost\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import model_selection, tree, preprocessing, metrics, linear_model\nfrom sklearn.svm import LinearSVC\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LinearRegression, LogisticRegression, SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom catboost import CatBoostClassifier, Pool, cv\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","75ae5223":"train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")","c69603bd":"train.head()","7f1e101d":"test.head()","da7ffd0e":"submission.head()","f90c9173":"missingno.matrix(train, figsize=(30, 5))","897a7f37":"#finding the number of missing values\ndef find_missing_values(df, columns):\n    length = len(df)\n    missing_vals = {}\n    for column in columns:\n        total_vals = df[column].value_counts().sum()\n        missing_vals[column] = length - total_vals\n    return missing_vals\n\nmissing_values = find_missing_values(train, columns=train.columns)\nmissing_values\n    ","10a04b3e":"df_bin = pd.DataFrame() #discretised continous variables\ndf_con = pd.DataFrame() #continous variables","05ff6600":"fig = plt.figure(figsize=(30, 6))\nsns.countplot(y='Survived', data=train)\nprint(train.Survived.value_counts())","7bf96c59":"df_bin['Survived'] = train['Survived']\ndf_con['Survived'] = train['Survived']","38a06328":"sns.distplot(train.Pclass)","e75aa253":"missing_values['Pclass']","29ede53d":"df_bin['Pclass'] = train['Pclass']\ndf_con['Pclass'] = train['Pclass']","25958fac":"fig = plt.figure(figsize=(30, 6))\nsns.countplot(y='Sex', data=train)\nprint(train.Sex.value_counts())","54495710":"df_bin['Sex'] = train['Sex']\ndf_bin['Sex'] = np.where(df_bin['Sex']=='female', 1, 0) #1 if female, 0 if male\ndf_con['Sex'] = train['Sex']","a24c6dfa":"fig = plt.figure(figsize=(10, 10))\nsns.distplot(df_bin.loc[df_bin['Survived'] == 1]['Sex'], kde_kws={'label':'Survived'});","4e6f24d5":"#replacing missing age values\ntrain['Age'] = train['Age'].replace(0, np.nan)\nbysexclass = train.groupby(['Sex', 'Pclass'])\ndef impute_median(series):\n    return series.fillna(series.median())\ntrain.Age = bysexclass['Age'].transform(impute_median)\nprint(train.tail(10))","3f9956c6":"df_bin['Age'] = pd.cut(train['Age'], 10)\ndf_con['Age'] = train['Age']","81f6be2e":"missing_values['SibSp']","738fb262":"train.SibSp.value_counts()","c217e2c5":"df_bin['SibSp'] = train['SibSp']\ndf_con['SibSp'] = train['SibSp']","068bd66d":"def plot_count_dist(data, bin_df, label_column, target_column, figsize=(20, 5), use_bin_df=False):\n    if use_bin_df:\n        fig = plt.figure(figsize=figsize)\n        plt.subplot(1, 2, 1)\n        sns.countplot(y=target_column, data=bin_df);\n        plt.subplot(1, 2, 2)\n        sns.distplot(data.loc[data[label_column]==1][target_column],\n                   kde_kws={\"label\":\"Survived\"});\n        sns.distplot(data.loc[data[label_column]==0][target_column],\n                   kde_kws={\"label\":\"Did not survive\"});\n    else:\n        fig = plt.figure(figsize=figsize)\n        plt.subplot(1, 2, 1)\n        sns.countplot(y=target_column, data=data);\n        plt.subplot(1, 2, 2)\n        sns.distplot(data.loc[data[label_column]==1][target_column],\n                   kde_kws={\"label\":\"Survived\"});\n        sns.distplot(data.loc[data[label_column]==0][target_column],\n                   kde_kws={\"label\":\"Did not survive\"});","fb821a37":"plot_count_dist(train,\n               bin_df=df_bin,\n               label_column=\"Survived\",\n               target_column=\"SibSp\",\n               figsize=(20, 10))","562ba5f6":"missing_values['Parch']","675bdd66":" train.Parch.value_counts()","cf8eaeeb":"df_bin['Parch'] = train['Parch']\ndf_con['Parch'] = train['Parch']","3d365c45":"df_bin.head()\ndf_con.head()","def43f7c":"missing_values['Ticket']","836c195a":"sns.countplot(y='Ticket', data=train);","d5384864":" train.Ticket.value_counts()","e88f5830":"train.Fare.value_counts()","d5178542":"df_con['Fare'] = train['Fare']\ndf_bin['Fare'] = pd.cut(train['Fare'], bins=5)","519c8728":"sns.countplot(y='Fare', data=train);","d06146d0":"plot_count_dist(train,\n               bin_df=df_bin,\n               label_column=\"Survived\",\n               target_column=\"Fare\",\n               figsize=(20, 10),\n               use_bin_df=True)","42af6990":"df_con.head()","cf112838":"df_bin.head()","79ad3261":"train['Embarked'] = train['Embarked'].replace(np.nan, 'S')","d47381fb":"train.Embarked.value_counts()","a373a0f0":"sns.countplot(y='Embarked', data=train)","d6afc295":"missing_values['Embarked']","030c71da":"missing_values = find_missing_values(train, columns=train.columns)\nmissing_values","0db6be4e":"df_bin['Embarked'] = train['Embarked']\ndf_con['Embarked'] = train['Embarked']","12f38e18":"df_con.head()","a6b359eb":"df_bin.head()","36f37dd4":"one_hot_cols = df_bin.columns.tolist()\none_hot_cols.remove('Survived')\ndf_bin_enc = pd.get_dummies(df_bin, columns=one_hot_cols)\n\ndf_bin_enc.head()","6cb83587":"df_con_enc = df_con.apply(LabelEncoder().fit_transform)\n\ndf_con_enc.head()","336f640a":"selected_df = df_con_enc","60d452cf":"#Spliting the dataset \nX_train = selected_df.drop('Survived', axis=1)\ny_train = selected_df.Survived","bf8a197f":"def fit_ml(algo, X_train, y_train, cv):\n    \n    model = algo.fit(X_train, y_train)\n    acc = round(model.score(X_train, y_train)*100, 2)\n    \n    train_pred = model_selection.cross_val_predict(algo, X_train, y_train, cv=cv, n_jobs = -1)\n    \n    acc_cv = round(metrics.accuracy_score(y_train, train_pred)*100, 2)\n    \n    \n    return train_pred, acc, acc_cv","ebf067eb":"import time, datetime\nstart_time = time.time()\ntrain_pred_log, acc_log, acc_cv_log = fit_ml(LogisticRegression(), X_train, y_train, 10)\n\nlog_time = (time.time() - start_time)\nprint(\"Accuracy: \", acc_log)\nprint(\"Accuracy CV 10-Fold: \", acc_cv_log)\nprint(\"Running Time: \", datetime.timedelta(seconds=log_time))","f8c0e10b":"start_time = time.time()\ntrain_pred_knn, acc_knn, acc_cv_knn = fit_ml(KNeighborsClassifier(), X_train, y_train, 10)\n\nknn_time = (time.time() - start_time)\nprint(\"Accuracy: \", acc_knn)\nprint(\"Accuracy CV 10-Fold: \", acc_cv_knn)\nprint(\"Running Time: \", datetime.timedelta(seconds=knn_time))","ba649661":"start_time = time.time()\ntrain_pred_gaussian, acc_gaussian, acc_cv_gaussian = fit_ml(GaussianNB(), X_train, y_train, 10)\n\ngaussian_time = (time.time() - start_time)\nprint(\"Accuracy: \", acc_gaussian)\nprint(\"Accuracy CV 10-Fold: \", acc_cv_gaussian)\nprint(\"Running Time: \", datetime.timedelta(seconds=gaussian_time))","9abb372b":"start_time = time.time()\ntrain_pred_svc, acc_svc, acc_cv_svc = fit_ml(LinearSVC(), X_train, y_train, 10)\n\nsvc_time = (time.time() - start_time)\nprint(\"Accuracy: \", acc_svc)\nprint(\"Accuracy CV 10-Fold: \", acc_cv_svc)\nprint(\"Running Time: \", datetime.timedelta(seconds=svc_time))","797fdd7d":"start_time = time.time()\ntrain_pred_gd, acc_gd, acc_cv_gd = fit_ml(SGDClassifier(), X_train, y_train, 10)\n\ngd_time = (time.time() - start_time)\nprint(\"Accuracy: \", acc_gd)\nprint(\"Accuracy CV 10-Fold: \", acc_cv_gd)\nprint(\"Running Time: \", datetime.timedelta(seconds=gd_time))","11f15d78":"start_time = time.time()\ntrain_pred_dt, acc_dt, acc_cv_dt = fit_ml(DecisionTreeClassifier(), X_train, y_train, 10)\n\ndt_time = (time.time() - start_time)\nprint(\"Accuracy: \", acc_dt)\nprint(\"Accuracy CV 10-Fold: \", acc_cv_dt)\nprint(\"Running Time: \", datetime.timedelta(seconds=dt_time))","33794709":"start_time = time.time()\ntrain_pred_gt, acc_gt, acc_cv_gt = fit_ml(GradientBoostingClassifier(), X_train, y_train, 10)\n\ngt_time = (time.time() - start_time)\nprint(\"Accuracy: \", acc_gt)\nprint(\"Accuracy CV 10-Fold: \", acc_cv_gt)\nprint(\"Running Time: \", datetime.timedelta(seconds=gt_time))","719f8da7":"#cat_features = np.where(X_train.dtypes != np.float)[0]\n#cat_features","1b50eec8":"#train_pool = Pool(X_train, y_train, cat_features)","6afa884a":"\"\"\"catboost_model = CatBoostClassifier(iterations=1000, custom_loss=['Accuracy'], loss_function='Logloss')\n\ncatboost_model.fit(train_pool, plot=True)\n\nacc_catboost = round(catboost_model.score(X_train, y_train)*100, 2)\"\"\"","e244ac26":"\"\"\"start_time = time.time()\n\ncv_params = catboost_model.get_params()\n\ncv_data = cv(train_pool, cv_params, fold_count=10, plot=True)\n\ncb_time = time.time() - start_time\n\nacc_cv_cb = round(np.max(cv_data['test-Accuracy-mean'])*100, 2)\"\"\"","31363ef1":"\"\"\"print(\"-----CatBoost Metrics----\")\nprint(\"Accuracy: \", acc_catboost)\nprint(\"Accuracy CV 10-Fold: \", acc_cv_cb) \nprint(\"Running Time: \", datetime.timedelta(seconds=cb_time))\"\"\"","dd60d33d":"models = pd.DataFrame({\n    'Model': ['KNN', 'Logistic Regression', 'Naive Bayes', 'Stochastic Gradient Decent', 'Linear SVC', 'Decision Trees', 'Gradient Boosting Trees'],\n    'Score': [acc_knn, acc_log, acc_gaussian, acc_gd, acc_svc, acc_dt, acc_gt]\n})\n\nprint(\"----------Regular Accuracy Scores\")\nmodels.sort_values(by='Score', ascending=False)","ec709642":"models = pd.DataFrame({\n    'Model': ['KNN', 'Logistic Regression', 'Naive Bayes', 'Stochastic Gradient Decent', 'Linear SVC', 'Decision Trees', 'Gradient Boosting Trees'],\n    'Score': [acc_cv_knn, acc_cv_log, acc_cv_gaussian, acc_cv_gd, acc_cv_svc, acc_cv_dt, acc_cv_gt]\n})\n\nprint(\"----------Cross-Validation Accuracy Scores\")\nmodels.sort_values(by='Score', ascending=False)","a30b9a72":"def fi(model, data):\n    fim = pd.DataFrame({'imp':model.feature_importances_, 'col': data.columns})\n    fim = fim.sort_values(['imp', 'col'], ascending=[True, False]).iloc[-30:]\n    _ = fim.plot(kind='barh', x='col', y='imp', figsize=(20, 10))\n    return fim","15fe3d66":"#fi(catboost_model, X_train)","9aa80b5a":"wanted_cols = X_train.columns\nwanted_cols","a03f80b6":"start_time = time.time()\n\nmodel = GradientBoostingClassifier().fit(X_train, y_train)\n\nacc_gt = round(model.score(X_train, y_train)*100, 2)\n\ntrain_pred_gt = model_selection.cross_val_predict(GradientBoostingClassifier(), X_train, y_train, cv=10, n_jobs = -1)\n\nacc_cv_gt = round(metrics.accuracy_score(y_train, train_pred_gt)*100, 2)\n\ngt_time = (time.time() - start_time)\nprint(\"Accuracy: \", acc_gt)\nprint(\"Accuracy CV 10-Fold: \", acc_cv_gt)\nprint(\"Running Time: \", datetime.timedelta(seconds=gt_time))","157b87aa":"test.head()","0dd8c7a4":"test['Fare'] = test['Fare'].replace(np.nan, 8.0500)\nmissing_values_test = find_missing_values(test, columns=test.columns)\nmissing_values_test","4fa7cf7e":"test_enc = test[wanted_cols]\ntest_enc","b4422c20":"test_enc['Age'] = test_enc['Age'].replace(0, np.nan)\ntest_enc.Age = bysexclass['Age'].transform(impute_median)\ntest_enc","c716658a":"predictions = model.predict(test_enc.apply(LabelEncoder().fit_transform))\npredictions[:20]","f5743754":"submission = pd.DataFrame({'PassengerId': test.PassengerId, 'Survived': predictions})\nsubmission.head()","5bfd72a0":"submission.to_csv(\"submission.csv\", index=False)","3e08fe41":"check = pd.read_csv(\"submission.csv\")","d8d0bd20":"# Gaussian Naive Bayes","c53e8840":"# K-Nearest Neighbours","d5dc5d67":"# Linear Support Vector Machines (SVC)","37d8c6b2":"# Feature Encoding","8f88ae78":"# Stochastic Gradient Decent","37c9f98a":"# Logistic Regression","7acfa110":"# Model Results","9fef9aaa":"# CatBoost Algorithm\n\nState-of-the-art gradient boosting on decision  trees.","1dc21023":"# Feature Importance","193e1784":"# Decision Tree Classifier","26700c95":"# Gradient Boost Trees","67056ef6":"# Building Machine Learning Models"}}