{"cell_type":{"ab9055f8":"code","d4e52b1f":"code","2d96b168":"code","db06f3e8":"code","ebb506d7":"code","9a1b6d73":"code","c159fd29":"code","ca5a0b83":"code","c60dd11d":"code","f80575f8":"code","1938d04a":"code","e30cfa33":"code","2c3617d9":"code","e7841b4a":"code","49768271":"code","10191588":"code","e2a713f5":"code","4f218ff6":"code","691a2f93":"code","192fb95c":"code","0a46499d":"code","c1471d14":"code","e0be45e5":"code","a2cf121e":"code","cf8e2bad":"code","95a1ab73":"code","75918321":"code","16a42fd6":"code","b06b1a87":"code","fc163aae":"code","19d731c4":"code","9c5d269c":"code","bd13bbc8":"code","e7802548":"code","bc382874":"code","9a00b421":"code","3d88f07d":"code","51fb85cf":"code","20ad04cf":"code","57586308":"code","74211391":"code","09c6ef75":"code","ba33cd32":"markdown","004fbbbb":"markdown","40210f95":"markdown","c8824ff7":"markdown","0230713c":"markdown","efeb23e7":"markdown","f12e1fc7":"markdown","b9df04e5":"markdown","3603e327":"markdown","8b1e97f5":"markdown","8c34e636":"markdown","7583ba2b":"markdown","1d6f5c84":"markdown","4ed9b00a":"markdown","fd6c099c":"markdown","28bb9321":"markdown","c6df7ab8":"markdown","560bd0ad":"markdown","7c8a4384":"markdown","977d7e52":"markdown","54216f95":"markdown","b1e1a02b":"markdown"},"source":{"ab9055f8":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d4e52b1f":"train = pd.read_csv(\"\/kaggle\/input\/hackerearth-employee-attrition\/Train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/hackerearth-employee-attrition\/Test.csv\")","2d96b168":"train.head()","db06f3e8":"train.shape # shape of the train data","ebb506d7":"train.info()","9a1b6d73":"for col in train.columns:\n    print(col,\":\",len(train[col].unique()))","c159fd29":"# credit: https:\/\/www.kaggle.com\/willkoehrsen\/start-here-a-gentle-introduction. \ndef missing_values_table(df):\n        # Total missing values\n        mis_val = df.isnull().sum()\n        \n        # Percentage of missing values\n        mis_val_percent = 100 * df.isnull().sum() \/ len(df)\n        \n        # Make a table with the results\n        mis_val_table = pd.concat([mis_val, mis_val_percent], axis=1)\n        \n        # Rename the columns\n        mis_val_table_ren_columns = mis_val_table.rename(\n        columns = {0 : 'Missing Values', 1 : '% of Total Values'})\n        \n        # Sort the table by percentage of missing descending\n        mis_val_table_ren_columns = mis_val_table_ren_columns[\n            mis_val_table_ren_columns.iloc[:,1] != 0].sort_values(\n        '% of Total Values', ascending=False).round(1)\n        \n        # Print some summary information\n        print (\"Your selected dataframe has \" + str(df.shape[1]) + \" columns.\\n\"      \n            \"There are \" + str(mis_val_table_ren_columns.shape[0]) +\n              \" columns that have missing values.\")\n        \n        # Return the dataframe with missing information\n        return mis_val_table_ren_columns","ca5a0b83":"missing= missing_values_table(train)\nmissing","c60dd11d":"from sklearn.impute import SimpleImputer\nimputer = SimpleImputer(strategy='most_frequent')# strategy can also be mean or median \ntrain.iloc[:,:] = imputer.fit_transform(train)","f80575f8":"train.isna().sum()","1938d04a":"plt.figure(figsize=(16,8))\ncorr=train.corr()\nsns.heatmap(corr,annot=True,cmap='coolwarm',robust=True,fmt=\".2f\")\nplt.show()","e30cfa33":"df1=pd.get_dummies(train['Unit'],drop_first=True)\ndf2=pd.get_dummies(train['Decision_skill_possess'],drop_first=True)\ndf3=pd.get_dummies(train['Hometown'],drop_first=True)\ndf4=pd.get_dummies(train['Compensation_and_Benefits'],drop_first=True)\ndfg=pd.get_dummies(train['Gender'],drop_first=True)\ndfs=pd.get_dummies(train['Relationship_Status'],drop_first=True)","2c3617d9":"train=pd.concat([df1,df2,df3,df4,dfg,dfs,train],axis=1)","e7841b4a":"#we have to drop the existing categorical columns from the dataframe\n\ncolumns = ['Unit','Decision_skill_possess','Hometown','Compensation_and_Benefits','Gender','Relationship_Status']\n\ntrain.drop(columns,axis=1,inplace=True)","49768271":"train.head()","10191588":"train.drop('Employee_ID',axis=1,inplace=True)","e2a713f5":"!pip install pandas-profiling","4f218ff6":"%%javascript\nIPython.OutputArea.prototype._should_scroll = function(lines) {\n    return false;\n}\n","691a2f93":"%%capture\nimport pandas_profiling as pp","192fb95c":"pp.ProfileReport(train)","0a46499d":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score,mean_squared_error","c1471d14":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.33,random_state=42)","e0be45e5":"print(\"x_train values count:\",len(x_train))\nprint(\"y_train values count:\",len(y_train))\nprint(\"x_test values count:\",len(x_test))\nprint(\"y_tes values count:\",len(y_test))","a2cf121e":"import xgboost as xgb\n\nmodel=xgb.XGBRegressor()\n\nmodel.fit(x_train,y_train)","cf8e2bad":"y_pred=model.predict(x_test)","95a1ab73":"print(\"R^2 score:\",r2_score(y_test,y_pred))\nprint(\"Mean squred error:\",mean_squared_error(y_test,y_pred))","75918321":"## Hyper Parameters\n\nparams={\n \"learning_rate\"    : [0.05, 0.10, 0.15, 0.20, 0.25, 0.30,0.50 ] ,\n \"max_depth\"        : [ 3, 4, 5, 6, 8, 10, 12, 15],\n \"min_child_weight\" : [ 1, 3, 5, 7 ],\n \"gamma\"            : [ 0.0, 0.1, 0.2 , 0.3, 0.4 ],\n \"colsample_bytree\" : [ 0.3, 0.4, 0.5 , 0.7 ]\n    \n}","16a42fd6":"from sklearn.model_selection import RandomizedSearchCV\nxgb_model = xgb.XGBRegressor()\n\nrandom_search=RandomizedSearchCV(xgb_model,param_distributions=params,n_iter=5,n_jobs=-1,cv=5,verbose=3)\nrandom_search.fit(x_train,y_train)","b06b1a87":"random_search.best_params_ #printing best parameters","fc163aae":"random_search.best_estimator_  #best estimator ","19d731c4":"model=xgb.XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=0.3, gamma=0.4, gpu_id=-1,\n             importance_type='gain', interaction_constraints='',\n             learning_rate=0.05, max_delta_step=0, max_depth=12,\n             min_child_weight=5, monotone_constraints='()',\n             n_estimators=100, n_jobs=0, num_parallel_tree=1, random_state=0,\n             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n             tree_method='exact', validate_parameters=1, verbosity=None)","9c5d269c":"model.fit(x_train,y_train)","bd13bbc8":"y_pred=model.predict(x_test)","e7802548":"print(\"R^2 score:\",r2_score(y_test,y_pred))\nprint(\"Mean squred error:\",mean_squared_error(y_test,y_pred))","bc382874":"#repeat the same preprocessing steps as train data cleaned\n\ntest.isna().sum()","9a00b421":"from sklearn.impute import SimpleImputer\nimputer = SimpleImputer(strategy='most_frequent')# strategy can also be mean or median \ntest.iloc[:,:] = imputer.fit_transform(test)","3d88f07d":"df1=pd.get_dummies(test['Unit'],drop_first=True)\ndf2=pd.get_dummies(test['Decision_skill_possess'],drop_first=True)\ndf3=pd.get_dummies(test['Hometown'],drop_first=True)\ndf4=pd.get_dummies(test['Compensation_and_Benefits'],drop_first=True)\ndfg=pd.get_dummies(test['Gender'],drop_first=True)\ndfs=pd.get_dummies(test['Relationship_Status'],drop_first=True)\n\n#concatenating all the dataframes into test data\ntest=pd.concat([df1,df2,df3,df4,dfg,dfs,test],axis=1)\n\n#dropping the columns \ncolumns = ['Unit','Decision_skill_possess','Hometown','Compensation_and_Benefits','Gender','Relationship_Status','Employee_ID']\n\ntest.drop(columns,axis=1,inplace=True)","51fb85cf":"y_pred = model.predict(test)","20ad04cf":"submission = pd.read_csv(\"\/kaggle\/input\/hackerearth-employee-attrition\/sample_submission.csv\")\nsubmission.head()","57586308":"prediction = pd.DataFrame(y_pred,columns={'Attrition_rate'})","74211391":"submission.drop('Attrition_rate',axis=1,inplace=True) #dropping default column","09c6ef75":"submission=pd.concat([submission,prediction],axis=1)\nsubmission.head()\n","ba33cd32":"# Feature Engineering","004fbbbb":"Saving predictions(y_pred) ","40210f95":"# Model creation","c8824ff7":"<img src=\"https:\/\/www.thebalancecareers.com\/thmb\/RyLF9TrC_n00gRUulM7aAfmvitE=\/2122x1194\/smart\/filters:no_upscale()\/185002046-56b0974c3df78cf772cfe3c5.jpg\" \/>","0230713c":"**Unique values**","efeb23e7":"## repeat the steps for test data","f12e1fc7":"### Handling categorical varaibles","b9df04e5":"## Hypertuning the model","3603e327":"## Unique Values","8b1e97f5":"## loading train and test data","8c34e636":"## It's time for prediction","7583ba2b":"<h3><b>Handling Missing Values<\/b><\/h3>","1d6f5c84":"## Evaluate the model","4ed9b00a":"### Our model was succesfully created ....","fd6c099c":"**Correlation**\n* Correlation\u201d on the other hand measures both the strength and direction of the linear relationship between two variables.","28bb9321":"## Understanding the data ","c6df7ab8":"## Let's predict it!","560bd0ad":"# Exploratory Data Analysis","7c8a4384":"## Table of Contents\n<ul>\n    <li> Importing Files<\/li>\n    <li> Feature Engineering<\/li>\n    <li>Exploratory Data Analysis<\/li>\n    <li> Model Creation<\/li>\n<\/ul>\n","977d7e52":"<h1><center>Employee Attrition Rate Prediction<\/center><\/h1>\n\n<img src=\"https:\/\/www.electronicsb2b.com\/wp-content\/uploads\/2019\/01\/1-8.jpg\" \/>","54216f95":"#### from the randomized search cv we find out the best estimator, use this estimator to our model to get better accuracy","b1e1a02b":"## About Dataset\n\n   Variable         :       Description\n\n*  Employee_ID\t     :      Unique ID of each employee\n*  Age\t             :      Age of each employee\n* Unit               :      Department under which the employee work\n* Education\t          :     Rating of Qualification of an employee (1-5)\n* Gender\t           :    Male-0 or Female-1\n* Decision_skill_possess:\tDecision skill that an employee possesses\n* Post_Level\t      :      Level of the post in an organization (1-5)\n* Relationship_Status :\t    Categorical Married or Single \n* Pay_Scale\t          :      Rate in between 1 to 10\n* Time_of_service\t  :      Years in the organization\n* growth_rate\t      :      Growth rate in percentage of an employee\n* Time_since_promotion:\t    Time in years since the last promotion\n* Work_Life_balance\t  :      Rating for work-life balance given by an employee.\n* Travel_Rate\t      :      Rating based on travel history(1-3)\n* Hometown\t                Name of the city\n* Compensation_and_Benefits:\tCategorical Variabe\n* VAR1 - VAR5\t         :   Anominised variables\n* Attrition_rate(TARGET_VARIABLE):\tAttrition rate of each employee"}}