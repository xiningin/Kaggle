{"cell_type":{"36c215df":"code","5f45c017":"code","deb195bd":"code","dbae3647":"code","03815e4f":"code","a35472ea":"code","24c2da19":"code","4e37a497":"code","e9e1690f":"code","beff6436":"code","a59b2514":"markdown","d2e533df":"markdown","481981d6":"markdown","9d31c23b":"markdown","839b515f":"markdown"},"source":{"36c215df":"import pandas as pd\nimport numpy as np\nfrom scipy.constants import pi as PI\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import f1_score\nfrom xgboost import XGBClassifier\nimport os","5f45c017":"# Loading Data\ndataset_path = '..\/input\/dry-beans-classification-iti-ai-pro-intake01'","deb195bd":"data = pd.read_csv(os.path.join(dataset_path, 'train.csv'), encoding='utf8', index_col=0)\ndata.info()","dbae3647":"def get_surface_area(a, b, c):\n    return 4 * PI * (((a * b) ** 1.6 + (a * c) ** 1.6 + (b * c) ** 1.6) \/ 3) ** (1 \/ 1.6) \n\ndef gen_features(X):\n    \n    X['Volume'] = (4 \/ 3) * PI * (X['EquivDiameter'] \/ 2) ** 3\n    X['Axis3'] = 3\/4 * (X['Volume'] \/ (PI * X['MajorAxisLength'] * X['MinorAxisLength']))\n    X['SurfaceArea'] = get_surface_area(X['MajorAxisLength'], X['MinorAxisLength'], X['Axis3'])\n    X['Area2'] = PI * X['MajorAxisLength'] * X['Axis3']\n    X['oblong1'] = X['Area'] \/ X['Volume']\n\n    X['Compactness'] = X['Compactness'] * X['EquivDiameter']\n    return X.drop(columns=['ConvexArea'])","03815e4f":"# data.columns","a35472ea":"encoder = LabelEncoder()\nX = gen_features(data.drop('y', axis=1))\ny = encoder.fit_transform(data.y)","24c2da19":"from sklearn.model_selection import train_test_split\n\nX_train,X_val,y_train,y_val=train_test_split(X,y,test_size=.15,random_state=42)","4e37a497":"params = {\n    'colsample_bylevel': 0.83,\n    'learning_rate': 0.1,\n    'max_depth': 13,\n    'n_estimators': 1000}\n\nxgb_clf = XGBClassifier(verbosity=1, n_jobs=-1, **params, random_state=42, use_label_encoder=False)\nxgb_clf.fit(X_train, y_train)","e9e1690f":"from sklearn.metrics import f1_score\n\npred=xgb_clf.predict(X_val)\n\nf1_score(y_val, pred, average='macro')","beff6436":"df_test = pd.read_csv(os.path.join(dataset_path, 'test.csv'), encoding='utf8', index_col=0)\nX_test = gen_features(df_test)\npredictions = xgb_clf.predict(X_test)\ndf_test['y'] = list(encoder.inverse_transform(predictions))\ndf_test.y.to_csv('\/kaggle\/working\/submission.csv', index=True)","a59b2514":"## XGBoost","d2e533df":"# Submit Test file","481981d6":"# Prepare Features","9d31c23b":"# Load Data","839b515f":"# Split Data"}}