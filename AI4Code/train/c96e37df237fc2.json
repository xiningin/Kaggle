{"cell_type":{"19d03880":"code","63f711db":"code","967f393c":"code","c2fc935f":"code","41f1cf86":"code","ea1445d9":"code","8aa46eab":"code","f421fe36":"code","75745010":"code","1c3e7897":"code","040d8831":"code","8e928572":"code","de753b39":"code","b13e78e3":"code","61e49434":"code","406b1ced":"markdown","cce3c635":"markdown","f1c31b00":"markdown","e1bc1c29":"markdown","ae80ae72":"markdown","45e3ddf7":"markdown","0002b93a":"markdown","ef94c4f6":"markdown","11bb0b51":"markdown","9ef16002":"markdown","1f9709c5":"markdown","3bf9e61b":"markdown"},"source":{"19d03880":"import os\nimport cv2\nimport numpy as np\nimport pandas as pd\nfrom PIL import Image\nfrom matplotlib import pyplot as plt\nimport seaborn as sns","63f711db":"test = pd.read_csv('..\/input\/petfinder-pawpularity-score\/test.csv')\n\ndef get_test_file_path(image_id):\n    return \"..\/input\/petfinder-pawpularity-score\/test\/{}.jpg\".format(image_id)\n\ntest['file_path'] = test['Id'].apply(get_test_file_path)\n\ndisplay(test.head())","967f393c":"# ====================================================\n# Directory settings\n# ====================================================\nimport os\n\nOUTPUT_DIR = '.\/'\nMODEL_DIR = '..\/input\/petfinder-efficientnet-b0-starter-training\/'\nLGB_MODEL_DIR = '..\/input\/petfinder-efficientnet-b0-lgb-training\/'\nif not os.path.exists(OUTPUT_DIR):\n    os.makedirs(OUTPUT_DIR)","c2fc935f":"# ====================================================\n# CFG\n# ====================================================\nclass CFG:\n    num_workers=4\n    size=512\n    batch_size=32\n    model_name='tf_efficientnet_b0_ns'\n    seed=42\n    target_size=1\n    target_col='Pawpularity'\n    n_fold=5","41f1cf86":"# ====================================================\n# Library\n# ====================================================\nimport os\nimport gc\nimport sys\nimport math\nimport time\nimport pickle\nimport random\nimport shutil\nfrom pathlib import Path\nfrom contextlib import contextmanager\nfrom collections import defaultdict, Counter\n\nimport scipy as sp\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn import preprocessing\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import StratifiedKFold, GroupKFold, KFold\n\nfrom tqdm.auto import tqdm\nfrom functools import partial\n\nimport cv2\nfrom PIL import Image\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.optim import Adam, SGD\nimport torchvision.models as models\nfrom torch.nn.parameter import Parameter\nfrom torch.utils.data import DataLoader, Dataset\nfrom torch.optim.lr_scheduler import CosineAnnealingWarmRestarts, CosineAnnealingLR, ReduceLROnPlateau\n\nimport albumentations as A\nfrom albumentations.pytorch import ToTensorV2\nfrom albumentations import ImageOnlyTransform\n\nsys.path.append('..\/input\/pytorch-image-models\/pytorch-image-models-master')\nimport timm\n\nimport lightgbm as lgb\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')","ea1445d9":"# ====================================================\n# Utils\n# ====================================================\ndef get_score(y_true, y_pred):\n    score = mean_squared_error(y_true, y_pred, squared=False) # RMSE\n    return score\n\n\ndef init_logger(log_file=OUTPUT_DIR+'train.log'):\n    from logging import getLogger, INFO, FileHandler,  Formatter,  StreamHandler\n    logger = getLogger(__name__)\n    logger.setLevel(INFO)\n    handler1 = StreamHandler()\n    handler1.setFormatter(Formatter(\"%(message)s\"))\n    handler2 = FileHandler(filename=log_file)\n    handler2.setFormatter(Formatter(\"%(message)s\"))\n    logger.addHandler(handler1)\n    logger.addHandler(handler2)\n    return logger\n\nLOGGER = init_logger()\n\n\ndef seed_torch(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n\nseed_torch(seed=CFG.seed)","8aa46eab":"# ====================================================\n# Dataset\n# ====================================================\nclass TestDataset(Dataset):\n    def __init__(self, df, transform=None):\n        self.df = df\n        self.file_names = df['file_path'].values\n        self.transform = transform\n        \n    def __len__(self):\n        return len(self.df)\n\n    def __getitem__(self, idx):\n        file_path = self.file_names[idx]\n        image = cv2.imread(file_path)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        if self.transform:\n            image = self.transform(image=image)['image']\n        return image","f421fe36":"# ====================================================\n# Transforms\n# ====================================================\ndef get_transforms(*, data):\n    \n    if data == 'train':\n        return A.Compose([\n            A.RandomResizedCrop(CFG.size, CFG.size, scale=(0.85, 1.0)),\n            A.Normalize(\n                mean=[0.485, 0.456, 0.406],\n                std=[0.229, 0.224, 0.225],\n            ),\n            ToTensorV2(),\n        ])\n\n    elif data == 'valid':\n        return A.Compose([\n            A.Resize(CFG.size, CFG.size),\n            A.Normalize(\n                mean=[0.485, 0.456, 0.406],\n                std=[0.229, 0.224, 0.225],\n            ),\n            ToTensorV2(),\n        ])","75745010":"# ====================================================\n# MODEL\n# ====================================================\nclass CustomModel(nn.Module):\n    def __init__(self, cfg, pretrained=False):\n        super().__init__()\n        self.cfg = cfg\n        self.model = timm.create_model(self.cfg.model_name, pretrained=pretrained)\n        self.n_features = self.model.classifier.in_features\n        self.model.classifier = nn.Identity()\n        self.fc = nn.Linear(self.n_features, self.cfg.target_size)\n\n    def feature(self, image):\n        feature = self.model(image)\n        return feature\n        \n    def forward(self, image):\n        feature = self.feature(image)\n        output = self.fc(feature)\n        return output","1c3e7897":"# ====================================================\n# Helper functions\n# ====================================================\ndef get_features(test_loader, model, device):\n    model.eval()\n    features = []\n    tk0 = tqdm(enumerate(test_loader), total=len(test_loader))\n    for step, (images) in tk0:\n        images = images.to(device)\n        batch_size = images.size(0)\n        with torch.no_grad():\n            feature = model.feature(images)\n        features.append(feature.to('cpu').numpy())\n    features = np.concatenate(features)\n    return features","040d8831":"IMG_FEATURES = []\ntest_dataset = TestDataset(test, transform=get_transforms(data='valid'))\ntest_loader = DataLoader(test_dataset, \n                         batch_size=CFG.batch_size * 2, \n                         shuffle=False, \n                         num_workers=CFG.num_workers, pin_memory=True, drop_last=False)\nfor fold in range(CFG.n_fold):\n    model = CustomModel(CFG, pretrained=False)\n    state = torch.load(MODEL_DIR+f'{CFG.model_name}_fold{fold}_best.pth', \n                       map_location=torch.device('cpu'))['model']\n    model.load_state_dict(state)\n    model.to(device)\n    features = get_features(test_loader, model, device)\n    IMG_FEATURES.append(features)\n    del state; gc.collect()\n    torch.cuda.empty_cache()","8e928572":"features = ['Subject Focus', 'Eyes', 'Face', 'Near', 'Action', 'Accessory',\n            'Group', 'Collage', 'Human', 'Occlusion', 'Info', 'Blur'] + [f\"img_{i}\" for i in np.arange(1280)]","de753b39":"def inference_single_lightgbm(test, features, model_path, fold):\n    test[[f\"img_{i}\" for i in np.arange(1280)]] = IMG_FEATURES[fold]\n    with open(model_path, 'rb') as fin:\n        clf = pickle.load(fin)\n    prediction = clf.predict(test[features], num_iteration=clf.best_iteration)\n    return prediction","b13e78e3":"model_paths = [(fold, LGB_MODEL_DIR+f'lightgbm_fold{fold}.pkl') for fold in range(5)]\npredictions = [inference_single_lightgbm(test, features, model_path, fold) for fold, model_path in model_paths]\npredictions = np.mean(predictions, 0)","61e49434":"test['Pawpularity'] = predictions\ntest[['Id', 'Pawpularity']].to_csv('submission.csv', index=False)\ndisplay(test[['Id', 'Pawpularity']].head())","406b1ced":"# Library","cce3c635":"# MODEL","f1c31b00":"# Helper functions","e1bc1c29":"# Data Loading","ae80ae72":"# CFG","45e3ddf7":"![](https:\/\/www.petfinder.my\/images\/cuteness_meter.jpg)","0002b93a":"# Transforms","ef94c4f6":"# LGB","11bb0b51":"# Directory settings","9ef16002":"# Utils","1f9709c5":"# Dataset","3bf9e61b":"# About this notebook\n- PyTorch efficientnet_b0 + LGB starter code\n- efficientnet_b0 is from https:\/\/www.kaggle.com\/yasufuminakama\/petfinder-efficientnet-b0-starter-training\n- LGB is from https:\/\/www.kaggle.com\/yasufuminakama\/petfinder-efficientnet-b0-lgb-training\n\nIf this notebook is helpful, feel free to upvote :)"}}