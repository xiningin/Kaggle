{"cell_type":{"ad566770":"code","952127dc":"code","173384a0":"code","0ab6f565":"code","b6653118":"code","22fdfe04":"code","8bb5ad7e":"code","06edf8e6":"code","cdc109ec":"code","898507cd":"code","0a7109ea":"markdown","12b884c3":"markdown","7af29fe2":"markdown","8f8907e1":"markdown","3dff350d":"markdown","5962f898":"markdown","363f85cc":"markdown","1d29af52":"markdown","a49c8e74":"markdown","ae68d4d9":"markdown","1671a888":"markdown","9fc8e135":"markdown"},"source":{"ad566770":"# Importing the Keras libraries and packages\nimport tensorflow as tf\n\n# Initialising the CNN\nclassifier = tf.keras.models.Sequential()\n\nclassifier.add(tf.keras.layers.Convolution2D(filters=32, kernel_size=3, padding=\"same\", input_shape=(224, 224, 3),\n                                             activation='relu'))\n\nclassifier.add(tf.keras.layers.MaxPooling2D(pool_size=2, strides=2, padding='valid'))\n\nclassifier.add(tf.keras.layers.Convolution2D(filters=64, kernel_size=3, padding=\"same\", activation=\"relu\"))\nclassifier.add(tf.keras.layers.MaxPooling2D(pool_size=2, strides=2, padding='valid'))\n\n\nclassifier.add(tf.keras.layers.Convolution2D(filters=64, kernel_size=3, padding=\"same\", activation=\"relu\"))\nclassifier.add(tf.keras.layers.Dropout(0.2))\nclassifier.add(tf.keras.layers.MaxPooling2D(pool_size=2, strides=2, padding='valid'))\n\n\nclassifier.add(tf.keras.layers.Convolution2D(filters=128, kernel_size=3, padding=\"same\", activation=\"relu\"))\nclassifier.add(tf.keras.layers.Dropout(0.2))\nclassifier.add(tf.keras.layers.MaxPooling2D(pool_size=2, strides=2, padding='valid'))\n\nclassifier.add(tf.keras.layers.Convolution2D(filters=256, kernel_size=3, padding=\"same\", activation=\"relu\"))\nclassifier.add(tf.keras.layers.Dropout(0.2))\nclassifier.add(tf.keras.layers.MaxPooling2D(pool_size=2, strides=2, padding='valid'))\n\nclassifier.add(tf.keras.layers.Convolution2D(filters=64, kernel_size=3, padding=\"same\", activation=\"relu\"))\nclassifier.add(tf.keras.layers.MaxPooling2D(pool_size=2, strides=2, padding='valid'))\n\n\nclassifier.add(tf.keras.layers.Flatten())\n\nclassifier.add(tf.keras.layers.Dense(units=128, activation='relu'))\nclassifier.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))\n\nclassifier.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\nclassifier.summary()\n","952127dc":"\n# Part 2 - Fitting the CNN to the images\n\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator(rescale=1. \/ 255,\n                                   shear_range=0.2,\n                                   zoom_range=0.2,\n                                   horizontal_flip=True)\n\ntest_datagen = ImageDataGenerator(rescale=1. \/ 255)\n\ntraining_set = train_datagen.flow_from_directory('\/kaggle\/input\/corona-chest-xray-prediction\/Data\/train',\n                                                 target_size=(224,224),\n                                                 batch_size=32,\n                                                 class_mode='binary')\n\ntest_set = test_datagen.flow_from_directory('\/kaggle\/input\/corona-chest-xray-prediction\/Data\/test',\n                                            target_size=(224,224),\n                                            batch_size=32,\n                                            class_mode='binary')\n","173384a0":"history = classifier.fit(training_set,\n                         steps_per_epoch=4,\n                         epochs=25,\n                         validation_data=test_set,\n                         validation_steps=4)\n\nclassifier.save('my_model.h5')\n","0ab6f565":"# evaluation on test set\nloaded_model = tf.keras.models.load_model('my_model.h5')\nloaded_model.evaluate(test_set)\n","b6653118":"#plot accuracy and loss\nimport matplotlib.pyplot as plt\n\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","22fdfe04":"# for only one prediction\nimport numpy as np\nfrom keras.preprocessing import image\n\ntest_image = image.load_img('\/kaggle\/input\/corona-chest-xray-prediction\/Data\/test\/Normal\/IM-0283-0001.jpeg',target_size=(224,224))\ntest_image = image.img_to_array(test_image)\ntest_image = np.expand_dims(test_image, axis=0)\nresult = classifier.predict(test_image)\ntraining_set.class_indices\nif result[0][0] == 1:\n    prediction = 'Normal'\nelse:\n    prediction = 'Covid'\nprint(prediction)","8bb5ad7e":"# for only one prediction\nimport numpy as np\nfrom keras.preprocessing import image\n\ntest_image = image.load_img('\/kaggle\/input\/corona-chest-xray-prediction\/Data\/train\/Covid\/16654_1_1.png',target_size=(224,224))\ntest_image = image.img_to_array(test_image)\ntest_image = np.expand_dims(test_image, axis=0)\nresult = classifier.predict(test_image)\ntraining_set.class_indices\nif result[0][0] == 1:\n    prediction = 'Normal'\nelse:\n    prediction = 'Covid'\nprint(prediction)\n","06edf8e6":"# for whole test set  {'Covid': 0, 'Normal': 1}\nfrom keras.preprocessing import image\nimport numpy as np\nimport os\nimport tensorflow as tf\n\n# image folder\nfolder_path = '..\/input\/corona-chest-xray-prediction\/original test set'\n# path to model\nmodel_path = '.\/my_model.h5'\n\n# load the trained model\nclassifier = tf.keras.models.load_model('.\/my_model.h5')\nclassifier.compile(loss='binary_crossentropy',\n                   optimizer='adam',\n                   metrics=['accuracy'])\n\n# load all images into a list\nimages = []\nfor img in os.listdir(folder_path):\n    img = os.path.join(folder_path, img)\n    img = image.load_img(img, target_size=(224,224))\n    img = image.img_to_array(img)\n    img = np.expand_dims(img, axis=0)\n    images.append(img)\n\n# stack up images list to pass for prediction\nimages = np.vstack(images)\nclasses = classifier.predict_classes(images, batch_size=10)\nprint(classes)\n","cdc109ec":"# plot confusion metrix\ny_pred = []\ny_test = []\nimport os\n\nfor i in os.listdir(\"..\/input\/corona-chest-xray-prediction\/Data\/test\/Normal\"):\n    img = image.load_img(\"..\/input\/corona-chest-xray-prediction\/Data\/test\/Normal\/\" + i, target_size=(224,224))\n    img = image.img_to_array(img)\n    img = np.expand_dims(img, axis=0)\n    p = classifier.predict_classes(img)\n    y_test.append(p[0, 0])\n    y_pred.append(1)\n\nfor i in os.listdir(\"..\/input\/corona-chest-xray-prediction\/Data\/test\/Covid\"):\n    img = image.load_img(\"..\/input\/corona-chest-xray-prediction\/Data\/test\/Covid\/\" + i, target_size=(224,224))\n    img = image.img_to_array(img)\n    img = np.expand_dims(img, axis=0)\n    p = classifier.predict_classes(img)\n    y_test.append(p[0, 0])\n    y_pred.append(0)\n\ny_pred = np.array(y_pred)\ny_test = np.array(y_test)\n\nfrom sklearn.metrics import confusion_matrix\n\ncm = confusion_matrix(y_pred, y_test)\nimport seaborn as sns\n\nsns.heatmap(cm, cmap=\"plasma\", annot=True)","898507cd":"from sklearn.metrics import classification_report\n\nprint(classification_report(y_pred, y_test))","0a7109ea":"***Coronavirus is a family of viruses that are named after their spiky crown. The novel coronavirus, also known as SARS-CoV-2, is a contagious respiratory virus that first reported in Wuhan, China. On 2\/11\/2020, the World Health Organization designated the name COVID-19 for the disease caused by the novel coronavirus. This notebook aims at exploring COVID-19 through data analysis and projections.***","12b884c3":"**below code is use to predict only one image at a time** ","7af29fe2":"here, i have 3 folders in which train,test and original test set.train and test have sub folders called covid and normal so covid indicating that the x-ray of that person having corona virus and normal folder have images of x-ray that person do not have corona virus. and the last folder which is original test set which includes mix images of covid and normal people x-ray so by that folder's images we will predict by individual images to find out that the x-ray that image is having covid or not. ","8f8907e1":"i have copied all the test folder's images covid and normal and put them in one folder called original test set so we will see how our model perform on that. so,test and original test set folders both have same images but i have also added 35 random images of covid and normal people's x-ray from internet for better understanding.  ","3dff350d":"# Feel free to provide me suggestions for better accuarcy.","5962f898":"**as we can see the confusion matrix only 7 image prediction is failed and 93 images are correct that's seems like our model is perfectly fitted on the dataset.**","363f85cc":"![Coronavirus-CDC-645x645.jpg](attachment:Coronavirus-CDC-645x645.jpg)","1d29af52":"**since our model's accuracy is 98% so some image will not show proper output.\nbelow i have plotted confusion matrix for better understanding.**","a49c8e74":"# **Stay safe and healthy.**","ae68d4d9":"**here i am going to use convolutional neural network and after this notebook i will publish another notebook in which i have same dataset but i will use transfer learning(vgg16,vgg19 and resnet50).**","1671a888":"# **please do upvote if you like**","9fc8e135":"i hope you all are safe. here i am going to make notebook of covid-19 prediction with the help of chesr x-ray.\nas you can see now in the world the corona virus is spreading more and more and due to that lots of people are dying."}}