{"cell_type":{"55036fea":"code","6e56e354":"code","7557cf46":"code","d689d8c2":"code","55d224fe":"code","4cf70f4a":"code","2790ca93":"code","2fe6dd94":"code","5b2b896d":"code","29e35db7":"code","293c1584":"code","c145bb59":"code","fd2ccf0d":"code","3ee43b58":"code","c952e9c3":"code","d0005407":"code","bca59202":"code","289483cb":"code","88fdb210":"code","75e41cde":"code","1af95a1c":"code","bd4c3467":"code","6565a47c":"code","d3c0bced":"code","d45b1533":"code","6ed4e30d":"code","89911969":"code","0d5db997":"code","4ac55494":"code","4104385e":"code","899d8319":"code","11fc6d12":"code","c997ecd8":"code","2a306988":"markdown","06e764bd":"markdown","60e4c9eb":"markdown","f69dec82":"markdown","8c9ea68f":"markdown","6dce0811":"markdown","5a84e2c2":"markdown","62d73539":"markdown","f1b2cd3b":"markdown","5dcf9b67":"markdown","8291caca":"markdown","272e02e6":"markdown","9297a54e":"markdown","bcc8c900":"markdown","7d3e2277":"markdown","c790bf52":"markdown","c2999c02":"markdown","50d6c03a":"markdown","46ebe038":"markdown","b5197a03":"markdown","8f88621c":"markdown","fac4d47e":"markdown"},"source":{"55036fea":"import nltk\r\nnltk.download('stopwords')\r\nfrom nltk.corpus import stopwords","6e56e354":"import pandas as pd\nimport numpy as np\nfrom ast import literal_eval\n\ndef read_data(filename):\n    data = pd.read_csv(filename, sep='\\t')\n    data['tags'] = data['tags'].apply(literal_eval)\n    return data\n\ntrain_data = read_data('\/kaggle\/input\/stackoverflow-data\/train.tsv') \nval_data = read_data('\/kaggle\/input\/stackoverflow-data\/validation.tsv')   \ntest_data = pd.read_csv('\/kaggle\/input\/stackoverflow-data\/test.tsv', sep='\\t')\ntrain_data.head()","7557cf46":"X_train = train_data['title'].values\r\ny_train = train_data['tags'].values\r\nX_val = val_data['title'].values\r\ny_val = val_data['tags'].values\r\nX_test = test_data['title'].values\r\nprint(X_train.shape, y_train.shape)","d689d8c2":"import re\r\n\r\nREPLACE_BY_SPACE_RE = re.compile('[\/(){}\\[\\]\\|@,;]')\r\nBAD_SYMBOLS_RE = re.compile('[^0-9a-z #+_]')\r\nSTOPWORDS = set(stopwords.words('english'))\r\n\r\ndef text_prepare(text):\r\n    \"\"\"\r\n        text: a string        \r\n        return: modified initial string\r\n    \"\"\"\r\n    text = text.lower() # lowercase text\r\n    text = REPLACE_BY_SPACE_RE.sub(' ', text) # replace REPLACE_BY_SPACE_RE symbols by space in text\r\n    text = BAD_SYMBOLS_RE.sub('', text) # delete symbols which are in BAD_SYMBOLS_RE from text\r\n    text = ' '.join([word for word in text.split() if word not in STOPWORDS]) # delete stopwords from text\r\n    return text.strip()\r\n","55d224fe":"def test_text_prepare():\r\n    examples = [\"SQL Server - any equivalent of Excel's CHOOSE function?\",\r\n                \"How to free c++ memory vector<int> * arr?\"]\r\n    answers = [\"sql server equivalent excels choose function\", \r\n               \"free c++ memory vectorint arr\"]\r\n    for ex, ans in zip(examples, answers):\r\n        if text_prepare(ex) != ans:\r\n            return \"Wrong answer for the case: '%s'\" % ex\r\n    return 'Basic tests are passed.'    \r\n    \r\nprint(test_text_prepare())","4cf70f4a":"# Display full text in column\npd.set_option('display.max_colwidth', None)\ndf_test_text = pd.read_csv('\/kaggle\/input\/stackoverflow-data\/text_prepare_tests.tsv', '\\t', names=['test_text'])\ndf_test_text['test_text_processed'] = df_test_text['test_text'].apply(text_prepare)\ndf_test_text.head(10)","2790ca93":"X_train = np.array([text_prepare(text) for text in X_train])\r\nX_val = np.array([text_prepare(text) for text in X_val])\r\nX_test = np.array([text_prepare(text) for text in X_test])\r\nX_train.shape","2fe6dd94":"def get_word_count(data):\r\n    word_count = {}\r\n    for text in data:    \r\n        for word in text.split():\r\n            if word in word_count.keys():\r\n                word_count[word] += 1\r\n            else:\r\n                word_count[word] = 1\r\n    return word_count\r\n\r\ntrain_word_freq = get_word_count(X_train)\r\n\r\ndef get_topn_dictitems_byvalue(dict_data, n):\r\n    freq_word = [(value, key) for key, value in dict_data.items()]\r\n    freq_word.sort(reverse=True, key=lambda k: k[0])\r\n    return freq_word[:n]\r\n\r\nprint('3 most popular words in train data are:')\r\nfor item in get_topn_dictitems_byvalue(train_word_freq, 3):\r\n    print(f\"'{item[1]}' with a count of {item[0]}\")\r\n\r\n","5b2b896d":"print(len(train_word_freq.keys()))","29e35db7":"def get_tag_count(tag_data):\r\n    tag_count = {}\r\n    for tags in tag_data:\r\n        for tag in tags:\r\n            if tag in tag_count.keys():\r\n                tag_count[tag] += 1\r\n            else:\r\n                tag_count[tag] = 1\r\n    return tag_count\r\n    \r\ntag_freq = get_tag_count(y_train)    \r\nprint('3 most popular tags in train data are:')\r\ntop3_tags = get_topn_dictitems_byvalue(tag_freq, 3)\r\nfor item in top3_tags:\r\n    print(f\"'{item[1]}' with a count of {item[0]}\")                ","293c1584":"DICT_SIZE = 5000\r\n# we use the most frequent 5000 words as our vocabulary\r\nVOCAB = [item[1] for item in get_topn_dictitems_byvalue(train_word_freq, DICT_SIZE)]\r\nWORDS_TO_INDEX = {word: i for i, word in enumerate(VOCAB)}\r\n\r\ndef my_bag_of_words(text, words_to_index, dict_size):\r\n    \"\"\"\r\n        text: a string\r\n        dict_size: size of the dictionary\r\n        \r\n        return a vector which is a bag-of-words representation of 'text'\r\n    \"\"\"\r\n    result_vector = np.zeros(dict_size)\r\n    for word in text.split():\r\n        if word in words_to_index.keys():\r\n            result_vector[words_to_index[word]] += 1\r\n    return result_vector","c145bb59":"def test_my_bag_of_words():\r\n    words_to_index = {'hi': 0, 'you': 1, 'me': 2, 'are': 3}\r\n    examples = ['hi how are you']\r\n    answers = [[1, 1, 0, 1]]\r\n    for ex, ans in zip(examples, answers):\r\n        if (my_bag_of_words(ex, words_to_index, 4) != ans).any():\r\n            return \"Wrong answer for the case: '%s'\" % ex\r\n    return 'Basic tests are passed.'\r\n\r\nprint(test_my_bag_of_words())   ","fd2ccf0d":"from scipy.sparse import csr_matrix\r\n\r\nX_train_compressed = csr_matrix([my_bag_of_words(text, WORDS_TO_INDEX, 5000) for text in X_train])\r\nX_val_compressed = csr_matrix([my_bag_of_words(text, WORDS_TO_INDEX, 5000) for text in X_val])\r\nX_test_compressed = csr_matrix([my_bag_of_words(text, WORDS_TO_INDEX, 5000) for text in X_test])","3ee43b58":"def get_row_nonzero_count(csr_matrix, row_index):\r\n    row = csr_matrix[row_index].toarray()[0]    \r\n    non_zero_items = [(i, item) for i, item in enumerate(row) if item != 0]\r\n    return len(non_zero_items)\r\n\r\nget_row_nonzero_count(X_train_compressed, 10)","c952e9c3":"from sklearn.feature_extraction.text import CountVectorizer\r\n\r\nvectorizer = CountVectorizer(vocabulary=VOCAB)\r\nX_train_csr = vectorizer.transform(X_train)\r\nprint(X_train_csr.shape)\r\nnonzero_terms = vectorizer.inverse_transform(X_train_csr[10])\r\nprint(len(nonzero_terms[0]))","d0005407":"from sklearn.feature_extraction.text import TfidfVectorizer\r\n\r\ntfidf_vectorizer = TfidfVectorizer(max_df=0.9, min_df=5, ngram_range=(1,2))\r\nX_train_tfidf = tfidf_vectorizer.fit_transform(X_train)\r\nX_train_tfidf.shape\r\n","bca59202":"if 'c++' not in tfidf_vectorizer.vocabulary_.keys():\r\n    print('no c++ in vocabulary')\r\nif 'c#' not in tfidf_vectorizer.vocabulary_.keys():\r\n    print('no c# in vocabulary')    ","289483cb":"tfidf_vectorizer = TfidfVectorizer(token_pattern='\\S+', max_df=0.9, min_df=5, ngram_range=(1,2))\r\ntfidf_vectorizer.fit(X_train)\r\nX_train_tfidf = tfidf_vectorizer.transform(X_train)\r\nX_val_tfidf = tfidf_vectorizer.transform(X_val)\r\nX_test_tfidf = tfidf_vectorizer.transform(X_test)\r\nX_train_tfidf.shape","88fdb210":"if 'c++' in tfidf_vectorizer.vocabulary_.keys():\r\n    print('c++ in vocabulary')\r\nif 'c#' in tfidf_vectorizer.vocabulary_.keys():\r\n    print('c# in vocabulary')    ","75e41cde":"from sklearn.preprocessing import MultiLabelBinarizer\r\n\r\nmlb = MultiLabelBinarizer()\r\ny_train_binary = mlb.fit_transform(y_train)\r\ny_val_binary = mlb.fit_transform(y_val)\r\nprint(y_train_binary.shape, y_val_binary.shape)\r\noutput_tag_labels = mlb.classes_\r\noutput_tag_labels","1af95a1c":"from sklearn.multiclass import OneVsRestClassifier\r\nfrom sklearn.naive_bayes import MultinomialNB\r\n\r\ndef train_classifier():\r\n    \"\"\"\r\n      X_train, y_train \u2014 training data\r\n      \r\n      return: trained classifier\r\n    \"\"\"\r\n    \r\n    # Create and fit LogisticRegression wraped into OneVsRestClassifier.\r\n    mnb = MultinomialNB()\r\n    ovr = OneVsRestClassifier(mnb)    \r\n    return ovr\r\n    ","bd4c3467":"classifier_mybag = train_classifier()\r\nclassifier_mybag.fit(X_train_compressed, y_train_binary)","6565a47c":"classifier_tfidf = train_classifier()\r\nclassifier_tfidf.fit(X_train_tfidf, y_train_binary)","d3c0bced":"y_val_predicted_labels_mybag = classifier_mybag.predict(X_val_compressed)\r\ny_val_predicted_labels_tfidf = classifier_tfidf.predict(X_val_tfidf)","d45b1533":"# For predictions done using TfIdfVectorizer\r\ny_val_pred_tfidf = mlb.inverse_transform(y_val_predicted_labels_tfidf)\r\ny_val = mlb.inverse_transform(y_val_binary)\r\ny_val_pred_tfidf = [\",\".join(item) for item in y_val_pred_tfidf]\r\ny_val = [\",\".join(item) for item in y_val]\r\ndf_tfidf = pd.DataFrame(list(zip(X_val, y_val, y_val_pred_tfidf)), columns=['title', 'true tags', 'predicted tags'])\r\ndf_tfidf.head(100)","6ed4e30d":"# For predictions done using CountVectorizer\r\ny_val_pred_mybag = mlb.inverse_transform(y_val_predicted_labels_mybag)\r\ny_val_pred_mybag = [\",\".join(item) for item in y_val_pred_mybag]\r\ndf_mybag = pd.DataFrame(list(zip(X_val, y_val, y_val_pred_mybag)), columns=['title', 'true tags', 'predicted tags'])\r\ndf_mybag.head(100)","89911969":"from sklearn.metrics import accuracy_score, f1_score, roc_auc_score\r\n\r\ndef print_multilabel_classification_metrics(y_true, y_pred):\r\n    acc_tfidf = accuracy_score(y_true, y_pred)\r\n    f1_macro = f1_score(y_true, y_pred, average='macro')\r\n    f1_micro = f1_score(y_true, y_pred, average='micro')\r\n    f1_weighted = f1_score(y_true, y_pred, average='weighted')    \r\n    print(f\"accuracy score = {round(acc_tfidf, 4)} \\nmacro f1 score = {round(f1_macro, 4)} \\nmicro f1 score = {round(f1_micro, 4)} \\nweighted f1 score = {round(f1_weighted, 4)}\" )\r\n\r\nprint(\"With tfidf\")\r\nprint_multilabel_classification_metrics(y_val_binary, y_val_predicted_labels_tfidf)\r\nprint(\"With mybag\")\r\nprint_multilabel_classification_metrics(y_val_binary, y_val_predicted_labels_mybag)\r\n","0d5db997":"from sklearn.metrics import roc_auc_score\r\ny_score_proba_mybag = classifier_mybag.predict_proba(X_val_compressed)\r\nauc_score_mybag = roc_auc_score(y_val_binary, y_score_proba_mybag, average=None)\r\nauc_score_mybag = sorted(auc_score_mybag, reverse=True)\r\nprint(\"ROC AUC score for multilabel classification using bag of words approach\")\r\nprint(auc_score_mybag)","4ac55494":"from sklearn.metrics import roc_auc_score\r\ny_score_proba_tfidf = classifier_tfidf.predict_proba(X_val_tfidf)\r\nauc_score_tfidf = roc_auc_score(y_val_binary, y_score_proba_tfidf, average=None)\r\nprint(\"ROC AUC score for multilabel classification using tfidf approach\")\r\nprint(auc_score_tfidf)","4104385e":"from sklearn import metrics\r\nimport matplotlib.pyplot as plt\r\n\r\n# plot the roc curve\r\ndef plot_roc_curve(y_true, y_pred, label_index_dict, approach):\r\n    plt.figure(figsize=(10, 6))\r\n    for label, index in label_index_dict.items():          \r\n        y = y_true[:, index]\r\n        y_score = y_pred[:, index]      \r\n        auc_score = roc_auc_score(y, y_score)\r\n        fpr, tpr, thresholds = metrics.roc_curve(y, y_score)        \r\n        plt.plot(fpr, tpr, label=f\"ROC curve for tag {label} with auc = {round(auc_score, 4)}\")\r\n    plt.plot([0,1], [0,1], linestyle=\":\", linewidth=4, color=\"black\", label=\"No skill\")        \r\n    plt.title(f'ROC curve for multilabel classification with {approach}')\r\n    plt.xlabel('False positive rate')\r\n    plt.ylabel('True Positive Rate')\r\n    plt.legend(loc='lower right')\r\n\r\nlabel_index_dict = {}\r\nfor count, tag in top3_tags:\r\n    for i, label in enumerate(output_tag_labels):\r\n        if label == tag:\r\n            label_index_dict[label] = i\r\n\r\nprint(label_index_dict)\r\nplot_roc_curve(y_val_binary, y_score_proba_mybag, label_index_dict, \"mybag\")\r\n","899d8319":"plot_roc_curve(y_val_binary, y_score_proba_tfidf, label_index_dict, \"tfidf\")","11fc6d12":"\r\nmybag_test_preds = classifier_mybag.predict(X_test_compressed)\r\nmybag_test_pred_tags = mlb.inverse_transform(mybag_test_preds)\r\nmybag_test_pred_tags = [\",\".join(item) for item in mybag_test_pred_tags]\r\ndf_mybag_test_pred = pd.DataFrame(list(zip(X_test, mybag_test_pred_tags)), columns=['title', 'predicted tags'])\r\ndf_mybag_test_pred.head(20)","c997ecd8":"# predictions on test set with features created using tfidf\r\ntfidf_test_preds = classifier_tfidf.predict(X_test_tfidf)\r\ntfidf_test_pred_tags = mlb.inverse_transform(tfidf_test_preds)\r\ntfidf_test_pred_tags = [\",\".join(item) for item in tfidf_test_pred_tags]\r\ndf_tfidf_test_pred = pd.DataFrame(list(zip(X_test, tfidf_test_pred_tags)), columns=['title', 'predicted tags'])\r\ndf_tfidf_test_pred.head(20)","2a306988":"Run your implementation for questions from file *text_prepare_tests.tsv* to earn the points.","06e764bd":"For each tag and for each word calculate how many times they occur in the train corpus. \r\n\r\n**Task 2 (WordsTagsCount).** Find 3 most popular tags and 3 most popular words in the train data and submit the results to earn the points.","60e4c9eb":"Now, we would need to compare the results of different predictions, e.g. to see whether TF-IDF transformation helps or to try different regularization techniques in logistic regression. For all these experiments, we need to setup evaluation procedure. \r\n\r\n### Evaluation\r\n\r\nTo evaluate the results we will use several classification metrics:\r\n - [Accuracy](http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.accuracy_score.html)\r\n - [F1-score](http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.f1_score.html)\r\n - [Area under ROC-curve](http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.roc_auc_score.html)\r\n - [Area under precision-recall curve](http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.average_precision_score.html#sklearn.metrics.average_precision_score) \r\n \r\nMake sure you are familiar with all of them. How would you expect the things work for the multi-label scenario? Read about micro\/macro\/weighted averaging following the sklearn links provided above.","f69dec82":"### MultiLabel classifier\r\n\r\nAs we have noticed before, in this task each example can have multiple tags. To deal with such kind of prediction, we need to transform labels in a binary form and the prediction will be a mask of 0s and 1s. For this purpose it is convenient to use [MultiLabelBinarizer](http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.preprocessing.MultiLabelBinarizer.html) from *sklearn*.","8c9ea68f":"Train the classifiers for different data transformations: *bag-of-words* and *tf-idf*.\r\n\r\nIf you receive a convergence warning, please set parameter *max_iter* in LogisticRegression to a larger value (the default is 100).","6dce0811":"For each of the 100 output labels calculate the ROC AUC score which is the area under the ROC curve for the classifier for each of the 100 labels ","5a84e2c2":"Once you have done text preprocessing, always have a look at the results. Be very careful at this step, because the performance of future models will drastically depend on it. \r\n\r\nIn this case, check whether you have c++ or c# in your vocabulary, as they are obviously important tokens in our tags prediction task:","62d73539":"If you can't find it, we need to understand how did it happen that we lost them? It happened during the built-in tokenization of TfidfVectorizer. Luckily, we can influence on this process. Get back to the function above and use '(\\S+)' regexp as a *token_pattern* in the constructor of the vectorizer.  ","f1b2cd3b":"In this task you will deal with a dataset of post titles from StackOverflow. You are provided a split to 3 sets: *train*, *validation* and *test*. All corpora (except for *test*) contain titles of the posts and corresponding tags (100 tags are available). The *test* set is provided for Coursera's grading and doesn't contain answers. Upload the corpora using *pandas* and look at the data:","5dcf9b67":"### Download the training, validation and test data (do this if the week1\/data folder is empty)","8291caca":"**Task 4 (MultilabelClassification).** Once we have the evaluation set up, we suggest that you experiment a bit with training your classifiers. We will use *F1-score weighted* as an evaluation metric. .\r\n\r\nYou also could try other improvements of the preprocessing \/ model, if you want. ","272e02e6":"One of the most known difficulties when working with natural data is that it's unstructured. For example, if you use it \"as is\" and extract tokens just by splitting the titles by whitespaces, you will see that there are many \"weird\" tokens like *3.5?*, *\"Flip*, etc. To prevent the problems, it's usually useful to prepare the data somehow. In this task you'll write a function, which will be also used in the other assignments. \r\n\r\n**Task 1 (TextPrepare).** Implement the function *text_prepare* following the instructions. After that, run the function *test_text_prepare* to test it on tiny cases and submit it to Coursera.","9297a54e":"Now you can create predictions for the data. You will need two types of predictions: labels and scores.","bcc8c900":"Instead of custom code one case use sklearn's implementation to convert input text data to bag of words sparse matrix representation","7d3e2277":"### Text preprocessing\r\nFor this and most of the following assignments you will need to use a list of stop words. It can be downloaded from nltk:","c790bf52":"Now apply the implemented function to all samples (this might take up to a minute):","c2999c02":"Implement the function *train_classifier* for training a classifier. In this task we suggest to use One-vs-Rest approach, which is implemented in [OneVsRestClassifier](http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.multiclass.OneVsRestClassifier.html) class. In this approach *k* classifiers (= number of tags) are trained. As a basic classifier, use [LogisticRegression](http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.LogisticRegression.html). It is one of the simplest methods, but often it performs good enough in text classification tasks. It might take some time, because a number of classifiers to train is large.","50d6c03a":"As you can see, *title* column contains titles of the posts and *tags* column contains the tags. It could be noticed that a number of tags for a post is not fixed and could be as many as necessary.\r\n\r\nFor a more comfortable usage, initialize *X_train*, *X_val*, *X_test*, *y_train*, *y_val*.","46ebe038":"### Transforming text to a vector\r\n\r\nMachine Learning algorithms work with numeric data and we cannot use the provided text data \"as is\". There are many ways to transform text data to numeric vectors. In this task you will try to use two of them.\r\n\r\n#### Bag of words\r\n\r\nOne of the well-known approaches is a *bag-of-words* representation. To create this transformation, follow the steps:\r\n1. Find *N* most popular words in train corpus and numerate them. Now we have a dictionary of the most popular words.\r\n2. For each title in the corpora create a zero vector with the dimension equals to *N*.\r\n3. For each text in the corpora iterate over words which are in the dictionary and increase by 1 the corresponding coordinate.\r\n\r\nLet's try to do it for a toy example. Imagine that we have *N* = 4 and the list of the most popular words is \r\n\r\n    ['hi', 'you', 'me', 'are']\r\n\r\nThen we need to numerate them, for example, like this: \r\n\r\n    {'hi': 0, 'you': 1, 'me': 2, 'are': 3}\r\n\r\nAnd we have the text, which we want to transform to the vector:\r\n\r\n    'hi how are you'\r\n\r\nFor this text we create a corresponding zero vector \r\n\r\n    [0, 0, 0, 0]\r\n    \r\nAnd iterate over all words, and if the word is in the dictionary, we increase the value of the corresponding position in the vector:\r\n\r\n    'hi':  [1, 0, 0, 0]\r\n    'how': [1, 0, 0, 0] # word 'how' is not in our dictionary\r\n    'are': [1, 0, 0, 1]\r\n    'you': [1, 1, 0, 1]\r\n\r\nThe resulting vector will be \r\n\r\n    [1, 1, 0, 1]\r\n   \r\nImplement the described encoding in the function *my_bag_of_words* with the size of the dictionary equals to 5000. To find the most common words use train data. You can test your code using the function *test_my_bag_of_words*.","b5197a03":"Now we can preprocess the titles using function *text_prepare* and  making sure that the headers don't have bad symbols:","8f88621c":"#### TF-IDF\r\n\r\nThe second approach extends the bag-of-words framework by taking into account total frequencies of words in the corpora. It helps to penalize too frequent words and provide better features space. \r\n\r\nImplement function *tfidf_features* using class [TfidfVectorizer](http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.feature_extraction.text.TfidfVectorizer.html) from *scikit-learn*. Use *train* corpus to train a vectorizer. Don't forget to take a look into the arguments that you can pass to it. We suggest that you filter out too rare words (occur less than in 5 titles) and too frequent words (occur more than in 90% of the titles). Also, use bigrams along with unigrams in your vocabulary. ","fac4d47e":"# Predict tags on StackOverflow with linear models\r\n\r\nIn this assignment you will learn how to predict tags for posts from [StackOverflow](https:\/\/stackoverflow.com). To solve this task you will use multilabel classification approach.\r\n\r\n### Libraries\r\n\r\nIn this task you will need the following libraries:\r\n- [Numpy](http:\/\/www.numpy.org) \u2014 a package for scientific computing.\r\n- [Pandas](https:\/\/pandas.pydata.org) \u2014 a library providing high-performance, easy-to-use data structures and data analysis tools for the Python\r\n- [scikit-learn](http:\/\/scikit-learn.org\/stable\/index.html) \u2014 a tool for data mining and data analysis.\r\n- [NLTK](http:\/\/www.nltk.org) \u2014 a platform to work with natural language."}}