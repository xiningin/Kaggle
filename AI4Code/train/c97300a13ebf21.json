{"cell_type":{"118212d8":"code","4ebdfc2c":"code","af98e5dc":"code","d5d5b823":"code","ce027338":"code","290ed1a8":"code","d6927c76":"code","9ea7a547":"code","037071a0":"code","b2f70f6e":"code","d04306ee":"code","ee2847e3":"code","0c2287d1":"code","e4951821":"code","aa0a116b":"code","f167464d":"markdown","1eb47f23":"markdown","e55c957b":"markdown","e4521017":"markdown","b9f09ce2":"markdown","ba72e0cd":"markdown"},"source":{"118212d8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4ebdfc2c":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n","af98e5dc":"df = pd.read_csv(\"\/kaggle\/input\/usa-housingcsv\/USA_Housing.csv\")\ndf","d5d5b823":"df.info()","ce027338":"df.describe()","290ed1a8":"sns.pairplot(df)","d6927c76":"#heatmap(), shows the correlation between\nsns.heatmap(df.corr(),annot = True)","9ea7a547":"X = df.iloc[:,0:5]\ny = df.iloc[:,5:6]\ny","037071a0":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.40,random_state = 101)\ny_train","b2f70f6e":"from sklearn.linear_model import LinearRegression\nlm = LinearRegression()\n\nlm.fit(X_train,y_train)","d04306ee":"coeff_df = lm.coef_\ncoeff_df ","ee2847e3":"prediction = lm.predict(X_test)","0c2287d1":"plt.scatter(y_test,prediction)","e4951821":"sns.distplot((y_test,prediction),bins = 50)","aa0a116b":"\nfrom sklearn import metrics \nprint(\"MAE:\",metrics.mean_absolute_error(y_test,prediction))\nprint(\"MSE:\",metrics.mean_squared_error(y_test,prediction))\nprint(\"RMSE:\",np.sqrt(metrics.mean_squared_error(y_test,prediction)))","f167464d":"# Importing libraries","1eb47f23":"# Plotting the predictions","e55c957b":"# Splitting the data\n","e4521017":"# Intro\n1. Importing libraries\n2. Importing dataset\n3. Splitting data\n4. Training the model\n5. Plotting the predictions\n","b9f09ce2":"# Importing datasets","ba72e0cd":"# Training the model"}}