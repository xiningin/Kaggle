{"cell_type":{"1cf4e5e1":"code","a5591ca6":"code","3c804142":"code","768fda75":"code","3b886932":"code","731fb1a2":"code","fd102a19":"code","b3d4c895":"code","b51897a8":"code","289b6dfc":"code","dc85b9b1":"code","d786e4f3":"code","37e177cb":"code","3f082dae":"code","b7db76f7":"code","02157c57":"code","dead28f9":"code","f95af4c3":"code","87cde51c":"code","a6552eb8":"code","917b6223":"code","0a563e3c":"code","3dc4f4c7":"code","478e1ab4":"markdown","15199c96":"markdown","c9428ada":"markdown","a0bd8326":"markdown","1698ff5b":"markdown","bbed157c":"markdown","ab89b28a":"markdown","6b593d01":"markdown","31a1b569":"markdown","0e1b2440":"markdown","18db050d":"markdown","659cedbd":"markdown","606c3fa0":"markdown"},"source":{"1cf4e5e1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport sklearn \nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a5591ca6":"data = pd.read_csv('..\/input\/customer-churn-with-explainable-ai\/Churn_Modelling.csv')\ndata.head()","3c804142":"from sklearn.preprocessing import LabelEncoder\nlabels = data['Exited']\nle = LabelEncoder()\nle.fit(labels)\nlabels = le.transform(labels)\nclass_names = le.classes_","768fda75":"data = data.drop(['RowNumber', 'CustomerId', 'Surname', 'Exited'], axis = 1) \ndata.head()","3b886932":"feature_names = data.columns.tolist()","731fb1a2":"categorical_features = [1,2,7,8]\ncategorical_names = {}\nfor feature in categorical_features:\n    column = data.iloc[:,feature].values\n    le = LabelEncoder()\n    le.fit(column)\n    data.iloc[:, feature] = le.transform(column)\n    categorical_names[feature] = le.classes_","fd102a19":"data.head(10)","b3d4c895":"\ndata.info()","b51897a8":"seed = 101 # fix random seed for reproducibility\nnp.random.seed(seed)\n\n# Split Train Test sets\nfrom sklearn.model_selection import train_test_split\ntrain, test, labels_train, labels_test = train_test_split(data, labels, \n                                                    test_size=0.2,\n                                                    stratify=labels,\n                                                    random_state=seed)\nprint(train.shape, test.shape, labels_train.shape, labels.shape)","289b6dfc":"import lightgbm as lgb\ngbtree = lgb.LGBMClassifier(learning_rate=0.10, n_estimators=116, num_leaves= 9, max_depth=3, subsample=0.74, colsample_bytree=0.69, objective = 'binary', is_unbalance = 'true', random_state=seed)\ngbtree.fit(train, labels_train, categorical_feature=categorical_features)","dc85b9b1":"y_preds = gbtree.predict(test)","d786e4f3":"from sklearn.metrics import accuracy_score,confusion_matrix,classification_report\ndef model_evaluate(): \n    \n    print('Test Accuracy:\\t{:0.1f}%'.format(accuracy_score(labels_test,y_preds)*100))\n    \n    #classification report\n    print('\\n')\n    print(classification_report(labels_test, y_preds))\n\n    #confusion matrix\n    confmat = confusion_matrix(labels_test, y_preds)\n\n    fig, ax = plt.subplots(figsize=(4, 4))\n    ax.matshow(confmat, cmap=plt.cm.Blues, alpha=0.3)\n    for i in range(confmat.shape[0]):\n        for j in range(confmat.shape[1]):\n            ax.text(x=j, y=i, s=confmat[i, j], va='center', ha='center')\n    plt.xlabel('Predicted label')\n    plt.ylabel('True label')\n    plt.tight_layout()","37e177cb":"# evaluate model with test set\nmodel_evaluate()","3f082dae":"#PLot AUC-curve\nimport sklearn.metrics as metrics\ny_pred = gbtree.predict_proba(test)\nfpr, tpr, threshold = metrics.roc_curve(labels_test, y_pred[:,1])\nroc_auc = metrics.auc(fpr, tpr)\n\n# method I: plt\nimport matplotlib.pyplot as plt\nplt.title('Receiver Operating Characteristic')\nplt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()","b7db76f7":"#PLot PR-curve\nfrom sklearn.metrics import precision_recall_curve\ny_pred = gbtree.predict_proba(test)\nprecision, recall, thresholds = precision_recall_curve(labels_test, y_pred[:,1])\n \nthresholds = np.append(thresholds, 1)\nf1_scores = 2*(precision*recall)\/(precision+recall)\nplt.step(recall, precision, color='b', alpha=0.4, where='post')\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.ylim([0.0, 1.05])\nplt.xlim([0.0, 1.0])\nplt.title('Precision-Recall curve')\nplt.show()","02157c57":"# Feature importance\nfrom lightgbm import plot_importance\nplot_importance(gbtree)","dead28f9":"import lime.lime_tabular\nexplainer = lime.lime_tabular.LimeTabularExplainer(train.values ,feature_names = feature_names,class_names=class_names,\n                                                   categorical_features=categorical_features, \n                                                   categorical_names=categorical_names, kernel_width=3)","f95af4c3":"predict_fn = lambda x: gbtree.predict_proba(x).astype(float)","87cde51c":"#Choose a local instance\nchosen = test.iloc[111]\nprint(chosen)","a6552eb8":"print('True class: %s' % class_names[labels_test[111]])","917b6223":"exp = explainer.explain_instance(chosen, predict_fn,num_features=5)\nexp.show_in_notebook(show_all=False)","0a563e3c":"chosen['Age'] = 40\nchosen['IsActiveMember'] = 0\nprint(chosen)","3dc4f4c7":"exp = explainer.explain_instance(chosen, predict_fn,num_features=5)\nexp.show_in_notebook(show_all=False)","478e1ab4":"Lime tabular needs a predict function","15199c96":"This was an imbalanced dataset where the positive cases were much lesser than the negative. Hence for the positive cases, the LightGBM model gets ~50% of the positive classification correct. There are alot of false negatives & positives.","c9428ada":"Start Data Processing","a0bd8326":"Ok..now the dataframe has all data as integers\/floats, so we are ready to start training the LightGBM classifier!","1698ff5b":"Drop the columns RowNumber, CustomerId, Surname as they are not predictive features, and remove the labels column","bbed157c":"Now, let's use LIME!!","ab89b28a":"LIME predicts for this local instance, the 2 features that contribute to the classification is Age and IsActiveMember, rather than the 3 global importance features reported by LightGBM. Let's test this out, by modifying the 2 features that LIME chose ","6b593d01":"\n\n# I used the best parameters found by Bayesian optimisation in another notebook (https:\/\/www.kaggle.com\/teesoong\/lightgbm-with-bayes-optimization)","31a1b569":"Predicted class probabilities have now changed!","0e1b2440":"Let's look at the LightGBM model global importance features, we'll contrast with LIME local importance later.","18db050d":"From a global importance level, it seems the top 3 features are Age, Balance & No. of products.","659cedbd":"Start separating out the labels column","606c3fa0":"Explicitly define the categorical features, we need this for LIME.\nCategorical data: Geography, Gender, HasCrCard, IsActiveMember."}}