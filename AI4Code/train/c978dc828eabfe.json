{"cell_type":{"2f9a3ea8":"code","97b60b14":"code","e2abae48":"code","150f48ce":"code","d1edc1ed":"code","bb4d8d06":"code","99c66d10":"code","c2210725":"code","fa173278":"code","26726fbd":"code","e772995b":"code","c9659085":"code","9b805afe":"code","2d09c2e3":"code","463a92d1":"code","031864fc":"code","24bc412e":"code","e887f89f":"code","e241e61a":"markdown","89aebd19":"markdown","0914aa49":"markdown","781a7478":"markdown","a443897e":"markdown","47de93e8":"markdown","d3c83818":"markdown","95e9263a":"markdown","87bd69b1":"markdown","bb25c090":"markdown","11c90392":"markdown","076cbb16":"markdown","187ed1ba":"markdown","475dc912":"markdown"},"source":{"2f9a3ea8":"import numpy as np \nimport pandas as pd \nfrom datetime import datetime\n\nimport os\nfrom os.path import join as pjoin\n\ndata_root = '..\/input\/make-data-ready'\nprint(os.listdir(data_root))\n\npd.set_option('display.max_rows',200)\n\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom pprint import pprint\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n","97b60b14":"def load_data(data='train',n=2):\n    df = pd.DataFrame()\n    for i in range(n) :\n        if data=='train':\n            if i > 8 :\n                break\n            dfpart = pd.read_pickle(pjoin(data_root,f'train_{i}.pkl'))\n        elif data=='test':\n            if i > 2 :\n                break\n            dfpart = pd.read_pickle(pjoin(data_root,f'test_{i}.pkl'))\n        df = pd.concat([df,dfpart])\n        del dfpart\n    return df\n        ","e2abae48":"df_train = load_data(n=9)\ndf_test = load_data('test',n=4)","150f48ce":"df = pd.concat([df_train, df_test])","d1edc1ed":"col_drop = ['Date_Year', 'Date_Month', 'Date_Week','Date_Hour','device_isMobile','device_deviceCategory',\n       'Date_Day', 'Date_Dayofweek', 'Date_Dayofyear', 'Date_Is_month_end',\n       'Date_Is_month_start', 'Date_Is_quarter_end', 'Date_Is_quarter_start',\n       'Date_Is_year_end', 'Date_Is_year_start','totals_visits',\n           'date','visitId','totals_totalTransactionRevenue','geoNetwork_city','geoNetwork_continent',\n            'geoNetwork_metro','geoNetwork_networkDomain',\n'geoNetwork_region','geoNetwork_subContinent','trafficSource_adContent',\n            'trafficSource_adwordsClickInfo.adNetworkType','trafficSource_adwordsClickInfo.gclId',\n'trafficSource_adwordsClickInfo.slot','trafficSource_campaign',\n            'trafficSource_keyword','trafficSource_referralPath','trafficSource_medium',\n            'customDimensions_value','customDimensions_index','trafficSource_source',\n           'totals_bounces','visitNumber','totals_newVisits']\ndf.drop(col_drop, axis=1, inplace=True)","bb4d8d06":"country_drop=df.groupby('geoNetwork_country')['totals_transactions'].sum()[df.groupby('geoNetwork_country')['totals_transactions'].sum().sort_values()<4].index.tolist()\ndf.loc[df[df.geoNetwork_country.isin(country_drop)].index,'geoNetwork_country'] = 'NaN'\n\ndf.loc[df[~df.device_browser.isin(['Edge', 'Internet Explorer', 'Firefox', 'Safari', 'Chrome'])].index,'device_browser'] = 'NaN'\ndf.loc[df[~df.device_operatingSystem.isin(['Android', 'iOS', 'Linux', 'Chrome OS', 'Windows', 'Macintosh'])].index,'device_operatingSystem'] = 'NaN'\n\n","99c66d10":"col_lb = ['channelGrouping','device_browser','device_operatingSystem', 'geoNetwork_country',\n          'trafficSource_adwordsClickInfo.isVideoAd','trafficSource_isTrueDirect']\nfor col in col_lb:\n    lb = LabelEncoder()\n    df[col]=lb.fit_transform(df[col])","c2210725":"to_median = ['channelGrouping','device_browser','device_operatingSystem','geoNetwork_country','trafficSource_adwordsClickInfo.isVideoAd','trafficSource_isTrueDirect','trafficSource_adwordsClickInfo.page']\nto_sum =['totals_hits','totals_pageviews','totals_timeOnSite','totals_transactionRevenue', 'totals_transactions']\nto_mean =['totals_hits','totals_pageviews','totals_sessionQualityDim']\nto_std = ['totals_hits','totals_pageviews']\nto_time = 'visitStartTime'","fa173278":"target_period = pd.date_range(start='2016-08-01',end='2018-12-01', freq='2MS')\ntrain_period = target_period.to_series().shift(periods=-210, freq='d',axis= 0)\ntime_to = train_period[train_period.index>np.datetime64('2016-08-01')].astype('int')\/\/10**9\ntime_end = target_period.to_series().shift(periods=-45, freq='d',axis= 0)[4:]","26726fbd":"    user_x = df.iloc[df_train.shape[0]:,:]\n    test_x = pd.concat([user_x.groupby('fullVisitorId')[to_median].median().add_suffix('_median'),\n    user_x.groupby('fullVisitorId')['visitStartTime'].agg(['first','last']).add_suffix('_time').sub(time_to.values[-1]).abs(),\n    user_x.groupby('fullVisitorId')['visitStartTime'].apply(lambda x: x.max() -x.min()).rename('time_diff'),\n    user_x.groupby('fullVisitorId')[to_sum].sum().add_suffix('_sum'),\n    user_x.groupby('fullVisitorId')[to_mean].mean().add_suffix('_mean'),\n    user_x.groupby('fullVisitorId')[to_std].std(ddof=0).add_suffix('_std')],axis=1).reset_index()\n    \n    test_ID= test_x.fullVisitorId\n    test_x = test_x.drop(['fullVisitorId'], axis=1,errors='ignore')\n    test_x = test_x.astype('int')","e772995b":"    i=4\n    user_x = df[(df.visitStartTime>=(time_to.index.astype('int')\/\/10**9)[i]) & (df.visitStartTime<(time_end.index.astype('int')\/\/10**9)[i])]\n    user_y = df[(df.visitStartTime>=time_to.values[i]) & (df.visitStartTime<time_to.values[i+1])]\n    train_x = pd.concat([user_x.groupby('fullVisitorId')[to_median].median().add_suffix('_median'),\n    user_x.groupby('fullVisitorId')['visitStartTime'].agg(['first','last']).add_suffix('_time').sub(time_to.values[i]).abs(),\n    user_x.groupby('fullVisitorId')['visitStartTime'].apply(lambda x: x.max() -x.min()).rename('time_diff'),\n    user_x.groupby('fullVisitorId')[to_sum].sum().add_suffix('_sum'),\n    user_x.groupby('fullVisitorId')[to_mean].mean().add_suffix('_mean'),\n    user_x.groupby('fullVisitorId')[to_std].std(ddof=0).add_suffix('_std')],axis=1).reset_index()\n    \n    merged=train_x.merge(user_y.groupby('fullVisitorId')['totals_transactionRevenue'].sum().reset_index(),\\\n                              how='left', on='fullVisitorId')\n    val_y = merged.totals_transactionRevenue\n    val_y.fillna(0, inplace=True)\n    val_x = merged.drop(['fullVisitorId','totals_transactionRevenue'], axis=1,errors='ignore')\n    val_x = val_x.astype('int')","c9659085":"import lightgbm as lgb\nfrom xgboost import XGBRegressor\nfrom catboost import CatBoostRegressor\n\nfrom sklearn.metrics import mean_squared_error","9b805afe":"params={'learning_rate': 0.01,\n        'objective':'regression',\n        'metric':'rmse',\n        'num_leaves': 31,\n        'verbose': 1,\n        'bagging_fraction': 0.9,\n        'feature_fraction': 0.9,\n        \"random_state\":42,\n        'max_depth': 5,\n        \"bagging_seed\" : 42,\n        \"verbosity\" : -1,\n        \"bagging_frequency\" : 5,\n        'lambda_l2': 0.5,\n        'lambda_l1': 0.5,\n        'min_child_samples': 36\n       }\nxgb_params = {\n        'objective': 'reg:linear',\n        'booster': 'gbtree',\n        'learning_rate': 0.02,\n        'max_depth': 22,\n        'min_child_weight': 57,\n        'gamma' : 1.45,\n        'alpha': 0.0,\n        'lambda': 0.0,\n        'subsample': 0.67,\n        'colsample_bytree': 0.054,\n        'colsample_bylevel': 0.50,\n        'n_jobs': -1,\n        'random_state': 456,\n        'importance_type': 'total_gain'\n    }\n\ncat_param = {\n    'learning_rate' :0.03,\n    'depth' :10,\n    'eval_metric' :'RMSE',\n    'od_type' :'Iter',\n    'metric_period ' : 50,\n    'od_wait' : 20,\n    'seed' : 42\n    \n}","2d09c2e3":"oof_reg_preds = np.zeros(val_x.shape[0])\noof_reg_preds1 = np.zeros(val_x.shape[0])\noof_reg_preds2 = np.zeros(val_x.shape[0])\nmerge_pred = np.zeros(val_x.shape[0])\nmerge_preds = np.zeros(val_x.shape[0])\nsub_preds = np.zeros(test_x.shape[0])\nalist = list(range(time_to.shape[0]-1))\nalist.remove(4)\nfolds = alist\nfolds=range(len(alist)-1)\n\nfor i in alist:\n    print(i)\n    user_x = df[(df.visitStartTime>=(time_to.index.astype('int')\/\/10**9)[i]) & (df.visitStartTime<(time_end.index.astype('int')\/\/10**9)[i])]\n    user_y = df[(df.visitStartTime>=time_to.values[i]) & (df.visitStartTime<time_to.values[i+1])]\n    train_x = pd.concat([user_x.groupby('fullVisitorId')[to_median].median().add_suffix('_median'),\n    user_x.groupby('fullVisitorId')['visitStartTime'].agg(['first','last']).add_suffix('_time').sub(time_to.values[i]).abs(),\n    user_x.groupby('fullVisitorId')['visitStartTime'].apply(lambda x: x.max() -x.min()).rename('time_diff'),\n    user_x.groupby('fullVisitorId')[to_sum].sum().add_suffix('_sum'),\n    user_x.groupby('fullVisitorId')[to_mean].mean().add_suffix('_mean'),\n    user_x.groupby('fullVisitorId')[to_std].std(ddof=0).add_suffix('_std')],axis=1).reset_index()\n    \n    merged=train_x.merge(user_y.groupby('fullVisitorId')['totals_transactionRevenue'].sum().reset_index(),\\\n                              how='left', on='fullVisitorId')\n    train_y = merged.totals_transactionRevenue\n    train_y.fillna(0, inplace=True)\n    train_x = merged.drop(['fullVisitorId','totals_transactionRevenue'], axis=1,errors='ignore')\n    train_x = train_x.astype('int')    \n    \n    reg = lgb.LGBMRegressor(**params,n_estimators=1100)\n    xgb = XGBRegressor(**xgb_params, n_estimators=1000)\n    cat = CatBoostRegressor(iterations=1000,learning_rate=0.03,\n                            depth=10,\n                            eval_metric='RMSE',\n                            random_seed = 42,\n                            bagging_temperature = 0.2,\n                            od_type='Iter',\n                            metric_period = 50,\n                            od_wait=20)\n    print(\"-\"* 20 + \"LightGBM Training\" + \"-\"* 20)\n    reg.fit(train_x, np.log1p(train_y),eval_set=[(val_x, np.log1p(val_y))],early_stopping_rounds=50,verbose=100,eval_metric='rmse')\n    print(\"-\"* 20 + \"XGboost Training\" + \"-\"* 20)\n    xgb.fit(train_x, np.log1p(train_y),eval_set=[(val_x, np.log1p(val_y))],early_stopping_rounds=50,eval_metric='rmse',verbose=100)\n    print(\"-\"* 20 + \"Catboost Training\" + \"-\"* 20)\n    cat.fit(train_x, np.log1p(train_y), eval_set=[(val_x, np.log1p(val_y))],early_stopping_rounds=50,use_best_model=True,verbose=100)\n    \n    imp_df = pd.DataFrame()\n    imp_df['feature'] = train_x.columns\n    imp_df['gain_reg'] = np.zeros(train_x.shape[1])\n    imp_df['gain_xgb'] = np.zeros(train_x.shape[1])\n    imp_df['gain_cat'] = np.zeros(train_x.shape[1])\n    imp_df['gain_reg'] += reg.booster_.feature_importance(importance_type='gain')\/ len(folds)\n    imp_df['gain_xgb'] += xgb.feature_importances_\/ len(folds)\n    imp_df['gain_cat'] += np.array(cat.get_feature_importance())\/ len(folds)\n    \n    # LightGBM\n    oof_reg_preds = reg.predict(val_x, num_iteration=reg.best_iteration_)\n    oof_reg_preds[oof_reg_preds < 0] = 0\n    lgb_preds = reg.predict(test_x, num_iteration=reg.best_iteration_)\n    lgb_preds[lgb_preds < 0] = 0\n    \n    \n    # Xgboost\n    oof_reg_preds1 = xgb.predict(val_x)\n    oof_reg_preds1[oof_reg_preds1 < 0] = 0\n    xgb_preds = xgb.predict(test_x)\n    xgb_preds[xgb_preds < 0] = 0\n    \n    # catboost\n    oof_reg_preds2 = cat.predict(val_x)\n    oof_reg_preds2[oof_reg_preds2 < 0] = 0\n    cat_preds = cat.predict(test_x)\n    cat_preds[cat_preds < 0] = 0\n        \n    #merge all prediction\n    merge_pred = oof_reg_preds * 0.4 + oof_reg_preds1 * 0.3 +oof_reg_preds2 * 0.3\n    merge_preds += (oof_reg_preds \/ len(folds)) * 0.4 + (oof_reg_preds1 \/ len(folds)) * 0.3 + (oof_reg_preds2 \/ len(folds)) * 0.3\n    sub_preds += (lgb_preds \/ len(folds)) * 0.4 + (xgb_preds \/ len(folds)) * 0.3 + (cat_preds \/ len(folds)) * 0.3\n    \n    \nprint(\"LGBM  \", mean_squared_error(np.log1p(val_y), oof_reg_preds) ** .5)\nprint(\"XGBoost  \", mean_squared_error(np.log1p(val_y), oof_reg_preds1) ** .5)\nprint(\"CatBoost  \", mean_squared_error(np.log1p(val_y), oof_reg_preds2) ** .5)\nprint(\"merged  \", mean_squared_error(np.log1p(val_y), merge_pred) ** .5)\nprint(\"stack_merged  \", mean_squared_error(np.log1p(val_y), merge_preds) ** .5)\nprint(\"Zeros  \", mean_squared_error(np.log1p(val_y), np.zeros(val_x.shape[0])) ** .5)","463a92d1":"plt.figure(figsize=(8, 12))\nsns.barplot(x='gain_reg', y='feature', data=imp_df.sort_values('gain_reg', ascending=False))","031864fc":"plt.figure(figsize=(8, 12))\nsns.barplot(x='gain_xgb', y='feature', data=imp_df.sort_values('gain_xgb', ascending=False))","24bc412e":"plt.figure(figsize=(8, 12))\nsns.barplot(x='gain_cat', y='feature', data=imp_df.sort_values('gain_cat', ascending=False))","e887f89f":"sub_df = pd.DataFrame(test_ID)\nsub_df[\"PredictedLogRevenue\"] = sub_preds\nsub_df.to_csv(\"stacked_result.csv\", index=False)","e241e61a":"## Save result","89aebd19":"### Label encoding","0914aa49":"### Features to user level\nThere is also a feature called time_diff, which is directly coded in generating part. And this time- relative feature really works well","781a7478":"### Valiation data","a443897e":"* Data are generated from this script : https:\/\/www.kaggle.com\/qnkhuat\/make-data-ready \n* Stacking part is from this script: https:\/\/www.kaggle.com\/ashishpatel26\/updated-bayesian-lgbm-xgb-cat-fe-kfold-cv","47de93e8":"## Data loading","d3c83818":"## Display feature importances","95e9263a":"### Test data","87bd69b1":"### Time period\n* \ud559\uc2b5\uc14b\uc740 \uc2dc\ud5d8\uc14b\uacfc \ub3d9\uc77c\ud55c \ubaa9\ud45c\uc14b\uacfc 45\uc77c \uac04\uaca9\uc774 \uc788\uc2b5\ub2c8\ub2e4.\n* \ud559\uc2b5\uc14b\uc740 \uc2dc\ud5d8\uc14b\uacfc \uc9c0\uc18d \uc2dc\uac04\uc774 \uac70\uc758 \uac19\uc2b5\ub2c8\ub2e4.\n* \uac80\uc99d \uc14b\uc740 12\uc6d4-1\uc6d4\ub85c \uc124\uc815\ub418\uba70, \uc2dc\ud5d8\uc14b\uc758 \ubaa9\ud45c \uae30\uac04\uacfc \ub3d9\uc77c\ud55c \uae30\uac04\uc785\ub2c8\ub2e4.","bb25c090":"## Model building","11c90392":"## Data preprocessing","076cbb16":"### Drop some features and items","187ed1ba":"# Introduction","475dc912":"\uc774 \ucee4\ub110\uc740 [base model - v2 user level solution](https:\/\/www.kaggle.com\/augustmarvel\/base-model-v2-user-level-solution)\uc744 \ud55c\uad6d\uc5b4\ub85c \ubc88\uc5ed\ud55c \ucee4\ub110\uc785\ub2c8\ub2e4.\n\n### \uc774 \ucee4\ub110\uc740 \uc138 \ubd80\ubd84\uc73c\ub85c \uad6c\uc131\ub429\ub2c8\ub2e4.\n* [**1. Data loading**](#Data loading)\n* [**2. Data preprocessing**](#Data preprocessing)\n* [**3. Model building**](#Model building)\n\n###  \uc774 \ucee4\ub110\uc758 \ud575\uc2ec:\n*  \ub370\uc774\ud130 \uc804\uccb4 chunk: \n* 210\uc77c\uc758 \ud559\uc2b5 \uae30\uac04, 45\uc77c\uc758 \uaca9\ucc28 \uae30\uac04, 2\uac1c\uc6d4\uc758 \ud0c0\uac9f \uae30\uac04\n* \ud6c8\ub828 \uae30\uac04\uc5d0\uc11c \ub370\uc774\ud130\ub97c \uc9d1\uacc4\ud558\uace0, \uac04\uaca9 \uae30\uac04\uc740 \ubb34\uc2dc\ud558\uace0, \ubaa9\ud45c\uae30\uac04\uc5d0 \ub300\ud574\uc11c \ubaa9\ud45c\ub97c \uc5bb\uc2b5\ub2c8\ub2e4.\n* \uc720\ud6a8\uc131 \uac80\uc99d\uc14b\uc740 12\uc6d4-1\uc6d4\ub85c \uc124\uc815\ub418\uc5b4\uc788\uc73c\uba70, \ud14c\uc2a4\ud2b8\uc14b\uc758 \ub300\uc0c1 \uae30\uac04\uacfc \ub3d9\uc77c\ud55c \uae30\uac04\uc785\ub2c8\ub2e4.\n\n### Summary:\n\uc774 \ucef4\ud53c\ud2f0\uc158\uc740 \uc194\ub8e8\uc158\uc774 \"all-zeros\"\ub97c \uc774\uae38 \uc218 \uc788\ub294\uc9c0 \ub9d0\ud558\uae30 \ud798\ub4e4\uc815\ub3c4\ub85c \ub370\uc774\ud130\uc14b\uc758 \ubd88\uade0\ud615\uc774 \uc2ec\ud569\ub2c8\ub2e4. \uba87\uac00\uc9c0 \uae30\ubcf8\uc801\uc778 EDA\ub97c \uc218\ud589\ud55c \ud6c4 \ud655\uc2e4\ud55c \uacb0\ub860\uc774 \ub0ac\uc2b5\ub2c8\ub2e4:\n\n1. \uace0\uac1d\uc774 \ube44\uc6a9\uc744 \uc9c0\ubd88\ud558\uba74 \uccab \ub2ec\uc5d0 \uac70\ub798\uac00 \ubc1c\uc0dd\ud560 \uac00\ub2a5\uc131\uc774 \ub192\uc73c\uba70, \uace0\uac1d\uc774 \ucc98\uc74c\uc73c\ub85c \ub098\ud0c0\ub09c \ud6c4 2\uac1c\uc6d4\uc744 \ub118\uc9c0 \uc54a\uc544\uc57c \ud569\ub2c8\ub2e4.\n2. \ucd5c\uc18c \uac70\ub798 \uc218\uc775\uc740 1e+07 \uc774\uc0c1\uc785\u3134\ub514\u314f.\n---\n* \uccab \ubc88\uc9f8 \ud14c\uc2a4\ud2b8 \uc138\ud2b8\uc758 \uacbd\uc6b0 \ud14c\uc2a4\ud2b8 \uae30\uac04 \uc0ac\uc774\uc5d0 1.5 \uac1c\uc6d4\uc758 \uac04\uaca9\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc989, \ud0dc\uadf8\uac00 \ub450 \uadf8\ub8f9\uc73c\ub85c \ub098\ub258\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uccab \ubc88\uc9f8\ub294 \uc774\ubbf8 \uc9c0\ubd88 \uc5ec\ubd80\ub97c \uc0dd\uac01\ud558\ub294 \ub370 45\uc77c \uc774\uc0c1 \uc18c\uc694\ub41c \uac83\uc785\ub2c8\ub2e4. \ub450 \ubc88\uc9f8\ub294 \ubd80\ubd84 \uc11c\ube44\uc2a4 \ube44\uc6a9\uc744 \uc9c0\ubd88\ud558\uace0 \ucd94\uac00 \uc11c\ube44\uc2a4 \ube44\uc6a9\uc744 \uc9c0\ubd88\ud558\ub294 \uc0ac\ub78c\uc785\ub2c8\ub2e4. \uccab \ubc88\uc9f8 \uadf8\ub8f9\uc5d0\uac8c\ub294 \uace0\uac1d\uc774 \uc9c0\ubd88 \ud560 \uac00\ub2a5\uc131\uc774 \uc801\uc2b5\ub2c8\ub2e4. \ub450 \ubc88\uc9f8 \uace0\uac1d\uc5d0\uac8c\ub294 \uace0\uac1d\uc774 \uc774\uc804\uc5d0 \uc9c0\ubd88 \ud55c \uae08\uc561\uacfc \ub3d9\uc77c\ud55c \uae08\uc561\uc744 \uc9c0\ubd88 \ud560 \uac00\ub2a5\uc131\uc774 \ub192\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ud55c \uc870\uac74 \ud558\uc5d0\uc11c, \uc9c0\ubd88 \ud560 \uc0ac\ub78c\ub4e4\uc758 \uc218\uc5d0 \ub300\ud55c \ub098\uc758 \uc608\uce21\uc740 200 \uc815\ub3c4\uc785\ub2c8\ub2e4.\n* \ub450 \ubc88\uc9f8\ub85c, \ubaa8\ub378\uc758 \uc608\uce21\uc740 1E + 07\ubcf4\ub2e4 \uc791\uc740 \uc22b\uc790\ub4e4\ub85c \uac00\ub4dd\ud569\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \ud574\ub2f9 \uc22b\uc790\ub97c 0\uc73c\ub85c \uc124\uc815\ud558\uba74 \uc810\uc218\uac00 \ub5a8\uc5b4\uc9d1\ub2c8\ub2e4. \uc6b0\ub9ac\uc758 \ubaa8\ub378\uc740 RMSE\ub97c \ucd5c\uc18c\ud654\ud558\uae30 \uc704\ud574 \ud604\uba85\ud558\uac8c \ubca0\ud305\uc744 \uc720\uc9c0\ud558\uc9c0\ub9cc \uacb0\uacfc\ub294 \uc2e4\uc81c \uc22b\uc790\uc5d0\uc11c \uba40\uc5b4\uc9d1\ub2c8\ub2e4.\n\n### random thoughts:\n* \ub192\uc740 \ud398\ub110\ud2f0\ub97c \uc8fc\ub294 \uc0ac\uc6a9\uc790 \uc815\uc758 \ubaa9\ud45c \uae30\ub2a5\uc744 \uc124\uc815\ud558\ub824\uba74 \uc791\uc740 \uac12\uc744 \ud53c\ud558\ub294\uac8c \uc88b\uc2b5\ub2c8\ub2e4.\n* \uc2dc\uac04 \ud2b9\uc9d5\uc740 \ucd5c\uc6b0\uc120 \uc21c\uc704\uc5d0 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n* \ub450\ubc88\uc9f8 \uadf8\ub8f9 \uc0ac\ub78c\ub4e4\uc5d0\uac8c \ud074\ub7ec\uc2a4\ud130\ub9c1\uc73c\ub85c \uc9c0\uc815\ud560 \uc218 \uc788\ub2e4\uba74?* 1\ub144\uc758 \uc11c\ube44\uc2a4 \uae30\uac04\uc774 \ub9cc\ub8cc\ub41c \ud6c4 \uace0\uac1d\uc774 \ub3cc\uc544\uc62c \uacbd\uc6b0?\n* \ub370\uc774\ud130\uc14b\uc5d0\ub294 \uc0ac\uc6a9\uc790 \uc6f9 \uc0ac\uc774\ud2b8\uc758 \ud398\uc774\uc9c0 \ubdf0\uc640 \uac19\uc740 \uc77c\ubd80 \uc911\uc694\ud55c \uae30\ub2a5\uc774 \uc5c6\uc2b5\ub2c8\ub2e4. \uc800\uc6a9\ub7c9 \uc0ac\uc6a9\uc790\uc5d0\uac8c \ubb34\ub8cc \uacc4\uc815\uc774 \uc774\ubbf8 \ubaa8\ub4e0 \uc694\uad6c\uc0ac\ud56d\uc744 \ucda9\uc871\ud558\ub294 \uacbd\uc6b0, \uc0ac\uc804 \uc11c\ube44\uc2a4 \uc694\uae08\uc744 \uccad\uad6c\ud558\ub294 \uc774\uc720\ub294 \ubb34\uc5c7?"}}