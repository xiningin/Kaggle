{"cell_type":{"2c6a8460":"code","76fed990":"code","455efce9":"code","ad56a23f":"code","b0b9b431":"code","e225241e":"code","51d6a94c":"code","ddef5f9c":"code","d73ffd14":"code","8045ebb4":"code","92dfe4f6":"code","33b0047c":"code","122e905c":"code","57c8166a":"code","f203265d":"code","8aec437b":"markdown","985f9986":"markdown","d3998ac3":"markdown","116c7e2c":"markdown","995e09bf":"markdown","173c2ea7":"markdown"},"source":{"2c6a8460":"%config Completer.use_jedi = False\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nimport cv2\nimport os\nimport random\nfrom keras.layers import Dense, Activation, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D, GaussianNoise, AveragePooling2D\nfrom keras.models import Sequential","76fed990":"directory = ['..\/input\/image-classify-data\/Training', '..\/input\/image-classify-data\/Validation']\ncategories = ['Bicycle', 'Boat', 'Cat', 'Motorbike', 'People', 'Table']\nimg_size = 227\ntraining_data = []\nvalidation_data = []","455efce9":"for i in categories:\n    path = os.path.join(directory[0], i)\n    label_val = categories.index(i)\n    for img in os.listdir(path):\n        img = cv2.resize(cv2.imread(os.path.join(path, img)),(img_size, img_size))\n        training_data.append([img, label_val])","ad56a23f":"random.shuffle(training_data)\n# training_data[:5]","b0b9b431":"for i in categories:\n    path = os.path.join(directory[1], i)\n    label_val = categories.index(i)\n    for img in os.listdir(path):\n        img = cv2.resize(cv2.imread(os.path.join(path, img)),(img_size, img_size))\n        validation_data.append([img, label_val])\n        \nrandom.shuffle(validation_data)\n# validation_data[:5]","e225241e":"X_train, y_train, X_val, y_val = [], [], [], []\n\nfor feature, label in training_data:\n    X_train.append(feature)\n    y_train.append(label)\n\nfor feature, label in validation_data:\n    X_val.append(feature)\n    y_val.append(label)\n","51d6a94c":"X_train = np.array(X_train).reshape(-1, img_size, img_size, 3)\nX_val = np.array(X_val).reshape(-1, img_size, img_size, 3)\n\ny_train = np.array(y_train)\ny_val = np.array(y_val)","ddef5f9c":"X_train = X_train\/255\nX_val = X_val\/255","d73ffd14":"model = Sequential()\nmodel.add(Conv2D(96, (11,11), strides=(4,4), activation=tf.nn.relu, input_shape=X_train.shape[1:]))\nmodel.add(MaxPooling2D((3,3), strides=(2,2)))\nmodel.add(Conv2D(256, (5,5), strides=(1,1), padding=\"same\", activation=tf.nn.relu))\nmodel.add(MaxPooling2D((3,3), strides=(2,2)))\nmodel.add(GaussianNoise(0.1))\nmodel.add(Conv2D(384, (3,3), strides=(1,1), padding=\"same\", activation=tf.nn.relu))\nmodel.add(Conv2D(384, (3,3), strides=(1,1), padding=\"same\", activation=tf.nn.relu))\nmodel.add(Conv2D(256, (3,3), strides=(1,1), padding=\"same\", activation=tf.nn.relu))\nmodel.add(MaxPooling2D((3,3), strides=(2,2)))\nmodel.add(GaussianNoise(0.1))\nmodel.add(Dropout(0.5))\nmodel.add(Flatten())\nmodel.add(Dense(4096, tf.nn.relu))\nmodel.add(Dense(6, tf.nn.softmax))\n\nprint(model.summary())","8045ebb4":"model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\nhistory = model.fit(X_train, y_train, batch_size=32, epochs=50, validation_data=(X_val, y_val))","92dfe4f6":"plt.plot(history.history['accuracy'], label='train')\nplt.plot(history.history['val_accuracy'], label='validation')\nplt.legend()\nplt.show()","33b0047c":"test = pd.read_csv('..\/input\/test-file\/test_set.csv')\ntest['Class'] = test['Class'].astype(str)\ntest.head()","122e905c":"test_dir = '..\/input\/image-classify-data'\ndef resize_image(image):\n    img_size=227\n    img_array=cv2.imread(image)\n    new_array=cv2.resize(img_array,(img_size,img_size))\n    return new_array.reshape(-1,img_size,img_size,3)\n\nfor i in range(10):\n    img = os.path.join(test_dir, test.at[i, 'Image_Path'])\n    prediction=model.predict([resize_image(img)])\n    result = categories[int(np.argmax(prediction[0]))]\n#     print(categories[int(prediction[0][0])])\n    test.at[i, 'Class'] = result","57c8166a":"test.head()","f203265d":"test.to_csv('test_set_result.csv',index=False)","8aec437b":"### Imports","985f9986":"### Seperate features and labels suitable for CNN","d3998ac3":"### Initialize training and validation set","116c7e2c":"### Plotting training vs validation","995e09bf":"### CNN Model Designed\n\nThe model architecture is inspired from Alexnet with experimentations and tweaks with hyperparameter tuning.","173c2ea7":"### Working with Pandas to store in test_set.csv"}}