{"cell_type":{"ce5d4b7e":"code","5e1cf4d8":"code","7c4ee241":"code","55f6a3ee":"code","ddb02ab1":"code","a63f90f6":"code","29c43787":"code","e9b4a3ec":"code","3e555470":"code","709e779b":"code","5e79e5c3":"code","07fe722d":"code","162561f1":"code","98c8cc9c":"code","1a1e64f1":"code","4709d15b":"code","b07be052":"code","49f1f0bc":"code","491921ca":"code","29450433":"code","b3426674":"code","108e2277":"code","bf97e070":"code","dac3db46":"code","56da2857":"code","a9114c2c":"code","bbd94150":"code","ae3c81dd":"code","9065a4c1":"code","1cf953b9":"code","4f30b9cd":"code","3a1f52fc":"code","055c7645":"code","c1081fbf":"code","69a1915c":"code","686670e1":"code","f14e3e51":"code","8056ee51":"code","b135c746":"code","51c15d6d":"code","4337d8d5":"code","af18c3d4":"code","501313ab":"code","c4e73a4a":"code","1668397a":"code","b0b53622":"code","d996fac4":"code","db9f60a2":"code","c5b55102":"code","28be2f22":"markdown","d9a9ea5c":"markdown","63f1930a":"markdown","fe0ca633":"markdown","0173324c":"markdown","2e031cfd":"markdown","3b8340df":"markdown","d0b91f43":"markdown","93368380":"markdown","c24f034d":"markdown","66d265b2":"markdown"},"source":{"ce5d4b7e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5e1cf4d8":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom nltk.corpus import stopwords\nfrom nltk.util import ngrams\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom collections import defaultdict\nfrom collections import  Counter\nplt.style.use('ggplot')\nstop=set(stopwords.words('english'))\nimport re\nfrom nltk.tokenize import word_tokenize\nimport gensim\nimport string","7c4ee241":"from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nfrom wordcloud import WordCloud,STOPWORDS\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.tokenize import word_tokenize,sent_tokenize\nfrom bs4 import BeautifulSoup\nimport re,string,unicodedata\nfrom nltk.stem import WordNetLemmatizer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import classification_report,confusion_matrix,accuracy_score,plot_confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom string import punctuation","55f6a3ee":"\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import roc_curve, auc\nfrom sklearn.metrics import classification_report\n","ddb02ab1":"df = pd.read_csv('\/kaggle\/input\/dataisbeautiful\/r_dataisbeautiful_posts.csv')","a63f90f6":"df.head()","29c43787":"df.isna().sum()","e9b4a3ec":"df.info()","3e555470":"df.columns","709e779b":"df.drop(['author_flair_text', 'removed_by',\n       'total_awards_received', 'awarders'], axis=1, inplace=True)","5e79e5c3":"del df['id']\ndel df['created_utc']\ndel df['full_link']","07fe722d":"df.head()","162561f1":"df.title.fillna(\" \", inplace=True)","98c8cc9c":"df['text'] = df['title'] + df['author']\ndel df['title']\ndel df['author']","1a1e64f1":"def target(val):\n    if val == False: return 1\n    else: return 0\n\ndf['target'] = df['over_18'].apply(target)","4709d15b":"del df['over_18']","b07be052":"sns.countplot(df['target'])","49f1f0bc":"x = df[:100000]\ntrain_false = x[x.target ==  1].text\ntrain_true = x[x.target == 0].text\ntrain_text = df.text.values[:100000]\ntest_text = df.text.values[100000:]\ntrain_category = df.target[:100000]\ntest_category = df.target[100000:]","491921ca":"plt.figure(figsize = (20,20))\nwc = WordCloud(min_font_size = 3,  max_words = 3000 , width = 1600 , height = 800 , stopwords = STOPWORDS).generate(str(\" \".join(train_true)))\nplt.imshow(wc,interpolation = 'bilinear')","29450433":"text_true = wc.process_text(str(\" \".join(train_true))) # Getting the most frequently used words from wordcloud \nlist(text_true.keys())[:10]","b3426674":"def cleaner(phrase):\n    phrase = re.sub(r\"won't\", \"will not\", phrase)\n    phrase = re.sub(r\"can't\", 'can not', phrase)\n  \n  # general\n    phrase = re.sub(r\"n\\'t\",\" not\", phrase)\n    phrase = re.sub(r\"\\'re'\",\" are\", phrase)\n    phrase = re.sub(r\"\\'s\",\" is\", phrase)\n    phrase = re.sub(r\"\\'ll\",\" will\", phrase)\n    phrase = re.sub(r\"\\'d\",\" would\", phrase)\n    phrase = re.sub(r\"\\'t\",\" not\", phrase)\n    phrase = re.sub(r\"\\'ve\",\" have\", phrase)\n    phrase = re.sub(r\"\\'m\",\" am\", phrase)\n    \n    return phrase","108e2277":"from bs4 import BeautifulSoup\nfrom tqdm import tqdm\nimport re\n\nimport nltk\nnltk.download('stopwords')\n\nfrom nltk.corpus import stopwords","bf97e070":"stop = set(stopwords.words('english'))","dac3db46":"\ncleaned_text = []\n\nfor sentance in tqdm(df['text'].values):\n    sentance = str(sentance)\n    sentance = re.sub(r\"http\\S+\", \"\", sentance)\n    sentance = BeautifulSoup(sentance, 'lxml').get_text()\n    sentance = cleaner(sentance)\n    sentance = re.sub(r'[?|!|\\'|\"|#|+]', r'', sentance)\n    sentance = re.sub(\"\\S*\\d\\S*\", \"\", sentance).strip()\n    sentance = re.sub('[^A-Za-z]+', ' ', sentance)\n    sentance = ' '.join(e.lower() for e in sentance.split() if e.lower() not in stop)\n    cleaned_text.append(sentance.strip())","56da2857":"df['text'] = cleaned_text","a9114c2c":"X = df['text']\ny = df['target']","bbd94150":"from sklearn.model_selection import train_test_split\nX_Train, X_test, y_Train, y_test = train_test_split(X, y, test_size=0.1, random_state=42, stratify = y)","ae3c81dd":"X_train, X_cross, y_train, y_cross = train_test_split(X_Train, y_Train, test_size=0.1, random_state=42, stratify = y_Train)","9065a4c1":"tf_idf=TfidfVectorizer(min_df=0,max_df=1,use_idf=True,ngram_range=(1,2))\ntf_idf.fit(X_train)\nTrain_TFIDF = tf_idf.transform(X_train)\nCrossVal_TFIDF = tf_idf.transform(X_cross)\nTest_TFIDF= tf_idf.transform(X_test)","1cf953b9":"alpha_set=[0.00001,0.0001,0.001,0.01,0.1,1,10,100,1000,10000]\n\nTrain_AUC_TFIDF = []\nCrossVal_AUC_TFIDF = []\n\n\nfor i in alpha_set:\n    naive_b=MultinomialNB(alpha=i)\n    naive_b.fit(Train_TFIDF, y_train)\n    Train_y_pred =  naive_b.predict(Train_TFIDF)\n    Train_AUC_TFIDF.append(roc_auc_score(y_train,Train_y_pred))\n    CrossVal_y_pred =  naive_b.predict(CrossVal_TFIDF)\n    CrossVal_AUC_TFIDF.append(roc_auc_score(y_cross,CrossVal_y_pred))","4f30b9cd":"Alpha_set=[]\nfor i in range(len(alpha_set)):\n    Alpha_set.append(np.math.log(alpha_set[i]))","3a1f52fc":"plt.plot(Alpha_set, Train_AUC_TFIDF, label='Train AUC')\nplt.scatter(Alpha_set, Train_AUC_TFIDF)\nplt.plot(Alpha_set, CrossVal_AUC_TFIDF, label='CrossVal AUC')\nplt.scatter(Alpha_set, CrossVal_AUC_TFIDF)\nplt.legend()\nplt.xlabel(\"alpha : hyperparameter\")\nplt.ylabel(\"AUC\")\nplt.title(\"ERROR PLOTS\")\nplt.show()","055c7645":"optimal_alpha=alpha_set[CrossVal_AUC_TFIDF.index(max(CrossVal_AUC_TFIDF))]\nprint(optimal_alpha)","c1081fbf":"Classifier2 = MultinomialNB(alpha=optimal_alpha)\nClassifier2.fit(Train_TFIDF, y_train)","69a1915c":"print (\"Accuracy is: \", accuracy_score(y_train,Classifier2.predict(Train_TFIDF)))","686670e1":"print (\"Accuracy is: \", accuracy_score(y_test,Classifier2.predict(Test_TFIDF)))","f14e3e51":"print('Confusion Matrix of Train Data')\nTrain_mat=confusion_matrix(y_test,Classifier2.predict(Test_TFIDF))\nprint (Train_mat)","8056ee51":"from sklearn import metrics\nprint(metrics.classification_report(y_test,Classifier2.predict(Test_TFIDF)))","b135c746":"print('Confusion Matrix of Train Data')\nTrain_mat=confusion_matrix(y_train,Classifier2.predict(Train_TFIDF))\nprint (Train_mat)","51c15d6d":"plot_confusion_matrix(Classifier2, Test_TFIDF, y_test ,display_labels=['0','1'],cmap=\"Blues\",values_format = '')","4337d8d5":"\nc=[0.0001,0.001,0.01,0.1,1,10,100,1000]\nTrain_AUC_TFIDF = []\nCrossVal_AUC_TFIDF = []\nfor i in c:\n    logreg = LogisticRegression(C=i,penalty='l2')\n    logreg.fit(Train_TFIDF, y_train)\n    Train_y_pred =  logreg.predict(Train_TFIDF)\n    Train_AUC_TFIDF.append(roc_auc_score(y_train ,Train_y_pred))\n    CrossVal_y_pred =  logreg.predict(CrossVal_TFIDF)\n    CrossVal_AUC_TFIDF.append(roc_auc_score(y_cross,CrossVal_y_pred))","af18c3d4":"C=[]\nfor i in range(len(c)):\n    C.append(np.math.log(c[i]))","501313ab":"plt.plot(C, Train_AUC_TFIDF, label='Train AUC')\nplt.scatter(C, Train_AUC_TFIDF)\nplt.plot(C, CrossVal_AUC_TFIDF, label='CrossVal AUC')\nplt.scatter(C, CrossVal_AUC_TFIDF)\nplt.legend()\nplt.xlabel(\"lambda : hyperparameter\")\nplt.ylabel(\"AUC\")\nplt.title(\"ERROR PLOTS\")\nplt.show()","c4e73a4a":"optimal_inverse_lambda=c[CrossVal_AUC_TFIDF.index(max(CrossVal_AUC_TFIDF))]\nprint(pow(optimal_inverse_lambda,-1))","1668397a":"Classifier=LogisticRegression(C=optimal_inverse_lambda,penalty='l2')\nClassifier.fit(Train_TFIDF, y_train)","b0b53622":"print (\"Accuracy is: \", accuracy_score(y_train,Classifier.predict(Train_TFIDF)))","d996fac4":"print (\"Accuracy is: \", accuracy_score(y_test,Classifier.predict(Test_TFIDF)))","db9f60a2":"from sklearn import metrics\nprint(metrics.classification_report(y_test,Classifier.predict(Test_TFIDF)))","c5b55102":"plot_confusion_matrix(Classifier, Test_TFIDF, y_test ,display_labels=['0','1'],cmap=\"Blues\",values_format = '')","28be2f22":"**MultinomialNB**","d9a9ea5c":"**1** : Not over_18\n**0** : Over_18","63f1930a":"Finding the best Alpha","fe0ca633":"1. **We achieved an accuracy score of 99.483% using Logistic Regression with l2 penalty.**\n2. **The F1 score was 60% which I think is good consdering the highly imbalanced nature of our classes**\n3. **We achieved an accuracy score of 99.391% using the Multinomial Naive Bayes algorithm**\n4. **The F1 score still hovered around the 0.60 mark**","0173324c":"We can still try to improve the minority class accuracy by doing some Sampling like SMOTE, but that would mostly work well with KNN and given the high dimensionality of our dataset, KNN will eventuall suffer from **The Curse of Dimensionality**","2e031cfd":"**LOGISTIC REGRESSION**","3b8340df":"References : https:\/\/www.kaggle.com\/madz2000\/nlp-with-wordcloud-classifiers-99-accuracy","d0b91f43":"For such a highly imbalanced dataset, I think we should judge models on the F1 score or the misclassification error rather than accuracy. This is my personal thought.","93368380":"**Please upvote if you liked my approach**","c24f034d":"DATA CLEANING","66d265b2":"This notebook covers two classical approaches for solving the problem:\n1. Logistic Regression\n2. naive Bayes."}}