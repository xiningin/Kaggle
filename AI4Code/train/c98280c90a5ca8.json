{"cell_type":{"9d4039da":"code","5e53c01e":"code","be3d2e65":"code","4a9402c5":"code","6feae3d3":"code","5cb8882b":"code","54943a95":"code","b0ead419":"code","e06f9029":"code","008f363f":"code","6362606c":"code","a89b17f1":"code","34ef0cb2":"markdown","8252e40c":"markdown","8edcda61":"markdown","5c4ba740":"markdown","8c68478a":"markdown","3c19aaab":"markdown","ab17fd4e":"markdown","b485cf5c":"markdown"},"source":{"9d4039da":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport gc\nimport itertools\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import StratifiedKFold","5e53c01e":"train_df = pd.read_csv(\"..\/input\/tabular-playground-series-oct-2021\/train.csv\")\ntrain_df.set_index('id', inplace=True)\nprint(f\"train_df: {train_df.shape}\")\ntrain_df.head()","be3d2e65":"test_df = pd.read_csv(\"..\/input\/tabular-playground-series-oct-2021\/test.csv\")\ntest_df.set_index('id', inplace=True)\nprint(f\"test_df: {test_df.shape}\")\ntest_df.head()","4a9402c5":"cat_cols = [col for col in test_df.columns if train_df[col].nunique() < 5]\nnum_cols = [col for col in test_df.columns if col not in cat_cols]\nprint(f\"cat_cols: {len(cat_cols)} \\nnum_cols: {len(num_cols)}\")","6feae3d3":"train_df[num_cols] = train_df[num_cols].astype('float32')\ntrain_df[cat_cols] = train_df[cat_cols].astype('uint8')\n\ntest_df[num_cols] = test_df[num_cols].astype('float32')\ntest_df[cat_cols] = test_df[cat_cols].astype('uint8')\n\nprint(f\"train_df: {train_df.shape} \\ntest_df: {test_df.shape}\")\n\nfeatures = test_df.columns.tolist()\nprint(f\"Num features: {len(features)}\")\n\ncat_cols_indices = [train_df.columns.get_loc(col) for col in cat_cols]\nprint(f\"cat_cols_indices: {cat_cols_indices}\")","5cb8882b":"def plot_confusion_matrix(cm, classes):\n\n    plt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)\n    plt.title('Confusion matrix', fontweight='bold', pad=15)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=0)\n    plt.yticks(tick_marks, classes)\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], 'd'),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.ylabel('True label', fontweight='bold')\n    plt.xlabel('Predicted label', fontweight='bold')\n    plt.tight_layout()","54943a95":"FOLD = 10\nSEEDS = [791, 225, 508]\n\nparams = {\n    'objective': 'binary:logistic',\n    'eval_metric': 'auc',\n    'tree_method': 'gpu_hist',\n    'gpu_id': 0,\n    'predictor': 'gpu_predictor',\n    'use_label_encoder': False,\n    'n_estimators': 10000,\n    'max_depth': 6,\n    'gamma': 0.6408,\n    'subsample': 0.7,\n    'colsample_bytree': 0.3,\n    'colsample_bylevel': 0.6,\n    'min_child_weight': 56.42,\n    'reg_lambda': 75.567,\n    'reg_alpha': 0.1177,\n    'verbosity': 0,\n    'random_state': 2021\n}","b0ead419":"counter = 0\noof_score = 0\ny_pred_final_xgb = np.zeros((test_df.shape[0], 1))\ny_pred_meta_xgb = np.zeros((train_df.shape[0], 1))\n\n\nfor sidx, seed in enumerate(SEEDS):\n    seed_score = 0\n    \n    kfold = StratifiedKFold(n_splits=FOLD, shuffle=True, random_state=seed)\n\n    for idx, (train, val) in enumerate(kfold.split(train_df[features], train_df['target'])):\n        counter += 1\n\n        train_x, train_y = train_df[features].iloc[train], train_df['target'].iloc[train]\n        val_x, val_y = train_df[features].iloc[val], train_df['target'].iloc[val]\n\n        params['learning_rate']=0.03\n        init_model = XGBClassifier(**params)\n\n        init_model.fit(train_x, train_y, eval_set=[(train_x, train_y), (val_x, val_y)], \n                       early_stopping_rounds=200, verbose=500)\n\n        params['learning_rate']=0.01\n        model = XGBClassifier(**params)\n\n        model.fit(train_x, train_y, eval_set=[(train_x, train_y), (val_x, val_y)], \n                  early_stopping_rounds=200, verbose=300, xgb_model=init_model)\n        \n        y_pred = model.predict_proba(val_x, iteration_range=(0, model.best_iteration))[:,-1]\n        y_pred_meta_xgb[val] += np.array([y_pred]).T\n        y_pred_final_xgb += np.array([model.predict_proba(test_df, iteration_range=(0, model.best_iteration))[:,-1]]).T\n        \n        score = roc_auc_score(val_y, y_pred)\n        oof_score += score\n        seed_score += score\n        print(\"\\nXGBoost | Seed-{} | Fold-{} | OOF Score: {}\\n\".format(seed, idx, score))\n        \n        del model, y_pred\n        del train_x, train_y\n        del val_x, val_y\n        gc.collect()\n    \n    print(\"\\nXGBoost | Seed: {} | Aggregate OOF Score: {}\\n\\n\".format(seed, (seed_score \/ FOLD)))\n\n\ny_pred_meta_xgb = y_pred_meta_xgb \/ float(len(SEEDS))\ny_pred_final_xgb = y_pred_final_xgb \/ float(counter)\noof_score \/= float(counter)\nprint(\"XGBoost | Aggregate OOF Score: {}\".format(oof_score))","e06f9029":"y_pred_meta = np.mean(y_pred_meta_xgb, axis=1)\ny_pred = (y_pred_meta>0.5).astype(int)\nprint(classification_report(train_df['target'], y_pred))","008f363f":"cnf_matrix = confusion_matrix(train_df['target'], y_pred, labels=[0, 1])\nnp.set_printoptions(precision=2)\nplt.figure(figsize=(12, 5))\nplot_confusion_matrix(cnf_matrix, classes=[0, 1])","6362606c":"np.savez_compressed('.\/TPS_1021_XGB_Meta_Features.npz',\n                    y_pred_meta_xgb=y_pred_meta_xgb,  \n                    y_pred_final_xgb=y_pred_final_xgb)","a89b17f1":"submit_df = pd.read_csv(\"..\/input\/tabular-playground-series-oct-2021\/sample_submission.csv\")\nsubmit_df['target'] = y_pred_final_xgb.ravel()\nsubmit_df.to_csv(\"XGB_Submission.csv\", index=False)\nsubmit_df.head()","34ef0cb2":"## Load source datasets","8252e40c":"## XGBoost Model","8edcda61":"## Helper Function","5c4ba740":"## Create submission files","8c68478a":"## Save meta features","3c19aaab":"## Import libraries","ab17fd4e":"## Model Hyperparameters","b485cf5c":"## Feature Engineering"}}