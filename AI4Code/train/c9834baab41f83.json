{"cell_type":{"a496d82b":"code","4801b9b4":"code","781750ff":"code","46d2561b":"code","ba583859":"code","8034f181":"code","30a9b2cb":"code","4b404cc7":"code","6815dc7a":"code","658456cc":"code","154f3f14":"code","233b5112":"markdown","505e240a":"markdown","3a519106":"markdown","57bc6be7":"markdown","c5148760":"markdown","008ca19a":"markdown","ca1bb7fd":"markdown"},"source":{"a496d82b":"import keras\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np \nimport cv2\nimport os\n%matplotlib inline  ","4801b9b4":"base_dir='..\/input\/chest-xray-pneumonia\/'\ntrain_pneumonia=os.listdir('..\/input\/chest-xray-pneumonia\/chest_xray\/train\/PNEUMONIA\/')\ntrain_normal=os.listdir('..\/input\/chest-xray-pneumonia\/chest_xray\/train\/NORMAL\/')\nval_dir_normal=os.listdir('..\/input\/chest-xray-pneumonia\/chest_xray\/val\/PNEUMONIA\/')\ntest_dir_normal=os.listdir('..\/input\/chest-xray-pneumonia\/chest_xray\/test\/NORMAL\/')\nval_dir_pneumonia=os.listdir('..\/input\/chest-xray-pneumonia\/chest_xray\/val\/PNEUMONIA\/')\ntest_dir_pneumonia=os.listdir('..\/input\/chest-xray-pneumonia\/chest_xray\/test\/NORMAL\/')","781750ff":"from keras.preprocessing.image import ImageDataGenerator, load_img\nplt.suptitle('Normal Lungs')\nfor i in range(0,4):\n    img = train_normal[i]\n    img = load_img('..\/input\/chest-xray-pneumonia\/chest_xray\/train\/NORMAL\/' + img)\n    plt.imshow(img)\n    plt.show()\n","46d2561b":"from keras.preprocessing.image import ImageDataGenerator, load_img\nplt.suptitle('Pneumonia')\nfor i in range(0,4):\n    img = train_pneumonia[i]\n    img = load_img('..\/input\/chest-xray-pneumonia\/chest_xray\/train\/PNEUMONIA\/' + img)\n    plt.imshow(img)\n    plt.show()","ba583859":"sns.barplot(x=['Normal','Pneumonia'],y=[len(train_normal),len(train_pneumonia)])","8034f181":"from keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.layers import Activation, Dropout, Flatten, Dense\nfrom keras import backend as K\nfrom keras import regularizers","30a9b2cb":"train_datagen = ImageDataGenerator(    rescale=1\/255.,\n                                        horizontal_flip=True,\n                                        vertical_flip=True,\n                                        rotation_range=0.4,\n                                        zoom_range=0.4\n                                                                       )\n\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntraining_set = train_datagen.flow_from_directory('..\/input\/chest-xray-pneumonia\/chest_xray\/train\/',\n                                                 target_size=(224, 224),\n                                                 batch_size=8,\n                                                 class_mode='binary')\n\nval_set = train_datagen.flow_from_directory('..\/input\/chest-xray-pneumonia\/chest_xray\/val',\n                                            target_size=(224, 224),\n                                            batch_size=8,\n                                            shuffle=True,\n                                            class_mode='binary')\n\ntest_set = test_datagen.flow_from_directory('..\/input\/chest-xray-pneumonia\/chest_xray\/test',\n                                            target_size=(224, 224),\n                                            batch_size=8,\n                                            class_mode='binary')\n","4b404cc7":"from keras.callbacks import ReduceLROnPlateau\nRLR = ReduceLROnPlateau(monitor='val_loss',\n                                         factor=0.1,\n                                         patience=3,\n                                         cooldown=3,\n                                         min_lr=0.01,\n                                        verbose=1)\n\ncallbacks = [RLR]","6815dc7a":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D, Conv3D, BatchNormalization\nfrom keras import optimizers\nfrom keras import backend as K\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3,3), activation='relu', input_shape=(224, 224, 3)))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Conv2D(64, kernel_size=(3,3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Conv2D(128, kernel_size=(3,3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Conv2D(256, kernel_size=(3,3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Conv2D(512, kernel_size=(3,3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Flatten())\nmodel.add(Dense(256, activation='relu',kernel_regularizer=regularizers.l1_l2(l1=1e-5, l2=1e-4),\n        bias_regularizer=regularizers.l2(1e-4), activity_regularizer=regularizers.l2(1e-5)))\nmodel.add(Dense(128, activation='relu',kernel_regularizer=regularizers.l1_l2(l1=1e-5, l2=1e-4),\n        bias_regularizer=regularizers.l2(1e-4),activity_regularizer=regularizers.l2(1e-5)))\nmodel.add(Dense(64, activation='relu',kernel_regularizer=regularizers.l1_l2(l1=1e-5, l2=1e-4),\n        bias_regularizer=regularizers.l2(1e-4),activity_regularizer=regularizers.l2(1e-5)))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1, activation='sigmoid',kernel_regularizer=regularizers.l1_l2(l1=1e-5, l2=1e-4),\n    bias_regularizer=regularizers.l2(1e-4),\n    activity_regularizer=regularizers.l2(1e-5)))\nprint(model.summary())\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\nhistory = model.fit_generator(training_set,\n                    steps_per_epoch=5216\/\/8,\n                    epochs=12,\n                    validation_data=test_set,\n                    validation_steps=624\/\/8,\n                    callbacks=callbacks)","658456cc":"import matplotlib.pyplot as plt\n\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(1,len(acc)+1)\n\nplt.plot(epochs, acc, 'bo', label='Training acc')\nplt.plot(epochs, val_acc, 'b', label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.legend()\n\nplt.figure()\n\nplt.plot(epochs, loss, 'bo', label='Training loss'\n        )\nplt.plot(epochs, val_loss, 'b', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\n","154f3f14":"ev = model.evaluate_generator(val_set)\nprint(\"\\n%s: %.f%%\" % (model.metrics_names[1], ev[1]*100))","233b5112":"2. Data vizualization ","505e240a":"This is basically my first CNN model that is dedicated to recognizing pneumonia. Let's start with import main libraries.","3a519106":"3. Data preprocessing","57bc6be7":"1. Import libraries ","c5148760":"Viral pneumonia on the X-ray is characterized by such a pattern as Ground-glass opacity. Bacterial pneumonia has clear areas of opacity. In our dataset, we have a lot of people with pneumonia.","008ca19a":"Let's see what the lungs look like without and with pneumonia.","ca1bb7fd":"![%D0%B8%D0%B7%D0%BE%D0%B1%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5.png](attachment:%D0%B8%D0%B7%D0%BE%D0%B1%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5.png)"}}