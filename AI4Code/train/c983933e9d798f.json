{"cell_type":{"1831cb79":"code","d55f1181":"code","857d1f9e":"code","c215d09c":"code","d5c2476b":"code","8c448104":"code","a53b5825":"code","8ce0b82a":"code","9407dbe6":"code","a365c983":"code","b07a42ab":"code","db9cd490":"code","42bc688b":"code","aae1ffbb":"markdown","bab7822a":"markdown","976241ec":"markdown","ea5d646b":"markdown","555ae553":"markdown","2c8c3340":"markdown","5dad350f":"markdown"},"source":{"1831cb79":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d55f1181":"import random\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler,MinMaxScaler\nimport dill\nimport tensorflow as tf\nfrom tensorflow import keras\nimport random\nfrom sklearn.model_selection import GroupKFold","857d1f9e":"np.random.seed(1230)\nrandom.seed(1230)","c215d09c":"train_df = pd.read_feather('\/kaggle\/input\/jane-street-market-dataset-to-feather\/train.feather')\nfeature_df = pd.read_feather('\/kaggle\/input\/jane-street-market-dataset-to-feather\/features.feather')\nfeature_df.set_index('feature',inplace=True)","d5c2476b":"train_df['target'] = (train_df.resp>0).astype(np.int32)","8c448104":"# Use all columns in the dataframe as a feature  except these\nignore_columns = ['resp_1', 'resp_2', 'resp_3', 'resp_4', 'resp','ts_id','target']\nfeature_cols = [col for col in train_df.columns if col not in ignore_columns]\n\n# We will need it during submission\ndill.dump(feature_cols,open('feature_cols.dill','wb'))","a53b5825":"# We will work with NumPy arrays\ntrain_df.fillna(0,inplace=True)\ntrain_df = train_df.sample(frac=1.,random_state=0)\ny = train_df.target.values \nX = train_df[feature_cols].values.astype(np.float32)\ndates = train_df[['date',]].values\ndel train_df","8ce0b82a":"sss = GroupKFold(n_splits=5,)\nsss.get_n_splits(X, y,dates)","9407dbe6":"for train_index, test_index in sss.split(X, y,dates):\n    print(\"TRAIN:\", train_index.shape, \"TEST:\", test_index.shape)\n    X_train,X_test,y_train,y_test = X[train_index],X[test_index],y[train_index],y[test_index]\n    break","a365c983":"filepath=\"val_model{val_acc}.hdf5\"\ncallbacks_list = [\n    keras.callbacks.ModelCheckpoint(filepath, \n                                    verbose=1,\n                                    monitor='val_acc', \n                                    save_best_only=True, \n                                    mode='max'),\n]\nbatch_size = 2**12\nbatch_size","b07a42ab":"model = keras.Sequential([\n    keras.layers.BatchNormalization(input_shape=(len(feature_cols),)),\n    \n    keras.layers.Dense(512),\n    keras.layers.BatchNormalization(),\n    keras.layers.Activation('relu'),\n    keras.layers.Dropout(0.2),\n    \n    keras.layers.Dense(512),\n    keras.layers.BatchNormalization(),\n    keras.layers.Activation('relu'),\n    keras.layers.Dropout(0.2),\n    \n    keras.layers.Dense(512),\n    keras.layers.BatchNormalization(),\n    keras.layers.Activation('relu'),\n    keras.layers.Dropout(0.2),\n    \n    keras.layers.Dense(512),\n    keras.layers.BatchNormalization(),\n    keras.layers.Activation('relu'),\n    keras.layers.Dropout(0.2),\n    \n    \n    keras.layers.Dense(1,activation='sigmoid'),\n])\n\nif os.path.exists('.\/last_model.hdf5'):\n    print('Loading...')\n    model = keras.models.load_model('.\/last_model.hdf5')\nmodel.compile(loss=keras.losses.binary_crossentropy,\n              optimizer=keras.optimizers.Adam(0.001),\n              metrics=['acc',]\n             )\nmodel.summary()","db9cd490":"history = model.fit(X_train,y_train,\n                    batch_size=batch_size,\n                    validation_data=(X_test,y_test,),\n                    epochs=100,\n                    callbacks=callbacks_list)\nmodel.save('last_model.hdf5')","42bc688b":"history_df = pd.DataFrame(history.history)\n#history_df.loss = MinMaxScaler().fit_transform(history_df[['loss',]])\n#history_df.val_loss = MinMaxScaler().fit_transform(history_df[['val_loss',]])\nhistory_df.plot()","aae1ffbb":"## Train","bab7822a":"We converted the dataset to the **.feather** format in this [Notebook](https:\/\/www.kaggle.com\/tchaye59\/jane-street-market-dataset-to-feather). It is faster to load and support all build in pandas functionality.","976241ec":"## Define The target","ea5d646b":"## Prepare the dataset","555ae553":"! cp \/kaggle\/input\/jmarket-keras-starter\/*model.hdf5 .\/\n! cp \/kaggle\/input\/jmarket-keras-starter\/val_model.hdf5 .\/best_val_model.hdf5","2c8c3340":"It is better to separate submission and training:\n\n## [Check the submission notebook](https:\/\/www.kaggle.com\/tchaye59\/jmarket-keras-starter-submit)","5dad350f":"# Build the model"}}