{"cell_type":{"9e453552":"code","446a940f":"code","eb4b34eb":"code","e304392b":"code","3ec242b1":"code","8b65c73a":"code","7831bf34":"code","6ddd5c43":"code","8323c476":"code","7a04590c":"code","f4f734bc":"code","fd1a1cd7":"code","a058fd4e":"code","9fc08a44":"code","060a1776":"code","7865134e":"code","4b27dcbe":"code","b2dd0395":"code","d9312498":"code","d7bba153":"code","fdeb63a9":"code","3d8a7b04":"code","581061b6":"code","7265328a":"code","b31e54ea":"markdown","ad7bfec3":"markdown","3047d9a1":"markdown","12a3dee0":"markdown","5b001276":"markdown","92ee670b":"markdown","d5c7af7f":"markdown","0da245eb":"markdown","9b8feb17":"markdown","b89d40b2":"markdown","676e10b8":"markdown","b12ff70d":"markdown"},"source":{"9e453552":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import RandomizedSearchCV, train_test_split\nfrom sklearn.preprocessing import OneHotEncoder\n","446a940f":"X_train = pd.read_csv('..\/input\/home-data-for-ml-course\/train.csv', index_col='Id')\nX_test = pd.read_csv('..\/input\/home-data-for-ml-course\/test.csv', index_col='Id')","eb4b34eb":"print(f\"Train Shape: {X_train.shape}\\nTest Shape: {X_test.shape}\")","e304392b":"X_train.dropna(axis=0, subset=['SalePrice'], inplace=True)\ny_train = X_train.SalePrice\nX_train.drop(['SalePrice'], axis=1, inplace=True)","3ec242b1":"X_train.info()","8b65c73a":"cat_cols = [col for col in X_train.columns if X_train[col].dtype==\"O\"]\nnum_cols = [col for col in X_train.columns if(X_train[col].dtype==\"int64\" or X_train[col].dtype==\"float64\")]","7831bf34":"print(f\"Total number of cols = cat_cols + num_cols = {len(cat_cols)+len(num_cols)}\\nNumber of columns in X_train = {X_train.shape[1]}\")","6ddd5c43":"imputer_cat = SimpleImputer(strategy='most_frequent')\nimputer_num = SimpleImputer(strategy='constant')","8323c476":"imputer_cat.fit(X_train[cat_cols])\nimputer_num.fit(X_train[num_cols])","7a04590c":"X_train_imputed_num = pd.DataFrame(imputer_num.transform(X_train[num_cols].copy()))\nX_train_imputed_cat = pd.DataFrame(imputer_cat.transform(X_train[cat_cols].copy()))","f4f734bc":"X_train_imputed_num.columns = X_train[num_cols].columns\nX_train_imputed_cat.columns = X_train[cat_cols].columns","fd1a1cd7":"X_train_imputed = pd.concat([X_train_imputed_num,X_train_imputed_cat], axis = 1)\nassert X_train_imputed.shape == X_train.shape, \"Shape mismatch\"","a058fd4e":"enc = OneHotEncoder(handle_unknown='ignore', sparse=False)\nenc.fit(X_train_imputed[cat_cols])\nX_cat_transformed = pd.DataFrame(enc.transform(X_train_imputed[cat_cols]), columns=enc.get_feature_names(input_features=cat_cols))\nX_train_final = X_train_imputed.merge(X_cat_transformed, left_index = True, right_index = True).drop(columns = cat_cols, axis=1)\nX_train_final.shape","9fc08a44":"X_train, X_valid, y_train, y_valid = train_test_split(X_train_final, y_train, train_size=0.8, test_size=0.2,random_state=197)","060a1776":"X_train.shape","7865134e":"n_estimators = [int(x) for x in np.linspace(start = 100, stop = 1000, num = 20)]\nmax_features = ['auto', 'sqrt', 'log2']\nmax_depth = [int(x) for x in np.linspace(5, 30, num = 25)]\nmax_depth.append(None)\nmin_samples_split = [int(x) for x in np.linspace(2, 10, num = 8)]\nmin_samples_leaf = [int(x) for x in np.linspace(1, 5, num = 5)]\nbootstrap = [True, False]\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}","4b27dcbe":"rf = RandomForestRegressor()\nrf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, n_iter = 100, cv = 3, verbose=2, random_state=42, n_jobs = -1)\nrf_random.fit(X_train, y_train)\nrf_random.best_params_","b2dd0395":"model = RandomForestRegressor(n_estimators=1000, random_state=42, n_jobs=10, min_samples_split= 4, min_samples_leaf=1, max_features='sqrt', max_depth=24,bootstrap=False)\nmodel.fit(X_train, y_train)","d9312498":"X_valid.shape","d7bba153":"preds_valid = model.predict(X_valid)\nprint(f\"MAE: {mean_absolute_error(y_valid, preds_valid)}\")","fdeb63a9":"X_test_imputed_num = pd.DataFrame(imputer_num.transform(X_test[num_cols]))\nX_test_imputed_cat = pd.DataFrame(imputer_cat.transform(X_test[cat_cols]))\n\nX_test_imputed_num.columns = X_test[num_cols].columns\nX_test_imputed_cat.columns = X_test[cat_cols].columns\n\nX_test_imputed = pd.concat([X_test_imputed_num,X_test_imputed_cat], axis = 1)\nassert X_test_imputed.shape == X_test.shape, \"Shape mismatch\"\n\nX_cat_transformed = pd.DataFrame(enc.transform(X_test_imputed[cat_cols]), columns=enc.get_feature_names(input_features=cat_cols))\nX_test_final = X_test_imputed.merge(X_cat_transformed, left_index = True, right_index = True).drop(columns = cat_cols, axis=1)","3d8a7b04":"print(f\"Original shape: {X_test.shape}\\nImputed shape: {X_test_imputed.shape}\\nEncoded shape: {X_test_final.shape}\")","581061b6":"preds_test = model.predict(X_test_final)","7265328a":"output = pd.DataFrame({'Id': X_test.index,'SalePrice': preds_test})\noutput.to_csv('submission.csv', index=False)","b31e54ea":"## Impute missing values","ad7bfec3":"# Predictions on test ","3047d9a1":"## Encode categorical columns","12a3dee0":"### GridSearchCV for finding the best hyperparameters for the model","5b001276":"### Test predictions","92ee670b":"### Get validation predictions and MAE","d5c7af7f":"### Remove rows with missing target, separate target from predictors","0da245eb":"# Modelling","9b8feb17":"# Preprocess ","b89d40b2":"# Save test predictions to file","676e10b8":"## Defining the best fit model","b12ff70d":"# Read the data\n"}}