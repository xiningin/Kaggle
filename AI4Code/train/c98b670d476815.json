{"cell_type":{"2b93bf45":"code","809ee8b3":"code","ce1899dc":"code","056fe7a4":"code","3b56f964":"code","13bbf32a":"code","be0d6307":"code","4b9479e0":"code","ab9ecfff":"code","09b92099":"code","d71fb19a":"code","3e952529":"code","df2a2b49":"code","103f2ba2":"code","a0c1d44b":"code","c28b5a5a":"code","4f79f50c":"code","1f883d01":"code","f31b89ff":"code","f171cf51":"code","c64f40ca":"markdown","ea147172":"markdown","fd4fc95c":"markdown","587bca10":"markdown","bd0b2835":"markdown","93948d88":"markdown","dd227231":"markdown","3514a95d":"markdown","3b1bbd0f":"markdown","9a56a399":"markdown","e59d2141":"markdown","82d68e64":"markdown","983cf6a6":"markdown","c54557d0":"markdown","25eb2d9e":"markdown","f061b104":"markdown","a3294ac8":"markdown"},"source":{"2b93bf45":"import pandas as pd\nimport numpy as np\n#\u8bfb\u53d6\u6570\u636e\ndata_train=pd.read_csv('..\/input\/titanic\/train.csv')\ndata_test=pd.read_csv('..\/input\/titanic\/test.csv')\ndf=data_train.append(data_test)\n#\u6253\u5370\u6570\u636e\u7684\u4fe1\u606f \u5217\u540d \u975e\u7a7a\u7684\u4e2a\u6570 \u6570\u636e\u7c7b\u578b\ndf.info()\nprint('-'*80,'\\n')\n\nprint('\u5408\u5e76\u540e\u4e00\u5171\u6709{0}\u6761\u6570\u636e'.format(str(df.shape[0])))\nprint(df.isnull().sum())\nprint('-'*80,'\\n')\nprint(df.describe())\nprint('-'*80,'\\n')\n#\u5206\u7c7b\u7684\u79cd\u6570\nprint(df.nunique())","809ee8b3":"import matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('bmh')\nplt.rcParams['font.sans-serif']='SimHei'\nplt.rcParams['font.size']=15\ncat_list=['PassengerId','Survived','Pclass','Name','Sex','Age',\n          'SibSp','Parch','Ticket','Fare','Cabin','Embarked']\nfor i,n in enumerate(cat_list):\n          cat_num=df[n].value_counts().index.shape[0]\n          print(\"{0}:{1}\u7279\u5f81\u7684\u7c7b\u578b\u6570\u91cf\u662f{2}\".format(i+1,n,cat_num))","ce1899dc":"df['Embarked'].value_counts()","056fe7a4":"f,[ax1,ax2,ax3]=plt.subplots(1,3,figsize=(20,5))\nsns.countplot(x='Sex',hue='Survived',data=data_train,ax=ax1)\nsns.countplot(x='Pclass',hue='Survived',data=data_train,ax=ax2)\nsns.countplot(x='SibSp',hue='Survived',data=data_train,ax=ax3)\nax1.set_title('Sex\u7279\u5f81\u5206\u6790')\nax2.set_title('Pclass\u7279\u5f81\u5206\u6790')\nax3.set_title('SibSp\u7279\u5f81\u5206\u6790')\n\nf.suptitle('\u5b9a\u7c7b\/\u5b9a\u5e8f\u6570\u636e\u7c7b\u578b\u7279\u5f81\u5206\u6790',size=20,y=1.1)\n\nf,[ax1,ax2]=plt.subplots(1,2,figsize=(20,5))\nsns.countplot(x='Parch',hue='Survived',data=data_train,ax=ax1)\nsns.countplot(x='Embarked',hue='Survived',data=data_train,ax=ax2)\nax1.set_title('Parch\u7279\u5f81\u5206\u6790')\nax2.set_title('Embarked\u7279\u5f81\u5206\u6790')\n","3b56f964":"f,[ax1,ax2]=plt.subplots(1,2,figsize=(18,6))\ncolors=['lightyellow','red']\n\nf1=sns.heatmap(data_train[['Age','Cabin','Embarked','Fare']].sort_values('Age').isnull(),\n              cmap=sns.color_palette(colors),ax=ax1)\nf2=sns.heatmap(data_test[['Age','Cabin','Embarked','Fare']].sort_values('Age').isnull(),\n              cmap=sns.color_palette(colors),ax=ax2)","13bbf32a":"print(data_train[['Age','PassengerId']].groupby('Age').count().reset_index().\n      rename(columns={'PassengerId':'cnt'}).sort_values('cnt',ascending=False))\n","be0d6307":"data_train['Age_range']=pd.cut(data_train['Age'],5,precision=0)\nfg,ax=plt.subplots(1,1,figsize=(16,5))\nz=sns.barplot(data=data_train[['Age_range','Survived']],x='Age_range',y='Survived',\n             ax=ax,palette=sns.color_palette('pastel'))\nz.set_title('Age comparison for Survival')\nplt.show()\ndata_train.drop('Age_range',axis=1,inplace=True)\n#print(data_train['Age_range'])","4b9479e0":"z2=sns.barplot(data=data_train,x='Sex',y='Survived',hue='Sex')\n\nz2.set_title('Sex-survival comparison')\nplt.show()","ab9ecfff":"import re\nfrom collections import Counter\nplt.rcParams['font.size']=12\n\ndef check_title(x) : \n    return re.search(' ([A-Za-z]+)\\.', x).group(1)\n\nprint(Counter(data_train['Name'].map(check_title).to_list()))\ndata_train['Title']=data_train['Name'].map(check_title)\n\nfg,ax=plt.subplots(1,1,figsize=(16,6))\nbar=sns.barplot(data=data_train[['Title','Survived']],y='Title',x='Survived',orient='h',\n               ax=ax,palette=sns.color_palette('Blues'))\nbar.set_title('Survival comparison for passengers with different titles')\ndata_train.drop('Title',axis=1)\n","09b92099":"fg,ax=plt.subplots(1,1,figsize=(16,4))\nz=sns.violinplot(data=data_train[['Fare','Survived']],x='Survived',y='Fare',\n                 ax=ax,palette=sns.color_palette('pastel'))\nz.set_title('Survival based on fare')\n","d71fb19a":"plt.rcParams['font.size']=13\nsns.pairplot(data=data_train[['Pclass','Age','SibSp','Parch','Fare','Survived']],\n             hue='Survived')","3e952529":"fg,ax=plt.subplots(1,1,figsize=(16,5))\np1=sns.barplot(data=data_train[['Survived','Embarked']],x='Embarked',y='Survived',ax=ax)\np1.set_title('Checking embarked for survival')\n\nfg,ax=plt.subplots(1,1,figsize=(16,5))\nsns.countplot(data=data_train[['Embarked','Survived']],x='Embarked',hue='Survived')","df2a2b49":"def feature_process(df_train):\n    df_train['Embarked'].fillna(df_train['Embarked'].mode(),inplace=True)\n    df_train['Age'].fillna(df_train['Age'].median(),inplace=True)\n    df_train['Fare'].fillna(df_train['Fare'].mean(),inplace=True)\n    #\u5220\u9664\u67d0\u4e00\u5217\u7684\u6570\u636e\n    if 'Cabin' in df_train.columns:\n        df_train.drop('Cabin',axis=1,inplace=True)\n    if 'Ticket'in df_train.columns:\n        df_train.drop('Ticket',axis=1,inplace=True)\n     #\u6570\u636e\u79bb\u6563\u5316\n    df_train['Age_cd']=pd.cut(df_train['Age'],10,precision=0).astype('category').cat.codes\n    df_train['Sex_cd']=df_train['Sex'].astype('category').cat.codes\n    df_train['Title_cd']=df_train['Name'].map(check_title).astype('category').cat.codes\n    df_train['Embarked_cd']=df_train['Embarked'].astype('category').cat.codes\n    print('data preprocessing complete\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7')\nfeature_process(data_train)\n\nfeature_process(data_test)\ndata_train.head(5)\ndata_test.head(5)","103f2ba2":"data_train.columns","a0c1d44b":"f,ax=plt.subplots(1,1,figsize=(20,20))\nh = sns.heatmap(pd.get_dummies(data_train[['Survived','Pclass','Sex','Age_cd']] \n               ,columns=['Survived','Pclass', 'Sex', 'Age_cd']).corr(),\n           annot=True,cmap='RdYlGn_r',linewidths=0.2,annot_kws={'fontsize':10})","c28b5a5a":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\n\nfeatures=['Pclass','SibSp','Parch','Fare','Embarked_cd','Sex_cd','Age_cd','Title_cd']\nX_train,X_test,y_train,y_test=train_test_split(data_train[features],\n                                               data_train['Survived'],test_size=0.3,\n                                              random_state=25)\nfor i,j in enumerate([X_train,X_test,y_train,y_test]):\n    print(f'{i+1}:{j.shape}')\n\nlr=LogisticRegression(max_iter=2000)\nlr.fit(X_train,y_train)\n","4f79f50c":"def evaluation(model_name):\n    print('-'*40,'\\n')\n    print('Evalution for the model:',model_name)\n    print('-'*40,'\\n')\n    y_predict=model_name.predict(X_test)\n    acc=accuracy_score(y_test,y_predict)\n    print(f'Accuracy of the model is {acc*100}%')\n    cmat=confusion_matrix(y_test,y_predict)\n    scores=cmat.diagonal()\/cmat.sum(axis=1)\n    for x in zip(['Not Survived','Survived'],scores):\n        print(f'Accuracy score for {x[0]} :{x[1]*100}%')\n    print('\\n','-'*40,'\\n')\n    sns.heatmap(cmat, cmap='Set3' , annot=True , fmt = '4.0f')\n    title = f'Confusion_matrix : {model_name}'\n    plt.title(f'{title}', y=1.1, size=20)\n    plt.show()\nevaluation(lr)    ","1f883d01":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_predict,GridSearchCV\n\nrfc=RandomForestClassifier(min_samples_leaf=1,min_samples_split=2,\n                           random_state=10)\nparams={'max_depth':[5,10,15],'n_estimators':[50,100,200,300]}\nrfc_grid=GridSearchCV(rfc,param_grid=params,verbose=2,cv=10)\nrfc_grid.fit(X_train,y_train)\n#predict_rfc=cross_val_predict(rfc,X_train,y_train,cv=10)\n#rfc.fit(X_train,y_train)\n#evaluation(rfc)","f31b89ff":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.metrics import f1_score\nrfc=RandomForestClassifier(max_depth=5,\n                           n_estimators=200,\n                           min_samples_leaf=1,min_samples_split=2,\n                           random_state=10)\n\nrfc.fit(X_train,y_train)\nevaluation(rfc)\n","f171cf51":"test_prediction=rfc.predict(data_test[features])\nfinal=pd.DataFrame({'PassengerId':data_test['PassengerId'],'Survived':test_prediction})\nfinal.to_csv('.\/gender_submission.csv',index=False)\nfinal.head(20)\n","c64f40ca":"## Evaluate the model ","ea147172":"## model fitting","fd4fc95c":"## Checking embarked for survival ","587bca10":"## \u76f4\u65b9\u56fe countplot","bd0b2835":"# Building the model ","93948d88":"# Feature engineering","dd227231":"# \u6570\u636e\u53ef\u89c6\u5316 ","3514a95d":"# \u6570\u636e\u63a2\u7d22","3b1bbd0f":"## barplot","9a56a399":"## \u7f3a\u5931\u503c\u70ed\u529b\u56fe heatmap","e59d2141":"###  Finding Titles in the names","82d68e64":"### \uff08violinplot\uff09Survival based on fare","983cf6a6":"### Age-Survival","c54557d0":"## Prediction of the test set","25eb2d9e":"## Exploring multiple features together","f061b104":"## Data preprocessing","a3294ac8":"### Sex-Survival"}}