{"cell_type":{"ac5df93a":"code","ad81c03a":"code","7f24042d":"code","1a3edad9":"code","e7f65999":"code","71006dbb":"code","589d42ca":"code","26724939":"code","df39e74a":"code","1a54d11e":"markdown","748a5de2":"markdown","530fd59a":"markdown","2485579e":"markdown","20cff8cc":"markdown","4c6450eb":"markdown","a3ec5f41":"markdown","8cf3c535":"markdown"},"source":{"ac5df93a":"import os\nimport numpy as np\nimport pandas as pd\n\ndata_path = '..\/input\/g-research-crypto-forecasting\/train.csv'\ndtypes = {\n    'timestamp': np.int64,\n    'Asset_ID': np.int8,\n    'Close': np.float64,\n    'Target': np.float64,\n}\ncrypto_df = pd.read_csv(data_path, dtype=dtypes, usecols=list(dtypes.keys()))\n\nasset_details_path = '..\/input\/g-research-crypto-forecasting\/asset_details.csv'\nasset_details = pd.read_csv(asset_details_path)\n\ncrypto_df = crypto_df.merge(asset_details, on='Asset_ID')","ad81c03a":"# from https:\/\/www.kaggle.com\/alexfir\/recreating-target\/\ndef calculate_target(data: pd.DataFrame, details: pd.DataFrame, price_column: str):\n    ids = list(details.Asset_ID)\n    asset_names = list(details.Asset_Name)\n    weights = np.array(list(details.Weight))\n\n    all_timestamps = np.sort(data['timestamp'].unique())\n    targets = pd.DataFrame(index=all_timestamps)\n\n    for i, id in enumerate(ids):\n        asset = data[data.Asset_ID == id].set_index(keys='timestamp')\n        price = pd.Series(index=all_timestamps, data=asset[price_column])\n        targets[asset_names[i]] = (\n            price.shift(periods=-16) \/\n            price.shift(periods=-1)\n        ) - 1\n    \n    targets['m'] = np.average(targets.fillna(0), axis=1, weights=weights)\n    \n    m = targets['m']\n\n    num = targets.multiply(m.values, axis=0).rolling(3750).mean().values\n    denom = m.multiply(m.values, axis=0).rolling(3750).mean().values\n    beta = np.nan_to_num(num.T \/ denom, nan=0., posinf=0., neginf=0.)\n\n    targets = targets - (beta * m.values).T\n    targets.drop('m', axis=1, inplace=True)\n    \n    return targets","7f24042d":"recon_targets = calculate_target(data=crypto_df, details=asset_details, price_column='Close')\nrecon_targets = pd.melt(recon_targets.reset_index(), id_vars='index')\nrecon_targets = recon_targets.rename(columns={'index':'timestamp', 'variable':'Asset_Name', 'value':'recon_Target'})","1a3edad9":"crypto_df = crypto_df.merge(recon_targets, on=['Asset_Name', 'timestamp'])","e7f65999":"all(crypto_df.Target.isna() == crypto_df.recon_Target.isna()) ","71006dbb":"crypto_df['abs_error'] = abs(crypto_df['Target'] - crypto_df['recon_Target'])\nprint(\"abs_error statistics for the entirety of train data:\")\ncrypto_df['abs_error'].describe()","589d42ca":"crypto_df[crypto_df.abs_error > 1e-13]","26724939":"print(f\"Datetime of offence: {pd.to_datetime(1514989740, unit='s')}\")","df39e74a":"indices = crypto_df[crypto_df.abs_error > 1e-13].index\nprint(\"abs_error statistics after dropping offenders:\")\ncrypto_df.drop(indices).abs_error.describe()","1a54d11e":"# Preliminaries","748a5de2":"Check that all NaNs match up:","530fd59a":"# Target reconstruction: what's up with 2018-01-03 14:29:00?\n# UPDATE: \n### There's nothing special about that date except that it is 3749 steps after the train set starts! Adding in a timestamp at 2018-01-01 00:00 while calculating the Target completely changes the value of the four rows mentioned below. See [updated notebook](https:\/\/www.kaggle.com\/jagofc\/target-reconstruction-quick-summary-of-sota) and [renewed discussion](https:\/\/www.kaggle.com\/c\/g-research-crypto-forecasting\/discussion\/286778#1626395).\n\n# Old notebook below:\n\nThis is a quick note to draw attention to one timestamp that the heroic target-reconstruction work collected in alexfir's [notebook](https:\/\/www.kaggle.com\/alexfir\/recreating-target\/) isn't reproducing.\nThe plus side is that - excluding just 4 rows from 2018-01-03 14:29:00 - the reconstruction is pretty much perfect.\n\n## Summary statistics:\n\n**Calculated on all rows:**\n\n* Mean absolute error: 6.0e-10\n* Max absolute error: 3.8e-03\n* Std absolute error: 1.4e-06\n\n\n**Calculated on all rows except [3748, 3899904, 9762453, 11718653]:**\n\n* Mean absolute error: 8.2e-16\n* Max absolute error: 2.8e-15\n* Std absolute error: 8.5e-14\n\n**The question is: why does it have a large error for those 4 rows, and is perfect (up to precision) everywhere else?**\n","2485579e":"# Checks","20cff8cc":"Reproduce absolute error claims:","4c6450eb":"...seems to be highly skewed. Check out the large abs_errors:","a3ec5f41":"They're all in the same minute!","8cf3c535":"After dropping the four rows above, target reconstruction is pretty much perfect.\n\n**So, what's happening in this minute...?**"}}