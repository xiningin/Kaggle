{"cell_type":{"016ebcd9":"code","18b6034c":"code","2d85eea2":"code","4542446a":"code","4dfa1fdc":"code","53ebdc4a":"code","1b01628b":"code","8cf249b3":"code","faccf653":"code","5f06f646":"code","106470a1":"code","bc7650cc":"code","042e67a0":"code","1c8def38":"code","9a7cf5c8":"code","4a516035":"code","3be34077":"code","22196a0e":"code","3dbd6778":"code","e2be1a46":"code","2ba40e02":"code","62bdfeaf":"code","2a7b0647":"code","b2c6e361":"code","ccdaecfa":"code","636f1eb6":"code","4c6f3dbb":"code","a06a022d":"code","eae59b6c":"code","03db5b50":"code","47c3f6b7":"code","cfd95cfb":"code","63ee9fdc":"code","25f53036":"code","7427a161":"code","a357b2f3":"code","0064362a":"code","8e783484":"code","b1472677":"code","aaeae89d":"code","48fa17f6":"code","2ebaa5c1":"code","623f91b2":"code","d07e229c":"code","a98f43b5":"code","a28ad78a":"code","43e1472d":"code","1c0572fc":"code","1a2331ac":"code","56b3c56e":"code","ea4c38f2":"code","fff3cd39":"code","a339eb59":"code","36592da3":"code","3a59ac12":"code","3a01d392":"code","a15cc430":"code","b6e323dd":"code","edb7243f":"code","bf3acfd8":"code","5c1e291b":"code","b7ae7198":"code","4b9ce943":"code","0b1c2c94":"code","07caf32e":"code","37cfb789":"code","e29da886":"code","915c01ca":"code","2d209ff4":"code","e1438e49":"code","07e326ae":"code","9c3b07cc":"markdown","503b3b54":"markdown","29aa77c4":"markdown","3ad70b2e":"markdown","1dba7b53":"markdown","2360780e":"markdown","99255b15":"markdown","4ff8ddb3":"markdown","4ee8f38b":"markdown","42ba82fa":"markdown","bbcf9606":"markdown","465ff3bf":"markdown","ccd3a02b":"markdown","80d60ca2":"markdown","b466828c":"markdown","a5ee551e":"markdown","795f1e99":"markdown","deeb5f18":"markdown","ac117df6":"markdown","2d0a3e50":"markdown","0d2db996":"markdown","4bd98aa0":"markdown","85bbae0e":"markdown","8b8c622b":"markdown","1fc1e37d":"markdown","03407a1d":"markdown","760e38f2":"markdown","6bfe249d":"markdown","2cd0d9b9":"markdown","f989dc5a":"markdown","be4332cf":"markdown","43b747e3":"markdown","3f20c7c1":"markdown","308bb5d3":"markdown","4b165a1b":"markdown","a605e8c6":"markdown","936f78de":"markdown","40a02bbd":"markdown","c5a78a2d":"markdown","9d5e66d8":"markdown","cd6bb9d8":"markdown","68db89e2":"markdown","49cc17fe":"markdown","9c6e66f1":"markdown","fc472e43":"markdown","12642490":"markdown","8a15d2a2":"markdown","bcc91d15":"markdown","5052b01f":"markdown","05d52749":"markdown","a2a2fb01":"markdown","0175ed0b":"markdown","8dc26cd4":"markdown","a3062e0f":"markdown","915fcfdf":"markdown","e61d7a77":"markdown","337e7aa2":"markdown","e5ca8f74":"markdown","ac771630":"markdown","87b021bc":"markdown","bd329771":"markdown","30354a62":"markdown","29f00fe6":"markdown","095793ae":"markdown","ca93abab":"markdown","22c1b1ed":"markdown","d3647451":"markdown","839c00cc":"markdown","587cc0d1":"markdown","5ae8283f":"markdown","7649bb85":"markdown","de593dbe":"markdown","58a20ce8":"markdown","28db51ca":"markdown","83f2759d":"markdown"},"source":{"016ebcd9":"# Allow several prints in one cell\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\n\nimport os\n\n# importing the core library\nimport numpy as np\n\nPATH = \"..\/input\/learn-numpy\"\n\n# helper functions to list the datasets available\ndef print_files():\n    import os\n    for dirname, _, filenames in os.walk(PATH):\n        for filename in filenames:\n            print(os.path.join(dirname, filename))\nprint_files()","18b6034c":"# Q. Import numpy as np and print the version number.\n\n# Solution\nprint(\"Solution\")\nimport numpy as np\nprint(np.__version__)","2d85eea2":"# Q. Create a 1D array of numbers from 0 to 9\n\n# Desired Output\n# > array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n# Solution\nprint(\"Solution\")\narr = np.arange(10)\narr","4542446a":"# Q. Create a 3\u00d73 numpy array of all True\u2019s\n\n# Solution\nprint(\"Solution\")\narr = np.repeat(True, 9).reshape(3, -1)\narr","4dfa1fdc":"# Q. Extract all odd numbers from arr\n# Input \narr = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nprint(\"Input\")\narr\n\n# Desired Output\n# > array([1, 3, 5, 7, 9])\n\n# Solution\nprint(\"Solution\")\nodds = arr[arr%2 != 0]\nodds","53ebdc4a":"# Q. Replace all odd numbers in arr with -1\n# Input \narr = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nprint(\"Input\")\narr\n\n# Desired Output\n# >  array([ 0, -1,  2, -1,  4, -1,  6, -1,  8, -1])\n\n# Solution\nprint(\"Solution\")\narr[arr%2 != 0] = -1\narr","1b01628b":"# Q. Replace all odd numbers in arr with -1 without changing arr\n# Input \narr = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nprint(\"Input\")\narr\n\n# Desired Output\n# out #>  array([ 0, -1,  2, -1,  4, -1,  6, -1,  8, -1])\n# arr #>  array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n# Solution\nout = arr.copy()\nout[out%2 != 0] = -1\nprint(\"Solution\")\nprint(\"Modified array\")\nout\nprint(\"Original array\")\narr","8cf249b3":"# Q. Convert a 1D array to a 2D array with 2 rows\n# Input \narr = np.arange(10)\nprint(\"Input\")\narr\n\n# Desired Output\n# > array([[0, 1, 2, 3, 4],\n# >        [5, 6, 7, 8, 9]])\n\n# Solution\nprint(\"Solution: reshaped array\")\narr.reshape(2, -1)","faccf653":"# Q. Stack arrays a and b vertically\n# Input\nprint(\"Input\")\na = np.arange(10).reshape(2,-1)\nb = np.repeat(1, 10).reshape(2,-1)\na\nb\n\n# Desired Output\n#> array([[0, 1, 2, 3, 4],\n#>        [5, 6, 7, 8, 9],\n#>        [1, 1, 1, 1, 1],\n#>        [1, 1, 1, 1, 1]])\n\n# Solution\nprint(\"Solution: verticaly stacked arrays\")\nnp.vstack((a, b))","5f06f646":"# Q. Stack the arrays a and b horizontally.\n# Input\nprint(\"Input\")\na = np.arange(10).reshape(2,-1)\nb = np.repeat(1, 10).reshape(2,-1)\n\n# Desired Output\n# > array([[0, 1, 2, 3, 4, 1, 1, 1, 1, 1],\n# >        [5, 6, 7, 8, 9, 1, 1, 1, 1, 1]])\n\n# Solution\nprint(\"Solution: horizontally stacked arrays\")\nnp.hstack((a, b))","106470a1":"# Q. Create the following pattern without hardcoding. Use only numpy functions and the below input array a.\n\n# Input\nprint(\"Input\")\na = np.array([1,2,3])\na\n\n# Desired Output\n# > array([1, 1, 1, 2, 2, 2, 3, 3, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3])\n\n# Solution\nprint(\"Solution\")\nsolution_array = np.hstack((np.repeat(a, 3), a, a, a)) # using repeat to generate the 111222.. sequence and hstack 3 times the original array\nnp.set_printoptions(threshold=len(solution_array)) # just to help us see all the array-\nsolution_array","bc7650cc":"# Q. Get the common items between a and b\n\n# Input\nprint(\"Input\")\na = np.array([1,2,3,2,3,4,3,4,5,6])\nb = np.array([7,2,10,2,7,4,9,4,9,8])\na\nb\n\n# Desired Output\n# array([2, 4])\n\n# Solution\nprint(\"Solution\")\nnp.unique(a[a == b])","042e67a0":"# Q. From array a remove all items present in array b\n\n# Input\nprint(\"Input\")\na = np.array([1,2,3,4,5])\nb = np.array([5,6,7,8,9])\na\nb\n\n# Desired Output\n# array([1,2,3,4])\n\n# Solution\nprint(\"Solution\")\na[~np.isin(a,b)] # np.isin to find the common elements (returns an array of Booleans). To filter only False, use ~ (CTRL + ALT + 4)","1c8def38":"# Q. Get the positions where elements of a and b match\n\n# Input\nprint(\"Input\")\na = np.array([1,2,3,2,3,4,3,4,5,6])\nb = np.array([7,2,10,2,7,4,9,4,9,8])\na\nb\n\n# Desired Output\n# > (array([1, 3, 5, 7]),)\n\n# Solution\nprint(\"Solution\")\nnp.where(a == b) # Notice: the solution if the INDEX but the values","9a7cf5c8":"# Q. Get all items between 5 and 10 from a.\n\n# Input\nprint(\"Input\")\na = np.array([2, 6, 1, 9, 10, 3, 27])\na\n\n# Desired Output\n# (array([6, 9, 10]),)\n\n# Solution\nprint(\"Solution\")\na[(a > 5) & (a < 10)]","4a516035":"# Q. Convert the function maxx that works on two scalars, to work on two arrays.\n\n# Input\n\ndef maxx(x, y):\n    \"\"\"\n    Get the maximum of two items\n    \"\"\"\n    \n    if x >= y:\n        return x\n    else:\n        return y\nprint(\"Result of the maxx function\")\nmaxx(1, 5)\n\nprint(\"Input\")\na = np.array([5, 7, 9, 8, 6, 4, 5])\nb = np.array([6, 3, 4, 8, 9, 7, 1])\na\nb\n\n# Desired Output\n# pair_max(a, b)\n#> array([ 6.,  7.,  9.,  8.,  9.,  7.,  5.])\n\n# Solution\nprint(\"Solution\")\n\ndef pair_max(a, b):\n    return np.array([max(x, y) for x, y in zip(a, b)]) # using a list comprehension to find the max between 2 arrays elementwise (using zip) and convert to numpy array\n\npair_max(a, b)","3be34077":"# Q. Swap columns 1 and 2 in the array arr.\n\n# Input\nprint(\"Input\")\narr = np.arange(9).reshape(3,3)\narr\n\n# Solution\nprint(\"Solution\")\ntemp = arr[:,0].copy() # temporary variable\narr[:,0], arr[:,1] = arr[:,1], temp\narr","22196a0e":"# Q. Swap rows 1 and 2 in the array arr:\n\n# Input\nprint(\"Input\")\narr = np.arange(9).reshape(3,3)\narr\n\n# Solution\nprint(\"Solution\")\ntemp = arr[0,:].copy() # temporary variable\narr[0,:], arr[1,:] = arr[1,:], temp\narr\n","3dbd6778":"# Q. Reverse the rows of a 2D array arr.\n\n# Input\nprint(\"Input\")\narr = np.arange(9).reshape(3,3)\narr\n\n# Solution\nprint(\"Solution\")\narr[::-1]\narr[::-1, :] # exactly the same","e2be1a46":"# Q. Reverse the columns of a 2D array arr.\n\n# Input\nprint(\"Input\")\narr = np.arange(9).reshape(3,3)\narr\n\n# Solution\nprint(\"Solution\")\narr[:, ::-1]","2ba40e02":"# Q. Create a 2D array of shape 5x3 to contain random decimal numbers between 5 and 10.\n\n# Solution\nprint(\"Solution\")\n# randint first argument: lower bound, second argument: higher bound (if you put 10, it will max return 9, so we add 1), third argument: number of samples. Then we reshape and done.\nnp.random.randint(5, 11, 15).reshape(5, 3) ","62bdfeaf":"# Q. Print or show only 3 decimal places of the numpy array rand_arr.\n\n# Setting print options to default\nnp.set_printoptions(edgeitems=3,infstr='inf', linewidth=75, nanstr='nan', precision=8, suppress=False, threshold=1000, formatter=None)\n\n# Input\nprint(\"Input\")\nrand_arr = np.random.random((5,3))\nrand_arr\n\n# Solution\nprint(\"Solution\")\nnp.set_printoptions(precision=3)\nrand_arr","2a7b0647":"# Q. Pretty print rand_arr by suppressing the scientific notation (like 1e10)\n\n# Setting print options to default\nnp.set_printoptions(edgeitems=3,infstr='inf', linewidth=75, nanstr='nan', precision=8, suppress=False, threshold=1000, formatter=None)\n\n# Input\nprint(\"Input\")\nnp.random.seed(100)\nrand_arr = np.random.random([3,3])\/1e3\nrand_arr\n\n# Desired Output\n# > array([[ 0.000543,  0.000278,  0.000425],\n# >        [ 0.000845,  0.000005,  0.000122],\n# >        [ 0.000671,  0.000826,  0.000137]])\n\n# Solution\nprint(\"Solution\")\nnp.set_printoptions(suppress=True)\nrand_arr","b2c6e361":"# Q. Limit the number of items printed in python numpy array a to a maximum of 6 elements.\n\n# Setting print options to default\nnp.set_printoptions(edgeitems=3,infstr='inf', linewidth=75, nanstr='nan', precision=8, suppress=False, threshold=1000, formatter=None)\n\n# Input\nprint(\"Input\")\na = np.arange(15)\na\n\n# Desired Output\n# > array([ 0,  1,  2, ..., 12, 13, 14])\n\n# Solution\nprint(\"Solution\")\nnp.set_printoptions(threshold=6)\na","ccdaecfa":"# Q. Print the full numpy array a without truncating.\n\n# Input\nprint(\"Input\")\nnp.set_printoptions(threshold=6)\na = np.arange(15)\na\n\n# Desired Output\n# > array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])\n\n# Solution\nprint(\"Solution\")\nnp.set_printoptions(threshold=len(a))\na","636f1eb6":"# Q. Import the iris dataset keeping the text intact.\n\n# Input\n# Use the iris dataset provided\nprint_files()\n\n# All the available options of the numpy genfromtxt function\n# numpy.genfromtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, skip_header=0, \n#                    skip_footer=0, converters=None, missing_values=None, filling_values=None, \n#                    usecols=None, names=None, excludelist=None, deletechars=\" !#$%&'()*+, -.\/:;<=>?@[\\]^{|}~\", \n#                    replace_space='_', autostrip=False, case_sensitive=True, defaultfmt='f%i', \n#                    unpack=None, usemask=False, loose=True, invalid_raise=True, max_rows=None, encoding='bytes')[source]\u00b6\n\n# Solution\nprint(\"Solution\")\niris = np.genfromtxt(os.path.join(PATH, \"Iris.csv\"), delimiter=',', skip_header=1, usecols = [0, 1, 2, 3, 4, 5], dtype = None)\niris","4c6f3dbb":"# Q. Extract the text column species from the 1D iris imported in previous question.\n\n# Input\n# Use the iris dataset provided\nprint_files()\n\n# Use this if you are working on your local machine\n# url = 'https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/iris\/iris.data'\n# iris_1d = np.genfromtxt(url, delimiter=',', dtype=None)\n\n# Solution\nprint(\"Solution\")\niris = np.genfromtxt(os.path.join(PATH, \"Iris.csv\"), delimiter=',', skip_header=1, usecols = [5], dtype='str')\niris\n\n# Solution from the website\nprint(\"Solution from website\")\niris_1d = np.genfromtxt(os.path.join(PATH, \"Iris.csv\"), delimiter=',', dtype=None)\nspecies = np.array([row[5] for row in iris_1d])\nspecies[:5]","a06a022d":"# Q. Convert the 1D iris to 2D array iris_2d by omitting the species text field.\n\n# Input\n# Use the iris dataset provided\nprint_files()\n\n# Use this if you are working on your local machine\n# url = 'https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/iris\/iris.data'\n# iris_1d = np.genfromtxt(url, delimiter=',', dtype=None)\n\n# Solution\nprint(\"Solution\")\niris = np.genfromtxt(os.path.join(PATH, \"Iris.csv\"), delimiter=',', skip_header=1, usecols = [0, 1, 2, 3, 4], dtype = None)\niris[:4]\n\n# Another solution from the website\nprint(\"Another solution from website\")\niris_1d = np.genfromtxt(os.path.join(PATH, \"Iris.csv\"), delimiter=',', dtype=None)\niris_2d = np.array([row.tolist()[:4] for row in iris_1d])\niris_2d[:4]","eae59b6c":"# Q. Find the mean, median, standard deviation of iris's sepallength (1st column)\n\n# Input\n# Use the iris dataset provided\nprint_files()\n\n# Use this if you are working on your local machine\n# url = 'https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/iris\/iris.data'\n# iris_1d = np.genfromtxt(url, delimiter=',', dtype=None)\n\n# Solution\nprint(\"Solution\")\niris = np.genfromtxt(os.path.join(PATH, \"Iris.csv\"), delimiter=',', skip_header=1, usecols = [1])\niris\n\nimport pandas as pd\npd.Series(iris).describe()\n\nfrom scipy import stats \nstats.describe(iris) \n\n# Solution from the website\nprint(\"Another solution from the website\")\nmu, med, sd = np.mean(iris), np.median(iris), np.std(iris)\nprint(mu, med, sd)","03db5b50":"# Q. Create a normalized form of iris's sepallength whose values range exactly between 0 and 1 so that the minimum has value 0 and maximum has value 1.\n\n# Input\n# Use the iris dataset provided\nprint_files()\n\n# Use this if you are working on your local machine\n# url = 'https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/iris\/iris.data'\n# iris_1d = np.genfromtxt(url, delimiter=',', dtype=None)\n\n# Solution\nprint(\"Solution\")\niris = np.genfromtxt(os.path.join(PATH, \"Iris.csv\"), delimiter=',', skip_header=1, usecols = [1])\n(iris - np.min(iris))\/(np.max(iris) - np.min(iris))\n\n# Another solution from the website\nprint(\"Another solution from the website\")\niris.ptp() # peak to peak. Basically the same as (np.max(iris) - np.min(iris))\n(iris - np.min(iris))\/iris.ptp()","47c3f6b7":"# Q. Compute the softmax score of sepallength.\n\n# Input\n# Use the iris dataset provided\nprint_files()\n\n# Use this if you are working on your local machine\n# url = 'https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/iris\/iris.data'\n# iris_1d = np.genfromtxt(url, delimiter=',', dtype=None)\n\n# Solution\n# The Softmax regression is a form of logistic regression that normalizes an input value into a vector of values that follows a probability distribution whose total sums up to 1. \nprint(\"Solution\")\niris = np.genfromtxt(os.path.join(PATH, \"Iris.csv\"), delimiter=',', skip_header=1, usecols = [1])\nsoftmax = np.exp(iris)\/sum(np.exp(iris))\nsoftmax.sum() # it must sum 1\n\n# We can also apply this to more than 1 column.\niris = np.genfromtxt(os.path.join(PATH, \"Iris.csv\"), delimiter=',', skip_header=1, usecols = [1, 2, 3, 4])\nsoftmax = np.exp(iris)\/sum(np.exp(iris))\nsoftmax.sum() # We have 4 since we have 4 columns, each sums 1\nsoftmax\n\n# Solution from the website\nprint(\"Solution from the website\")\n\ndef softmax(x):\n    \"\"\"Compute softmax values for each sets of scores in x.\n    https:\/\/stackoverflow.com\/questions\/34968722\/how-to-implement-the-softmax-function-in-python\"\"\"\n    e_x = np.exp(x - np.max(x))\n    return e_x \/ e_x.sum(axis=0)\n\nprint(softmax(iris).sum())\nprint(softmax(iris))\n","cfd95cfb":"# Q. Find the 5th and 95th percentile of iris's sepallength\n\n# Input\n# Use the iris dataset provided\nprint_files()\n\n# Use this if you are working on your local machine\n# url = 'https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/iris\/iris.data'\n# iris_1d = np.genfromtxt(url, delimiter=',', dtype=None)\n\n# Solution\nprint(\"Solution\")\niris = np.genfromtxt(os.path.join(PATH, \"Iris.csv\"), delimiter=',', skip_header=1, usecols = [1])\niris\nnp.percentile(iris, q = [5, 95])","63ee9fdc":"# Q. Insert np.nan values at 20 random positions in iris_2d dataset\n\n# Input\n# Use the iris dataset provided\nprint_files()\n\n# Use this if you are working on your local machine\n# url = 'https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/iris\/iris.data'\n# iris_1d = np.genfromtxt(url, delimiter=',', dtype=None)\n\n# Solution\nprint(\"Solution\")\niris = np.genfromtxt(os.path.join(PATH, \"Iris.csv\"), delimiter=',', skip_header=1, usecols = [1, 2, 3, 4])\nindex = np.random.randint(0, 150, 20)\niris[index] = np.nan\niris\n\n# Solution from the website\nprint(\"Another solution from the website\")\niris = np.genfromtxt(os.path.join(PATH, \"Iris.csv\"), delimiter=',', skip_header=1, usecols = [1, 2, 3, 4])\ni, j = np.where(iris_2d) # get the index of all 600 elements of the array\nnan_index = [np.random.choice((i), 20), np.random.choice((j), 20)] # get some random values for each row and column\niris[nan_index] = np.nan\niris\n\n# Solution 3 from the website\nprint(\"Solution 3 from the website\")\niris = np.genfromtxt(os.path.join(PATH, \"Iris.csv\"), delimiter=',', skip_header=1, usecols = [1, 2, 3, 4])\niris[np.random.randint(149, size=20), np.random.randint(4, size=20)] = np.nan\niris","25f53036":"#### Q. Find the number and position of missing values in iris_2d's sepallength (1st column)\n\n# Input\n# Use the iris dataset provided\nprint_files()\n\n# Use this if you are working on your local machine\n# url = 'https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/iris\/iris.data'\n# iris_2d = np.genfromtxt(url, delimiter=',', dtype='float')\n# iris_2d[np.random.randint(150, size=20), np.random.randint(4, size=20)] = np.nan\n\n# Solution\nprint(\"Solution\")\niris = np.genfromtxt(os.path.join(PATH, \"Iris.csv\"), delimiter=',', skip_header=1, usecols = [1, 2, 3, 4])\niris[:,0][np.random.randint(0 , len(iris), 50)] = np.nan # set some random values in the first column\niris\nnan_index_1 = np.where(np.isnan(iris)) # to check for nan, the official documentation always recommends using np.isnan\nnan_index_1\niris[nan_index_1]\nprint(\"Number of missing values: \\n\", np.isnan(iris[:, 0]).sum())","7427a161":"# Q. Filter the rows of iris_2d that has petallength (3rd column) > 1.5 and sepallength (1st column) < 5.0\n\n# Input\n# Use the iris dataset provided\nprint_files()\n\n# Use this if you are working on your local machine\n# url = 'https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/iris\/iris.data'\n# iris_2d = np.genfromtxt(url, delimiter=',', dtype='float', usecols=[0,1,2,3])\n\n# Solution\nprint(\"Solution\")\niris = np.genfromtxt(os.path.join(PATH, \"Iris.csv\"), delimiter=',', skip_header=1, usecols = [1, 2, 3, 4])\nreduce_array = iris[(iris[:,3] > 1.5) & (iris[:,1] < 5)]\niris.shape\nreduce_array.shape\nreduce_array\n\n# Another solution\nprint(\"Using criteria saved as objects\")\ncond1 = iris[:,3] > 1.5\ncond2 = iris[:,1] < 5\nreduce_array2 = iris[cond1 & cond2]\nreduce_array2.shape\nreduce_array2\n\n# Another solution using reduce\nprint(\"Using reduce\")\nfrom functools import reduce\ncriteria = reduce(lambda x, y: x & y, (cond1, cond2))\niris[criteria].shape\niris[criteria]","a357b2f3":"# Q. Select the rows of iris_2d that does not have any nan value.\n\n# Input\n# Use the titanic dataset provided\nprint_files()\n\n# set original print statements\nnp.set_printoptions(edgeitems=3,infstr='inf', linewidth=75, nanstr='nan', precision=8, suppress=False, threshold=1000, formatter=None)\n\n# Solution\nprint(\"Solution\")\n\n# Importing the titanic df\ndef import_titanic():\n    with open(os.path.join(PATH, \"train.csv\"), \"r\") as f:\n        data = f.read()\n        l = []\n        for row in data.split(\"\\n\")[1:-1]:\n            r_ = row.split(\",\")\n            l_ = []\n            for c in r_:\n                if c == \"\": \n                    l_.append(np.nan)\n                else:\n                    try:\n                        l_.append(float(c))\n                    except:\n                        l_.append(c)\n            l.append(l_)\n    return l\n\nl = import_titanic()\n# only numeric columns\na = np.array(l, dtype = object)[:,[1, 2, 6, 7, 8, 10]]\n# convert to float\narr = np.array(a, dtype = float)\n# select rows with nan values\nnan_r = np.array([~np.any(np.isnan(row)) for row in arr])\n# filter the array\narr_no_nan = arr[nan_r]\narr_no_nan\n# check: the sum of nans must be zero\nnp.isnan(arr_no_nan).sum()\n\n# Solution 2\nprint(\"Solution from the website\")\nl = import_titanic()\na = np.array(l, dtype = object)[:,[1, 2, 6, 7, 8, 10]]\narr = np.array(a, dtype = float)\narr[np.sum(np.isnan(arr), axis = 1) == 0] # much more elegant solution\nnp.isnan(arr[np.sum(np.isnan(arr), axis = 1) == 0]).sum()","0064362a":"# Q. Find the correlation between SepalLength(1st column) and PetalLength(3rd column) in iris_2d\n\n# Input\n# Use the iris dataset provided\nprint_files()\n\n# Use this if you are working on your local machine\n# url = 'https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/iris\/iris.data'\n# iris_2d = np.genfromtxt(url, delimiter=',', dtype='float', usecols=[0,1,2,3])\n\n# Solution\nprint(\"Solution\")\niris = np.genfromtxt(os.path.join(PATH, \"Iris.csv\"), delimiter=',', skip_header=1, usecols = [1, 2, 3, 4])\nnp.correlate(iris[:,1], iris[:,3]) # This function computes the correlation as generally defined in signal processing texts: c_{av}[k] = sum_n a[n+k] * conj(v[n])\nnp.corrcoef(iris[:,1], iris[:,3]) # Pearson correlation\n\n# Solution from the website\nprint(\"Solution from the website using scipy\")\nfrom scipy.stats.stats import pearsonr  \ncorr, p_value = pearsonr(iris[:, 1], iris[:, 3])\nprint(corr)\nprint(p_value)","8e783484":"# Q. Find out if iris_2d has any missing values.\n\n# Input\n# Use the iris dataset provided\nprint_files()\n\n# Use this if you are working on your local machine\n# url = 'https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/iris\/iris.data'\n# iris_2d = np.genfromtxt(url, delimiter=',', dtype='float', usecols=[0,1,2,3])\n\n# Solution\nprint(\"Solution\")\niris = np.genfromtxt(os.path.join(PATH, \"Iris.csv\"), delimiter=\",\",  dtype='float', usecols=[1,2,3,4], skip_header=1)\niris[np.random.randint(150, size=20), np.random.randint(4, size=20)] = np.nan # inser some null values\n\nprint(\"It's {} that we have nan values. The total amout of nan values is {}\".format(np.any(np.isnan(iris)), np.isnan(iris).sum())) # first returns True second the total of nan values\n","b1472677":"# Q. Replace all ccurrences of nan with 0 in numpy array\n\n# Input\n# Use the iris dataset provided\nprint_files()\n\n# Use this if you are working on your local machine\n# url = 'https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/iris\/iris.data'\n# iris_2d = np.genfromtxt(url, delimiter=',', dtype='float', usecols=[0,1,2,3])\n# iris_2d[np.random.randint(150, size=20), np.random.randint(4, size=20)] = np.nan\n\n# Solution\nprint(\"Solution\")\niris = np.genfromtxt(os.path.join(PATH, \"Iris.csv\"), delimiter=\",\",  dtype='float', usecols=[1,2,3,4], skip_header=1)\niris[np.random.randint(150, size=20), np.random.randint(4, size=20)] = np.nan # inser some null values\n\nprint(\"Before applying nan_to_num.\")\nnp.isnan(iris).sum()\na = np.nan_to_num(iris, 0)\nprint(\"After applying nan_to_num.\")\nnp.isnan(a).sum()\n\n# Solution from the website\nprint(\"Solution from the website\")\niris = np.genfromtxt(os.path.join(PATH, \"Iris.csv\"), delimiter=\",\",  dtype='float', usecols=[1,2,3,4], skip_header=1)\niris[np.random.randint(150, size=20), np.random.randint(4, size=20)] = np.nan # inser some null values\nnp.isnan(iris).sum()\niris[np.isnan(iris)] = 0\nnp.isnan(a).sum()","aaeae89d":"# Q. Find the unique values and the count of unique values in iris's species\n\n# Input\n# Use the iris dataset provided\nprint_files()\n\n# Use this if you are working on your local machine\n# url = 'https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/iris\/iris.data'\n# iris_2d = np.genfromtxt(url, delimiter=',', dtype='float', usecols=[0,1,2,3])\n# names = ('sepallength', 'sepalwidth', 'petallength', 'petalwidth', 'species')\n\n# Solution\nprint(\"Solution using list comprehension\")\niris = np.genfromtxt(os.path.join(PATH, \"Iris.csv\"), delimiter = \",\", usecols=[5], dtype=object, skip_header=1)\nl = [(v, np.count_nonzero(iris[iris == v])) for v in np.unique(iris)]\nl\n\n# Solution from the website\nprint(\"Solution from the website\")\niris = np.genfromtxt(os.path.join(PATH, \"Iris.csv\"), delimiter = \",\", usecols=[5], dtype=object, skip_header=1)\nnp.unique([v for v in iris], return_counts=True) # much more elegant","48fa17f6":"# Q. Bin the petal length (3rd) column of iris_2d to form a text array, such that if petal length is:\n# Less than 3 --> 'small'\n# 3-5 --> 'medium'\n# '>=5 --> 'large'\n\n# Input\n# Use the iris dataset provided\nprint_files()\n\n# Use this if you are working on your local machine\n# url = 'https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/iris\/iris.data'\n# iris_2d = np.genfromtxt(url, delimiter=',', dtype='float', usecols=[0,1,2,3])\n# names = ('sepallength', 'sepalwidth', 'petallength', 'petalwidth', 'species')\n\n# Solution\nprint(\"Solution\")\niris = np.genfromtxt(os.path.join(PATH, \"Iris.csv\"), delimiter = \",\", usecols=[3], dtype=float, skip_header=1)\nbin_ = np.digitize(iris.astype('float'), [0, 3, 5, 10])\nbin_\nlabel_map = {1: 'small', 2: 'medium', 3: 'large', 4: np.nan}\ncat_ = [label_map[x] for x in bin_]\ncat_[:5]","2ebaa5c1":"# Q. Create a new column for volume in iris_2d, where volume is (pi x petallength x sepal_length^2)\/3\n\n# Input\n# Use the iris dataset provided\nprint_files()\n\n# Use this if you are working on your local machine\n# url = 'https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/iris\/iris.data'\n# iris_2d = np.genfromtxt(url, delimiter=',', dtype='float', usecols=[0,1,2,3])\n# names = ('sepallength', 'sepalwidth', 'petallength', 'petalwidth', 'species')\n\n# Solution\nprint(\"Solution: use numpy.c_[] for columns\")\niris = np.genfromtxt(os.path.join(PATH, \"Iris.csv\"), delimiter = \",\", usecols=[2, 3], dtype=float, skip_header=1)\niris.shape\niris = np.c_[iris, (np.array(iris[:,0] * 3.14 * (iris[:,1])**2))\/3]\niris.shape\niris[:5]\n\n# Solution from the website\nprint(\"Solution from website\")\niris = np.genfromtxt(os.path.join(PATH, \"Iris.csv\"), delimiter = \",\", usecols=[2, 3], dtype=float, skip_header=1)\ns = iris[:, 1]\np = iris[:, 0]\nvolume = (np.pi * p * (s**2))\/3\n# Introduce new dimension to match iris_2d's\nvolume = volume[:, np.newaxis]\n# Add the new column\nout = np.hstack([iris, volume])\n# View\nout[:4]","623f91b2":"# Q. Randomly sample iris's species such that setose is twice the number of versicolor and virginica\n\n# Input\n# Use the iris dataset provided\nprint_files()\n\n# Use this if you are working on your local machine\n# url = 'https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/iris\/iris.data'\n# iris = np.genfromtxt(url, delimiter=',', dtype='object')\n\n# Solution from the website\nprint(\"Solution from the website\")\niris = np.genfromtxt(os.path.join(PATH, \"Iris.csv\"), delimiter = \",\", dtype=object, skip_header=1)\n# Get the species column\nspecies = iris[:, 5]\n\n# Approach 1: Generate Probablistically\nprint(\"Solution 1: generate probablistically\")\nnp.random.seed(100)\na = np.array(['Iris-setosa', 'Iris-versicolor', 'Iris-virginica'])\nspecies_out = np.random.choice(a, 150, p=[0.5, 0.25, 0.25])\nspecies_out\n\n# Approach 2: Probablistic Sampling (preferred)\nprint(\"Solution 2: probablistic sampling\")\nnp.random.seed(100)\nprobs = np.r_[np.linspace(0, 0.500, num=50), np.linspace(0.501, .750, num=50), np.linspace(.751, 1.0, num=50)]\nindex = np.searchsorted(probs, np.random.random(150))\nspecies_out = species[index]\nprint(np.unique(species_out, return_counts=True))","d07e229c":"# Q. What is the value of second longest petallength of species setosa\n\n# Input\n# Use the iris dataset provided\nprint_files()\n\n# Use this if you are working on your local machine\n# url = 'https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/iris\/iris.data'\n# iris_2d = np.genfromtxt(url, delimiter=',', dtype='float', usecols=[0,1,2,3])\n# names = ('sepallength', 'sepalwidth', 'petallength', 'petalwidth', 'species')\n\n# Solution\nprint(\"Solution\")\nheaders = np.genfromtxt(os.path.join(PATH, \"Iris.csv\"), delimiter = \",\", dtype=object, skip_header=0)\nheaders[0]\niris = np.genfromtxt(os.path.join(PATH, \"Iris.csv\"), delimiter = \",\", dtype=object, skip_header=1)\n# iris\nsorted_iris = iris[iris[:,5] == b'Iris-setosa'][:,3]\nsorted_iris = sorted_iris.astype(float)\nsorted_iris = np.unique(sorted_iris)\nsorted_iris.sort()\nsorted_iris[::-1][1]\n\n# Solution from the website\nprint(\"Solution from the website\")\niris = np.genfromtxt(os.path.join(PATH, \"Iris.csv\"), delimiter = \",\", dtype=object, skip_header=1)\npetal_len_setosa = iris[iris[:, 5] == b'Iris-setosa', [3]].astype('float')\nnp.unique(np.sort(petal_len_setosa))[-2]","a98f43b5":"# Q. Sort the iris dataset based on sepallength column.\n\n# Input\n# Use the iris dataset provided\nprint_files()\n\n# Use this if you are working on your local machine\n# url = 'https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/iris\/iris.data'\n# iris = np.genfromtxt(url, delimiter=',', dtype='object')\n# names = ('sepallength', 'sepalwidth', 'petallength', 'petalwidth', 'species')\n\n# Solution\nprint(\"Solution\")\nheaders = np.genfromtxt(os.path.join(PATH, \"Iris.csv\"), delimiter = \",\", dtype=object, skip_header=0)\nprint(list(headers[0]))\niris = np.genfromtxt(os.path.join(PATH, \"Iris.csv\"), delimiter = \",\", usecols=[0,1,2,3,4], skip_header=1)\niris[iris[:,1].argsort()][:5]\n\n# Solution from the website\nprint(\"Solution from the website\")\nprint(iris[iris[:,1].argsort()][:5]) # same solution","a28ad78a":"# Q. Find the most frequent value of petal length (3rd column) in iris dataset.\n\n# Input\n# Use the iris dataset provided\nprint_files()\n\n# Use this if you are working on your local machine\n# url = 'https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/iris\/iris.data'\n# iris = np.genfromtxt(url, delimiter=',', dtype='object')\n# names = ('sepallength', 'sepalwidth', 'petallength', 'petalwidth', 'species')\n\n# Solution\nnp.set_printoptions(edgeitems=3,infstr='inf', linewidth=75, nanstr='nan', precision=3, suppress=False, threshold=1000, formatter=None)\nprint(\"Solution\")\nheaders = np.genfromtxt(os.path.join(PATH, \"Iris.csv\"), delimiter = \",\", dtype=object, skip_header=0)\nprint(list(headers[0]))\niris = np.genfromtxt(os.path.join(PATH, \"Iris.csv\"), delimiter = \",\", usecols=[4], skip_header=1)\ncounts = np.unique([v for v in iris], return_counts=True) # we have a tuple of arrays\nsort_list = sorted(list(zip(counts[0], counts[1])), key = lambda x: x[1]) # extract the values and counts, zip them and sort by the counts\nsort_list[::-1][0] #reverse the list and get the first (most frequent) the most frequent value of petal lenght is 0.2, it has ocurred 28 times\n\n# Solution from the website\nprint(\"Solution from the website\")\nvals, counts = np.unique(iris, return_counts=True)\nprint(vals[np.argmax(counts)]) # much more elegant solution","43e1472d":"# Q. Find the position of the first occurrence of a value greater than 1.0 in petalwidth 4th column of iris dataset.\n\n# Input\n# Use the iris dataset provided\nprint(\"Input\")\nprint_files()\n\n# Use this if you are working on your local machine\n# url = 'https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/iris\/iris.data'\n# iris = np.genfromtxt(url, delimiter=',', dtype='object')\n\n# Solution\nprint(\"Solution\")\niris = np.genfromtxt(os.path.join(PATH, \"Iris.csv\"), delimiter = \",\", usecols=[4], skip_header=1)\ni = np.where(iris > 1) # returns the index where this is tru\ni\niris[i[0][0]] # first ocurrence is on index 50\niris[:i[0][0] + 1]\n\n# Solution from the website\nprint(\"Solution from website\")\nnp.argwhere(iris.astype(float) > 1.0)[0] # same result but much faster and elegant","1c0572fc":"# Q. From the array a, replace all values greater than 30 to 30 and less than 10 to 10.\n# Input\nprint(\"Input\")\nnp.random.seed(100)\na = np.random.uniform(1,50, 20)\na\n\n# Solution\nprint(\"Solution\")\nc1 = np.where(a > 30)\nc2 = np.where(a < 10)\na[c1] = 30\na[c2] = 10\na\n\n# Solution from the website\nprint(\"Solution from the website\")\n\n# Solution 1: Using np.clip\nnp.random.seed(100)\na = np.random.uniform(1,50, 20)\nnp.clip(a, a_min=10, a_max=30) # probabily the most elegant solution\n\n# Solution 3: Using np.where\nnp.random.seed(100)\na = np.random.uniform(1,50, 20)\nprint(np.where(a < 10, 10, np.where(a > 30, 30, a)))","1a2331ac":"# Q. Get the positions of top 5 maximum values in a given array a.\n\n# Input\nprint(\"Input\")\nnp.random.seed(100)\na = np.random.uniform(1,50, 20)\na\n\n# Solution\nprint(\"Solution\")\na.argsort() # sort the numpy array with argsort(), returns the index starting from min to max value. Index 15 has the max value\na.argsort()[-5:] # select top 5 index\na.argsort()[-5:][::-1] # a.argsort()[::-1][:5] are equivalent, reverse the top 5 indee\na[a.argsort()[-5:][::-1]] # get the values\n\n# Solution from the website\nprint(\"Solution from the webpage\")\n# Solution:\nprint(a.argsort())\n#> [18 7 3 10 15]\n\n# Solution 2:\nnp.argpartition(-a, 5)[:5]\n#> [15 10  3  7 18]\n\n# Below methods will get you the values.\n# Method 1:\na[a.argsort()][-5:]\n\n# Method 2:\nnp.sort(a)[-5:]\n\n# Method 3:\nnp.partition(a, kth=-5)[-5:]\n\n# Method 4:\na[np.argpartition(-a, 5)][:5]","56b3c56e":"# Q. Compute the counts of unique values row-wise.\n\n# Input\nprint(\"Input\")\nnp.random.seed(100)\narr = np.random.randint(1,11,size=(6, 10))\narr\n\n# Desired Output\n# > [[1, 0, 2, 1, 1, 1, 0, 2, 2, 0],\n# >  [2, 1, 3, 0, 1, 0, 1, 0, 1, 1],\n# >  [0, 3, 0, 2, 3, 1, 0, 1, 0, 0],\n# >  [1, 0, 2, 1, 0, 1, 0, 2, 1, 2],\n# >  [2, 2, 2, 0, 0, 1, 1, 1, 1, 0],\n# >  [1, 1, 1, 1, 1, 2, 0, 0, 2, 1]]\n\n# Output contains 10 columns representing numbers from 1 to 10. The values are the counts of the numbers in the respective rows.\n# For example, Cell(0,2) has the value 2, which means, the number 3 occurs exactly 2 times in the 1st row.\n\n# Solution\nprint(\"Solution\")\nfrom collections import Counter\nrows = arr.shape[0]\nlc = []\nfor row in range(rows): # iterate over all rows in the numpy array\n    counter = Counter() # on every row, create a new Counter\n    counter.update(arr[row]) # feed the Counter with the row\n    lc.append(dict(counter)) # append a dict in a list: each row will have it's unique dict\/counter\n\nnp.array([np.vectorize(lc[row].get)(arr[row]) for row in range(rows)]) # trasnfrom the arr into a vector and map to the values in the dictionary (lc[row].get gets every dictionary) for each row in rows\n\n# more interesting aproaches here:\n# https:\/\/stackoverflow.com\/questions\/16992713\/translate-every-element-in-numpy-array-according-to-key\n\n# Solution from the website\nprint(\"Solution from the website (incorrect)\")\n\ndef counts_of_all_values_rowwise(arr2d):\n    # Unique values and its counts row wise\n    num_counts_array = [np.unique(row, return_counts=True) for row in arr2d]\n    # Counts of all values row wise\n    return([[int(b[a==i]) if i in a else 0 for i in np.unique(arr2d)] for a, b in num_counts_array])\n\n# it has a bug\nprint(\"The solution from the website has a bug.\")\ncounts_of_all_values_rowwise(arr)\n\ndef counts_of_all_values_rowwise_corrected(arr2d):\n    num_counts_array = [np.unique(row, return_counts=True) for row in arr2d] # same as in the previous solution\n    # we have a numpy array of tuples that contain for each row the elements and their counts\n    ll = [] # create an empty list of lists, we will later convert in into numpy array\n    for i in range(arr2d.shape[0]): # for each row in arr rows\n        l = [] # create a new list where we will be adding the mappings\n        rmapper = num_counts_array[i] # rmapper = row mapper. In num_counts_array for have the same amount of tuples (elemnt - count) as rows in the arr2d\n        for v in arr2d[i]: # for each value in a row\n            l.append(rmapper[1][np.where(rmapper[0] == v)][0]) # append to the list the count (rmapper[1]), we are using np.where to find the index of the element\n        ll.append(l) # append the list to the list of lists\n    return np.array(ll) # convert the lst of list into numpy 2d array\n\nprint(\"The solution from the website corrected.\")\ncounts_of_all_values_rowwise_corrected(arr)","ea4c38f2":"# Q. Convert array_of_arrays into a flat linear 1d array.\n\n# Input\nprint(\"Input\")\narr = np.arange(9).reshape(3,3)\narr\n\n# Solution\nprint(\"Solution\")\narr.flatten()\n\n# Solution from the website\narr1 = np.arange(3)\narr2 = np.arange(3,7)\narr3 = np.arange(7,10)\n\narray_of_arrays = np.array([arr1, arr2, arr3])\nprint('array_of_arrays: ', array_of_arrays)\n\n# Solution 1\narr_2d = np.array([a for arr in array_of_arrays for a in arr]) # interesting loop comprehension\narr_2d\n\nprint(\"------------------\")\narr_2d = []\nfor arr in array_of_arrays:\n    for a in arr:\n        arr_2d.append(a)\nnp.array(arr_2d)\n\n\n# Solution 2:\narr_2d = np.concatenate(array_of_arrays)\nprint(arr_2d)","fff3cd39":"# Q. Compute the one-hot encodings (dummy binary variables for each unique value in the array)\n\n# Input\nprint(\"Input\")\nnp.random.seed(101) \narr = np.random.randint(1,4, size=6)\narr\n\n# Desired Output\n# > array([[ 0.,  1.,  0.],\n# >        [ 0.,  0.,  1.],\n# >        [ 0.,  1.,  0.],\n# >        [ 0.,  1.,  0.],\n# >        [ 0.,  1.,  0.],\n# >        [ 1.,  0.,  0.]])\n\n# Solution\nprint(\"Solution using pandas\")\nimport pandas as pd\ndf = pd.DataFrame(arr)\ndummies = pd.get_dummies(df[0])\nnp.array(dummies)\n\n# Solution using pure python\nprint(\"Solution using pure python\")\nll = []\nfor i in list(set(arr)):\n    l = []\n    for j in arr:\n        l.append(1) if i == j else l.append(0)\n    ll.append(l)\nnp.array(ll).T\n\n# Solution using pure python with list comprehension\nprint(\"Solution using pure python with list comprehension (list of lists)\")\nnp.array([[1 if i == j else 0 for i in list(set(arr))] for j in arr])\n\n# Solution using numpy\n# Solution from the website\nprint(\"Solution from the website\")\nprint(\"Solution 1 using numpy\")\n\nuniques = np.unique(arr)\nout = np.zeros((arr.shape[0], uniques.shape[0]))\nfor i, k in enumerate(arr):\n    print(i, k)\n    out[i, k-1] = 1 # very cool solution\nout\n\nprint(\"Solution 2 using numpy\")\nprint(\"arr[:, None] evaluates all the numpy array to the unique elements and returns True or False\")\n(arr[:,None] == np.unique(arr))\nprint(\"we add .view(np.int8) to convert Boolean to 1 or zero\")\n(arr[:,None] == np.unique(arr)).view(np.int8)\n","a339eb59":"# Q. Create row numbers grouped by a categorical variable. Use the following sample from iris species as input.\n\n# Input\n# Use the iris dataset provided\nprint(\"Input\")\nprint_files()\n\n# Use this if you are working on your local machine\n# species = np.genfromtxt(url, delimiter=',', dtype='str', usecols=4)\n# species_small = np.sort(np.random.choice(species, size=20))\n# species_small\n# > array(['Iris-setosa', 'Iris-setosa', 'Iris-setosa', 'Iris-setosa',\n# >        'Iris-setosa', 'Iris-setosa', 'Iris-versicolor', 'Iris-versicolor',\n# >        'Iris-versicolor', 'Iris-versicolor', 'Iris-versicolor',\n# >        'Iris-versicolor', 'Iris-virginica', 'Iris-virginica',\n# >        'Iris-virginica', 'Iris-virginica', 'Iris-virginica',\n# >        'Iris-virginica', 'Iris-virginica', 'Iris-virginica'],\n# >       dtype='<U15')\n\n\n# Desired Output\n# > [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 6, 7]\n\n# Solution\nprint(\"Solution\")\nspecies = np.genfromtxt(os.path.join(PATH, \"Iris.csv\"), delimiter=',', dtype='str', usecols=5, skip_header=1)\nspecies_small = np.sort(np.random.choice(species, size=20))\nspecies_small\nll = [[i for i in range(len(species_small[species_small == j]))] for j in np.unique(species_small)] # create a list of lits\n[i for l in ll for i in l] # flatten the list: read from the first for: for list in lists for i in list append i. THE FIRST i\n# https:\/\/stackoverflow.com\/questions\/952914\/how-to-make-a-flat-list-out-of-list-of-lists\n\n# Solution from the website\nprint(\"Solution from the website\")\n[i for val in np.unique(species_small) for i, grp in enumerate(species_small[species_small==val])]","36592da3":"# Q. Create group ids based on a given categorical variable. Use the following sample from iris species as input\n\n# Input\n# Use the iris dataset provided\nprint(\"Input\")\nprint_files()\n\n# Use this if you are working on your local machine\n# species = np.genfromtxt(url, delimiter=',', dtype='str', usecols=4)\n# species_small = np.sort(np.random.choice(species, size=20))\n# species_small\n# > array(['Iris-setosa', 'Iris-setosa', 'Iris-setosa', 'Iris-setosa',\n# >        'Iris-setosa', 'Iris-setosa', 'Iris-versicolor', 'Iris-versicolor',\n# >        'Iris-versicolor', 'Iris-versicolor', 'Iris-versicolor',\n# >        'Iris-versicolor', 'Iris-virginica', 'Iris-virginica',\n# >        'Iris-virginica', 'Iris-virginica', 'Iris-virginica',\n# >        'Iris-virginica', 'Iris-virginica', 'Iris-virginica'],\n# >       dtype='<U15')\n\n# Desired Output\n# > [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2]\n\n# Solution\nprint(\"Solution\")\nspecies = np.genfromtxt(os.path.join(PATH, \"Iris.csv\"), delimiter=',', dtype='str', usecols=5, skip_header=1)\nspecies_small = np.sort(np.random.choice(species, size=20))\nspecies_small\n\nd = dict((k, i) for i, k in enumerate(np.unique(species_small))) # create a mapping for every specie and store it in a dictionary\nnp.array([np.vectorize(d.get)(sp) for sp in species_small]) # use vectorize and dictionary .get method to map all the species\n\n# Solution from the website\nprint(\"Solution from the website\")\nprint(\"Solution usig numpy\")\noutput = [np.argwhere(np.unique(species_small) == s).tolist()[0][0] for val in np.unique(species_small) for s in species_small[species_small==val]]\noutput\n\n# Solution: For Loop version\nprint(\"Solution using for loops\")\noutput = []\nuniqs = np.unique(species_small)\n\nfor val in uniqs:  # uniq values in group\n    for s in species_small[species_small==val]:  # each element in group\n        groupid = np.argwhere(uniqs == s).tolist()[0][0]  # groupid\n        output.append(groupid)\noutput","3a59ac12":"# Q. Create the ranks for the given numeric array a.\n\n# Input\nprint(\"Input\")\nnp.random.seed(10)\na = np.random.randint(20, size=10)\na\n\n# Desired Output\n# [4 2 6 0 8 7 9 3 5 1]\n\n# Solution\nprint(\"Solution\")\na.argsort().argsort() # use argosrt twice: first to find the order of the array and then the rank\nprint(\"Order of the array: in the index 3 of the array (a) we have the value 0, which is the smallest value - \")\nprint(\"- at the index 9, we have the value 0 which is the second largest value etc etc etc\")\na.argsort()\nprint(\"Second argsort: the value 9 in the original array is the 4th smallest value, the value 4 in the original array is the second smallest value etc etc etc\")\na.argsort().argsort\n\n# reference: https:\/\/stackoverflow.com\/questions\/5284646\/rank-items-in-an-array-using-python-numpy-without-sorting-array-twice\/","3a01d392":"# Q. Create a rank array of the same shape as a given numeric array a.\n\n# Input\nprint(\"Input\")\nnp.random.seed(10)\na = np.random.randint(20, size=[2,5])\na\n\n# Desired Output\n# > [[4 2 6 0 8]\n# >  [7 9 3 5 1]]\n\n# Solution\nprint(\"Solution\")\na.flatten().argsort().argsort().reshape(2, -1) # flatten first the array, then use the same tecnique as before and then reshape the array\n\n# Solution from the website\nprint(\"Solution from the website\")\nprint(a.ravel().argsort().argsort().reshape(a.shape))\n\n'''\nDifference between flatten and ravel:\n\n- flatten is a method of an ndarray object and hence can only be called for true numpy arrays.\n\n- ravel is a library-level function and hence can be called on any object that can successfully be parsed.\n'''","a15cc430":"# Q. Compute the maximum for each row in the given array.\n\n# Input\nprint(\"Input\")\nnp.random.seed(100)\na = np.random.randint(1,10, [5,3])\na\n\n# Solution\nprint(\"Solution\")\nnp.array([max(row) for row in a])\n\n# Solution from the website\nprint(\"Solution from the website\")\n\n# Solution 1\nnp.amax(a, axis=1)\n\n# Solution 2\nnp.apply_along_axis(np.max, arr=a, axis=1)","b6e323dd":"# Q. Compute the min-by-max for each row for given 2d numpy array.\n\n# Input\nprint(\"Input\")\nnp.random.seed(100)\na = np.random.randint(1,10, [5,3])\na\n\n# Solution\nprint(\"Solution\")\nnp.array([min(row)\/max(row) for row in a])\n\n# Solution from the website\nprint(\"Solution from the website\")\nnp.apply_along_axis(lambda x: np.min(x)\/np.max(x), arr=a, axis=1) # maybe a little more elegat solution","edb7243f":"# Q. Find the duplicate entries (2nd occurrence onwards) in the given numpy array and mark them as True. First time occurrences should be False.\n\n# Input\nprint(\"Input\")\nnp.random.seed(100)\na = np.random.randint(0, 5, 10)\na\n\n# Desired Output\n# > [False  True False  True False False  True  True  True  True]\n\n# Solution\nprint(\"Solution\")\nprint(\"Ooops, I have not understood the problem. This solution marks False the elements that are duplicated and True the unique ones.\")\ncounts = np.unique(a, return_counts=True)\nnp.array([True if counts[1][np.where(counts[0] == x)] > 1 else False for x in a])\n\n# Solution from the website\nprint(\"Solution from the website\")\nout = np.full(a.shape[0], True) # Create an all True array\nunique_positions = np.unique(a, return_index=True)[1] # Find the index positions of unique elements\nout[unique_positions] = False # Mark those positions as False\nout","bf3acfd8":"# Q. Find the mean of a numeric column grouped by a categorical column in a 2D numpy array\n\n# Input\n# Use the iris dataset provided\nprint(\"Input\")\nprint_files()\n\n# Use this if you are working on your local machine\n# url = 'https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/iris\/iris.data'\n# iris = np.genfromtxt(url, delimiter=',', dtype='object')\n# names = ('sepallength', 'sepalwidth', 'petallength', 'petalwidth', 'species')\n\n# Desired Output\n# > [[b'Iris-setosa', 3.418],\n# >  [b'Iris-versicolor', 2.770],\n# >  [b'Iris-virginica', 2.974]]\n\n# Solution\nprint(\"Solution\")\niris = np.genfromtxt(os.path.join(PATH, \"Iris.csv\"), delimiter=',', dtype='object', skip_header=1)\nsepallength = iris[:,2].astype(float)\nnames = iris[:,5]\n[[name, np.mean(sepallength[np.where(names == name)])] for name in np.unique(names)]\n\n# Solution from the website\nprint(\"Solution from the website\")\nnumeric_column = iris[:, 2].astype('float')  # sepalwidth\ngrouping_column = iris[:, 5]  # species\n\n# List comprehension version\n[[group_val, numeric_column[grouping_column==group_val].mean()] for group_val in np.unique(grouping_column)]\n\n# For Loop version\noutput = []\nfor group_val in np.unique(grouping_column):\n    output.append([group_val, numeric_column[grouping_column==group_val].mean()])\n\noutput\n","5c1e291b":"# Q. Import the image from the following URL and convert it to a numpy array.\n\n# Input\nprint(\"Input\")\nprint_files()\n\n# Use this if you are working on your local machine\n# URL = 'https:\/\/upload.wikimedia.org\/wikipedia\/commons\/8\/8b\/Denali_Mt_McKinley.jpg'\n\n# Solution\nprint(\"Solution\")\nfrom PIL import Image\n# pic = Image.open(\"\/kaggle\/input\/exercise-60-denali-mt-mckinleyjpg\/Denali Mt McKinley.jpg\").convert(\"L\") # works also without convert(\"L\")\n\npic = Image.open(os.path.join(PATH, \"Denali Mt McKinley.jpg\"))\nimgarr = np.array(pic) \nimgarr\n\n# Solution from the website\nprint(\"Solution from the website\")\nfrom io import BytesIO\nfrom PIL import Image\nimport PIL\n\n# Read it as Image\nI = Image.open(os.path.join(PATH, \"Denali Mt McKinley.jpg\"))\n\n# Optionally resize\nI = I.resize([150,150])\n\n# Convert to numpy array\narr = np.asarray(I)\narr\n\n# Optionaly Convert it back to an image and show\nim = PIL.Image.fromarray(np.uint8(arr))\nImage.Image.show(im)","b7ae7198":"# Q. Drop all nan values from a 1D numpy array\n\n# Input\nprint(\"Input\")\na = np.array([1,2,3,np.nan,5,6,7,np.nan])\na\n\n# Desired Output\n# array([ 1.,  2.,  3.,  5.,  6.,  7.])\n\n# Solution\nprint(\"Solution\")\na[[not np.isnan(x) for x in a]] # create a list with boolean if its np.isnan (not to reverse to True when it's not a nan) and index the original array\n\n# Solution from the website\nprint(\"Solution from the website\")\na[~np.isnan(a)]","4b9ce943":"# Q. Compute the euclidean distance between two arrays a and b.\n\n# Input\nprint(\"Input\")\na = np.array([1,2,3,4,5])\nb = np.array([4,5,6,7,8])\na\nb\n\n# Solution\nprint(\"Solution\")\ndist = np.linalg.norm(a-b)\ndist\n\n# The website uses the same solution","0b1c2c94":"# Q. Find all the peaks in a 1D numpy array a. Peaks are points surrounded by smaller values on both sides.\n\n# Input\nprint(\"Input\")\na = np.array([1, 3, 7, 1, 2, 6, 0, 1])\na\n\n# Desired Output\n# > array([2, 5])\n# where, 2 and 5 are the positions of peak values 7 and 6.\n\n# Solution\nprint(\"Solution using scipy\")\nfrom scipy.signal import find_peaks\n\nipeaks, _ = find_peaks(a)\nipeaks\na[ipeaks]\n\n# Solution from the website\nprint(\"Solution from the website using pure numpy\")\ndoublediff = np.diff(np.sign(np.diff(a)))\npeak_locations = np.where(doublediff == -2)[0] + 1\npeak_locations","07caf32e":"# Q. Subtract the 1d array b_1d from the 2d array a_2d, such that each item of b_1d subtracts from respective row of a_2d.\n\n# Input\nprint(\"Input\")\na_2d = np.array([[3,3,3],[4,4,4],[5,5,5]])\nb_1d = np.array([1,2,3])\na_2d\nb_1d\n\n# Desired Output\n# > [[2 2 2]\n# >  [2 2 2]\n# >  [2 2 2]]\n\n# Solution\nprint(\"Solution\")\na_2d - b_1d[:, None]","37cfb789":"# Q. Find the index of 5th repetition of number 1 in x.\n\n# Input\nprint(\"Input\")\nx = np.array([1, 2, 1, 1, 3, 4, 3, 1, 1, 2, 1, 1, 2])\nx\n\n# Solution\nprint(\"Solution\")\nnp.where(x == 1)[0][4] # we do [0] since np.where returns a tupple, and then find the index of the 5 repetition\n\n# Solution from the website\nprint(\"Solution from the website\")\nn = 5\n[i for i, v in enumerate(x) if v == 1][n-1]\n\nprint(\"Solution using numpy\")\nnp.where(x == 1)[0][n-1] # notice that n = 5, and 5 - 1 = 4, the index we did","e29da886":"# Q. Convert numpy's datetime64 object to datetime's datetime object\n\n# Input\nprint(\"Input\")\ndt64 = np.datetime64('2018-02-25 22:10:10')\ndt64\n\n# Solution from the website\nprint(\"Solution from the website\")\nfrom datetime import datetime\ndt64.tolist()\n\n# or\n\ndt64.astype(datetime)","915c01ca":"# Q. Compute the moving average of window size 3, for the given 1D array.\n\n# Input\nprint(\"Input\")\nnp.random.seed(100)\na = np.random.randint(10, size=10)\na\n\n# Solution\nprint(\"Solution\")\n# using the solution from https:\/\/stackoverflow.com\/questions\/14313510\/how-to-calculate-moving-average-using-numpy\/54628145\ndef moving_average(a, n=3) :\n    ret = np.cumsum(a, dtype=float)\n    ret[n:] = ret[n:] - ret[:-n]\n    return ret[n - 1:] \/ n\n\nmoving_average(a)\n\n# Solution from the website\nprint(\"Solution from the website\")\nnp.convolve(a, np.ones(3)\/3, mode='valid')","2d209ff4":"# Q. Create a numpy array of length 10, starting from 5 and has a step of 3 between consecutive numbers\n\n# Solution\nprint(\"Solution\")\n\nnp.arange(5, (5 + (10*3)), 3) # first argument is the starting point, second is the end, and the third the step.","e1438e49":"# Q. Given an array of a non-continuous sequence of dates. Make it a continuous sequence of dates, by filling in the missing dates.\n\n# Input\nprint(\"Input\")\ndates = np.arange(np.datetime64('2018-02-01'), np.datetime64('2018-02-25'), 2)\ndates\n\n# Solution from the website\nprint(\"Solution from the website\")\n# Solution ---------------\nfilled_in = np.array([np.arange(date, (date+d)) for date, d in zip(dates, np.diff(dates))]).reshape(-1)\n\n# add the last day\noutput = np.hstack([filled_in, dates[-1]])\noutput\n\n# For loop version -------\nout = []\nfor date, d in zip(dates, np.diff(dates)):\n    out.append(np.arange(date, (date+d)))\n\nfilled_in = np.array(out).reshape(-1)\n\n# add the last day\noutput = np.hstack([filled_in, dates[-1]])\noutput","07e326ae":"# Q. From the given 1d array arr, generate a 2d matrix using strides, with a window length of 4 and strides of 2, like [[0,1,2,3], [2,3,4,5], [4,5,6,7]..]\n\n# Input\nprint(\"Input\")\narr = np.arange(15) \narr\n\n# Desired Output\n# > [[ 0  1  2  3]\n# >  [ 2  3  4  5]\n# >  [ 4  5  6  7]\n# >  [ 6  7  8  9]\n# >  [ 8  9 10 11]\n# >  [10 11 12 13]]\n\n# Solution\nprint(\"Solution\")\nindex_ = np.arange(0, 15, 2)\narr_ = [[arr[index_[i]:index_[i+2]]] for i in range(6)]\narr_\n\n# Solution from the website\nprint(\"Solution from the website\")\ndef gen_strides(a, stride_len=5, window_len=5):\n    \n    n_strides = ((a.size-window_len)\/\/stride_len) + 1\n    \n    return np.array([a[s:(s+window_len)] for s in np.arange(0, n_strides*stride_len, stride_len)])\n\nprint(gen_strides(np.arange(15), stride_len=2, window_len=4))","9c3b07cc":"<a id = 'q39'><\/a>\n**39. How to find the count of unique values in a numpy array?**\n\n[Go back to the table of contents](#table_of_contents)\n","503b3b54":"<a id = 'q43'><\/a>\n**43. How to get the second largest value of an array when grouped by another array?**\n\n[Go back to the table of contents](#table_of_contents)\n","29aa77c4":"<a id='table_of_contents'><\/a>\n# Table of contents\n\n[Imports and helper functions](#imports)\n\n[1. Import numpy as np and see the version](#q1)\n\n[2. How to create a 1D array?](#q2)\n\n[3. How to create a boolean array?](#q3)\n\n[4. How to extract items that satisfy a given condition from 1D array?](#q4)\n\n[5. How to replace items that satisfy a condition with another value in numpy array?](#q5)\n\n[6. How to replace items that satisfy a condition without affecting the original array?](#q6)\n\n[7. How to reshape an array?](#q7)\n\n[8. How to stack two arrays vertically?](#q8)\n\n[9. How to stack two arrays horizontally?](#q9)\n\n[10. How to generate custom sequences in numpy without hardcoding?](#q10)\n\n[11. How to get the common items between two python numpy arrays?](#q11)\n\n[12. How to remove from one array those items that exist in another?](#q12)\n\n[13. How to get the positions where elements of two arrays match?](#q13)\n\n[14. How to extract all numbers between a given range from a numpy array?](#q14)\n\n[15. How to make a python function that handles scalars to work on numpy arrays?](#q15)\n\n[16. How to swap two columns in a 2d numpy array?](#q16)\n\n[17. How to swap two rows in a 2d numpy array?](#q17)\n\n[18. How to reverse the rows of a 2D array?](#q18)\n\n[19. How to reverse the columns of a 2D array?](#q19)\n\n[20. How to create a 2D array containing random floats between 5 and 10?](#q20)\n\n[21. How to print only 3 decimal places in python numpy array?](#q21)\n\n[22. How to pretty print a numpy array by suppressing the scientific notation (like 1e10)?](#q22)\n\n[23. How to limit the number of items printed in output of numpy array?](#q23)\n\n[24. How to print the full numpy array without truncating](#q24)\n\n[25. How to import a dataset with numbers and texts keeping the text intact in python numpy?](#q25)\n\n[26. How to extract a particular column from 1D array of tuples?](#q26)\n\n[27. How to convert a 1d array of tuples to a 2d numpy array?](#q27)\n\n[28. How to compute the mean, median, standard deviation of a numpy array?](#q28)\n\n[29. How to normalize an array so the values range exactly between 0 and 1?](#q29)\n\n[30. How to compute the softmax score?](#q30)\n\n[31. How to find the percentile scores of a numpy array?](#q31)\n\n[32. How to insert values at random positions in an array?](#q32)\n\n[33. How to find the position of missing values in numpy array?](#q33)\n\n[34. How to filter a numpy array based on two or more conditions?](#q34)\n\n[35. How to drop rows that contain a missing value from a numpy array?](#q35)\n\n[36. How to find the correlation between two columns of a numpy array?](#q36)\n\n[37. How to find if a given array has any null values?](#q37)\n\n[38. How to replace all missing values with 0 in a numpy array?](#q38)\n\n[39. How to find the count of unique values in a numpy array?](#q39)\n\n[40. How to convert a numeric to a categorical (text) array?](#q40)\n\n[41. How to create a new column from existing columns of a numpy array?](#q41)\n\n[42. How to do probabilistic sampling in numpy?](#q42)\n\n[43. How to get the second largest value of an array when grouped by another array?](#q43)\n\n[44. How to sort a 2D array by a column](#q44)\n\n[45. How to find the most frequent value in a numpy array?](#q45)\n\n[46. How to find the position of the first occurrence of a value greater than a given value?](#q46)\n\n[47. How to replace all values greater than a given value to a given cutoff?](#q47)\n\n[48. How to get the positions of top n values from a numpy array?](#q48)\n\n[49. How to compute the row wise counts of all possible values in an array?](#q49)\n\n[50. How to convert an array of arrays into a flat 1d array?](#q50)\n\n[51. How to generate one-hot encodings for an array in numpy?](#q51)\n\n[52. How to create row numbers grouped by a categorical variable?](#q52)\n\n[53. How to create groud ids based on a given categorical variable?](#q53)\n\n[54. How to rank items in an array using numpy?](#q54)\n\n[55. How to rank items in a multidimensional array using numpy?](#q55)\n\n[56. How to find the maximum value in each row of a numpy array 2d?](#q56)\n\n[57. How to compute the min-by-max for each row for a numpy array 2d?](#q57)\n\n[58. How to find the duplicate records in a numpy array?](#q58)\n\n[59. How to find the grouped mean in numpy?](#q59)\n\n[60. How to convert a PIL image to numpy array?](#q60)\n\n[61. How to drop all missing values from a numpy array?](#q61)\n\n[62. How to compute the euclidean distance between two arrays?](#q62)\n\n[63. How to find all the local maxima (or peaks) in a 1d array?](#q63)\n\n[64. How to subtract a 1d array from a 2d array, where each item of 1d array subtracts from respective row?](#q64)\n\n[65. How to find the index of n'th repetition of an item in an array](#q65)\n\n[66. How to convert numpy's datetime64 object to datetime's datetime object?](#q66)\n\n[67. How to compute the moving average of a numpy array?](#q67)\n\n[68. How to create a numpy array sequence given only the starting point, length and the step?](#q68)\n\n[69. How to fill in missing dates in an irregular series of numpy dates?](#q69)\n\n[70. How to create strides from a given 1D array?](#q70)","3ad70b2e":"<a id = 'q58'><\/a>\n**58. How to find the duplicate records in a numpy array?**\n\n[Go back to the table of contents](#table_of_contents)","1dba7b53":"<a id = 'q50'><\/a>\n**50. How to convert an array of arrays into a flat 1d array?**\n\n[Go back to the table of contents](#table_of_contents)\n","2360780e":"<a id = 'q22'><\/a>\n**22. How to pretty print a numpy array by suppressing the scientific notation (like 1e10)?**\n\n[Go back to the table of contents](#table_of_contents)","99255b15":"<a id = 'q12'><\/a>\n**12. How to remove from one array those items that exist in another?**\n\n[Go back to the table of contents](#table_of_contents)","4ff8ddb3":"<a id = 'q37'><\/a>\n**37. How to find if a given array has any null values?**\n\n[Go back to the table of contents](#table_of_contents)","4ee8f38b":"<a id = 'q66'><\/a>\n**66. How to convert numpy's datetime64 object to datetime's datetime object?**\n\n[Go back to the table of contents](#table_of_contents)","42ba82fa":"<a id = 'q19'><\/a>\n**19. How to reverse the columns of a 2D array?**\n\n[Go back to the table of contents](#table_of_contents)","bbcf9606":"<a id = 'q17'><\/a>\n**17. How to swap two rows in a 2d numpy array?**\n\n[Go back to the table of contents](#table_of_contents)","465ff3bf":"<a id = 'q36'><\/a>\n**36. How to find the correlation between two columns of a numpy array?**\n\n[Go back to the table of contents](#table_of_contents)","ccd3a02b":"<a id = 'q32'><\/a>\n**32. How to insert values at random positions in an array?**\n\n[Go back to the table of contents](#table_of_contents)","80d60ca2":"<a id = 'q45'><\/a>\n**45. How to find the most frequent value in a numpy array?**\n\n[Go back to the table of contents](#table_of_contents)\n","b466828c":"<a id = 'q18'><\/a>\n\n**18. How to reverse the rows of a 2D array?**\n\n[Go back to the table of contents](#table_of_contents)","a5ee551e":"<a id = 'q49'><\/a>\n\n**49. How to compute the row wise counts of all possible values in an array?**\n\n[Go back to the table of contents](#table_of_contents)\n","795f1e99":"<a id = 'q14'><\/a>\n**14. How to extract all numbers between a given range from a numpy array?**\n\n[Go back to the table of contents](#table_of_contents)","deeb5f18":"\n<a id = 'q53'><\/a>\n**53. How to create groud ids based on a given categorical variable?**\n\n[Go back to the table of contents](#table_of_contents)","ac117df6":"<a id = 'q25'><\/a>\n**25. How to import a dataset with numbers and texts keeping the text intact in python numpy?**\n\n[Go back to the table of contents](#table_of_contents)","2d0a3e50":"<a id = 'q57'><\/a>\n**57. How to compute the min-by-max for each row for a numpy array 2d?**\n\n[Go back to the table of contents](#table_of_contents)","0d2db996":"<a id = 'q33'><\/a>\n**33. How to find the position of missing values in numpy array?**\n\n[Go back to the table of contents](#table_of_contents)","4bd98aa0":"<a id = 'q64'><\/a>\n**64. How to subtract a 1d array from a 2d array, where each item of 1d array subtracts from respective row?**\n\n[Go back to the table of contents](#table_of_contents)","85bbae0e":"<a id = 'q11'><\/a>\n**11. How to get the common items between two python numpy arrays?**\n\n[Go back to the table of contents](#table_of_contents)","8b8c622b":"<a id='q1'><\/a>\n**1. Import numpy as np and see the version**\n\n[Go back to the table of contents](#table_of_contents)","1fc1e37d":"<a id = 'q59'><\/a>\n**59. How to find the grouped mean in numpy?**\n\n[Go back to the table of contents](#table_of_contents)","03407a1d":"<a id = 'q21'><\/a>\n**21. How to print only 3 decimal places in python numpy array?**\n\n[Go back to the table of contents](#table_of_contents)","760e38f2":"<a id = 'q51'><\/a>\n**51. How to generate one-hot encodings for an array in numpy?**\n\n[Go back to the table of contents](#table_of_contents)\n","6bfe249d":"<a id = 'q34'><\/a>\n**34. How to filter a numpy array based on two or more conditions?**\n\n[Go back to the table of contents](#table_of_contents)","2cd0d9b9":"<a id = 'q10'><\/a>\n**10. How to generate custom sequences in numpy without hardcoding?**\n\n[Go back to the table of contents](#table_of_contents)","f989dc5a":"<a id = 'q38'><\/a>\n\n**38. How to replace all missing values with 0 in a numpy array?**\n\n[Go back to the table of contents](#table_of_contents)\n","be4332cf":"<a id = 'q28'><\/a>\n**28. How to compute the mean, median, standard deviation of a numpy array?**\n\n[Go back to the table of contents](#table_of_contents)","43b747e3":"<a id = 'q54'><\/a>\n**54. How to rank items in an array using numpy?**\n\n[Go back to the table of contents](#table_of_contents)","3f20c7c1":"<a id = 'q62'><\/a>\n**62. How to compute the euclidean distance between two arrays?**\n\n[Go back to the table of contents](#table_of_contents)","308bb5d3":"<a id = 'q29'><\/a>\n**29. How to normalize an array so the values range exactly between 0 and 1?**\n\n[Go back to the table of contents](#table_of_contents)","4b165a1b":"<a id = 'q16'><\/a>\n**16. How to swap two columns in a 2d numpy array?**\n\n[Go back to the table of contents](#table_of_contents)","a605e8c6":"<a id='imports'><\/a>\n# Imports and helper functions\n\n[Go back to the table of contents](#table_of_contents)","936f78de":"<a id = 'q44'><\/a>\n**44. How to sort a 2D array by a column**\n\n[Go back to the table of contents](#table_of_contents)\n","40a02bbd":"<a id = 'q5'><\/a>\n**5. How to replace items that satisfy a condition with another value in numpy array?**\n\n[Go back to the table of contents](#table_of_contents)","c5a78a2d":"<a id = 'q48'><\/a>\n**48. How to get the positions of top n values from a numpy array?**\n\n[Go back to the table of contents](#table_of_contents)\n","9d5e66d8":"<a id = 'q2'><\/a>\n**2. How to create a 1D array?**\n\n[Go back to the table of contents](#table_of_contents)","cd6bb9d8":"<a id = 'q8'><\/a>\n**8. How to stack two arrays vertically?**\n\n[Go back to the table of contents](#table_of_contents)","68db89e2":"<a id = 'q46'><\/a>\n**46. How to find the position of the first occurrence of a value greater than a given value?**\n\n[Go back to the table of contents](#table_of_contents)\n","49cc17fe":"<a id = 'q24'><\/a>\n**24. How to print the full numpy array without truncating**\n\n[Go back to the table of contents](#table_of_contents)","9c6e66f1":"<a id = 'q13'><\/a>\n**13. How to get the positions where elements of two arrays match?**\n\n[Go back to the table of contents](#table_of_contents)","fc472e43":"<a id = 'q52'><\/a>\n**52. How to create row numbers grouped by a categorical variable?**\n\n[Go back to the table of contents](#table_of_contents)\n","12642490":"<a id = 'q23'><\/a>\n**23. How to limit the number of items printed in output of numpy array?**\n\n[Go back to the table of contents](#table_of_contents)","8a15d2a2":"<a id = 'q40'><\/a>\n\n**40. How to convert a numeric to a categorical (text) array?**\n\n[Go back to the table of contents](#table_of_contents)\n","bcc91d15":"<a id = 'q61'><\/a>\n**61. How to drop all missing values from a numpy array?**\n\n[Go back to the table of contents](#table_of_contents)","5052b01f":"<a id = 'q70'><\/a>\n**70. How to create strides from a given 1D array?**\n\n[Go back to the table of contents](#table_of_contents)","05d52749":"<a id = 'q65'><\/a>\n**65. How to find the index of n'th repetition of an item in an array**\n\n[Go back to the table of contents](#table_of_contents)\n","a2a2fb01":"<a id = 'q35'><\/a>\n\n**35. How to drop rows that contain a missing value from a numpy array?**\n\n[Go back to the table of contents](#table_of_contents)","0175ed0b":"<a id = 'q41'><\/a>\n**41. How to create a new column from existing columns of a numpy array?**\n\n[Go back to the table of contents](#table_of_contents)\n","8dc26cd4":"<a id = 'q30'><\/a>\n**30. How to compute the softmax score?**\n\n[Go back to the table of contents](#table_of_contents)","a3062e0f":"<a id = 'q67'><\/a>\n**67. How to compute the moving average of a numpy array?**\n\n[Go back to the table of contents](#table_of_contents)","915fcfdf":"<a id = 'q55'><\/a>\n**55. How to rank items in a multidimensional array using numpy?**\n\n[Go back to the table of contents](#table_of_contents)","e61d7a77":"<a id = 'q3'><\/a>\n**3. How to create a boolean array?**\n\n[Go back to the table of contents](#table_of_contents)","337e7aa2":"<a id = 'q20'><\/a>\n**20. How to create a 2D array containing random floats between 5 and 10?**\n\n[Go back to the table of contents](#table_of_contents)","e5ca8f74":"# Welcome to this Kernel\n\n***This kernel if a compilation of 70 Numpy exercises with solutions from this webpage:***\n\nhttps:\/\/www.machinelearningplus.com\/python\/101-numpy-exercises-python\/","ac771630":"<a id = 'q47'><\/a>\n**47. How to replace all values greater than a given value to a given cutoff?**\n\n[Go back to the table of contents](#table_of_contents)\n","87b021bc":"<a id = 'q27'><\/a>\n**27. How to convert a 1d array of tuples to a 2d numpy array?**\n\n[Go back to the table of contents](#table_of_contents)\n","bd329771":"<a id = 'q56'><\/a>\n**56. How to find the maximum value in each row of a numpy array 2d?**\n\n[Go back to the table of contents](#table_of_contents)","30354a62":"<a id = 'q15'><\/a>\n**15. How to make a python function that handles scalars to work on numpy arrays?**\n\n[Go back to the table of contents](#table_of_contents)","29f00fe6":"<a id = 'q42'><\/a>\n**42. How to do probabilistic sampling in numpy?**\n\n[Go back to the table of contents](#table_of_contents)\n","095793ae":"<a id = 'q68'><\/a>\n**68. How to create a numpy array sequence given only the starting point, length and the step?**\n\n[Go back to the table of contents](#table_of_contents)","ca93abab":"<a id = 'q26'><\/a>\n**26. How to extract a particular column from 1D array of tuples?**\n\n[Go back to the table of contents](#table_of_contents)","22c1b1ed":"<a id = 'q6'><\/a>\n**6. How to replace items that satisfy a condition without affecting the original array?**\n\n[Go back to the table of contents](#table_of_contents)","d3647451":"# Numpy exercise","839c00cc":"<a id = 'q69'><\/a>\n**69. How to fill in missing dates in an irregular series of numpy dates?**\n\n[Go back to the table of contents](#table_of_contents)","587cc0d1":"<a id = 'q7'><\/a>\n**7. How to reshape an array?**\n\n[Go back to the table of contents](#table_of_contents)","5ae8283f":"<a id = 'q63'><\/a>\n**63. How to find all the local maxima (or peaks) in a 1d array?**\n\n[Go back to the table of contents](#table_of_contents)","7649bb85":"<a id = 'q60'><\/a>\n**60. How to convert a PIL image to numpy array?**\n\n[Go back to the table of contents](#table_of_contents)","de593dbe":"<a id = 'q4'><\/a>\n**4. How to extract items that satisfy a given condition from 1D array?**\n\n[Go back to the table of contents](#table_of_contents)","58a20ce8":"# That's all, thanks a lot. I hope you learned a lot of numpy.","28db51ca":"<a id = 'q9'><\/a>\n**9. How to stack two arrays horizontally?**\n\n[Go back to the table of contents](#table_of_contents)","83f2759d":"<a id = 'q31'><\/a>\n**31. How to find the percentile scores of a numpy array?**\n\n[Go back to the table of contents](#table_of_contents)"}}