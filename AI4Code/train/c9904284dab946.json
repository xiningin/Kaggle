{"cell_type":{"540c9588":"code","21c1b12c":"code","99b7dbf2":"code","a7ab26ce":"code","79c3b962":"code","6303bb85":"code","eb0834a4":"code","425b6515":"code","d86b5894":"code","a348a3f5":"code","b0dd26a6":"code","14f5b51d":"code","357a818b":"code","16fa377a":"code","b95875ae":"code","458ce454":"markdown","958eb2d1":"markdown","63012792":"markdown","23d3b911":"markdown","422442ad":"markdown","ed70b237":"markdown","dc0f8059":"markdown","0e773c7a":"markdown","0d31cd5d":"markdown","200f88c8":"markdown","52691801":"markdown","7fd6e251":"markdown","d2b21fa6":"markdown"},"source":{"540c9588":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","21c1b12c":"import matplotlib.pyplot as plt","99b7dbf2":"dataset =pd.read_csv(\"..\/input\/customer-personality-analysis\/marketing_campaign.csv\", sep=\"\\t\")\ndataset.head()","a7ab26ce":"dataset.isnull().sum()","79c3b962":"dataset=dataset.dropna()","6303bb85":"dataset['Education'].unique()","eb0834a4":"dataset['Marital_Status'].unique()","425b6515":"# calculating the age of customers \ndataset['c_year'] = 2021\ndataset['age'] = dataset['c_year']-dataset['Year_Birth']\n\n# calculating the no of days as customers\ndataset['c_date'] = '01-01-2015'\ndataset['Dt_Customer'] =pd.to_datetime(dataset.Dt_Customer)\ndataset['c_date'] = pd.to_datetime(dataset.c_date)\ndataset['days_customer'] = (dataset['c_date']-dataset['Dt_Customer']).dt.days\n\n# reducing some dimensions \n\n# defining two categories of expenses as on food ( fish+meat+ fruit) and as leisure_Expense ( wine, sweet, Gold)\ndataset['leisure_Expense'] = dataset['MntWines']+ dataset['MntSweetProducts']+ dataset['MntGoldProds']\ndataset['food'] = dataset['MntFishProducts'] + dataset['MntFruits'] + dataset['MntMeatProducts']\n\n# defining accepted_any_cmp if customer have ever taken any campaign offer ( 1- yes, 0-no)\ndataset['accepted_any_cmp']= dataset['AcceptedCmp1']+dataset['AcceptedCmp2']+dataset['AcceptedCmp3']+dataset['AcceptedCmp4']+dataset['AcceptedCmp5']+dataset['Response']\ndataset['accepted_any_cmp']= np.where(dataset['accepted_any_cmp'] > 0, 1, 0)\n\n# defining martial status as ( 0- single adult, 1- two adults)\nmapping = {'Single' : 0, 'Together': 1, 'Married': 1, 'Divorced': 0, 'Widow': 0, 'Alone': 0,\n       'Absurd': 0, 'YOLO': 0, 'Graduation': 1, 'PhD': 2, 'Master': 2, 'Basic': 0, '2n Cycle': 2}\ndataset=dataset.replace({'Marital_Status': mapping, 'Education': mapping}) \n\ndataset['kid_teen'] = dataset['Kidhome'] + dataset['Teenhome']\ndataset['kid_teen']= np.where(dataset['kid_teen'] > 0, 1, 0)\n\ndataset.columns","d86b5894":"dataset=dataset[['Education', 'Marital_Status', 'Income', 'kid_teen',\n       'Recency','leisure_Expense', 'food', 'NumDealsPurchases', 'NumWebPurchases',\n       'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth', 'accepted_any_cmp', \n       'Complain', 'age', 'days_customer']]","a348a3f5":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX = sc.fit_transform(dataset)","b0dd26a6":"from sklearn.cluster import KMeans\nwcss = []\nfor i in range(1,16):\n    kmeans = KMeans(n_clusters = i, init = 'k-means++', random_state = 42)\n    kmeans.fit(X)\n    wcss.append(kmeans.inertia_)\n    \nplt.plot(range(1,16), wcss)\nplt.title('The elbow method')\nplt.xlabel('Number of clusters')\nplt.ylabel('wcss')\nplt.show()","14f5b51d":"from sklearn.decomposition import PCA\npca = PCA(n_components = 2)\nX = pca.fit_transform(X)","357a818b":"kmeans = KMeans(n_clusters = 5, init = 'k-means++', random_state = 42)\ny_kmeans = kmeans.fit_predict(X)","16fa377a":"print(y_kmeans)","b95875ae":"plt.scatter(X[y_kmeans ==0, 0], X[y_kmeans == 0, 1], s = 100, c = 'red', label='cluster1')\nplt.scatter(X[y_kmeans ==1, 0], X[y_kmeans == 1, 1], s = 100, c = 'blue', label='cluster2')\nplt.scatter(X[y_kmeans ==2, 0], X[y_kmeans == 2, 1], s = 100, c = 'green', label='cluster3')\nplt.scatter(X[y_kmeans ==3, 0], X[y_kmeans == 3, 1], s = 100, c = 'cyan', label='cluster4')\nplt.scatter(X[y_kmeans ==4, 0], X[y_kmeans == 4, 1], s = 100, c = 'gray', label='cluster5')\nplt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:,1], s = 300, c = 'yellow', label = 'centroids')\nplt.title('The clusters of Customers')\nplt.xlabel('Component1')\nplt.ylabel('Component2')\nplt.legend()\nplt.show()","458ce454":"**Importing the dataset**","958eb2d1":"*There are too many variables, we will reduce some dimensionality*","63012792":"**Checking Null Values**","23d3b911":"**Importing libs**","422442ad":"**Dropping some unwanted columns**","ed70b237":"**printing segmented cluster values**","dc0f8059":"**Applying Feature Scaling**","0e773c7a":"**dropping records with null values**","0d31cd5d":"**Fitting K-Means**","200f88c8":"**To plot a 2D graph we will use PCA to convert the dataset in 2 components**","52691801":"**Checking Categorical column's unique values**","7fd6e251":"**Finding optimal number of clusters using Elbow method**","d2b21fa6":"**Plotting clusters of customers**"}}