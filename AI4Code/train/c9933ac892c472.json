{"cell_type":{"90e13920":"code","576b3349":"code","aee25a89":"code","444bfcec":"code","e26bbd06":"code","d64c2f6c":"code","e46a9a89":"code","0e6ed6bc":"code","f10f5a2c":"code","d3a7e912":"code","ef92be2d":"code","5c6d49e6":"code","d6eca69f":"code","cd103e7c":"code","1f96a25b":"code","e3a330ae":"code","892e454d":"code","2a889617":"code","8270095f":"code","5bdc035a":"code","7692ba06":"code","3c5beef3":"code","bab5620a":"code","12602f1a":"code","58b44a6b":"code","db28326e":"code","9a6ca601":"code","b55e70fe":"code","53d9a503":"code","79fb55d6":"code","6bdf3d56":"code","1a5a6caf":"code","921576b8":"code","f522a691":"code","951f5fbb":"code","246ee66e":"markdown","7b417ddb":"markdown","17cf6c04":"markdown","5599033c":"markdown","76609040":"markdown","4742fd59":"markdown","c47fa7b4":"markdown","fdfec8da":"markdown","c592c915":"markdown","d7ba55fa":"markdown","377e0cf8":"markdown","0912ee48":"markdown","00aedc3a":"markdown","8142d501":"markdown","3d843fc2":"markdown"},"source":{"90e13920":"import numpy as np \nimport pandas as pd\nimport matplotlib\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline \nfrom wordcloud import WordCloud, STOPWORDS","576b3349":"data_df = pd.read_csv(\"\/kaggle\/input\/kaggle-youtube-video-metadata\/kaggle_channel_meta.csv\")","aee25a89":"print(f\"data shape: {data_df.shape}\")","444bfcec":"data_df.info()","e26bbd06":"data_df.describe()","d64c2f6c":"data_df.head()","e46a9a89":"data_df.tail()","0e6ed6bc":"def missing_data(data):\n    total = data.isnull().sum()\n    percent = (data.isnull().sum()\/data.isnull().count()*100)\n    tt = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    types = []\n    for col in data.columns:\n        dtype = str(data[col].dtype)\n        types.append(dtype)\n    tt['Types'] = types\n    return(np.transpose(tt))","f10f5a2c":"missing_data(data_df)","d3a7e912":"def unique_values(data):\n    total = data.count()\n    tt = pd.DataFrame(total)\n    tt.columns = ['Total']\n    uniques = []\n    for col in data.columns:\n        unique = data[col].nunique()\n        uniques.append(unique)\n    tt['Uniques'] = uniques\n    return(np.transpose(tt))","ef92be2d":"unique_values(data_df)","5c6d49e6":"def plot_count(feature, title, df, size=1, ordered=True):\n    f, ax = plt.subplots(1,1, figsize=(4*size,4))\n    total = float(len(df))\n    if ordered:\n        g = sns.countplot(df[feature], order = df[feature].value_counts().index[:20], palette='Set3')\n    else:\n        g = sns.countplot(df[feature], palette='Set3')\n    g.set_title(\"Number and percentage of {}\".format(title))\n    if(size > 2):\n        plt.xticks(rotation=90, size=8)\n    for p in ax.patches:\n        height = p.get_height()\n        ax.text(p.get_x()+p.get_width()\/2.,\n                height + 3,\n                '{:1.2f}%'.format(100*height\/total),\n                ha=\"center\") \n    plt.show()    ","d6eca69f":"plot_count(\"video_category_id\", \"Video category\", data_df,1)","cd103e7c":"plot_count(\"video_category_label\", \"Video category label\", data_df,1)","1f96a25b":"plot_count(\"definition\", \"Video definition\", data_df,1)","e3a330ae":"plot_count(\"caption\", \"Caption\", data_df,1)","892e454d":"plot_count(\"dimension\", \"Dimmension\", data_df,1)","2a889617":"stopwords = set(STOPWORDS)\n\ndef show_wordcloud(data, title = None):\n    wordcloud = WordCloud(\n        background_color='white',\n        stopwords=stopwords,\n        max_words=50,\n        max_font_size=40, \n        scale=5,\n        random_state=1\n    ).generate(str(data))\n\n    fig = plt.figure(1, figsize=(10,10))\n    plt.axis('off')\n    if title: \n        fig.suptitle(title, fontsize=20)\n        fig.subplots_adjust(top=2.3)\n\n    plt.imshow(wordcloud)\n    plt.show()","8270095f":"show_wordcloud(data_df['video_title'], title = 'Prevalent words in video title')","5bdc035a":"hd_df = data_df.loc[data_df.definition == 'hd']\nshow_wordcloud(hd_df['video_title'], title = 'Prevalent words in high definition video title (high definition)')","7692ba06":"sd_df = data_df.loc[data_df.definition == 'sd']\nshow_wordcloud(sd_df['video_title'], title = 'Prevalent words in simple definition video title (simple definition)')","3c5beef3":"show_wordcloud(data_df['video_description'], title = 'Prevalent words in video description')","bab5620a":"hd_df = data_df.loc[data_df.definition == 'hd']\nshow_wordcloud(hd_df['video_description'], title = 'Prevalent words in video description (high definition)')","12602f1a":"sd_df = data_df.loc[data_df.definition == 'sd']\nshow_wordcloud(sd_df['video_description'], title = 'Prevalent words in video description (simple definition)')","58b44a6b":"def plot_features_distribution(features, title, df, isLog=False):\n    plt.figure(figsize=(12,6))\n    plt.title(title)\n    for feature in features:\n        if(isLog):\n            sns.distplot(np.log1p(df[feature]),kde=True,hist=True, bins=120, label=feature)\n        else:\n            sns.distplot(df[feature],kde=True,hist=True, bins=120, label=feature)\n    plt.xlabel('#')\n    plt.legend()\n    plt.show()","db28326e":"plot_features_distribution(['duration_sec'], 'Video duration distribution (sec.)', data_df)","9a6ca601":"plot_features_distribution(['duration_sec'], 'Video duration distribution (sec.\/logaritmic)', data_df, isLog=True)","b55e70fe":"plot_features_distribution(['view_count'], 'View count distribution (logaritmic)', data_df, isLog=True)","53d9a503":"plot_features_distribution(['like_count'], 'Like count distribution (logaritmic)', data_df, isLog=True)","79fb55d6":"plot_features_distribution(['dislike_count'], 'Dislike count distribution (logaritmic)', data_df, isLog=True)","6bdf3d56":"plot_features_distribution(['comment_count'], 'Comments count distribution (logaritmic)', data_df, isLog=True)","1a5a6caf":"plot_features_distribution(['comment_count', 'dislike_count', 'like_count', 'view_count'],\n                           'Feedback distribution - all (logaritmic)', data_df, isLog=True)","921576b8":"def plot_feature_distribution_grouped(feature, title, df, hue, size=4):\n    plt.figure(figsize=(size*5,size*2))\n    plt.title(title)\n    if(size > 2):\n        plt.xticks(rotation=90, size=8)\n    g = sns.countplot(df[feature], hue=df[hue], palette='Set3')\n    plt.xlabel('#')\n    plt.legend()\n    plt.show()","f522a691":"plot_feature_distribution_grouped('video_category_label', 'Video category label grouped by video definition', data_df, 'definition', size=1)","951f5fbb":"plot_feature_distribution_grouped('caption', 'Video caption grouped by video category label', data_df, 'video_category_label', size=1)","246ee66e":"### Grouped distribution","7b417ddb":"### Unique values","17cf6c04":"## Load data","5599033c":"# Data exploration\n\n\n## Glimpse the data","76609040":"### Video resolution","4742fd59":"### Caption","c47fa7b4":"### Missing data","fdfec8da":"### Video reactions distribution","c592c915":"### Text wordcloauds","d7ba55fa":"### Dimmension","377e0cf8":"### Video category","0912ee48":"## Visualize the data distribution","00aedc3a":"<h1>BBC YouTube Channel Videos Metadata EDA<\/h1>\n\n\n<img src=\"https:\/\/www.googleapis.com\/download\/storage\/v1\/b\/kaggle-user-content\/o\/inbox%2F769452%2F6e6def2d4691c4179a8f99ac3e10fded%2Fkaggle-header2x.png?generation=1597480656846581&alt=media\" width=\"600\"><\/img>\n\n\n\n\n# Introduction\n\n\nThe Dataset we are using here is collected using YouTube Data Tools.  It stores all the metadata for the Kaggle main YouTube channel, from 2018 to present. \n\nIt contains such fields like:\n\n* date of publishing;  \n* video title;  \n* video description;  \n* video category id & video category label;  \n* duration;  \n* definition;  \n* caption;  \n* license;  \n* reach\/feedback count (likes, dislikes, favorites, views, comments)\n\n","8142d501":"### Video duration distribution","3d843fc2":"# Data preparation\n\n## Load packages"}}