{"cell_type":{"baea3d69":"code","bf37d200":"code","fa881dea":"code","9919240b":"code","a8f65fcf":"code","36f10151":"code","3fa620b6":"code","ce016140":"code","60349264":"code","b823746a":"code","6eb04404":"code","5a8f03f7":"code","ae1c6f9a":"code","326774b4":"code","a2876a7b":"code","c10ebaa2":"markdown","d96bb555":"markdown","e575119b":"markdown","aaa2edee":"markdown","67617ac1":"markdown","4a7ed47c":"markdown"},"source":{"baea3d69":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bf37d200":"train_address=\"\/kaggle\/input\/titanic\/train.csv\"\ntest_address=\"\/kaggle\/input\/titanic\/test.csv\"\ntrain_set=pd.read_csv(train_address)\ntest_set=pd.read_csv(test_address)","fa881dea":"features=['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']\nX=train_set[features]\ny=train_set.Survived\nX_test=test_set[features]\nprint(X_test.info())\nprint(X.info())\nX.head()","9919240b":"#Label Encoder\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn import preprocessing\nencoder=preprocessing.LabelEncoder()\nX_le=X.copy()\nX_le['Embarked']=X_le['Embarked'].astype(str)\nX_le['Embarked']=encoder.fit_transform(X_le['Embarked'])\nX_le['Sex']=encoder.fit_transform(X_le['Sex'])\nX_test_le=X_test.copy()\nX_test_le['Embarked']=X_test_le['Embarked'].astype(str)\nX_test_le['Embarked']=encoder.fit_transform(X_test_le['Embarked'])\nX_test_le['Sex']=encoder.fit_transform(X_test_le['Sex'])\nX_le.info()","a8f65fcf":"#One Hot Encoder\nfrom sklearn import preprocessing\nohencoder=preprocessing.OneHotEncoder(handle_unknown='ignore', sparse=False)\nX_oh=train_set[features]\nX_test_oh=test_set[features]\nX_oh['Embarked']=X_oh['Embarked'].astype(str)\nX_test_oh['Embarked']=X_test_oh['Embarked'].astype(str)\ncols=(X_oh.dtypes=='object')\ncols=list(cols[cols].index)\n#Apply one-hot encoder to each column with categorical data\nX_oh=pd.DataFrame(ohencoder.fit_transform(X_oh[cols]))\nX_test_oh=pd.DataFrame(ohencoder.transform(X_test_oh[cols]))\n#getting back indexes\nX_oh.index=train_set.index\nX_test_oh.index=test_set.index\n\nX_oh = pd.concat([train_set[features].drop(cols,axis=1), X_oh],axis=1)\nX_test_oh = pd.concat([test_set[features].drop(cols,axis=1), X_test_oh],axis=1)\nX_oh.isnull().any()","36f10151":"#using classifier\nfeat=['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']\nX_c=X_le.copy()\nX_age=X_c[~X_c['Age'].isnull()][feat]\nX_age.dropna(inplace=True)\ny_age=X_age.Age\nX_age=X_age.drop(['Age','Embarked'],axis=1)\nfrom sklearn.ensemble import RandomForestRegressor\nrf=RandomForestRegressor(n_estimators=100, max_depth=5, random_state=1)\nrf.fit(X_age,y_age)\nX_age_test=X_c[X_c['Age'].isnull()][X_age.columns]\ny_age_out=pd.DataFrame(rf.predict(X_age_test))\ny_age_out.index=X_age_test.index\nfor i in y_age_out.index:\n    X_c.loc[i,'Age']=y_age_out.loc[i,0]\nX_c.dropna(axis=1,inplace=True)\nX_c.info()","3fa620b6":"X_c_test=X_test_le.copy()\nX_age_t=X_c_test[~X_c_test['Age'].isnull()][feat]\nX_age_t.dropna(inplace=True)\ny_age_t=X_age_t.Age\nX_age_t=X_age_t.drop(['Age','Embarked'],axis=1)\nfrom sklearn.ensemble import RandomForestRegressor\nrft=RandomForestRegressor(n_estimators=100, max_depth=5, random_state=1)\nrft.fit(X_age_t,y_age_t)\nX_test_age_test=X_c_test[X_c_test['Age'].isnull()][X_age_t.columns]\ny_test_age_out=pd.DataFrame(rft.predict(X_test_age_test))\ny_test_age_out.index=X_test_age_test.index\nfor i in y_test_age_out.index:\n    X_c_test.loc[i,'Age']=y_test_age_out.loc[i,0]\nX_c_test['Fare']=X_c_test['Fare'].fillna(np.mean(X_c_test['Fare']))\nX_c_test.info()","ce016140":"from sklearn.impute import SimpleImputer\nimp=SimpleImputer()\ncolumns=X_oh.columns\nX_oh=pd.DataFrame(imp.fit_transform(X_oh))\nX_oh.columns=columns\nX_test_oh=pd.DataFrame(imp.fit_transform(X_test_oh))\nX_test_oh.columns=columns\n","60349264":"from sklearn.impute import SimpleImputer\nimp=SimpleImputer()\nX_le=pd.DataFrame(imp.fit_transform(X_le))\nX_le.columns=features\nX_test_le=pd.DataFrame(imp.fit_transform(X_test_le))\nX_test_le.columns=features\nprint(X_le.info())\nprint(X_test_le.info())\nX_le.head()","b823746a":"from xgboost import XGBClassifier\nxgb=XGBClassifier()","6eb04404":"model_1 = RandomForestRegressor(n_estimators=50, random_state=0)\nmodel_2 = RandomForestRegressor(n_estimators=100, random_state=0)\nmodel_3 = RandomForestRegressor(n_estimators=100, criterion='mae', random_state=0)\nmodel_4 = RandomForestRegressor(n_estimators=200, min_samples_split=20, random_state=0)\nmodel_5 = RandomForestRegressor(n_estimators=100, max_depth=7, random_state=0)","5a8f03f7":"from sklearn import model_selection\nfrom sklearn.ensemble import RandomForestRegressor\nx1,x2,y1,y2=model_selection.train_test_split(X_c,y)\nrf=RandomForestRegressor(n_estimators=100, max_depth=5, random_state=1)\nrf.fit(x1,y1)\npred=rf.predict(x2)\nnp.round(pred)\nnp.mean(np.round(pred)==y2)*100","ae1c6f9a":"from sklearn import model_selection\nx1,x2,y1,y2=model_selection.train_test_split(X_oh,y)\nrf=RandomForestRegressor(n_estimators=100, max_depth=5, random_state=1)\nrf.fit(x1,y1)\npred=rf.predict(x2)\nnp.round(pred)\nnp.mean(np.round(pred)==y2)*100","326774b4":"from sklearn import model_selection\nx1,x2,y1,y2=model_selection.train_test_split(X_le,y)\nrf=RandomForestRegressor(n_estimators=100, max_depth=5, random_state=1)\nrf.fit(x1,y1)\npred=rf.predict(x2)\nnp.round(pred)\nnp.mean(np.round(pred)==y2)*100\n#predictions=rf.predict(X_test)\n#predictions","a2876a7b":"#Implementing the Random Forest Model\nrf.fit(X_oh,y)\npredictions=np.round(rf.predict(X_test_oh)).astype('int')\noutput = pd.DataFrame({'PassengerId': test_set.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\n","c10ebaa2":"# Dealing with Categorical features\n- Label Encoder\n- One Hot Encoder","d96bb555":"# **Collecting and Loading the Data**","e575119b":"\n- This is my first kaggle competition and just applied the simple steps to get to the result without data  visualization, if you are also new in this and just know the basics of ML then this kernel will guide you how to apply this in this Competition.\n- If you have any suggestions regarding the approach followed, please comment down or ping me.\n\n# Brief Description\n\n- On April 15, 1912, during her maiden voyage, the widely considered \u201cunsinkable\u201d RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren\u2019t enough lifeboats for everyone onboard, resulting in the death of 1502 out of 2224 passengers and crew.While there was some element of luck involved in surviving, it seems some groups of people were more likely to survive than others.what sorts of people were more likely to survive,use machine learning to create a model that predicts which passengers survived the Titanic shipwreck.","aaa2edee":"# Models Accuracy\n","67617ac1":"# Missing Values\n- Using Classifier\n- Simple Imputer","4a7ed47c":"# **Feature Engineering**\n### Data Description\n*  Survived: 0(No),1(Yes)\n*  Pclass: Ticket Class\n*  SibSp: No. of siblings or spouse\n*  Parch: No. of Parents or children\n*  Embarked: Port of Embarkation"}}