{"cell_type":{"815a10fb":"code","bfcbf615":"code","a3d2d265":"code","ee794827":"code","1667759b":"code","67e5eb42":"code","71b489ac":"code","363c14d6":"markdown"},"source":{"815a10fb":"import pandas as pd\nimport matplotlib.pyplot as plt\n\ndef stock_graph(symbol,title):\n    df = pd.read_csv(\"..\/input\/Data\/Stocks\/{}.us.txt\".format(symbol))\n    df[['Close']].plot()\n    plt.title(title)\n    plt.show()\n\nstock_graph(\"aapl\",\"Apple Stock\")","bfcbf615":"# Get stock data for multiple stocks for given symbols and dates and graph it\ndef stocks_data(symbols, dates):\n    df = pd.DataFrame(index=dates)\n    for symbol in symbols:\n        df_temp = pd.read_csv(\"..\/input\/Data\/Stocks\/{}.us.txt\".format(symbol), index_col='Date',\n                parse_dates=True, usecols=['Date', 'Close'], na_values=['nan'])\n        df_temp = df_temp.rename(columns={'Close': symbol})\n        df = df.join(df_temp)\n    return df\n\ndates = pd.date_range('2016-01-02','2016-12-31',freq='B')\nsymbols = ['goog','ibm','aapl']\ndf = stocks_data(symbols, dates)\ndf.fillna(method='pad')\n#print(df)\ndf.interpolate().plot()\nplt.show()\n","a3d2d265":"# Normalized Stocks - base value from 2016-01-04\nprint(df.iloc[1,:])\ndf = df \/ df.iloc[1,:]\ndf.interpolate().plot()\nplt.show()","ee794827":"# Daily Returns for a symbol with date range\ndef daily_return(df):\n    dr = df.copy()\n    dr = dr[:-1].values \/ dr[1:] - 1\n    return dr\n\ndates = pd.date_range('2016-01-01','2016-12-31',freq='B')\nsymbols = ['aapl']\ndf = stocks_data(symbols, dates)\ndr = daily_return(df)\ndr = dr.interpolate()\ndr.interpolate().plot()\nplt.title('Apple Daily Returns')\nplt.show()\ndr.hist(bins=20)\nplt.show()\n","1667759b":"#Cumulative Returns\ndef cum_return(df):\n    dr = df.copy()\n    dr.cumsum()\n    return dr\n\ndates = pd.date_range('2016-01-01','2016-12-31',freq='B')\nsymbols = ['aapl']\ndf = stocks_data(symbols, dates)\ndr = cum_return(df)\ndr.plot()\nplt.title('Apple Cumulative Returns')\nplt.show()\ndr.hist()","67e5eb42":"# Scatterplot between GOOG vs AAPL\ndates = pd.date_range('2016-01-01','2016-12-31',freq='B')\nsymbols = ['goog','aapl']\ndf = stocks_data(symbols, dates)\ndr = daily_return(df)\ndr.plot(kind='scatter',x='goog', y='aapl')\nplt.show()","71b489ac":"# Technical Indicators\n# Bollinger Bands\ndef get_bbands(df, ndays):\n    db = df.copy()\n    dm = df.rolling(ndays).mean()\n    ds = df.rolling(ndays).std()\n    db['upperBB'] = dm + 2 * ds\n    db['lowerBB'] = dm - 2 * ds\n    return db\n\n# Simple Moving Average\ndef get_SMA(df, ndays):\n    dm = df.copy()\n    dm.rolling(ndays).mean()\n    return dm\n\n# Expontential Moving Average\ndef get_EMA(df, ndays):\n    dm = df.ewm( span = ndays, min_periods = ndays - 1).mean()\n    return dm\n\n# Rate of Change\ndef get_ROC(df, ndays):\n    dn = df.diff(ndays)\n    dd = df.shift(ndays)\n    dr = dn\/dd\n    return dr\n\ndates = pd.date_range('2016-01-01','2016-12-31',freq='B')\nsymbols = ['aapl']\ndf = stocks_data(symbols, dates)\ndm = get_SMA(df, 10)\ndm.plot()\nplt.title('Simple Moving Average')\nplt.show()\ndm = get_EMA(df, 10)\ndm.plot()\nplt.title('Expontential Moving Average')\nplt.show()\n\ndr = get_ROC(df, 1)\ndr.plot()\nplt.title('Rate of Change')\nplt.show()\n\n","363c14d6":"# Data Visualisation Techinques\n![](https:\/\/www.boldbi.com\/wp-content\/uploads\/2019\/07\/data-visualization@1x_2.jpg)\n\nData visualization is the act of taking information (data) and placing it into a visual context, such as a map or graph. Data visualizations make big and small data easier for the human brain to understand, and visualization also makes it easier to detect patterns, trends, and outliers in groups of data.\n\n     \n*NB: This is only the first version of the notebook more plots should be added soon     *"}}