{"cell_type":{"356660d0":"code","5bdf5440":"code","cdf63ad2":"code","dbe45e64":"code","e6779e10":"code","74558891":"code","35458c33":"code","4a8439ae":"code","cd1f54a7":"code","e1e7e4d1":"code","7b19b268":"code","2d8bc432":"code","d3368ce3":"code","d00ca1ca":"code","582e64d2":"code","e617a08f":"code","723e1955":"code","10bbdb31":"code","4eee755f":"code","0dc4207e":"code","f91f85d1":"code","b0f337f4":"code","497474e6":"code","ddd5ea1b":"code","19c478fd":"code","f0c51c92":"code","039c1da3":"markdown","2d0899dc":"markdown"},"source":{"356660d0":"import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\nimport pandas as pd","5bdf5440":"def state_space(X,P,F,H,Q,R,n):\n    # initialization\n    x0 = X\n    xk = x0\n    p0 = P\n    Pk = p0\n    z0 = np.dot(H,x0) + np.random.normal(0,1,1)\n    X_list = []\n    z_list = []\n    for i in range(n):\n        xk = np.dot(F,xk) + np.transpose(np.matrix(np.random.normal(0,1,3)))\n        zk = np.dot(H,xk) + np.random.normal(0,1,1)\n        X_list.append(xk)\n        z_list.append(zk)\n    return X_list,z_list","cdf63ad2":"# kalman filter\nfrom scipy import stats\n\ndef Kalman_Filter(X,P,F,H,Q,R,n):\n    # initialization\n    x0 = X\n    xk = x0\n    p0 = P\n    Pk = p0\n    z0 = np.dot(H,x0) + np.random.normal(0,1,1)\n    x_est_k = x0\n    X_list = [xk]\n    X_est_list = [x_est_k]\n    z_list = [z0]\n    p_list = [Pk]\n    for i in range(n):\n        xk = np.dot(F,xk) + np.transpose(np.matrix(np.random.normal(0,1,3)))\n        zk = np.dot(H,xk) + np.random.normal(0,1,1)\n        X_list.append(xk)\n        z_list.append(zk)\n        #print('xk:\\n',xk)\n        #print('zk:\\n',zk)\n        # update\n        x_est_conditionk = np.dot(F,x_est_k)\n        #print('x_con:\\n',x_est_conditionk)\n        P_conditionk = np.dot(np.dot(F,Pk),np.transpose(F))+Q\n        #print('p_con:\\n',P_conditionk)\n        K = np.dot(P_conditionk,np.transpose(H))\/(np.dot(np.dot(H,P_conditionk),np.transpose(H))+R)\n        #print('k:\\n',K)\n        x_est_k = x_est_conditionk + K*(zk-np.dot(H,x_est_conditionk))\n        #print('x_est_k:\\n',x_est_k)\n        X_est_list.append(x_est_k)\n        Pk = np.dot((np.identity(3) - np.dot(K,H)),P_conditionk)\n        #print('p_k:\\n',Pk)\n        p_list.append(Pk)\n    return X_list,X_est_list,z_list,p_list\n\n\ndef Kalman_Filter_update(X,P,F,H,Q,R,n,zlist):\n    # initialization\n    x0 = X\n    p0 = P\n    Pk = p0\n    x_est_k = x0\n    X_est_list = []\n    p_list = []\n    for i in range(n):\n        # update\n        x_est_conditionk = np.dot(F,x_est_k)\n        #print('x_con:\\n',x_est_conditionk)\n        P_conditionk = np.dot(np.dot(F,Pk),np.transpose(F))+Q\n        #print('p_con:\\n',P_conditionk)\n        K = np.dot(P_conditionk,np.transpose(H))\/(np.dot(np.dot(H,P_conditionk),np.transpose(H))+R)\n        #print('k:\\n',K)\n        x_est_k = x_est_conditionk + K*(zlist[i]-np.dot(H,x_est_conditionk))\n        #print('x_est_k:\\n',x_est_k)\n        X_est_list.append(x_est_k)\n        Pk = np.dot((np.identity(3) - np.dot(K,H)),P_conditionk)\n        #print('p_k:\\n',Pk)\n        p_list.append(Pk)\n    return X_est_list,p_list","dbe45e64":"# particle filter\n# code refer to https:\/\/github.com\/johnhw\/pfilter\/blob\/master\/pfilter\/pfilter.py\n# code refer to Graduate student Long Wang (fall 2019)\n# resample function from http:\/\/scipy-cookbook.readthedocs.io\/items\/ParticleFilter.html\ndef resample(weights):\n    n = len(weights)\n    indices = []\n    C = [0.0] + [np.sum(weights[: i + 1]) for i in range(n)]\n    u0, j = np.random.random(), 0\n    for u in [(u0 + i) \/ n for i in range(n)]:\n        while u > C[j]:\n            j += 1\n        indices.append(j - 1)\n    return indices\n\n# function for resampling\ndef resampling(particle_t,alpha_t):\n    length = len(alpha_t)\n    particle = particle_t\n    alpha =alpha_t\n    eff = 1\/np.sum([x**2 for x in alpha_t])\n    if eff < length\/2:\n#        print('yes')\n        indices = resample(alpha_t)\n#        print(indices)\n        for i in range(len(indices)):\n            particle[i] = particle_t[indices[i]]\n            alpha[i] = 1\/length\n    return particle,alpha\n\ndef proposal_fn(x,F):\n    particle  = [(np.dot(F,xi) + np.transpose(np.matrix(np.random.normal(0,1,3)))) for xi in x]\n    return particle\n\ndef pdf_z_given_x(x,z,H):\n    prob = [stats.norm.pdf(z,loc=np.dot(H,item)+stats.norm.rvs(), scale =1) for item in x]\n    return prob\n\ndef particle_filter(N,Size,x_0_hat,F,H,P_0,proposal_fn,pdf_z_given_x,zlist):\n    x_est_list = []\n    \n    # particle 0\n    particle_0 = [np.transpose(np.matrix(np.random.normal(0,1,3))) for i in range(N)]\n    alpha_0 = [1\/N]*N\n    x_est_0 =np.sum([particle_0[i]*alpha_0[i] for i in range(N)],axis=0)\n\n\n    # particle 1 to size\n    j=0\n    x_est_t = x_est_0\n    particle_t = particle_0\n    alpha_t = alpha_0\n    while j<Size:\n        print(j)\n        # update\n        particle_t = proposal_fn(particle_t,F)\n        alpha_t = [pdf_z_given_x(particle_t,zlist[j],H)[i]*alpha_t[i] for i in range(N)]\n        # resampling\n        summation = np.sum(alpha_t)\n        alpha_t = [x\/summation for x in alpha_t]\n        particle_t,alpha_t = resampling(particle_t,alpha_t)\n        x_est_t =np.sum([particle_t[i]*alpha_t[i] for i in range(N)],axis=0)\n        if len(x_est_t) == 1:\n            x_est_t = x_est_t[0]\n        x_est_list.append(x_est_t)\n        j = j+1\n    # return particle_list,alpha_list,x_est_list\n    return x_est_list","e6779e10":"# xk true and corrsponding z\nX =np.array([[0],[0],[0]])\nP = np.identity(3)\nF =np.matrix([[0.5,0.5,0],[0,0.5,0.5],[0,0,0.5]])\nH = np.matrix([1,1,1])\nQ = np.identity(3)\nR = np.matrix([1])\nn = 200\nX_list,z_list= state_space(X,P,F,H,Q,R,n)\n","74558891":"len(X_list)","35458c33":"len(z_list)","4a8439ae":"# kalman filter\nX_est_list_KF,p_list = Kalman_Filter_update(X,P,F,H,Q,R,n,z_list)","cd1f54a7":"len(X_est_list_KF)","e1e7e4d1":"# particle filter with N=10\nx_0 = [0,0,0]\nX_est_list_PF_10 = particle_filter(10,n,x_0,F,H,P,proposal_fn,pdf_z_given_x,z_list)\n","7b19b268":"len(X_est_list_PF_10)","2d8bc432":"X_est_list_PF_1000 = particle_filter(200,n,x_0,F,H,P,proposal_fn,pdf_z_given_x,z_list)","d3368ce3":"len(X_est_list_PF_1000)","d00ca1ca":"x_com_1 = []\nx_com_2 = []\nx_com_3 = []\n\nx_est_com_1_KF = []\nx_est_com_2_KF = []\nx_est_com_3_KF = []\n\nx_est_com_1_10_PF = []\nx_est_com_2_10_PF = []\nx_est_com_3_10_PF = []\n\nx_est_com_1_1000_PF = []\nx_est_com_2_1000_PF = []\nx_est_com_3_1000_PF = []\n\n\n\nfor i in range (len(X_list)):\n    x_com_1.append(X_list[i][0])\n    x_com_2.append(X_list[i][1])\n    x_com_3.append(X_list[i][2])\n    x_est_com_1_KF.append(X_est_list_KF[i][0])\n    x_est_com_2_KF.append(X_est_list_KF[i][1])\n    x_est_com_3_KF.append(X_est_list_KF[i][2])\n    x_est_com_1_10_PF.append(X_est_list_PF_10[i][0])\n    x_est_com_2_10_PF.append(X_est_list_PF_10[i][1])\n    x_est_com_3_10_PF.append(X_est_list_PF_10[i][2])\n    x_est_com_1_1000_PF.append(X_est_list_PF_1000[i][0])\n    x_est_com_2_1000_PF.append(X_est_list_PF_1000[i][1])\n    x_est_com_3_1000_PF.append(X_est_list_PF_1000[i][2])","582e64d2":"# plot\nx = np.linspace(1,200,200)\nplt.figure(figsize=(15,10))\nplt.plot(x,np.array(x_com_1).reshape(200,1),label='ture x component 1')\nplt.plot(x,np.array(x_est_com_1_KF).reshape(200,1),label='estimation x component 1 by kalman filter')\nplt.plot(x,np.array(x_est_com_1_10_PF).reshape(200,1),label='estimation x component 1 by Particle filter(10 particles)')\nplt.legend()","e617a08f":"# plot\nx = np.linspace(1,200,200)\nplt.figure(figsize=(15,10))\nplt.plot(x,np.array(x_com_2).reshape(200,1),label='ture x component 1')\nplt.plot(x,np.array(x_est_com_2_KF).reshape(200,1),label='estimation x component 1 by kalman filter')\nplt.plot(x,np.array(x_est_com_2_10_PF).reshape(200,1),label='estimation x component 1 by Particle filter(10 particles)')\nplt.legend()","723e1955":"# plot\nx = np.linspace(1,200,200)\nplt.figure(figsize=(15,10))\nplt.plot(x,np.array(x_com_3).reshape(200,1),label='ture x component 1')\nplt.plot(x,np.array(x_est_com_3_KF).reshape(200,1),label='estimation x component 1 by kalman filter')\nplt.plot(x,np.array(x_est_com_3_10_PF).reshape(200,1),label='estimation x component 1 by Particle filter(10 particles)')\nplt.legend()","10bbdb31":"# plot\nx = np.linspace(1,200,200)\nplt.figure(figsize=(15,10))\nplt.plot(x,np.array(x_com_1).reshape(200,1),label='ture x component 1')\nplt.plot(x,np.array(x_est_com_1_KF).reshape(200,1),label='estimation x component 1 by kalman filter')\nplt.plot(x,np.array(x_est_com_1_1000_PF).reshape(200,1),label='estimation x component 1 by Particle filter(1000 particles)')\nplt.legend()","4eee755f":"# plot\nx = np.linspace(1,200,200)\nplt.figure(figsize=(15,10))\nplt.plot(x,np.array(x_com_2).reshape(200,1),label='ture x component 1')\nplt.plot(x,np.array(x_est_com_2_KF).reshape(200,1),label='estimation x component 1 by kalman filter')\nplt.plot(x,np.array(x_est_com_2_1000_PF).reshape(200,1),label='estimation x component 1 by Particle filter(1000 particles)')\nplt.legend()","0dc4207e":"# plot\nx = np.linspace(1,200,200)\nplt.figure(figsize=(15,10))\nplt.plot(x,np.array(x_com_3).reshape(200,1),label='ture x component 1')\nplt.plot(x,np.array(x_est_com_3_KF).reshape(200,1),label='estimation x component 1 by kalman filter')\nplt.plot(x,np.array(x_est_com_3_1000_PF).reshape(200,1),label='estimation x component 1 by Particle filter(1000 particles)')\nplt.legend()","f91f85d1":"# com 1\nsummation1 = 0\nsummation2 = 0\nsummation3 = 0\nfor i in range(200):\n    temp1 = (x_est_com_1_KF[i]-0)**2\n    temp2 = (x_est_com_1_KF[i]-x_est_com_1_10_PF[i])**2\n    temp3 = (x_est_com_1_KF[i]-x_est_com_1_1000_PF[i])**2\n    summation1 = summation1 + temp1\n    summation2 = summation2 + temp2\n    summation3 = summation3 + temp3\nk_norm_1 = np.sqrt(summation1)\ndiff_10 = np.sqrt(summation2)\ndiff_1000 = np.sqrt(summation3)\n\nprint('normalization difference(KF&PF_10) of component 1: ',diff_10\/k_norm_1)\nprint('normalization difference(KF&PF_1000) of component 1: ',diff_1000\/k_norm_1)","b0f337f4":"# com 2\nsummation1 = 0\nsummation2 = 0\nsummation3 = 0\nfor i in range(200):\n    temp1 = (x_est_com_2_KF[i]-0)**2\n    temp2 = (x_est_com_2_KF[i]-x_est_com_2_10_PF[i])**2\n    temp3 = (x_est_com_2_KF[i]-x_est_com_2_1000_PF[i])**2\n    summation1 = summation1 + temp1\n    summation2 = summation2 + temp2\n    summation3 = summation3 + temp3\nk_norm_2 = np.sqrt(summation1)\ndiff_10 = np.sqrt(summation2)\ndiff_1000 = np.sqrt(summation3)\n\nprint('normalization difference(KF&PF_10) of component 2: ',diff_10\/k_norm_2)\nprint('normalization difference(KF&PF_1000) of component 2: ',diff_1000\/k_norm_2)","497474e6":"# com 3\nsummation1 = 0\nsummation2 = 0\nsummation3 = 0\nfor i in range(200):\n    temp1 = (x_est_com_3_KF[i]-0)**2\n    temp2 = (x_est_com_3_KF[i]-x_est_com_3_10_PF[i])**2\n    temp3 = (x_est_com_3_KF[i]-x_est_com_3_1000_PF[i])**2\n    summation1 = summation1 + temp1\n    summation2 = summation2 + temp2\n    summation3 = summation3 + temp3\nk_norm_3 = np.sqrt(summation1)\ndiff_10 = np.sqrt(summation2)\ndiff_1000 = np.sqrt(summation3)\n\nprint('normalization difference(KF&PF_10) of component 3: ',diff_10\/k_norm_3)\nprint('normalization difference(KF&PF_1000) of component 3: ',diff_1000\/k_norm_3)","ddd5ea1b":"# com 1\nsummation1 = 0\nsummation2 = 0\nsummation3 = 0\nfor i in range(200):\n    temp1 = (x_com_1[i]-0)**2\n    temp2 = (x_com_1[i]-x_est_com_1_KF[i])**2\n    temp3 = (x_com_1[i]-x_est_com_1_1000_PF[i])**2\n    summation1 = summation1 + temp1\n    summation2 = summation2 + temp2\n    summation3 = summation3 + temp3\nk_norm_3 = np.sqrt(summation1)\ndiff_kf = np.sqrt(summation2)\ndiff_1000 = np.sqrt(summation3)\n\nprint('normalization difference(real&KF) of component 1: ',diff_kf\/k_norm_3)\nprint('normalization difference(real&PF_1000) of component 1: ',diff_1000\/k_norm_3)","19c478fd":"# com 2\nsummation1 = 0\nsummation2 = 0\nsummation3 = 0\nfor i in range(200):\n    temp1 = (x_com_2[i]-0)**2\n    temp2 = (x_com_2[i]-x_est_com_2_KF[i])**2\n    temp3 = (x_com_2[i]-x_est_com_2_1000_PF[i])**2\n    summation1 = summation1 + temp1\n    summation2 = summation2 + temp2\n    summation3 = summation3 + temp3\nk_norm_3 = np.sqrt(summation1)\ndiff_kf = np.sqrt(summation2)\ndiff_1000 = np.sqrt(summation3)\n\nprint('normalization difference(real&KF) of component 2: ',diff_kf\/k_norm_3)\nprint('normalization difference(real&PF_1000) of component 2: ',diff_1000\/k_norm_3)","f0c51c92":"# com 2\nsummation1 = 0\nsummation2 = 0\nsummation3 = 0\nfor i in range(200):\n    temp1 = (x_com_3[i]-0)**2\n    temp2 = (x_com_3[i]-x_est_com_3_KF[i])**2\n    temp3 = (x_com_3[i]-x_est_com_3_1000_PF[i])**2\n    summation1 = summation1 + temp1\n    summation2 = summation2 + temp2\n    summation3 = summation3 + temp3\nk_norm_3 = np.sqrt(summation1)\ndiff_kf = np.sqrt(summation2)\ndiff_1000 = np.sqrt(summation3)\n\nprint('normalization difference(real&KF) of component 3: ',diff_kf\/k_norm_3)\nprint('normalization difference(real&PF_1000) of component 3: ',diff_1000\/k_norm_3)","039c1da3":"# A.(a)","2d0899dc":"# A.(b)"}}