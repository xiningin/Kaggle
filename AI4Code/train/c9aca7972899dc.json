{"cell_type":{"0acdb64d":"code","467e2ecb":"code","a9a7d27b":"code","b24ece7b":"code","6455103a":"code","17de06a0":"code","26d3bae1":"code","1f71941f":"code","dc4f99a8":"code","7f9953bc":"code","f87b69b0":"code","3ce6cd77":"code","46b28c3f":"code","fcbacad7":"code","dac877ac":"code","2294effc":"code","952368b2":"code","a059db32":"code","71743f3c":"code","3cc7d122":"code","7c32147b":"code","b77d172b":"code","fc853e8f":"code","21ccb0bd":"code","a5ea6d42":"code","debb297b":"code","3dfa6161":"code","e38ff845":"code","8e10b620":"code","deddaf8a":"code","f0eb2e76":"code","3c1c25c2":"code","ab78fc8b":"code","05ff412f":"code","8be30d77":"code","280f5aba":"code","4f577c65":"code","54f5ebb0":"code","e9f15ba8":"code","db7b17cb":"code","a9b2d75b":"code","e1111328":"code","254dbfbd":"code","292e7d88":"code","ce9a19df":"code","1c117fac":"code","21cd8f6c":"code","89c6a82e":"code","9e1ac646":"code","e899ff33":"code","7c05b2fe":"code","82e94baa":"code","2bfb4a41":"code","bc27a375":"code","4ad805ef":"code","eb5408d5":"code","613ff65b":"code","9dc8f785":"code","7ecdb6e1":"code","a2696986":"code","87f50670":"code","b5b05c9e":"code","0274a93c":"code","a48fee10":"markdown","dfd31913":"markdown","1bec98b5":"markdown","9eaaf5c1":"markdown","42842578":"markdown","2c0fc036":"markdown"},"source":{"0acdb64d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","467e2ecb":"#1.\u30c7\u30fc\u30bf\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8aad\u307f\u8fbc\u307f\n# data wrangling\nimport numpy as np\nimport pandas as pd\n#import pandas_profiling as pdp\nfrom collections import Counter\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom IPython.core.display import display\n\n# modeling\nfrom sklearn.svm import SVC\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, KFold, StratifiedKFold, cross_validate\n\n# evaluation\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\n\n#\u6b63\u898f\u8868\u73fe\nimport re","a9a7d27b":"#\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\ntrain = pd.read_csv('..\/input\/rossmann-store-sales\/train.csv')\ntest = pd.read_csv('..\/input\/rossmann-store-sales\/test.csv')\nstore = pd.read_csv('..\/input\/rossmann-store-sales\/store.csv')\n\n#\u3044\u3064\u3067\u3082\u5143\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u305b\u308b\u3088\u3046\u306b\u3057\u3066\u304a\u304f\uff080:train, 1:test, 2:store\uff09\ndef gen_data():\n    return([train,test,store])","b24ece7b":"#\u52a0\u5de5\u7528\u306b\u30c7\u30fc\u30bf\u3092\u5206\u96e2\u3059\u308b\nx_train = gen_data()[0]\nx_test = gen_data()[1]\nx_store = gen_data()[2]","6455103a":"#2.1.\u7279\u5fb4\u91cf\u306e\u69cb\u6210\uff08train\u306e\u52a0\u5de5\uff09\n#\u30c7\u30fc\u30bf\u306e\u5916\u5f62\u3092\u78ba\u8a8d\ndisplay(x_train.head())\n#\u6b20\u640d\u5024\u3001\u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u306e\u78ba\u8a8d\ndisplay(x_train.info())\n#train\u306b\u306f\u6b20\u640d\u306a\u3057\u3002\"Date\"\u3068\"StateHoliday\"\u304cobject\u306a\u306e\u3067\u3001\u7dda\u5f62\u30e2\u30c7\u30eb\u306b\u53d6\u308a\u8fbc\u3081\u308b\u3088\u3046\u306b\u5909\u63db\u3059\u308b\u3002","17de06a0":"#\"Date\"\u306e\u51e6\u7406\n#\"Date\" \u306f\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3068\u3057\u3066\u3067\u306f\u306a\u304f\u3001\"DayOfWeek\"\uff08\u6708\u66dc\uff1a1\uff5e\u65e5\u66dc\uff1a7\uff09\u306e\u307f\u53d6\u308a\u8fbc\u3080\u3053\u3068\u3068\u306b\u3059\u308b\u3002\nx_train = pd.concat([x_train.drop(\"DayOfWeek\", axis=1), pd.get_dummies(x_train[\"DayOfWeek\"]).iloc[:, :-1]], axis=1)\nx_train = x_train.drop(\"Date\",axis=1)\nx_train.head()","26d3bae1":"#\"StateHoliday\"\u306e\u51e6\u7406\n#\u5185\u5bb9\u78ba\u8a8d\nx_train[\"StateHoliday\"] = x_train[\"StateHoliday\"].astype(str)\nimport collections\nprint(collections.Counter(x_train[\"StateHoliday\"]))\n\n#'StateHoliday'\u306f\u30c0\u30df\u30fc\u5909\u6570\u3067\u7f6e\u304d\u63db\u3048\u308b\u3002(One hot encoding)\nx_train = pd.concat([x_train.drop('StateHoliday', axis=1), pd.get_dummies(x_train['StateHoliday']).iloc[:, :-1]], axis=1)\nx_train.head()","1f71941f":"#train\u3078\u306e\u51e6\u7406\u306f\u7d42\u308f\u308a\nx_train.info()","dc4f99a8":"#2.2.\u7279\u5fb4\u91cf\u306e\u69cb\u6210\uff08test\u306e\u52a0\u5de5\uff09\n\n#test\u3000\u300copen(float64)\u300d\u306b\u6b20\u640d\u3042\u308a\u3002\ndisplay(x_test.info())\n\n#\u6700\u983b\u5024\u3067\u7f6e\u304d\u63db\u3048\u308b\u3002\nx_test['Open'].fillna(x_test['Open'].mode()[0], inplace=True)","7f9953bc":"#\"Date\"\u3001\"StateHoliday\"\u306e\u51e6\u7406\uff08train\u3068\u540c\u3058\uff09\n#\"Date\"\u306e\u51e6\u7406\nx_test = pd.concat([x_test.drop(\"DayOfWeek\", axis=1), pd.get_dummies(x_test[\"DayOfWeek\"]).iloc[:, :-1]], axis=1)\nx_test = x_test.drop(\"Date\",axis=1)\ndisplay(x_test.head())","f87b69b0":"#\"StateHoliday\"\u306e\u51e6\u7406\nx_test = pd.concat([x_test.drop('StateHoliday', axis=1), pd.get_dummies(x_test['StateHoliday']).iloc[:, :-1]], axis=1)\ndisplay(x_test.head())","3ce6cd77":"#stateholiday\u306e\u7a2e\u985e\u304c\u8db3\u308a\u306a\u3044\u306e\u3067\u8ffd\u52a0\u3057\u3066\u3042\u3052\u308b\n#test\u3078\u306e\u51e6\u7406\u306f\u7d42\u308f\u308a\nx_test[\"a\"]=0\nx_test[\"b\"]=0\ndisplay(x_test.head())","46b28c3f":"#2.3.\u7279\u5fb4\u91cf\u306e\u69cb\u6210\uff08store\u306e\u52a0\u5de5\uff09\nx_store.info()\n#\"CompetitionDistance\"\u3001\"CompetitionOpenSinceMonth\"\u3001\"CompetitionOpenSinceYear\"\u3001\n#\"Promo2SinceWeek\"\u3001\"Promo2SinceYear\"\u3001\"PromoInterval\"\u306b\u6b20\u640d\u3042\u308a","fcbacad7":"#\u6b20\u640d\u5024\u306f\u6b21\u306e\u3068\u304a\u308a\u7f6e\u304d\u63db\u3048\u308b\u3002\n#\u3044\u305a\u308c\u3082\u96d1\u306a\u6c17\u304c\u3059\u308b\u306e\u3067\u3001\u5f8c\u3067\u3061\u3083\u3093\u3068\u8003\u3048\u308b\u3053\u3068\u3001\u3001\u3001\n\n#\"CompetitionDistance\"\u306f\u5e73\u5747\u3067\u7f6e\u304d\u63db\u3048\u308b\nx_store['CompetitionDistance'].fillna(x_store['CompetitionDistance'].mean(), inplace=True)\n\n#\"CompetitionOpenSinceMonth\"\u3068\"CompetitionOpenSinceYear\"\u306f\u6700\u983b\u5024\u3067\u7f6e\u304d\u63db\u3048\u308b\u3002\nx_store['CompetitionOpenSinceMonth'].fillna(x_store['CompetitionOpenSinceMonth'].mode()[0], inplace=True)\nx_store['CompetitionOpenSinceYear'].fillna(x_store['CompetitionOpenSinceYear'].mode()[0], inplace=True)\n\n#Note: \"Promo2SinceWeek\",\"Promo2SinceYear\",\"PromoInterval\"\u306f\"Promo2\"\u304c\u300c0\u300d\u306e\u5834\u5408\u3001\u81ea\u52d5\u7684\u306b\u7a7a\u767d\u3068\u306a\u308b\u3002\n#\"Promo2SinceWeek\"\u21920, \"Promo2SinceYear\"\u21922016, \"PromoInterval\"\u21920\u3000\u3068\u7f6e\u63db\u3059\u308b\u3002\u203b2015\u5e749\u670817\u65e5\u6642\u70b9\u3067\u59cb\u307e\u3063\u3066\u3044\u306a\u3044\u306e\u610f\nx_store['Promo2SinceWeek'].fillna(0, inplace=True)\nx_store['Promo2SinceYear'].fillna(2016, inplace=True)\nx_store['PromoInterval'].fillna(0, inplace=True)","dac877ac":"#\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30bf\u30a4\u30d7\u306e\u5909\u6570\u3092\u3059\u3079\u3066\u30c0\u30df\u30fc\u5909\u6570\u306b\u3059\u308b\n#\u3053\u308c\u3082\u96d1\u306a\u306e\u3067\u5f8c\u3067\u3061\u3083\u3093\u3068\u8003\u3048\u308b\u3001\u3001\u3001\nx_store = pd.concat([x_store.drop('StoreType', axis=1), pd.get_dummies(x_store['StoreType']).iloc[:, :-1]], axis=1)\nx_store = pd.concat([x_store.drop('Assortment', axis=1), pd.get_dummies(x_store['Assortment']).iloc[:, :-1]], axis=1)\nx_store = pd.concat([x_store.drop('PromoInterval', axis=1), pd.get_dummies(x_store['PromoInterval']).iloc[:, :-1]], axis=1)","2294effc":"x_store.head()","952368b2":"#3. \u7dda\u5f62\u56de\u5e30\u3067\u4e88\u6e2c\u5024\u3092\u7b97\u51fa\u3059\u308b\n\n#train\u30fbtest\u3068store\u3092\u7d50\u5408\n#train\u3068store\u3092\u7d50\u5408\u3059\u308b\u3068\u4f55\u6545\u304b\"Id\"\u304c\u6d88\u3048\u308b\u3001\u3001\u3001\nx_train_store = pd.merge(x_train, x_store, how = 'inner', on = 'Store')\n\nx_test_store = pd.merge(x_test, x_store, how = 'inner', on = 'Store')","a059db32":"#train\u304b\u3089\"Sales\"\u3068\"Customers\"\u3092\u5206\u96e2\ny_train_store = x_train_store[[\"Sales\"]]\nx_train_store = x_train_store.drop([\"Sales\",\"Customers\"], axis = 1)\n\n#\"Store\"\u3082\u56de\u5e30\u5909\u6570\u306b\u306f\u542b\u3081\u306a\u3044\u306e\u3067\u843d\u3068\u3059\nx_train_store = x_train_store.drop([\"Store\"], axis = 1)","71743f3c":"#test\u304b\u3089\"Id\"\u3092\u5206\u96e2\nid_test = x_test_store[\"Id\"]\n#\"Store\"\u3082\u56de\u5e30\u5909\u6570\u306b\u306f\u542b\u3081\u306a\u3044\u306e\u3067\u843d\u3068\u3059\nx_test_store = x_test_store.drop([\"Id\",\"Store\"], axis = 1)","3cc7d122":"#\uff13\uff0e\u7dda\u5f62\u56de\u5e30\u3059\u308b\nfrom sklearn.linear_model import LinearRegression\n\n#\u7dda\u5f62\u56de\u5e30\u5b9f\u884c\uff08\u666e\u901a\u306e\u91cd\u56de\u5e30\uff09\nmodel = LinearRegression()\nmodel.fit(x_train_store,y_train_store)","7c32147b":"#\u7dda\u5f62\u56de\u5e30\u306b\u3088\u308b\u4e88\u6e2c\npred_linear_1 = model.predict(x_test_store)\n#1\u6b21\u5143\u914d\u5217\u306b\u5909\u63db\npred_linear_1 = np.ravel(pred_linear_1)","b77d172b":"#\u63d0\u51fa\u7528\u306b\u30c7\u30fc\u30bf\u3092\u7d50\u5408\nsubmission_linear = pd.DataFrame({\n        \"Id\": id_test,\n        \"Sales\": pred_linear_1\n    })\n\n#\"Id\"\u9806\u306b\u4e26\u3079\u66ff\u3048\nsubmission_linear = submission_linear.sort_values('Id')\n\n#0\u3088\u308a\u5c0f\u3055\u3044\u4e88\u6e2c\u5024\u30920\u306b\u5909\u63db\nsubmission_linear[\"Sales\"] = submission_linear[\"Sales\"].apply(lambda x:max(x,0))\n\nsubmission_linear.to_csv('.\/submission_linear.csv', index = False )","fc853e8f":"#\u56de\u5e30\u4fc2\u6570\u304c\u5927\u304d\u3059\u304e\u308b\uff1f\npd.DataFrame({\"\u5909\u6570\":np.ravel(x_train_store.columns.values), \"\u4fc2\u6570\":np.ravel(model.coef_)})","21ccb0bd":"#RMSPE\u3092\u7b97\u51fa\ndef gen_RMSPE(pred, ans):\n    tmp_0 = (pred - ans)\/ans\n    tmp_1 = tmp_0[np.isfinite(tmp_0)] #ans\u304c0\u306e\u30ec\u30b3\u30fc\u30c9(=tmp0\u304cinf\u306e\u30ec\u30b3\u30fc\u30c9)\u306f\u7121\u8996\u3059\u308b\n    return(np.sqrt(np.power(tmp_1,2).sum()\/tmp_1.shape[0]))","a5ea6d42":"from sklearn.metrics import mean_squared_log_error\n#\u5404fold\u306e\u30b9\u30b3\u30a2\u3092\u4fdd\u5b58\u3059\u308b\u30ea\u30b9\u30c8\nscores_RMSPE = []\n\n#\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3046\n#\u5b66\u7fd2\u30c7\u30fc\u30bf\u30924\u3064\u306b\u5206\u5272\u3057\u3001\u3046\u30611\u3064\u3092\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u3068\u3059\u308b\u3053\u3068\u3092\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u3092\u5909\u3048\u3066\u7e70\u308a\u8fd4\u3059\nkf = KFold(n_splits=4, shuffle =True, random_state=71)\n\nfor tr_idx, va_idx in kf.split(x_train_store):\n    #\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u306b\u5206\u3051\u308b\n    tr_x, va_x = x_train_store.iloc[tr_idx], x_train_store.iloc[va_idx]\n    tr_y, va_y = y_train_store.iloc[tr_idx], y_train_store.iloc[va_idx]\n    \n    #\u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\u3092\u884c\u3046 \n    model_cv = LinearRegression()\n    model_cv.fit(tr_x,tr_y)\n    \n    #\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\u5024\u3092\u78ba\u7387\u3067\u51fa\u529b\u3059\u308b\n    va_pred = pd.DataFrame(model_cv.predict(va_x)[:len(model_cv.predict(va_x))])\n    va_pred[0] = va_pred[0].apply(lambda x:0 if x<0 else x)\n    #pd.DataFrame({\"Sales_pred\":model_cv.predict(va_x)[:len(model_cv.predict(va_x))]})\n    \n    #\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u3067\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3059\u308b\n    RMSPE = gen_RMSPE(va_pred[0], va_y[\"Sales\"])\n        \n    #\u305d\u306efold\u30b9\u30b3\u30a2\u3092\u4fdd\u6301\u3059\u308b\n    scores_RMSPE.append(RMSPE)","debb297b":"scores_RMSPE","3dfa6161":"print(pd.DataFrame({\"\u5909\u6570\":np.ravel(x_train_store.columns.values), \"\u4fc2\u6570\":np.ravel(model_cv.coef_)}))\nprint({\"\u5b9a\u6570\u9805\":model_cv.intercept_})","e38ff845":"#\u5909\u6570\u9078\u629e\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import Lasso\n\n#\u5909\u6570\u9078\u629e\u306f\u3068\u308a\u3042\u3048\u305aLASSO\u3067\u3001\u6b63\u5247\u5316\u30d1\u30e9\u30e1\u30fc\u30bf\u306f10\u3068\u3059\u308b\uff08\u9069\u5f53\uff09\u3002\n\nscaler = StandardScaler()\nclf = Lasso(alpha=10)\n\n#30\u79d2\u304f\u3089\u3044\u304b\u304b\u3063\u305f\nscaler.fit(x_train_store)\nclf.fit(scaler.transform(x_train_store), y_train_store)","8e10b620":"#\u4e00\u90e8\u306e\u5909\u6570\u306e\u5bc4\u4e0e\u304c0\u306b\u306a\u3063\u305f\npd.DataFrame({\"\u5909\u6570\":np.ravel(x_train_store.columns.values), \"\u4fc2\u6570\":np.ravel(clf.coef_)})","deddaf8a":"#\u7dda\u5f62\u56de\u5e30(Lasso)\u306b\u3088\u308b\u4e88\u6e2c\nscaler.fit(x_test_store)\npred_linear_2 = clf.predict(scaler.transform(x_test_store))\n#1\u6b21\u5143\u914d\u5217\u306b\u5909\u63db\npred_linear_2 = np.ravel(pred_linear_2)\n\n#\u63d0\u51fa\u7528\u306b\u30c7\u30fc\u30bf\u3092\u7d50\u5408\nsubmission_linear_lasso = pd.DataFrame({\n        \"Id\": id_test,\n        \"Sales\": pred_linear_2\n    })\n\n#\"Id\"\u9806\u306b\u4e26\u3079\u66ff\u3048\nsubmission_linear_lasso = submission_linear_lasso.sort_values('Id')\n\n#0\u3088\u308a\u5c0f\u3055\u3044\u4e88\u6e2c\u5024\u30920\u306b\u5909\u63db\nsubmission_linear_lasso[\"Sales\"] = submission_linear_lasso[\"Sales\"].apply(lambda x:max(x,0))\n\nsubmission_linear_lasso.to_csv('.\/submission_linear_lasso.csv', index = False )","f0eb2e76":"pred_linear_2","3c1c25c2":"#train\u30fbtest\u3068store\u3092\u7d50\u5408\n#train\u3068store\u3092\u7d50\u5408\u3059\u308b\u3068\u4f55\u6545\u304b\"Id\"\u304c\u6d88\u3048\u308b\u3001\u3001\u3001\nx_train_store = pd.merge(x_train, x_store, how = 'inner', on = 'Store')\nx_test_store = pd.merge(x_test, x_store, how = 'inner', on = 'Store')\n\n#\u5358\u4fa1\u3092\u7b97\u51fa\u3059\u308b\nx_train_store[\"Unit\"] = x_train_store[\"Sales\"] \/x_train_store[\"Customers\"] \n#\"Customers\"=0 \u306e\u3068\u304dInf\u306b\u306a\u308b\u306e\u30670\u306b\u7f6e\u304d\u63db\u3048\u308b\u3002\nx_train_store[\"Unit\"] = x_train_store[\"Unit\"] .fillna(0)","ab78fc8b":"#train\u304b\u3089\"Sales\", \"Customers\", \"Unit\"\u3092\u5206\u96e2\u3001\u3046\u3061\"Sales\"\u306f\u6368\u3066\u308b\ny_train_store = x_train_store.loc[:,[\"Customers\",\"Unit\"]]\nx_train_store = x_train_store.drop([\"Sales\",\"Customers\",\"Unit\"], axis = 1)\n\n#\"Store\"\u3082\u56de\u5e30\u5909\u6570\u306b\u306f\u542b\u3081\u306a\u3044\u306e\u3067\u843d\u3068\u3059\nx_train_store = x_train_store.drop([\"Store\"], axis = 1)","05ff412f":"#\u5909\u6570\u9078\u629e\u306f\u3068\u308a\u3042\u3048\u305aLASSO\u3067\u3001\u6b63\u5247\u5316\u30d1\u30e9\u30e1\u30fc\u30bf\u306f10\u3068\u3059\u308b\uff08\u9069\u5f53\uff09\u3002\n\nscaler = StandardScaler()\nclf_cust = Lasso(alpha=10) #\u9069\u5f53\nclf_unit = Lasso(alpha=0.1) #\u9069\u5f53\u300210\u3060\u3068\u9000\u5316\u3057\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u3001\u3001\n\n#30\u79d2\u304f\u3089\u3044\u304b\u304b\u3063\u305f\nscaler.fit(x_train_store)\nclf_cust.fit(scaler.transform(x_train_store), y_train_store[\"Customers\"])\nclf_unit.fit(scaler.transform(x_train_store), y_train_store[\"Unit\"])","8be30d77":"#test\u304b\u3089\"Id\"\u3092\u5206\u96e2\nid_test = x_test_store[\"Id\"]\n#\"Store\"\u3082\u56de\u5e30\u5909\u6570\u306b\u306f\u542b\u3081\u306a\u3044\u306e\u3067\u843d\u3068\u3059\nx_test_store = x_test_store.drop([\"Id\",\"Store\"], axis = 1)\n\n#Costomer\u3068Unit\u306e\u7a4d\u3092\u4e88\u6e2c\u5024\u3068\u3059\u308b\u3002\npred_linear_3 = clf_cust.predict(scaler.transform(x_test_store))*clf_unit.predict(scaler.transform(x_test_store))","280f5aba":"#1\u6b21\u5143\u914d\u5217\u306b\u5909\u63db\npred_linear_3 = np.ravel(pred_linear_3)\n\n#\u63d0\u51fa\u7528\u306b\u30c7\u30fc\u30bf\u3092\u7d50\u5408\nsubmission_linear_lasso_unit = pd.DataFrame({\n        \"Id\": id_test,\n        \"Sales\": pred_linear_3\n    })\n\n#\"Id\"\u9806\u306b\u4e26\u3079\u66ff\u3048\nsubmission_linear_lasso_unit = submission_linear_lasso_unit.sort_values('Id')\n\n#0\u3088\u308a\u5c0f\u3055\u3044\u4e88\u6e2c\u5024\u30920\u306b\u5909\u63db\nsubmission_linear_lasso_unit[\"Sales\"] = submission_linear_lasso_unit[\"Sales\"].apply(lambda x:max(x,0))\n\nsubmission_linear_lasso_unit.to_csv('.\/submission_linear_lasso_unit.csv', index = False )","4f577c65":"# submission_linear_lasso_unit\u306e\u30b9\u30b3\u30a2\u306f0.43454\u3068\u306a\u3063\u305f\u3002","54f5ebb0":"#\u52a0\u5de5\u7528\u306b\u30c7\u30fc\u30bf\u3092\u5206\u96e2\u3059\u308b\ntrain2 = gen_data()[0]\ntest2 = gen_data()[1]\nstore2 = gen_data()[2]","e9f15ba8":"plt.figure(figsize=(10,10))\nsns.set(style=\"whitegrid\")\nsns.boxplot(data=train2,x=\"DayOfWeek\",y=\"Sales\")\nprint(\"\u66dc\u65e5\u3054\u3068\u306b\u7bb1\u3072\u3052\u56f3\u3092\u63cf\u753b\u3057\u3001\u5916\u308c\u5024\u306e\u691c\u8a3c\u3092\u3057\u305f\u3002\u66dc\u65e5\u306b\u3088\u3063\u3066\u307e\u3061\u307e\u3061\u3060\u304c20000\u8d85\u306f\u5916\u308c\u5024\u6271\u3044\u3067\u3088\u3055\u305d\u3046\u3002\")","db7b17cb":"#\u66dc\u65e5\u3054\u3068\u306e\u3070\u3089\u3064\u304d\u3092\u78ba\u8a8d\nsales_DayOfWeek_df=pd.DataFrame({\"Avg SalesPerDoW\":train2[\"Sales\"],\"DayOfWeek\":train2[\"DayOfWeek\"]})\nAvgSalesDayOfWeek=sales_DayOfWeek_df.groupby(\"DayOfWeek\").mean()\nprint(\"\u66dc\u65e5\u3054\u3068\u306b\u4e00\u5b9a\u306e\u3070\u3089\u3064\u304d\u304c\u3042\u308b\u3002\")\nprint(plt.plot(AvgSalesDayOfWeek, marker = \"o\"))","a9b2d75b":"#\u5916\u308c\u5024\u3092\u7279\u5b9a\u306e\u5024\u3067\u7f6e\u304d\u63db\u3048\u308b(Clipping)\ntrain2[\"Sales\"]=train2[\"Sales\"].apply(lambda x: 20000 if x>20000 else x)","e1111328":"#Date\u306e\u60c5\u5831\u3092\u6d3b\u7528\u3059\u308b\ntrain2[\"Date\"]=pd.to_datetime(train2[\"Date\"])\ntrain2[\"Year\"]=train2[\"Date\"].dt.year\ntrain2[\"Month\"]=train2[\"Date\"].dt.month\ntrain2[\"Day\"]=train2[\"Date\"].dt.day\n#\u305d\u306e\u6708\u306e\u7b2c\u4f55\u9031\u304b\u306b\u7121\u7406\u3084\u308a\u8aad\u307f\u66ff\u3048\u308b\ntrain2[\"Week\"]=train2[\"Date\"].dt.week%4\n#\u5b63\u7bc0\u5225\ntrain2[\"Season\"] = np.where(train2[\"Month\"].isin([3,4]),\"Spring\",np.where(train2[\"Month\"].isin([5,6,7,8]), \"Summer\",np.where(train2[\"Month\"].isin ([9,10,11]),\"Fall\",np.where(train2[\"Month\"].isin ([12,1,2]),\"Winter\",\"None\"))))","254dbfbd":"#\u6708\u5225\u58f2\u4e0a\u9ad8\u306e\u3070\u3089\u3064\u304d\u3092\u78ba\u8a8d\nsales_time_df=pd.DataFrame({\"Avg SalesPerMonth\":train2[\"Sales\"],\"Month\":train2[\"Month\"]})\nAvgCustomerperMonth=sales_time_df.groupby(\"Month\").mean()\nprint(\"\u6708\u3054\u3068\u306b\u4e00\u5b9a\u306e\u3070\u3089\u3064\u304d\u304c\u3042\u308b\u3002\")\nprint(plt.plot(AvgCustomerperMonth, marker = \"o\"))","292e7d88":"train_store2=store2.merge(train2,on=[\"Store\"],how=\"inner\")","ce9a19df":"#store type\u5225\u306e\u3070\u3089\u3064\u304d\u3092\u78ba\u8a8d\nstype_df=pd.DataFrame({\"Avg storetype\":train_store2[\"Sales\"],\"StoreType\":train_store2[\"StoreType\"]})\nAvgstoretype=stype_df.groupby(\"StoreType\").mean()\nprint(\"\u300cb\u300d\u3060\u3051\u660e\u3089\u304b\u306b\u9ad8\u3044\")\nprint(plt.plot(Avgstoretype, marker = \"o\"))","1c117fac":"#Assortment\u5225\u306e\u3070\u3089\u3064\u304d\u3092\u78ba\u8a8d\nAssortment_df=pd.DataFrame({\"Avg Assortment\":train_store2[\"Sales\"],\"Assortment\":train_store2[\"Assortment\"]})\nAvgAssortment=Assortment_df.groupby(\"Assortment\").mean()\nprint(\"\u300cb\u300d\u304c\u9ad8\u3044\u304c\u5404\u3005\u5dee\u5206\u304c\u3042\u308b\")\nprint(plt.plot(AvgAssortment, marker = \"o\"))","21cd8f6c":"#kaggle\u306e\u30ab\u30fc\u30cd\u30eb\u3067\u306f\u52d5\u304b\u306a\u3044\u3001why...\n\n#StateHoliday\u5225\u306e\u3070\u3089\u3064\u304d\u3092\u78ba\u8a8d\n#StateHoliday_df=pd.DataFrame({\"Avg StateHoliday\":train_store2[\"Sales\"],\"StateHoliday\":train_store2[\"StateHoliday\"]})\n#AvgStateHoliday=StateHoliday_df.groupby(\"StateHoliday\").mean()\n#print(\"\u300c0\u300d\u304c\u9ad8\u304f\u3001\u3042\u3068\u306f\u4e00\u5f8b\u306b\u4f4e\u3044\")\n#print(plt.plot(AvgStateHoliday, marker = \"o\"))","89c6a82e":"#Promo2\u5225\u306e\u3070\u3089\u3064\u304d\u3092\u78ba\u8a8d\nPromo2_df=pd.DataFrame({\"Avg Promo2\":train_store2[\"Sales\"],\"Promo2\":train_store2[\"Promo2\"]})\nAvgPromo2=Promo2_df.groupby(\"Promo2\").mean()\nprint(\"\u4ee5\u5916\u306b\u3082\u300c0\u300d\u304c\u9ad8\u3044\")\nprint(plt.plot(AvgPromo2, marker = \"o\"))","9e1ac646":"#\u6b20\u640d\u5024\u306b\u306a\u3063\u3066\u3044\u308b\u7b87\u6240\u306f\u4e00\u65e6\u7121\u8996\u3059\u308b\ntrain_store2.info()","e899ff33":"drop_list = [\"CompetitionDistance\",\"CompetitionOpenSinceMonth\",\"CompetitionOpenSinceYear\",\"Promo2SinceWeek\",\"Promo2SinceWeek\",\"Promo2SinceYear\",\"PromoInterval\"]\nfeature = train_store2.drop(drop_list, axis=1)","7c05b2fe":"#\u7279\u5fb4\u91cf\u306e\u69cb\u6210\n#\"Month\"\u306f12\u6708\u304b\u305d\u308c\u4ee5\u5916\u304b\nfeature[\"Month\"] = feature[\"Month\"].apply(lambda x: 1 if x==12 else 0)\n#\"Assortment\"\u306f\u300cb\u300d\u304b\u305d\u308c\u4ee5\u5916\u304b   ##\u30c0\u30df\u30fc\u5909\u6570\u306b\u3059\u308b\n#feature = pd.concat([feature.drop('Assortment', axis=1), pd.get_dummies(feature['Assortment']).iloc[:, :-1]], axis=1)\nfeature[\"Assortment\"] = feature[\"Assortment\"].apply(lambda x: 1 if x==\"b\" else 0)\n#\"DayOfWeek\"\u306f\u65e5\u66dc(\u300c7\u300d)\u304b\u305d\u308c\u4ee5\u5916\u304b\nfeature[\"DayOfWeek\"] = feature[\"DayOfWeek\"].apply(lambda x: 1 if x==7 else 0)\n#\"Store Type\"\u306f\u300cb\u300d\u304b\u305d\u308c\u4ee5\u5916\u304b\nfeature[\"StoreType\"] = feature[\"StoreType\"].apply(lambda x: 1 if x==\"b\" else 0)\n#\"StateHoliday\"\u306f\u300c\"0\"\u300d\u304b\u305d\u308c\u4ee5\u5916\u304b\nfeature[\"StateHoliday\"] = feature[\"StateHoliday\"].apply(lambda x: 0 if x==\"0\" else 1)","82e94baa":"import collections\ncollections.Counter(train_store2[\"Assortment\"])","2bfb4a41":"#\u7d30\u304b\u3044\u5909\u6570\u3092\u843d\u3068\u3059\n#\"Week\"\u306f\u6b8b\u3059\ndrop_list2 = [\"Store\",\"Date\",\"Year\",\"Day\",\"Season\"]\nfeature2 = feature.drop(drop_list2, axis=1)","bc27a375":"feature2.head()","4ad805ef":"#\u56de\u5e30\u7528\u306e\u5909\u6570\u3092\u4f5c\u6210\ny_feature2 = feature[\"Sales\"]\nx_feature2 = feature2.drop([\"Sales\",\"Customers\"],axis=1)\nx_feature2 = feature2.drop([\"Sales\",\"Customers\"],axis=1)\nx_feature2[\"Open_stHoli\"] = feature[\"Open\"]*x_feature2[\"StateHoliday\"]","eb5408d5":"print(x_feature2.head())\nprint(x_feature2.shape)","613ff65b":"#\uff13\uff0e\u7dda\u5f62\u56de\u5e30\u3059\u308b\nfrom sklearn.linear_model import LinearRegression\n\n#\u7dda\u5f62\u56de\u5e30\u5b9f\u884c\uff08\u666e\u901a\u306e\u91cd\u56de\u5e30\uff09\nmodel_0 = LinearRegression()\nmodel_0.fit(x_feature2,y_feature2)","9dc8f785":"coeficient = pd.DataFrame({\"\u5909\u6570\":x_feature2.columns,\"\u4fc2\u6570\":model_0.coef_})\nprint(coeficient)\nprint({\"\u5b9a\u6570\u9805\":model_0.intercept_})","7ecdb6e1":"pred = pd.DataFrame({\"Sales_pred\":model_0.predict(x_feature2)})","a2696986":"from sklearn.metrics import mean_squared_error\n#\u5404fold\u306e\u30b9\u30b3\u30a2\u3092\u4fdd\u5b58\u3059\u308b\u30ea\u30b9\u30c8\nscores_RMSPE = []\n\n#\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3046\n#\u5b66\u7fd2\u30c7\u30fc\u30bf\u30924\u3064\u306b\u5206\u5272\u3057\u3001\u3046\u30611\u3064\u3092\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u3068\u3059\u308b\u3053\u3068\u3092\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u3092\u5909\u3048\u3066\u7e70\u308a\u8fd4\u3059\nkf = KFold(n_splits=4, shuffle =True, random_state=72)\n\nfor tr_idx, va_idx in kf.split(x_feature2):\n    #\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u306b\u5206\u3051\u308b\n    tr_x, va_x = x_feature2.iloc[tr_idx], x_feature2.iloc[va_idx]\n    tr_y, va_y = y_feature2.iloc[tr_idx], y_feature2.iloc[va_idx]\n    \n    #\u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\u3092\u884c\u3046 \n    model_cv = LinearRegression()\n    model_cv.fit(tr_x,tr_y)\n    \n    #\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\u5024\u3092\u78ba\u7387\u3067\u51fa\u529b\u3059\u308b\n    va_pred = pd.DataFrame({\"Sales_pred\":model_cv.predict(va_x)})\n    \n    #\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u3067\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3059\u308b\n    RMSPE = gen_RMSPE(va_pred[\"Sales_pred\"], va_y)\n        \n    #\u305d\u306efold\u30b9\u30b3\u30a2\u3092\u4fdd\u6301\u3059\u308b\n    scores_RMSPE.append(RMSPE)","87f50670":"scores_RMSPE","b5b05c9e":"#\u6b8b\u5dee\u5206\u6790\n#\u4ee5\u4e0b\u3001\u30b3\u30f3\u30da\u306e\u8da3\u65e8\u306b\u6cbf\u3063\u3066Sales\u304c0\u306e\u5148\u306f\u5bfe\u8c61\u5916\u3068\u3059\u308b\nfeature[\"pred_Sales\"] = pred\nfeature_analysis = feature[feature[\"Sales\"]>0]\nfeature_analysis[\"Residuals\"] = np.power((feature_analysis[\"pred_Sales\"] - feature_analysis[\"Sales\"])\/feature_analysis[\"Sales\"], 2)\nfeature_analysis.head(30)","0274a93c":"#\u6b8b\u5dee\u306e\u5927\u304d\u3044\u30ec\u30b3\u30fc\u30c9\u3092\u62bd\u51fa\u3059\u308b\nres_anal = feature_analysis.sort_values('Residuals',ascending=False)\nres_anal.head(30)","a48fee10":"# \u6765\u5ba2\u6570\uff08Customers\uff09\u306e\u60c5\u5831\u3092\u751f\u304b\u3059\u3053\u3068\u3092\u8003\u3048\u308b\u3002\u6765\u5ba2\u6570\u3068\u5358\u4fa1\u3092\u5225\u306b\u4e88\u6e2c\u3057\u3066\u3001\u58f2\u4e0a\uff1d\u6765\u5ba2\u6570\u00d7\u5358\u4fa1\u3068\u3057\u3066\u4e88\u6e2c\u3059\u308b\u3002","dfd31913":"# \u3084\u3063\u305f\u3053\u3068\n* train, test\u306b\u5bfe\u3057\u3066\u3001store\u306e\u60c5\u5831\u3092\u9023\u7d50\u3057\u3001\u5168\u3066\u306e\u5909\u6570\uff08\"Store\"\u306f\u9664\u304f\uff09\u3092\u4f7f\u7528\u3057\u3066\u3001\u7dda\u5f62\u56de\u5e30\u30e2\u30c7\u30eb\u3092\u9069\u7528\u3057\u305f\u3002\n* score\u306f0.43091\u3060\u3063\u305f\u3002\n* \u6761\u4ef6\u4ed8\u304d\u5358\u7d14\u5e73\u5747\uff08\u4e94\u5341\u5d50\u3055\u3093\u306e\u4f8b\uff09\u3067\u306e\u30b9\u30b3\u30a2\u304c0.14283\u306a\u306e\u3067\u3001\u7dda\u5f62\u56de\u5e30\u30e2\u30c7\u30eb\u3067\u3082\u307e\u3060\u307e\u3060\u6539\u5584\u3067\u304d\u308b\u306f\u305a\u3002\u305f\u3060\u3001\"Store\"\u3067\u6761\u4ef6\u4ed8\u3051\u3057\u3066\u5e73\u5747\u3059\u308b\u306e\u304c\u6709\u52b9\u3059\u304e\u308b\u6c17\u3082\u3059\u308b\u3002\n* LASSO\u3067\u5909\u6570\u9078\u629e\u3059\u308b\u3002\n* \u6b8b\u5dee\u5206\u6790\u3068\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u308a\u3001\u4e88\u6e2c\u7cbe\u5ea6\u306e\u4f4e\u3044\u30ec\u30b3\u30fc\u30c9\u306e\u7279\u5fb4\u3092\u62bd\u51fa\u3059\u308b\u3002\n* \u6a19\u6e96\u5316\u3057\u3066\u3001\u5909\u6570\u306e\u30b9\u30b1\u30fc\u30eb\u3092\u5408\u308f\u305b\u308b\u3002\n\n\n# \u6b21\u306b\u53d6\u308a\u7d44\u3080\u3053\u3068\n* \u53d6\u308a\u8fbc\u307f\u65b9\u306e\u60aa\u3044\u5909\u6570\uff08\u4f8b\u3048\u3070\u3001CompetitionDistance,CompetitionOpenSinceMonth,CompetitionOpenSinceYear,Promo2SinceWeek,Promo2SinceYear\t\uff09\u306e\u6271\u3044\u3092\u8003\u3048\u308b\u3002\u5358\u7d14\u306b\u843d\u3068\u3057\u3066\u3057\u307e\u3063\u3066\u3082\u3044\u3044\u3068\u601d\u3046\u3002\n* \u6765\u5ba2\u6570\u3068\u5358\u4fa1\u3092\u5225\u306b\u4e88\u6e2c\u3057\u3066\u3001\u58f2\u4e0a\uff1d\u6765\u5ba2\u6570\u00d7\u5358\u4fa1\u3068\u3059\u308b\n* \u65e5\u66dc\u3068\u305d\u308c\u4ee5\u5916\u3067\u30e2\u30c7\u30eb\u3092\u7d44\u3080","1bec98b5":"# \u96d1\u3060\u3063\u305f\u3068\u3053\u308d\u3092\u3061\u3083\u3093\u3068\u3064\u3081\u3066\u3044\u304f\u3002\u307e\u305a\u306f\u5909\u6570\u9078\u629e","9eaaf5c1":"# \u3057\u304d\u308a\u306a\u304a\u3057\n\n\u5c11\u306a\u3044\u5909\u6570\u304b\u3089\u30b9\u30bf\u30fc\u30c8\u3057\u3001\u6b8b\u5dee\u5206\u6790\u3092\u901a\u3058\u3066\u30e2\u30c7\u30eb\u3092\u6539\u826f\u3057\u3066\u3044\u304f\u3002\n\n\u53c2\u8003\uff1ahttps:\/\/www.kaggle.com\/amithanayak\/predict-sales-using-linear-regression","42842578":"# submission_linear_lasso\u306e\u30b9\u30b3\u30a2\u306f0.40623\u3068\u306a\u3063\u305f\u3002\u5c11\u3057\u3060\u3051\u4e0a\u304c\u3063\u305f\u304c\u6839\u672c\u7684\u306a\u6539\u5584\u306f\u306a\u304b\u3063\u305f\u3002","2c0fc036":"\u30e1\u30e2\uff1aSales\u306e\u5c0f\u3055\u3044\u65e5\u306e\u8aa4\u5dee\u304c\u7279\u306b\u5927\u304d\u3044\u3001\u3053\u3053\u3092\u5f53\u3066\u306b\u884c\u304f\u3088\u3046\u306b\u3057\u305f\u3044\u3002"}}