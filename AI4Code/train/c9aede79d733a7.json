{"cell_type":{"8b73fd21":"code","f8cc979d":"code","250d3c0b":"code","50055a8c":"code","58bc2e90":"code","6793b9d6":"code","2eda4c03":"code","c5fdc5d6":"code","9bb86cd3":"code","2a6c3d6e":"code","c704f2e5":"code","3c434bbd":"code","a7aeda2f":"code","5458768b":"code","e66e8c8b":"code","9133d609":"code","d3568d86":"code","e57d6040":"code","1244faa9":"code","c00ed318":"code","21745ddd":"code","24435edd":"code","4e24c2ee":"code","aafe3283":"code","6fc0cbcc":"code","1416bf8f":"code","d59b9ee2":"markdown","6c4686bb":"markdown","48c0de6b":"markdown","1332cd60":"markdown","cebcfccb":"markdown","748ebed1":"markdown","96baefcf":"markdown","d63060eb":"markdown","1d7f135d":"markdown","9adc61fb":"markdown","bdbb1ba6":"markdown","f43636a3":"markdown","7a069b5c":"markdown","f2416cce":"markdown","a31c4e9b":"markdown","771e6c0e":"markdown","f3030a6f":"markdown","4e2bc691":"markdown","ef6b8c32":"markdown"},"source":{"8b73fd21":"import pandas as pd\nimport numpy as np\n\nimport time\n\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.utils import shuffle\n\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.utils.np_utils import to_categorical","f8cc979d":"# Reading the Train and Test Datasets.\ntrain = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")","250d3c0b":"# Let's see the shape of the train and test data\nprint(train.shape, test.shape)","50055a8c":"train.head()","58bc2e90":"fig=plt.figure(figsize=(14,8))\ncolumns = 8\nrows = 3\nfor i in range(1, rows*columns+1):\n    \n    digit_array = train.loc[i, \"pixel0\":]\n    arr = np.array(digit_array)   \n    image_array = np.reshape(arr, (28,28))   \n    \n    \n    fig.add_subplot(rows, columns, i)\n    plt.title(\"Label:\"+train.loc[i,\"label\"].astype(\"str\"))\n    plt.imshow(image_array, cmap=plt.cm.binary)\n    \nplt.show()","6793b9d6":"train.isna().any().any()","2eda4c03":"test.isna().any().any()","c5fdc5d6":"# dividing the data into the input and output features to train make the model learn based on what to take in and what to throw out.\ntrain_X = train.loc[:, \"pixel0\":\"pixel783\"]\ntrain_Y = train.loc[:, \"label\"]\n\ntrain_X = train_X \/ 255.0\ntest_X = test \/ 255.0\n\ntrain_X = train_X.values.reshape(-1,28,28,1)\ntest_X = test_X.values.reshape(-1,28,28,1)\ntrain_Y = to_categorical(train_Y, num_classes = 10)","9bb86cd3":"# Let's see the shape of the train and test data\nprint(train_X.shape, train_Y.shape)","2a6c3d6e":"# Let's make some beautiful plots.\ndef visualize_digit(row):\n    \n    plt.imshow(train_X[row].reshape((28,28)),cmap=plt.cm.binary)\n    plt.title(\"IMAGE LABEL: {}\".format(train.loc[row, \"label\"]))\n\nvisualize_digit(25)    ","c704f2e5":"datagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10, # randomly rotate images in the range (degrees, 0 to 180)\n        fill_mode='nearest',\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally \n        height_shift_range=0.1,  # randomly shift images vertically \n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images","3c434bbd":"# PREVIEW AUGMENTED IMAGES\nplt.figure(figsize=(10,5))\n\nfor i in range(50):  \n    train_X_one = train_X[25,].reshape((1,28,28,1))\n    train_Y_one = train_Y[25,].reshape((1,10))    \n    \n    plt.subplot(5, 10, i+1)\n    X_train2, Y_train2 = datagen.flow(train_X_one,train_Y_one).next()\n    plt.imshow(X_train2[0].reshape((28,28)),cmap=plt.cm.binary)    \n    plt.axis('off')  \n    \n#plt.subplots_adjust(wspace=-0.1, hspace=-0.1)\n\nplt.show()","a7aeda2f":"%%time\ncopy_count=4 #count of new images for 1 image in train data\n\n#create train2 - array of new images\ntrain2=np.empty([copy_count*42000, 785])\nnumber=0\n\nfor n in range(0,42000):\n    \n    #get one image from train data\n    train_X_one = train_X[n,].reshape((1,28,28,1))\n    train_Y_one = train_Y[n,].reshape((1,10))    \n    \n    if n % 1000 == 0 : print(n*copy_count)       \n\n    for i in range(copy_count):  \n        #Generate new image\n        X_train2, Y_train2 = datagen.flow(train_X_one,train_Y_one).next()    \n        #add label to new image\n        X_train2=np.append(X_train2,train.loc[n, \"label\"].astype(int))        \n        #add new image with label to train2\n        train2[number]=X_train2.reshape(1,785)\n        number=number+1       \n","5458768b":"train2.shape","e66e8c8b":"train2=pd.DataFrame(train2)\ntrain2.columns=[str(\"pixel\"+str(x)) for x in range(0,785)]\ntrain2=train2.rename(columns = {'pixel784':'label'}) ","9133d609":"train2","d3568d86":"fig=plt.figure(figsize=(14,8))\ncolumns = 8\nrows = 3\nfor i in range(1, rows*columns+1):\n    \n    digit_array = train2.loc[i-1, \"pixel0\":\"pixel783\"]\n    arr = np.array(digit_array)   \n    image_array = np.reshape(arr, (28,28))   \n    \n    \n    fig.add_subplot(rows, columns, i)\n    plt.title(\"Label:\"+train2.loc[i-1,\"label\"].astype(\"str\"))\n    plt.imshow(image_array, cmap=plt.cm.binary)\n    \nplt.show()","e57d6040":"train_all=pd.concat([train, train2], ignore_index=True)\ndel train,train2\ntrain_all['label']=train_all['label'].astype(int)","1244faa9":"train_all","c00ed318":"train_all=shuffle(train_all)\ntrain_all.head()","21745ddd":"model = RandomForestClassifier(random_state=1, n_jobs=-1)","24435edd":"%%time\nmodel.fit(train_all.loc[:,'pixel0':'pixel783'], train_all.loc[:,'label'])","4e24c2ee":"%%time\ncv=cross_val_score(model, train_all.loc[:,'pixel0':'pixel783'], train_all.loc[:,'label'], cv=5)\nprint(cv, \"RF  mean=\", cv.mean())","aafe3283":"test['Label'] = model.predict(test).astype(int)\n### Add \"ImageId\" as Index+1\ntest['ImageId']=test.index+1\ntest.loc[:,['ImageId','Label']].head()","6fc0cbcc":"test.loc[:,['ImageId','Label']].to_csv('RF_with_DA_sub.csv', index=False)","1416bf8f":"fig=plt.figure(figsize=(14,14))\ncolumns = 7\nrows = 5\nfor i in range(1, rows*columns+1):\n    \n    digit_array = test.loc[i, \"pixel0\":\"pixel783\"]\n    arr = np.array(digit_array)   \n    image_array = np.reshape(arr, (28,28))   \n    \n    \n    fig.add_subplot(rows, columns, i)\n    plt.title(\"Predict:\"+test.loc[i,\"Label\"].astype(\"str\"))\n    plt.imshow(image_array, cmap=plt.cm.binary)\n    \nplt.show()","d59b9ee2":"We have 168000 new images! Great!\n\n### Take a look at our new images","6c4686bb":"### Visulaize a single digit with an array","48c0de6b":"### Submission to Kaggle","1332cd60":"# Random Forest with Data Augmentation\n\nPart 1 - only Random Forest to recognize image - [here](https:\/\/www.kaggle.com\/maxmar\/random-forest-to-recognize-image)\n\nIn this notebook we'll create a lot of images using the method Data Augmentation.","cebcfccb":"#### We will generate 4 new images for 1 image in train data\nYou can change copy_count parametr.","748ebed1":"### Shuffle Data","96baefcf":"### Data Cleaning and Normalization","d63060eb":"## Make prediction","1d7f135d":"## Make Model","9adc61fb":"### Import necessaries","bdbb1ba6":"### Take a look at new generated images example","f43636a3":"#### Check Missing Values","7a069b5c":"### Cross Validation","f2416cce":"#### Model Fit","a31c4e9b":"## Merge train data and Data Augmentation data (train2)","771e6c0e":"### Take a look to result","f3030a6f":"## Generate MOOORE Images\nFor new images i take:\n1. rotation_range=10, # randomly rotate images in the range (degrees, 0 to 180)\n2. zoom_range = 0.1, # Randomly zoom image \n3. width_shift_range=0.1,  # randomly shift images horizontally \n4. height_shift_range=0.1,  # randomly shift images vertically \n\n","4e2bc691":"### Take a look at train data","ef6b8c32":"Looks good)\n\n### Consider upvoting if it was helpful! \ud83d\ude03"}}