{"cell_type":{"1e8cfbed":"code","2d437a19":"code","a5554c54":"code","815712d2":"code","90555b80":"code","5c6da8db":"code","e1317ae4":"code","48f02349":"code","6ed03e94":"code","2f773f8c":"code","a06568de":"code","8cc318ab":"code","54709743":"code","6766910f":"code","bb9868d8":"code","56b8c92d":"code","ff29d691":"markdown","945fd541":"markdown","3c607396":"markdown","3d67a2d1":"markdown","f171e196":"markdown","4d6e710b":"markdown","46d9896f":"markdown","08e70b7c":"markdown","992fabf0":"markdown","dcf59e46":"markdown"},"source":{"1e8cfbed":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2d437a19":"d1 = pd.read_csv(os.path.join(dirname, filename), header=0, parse_dates=[3])\nd1.dtypes","a5554c54":"row, column = d1.shape\nprint(\"Row: \", row)","815712d2":"d1.describe().T","90555b80":"d1.head(10)","5c6da8db":"delta = pd.Timedelta(hours=1)\norder_list = set() # store other rows that relevant to a brushing rows\nshop_query = dict() # to store query for shopid to quickly access\n\ni = 0\nwhile i < row:\n    # if i % 10000 == 0:\n    #     print(i)\n\n    r = d1.iloc[i]\n    end_time = r.event_time + delta\n    previous_time = r.event_time - delta\n    \n    q = shop_query[r.shopid] if r.shopid in shop_query else d1[d1.shopid == r.shopid]\n    shop_query[r.shopid] = q\n\n    q_n = q[q.event_time.between(r.event_time, end_time)]\n    q_p = q[q.event_time.between(previous_time, r.event_time)]\n\n    con_rate_p = len(q_p)\/q_p.userid.nunique()\n    con_rate_n = len(q_n)\/q_n.userid.nunique()\n\n    if con_rate_p >= 3:\n        # order_brushing.append(r.orderid)\n        order_list.update(list(q_p.orderid.unique()))\n    if con_rate_n >= 3:\n        order_list.update(list(q_n.orderid.unique()))\n\n    i+=1\n","e1317ae4":"d2 = d1[d1.orderid.isin(order_list)]","48f02349":"print(d2.shape)\nd2_row, d2_column = d2.shape","6ed03e94":"def find_max(userid_list, user_p_list):\n    max_value = max(user_p_list)\n    maxs_index = []\n    for i, value in enumerate(user_p_list):\n        if value == max_value:\n            maxs_index.append(i)\n    max_user = [ userid_list[i] for i in maxs_index]\n    return max_value, set(max_user)","2f773f8c":"shop_list = dict()\n\ndef add_to_list(shopid, max_tuples):\n    if shopid not in shop_list:\n        shop_list[shopid] = max_tuples\n        return\n    \n    max_value, max_user = shop_list[shopid]\n    max_v, max_u = max_tuples\n    if max_v > max_value:\n        shop_list[shopid] = max_tuples\n    elif max_v == max_value:\n        shop_list[shopid] = (max_value, max_user.union(max_u))\n","a06568de":"d2_uniq_shop = d2.shopid.unique()\nfor shopid in d2_uniq_shop:\n    q = d2[d2.shopid == shopid]\n\n    user_list = q.userid.unique()\n    sum_order = len(q)\n    user_proportion = []\n    for userid in user_list:\n        user_proportion.append(len(q[q.userid == userid])\/sum_order)\n\n    max_value, max_user = find_max(user_list,user_proportion)\n    add_to_list(shopid, (max_value, max_user))","8cc318ab":"unique_shopid = d1.shopid.unique()","54709743":"userid_shopid = []\nfor shopid in unique_shopid:\n    userid = \"0\"\n    if shopid in shop_list:\n        max_value, max_user = shop_list[shopid]\n        userid = \"&\".join([str(u) for u in sorted(list(max_user))])\n    userid_shopid.append(userid)","6766910f":"sms = pd.DataFrame({\n    \"shopid\": unique_shopid,\n    \"userid\": userid_shopid\n})","bb9868d8":"sms[sms.userid != \"0\"]","56b8c92d":"sms.to_csv(\"\/kaggle\/working\/submission.csv\", index=False)","ff29d691":"Define a dictionary to store `shopid` with `userid` and maximum user proportion for that `userid`s","945fd541":"Query data set","3c607396":"Process in brushing order, find `userid` for each case and then put into shop_list","3d67a2d1":"Save submission","f171e196":"Define a function to find all `userid` with highest user proportion.","4d6e710b":"Process `userid` for each `shopid`","46d9896f":"Get unique `shopid`","08e70b7c":"# Order Brushing Solution (Shopee Code League 2020)\n\nThis solution has score 0.98","992fabf0":"Retrieve brushing `orderid` and all relevant `orderid`s\n\n**Warning**: the following cell may run more than 5 minutes.","dcf59e46":"Read dataset and explore some attributes"}}