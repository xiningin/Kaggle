{"cell_type":{"549e28c2":"code","06e9e1ce":"code","2ce1cf67":"code","82619070":"code","a2edd289":"code","ec117c8d":"code","a5d45449":"code","f773ac50":"code","9c554edf":"markdown"},"source":{"549e28c2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","06e9e1ce":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n","2ce1cf67":"df = pd.read_csv(\"..\/input\/sri-lanka-vehicle-prices-dataset\/vehicle_data.csv\")","82619070":"#### Look at the head of the dataframe #######\ndf.head()","a2edd289":"##### Checking the null values ######\ndf.isnull().sum()","ec117c8d":"plt.figure(figsize=(12,6))\nsns.heatmap(df.isnull(),cbar=False,cmap=\"Set1\",yticklabels=False)","a5d45449":"\n######## Lets clean up the Title column ########\n\ndf[\"Title\"] = df[\"Title\"].apply(lambda x:x.split()[:2])\n\n\n###### Now Subtitle column ##############\n\n############## How i did this #################### \n####### Run this seperate cell and look it up whats going on ! #########\n\n######## df[\"Sub_title\"].iloc[5]   ############# \n############ Then use split() method on this ##########\n############ df[\"Sub_title\"].iloc[5].split(',')[-1] ##############\n\n### The final step use apply method on this #####\n\n\n#### Final code look likes  #####\n\ndf[\"Sub_title\"] = df['Sub_title'].apply(lambda x:x.split(',')[-1])\n\n\n\n\n####################### Now look at the price column ##############################\n\n###### Step one remove the spaces of the string #######\n##### Step two use replace() method and fill them into empty string #####\n###### Final step convert into astype of int or float whatever you want ######\n\n\n\ndf[\"Price\"]  = df[\"Price\"].apply(lambda x:x.split()[-1])\ndf[\"Price\"] = df[\"Price\"].apply(lambda x:x.replace(',',''))\ndf['Price'].astype(int)\n\n\n\n\n##################### Look at the null values #################\ndf[df['Edition'].isnull() ==True]\n\n\n\n################ Edition #######################\n\n######### Your choice you can remove Edition column or drop those missing values It's all up to you ! ; #########\n\ndf.drop(axis=1,columns='Edition',inplace=True)\n\n\n\n##### Transmisson run the both cell seperately ##########\n\ndf[df[\"Transmission\"] == \"Other transmission\"].count()[\"Transmission\"]\ndf[\"Transmission\"] = df[\"Transmission\"].apply(lambda x:x.replace(\"Other transmission\",'Other'))\n\n\n\n######### Fuel columns changing the Other fuel type to Others using replace() method ############\n\ndf['Fuel'] = df[\"Fuel\"].apply(lambda x:x.replace(\"Other fuel type\",'Others'))\n\n\n\n################## Capacity columns ############################\n\ndf[\"Capacity\"] = df[\"Capacity\"].apply(lambda x:int(x.split(\" \")[0].replace(',','')))\n\n\n\n################  Mileage column ###############\ndf[\"Mileage\"] = df[\"Mileage\"].apply(lambda x:int(x.split(\" \")[0].replace(\",\",'')))\n\n\n\n\n############################### Location column ################################\n\ndf[\"Location\"] = df[\"Location\"].apply(lambda x:x.strip().split(\",\")[0])\n\n\n\n############ Description column ###############\n## how to read full description use below code ## \ndf[\"Description\"].iloc[9]\n\n\n\n################# Replace Premium member to Premium #####################\ndf[\"Seller_type\"] = df[\"Seller_type\"].apply(lambda x:x.strip().replace(\"-Member\",\"\"))\n\n\n\n############# published_date column ###########\n## converting to datetime object ### ;\n\ndf[\"published_date\"] = pd.to_datetime(df['published_date'])\n\n\n\n##  creating a new column published_year and acesss the year attribute using apply method in python pandas ## \n\ndf[\"published_year\"] = df[\"published_date\"].apply(lambda x:x.year)\n","f773ac50":"###### Now the data look likes ####### after cleaning ######### \ud83d\udca5\ud83d\udca5\n\ndf.head()","9c554edf":"# <center> Import the libraries <\/center>"}}