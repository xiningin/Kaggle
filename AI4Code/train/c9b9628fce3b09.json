{"cell_type":{"2a23029b":"code","793bcdc0":"code","474a0371":"code","03563792":"code","3395faaa":"code","8c444465":"code","2fcdfa00":"code","208b21c5":"code","71e76b3f":"code","797460e6":"code","5d15aeaa":"code","3dfda5f2":"code","c0eb16e8":"code","f01c91b7":"code","366d424d":"code","599ec9bd":"code","44b9ccba":"code","c4015aa6":"code","1f848291":"code","4648afe7":"code","2a0e29ab":"code","7b189398":"code","6dfe7d86":"code","96b4b94f":"code","98010a47":"code","0aad6aa1":"code","fdb3dff5":"code","d8ba26e4":"code","5357d746":"code","3a3d80e1":"code","63ac7506":"code","bf20118e":"code","07c72755":"code","46a5cd9f":"code","30a52e0d":"code","08e62ebb":"markdown","1f88d6d5":"markdown","b1f22ce9":"markdown","eb4a1328":"markdown","dad8b005":"markdown","2ecebd1d":"markdown","a83986d9":"markdown","ac91de57":"markdown","29e78b4f":"markdown","845ee6fd":"markdown","1d7626df":"markdown","cff6c7c9":"markdown","bc6c32ca":"markdown"},"source":{"2a23029b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","793bcdc0":"import numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib.animation import FuncAnimation\nfrom sklearn.datasets import load_boston\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom IPython.display import HTML","474a0371":"data=load_boston()\nprint(data.DESCR)","03563792":"df=pd.DataFrame(data.data,columns=data.feature_names)\ndf.head()","3395faaa":"target=pd.DataFrame(data.target,columns=['target'])\ntarget.head()","8c444465":"df['target']=target\ndf.head()","2fcdfa00":"df.info()","208b21c5":"sns.heatmap(df.isnull(),cmap='viridis')","71e76b3f":"df.describe().T","797460e6":"plt.figure(figsize=(12,10))\nsns.heatmap(df.corr('pearson'),annot=True)","5d15aeaa":"features=list(df.drop('target',axis=1))\ncorr=df.corr('pearson')\n\ncorr_value=[abs(corr[attr]['target']) for attr in features]\ncorr_value","3dfda5f2":"correlation=list(zip(corr_value,features))\ncorrelation\n                 ","c0eb16e8":"correlation.sort(key=lambda x:x[0],reverse=True)\ncorrelation","f01c91b7":"corrs,labels=list(zip((*correlation)))","366d424d":"corrs","599ec9bd":"labels","44b9ccba":"index=np.arange(len(labels))\nplt.figure(figsize=(15,5))\nplt.bar(index,corrs,width=0.5)\nplt.xlabel('Attributes')\nplt.ylabel('Correlation')\nplt.xticks(index,labels)","c4015aa6":"X=df['LSTAT'].values\nY=df['target'].values","1f848291":"x_scaler=MinMaxScaler()\ny_scaler=MinMaxScaler()","4648afe7":"X=x_scaler.fit_transform(X.reshape(-1,1))\nY=y_scaler.fit_transform(Y.reshape(-1,1))","2a0e29ab":"X.shape","7b189398":"X=X[:,-1]\nY=Y[:,-1]\n\nX.shape","6dfe7d86":"X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)","96b4b94f":"X_train.shape","98010a47":"def update(m,x,c,t,learning_rate):\n    grad_m=sum(2*((m*x+c)-t)*x)\n    grad_c=sum(2*((m*x+c)-t))\n    m=m-grad_m*learning_rate\n    c=c-grad_c*learning_rate\n    return m,c","0aad6aa1":"def error(m,x,c,t):\n    n=x.shape[0]\n    error_val=(1\/n)*sum(np.power(((m*x+c)-t),2))\n    return error_val","fdb3dff5":"def gradient_descent(init_m,init_c,x,t,lr,iterations,error_th):\n    m=init_m\n    c=init_c\n    error_values=list()\n    mc_values=list()\n    for i in range(iterations):\n        e=error(m,x,c,t)\n        if e<error_th:\n            print('stopping grad descent')\n            break\n        error_values.append(e)\n        m,c=update(m,x,c,t,lr)\n        mc_values.append((m,c))\n    return m,c,error_values,mc_values","d8ba26e4":"%%time\ninit_m=0.9\ninit_c=0\nlearning_rate=0.001\niterations=250\nerror_th=0.001\n\nm,c,error_values,mc_values=gradient_descent(init_m,init_c,X_train,y_train,learning_rate,iterations,error_th)","5357d746":"plt.scatter(X_train,y_train,color='b')\nplt.plot(X_train,(m*X_train +c),color='r')","3a3d80e1":"len(mc_values)","63ac7506":"mc_values_anim=mc_values[0:250]\n","bf20118e":"fig,ax=plt.subplots()\n\nln,=plt.plot([],[],'ro-',animated=True)\n\ndef init():\n    plt.scatter(X_test,y_test,color='red')\n    ax.set_xlim(0,1.0)\n    ax.set_ylim(0,1.0)\n    return ln,\n\n\ndef update_frame(frame):\n    m,c=mc_values_anim[frame]\n    x1,y1=-1.5,m*-1.5+c\n    x2,y2=1.5,m*1.5+c   \n    ln.set_data([x1,x2],[y1,y2])\n    return ln,\n\n\nanim=FuncAnimation(fig,update_frame,frames=range(len(mc_values_anim)),\n                  init_func=init,blit=True)\n\nHTML(anim.to_html5_video())\n","07c72755":"plt.plot(np.arange(len(error_values)),error_values)\nplt.xlabel('iterations')\nplt.ylabel('error')","46a5cd9f":"predicted=(m*X_test)+c\nmse=mean_squared_error(y_test,predicted)\n\nfinal=pd.DataFrame(list(zip(X_test,y_test,predicted)),columns=['x','target_y','predicted_y'])\nfinal.head()","30a52e0d":"predicted=np.array(predicted.reshape(-1,1))\n\nX_test=X_test.reshape(-1,1)\ny_test=y_test.reshape(-1,1)\n\nxtest_scaled=x_scaler.inverse_transform(X_test)\nytest_scaled=y_scaler.inverse_transform(y_test)\n\npredicted_scaled=y_scaler.inverse_transform(predicted)\n\nxtest_scaled=xtest_scaled[:,-1]\nytest_scaled=ytest_scaled[:,-1]\npredicted_scaled=predicted_scaled[:,-1]\n\np=pd.DataFrame(list(zip(xtest_scaled,ytest_scaled,predicted_scaled)),columns=['orig_x','orig_y','predicted'])\n\np.head()","08e62ebb":"# Describing the dataset","1f88d6d5":"# Change in error with iteration","b1f22ce9":"# Obtaining predicted values by applying inverse trasform","eb4a1328":"# Training the model and obtaining the final slope and intercept values","dad8b005":"# Checking correalation among features","2ecebd1d":"# Showing fit on training data","a83986d9":"# We are going to use the 'LSTAT' column for visualization.","ac91de57":"# Preparing Animation","29e78b4f":"# Import required Libraries","845ee6fd":"# Load the data","1d7626df":"# Visualizations","cff6c7c9":"# As we can see above **'LSTAT'** column is the most correlated to the 'target' column","bc6c32ca":"# Checking for null values"}}