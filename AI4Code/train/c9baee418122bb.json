{"cell_type":{"81c722f0":"code","75bfa47d":"code","10140805":"code","55112fa6":"code","072a4ba4":"code","8d917e1a":"code","cf5f4404":"code","d1b65021":"code","f67acb3c":"code","4e9582f8":"code","68a7bdd5":"code","7d6b2a2a":"code","240144b0":"code","799917f4":"code","b42516ef":"code","d5b84c96":"code","9ebc59d4":"code","5fa5b973":"code","595621b5":"code","4637c81e":"code","e34413a8":"code","882c416f":"code","b6ad412e":"code","5f763ea7":"code","2731dea6":"code","cd04d0b4":"code","87e8cb54":"code","11ae1fd8":"code","7849306f":"code","d9a5669a":"code","1f77e20f":"code","d00bc420":"code","fb0c0649":"code","e6e47ef1":"code","10004f43":"code","abd4cefd":"markdown","91cc0e86":"markdown","781732bc":"markdown","fa90393a":"markdown","b6ac04a2":"markdown","2ae7a00c":"markdown","92e2dfd6":"markdown","09caa7cf":"markdown","fb85ce65":"markdown","721f7165":"markdown","0dc5f614":"markdown","257752f1":"markdown","0ca6dfc5":"markdown","b7f25398":"markdown","0342af20":"markdown","c0b156b2":"markdown","9d050245":"markdown","55a726a8":"markdown","4600503a":"markdown","cd7d8250":"markdown","0d1c8011":"markdown","49c3f9c6":"markdown","3829ae9e":"markdown"},"source":{"81c722f0":"import requests\nfrom io import BytesIO\nimport matplotlib.pyplot as plt\nimport torch\nimport torch.nn as nn\nimport torchvision\nfrom torchvision import transforms as pth_transforms\nimport numpy as np\nfrom PIL import Image\nimport os\nimport numpy as np\nimport pandas as pd\nimport cv2\nfrom tqdm import tqdm","75bfa47d":"patch_size = 8  #8\nmodel = torch.hub.load('facebookresearch\/dino:main', 'dino_vits16')\n#device = torch.device(\"cuda\") if torch.cuda.is_available() else torch.device(\"cpu\")\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")","10140805":"for p in model.parameters():\n    p.requires_grad = False\n\nif torch.cuda.is_available():\n    model.cuda()\n    \nmodel.eval()\nmodel.to(device)","55112fa6":"transform = pth_transforms.Compose([\n    pth_transforms.ToTensor(),\n    pth_transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225)),\n])","072a4ba4":"!mkdir dandelion\n!mkdir other\n\ndata_dir='..\/input\/dandelionimages\/Images'\nNames0 = os.listdir(data_dir)\nNames=sorted(Names0)\nprint(Names)","8d917e1a":"N=[0,1]\nnormal_mapping=dict(zip(Names,N))\nreverse_mapping=dict(zip(N,Names))","cf5f4404":"for name in Names:\n    path0=os.path.join(data_dir,name)\n    \n    for im in tqdm(os.listdir(path0)):\n        \n        path1=os.path.join(path0,im)\n        img_npy = cv2.imread(path1)\n        img_npy = cv2.resize(img_npy,dsize=(600,600),interpolation=cv2.INTER_CUBIC)    ####\n        img = transform(img_npy)\n        w, h = img.shape[1] - img.shape[1] % patch_size, img.shape[2] - img.shape[2] % patch_size\n        img = img[:, :w, :h].unsqueeze(0)\n        w_featmap = img.shape[-2] \/\/ patch_size\n        h_featmap = img.shape[-1] \/\/ patch_size\n        attentions = model.get_last_selfattention(img)    ###img.cuda()\n        \n        nh = attentions.shape[1]\n        attentions = attentions[0, :, 0, 1:].reshape(nh, -1)\n        val, idx = torch.sort(attentions)\n        val \/= torch.sum(val, dim=1, keepdim=True)\n        cumval = torch.cumsum(val, dim=1)\n\n        threshold = 0.6\n        th_attn = cumval > (1 - threshold)\n        idx2 = torch.argsort(idx)\n\n        for head in range(nh):\n            th_attn[head] = th_attn[head][idx2[head]]\n\n        th_attn = th_attn.reshape(nh, w_featmap\/\/2, h_featmap\/\/2).float()\n        th_attn = nn.functional.interpolate(th_attn.unsqueeze(0), scale_factor=patch_size, mode=\"nearest\")[0].cpu().numpy()\n        attentions = attentions.reshape(nh, w_featmap\/\/2, h_featmap\/\/2)\n        attentions = nn.functional.interpolate(attentions.unsqueeze(0), scale_factor=patch_size, mode=\"nearest\")[0].cpu().numpy()\n        attentions_mean = np.mean(attentions, axis=0)\n\n        path2=os.path.join(name,im[0:-4]+'.png')\n        #print(path2)\n        #plt.imshow(attentions_mean)\n        cv2.imwrite(path2,attentions_mean*2000)     ### \n        #plt.show()\n        \n        #img2=cv2.imread(path2,cv2.IMREAD_GRAYSCALE)\n        #print(img2.shape)\n        #plt.imshow(img2)\n        #plt.show()","d1b65021":"import tensorflow as tf \nimport numpy as np \nimport matplotlib.pyplot as plt \ntf.__version__","f67acb3c":"img_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n                            #rotation_range=90,\n                            brightness_range=(0.5,1), \n                            #shear_range=0.2, \n                            #zoom_range=0.2,\n                            channel_shift_range=0.2,\n                            horizontal_flip=True,\n                            vertical_flip=True,\n                            rescale=1.\/255,\n                            validation_split=0.3)","4e9582f8":"root_dir = '\/kaggle\/working'   #Transfer learning of DINO attention map image\n\nimg_generator_flow_train = img_generator.flow_from_directory(\n    directory=root_dir,\n    target_size=(224, 224),\n    batch_size=16,\n    shuffle=True,\n    subset=\"training\")\n\nimg_generator_flow_valid = img_generator.flow_from_directory(\n    directory=root_dir,\n    target_size=(224, 224),\n    batch_size=16,\n    shuffle=True,\n    subset=\"validation\")","68a7bdd5":"imgs, labels = next(iter(img_generator_flow_train))\nprint(labels)","7d6b2a2a":"for img, label in zip(imgs, labels):\n    print(img.shape)\n    plt.imshow(img)\n    value=np.argmax(label)\n    plt.title(reverse_mapping[value])\n    plt.show()","240144b0":"base_model = tf.keras.applications.InceptionV3(input_shape=(224,224,3),\n                                               include_top=False,\n                                               weights = \"imagenet\"\n                                               )","799917f4":"base_model.trainable = False","b42516ef":"model = tf.keras.Sequential([\n    base_model,\n    tf.keras.layers.MaxPooling2D(),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(2, activation=\"softmax\")\n])","d5b84c96":"model.summary()","9ebc59d4":"model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate = 0.001),\n              loss = tf.keras.losses.CategoricalCrossentropy(),\n              metrics = [tf.keras.metrics.CategoricalAccuracy()])","5fa5b973":"model.fit(img_generator_flow_train, \n          validation_data=img_generator_flow_valid, \n          steps_per_epoch=8, epochs=32) #8,32","595621b5":"# Visualise train \/ Valid Accuracy\nplt.plot(model.history.history[\"categorical_accuracy\"], c=\"r\", label=\"train_accuracy\")\nplt.plot(model.history.history[\"val_categorical_accuracy\"], c=\"b\", label=\"test_accuracy\")\nplt.legend(loc=\"upper left\")\nplt.show()","4637c81e":"# Visualise train \/ Valid Loss\nplt.plot(model.history.history[\"loss\"], c=\"r\", label=\"train_loss\")\nplt.plot(model.history.history[\"val_loss\"], c=\"b\", label=\"test_loss\")\nplt.legend(loc=\"upper left\")\nplt.show()","e34413a8":"imgs, labels = next(iter(img_generator_flow_valid))","882c416f":"print(labels)","b6ad412e":"for layer in model.layers:\n    print(layer.name)","5f763ea7":"base_model = model.layers[0]","2731dea6":"tf.keras.utils.plot_model(base_model, show_shapes=True, show_layer_names=True)","cd04d0b4":"for layer in base_model.layers:\n    print(layer.name)","87e8cb54":"last_conv_layer_name = \"mixed10\"\nclassifier_layer_names = [layer.name for layer in model.layers][1:]","11ae1fd8":"# We start by setting up the dependencies we will use\n\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\n\n# Display\nfrom IPython.display import Image\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm","7849306f":"# The Grad-CAM algorithm\ndef get_img_array(img_path, size):\n    # `img` is a PIL image of size 299x299\n    img = keras.preprocessing.image.load_img(img_path, target_size=size)\n    # `array` is a float32 Numpy array of shape (299, 299, 3)\n    array = keras.preprocessing.image.img_to_array(img)\n    # We add a dimension to transform our array into a \"batch\"\n    # of size (1, 299, 299, 3)\n    array = np.expand_dims(array, axis=0)\n    return array\n\n\ndef make_gradcam_heatmap(\n    img_array, base_model, model, last_conv_layer_name, classifier_layer_names):\n    # First, we create a model that maps the input image to the activations\n    # of the last conv layer\n    last_conv_layer = base_model.get_layer(last_conv_layer_name)\n    last_conv_layer_model = keras.Model(base_model.inputs, last_conv_layer.output)\n\n    # Second, we create a model that maps the activations of the last conv\n    # layer to the final class predictions\n    classifier_input = keras.Input(shape=last_conv_layer.output.shape[1:])\n    x = classifier_input\n    for layer_name in classifier_layer_names:\n        x = model.get_layer(layer_name)(x)\n    classifier_model = keras.Model(classifier_input, x)\n\n    # Then, we compute the gradient of the top predicted class for our input image\n    # with respect to the activations of the last conv layer\n    with tf.GradientTape() as tape:\n        # Compute activations of the last conv layer and make the tape watch it\n        last_conv_layer_output = last_conv_layer_model(img_array)\n        tape.watch(last_conv_layer_output)\n        # Compute class predictions\n        preds = classifier_model(last_conv_layer_output)\n        top_pred_index = tf.argmax(preds[0])\n        top_class_channel = preds[:, top_pred_index]\n\n    # This is the gradient of the top predicted class with regard to\n    # the output feature map of the last conv layer\n    grads = tape.gradient(top_class_channel, last_conv_layer_output)\n\n    # This is a vector where each entry is the mean intensity of the gradient\n    # over a specific feature map channel\n    pooled_grads = tf.reduce_mean(grads, axis=(0, 1, 2))\n\n    # We multiply each channel in the feature map array\n    # by \"how important this channel is\" with regard to the top predicted class\n    last_conv_layer_output = last_conv_layer_output.numpy()[0]\n    pooled_grads = pooled_grads.numpy()\n    for i in range(pooled_grads.shape[-1]):\n        last_conv_layer_output[:, :, i] *= pooled_grads[i]\n\n    # The channel-wise mean of the resulting feature map\n    # is our heatmap of class activation\n    heatmap = np.mean(last_conv_layer_output, axis=-1)\n\n    # For visualization purpose, we will also normalize the heatmap between 0 & 1\n    heatmap = np.maximum(heatmap, 0) \/ np.max(heatmap)\n    return heatmap","d9a5669a":"# Print what the top predicted class is\npreds = model.predict(imgs)\npred_labels = tf.argmax(preds, axis = -1)\n\nprint(\"Prediction output:\", preds)\nprint(\"Predicted label:\", pred_labels)","1f77e20f":"# Generate class activation heatmap\nheatmaps = []\n\nfor img in imgs:\n    heatmap = make_gradcam_heatmap(\n    tf.expand_dims(img,axis=0),\n        base_model, model, \n        last_conv_layer_name, \n        classifier_layer_names\n  )\n    heatmaps.append(heatmap)\n\n# Display heatmap\nplt.matshow(heatmaps[0])\nplt.show()\n","d00bc420":"from pathlib import Path\n\nfor img, pred_label, true_label, heatmap in zip(imgs, pred_labels, labels, heatmaps): \n    # We rescale heatmap to a range 0-255\n    heatmap = np.uint8(255 * heatmap)\n\n    # We use jet colormap to colorize heatmap\n    jet = cm.get_cmap(\"jet\")\n\n    # We use RGB values of the colormap\n    jet_colors = jet(np.arange(256))[:, :3]\n    jet_heatmap = jet_colors[heatmap]\n\n    # We create an image with RGB colorized heatmap\n    jet_heatmap = keras.preprocessing.image.array_to_img(jet_heatmap)\n    jet_heatmap = jet_heatmap.resize((img.shape[1], img.shape[0]))\n    jet_heatmap = keras.preprocessing.image.img_to_array(jet_heatmap)\n\n    # Superimpose the heatmap on original image\n    superimposed_img = jet_heatmap * 0.003 + img\n    superimposed_img = keras.preprocessing.image.array_to_img(superimposed_img)\n\n    # Save the superimposed image\n    save_path = \"saved_img.jpg\"\n    superimposed_img.save(save_path)\n\n    # Display Grad CAM\n    pred_file_path = np.argmax(img_generator_flow_valid.labels == pred_label)\n    pred_label_name = Path(img_generator_flow_valid.filepaths[pred_file_path]).parent.name\n\n    true_file_path = np.argmax(img_generator_flow_valid.labels == tf.argmax(true_label))\n    true_label_name = Path(img_generator_flow_valid.filepaths[true_file_path]).parent.name\n\n    print(\"Predicted label:\",pred_label_name)\n    print(\"True label:\", true_label_name)\n\n    display(Image(save_path))","fb0c0649":"LABEL=[]\nfor item in labels:\n    LABEL+=[np.argmax(item)]\nPRED=pred_labels.numpy().tolist()","e6e47ef1":"print(LABEL)\nprint(PRED)","10004f43":"from sklearn.metrics import classification_report\nprint(classification_report(LABEL,PRED))","abd4cefd":"### Create heatmap","91cc0e86":"### Import a pretrained model\nhttps:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/applications\/InceptionV3","781732bc":"### Create model","fa90393a":"### Predicted label and heatmap","b6ac04a2":"# Dandelion DINO Attention Image Transfer Learning \n","2ae7a00c":"## Transfer Learning ","92e2dfd6":"## compare the result with Dandelion Image Transfer Learning\nhttps:\/\/www.kaggle.com\/stpeteishii\/dandelion-image-transfer-learning","09caa7cf":"### Set the weights of the imported model","fb85ce65":"### Predict","721f7165":"### make_gradcam_heatmap","0dc5f614":"## Interpretation with Grad Cam","257752f1":"### Prepare ImageDataGenerator\nhttps:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/preprocessing\/image\/ImageDataGenerator","0ca6dfc5":"### Create imgs and labels","b7f25398":"# Transfer learning of DINO attention map image","0342af20":"### Compile model","c0b156b2":"![Upvote!](https:\/\/img.shields.io\/badge\/Upvote-If%20you%20like%20my%20work-07b3c8?style=for-the-badge&logo=kaggle)<br\/>\nhttps:\/\/www.kaggle.com\/stpeteishii\/dandelion-dino-attention-transfer-learning","9d050245":"### Visualize a batch of images","55a726a8":"## Preprocessing with ImageDataGenerator","4600503a":"### Prepare img_generator_flow","cd7d8250":"# Create DINO attention map images and saved\nhttps:\/\/www.kaggle.com\/stpeteishii\/dandelion-image-dino-vision-transformers","0d1c8011":"### Visualize accuracy and loss","49c3f9c6":"### Work Flow\n- Create DINO attention map images and saved\n- Transfer learning using DINO attention map image","3829ae9e":"### Train the model"}}