{"cell_type":{"66649c4c":"code","ae33adc8":"code","36535bee":"code","0b4b465b":"code","8816823b":"code","345ebb27":"code","2089f64b":"code","be733f6c":"code","5b995669":"code","aee70b3a":"code","9e144c7c":"code","cf63219d":"code","5b5fd8fc":"code","3130deab":"code","d1f22281":"code","76cc201f":"code","0412962b":"code","af3fa021":"code","d962f1be":"code","65b39606":"code","514b76f4":"code","13179a96":"code","9d4fe65c":"code","b8071ed8":"code","df8a5b5e":"code","d9710f30":"code","f3a8bc5a":"code","d370667c":"code","3821abc6":"code","93097a95":"code","c4e76115":"code","151ca9ea":"code","2e9ff445":"code","f4133628":"code","33066628":"code","a30fef13":"code","6ec483f3":"code","0ea3a0cb":"markdown","bbdabe21":"markdown","e55c90ca":"markdown"},"source":{"66649c4c":"# Todas as importa\u00e7\u00f5es\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")","ae33adc8":"# Todos os par\u00e2metros\nTRAIN_PATH = '\/kaggle\/input\/titanic\/train.csv'\nTEST_PATH = '\/kaggle\/input\/titanic\/test.csv'\nGENDER_SUBM = '\/kaggle\/input\/titanic\/gender_submission.csv'","36535bee":"# Execucao\ntrain = pd.read_csv(TRAIN_PATH)\ntrain.head()","0b4b465b":"# Variavel idade contem valores ausentes, Cabin e Embarked tambem. Todos deverao ser tratados\n# 891 passageiros para treinamento\ntrain.info()","8816823b":"test = pd.read_csv(TEST_PATH)\ntest.head()","345ebb27":"# Teste nao contem a variavel survived pois sera o que vamos prever.\ntest.info()","2089f64b":"# Este sera o arquivo a ser submetido. Temos acima o conjunto de testes com varios IDS,\n# e para submissao no Kaggle devemos colocar o id de cada um e se o mesmo sobreviveu ou nao.\nsubmission = pd.read_csv(GENDER_SUBM)\nsubmission.head()","be733f6c":"# Primeiramente vamos tratar os dados de entrada\n# Algumas variaveis parecem muito \"sujas\" para serem alimentadas j\u00e1 de inicio\n\nNUM_COLS = ['Pclass', 'Age', 'SibSp', 'Parch', 'Fare']\nCAT_COLS = ['Sex', 'Cabin', 'Embarked', 'Ticket']\nTARGET_COL = 'Survived'\ntrain.head()","5b995669":"# Investigando a distribuicao das variaveis numericas\nfor col in NUM_COLS:\n    train[col].hist()\n    plt.title(col)\n    plt.show()","aee70b3a":"sns.pairplot(train[NUM_COLS + [TARGET_COL]], hue=TARGET_COL)","9e144c7c":"for col in CAT_COLS:\n    train[col].value_counts().plot.bar()\n    plt.title(col)\n    plt.show()","cf63219d":"# Cabin cont\u00e9m muitos valores distintos, n\u00e3o introduz informa\u00e7\u00f5es que poderiam ser correlacionadas com o resto dos dados\n# Atributos para considerarmos para engenharia de atributos: Name, Cabin, Ticket\n\nCAT_COLS.remove('Ticket')","5b5fd8fc":"# Deixando explicito que removi posteriormente apos conferir os graficos de distribuicao\nCAT_COLS.remove('Cabin')","3130deab":"# Tratamento de valores numericos ausentes\n# Um bom ponto de partida \u00e9 imputar com a mediana\ntrain[NUM_COLS].info()","d1f22281":"# Aqui, ambos treino e teste sao atualizados com dados do conjunto de treino, pois em um ambiente real, \n# n\u00e3o temos acesso aos dados de teste (simulando dados de producao)\n\ntrain_med = train[NUM_COLS].median()\ntrain[NUM_COLS]=train[NUM_COLS].fillna(train_med)\ntest[NUM_COLS]=test[NUM_COLS].fillna(train_med)","76cc201f":"train[NUM_COLS].info()","0412962b":"# Uma sugestao para inputar valores ausentes em dados categoricos \u00e9 usar get_dummies\n# O mesmo substituira por 0 em todas as colunas de um valor ausente\n# Outra alternativa seria preencher com o valor mais frequente\ntrain[CAT_COLS].info()","af3fa021":"train_cat_dummy = pd.get_dummies(train[CAT_COLS])\ntrain_cat_dummy","d962f1be":"from sklearn.model_selection import train_test_split\n\n# Agora todos os dados de entrada sao numericos\nX = pd.concat([train[NUM_COLS], train_cat_dummy], axis=1)\ny = train[TARGET_COL]","65b39606":"# posteriormente podemos usar validacao cruzada, por simplicidade aqui vamos usar\n# train_test_split para criar o conjunto de validacao\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.3, random_state=42)","514b76f4":"# Vamos iniciar a triagem com regressao logistica\nfrom sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(X_train, y_train)","13179a96":"lr.score(X_train, y_train) # Score padrao em classificadores eh a acuracia","9d4fe65c":"lr.score(X_val, y_val)","b8071ed8":"from sklearn.ensemble import RandomForestClassifier","df8a5b5e":"rf = RandomForestClassifier()\nrf.fit(X_train, y_train)\nrf.score(X_train, y_train)","d9710f30":"rf.score(X_val, y_val)","f3a8bc5a":"# Temos um exemplo de overfitting com random forest. \n# Score de treino quase perfeito e de teste menor que de LR","d370667c":"from xgboost import XGBClassifier","3821abc6":"xgb = XGBClassifier()\nxgb.fit(X_train, y_train)\nxgb.score(X_train, y_train)","93097a95":"xgb.score(X_val, y_val)","c4e76115":"# At\u00e9 o momento LR tem se saido melhor, vamos testar submeter ele","151ca9ea":"# Survived \u00e9 um valor aleatorio no momento, vamos substituir pelo survived que \n# prevemos com regressao logistica\nsubmission.head()","2e9ff445":"submission['Survived']=lr.predict(X_val)","f4133628":"submission.to_csv('submission.csv', index=False)","33066628":"pd.read_csv('submission.csv')","a30fef13":"from sklearn.model_selection import cross_val_score","6ec483f3":"scores = cross_val_score(lr, X_train, y_train, cv=10)\nnp.mean(scores)","0ea3a0cb":"## Awari ML - Atividade 2\n- Constru\u00e7\u00e3o desse notebook, passo a passo: https:\/\/www.loom.com\/share\/243bc6e99e3347d99138f0f2d96559e8\n\n- Continua\u00e7\u00e3o do v\u00eddeo: https:\/\/www.loom.com\/share\/1108a1a19a6d432f921f2bcfa86ce865","bbdabe21":"Score no conjunto de teste: 0.76. A partir daqui v\u00e1rias coisas podem ser melhoradas:\n- Utilizar valida\u00e7\u00e3o cruzada, desta forma, aproveitando todo o conjunto de treino\n- Calibra\u00e7\u00e3o dos modelos para lidar com overfitting\/underfitting\n- Fazer engenharia de atributos para aproveitamento dos outros atributos\n- Outros metodos para inputar valores ausentes, por exemplo, treinar um regressor para prever a idade de um passageiro a partir dos outros atributos. \n- Confiram tambem os outros notebooks, estrat\u00e9gias como stacking de v\u00e1rios modelos podem ser ignoradas por hora, tentem chegar \u00e0 um melhor resultado usando um \u00fanico modelo (ou combina\u00e7\u00e3o do mesmo)\n","e55c90ca":"### Divis\u00e3o X e y Treinamento e X\/y Teste"}}