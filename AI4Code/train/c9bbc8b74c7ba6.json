{"cell_type":{"b8eb454e":"code","57ac2676":"code","8129ded2":"code","440b8400":"code","f32872db":"code","16ab81c9":"code","77cd14c4":"code","a58b84aa":"code","a1843757":"code","0672856f":"code","0abf5cb0":"code","88377e84":"code","0042c3aa":"code","fdbcb570":"code","91c84670":"code","f97ee711":"code","accb227a":"code","68a42fbb":"code","2f32fe26":"code","08f7c0cb":"code","463fa6ed":"code","87a8949e":"code","fae32e94":"code","9d8e5000":"code","0b9eb902":"code","d3b18a29":"code","270ad04e":"code","c98d6506":"code","53978ba3":"code","148a9814":"code","6fb56161":"code","52284b28":"code","0954e891":"code","6ab05eed":"code","bef2db0e":"code","5c1f1a35":"code","3f5e9d46":"code","8af34242":"code","5f85185e":"code","c4d85b76":"code","b7634551":"code","c8d2bd02":"code","d0d1ec3a":"code","554302fb":"code","c0193a28":"code","338ab11f":"code","c5075f7a":"code","36e7589c":"code","f33c0731":"code","6c0ecb5f":"code","5ac8680d":"code","f0aa149a":"code","924bc475":"markdown","b715aced":"markdown","e9895d6e":"markdown","37bab908":"markdown","4ddc5e01":"markdown","4b74000c":"markdown","8639496c":"markdown","c862ead6":"markdown","06f34156":"markdown","05d565ae":"markdown","cbe01241":"markdown","7f3c3647":"markdown","9cc49bd4":"markdown"},"source":{"b8eb454e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","57ac2676":"plt.style.available","8129ded2":"train_df = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/titanic\/test.csv\")\n\ntest_PassengerId = test_df[\"PassengerId\"] # PassengerId'nin ilk halini kaybetmemesini istedi\u011fimiz i\u00e7in","440b8400":"train_df.columns","f32872db":"train_df.head()","16ab81c9":"train_df.describe() # Numerical feature","77cd14c4":"train_df.info()","a58b84aa":"def bar_plot(variable):\n    \"\"\"\n    input: variable ex: \"Sex\"\n    output: bar plot & value count\n    \"\"\"\n    # get feature \n    var = train_df[variable]\n    # count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    # visualize, \n    plt.figure(figsize=(18, 5))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(f\"{variable}:\\n{varValue}\")","a1843757":"category1 = [\"Survived\", \"Sex\", \"Pclass\", \"Embarked\", \"SibSp\", \"Parch\"]\n\nfor c in category1:\n    bar_plot(c)","0672856f":"category2= [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n    print(f\"{train_df[c].value_counts()} \\n\")","0abf5cb0":"def plot_hist(variable):\n    \n    plt.figure(figsize=(18, 6))\n    \n    plt.hist(train_df[variable], bins=891)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(f\"{variable} distribution with hist\")\n    plt.grid(True)\n    \n    plt.show()","88377e84":"category3 = [\"Fare\", \"Age\", \"PassengerId\"]\n\nfor c in category3:\n    plot_hist(c)","0042c3aa":"# Pclass vs Survived\n\ntrain_df[[\"Pclass\", \"Survived\"]].groupby([\"Pclass\"], as_index=False).mean().sort_values(\n    by=\"Survived\", ascending=False)","fdbcb570":"# Sex\n\ntrain_df[[\"Sex\", \"Survived\"]].groupby([\"Sex\"], as_index=False).mean().sort_values(\n    by=\"Survived\", ascending=False)","91c84670":"#SibSp\n\ntrain_df[[\"SibSp\", \"Survived\"]].groupby([\"SibSp\"], as_index=False).mean().sort_values(\n    by=\"Survived\", ascending=False)","f97ee711":"# Parch\n\ntrain_df[[\"Parch\", \"Survived\"]].groupby([\"Parch\"], as_index=False).mean().sort_values(\n    by=\"Survived\", ascending=False)","accb227a":"train_df[[\"Sex\", \"Pclass\", \"Survived\"]].groupby([\"Sex\", \"Pclass\"], as_index=False).mean().sort_values(\n    by=\"Survived\", ascending=False)","68a42fbb":"train_df[[\"Sex\", \"Pclass\", \"Parch\", \"SibSp\",\"Survived\"]].groupby(\n    [\"Sex\", \"Pclass\", \"Parch\", \"SibSp\"], as_index=False).mean().sort_values(by=\"Survived\",\n                                                                            ascending=False)[:60]","2f32fe26":"\ndef detect_outliers(df, features):\n    outlier_indices=list()\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c], 25)\n        \n        # 3rd quartile\n        Q3 = np.percentile(df[c], 75)\n        \n        # IQR\n        IQR = Q3 - Q1 \n        \n        # Outlier\n        outlier_step = IQR*1.5\n        \n        # Detect Outlier and Indices\n        outlier_detect_column = df[(df[c]<(Q1-outlier_step)) | (df[c]>(Q3+outlier_step))].index\n        \n        # Store Indices\n        outlier_indices.extend(outlier_detect_column)\n        \n    outlier_indices = Counter(outlier_indices)\n    multiple_outlier = list(i for i, j in outlier_indices.items() if j>2)\n    \n    return multiple_outlier\n","08f7c0cb":"train_df.loc[detect_outliers(train_df, [\"Age\", \"SibSp\", \"Parch\", \"Fare\"])]","463fa6ed":"# Drop Outlier\n\ntrain_df = train_df.drop(detect_outliers(train_df, [\"Age\", \"SibSp\", \"Parch\", \"Fare\"]), axis=0).reset_index(\n    drop = True)","87a8949e":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df, test_df],axis=0).reset_index(drop=True)","fae32e94":"train_df.info()","9d8e5000":"train_df.columns[train_df.isnull().any()]","0b9eb902":"train_df.isnull().sum()","d3b18a29":"train_df[train_df[\"Embarked\"].isnull()]","270ad04e":"train_df.boxplot(column=\"Fare\", by=\"Embarked\");","c98d6506":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\") ","53978ba3":"train_df.columns[train_df.isnull().any()]","148a9814":"train_df[train_df[\"Fare\"].isnull()]","6fb56161":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"]))\ntrain_df[train_df[\"Fare\"].isnull()]","52284b28":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\npd.set_option('mode.chained_assignment', None)\nfrom sklearn import svm\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_curve, auc\nfrom sklearn.preprocessing import LabelEncoder\nimport pylab as pl","0954e891":"#\u041f\u0440\u0438\u0441\u0432\u043e\u0438\u043c \u043a \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c \u0438\u043c\u0435\u044e\u0449\u0438\u0435\u0441\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b\ngender_submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\ntrain_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')","6ab05eed":"train_df","bef2db0e":"train_df.pivot_table('PassengerId', 'Pclass', 'Survived', 'count').plot(kind='bar', stacked=True);","5c1f1a35":"fig, axes = plt.subplots(ncols=2)\ntrain_df.pivot_table('PassengerId', ['SibSp'], 'Survived', 'count').plot(ax=axes[0], title='SibSp')\ntrain_df.pivot_table('PassengerId', ['Parch'], 'Survived', 'count').plot(ax=axes[1], title='Parch');","3f5e9d46":"train_df.PassengerId[train_df.Cabin.notnull()].count()","8af34242":"train_df.PassengerId[train_df.Age.notnull()].count()","5f85185e":"train_df.Age = train_df.Age.median()\ntrain_df.Age","c4d85b76":"train_df[train_df.Embarked.isnull()]","b7634551":"MaxPassEmbarked = train_df.groupby('Embarked').count()['PassengerId']\ntrain_df.Embarked[train_df.Embarked.isnull()] = MaxPassEmbarked[MaxPassEmbarked == MaxPassEmbarked.max()].index[0]","c8d2bd02":"train_df = train_df.drop(['PassengerId','Name','Ticket','Cabin'],axis=1)\ntrain_df","d0d1ec3a":"train_df.columns[train_df.isnull().any()]","554302fb":"label = LabelEncoder()\ndicts = {}\n\nlabel.fit(train_df.Sex.drop_duplicates()) \ndicts['Sex'] = list(label.classes_)\ntrain_df.Sex = label.transform(train_df.Sex) \n\nlabel.fit(train_df.Embarked.drop_duplicates())\ndicts['Embarked'] = list(label.classes_)\ntrain_df.Embarked = label.transform(train_df.Embarked)\n\ntrain_df","c0193a28":"test_df.Age[test_df.Age.isnull()] = test_df.Age.mean()\ntest_df.Fare[test_df.Fare.isnull()] = test_df.Fare.median() \nMaxPassEmbarked = test_df.groupby('Embarked').count()['PassengerId']\ntest_df.Embarked[test_df.Embarked.isnull()] = MaxPassEmbarked[MaxPassEmbarked == MaxPassEmbarked.max()].index[0]\nresult = pd.DataFrame(test_df.PassengerId)\ntest_df = test_df.drop(['Name','Ticket','Cabin','PassengerId'],axis=1)\n\nlabel.fit(dicts['Sex'])\ntest_df.Sex = label.transform(test_df.Sex)\n\nlabel.fit(dicts['Embarked'])\ntest_df.Embarked = label.transform(test_df.Embarked)","338ab11f":"test_df","c5075f7a":"target = train_df.Survived\ntrain_df = train_df.drop(['Survived'], axis=1)\nkfold = 5\nitog_val = {} ","36e7589c":"train_df","f33c0731":"ROCtrainTRN, ROCtestTRN, ROCtrainTRG, ROCtestTRG = train_test_split(train_df, target, test_size=0.25) ","6c0ecb5f":"model_rfc = RandomForestClassifier(n_estimators = 80, max_features='auto', criterion='entropy',max_depth=4) \nmodel_knc = KNeighborsClassifier(n_neighbors = 18) \nmodel_lr = LogisticRegression(penalty='l2', tol=0.01) \nmodel_svc = svm.SVC()","5ac8680d":"pl.clf()\nplt.figure(figsize=(8,6))\n\n#SVC\nmodel_svc.probability = True\nprobas = model_svc.fit(ROCtrainTRN, ROCtrainTRG).predict_proba(ROCtestTRN)\nfpr, tpr, thresholds = roc_curve(ROCtestTRG, probas[:, 1])\nroc_auc  = auc(fpr, tpr)\npl.plot(fpr, tpr, label='%s ROC (area = %0.2f)' % ('SVC', roc_auc))\n\n#RandomForestClassifier\nprobas = model_rfc.fit(ROCtrainTRN, ROCtrainTRG).predict_proba(ROCtestTRN)\nfpr, tpr, thresholds = roc_curve(ROCtestTRG, probas[:, 1])\nroc_auc  = auc(fpr, tpr)\npl.plot(fpr, tpr, label='%s ROC (area = %0.2f)' % ('RandonForest',roc_auc))\n\n#KNeighborsClassifier\nprobas = model_knc.fit(ROCtrainTRN, ROCtrainTRG).predict_proba(ROCtestTRN)\nfpr, tpr, thresholds = roc_curve(ROCtestTRG, probas[:, 1])\nroc_auc  = auc(fpr, tpr)\npl.plot(fpr, tpr, label='%s ROC (area = %0.2f)' % ('KNeighborsClassifier',roc_auc))\n\n#LogisticRegression\nprobas = model_lr.fit(ROCtrainTRN, ROCtrainTRG).predict_proba(ROCtestTRN)\nfpr, tpr, thresholds = roc_curve(ROCtestTRG, probas[:, 1])\nroc_auc  = auc(fpr, tpr)\npl.plot(fpr, tpr, label='%s ROC (area = %0.2f)' % ('LogisticRegression',roc_auc))\n\npl.plot([0, 1], [0, 1], 'k--')\npl.xlim([0.0, 1.0])\npl.ylim([0.0, 1.0])\npl.xlabel('False Positive Rate')\npl.ylabel('True Positive Rate')\npl.legend(loc=0, fontsize='small')\npl.show()","f0aa149a":"model_rfc.fit(train_df, target)\nresult.insert(1,'Survived', model_rfc.predict(test_df))\nresult.to_csv('predictions.csv', index=False)","924bc475":"<a id=\"5\"><\/a><br>\n## Numerical Variable","b715aced":"<a id = \"1\"><\/a><br>\n# Load and Check Data","e9895d6e":"<a id=\"6\"><\/a><br>\n# Basic Data Analysis\n\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","37bab908":"<a id=\"7\"><\/a><br>\n# Outlier Detection","4ddc5e01":"<a id=\"10**\"><\/a><br>\n## Fill Missing Value\n\n* Embarked has two missing values.\n* Fare har one missing value.","4b74000c":"<a id = \"2\"><\/a><br>\n# Variable Description\n\n1. PassengerId: Unique id number to each passenger\n1. Survived: Passenger survived(1) or died(0) \n1. Pclass: Passenger class\n1. Name: Passenger name\n1. Sex: Gender of passenger\n1. Age: age of passenger\n1. SibSp: Number of siblings\/Spouses\n1. Parch: Number of parent\/children \n1. Ticket: Ticket number\n1. Fare: CAount of money spent on ticket\n1. Cabin: Cabin category\n1. Embarked: Port where passenger embarkes (C:Cherbourg, Q:Queenstown, S:Southampton)","8639496c":"<a id=\"8\"><\/a><br>\n# Missing Value\n\n   * Find Missing Value\n   * Fill Missing Value","c862ead6":"<a id=\"4\"><\/a><br>\n## Categorical Variable","06f34156":"# Introduction\nThe sinking of Titanic is one of the most notorious shipwrecks in the history. In 1912, during her voyage, the Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew.\n\n<font color = 'blue'>\nContent: \n\n1. [Load and Check Data](#1)\n1. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable](#4)\n        * [Numerical Variable](#5)\n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n1. [Machine Learning](#11)\n","05d565ae":"<a id=\"3\"><\/a><br>\n# Univariate Variable Analysis\n\n* Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, SibSp and Parch\n* Numerical Variable: Fare, Age and PassengerId","cbe01241":"* float64(2): Age and Fare\n* int64(5): PassengerId, Survived, Pclass, SibSb and Parch\n* object(5): Name, Sex, Ticket, Cabin and Embarked ","7f3c3647":"<a id=\"9\"><\/a><br>\n## Find Missing Value","9cc49bd4":"<a id = \"11\"><\/a><br>\n# Machine Learning"}}