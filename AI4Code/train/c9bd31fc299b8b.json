{"cell_type":{"c2338471":"code","1d519a27":"code","260328c9":"code","52a1566b":"code","7d3fdda2":"code","15916b19":"code","846ea1ea":"code","3f1c09b0":"code","ed6e8911":"code","7aecfaa6":"code","52bfe2fc":"code","f3c19261":"code","bb712736":"code","0d41d081":"markdown","581f7a59":"markdown","45a6fe43":"markdown","21ffa505":"markdown","e2983916":"markdown","bf713042":"markdown","0822e064":"markdown"},"source":{"c2338471":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","1d519a27":"import pandas as pd\nfrom sklearn.preprocessing import label_binarize\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.ensemble import GradientBoostingClassifier\nimport matplotlib.pyplot as plt\nfrom sklearn import tree","260328c9":"#Read plays data file\nplaysFile = \"..\/input\/preprocessed-plays-data\/Preprocessed_plays.csv\"\nplaysData = pd.read_csv(playsFile)\n\nplaysData.head()","52a1566b":"X_train, X_test = train_test_split(playsData, test_size=0.20)","7d3fdda2":"combined_Data = pd.concat([X_train,X_test], keys=[0,1])","15916b19":"#Separate Train data and test data\ntrainData = combined_Data.xs(0)\ntestData = combined_Data.xs(1)\n\ntrainData.head()","846ea1ea":"y_train = trainData[\"passResult\"]\nX_train = trainData.drop([\"passResult\"], axis=1) #extracting training data without the target column\ny_test = testData[\"passResult\"]\nX_test = testData.drop([\"passResult\"], axis=1) #extracting training data without the target column\n\nX_train.head()\n","3f1c09b0":"#Decision Tree Classifier ========================================================================\n#CONSTRUCT DEFAULT DECISION TREE AND OBTAIN RESPECTIVE ACCURACY \nclf = DecisionTreeClassifier()\nclf.fit(X_train, y_train)\nclf_predict=clf.predict(X_test)\nprint(\"accuracy Score (testset) for Decision Tree:{0:6f}\".format(clf.score(X_test,y_test)))\nprint()\nprint(\"Confusion Matrix for Decision Tree\")\nprint(confusion_matrix(y_test,clf_predict))","ed6e8911":"#Hyperparameter tuning done for decision tree classifier\n#do random search\nprint(\"RandomizedSearchCV-Decision tree\")\nparameters={'min_samples_leaf' : range(10,100,10),'max_depth': range(5,30,5),'criterion':['gini','entropy']}\nclf_random = RandomizedSearchCV(clf,parameters,n_iter=15,cv=5)\nclf_random.fit(X_train, y_train)\ngrid_parm=clf_random.best_params_\nprint(grid_parm)\n\n","7aecfaa6":"clf = DecisionTreeClassifier(min_samples_leaf= 10, max_depth= 20, criterion= 'entropy')\nclf.fit(X_train, y_train)\nclf_predict=clf.predict(X_test)\nprint(\"accuracy Score (testset) for Decision Tree:{0:6f}\".format(clf.score(X_test,y_test)))\nprint()\nprint(\"Confusion Matrix for Decision Tree\")\nprint(confusion_matrix(y_test,clf_predict))","52bfe2fc":"#Print Classification Report\nprint(classification_report(y_test,clf_predict))","f3c19261":"#Visualization for the Decision Tree\ntree.plot_tree(clf);","bb712736":"#Random Forest =============================================================\n#Default mode\nrfc = RandomForestClassifier()\nrfc.fit(X_train, y_train)\nrfc_predict=rfc.predict(X_test)\nrf_pred = rfc.predict(X_test)\nrf_pred = pd.DataFrame(rf_pred,columns=['passResult'])\n\n\nprint(\"accuracy Score (testset) for Random Forest:{0:6f}\".format(rfc.score(X_test,y_test)))\nprint()\nprint(\"Confusion Matrix for Random Forest\")\nprint(confusion_matrix(y_test,rf_pred))","0d41d081":"For this project I wanted to create a Model to predict whether a pass play would be completed based on the other variables inlcuded in the plays dataset.\n\nThe goal for this would be two-fold:\n\n(1) For NFL defenses the goal would be to determine which personnel (defenders in the box, number of pass rushers) would be most advantageous in order to force an incompletion based on offensive situations and variables (downs, yards to go). \n\n(2) For NFL offenses this could be used in order to determine the likelihood of a pass completion based on the same variables listed above. \n","581f7a59":"Here we run the data through a default Decision Tree Classifier","45a6fe43":"I had to clean up the plays data set so that it would be ready for a Decision Tree or Rando Forest model so this dataset is my edited version.","21ffa505":"The following steps are to create a train and test dataset as well as separating the target column from the data.","e2983916":"In order to get the best accuracy we tune the parameters for the model.","bf713042":"The next steps with this model would be to accumulate data from prior NFL seasons in order to be able to feed more data when building the model. This should allow for greater predictive accuracy. From there teams can use the models to determine offensive\/defensive strategies to best gameplan for varying situations. ","0822e064":"Here we use a Random Forest Classifier with the same data set"}}