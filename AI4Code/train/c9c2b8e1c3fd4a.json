{"cell_type":{"38b1710f":"code","a9146071":"code","e8224c41":"code","5cbf3cf0":"code","16bb703c":"code","a6039d8c":"code","33503a27":"code","aa91c737":"code","98cd7a5f":"code","2fddd672":"code","22b3b073":"code","82206587":"code","e5fe0d08":"code","5b281133":"code","2955e2f7":"code","8539317f":"code","20844e82":"code","8e025431":"code","ccabbc00":"code","2886f420":"code","57df36f7":"code","886ee664":"code","f00b581d":"code","52dafc92":"markdown"},"source":{"38b1710f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# plotly\n# import plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# word cloud library\nfrom wordcloud import WordCloud\n\n# matplotlib\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a9146071":"\ndata1=pd.read_csv('..\/input\/forest-fires-in-brazil\/amazon.csv', encoding=\"windows-1252\")","e8224c41":"data1.head(50)","5cbf3cf0":"data1.info()","16bb703c":"data1.state.unique()","a6039d8c":"data1.number.replace(['-'],0.0,inplace = True)\ndata1.number.replace([' '],0.0,inplace = True)\ndata1.head(-10)","33503a27":"state_list = list(data1.state.unique())","aa91c737":"state_forest_fires_ratio = []\nfor i in state_list:\n    x = data1[data1.state==i]\n    area_forest_fire_rate=sum(x.number)\/sum(data1.number)*100\n    state_forest_fires_ratio.append(area_forest_fire_rate)\ndata2 = pd.DataFrame({'state_list': state_list,'state_forest_fires_ratio':state_forest_fires_ratio})\nnew_index = (data2.state_forest_fires_ratio.sort_values(ascending=False)).index.values\nsorted_data = data2.reindex(new_index)","98cd7a5f":"plt.figure(figsize=(15,15))\nsns.barplot(x=sorted_data['state_list'], y=sorted_data['state_forest_fires_ratio'])\nplt.xticks(rotation= 70)\nplt.xlabel('States')\nplt.ylabel('Forest Fire Rate')\nplt.title('Forest Fire Rate Given States')\nplt.show()","2fddd672":"state_forest_fires_number = []\nfor i in state_list:\n    xx = data1[data1.state==i]\n    area_forest_fire_number=sum(xx.number)\n    state_forest_fires_number.append(area_forest_fire_number)\ndata3 = pd.DataFrame({'state_list': state_list,'state_forest_fires_number':state_forest_fires_number})\ndata33 = data3.sort_values(['state_forest_fires_number']).reset_index(drop=True)\nplt.figure(figsize=(15,15))\nsns.barplot(x='state_list',y='state_forest_fires_number',data=data33)\nplt.xticks(fontsize=15, rotation=80)\nplt.yticks(fontsize=15, rotation=45)\nplt.title('Fires by Year', fontsize = 20)\nplt.ylabel('Number of fires', fontsize=15)\nplt.xlabel('Years', fontsize=15)\nplt.show()","22b3b073":"datag=data1\ndata4=datag.groupby('year')['number'].sum().reset_index()\ndata4","82206587":"f,ax1 = plt.subplots(figsize =(15,15))\nsns.pointplot(x='year',y='number',data=data4,color='coral',alpha=0.9)\nplt.xlabel('Years',fontsize = 15,color='red')\nplt.ylabel('Numbers',fontsize = 15,color='red')\nplt.title('Number of Fires Per Year',fontsize = 25,color='purple')\nplt.show()\n","e5fe0d08":"g = sns.jointplot(data4.year,data4.number, kind=\"kde\", size=7)\ng = sns.jointplot(\"year\", \"number\", data=data4,size=5, ratio=3, color=\"r\")\nplt.show()","5b281133":"labels = data4.year\nplt.figure(figsize = (15,15))\nsizes = data4.number\nexplode = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\nplt.pie(sizes,explode=explode, labels=labels, autopct='%1.2f%%')\nplt.title('Forest Fires According to Years',color = 'grey',fontsize = 25,style='italic')\nplt.show()","2955e2f7":"sns.lmplot(x=\"year\", y=\"number\", data=data4) #Show the results of a linear regression within each dataset\nplt.show()","8539317f":"# Show each distribution with both violins and points\npal = sns.cubehelix_palette(2, rot=-.5, dark=.3) \nsns.violinplot(data=data4, palette=pal, inner=\"points\")\nplt.show()","20844e82":"f,ax = plt.subplots(figsize=(15, 15))\nsns.heatmap(data4.corr(), annot=True, linewidths=0.5,linecolor=\"yellow\", fmt= '.1f',ax=ax)\nplt.show()","8e025431":"sns.pairplot(data4)\nplt.show()","ccabbc00":"trace1 = go.Scatter(\n                    x = data4.year,\n                    y = data4.number,\n                    mode = \"lines\",\n                    name = \"year\",\n                    marker = dict(color = 'rgba(15, 110, 2, 0.8)'),\n                    text= data4.year)\ndata = [trace1]\nlayout = dict(title = 'Forest Fires According to Years',\n              xaxis= dict(title= 'years',ticklen= 4,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)\n","2886f420":"trace1 = go.Scatter(\n                    x = data4.year,\n                    y = data4.number,\n                    mode = \"markers\",\n                    name = \"year\",\n                    marker = dict(color = 'rgba(15, 110, 2, 0.8)'),\n                    text= data4.year)\ndata = [trace1]\nlayout = dict(title = 'Forest Fires According to Years',\n              xaxis= dict(title= 'years',ticklen= 4,zeroline= False),\n              yaxis= dict(title= 'numbers',ticklen= 4,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","57df36f7":"trace1 = go.Bar(\n                    x = data4.year,\n                    y = data4.number,\n                    \n                    name = \"year\",\n                    marker = dict(color = 'rgba(15, 110, 2, 0.8)'),\n                    text= data4.year)\ndata = [trace1]\nlayout = dict(title = 'Forest Fires According to Years',\n              xaxis= dict(title= 'years',ticklen= 4,zeroline= False),\n              yaxis= dict(title= 'numbers',ticklen= 4,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","886ee664":"pie1 = data4.number\nlabels = data4.year\n# figure\nfig = {\n  \"data\": [\n    {\n      \"values\": pie1,\n      \"labels\": labels,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"Number Of Forest Fires\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .3,\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \"title\":\"Forest Fires of Brazil Rates\",\n        \"annotations\": [\n            { \"font\": { \"size\": 20},\n              \"showarrow\": False,\n              \"text\": \"Forest Fires\",\n                \"x\": 2,\n                \"y\": 2\n            },\n        ]\n    }\n}\niplot(fig)","f00b581d":"x2010 = data1[data1.year == 2010]\ntrace1 = go.Box(\n                    \n                    y = x2010.number,\n                    name = \"number\",\n                    marker = dict(color = 'rgba(15, 110, 2, 0.8)'),\n                    text= data4.year)\ndata = [trace1]\nlayout = dict(\n              xaxis= dict(title= '2010',ticklen= 4,zeroline= False),\n              yaxis= dict(title= 'numbers',ticklen= 4,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","52dafc92":"As we can see here, we can say that forest fires increase every year in Brazil."}}