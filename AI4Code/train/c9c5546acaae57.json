{"cell_type":{"f48b4697":"code","117b6e9a":"code","08d3002f":"code","3ee189b6":"code","f2c0c715":"code","c46eb7c9":"code","09312a60":"code","9a02e65c":"code","08d6a66b":"code","4a1f5eca":"code","4c676dfa":"code","afcbc69d":"code","ea08ce69":"code","b9e288ac":"code","60bc1f1c":"code","a832fbea":"code","164ed15f":"code","6654d8a7":"code","fc914367":"code","814983f6":"code","6eece3f9":"code","1d79c21b":"code","ad76d990":"code","006ff7b6":"code","34452c72":"code","e5a7d5de":"code","3863d92e":"code","087e2911":"code","dd48ecb8":"code","a7cec034":"code","860b14ec":"code","4f311a23":"code","f617ce49":"code","d3fea85d":"code","feb036d4":"code","c2ed8f3c":"code","1c9e91e4":"code","618aee00":"code","b040aaf3":"code","21338a74":"code","bf7f2a26":"code","61e0778a":"code","97cef60f":"code","915ff557":"code","c3c3618d":"code","3b689c39":"code","3f2aa866":"code","659773d8":"code","f53a0382":"code","1378ba31":"code","da8a1b40":"code","261ad73b":"code","3df020f8":"code","c3cbc614":"code","41c49d4a":"code","40787f41":"code","61355aae":"code","15d666bc":"code","95dd6550":"code","1da0d458":"code","b1cc1345":"code","0c366e89":"code","60cdc3f8":"code","d6b1c4ac":"code","4609e3af":"code","cc5e73bc":"code","3b4f6c20":"code","75fef67b":"code","d92a3259":"code","f550b3cf":"code","49170e8e":"code","6991b65e":"code","fdbc5ab3":"code","9ecb9639":"code","e79d7a9e":"code","35e083f5":"code","0edb116f":"code","e6731c57":"markdown","49242593":"markdown","c7359422":"markdown","99c8a66d":"markdown","02b04232":"markdown","2041b0a2":"markdown","c04bd3d0":"markdown","b009de29":"markdown","5537ea2a":"markdown","902ae72c":"markdown","8eba6d7a":"markdown"},"source":{"f48b4697":"import pandas as pd","117b6e9a":"data = [1,2,3,4]\ns1 = pd.Series(data)\ns1","08d3002f":"s1.values","3ee189b6":"s1.index","f2c0c715":"s1.index = ['a','b','c','d']\ns1","c46eb7c9":"s1.index","09312a60":"print(s1[0],s1['a'])","9a02e65c":"print(s1.iloc[2],s1.loc['c'])","08d6a66b":"s1['e'] = 5\ns1.loc['f'] = 6\ns1.loc","4a1f5eca":"1 in s1.values","4c676dfa":"'c' in s1.index","afcbc69d":"s1[1:4]","ea08ce69":"data = {'Jaipur' : 'Rajasthan',\n       'Mumbai' : 'Maharashtra',\n       'Kolkata' : 'West Bengal',\n       'Bangaluru' : 'Karnataka',\n       'Chandigarh' : 'Punjab'}\ns2 = pd.Series(data)\ns2","b9e288ac":"s2.name = 'States'\ns2.index.name = 'Capital'\ns2","60bc1f1c":"s2[['Jaipur', 'Mumbai', 'Kolkata']]","a832fbea":"capitals = ['Jaipur','Mumbai','Delhi']\ns3 = pd.Series(data, index = capitals)\ns3","164ed15f":"s3.isnull()","6654d8a7":"s3.notnull()","fc914367":"#Index labels can be non unique\ns = pd.Series(['India','Australia','England'], index = ['Cricket','Cricket','Cricket'])\ns","814983f6":"s.loc['Cricket']","6eece3f9":"#missing values\ncolors2 = ['Blue', 'Blue',None]\npd.Series(colors2)","1d79c21b":"#nan is diffrent than none*\nnums2 =[1,2,None]\npd.Series(nums2)","ad76d990":"import pandas as pd\nstudent1 = pd.Series({'Name' : 'Utkarsh',\n                     'Id' : 1})\nstudent2 = pd.Series({'Name' : 'Amit',\n                     'Id' : 2})\nstudent3 = pd.Series({'Name' : 'Ankit',\n                     'Id' : 3})\n\ndf1 = pd.DataFrame([student1,student2,student3], index = (101,102,103))\ndf1","006ff7b6":"data = {'Name' : ['Utkarsh', 'Amit', 'Ankit'],\n       'ID' : [1,2,3]}\ndf2 = pd.DataFrame(data, index = [101,102,103])\ndf2","34452c72":"df2.head()","e5a7d5de":"df3 = pd.DataFrame(data, index = [101,102,103], columns = ['Name','ID','Age'])\ndf3","3863d92e":"df3.Age = 21\ndf3","087e2911":"df3.index","dd48ecb8":"df3.columns","a7cec034":"df3.values","860b14ec":"df3['Name']","4f311a23":"#only if a valid Python variable name\ndf3.Name","f617ce49":"df3.loc[101]","d3fea85d":"df3.iloc[0]","feb036d4":"df3.loc[104] = ['Akash', 4, 23]\ndf3","c2ed8f3c":"df3.loc[104] = ['Arjun', 4, 23]\ndf3","1c9e91e4":"df3.loc[101]['Name']","618aee00":"df3['Name'][101]","b040aaf3":"val = pd.Series([21,23,25,24], index = [101,102,103,104])\ndf3['Age'] = val\ndf3","21338a74":"val2 = pd.Series([6,5], index = [101,103])\ndf3['Height'] = val2\ndf3","bf7f2a26":"df3['Weight'] = df3.Age\ndf3","61e0778a":"#not inplace\ndf3.drop([104,102])","97cef60f":"del df3['Weight']\ndf3","915ff557":"df3.T","c3c3618d":"df3.index.name = 'Students'\ndf3.columns.name = 'Details'\ndf3","3b689c39":"index = df3.index\nindex","3f2aa866":"#index objects are immutable\n#index can also have duplicate items\nindex[1] = 'A'","659773d8":"df4 = df3.reindex([101,202,103,204,205,206])\ndf4","f53a0382":"df5 = df3.reindex([101,202,103,204,205,206], method = 'ffill')\ndf5","1378ba31":"df5.dropna()","da8a1b40":"df5.fillna(0)","261ad73b":"df5.set_index(['Name'])","3df020f8":"df5.reset_index()","c3cbc614":"df3['Name']","41c49d4a":"df3[['Name','ID']]","40787f41":"df3.loc[101]","61355aae":"df3.loc[[101,102]]","15d666bc":"df3.loc[101, 'Name']","95dd6550":"df3.loc[[101,102,103], ['Name','Age']]","1da0d458":"df3.iloc[1]","b1cc1345":"df3.iloc[[0,1],[1,2]]","0c366e89":"df3.loc[:,['Name','Age']]","60cdc3f8":"df3.sort_index()","d6b1c4ac":"df3.sort_index(axis = 1, ascending = True)","4609e3af":"df3.sort_values(by = 'Name')","cc5e73bc":"df3.loc[105] = ['Utkarsh',4,21,6]\ndf3","3b4f6c20":"df3['Name'].unique()","75fef67b":"import numpy as np\ndata = {'A' : np.arange(11,21),\n     'B' : np.arange(21,31),\n     'C' : np.arange(31,41)}\ndf = pd.DataFrame(data)\ndf","d92a3259":"df.sum()","f550b3cf":"#axis = 'columns' or 1 (default is across rows)\ndf.sum(axis = 1)","49170e8e":"df.mean(skipna = True)","6991b65e":"df.min()","fdbc5ab3":"df.max()","9ecb9639":"df.var()","e79d7a9e":"df.std()","35e083f5":"df.median()","0edb116f":"df.describe()\n# All the descriptive statistics exclude missing data by default","e6731c57":"## 1.Indexing  and Sorting a DataFrame","49242593":"## 7.DateTime","c7359422":"## 4.Cleaning and Preparation","99c8a66d":"## 6.GroupBy and Data Aggregation","02b04232":"## 2.Descriptive Statistics","2041b0a2":"# Pandas\npandas contains data structures and data manipulation tools designed to make data analysis and cleaning fast and easy in python. It has two data structures : 1.Series and 2.DataFrame\n#### Datatypes : int64, float64, object, bool, datetime64, timedelta, category","c04bd3d0":"#### iloc queries by position and loc queries by label name","b009de29":"# Series \nA Series is an one imensional array like object containing a sequence of values and an index.","5537ea2a":"# DataFrame\nA DataFrame represents a rectangular table of data and contains a collection of columns. The DataFrame has both a row and column index.","902ae72c":"## 3.Querying a DataFrame","8eba6d7a":"## 5.Merge, Combine and Reshape"}}