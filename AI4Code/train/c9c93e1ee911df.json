{"cell_type":{"42a6be67":"code","5a46fdd7":"code","934cf255":"code","fb2c4c28":"code","287cf718":"code","323b6d5a":"code","19cdf820":"code","dbdeebee":"code","2561e9f4":"code","276e77c1":"code","ab584270":"code","415c3751":"code","3be03cb6":"markdown","13dd5f3c":"markdown"},"source":{"42a6be67":"import pandas as pd\nfrom datetime import datetime","5a46fdd7":"df = pd.read_csv('\/kaggle\/input\/real-time-advertisers-auction\/Dataset.csv')\ndf.date = pd.to_datetime(df.date)","934cf255":"#calculating CPM from https:\/\/www.kaggle.com\/akshaypaliwal709\/predicting-the-reserve-price-base-cpm\n#calculating the value that the Advertisers Bid for the month of June\n# CPM(the value which was the winning bid value) = \n#((revenue of the publisher*100)\/revenue_share_percentage)\/measurable_impressions)*1000\n\ndef weird_division(n, d):\n    return n \/ d if d else 0\n\ndf['CPM'] = df.apply(lambda x: weird_division(((x['total_revenue']*100)),x['measurable_impressions'])*1000 , axis=1)","fb2c4c28":"# Cut negative values, values > 95 percentile\ncpm_95_quantile = df.CPM.quantile(0.95)\ndf = df[(df.CPM>=0) & (df.CPM<cpm_95_quantile)]","287cf718":"print(f\"Delete if is constant: revenue_share_percent - \\\n{df.revenue_share_percent.nunique()==1}, integration_type_id - {df.integration_type_id.nunique()==1}\")\ndf.drop(columns=[\"revenue_share_percent\",\"integration_type_id\"], inplace=True)\n\n# Also delete target-related features\ndf.drop(columns=[\"total_revenue\",\"measurable_impressions\",\"total_impressions\",\"viewable_impressions\"], inplace=True)","323b6d5a":"df.columns","19cdf820":"# df.hist(figsize=(15,15))","dbdeebee":"TEST_DT = datetime(2019,6,22)\npd_train = df[df.date < TEST_DT]\npd_test = df[df.date >= TEST_DT]\nprint(f\"train: {pd_train.date.min()}-{pd_train.date.max()}, test: {pd_test.date.min()}-{pd_test.date.max()}\")\nX_train = pd_train.drop(columns=[\"date\",\"CPM\"])\ny_train = pd_train.CPM\nX_test = pd_test.drop(columns=[\"date\",\"CPM\"])\ny_test = pd_test.CPM","2561e9f4":"from lightgbm import LGBMRegressor\nfrom sklearn.metrics import mean_squared_error as mse","276e77c1":"lgb = LGBMRegressor()\nlgb.fit(X_train, y_train)","ab584270":"y_predict = lgb.predict(X_test)","415c3751":"mse(y_test, y_predict)","3be03cb6":"# Model","13dd5f3c":"# Prepare data"}}