{"cell_type":{"978c91df":"code","894faf89":"code","8a0a9c99":"code","d5517885":"code","7c5425d5":"code","85ab640b":"code","086d6668":"code","175976c8":"code","9aa81f5b":"code","c48d12d6":"code","3b9b609f":"markdown","5f5b50a1":"markdown","81a63847":"markdown","10e40b12":"markdown","2c1091ab":"markdown","9e2aed0f":"markdown","01168ed1":"markdown","96793e82":"markdown","63615032":"markdown","d79abcc2":"markdown","af306af1":"markdown"},"source":{"978c91df":"print('Ready to go!')","894faf89":"import pandas as pd # pandas, our library for representing tabular data\nimport matplotlib.pyplot as plt # matplotlib, our library for data viz\nplt.rc('figure', figsize=(12, 8)) # default figure size\nimport seaborn as sns # additional data viz library\n\n# load our data\ndf = pd.read_csv('\/kaggle\/input\/lemonade_clean.csv')\ndf","8a0a9c99":"df['sales']","d5517885":"df['sales'].describe()","7c5425d5":"plt.hist(df['sales'])","85ab640b":"plt.hist(df['sales'], edgecolor='pink', color='darkred', bins=20)","086d6668":"plt.boxplot(df['sales'])","175976c8":"sns.barplot(data=df, y='sales', x='rainfall')","9aa81f5b":"sns.barplot(data=df, y='rainfall', x='sales')","c48d12d6":"plt.scatter(data=df, y='sales', x='temperature')","3b9b609f":"Here we have adjusted the number of bins in the histogram with the `bins=20` argument. We also added a black border to the bars with the `edgecolor='pink'` argument.\n\nTo make our boxplot:","5f5b50a1":"We can swap the x and y value to get a horizontal bar chart:","81a63847":"Try running the cell above this one. Click anywhere in the cell and press the big blue arrow to the left of the cell to run it.\n\nYou should see the output it produces afterwords.\n\nWhen you are ready, go ahead and run the cell below to load up the dataset we will use.","10e40b12":"Now let's make some visualizations!\n\n- histogram: `plt.hist(df['feature'])`\n- boxplot: `plt.boxplot(df['feature'])`\n- barplot `sns.barplot(data=df, y='numeric_variable', x='category')`\n- scatterplot `plt.scatter(df['feature1'], df['feature2'])`\n\nFirst we'll visualize the distribution of sales:","2c1091ab":"Thus far we have been using `matplotlib` to do our plotting. Next we will demonstrate `seaborn`, which provides some more \"fancy\" capabilities, relative to what we've seen so far.\n\nWhen using `seaborn`, we'll specify what data we want to use, which values we want on the y-axis and which ones on the x-axis.\n\nLet's take a look at the relationship between the weather and the amount of lemonade sold:","9e2aed0f":"There are many different ways we can adjust our plot by passing more **arguments** to the `hist` function. Multiple arguments are separated by commas.","01168ed1":"To generate a scatter plot, we can use `plt.scatter`.","96793e82":"## Exercise\n\nExplore the features of the dataset we haven't covered in the lesson. You can press the `+ Code` button to create more code cells.\n\n1. What happens if you use `.describe` with a categorical variable?\n1. Show the descriptive statistics for `temperature`, `flyers` and `price`. What do you notice?\n1. Visualize the distribution of all of the above variables. Adjust the bin size as you see fit.\n1. Visualize relationships in the data that we haven't yet explored. (Hint: think about the type of each variable (numeric or categorical) and choose the appropriate chart type.)\n    - Does the day of the week have an impact on how much lemonade is sold?\n    - What is the relationhip between the number of flyers distributed and amount of lemonade sold?\n    - What is the relationship between the weather and the temperature?\n    - What other questions might you ask?\n1. Is the `price` feature useful? Does it ever change?\n1. Make your charts prettier!\n\n    After writing the code to produce the visualization, the chart's x-axis label can be customized by adding this code:\n    \n    ```python\n    plt.xlabel('My Custom X Label')\n    ```\n    \n    Try it out!\n    \n    How do you think you would customize the y-axis label? The title?\n    \n    The range of the y-axis can be changed like this:\n    \n    ```python\n    plt.ylim(0, 100)\n    ```\n    \n    Here 0 is the minimum and 100 is the maximum. Try it out yourself!\n    \n    How do you think you would change the x-axis range? How does this effect bar charts?\n    \n1. Different visualization types\n\n    - Thus far, we've used a barplot (`sns.barplot`) for comparing the numeric and categorical variables. What happens if you replace `.barplot` with `.boxplot`? `.stripplot`?\n    \n    - What happens if you swap the `x` and `y` variables?\n    \n    - Try running the code below in a new cell:\n    \n        ```python\n        sns.barplot(data=df, y='sales', x='day', hue='weather')\n        ```\n        \n        What does the `hue=` do? Try this with the other chart types you explored previously as well!\n        \n1. Even more visualization tricks\n\n    Try using `sns.regplot` with x and y both being numeric variables. What do you notice? What happens if you add `hue=` like you did in the previous exercise?","63615032":"To view summary statistics for a feature, we can use `.describe` like this:","d79abcc2":"Notice that the output of the cell above is a table. This table represents the data we have now loaded into python.\n\nWe've stored our data in the `df` variable (short for dataframe). We can now explore the various *features* (aka *variables*, the columns in our table) of our data.\n\n`df` refers to our whole dataset. To reference individual features, we use square brackets and the name of the column like this:\n\n```python\ndf['sales']\n```\n\nRun the cell below to see the data for the `sales` column.","af306af1":"# Welcome!\n\nThis is a notebook. It contains a mix of markdown (a plain-text language for documentation) and python code.\n\nEach notebook consists of multiple **cells**. This is a markdown cell and it contains documentation. The cell below this one is a cell that contains python code. You can click anywhere within a cell to edit it."}}