{"cell_type":{"874f9b33":"code","e2f001c7":"code","4a89aa84":"code","fdc5ed05":"code","ced16b39":"code","826ee422":"code","abc670a3":"code","b1153637":"code","685c9b73":"code","a564df71":"code","a0a868f4":"code","a9a5f5df":"code","0d80117a":"code","3e9211c3":"code","b0de4ab3":"markdown"},"source":{"874f9b33":"# clone YOLOv5 repository\n!git clone https:\/\/github.com\/ultralytics\/yolov5  # clone repo\n%cd yolov5\n!git reset --hard 886f1c03d839575afecb059accf74296fad395b6","e2f001c7":"# install dependencies as necessary\n!pip install -qr requirements.txt  # install dependencies (ignore errors)\nimport torch\n\nfrom IPython.display import Image, clear_output  # to display images\nfrom utils.google_utils import gdrive_download  # to download models\/datasets\n\n# clear_output()\nprint('Setup complete. Using torch %s %s' % (torch.__version__, torch.cuda.get_device_properties(0) if torch.cuda.is_available() else 'CPU'))","4a89aa84":"# Install W&B \n!pip install -q --upgrade wandb\nfrom kaggle_secrets import UserSecretsClient\n\nuser_secrets = UserSecretsClient()\n# Login \nimport wandb\nwandb_api = user_secrets.get_secret(\"wandb-apikey\") \nwandb.login(key=wandb_api)","fdc5ed05":"%cat models\/yolov5s.yaml","ced16b39":"%cd \/kaggle\/working","826ee422":"import yaml\nwith open(\"..\/input\/drone-car-counting-dataset-yolo\/Custom_data.yaml\", 'r') as stream:\n    num_classes = str(yaml.safe_load(stream)['nc'])\n    \n#customize iPython writefile so we can write variables\nfrom IPython.core.magic import register_line_cell_magic\n\n@register_line_cell_magic\ndef writetemplate(line, cell):\n    with open(line, 'w') as f:\n        f.write(cell.format(**globals()))","abc670a3":"%%writetemplate .\/yolov5\/models\/custom_yolov5s.yaml\n\n# parameters\nnc: {num_classes}  # number of classes\ndepth_multiple: 0.33  # model depth multiple\nwidth_multiple: 0.50  # layer channel multiple\n\n# anchors\nanchors:\n    - [10,13, 16,30, 33,23]  # P3\/8\n    - [30,61, 62,45, 59,119]  # P4\/16\n    - [116,90, 156,198, 373,326]  # P5\/32\n\n# YOLOv5 backbone\nbackbone:\n  # [from, number, module, args]\n  [[-1, 1, Focus, [64, 3]],  # 0-P1\/2\n   [-1, 1, Conv, [128, 3, 2]],  # 1-P2\/4\n   [-1, 3, BottleneckCSP, [128]],\n   [-1, 1, Conv, [256, 3, 2]],  # 3-P3\/8\n   [-1, 9, BottleneckCSP, [256]],\n   [-1, 1, Conv, [512, 3, 2]],  # 5-P4\/16\n   [-1, 9, BottleneckCSP, [512]],\n   [-1, 1, Conv, [1024, 3, 2]],  # 7-P5\/32\n   [-1, 1, SPP, [1024, [5, 9, 13]]],\n   [-1, 3, BottleneckCSP, [1024, False]],  # 9\n  ]\n\n# YOLOv5 head\nhead:\n    [[-1, 1, Conv, [512, 1, 1]],\n   [-1, 1, nn.Upsample, [None, 2, 'nearest']],\n   [[-1, 6], 1, Concat, [1]],  # cat backbone P4\n   [-1, 3, BottleneckCSP, [512, False]],  # 13\n\n   [-1, 1, Conv, [256, 1, 1]],\n   [-1, 1, nn.Upsample, [None, 2, 'nearest']],\n   [[-1, 4], 1, Concat, [1]],  # cat backbone P3\n   [-1, 3, BottleneckCSP, [256, False]],  # 17 (P3\/8-small)\n\n   [-1, 1, Conv, [256, 3, 2]],\n   [[-1, 14], 1, Concat, [1]],  # cat head P4\n   [-1, 3, BottleneckCSP, [512, False]],  # 20 (P4\/16-medium)\n\n   [-1, 1, Conv, [512, 3, 2]],\n   [[-1, 10], 1, Concat, [1]],  # cat head P5\n   [-1, 3, BottleneckCSP, [1024, False]],  # 23 (P5\/32-large)\n\n   [[17, 20, 23], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)\n  ]\n","b1153637":"!mkdir '\/kaggle\/working\/yolov5\/t'\n!mkdir '\/kaggle\/working\/yolov5\/TrainingData'","685c9b73":"!cp ..\/input\/drone-car-counting-dataset-yolo\/Custom_data.yaml .\/yolov5\/models\/Custom_data.yaml","a564df71":"!cp -r ..\/input\/drone-car-counting-dataset-yolo\/YOLO_Drone_Dataset_split \/kaggle\/working\/yolov5\/TrainingData\/","a0a868f4":"cd yolov5","a9a5f5df":"!python train.py --img 416 --batch 16 --epochs 100 --data .\/models\/Custom_data.yaml --cfg .\/models\/custom_yolov5s.yaml --weights '' --name yolov5s_results  --cache","0d80117a":"# use the best weights!\n%cd \/kaggle\/working\/yolov5\/\n!python detect.py --weights runs\/train\/yolov5s_results\/weights\/best.pt --img 416 --conf 0.4 --source \/kaggle\/working\/yolov5\/YOLO_Drone_Dataset_split\/valid\/images\/","3e9211c3":"#display inference on ALL test images\n#this looks much better with longer training above\n\nimport glob\nfrom IPython.display import Image, display\n\nfor imageName in glob.glob('\/kaggle\/working\/yolov5\/runs\/detect\/exp\/*.jpg'): #assuming JPG\n    display(Image(filename=imageName))\n    print(\"\\n\")","b0de4ab3":"![image.png](attachment:70b96f56-973e-428c-bfc7-d451e52fce91.png)![image.png](attachment:52c34731-c868-4b37-a94d-d5b7d1b80cec.png)"}}