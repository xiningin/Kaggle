{"cell_type":{"16bf79d6":"code","aedce544":"code","67ebe47c":"code","a0d57683":"code","20bd8e4b":"code","de906db0":"code","fd300a98":"code","15d9150b":"code","e95d8f3a":"code","f26bccbd":"code","56cef8ec":"code","89239d2f":"code","4c2ca895":"code","10c91062":"code","f4f0fded":"code","8262ccb0":"code","104050a9":"code","7b5d7473":"code","3182abbd":"code","5371e310":"code","0a0abf71":"code","88e427b7":"code","0b488d34":"code","67e947ff":"code","d7850626":"code","7aade07d":"code","9fdb5d89":"code","766a45db":"code","609ef822":"code","10eee314":"code","7d42fe61":"code","fc2c3efd":"code","e05348c5":"code","5635b154":"code","ccc9f1ef":"code","114f8d67":"code","f8498432":"code","90fa422f":"code","2b3de307":"code","e76183b2":"code","8231186f":"code","a44df9cd":"code","b166114d":"code","ae9b6c64":"code","b5017861":"code","4873ddff":"code","15c89bd2":"code","7818b9d0":"code","e0b05b1b":"code","6d0496f3":"code","3ad66241":"code","4150b490":"code","32520472":"code","2590f034":"code","f03028f1":"code","1e61c18c":"code","6a1c9850":"code","c94a5163":"code","7228429e":"code","24037159":"code","38292c47":"code","d596185a":"code","5a6c67c3":"code","36cac2fb":"code","9d55d74c":"code","665faf25":"code","10495565":"code","1b0cf47f":"code","c8cd3f6e":"code","d0588b35":"code","e3cf119b":"code","b4ee51e5":"code","5bd7a8f6":"code","21061190":"code","dc82b197":"code","dcf0be26":"code","45f8e512":"code","60b1751e":"code","baf2f81f":"code","fd10545c":"code","8ee17c2b":"code","48459bba":"code","911b2fc2":"code","846790d9":"code","b8b01197":"code","82a04878":"code","41acece2":"code","cc869fc4":"code","f9e1231f":"code","7e189526":"code","b1120fb4":"markdown","b97955f6":"markdown","2126adc6":"markdown","97bbb92c":"markdown","4148981f":"markdown","362c10e0":"markdown","af78e4db":"markdown"},"source":{"16bf79d6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        \n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aedce544":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom plotly import __version__\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\n\nimport pylab \nimport scipy.stats as stats\nimport statsmodels.api as sm\n\nfrom numpy import mean\nfrom numpy import median\nfrom numpy import percentile\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report,confusion_matrix\nfrom sklearn.preprocessing import StandardScaler\n\nfrom pandas import read_csv\nfrom pandas import datetime\nfrom pandas import DataFrame\n\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom pandas.plotting import autocorrelation_plot\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error,mean_absolute_error,explained_variance_score","67ebe47c":"df = pd.read_csv('\/kaggle\/input\/ccee-brazil-energy-consumption\/CCEE_BR_Data_DEC_2020_v3.csv')\n","a0d57683":"df.info()\nprint('Size of df data (rows, columns) = ', df.shape)","20bd8e4b":"plt.figure(figsize=(14,5))\nsns.heatmap(df.isnull(), vmin=0, vmax=1,)\n\ntotal = df.isnull().sum().sort_values(ascending = False)\npercent = (df.isnull().sum()\/df.isnull().count()*100).sort_values(ascending = False)\nmissing_data  = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(6)","de906db0":"df['Timestamp'] = pd.to_datetime(df['Data'], format='%m\/%d\/%Y')\ndf['Ano'] = df['Timestamp'].dt.year\ndf['M\u00eas'] = df['Timestamp'].dt.month\ndf['Dia'] = df['Timestamp'].dt.day\ndf['DiaSem'] = df['Timestamp'].dt.weekday","fd300a98":"df.head(3)","15d9150b":"d=df.groupby(['M\u00eas'])['Consumo']\nd.describe()          ","e95d8f3a":"df['Consumo'].describe()","f26bccbd":"df['CovidStatus']=df['Covid']\ndf['CovidStatus'] = df['CovidStatus'].replace(0, 'Pre Covid')\ndf['CovidStatus'] = df['CovidStatus'].replace(1, 'Covid Crisis')                     ","56cef8ec":"# exclude 'Exportador'\ndf=df[df['Classe']!='Exportador']\n# ACR = Mercado de Contrata\u00e7\u00e3o Regulada\nACR_df = df[df['Classe']=='Distribuidor']\n# ACL = Mercado de Contrata\u00e7\u00e3o Livre\nACL_df = df[df['Classe']!='Distribuidor']\n\n# df pr\u00e9 COVID\ndf0 = df[df['Covid']==0]\n# df durante COVID\ndf1 = df[df['Covid']==1]\n\n# ACL pr\u00e9 COVID\nCovid_0_ACL = ACL_df[ACL_df['Covid']==0]\n# ACL durante COVID\nCovid_1_ACL = ACL_df[ACL_df['Covid']==1]\n\n# ACL pr\u00e9 COVID\nCovid_0_ACR = ACR_df[ACR_df['Covid']==0]\n# ACL durante COVID\nCovid_1_ACR = ACR_df[ACR_df['Covid']==1]","89239d2f":"df.head()","4c2ca895":"plt.figure(figsize=(16,6))\nsns.countplot(x='Classe', hue='Submercado', data=ACL_df,palette='RdBu_r')\nplt.title('Distribui\u00e7\u00e3o dos consumidores por submercado - ACL', fontsize=20);\nplt.xlabel(\"Classe\")\nplt.legend(loc=2)\nplt.ylabel('Quantidade');\n\nplt.figure(figsize=(16,6))\nsns.countplot(hue='Ramo', x='Classe', data=ACL_df,palette='RdBu_r')\nplt.title('Distribui\u00e7\u00e3o dos consumidores por ramo - ACL', fontsize=20);\nplt.xlabel(\"Classe\")\nplt.ylabel('Quantidade');","10c91062":"a=ACL_df.groupby(['Timestamp','Ramo'])['Consumo'].sum()\na=a.groupby(['Ramo']).mean()\na=a.reset_index().sort_values(['Consumo'],ascending=False)\n\nplt.figure(figsize=(16,6))\nsns.barplot(x='Ramo', y='Consumo', data=a, palette='RdBu_r');\nplt.title('Consumo por ramo - ACL', fontsize=20);\nplt.xlabel(\"Ramo\")\nplt.xticks(rotation = 45, ha='right');\nplt.ylabel('Consumo - MWm');","f4f0fded":"a=df.groupby(['Timestamp','Classe'])['Consumo'].sum()\na=a.groupby(['Classe']).mean()\na=a.reset_index().sort_values(['Consumo'],ascending=False)\n\nplt.figure(figsize=(16,6))\nsns.barplot(x='Classe', y='Consumo', data=a, palette='viridis');\nplt.title('Consumo por Classe - SIN', fontsize=20);\nplt.xlabel(\"Classe\")\nplt.xticks(rotation = 45, ha='right');\nplt.ylabel('Consumo - MWm');\n\nprint('M\u00e9dia Consumo Comercializador Varejista = %.2f MWm' % df[df['Classe']=='Comercializador Varejista']['Consumo'].values.mean())\nprint('M\u00e9dia Consumo Consumidor Especial = %.2f MWm' % df[df['Classe']=='Consumidor Especial']['Consumo'].values.mean())\nprint('M\u00e9dia Consumo Autoprodutor = %.2f MWm' % df[df['Classe']=='Autoprodutor']['Consumo'].values.mean())\nprint('M\u00e9dia Consumo Consumidor Livre = %.2f MWm' % df[df['Classe']=='Consumidor Livre']['Consumo'].values.mean())\nprint('M\u00e9dia Consumo Distribuidor = %.2f MWm' % df[df['Classe']=='Distribuidor']['Consumo'].values.mean())","8262ccb0":"a=ACL_df.groupby(['Timestamp','UF'])['Consumo'].sum()\na=a.groupby(['UF']).mean()\na=a.reset_index().sort_values(['Consumo'],ascending=False)\n\nplt.figure(figsize=(16,6))\nsns.barplot(x='UF', y='Consumo', data=a, palette='RdBu_r');\nplt.title('Consumo por ramo - ACL', fontsize=20);\nplt.xlabel(\"Ramo\")\nplt.xticks(rotation = 45, ha='right');\nplt.ylabel('Consumo - MWm');","104050a9":"plt.figure(figsize=(18,6))\ndf0_ts=df0.groupby(['Timestamp'])['Consumo'].sum()\/1000\ndf1_ts=df1.groupby(['Timestamp'])['Consumo'].sum()\/1000\ndf_ts=df.groupby(['Timestamp'])['Consumo'].sum()\/1000\n\nplt.title('Consumo Sistema Interligado Nacional', fontsize=20);\nplt.ylabel('GWm')\nplt.plot(df0_ts, label='Mean pre Covid')\nplt.plot(df1_ts, label='Mean during Covid')\nplt.plot(df_ts.rolling(window=7,center=False).mean(),label='Rolling Mean 7 days');\nplt.grid(b=None, which='major', axis='both')\nplt.legend();","7b5d7473":"a=ACL_df.groupby(['Ano','DiaSem'])['Consumo'].mean()\na=a.reset_index().sort_values(['Ano'],ascending=True)\n\nplt.figure(figsize=(18,6))\nsns.lineplot(x='DiaSem', y='Consumo', data=a, hue='Ano')\nplt.title('Consumo - ACL', fontsize=20);\nplt.ylabel('Dia Semana')\nplt.legend();\n\na=ACR_df.groupby(['Ano','DiaSem'])['Consumo'].mean()\na=a.reset_index().sort_values(['Ano'],ascending=True)\n\nplt.figure(figsize=(18,6))\nsns.lineplot(x='DiaSem', y='Consumo', data=a, hue='Ano')\nplt.title('Consumo - ACR', fontsize=20);\nplt.ylabel('Dia Semana')\nplt.legend();","3182abbd":"pivot_df = ACL_df.pivot_table(values='Consumo',index='DiaSem',columns='Ano')\nplt.figure(figsize=(8,6))\nplt.title('Consumo - ACL', fontsize=20);\nplt.ylabel('Dia Semana')\nsns.heatmap(pivot_df.astype(int), annot=True, fmt='g');\n\npivot_df = ACR_df.pivot_table(values='Consumo',index='DiaSem',columns='Ano')\nplt.figure(figsize=(8,6))\nplt.title('Consumo - ACR', fontsize=20);\nplt.ylabel('Dia Semana')\nsns.heatmap(pivot_df.astype(int), annot=True, fmt='g');","5371e310":"a=ACL_df.groupby(['CovidStatus','DiaSem'])['Consumo'].mean()\na=a.reset_index().sort_values(['CovidStatus'],ascending=False)\n\nplt.figure(figsize=(18,6))\nsns.barplot(x='DiaSem', y='Consumo', data=a, hue='CovidStatus')\nplt.title('Consumo - ACL', fontsize=20);\nplt.ylabel('Dia Semana')\nplt.legend( loc='upper center', prop={'size': 12})\n\na=ACR_df.groupby(['CovidStatus','DiaSem'])['Consumo'].mean()\na=a.reset_index().sort_values(['CovidStatus'],ascending=False)\n\nplt.figure(figsize=(18,6))\nsns.barplot(x='DiaSem', y='Consumo', data=a, hue='CovidStatus')\nplt.title('Consumo - ACR', fontsize=20);\nplt.ylabel('Dia Semana')\nplt.legend( loc='upper center', prop={'size': 12})\n","0a0abf71":"pivot_df = ACL_df.pivot_table(values='Consumo',columns='Covid',index='DiaSem')\nplt.plot(pivot_df);\n\npivot_df = ACL_df.pivot_table(values='Consumo',columns='DiaSem',index='Covid')\nplt.figure(figsize=(12,2))\nplt.title('Consumo Pr\u00e9 \/ P\u00f3s Covid- ACL', fontsize=20);\nplt.xlabel(\"Ramo de atividade\")\nplt.ylabel('Quantidade');\nsns.heatmap(pivot_df.astype(int), annot=True, fmt='g');\n","88e427b7":"pivot_df = ACR_df.pivot_table(values='Consumo',columns='Covid',index='DiaSem')\nplt.plot(pivot_df);\n\npivot_df = ACR_df.pivot_table(values='Consumo',columns='DiaSem',index='Covid')\nplt.figure(figsize=(12,2))\nplt.title('Consumo Pr\u00e9 \/ P\u00f3s Covid - ACR', fontsize=20);\nplt.xlabel(\"Ramo de atividade\")\nplt.ylabel('Quantidade')\nsns.heatmap(pivot_df.astype(int), annot=True, fmt='g');\n\n","0b488d34":"ACR_std=ACR_df.groupby(['Timestamp'])['Consumo'].tail(200)\nfrom statistics import stdev ","67e947ff":"ACL_df['CatCons']=pd.qcut(ACL_df['Consumo'], q=5, labels=['A','B','C','D','E'])\nACL_df['CatConsIntervalo']=pd.qcut(ACL_df['Consumo'], q=5)\n\nACR_df['CatCons']=pd.qcut(ACR_df['Consumo'], q=5, labels=['A','B','C','D','E'])\nACR_df['CatConsIntervalo']=pd.qcut(ACR_df['Consumo'], q=5)","d7850626":"ACL_df.head(3)","7aade07d":"ACR_df.head(3)","9fdb5d89":"plt.figure(figsize=(16,6))\nsns.countplot(x='Ramo', hue='CatCons', data=ACL_df,palette='viridis')\nplt.title('Distribui\u00e7\u00e3o dos consumidores', fontsize=20);\nplt.xlabel(\"Classe\")\nplt.ylabel('Quantidade');\nplt.xticks(rotation = 45, ha='right');\n\nplt.figure(figsize=(16,6))\nsns.countplot(x='Classe', hue='CatCons', data=ACL_df,palette='viridis')\nplt.title('Distribui\u00e7\u00e3o dos consumidores', fontsize=20);\nplt.xlabel(\"Classe\")\nplt.ylabel('Quantidade');\n#plt.xticks(rotation = 45, ha='right');\n","766a45db":"MC0=mean(Covid_0_ACR['Consumo'].values)\nMC1=mean(Covid_1_ACR['Consumo'].values)","609ef822":"pivot_df = ACL_df.pivot_table(values='Consumo',index='Submercado', columns='CovidStatus')\nplt.figure(figsize=(12,3))\nplt.title('Consumo Pre\/Pos Covid por Submercado', fontsize=20);\nplt.xlabel(\"Ramo de atividade\")\nplt.ylabel('Quantidade')\nsns.heatmap(pivot_df.transpose().astype(int), annot=True, fmt='g', cmap='Oranges');\n\nplt.plot(pivot_df.transpose(),'o', markersize=15);\n#plt.hist(pivot_df,orientation='horizontal')","10eee314":"pivot_df = ACL_df.pivot_table(values='Consumo',index='Classe', columns='CovidStatus')\nplt.figure(figsize=(12,3))\nplt.title('Consumo Pre\/Pos Covid por Classe', fontsize=20);\nplt.xlabel(\"Ramo de atividade\")\nplt.ylabel('Quantidade')\nsns.heatmap(pivot_df.transpose().astype(int), annot=True, fmt='g', cmap='Oranges');","7d42fe61":"pivot_df = ACL_df.pivot_table(values='Consumo',index='UF', columns='CovidStatus')\nplt.figure(figsize=(16,2))\nplt.title('Consumo Pre\/Pos Covid por UF', fontsize=20);\nplt.xlabel(\"Ramo de atividade\")\nplt.ylabel('Quantidade')\nsns.heatmap(pivot_df.transpose().astype(int), annot=True, fmt='g', cmap='Oranges');","fc2c3efd":"ACR_df['UF'].unique()","e05348c5":"ACL_df['UF'].unique()","5635b154":"df['UF'].unique()","ccc9f1ef":"pd.options.display.float_format = \"{:.2f}\".format\n\npivotC0_df = Covid_0_ACR.pivot_table(values='Consumo',columns='UF')\npivotC1_df = Covid_1_ACR.pivot_table(values='Consumo',columns='UF')\npivotC_df = (1-pivotC1_df\/pivotC0_df.values.astype(int))*100\nplt.figure(figsize=(18,1))\nplt.title('Queda de Consumo (%)', fontsize=20);\nplt.xlabel(\"Ramo de atividade\")\nplt.ylabel('Quantidade')\nsns.heatmap(pivotC_df, annot=True, cmap='Oranges');\n\nplt.figure(figsize=(18,6));\nsns.barplot( data=pivotC_df, color='black');","114f8d67":"pd.options.display.float_format = \"{:.2f}\".format\npivotC0_df = Covid_0_ACL.pivot_table(values='Consumo',columns='Ramo')\npivotC1_df = Covid_1_ACL.pivot_table(values='Consumo',columns='Ramo')\npivotC_df = (1-pivotC1_df\/pivotC0_df.values.astype(int))*100\nplt.figure(figsize=(18,1))\nsns.heatmap(pivotC_df, annot=True, cmap='Oranges')\nplt.title('Queda de Consumo (%)', fontsize=20);\nplt.xlabel(\"Ramo de atividade\")\nplt.ylabel('Quantidade')\nplt.xticks(rotation = 45, ha='right');\n\nplt.figure(figsize=(18,6))\nsns.barplot( data=pivotC_df)\nplt.xticks(rotation = 45, ha='right');\n","f8498432":"plt.figure(figsize=(16,4))\nplt.plot(pivotC1_df.transpose(),'o', label='Crise Covid',markersize=15)\nplt.plot(pivotC0_df.transpose(),'o', label='2018-2019',markersize=15)\n#plt.hist(pivot_df,orientation='horizontal')\nplt.title('Consumo de energia el\u00e9trica por ramo de atividade (MWm)', fontsize=20);\n#plt.xlabel(\"Ramo de atividade\")\nplt.ylabel('Consumo (MWm)')\nplt.legend()\nplt.grid(b=None, which='major', axis='both')\nplt.ylim(0,140)\nplt.xticks(rotation = 45, ha='right');","90fa422f":"pd.options.display.float_format = \"{:.2f}\".format\npivotC0_df = Covid_0_ACL.pivot_table(values='Consumo',columns='Ramo')\npivotC1_df = Covid_1_ACL.pivot_table(values='Consumo',columns='Ramo')\npivotC_df = (1-pivotC1_df\/pivotC0_df.values.astype(int))*100\nplt.figure(figsize=(20,1))\nsns.heatmap(pivotC_df, annot=True, cmap='Oranges')\nplt.title('Queda de Consumo (%)', fontsize=20);\nplt.xlabel(\"Ramo de atividade\")\nplt.ylabel('')\nplt.xticks(rotation = 45, ha='right');\n\nplt.figure(figsize=(16,3))\nsns.barplot(data=pivotC_df)\nplt.grid(b=None, which='major', axis='both')\nplt.xticks(rotation = 45, ha='right');\n\n# colocar os n\u00fameros nos markers!!!\n","2b3de307":"xxx = pivotC_df.values.flatten()\nyyy = pivotC1_df.values.flatten()\nzzz = pivotC0_df.values.flatten()\n\nkkk=pd.Series(xxx.transpose())\nlll=pd.Series(yyy.transpose())\nmmm=pd.Series(zzz.transpose())\n\ncons=ACL_df.groupby(['Ramo'])['Consumo'].mean()\nlist_ramo=ACL_df['Ramo'].unique()\n","e76183b2":"#total = df.isnull().sum().sort_values(ascending = False)\n#percent = (df.isnull().sum()\/df.isnull().count()*100).sort_values(ascending = False)\n\nscatter1  = pd.concat([kkk,mmm,lll], axis=1, keys=['Queda de consumo (%)', 'Consumo_Covid_0','Consumo_Covid_1'])\nscatter1.head(6)\n\nscatter1['Ramo de atividade'] = list_ramo\n","8231186f":"plt.figure(figsize=(16,8))\nsns.scatterplot(x='Queda de consumo (%)', y='Consumo_Covid_0', data=scatter1, color='grey', s=1000, alpha=0.5)\nsns.scatterplot(x='Queda de consumo (%)', y='Consumo_Covid_1', hue='Ramo de atividade', data=scatter1, palette='twilight_shifted_r', s=1000)\nplt.legend(loc='best', fontsize='medium')\nplt.grid(b=None, which='major', axis='both')\nplt.title('Scatter - Consumo vs. Queda de consumo - Antes e depois Covid-19', fontsize=20);\n#plt.text(10, 80,\"WEF@Davos\", color=\"gray\")\n\nplt.ylabel('Consumo (MWm)');\n\n\n#plt.figure(figsize=(10,10))\n#plt.title('Scatter - Consumo vs. Queda de consumo - Antes e depois Covid-19', fontsize=20);\n#sns.scatterplot(x='Consumo_Covid_0', y='Consumo_Covid_1', hue='Ramo de atividade', data=scatter1, color='grey', s=1000, alpha=0.5)\n##sns.scatterplot(x='Queda de consumo (%)', y='Consumo_Covid_1', hue='Ramo de atividade', data=scatter1, palette='twilight_shifted_r', s=1000)\n#plt.legend(loc='upper left', fontsize='small')\n#plt.grid(b=None, which='major', axis='both')\n#plt.ylabel('Consumo (MWm)')\n#plt.axis(aspect='equal')\n#plt.xlim(0,80)\n#plt.ylim(0,80);\n#plt.text(2020.01, 412.4-0.5,\"WEF@Davos\", color=\"gray\")","a44df9cd":"scatter1  = pd.concat([kkk,mmm,lll], axis=1, keys=['Queda de consumo (%)', 'Consumo_Covid_0','Consumo_Covid_1'])\nscatter1.head(6)\n\nscatter1['Ramo de atividade'] = list_ramo\n\nts=ACL_df.groupby(['Timestamp','Ramo','CovidStatus'])['Consumo'].mean()\n\nts_df = pd.DataFrame(ts)\n\nts_df\n\nts_df = ts_df.reset_index()","b166114d":"plt.figure(figsize=(16,6))\nsns.barplot(x='Ramo', y='Consumo', data=ts_df, hue='CovidStatus')\nplt.title('Consumo de energia el\u00e9trica por ramo de atividade (MWm)', fontsize=20);\n#plt.xlabel(\"Ramo de atividade\")\nplt.ylabel('Consumo (MWm)')\n#plt.legend()\nplt.grid(b=None, which='major', axis='both')\nplt.ylim(0,200)\nplt.xticks(rotation = 45, ha='right');\n#a.legend(title='Legenda', loc='upper right');\n\nts=df.groupby(['Submercado','CovidStatus'])['Consumo'].mean()\nts=ts.reset_index()","ae9b6c64":"ts_df.head(3)","b5017861":"plt.figure(figsize=(16,6))\na=sns.barplot(x='Ramo', y='Consumo', data=ts_df, hue='CovidStatus')\nplt.title('Consumo de energia el\u00e9trica por ramo de atividade (MWm)', fontsize=20);\n#plt.xlabel(\"Ramo de atividade\")\nplt.ylabel('Consumo (MWm)')\n#plt.legend()\nplt.grid(b=None, which='major', axis='both')\nplt.ylim(0,180)\na.legend(title='Legenda', loc='upper left');\nplt.xticks(rotation = 45, ha='right');\n","4873ddff":"ts=df[df['Classe']!='Distribuidor']\nts=ts.groupby(['UF','CovidStatus'])['Consumo'].mean()\nts=ts.reset_index()\nplt.figure(figsize=(16,6))\na=sns.barplot(x='UF', y='Consumo', data=ts, hue='CovidStatus')\nplt.title('Consumo de energia el\u00e9trica por UF (MWm)', fontsize=20);\n#plt.xlabel(\"Ramo de atividade\")\nplt.ylabel('Consumo (MWm)')\n#plt.legend()\nplt.grid(b=None, which='major', axis='both')\nplt.ylim(0,200)\na.legend(title='Legenda', loc='upper left');\n#plt.xticks(rotation = 0, ha='right');","15c89bd2":"ts=df[df['Classe']!='Distribuidor']\nts=ts.groupby(['Classe','CovidStatus'])['Consumo'].mean()\nts=ts.reset_index()\nplt.figure(figsize=(16,6))\na=sns.barplot(x='Classe', y='Consumo', data=ts, hue='CovidStatus')\nplt.title('Consumo de energia el\u00e9trica por Classe (MWm)', fontsize=20);\n#plt.xlabel(\"Ramo de atividade\")\nplt.ylabel('Consumo (MWm)')\n#plt.legend()\nplt.grid(b=None, which='major', axis='both')\nplt.ylim(0,80)\na.legend(title='Legenda', loc='upper left');\n#plt.xticks(rotation = 0, ha='right');\n","7818b9d0":"pd.options.display.float_format = \"{:.2f}\".format\npivotC_S0_df = Covid_0_ACL.pivot_table(values='Consumo',columns='Submercado')\npivotC_S1_df = Covid_1_ACL.pivot_table(values='Consumo',columns='Submercado')\npivotC_df = (1-pivotC_S1_df\/pivotC_S0_df.values.astype(int))*100\nplt.figure(figsize=(8,1))\nsns.heatmap(pivotC_df, annot=True, cmap='Oranges')\nplt.title('Queda de Consumo por Submercado (%)', fontsize=20);\nplt.xlabel(\"Ramo de atividade\")\nplt.ylabel('')\nplt.xticks(rotation = 45, ha='right');\n\n\n","e0b05b1b":"xxx = pivotC_df.values.flatten()\nyyy = pivotC_S1_df.values.flatten()\nzzz = pivotC_S0_df.values.flatten()\n\nkkk=pd.Series(xxx.transpose())\nlll=pd.Series(yyy.transpose())\nmmm=pd.Series(zzz.transpose())","6d0496f3":"cons=ACL_df.groupby(['Submercado'])['Consumo'].mean()\n\npivotC_df.values\n\n\nlist_submercado=ACL_df['Submercado'].unique()\nlist_submercado","3ad66241":"scatter1  = pd.concat([kkk,mmm,lll], axis=1, keys=['Queda de consumo (%)', 'Consumo_Covid_0','Consumo_Covid_1'])\nscatter1.head(6)\nscatter1['Submercado'] = list_submercado\nscatter_SB=scatter1","4150b490":"scatter1.head(6)\n","32520472":"pd.options.display.float_format = \"{:.2f}\".format\npivotC_C0_df = Covid_0_ACL.pivot_table(values='Consumo',columns='Classe')\npivotC_C1_df = Covid_1_ACL.pivot_table(values='Consumo',columns='Classe')\npivotC_df = (1-pivotC_C1_df\/pivotC_C0_df.values.astype(int))*100\nplt.figure(figsize=(20,1))\nsns.heatmap(pivotC_df, annot=True, cmap='Oranges')\nplt.title('Queda de Consumo por Classe(%)', fontsize=20);\nplt.xlabel(\"Ramo de atividade\")\nplt.ylabel('')\nplt.xticks(rotation = 45, ha='right');\n","2590f034":"covid_BR_df = pd.read_csv('\/kaggle\/input\/corona-virus-brazil\/brazil_covid19_macro.csv')\ncovid_UF_df = pd.read_csv('\/kaggle\/input\/corona-virus-brazil\/brazil_covid19.csv')\n#BR_pop = pd.read_csv('kaggle\/input\/corona-virus-brazil\/brazil_population_2019.csv')\nBRpop_df = pd.read_csv('\/kaggle\/input\/ccee-brazil-energy-consumption\/UF_pop.csv')","f03028f1":"covid_BR_df['Timestamp'] = pd.to_datetime(covid_BR_df['date'], format='%Y\/%m\/%d')\ncovid_BR_df['Ano'] = covid_BR_df['Timestamp'].dt.year\ncovid_BR_df['M\u00eas'] = covid_BR_df['Timestamp'].dt.month\ncovid_BR_df['Dia'] = covid_BR_df['Timestamp'].dt.day\ncovid_BR_df['DiaSem'] = covid_BR_df['Timestamp'].dt.weekday\n\ncovid_UF_df['Timestamp'] = pd.to_datetime(covid_UF_df['date'], format='%Y\/%m\/%d')\ncovid_UF_df['Ano'] = covid_UF_df['Timestamp'].dt.year\ncovid_UF_df['M\u00eas'] = covid_UF_df['Timestamp'].dt.month\ncovid_UF_df['Dia'] = covid_UF_df['Timestamp'].dt.day\ncovid_UF_df['DiaSem'] = covid_UF_df['Timestamp'].dt.weekday","1e61c18c":"covid_BR_df.head(5)","6a1c9850":"covid_UF_df.head(5)","c94a5163":"BRpop_df.head(5)","7228429e":"covid_BR_df['daily_deaths']=covid_BR_df['deaths'].diff(1)\ncovid_UF_df['daily_deaths']=covid_UF_df['deaths'].diff(1)\n","24037159":"ACL_C_df=ACL_df[ACL_df['Timestamp']>='2020-03-25']\nACR_C_df=ACR_df[ACR_df['Timestamp']>='2020-03-25']\n\ncovid_BR_df=covid_BR_df[covid_BR_df['Timestamp']>='2020-03-25']\ncovid_UF_df=covid_UF_df[covid_UF_df['Timestamp']>='2020-03-25']\n","38292c47":"covid_time=covid_BR_df.groupby(['Timestamp'])['daily_deaths'].mean()\nACL_time=ACL_C_df.groupby(['Timestamp'])['Consumo'].mean()\nACR_time=ACR_C_df.groupby(['Timestamp'])['Consumo'].mean()\ncovid_UF_df = covid_UF_df.sort_values(by = ['state', 'Timestamp'], ascending = [True, True])\n","d596185a":"covid_UF_df['daily_deaths']=covid_UF_df['deaths'].diff(1)\n","5a6c67c3":"covid_UF_df['daily_deaths'].loc[covid_UF_df['daily_deaths'] < 0] = 0;","36cac2fb":"# Create some mock data\nfig, ax1 = plt.subplots(figsize=(18, 6))\n\ncolor = 'tab:red'\nax1.set_xlabel('Time')\nax1.set_ylabel('Covid Deaths', color=color)\nax1.plot(covid_time, color=color)\nax1.tick_params(axis='y', labelcolor=color)\n\nax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\n\ncolor = 'tab:blue'\nax2.set_ylabel('Consumption (MWm)', color=color)  # we already handled the x-label with ax1\n#ax2.plot(df0_ts, color=color)\nax2.plot(df1_ts, color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\ncolor = 'tab:grey'\nax2.set_ylabel('Consumption (MWm)', color=color)  # we already handled the x-label with ax1\nax2.plot(df0_ts, color=color)\n#ax2.plot(df1_ts, color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\nfig.tight_layout()  # otherwise the right y-label is slightly clipped\nplt.show()\n\n#df0_ts=df0.groupby(['Timestamp'])['Consumo'].sum()\/1000\n#df1_ts=df1.groupby(['Timestamp'])['Consumo'].sum()\/1000\n#df_ts=df.groupby(['Timestamp'])['Consumo'].sum()\/1000","9d55d74c":"# Create some mock data\nfig, ax1 = plt.subplots(figsize=(18, 6))\n\ncolor = 'tab:red'\nax1.set_xlabel('Time')\nax1.set_ylabel('Covid Deaths', color=color)\nax1.plot(covid_time, color=color)\nax1.tick_params(axis='y', labelcolor=color)\n\nax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\n\ncolor = 'tab:blue'\nax2.set_ylabel('Consumption (MWm)', color=color)  # we already handled the x-label with ax1\n#ax2.plot(df0_ts, color=color)\nax2.plot(df1_ts, color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\n\nfig.tight_layout()  # otherwise the right y-label is slightly clipped\nplt.show()\n\n#df0_ts=df0.groupby(['Timestamp'])['Consumo'].sum()\/1000\n#df1_ts=df1.groupby(['Timestamp'])['Consumo'].sum()\/1000\n#df_ts=df.groupby(['Timestamp'])['Consumo'].sum()\/1000","665faf25":"df1_ts","10495565":"# Create some mock data\nfig, ax1 = plt.subplots(figsize=(18, 6))\n\ncolor = 'tab:red'\nax1.set_xlabel('Time')\nax1.set_ylabel('Covid Deaths', color=color)\nax1.plot(covid_time, color=color)\nax1.tick_params(axis='y', labelcolor=color)\n\nax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\n\ncolor = 'tab:blue'\nax2.set_ylabel('Consumption (MWm)', color=color)  # we already handled the x-label with ax1\nax2.plot(df0_ts, color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\nax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\n\ncolor = 'tab:blue'\nax2.set_ylabel('Consumption (MWm)', color=color)  # we already handled the x-label with ax1\nax2.plot(df1_ts, color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\nfig.tight_layout()  # otherwise the right y-label is slightly clipped\nplt.show()","1b0cf47f":"pivot_df = covid_UF_df.pivot_table(values='daily_deaths',index='state', columns='M\u00eas')\nplt.figure(figsize=(20,4))\nplt.title('Distribui\u00e7\u00e3o de mortes di\u00e1rias', fontsize=20);\n#plt.xlabel(\"Ramo de atividade\")\nplt.ylabel('Mortes di\u00e1rias')\nsns.heatmap(pivot_df.transpose().astype(int), annot=True, fmt='g', cmap='Oranges');\n\n\nplt.figure(figsize=(18,6))\nsns.barplot(data=pivot_df)\n\nplt.figure(figsize=(18,6))\nplt.plot(pivot_df);","c8cd3f6e":"pivot_df = covid_UF_df.pivot_table(values='daily_deaths',index='state', columns='DiaSem')\nplt.figure(figsize=(20,4))\nplt.title('Distribui\u00e7\u00e3o de mortes di\u00e1rias', fontsize=20);\n#plt.xlabel(\"Ramo de atividade\")\nplt.ylabel('Mortes di\u00e1rias')\nsns.heatmap(pivot_df.transpose().astype(int), annot=True, fmt='g', cmap='Oranges');\n\nplt.figure(figsize=(18,6))\nsns.barplot(data=pivot_df)\n\nplt.figure(figsize=(18,6))\nplt.plot(pivot_df);","d0588b35":"pivot_df = covid_UF_df.pivot_table(values='daily_deaths', index='DiaSem')\nplt.figure(figsize=(10,1))\nplt.title('Distribui\u00e7\u00e3o de mortes di\u00e1rias', fontsize=20);\n#plt.xlabel(\"Ramo de atividade\")\nplt.ylabel('Mortes di\u00e1rias')\nsns.heatmap(pivot_df.transpose().astype(int), annot=True, fmt='g',cmap='Oranges');\n\npivot_df = covid_UF_df.pivot_table(values='daily_deaths', index='M\u00eas')\nplt.figure(figsize=(10,1))\nplt.title('Distribui\u00e7\u00e3o de mortes di\u00e1rias', fontsize=20);\n#plt.xlabel(\"Ramo de atividade\")\nplt.ylabel('Mortes di\u00e1rias')\nsns.heatmap(pivot_df.transpose().astype(int), annot=True, fmt='g', cmap='Oranges');\n\npivot_df = covid_UF_df.pivot_table(values='daily_deaths', index='state')\nplt.figure(figsize=(10,1))\nplt.title('Distribui\u00e7\u00e3o de mortes di\u00e1rias', fontsize=20);\n#plt.xlabel(\"Ramo de atividade\")\nplt.ylabel('Mortes di\u00e1rias')\nsns.heatmap(pivot_df.transpose().astype(int), annot=True, fmt='g', cmap='Oranges');","e3cf119b":"covid_UF_df.head()","b4ee51e5":"a=covid_UF_df\na=a.drop(['date','region','cases','Ano','M\u00eas','Dia','DiaSem'], axis=1)","5bd7a8f6":"a.head()","21061190":"pC_df = a.pivot_table(values='daily_deaths',index='state')\npC_df = pC_df.drop(index='RR')\n\npE_0_df = Covid_0_ACL.pivot_table(values='Consumo',index='UF')\npE_1_df = Covid_1_ACL.pivot_table(values='Consumo',index='UF')\n\n\n#Covid_0_ACL\n#Covid_1_ACL","dc82b197":"xxx = pC_df.values.flatten()\nyyy = pE_0_df.values.flatten()\nzzz = pE_1_df.values.flatten()\n\nkkk=pd.Series(xxx.transpose())\nlll=pd.Series(yyy.transpose())\nmmm=pd.Series(zzz.transpose())\n","dcf0be26":"BRpop_df.head(5)","45f8e512":"pop=BRpop_df['Pop'].astype(float)\nUF=BRpop_df['UF']","60b1751e":"pop","baf2f81f":"UF","fd10545c":"#xxx = pC_df.values.flatten()\n#yyy = pE_df.values.flatten()\n\n#kkk=pd.Series(xxx.transpose())\n#lll=pd.Series(yyy.transpose())\n\n#days=ACL_df['UF'].unique()\n#days\n\nScatter_covid_cons = pd.concat([UF,kkk,lll,mmm,pop], axis=1, keys=['UF','Deaths','Cons_Pre_covid','Cons_Pos_covid','Pop'])\n\n\n#scatterClass['UF'] = days","8ee17c2b":"Scatter_covid_cons","48459bba":"a=Scatter_covid_cons","911b2fc2":"a['Deaths']","846790d9":"a['ratio']=a['Cons_Pos_covid']\/a['Cons_Pre_covid']\na['cons_drop']=(1-a['Cons_Pos_covid']\/a['Cons_Pre_covid'])*100\na['deaths\/Mhab']=(a['Deaths']\/a['Pop'])*1000000\na['ratio_norm']=a['ratio']\/(a['ratio'].max())\na['deaths_norm']=a['Deaths']\/(a['Deaths'].max())\na['cons\/Mhab']=(a['Cons_Pre_covid']\/a['Pop'])*1000000","b8b01197":"a.head()","82a04878":"plt.figure(figsize=(16,8))\nsns.scatterplot(x='deaths\/Mhab',y='UF', data=Scatter_covid_cons, color='grey', s=100, alpha=0.5)\n#sns.scatterplot(x='Deaths',y='Cons_Pos_covid', data=Scatter_covid_cons, palette='twilight_shifted_r', s=100)\n#sns.scatterplot(x='Deaths',y='Deaths', data=Scatter_covid_cons, palette='twilight_shifted_r', s=10)\nsns.scatterplot(x='cons\/Mhab',y='UF', data=Scatter_covid_cons, color='blue', s=100, alpha=0.5)\n\n\nplt.legend(loc='best', fontsize='medium')\nplt.grid(b=None, which='major', axis='both')\nplt.title('Scatter - Consumo vs. Queda de consumo - Antes e depois Covid-19', fontsize=20);\n#plt.text(10, 80,\"WEF@Davos\", color=\"gray\")\n\n","41acece2":"plt.figure(figsize=(16,8))\nsns.scatterplot(x='cons\/Mhab',y='UF', data=Scatter_covid_cons, color='grey', s=100, alpha=0.5)\n#sns.scatterplot(x='Deaths',y='Cons_Pos_covid', data=Scatter_covid_cons, palette='twilight_shifted_r', s=100)\n#sns.scatterplot(x='Deaths',y='Deaths', data=Scatter_covid_cons, palette='twilight_shifted_r', s=10)\n\nplt.legend(loc='best', fontsize='medium')\nplt.grid(b=None, which='major', axis='both')\nplt.title('Scatter - Consumo vs. Queda de consumo - Antes e depois Covid-19', fontsize=20);\n#plt.text(10, 80,\"WEF@Davos\", color=\"gray\")","cc869fc4":"plt.figure(figsize=(16,8))\nsns.scatterplot(x='Deaths',y='cons_drop', data=Scatter_covid_cons, hue='UF', s=100, alpha=0.5)\n#sns.scatterplot(x='Deaths',y='Cons_Pos_covid', data=Scatter_covid_cons, palette='twilight_shifted_r', s=100)\n#sns.scatterplot(x='Deaths',y='Deaths', data=Scatter_covid_cons, palette='twilight_shifted_r', s=10)\n\nplt.legend(loc='best', fontsize='medium')\nplt.grid(b=None, which='major', axis='both')\nplt.title('Scatter - Consumo vs. Queda de consumo - Antes e depois Covid-19', fontsize=20);\n#plt.text(10, 80,\"WEF@Davos\", color=\"gray\")\n\nplt.ylim((0,30))\nplt.xlim((0,30))\n","f9e1231f":"plt.figure(figsize=(16,8))\nsns.scatterplot(x='deaths_norm',y='ratio_norm', data=Scatter_covid_cons, color='grey', s=100, alpha=0.5)\n#sns.scatterplot(x='Deaths',y='Cons_Pos_covid', data=Scatter_covid_cons, palette='twilight_shifted_r', s=100)\n#sns.scatterplot(x='Deaths',y='Deaths', data=Scatter_covid_cons, palette='twilight_shifted_r', s=10)\n\nplt.legend(loc='best', fontsize='medium')\nplt.grid(b=None, which='major', axis='both')\nplt.title('Scatter - Consumo vs. Queda de consumo - Antes e depois Covid-19', fontsize=20);\n#plt.text(10, 80,\"WEF@Davos\", color=\"gray\")\n\nx=np.array([0,160])\nm=1\nplt.plot(x, m*x, color='black')\n\nplt.ylabel('Consumo (MWm)');\n\nplt.ylim((0,2))\nplt.xlim((0,2))\n\n","7e189526":"plt.figure(figsize=(16,8))\nsns.scatterplot(x='Deaths',y='Cons_Pre_covid', data=Scatter_covid_cons, color='grey', s=100, alpha=0.5)\nsns.scatterplot(x='Deaths',y='Cons_Pos_covid', data=Scatter_covid_cons, palette='twilight_shifted_r', s=100)\n#sns.scatterplot(x='Deaths',y='Deaths', data=Scatter_covid_cons, palette='twilight_shifted_r', s=10)\n\nplt.legend(loc='best', fontsize='medium')\nplt.grid(b=None, which='major', axis='both')\nplt.title('Scatter - Consumo vs. Queda de consumo - Antes e depois Covid-19', fontsize=20);\n#plt.text(10, 80,\"WEF@Davos\", color=\"gray\")\n\nx=np.array([1,160])\nm=1\nplt.plot(x, m*x, color='black')\n\n\nplt.ylim((0,50))\nplt.xlim((0,50))","b1120fb4":"## 1.4 Data organization","b97955f6":"## 1.3 Check missing data","2126adc6":"## 1.5 Data analysis","97bbb92c":"# Covid data input","4148981f":"## 1.1 Import energy consumption data from CCEE","362c10e0":"# 1 Data","af78e4db":"## 1.2 Visualize data"}}