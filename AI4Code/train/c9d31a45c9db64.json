{"cell_type":{"91bc0e3f":"code","ad74cad9":"code","c4a843f9":"code","7694fe0e":"code","a2772709":"code","d785c1eb":"code","5c8d78f8":"code","ad7bd700":"code","5e0090e6":"code","3a72558d":"code","1d323626":"code","0b7aaea6":"code","6b4d8213":"code","20271a07":"code","ca3f1d6d":"code","c35f3d6b":"code","e8cde4ef":"code","e2da07d7":"code","c8575e41":"code","3990cca6":"code","5a5948b8":"code","bdf52ae8":"code","24ded53e":"code","ba2765b9":"code","877544a8":"code","3598b4e1":"code","8b0babed":"code","9567bd45":"code","f2a95605":"code","e3abde4c":"code","90de14fb":"code","4694311c":"code","2ec45363":"code","4abede2b":"code","994124a9":"code","b8e17a1d":"code","cfb372df":"code","4c74035b":"code","8a9037ad":"code","45e268b8":"code","ff022b6f":"code","c36d23d5":"code","93bcc9e3":"code","98c5c4bd":"code","30224ca3":"markdown","85c0740c":"markdown","839717f6":"markdown","bd883df0":"markdown","90f2b561":"markdown","2d70ef28":"markdown","1e2449a1":"markdown","d4fcac0e":"markdown","b10b0808":"markdown","24f0ad8c":"markdown","e9826240":"markdown","50b7d74d":"markdown","e57ee92d":"markdown","368954d0":"markdown","3d16ec13":"markdown","4c5be73f":"markdown","fa3ae91c":"markdown","7c544420":"markdown","c0a8bcc8":"markdown","d714e7a4":"markdown","eb85a5ec":"markdown","9a0d54c6":"markdown","27fd7915":"markdown","e4c1a4c4":"markdown","fa7a3e86":"markdown","b0ea2075":"markdown","0f8189e3":"markdown","31622350":"markdown","444469bb":"markdown","1039c55b":"markdown","41b9a0c9":"markdown","484af147":"markdown","019ec737":"markdown","f5edbe12":"markdown"},"source":{"91bc0e3f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","ad74cad9":"df =  pd.read_csv('..\/input\/Pokemon.csv')","c4a843f9":"df.head(10)","7694fe0e":"df.columns = df.columns.str.upper().str.replace('_', '') \nfull_data = df\ndf.head()","a2772709":"df['TYPE 1'].value_counts()","d785c1eb":"df.info()","5c8d78f8":"df.describe()","ad7bd700":"df = df.set_index('NAME')\ndf.head()","5e0090e6":"df.index = df.index.str.replace(\".*(?=Mega)\", \"\")\ndf.head(10)\n","3a72558d":"df=df.drop(['#'],axis=1)","1d323626":"df['TYPE 2'].fillna(df['TYPE 1'], inplace=True)","0b7aaea6":"df[((df['TYPE 1']=='Fire') | (df['TYPE 1']=='Dragon')) & ((df['TYPE 2']=='Dragon') | (df['TYPE 2']=='Fire'))].head(3)","6b4d8213":"print(\"MAx DEFENSE:\",df['DEFENSE'].argmax())\nprint(\"MAx DEFENSE:\",(df['DEFENSE']).idxmax())\nprint(df.iloc[224])\ndf.sort_values(by=['DEFENSE'], ascending=False).head(3)\n\n","20271a07":"bins=range(0,200,20) \nplt.hist(df[\"ATTACK\"],bins,histtype=\"bar\",rwidth=1.2,color='#0ff0ff') \n\n# Eixos\nplt.xlabel('ATAQUE')\nplt.ylabel('QTD')\nplt.plot()\n\n# Pontilhado para a m\u00e9dia\nplt.axvline(df['ATTACK'].mean(),linestyle='dashed',color='red') \nplt.show()","ca3f1d6d":"# Separa\u00e7\u00e3o dos conjuntos\nfire=df[(df['TYPE 1']=='Fire') | ((df['TYPE 2'])==\"Fire\")]\nwater=df[(df['TYPE 1']=='Water') | ((df['TYPE 2'])==\"Water\")]\n\nplt.scatter(fire.ATTACK.head(50),fire.DEFENSE.head(50),color='R',label='Fire',marker=\"*\",s=50)\nplt.scatter(water.ATTACK.head(50),water.DEFENSE.head(50),color='B',label=\"Water\",s=25)\n\n# Eixos\nplt.xlabel(\"ATAQUE\")\nplt.ylabel(\"DEFESA\")\n\nplt.legend()\nplt.plot()\nfig=plt.gcf()  \n\n# Tamanho do quadro\nfig.set_size_inches(20,10) \nplt.show()","c35f3d6b":"strong=df.sort_values(by='TOTAL', ascending=False) \nstrong.drop_duplicates(subset=['TYPE 1'],keep='first')","e8cde4ef":"df2 = df.drop(['GENERATION','TOTAL'],axis=1)\nsns.boxplot(data=df2)\nplt.ylim(0,250) \nplt.show()","e2da07d7":"plt.subplots(figsize = (20,5))\nplt.title('Ataque por type 1')\nsns.boxplot(x = \"TYPE 1\", y = \"ATTACK\",data = df)\nplt.ylim(0,200)\nplt.show()","c8575e41":"plt.subplots(figsize = (20,5))\nplt.title('Ataque por type 2')\nsns.boxplot(x = \"TYPE 2\", y = \"ATTACK\",data=df)\nplt.show()","3990cca6":"plt.subplots(figsize = (15,5))\nplt.title('Defesa por Type 1')\nsns.boxplot(x = \"TYPE 1\", y = \"DEFENSE\",data = df)\nplt.show()","5a5948b8":"plt.figure(figsize=(20,10))\ntop_types=df['TYPE 1'].value_counts()\ndf1=df[df['TYPE 1'].isin(top_types.index)] \nsns.swarmplot(x='TYPE 1',y='TOTAL',data=df1,hue='LEGENDARY')\nplt.axhline(df1['TOTAL'].mean(),color='red',linestyle='dashed')\nplt.show()","bdf52ae8":"plt.figure(figsize=(20,10))\nsns.heatmap(df.corr(),annot=True)\nplt.show()","24ded53e":"datax = df.drop([\"TYPE 1\",\"TYPE 2\",\"GENERATION\"],axis=1)\n_ =sns.pairplot(datax, hue='LEGENDARY', diag_kind='kde', height=2)\n_ = 10","ba2765b9":"data = full_data.drop(['TYPE 2'],axis='columns')","877544a8":"data.LEGENDARY.value_counts()","3598b4e1":"lengendary = data.loc[data['LEGENDARY']==True]\nlengendary = lengendary.append(lengendary.append(lengendary))","8b0babed":"lengendary.LEGENDARY.value_counts()","9567bd45":"full_data = data.append(lengendary.append(lengendary.append(lengendary)))","f2a95605":"full_data","e3abde4c":"full_data['LEGENDARY'] = full_data.LEGENDARY.map({False: 0, True: 1})","90de14fb":"full_data","4694311c":"from sklearn.compose import make_column_transformer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.model_selection import train_test_split","2ec45363":"xyz = make_column_transformer(\n            (OneHotEncoder(),['TYPE 1','GENERATION']),\n            (StandardScaler(),['TOTAL','HP','ATTACK','DEFENSE','SP. ATK','SP. DEF','SPEED']), remainder = 'passthrough')","4abede2b":"full_data = full_data.drop(['#','NAME'],axis='columns')\nX = full_data.drop(['LEGENDARY'], axis = 1)\ny = full_data['LEGENDARY']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)","994124a9":"print(len(X), len(y), len(X_train), len(X_test), len(y_train), len(y_test))","b8e17a1d":"xyz.fit_transform(X_train)","cfb372df":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import make_pipeline\nlogreg = LogisticRegression(solver='lbfgs')\npipe = make_pipeline(xyz,logreg)","4c74035b":"from sklearn.model_selection import cross_val_score\nfrom sklearn import metrics\n\nprint('Score do dataset de Treino: {}'.format(cross_val_score(pipe, X_train, y_train, cv=5, scoring='accuracy').mean()*100))\n\npipe = make_pipeline(xyz,logreg)\npipe.fit(X_train, y_train)\ny_pred = pipe.predict(X_test)\n\nprint('Score do dataset de Teste: {}'.format(metrics.accuracy_score(y_test,y_pred)*100))","8a9037ad":"from sklearn.svm import SVC\n\nsvc_scores = []\nkernels = ['linear', 'poly', 'rbf', 'sigmoid']\n\nfor i in range(len(kernels)):\n    svc_classifier = SVC(kernel = kernels[i])\n    pipe = make_pipeline(xyz,svc_classifier)\n    svc_scores.append(cross_val_score(pipe, X_train, y_train, cv=5, scoring='accuracy').mean())","45e268b8":"from matplotlib.cm import rainbow\n\ncolors = rainbow(np.linspace(0, 1, len(kernels)))\nplt.figure(figsize=(10,7))\nplt.bar(kernels, svc_scores, color = colors)\n\nfor i in range(len(kernels)):\n    plt.text(i, svc_scores[i], svc_scores[i])\n    \nplt.xlabel('Kernels')\nplt.ylabel('Scores')\n","ff022b6f":"print('Score do dataset de Treino: {}'.format(svc_scores[0]*100))\n\nsvc_classifier = SVC(kernel = 'linear')\npipe = make_pipeline(xyz, svc_classifier)\npipe.fit(X_train, y_train)\ny_pred = pipe.predict(X_test)\n\nprint('Score do dataset de Teste:: {}'.format(metrics.accuracy_score(y_test,y_pred)*100))","c36d23d5":"from sklearn.ensemble import RandomForestClassifier\n\nrf_scores = []\nestimators = [10, 100, 200, 500, 1000]\n\nfor i in estimators:\n    rf_classifier = RandomForestClassifier(n_estimators = i, random_state = 0)\n    pipe = make_pipeline(xyz, rf_classifier)\n    rf_scores.append(cross_val_score(pipe, X_train, y_train, cv=5, scoring='accuracy').mean())","93bcc9e3":"plt.figure(figsize=(10,7))\ncolors = rainbow(np.linspace(0, 1, len(estimators)))\nplt.bar([i for i in range(len(estimators))], rf_scores, color = colors, width = 0.8)\n\nfor i in range(len(estimators)):\n    plt.text(i, rf_scores[i], round(rf_scores[i],5))\nplt.xticks(ticks = [i for i in range(len(estimators))], labels = [str(estimator) for estimator in estimators])\n\nplt.xlabel('Estimadores')\nplt.ylabel('Score')\n","98c5c4bd":"print('Score do dataset de Treino: {}'.format(rf_scores[0]*100))\n\nrf_classifier = RandomForestClassifier(n_estimators = 10, random_state = 0)\npipe = make_pipeline(xyz,rf_classifier)\npipe.fit(X_train, y_train)\ny_pred = pipe.predict(X_test)\n\nprint('Score do dataset de Teste: {}'.format(metrics.accuracy_score(y_test,y_pred)*100))","30224ca3":"### Treino e Teste\n* Serando modelos de treino e modelos de teste","85c0740c":"### Mapeado os valores Boleanos","839717f6":"### Random Forest","bd883df0":"### Informa\u00e7\u00f5es adicionais sobres os dados\n* Aqui \u00e9 poss\u00edvel observar que existem 800 registros, nenhuma da colunas \u00e9 NULL, duas colunas s\u00e3o do tipo 'object', oito int64 e somente uma boleana.","90f2b561":"### Importa\u00e7\u00e3o das bibliotacas b\u00e1sicas\/padr\u00f5es para trabalharmos com manipula\u00e7\u00e3o de dados","2d70ef28":"### Informa\u00e7\u00f5es estatisticas do DATASET\n* M\u00e9dia, Desvio padr\u00e3o, Minimo, M\u00e1ximo, etc.","1e2449a1":"## An\u00e1lises estat\u00edsticas dos pokemons","d4fcac0e":"### Visualiza\u00e7\u00e3o pr\u00e9via do conjunto de dados","b10b0808":"## VISUALIZA\u00c7\u00d5ES","24f0ad8c":"### Distribui\u00e7\u00e3o de Ataque para todos os Pokemons","e9826240":"### Alterado o index padr\u00e3o para a coluna NAME","50b7d74d":"### Pokemons mais forte por Tipo","e57ee92d":"Aqui \u00e9 poss\u00edvel observar que os Pokemons de Fogo s\u00e3o possuem mas ataque em rela\u00e7\u00e3o aos de \u00c1gua, por\u00e9m os de \u00c1gua possuem mais defesa.","368954d0":"### Encontranto qualquer correla\u00e7\u00e3o entre todos os atributos","3d16ec13":"# Classifica\u00e7\u00e3o\n## Tentar classificar se um pok\u00e9mon \u00e9 lend\u00e1rio","4c5be73f":"### Suporte Vector Machine ","fa3ae91c":"Devido a existir uma desiguldade entre lend\u00e1rios e normais, \"igualado\" esses valores\n* Separado somente os lend\u00e1rios\n* E multiplicado os mesmos","7c544420":"### Fire VS Water\nA ideia \u00e9 comparar todos os pok\u00e9m de Fogo contra todos os pokemons de \u00c1gua","c0a8bcc8":"A partir do mapa de calor, pode-se ver que n\u00e3o h\u00e1 muita correla\u00e7\u00e3o entre os atributos dos pokemons. O mais alto que podemos ver \u00e9 a correla\u00e7\u00e3o entre Sp.Atk e Total","d714e7a4":"### Algumas trativas e observa\u00e7\u00f5es\n* Removido underscore\n* Colunas em maisculo para evitar digita\u00e7\u00e3o incorreta, etc.","eb85a5ec":"* Adicionado os lend\u00e1rios de volta ao conjunto (multiplicando de novo)","9a0d54c6":"### Regress\u00e3o log\u00edstica","27fd7915":"### Correla\u00e7\u00e3o dos atributos entre os Pokemons\nA ideia aqui \u00e9 tentar identificar alguns atributos que separem os pokemons lend\u00e1rios dos pokemons normais.","e4c1a4c4":"## **Trabalho de IA**\nWilliam Alves da Silva\n\n\n* **DATASET**\n    O dataset do trabalho \u00e9 uma lista com todos os Pok\u00e9mons (721) da primeira gera\u00e7\u00e3o, incluindo n\u00famero, nome, primeiro e segundo tipo e estat\u00edsticas b\u00e1sicas: HP, Ataque, Defesa, Ataque Especial, Defesa Especial e Velocidade. \n    Esses s\u00e3o os atributos brutos que s\u00e3o usados para calcular quanto dano um ataque causar\u00e1 nos jogos. Este conjunto de dados \u00e9 sobre os jogos de pokemon\n\n* **OBJETIVOS**\n    Objetivo deste notebook \u00e9 apresentar os dados de diversas modos, para conehcer a informa\u00e7\u00e3o que estamos trabalhando e tamb\u00e9m melhorar o conjunto de dados, para posteriormente aplicarmos Machine Learnning sobre o mesmo.\n    Identificar as features (variaveis) que podemos utilizar para descobrir o tipo de um Pokemon. (Obs.: Ataque e Defesa n\u00e3o s\u00e3o suficientes para descobrir um tipo de pokemon)","fa7a3e86":"### Input do [DATASET](https:\/\/www.kaggle.com\/abcsds\/pokemon)","b0ea2075":"### Observado que para do Pokemon Mega, \u00e9 replicado o seu nome.\nExemplo: \n* Antigo: CharizardMega Charizard Y\n* Novo: Mega Charizard Y","0f8189e3":"### Quantidade de Pokemons por Tipo primario (TYPE 1)","31622350":"### Pokemons mais forte de cada tipo","444469bb":"### Busca com operadores","1039c55b":"### Dropado a coluna #","41b9a0c9":"### Maior defesa com argmax e idmax","484af147":"### Separando (salvando) o conjunto de dados","019ec737":"### Alguns valores para o TYPE 2 estavam NaN (Not a Number)\nPreenchido esses campos com o valor de TYPE 1","f5edbe12":"### Bibliotecas para processamento de dados"}}