{"cell_type":{"697ea676":"code","cf4a55e4":"code","26d1aead":"code","7d9e3b3a":"code","b182394e":"code","5c59dce2":"code","cd9b34b6":"code","379570bd":"code","63e6612d":"code","3068b542":"code","48d90888":"code","e025b35e":"code","de2fab0f":"code","baa6f157":"code","f07e918c":"code","71e6586f":"code","592a4d44":"code","326dd4bc":"code","047f491c":"code","5ab9f2f4":"code","d323a47b":"code","8e7a79a6":"code","011f4e96":"code","9e88cc43":"code","c125cabc":"code","d1aa3e21":"code","965776e1":"code","71efeef2":"code","b64092b1":"code","5f578897":"code","2168f327":"code","48cd6611":"code","dfcb1672":"code","b9b3e46d":"markdown"},"source":{"697ea676":"#importing the necessary libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import Imputer\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.metrics import accuracy_score\nimport statsmodels.api as sm\nimport warnings\nwarnings.filterwarnings('ignore')","cf4a55e4":"#reading the datasets into dataframes\n\ndf_train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/titanic\/test.csv\")","26d1aead":"df_train.head(10)","7d9e3b3a":"df_train.describe()","b182394e":"df_train.isnull().sum()*100\/len(df_train)","5c59dce2":"#imputing median for missing 'Age' values\n\nmed_imputer = Imputer(missing_values='NaN', strategy='median', axis=0)\ndf_train['Age'] = med_imputer.fit_transform(df_train[['Age']])","cd9b34b6":"#mapping age values to categories\n\ndef age_map(x):\n    if(x <= 12):\n        return \"Kid\"\n    elif(x >= 13 and x <= 19):\n        return \"Teen\"\n    elif(x >= 19 and x < 70):\n        return \"Adult\"\n    else:\n        return \"Senior\"\ndf_train['Age'] = df_train['Age'].apply(lambda x: age_map(x))","379570bd":"#processing 'Cabin' and 'Embarked' columns\n\ndf_train['Cabin'].fillna('U', inplace=True)\ndf_train['Cabin'] = df_train['Cabin'].apply(lambda x: x[0])\n\ndf_train['Embarked'].fillna('S', inplace=True)","63e6612d":"#converting 'Fare' values to categorical\n\ndf_train['Fare'] = pd.cut(df_train['Fare'], bins=[-1, 7, 11, 15, 22, 40, 520], labels=[1, 2, 3, 4, 5, 6])","3068b542":"df_train.drop(['Ticket', 'Name'], axis=1, inplace=True)","48d90888":"df_train.head()","e025b35e":"fig, ax = plt.subplots(1,2,figsize=(10,5))\nsns.countplot(df_train['Age'], data=df_train, ax=ax[0])\nsns.countplot(df_train['Age'], hue='Survived', data=df_train, ax=ax[1])\nax[0].title.set_text(\"Frequency of each age group\")\nax[1].title.set_text(\"Survived: Age Group\")","de2fab0f":"fig, ax = plt.subplots(1,2, figsize=(10,5))\nsns.countplot(df_train['Sex'], data=df_train, ax=ax[0])\nsns.countplot(df_train['Sex'], hue='Survived', data=df_train, ax=ax[1])\nax[0].title.set_text(\"Frequency: Sex\")\nax[1].title.set_text(\"Survived: Sex\")","baa6f157":"fig, ax = plt.subplots(1,2, figsize=(10,5))\nsns.countplot(df_train['Pclass'], data=df_train, ax=ax[0])\nsns.countplot(df_train['Pclass'], hue='Survived', data=df_train, ax=ax[1])\nax[0].title.set_text(\"Frequency: Pclass\")\nax[1].title.set_text(\"Survived: Pclass\")","f07e918c":"fig, ax = plt.subplots(1,2, figsize=(10,5))\nsns.countplot(df_train['SibSp'], data=df_train, ax=ax[0])\nsns.countplot(df_train['SibSp'], hue='Survived', data=df_train, ax=ax[1])\nax[0].title.set_text(\"Frequency: SibSp\")\nax[1].title.set_text(\"Survived: SibSp\")","71e6586f":"fig, ax = plt.subplots(1,2, figsize=(10,5))\nsns.countplot(df_train['Embarked'], data=df_train, ax=ax[0])\nsns.countplot(df_train['Embarked'], hue='Survived', data=df_train, ax=ax[1])\nax[0].title.set_text(\"Frequency: Embarked\")\nax[1].title.set_text(\"Survived: Embarked\")\n","592a4d44":"fig, ax = plt.subplots(1,2, figsize=(10,5))\nsns.countplot(df_train['Parch'], data=df_train, ax=ax[0])\nsns.countplot(df_train['Parch'], hue='Survived', data=df_train, ax=ax[1])\nax[0].title.set_text(\"Frequency: Parch\")\nax[1].title.set_text(\"Survived: Parch\")","326dd4bc":"fig, ax = plt.subplots(1,2, figsize=(10,5))\nsns.countplot(df_train['Cabin'], data=df_train, ax=ax[0])\nsns.countplot(df_train['Cabin'], hue='Survived', data=df_train, ax=ax[1])\nax[0].title.set_text(\"Frequency: Cabin\")\nax[1].title.set_text(\"Survived: Cabin\")","047f491c":"#LabelEncoder\nLE = LabelEncoder()\n\n#label encoding the remaining categorical and continous variables\ndf_train['Sex'] = LE.fit_transform(df_train['Sex'])\ndf_train['Cabin'] = LE.fit_transform(df_train['Cabin'])\ndf_train['Embarked'] = LE.fit_transform(df_train['Embarked'])\ndf_train['Age'] = LE.fit_transform(df_train['Age'])","5ab9f2f4":"#plotting a heatmap of the train set\n\nplt.figure(figsize=(10,10))\nsns.heatmap(df_train.corr(), xticklabels = df_train.columns.values, yticklabels = df_train.columns.values, annot=True, cmap=\"YlGnBu\")","d323a47b":"df_train.head(10)","8e7a79a6":"#sorting PassendgerId in ascending order\ndf_train.sort_values(by=['PassengerId'], inplace=True)","011f4e96":"#Splitting the train set into dependent and independent variables\ny = df_train['Survived']\nX = df_train.drop('Survived', axis = 1)\n\n#converting 'Fare' values to int64 type\nX['Fare'] = X['Fare'].astype('int64')","9e88cc43":"#train-test split\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size = 0.6, test_size = 0.4, random_state=100 )","c125cabc":"#creating a LogisticRegression object and generate the model\nlr = LogisticRegression()\nmodel = lr.fit(X_train, y_train)","d1aa3e21":"#making predictions on validation set\ny_preds = model.predict(X_valid)","965776e1":"#accuracy score of the logistic regression model\nlr_score = accuracy_score(y_valid, y_preds)\nprint(lr_score)","71efeef2":"df_test.head()","b64092b1":"#imputing missing values in 'Age' with the median\nage_imputer = Imputer(missing_values='NaN', strategy='median', axis=0)\ndf_test['Age'] = age_imputer.fit_transform(df_test[['Age']])\n\n#converting age values to categorical values\ndf_test['Age'] = df_test['Age'].apply(lambda x: age_map(x))\n\n#processing Cabin and Embarked columns\ndf_test['Cabin'].fillna('U', inplace=True)\ndf_test['Cabin'] = df_test['Cabin'].apply(lambda x: x[0])\n\ndf_test['Embarked'].fillna('S', inplace=True)\n\n#imputing missing values in 'Fare' with the mean\nfare_imputer = Imputer(missing_values='NaN', strategy='mean', axis=0)\ndf_test['Fare'] = fare_imputer.fit_transform(df_test[['Fare']])\n\n#converting 'Fare' values to categorical\ndf_test['Fare'] = pd.cut(df_test['Fare'], bins=[-1, 7, 11, 15, 22, 40, 520], labels=[1, 2, 3, 4, 5, 6])\n\n#label encoding the remaining categorical and continous variables\ndf_test['Sex'] = LE.fit_transform(df_test['Sex'])\ndf_test['Cabin'] = LE.fit_transform(df_test['Cabin'])\ndf_test['Embarked'] = LE.fit_transform(df_test['Embarked'])\ndf_test['Age'] = LE.fit_transform(df_test['Age'])\n\n\n#converting 'Fare' values to int64 type\ndf_test['Fare'] = df_test['Fare'].astype('int64')\n\n#dropping Name and Ticket columns from the test set\ndf_test.drop(['Name','Ticket'], axis=1, inplace=True)","5f578897":"df_test.head()","2168f327":"#Sorting the PassengerId in ascending order\ndf_test.sort_values(by=['PassengerId'], inplace=True)","48cd6611":"#making predictions on the test set\ny_test_pred = model.predict(df_test)","dfcb1672":"#write to output file\noutput = pd.DataFrame({'PassengerId': df_test['PassengerId'], 'Survived': y_test_pred})\noutput.to_csv(\"submission.csv\", index=False)","b9b3e46d":"Most survivors were from the 1st class, followed by 3rd and lastly 2nd class."}}