{"cell_type":{"41c55112":"code","035491aa":"code","76efff45":"code","efb8c279":"code","8e6b1130":"code","7a92b8a0":"code","e86cd9f1":"code","6b7d8016":"code","6e39eef1":"code","b541b868":"code","e3e7b600":"code","54b19897":"code","55be35d5":"code","6c6c0212":"code","e5311034":"code","4d8b61de":"code","17490331":"code","ddd51982":"code","89375499":"code","46a3300a":"code","2ea25300":"code","f854f0e4":"code","a44aadb3":"code","edb8ab8e":"code","10aca0c7":"code","01f1012b":"code","aac1c647":"code","77de7abf":"code","27e1c36d":"code","7c79056f":"code","3ba77a9a":"code","2879722c":"code","b7682b9a":"code","64a076be":"code","9521c378":"code","6270ac5c":"code","0a43f222":"code","2cc917cc":"code","32b5727a":"code","764075c9":"code","f4d4937d":"code","bef1f107":"code","22409e7e":"code","73a644ca":"code","7dadef7b":"code","762494f1":"code","0536a82d":"code","e4c05802":"code","68050965":"code","c521979a":"code","9c4db71e":"code","4000459b":"code","cfe8a317":"code","228217b3":"code","6f27a804":"code","840f6585":"code","06eb4cf3":"code","748c618f":"code","16874bb2":"code","8e5daa41":"code","b59ed247":"code","7c4aea49":"code","ed0aef9e":"code","dbdbe2b5":"code","c818b899":"code","f7bdc878":"code","a52bf80b":"code","9b187cef":"code","584ebd17":"code","1888f9ae":"code","d6c39119":"code","3e4046fa":"code","a35faf2d":"code","d9215735":"code","a2a4e221":"code","9d3d00a9":"code","0f7ac4ba":"code","e2cc1a50":"code","af19f93d":"code","07d02bec":"code","a1dcf85a":"code","4d338cb4":"code","bf63cfb3":"code","b8bb3f27":"code","7ec82109":"code","edbc7062":"code","802a3c39":"code","8e10cde4":"code","ce5c3816":"code","b0bbdee1":"code","6a43a270":"code","ff47e0da":"code","2896b21a":"code","63e5cfa2":"code","183e313d":"code","c9372149":"code","7d7aa6c2":"code","baaa63ab":"code","fa056f99":"code","b2fc8820":"code","9471a53d":"code","c10bb50b":"code","e3357a42":"code","53dd4d9a":"code","8cceae2c":"code","bcd73e24":"code","ee1268ec":"code","f605203f":"code","f7de909e":"code","14e0a1a7":"code","81b691e2":"code","88dd4889":"code","95dfee74":"code","82385817":"code","27a19288":"code","d6e36723":"code","d7d89187":"code","cf7ad0e2":"code","541fc5d4":"code","3fd1cdd3":"code","dc4314b5":"code","f5c4e9be":"code","61f65a6a":"code","a3220cbc":"code","867a9e72":"code","9c6d10e9":"code","4ed53fd9":"code","accb96c6":"code","ca359ee2":"code","5989b040":"code","732ff4b4":"code","583efa38":"code","d65608c5":"code","3d261489":"code","315c87cd":"code","64ffb0a5":"code","18eebddd":"code","bcc706c2":"code","cd949486":"code","4b60d535":"code","a89fd699":"code","c714f68b":"code","1715d143":"code","f0adaa84":"code","95268763":"code","e6649d04":"code","3f2d7d03":"code","742ac833":"code","8b5fbca9":"code","615c2b7b":"code","230c398f":"code","56aaa92c":"code","4cb56b8f":"code","fd0cab3b":"code","2d55a449":"code","3757664b":"code","129945b7":"code","f55dbc88":"code","b9b44334":"code","6ea7990d":"code","fceac70a":"code","28f8a42a":"code","ed8e92a7":"code","bfe47ce6":"code","3184e445":"code","c93fe98e":"code","2ea31502":"code","5f446ecc":"code","deca4d55":"code","5f2223a6":"code","4eb0055b":"code","154efc2f":"code","e820c1a0":"code","3d808dcb":"code","9a5f974c":"code","1c86ea4b":"code","3f04f41b":"code","f6a6474d":"code","374d7f87":"markdown","40b221fb":"markdown","212d6689":"markdown","11887954":"markdown","cb96cee6":"markdown","594cd229":"markdown","dcfe0d7e":"markdown","e1a1c997":"markdown","9841ac92":"markdown","3cc81350":"markdown","d249ce8d":"markdown","15a04b77":"markdown","156aea09":"markdown","66f44163":"markdown","417f28e0":"markdown","63bbd6b1":"markdown","23829444":"markdown","34330d24":"markdown","72da3377":"markdown","285c4421":"markdown","b01b8768":"markdown","882fae3d":"markdown","cc30ad27":"markdown","68da490d":"markdown","0904ddd0":"markdown","be89018b":"markdown","88aa6431":"markdown","d0f7e26f":"markdown","590d39f6":"markdown","e1462cfb":"markdown","0268786b":"markdown","4d82132b":"markdown","9d7d99cc":"markdown","51ece1a7":"markdown","f467dd9e":"markdown","bd6c0cc0":"markdown","f9ff507e":"markdown","9b883c8e":"markdown","c7f89641":"markdown","adea89fd":"markdown","00ca1f74":"markdown","a0fbab66":"markdown","b3ba28c0":"markdown","0e2dca2d":"markdown","bcd48fd1":"markdown","fde0bd93":"markdown","1636a5a4":"markdown","07d01b21":"markdown","45d00b0f":"markdown","456058e2":"markdown","d1f03afb":"markdown","ae321753":"markdown","0bae3e19":"markdown","60935556":"markdown","6f88aefe":"markdown","466aab86":"markdown","0d8baf91":"markdown","ff3ed861":"markdown","b2d06d8f":"markdown","174b8325":"markdown","ae1ee532":"markdown","e96b42d7":"markdown","debbccbe":"markdown","61a4bf5d":"markdown","f12a6004":"markdown","8d8995f1":"markdown","bafbabf1":"markdown","b9174d9c":"markdown","2146f283":"markdown","309ea540":"markdown","cdb6110d":"markdown"},"source":{"41c55112":"import warnings\nwarnings.filterwarnings('ignore')","035491aa":"import pandas as pd, numpy as np, seaborn as sns,matplotlib.pyplot as plt","76efff45":"train= pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain.head()","efb8c279":"train.shape","8e6b1130":"train.info()","7a92b8a0":"train.describe()","e86cd9f1":"test=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest.head()","6b7d8016":"test.shape","6e39eef1":"test.info()","b541b868":"test.describe()","e3e7b600":"test.info()","54b19897":"train.info()","55be35d5":"train['Pclass'].value_counts(ascending=False)","6c6c0212":"print(\"Train['Pclass']  : \",train.Pclass.dtype)\nprint(\"Test['Pclass']   : \",test.Pclass.dtype)","e5311034":"train['Pclass']=train['Pclass'].astype('object')\ntest['Pclass']=test['Pclass'].astype('object')","4d8b61de":"print(\"Train['Pclass']  : \",train.Pclass.dtype)\nprint(\"Test['Pclass']   : \",test.Pclass.dtype)","17490331":"train['Survived'].value_counts(ascending=False)","ddd51982":"print(\"Train['Survived']  : \",train.Survived.dtype)","89375499":"train['Pclass'] = train['Pclass'].replace({ 1 : '1st', 2: '2nd',3: '3rd'}).astype('category')\ntest['Pclass'] = test['Pclass'].replace({ 1 : '1st', 2: '2nd',3: '3rd'}).astype('category')","46a3300a":"train['Pclass'].value_counts(ascending=False)","2ea25300":"test['Pclass'].value_counts(ascending=False)","f854f0e4":"train['Embarked'] = train['Embarked'].replace({ 'C' : 'Cherbourg', 'Q': 'Queenstown','S': 'Southampton'}).astype('object')\ntest['Embarked'] = test['Embarked'].replace({ 'C' : 'Cherbourg', 'Q': 'Queenstown','S': 'Southampton'}).astype('object')","a44aadb3":"train['Embarked'].value_counts(ascending=False)","edb8ab8e":"test['Embarked'].value_counts(ascending=False)","10aca0c7":"train.head()","01f1012b":"train.shape","aac1c647":"train.describe()","77de7abf":"train.info()","27e1c36d":"round(test.isnull().sum()*100\/len(test),2)","7c79056f":"test.isnull().sum()","3ba77a9a":"round(train.isnull().sum()*100\/len(train),2)","2879722c":"train.isnull().sum()","b7682b9a":"round(test.Cabin.isnull().sum()*100\/len(test),2)","64a076be":"test.Cabin.isnull().sum()","9521c378":"pd.set_option('display.max_rows', None)\ntest.Cabin.value_counts(ascending=False)","6270ac5c":"plt.figure(figsize=(30,8))\nsns.countplot(x='Cabin',data=test)\nplt.xticks(rotation=90)\nplt.show()","0a43f222":"test['Cabin'] = test['Cabin'].replace(np.nan,'X')","2cc917cc":"test['Cabin'].isnull().sum()","32b5727a":"train.Cabin.value_counts(ascending=False)","764075c9":"plt.figure(figsize=(32,8))\nax=sns.countplot(x='Cabin',data=test)\nax.set_yscale('log')\nplt.xticks(rotation=90)\nplt.show()","f4d4937d":"round(train.Cabin.isnull().sum()*100\/len(train),2)","bef1f107":"train.Cabin.isnull().sum()","22409e7e":"pd.set_option('display.max_rows', None)\ntrain.Cabin.value_counts(ascending=False)","73a644ca":"plt.figure(figsize=(30,8))\nsns.countplot(x='Cabin',data=train)\nplt.xticks(rotation=90)\nplt.show()","7dadef7b":"train['Cabin'] = train['Cabin'].replace(np.nan,'X')","762494f1":"train['Cabin'].isnull().sum()","0536a82d":"test.Cabin.value_counts(ascending=False)","e4c05802":"plt.figure(figsize=(32,8))\nax=sns.countplot(x='Cabin',data=train)\nax.set_yscale('log')\nplt.xticks(rotation=90)\nplt.show()","68050965":"round(test.Fare.isnull().sum()*100\/len(test),2)","c521979a":"test.Fare.isnull().sum()","9c4db71e":"test.Fare.describe()","4000459b":"plt.figure(figsize=(8,8))\nsns.violinplot(x='Fare',data=test)\nplt.show()","cfe8a317":"test['Fare'] = test['Fare'].replace(np.nan,train.Fare.median())","228217b3":"test.Fare.isnull().sum()","6f27a804":"round(train.Age.isnull().sum()*100\/len(train),2)","840f6585":"train.Age.isnull().sum()","06eb4cf3":"train.Age.describe()","748c618f":"plt.figure(figsize=(8,8))\nsns.violinplot(x='Age',data=train)\nplt.show()","16874bb2":"train['Age'] = train['Age'].replace(np.nan,train.Age.median())","8e5daa41":"train['Age'].isnull().sum()","b59ed247":"round(test.Age.isnull().sum()*100\/len(test),2)","7c4aea49":"test.Age.isnull().sum()","ed0aef9e":"test.Age.describe()","dbdbe2b5":"plt.figure(figsize=(8,8))\nsns.violinplot(x='Age',data=test)\nplt.show()","c818b899":"test['Age'] = test['Age'].replace(np.nan,train.Age.median())","f7bdc878":"test['Age'].isnull().sum()","a52bf80b":"round(train.Embarked.isnull().sum()*100\/len(train),2)","9b187cef":"train.Embarked.isnull().sum()","584ebd17":"train.Embarked.value_counts(ascending=False)","1888f9ae":"train['Embarked'] = train['Embarked'].replace(np.nan,train.Embarked.mode()[0])","d6c39119":"train.Embarked.mode()","3e4046fa":"train.Embarked.isnull().sum()","a35faf2d":"train.isnull().sum()","d9215735":"test.isnull().sum()","a2a4e221":"plt.figure(figsize = (10,10))\nsns.heatmap(train.corr(),annot = True,cmap=\"tab20c\")\nplt.show()","9d3d00a9":"sns.pairplot(train)\nplt.show()","0f7ac4ba":"plt.figure(figsize=(8,8))\nax = sns.countplot(x='Pclass',data=train,hue=\"Survived\")\nbars = ax.patches\nhalf = int(len(bars)\/2)\nleft_bars = bars[:half]\nright_bars = bars[half:]\n\nfor left, right in zip(left_bars, right_bars):\n    height_l = left.get_height()\n    height_r = right.get_height()\n    total = height_l + height_r\n\n    ax.text(left.get_x() + left.get_width()\/2., height_l + 10, '{0:.0%}'.format(height_l\/total), ha=\"center\")\n    ax.text(right.get_x() + right.get_width()\/2., height_r + 10, '{0:.0%}'.format(height_r\/total), ha=\"center\")","e2cc1a50":"plt.figure(figsize=(8,8))\nax = sns.countplot(x='Sex',data=train,hue=\"Survived\")\nbars = ax.patches\nhalf = int(len(bars)\/2)\nleft_bars = bars[:half]\nright_bars = bars[half:]\n\nfor left, right in zip(left_bars, right_bars):\n    height_l = left.get_height()\n    height_r = right.get_height()\n    total = height_l + height_r\n\n    ax.text(left.get_x() + left.get_width()\/2., height_l + 10, '{0:.0%}'.format(height_l\/total), ha=\"center\")\n    ax.text(right.get_x() + right.get_width()\/2., height_r + 10, '{0:.0%}'.format(height_r\/total), ha=\"center\")","af19f93d":"plt.figure(figsize=(8,8))\nsns.violinplot(y='Age',x='Survived',hue='Survived',data=train)\nplt.show()","07d02bec":"train.Age[train.Survived==1].describe()\n","a1dcf85a":"train.Age[train.Survived==0].describe()","4d338cb4":"train['Family']= train['SibSp']+ train['Parch']+ 1 #including the passenger him\/herself\ntrain=train.drop(['SibSp','Parch'],axis=1)\ntrain.head()","bf63cfb3":"plt.figure(figsize=(20,8))\nsns.violinplot(y='Age',x='Family',hue='Survived',data=train)\nplt.show()","b8bb3f27":"train.Family[train.Survived==1].describe()","7ec82109":"print('Percentage of People Survived with their family member count')\ntrain.Family[train.Survived==1].value_counts()* 100\/len(train)","edbc7062":"print('Number of People Survived with their family member count')\ntrain.Family[train.Survived==1].value_counts()","802a3c39":"print('Perceptage in total Survival with family count as ')\ntrain.Family[train.Survived==1].value_counts()* 100\/len(train.Family[train.Survived==1])","8e10cde4":"train.Family[train.Survived==0].describe()","ce5c3816":"print('Perecentage of People Not Survived with their family member count')\ntrain.Family[train.Survived==0].value_counts()* 100\/len(train)","b0bbdee1":"print('Perceptage in total Death with family count as ')\ntrain.Family[train.Survived==0].value_counts()* 100\/len(train.Family[train.Survived==0])","6a43a270":"print('Number of People Not Survived with their family member count')\ntrain.Family[train.Survived==0].value_counts()","ff47e0da":"plt.figure(figsize=(20,8))\nax = sns.countplot(x='Family',data=train,hue=\"Survived\")\nbars = ax.patches\nhalf = int(len(bars)\/2)\nleft_bars = bars[:half]\nright_bars = bars[half:]\n\nfor left, right in zip(left_bars, right_bars):\n    height_l = left.get_height()\n    height_r = right.get_height()\n    total = height_l + height_r\n\n    ax.text(left.get_x() + left.get_width()\/2., height_l + 10, '{0:.0%}'.format(height_l\/total), ha=\"center\")\n    ax.text(right.get_x() + right.get_width()\/2., height_r + 10, '{0:.0%}'.format(height_r\/total), ha=\"center\")","2896b21a":"test['Family']= test['SibSp']+ test['Parch']+ 1 #including the passenger him\/herself\ntest=test.drop(['SibSp','Parch'],axis=1)\ntest.head()","63e5cfa2":"train=train.drop(['Name','Ticket'],axis=1)\ntrain.head()","183e313d":"test=test.drop(['Name','Ticket'],axis=1)\ntest.head()","c9372149":"plt.figure(figsize=(8,8))\nsns.violinplot(y='Fare',x='Survived',hue='Survived',data=train)\nplt.show()","7d7aa6c2":"train.Fare[train.Survived==1].describe()","baaa63ab":"train.Fare[train.Survived==0].describe()","fa056f99":"train.Cabin.value_counts()","b2fc8820":"plt.figure(figsize=(32,8))\nax=sns.barplot(x='Cabin',y='Fare',hue='Survived',data=train)\nplt.xticks(rotation=90)\nplt.show()","9471a53d":"train.Cabin[train.Survived==0].value_counts(ascending=False)*100\/len(train.Cabin[train.Survived==0])","c10bb50b":"train.Cabin[train.Survived==1].value_counts(ascending=False)*100\/len(train.Cabin[train.Survived==1])","e3357a42":"plt.figure(figsize=(8,8))\nax = sns.countplot(x='Embarked',data=train,hue=\"Survived\")\nbars = ax.patches\nhalf = int(len(bars)\/2)\nleft_bars = bars[:half]\nright_bars = bars[half:]\n\nfor left, right in zip(left_bars, right_bars):\n    height_l = left.get_height()\n    height_r = right.get_height()\n    total = height_l + height_r\n\n    ax.text(left.get_x() + left.get_width()\/2., height_l + 10, '{0:.0%}'.format(height_l\/total), ha=\"center\")\n    ax.text(right.get_x() + right.get_width()\/2., height_r + 10, '{0:.0%}'.format(height_r\/total), ha=\"center\")","53dd4d9a":"train.Embarked.value_counts()","8cceae2c":"train.Embarked.value_counts()*100\/len(train)","bcd73e24":"train.Embarked[train.Survived==0].value_counts(ascending=False)","ee1268ec":"train.Embarked[train.Survived==0].value_counts(ascending=False)*100\/len(train.Embarked[train.Survived==0])","f605203f":"train.Embarked[train.Survived==1].value_counts(ascending=False)","f7de909e":"train.Embarked[train.Survived==1].value_counts(ascending=False)*100\/len(train.Embarked[train.Survived==1])","14e0a1a7":"len(train.Cabin.unique())","81b691e2":"test=test.drop(['Cabin'],axis=1)\ntest.head()","88dd4889":"train=train.drop(['Cabin'],axis=1)\ntrain.head()","95dfee74":"train.info()","82385817":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\ntrain[['Age', 'Fare','Family']]= scaler.fit_transform(train[['Age', 'Fare','Family']])\ntrain.head()","27a19288":"test[['Age', 'Fare','Family']]= scaler.transform(test[['Age', 'Fare','Family']])\ntest.head()","d6e36723":"# Creating a dummy variable for some of the categorical variables and dropping the first one.\ndummy1 = pd.get_dummies(train[['Pclass', 'Sex','Embarked']], drop_first=True)\n\n# Adding the results to the master dataframe\ntrain = pd.concat([train, dummy1], axis=1)\ntrain.head()","d7d89187":"train=train.drop(['Pclass', 'Sex','Embarked'],axis=1)\ntrain.head()","cf7ad0e2":"# Creating a dummy variable for some of the categorical variables and dropping the first one.\ndummy2 = pd.get_dummies(test[['Pclass', 'Sex','Embarked']], drop_first=True)\n\n# Adding the results to the master dataframe\ntest = pd.concat([test, dummy2], axis=1)\ntest.head()","541fc5d4":"test=test.drop(['Pclass', 'Sex','Embarked'],axis=1)\ntest.head()","3fd1cdd3":"### Checking the Survived Rate\nSurvived = (sum(train['Survived'])\/len(train['Survived'].index))*100\nSurvived","dc4314b5":"train['Survived']=train['Survived'].astype('uint8')","f5c4e9be":"# Let's see the correlation matrix \nplt.figure(figsize = (10,10))   \nsns.heatmap(train.corr(),annot = True,cmap=\"tab20c\")\nplt.show()","61f65a6a":"y_train=train.pop('Survived')\nX_train=train","a3220cbc":"X_train.head()","867a9e72":"y_train.head()","9c6d10e9":"import statsmodels.api as sm\n# Logistic regression model\nlogm1 = sm.GLM(y_train,(sm.add_constant(X_train)), family = sm.families.Binomial())\nlogm1.fit().summary()","4ed53fd9":"from sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression()\nfrom sklearn.feature_selection import RFE\nrfe = RFE(logreg, 5)             \nrfe = rfe.fit(X_train, y_train)","accb96c6":"list(zip(X_train.columns, rfe.support_, rfe.ranking_))","ca359ee2":"col = X_train.columns[rfe.support_]\ncol","5989b040":"X_train.columns[~rfe.support_]","732ff4b4":"X_train_sm = sm.add_constant(X_train[col])\nlogm2 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\nres = logm2.fit()\nres.summary()","583efa38":"# Getting the predicted values on the train set\ny_train_pred = res.predict(X_train_sm)\ny_train_pred[:10]","d65608c5":"y_train_pred = y_train_pred.values.reshape(-1)\ny_train_pred[:10]","3d261489":"y_train_pred_final = pd.DataFrame({'Survived':y_train.values, 'Survived_Prob':y_train_pred})\ny_train_pred_final['PassengerId'] = y_train.index\ny_train_pred_final.head()","315c87cd":"y_train_pred_final['predicted'] = y_train_pred_final.Survived_Prob.map(lambda x: 1 if x > 0.5 else 0)\n\n# Let's see the head\ny_train_pred_final.head()","64ffb0a5":"from sklearn import metrics\n# Confusion matrix \nconfusion = metrics.confusion_matrix(y_train_pred_final.Survived, y_train_pred_final.predicted )\nprint(confusion)","18eebddd":"# Let's check the overall accuracy.\nprint(metrics.accuracy_score(y_train_pred_final.Survived, y_train_pred_final.predicted))","bcc706c2":"# Check for the VIF values of the feature variables. \nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train[col].columns\nvif['VIF'] = [variance_inflation_factor(X_train[col].values, i) for i in range(X_train[col].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","cd949486":"TP = confusion[1,1] # true positive \nTN = confusion[0,0] # true negatives\nFP = confusion[0,1] # false positives\nFN = confusion[1,0] # false negatives","4b60d535":"# Let's see the sensitivity of our logistic regression model\nTP \/ float(TP+FN)","a89fd699":"# Let us calculate specificity\nTN \/ float(TN+FP)","c714f68b":"# Calculate false postive rate - \nprint(FP\/ float(TN+FP))","1715d143":"# positive predictive value \nprint (TP \/ float(TP+FP))","f0adaa84":"# Negative predictive value\nprint (TN \/ float(TN+ FN))","95268763":"def draw_roc( actual, probs ):\n    fpr, tpr, thresholds = metrics.roc_curve( actual, probs,\n                                              drop_intermediate = False )\n    auc_score = metrics.roc_auc_score( actual, probs )\n    plt.figure(figsize=(5, 5))\n    plt.plot( fpr, tpr, label='ROC curve (area = %0.2f)' % auc_score )\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate or [1 - True Negative Rate]')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver operating characteristic example')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n\n    return None","e6649d04":"fpr, tpr, thresholds = metrics.roc_curve( y_train_pred_final.Survived, y_train_pred_final.Survived_Prob, drop_intermediate = False )","3f2d7d03":"draw_roc(y_train_pred_final.Survived, y_train_pred_final.Survived_Prob)","742ac833":"# Let's create columns with different probability cutoffs \nnumbers = [float(x)\/10 for x in range(10)]\nfor i in numbers:\n    y_train_pred_final[i]= y_train_pred_final.Survived_Prob.map(lambda x: 1 if x > i else 0)\ny_train_pred_final.head()","8b5fbca9":"# Now let's calculate accuracy sensitivity and specificity for various probability cutoffs.\ncutoff_df = pd.DataFrame( columns = ['prob','accuracy','sensi','speci'])\nfrom sklearn.metrics import confusion_matrix\n\n# TP = confusion[1,1] # true positive \n# TN = confusion[0,0] # true negatives\n# FP = confusion[0,1] # false positives\n# FN = confusion[1,0] # false negatives\n\nnum = [0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]\nfor i in num:\n    cm1 = metrics.confusion_matrix(y_train_pred_final.Survived, y_train_pred_final[i] )\n    total1=sum(sum(cm1))\n    accuracy = (cm1[0,0]+cm1[1,1])\/total1\n    \n    speci = cm1[0,0]\/(cm1[0,0]+cm1[0,1])\n    sensi = cm1[1,1]\/(cm1[1,0]+cm1[1,1])\n    cutoff_df.loc[i] =[ i ,accuracy,sensi,speci]\nprint(cutoff_df)","615c2b7b":"# Let's plot accuracy sensitivity and specificity for various probabilities.\ncutoff_df.plot.line(x='prob', y=['accuracy','sensi','speci'])\nplt.show()","230c398f":"y_train_pred_final['final_predicted'] = y_train_pred_final.Survived_Prob.map( lambda x: 1 if x > 0.38 else 0)\n\ny_train_pred_final.head()","56aaa92c":"# Let's check the overall accuracy.\nmetrics.accuracy_score(y_train_pred_final.Survived, y_train_pred_final.final_predicted)","4cb56b8f":"confusion2 = metrics.confusion_matrix(y_train_pred_final.Survived, y_train_pred_final.final_predicted )\nconfusion2","fd0cab3b":"TP = confusion2[1,1] # true positive \nTN = confusion2[0,0] # true negatives\nFP = confusion2[0,1] # false positives\nFN = confusion2[1,0] # false negatives","2d55a449":"# Let's see the sensitivity of our logistic regression model\nTP \/ float(TP+FN)","3757664b":"# Let us calculate specificity\nTN \/ float(TN+FP)","129945b7":"# Calculate false postive rate - predicting Survived when customer does not have Survived\nprint(FP\/ float(TN+FP))","f55dbc88":"# Positive predictive value \nprint (TP \/ float(TP+FP))","b9b44334":"# Negative predictive value\nprint (TN \/ float(TN+ FN))","6ea7990d":"#Looking at the confusion matrix again","fceac70a":"confusion = metrics.confusion_matrix(y_train_pred_final.Survived, y_train_pred_final.predicted )\nconfusion","28f8a42a":"from sklearn.metrics import precision_score, recall_score\nprecision_score(y_train_pred_final.Survived, y_train_pred_final.predicted)","ed8e92a7":"recall_score(y_train_pred_final.Survived, y_train_pred_final.predicted)","bfe47ce6":"from sklearn.metrics import precision_recall_curve\ny_train_pred_final.Survived.head()","3184e445":"y_train_pred_final.predicted.head()","c93fe98e":"p, r, thresholds = precision_recall_curve(y_train_pred_final.Survived, y_train_pred_final.Survived_Prob)","2ea31502":"plt.plot(thresholds, p[:-1], \"g-\")\nplt.plot(thresholds, r[:-1], \"r-\")\nplt.show()","5f446ecc":"X_test = test[col]\nX_test.head()","deca4d55":"X_test_sm = sm.add_constant(X_test)\nX_test_sm.head()","5f2223a6":"y_test_pred = res.predict(X_test_sm)","4eb0055b":"y_test_pred[:10]","154efc2f":"# Converting y_pred to a dataframe which is an array\ny_pred_1 = pd.DataFrame(y_test_pred)\n# Let's see the head\ny_pred_1.head()","e820c1a0":"y_pred_final= y_pred_1\ny_pred_final.head()","3d808dcb":"# Renaming the column \ny_pred_final= y_pred_final.rename(columns={ 0 : 'Survived_Prob'})","9a5f974c":"# Let's see the head of y_pred_final\ny_pred_final.head()","1c86ea4b":"y_pred_final['final_predicted'] = y_pred_final.Survived_Prob.map(lambda x: 1 if x > 0.38 else 0)","3f04f41b":"y_pred_final.head()","f6a6474d":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": y_pred_final[\"final_predicted\"]\n    })\nsubmission.to_csv('titanic_2218.csv', index=False)","374d7f87":"## Impute Data for missing value ","40b221fb":"\nThe sinking of the Titanic is one of the most infamous shipwrecks in history.\n\nOn April 15, 1912, during her maiden voyage, the widely considered \u201cunsinkable\u201d RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren\u2019t enough lifeboats for everyone onboard, resulting in the death of 1502 out of 2224 passengers and crew.\n\nWhile there was some element of luck involved in surviving, it seems some groups of people were more likely to survive than others.\n\nIn this challenge, we neeedto build a predictive model that answers the question: \u201cwhat sorts of people were more likely to survive?\u201d using passenger data (ie name, age, gender, socio-economic class, etc).","212d6689":"Cabin","11887954":"Similarly, For train data ","cb96cee6":"# Insights\n- Total number of people travelled : 891\n- Number of People travelled were Female : 314\n- Number of People travelled were Female & Survived : 232\n- Number of People travelled were Female & Non Survived : 82\n- Number of People travelled were Male : 577\n- Number of People travelled were Male & Survived : 110\n- Number of People travelled were Male & Non Survived : 467\n- Percentage of People Travelling were Male : 35.24\n- Percentage of People Travelling were Female : 64.75\n- Percentage of Survial in total Survial if Male : 32.16\n- Percentage of Survial in total Survial if Female : 67.83\n\n\n- **Sex increased the chance of survival in that accident**","594cd229":"Fare","dcfe0d7e":"# Step 5: Feature Selection Using RFE","e1a1c997":"Let replace missing value with a variable X, which means it's Unknown","9841ac92":"### Checking VIFs","3cc81350":"We have almost 38.38% Survived rate","d249ce8d":"### Correcting Datatype for the variable in data","15a04b77":"I solved this problem statement, Titanic: Machine Learning from Disaster (  https:\/\/lnkd.in\/e3vg9ZY ) with 8 different approaches :\nYou can check other approaches by clicking either of the link below added.\n1. GBM : https:\/\/lnkd.in\/eDD_FSP\n2. XGBClassifier https:\/\/lnkd.in\/e_2fe7y\n3. Random Forest  https:\/\/lnkd.in\/eAXXtR7\n4. kNN https:\/\/lnkd.in\/eFuJRu5\n5. Naive Bayes https:\/\/lnkd.in\/ens-x37 \n6. SVM https:\/\/lnkd.in\/eDxKCRJ\n7. Decision Tree https:\/\/lnkd.in\/eQ4AsTb\n8. Logistic Regression  https:\/\/lnkd.in\/edqXmeD\n\n**If you find this interesting, do upvote this notebook. Thanks for the valuable time spend & sharing love with us**","156aea09":"Creating new column 'predicted' with 1 if Survived_Prob > 0.5 else 0","66f44163":"Metrics beyond simply accuracy","417f28e0":"# Cabin","63bbd6b1":"From the curve above, 0.38 is the optimum point to take it as a cutoff probability.","23829444":"# Making predictions on the test set","34330d24":"- Since, it's catergorical datatype, we opt for Mode","72da3377":"- People from Cherbourg have more survial than Deaths\n- 72% of poeple have Embarked at Southampton\n","285c4421":"- People with  family member count as  2,3,4 has better chance of surviving than people with family member count as  1,5,6,8 & 11\n- Single Traveller may be tried to help others , resulting max death in total death i.e. 68%\n- Family having members as 8 & 11 died all , may because they were too busy in panic to collect family members before they exit.\n- Single Traveller Couple (Family with 2 members), couple with 1 or 2 children survived the most, i.e. 90% of total survival.\n- Single Traveller has both Survial & Death when account in total dealth or total survival.\n","b01b8768":"# Step 7: Finding Optimal Cutoff Point","882fae3d":"Let replace missing value with a variable X, which means it's Unknown ","cc30ad27":"# Age","68da490d":"# Step 3: Feature Scaling","0904ddd0":"Using sklearn utilities for the same","be89018b":"We can create a column 'Family' which will store values of sibsp + parch, \n\n- sibsp\t-> # of siblings \/ spouses aboard the Titanic\t\n- parch\t-> # of parents \/ children aboard the Titanic  \n\n& later drop these 2 columns from both dataset for uniformity ","88aa6431":"-  There are outliers for this variable, hence, Median is prefered over mean","d0f7e26f":"- There are outliers for this variable, hence, Median is prefered over mean","590d39f6":"Pclass","e1462cfb":"## Variable are correctly classified & added in dataset","0268786b":"# The Challenge","4d82132b":"![Image1](https:\/\/im-media.voltron.voanews.com\/Drupal\/01live-166\/styles\/sourced\/s3\/2019-04\/ECD0C2AF-BA7E-42C8-8098-901A7AF88D11.png?itok=smo7sWLV)","9d7d99cc":"Final Check()","51ece1a7":"Embarked","f467dd9e":"# Step 2: Inspecting the Dataframe","bd6c0cc0":"- There are outliers for this variable, hence, Median is prefered over mean","f9ff507e":"# Decoding Values","9b883c8e":" - Mean Age for people who survived is 28 years, which is less compared with Mean Age for people who didn't survived is 30 years.\n - Median , 75th percentitle is same for both cases","c7f89641":"Drop Already existing Columns ","adea89fd":"An ROC curve demonstrates several things:\n\n* It shows the tradeoff between sensitivity and specificity (any increase in sensitivity will be accompanied by a decrease in specificity).\n* The closer the curve follows the left-hand border and then the top border of the ROC space, the more accurate the test.\n* The closer the curve comes to the 45-degree diagonal of the ROC space, the less accurate the test.","00ca1f74":"it's Catergorical data","a0fbab66":"All variables have a good value of VIF. So we need not drop any more variables and we can proceed with making predictions using this model only","b3ba28c0":"# Step 5: Model Building","0e2dca2d":"Pclass","bcd48fd1":"## Precision and recall tradeoff","fde0bd93":"To make sure corr shows correct represtations ","1636a5a4":"## Variable are all decoded & added in dataset","07d01b21":"## Add new feature ","45d00b0f":"- 87% of total death toll are from X Cabin , which means they don't had any cabin. They were Class 3 who paid little so, they have no premium service.\n- 60% of total Surviour are from X Cabin , which means they don't had any cabin. They were first who got alert and act fastest.\n- Luxury brough confort & premium services, same was the reason they were last who were alerted.","456058e2":"Survived","d1f03afb":"Embarked","ae321753":"Few Columns' datatype are defaulted as int64 but they are catergorical in nature ","0bae3e19":"Fare","60935556":"# EDA","6f88aefe":"### Checking the Correlation Matrix","466aab86":"Similarly, For testdata, we perform same action","0d8baf91":"- People who survived has bought a ticket with a mean 48.40 compared to  22.11, who are dead\n- People who survived has bought a ticket with a median 26 compared to 10.5, who are dead\n- Premium tickets bought safer seat","ff3ed861":"Step 4: Looking at Correlations","b2d06d8f":"# Step 1: Importing and Merging Data","174b8325":"There 148 unique values for Cabin , this's not important field to be considered. Drop Cabin from both dataset","ae1ee532":"Age","e96b42d7":"I solved this problem statement, Titanic: Machine Learning from Disaster (  https:\/\/lnkd.in\/e3vg9ZY ) with 8 different approaches :\nYou can check other approaches by clicking either of the link below added.\n1. GBM : https:\/\/lnkd.in\/eDD_FSP\n2. XGBClassifier https:\/\/lnkd.in\/e_2fe7y\n3. Random Forest  https:\/\/lnkd.in\/eAXXtR7\n4. kNN https:\/\/lnkd.in\/eFuJRu5\n5. Naive Bayes https:\/\/lnkd.in\/ens-x37 \n6. SVM https:\/\/lnkd.in\/eDxKCRJ\n7. Decision Tree https:\/\/lnkd.in\/eQ4AsTb\n8. Logistic Regression  https:\/\/lnkd.in\/edqXmeD\n\n**If you find this interesting, do upvote this notebook. Thanks for the valuable time spend & sharing love with us**","debbccbe":"Similarly, For testdata, we perform same action","61a4bf5d":"# Precision and Recall","f12a6004":"No Nan records are availble in any datasets","8d8995f1":"# Insights\n- Total number of people travelled : 891\n- Number of People travelled in 1st pclass : 216\n- Number of People travelled in 1st pclass & Survived : 136\n- Number of People travelled in 1st pclass & Non Survived : 80\n- Number of People travelled in 2nd pclass : 184\n- Number of People travelled in 2nd pclass & Survived : 86\n- Number of People travelled in 2nd pclass & Non Survived : 98\n- Number of People travelled in 3rd pclass : 491\n- Number of People travelled in 3rd pclass & Survived : 118\n- Number of People travelled in 3rd pclass & Non Survived : 373\n- Percentage of People Travelling in 1st pclass : 24.24\n- Percentage of People Travelling in 2nd pclass : 20.65\n- Percentage of People Travelling in 3rd pclass : 55.10\n- Percentage of Survial in total Survial if travelling in 1st plass : 39.78\n- Percentage of Survial if total Survial travelling in 2nd plass : 25.15\n- Percentage of Survial if total Survial travelling in  3rd plass : 34.50\n- Percentage of Survial if travelling in 1st plass : 63\n- Percentage of Survial if travelling in 2nd plass : 47\n- Percentage of Survial if travelling in  3rd plass : 24\n\n- **Premium cost increased the chance of survival in that accident**\n\n","bafbabf1":"It's Catergorical data","b9174d9c":"# Name & Ticket Number are not an important feature for prediction ","2146f283":"# Step 6: Plotting the ROC Curve","309ea540":"We found few missing values in few of Columns","cdb6110d":"# Embarked"}}