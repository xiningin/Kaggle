{"cell_type":{"add66331":"code","6a1d1025":"code","2a0ec139":"code","bc30a746":"code","b24d6327":"code","e1a67d67":"code","03cd026d":"code","1397560b":"code","9a0d9c5e":"code","4f5ef0e1":"code","6ecdf181":"code","64b893e5":"code","036b53a7":"code","8e3bf5c5":"code","79cff369":"code","a412492d":"code","24d3785b":"code","c9004d82":"code","ef2e5240":"code","96ae7f28":"code","2a3da23b":"code","41eccd57":"code","66260af6":"code","ea18586e":"code","2ef32ec5":"code","33611846":"code","70012912":"code","46a24953":"code","29ae5772":"code","4e77c786":"code","49109f71":"code","f5f20b2f":"code","4d9a5838":"code","66d05f3d":"code","ef3e568c":"code","8447dc80":"code","5ed2853d":"code","09f3ba15":"code","c6d9225b":"code","a0d786ff":"code","26c1628a":"code","79e50661":"code","81abc83c":"code","443bb400":"code","09e326f8":"code","835099b5":"code","36d906fe":"code","bea97989":"code","968f145e":"code","736b68bb":"code","022d0b90":"code","7ec961b2":"code","1d4f7312":"code","b2dc20c4":"code","5515972d":"code","e7c388fd":"code","4f1cf0a1":"code","283a7747":"code","fdf65d16":"code","6d2f89b2":"code","f82521d6":"code","e3938de0":"code","83bb5379":"code","43141082":"code","d2be4160":"code","30d94974":"code","7394de0a":"code","ad769ae8":"code","84d00129":"code","24ce95db":"code","5e78486c":"code","83a0bad8":"code","0600c4eb":"code","7cf01ee0":"code","1df0f764":"code","d6d4f314":"code","fb7c478e":"code","65dc8a9b":"code","e0863d81":"code","7e597991":"code","3af17528":"code","ee35911a":"code","3cbf5d32":"code","631b9a06":"code","1678d6a2":"code","b717ca4f":"code","7eb2d552":"code","a7b9d663":"code","96feb6fd":"markdown","9814544e":"markdown","403c2d7f":"markdown","7236d313":"markdown","49c5bd4c":"markdown","02291633":"markdown","d3e6ba2f":"markdown","40fe4013":"markdown","a7b07460":"markdown","3f8c05af":"markdown","8b1032b0":"markdown","98c5a36d":"markdown","44d9e177":"markdown","9af8e37e":"markdown","b083583c":"markdown","120bd1df":"markdown","fd78a1d8":"markdown","dfb66154":"markdown","27719bd6":"markdown","ab3b8911":"markdown","5ea160ae":"markdown","8c2b4cf9":"markdown","81453346":"markdown","e83a56ee":"markdown","f1298cb3":"markdown","d95d5c69":"markdown","3c8883f6":"markdown","fd5e1f19":"markdown","a41edc28":"markdown","fb8f8189":"markdown","507b64f5":"markdown","0283a016":"markdown","1b979dff":"markdown","31e9fae1":"markdown","a49e274a":"markdown","f9baf25f":"markdown","49508426":"markdown","2b96d453":"markdown","ca0754b2":"markdown","37d5004b":"markdown","9bdb78ca":"markdown","ef3547cf":"markdown","1e122316":"markdown","f9d89a88":"markdown","bc21f19c":"markdown","0ea70c80":"markdown","9882c073":"markdown"},"source":{"add66331":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\nimport seaborn as sns\nfrom collections import Counter\n\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6a1d1025":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_passengerID = test_df[\"PassengerId\"]","2a0ec139":"train_df.columns","bc30a746":"train_df.head()","b24d6327":"train_df.describe()","e1a67d67":"train_df.info()","03cd026d":"def bar_plot(variable):\n    #___\n    #    input: variable ex:\"sex\"\n    #    output:bar plot & value count\n    #___\n    \n    # get a feature\n    var = train_df[variable]\n    # count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    #visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}:\\n {}\".format(variable,varValue))","1397560b":"category1 = [\"Survived\", \"Sex\", \"Pclass\", \"Embarked\", \"SibSp\", \"Parch\"]\nfor c in category1:\n    bar_plot(c)","9a0d9c5e":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n    print (\"{} \\n\".format(train_df[c].value_counts()))","4f5ef0e1":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","6ecdf181":"numericVar = [\"Fare\", \"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","64b893e5":"# Pclass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)","036b53a7":"# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)","8e3bf5c5":"# Sibsp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)","79cff369":"# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)","a412492d":"def detect_outlier(df, features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indices\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indices\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","24d3785b":"train_df.loc[detect_outlier(train_df,[\"Age\", \"SibSp\", \"Parch\", \"Fare\"])]","c9004d82":"#drop outliers\ntrain_df = train_df.drop(detect_outlier(train_df,[\"Age\", \"SibSp\", \"Parch\", \"Fare\"]), axis = 0).reset_index(drop =True)","ef2e5240":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)","96ae7f28":"train_df.head()","2a3da23b":"train_df.columns[train_df.isnull().any()]","41eccd57":"train_df.isnull().sum()","66260af6":"train_df[train_df[\"Embarked\"].isnull()]\n","ea18586e":"train_df.boxplot(column=\"Fare\",by = \"Embarked\")\nplt.show()","2ef32ec5":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]\n","33611846":"train_df[train_df[\"Fare\"].isnull()]","70012912":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","46a24953":"train_df[train_df[\"Fare\"].isnull()]","29ae5772":"list1 =[\"SibSp\", \"Parch\", \"Age\", \"Fare\", \"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot = True, fmt = \".2f\")\nplt.show()","4e77c786":"g = sns.catplot(x = \"SibSp\", y = \"Survived\", data = train_df, kind = \"bar\", height = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","49109f71":"g = sns.factorplot(x = \"Parch\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","f5f20b2f":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","4d9a5838":"g = sns.FacetGrid(train_df, col = \"Survived\")\ng.map(sns.distplot, \"Age\", bins = 25)\nplt.show()","66d05f3d":"g = sns.FacetGrid(train_df, col = \"Survived\", row = \"Pclass\", height = 4)\ng.map(plt.hist, \"Age\", bins = 25)\ng.add_legend()\nplt.show()","ef3e568c":"g = sns.FacetGrid(train_df, row = \"Embarked\", height = 2)\ng.map(sns.pointplot, \"Pclass\", \"Survived\", \"Sex\")\ng.add_legend()\nplt.show()","8447dc80":"g = sns.FacetGrid(train_df, row = \"Embarked\", col = \"Survived\", size = 2.5)\ng.map(sns.barplot, \"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","5ed2853d":"train_df[train_df[\"Age\"].isnull()]","09f3ba15":"sns.factorplot(x= \"Sex\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","c6d9225b":"sns.factorplot(x= \"Sex\", y = \"Age\", hue = \"Pclass\", data = train_df, kind = \"box\")\nplt.show()","a0d786ff":"sns.factorplot(x= \"Parch\", y = \"Age\", data = train_df, kind = \"box\")\nsns.factorplot(x= \"SibSp\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","26c1628a":"df[\"Sex\"] = [1 if i == \"male\" else 0 for i in df[\"Sex\"]]","79e50661":"\nsns.heatmap(train_df[[\"Age\", \"Sex\", \"SibSp\", \"Parch\", \"Pclass\"]].corr(), annot = True)","81abc83c":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) &(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med   ","443bb400":"train_df[train_df[\"Age\"].isnull()]","09e326f8":"train_df[\"Name\"].head(10)","835099b5":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","36d906fe":"train_df[\"Title\"].head(10)","bea97989":"sns.countplot(x=\"Title\", data=train_df)\nplt.xticks(rotation=60)\nplt.show()","968f145e":"# convert to categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]\ntrain_df[\"Title\"].head(20)","736b68bb":"sns.countplot(x=\"Title\", data=train_df)\nplt.xticks(rotation=60)\nplt.show()","022d0b90":"g = sns.factorplot(x=\"Title\", y=\"Survived\", data=train_df, kind=\"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","7ec961b2":"train_df.drop(labels = [\"Name\"], axis=1, inplace=True)","1d4f7312":"train_df.head()","b2dc20c4":"train_df = pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()","5515972d":"train_df[\"FSize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] +1","e7c388fd":"train_df.head()","4f1cf0a1":"g = sns.factorplot(x=\"FSize\", y=\"Survived\", data=train_df, kind=\"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","283a7747":"train_df[\"family_size\"] = [1 if i<5 else 0 for i in train_df[\"FSize\"]]","fdf65d16":"train_df.head(10)","6d2f89b2":"sns.countplot(x=\"family_size\", data=train_df)\nplt.show()","f82521d6":"g = sns.factorplot(x=\"family_size\", y=\"Survived\", data=train_df, kind=\"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","e3938de0":"train_df = pd.get_dummies(train_df,columns=[\"family_size\"])\ntrain_df.head()","83bb5379":"train_df[\"Embarked\"].head()","43141082":"sns.countplot(x=\"Embarked\", data=train_df)\nplt.show()","d2be4160":"train_df = pd.get_dummies(train_df,columns=[\"Embarked\"])\ntrain_df.head()","30d94974":"train_df[\"Ticket\"].head(20)","7394de0a":"tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","ad769ae8":"train_df[\"Ticket\"].head()","84d00129":"train_df.head()","24ce95db":"train_df = pd.get_dummies(train_df,columns=[\"Ticket\"], prefix = \"T\")","5e78486c":"train_df.head()","83a0bad8":"sns.countplot(x=\"Pclass\", data=train_df)\nplt.show()","0600c4eb":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df,columns=[\"Pclass\"])\ntrain_df","7cf01ee0":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns=[\"Sex\"])","1df0f764":"train_df","d6d4f314":"train_df.drop(labels= [\"PassengerId\",\"Cabin\"],axis=1,inplace=True)","fb7c478e":"train_df.columns","65dc8a9b":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","e0863d81":"train_df_len","7e597991":"test = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"],axis = 1, inplace = True)","3af17528":"test.head()","ee35911a":"train = train_df[:train_df_len]\nx_train = train.drop(labels= \"Survived\",axis=1)\ny_train = train[\"Survived\"]\nx_train, x_test, y_train ,y_test = train_test_split(x_train, y_train, test_size=0.33, random_state=42)\nprint(\"x_train\", len(x_train))\nprint(\"x_test\", len(x_test))\nprint(\"y_train\", len(y_train))\nprint(\"y_test\", len(y_test))\nprint(\"test\", len(test))","3cbf5d32":"logreg = LogisticRegression()\nlogreg.fit(x_train, y_train)\nacc_logreg_train = round(logreg.score(x_train, y_train)*100,2)\nacc_logreg_test = round(logreg.score(x_test, y_test)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_logreg_train))\nprint(\"Testing Accuracy: % {}\".format(acc_logreg_test))","631b9a06":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","1678d6a2":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(x_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","b717ca4f":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","7eb2d552":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(x_train, y_train)\nprint(accuracy_score(votingC.predict(x_test),y_test))","a7b9d663":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_passengerID, test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","96feb6fd":"<a id = \"31\"><\/a><br>\n## 9.2. Simple Logistic Regression","9814544e":"<a id = \"32\"><\/a><br>\n## 9.3. Hyperparameter Tuning - Grid Search - Cross Validation\nWe will compare 5 machine learning classifier and evaluate mean accuracy of each them by stratified cross validation.\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","403c2d7f":"<a id = \"7\"><\/a><br>\n# 4. Outlier Detection","7236d313":"<a id = \"6\"><\/a><br>\n# 3. Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","49c5bd4c":"<a id = \"27\"><\/a><br>\n## 8.6. Sex","02291633":"<a id = \"3\"><\/a><br>\n## 2.1. Univariate Variable Analysis\n* Categorical Variable Analysis: Survived, sex, pclass, embarked, cabin, name, ticket, sibsp, parch.\n* Numerical Variable Analysis: Age, passengerid, fare.","d3e6ba2f":"* SibSp and Parch can be used for new feature extraction with treshold = 3.\n* Small  families have more chance to survive.\n* There is astandard deviation in survivel of passenger with parch = 3.","40fe4013":"<a id = \"23\"><\/a><br>\n# 8.2. Family Size","a7b07460":"* Age is not correlated with sex but it is correlated with parch, sibsp and pclass.","3f8c05af":"* float64(2): Fare, age.\n* int64(5): Pclass, sibsp, parch, passengerid, survived.\n* objects(5): Cabin, embarked, ticket, name, sex.","8b1032b0":"<a id = \"5\"><\/a><br>\n## 2.3. Numerical Variable Analysis:","98c5a36d":"<a id = \"15\"><\/a><br>\n## 6.4. Pclass - Survived","44d9e177":"* Having a lot of SibSp have less chance to survive.\n* If SibSp = 0 or 0r 2 passenger has more chance to survive.\n* We can consider a new feature describing these categories.","9af8e37e":"Small families have more chance to survive than large families.","b083583c":"* Female passengers have much better survival rate than male passengers.\n* Male passengers have better survival rate in pclass 3 in C.\n* Embarked and sex will be used in training.","120bd1df":"# Introduction:\n*        RMS Titanic was a British passenger liner operated by the White Star Line that sank in the North Atlantic Ocean in the early morning hours of 15 April 1912, after striking an iceberg during her maiden voyage from Southampton to New York City. Of the estimated 2,224 passengers and crew aboard, more than 1,500 died, making the sinking one of modern history's deadliest peacetime commercial marine disasters. RMS Titanic was the largest ship afloat at the time she entered service and was the second of three Olympic-class ocean liners operated by the White Star Line. She was built by the Harland and Wolff shipyard in Belfast. Thomas Andrews, chief naval architect of the shipyard at the time, died in the disaster.(Wikipedia)\n\n<font color = \"blue\">\n\n# Content:\n\n* [1. Load and Check Data](#1)\n* [2. Variable Description](#2)\n  * [2.1. Univariate Variable Analysis](#3)\n  * [2.2. Categorical Variable Analysis](#4)\n  * [2.3. Numerical Variable Analysis](#5)\n* [3. Basic Data Analysis](#6)\n* [4. Outlier Detection](#7)\n* [5. Missing Value](#8)\n  * [5.1. Find Missing Value](#9)\n  * [5.2. Fill Missing Value](#10)\n* [6. Visualization](#11)\n  * [6.1. Correlation Between SibSp - Parch - Age - Fare - Survived](#12)\n  * [6.2. SibSp - Survived](#13)\n  * [6.3. Parch - Survived](#14)\n  * [6.4. Pclass - Survived](#15)\n  * [6.5. Age - Survived](#16)\n  * [6.6. Pclass - Survived - Age](#17)\n  * [6.7. Embarked - Sex - Pclass - Survived](#18)\n  * [6.8. Embarked - Sex - Fare - Survived](#19)\n* [7. Fill Missing: Age Feature](#20)\n* [8. Feature Engineering](#21)\n  * [8.1. Name -Title](#22)\n  * [8.2. Family Size](#23)\n  * [8.3. Embarked](#24)\n  * [8.4. Ticket](#25)\n  * [8.5. Pclass](#26)\n  * [8.6. Sex](#27)\n  * [8.7. Drop Passenger ID and Cabin](#28)\n* [9. Modelling](#29)\n  * [9.1. Train Test Split](#30)\n  * [9.2. Simple Logistic Regression](#31)\n  * [9.3. Hyperparameter Tuning - Grid Search - Cross Validation](#32)\n  * [9.4. Ensemble Modelling](#33)\n* [10. Prediction and Submission](#34)  ","fd78a1d8":"Fare feature seems to have correiation with survived feature (0.26).","dfb66154":"<a id = \"33\"><\/a><br>\n## 9.4. Ensemble Modelling","27719bd6":"* Pclass is important feature for model training.","ab3b8911":"<a id = \"26\"><\/a><br>\n## 8.5. Pclass","5ea160ae":"<a id = \"25\"><\/a><br>\n## 8.4. Ticket","8c2b4cf9":"<a id = \"17\"><\/a><br>\n## 6.6. Pclass - Survived - Age","81453346":"<a id = \"4\"><\/a><br>\n## 2.2. Categorical Variable Analysis:\n","e83a56ee":"<a id = \"13\"><\/a><br>\n## 6.2. SibSp - Survived","f1298cb3":"<a id = \"30\"><\/a><br>\n## 9.1. Train Test Split","d95d5c69":"<a id = \"2\"><\/a><br>\n## 2. Variable Description\n\n1. PassengerId: Unique id munber to each passenger.\n1. Survived: Passenger survided (1) or died (0).\n1. Pclass: Passenger class.\n1. Name: Name of passenger.\n1. Sex: Gender of passenger.\n1. Age: Age of passenger.\n1. SibSp: Number of siblings\/spouses.\n1. Parch: Number of parents\/children.\n1. Ticket: Ticket number.\n1. Fare: Amount of money spent on ticket.\n1. Cabin: Cabin category.\n1. Embarked: Port where passenger embarked (C = Cherbourg, Q = Queenstown, S = Southhampton)\n    \n    ","3c8883f6":"<a id = \"10\"><\/a><br>\n## 5.2. Fill Missing Value\n\n* embarked has 2 missing value.\n* Fare has 1 missing value.","fd5e1f19":"<a id = \"14\"><\/a><br>\n## 6.3. Parch - Survived","a41edc28":"<a id = \"12\"><\/a><br>\n## 6.1. Correlation Between SibSp - Parch - Age - Fare - Survived","fb8f8189":"<a id = \"9\"><\/a><br>\n## 5.1. Find Missing Value","507b64f5":"<a id = \"18\"><\/a><br>\n## 6.7. Embarked - Sex - Pclass - Survived","0283a016":"<a id = \"11\"><\/a><br>\n# 6. Visualization\n","1b979dff":"<a id = \"28\"><\/a><br>\n## 8.7. Drop Passenger ID and Cabin","31e9fae1":"* Passengers who pay higher fare have better survival.\n* Fare can be used as categorical for training.\n","a49e274a":"<a id = \"20\"><\/a><br>\n# 7. Fill Missing: Age Feature","f9baf25f":"<a id = \"34\"><\/a><br>\n# 10. Prediction and Submission","49508426":"<a id = \"19\"><\/a><br>\n## 6.8. Embarked - Sex - Fare - Survived","2b96d453":"* Age <= 10 has a high survival rate,\n* Oldest passenger (80) survived,\n* large number of 20 years old did not survive,\n* Most passengers are in 15-25 age range,\n* Use age feature in tarining \n* Use age distribution for missing value of age feature.","ca0754b2":"<a id = \"8\"><\/a><br>\n# 5. Missing Value\n   *   [Find Missing Value]\n   *   [Fill Missing Value]","37d5004b":"<a id = \"21\"><\/a><br>\n# 8. Feature Engineering","9bdb78ca":"<a id = \"1\"><\/a><br>\n## 1. Load and Check Data:\n","ef3547cf":"<a id = \"16\"><\/a><br>\n## 6.5. Age - Survived","1e122316":"<a id = \"29\"><\/a><br>\n# 9. Modelling","f9d89a88":"<a id = \"24\"><\/a><br>\n# 8.3. Embarked","bc21f19c":"* First class passenger is older than second class and second class is older than third class.\n","0ea70c80":"<a id = \"22\"><\/a><br>\n# 8.1. Name - Title","9882c073":"* Sex is not informative for age prediction. Age distribution seems to be same."}}