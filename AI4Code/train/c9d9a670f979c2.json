{"cell_type":{"6c5a85a5":"code","849886b3":"code","07d9ea79":"code","3b216fa4":"code","dac066a3":"code","98eb1132":"code","154702ad":"code","3d7f6181":"code","aae772a3":"code","a289d8cf":"code","798dcfbb":"code","773fdefa":"code","0020dc00":"markdown","5d1f0442":"markdown","56178d95":"markdown"},"source":{"6c5a85a5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","849886b3":"import numpy as np\nimport pandas as pd\nfrom keras.utils import np_utils\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Dropout,Conv2D,MaxPool2D,Flatten,BatchNormalization\nfrom keras.optimizers import Adam,Nadam\nfrom sklearn.model_selection import train_test_split\nfrom keras import regularizers\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.utils import shuffle\nimport matplotlib.pyplot as plt ","07d9ea79":"train = pd.read_csv('\/kaggle\/input\/Kannada-MNIST\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/Kannada-MNIST\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/Kannada-MNIST\/sample_submission.csv')\ndisplay(train.shape,test.shape)","3b216fa4":"Id = test['id']","dac066a3":"x_train, x_test, y_train, y_test = train_test_split(train.iloc[:, 1:], train.iloc[:, 0], test_size=0.05)\ndisplay(x_train.shape,y_train.shape,x_test.shape,y_test.shape)","98eb1132":"x_train, y_train = shuffle(x_train, y_train)","154702ad":"# (60000,784)->(60000,28,28,1)\nx_train = x_train.values.reshape(-1,28,28,1)\/255.0\nx_test = x_test.values.reshape(-1,28,28,1)\/255.0\n\ny_train = np_utils.to_categorical(y_train,num_classes=10)\ny_test = np_utils.to_categorical(y_test,num_classes=10)","3d7f6181":"imagegen = ImageDataGenerator(\n            rotation_range = 10,     \n            width_shift_range = 0.2, \n            height_shift_range = 0.2,         \n            shear_range = 20,       \n            zoom_range = 0.2  \n             )\nimagegen.fit(x_train)","aae772a3":"model = Sequential()\n\nmodel.add(Conv2D(input_shape=(28, 28, 1),filters=64, kernel_size=(3, 3), padding='SAME', activation='relu'))\nmodel.add(Conv2D(64, kernel_size=(3, 3), padding='SAME', activation='relu'))\nmodel.add(BatchNormalization(momentum=0.5))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(filters=128, kernel_size=(3, 3), padding='SAME', activation='relu'))\nmodel.add(Conv2D(filters=128, kernel_size=(3, 3), padding='SAME', activation='relu'))\nmodel.add(BatchNormalization(momentum=0.5))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(filters=256, kernel_size=(3, 3), padding='SAME', activation='relu'))\nmodel.add(Conv2D(filters=256, kernel_size=(3, 3), padding='SAME', activation='relu'))\nmodel.add(BatchNormalization(momentum=0.5))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(BatchNormalization())\nmodel.add(Dense(10, activation = \"softmax\"))\n\n\nmodel.compile(optimizer=Nadam(),loss='categorical_crossentropy',metrics=['accuracy'])\n\nfit = model.fit_generator(imagegen.flow(x_train,y_train,batch_size=128),epochs=80,validation_data=(x_test,y_test),verbose = 1,steps_per_epoch=100)\n\nloss,accuracy = model.evaluate(x_test,y_test)\n\nprint('test loss',loss)\nprint('test accuracy',accuracy)","a289d8cf":"plt.figure(figsize=(12,6))\nplt.plot(fit.history['loss'])\nplt.plot(fit.history['val_loss'])\nplt.title('model train vs validation loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'], loc='upper right')","798dcfbb":"test = test.drop(['id'],axis=1)\ntest = test.values.reshape(test.shape[0],28,28,1)\/255.0\nFINAL_PREDS = model.predict_classes(test)","773fdefa":"submission = pd.DataFrame({ 'id': Id,\n                            'label': FINAL_PREDS })\nsubmission.to_csv(path_or_buf =\"submission.csv\", index=False)\nsubmission.head()","0020dc00":"Load Data","5d1f0442":"model","56178d95":"Data preprocessing"}}