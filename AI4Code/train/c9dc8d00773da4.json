{"cell_type":{"25bfcd58":"code","c70183f4":"code","27527f5b":"code","7721e025":"code","724a25ff":"code","81edca2a":"code","f136dbd7":"code","4f7ad83f":"code","b50fb90e":"code","71321de8":"markdown","6aa64b87":"markdown","055b6ab8":"markdown","290521b0":"markdown","b8f96f67":"markdown","75606fa3":"markdown","8b4e0ce4":"markdown","137ec7a3":"markdown","4380bde5":"markdown"},"source":{"25bfcd58":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        fullpath = os.path.join(dirname, filename)\n        print('{}:{} MB'.format(fullpath, round(os.path.getsize(fullpath) \/ (1024.0 ** 2), 1)))\n\n# Any results you write to the current directory are saved as output.","c70183f4":"train_image_0 = pd.read_parquet('\/kaggle\/input\/bengaliai-cv19\/train_image_data_0.parquet')","27527f5b":"train_image_0.shape","7721e025":"train_image_0.head()","724a25ff":"train_image_0.index","81edca2a":"train_image_data = train_image_0.drop('image_id', axis=1)","f136dbd7":"train_image_data.head()","4f7ad83f":"IMAGE_ROW = 137 \nIMAGE_COLUMN = 236\n\nimg0 = train_image_data[0:1].values[0].reshape([IMAGE_ROW, IMAGE_COLUMN])\nimg0","b50fb90e":"from matplotlib import pylab as plt\n\nplt.imshow(img0)","71321de8":"# Create image data","6aa64b87":"# Image num\n50210","055b6ab8":"# What's parquet file\n\nI have not use with `parquet` file and do not know how to use it.\n\nFor now, I want to retrieve image information.","290521b0":"# Row info\n\n`137 * 236 = 32332`\n\n0 ~ 255 grayscale data\n\nwith `image_id`","b8f96f67":"# Data info\n\nhttps:\/\/www.kaggle.com\/c\/bengaliai-cv19\/data\n\n(train\/test).parquet\nEach parquet file contains tens of thousands of 137x236 grayscale images. The images have been provided in the parquet format for I\/O and space efficiency. Each row in the parquet files contains an image_id column, and the flattened image.","75606fa3":"# Data size","8b4e0ce4":"# Load data\n\nIt takes a long time to read because the data size is large.","137ec7a3":"# Show image","4380bde5":"# Remove image_id."}}