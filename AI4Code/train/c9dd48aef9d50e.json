{"cell_type":{"ecc72877":"code","ab97a152":"code","3016e211":"code","d2db369e":"code","3edd111c":"markdown","d2404493":"markdown","0759b820":"markdown","71cd537f":"markdown"},"source":{"ecc72877":"import sqlite3\nimport pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime\n\nsql_database = '\/kaggle\/input\/secondhand-car-market-data-parsing-dataset-v1\/kaggle_sqlite'\nconn = sqlite3.connect(sql_database)\n\ntest_query_df_v3 = pd.DataFrame()\ntest_query_df_v3 = pd.read_sql(\"\"\"\n                            SELECT \n                                brand_name as 'brand',\n                                strftime('%m', upload_date) as 'upload_month',\n                                ad_price as 'price',\n                                mileage as 'mileage'\n                            FROM advertisements\n                            JOIN brand ON advertisements.brand_id = brand.brand_id\n                            WHERE brand_name = 'BMW'\n                            OR brand_name = 'AUDI';\n                            \"\"\",\n                            conn,\n                            parse_dates=['upload_date'])  #parsing the date correctly\n\n","ab97a152":"plt.figure(figsize=(25,15))\nsns.set(font_scale=1.0)  #using the default font size\nbc = sns.barplot(x=test_query_df_v3.upload_month,  #creating the barplot\n            y=test_query_df_v3.price,\n            #estimator = max,\n            hue=test_query_df_v3.brand,\n            palette = {'AUDI':'#CB4335','BMW':'#2471A3'},\n            ci= None)\n\ngroupedvalues = test_query_df_v3.groupby(by=['brand','upload_month']).mean().reset_index()  #creating a grouped dataframe (seaborn made it for itself before plotting); sum() method\n\ny_coord_push_const = 100000\nfor month in np.sort(test_query_df_v3.upload_month.unique()):  #every month from the dataset, iterating over the numpy array\n    plt.text(\n        int(month)-1.25,  #x-coordinate, slightly psuhed\n        int(groupedvalues.loc[(groupedvalues.brand == 'AUDI')&(groupedvalues.upload_month == str(month)), \"price\"].values[0]) + y_coord_push_const,  #y-ccordinate\n        str(groupedvalues.loc[(groupedvalues.brand == 'AUDI')&(groupedvalues.upload_month == str(month)), \"price\"].values[0])[:7],  #text itself\n        rotation = 'vertical',  #text's attributes\n        fontsize = 'x-large',\n        fontstyle = 'oblique'\n        )\n    plt.text(\n        int(month)-0.85,\n        int(groupedvalues.loc[(groupedvalues.brand == 'BMW')&(groupedvalues.upload_month == str(month)), \"price\"].values[0]) + y_coord_push_const,\n        str(groupedvalues.loc[(groupedvalues.brand == 'BMW')&(groupedvalues.upload_month == str(month)), \"price\"].values[0])[:7],\n        rotation = 'vertical',\n        fontsize = 'x-large',\n        fontstyle = 'oblique'\n        )\n\nbc.set_xlabel(\"Month\", fontsize = 20)\nbc.set_ylabel(\"Price (in million HUF)\", fontsize = 20)\nbc.tick_params(labelsize = 15)\n\nplt.setp(bc.get_legend().get_texts(), fontsize = \"20\")  #legend text\nplt.setp(bc.get_legend().get_title(), fontsize = \"20\")  #legend title\n\n#plt.ticklabel_format(style='plain', axis='y')  #y-axis scientific notation turned off","3016e211":"plt.figure(figsize=(25,15))\nsns.set(font_scale=1.0)  #using the default font size\ncc = sns.countplot(\n            x=test_query_df_v3.upload_month,  #creating the barplot\n            hue=test_query_df_v3.brand,\n            palette = {'AUDI':'#CB4335','BMW':'#2471A3'}\n            )\ngroupedvalues = test_query_df_v3.groupby(by=['brand','upload_month']).count().reset_index()  #creating a grouped dataframe (seaborn made it for itself before plotting); count() method\ny_coord_push_const = 10\nfor month in np.sort(test_query_df_v3.upload_month.unique()):  #every month from the dataset, iterating over the numpy array\n    plt.text(\n        int(month)-1.25,  #x-coordinate, slightly psuhed\n        int(groupedvalues.loc[(groupedvalues.brand == 'AUDI')&(groupedvalues.upload_month == str(month)), \"price\"].values[0]) + y_coord_push_const,  #y-ccordinate\n        str(groupedvalues.loc[(groupedvalues.brand == 'AUDI')&(groupedvalues.upload_month == str(month)), \"price\"].values[0])[:7],  #text itself\n        rotation = 'vertical',  #text's attributes\n        fontsize = 'x-large',\n        fontstyle = 'oblique'\n        )\n    plt.text(\n        int(month)-0.85,\n        int(groupedvalues.loc[(groupedvalues.brand == 'BMW')&(groupedvalues.upload_month == str(month)), \"price\"].values[0]) + y_coord_push_const,\n        str(groupedvalues.loc[(groupedvalues.brand == 'BMW')&(groupedvalues.upload_month == str(month)), \"price\"].values[0])[:7],\n        rotation = 'vertical',\n        fontsize = 'x-large',\n        fontstyle = 'oblique'\n        )\n\ncc.set_xlabel(\"Month\", fontsize = 20)\ncc.set_ylabel(\"Count\", fontsize = 20)\ncc.tick_params(labelsize = 15)\n\nplt.setp(cc.get_legend().get_texts(), fontsize = \"20\")  #legend text\nplt.setp(cc.get_legend().get_title(), fontsize = \"20\")  #legend title ","d2db369e":"test_query_df_v3_trimmed = test_query_df_v3.copy()\ntest_query_df_v3_trimmed.drop(test_query_df_v3_trimmed.loc[(test_query_df_v3_trimmed.mileage)>1000000].index, inplace = True)  #outlier values must be droped before the plotting\ntest_query_df_v3_trimmed.drop(test_query_df_v3_trimmed.loc[(test_query_df_v3_trimmed.price<100000)|(test_query_df_v3_trimmed.price>40000000)].index, inplace = True)  #outlier values must be droped before the plotting\nplt.figure(figsize=(25,15))\nsns.set(font_scale=1.0)  #using the default font size\n\nsc = sns.scatterplot(               #creating the plot\n            x=test_query_df_v3_trimmed.price,\n            y=test_query_df_v3_trimmed.mileage,  \n            #hue=test_query_df_v3_trimmed.brand,\n            #palette = {'AUDI':'#CB4335','BMW':'#2471A3'},\n            alpha = 0.2,\n            #size = test_query_df_v3_trimmed.mileage\n            )\nsc.set_xlabel(\"Price\", fontsize = 20)\nsc.set_ylabel(\"Mileage (in kms)\", fontsize = 20)\nsc.tick_params(labelsize = 15)\n#plt.xticks(np.arange(min(test_query_df_v3_trimmed.price), max(test_query_df_v3_trimmed.mileage), step=1))\n\nplt.setp(cc.get_legend().get_texts(), fontsize = \"20\")  #legend text\nplt.setp(cc.get_legend().get_title(), fontsize = \"20\")  #legend title \nplt.ticklabel_format(style='plain', axis='y')  #y-axis scientific notation turned off\nplt.ticklabel_format(style='plain', axis='x')  #x-axis scientific notation turned off\n","3edd111c":"### Some comparsion charts about two popular brands\n* Barplot\n* Countplot\n* Scatterplot\ncreating a lightweight Seaborn based barchart, in order to compare the mean price of the uploaded BMWs and AUDIs during the years.\nFor to start:\n* SQL connection and query for the brand, price, and upload date (just month data relevant now)\n","d2404493":"### Seaborn.Countplot\n\nSince the average offer price of the cars was greatly variable, it is worth a look at the countplot, which is aggregating the average number of cars had been offered for sale each month. The methodology was the same as in case of the barplot. The only key difference was:\n* only the X-axis needed to be provided for Seaborn, rather than both of the axexs","0759b820":"### seaborn.scatterplot\n\nA seaborn based scatterplot, the axes: price and mileage. I set the 'alpha' parameter of the points to the one fifth of the original value. It is easy to identify the \"psychological limits\" in the pricing, they are appearing as columns on the figure. For this plot I did not distinguished the two brands by colors.","71cd537f":"### Seaborn.barplot\n* creating a barplot with seaborn:\n    * X value is the month\n    * Y value is the price\n    * the two brands had been separated (coloring legend)\n* highlighting the values above all the columns:\n    * creating a grouped version of the original database\n    * iterating over the months\n    * for each iteration setting the x,y coordinates and the value (as text) for both of the brands\n* calibrating the axes of the output chart\n\nAs you can see the average price of BMWs is significantly higher than the mean price of Audis. BMWs popularity, reputation (you can decide if it is positive or negative) and brand's image is unquestionably the number one."}}