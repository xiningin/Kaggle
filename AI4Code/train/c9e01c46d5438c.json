{"cell_type":{"4b86f55b":"code","a5308a9b":"code","e584e8fd":"code","7d10bd41":"code","c1c6bedb":"code","294b1f77":"code","ad59f2b5":"code","c04547e4":"code","7efed321":"code","36b1c7ac":"code","deddf470":"code","895bc806":"code","a5c0b128":"code","ef466910":"code","b3862e26":"code","9734ca86":"code","8a364560":"code","7f1f6cff":"code","843c7ee1":"code","72c97c08":"code","c7f93476":"code","530d3863":"code","af579eb4":"code","9b0bf0e2":"code","4031069a":"code","c56d4126":"code","bfbabb59":"code","1c604efe":"code","ff2ad1ef":"code","3be8e235":"code","0bfc0eb5":"code","eda5fb99":"code","fb931f03":"markdown","ec05aa5c":"markdown","063c4afa":"markdown","61cab0e5":"markdown","74162bd3":"markdown","f780cc7d":"markdown"},"source":{"4b86f55b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a5308a9b":"os.chdir('\/kaggle\/input\/predicting-energy-rating-from-raw-data\/')\ndf = pd.read_csv('train_rating_eu.csv')\nprint(df.shape)\ndf.head()","e584e8fd":"df.rating.unique()","7d10bd41":"df.rating.value_counts(normalize=True)","c1c6bedb":"regr =  df.copy()\nregr['rating'].unique()","294b1f77":"orig = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\nvalues = ['12.5', '38.0', '63.0', '88.0', '113.0', '138.0', '163.0']","ad59f2b5":"regr['rating'] = regr['rating'].replace(orig, values)\nregr.rating.unique()","c04547e4":"regr['rating'] = regr['rating'].astype('float64')\nregr['rating'].unique()","7efed321":"regr = regr.drop(['Unnamed: 0', 'building_id', 'site_id'], axis=1)","36b1c7ac":"y = regr['rating']\nX = regr.drop('rating', axis=1)","deddf470":"from sklearn.model_selection import cross_validate\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_squared_error","895bc806":"# creates function to display results\ndef display_results(results):\n    results_df  = pd.DataFrame(results).T\n    results_cols = results_df.columns\n    for col in results_df:\n        results_df[col] = results_df[col].apply(np.mean)\n    return results_df","a5c0b128":"RESULTS = {} # creates an empty dictionary","ef466910":"# defining a function that trains a model using \"cross validate\" on any \"estimator\" or algorithm\ndef evaluate_model(estimator):\n    cv_results = cross_validate(estimator,\n                    X=X, # X = independant variables\n                    y=y, # y = target variable (aka answer)\n                    scoring=\"neg_root_mean_squared_error\", # what error metric to use to compare\n                    cv=3, #number of folds in our cv\n                    return_train_score=True) #Any guesses what this is doing? How could we check?\n    return pd.DataFrame(cv_results).abs().mean().to_dict()","b3862e26":"from sklearn.linear_model import LinearRegression\n\nRESULTS[\"lm\"] = evaluate_model(LinearRegression())\n\npd.DataFrame.from_dict(RESULTS).T","9734ca86":"from sklearn.linear_model import ElasticNet, Lasso, Ridge\n\nRESULTS[\"elasticnet\"] = evaluate_model(ElasticNet()) \nRESULTS[\"lasso\"] = evaluate_model(Lasso())  \nRESULTS[\"ridge\"] = evaluate_model(Ridge())\n\npd.DataFrame.from_dict(RESULTS).T","8a364560":"from sklearn.tree import DecisionTreeRegressor\n\nRESULTS[\"tree\"] = evaluate_model(DecisionTreeRegressor())\npd.DataFrame.from_dict(RESULTS).T","7f1f6cff":"RESULTS[\"tree_4\"] = evaluate_model(DecisionTreeRegressor(max_depth=4))\nRESULTS[\"tree_3\"] = evaluate_model(DecisionTreeRegressor(max_depth=3))\nRESULTS[\"tree_2\"] = evaluate_model(DecisionTreeRegressor(max_depth=2))\npd.DataFrame.from_dict(RESULTS).T","843c7ee1":"tree_4 = DecisionTreeRegressor(max_depth=4)\ntree_4.fit(X,y)","72c97c08":"predictions = tree_4.predict(X)\npred_df = regr.copy()\npred_df['prediction'] = predictions\npred_df.head()","c7f93476":"letter_predictions = []\nfor prediction in predictions:\n    if prediction <= 25.0:\n        letter_predictions.append('A')\n    elif (prediction > 25.0) and (prediction <= 50.0):\n        letter_predictions.append('B')\n    elif (prediction > 50.0) and (prediction <= 75.0):\n        letter_predictions.append('C')\n    elif (prediction > 75.0) and (prediction <= 100.0):\n        letter_predictions.append('D')\n    elif (prediction > 100.0) and (prediction <= 125.0):\n        letter_predictions.append('E')\n    elif (prediction > 125.0) and (prediction <= 150.0):\n        letter_predictions.append('F')\n    else:\n        letter_predictions.append('G')\n        \npred_df['letter_prediction'] = letter_predictions","530d3863":"pred_df.head()","af579eb4":"pred_df['letter_rating'] = df.rating\npred_df","9b0bf0e2":"pred_df = pred_df[['letter_rating', 'letter_prediction']]\npred_df.head()","4031069a":"pred_df[pred_df.letter_rating == pred_df.letter_prediction].shape[0]\/df.shape[0]","c56d4126":"def getAccuracy(predictions, df) :\n    pred_df = df.copy()\n    pred_df['prediction'] = predictions\n    letter_predictions = []\n    for prediction in predictions:\n        if prediction <= 25.0:\n            letter_predictions.append('A')\n        elif (prediction > 25.0) and (prediction <= 50.0):\n            letter_predictions.append('B')\n        elif (prediction > 50.0) and (prediction <= 75.0):\n            letter_predictions.append('C')\n        elif (prediction > 75.0) and (prediction <= 100.0):\n            letter_predictions.append('D')\n        elif (prediction > 100.0) and (prediction <= 125.0):\n            letter_predictions.append('E')\n        elif (prediction > 125.0) and (prediction <= 150.0):\n            letter_predictions.append('F')\n        else:\n            letter_predictions.append('G')\n        \n    pred_df['letter_prediction'] = letter_predictions\n    pred_df['letter_rating'] = pred_df['rating'].replace([12.5, 38.0, 63.0, 88.0, 113.0, 138.0, 163.0],\n                                                         ['A', 'B', 'C', 'D', 'E', 'F', 'G'])\n    pred_df = pred_df[['letter_rating', 'letter_prediction']]\n    return pred_df[pred_df.letter_rating == pred_df.letter_prediction].shape[0]\/pred_df.shape[0]","bfbabb59":"accuracy_results = {}","1c604efe":"#test function on the one we already tried the long way\naccuracy_results['tree_4'] = getAccuracy(predictions, regr)\naccuracy_results","ff2ad1ef":"tree = DecisionTreeRegressor()\ntree.fit(X,y)\naccuracy_results['tree'] = getAccuracy(tree.predict(X), regr)\naccuracy_results","3be8e235":"tree_3 = DecisionTreeRegressor(max_depth=3)\ntree_3.fit(X,y)\naccuracy_results['tree_3'] = getAccuracy(tree_3.predict(X), regr)\n\ntree_2 = DecisionTreeRegressor(max_depth=2)\ntree_2.fit(X,y)\naccuracy_results['tree_2'] = getAccuracy(tree_2.predict(X), regr)\naccuracy_results","0bfc0eb5":"lasso = Lasso()\nlasso.fit(X,y)\naccuracy_results['lasso'] = getAccuracy(lasso.predict(X), regr)\naccuracy_results","eda5fb99":"results = pd.DataFrame.from_dict(accuracy_results, orient='index')\nresults = results.rename(columns={0: 'accuracy'})\nresults","fb931f03":"# Modeling","ec05aa5c":"the tree that doesn't have a set max depth is most likely overfitted","063c4afa":"This model is 48.76% accurate","61cab0e5":"# Testing the Accuracy","74162bd3":"# Changing the target to a number\n\n#### Scale used to grade buildings\n* A (0-25)\n* B (26-50)\n* C (51-75)\n* D (76-100)\n* E (101-125)\n* F (126-150)\n* G (>150)\n\n#### Changes to the data\n* target variable (rating) changed to the mean of the score of its grade (use 163 for G for now)\n* is there a better way of doing this?\n","f780cc7d":"That was really long let's see if we can condense it with a function"}}