{"cell_type":{"b97e7bbf":"code","092f0789":"code","779cb876":"code","ababf73f":"code","51136dc3":"code","41424010":"code","76e14758":"code","a79f3d06":"code","a1f37e34":"code","cfefa6c4":"code","49fbfe57":"code","4777f08f":"code","0dbd2f2c":"code","e95e4683":"code","78d110e4":"code","736f7eaf":"code","13ceea33":"code","2c272df0":"code","94825e27":"code","e9edaaf0":"code","3b4d717a":"code","c980fcdd":"code","c5b94168":"code","d83eddb2":"code","9d6eff7f":"code","d4a6dcd2":"code","79378909":"code","d4df76ec":"code","be202c5a":"code","b6815201":"code","04684684":"code","b9f02916":"markdown","c5cb8b3d":"markdown","0a951a7c":"markdown","81a1964e":"markdown","44ca23d2":"markdown","28a81ac6":"markdown","12435f78":"markdown","da07bc9f":"markdown"},"source":{"b97e7bbf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor file_or_dir in os.listdir('\/kaggle\/input\/new-plant-diseases-dataset'):\n    print(file_or_dir)\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","092f0789":"# Imports\n\nimport os\nimport glob\nimport numpy as np\nimport pandas as pd\n\n\nfrom pprint import pprint\n\nimport tensorflow as tf\n\nfrom tensorflow.keras.applications.inception_v3 import InceptionV3\nfrom tensorflow.keras import Model, layers, Sequential, optimizers\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import ModelCheckpoint\n\nimport matplotlib.pyplot as plt","779cb876":"# download weights\n!wget --no-check-certificate \\\n    https:\/\/storage.googleapis.com\/mledu-datasets\/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5 \\\n    -O inception_v3_weights.h5","ababf73f":"print(\"GPUs Available: \", tf.config.experimental.list_physical_devices('GPU'))","51136dc3":"# Paths\n\nlocal_weights_file = '.\/inception_v3_weights.h5'\n\ntrain_path = \"..\/input\/new-plant-diseases-dataset\/New Plant Diseases Dataset(Augmented)\/New Plant Diseases Dataset(Augmented)\/train\"\nvalid_path = \"..\/input\/new-plant-diseases-dataset\/New Plant Diseases Dataset(Augmented)\/New Plant Diseases Dataset(Augmented)\/valid\"\ntest_path = \"..\/input\/new-plant-diseases-dataset\/test\"","41424010":"training_images = []\n\nfor root, dirs, files in os.walk(train_path):\n    for file in files:\n        training_images.append(os.path.join(root, file))\n                               \nvalidation_images = []\n\nfor root, dirs, files in os.walk(valid_path):\n    for file in files:\n        validation_images.append(os.path.join(root, file))","76e14758":"print(\"Training:\")\nprint(\"Training Path:\" + train_path)\nprint(\"Training Classes:\" + str(len(os.listdir(train_path))))\nprint(\"Training Images:\" + str(len(training_images)))\n\nprint(\"\\n\")\n\nprint(\"Validation:\")\nprint(\"Validation Path:\" + valid_path)\nprint(\"Validation Classes:\" + str(len(os.listdir(valid_path))))\nprint(\"Validation Images:\" + str(len(validation_images)))\n\nprint(\"\\n\")\n\nprint(\"Testing:\")\nprint(\"Testing Path:\" + test_path)\nprint(\"Testing Images:\" + str(len(os.listdir(os.path.join(test_path, 'test')))))","a79f3d06":"train_datagen = ImageDataGenerator(\n    rescale=1\/255,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    zoom_range=0.2,\n    shear_range=0.2,\n    fill_mode='nearest'\n)\n\nvalidation_datagen = ImageDataGenerator(rescale=1\/255)\n\ntest_datagen = ImageDataGenerator(rescale=1\/255)","a1f37e34":"batch_size = 32","cfefa6c4":"train_generator = train_datagen.flow_from_directory(\n    train_path,\n    batch_size = batch_size,\n    class_mode = 'categorical',\n    target_size = (150, 150),\n    color_mode=\"rgb\",\n    shuffle=True\n)\n\nvalidation_generator =  validation_datagen.flow_from_directory(\n    valid_path,\n    batch_size  = batch_size,\n    class_mode  = 'categorical',\n    target_size = (150, 150),\n    color_mode=\"rgb\",\n    shuffle=True\n)\n\ntest_generator = test_datagen.flow_from_directory(\n    test_path,\n    batch_size  = 1,\n    class_mode  = None,\n    target_size = (150, 150),\n    color_mode=\"rgb\",\n    shuffle=False\n)","49fbfe57":"class_dict = train_generator.class_indices\npprint(class_dict)","4777f08f":"class_list = list(class_dict.keys())\npprint(class_list)","0dbd2f2c":"train_num = train_generator.samples\nvalid_num = validation_generator.samples","e95e4683":"# Creating Instence of pre-trained model from Keras Application\ninception_model = InceptionV3(input_shape= (150, 150, 3),\n                                include_top = False,\n                                weights = None)\n\ninception_model.load_weights(local_weights_file)","78d110e4":"# Freezing all Layers of Inception V3 Model\nfor layer in inception_model.layers:\n    layer.trainable = False","736f7eaf":"inception_model.summary()","13ceea33":"# Taking output from 'mixed8' layer\nlast_layer = inception_model.get_layer('mixed9')\nprint('Last Layer Output Shape:', last_layer.output_shape)\nlast_output = last_layer.output","2c272df0":"# Adding our own layers at the end of Inception Network\n\n# Flatten the output layer to 1 dimension\nx = layers.Flatten()(last_output)\n\n# Add a fully connected layer with 1024 hidden units and ReLU activation\nx = layers.Dense(2048, activation='relu')(x)\n\n# Add a fully connected layer with 1024 hidden units and ReLU activation\nx = layers.Dense(1024, activation='relu')(x)\n\n# Add a dropout rate of 0.2\nx = layers.Dropout(0.2)(x)\n\n# Add a final sigmoid layer for classification\nx = layers.Dense(len(class_dict), activation='softmax')(x)\n\nmodel = Model(inception_model.input, x)","94825e27":"model.compile(optimizer=optimizers.RMSprop(lr=0.0001),\n              loss = 'categorical_crossentropy',\n              metrics = ['accuracy'])","e9edaaf0":"# # checkpoint\n# weightpath = \"best_weights.hdf5\"\n# checkpoint = ModelCheckpoint(weightpath, monitor='val_acc', verbose=1, save_best_only=True, save_weights_only=True, mode='max')\n# callbacks_list = [checkpoint]","3b4d717a":"history = model.fit(\n    train_generator,\n    steps_per_epoch=train_num\/\/batch_size,\n    validation_data = validation_generator,\n    validation_steps=valid_num\/\/batch_size,\n    epochs = 5,\n#     callbacks=callbacks_list,\n    verbose = 1\n)","c980fcdd":"model.evaluate_generator(\n    generator=validation_generator,\n    steps=valid_num\/\/batch_size\n)","c5b94168":"saved_model_path = \"saved_models\/1\"\nmodel.save(saved_model_path)","d83eddb2":"from zipfile import ZipFile \nimport os \n\ndef get_all_file_paths(directory): \n  \n    # initializing empty file paths list \n    file_paths = [] \n  \n    # crawling through directory and subdirectories \n    for root, directories, files in os.walk(directory): \n        for filename in files: \n            # join the two strings in order to form the full filepath. \n            filepath = os.path.join(root, filename) \n            file_paths.append(filepath) \n  \n    # returning all file paths \n    return file_paths    ","9d6eff7f":"# path to folder which needs to be zipped \ndirectory = 'saved_models\/'\n\n# calling function to get all file paths in the directory \nfile_paths = get_all_file_paths(directory) \n\n# printing the list of all files to be zipped \nprint('Following files will be zipped:') \nfor file_name in file_paths: \n    print(file_name) \n\n# writing files to a zipfile \nwith ZipFile('saved_models.zip','w') as zip: \n    # writing each file one by one \n    for file in file_paths: \n        zip.write(file) \n\nprint('All files zipped successfully!') ","d4a6dcd2":"# model_path = \"InceptionV3.hdf5\"\n# model.save(model_path)","79378909":"test_generator.reset()\npred=model.predict_generator(\n    test_generator,\n    steps=test_generator.n\/\/test_generator.batch_size,\n    verbose=1\n)","d4df76ec":"predicted_class_indices=np.argmax(pred,axis=1)\npredicted_class_indices","be202c5a":"class_dict = {v:k for k,v in class_dict.items()}\npredictions = [class_dict[k] for k in predicted_class_indices]","b6815201":"my_submission = pd.DataFrame({'ImageId': range(1, len(predictions)+1), 'Label': predictions})\nmy_submission.head()","04684684":"# you could use any filename. We choose submission here\nmy_submission.to_csv('submission.csv', index=False)","b9f02916":"# Prediction on Unseen Data","c5cb8b3d":"# Evaluating Model","0a951a7c":"# Fitting Model","81a1964e":"# Imports & Loading Data","44ca23d2":"# Model Creation","28a81ac6":"# Preparing Data","12435f78":"# Saving Model","da07bc9f":"# Initializing ModelInitializing Model"}}