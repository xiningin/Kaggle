{"cell_type":{"83894e57":"code","fa8481e7":"code","d779982c":"code","99d8b132":"code","09732607":"code","ed1c3993":"code","3f7a508a":"code","9edd5784":"code","39f9888b":"code","61d6cf9a":"code","f78ad78a":"code","b62ca93c":"markdown","c2648e22":"markdown","1254566b":"markdown","20aafa3a":"markdown","6f956ef6":"markdown","9bef9946":"markdown"},"source":{"83894e57":"# General Libs\nfrom tensorflow import keras\nfrom tensorflow.keras.applications.mobilenet_v2 import MobileNetV2, preprocess_input\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.models import Sequential, Model\nfrom tensorflow.keras.layers import GlobalAveragePooling2D, Dense, BatchNormalization, Dropout\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.optimizers import *\nfrom tensorflow.keras.initializers import *\nimport numpy as np\nimport random\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n%matplotlib inline\n","fa8481e7":"im_shape = (224,224)\nTRAINING_DIR = '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/train'\nVAL_DIR = '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/val'\nTEST_DIR = '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/test'\n\nseed = random.randint(1, 1000)\n\nBATCH_SIZE = 32\nnum_classes = 2\n\nlearning_rate = 0.0001","d779982c":"data_generator = ImageDataGenerator(preprocessing_function=preprocess_input) #rescale=1.\/255,\n\ntrain_generator = data_generator.flow_from_directory(TRAINING_DIR, target_size=(im_shape[0],im_shape[1]), shuffle=True, seed=seed,\n                                                     class_mode='categorical', batch_size=BATCH_SIZE, subset=\"training\")#, color_mode='grayscale')\n\nval_generator = ImageDataGenerator(preprocessing_function=preprocess_input)\nvalidation_generator = val_generator.flow_from_directory(VAL_DIR, target_size=(im_shape[0],im_shape[1]), shuffle=False, seed=seed,\n                                                     class_mode='categorical', batch_size=BATCH_SIZE)#, color_mode='grayscale')\nnb_train_samples = train_generator.samples\nnb_validation_samples = validation_generator.samples","99d8b132":"from keras.preprocessing.image import ImageDataGenerator\n\ntest_generator = ImageDataGenerator(preprocessing_function=preprocess_input)#rescale=1.\/255\n\ntest_generator = test_generator.flow_from_directory(TEST_DIR, target_size=(im_shape[0],im_shape[1]), shuffle=False, seed=seed,\n                                                     class_mode='categorical', batch_size=BATCH_SIZE, subset=\"training\")#, color_mode='grayscale')\nnb_test_samples = test_generator.samples","09732607":"# Looking for some examples\n\nplt.figure(figsize=(20,10))\nplt.subplot(1, 2, 1)\nimg = train_generator.filepaths[np.random.randint(low=0, high=train_generator.samples)]\nprint(img)\nimg = mpimg.imread(img)\nplt.imshow(img);\n\nplt.subplot(1, 2, 2)\nimg = test_generator.filepaths[np.random.randint(low=0, high=test_generator.samples)]\nprint(img)\nimg = mpimg.imread(img)\nplt.imshow(img);","ed1c3993":"# Loading MobileNet without top layer\nbase_model = MobileNetV2(include_top=False, weights='imagenet', input_shape=(im_shape[0], im_shape[1], 3))\n\nx = base_model.output\nx = GlobalAveragePooling2D()(x)\nx = Dropout(rate = .4)(x)\nx = BatchNormalization()(x)\nx = Dense(1280, activation='relu',  kernel_initializer=glorot_uniform(seed))(x)\nx = Dropout(rate = .4)(x)\nx = BatchNormalization()(x)\npredictions = Dense(num_classes, activation='softmax', kernel_initializer='random_uniform')(x)\n\nmodel = Model(inputs=base_model.input, outputs=predictions)\n\n# Freezing MobileNet layers\nfor layer in base_model.layers:\n    layer.trainable=False\n    \noptimizer = Adam(lr=learning_rate)\n\nmodel.compile(optimizer='Adam',loss='categorical_crossentropy',metrics=['accuracy'])\n","3f7a508a":"from sklearn.utils import class_weight\nclass_weights = class_weight.compute_class_weight(\n           'balanced',\n            np.unique(train_generator.classes), \n            train_generator.classes)\nclass_weights","9edd5784":"epochs = 20\n\n#Save the best model acoording to validation loss\ncallbacks_list = [\n    keras.callbacks.ModelCheckpoint(\n        filepath='model.h5',\n        monitor='val_loss', save_best_only=True, verbose=1),\n    keras.callbacks.EarlyStopping(monitor='val_loss', patience=50,verbose=1)\n]\n\nhistory = model.fit(\n        train_generator,\n        steps_per_epoch=nb_train_samples \/\/ BATCH_SIZE,\n        epochs=epochs,\n        callbacks = callbacks_list,\n        validation_data=validation_generator,\n        verbose = 1,\n        validation_steps=nb_validation_samples \/\/ BATCH_SIZE,\n        class_weight = class_weights)","39f9888b":"# How the training was\nimport matplotlib.pyplot as plt\n\nhistory_dict = history.history\nloss_values = history_dict['loss']\nval_loss_values = history_dict['val_loss']\n\nepochs_x = range(1, len(loss_values) + 1)\nplt.figure(figsize=(10,10))\nplt.subplot(2,1,1)\nplt.plot(epochs_x, loss_values, 'bo', label='Training loss')\nplt.plot(epochs_x, val_loss_values, 'b', label='Validation loss')\nplt.title('Training and validation Loss and Accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\n#plt.legend()\nplt.subplot(2,1,2)\nacc_values = history_dict['accuracy']\nval_acc_values = history_dict['val_accuracy']\nplt.plot(epochs_x, acc_values, 'bo', label='Training acc')\nplt.plot(epochs_x, val_acc_values, 'b', label='Validation acc')\n#plt.title('Training and validation accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Acc')\nplt.legend()\nplt.show()","61d6cf9a":"from tensorflow.keras.models import load_model\n# Load the best saved model\nmodel = load_model('model.h5')","f78ad78a":"# Some reports\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport numpy as np\n\n#Confution Matrix and Classification Report\nY_pred = model.predict_generator(test_generator, nb_test_samples \/\/ BATCH_SIZE+1)\ny_pred = np.argmax(Y_pred, axis=1)\nprint('Confusion Matrix')\nprint(confusion_matrix(test_generator.classes, y_pred))\nprint('Classification Report')\ntarget_names = ['Normal', 'Pneumo']\nprint(classification_report(test_generator.classes, y_pred, target_names=target_names))","b62ca93c":"**Abstract:**\n\nThis notebook aims to show how to perform a Transfer Learning model for Pneumonia classification of chest x-ray images. We used MobileNet, which is available together with keras\/tensorflow framework. Transfer Learning is performed by loading the model trained for ImageNet challenge, but without the top layer. These layers are freezed and then new classification layers are added and trained.\n\n**It is not our goal to develop the best classification model**. The examples here are simple to help students.\n\n---\n\n**TO DO:**\n* Test other models\n* Test a custom model\n* Develop a model to detect viral or bacterian pneumonia\n\n** Thanks to **\n* Paul Mooney for the [dataset](https:\/\/www.kaggle.com\/paultimothymooney\/chest-xray-pneumonia)\n","c2648e22":"This first simple model showed a poor performance on Normal images. For next versions I plan to balance the training dataset and do some augmentation, work on the architecture to avoid overfitting and try different hyperparameters.","1254566b":"## Transfer Learning","20aafa3a":"## Training","6f956ef6":"## Evaluation","9bef9946":"## Pneumonia Dataset"}}