{"cell_type":{"aeca02e5":"code","2a6dc91f":"code","e506776f":"code","e6685d5f":"code","6b9d4d48":"code","02e5878d":"code","553dc01c":"code","ab4d1340":"code","2e2483b2":"code","54fb6a1e":"code","a15fe868":"code","7ac572ee":"code","4903a977":"code","e3422ba8":"code","f6c01777":"code","1dc7e9a2":"code","ee0a14f0":"code","e7a2f104":"code","ba11b152":"code","9c491d98":"code","7f87edff":"code","c2cebd31":"code","537a231e":"code","b0658997":"code","ea540073":"code","428db1b9":"code","a2a0210a":"code","30e3885b":"code","6e8a5162":"code","7381a758":"code","7f29952f":"code","f07dbd08":"code","266cb295":"code","5a0e2a66":"code","adcfc2b8":"code","36dbd92b":"code","55b28187":"code","7bb7a1f8":"code","afa8b5c9":"code","9e2e69f0":"code","3c64d5f2":"code","d4d729fe":"code","be72052c":"code","16197422":"code","fa17a60a":"code","ea2b256b":"code","78455460":"code","5756e887":"code","68201174":"code","2433c7b2":"code","97469316":"code","188bb0a1":"code","bb5166c0":"code","8b2ccb9d":"code","c380098c":"code","8ffc1b50":"code","e699abdf":"code","5e7a4b8c":"code","11e0b967":"code","e9ba54d9":"code","07a878bb":"code","b02f9272":"code","adea8329":"code","120d232f":"code","53fa9faa":"code","860699b1":"code","ab114806":"code","22e0ff50":"code","1d825e9f":"code","4039829e":"code","244423f7":"code","ea06d3e2":"code","b2502b70":"code","befbb0b1":"code","eef77eaf":"code","849c41f4":"code","4e598c29":"code","fee89524":"code","54998b77":"code","e913cbbc":"code","9726d9cc":"code","3b1595b9":"code","dc9e6746":"code","893f2cbd":"code","fd8fa667":"code","42b7b606":"code","267e9713":"code","44854e58":"code","1190ef19":"code","d70b88ff":"code","37f42ea4":"code","b2c60367":"code","7ffb6436":"code","ca320d6a":"code","d97be94e":"code","613239c3":"code","e6a0abec":"code","ad67dbb0":"code","1c340f9b":"code","a3eb4dd7":"code","9c032ddf":"code","8bc7b7c4":"code","fdb0bdbd":"code","11b8d096":"code","f9618b6d":"code","0c83f308":"code","4e5c4ee6":"code","37f44116":"code","54854b13":"code","e6776372":"code","4071306b":"code","18179e46":"code","4ae8d0f6":"code","ab534e53":"code","3c93da2d":"code","09efb236":"code","9833db0e":"code","0c8092e8":"code","01d99d13":"code","6b342910":"code","1906dfb7":"code","04588336":"code","d9db6986":"code","fdfa2471":"code","f5d4ddd4":"code","0a1a37a4":"code","d2347149":"code","ea67fbdd":"code","1b9017d5":"code","8f9e687b":"code","ebeb4b07":"code","dd2beee2":"code","6ca58226":"markdown","3356349e":"markdown","96ef941a":"markdown","43648934":"markdown","454f5542":"markdown","cdab6aba":"markdown","094ea36d":"markdown","68b2bc74":"markdown","f69f0ed8":"markdown","b634e161":"markdown","b9987d39":"markdown","9a339e36":"markdown","e5ee6137":"markdown","b43a8295":"markdown","4e6f3fb7":"markdown","0335d1fd":"markdown","2211aabe":"markdown","5ff8fb62":"markdown","6789c502":"markdown","0b321601":"markdown","9b8d77e4":"markdown","cc5cdd92":"markdown","680c8409":"markdown","c9d9f649":"markdown","32353c78":"markdown","76f56bf6":"markdown","97037af6":"markdown","2886d31c":"markdown","62bfd96d":"markdown","b39441bf":"markdown","f4b43ce0":"markdown","aedebc61":"markdown","b4b668f1":"markdown","da0bc26c":"markdown","478300ca":"markdown","04e42de2":"markdown","33e98b37":"markdown","b11c5b6b":"markdown","b81af5bc":"markdown","f0f34a09":"markdown","588ce7d7":"markdown","f7ca5add":"markdown","78b29bb2":"markdown","896b85c0":"markdown","f33dddef":"markdown","6285532f":"markdown","f627fad4":"markdown","207f914c":"markdown","a754e690":"markdown","fe6e61be":"markdown","1e34393d":"markdown","91f9b14a":"markdown","10477028":"markdown","3479751c":"markdown","4a2efe5a":"markdown","f55f6ffe":"markdown"},"source":{"aeca02e5":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set_style(\"dark\")\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# from utils.functions import *\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport plotly.io as pio \nimport sys\nimport os \nfrom sklearn import linear_model\nfrom sklearn import model_selection\nfrom sklearn.metrics import recall_score, confusion_matrix, accuracy_score, f1_score, roc_auc_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import svm\nimport xgboost\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom catboost import CatBoostClassifier\nimport tensorflow as tf\nfrom tensorflow import keras\nimport joblib\nimport pickle\n\n","2a6dc91f":"pd.set_option('display.max_columns', None)","e506776f":"df = pd.read_csv(\"..\/input\/hr-attrition-dataset\/Final dataset Attrition.csv\")","e6685d5f":"df.head()","6b9d4d48":"df.columns","02e5878d":"df.info()","553dc01c":"df.shape","ab4d1340":"df.dtypes","2e2483b2":"df.describe()","54fb6a1e":"df.isnull().sum()","a15fe868":"data= df.drop(['Date_of_termination', 'Unnamed: 32'], axis=1)\ndata","7ac572ee":"data.duplicated().sum()","4903a977":"data= data.drop(['Date_of_Hire', 'StockOptionLevel'], axis=1)\ndata","e3422ba8":"data.rename(columns={'Attrition':'Burnout', 'Leaves':'Permitted_Leaves_Taken'}, inplace=True)\ndata","f6c01777":"total_female = data.Gender.value_counts()[\"Female\"]\ntotal_female","1dc7e9a2":"total_male = data.Gender.value_counts()[\"Male\"]\ntotal_male ","ee0a14f0":"total = data[\"Gender\"].value_counts()\ntotal","e7a2f104":"my_circle=plt.Circle( (0,0), 0.7, color='white') \n\nplt.figure(figsize=(10,10))\n\nplt.pie(total.values,\n        labels = total.index,\n        autopct='%1.2f%%')\np = plt.gcf()\np.gca().add_artist(my_circle)\nplt.title('Gender Distribution')\nplt.savefig(r'C:\\Users\\Master\\Documents\\contenido_bootcamp\\ML\\ML_Project\\Reports\\gender_distribution.png');","ba11b152":"plt.figure(figsize=(8,8))\nsns.boxplot(x=data[\"Age\"], color='limegreen')\nplt.title(\"Age Distribution\")\nplt.xlabel(\"Age\")\nplt.savefig(r'C:\\Users\\Master\\Documents\\contenido_bootcamp\\ML\\ML_Project\\Reports\\age_distribution1.png');","9c491d98":"plt.figure(figsize=(20,5))\nsns.violinplot(data['Age'], color='gold', inner='stick');\nplt.title('Age Distribution')\nplt.xlabel('Age');\nplt.savefig(r'C:\\Users\\Master\\Documents\\contenido_bootcamp\\ML\\ML_Project\\Reports\\age_distribution2.png');","7f87edff":"data['Age'].value_counts()","c2cebd31":"data['Age'].max()","537a231e":"data['Age'].min()","b0658997":"data['Age'].mean()","ea540073":"data['Age'].mode()","428db1b9":"total = data[\"Burnout\"].value_counts()\ntotal","a2a0210a":"my_circle=plt.Circle( (0,0), 0.7, color='white') \n\nplt.figure(figsize=(10,10))\n\nplt.pie(total.values,\n        labels = total.index,\n        autopct='%1.2f%%')\np = plt.gcf()\np.gca().add_artist(my_circle)\nplt.title('Target Distribution')\nplt.savefig(r'C:\\Users\\Master\\Documents\\contenido_bootcamp\\ML\\ML_Project\\Reports\\burnout_distribution.png');\n","30e3885b":"fig, axes = plt.subplots(1, 3,  figsize=(15, 5))\n\nsns.countplot(data[\"Gender\"], hue=data['Burnout'], ax=axes[0])\naxes[0].set_title(\"Gender and Burnout\")\nsns.countplot(data[\"OverTime\"], hue=data['Burnout'], palette='hls', ax=axes[1])\naxes[1].set_title('OverTime and Burnout')\nsns.countplot(data[\"MaritalStatus\"], hue=data['Burnout'], palette='Set2', ax=axes[2])\naxes[2].set_title('MaritalStatus and Burnout')\nplt.savefig(r'C:\\Users\\Master\\Documents\\contenido_bootcamp\\ML\\ML_Project\\Reports\\eda1.png');","6e8a5162":"fig, axes = plt.subplots(1, 3,  figsize=(30, 10))\n\na = sns.countplot(data[\"JobRole\"], hue=data['Burnout'], ax=axes[0], palette='Set2')\naxes[0].set_title(\"Job Role and Burnout\")\na.set_xticklabels(a.get_xticklabels(), rotation=45)\nb = sns.countplot(data[\"JobLevel\"], hue=data['Burnout'], palette='hls', ax=axes[1])\naxes[1].set_title('Job Level and Burnout')\nb.set_xticklabels(b.get_xticklabels(), rotation=45)\nc = sns.countplot(data[\"Work_accident\"], hue=data['Burnout'], ax=axes[2])\naxes[2].set_title('Work accident and Burnout')\nc.set_xticklabels(c.get_xticklabels(), rotation=45)\nplt.savefig(r'C:\\Users\\Master\\Documents\\contenido_bootcamp\\ML\\ML_Project\\Reports\\eda2.png');","7381a758":"fig, axes = plt.subplots(1, 3,  figsize=(20, 8))\n\na = sns.countplot(data[\"BusinessTravel\"], hue=data['Burnout'], ax=axes[0], palette='Set2')\naxes[0].set_title(\"Business Travel and Burnout\")\na.set_xticklabels(a.get_xticklabels(), rotation=45)\nb = sns.countplot(data[\"Job_mode\"], hue=data['Burnout'], palette='hls', ax=axes[1])\naxes[1].set_title('Job Mode and Burnout')\nb.set_xticklabels(b.get_xticklabels(), rotation=45)\nc = sns.countplot(data[\"Department\"], hue=data['Burnout'], ax=axes[2])\naxes[2].set_title('Department and Burnout')\nc.set_xticklabels(c.get_xticklabels(), rotation=45)\nplt.savefig(r'C:\\Users\\Master\\Documents\\contenido_bootcamp\\ML\\ML_Project\\Reports\\eda3.png');","7f29952f":"plt.figure(figsize=(20,20))\nsns.heatmap(data.corr(),annot=True,cmap=\"viridis\")\nplt.savefig(r'C:\\Users\\Master\\Documents\\contenido_bootcamp\\ML\\ML_Project\\Reports\\heatmap.png');\n","f07dbd08":"data['Burnout'].unique()","266cb295":"data['BusinessTravel'].unique()","5a0e2a66":"data['Department'].unique()","adcfc2b8":"data['Gender'].unique()","36dbd92b":"data['JobRole'].unique()","55b28187":"data['MaritalStatus'].unique()","7bb7a1f8":"data['OverTime'].unique()","afa8b5c9":"data['Higher_Education'].unique()","9e2e69f0":"data['Status_of_leaving'].unique()","3c64d5f2":"data['Mode_of_work'].unique()","d4d729fe":"data['Work_accident'].unique()","be72052c":"data['Source_of_Hire'].unique()","16197422":"data['Job_mode'].unique()","fa17a60a":"col         = 'BusinessTravel'\nconditions  = [ data[col] == 'Non-Travel', data[col] == 'Travel_Rarely', data[col] == 'Travel_Frequently']\nchoices     = [ 0, 1, 2 ]\n    \ndata['BusinessTravel'] = np.select(conditions, choices)\ndata['BusinessTravel'] = data['BusinessTravel']","ea2b256b":"col         = 'Higher_Education'\nconditions  = [ data[col] == '12th', data[col] == 'Graduation', data[col] == 'Post-Graduation', data[col] == 'PHD' ]\nchoices     = [ 0, 1, 2, 3 ]\n    \ndata['Higher_Education'] = np.select(conditions, choices)\ndata['Higher_Education'] = data['Higher_Education']","78455460":"def label_encoder(data,column):\n    '''Esta funci\u00f3n realiza label encoding'''\n    from sklearn import preprocessing\n    le = preprocessing.LabelEncoder()\n    le.fit(data[column])\n    data[column]=le.transform(data[column])","5756e887":"label_encoder(data=data,column='Burnout')","68201174":"label_encoder(data=data,column='Department')","2433c7b2":"label_encoder(data=data,column='Gender')","97469316":"label_encoder(data=data,column='JobRole')","188bb0a1":"label_encoder(data=data,column='MaritalStatus')","bb5166c0":"label_encoder(data=data,column='OverTime')","8b2ccb9d":"label_encoder(data=data,column='Status_of_leaving')","c380098c":"label_encoder(data=data,column='Mode_of_work')","8ffc1b50":"label_encoder(data=data,column='Work_accident')","e699abdf":"label_encoder(data=data,column='Source_of_Hire')","5e7a4b8c":"label_encoder(data=data,column='Job_mode')","11e0b967":"data","e9ba54d9":"data.dtypes","07a878bb":"X = data.drop(['Burnout'], 1)\ny = data['Burnout']","b02f9272":"from sklearn.feature_selection import SelectKBest\n\nsel = SelectKBest(k=5)\nX_new = sel.fit_transform(X, y)\n\nnames = ['Age', 'BusinessTravel', 'Department', 'DistanceFromHome', 'Gender', 'JobInvolvement', 'JobLevel', 'JobRole',\n         'JobSatisfaction', 'MaritalStatus', 'MonthlyIncome', 'NumCompaniesWorked', 'OverTime', 'PercentSalaryHike', 'PerformanceRating', 'TotalWorkingYears',\n         'TrainingTimesLastYear', 'YearsAtCompany', 'YearsSinceLastPromotion', 'YearsWithCurrManager', 'Higher_Education', 'Status_of_leaving', 'Mode_of_work',\n           'Permitted_Leaves_Taken','Absenteeism', 'Work_accident', 'Source_of_Hire','Job_mode'        \n                   ]\nF_imp = pd.DataFrame({'column': names, 'score': sel.scores_}).sort_values('score', ascending=False)\nF_imp.set_index(['column'], inplace=True)","adea8329":"F_imp.plot.barh(y='score', figsize=(15,15), color= 'teal')\nplt.savefig(r'C:\\Users\\Master\\Documents\\contenido_bootcamp\\ML\\ML_Project\\Reports\\f.importance.png');","120d232f":"co_ma = data.corr()[['Burnout']]. round(2).sort_values(by = ['Burnout'], ascending = False).drop(['Burnout'])\nco_ma","53fa9faa":"data_numerical = data.drop(['BusinessTravel','Department','Gender', 'JobRole', 'MaritalStatus', 'OverTime', 'Higher_Education', 'Status_of_leaving', 'Mode_of_work', 'Work_accident',\n                            'Source_of_Hire', 'Job_mode', 'Burnout'],1)","860699b1":"plt.figure(figsize=(15,15))\nsns.heatmap(data_numerical.corr(),annot=True,cmap=\"viridis\")\nplt.savefig(r'C:\\Users\\Master\\Documents\\contenido_bootcamp\\ML\\ML_Project\\Reports\\coodep.png');","ab114806":"import phik\nphik_matrix = data.phik_matrix()\n\nplt.figure(figsize=(20,20))\nsns.heatmap(phik_matrix,\n            vmin=-1,\n            vmax=1,\n            center=0,\n            cmap=sns.color_palette(\"vlag\", as_cmap=True),\n            square=True,\n            annot=True,\n            linewidths=.5)\nplt.savefig(r'C:\\Users\\Master\\Documents\\contenido_bootcamp\\ML\\ML_Project\\Reports\\correl_phik.png');","22e0ff50":"data['promedio'] = (data['TotalWorkingYears'] + data['Age'])\/2","1d825e9f":"#data['stuck'] = (data['YearsSinceLastPromotion'] + data['YearsWithCurrManager'])\/2","4039829e":"#data['absenteeism_new'] = (data['Permitted_Leaves_Taken'] + data['Absenteeism'])\n#data['absenteeism_new']","244423f7":"#data['Absenteeism']","ea06d3e2":"X = data[['OverTime', 'MaritalStatus',  'DistanceFromHome', 'JobRole', 'JobLevel', 'Work_accident', 'promedio', 'Permitted_Leaves_Taken']]\ny = data['Burnout']","b2502b70":"data['promedio']","befbb0b1":"validation_size = 0.20\nseed = 7\nX_train, X_test, Y_train, Y_test = model_selection.train_test_split(X,\n                                                                    y,\n                                                                    test_size=validation_size,\n                                                                    random_state=seed)","eef77eaf":"from imblearn.over_sampling import RandomOverSampler\n\nros = RandomOverSampler(random_state=42)\nX_train_ros, y_train_ros = ros.fit_resample(X_train, Y_train)","849c41f4":"fig, axes = plt.subplots(1, 2, figsize= (14,8))\n\nk = sns.countplot(ax=axes[0], x ='Burnout', data = data, palette='bright')\naxes[0].set_title('Original Target')\n\n\nr = sns.countplot(ax=axes[1], x =  y_train_ros, data = data, palette='bright')\naxes[1].set_title('RandomOverSampler')\nplt.savefig(r'C:\\Users\\Master\\Documents\\contenido_bootcamp\\ML\\ML_Project\\Reports\\Oversampling.png');","4e598c29":"# model = linear_model.LogisticRegression(max_iter = 1000)\n# parameters_model = {\n#     'C': [20, 50, 100, 200, 500, 1000],\n#     'max_iter': [20, 50, 100, 200, 500, 1000],                      \n#     'solver': ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'],                                  \n# }","fee89524":"# model_gridsearch = GridSearchCV(model, parameters_model, cv = 5, scoring= 'roc_auc', n_jobs=-1)","54998b77":"#model_gridsearch.fit(X_train_ros, y_train_ros)","e913cbbc":"#model_gridsearch.best_params_","9726d9cc":"model = linear_model.LogisticRegression(C = 200, max_iter = 20, solver='sag')\nmodel.fit(X_train_ros, y_train_ros)\npredictions = model.predict(X_test)\nprint('Accuracy_score:', accuracy_score(Y_test, predictions))\nacierto = accuracy_score(Y_test, predictions)\nerror = 1 - acierto\nprint(\"Acierto:\", round(acierto*100, 2), \"%\")\nprint(\"Error:\", round(error*100, 2), \"%\")\nc_matrix = confusion_matrix(Y_test, predictions)\nprint('Confusion_matrix:', c_matrix)\nsns.heatmap(c_matrix\/np.sum(c_matrix), annot=True, \n            fmt='.2%', cmap='Blues');\nprint(\"Recall_score:\", round(recall_score(predictions, Y_test), 3))\nprint(\"F1_score:\", round(f1_score(predictions, Y_test), 3))\nprint('Roc_auc_score:', roc_auc_score(Y_test, predictions))\nRecall_Reg_log = round(recall_score(predictions, Y_test), 3)\nRoc_Reg_log =  round(roc_auc_score(Y_test, predictions), 3)\nFNreg_Reg_log = 14\nTPreg_Reg_log = 37","3b1595b9":"sns.heatmap(c_matrix, annot=True);","dc9e6746":"# rnd_grid =  RandomForestClassifier()\n\n# parameters = {'n_estimators': np.arange(0,100, 1),\n#                'max_depth': np.arange(0,10, 1),\n#                'max_leaf_nodes': np.arange(0,10, 1)}\n             \n\n# rnd_gridsearch = GridSearchCV(rnd_grid, parameters, cv = 5, scoring= 'roc_auc', n_jobs=-1)\n\n# rnd_gridsearch.fit(X_train_ros, y_train_ros)","893f2cbd":"# rnd_gridsearch.best_params_","fd8fa667":"rnd_clf = RandomForestClassifier(n_estimators = 35, max_leaf_nodes = 9, max_depth = 9, random_state= 42) \n\nrnd_clf.fit(X_train_ros, y_train_ros)\n\ny_pred_rf = rnd_clf.predict(X_test)\n\nprint('Accuracy_score:', accuracy_score(Y_test, y_pred_rf))\nacierto = accuracy_score(Y_test, y_pred_rf)\nerror = 1 - acierto\nprint(\"Acierto:\", round(acierto*100, 2), \"%\")\nprint(\"Error:\", round(error*100, 2), \"%\")\nc_matrix_rf = confusion_matrix(Y_test, y_pred_rf)\nprint('Confusion_matrix:', c_matrix_rf)\nsns.heatmap(c_matrix_rf\/np.sum(c_matrix_rf), annot=True, \n            fmt='.2%', cmap='Blues');\nprint(\"Recall_score:\", round(recall_score(y_pred_rf, Y_test), 3))\nprint(\"F1_score:\", round(f1_score(y_pred_rf, Y_test), 3))\nprint('Roc_auc_score:', roc_auc_score(Y_test, y_pred_rf))\nRecall_RandomForest =  round(recall_score(y_pred_rf, Y_test), 3)\nRoc_RandomForest =  round(roc_auc_score(Y_test, y_pred_rf), 3)\nFN_RandomForest = 17\nTP_RandomForest = 34","42b7b606":"sns.heatmap(c_matrix_rf, annot=True);","267e9713":"dtc = DecisionTreeClassifier()\ndtc.fit(X_train_ros, y_train_ros)\ndtc_predictions = dtc.predict(X_test)\n\nprint('Accuracy_score:', accuracy_score(Y_test, dtc_predictions))\nacierto = accuracy_score(Y_test, dtc_predictions)\nerror = 1 - acierto\nprint(\"Acierto:\", round(acierto*100, 2), \"%\")\nprint(\"Error:\", round(error*100, 2), \"%\")\nc_matrix_dtc = confusion_matrix(Y_test, dtc_predictions)\nprint('Confusion_matrix:', c_matrix_dtc)\nsns.heatmap(c_matrix_dtc\/np.sum(c_matrix_dtc), annot=True, \n            fmt='.2%', cmap='Blues');\nprint(\"Recall_score:\", round(recall_score(dtc_predictions, Y_test), 3))\nprint(\"F1_score:\", round(f1_score(dtc_predictions, Y_test), 3))\nprint('Roc_auc_score:', roc_auc_score(Y_test, dtc_predictions))\nRecall_DecisionTree = round(recall_score(dtc_predictions, Y_test), 3)\nRoc_DecesionTree =  round(roc_auc_score(Y_test, dtc_predictions), 3)\nFN_DecesionTree = 31\nTP_DecesionTree = 20","44854e58":"# knn_grid = KNeighborsClassifier()\n\n# parameters = {'n_neighbors': np.arange(0,200, 1)\n#               }\n\n# knn_gridsearch = GridSearchCV(knn_grid, parameters, cv = 100, scoring= 'roc_auc')\n\n# knn_gridsearch.fit(X_train_ros, y_train_ros)","1190ef19":"#knn_gridsearch.best_params_","d70b88ff":"n_neighbors = 2\n\nknn = KNeighborsClassifier(n_neighbors)\nknn.fit(X_train_ros, y_train_ros)\nknn_predictions = knn.predict(X_test)\nk_range = range(1, 40)\nscores = []\n\nfor k in k_range:\n    knn = KNeighborsClassifier(k)\n    knn.fit(X_train_ros, y_train_ros)\n    \n    scores.append(knn.score(X_test, Y_test))\n\nplt.scatter(k_range, scores);","37f42ea4":"print('Accuracy_score:', accuracy_score(Y_test, knn_predictions))\nacierto = accuracy_score(Y_test, knn_predictions)\nerror = 1 - acierto\nprint(\"Acierto:\", round(acierto*100, 2), \"%\")\nprint(\"Error:\", round(error*100, 2), \"%\")\nc_matrix_knn = confusion_matrix(Y_test, knn_predictions)\nprint('Confusion_matrix:', c_matrix_knn)\nsns.heatmap(c_matrix_knn\/np.sum(c_matrix_knn), annot=True, \n            fmt='.2%', cmap='Blues');\nprint(\"Recall_score:\", round(recall_score(knn_predictions, Y_test), 3))\nprint(\"F1_score:\", round(f1_score(knn_predictions, Y_test), 3))\nprint('Roc_auc_score:', roc_auc_score(Y_test, knn_predictions))\nRecall_KNN = round(recall_score(knn_predictions, Y_test), 3)\nRoc_KNN =  round(roc_auc_score(Y_test, knn_predictions), 3)\nFN_KNN = 35\nTP_KNN = 16","b2c60367":"# dectree_grid = DecisionTreeClassifier()\n\n# parameters_dec = {'max_depth': np.arange(0,20, 1)}\n             \n\n# dectree_gridsearch = GridSearchCV(dectree_grid, parameters_dec, cv = 10, scoring= 'roc_auc')\n\n# dectree_gridsearch.fit(X_train_ros, y_train_ros)","7ffb6436":"#dectree_gridsearch.best_params_","ca320d6a":"# ada_grid = AdaBoostClassifier()\n\n# parameters_ada = {'n_estimators': np.arange(0,200, 1)}\n             \n\n# ada_gridsearch = GridSearchCV(ada_grid, parameters_ada, cv = 10, scoring= 'roc_auc')\n\n# ada_gridsearch.fit(X_train_ros, y_train_ros)","d97be94e":"#ada_gridsearch.best_params_","613239c3":"estimator = DecisionTreeClassifier(max_depth=1)\n\nada_clf = AdaBoostClassifier(base_estimator=estimator,\n                            n_estimators=50,\n                            random_state=42)\n\nada_clf.fit(X_train_ros, y_train_ros)\nada_predictions = ada_clf.predict(X_test)\n\nprint('Accuracy_score:', accuracy_score(Y_test, ada_predictions))\nacierto = accuracy_score(Y_test, ada_predictions)\nerror = 1 - acierto\nprint(\"Acierto:\", round(acierto*100, 2), \"%\")\nprint(\"Error:\", round(error*100, 2), \"%\")\nc_matrix_ada = confusion_matrix(Y_test, ada_predictions)\nprint('Confusion_matrix:', c_matrix_ada)\nsns.heatmap(c_matrix_ada\/np.sum(c_matrix_ada), annot=True, \n            fmt='.2%', cmap='Blues');\nprint(\"Recall_score:\", round(recall_score(ada_predictions, Y_test), 3))\nprint(\"F1_score:\", round(f1_score(ada_predictions, Y_test), 3))\nprint('Roc_auc_score:', roc_auc_score(Y_test, ada_predictions))\nRecall_Adaboost = round(recall_score(ada_predictions, Y_test), 3)\nRoc_Adaboost =  round(roc_auc_score(Y_test, ada_predictions),3)\nFN_Adaboost = 11\nTP_Adaboost = 40","e6a0abec":"sns.heatmap(c_matrix_ada, annot=True)\nplt.savefig(r'C:\\Users\\Master\\Documents\\contenido_bootcamp\\ML\\ML_Project\\Reports\\matriz_ada.png');","ad67dbb0":"gbct = GradientBoostingClassifier(n_estimators=100,\n                                 learning_rate=1.0,\n                                 random_state=42)\ngbct.fit(X_train_ros, y_train_ros)\ngbct_predictions = gbct.predict(X_test)\n\nprint('Accuracy_score:', accuracy_score(Y_test, gbct_predictions))\nacierto = accuracy_score(Y_test, gbct_predictions)\nerror = 1 - acierto\nprint(\"Acierto:\", round(acierto*100, 2), \"%\")\nprint(\"Error:\", round(error*100, 2), \"%\")\nc_matrix_gbct= confusion_matrix(Y_test, gbct_predictions)\nprint('Confusion_matrix:', c_matrix_gbct)\nsns.heatmap(c_matrix_gbct\/np.sum(c_matrix_gbct), annot=True, \n            fmt='.2%', cmap='Blues');\nprint(\"Recall_score:\", round(recall_score(gbct_predictions, Y_test), 3))\nprint(\"F1_score:\", round(f1_score(gbct_predictions, Y_test), 3))\nprint('Roc_auc_score:', roc_auc_score(Y_test, gbct_predictions))\nRecall_GradientBoost = round(recall_score(gbct_predictions, Y_test), 3)\nRoc_GradientBoost = round(roc_auc_score(Y_test, gbct_predictions), 3)\nFN_GradientBoost = 30\nTP_GradientBoost = 21","1c340f9b":"# xgb_grid =  xgboost.XGBRFClassifier()\n\n# parameters_xgb = {'n_estimators': np.arange(0,200, 1)}\n             \n\n# xgb_gridsearch = GridSearchCV(xgb_grid, parameters_xgb, cv = 10, n_jobs=-1, scoring= 'roc_auc')\n\n# xgb_gridsearch.fit(X_train_ros, y_train_ros)","a3eb4dd7":"#xgb_gridsearch.best_params_","9c032ddf":"xgb_clas = xgboost.XGBRFClassifier(random_state=42,n_estimators=128)\nxgb_clas.fit(X_train_ros, y_train_ros)\nxgb_predictions = xgb_clas.predict(X_test)\n\nprint('Accuracy_score:', accuracy_score(Y_test, xgb_predictions))\nacierto = accuracy_score(Y_test, xgb_predictions)\nerror = 1 - acierto\nprint(\"Acierto:\", round(acierto*100, 2), \"%\")\nprint(\"Error:\", round(error*100, 2), \"%\")\nc_matrix_xgb= confusion_matrix(xgb_predictions, Y_test)\nprint('Confusion_matrix:', c_matrix_gbct)\nsns.heatmap(c_matrix_xgb\/np.sum(c_matrix_xgb), annot=True, \n            fmt='.2%', cmap='Blues');\nprint(\"Recall_score:\", round(recall_score(xgb_predictions, Y_test), 3))\nprint(\"F1_score:\", round(f1_score(xgb_predictions, Y_test), 3))\nprint('Roc_auc_score:', roc_auc_score(Y_test, xgb_predictions))\nRecall_XGBoost = round(recall_score(xgb_predictions, Y_test), 3)\nRoc_XGBoost =  round(roc_auc_score(Y_test, xgb_predictions), 3)\nFN_XGBoost = 30\nTP_XGBoost = 21","8bc7b7c4":"cbc_clas = CatBoostClassifier(silent=True)\n\ncbc_clas.fit(X_train_ros, y_train_ros)\ncbc_predictions = cbc_clas.predict(X_test)\n\nprint('Accuracy_score:', accuracy_score(Y_test, cbc_predictions))\nacierto = accuracy_score(Y_test, cbc_predictions)\nerror = 1 - acierto\nprint(\"Acierto:\", round(acierto*100, 2), \"%\")\nprint(\"Error:\", round(error*100, 2), \"%\")\nc_matrix_cbc= confusion_matrix(Y_test, cbc_predictions)\nprint('Confusion_matrix:', c_matrix_cbc)\nsns.heatmap(c_matrix_cbc\/np.sum(c_matrix_cbc), annot=True, \n            fmt='.2%', cmap='Blues');\nprint(\"Recall_score:\", round(recall_score(cbc_predictions, Y_test), 3))\nprint(\"F1_score:\", round(f1_score(cbc_predictions, Y_test), 3))\nprint('Roc_auc_score:', roc_auc_score(Y_test, cbc_predictions))\nRecall_CatBoost = round(recall_score(cbc_predictions, Y_test), 3)\nRoc_CatBoost =  round(roc_auc_score(Y_test, cbc_predictions), 3)\nFN_CatBoost = 24\nTP_CatBoost = 27\n","fdb0bdbd":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train_ros_scal= scaler.fit_transform(X_train_ros)\nX_test_scal = scaler.transform(X_test)","11b8d096":"# neuro_model = keras.Sequential([\n#     keras.layers.Dense(128,input_shape=[9]),\n#     keras.layers.Dense(128, activation='relu'),\n#     keras.layers.Dense(128, activation='relu'),\n#     keras.layers.Dense(64, activation='relu'),\n#     keras.layers.Dense(1, activation='sigmoid'),\n# ])","f9618b6d":"# neuro_model.compile(optimizer='adam',\n#               loss = \"binary_crossentropy\",\n#               metrics = ['AUC', 'TruePositives', 'FalseNegatives'])","0c83f308":"# neuro_model.fit(X_train_ros_scal, y_train_ros, validation_split = 0.2, epochs=50,)","4e5c4ee6":"# with open('..\/model\/other_models\/neuro_model', \"wb\") as archivo_salida:\n#     pickle.dump(neuro_model, archivo_salida)","37f44116":"#filename = '..\/model\/others_models\/neuro_model'\n#joblib.dump(neuro_model, filename)","54854b13":"# test_eval = neuro_model.evaluate(X_test, Y_test)","e6776372":"# test_eval","4071306b":"#neuro_predictions = neuro_model.predict(X_test)\n#print(neuro_predictions)","18179e46":"#neuro_predictions[0]","4ae8d0f6":"#neuro_predictions[24]","ab534e53":"#np.argmax(neuro_predictions, axis=1)[0]","3c93da2d":"#np.argmax(neuro_predictions, axis=1)[24]","09efb236":"#class_names = ['no burnout', 'burnout']","9833db0e":"#class_names[np.argmax(neuro_predictions, axis=1)[24]]","0c8092e8":"Roc_red_neuronal = 0.535","01d99d13":"scores = {\n    'Model': ['Reg.log', 'RandomForest', 'DecisionTree', 'KNN', 'AdaBoost', 'GradientBoost', 'XGBoost', 'CatBoost', 'RedNeuronal'],\n    'Roc_auc_score': [Roc_Reg_log, Roc_RandomForest, Roc_DecesionTree, Roc_KNN, Roc_Adaboost, Roc_GradientBoost, Roc_XGBoost, Roc_CatBoost, Roc_red_neuronal],\n    'FN': [14, 17, 31, 35, 11, 30, 30, 24, 34],\n    'TP': [37, 34, 20, 16, 40, 21, 21, 27, 17]\n}\nscores_df = pd.DataFrame(scores)\nscores_df","6b342910":"scores_df.sort_values(by='Roc_auc_score', ascending=False, inplace=True)","1906dfb7":"plt.figure(figsize=(15,10))\nax = sns.barplot(x='Model', y='Roc_auc_score', data=scores_df, palette='bright')\nfig = plt.gcf()\nax.bar_label(ax.containers[0])\nplt.title('ROC auc score por modelo', fontsize=16)\nplt.xlabel(\"Model\", size=15)\nplt.ylabel('Roc auc score', size=15)\nplt.ylim(0.500, 0.863)\nplt.savefig(r'C:\\Users\\Master\\Documents\\contenido_bootcamp\\ML\\ML_Project\\Reports\\ROC_auc_score_por_modelo.png')","04588336":"scores_df.sort_values('TP',ascending=False, inplace=True)","d9db6986":"plt.figure(figsize=(15,10))\nh = sns.barplot(x='Model', y='TP', data=scores_df, palette='bright')\n\nfig = plt.gcf()\nh.bar_label(h.containers[0])\nplt.title('True positives', fontsize=16)\nplt.xlabel(\"Model\", size=15)\nplt.ylabel('True positives', size=15)\n","fdfa2471":"scores_df.sort_values('FN',ascending=False, inplace=True)","f5d4ddd4":"plt.figure(figsize=(15,10))\nv=sns.barplot(x='Model', y='FN', data=scores_df, palette='bright')\nfig = plt.gcf()\nv.bar_label(v.containers[0])\nplt.title('False Negatives', fontsize=16)\nplt.xlabel(\"Model\", size=15)\nplt.ylabel('False Negatives', size=15);\n","0a1a37a4":"fig, axes = plt.subplots(1, 2, figsize=(25, 8))\n\nh = sns.barplot(ax=axes[0], x='Model', y='TP', data=scores_df, palette='bright')\naxes[0].set_title(\"True Positives\")\nh.bar_label(h.containers[0])\nplt.xlabel(\"Model\", size=15)\nplt.ylabel('True Positives', size=15)\n\nv=sns.barplot(ax=axes[1], x='Model', y='FN', data=scores_df, palette='bright')\naxes[1].set_title('False Negatives')\nv.bar_label(v.containers[0])\nplt.xlabel(\"Model\", size=15)\nplt.ylabel('FN', size=15)\nplt.savefig(r'C:\\Users\\Master\\Documents\\contenido_bootcamp\\ML\\ML_Project\\Reports\\TP_FN_por_modelo.png');","d2347149":"data['promedio'] = (data['TotalWorkingYears'] + data['Age'])\/2","ea67fbdd":"data['TotalWorkingYears']","1b9017d5":"data['Age']","8f9e687b":"(40+58)\/2 ","ebeb4b07":"X_new = pd.DataFrame({'OverTime': [1], \n                     'MaritalStatus': [0],\n                     'DistanceFromHome': [25], \n                     'JobRole': [5], \n                     'JobLevel': [3],\n                     'Work_accident':[1],\n                     'promedio': [49.0],\n                     'Permitted_Leaves_Taken':[5]})","dd2beee2":"ada_predictions_new = ada_clf.predict(X_new)\nada_predictions_new ","6ca58226":"### 4.2. Data analysis: other variables <div id=\"heading--4-2\"\/>","3356349e":"F) GRADIENT BOOSTING","96ef941a":"I am going to rename some columns so as to It is easier for me to work with them:","43648934":"### 1. Introduction <a name=\"heading--1-1\"\/>","454f5542":"### 5. Preprocessing the data <div id=\"heading--5\"\/>","cdab6aba":"Preparing new dataset for new predictions","094ea36d":"A) LOGISTIC REGRESSION","68b2bc74":"I am not going to include the following transformations because they do not increase models's scores","f69f0ed8":"**I am going to explore my data**","b634e161":"1. Categorical Features with highest score (see in the feature engineering section)","b9987d39":"1.ENCODING","9a339e36":"C) DECISION TREE","e5ee6137":"### 2. First data exploration <a name=\"heading--2\"\/>","b43a8295":"\n2.2. LINEAL COODEPENDENCE","4e6f3fb7":"2. Numerical features","0335d1fd":"4. RANDOM_OVER_SAMPLER","2211aabe":"Source: The following analysis has been carried out from a dataset from Kaggle","5ff8fb62":"### 4.1. Data analysis: demographic variables <div id=\"heading--4-1\"\/>\n","6789c502":"### 3. Data Wrangling <div id=\"heading--3-3\"\/>","0b321601":"Today, occupational diseases that have been triggered by an occupational accident are commonly accepted and recognized. However, there are a series of psychosocial factors that can cause excessive emotional or cognitive demands on workers as a result of the subject perceiving that this interaction with their environment is beyond the control of the repertoire of their coping strategies. Faced with this situation, it can respond with a range of cognitive-behavioral reactions that are in three dimensions (low self-efficacy, emotional exhaustion and depersonalization) that will trigger the disease called \"burnout\" or \"syndrome of burned by work.\" This disease can cause serious problems for the company, being workplace accidents, external and internal rotations, decreased productivity and interpersonal problems, the most widespread.\nThe objective of this project is to develop a classification algorithm with a roc auc curve and a confusion matrix that are efficient enough to detect, through a secondary intervention, following certain variables, those employees who may develop the syndrome of burnout in the near future.","9b8d77e4":"E) ADABOOST","cc5cdd92":"2. FEATURE REDUCTION\n   \n2.1. FEATURE IMPORTANCE","680c8409":"New predictions","c9d9f649":"Label Encoder","32353c78":"Now, it\u00b4s time to focus on bivariant analysis (Target and other features)","76f56bf6":"### 4. EDA <div id=\"heading--4\"\/>","97037af6":"H) CATBOOST","2886d31c":"Mapping","62bfd96d":"## INDEX\n\n**[1. Introduction](#heading--1)**\n\n**[2. First data exploration](#heading--2)**\n\n**[3. Data Wrangling](#heading--3)**\n\n**[4. EDA](#heading--4)**\n   * [4.1. Data analysis: demographic variables ](#heading--4-1)\n   * [4.2. Data analysis: other variables ](#heading--4-2)\n   \n**[5. Preprocessing the data](#heading--5)**\n\n**[6. Models and predictions](#heading--6)**","b39441bf":"1. Gender Distribution","f4b43ce0":"The following heatmap also takes into account the correlation between the categorical features using PhiK correlation ","aedebc61":"Let\u00b4s check the categories in each variable!","b4b668f1":"### 6. Models and predictions <div id=\"heading--6\"\/>","da0bc26c":"These two variables can alter the result of the model score if you perform a label encoder because it misinterprets the distances. Let's develop our own values ","478300ca":"G) XGBOOST","04e42de2":"The dataset contains plenty of missing values in 'Date_of_termination column' and in 'Unnamed: 32' column. Therefore, I am going to delete these columns.","33e98b37":"Target variable is highly imbalanced","b11c5b6b":"2. Age Distribution","b81af5bc":"3. FEATURES TRANSFORMATION","f0f34a09":"**Now I am going to do a first Data Analysis in order to preview some demographic variables**","588ce7d7":"B) RANDOM FOREST CLASSIFIER","f7ca5add":"In order to work only with columns I fully understand, I am going to drop two of them:","78b29bb2":"The following graphs are only to represent the roc auc curve and the confusion matrix of the different models  ","896b85c0":"---------------","f33dddef":"D) KNN","6285532f":"Target variable (Univariant Analysis)","f627fad4":"To start with, I am going to check missing values","207f914c":"There is lineal coodependence between:\n    AGE & JOB LEVEL; AGE & TOTAL WORKING YEARS;\n    DEPARTMENT & MONTHLY INCOME;\n    JOB LEVEL & JOB ROLE; JOB LEVEL & MONTHLY INCOME; JOB LEVEL & TOTAL W.YEARS; JOB LEVEL & YEARS AT COMPANY;\n    JOB ROLE & MONTHLY INCOME!!!; MONTHLY INCOME & TOTAL W.YEARS;\n    TOTAL W.YEARS & YEARS AT COMPANY;\n    YEARS AT COMPANY & YEARS SINCE LAST PROMOTION; YEARS AT COMPANY & YEARS WITH CURRENT MANAGER\n    \n\n    ","a754e690":"Correlation between features and target variable","fe6e61be":"There are not any duplicated values","1e34393d":"Time to check duplicated values","91f9b14a":"I) NEURAL RED","10477028":"Once I have done the feature importance (see in the feature engineering section), I decide to visualize the relationship between the categorical variables with the highest score and the target(burnout)","3479751c":"                                                        ML. DAVID SU\u00c1REZ NIETO\n                                                            EMPLOYEE BURNOUT PREDICTION                                      ","4a2efe5a":"**Let\u00b4s start with DATA CLEANING**","f55f6ffe":"Let\u00b4s check some other variables"}}