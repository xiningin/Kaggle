{"cell_type":{"9772b85e":"code","ddca257f":"code","332b052c":"code","bf68c05a":"code","01a26036":"code","eb3e55aa":"code","f667eb9f":"code","16c471d9":"code","01d0a7e5":"code","3061315d":"code","d707f42a":"code","f532bbec":"code","c19ea205":"code","99106d63":"markdown","7d7c27b2":"markdown","0170e406":"markdown","4a68ea2b":"markdown","657ec7d8":"markdown","762b5aaa":"markdown","d3c9170e":"markdown","127b859f":"markdown","876ce384":"markdown","fb332c79":"markdown","7801d20f":"markdown","a2a312a5":"markdown","f1b42e19":"markdown","2114991b":"markdown","804be38e":"markdown","4902cc4f":"markdown"},"source":{"9772b85e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ddca257f":"import numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression,LogisticRegression #used to import linear & logistic reg","332b052c":"df=pd.read_csv(\"..\/input\/titanic\/train_and_test2.csv\")\ndf=df.dropna()# removes null values(if any)\ndf.shape #gives no.of rows & coloumns\ndf","bf68c05a":"df.keys() #it gives name of the coloumns ","01a26036":"x=df[['Passengerid', 'Age', 'Fare', 'Sex', 'sibsp']].values #independent variable\ny=df[['2urvived']].values #dependent variable","eb3e55aa":"lr_model=LinearRegression()\nlr_model.fit(x,y)","f667eb9f":"y_pred=lr_model.predict(x)","16c471d9":"exp=np.exp(-y_pred)+1\nlog=1\/exp #1\/1+e^(-y_pred)","01d0a7e5":"y_con=df['2urvived']>0 #for all the values >0 it shows true.\ny_con","3061315d":"df[\"tf\"]=df['2urvived']>0\ndf.tf.value_counts() #gives no of true & false.","d707f42a":"log_reg=LogisticRegression()\nlog_reg.fit(x,y_con) # machine is trained with logistic regression","f532bbec":"log_reg.predict([[2,38.0,71.2833,1,1]]) #predicting the values for independent values","c19ea205":"log_reg.predict_proba([[2,38.0,71.2833,1,1]])","99106d63":"It has to be converted either into True or False in logistic reg.","7d7c27b2":"Let us consider,'Passengerid', 'Age', 'Fare', 'Sex', 'sibsp' as independent data from the dataset","0170e406":"# Sigmoid Function","4a68ea2b":"And '2urvived' as dependent data from the dataset","657ec7d8":"The given data set is in the form of numbers.\n","762b5aaa":"# Training the model with LinearRegression","d3c9170e":"**Hence,we have performed logistic reg on predicting th probability of survived data based on independent values given.**","127b859f":"# Import Essential Libraries","876ce384":"Logistic Reg deals with sigmoid function.Which in turns formulates to be=1\/1+e^(-output)","fb332c79":"All 0's are converted to false & all 1's are converted to true","7801d20f":"For total no.of true & false in the data,we use the following code.","a2a312a5":"# Importing Logistic Regression","f1b42e19":"To find the probability for above prediction,","2114991b":"# > **Reading a file**","804be38e":"# Training with Logistic Regression","4902cc4f":"Here,there are 1307 rows and 28 coloumns of non null values."}}