{"cell_type":{"2bc814d1":"code","cd5a0a8b":"code","b1e3070e":"code","1977a647":"code","86eefc5b":"code","56db07c6":"code","28f65648":"code","66cbc2e4":"code","aae12f68":"code","7b303615":"code","912d6424":"code","1de08636":"code","fcfb818c":"code","4e3df061":"code","ae424888":"code","1dcdf18b":"code","8521140f":"code","91799879":"code","cfe991dd":"code","8cb6d837":"code","a93b374c":"code","c9169f18":"code","7f5ac3a7":"code","64760739":"code","7343fe2e":"code","f2569b7b":"code","f7e5e587":"code","1d1616f0":"code","59ffbea8":"code","adba8fd1":"code","4ac41faf":"code","84289597":"code","c7ae4af8":"code","ebbef693":"code","85815bea":"code","bfb7b1fc":"code","bbb1d097":"code","9cefd839":"code","6ebc78da":"code","67ed17b8":"code","c7a40e14":"code","c3f9d14e":"code","ba4da35a":"code","0cb31840":"markdown","d7805e52":"markdown","4571d34b":"markdown","9f1d7d26":"markdown","7ce8f808":"markdown","05704469":"markdown","6a01caf4":"markdown","4b050967":"markdown","1a8a34be":"markdown","9b49e0c6":"markdown","f9e2202f":"markdown","d77ec56b":"markdown","ed8f56bd":"markdown","4a1740cd":"markdown","e93b5a58":"markdown","36bae2e2":"markdown","5db00d8a":"markdown","e3d72fce":"markdown","d3d302d8":"markdown","1cd77dd5":"markdown","e3ffbaf9":"markdown","5f76895b":"markdown","ff0cf75a":"markdown","2907343e":"markdown","569ecc56":"markdown","531397dc":"markdown","fcce8b6e":"markdown","9f206939":"markdown","5048b7a8":"markdown"},"source":{"2bc814d1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cd5a0a8b":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","b1e3070e":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","1977a647":"train.shape","86eefc5b":"train.dtypes","56db07c6":"train.head()","28f65648":"train.describe()","66cbc2e4":"train.isnull().sum()","aae12f68":"train.drop(['Cabin'], axis = 1, inplace = True)\n","7b303615":"train['Survived'].value_counts()","912d6424":"train['Survived'].value_counts()\/train.shape[0]","1de08636":"color = sns.color_palette('viridis')\npclass_survived=train.groupby('Pclass')['Survived'].count()\nplt.subplots(figsize=(10,5))\npclass_survived.plot(kind='bar', fontsize=12, color=color)\nplt.xticks(rotation=0)\nplt.xlabel('Pclass', fontsize=12)\nplt.ylabel('Number of Passengers', fontsize=12)\nplt.title('Distribution of passengers in Pclass', fontsize=12)\nplt.show()","fcfb818c":"train.Pclass.value_counts()","4e3df061":"train.groupby('Pclass')['Fare'].mean()","ae424888":"\nsns.countplot(x='Survived',hue='Pclass',data=train,palette='viridis').set(title='Survival Distribution by Pclass')\nplt.show()","1dcdf18b":"g = sns.catplot(x=\"Pclass\", hue=\"Sex\", col=\"Survived\",\n                data=train, palette='viridis',kind=\"count\");","8521140f":"train.Embarked.value_counts()","91799879":"sns.countplot(x='Survived',hue='Embarked',data=train,palette='viridis').set(title='Survival Distribution by Embarked port')\nplt.show()","cfe991dd":"g = sns.catplot(x=\"Embarked\", hue=\"Sex\", col=\"Survived\",\n                data=train, palette='viridis',kind=\"count\");","8cb6d837":"sns.countplot(x='Pclass',hue='Embarked',data=train,palette='viridis').set(title='Survival Distribution depending on Embarked place')\nplt.show()","a93b374c":"train.groupby('Embarked')['Fare'].mean()","c9169f18":"sns.countplot(x='Parch',hue='Survived',data=train,palette='viridis').set(title='Survival Distribution by Parch')\nplt.show()","7f5ac3a7":"sns.countplot(x='SibSp',hue='Survived',data=train,palette='viridis').set(title='Survival Distribution by SipSp')\nplt.show()","64760739":"corrDf = train.corr()\nsns.heatmap(corrDf, \n        xticklabels=corrDf.columns,\n        yticklabels=corrDf.columns,annot=True, cmap='viridis')","7343fe2e":"test.shape","f2569b7b":"test.head()","f7e5e587":"train.shape","1d1616f0":"# Create Source Column in both Train and Test\ntrain['Source'] = \"Train\"\ntest['Source'] = \"Test\"\n\n# Combine Train and Test\nFullRaw = pd.concat([train, test], axis = 0)\nFullRaw.shape\n","59ffbea8":"FullRaw.head()","adba8fd1":"# Removing PassengerId,Cabin,Name and Ticket columns\nFullRaw.drop(['PassengerId'], axis = 1, inplace = True)\nFullRaw.drop(['Cabin'], axis = 1, inplace = True)\n\nFullRaw.drop(['Name'], axis = 1, inplace = True)\nFullRaw.drop(['Ticket'], axis = 1, inplace = True)\n","4ac41faf":"FullRaw.isnull().sum()","84289597":"# We will impute the missing values for Age,Fare and Embarked \n\ntempMedian=FullRaw['Age'].median()\nFullRaw['Age']= FullRaw['Age'].fillna(tempMedian)\n\n\ntempMedian=FullRaw['Fare'].median()\nFullRaw['Fare']= FullRaw['Fare'].fillna(tempMedian)\n\ntempMode=FullRaw['Embarked'].mode()[0]\nFullRaw['Embarked']= FullRaw['Embarked'].fillna(tempMode)\n\n\nFullRaw.isnull().sum()","c7ae4af8":"FullRaw2= pd.get_dummies(FullRaw,drop_first= True)\nFullRaw2.shape","ebbef693":"# Checking our dummy variables\nFullRaw2.head()","85815bea":"# We are separating the train and the test data, and dropping the Source column as all our preprecessing work is done.\nTrain2 = FullRaw2[FullRaw2['Source_Train'] == 1].drop(['Source_Train'], axis = 1).copy()\nFinalTest = FullRaw2[FullRaw2['Source_Train'] == 0].drop(['Source_Train'], axis = 1).copy()\n\nprint(Train2.shape)\nFinalTest.shape","bfb7b1fc":"from sklearn.model_selection import train_test_split\nTrain, Test = train_test_split(Train2, train_size=0.8, random_state = 150)\n\n\nX_train = Train.drop(['Survived'], axis = 1).copy()\ny_train = Train['Survived'].copy()\nX_test = Test.drop(['Survived'], axis = 1).copy()\ny_test = Test['Survived'].copy()\nFinalTest_X = FinalTest.drop(['Survived'], axis = 1).copy()\nFinalTest_Y = FinalTest['Survived'].copy()","bbb1d097":"\nfrom sklearn.linear_model import LogisticRegression\n\nmodel = LogisticRegression(solver='liblinear', random_state = 42)\n\nmodel.fit(X_train,y_train)\n\nfinal_pred=model.predict(X_test)\n","9cefd839":"print(final_pred)","6ebc78da":"from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\naccuracy_score(y_test, final_pred)","67ed17b8":"confusion_matrix(y_test, final_pred)","c7a40e14":"print(classification_report(y_test, final_pred))","c3f9d14e":"final_pred=model.predict(FinalTest_X).astype(int)","ba4da35a":"\noutput = pd.DataFrame({'PassengerId': test.PassengerId, 'Survived': final_pred})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","0cb31840":"The fare for Pclass 1 is high compared to the other classes.\nPclass 3 has the least fare. So there are more number of passengers in Pclass 3.","d7805e52":"### **Building the model**","4571d34b":"### One hot encoding\n\n","9f1d7d26":"### **Splitting the data**","7ce8f808":"## Loading Packages\nWe are loading the necessary packages for our code.","05704469":"Out of 891 passengers, only 342 passengers survived. Now let's look into the survival percentage.","6a01caf4":"## Test set preparation","4b050967":"**Analysing Embarked feature**\n","1a8a34be":"only 38.38% of passengers survived. The rest 61.61% did not.","9b49e0c6":"* Lot of passengers from 'S' Embarked did not survive.\n\n* Only few passengers have Embarked from 'Q'.","f9e2202f":"* We can visualize that, survival rate of women is more than men in all the classes.\n\n* Passengers from Pclass '1' survived more than any other class.\n\n* Also lot of passengers from Pclass '3' didn't survive.","d77ec56b":"The survival of passengers depended on the size of the family. The bigger the family, they were less likely to survive.","ed8f56bd":"We have 891 observations with 12 features.","4a1740cd":"## Data Preprocessing\n\n### Null value check\n","e93b5a58":"Pclass '1' passengers have not Embarked much in 'Q'. So let's check the fares for the Embarked ports.","36bae2e2":"## Understanding the data \n\nLet's first check how many passengers survived.","5db00d8a":"### **Actual Test Prediction**","e3d72fce":"**Analysing Pclass feature**\n\n\nFirst, we will analyse the 'Pclass' feature.","d3d302d8":"**Analysing Parch and SipSp feature**","1cd77dd5":"We are going to create dummy variables to include the categorical data for modelling. ","e3ffbaf9":"### Reading the data","5f76895b":"### **Imputing missing values**","ff0cf75a":"### Checking the data\n\nTo know more about our dataset, we are running few lines of code to check the dimensions of our dataset, data types of the variables and basic infomation about the variables.\n","2907343e":"* From the min and max of age column, we can observe the passengers age ranges from 4 months to 80 years . Also 75% of the passengers were less than 38 years old.\n\n* Looking at the Fare column, we can spot that there some passengers were allowed to travel for free.\n","569ecc56":"Since Cabin has null values in majority, we will drop it.","531397dc":"For easy handling, we will concatenate both the train and the test data. \n\nTo differentiate between the train and the test data, we will include Source column.\nAfter preprocessing is done, we will be dropping it.","fcce8b6e":"## **Corelation Check**","9f206939":"Since 'Q' port has low mean fare, not much Pclass '1' passengers have boarded from that port.","5048b7a8":"The survival rate of passengers in Pclass 1 is more as they are the rich ones, who had paid more fare."}}