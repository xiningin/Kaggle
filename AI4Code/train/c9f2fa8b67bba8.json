{"cell_type":{"51984d87":"code","580c6c17":"code","42899fd9":"code","7c1660b0":"code","1414ac1c":"code","ecba9c40":"code","21e6a734":"code","cd5e561b":"code","39a55067":"code","10f21ceb":"code","f1d41624":"code","8bc35d8f":"code","29fa3b3b":"code","89256c3f":"code","f6ef60bf":"code","5981fcb5":"code","eff7b1b1":"code","513c646c":"code","f7df11c1":"code","2c08b8c2":"code","9a60f7a0":"code","a88d8c7f":"code","7784f93b":"code","1730587e":"code","91127134":"code","90f9f266":"code","1fb01ad2":"code","dc020db8":"code","475b0457":"markdown","7bce2cdf":"markdown","12b572de":"markdown","01132ecb":"markdown","9be6a6fe":"markdown","6a713feb":"markdown","8d9549ab":"markdown","91649210":"markdown"},"source":{"51984d87":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns # this is another visualization tool\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\n# Any results you write to the current directory are saved as output.","580c6c17":"data_ibm = pd.read_csv('..\/input\/WA_Fn-UseC_-HR-Employee-Attrition.csv')","42899fd9":"data_ibm.info() ","7c1660b0":"data_ibm.columns # to see which columns we have","1414ac1c":"data_ibm.head() # to take a look inside of the data frame","ecba9c40":"data_ibm.corr() # to see the correlations between parameters inside of the data set","21e6a734":"# to understand the correlations better, we can use correlation map\nf,ax = plt.subplots(figsize=(10,10))\n# use sns seabon library for virtualization\nsns.heatmap(data_ibm.corr(),annot=True,linewidth=5,fmt = '.1f', ax=ax)\nplt.show()","cd5e561b":"# LINE PLOT: we prefer to use line plot if the x axis must be time\n# color = color, label = label, linewidth = width of the line, alpha = opacity, grid=grid, line style = style of the line\n# here we took the first 102 rows from the data frame and we created a small data frame named \"small_data\". \n# And we plotted Monthly and Daily rates from the small data frame\nsmall_data = data_ibm.head(102)\nsmall_data.MonthlyRate.plot(kind='line',color='g',label='Monthly Rate',linewidth=1,alpha=1,grid=True,linestyle = ':')\nsmall_data.DailyRate.plot(kind='line',color='r',label = 'Daily Rate', linewidth=1,alpha=1,grid=True,linestyle='-.')\nplt.legend(loc='upper right')\nplt.xlabel('x axis')\nplt.ylabel('y axis')\nplt.title('Line plot of Monthly and Daily Rates')\nplt.show()","39a55067":"# SCATTER PLOT: we prefer to use scatter plot, when there is a correlation between the parameters inside of the data frame\n# In this example, we analyzed teh correlation between Job Level and Monthly Income\n# You can see the correlations easily by using \".corr()\" method. If the correlation value is 1= it means we have correlation, \n# if the value is 0, we have no correlation. And if the value -1, it means we have negative correlation\ndata_ibm.plot(kind='scatter', x = 'MonthlyIncome', y = 'JobLevel',alpha=0.5,color='red')\nplt.xlabel(\"Monthly Income\")\nplt.ylabel(\"Job Level\")\nplt.title(\"Correlation between Job Level and Monthly Income\")\nplt.show()","10f21ceb":"# Also the following code block can draw exactly the same scatter plot\ndata_ibm.columns\nplt.scatter(data_ibm.MonthlyIncome,data_ibm.JobLevel,color=\"red\",alpha=0.5)\nplt.show()\n# As we can see from the plots, there is a strong possitive correlation between Job level and Monthly Income \n# in the IBM HR Analytics Employee Attrition and Performance data set","f1d41624":"# HISTOGRAM: We prefer to use histograms when we want to see distributions of numerical data in the data set\n# bins = number of bars in the figure\ndata_ibm.Age.plot(kind='hist',bins = 50, figsize = (10,10))\nplt.show()\n# Here we can see the Age frequencies and its distributions in the data set","8bc35d8f":"# to clean a plot\n# first create and then clean the plot,\ndata_ibm.JobLevel.plot(kind='hist',bins=50)\nplt.clf()\n","29fa3b3b":"# In this part we do not use the data set\n# create a dictionary and view its keys and values\ndictionary = {'worker1': 'woman', 'worker2': 'man'}\nprint(dictionary.keys())\nprint(dictionary.values())\n","89256c3f":"# If you want to update existing dictionary info:\ndictionary['worker1'] = \"man\"\ndictionary['worker2'] = \"woman\"\n# If you want to add info to dictionary\ndictionary['worker3'] = \"woman\"\nprint(dictionary)\nprint(dictionary.keys())\nprint(dictionary.values())\n","f6ef60bf":"# to clear dictionary\ndictionary.clear()\nprint(dictionary)\n# when you clear the dictionary, it will remain there as an empty dictionary","5981fcb5":"# to delete dictionary\ndel dictionary\n# NOTE: After you delete a dictionary, you cannot access that dictionary anymore. For example you cannot use \n# print function to display it because you do not have that dictionary anymore.","eff7b1b1":"# import pandas library to be able to use \n# take data set and create a data frame named \"data_ibm\"\nimport pandas as pd\ndata_ibm = pd.read_csv('..\/input\/WA_Fn-UseC_-HR-Employee-Attrition.csv')","513c646c":"# Difference between series and data frames\n# to create a serie\nseries = data_ibm['JobLevel']\nprint(type(series)) # to see the type of \"series\"","f7df11c1":"# to create a data frame\ndata_frame = data_ibm[['JobLevel']]\nprint(type(data_frame)) # to see the type of \"data_frame\"","2c08b8c2":"# Comparison and boolean operators\nprint(\"5 is greater than 15: \",5>15) # it will give us true if 5 is greater than 15, otherwise false.\nprint(\"3 is not equal to 25: \",3!=25) # it will give us true if 3 is not equal to 25, otherwise false.\n# boolean operators: we have 2 boolean operators; True and False. We can think them as True=1 and False=0\n# to understand logically better.\nprint(\"Result of True & True: \" ,True and True)\nprint(\"Result of True & False: \",True and False)\nprint(\"Result of False || True: \",False or True)\nprint(\"Result of False || False: \", False or False)\n","9a60f7a0":"# Filtering: let's create a filter named x and use it to filter data from the data set\n# In this case we filtered employees who is younger than 20 years old\nx = data_ibm['Age']<20\ndata_ibm[x]","a88d8c7f":"# Filtering part2: by using logical_and\n# This filter gives us female workers who are younger than 30 \nimport numpy as np\ndata_ibm[np.logical_and(data_ibm['Age']<30,data_ibm['Gender']=='Female')]","7784f93b":"# Following code block will do the same filtering with the above code block\ndata_ibm[(data_ibm['Age']<30) & (data_ibm['Gender']=='Female')]","1730587e":"# a normal while loop-basic\ni = 0\nwhile i!= 5 :\n    print('i is : ',i)\n    i+=1\nprint('now i is equal to',i,' and we are outside of the while loop')","91127134":"# for loop with list\nlist1 = [10,20,30,40,50,60]\nfor i in list1:\n    print('i is : ',i)\nprint('we finished the list, we are outside of the for loop now')","90f9f266":"# now let's use \"enumerate\" and use the same list1= 10,20,30,40,50,60\n# index: value = 0:10, 1:20, 2:30, 3:40, 4:50, 5:60\nfor index, value in enumerate(list1):\n    print(\"index: \",index,\":\",\"values: \",value)\nprint('we finished the list, we are outside of the for loop now')","1fb01ad2":"# using loops with dictionaries\ndictionary = {'worker1':'woman','worker2':'man','worker3':'man','worker4':'woman','worker5':'woman'}\nfor key, value in dictionary.items():\n    print(\"key of the dictionary: \",key,\":\",\"value of the dictionary: \",value)\nprint('we finished the dictionary, we are outside of the for loop now')","dc020db8":"# we can access the indexes and values also for pandas library\n# In this example we took first 10 rows' ages and their indexes for pandas library\nfor index,value in data_ibm[['Age']][0:10].iterrows():\n    print(\"index of the data in pandas: \",index,\":\",\"value of the data in pandas: \",value)","475b0457":"To work with pandas, the first things that we have to learn as follows:\n- Logic\n- Control\n- Filtering","7bce2cdf":"**BRIEF LOOK TO WHILE AND FOR LOOPS**","12b572de":"**NOW LET'S WORK WITH DICTIONARIES**\nYou can think dictionaries as small databases. Each one has keys and values.\nDo not forget that, working with dictionaries is faster than working with lists.\n","01132ecb":"Hi,\nThis is my first kaggle try on a data set.\nI am a beginner in data science and I am trying to improve my skills.\nI have implemented some basic python analysis tools also I tried to use some structures such as lists, dictionaries and also loops to see how they work.\nThis kernel just for beginners, I am also a beginner trying new things. :)\nHave fun!","9be6a6fe":"When we create series , we do not use list structure [[ ]]\nWhen we crate data frames, we use the list structure [[ ]]\n","6a713feb":"**NOW LETS WORK ON PANDAS A LITTLE BIT**\nIn this part we are going to use our data set again.","8d9549ab":" **First things we have to do:**\nFirst we must understand what we are going to analyze ","91649210":"**NOW LET'S USE SOME PLOTS**"}}