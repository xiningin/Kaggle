{"cell_type":{"536a5a90":"code","f1f05fc3":"code","7a725723":"code","c0d81a80":"code","0a7f5287":"code","6eb2d88e":"code","55486772":"code","02aae8e0":"code","323a65cb":"code","33e473da":"code","765adc9f":"code","33fa12c4":"code","8f2a11e8":"code","b09ff47c":"code","de4698cf":"code","a577efa6":"code","f0264290":"code","4f7a6a78":"code","04e18c23":"code","35710e99":"code","11cca47d":"code","7b340c8b":"code","f1c94f7e":"code","d372a43c":"code","a315a971":"code","53cdef42":"code","960539a0":"code","136f0cac":"code","4130b66a":"code","c28c687a":"code","84f701fe":"code","ade8afe0":"code","3e3189e2":"code","1291243c":"code","9c231111":"code","6cdc7e38":"code","a5479710":"code","2d5e080b":"markdown"},"source":{"536a5a90":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nprint(os.listdir(\"\/kaggle\/input\/flower-recognition\/flower_recognition\"))","f1f05fc3":"!pip install pretrainedmodels","7a725723":"from torchvision.models import *\n# import pretrainedmodels\n\nfrom fastai import *\nfrom fastai.vision import *\nfrom fastai.vision.models import *\nfrom fastai.vision.learner import model_meta\nimport fastai\n\nfrom utils import *\nimport sys\nimport torch\nfastai.__version__","c0d81a80":"torch.__version__","0a7f5287":"lis = os.listdir('\/kaggle\/input\/flower-recognition\/flower_recognition\/train')","6eb2d88e":"sub = pd.read_csv('\/kaggle\/input\/flower-recognition\/flower_recognition\/sample_submission.csv')","55486772":"sub.shape","02aae8e0":"bs=8","323a65cb":"path = \"\/kaggle\/input\/flower-recognition\/flower_recognition\/train\"","33e473da":"## test filenames to be used to create final submission.\nfilenames = os.listdir('\/kaggle\/input\/flower-recognition\/flower_recognition\/test')","765adc9f":"df = pd.read_csv('\/kaggle\/input\/flower-recognition\/flower_recognition\/train.csv')","33fa12c4":"df.head()","8f2a11e8":"# CenterCrop(32)\n## These Transformation applied based upon my previous competition Experience.\n## if you want to try other transformation check this link\n## https:\/\/docs.fast.ai\/vision.transform.html\ntfms = get_transforms(flip_vert=False,max_zoom=1.0,max_warp=0,do_flip=False,xtra_tfms=[cutout()])\ntfms1 = get_transforms(flip_vert=False,max_zoom=1.0,max_warp=0,do_flip=False,xtra_tfms=[cutout()])\ndata = (ImageList.from_csv(path, csv_name = '..\/train.csv', suffix='.jpg')\n        .split_by_rand_pct()              \n        .label_from_df()            \n        .add_test_folder(test_folder = '..\/test')              \n        .transform(tfms, size=400)\n        .databunch(num_workers=0,bs=8))\n\ndata1 = (ImageList.from_csv(path, csv_name = '..\/train.csv', suffix='.jpg')\n        .split_by_rand_pct()              \n        .label_from_df()            \n        .add_test_folder(test_folder = '..\/test')              \n        .transform(tfms1, size=400)\n        .databunch(num_workers=0,bs=8))","b09ff47c":"## to see the images in train with there labels\ndata.show_batch(rows=3, figsize=(8,10))","de4698cf":"## print the target classes\nprint(data.classes)","a577efa6":"## load the pretrained imagenet model\n## you can try other models from this link\n## https:\/\/docs.fast.ai\/vision.models.html\nlearn = cnn_learner(data, models.densenet169, metrics=[error_rate, accuracy], model_dir=\"\/tmp\/model\/\")","f0264290":"## training with one cycle which used cyclic learning rate and learning rate annhelling\nlearn.fit_one_cycle(1)","4f7a6a78":"learn.unfreeze()\nlearn.lr_find()","04e18c23":"# learn.recorder.plot(suggestion=True)\n# best_clf_lr = learn.recorder.min_grad_lr\n# best_clf_lr","35710e99":"# learn.fit_one_cycle(2, max_lr=best_clf_lr)\nlearn.fit_one_cycle(2, max_lr=slice(1e-6,1e-3))","11cca47d":"## 2nd model","7b340c8b":"learn1 = cnn_learner(data1, models.densenet201, metrics=[error_rate, accuracy], model_dir=\"\/tmp\/model\/\")","f1c94f7e":"## training with one cycle which used cyclic learning rate and learning rate annhelling\nlearn1.fit_one_cycle(1)","d372a43c":"learn1.unfreeze()\nlearn1.lr_find()\nlearn1.fit_one_cycle(2, max_lr=slice(1e-6,1e-3))","a315a971":"learn2 = cnn_learner(data1, models.resnet152, metrics=[error_rate, accuracy], model_dir=\"\/tmp\/model\/\")\n## training with one cycle which used cyclic learning rate and learning rate annhelling\nlearn2.fit_one_cycle(1)\nlearn2.unfreeze()\nlearn2.lr_find()\nlearn2.fit_one_cycle(2, max_lr=slice(1e-6,1e-3))","53cdef42":"learn3 = cnn_learner(data, models.densenet121, metrics=[error_rate, accuracy], model_dir=\"\/tmp\/model\/\")\n## training with one cycle which used cyclic learning rate and learning rate annhelling\nlearn3.fit_one_cycle(1)\nlearn3.unfreeze()\nlearn3.lr_find()\nlearn3.fit_one_cycle(2, max_lr=slice(1e-6,1e-3))","960539a0":"## Applied Test Time Augmentation","136f0cac":"preds,_ = learn.TTA(ds_type=DatasetType.Test)","4130b66a":"preds1,_ = learn1.TTA(ds_type=DatasetType.Test)","c28c687a":"preds2,_ = learn2.TTA(ds_type=DatasetType.Test)\npreds3,_ = learn3.TTA(ds_type=DatasetType.Test)","84f701fe":"## create the submission file ","ade8afe0":"labelled_preds = []\npred11 = preds + preds1 + preds2 + preds3\nfor pred in pred11:\n    labelled_preds.append(int(np.argmax(pred))+1)\n\nsubmission = pd.DataFrame(\n    {'image_id': filenames,\n     'category': labelled_preds,\n    })\nsubmission.to_csv('submission.csv',index=False)","3e3189e2":"submission.head()","1291243c":"submission['image_id'] = submission['image_id'].apply(lambda x:x.split('.')[0])","9c231111":"submission = submission.sort_values(by = ['image_id'], ascending = [True])","6cdc7e38":"## To download the submission file without Commiting the kernel.","a5479710":"from IPython.display import HTML\nimport pandas as pd\nimport numpy as np\nimport base64\n\n# download it (will only work for files < 2MB or so)\ndef create_download_link(df, title = \"Download CSV file\", filename = \"subm.csv\"):  \n    csv = df.to_csv(index=False)\n    b64 = base64.b64encode(csv.encode())\n    payload = b64.decode()\n    html = '<a download=\"{filename}\" href=\"data:text\/csv;base64,{payload}\" target=\"_blank\">{title}<\/a>'\n    html = html.format(payload=payload,title=title,filename=filename)\n    return HTML(html)\n\ncreate_download_link(submission)","2d5e080b":"### Need pretrainedmodels to load the pretrained Cedene models into fastai.\n### https:\/\/github.com\/Cadene\/pretrained-models.pytorch"}}