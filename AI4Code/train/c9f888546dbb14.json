{"cell_type":{"6eca0291":"code","f27b383f":"code","20d935c6":"code","1b11718b":"code","6045466e":"code","77dc7462":"code","1c290305":"code","b37dbe84":"code","fb004564":"code","8ac4c094":"markdown","b8084e86":"markdown"},"source":{"6eca0291":"import os\nimport time\nimport tqdm\nimport imageio\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom multiprocessing import Pool\nimport seaborn as sns; sns.set(style=\"white\", color_codes=True)\nimport matplotlib.pyplot as plt\n%matplotlib inline","f27b383f":"base_dir = '..\/input\/landmark-recognition-2020\/'\ntrain_csv = pd.read_csv(base_dir + 'train.csv')\nsample_submission = pd.read_csv(base_dir + 'sample_submission.csv')","20d935c6":"train_csv.head()","1b11718b":"train_csv.info()","6045466e":"def get_image_features(lid):\n    impath = base_dir + 'train\/' + '\/'.join(list(lid[:3])) + '\/' + lid + '.jpg'\n    im = imageio.imread(impath)\n    xsize = im.shape[-3]\n    ysize = im.shape[-2]\n    depth = im.shape[-1]\n    return xsize, ysize, depth","77dc7462":"with Pool(4) as p:\n    r = list(tqdm.tqdm(p.imap(get_image_features, train_csv.id), total=1000))","1c290305":"train_csv['xsize'] = np.array(r).T[0]\ntrain_csv['ysize'] = np.array(r).T[1]\ntrain_csv['depth'] = np.array(r).T[2]","b37dbe84":"train_csv.to_csv('train_featured.csv', index=False)","fb004564":"g = sns.jointplot(x=\"xsize\", y=\"ysize\", data=train_csv)","8ac4c094":"**Train Image Size Distribution**","b8084e86":"# Fast Image Reading via Multiprocessing & Getting Image Sizes\n\nThe train dataset contains ~1.5 million images. The popular image libraries, such as imageio or cv2, read ~20 images in a second on average (the average is based on first 38k images in the train dataset). Reading 1.5 million images with this average rate would give a total reading time of 20.8 hr, which is impossibly long to keep the kaggle notebebook alive.\n\nThis reading time can be reduced by multiprocessing as can be shown in this notebook. Exploiting this faster reading time, I present here a full list of image size (xsize, ysize) and depth (channel) information for all train images.\n\nP.S. Please don't forget to upvote, if you find the notebook useful."}}