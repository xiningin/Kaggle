{"cell_type":{"b5646306":"code","7c8f9852":"code","1947882c":"code","4006a833":"code","2c8bc4b3":"code","644dec8a":"code","f70978d5":"code","d0bd932f":"code","af62b2bf":"code","21573b70":"code","547abe12":"code","49b1354a":"code","49252e8b":"code","623526d9":"code","930f6bc9":"code","0cb0503b":"code","a0ed0388":"code","ef8ae6dc":"code","616f8d57":"code","77d05a02":"code","a1497894":"code","68965d7b":"code","afbbd361":"code","6abba205":"code","e4f8093c":"code","85d6dec3":"code","3729e100":"markdown","6f050ee1":"markdown","1d9cd668":"markdown","fd1669ae":"markdown","4cdf761e":"markdown","ca0c767e":"markdown","346db649":"markdown","bc626a2c":"markdown","f316b4ce":"markdown","78cf734c":"markdown","3de8ee07":"markdown","5843ef2d":"markdown","bde598e5":"markdown","ad7d83f6":"markdown","5f733a5e":"markdown","21aae411":"markdown","2766fe6f":"markdown","65948beb":"markdown","3c1e4c63":"markdown","84399fd4":"markdown","7f8450aa":"markdown"},"source":{"b5646306":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7c8f9852":"!pip install swifter\n!pip install Sastrawi","1947882c":"# matplot\nimport matplotlib\nimport seaborn as sns\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\n# sklearn\nfrom sklearn.svm import LinearSVC\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics import confusion_matrix, classification_report\n\n#nltk\nimport nltk\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\nfrom nltk.tokenize import sent_tokenize, word_tokenize\n\n#sastrawi\nimport Sastrawi.Stemmer\nfrom Sastrawi.Stemmer.StemmerFactory import StemmerFactory\nfrom Sastrawi.StopWordRemover.StopWordRemoverFactory import StopWordRemoverFactory\nimport swifter\n\n#util\nimport re\nimport string\nfrom string import digits\nfrom collections import Counter\nimport re\nimport pickle\nimport numpy as np\nimport pandas as pd\n#import inline as inline","4006a833":"#importing the dataset\nDATASET_COLUMNS  = [\"kategori\",\"text\"]\nDATASET_ENCODING = \"ISO-8859-1\"\ndataset = pd.read_csv('\/kaggle\/input\/ppkm-twitter-dataset\/dataset_rzl.csv',\n                      encoding=DATASET_ENCODING , names=DATASET_COLUMNS)","2c8bc4b3":"ax = dataset['kategori'].value_counts().plot(kind='bar', figsize=(10,5),fontsize=16,color='#33ccff')\nax.set_title('Jumlah Data positif, negatif dan netral', size=20, pad=30)\nax.set_ylabel('Jumlah Angka', fontsize=20)\n\nfor i in ax.patches:\n    ax.text(i.get_x() + 0.19, i.get_height() - 30, str(round(i.get_height(), 5)), fontsize=15)","644dec8a":"factory = StemmerFactory()\nstemmer = factory.create_stemmer()","f70978d5":"def preprocessing(data):\n    fitur_ekstraksi0 = []\n    for cuitan in range(0, len(data)):\n        tmp = str(data[cuitan]).lower()\n        fitur_ekstraksi0.append(tmp)\n    fitur_ekstraksi1 = []\n    for cuitan in range(0, len(fitur_ekstraksi0)):\n        tmp = fitur_ekstraksi0[cuitan].translate(str.maketrans(' ', ' ', digits))  # membuang karakter angka\n        fitur_ekstraksi1.append(tmp)\n    fitur_ekstraksi2 = []\n    for cuitan in range(0, len(fitur_ekstraksi1)):\n        tmp = fitur_ekstraksi1[cuitan].translate(str.maketrans(' ', ' ', string.punctuation))  # membuang karakter\n        fitur_ekstraksi2.append(tmp)\n    fitur_ekstraksi3 = []\n    # fitur_ekstraksi = []\n    for cuitan in range(0, len(fitur_ekstraksi2)):\n        tmp = re.sub(r'\\\\W', ' ',str(fitur_ekstraksi2[cuitan])) # membuang karakter khusus selain angka dan huruf\n        tmp = re.sub(r'\\\\s+[a-zA-Z]\\\\s+', ' ',str(fitur_ekstraksi2[cuitan])) # membuang kata yang hanya satu huruf\n        tmp = re.sub(r'\\\\^[a-zA-Z]\\\\s+', ' ',str(fitur_ekstraksi2[cuitan])) # membuang kata yang hanya satu huruf dari awal\n        tmp = re.sub(r'\\\\s+', ' ',str(fitur_ekstraksi2[cuitan])) # mengganti spasi ganda dengan spasi tunggal\n        fitur_ekstraksi3.append(tmp)\n    fitur_ekstraksi5 = []\n    for cuitan in range(0, len(fitur_ekstraksi3)):\n        tmp = word_tokenize(str(fitur_ekstraksi3[cuitan]))\n        fitur_ekstraksi5.append(tmp)\n    return fitur_ekstraksi5","d0bd932f":"stopwordp1 = open('\/kaggle\/input\/ppkm-twitter-dataset\/stopword_rzl.txt', 'r')\nstopwordp2 = stopwordp1.read()\nstopwordp = word_tokenize(stopwordp2)","af62b2bf":"def swr(a, b):\n    filtered_sentence = []\n    for w in a:\n        if w not in b:\n            filtered_sentence.append(w)\n    return filtered_sentence","21573b70":"fitur = dataset.iloc[:,1].values\nlabels = dataset.iloc[:,0].values","547abe12":"callbackvalue = preprocessing(fitur)","49b1354a":"def stopw(datanext):\n    fitur_ekstraksiku = []\n    for cuitan in range(0, len(datanext)):\n        tmp = swr(datanext[cuitan], stopwordp)\n        fitur_ekstraksiku.append(tmp)\n    return fitur_ekstraksiku\nfitur_ekstraksinext = stopw(callbackvalue)\nprint(fitur_ekstraksinext[15])\nprint('\\\\n')","49252e8b":"def identity_tokenizer(text):\n    return text\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nvektor_kata = TfidfVectorizer(tokenizer=identity_tokenizer, lowercase=False)\nfitur_ekstraksisiap = vektor_kata.fit_transform(fitur_ekstraksinext).toarray()\n\nfitur_ekstraksi = []\nfor cuitan in range(0, len(callbackvalue)):\n    tmp = fitur_ekstraksisiap[cuitan]\n    fitur_ekstraksi.append(tmp)\n\nfitur_ekstraksitest = []\nfor cuitan in range(len(callbackvalue), len(fitur_ekstraksisiap)):\n    tmp = fitur_ekstraksisiap[cuitan]\n    fitur_ekstraksitest.append(tmp)","623526d9":"from sklearn.model_selection import train_test_split\n    \nX_train,X_test,y_train,y_test = train_test_split(fitur_ekstraksi,labels,test_size=0.2,random_state=42, shuffle=True, stratify=labels)","930f6bc9":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB, MultinomialNB, BernoulliNB\nfrom sklearn.linear_model import LogisticRegression, SGDClassifier\nfrom sklearn.svm import SVC, LinearSVC, NuSVC\nfrom sklearn.metrics import accuracy_score, classification_report","0cb0503b":"gnb = GaussianNB()\nKNN = KNeighborsClassifier(n_neighbors=1)\nMNB = MultinomialNB()\nBNB = BernoulliNB()\nLR = LogisticRegression()\nSDG = SGDClassifier()\nSVC = SVC()\nLSVC = LinearSVC()\nNSVC = NuSVC()","a0ed0388":"def model_Evaluate(model):\n    \n    # Predict values for Test dataset\n    y_pred = model.predict(X_test)\n\n    # Print the evaluation metrics for the dataset.\n    print(classification_report(y_test, y_pred))","ef8ae6dc":"gnb.fit(X_train, y_train)\ny2_GNB_model = gnb.predict(X_test)\nprint(\"GaussianNB Accuracy :\", accuracy_score(y_test, y2_GNB_model))\nprint(\"\")\nmodel_Evaluate(gnb)","616f8d57":"KNN.fit(X_train,y_train)\ny2_KNN_model = KNN.predict(X_test)\nprint(\"KNN Accuracy :\", accuracy_score(y_test, y2_KNN_model))\nprint(\"\")\nmodel_Evaluate(KNN)","77d05a02":"MNB.fit(X_train,y_train)\ny2_MNB_model = MNB.predict(X_test)\nprint(\"MNB Accuracy :\", accuracy_score(y_test, y2_MNB_model))\nprint(\"\")\nmodel_Evaluate(MNB)","a1497894":"BNB.fit(X_train,y_train)\ny2_BNB_model = BNB.predict(X_test)\nprint(\"BNB Accuracy :\", accuracy_score(y_test, y2_BNB_model))\nprint(\"\")\nmodel_Evaluate(BNB)","68965d7b":"LR.fit(X_train,y_train)\ny2_LR_model = LR.predict(X_test)\nprint(\"LR Accuracy :\", accuracy_score(y_test, y2_LR_model))\nprint(\"\")\nmodel_Evaluate(LR)","afbbd361":"SDG.fit(X_train,y_train)\ny2_SDG_model = SDG.predict(X_test)\nprint(\"SDG Accuracy :\", accuracy_score(y_test, y2_SDG_model))\nprint(\"\")\nmodel_Evaluate(SDG)","6abba205":"SVC.fit(X_train,y_train)\ny2_SVC_model = SVC.predict(X_test)\nprint(\"SVC Accuracy :\", accuracy_score(y_test, y2_SVC_model))\nprint(\"\")\nmodel_Evaluate(SVC)","e4f8093c":"LSVC.fit(X_train,y_train)\ny2_LSVC_model = LSVC.predict(X_test)\nprint(\"LSVC Accuracy :\", accuracy_score(y_test, y2_LSVC_model))\nprint(\"\")\nmodel_Evaluate(LSVC)","85d6dec3":"NSVC.fit(X_train,y_train)\ny2_NSVC_model = NSVC.predict(X_test)\nprint(\"NSVC Accuracy :\", accuracy_score(y_test, y2_NSVC_model))\nprint(\"\")\nmodel_Evaluate(NSVC)","3729e100":"GaussianNB","6f050ee1":"Nu Support Vector Classification","1d9cd668":"> Import library","fd1669ae":"MultinomialNB","4cdf761e":"BernoulliNB","ca0c767e":"> # After","346db649":"> Pendeklarasian Dataset","bc626a2c":"> Pre-Processing","f316b4ce":"Linear Support Vector Classification","78cf734c":"KNeighborsClassifier","3de8ee07":"> Pembangunan Model","5843ef2d":"Stochastic Descent Gradient Classifier","bde598e5":"> Pembagian Data Training dan Data Test","ad7d83f6":"> Install Library","5f733a5e":"> Build Model","21aae411":"Support Vector Classification","2766fe6f":"LogisticRegression","65948beb":"> # During","3c1e4c63":"> # Before","84399fd4":"> Melihat kuantitas data yang dimiliki","7f8450aa":"> Hasil Proses"}}