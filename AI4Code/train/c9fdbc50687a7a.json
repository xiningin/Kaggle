{"cell_type":{"fb30b07a":"code","65328d52":"code","21fd0d26":"code","e432c025":"code","eec54c9c":"code","9a6a50a1":"code","ddb860b9":"code","303b94bc":"code","23d5bf9f":"code","cf220927":"code","5d65f085":"code","4663e15b":"code","e7f1cb58":"code","e8f052b2":"code","9a087e66":"code","48865ee6":"code","acf253a2":"code","1196a07e":"code","056aa7a9":"code","b115f9b9":"code","58d6acd6":"code","58114349":"code","2e22ee84":"code","f90d8c92":"code","574f0966":"code","a9eef48c":"code","bcbe13d1":"code","225bcde0":"code","41f00c8e":"code","fa35ce2e":"code","a283ff1a":"code","39625161":"code","5a7e52f0":"code","bf5ca800":"code","40daf517":"code","e98c656d":"code","fb0734d1":"code","244b427b":"code","acb17c42":"markdown","07ff4c9f":"markdown","b7cd443d":"markdown","3801469a":"markdown","332fe5d4":"markdown","b4daec62":"markdown","c80c3a1f":"markdown","a7f4d5cf":"markdown","00351673":"markdown","99148b7e":"markdown","70e4200e":"markdown"},"source":{"fb30b07a":"\nimport numpy as np \nimport pandas as pd \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","65328d52":"df_gender = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\ndf=pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')","21fd0d26":"df.head()","e432c025":"df.info()","eec54c9c":"df.describe()","9a6a50a1":"df.var()","ddb860b9":"df.corr()","303b94bc":"df.shape","23d5bf9f":"df.isna().sum()","cf220927":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()","5d65f085":"l=len(df)\nfig, ax = plt.subplots(nrows=2,ncols=5, figsize=(35,20), constrained_layout=True)\nsns.despine(top=True, right=True, left=True, bottom=True, offset=None, trim=False)\nax=ax.flatten()\n\n#PassengerId\nsns.histplot(df['PassengerId'], ax=ax[0])\n\n#Survived\nsns.countplot(x=df['Survived'], ax=ax[1])\nfor i,j in enumerate(ax[1].patches):\n    ax[1].text(x=i, y=j.get_height()\/2, s=f'{np.round(j.get_height()\/l,3)*100} %')\n\n#PClass\nsns.countplot(x=df['Pclass'],ax=ax[2])\nfor i,j in enumerate(ax[2].patches):\n    ax[2].text(x=i, y=j.get_height(), s=f'{np.round(j.get_height()\/l,3)*100} %')\n    \n#Sex\nsns.countplot(x=df['Sex'], ax=ax[3])\nfor i,j in enumerate(ax[3].patches):\n    ax[3].text(x=i, y=j.get_height(), s=f'{np.round(j.get_height()\/l,2)*100} %')\n\n#Age\nsns.histplot(df['Age'],bins=10, ax=ax[4],log_scale=10)\n\n#Sibsb\nsns.countplot(x=df['SibSp'], ax=ax[5])\nfor i,j in enumerate(ax[5].patches):\n    ax[5].text(x=i, y=j.get_height(), s=j.get_height())\n\n#Sibsb\nsns.countplot(x=df['Parch'], ax=ax[6])\nfor i,j in enumerate(ax[6].patches):\n    ax[6].text(x=i, y=j.get_height(), s=j.get_height())\n\n#Fare\nsns.histplot(df['Fare'],bins=50, ax=ax[7])\n\n#Embarked\nsns.countplot(x=df['Embarked'], ax=ax[8])\nfor i,j in enumerate(ax[8].patches):\n    ax[8].text(x=i, y=j.get_height(), s=j.get_height())\n\n#Embarked\nsns.countplot(x=df['Cabin'], ax=ax[9])\nfor i,j in enumerate(ax[9].patches):\n    ax[9].text(x=i, y=j.get_height(), s=j.get_height())","4663e15b":"#drop PassengerId and Name feature as it is unique values\ndf=df.drop(['PassengerId','Name'], axis=1)\n\ndf_test=df_test.drop(['PassengerId','Name'], axis=1)","e7f1cb58":"print(\"missng values\")\ndf.isna().sum().sort_values(ascending=False)","e8f052b2":"sns.boxplot(x=df['Pclass'], y=df['Age'])","9a087e66":"df.groupby(by=['Pclass']).mean()['Age']","48865ee6":"#Fill Age based on PClass category and mean Age.\ndef age_fill(col):\n    age=col[0]\n    pclass=col[1]\n    if pd.isnull(age):\n        if pclass ==1:\n            return 38\n        elif pclass ==2 :\n            return 29\n        else:\n            return 25\n    else:\n        return age\n\n","acf253a2":"df['Age']=df[['Age','Pclass']].apply(age_fill, axis=1)\n\ndf_test['Age']=df_test[['Age','Pclass']].apply(age_fill, axis=1)","1196a07e":"#Embarked feature has only 2 null value, I'll drop them\ndf.dropna(axis=0, subset=['Embarked'], inplace=True)","056aa7a9":"#droping cabin and ticket features. \ndf.drop(['Ticket','Cabin'], axis=1, inplace=True)\n\ndf_test.drop(['Ticket','Cabin'], axis=1, inplace=True)","b115f9b9":"df.head()","58d6acd6":"df_test.isna().sum()","58114349":"\ndf_test['Fare'] = df_test['Fare'].fillna(df_test['Fare'].mean())","2e22ee84":"#Visualizing relations with the target\n\nfig, ax = plt.subplots(nrows=3,ncols=3, figsize=(15,6), constrained_layout=True)\nsns.despine(top=True, right=True, left=True, bottom=True, offset=None, trim=False)\nax=ax.flatten()\n\n\n#PClass\nsns.barplot(y=df['Survived'], x=df['Pclass'],ax=ax[0])\nfor i,j in enumerate(ax[0].patches):\n    ax[0].text(x=i, y=j.get_height(), s=np.round(j.get_height(),2))\n    \n#Sex\nsns.barplot(y=df['Survived'], x=df['Sex'],ax=ax[1])\nfor i,j in enumerate(ax[1].patches):\n    ax[1].text(x=i, y=j.get_height(), s=np.round(j.get_height(),2))\n\n#Age\nsns.histplot(data=df, x='Age',bins=10, ax=ax[2], hue='Survived', kde=True, stat='count')\n\n#Sibsp\nsns.barplot(y=df['Survived'], x=df['SibSp'],ax=ax[3])\nfor i,j in enumerate(ax[3].patches):\n    ax[3].text(x=i, y=j.get_height(), s=np.round(j.get_height(),2))\n\n#Parch\nsns.barplot(y=df['Survived'], x=df['Parch'],ax=ax[4])\nfor i,j in enumerate(ax[4].patches):\n    ax[4].text(x=i, y=j.get_height(), s=np.round(j.get_height(),2))\n\n#Fare\nsns.histplot(data=df ,x='Fare',bins=50, ax=ax[5], hue='Survived')\n\n#Embarked\nsns.barplot(y=df['Survived'], x=df['Embarked'],ax=ax[7])\nfor i,j in enumerate(ax[7].patches):\n    ax[7].text(x=i, y=j.get_height(), s=np.round(j.get_height(),2))\n\nax[6].set_xticks([])\nax[6].set_yticks([])\n\nax[8].set_xticks([])\nax[8].set_yticks([])\n","f90d8c92":"fig, ax = plt.subplots(nrows=1,ncols=2, figsize=(15,6), constrained_layout=True)\nax=ax.flatten()\nsns.boxplot(data=df, y='Age', x='Sex', ax=ax[0])\nsns.boxplot(data=df, y='Age', x='Sex', ax=ax[1], hue='Survived')","574f0966":"fig, ax = plt.subplots(nrows=1,ncols=2, figsize=(15,6), constrained_layout=True)\nax=ax.flatten()\nsns.boxplot(data=df, y='Fare', x='Sex', ax=ax[0])\nsns.boxplot(data=df, y='Fare', x='Sex', ax=ax[1], hue='Survived')","a9eef48c":"fig, ax= plt.subplots(nrows=1, ncols=2, figsize=(15,6))\nax=ax.flatten()\nsns.heatmap(df[df['Survived']==1].corr(),annot=True, ax=ax[0])\nsns.heatmap(df[df['Survived']==0].corr(),annot=True, ax=ax[1])","bcbe13d1":"sns.pairplot(df, hue='Survived')","225bcde0":"df['Pclass']=df['Pclass'].astype('category')\ndf['Sex']=df['Sex'].astype('category')\ndf['SibSp']=df['SibSp'].astype('category')\ndf['Parch']=df['Parch'].astype('category')\ndf['Embarked']=df['Embarked'].astype('category')\n","41f00c8e":"df_test['Pclass']=df_test['Pclass'].astype('category')\ndf_test['Sex']=df_test['Sex'].astype('category')\ndf_test['SibSp']=df_test['SibSp'].astype('category')\ndf_test['Parch']=df_test['Parch'].astype('category')\ndf_test['Embarked']=df_test['Embarked'].astype('category')\n","fa35ce2e":"df.info()","a283ff1a":"df_dummy=pd.get_dummies(df, columns=['Pclass','Sex','SibSp','Parch','Embarked'], drop_first=True)","39625161":"df_test_dummy = pd.get_dummies(df_test, columns=['Pclass','Sex','SibSp','Parch','Embarked'], drop_first=True)","5a7e52f0":"df_dummy.info()","bf5ca800":"from sklearn.model_selection import train_test_split\n\nX=df_dummy.drop(['Survived'], axis=1)\ny=df_dummy['Survived']\n\nX_test = df_test_dummy\n\nX_train, X_valid, y_train, y_valid=train_test_split(X, y, test_size=0.3, random_state=1)\n\n","40daf517":"from sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n\nmodel = GradientBoostingClassifier()\nmodel.fit(X_train, y_train)\nprint(f\"Accuracy Score from Training data: {model.score(X_train, y_train)}\")\npred=model.predict(X_valid)\nprint(f\"Accuracy Score from validation data: {accuracy_score(y_valid, pred)}\")\n\nprint(\"Classification Report \\n\")\nprint(classification_report(pred, y_valid))\n\nprint(\"Confusion Matrix \\n\")\nsns.heatmap(confusion_matrix(pred, y_valid), annot=True)\n","e98c656d":"X_test.drop(columns = ['Parch_9'], inplace = True)","fb0734d1":"y_pred = model.predict(X_test)\n\n\ndf_gender['Survived']  = y_pred\n\ndf_gender","244b427b":"df_gender.to_csv('submission.csv',index=False)","acb17c42":"**Cabin** 687 null values, so I decided to drop the feature","07ff4c9f":"# PClass","b7cd443d":"**Analysis**  \n\n1. Passenger from class 1 have survived around 63%, class 2 has 47% and class 3 has 24% of survivors. which means that Pclass is highgly related for the survival of the passenger in Titanic.\n2. Female passenger have more sruvival rate of about 74% (male 19%).  \n3. Children below 0-10 have high survival rate  \n4. Passengers onboarded from C  has high survival rate.","3801469a":"### Survived","332fe5d4":"## Cabin","b4daec62":"## Data Modeling","c80c3a1f":"## Gradient Boosting Classifier","a7f4d5cf":"\n##### PassengerId:\n> PassengerId has no information for analysis. so, lets drop this feature.\n\n##### Survival:\n> 62% didn't survive \n\n##### Pclass:\n> 24% of people travelled in 1st class, 20% people travelled in 2nd class & 55% people travelled in 3rd class.\n\n##### Sex:\n> 65% are male and 35% are Female.  \n\n##### Age:\n> Age of the passenger travelled in the ship are ranging from 5 years to 70 year. and mostly between 20 to 50 years old.\n\n##### Embarked:\n> Most passenger are embarked from S. and followed by C and Q \n","00351673":"# Handling Missing Values","99148b7e":"### Test train split","70e4200e":"## Univariated Analysis"}}