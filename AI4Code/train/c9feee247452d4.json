{"cell_type":{"2463a0bf":"code","275887fe":"code","30048f68":"code","3f4086bd":"code","6ee43673":"code","e5c7d0dd":"code","d5924d66":"code","6ff4b959":"code","7f18dc92":"code","9262f3ac":"code","47301ad7":"code","5a4832db":"code","574cf470":"code","a9bafe03":"code","450af66b":"code","23b0def9":"code","a4a3f518":"code","e8c806b9":"code","77358e61":"code","ac997e6e":"code","9ab413b5":"code","170b196e":"code","cb88e2bc":"code","2b6f8dff":"code","be4ec80f":"code","283202df":"code","4932e87f":"code","59c55e28":"code","a2c7b968":"markdown","d01a9ea2":"markdown","1f873a04":"markdown","ffa553f1":"markdown","7602f60a":"markdown","5db11103":"markdown","1ece159a":"markdown","4505b920":"markdown","47803446":"markdown","7e5b1895":"markdown","d7ee5ee2":"markdown","b18807eb":"markdown","243f2b88":"markdown","e4bb7dde":"markdown","c85b099e":"markdown","8c6fa02f":"markdown","a792f7f0":"markdown","70f548b0":"markdown","859fbc5c":"markdown","2040c7dc":"markdown","1ea613cb":"markdown"},"source":{"2463a0bf":"import math\n\nfrom fractions import Fraction\nfrom itertools import combinations\nfrom functools import reduce\n\nimport matplotlib.pyplot as plt\nimport matplotlib_venn as venn\nimport random \n\nimport operator as op\n\n\nimport numpy as np\nimport pandas as pd","275887fe":"A = set([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\nB = set([4, 5, 6, 7, 8, 9, 10, 11, 17, 18, 19, 20, 21, 22, 23])\n\n_nA = len(A)\n_nB = len(B)","30048f68":"def union(a, b):\n    return (a | b)\n\nvenn.venn2([A, B], set_labels=('A','B'), set_colors=('purple', 'purple'), alpha=0.5)\nvenn.venn2_circles([A, B], linestyle='dashed', linewidth=2, color='k')\nplt.axis('on')\nplt.show()\n\nprint(f'         A union B = {union(A, B)}')","3f4086bd":"def intersection(a, b):\n    return (a & b)\n\nset1 = venn.venn2([A, B], set_labels=('A','B'), set_colors=('white', 'white'), alpha=0.5)\nset1.get_patch_by_id('11').set_color('purple')\nvenn.venn2_circles([A, B], linestyle='dashed', linewidth=2, color='k')\nplt.axis('on')\nplt.show()\n\nprint(f'         A inter B = {intersection(A, B)}')","6ee43673":"def difference(a, b):\n    return a - b\n\nset1 = venn.venn2([A,B], set_labels=('A','B'), set_colors=('purple', 'white'), alpha=0.5)\nset1.get_patch_by_id('11').set_color('white')\nvenn.venn2_circles([A,B], linestyle='dashed', linewidth=2)\nplt.axis('on')\nplt.show()\n\nprint(f'         A - B = {difference(A, B)}')","e5c7d0dd":"def complement(a, u):\n    return difference(u, a)\n\nplt.rcParams['axes.facecolor'] = 'purple'\nset1 = venn.venn2([A,B], set_labels=('A','B'), set_colors=('white', 'purple'), alpha=0.5)\nset1.get_patch_by_id('10').set_color('white')\nvenn.venn2_circles([A,B], linestyle='dashed', linewidth=2)\nplt.axis('on')\nplt.show()\n\nU = union(A, B)\nprint(f'        Complement A = {complement(A, U)}')\n\n","d5924d66":"def generate_lottery_table():\n    item_x = []\n    item_k = []\n    for index in range(1, 61):\n        item_x.append(index)\n        if index % 10 == 0:\n            item_k.append(item_x)\n            item_x = []\n    return item_k","6ff4b959":"total_combinations = 0\nsample_combination = list()\nfor comb in combinations(range(1, 61), 6):\n    sample_combination.append(comb)\n    total_combinations += 1\n    \nprint(f' Total combinations: {total_combinations}')\nprint(f' Probability: {1\/total_combinations}')\nprint(f' Sample possible combination in lottery:')\n\nsequence_sample = sample_combination[random.randrange(0, total_combinations)]\ndef style_color(value, props=''):\n    if value in sequence_sample:\n        return props\n    return None\n\ndf = pd.DataFrame(generate_lottery_table(), columns=['l1', 'l2', 'l3', 'l4', 'l5', 'l6', 'l7', 'l8', 'l9', 'l10'])\ndf.style\ns2 = df.style.applymap(style_color, props='background-color:red;')\ns2","7f18dc92":"def ncomb(n, k):\n    k = min(k, n - k)\n    return reduce(op.mul, range(n, n - k, -1), 1) \/\/ reduce(op.mul, range(1, k + 1), 1)","9262f3ac":"ncomb(60, 6)","47301ad7":"def probability_e(event, space_trial, porcent=False):\n    cases = len(space_trial)\n    favorable_cases = len(event.intersection(space_trial))\n    if not porcent:\n        return round(favorable_cases \/ cases, 2)\n    return round((favorable_cases \/ cases) * 100, 2)","5a4832db":"def pie_show(p_success, title=None):\n    p_failure = 100 - p_success\n    labels = ['Success', 'Failure']\n    sizes = [p_success, p_failure]\n    explode = (0, 0.1)\n    colors = ['#66b3ff', '#ff9999']\n    fig1, ax1 = plt.subplots()\n    ax1.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%',\n            shadow=True, startangle=90)\n    if title is None:\n        ax1.set_title('Probability P(A)')\n    ax1.set_title(title)\n    ax1.axis('equal')\n    plt.tight_layout()\n    plt.show()","574cf470":"dice_roll = {1, 2, 3, 4, 5, 6}\nevent_even_number = {2, 4, 6}\npa = probability_e(event_even_number, dice_roll, porcent=True)\nprint(f' P(A) = {pa}%')\npie_show(pa)","a9bafe03":"event_odd_number = {1, 3, 5}\npa = probability_e(event_odd_number, dice_roll, porcent=True)\nprint(f' P(A) = {pa}%')\npie_show(pa)","450af66b":"event_number_greater_6 = set([x for x in set(dice_roll) if x > 6])\npa = probability_e(event_number_greater_6, dice_roll, porcent=True)\nprint(f' P(A) = {pa}%')\npie_show(pa)","23b0def9":"event_number_less_5 = set([x for x in set(dice_roll) if x < 5])\npa = probability_e(event_number_less_5, dice_roll, porcent=True)\nprint(f' P(A) = {pa}%')\npie_show(pa)","a4a3f518":"event_multiple_2 = {2, 4, 6}\nevent_multiple_3 = {3, 6}\nevent_a_inter_b = event_multiple_2.intersection(event_multiple_3)\n\npa = probability_e(event_multiple_2, dice_roll, porcent=True)\npie_show(pa, title='Probability P(A)')\npb = probability_e(event_multiple_3, dice_roll, porcent=True)\npie_show(pb, title='Probability P(B)')\npa_inter_pb = probability_e(event_a_inter_b, dice_roll, porcent=True)\npie_show(pa_inter_pb, title='Probability P(A inter B)')\n\nprint(f' P(A)={pa}%, P(B)={pb}%, P(A inter B)={pa_inter_pb}%')\n\npa_union_pb = pa + pb - pa_inter_pb\nprint(f' P(A or B) = P(A union B) = {pa_union_pb}%')\npie_show(pa_union_pb, title='Probability P(A U B)')","e8c806b9":"def generate_deck_cards():\n    symbols = \"\u2665 \u2660 \u2666 \u2663\"\n    cards_number = \"A 2 3 4 5 6 7 8 9 10 J Q K\"\n    cards = set()\n    for symbol in symbols.split(' '):\n        for card in cards_number.split(' '):\n            cards.add(card + symbol)\n    return cards","77358e61":"cards = generate_deck_cards()\nprint(f\" Number of cards: {len(cards)}\")","ac997e6e":"sorted(cards)","9ab413b5":"def style_color_cards(value, props=''):\n    if value.find('\u2665') != -1 or value.find('\u2666') != -1:\n        return props\n    return None\n\ndef generate_sorted_cards(cards):\n    clubs = list()\n    diamonds = list()\n    hearts = list()\n    spades = list()\n    for card in sorted(cards):\n        if card.find('\u2663') != -1:\n            clubs.append(card)\n        elif card.find('\u2666') != -1:\n            diamonds.append(card)\n        elif card.find('\u2665') != -1:\n            hearts.append(card)\n        elif card.find('\u2660') != -1:\n            spades.append(card)\n        \n    deck_space = [clubs, diamonds, hearts, spades]\n    df = pd.DataFrame(deck_space, columns='A B C D E F G H I J K L M'.split(' '))\n    df.style\n    s2 = df.style.applymap(style_color_cards, props='color:red;')\n    return s2","170b196e":"generate_sorted_cards(cards)","cb88e2bc":"event_red_queen = {'Q\u2663', 'Q\u2666'}\npa = probability_e(event_red_queen, cards, porcent=True)\nprint(f' P(A) = {pa}%')\npie_show(pa)\nprint(f' Event: {event_red_queen}')","2b6f8dff":"event_ace = {'A\u2666', 'A\u2663', 'A\u2665', 'A\u2660'}\npa = probability_e(event_ace , cards, porcent=True)\nprint(f' P(A) = {pa}%')\npie_show(pa)\nprint(f' Event: {event_ace}')","be4ec80f":"event_spade = set([x for x in set(cards) if x.find('\u2666') != -1])\npa = probability_e(event_spade, cards, porcent=True)\nprint(f' P(A) = {pa}%')\npie_show(pa)\nprint(f' Event: {event_spade}')","283202df":"plt.rcParams['axes.facecolor'] = 'white'\n\nbenford_law=[math.log10(1+1.0\/i) for i in range(1,10)]\nfig = plt.figure(figsize=(10, 10))\nax = fig.add_subplot(111)\n\nnumbers = [1,2,3,4,5,6,7,8,9]\n\nbars = ax.bar(\n    x=np.arange(1, 10, 1),\n    height=benford_law,\n    tick_label=[1,2,3,4,5,6,7,8,9],\n    alpha=0.5\n)\n\nax.set_title(\"Benford's Law\")\nax.set_xlabel(r'$d$', fontsize=20)\nax.set_xticks(numbers)\nax.set_ylabel(r'$log_{10}(1+\\frac{1}{d})$', fontsize=20)\nax.set_xticklabels(numbers, rotation = 45)","4932e87f":"benford_law_porcent = []\nfor x in benford_law:\n    benford_law_porcent.append([x, x * 100])\n\ndf = pd.DataFrame(benford_law_porcent, columns=['P(x)', 'P(x)%'])\ndf.index += 1\ndf","59c55e28":"def total_probability(p_events: dict, p_conditional: dict):\n    _sum = 0\n    for pe, pe_c in zip(p_events.values(), p_conditional.values()):\n        _sum += pe * pe_c \n    return _sum\n    \nprob = total_probability({'X': 0.6, 'Y': 0.4}, {'X|F': 0.99, 'Y|F': 0.95})\nprint(f\" Probability: {prob} P: {round(prob * 100, 4)}%\")","a2c7b968":"#### **Playing cards Probability: an ace**\n$S=(cards); A=(A\u2666, A\u2663, A\u2665, A\u2660)$\nThen: $P(A)=4\/52=1\/13$","d01a9ea2":"## **Probability axioms**\n\nConsider a finite sample space $S$ in which all its elementary events are equally probable. Under these conditions, the probability of an event \nis given by:\n- **Sample Space**: The set of all possible outcomes for the trial $S$.\n- **Event**: A subset of the sample space $E$.\n  \n  $$P(E) = \\frac{|A|}{|n|} = \\frac{favorablecases} {n cases}$$\n    \n \n\nLet $\\epsilon$ be an experiment and $S$ the sample space associated with it. To each event $A$ in this sample space we associate probability $P(A)$, which satisfies:\n\n**item.1**: $0 \\leqslant P(A) \\leqslant 1$\n\n**item.2**: $P(S) = 1$, that is:\n\n$$ P(A) =(\\bigcup\\limits_{i=1}^{n}A_{i}) = \\sum_{i=1}^{n} P(A_i) = 1$$\n    \n**item.3**: When $A, B \\epsilon S$ and $(A \\cap B) = \\varnothing$ then:\n$$P(A \\cup B) = P(A) + P(B)$$\n \n**item.4**: When $P(A \\cup B)$ and $(A \\cap B) \\ne \\varnothing$, then \n$$P(A \\cup B) = P(A) + P(B) - P(A \\cap B)$$","1f873a04":"### **Playing Card Probability** \n\n<img src=\"https:\/\/www.drogariaminasbrasil.com.br\/media\/product\/b2f\/baralho-copag-139-ac8.jpg\" width=700>","ffa553f1":"## **Law of total probability**\n\nIn probability theory, the law of total probability is a fundamental rule relating marginal probabilities to conditional probabilities.\n\n**Example**: Suppose that two factories supply light bulbs to the market. Factory X's bulbs work for over 5000 hours in 99% of cases, whereas factory Y's bulbs work for over 5000 hours in 95% of cases. It is known that factory X supplies 60% of the total bulbs available and Y supplies 40% of the total bulbs available. What is the chance that a purchased bulb will work for longer than 5000 hours?\n\nApplying the law of total probability, we have:\n\n$\\displaystyle P(X)=60\\% = \\frac {60}{100} = 0.6$\n\n$\\displaystyle P(Y)=40\\% = \\frac {40}{100} = 0.4$\n\n- Event F = work for over 5000 hours.\n\n$\\displaystyle P(X|F)=99\\% = \\frac {99}{100} = 0.99$\n\n$\\displaystyle P(Y|F)=95\\% = \\frac {95}{100} = 0.95$\n\n$$ P(TotalProbability) = \\sum_{i=1}^{n} P(A_i) \\cdot P(B|A_i)$$\n\n- **In example**:\n\n$ P(TotalProbability) = P(X) \\cdot P(X|F) + P(Y) \\cdot P(Y|F)$\n\n$ P(TotalProbability) = 0.6 \\cdot  0.99 + 0.4 \\cdot  0.95 = 0.974 = 97.4\\%$","7602f60a":"### **Dice Roll Probability:**\n\n<img src=\"https:\/\/www.ludeka.com.br\/image\/cache\/data\/componentes\/D-06\/dado-branco-20x20-600x315.jpg\">","5db11103":"#### **Dice Roll Probability: an odd number**\n$S=(1, 2, 3, 4, 5, 6); A=(1, 3, 6)$\nThen: $P(A)=3\/6=1\/2$","1ece159a":"#### **Playing cards Probability: a spade**\n$S=(cards); A=(A\u2666, 2\u2666, 3\u2666, 4\u2666, 5\u2666, 6\u2666, 7\u2666, 8\u2666, 9\u2666, 10\u2666, J\u2666, Q\u2666, K\u2666)$\nThen: $P(A)=13\/52=1\/4$","4505b920":"- The **union** of two sets A and B is the set of elements which are in A, in B, or in A and B.","47803446":"<img src=\"https:\/\/abcmemes.com\/media\/created\/now-you-know.jpg\">","7e5b1895":"#### **Playing cards Probability: a red queen**\n$S=(cards); A=(Q\u2666, Q\u2663)$\nThen: $P(A)=2\/52=1\/26$","d7ee5ee2":"# **Probability Theory Introduction**\n\nProbability is built around the set theory. An introduction to set theory:\n\n<img src=\"https:\/\/images-cdn.9gag.com\/photo\/abGxoGO_700b.jpg\">\n\n## **Introduction to set theory**","b18807eb":"#### **Dice Roll Probability: a number less than 5**\n$S=(1, 2, 3, 4, 5, 6); A=(1, 2, 3, 4)$\nThen: $P(A)=4\/6=2\/3$","243f2b88":"### **Possible Lottery Combinations (Brazil Lottery Mega Sena)**\n\nMega-sena is the lottery that pays millions to the 6 number hitter. For that, you choose from 6 to 15 numbers, among the 60 available on the ticket. The probability of winning this game is $\\frac{1}{50063860}$\n\n<img src=\"https:\/\/memezila.com\/wp-content\/how-lucky-are-you-Lotto-ticket-meme-3241.png\" width=400>","e4bb7dde":"- The **difference** between the two sets, **written A - B** is the set of all elements of A that are not elements of B.","c85b099e":"- The **intersection** between the two sets, it is defined as the set of all the elements in set A that are also present in set B.","8c6fa02f":"### **Benford Law Theory**\n\nBenford's law refers to the distribution of digits in various sources of real and non-random cases. \nThis distribution shows that digit 1 has a 30% chance of appearing in a statistical dataset while larger values are less likely.\n\n$$\\displaystyle P(d)=\\log _{10}(d+1)-\\log _{10}(d)=\\log _{10}\\left({\\frac {d+1}{d}}\\right)=\\log _{10}\\left(1+{\\frac {1}{d}}\\right)$$","a792f7f0":"#### **Dice Roll Probability: multiple of 2 OR multiple of 3**\n$S=(1, 2, 3, 4, 5, 6); A=(2, 4, 6); B=(3,6)$\nThen: \n$$P(A) = \\frac{3}{6} = \\frac{1}{2}$$\n$$P(B) = \\frac{2}{6} = \\frac{1}{3}$$\n$$P(A \\cap B) = \\frac{1}{6}$$\n$$P(A \\cup B) = \\frac{1}{2} + \\frac{1}{3} + \\frac{1}{6}$$","70f548b0":"#### **Dice Roll Probability: a number greater than 6**\n$S=(1, 2, 3, 4, 5, 6); A=\\varnothing$\nThen: $P(A)=0$","859fbc5c":"#### **Dice Roll Probability: an even number**\n\n$S=(1, 2, 3, 4, 5, 6); A=(2, 4, 5)$\nThen: $P(A)=3\/6=1\/2$","2040c7dc":"- The **complement** of a set A, often denoted by Ac (or A\u2032), are the elements not in A","1ea613cb":"## **Combinatorial analysis**\n\n<img src=\"https:\/\/pics.me.me\/combinatorics-you-quys-always-act-like-youre-better-than-me-43775370.png\">\n\nThe branch of mathematics which studies the number of different ways of arranging things is called combinatorial analysis.\n\n**Combination (without repetition)**:\n$$C(n, k) = \\frac{n!}{k! (n - k)!}$$\n\n**Combination (with repetition)**:\n$$C(n, k) = \\frac{(n + k - 1)!}{k! (n - 1)!}$$"}}