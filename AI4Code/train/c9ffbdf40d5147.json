{"cell_type":{"e7152911":"code","cb4178d3":"code","ad0e6fd7":"code","20926602":"code","a7d709ae":"code","3fd59b57":"code","b8e0684a":"code","3f72f7e6":"code","9658791a":"code","d043c5f5":"code","205b4ca5":"code","761c1030":"code","35ff7aab":"code","acf5f584":"code","c0dc2deb":"code","61e3d794":"code","3d74d67a":"code","4e283800":"code","0a8931af":"markdown","e7a21327":"markdown","0fbea5d1":"markdown","3316e4dd":"markdown","2ba4c10b":"markdown","f6ecfc8e":"markdown","260d2fcc":"markdown","8484e79b":"markdown","64aa54df":"markdown","8e3f90cb":"markdown","e5e0a4b4":"markdown","6c361f43":"markdown","661a0ffb":"markdown"},"source":{"e7152911":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objs as go\n\nimport pandas\n\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cb4178d3":"!pip install openpyxl","ad0e6fd7":"#Code by Pavel Fedotov https:\/\/www.kaggle.com\/pavfedotov\/vaers-data\n\ndf = pd.ExcelFile('\/kaggle\/input\/top-highly-cited-scientist-in-the-world\/Data_Description.xlsx')","20926602":"df.sheet_names","a7d709ae":"#Code by Pavel Fedotov https:\/\/www.kaggle.com\/pavfedotov\/vaers-data\n\ndf.parse(df.sheet_names[1], header=0)","3fd59b57":"#Code by https:\/\/stackoverflow.com\/questions\/17063458\/reading-an-excel-file-in-python-using-pandas\n\n#Answered by Renee B and Murali.\n\ndf = pandas.read_excel(open('\/kaggle\/input\/top-highly-cited-scientist-in-the-world\/Data_Description.xlsx','rb'), sheet_name='Data')\ndf.head()","b8e0684a":"!pip install quickda","3f72f7e6":"#https:\/\/pypi.org\/project\/quickda\/\n\n#Code by Kalilur Rahman  https:\/\/www.kaggle.com\/kalilurrahman\/oecd-cancer-data-eda-and-visualization\/notebook\n\n# Importing libraries\nfrom quickda.explore_data import *\nfrom quickda.clean_data import *\nfrom quickda.explore_numeric import *\nfrom quickda.explore_categoric import *\nfrom quickda.explore_numeric_categoric import *\nfrom quickda.explore_time_series import *","9658791a":"#https:\/\/pypi.org\/project\/quickda\/\n\n#Code by Kalilur Rahman  https:\/\/www.kaggle.com\/kalilurrahman\/oecd-cancer-data-eda-and-visualization\/notebook\n\neda_num(df)","d043c5f5":"eda_num(df[['np6020', 'firstyr', 'lastyr', 'rank (ns)','nc2020 (ns)', 'h20 (ns)', 'nps (ns)', 'ncs (ns)', 'cpsf (ns)', 'npsfl (ns)', 'c (ns)', 'npciting (ns)', 'cprat (ns)', 'np6020 cited2020 (ns)', 'cprat (ns)', 'self%', 'sm-subfield-1', 'sm-subfield-2-frac']])","205b4ca5":"eda_num(df, method=\"correlation\")","761c1030":"#eda_cat(df, x='authfull')\n#eda_cat(df, x='authfull')","35ff7aab":"df[\"sm-field\"].value_counts()","acf5f584":"#eda_cat(df, x='inst_name')\n#eda_cat(df, x='inst_name')","c0dc2deb":"#eda_cat(df, x='cntry')\n#eda_cat(df, x='cntry')","61e3d794":"#eda_cat(df, x='sm-subfield-1')\n#eda_cat(df, x='sm-subfield-1')","3d74d67a":"eda_cat(df, x='sm-field')\neda_cat(df, x='sm-field')","4e283800":"#EDA report\n \nexplore(df, method = 'profile', report_name = 'Report')","0a8931af":"#Categorical Features","e7a21327":"#Quickda: Quick-EDA\n\nSimple & Easy-to-use python modules to perform Quick Exploratory Data Analysis for any structured dataset!\n\nhttps:\/\/pypi.org\/project\/quickda\/","0fbea5d1":"#EDA with Quickda","3316e4dd":"![](https:\/\/cdn.journaldev.com\/wp-content\/uploads\/2021\/09\/quickda-in-python.png)journaldev.com","2ba4c10b":"#Science Metrix Field","f6ecfc8e":"That's all for now with QuickDa since I got: \"RuntimeWarning: overflow encountered in long_scalars in the Report above.","260d2fcc":"#Expand the output above to see the many Boxplots and Distribution Analysis - Histograms","8484e79b":"#Correlation analysis - Quickda heatmap","64aa54df":"#That below takes a little time","8e3f90cb":"#Since Science Metrix field has len 20(?). Let's see eda-categorical of sm_field.","e5e0a4b4":"#Below, there are so many numerical features that I listed just some of them.\n\nWe have Outlier analysis - Boxplot","6c361f43":"#Since I don't know how to work with pd.ExcelFile I returned to pandas.read_excel","661a0ffb":"#Institution Names: 19552, Authors 184256, countries: 165, sm-subfield-1: 174"}}