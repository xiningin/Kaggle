{"cell_type":{"7117cf57":"code","3f08fde6":"code","a6569f83":"code","31b702a1":"code","c7e89c83":"code","3cba9f32":"code","3144a0db":"code","a4810aa6":"code","7375142c":"code","85b75084":"code","afc192e7":"code","8df97991":"code","fe880039":"code","219fdc90":"code","d161df66":"code","cc4870c3":"code","6a471355":"code","8eabbc2b":"code","370e2b70":"code","76bd0e2c":"code","ee78b987":"code","ec03f9d9":"code","e5f5d4de":"code","26da0658":"markdown"},"source":{"7117cf57":"# importing libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","3f08fde6":"# loading the stock prices of all companies in a dataframe\ndataset = pd.read_csv('..\/input\/historical_stock_prices.csv')\nstocks = dataset.loc[(dataset['date']>='2017-01-01') & (dataset['date']<='2017-12-31')]","a6569f83":"# getting the list of all companies \ncompanies = stocks.ticker.unique()\ncompanies.sort()","31b702a1":"from sklearn.preprocessing import MinMaxScaler\n\n# we are creating 2 arrays, x_train and y_train.\u00b6\n# x_train stores the values of adjusted closing prices of past 60 days\n# y_train stores the values of adjusted closing prices of the present day\n\nperiod = 60\nx_train = []\ny_train = []\ncompanies_sc = []\n\nfor company in companies:\n    \n    sc = MinMaxScaler()\n    stock = stocks.loc[stocks['ticker'] == company]\n    \n    # creating an array with adjusted closing prices\n    training_set = stock[['adj_close']].values\n    \n    # normalizing the values\n    training_set_scaled = sc.fit_transform(training_set)\n    training_set_scaled.shape\n    \n    # In the below cell, we are appendding data to x_train and y_train.\u00b6\n    \n    length = len(training_set)\n    for i in range(period, length):\n        x_train.append(training_set_scaled[i-period:i, 0])\n        y_train.append(training_set_scaled[i, 0])\n        \n    companies_sc.append(sc)\n        \nx_train = np.array(x_train)\ny_train = np.array(y_train)\nx_train.shape","c7e89c83":"x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))\nx_train.shape","3cba9f32":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import LSTM, Dense, Dropout\n\nmodel = Sequential()\n\nmodel.add(LSTM(units = 92, return_sequences = True, input_shape = (x_train.shape[1], 1)))\nmodel.add(Dropout(0.2))\n\n# model.add(LSTM(units = 92, return_sequences = True))\n# model.add(Dropout(0.2))\n\n# model.add(LSTM(units = 92, return_sequences = True))\n# model.add(Dropout(0.2))\n\nmodel.add(LSTM(units = 92, return_sequences = False))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(units = 1))\nmodel.compile(optimizer = 'adam', loss = 'mean_squared_error')","3144a0db":"train = model.fit(x_train, y_train, epochs = 10, batch_size = 3000, validation_split=0.33)","a4810aa6":"plt.plot(train.history['loss'])\nplt.plot(train.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper right')\nplt.show()","7375142c":"test_set = dataset.loc[(dataset['ticker'] == 'AAPL') & (dataset['date']>='2018-01-01')]  \ntest_set = test_set.loc[:, test_set.columns == 'adj_close']","85b75084":"y_test = test_set.iloc[period:, 0:].values","afc192e7":"sc = companies_sc[np.where(companies==\"AAPL\")[0][0]]\n# storing all values in a variable for generating an input array for our model \nadj_closing_price = test_set.iloc[:, 0:].values\nadj_closing_price_scaled = sc.transform(adj_closing_price)","8df97991":"# the model will predict the values on x_test\nx_test = [] \nlength = len(test_set)\n\nfor i in range(period, length):\n    x_test.append(adj_closing_price_scaled[i-period:i, 0])\n    \nx_test = np.array(x_test)","fe880039":"x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))\nx_test.shape","219fdc90":"# predicting the stock price values\ny_pred = model.predict(x_test)\npredicted_price = sc.inverse_transform(y_pred)","d161df66":"# plotting the results\nplt.plot(y_test, color = 'blue', label = 'Actual Stock Price')\nplt.plot(predicted_price, color = 'red', label = 'Predicted Stock Price')\nplt.title('Stock Price Prediction')\nplt.xlabel('Time')\nplt.ylabel('Stock Price')\nplt.legend()\nplt.show()","cc4870c3":"stock_train_set = dataset.loc[(dataset['ticker'] == 'AAPL') & \n                              (dataset['date']>='2017-06-01') & \n                              (dataset['date']<='2017-12-31')]\nstock_train_set = stock_train_set.loc[:, stock_train_set.columns == 'adj_close']","6a471355":"y_train = stock_train_set.iloc[period:, 0:].values","8eabbc2b":"stock_acp = stock_train_set.iloc[:, 0:].values\nstock_acp_scaled = sc.transform(stock_acp)","370e2b70":"x_train = [] \nlength = len(stock_train_set)\n\nfor i in range(period, length):\n    x_train.append(stock_acp_scaled[i-period:i, 0])\n    \nx_train = np.array(x_train)\nx_train.shape","76bd0e2c":"x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))\nx_train.shape","ee78b987":"# predicting the adjusted closing price values\ny_train_pred = model.predict(x_train)\ntrain_predicted_price = sc.inverse_transform(y_train_pred)","ec03f9d9":"# plotting the results\nplt.plot(y_train, color = 'blue', label = 'Actual Adjusted Closing Price')\nplt.plot(train_predicted_price, color = 'red', label = 'Predicted Adjusted Closing Price')\nplt.title('Adjusted Closing Price Prediction')\nplt.xlabel('Time')\nplt.ylabel('Adjusted Closing Price')\nplt.legend()\nplt.show()","e5f5d4de":"from sklearn.metrics import mean_squared_error\n# Calculate RMSE\ntrainScore = mean_squared_error(y_train, train_predicted_price)\nprint('Train Score: %.2f MSE' % (trainScore))\ntestScore = mean_squared_error(y_test, predicted_price)\nprint('Test Score: %.2f MSE' % (testScore))","26da0658":"# Predicting on train set"}}