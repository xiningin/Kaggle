{"cell_type":{"cee0ac20":"code","1eb3157a":"code","b7bb9869":"code","21540108":"code","a8f7545f":"code","bd0329c4":"code","d7596669":"code","4be0f7f1":"code","f9ab3a38":"code","631a1030":"code","e425bc13":"code","10bfb14e":"code","259fb0df":"code","feff6588":"code","fc476f4c":"code","a1dfe8db":"code","f11d4f2e":"code","468e738f":"code","49492cfc":"code","d6027048":"code","1f0b706a":"code","77294d1f":"code","0dd4e86d":"code","5e530373":"code","a0243bd7":"code","2977726d":"code","1c83d4dc":"code","0074b696":"code","a4d936e2":"code","9540f6f8":"code","c9a1fb64":"code","d36ae388":"code","80f13a67":"code","c1122072":"code","90c8e0e0":"code","f1431925":"code","ab615902":"code","707eb6e3":"code","48b89871":"code","4fe70da4":"code","78815dde":"code","b509036a":"code","998db555":"code","6a169e2e":"code","4eb75180":"code","237659e1":"code","9690d6c6":"code","153ddca0":"code","5027a0c3":"code","f5dd382e":"markdown"},"source":{"cee0ac20":"from learntools.core import binder\nbinder.bind(globals())\nfrom learntools.machine_learning.ex7 import *\n\nimport os\nif not os.path.exists(\"..\/input\/train.csv\"):\n    os.symlink(\"..\/input\/home-data-for-ml-course\/train.csv\", \"..\/input\/train.csv\")  \n    os.symlink(\"..\/input\/home-data-for-ml-course\/test.csv\", \"..\/input\/test.csv\") ","1eb3157a":"import pandas as pd\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport random\n\niowa_file_path = '..\/input\/train.csv'\nds = pd.read_csv(iowa_file_path)","b7bb9869":"ds1_null=ds.isnull().sum()\nfeatures=[]\nfor items in ds1_null.iteritems():\n    if(items[1]>0):\n        features.append(items[0])\nfeatures","21540108":"ds['Street'].unique()\nds['LandContour'].unique()\nds['Neighborhood'].unique()\nds['BldgType'].unique()\nds['ExterCond'].unique()","a8f7545f":"ds.columns","bd0329c4":"ds.isnull().sum()\nplt.figure(figsize = (12, 7))\nsns.boxplot(x = 'BldgType', y = 'LotFrontage', palette = 'rainbow', data = ds)","d7596669":"plt.figure(figsize = (12, 7))\nsns.boxplot(x = 'Street', y = 'LotFrontage', palette = 'rainbow', data = ds)","4be0f7f1":"plt.figure(figsize = (12, 7))\nsns.boxplot(x = 'GarageCars', y = 'GarageYrBlt', palette = 'rainbow', data = ds)\n","f9ab3a38":"plt.figure(figsize = (12, 7))\nsns.boxplot(x = 'GarageYrBlt', y = 'GarageCond', palette = 'rainbow', data = ds)","631a1030":"plt.figure(figsize = (12, 7))\nsns.boxplot(x = 'GarageYrBlt', y = 'GarageType', palette = 'rainbow', data = ds)","e425bc13":"plt.figure(figsize = (12, 7))\nsns.boxplot(x = 'GarageQual', y = 'GarageYrBlt', palette = 'rainbow', data = ds)","10bfb14e":"plt.figure(figsize = (12, 7))\nsns.boxplot(x = 'GarageCars', y = 'GarageFinish', palette = 'rainbow', data = ds)","259fb0df":"plt.figure(figsize = (12, 7))\nsns.boxplot(x = 'Alley', y = 'LotArea', palette = 'rainbow', data = ds)","feff6588":"plt.figure(figsize = (12, 7))\nsns.boxplot(x = 'PoolQC', y = 'LotArea', palette = 'rainbow', data = ds)","fc476f4c":"plt.figure(figsize = (12, 7))\nsns.boxplot(x = 'FireplaceQu', y = 'LotArea', palette = 'rainbow', data = ds)","a1dfe8db":"plt.figure(figsize = (12, 7))\nsns.boxplot(x = 'Fence', y = 'LotFrontage', palette = 'rainbow', data = ds)","f11d4f2e":"def Impute_LotFrontage(col):\n    Lot_Frontage=col[0]\n    Street=col[1]\n    if pd.isnull(Lot_Frontage):\n        if Street=='Pave':\n            return random.randrange(50,100)\n        if Street=='Grvl':\n            return random.randrange(80,120)\n        else:\n            return 60\n    else:\n        return Lot_Frontage","468e738f":"def Impute_GarageYear(col):\n    GarageYear=col[0]\n    GarageCars=col[1]\n    if pd.isnull(GarageYear):\n        if GarageCars==1:\n            return random.randrange(1940,1965)\n        if GarageCars==2:\n            return random.randrange(1970,2000)\n        if GarageCars==3:\n            return random.randrange(1995,2010)\n        if GarageCars==4:\n            return random.randrange(1965,1980)\n        else:\n            return random.randrange(1950,1990)\n    else:\n        return GarageYear","49492cfc":"def Impute_GarageCond(col):\n    GarageCond=col[0]\n    GarageYr=col[1]\n    if pd.isnull(GarageCond):\n        if GarageYr>1960 and GarageYr<2000:\n            return 'TA'\n        if GarageYr>1920 and GarageYr<1960:\n            return 'Fa'\n        if GarageYr>1965 and GarageYr<1987:\n            return 'Gd'\n        if GarageYr>1915 and GarageYr<1932:\n            return 'Po'\n        if GarageYr>1977 and GarageYr<1996:\n            return 'Ex'\n        else:\n            return 'TA'\n    else:\n        return GarageCond","d6027048":"def Impute_GarageType(col):\n    GarageType=col[0]\n    GarageYr=col[1]\n    if pd.isnull(GarageType):\n        if GarageYr>1955 and GarageYr<1965:\n            return 'CarPort'\n        if GarageYr>1955 and GarageYr<1975:\n            return 'Basement'\n        if GarageYr>1970 and GarageYr<1995:\n            return 'Attchd'\n        if GarageYr>1940 and GarageYr<1970:\n            return 'Detchd'\n        if GarageYr>1995 and GarageYr<2010:\n            return 'Builtin'\n        if GarageYr>1955 and GarageYr<1985:\n            return '2Types'\n        else:\n            return 'Detchd'\n    else:\n        return GarageType","1f0b706a":"def Impute_GarageQual(col):\n    GarageQual=col[0]\n    GarageYr=col[1]\n    if pd.isnull(GarageQual):\n        if GarageYr>=1910 and GarageYr<=1920:\n            return 'Po'\n        if GarageYr>=1985 and GarageYr<=2000:\n            return 'Ex'\n        if GarageYr>=1975 and GarageYr<=1985:\n            return 'Gd'\n        if GarageYr>=1920 and GarageYr<=1950:\n            return 'Fa'\n        if GarageYr>1960 and GarageYr<2000:\n            return 'TA'\n        else:\n            return 'TA'\n    else:\n        return GarageQual","77294d1f":"def Impute_GarageFinish(col):\n    GarageFinish=col[0]\n    GarageCars=col[1]\n    if pd.isnull(GarageFinish):\n        if GarageCars>=1 and GarageCars<=2:\n            return 'Unf'\n        if GarageCars>=2 and GarageCars<=3:\n            return 'Fin'\n        else:\n            return 'RFn'\n    else:\n        return GarageFinish","0dd4e86d":"def Impute_Alley(col):\n    Alley=col[0]\n    LotArea=col[1]\n    if pd.isnull(Alley):\n        if LotArea>=8000 and LotArea<=11000:\n            return 'Grvl'\n        if LotArea>=3000 and LotArea<=8000:\n            return 'Pave'\n        else:\n            return 'Pave'\n    else:\n        return Alley","5e530373":"def Impute_PoolQC(col):\n    PoolQC=col[0]\n    LotArea=col[1]\n    if pd.isnull(PoolQC):\n        if LotArea>=18000 and LotArea<=22000:\n            return 'Ex'\n        if LotArea>=13000 and LotArea<=18000:\n            return 'Fa'\n        if LotArea>=15000 and LotArea<=45000:\n            return 'Gd'\n        else:\n            return 'Gd'\n    else:\n        return PoolQC","a0243bd7":"ds.LotFrontage = ds[['LotFrontage','Street']].apply(Impute_LotFrontage, axis = 1)","2977726d":"ds['MasVnrArea']=ds['MasVnrArea'].fillna(ds['MasVnrArea'].mean())","1c83d4dc":"ds.GarageYrBlt = ds[['GarageYrBlt','GarageCars']].apply(Impute_GarageYear, axis = 1)","0074b696":"ds.GarageQual = ds[['GarageQual','GarageYrBlt']].apply(Impute_GarageQual, axis = 1)\nds.GarageType = ds[['GarageType','GarageYrBlt']].apply(Impute_GarageType, axis = 1)\nds.GarageFinish = ds[['GarageFinish','GarageCars']].apply(Impute_GarageFinish, axis = 1)\nds.Alley = ds[['Alley','LotArea']].apply(Impute_Alley, axis = 1)\nds.PoolQC = ds[['PoolQC','LotArea']].apply(Impute_PoolQC, axis = 1)\nds['BsmtQual']=ds['BsmtQual'].fillna('TA')\nds['BsmtCond']=ds['BsmtCond'].fillna('TA')\nds['BsmtExposure']=ds['BsmtExposure'].fillna('No')\nds['BsmtFinType1']=ds['BsmtFinType1'].fillna('Unf')\nds['BsmtFinType2']=ds['BsmtFinType2'].fillna('Unf')\nds['Electrical']=ds['Electrical'].fillna('SBrkr')\nds['MasVnrType']=ds['MasVnrType'].fillna('None')\nds['Fence']=ds['Fence'].fillna('MnPrv')\nds['MiscFeature']=ds['MiscFeature'].fillna('Shed')\nds['MiscFeature'].value_counts()","a4d936e2":"ds.GarageCond = ds[['GarageCond','GarageYrBlt']].apply(Impute_GarageCond, axis = 1)\nds1_null=ds.isnull().sum()\nfeatures2=[]\nfor items in ds1_null.iteritems():\n    if(items[1]>1000):\n        features2.append(items[0])\nds=ds.drop(features2,axis=1)\nds=ds.drop('FireplaceQu',axis=1)\nfeatures2","9540f6f8":"features3=[]\nds2_null=ds.isnull().sum()\nfor items in ds2_null.iteritems():\n    if(items[1]<1000 and items[1]>0):\n        features3.append(items[0])\nfeatures3","c9a1fb64":"def isfloat(df):\n    try:\n        float(df)\n    except:\n        return False\n    return True\n\nfeatures5=[]\nfor i in ds.columns:\n    if (isfloat(ds[i][0]))!=1:\n        features5.append(i)\nfeatures5","d36ae388":"le = preprocessing.LabelEncoder()\nds[\"Street\"] = le.fit_transform(ds[\"Street\"])\nds[\"LandContour\"] = le.fit_transform(ds[\"LandContour\"])\nds[\"Neighborhood\"] = le.fit_transform(ds[\"Neighborhood\"])\nds[\"BldgType\"] = le.fit_transform(ds[\"BldgType\"])\nds[\"ExterCond\"] = le.fit_transform(ds[\"ExterCond\"])\nds[\"CentralAir\"] = le.fit_transform(ds[\"CentralAir\"])\nds[\"GarageCond\"] = le.fit_transform(ds[\"GarageCond\"])\nds[\"KitchenQual\"] = le.fit_transform(ds[\"KitchenQual\"])\nds[\"GarageType\"] = le.fit_transform(ds[\"GarageType\"])\nds[\"LotConfig\"] = le.fit_transform(ds[\"LotConfig\"])\nds[\"HouseStyle\"] = le.fit_transform(ds[\"HouseStyle\"])\nds[\"RoofStyle\"] = le.fit_transform(ds[\"RoofStyle\"])\nds[\"LotShape\"] = le.fit_transform(ds[\"LotShape\"])\nds[\"GarageQual\"] = le.fit_transform(ds[\"GarageQual\"])\nds[\"GarageFinish\"] = le.fit_transform(ds[\"GarageFinish\"])\nds[\"MSZoning\"] = le.fit_transform(ds[\"MSZoning\"])\nds[\"Utilities\"] = le.fit_transform(ds[\"Utilities\"])\nds[\"LandSlope\"] = le.fit_transform(ds[\"LandSlope\"])\nds[\"Condition1\"] = le.fit_transform(ds[\"Condition1\"])\nds[\"Condition2\"] = le.fit_transform(ds[\"Condition2\"])\nds[\"RoofMatl\"] = le.fit_transform(ds[\"RoofMatl\"])\nds[\"Exterior1st\"] = le.fit_transform(ds[\"Exterior1st\"])\nds[\"Exterior2nd\"] = le.fit_transform(ds[\"Exterior2nd\"])\nds[\"MasVnrType\"] = le.fit_transform(ds[\"MasVnrType\"])\nds[\"ExterQual\"] = le.fit_transform(ds[\"ExterQual\"])\nds[\"Foundation\"] = le.fit_transform(ds[\"Foundation\"])\nds[\"BsmtQual\"] = le.fit_transform(ds[\"BsmtQual\"])\nds[\"BsmtCond\"] = le.fit_transform(ds[\"BsmtCond\"])\nds[\"BsmtExposure\"] = le.fit_transform(ds[\"BsmtExposure\"])\nds[\"BsmtFinType1\"] = le.fit_transform(ds[\"BsmtFinType1\"])\nds[\"BsmtFinType2\"] = le.fit_transform(ds[\"BsmtFinType2\"])\nds[\"Heating\"] = le.fit_transform(ds[\"Heating\"])\nds[\"HeatingQC\"] = le.fit_transform(ds[\"HeatingQC\"])\nds[\"Electrical\"] = le.fit_transform(ds[\"Electrical\"])\nds[\"Functional\"] = le.fit_transform(ds[\"Functional\"])\nds[\"PavedDrive\"] = le.fit_transform(ds[\"PavedDrive\"])\nds[\"SaleType\"] = le.fit_transform(ds[\"SaleType\"])\nds[\"SaleCondition\"] = le.fit_transform(ds[\"SaleCondition\"])\nds[\"Alley\"] = le.fit_transform(ds[\"Alley\"])\nds[\"PoolQC\"] = le.fit_transform(ds[\"PoolQC\"])\nds['MiscFeature']=le.fit_transform(ds['MiscFeature'])\nds['Fence']=le.fit_transform(ds['Fence'])","80f13a67":"ds1_corr=ds.corr()['SalePrice'].sort_values(ascending= False)\nds1_corr\nfeatures=[]\nfor items in ds1_corr.iteritems():\n    if(items[1]>1 and items[1]<-1):\n        features.append(items[0])\nfeatures","c1122072":"sns.scatterplot(ds['LotArea'],ds['SalePrice']);","90c8e0e0":"ds.drop(index = ds[(ds['LotArea'] > 100000)].index, inplace= True)\nsns.scatterplot(ds['LotArea'],ds['SalePrice']);","f1431925":"sns.scatterplot(ds['GrLivArea'],ds['SalePrice']);","ab615902":"ds.drop(index = ds[(ds['GrLivArea'] > 4000) & (ds['SalePrice']<300000)].index, inplace= True)","707eb6e3":"len(ds.columns)","48b89871":"y = ds.SalePrice\nX=ds.drop(['Id','SalePrice'],axis=1)","4fe70da4":"test_data_path = '..\/input\/test.csv'\n\nds = pd.read_csv(test_data_path)\nds.shape","78815dde":"ds=ds.drop(features2,axis=1)\nds1_null=ds.isnull().sum()\nfeatures=[]\nfor items in ds1_null.iteritems():\n    if(items[1]>0):\n        features.append(items[0])\nfeatures","b509036a":"ds['MasVnrArea']=ds['MasVnrArea'].fillna(ds['MasVnrArea'].mean())\nds.GarageYrBlt = ds[['GarageYrBlt','GarageCars']].apply(Impute_GarageYear, axis = 1)\nds.GarageQual = ds[['GarageQual','GarageYrBlt']].apply(Impute_GarageQual, axis = 1)\nds.GarageType = ds[['GarageType','GarageYrBlt']].apply(Impute_GarageType, axis = 1)\nds.GarageFinish = ds[['GarageFinish','GarageCars']].apply(Impute_GarageType, axis = 1)\nds['BsmtQual']=ds['BsmtQual'].fillna('TA')\nds['BsmtCond']=ds['BsmtCond'].fillna('TA')\nds['BsmtExposure']=ds['BsmtExposure'].fillna('No')\nds['BsmtFinType1']=ds['BsmtFinType1'].fillna('Unf')\nds['BsmtFinType2']=ds['BsmtFinType2'].fillna('Unf')\nds['Electrical']=ds['Electrical'].fillna('SBrkr')\nds['MasVnrType']=ds['MasVnrType'].fillna('None')\nds.GarageCond = ds[['GarageCond','GarageYrBlt']].apply(Impute_GarageCond, axis = 1)\nds.LotFrontage = ds[['LotFrontage','Street']].apply(Impute_LotFrontage, axis = 1)\nds1_null=ds.isnull().sum()\nfeatures=[]\nfor items in ds1_null.iteritems():\n    if(items[1]>0):\n        features.append(items[0])\nfeatures","998db555":"ds['MSZoning']=ds['MSZoning'].fillna('RL')\nds['Utilities']=ds['Utilities'].fillna('AllPub')\nds['Exterior1st']=ds['Exterior1st'].fillna('VinylSd')\nds['Exterior2nd']=ds['Exterior2nd'].fillna('VinylSd')\nds['BsmtFinSF1']=ds['BsmtFinSF1'].fillna(round(ds['BsmtFinSF1'].mean()))\nds['BsmtFinSF2']=ds['BsmtFinSF2'].fillna(round(ds['BsmtFinSF2'].mean()))\nds['BsmtUnfSF']=ds['BsmtUnfSF'].fillna(round(ds['BsmtUnfSF'].mean()))\nds['TotalBsmtSF']=ds['TotalBsmtSF'].fillna(round(ds['BsmtFinSF2'].mean()))\nds['BsmtFullBath']=ds['BsmtFullBath'].fillna(0.0)\nds['BsmtHalfBath']=ds['BsmtHalfBath'].fillna(0.0)\nds['KitchenQual']=ds['KitchenQual'].fillna('TA')\nds['Functional']=ds['Functional'].fillna('Typ')\nds['GarageCars']=ds['GarageCars'].fillna(2.0)\nds['GarageArea']=ds['GarageArea'].fillna(round(ds['GarageArea'].mean()))\nds['SaleType']=ds['SaleType'].fillna('WD')\nds['Fence']=ds['Fence'].fillna('MnPrv')\nds['MiscFeature']=ds['MiscFeature'].fillna('Shed')\nds1_null=ds.isnull().sum()\nds.LotFrontage = ds[['LotFrontage','Street']].apply(Impute_LotFrontage, axis = 1)\nds.GarageYrBlt = ds[['GarageYrBlt','GarageCars']].apply(Impute_GarageYear, axis = 1)\nds.GarageCond = ds[['GarageCond','GarageCars']].apply(Impute_GarageCond, axis = 1)\nds.GarageType = ds[['GarageType','GarageCars']].apply(Impute_GarageType, axis = 1)\nds=ds.drop('FireplaceQu',axis=1)","6a169e2e":"ds[\"Street\"] = le.fit_transform(ds[\"Street\"])\nds[\"LandContour\"] = le.fit_transform(ds[\"LandContour\"])\nds[\"Neighborhood\"] = le.fit_transform(ds[\"Neighborhood\"])\nds[\"BldgType\"] = le.fit_transform(ds[\"BldgType\"])\nds[\"ExterCond\"] = le.fit_transform(ds[\"ExterCond\"])\nds[\"CentralAir\"] = le.fit_transform(ds[\"CentralAir\"])\nds[\"GarageCond\"] = le.fit_transform(ds[\"GarageCond\"])\nds[\"KitchenQual\"] = le.fit_transform(ds[\"KitchenQual\"])\nds[\"GarageType\"] = le.fit_transform(ds[\"GarageType\"])\nds[\"LotConfig\"] = le.fit_transform(ds[\"LotConfig\"])\nds[\"HouseStyle\"] = le.fit_transform(ds[\"HouseStyle\"])\nds[\"RoofStyle\"] = le.fit_transform(ds[\"RoofStyle\"])\nds[\"LotShape\"] = le.fit_transform(ds[\"LotShape\"])\nds[\"GarageQual\"] = le.fit_transform(ds[\"GarageQual\"])\nds[\"GarageFinish\"] = le.fit_transform(ds[\"GarageFinish\"])\nds[\"MSZoning\"] = le.fit_transform(ds[\"MSZoning\"])\nds[\"Utilities\"] = le.fit_transform(ds[\"Utilities\"])\nds[\"LandSlope\"] = le.fit_transform(ds[\"LandSlope\"])\nds[\"Condition1\"] = le.fit_transform(ds[\"Condition1\"])\nds[\"Condition2\"] = le.fit_transform(ds[\"Condition2\"])\nds[\"RoofMatl\"] = le.fit_transform(ds[\"RoofMatl\"])\nds[\"Exterior1st\"] = le.fit_transform(ds[\"Exterior1st\"])\nds[\"Exterior2nd\"] = le.fit_transform(ds[\"Exterior2nd\"])\nds[\"MasVnrType\"] = le.fit_transform(ds[\"MasVnrType\"])\nds[\"ExterQual\"] = le.fit_transform(ds[\"ExterQual\"])\nds[\"Foundation\"] = le.fit_transform(ds[\"Foundation\"])\nds[\"BsmtQual\"] = le.fit_transform(ds[\"BsmtQual\"])\nds[\"BsmtCond\"] = le.fit_transform(ds[\"BsmtCond\"])\nds[\"BsmtExposure\"] = le.fit_transform(ds[\"BsmtExposure\"])\nds[\"BsmtFinType1\"] = le.fit_transform(ds[\"BsmtFinType1\"])\nds[\"BsmtFinType2\"] = le.fit_transform(ds[\"BsmtFinType2\"])\nds[\"Heating\"] = le.fit_transform(ds[\"Heating\"])\nds[\"HeatingQC\"] = le.fit_transform(ds[\"HeatingQC\"])\nds[\"Electrical\"] = le.fit_transform(ds[\"Electrical\"])\nds[\"Functional\"] = le.fit_transform(ds[\"Functional\"])\nds[\"PavedDrive\"] = le.fit_transform(ds[\"PavedDrive\"])\nds[\"SaleType\"] = le.fit_transform(ds[\"SaleType\"])\nds[\"SaleCondition\"] = le.fit_transform(ds[\"SaleCondition\"])\nds[\"Alley\"] = le.fit_transform(ds[\"Alley\"])\nds[\"PoolQC\"] = le.fit_transform(ds[\"PoolQC\"])\nds['MiscFeature']=le.fit_transform(ds['MiscFeature'])\nds['Fence']=le.fit_transform(ds['Fence'])","4eb75180":"len(ds.columns)","237659e1":"Id=ds.Id\ntest_X=ds.drop('Id',axis=1)\nds.isnull().sum()","9690d6c6":"sc_X = StandardScaler()\nX = sc_X.fit_transform(X)\ntest_X = sc_X.transform(test_X)","153ddca0":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import GradientBoostingRegressor\nGBR=GradientBoostingRegressor()\nparameters = {'learning_rate': [0.01,0.02,0.03,0.04],'subsample': [0.9, 0.5, 0.2, 0.1],'n_estimators' : [100,500,1000, 1500],'max_depth': [4,6,8,10]}\nmodel=GridSearchCV(estimator=GBR,param_grid=parameters,cv=2,n_jobs=-1)\nmodel.fit(X,y)\npred=model.predict(test_X)","5027a0c3":"output = pd.DataFrame({'Id': ds.Id,\n                       'SalePrice': pred})\noutput.to_csv('submission.csv', index=False)","f5dd382e":"---\n\n\n\n\n*Have questions or comments? Visit the [Learn Discussion forum](https:\/\/www.kaggle.com\/learn-forum\/161285) to chat with other Learners.*"}}