{"cell_type":{"753eadb1":"code","bde047a9":"code","18c0386f":"code","14752c41":"code","c98563fa":"code","fa22f1f7":"code","441f61e0":"code","82748a53":"code","b087f082":"code","aa2ec2e0":"code","904fa556":"code","528d8c11":"code","cd0a302d":"code","0edc9e01":"code","c372bd1a":"code","9ed6d5c2":"code","a9422e1e":"code","b08d6236":"code","ec7d9b5b":"code","eefb084d":"markdown","fb0bb1d2":"markdown","5c7c8482":"markdown","782741ed":"markdown","cc4fbdd6":"markdown","aaf08c5b":"markdown","4d5d1f87":"markdown","ac9020de":"markdown","1bca514e":"markdown","a41c1301":"markdown"},"source":{"753eadb1":"#import the libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing\nimport matplotlib.pyplot as plt #data visualization \nimport seaborn as sns  #phyton library for visualization\n\nimport os\ndf = pd.read_csv('..\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv')","bde047a9":"df.head()","18c0386f":"df.info()\ndf.describe()","14752c41":"#check for missing values in the dataset\ndf.isnull().sum()","c98563fa":"plt.style.use('fivethirtyeight')","fa22f1f7":"plt.figure(1 , figsize = (15 , 6))\nn = 0 \nfor x in ['Age' , 'Annual Income (k$)' , 'Spending Score (1-100)']:\n    n += 1\n    plt.subplot(1 , 3 , n)\n    plt.subplots_adjust(hspace =0.5 , wspace = 0.5)\n    sns.distplot(df[x] , bins = 20)\n    plt.title('Distplot of {}'.format(x))\nplt.show()","441f61e0":"plt.figure(1 , figsize = (15 , 7))\nn = 0 \nfor x in ['Age' , 'Annual Income (k$)' , 'Spending Score (1-100)']:\n    for y in ['Age' , 'Annual Income (k$)' , 'Spending Score (1-100)']:\n        n += 1\n        plt.subplot(3 , 3 , n)\n        plt.subplots_adjust(hspace = 0.5 , wspace = 0.5)\n        sns.regplot(x = x , y = y , data = df)\n        plt.ylabel(y.split()[0]+' '+y.split()[1] if len(y.split()) > 1 else y )\nplt.show()","82748a53":"X = df[[\"Annual Income (k$)\", \"Spending Score (1-100)\"]]\nX = X.values","b087f082":"from sklearn.cluster import KMeans\n\nKs = range(1, 20)\nKMNs = [KMeans(n_clusters=i) for i in Ks]\nscore = [KMNs[i].fit(X).score(X) for i in range(len(KMNs))]\nplt.plot(Ks, score)\nplt.xlabel('Number of Clusters')\nplt.ylabel('Score')\nplt.title('Elbow Curve')\nplt.show()","aa2ec2e0":"from sklearn.metrics import silhouette_score\n\nKMN = KMeans(n_clusters=5).fit(X)\nKMNLabels = KMN.labels_\nKMNClusterCenters = KMN.cluster_centers_\nYPredict = KMN.predict(X)\nprint(\"KMN Labels : \", KMNLabels[:10])\nprint(\"KMN Cluster Centre : \", KMNClusterCenters)\nprint(\"Y Predict : \", YPredict[:10])\nprint(\"Shiloutte Score: \", silhouette_score(X, YPredict))\n\ndf = pd.DataFrame(X, columns=[\"Annual Income (k$)\", \"Spending Score (1-100)\"])\nplt.subplot(121)\nsns.swarmplot(KMNLabels , df[\"Annual Income (k$)\"])\nplt.subplot(122)\nsns.swarmplot(KMNLabels , df[\"Spending Score (1-100)\"])\nplt.show()","904fa556":"#Visualizing all the clusters \nplt.scatter(X[YPredict == 0, 0], X[YPredict == 0, 1], s = 100, c = 'red', label = 'Cluster 1')\nplt.scatter(X[YPredict == 1, 0], X[YPredict == 1, 1], s = 100, c = 'blue', label = 'Cluster 2')\nplt.scatter(X[YPredict == 2, 0], X[YPredict == 2, 1], s = 100, c = 'green', label = 'Cluster 3')\nplt.scatter(X[YPredict == 3, 0], X[YPredict == 3, 1], s = 100, c = 'cyan', label = 'Cluster 4')\nplt.scatter(X[YPredict == 4, 0], X[YPredict == 4, 1], s = 100, c = 'magenta', label = 'Cluster 5')\nplt.scatter(KMN.cluster_centers_[:, 0], KMN.cluster_centers_[:, 1], s = 300, c = 'yellow', label = 'Centroids')\nplt.title('Clusters of customers')\nplt.xlabel('Annual Income (k$)')\nplt.ylabel('Spending Score (1-100)')\nplt.legend()\nplt.show()","528d8c11":"df2 = pd.read_csv('..\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv')\n\nfrom sklearn.preprocessing import MinMaxScaler\nminmax_scale = MinMaxScaler().fit(df2[['Annual Income (k$)', 'Spending Score (1-100)']])\nX2 = minmax_scale.transform(df2[['Annual Income (k$)', 'Spending Score (1-100)']])","cd0a302d":"from sklearn.cluster import KMeans\n\nKs2 = range(1, 20)\nKMNs2 = [KMeans(n_clusters=i) for i in Ks2]\nscore2 = [KMNs2[i].fit(X2).score(X2) for i in range(len(KMNs2))]\nplt.plot(Ks2, score2)\nplt.xlabel('Number of Clusters')\nplt.ylabel('Score')\nplt.title('Elbow Curve')\nplt.show()","0edc9e01":"KMN2 = KMeans(n_clusters=5).fit(X2)\nKMNLabels2 = KMN2.labels_\nKMNClusterCenters2 = KMN2.cluster_centers_\nYPredict2 = KMN2.predict(X2)\nprint(\"KMN Labels : \", KMNLabels2[:10])\nprint(\"KMN Cluster Centre : \", KMNClusterCenters2)\nprint(\"Y Predict : \", YPredict2[:10])\nprint(\"Shiloutte Score: \", silhouette_score(X2, YPredict2))\n\n\ndf_minmax = pd.DataFrame(X2, columns=[\"Annual Income (k$)\", \"Spending Score (1-100)\"])\nplt.subplot(121)\nsns.swarmplot(KMNLabels2 , df_minmax[\"Annual Income (k$)\"])\nplt.subplot(122)\nsns.swarmplot(KMNLabels2 , df_minmax[\"Spending Score (1-100)\"])\nplt.show()","c372bd1a":"#Visualizing all the clusters \nplt.scatter(X2[YPredict2 == 0, 0], X2[YPredict2 == 0, 1], s = 100, c = 'red', label = 'Cluster 1')\nplt.scatter(X2[YPredict2 == 1, 0], X2[YPredict2 == 1, 1], s = 100, c = 'blue', label = 'Cluster 2')\nplt.scatter(X2[YPredict2 == 2, 0], X2[YPredict2 == 2, 1], s = 100, c = 'green', label = 'Cluster 3')\nplt.scatter(X2[YPredict2 == 3, 0], X2[YPredict2 == 3, 1], s = 100, c = 'cyan', label = 'Cluster 4')\nplt.scatter(X2[YPredict2 == 4, 0], X2[YPredict2 == 4, 1], s = 100, c = 'magenta', label = 'Cluster 5')\nplt.scatter(KMN2.cluster_centers_[:, 0], KMN2.cluster_centers_[:, 1], s = 300, c = 'yellow', label = 'Centroids')\nplt.title('Clusters of customers')\nplt.xlabel('Annual Income (k$)')\nplt.ylabel('Spending Score (1-100)')\nplt.legend()\nplt.show()","9ed6d5c2":"df3 = pd.read_csv('..\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv')\n\nfrom sklearn.preprocessing import StandardScaler\nstd_scale = StandardScaler().fit(df3[['Annual Income (k$)', 'Spending Score (1-100)']])\nX3 = std_scale.transform(df3[['Annual Income (k$)', 'Spending Score (1-100)']])","a9422e1e":"from sklearn.cluster import KMeans\n\nKs3 = range(1, 20)\nKMNs3 = [KMeans(n_clusters=i) for i in Ks3]\nscore3 = [KMNs3[i].fit(X3).score(X3) for i in range(len(KMNs3))]\nplt.plot(Ks3, score3)\nplt.xlabel('Number of Clusters')\nplt.ylabel('Score')\nplt.title('Elbow Curve')\nplt.show()","b08d6236":"KMN3 = KMeans(n_clusters=5).fit(X3)\nKMNLabels3 = KMN3.labels_\nKMNClusterCenters3 = KMN3.cluster_centers_\nYPredict3 = KMN3.predict(X3)\nprint(\"KMN Labels : \", KMNLabels3[:10])\nprint(\"KMN Cluster Centre : \", KMNClusterCenters3)\nprint(\"Y Predict : \", YPredict3[:10])\nprint(\"Shiloutte Score: \", silhouette_score(X3, YPredict3))\n\ndf_std = pd.DataFrame(X3, columns=[\"Annual Income (k$)\", \"Spending Score (1-100)\"])\nplt.subplot(121)\nsns.swarmplot(KMNLabels3 , df_std[\"Annual Income (k$)\"])\nplt.subplot(122)\nsns.swarmplot(KMNLabels3 , df_std[\"Spending Score (1-100)\"])\nplt.show()","ec7d9b5b":"#Visualizing all the clusters \nplt.scatter(X3[YPredict3 == 0, 0], X3[YPredict3 == 0, 1], s = 100, c = 'red', label = 'Cluster 1')\nplt.scatter(X3[YPredict3 == 1, 0], X3[YPredict3 == 1, 1], s = 100, c = 'blue', label = 'Cluster 2')\nplt.scatter(X3[YPredict3 == 2, 0], X3[YPredict3 == 2, 1], s = 100, c = 'green', label = 'Cluster 3')\nplt.scatter(X3[YPredict3 == 3, 0], X3[YPredict3 == 3, 1], s = 100, c = 'cyan', label = 'Cluster 4')\nplt.scatter(X3[YPredict3 == 4, 0], X3[YPredict3 == 4, 1], s = 100, c = 'magenta', label = 'Cluster 5')\nplt.scatter(KMN3.cluster_centers_[:, 0], KMN3.cluster_centers_[:, 1], s = 300, c = 'yellow', label = 'Centroids')\nplt.title('Clusters of customers')\nplt.xlabel('Annual Income (k$)')\nplt.ylabel('Spending Score (1-100)')\nplt.legend()\nplt.show()","eefb084d":"# Mall Customer Segmentation","fb0bb1d2":"## Data Visualization","5c7c8482":"The label of this dataset is unknown so we will perform unsupervised learning by using the KMeans Clustering Algorithm ","782741ed":"there are no non null or missing values in all columns in the dataset","cc4fbdd6":"## Feature Selection","aaf08c5b":"## With MinMax Scaler","4d5d1f87":"## Conventional","ac9020de":"# Clustering using K- means","1bca514e":"Annual Income and Spending Score shows the most promising correlation, where we can cluster the samples into five groups.","a41c1301":"# With Standard Scaler"}}