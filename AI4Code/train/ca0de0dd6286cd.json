{"cell_type":{"3aca326a":"code","52d71acd":"code","e1cb45ec":"code","53e06805":"code","6021eeca":"code","9de92435":"code","006f8940":"code","f3edb1b0":"code","3eae2ecf":"code","9f3e2483":"code","5af5cef9":"code","cf0b9bb0":"code","773bf03c":"code","6998028a":"code","29273fcf":"code","61d35313":"code","9ed026e8":"code","2e4ad567":"code","9896ada4":"code","0e0f652b":"code","643e6db1":"code","ddcd93db":"code","7453bf51":"code","acba24a2":"code","01d4a14f":"code","24f749f8":"code","16f334f9":"code","247e5d8d":"code","6156a843":"code","b430175e":"code","63e723cb":"code","409fec5a":"code","32f34f0f":"code","d87daf47":"code","11706328":"code","4b692012":"code","878c1623":"code","34139bd6":"code","a9425b52":"code","325db15d":"code","d7ccd0c3":"code","9b79c89c":"code","6d273f22":"code","46e71113":"code","4d9bf597":"code","b21eb3d6":"code","0fe7e883":"code","8a35446a":"code","ae70752f":"code","f4082304":"code","5fa298d8":"code","fc9652fe":"code","0cae2d4f":"code","1cfc94bc":"code","99624b8f":"code","aca303a9":"code","66945780":"code","864d98b6":"code","00065bd4":"code","d149d079":"code","345c7540":"code","bf9b8fbd":"code","c9821f01":"code","a83455f8":"code","51e77b57":"code","6a3ae4ac":"markdown","cd868267":"markdown","c7dd01c4":"markdown","6839d1e4":"markdown","f79861f8":"markdown","c34782cd":"markdown","91731227":"markdown","782d9728":"markdown","30e23df4":"markdown","b5146f77":"markdown","55f761bc":"markdown","46eea76c":"markdown","ff8cadb0":"markdown","9b67cd81":"markdown","01baab2f":"markdown","6e7b7562":"markdown","23d3f893":"markdown","1fcdb06e":"markdown","cfa55e9d":"markdown","65be8bed":"markdown","7254bd0a":"markdown","99603bfd":"markdown"},"source":{"3aca326a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid')\n\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings \nwarnings.filterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","52d71acd":"df = pd.read_csv('\/kaggle\/input\/heart-disease-uci\/heart.csv')\n","e1cb45ec":"df.columns\n","53e06805":"df.head()","6021eeca":"df.describe().T\n","9de92435":"df.info()","006f8940":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(df[variable],bins = 10)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with histogram\".format(variable))\n    plt.show()","f3edb1b0":"numericalVar = ['age', 'sex', 'cp', 'trestbps','chol','fbs','restecg',\n                'thalach','exang','oldpeak','slope','ca', 'thal']\nfor n in numericalVar:\n    plot_hist(n)","3eae2ecf":"df.plot(subplots=True,figsize=(18,18))\nplt.show()","9f3e2483":"# Age - Target\ndf[['age', 'target']].groupby(['age'], as_index = False).mean().sort_values(by = 'target', ascending = False)","5af5cef9":"# Sex - Target\ndf[['sex', 'target']].groupby(['sex'], as_index = False).mean().sort_values(by = 'target', ascending = False)","cf0b9bb0":"# Cp - Target\ndf[['cp', 'target']].groupby(['cp'], as_index = False).mean().sort_values(by = 'target', ascending = False)","773bf03c":"# trestbps - Target\ndf[['trestbps', 'target']].groupby(['trestbps'], as_index = False).mean().sort_values(by = 'target', ascending = False)","6998028a":"# Sex - Target\ndf[['sex', 'target']].groupby(['sex'], as_index = False).mean().sort_values(by = 'target', ascending = False)","29273fcf":"# Chol - Target\ndf[['chol', 'target']].groupby(['chol'], as_index = False).mean().sort_values(by = 'target', ascending = False)","61d35313":"# Fbs - Target\ndf[['fbs', 'target']].groupby(['fbs'], as_index = False).mean().sort_values(by = 'target', ascending = False)","9ed026e8":"# restecg - Target\ndf[['restecg', 'target']].groupby(['restecg'], as_index = False).mean().sort_values(by = 'target', ascending = False)","2e4ad567":"# thalach - Target\ndf[['thalach', 'target']].groupby(['thalach'], as_index = False).mean().sort_values(by = 'target', ascending = False)","9896ada4":"# exang - Target\ndf[['exang', 'target']].groupby(['exang'], as_index = False).mean().sort_values(by = 'target', ascending = False)","0e0f652b":"# oldpeak - Target\ndf[['oldpeak', 'target']].groupby(['oldpeak'], as_index = False).mean().sort_values(by = 'target', ascending = False)","643e6db1":"# slope - Target\ndf[['slope', 'target']].groupby(['slope'], as_index = False).mean().sort_values(by = 'target', ascending = False)","ddcd93db":"# ca - Target\ndf[['ca', 'target']].groupby(['ca'], as_index = False).mean().sort_values(by = 'target', ascending = False)","7453bf51":"# thal - Target\ndf[['thal', 'target']].groupby(['thal'], as_index = False).mean().sort_values(by = 'target', ascending = False)","acba24a2":"df['age']=df['age']\nbins=[29,47,55,61,77]\nlabels=[\"Young Adult\",\"Early Adult\",\"Adult\",\"Senior\"]\ndf['age_group']=pd.cut(df['age'],bins,labels=labels)\nfig=plt.figure(figsize=(20,5))\nsns.barplot(x='age_group',y='sex',data=df)\nplt.show()","01d4a14f":"def detect_outlier(df, features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3-Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # Detect Outlier and Their Indices\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # Store Indices\n        outlier_indices.extend(outlier_list_col)\n        \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers\n","24f749f8":"df.loc[detect_outlier(df, ['age', 'sex', 'cp', 'trestbps','chol','fbs','restecg',\n                'thalach','exang','oldpeak','slope','ca', 'thal'])]","16f334f9":"df.head()\n","247e5d8d":"df.columns[df.isnull().any()]\n","6156a843":"df.isnull().sum()\n","b430175e":"sns.heatmap(df.corr(), annot = True, fmt = '.2f' )\nplt.show()","63e723cb":"g = sns.factorplot(x = 'age_group', y = 'target', data = df, kind = 'bar', size = 7)\ng.set_ylabels('Probability')\nplt.show()","409fec5a":"g = sns.factorplot(x = 'age_group', y = 'chol', data = df, kind = 'bar', size = 7)\ng.set_ylabels('Probability')\nplt.show()","32f34f0f":"g = sns.factorplot(x = 'age_group', y = 'thalach', data = df, kind = 'bar', size = 7)\ng.set_ylabels('Probability')\nplt.show()","d87daf47":"grp =df.groupby(\"age\")\nx= grp[\"chol\"].agg(np.mean)\ny=grp[\"trestbps\"].agg(np.mean)\nz=grp[\"thalach\"].agg(np.mean)","11706328":"plt.figure(figsize=(16,5))\nplt.plot(x,'ro',color='r')\nplt.xticks(rotation=90)\nplt.title(\"Age wise Chol\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Chol\")\nplt.show()","4b692012":"plt.figure(figsize=(15,5))\nplt.plot(y,'r--',color='b')\nplt.xticks(rotation=90)\nplt.title(\"Age wise Trestbps\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Trestbps\")\nplt.show()","878c1623":"plt.figure(figsize=(16,5))\nplt.plot(z,\"g^\",color='g')\nplt.xticks(rotation=90)\nplt.xlabel(\"Age\")\nplt.ylabel(\"Thalach\")\nplt.show()","34139bd6":"fig=plt.figure(figsize=(20,5))\nsns.violinplot(x ='age', y = 'trestbps', data = df)\nplt.show()","a9425b52":"ax = df.trestbps.plot.kde()\nax = df.chol.plot.kde()\nax = df.thalach.plot.kde()\nax.legend()\nplt.show()\n","325db15d":"g = sns.FacetGrid(df, col = 'target')\ng.map(sns.distplot, 'age', bins = 25)\nplt.show()","d7ccd0c3":"sns.factorplot(x = 'sex', y = 'age', data = df, kind = 'box')\nplt.show()","9b79c89c":"plt.figure(figsize=(20,5))\nsns.factorplot(x  ='sex', y = 'chol', hue  ='age_group', data = df, kind = 'box')\nplt.show()","6d273f22":"df[\"sex\"] = df[\"sex\"].astype(\"category\")\ndf = pd.get_dummies(df, columns=[\"sex\"])\ndf.head()\n","46e71113":"df[\"age_group\"] = df[\"age_group\"].astype(\"category\")\ndf = pd.get_dummies(df, columns=[\"age_group\"])\ndf.head(25)\n","4d9bf597":"df[\"slope\"] = df[\"slope\"].astype(\"category\")\ndf = pd.get_dummies(df, columns=[\"slope\"])\ndf.head(25)\n","b21eb3d6":"df[\"cp\"] = df[\"cp\"].astype(\"category\")\ndf = pd.get_dummies(df, columns=[\"cp\"])\ndf.head(25)\n","0fe7e883":"df[\"fbs\"] = df[\"fbs\"].astype(\"category\")\ndf = pd.get_dummies(df, columns=[\"fbs\"])\ndf.head()\n","8a35446a":"df[\"restecg\"] = df[\"restecg\"].astype(\"category\")\ndf = pd.get_dummies(df, columns=[\"restecg\"])\ndf.head()\n","ae70752f":"df[\"exang\"] = df[\"exang\"].astype(\"category\")\ndf = pd.get_dummies(df, columns=[\"exang\"])\ndf.head()","f4082304":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","5fa298d8":"train_df_len  = int(df.shape[0]*0.66)","fc9652fe":"test = df[train_df_len:]\ntest.drop(labels = ['target'], axis = 1, inplace = True)","0cae2d4f":"test.head()","1cfc94bc":"train = df[:train_df_len]\nX_train = train.drop(labels = 'target', axis = 1)\ny_train = train['target']\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = .33, random_state = 123)\nprint('X_train', len(X_train))\nprint('X_test', len(X_test))\nprint('y_train', len(y_train))\nprint('y_test', len(y_test))","99624b8f":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nacc_log_train = round(logreg.score(X_train, y_train)*100,2) \nacc_log_test = round(logreg.score(X_test,y_test)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","aca303a9":"random_state = 1001\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n              SVC(random_state = random_state),\n              RandomForestClassifier(random_state = random_state),\n              LogisticRegression(random_state = random_state),\n              KNeighborsClassifier()]","66945780":"dt_param_grid = {'min_samples_split': range(10,500,20),\n                'max_depth': range(1,20,2)}","864d98b6":"svc_param_grid = {'kernel': ['rbf'],\n                  'gamma' : [0.001, 0.01, 0.1, 1],\n                  'C'     : [1,10,50,100,200,300,1000]}","00065bd4":"rf_param_grid = {\"max_features\": [1,3,10],\n                 \"min_samples_split\":[2,3,10],\n                 \"min_samples_leaf\":[1,3,10],\n                 \"bootstrap\":[False],\n                 \"n_estimators\":[100,300],\n                 \"criterion\":[\"gini\"]}","d149d079":"logreg_param_grid = {'C'      : np.logspace(-3,3,7),\n                     'penalty':['l1', 'l2']}","345c7540":"knn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                  \"weights\"    : [\"uniform\",\"distance\"],\n                  \"metric\"     :[\"euclidean\",\"manhattan\"]}","bf9b8fbd":"classifier_param = [dt_param_grid,\n                    svc_param_grid,\n                    rf_param_grid,\n                    logreg_param_grid,\n                    knn_param_grid]","c9821f01":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","a83455f8":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result,\n                           \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\"LogisticRegression\",\"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","51e77b57":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                         (\"rfc\",best_estimators[2]),\n                                         (\"lr\",best_estimators[3])],\n                                         voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(X_train, y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","6a3ae4ac":"<a id= '6.1'> <a\/>\n\n## 6.1 Finding Missing Value","cd868267":"<a id= '1'> <a\/>\n\n# 1. Load and Check Data","c7dd01c4":"<a id= '9.3'> <a\/>\n\n## 9.3 Hyperparameter Tuning -- Grid Search -- Cross Validation\n  \nCompare 5 ML classifier and evaluate mean accuracy of each of them by stratified cross validation\n\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","6839d1e4":"<a id= '3'> <a\/>\n\n# 3. Univariate Variable Analysis","f79861f8":"<a id= '9.1'> <a\/>\n\n## 9.1 Train-test split","c34782cd":"<a id= '9.4'> <a\/>\n\n## 9.4 Ensemble Modeling","91731227":"<a id= '5'> <a\/>\n\n# 5. Outlier Detection","782d9728":"Perfect ! there is no outlier values in our dataset","30e23df4":"<a id= '8'> <a\/>\n\n# 8. Feature Engineering","b5146f77":"<a id= '7.1'> <a\/>\n\n## 7.1 Correlation","55f761bc":"* Target means diagnosis of heart disease (angiographic disease status)\n >- Value 0: < 50% diameter narrowing\n >- Value 1: > 50% diameter narrowing  \n* age <=~30 has a small heart disease rate  \n* large number btw 40-60 have heart d isease\n* most patiants are in 40-60 age range","46eea76c":"1. [Load and Check Data](#1)\n2. [Variable Description](#2)\n3. [Univariate Variable Analysis](#3)\n4. [Basic Analysis](#4)\n5. [Outlier Detection](#5)\n6. [Missing Value](#6)\n> 6.1[Finding Missing Value](#6.1)\n7. [Visualization](#7)\n> 7.1 [Correlation](#7.1)\n8. [Feature Engineering](#8)\n9. [Modeling](#9)\n> 9.1 [Train-test split](#9.1)  \n> 9.2 [Simple Logistic Regression](#9.2)  \n> 9.3 [Hyperparameter Tuning -- Grid Search -- Cross Validation](#9.3)   \n> 9.4 [Ensemble Modeling](#9.4)","ff8cadb0":"1. age\n2. sex\n3. chest pain type (4 values)\n4. resting blood pressure\n5. serum cholestoral in mg\/dl\n6. fasting blood sugar > 120 mg\/dl\n7. resting electrocardiographic results (values 0,1,2)\n8. maximum heart rate achieved\n9. exercise induced angina\n10. oldpeak = ST depression induced by exercise relative to rest\n11. the slope of the peak exercise ST segment\n12. number of major vessels (0-3) colored by flourosopy\n13. thal: 3 = normal; 6 = fixed defect; 7 = reversable def2c13","9b67cd81":"<a id= '7'> <a\/>\n\n# 7. Visualization","01baab2f":"We can see from the table above that there is a link between age and the variables in the list below:  \n  \n\n* age - trestbps \n* age - chol\n* age - thalach\n","6e7b7562":"<a id= '9.2'> <a\/>\n\n## 9.2 Simple Logistic Regression","23d3f893":"<a id= '4'> <a\/>\n\n# 4. Basic Analysis","1fcdb06e":"Let's make an analysis between the target and the variables given below:  \n  \n* age\n* sex\n* cp\n* trestbps\n* chol\n* fbs\n* restecg\n* thalach\n* exang\n* oldpeak\n* slope\n* ca\n* thal","cfa55e9d":"Sex is not informative for age prediction, age distribution seems to be same.","65be8bed":"<a id= '9'> <a\/>\n\n# 9. Modeling","7254bd0a":"<a id= '6'> <a\/>\n\n# 6. Missing Value","99603bfd":"<a id= '2'> <a\/>\n\n# 2. Variable Description"}}