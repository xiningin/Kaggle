{"cell_type":{"752a1bbc":"code","033d6c3b":"code","c2917835":"code","d774eef6":"code","66bda43e":"code","c6cfcf30":"code","3f29cacd":"code","e248da63":"code","383fbb78":"code","995c7c48":"code","1e1680bb":"code","d9c04dae":"code","0d9727eb":"code","249fda3c":"code","cf641207":"code","4aea941e":"code","528b6ef7":"code","3224a6ad":"code","46ee68bc":"code","dbf6d6c4":"code","406944ba":"code","2a7e9250":"code","6af40fc0":"code","3c32f03c":"code","13b373eb":"code","1b8a26df":"code","d3a2d2ad":"code","1b1027c2":"code","1d7ae215":"code","e1eb6d84":"code","385fa589":"code","4484a07a":"code","cc15b65e":"code","f4780bf6":"code","38f985cb":"code","37bd76d1":"code","82db2651":"code","8d09e434":"code","3dee1718":"code","5e402f6a":"code","4cb0d293":"code","66f6e218":"code","170f3738":"code","bfd589a7":"code","16dba71f":"code","b9c101bb":"code","82b3c371":"code","13018b29":"code","72f80d66":"code","43ebc9b2":"code","b7805cb1":"code","f5884576":"code","deb7b46e":"code","49945bb5":"code","7ceed528":"code","61df4b5a":"markdown","6e74139c":"markdown","332fba6d":"markdown","e89bc988":"markdown","8ebcc040":"markdown","07228a9d":"markdown","1d3d9bc5":"markdown","708f73a8":"markdown","cc60f59f":"markdown","d0556dc0":"markdown","ffaab94f":"markdown","b78553b2":"markdown","ea0afe5d":"markdown","9c003f8a":"markdown","0f7c3fe6":"markdown","395c2da9":"markdown","2148fbd5":"markdown","d54f5dd0":"markdown","a62bc19d":"markdown","473e89bb":"markdown","df5495b5":"markdown","9176f6d2":"markdown"},"source":{"752a1bbc":"#GENERAL\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport random\nimport itertools\nfrom skimage import data, io, filters\nimport skimage\n#PATH PROCESS\nimport os\nimport os.path\nfrom pathlib import Path\nimport glob\n#IMAGE PROCESS\nfrom PIL import Image\nfrom keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport cv2\nfrom keras.applications.vgg16 import preprocess_input, decode_predictions\nfrom keras.preprocessing import image\n#SCALER & TRANSFORMATION\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom keras import regularizers\nfrom sklearn.preprocessing import LabelEncoder\n#ACCURACY CONTROL\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, roc_auc_score, roc_curve\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.metrics import mean_squared_error, r2_score\n#OPTIMIZER\nfrom keras.optimizers import RMSprop,Adam,Optimizer,Optimizer, SGD\n#MODEL LAYERS\nfrom tensorflow.keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization,MaxPooling2D,BatchNormalization,\\\n                        Permute, TimeDistributed, Bidirectional,GRU, SimpleRNN, LSTM, GlobalAveragePooling2D, SeparableConv2D, ZeroPadding2D, Convolution2D, ZeroPadding2D\nfrom keras import models\nfrom keras import layers\nimport tensorflow as tf\nfrom keras.applications import VGG16,VGG19,inception_v3\nfrom keras import backend as K\nfrom keras.utils import plot_model\nfrom keras.models import load_model\n#SKLEARN CLASSIFIER\nfrom xgboost import XGBClassifier, XGBRegressor\nfrom lightgbm import LGBMClassifier, LGBMRegressor\nfrom catboost import CatBoostClassifier, CatBoostRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingClassifier, GradientBoostingRegressor\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\nfrom sklearn.neural_network import MLPClassifier, MLPRegressor\nfrom sklearn.neighbors import KNeighborsClassifier, KNeighborsRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.cross_decomposition import PLSRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import ElasticNetCV\n#IGNORING WARNINGS\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\",category=DeprecationWarning)\nfilterwarnings(\"ignore\", category=FutureWarning) \nfilterwarnings(\"ignore\", category=UserWarning)","033d6c3b":"Main_PNG_Path = Path(\"..\/input\/vehicle-detection-image-set\/data\")","c2917835":"PNG_Path = list(Main_PNG_Path.glob(r\"*\/*.png\"))","d774eef6":"PNG_Labels = list(map(lambda x: os.path.split(os.path.split(x)[0])[1],PNG_Path))","66bda43e":"PNG_Path_Series = pd.Series(PNG_Path,name=\"PNG\").astype(str)\nPNG_Labels_Series = pd.Series(PNG_Labels,name=\"CATEGORY\")","c6cfcf30":"Main_Data = pd.concat([PNG_Path_Series,PNG_Labels_Series],axis=1)","3f29cacd":"print(Main_Data.head(-1))","e248da63":"Main_Data[\"CATEGORY\"].replace({\"non-vehicles\":\"no_vehicles\"},inplace=True)","383fbb78":"print(Main_Data.head(-1))","995c7c48":"Main_Data = Main_Data.sample(frac=1).reset_index(drop=True)","1e1680bb":"print(Main_Data.head(-1))","d9c04dae":"plt.style.use(\"classic\")","0d9727eb":"Example_I = cv2.imread(Main_Data[\"PNG\"][44])\nExample_I = cv2.cvtColor(Example_I,cv2.COLOR_BGR2RGB)\nplt.xlabel(Example_I.shape)\nplt.ylabel(Example_I.size)\nplt.title(Main_Data[\"CATEGORY\"][44])\nplt.imshow(Example_I)","249fda3c":"Example_I = cv2.imread(Main_Data[\"PNG\"][2])\nExample_I = cv2.cvtColor(Example_I,cv2.COLOR_BGR2RGB)\nplt.xlabel(Example_I.shape)\nplt.ylabel(Example_I.size)\nplt.title(Main_Data[\"CATEGORY\"][2])\nplt.imshow(Example_I)","cf641207":"figure,axis = plt.subplots(nrows=5,ncols=5,figsize=(11,11))\n\nfor In_Image,sub in enumerate(axis.flat):\n    Im_Exp = Main_Data[\"PNG\"][In_Image]\n    Exp_Im = cv2.imread(Im_Exp)\n    Exp_Im = cv2.cvtColor(Exp_Im,cv2.COLOR_BGR2RGB)\n    sub.set_xlabel(Exp_Im.shape)\n    sub.set_ylabel(Exp_Im.size)\n    sub.set_title(Main_Data[\"CATEGORY\"][In_Image])\n    sub.imshow(Exp_Im)\nplt.tight_layout()\nplt.show()","4aea941e":"Non_V_Img = Main_Data[Main_Data[\"CATEGORY\"] == \"no_vehicles\"]\nV_Img = Main_Data[Main_Data[\"CATEGORY\"] == \"vehicles\"]\n\nNon_V_Img = Non_V_Img.reset_index()\nV_Img = V_Img.reset_index()","528b6ef7":"figure,axis = plt.subplots(nrows=5,ncols=5,figsize=(11,11))\n\nfor In_Image,sub in enumerate(axis.flat):\n    Im_Exp = Non_V_Img[\"PNG\"][In_Image]\n    Exp_Im = cv2.imread(Im_Exp)\n    Exp_Im = cv2.cvtColor(Exp_Im,cv2.COLOR_BGR2RGB)\n    sub.set_xlabel(Exp_Im.shape)\n    sub.set_ylabel(Exp_Im.size)\n    sub.set_title(Non_V_Img[\"CATEGORY\"][In_Image])\n    sub.imshow(Exp_Im)\nplt.tight_layout()\nplt.show()","3224a6ad":"figure,axis = plt.subplots(nrows=5,ncols=5,figsize=(11,11))\n\nfor In_Image,sub in enumerate(axis.flat):\n    Im_Exp = V_Img[\"PNG\"][In_Image]\n    Exp_Im = cv2.imread(Im_Exp)\n    Exp_Im = cv2.cvtColor(Exp_Im,cv2.COLOR_BGR2RGB)\n    sub.set_xlabel(Exp_Im.shape)\n    sub.set_ylabel(Exp_Im.size)\n    sub.set_title(V_Img[\"CATEGORY\"][In_Image])\n    sub.imshow(Exp_Im)\nplt.tight_layout()\nplt.show()","46ee68bc":"figure,axis = plt.subplots(nrows=1,ncols=2,figsize=(12,12))\n\nE_IMG = cv2.imread(V_Img[\"PNG\"][1])\nC_IMG = cv2.Canny(E_IMG,10,85)\n\naxis[0].imshow(C_IMG)\naxis[1].imshow(E_IMG)","dbf6d6c4":"figure,axis = plt.subplots(nrows=1,ncols=2,figsize=(12,12))\n\nE_IMG = cv2.imread(V_Img[\"PNG\"][100])\nC_IMG = cv2.Canny(E_IMG,10,85)\n\naxis[0].imshow(C_IMG)\naxis[1].imshow(E_IMG)","406944ba":"figure,axis = plt.subplots(nrows=1,ncols=2,figsize=(12,12))\n\nE_IMG = cv2.imread(V_Img[\"PNG\"][147])\nC_IMG = cv2.Canny(E_IMG,10,85)\n\naxis[0].imshow(C_IMG)\naxis[1].imshow(E_IMG)","2a7e9250":"figure,axis = plt.subplots(nrows=1,ncols=2,figsize=(12,12))\n\nE_IMG = cv2.imread(V_Img[\"PNG\"][47])\n_,Threshold_I = cv2.threshold(E_IMG,90,255,cv2.THRESH_TOZERO_INV)\n\n\naxis[0].imshow(Threshold_I)\naxis[1].imshow(E_IMG)","6af40fc0":"figure,axis = plt.subplots(nrows=1,ncols=3,figsize=(12,12))\n\nE_IMG = cv2.imread(V_Img[\"PNG\"][47])\n_,Threshold_I = cv2.threshold(E_IMG,90,255,cv2.THRESH_TOZERO_INV)\nC_IMG = cv2.Canny(Threshold_I,90,450)\ncontours,_ = cv2.findContours(C_IMG,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\nDraw_Img = cv2.drawContours(E_IMG,contours,-1,(255,0,0),1)\n\n\naxis[0].imshow(Threshold_I)\naxis[1].imshow(C_IMG)\naxis[2].imshow(E_IMG)","3c32f03c":"figure,axis = plt.subplots(nrows=1,ncols=3,figsize=(12,12))\n\nE_IMG = cv2.imread(V_Img[\"PNG\"][4])\n_,Threshold_I = cv2.threshold(E_IMG,90,255,cv2.THRESH_TOZERO_INV)\nC_IMG = cv2.Canny(Threshold_I,90,450)\ncontours,_ = cv2.findContours(C_IMG,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\nDraw_Img = cv2.drawContours(E_IMG,contours,-1,(255,0,0),1)\n\nfor cnt in contours:\n    x,y,w,h = cv2.boundingRect(cnt)\n    cv2.rectangle(Draw_Img,(x,y),(x+w,y+h),(0,255,0),1)\n\naxis[0].imshow(Threshold_I)\naxis[1].imshow(C_IMG)\naxis[2].imshow(E_IMG)","13b373eb":"figure,axis = plt.subplots(nrows=5,ncols=5,figsize=(11,11))\n\nfor In_Image,sub in enumerate(axis.flat):\n    Im_Exp = V_Img[\"PNG\"][In_Image]\n    Exp_Im = cv2.imread(Im_Exp)\n    Exp_Im = cv2.cvtColor(Exp_Im,cv2.COLOR_BGR2RGB)\n    _,Thre_Img = cv2.threshold(Exp_Im,100,255,cv2.THRESH_TOZERO_INV)\n    C_IMG = cv2.Canny(Thre_Img,90,450)\n    contours,_ = cv2.findContours(C_IMG,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\n    Draw_Img = cv2.drawContours(Exp_Im,contours,-1,(255,0,0),1)\n    for cnt in contours:\n        x,y,w,h = cv2.boundingRect(cnt)\n        cv2.rectangle(Draw_Img,(x,y),(x+w,y+h),(0,255,0),1)\n        \n    sub.set_xlabel(Exp_Im.shape)\n    sub.set_ylabel(Exp_Im.size)\n    sub.set_title(V_Img[\"CATEGORY\"][In_Image])\n    sub.imshow(Exp_Im)\nplt.tight_layout()\nplt.show()","1b8a26df":"Train_IMG_Generator = ImageDataGenerator(rescale=1.\/255,\n                                        rotation_range=25,\n                                        shear_range=0.2,\n                                        zoom_range=0.1,\n                                        brightness_range=[0.2,0.8],\n                                        horizontal_flip=True,\n                                        validation_split=0.1)","d3a2d2ad":"Test_Image_Generator = ImageDataGenerator(rescale=1.\/255)","1b1027c2":"Example_Image = Main_Data[\"PNG\"][2]\nLoad_Image = image.load_img(Example_Image,target_size=(64,64))\nArray_Image = image.img_to_array(Load_Image)\nArray_Image = Array_Image.reshape((1,)+Array_Image.shape)\n\ni = 0\n\nfor batch in Train_IMG_Generator.flow(Array_Image,batch_size=32):\n    plt.figure(i)\n    Image = plt.imshow(image.img_to_array(batch[0]))\n    i += 1\n    if i % 4 == 0:\n        break\nplt.show()","1d7ae215":"Train_Set = Train_IMG_Generator.flow_from_dataframe(dataframe=Main_Data,\n                                                   x_col=\"PNG\",\n                                                   y_col=\"CATEGORY\",\n                                                   color_mode=\"rgb\",\n                                                    target_size=(64,64),\n                                                   class_mode=\"binary\",\n                                                   subset=\"training\")","e1eb6d84":"Validaiton_Set = Train_IMG_Generator.flow_from_dataframe(dataframe=Main_Data,\n                                                   x_col=\"PNG\",\n                                                   y_col=\"CATEGORY\",\n                                                   color_mode=\"rgb\",\n                                                    target_size=(64,64),\n                                                   class_mode=\"binary\",\n                                                   subset=\"validation\")","385fa589":"Test_Set = Test_Image_Generator.flow_from_dataframe(dataframe=Main_Data,\n                                                   x_col=\"PNG\",\n                                                   y_col=\"CATEGORY\",\n                                                   color_mode=\"rgb\",\n                                                    target_size=(64,64),\n                                                   class_mode=\"binary\",\n                                                   shuffle=False)","4484a07a":"print(\"TRAIN: \")\nprint(Train_Set.class_indices)\nprint(Train_Set.classes[0:5])\nprint(Train_Set.image_shape)\nprint(\"---\"*20)\nprint(\"VALIDATION: \")\nprint(Validaiton_Set.class_indices)\nprint(Validaiton_Set.classes[0:5])\nprint(Validaiton_Set.image_shape)\nprint(\"---\"*20)\nprint(\"TEST: \")\nprint(Test_Set.class_indices)\nprint(Test_Set.classes[0:5])\nprint(Test_Set.image_shape)","cc15b65e":"Model = Sequential()\n\nModel.add(SeparableConv2D(12,(3,3),activation=\"relu\",\n                 input_shape=(64,64,3)))\nModel.add(BatchNormalization())\nModel.add(MaxPooling2D((2,2)))\n\n#\nModel.add(SeparableConv2D(24,(3,3),\n                 activation=\"relu\",padding=\"same\"))\nModel.add(Dropout(0.2))\nModel.add(MaxPooling2D((2,2)))\n\n\n#\nModel.add(TimeDistributed(Flatten()))\nModel.add(Bidirectional(LSTM(32,\n                                  return_sequences=True,\n                                  dropout=0.5,\n                                  recurrent_dropout=0.5)))\nModel.add(Bidirectional(GRU(32,\n                                  return_sequences=True,\n                                  dropout=0.5,\n                                  recurrent_dropout=0.5)))\n\n#\nModel.add(Flatten())\nModel.add(Dense(256,activation=\"relu\"))\nModel.add(Dropout(0.5))\nModel.add(Dense(1,activation=\"sigmoid\"))","f4780bf6":"print(Model.summary())","38f985cb":"Call_Back = tf.keras.callbacks.EarlyStopping(monitor=\"loss\",patience=3,mode=\"min\")","37bd76d1":"Model.compile(optimizer=\"adam\",loss=\"binary_crossentropy\",metrics=[\"accuracy\"])","82db2651":"CNN_Model = Model.fit(Train_Set,\n                      validation_data=Validaiton_Set,\n                      callbacks=Call_Back,\n                      epochs=50)","8d09e434":"Model_Results = Model.evaluate(Test_Set)\nprint(\"LOSS:  \" + \"%.4f\" % Model_Results[0])\nprint(\"ACCURACY:  \" + \"%.2f\" % Model_Results[1])","3dee1718":"Model.save(\".\/Last_Model\")","5e402f6a":"Model.save(\"Prediction_Model.h5\")","4cb0d293":"Model.save_weights(\"Model_Weights.h5\")","66f6e218":"Grap_Data = pd.DataFrame(CNN_Model.history)\nGrap_Data.plot()","170f3738":"plt.plot(CNN_Model.history[\"accuracy\"])\nplt.plot(CNN_Model.history[\"val_accuracy\"])\nplt.ylabel(\"ACCURACY\")\nplt.legend()\nplt.show()","bfd589a7":"plt.plot(CNN_Model.history[\"loss\"])\nplt.plot(CNN_Model.history[\"val_loss\"])\nplt.ylabel(\"LOSS\")\nplt.legend()\nplt.show()","16dba71f":"Test_Prediction = Model.predict(Test_Set)\nTest_Prediction_Class = Model.predict_classes(Test_Set)","b9c101bb":"print(Test_Prediction)","82b3c371":"Test_Prediction = Test_Prediction.argmax(axis=-1)","13018b29":"print(Test_Prediction)","72f80d66":"print(Test_Prediction_Class)","43ebc9b2":"fig, axes = plt.subplots(nrows=5,\n                         ncols=5,\n                         figsize=(20, 20),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(Main_Data[\"PNG\"].iloc[i]))\n    ax.set_title(f\"PREDICTION:{Test_Prediction_Class[i]}\")\n    ax.set_xlabel(Main_Data[\"CATEGORY\"].iloc[i])\nplt.tight_layout()\nplt.show()","b7805cb1":"v_img = \"..\/input\/vehicle-detection-image-set\/data\/vehicles\/1.png\"","f5884576":"non_v = \"..\/input\/vehicle-detection-image-set\/data\/non-vehicles\/extra1039.png\"","deb7b46e":"def searching_vehicle(img):\n    Main_Img = cv2.imread(img)\n    Array_Cr = np.asarray(Main_Img)\n    Array_Cr = Array_Cr.reshape(1,Array_Cr.shape[0],Array_Cr.shape[1],Array_Cr.shape[2])\n    heating = Model.predict_classes(Array_Cr)\n    \n    if heating[0][0] == 1:\n        \n        canny_Im = cv2.Canny(Main_Img,90,450)\n        contours,_ = cv2.findContours(canny_Im,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\n        Draw_Img = cv2.drawContours(Main_Img,contours,-1,(255,0,0),1)\n        plt.imshow(Draw_Img)\n        \n    elif heating[0][0] == 0:\n        print(\"NO VEHICLE\")","49945bb5":"searching_vehicle(v_img)","7ceed528":"searching_vehicle(non_v)","61df4b5a":"#### SPECIAL PREDICTION","6e74139c":"# VISUALIZATION","332fba6d":"#### REPLACING VALUE NAME","e89bc988":"#### STRUCTURE","8ebcc040":"* VEHICLE --> 1\n* NO VEHICLE --> 0","07228a9d":"#### SHUFFLING","1d3d9bc5":"# IMAGE GENERATOR PROCESS","708f73a8":"# PACKAGES AND LIBRARIES","cc60f59f":"#### TO SERIES","d0556dc0":"#### APPLYING","ffaab94f":"# MODEL","b78553b2":"#### MAIN PATH","ea0afe5d":"#### CONTROL","9c003f8a":"#### PREDICTION","0f7c3fe6":"# HISTORY","395c2da9":"#### Vehicle Detection Image Set\n\n* This dataset is for machine learning process and computer vision steps.\n\nTwo labels:\n\n* Non-Vehicles\n* Vehicles\n\n17760 images","2148fbd5":"#### TO DATAFRAME","d54f5dd0":"# PATH AND LABEL PROCESS","a62bc19d":"#### PNG LABELS","473e89bb":"#### PNG PATH","df5495b5":"#### GENERATOR STRUCTURE","9176f6d2":"#### HOW TO LOOK BY GENERATOR"}}