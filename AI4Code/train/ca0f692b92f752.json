{"cell_type":{"20dba578":"code","744e3228":"code","b212498c":"code","ce54da1f":"code","5e0042d0":"code","7ab846cc":"code","b43acfbf":"code","b4cd9ef6":"code","ccee9948":"code","ecc90891":"code","60ec1a1e":"code","aceef920":"code","78206f7b":"code","10eca5c6":"markdown","b1acc468":"markdown","36683835":"markdown","9e98a94e":"markdown","0ccfb161":"markdown","57495592":"markdown","eec5dd7c":"markdown","63369b92":"markdown","d22204d6":"markdown","bc9c4c31":"markdown","a68c7542":"markdown"},"source":{"20dba578":"import pandas as pd \nimport numpy as np \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score","744e3228":"sonar_data = '..\/input\/mines-vs-rocks\/sonar.all-data.csv'\nsonar = pd.read_csv(sonar_data, header = None)\nsonar.shape","b212498c":"\nsonar[60].value_counts()","ce54da1f":"sonar.groupby(60).mean()","5e0042d0":"X = sonar.drop(columns = 60,  axis = 1)\ny = sonar[60]","7ab846cc":"print(X.head())\nprint(y.head())","b43acfbf":"X_train, X_test, y_train, y_test = train_test_split(X, y , test_size= 0.1, stratify= y, random_state= 1)","b4cd9ef6":"print(X.shape, X_train.shape, X_test.shape)","ccee9948":"model = LogisticRegression()","ecc90891":"model.fit(X_train, y_train)","60ec1a1e":"X_train_prediction = model.predict(X_train)\ntraining_data_accuracy = accuracy_score(X_train_prediction, y_train)\nprint('Accuracy on training data: ', training_data_accuracy)","aceef920":"X_test_prediction = model.predict(X_test)\ntest_data_accuracy = accuracy_score(X_test_prediction, y_test)\nprint('Accuracy on test data: ', test_data_accuracy)","78206f7b":"# Taking a random row from csv file as an imput\ninput_data = (0.0206,0.0132,0.0533,0.0569,0.0647,0.1432,0.1344,0.2041,0.1571,0.1573,0.2327,0.1785,0.1507,0.1916,0.2061,0.2307,0.2360,0.1299,0.3812,0.5858,0.4497,0.4876,1.0000,0.8675,0.4718,0.5341,0.6197,0.7143,0.5605,0.3728,0.2481,0.1921,0.1386,0.3325,0.2883,0.3228,0.2607,0.2040,0.2396,0.1319,0.0683,0.0334,0.0716,0.0976,0.0787,0.0522,0.0500,0.0231,0.0221,0.0144,0.0307,0.0386,0.0147,0.0018,0.0100,0.0096,0.0077,0.0180,0.0109,0.0070)\n\n# Generating 60 input random numbers as data that may correspond to an object rock or mine\nfrom random import uniform\nrandom_values = []\n\nfor i in range(60):\n    num = uniform(0.010, 0.5) # taking the average range from the numbers in the dataset\n    random_values.append(num)\n\n# Changind the input_data into a numpy array\n#inp_data_array = np.array(input_data)\n#input_data_reshaped = imp_data_array.reshape(1, -1)\n\ninput_val = np.array(random_values)\n\ninp_reshape= input_val.reshape(1, -1)\n\nprediction = model.predict(inp_reshape)\n\nprint(prediction)\n\nif prediction[0] == 'R':\n    print('The object is a rock.')\nelse:\n    print('The object is a mine.')\n","10eca5c6":"## Model evaluation, accurary on test data","b1acc468":"## Training and test the data","36683835":"\u2022 This notebook still need some adjustments, but as a simple prediction it's possible check that the accuracy_score is about 76%, not bad for only one kind of model prediction.\n\n\u2022 Credits : [Siddhardhan](https:\/\/www.youtube.com\/channel\/UCG04dVOTmbRYPY1wvshBVDQ)","9e98a94e":"## Model evaluation, accurary on training data","0ccfb161":"## Importing dependencies","57495592":"## Data collecting and processing","eec5dd7c":"## Model training with Logistic Regression","63369b92":"## Making a predictive system for sonar data\nEach time you run the code below, will generate random row numbers that can be read as piece of a data, and check if the prediction for this number correspond to a 'R' - rock or 'M' - mine","d22204d6":"## Counting only the last column with values M(mines) and R(rocks)","bc9c4c31":"## Training the Logistic Regression model with training data","a68c7542":"## Separating data and labels"}}