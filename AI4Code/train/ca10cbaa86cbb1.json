{"cell_type":{"55671d09":"code","eda2bae0":"code","cf03cf35":"code","53ef9845":"code","99564100":"code","97cf6cec":"code","835d9896":"code","25c1b985":"code","a78c98c3":"code","e0f21940":"code","f11cb87d":"code","80261192":"code","ab44fa61":"code","65e2e3a3":"code","d9a1b1dc":"code","7eec351e":"code","91771524":"code","83c4a10e":"code","fd614df5":"code","586e12e6":"code","4ab7e94e":"markdown","701c82bb":"markdown","89a83f41":"markdown","61fd274c":"markdown","356d898b":"markdown","ac99e217":"markdown"},"source":{"55671d09":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","eda2bae0":"import pandas as pd\nimport numpy as np\nimport math\nimport re\nfrom scipy.sparse import csr_matrix\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom surprise import Reader, Dataset, SVD\nfrom surprise.model_selection import KFold\nfrom surprise.model_selection.validation import cross_validate","cf03cf35":"data = pd.read_csv(\n    '\/kaggle\/input\/netflix-prize-data\/combined_data_1.txt',\n    header=None,\n    names=['user_id', 'rating'],\n    usecols=[0,1],\n    dtype={'rating': float}\n)","53ef9845":"data.head()","99564100":"movie_count = data.isnull().sum()[1]\n\nprint(f\"There are {movie_count} movies in the dataset.\")","97cf6cec":"user_count = data['user_id'].nunique() - movie_count\n\nprint(f\"There are {user_count} users in the dataset.\")","835d9896":"rating_count = data['user_id'].count() - movie_count\n\nprint(f\"There are {rating_count} ratings in the dataset.\")","25c1b985":"ratings = data.groupby('rating')['rating'].agg(['count'])\nax = ratings.plot(kind='barh', figsize = (15,10))","a78c98c3":"df_nan = pd.DataFrame(pd.isnull(data.rating))\ndf_nan = df_nan[df_nan['rating'] == True]\ndf_nan = df_nan.reset_index()\n\nmovie_np = []\nmovie_id = 1\n\nfor i,j in zip(df_nan['index'][1:], df_nan['index'][:-1]):\n    temp = np.full((1, i-j-1), movie_id)\n    movie_np = np.append(movie_np, temp)\n    movie_id += 1\n\n# Account for last record and corresponding length\nlast_record = np.full((1, len(data) - df_nan.iloc[-1, 0] - 1), movie_id)\nmovie_np = np.append(movie_np, last_record)","e0f21940":"data = data[pd.notnull(data['rating'])]\n\ndata['movie_id'] = movie_np.astype(int)\ndata['user_id'] = data['user_id'].astype(int)","f11cb87d":"USER_MIN_REVIEWS = 100\nMOVIE_MIN_REVIEWS = 5000","80261192":"f = ['count','mean']\n\ndf_movie_summary = data.groupby('movie_id')['rating'].agg(f)\ndf_movie_summary.index = df_movie_summary.index.map(int)\nmovie_benchmark = MOVIE_MIN_REVIEWS # round(df_movie_summary['count'].quantile(0.8),0)\ndrop_movie_list = df_movie_summary[df_movie_summary['count'] < movie_benchmark].index\n\n# print('Movie minimum times of review: {}'.format(movie_benchmark))\n\ndf_cust_summary = data.groupby('user_id')['rating'].agg(f)\ndf_cust_summary.index = df_cust_summary.index.map(int)\ncust_benchmark = USER_MIN_REVIEWS # round(df_cust_summary['count'].quantile(0.8),0)\ndrop_cust_list = df_cust_summary[df_cust_summary['count'] < cust_benchmark].index\n\n# print('Customer minimum times of review: {}'.format(cust_benchmark))","ab44fa61":"print('Original Shape: {}'.format(data.shape))\ndata = data[~data['movie_id'].isin(drop_movie_list)]\ndata = data[~data['user_id'].isin(drop_cust_list)]\nprint('After Trim Shape: {}'.format(data.shape))","65e2e3a3":"pivot = pd.pivot_table(data, values='rating', index='user_id', columns='movie_id')","d9a1b1dc":"titles = pd.read_csv(\n    '\/kaggle\/input\/netflix-prize-data\/movie_titles.csv',\n    encoding='ISO-8859-1',\n    header=None,\n    names=['movie_id', 'year', 'name'],\n    dtype={'year': 'Int64'}\n)\ntitles.set_index('movie_id', inplace=True)","7eec351e":"titles.head()","91771524":"# data = data[:100000]","83c4a10e":"reader = Reader()\n\n# get just top 100K rows for faster run time\ndataset = Dataset.load_from_df(\n    data[['user_id', 'movie_id', 'rating']][:100000],\n    reader\n)\n\n# kf = KFold(n_splits=3)\n# kf.split(data)\n\nsvd = SVD()\ncross_validate(svd, dataset, measures=['RMSE', 'MAE'])","fd614df5":"df_785314 = data[(data['user_id'] == 785314) & (data['rating'] == 5)]\ndf_785314 = df_785314.set_index('movie_id')\ndf_785314 = df_785314.join(titles)['name']\ndf_785314.head()","586e12e6":"user_785314 = titles.copy()\nuser_785314 = user_785314.reset_index()\nuser_785314 = user_785314[~user_785314['movie_id'].isin(drop_movie_list)]\n\n# getting full dataset\ndataset = Dataset.load_from_df(\n    data[['user_id', 'movie_id', 'rating']][:10000000],\n    reader\n)\n\ntrainset = dataset.build_full_trainset()\nsvd.fit(trainset)\n\nuser_785314['estimate_score'] = user_785314['movie_id'].apply(lambda x: svd.predict(785314, x).est)\n\nuser_785314 = user_785314.drop('movie_id', axis=1)\n\nuser_785314 = user_785314.sort_values('estimate_score', ascending=False)\nuser_785314.head()","4ab7e94e":"# Data","701c82bb":"# Data mapping","89a83f41":"# Data selection","61fd274c":"# Data exploration","356d898b":"# Recommendations","ac99e217":"# Data cleaning"}}