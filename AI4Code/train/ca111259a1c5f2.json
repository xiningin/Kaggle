{"cell_type":{"7fc336c0":"code","85671eac":"code","b5e5985f":"code","eddfdb24":"code","c87ff6f6":"code","43ecc5ad":"code","e9d7bea7":"code","8cbad108":"code","7f56b893":"code","a6f498f7":"code","11c0e627":"code","4da43190":"code","9be621fb":"code","e5860385":"code","bcc2f9ca":"code","bb2ca8e8":"code","76d5360b":"code","b09b0c83":"code","7c977df2":"code","76bd3a5b":"code","43499dfe":"code","34327d02":"code","e354cdfd":"code","bc103e3f":"code","16841993":"code","39682442":"code","852b9580":"code","bccbe121":"code","4a971859":"code","39a6b1a0":"code","067a0155":"code","6fa504b6":"code","831c3c69":"code","e64dd290":"code","d0599721":"code","9ccf9c48":"code","be2f0303":"code","20f59d40":"code","888ba480":"markdown","521110df":"markdown","f0254993":"markdown","f669ef61":"markdown","1f5fbeb1":"markdown","506b679f":"markdown","b42afca6":"markdown","a665c526":"markdown","c386e331":"markdown","fc789940":"markdown","94059d51":"markdown","384c9186":"markdown","3b6042b4":"markdown","546865e9":"markdown","1f049cd5":"markdown","14ac67da":"markdown","c0b0c105":"markdown","d9f4a6d7":"markdown","ef8f6d02":"markdown","83e7a5da":"markdown","d67b36e6":"markdown","0d190ab0":"markdown","34522e9c":"markdown","df089d0d":"markdown","0f520e73":"markdown","816183e1":"markdown","737493d2":"markdown"},"source":{"7fc336c0":"from IPython.display import Image\nImage(filename='..\/input\/cover-pic\/a04bdc00-571f-4f6d-9a32-3b5b4031b34d.jpeg', width=\"1100\", height='50')","85671eac":"!pip uninstall -y typing\n!pip3 install flair","b5e5985f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\nimport seaborn as sns\nimport plotly.express as px\nfrom wordcloud import WordCloud,STOPWORDS\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom flair.data import Sentence\nfrom flair.models import TextClassifier","eddfdb24":"url='..\/input\/pfizer-vaccine-tweets\/vaccination_tweets.csv'\ndf=pd.read_csv(url)\ndf.head()","c87ff6f6":"df.shape","43ecc5ad":"list(df.columns)","e9d7bea7":"df.isnull().sum()","8cbad108":"def plot_count(feature, title, df, size=1, ordered=True):\n    f, ax = plt.subplots(1,1, figsize=(4*size,4))\n    total = float(len(df))\n    if ordered:\n        g = sns.countplot(df[feature], order = df[feature].value_counts().index[:20], palette='Set3')\n    else:\n        g = sns.countplot(df[feature], palette='Set3')\n    g.set_title(\"Number and percentage of {}\".format(title))\n    if(size > 2):\n        plt.xticks(rotation=90, size=8)\n    for p in ax.patches:\n        height = p.get_height()\n        ax.text(p.get_x()+p.get_width()\/2.,\n                height,\n                '{:1.2f}%'.format(100*height\/total),\n                ha=\"center\") \n    plt.show()  ","7f56b893":"plot_count(\"user_location\", \"User location\", df,4)\nplt.show()","a6f498f7":"plot_count(\"source\", \"Source\", df,4)","11c0e627":"df_date = df.copy()\ndf_date['datedt'] = pd.to_datetime(df_date['date'])\ndf_date['year'] = df_date['datedt'].dt.year\ndf_date['month'] = df_date['datedt'].dt.month\ndf_date['day'] = df_date['datedt'].dt.day\ndf_date['dayofweek'] = df_date['datedt'].dt.dayofweek\ndf_date['hour'] = df_date['datedt'].dt.hour\ndf_date['minute'] = df_date['datedt'].dt.minute\ndf_date['dayofyear'] = df_date['datedt'].dt.dayofyear\ndf_date['date_only'] = df_date['datedt'].dt.date\ntweets_agg_df = df_date.groupby([\"date_only\"])[\"text\"].count().reset_index()\ntweets_agg_df.columns = [\"date_only\", \"count\"]\ndef plot_time_variation(df, x='date_only', y='count', hue=None, size=1, title=\"\", is_log=False):\n    f, ax = plt.subplots(1,1, figsize=(4*size,3*size))\n    g = sns.lineplot(x=x, y=y, hue=hue, data=df)\n    plt.xticks(rotation=90)\n    if hue:\n        plt.title(f'{y} grouped by {hue} | {title}')\n    else:\n        plt.title(f'{y} | {title}')\n    if(is_log):\n        ax.set(yscale=\"log\")\n    ax.grid(color='black', linestyle='dotted', linewidth=0.75)\n    plt.show()\n    \nplot_time_variation(tweets_agg_df, title=\"Number of tweets \/ day of year\",size=3)","4da43190":"plot_count(\"dayofweek\", \"tweets \/ day of week\", df_date, size=3, ordered=False)","9be621fb":"plot_count(\"dayofyear\", \"tweets \/ day of year\", df_date, size=3, ordered=False)","e5860385":"plot_count(\"date_only\", \"tweets \/ date\", df_date,size=4, ordered=False)","bcc2f9ca":"plot_count(\"hour\", \"tweets \/ hour\", df_date,size=4, ordered=False)","bb2ca8e8":"plot_count(\"minute\", \"tweets \/ minute\", df_date,size=5, ordered=False)","76d5360b":"country_df = pd.read_csv(\"..\/input\/countries-iso-codes\/wikipedia-iso-country-codes.csv\")","b09b0c83":"country_df.columns = [\"country\", \"alpha2\", \"alpha3\", \"numeric\", \"iso\"]","7c977df2":"df['country'] = df['user_location']\ndf = df.merge(country_df, on=\"country\")\ntw_add_df = df.groupby([\"country\", \"iso\", \"alpha3\"])['text'].count().reset_index()\ntw_add_df.columns = [\"country\", \"iso\", \"alpha3\", \"tweets\"]","76bd3a5b":"import plotly.express as px\n\ndef plot_map(dd_df, title):\n    hover_text = []\n    for index, row in dd_df.iterrows():\n        hover_text.append((f\"country: {row['country']}<br>tweets: {row['tweets']}\\\n                          <br>country code: {row['iso']}<br>country alpha3: {row['alpha3']}\"))\n    dd_df['hover_text'] = hover_text\n\n    fig = px.choropleth(dd_df, \n                        locations=\"alpha3\",\n                        hover_name='hover_text',\n                        color=\"tweets\",\n                        projection=\"natural earth\",\n                        color_continuous_scale=px.colors.sequential.Plasma,\n                        width=900, height=700)\n    fig.update_geos(   \n        showcoastlines=True, coastlinecolor=\"DarkBlue\",\n        showland=True, landcolor=\"LightGrey\",\n        showocean=True, oceancolor=\"LightBlue\",\n        showlakes=True, lakecolor=\"Blue\",\n        showrivers=True, rivercolor=\"Blue\",\n        showcountries=True, countrycolor=\"DarkBlue\"\n    )\n    fig.update_layout(title = title, geo_scope=\"world\")\n    fig.show()   ","43499dfe":"print(f\"tweets containing country information: {tw_add_df.tweets.sum()}\")\nprint(f\"tweets containing country information; distinct countries: {tw_add_df.country.shape[0]}\")","34327d02":"plot_map(tw_add_df, \"Tweets per country (where country is specified)\")","e354cdfd":"df['user_name'] = df['user_name'].str.lower() \nprint(\" no of tweets from news \", len(df[df['user_name'].str.contains(\"news|radio\")]))\nprint(\" news channels are: \\n\", df[df['user_name'].str.contains(\"news|radio\")]['user_name'].values)","bc103e3f":"df.drop(df[df['user_name'].str.contains(\"news|radio\")].index, inplace=True)","16841993":"df.loc[:10]['text'].values","39682442":"df.source.value_counts()","852b9580":"df_filtered = df[df.source.isin(['Twitter for iPhone', 'Twitter for Android', 'Twitter for iPad'])].copy()","bccbe121":"def flair_sentiment(texts, classifier):\n    sentences = [Sentence(text) for text in texts]\n    classifier.predict(sentences, mini_batch_size=1024)\n    result_ = [-1*sent.labels[0].score if sent.labels[0].value == 'NEGATIVE'\\\n               else sent.labels[0].score \\\n               for sent in sentences]\n    return result_\n\nclassifier = TextClassifier.load('sentiment-fast')","4a971859":"df_filtered['sentiments'] = flair_sentiment(df_filtered.text, classifier) \ndf_filtered['text'] = df_filtered['text'].str.lower()","39a6b1a0":"df_filtered.user_location.value_counts()","067a0155":" def showWordCloud(data):\n    words = ' '.join(data)\n    STOPWORDS.update([\"https\",\"t\",\"co\",\"u\",\"s\",\"rt\", \"amp\",\"vaccine\", 'covid'])    \n    cleaned_word = \" \".join([word for word in words.split()])\n    wordcloud = WordCloud(stopwords = STOPWORDS,\n                         background_color = 'black',\n                         width = 2500,\n                         height = 2500\n                         ).generate(cleaned_word)\n    plt.figure(1,figsize = (13,13))\n    plt.imshow(wordcloud)\n    plt.axis('off')\n    plt.show()\n\nshowWordCloud(df_filtered.loc[df_filtered.user_location == 'United Kingdom']['text'])","6fa504b6":"print(\"Positive tweets: \", (df_filtered.loc[df_filtered.user_location == 'United Kingdom']['sentiments']>0).sum())\nprint(\"Negative tweets: \", (df_filtered.loc[df_filtered.user_location == 'United Kingdom']['sentiments']<0).sum())","831c3c69":" def showWordCloud(data):\n    words = ' '.join(data)\n    STOPWORDS.update([\"https\",\"t\",\"co\",\"u\",\"s\",\"rt\", \"amp\",\"vaccine\",\"pfizerbiontech\", 'dose', 'covid19','pfizer', 'canada'])    \n    cleaned_word = \" \".join([word for word in words.split()])\n    wordcloud = WordCloud(stopwords = STOPWORDS,\n                         background_color = 'black',\n                         width = 2500,\n                         height = 2500\n                         ).generate(cleaned_word)\n    plt.figure(1,figsize = (13,13))\n    plt.imshow(wordcloud)\n    plt.axis('off')\n    plt.show()\n\nshowWordCloud(df_filtered.loc[df_filtered.user_location == 'Canada']['text'])","e64dd290":"print(\"Positive tweets: \", (df_filtered.loc[df_filtered.user_location == 'Canada']['sentiments']>0).sum())\nprint(\"Negative tweets: \", (df_filtered.loc[df_filtered.user_location == 'Canada']['sentiments']<0).sum())","d0599721":" def showWordCloud(data):\n    words = ' '.join(data)\n    STOPWORDS.update([\"https\",\"t\",\"co\",\"u\",\"s\",\"rt\", \"amp\",\"vaccine\",\"pfizerbiontech\", 'dose', 'covid19','pfizer'])    \n    cleaned_word = \" \".join([word for word in words.split()])\n    wordcloud = WordCloud(stopwords = STOPWORDS,\n                         background_color = 'black',\n                         width = 2500,\n                         height = 2500\n                         ).generate(cleaned_word)\n    plt.figure(1,figsize = (13,13))\n    plt.imshow(wordcloud)\n    plt.axis('off')\n    plt.show()\n\nshowWordCloud(df_filtered.loc[df_filtered.user_location == 'Ireland']['text'])","9ccf9c48":"print(\"Positive tweets: \", (df_filtered.loc[df_filtered.user_location == 'Ireland']['sentiments']>0).sum())\nprint(\"Negative tweets: \", (df_filtered.loc[df_filtered.user_location == 'Ireland']['sentiments']<0).sum())","be2f0303":" def showWordCloud(data):\n    words = ' '.join(data)\n    STOPWORDS.update([\"https\",\"t\",\"co\",\"u\",\"s\",\"rt\", \"amp\",\"vaccine\",\"pfizerbiontech\", 'dose', 'covid19','pfizer'])    \n    cleaned_word = \" \".join([word for word in words.split()])\n    wordcloud = WordCloud(stopwords = STOPWORDS,\n                         background_color = 'black',\n                         width = 2500,\n                         height = 2500\n                         ).generate(cleaned_word)\n    plt.figure(1,figsize = (13,13))\n    plt.imshow(wordcloud)\n    plt.axis('off')\n    plt.show()\n\nshowWordCloud(df_filtered.loc[df_filtered.user_location == 'India']['text'])","20f59d40":"print(\"Positive tweets: \", (df_filtered.loc[df_filtered.user_location == 'India']['sentiments']>0).sum())\nprint(\"Negative tweets: \", (df_filtered.loc[df_filtered.user_location == 'India']['sentiments']<0).sum())","888ba480":"> UK is giving a neutral emotions, probably due to uncertainities on allergic reactions and mutations in Corona","521110df":"> Ireland also optimistic on Pfizer BioNtech","f0254993":"# 3.4 India","f669ef61":"> As expected twitter apps for mobile and web has higher percentage","1f5fbeb1":"# 2.1 Find news channel tweets","506b679f":"# Notebook Objective \n    \nStudy the subjects of recent tweets about the vaccine made in collaboration by Pfizer and BioNTech, perform various NLP tasks on this data source.\n\n* Basic analysis of tweets and visualisations to understand data\n* Tweets can be manipulated and this notebook tries to find out genuinity of them with few assumptions\n* Analyse tweets on pfizer from different countries (User Locations)\n    \nThank you for the wonderful twitter scraped dataset https:\/\/www.kaggle.com\/gpreda\/pfizer-vaccine-tweets\n\nAcknowledgements:\n* http:\/\/www.kaggle.com\/ahmedterry\/pfizer-tweets-analysis-nlp-sentiment-analysis\n* https:\/\/www.kaggle.com\/gpreda\/explore-pfizer-vaccine-tweets","b42afca6":"> Canada is more excited about Pfizer vaccine :)","a665c526":"# 2. Filter Genuine tweets\n\nFew assumptions:\n* \"User Name\" field having 'news' keywords has high probability of news channel\n*  filter the tweets from mobile phones which will have high probability to become genuine\n","c386e331":"# 3.1 United Kingdom","fc789940":"> Lets consider user tweets from mobile which has high probability to be genuine \n* 'Twitter for iPhone'', \n* 'Twitter for Android', \n* 'Twitter for iPad","94059d51":"# 3.2 Canada","384c9186":"# 1.1 User Location","3b6042b4":"# Table of Content:\n\n1.    Basic Visualisations to understand data\n2.    Filter Genuine tweets  \n2.1.  Find news channel tweets <br> \n2.2.  Find source patterns\n\n3. Analyse tweets on pfizer from different countries (User Locations)","546865e9":"# 1.2 Tweet Source","1f049cd5":"# 1.3 Time Data","14ac67da":"# Import Data & Libraries","c0b0c105":"# Basic Dataset Analysis","d9f4a6d7":"# 3. Analyse tweets on pfizer from different countries (User Locations)","ef8f6d02":"# 1. Basic Visualisations for understanding data","83e7a5da":"> India also optimistic on Pfizer BioNtech","d67b36e6":"> London England, UK has higher percentage","0d190ab0":"# 3.3 Ireland","34522e9c":"# Conclusions\n\n* We tried to filter more genuine tweets from the bag and analyzed sentiments and key topics in the tweets. We analysed tweets from UK, Canada, Ireland and India who are very optimistic about pfizer vaccination\n* Analysis of tweets from various countries give us more generic view towards Pfizer vaccine\n\n**Please upvote and comment which will motivate me to walk the untravelled road**","df089d0d":"![](http:\/\/)> text is present in all tweets. Lets don't remove any records","0f520e73":"# 2.2 Find source patterns","816183e1":"# 1.4 User Location","737493d2":"![](http:\/\/)> Dropped 176 tweets from media"}}