{"cell_type":{"f99afb0e":"code","4b4be4ea":"code","c3773df3":"code","0928d260":"code","6b04cd2f":"code","48ace5ed":"code","b0cfd191":"code","e5876e20":"code","e92c4a82":"code","0fc287a5":"code","835c3c27":"code","fafe0120":"code","907751ca":"code","136502ee":"code","909ccb66":"code","0aef3bbe":"code","207ff2d2":"code","40713e6d":"code","6f5a4e06":"code","f8eb8f92":"code","a9daae32":"code","9b316bcf":"code","ba23ef8b":"code","8456dd04":"code","8570d6eb":"code","b9b34242":"code","8c1c8992":"code","0b27595c":"code","8143bf82":"code","dbb085d1":"code","135bb65a":"code","7697be60":"code","0e44f950":"code","c17ca9e0":"code","ddca4b86":"code","710c3d43":"code","4f40af61":"code","ddd4a3be":"code","3423826c":"code","f6f1848e":"code","0af69112":"code","19242c5b":"code","c206f556":"code","ed2509a0":"code","0c0fae7f":"code","1a9dcb99":"code","39aa94e8":"code","6ed0f058":"code","ea109ece":"code","9d2db975":"code","23f299dc":"code","23cd5df6":"code","3a9ceea4":"code","ed532680":"code","b30cb438":"markdown","8773ee8d":"markdown","3f389570":"markdown","b384c074":"markdown","dca888b6":"markdown","4fc7915c":"markdown","1e570bcb":"markdown","b4a123a8":"markdown","e232773e":"markdown","8bc9402d":"markdown","4417361b":"markdown","21469eba":"markdown","6cf01763":"markdown","a30012a7":"markdown","ab492ca9":"markdown","01e3072b":"markdown","a16ed862":"markdown","cdf228e4":"markdown","fefe23ab":"markdown","463f65f2":"markdown","f2b35a79":"markdown","f01243d1":"markdown","16d51eb6":"markdown","5a98e618":"markdown","239958d5":"markdown","5f9e5efb":"markdown","1dc23b34":"markdown","747be684":"markdown"},"source":{"f99afb0e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport seaborn as sns\nimport datetime\nfrom kaggle.competitions import nflrush\nimport tqdm\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import StandardScaler\nimport keras\n\nsns.set_style('darkgrid')\nmpl.rcParams['figure.figsize'] = [15,10]","4b4be4ea":"env = nflrush.make_env()","c3773df3":"train = pd.read_csv('..\/input\/nfl-big-data-bowl-2020\/train.csv', dtype={'WindSpeed': 'object'})","0928d260":"train.head()","6b04cd2f":"train['PlayId'].value_counts()","48ace5ed":"train['Yards'].describe()","b0cfd191":"ax = sns.distplot(train['Yards'])\nplt.vlines(train['Yards'].mean(), plt.ylim()[0], plt.ylim()[1], color='r', linestyles='--');\nplt.text(train['Yards'].mean()-8, plt.ylim()[1]-0.005, \"Mean yards travaled\", size=15, color='r')\nplt.xlabel(\"\")\nplt.title(\"Yards travaled distribution\", size=20);","e5876e20":"cat_features = []\nfor col in train.columns:\n    if train[col].dtype =='object':\n        cat_features.append((col, len(train[col].unique())))","e92c4a82":"off_form = train['OffenseFormation'].unique()\ntrain['OffenseFormation'].value_counts()","0fc287a5":"train = pd.concat([train.drop(['OffenseFormation'], axis=1), pd.get_dummies(train['OffenseFormation'], prefix='Formation')], axis=1)\ndummy_col = train.columns","835c3c27":"train['GameClock'].value_counts()","fafe0120":"def strtoseconds(txt):\n    txt = txt.split(':')\n    ans = int(txt[0])*60 + int(txt[1]) + int(txt[2])\/60\n    return ans","907751ca":"train['GameClock'] = train['GameClock'].apply(strtoseconds)","136502ee":"sns.distplot(train['GameClock'])","909ccb66":"train['PlayerHeight']","0aef3bbe":"train['PlayerHeight'] = train['PlayerHeight'].apply(lambda x: 12*int(x.split('-')[0])+int(x.split('-')[1]))","207ff2d2":"train['TimeHandoff']","40713e6d":"train['TimeHandoff'] = train['TimeHandoff'].apply(lambda x: datetime.datetime.strptime(x, \"%Y-%m-%dT%H:%M:%S.%fZ\"))\ntrain['TimeSnap'] = train['TimeSnap'].apply(lambda x: datetime.datetime.strptime(x, \"%Y-%m-%dT%H:%M:%S.%fZ\"))","6f5a4e06":"train['TimeDelta'] = train.apply(lambda row: (row['TimeHandoff'] - row['TimeSnap']).total_seconds(), axis=1)","f8eb8f92":"train['PlayerBirthDate'] = train['PlayerBirthDate'].apply(lambda x: datetime.datetime.strptime(x, \"%m\/%d\/%Y\"))","a9daae32":"seconds_in_year = 60*60*24*365.25\ntrain['PlayerAge'] = train.apply(lambda row: (row['TimeHandoff']-row['PlayerBirthDate']).total_seconds()\/seconds_in_year, axis=1)","9b316bcf":"train = train.drop(['TimeHandoff', 'TimeSnap', 'PlayerBirthDate'], axis=1)","ba23ef8b":"train['WindSpeed'].value_counts()","8456dd04":"train['WindSpeed'] = train['WindSpeed'].apply(lambda x: x.lower().replace('mph', '').strip() if not pd.isna(x) else x)","8570d6eb":"train['WindSpeed'].value_counts()","b9b34242":"#let's replace the ones that has x-y by (x+y)\/2\n# and also the ones with x gusts up to y\ntrain['WindSpeed'] = train['WindSpeed'].apply(lambda x: (int(x.split('-')[0])+int(x.split('-')[1]))\/2 if not pd.isna(x) and '-' in x else x)\ntrain['WindSpeed'] = train['WindSpeed'].apply(lambda x: (int(x.split()[0])+int(x.split()[-1]))\/2 if not pd.isna(x) and type(x)!=float and 'gusts up to' in x else x)","8c1c8992":"def str_to_float(txt):\n    try:\n        return float(txt)\n    except:\n        return -1","0b27595c":"train['WindSpeed'] = train['WindSpeed'].apply(str_to_float)","8143bf82":"train['WindDirection'].value_counts()","dbb085d1":"train.drop('WindDirection', axis=1, inplace=True)","135bb65a":"train['PlayDirection'].value_counts()","7697be60":"train['PlayDirection'] = train['PlayDirection'].apply(lambda x: x is 'right')","0e44f950":"train['Team'] = train['Team'].apply(lambda x: x.strip()=='home')","c17ca9e0":"train['GameWeather'].unique()","ddca4b86":"train['GameWeather'] = train['GameWeather'].str.lower()\nindoor = \"indoor\"\ntrain['GameWeather'] = train['GameWeather'].apply(lambda x: indoor if not pd.isna(x) and indoor in x else x)\ntrain['GameWeather'] = train['GameWeather'].apply(lambda x: x.replace('coudy', 'cloudy').replace('clouidy', 'cloudy').replace('party', 'partly') if not pd.isna(x) else x)\ntrain['GameWeather'] = train['GameWeather'].apply(lambda x: x.replace('clear and sunny', 'sunny and clear') if not pd.isna(x) else x)\ntrain['GameWeather'] = train['GameWeather'].apply(lambda x: x.replace('skies', '').replace(\"mostly\", \"\").strip() if not pd.isna(x) else x)","710c3d43":"train['GameWeather'].unique()","4f40af61":"from collections import Counter\nweather_count = Counter()\nfor weather in train['GameWeather']:\n    if pd.isna(weather):\n        continue\n    for word in weather.split():\n        weather_count[word]+=1\n        \nweather_count.most_common()[:15]","ddd4a3be":"def map_weather(txt):\n    ans = 1\n    if pd.isna(txt):\n        return 0\n    if 'partly' in txt:\n        ans*=0.5\n    if 'climate controlled' in txt or 'indoor' in txt:\n        return ans*3\n    if 'sunny' in txt or 'sun' in txt:\n        return ans*2\n    if 'clear' in txt:\n        return ans\n    if 'cloudy' in txt:\n        return -ans\n    if 'rain' in txt or 'rainy' in txt:\n        return -2*ans\n    if 'snow' in txt:\n        return -3*ans\n    return 0","3423826c":"train['GameWeather'] = train['GameWeather'].apply(map_weather)","f6f1848e":"train['IsRusher'] = train['NflId'] == train['NflIdRusher']","0af69112":"train.drop(['NflId', 'NflIdRusher'], axis=1, inplace=True)","19242c5b":"train = train.sort_values(by=['PlayId', 'Team', 'IsRusher']).reset_index()","c206f556":"train.drop(['GameId', 'PlayId', 'index', 'IsRusher', 'Team'], axis=1, inplace=True)","ed2509a0":"cat_features = []\nfor col in train.columns:\n    if train[col].dtype =='object':\n        cat_features.append(col)\n        \ntrain = train.drop(cat_features, axis=1)","0c0fae7f":"train.fillna(-999, inplace=True)","1a9dcb99":"players_col = []\nfor col in train.columns:\n    if train[col][:22].std()!=0:\n        players_col.append(col)","39aa94e8":"X_train = np.array(train[players_col]).reshape(-1, 11*22)","6ed0f058":"play_col = train.drop(players_col+['Yards'], axis=1).columns\nX_play_col = np.zeros(shape=(X_train.shape[0], len(play_col)))\nfor i, col in enumerate(play_col):\n    X_play_col[:, i] = train[col][::22]","ea109ece":"X_train = np.concatenate([X_train, X_play_col], axis=1)\ny_train = np.zeros(shape=(X_train.shape[0], 199))\nfor i,yard in enumerate(train['Yards'][::22]):\n    y_train[i, yard+99:] = np.ones(shape=(1, 100-yard))","9d2db975":"def crps(y_true, y_pred):\n    ans = 0\n    ground_t = y_true.argmax(1)\n    for i, t in enumerate(ground_t):\n        for n in range(-99, 100):\n            h = n>=(t-99)\n            \n            ans+=(y_pred[i][n+99]-h)**2\n            \n    return ans\/(199*len(y_true))","23f299dc":"model = keras.models.Sequential([\n    keras.layers.Dense(units=300, input_shape=[X_train.shape[1]], activation='relu'),\n    keras.layers.BatchNormalization(),\n    keras.layers.Dropout(0.2),\n    keras.layers.Dense(units=256, activation='relu'),\n    keras.layers.BatchNormalization(),\n    keras.layers.Dropout(0.2),\n    keras.layers.Dense(units=199, activation='sigmoid')\n])\n\nmodel.compile(optimizer='adam', loss='mse')\n###epochs 30\n# score0.01429\n###epochs 30->40\n# score0.01477\n###epochs 40->25\nmodel.fit(X_train, y_train, epochs=25)","23cd5df6":"def make_pred(df, sample, env, model):\n    df['OffenseFormation'] = df['OffenseFormation'].apply(lambda x: x if x in off_form else np.nan)\n    df = pd.concat([df.drop(['OffenseFormation'], axis=1), pd.get_dummies(df['OffenseFormation'], prefix='Formation')], axis=1)\n    missing_cols = set( dummy_col ) - set( test.columns )-set('Yards')\n    for c in missing_cols:\n        df[c] = 0\n    df = df[dummy_col]\n    df.drop(['Yards'], axis=1, inplace=True)\n    df['GameClock'] = df['GameClock'].apply(strtoseconds)\n    df['PlayerHeight'] = df['PlayerHeight'].apply(lambda x: 12*int(x.split('-')[0])+int(x.split('-')[1]))\n    df['TimeHandoff'] = df['TimeHandoff'].apply(lambda x: datetime.datetime.strptime(x, \"%Y-%m-%dT%H:%M:%S.%fZ\"))\n    df['TimeSnap'] = df['TimeSnap'].apply(lambda x: datetime.datetime.strptime(x, \"%Y-%m-%dT%H:%M:%S.%fZ\"))\n    df['TimeDelta'] = df.apply(lambda row: (row['TimeHandoff'] - row['TimeSnap']).total_seconds(), axis=1)\n    df['PlayerBirthDate'] = df['PlayerBirthDate'].apply(lambda x: datetime.datetime.strptime(x, \"%m\/%d\/%Y\"))\n    seconds_in_year = 60*60*24*365.25\n    df['PlayerAge'] = df.apply(lambda row: (row['TimeHandoff']-row['PlayerBirthDate']).total_seconds()\/seconds_in_year, axis=1)\n    df['WindSpeed'] = df['WindSpeed'].apply(lambda x: x.lower().replace('mph', '').strip() if not pd.isna(x) else x)\n    df['WindSpeed'] = df['WindSpeed'].apply(lambda x: (int(x.split('-')[0])+int(x.split('-')[1]))\/2 if not pd.isna(x) and '-' in x else x)\n    df['WindSpeed'] = df['WindSpeed'].apply(lambda x: (int(x.split()[0])+int(x.split()[-1]))\/2 if not pd.isna(x) and type(x)!=float and 'gusts up to' in x else x)\n    df['WindSpeed'] = df['WindSpeed'].apply(str_to_float)\n    df['PlayDirection'] = train['PlayDirection'].apply(lambda x: x is 'right')\n    df['Team'] = df['Team'].apply(lambda x: x.strip()=='home')\n    indoor = \"indoor\"\n    df['GameWeather'] = df['GameWeather'].apply(lambda x: indoor if not pd.isna(x) and indoor in x else x)\n    df['GameWeather'] = df['GameWeather'].apply(lambda x: x.lower().replace('coudy', 'cloudy').replace('clouidy', 'cloudy').replace('party', 'partly').replace('clear and sunny', 'sunny and clear').replace('skies', '').replace(\"mostly\", \"\").strip() if not pd.isna(x) else x)\n    df['GameWeather'] = df['GameWeather'].apply(map_weather)\n    df['IsRusher'] = df['NflId'] == df['NflIdRusher']\n    \n    df = df.sort_values(by=['PlayId', 'Team', 'IsRusher']).reset_index()\n    df = df.drop(['TimeHandoff', 'TimeSnap', 'PlayerBirthDate', 'WindDirection', 'NflId', 'NflIdRusher', 'GameId', 'PlayId', 'index', 'IsRusher', 'Team'], axis=1)\n    cat_features = []\n    for col in df.columns:\n        if df[col].dtype =='object':\n            cat_features.append(col)\n\n    df = df.drop(cat_features, axis=1)\n    df.fillna(-999, inplace=True)\n    X = np.array(df[players_col]).reshape(-1, 11*22)\n    play_col = df.drop(players_col, axis=1).columns\n    X_play_col = np.zeros(shape=(X.shape[0], len(play_col)))\n    for i, col in enumerate(play_col):\n        X_play_col[:, i] = df[col][::22]\n    X = np.concatenate([X, X_play_col], axis=1)\n    y_pred = model.predict(X)\n    for pred in y_pred:\n        prev = 0\n        for i in range(len(pred)):\n            if pred[i]<prev:\n                pred[i]=prev\n            prev=pred[i]\n    env.predict(pd.DataFrame(data=y_pred,columns=sample.columns))\n    return y_pred","3a9ceea4":"for test, sample in tqdm.tqdm(env.iter_test()):\n    make_pred(test, sample, env, model)","ed532680":"env.write_submission_file()","b30cb438":"# Overall analysis","8773ee8d":"We are going to apply the following preprocessing:\n \n- Lower case\n- N\/A Indoor, N\/A (Indoors) and Indoor => indoor Let's try to cluster those together.\n- coudy and clouidy => cloudy\n- party => partly\n- sunny and clear => clear and sunny\n- skies and mostly => \"\"","3f389570":"Let's use the time handoff to calculate the players age","b384c074":"## Game Weather","dca888b6":"We are now going to make one big row for each play where the rusher is the last one","4fc7915c":"To encode our weather we are going to do the following map:\n \n- climate controlled or indoor => 3, sunny or sun => 2, clear => 1, cloudy => -1, rain => -2, snow => -3, others => 0\n- partly => multiply by 0.5\n\nI don't have any expercience with american football so I don't know if playing in a climate controlled or indoor stadium is good or not, if someone has a good idea on how to encode this it would be nice to leave it in the comments :)","1e570bcb":"- Let's see how PlayId is distribuited","b4a123a8":"We know that 1ft=12in, thus:","e232773e":"## Wind Speed and Direction","8bc9402d":"Let's now look at the most common words we have in the weather description","4417361b":"Since I don't have any knowledge about formations, I am just goig to one-hot encode this feature","21469eba":"Since we already have the quarter feature, we can just divide the Game Clock by 15 minutes so we can get the normalized time left in the quarter.","6cf01763":"## Offense formation","a30012a7":"We can see there are some values that are not standardized(e.g. 12mph), we are going to remove mph from all our values.","ab492ca9":"Game clock is supposed to be a numerical feature.","01e3072b":"## NflId NflIdRusher","a16ed862":"# End\n\nIf you reached this far please comment and upvote this kernel, feel free to make improvements on the kernel and please share if you found anything useful!","cdf228e4":"## Time handoff and snap and Player BirthDate","fefe23ab":"## Game Clock","463f65f2":"# Categorical features","f2b35a79":"# Baseline model","f01243d1":"As expected, we have 22 of each playid since we have 22 players.\n\nLet's look at our target variable(Yards).","16d51eb6":"Let's drop the categorical features and run a simple random forest in our model","5a98e618":"Let's preprocess some of those features.","239958d5":"## PlayDirection","5f9e5efb":"## Player height","1dc23b34":"The wind direction won't affect our model much because we are analyzing running plays so we are just going to drop it.","747be684":"## Team"}}