{"cell_type":{"1f00a80b":"code","cad191ca":"code","d416875f":"code","05f2a4d8":"code","613ebb22":"code","685a25e5":"code","d09f68de":"code","ec83f960":"code","7ef93a11":"code","20fd25a9":"code","9b492f94":"code","b1ea7793":"code","91acdcae":"markdown","19ce101e":"markdown","1f93f812":"markdown","cdd6bd30":"markdown","efb18e40":"markdown","d94b049b":"markdown"},"source":{"1f00a80b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom tqdm.auto import tqdm as tqdm\n\nfrom ipywidgets import widgets, interactive, interact\nimport ipywidgets as widgets\nfrom IPython.display import display\n\nimport os\nfor dirname, _, filenames in os.walk('input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","cad191ca":"train_sales = pd.read_csv('\/kaggle\/input\/m5-forecasting-uncertainty\/sales_train_validation.csv')\ncalendar_df = pd.read_csv('\/kaggle\/input\/m5-forecasting-uncertainty\/calendar.csv')\nsubmission_file = pd.read_csv('\/kaggle\/input\/m5-forecasting-uncertainty\/sample_submission.csv')\nsell_prices = pd.read_csv('\/kaggle\/input\/m5-forecasting-uncertainty\/sell_prices.csv')","d416875f":"total = ['Total']\ntrain_sales['Total'] = 'Total'\ntrain_sales['state_cat'] = train_sales.state_id + \"_\" + train_sales.cat_id\ntrain_sales['state_dept'] = train_sales.state_id + \"_\" + train_sales.dept_id\ntrain_sales['store_cat'] = train_sales.store_id + \"_\" + train_sales.cat_id\ntrain_sales['store_dept'] = train_sales.store_id + \"_\" + train_sales.dept_id\ntrain_sales['state_item'] = train_sales.state_id + \"_\" + train_sales.item_id\ntrain_sales['item_store'] = train_sales.item_id + \"_\" + train_sales.store_id","05f2a4d8":"val_eval = ['validation', 'evaluation']\n\n# creating lists for different aggregation levels\ntotal = ['Total']\nstates = ['CA', 'TX', 'WI']\nnum_stores = [('CA',4), ('TX',3), ('WI',3)]\nstores = [x[0] + \"_\" + str(y + 1) for x in num_stores for y in range(x[1])]\ncats = ['FOODS', 'HOBBIES', 'HOUSEHOLD']\nnum_depts = [('FOODS',3), ('HOBBIES',2), ('HOUSEHOLD',2)]\ndepts = [x[0] + \"_\" + str(y + 1) for x in num_depts for y in range(x[1])]\nstate_cats = [state + \"_\" + cat for state in states for cat in cats]\nstate_depts = [state + \"_\" + dept for state in states for dept in depts]\nstore_cats = [store + \"_\" + cat for store in stores for cat in cats]\nstore_depts = [store + \"_\" + dept for store in stores for dept in depts]\nprods = list(train_sales.item_id.unique())\nprod_state = [prod + \"_\" + state for prod in prods for state in states]\nprod_store = [prod + \"_\" + store for prod in prods for store in stores]","613ebb22":"quants = ['0.005', '0.025', '0.165', '0.250', '0.500', '0.750', '0.835', '0.975', '0.995']\ndays = range(1, 1913 + 1)\ntime_series_columns = [f'd_{i}' for i in days]\ndef CreateSales( name_list, group):\n    '''\n    This function returns a dataframe (sales) on the aggregation level given by name list and group\n    '''\n    rows_ve = [(name + \"_X_\" + str(q) + \"_\" + ve, str(q)) for name in name_list for q in quants for ve in val_eval]\n    sales = train_sales.groupby(group)[time_series_columns].sum() #would not be necessary for lowest level\n    return sales","685a25e5":"total = ['Total']\ntrain_sales['Total'] = 'Total'\ntrain_sales['state_cat'] = train_sales.state_id + \"_\" + train_sales.cat_id\ntrain_sales['state_dept'] = train_sales.state_id + \"_\" + train_sales.dept_id\ntrain_sales['store_cat'] = train_sales.store_id + \"_\" + train_sales.cat_id\ntrain_sales['store_dept'] = train_sales.store_id + \"_\" + train_sales.dept_id\ntrain_sales['state_item'] = train_sales.state_id + \"_\" + train_sales.item_id\ntrain_sales['item_store'] = train_sales.item_id + \"_\" + train_sales.store_id","d09f68de":"#example usage of CreateSales\nsales_by_state_cats = CreateSales(state_cats, 'state_cat')\nsales_by_state_cats","ec83f960":"cols = [i for i in train_sales.columns if i.startswith('d_')]\nsales_train_s = train_sales[cols]","7ef93a11":"name = total\ngroup_level = 'Total'\ndef createTrainSet(sales_train_s, name, group_level, X = False):\n    sales_total = CreateSales(name, group_level)\n    if(X == True):\n        sales_total = sales_total.rename(index = lambda s:  s + '_X')\n    sales_train_s = sales_train_s.append(sales_total)\n    return(sales_train_s)","20fd25a9":"sales_train_s = pd.DataFrame()\nsales_train_s = createTrainSet(sales_train_s, total, 'Total', X=True) #1\nsales_train_s = createTrainSet(sales_train_s, states, 'state_id', X=True) #2\nsales_train_s = createTrainSet(sales_train_s, stores, 'store_id', X=True) #3\nsales_train_s = createTrainSet(sales_train_s, cats, 'cat_id', X=True) #4\nsales_train_s = createTrainSet(sales_train_s, depts, 'dept_id', X=True) #5\nsales_train_s = createTrainSet(sales_train_s, state_cats, 'state_cat') #6\nsales_train_s = createTrainSet(sales_train_s, state_depts, 'state_dept') #7\nsales_train_s = createTrainSet(sales_train_s, store_cats, 'store_cat') #8\nsales_train_s = createTrainSet(sales_train_s, store_depts, 'store_dept') #9\nsales_train_s = createTrainSet(sales_train_s, prods, 'item_id', X=True) #10\nsales_train_s = createTrainSet(sales_train_s, prod_state, 'state_item') #11\nsales_train_s = createTrainSet(sales_train_s, prod_store, 'item_store')","9b492f94":"sales_train_s.to_csv('train_set.csv')","b1ea7793":"sales_train_s.head()","91acdcae":"This kernel builds the aggregate time series needed for the competition. It is based on https:\/\/www.kaggle.com\/szmnkrisz97\/simple-quantiles-of-training-set","19ce101e":"## Variables to help with aggregation","1f93f812":"## Getting aggregated sales","cdd6bd30":"# # Building aggregated time series","efb18e40":"## Reading data","d94b049b":"## Getting quantiles adjusted by day-of-week"}}