{"cell_type":{"ddcec0e8":"code","99282422":"code","62161c04":"code","68f7e239":"code","925246d2":"code","ecc74749":"code","677c718c":"code","ab3fcfd1":"code","ddd4771c":"code","ad352855":"code","bd8f8333":"code","4d5b0d07":"code","7fadf521":"code","a092903c":"code","07a69ff6":"code","f8e0cc29":"code","7028c106":"code","eebc568d":"code","d64e7c09":"code","bc45f80a":"code","9df48357":"code","c0435283":"code","7a76b14c":"code","50d11ef3":"code","0bc41733":"code","9896d0a4":"code","4c3047f7":"code","a43cbb00":"markdown"},"source":{"ddcec0e8":"import numpy as np\nimport pandas as pd\nimport tensorflow.keras\nimport os\nimport cv2\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.regularizers import L2 as l2\nfrom tensorflow.keras.layers import Activation,ZeroPadding2D,AveragePooling2D,Dense,Flatten,Add,Dropout,Conv2D,Input,MaxPooling2D,BatchNormalization\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Sequential\n\nimport pydicom\nfrom pydicom.pixel_data_handlers.util import apply_voi_lut\nfrom tqdm.notebook import tqdm\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array","99282422":"train_name=os.listdir('..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train')\ntest_name=os.listdir('..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/test')","62161c04":"labels=pd.read_csv('..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train_labels.csv')\nlabels","68f7e239":"# sample=pd.read_csv('..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/sample_submission.csv')\n# sample","925246d2":"def load_dicom(path):\n    dicom=pydicom.read_file(path)\n    data=dicom.pixel_array\n    data=data-np.min(data)\n    if np.max(data) != 0:\n        data=data\/np.max(data)\n    data=(data*255).astype(np.uint8)\n    return data\n","ecc74749":"# path0='..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/00000\/T1wCE\/Image-1.dcm'\n# img1=load_dicom(path0)\n# img2=cv2.resize(img1,(224,224))\n# print(img1.shape)\n# print(img2.shape) ","677c718c":"train_dir='..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train'\ntrainset=[]\ntrainlabel=[]\ntrainidt=[]\nfor i in tqdm(range(len(labels))):\n    idt=labels.loc[i,'BraTS21ID']\n    idt2=('00000'+str(idt))[-5:] \n    path=os.path.join(train_dir,idt2,'T1wCE')              \n    for im in os.listdir(path):\n        img=load_dicom(os.path.join(path,im))\n        img=cv2.resize(img,(9,9)) \n        image=img_to_array(img)\n        image=image\/255.0\n        trainset+=[image]\n        trainlabel+=[labels.loc[i,'MGMT_value']]\n        trainidt+=[idt]\n    \n","ab3fcfd1":"test_dir='..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/test'\ntestset=[]\ntestidt=[]\nfor i in tqdm(range(len(sample))):\n    idt=sample.loc[i,'BraTS21ID']\n    idt2=('00000'+str(idt))[-5:]\n    path=os.path.join(test_dir,idt2,'T1wCE')               \n    for im in os.listdir(path):   \n        img=load_dicom(os.path.join(path,im))\n        img=cv2.resize(img,(9,9)) \n        image=img_to_array(img)\n        image=image\/255.0\n        testset+=[image]\n        testidt+=[idt]\n\n#1 2 3 4 5\n#->10000 01000 00100 00010#one hot encoding\n        \nfrom tensorflow.keras.utils import to_categorical\ny0=np.array(trainlabel)\nY_train=to_categorical(y0)\nX_train=np.array(trainset)\nX_test=np.array(testset)\n","ddd4771c":"model = Sequential()\nmodel.add(Conv2D(64,(4,4),input_shape = (9,9,1),activation = 'relu'))\nmodel.add(Conv2D(32,(2,2),activation = 'relu'))\nmodel.add(Conv2D(64,(2,2),activation = 'relu'))\nmodel.add(Conv2D(32,(2,2),activation = 'relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Flatten())\nmodel.add(Dense(32, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(2, activation='softmax'))\nmodel.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])","ad352855":"history=model.fit(X_train[500:],Y_train[500:],epochs=100) #trains the model on train dataset","bd8f8333":"PathtoPickle1 = \"..\/input\/picklefiles\/X_trainfull_FLAIR.pickle\"\nPathtoPickle2 = \"..\/input\/picklefiles\/Y_trainfull_FLAIR.pickle\"\nimport pickle\nwith open(PathtoPickle1, 'rb') as f:\n    X_train=pickle.load(f)\n    f.close()\n\nwith open(PathtoPickle2, 'rb') as f:\n    Y_train=pickle.load(f)\n    f.close()","4d5b0d07":"Predicted = FlairModel.predict(X_train[0:500])\nTrueValues=0\nfor i in range(0,500):\n    if(np.argmax(Predicted[i])==np.argmax(Y_train[i])):\n        TrueValues+=1\nprint(TrueValues\/500)","7fadf521":"model.save('.\/model_T1wCE.h5')","a092903c":"model.load_weights(\"..\/input\/model-tiwceh5\/model_t1wce.h5\")","07a69ff6":"# Predicted[0:100]","f8e0cc29":"# trainlabel[0:1000]","7028c106":"# Y_train[0:100]","eebc568d":"import pickle\nwith open('X_trainfull_FLAIR.pickle', 'wb') as f:\n    pickle.dump(X_train, f)\n    f.close()","d64e7c09":"import pickle\nwith open('Y_trainfull_FLAIR.pickle', 'wb') as f:\n    pickle.dump(Y_train, f)\n    f.close()","bc45f80a":"# filef= open('Y_trainfull.pickle','rb')\n# XER = pickle.load(filef)","9df48357":"# len(XER)","c0435283":"# XER","7a76b14c":"# len(X_train)","50d11ef3":"def DefineBasicModel():\n    model = Sequential()\n    model.add(Conv2D(64,(4,4),input_shape = (9,9,1),activation = 'relu'))\n    model.add(Conv2D(32,(2,2),activation = 'relu'))\n    model.add(Conv2D(64,(2,2),activation = 'relu'))\n    model.add(Conv2D(32,(2,2),activation = 'relu'))\n    model.add(Dropout(0.2))\n    model.add(Flatten())\n    model.add(Dense(32, activation='relu'))\n    model.add(Dense(8, activation='relu'))\n    model.add(Dense(2, activation='softmax'))\n    model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])\n    return model\n","0bc41733":"FlairModel = DefineBasicModel()\nFlairModel.load_weights('..\/input\/trainedmodelweights\/model_FLAIR (1).h5')\n\nT1wModel = DefineBasicModel()\nT1wModel.load_weights('..\/input\/trainedmodelweights\/model_T1w.h5')\n\nT1wCEModel = DefineBasicModel()\nT1wCEModel.load_weights('..\/input\/trainedmodelweights\/model_T1wCE (2).h5')\n\nT2wModel = DefineBasicModel()\nT2wModel.load_weights('..\/input\/trainedmodelweights\/model_T2w.h5')\n\ndef load_dicom(path):\n    dicom=pydicom.read_file(path)\n    data=dicom.pixel_array\n    data=data-np.min(data)\n    if np.max(data) != 0:\n        data=data\/np.max(data)\n    data=(data*255).astype(np.uint8)\n    return data\n\nFinalPrediction=[]\ntrain_dir='..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train'\ntrainset=[]\ntrainlabel=[]\ntrainidt=[]\nfor i in tqdm(range(10)):\n    FinalCount=0\n    idt=labels.loc[i,'BraTS21ID']\n    idt2=('00000'+str(idt))[-5:] \n    path=os.path.join(train_dir,idt2,'FLAIR')\n    Count=0\n    for im in os.listdir(path):\n        img=load_dicom(os.path.join(path,im))\n        img=cv2.resize(img,(9,9)) \n        image=img_to_array(img)\n        image=image\/255.0\n        Currimg = np.array([image])\n        Pred = FlairModel.predict(Currimg) \n        if(np.argmax(Pred)==0):\n            Count-=1\n        else:\n            Count+=1\n#         trainset+=[image]\n#         trainlabel+=[labels.loc[i,'MGMT_value']]\n#         trainidt+=[idt]\n    if(Count>0):\n        FinalCount+=1\n    else:\n        FinalCount-=1\n        \n    \n    path=os.path.join(train_dir,idt2,'T1w')\n    Count=0\n    for im in os.listdir(path):\n        img=load_dicom(os.path.join(path,im))\n        img=cv2.resize(img,(9,9)) \n        image=img_to_array(img)\n        image=image\/255.0\n        Currimg = np.array([image])\n        Pred = T1wModel.predict(Currimg) \n        if(np.argmax(Pred)==0):\n            Count-=1\n        else:\n            Count+=1\n#         trainset+=[image]\n#         trainlabel+=[labels.loc[i,'MGMT_value']]\n#         trainidt+=[idt]\n    if(Count>0):\n        FinalCount+=1\n    else:\n        FinalCount-=1\n    \n    path=os.path.join(train_dir,idt2,'T1wCE')\n    Count=0\n    for im in os.listdir(path):\n        img=load_dicom(os.path.join(path,im))\n        img=cv2.resize(img,(9,9)) \n        image=img_to_array(img)\n        image=image\/255.0\n        Currimg = np.array([image])\n        Pred = T1wCEModel.predict(Currimg) \n        if(np.argmax(Pred)==0):\n            Count-=1\n        else:\n            Count+=1\n#         trainset+=[image]\n#         trainlabel+=[labels.loc[i,'MGMT_value']]\n#         trainidt+=[idt]\n    if(Count>0):\n        FinalCount+=1\n    else:\n        FinalCount-=1\n    \n    path=os.path.join(train_dir,idt2,'T2w')\n    Count=0\n    for im in os.listdir(path):\n        img=load_dicom(os.path.join(path,im))\n        img=cv2.resize(img,(9,9)) \n        image=img_to_array(img)\n        image=image\/255.0\n        Currimg = np.array([image])\n        Pred = T2wModel.predict(Currimg) \n        if(np.argmax(Pred)==0):\n            Count-=1\n        else:\n            Count+=1\n#         trainset+=[image]\n#         trainlabel+=[labels.loc[i,'MGMT_value']]\n#         trainidt+=[idt]\n    if(Count>0):\n        FinalCount+=1\n    else:\n        FinalCount-=1\n    \n#     path=os.path.join(train_dir,idt2,'T2w')\n#     Count=0\n#     for im in os.listdir(path):\n#         img=load_dicom(os.path.join(path,im))\n#         img=cv2.resize(img,(9,9)) \n#         image=img_to_array(img)\n#         image=image\/255.0\n#         Currimg = np.array(image)\n#         Pred = T2wModel.predict([Currimg]) \n#         if(np.argmax(Pred[i])==0):\n#             Count-=1\n#         else:\n#             Count+=1\n# #         trainset+=[image]\n# #         trainlabel+=[labels.loc[i,'MGMT_value']]\n# #         trainidt+=[idt]\n#     if(Count>0):\n#         FinalCount+=1\n#     else:\n#         FinalCount-=1\n\n    if(FinalCount>0):\n        FinalPrediction.append(1)\n    else:\n        FinalPrediction.append(0)\n","9896d0a4":"FinalPrediction","4c3047f7":"90%","a43cbb00":"# End of the Code"}}