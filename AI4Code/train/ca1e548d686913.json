{"cell_type":{"5931c91c":"code","8499ba11":"code","86e39541":"code","70236fb5":"code","0b2b75ee":"code","acddd939":"code","1017f6e3":"code","5f14deb3":"code","a194c349":"code","b454a5b9":"code","56a8522c":"code","a4e1dbf9":"code","cb97fd26":"code","a2b54c5a":"code","2b8b89eb":"markdown"},"source":{"5931c91c":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns # data visualization library  \nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n# Loading data\npath_file = '..\/input\/profiles.csv'\n\ndf = pd.read_csv(open(path_file, 'r'))\n\nlist_df = []\ndf = df[df.status != \"unknown\"]\n# df.dropna()\n# df = df.rename(columns = {'fit': 'fit_feature'})\n\ndf['status'] = df['status'].replace(\"seeing someone\", \"married\")\ndf['status'] = df['status'].replace(\"available\", \"single\")\n\ndf['status'] = df['status'].replace(\"single\", 0)\ndf['status'] = df['status'].replace(\"married\", 1)\n\n# df_single = df[df['status'] == 0].sample(frac=0.04124)\n# df_married = df[df['status'] == 1]\n\n# df = pd.concat([df_single, df_married], axis=1)\ndf.head()","8499ba11":"print('Percent of bisexual in Married', 100.0* df[(df.orientation == 'bisexual') & (df.status == 1)].shape[0]\/float(df[(df.status==1)].shape[0]))\nprint('Percent of bisexual in Single', 100.0* df[(df.orientation == 'bisexual') & (df.status == 0)].shape[0]\/float(df[(df.status==0)].shape[0]))\nprint('Percent of straight in Married', 100.0* df[(df.orientation == 'straight') & (df.status == 1)].shape[0]\/float(df[(df.status==1)].shape[0]))\nprint('Percent of straight in Single', 100.0* df[(df.orientation == 'straight') & (df.status == 0)].shape[0]\/float(df[(df.status==0)].shape[0]))\ndf[(df.status == 1)].orientation.value_counts()\n\nprint('Percentage of people who do Drugs Somtimes', 100.0* df[(df.drugs == 'sometimes') & (df.status == 1)].shape[0]\/float(df[(df.status==1)].shape[0]))\n# print(df[(df.status == 1)].drugs.value_counts())\n\n# df[(df.status == 1)].job.value_counts()","86e39541":"\ntarget_count = df[(df.status==1)].orientation.value_counts()\n\npie_trace = go.Pie(labels=target_count.index, values=target_count.values)\nlayout = dict(title= \"Married Orientation distribution\", height=400, width=800)\nfig = dict(data=[pie_trace], layout=layout)\niplot(fig)\n","70236fb5":"target_count = df[(df.status==0)].orientation.value_counts()\n\npie_trace = go.Pie(labels=target_count.index, values=target_count.values)\nlayout = dict(title= \"Single Orientation distribution\", height=400, width=800)\nfig = dict(data=[pie_trace], layout=layout)\niplot(fig)","0b2b75ee":"target_count = df[(df.status==0)].drugs.value_counts()\n\npie_trace = go.Pie(labels=target_count.index, values=target_count.values)\nlayout = dict(title= \"Single Drug Usage distribution\", height=400, width=800)\nfig = dict(data=[pie_trace], layout=layout)\niplot(fig)","acddd939":"target_count = df[(df.status==1)].drugs.value_counts()\n\npie_trace = go.Pie(labels=target_count.index, values=target_count.values)\nlayout = dict(title= \"Married Drug Usage distribution\", height=400, width=800)\nfig = dict(data=[pie_trace], layout=layout)\niplot(fig)","1017f6e3":"target_count = df[(df.status==1)].body_type.value_counts()\n\npie_trace = go.Pie(labels=target_count.index, values=target_count.values)\nlayout = dict(title= \"Married Body_type distribution\", height=400, width=800)\nfig = dict(data=[pie_trace], layout=layout)\niplot(fig)","5f14deb3":"target_count = df[(df.status==0)].body_type.value_counts()\n\npie_trace = go.Pie(labels=target_count.index, values=target_count.values)\nlayout = dict(title= \"Single Body_type distribution\", height=400, width=800)\nfig = dict(data=[pie_trace], layout=layout)\niplot(fig)","a194c349":"\nfor columns in df.columns:\n    # skipping essay, last online time, language and status\n    if columns.startswith('ethnicity') or columns.startswith('location') or columns.startswith('essay') or columns.startswith('last_online') or columns.startswith('speaks') or columns.startswith('status'):\n        continue\n    else:\n        list_df.append(pd.get_dummies(df[columns], prefix=columns))\n        print(columns, pd.get_dummies(df[columns]).shape[1])\n\ndf_np = np.asarray(list_df)\n\nfeatures = pd.concat(df_np, axis=1)\n\nlabels = df['status']\nfeature_list = list(features.columns)\n\n\ntarget_count = labels.value_counts()\n\npie_trace = go.Pie(labels=target_count.index, values=target_count.values)\nlayout = dict(title= \"Single to Married distribution\", height=400, width=800)\nfig = dict(data=[pie_trace], layout=layout)\niplot(fig)\n","b454a5b9":"\ntrain_features, test_features, train_labels, test_labels = train_test_split(features.as_matrix(), labels, test_size=0.10, random_state=42, stratify=labels)\n\nprint('Training Features Shape:', train_features.shape)\nprint('Training Labels Shape:', train_labels.shape)\nprint('Testing Features Shape:', test_features.shape)\nprint('Testing Labels Shape:', test_labels.shape)\n\nrf = RandomForestClassifier(n_estimators=10000, random_state=42, verbose=1, max_depth=10)\n\nrf.fit(train_features, train_labels)","56a8522c":"\ny_pred = rf.predict(test_features)\nfrom sklearn.metrics import classification_report\ntarget_names = ['single','married']\nprint(classification_report(test_labels, y_pred, target_names=target_names))","a4e1dbf9":"\nimportances = rf.feature_importances_\nstd = np.std([tree.feature_importances_ for tree in rf.estimators_], axis=0)\n\nindices = np.argsort(importances)[::-1]\nprint(\"Feature ranking:\")\nsort_features = []\nsorted_importances = []\nfor f in range(train_features.shape[1]):\n    print(f + 1, feature_list[indices[f]], importances[indices[f]])\n    sort_features.append(feature_list[indices[f]])\n    sorted_importances.append(importances[indices[f]])\n","cb97fd26":"\n# plt.figure()\n# plt.title(\"Feature importances\")\n# plt.bar( range(train_features.shape[1])[:10],importances[indices][:10],\n#         color=\"g\", xerr=std[indices][:10], align=\"center\")\n# plt.yticks(range(train_features.shape[1])[:10], sort_features)\n# # plt.xlim([-1, train_features.shape[1]])\n# plt.show()\n\n\n\n\n\nfig, ax = plt.subplots()\ny_pos = np.arange(20)\nax.barh(y_pos, sorted_importances[:20], align='center')\nax.set_yticks(y_pos)\nax.set_yticklabels(sort_features)\nax.invert_yaxis()  # labels read top-to-bottom\nax.set_xlabel('Performance')\nax.set_title('How fast do you want to go today?')\n\n\n\n\nplt.title('Feature importance in RandomForest Classifier')\nplt.xlabel('Relative importance')\nplt.ylabel('feature') \nplt.show()\n\n","a2b54c5a":"import sys\n!{sys.executable} -m pip install pydot-ng ","2b8b89eb":"<h1>Deception Detection in Online Dating<\/h1>\n\n<h2>1. Introduction<\/h2>\n\nThe goal of this project is to find features in online dating profiles which can help determine deceptive behavior. Our study assumes that people who are married should'nt be on online dating platforms. This can lead to distrust and cheating on other people which leads to depression and other mental issues.\n\nThe dataset we use for this study is - https:\/\/github.com\/rudeboybert\/JSE_OkCupid\n"}}