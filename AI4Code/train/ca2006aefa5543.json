{"cell_type":{"c25b7879":"code","9850dab7":"code","11b65a8e":"code","2176acd0":"code","6ed8a44b":"code","559b91d6":"code","a3297b08":"code","82bdd35c":"code","6bdb7836":"code","160a86c7":"code","822d858f":"code","c9d3a573":"code","ff592e26":"code","f53f5ded":"code","df679456":"code","b35afcd4":"code","436611d9":"code","923acddb":"code","fd261c33":"code","20bbb243":"code","a676c737":"code","d14a3449":"code","f91707df":"code","a56ea32b":"code","666e1593":"code","3208c405":"code","8dc24cf4":"markdown","8b803512":"markdown","5a12d366":"markdown","fdfa45d2":"markdown","ab00817a":"markdown","5b89bc7d":"markdown","a4d0be92":"markdown","1789e2b3":"markdown","6ed70314":"markdown","b0021d7b":"markdown","861d71e1":"markdown","d60975d9":"markdown","cc74e361":"markdown","8219ec32":"markdown"},"source":{"c25b7879":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.offline as py\nimport plotly.express as px\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9850dab7":"df = pd.read_csv('..\/input\/500-greatest-songs-of-all-time\/Top 500 Songs.csv', encoding='ISO-8859-2')\ndf.head()","11b65a8e":"#Code by Md Redwan Karim Sony https:\/\/www.kaggle.com\/redwankarimsony\/space-missions-data-eda-temporal-analysis\n\n# Calculating\npercent_missing = df.isnull().sum() * 100 \/ len(df)\nmissing_value_df = pd.DataFrame({'column': df.columns,\n                                 'percent': percent_missing})\nmissing_value_df.sort_values('percent', inplace=True)\nmissing_value_df.reset_index(drop=True, inplace=True)\nmissing_value_df = missing_value_df[missing_value_df['percent']>0]\n\n# Plotting\nfig = px.bar(\n    missing_value_df, \n    x='percent', \n    y=\"column\", \n    orientation='h', \n    title='Columns with Missing Values', \n    height=200, \n    width=600\n)\nfig.show()","2176acd0":"#Codes by Pooja Jain https:\/\/www.kaggle.com\/jainpooja\/av-guided-hackathon-predict-youtube-likes\/notebook\n\ntext_cols = ['title', 'artist', 'writers']\n\nfrom wordcloud import WordCloud, STOPWORDS\n\nwc = WordCloud(stopwords = set(list(STOPWORDS) + ['|']), random_state = 42)\nfig, axes = plt.subplots(2, 2, figsize=(20, 12))\naxes = [ax for axes_row in axes for ax in axes_row]\n\nfor i, c in enumerate(text_cols):\n  op = wc.generate(str(df[c]))\n  _ = axes[i].imshow(op)\n  _ = axes[i].set_title(c.upper(), fontsize=24)\n  _ = axes[i].axis('off')\n\n_ = fig.delaxes(axes[3])","6ed8a44b":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.title)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='GnBu', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","559b91d6":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.artist)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set3', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","a3297b08":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.writers)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='ocean', background_color=\"red\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","82bdd35c":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.released)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='GnBu', background_color=\"white\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","6bdb7836":"# categorical features with missing values\ncategorical_nan = [feature for feature in df.columns if df[feature].isna().sum()>0 and df[feature].dtypes=='O']\nprint(categorical_nan)","160a86c7":"# replacing missing values in categorical features\nfor feature in categorical_nan:\n    df[feature] = df[feature].fillna('None')","822d858f":"df[categorical_nan].isna().sum()","c9d3a573":"#Code from Carl Macbride Ellis https:\/\/www.kaggle.com\/carlmcbrideellis\/treeplot-see-your-classification-tree\n\n!pip install treeplot\n\n\n# import treeplot package:\nimport treeplot\n# and the random forest classifier\nfrom sklearn.ensemble import RandomForestClassifier\n\n# read in the data\ntrain_data = pd.read_csv('..\/input\/500-greatest-songs-of-all-time\/Top 500 Songs.csv')\n\n# select some features\nfeatures = [\"streak\", \"appears on\", \"artist\", \"writers\", \"producer\", \"released\"]\n\nX_train       = pd.get_dummies(train_data[features])\ny_train       = train_data[\"title\"]\n\n# perform the classification and the fit\nclassifier = RandomForestClassifier(criterion='gini', n_estimators=100, \n        min_samples_split=2, min_samples_leaf=10, max_features='auto')\nclassifier.fit(X_train, y_train)","ff592e26":"# now make the plot\nax = treeplot.plot(classifier)","f53f5ded":"#Code by Taha07  https:\/\/www.kaggle.com\/taha07\/data-scientists-jobs-analysis-visualization\/notebook\n\ncolor = plt.cm.RdBu(np.linspace(0,1,20))\ndf[\"title\"].value_counts().sort_values(ascending=False).head(20).plot.pie(y=\"artist\",colors=color,autopct=\"%0.1f%%\")\nplt.title(\"Greatest Songs by Title\")\nplt.axis(\"off\")\nplt.show()","df679456":"#Code by Taha07  https:\/\/www.kaggle.com\/taha07\/data-scientists-jobs-analysis-visualization\/notebook\n\ncolor = plt.cm.summer(np.linspace(0,1,20))\ndf[\"artist\"].value_counts().sort_values(ascending=False).head(20).plot.pie(y=\"streak\",colors=color,autopct=\"%0.1f%%\")\nplt.title(\"Greatest Songs by Artist\")\nplt.axis(\"off\")\nplt.show()","b35afcd4":"#Code by Taha07  https:\/\/www.kaggle.com\/taha07\/data-scientists-jobs-analysis-visualization\/notebook\n\ncolor = plt.cm.Pastel1(np.linspace(0,1,20))\ndf[\"streak\"].value_counts().sort_values(ascending=False).head(20).plot.pie(y=\"writer\",colors=color,autopct=\"%0.1f%%\")\nplt.title(\"Greatest Songs by Streak\")\nplt.axis(\"off\")\nplt.show()","436611d9":"#Code by Taha07  https:\/\/www.kaggle.com\/taha07\/data-scientists-jobs-analysis-visualization\/notebook\n\ncolor = plt.cm.Set3(np.linspace(0,1,20))\ndf[\"writers\"].value_counts().sort_values(ascending=False).head(20).plot.pie(y=\"released\",colors=color,autopct=\"%0.1f%%\")\nplt.title(\"Greatest Songs by Writers\")\nplt.axis(\"off\")\nplt.show()","923acddb":"#Code by Taha07  https:\/\/www.kaggle.com\/taha07\/data-scientists-jobs-analysis-visualization\/notebook\n\ncolor = plt.cm.cividis(np.linspace(0,1,20))\ndf[\"producer\"].value_counts().sort_values(ascending=False).head(20).plot.pie(y=\"description\",colors=color,autopct=\"%0.1f%%\")\nplt.title(\"Greatest Songs by Producer\")\nplt.axis(\"off\")\nplt.show()","fd261c33":"#Code by Taha07  https:\/\/www.kaggle.com\/taha07\/data-scientists-jobs-analysis-visualization\/notebook\n\ncolor = plt.cm.RdBu(np.linspace(0,1,20))\ndf[\"released\"].value_counts().sort_values(ascending=False).head(20).plot.pie(y=\"title\",colors=color,autopct=\"%0.1f%%\")\nplt.title(\"Songs By Record Label and when they were Released\")\nplt.axis(\"off\")\nplt.show()","20bbb243":"elvis = df[(df['artist']=='Elvis Presley')].reset_index(drop=True)\nelvis.head(10)","a676c737":"elton = df[(df['artist']=='Elton John')].reset_index(drop=True)\nelton.head()","d14a3449":"beatles = df[(df['artist']=='The Beatles')].reset_index(drop=True)\nbeatles.head(10)","f91707df":"stones = df[(df['artist']=='The Rolling Stones')].reset_index(drop=True)\nstones.head(10)","a56ea32b":"top = df[(df['streak']=='30 weeks; No. 1')].reset_index(drop=True)\ntop.head(10)","666e1593":"smokey = df[(df['artist']=='Smokey Robinson and the Miracles')].reset_index(drop=True)\nsmokey.head()","3208c405":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Mar\u00edlia Prata, @mpwolke Was here singing' )","8dc24cf4":"#I intended to use streak Y (`train_data`). Though I removed the missing values, the NAN was preventing my tree. \n\nSo I changed to title.","8b803512":"#Handling missing data.","5a12d366":"The 500 Greatest Songs of All Time\" was the cover story of a special issue of Rolling Stone, issue number 963, published in December 2004, a year after the magazine published its list of \"The 500 Greatest Albums of All Time\".https:\/\/en.wikipedia.org\/wiki\/Rolling_Stone%27s_500_Greatest_Songs_of_All_Time","fdfa45d2":"#That's why Elvis is the King.","ab00817a":"#Smokey Robinson \"Being With You\" 1981 with Lyrics and Artist Facts.\n\n\"Being with You\" is a 1981 song recorded by American singer Smokey Robinson and is the title track from his Gold-certified album with the same name. The song spent five weeks at No. 1 on the Hot Soul Singles chart from March to early May 1981 and reached number two on the Billboard Hot 100, behind \"Bette Davis Eyes\" by Kim Carnes, his highest charting solo hit on the Billboard pop charts.https:\/\/en.wikipedia.org\/wiki\/Being_with_You_(song)\n\nBorn in Detroit, Michigan, on February 19, 1940, Smokey Robinson is second to only Berry Gordy in the founding of Motown. A prolific songwriter, he is credited with 4,000 songs and 37 Top 40 hits, including \"Tears of a Clown,\" \"Tracks of My Tears\" and \"Love Machine.\" Robinson also served as vice president of Motown records, writing and producing hits for groups such as The Temptations (\"My Girl\") and Mary Wells (\"My Guy\").https:\/\/www.youtube.com\/watch?v=vZg9_MiTfIk","5b89bc7d":"#What words are mentioned most in the titles?","a4d0be92":"#Which writers has the most songs on the list?","1789e2b3":"<iframe width=\"727\" height=\"409\" src=\"https:\/\/www.youtube.com\/embed\/LdvauHk9BEE\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>","6ed70314":"#Which artist has the most songs on the list?","b0021d7b":"#Smokey Robinson","861d71e1":"#All Shook Up  and In Da Club are number 1 for a long time. Really?!! ","d60975d9":"![](https:\/\/www.music-bazaar.com\/album-images\/vol16\/784\/784622\/2637201-big\/The-Rolling-Stone-Magazines-500-Greatest-Songs-Of-All-Time-CD1-cover.jpg)music-bazaar.com","cc74e361":"#Elton's \"Tine Dancer\", \"Good Bye Yellow Brick Road\" and \"Candle in the Wind\" appear 4, 3 and 3 respectively.","8219ec32":"#When the songs are released? No year is shown. So we can't ask What are the greatest years in music? "}}