{"cell_type":{"d51fc0cd":"code","5de4e1d9":"code","94494b3b":"code","60afd4bd":"code","0e39b85f":"code","9dcf08b4":"code","5846dd8a":"code","39805862":"code","abccd454":"code","dfffd150":"code","4baef164":"code","40b2e739":"code","48bd66ae":"code","928f937b":"code","af188161":"code","cba5411e":"code","5281cd8a":"code","b86b4542":"code","b2a93630":"code","ec4d5ded":"code","03078a77":"code","8d9ddeb7":"code","2fd8ffef":"code","84a24e40":"code","dba5550f":"code","12be92fa":"code","62025615":"code","b96ae6bc":"code","f7d7eae4":"code","2fbf1379":"code","b74a8f77":"code","45964cd7":"code","f5b58202":"code","66bb6378":"code","d5987ca2":"code","08c38d36":"code","8d7b2c0f":"code","94ae1e47":"code","1cb83a36":"code","70421fd5":"code","c704f85e":"code","1ec04dff":"code","e69468a0":"code","f057d49b":"code","c2b2f0ca":"code","d8bc6591":"code","c942654a":"code","f0e78680":"code","f3e0c14a":"code","3bc235c4":"code","6c5c73e2":"code","da6e1c7d":"code","5df87018":"code","15a0885e":"code","704eafa3":"code","72246118":"code","d79105ee":"code","644c29c4":"code","ead300d0":"code","94c86f67":"code","50d99e86":"code","789a321c":"code","1d6ee9f6":"code","a2f01389":"code","7f2d31f3":"code","b3172a23":"code","92376b6e":"code","744903ed":"code","526750c1":"code","2e4f8b90":"markdown","ecdf7555":"markdown","7f024ba5":"markdown","566deccf":"markdown","aa54c533":"markdown","aacdde10":"markdown","381f204a":"markdown","971d8fbd":"markdown","48464750":"markdown","5b0ce901":"markdown","69b3bd69":"markdown","e921e327":"markdown","8b77fa69":"markdown","a70a0005":"markdown","d6de2795":"markdown","32b47766":"markdown","4ccffe42":"markdown","b547fea7":"markdown","65c2f663":"markdown","cf070e59":"markdown"},"source":{"d51fc0cd":"#GENERAL\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport random\n#PATH PROCESS\nimport os\nimport os.path\nfrom pathlib import Path\nimport glob\n#IMAGE PROCESS\nfrom PIL import Image\nfrom keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport cv2\nfrom keras.applications.vgg16 import preprocess_input, decode_predictions\nfrom keras.preprocessing import image\nimport skimage\nfrom skimage.feature import hessian_matrix, hessian_matrix_eigvals\nfrom scipy.ndimage.filters import convolve\nfrom skimage import data, io, filters\n#SCALER & TRANSFORMATION\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom keras import regularizers\nfrom sklearn.preprocessing import LabelEncoder\n#ACCURACY CONTROL\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, roc_auc_score, roc_curve\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.metrics import mean_squared_error, r2_score\n#OPTIMIZER\nfrom keras.optimizers import RMSprop,Adam,Optimizer,Optimizer, SGD\n#MODEL LAYERS\nfrom tensorflow.keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization,MaxPooling2D,BatchNormalization,\\\n                        Permute, TimeDistributed, Bidirectional,GRU, SimpleRNN, LSTM, GlobalAveragePooling2D, SeparableConv2D, ZeroPadding2D, Convolution2D, ZeroPadding2D\nfrom keras import models\nfrom keras import layers\nimport tensorflow as tf\nfrom keras.applications import VGG16,VGG19,inception_v3\nfrom keras import backend as K\nfrom keras.utils import plot_model\nfrom keras.models import load_model\nfrom keras.regularizers import l1,l2,L1L2\n#SKLEARN CLASSIFIER\nfrom xgboost import XGBClassifier, XGBRegressor\nfrom lightgbm import LGBMClassifier, LGBMRegressor\nfrom catboost import CatBoostClassifier, CatBoostRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingClassifier, GradientBoostingRegressor\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\nfrom sklearn.neural_network import MLPClassifier, MLPRegressor\nfrom sklearn.neighbors import KNeighborsClassifier, KNeighborsRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.cross_decomposition import PLSRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import ElasticNetCV\n#IGNORING WARNINGS\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\",category=DeprecationWarning)\nfilterwarnings(\"ignore\", category=FutureWarning) \nfilterwarnings(\"ignore\", category=UserWarning)","5de4e1d9":"Proton_Train_Path = Path(\"..\/input\/proton-collision-image-set\/Proton Collision 13TeV\/Train\")\nProton_Test_Path = Path(\"..\/input\/proton-collision-image-set\/Proton Collision 13TeV\/Test\")","94494b3b":"Proton_Train_PNG_Path = list(Proton_Train_Path.glob(r\"*\/*.png\"))\nProton_Test_PNG_Path = list(Proton_Test_Path.glob(r\"*\/*.png\"))","60afd4bd":"Proton_Train_PNG_Labels = list(map(lambda x: os.path.split(os.path.split(x)[0])[1],Proton_Train_PNG_Path))\nProton_Test_PNG_Labels = list(map(lambda x: os.path.split(os.path.split(x)[0])[1],Proton_Test_PNG_Path))","0e39b85f":"Train_PNG_Path_Series = pd.Series(Proton_Train_PNG_Path,name=\"PNG\").astype(str)\nTrain_PNG_Labels_Series = pd.Series(Proton_Train_PNG_Labels,name=\"CATEGORY\")","9dcf08b4":"Test_PNG_Path_Series = pd.Series(Proton_Test_PNG_Path,name=\"PNG\").astype(str)\nTest_PNG_Labels_Series = pd.Series(Proton_Test_PNG_Labels,name=\"CATEGORY\")","5846dd8a":"Main_Train_Data = pd.concat([Train_PNG_Path_Series,Train_PNG_Labels_Series],axis=1)\nMain_Test_Data = pd.concat([Test_PNG_Path_Series,Test_PNG_Labels_Series],axis=1)","39805862":"print(Main_Train_Data.head(-1))","abccd454":"print(Main_Test_Data.head(-1))","dfffd150":"Main_Train_Data = Main_Train_Data.sample(frac=1).reset_index(drop=True)\nMain_Test_Data = Main_Test_Data.sample(frac=1).reset_index(drop=True)","4baef164":"print(Main_Train_Data.head(-1))","40b2e739":"print(Main_Test_Data.head(-1))","48bd66ae":"print(Main_Train_Data[\"CATEGORY\"].value_counts())","928f937b":"print(Main_Test_Data[\"CATEGORY\"].value_counts())","af188161":"TTbar_Set = Main_Train_Data[Main_Train_Data[\"CATEGORY\"] == \"TTbar\"]\nQCD_Set = Main_Train_Data[Main_Train_Data[\"CATEGORY\"] == \"QCD\"]\nWjets_Set = Main_Train_Data[Main_Train_Data[\"CATEGORY\"] == \"WJets\"]","cba5411e":"TTbar_Set = TTbar_Set.reset_index()\nQCD_Set = QCD_Set.reset_index()\nWjets_Set = Wjets_Set.reset_index()","5281cd8a":"print(TTbar_Set.head(-1))","b86b4542":"print(QCD_Set.head(-1))","b2a93630":"print(Wjets_Set.head(-1))","ec4d5ded":"figure = plt.figure(figsize=(10,10))\n\nProton_Example_IMG = Main_Train_Data[\"PNG\"][33]\nReading_IMG = cv2.imread(Proton_Example_IMG)\nRGB_Transformed = cv2.cvtColor(Reading_IMG,cv2.COLOR_BGR2RGB)\nplt.xlabel(RGB_Transformed.shape)\nplt.ylabel(RGB_Transformed.size)\nplt.title(Main_Train_Data[\"CATEGORY\"][33])\nplt.imshow(RGB_Transformed)","03078a77":"figure = plt.figure(figsize=(10,10))\n\nProton_Example_IMG = Main_Train_Data[\"PNG\"][22000]\nReading_IMG = cv2.imread(Proton_Example_IMG)\nRGB_Transformed = cv2.cvtColor(Reading_IMG,cv2.COLOR_BGR2RGB)\nplt.xlabel(RGB_Transformed.shape)\nplt.ylabel(RGB_Transformed.size)\nplt.title(Main_Train_Data[\"CATEGORY\"][33])\nplt.imshow(RGB_Transformed)","8d9ddeb7":"figure,axis = plt.subplots(nrows=4,ncols=4,figsize=(12,12))\n\nfor indexing,seting in enumerate(axis.flat):\n    Reading_P_IMG = cv2.imread(Main_Train_Data[\"PNG\"][indexing])\n    Reading_P_IMG = cv2.cvtColor(Reading_P_IMG,cv2.COLOR_BGR2RGB)\n    seting.set_xlabel(Reading_P_IMG.shape)\n    seting.set_ylabel(Reading_P_IMG.size)\n    seting.set_title(Main_Train_Data[\"CATEGORY\"][indexing])\n    seting.imshow(Reading_P_IMG)\n    \nplt.tight_layout()\nplt.show()","2fd8ffef":"TTbar_Example = cv2.imread(TTbar_Set[\"PNG\"][345])\nQCD_Example = cv2.imread(QCD_Set[\"PNG\"][345])\nWjets_Example = cv2.imread(Wjets_Set[\"PNG\"][345])","84a24e40":"figure,axis = plt.subplots(nrows=1,ncols=3,figsize=(20,20))\n\n\nCanny_TTbar = cv2.Canny(TTbar_Example,10,100)\nCanny_QCD = cv2.Canny(QCD_Example,10,100)\nCanny_Wjets = cv2.Canny(Wjets_Example,10,100)\n\naxis[0].imshow(Canny_TTbar)\naxis[1].imshow(Canny_QCD)\naxis[2].imshow(Canny_Wjets)","dba5550f":"figure,axis = plt.subplots(nrows=1,ncols=3,figsize=(20,20))\n\n_,Threshold_TTbar = cv2.threshold(TTbar_Example,90,155,cv2.THRESH_BINARY_INV)\n_,Threshold_QCD = cv2.threshold(QCD_Example,90,155,cv2.THRESH_BINARY_INV)\n_,Threshold_Wjets = cv2.threshold(Wjets_Example,90,155,cv2.THRESH_BINARY_INV)\n\naxis[0].imshow(Threshold_TTbar)\naxis[1].imshow(Threshold_QCD)\naxis[2].imshow(Threshold_Wjets)","12be92fa":"figure,axis = plt.subplots(nrows=1,ncols=3,figsize=(20,20))\n\n_,Threshold_TTbar = cv2.threshold(TTbar_Example,90,155,cv2.THRESH_BINARY_INV)\n_,Threshold_QCD = cv2.threshold(QCD_Example,90,155,cv2.THRESH_BINARY_INV)\n_,Threshold_Wjets = cv2.threshold(Wjets_Example,90,155,cv2.THRESH_BINARY_INV)\n\nCanny_TTbar = cv2.Canny(Threshold_TTbar,10,100)\nCanny_QCD = cv2.Canny(Threshold_QCD,10,100)\nCanny_Wjets = cv2.Canny(Threshold_Wjets,10,100)\n\ncontours_TTbar,_ = cv2.findContours(Canny_TTbar,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\ncontours_QCD,_ = cv2.findContours(Canny_QCD,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\ncontours_Wjets,_ = cv2.findContours(Canny_Wjets,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\n\ndraw_TTBAR = cv2.drawContours(TTbar_Example,contours_TTbar,-1,(255,0,0),1)\ndraw_QCD = cv2.drawContours(QCD_Example,contours_QCD,-1,(255,0,0),1)\ndraw_Wjets = cv2.drawContours(Wjets_Example,contours_Wjets,-1,(255,0,0),1)\n\naxis[0].imshow(draw_TTBAR)\naxis[1].imshow(draw_QCD)\naxis[2].imshow(draw_Wjets)","62025615":"figure = plt.figure(figsize=(20,20))\n\n_,Threshold_TTbar = cv2.threshold(TTbar_Example,90,155,cv2.THRESH_BINARY_INV)\nCanny_TTbar = cv2.Canny(Threshold_TTbar,10,100)\ncontours_TTbar,_ = cv2.findContours(Canny_TTbar,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\ndraw_TTBAR = cv2.drawContours(TTbar_Example,contours_TTbar,-1,(255,0,0),1)\n\nplt.imshow(draw_TTBAR)","b96ae6bc":"figure = plt.figure(figsize=(20,20))\n\n_,Threshold_QCD = cv2.threshold(QCD_Example,90,155,cv2.THRESH_BINARY_INV)\nCanny_QCD = cv2.Canny(Threshold_QCD,10,100)\ncontours_QCD,_ = cv2.findContours(Canny_QCD,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\ndraw_QCD = cv2.drawContours(QCD_Example,contours_QCD,-1,(255,0,0),1)\n\nplt.imshow(draw_QCD)","f7d7eae4":"figure = plt.figure(figsize=(20,20))\n\n_,Threshold_Wjets = cv2.threshold(Wjets_Example,90,155,cv2.THRESH_BINARY_INV)\nCanny_Wjets = cv2.Canny(Threshold_Wjets,10,100)\ncontours_Wjets,_ = cv2.findContours(Canny_Wjets,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\ndraw_Wjets = cv2.drawContours(Wjets_Example,contours_Wjets,-1,(255,0,0),1)\n\nplt.imshow(draw_Wjets)","2fbf1379":"figure = plt.figure(figsize=(20,20))\n\n_,Threshold_TTbar = cv2.threshold(TTbar_Example,90,155,cv2.THRESH_BINARY_INV)\nCanny_TTbar = cv2.Canny(Threshold_TTbar,10,100)\ncontours_TTbar,_ = cv2.findContours(Canny_TTbar,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\ndraw_TTBAR = cv2.drawContours(TTbar_Example,contours_TTbar,-1,(255,0,0),1)\n\nfor cnt in contours_TTbar:\n    x,y,w,h = cv2.boundingRect(cnt)\n    cv2.rectangle(TTbar_Example,(x,y),(x+w,y+h),(0,0,255),2)\n\nplt.imshow(TTbar_Example)","b74a8f77":"figure = plt.figure(figsize=(20,20))\n\n_,Threshold_QCD = cv2.threshold(QCD_Example,90,155,cv2.THRESH_BINARY_INV)\nCanny_QCD = cv2.Canny(Threshold_QCD,10,100)\ncontours_QCD,_ = cv2.findContours(Canny_QCD,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\ndraw_QCD = cv2.drawContours(QCD_Example,contours_QCD,-1,(255,0,0),1)\n\nfor cnt in contours_QCD:\n    x,y,w,h = cv2.boundingRect(cnt)\n    cv2.rectangle(QCD_Example,(x,y),(x+w,y+h),(0,0,255),2)\n\nplt.imshow(QCD_Example)","45964cd7":"figure = plt.figure(figsize=(20,20))\n\n_,Threshold_Wjets = cv2.threshold(Wjets_Example,90,155,cv2.THRESH_BINARY_INV)\nCanny_Wjets = cv2.Canny(Threshold_Wjets,10,100)\ncontours_Wjets,_ = cv2.findContours(Canny_Wjets,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\ndraw_Wjets = cv2.drawContours(Wjets_Example,contours_Wjets,-1,(255,0,0),1)\n\nfor cnt in contours_Wjets:\n    x,y,w,h = cv2.boundingRect(cnt)\n    cv2.rectangle(Wjets_Example,(x,y),(x+w,y+h),(0,0,255),2)\n\nplt.imshow(Wjets_Example)","f5b58202":"figure,axis = plt.subplots(nrows=4,ncols=4,figsize=(12,12))\n\nfor indexing,seting in enumerate(axis.flat):\n    Reading_P_IMG = cv2.imread(TTbar_Set[\"PNG\"][indexing])\n    Reading_P_IMG = cv2.cvtColor(Reading_P_IMG,cv2.COLOR_BGR2RGB)\n    \n    _,Threshold_IMG = cv2.threshold(Reading_P_IMG,90,155,cv2.THRESH_BINARY_INV)\n    Canny_IMG = cv2.Canny(Threshold_IMG,10,100)\n    contours_IMG,_ = cv2.findContours(Canny_IMG,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\n    draw_IMG = cv2.drawContours(Reading_P_IMG,contours_IMG,-1,(255,0,0),1)\n    \n    for cnt in contours_IMG:\n        x,y,w,h = cv2.boundingRect(cnt)\n        cv2.rectangle(Reading_P_IMG,(x,y),(x+w,y+h),(0,0,255),2)\n        \n    seting.set_xlabel(Reading_P_IMG.shape)\n    seting.set_ylabel(Reading_P_IMG.size)\n    seting.imshow(Reading_P_IMG)\n    \nplt.tight_layout()\nplt.show()","66bb6378":"figure,axis = plt.subplots(nrows=4,ncols=4,figsize=(12,12))\n\nfor indexing,seting in enumerate(axis.flat):\n    Reading_P_IMG = cv2.imread(QCD_Set[\"PNG\"][indexing])\n    Reading_P_IMG = cv2.cvtColor(Reading_P_IMG,cv2.COLOR_BGR2RGB)\n    \n    _,Threshold_IMG = cv2.threshold(Reading_P_IMG,90,155,cv2.THRESH_BINARY_INV)\n    Canny_IMG = cv2.Canny(Threshold_IMG,10,100)\n    contours_IMG,_ = cv2.findContours(Canny_IMG,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\n    draw_IMG = cv2.drawContours(Reading_P_IMG,contours_IMG,-1,(255,0,0),1)\n    \n    for cnt in contours_IMG:\n        x,y,w,h = cv2.boundingRect(cnt)\n        cv2.rectangle(Reading_P_IMG,(x,y),(x+w,y+h),(0,0,255),2)\n        \n    seting.set_xlabel(Reading_P_IMG.shape)\n    seting.set_ylabel(Reading_P_IMG.size)\n    seting.imshow(Reading_P_IMG)\n    \nplt.tight_layout()\nplt.show()","d5987ca2":"figure,axis = plt.subplots(nrows=4,ncols=4,figsize=(12,12))\n\nfor indexing,seting in enumerate(axis.flat):\n    Reading_P_IMG = cv2.imread(Wjets_Set[\"PNG\"][indexing])\n    Reading_P_IMG = cv2.cvtColor(Reading_P_IMG,cv2.COLOR_BGR2RGB)\n    \n    _,Threshold_IMG = cv2.threshold(Reading_P_IMG,90,155,cv2.THRESH_BINARY_INV)\n    Canny_IMG = cv2.Canny(Threshold_IMG,10,100)\n    contours_IMG,_ = cv2.findContours(Canny_IMG,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\n    draw_IMG = cv2.drawContours(Reading_P_IMG,contours_IMG,-1,(255,0,0),1)\n    \n    for cnt in contours_IMG:\n        x,y,w,h = cv2.boundingRect(cnt)\n        cv2.rectangle(Reading_P_IMG,(x,y),(x+w,y+h),(0,0,255),2)\n        \n    seting.set_xlabel(Reading_P_IMG.shape)\n    seting.set_ylabel(Reading_P_IMG.size)\n    seting.imshow(Reading_P_IMG)\n    \nplt.tight_layout()\nplt.show()","08c38d36":"figure,axis = plt.subplots(nrows=1,ncols=2,figsize=(20,20))\n\nExample_Image = cv2.cvtColor(TTbar_Example,cv2.COLOR_BGR2GRAY)\n\nHessian_Mat = hessian_matrix(Example_Image,sigma=5,order=\"rc\")\nmax_S,min_S = hessian_matrix_eigvals(Hessian_Mat)\n\naxis[0].imshow(min_S)\naxis[1].imshow(max_S)","8d7b2c0f":"figure,axis = plt.subplots(nrows=1,ncols=2,figsize=(20,20))\n\nExample_Image = cv2.cvtColor(QCD_Example,cv2.COLOR_BGR2GRAY)\n\nHessian_Mat = hessian_matrix(Example_Image,sigma=5,order=\"rc\")\nmax_S,min_S = hessian_matrix_eigvals(Hessian_Mat)\n\naxis[0].imshow(min_S)\naxis[1].imshow(max_S)","94ae1e47":"figure,axis = plt.subplots(nrows=1,ncols=2,figsize=(20,20))\n\nExample_Image = cv2.cvtColor(Wjets_Example,cv2.COLOR_BGR2GRAY)\n\nHessian_Mat = hessian_matrix(Example_Image,sigma=5,order=\"rc\")\nmax_S,min_S = hessian_matrix_eigvals(Hessian_Mat)\n\naxis[0].imshow(min_S)\naxis[1].imshow(max_S)","1cb83a36":"figure = plt.figure(figsize=(20,20))\n\nExample_Image = cv2.cvtColor(TTbar_Example,cv2.COLOR_BGR2GRAY)\n_,Threshold_Image = cv2.threshold(Example_Image,10,255,cv2.THRESH_BINARY_INV)\n\nArr_IMG = np.array(Example_Image > Threshold_Image).astype(int)\nSkeleton_IMG = skimage.morphology.skeletonize(Arr_IMG)\n\nplt.imshow(Skeleton_IMG)","70421fd5":"figure = plt.figure(figsize=(20,20))\n\nExample_Image = cv2.cvtColor(QCD_Example,cv2.COLOR_BGR2GRAY)\n_,Threshold_Image = cv2.threshold(Example_Image,10,255,cv2.THRESH_BINARY_INV)\n\nArr_IMG = np.array(Example_Image > Threshold_Image).astype(int)\nSkeleton_IMG = skimage.morphology.skeletonize(Arr_IMG)\n\nplt.imshow(Skeleton_IMG)","c704f85e":"figure = plt.figure(figsize=(20,20))\n\nExample_Image = cv2.cvtColor(Wjets_Example,cv2.COLOR_BGR2GRAY)\n_,Threshold_Image = cv2.threshold(Example_Image,10,255,cv2.THRESH_BINARY_INV)\n\nArr_IMG = np.array(Example_Image > Threshold_Image).astype(int)\nSkeleton_IMG = skimage.morphology.skeletonize(Arr_IMG)\n\nplt.imshow(Skeleton_IMG)","1ec04dff":"Splitting_Data = Main_Train_Data[:20000]","e69468a0":"print(Splitting_Data.head(-1))","f057d49b":"Splitting_Test_Data = Main_Test_Data[:20000]","c2b2f0ca":"print(Splitting_Test_Data.head(-1))","d8bc6591":"Train_IMG_Generator = ImageDataGenerator(rescale=1.\/255,\n                                        zoom_range=0.5,\n                                        shear_range=0.5,\n                                        horizontal_flip=True,\n                                        vertical_flip=False,\n                                         featurewise_std_normalization=False,\n                                         samplewise_center=False,\n                                         samplewise_std_normalization=False,\n                                         fill_mode=\"nearest\",\n                                        validation_split=0.1)","c942654a":"Test_IMG_Generator = ImageDataGenerator(rescale=1.\/255)","f0e78680":"Example_Proton_IMG = cv2.imread(Splitting_Data[\"PNG\"][45])\nExample_Proton_IMG = Example_Proton_IMG.reshape((1,)+Example_Proton_IMG.shape)\n\n\ni = 0\n\nfor batch in Train_IMG_Generator.flow(Example_Proton_IMG,batch_size=32):\n    \n    figure = plt.figure(figsize=(20,20))\n    plt.imshow(image.img_to_array(batch[0]))\n    \n    i += 1\n    if i % 4 == 0:\n        break\nplt.show()","f3e0c14a":"Train_IMG_Set = Train_IMG_Generator.flow_from_dataframe(dataframe=Splitting_Data,\n                                                       x_col=\"PNG\",\n                                                       y_col=\"CATEGORY\",\n                                                       class_mode=\"categorical\",\n                                                       color_mode=\"rgb\",\n                                                       subset=\"training\")","3bc235c4":"Validation_IMG_Set = Train_IMG_Generator.flow_from_dataframe(dataframe=Splitting_Data,\n                                                       x_col=\"PNG\",\n                                                       y_col=\"CATEGORY\",\n                                                       class_mode=\"categorical\",\n                                                       color_mode=\"rgb\",\n                                                       subset=\"validation\")","6c5c73e2":"Test_IMG_Set = Test_IMG_Generator.flow_from_dataframe(dataframe=Splitting_Test_Data,\n                                                       x_col=\"PNG\",\n                                                       y_col=\"CATEGORY\",\n                                                       class_mode=\"categorical\",\n                                                       color_mode=\"rgb\",\n                                                     shuffle=False)","da6e1c7d":"print(\"TRAIN: \")\nprint(Train_IMG_Set.class_indices)\nprint(Train_IMG_Set.classes[0:5])\nprint(Train_IMG_Set.image_shape)\nprint(\"---\"*20)\nprint(\"VALIDATION: \")\nprint(Validation_IMG_Set.class_indices)\nprint(Validation_IMG_Set.classes[0:5])\nprint(Validation_IMG_Set.image_shape)\nprint(\"---\"*20)\nprint(\"TEST: \")\nprint(Test_IMG_Set.class_indices)\nprint(Test_IMG_Set.classes[0:5])\nprint(Test_IMG_Set.image_shape)","5df87018":"Model = Sequential()\n\nModel.add(SeparableConv2D(12,(3,3),activation=\"relu\",\n                 input_shape=(256,256,3)))\nModel.add(BatchNormalization())\nModel.add(MaxPooling2D((2,2)))\n\n#\nModel.add(SeparableConv2D(24,(3,3),\n                 activation=\"relu\",padding=\"same\"))\nModel.add(Dropout(0.2))\nModel.add(MaxPooling2D((2,2)))\n\n\n#\nModel.add(TimeDistributed(Flatten()))\nModel.add(Bidirectional(LSTM(64,\n                                  return_sequences=True,\n                                  dropout=0.5,\n                                  recurrent_dropout=0.5)))\nModel.add(Bidirectional(LSTM(64,\n                                  return_sequences=True,\n                                  dropout=0.5,\n                                  recurrent_dropout=0.5)))\n\n#\nModel.add(Flatten())\nModel.add(Dense(128,activation=\"relu\"))\nModel.add(Dropout(0.5))\nModel.add(Dense(3,activation=\"softmax\"))","15a0885e":"print(Model.summary())","704eafa3":"plot_model(Model,show_shapes=True,show_dtype=True,show_layer_names=True)","72246118":"Callback_Stop_Early = tf.keras.callbacks.EarlyStopping(monitor=\"loss\",patience=3)","d79105ee":"lossfunc = tf.keras.losses.CategoricalCrossentropy(from_logits=True)","644c29c4":"Model.compile(optimizer=\"adam\",loss=lossfunc,metrics=[\"accuracy\"])","ead300d0":"CNN_Model = Model.fit(Train_IMG_Set,\n                      validation_data=Validation_IMG_Set,\n                      callbacks=Callback_Stop_Early,batch_size=32,\n                      epochs=50)","94c86f67":"Model.save(\"Prediction_Model.h5\")","50d99e86":"Grap_Data = pd.DataFrame(CNN_Model.history)","789a321c":"Grap_Data.plot()","1d6ee9f6":"plt.plot(CNN_Model.history[\"accuracy\"])\nplt.plot(CNN_Model.history[\"val_accuracy\"])\nplt.ylabel(\"ACCURACY\")\nplt.legend()\nplt.show()","a2f01389":"plt.plot(CNN_Model.history[\"loss\"])\nplt.plot(CNN_Model.history[\"val_loss\"])\nplt.ylabel(\"LOSS\")\nplt.legend()\nplt.show()","7f2d31f3":"Model_Results = Model.evaluate(Test_IMG_Set)\nprint(\"LOSS:  \" + \"%.4f\" % Model_Results[0])\nprint(\"ACCURACY:  \" + \"%.2f\" % Model_Results[1])","b3172a23":"Model_Test_Prediction = Model.predict(Test_IMG_Set)","92376b6e":"Model_Test_Prediction = Model_Test_Prediction.argmax(axis=-1)\nprint(Model_Test_Prediction)","744903ed":"Model_Test_Prediction_Classes = Model.predict_classes(Test_IMG_Set)\nprint(Model_Test_Prediction_Classes)","526750c1":"fig, axes = plt.subplots(nrows=5,\n      save_weights            ncols=5,\n                         figsize=(20, 20),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(Splitting_Test_Data[\"PNG\"].iloc[i]))\n    ax.set_title(f\"PREDICTION:{Model_Test_Prediction[i]}\")\n    ax.set_xlabel(Splitting_Test_Data[\"CATEGORY\"].iloc[i])\nplt.tight_layout()\nplt.show()","2e4f8b90":"#### HOW TO LOOK BY GENERATOR","ecdf7555":"#### MAIN","7f024ba5":"#### PNG LABELS","566deccf":"#### SPECIFICALLY","aa54c533":"# PACKAGES AND LIBRARIES","aacdde10":"#### CHECKING","381f204a":"#### TO SERIES","971d8fbd":"# MODEL","48464750":"#### TO DATAFRAME","5b0ce901":"# IMAGE GENERATOR","69b3bd69":"#### PNG PATH","e921e327":"#### CHECKING CATEGORIES","8b77fa69":"#### CATEGORY SPLITTING","a70a0005":"#### GENERATOR STRUCTURE","d6de2795":"# VISUALIZATION","32b47766":"#### APPLYING","4ccffe42":"# SPLITTING DATA","b547fea7":"# PATH AND LABEL PROCESS","65c2f663":"#### GENERALLY","cf070e59":"#### SHUFFLING"}}