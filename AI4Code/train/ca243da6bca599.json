{"cell_type":{"1f2da827":"code","5680563b":"code","ab754f98":"code","6e2187c6":"code","be7afc2b":"code","3c55359a":"code","f22a211a":"code","1340e9f0":"code","7002a419":"code","353d2b79":"code","0c913363":"code","48a7e883":"code","17d1a098":"code","46cf240b":"markdown","d5c709a3":"markdown","4cfca43b":"markdown","ef39e6d2":"markdown","d4119130":"markdown","f5f36b4b":"markdown"},"source":{"1f2da827":"%%time\n\nimport os\nimport logging\nimport sys\nimport warnings\nwarnings.simplefilter(\"ignore\")\n\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import roc_auc_score\n\nfrom lightgbm import LGBMClassifier","5680563b":"%%time\n\nfolds_dir = \"..\/input\/tps-october-2021-skfolds\/\"\ndata_dir = \"..\/input\/tabular-playground-series-oct-2021\/\"\n\ntrain  = pd.read_csv(folds_dir + \"train_folds.csv\")\ntest = pd.read_csv(data_dir + \"test.csv\")\nsubmission = pd.read_csv(data_dir + \"sample_submission.csv\")\n\nTARGET = \"target\"","ab754f98":"%%time\n\ntrain.head()","6e2187c6":"%%time\n\ntest.head()","be7afc2b":"%%time\n\nfeatures = [col for col in train.columns if col not in [\"id\", \"kfold\", TARGET]]\n\nprint(f\"All features {len(features)}:\")\nfor feat in features:\n    print(feat, end=\" \")","3c55359a":"%%time\n\ncont_features = []\ncat_features = []\n\nfor feat in features:\n    if \"int\" in str(train[feat].dtype):\n        cat_features.append(feat)\n    else:\n        cont_features.append(feat)\n\nprint(f\"Categorical features ({len(cat_features)}):\")\nfor feat in cat_features:\n    print(feat, end=\" \")\n\nprint(f\"\\n\\nContinuous features ({len(cont_features)}):\")\nfor feat in cont_features:\n    print(feat, end=\" \")","f22a211a":"%%time\n\nprint(\"Train info:\")\nprint(train.info(), end='\\n\\n')\n\nprint(\"Test info:\")\nprint(test.info(), end='\\n\\n')","1340e9f0":"%%time\n\n## https:\/\/www.kaggle.com\/hiro5299834\/tps-oct-2021-single-lightgbm\n\ntrain[cont_features] = train[cont_features].astype(\"float32\")\ntrain[cat_features] = train[cat_features].astype(\"uint8\")\n\ntest[cont_features] = test[cont_features].astype(\"float32\")\ntest[cat_features] = test[cat_features].astype(\"uint8\")","7002a419":"%%time\n\nprint(\"Train info:\")\nprint(train.info(), end='\\n\\n')\n\nprint(\"Test info:\")\nprint(test.info(), end='\\n\\n')","353d2b79":"%%time\n\npl = Pipeline([\n    (\"scaler\", RobustScaler())\n])\n\ntrain[features] = pl.fit_transform(train[features])\ntest[features] = pl.transform(test[features])","0c913363":"%%time\n\ndef predict(train, test, folds=5):\n    test_preds = []\n    valid_preds = {}\n    scores = []\n    \n    params = {\n        \"random_state\": 42,\n        \"n_estimators\": 1000,\n        \"objective\" : \"binary\",\n        \"metric\" : \"auc\",\n    }\n    \n    for fold in range(folds):\n        x_train = train[train.kfold != fold].reset_index(drop=True)\n        x_valid = train[train.kfold == fold].reset_index(drop=True)\n        x_test = test.copy()\n        \n        valid_ids = x_valid.id.values.tolist()\n\n        y_train = x_train[TARGET]\n        y_valid = x_valid[TARGET]\n\n        x_train = x_train[features]\n        x_valid = x_valid[features]\n\n        model = LGBMClassifier(**params)\n        model.fit(\n            x_train, y_train,\n            eval_set=[(x_valid, y_valid)],\n            eval_metric=\"auc\",\n            early_stopping_rounds=150,\n            verbose=1000\n        )\n        \n        valid_pred = model.predict_proba(x_valid)[:, 1]\n        test_pred = model.predict_proba(x_test)[:, 1]\n        \n        test_preds.append(test_pred)\n        valid_preds.update(dict(zip(valid_ids, valid_pred)))\n\n        score = roc_auc_score(y_valid, valid_pred)\n        print(f\"Fold {fold} | AUC: {score}\")\n        scores.append(score)\n    \n    test_preds = np.mean(np.column_stack(test_preds), axis=1)\n    valid_preds = pd.DataFrame.from_dict(valid_preds, orient=\"index\").reset_index()\n    \n    return test_preds, valid_preds, scores","48a7e883":"%%time\n\ntest_preds, valid_preds, scores = predict(train, test[features])\nprint(np.mean(scores), np.std(scores))","17d1a098":"%%time\n\nvalid_preds.columns = [\"id\", \"lgb_pred_1\"]\nvalid_preds.to_csv(\"lgb_train_1.csv\", index=False)\n\ntest_preds_df = pd.DataFrame({\"id\": submission.id, \"lgb_pred_1\": test_preds})\ntest_preds_df.to_csv(\"lgb_test_1.csv\", index=False)\n\nsub = pd.DataFrame({\"id\": submission.id, TARGET: test_preds})\nsub.to_csv(\"submission.csv\", index=False)","46cf240b":"## Load datasets","d5c709a3":"## Import libraries","4cfca43b":"## Preprocessing","ef39e6d2":"## Save","d4119130":"## TPS October 2021 - LightGBM base model","f5f36b4b":"## Predict"}}