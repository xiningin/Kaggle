{"cell_type":{"39b1cd67":"code","a34edbb0":"code","09cb97cb":"code","f729ddf2":"code","c2874d51":"code","8ccf9818":"code","e509514d":"code","cb07e94e":"code","68ff8868":"code","b4753ea9":"code","8154177c":"code","ac6dd503":"code","f9b1f340":"code","572a552c":"code","2203a9af":"code","437e8d75":"code","d8bc51f6":"code","d30a72dc":"code","aacea9d8":"code","16214b9c":"code","3b91c79a":"code","19e0cfed":"code","e7914e3d":"code","c7c09846":"code","3dc187b1":"code","eaf077cd":"code","aeb24e7e":"code","d9b43368":"markdown","976e44c6":"markdown","779dd99e":"markdown","1536cba4":"markdown"},"source":{"39b1cd67":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","a34edbb0":"train_initial = pd.read_csv('..\/input\/train.csv')\ntest_initial = pd.read_csv('..\/input\/test.csv')","09cb97cb":"train = train_initial.drop(columns=['LotFrontage', 'Alley', 'FireplaceQu', 'PoolQC', 'Fence', 'MiscFeature'])\ntest = test_initial.drop(columns=['LotFrontage', 'Alley', 'FireplaceQu', 'PoolQC', 'Fence', 'MiscFeature'])","f729ddf2":"train.head()","c2874d51":"train.shape","8ccf9818":"train = train.fillna(method=\"bfill\")\ntest = test.fillna(method=\"bfill\")","e509514d":"p = sns.countplot(data=train, x=\"MSSubClass\") \n# Type of dwelling involved in the sale\n #   20  1-STORY 1946 & NEWER ALL STYLES\n #   30  1-STORY 1945 & OLDER\n #   40  1-STORY W\/FINISHED ATTIC ALL AGES\n #   45  1-1\/2 STORY - UNFINISHED ALL AGES\n #   50  1-1\/2 STORY FINISHED ALL AGES\n #   60  2-STORY 1946 & NEWER\n #   70  2-STORY 1945 & OLDER\n #   75  2-1\/2 STORY ALL AGES\n #   80  SPLIT OR MULTI-LEVEL\n #   85  SPLIT FOYER\n #   90  DUPLEX - ALL STYLES AND AGES\n #  120  1-STORY PUD (Planned Unit Development) - 1946 & NEWER\n #  150  1-1\/2 STORY PUD - ALL AGES\n #  160  2-STORY PUD - 1946 & NEWER\n #  180  PUD - MULTILEVEL - INCL SPLIT LEV\/FOYER\n #  190  2 FAMILY CONVERSION - ALL STYLES AND AGES","cb07e94e":"p = sns.countplot(data=train, x=\"MSZoning\")\n# General Zoning Classification of the sale\n #  A    Agriculture\n #  C    Commercial\n #  FV   Floating Village Residential\n #  I    Industrial\n #  RH   Residential High Density\n #  RL   Residential Low Density\n #  RP   Residential Low Density Park \n #  RM   Residential Medium Density","68ff8868":"plt.figure(figsize=(35,25))\np = sns.heatmap(train.corr(), annot=True)","b4753ea9":"p = sns.countplot(data=train, x=\"OverallQual\")\n# Overall Quality of the house\n#   10   Very Excellent\n#   9    Excellent\n#   8    Very Good\n#   7    Good\n#   6    Above Average\n#   5    Average\n#   4    Below Average\n#   3    Fair\n#   2    Poor\n#   1    Very Poor","8154177c":"# Years in which houses were built\nplt.figure(figsize=(20, 10))\np = sns.countplot(data=train, x=\"YearBuilt\")\n_ = plt.setp(p.get_xticklabels(), rotation=90)","ac6dd503":"plt.figure(figsize=(10, 5))\nplt.title(\"Sales Price Distribution\")\np = sns.distplot(train[\"SalePrice\"], color='g')","f9b1f340":"attributes_train = ['SalePrice', 'MSSubClass', 'MSZoning', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd', 'TotalBsmtSF','1stFlrSF', 'GrLivArea', 'FullBath', 'TotRmsAbvGrd', 'MasVnrType', 'LotArea', 'GarageCars', 'GarageArea', 'EnclosedPorch']\nattributes_test =  ['MSSubClass', 'MSZoning', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd', 'TotalBsmtSF', '1stFlrSF', 'GrLivArea', 'FullBath', 'TotRmsAbvGrd', 'MasVnrType', 'LotArea', 'GarageCars', 'GarageArea', 'EnclosedPorch']\ntrain_clean = train[attributes_train]\ntest_clean =test[attributes_test]","572a552c":"train_clean.loc[:, 'MSZoning'] = train_clean.loc[:, 'MSZoning'].apply(lambda x: {'RL': 0, 'RM': 1, 'C (all)': 2, 'FV': 3, 'RH': 4}[x])\ntrain_clean.loc[:, 'MasVnrType'] = train_clean.loc[:, 'MasVnrType'].apply(lambda x: {'BrkFace': 0, 'None': 1, 'Stone': 2, 'BrkCmn': 3, 'nan': 4}[x])\ntest_clean.loc[:, 'MSZoning'] = test_clean.loc[:, 'MSZoning'].apply(lambda x: {'RL': 0, 'RM': 1, 'C (all)': 2, 'FV': 3, 'RH': 4}[x])\ntest_clean.loc[:, 'MasVnrType'] = test_clean.loc[:, 'MasVnrType'].apply(lambda x: {'BrkFace': 0, 'None': 1, 'Stone': 2, 'BrkCmn': 3, 'nan': 4}[x])","2203a9af":"from sklearn.model_selection import train_test_split\ntrain_df = train_clean.drop(columns=['SalePrice'])","437e8d75":"X_train, X_test, Y_train, Y_test = train_test_split(train_df, train['SalePrice'], test_size=0.1, random_state=42)","d8bc51f6":"from sklearn import ensemble","d30a72dc":"model = ensemble.GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05, max_depth=3, max_features='sqrt',\n                                               min_samples_leaf=15, min_samples_split=10, loss='huber')","aacea9d8":"model.fit(X_train, Y_train)","16214b9c":"from sklearn import tree","3b91c79a":"model_tree = tree.DecisionTreeRegressor()","19e0cfed":"model_tree.fit(X_train, Y_train)","e7914e3d":"model.score(X_test, Y_test)","c7c09846":"model_tree.score(X_test, Y_test)","3dc187b1":"model.fit(X_train, Y_train)\nmodel_tree.fit(X_train, Y_train)","eaf077cd":"predictions = model.predict(test_clean)","aeb24e7e":"submission = pd.DataFrame({'Id': test.Id, 'SalePrice': predictions})\nsubmission.to_csv('submission.csv', index=False)","d9b43368":"### Data Cleaning and Feature Selection","976e44c6":"In this kernel we will use the given dataset about the various with many different features. We will first analyse the data and will do some basic exploration. Then we will try to make the predictions for the house prices.","779dd99e":"### Visualising the data","1536cba4":"# Housing Price Prediction"}}