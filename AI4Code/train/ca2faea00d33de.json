{"cell_type":{"1b5cfc1a":"code","4af7908b":"code","8f0ae75a":"code","6b919fa5":"code","175d1f71":"code","b76cbdd1":"code","aba852f7":"code","c17fe2d0":"code","f90c1030":"code","2150b07a":"code","c7434fcd":"code","00b9f798":"code","00769bed":"code","8f6d4d5c":"markdown","3badac65":"markdown","47229da3":"markdown","8ebbffd5":"markdown","aba803c7":"markdown","43a1418d":"markdown","91e258fa":"markdown","0d7c144e":"markdown","7cb690c5":"markdown","679daed4":"markdown","865ba08f":"markdown"},"source":{"1b5cfc1a":"import pandas as pd\nimport matplotlib\nimport seaborn as sns\n\nsns.set(style=\"whitegrid\", palette=\"autumn\", rc={\"figure.figsize\": (10, 6)})","4af7908b":"data = pd.read_csv(\n    \"..\/input\/association-rule-learningapriori\/Market_Basket_Optimisation.csv\",\n    header=None,\n    prefix=\"item_\"\n)\n\nprint(\n    f\"There were a total of {data.shape[0]:,} transactions, each containing\",\n    f\"between {data.notna().sum(axis=1).min()} and {data.shape[1]} items.\"\n)\ndata.head()","8f0ae75a":"sorted(data.melt()[\"value\"].dropna().unique())[:5]","6b919fa5":"# remove trailing and leading whitespace e.g. ' asparagus' to 'asparagus'\nfor col in data.columns:\n    data[col] = data[col].str.strip()\n\nsorted(data.melt()[\"value\"].dropna().unique())[:5]","175d1f71":"all_items = data.melt()[\"value\"].dropna().sort_values()\nprint(f\"There were {all_items.nunique()} different products:\\n\", all_items.unique())","b76cbdd1":"item_counts = all_items.value_counts()\n\nax = item_counts.nlargest(15).plot(kind=\"bar\")\nax.set_title(\"Best Selling Items\", size=20, weight=500, pad=15)\nax.set_ylabel(\"Count\")\n\nfor p in ax.patches:\n    ax.annotate(f\"{p.get_height():,}\", xy=(p.get_x(), p.get_height()), size=9)","aba852f7":"ax = item_counts.nsmallest(15).plot(kind=\"bar\")\nax.set_title(\"Least Selling Items\", size=20, weight=500, pad=15)\nax.set_ylabel(\"Count\")\n\nfor p in ax.patches:\n    ax.annotate(f\"{p.get_height():,}\", xy=(p.get_x(), p.get_height()), size=10)","c17fe2d0":"basket_sizes = data.notna().apply(sum, axis=1)\n\nax = basket_sizes.value_counts().plot.bar()\nax.set_title(\"Distribution of Basket Sizes\", size=20, weight=500, pad=15)\nax.set_ylabel(\"Count\")\nax.set_xlabel(\"Number of items in a single transaction.\")\n\nfor p in ax.patches:\n    ax.annotate(f\"{p.get_height():,}\", xy=(p.get_x(), p.get_height()), size=8)","f90c1030":"items_in_largest_transactions = data[basket_sizes > 15].melt()['value'].dropna()\n\npie_data = items_in_largest_transactions.value_counts()\nax = pie_data.plot.pie(\n    cmap=\"autumn\",\n    explode=[0.2] * 2 + [0.1] * 59,\n    figsize=(12, 12),\n    autopct=lambda pct: f\" {pct * 0.01 * pie_data.sum():.0f} of 8\",\n    pctdistance=0.8,\n    textprops={\"size\": 9},\n)\nax.set_title(\"Appearances in the 8 Largest Transactions\", size=20, pad=25)\nax.set_ylabel(\"\")\nax.figure.tight_layout()","2150b07a":"single_items = data[basket_sizes == 1][\"item_0\"].value_counts()\nax = single_items.head(15).plot.bar()\nax.set_title(\"Items Commonly Bought Alone\", size=20, pad=15, weight=500)\nax.set_ylabel(\"Number of times bought alone\")\n\nfor p in ax.patches:\n    ax.annotate(f\"{p.get_height():,}\", xy=(p.get_x(), p.get_height()), size=8)","c7434fcd":"!pip -qq install apyori","00b9f798":"baskets = [set(row.dropna()) for _, row in data[basket_sizes > 1].iterrows()]\nbaskets[-5:]","00769bed":"import apyori\n\n# The apyori.apriori method returns a generator object\nassociation_rules = apyori.apriori(baskets, min_support=0.03, min_confidence=0.3)\n\n\nfor rule in association_rules:\n    items = list(rule.items)\n    print(\n        f\"{items[:-1]}  --> [{items[-1]}]     Support: {rule.support:.3f}\"\n        f\"  Confidence: {rule.ordered_statistics[0].confidence:.3f}\"\n    )","8f6d4d5c":"## 4.1 Preprocessing\n\nData input to the `apyori.apriori` method is required as a list of 'baskets' i.e collections of items. \n\nIn order to find item relationships, these baskets must include more than 1 item. We'll need to discard singleton transactions.","3badac65":"# 4. Association Rule Mining\n\n##  Basic Concepts\n\n### 1. Association Rule\n\nA statement of the form: \n$$ {\\{  antecedent(s) \\}} => {\\{ consequent \\}} $$ \n\ne.g $ {\\{ bread, cheese \\}} => {\\{ lettuce \\}} $, implying that those who purchase *bread* along with *cheese* are likely to add *lettuce* (all 3 are sandwich ingredients).\n\n### 2. Support\n\nHow frequently a set of items appears in the transaction data. A rule with a support of 0.1 indicates that the items in question appear together in 10% of the trancactions.\n\n### 3. Confidence\n\nA measure of how often an association rule has proved to be true.\n\n[learm more here..][1]\n\nIn this example, we'll be using the [apyori][2] Python package to implement the [*Apriori algorithm*][3].\n\n[1]: https:\/\/en.wikipedia.org\/wiki\/Association_rule_learning\n[2]: https:\/\/pypi.org\/project\/apyori\/\n[3]: https:\/\/en.wikipedia.org\/wiki\/Apriori_algorithm\n    \n","47229da3":"## 3.5 What's in the smallest transactions?\n\n*Cookies* were the item most often bought alone.","8ebbffd5":"## 3.3 Basket sizes\n\nA bulk of the transactions involved just a solitary item. \n\nThere's an inverse relationship between number of items purchased (basket size) and fequency of purchase.","aba803c7":"# 2. Data Cleaning\n\nSome items e.g asparagus appear in multiple forms due to leading\/trailing whitespace.","43a1418d":"## 3.2 Worst performing products\n\nAssuming that only one unit of each item was bought in each transaction, **water spray** is sold the least.","91e258fa":"## 4.3 Association rules","0d7c144e":"# 1. Introduction\n\nThe dataset is a record of transactions, perhaps from a supermarket. Each row is a *transaction*.\n\nWe'll refer to the rows as \"baskets\", since they represent the items bought together in a single transaction.","7cb690c5":"## 3.1 Best-selling products\n\nAssuming that only one unit of each item was bought in each transaction, **mineral water** is the most purchased product.","679daed4":"## 3.4 What's in the largest transactions?\n\n*Spaghetti* and *salmon* are in 6 out of the eight largest transactions..","865ba08f":"# 3. Exploratory Data Analysis"}}