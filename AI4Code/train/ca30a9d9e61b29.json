{"cell_type":{"2026c5f0":"code","7e715891":"code","90884514":"code","aa5a296f":"code","513382e3":"code","d5c6f2ff":"code","6d256f14":"code","d6fb642c":"code","0d765594":"code","aca3526f":"code","fbc14409":"code","c97e1518":"code","de609849":"code","44035e88":"code","5f4f0df3":"code","af58116c":"code","3ea5a239":"code","ca23f776":"code","b1f252cf":"code","7a2a7ce7":"code","fe3b40fb":"code","dc1c92a0":"code","4c533aa4":"code","8b6ed326":"code","5fea8d2e":"code","33e44ae0":"code","db14c274":"code","8617f73c":"code","80555b9c":"code","a47a9f87":"code","21a66c8a":"code","b714275d":"code","42448053":"code","92abcd59":"code","29c930e2":"code","8a78ffa5":"code","d932da60":"code","94ffa994":"code","21ee0777":"code","ccc8c2f8":"code","c3aa12eb":"code","51d12ad9":"code","bf635186":"code","2a647651":"code","720ccf25":"code","c53cb33f":"code","60dd9bc0":"code","035c5174":"code","41a551f3":"code","74a102bb":"code","c37fb6b0":"code","094e67b0":"code","56e8a2fd":"code","833c9ca2":"code","8f742868":"code","b8a8ea37":"code","61585628":"code","65297a00":"code","f3c60981":"code","c72bb2c7":"code","5d580d22":"code","0adc9b55":"code","84b50f0c":"code","876bc401":"code","61159e31":"code","4c869869":"code","b94c4ab8":"code","abe287fd":"code","c283a00d":"markdown","21151974":"markdown","e6a96fdf":"markdown","aa22f2d0":"markdown","6d6540a8":"markdown","f5e828f6":"markdown","cda057a3":"markdown","9ea6b187":"markdown","23ee496a":"markdown","1a9e56f0":"markdown","d0629d28":"markdown","6fed454a":"markdown","8c487998":"markdown","2be2bc58":"markdown","d0dd3cd3":"markdown","fe17ef5f":"markdown","46f3b3aa":"markdown","174caf57":"markdown","390833ce":"markdown","6130daf0":"markdown","df70f311":"markdown","350cc457":"markdown","4427182a":"markdown","640eb14b":"markdown","d29b83ee":"markdown","6de2f045":"markdown","5eafd33f":"markdown","24f5760b":"markdown","7387b7f6":"markdown","2fdd51ea":"markdown","d12b51c0":"markdown","5318aa3c":"markdown","90648788":"markdown","de800fdd":"markdown","5bb1d2c0":"markdown","ec49b9d4":"markdown","ec2f03d0":"markdown","c95c5287":"markdown","b569cfee":"markdown","7c08ecb4":"markdown","876d5061":"markdown","fc093f1e":"markdown","6bb6910f":"markdown","b569571e":"markdown","a5e7524e":"markdown","3005e6ef":"markdown","b5078cbf":"markdown","14bbbbaf":"markdown","5861b0d8":"markdown","27fcd2e4":"markdown","a9b84c69":"markdown","57ff9b61":"markdown","3b8d568e":"markdown","10961980":"markdown","91958090":"markdown","5090076f":"markdown","6a4621ff":"markdown","635bd560":"markdown"},"source":{"2026c5f0":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))","7e715891":"crime_records = pd.read_csv(\"..\/input\/crime_records.csv\")\ncrime_records.head()","90884514":"# my personal reusable function for detecting missing data\ndef missing_value_describe(data):\n    # check missing values in training data\n    missing_value_stats = (data.isnull().sum() \/ len(data)*100)\n    missing_value_col_count = sum(missing_value_stats > 0)\n    missing_value_stats = missing_value_stats.sort_values(ascending=False)[:missing_value_col_count]\n    print(\"Number of columns with missing values:\", missing_value_col_count)\n    if missing_value_col_count != 0:\n        # print out column names with missing value percentage\n        print(\"\\nMissing percentage (desceding):\")\n        print(missing_value_stats)\n    else:\n        print(\"No missing data!!!\")\nmissing_value_describe(crime_records)","aa5a296f":"print(\"the dimension:\", crime_records.shape)","513382e3":"crime_records['TYPE'].value_counts()","d5c6f2ff":"# crime type distribution\nnameplot = crime_records['TYPE'].value_counts().plot.bar(title='Count of each type of crime happened in Vancouver', figsize=(8,6))\nnameplot.set_xlabel('category',size=20)\nnameplot.set_ylabel('crime count',size=20)","6d256f14":"import plotly.graph_objects as go\n\nfig = go.Figure(data=go.Scatterpolar(\n  r=crime_records['TYPE'].value_counts(),\n  theta=crime_records['TYPE'].value_counts().index,\n  fill='toself'\n))\n\nfig.update_layout(\n    polar=dict(\n        radialaxis=dict(\n        visible=True\n     ),\n    ),\n    showlegend=False,\n    title_text=\"Vancouver Crime Record Radar Chart by Crime Type\",\n    autosize=True\n)\n\nfig.show()","d6fb642c":"\"\"\"\nCreate empty dataframe to store the crime count over the years in Vancouver\n\"\"\"\n# year values\nyear_labels = sorted(crime_records[\"YEAR\"].unique())\n\n# crime types\ncrime_types = sorted(crime_records[\"TYPE\"].unique().tolist())\n\n# Create the pandas DataFrame \ncrime_count_by_year = pd.DataFrame(columns =[\"year\"]) \ncrime_count_by_year[\"year\"] = year_labels\ncrime_count_by_year","0d765594":"# gather yearly count of crime in Vancouver\nfor current_type in crime_types:\n    current_crime = crime_records[crime_records[\"TYPE\"]==current_type]\n    current_crime_counts = current_crime[\"YEAR\"].value_counts(sort=False)\n    current_crime_index = current_crime_counts.index.tolist()\n    current_crime_index, current_crime_counts = zip(*sorted(zip(current_crime_index, current_crime_counts)))\n    crime_count_by_year[current_type] = current_crime_counts\ncrime_count_by_year","aca3526f":"# Create traces\nfig = go.Figure()\nfor current_crime in crime_types:\n    current_type_count = crime_count_by_year[current_crime]\n    fig.add_trace(\n        go.Scatter(\n            x=year_labels, \n            y=current_type_count,\n            mode='lines+markers',\n            name=current_crime\n        )\n    )\n# Edit the layout\nfig.update_layout(title='Crimes Over the Years in Vancouver by Type',\n                    xaxis_title='Year',\n                    yaxis_title='Absolute Change',\n                    autosize=True,\n                    height=570\n                 )\n\nfig.update_layout(legend_orientation=\"h\")\n\nfig.show()","fbc14409":"baseline_year = crime_count_by_year.iloc[0,1:]\ncrime_count_by_year_percent_change = 100 * round((crime_count_by_year.iloc[:,1:] - baseline_year) \/ baseline_year, 2)\ncrime_count_by_year_percent_change[\"year\"] = year_labels\ncrime_count_by_year_percent_change","c97e1518":"# Create traces\nfig = go.Figure()\nfor current_crime in crime_types:\n    current_type_count = crime_count_by_year_percent_change[current_crime]\n    fig.add_trace(\n        go.Scatter(\n            x=year_labels, \n            y=current_type_count,\n            mode='lines+markers',\n            name=current_crime\n        )\n    )\n# Edit the layout\nfig.update_layout(title='Percent Change of Crimes Over the Years in Vancouver by Type',\n                    xaxis_title='Year',\n                    yaxis_title='Percent Change (%)',\n                    autosize=True,\n                    height=570\n                 )\nfig.update_layout(legend_orientation=\"h\")\nfig.show()","de609849":"from plotly.subplots import make_subplots\n\nfig = make_subplots(\n    rows=6, cols=2,\n    subplot_titles=[str(i+1) + \". \" + crime_types[i] for i in range(len(crime_types))]\n)\n\n# function to update row and col for adding subplots\ncurrent_row = 1\ncurrent_col = 1\ndef update_row_col(current_row, current_col):\n    if current_col < 2:\n        current_col += 1\n    else:\n        current_col = 1\n        current_row += 1\n    return current_row, current_col\n\n# add trace to the subplot\ncurrent_count = 1\nfor current_crime in crime_types:\n    current_type_count = crime_count_by_year[current_crime]\n    fig.add_trace(\n        go.Scatter(\n            x=year_labels, \n            y=current_type_count,\n            mode='lines+markers',\n            name=current_crime\n        ),\n        row=current_row, col=current_col\n    )\n    current_row, current_col = update_row_col(current_row, current_col)\n\nfig.update_layout(\n    height=1500, \n    width=900,\n    title_text=\"Crimes in Vancouver Over the Years\"\n)\n\nfig.update_layout(legend_orientation=\"h\")\nfig.show()","44035e88":"average_crime_count_by_month = crime_records.groupby([\"YEAR\", \"MONTH\"]).size().reset_index(name='counts').groupby(\"MONTH\").mean().round()\naverage_crime_count_by_month.reset_index().plot.bar(title='Average count of crime happened in each month from 2003 to 2019', \n                                                    x = \"MONTH\", y = \"counts\",\n                                                    figsize=(8,6))\nnameplot.set_xlabel('month',size=20)\nnameplot.set_ylabel('crime count',size=20)","5f4f0df3":"len(crime_records[\"HUNDRED_BLOCK\"].unique())","af58116c":"crime_records[\"HUNDRED_BLOCK\"].value_counts()[:10].plot.bar(\n    title='Top 10 Dangerous Blocks in Vancouver')\nnameplot.set_xlabel('block name',size=20)\nnameplot.set_ylabel('count',size=20)","3ea5a239":"crime_records[\"HUNDRED_BLOCK\"].value_counts()[1:11].plot.bar(\n    title='Top 10 Dangerous Blocks in Vancouver')\nnameplot.set_xlabel('block name',size=20)\nnameplot.set_ylabel('count',size=20)","ca23f776":"crime_records_without_offset = crime_records[crime_records[\"HUNDRED_BLOCK\"] != \"OFFSET TO PROTECT PRIVACY\"]\ncrime_records_without_offset.shape","b1f252cf":"# drop missing row in crime record where only 0.002% of HUNDRED_BLOCK row are missing\ncrime_records_without_offset = crime_records_without_offset[pd.notnull(crime_records_without_offset[\"HUNDRED_BLOCK\"])]","7a2a7ce7":"block_names = crime_records_without_offset[\"HUNDRED_BLOCK\"]\nblock_names.isnull().sum() # make sure we don't have missing row for HUNDRED_BLOCK now","fe3b40fb":"def remove_street_number(street_name):\n    # if the beginning is a digit and the street name contains more than 2 words\n    if street_name[0].isdigit() and len(street_name.split(\" \")) > 2:\n        _, _, tail = street_name.partition(\" \")\n        return tail\n    return street_name\n\n# apply the above function to remove the street number in each row\ncrime_records_without_offset[\"HUNDRED_BLOCK\"] = block_names.apply(remove_street_number)","dc1c92a0":"crime_records_without_offset[\"HUNDRED_BLOCK\"].head()","4c533aa4":"street_with_missing_neighbourhood = crime_records_without_offset[crime_records_without_offset[\"NEIGHBOURHOOD\"].isnull()][\"HUNDRED_BLOCK\"].value_counts()\nstreet_with_missing_neighbourhood","8b6ed326":"crime_records_without_offset = crime_records_without_offset[crime_records_without_offset[\"HUNDRED_BLOCK\"]!=\"X NK_LOC ST\"]\ncrime_records_without_offset = crime_records_without_offset[crime_records_without_offset[\"HUNDRED_BLOCK\"]!='X NK_LOC ST \"SQUAMISH\"']\ncrime_records_without_offset = crime_records_without_offset[crime_records_without_offset[\"HUNDRED_BLOCK\"]!='X NK_LOC ST \"UBC\"']","5fea8d2e":"street_with_missing_neighbourhood = crime_records_without_offset[crime_records_without_offset[\"NEIGHBOURHOOD\"].isnull()][\"HUNDRED_BLOCK\"].value_counts()\nstreet_with_missing_neighbourhood","33e44ae0":"street_neighbour_dict = {}\n\n# iterate over rows with iterrows()\nfor index, row in crime_records_without_offset.iterrows():\n    # access data using column names\n    if pd.isnull(row[\"NEIGHBOURHOOD\"]) == False:\n        street_neighbour_dict[row[\"HUNDRED_BLOCK\"]] = row[\"NEIGHBOURHOOD\"]","db14c274":"# checking if the missing neighbourhood value for existing street is included\n# in the dictionary I created above\nexisted_street_block_association = []\ncount = 0\nfor name in street_with_missing_neighbourhood.index.tolist():\n    existed = False\n    if name in street_neighbour_dict:\n        existed_street_block_association.append(name)\n        existed = True\n        count += 1\nprint(count, \"names are are existed in the dictionary\")","8617f73c":"existed_street_block_association","80555b9c":"# fill missing neighbourhood value with dictionary created above\nfor name in existed_street_block_association:\n    crime_records_without_offset.loc[crime_records_without_offset[\"HUNDRED_BLOCK\"] == name, \"NEIGHBOURHOOD\"] = street_neighbour_dict[name]","a47a9f87":"# reusable function to check the missing neighbourhood value\ndef missing_neighbourhood_val_count():\n    return crime_records_without_offset[crime_records_without_offset[\"NEIGHBOURHOOD\"].isnull()][\"HUNDRED_BLOCK\"].value_counts()\nmissing_neighbourhood_val_count()","21a66c8a":"crime_records_without_offset.loc[crime_records_without_offset[\"HUNDRED_BLOCK\"]==\"SW MARINE DR \/ TAMATH CRES\",\"NEIGHBOURHOOD\"] = \"Dunbar-Southlands\"\nmissing_neighbourhood_val_count()","b714275d":"crime_records_without_offset = crime_records_without_offset[crime_records_without_offset[\"HUNDRED_BLOCK\"]!=\"BLOCK VICTORIA AVE\"]\nmissing_neighbourhood_val_count()","42448053":"crime_records_without_offset.loc[crime_records_without_offset[\"HUNDRED_BLOCK\"]==\"GRANVILLE ST \/ 58TH AVE\",\"NEIGHBOURHOOD\"] = \"Kerrisdale\"\nmissing_neighbourhood_val_count()","92abcd59":"crime_records_without_offset[\"NEIGHBOURHOOD\"].unique()","29c930e2":"crime_records[\"NEIGHBOURHOOD\"].value_counts()[1:11].plot.bar(\n    title='Top 10 Dangerous Neighbourhood in Vancouver', color=\"orange\")\nnameplot.set_xlabel('neighhourhood name',size=20)\nnameplot.set_ylabel('count',size=20)","8a78ffa5":"# crimes in west end\nwest_end_crimes = crime_records_without_offset[crime_records_without_offset[\"NEIGHBOURHOOD\"]==\"West End\"]\nvalues = west_end_crimes[\"TYPE\"].value_counts()\nlabels = values.index.tolist()\nlabels","d932da60":"labels.pop()\nlabels[-1] = \"Veh. Collis\/ Ped Struck\"\nlabels","94ffa994":"values[-2] += values[-1]\nvalues = values[:len(values)-1]\nvalues","21ee0777":"fig = go.Figure(data=[go.Pie(labels=values.index, values=values, hole=.3)])\nfig.show()","ccc8c2f8":"import squarify\nimport matplotlib.colors\nimport matplotlib.cm\nimport matplotlib.pyplot as plt","c3aa12eb":"west_end_X = crime_records_without_offset[crime_records_without_offset[\"NEIGHBOURHOOD\"]==\"West End\"][\"X\"]\nwest_end_Y = crime_records_without_offset[crime_records_without_offset[\"NEIGHBOURHOOD\"]==\"West End\"][\"Y\"]\nplt.scatter(west_end_X,west_end_Y, color=\"red\", marker=\".\")\nplt.xlabel(\"X\")\nplt.ylabel(\"Y\")\nplt.title('Crimes Happened in West End from 2003 to 2019') \nplt.show()","51d12ad9":"cimes_2003 = crime_records_without_offset[crime_records_without_offset[\"YEAR\"]==2003]\nwest_end_X_2003 = cimes_2003[cimes_2003[\"NEIGHBOURHOOD\"]==\"West End\"][\"X\"]\nwest_end_Y_2003 = cimes_2003[cimes_2003[\"NEIGHBOURHOOD\"]==\"West End\"][\"Y\"]\nplt.scatter(west_end_X_2003,west_end_Y_2003, color=\"brown\", marker=\".\")\nplt.xlabel(\"X\")\nplt.ylabel(\"Y\")\nplt.title('Crimes Happened in West End in 2003') \nplt.show()","bf635186":"cimes_2019 = crime_records_without_offset[crime_records_without_offset[\"YEAR\"]==2019]\nwest_end_X_2019 = cimes_2019[cimes_2019[\"NEIGHBOURHOOD\"]==\"West End\"][\"X\"]\nwest_end_Y_2019 = cimes_2019[cimes_2019[\"NEIGHBOURHOOD\"]==\"West End\"][\"Y\"]\nplt.scatter(west_end_X_2019,west_end_Y_2019, color=\"orange\", marker=\".\")\nplt.xlabel(\"X\")\nplt.ylabel(\"Y\")\nplt.title('Crimes Happened in West End in 2019') \nplt.show()","2a647651":"import math\n\ndef utmToLatLong(utmEasting, utmNorthing, utmZone):\n    eastingOffset = 500000.0\n    northingOffset = 10000000.0\n    k0 = 0.9996\n    equatorialRadius = 6378137.0\n    eccSquared = 0.006694380023\n    eccPrimeSquared = eccSquared \/ (1 - eccSquared)\n    e1 = (1 - math.sqrt(1 - eccSquared)) \/ (1 + math.sqrt(1 - eccSquared));\n    rad2deg = 180.0\/math.pi\n\n    # Casts input from string to floats or ints\n    # Removes 500,000 metre offset for longitude\n    xUTM = float(utmEasting) - eastingOffset\n    yUTM = float(utmNorthing)\n    zoneNumber = int(utmZone)\n\n    # Finds the origin longitude for the zone\n    lonOrigin = (zoneNumber - 1) * 6 - 180 + 3 # +3 puts in zone centre\n\n    M = yUTM \/ k0 #This finds the meridional arc\n    mu = M \/ (equatorialRadius * (1- eccSquared \/ 4 - 3 * eccSquared * eccSquared \/ 64 -5 * eccSquared * eccSquared * eccSquared \/256))\n\n    # Calculates the footprint latitude\n    phi1Rad = mu + (3 * e1 \/ 2 - 27 * e1 * e1 * e1 \/32) * math.sin(2*mu) + ( 21 * e1 * e1 \/ 16 - 55 * e1 * e1 * e1 * e1 \/ 32) * math.sin( 4 * mu) + (151 * e1 * e1 * e1 \/ 96) * math.sin(6 * mu)\n    phi1 = phi1Rad * rad2deg\n\n    # Variables for conversion equations\n    N1 = equatorialRadius \/ math.sqrt( 1 - eccSquared * math.sin(phi1Rad) *  math.sin(phi1Rad))\n    T1 = math.tan(phi1Rad) * math.tan(phi1Rad)\n    C1 = eccPrimeSquared * math.cos(phi1Rad) * math.cos(phi1Rad)\n    R1 = equatorialRadius * (1 - eccSquared) \/ math.pow(1 - eccSquared * math.sin(phi1Rad) * math.sin(phi1Rad), 1.5)\n    D = xUTM \/ (N1 * k0)\n\n    # Calculate latitude, in decimal degrees\n    lat = phi1Rad - ( N1 * math.tan(phi1Rad) \/ R1) * (D * D \/ 2 - (5 + 3 * T1 + 10 * C1 - 4 * C1 * C1 - 9 * eccPrimeSquared) * D * D * D * D \/ 24 + (61 + 90 * T1 + 298 * C1 + 45 * T1 * T1 - 252 * eccPrimeSquared - 3 * C1 * C1) * D * D * D * D * D * D \/ 720)\n    lat = lat * rad2deg\n    \n    # Calculate longitude, in decimal degrees\n    lon = (D - (1 + 2 * T1 + C1) * D * D * D \/ 6 + (5 - 2 * C1 + 28 * T1 - 3 * C1 * C1 + 8 * eccPrimeSquared + 24 * T1 * T1) * D * D * D * D * D \/ 120) \/ math.cos(phi1Rad)\n    lon = lonOrigin + lon * rad2deg\n    \n    return lon, lat","720ccf25":"crime_records_without_offset = crime_records_without_offset.reset_index(drop=True)","c53cb33f":"crimes_vancouver_X = crime_records_without_offset[\"X\"]\ncrimes_vancouver_Y = crime_records_without_offset[\"Y\"]\nlongtitude = []\nlatitude = []\nfor i in range(len(crimes_vancouver_X)):\n    lon, lat = utmToLatLong(crimes_vancouver_X[i], crimes_vancouver_Y[i], 10)\n    longtitude.append(lon)\n    latitude.append(lat)","60dd9bc0":"crime_records_without_offset[\"LONGTITUDE\"] = longtitude\ncrime_records_without_offset[\"LATITUDE\"] = latitude\ncrime_records_without_offset.head()","035c5174":"missing_neighbourhood = crime_records_without_offset[crime_records_without_offset[\"HUNDRED_BLOCK\"]==\"S \/ L 300 BLK E HASTINGS ST\"]\nmissing_neighbourhood_Lon = missing_neighbourhood[\"LONGTITUDE\"]\nmissing_neighbourhood_Lat = missing_neighbourhood[\"LATITUDE\"]\nlat_lon_pair = list(zip(missing_neighbourhood_Lat, missing_neighbourhood_Lon))\nprint(\"Latitude and Longtitude of the missing neighbourhood row\")\nlat_lon_pair","41a551f3":"import folium\nfrom folium.plugins import HeatMap\nfrom folium.plugins import MarkerCluster","74a102bb":"print(\"Where is the missing neighbourhood row located?\")\nmissing_neighbourhood_vis = folium.Map(location= [49.4985,-123.8159], \n                           tiles = \"Stamen Terrain\",\n                           zoom_start = 9)\npopups = [\"Missing Neighbourhood Record\"]\nMarkerCluster(lat_lon_pair, popups=popups).add_to(missing_neighbourhood_vis)\nmissing_neighbourhood_vis","c37fb6b0":"# not include the row in our analysis\ncrime_records_without_offset = crime_records_without_offset[crime_records_without_offset[\"HUNDRED_BLOCK\"]!=\"S \/ L 300 BLK E HASTINGS ST\"]\ncrime_records_without_offset = crime_records_without_offset.reset_index(drop=True) # reset index\nmissing_neighbourhood_val_count() # checking missing neighbourhood value","094e67b0":"missing_value_describe(crime_records_without_offset)","56e8a2fd":"crime_records_without_offset = crime_records_without_offset.dropna()","833c9ca2":"missing_value_describe(crime_records_without_offset)","8f742868":"# return a list of latitude and longtitude data based on specified year\ndef get_record_locations_by_year(year):\n    lat = crime_records_without_offset.query(\"YEAR == @year\")[\"LATITUDE\"]\n    lon = crime_records_without_offset.query(\"YEAR == @year\")[\"LONGTITUDE\"]\n    return list(zip(lat, lon))","b8a8ea37":"latlon_2019 = get_record_locations_by_year(2019)\ncrime_heatmap = folium.Map(location= [49.24, -123.11], \n                           tiles = \"Stamen Toner\",\n                           zoom_start = 12)\nHeatMap(latlon_2019, min_opacity=0.05).add_to(crime_heatmap)\ncrime_heatmap","61585628":"# return a list of latitude and longtitude data based on specified year and crime type\ndef get_record_locations_by_year_and_neighbourhood(year, neighbourhood):\n    crimes = crime_records_without_offset[crime_records_without_offset[\"YEAR\"]==year]\n    lat = crimes.query(\"NEIGHBOURHOOD == @neighbourhood\")[\"LATITUDE\"]\n    lon = crimes.query(\"NEIGHBOURHOOD == @neighbourhood\")[\"LONGTITUDE\"]\n    return list(zip(lat, lon))","65297a00":"latlon_west_end_2019 = get_record_locations_by_year_and_neighbourhood(2019, \"West End\")\ncrime_heatmap = folium.Map(location= [49.28416, -123.13150], \n                           tiles = \"Stamen Toner\",\n                           zoom_start = 14.5)\nHeatMap(latlon_west_end_2019, min_opacity=0.05).add_to(crime_heatmap)\ncrime_heatmap","f3c60981":"# return a list of latitude and longtitude data based on specified year and crime type\ndef get_record_locations_by_year_and_type(year, crime_type):\n    crimes = crime_records_without_offset.query(\"YEAR == @year\")\n    lat = crimes[crimes[\"TYPE\"]==crime_type][\"LATITUDE\"]\n    lon = crimes[crimes[\"TYPE\"]==crime_type][\"LONGTITUDE\"]\n    return list(zip(lat, lon))\n\n# return a list of latitude and longtitude data based on specified year and crime type\ndef get_record_locations_by_year_type_neighbourhood(year, crime_type, neighbourhood):\n    crimes = crime_records_without_offset.query(\"YEAR == @year\")\n    crimes = crimes[crimes[\"NEIGHBOURHOOD\"]==neighbourhood]\n    lat = crimes[crimes[\"TYPE\"]==crime_type][\"LATITUDE\"]\n    lon = crimes[crimes[\"TYPE\"]==crime_type][\"LONGTITUDE\"]\n    return list(zip(lat, lon))","c72bb2c7":"print(\"West End 'Theft from Vehicle' crime heatmap in 2019\")\nlatlon_west_end_2019 = get_record_locations_by_year_type_neighbourhood(2019, \"Theft from Vehicle\", \"West End\")\ncrime_heatmap = folium.Map(location= [49.28416, -123.13150], \n                           tiles = \"Stamen Toner\",\n                           zoom_start = 14.5)\nHeatMap(latlon_west_end_2019, min_opacity=0.05).add_to(crime_heatmap)\ncrime_heatmap","5d580d22":"print(\"West End 'Theft from Vehicle' crime markers in 2019\")\nlatlon_west_end_2019 = get_record_locations_by_year_type_neighbourhood(2019, \"Theft from Vehicle\", \"West End\")\nwest_end_TFC = folium.Map(location= [49.28416, -123.13150], \n                           tiles = \"Stamen Terrain\",\n                           zoom_start = 15)\npopups = [\"Theft from Vehicle\" for _ in range(len(latlon_west_end_2019))] # Popups texts are simple numbers.\nMarkerCluster(latlon_west_end_2019, popups=popups).add_to(west_end_TFC)\nwest_end_TFC","0adc9b55":"print(\"West End 'Theft of Bicycle' crime heatmap in 2019\")\nlatlon_west_end_2019 = get_record_locations_by_year_type_neighbourhood(2019, \"Theft of Bicycle\", \"West End\")\ncrime_heatmap = folium.Map(location= [49.28416, -123.13150], \n                           tiles = \"Stamen Toner\",\n                           zoom_start = 14.5)\nHeatMap(latlon_west_end_2019).add_to(crime_heatmap)\ncrime_heatmap","84b50f0c":"print(\"West End 'Theft of Bicycle' crimer markers in 2019\")\nlatlon_west_end_2019 = get_record_locations_by_year_type_neighbourhood(2019, \"Theft of Bicycle\", \"West End\")\nwest_end_TFC = folium.Map(location= [49.28416, -123.13150], \n                           tiles = \"Stamen Terrain\",\n                           zoom_start = 15)\npopups = [\"Theft of Bicycle\" for _ in range(len(latlon_west_end_2019))] # Popups texts are simple numbers.\nMarkerCluster(latlon_west_end_2019, popups=popups).add_to(west_end_TFC)\nwest_end_TFC","876bc401":"print(\"Vancouver 'Theft of Bicycle' crime heatmap in 2019\")\nlatlon_west_end_2019 = get_record_locations_by_year_and_type(2019, \"Theft of Bicycle\")\ncrime_heatmap = folium.Map(location= [49.24, -123.11], \n                           tiles = \"Stamen Toner\",\n                           zoom_start = 12)\nHeatMap(latlon_west_end_2019, min_opacity=0.4, radius=15).add_to(crime_heatmap)\ncrime_heatmap","61159e31":"print(\"Vancouver 'Theft of Bicycle' crimer markers in 2019\")\nwest_end_TFC = folium.Map(location= [49.24, -123.11], \n                           tiles = \"Stamen Terrain\",\n                           zoom_start = 12)\npopups = [\"Theft of Bicycle\" for _ in range(len(latlon_west_end_2019))] # Popups texts are simple numbers.\nMarkerCluster(latlon_west_end_2019, popups=popups).add_to(west_end_TFC)\nwest_end_TFC","4c869869":"print(\"Crimes happened in Stanley Park in 2019 so far\")\nlatlon_stanely_park_2019 = get_record_locations_by_year_and_neighbourhood(2019, \"Stanley Park\")\ncrime_heatmap = folium.Map(location= [49.30330, -123.14635], \n                           tiles = \"Stamen Toner\",\n                           zoom_start = 15)\nHeatMap(latlon_stanely_park_2019).add_to(crime_heatmap)\ncrime_heatmap","b94c4ab8":"def get_crime_types(year, neighbourhood):\n    crimes = crime_records_without_offset[crime_records_without_offset[\"YEAR\"]==year]\n    crime_types = crimes[crimes[\"NEIGHBOURHOOD\"]==neighbourhood][\"TYPE\"]\n    return crime_types","abe287fd":"print(\"Crimes happened in Stanley Park in 2019 so far\")\nlatlon_stanely_park_2019 = get_record_locations_by_year_and_neighbourhood(2019, \"Stanley Park\")\ncrime_clusterMarkers = folium.Map(location= [49.30330, -123.14635], \n                           tiles = \"Stamen Toner\",\n                           zoom_start = 15)\npopups = [i for i in get_crime_types(2019, \"Stanley Park\")] # Popups texts are simple numbers.\nMarkerCluster(latlon_stanely_park_2019, popups=popups).add_to(crime_clusterMarkers)\ncrime_clusterMarkers","c283a00d":"### Below are the absolute crime count over the years from 2003 to 2019.","21151974":"### We have the latitude and longtitude value now! let's find out where should the neighbourhood be for the record with \"S \/ L 300 BLK E HASTINGS ST\" HUNDRED_BLOCK value.","e6a96fdf":"### It appears that the months of summer time has more crime recorded than other months.","aa22f2d0":"## 6. Vancouver Crimes Heatmap with Folium \n### Convert UTM to Longtitude and Latitude system.\n### See my Github repository with modified code: https:\/\/github.com\/KangboLu\/UTM-to-Longtitude-Latitude-System","6d6540a8":"### Let's take a look at the crime heatmap of 2019 so far\n### Feel free to zoom in and play with it!","f5e828f6":"### We are not interested in block number anymore. Let's remove the number by stripping the first block before the first white space in the HUNDRED_BLOCK data.","cda057a3":"### Percent change of crime count over the years using 2003 as the baseline:","9ea6b187":"### You can clearly see that the north regions are relative more crime populated. Let's zoom in to see to the crimes in West End (2019).","23ee496a":"## Conclusion:\n### Through this exploratory analysis of the Vancouver crime data:\n### 1. I found that the most common crime in Vancouver is related to vehicle such \"Theft from Vehicle\", \"Theft of Vehicle\", \"Theft of Bicycle\" and \"Vehicle Collision\". Definitely, watch out for your bikes, motocycle, and cars. \n### 2. West End neighbourhood remain the most crime populated area from 2003 to 2019. The location record of crimes committed in West End can be used to draw a clear street map of West End.\n### 3. The ocurrences of crimes are quite evenly distributed if crimes are counted by day or counted by month. However, crime occurs more in after work hours and midnight in Vancouver.\n### 4. Folium is a great tool to visualize location data on openStreetMap.\n### Please give an upvote if you like this kernel!","1a9e56f0":"### Comparing the X, and Y of records from West End, the above plots show the crimes scattered through the neighbourhood and depicted almost the full street map of the West End neighbourhood.","d0629d28":"### We have successfully removed the block number. Now, let's associate the block name to the neighbourhood data to create a dictionary to check whether the missing neighbourhood data's street has association with existing block already.","6fed454a":"### 5.3 Let's build a simple dictionary to match the missing NEIGHBOURHOOD column's data to see if it's viable or not in order to reduce the number of missing data.","8c487998":"## 3. Distribution of each type of crime:","2be2bc58":"### We have over 600K rows and 10 columns in our dataset.","d0dd3cd3":"### From the above missing data examination, we can we have 4 columns with missing data: they are NEIGHHOURHOOD (10.42% missing), MINUTE(10.02% missing), HOUR(10.02% missing), and HUNDRED_BLOCK(0.002% missing).\n\n### The missing percentage of MINUTE and HOUR columns are the same. That makes sense because they are recorded together. However, the HUNDRED_BLOCk, which is the physical address, has ~10% lower missing value than the NEIGHBOURHOOD column. What can be the cause? It turnes out they \"uses the Statistics Canada definition of neighbourhoods within municipalities. Neighbourhoods within the City of Vancouver are based on the census tract (CT) concept within census metropolitan area (CMA).\" The missing NEIGHBOURHOOD columns might be caused by unlabeled neighbourhoods in the Statistics Canada dataset or they just aren't labeled.\n\n### I am thinking about create a dictionary for each street-neighbourhood pair to predict the missing neighbourhood. I will do it later.","fe17ef5f":"### Using the crime count of 2003 for each category as the baseline, you can observe that the crimes of \"Theft of Bicycle\" and \"Other Theft\" have increased over the years relative speaking. \"Offence Against a Person\" crimes has increased continuously from 2004 to 2013 and then decreased compared to 2003. Overally, there are less crimes in the remaining categories comparing to 2003.","46f3b3aa":"### Well, 60K of 609K rows of data are offsetted to protect privacy. We won't be able to use those data because the HUNDRED_BLOCK, NEIGHBOURHOOD data, X, and Y data will be inaccurate to describe the crime happened in Vancouver from 2003 to 2019. Let's create a new dataframe with usable data that's not labeled as \"OFFSET TO PROTECT PRIVACY\".","174caf57":"## 2. Quick dataset summary","390833ce":"## Exploratory Analysis of Vancouver Crime Data:\n\n### I will explore the Vancouver crime records from 2003 to 2019.\n### The dataset is collected from the City of Vancouver's [Open Data Catalogue](https:\/\/data.vancouver.ca\/datacatalogue\/crime-data.htm)\n![image.png](attachment:image.png)","6130daf0":"### It turns out that's far away from the city of Vancouver. Let's consider it as an outlier and remove it from the dataset. ","df70f311":"### 3. Granville St \/ 58th Avenue belongs to the Kerrisdale neighbourhood.","350cc457":"### That's a lot of blocks! Let's find out:\n### 5.2 What are the top 10 crime populated block based on crime data?","4427182a":"### The scatter plot is actually the shape of the West End neighbourhood.\n\n### Crimes happened on almost every street of West End from 2003 to 2019.","640eb14b":"## 5. Crime investigation based on location data","d29b83ee":"### Let's take look at the \"Theft from Vehicle\" crimes in West End (2019)","6de2f045":"## 2.1 Dimension of dataset","5eafd33f":"### After working hard on associating street to neibouhoood for filling the missing data and manually cleaning the exceptions and outliers. We now reduced the missing percentages from 10% to about 0.02%. I will drop the remaining missing rows.","24f5760b":"### Let's take a look the x and y values of the crime happened in West End neighbourhood.","7387b7f6":"### Let's apply same type of graph to Stanley Park, which is popular sight.\n### Feel free to zoom in!","2fdd51ea":"### After reviewing openStreetMap, I found out that:\n#### 1. MARINE DR \/ TAMATH CRES is belong to the Dunbar-southlands neighbourhood, althought it's within the edge of UBC area.","d12b51c0":"### 8 of 1328 collision resulted fatality. The \"or\" really makes the data unclear and they didn't state the total death count.","5318aa3c":"### 4.1 What months have the most of the crimes recorded?","90648788":"## 1. Input Dataset First","de800fdd":"### It appears that the most common type of is associated with vehicle in Vancouver: Theft from Vehicle, Theft of Vehicle, Theft of Bicycle and Vehicle Collision. Since 2003, there are 209609 crime categorized as \"Theft from Vehicle\".","5bb1d2c0":"## 4. Crime records by month:","ec49b9d4":"### Create a dictionary of block-neighbourhood pair","ec2f03d0":"### 2.0 Do we have missing data?","c95c5287":"### Granville street seems to be very dangerous from the above visualization.","b569cfee":"### We have 5 rows left. Let's look at online neighbourhood map and the dataset before I remove the street number to assign NEIGHBOURHOOD column value to them.\n![image.png](attachment:image.png)","7c08ecb4":"### If the street number's first character is a number and the street's name has more than 2 word, I remove the street number from it.\n### Reason:\n#### 1. The street name's beginning can a letter which is not a street number. I don't want the location information lost through this preprocessing process.\n#### 2. The street name can be 2 words only such as Hasting Street. I don't want the first word to be lost and let the dataset only contains the \"street\" part.","876d5061":"### It turns out the most crime populated neighbourhood is West End.\n","fc093f1e":"### Due to the limitation of Kaggle kernel, I only generate heatmap for selected neighbourhood to avoid exceed the kernel size limit. Feel free to fork it to play along with the data.","6bb6910f":"### S \/ L block intersection is actually 30 minutes drive away from Hastings Street. Let's not replace value for now since it's only 1 of 600K data row. I will assign neighbourhood value to it after I examine the longtitude and latitude data later.","b569571e":"### We have 4 columns describe the locations of the given crime records. They are: HUNDRED_BLOCK, NEIGHBOURHOOD, X, and Y. Let's explore these columns now. ","a5e7524e":"### What is \"NK_LOC ST\"?\n### The Vancouver city website states it is default location value used for incidents with unknown location. Let's drop them for our spatial anaylsis.","3005e6ef":"### Let's also take look at the \"Theft of Bicyle\" crimes in West End and in the entire Vancouver neighbourhood in general for 2019.","b5078cbf":"### From the clustered markers, you can see where are the commericial building and where are the popular spot for stealing bicycles. \n![image.png](attachment:image.png)","14bbbbaf":"### Let's combine the last two element of the list together and reduce the string length for better visualization.","5861b0d8":"### Let's visualize the change of crime over the years across all the types of crime:","27fcd2e4":"### I will use folium for heatmap and clusterMarker data visualization","a9b84c69":"### 5.1 How many unique blocks do we have?","57ff9b61":"### Let's assign the street-neighbourhood dictionary values to fill the missing values.","3b8d568e":"### To protect privacy, police labeled about 10% of the data to be \"OFFSET TO PROTECT PRIVACY\". Let's graph the top 10 crime-populated block without the \"OFFSET TO PROTECT PRIVACY\" rows. ","10961980":"#### 2. Victoria Avenue is actually belong to a city called White Rock. From the Vancouver neighbourhood map, it's not included. Let's drop it from the dataset.","91958090":"### The theft of bicycle crimes follow the similar pattern comparing to the overall spatial distribution of the crimes in Vancouver for 2019.","5090076f":"### Among all the crime records of West End neighbourhood, the majority crime records are from the category of \"Theft from Vehicle\" with 41.9% of the total record entries.","6a4621ff":"### 5.4 Top 10 most dangerous neighbourhood in Vancouver","635bd560":"## 3.1 Has the crime decreased over the years in Vancouver?"}}