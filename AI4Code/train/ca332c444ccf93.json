{"cell_type":{"1c3bf479":"code","709c1e24":"code","340e73e0":"code","f627bb8a":"code","16ca12ab":"code","3e5a20e7":"code","15996d9c":"markdown","e7e9bea5":"markdown","1eae0ad9":"markdown"},"source":{"1c3bf479":"import pandas as pd \npd.set_option('display.max_columns', 500)\n\nimport numpy as np\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","709c1e24":"train = pd.read_csv('\/kaggle\/input\/jane-street-market-prediction\/train.csv')","340e73e0":"def reduce_memory_usage(df):   \n    start_memory = df.memory_usage().sum() \/ 1024**2\n    print(f\"Memory usage of dataframe is {start_memory} MB\")\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != 'object':\n            c_min = df[col].min()\n            c_max = df[col].max()\n            \n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n                    \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    pass\n        else:\n            df[col] = df[col].astype('category')\n    \n    end_memory = df.memory_usage().sum() \/ 1024**2\n    print(f\"Memory usage of dataframe after reduction {end_memory} MB\")\n    print(f\"Reduced by {100 * (start_memory - end_memory) \/ start_memory} % \")\n    return df","f627bb8a":"print(\"Reducing Memory\")\ntrain = reduce_memory_usage(train)","16ca12ab":"def remove_collinear_features(x, threshold):\n    '''\n    Objective:\n        Remove collinear features in a dataframe with a correlation coefficient\n        greater than the threshold. Removing collinear features can help a model \n        to generalize and improves the interpretability of the model.\n\n    Inputs: \n        x: features dataframe\n        threshold: features with correlations greater than this value are removed\n\n    Output: \n        dataframe that contains only the non-highly-collinear features\n    '''\n\n    # Calculate the correlation matrix\n    corr_matrix = x.corr()\n    iters = range(len(corr_matrix.columns) - 1)\n    drop_cols = []\n\n    # Iterate through the correlation matrix and compare correlations\n    for i in iters:\n        for j in range(i+1):\n            item = corr_matrix.iloc[j:(j+1), (i+1):(i+2)]\n            col = item.columns\n            row = item.index\n            val = abs(item.values)\n\n            # If correlation exceeds the threshold\n            if val >= threshold:\n                # Print the correlated features and the correlation value\n                #print(col.values[0], \"|\", row.values[0], \"|\", round(val[0][0], 2))\n                drop_cols.append(col.values[0])\n\n    # Drop one of each pair of correlated columns\n    drops = set(drop_cols)\n    x = x.drop(columns=drops)\n    print('Removed Columns {}'.format(drops))\n    return x","3e5a20e7":"print(\"Removing Correlated Features\")\n# Pass DataFrame and Threshold value \nremove_collinear_features(train.drop(['resp','resp_1','resp_2','resp_3','resp_4','ts_id','date','weight'],axis=1),0.80)","15996d9c":"# Reducing Memory ","e7e9bea5":"# Removing Highly Correlated Columns ","1eae0ad9":"#### Hey this is taken from discussion in StackOverflow\nhttps:\/\/stackoverflow.com\/questions\/29294983\/how-to-calculate-correlation-between-all-columns-and-remove-highly-correlated-on\n#### Hope this link Helps!!!"}}