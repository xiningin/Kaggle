{"cell_type":{"bc015380":"code","5b2bea7c":"code","8d7b824e":"code","6f72f080":"code","04c48a48":"code","fa358475":"code","f7d8f487":"code","ad6baec6":"code","bcd59fec":"code","77456144":"code","4515c699":"markdown","e82d724c":"markdown","b7fd6517":"markdown","6e9dc85b":"markdown","c3980296":"markdown","1566bc68":"markdown"},"source":{"bc015380":"\"\"\" GENERAL IMPORTS \"\"\"\nimport numpy as np \nimport pandas as pd\npd.options.display.max_columns = 50\n\nfrom  datetime import datetime, timedelta\n# import gc\n# from tqdm.notebook import tqdm\n\n\"\"\" CHARTING IMPORTS \"\"\"\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = (18.0, 4)\n%matplotlib inline \nplt.rcParams.update({'figure.max_open_warning': 0})\nimport seaborn as sns; sns.set()","5b2bea7c":"\"\"\" LOADING DATA \"\"\"\ncal = pd.read_csv(\"..\/input\/m5-forecasting-accuracy\/calendar.csv\", parse_dates=['date'])\n# prices = pd.read_csv(\"..\/input\/m5-forecasting-accuracy\/sell_prices.csv\" )\nsales = pd.read_csv(\"..\/input\/m5-forecasting-accuracy\/sales_train_validation.csv\")","8d7b824e":"\"\"\" helpful lists \"\"\"\nstores_list = sales.store_id.unique().tolist() + ['ALL']\ndept_list = sales.dept_id.unique().tolist() + ['ALL']\nbom_days  = [1, 32, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 365] # beginnings of months\n\nid_cols = ['id', 'item_id', 'dept_id','store_id', 'cat_id', 'state_id']\nweeks_all = cal.wm_yr_wk.unique().tolist()\nweeks_train = weeks_all[:-8]","6f72f080":"\"\"\" create SALES_WEEKLY DataFrame\"\"\"\nsales_w = sales.iloc[:,:6].astype(str) # copy headers\nfor w in weeks_all:\n    dw_list = cal[cal.wm_yr_wk == w].d.tolist()\n    dw_list = [d for d in dw_list if d in sales.columns] \n    len_dw_list = len(dw_list)\n    if len_dw_list > 0:\n        sales_w[w] = sales.loc[:,dw_list].sum(axis=1)\nprint (sales_w.shape)\nsales_w.sample(3)","04c48a48":"def plot_multiyear_series(my_series, ax, title):\n    sns.lineplot(data=my_series, x='doy', y='nsold', hue='year',\n                 palette='rainbow', legend='full', ax=ax)\n    ax.set_xticks(bom_days, minor=False)\n    ax.set_xticklabels(range(13))\n    ax.set_xlim(0, 366)\n    ax.set_title(title, fontsize=18)\n    ax.legend(bbox_to_anchor=(1.1, 1))\n    ax.set(xlabel=None, ylabel='units sold')\n\n\ndef plot_single_multiyear_weekly(wseries, title='weeky volumes by year'):\n    my_series = wseries_to_multiyear(wseries)\n    fig, ax = plt.subplots(figsize=(16, 4))\n    plot_multiyear_series(my_series, ax, title)\n\n\ndef wseries_to_multiyear(wseries):\n    my_series = wseries.to_frame().reset_index()\n    my_series.columns = ['wm_yr_wk', 'nsold']\n    my_series = my_series.merge(cal[['date', 'year', 'wm_yr_wk']], on='wm_yr_wk'). \\\n        groupby('wm_yr_wk').agg({'date': 'min', 'nsold': 'median'})\n    my_series['year'] = my_series.date.dt.year\n    my_series['woy'] = (my_series.date+timedelta(2)).dt.weekofyear\n    my_series['doy'] = (my_series.date+timedelta(2)).dt.dayofyear\n    return my_series","fa358475":"wseries = sales_w[weeks_train[:-1]].sum(axis=0)\nplot_single_multiyear_weekly(wseries, 'All sales')","f7d8f487":"\"\"\" importing magical components: \"\"\"\nimport ipywidgets as widgets\nfrom ipywidgets import interact, interact_manual ","ad6baec6":"@interact  # note the decorator\ndef show_store_sales_by_dept(sid=stores_list):  # default argument value as list\n    if sid == 'ALL':\n        store_w = sales_w.fillna(0).groupby(['item_id','dept_id'])[weeks_train[:-1]].sum().reset_index().copy()\n    else:\n        store_w = sales_w[sales_w.store_id==sid].copy()\n\n    fig, axs = plt.subplots(4, 2, figsize=(28, 14), constrained_layout=True)\n\n    for ax, did in zip (axs.ravel(), dept_list[:]):\n        if did == 'ALL':\n            wseries = store_w.loc[:, weeks_train[:-1]].sum(axis=0)\n        else:\n            wseries = store_w.loc[store_w.dept_id == did, weeks_train[:-1]].sum(axis=0)\n        my_series = wseries_to_multiyear (wseries)\n        title = f\"Weekly sales by year for store_id={sid}, dept_id={did}\" \n        plot_multiyear_series(my_series, ax, title)","bcd59fec":"@interact_manual  # requires pressing button for manual update\ndef show_store_sales(sid=stores_list, did=dept_list):  # arguments as lists\n    title = f\"Weekly sales by year for store_id={sid}, dept_id={did}\" \n    if sid == 'ALL':\n        sid = stores_list[1:]\n    else:\n        sid = [sid]\n    if did == 'ALL':\n        did=dept_list[1:] # if  else  did = [did]\n    else:\n        did = [did]\n    wseries = sales_w.loc[(sales_w.store_id.isin(sid))&(sales_w.dept_id.isin(did)), weeks_train[:-1]].sum(axis=0)\n    plot_single_multiyear_weekly(wseries, title)","77456144":"dept_ = widgets.Dropdown(options=dept_list[:-1])\nstore_ = widgets.Dropdown(options=stores_list[-1:]+stores_list[:-1]) \nitems = widgets.Dropdown(options=sales_w[sales_w.dept_id==dept_.value].item_id.unique())\n\ndef update_items(*args):\n    items.options = sales_w[sales_w.dept_id==dept_.value].item_id.unique().tolist()\n\ndept_.observe(update_items, 'value')\nstore_.observe(update_items, 'value')\n    \ndef show_item_sales_by_store(did, iid, sid):\n    fig, ax = plt.subplots(figsize=(14, 4), constrained_layout=True)\n\n    if sid == 'ALL':\n        wseries = sales_w.loc[sales_w.item_id==iid, weeks_train[:-1]].sum(axis=0)\n    else:\n        wseries = sales_w.loc[(sales_w.item_id==iid)&(sales_w.store_id == sid), weeks_train[:-1]].sum(axis=0)\n    my_series = wseries_to_multiyear (wseries)\n    title = f\"Weekly sales by year for store_id={sid}, dept_id={did}, item_id={iid}\" \n    plot_multiyear_series(my_series, ax, title)\n\n_ = interact(show_item_sales_by_store, did=dept_, iid=items, sid=store_)","4515c699":"## Example 3: INTERACTIVE ITEM \/ DEPT SELECTOR\nuse controls to choose dept \/ item \/ store combination\n\nitem selection is driven by dept","e82d724c":"## Example 1: SALES BY DEPT FOR SINGLE STORE\nuse controls to choose store","b7fd6517":"## Example 2: INTERACTIVE STORE \/ DEPT SELECTOR\nuse controls to choose store \/ department combination<br>\nthen press `Run Interact` to update chart","6e9dc85b":"# Buliding multiple year chart (warm-up)\ntesting functions to draw desired chart format (any other charting functions may be used instead of these)","c3980296":"# Interactive charting demo\n\nThis notebook is built to demonstrate interactive charting in Jupyter using `ipywidgets`.\n\nYou may find it helpful in researching multiple store \/ department \/ item combinations in the EDA process.\n\ninspired by [this article](https:\/\/towardsdatascience.com\/interactive-controls-for-jupyter-notebooks-f5c94829aee6).","1566bc68":"# Buliding interactive charts"}}