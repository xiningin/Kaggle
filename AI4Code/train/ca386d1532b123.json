{"cell_type":{"e5381155":"code","40b79b47":"code","ae7c5be1":"code","076300dd":"code","dcd99483":"code","2eb02ee0":"code","2d45b1a9":"code","96ae7f10":"code","794c4244":"code","43c04530":"code","7e3a8d68":"code","94331975":"code","ac874367":"code","f5f7f40d":"code","dcb73a14":"code","5b4f7f0e":"code","3e5d15e3":"code","680dd3ea":"code","819f06a1":"code","3fbc8a20":"code","71f68b9c":"code","0a636c92":"code","fec5744e":"code","225837fb":"code","fd49fe72":"code","5909c1ea":"code","63af7724":"code","bdb30840":"code","34430dae":"code","d6bb30db":"code","5fcb0c99":"code","68a3d9e8":"code","b9fea423":"code","416c2057":"code","73e23b22":"code","3ad29d0c":"code","f9df357e":"code","a5b4f8d0":"code","ed5d5514":"code","55fdfa58":"code","6a943d30":"code","8c6abab2":"code","0a2f707d":"code","ce9e50e3":"code","6f22c163":"code","683b53ab":"code","d05a39c5":"code","5198d80e":"code","3aac24e3":"code","0fa2f4bf":"code","3005d782":"code","c0dabea9":"markdown","ffebd7d0":"markdown","44169dff":"markdown","08073958":"markdown","645b4c58":"markdown","5d089fdc":"markdown","30e897e4":"markdown","f003777b":"markdown","2281d79b":"markdown","f156b81d":"markdown","e58ceff1":"markdown"},"source":{"e5381155":"#imprt Libraries\nimport pandas as pd \nimport numpy as np\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt \nfrom statsmodels.sandbox.regression.predstd import wls_prediction_std","40b79b47":"#import Data\ndata_train=pd.read_csv('..\/input\/used-cars-price-prediction\/train-data.csv')\n\n","ae7c5be1":"#Data Look\ndata_train.head()","076300dd":"data_train=data_train.iloc[:,1:]","dcd99483":"data_train.info()","2eb02ee0":"#selection of important columns\ndata_train_c=data_train.iloc[:,[0,1,2,3,4,5,7,8,9,10]]","2d45b1a9":"#firstly we need to Clean the data for This Dataframe\ndata_train_c.replace({' ':np.nan,'null':np.nan},inplace=True)\ndata_train_c=data_train_c.dropna()","96ae7f10":"# How To check Above Instruction\nfor i in data_train_c.columns:\n     print(data_train_c[i].unique()) #unique value for each column","794c4244":"# Here you can see 'null bhp' occur so it's replace by np.nan and then drop this raw\ndata_train_c.replace({'null bhp':np.nan,'null km\/kg':np.nan,'null CC':np.nan},inplace=True)\ndata_train_c=data_train_c.dropna()\n","43c04530":"data_train_c.head()","7e3a8d68":"#remove extenation  km\/kg ,bhp, CC from below column and convert string into float Value\nl1=['Mileage','Engine','Power']\nfor i in l1:\n    data_train_c[i]=data_train_c[i].str.split(\" \").apply(lambda x:x[0])\n    data_train_c[i] = data_train_c[i].str.strip()\n    data_train_c[i] = data_train_c[i].astype(float)\n","94331975":"#Data Look \ndata_train_c.head()","ac874367":"data_train_c.Fuel_Type.unique()","f5f7f40d":"#Fule_Type column is Categorical data so we need to convert into numeric order for Better Price prediction \ndata_train_c.Fuel_Type.replace({'Petrol':1,'CNG':3,'Diesel':2,'LPG':4},inplace=True)","dcb73a14":"data_train_c.info()","5b4f7f0e":"data_train_c.Transmission.unique()","3e5d15e3":"# Above thing apply in Transmission column\ndata_train_c.Transmission.replace({'Manual':1,'Automatic':2},inplace=True)","680dd3ea":"data_train_c.head()","819f06a1":"data_train_c.info()","3fbc8a20":"'''Before we apply first step  look our  data range  menas  we need to check range  of column  values \nso we will be visualize easily our plot with Price column value'''\nfor i in data_train_c.columns:\n    print(i)\n    print(data_train_c[i].describe())","71f68b9c":"''' Here 'Kilometers_Driven' in High value data so we need to convert high value to lower value\ntherfore we easily compare with  price value '''\ndata_train_c['KM_Drlog_form'] = np.log(data_train_c['Kilometers_Driven'])\n\ndata_train_c['KM_Drlog_form'].dropna()","0a636c92":"data_train_c","fec5744e":"data_train_c['Company']=data_train_c['Name'].str.split(\" \").apply(lambda x: x[0])","225837fb":"data_train_c1=data_train_c.copy()","fd49fe72":"data_train_c1['Price']=data_train['Price']","5909c1ea":"data_train_c1","63af7724":"%matplotlib inline","bdb30840":"#Scatter plot\ng = sns.PairGrid(data_train_c1,\n\n                 x_vars=data_train_c1.columns[1:11],\n\n                 y_vars=['Price'])\ng = g.map(plt.scatter)","34430dae":"data_train_c1.head()","d6bb30db":"#remove one outlier  because this outlier distract our model we can see this thing our above sctter plot\n\ndata_train_c1.loc[data_train_c1['Kilometers_Driven']!=data_train_c1['Kilometers_Driven'].max()]\ndata_train_c1['Kilometers_Driven'].dropna()\ndata_train_c1['KM_Drlog_form'] = np.log(data_train_c1['Kilometers_Driven'])\n","5fcb0c99":"data_train_c1.head()","68a3d9e8":"data_train_c1.columns","b9fea423":"#Heatmap relationship all columns\nsns.heatmap(data=data_train_c1.iloc[1:11].corr(), annot = True)","416c2057":"data_train_c1.corr()","73e23b22":"#Fitting Model and Generate results\nmodel=sm.OLS.from_formula(\"Price~Power+Year\",data=data_train_c1)  # without Categoricl variable\n# Power > Engine in term of correlationship with Price  so we do not need to include both into the  prediction (select: Power )\n# { Mileage,KM_Drlog_form,'Year'}  related with each other so we can take one variable from them. (select: Year )\nres=model.fit()\nprint(res.summary())\n#Note: Here All selected Variable Based on the corrletion and R-squred Value \n# R-squared 0.680","3ad29d0c":"print('Parameters: ', res.params)\nprint('R2: ', res.rsquared)","f9df357e":"#Fitting Model and Generate results\nmodel=sm.OLS.from_formula(\"Price~Power+Year+C(Company)\",data=data_train_c1) # with Categorical variable\n# Power > Engine in term of correlationship with Price  so we do not need to include both into the  prediction (select: Power )\n# { Mileage,KM_Drlog_form,'Year'}  related with each other so we can take one variable from them. (select: Year )\nres=model.fit()\nprint(res.summary())\n#Note: Here All selected Variable Based on the corrletion and R-squred Value \n#","a5b4f8d0":"print('Parameters: ', res.params)\nprint('R2: ', res.rsquared)","ed5d5514":"# Here you can see R-squared 0.765 if we include the company(Categorical Variable ) then we get the two many Dimension if we don't \n# do that thing then we got R-squared got 0.680 ","55fdfa58":"Pre_Price=res.predict()","6a943d30":"prstd, iv_l, iv_u = wls_prediction_std(res)","8c6abab2":"#Common Variable for Comapare our Orginal Price vs Predicted Price \nTime= np.linspace(0, 1000, 100)","0a2f707d":"# Here We Can see Variation Upper bound and Lower Bound line\nfig, ax = plt.subplots(figsize=(30,10 ))\nax.plot(Time, data_train_c1['Price'][:100], 'o', label=\"True\")\nax.plot(Time, res.fittedvalues[:100], '*-', label=\"OLS\")\nax.plot(Time, iv_u[:100], 'r--',label='Lower_Bound')\nax.plot(Time, iv_l[:100], 'g--',label='Upper_Bound')\nax.legend(loc='best')\nplt.xlabel('Common_Variable')\nplt.ylabel('Predict vs Orginal(Price)')","ce9e50e3":"pp = sns.scatterplot(res.fittedvalues, res.resid)\npp.set_xlabel(\"Fitted values\")\n_ = pp.set_ylabel(\"Residuals\")","6f22c163":"data_test=pd.read_csv('..\/input\/used-cars-price-prediction\/test-data.csv')","683b53ab":"data_test.head()","d05a39c5":"data_train.head()\n","5198d80e":"# data Cleaning function\ndef Data_clean(data_train):\n\n    data_train = data_train.iloc[:, 1:]\n\n    # selection of important columns\n    data_train_c = data_train.iloc[:, [0,1,2, 3, 4, 5, 7, 8, 9, 10]]\n\n    # firstly we need to Clean the data for This Dataframe\n    data_train_c.replace({' ': np.nan, 'null': np.nan}, inplace=True)\n    data_train_c = data_train_c.dropna()\n\n    # Here you can see 'null bhp' occur so it's replace by np.nan and then drop this raw\n    data_train_c.replace(\n        {'null bhp': np.nan, 'null km\/kg': np.nan, 'null CC': np.nan}, inplace=True)\n    data_train_c = data_train_c.dropna()\n\n    # remove extenation  km\/kg ,bhp, CC from below column and convert string into float Value\n    l1 = ['Mileage', 'Engine', 'Power']\n    for i in l1:\n        data_train_c[i] = data_train_c[i].str.split(\" \").apply(lambda x: x[0])\n        data_train_c[i] = data_train_c[i].str.strip()\n        data_train_c[i] = data_train_c[i].astype(float)\n\n    # Fule_Type column is Categorical data so we need to convert into numeric order for Better Price prediction\n    data_train_c.Fuel_Type.replace(\n        {'Petrol': 1, 'CNG': 3, 'Diesel': 2, 'LPG': 4}, inplace=True)\n\n    # Above thing apply in Transmission column\n    data_train_c.Transmission.replace(\n        {'Manual': 1, 'Automatic': 2}, inplace=True)\n\n    ''' Here 'Kilometers_Driven' in High value data so we need to convert high value to lower value\n    therfore we easily compare with  price value '''\n    data_train_c['KM_Drlog_form'] = np.log(data_train_c['Kilometers_Driven'])\n    \n    data_train_c['Company']=data_train_c1['Name'].str.split(\" \").apply(lambda x: x[0])\n    \n\n    return data_train_c","3aac24e3":"data_test=Data_clean(data_test)","0fa2f4bf":"data_test['Pre_Price']=res.predict(data_test) # res from the above data training function ","3005d782":"data_test","c0dabea9":"<b> Now we want to visualize our model Price and Orginal Price <\/b>","ffebd7d0":"<b> Car_test(CSV) Testing on this Model <\/b>\n","44169dff":"<b> step1: we need to find relationship between Independent variable(IV) vs Dependent variable(DI) <\/b>","08073958":"<b> <p style=\"color:#289e00\">Data Clean Part <\/p> <\/b>","645b4c58":"<b> <p style=\"color:#289e00\">Data Maniplution Part <\/p> <\/b>","5d089fdc":"<b> <p style=\"color:red\">Warning: Again we need to check Every column in does not exists any  unknown things i.e \"null\" ,'None','NA' and 'none' etc. Because dropna Can't remove string null like 'null'. if you are not remove this thing then  error will be occur ahead in  data maniplution <\/p> <\/b>","30e897e4":"<i><big> <p style=\"color:#9e009e\"> Linear Regression<\/big> <\/i> <\/p>\n<br>\n<b> Our Target Variable is Price <\/b>","f003777b":"<b> Predict Price by given Data  <\/b>","2281d79b":"<b> Now we will see our relationship between IV and DI <\/b>","f156b81d":"<u> <h3><b> Case 2: <\/b> with  the categorical variable<\/h3> <\/u>","e58ceff1":"<u> <h3><b> Case 1: <\/b> without include the categorical variable<\/h3> <\/u>"}}