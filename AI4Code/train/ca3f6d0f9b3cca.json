{"cell_type":{"781ae204":"code","8456c37c":"code","b06e6971":"code","2f405a3a":"code","be876a97":"code","0c7bb48a":"code","6d50d532":"code","0e784272":"code","14bb1d4c":"code","ae89dc9e":"code","ba3bc3f6":"code","4ac0a840":"code","3881e4c7":"markdown","7311aac3":"markdown","e6383518":"markdown","93decfe3":"markdown","2df75b77":"markdown","f5674776":"markdown","39d3bb3c":"markdown"},"source":{"781ae204":"import itertools\nimport pandas as pd\nimport numpy as np\n\n!wget http:\/\/webhotel4.ruc.dk\/~keld\/research\/LKH-3\/LKH-3.0.7.tgz\n!tar xvfz LKH-3.0.7.tgz\n!cd LKH-3.0.7; make","8456c37c":"bestnprint('The best solution is length',len(best))","b06e6971":"def is_perm(s):\n    y = True\n    for k in range(1,8):\n        y = y&(str(k) in s)\n        if not y: break\n    return y\n\npermutations = []\nfor k in range(len(best)-6):\n    s = best[k:k+7]\n    if (is_perm(s))&(s not in permutations)&(s[:2]!='54'):\n        permutations.append(s)\n        \nprint('There are',len(permutations),'that can be split among 3 strings')","2f405a3a":"mandatory = ['54'+''.join(x) for x in itertools.permutations(['1','2','3','6','7'], 5)]\nprint('There are',len(mandatory),'that must be incluced in all 3 strings')","be876a97":"adjust1 = 18\nadjust2 = 12\n\ngroup1 = permutations[:1640-adjust1] + mandatory\ngroup2 = permutations[1640-adjust1:3280+adjust2] + mandatory\ngroup3 = permutations[3280+adjust2:] + mandatory\n\nlen(group1), len(group2), len(group3)","0c7bb48a":"def hamming_distance(str1, str2):\n    return sum( (c1!=c2) for c1, c2 in zip(str1, str2))\n\ndef offset(s1, s2):\n    assert(len(s1)==len(s2))\n    ln = len(s1)\n    j = ln\n    for k in range(0,ln):\n        if hamming_distance(s1[k:],s2[:7-k])==0:\n            j=k\n            break\n    return j","6d50d532":"def get_tsp_solution(group):\n    \n    # CREATE DISTANCE MATRIX\n    SIZE = len(group)\n    M = np.zeros((SIZE, SIZE), dtype='int8')\n    for j in range(SIZE):\n        #if j%25==0: print(j,', ',end='')\n        for k in range(SIZE):\n            M[j,k] = offset(group[j],group[k])\n            \n    # WRITE PROBLEM FILE\n    f = open(f'group.par','w')\n    f.write(\"PROBLEM_FILE = ..\/distances.atsp\\n\")\n    f.write(\"TOUR_FILE = ..\/output.txt\\n\")\n    f.write(f\"OPTIMUM = {SIZE}\\n\")\n    f.write(\"MOVE_TYPE = 5\\n\")\n    f.write(\"PATCHING_C = 3\\n\")\n    f.write(\"PATCHING_A = 2\\n\")\n    f.write(\"RUNS = 1\\n\")\n    f.write(\"TIME_LIMIT = 120\\n\") #seconds\n    f.close()\n    \n    # WRITE PARAMETER FILE\n    f = open(f'distances.atsp','w')\n    f.write(\"NAME: distances\\n\")\n    f.write(\"TYPE: ATSP\\n\")\n    f.write(\"COMMENT: Asymmetric TSP\\n\")\n    f.write(f\"DIMENSION: {SIZE}\\n\")\n    f.write(\"EDGE_WEIGHT_TYPE: EXPLICIT\\n\")\n    f.write(\"EDGE_WEIGHT_FORMAT: FULL_MATRIX\\n\")\n    f.write(\"EDGE_WEIGHT_SECTION\\n\")\n    for j in range(SIZE):\n        #if j%25==0: print(j,', ',end='')\n        for k in range(SIZE):\n            f.write(f\"{M[j,k]:2d} \") \n        f.write(\"\\n\")\n    f.close()\n    \n    # EXECUTE TSP SOLVER\n    !cd LKH-3.0.7; .\/LKH ..\/group.par\n    \n    # READ RESULTING ORDER\n    with open('output.txt') as f:\n        lines = f.readlines()\n    for i,ln in enumerate(lines):\n        if 'TOUR_SECTION' in ln: break\n    perms = [int(x[:-1]) for x in lines[i+1:-2] ]\n    \n    # CREATE STRING\n    result = group[ perms[0]-1 ]\n    for k in range(1,len(perms)):\n        s1 = group[ perms[k-1]-1 ]\n        s2 = group[ perms[k]-1 ]\n        d = offset(s1,s2)\n        assert(d!=0)\n        result += s2[-d:]\n    \n    return result","0e784272":"def print_header(x):\n    print(); print()\n    print('#'*25)\n    print('### Computing String',x)\n    print('#'*25); print()\n\nprint_header(1)\nstring1 = get_tsp_solution(group1)\nprint_header(2)\nstring2 = get_tsp_solution(group2)\nprint_header(3)\nstring3 = get_tsp_solution(group3)","14bb1d4c":"all_permutations = [''.join(x) for x in itertools.permutations(['1','2','3','4','5','6','7'], 7)]\n\nfor p in all_permutations:\n    if p not in string1 and p not in string2 and p not in string3:\n        print(p)","ae89dc9e":"for p in mandatory:\n    if p not in string1:\n        print(p)\n    if p not in string2:\n        print(p)\n    if p not in string3:\n        print(p)","ba3bc3f6":"# CONVERT NUMBERS TO EMOJIS\nreplace_dict = {\n '5': '\ud83c\udf85',\n '4': '\ud83e\udd36',\n '8': '\ud83c\udf1f',\n '1': '\ud83e\udd8c',\n '2': '\ud83e\udddd',\n '3': '\ud83c\udf84',\n '6': '\ud83c\udf81',\n '7': '\ud83c\udf80'}\n\nfor k,v in replace_dict.items():\n    string1 = string1.replace(k, v)\n    string2 = string2.replace(k, v)\n    string3 = string3.replace(k, v)","4ac0a840":"# WRITE SUBMISSION CSV\nsub = pd.DataFrame()\nsub['schedule'] = [string1, string2, string3]\nsub.to_csv('submission.csv',index=False)\nsub.head()","3881e4c7":"# Solve with LKH-3 TSP Solver\nWe will solve the traveling salesman problem with Lin-Kernighan heuristic aka LKH. Their homepage is [here][1] and user guide is [here][2]. We can improve this notebook's LB score by adjusting the following parameters. Currently to make this notebook run quickly, we limit the solver to only 1 run of 120 seconds. We can also improve LB by using wildcards.\n\n* adjust1 = 18\n* adjust2 = 12\n* RUNS = 1\n* TIME_LIMIT = 120\n\n[1]: http:\/\/webhotel4.ruc.dk\/~keld\/research\/LKH-3\/\n[2]: http:\/\/akira.ruc.dk\/~keld\/research\/LKH\/LKH-2.0\/DOC\/LKH-2.0_USER_GUIDE.pdf","7311aac3":"# Helper Functions","e6383518":"# Santa Movie Challenge as Traveling Salesman Problem \nThis notebook is a starter notebook for solving Kaggle's 2021 Santa movie challenge as a traveling salesman problem. To solve TSP, we will use Lin-Kernighan heuristic aka LKH. Their homepage is [here][1] and user guide is [here][2]\n\n[1]: http:\/\/webhotel4.ruc.dk\/~keld\/research\/LKH-3\/\n[2]: http:\/\/akira.ruc.dk\/~keld\/research\/LKH\/LKH-2.0\/DOC\/LKH-2.0_USER_GUIDE.pdf","93decfe3":"# Assign Permutations To 3 Submission Strings\nThere are 5040 permutations for `n=7`. The 120 that start with \ud83c\udf85\ud83e\udd36 must be contained in every string. There are 4920 remaining. We will assign rougly one third of the remaining 4920 to each string. And we will assign the 120 to every string.","2df75b77":"# Begin With Best n=7 Solution\nWe begin with the best published superpermutation for n=7 [here][1]\n\n[1]: https:\/\/www.gregegan.net\/SCIENCE\/Superpermutations\/Superpermutations.html","f5674776":"# Write Submission CSV","39d3bb3c":"# Verify\nLet's verify that all permutations are contained in at least one string. And let's verify that the mandatory sequences are contained in every string."}}