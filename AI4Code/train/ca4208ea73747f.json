{"cell_type":{"8a94d6fa":"code","3c618ed0":"code","a78f1885":"code","51fa5b16":"code","afcb2e4a":"code","7677fec7":"code","e7eaa5eb":"code","e0efe3dd":"code","b0046156":"code","4f4cf087":"code","0e3d2688":"code","cc51d87c":"code","ea069835":"code","06aa10b7":"code","6a937c86":"code","a9047a15":"code","84db3f60":"code","5282ddeb":"markdown","ad8a9c9c":"markdown","38067e6d":"markdown","4b7b256d":"markdown","aa9f1616":"markdown","98a176d0":"markdown","e4a94135":"markdown","57f74739":"markdown","b1b4dd46":"markdown","8fc2f7ff":"markdown","e8d2f235":"markdown","b062bf7c":"markdown","21401d7a":"markdown","d670216d":"markdown","fabfa8ed":"markdown","0ca130b7":"markdown","3c9cf4cc":"markdown","2a08951a":"markdown","2dbccd63":"markdown"},"source":{"8a94d6fa":"import pandas as pd\ntrain_data = pd.read_csv(\"..\/input\/cassava-leaf-disease-classification\/train.csv\")\ntrain_data.head(3)","3c618ed0":"# JSON\uc744 pd.Dataframe\uc73c\ub85c \uc77d\uae30\n# https:\/\/stackoverflow.com\/questions\/48614158\/read-json-file-as-pandas-dataframe\ntrain_json = pd.read_json(\"..\/input\/cassava-leaf-disease-classification\/label_num_to_disease_map.json\", lines=True)\ntrain_json","a78f1885":"# pd.Dataframe \ub9f5\ud551\n# http:\/\/www.leejungmin.org\/post\/2018\/04\/21\/pandas_apply_and_map\/\ntrain_data[\"class\"] = train_data[\"label\"].map(lambda x : train_json[x][0])\ntrain_data.head(3)","51fa5b16":"train_data.info()","afcb2e4a":"import seaborn as sns\nsns.countplot(data=train_data, y =\"class\")","7677fec7":"import os \npath = \"..\/input\/cassava-leaf-disease-classification\/train_images\"\nimages = os.listdir(path)\nprint(\"# Image :\", len(images))","e7eaa5eb":"import cv2\nshape = {}\nfor image in images[:300]:\n    img = cv2.imread(f\"{path}\/{image}\")\n    shape[img.shape] = shape.get(img.shape, 0) + 1\nprint(shape)","e0efe3dd":"import numpy as np\nimport math\nfrom tensorflow.keras.utils import Sequence\n\nclass Dataloader(Sequence):\n    def __init__(self, x_set, y_set, batch_size, shuffle=False):\n        self.x, self.y = x_set, y_set\n        self.batch_size = batch_size\n        self.shuffle=shuffle\n        self.on_epoch_end()\n\n    def __len__(self):\n        return math.ceil(len(self.x) \/ self.batch_size)\n\n    def __getitem__(self, idx):\n        indices = self.indices[idx*self.batch_size:(idx+1)*self.batch_size]\n        batch_x = [cv2.imread(x[i]) for i in indices]\n        batch_y = [self.y[i] for i in indices]\n\n        return np.array(batch_x), np.array(batch_y)\n\n    def on_epoch_end(self):\n        self.indices = np.arange(len(self.x))\n        if self.shuffle == True:\n            np.random.shuffle(self.indices)","b0046156":"train_data['path'] = train_data['image_id'].map(lambda x : f\"..\/input\/cassava-leaf-disease-classification\/train_images\/{x}\")\ntrain_data.head(3)\ntrain_data.describe()","4f4cf087":"from sklearn.model_selection import train_test_split\nx = train_data['path'].array\ny = train_data['label'].array\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=34)\ntrain_loader = Dataloader(x_train, y_train, 16, shuffle=True)\nvalid_loader = Dataloader(x_test, y_test, 16)\n","0e3d2688":"import tensorflow as tf\n\ndata_augmentation_layers = tf.keras.Sequential(\n    [\n        tf.keras.layers.experimental.preprocessing.RandomFlip(\"horizontal_and_vertical\"), #\ub79c\ub364\uc73c\ub85c \uc774\ubbf8\uc9c0\ub97c \uc88c\uc6b0\ub85c \ub4a4\uc9d1\uc5b4\uc90c.\n        tf.keras.layers.experimental.preprocessing.RandomRotation(0.25), #\uc774\ubbf8\uc9c0\ub97c \uc88c\uc6b0\ub85c 25% \uc774\ub0b4\ub85c \ub79c\ub364\uc73c\ub85c \ub3cc\ub9bd\ub2c8\ub2e4. \n        tf.keras.layers.experimental.preprocessing.RandomZoom((-0.2, 0)), #\uc774\ubbf8\uc9c0\ub97c 0~20%\ub9cc\ud07c \ub79c\ub364\uc73c\ub85c \ucd95\uc18c\ud569\ub2c8\ub2e4.\n        \n    ]\n)","cc51d87c":"import tensorflow as tf\n\nmobile_net = tf.keras.applications.MobileNetV2(\n    include_top=False, weights='imagenet', input_shape=(600,800,3)\n)\nmobile_net.trainable=True\n'''\nefficient_net = tf.keras.applications.EfficientNetB7(\n    include_top=False, weights='imagenet', input_shape=(600,800,3)\n)\nefficient_net.trainable=True\n'''","ea069835":"from tensorflow.keras.models import Sequential, Model\nfrom tensorflow.keras.layers import Dense, Dropout, Activation, Input, BatchNormalization, GlobalAveragePooling2D, Flatten\nfrom tensorflow.keras import layers\n\nmodel = Sequential() \nmodel.add(Input(shape=(600,800,3)))\nmodel.add(data_augmentation_layers) \nmodel.add(mobile_net) \n#model.add(efficient_net) \nmodel.add(layers.GlobalAveragePooling2D())\nmodel.add(layers.Dropout(0.5)) \nmodel.add(Flatten())\nmodel.add(Dense(5, activation=\"softmax\"))\nmodel.summary()\nmodel.trainable=True","06aa10b7":"from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping\ncallbacks = [ModelCheckpoint(filepath='.\/model.h5', monitor='val_loss', save_best_only=True), EarlyStopping(monitor='val_loss', patience = 5, verbose=1)]","6a937c86":"# model = tf.keras.models.load_model(\".\/model.h5\")\nmodel.compile(optimizer=\"Adam\", loss=\"sparse_categorical_crossentropy\", metrics=[\"acc\"])\nhistory  = model.fit(train_loader, validation_data=valid_loader, epochs=100, workers=8, callbacks=callbacks)\n# model.save(\".\/model.h5\")","a9047a15":"import numpy as np\n# model = tf.keras.models.load_model(\".\/model.h5\")\ntest_image = cv2.imread(\"..\/input\/cassava-leaf-disease-classification\/test_images\/2216849948.jpg\")\nresult = model.predict(np.array([test_image]))\nprint(np.argmax(result))","84db3f60":"submission = pd.read_csv(\"..\/input\/cassava-leaf-disease-classification\/sample_submission.csv\")\nsubmission[\"label\"] = np.argmax(result)\nsubmission.to_csv('submission.csv', index=False)","5282ddeb":"# 1. \ub370\uc774\ud130 \uc0b4\ud3b4\ubcf4\uae30\n\uac01\uac01\uc744 \ubd88\ub7ec\uc640 \ub0b4\uc6a9\uc744 \uc0b4\ud3b4\ubd05\uc2dc\ub2e4.\n\ud559\uc2b5 \ub370\uc774\ud130\uac00 \uc544\ub798\uc640 \uac19\uc74c\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n- CSV\n    - image id : label\n- JSON\n    - label : disease\n- Image","ad8a9c9c":"\uacb0\uce21\uac12 \ud655\uc778","38067e6d":"## 2.2 \ub370\uc774\ud130 \uc14b \ub9cc\ub4e4\uae30","4b7b256d":"- check point","aa9f1616":"# 4. \uc81c\ucd9c\ud558\uae30","98a176d0":"## 2.1 \ub370\uc774\ud130 \ub85c\ub354 \ub9cc\ub4e4\uae30\n- path \uc5d0\uc11c img array \ub97c \ucd94\ucd9c\ud558\uae30 \uc704\ud574, custom dataloader\ub97c \uc0ac\uc6a9\ud588\uc2b5\ub2c8\ub2e4.\n","e4a94135":"SOTA \ubaa8\ub378\uc778 EfficientNet\uc744 \uc0ac\uc6a9\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n- https:\/\/paperswithcode.com\/sota\/image-classification-on-imagenet\n- https:\/\/keras.io\/api\/applications\/efficientnet\/","57f74739":"# 3. \ud559\uc2b5\uc2dc\ud0a4\uae30","b1b4dd46":"- sparse_categorical_crossentropy : label\n- categorical_crossentropy : one_hot","8fc2f7ff":"# 2. \ubaa8\ub378\ub9c1","e8d2f235":"- dict.get(a, b) : key a\uc5d0 \ud574\ub2f9\ud558\ub294 value\ub97c \ubc18\ud658\n    - a : \ucc3e\uc73c\ub824\ub294 key\n    - b : \uc5c6\uc744 \uacbd\uc6b0 \ub9ac\ud134\ud560 \uac12","b062bf7c":"## 1.1 CSV \uc0b4\ud3b4\ubcf4\uae30\npd.read_csv(path)","21401d7a":"# 0. \ubaa9\ucc28\n1. \ub370\uc774\ud130 \uc0b4\ud3b4\ubcf4\uae30\n    - \ub370\uc774\ud130\ub97c \uc0b4\ud3b4\ubcf4\uace0 \ud544\uc694\ud55c \uc790\ub8cc\ub97c \ubd88\ub7ec\uc635\ub2c8\ub2e4. \n2. \ubaa8\ub378\ub9c1\n    - \ubaa8\ub378\uc744 \uc124\uacc4\ud569\ub2c8\ub2e4.\n3. \ud559\uc2b5\uc2dc\ud0a4\uae30\n    - \ubaa8\ub378\uc744 \ud559\uc2b5\uc2dc\ud0b5\ub2c8\ub2e4.\n4. \uc81c\ucd9c\ud558\uae30 \n    - \uacb0\uacfc\ub97c \uc81c\ucd9c\ud569\ub2c8\ub2e4.\n    \n\n\n    ","d670216d":"- \ub370\uc774\ud130 \ubd84\ud3ec \ud655\uc778\n- https:\/\/datascienceschool.net\/01%20python\/05.04%20%EC%8B%9C%EB%B3%B8%EC%9D%84%20%EC%82%AC%EC%9A%A9%ED%95%9C%20%EB%8D%B0%EC%9D%B4%ED%84%B0%20%EB%B6%84%ED%8F%AC%20%EC%8B%9C%EA%B0%81%ED%99%94.html","fabfa8ed":"\uc544\ub798 Notebook\uc744 \ucc38\uace0\ud588\uc2b5\ub2c8\ub2e4.\n- https:\/\/www.kaggle.com\/vkehfdl1\/for-korean-cassava\n- https:\/\/www.kaggle.com\/ihelon\/cassava-leaf-disease-exploratory-data-analysis","0ca130b7":"## 1.4 \uc774\ubbf8\uc9c0 \uc0b4\ud3b4\ubcf4\uae30\n- os.listdir()\n    - \ub514\ub809\ud1a0\ub9ac \ub0b4 \ubaa8\ub4e0 \ud30c\uc77c\uacfc \ub514\ub809\ud1a0\ub9ac \ub9ac\uc2a4\ud2b8\ub97c \ub9ac\ud134\ud55c\ub2e4.","3c9cf4cc":"## 2.3 \ub808\uc774\uc5b4 \uc313\uae30","2a08951a":"## 1.3 \ub370\uc774\ud130 \ud1b5\ud569\npd.Series = pd.Series.map(labda x: x)","2dbccd63":"## 1.2 JSON \uc0b4\ud3b4\ubcf4\uae30\npd.read_json(path, line=True)"}}