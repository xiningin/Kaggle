{"cell_type":{"ec34adcd":"code","5a78e05e":"code","aa5cf571":"code","fe4b473d":"code","0de5e7d5":"code","a2f601aa":"code","2d82e948":"code","da24c789":"code","852ef432":"code","17374c89":"code","8e446103":"code","ae043f56":"code","d6540c34":"code","f4bdd1f3":"code","9cadcafa":"code","26118d7f":"code","db42bc8c":"code","3b96dd62":"code","5f4b2c47":"code","19e5f679":"code","3fdab495":"code","8c309404":"code","bcfedadc":"code","7fcdf854":"code","72ca26d0":"code","1843cfbb":"code","4fe41b45":"code","928c703b":"code","c6fa99fe":"code","252d7683":"code","4f6be2aa":"code","de551c01":"code","18dd2eb6":"code","ed60f75b":"code","2944d040":"code","18bbe7c5":"code","00517781":"code","36e8e92a":"code","db263d56":"code","cc12c557":"code","afbfa78e":"code","23470ab7":"code","44946072":"code","745c592d":"code","d6c27a07":"code","f6065a6f":"code","09e165ee":"code","187128e0":"code","9ad62e06":"code","c518e38f":"code","91b86c8a":"code","f39c9c38":"code","1210395e":"code","aca6675a":"code","4203edf6":"code","60f53c9a":"code","d65174cd":"code","fc22a54a":"code","de602d02":"code","d5799aaa":"code","8df07692":"code","d461f335":"code","06a63fde":"code","32ef7804":"code","cd1968c9":"code","954b37d9":"code","817f39fc":"code","1d9e1f6f":"code","33e033fa":"code","52f504a9":"code","24dffa7b":"code","a8f1a4d8":"code","bd948b74":"code","2a9e6635":"code","9dacd8c8":"code","30e46cf2":"code","f93af29f":"code","414aeb48":"code","d59ef3bf":"code","6b54c57e":"code","d90a3fca":"code","1f51c652":"code","2c7b29c3":"code","91f253c8":"code","1f2e165b":"code","e04422c0":"code","59fb5c81":"code","7588069e":"code","ca748794":"code","ddae4e06":"code","d8aead64":"code","aa2c2f8f":"code","3201ce8d":"code","6c4f2d6f":"code","eca1cf66":"code","7a53de33":"markdown","c5c2a17c":"markdown","55b50e9b":"markdown","b0b9b8c1":"markdown","2a5d5c7c":"markdown","b673dc44":"markdown","7323609a":"markdown","06846a90":"markdown","fb8c427d":"markdown","13c77be5":"markdown","9eb963ec":"markdown","056abfef":"markdown","9fd0db68":"markdown","fa3f5d9d":"markdown","4ca77eb5":"markdown","abd1df8b":"markdown","2b8df3da":"markdown"},"source":{"ec34adcd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5a78e05e":"import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error","aa5cf571":"train_df = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2022\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2022\/test.csv\")","fe4b473d":"train_df.head()","0de5e7d5":"test_df.head()","a2f601aa":"train = train_df.iloc[:, 1:]\ntrain.head()","2d82e948":"train.describe()","da24c789":"train.info()","852ef432":"train['country'].value_counts()","17374c89":"train['store'].value_counts()","8e446103":"train['product'].value_counts()","ae043f56":"train.head()","d6540c34":"import matplotlib.pyplot as plt\n\ntrain.hist(bins=50)\nplt.show()","f4bdd1f3":"# \ub4a4\uc5d0\uc11c date \uce7c\ub7fc \uc774\uc6a9\ud574\uc11c \ud734\uc77c \ucc3e\uc544\ub0b4\uc57c\ud558\ubbc0\ub85c date \uc800\uc7a5\ud574\ub193\uc790\ntrain_df_date = train['date']\nprint(train_df_date)\n\nX = train.drop(['date', 'num_sold'], axis=1)  \ny = train['num_sold']\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)","9cadcafa":"X_train","26118d7f":"y_train","db42bc8c":"from sklearn.preprocessing import OneHotEncoder\n\ncat_encoder = OneHotEncoder()\ncat_1hot = cat_encoder.fit_transform(X)\ncat_1hot","3b96dd62":"a = cat_1hot.toarray()\na","5f4b2c47":"cat_encoder.categories_","19e5f679":"X_1hot = pd.DataFrame(a)\nX_1hot.head()","3fdab495":"X_train, X_test, y_train, y_test = train_test_split(X_1hot, y, test_size=0.2)","8c309404":"print(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)\n","bcfedadc":"X_train.head()","7fcdf854":"y_train.head()","72ca26d0":"y_train","1843cfbb":"def SMAPE(y_true, y_pred):\n    denominator = (y_true + np.abs(y_pred)) \/ 200\n    diff = np.abs(y_true - y_pred) \/ denominator\n    diff[denominator == 0] = 0.0\n    return np.mean(diff)","4fe41b45":"from sklearn.tree import DecisionTreeRegressor\n\ndt_reg = DecisionTreeRegressor()\ndt_reg.fit(X_train, y_train)\n\ny_pred_dt = dt_reg.predict(X_test)","928c703b":"SMAPE(y_test, y_pred_dt)","c6fa99fe":"train_df = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2022\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2022\/test.csv\")\nGDP_df = pd.read_csv(\"..\/input\/gdp-20152019-finland-norway-and-sweden\/GDP_data_2015_to_2019_Finland_Norway_Sweden.csv\")","252d7683":"GDP_df.head()","4f6be2aa":"train_df.head()","de551c01":"def get_year(date):\n    return(date[:4])\n\ntrain_df['date']\n# a[0,1]\n# get_year(train_df['date'][0,1])","18dd2eb6":"train_df = train_df.drop(['row_id'], axis=1)\ntrain_head = train_df.head()\ntrain_head","ed60f75b":"train_head.head()","2944d040":"train_head.insert(1, 'year', 1)\ntrain_head","18bbe7c5":"train_head.iloc[0,0]","00517781":"for i in range(train_head.shape[0]):\n#     train_head[i][1] = i\n    train_head.iloc[i, 1] = get_year(train_head['date'][i])\n#     get_year(train_head['date'][i, 0])","36e8e92a":"train_head.head()","db263d56":"train_df.head()","cc12c557":"train_df.insert(1, 'year', 1)","afbfa78e":"# for i in range(train_df.shape[0]):\n#     train_df.iloc[i, 1] = get_year(train_df['date'][i])","23470ab7":"train_df","44946072":"train_df.shape","745c592d":"train_df.tail()","d6c27a07":"GDP_df.head()","f6065a6f":"train_df.insert(1, 'GDP', 1)","09e165ee":"import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error","187128e0":"train_df = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2022\/train.csv\", parse_dates=['date'],index_col=\"row_id\")\nGDP_df = pd.read_csv(\"..\/input\/gdp-20152019-finland-norway-and-sweden\/GDP_data_2015_to_2019_Finland_Norway_Sweden.csv\",index_col=\"year\")","9ad62e06":"def SMAPE(y_true, y_pred):\n    denominator = (y_true + np.abs(y_pred)) \/ 200\n    diff = np.abs(y_true - y_pred) \/ denominator\n    diff[denominator == 0] = 0.0\n    return np.mean(diff)","c518e38f":"train_df['year'] = train_df['date'].dt.year","91b86c8a":"train_df['year'] = train_df['date'].dt.year","f39c9c38":"# rename the columns in GDP dataframe \nGDP_df.columns = ['Finland', 'Norway', 'Sweden']\n# create a dictionary\nGDP_dictionary = GDP_df.unstack().to_dict()\n# now create a new `GDP_value` column\ntrain_df[\"GDP_value\"] = train_df.set_index(['country','year']).index.map(GDP_dictionary.get)","1210395e":"train_df","aca6675a":"train_df['Friday'] = train_df['date'].dt.weekday == 4\ntrain_df['Weekend'] = train_df['date'].dt.weekday >= 5","4203edf6":"print(train_df['Friday'].value_counts())\nprint(train_df['Weekend'].value_counts())","60f53c9a":"train_df","d65174cd":"# \ub4a4\uc5d0\uc11c date \uce7c\ub7fc \uc368\uc57c\ud558\ubbc0\ub85c \ub530\ub85c \uc800\uc7a5\ud574\ub193\uc790\ntrain_df_date = train_df['date']\n\nX = train_df.drop(['num_sold', 'date', 'year'], axis=1)   # \uc77c\ub2e8 year \ube7c\uace0 \ud574\ubcf4\uc790.\ny = train_df['num_sold']\n\nX.head()","fc22a54a":"X_cat = X.drop(['GDP_value'], axis=1)\nX_num = X['GDP_value']","de602d02":"X_cat.columns","d5799aaa":"X_cat_1hot = pd.get_dummies(X_cat[X_cat.columns])\nX_cat_1hot.head()","8df07692":"X_1hot = pd.merge(X_cat_1hot, X_num, left_index=True, right_index=True)\nX_1hot.head()","d461f335":"# from sklearn.preprocessing import OneHotEncoder\n\n# cat_encoder = OneHotEncoder()\n# X_cat_1hot = cat_encoder.fit_transform(X_cat)\n# X_cat_1hot","06a63fde":"# X_cat_1hot.toarray()","32ef7804":"# X_1hot = pd.DataFrame(X_cat_1hot)\n# X_1hot.head()","cd1968c9":"X_train, X_test, y_train, y_test = train_test_split(X_1hot, y, test_size=0.2)\nprint(X_train.shape)\nprint(X_test.shape)","954b37d9":"from sklearn.linear_model import LinearRegression, Ridge, Lasso","817f39fc":"ridge = Ridge()\nridge.fit(X_train, y_train)\ny_pred = ridge.predict(X_test)","1d9e1f6f":"SMAPE(y_test, y_pred)","33e033fa":"lasso = Lasso()\nlasso.fit(X_train, y_train)\ny_pred = lasso.predict(X_test)","52f504a9":"test_df.head()","24dffa7b":"SMAPE(y_test, y_pred)","a8f1a4d8":"lin_reg = LinearRegression()\nlin_reg.fit(X_train, y_train)\ny_pred = lin_reg.predict(X_test)","bd948b74":"SMAPE(y_test, y_pred)","2a9e6635":"from sklearn.preprocessing import OrdinalEncoder\nordinal_encoder = OrdinalEncoder()\nX_cat_lab = ordinal_encoder.fit_transform(X_cat)\nX_cat_lab[:10]","9dacd8c8":"ordinal_encoder.categories_","30e46cf2":"X_cat_lab = pd.DataFrame(X_cat_lab, columns=['country', 'store', 'product', 'Friday', 'Weenkend'])\nX_cat_lab.head()","f93af29f":"X_lab = pd.merge(X_cat_lab, X_num, left_index=True, right_index=True)\nX_lab.head()","414aeb48":"X_1hot","d59ef3bf":"X_1hot['date'] = train_df_date\nX_1hot.head()","6b54c57e":"from datetime import datetime, date, timedelta\nimport math\n\ndayofyear = X_1hot.date.dt.dayofyear\nfor k in range(1,3):\n    X_1hot[f'sin{k}'] = np.sin(dayofyear \/ 365 * 2 * math.pi * k)\n    X_1hot[f'cos{k}'] = np.cos(dayofyear \/ 365 * 2 * math.pi * k)\n    X_1hot[f'mug_sin{k}'] = X_1hot[f'sin{k}'] * X_1hot['product_Kaggle Mug']\n    X_1hot[f'mug_cos{k}'] = X_1hot[f'cos{k}'] * X_1hot['product_Kaggle Mug']\n    X_1hot[f'hat_sin{k}'] = X_1hot[f'sin{k}'] * X_1hot['product_Kaggle Hat']\n    X_1hot[f'hat_cos{k}'] = X_1hot[f'cos{k}'] * X_1hot['product_Kaggle Hat']\n    \nX_1hot.head()","d90a3fca":"X_1hot = X_1hot.drop(['date'], axis=1)","1f51c652":"test_df = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2022\/test.csv\", parse_dates=['date'],index_col=\"row_id\")\ntest_df.head()","2c7b29c3":"test_df['year'] = test_df['date'].dt.year","91f253c8":"# rename the columns in GDP dataframe \nGDP_df.columns = ['Finland', 'Norway', 'Sweden']\n# create a dictionary\nGDP_dictionary = GDP_df.unstack().to_dict()\n# now create a new `GDP_value` column\ntest_df[\"GDP_value\"] = test_df.set_index(['country','year']).index.map(GDP_dictionary.get)","1f2e165b":"test_df['Friday'] = test_df['date'].dt.weekday == 4\ntest_df['Weekend'] = test_df['date'].dt.weekday >= 5","e04422c0":"test_df_date = test_df['date']\n\ntest_df = test_df.drop(['date'], axis=1)\ntest_df.head()","59fb5c81":"test_cat = test_df.drop(['GDP_value'], axis=1)\ntest_num = test_df['GDP_value']","7588069e":"test_cat = test_df.drop(['GDP_value'], axis=1)\ntest_num = test_df['GDP_value']","ca748794":"test_cat_1hot = pd.get_dummies(test_cat[test_cat.columns])\ntest_1hot = pd.merge(test_cat_1hot, test_num, left_index=True, right_index=True)\ntest_1hot = test_1hot.drop(['year'], axis=1)\ntest_1hot.head()","ddae4e06":"test_1hot","d8aead64":"test_1hot['date'] = test_df_date\ntest_1hot.head()","aa2c2f8f":"dayofyear = test_1hot.date.dt.dayofyear\nfor k in range(1,3):\n    test_1hot[f'sin{k}'] = np.sin(dayofyear \/ 365 * 2 * math.pi * k)\n    test_1hot[f'cos{k}'] = np.cos(dayofyear \/ 365 * 2 * math.pi * k)\n    test_1hot[f'mug_sin{k}'] = test_1hot[f'sin{k}'] * test_1hot['product_Kaggle Mug']\n    test_1hot[f'mug_cos{k}'] = test_1hot[f'cos{k}'] * test_1hot['product_Kaggle Mug']\n    test_1hot[f'hat_sin{k}'] = test_1hot[f'sin{k}'] * test_1hot['product_Kaggle Hat']\n    test_1hot[f'hat_cos{k}'] = test_1hot[f'cos{k}'] * test_1hot['product_Kaggle Hat']\n    \ntest_1hot.head()","3201ce8d":"test_1hot = test_1hot.drop(['date'], axis=1)","6c4f2d6f":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport xgboost\n\nmodel = xgboost.XGBRegressor()\nmodel.fit(X_1hot, y)\ny_pred_xgb = model.predict(test_1hot)","eca1cf66":"target = pd.DataFrame()\ntarget['row_id'] = test_df.index\ntarget['num_sold'] = y_pred_xgb\ntarget.to_csv('num_sold_5.csv', index=False)\n\ntarget","7a53de33":"### \ub77c\uc3d8","c5c2a17c":"# GDP \uce7c\ub7fc \ucd94\uac00","55b50e9b":"## \ub9bf\uc9c0\/\ub77c\uc3d8\/\ub9ac\ub2c8\uc5b4 \uc801\uc6a9","b0b9b8c1":"# date\uce7c\ub7fc, \uc885\uc18d\ubcc0\uc218 \uc81c\uc678\ud55c \uc804\uccb4 \uce7c\ub7fc OneHotEncoding","2a5d5c7c":"# \uc81c\ub300\ub85c \ub2e4\uc2dc","b673dc44":"### \ub9ac\ub2c8\uc5b4","7323609a":"# \uc2e4\uc81c \ud14c\uc2a4\ud2b8\uc14b \ud615\ud0dc \ubc14\uafd4\uc11c \uc608\uce21","06846a90":"### \uc2e4\uc218\ub85c \ud655\uc778\ud574\ubcf8\uac74\ub370, \uc8fc\ub9d0 \uceec\ub7fc\uc774 \ud558\ub098 \ub354 \ub4e4\uc5b4\uac14\uc744 \ub54c \uc804\uccb4\uc801\uc73c\ub85c \uc815\ud655\ub3c4 \ub192\uc558\uc74c.","fb8c427d":"## \uc0c1\ud488\ubcc4 \uacc4\uc808 \uc218\uc694 \ubcc0\ud654 \ucd94\uac00","13c77be5":"## train\/test set \ubd84\ub9ac","9eb963ec":"## \ud734\uc77c \ub370\uc774\ud130 \ucd94\uac00","056abfef":"## date\ub294 \ub098\uc911\uc5d0 \uc5f0\ubcc4\/\uc6d4\ubcc4 \ub4f1\uc73c\ub85c \ub098\ub220\uc11c \ubd84\uc11d\ud574\ubcf4\uc790. \uc9c0\uae08\uc740 \uc77c\ub2e8 \ubaa8\ub974\uaca0\uc74c.","9fd0db68":"### \ub9bf\uc9c0","fa3f5d9d":"## \uc6d0\ud56b\uc778\ucf54\ub529","4ca77eb5":"## \ub77c\ubca8\uc778\ucf54\ub529","abd1df8b":"\uc804\uccb4 train \ub370\uc774\ud130\ub85c \uc778\ucf54\ub529\n - \uce74\ud14c\uace0\ub9ac\uceec\uc740 \uc6d0\ud56b\uc778\ucf54\ub529\n - \uc591\uc801\uc740 \uadf8\ub300\ub85c\n - \uc774\ud6c4 merge\n\uadf8\uac78\ub85c fit \ud558\uace0 \uc2e4\uc81c test \ub370\uc774\ud130\ub3c4 \uc704\uc758 \ubc29\ubc95\uc73c\ub85c \uc778\ucf54\ub529\ud574\uc11c predict.","2b8df3da":"# \uce74\ud14c\uace0\ub9ac\uceec \ub370\uc774\ud130 \ucc98\ub9ac + \ubaa8\ub378\ub9c1"}}