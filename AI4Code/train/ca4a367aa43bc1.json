{"cell_type":{"1adf08c5":"code","e04f6544":"code","0e271db6":"code","8507c574":"code","cd910511":"code","145bd10f":"code","ea30c70a":"code","afdd0ff1":"code","7a85e08f":"markdown","4ad7bdb4":"markdown","229d7f55":"markdown","d7959038":"markdown","f32abc0b":"markdown","59305645":"markdown","538d1f57":"markdown"},"source":{"1adf08c5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e04f6544":"from kaggle_environments import make, evaluate\n\n#Create the game environment\nenv = make(\"connectx\", debug=True)\n\n#List the default agents\nprint(list(env.agents))","0e271db6":"#Make two random agents play in the environment\nenv.run([\"random\", \"random\"])\n\n#Show the game\nenv.render(mode=\"ipython\")","8507c574":"import numpy as np\nimport random","cd910511":"#Selects random valid column\ndef agent_random(obs, config):\n    valid_moves = [col for col in range(config.columns) if obs.board[col]==0]\n    return random.choice(valid_moves)\n\n#Selects middle column\ndef agent_middle(obs, config):\n    return len(config.columns)\/\/2\n\n#Selects leftmost valid column\ndef agent_leftmost(obs, config):\n    valid_moves = [col for col in range(config.columns) if obs.board[col]==0]\n    return valid_moves[0]","145bd10f":"#Run the agents in the environment\nenv.run([agent_leftmost, agent_random])\n\n#Show the game\nenv.render(mode = \"ipython\")","ea30c70a":"def get_win_percentages(agent1, agent2, n_rounds=100):\n    # Use default Connect Four setup\n    config = {'rows': 6, 'columns': 7, 'inarow': 4}\n    # Agent 1 goes first (roughly) half the time          \n    outcomes = evaluate(\"connectx\", [agent1, agent2], config, [], n_rounds\/\/2)\n    # Agent 2 goes first (roughly) half the time      \n    outcomes += [[b,a] for [a,b] in evaluate(\"connectx\", [agent2, agent1], config, [], n_rounds-n_rounds\/\/2)]\n    print(\"Agent 1 Win Percentage:\", np.round(outcomes.count([1,-1])\/len(outcomes), 2))\n    print(\"Agent 2 Win Percentage:\", np.round(outcomes.count([-1,1])\/len(outcomes), 2))\n    print(\"Number of Invalid Plays by Agent 1:\", outcomes.count([None, 0]))\n    print(\"Number of Invalid Plays by Agent 2:\", outcomes.count([0, None]))","afdd0ff1":"get_win_percentages(agent1=agent_leftmost, agent2=\"negamax\")","7a85e08f":"# Defining agents\nTo participate in the competition, you'll create your own agents.\n\nYour agent should be implemented as a Python function that accepts two arguments: obs and config. It returns an integer with the selected column, where indexing starts at zero. So, the returned value is one of 0-6, inclusive.\n\nWe'll start with a few examples, to provide some context. In the code cell below:\n\nThe first agent behaves identically to the `\"random\"` agent above.\nThe second agent always selects the middle column, whether it's valid or not! Note that if any agent selects an invalid move, it loses the game.\nThe third agent selects the leftmost valid column.","4ad7bdb4":"So, what are `obs` and `config`, exactly?\n\n`obs` : `obs` contains two pieces of information:\n\n`obs.board` - the game board (a Python list with one item for each grid location)\n`obs.mark` - the piece assigned to the agent (either 1 or 2)\n`obs.board` is a Python list that shows the locations of the discs, where the first row appears first, followed by the second row, and so on. We use 1 to track player 1's discs, and 2 to track player 2's discs. For instance, for this game board:\n\n\n`obs.board` would be [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 2, 1, 2, 0, 2, 0].\n\n`config` : `config` contains three pieces of information:\n\n`config.columns` - number of columns in the game board (7 for Connect Four)\n`config.rows` - number of rows in the game board (6 for Connect Four)\n`config.inarow` - number of pieces a player needs to get in a row in order to win (4 for Connect Four)","229d7f55":"Evaluating on multiple games","d7959038":"# The Environment","f32abc0b":"The `\"random\"` agent selects (uniformly) at random from the set of valid moves. In Connect Four, a move is considered valid if there's still space in the column to place a disc (i.e., if the board has seven rows, the column has fewer than seven discs).\n\nIn the code cell below, this agent plays one game round against a copy of itself.","59305645":"# Evaluating the agents","538d1f57":"## Checking the obs and config variables"}}