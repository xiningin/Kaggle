{"cell_type":{"151900f0":"code","1259341d":"code","92d233b4":"code","6ce2c908":"code","55be38c2":"code","bfbf30ef":"code","7210d243":"code","1e4c42b8":"code","e2932fa0":"code","eabe476f":"code","5ea3e49d":"code","1503cf21":"code","77ca649d":"code","85e20ee0":"code","0937f316":"code","cddc68f1":"code","9688684f":"code","62967099":"code","d46773bb":"code","3d6d05b5":"code","ff480af1":"code","76a2fbd7":"code","95445a5f":"code","84e08061":"code","3a0120fd":"code","6c47fb18":"code","2a898ba1":"code","d7a25247":"code","99ee65f4":"code","0f29aa86":"code","0f82f630":"code","65e02435":"code","1f7b6d5f":"markdown","b7ee6592":"markdown","a1d8a15e":"markdown","a52a1c2c":"markdown","aff3c99f":"markdown","fa481f11":"markdown","ce0d7e62":"markdown","abe9fc5c":"markdown"},"source":{"151900f0":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1259341d":"## Reading the train and test set.\ndf_train= pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_test= pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nprint(df_train.shape)\nprint(df_test.shape)","92d233b4":"## Combining the datasets.\ndf= pd.concat([df_train,df_test], axis=0)","6ce2c908":"## Checking for null values in df\ndf.isnull().sum()","55be38c2":"## General information about the data\ndf.info()","bfbf30ef":"df.describe()","7210d243":"## Working with null values\ndf['Age'].interpolate(inplace=True)\ndf['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)\ndf['Fare'].interpolate(inplace=True)","1e4c42b8":"## Working with categorical data.\ndf['Sex'].replace({'male': 0, 'female': 1}, inplace= True)","e2932fa0":"## Merging SibSp and Parch,\ndf['Family Members']=df['SibSp']+df['Parch']\ndf.drop(['SibSp','Parch'], axis=1, inplace=True)","eabe476f":"## Splitting Name and getting unique values\nstg=df['Name'].apply(lambda x: x.split(\" \")[1][:-1]).unique()\nstg","5ea3e49d":"## Updating Name\ndf['Name']=df['Name'].apply(lambda x: x.split(\" \")[1][:-1])","1503cf21":"df","77ca649d":"## Converting Name to 4 categories\nfor i,name in enumerate(df['Name']):\n    if(name in ['Don', 'Major', 'Capt', 'Rev', 'Col', 'Carlo','Gordon','Walle']):\n        df['Name'].replace(df.iloc[i]['Name'],'Mr',inplace=True)\n        \n    elif(name in ['Mlle','Ms']):\n        df['Name'].replace(df.iloc[i]['Name'],'Miss',inplace=True)\n        \n    elif(name in ['Mme','Countess']):\n        df['Name'].replace(df.iloc[i]['Name'],'Mrs',inplace=True)\n        \n    elif(name in ['Master','Mr','Mrs','Miss']):\n        continue\n        \n    else:\n        if(df.iloc[i]['Sex']==0):\n            df['Name'].replace(df.iloc[i]['Name'],'Mr',inplace=True)\n        elif(df.iloc[i]['Sex']==1):\n            df['Name'].replace(df.iloc[i]['Name'],'Miss',inplace=True)\n            \ndf.tail(5)","85e20ee0":"df['Name'].value_counts()","0937f316":"## Relation between Pclass and Survived.\nx=df.groupby('Survived')['Pclass'].value_counts()\nx","cddc68f1":"pd.crosstab(df['Pclass'], df['Survived']).plot(kind='bar', stacked=True, color=['black','red'])","9688684f":"## Relation of gender with survival.\ndf.groupby('Sex')['Survived'].value_counts().plot.barh()","62967099":"# Relation of age with survival.\npd.crosstab(df['Age'], df['Survived']).plot(kind='area',figsize=(10,5), color=['red','green'])","d46773bb":"df.groupby('Embarked')['Survived'].value_counts()","3d6d05b5":"sns.heatmap(df.corr(),cmap=\"YlGnBu\", annot=True)","ff480af1":"# Using one-hot encoding to encode Embarked and Name column,\nfrom sklearn.preprocessing import LabelEncoder\nlabel= LabelEncoder()\ndf['Embarked']=label.fit_transform(df['Embarked'])\ndf['Name']=label.fit_transform(df['Name'])","76a2fbd7":"df= pd.get_dummies(df,columns=['Name','Embarked'])","95445a5f":"df","84e08061":"## Dropping irrelevant columns,\ndf.drop(columns=['PassengerId','Ticket','Cabin'], inplace= True)","3a0120fd":"df","6c47fb18":"## Splitting into X and Y,\nX = df.drop(columns=['Survived'])\nY = df[['Survived']]","2a898ba1":"# Splitting into train and test set,\nX_train= X[:891]\nY_train = Y[:891]\nX_test= X[891:]\nY_test= Y[891:]","d7a25247":"## Building classification model using Random Forest Classifier\nfrom sklearn.ensemble import RandomForestClassifier\nrandom=RandomForestClassifier()\nrandom.fit(X_train, Y_train)\nprint('Model trained!')","99ee65f4":"from sklearn.model_selection import GridSearchCV\nparams = { \n              \"max_features\": [1, 3, 5 ,7, 10],\n              \"min_samples_split\": [2, 3,4,5,6,7,8,9,10],\n              \"n_estimators\" :[100,300, 500, 700, 1000, 1200, 1500, 1700],\n              \"criterion\": [\"gini\", \"entropy\"]\n          }\ngs = GridSearchCV(random,param_grid=params, scoring=\"accuracy\", n_jobs= -1, verbose = 1)\n\ngs.fit(X_train,Y_train)\n\nprint(gs.best_estimator_)\nprint(gs.best_score_)","0f29aa86":"## Make predictions \ny_pred= random.predict(X_test)","0f82f630":"submission= pd.DataFrame({'PassengerId':df_test['PassengerId'],'Survived':y_pred})\nsubmission=submission.astype({'Survived': int})\nsubmission.to_csv('my_submission.csv', index=False)","65e02435":"submission","1f7b6d5f":"### Data Preprocessing","b7ee6592":"### Import the libraries","a1d8a15e":"Men experienced most number of deaths.","a52a1c2c":"Most amount of deaths were of people in the age group of 15-30.","aff3c99f":"People having ticket class 3 (low socio-economic status) experienced the highest number of deaths.\nPeople who survived were mostly belonging to 1st class.","fa481f11":"### Model Training","ce0d7e62":"### Load Datasets","abe9fc5c":"### Exploratory Data Analysis (EDA)"}}