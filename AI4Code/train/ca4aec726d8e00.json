{"cell_type":{"5b7bf85f":"code","e2c9bdb3":"code","b93cd13f":"code","afce6346":"code","4d8cbdfc":"code","7eea2611":"code","5fc53414":"code","43c87d40":"code","bad19702":"code","10bb13c9":"code","30cc166b":"code","1c150759":"code","2aa0e36e":"code","0931a402":"code","969d5f7c":"code","d098d376":"code","74361389":"code","5a8f7e01":"code","c5eff882":"code","1829f7c2":"code","bfdcd1cb":"code","cc13ad29":"code","7704f3ab":"code","f468cf68":"code","f2dcce1d":"code","1b12c920":"code","81a18a9e":"code","7f0052c4":"markdown","5b97328a":"markdown","f9708abc":"markdown","b5abaf5d":"markdown","476cecea":"markdown","56d7f143":"markdown","9392a481":"markdown","cd6cfd0b":"markdown","e1c1f417":"markdown","3a98b61f":"markdown","60701782":"markdown","2f010c9f":"markdown","8e83d85b":"markdown","5bbf59e5":"markdown"},"source":{"5b7bf85f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e2c9bdb3":"lect = pd.read_csv(\"\/kaggle\/input\/riiid-test-answer-prediction\/lectures.csv\")\nprint(lect.shape)\nques = pd.read_csv(\"\/kaggle\/input\/riiid-test-answer-prediction\/questions.csv\")\nprint(ques.shape)","b93cd13f":"import dask.dataframe as dd\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport seaborn as sns","afce6346":"%%time\ntrain = dd.read_csv(\"\/kaggle\/input\/riiid-test-answer-prediction\/train.csv\", low_memory=False)\nprint(str(len(train))+','+str(len(train.columns)))","4d8cbdfc":"train.head()","7eea2611":"user = train.groupby(train.user_id).user_id.count().compute()","5fc53414":"len(user)","43c87d40":"user.sort_values(ascending = False)\nuser_20 = user.nlargest(20)\nuser_20 = user_20.reset_index(name = 'counts')\nuser_20.user_id = user_20.user_id.astype('str')\nrow = user_20.user_id.tolist()\ncol = user_20.counts.tolist()\nfig = plt.figure(figsize=(15,10))\nax = fig.add_axes([0,0,1,1])\nax = sns.barplot(x=\"user_id\", y=\"counts\", data=user_20)\nax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")\nax.set_title('Top 20 users')\nplt.show()","bad19702":"content = train.groupby(train.content_id).content_id.count().compute()\nlen(content)","10bb13c9":"content.sort_values(ascending = False)\ncontent_20 = content.nlargest(20)\ncontent_20 = content_20.reset_index(name = 'counts')\ncontent_20.content_id = content_20.content_id.astype('str')\nrow = content_20.content_id.tolist()\ncol = content_20.counts.tolist()\nfig = plt.figure(figsize=(15,10))\nax = fig.add_axes([0,0,1,1])\nax = sns.barplot(x=\"content_id\", y=\"counts\", data=content_20)\nax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")\nax.set_title('Top 20 Contents')\nplt.show()","30cc166b":"content_type = train.groupby(train.content_type_id).content_type_id.count().compute()\ncontent_type = content_type.reset_index(name = 'count')\nfig = px.pie(content_type, values='count', names='content_type_id', title='Content Type')\nfig.show()","1c150759":"task_container = train.groupby(train.task_container_id).task_container_id.count().compute()\ntask_container.sort_values(ascending = False)\ntask_20 = task_container.nlargest(20)\ntask_20 = task_20.reset_index(name = 'counts')\ntask_20.task_container_id = task_20.task_container_id.astype('str')\nprint(len(task_container))","2aa0e36e":"row = task_20.task_container_id.tolist()\ncol = task_20.counts.tolist()\nfig = plt.figure(figsize=(15,10))\nax = fig.add_axes([0,0,1,1])\nax = sns.barplot(x=\"task_container_id\", y=\"counts\", data=task_20)\nax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")\nax.set_title('Top 20 Task Containers')\nplt.show()","0931a402":"pr_question = train.groupby(train.prior_question_had_explanation).prior_question_had_explanation.count().compute()\npr_question = pr_question.reset_index(name = 'count')\nfig = px.pie(pr_question, values='count', names='prior_question_had_explanation', title='Prior Question had Explanation Distribution')\nfig.show()","969d5f7c":"answered_correctly = train.groupby(train.answered_correctly).answered_correctly.count().compute()\nanswered_correctly = answered_correctly.reset_index(name = 'count')\nfig = px.pie(answered_correctly, values='count', names='answered_correctly', title='Answered correctly Distribution')\nfig.show()","d098d376":"user_answer = train.groupby(train.user_answer).user_answer.count().compute()\nuser_answer = user_answer.reset_index(name = 'count')\nfig = px.pie(user_answer, values='count', names='user_answer', title='User Answer Distribution')\nfig.show()","74361389":"prior_question = train.groupby(train.prior_question_elapsed_time).prior_question_elapsed_time.count().compute()\nprior_question.sort_values(ascending = False)\nques_20 = prior_question.nlargest(20)\nques_20 = ques_20.reset_index(name = 'counts')\nques_20.prior_question_elapsed_time = ques_20.prior_question_elapsed_time.astype('str')\nques_20.sort_values(by = 'counts', ascending= False)\nprint(len(prior_question))","5a8f7e01":"row = ques_20.prior_question_elapsed_time.tolist()\ncol = ques_20.counts.tolist()\nfig = plt.figure(figsize=(15,10))\nax = fig.add_axes([0,0,1,1])\nax = sns.barplot(x=\"prior_question_elapsed_time\", y=\"counts\", data=ques_20)\nax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")\nax.set_title('Top 20 Time Consumption')\nplt.show()","c5eff882":"lect.head()","1829f7c2":"type_count = lect.groupby(\"type_of\")['lecture_id'].count().reset_index(name = 'counts')\nfig = px.pie(type_count, values='counts', names='type_of', title='Lecture Type Distribution')\nfig.show()","bfdcd1cb":"part_count = lect.groupby(\"part\")['lecture_id'].count().reset_index(name = 'counts')\nfig = px.pie(part_count, values='counts', names='part', title='Part Type Distribution')\nfig.show()","cc13ad29":"part_type = lect.groupby([\"type_of\",\"part\"])[\"part\"].count().reset_index(name = 'counts')\nfig = px.scatter(part_type, x=\"part\", y=\"type_of\", size = 'counts')\nfig.show()","7704f3ab":"ques.head()","f468cf68":"fig = plt.figure(figsize=(12,8))\nax = fig.add_axes([0,0,1,1])\ncr = ques.groupby(\"correct_answer\")['question_id'].count().reset_index(name = 'counts')\nax = sns.barplot(x=\"correct_answer\", y=\"counts\", data=cr)","f2dcce1d":"fig = plt.figure(figsize=(12,8))\nax = fig.add_axes([0,0,1,1])\npr = ques.groupby(\"part\")['question_id'].count().reset_index(name = 'counts')\nax = sns.barplot(x=\"part\", y=\"counts\", data=pr)","1b12c920":"fig = plt.figure(figsize=(12,8))\nax = fig.add_axes([0,0,1,1])\ntg = ques.groupby(\"tags\")['question_id'].count().reset_index(name = 'counts')\ntg = tg.sort_values(by = 'counts', ascending = False)\ntg_20 = tg[:20]\nax = sns.barplot(x=\"tags\", y=\"counts\", data=tg_20)","81a18a9e":"part_type = ques.groupby([\"part\",\"correct_answer\"])[\"correct_answer\"].count().reset_index(name = 'counts')\nfig = px.scatter(part_type, x=\"part\", y=\"correct_answer\", size = 'counts')\nfig.show()","7f0052c4":"If you <font color = 'orange'>like<\/font> this kernel and want to <font color = 'orange'>fork<\/font> plz <font color = 'red'><b>UPVOTE.<\/b><\/font>\n\nIf you have suggestions to improve this kernel plz <font color = 'red'>COMMENT.<\/font>\n\n<font color = 'Orange'><b>************************ Notebook is under construction ************************<\/b><\/font>","5b97328a":"## Video Lectures","f9708abc":"### Total number of contents","b5abaf5d":"Only **2%** of Users watching the Lecture videos. **98%** Users exposed to the questions.","476cecea":"**89%** previous questions had explanations.","56d7f143":"Your challenge is to create algorithms for \"Knowledge Tracing,\" the modeling of student knowledge over time. The goal is to accurately predict how students will perform on future interactions. You will pair your machine learning skills using Riiid\u2019s EdNet data.","9392a481":"### Total number of Task Containers","cd6cfd0b":"![image.png](attachment:image.png)","e1c1f417":"**64.5%** Users provides the correct answers while **33.6%** provides wrong answers. ","3a98b61f":"Since the file is too large I am using Dask dataframe to read the train.csv","60701782":"## Sample Data","2f010c9f":"## Questions","8e83d85b":"## Libraries","5bbf59e5":"### Total number of Users"}}