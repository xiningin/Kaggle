{"cell_type":{"bb27d957":"code","3f8cfe83":"code","3f66869c":"code","310a3b52":"code","5f16b74c":"code","63f71591":"code","c03b7249":"code","0de905ab":"code","9b493d49":"code","60285089":"code","87c671b0":"code","252c7637":"code","5e3226b7":"code","45141e55":"markdown","8f74872d":"markdown","e52f7d71":"markdown","da8e76ad":"markdown","c1add085":"markdown","4589437b":"markdown","9e442a85":"markdown","a5aff810":"markdown","54f709ef":"markdown","ecfb5f5d":"markdown","d3cf17da":"markdown","a6aa833a":"markdown","4fcde0f8":"markdown","c6985811":"markdown","c736d2fd":"markdown","16cf2b01":"markdown","b712dc0d":"markdown"},"source":{"bb27d957":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3f8cfe83":"import sklearn","3f66869c":"from sklearn.datasets import load_breast_cancer","310a3b52":"data = load_breast_cancer()","5f16b74c":"data","63f71591":"label_names = data[\"target_names\"]\nlabels = data[\"target\"]\nfeature_names = data[\"feature_names\"]\nfeatures = data[\"data\"]","c03b7249":"print(label_names)\nprint(labels[0])\nprint(feature_names[0])\nprint(features[0])","0de905ab":"from sklearn.model_selection import train_test_split","9b493d49":"train, test, train_labels, test_labels = train_test_split(features, labels, test_size = 0.2, random_state = 42)","60285089":"print(train.shape)\nprint(test.shape)\nprint(train_labels.shape)\nprint(test_labels.shape)","87c671b0":"# import the module\nfrom sklearn.naive_bayes import GaussianNB\n\n# Initialize the Classifier\ngnb = GaussianNB()\n\n# Train the Classifier\nmodel = gnb.fit(train, train_labels)","252c7637":"# make predictions\n\npreds = gnb.predict(test)\npreds","5e3226b7":"from sklearn.metrics import accuracy_score\naccuracy_score(test_labels, preds)","45141e55":"+ Use the training set to train and evaluate the model during development stage\n+ Then use trained Model to make predictions on the unseen test set","8f74872d":"Now use the model to make prediction on our test set, use predict() function","e52f7d71":"Keys to consider are the classification labels names (target_names), the actual labels (target), the attribute\/feature names (feature_names), and the attributes (data).\n\nAttributes are a critical part of any classifier. Attributes capture important characteristics about the nature of data.","da8e76ad":"Using the simple algorithm that performs well in binary classification tasks, called Naive Bayes(NB).\n\n+ Import GaussianNB Module\n+ Initialize the Model with GaussianNB() function\n+ train the model by fitting it to data using gnb.fit()","c1add085":"# Building ML Classifier in Python with Scikit-Learn","4589437b":"### Organize the Data","9e442a85":"### STEP 1: Importing Scikit-Learn","a5aff810":"### Which means that, 97.36% of time,the classifier is able to make the correct prediction as whether or not the tumor is malignant or benign.","54f709ef":"### STEP 2: Importing Dataset","ecfb5f5d":"![](http:\/\/https:\/\/images.app.goo.gl\/7TUsb1n8zm5swWAM9)","d3cf17da":"Look at the data","a6aa833a":"malignant = 0 s\nbenign = 1 s","4fcde0f8":"### STEP 5: Evaluate Model Accuracy","c6985811":"### STEP 4: Building and Evaluating Model","c736d2fd":"### The result suggest that the feature set of 30 attributes are good indicators of tumor class.","16cf2b01":"Dataset: [Breat Cancer Wisconsin Diagnostic Database](https:\/\/scikit-learn.org\/stable\/datasets\/index.html#breast-cancer-wisconsin-diagnostic-database)\n\nThe Dataset includes various information about Breast Cancer tumors, as well as classification labels of malignant or benign.\nThe Dataset has 569 instances, or data, on 569 tumors and includes information on 30 attributes, or features, such as the radius of tumor, texture,smoothness, and area.\n\nUsing the Dataset it is supposed to Build an ML Model to use tumor information to predict whether or not a tumor is malignant or benign.","b712dc0d":"### STEP 3: Organizing Data Into Sets"}}