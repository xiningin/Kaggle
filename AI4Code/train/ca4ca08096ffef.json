{"cell_type":{"7016dc8e":"code","64594940":"code","45cfeb52":"code","dbfae55a":"code","a72b242d":"code","14403897":"code","ceb97e3e":"code","ad21a58a":"code","0c425811":"code","8bc9447e":"code","a045756c":"code","b86a18b8":"code","cd0d8724":"code","45525299":"code","4b44ee17":"code","71b81392":"code","4f6d83f7":"code","8266ecde":"code","6a7f1fb3":"code","94011e5a":"code","5a2440a6":"code","7ab87263":"code","8db35a7e":"code","4e8fa9e0":"code","0e96a115":"code","6185e287":"code","73cb8c7a":"code","6b3a30cc":"code","c1c1013b":"code","0c9e2d16":"markdown","2e92f080":"markdown","adab2dc9":"markdown","9c7c763e":"markdown","34373c8b":"markdown"},"source":{"7016dc8e":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport category_encoders as ce\n\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold","64594940":"data0 = pd.read_csv(\"..\/input\/temperature-forecast-project-using-ml\/temp.csv\")\ndata0[0:5].T","45cfeb52":"data0.info()","dbfae55a":"data0=data0.fillna(0)","a72b242d":"data0=data0.drop(['station','Date'],axis=1)","14403897":"print(data0.columns.to_list())","ceb97e3e":"target=['Next_Tmax','Next_Tmin']\ndatay=data0[target]\ndatax=data0.drop(target,axis=1)","ad21a58a":"print(datay[0:2].T)\nprint(datax[0:2].T)","0c425811":"n=len(data0)\nprint(n)","8bc9447e":"N=[]\nfor i in range(n):\n    N+=[i]\nrandom.shuffle(N)","a045756c":"trainX=datax.loc[N[0:(n\/\/4)*3]]\ntrainY=datay.loc[N[0:(n\/\/4)*3]]\ntestX=datax.loc[N[(n\/\/4)*3:]]\ntestY=datay.loc[N[(n\/\/4)*3:]]","b86a18b8":"print(trainX.shape)\nprint(testX.shape)","cd0d8724":"df_columns = list(datax.columns)\nprint(df_columns)","45525299":"train_df=trainX\ntest_df=testX","4b44ee17":"train_df.columns=df_columns\ntest_df.columns=df_columns","71b81392":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","4f6d83f7":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","8266ecde":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","6a7f1fb3":"train_feat_df = to_feature(train_df)\ntest_feat_df = to_feature(test_df)","94011e5a":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","5a2440a6":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n    'num_leaves': 62\n}","7ab87263":"y = trainY\nprint(y.shape)\nydf=pd.DataFrame(y)\nydf","8db35a7e":"from sklearn.model_selection import KFold\n\nfor i in range(2):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    \n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_xlabel('oof '+str(i),fontsize=12)\n    ax.set_ylabel('train_y '+str(i),fontsize=12)\n    ax.scatter(oof,y)","4e8fa9e0":"print(target)","0e96a115":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    \n    ax.tick_params(axis='x', rotation=0)\n    #ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    \n    return fig,ax\n\n#fig, ax = visualize_importance(models, train_feat_df)","6185e287":"pred1=[]\nfor i in range(2):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    fig, ax = visualize_importance(models, train_feat_df)\n    ax.set_title(target[i]+' Imortance',fontsize=20)\n    pred0 = np.array([model.predict(test_feat_df.values) for model in models])\n    pred1+=[np.mean(pred0, axis=0)]","73cb8c7a":"pred1=np.array(pred1)\ntestY=np.array(testY)","6b3a30cc":"print(pred1.T.shape)\nprint(testY.shape)","c1c1013b":"for i in range(2):\n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_xlabel('ACTUAL '+target[i],fontsize=12)\n    ax.set_ylabel('PRDICTED '+target[i],fontsize=12)\n    ax.scatter(testY[:,i],pred1.T[:,i])","0c9e2d16":"* station - used weather station number: 1 to 25\n* Date - Present day: yyyy-mm-dd ('2013-06-30' to '2017-08-30')\n* Present_Tmax - Maximum air temperature between 0 and 21 h on the present day (\u00c2\u00b0C): 20 to 37.6\n* Present_Tmin - Minimum air temperature between 0 and 21 h on the present day (\u00c2\u00b0C): 11.3 to 29.9\n* LDAPS_RHmin - LDAPS model forecast of next-day minimum relative humidity (%): 19.8 to 98.5\n* LDAPS_RHmax - LDAPS model forecast of next-day maximum relative humidity (%): 58.9 to 100\n* LDAPSTmaxlapse - LDAPS model forecast of next-day maximum air temperature applied lapse rate (\u00c2\u00b0C): 17.6 to 38.5\n* LDAPSTminlapse - LDAPS model forecast of next-day minimum air temperature applied lapse rate (\u00c2\u00b0C): 14.3 to 29.6\n* LDAPS_WS - LDAPS model forecast of next-day average wind speed (m\/s): 2.9 to 21.9\n* LDAPS_LH - LDAPS model forecast of next-day average latent heat flux (W\/m2): -13.6 to 213.4\n* LDAPS_CC1 - LDAPS model forecast of next-day 1st 6-hour split average cloud cover (0-5 h) (%): 0 to 0.97\n* LDAPS_CC2 - LDAPS model forecast of next-day 2nd 6-hour split average cloud cover (6-11 h) (%): 0 to 0.97\n* LDAPS_CC3 - LDAPS model forecast of next-day 3rd 6-hour split average cloud cover (12-17 h) (%): 0 to 0.98\n* LDAPS_CC4 - LDAPS model forecast of next-day 4th 6-hour split average cloud cover (18-23 h) (%): 0 to 0.97\n* LDAPS_PPT1 - LDAPS model forecast of next-day 1st 6-hour split average precipitation (0-5 h) (%): 0 to 23.7\n* LDAPS_PPT2 - LDAPS model forecast of next-day 2nd 6-hour split average precipitation (6-11 h) (%): 0 to 21.6\n* LDAPS_PPT3 - LDAPS model forecast of next-day 3rd 6-hour split average precipitation (12-17 h) (%): 0 to 15.8\n* LDAPS_PPT4 - LDAPS model forecast of next-day 4th 6-hour split average precipitation (18-23 h) (%): 0 to 16.7\n* lat - Latitude (\u00c2\u00b0): 37.456 to 37.645\n* lon - Longitude (\u00c2\u00b0): 126.826 to 127.135\n* DEM - Elevation (m): 12.4 to 212.3\n* Slope - Slope (\u00c2\u00b0): 0.1 to 5.2\n* Solar radiation - Daily incoming solar radiation (wh\/m2): 4329.5 to 5992.9\n* Next_Tmax - The next-day maximum air temperature (\u00c2\u00b0C): 17.4 to 38.9\n* Next_Tmin - The next-day minimum air temperature (\u00c2\u00b0C): 11.3 to 29.8T","2e92f080":"# Model","adab2dc9":"# Visualize Importance and Predict","9c7c763e":"# Target setting","34373c8b":"# Data preparation"}}