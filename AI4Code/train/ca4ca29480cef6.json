{"cell_type":{"d4e51f0f":"code","b1ca7b6c":"code","43ce6646":"code","6b9ac4d0":"code","71a3a749":"code","f7cc116a":"code","28766d64":"code","84f24bc8":"code","6235038c":"code","0c0c360b":"code","339b57bf":"code","930e7d5b":"code","7b533138":"code","08994508":"code","540bd1db":"code","5131ca22":"code","d1bffcc6":"code","576b70ee":"code","64f478c7":"code","3534cd50":"code","95b1584d":"code","8fb226cd":"code","b7d70ad5":"code","591c8d76":"code","8898aa52":"code","849ec121":"code","3a080a01":"code","66e9e52f":"code","009b8820":"code","fec19ade":"code","8c30cdf9":"code","bece0863":"code","c5e0e0ed":"code","177688ca":"code","c5eeffd1":"code","65ed0277":"code","ddcd82cd":"code","ece37c1c":"code","ba3ae302":"code","51507feb":"code","d806e6f9":"code","812ac714":"code","d83e60b5":"code","a643357b":"code","08e13fbe":"code","5cc569dc":"code","6cb0f8dd":"code","d6169634":"code","ccd52309":"code","20247df7":"code","57014bf0":"code","ca0cbf49":"code","ad2f9e56":"code","6e55cb36":"code","f4b05edf":"code","a13bb4e7":"code","bd52b0ce":"code","360be138":"code","61cee824":"code","55d715c2":"code","a95c7cef":"code","4571e46f":"code","688eb555":"code","22813b0c":"code","f9609b87":"code","05fa7ae1":"code","8014ca26":"code","ffe9f8b1":"code","87258d0c":"code","7c6cfebd":"markdown","bbe7fcb8":"markdown","f3b16818":"markdown","c454df3e":"markdown","958f2331":"markdown","a04dc577":"markdown"},"source":{"d4e51f0f":"import pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\nimport missingno as msno","b1ca7b6c":"#Reading dataset\ntrain = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","43ce6646":"train.shape","6b9ac4d0":"test.shape","71a3a749":"train.info()","f7cc116a":"train.columns","28766d64":"df=train.copy()","84f24bc8":"#Dropping columns which contains many nulls\ndrop_list=['MiscFeature','Fence','PoolQC','Alley','FireplaceQu','Id']\ndf.drop(drop_list,axis=1,inplace=True)","6235038c":"#Function for changing names of values in columns based on amount\ndef change(col,l):\n    df[col]=df[col].replace(l,'Others')","0c0c360b":"#Processes in different columns\ndef others(df):\n    change('MSZoning',['FV', 'RH', 'C (all)'])\n    change('LotConfig',['FR2', 'FR3', 'CulDSac'])\n    change('Neighborhood',['Blueste','NPkVill'])\n    change('Condition1',['RRNn','RRNe'])\n    change('HouseStyle',['1.5Unf','2.5Unf','2.5Fin'])\n    change('RoofStyle',['Shed','Mansard','Gambrel','Flat'])\n    change('RoofMatl',['Membran','ClyTile','Roll','Metal']) \n    change('Exterior1st',['BrkComm','Stone','AsphShn','CBlock','ImStucc']) \n    change('Exterior2nd',['AsphShn','Other','CBlock'])\n    df['MasVnrType'].fillna('Unknown' ,inplace=True)  \n    df['MasVnrArea'].fillna(round(df['MasVnrArea'].mean()) ,inplace=True)  \n    df['LotFrontage'].fillna(round(df['LotFrontage'].mean()) ,inplace=True)  \n    change('ExterQual',['Ex','Fa'])\n    change('ExterCond',['Ex','Po','Fa'])\n    change('Foundation',['Slab','Stone','Wood'])\n    df['BsmtQual'].fillna('Unknown' ,inplace=True) \n    df['BsmtExposure'].fillna('Unknown' ,inplace=True)  \n    df['BsmtFinType1'].fillna('Unknown' ,inplace=True) \n    df['BsmtFinType2'].fillna('Unknown' ,inplace=True)   \n    df['BsmtFinType2'].fillna('Unknown' ,inplace=True)   \n    change('Heating',['Grav','Wall','OthW','Floor'])\n    change('HeatingQC',['Fa','Po'])\n    change('Electrical',['FuseP','Mix'])\n    change('KitchenQual',['Ex','Fa'])\n    change('Functional',['Maj2','Sev'])\n    df['GarageType'].fillna('Unknown' ,inplace=True)   \n    change('GarageQual',['Ex','Po'])\n    df['GarageQual'].fillna('Unknown' ,inplace=True)   \n    change('GarageCond',['Ex','Po','Gd'])\n    df['GarageCond'].fillna('Unknown' ,inplace=True)   \n    change('SaleType',['ConLD','ConLI','ConLw','CWD','Oth','Con'])\n    change('SaleCondition',['Alloca','AdjLand'])\nothers(df)","339b57bf":"#Functions to display bar plots\ndef bar_plot_series(x,y,title,size=(6,4),hue_col=None):\n    plt.figure(figsize=size) \n    plt.title(title, fontsize=19)\n    sns.barplot(x,y,hue=hue_col)\n    \ndef bar_count(col,title,size=(6,4),hue_col=None):\n    df1=df[col].value_counts().sort_values(ascending=False)\n    bar_plot_series(df1.index,df1.values,title,size,hue_col)","930e7d5b":"bar_count('Electrical', 'Number of prefered electric types')\nbar_count('HouseStyle', 'Number of prefered HouseStyle types')\nbar_count('SaleCondition', 'Most prefered conditions')","7b533138":"#Function that groups by column displaying average price\ndef mean_groupby(col,title,size=(6,4)):\n    df1=df.groupby(col)['SalePrice'].mean().sort_values(ascending=False) \n    bar_plot_series(df1.index,df1.values,title,size)","08994508":"mean_groupby('MSZoning','Mean price by Zones')\nmean_groupby('HouseStyle','Mean price by HouseStyle')\nmean_groupby('Condition1','Mean price by Condition1')\nmean_groupby('Condition2','Mean price by Condition2')\nmean_groupby('Exterior1st','Mean price by Exterior1st',(9,5))\nmean_groupby('Exterior2nd','Mean price by Exterior2nd',(11,5))\nmean_groupby('SaleCondition','Mean price by SaleCondition')\nmean_groupby('GarageQual','Mean price by Garage Quality')##\nmean_groupby('GarageCond','Mean price by Garage Condition')##\nmean_groupby('SaleCondition','Mean price by Sale Condition')##","540bd1db":"def plot(col,title,size=(8,5)):\n    df1=df[col].value_counts().sort_index()\n    plt.figure(figsize=size) \n    plt.title(title, fontsize=19) \n    plt.plot(df1.index,df1.values)","5131ca22":"plot('YearBuilt','Number of houses builded by years')\nplot('YrSold','Number of houses sold by years')","d1bffcc6":"def plot_mean(col,title,size=(8,5)):\n    df1=df.groupby(col)['SalePrice'].mean().sort_index()\n    plt.figure(figsize=size) \n    plt.title(title, fontsize=19) \n    plt.plot(df1.index,df1.values)","576b70ee":"plot_mean('MSSubClass','Mean prices by MSSubClass')","64f478c7":"def scatter(col,title,size=(8,5)):\n    plt.figure(figsize=size)\n    plt.title(title,fontsize=19)\n    plt.scatter(df[col],df['SalePrice'],facecolors='none',edgecolors='black',s=12)","3534cd50":"scatter('OverallQual','Prices by overall Quality')\nscatter('OverallCond','Prices by overall Conditions')","95b1584d":"df2=df.groupby('OverallCond')['SalePrice'].mean().sort_index()\ndf3=df.groupby('OverallQual')['SalePrice'].mean().sort_index()\nplt.figure(figsize=(8,5))\nplt.title('Mean prices by overall quality and condition', fontsize=19)\nplt.plot(df2.index,df2.values)\nplt.plot(df3.index,df3.values)\nplt.legend(['Quality','Condition'])\nplt.show()","8fb226cd":"df4=df['BsmtFullBath']+df['BsmtHalfBath']+df['FullBath']+df['HalfBath']\nplt.figure(figsize=(8,5))\nplt.title('Prices by total number of Baths', fontsize=19)\nplt.scatter(df4.values,train['SalePrice'], facecolors='none', edgecolors='black',s=12)","b7d70ad5":"sns.distplot(df['SalePrice'])","591c8d76":"train.set_index('Id', inplace=True)\ntest.set_index('Id', inplace=True)","8898aa52":"SalePrice=train['SalePrice']","849ec121":"train1=train.drop('SalePrice', axis=1)","3a080a01":"df=pd.concat([train1, test], keys=['x', 'y'], axis=0)","66e9e52f":"df.shape","009b8820":"df.head(10)","fec19ade":"print(\"Total amount of Null values: {}\".format(df.isnull().sum().sum()))","8c30cdf9":"nulls = (df.isnull().sum()\/df.shape[0]).sort_values(ascending=False)\nnulls[nulls > 0]","bece0863":"#Dropping columns which contains a lot of null values\ndf=df.drop(['Alley', 'PoolQC', 'Fence', 'MiscFeature', 'FireplaceQu'], axis=1)","c5e0e0ed":"nulls = df.isnull().sum().sort_values(ascending=False)\nnulls[nulls > 0]","177688ca":"def fill_mode(dataframe,columns):\n    for i in columns:\n        dataframe[i]=dataframe[i].fillna(dataframe[i].value_counts().index[0])","c5eeffd1":"fill_mode(df, ['MSZoning', 'Utilities', 'Exterior1st', 'Exterior2nd',\n       'MasVnrType', 'BsmtQual', 'BsmtCond', 'BsmtExposure',\n       'BsmtFinType1', 'BsmtFinType2', 'Electrical',\n       'KitchenQual', 'Functional', 'GarageType',\n       'GarageFinish', 'GarageQual', 'GarageCond',\n       'SaleType'])","65ed0277":"nulls = df.isnull().sum()\nn=nulls[nulls > 0]\nn.index","ddcd82cd":"for i in range(0,len(n.index)):\n    print(n.index[i], df[n.index[i]].dtype)","ece37c1c":"nulls = df.isnull().sum()\nnulls[nulls > 0]","ba3ae302":"for col in df._get_numeric_data():\n    df[col]=df[col].fillna(df[col].mean())","51507feb":"df.isnull().sum().sum()","d806e6f9":"df.describe().T","812ac714":"def thresholds(dataframe, col_name, q1=0.25, q3=0.75):\n    quartile1 = dataframe[col_name].quantile(q1)\n    quartile3 = dataframe[col_name].quantile(q3)\n    IQR = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * IQR\n    low_limit = quartile1 - 1.5 * IQR\n    dataframe.loc[(dataframe[col_name] < low_limit), col_name] = low_limit\n    dataframe.loc[(dataframe[col_name] > up_limit), col_name] = up_limit\n    return dataframe","d83e60b5":"for i in df._get_numeric_data():\n    sns.boxplot(df[i])\n    plt.show()","a643357b":"num_cols = [col for col in df.columns if df[col].dtypes != \"O\"]","08e13fbe":"ob_cols = [col for col in df.columns if df[col].dtypes == \"O\"]","5cc569dc":"for col in num_cols:\n    df=thresholds(df, col)","6cb0f8dd":"for i in num_cols:\n\n    fig, axes = plt.subplots(nrows=1, ncols=3, figsize=(20, 4))\n    sns.histplot(df[i], bins=10, ax=axes[0])\n    axes[0].set_title(i)\n    \n    sns.boxplot(df[i], ax=axes[1])\n    axes[1].set_title(i)\n   \n    sns.kdeplot(df[i], ax=axes[2])\n    axes[2].set_title(i)\n    plt.show()","d6169634":"from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.linear_model import LinearRegression, Lasso, Ridge, ElasticNet\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom catboost import CatBoostRegressor\nfrom lightgbm import LGBMRegressor\nfrom sklearn.preprocessing import  MinMaxScaler","ccd52309":"df=pd.get_dummies(df, drop_first=True)","20247df7":"df.head(3)","57014bf0":"Train=df.loc['x']\nTest=df.loc['y']","ca0cbf49":"Train['SalePrice']=SalePrice","ad2f9e56":"Train1=Train.copy()","6e55cb36":"#Min-Max Scaler\ndef minmax_scaler(dataframe, col_names, feature_range=(0,1)):\n    minmax_scaler = MinMaxScaler(feature_range=feature_range)\n    col_names=[col for col in col_names]\n    dataframe[col_names] = minmax_scaler.fit_transform(dataframe[col_names])\n    return dataframe","f4b05edf":"Train=minmax_scaler(Train, Train._get_numeric_data())","a13bb4e7":"X=Train.drop('SalePrice', axis=1)\nY=Train[['SalePrice']]\nprint(Y.shape, X.shape)","bd52b0ce":"def best_randomstate(x,y):\n    min_error=100\n    model=Lasso()\n    for i in range(1,201):\n        xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.25,random_state=i)\n        model.fit(xtrain,ytrain)\n        p=model.predict(xtest)\n        mse=mean_squared_error(ytest, p)\n        if mse<min_error:\n            min_error=mse\n            j=i\n    return j","360be138":"randomstate=best_randomstate(X,Y)\nrandomstate","61cee824":"def results(Y_train, Y_train_pred, Y_test, Y_test_pred, model, score, X_train, X_test):\n    print(type(model).__name__)\n    print('Train Rmse: {}'.format(np.sqrt(mean_squared_error(Y_train, Y_train_pred))))\n    print('Train Score: {}'.format(model.score(X_train, Y_train)))\n    print('Test Rmse: {}'.format(np.sqrt(mean_squared_error(Y_test, Y_test_pred))))\n    print('Test Score: {}'.format(model.score(X_test, Y_test)))\n    print('Mean of Cross Validation Score: {}'.format(np.round(score.mean(),4)))\n    print('------------------------------------------------------')","55d715c2":"def models(df, reg_models):\n    for model in reg_models:\n        x=df.copy()\n        x.drop('SalePrice',axis=1,inplace=True)\n        y=df['SalePrice']\n        X_train,X_test,Y_train,Y_test=train_test_split(x,y,test_size=0.25,random_state=randomstate)\n        model.fit(X_train,Y_train)\n        Y_train_pred=model.predict(X_train)\n        Y_test_pred=model.predict(X_test)\n        score=cross_val_score(model,x,y,cv=10)\n        results(Y_train, Y_train_pred, Y_test, Y_test_pred, model, score, X_train, X_test)","a95c7cef":"reg_models=[LinearRegression(), Ridge(), Lasso(), ElasticNet(), \n        KNeighborsRegressor(n_neighbors=3), DecisionTreeRegressor(max_depth=2)]","4571e46f":"models(Train, reg_models)","688eb555":"model_parameters={\n    'Ridge' : {\n        'model': Ridge(),\n        'params': {'alpha': [0.1, 0.01, 0.005, 0.05, 0.001 ,0.2, 0.3, 0.5, 0.8, 0.9, 1], \n                   'solver': ['auto', 'svd', 'cholesky']}},\n    'Lasso': {\n        'model': Lasso(),\n        'params': {'selection': ['cyclic', 'random'], \n                  'alpha': [0.1,0.01, 0.005, 0.05, 0.001 ,0.2, 0.3, 0.5, 0.8, 0.9, 1]}},\n    'Decision Tree': {\n        'model': DecisionTreeRegressor(),\n        'params': {'criterion': ['mse', 'friedman_mse', 'mae', 'poisson'],\n                   'splitter': ['best', 'random']}}, \n    'KNeighbors': {\n        'model': KNeighborsRegressor(), \n        'params': {'algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute'], \n                  'weights': ['uniform', 'distance'],\n                  'n_neighbors': [3, 4, 5]}},\n    'ElasticNet': {\n        'model': ElasticNet(), \n        'params': {'alpha': [0.1,0.01, 0.005, 0.05, 0.001 ,0.2, 0.3, 0.5, 0.8, 0.9, 1],\n                  'selection': ['cyclic', 'random']}},\n    'LGBMRegressor': {\n        'model': LGBMRegressor(),\n        'params': {'learning_rate ': [0.1, 0.2], 'max_depth': list(range(-1, 2, 1)), \n                   'n_estimators': list(range(97, 103))}},\n    'CatBoostRegressor': {\n        'model': CatBoostRegressor(),\n        'params': {}}\n}","22813b0c":"def model_tunings(x,y, model_params):\n    results=[]\n    X_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.25, random_state=randomstate)  \n    for model_name, mp in model_params.items():\n        clf=GridSearchCV(mp['model'], mp['params'], cv=5, return_train_score=True)\n        clf.fit(X_train, Y_train)\n        Y_train_pred=clf.predict(X_train)\n        Y_test_pred=clf.predict(X_test)\n        train_error=np.sqrt(mean_squared_error(Y_train, Y_train_pred))\n        train_score=clf.score(X_train, Y_train)\n        test_error=np.sqrt(mean_squared_error(Y_test, Y_test_pred))\n        test_score=clf.score(X_test, Y_test)\n        print(model_name)\n        print('Train Rmse: {}'.format(train_error))\n        print('Train Score: {}'.format(train_score))\n        print('Test Rmse: {}'.format(test_error))\n        print('Test Score: {}'.format(test_score))\n        print('------------------------------------------------------')\n        results.append({'model': model_name, \n                        'Train Error': train_error,\n                        'Train Score': train_score,\n                        'Test Error': test_error,\n                        'Test Score': test_score,\n                        'best_score': clf.best_score_,\n                        'best_params': clf.best_params_})\n    return results","f9609b87":"scores = model_tunings(X, Y, model_parameters)","05fa7ae1":"res = pd.DataFrame(scores, columns=['model', 'Train Error', 'Train Score', 'Test Error', 'Test Score',\n       'best_score', 'best_params'])","8014ca26":"res.columns","ffe9f8b1":"res_sorted=res.sort_values('Test Error', ascending = True)\nres_sorted","87258d0c":"X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25, random_state=19)\nmodel=ElasticNet(alpha=0.001, selection='cyclic')\nmodel.fit(X_train, Y_train)\nY_train_pred=model.predict(X_train)\nY_test_pred=model.predict(X_test)\nscore=cross_val_score(model,X,Y,cv=10)\nresults(Y_train, Y_train_pred, Y_test, Y_test_pred, model, score, X_train, X_test)","7c6cfebd":"# Finalizing the model ","bbe7fcb8":"# Building Model","f3b16818":"# Outliers ","c454df3e":"# Hyperparameter Tuning","958f2331":"# Preprocessing","a04dc577":"# Graphs"}}