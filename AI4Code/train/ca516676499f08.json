{"cell_type":{"c85fc1c4":"code","c8af7ece":"code","19e89af3":"code","3963a137":"code","884939c9":"code","752b7874":"code","b4119ffd":"code","8d935508":"code","47ab2f16":"code","9bcc033f":"code","a135628f":"code","176f16ee":"code","d095720d":"markdown","61aa0eca":"markdown","739a96a4":"markdown","43d9f1da":"markdown","630db52b":"markdown","f13ec5b2":"markdown","200b1ff2":"markdown","97806086":"markdown","ad11a056":"markdown","8241c312":"markdown","bfcadf22":"markdown","54655348":"markdown"},"source":{"c85fc1c4":"import numpy as np\nimport pandas as pd\nfrom numpy.linalg import eig","c8af7ece":"A = np.array([[1,2,3,4],\n           [5,5,4,7],\n           [1,5,2,3],\n           [5,2,1,1],\n           [8,3,2,2]])\n\nprint(A)","19e89af3":"data = pd.DataFrame(A,columns  = ['f1','f2','f3','f4'])\ndata","3963a137":"std_data  = (data - data.mean()) \/ (data.std())\nstd_data","884939c9":"V = np.cov(std_data.T , bias = 0)\nprint(V)","752b7874":"V1 = np.cov(std_data.T , bias = 1)\nprint(V1)","b4119ffd":"values, vectors = eig(V)\nprint(vectors)\n","8d935508":"print(values)","47ab2f16":"P = vectors.T.dot(std_data.T)\nprint(P.T)","9bcc033f":"from sklearn.decomposition import PCA\n\npca = PCA(2)\npca.fit_transform(A)\n\nprint(pca.components_)","a135628f":"print(pca.explained_variance_)","176f16ee":"# transform data\nB = pca.transform(A)\nprint(B)","d095720d":"### Standardized the dataset","61aa0eca":"### Project Data","739a96a4":"### Result Using sklearn library","43d9f1da":"### 2. Covariance population formula (divide by N)","630db52b":"# Principle Component Analysis","f13ec5b2":"### Importing Libraries","200b1ff2":"### Calculate Eigenvalue and Eigen Vector","97806086":"There are **2 methods** for this:\n1. Sample Formula\n2. Population Formula\n\nWe can use any of the formula,","ad11a056":"### 1. Covariance sample formula (divide by N-1 )","8241c312":"### Define a Matrix","bfcadf22":"### Find the covariance matrix for the given dataset","54655348":"### I hope you liked my notebook"}}