{"cell_type":{"bbd61436":"code","6c59211b":"code","a80a1441":"code","6d23c282":"code","b279ba45":"code","42afa405":"code","0d6569e9":"code","6d0386c6":"code","eac71e3c":"code","6eb480dc":"code","2823aae4":"code","66fe0b7f":"code","9ee6d8d0":"markdown"},"source":{"bbd61436":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6c59211b":"import pandas as pd\nimport numpy as np\nimport math\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsuv_data = pd.read_csv('..\/input\/suv-purchase-decision\/SUV_Purchase.csv')\nsuv_data.head()","a80a1441":"X = suv_data.iloc[:, [2,3]].values\ny = suv_data.iloc[:, 4].values\n\n# iloc is selection by index. \n# first iloc have ':' this specifies all the rows, and 2:3 specifies the columns","6d23c282":"X[:10]","b279ba45":"y[0:10]","42afa405":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)","0d6569e9":"# we scale the data here because estimated salary have too large values\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform (X_test)","6d0386c6":"from sklearn.linear_model import LogisticRegression\nlog_reg_model = LogisticRegression(solver='liblinear')\nlog_reg_model.fit(X_train, y_train)","eac71e3c":"predictions = log_reg_model.predict(X_test)","6eb480dc":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, predictions))","2823aae4":"from sklearn.metrics import accuracy_score\na = accuracy_score(y_test, predictions)\na * 100","66fe0b7f":"from sklearn.metrics import classification_report, confusion_matrix\ncm = confusion_matrix(y_test, predictions)\n\nfig, ax = plt.subplots(figsize=(8, 8))\nax.imshow(cm)\nax.grid(False)\nax.set_xlabel('Predicted outputs', color='black')\nax.set_ylabel('Actual outputs', color='black')\nax.xaxis.set(ticks=range(2))\nax.yaxis.set(ticks=range(2))\nfor i in range(2):\n    for j in range(2):\n        ax.text(j, i, cm[i, j], ha='center', va='center', color='white')\nplt.show()","9ee6d8d0":"# SUV dataset- Logistic Regression"}}