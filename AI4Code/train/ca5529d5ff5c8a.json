{"cell_type":{"80e7b356":"code","41e8fef3":"code","44724db9":"code","cf84af38":"code","ccfa4022":"code","2f80ceeb":"code","61a9ebd9":"code","0b5606cc":"code","1b075bcb":"code","5ab205fc":"code","050b1b93":"code","e6a51394":"code","35484ff0":"code","9c967cdc":"code","e4be2f45":"code","ee649d77":"code","3100c938":"code","d3d23e8b":"code","04d694cb":"code","5c7cde2a":"code","34b4cecd":"code","4b2151f3":"code","c475cd5b":"code","92037d74":"code","0b6453dc":"code","27668f4c":"code","646010a1":"code","9ffa6c1b":"code","cf7c75b1":"code","f8ef8b82":"code","48f86f77":"code","d540c8bf":"code","ad6eba80":"code","a3ff45e3":"code","b33fa424":"code","2472c3c3":"code","04d584ed":"code","145839b9":"markdown"},"source":{"80e7b356":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport sklearn\nimport keras","41e8fef3":"items = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/items.csv')","44724db9":"items.head()","cf84af38":"item_categories = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/item_categories.csv')","ccfa4022":"item_categories.head()","2f80ceeb":"shops = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')","61a9ebd9":"shops.head()","0b5606cc":"train = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')","1b075bcb":"train.head()","5ab205fc":"train.shape","050b1b93":"test = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/test.csv')","e6a51394":"Id = test['ID']\ntest.head()","35484ff0":"test.shape","9c967cdc":"train.info()","e4be2f45":"train['date'] = pd.to_datetime(train['date'])","ee649d77":"train.isna().sum()","3100c938":"train['date'] = train['date'].apply(lambda x: x.strftime(\"%Y-%m\"))","d3d23e8b":"train.head().sort_values(by = 'date')","04d694cb":"train.drop(['date_block_num','item_price'] , axis =1, inplace= True)","5c7cde2a":"train.head().sort_values(by = 'date')","34b4cecd":"df = train.groupby(['date','shop_id','item_id']).sum()\ndf","4b2151f3":"df = train.pivot_table(index=['shop_id','item_id'], columns='date', values='item_cnt_day', fill_value=0)\ndf.reset_index(inplace=True)\ndf.head()","c475cd5b":"test_df = pd.merge(test, df, on=['shop_id','item_id'], how='left')\ntest_df.drop(['ID', '2013-01'], axis=1, inplace=True)\ntest_df = test_df.fillna(0)","92037d74":"test_df.head()","0b6453dc":"from sklearn.model_selection import train_test_split\n\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom lightgbm import LGBMRegressor\n\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.pipeline import Pipeline","27668f4c":"Y = df['2015-10'].values\nX = df.drop(['2015-10'], axis = 1)\ntest_full = test_df","646010a1":"X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.2, random_state = 42)","9ffa6c1b":"print(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","cf7c75b1":"lr = LinearRegression()\nlr.fit(X_train, y_train)\nprint('Train set mse:', mean_squared_error(y_train, lr.predict(X_train)))\nprint('Test set mse:', mean_squared_error(y_test, lr.predict(X_test)))\nprint('Train set score:', lr.score(X_train,y_train))","f8ef8b82":"lso = Lasso()\nlso.fit(X_train, y_train)\nprint('Train set mse:', mean_squared_error(y_train, lso.predict(X_train)))\nprint('Test set mse:', mean_squared_error(y_test, lso.predict(X_test)))\nprint('Train set score:', lso.score(X_train,y_train))","48f86f77":"ridge = Ridge()\nridge.fit(X_train, y_train)\nprint('Train set mse:', mean_squared_error(y_train, ridge.predict(X_train)))\nprint('Test set mse:', mean_squared_error(y_test, ridge.predict(X_test)))\nprint('Train set score:', ridge.score(X_train,y_train))","d540c8bf":"rndm_forst = RandomForestRegressor(n_estimators = 100)\nrndm_forst.fit(X_train, y_train)\nprint('Train set mse:', mean_squared_error(y_train, rndm_forst.predict(X_train)))\nprint('Test set mse:', mean_squared_error(y_test, rndm_forst.predict(X_test)))\nprint('Train set score:', rndm_forst.score(X_train,y_train))","ad6eba80":"grad_boost = GradientBoostingRegressor(learning_rate = 0.1, n_estimators = 100, random_state = 42)\ngrad_boost.fit(X_train, y_train)\nprint('Train set mse:', mean_squared_error(y_train, grad_boost.predict(X_train)))\nprint('Test set mse:', mean_squared_error(y_test, grad_boost.predict(X_test)))\nprint('Train set score:', grad_boost.score(X_train,y_train))","a3ff45e3":"prediction = grad_boost.predict(test_full)","b33fa424":"prediction = list(map(round, prediction))","2472c3c3":"sample_sub = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/sample_submission.csv')\nprint(sample_sub.shape)\nsample_sub.head()","04d584ed":"sample_sub['item_cnt_month'] = prediction\nsample_sub.to_csv('prediction.csv', index=False)\nsample_sub.head()","145839b9":"### Model"}}