{"cell_type":{"99b82fee":"code","a9ae599e":"code","01ee3eee":"code","a8716981":"code","98273c50":"code","7756c40c":"code","9bba7b8b":"code","d80b0c45":"code","89bbdf3b":"code","ac5f09a6":"code","f62f7f92":"code","384e7e38":"code","f47657bb":"code","59fdfd02":"code","908548fb":"code","44cbc2ed":"code","bfbc33b7":"code","e185ae22":"code","6f2cd429":"code","bcae60a9":"code","b59294fe":"code","f72c025c":"code","5ef7f2ad":"code","5e16098b":"code","6c49d60b":"code","6cb48f39":"code","7d13160e":"markdown","b538e863":"markdown","819d5e06":"markdown","ac5752b0":"markdown","01e19a53":"markdown","97e724c5":"markdown","a9b9c51f":"markdown","c14fbd1b":"markdown"},"source":{"99b82fee":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a9ae599e":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport nltk\nfrom sklearn.preprocessing import LabelBinarizer\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nfrom wordcloud import WordCloud, STOPWORDS\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.tokenize import word_tokenize, sent_tokenize\nfrom bs4 import BeautifulSoup\nimport re,string,unicodedata\nfrom keras.preprocessing import text, sequence\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom string import punctuation\nfrom nltk import pos_tag\nfrom nltk.corpus import wordnet\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Embedding, LSTM, Dropout\nfrom keras.callbacks import ReduceLROnPlateau\nimport tensorflow as tf","01ee3eee":"true = pd.read_csv(\"..\/input\/fake-and-real-news-dataset\/True.csv\")\nfalse = pd.read_csv(\"..\/input\/fake-and-real-news-dataset\/Fake.csv\")","a8716981":"true.head()","98273c50":"false.head()","7756c40c":"true['category'] = 1\nfalse['category'] = 0","9bba7b8b":"df = pd.concat([true, false])\n","d80b0c45":"df.head()","89bbdf3b":"sns.countplot(df.category)","ac5f09a6":"df.isna().sum()","f62f7f92":"df.subject.value_counts()","384e7e38":"plt.figure(figsize = (12,8))\nsns.set(style = \"whitegrid\",font_scale = 1.2)\nchart = sns.countplot(x = \"subject\", hue = \"category\" , data = df)\nchart.set_xticklabels(chart.get_xticklabels(),rotation=45)","f47657bb":"df['text'] = df['text'] + \" \" + df['title']\ndel df['title']\ndel df['subject']\ndel df['date']","59fdfd02":"df.head()","908548fb":"stop = set(stopwords.words('english'))\npunctuation = list(string.punctuation)\nstop.update(punctuation)\n","44cbc2ed":"def strip_html(text):\n    soup = BeautifulSoup(text, \"html.parser\")\n    return soup.get_text()\n\n\ndef remove_between_square_brackets(text):\n    return re.sub('\\[[^]]*\\]', '', text)\n\n\n# Removing URL's\ndef remove_between_square_brackets(text):\n    return re.sub(r'http\\S+', '', text)\n#Removing the stopwords from text\ndef remove_stopwords(text):\n    final_text = []\n    for i in text.split():\n        if i.strip().lower() not in stop:\n            final_text.append(i.strip())\n    return \" \".join(final_text)\n\n\ndef denoise_text(text):\n    text = strip_html(text)\n    text = remove_between_square_brackets(text)\n    text = remove_stopwords(text)\n    return text\n\ndf['text']=df['text'].apply(denoise_text)\n\n","bfbc33b7":"plt.figure(figsize = (20,20)) # Text that is not Fake\nwc = WordCloud(max_words = 2000 , width = 1600 , height = 800 , stopwords = STOPWORDS).generate(\" \".join(df[df.category == 1].text))\nplt.imshow(wc , interpolation = 'bilinear')\n","e185ae22":"plt.figure(figsize = (20,20)) # Text that is Fake\nwc = WordCloud(max_words = 2000 , width = 1600 , height = 800 , stopwords = STOPWORDS).generate(\" \".join(df[df.category == 0].text))\nplt.imshow(wc , interpolation = 'bilinear')","6f2cd429":"# Number ofcharacters in each text\n\nfig,(ax1,ax2)=plt.subplots(1,2,figsize=(12,8))\ntext_len=df[df['category']==1]['text'].str.len()\nax1.hist(text_len,color='red')\nax1.set_title('Original text')\ntext_len=df[df['category']==0]['text'].str.len()\nax2.hist(text_len,color='green')\nax2.set_title('Fake text')\nfig.suptitle('Characters in texts')\nplt.show()","bcae60a9":"fig,(ax1,ax2)=plt.subplots(1,2,figsize=(20,10))\nword=df[df['category']==1]['text'].str.split().apply(lambda x : [len(i) for i in x])\nsns.distplot(word.map(lambda x: np.mean(x)),ax=ax1,color='red')\nax1.set_title('Original text')\nword=df[df['category']==0]['text'].str.split().apply(lambda x : [len(i) for i in x])\nsns.distplot(word.map(lambda x: np.mean(x)),ax=ax2,color='green')\nax2.set_title('Fake text')\nfig.suptitle('Average word length in each text')","b59294fe":"def get_corpus(text):\n    words = []\n    for i in text:\n        for j in i.split():\n            words.append(j.strip())\n    return words\ncorpus = get_corpus(df.text)\ncorpus[:5]","f72c025c":"from collections import Counter\ncounter = Counter(corpus)\nmost_common = counter.most_common(10)\nmost_common = dict(most_common)\nmost_common\n","5ef7f2ad":"from sklearn.feature_extraction.text import CountVectorizer\ndef get_top_text_ngrams(corpus, n, g):\n    vec = CountVectorizer(ngram_range=(g, g)).fit(corpus)\n    bag_of_words = vec.transform(corpus)\n    sum_words = bag_of_words.sum(axis=0) \n    words_freq = [(word, sum_words[0, idx]) for word, idx in vec.vocabulary_.items()]\n    words_freq =sorted(words_freq, key = lambda x: x[1], reverse=True)\n    return words_freq[:n]","5e16098b":"plt.figure(figsize = (16,9))\nmost_common_uni = get_top_text_ngrams(df.text,10,1)\nmost_common_uni = dict(most_common_uni)\nsns.barplot(x=list(most_common_uni.values()),y=list(most_common_uni.keys()))","6c49d60b":"plt.figure(figsize = (16,9))\nmost_common_bi = get_top_text_ngrams(df.text,10,2)\nmost_common_bi = dict(most_common_bi)\nsns.barplot(x=list(most_common_bi.values()),y=list(most_common_bi.keys()))","6cb48f39":"plt.figure(figsize = (16,9))\nmost_common_tri = get_top_text_ngrams(df.text,10,3)\nmost_common_tri = dict(most_common_tri)\nsns.barplot(x=list(most_common_tri.values()),y=list(most_common_tri.keys()))","7d13160e":"## Cleaning data\n","b538e863":"#### Bigram analysis","819d5e06":"#### Unigram analysis","ac5752b0":"#### Average word length in a text","01e19a53":"#### Trigram analysis","97e724c5":"#### Distribution of Original news","a9b9c51f":"### WORDCLOUD FOR REAL TEXT (LABEL - 1)","c14fbd1b":"#### Distribution of Fake news"}}