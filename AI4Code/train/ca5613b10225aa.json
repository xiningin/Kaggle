{"cell_type":{"b9e2c060":"code","dee6dc2b":"code","28766385":"code","9d83fde1":"code","f0a18a92":"code","1c4500c4":"code","5923506d":"code","a201b8a6":"code","997adca9":"code","c00c882e":"code","25920899":"code","8ed338a8":"code","8d39b2b9":"code","81f857ca":"code","77c20a0c":"code","797fdf57":"code","7f7e6957":"code","214c2b52":"code","d0dd3287":"code","bc2b9754":"code","7d9caaaf":"code","83cb550b":"code","85af8853":"code","14c97802":"code","6058ef69":"code","d4fe4849":"code","be19723d":"code","2c637015":"code","00397738":"code","20d0276b":"code","0463e1a5":"code","f38ae318":"code","7c04076e":"code","572f45b7":"code","ebf648f3":"code","d1764cd5":"code","5eaea3f7":"code","f58af7c6":"markdown","51333f58":"markdown","c51b1fd3":"markdown","c8dd9aba":"markdown","7fd25d6e":"markdown","20156791":"markdown","85b3f21e":"markdown","f08704b9":"markdown","dc889c6b":"markdown","a233a415":"markdown","84fc8357":"markdown","cd4df92d":"markdown","d64ce059":"markdown","0fa3fba3":"markdown","18d25752":"markdown","cdc7d1c1":"markdown","655361db":"markdown","18382d52":"markdown"},"source":{"b9e2c060":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","dee6dc2b":"data_iris = pd.read_csv('\/kaggle\/input\/iris-dataset-with-outliers\/Iris_with_outliers.csv')\nprint('Read')","28766385":"data_iris.info()","9d83fde1":"data_iris.columns","f0a18a92":"data_iris.drop(labels=data_iris.columns[0], axis=1, inplace=True)\nprint(\"dropped\")","1c4500c4":"data_iris.head()","5923506d":"data_iris.info()","a201b8a6":"data_iris.describe()","997adca9":"data_iris.groupby('Species').agg([\"min\",\"max\",\"std\",\"mean\"])","c00c882e":"data_iris.isnull().values.any()","25920899":"data_iris.isna().sum()","8ed338a8":"for column in data_iris.columns[1:-1]:\n    data_iris[column].fillna(value=data_iris[column].mean(), inplace=True)","8d39b2b9":"sns.scatterplot(data=data_iris, x=\"Id\",y=\"SepalLengthCm\",hue=\"Species\")","81f857ca":"sns.pairplot(data = data_iris, hue=\"Species\", markers=[\"o\",\"s\",\"d\"]);","77c20a0c":"sns.pairplot(data = data_iris, kind=\"reg\", hue=\"Species\");","797fdf57":"data_iris.shape","7f7e6957":"for column in data_iris.columns[1:-1]:\n    for specy in data_iris[\"Species\"].unique():\n        Specy_type=data_iris[data_iris[\"Species\"]==specy]\n        Selected_column=Specy_type[column]\n        avg = Selected_column.mean()\n        std = Selected_column.std()\n        upper_lmt = avg + (3 * std) \n        lower_lmt= avg - (3 * std)\n        outliers=Selected_column[((Selected_column > upper_lmt) | (Selected_column< lower_lmt))].index # picking outliers' indeces\n        data_iris.drop(index=outliers, inplace=True) # dropping outliers\n        print(column,specy,outliers)               ","214c2b52":"for column in data_iris.columns[1:-1]:\n    for specy in data_iris[\"Species\"].unique():\n        Specy_type = data_iris[data_iris[\"Species\"] == specy]\n        Selected_column = Specy_type[column]\n        q1 = Selected_column.quantile(0.25) # for select first quartile\n        q3 = Selected_column.quantile(0.75) # for select third quartile\n        iqr = q3 - q1 # this is interquartile range\n        upper_limit = q3 + 1.5 * iqr\n        lower_limit = q1 - 1.5 * iqr        \n        outlierss = Selected_column[(Selected_column > upper_limit) | (Selected_column < lower_limit)].index # picking outliers' indeces\n        print(outlierss)\n        data_iris.drop(index = outlierss, inplace=True) # dropping outliers\n        \n        \n        ","d0dd3287":"data_iris.to_csv(\"updated_data.csv\")","bc2b9754":"from sklearn.preprocessing import LabelEncoder\nimport pandas as pd","7d9caaaf":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/working'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","83cb550b":"data = pd.read_csv(\"\/kaggle\/working\/updated_data.csv\")\ndata.head()","85af8853":"data.drop(data.columns[0:2], axis=1, inplace=True)\ndata.head()\nprint(\"dropped columns\")","14c97802":"data.head()","6058ef69":"labenc= LabelEncoder()\ndata[\"Species\"] = labenc.fit_transform(data[\"Species\"]) # transforming Species column into label encoding format","d4fe4849":"data.head() # check this out","be19723d":"data.isna().sum()","2c637015":"data.dtypes","00397738":"from sklearn.model_selection import train_test_split","20d0276b":"x_train , x_test , y_train , y_test = train_test_split( data.iloc[:,0:-1] , data.iloc[:,-1] , test_size=0.2 )","0463e1a5":"import xgboost as xgb ","f38ae318":"xgb_clsfr = xgb.XGBClassifier(objective=\"multiclass:softmax\", num_class=3)","7c04076e":"xgb_clsfr.fit(x_train,y_train)","572f45b7":"predictions = xgb_clsfr.predict(x_test)\npredictions","ebf648f3":"from sklearn.metrics import accuracy_score, confusion_matrix","d1764cd5":"accuracy_score(y_test, predictions)","5eaea3f7":"confusion_matrix(y_test,predictions)","f58af7c6":"# Reading Datasets and Overview","51333f58":"![Screenshot_1.png](attachment:Screenshot_1.png)","c51b1fd3":"## Outlier Detection","c8dd9aba":"## Importing Libraries","7fd25d6e":"Read Data","20156791":"If there was NaN values, I could assign the average values with the sample script below.","85b3f21e":"Building the Model","f08704b9":"Overview, First Look","dc889c6b":"## Visualizing Data","a233a415":"Checking There is NaN values or not.","84fc8357":"Difference between One-Hot Encoding and Label Encoding\n\n![onehotencoding.jpg](attachment:onehotencoding.jpg)","cd4df92d":"Label Encoding","d64ce059":"Small controls before modelling","0fa3fba3":"![1_IdGgdrY_n_9_YfkaCh-dag.png](attachment:1_IdGgdrY_n_9_YfkaCh-dag.png)","18d25752":"3 Sigma Methodology","cdc7d1c1":"IQR - Interquartile Range","655361db":"## Modelling","18382d52":"Dropping unnecessary columns"}}