{"cell_type":{"dd3bc914":"code","70d3d8be":"code","cbefae06":"code","767e1eac":"code","95c8496b":"code","12d56948":"code","5b14921b":"code","b034f046":"code","93173fae":"code","1e6bf4f6":"code","45071c4a":"code","c763f01e":"code","b1b36182":"code","0c4393e0":"code","755c2173":"markdown","cbf8ef72":"markdown","412a9bf9":"markdown","d51ee8b6":"markdown","2de08f9e":"markdown"},"source":{"dd3bc914":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n#plotting libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n#normalising data library\nfrom sklearn.preprocessing import StandardScaler\n#splitting data library\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error #error calculation\nfrom sklearn.metrics import r2_score #error calculation\n#classifier libraries\nfrom sklearn.linear_model import LinearRegression #linear regression","70d3d8be":"df = pd.read_csv(\"..\/input\/walmart-dataretail-analysis\/Walmart_Store_sales.csv\")\nprint(df)","cbefae06":"df.info() #checking data types","767e1eac":"df.describe() #looking for missing data -1","95c8496b":"df.isnull().sum() #checking for null values","12d56948":"df.duplicated().sum() #checking for duplicated rows","5b14921b":"store_sales = df.groupby('Store')['Weekly_Sales'].sum()\ntop_shop = store_sales.sort_values(ascending=False).astype('int64').index[0]","b034f046":"print(df.groupby('Store')['Weekly_Sales'].std().sort_values(ascending=False).index[0])\n   ","93173fae":"superbowl_sales = df[df[\"Date\"] == \"12-02-2010\"]['Weekly_Sales'].sum() + df[df[\"Date\"] == \"11-02-2011\"]['Weekly_Sales'].sum() + df[df[\"Date\"] == \"10-02-2012\"]['Weekly_Sales'].sum()\nlabour_day_sales = df[df[\"Date\"] == \"10-09-2010\"]['Weekly_Sales'].sum() + df[df[\"Date\"] == \"09-09-2011\"]['Weekly_Sales'].sum() + df[df[\"Date\"] == \"10-07-2012\"]['Weekly_Sales'].sum()\nthanksgiving_day_sales = df[df[\"Date\"]==\"26-11-2010\"]['Weekly_Sales'].sum()+df[df[\"Date\"]==\"25-11-2011\"]['Weekly_Sales'].sum() + df[df[\"Date\"]==\"23-11-2012\"]['Weekly_Sales'].sum()\nchristmas_sales = df[df[\"Date\"] == \"31-12-2010\"]['Weekly_Sales'].sum() + df[df[\"Date\"] == \"30-12-2011\"]['Weekly_Sales'].sum() + df[df[\"Date\"] == \"28-12-2012\"]['Weekly_Sales'].sum()\n\nprint(\"The average sale price is:\",df[df[\"Date\"] == \"12-02-2010\"]['Weekly_Sales'].mean())\n\nfig = plt.figure()\nholidays = [\"SuperBowl Sales\",\"Labour Day Sales\",\"Thanksgiving Sales\",\"Christmas Sales\"] \nsales = [superbowl_sales,labour_day_sales,thanksgiving_day_sales,christmas_sales]\nax = fig.add_axes([0,0,1,1])\nax.ticklabel_format(style = 'plain')\nax.bar(holidays,sales)\n\nplt.show()\n","1e6bf4f6":"df\ndf['Date'] = pd.to_datetime(df['Date'])\nmonthly_sales = df.groupby([df['Date'],df['Store']])['Weekly_Sales'].agg(sum).reset_index()\nmonthly_sales['Year'] = monthly_sales['Date'].dt.year\nmonthly_sales['Month'] = monthly_sales['Date'].dt.month\nmonthly_sales['Quarter'] = monthly_sales['Date'].dt.quarter\n\nfor month in range(1,13):\n    df_copy=monthly_sales[monthly_sales[\"Month\"]==month]\n    fig = px.bar(df_copy, x=\"Store\", y=\"Weekly_Sales\",color='Weekly_Sales',width=500, height=400,title=\"Month \"+str(month)+\" sales by store\",\n                 labels={\n                     \"Weekly_Sales\": \"Sales\",\n                     \"sepal_width\": \"Store number\",\n                     \n                 },)\n    fig.show()","45071c4a":"store1=df[df['Store']==1]\nstore1","c763f01e":"corr = df.corr()\n\nplt.figure(figsize=(12, 10))\nsns.heatmap(corr, cmap='mako')\nplt.show()","b1b36182":"y = pd.get_dummies(df[\"Store\"]) #One hot encoding the store \ndf = df.drop('Store',axis = 1)\n# Join the encoded df\ndf = df.join(y)","0c4393e0":"X = df.drop([\"Date\",\"Weekly_Sales\"],axis=1)\ny = df[[\"Weekly_Sales\"]]\nscaler = StandardScaler()\nscaled_temperature = scaler.fit_transform(df[['Temperature']]) #scaling the time column\ndf['Temperature'] = scaled_temperature\nscaled_Fuel_Price = scaler.fit_transform(df[['Fuel_Price']]) #scaling the time column\ndf['Fuel_Price'] = scaled_Fuel_Price\nscaled_Unemployment = scaler.fit_transform(df[['Unemployment']]) #scaling the time column\ndf['Unemployment'] = scaled_Unemployment\n\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2)\nregressor = LinearRegression() #initialising linear regression\nregressor.fit(X_train,y_train) #fitting the data\ny_pred = regressor.predict(X_test) #predict the result\n\n\nplt.scatter(y_test,y_pred) #plotting the answers vs the results\nplt.ticklabel_format(style = 'plain')\nsns.set(rc={'figure.figsize':(18,12)})\nsns.regplot(x=y_test, y=y_pred);\n\nplt.xlabel(\"Sales\")\nplt.title(\"Actual vs Predicted\",)\n#the accuracy score\nscore=r2_score(y_test,y_pred)\nprint(\"r2 score is \",score) #printing the accyracy\nprint(\"mean_sqrd_error is==\",mean_squared_error(y_test,y_pred))\nprint(\"root_mean_squared error of is==\",np.sqrt(mean_squared_error(y_test,y_pred)))","755c2173":"<h4><center>Which store has maximum standard deviation?<\/center><\/h4>","cbf8ef72":"<h4><center>Which store has maximum sales?<\/center><\/h4>","412a9bf9":"<h4><center>Answer:Store number 14<\/center><\/h4>","d51ee8b6":"<h4><center>Answer:Store number 20<\/center><\/h4>","2de08f9e":"<h3><center>Labour Day sales and Christmas Sales are under average<\/center><\/h3>"}}