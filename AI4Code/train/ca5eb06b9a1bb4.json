{"cell_type":{"23b4a812":"code","9c0da115":"code","07050981":"code","b5e531b4":"code","bf32bbdf":"code","0ec09bdb":"code","004d9618":"code","dc5c98e9":"code","94688c23":"code","1f84ac8f":"code","b0836f9a":"code","326320cb":"code","a6835f86":"code","788349f5":"code","aae49d1d":"code","deb7cfd3":"code","63572bcd":"code","e0277121":"code","4bca646d":"code","7277023e":"code","4a82de4c":"code","d396efdd":"code","d9c7f065":"code","6f6cd5c8":"code","e5b9e0de":"code","6e75a867":"code","147ab0e3":"code","53c294ee":"code","b4ffe256":"code","99ee3695":"code","3d208628":"markdown","7c23d798":"markdown","744b8249":"markdown","ef8cb7b7":"markdown","e3ca13e2":"markdown","8f92eb1c":"markdown","a0432271":"markdown","265b380e":"markdown","35cd1af2":"markdown","b8f7bf1d":"markdown","da920bc9":"markdown","21256280":"markdown"},"source":{"23b4a812":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport missingno as msno\nimport seaborn as sns\n\nfrom sklearn.preprocessing import StandardScaler,MinMaxScaler,LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report,accuracy_score \nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.tree import DecisionTreeClassifier","9c0da115":"KS_df = pd.read_csv(\"..\/input\/kickstarter-projects\/ks-projects-201801.csv\")\nKS_df.shape","07050981":"KS_df.head()","b5e531b4":"KS_df.describe ()","bf32bbdf":"KS_df.info()","0ec09bdb":"KS_df.isnull().sum()","004d9618":"msno.bar(KS_df)\nplt.show()","dc5c98e9":"#dealing with missing data \nKS_df['usd pledged'].fillna(method = 'pad',inplace = True)\nKS_df.isnull().sum()","94688c23":"KS_df.dropna(axis=0,inplace=True )\n","1f84ac8f":"KS_df.isnull().sum()","b0836f9a":"#Removing the four NA record from our dataset\nlen(KS_df)","326320cb":"KS_df['state'].value_counts()","a6835f86":"# Our class labels are imbalance\nplt.figure(figsize=(10,5))\nsns.countplot(KS_df['state'])\nplt.show()","788349f5":"state = set(KS_df['state'])\nstate_labels = list(state)\nstate_labels","aae49d1d":"state_size = [KS_df['state'].value_counts()[2]\n              ,KS_df['state'].value_counts()[0],\n             KS_df['state'].value_counts()[4],\n             KS_df['state'].value_counts()[1],\n             KS_df['state'].value_counts()[5],\n             KS_df['state'].value_counts()[3]]\nstate_size","deb7cfd3":"fig,ax = plt.subplots(figsize=(5,5))\nax.pie(state_size,labels=state_labels,autopct='%1.1f%%')\nax.axis('equal')\nplt.show()","63572bcd":"encoder_state= LabelEncoder().fit(KS_df['state'])\nKS_df['state'] = encoder_state.transform(KS_df['state'])\n\nencoder_country= LabelEncoder().fit(KS_df['country'])\nKS_df['country'] = encoder_country.transform(KS_df['country'])\n\nencoder_category= LabelEncoder().fit(KS_df['category'])\nKS_df['category'] = encoder_category.transform(KS_df['category'])\n\nencoder_main_category= LabelEncoder().fit(KS_df['main_category'])\nKS_df['main_category'] = encoder_main_category.transform(KS_df['main_category'])\n\nencoder_currency= LabelEncoder().fit(KS_df['currency'])\nKS_df['currency'] = encoder_currency.transform(KS_df['currency'])","e0277121":"KS_df.head()","4bca646d":"KS_df.shape","7277023e":"plt.figure(figsize=(10,5))\ncorr = KS_df.corr()\nsns.heatmap(corr,annot=True)\nplt.show()","4a82de4c":"KS_df.set_index(KS_df['name'],inplace=True,drop=True)\nKS_df.drop(['ID','name'],axis=1,inplace=True)","d396efdd":"X = np.asarray(KS_df.drop(['state','deadline','launched'],axis=1))\nX","d9c7f065":"y = np.asarray(KS_df['state']).reshape(-1,1)\ny.shape","6f6cd5c8":"from imblearn.over_sampling import SMOTE\nsm = SMOTE(random_state=0)\nx_res,y_res = sm.fit_resample(X=X ,y=y)\n\n","e5b9e0de":"count_resample = len(y_res)\nprint(count_resample)","6e75a867":"x_train,x_test,y_train,y_test = train_test_split(x_res,y_res,\n                                                 test_size=0.2,\n                                                 random_state=0)\nprint('The shape of x_train :'+\" \"+str(x_train.shape))\nprint('The size of x_train :'+\" \"+str(x_train.shape[0]))\nprint('The shape of x_test :'+\" \"+str(x_test.shape))\nprint('The size of x_x_test :'+\" \"+str(x_test.shape[0]))","147ab0e3":"scale =  StandardScaler().fit(x_train)\nscaled_train = scale.transform(x_train)\nscaled_test = scale.transform(x_test)","53c294ee":"DT_clf = DecisionTreeClassifier(random_state=0).fit(scaled_train , y_train)\nprint('Accuracy of the training model:'+\" \"+str(DT_clf.score(scaled_train\n                                                             , y_train)))\ny_predict = DT_clf.predict(scaled_test)\nprint('Accuracy of the model:'+\" \"+str(accuracy_score(y_true=y_test\n                                                      , y_pred=y_predict)))","b4ffe256":"classification_report(y_test , y_predict , output_dict=True )","99ee3695":"plt.figure(figsize=(15,15))\ncf = confusion_matrix(y_test , y_predict)\nsns.heatmap(cf,fmt='2d',annot=True,cmap='Reds')\nplt.xlabel('Prediction value',fontsize=20)\nplt.ylabel('True value',fontsize=20)\nplt.title('Confusion Matrix For Our Prediction Values',fontsize=30)\nplt.show()\n\n","3d208628":"## Pre_processing ","7c23d798":"### Applying the label encoder on our data to get a categorizal values","744b8249":"## Dealing with the imbalnce vis SMOTE  ","ef8cb7b7":"## Performance Evaluation For ML Model","e3ca13e2":"### Show the corrolation between the features and label class","8f92eb1c":"### Visualizing the missing values","a0432271":"### Visualizing the state of the projects via pie chart","265b380e":"## Get closer insight for our dataset ","35cd1af2":" ## Splitting our dataset to train(70%) and test (30%)sets \n ","b8f7bf1d":"## Check the missing values ","da920bc9":"## Training and predict our dataset","21256280":"## Get our data ready for ML models\n#### Identify the Features and class label"}}