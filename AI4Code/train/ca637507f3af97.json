{"cell_type":{"d0d531cb":"code","d9e9045f":"code","eb920b78":"code","9b284c19":"code","e0d97a58":"code","5c0e6a82":"code","db208e03":"code","6a9e3dae":"code","dfc3d921":"code","745f16c1":"code","8484f801":"code","2d3d43a6":"code","51ed954a":"code","34f49cc4":"code","d4d8e8b9":"code","69d4423b":"code","211b127a":"code","d49b4b20":"code","d6497d93":"code","b16661b7":"code","ed562b82":"code","0eb712cb":"code","fa4e59d1":"code","7f4f33de":"code","f5611cc5":"code","9fe99a09":"code","4ff1c71c":"code","e17f9b73":"code","54f09471":"code","82b3c02e":"code","bd745de6":"code","09309846":"code","a1bf0a60":"code","9ef39aac":"code","471c57ae":"code","cd21f634":"code","6bbbe2de":"code","970b30f3":"code","1275bf02":"code","13611d72":"code","7fdc7c8d":"code","eb92e488":"code","a9b29fa0":"code","359d6905":"code","8e313930":"code","27eb488f":"code","b2162b32":"code","19cc39eb":"code","a9d222e9":"code","c6cf2567":"code","4e802a2a":"code","5ff2347c":"code","74bb4c05":"code","a177b8d5":"code","057a4c2d":"code","868f942d":"markdown","c5dcc1bc":"markdown","55564ad4":"markdown","270f4ba6":"markdown","d844c714":"markdown","e996ed23":"markdown","84645346":"markdown","88b88bc8":"markdown","f780d9d4":"markdown","ffe387e6":"markdown","f20e19e2":"markdown","0aec6433":"markdown","990aaa0d":"markdown","3c15dfb1":"markdown","ea981c39":"markdown","39d967db":"markdown","38479389":"markdown","22d89ad3":"markdown","c7a0412e":"markdown","35833088":"markdown","f468b845":"markdown","58a662d3":"markdown","02b6edb3":"markdown","dc985ed6":"markdown","1f8b18b3":"markdown","ca04bda9":"markdown","787d33e9":"markdown","55b4206c":"markdown","7db5c6f6":"markdown","8ef53240":"markdown","c61ff52c":"markdown","6bdb5173":"markdown","99035847":"markdown","e3d10e4d":"markdown"},"source":{"d0d531cb":"# packages\n\n# standard\nimport numpy as np\nimport pandas as pd\n\n# plot\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# files\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d9e9045f":"df1 = pd.read_csv('..\/input\/ncaam-march-mania-2021-spread\/MRegularSeasonCompactResults.csv')\n# add score difference\ndf1['ScoreDiff'] = df1.WScore - df1.LScore\ndf1.head()","eb920b78":"# use df as temporary object for the following\ndf = df1.copy()","9b284c19":"plt.figure(figsize=(10,4))\ndf.Season.value_counts().plot(kind='bar')\nplt.title('Season')\nplt.grid()\nplt.show()\n\nplt.figure(figsize=(18,4))\ndf.DayNum.value_counts().plot(kind='bar')\nplt.title('DayNum')\nplt.grid()\nplt.show()","e0d97a58":"# WLoc\nprint(df.WLoc.value_counts())\n# show also plot\ndf.WLoc.value_counts().plot(kind='bar')\nplt.title(\"Winner's location\")\nplt.grid()\nplt.show()","5c0e6a82":"# number of overtime periods\ndf.NumOT.value_counts()","db208e03":"# define relevant features\nfeatures_num = ['WScore','LScore','ScoreDiff']","6a9e3dae":"# basic stats\ndf[features_num].describe(percentiles=[0.01,0.1,0.25,0.5,0.75,0.9,0.99])","dfc3d921":"# plot scores\nsns.pairplot(df[features_num], kind='hist',\n             diag_kws = {'bins' : 25},\n             plot_kws = {'bins' : 40})\nplt.show()","745f16c1":"# plot scores\nsns.pairplot(df[features_num+['NumOT']], hue='NumOT',\n             plot_kws={'alpha': 0.9})\nplt.show()","8484f801":"# plot scores\nsns.pairplot(df[features_num+['WLoc']], hue='WLoc',\n             plot_kws={'alpha': 0.2, 's' : 20})\nplt.show()","2d3d43a6":"plt.figure(figsize=(12,4))\nsns.boxplot(data=df, x='Season', y='ScoreDiff')\nplt.xticks(rotation=90)\nplt.grid()\nplt.show()","51ed954a":"# what are the most frequent score differences?\ndf.ScoreDiff.value_counts()[0:20].plot(kind='bar')\nplt.title('Top 20 Score Differences')\nplt.grid()\nplt.show()","34f49cc4":"df['Result'] = df.WScore.astype(str) + ':' + df.LScore.astype(str)\n\n# the ten most frequent results:\ndf.Result.value_counts()[0:10]","d4d8e8b9":"df2 = pd.read_csv('..\/input\/ncaam-march-mania-2021-spread\/MNCAATourneyCompactResults.csv')\n# add score difference\ndf2['ScoreDiff'] = df2.WScore - df2.LScore\ndf2.head()","69d4423b":"# use df as temporary object for the following\ndf = df2.copy()","211b127a":"plt.figure(figsize=(10,4))\ndf.Season.value_counts().plot(kind='bar')\nplt.title('Season')\nplt.grid()\nplt.show()\n\nplt.figure(figsize=(10,4))\ndf.DayNum.value_counts().plot(kind='bar')\nplt.title('DayNum')\nplt.grid()\nplt.show()","d49b4b20":"# WLoc is always 'N' here:\ndf.WLoc.value_counts()","d6497d93":"# number of overtime periods\ndf.NumOT.value_counts()","b16661b7":"# basic stats\ndf[features_num].describe(percentiles=[0.01,0.1,0.25,0.5,0.75,0.9,0.99])","ed562b82":"# plot scores\nsns.pairplot(df[features_num], kind='hist')\nplt.show()","0eb712cb":"# plot scores\nsns.pairplot(df[features_num+['NumOT']], hue='NumOT',\n             plot_kws={'alpha': 0.9})\nplt.show()","fa4e59d1":"plt.figure(figsize=(12,4))\nsns.boxplot(data=df, x='Season', y='ScoreDiff')\nplt.xticks(rotation=90)\nplt.grid()\nplt.show()","7f4f33de":"# what are the most frequent score differences?\ndf.ScoreDiff.value_counts()[0:20].plot(kind='bar')\nplt.title('Top 20 Score Differences')\nplt.grid()\nplt.show()","f5611cc5":"df['Result'] = df.WScore.astype(str) + ':' + df.LScore.astype(str)\n\n# the ten most frequent results:\ndf.Result.value_counts()[0:10]","9fe99a09":"df3 = pd.read_csv('..\/input\/ncaam-march-mania-2021-spread\/MSecondaryTourneyCompactResults.csv')\n# add score difference\ndf3['ScoreDiff'] = df3.WScore - df3.LScore\ndf3.head()","4ff1c71c":"# use df as temporary object for the following\ndf = df3.copy()","e17f9b73":"plt.figure(figsize=(10,4))\ndf.Season.value_counts().plot(kind='bar')\nplt.title('Season')\nplt.grid()\nplt.show()\n\nplt.figure(figsize=(10,4))\ndf.DayNum.value_counts().plot(kind='bar')\nplt.title('DayNum')\nplt.grid()\nplt.show()","54f09471":"# WLoc\nprint(df.WLoc.value_counts())\n# show also plot\ndf.WLoc.value_counts().plot(kind='bar')\nplt.title(\"Winner's location\")\nplt.grid()\nplt.show()","82b3c02e":"# number of overtime periods\ndf.NumOT.value_counts()","bd745de6":"# basic stats\ndf[features_num].describe(percentiles=[0.01,0.1,0.25,0.5,0.75,0.9,0.99])","09309846":"# plot scores\nsns.pairplot(df[features_num], kind='hist')\nplt.show()","a1bf0a60":"# plot scores\nsns.pairplot(df[features_num+['NumOT']], hue='NumOT',\n             plot_kws={'alpha': 0.9})\nplt.show()","9ef39aac":"# plot scores\nsns.pairplot(df[features_num+['WLoc']], hue='WLoc',\n             plot_kws={'alpha': 0.2, 's' : 20})\nplt.show()","471c57ae":"plt.figure(figsize=(12,4))\nsns.boxplot(data=df, x='Season', y='ScoreDiff')\nplt.xticks(rotation=90)\nplt.grid()\nplt.show()","cd21f634":"# what are the most frequent score differences?\ndf.ScoreDiff.value_counts()[0:20].plot(kind='bar')\nplt.title('Top 20 Score Differences')\nplt.grid()\nplt.show()","6bbbe2de":"# this is very close, let's look at the figures\ndf.ScoreDiff.value_counts()[0:5]","970b30f3":"df['Result'] = df.WScore.astype(str) + ':' + df.LScore.astype(str)\n\n# the ten most frequent results:\ndf.Result.value_counts()[0:10]","1275bf02":"# compare histograms\nfig, (ax1,ax2,ax3) = plt.subplots(nrows=3, sharex=True, figsize=(10,10))\nax1.grid()\nax2.grid()\nax3.grid()\nax1.hist(df1.ScoreDiff, bins=20)\nax2.hist(df2.ScoreDiff, bins=20)\nax3.hist(df3.ScoreDiff, bins=20)\nax1.set_title('Regular Season')\nax2.set_title('Tourney')\nax3.set_title('Secondary Tourney')\nplt.show()","13611d72":"# compare boxplots\nfig, (ax1,ax2,ax3) = plt.subplots(ncols=3, sharey=True, figsize=(12,5))\nax1.grid()\nax2.grid()\nax3.grid()\nax1.boxplot(df1.ScoreDiff)\nax2.boxplot(df2.ScoreDiff)\nax3.boxplot(df3.ScoreDiff)\nax1.set_title('Regular Season')\nax2.set_title('Tourney')\nax3.set_title('Secondary Tourney')\nplt.show()","7fdc7c8d":"# combine all three phase in one data frames\ndf_all = pd.concat([df1,df2,df3])","eb92e488":"df_all.head()","a9b29fa0":"# basic stats of combined data\ndf_all[features_num].describe(percentiles=[0.01,0.1,0.25,0.5,0.75,0.9,0.99])","359d6905":"# most frequent values\ndf_all.ScoreDiff.value_counts()[0:10].plot(kind='bar')\nplt.title('Top 20 Score Differences')\nplt.grid()\nplt.show()","8e313930":"# eval score difference by winning team\ndf_all_grouped = df_all.groupby('WTeamID', as_index=False).agg(\n    n = pd.NamedAgg(column='ScoreDiff', aggfunc='count'),\n    mean_diff = pd.NamedAgg(column='ScoreDiff', aggfunc=np.mean),\n    median_diff = pd.NamedAgg(column='ScoreDiff', aggfunc=np.median),\n)\n\n# calculate mode (most frequent value) by group separately\n# [didn't manage to inject a \"mode\" function in the NamedAgg logic above...]\nwteams = df_all_grouped.WTeamID.unique().tolist()\nmode_list = []\nfor w in wteams:\n    # calc most frequent value using value_counts\n    current_mode = df_all[df_all.WTeamID==w].ScoreDiff.value_counts().index[0]\n    # and add result to list\n    mode_list.append(current_mode)\n# add calculated modes to grouped data frame\ndf_all_grouped['mode_diff'] = mode_list\ndf_all_grouped.head()","27eb488f":"# plot mean of difference by team\nplt.figure(figsize=(14,5))\nplt.scatter(df_all_grouped.WTeamID, df_all_grouped.mean_diff)\nplt.xlabel('Team')\nplt.ylabel('Mean of score differences')\nplt.grid()\nplt.show()","b2162b32":"# plot mode of difference by team\nplt.figure(figsize=(14,5))\nplt.scatter(df_all_grouped.WTeamID, df_all_grouped.mode_diff)\nplt.xlabel('Team')\nplt.ylabel('Mode of score differences (most frequent value)')\nplt.grid()\nplt.show()","19cc39eb":"# count winners and losers\ncount_win = df_all.WTeamID.value_counts().rename_axis('TeamID').reset_index(name='counts_W')\ncount_lose = df_all.LTeamID.value_counts().rename_axis('TeamID').reset_index(name='counts_L')\n\n# and join tables\ndf_win_lose = count_win.merge(count_lose, on='TeamID')\n\n# add sum of counts and winning percentage\ndf_win_lose['n'] = df_win_lose.counts_W + df_win_lose.counts_L\ndf_win_lose['win_perc'] = df_win_lose.counts_W \/ df_win_lose.n\n\n# preview\ndf_win_lose.head()","a9d222e9":"# make results available for download\ndf_all.to_csv('df_all.csv', index=False)\ndf_all_grouped.to_csv('df_all_grouped.csv', index=False)\ndf_win_lose.to_csv('df_win_lose.csv', index=False)","c6cf2567":"# read submission template\nsub = pd.read_csv('..\/input\/ncaam-march-mania-2021-spread\/MSampleSubmissionStage1.csv')","4e802a2a":"# number of rows\nn_sub = sub.shape[0]","5ff2347c":"# parse ID and build extended submission data frame\nsub_x = sub.copy()\nsub_x['year'] = sub.ID.apply(lambda x: x[0:3+1])\nsub_x['team_left'] = sub.ID.apply(lambda x: x[5:8+1])\nsub_x['team_right'] = sub.ID.apply(lambda x: x[10:13+1])\n# add a view columns for the following\nsub_x['p_left'] = 0\nsub_x['p_right'] = 0\nsub_x['diff_left'] = 0\nsub_x['diff_right'] = 0\n# preview\nsub_x.head()","74bb4c05":"# calculate prediction for each row\nfor i in range(n_sub):    \n    current_left = pd.to_numeric(sub_x.iloc[i].team_left)\n    current_right = pd.to_numeric(sub_x.iloc[i].team_right)\n    # winning percentage for both teams (independently)\n    perc_win_left = df_win_lose[df_win_lose.TeamID==current_left].win_perc.values[0]\n    perc_win_right = df_win_lose[df_win_lose.TeamID==current_right].win_perc.values[0]\n    # translate winning percentages in probabilties,\n    # this is actually extremely simplified, but ok for a first base line\n    p_left = perc_win_left \/ (perc_win_left+perc_win_right)\n    p_right = perc_win_right \/ (perc_win_left+perc_win_right)\n    # get expected differences for each team\n    diff_left = df_all_grouped[df_all_grouped.WTeamID==current_left].mean_diff.values[0]\n    diff_right = df_all_grouped[df_all_grouped.WTeamID==current_right].mean_diff.values[0]\n    # combine to overall \"prediction\"\n    pred = p_left * diff_left - p_right * diff_right\n    # add to extended submission table\n    sub_x.loc[i,'Pred'] = pred\n    # add intermediate values as well\n    sub_x.loc[i,'p_left'] = p_left\n    sub_x.loc[i,'p_right'] = p_right\n    sub_x.loc[i,'diff_left'] = diff_left\n    sub_x.loc[i,'diff_right'] = diff_right\n    ","a177b8d5":"# preview\nsub_x","057a4c2d":"# save submission file\nsub.Pred = sub_x.Pred\nsub.to_csv('submission.csv', index=False)","868f942d":"# EDA of Scores\n\n## Table of Contents\n* [Regular Season](#1)\n* [Tourney](#2)\n* [Secondary Tourney](#3)\n* [Compare Score Differences by Phase](#4)\n* [All Phases combined](#5)\n* [Baseline Submission](#6)","c5dcc1bc":"### Do we see changes in score difference over time?","55564ad4":"### Do we see changes in score difference over time?","270f4ba6":"### Evaluate (historical) winning percentage","d844c714":"<a id='1'><\/a>\n# Regular Season","e996ed23":"#### No real trend visible...","84645346":"#### More wins with high difference in regular season.","88b88bc8":"### Include visualization of overtime periods","f780d9d4":"### Most frequent score differences","ffe387e6":"### Most frequent score differences","f20e19e2":"### Most frequent results","0aec6433":"### Most frequent results","990aaa0d":"### Season and DayNum - Frequencies","3c15dfb1":"### Season and DayNum - Frequencies","ea981c39":"#### Interesting: The most frequent value is 3, which is quite far away from the mean value of 12.1.","39d967db":"### Include visualization of overtime periods","38479389":"### Season and DayNum - Frequencies","22d89ad3":"### Do we see changes in score difference over time?","c7a0412e":"### Include visualization of winner's location","35833088":"### Let's try to use the winning percentages and mean differences per team to put together a first simple model","f468b845":"<a id='4'><\/a>\n# Compare Score Differences by Phase","58a662d3":"### Most frequent score differences","02b6edb3":"<a id='2'><\/a>\n# Tourney","dc985ed6":"#### Most frequent score difference is now 2, mean value is 11.7.","1f8b18b3":"#### No real trend visible...","ca04bda9":"<a id='5'><\/a>\n# All phases combined","787d33e9":"### So far we have explored the absolute score difference for the WINNING team. However, in order to really submit something useful this is unfortunately not enough! We would also need to provide a sign +1\/-1 depending on which of the two teams wins.","55b4206c":"<a id='3'><\/a>\n# Secondary Tourney","7db5c6f6":"### Include visualization of overtime periods","8ef53240":"<a id='6'><\/a>\n# Baseline Submission ","c61ff52c":"### Most frequent results","6bdb5173":"#### Most frequent score difference is again 2 (but 3 is as close as can be), mean value is 9.6.","99035847":"### Include visualization of winner's location","e3d10e4d":"#### No real trend visible..."}}