{"cell_type":{"105ef4be":"code","61665b8a":"code","a2fb1e78":"code","b6201358":"code","493494ff":"code","65f37397":"code","74f4400c":"code","f13837c0":"code","bc1b7c56":"code","2179082f":"code","9a740da3":"code","18557f0e":"code","a2c38e45":"markdown"},"source":{"105ef4be":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \nimport matplotlib.pyplot as plt\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom keras.models import Sequential\nfrom keras.layers import Dropout, Conv2D, MaxPooling2D, Flatten, Dense\nfrom keras.losses import categorical_crossentropy\nfrom keras.optimizers import adam, Adadelta\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","61665b8a":"train_df = pd.read_csv(\"..\/input\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/test.csv\")\nprint(\"Shape of train data\", train_df.shape)\nprint(\"Shape of test data\", test_df.shape)","a2fb1e78":"X = train_df.drop(\"label\", axis = 1)\ny = train_df[\"label\"]","b6201358":"from sklearn.model_selection import train_test_split\nx_train, x_val, y_train, y_val = train_test_split(X, y, test_size = 0.1, shuffle = True)\nprint(x_train.shape, x_val.shape, y_train.shape, y_val.shape)","493494ff":"# Model parameter which we will use in training\n#input_dim = 784\noutput_dim = 10\nbatch_size = 128\nepoch = 13\nn_row, n_col = 28, 28","65f37397":"# Normalization\nx_train = x_train\/255\nx_val = x_val\/255\nprint(\"X train shape\", x_train.shape)\nprint(\"X test shape\", x_val.shape)","74f4400c":"from keras import backend as k\nif k.image_data_format() == \"channels_first\":\n    x_train = x_train.values.reshape(x_train.shape[0], 1, n_row, n_col)\n    x_val = x_val.values.reshape(x_val.shape[0], 1, n_row, n_col)\n    test_df = test_df.values.reshape(test_df.shape[0], 1, n_row, n_col)\n    input_shape = (1, n_row, n_col)\nelse:\n    x_train = x_train.values.reshape(x_train.shape[0], n_row, n_col, 1)\n    x_val = x_val.values.reshape(x_val.shape[0], n_row, n_col, 1)\n    test_df = test_df.values.reshape(test_df.shape[0], n_row, n_col, 1)\n    input_shape = (n_row, n_col, 1)","f13837c0":"# Converts into binary class problem\nfrom keras.utils import to_categorical\ny_train = to_categorical(y_train, 10)\ny_val = to_categorical(y_val, 10)","bc1b7c56":"# Conv2D Model\nmodel = Sequential()\nmodel.add(Conv2D(16, kernel_size = (2, 2), input_shape = input_shape, activation = \"relu\"))\nmodel.add(Conv2D(32, kernel_size = (3, 3), activation = \"relu\"))\nmodel.add(MaxPooling2D(pool_size = (3, 3)))\n\nmodel.add(Conv2D(64, kernel_size = (3, 3), activation = \"relu\"))\nmodel.add(MaxPooling2D(pool_size = (3, 3)))\nmodel.add(Dropout(0.5))\n\nmodel.add(Flatten())\nmodel.add(Dense(234, activation = \"relu\"))\nmodel.add(Dense(output_dim, activation = \"softmax\"))\nmodel.compile(loss = categorical_crossentropy, metrics = [\"accuracy\"], optimizer = \"adam\")\nhistory = model.fit(x_train, y_train, batch_size, epochs = epoch, verbose = 1, validation_data = (x_val, y_val))","2179082f":"# Accuracy on validation data\nscore = model.evaluate(x_val, y_val, verbose = 0)\nprint(\"Validation Score:\", score[0])\nprint(\"Validation Accuracy\", score[1])","9a740da3":"# Plot validataion and train loss\nx = range(1, epoch + 1)\nval_loss = history.history[\"val_loss\"]\ntrain_loss = history.history[\"loss\"]\nplt.plot(x, val_loss, \"b\", label = \"Validation loss\")\nplt.plot(x, train_loss, \"r\", label = \"Train loss\")\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Categorical Crossentropy loss\")\nplt.legend()\nplt.show()","18557f0e":"# predict results\npred = model.predict(test_df)\nidx_max = np.argmax(pred,axis = 1)\nidx_max = pd.Series(idx_max, name = \"Label\")\nsample_submission = pd.concat([pd.Series(list(range(1,len(pred) + 1)),name = \"ImageId\"),idx_max],axis = 1)\nsample_submission.to_csv(\"sample_submission.csv\", index = False)","a2c38e45":"**NOTE:** This is just a very basic model but will update it slightely when I have time, to get more accurate prediction. If you like it please upvote and if you have any question please feel free to ask in comment box."}}