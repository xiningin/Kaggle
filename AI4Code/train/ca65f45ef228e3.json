{"cell_type":{"53e46b5a":"code","a5f6f06c":"code","77e81bc2":"code","4ab0e152":"code","bb92cc46":"code","f7bbaf40":"code","65ad72a4":"code","2a01fb53":"code","aaf2db77":"code","83740fd4":"code","f1b9b7cd":"code","52f577cc":"code","207c5969":"code","0c873e13":"code","c49e6cec":"code","55014ea7":"code","2736d470":"code","23c212ea":"code","d7987e69":"code","a6e0053f":"code","4bec5fa3":"code","b18789b2":"code","a2e82fb4":"code","3a8daedd":"code","ab9d5383":"code","76328a1b":"code","f9ad77e1":"code","de4177d0":"code","04b1e384":"code","34a8c047":"code","b988624e":"code","77fff98f":"code","5e41fe6d":"code","688bef3a":"code","b563923c":"code","606c9c1e":"code","8b522d31":"markdown","a14dcc9e":"markdown","c515d2e1":"markdown","efdd93aa":"markdown","d4ab1fdc":"markdown","dd3dd400":"markdown"},"source":{"53e46b5a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a5f6f06c":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport plotly.figure_factory as ff\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\n# Metric library\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score","77e81bc2":"df = pd.read_csv('\/kaggle\/input\/car-selling-price-prediction\/CarSalePrice.csv')\ndf.head()","4ab0e152":"df.shape","bb92cc46":"df.describe()","f7bbaf40":"df.info()","65ad72a4":"df.isna().sum()","2a01fb53":"df.replace({'Autto':'Auto'},inplace=True)","aaf2db77":"sns.pairplot(df, diag_kind=\"hist\")","83740fd4":"plt.figure(figsize=(15,6))\nsns.heatmap(df.corr(),annot=True, cmap='PuBuGn')\nplt.show()","f1b9b7cd":"fig = px.pie(names=df['ImportedOrNot'].value_counts().index,\n             values = df['ImportedOrNot'].value_counts(),\n             title = 'Imported OR Not')\n\nfig.update_traces(textinfo='percent',\n                  insidetextorientation='radial',\n                  legendgroup='show', \n                  marker = dict(colors=px.colors.qualitative.Pastel2))\n\nfig.update_layout(paper_bgcolor='rgb(248, 248, 255)',\n                  plot_bgcolor='rgb(248, 248, 255)',\n                  showlegend=True,)\n\nfig.show()","52f577cc":"fig = px.pie(names=df['Fuel'].value_counts().index,\n             values=df['Fuel'].value_counts(),\n             hole=.5)\n\nfig.update_traces(textposition='inside',textinfo='percent+label', marker=dict(colors=df['Fuel'].value_counts()))\n\nfig.add_annotation(showarrow=False,x=0.50, y=0.5,text='Fuel',font=dict(size=20,color='grey'))\n\nfig.update_layout(margin = {'b':0,'t':100},\n    paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)',\n    showlegend=False,\n    title={'font':{\n                    'family':'monospace',\n                    'size':22,\n                    'color': 'grey'\n                     },'text':'Fuel Distribution',\n                        'x':0.45,'y': 1})\nfig.show()","207c5969":"hist_data = [df['Dist_travelled']]\ngroup_labels = ['Distance Travelled']\n\nfig = ff.create_distplot(hist_data, group_labels,colors=['gold'],show_hist=False)\n\nfig.update_layout(margin = {'b':0,'t':100},\n    paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)',\n    showlegend=False,\n    title={'font':{\n                    'family':'monospace',\n                    'size':22,\n                    'color': 'grey'\n                     },'text':'Distance Travelled ',\n                        'x':0.45,'y': 1})\nfig.show()","0c873e13":"fig = px.bar(x = df['Transmission'].value_counts().index,\n             y = df['Transmission'].value_counts(),\n             text = (df['Transmission'].value_counts()\/len(df['Transmission'])*100))\n\nfig.update_traces(textposition='outside', texttemplate='%{text:.4s}%', marker=dict(color=df['Transmission'].value_counts(), colorscale='mint'))\n\nfig.update_layout(margin = {'b':0,'t':100},\n    paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)',\n    showlegend=False,\n    title={'font':{\n                    'family':'monospace',\n                    'size':22,\n                    'color': 'grey'\n                     },'text':'Manual, SemiAuto & Auto Cars Distribution',\n                        'x':0.45,'y': 1})\nfig.show()","c49e6cec":"fig = go.Figure(go.Funnelarea(\n    text = df['Safetyscore'].value_counts().index,\n    values = df['Safetyscore'].value_counts()\n    ))\nfig.update_layout(margin = {'b':0,'t':100},\n    paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)',\n    showlegend=False,\n    height=700,\n    title={'font':{\n                    'family':'monospace',\n                    'size':22,\n                    'color': 'grey'\n                     },'text':'Safety Score',\n                        'x':0.50,'y': 1})\n\nfig.show()","55014ea7":"fig = px.bar(y = df['YearOfRegistration'].value_counts().index,\n             x = df['YearOfRegistration'].value_counts(),\n             text = (df['YearOfRegistration'].value_counts()\/len(df['YearOfRegistration'])*100),\n             orientation='h')\n\nfig.update_traces(textposition='outside', texttemplate='%{text:.4s}%', marker=dict(color=df['YearOfRegistration'].value_counts(), colorscale='fall'))\n\nfig.update_layout(margin = {'b':0,'t':100},\n    paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)',\n    showlegend=False,\n    title={'font':{\n                    'family':'monospace',\n                    'size':22,\n                    'color': 'grey'\n                     },'text':'Year Of Registration ',\n                        'x':0.45,'y': 1})\nfig.show()","2736d470":"hist_data1 = [df['InitialBuyingPrice'].values]\ngroup_labels1 = ['Initial Price']\n\nhist_data2 = [df['SellingPrice'].values]\ngroup_labels2 = ['Selling Price']\n\nfig = ff.create_distplot(hist_data1, group_labels1,colors=['lightpink'],show_hist=False)\n\nfig.update_layout(margin = {'b':0,'t':100},\n    paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)',\n    showlegend=False,\n    title={'font':{\n                    'family':'monospace',\n                    'size':22,\n                    'color': 'grey'\n                     },'text':'Initial Buying Price',\n                        'x':0.45,'y': 1})\nfig.show()\n\nfig = ff.create_distplot(hist_data2, group_labels2,colors=['lightblue'],show_hist=False)\n\nfig.update_layout(margin = {'b':0,'t':100},\n    paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)',\n    showlegend=False,\n    title={'font':{\n                    'family':'monospace',\n                    'size':22,\n                    'color': 'grey'\n                     },'text':'Selling Price',\n                        'x':0.45,'y': 1})\nfig.show()","23c212ea":"fig = make_subplots(rows=1, cols=2, \n                    column_widths=[0.35, 0.35],\n                    specs = [[{'type':'bar'},{'type':'bar'}]],\n                    subplot_titles=['Selling Price With Histogram', 'Initial Price With Histogram',\n                                   ])\n\nfig.add_traces(go.Histogram(x=df['InitialBuyingPrice'],marker=dict(color='lightgreen')),1,1)\n\nfig.add_traces(go.Histogram(x=df['SellingPrice'], marker=dict(color='plum')),1,2)\n\nfig.update_layout(margin = {'b':0,'t':100},\n    paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)',\n    showlegend=False,\n    title={'font':{\n                    'family':'monospace',\n                    'size':22,\n                    'color': 'grey'\n                     },'text':'Initial Price VS Selling Price',\n                        'x':0.45,'y': 1})\n\nfig.show()","d7987e69":"def log_transform(df,col):\n    df[col] = np.log1p(df[col])\n    return (col)","a6e0053f":"log_transform(df,'SellingPrice')\nlog_transform(df,'InitialBuyingPrice')","4bec5fa3":"fig = make_subplots(rows=1, cols=2, \n                    column_widths=[0.35, 0.35],\n                    specs = [[{'type':'bar'},{'type':'bar'}]],\n                    subplot_titles=[ 'Initial Price After Log Tranformation','Selling Price After Log Tranformation',\n                                   ])\n\nfig.add_traces(go.Histogram(x=df['InitialBuyingPrice'],marker=dict(color='lightgreen')),1,1)\n\nfig.add_traces(go.Histogram(x=df['SellingPrice'],marker=dict(color='plum')),1,2)\n\nfig.update_layout(margin = {'b':0,'t':100},\n    paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)',\n    showlegend=False,\n    title={'font':{\n                    'family':'monospace',\n                    'size':22,\n                    'color': 'grey'\n                     },'text':'Initial Price VS Selling Price',\n                        'x':0.45,'y': 1})\n\nfig.show()","b18789b2":"fig = px.box(x=df['Safetyscore'],y=df['SellingPrice'])\n\nfig.update_traces( line_color='tomato',\n                   fillcolor='lightpink',\n                   marker = dict(color='tomato'))\n\nfig.update_layout(margin = {'b':0,'t':100},\n    paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)',\n    showlegend=False,\n    title={'font':{\n                    'family':'monospace',\n                    'size':22,\n                    'color': 'grey'\n                     },'text':'Safety Score & Selling Price',\n                        'x':0.45,'y': 1})\nfig.show()","a2e82fb4":"\nfig = px.box(x=df['ImportedOrNot'],y=df['SellingPrice'],points='all')\n\nfig.update_traces( line_color='purple',\n                   fillcolor='plum',\n                   marker = dict(color='plum'))\n\nfig.update_layout(margin = {'b':0,'t':100},\n    paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)',\n    showlegend=False,\n    title={'font':{\n                    'family':'monospace',\n                    'size':22,\n                    'color': 'grey'\n                     },'text':'Selling Price Of Imported & Local Cars',\n                        'x':0.45,'y': 1})\nfig.show()","3a8daedd":"df = pd.get_dummies(df, columns = ['Transmission', 'Fuel'])","ab9d5383":"x = df.drop('SellingPrice',1)\ny = df['SellingPrice']\n\nx_train,x_test,y_train,y_test = train_test_split(x,y,random_state=142,test_size=0.2)","76328a1b":"from math import sqrt","f9ad77e1":"lin = LinearRegression()\nlin.fit(x_train,y_train)\ny_pred = lin.predict(x_test)\nprint('R2 score: ',r2_score(y_test,y_pred))\nprint('MSE: ',mean_squared_error(y_test, y_pred))\nprint('RMSE: ',sqrt(mean_squared_error(y_test, y_pred)))","de4177d0":"dt = DecisionTreeRegressor()\ndt.fit(x_train,y_train)\ny_pred = dt.predict(x_test)\nprint('R2 score: ',r2_score(y_test,y_pred))\nprint('MSE: ',mean_squared_error(y_test, y_pred))\nprint('RMSE: ',sqrt(mean_squared_error(y_test, y_pred)))","04b1e384":"xgb = XGBRegressor(objective ='reg:linear',\n                  n_estimators = 10, seed = 123)\nxgb.fit(x_train,y_train)\ny_pred = xgb.predict(x_test)\nprint('R2 score: ',r2_score(y_test,y_pred))\nprint('MSE: ',mean_squared_error(y_test, y_pred))\nprint('RMSE: ',sqrt(mean_squared_error(y_test, y_pred)))\n","34a8c047":"ridge = Ridge()\nridge.fit(x_train,y_train)\ny_pred = ridge.predict(x_test)\nprint('R2 score: ',r2_score(y_test,y_pred))\nprint('MSE: ',mean_squared_error(y_test, y_pred))\nprint('RMSE: ',sqrt(mean_squared_error(y_test, y_pred)))\n","b988624e":"lasso = Lasso()\nlasso.fit(x_train,y_train)\ny_pred = lasso.predict(x_test)\nprint('R2 score: ', r2_score(y_test,y_pred))\nprint('MSE: ', mean_squared_error(y_test, y_pred))\nprint('RMSE: ',sqrt(mean_squared_error(y_test, y_pred)))\n","77fff98f":"rf = RandomForestRegressor()\nrf.fit(x_train,y_train)\ny_pred = rf.predict(x_test)\nprint('R2 score: ', r2_score(y_test,y_pred))\nprint('MSE: ', mean_squared_error(y_test, y_pred))\nprint('RMSE: ',sqrt(mean_squared_error(y_test, y_pred)))\n","5e41fe6d":"from mlxtend.regressor import StackingRegressor\n","688bef3a":"sr = StackingRegressor(regressors=[lasso,rf,ridge,xgb], \n                          meta_regressor=lin)\n","b563923c":"sr.fit(x_train,y_train)","606c9c1e":"sr_pred = sr.predict(x_test)\nsr_r2 = r2_score(y_test,sr_pred)\nsr_r2","8b522d31":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:black;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;\n              color:white;\n              text-align:center;\">\n                            One HOt Encoding\n              \n<\/p>\n<\/div>","a14dcc9e":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:black;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;\n              color:white;\n              text-align:center;\">\n                            Model Fitting\n              \n<\/p>\n<\/div>","c515d2e1":"### ","efdd93aa":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:black;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;\n              color:white;\n              text-align:center;\">\n                            Log Tranformation Of Columns\n              \n<\/p>\n<\/div>","d4ab1fdc":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:black;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;\n              color:white;\n              text-align:center;\">\n                            Using Stacking Method \n              \n<\/p>\n<\/div>","dd3dd400":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:black;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;\n              color:white;\n              text-align:center;\">\n                            EDA\n              \n<\/p>\n<\/div>"}}