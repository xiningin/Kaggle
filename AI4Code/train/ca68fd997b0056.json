{"cell_type":{"4bccd7ca":"code","a7ce06f7":"code","1795d5e7":"code","48265c64":"code","57dffabb":"code","b00c1108":"code","cf8e54b0":"code","313b1b98":"code","db0addc1":"code","8b56a570":"code","481c2015":"code","8ec2c333":"code","8b78805c":"markdown","7d8b88ce":"markdown"},"source":{"4bccd7ca":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a7ce06f7":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport pydicom\nimport warnings\nwarnings.filterwarnings(\"ignore\")","1795d5e7":"#\n# The path to the dataset\n#\nDataDir = \"..\/input\/vinbigdata-chest-xray-abnormalities-detection\/\"\n!ls {DataDir}","48265c64":"#\n# Reading the train.cvs data\n#\ntrain = pd.read_csv(DataDir+'train.csv')\ntrain.head()","57dffabb":"#\n# Finding the keywords for accessing the data elements in a dicom file.\n#\ndcm_file = pydicom.dcmread(DataDir+ 'train\/'+train['image_id'][2]+'.dicom')\ndcm_file.dir()","b00c1108":"#\n# Here another way for accessing the image data as a numpy array\n#\ndcm_pixels = dcm_file.pixel_array\ndcm_pixels","cf8e54b0":"#\n# Displaying the image from the pixel array\n#\nplt.figure(figsize=(12,10))\nplt.imshow(dcm_pixels, cmap=plt.cm.gray)\nplt.show()","313b1b98":"#\n# Here is the function for reading the patients' attributes \n# from the dicom images.\n# \ndef get_dcm_attributes(path):\n\n    df = pd.DataFrame(columns=['image_id', 'Age', 'Gender','Image_Hieght',\n                    'ImageWidth','x_spacing','y_spacing'])\n    #Read some files for testing\n    files = list(os.listdir(path))[0:10]\n    #Read All files\n    #files = list(os.listdir(path))\n   \n    try:\n        i = 0\n        for file in files:\n\n            file_path = os.path.join(path,file)\n            dcmData = pydicom.dcmread(file_path,stop_before_pixels=True)\n\n            file_name = file.split(\".\")[0]\n\n            attributes = dcmData.dir()\n            if 'PatientAge' in attributes:\n                age_str = dcmData.PatientAge\n                if age_str != '' and age_str != 'Y':\n                    age = int(age_str[:-1])\n                else:\n                    age = np.NaN\n            else:\n                age = np.NaN\n            if 'PatientSex' in attributes:\n                gender = dcmData.PatientSex\n                if gender =='' : gender = np.NaN\n            else:\n                gender = np.NaN\n            if 'Rows' in attributes:\n                rows = dcmData.Rows\n            else:\n                rows = np.NaN\n            if 'Columns' in attributes:\n                clmns = dcmData.Columns\n            else:\n                clmns = np.NaN\n            if 'PixelSpacing' in attributes:\n                ps = dcmData.PixelSpacing\n            else:\n                ps = [np.NaN,np.NaN]\n\n            df = df.append(pd.DataFrame({'image_id': file_name, \n                    'Age': age, 'Gender': gender,'Image_Hieght': rows,\n                    'ImageWidth': clmns,\n                    'x_spacing': ps[0],'y_spacing': ps[1]}, index=[i]))\n            i+=1\n    except ValueError:\n            print('age_str',\"   \", age_str)\n    return df","db0addc1":"#\n# Reading some image attributes. (it takes several minutes for the whole dataset)\n#\nTrainDir = DataDir+'train\/'\ndcm_attr = get_dcm_attributes(TrainDir)\ndcm_attr.head(10)","8b56a570":"np.sum(dcm_attr.isna())","481c2015":"#\n# Now Join this info with the data in the train.cvs\n#\ntrain_mrg = pd.merge(train, dcm_attr, on = 'image_id')","8ec2c333":"train_mrg.head(20)","8b78805c":"## Don't forget to upvote ^_^","7d8b88ce":"###       Reading the Attributes from Dicom File\n\nIn the VinBigData Chect x-ray Competition, we are dealing with dicom files for the x-ray chest images. The train.cvs does not contain all the patient data that might be important for the localization and detction of the abnormalities.\n\nIn the notebook you will find a code for reading some of the immportant patient attributes "}}