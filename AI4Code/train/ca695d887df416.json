{"cell_type":{"2132b3e3":"code","efc9fce2":"code","78305330":"code","0550d68e":"code","4d779db7":"code","871fe749":"code","5cebed53":"code","b208c04c":"code","b1fd0243":"code","63f974b2":"code","59107eeb":"code","ceb23f21":"code","ddf43921":"code","84052d2a":"code","0748a59d":"code","77c3dd18":"code","1a6b8f90":"code","d4e57482":"code","c213d610":"code","6d47db13":"code","bc43a4a7":"code","bc248e0b":"markdown","f7dec08c":"markdown","1230dfa0":"markdown","d3b571c7":"markdown","0ed4de34":"markdown","eefcea5f":"markdown","ef15e7b9":"markdown","7c88499b":"markdown","e4bc4ae9":"markdown","23e54a75":"markdown"},"source":{"2132b3e3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns #data visualization\nimport matplotlib.pyplot as plt #plotting\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","efc9fce2":"#creating an dataframe\ndf = pd.read_csv('\/kaggle\/input\/fifa-20-complete-player-dataset\/players_16.csv')\n","78305330":"data = df[['short_name','age','height_cm','weight_kg','nationality','club',\n'overall','potential',\n 'player_positions',\n 'preferred_foot',\n 'international_reputation',\n 'weak_foot',\n 'skill_moves',\n 'body_type',\n 'team_position',\n 'pace',\n 'shooting',\n 'passing',\n 'dribbling',\n 'defending',\n 'physic']]","0550d68e":"data.head(10) #looking first 10 index in dataframe","4d779db7":"data.info()","871fe749":"data.corr() #the process of establishing a relationship or connection between features.","5cebed53":"data.describe()","b208c04c":"#Correlation map\nf,ax = plt.subplots(figsize = (15,15))\nsns.heatmap(data.corr(),annot = True,linewidths=.5,fmt = '.1f',ax=ax, cmap=\"BuPu\")\nplt.show()","b1fd0243":"data.columns","63f974b2":"# color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\ndata.overall.plot(kind = 'line',color = 'red',label = 'overall',linewidth = 1,alpha = 0.8, grid = True,linestyle = ':')\ndata.potential.plot(color = 'green',label='potential',linewidth = 1,alpha = 0.8,grid=True,linestyle = '-.')\nplt.legend(loc = 'upper right')    # legend = puts label into plot\nplt.xlabel('x axis')              # label = name of label\nplt.ylabel('y axis')\nplt.title('Line Plot')\nplt.show()","59107eeb":"# Scatter Plot \n# x = Physic, y = Defending\ndata.plot(kind='scatter', x='physic', y='defending',alpha = 0.5,color = 'red')\nplt.xlabel('physic')            \nplt.ylabel('defence')\nplt.title('Physic Defense Scatter Plot')           ","ceb23f21":"# Histogram\n# bins = number of bar in figure\ndata.dribbling.plot(kind = 'hist',bins = 80,figsize = (12,12))\nplt.xlabel('Dribbling')\nplt.show()","ddf43921":"# clf() = cleans it up again you can start a fresh\ndata.dribbling.plot(kind = 'hist',bins = 50)\nplt.clf()\n# We cannot see plot due to clf()","84052d2a":"dictionary = {'Spain': 'Barcelona' , 'England':'Liverpool', 'Turkey':'Galatasaray'}\nprint(dictionary.keys())\nprint(dictionary.values())","0748a59d":"dictionary['Spain'] = 'Real Madrid' # We updated the existing entry\nprint(dictionary)\ndictionary['Holland'] = 'Ajax' # We added a new entry\nprint(dictionary)\ndel dictionary['England'] # We deleted the key and value from dictionary\nprint(dictionary)\nprint('Holland' in dictionary) # If dictionary has the key named Holland, it will make turn True.\ndictionary.clear()                   # remove all entries in dictionary\nprint(dictionary)\n\n","77c3dd18":"df = pd.read_csv('..\/input\/fifa-20-complete-player-dataset\/players_20.csv')","1a6b8f90":"data = df[['short_name','age','height_cm','weight_kg','nationality','club',\n'overall','potential',\n 'player_positions',\n 'preferred_foot',\n 'international_reputation',\n 'weak_foot',\n 'skill_moves',\n 'body_type',\n 'team_position',\n 'pace',\n 'shooting',\n 'passing',\n 'dribbling',\n 'defending',\n 'physic']]","d4e57482":"series = data['defending'] # it gives us the parameters as vector that we wrote \nprint(type(series))\ndata_frame = data[['defending']] # it gives us the parameters as data frame that we wrote \nprint(type(data_frame))","c213d610":"# Comparison operator\nprint(5 > 2)\nprint(5!=2)\n# Boolean operators\nprint(True and False)\nprint(True or False)","6d47db13":"# 1 - Filtering Pandas data frame\nx = data['dribbling']>90 # it gives us the shooting values which  bigger than 85 \ndata[x] # It prints the True values as table","bc43a4a7":"# 2 - Filtering pandas with logical_and\n# We will see young stars.\ndata[(data['age']<25) & (data['overall']>85)]","bc248e0b":"### PANDAS","f7dec08c":"* Scatter is better when there is correlation between two variables","1230dfa0":"We understand from the graph above, mostly the potential of the players is better than their overall values. Because every player has the potential to develop himself.","d3b571c7":"### MATPLOTLIB\n\nMatplot is a python library that help us to plot data. The easiest and basic plots are line, scatter and histogram plots.\n\n* Line plot is better when x axis is time.","0ed4de34":"### DICTIONARY","eefcea5f":"As we can see Physic and Defending values are increasing in direct proportion","ef15e7b9":"Before continue with pandas,   we need to learn **logic, control flow** and **filtering.**\n* Comparison operator:  ==, <, >, <=\n* Boolean operators: and, or ,not\n* Filtering pandas","7c88499b":"Mostly of players' dribbling values in Fifa 20 between 60 and 70","e4bc4ae9":"* Histogram is better when we need to see distribution of numerical data.","23e54a75":"**Now I will show you that we can easily filter all the data as we want.**"}}