{"cell_type":{"50ad00d7":"code","92239f04":"code","43f35805":"code","ef095640":"code","956ea1e5":"code","8d926549":"code","0a259426":"code","08170d51":"code","3e438c2b":"code","d5995ba3":"code","ffced924":"code","f82d4767":"code","277056ad":"code","460771ff":"code","62c1807e":"code","40f41b75":"code","66caef8a":"code","4985aab3":"code","cf2c4b8e":"code","a5a9ab8c":"code","49ba2d14":"code","244c081f":"code","81e71eda":"code","cbe797bc":"code","0d37bfbb":"code","6e4d55df":"code","70ecc6c0":"code","2185bb7c":"code","33f0ce01":"code","8db92574":"code","3d879a49":"code","59c44403":"code","d1d69987":"code","f50964ec":"code","f364e33f":"code","fbd37673":"code","1b3c745c":"code","1e8f85a1":"code","152824b2":"code","11ad695a":"code","8860a52c":"code","ecd271e7":"code","44263c5e":"code","5849fa4f":"code","f57868cd":"code","c42cce6b":"code","cf13ab22":"code","f6458ba8":"code","21ac2931":"code","46e7ff49":"code","4eb69564":"code","eeca6a0c":"code","e253fa0f":"code","61fac68e":"code","2615e8e5":"code","839d3836":"code","d7276af5":"code","5bf51f00":"code","0d4c3910":"code","e3fca8ec":"code","af6a7880":"code","5ec4bb3c":"code","ba8d12dc":"code","e28c835d":"markdown","c0ad7a41":"markdown","1cfbe33f":"markdown","ef863ab9":"markdown","80cf8c2e":"markdown","1bd15184":"markdown","64b713f1":"markdown","3964d3e7":"markdown","a00ced8a":"markdown","d5e78cbf":"markdown","aa9c2eed":"markdown","8433d743":"markdown","349fead2":"markdown","d69f6b16":"markdown","48d99059":"markdown","c9b07455":"markdown","2bde6c6e":"markdown","1ce752a1":"markdown","02675b1e":"markdown","480dc3be":"markdown","3f2a568c":"markdown","1aa01ecf":"markdown","e161b944":"markdown","50901d8e":"markdown","7bd6e165":"markdown","e37804b8":"markdown","586bbcb4":"markdown","6385c741":"markdown","166d6adc":"markdown","85e24cb7":"markdown","f131d527":"markdown","d1ea95a2":"markdown","62ba58be":"markdown","a3e88ea1":"markdown","eb2e3101":"markdown","3b451793":"markdown","e447cb0a":"markdown"},"source":{"50ad00d7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport plotly.graph_objs as go \nplt.style.use(\"seaborn-whitegrid\")\nimport seaborn as sns\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","92239f04":"plt.style.available","43f35805":"train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain","ef095640":"test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest","956ea1e5":"gender = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")\ngender","8d926549":"test_PassengerId = test[\"PassengerId\"]\ntest_PassengerId","0a259426":"train.columns","08170d51":"train.head()","3e438c2b":"train.describe()","d5995ba3":"train.info()","ffced924":"def bar_plot(veriable):\n    x = train[veriable]\n    x_value = x.value_counts()\n    plt.figure(figsize = (9,3))\n    plt.bar(x_value.index, x_value)\n    plt.xticks(x_value.index, x_value.index.values)\n    plt.ylabel(\"frequency\")\n    plt.title(veriable)\n    plt.show\n    print(\"{}: \\n {}\".format(veriable,x_value))","f82d4767":"Categorical1 = [\"Survived\", \"Pclass\",\"Sex\", \"SibSp\", \"Parch\", \"Embarked\"]\nfor c in Categorical1:\n    bar_plot(c)","277056ad":"def plot_hist(veriable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train[veriable], bins = 80)\n    plt.xlabel(veriable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(veriable))\n    plt.show()\n    ","460771ff":"Numerical = [\"Age\", \"Fare\"]\nfor n in Numerical:\n    plot_hist(n)","62c1807e":" train [[\"Pclass\", \"Survived\"]].groupby([\"Pclass\"], as_index = False).mean()\n","40f41b75":" train [[\"Sex\", \"Survived\"]].groupby([\"Sex\"], as_index = False).mean()\n","66caef8a":"train[\"Age_Development\"] = [\"Baby\" if a < 6 else \"Child\" if a < 15 else \"Young\" if a < 25 else \"Adult\" if a < 50 else \"Elderly\" for a in train.Age]\ntrain [[\"Age_Development\", \"Survived\"]].groupby([\"Age_Development\"], as_index = False).mean()","4985aab3":"train [[\"SibSp\", \"Survived\"]].groupby([\"SibSp\"], as_index = False).mean()","cf2c4b8e":"train [[\"Parch\", \"Survived\"]].groupby([\"Parch\"], as_index = False).mean()","a5a9ab8c":"Q1 = np.percentile(train[\"Fare\"],25)\nQ3 = np.percentile(train[\"Fare\"],75)\ntrain[\"Ticket_Cost\"] = [\"Very_Low\" if t < (Q1 - (Q3 - Q1)*1.5) else \"Low\" if t < Q1 else \"Middle\" if t < Q3 else \"High\" if t < (Q3 + (Q3 - Q1)*1.5) else \"Very_High\" for t in train.Fare]\ntrain [[\"Ticket_Cost\", \"Survived\"]].groupby([\"Ticket_Cost\"], as_index = False).mean()","49ba2d14":"train [[\"Embarked\", \"Survived\"]].groupby([\"Embarked\"], as_index = False).mean()","244c081f":"def Outlier_detection(df, features):\n    Outlier_numbers = []\n    for f in features:\n        Q1 = np.percentile(df[f],25)\n        Q3 = np.percentile(df[f],75)\n        IQR = Q3 - Q1\n        Outlier_distance = IQR*1.5\n        Outlier_list = df[(df[f] < Q1 - Outlier_distance) | (df[f] > Q3 + Outlier_distance)].index\n        Outlier_numbers.extend(Outlier_list) \n    Outlier_numbers = Counter(Outlier_numbers) \n    multiple_Outlier = list(i for i, n in Outlier_numbers.items() if n > 2) \n    return multiple_Outlier \ntrain.loc[Outlier_detection(train,[\"Age\", \"SibSp\", \"Parch\", \"Fare\"])]","81e71eda":"train = train.drop(Outlier_detection(train,[\"Age\", \"SibSp\", \"Parch\", \"Fare\"]), axis = 0).reset_index(drop = True)","cbe797bc":"correlation_list = [\"Survived\",\"Pclass\",\"Age\",\"SibSp\",\"Parch\",\"Fare\"]\nplt.figure(figsize = (18,18))\nsns.heatmap(train[correlation_list].corr(),annot = True,fmt = \".2f\") \nplt.show()","0d37bfbb":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\", data = train, kind = \"bar\", size = 9)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","6e4d55df":"g = sns.FacetGrid(train,col = \"Survived\")\ng.map(sns.distplot, \"Age\", bins = 25)\nplt.show()","70ecc6c0":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\", data = train, kind = \"bar\", size = 9)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","2185bb7c":"g = sns.factorplot(x = \"Parch\", y = \"Survived\", data = train, kind = \"bar\", size = 9)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","33f0ce01":"g = sns.FacetGrid(train,col = \"Survived\")\ng.map(sns.distplot, \"Fare\", bins = 25)\nplt.show()","8db92574":"g = sns.factorplot(x = \"Age_Development\", y = \"Survived\", data = train, kind = \"bar\", size = 9)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","3d879a49":"g = sns.factorplot(x = \"Ticket_Cost\", y = \"Survived\", data = train, kind = \"bar\", size = 9)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","59c44403":"g = sns.FacetGrid(train,col = \"Survived\", row = \"Pclass\")\ng.map(plt.hist, \"Age\", bins = 25)\ng.add_legend()\nplt.show()","d1d69987":"g = sns.FacetGrid(train, row = \"Embarked\")\ng.map(sns.pointplot, \"Pclass\", \"Survived\", \"Sex\")\ng.add_legend()\nplt.show()","f50964ec":"g = sns.FacetGrid(train, row = \"Embarked\", col = \"Survived\")\ng.map(sns.barplot, \"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","f364e33f":"train_test = pd.concat([train, test], axis = 0).reset_index(drop = True)","fbd37673":"train_test.columns[train_test.isnull().any()]","1b3c745c":"train_test.isnull().sum()","1e8f85a1":"train_test[train_test[\"Survived\"].isnull()]","152824b2":"train_test[train_test[\"Age\"].isnull()]","11ad695a":"sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Survived\", data = train, kind = \"box\", size = 9)\nplt.show()","8860a52c":"sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Pclass\", data = train, kind = \"box\", size = 9)\nplt.show()","ecd271e7":"sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"SibSp\", data = train, kind = \"box\", size = 9)\nplt.show()","44263c5e":"sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Parch\", data = train, kind = \"box\", size = 9)\nplt.show()","5849fa4f":"sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Embarked\", data = train, kind = \"box\", size = 9)\nplt.show()","f57868cd":"sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Ticket_Cost\", data = train, kind = \"box\", size = 9)\nplt.show()","c42cce6b":"sns.factorplot(x = \"Ticket_Cost\", y = \"Age\", data = train, kind = \"box\", size = 9)\nplt.show()","cf13ab22":"train.head()","f6458ba8":"train[\"Sex_type\"] = [1 if i == \"male\" else 0 for i in train[\"Sex\"]]","21ac2931":"correlation_list = [\"Survived\",\"Pclass\", \"Sex_type\", \"Age\",\"SibSp\",\"Parch\",\"Fare\"]\nplt.figure(figsize = (18,18))\nsns.heatmap(train[correlation_list].corr(),annot = True,fmt = \".2f\") \nplt.show()","46e7ff49":"Age_NaN_index = list(train[\"Age\"][train[\"Age\"].isnull()].index)\nfor i in Age_NaN_index:\n    Age_prediction = train[\"Age\"][((train[\"SibSp\"] == train.iloc[i][\"SibSp\"]) &(train[\"Parch\"] == train.iloc[i][\"Parch\"])& (train[\"Pclass\"] == train.iloc[i][\"Pclass\"]))].median()\n    Age_median = train[\"Age\"].median()\n    if not np.isnan(Age_prediction):\n        train[\"Age\"].iloc[i] = Age_prediction\n    else:\n        train[\"Age\"].iloc[i] = Age_median","4eb69564":"train_test[train_test[\"Fare\"].isnull()]","eeca6a0c":"np.mean(train_test[train_test[\"Pclass\"] == 3][\"Fare\"])","e253fa0f":"np.mean(train_test[train_test[\"SibSp\"] == 0][\"Fare\"])","61fac68e":"np.mean(train_test[train_test[\"Parch\"] == 0][\"Fare\"])","2615e8e5":"np.mean(train_test[train_test[\"Embarked\"] == \"S\"][\"Fare\"])","839d3836":"train_test[\"Fare\"] = train_test[\"Fare\"].fillna(np.mean(train_test[train_test[\"Pclass\"] == 3][\"Fare\"]))\ntrain_test[train_test[\"Fare\"].isnull()]","d7276af5":"train_test[train_test[\"Cabin\"].isnull()]","5bf51f00":"train_test[train_test[\"Embarked\"].isnull()]","0d4c3910":"train_test.boxplot(column = \"Pclass\", by = \"Embarked\")\nplt.show()","e3fca8ec":"train_test.boxplot(column = \"SibSp\", by = \"Embarked\")\nplt.show()","af6a7880":"train_test.boxplot(column = \"Parch\", by = \"Embarked\")\nplt.show()","5ec4bb3c":"train_test.boxplot(column = \"Fare\", by = \"Embarked\")\nplt.show()","ba8d12dc":"train_test[\"Embarked\"] = train_test[\"Embarked\"].fillna(\"C\")\ntrain_test[train_test[\"Embarked\"].isnull()]","e28c835d":"<font color ='green'> \n    \n    \n<a id =7.1> <\/a> <br>\n# Concat Two Dataframe   \n<font color ='black'>\n\nWhen we concat to avoid getting an error when it sees empty values.","c0ad7a41":"<font color ='green'>\n\n<a id =2.6> <\/a> <br>\n# Age\n<font color ='black'>   \n    \nAge of passenger","1cfbe33f":"<font color ='green'> \n    \n    \n<a id =6.1> <\/a> <br>\n# Visualization by correlation\n<font color ='black'> \ncorrelation between two features","ef863ab9":"<font color ='green'> \n    \n    \n<a id =6.5> <\/a> <br>\n# Parch -- Survived\n<font color ='black'> \nlook at the relationship between Parch and Survived","80cf8c2e":"<font color ='green'> \n    \n    \n<a id =6.11> <\/a> <br>\n# Embarked -- Sex -- Fare -- Survived\n<font color ='black'> \nlook at the relationship between Embarked,Sex , Fare, and Survived","1bd15184":"<font color ='green'>\n\n<a id =2.3> <\/a> <br>\n# Pclass\n<font color ='black'>   \n    \nPassenger class","64b713f1":"<font color ='purple'>\n    \n<a id = 5> <\/a> <br>\n# Outl\u0131er Detection   \n<font color ='black'>\n\n\nDetecting numbers that are very large or very small from among many numbers","3964d3e7":"<font color ='blue'> \n    \n    \n<a id =2> <\/a> <br>\n# Veriable Description\n### 1. [PassengerId](#2.1)\n### 2. [Survived](#2.2)\n### 3. [Pclass](#2.3)\n### 4. [Name](#2.4)\n### 5. [Sex](#2.5)\n### 6. [Age](#2.6)\n### 7. [SibSp](#2.7)\n### 8. [Parch ](#2.8)\n### 9. [Ticket](#2.9)\n### 10.[ Fare](#2.10)\n### 11.[ Cabin](#2.11)\n### 12.[ Embarked](#2.12)","a00ced8a":"<font color ='green'>\n    \n<a id = 3.1> <\/a> <br>\n## Categorical veriable analysis\n<font color ='red'>\n    \n### Examples \n<font color ='black'>\n    \nSurvived, Pclass, Name, Sex, SibSp, Parch, Ticket, Cabin, Embarked","d5e78cbf":"<font color ='green'> \n\n<a id =2.1> <\/a> <br>\n# PassengerId\n <font color ='black'>   \n     \n Unique id number to each pasanger","aa9c2eed":"<font color ='green'> \n    \n    \n<a id =7.2> <\/a> <br>\n# Find Missing Values\n<font color ='black'>\nwe will find the missing values","8433d743":"<font color ='green'>\n\n<a id =2.4> <\/a> <br>\n# Name\n<font color ='black'>   \n    \nName of passenger","349fead2":"<font color ='green'> \n    \n    \n<a id =6.6> <\/a> <br>\n# Fare -- Survived\n<font color ='black'> \nlook at the relationship between Fare and Survived","d69f6b16":"<font color ='green'>\n\n<a id =2.8> <\/a> <br>\n# Parch\n<font color ='black'>   \n    \nNumber of parents\/children","48d99059":"<font color ='green'>\n\n<a id =2.9> <\/a> <br>\n# Ticket\n<font color ='black'> \n    \nTicket number","c9b07455":"<font color ='green'> \n\n<a id =2.2> <\/a> <br>\n# Survived\n<font color ='black'>   \n    \nPassenger survive(1) or died(0)","2bde6c6e":"<font color ='green'> \n    \n    \n<a id =6.4> <\/a> <br>\n# SibSp -- Survived\n<font color ='black'> \nlook at the relationship between SibSp and Survived","1ce752a1":"<font color ='green'> \n    \n    \n<a id =6.10> <\/a> <br>\n# Embarked -- Sex --  Pclass -- Survived\n<font color ='black'> \nlook at the relationship between Embarked,Sex ,Pclass, and Survived","02675b1e":"<font color ='green'>\n\n<a id =2.10> <\/a> <br>\n# Fare\n<font color ='black'>   \n    \nAmount of money spent on ticket","480dc3be":"<font color ='purple'> \n    \n    \n<a id =1> <\/a> <br>\n# Load And Check Data\n<font color ='black'> \n\nThe part where we will read and check the data","3f2a568c":"<font color ='purple'>\n    \n<a id = 4> <\/a> <br>\n# Basic Data Analysis    \n<font color ='black'>\n\n\nExamine the relationship of other data to survival.","1aa01ecf":"<font color ='blue'> \n    \n    \n<a id =7> <\/a> <br>\n# Missing Values\n### 1. [Concat Two Dataframe](#7.1) \n### 2. [Find Missing Values](#7.2)\n### 3. [Fill Missing Values](#7.3)\n","e161b944":"<font color ='green'> \n        \n<a id =7.3> <\/a> <br>\n# Fill Missing Values\n<font color ='black'>\n\nwe will fill in the data we find empty","50901d8e":"<font color ='blue'>\n    \n<a id = 3> <\/a> <br>\n# Univariate variable analysis\n### 1. [Categorical veriable analysis](#3.1)\n### 2. [Numerical veriable analysis](#3.2)\n","7bd6e165":"<font color ='green'>\n\n<a id =2.5> <\/a> <br>\n# Sex\n<font color ='black'>   \n    \nGender of passenger    ","e37804b8":"<font color ='blue'> \n    \n<a id =6> <\/a> <br>\n# relationship between features    \n### 1.[Visualization by correlation](#6.1)\n### 2.[Pclass -- Survived](#6.2)\n### 3.[Age -- Survived](#6.3) \n### 4.[SibSp -- Survived](#6.4)\n### 5.[Parch -- Survived](#6.5)\n### 6.[Fare -- Survived](#6.6)\n### 7.[Age_Development -- Survived](#6.7)\n### 8.[Ticket_Cost -- Survived](#6.8)\n### 9.[Age -- Pclass -- Survived](#6.9)\n### 10.[Embarked -- Sex --  Pclass -- Survived](#6.10)\n### 11.[Embarked -- Sex -- Fare  -- Survived](#6.11)","586bbcb4":"<font color ='green'>\n\n<a id =2.11> <\/a> <br>\n# Cabin\n<font color ='black'>    \n    \nCabin category","6385c741":" <font color ='red'> \n\n# Introduction\n    \n<font color ='black'>\n  The sinking of the Titanic is one of the most infamous shipwrecks in history.On April 15, 1912, during her maiden voyage, the widely considered \u201cunsinkable\u201d RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren\u2019t enough lifeboats for everyone onboard, resulting in the death of 1502 out of 2224 passengers and crew.","166d6adc":" <font color ='blue'>   \n\n    \n ## Content :    \n### 1.  [Load And Check Data](#1) \n### 2.  [Veriable Description](#2)\n### 3.  [Univariate Variable Analysis](#3)\n### 4.  [Basic Data Analysis](#4)\n### 5.  [Outl\u0131er Detection](#5)\n### 6.  [relationship between features](#6)\n### 7.  [Missing Values](#7)   ","85e24cb7":"<font color ='green'> \n    \n    \n<a id =6.2> <\/a> <br>\n# Pclass -- Survived\n<font color ='black'> \nlook at the relationship between Pclass and Survived","f131d527":"<font color ='green'> \n    \n    \n<a id =6.7> <\/a> <br>\n# Age_Development -- Survived\n<font color ='black'> \n# look at the relationship between Age_Development and Survived","d1ea95a2":"<font color ='green'>\n    \n    \n<a id =2.12> <\/a> <br>\n# Embarked\n<font color ='black'>   \n    \nPort where passenger embarked(C = cherbourg, Q = queenstown, S = southampton ","62ba58be":"<font color ='green'> \n    \n    \n<a id =6.9> <\/a> <br>\n# Age -- Pclass -- Survived\n<font color ='black'> \nlook at the relationship between Age, Pclass, and Survived","a3e88ea1":"<font color ='green'>\n\n<a id =2.7> <\/a> <br>\n# SibSp\n<font color ='black'>   \n    \nNumber of siblings\/spouses","eb2e3101":"<font color ='green'>\n    \n<a id = 3.2> <\/a> <br>\n## Numerical veriable analysis\n<font color ='red'>\n    \n### Examples\n<font color ='black'>\n\nPassengerId, Age, Fare\n    \n","3b451793":"<font color ='green'> \n    \n    \n<a id =6.3> <\/a> <br>\n# Age -- Survived\n<font color ='black'> \nlook at the relationship between Age and Survived","e447cb0a":"<font color ='green'> \n    \n    \n<a id =6.8> <\/a> <br>\n# Ticket_Cost -- Survived\n<font color ='black'> \nlook at the relationship between Ticket_Cost and Survived"}}