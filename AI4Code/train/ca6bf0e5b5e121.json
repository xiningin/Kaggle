{"cell_type":{"21c8a470":"code","6a3c157e":"code","1f0a57f4":"code","83212533":"code","190590e6":"code","14d9a9a6":"code","bd3ed8b6":"code","1d2d543c":"code","97c20400":"code","bffb94aa":"code","da883532":"code","f80f0ea1":"code","86efad0c":"code","3ee49a21":"code","369b0b60":"code","3d15e851":"code","3d87b7f2":"code","9774adc8":"markdown","4faee4f6":"markdown","7d45ed52":"markdown","ee431fbf":"markdown","c1dd3004":"markdown","4ab3f725":"markdown","89ce26be":"markdown","3a62db98":"markdown","936394cc":"markdown","bcb7ab84":"markdown"},"source":{"21c8a470":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6a3c157e":"from tensorflow.keras.layers import Input, Dense, BatchNormalization, Dropout, Concatenate, Lambda, GaussianNoise, Activation\nfrom tensorflow.keras.models import Model, Sequential\nfrom tensorflow.keras.losses import BinaryCrossentropy\nfrom tensorflow.keras.optimizers import Adam, Adagrad\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\nfrom tensorflow.keras.layers.experimental.preprocessing import Normalization\nimport tensorflow as tf\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import GroupKFold\n\nfrom tqdm import tqdm\nfrom random import choices\nimport random\n\n\nimport kerastuner as kt","1f0a57f4":"def set_all_seeds(seed):\n    np.random.seed(seed)\n    random.seed(seed)\n    tf.random.set_seed(seed)","83212533":"from more_itertools import windowed\nimport numpy as np\nimport warnings\n\nclass BlockingTimeSeriesSplitWithGap():\n    def __init__(self,n_splits=5,gap=0,group_fold_size=None):\n        \"\"\"\n        Adapted from https:\/\/github.com\/wajihullahbaig\/IEEE-CIS-Fraud-Detection\/blob\/master\/BlockingTimeSeriesSplit.py\n        with gap and allowed overlap. \n        \n        group_fold_size : size of each fold in relation to group\n        group_fold_size * n_splits >= len(unique(groups)). Set equal if group_fold_size = None. \n        \"\"\"\n        self.n_splits = n_splits\n        self.gap = gap\n        self.group_fold_size = group_fold_size\n    \n    def get_n_splits(self,X,y,groups):\n        return self.n_splits\n        \n    def split(self,X,groups,y=None,test_size=0.2):\n        \"\"\"\n        test_size : proportion of fold to use for testing. This will be affected by gap. \n        \"\"\"\n        \n        group_indices = {i:np.where(groups==i) for i in np.unique(groups)}\n        groups = np.unique(groups)\n        if self.group_fold_size is None:\n            group_fold_size = len(groups)\/\/self.n_splits\n        elif self.group_fold_size > len(groups):\n            raise AssertionError(f'group_fold_size={self.group_fold_size} is greater than the number of groups ({len(groups)}).')\n        elif self.group_fold_size * self.n_splits < len(groups):\n            warnings.warn(f'group_fold_size={self.group_fold_size} is too small for a group of {len(groups)} items. Setting group_fold_size={(len(groups))\/\/self.n_splits}.')\n            group_fold_size = len(groups)\/\/self.n_splits\n        else:\n            group_fold_size = self.group_fold_size\n            \n        splits = list(windowed(groups,group_fold_size,step=1))\n        idx = np.round(np.linspace(0, len(splits)-1, self.n_splits)).astype(int)\n        splits = [splits[i] for i in idx]\n        \n        for idx in splits:\n            idx = list(filter(None,idx))\n            mid = int((1-test_size) * len(idx))\n            group_idx_tr, group_idx_te = idx[0: mid], idx[mid + self.gap: -1]\n            \n            if len(group_idx_te) < 1:\n                break\n            \n            tr = np.concatenate([group_indices[gr_i] for gr_i in group_idx_tr],axis=1).ravel()\n            te = np.concatenate([group_indices[gr_i] for gr_i in group_idx_te],axis=1).ravel()\n            yield tr,te","190590e6":"class CVTuner(kt.engine.tuner.Tuner):\n    def run_trial(self, trial, X, y, splits, batch_size=32, epochs=1,callbacks=None):\n        val_losses = []\n        for train_indices, test_indices in splits:\n            X_train, X_test = [x[train_indices] for x in X], [x[test_indices] for x in X]\n            y_train, y_test = [a[train_indices] for a in y], [a[test_indices] for a in y]\n            if len(X_train) < 2:\n                X_train = X_train[0]\n                X_test = X_test[0]\n            if len(y_train) < 2:\n                y_train = y_train[0]\n                y_test = y_test[0]\n            \n            model = self.hypermodel.build(trial.hyperparameters)\n            hist = model.fit(X_train,y_train,\n                      validation_data=(X_test,y_test),\n                      epochs=epochs,\n                        batch_size=batch_size,\n                      callbacks=callbacks)\n            \n            val_losses.append([hist.history[k][-1] for k in hist.history])\n        val_losses = np.asarray(val_losses)\n        self.oracle.update_trial(trial.trial_id, {k:np.mean(val_losses[:,i]) for i,k in enumerate(hist.history.keys())})\n        self.save_model(trial.trial_id, model)","14d9a9a6":"TRAINING = False\nUSE_FINETUNE = True\nFOLDS = 5\nSEED = 42\n\ntrain = pd.read_csv('..\/input\/jane-street-market-prediction\/train.csv')\n#train = train.query('date > 85').reset_index(drop = True) \ntrain = train.astype({c: np.float32 for c in train.select_dtypes(include='float64').columns}) #limit memory use\ntrain.fillna(train.mean(),inplace=True)\n#train = train.query('weight > 0').reset_index(drop = True)\n\nfeatures = [c for c in train.columns if 'feature' in c]\nresp_cols = ['resp_1', 'resp_2', 'resp_3', 'resp', 'resp_4']\nEPSILON = {c:0.0 for c in resp_cols}\n\nX = train[features].values\ny = np.stack([(train[c] > EPSILON[c]).astype('int') for c in resp_cols]).T #Multitarget\n\nf64_max = train['feature_64'].values.max()\nf64_min = train['feature_64'].values.min()","bd3ed8b6":"def calculate_vif(X,thresh=5.0,sample_size=-1,features=None):\n    if sample_size<0: \n        new_X = X.copy()\n    else:\n        new_X = X[np.random.choice(len(X), size=sample_size)]\n        \n    if features and len(features) == new_X.shape[1]: \n        features_copy = features.copy()\n    else:\n        features_copy = list(range(new_X.shape[-1]))\n    \n    dropped_idx = []\n    dropped = True\n    while dropped:\n        dropped = False\n        cc = np.corrcoef(new_X, rowvar=False)\n        VIF = np.linalg.inv(cc).diagonal()\n        maxloc = np.argmax(VIF)\n        if max(VIF) > thresh:\n            print(f'Dropped {features_copy[maxloc]} with vif={max(VIF)}')\n            features_copy.pop(maxloc)\n            new_X = np.delete(new_X, maxloc, axis=1)\n            dropped_idx.append(maxloc)\n            dropped = True\n            \n    del new_X\n    \n    for idx in dropped_idx:\n        X = np.delete(X,idx,axis=1)\n        \n    return X, features_copy","1d2d543c":"if TRAINING:\n    X, features = calculate_vif(X,thresh=100,features=features)","97c20400":"import gc\ngc.collect()","bffb94aa":"if TRAINING:\n    pd.to_pickle(features,'features.pkl')\nelse:\n    features = pd.read_pickle('..\/input\/jsautoencoder\/features.pkl')\n\nf_mean = f_mean = np.mean(train[features[1:]].values,axis=0)","da883532":"from tensorflow.keras.optimizers import Adam\noptimizer = lambda x: Adam(x)","f80f0ea1":"\ndef create_encoder(hp,input_dim,output_dim):\n    i = Input(input_dim)\n    x = BatchNormalization()(i)\n    x = GaussianNoise(hp.Float('noise',0.1,0.5,default=0.1))(x)\n    \n    encoding_units = []\n    encoding_dp = []\n    for j in range(hp.Int('num_encoding_layers',1,3)):\n        u = hp.Int(f'encoding_units_{j}',64,512)\n        encoding_units.append(u)\n        x = BatchNormalization()(x)\n        x = Dense(u,activation='relu')(x)\n        dp = hp.Float(f'encoding_dp_{j}',0.1,0.5)\n        encoding_dp.append(dp)\n        x = Dropout(dp)(x)\n    \n    for u,dp in zip(encoding_units[::-1],encoding_dp[::-1]):\n        x = BatchNormalization()(x)\n        x = Dense(u,activation='relu')(x)\n        x = Dropout(dp)(x)\n        \n    decoded = Dense(input_dim,activation='linear',name='decoded')(x)\n    \n    for j in range(hp.Int('num_bottleneck_layers',1,3)):\n        x = BatchNormalization()(x)\n        x = Dense(hp.Int(f'bottleneck_units_{j}',16,64))(x)\n        x = Lambda(tf.keras.activations.swish)(x)\n        x = Dropout(hp.Float(f'bottleneck_dp_{j}',0.1,0.5))(x)\n    \n    x = Dense(output_dim,activation='sigmoid',name='label_output')(x)\n    \n    autoencoder = Model(inputs=i,outputs=[decoded,x])\n    \n    autoencoder.compile(optimizer=optimizer(1e-3),loss={'decoded':'mse','label_output':'binary_crossentropy'})\n    return autoencoder","86efad0c":"def create_model(hp,input_dim,output_dim,encoder):\n    inputs = Input(input_dim)\n    \n    x = encoder(inputs)[0]\n    x = Concatenate()([x,inputs]) #use both raw and de-noised features\n    x = BatchNormalization()(x)\n    x = Dropout(hp.Float('init_dropout',0.1,0.5))(x)\n    \n    for i in range(hp.Int('num_layers',3,6)):\n        x = BatchNormalization()(x)\n        x = Dense(hp.Int(f'num_units_{i}',16,64))(x)\n        x = Lambda(tf.keras.activations.swish)(x)\n        x = Dropout(hp.Float(f'dropout_{i}',0.1,0.5))(x)\n    x = Dense(output_dim,activation='sigmoid')(x)\n    model = Model(inputs=inputs,outputs=x)\n    model.compile(optimizer=optimizer(1e-3),loss=BinaryCrossentropy(label_smoothing=hp.Float('label_smoothing',0.0,0.1)),metrics=[tf.keras.metrics.AUC(name = 'auc')])\n    return model","3ee49a21":"def utility_score_bincount(date, weight, resp, action):\n    count_i = len(np.unique(date))\n    Pi = np.bincount(date, weight * resp * action)\n    t = np.sum(Pi) \/ np.sqrt(np.sum(Pi ** 2)) * np.sqrt(250 \/ count_i)\n    u = np.clip(t, 0, 6) * np.sum(Pi)\n    return u","369b0b60":"%%time\nSEEDS = [123]\n\nif TRAINING:\n    for j,SEED in enumerate(SEEDS):\n        set_all_seeds(SEED)\n        gkf = BlockingTimeSeriesSplitWithGap(n_splits = FOLDS, gap=20, group_fold_size=150) \n        splits = list(gkf.split(y, groups=train['date'].values, test_size=0.3)) #105 days training, 20 day gap, 25 days testing\n        \n        model_fn = lambda hp : create_encoder(hp,len(features),y.shape[-1])\n        \n        tuner = CVTuner(\n            hypermodel=model_fn,\n            oracle=kt.oracles.BayesianOptimization(\n            objective= kt.Objective('val_loss', direction='min'),\n            num_initial_points=4,\n            max_trials=10,\n            seed=SEED),\n            project_name=f'jane_street_encoder_{SEED}'\n            )\n        \n        tuner.search((X,),(X,y),splits=splits,batch_size=4096,epochs=100,callbacks=[EarlyStopping('val_loss',patience=5),\n                                                                                   ReduceLROnPlateau('val_loss',patience=3)])\n        \n        encoder_hp  = tuner.get_best_hyperparameters(1)[0]\n        pd.to_pickle(encoder_hp,f'.\/best_hp_encoder_{SEED}.pkl')\n        best_autoencoder = tuner.get_best_models(1)[0]\n        \n        model_fn = lambda hp: create_model(hp,len(features),y.shape[-1],best_autoencoder)\n\n        tuner = CVTuner(\n            hypermodel=model_fn,\n            oracle=kt.oracles.BayesianOptimization(\n            objective= kt.Objective('val_loss', direction='min'),\n            num_initial_points=4,\n            max_trials=10,\n            seed=SEED),\n            project_name=f'jane_street_{SEED}'\n            )\n\n        tuner.search((X,),(y,),splits=splits,batch_size=4096,epochs=100,callbacks=[EarlyStopping('val_loss',patience=5),\n                                                                                   ReduceLROnPlateau('val_loss',patience=3)])\n        hp  = tuner.get_best_hyperparameters(1)[0]\n        pd.to_pickle(hp,f'.\/best_hp_{SEED}.pkl')\n            \n        oof = np.zeros(y.shape)\n        for fold, (train_indices, test_indices) in enumerate(splits):\n            X_train, X_test = X[train_indices], X[test_indices]\n            y_train, y_test = y[train_indices], y[test_indices]\n            \n            autoencoder = create_encoder(encoder_hp,X.shape[-1],y.shape[-1])\n            autoencoder.fit(X_train,(X_train,y_train),validation_data=(X_test,(X_test,y_test)),epochs=100,batch_size=4096,\n                      callbacks=[EarlyStopping('val_loss',patience=10,restore_best_weights=True),\n                                 ReduceLROnPlateau('val_loss',patience=5)])\n            \n            autoencoder.trainable=False\n            \n            autoencoder.save_weights(f'.\/autoencoder_{SEED}_{fold}.tf')\n        \n            \n            model = create_model(hp,X.shape[-1],y.shape[-1],autoencoder)\n            model.fit(X_train,y_train,validation_data=(X_test,y_test),epochs=100,batch_size=4096,\n                      callbacks=[EarlyStopping('val_loss',patience=10,restore_best_weights=True),\n                                 ReduceLROnPlateau('val_loss',patience=5)])\n            \n            model.save_weights(f'.\/model_{SEED}_{fold}.tf')\n            model.compile(optimizer(1e-3\/100),\n                          loss=BinaryCrossentropy(label_smoothing=hp.get('label_smoothing')))\n            model.fit(X_test,y_test,epochs=5,batch_size=8192)\n            model.save_weights(f'.\/model_{SEED}_{fold}_finetune.tf')\nelse:\n    models = []\n    for SEED in SEEDS:\n        hp = pd.read_pickle(f'..\/input\/jsautoencoder\/best_hp_encoder_{SEED}.pkl')\n        autoencoder = create_encoder(hp,len(features),y.shape[-1])\n        autoencoder.trainable=False\n        hp = pd.read_pickle(f'..\/input\/jsautoencoder\/best_hp_{SEED}.pkl')\n        for f in range(FOLDS):\n            model = create_model(hp,len(features),y.shape[-1],autoencoder)\n            if USE_FINETUNE:\n                model.load_weights(f'..\/input\/jsautoencoder\/model_{SEED}_{f}_finetune.tf')\n            else:\n                model.load_weights(f'..\/input\/jsautoencoder\/model_{SEED}_{f}.tf')\n            model.call = tf.function(model.call, experimental_relax_shapes=True)\n            models.append(model)\n    ","3d15e851":"#See https:\/\/www.kaggle.com\/snippsy\/no-gpu-time-sell-at-10-a-m-play-golf\/\nbias = 0.1\ndef time_bias(f0,f64):\n    if f0 < 0:\n        correction = (1+bias\/2) - bias * (f64-f64_min)\/(f64_max-f64_min)\n    else:\n        correction = (1-bias\/2) + bias * (f64-f64_min)\/(f64_max-f64_min)\n    return correction","3d87b7f2":"if not TRAINING:\n    import janestreet\n    janestreet.competition.make_env.__called__ = False\n    env = janestreet.make_env()\n    th = 0.5\n    #w = np.asarray([0.1,0.1,0.1,0.5,0.2])\n    for (test_df, pred_df) in tqdm(env.iter_test()):\n        if test_df['weight'].item() > 0:\n            f0 = test_df['feature_0'].item()\n            f64 = test_df['feature_64'].item()\n            \n            x_tt = test_df.loc[:, features].values\n            if np.isnan(x_tt[:, 1:].sum()):\n                x_tt[:, 1:] = np.nan_to_num(x_tt[:, 1:]) + np.isnan(x_tt[:, 1:]) * f_mean\n            pred = np.mean([model(x_tt,training=False).numpy() for model in models],axis=0).squeeze()\n            tb = time_bias(f0,f64)\n            pred = np.mean(pred) * tb\n            pred_df.action = np.where(pred > th, 1, 0).astype(int)\n        else:\n            pred_df.action = 0\n        env.predict(pred_df)","9774adc8":"### Loading the training data","4faee4f6":"We use a Baysian Optimizer to find the optimal HPs for out model. 20 trials take about 2 hours on GPU. ","7d45ed52":"## Encoder + MLP\nThe idea of using an encoder is the denoise the data. After many attempts at using a unsupervised autoencoder, the choice landed on a bottleneck encoder as this will preserve the intra-feature relations. ","ee431fbf":"## Submission","c1dd3004":"Added encoder tuning in v129. ","4ab3f725":"### Running CV\nFollowing [this notebook](https:\/\/www.kaggle.com\/gogo827jz\/jane-street-ffill-xgboost-purgedtimeseriescv) which use 5 PurgedGroupTimeSeriesSplit split on the dates in the training data. \n\nWe add the locked encoder as the first layer of the MLP. This seems to help in speeding up the submission rather than first predicting using the encoder then using the MLP. ","89ce26be":"# BlockingTimeSeriesSplitWithGap","3a62db98":"### Creating the autoencoder. \nThe autoencoder should aid in denoising the data. Based on [this](https:\/\/www.semanticscholar.org\/paper\/Deep-Bottleneck-Classifiers-in-Supervised-Dimension-Parviainen\/fb86483f7573f6430fe4597432b0cd3e34b16e43) paper. ","936394cc":"### Creating the MLP. ","bcb7ab84":"# Reduce VIF\nDropping co-linear features. "}}