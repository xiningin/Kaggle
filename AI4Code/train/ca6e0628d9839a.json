{"cell_type":{"dba668d4":"code","961138ed":"code","242069be":"code","c556a5c5":"code","a7fc5b4f":"code","2a8285cd":"code","c9081e5a":"code","2c060372":"code","ac065657":"code","0264ef81":"code","de860740":"code","823f551d":"code","7150eb22":"code","96c7ad8b":"code","63d480df":"code","583ef4bf":"code","81c74f1b":"code","fe5d5d32":"code","bc5a3aeb":"code","2e3705b0":"code","6dd16d23":"code","23824f35":"code","dfc6f9a4":"code","a16f0ab7":"code","847a29cc":"code","4be8359b":"code","df838af6":"code","dda1d95c":"code","50989f46":"code","d1a4415b":"code","8405b1b3":"code","627a6223":"code","66b575d9":"code","481ca229":"code","47462ad6":"code","3df02391":"code","7341aa59":"code","158ae1b9":"code","173fcd20":"code","35bb34af":"code","c8a5f716":"code","7598fe71":"code","2ddb67c8":"code","4202ec57":"code","2b53ce4d":"code","95343e8b":"code","3e602d30":"code","acff9039":"code","ea974711":"code","7af15d1b":"code","ed9bcd29":"code","ea764ce0":"code","cc19b88b":"code","fe1f1f89":"code","e663497c":"code","578a9777":"code","7da86824":"code","5a745244":"code","efe405fb":"code","df878c8c":"code","dc76faaa":"code","f6f106bd":"code","3babd2c3":"code","2dbf689f":"code","fa572da3":"code","1dc1fa02":"code","c576ab36":"code","55e0a249":"code","4750a344":"markdown","291d5245":"markdown","8d302306":"markdown","ef64d285":"markdown","811187f0":"markdown","0572dd38":"markdown","6f4595be":"markdown","23f70aab":"markdown","65329c59":"markdown","32719e0c":"markdown","bea0800c":"markdown","95517b1d":"markdown","d6a846d4":"markdown","562b02e4":"markdown","881bcb05":"markdown","d158a501":"markdown","0658d84c":"markdown","990555cd":"markdown","75978c5e":"markdown","2fc8c079":"markdown","b441c541":"markdown","22f08256":"markdown","5f4e990e":"markdown","e6a28431":"markdown","cf93800d":"markdown","b84b80e3":"markdown","2490e6fc":"markdown","ed5f40f6":"markdown","01c9e537":"markdown","80100041":"markdown","e86639bb":"markdown","834f518d":"markdown","99840752":"markdown","be565e1f":"markdown","70c27b6e":"markdown","1edf8e5b":"markdown","38a74117":"markdown","f11ab5ff":"markdown","9c1aacd5":"markdown","bb4d2d1e":"markdown","95ce9dcf":"markdown","dbd55a4f":"markdown","9fd4f66d":"markdown","60969354":"markdown","a502da67":"markdown","54079bc6":"markdown","cbb9f056":"markdown","4775b12f":"markdown","d8844829":"markdown"},"source":{"dba668d4":"import numpy","961138ed":"import numpy \narr = numpy.array([1, 2, 3, 4, 5]) \nprint(arr)","242069be":"import numpy as np","c556a5c5":"import numpy as np \narr = np.array([1, 2, 3, 4, 5]) \nprint(arr)","a7fc5b4f":"import numpy as np \narr = np.array([1, 2, 3, 4, 5])\nprint(arr)","2a8285cd":"print(type(arr))","c9081e5a":"import numpy as np\narr = np.array(42)\nprint(arr)","2c060372":"import numpy as np\narr = np.array([1, 2, 3, 4, 5])\nprint(arr)","ac065657":"import numpy as np\narr = np.array([[1, 2, 3], [4, 5, 6]])\nprint(arr)","0264ef81":"import numpy as np\narr = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])\nprint(arr)","de860740":"import numpy as np\n\na = np.array(42)\nb = np.array([1, 2, 3, 4, 5])\nc = np.array([[1, 2, 3], [4, 5, 6]])\nd = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])\n\nprint(a.ndim) \nprint(b.ndim) \nprint(c.ndim) \nprint(d.ndim)","823f551d":"import numpy as np\narr = np.array([1, 2, 3, 4])\nprint(arr[0])","7150eb22":"import numpy as np\narr = np.array([1, 2, 3, 4])\nprint(arr[2] + arr[3]) # R\u00e9cup\u00e9rez les troisi\u00e8me et quatri\u00e8me \u00e9l\u00e9ments du tableau et afficher leur somme.","96c7ad8b":"# Acc\u00e9dez au 2\u00e8me \u00e9l\u00e9ment du premier tableau :\nimport numpy as np\narr = np.array([[1,2,3,4,5], [6,7,8,9,10]])\nprint('2\u00e8me \u00e9l\u00e9ment du premier tableau: ', arr[0, 1])","63d480df":"# Acc\u00e9dez au 5\u00e8me \u00e9l\u00e9ment du deuxi\u00e8me tableau\nimport numpy as np\narr = np.array([[1,2,3,4,5], [6,7,8,9,10]])\nprint('5\u00e8me \u00e9l\u00e9ment du deuxi\u00e8me tableau: ', arr[1, 4])","583ef4bf":"# Acc\u00e9dez au troisi\u00e8me \u00e9l\u00e9ment du deuxi\u00e8me tableau du premier tableau:\nimport numpy as np\narr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])\nprint(arr[0, 1, 2])","81c74f1b":"# Imprimez le dernier \u00e9l\u00e9ment du 2\u00e8me tableau:\nimport numpy as np\narr = np.array([[1,2,3,4,5], [6,7,8,9,10]])\nprint('dernier \u00e9l\u00e9ment du 2\u00e8me tableau: ', arr[1, -1])","fe5d5d32":"import numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7])\nprint(arr[1:5])","bc5a3aeb":"import numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7])\nprint(arr[4:])","2e3705b0":"import numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7])\nprint(arr[:4])","6dd16d23":"import numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7])\nprint(arr[-3:-1])","23824f35":"import numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7])\nprint(arr[1:5:2])","dfc6f9a4":"import numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7])\nprint(arr[::2])","a16f0ab7":"import numpy as np\narr = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\nprint(arr[1, 1:4])","847a29cc":"import numpy as np\narr = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\nprint(arr[0:2, 2])","4be8359b":"import numpy as np\narr = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\nprint(arr[0:2, 1:4])","df838af6":"import numpy as np\narr = np.array([1, 2, 3, 4])\nprint(arr.dtype)","dda1d95c":"import numpy as np\narr = np.array(['apple', 'banana', 'cherry'])\nprint(arr.dtype)","50989f46":"# Cr\u00e9ation d'un tableau avec une cha\u00eene de caract\u00e8re comme type de donn\u00e9es:\nimport numpy as np\narr = np.array([1, 2, 3, 4], dtype='S')\nprint(arr)","d1a4415b":"print(arr.dtype)","8405b1b3":"import numpy as np\narr = np.array([1, 2, 3, 4], dtype='i4')\nprint(arr)\nprint(arr.dtype)","627a6223":"# Faites une copie, modifiez le tableau d'origine et affichez les deux tableaux:\nimport numpy as np\n\narr = np.array([1, 2, 3, 4, 5])\nx = arr.copy()\narr[0] = 42\n\nprint(arr) ","66b575d9":"print(x)","481ca229":"# Cr\u00e9ez une vue, modifiez le tableau d'origine et affichez les deux tableaux:\nimport numpy as np\n\narr = np.array([1, 2, 3, 4, 5])\nx = arr.view()\narr[0] = 42\n\nprint(arr) ","47462ad6":"print(x)","3df02391":"import numpy as np\n\narr = np.array([1, 2, 3])\n\nfor x in arr:\n  print(x)","7341aa59":"import numpy as np\n\narr = np.array([[1, 2, 3], [4, 5, 6]])\n\nfor x in arr:\n  print(x)","158ae1b9":"import numpy as np\n\narr = np.array([[1, 2, 3], [4, 5, 6]])\n\nfor x in arr:\n  for y in x:\n    print(y)","173fcd20":"import numpy as np\n\narr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])\n\nfor x in arr:\n  print(x)","35bb34af":"import numpy as np\n\narr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])\n\nfor x in arr:\n  for y in x:\n    for z in y:\n      print(z)","c8a5f716":"import numpy as np\n\narr = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])\n\nfor x in np.nditer(arr):\n  print(x)","7598fe71":"import numpy as np\n\narr = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])\n\nfor x in np.nditer(arr[:, ::2]):\n  print(x)","2ddb67c8":"import numpy as np\n\narr1 = np.array([1, 2, 3])\n\narr2 = np.array([4, 5, 6])\n\narr = np.concatenate((arr1, arr2))\n\nprint(arr)","4202ec57":"import numpy as np\n\narr1 = np.array([[1, 2], [3, 4]])\n\narr2 = np.array([[5, 6], [7, 8]])\n\narr = np.concatenate((arr1, arr2), axis=1)\n\nprint(arr)","2b53ce4d":"import numpy as np\n\narr1 = np.array([1, 2, 3])\n\narr2 = np.array([4, 5, 6])\n\narr = np.stack((arr1, arr2), axis=1)\n\nprint(arr)","95343e8b":"import numpy as np\n\narr1 = np.array([1, 2, 3])\n\narr2 = np.array([4, 5, 6])\n\narr = np.hstack((arr1, arr2))\n\nprint(arr)","3e602d30":"import numpy as np\n\narr1 = np.array([1, 2, 3])\n\narr2 = np.array([4, 5, 6])\n\narr = np.vstack((arr1, arr2))\n\nprint(arr)","acff9039":"#Diviser le tableau en 3 parts : \n\nimport numpy as np\n\narr = np.array([1, 2, 3, 4, 5, 6])\n\nnewarr = np.array_split(arr, 3)\n\nprint(newarr)","ea974711":"#Diviser le tableau en 4 parts : \nimport numpy as np\n\narr = np.array([1, 2, 3, 4, 5, 6])\n\nnewarr = np.array_split(arr, 4)\n\nprint(newarr)","7af15d1b":"import numpy as np\n\narr = np.array([1, 2, 3, 4, 5, 6])\n\nnewarr = np.array_split(arr, 3)\n\nprint(newarr[0])\nprint(newarr[1])\nprint(newarr[2])","ed9bcd29":"import numpy as np\n\narr = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]])\n\nnewarr = np.array_split(arr, 3)\n\nprint(newarr)","ea764ce0":"import numpy as np\n\narr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]])\n\nnewarr = np.array_split(arr, 3)\n\nprint(newarr)","cc19b88b":"# Rechercher les index dont la valeur est 4:\n\nimport numpy as np\n\narr = np.array([1, 2, 3, 4, 5, 4, 4])\n\nx = np.where(arr == 4)\n\nprint(x)","fe1f1f89":"# Trouver les index o\u00f9 les valeurs sont paires:\n\nimport numpy as np\n\narr = np.array([1, 2, 3, 4, 5, 6, 7, 8])\n\nx = np.where(arr%2 == 0)\n\nprint(x)","e663497c":"# Trouver les index o\u00f9 les valeurs sont impaires:\n\nimport numpy as np\n\narr = np.array([1, 2, 3, 4, 5, 6, 7, 8])\n\nx = np.where(arr%2 == 1)\n\nprint(x)","578a9777":"# Tri d'un tableau:\n\nimport numpy as np\n\narr = np.array([3, 2, 0, 1])\n\nprint(np.sort(arr))","7da86824":"# Tri d'un tableau par ordre alphab\u00e9tique:\n\nimport numpy as np\n\narr = np.array(['banana', 'cherry', 'apple'])\n\nprint(np.sort(arr))","5a745244":"# Tri d'un tableau bool\u00e9en:\n\nimport numpy as np\n\narr = np.array([True, False, True])\n\nprint(np.sort(arr))","efe405fb":"# Tri d'un tableau 2D:\n\nimport numpy as np\n\narr = np.array([[3, 2, 4], [5, 0, 1]])\n\nprint(np.sort(arr))","df878c8c":"import numpy as np\n\narr = np.array([41, 42, 43, 44])\n\nx = [True, False, True, False]\n\nnewarr = arr[x]\n\nprint(newarr)","dc76faaa":"import numpy as np\n\narr = np.array([41, 42, 43, 44])\n\n# Create an empty list\nfilter_arr = []\n\n# go through each element in arr\nfor element in arr:\n  # if the element is higher than 42, set the value to True, otherwise False:\n  if element > 42:\n    filter_arr.append(True)\n  else:\n    filter_arr.append(False)\n\nnewarr = arr[filter_arr]\n\nprint(filter_arr)\nprint(newarr)","f6f106bd":"from numpy import random\nx = random.randint(100)\nprint(x)","3babd2c3":"#### G\u00e9n\u00e9ration d'un flottant al\u00e9atoire de 0 \u00e0 1:","2dbf689f":"from numpy import random\nx = random.rand()\nprint(x)","fa572da3":"from numpy import random\nx=random.randint(100, size=(5))\nprint(x)","1dc1fa02":"from numpy import random\nx = random.randint(100, size=(3, 5))\nprint(x)","c576ab36":"from numpy import random\nx = random.rand(5)\nprint(x)","55e0a249":"from numpy import random\nx = random.rand(3, 5)\nprint(x)","4750a344":"## Recherche de tableaux\nVous pouvez rechercher dans un tableau une certaine valeur et renvoyer les index qui obtiennent une correspondance.\n\nPour rechercher un tableau, utilisez la m\u00e9thode **where()**.","291d5245":"### Tableau 3D\nDans un tableau 3D, il passera par tous les tableaux 2D.","8d302306":"## D\u00e9coupage de tableau\n* Le d\u00e9coupage en python signifie prendre des \u00e9l\u00e9ments d'un index donn\u00e9 \u00e0 un autre index donn\u00e9.\n* Nous passons slice au lieu d'index comme ceci: [start: end].\n* Nous pouvons \u00e9galement d\u00e9finir l'\u00e9tape, comme ceci: [start: end: step].\n\n#### Exemple\nD\u00e9coupez les \u00e9l\u00e9ments de l'index 1 \u00e0 l'index 5 dans le tableau suivant","ef64d285":"#### Exemple 3\n\u00c0 partir des deux \u00e9l\u00e9ments, de l'index 1 \u00e0 l'index 4 (non inclus), cela renverra un tableau 2D:","811187f0":"### G\u00e9n\u00e9ration d'un tableau al\u00e9atoire\nDans NumPy, nous travaillons avec des tableaux, et vous pouvez utiliser les deux m\u00e9thodes des exemples ci-dessus pour cr\u00e9er des tableaux al\u00e9atoires.\n\n#### Entiers\nLa m\u00e9thode **randint()** prend un param\u00e8tre de taille dans lequel vous pouvez sp\u00e9cifier la forme d'un tableau.","0572dd38":"## Acc\u00e9der aux \u00e9l\u00e9ments d'un tableau\nL'indexation de tableau \u00e9quivaut \u00e0 acc\u00e9der \u00e0 un \u00e9l\u00e9ment de tableau.<br>\nVous pouvez acc\u00e9der \u00e0 un \u00e9l\u00e9ment de tableau en vous r\u00e9f\u00e9rant \u00e0 son num\u00e9ro d'index.<br>\nLes index des tableaux **NumPy** commencent par 0, ce qui signifie que le premier \u00e9l\u00e9ment a l'index 0 et le second l'index 1, etc.","6f4595be":"## Types de donn\u00e9es en Python\nPar d\u00e9faut, Python a ces types de donn\u00e9es:\n\n* strings - utilis\u00e9es pour repr\u00e9senter des donn\u00e9es textuelles, le texte est plac\u00e9 entre guillemets. par exemple. \"A B C D\"\n* integer - utilis\u00e9 pour repr\u00e9senter des nombres entiers. par exemple. -1, -2, -3\n* float - utilis\u00e9 pour repr\u00e9senter des nombres r\u00e9els. par exemple. 1,2, 42,42\n* bool\u00e9en - utilis\u00e9 pour repr\u00e9senter True ou False.\n* complex - utilis\u00e9 pour repr\u00e9senter un nombre complexe. par exemple. 1,0 + 2,0j, 1,5 + 2,5j\n\n## Types de donn\u00e9es NumPy\nNumPy a quelques types de donn\u00e9es suppl\u00e9mentaires et fait r\u00e9f\u00e9rence \u00e0 des types de donn\u00e9es avec un caract\u00e8re, comme i pour les entiers, u pour les entiers non sign\u00e9s, etc.\n\nVous trouverez ci-dessous une liste de tous les types de donn\u00e9es dans NumPy et les caract\u00e8res utilis\u00e9s pour les repr\u00e9senter.\n\n| Caract\u00e8re | Type de donn\u00e9es | Description | Exemple |\n| :-------- | :--------- | :--------- | :--------- |\n| i | integer | Entier Sign\u00e9 | 128 |\n| b | boolean | Bool\u00e9en | True ou False |\n| u | unsigned integer | Entier non sign\u00e9 | |\n| f | float | Nombre \u00e0 virgule flottante |14.5|\n| c | complex float | Complexe | 2 + 3j|\n| M | datetime | Date et heure | 2020-01-01 |\n| O | object | Objet | Voiture |\n| S | string | Cha\u00eene de caract\u00e8res | \"Bonjour\" |\n| U | unicode string | Cha\u00eene de caract\u00e8re non sign\u00e9 | 0A |\n\n\n## V\u00e9rification du type de donn\u00e9es d'un tableau\nL'objet tableau NumPy a une propri\u00e9t\u00e9 appel\u00e9e dtype qui renvoie le type de donn\u00e9es du tableau:\n\n| Type de donn\u00e9es | Description |\n| :--------- | :----------------------- |\n| bool | Bool\u00e9en |\n| int8 | Entier sign\u00e9 8 bits |\n| int16 | Entier sign\u00e9 16 bits |\n| int32 | Entier sign\u00e9 32 bits |\n| int64 | Entier sign\u00e9 64 bits |\n| uint8 | Entier non sign\u00e9 8 bits |\n| uint16 | Entier non sign\u00e9 16 bits |\n| uint32 | Entier non sign\u00e9 32 bits |\n| uint64 | Entier non sign\u00e9 64 bits |\n| float16 | Nombre \u00e0 virgule flottante 16 bitss |\n| float32 | Nombre \u00e0 virgule flottante 32 bits |\n| float64 | Nombre \u00e0 virgule flottante 64 bits |\n| complex64 | Nombre complexe 64 bits |\n| complex128 | Nombre complexe de 128 bits |","23f70aab":"#### Exemple 2\n\u00c0 partir des deux \u00e9l\u00e9ments, renvoyez l'index 2:","65329c59":"#### Explication :\narr [0, 1, 2] imprime la valeur 6.\n\nLe premier nombre repr\u00e9sente la premi\u00e8re dimension, qui contient deux tableaux:\n**[[1, 2, 3], [4, 5, 6]]**\net:\n**[[7, 8, 9], [10, 11, 12]]**\nPuisque nous avons s\u00e9lectionn\u00e9 0, nous nous retrouvons avec le premier tableau:\n[[1, 2, 3], [4, 5, 6]]\n\nLe deuxi\u00e8me nombre repr\u00e9sente la deuxi\u00e8me dimension, qui contient \u00e9galement deux tableaux:\n**[1, 2, 3]**\net:\n**[4, 5, 6]**\nPuisque nous avons s\u00e9lectionn\u00e9 1, nous nous retrouvons avec le deuxi\u00e8me tableau:\n**[4, 5, 6]**\n\nLe troisi\u00e8me nombre repr\u00e9sente la troisi\u00e8me dimension, qui contient trois valeurs:\n**4\n5\n6**\nPuisque nous avons s\u00e9lectionn\u00e9 2, nous nous retrouvons avec la troisi\u00e8me valeur:\n6\n\n## Indexation n\u00e9gative\nUtilisez l'indexation n\u00e9gative pour acc\u00e9der \u00e0 un tableau depuis la fin.","32719e0c":"### Acc\u00e8s aux \u00e9l\u00e9ments d'un tableau 2D\nPour acc\u00e9der aux \u00e9l\u00e9ments des tableaux 2D, nous pouvons utiliser des entiers s\u00e9par\u00e9s par des virgules repr\u00e9sentant la dimension et l'index de l'\u00e9l\u00e9ment.","bea0800c":"## It\u00e9ration des Tableaux\nIt\u00e9rer signifie parcourir les \u00e9l\u00e9ments un par un.\n\nComme nous traitons des tableaux multidimensionnels dans numpy, nous pouvons le faire en utilisant la boucle for basique de python.\n\nSi nous it\u00e9rons sur un tableau 1D, il passera par chaque \u00e9l\u00e9ment un par un.","95517b1d":"**Pour i, u, f, S et U, nous pouvons \u00e9galement d\u00e9finir la taille.**","d6a846d4":"### Alias\nPour augmenter la productivit\u00e9 des programmeurs en python, on utilise souvent le mots cl\u00e9 \u00ab\u00a0as\u00a0\u00bb apr\u00e8s l\u2019importation de la biblioth\u00e8que pour renommer la biblioth\u00e8que par un nom moins difficile \u00e0 apprendre et facile \u00e0 \u00e9crire.","562b02e4":"### Joindre des tableaux \u00e0 l'aide de la fonction Stack\nL'empilement est identique \u00e0 la concat\u00e9nation, la seule diff\u00e9rence est que l'empilement est effectu\u00e9 le long d'un nouvel axe.\n\nOn peut concat\u00e9ner deux tableaux 1D le long du deuxi\u00e8me axe ce qui aboutirait \u00e0 les placer l'un sur l'autre, c'est-\u00e0-dire empilement.\n\nNous passons une s\u00e9quence de tableaux que nous voulons joindre \u00e0 la m\u00e9thode **stack()** avec l'axe. Si l'axe n'est pas explicitement pass\u00e9, il est consid\u00e9r\u00e9 comme 0.","881bcb05":"<center style=\"font-size:35px;color:red;font-weight:bold\"> Initiation \u00e0 Python<\/center><br>\n<center style=\"color:black;font-size:20px\"> Programmation Scientifique  <\/center>\n<center style=\"color:black;font-size:14px\"> NumPy <\/center>\n<br>\n<center style=\"color:black\">**Cours du Pr. Abdellah AZMANI**<\/center>\n<center style=\"color:black\">**D\u00e9partement G\u00e9nie Informatique**<\/center>\n<br>\n<center style=\"color:black\">Universit\u00e9 Abdelmalek Essaadi<\/center>\n<center style=\"color:black\">Facult\u00e9 des Sciences et Techniques<\/center>\n<center style=\"color:black\">Tanger<\/center>","d158a501":"## Qu'est-ce qu'un nombre al\u00e9atoire?\nUn nombre al\u00e9atoire ne signifie PAS un nombre diff\u00e9rent \u00e0 chaque fois. Al\u00e9atoire signifie quelque chose qui ne peut \u00eatre pr\u00e9dit logiquement.\n\n### G\u00e9n\u00e9rer un nombre al\u00e9atoire\nNumPy propose le module al\u00e9atoire pour travailler avec des nombres al\u00e9atoires.\n\n#### G\u00e9n\u00e9ration d'un nombre al\u00e9atoire entre 0 et 100","0658d84c":"## Filtrage des tableaux\nExtraire certains \u00e9l\u00e9ments d'un tableau existant et en cr\u00e9er un nouveau s'appelle le filtrage.\n\nDans NumPy, vous filtrez un tableau \u00e0 l'aide d'une liste d'index bool\u00e9enne.\n\nUne liste d'index bool\u00e9en est une liste de bool\u00e9ens correspondant aux index du tableau.\n\nSi la valeur d'un index est True, cet \u00e9l\u00e9ment est contenu dans le tableau filtr\u00e9, si la valeur de cet index est False, cet \u00e9l\u00e9ment est exclu du tableau filtr\u00e9.","990555cd":"### It\u00e9rer des tableaux avec nditer ()\nLa fonction **nditer()** est une fonction d'aide qui peut \u00eatre utilis\u00e9e \u00e0 partir d'it\u00e9rations tr\u00e8s basiques \u00e0 tr\u00e8s avanc\u00e9es. Elle r\u00e9sout certains probl\u00e8mes de base auxquels nous sommes confront\u00e9s dans l'it\u00e9ration.\n\n#### It\u00e9ration sur chaque \u00e9l\u00e9ment scalaire\nDans les boucles **for** basiques, en parcourant chaque scalaire d'un tableau, nous devons utiliser **n** boucles **for**, ce qui peut \u00eatre difficile \u00e0 \u00e9crire pour les tableaux avec une dimensionnalit\u00e9 tr\u00e8s \u00e9lev\u00e9e.","75978c5e":"#### Tableaux 1D\nUn tableau qui a des tableaux 0D comme \u00e9l\u00e9ments est appel\u00e9 tableau unidimensionnel ou 1D.<br>\nCe sont les tableaux les plus courants et les plus basiques.","2fc8c079":"#### Cr\u00e9ation d'un tableau de filtres qui ne renverra que des valeurs sup\u00e9rieures \u00e0 42:","b441c541":"## Tri des tableaux\nLe tri signifie placer les \u00e9l\u00e9ments dans une s\u00e9quence ordonn\u00e9e.\n\nUne s\u00e9quence ordonn\u00e9e est toute s\u00e9quence dont l'ordre correspond aux \u00e9l\u00e9ments, comme num\u00e9rique ou alphab\u00e9tique, croissant ou d\u00e9croissant.\n\nL'objet NumPy **ndarray** a une fonction appel\u00e9e **sort()**, qui triera un tableau sp\u00e9cifi\u00e9.","22f08256":"### Acc\u00e9s aux \u00e9l\u00e9ments d'un tableau 3D\nPour acc\u00e9der aux \u00e9l\u00e9ments des tableaux 3D, nous pouvons utiliser des entiers s\u00e9par\u00e9s par des virgules repr\u00e9sentant les dimensions et l'index de l'\u00e9l\u00e9ment.","5f4e990e":"### Tableau 2D\n#### Exemple 1\n\u00c0 partir du deuxi\u00e8me \u00e9l\u00e9ment, d\u00e9coupez les \u00e9l\u00e9ments de l'index 1 \u00e0 l'index 4 (non inclus):","e6a28431":"## Dimensions dans les tableaux\nla dimension dans les tableaux est le niveau de profondeur de tableau (tableaux imbriqu\u00e9s).\n#### Tableaux 0D\nLes tableaux 0D, ou scalaires, sont les \u00e9l\u00e9ments d'un tableau. Chaque valeur d'un tableau est un tableau 0D.","cf93800d":"### Diviser en tableaux\nLa valeur de retour de la m\u00e9thode **array_split()** est un tableau contenant chacun des fragments sous forme de tableau.\n\nSi vous divisez un tableau en 3 tableaux, vous pouvez y acc\u00e9der \u00e0 partir du r\u00e9sultat comme n'importe quel \u00e9l\u00e9ment du tableau:","b84b80e3":"### Cr\u00e9ation d\u2019un tableau \nPour cr\u00e9er un tableau, on utilise la fonction numpy.array(). On utilise des crochets pour d\u00e9limiter les listes d\u2019\u00e9l\u00e9ments dans les tableaux.<br>\nExemple :","2490e6fc":"## Joindre les tableaux NumPy\nJoindre signifie placer le contenu de deux tableaux ou plus dans un seul tableau.\n\nNous passons une s\u00e9quence de tableaux que nous voulons joindre \u00e0 la fonction **concatenate()**, avec l'axe. Si l'axe n'est pas explicitement pass\u00e9, il est consid\u00e9r\u00e9 comme 0.","ed5f40f6":"#### Exemple\nD\u00e9coupez les \u00e9l\u00e9ments de l'index 4 \u00e0 la fin du tableau:","01c9e537":"## Fonctions hyperboliques\n* numpy.sinh(x) : sinus hyperbolique\n* numpy.cosh(x) : cosinus hyperbolique\n* numpy.tanh(x) : tangente hyperbolique\n* numpy.arcsinh(x) : arcsinus hyperbolique\n* numpy.arccosh(x) : arc cosinus hyperbolique\n* numpy.arctanh(x) : arc tangente hyperbolique\n\n## Fonctions trigonom\u00e9triques\n* numpy.sin(x) : sinus\n* numpy.cos(x) : cosinus\n* numpy.tan(x) : tangente\n* numpy.arcsin(x) : arcsinus\n* numpy.arccos(x) : arc cosinus\n* numpy.arctan(x) : arc tangente\n\n## Fonctions diverses\n* numpy.sqrt(x) : racine carr\u00e9e\n* numpy.exp(x) : exponentielle\n* numpy.log(x) : logarithme n\u00e9p\u00e9rien\n* numpy.abs(x) : valeur absolue\n* numpy.sign(x) : signe\n\n## Fonctions utiles pour les nombres complexes\n* numpy.real(x) : partie r\u00e9elle\n* numpy.imag(x) : partie imaginaire\n* numpy.abs(x) : module\n* numpy.angle(x) : argument en radians\n* numpy.conj(x) : complexe conjugu\u00e9\n\n## Arrondis\n* numpy.around(x,n) : arrondi \u00e0 n d\u00e9cimales\n* numpy.trunc(x) : retourne la partie enti\u00e8re du nombre (le nombre est tronqu\u00e9)\n","80100041":"## Cr\u00e9ation de tableaux avec un type de donn\u00e9es d\u00e9fini\nNous utilisons la fonction array() pour cr\u00e9er des tableaux, cette fonction peut prendre un argument optionnel: **dtype** qui nous permet de d\u00e9finir le type de donn\u00e9es attendu des \u00e9l\u00e9ments du tableau:","e86639bb":"#### Float\nLa m\u00e9thode **rand()** vous permet \u00e9galement de sp\u00e9cifier la forme du tableau.","834f518d":"#### Matrices 3D\nUn tableau qui a des tableaux 2D (matrices) comme \u00e9l\u00e9ments est appel\u00e9 tableau 3D.<br>\nCeux-ci sont souvent utilis\u00e9s pour repr\u00e9senter un tenseur du 3\u00e8me ordre.","99840752":"#### It\u00e9ration avec une taille de pas diff\u00e9rente\nNous pouvons utiliser le filtrage et suivi d'une it\u00e9ration.","be565e1f":"### VIEW","70c27b6e":"## Division des tableaux NumPy\nLe fractionnement est une op\u00e9ration inverse de la jonction.\n\nLa jonction fusionne plusieurs tableaux en un seul et le fractionnement divise un tableau en plusieurs.\n\nNous utilisons **array_split()** pour diviser les tableaux, nous lui passons le tableau que nous voulons diviser et le nombre de divisions.","1edf8e5b":"## Tableau NumPy : Copy vs View\n\nLa diff\u00e9rence entre Copy et View : \n* La principale diff\u00e9rence entre une Copy et View d'un tableau est que la copie est un nouveau tableau et que la vue n'est qu'une vue du tableau d'origine.\n\n* La copie poss\u00e8de les donn\u00e9es et les modifications apport\u00e9es \u00e0 la copie n'affecteront pas la matrice d'origine, et toutes les modifications apport\u00e9es \u00e0 la matrice d'origine n'affecteront pas la copie.\n\n* La vue ne poss\u00e8de pas les donn\u00e9es et toutes les modifications apport\u00e9es \u00e0 la vue affecteront le tableau d'origine et toutes les modifications apport\u00e9es au tableau d'origine affecteront la vue.\n\n### COPY","38a74117":"### Importation NumPy\nPour utiliser la biblioth\u00e8que Numpy, il faut utiliser le mots cl\u00e9 import \u00e0 l\u2019ent\u00eate de notre programme suivie de nom de la biblioth\u00e8que qu\u2019est dans notre cas \u00ab\u00a0Numpy\u00a0\u00bb.<br>\nExemple : ","f11ab5ff":"#### Empilement le long des colonnes\nNumPy fournit une fonction d'assistance: **vstack()** pour empiler le long des colonnes.","9c1aacd5":"**Pour v\u00e9rifier la dimensions, NumPy Arrays fournit l'attribut ndim qui renvoie un entier qui nous indique le nombre de dimensions du tableau.**","bb4d2d1e":"#### Exemple\nRenvoie tous les autres \u00e9l\u00e9ments du tableau entier:","95ce9dcf":"## NumPy\n### Qu'est-ce que NumPy?\n   * NumPy est une biblioth\u00e8que Python utilis\u00e9e pour travailler avec des tableaux.\n   * Il a \u00e9galement des fonctions pour travailler dans le domaine de l'alg\u00e8bre lin\u00e9aire, de la transform\u00e9e de Fourier et des matrices.\n   * NumPy a \u00e9t\u00e9 cr\u00e9\u00e9 en 2005 par Travis Oliphant. C'est un projet open source et vous pouvez l'utiliser librement.\n\n**NumPy signifie Numerical Python.**\n\n### Pourquoi utiliser NumPy?\nEn Python, nous avons des listes qui servent \u00e0 des tableaux, mais elles sont lentes \u00e0 traiter.<br>\nNumPy vise \u00e0 fournir un objet de tableau jusqu'\u00e0 50 fois plus rapide que les listes Python traditionnelles.<br>\nL'objet tableau dans NumPy s'appelle ndarray, il fournit de nombreuses fonctions de support qui facilitent le travail avec ndarray.<br>\nLes tableaux sont tr\u00e8s fr\u00e9quemment utilis\u00e9s dans la science des donn\u00e9es, o\u00f9 la vitesse et les ressources sont tr\u00e8s importantes.<br>\n\n### Pourquoi NumPy est-il plus rapide que les listes?\nLes tableaux NumPy sont stock\u00e9s \u00e0 un endroit continu de la m\u00e9moire contrairement aux listes, de sorte que les processus peuvent y acc\u00e9der et les manipuler tr\u00e8s efficacement.<br>\nCe comportement est appel\u00e9 localit\u00e9 de r\u00e9f\u00e9rence en informatique.<br>\nC'est la raison principale pour laquelle NumPy est plus rapide que les listes. Il est \u00e9galement optimis\u00e9 pour fonctionner avec les derni\u00e8res architectures CPU.\n\n### Dans quelle langue NumPy est-il \u00e9crit?\nNumPy est une biblioth\u00e8que Python et est \u00e9crite partiellement en Python, mais la plupart des parties qui n\u00e9cessitent un calcul rapide sont \u00e9crites en C ou C ++.\n\n### O\u00f9 se trouve la base de code NumPy?\nLe code source de NumPy se trouve dans ce r\u00e9f\u00e9rentiel github https:\/\/github.com\/numpy\/numpy","dbd55a4f":"#### Matrices 2D\nUn tableau qui a des tableaux 1D comme \u00e9l\u00e9ments est appel\u00e9 un tableau 2D.<br>\nCeux-ci sont souvent utilis\u00e9s pour repr\u00e9senter des matrices ou des tenseurs de second ordre.","9fd4f66d":"## STEP\nUtilisez la valeur de l'\u00e9tape pour d\u00e9terminer l'\u00e9tape du tranchage:\n\n#### Exemple\nRenvoie tous les autres \u00e9l\u00e9ments de l'index 1 \u00e0 l'index 5:","60969354":"## Tranchage n\u00e9gatif\nUtilisez l'op\u00e9rateur moins pour faire r\u00e9f\u00e9rence \u00e0 un index \u00e0 partir de la fin:\n#### Exemple\nTranche de l'index 3 de la fin \u00e0 l'index 1 de la fin:","a502da67":"#### Exemple\nD\u00e9coupez les \u00e9l\u00e9ments du d\u00e9but \u00e0 l'index 4 (non inclus):","54079bc6":"### Tableau 2D\nDans un tableau 2D, il parcourra toutes les lignes.","cbb9f056":"#### G\u00e9n\u00e9ration d'un tableau 2D avec 3 lignes, chaque ligne contenant 5 nombres al\u00e9atoires:","4775b12f":"#### Empilement le long des lignes\nNumPy fournit une fonction d'assistance: **hstack()** pour empiler le long des lignes.","d8844829":"#### G\u00e9n\u00e9ration d'un tableau 2D avec 3 lignes, chaque ligne contenant 5 entiers al\u00e9atoires de 0 \u00e0 100:"}}