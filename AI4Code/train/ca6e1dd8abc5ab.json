{"cell_type":{"6c8ec16d":"code","efa18745":"code","ca72a179":"code","af945173":"code","1212988a":"code","39bc9484":"code","dfb3a662":"code","59c15471":"code","a1993baa":"code","41b360df":"code","14ff336e":"code","00398e62":"code","1d4f7066":"code","f466d53a":"code","1bf5a179":"code","141712ba":"code","23e77480":"code","82152aac":"code","1eafcf18":"code","3ff99312":"code","da9dae0c":"code","ef4c23b1":"code","2839b098":"code","a1a24714":"code","35123ae2":"code","c910972b":"markdown","07fa6f0e":"markdown","77f6aea8":"markdown","ec6512be":"markdown","23e98bf8":"markdown","46797da8":"markdown","d62f8913":"markdown","e67d6c79":"markdown","203e52ab":"markdown","ff9c02d2":"markdown","72554865":"markdown","b68bfd99":"markdown","f8e2d33e":"markdown","d2cc502e":"markdown","85005bf9":"markdown"},"source":{"6c8ec16d":"import tensorflow as tf\nimport numpy as np\nimport os\nimport datetime\nimport pandas as pd\nimport re\nimport pprint\nimport functools\nimport sys\n","efa18745":"# Import Dataframe from desktop\nFilepath = '..\/input\/dead-lyrics-5\/Dead_lyrics5_CSV.csv'\ndf = pd.read_csv(Filepath)\n\n#Left align text from csv\ndef left_justified(df):\n    formatters = {}\n    for li in list(df.columns):\n        max = df[li].str.len().max()\n        form = \"{{:<{}s}}\".format(max)\n        formatters[li] = functools.partial(str.format, form)\n    return df.to_string(formatters=formatters, index=False)\n\ndf2 = left_justified(df)\n\n\n# Use regex to find and remove song titles and unwanted characters from lyrics\ndef remove_characters(str1):\n    result = re.sub(r\"[A-Z'(]{2,}[^a-z]\", \" \", str1)\n    result2 = re.sub(r\"\\[*]*\\\\*\", \"\", result)\n    result3 = re.sub(r\"((,)?\\*?)\", \"\", result2)\n    result4 = re.sub(r\"[0-9]\", \"\", result3)\n    return result4\n\nno_caps = remove_characters(df2)\n\n#Extra words\/characters we dont want in lyrics data\nl_string = no_caps.replace('\/', ' ').replace('(note)', ' ').replace('(note )', ' ').replace('(note a)', ' ')\\\n.replace('(note a)', ' ').replace('(note b)', ' ').replace('(note c)', ' ').replace('(note d)', ' ')\\\n.replace('(note e)', ' ').replace('(note f)', ' ').replace('(note g)', ' ')\n\nprint(no_caps[:1000])\n\n","ca72a179":"#Get rid of empty spaces in string\nlyrics_split = \" \".join(l_string.split())\n\n# View the length of the data and the first 500 characters\nprint(len(lyrics_split))\nprint(lyrics_split[:500]) ","af945173":"\n# Create a set of the unique characters featured in lyrics_split\n#This will be our vocabulary\nvocab = sorted(set(lyrics_split))\n\nprint(vocab[:100])\nprint(f' \"\\n Number of unique characters: {len(vocab)}')","1212988a":"# Creating a mapping from unique characters to indices\nchar2idx = {u:i for i, u in enumerate(vocab)}\n\nidx2char = np.array(vocab)\ntext_as_int = np.array([char2idx[c] for c in lyrics_split])\n\n#Now you have an integer representation for each character. \n#Notice that you mapped the character as indexes from 0 to len(unique).\n\nprint('{')\nfor char,_ in zip(char2idx, range(65)):\n    print('  {:4s}: {:3d},'.format(repr(char), char2idx[char]))\nprint('  ...\\n}')","39bc9484":"# Show how the first 13 characters from the text are mapped to integers\nprint('{} ---- characters mapped to int ---- > {}'.format(repr(lyrics_split[:100]), text_as_int[:100]))\n","dfb3a662":"# The maximum length of sentence you want for a single input, in characters\nseq_length = 100\nexamples_per_epoch = len(l_string)\/\/(seq_length+1)\n\n# Create training examples \/ targets\n# Use the tf.data.Dataset to create a sourse dataset from input data \n# Makes it easy to perfrom transformations to the data.\nchar_dataset = tf.data.Dataset.from_tensor_slices(text_as_int)\n\nfor i in char_dataset.take(5):\n    print(idx2char[i.numpy()])\n    ","59c15471":"# The 'batch' method lets us easily convert these individual charaters to sequences of the desired size.\n\nsequences = char_dataset.batch(seq_length+1, drop_remainder=True)\n\nfor item in sequences.take(5):\n    print(repr(''.join(idx2char[item.numpy()])))","a1993baa":"# For each sequence, duplicate and shift it to form the input and target text by using the map method \n# to apply a simple function to each batch:\ndef split_input_target(chunk):\n    input_text = chunk[:-1]\n    target_text = chunk[1:]\n    return input_text, target_text\n\ndataset = sequences.map(split_input_target)\n\nfor input_example, target_example in  dataset.take(1):\n    print('Input data: ', repr(''.join(idx2char[input_example.numpy()])))\n    print('Target data:', repr(''.join(idx2char[target_example.numpy()])))","41b360df":"for i, (input_idx, target_idx) in enumerate(zip(input_example[:5], target_example[:5])):\n    print(\"Step {:4d}\".format(i))\n    print(\"  input: {} ({:s})\".format(input_idx, repr(idx2char[input_idx])))\n    print(\"  expected output: {} ({:s})\".format(target_idx, repr(idx2char[target_idx])))","14ff336e":"# Batch size\nBATCH_SIZE  = 10\n\n## Buffer size to shuffle the dataset\n# (TF data is designed to work with possibly infinite sequences,\n# so it doesn't attempt to shuffle the entire sequence in memory. Instead,\n# it maintains a buffer in which it shuffles elements).\nBUFFER_SIZE = 10000\n\n\ndataset = (\n    dataset\n    .shuffle(BUFFER_SIZE)\n    .batch(BATCH_SIZE, drop_remainder=True)\n     .prefetch(tf.data.experimental.AUTOTUNE))\n\ndataset","00398e62":"# Length of the vocabulary in characters\nvocab_size = len(vocab)\n\n# The embedding dimension\nembedding_dim = 256\n\n# Number of RNN units\nrnn_units = 1024\n\ndef build_model(vocab_size, embedding_dim, rnn_units, batch_size):\n    \n    model = tf.keras.Sequential([\n        tf.keras.layers.Embedding(vocab_size, embedding_dim,\n                                  batch_input_shape=[batch_size, None]),\n        tf.keras.layers.GRU(rnn_units,\n                            return_sequences=True,\n                            stateful=True,\n                            recurrent_initializer='glorot_uniform'),\n        tf.keras.layers.Dense(vocab_size)\n    ])\n    return model\n\nmodel = build_model(\n    vocab_size=len(vocab),\n    embedding_dim=embedding_dim,\n    rnn_units=rnn_units,\n    batch_size=BATCH_SIZE)\n\n","1d4f7066":"for input_example_batch, target_example_batch in dataset.take(1):\n    example_batch_predictions = model(input_example_batch)\n    print(example_batch_predictions.shape,\"# (batch_size, sequence_length, vocab_size)\")","f466d53a":"model.summary()","1bf5a179":"sampled_indices = tf.random.categorical(example_batch_predictions[0], num_samples=1)\nsampled_indices = tf.squeeze(sampled_indices,axis=-1).numpy()","141712ba":"sampled_indices","23e77480":"print(\"Input: \\n\", repr(\"\".join(idx2char[input_example_batch[0]])))\nprint()\nprint(\"Next Char Predictions: \\n\", repr(\"\".join(idx2char[sampled_indices ])))","82152aac":"def loss(labels, logits):\n    return tf.keras.losses.sparse_categorical_crossentropy(labels, logits, from_logits=True)\n\nexample_batch_loss = loss(target_example_batch, example_batch_predictions)\nprint(\"Prediction shape: \", example_batch_predictions.shape, \" # (batch_size, sequence_length, vocab_size)\")\nprint(\"scalar_loss:      \", example_batch_loss.numpy().mean())","1eafcf18":"model.compile(optimizer='adam', loss=loss, metrics=['accuracy'])","3ff99312":"\n\n# Directory where the checkpoints will be saved\ncheckpoint_dir = '.\/training_checkpoints\/'\n\n# Name of the checkpoint files\ncheckpoint_prefix = os.path.join(checkpoint_dir, \"ckpt_{epoch}\")\ncheckpoint_callback = tf.keras.callbacks.ModelCheckpoint(\n    filepath=checkpoint_prefix,\n    save_weights_only=True,\nmonitor ='val_accuracy')\n\n\nEPOCHS = 30\n\nhistory = model.fit(dataset, epochs=EPOCHS, callbacks=[checkpoint_callback])\n\n\n","da9dae0c":"tf.train.latest_checkpoint(checkpoint_dir)\n","ef4c23b1":"\nmodel = build_model(vocab_size, embedding_dim, rnn_units, batch_size=1)\n\nmodel.load_weights(tf.train.latest_checkpoint(checkpoint_dir))\n\nmodel.build(tf.TensorShape([1, None]))","2839b098":"model.summary()","a1a24714":"def generate_text(model, start_string, t):\n    # Evaluation step (generating text using the learned model)\n\n    # Number of characters to generate\n    num_generate = 450\n\n    # Converting our start string to numbers (vectorizing)\n    input_eval = [char2idx[s] for s in start_string]\n    input_eval = tf.expand_dims(input_eval, 0)\n\n    # Empty string to store our results\n    text_generated = []\n\n    # Low temperature results in more predictable text.\n    # Higher temperature results in more surprising text.\n    # Experiment to find the best setting.\n    temperature = t\n\n    # Here batch size == 1\n    model.reset_states()\n    for i in range(num_generate):\n        predictions = model(input_eval)\n        # remove the batch dimension\n        predictions = tf.squeeze(predictions, 0)\n\n        # using a categorical distribution to predict the character returned by the model\n        predictions = predictions \/ temperature\n        predicted_id = tf.random.categorical(predictions, num_samples=1)[-1,0].numpy()\n\n        # Pass the predicted character as the next input to the model\n        # along with the previous hidden state\n        input_eval = tf.expand_dims([predicted_id], 0)\n\n        text_generated.append(idx2char[predicted_id])\n        \n        #Attempt to present string in lyric format with new line after each capital letter\n        text_join = (start_string + ''.join(text_generated))\n        result = re.sub( r\"\\s(?=[A-Z])\", r\" \\n\", text_join)\n    return result\n    ","35123ae2":"print(generate_text(model, start_string= \"Mountain\", t = 0.4))","c910972b":"Decode these to see the text predicted by this untrained model:","07fa6f0e":"This gives us, at each timestep, a prediction of the next character index:\n\n","77f6aea8":"## Creating training batches\n\nSo we have now used tf.data to split the text into manageable sequences. But before feeding this data into the model, we need to shuffle the data and pack it into batches.","ec6512be":"Each index of these vectors is processed as a one time step. For the input at time step 0, the model receives the index for \"T\" and tries to predict the index for \"h\" as the next character. \n\nAt the next timestep, it does the same thing but the RNN considers the previous step context in addition to the current input character.\n\nHere is an example of what it is doing:\n","23e98bf8":"# Process the text\n\n## Vectorise the text\n\nBefore training, we need to map strings to a numerical representation. To do this, lets create two lookup tables: one mapping characters to numbers, and another for numbers to characters.","46797da8":"# Build the Model\n\n\nWords seen as vectors that need to be computed in the best way possible to capture the meaning of the word itself (this is called 'embedding').\n\nThis is where Gated Recurrent Units or GRUs come in. These are cells that are able to 'remember' a certain number of previous words in a clever way. \n\nFinally, we use a dense layer with the logit output that gives info about the most probable word expected.\n\n## Model Description\n\nUse tf.keras.Sequential to define the model. For this simple example three layers are used to define our model:\n\n1. tf.keras.layers.Embedding: The input layer. A trainable lookup table that will map the numbers of each character to a vector with embedding_dim dimensions;\n2. tf.keras.layers.GRU: A type of RNN with size units=rnn_units. (Can also use an LSTM layer here).\n3. tf.keras.layers.Dense: The output layer, with vocab_size outputs.","d62f8913":"For each sequence, duplicate and shift it to form the input and target text by using the map method to apply a simple function to each batch:","e67d6c79":"Configure checkpoints:\n\nUse a tf.keras.callbacks.ModelCheckpoint to ensure that weights are saved during training.\n\nThen we FIT THE DATA!\n","203e52ab":"## Create training examples and targets\n\nNext divide the text into example sequences. Each input sequence will contain seq_length characters from the text.\n\nFor each input sequence, the corresponding targets contain the same length of text, except shifted one character to the right.\n\nSo break the text into chunks of seq_length+1. For example, say seq_length is 4 and our text is \"Hello\". The input sequence would be \"Hell\", and the target sequence \"ello\".\n\nTo do this first use the tf.data.Dataset.from_tensor_slices function to convert the text vector into a stream of character indices.","ff9c02d2":"# Train the model\n\nAt this point the problem can be treated as a standard classification problem. Given the previous RNN state, and the input from this time step, the model predicts the class of the next character.\n\nWe also attach an optimizer, and a loss function.\n\nThe standard tf.keras.losses.sparse_categorical_crossentropy loss function works in this case because it is applied across the last dimension of the predictions.\n\nBecause the model returns logits, we need to set the from_logits flag.\n\n\n","72554865":"# Create the Training dataset\n","b68bfd99":"To get actual predictions from the model we need to sample from the output distribution, to get the correct character indices. This distribution is defined by the logits over the character vocabulary.\n\nLogits are the un-normalised raw predictions (outputs) of a model. We go on to use the softmax to compute the normalised score that each instance belongs to which class.\n\nNote: It is important to sample from this distribution as taking the argmax of the distribution can easily get the model stuck in a loop.\n\nHere is an example from the first batch:","f8e2d33e":"Now we configure the training procedure using the tf.keras.Model.compile method. Use tf.keras.optimizers.Adam with default arguments and the cross entropy loss function.","d2cc502e":"## The prediction loop\n\nThe following code block generates the lyric text.\n\nWe begin by choosing a start string, which initializes the RNN state, and also set the number of characters we want to generate.\n\nThen we get the prediction distribution of the next character using the start string and the RNN state.\n\nUsing a categorical distribution, the model calculates the index of the predicted character, which is then used as the next input to the model.\n\nThe RNN state returned by the model is fed back into the model so that it now has more context, instead of only one character. \n\nAfter predicting the next character, the modified RNN states are again fed back into the model, which is how it learns as it gets more context from the previously predicted characters.","85005bf9":"# Generate text\nRestore the latest checkpoint.\n\nTo keep this prediction step simple, use a batch size of 1.\n\nBecause of the way the RNN state is passed from timestep to timestep, the model only accepts a fixed batch size once built.\n\nTo run the model with a different batch_size, we would need to rebuild the model and restore the weights from the checkpoint.\n\n\n"}}