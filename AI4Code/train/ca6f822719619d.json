{"cell_type":{"4f233d51":"code","b47bdc8b":"code","6a9b18bf":"code","54d3b68f":"code","9336c006":"code","73e340ca":"code","8ae2fe8e":"code","ce343d6e":"code","e9ad13a3":"code","5a9d02ca":"code","3cb0dc45":"code","8503e307":"code","4b44e284":"code","4131bfeb":"code","43fb0e84":"code","5d41c1e0":"code","18f4d554":"code","d7548405":"code","5116c210":"markdown","daab73cc":"markdown","0199b816":"markdown"},"source":{"4f233d51":"import random\nfrom datetime import timedelta\n\n# storing and anaysis\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nimport folium\n\n\n\n# converter\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()   \n\n# hide warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Any results you write to the current directory are saved as output.","b47bdc8b":"df=pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv')\ndf['Date']=pd.to_datetime(df['Date'])\ndf.head(10)\nTurkey_df=df[df['Country\/Region']=='Turkey']\n","6a9b18bf":"\ntemp = df[df['Date'] == max(df['Date'])]\n\nm = folium.Map(location=[0, 0], tiles='cartodbpositron',\n               min_zoom=1, max_zoom=4, zoom_start=1)\n\nfor i in range(0, len(temp)):\n    folium.Circle(\n        location=[temp.iloc[i]['Lat'], temp.iloc[i]['Long']],\n        color='crimson', fill='crimson',\n        tooltip =   '<li><bold>Country : '+str(temp.iloc[i]['Country\/Region'])+\n                    '<li><bold>Province : '+str(temp.iloc[i]['Province\/State'])+\n                    '<li><bold>Confirmed : '+str(temp.iloc[i]['Confirmed'])+\n                    '<li><bold>Deaths : '+str(temp.iloc[i]['Deaths']),\n        radius=int(temp.iloc[i]['Confirmed'])**1.1).add_to(m)\nm","54d3b68f":"fig = px.choropleth(df, locations=\"Country\/Region\", locationmode='country names', color=np.log(df[\"Confirmed\"]), \n                    hover_name=\"Country\/Region\", animation_frame=df[\"Date\"].dt.strftime('%Y-%m-%d'),\n                    title='Cases over time', color_continuous_scale=px.colors.sequential.Magenta)\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","9336c006":"# Country wise\n# ============\n\n# getting latest values\ncountry_wise = df[df['Date']==max(df['Date'])].reset_index(drop=True).drop('Date', axis=1)\n\n# group by country\ncountry_wise = country_wise.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\n\n# per 100 cases\ncountry_wise['Deaths \/ 100 Cases'] = round((country_wise['Deaths']\/country_wise['Confirmed'])*100, 2)\ncountry_wise['Recovered \/ 100 Cases'] = round((country_wise['Recovered']\/country_wise['Confirmed'])*100, 2)\ncountry_wise['Deaths \/ 100 Recovered'] = round((country_wise['Deaths']\/country_wise['Recovered'])*100, 2)\n\ncols = ['Deaths \/ 100 Cases', 'Recovered \/ 100 Cases', 'Deaths \/ 100 Recovered']\ncountry_wise[cols] = country_wise[cols].fillna(0)\n\ndisplay(country_wise.head())\ndisplay(country_wise[country_wise['Country\/Region']=='Turkey'])","73e340ca":"# confirmed - deaths\nfig_c = px.bar(country_wise.sort_values('Confirmed').tail(15), x=\"Confirmed\", y=\"Country\/Region\", \n               text='Confirmed', orientation='h', color_discrete_sequence = ['#a3de83'])\nfig_d = px.bar(country_wise.sort_values('Deaths').tail(15), x=\"Deaths\", y=\"Country\/Region\", \n               text='Deaths', orientation='h', color_discrete_sequence = ['#f38181'])\n\n\n\n\n\n# plot\nfig = make_subplots(rows=1, cols=2, shared_xaxes=False, horizontal_spacing=0.14, vertical_spacing=0.08,\n                    subplot_titles=('Confirmed cases', 'Deaths reported'))\n\nfig.add_trace(fig_c['data'][0], row=1, col=1)\nfig.add_trace(fig_d['data'][0], row=1, col=2)\n\nfig.update_layout(height=500)","8ae2fe8e":"from IPython.core.display import HTML\nHTML('''<div class=\"flourish-embed flourish-bar-chart-race\" data-src=\"visualisation\/1571387\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","ce343d6e":"from datetime import date\nTurkey_df=Turkey_df[Turkey_df['Date']>date(2020,3,11)]\nplt.figure(figsize=(15,5))\nsns.barplot(x=Turkey_df['Date'].dt.strftime('%Y-%m-%d'), y=Turkey_df[\"Confirmed\"]-Turkey_df[\"Recovered\"]-Turkey_df[\"Deaths\"])\nplt.title(\"Distribution Plot for Active Cases Cases over Date\")\nplt.xticks(rotation=90)","e9ad13a3":"# color pallette\ncnf, dth, rec = '#ff7f00', '#ff2e63', '#21bf73'\n\ntemp = Turkey_df.groupby('Date')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\ntemp = temp[temp['Date']==max(temp['Date'])].reset_index(drop=True)\n\ntm = temp.melt(id_vars=\"Date\", value_vars=['Confirmed', 'Deaths', 'Recovered'])\nfig = px.treemap(tm, path=[\"variable\"], values=\"value\", height=225, width=1200,\n                 color_discrete_sequence=[cnf, rec, dth])\nfig.data[0].textinfo = 'label+text+value'\nfig.show()","5a9d02ca":"\nplt.figure(figsize=(16, 9))\nplt.plot(Turkey_df['Date'], Turkey_df['Confirmed'])\nplt.plot(Turkey_df['Date'], Turkey_df['Deaths'])\nplt.plot(Turkey_df['Date'], Turkey_df['Recovered'])\nplt.title('Coronavirus Cases in Turkey', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('Cases', size=30)\nplt.legend(['Confirmed', 'Deaths', 'Recovered'], prop={'size': 20})\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","3cb0dc45":"confirmed=Turkey_df[\"Confirmed\"]","8503e307":"import numpy as np\nconfirmed=Turkey_df[\"Confirmed\"].values\ngun_sayisi=len(Turkey_df[Turkey_df['Date']>date(2020,3,11)])\nx=np.arange(0 , gun_sayisi)\ngunluk_vaka=[]\nfor n in x:\n    gunluk_vaka.append(confirmed[x-n]-confirmed[x-n-1])\n    if n == 0:\n        gunluk_vaka[0][0]=1\n        break\nprint(gunluk_vaka)\nx=x.tolist()\ngunluk_vaka=gunluk_vaka[0].tolist()\nx=pd.Series(x)\ngunluk_vaka=pd.Series(gunluk_vaka)\nprint(x.shape)\nprint(gunluk_vaka.shape)","4b44e284":"import numpy as np\ngun_sayisi=len(Turkey_df[Turkey_df['Date']>date(2020,3,11)])\n\nx=x.values.reshape(-1,1)\ny=gunluk_vaka.values.reshape(-1,1)\nprint(x.shape)\nprint(y.shape)\n","4131bfeb":"plt.figure(figsize=(16, 9))\nplt.scatter(x,y)\nplt.xlabel(\"G\u00fcn Say\u0131s\u0131\")\nplt.ylabel(\"Vaka Say\u0131s\u0131\")\nplt.title(\"G\u00fcnl\u00fck Vaka Say\u0131s\u0131\")\nplt.show()","43fb0e84":"from sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\nPoly_reg=PolynomialFeatures(degree=5) #7. dereceden polinom \nx_poly=Poly_reg.fit_transform(x)\nLin_reg = LinearRegression()\nLin_reg.fit(x_poly,y)\n","5d41c1e0":"print(x_poly[:5])","18f4d554":"plt.figure(figsize=(16, 9))\nplt.scatter(x,y)\nplt.xlabel(\"G\u00fcn Say\u0131s\u0131\")\nplt.ylabel(\"Vaka Say\u0131s\u0131\")\nplt.title(\"Regresyon Modeli\")\ny_pred=Lin_reg.predict(x_poly)\nplt.plot(x,y_pred,color=\"green\",label=\"Polinom Linner Regresyon Model\")\nplt.legend()\nplt.show()\n","d7548405":"print(Lin_reg.intercept_)\nprint(Lin_reg.coef_)","5116c210":"***Distribution of coronavirus on the world***","daab73cc":"# [blog.osmanballi.com](https:\/\/blog.osmanballi.com\/)","0199b816":"***Turkey withdrew from the data of the dataset.***"}}