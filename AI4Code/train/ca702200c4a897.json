{"cell_type":{"2ad675a3":"code","b2399235":"code","7d08c3be":"code","d347989c":"code","e4272e01":"code","160c1d2b":"code","e3fd33a0":"code","7ec43ddd":"code","70fbac87":"code","2ec18aa0":"code","a1faae79":"code","eeabc3e9":"code","82d28530":"code","82529791":"code","078c9ca5":"code","60b19fb7":"code","545e83c2":"code","e2ea0ea9":"code","fce36c2c":"code","1d062f5d":"code","d31b7a67":"markdown","ed772ba2":"markdown","ccae4ce8":"markdown","5e5bb4cd":"markdown","ed80e07d":"markdown","c7e11e72":"markdown","2e3e9e89":"markdown","3f77d901":"markdown","7afce2da":"markdown"},"source":{"2ad675a3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","b2399235":"import seaborn as sns\nimport matplotlib.pyplot as plt\n# reading dataset\ndf=pd.read_csv('..\/input\/Admission_Predict_Ver1.1.csv')","7d08c3be":"display(df.head())\ndf.info()\ndisplay(df.describe())","d347989c":"#dividing into features and labels\nfeatures=df.iloc[:,1:-1]\nlabels=df.iloc[:,-1]\ndisplay(features[:5])\ndisplay(labels[:5])","e4272e01":"new_labels=pd.cut(np.array(labels),3, labels=[\"bad\", \"medium\", \"good\"])\nprint(new_labels.shape)\nnew_labels[:5]","160c1d2b":"from sklearn.preprocessing import StandardScaler","e3fd33a0":"# Normalizing the data\nstandardized_data=StandardScaler().fit_transform(features)\nstandardized_data[:5]","7ec43ddd":"print('NumPy covariance matrix: \\n%s' %np.cov(standardized_data.T))\ncov_mat = np.cov(standardized_data.T)","70fbac87":"#Calculating the eigen values and vectors\neig_vals, eig_vecs = np.linalg.eig(cov_mat)\n\nprint('Eigenvectors \\n%s' %eig_vecs)\nprint('\\nEigenvalues \\n%s' %eig_vals)","2ec18aa0":"# Make a list of (eigenvalue, eigenvector) tuples\neig_pairs = [(np.abs(eig_vals[i]), eig_vecs[:,i]) for i in range(len(eig_vals))]\n\n# Sort the (eigenvalue, eigenvector) tuples from high to low\neig_pairs.sort(key=lambda x: x[0], reverse=True)\n\n# Visually confirm that the list is correctly sorted by decreasing eigenvalues\nprint('Eigenvalues in descending order:')\nfor i in eig_pairs:\n    print(i[0])","a1faae79":"matrix_w = np.hstack((eig_pairs[0][1].reshape(7,1), \n                      eig_pairs[1][1].reshape(7,1)))\n\nprint('Matrix W:\\n', matrix_w)\n","eeabc3e9":"Y = standardized_data.dot(matrix_w)\n","82d28530":"Y.shape","82529791":"pca_data=np.vstack((Y.T,new_labels)).T\npca_df=pd.DataFrame(data=pca_data,columns=(\"1st Component\",\"2nd Component\",\"Chances of getting in?\"))\npca_df.head()","078c9ca5":"fig, ax = plt.subplots()\n# the size of A4 paper\nfig.set_size_inches(12, 8)\nsns.scatterplot(x=\"1st Component\", y=\"2nd Component\", hue=\"Chances of getting in?\", data=pca_df);","60b19fb7":"from sklearn import decomposition\npca=decomposition.PCA()","545e83c2":"pca.n_components=2\npca_data=pca.fit_transform(standardized_data)\nprint(\"The reduced shape is\", pca_data.shape)","e2ea0ea9":"pca_data[:5]","fce36c2c":"pca_data=np.vstack((pca_data.T,new_labels)).T\npca_df=pd.DataFrame(data=pca_data,columns=(\"1st Component\",\"2nd Component\",\"Chances of getting in?\"))\npca_df.head()","1d062f5d":"fig, ax = plt.subplots()\n# the size of A4 paper\nfig.set_size_inches(12, 8)\nsns.scatterplot(x=\"1st Component\", y=\"2nd Component\", hue=\"Chances of getting in?\", data=pca_df);","d31b7a67":"# Principal Component Analysis (PCA) is Easy","ed772ba2":"## Standardization\/Normalization of features","ccae4ce8":"## No Missing data, thats great!!","5e5bb4cd":"**Checking the data:**","ed80e07d":"# Don't know what is PCA? Check out Siraj's video on PCA [here](https:\/\/youtu.be\/jPmV3j1dAv4)","c7e11e72":"## Using the sklearn to perform PCA. sklearn is amazing, it has it all!","2e3e9e89":"## Loading libraries and input data","3f77d901":"# You can see the grouping already! Yayy!","7afce2da":"# PCA using only Numpy"}}