{"cell_type":{"11dbd134":"code","935f83e1":"code","850aeaeb":"code","01fee969":"code","ee0f93a4":"code","8c17fb0e":"code","ad6bc5e3":"code","cc4e3f22":"code","76c6f92f":"code","e099bae1":"code","6ebcd0ae":"code","d884529f":"code","8f58d011":"code","d688bc15":"code","49a5c855":"code","cdc016b8":"code","604817e5":"code","f7464085":"code","7f1c928a":"code","965027b1":"code","3c8333e2":"code","5202b4d3":"code","836cd46f":"code","062e05d1":"code","66d48891":"code","04c2b79c":"code","bf08f6dc":"code","d58dd5a7":"code","d81d7a19":"code","ac5608d1":"code","2fe7bf8d":"code","f90122c5":"code","69dfcac0":"code","31b474ba":"code","941f747f":"code","75d4467f":"code","7f1182fd":"code","5e2dd685":"code","14a1efc8":"code","6ec5deac":"code","4afc61b2":"markdown","dfaa81e1":"markdown","ba616027":"markdown","ca6bb7f8":"markdown","9e7e1cb0":"markdown","03593f07":"markdown","d95db993":"markdown","979d22ad":"markdown","99d5f156":"markdown"},"source":{"11dbd134":"%reload_ext autoreload\n%autoreload 2","935f83e1":"from fastai import *\nfrom fastai.tabular import *","850aeaeb":"path = Path('data\/rossmann\/')\ndest = path\ndest.mkdir(parents=True, exist_ok=True)","01fee969":"!cp -r ..\/input\/* {path}\/","ee0f93a4":"path.ls()","8c17fb0e":"train_df = pd.read_pickle(path\/'train_clean')","ad6bc5e3":"train_df.head().T","cc4e3f22":"n = len(train_df); n","76c6f92f":"idx = np.random.permutation(range(n))[:2000]\nidx.sort()\nsmall_train_df = train_df.iloc[idx[:1000]]\nsmall_test_df = train_df.iloc[idx[1000:]]\nsmall_cont_vars = ['CompetitionDistance', 'Mean_Humidity']\nsmall_cat_vars =  ['Store', 'DayOfWeek', 'PromoInterval']\nsmall_train_df = small_train_df[small_cat_vars + small_cont_vars + ['Sales']]\nsmall_test_df = small_test_df[small_cat_vars + small_cont_vars + ['Sales']]","e099bae1":"small_train_df.head()","6ebcd0ae":"small_test_df.head()","d884529f":"categorify = Categorify(small_cat_vars, small_cont_vars)\ncategorify(small_train_df)\ncategorify(small_test_df, test=True)","8f58d011":"small_test_df.head()","d688bc15":"small_train_df.PromoInterval.cat.categories","49a5c855":"small_train_df['PromoInterval'].cat.codes[:5]","cdc016b8":"fill_missing = FillMissing(small_cat_vars, small_cont_vars)\nfill_missing(small_train_df)\nfill_missing(small_test_df, test=True)","604817e5":"small_train_df[small_train_df['CompetitionDistance_na'] == True]","f7464085":"train_df = pd.read_pickle(path\/'train_clean')\ntest_df = pd.read_pickle(path\/'test_clean')","7f1c928a":"len(train_df),len(test_df)","965027b1":"procs=[FillMissing, Categorify, Normalize]","3c8333e2":"cat_vars = ['Store', 'DayOfWeek', 'Year', 'Month', 'Day', 'StateHoliday', 'CompetitionMonthsOpen',\n    'Promo2Weeks', 'StoreType', 'Assortment', 'PromoInterval', 'CompetitionOpenSinceYear', 'Promo2SinceYear',\n    'State', 'Week', 'Events', 'Promo_fw', 'Promo_bw', 'StateHoliday_fw', 'StateHoliday_bw',\n    'SchoolHoliday_fw', 'SchoolHoliday_bw']\n\ncont_vars = ['CompetitionDistance', 'Max_TemperatureC', 'Mean_TemperatureC', 'Min_TemperatureC',\n   'Max_Humidity', 'Mean_Humidity', 'Min_Humidity', 'Max_Wind_SpeedKm_h', \n   'Mean_Wind_SpeedKm_h', 'CloudCover', 'trend', 'trend_DE',\n   'AfterStateHoliday', 'BeforeStateHoliday', 'Promo', 'SchoolHoliday']","5202b4d3":"dep_var = 'Sales'\ndf = train_df[cat_vars + cont_vars + [dep_var,'Date']].copy()","836cd46f":"test_df['Date'].min(), test_df['Date'].max()","062e05d1":"cut = train_df['Date'][(train_df['Date'] == train_df['Date'][len(test_df)])].index.max()\ncut","66d48891":"valid_idx = range(cut)","04c2b79c":"df[dep_var].head()","bf08f6dc":"data = (TabularList.from_df(df, path=path, cat_names=cat_vars, cont_names=cont_vars, procs=procs)\n                   .split_by_idx(valid_idx)\n                   .label_from_df(cols=dep_var, label_cls=FloatList, log=True)\n                   .databunch())","d58dd5a7":"#doc(FloatList)","d81d7a19":"max_log_y = np.log(np.max(train_df['Sales'])*1.2)\ny_range = torch.tensor([0, max_log_y], device=defaults.device)","ac5608d1":"learn = tabular_learner(data, layers=[1000,500], ps=[0.001,0.01], emb_drop=0.04, \n                        y_range=y_range, metrics=exp_rmspe)","2fe7bf8d":"learn.model","f90122c5":"len(data.train_ds.cont_names)","69dfcac0":"learn.lr_find()","31b474ba":"learn.recorder.plot()","941f747f":"learn.fit_one_cycle(5, 1e-3, wd=0.2)","75d4467f":"learn.save('1')","7f1182fd":"learn.recorder.plot_losses(last=-1)","5e2dd685":"learn.load('1');","14a1efc8":"learn.fit_one_cycle(5, 3e-4)","6ec5deac":"learn.fit_one_cycle(5, 3e-4)","4afc61b2":"## Data preparation","dfaa81e1":"[Lesson Video Link](https:\/\/course.fast.ai\/videos\/?lesson=6)\n\n[Lesson resources and updates](https:\/\/forums.fast.ai\/t\/lesson-6-official-resources-and-updates\/31441)\n\n[Lesson chat](https:\/\/forums.fast.ai\/t\/lesson-6-in-class-discussion\/31440)\n\n[Further discussion thread](https:\/\/forums.fast.ai\/t\/lesson-6-advanced-discussion\/31442)\n\nNote: This is a mirror of the FastAI Lesson 6 Nb. \nPlease thank the amazing team behind fast.ai for creating these, I've merely created a mirror of the same here\nFor complete info on the course, visit course.fast.ai","ba616027":"## Model","ca6bb7f8":"## fin","9e7e1cb0":"(10th place in the competition was 0.108)","03593f07":"To create the feature-engineered train_clean and test_clean from the Kaggle competition data, run `rossman_data_clean.ipynb`. One important step that deals with time series is this:\n\n```python\nadd_datepart(train, \"Date\", drop=False)\nadd_datepart(test, \"Date\", drop=False)\n```","d95db993":"### Experimenting with a sample","979d22ad":"# Rossmann","99d5f156":"### Preparing full data set"}}