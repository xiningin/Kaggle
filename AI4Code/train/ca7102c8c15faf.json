{"cell_type":{"74f17b94":"code","72de1a02":"code","ef6ac383":"code","ffe5159e":"code","5a3e1abf":"code","97ef9ff2":"code","f4f71b14":"code","8036f18d":"code","97176602":"code","9805dfb6":"code","62dece89":"code","7b48e1a6":"code","8d262644":"code","15ba7702":"code","f22f2d07":"code","735227ef":"code","d7fdc795":"code","cefccaf1":"code","e94fc7a9":"code","81487c47":"code","7948c171":"code","80292051":"code","d67f51b6":"code","cb2f6584":"code","9339f947":"code","3ca315f1":"code","58df35a4":"code","b78008b2":"code","ccdaa785":"markdown","13b97b00":"markdown","47d8c97d":"markdown","6388eb45":"markdown","9771e9a3":"markdown","11e0bb38":"markdown","08092354":"markdown","1d1442b9":"markdown","44a7d4c0":"markdown","18627609":"markdown","70a1adce":"markdown","33b2360b":"markdown","ab6f7840":"markdown","9982bf61":"markdown"},"source":{"74f17b94":"import pandas as pd\nimport numpy as np\nimport matplotlib.pylab as plt\nimport warnings\n\nwarnings.simplefilter('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nprint(\"=\"*100)\nprint(\"Ready to launch!!!!\")\nprint(\"=\"*100)","72de1a02":"house_data = pd.read_csv(\"..\/input\/house-price-tehran-iran\/housePrice.csv\") # Load Data","ef6ac383":"house_data.head() # Checking the first 5 rows of Data","ffe5159e":"house_data.tail() # Checking the last 5 rows of Data","5a3e1abf":"house_data.dtypes.to_frame() # Checking the type of Data","97ef9ff2":"house_data.isna().mean().to_frame() # Let's hunt the null value","f4f71b14":"house_data.info() # getting the infomation","8036f18d":"house_data['Address'] = house_data['Address'].fillna(house_data['Address'].mode()[0]) # Fill it with mode\/modus","97176602":"house_data.isna().mean() # Check the data again","9805dfb6":"from sklearn.preprocessing import LabelEncoder # Let's encode the data\n\nencoder = LabelEncoder() # Let's gooo!!!","62dece89":"for i in house_data.columns: # A for loop to encode our object data\n    if house_data[i].dtype == 'object':\n        encoder.fit_transform(list(house_data[i].values))\n        house_data[i] = encoder.transform(house_data[i].values)\n        \nfor j in house_data.columns: # A for loop to change the type of data\n    if house_data[j].dtype == 'bool':\n        house_data[j] = house_data[j].astype('int64')","7b48e1a6":"house_data.head() # Check the first 5 rows of data","8d262644":"house_data.tail() # Check the last 5 rows of data","15ba7702":"house_data.dtypes.to_frame() # Check the type of data","f22f2d07":"X = house_data.drop(['Price', 'Price(USD)'], axis=1) # X data\ny = house_data['Price(USD)'] # y data","735227ef":"f\"Shape of X : {X.shape}, Shape of y : {y.shape}, Price : {y.sum()}\" # Checking the shape","d7fdc795":"plt.hist(X, 30) # Plot the X Data\nplt.show()","cefccaf1":"plt.hist(y, 30) # Plot the Data y\nplt.show()","e94fc7a9":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=42\n)","81487c47":"from sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import mean_absolute_error, r2_score\nfrom sklearn.pipeline import Pipeline","7948c171":"model = KNeighborsRegressor().fit(X_test, y_test) # Model And Fit\n\npipe = Pipeline([ # Pipeline\n    ('scaler', StandardScaler()), # Our Scaler\n    ('model', KNeighborsRegressor(n_neighbors=1)) # Our Model\n])\n\npipe.fit(X_test, y_test)","80292051":"pred = pipe.predict(X_test)","d67f51b6":"print(f\"MAE : {mean_absolute_error(pred, y_test)}\")\nprint(f'R-2 : {r2_score(pred, y_test)}')","cb2f6584":"# Predicted Value & Actual Value\ntest = pd.DataFrame({'Predicted value':pred, 'Actual value':y_test})\nfig= plt.figure(figsize=(17, 5))\ntest = test.reset_index()\ntest = test.drop(['index'],axis=1)\nplt.plot(test[:50])\nplt.legend(['Actual value','Predicted value']);","9339f947":"output = pd.DataFrame({\n    'Train Actual Price': y_test,\n    'Train Predicted Price ': pred})\n\noutput.to_csv('prediction.csv', index=False)","3ca315f1":"prediction = pd.read_csv('.\/prediction.csv')\nprediction.head(10)","58df35a4":"X.head()","b78008b2":"input_data = (219, 2, 1, 1, 1, 117) # input your data here\n\n# Changing the data type to numpy array\nchange_input = np.asarray(input_data)\n\n# Reshape the numpy array as we are predicting for one instance\nreshape_array = change_input.reshape(1, -1)\n\npreds = model.predict(reshape_array)\nprint(f'The price of this house is : {preds}$')","ccdaa785":"> **okay, since the missing value is not really big, i think there's 20 - 30 missing value in address since the percentage of address is 0.006611%, let's fill it with the data that appears most often.**","13b97b00":"# **Data Preprocessing**","47d8c97d":"# **Model Evaluate**","6388eb45":"> **Okay, everything looks fine now, and let's encode and change the type of our data.**","9771e9a3":"# **Split Data**","11e0bb38":"> **Okay, now the data is ready.**","08092354":"# **Modelling**","1d1442b9":"> **As you can see, there's so many outlier**","44a7d4c0":"> **That's it! don't forget to give me feedback and upvote if you like it! thanks in advance!**","18627609":"# **Make A Predictive System**","70a1adce":"# **Divide Data**","33b2360b":"# **Load Data**","ab6f7840":"# **Import Libraries**","9982bf61":"### **Desc :**\n\n- Area\n- Room\n- Parking : {1.0: True, 0.0: False}\n- Elevator : {1.0: True, 0.0: False}\n- Address\n\ninput_data = (Area, Room, Parking, Elevator, Address)"}}