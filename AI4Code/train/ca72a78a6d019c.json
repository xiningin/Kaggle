{"cell_type":{"677def4c":"code","6a6c2fc2":"code","27b1b6ea":"code","63b64057":"code","0f5c3bf2":"code","8a6109bf":"code","fba0ff45":"code","0f30ed1c":"code","beceff45":"code","d3a42d0e":"code","d06696e9":"code","b0a21823":"code","857ec9eb":"code","6bdb6a63":"code","c30dce60":"code","131f26ad":"code","a7e8b80f":"code","f99d03b6":"code","50aa5181":"code","549e43b4":"code","89ded5eb":"code","654e47e9":"code","35a615c7":"code","ae0689de":"code","261ee2ae":"code","ca000184":"code","ba5554af":"code","edfb8dd6":"code","63668e3a":"code","e26d76e2":"code","944be81f":"code","1985c3fb":"code","0921b3c9":"code","4e4ca311":"code","1f845b1b":"code","386b0a9a":"code","f434260b":"code","9f4511eb":"code","10b9a540":"code","bd985925":"code","a37328f0":"code","57417e7b":"code","506185c8":"code","7ea62194":"code","9d1e5152":"code","a50e5918":"code","acf41583":"markdown"},"source":{"677def4c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\n\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6a6c2fc2":"train=pd.read_csv(\"\/kaggle\/input\/datamaestro2020\/astro_train.csv\")\ntest=pd.read_csv(\"\/kaggle\/input\/datamaestro2020\/astro_test.csv\")\nsub=pd.read_csv(\"\/kaggle\/input\/datamaestro2020\/sample_submission.csv\")","27b1b6ea":"train.head()","63b64057":"train.columns","0f5c3bf2":"import matplotlib.pyplot as plt\nvisible_band = ['dered_u', 'dered_g', 'dered_i', 'dered_r', 'dered_z']\nax=[]\nfor i,band in enumerate(visible_band):\n    fig1 = plt.figure()\n    ax.append(fig1.add_subplot(3,2,i+1))\n    ax[i].hist(train[band])\n    ax[i].set_title(band)\nplt.show()","8a6109bf":"train['dered_i'].describe()\n","fba0ff45":"features =['dered_u', 'dered_g', 'dered_i', 'dered_r', 'dered_z','#ra', 'dec','class']\nfor feature in features:\n    total_objects = sum(train[feature]!=-9999)\n    print(\"The number of objects for feature: %s is %d\"%(feature,total_objects))","0f30ed1c":"train['ug'] = train['dered_u'] - train['dered_g']\ntrain['gr'] = train['dered_g'] - train['dered_r']\ntrain['ri'] = train['dered_r'] - train['dered_i']\ntrain['iz'] = train['dered_i'] - train['dered_z']","beceff45":"del train['dered_u']\ndel train['dered_g']\ndel train['dered_r']\ndel train['dered_i']\ndel train[\"dered_z\"]","d3a42d0e":"test['ug'] = test['dered_u'] - test['dered_g']\ntest['gr'] = test['dered_g'] - test['dered_r']\ntest['ri'] = test['dered_r'] - test['dered_i']\ntest['iz'] = test['dered_i'] - test['dered_z']","d06696e9":"del test['dered_u']\ndel test['dered_g']\ndel test['dered_r']\ndel test['dered_i']\ndel test[\"dered_z\"]","b0a21823":"train[\"class\"].value_counts()","857ec9eb":"train.shape","6bdb6a63":"train.isnull().sum()","c30dce60":"import seaborn as sns\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(20,20))\nsns.heatmap(train.corr(),annot=True)","131f26ad":"train[\"skyVersion\"].value_counts()","a7e8b80f":"train[\"rerun\"].value_counts()","f99d03b6":"del train[\"skyVersion\"]\ndel train[\"rerun\"]","50aa5181":"del test[\"skyVersion\"]\ndel test[\"rerun\"]","549e43b4":"del train[\"id\"]\ndel test[\"id\"]","89ded5eb":"#del train[\"run\"]\n#del test[\"run\"]","654e47e9":"#del train[\"#ra\"]\n#del test[\"#ra\"]","35a615c7":"#del train[\"dec\"]\n#del test[\"dec\"]","ae0689de":"#del train[\"camCol\"]\n#del test[\"camCol\"]","261ee2ae":"#train[\"run\"]=train[\"run\"].replace([752,745],[1,0])\n#train[\"camCol\"]=train[\"camCol\"].replace([2,3,1],[3,2,1])","ca000184":"#test[\"run\"]=test[\"run\"].replace([752,745],[1,0])\n#test[\"camCol\"]=test[\"camCol\"].replace([2,3,1],[3,2,1])","ba5554af":"from sklearn.decomposition import PCA\n\n\npca = PCA(n_components=3)\n\n\n#Training data\npc = pca.fit_transform(train[['camCol','field','obj','#ra','dec']])\ntrain = pd.concat((train, pd.DataFrame(pc)), axis=1)\ntrain.rename({0: 'pca_1', 1: 'pca_2', 2: 'pca_3'}, axis=1, inplace = True)\ntrain.drop(['camCol','field','obj','#ra', 'dec'], axis = 1, inplace=True)\n\n#Testing data\npc1 = pca.fit_transform(test[['camCol', 'field','obj','#ra','dec']])\ntest = pd.concat((test, pd.DataFrame(pc1)), axis=1)\ntest.rename({0: 'pca_1', 1: 'pca_2',2: 'pca_3'}, axis=1, inplace = True)\ntest.drop(['camCol', 'field','obj','#ra', 'dec'], axis = 1, inplace=True)\n\n'''pca = PCA(n_components=5)\n\n\n#Training data\npc = pca.fit_transform(train[['run', '#ra', 'dec', 'camCol', 'field','obj','extinction_r']])\ntrain = pd.concat((train, pd.DataFrame(pc)), axis=1)\ntrain.rename({0: 'pca_1', 1: 'pca_2', 2: 'pca_3',3: 'pca_4',4:'pca_5'}, axis=1, inplace = True)\ntrain.drop(['run', '#ra', 'dec', 'camCol', 'field','obj','extinction_r'], axis = 1, inplace=True)\n\n#Testing data\npc1 = pca.fit_transform(test[['run', '#ra', 'dec', 'camCol', 'field','obj','extinction_r']])\ntest = pd.concat((test, pd.DataFrame(pc1)), axis=1)\ntest.rename({0: 'pca_1', 1: 'pca_2', 2: 'pca_3',3: 'pca_4',4:'pca_5'}, axis=1, inplace = True)\ntest.drop(['run', '#ra', 'dec', 'camCol', 'field','obj','extinction_r'], axis = 1, inplace=True)'''\n\n","edfb8dd6":"'''#Training data\npca_error = PCA(n_components=2)\npc_er = pca_error.fit_transform(train[['err_i', 'err_z', 'err_r']])\ntrain = pd.concat((train, pd.DataFrame(pc_er)), axis=1)\ntrain.rename({0: 'err_1', 1: 'err_2'}, axis=1, inplace = True)\ntrain.drop(['err_i', 'err_z', 'err_r'], axis = 1, inplace=True)\n\n#Testing data\npca_error1 = PCA(n_components=2)\npc_er1 = pca_error1.fit_transform(test[['err_i', 'err_z', 'err_r']])\ntest = pd.concat((test, pd.DataFrame(pc_er1)), axis=1)\ntest.rename({0: 'err_1', 1: 'err_2'}, axis=1, inplace = True)\ntest.drop(['err_i', 'err_z', 'err_r'], axis = 1, inplace=True)'''","63668e3a":"train.head(1)","e26d76e2":"import seaborn as sns\n#sns.heatmap(train.corr())\ncorr=train.corr()\ncorr.style.background_gradient()","944be81f":"y=train[\"class\"]\ndel train[\"class\"]\nx=train","1985c3fb":"print(train.shape , test.shape , x.shape)","0921b3c9":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3)","4e4ca311":"from sklearn.linear_model import LassoCV\nreg = LassoCV()\nreg.fit(x_train,y_train)\nprint(\"Best alpha using built-in LassoCV: %f\" % reg.alpha_)\nprint(\"Best score using built-in LassoCV: %f\" %reg.score(x_train,y_train))\ncoef = pd.Series(reg.coef_, index = x_train.columns)\nprint(\"Lasso picked \" + str(sum(coef != 0)) + \" variables and eliminated the other \" +  str(sum(coef == 0)) + \" variables\")\n\nimp_coef = coef.sort_values()\nimport matplotlib\nmatplotlib.rcParams['figure.figsize'] = (8,8)\nimp_coef.plot(kind = \"barh\")\nplt.title(\"Feature importance using Lasso Model\")","1f845b1b":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix\nscaler = StandardScaler()\nx_train1 = scaler.fit_transform(x_train)\nx_test1 = scaler.transform(x_test)","386b0a9a":"from sklearn import linear_model\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import svm","f434260b":"from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, ExtraTreesClassifier, VotingClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV, cross_val_score, StratifiedKFold, learning_curve\n","9f4511eb":"classifier = RandomForestClassifier( n_estimators = 600,\n                                    random_state = 42)\nclassifier.fit(x_train1, y_train)","10b9a540":"pred = classifier.predict(x_test1)","bd985925":"from sklearn.metrics import confusion_matrix as cm\nprint(cm(pred,y_test))","a37328f0":"from sklearn.metrics import f1_score as f1\nprint(f1(pred,y_test,average=None))","57417e7b":"from sklearn import metrics \nprint(\"Acc :\",metrics.accuracy_score(y_test,pred))","506185c8":"test = scaler.transform(test)\npred1=classifier.predict(test)","7ea62194":"sub[\"class\"]=pred1","9d1e5152":"sub.head()","a50e5918":"sub.to_csv('sub1.csv',index=False)\nfrom IPython.display import FileLink\nFileLink(r'sub1.csv')","acf41583":"**Random Forest Classifier**"}}