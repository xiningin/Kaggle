{"cell_type":{"f1021cc3":"code","fbb36d69":"code","e1eb410a":"code","e3c91d94":"code","0643be4b":"code","03c6b3fd":"code","82e25321":"code","47ec652e":"code","721c764f":"code","a2d7b3fe":"code","9171e0e5":"code","55968bc2":"markdown","0081d66e":"markdown","10c19664":"markdown","63933ecd":"markdown","ad7a6720":"markdown","608aa8b4":"markdown","c26ce2a3":"markdown","a7199b14":"markdown","7affb551":"markdown","3fb51bc7":"markdown"},"source":{"f1021cc3":"import plotly.graph_objects as go\nfrom plotly.offline import init_notebook_mode, iplot\nimport pandas as pd \n\ndf = pd.read_csv(\"..\/input\/amazon-prime-movies-and-tv-shows\/amazon_prime_titles.csv\")\n\n## add new features in the dataset\ndf[\"date_added\"] = pd.to_datetime(df['date_added'])\ndf['year_added'] = df['date_added'].dt.year\ndf['month_added'] = df['date_added'].dt.month\n\ndf['season_count'] = df.apply(lambda x : x['duration'].split(\" \")[0] if \"Season\" in x['duration'] else \"\", axis = 1)\ndf['duration'] = df.apply(lambda x : x['duration'].split(\" \")[0] if \"Season\" not in x['duration'] else \"\", axis = 1)\ndf.head()","fbb36d69":"col = \"type\"\ngrouped = df[col].value_counts().reset_index()\ngrouped = grouped.rename(columns = {col : \"count\", \"index\" : col})\n\n## plot\ntrace = go.Pie(labels=grouped[col], values=grouped['count'], pull=[0.05, 0], marker=dict(colors=[\"#6ad49b\", \"#a678de\"]))\nlayout = go.Layout(title=\"\", height=400, legend=dict(x=0.1, y=1.1))\nfig = go.Figure(data = [trace], layout = layout)\niplot(fig)","e1eb410a":"d1 = df[df[\"type\"] == \"TV Show\"]\nd2 = df[df[\"type\"] == \"Movie\"]\n\ncol = \"release_year\"\n\nvc1 = d1[col].value_counts().reset_index()\nvc1 = vc1.rename(columns = {col : \"count\", \"index\" : col})\nvc1['percent'] = vc1['count'].apply(lambda x : 100*x\/sum(vc1['count']))\nvc1 = vc1.sort_values(col)\n\nvc2 = d2[col].value_counts().reset_index()\nvc2 = vc2.rename(columns = {col : \"count\", \"index\" : col})\nvc2['percent'] = vc2['count'].apply(lambda x : 100*x\/sum(vc2['count']))\nvc2 = vc2.sort_values(col)\n\ntrace1 = go.Bar(x=vc1[col], y=vc1[\"count\"], name=\"TV Shows\", marker=dict(color=\"#a678de\"))\ntrace2 = go.Bar(x=vc2[col], y=vc2[\"count\"], name=\"Movies\", marker=dict(color=\"#6ad49b\"))\ndata = [trace1, trace2]\nlayout = go.Layout(title=\"Content added over the years\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","e3c91d94":"col = 'month_added'\nvc1 = d1[col].value_counts().reset_index()\nvc1 = vc1.rename(columns = {col : \"count\", \"index\" : col})\nvc1['percent'] = vc1['count'].apply(lambda x : 100*x\/sum(vc1['count']))\nvc1 = vc1.sort_values(col)\n\ntrace1 = go.Bar(x=vc1[col], y=vc1[\"count\"], name=\"TV Shows\", marker=dict(color=\"#a678de\"))\ndata = [trace1]\nlayout = go.Layout(title=\"In which month, the conent is added the most?\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","0643be4b":"small = df.sort_values(\"release_year\", ascending = True)\nsmall = small[small['duration'] != \"\"]\nsmall[['title', \"release_year\"]][:15]","03c6b3fd":"small = df.sort_values(\"release_year\", ascending = True)\nsmall = small[small['season_count'] != \"\"]\nsmall[['title', \"release_year\"]][:15]","82e25321":"country_codes = {'afghanistan': 'AFG',\n 'albania': 'ALB',\n 'algeria': 'DZA',\n 'american samoa': 'ASM',\n 'andorra': 'AND',\n 'angola': 'AGO',\n 'anguilla': 'AIA',\n 'antigua and barbuda': 'ATG',\n 'argentina': 'ARG',\n 'armenia': 'ARM',\n 'aruba': 'ABW',\n 'australia': 'AUS',\n 'austria': 'AUT',\n 'azerbaijan': 'AZE',\n 'bahamas': 'BHM',\n 'bahrain': 'BHR',\n 'bangladesh': 'BGD',\n 'barbados': 'BRB',\n 'belarus': 'BLR',\n 'belgium': 'BEL',\n 'belize': 'BLZ',\n 'benin': 'BEN',\n 'bermuda': 'BMU',\n 'bhutan': 'BTN',\n 'bolivia': 'BOL',\n 'bosnia and herzegovina': 'BIH',\n 'botswana': 'BWA',\n 'brazil': 'BRA',\n 'british virgin islands': 'VGB',\n 'brunei': 'BRN',\n 'bulgaria': 'BGR',\n 'burkina faso': 'BFA',\n 'burma': 'MMR',\n 'burundi': 'BDI',\n 'cabo verde': 'CPV',\n 'cambodia': 'KHM',\n 'cameroon': 'CMR',\n 'canada': 'CAN',\n 'cayman islands': 'CYM',\n 'central african republic': 'CAF',\n 'chad': 'TCD',\n 'chile': 'CHL',\n 'china': 'CHN',\n 'colombia': 'COL',\n 'comoros': 'COM',\n 'congo democratic': 'COD',\n 'Congo republic': 'COG',\n 'cook islands': 'COK',\n 'costa rica': 'CRI',\n \"cote d'ivoire\": 'CIV',\n 'croatia': 'HRV',\n 'cuba': 'CUB',\n 'curacao': 'CUW',\n 'cyprus': 'CYP',\n 'czech republic': 'CZE',\n 'denmark': 'DNK',\n 'djibouti': 'DJI',\n 'dominica': 'DMA',\n 'dominican republic': 'DOM',\n 'ecuador': 'ECU',\n 'egypt': 'EGY',\n 'el salvador': 'SLV',\n 'equatorial guinea': 'GNQ',\n 'eritrea': 'ERI',\n 'estonia': 'EST',\n 'ethiopia': 'ETH',\n 'falkland islands': 'FLK',\n 'faroe islands': 'FRO',\n 'fiji': 'FJI',\n 'finland': 'FIN',\n 'france': 'FRA',\n 'french polynesia': 'PYF',\n 'gabon': 'GAB',\n 'gambia, the': 'GMB',\n 'georgia': 'GEO',\n 'germany': 'DEU',\n 'ghana': 'GHA',\n 'gibraltar': 'GIB',\n 'greece': 'GRC',\n 'greenland': 'GRL',\n 'grenada': 'GRD',\n 'guam': 'GUM',\n 'guatemala': 'GTM',\n 'guernsey': 'GGY',\n 'guinea-bissau': 'GNB',\n 'guinea': 'GIN',\n 'guyana': 'GUY',\n 'haiti': 'HTI',\n 'honduras': 'HND',\n 'hong kong': 'HKG',\n 'hungary': 'HUN',\n 'iceland': 'ISL',\n 'india': 'IND',\n 'indonesia': 'IDN',\n 'iran': 'IRN',\n 'iraq': 'IRQ',\n 'ireland': 'IRL',\n 'isle of man': 'IMN',\n 'israel': 'ISR',\n 'italy': 'ITA',\n 'jamaica': 'JAM',\n 'japan': 'JPN',\n 'jersey': 'JEY',\n 'jordan': 'JOR',\n 'kazakhstan': 'KAZ',\n 'kenya': 'KEN',\n 'kiribati': 'KIR',\n 'north korea': 'PRK',\n 'south korea': 'KOR',\n 'kosovo': 'KSV',\n 'kuwait': 'KWT',\n 'kyrgyzstan': 'KGZ',\n 'laos': 'LAO',\n 'latvia': 'LVA',\n 'lebanon': 'LBN',\n 'lesotho': 'LSO',\n 'liberia': 'LBR',\n 'libya': 'LBY',\n 'liechtenstein': 'LIE',\n 'lithuania': 'LTU',\n 'luxembourg': 'LUX',\n 'macau': 'MAC',\n 'macedonia': 'MKD',\n 'madagascar': 'MDG',\n 'malawi': 'MWI',\n 'malaysia': 'MYS',\n 'maldives': 'MDV',\n 'mali': 'MLI',\n 'malta': 'MLT',\n 'marshall islands': 'MHL',\n 'mauritania': 'MRT',\n 'mauritius': 'MUS',\n 'mexico': 'MEX',\n 'micronesia': 'FSM',\n 'moldova': 'MDA',\n 'monaco': 'MCO',\n 'mongolia': 'MNG',\n 'montenegro': 'MNE',\n 'morocco': 'MAR',\n 'mozambique': 'MOZ',\n 'namibia': 'NAM',\n 'nepal': 'NPL',\n 'netherlands': 'NLD',\n 'new caledonia': 'NCL',\n 'new zealand': 'NZL',\n 'nicaragua': 'NIC',\n 'nigeria': 'NGA',\n 'niger': 'NER',\n 'niue': 'NIU',\n 'northern mariana islands': 'MNP',\n 'norway': 'NOR',\n 'oman': 'OMN',\n 'pakistan': 'PAK',\n 'palau': 'PLW',\n 'panama': 'PAN',\n 'papua new guinea': 'PNG',\n 'paraguay': 'PRY',\n 'peru': 'PER',\n 'philippines': 'PHL',\n 'poland': 'POL',\n 'portugal': 'PRT',\n 'puerto rico': 'PRI',\n 'qatar': 'QAT',\n 'romania': 'ROU',\n 'russia': 'RUS',\n 'rwanda': 'RWA',\n 'saint kitts and nevis': 'KNA',\n 'saint lucia': 'LCA',\n 'saint martin': 'MAF',\n 'saint pierre and miquelon': 'SPM',\n 'saint vincent and the grenadines': 'VCT',\n 'samoa': 'WSM',\n 'san marino': 'SMR',\n 'sao tome and principe': 'STP',\n 'saudi arabia': 'SAU',\n 'senegal': 'SEN',\n 'serbia': 'SRB',\n 'seychelles': 'SYC',\n 'sierra leone': 'SLE',\n 'singapore': 'SGP',\n 'sint maarten': 'SXM',\n 'slovakia': 'SVK',\n 'slovenia': 'SVN',\n 'solomon islands': 'SLB',\n 'somalia': 'SOM',\n 'south africa': 'ZAF',\n 'south sudan': 'SSD',\n 'spain': 'ESP',\n 'sri lanka': 'LKA',\n 'sudan': 'SDN',\n 'suriname': 'SUR',\n 'swaziland': 'SWZ',\n 'sweden': 'SWE',\n 'switzerland': 'CHE',\n 'syria': 'SYR',\n 'taiwan': 'TWN',\n 'tajikistan': 'TJK',\n 'tanzania': 'TZA',\n 'thailand': 'THA',\n 'timor-leste': 'TLS',\n 'togo': 'TGO',\n 'tonga': 'TON',\n 'trinidad and tobago': 'TTO',\n 'tunisia': 'TUN',\n 'turkey': 'TUR',\n 'turkmenistan': 'TKM',\n 'tuvalu': 'TUV',\n 'uganda': 'UGA',\n 'ukraine': 'UKR',\n 'united arab emirates': 'ARE',\n 'united kingdom': 'GBR',\n 'united states': 'USA',\n 'uruguay': 'URY',\n 'uzbekistan': 'UZB',\n 'vanuatu': 'VUT',\n 'venezuela': 'VEN',\n 'vietnam': 'VNM',\n 'virgin islands': 'VGB',\n 'west bank': 'WBG',\n 'yemen': 'YEM',\n 'zambia': 'ZMB',\n 'zimbabwe': 'ZWE'}\n\n## countries \nfrom collections import Counter\ncolorscale = [\"#f7fbff\", \"#ebf3fb\", \"#deebf7\", \"#d2e3f3\", \"#c6dbef\", \"#b3d2e9\", \"#9ecae1\",\n    \"#85bcdb\", \"#6baed6\", \"#57a0ce\", \"#4292c6\", \"#3082be\", \"#2171b5\", \"#1361a9\",\n    \"#08519c\", \"#0b4083\", \"#08306b\"\n]\n    \ndef geoplot(ddf):\n    country_with_code, country = {}, {}\n    shows_countries = \", \".join(ddf['country'].dropna()).split(\", \")\n    for c,v in dict(Counter(shows_countries)).items():\n        code = \"\"\n        if c.lower() in country_codes:\n            code = country_codes[c.lower()]\n        country_with_code[code] = v\n        country[c] = v\n\n    data = [dict(\n            type = 'choropleth',\n            locations = list(country_with_code.keys()),\n            z = list(country_with_code.values()),\n            colorscale = [[0,\"rgb(5, 10, 172)\"],[0.65,\"rgb(40, 60, 190)\"],[0.75,\"rgb(70, 100, 245)\"],\\\n                        [0.80,\"rgb(90, 120, 245)\"],[0.9,\"rgb(106, 137, 247)\"],[1,\"rgb(220, 220, 220)\"]],\n            autocolorscale = False,\n            reversescale = True,\n            marker = dict(\n                line = dict (\n                    color = 'gray',\n                    width = 0.5\n                ) ),\n            colorbar = dict(\n                autotick = False,\n                title = ''),\n          ) ]\n\n    layout = dict(\n        title = '',\n        geo = dict(\n            showframe = False,\n            showcoastlines = False,\n            projection = dict(\n                type = 'Mercator'\n            )\n        )\n    )\n\n    fig = dict( data=data, layout=layout )\n    iplot( fig, validate=False, filename='d3-world-map' )\n    return country\n\ncountry_vals = geoplot(df)\ntabs = Counter(country_vals).most_common(25)\n\nlabels = [_[0] for _ in tabs][::-1]\nvalues = [_[1] for _ in tabs][::-1]\ntrace1 = go.Bar(y=labels, x=values, orientation=\"h\", name=\"\", marker=dict(color=\"#a678de\"))\n\ndata = [trace1]\nlayout = go.Layout(title=\"Countries with most content\", height=700, legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","47ec652e":"import plotly.figure_factory as ff\nx1 = d2['duration'].fillna(0.0).astype(float)\nfig = ff.create_distplot([x1], ['a'], bin_size=0.7, curve_type='normal', colors=[\"#6ad49b\"])\nfig.update_layout(title_text='Distplot with Normal Distribution')\nfig.show()","721c764f":"col = 'season_count'\nvc1 = d1[col].value_counts().reset_index()\nvc1 = vc1.rename(columns = {col : \"count\", \"index\" : col})\nvc1['percent'] = vc1['count'].apply(lambda x : 100*x\/sum(vc1['count']))\nvc1 = vc1.sort_values(col)\n\ntrace1 = go.Bar(x=vc1[col], y=vc1[\"count\"], name=\"TV Shows\", marker=dict(color=\"#a678de\"))\ndata = [trace1]\nlayout = go.Layout(title=\"Seasons\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","a2d7b3fe":"col = \"rating\"\n\nvc1 = d1[col].value_counts().reset_index()\nvc1 = vc1.rename(columns = {col : \"count\", \"index\" : col})\nvc1['percent'] = vc1['count'].apply(lambda x : 100*x\/sum(vc1['count']))\nvc1 = vc1.sort_values(col)\n\nvc2 = d2[col].value_counts().reset_index()\nvc2 = vc2.rename(columns = {col : \"count\", \"index\" : col})\nvc2['percent'] = vc2['count'].apply(lambda x : 100*x\/sum(vc2['count']))\nvc2 = vc2.sort_values(col)\n\ntrace1 = go.Bar(x=vc1[col], y=vc1[\"count\"], name=\"TV Shows\", marker=dict(color=\"#a678de\"))\ntrace2 = go.Bar(x=vc2[col], y=vc2[\"count\"], name=\"Movies\", marker=dict(color=\"#6ad49b\"))\ndata = [trace1, trace2]\nlayout = go.Layout(title=\"Content added over the years\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","9171e0e5":"col = \"listed_in\"\ncategories = \", \".join(d2['listed_in']).split(\", \")\ncounter_list = Counter(categories).most_common(25)\nlabels = [_[0] for _ in counter_list][::-1]\nvalues = [_[1] for _ in counter_list][::-1]\ntrace1 = go.Bar(y=labels, x=values, orientation=\"h\", name=\"TV Shows\", marker=dict(color=\"#a678de\"))\n\ndata = [trace1]\nlayout = go.Layout(title=\"Content added over the years\", height=600, legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","55968bc2":"## 6. The ratings of the content ? ","0081d66e":"## 4. Distribution of Movie Duration","10c19664":"There are movies \/ shows on the platform which were released way back in 1930s and 40s. \n\n## 3. Content from different Countries","63933ecd":"## 7. What are the top Categories ?","ad7a6720":" \n ## 2. Original Release Year of the movies","608aa8b4":"## 5. TV Shows with many seasons ","c26ce2a3":"# Amazon Prime Video - TV Shows and Movies - Exploratory Analysis\n\nThe dataset consists of meta details about the movies and tv shows such as the title, director, and cast of the shows \/ movies. Details such as the release year, the rating, duration etc. As the first step, let's load the dataset, create some new features. In this kernel, I have analysed this dataset to find top insights and findings. \n\nOther Similar Datasets: \n\n#### **Other Similar Datasets (Click on the logos to view):**  \n\n- [Netflix Movies and TV Shows](https:\/\/www.kaggle.com\/shivamb\/netflix-shows)\n- [Disney+ Movies and TV Shows](https:\/\/www.kaggle.com\/shivamb\/disney-movies-and-tv-shows)\n\n\n## Dataset Preparation","a7199b14":"Some of the oldest TV Shows on Amazon Prime","7affb551":"## 1. Content Type on Amazon Prime ","3fb51bc7":"Some of the oldest movies on Amazon Prime"}}