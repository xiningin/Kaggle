{"cell_type":{"ec467438":"code","bc60a1f0":"markdown","719a9e12":"markdown","96f2bba8":"markdown","1f069ca7":"markdown"},"source":{"ec467438":"### Spark ###\n# To find out where the pyspark\nimport findspark\nfindspark.init()\n\n# Creating Spark Context\nfrom pyspark import SparkContext\nfrom pyspark.sql import functions as F\nfrom pyspark.sql import SQLContext\nfrom pyspark.sql import Window\nfrom pyspark.sql.types import StructType, StringType, FloatType\n\n### Working with data ###\nimport numpy as np\nimport pandas as pd\n\n### Visualization ###\nimport altair as alt\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\n### Utils ###\nimport datetime\nfrom urllib.request import urlopen\n\n# File format #\nimport csv\nimport json\nimport xml.etree.ElementTree as ET\n\n\n#### Setup plotly\npy.sign_in(username='**your username**', api_key='**your key**')\n\n#### Setup Spark\nsc = SparkContext(\"local\", \"Testing\")\n\nspark = SQLContext(sc)\n\n#### Load information\ndf = spark.read.csv(\"data\/disease_indicators.csv\", sep=',', header=True)\n\n# Repartition the data by Topic\ndf2 = df.repartition('Topic')\ndf2.cache()\ndf2.rdd.getNumPartitions()\n\n### Prepare Data\ndf_location = (df2\n               .filter(\"GeoLocation IS NOT NULL AND Topic IS NOT NULL AND DataValue IS NOT NULL\")\n               .withColumn('DataValue', F.col('DataValue').cast('Float'))\n              ).filter(\"DataValue IS NOT NULL\")\n\n#### Get top 10 cities by disease\n\n### With Hive\ndf_location.createOrReplaceTempView('df')\n\ntop_10_cities = spark.sql(\"\"\"\nSELECT *\nFROM (\n    SELECT Topic, LocationDesc AS city, DataValue,\n    DENSE_RANK() over (PARTITION BY Topic ORDER BY DataValue DESC) as dense_rank\n    FROM df\n)\nWHERE dense_rank <=10\n\"\"\")\n\n### With PySpark\n# top_10_window = Window.partitionBy('Topic').orderBy(F.col('DataValue').desc())\n# top_10_cities = (\n#     df_location.select('Topic', F.col('LocationDesc').alias('city'), 'DataValue', F.dense_rank().over(top_10_window).alias('rank')) # Using dense rank to get cities with similar positions\n#     .filter(F.col('rank') <= 10)\n# )\n\nto_n_ranks_cities = (\n    top_10_cities\n    .groupBy('city')\n    .agg(F.countDistinct('Topic').alias('Number of times in top 10'))\n    .orderBy('Number of times in top 10') # Since the orientation is horizontal, the sort must be the inverse order of what I want\n).toPandas()\n\n### Testing Hypothesis\ndata = [go.Bar(\n            y=to_n_ranks_cities['city'],\n            x=to_n_ranks_cities['Number of times in top 10'],\n            orientation = 'h',\n            text=to_n_ranks_cities['Number of times in top 10']\n    )]\n\nlayout = go.Layout(\n    title='Frequency of Cities in top 10 ranking for diseases',\n    titlefont=dict(size=20),\n    width=1000,\n    height=1400,\n    yaxis=go.layout.YAxis(\n        ticktext=to_n_ranks_cities['city'],\n        tickmode='array',\n        automargin=True\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig, filename='cities-rank-frequency')","bc60a1f0":"<iframe width=\"900\" height=\"800\" frameborder=\"0\" scrolling=\"no\" src=\"\/\/plot.ly\/~tatianass\/7.embed\"><\/iframe>","719a9e12":"#### Results\n\nAs can be seen in the [chart above](https:\/\/plot.ly\/~tatianass\/7\/frequency-of-cities-in-top-10-ranking-for-diseases\/), some cities, specially Arizona, have come up to 10 times in the top 10 ranking cities where a specific disease appeared. Proving our hypothesis that the probability of a disease to happen is correlated to the location.","96f2bba8":"# U.S. Chronic Disease Indicators (CDI)\n\n*\"CDC's Division of Population Health provides cross-cutting set of 124 indicators that were developed by consensus and that allows states and territories and large metropolitan areas to uniformly define, collect, and report chronic disease data that are important to public health practice and available for states, territories and large metropolitan areas. In addition to providing access to state-specific indicator data, the CDI web site serves as a gateway to additional information and data resources.\"* - DATA.GOV\n\n**This notebook aims to validate the hypothesis that the probability of a disease to happen is related to where it happened, the location.**\n\nData source: https:\/\/catalog.data.gov\/dataset\/u-s-chronic-disease-indicators-cdi\n\nP.S.: I can't run spark code on Kaggle, so I posted the results and the code is right below it.","1f069ca7":"### Load data and Setup"}}