{"cell_type":{"a44799f5":"code","dbdff137":"code","39815ba9":"code","0e4632d8":"code","b611b47c":"code","19e16686":"code","41d1f6db":"code","fba41142":"code","73770743":"code","94fca9aa":"code","8f4385b1":"code","e3160947":"code","1a0d7a43":"code","75dae6c1":"code","3b4f3c0e":"code","8a377d5c":"code","790ca437":"code","a82c7640":"code","54400cdb":"code","0dc9f52c":"code","fa81e39b":"code","ab223da3":"code","5514b5e5":"code","07d280b1":"code","1fccad00":"code","4dbb8b32":"code","e97dde63":"code","8546a7ae":"code","2220fc6c":"code","0eb2309f":"code","a1365dd1":"code","3fd68f9e":"code","397c22fe":"code","07815740":"code","409c8a5e":"code","d45e1de9":"code","3f67351a":"code","464bf914":"code","98ae946c":"code","f124bbd3":"code","8f5b98d6":"code","5f690559":"code","2f81827d":"code","cefc2683":"code","35b7728c":"code","0896f288":"code","e2fc37dc":"code","c6bce0aa":"code","02080a76":"code","1263ad02":"code","9d9ab7ba":"code","d33d2e90":"code","8a59bab1":"code","56ea19d7":"code","c0fd9535":"code","f9638fb9":"code","c7fad3c9":"code","b1d77bbe":"code","4edfb71d":"code","9607fb22":"code","0cdaee61":"code","9e2289e7":"code","dcf574c9":"code","eee565dc":"code","468d29f5":"code","2de53a78":"code","5ccf731d":"code","1aae738b":"code","4a79ace4":"code","bafba710":"code","384e63a3":"code","73fdd1e9":"code","1852d90f":"code","c2e86ad3":"code","760f3d6e":"code","a8c827ec":"code","7d055151":"code","269daf2c":"markdown","c8be7714":"markdown","0afdd22f":"markdown","b1c32e4b":"markdown","46ecd404":"markdown","af05df87":"markdown","e0902bad":"markdown","58739296":"markdown","d247032d":"markdown","3e052eaf":"markdown","1f829752":"markdown","3674d44f":"markdown","d87663ba":"markdown","7cd914d4":"markdown","715468bc":"markdown","5879161a":"markdown","19f6490a":"markdown","0cd3a76a":"markdown","d2c7bdc9":"markdown","84011b35":"markdown","82166719":"markdown","6196451a":"markdown","31492e9c":"markdown","16c0be3e":"markdown","84526dcf":"markdown","8eb82607":"markdown","0e5b54f0":"markdown","23832613":"markdown","da374849":"markdown","d8c72b8d":"markdown","e4ac7718":"markdown","bd99a3c4":"markdown","c7dacb46":"markdown","59c807fd":"markdown","650ae752":"markdown","b6a55af5":"markdown","bc5d1628":"markdown","a1947e2d":"markdown","de939db9":"markdown","9c69d9ee":"markdown","0f30ea0b":"markdown","a25fa413":"markdown","25cf5c01":"markdown","065c44be":"markdown","9f9387f7":"markdown","3394306c":"markdown","afd75385":"markdown"},"source":{"a44799f5":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom scipy.stats import norm, skew #for some statistics\nimport scipy.stats as stats\npd.set_option('display.float_format', lambda x: '{:.3f}'.format(x)) #Limiting floats output to 3 decimal points\nfrom sklearn.ensemble import RandomForestRegressor\nfrom scipy.special import boxcox1p\nfrom scipy.stats import boxcox_normmax\nimport sklearn.linear_model as linear_model\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","dbdff137":"train=pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntrain.head()","39815ba9":"train.dtypes","0e4632d8":"print(\"Nulos en Alley:\",pd.isnull(train[\"Alley\"]).values.ravel().sum())\nprint(\"No nulos en Alley:\", pd.notnull(train[\"Alley\"]).values.ravel().sum())","b611b47c":"print(\"Nulos en PoolQC:\",pd.isnull(train[\"PoolQC\"]).values.ravel().sum())\nprint(\"No nulos en PoolQC:\", pd.notnull(train[\"PoolQC\"]).values.ravel().sum())","19e16686":"print(\"Nulos en Fence:\",pd.isnull(train[\"Fence\"]).values.ravel().sum())\nprint(\"No nulos en Fence:\", pd.notnull(train[\"Fence\"]).values.ravel().sum())","41d1f6db":"print(\"Nulos en MiscFeature:\",pd.isnull(train[\"MiscFeature\"]).values.ravel().sum())\nprint(\"No nulos en MiscFeature:\", pd.notnull(train[\"MiscFeature\"]).values.ravel().sum())","fba41142":"\ntrain=train.dropna(axis=1, how=\"any\")\ntrain.head()\n","73770743":"\ndummy_LotShape = pd.get_dummies(train[\"LotShape\"], prefix=\"Lot\")\ndummy_LotShape.head(10)\n","94fca9aa":"train2=train.drop([\"LotShape\"], axis=1)\ntrain2.head()","8f4385b1":"train2=pd.concat([train2, dummy_LotShape], axis = 1)\ntrain2.head()","e3160947":"import matplotlib.pyplot as plt","1a0d7a43":"column_name=train2.columns.values.tolist()\ncolumn_name","75dae6c1":"train2.plot(kind=\"scatter\",x=\"SalePrice\",y=\"LotArea\")","3b4f3c0e":"fig = plt.figure(figsize = (18,10))\n\nfig.add_subplot(121)\nplt.scatter(x = train2['GrLivArea'], y = train2['SalePrice'], color = \"g\", edgecolor = 'k')\nplt.xlabel(\"GrLivArea\")\nplt.ylabel(\"SalePrice\")\n\nfig.add_subplot(122)\nplt.scatter(x = train2['TotalBsmtSF'], y = train2['SalePrice'], color = \"m\", edgecolor = 'k')\nplt.xlabel(\"TotalBsmtSF\")\nplt.ylabel(\"SalePrice\")\n\nplt.show()\n","8a377d5c":"figure, axs = plt.subplots(2,2, sharey=True, sharex=True)\ntrain2.plot(kind=\"scatter\", x=\"SalePrice\", y =\"GrLivArea\", ax=axs[0][0])\ntrain2.plot(kind=\"scatter\", x=\"SalePrice\", y=\"BsmtFinSF1\", ax=axs[0][1])\ntrain2.plot(kind=\"scatter\", x=\"SalePrice\", y =\"3SsnPorch\", ax=axs[1][0])\ntrain2.plot(kind=\"scatter\", x=\"SalePrice\", y=\"GrLivArea\", ax=axs[1][1])","790ca437":"plt.boxplot(train2[\"GarageCars\"])\nplt.ylabel(\"precio De Vivienda\")\nplt.title(\"Boxplot de los garage cars por precio de vivienda\")","a82c7640":"grouped_Style= train2.groupby(\"HouseStyle\")\ngrouped_Style.groups","54400cdb":"for names, groups in grouped_Style:\n    print(names)\n    print(groups)","0dc9f52c":"train2[(train2[\"SalePrice\"]<300000) & (train2[\"YrSold\"]==2007)]\n","fa81e39b":"train2[(train2[\"MSSubClass\"]==20) & (train2[\"Lot_IR1\"]==1)]\n","ab223da3":"filtered_data = train2[(train2['LotArea'] <= 350000) & (train2['SalePrice'] <= 8000000)]\n \ncolores=['violet','red']\ntamano=[30,60]\n \nf1 = filtered_data['LotArea'].values\nf2 = filtered_data['SalePrice'].values\n \n# Vamos a pintar en colores los puntos por debajo y por encima de la media de Cantidad de Palabras\nasignar=[]\nfor index, row in filtered_data.iterrows():\n    if(row['LotArea']>10000):\n        asignar.append(colores[0])\n    else:\n        asignar.append(colores[1])\n    \nplt.scatter(f1, f2, c=asignar, s=tamano[0])\nplt.show()","5514b5e5":"import statsmodels.formula.api as smf","07d280b1":"lm = smf.ols(formula=\"SalePrice~LotArea\", data=train2).fit()\nlm.params","1fccad00":"lm.pvalues","4dbb8b32":"lm.rsquared","e97dde63":"sales_pred = lm.predict(pd.DataFrame(train2[\"LotArea\"]))\nsales_pred","8546a7ae":"import matplotlib.pyplot as plt","2220fc6c":"%matplotlib inline\ntrain2.plot(kind = \"scatter\", x = \"LotArea\", y =\"SalePrice\")\nplt.plot(pd.DataFrame(train2[\"LotArea\"]), sales_pred, c=\"red\", linewidth = 2)","0eb2309f":"data=train4\nlm2 = smf.ols(formula=\"SalePrice~GrLivArea \", data =data).fit()\nlm2.params","a1365dd1":"lm2.pvalues","3fd68f9e":"lm2.rsquared","397c22fe":"sales_pred = lm2.predict(pd.DataFrame(data[\"GrLivArea\"]))\nsales_pred","07815740":"%matplotlib inline\ntrain2.plot(kind = \"scatter\", x = \"GrLivArea\", y =\"SalePrice\")\nplt.plot(pd.DataFrame(train2[\"GrLivArea\"]), sales_pred, c=\"green\", linewidth = 3)","409c8a5e":"lm3 = smf.ols(formula=\"SalePrice~TotRmsAbvGrd\", data =train2).fit()\nlm3.params","d45e1de9":"lm3.pvalues","3f67351a":"lm3.rsquared","464bf914":"sales_pred = lm3.predict(pd.DataFrame(train2[\"TotRmsAbvGrd\"]))\nsales_pred","98ae946c":"%matplotlib inline\ntrain2.plot(kind = \"scatter\", x = \"TotRmsAbvGrd\", y =\"SalePrice\")\nplt.plot(pd.DataFrame(train2[\"TotRmsAbvGrd\"]), sales_pred, c=\"violet\", linewidth = 3)","f124bbd3":"lm_n = smf.ols(formula=\"SalePrice~GrLivArea+LotArea\", data = train2).fit()\nrsquared_n = lm_n.rsquared\nVIF = 1\/(1-rsquared_n)\nVIF","8f5b98d6":"lm_n.pvalues","5f690559":"lm_n.rsquared","2f81827d":"from matplotlib import pyplot\nfrom mpl_toolkits.mplot3d import Axes3D\nimport random\nfig = pyplot.figure(figsize=(15, 7))\nax = Axes3D(fig)\nvaloresx =train2['GrLivArea']\nvaloresy = train2['LotArea']\nvaloresz =train2['SalePrice']\n\nrandom.shuffle(valoresx)\nrandom.shuffle(valoresy)\nrandom.shuffle(valoresz)\nax.scatter(valoresx\/100, valoresy\/100, valoresz\/100)\nax.set_title('Gr\u00e1fico Comparativo')\nax.set_xlabel('Area GrLivArea')\nax.set_ylabel('Area del Lote')\nax.set_zlabel('Precio de Venta')\nax.legend()\nplt\nplt.show()","cefc2683":"# Ajustar n\u00famero de subplots en funci\u00f3n del n\u00famero de columnas\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(30, 20))\naxes = axes.flat\ncolumnas_object = train2.select_dtypes(include=['object']).columns\n\nfor i, colum in enumerate(columnas_object):\n    train2[colum].value_counts().plot.barh(ax = axes[i])\n    axes[i].set_title(colum, fontsize = 15, fontweight = \"bold\")\n    axes[i].tick_params(labelsize = 6)\n    axes[i].set_xlabel(\"\")\n\n# Se eliminan los axes vac\u00edos\nfor i in [7, 8]:\n    fig.delaxes(axes[i])\n    \nfig.tight_layout()\nplt.subplots_adjust(top=0.9)\nfig.suptitle('Distribuci\u00f3n variables cualitativas',\n             fontsize = 10, fontweight = \"bold\");\n\n\n\ncorr_matrix = train2.select_dtypes(include=['float64', 'int']).corr(method='pearson')\ntidy_corr_matrix(corr_matrix).head(10)","35b7728c":"train2.MSZoning.value_counts().sort_index()","0896f288":"dic_replace = {'RH': \"Otros\",\n               'C (all)': \"Otros\",'FV': \"Otros\"}\n\ntrain2['MSZoning'] = train2['MSZoning'] \\\n                     .map(dic_replace) \\\n                     .fillna(train2['MSZoning'])\n","e2fc37dc":"train2.MSZoning.value_counts().sort_index()","c6bce0aa":"train2.LandSlope.value_counts().sort_index()","02080a76":"dic_replace = {'Mod': \"Mod_Sev\",\n               'Sev': \"Mod_Sev\"}\n\ntrain2['LandSlope'] = train2['LandSlope'] \\\n                     .map(dic_replace) \\\n                     .fillna(train2['LandSlope'])","1263ad02":"train2.LandSlope.value_counts().sort_index()","9d9ab7ba":"train2.LandContour.value_counts().sort_index()","d33d2e90":"dic_replace = {'Bnk': \"Bhl\",\n               'HLS': \"Bhl\",'Low': \"Bhl\"}\n\ntrain2['LandContour'] = train2['LandContour'] \\\n                     .map(dic_replace) \\\n                     .fillna(train2['LandContour'])","8a59bab1":"train2.LandContour.value_counts().sort_index()","56ea19d7":"train2.Utilities.value_counts().sort_index()","c0fd9535":"dic_replace = {'AllPub': \"NoSeWa\"}\n\ntrain2['Utilities'] = train2['Utilities'] \\\n                     .map(dic_replace) \\\n                     .fillna(train2['Utilities'])","f9638fb9":"train2.LotConfig.value_counts().sort_index()","c7fad3c9":"dic_replace = {'CulDSac': \"Outside\",'FR2': \"Outside\",'FR3': \"Outside\"}\n\ntrain2['LotConfig'] = train2['LotConfig'] \\\n                     .map(dic_replace) \\\n                     .fillna(train2['LotConfig'])","b1d77bbe":"train2.LotConfig.value_counts().sort_index()","4edfb71d":"train2.Condition1.value_counts().sort_index()","9607fb22":"dic_replace = {'Artery': \"NoNorm\",\n               'Feedr': \"NoNorm\",'PosA': \"NoNorm\",'PosN': \"NoNorm\",'RRAe': \"NoNorm\",'RRAn': \"NoNorm\",'RRNe': \"NoNorm\",'RRNn': \"NoNorm\"}\n\ntrain2['Condition1'] = train2['Condition1'] \\\n                     .map(dic_replace) \\\n                     .fillna(train2['Condition1'])","0cdaee61":"train2.Condition1.value_counts().sort_index()","9e2289e7":"train2.Condition2.value_counts().sort_index()","dcf574c9":"dic_replace = {'Artery': \"NoNorm\",\n               'Feedr': \"NoNorm\",'PosA': \"NoNorm\",'PosN': \"NoNorm\",'RRAe': \"NoNorm\",'RRAn': \"NoNorm\",'RRNe': \"NoNorm\",'RRNn': \"NoNorm\"}\n\ntrain2['Condition2'] = train2['Condition2'] \\\n                     .map(dic_replace) \\\n                     .fillna(train2['Condition2'])","eee565dc":"train2.Street.value_counts().sort_index()","468d29f5":"dic_replace = {'Grvl': \"Grvl_Pave\",\n               'Pave': \"Grvl_Pave\"}\n\ntrain2['Street'] = train2['Street'] \\\n                     .map(dic_replace) \\\n                     .fillna(train2['Street'])","2de53a78":"datos2.Street.value_counts().sort_index()","5ccf731d":"# Ajustar n\u00famero de subplots en funci\u00f3n del n\u00famero de columnas\n\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(30, 20))\naxes = axes.flat\ncolumnas_object = train2.select_dtypes(include=['object']).columns\n\nfor i, colum in enumerate(columnas_object):\n    train2[colum].value_counts().plot.barh(ax = axes[i])\n    axes[i].set_title(colum, fontsize = 15, fontweight = \"bold\")\n    axes[i].tick_params(labelsize = 6)\n    axes[i].set_xlabel(\"\")\n\n# Se eliminan los axes vac\u00edos\nfor i in [7, 8]:\n    fig.delaxes(axes[i])\n    \nfig.tight_layout()\nplt.subplots_adjust(top=0.9)\nfig.suptitle('Distribuci\u00f3n variables cualitativas',\n             fontsize = 10, fontweight = \"bold\");\n\n\n\ncorr_matrix = train2.select_dtypes(include=['float64', 'int']).corr(method='pearson')\ntidy_corr_matrix(corr_matrix).head(10)","1aae738b":"\ntrain2.head()","4a79ace4":"sns.distplot(train2['SalePrice'] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(train2['SalePrice'], plot=plt)\nplt.show()","bafba710":"#We use the numpy fuction log1p which  applies log(1+x) to all elements of the column\ntrain2[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])\n\n#Check the new distribution \nsns.distplot(train2['SalePrice'] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(train['SalePrice'], plot=plt)\nplt.show()","384e63a3":"test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","73fdd1e9":"train2.drop(['Id'], axis=1, inplace=True)\ntest.drop(['Id'], axis=1, inplace=True)","1852d90f":"train_features = train2.drop(['SalePrice'], axis=1)\ntest_features = test\nfeatures = pd.concat([train_features, test_features]).reset_index(drop=True)","c2e86ad3":"numeric_dtypes = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\nnumerics2 = []\nfor i in features.columns:\n    if features[i].dtype in numeric_dtypes:\n        numerics2.append(i)\nskew_features = features[numerics2].apply(lambda x: skew(x)).sort_values(ascending=False)\n\nhigh_skew = skew_features[skew_features > 0.5]\nskew_index = high_skew.index\n\nfor i in skew_index:\n    features[i] = boxcox1p(features[i], boxcox_normmax(features[i] + 1))","760f3d6e":"quantitative = [f for f in train2.columns if train2.dtypes[f] != 'object']\nquantitative.remove('SalePrice')\nquantitative.remove('Id')\nqualitative = [f for f in train2.columns if train2.dtypes[f] == 'object']","a8c827ec":"quantitative","7d055151":"qualitative","269daf2c":"**Agrupacion de la columna Condition2**","c8be7714":"**Esta funcion determina el r cudrado que mide qu\u00e9 tan cerca est\u00e1n los datos de la l\u00ednea de regresi\u00f3n ajustada**","0afdd22f":"**Mostrar variables cualitativas:**","b1c32e4b":" **Definir cuales son los tipos de datos de cada columna.**","46ecd404":"**FINALMENTE LAS VARIABLES CUALITATIVAS QUEDAN DISTRIBUIDAS ASI:**","af05df87":"Esta formula no es muy efectiva porque los datos estan muy dispersos","e0902bad":"Esta formula es mas efectiva porque los datos estan mas juntos y tiene un r cuadrado mayor","58739296":"**FORMULA PREDICTIVA CON SALEPRICE Y TotRmsAbvGrd**","d247032d":"# Plots y visualizaci\u00f3n de los datos","3e052eaf":"**Aqui se agrupan las clasificaciciones de  Condition1en \"NoNorm\"**","1f829752":"# **Procesamiento de Datos**","3674d44f":"# **Regreci\u00f3n Lineal**","d87663ba":"> **Elimino la columna LotShape**","7cd914d4":"**Transformacion de la variable objetivo**","715468bc":"**Eliminar la columna ID**","5879161a":"> **Adicionamos las nuevas columnas dummy con ayuda de la funci\u00f2n concat**","19f6490a":"**Aqui se agrupan las opciones Grvl y pave de la columna \"Street\" en una sola**","0cd3a76a":"**Aqui se agrupan las clasificaciciones de Utilities**","d2c7bdc9":"**Relacion entre las 2 varibles numericas SalePrice y GrLivArea**","84011b35":"**Aqui se agrupan las clasificaciciones Bnk,HLS y Low  de la columna LandContour en \"Bhl\"**","82166719":"**Caracteristicas**","6196451a":"**cargar datos de prueba**","31492e9c":"# **Eliminar valores nulos**","16c0be3e":"**Mostrar variables cuantitivas:**","84526dcf":"**Aqui se agrupan las clasificaciciones Mod y Sev  de la columna LandSlope en \"Mod_Sev\"**","8eb82607":"**Casas con clase de c\u00f2nstruci\u00f2n igual a 20 y con forma  de  propiedad igual a 1**","0e5b54f0":"**Verificar que campos son nulos, que  se representa mediante la palabra NoN, Aqui estariamos contabilizando cuantos valores nulos y No nulos hay en el campo Alley,PoolQc,Fence,MiscFeature**","23832613":"**Como la formula general de una recta  es y= a+bx donde  \"a\" es el intercepto  y \"b\" la otra variable en estudio**","da374849":"**Gr\u00e1fico para cada variable cualitativa**","d8c72b8d":"# **Regreci\u00f3n lineal multiple**\nVIF = 1 : Las variables no est\u00e1n correlacionadas\n\nVIF < 5 : Las variables tienen una correlaci\u00f3n moderada y se pueden quedar en el modelo\n\nVIF >5 : Las variables est\u00e1n altamente correlacionadas y deben desaparecer del modelo.","e4ac7718":"**Aplicar la formula Y=158836.151897+ 2.099972*X   con los valores de la columna LotArea**","bd99a3c4":"# **Limpieza de datos**","c7dacb46":"**Borra toda la columna si contiene algun valor nulo**","59c807fd":"**la regresi\u00f3n lineal se utiliza para predecir el valor de una variable seg\u00fan el valor de otra**","650ae752":"**Agrupacion de datos por HouseStyle ( estilo de casa)**","b6a55af5":"# **Filtrado de datos**","bc5d1628":"**FORMULA PREDICTIVA CON SALEPRICE Y GRLIVAREA**","a1947e2d":"**Los valores categoricos : IR1, IR2,IR3 y Reg  de LotShape ahora  estaran como columnas independientes, y tendr\u00e0n el prefijo Lot**","de939db9":"**Relacion  de dispercion entre el precio de venta y el area total de la Vivienda**","9c69d9ee":"**Aqui se agrupan las clasificaciciones Rh Y C de la columna MSZoning en \"otros\"**","0f30ea0b":"# **Variables Dummy**","a25fa413":"# **Variables Cualitativas**","25cf5c01":"**Aqui se agrupan las opciones de LotConfig**","065c44be":"**FORMULA PREDICTIVA CON SALEPRICE Y LOTAREA**","9f9387f7":"**Csas con un precio de venta menor a 300000 y cuyo a\u00f1o de venta fue 2007**","3394306c":" **Grafica de prediccion con 3 variables**","afd75385":"# **VARIABLE OBJETIVO**"}}