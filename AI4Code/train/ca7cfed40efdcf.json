{"cell_type":{"33148172":"code","d052f259":"code","4a431a05":"code","f5341503":"code","3cd43aa8":"code","1026988b":"code","fa789e01":"code","b001c52d":"code","1533b0c6":"code","6e592a2a":"code","48cb3022":"code","f5ea25cf":"code","8c47132d":"code","ddcf3dbb":"code","9d0f6794":"code","027b84bf":"code","2f70cf6f":"code","e385a9c1":"code","98302067":"code","d7ff7f90":"code","3268fd37":"code","6d485be2":"code","c873e935":"code","debd21c8":"code","661480cb":"code","b9bd1f3b":"code","2fecaaf7":"code","048f8f7c":"code","d7c994a6":"code","b141e9a9":"code","1cc8489a":"code","a10114b3":"code","1b7b3a9d":"code","1e454668":"code","c1401863":"code","5f40a29c":"code","a7376b32":"markdown","7676d832":"markdown","1e6e1da6":"markdown","b499e266":"markdown","9a12b07d":"markdown","1c6d7cba":"markdown","f142ae5a":"markdown","811ab5bc":"markdown","5a8727cc":"markdown","aebc0b6c":"markdown","0a1073d5":"markdown","b6cefd8e":"markdown","db81d24c":"markdown","2f55956c":"markdown","98818bb2":"markdown","fd590175":"markdown","550390af":"markdown","50212eb0":"markdown","0f76508e":"markdown"},"source":{"33148172":"import warnings\n\nwarnings.filterwarnings('ignore', 'SettingWithCopyWarning')\nwarnings.filterwarnings('ignore', 'UndefinedMetricWarning')\nwarnings.filterwarnings('ignore', 'ConvergenceWarning')","d052f259":"!pip install holidays >\/dev\/null 2>&1","4a431a05":"import os\nimport random\nimport time\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport holidays\n\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom dateutil.parser import parse\n\nfrom IPython.display import display, Markdown, Latex","f5341503":"# matplotlib\nplt.rc('font', size=15)\nplt.rc('axes', titlesize=18)  \nplt.rc('xtick', labelsize=10)  \nplt.rc('ytick', labelsize=10)\nplt.rcParams.update({'figure.figsize': (10, 7), 'figure.dpi': 80})\n\n# seaborn\nsns.set(font_scale = 1.2)\nsns.set_style(\"whitegrid\")","3cd43aa8":"class Cfg:\n    RANDOM_STATE = 2022\n\n    TRAIN_DATA = '..\/input\/tabular-playground-series-jan-2022\/train.csv'\n    TEST_DATA = '..\/input\/tabular-playground-series-jan-2022\/test.csv'\n    SUBMISSION = '..\/input\/tabular-playground-series-jan-2022\/sample_submission.csv'    \n    SUBMISSION_FILE = 'submission.csv'\n    \n    INDEX = 'row_id'\n    FEATURES = ['date', 'country', 'store', 'product']\n    TARGET = 'num_sold'\n    \n    WEEKDAY_NAMES = [\n        'Monday', \n        'Tuesday', \n        'Wednesday', \n        'Thursday', \n        'Friday', \n        'Saturday',\n        'Sunday']\n\n    MONTH_NAMES = [\n        'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', \n        'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n    \n    @staticmethod\n    def set_seed():\n        random.seed(Cfg.RANDOM_STATE)\n        np.random.seed(Cfg.RANDOM_STATE)\n\nCfg.set_seed()","1026988b":"def write(text:str) -> None:\n    display(Markdown(text))","fa789e01":"def read_data(\n    train_file:str=Cfg.TRAIN_DATA, \n    test_file:str=Cfg.TEST_DATA,\n    submission_file:str=Cfg.SUBMISSION\n) -> (pd.DataFrame, pd.DataFrame):\n    \"\"\"Reads the train and test data files.\n    \"\"\"\n    # read csv files\n    train_df = pd.read_csv(train_file).set_index(Cfg.INDEX)\n    test_df = pd.read_csv(test_file).set_index(Cfg.INDEX)\n    submission_df = pd.read_csv(test_file).set_index(Cfg.INDEX)\n    \n    return train_df, test_df, submission_df","b001c52d":"train_data, test_data, submission_df = read_data()","1533b0c6":"train_data","6e592a2a":"test_data","48cb3022":"submission_df.head()","f5ea25cf":"write('* Train data: {} rows'.format(len(train_data)))\nwrite('* Test data: {} rows'.format(len(test_data)))\nwrite('* Train data: {} columns'.format(len(train_data.columns)))","8c47132d":"pd.DataFrame({\n    'data_set': ['train', 'test'],\n    'missing_values': [\n        train_data.isna().sum().sum(), \n        test_data.isna().sum().sum()\n    ]\n}).set_index('data_set')","ddcf3dbb":"def convert_dtypes(df:pd.DataFrame) -> pd.DataFrame:\n    df['country'] = pd.Categorical(df['country'], ordered=False)\n    df['store'] = pd.Categorical(df['store'], ordered=False)\n    df['product'] = pd.Categorical(df['product'], ordered=False)\n    df['date'] = pd.to_datetime(df['date'])\n    \n    return df","9d0f6794":"train_data = convert_dtypes(train_data)\ntest_data = convert_dtypes(test_data)","027b84bf":"def add_datatime(df:pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    \"\"\"\n    def is_weekend(day:str) -> bool:\n        return (day == 'Saturday') or (day == 'Sunday')\n\n    df['day'] = pd.Categorical(df['date'].dt.day)\n    df['year'] = pd.Categorical(df['date'].dt.year)\n    \n    df['weekday'] = pd.Categorical(\n        df['date'].dt.day_name(), \n        ordered=True, categories=Cfg.WEEKDAY_NAMES)  \n    \n    df['month'] = pd.Categorical(\n        df['date'].dt.month_name().str[:3], \n        ordered=True, categories=Cfg.MONTH_NAMES)  \n\n    df['is_weekend'] = df['weekday'].map(is_weekend)\n    \n    months = df['date'].dt.year.values\n    years =  df['date'].dt.month.values\n    df['year_month'] = [str(y) + '\/' + str(m) for y, m in zip(months, years)]   \n\n    return df","2f70cf6f":"def add_holidays(df:pd.DataFrame, country:str) -> pd.DataFrame:\n    \"\"\"Add holiday by country ('finland', 'norway', 'sweden')\n    \"\"\"\n    if country == 'finland':\n        provider = holidays.Finland()\n    elif country == 'norway':\n        provider = holidays.Norway()\n    elif country == 'sweden':\n        provider = holidays.Sweden()\n\n    get_holidays = np.frompyfunc(provider.get, nin=1, nout=1)\n    is_holiday= get_holidays(np.array(df['date'].map(lambda d: d.strftime('%Y-%m-%d'))))\n\n    df[f'{country}_holiday'] = is_holiday\n    return df","e385a9c1":"train_data = add_datatime(train_data)\ntest_data = add_datatime(test_data)","98302067":"for country in ['finland', 'norway', 'sweden']:\n    add_holidays(train_data, country)\n    add_holidays(test_data, country)","d7ff7f90":"train_data.head()","3268fd37":"def plot_dist(\n    data, \n    *, \n    hue=None, \n    title='Distribution of sales',\n    xlabel='Month',\n    ax=None\n) -> None:\n    \"\"\"\n    \"\"\"\n    if ax is None:\n        ax = plt.gca()\n\n    sns.kdeplot(\n        data=train_data, \n        x=Cfg.TARGET,\n        hue=hue,\n        ax=ax)         \n        \n    ax.set_title(title)\n    ax.set_xlabel('# Sold products')\n    ax.set_ylabel('Proportion')","6d485be2":"fig, axes = plt.subplots(2, 2, figsize=(15, 10))\n\nsubjects = ['country', 'product', 'store', None]\n\nfor subject, ax in zip(subjects, axes.flatten()):\n    plot_dist(train_data, hue=subject, ax=ax, title=f'Distribution of solds per {subject}')\n\nplt.tight_layout()\nplt.show()","c873e935":"def plot_boxplot(\n    data, \n    *, \n    hue=None, \n    x='month', \n    title='Sales per month',\n    xlabel='Month',\n    ax=None\n) -> None:\n    \"\"\"\n    \"\"\"\n    if ax is None:\n        ax = plt.gca()\n\n    sns.boxplot(\n        data=data, \n        x=x, \n        y=Cfg.TARGET,\n        hue=hue,\n        ax=ax)\n\n    ax.set_title(title)\n\n    ax.set_xlabel(xlabel)\n    ax.set_ylabel('# Sold products')","debd21c8":"fig, ax = plt.subplots(1, 1, figsize=(18, 6))\n\nplot_boxplot(train_data, x='year_month', title='Month-wise bloxplot', ax=ax)\n\nax.set_xticklabels(\n    ax.get_xticklabels(), \n    rotation=45, \n    horizontalalignment='right'\n)\n\nplt.tight_layout()\nplt.show()","661480cb":"fig, axes = plt.subplots(2, 2, figsize=(15, 10))\n\nsubjects = ['country', 'product', 'store', None]\n\nfor subject, ax in zip(subjects, axes.flatten()):\n    plot_boxplot(train_data, x=subject, ax=ax, title=f'Boxplot - Sold per {subject}')\n    \nplt.tight_layout()\nplt.show()","b9bd1f3b":"train_data.describe().T","2fecaaf7":"def plot_line(\n    data, \n    *, \n    hue=None, \n    x='month',\n    title='Sales per month',\n    xlabel='Month',\n    ax=None\n) -> None:\n    \"\"\"\n    \"\"\"\n    if ax is None:\n        ax = plt.gca()\n\n    sns.lineplot(\n        data=data, \n        x=x, \n        y=Cfg.TARGET,\n        hue=hue,\n        ax=ax)\n\n    ax.set_title(title)\n\n    ax.set_xlabel(xlabel)\n    ax.set_ylabel('# Sold products')","048f8f7c":"subjects = ['country', 'product', 'store']\nfor subject in subjects:\n    write(f'### Sales per month ({subject})')\n\n    fig, ax = plt.subplots(2, 1, figsize=(15, 9))\n\n    plot_line(train_data, x='month', hue=subject, ax=ax[0])\n    plot_boxplot(train_data, hue=subject, ax=ax[1], title=f'Boxplot - Sales per month ({subject})')\n\n    plt.tight_layout()\n    plt.show()","d7c994a6":"subjects = ['country', 'product', 'store']\nfor subject in subjects:\n    write(f'### Sales per weekday ({subject})')\n\n    fig, ax = plt.subplots(2, 1, figsize=(15, 9))\n    \n    plot_line(train_data, hue=subject, x='weekday', \n        ax=ax[0], xlabel='Weekday', title=f'Sales per weekday ({subject})')\n    \n    plot_boxplot(train_data, hue=subject, x='weekday',\n        ax=ax[1], xlabel='Weekday', title=f'Boxplot - Sales per weekday ({subject})')\n\n    plt.tight_layout()\n    plt.show()","b141e9a9":"def plot_timeline(\n    data, \n    *, \n    hue=None, \n    x='date', \n    title='Time series',\n    xlabel='Time',\n    freq='d',\n    ax=None\n) -> None:\n    \"\"\"\n    \"\"\"\n    if ax is None:\n        ax = plt.gca()\n\n    df = data.groupby([pd.Grouper(key='date', axis=0,  freq=freq), hue]).sum()\n    sns.lineplot(\n        data=df, \n        x=x, \n        y=Cfg.TARGET,\n        hue=hue,\n        ax=ax)\n\n    ax.set_title(title)\n\n    ax.set_xlabel(xlabel)\n    ax.set_ylabel('# Sold products')","1cc8489a":"subjects = ['country', 'product', 'store']\nfor subject in subjects:\n    write(f'### Time series ({subject})')\n    \n    fig, ax = plt.subplots(5, 1, figsize=(15, 20))\n    \n    plot_timeline(train_data, hue=subject, freq='Y', \n        title='Time series (annual)', ax=ax[0])\n    \n    plot_timeline(train_data, hue=subject, freq='Q', \n        title='Time series (quarterly)', ax=ax[1])\n    \n    plot_timeline(train_data, hue=subject, freq='M', \n        title='Time series (monthly)', ax=ax[2])\n    \n    plot_timeline(train_data, hue=subject, freq='w', \n        title='Time series (weekly)', ax=ax[3])\n    \n    plot_timeline(train_data, hue=subject, freq='d', \n        title='Time series (daily)', ax=ax[4])\n\n    plt.tight_layout()\n    plt.show()","a10114b3":"def split_data(data, dt):\n    \"\"\"\n    \"\"\"\n    train = data[data.index < dt]\n    test = data[data.index > dt]\n    \n    return train, test","1b7b3a9d":"def filter_data(data:pd.DataFrame, country:str, store:str, product:str) -> pd.DataFrame:\n    \"\"\"\n    \"\"\"\n    selector = (data['country'] == country) & (data['store'] == store) & (data['product'] == product)\n    df = data[selector][['date', 'num_sold']]\n    df['date'] = pd.DatetimeIndex(df['date'])\n\n    return df.set_index('date')","1e454668":"def display_decompose(data, result, err_line=0):\n    \"\"\"\n    \"\"\"\n    fig, ax = plt.subplots(4, 1, figsize=(12, 15))\n\n    sns.lineplot(data=df['num_sold'], ax=ax[0])\n    sns.lineplot(data=result.trend, ax=ax[1])\n    sns.lineplot(data=result.seasonal, ax=ax[2])\n\n    sns.scatterplot(\n        data=result.resid, \n        alpha=0.7,\n        ax=ax[3])\n\n    ax[3].hlines(\n        y=err_line, \n        color='red',\n        linestyles='--',\n        xmin=min(result.resid.index), \n        xmax=max(result.resid.index))\n\n    plt.tight_layout()\n    plt.show() ","c1401863":"df = filter_data(train_data, country='Finland', store='KaggleRama', product='Kaggle Sticker')\n\nresult = seasonal_decompose(\n    x=df['num_sold'], \n    model='additive', \n    extrapolate_trend='freq', \n    period=30)\n\ndisplay_decompose(df, result)","5f40a29c":"df = filter_data(train_data, country='Finland', store='KaggleRama', product='Kaggle Sticker')\n\nresult = seasonal_decompose(\n    x=df['num_sold'], \n    model='multiplicative', \n    extrapolate_trend='freq', \n    period=30)\n\ndisplay_decompose(df, result, err_line=1)","a7376b32":"# Overview\n\nFor this challenge, you will be predicting a full year worth of sales for three items at two stores located in three different countries. This dataset is completely fictional, but contains many effects you see in real-world data, e.g., weekend and holiday effect, seasonality, etc.","7676d832":"To be continued ... ","1e6e1da6":"# Exploratory data analysis (EDA)","b499e266":"# Missing values","9a12b07d":"## Distribution of sales","1c6d7cba":"![](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/28009\/logos\/header.png?)","f142ae5a":"# Decompose the time series","811ab5bc":"## Files\n\n* `train.csv` - the training set, which includes the sales data for each date-country-store-item combination.\n\n* `test.csv` - the test set; your task is to predict the corresponding item sales for each date-country-store-item combination. Note the Public leaderboard is scored on the first quarter of the test year, and the Private on the remaining.\n\n* `sample_submission.csv` - a sample submission file in the correct format\n","5a8727cc":"## Multiplicative Decomposition","aebc0b6c":"## Convert data types","0a1073d5":"## Time series","b6cefd8e":"# Feature engineering","db81d24c":"## Sales per weekday","2f55956c":"### Notice\n\n* There are no missing values in both data sets.","98818bb2":"### Notice\n\n* The training data contains 26,298 rows.\n\n* The test data contains 6,570 rows.\n\n* There is one datetime attribute `date` which has values from `2015-01-01` to `2018-12-31`.\n\n* The target variable `num_sold` is numerical and has a range from 70 unil 2,884.\n\n* There are 3 cateorical features:\n    * `country` - 'Finland', 'Norway', 'Sweden' \n    * `store` - 'KaggleMart', 'KaggleRama'\n    * `product` - 'Kaggle Mug', 'Kaggle Hat', 'Kaggle Sticker'\n\n","fd590175":"# Setup","550390af":"# Read data","50212eb0":"## Sales per month and weekday","0f76508e":"## Additive Decomposition"}}