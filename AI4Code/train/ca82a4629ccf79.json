{"cell_type":{"98231014":"code","07bd2d88":"code","d2b11d5c":"code","641ac858":"code","5b767bb9":"code","ea673023":"code","547ec403":"code","3a461492":"code","a7e7b72a":"code","3030d914":"code","fa3eb6af":"code","b2d80239":"code","6326a9e2":"code","bf2c1e50":"code","de969e1e":"code","603f09b3":"code","1236d43b":"code","f6fd0c13":"code","b7516b77":"code","055a813f":"code","69285918":"code","73c97402":"code","68e4b7ce":"code","ff9706d8":"code","ef2c3f41":"code","bc660540":"code","95a679d1":"code","ef13a654":"code","2d926aa9":"code","f89e3421":"code","228021b2":"code","934b8b3d":"code","af271430":"code","c844febd":"code","12797745":"code","c5c9ad79":"code","798dd226":"code","3aa3b7b0":"code","4ad68794":"code","55b4ca2e":"code","2bc022ac":"code","0b2b59fa":"code","d80e6346":"markdown","ad6e2806":"markdown","05d66579":"markdown","58a9b300":"markdown","c5c84b09":"markdown","02a5313b":"markdown","afe775aa":"markdown","a291b700":"markdown","92349094":"markdown","a497eb18":"markdown","efeb78a8":"markdown","bc953013":"markdown","adbeed2c":"markdown","252bb86d":"markdown","a16bea02":"markdown","c06b0e6b":"markdown","34898d16":"markdown","fe1ec4d0":"markdown","37fa211e":"markdown","78626510":"markdown","b3a9b93b":"markdown","0b7cac10":"markdown","ff24726b":"markdown","98d69ad5":"markdown","2e9a9b9e":"markdown","fa39e194":"markdown","4590a714":"markdown","c3487e61":"markdown","59ddf723":"markdown","4953c4d8":"markdown","c25e9b27":"markdown","e54a6537":"markdown","584f4a03":"markdown","410908b1":"markdown","618a001f":"markdown","7415dcfd":"markdown","87eb7082":"markdown"},"source":{"98231014":"import pandas as pd\nfrom shapely.geometry import  Point\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\nfrom matplotlib import cm\nimport urllib.request\nimport shutil\nimport zipfile\nimport os\nimport re\nimport contextily as ctx\nimport geoplot as gplt\nimport lightgbm as lgb\nimport eli5\nfrom eli5.sklearn import PermutationImportance\nfrom lightgbm import LGBMClassifier\nfrom matplotlib import pyplot as plt\nfrom pdpbox import pdp, get_dataset, info_plots\nimport shap","07bd2d88":"train = pd.read_csv('data\/train.csv', parse_dates=['Dates'])\ntest = pd.read_csv('data\/test.csv', parse_dates=['Dates'], index_col='Id')","d2b11d5c":"train.Dates.describe()","641ac858":"train.shape","5b767bb9":"train.head()","ea673023":"train.dtypes","547ec403":"train.duplicated().sum()","3a461492":"def create_gdf(df):\n    gdf = df.copy()\n    gdf['Coordinates'] = list(zip(gdf.X, gdf.Y))\n    gdf['Coordinates'] = gdf['Coordinates'].apply(Point)\n    gdf = gpd.GeoDataFrame(gdf, geometry='Coordinates',\n                          crs={'init': 'epsg:4326'})\n    return gdf\n\ntrain_gdf = create_gdf(train)","a7e7b72a":"world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\n\nf, ax = plt.subplots(1, figsize=(9,9))\nax = world.plot(color='white', edgecolor='black', axes=ax)\ntrain_gdf.plot(ax=ax, color='red');","3030d914":"train_gdf[train_gdf.Y > 70]","fa3eb6af":"train_gdf[train_gdf.Y > 70].count()[0]","b2d80239":"train.drop_duplicates(inplace=True)","6326a9e2":"train.replace({'X': -120.5, 'Y': 90.0}, np.NaN, inplace=True)\ntest.replace({'X': -120.5, 'Y': 90.0}, np.NaN, inplace=True)","bf2c1e50":"imputer = SimpleImputer(strategy='mean')","de969e1e":"for district in train['PdDistrict'].unique():\n    train.loc[train['PdDistrict']==district, ['X', 'Y']] = imputer.fit_transform(\n        train.loc[train['PdDistrict']==district, ['X', 'Y']])\n    # fit\uc740 train \ub370\uc774\ud130\ub85c \ud574\uc8fc\uc5c8\uae30\ub54c\ubb38\uc5d0 transform\ub9cc \uc801\uc6a9\n    test.loc[test['PdDistrict']==district, ['X', 'Y']] = imputer.transform(\n        test.loc[test['PdDistrict']==district, ['X', 'Y']])    \n    \ntrain_gdf = create_gdf(train)","603f09b3":"train['Date'] = train['Dates'].dt.date\ntrain['Year'] = train['Dates'].dt.year\ntrain['Month'] = train['Dates'].dt.month\ntrain['Day'] = train['Dates'].dt.day\ntrain['Hour'] = train['Dates'].dt.hour","1236d43b":"year_series = train.groupby('Year').count().iloc[:, 0]\ng = sns.barplot(x=year_series.index, y=year_series)\ng.set_xticklabels(g.get_xticklabels(), rotation=45);","f6fd0c13":"month_series = train.groupby('Month').count().iloc[:, 0]\nsns.barplot(x=month_series.index, y=month_series);","b7516b77":"hour_series = train.groupby('Hour').count().iloc[:, 0]\nsns.barplot(x=hour_series.index, y=hour_series);","055a813f":"palette = sns.color_palette()\n\nplt.figure(figsize=(10, 6))\ndate_count = train.groupby('Date').count().iloc[:, 0]\nsns.kdeplot(data=date_count, shade=True)\nplt.axvline(x=date_count.median(), ymax=0.95, linestyle='--', color=palette[1])\nplt.annotate('Median ' + str(date_count.median()),\n             xy=(date_count.median(), 0.004),\n             xytext=(200, 0.005),\n             arrowprops=dict(arrowstyle='->', color=palette[1], shrinkB=10))\nplt.title('Distribution of number of incidents per day',fontdict={'fontsize':16})\nplt.xlabel('Crime Incidents')\nplt.ylabel('Density')\nplt.legend().remove()\nplt.show()","69285918":"weekday_series = train.groupby('DayOfWeek').count().iloc[:,0]\nweekday_series = weekday_series.reindex([\n    'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday',\n    'Sunday'])\n\nwith sns.axes_style(\"whitegrid\"):\n    f, ax = plt.subplots(1, figsize=(10, 6))\n    sns.barplot(\n        weekday_series.index, (weekday_series.values \/ weekday_series.values.sum()) * 100,\n        palette=cm.ScalarMappable(cmap='Blues').to_rgba(weekday_series.values))\n\nplt.title('Incidents per Weekday', fontdict={'fontsize':16})\nplt.xlabel('Weekday')\nplt.ylabel('Percent of Incients (%)');","73c97402":"category_counts = train.groupby('Category').count().iloc[:, 0].sort_values(ascending=False)","68e4b7ce":"category_counts","ff9706d8":"# OTHER OFFENSES\ub97c \uc81c\uc77c \uc544\ub798 \ub450\uae30 \uc704\ud574\ncategory_counts = category_counts.reindex(\n    np.append(np.delete(category_counts.index, 1), 'OTHER OFFENSES'))","ef2c3f41":"with sns.axes_style(\"whitegrid\"):\n    f, ax = plt.subplots(1, figsize=(10, 10))\n    sns.barplot(\n        category_counts.values \/ category_counts.values.sum() * 100,\n        category_counts.index,\n        orient='h',\n        palette='Blues_d')\nplt.title('Incidents per Crime Category', fontdict={'fontsize': 16})\nplt.xlabel('Incidents (%)');","bc660540":"# Downloading the shapefile of the area \nurl = 'https:\/\/data.sfgov.org\/api\/geospatial\/wkhw-cjsf?method=export&format=Shapefile'\nwith urllib.request.urlopen(url) as response, open('pd_data.zip', 'wb') as out_file:\n    shutil.copyfileobj(response, out_file)\n    \n# Unzipping it\nwith zipfile.ZipFile('pd_data.zip', 'r') as zip_ref:\n    zip_ref.extractall('pd_data')\n    \n# Loading to a geopandas dataframe\nfor filename in os.listdir('.\/pd_data\/'):\n    if re.match(\".+\\.shp\", filename):\n        pd_districts = gpd.read_file('.\/pd_data\/'+filename)\n        break\n        \n# Merging our train dataset with the geo-dataframe\npd_districts = pd_districts.merge(\n    train.groupby('PdDistrict').count().iloc[:, [0]].rename(\n        columns={'Dates': 'Incidents'}),\n    left_on='district',\n    right_index=True)\n\n# Transforming the coordinate system to Spherical Mercator for\n# compatibility with the tiling background\npd_districts = pd_districts.to_crs({'init': 'epsg:3857'})\n\n# Calculating the incidents per day for every district\ntrain_days = train.groupby('Date').count().shape[0]\npd_districts['inc_per_day'] = pd_districts.Incidents\/train_days","95a679d1":"# Ploting the data\nfig, ax = plt.subplots(figsize=(10, 10))\npd_districts.plot(\n    column='inc_per_day',\n    cmap='Reds',\n    alpha=0.6,\n    edgecolor='r',\n    linestyle='-',\n    linewidth=1,\n    legend=True,\n    ax=ax);","ef13a654":"fig, ax = plt.subplots(figsize=(10, 10))\npd_districts.plot(\n    column='inc_per_day',\n    cmap='Reds',\n    alpha=0.6,\n    edgecolor='r',\n    linestyle='-',\n    linewidth=1,\n    legend=True,\n    ax=ax);\n\ndef add_basemap(ax, zoom, url='http:\/\/tile.stamen.com\/terrain\/tileZ\/tileX\/tileY.png'):\n    \"\"\"Function that add the tile background to the map\"\"\"\n    xmin, xmax, ymin, ymax = ax.axis()\n    basemap, extent = ctx.bounds2img(xmin, ymin, xmax, ymax, zoom=zoom, url=url)\n    ax.imshow(basemap, extent=extent, interpolation='bilinear')\n    # restore original x\/y limits\n    ax.axis((xmin, xmax, ymin, ymax))\n\n# Adding the background\nadd_basemap(ax, zoom=11, url=ctx.sources.ST_TONER_LITE)\n\n# Adding the name of the districts\nfor index in pd_districts.index:\n    plt.annotate(\n        pd_districts.loc[index].district,\n        (pd_districts.loc[index].geometry.centroid.x,\n         pd_districts.loc[index].geometry.centroid.y),\n        color='#353535',\n        fontsize='large',\n        fontweight='heavy',\n        horizontalalignment='center'\n    )\n\nax.set_axis_off()\nplt.show()","2d926aa9":"crimes = train['Category'].unique().tolist()\ncrimes.remove('TREA')\n\npd_districts = pd_districts.to_crs({'init': 'epsg:4326'})\n\n# geometry containing the union of all geometries \nsf_land = pd_districts.unary_union","f89e3421":"sf_land","228021b2":"sf_land = gpd.GeoDataFrame(gpd.GeoSeries(sf_land), crs={'init':'epsg:4326'})\nsf_land = sf_land.rename(columns={0:'geometry'}).set_geometry('geometry')","934b8b3d":"fig, ax = plt.subplots(3, 3, sharex=True, sharey=True, figsize=(12,12))\nfor i, crime in enumerate(np.random.choice(crimes, size=9, replace=False)):\n    data = train_gdf.loc[train_gdf['Category'] == crime]\n    ax = fig.add_subplot(3, 3, i+1)\n    gplt.kdeplot(data,\n                shade=True,\n                shade_lowest=False, # False\uc77c \ub54c, 0\uc5d0 \uac00\uae4c\uc6b4 \ube48\ub3c4\ub97c \uac00\uc9c4 \uad6c\uc5ed\uc740 \uc9c4\ud558\uae30\ub97c \ud45c\ud604\ud558\uc9c0 \uc54a\uc74c\n                clip=sf_land.geometry,# \uc8fc\uc5b4\uc9c4 \uad6c\uc5ed\ub9cc \uc2dc\uac01\ud654\n                cmap='Reds',\n                ax=ax)\n    gplt.polyplot(sf_land, ax=ax)\n    ax.set_title(crime)\nplt.suptitle('Geographic Density of Diffenrent Crimes')\nfig.tight_layout(rect=[0, 0.03, 1, 0.95]);","af271430":"# as_index=False: Hour, Date, Category\ub97c index\ub85c \uc9c0\uc815\ud558\uc9c0 \uc54a\uc74c\ndata = train.groupby(['Hour', 'Date', 'Category'],\n                    as_index=False).count().iloc[:, :4]\ndata","c844febd":"data.rename(columns={'Dates': 'Incidents'}, inplace=True)\ndata = data.groupby(['Hour', 'Category'], as_index=False).mean()\ndata = data.loc[data['Category'].isin(\n    ['ROBBERY', 'GAMBLING', 'BUGLARY', 'ARSON', 'PROSTITUTION'])]\n\ndata","12797745":"sns.set_style('whitegrid')\nfig, ax = plt.subplots(figsize=(14,4))\nax = sns.lineplot(data=data, x='Hour', y='Incidents', hue='Category')\nax.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=6)\nplt.suptitle('Average number of incidents per hour')\nfig.tight_layout(rect=[0, 0, 1, 0.95])","c5c9ad79":"naive_vals = train.groupby('Category').count().iloc[:, 0] \/ train.shape[0]\nn_rows = test.shape[0]\n\nnaive_vals","798dd226":"submission = pd.DataFrame(\n    np.repeat(np.array(naive_vals), n_rows).reshape(39, n_rows).transpose(),\n    columns=naive_vals.index)","3aa3b7b0":"submission","4ad68794":"def feature_engineering(data):\n    # object type -> datetime type\uc73c\ub85c\n    data['Date'] = pd.to_datetime(data['Dates'].dt.date) \n    # timedelta type -> int type\uc73c\ub85c\n    data['n_days'] = (\n        data['Date'] - data['Date'].min()).apply(lambda x: x.days)\n    data['Day'] = data['Dates'].dt.day\n    data['DayOfWeek'] = data['Dates'].dt.weekday\n    data['Month'] = data['Dates'].dt.month\n    data['Year'] = data['Dates'].dt.year\n    data['Hour'] = data['Dates'].dt.hour\n    data['Minute'] = data['Dates'].dt.minute\n    data['Block'] = data['Address'].str.contains('block', case=False)\n    \n    data.drop(columns=['Dates', 'Date', 'Address'], inplace=True)\n    \n    return data","55b4ca2e":"train = feature_engineering(train)\ntrain.drop(columns=['Descript', 'Resolution'], inplace=True)\ntest = feature_engineering(test)\ntrain.head()","2bc022ac":"PdDistrict_le = LabelEncoder()\ntrain['PdDistrict'] = PdDistrict_le.fit_transform(train['PdDistrict'])\ntest['PdDistrict'] = PdDistrict_le.transform(test['PdDistrict'])\n\nCategory_le = LabelEncoder()\ny = Category_le.fit_transform(train.pop('Category'))\n\ntrain_X, val_X, train_y, val_y = train_test_split(train, y)\nmodel = LGBMClassifier(objective='multiclass', num_class=39).fit(train_X, train_y)\n\n# \ud558\ub098\uc758 column\uc744 \uc11e\uc5b4 \uc131\ub2a5\uc744 \uad6c\ud588\uc744 \ub54c \uc131\ub2a5 \uac10\uc18c\ub7c9\uc774 \uadf8 feature\uc758 \uc911\uc694\ub3c4\uc784\nperm = PermutationImportance(model).fit(val_X, val_y)\neli5.show_weights(perm, feature_names=val_X.columns.tolist())","0b2b59fa":"# Loading the data\ntrain = pd.read_csv('.\/data\/train.csv', parse_dates=['Dates'])\ntest = pd.read_csv('.\/data\/test.csv', parse_dates=['Dates'], index_col='Id')\n\n# Data cleaning\ntrain.drop_duplicates(inplace=True)\ntrain.replace({'X': -120.5, 'Y': 90.0}, np.NaN, inplace=True)\ntest.replace({'X': -120.5, 'Y': 90.0}, np.NaN, inplace=True)\n\nimp = SimpleImputer(strategy='mean')\n\nfor district in train['PdDistrict'].unique():\n    train.loc[train['PdDistrict'] == district, ['X', 'Y']] = imp.fit_transform(\n        train.loc[train['PdDistrict'] == district, ['X', 'Y']])\n    test.loc[test['PdDistrict'] == district, ['X', 'Y']] = imp.transform(\n        test.loc[test['PdDistrict'] == district, ['X', 'Y']])\ntrain_data = lgb.Dataset(\n    train, label=y, categorical_feature=['PdDistrict'], free_raw_data=False)\n\n# Feature Engineering\ntrain = feature_engineering(train)\ntrain.drop(columns=['Descript','Resolution'], inplace=True)\ntest = feature_engineering(test)\n\n# Encoding the Categorical Variables\nle1 = LabelEncoder()\ntrain['PdDistrict'] = le1.fit_transform(train['PdDistrict'])\ntest['PdDistrict'] = le1.transform(test['PdDistrict'])\n\nle2 = LabelEncoder()\nX = train.drop(columns=['Category'])\ny= le2.fit_transform(train['Category'])\n\n# Creating the model\ntrain_data = lgb.Dataset(\n    X, label=y, categorical_feature=['PdDistrict'])\n\nparams = {'boosting':'gbdt',\n          'objective':'multiclass',\n          'num_class':39,\n          'max_delta_step':0.9,\n          'min_data_in_leaf': 21,\n          'learning_rate': 0.4,\n          'max_bin': 465,\n          'num_leaves': 41\n         }\n\nbst = lgb.train(params, train_data, 100)\n\npredictions = bst.predict(test)\n\n# Submitting the results\nsubmission = pd.DataFrame(\n    predictions,\n    columns=le2.inverse_transform(np.linspace(0, 38, 39, dtype='int16')),\n    index=test.index)\nsubmission.to_csv(\n    'LGBM_final.csv', index_label='Id')","d80e6346":"\ucd1d 67\uac1c\uc758 \ub370\uc774\ud130\uc758 \uc88c\ud45c\uac00 \uc798\ubabb\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.\n\uc6b0\uc120, \uc911\ubcf5\ud589\uc740 \uc81c\uac70\ub97c \uc2dc\ucf1c\uc90d\ub2c8\ub2e4. \uadf8\ub9ac\uace0 67\uac1c\uc758 outlier\ub294 \ud3c9\uade0\uac12\uc73c\ub85c \ub300\uccb4\ud569\ub2c8\ub2e4.","ad6e2806":"\uce98\ub9ac\ud3ec\ub2c8\uc544 \uc9c0\uc5ed\uc758 \ubc94\uc8c4\uc5d0 \ub300\ud55c \ub370\uc774\ud130\uc778\ub370 \uc5c9\ub6b1\ud55c \uacf3\uc5d0 \ucc0d\ud600 \uc788\ub294 \ub370\uc774\ud130\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc5b4\ub5a4 \ub370\uc774\ud130\uc778\uc9c0 \ud655\uc778\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","05d66579":"\ubcf8 notebook\uc740 Yannis Pappas \ucee4\ub110\uc744 \ucc38\uace0\ud558\uc5ec \uc791\uc131\ud588\uc2b5\ub2c8\ub2e4. (https:\/\/www.kaggle.com\/yannisp\/sf-crime-analysis-prediction)","58a9b300":"### Police District","c5c84b09":"# San Francisco Crime Classification from a top ranker","02a5313b":"## Data Science Life Cycle\nData Science Life Cycle\uc740 \uc544\ub798\uc758 \ub2e8\uacc4\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc73c\uba70, \ubcf8 \uacbd\uc9c4 \ub300\ud68c\uc5d0\uc11c\ub3c4 \uc544\ub798\uc758 \uc804\uccb4 Life Cycle\ub300\ub85c \uc9c4\ud589\ud560 \uc608\uc815\uc785\ub2c8\ub2e4.\n1. \ub370\uc774\ud130 \ud488\uc9c8\uc744 \ud5a5\uc0c1\uc2dc\ud0a4\uae30 \uc704\ud55c Data Wrangling\n2. \ud0d0\uc0c9\uc801 \ub370\uc774\ud130 \ubd84\uc11d (EDA)\n3. \ud604\uc7ac Feature\ub4e4\uc744 \uae30\ubc18\uc73c\ub85c \ucd94\uac00\uc801\uc778 Feature\ub4e4\uc744 \ub9cc\ub4dc\ub294 Feature Engineering\n4. (\ud544\uc694 \uc2dc) \ub370\uc774\ud130 \uc815\uaddc\ud654 \ubc0f \ubcc0\ud658\n5. \ubaa8\ub378 \uc131\ub2a5 \uce21\uc815\uc744 \uc704\ud55c \ud6c8\ub828 \ub370\uc774\ud130, \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uc0dd\uc131 \ubc0f \ud30c\ub77c\ubbf8\ud130 \uc870\uc815\n6. \ubaa8\ub378 \uc120\ud0dd \ubc0f \ud3c9\uac00, \uacb0\uacfc \uc608\uce21\uc744 \uc704\ud55c \ubaa8\ub378 \uc0dd\uc131","afe775aa":"\uac01 district\ubcc4 \ud558\ub8e8 \ud3c9\uade0 \ubc94\uc8c4 \ubc1c\uc0dd \uac74\uc218\ub97c \uc2dc\uac01\ud654\ud569\ub2c8\ub2e4.","a291b700":"\uc0cc\ud504\ub780\uc2dc\uc2a4\ucf54\uc758 Police Distirct\ub97c \ubd88\ub7ec\uc640 train \ub370\uc774\ud130\uc640 merging\uc2dc\ud0b5\ub2c8\ub2e4.","92349094":"\ub3c4\ubc15\uc740 \uc0c8\ubcbd\ubd80\ud130 \ub2e4\uc74c\ub0a0 \uc544\uce68\uae4c\uc9c0 \ub9ce\uc774 \ubc1c\uc0dd\ud569\ub2c8\ub2e4. \ub9e4\ucd98\uc740 \uc800\ub141\uc2dc\uac04\ubd80\ud130 \ubc24\uc0c8 \ub9ce\uc774 \ubc1c\uc0dd\ud558\uba70, \uc774\ub978 \uc544\uce68\ubd80\ud130 \uc800\ub141\uae4c\uc9c0 \uafb8\uc900\ud788 \uc99d\uac00\ud558\ub294 \uac83\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.","a497eb18":"\ubc94\uc8c4\ubcc4\ub85c \ubc1c\uc0dd \uc9c0\uc5ed\uc744 \uc2dc\uac01\ud654\ud574\uc90d\ub2c8\ub2e4.","efeb78a8":"### Address","bc953013":"Permutation Importance: \uc774\ubbf8 \ud6c8\ub828\ub41c \ubaa8\ub378\uc5d0\uc11c \uc5b4\ub5a4 feature\uac00 \uc911\uc694\ud55c\uc9c0 \ud310\ub2e8\ud558\ub294 \uc9c0\ud45c\uc785\ub2c8\ub2e4. \ud558\ub098\uc758 feature\ub97c \uc11e\uace0, \ub098\uba38\uc9c0 feature\ub294 \uadf8\ub300\ub85c \ub454 \ucc44 \uc131\ub2a5\uc744 \ud3c9\uac00\ud569\ub2c8\ub2e4. \uc131\ub2a5\uc758 \uac10\uc18c\uce58\ub9cc\ud07c \ud574\ub2f9 feature\uac00 \uc911\uc694\ud558\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uac19\uc740 \ubc29\uc2dd\uc73c\ub85c \ubaa8\ub4e0 feature\ub97c \uc11e\uc5b4\uac00\uba70 \ud574\ub2f9 feature\uc758 \uc911\uc694\ub3c4\ub97c \uce21\uc815\ud569\ub2c8\ub2e4. \uc704 \ub3c4\ud45c\ub294 feature\uc758 \uc911\uc694\ub3c4\ub97c \uc21c\uc11c\ub300\ub85c \ub098\ud0c0\ub0b8 \ud45c\uc785\ub2c8\ub2e4.\n\uacb0\ub860\uc801\uc73c\ub85c Permutation Importance\ub294 \ud2b9\uc815 feature\uac00 \uc608\uce21 \uc815\ud655\ub3c4\uc5d0 \uc5bc\ub9c8\ub098 \ub9ce\uc740 \uc601\ud5a5\uc744 \ubbf8\uce58\ub294\uac00 \ud310\ub2e8\ud560 \uc218 \uc788\ub294 \uc9c0\ud45c\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc608\uce21\uc744 \ub354 \uc815\ud655\ud558\uac8c \ud558\ub294 \ubc29\ud5a5\uc73c\ub85c \uc601\ud5a5\uc744 \ubbf8\uce58\ub294\uc9c0 \ub354 \ubd80\uc815\ud655\ud558\uac8c \ud558\ub294 \ubc29\ud5a5\uc73c\ub85c \uc601\ud5a5\uc744 \ubbf8\uce58\ub294\uc9c0 (\uc989, direction)\uc740 \uc54c \uc218\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.","adbeed2c":"\uc808\ub3c4\uc758 \ube44\uc728\uc774 \uac00\uc7a5 \ud07d\ub2c8\ub2e4.","252bb86d":"Descript\uc640 Resolution\uc740 train \ub370\uc774\ud130\uc5d0\ub9cc \uc788\uc73c\ubbc0\ub85c \uc608\uce21\ud558\ub294\ub370 \ud544\uc694\uc5c6\ub294 feature\uc785\ub2c8\ub2e4. \ubd84\uc11d\uc744 \uc704\ud55c feature\uac00 \ub418\uae30 \uc704\ud574\uc11c\ub294 train \ub370\uc774\ud130\uc5d0\ub3c4 test \ub370\uc774\ud130\uc5d0\ub3c4 \ubaa8\ub450 \uc874\uc7ac\ud574\uc57c \ud569\ub2c8\ub2e4.","a16bea02":"\ud558\ub8e8\ub3d9\uc548 \ubc1c\uc0dd\ud558\ub294 \ubc94\uc8c4 \uac74\uc218\ub294 \uc815\uaddc \ubd84\ud3ec\ub97c \uadf8\ub9ac\uace0 \uc788\uace0, \uadf8 \uc911\uc559\uac12\uc740 389\ud68c\uc785\ub2c8\ub2e4. ","c06b0e6b":"train \ub370\uc774\ud130\uc5d0\uc11c \uac01 Category\uc758 \ube44\uc728\uc744 test \ub370\uc774\ud130\uc5d0 \uadf8\ub300\ub85c \ub123\uc740 \uac83\uc785\ub2c8\ub2e4. \ubaa8\ub4e0 row\uc758 \uac12\uc740 \ub3d9\uc77c\ud569\ub2c8\ub2e4. submission\ud588\uc744 \ub54c score\ub294 2.68015\uc785\ub2c8\ub2e4.","34898d16":"Tree-based model\uc5d0\uc11c\ub294 feature scaling\uc774 \ub530\ub85c \ud544\uc694\uc5c6\uc2b5\ub2c8\ub2e4.","fe1ec4d0":"### Category","37fa211e":"- Dates - \ubc94\uc8c4\uac00 \uc77c\uc5b4\ub09c \uc77c\uc2dc\n- Category - \ubc94\uc8c4 \uc720\ud615 (\uc774 \uac12\uc774 Target variable\uc784)\n- Descript - \ubc94\uc8c4\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \uc124\uba85\n- DayOfWeek - \uc694\uc77c\n- PdDistrict - \uacbd\ucc30 \uad00\ud560 \uc9c0\uc5ed \uba85\uce6d\n- Resolution - \ubc94\uc8c4 \ud574\uacb0 \uc5ec\ubd80\n- Address - \ubc94\uc8c4 \ubc1c\uc0dd \uc8fc\uc18c\n- X - \uacbd\ub3c4(Longitude)\n- Y - \uc704\ub3c4(Latitude)","78626510":"\uc2dc\uac04\uc5d0 \ub530\ub978 \ubc94\uc8c4\uc218\uc785\ub2c8\ub2e4. \uc608\uc0c1\ub300\ub85c \ubaa8\ub450\uac00 \uc7a0\ub4e0 \uc0c8\ubcbd \uc2dc\uac04\uc5d0 \ubc94\uc8c4\uac00 \uac00\uc7a5 \uc801\uace0, 18\uc2dc\uac00 \uac00\uc7a5 \ub9ce\uc2b5\ub2c8\ub2e4. \uc544\uce68\ubd80\ud130 18\uc2dc\uae4c\uc9c0 \uc810\ucc28 \uc99d\uac00\ud558\ub294 \ucd94\uc138\ub97c \ubcf4\uc774\ub294\ub370 12\uc2dc\uc5d0 \uc720\ub3c5 \ub9ce\uc740 \uac83\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc810\uc2ec \uc2dc\uac04, \uc800\ub141 \uc2dc\uac04 \ub4f1\uacfc \uad00\ub828\uc774 \uc788\uc9c0 \uc54a\ub098 \ucd94\uce21\ud574\ubd05\ub2c8\ub2e4.","b3a9b93b":"### Naive Prediction","0b7cac10":"2323\uac1c\uc758 \uc911\ubcf5\ud589\uacfc 67\uac1c\uc758 \uc798\ubabb\ub41c \uc704\ub3c4, \uacbd\ub3c4 \uac12\uc774 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \uc774\ub294 \uc774\ubbf8 \uc704\uc5d0\uc11c \ucc98\ub9ac\ud588\uc2b5\ub2c8\ub2e4.","ff24726b":"### \ub0a0\uc9dc\uc640 \uc694\uc77c","98d69ad5":"#### Data Wranling","2e9a9b9e":"\uc6d4\uc5d0 \ub530\ub978 \ubc94\uc8c4\uc218\uc785\ub2c8\ub2e4. 8\uc6d4, 12\uc6d4\uc5d0 \ubc94\uc8c4\uc218\uac00 \uac00\uc7a5 \uc801\uc5c8\uace0, 5\uc6d4, 10\uc6d4\uc5d0 \uac00\uc7a5 \ub9ce\uc558\uc2b5\ub2c8\ub2e4. \ub0a0\uc528\uac00 \uc548 \uc88b\uc744 \ub54c (\ub354\uc6b8 \ub54c \ud639\uc740 \ucd94\uc6b8 \ub54c)\ub294 \ubc94\uc8c4\ub3c4 \uc801\uace0, \ub0a0\uc528\uac00 \uc88b\uc744 \ub54c\ub294 \ubc94\uc8c4\ub3c4 \ub9ce\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","fa39e194":"Feature engineering \ud6c4 \ucd1d 11\uac1c\uc758 feature\uac00 \ub0a8\uc558\uc2b5\ub2c8\ub2e4. ","4590a714":"\uc5f0\ub3c4\uc5d0 \ub530\ub978 \ubc94\uc8c4\uc218\uc785\ub2c8\ub2e4. 2003\ub144\ubd80\ud130 2014\ub144\uae4c\uc9c0\ub294 \ubc94\uc8c4\uc218\uac00 \uac70\uc758 \uc720\uc0ac\ud588\uc9c0\ub9cc, 2015\ub144\uc5d0 \uae09\uac10\ud55c \uc218\uce58\ub97c \ubcf4\uc785\ub2c8\ub2e4.","c3487e61":"#### Feature Engineering","59ddf723":"## Building Model","4953c4d8":"#### Feature Selection","c25e9b27":"### Methodology","e54a6537":"object type, \uc989 string type\uc740 \uce74\ud14c\uace0\ub9ac\ud615 \ub370\uc774\ud130\uc774\uae30 \ub54c\ubb38\uc5d0 \ucd94\ud6c4 \uc778\ucf54\ub529\uc774 \ud544\uc694\ud569\ub2c8\ub2e4.","584f4a03":"#### Feature Scaling","410908b1":"2323\uac1c\uc758 \uc911\ubcf5\ud589\uc774 \uc874\uc7ac\ud574 \uc81c\uac70\ud574\uc918\uc57c \ud569\ub2c8\ub2e4.","618a001f":"\uae08\uc694\uc77c\uc5d0 \ubc94\uc8c4 \uac74\uc218\uac00 \uac00\uc7a5 \ub9ce\uace0, \uc218\uc694\uc77c, \ud1a0\uc694\uc77c, \ubaa9\uc694\uc77c \ub4f1\uc774 \uadf8 \ub4a4\ub97c \uc774\uc5c8\uc2b5\ub2c8\ub2e4","7415dcfd":"\ud6c8\ub828 \ub370\uc774\ud130\ub294 2003.1.6.\ubd80\ud130 2015.5.13.\uae4c\uc9c0\uc758 \ubc94\uc8c4\ub97c \ub2f4\uace0 \uc788\uc73c\uba70, \ucd1d 9\uac1c\uc758 features\uac00 \uc788\uc2b5\ub2c8\ub2e4.","87eb7082":"\uc2dc\uac04\ub300\ubcc4 \uc8fc\uc694 \ubc94\uc8c4 \ubc1c\uc0dd \uac74\uc218\ub97c \uc2dc\uac01\ud654\ud574\ubd05\ub2c8\ub2e4."}}