{"cell_type":{"3ea8465c":"code","e0d90f7e":"code","ffd13d36":"code","e75f7078":"code","592115f1":"code","10656372":"code","2bf2b375":"code","7a685feb":"code","825a1c3b":"code","a004ebd5":"code","6dd26633":"code","53668dc8":"code","8083b52d":"code","591b8446":"code","6a8ca70b":"code","71fea771":"code","410df41e":"code","6e6a8678":"code","f269966b":"code","f6621ec4":"code","f5fff1fd":"code","67320003":"code","7a6dc704":"code","9de9ff18":"code","04b5c419":"code","69f48f05":"markdown","a62abe37":"markdown","9521929c":"markdown","856b1a1e":"markdown","46737b1f":"markdown","feaff849":"markdown","23dd1f50":"markdown","39fcf727":"markdown","31cd71ef":"markdown","728ec834":"markdown","fea08979":"markdown","e168dfd8":"markdown","5e679f80":"markdown","ad9408a3":"markdown","74304faf":"markdown","9af15af6":"markdown","6ce38a11":"markdown","58726113":"markdown","45be7412":"markdown","0332dd0d":"markdown","0ccc7525":"markdown","401b1670":"markdown","d5729388":"markdown","4747c5af":"markdown","ba40bb5e":"markdown"},"source":{"3ea8465c":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import scale \nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.preprocessing import scale\nfrom sklearn import metrics\nfrom tqdm import tqdm\nfrom bisect import bisect_right\nfrom sklearn.externals.six import StringIO  \nfrom IPython.display import Image  \nfrom sklearn.tree import export_graphviz\nfrom IPython.display import Image, display\nfrom scipy import stats\n!pip install pydotplus\nimport pydotplus\nimport os \nfrom sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\n\npd.options.display.max_rows = 4000\npd.options.display.max_seq_items = 2000\npd.options.display.float_format = '{:.4f}'.format","e0d90f7e":"def draw_feature(selected_cols):\n        \n        clf = DecisionTreeRegressor(max_depth=4, min_samples_leaf=5, criterion = 'mae')\n        clf.fit(X[selected_cols], Y)\n\n        pred_te = clf.predict(X_test[selected_cols])\n        print(\"MAE Test Model: %.4f\" % metrics.mean_absolute_error(Y_test, pred_te))\n        print(\"MAE Test Naive: %.4f\" % metrics.mean_absolute_error(Y_test, np.repeat(np.mean(Y_train), len(Y_test))))\n        \n        dot_data = StringIO()\n        export_graphviz(clf, out_file=dot_data, feature_names = selected_cols,\n                        filled=True, rounded=True, proportion = True, impurity = False,\n                        special_characters=True,\n                        class_names = ['GOOD', 'BAD']\n                       )\n        graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \n        graph.write_png('original_tree.png')\n        graph.set_size('\"20,!\"')\n        plt = Image(graph.create_png())\n        display(plt)\n\ndef scale_tr_te(X_train_enc, X_test_enc):\n\n    X_train_enc = scale(X_train_enc)\n    X_test_enc = scale(X_test_enc)\n\n    return X_train_enc, X_test_enc\n\ndef calc_rank_table_and_predict(data, zero_reg, cols):\n   \n    data_prep = data[(data['inf_rate'].notnull())]\n    all_cols = list(data_prep.columns)\n    all_cols.remove('has_metro')\n    model_data1 = data_prep.groupby('subject')[all_cols].median()\n    model_data1['has_metro'] = data_prep.groupby('subject')['has_metro'].max()\n    app = ['ivl_per_100k',\t'ekmo_per_100k']\n    model_data1[app] = model_data1[app].mask(model_data1[app]==0).fillna(model_data1[app].mean())\n    model_data1['pred'] = 0\n\n    Y = model_data1['inf_rate']\n    X = model_data1.drop(['inf_rate'], axis = 1)\n    X = X.fillna(X.mean())\n\n    clf = ElasticNet(alpha=0.25, l1_ratio=0.5, random_state = 0)\n    clf.fit(scale(X[cols]), Y.values)\n\n    data_prep = data[(data['inf_rate'].isnull())]\n    all_cols = list(data_prep.columns)\n    all_cols.remove('has_metro')\n    model_data2 = data_prep.groupby('subject')[all_cols].median()\n    model_data2['has_metro'] = data_prep.groupby('subject')['has_metro'].max()\n    app = ['ivl_per_100k',\t'ekmo_per_100k']\n    model_data2[app] = model_data2[app].mask(model_data2[app]==0).fillna(model_data2[app].mean())\n    model_data2[cols] = model_data2[cols].fillna(model_data2.mean())\n\n    zero_cols = ['urban_65-69_years', 'urban_80-84_years', 'urban_70-74_years', \n          'urban_85-89_years', 'urban_60-64_years', 'urban_75-79_years', 'humidity_max']\n    model_data2[zero_cols]=zero_reg.set_index('subject')[zero_cols]\n    model_data2['inf_rate'] = clf.predict(scale(model_data2[cols]))\n    model_data2['pred'] = 1\n\n    model_data = pd.concat((model_data1, model_data2), axis = 0)\n    df = pd.DataFrame()\n    df = model_data[['inf_rate', 'epirank_avia', 'epirank_train','ivl_per_100k', 'ekmo_per_100k', 'public_transport', 'shops_and_malls', 'has_metro', 'pred']]\n    df = df.fillna(df.median())\n    df['inf_rate_rank'] = df['inf_rate'].rank(method='dense', ascending=False).astype(int)\n    df['epirank_avia_rank'] = df['epirank_avia'].rank(method='dense', ascending=False).astype(int)\n    df['epirank_train_rank'] = df['epirank_train'].rank(method='dense', ascending=False).astype(int)\n    df['ivl_per_100k_rank'] = df['ivl_per_100k'].rank(method='dense', ascending=True).astype(int)\n    df['ekmo_per_100k_rank'] = df['ekmo_per_100k'].rank(method='dense', ascending=True).astype(int)\n    df['public_transport_rank'] = df['public_transport'].rank(method='dense', ascending=False).astype(int)\n    df['shops_and_malls_rank'] = df['shops_and_malls'].rank(method='dense', ascending=False).astype(int)\n    df['joint_rank']=df.filter(regex='_rank').iloc[:,1:].median(axis=1) + df['inf_rate_rank']\n    \n    return df","ffd13d36":"path = '\/kaggle\/input\/'\ndata = pd.read_csv(path + 'reproduction-rate-russia-regions\/data_v4.csv')\nzero_reg = pd.read_csv(path + 'reproduction-rate-add-data-for-prediction\/gks_metrics_zero_reg.csv')","e75f7078":"data.head(20)","592115f1":"use_cols = ['population', 'density', \n        'lat', 'lng',\n       'life_quality_place_rating', 'ecology', 'cleanness', 'public_services',\n       'neighbourhood', 'children_places', 'sport_and_outdoor',\n       'inf_rate',\n       'avg_temp_min', 'avg_temp_max', 'avg_temp_std', 'avg_temp_median',\n       'humidity_min', 'humidity_max', 'humidity_std', 'humidity_median',\n       'pressure_min', 'pressure_max', 'pressure_std', 'pressure_median',\n       'wind_speed_ms_min', 'wind_speed_ms_max', 'wind_speed_ms_std',\n       'wind_speed_ms_median', \n       'urban_50-54_years', 'urban_55-59_years', 'urban_60-64_years',\n       'urban_65-69_years', 'urban_70-74_years', 'urban_75-79_years',\n       'urban_80-84_years', 'urban_85-89_years', 'urban_90-94_years',\n       'rural_50-54_years', 'rural_55-59_years', 'rural_60-64_years',\n       'rural_65-69_years', 'rural_70-74_years', 'rural_75-79_years',\n       'rural_80-84_years', 'rural_85-89_years', 'rural_90-94_years',\n       'work_ratio_15-72_years',\n       'work_ratio_55-64_years', 'work_ratio_15-24_years',\n       'work_ratio_15-64_years', 'work_ratio_25-54_years', \n      #  'num_patients_tubercul_1992-2017_per_year',\n      #  'num_patients_tubercul_1992', 'num_patients_tubercul_1993',\n      #  'num_patients_tubercul_1994', 'num_patients_tubercul_1995',\n      #  'num_patients_tubercul_1996', 'num_patients_tubercul_1997',\n      #  'num_patients_tubercul_1998', 'num_patients_tubercul_1999',\n      #  'num_patients_tubercul_2000', 'num_patients_tubercul_2001',\n      #  'num_patients_tubercul_2002', 'num_patients_tubercul_2003',\n      #  'num_patients_tubercul_2004', 'num_patients_tubercul_2005',\n      #  'num_patients_tubercul_2006', 'num_patients_tubercul_2007',\n      #  'num_patients_tubercul_2008', 'num_patients_tubercul_2009',\n      #  'num_patients_tubercul_2010', 'num_patients_tubercul_2011',\n      #  'num_patients_tubercul_2012', 'num_patients_tubercul_2013',\n      #  'num_patients_tubercul_2014', 'num_patients_tubercul_2015',\n      #  'num_patients_tubercul_2016', 'num_patients_tubercul_2017',\n      #  'volume_serv_household_2017',\n      #  'volume_serv_chargeable_2017', 'volume_serv_transport_2017',\n      #  'volume_serv_post_2017', 'volume_serv_accommodation_2017',\n      #  'volume_serv_telecom_2017', 'volume_serv_others_2017',\n      #  'volume_serv_veterinary_2017', 'volume_serv_housing_2017',\n      #  'volume_serv_education_2017', 'volume_serv_medicine_2017',\n      #  'volume_serv_disabled_2017', 'volume_serv_culture_2017',\n      #  'volume_serv_sport_2017', 'volume_serv_hotels_2017',\n      #  'volume_serv_tourism_2017', 'volume_serv_sanatorium_2017',\n       'num_phones_rural_2018', 'num_phones_urban_2019',\n       'bus_march_travel_18', 'bus_april_travel_18',\n       'epirank_avia', 'epirank_bus', 'epirank_train', 'epirank_avia_cat',\n       'epirank_bus_cat', 'epirank_train_cat',\n       'whole_population', 'urban', 'rural', 'has_metro']    ","10656372":"data['num_patients_tubercul_1992-2017_per_year'] = data.filter(regex='tubercul').sum(axis=1)\/26","2bf2b375":"data_prep = data[(data['inf_rate'].notnull())]\ndata_prep = data_prep[(data_prep['inf_rate']>0)]\ndata_prep[use_cols] = data_prep[use_cols].astype('float')\nmodel_data = data_prep.groupby('subject')[use_cols[:-1]].median()\nmodel_data['has_metro'] = data_prep.groupby('subject')[use_cols[-1:]].max()","7a685feb":"Y = model_data['inf_rate']\nX = model_data.drop(['inf_rate'], axis = 1)\nX = X.fillna(X.mean())\nuse_cols = list(X.columns)","825a1c3b":"from sklearn.preprocessing import scale\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y.values, test_size=10, random_state=42)\nX_train_enc_sc, X_test_enc_sc = scale_tr_te(X_train, X_test)","a004ebd5":"from sklearn.model_selection import RepeatedKFold\nfrom sklearn import metrics\nfrom sklearn.linear_model import LinearRegression, Ridge, ElasticNet\nimport lightgbm as lgb\nfrom sklearn.svm import LinearSVR\nimport xgboost as xgb\nfrom sklearn import ensemble\n\nNFOLDS = 3\nRANDOM_STATE = 42\nN_REPEATS = 40\n\nclfs = []\nmae_mod = []\nmae_bas = []\nfolds = RepeatedKFold(n_splits=NFOLDS, n_repeats = N_REPEATS, random_state=RANDOM_STATE)\noof_preds_mod = np.zeros((len(X_train), 1))\ntest_preds_mod = np.zeros((len(X_test), 1))\noof_preds_bas = np.zeros((len(X_train), 1))\ntest_preds_bas = np.zeros((len(X_test), 1))\n\nfor fold_, (trn_, val_) in tqdm(enumerate(folds.split(X_train, Y_train))):\n    \n    X_trn, Y_trn = X_train.iloc[trn_, :], Y_train[trn_]\n    X_val, Y_val = X_train.iloc[val_, :], Y_train[val_]\n\n    X_trn_enc_sc, X_val_enc_sc = scale_tr_te(X_trn, X_val)\n    clf = ElasticNet(alpha=0.25, l1_ratio=0.5, random_state = 42)\n    clf.fit(X_trn_enc_sc, Y_trn)\n    \n    val_pred = clf.predict(X_val_enc_sc)\n\n    X_test_enc_sc = pd.DataFrame(X_test_enc_sc, columns = use_cols)\n    test_fold_pred = clf.predict(X_test_enc_sc)\n\n    mae_mod.append(metrics.mean_absolute_error(Y_val, val_pred))\n    mae_bas.append(metrics.mean_absolute_error(Y_val, np.repeat(np.mean(Y_trn), len(val_))))\n    oof_preds_mod[val_, :] = val_pred.reshape((-1, 1))\n    oof_preds_bas[val_, :] = np.repeat(np.mean(Y_trn), len(val_)).reshape((-1, 1))\n    test_preds_mod += test_fold_pred.reshape((-1,1))\n    test_preds_bas += np.repeat(np.mean(Y_trn), len(X_test_enc_sc)).reshape((-1, 1))\n\ntest_preds_mod \/= NFOLDS * N_REPEATS\ntest_preds_bas \/= NFOLDS * N_REPEATS\nprint('')\n\nmae_score_cv_mod = np.round(metrics.mean_absolute_error(Y_train, oof_preds_mod.ravel()),4)\nprint('')\nprint(\"MAE OOF Model = {}\".format(np.round(mae_score_cv_mod, 4)))\nprint(\"MAE CV Model = {}\".format(np.round(np.mean(mae_mod), 4)))\nprint(\"MAE STD Model = {}\".format(np.round(np.std(mae_mod),4)))\n\nmae_score_cv_bas = np.round(metrics.mean_absolute_error(Y_train, oof_preds_bas.ravel()),4)\nprint('')\nprint(\"MAE OOF Baseline = {}\".format(np.round(mae_score_cv_bas, 4)))\nprint(\"MAE CV Baseline = {}\".format(np.round(np.mean(mae_bas), 4)))\nprint(\"MAE STD Baseline = {}\".format(np.round(np.std(mae_bas),4)))\n\nprint('')\nmae_score_test_mod = np.round(metrics.mean_absolute_error(Y_test, test_preds_mod),4)\nprint(\"MAE Test Model = {}\".format(mae_score_test_mod))\nmae_score_test_bas = np.round(metrics.mean_absolute_error(Y_test, test_preds_bas),4)\nprint(\"MAE Test Baseline = {}\".format(mae_score_test_bas))","6dd26633":"from sklearn.preprocessing import scale \nfrom sklearn.linear_model import ElasticNet\nfrom sklearn import metrics\n\nclf = ElasticNet(alpha=0.25, l1_ratio=0.5, random_state = 42)\nclf.fit(X_train_enc_sc, Y_train)\npred_te = clf.predict(X_test_enc_sc)\nprint(\"MAE Test Naive: %.4f\" % metrics.mean_absolute_error(Y_test, np.repeat(np.mean(Y_train), len(Y_test))))\nprint(\"MAE Test Model: %.4f\" % metrics.mean_absolute_error(Y_test, pred_te))\n\nprint(80*'=')","53668dc8":"coefficients = pd.concat([pd.DataFrame(X_train.columns),pd.DataFrame(np.transpose(clf.coef_))], axis = 1)\ncoefficients.columns = ['variable', 'weight']\ncoefficients['percent'] = np.abs(coefficients['weight'])\ncoefficients['percent'] \/= coefficients['percent'].sum()\ncoefficients.sort_values(by = 'percent', ascending = False).head(18)","8083b52d":"import matplotlib.pyplot as plt\nimport seaborn as sns\nplt.figure(figsize=(20, 10))\nsns.barplot(x=\"percent\", y=\"variable\", data=coefficients.sort_values(by=\"percent\", ascending=False).head(15))\nplt.title('Feature Importance')\nplt.tight_layout()","591b8446":"# cols = coefficients.sort_values(by=\"percent\", ascending=False).head(10)['variable'].unique()\ncols = ['urban_65-69_years', 'urban_80-84_years', 'urban_70-74_years', \n          'urban_85-89_years', 'urban_60-64_years', 'urban_75-79_years', 'humidity_max']","6a8ca70b":"draw_feature(cols)","71fea771":"cols = ['urban_65-69_years', 'urban_80-84_years', 'urban_70-74_years', 'lat',\n          'urban_85-89_years', 'urban_60-64_years', 'urban_75-79_years', 'humidity_max']\n\nrank_table = calc_rank_table_and_predict(data, zero_reg, cols)\n\nrank_table[rank_table['pred']==0].sort_values(by='joint_rank', ascending = True).head(20)","410df41e":"rank_table[rank_table['pred']==1].sort_values(by='joint_rank', ascending = True)[['inf_rate']]","6e6a8678":"data_prep = data[(data['inf_rate'].notnull())]\nuse_cols = ['lat', 'urban', 'inf_rate', 'humidity_max', 'population', 'density', 'epirank_avia', 'epirank_train', 'urban_65-69_years']\ndata_prep[use_cols] = data_prep[use_cols].astype('float')\nmodel_data = data_prep.groupby('subject')[use_cols].median()","f269966b":"rvs1 = model_data[(model_data['lat']>=55.442) & (model_data['urban']>300000) & (model_data['inf_rate'].notnull())]['inf_rate']\nprint(rvs1)","f6621ec4":"rvs2 = model_data[((model_data['lat']<55.442) & (model_data['urban']>300000)) &  (model_data['inf_rate'].notnull())]['inf_rate']\nprint(rvs2)","f5fff1fd":"stats.mannwhitneyu(rvs1, rvs2)","67320003":"rvs1 = model_data[(model_data['lat']>=55.442) & (model_data['urban']>300000) & (model_data['inf_rate'].notnull())]['humidity_max']\nrvs2 = model_data[((model_data['lat']<55.442) & (model_data['urban']>300000)) &  (model_data['inf_rate'].notnull())]['humidity_max']\nprint(rvs1)\nprint('')\nprint(rvs2)\nprint('')\nstats.mannwhitneyu(rvs1, rvs2)","7a6dc704":"rvs1 = model_data[(model_data['lat']>=55.442) & (model_data['urban']>300000) & (model_data['inf_rate'].notnull())]['density']\nrvs2 = model_data[((model_data['lat']<55.442) & (model_data['urban']>300000)) &  (model_data['inf_rate'].notnull())]['density']\nstats.mannwhitneyu(rvs1, rvs2)","9de9ff18":"rvs1 = model_data[(model_data['lat']>=55.442) & (model_data['urban']>300000) & (model_data['inf_rate'].notnull())]['epirank_train']\nrvs2 = model_data[((model_data['lat']<55.442) & (model_data['urban']>300000)) &  (model_data['inf_rate'].notnull())]['epirank_train']\nprint(stats.mannwhitneyu(rvs1, rvs2))\n\nrvs1 = model_data[(model_data['lat']>=55.442) & (model_data['urban']>300000) & (model_data['inf_rate'].notnull())]['epirank_avia']\nrvs2 = model_data[((model_data['lat']<55.442) & (model_data['urban']>300000)) &  (model_data['inf_rate'].notnull())]['epirank_avia']\nprint(stats.mannwhitneyu(rvs1, rvs2))","04b5c419":"rvs1 = model_data[(model_data['lat']>=55.442) & (model_data['urban']>300000) & (model_data['inf_rate'].notnull())]['urban_65-69_years']\nrvs2 = model_data[((model_data['lat']<55.442) & (model_data['urban']>300000)) &  (model_data['inf_rate'].notnull())]['urban_65-69_years']\nprint(stats.mannwhitneyu(rvs1, rvs2))","69f48f05":"# **Define Train and Test Data**","a62abe37":"# **Weather Impact - Significant Difference by Humidity**","9521929c":"# **Save Selected Variables...** \n\n...or incorporate some manual selection...","856b1a1e":"# **Refit Model on the Whole Dataset**","46737b1f":"# **Cities with latitude > 55.442 and More than 300 000 citizens**","feaff849":"# **Aggregate Additional Column**","23dd1f50":"# **Show predicted R0 for Zero-Discovered Regions**\n\nSome regions are still reporting nothing - let's predict their R0 based on age groups, location and weather","39fcf727":"# **Final thoughts - up to now only selection bias...**\n\nbig city with older population => more severe symptoms => first cases\n\n...below strong significance of such kind of variable is shown.","31cd71ef":"# **Import Libraries**","728ec834":"# **Useful Functions**","fea08979":"# **Some findings for further exploration...**\n\n...no any final conclusions so far","e168dfd8":"# **Define Useful Columns**","5e679f80":"# **Show some data**","ad9408a3":"# **Significant Difference by Infection_Rate**\n\n* Effect of Moscow ?\n* Overfitting \/ Random ?\n* Weather impact ?\n* Transport impact ?\n* Density of population as confounder ?","74304faf":"# **Perform Variable Selection - Better Ideas...?**","9af15af6":"# **Show Variable Importance Plot**","6ce38a11":"# **Density of Population as Confounder - Significant Difference**","58726113":"# **Read Data**","45be7412":"# **Cities with latitude < 55.442 and More than 300 000 citizens**","0332dd0d":"# **Draw Dependencies with Decision Tree**","0ccc7525":"# **Show Selected Variables**","401b1670":"# **Prepare Data**","d5729388":"# **Define Population**","4747c5af":"# **Calculate Risk Table**\n\nWe calculate ranks for following indicators:\n\n* **inf_rate**- infection rate\n* **epirank_avia** - avia \"region rank\" for epidemics, calculated from tutu.ru Origin-Destination Data\n* **epirank_train** - train \"region rank\" for epidemics, calculated from tutu.ru Origin-Destination Data\n* **ivl_per_100k** - number of Ventilators per 100k citizens\n* **ekmo_per_100k** - number of EKMO per 100k citizens\n* **public_transport** - rating of public transport activity level\n* **shops_and_malls** - rating of shops and malls activity level","ba40bb5e":"# **Effect of Transport - Not Significant for Train, Significant for Avia**\n\n...but big city is confounding again?"}}