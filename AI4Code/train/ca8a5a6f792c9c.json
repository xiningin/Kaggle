{"cell_type":{"425b9f77":"code","dfe730d5":"code","431c7f97":"code","11a6e449":"code","637f2eeb":"code","3a8200a2":"code","cb106536":"code","6681467a":"code","a62d8c3f":"code","0d5617d5":"code","ff11a939":"code","26974293":"code","c4d09b03":"code","2b1c7eda":"code","e62250e9":"code","e59c9abb":"code","9e9a17d6":"code","3d38f4bb":"code","20143e93":"code","ad3f54ca":"code","55fc978e":"code","4b5f7c74":"code","9141c576":"code","46a2ac95":"code","482f46ca":"code","0742b8f1":"code","105ab0b4":"code","1fa52e64":"code","c51f2f3f":"code","ac6d482d":"code","21b18c5c":"code","d26f2343":"markdown","d151e402":"markdown","d7d9f0dc":"markdown","bdbfe22c":"markdown","a8001fa5":"markdown","3d893dbe":"markdown","1df9a7cc":"markdown","650e3e35":"markdown","7ac5c301":"markdown","8a918933":"markdown","d26be576":"markdown","d7fc2848":"markdown","eb1eaa76":"markdown","df49426e":"markdown","5ee58f3e":"markdown","3c711e13":"markdown","596267a7":"markdown","c817fa9b":"markdown"},"source":{"425b9f77":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\nimport matplotlib.lines as lines\nfrom IPython.display import HTML\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression, Lasso, Ridge, ElasticNet\nfrom sklearn.model_selection import cross_val_score, GridSearchCV\nfrom xgboost import XGBRegressor","dfe730d5":"#Visualization settings\nsns.set_style(style='white')\nsns.set(rc={\n    'figure.figsize': (12,7),\n    'axes.facecolor': 'white',\n    'axes.grid': True,\n    'grid.color': '.9',\n    'axes.linewidth': 1.0,\n    'grid.linestyle': u'-'},\n    font_scale=1.5)\ncustom_colors=[\"#3498db\", \"#95a5a6\",\"#34495e\", \"#2ecc71\", \"#e74c3c\"]\nsns.set_palette(custom_colors)\nbackground_color='#fbfbfb'","431c7f97":"#  Download below packages, if there is issue for downloading the xlsx input file.\n!pip install xlrd\n!pip install openpyxl","11a6e449":"#Load the input file\ndf_input = pd.read_excel('..\/input\/body-mass-index\/BMI.xlsx')","637f2eeb":"print (\"Sample data:\")\ndisplay(df_input.head())\nprint (f\"shape of dataset:{df_input.shape}\\n\")\nprint (\"DataSet Summary:\\n\")\ndisplay(df_input.info())","3a8200a2":"df_input.columns","cb106536":"#Delete the column SR.NO which doesn't have much value to the target feauture prediction.\ndf_input.drop('SR.NO',axis=1,inplace=True)","6681467a":"print (f\"Unique values in the Gender feature: {df_input.Gender.unique()}\")","a62d8c3f":"df_input.drop('Gender',axis=1,inplace=True)","0d5617d5":"print (f\"Unique values in the Age feature : {df_input.Age.unique()}\")","ff11a939":"df_input.drop('Age',axis=1,inplace=True)","26974293":"print (f\"current dataset sample:\\n{df_input.head()}\")","c4d09b03":"#Renaming the dependent features\ndf_input.rename(columns={'Height(cm)':'Height','Weight(in Kg)':'Weight'},inplace=True)","2b1c7eda":"#Categorical feature analysis\ndef analyze_categorical_feature(fld,display_graph=True):\n    print (\"Sample data:\\n\")\n    display(fld.head())\n    df=pd.DataFrame({\"Value\": fld.value_counts().index,\n                 \"Count\":fld.value_counts().values})\n    print (\"\\nNull value count : \", fld.isnull().sum())\n    unique_list=fld.unique().tolist()\n    print (\"\\nUnique values: \", unique_list)\n    print (\"\\n Unique values count: \", len(unique_list))\n    print (\"\\nValue counts:\\n\",    df)\n    if display_graph==True:\n        plt.subplots(figsize=(25,10),facecolor=background_color)\n        plt.subplot(2,2,1)\n        plt.pie(fld.value_counts(),labels=fld.value_counts().index,autopct=lambda x: f'{x: .2f}%');\n        plt.xticks(rotation=90)\n\n        plt.subplot(2,2,2)   \n        sns.barplot(data=df, x=\"Value\",y=\"Count\").set_facecolor(background_color);\n        plt.xticks(rotation=90);\n        plt.suptitle(fld.name + \" -distribution\");\n\n        plt.show()\n        plt.close()\n    display(HTML(\"<h4 style='background-color:#fbfbfb;font-family:serif;font-size:160%'>Discrete variable<\/h4>\"))\n","e62250e9":"#Continuous feature analysis\ndef analyze_continuous_feature(fld):\n    print (\"Sample data:\\n\",fld.head())\n    print (\"\\nNull value count : \", fld.isnull().sum())\n    print (\"\\n\", fld.describe())\n    print (f\"\\n Skewness : {fld.skew()} \\n\")\n    plt.subplots(figsize=(25,10))\n    plt.subplot(2,2,1)\n    plt.hist(fld)\n    plt.subplot(2,2,2)\n    sns.boxplot(fld)\n    plt.suptitle(fld.name + \"-distribution\")\n    plt.show()\n    plt.close()\n    display(HTML(\"<h4 style='background-color:#fbfbfb;font-family:serif;font-size:160%'>Continuous variable<\/h4>\"))","e59c9abb":"analyze_continuous_feature(df_input.Height)","9e9a17d6":"analyze_continuous_feature(df_input.Weight)","3d38f4bb":"analyze_continuous_feature(df_input.BMI)","20143e93":"sns.reset_defaults()\n\n#Visualization\nfig=plt.figure(figsize=(10,5));\n\nax0=fig.add_subplot(1,2,1)\nax1=fig.add_subplot(1,2,2)\nax1.grid(False)\nax1.set_xticklabels([])\nax1.set_yticklabels([])\n\nfig.patch.set_facecolor(background_color)\nax0.set_facecolor(background_color)\nax1.set_facecolor(background_color)\nax0.spines[\"bottom\"].set_visible(False)\nax0.spines[\"top\"].set_visible(False)\nax0.spines[\"right\"].set_visible(False)\nax0.spines[\"left\"].set_visible(False)\nax1.spines[\"bottom\"].set_visible(False)\nax1.spines[\"top\"].set_visible(False)\nax1.spines[\"right\"].set_visible(False)\nax1.spines[\"left\"].set_visible(False)\nax1.tick_params(left=False,bottom=False)\n\n#Plot the barplot\nsns.lineplot(data=df_input, x = 'Height', y='Weight',estimator=None,ax=ax0)\n\n#rotating the ticklabels in x axis\nfor tick in ax0.get_xticklabels():\n    tick.set_rotation(90)\n    \n#Draw line in the middle    \nl1= lines.Line2D([0.52,0.52],[0.1, 0.9],color='black',lw=0.2,transform=fig.transFigure)\nfig.lines.extend([l1])\n\n#heading content\nfig.text(x=0.5,\n        y=0.6,\n        fontweight='bold',\n        fontfamily='serif',\n        fontsize=17,\n        color='grey',\n        s='''\n        Is weight increases with respect to weight?\n        ''')\n#text content\nfig.text(x=0.5,\n        y=0.3,\n        fontweight='light',\n        fontfamily='serif',\n        fontsize=16,\n        color='grey',\n        s='''\n        Looks like there is a postive relationship \n        between height and weight.\n        However it's not linear relationship \n        between height and weight.\n        ''')\nplt.show()","ad3f54ca":"sns.reset_defaults()\n\n#Visualization\nfig=plt.figure(figsize=(10,5));\n\nax0=fig.add_subplot(1,2,1)\nax1=fig.add_subplot(1,2,2)\nax1.grid(False)\nax1.set_xticklabels([])\nax1.set_yticklabels([])\n\nfig.patch.set_facecolor(background_color)\nax0.set_facecolor(background_color)\nax1.set_facecolor(background_color)\nax0.spines[\"bottom\"].set_visible(False)\nax0.spines[\"top\"].set_visible(False)\nax0.spines[\"right\"].set_visible(False)\nax0.spines[\"left\"].set_visible(False)\nax1.spines[\"bottom\"].set_visible(False)\nax1.spines[\"top\"].set_visible(False)\nax1.spines[\"right\"].set_visible(False)\nax1.spines[\"left\"].set_visible(False)\nax1.tick_params(left=False,bottom=False)\n\n#Plot the barplot\nsns.lineplot(data=df_input, x = 'Height', y='BMI',estimator=None,ax=ax0)\n\n#rotating the ticklabels in x axis\nfor tick in ax0.get_xticklabels():\n    tick.set_rotation(90)\n    \n#Draw line in the middle    \nl1= lines.Line2D([0.52,0.52],[0.1, 0.9],color='black',lw=0.2,transform=fig.transFigure)\nfig.lines.extend([l1])\n\n#heading content\nfig.text(x=0.5,\n        y=0.6,\n        fontweight='bold',\n        fontfamily='serif',\n        fontsize=17,\n        color='grey',\n        s='''\n        Is BMI increases with respect to height?\n        ''')\n#text content\nfig.text(x=0.5,\n        y=0.4,\n        fontweight='light',\n        fontfamily='serif',\n        fontsize=16,\n        color='grey',\n        s='''\n        Yes. But not perfect linear in nature.\n        ''')\nplt.show()","55fc978e":"sns.reset_defaults()\n\n#Visualization\nfig=plt.figure(figsize=(10,5));\n\nax0=fig.add_subplot(1,2,1)\nax1=fig.add_subplot(1,2,2)\nax1.grid(False)\nax1.set_xticklabels([])\nax1.set_yticklabels([])\n\nfig.patch.set_facecolor(background_color)\nax0.set_facecolor(background_color)\nax1.set_facecolor(background_color)\nax0.spines[\"bottom\"].set_visible(False)\nax0.spines[\"top\"].set_visible(False)\nax0.spines[\"right\"].set_visible(False)\nax0.spines[\"left\"].set_visible(False)\nax1.spines[\"bottom\"].set_visible(False)\nax1.spines[\"top\"].set_visible(False)\nax1.spines[\"right\"].set_visible(False)\nax1.spines[\"left\"].set_visible(False)\nax1.tick_params(left=False,bottom=False)\n\n#Plot the barplot\nsns.lineplot(data=df_input, x = 'Weight', y='BMI',estimator=None,ax=ax0)\n\n#rotating the ticklabels in x axis\nfor tick in ax0.get_xticklabels():\n    tick.set_rotation(90)\n    \n#Draw line in the middle    \nl1= lines.Line2D([0.52,0.52],[0.1, 0.9],color='black',lw=0.2,transform=fig.transFigure)\nfig.lines.extend([l1])\n\n#heading content\nfig.text(x=0.5,\n        y=0.6,\n        fontweight='bold',\n        fontfamily='serif',\n        fontsize=17,\n        color='grey',\n        s='''\n        Is BMI increases with respect to height?\n        ''')\n#text content\nfig.text(x=0.5,\n        y=0.4,\n        fontweight='light',\n        fontfamily='serif',\n        fontsize=16,\n        color='grey',\n        s='''\n        As the weight increases, BMI also increasing positively.\n        Eventhough it is not perfect linear relationship, still\n        releation is good.\n        ''')\nplt.show()","4b5f7c74":"correlation_matrix=df_input.corr()['BMI']\ncorrelation_matrix=correlation_matrix.to_frame()\ncorrelation_matrix.sort_values(by='BMI',ascending=False,inplace=True)","9141c576":"sns.reset_defaults()\n\n#Visualization\nfig=plt.figure(figsize=(7,5));\n\nax0=fig.add_subplot(1,2,1)\nax1=fig.add_subplot(1,2,2)\nax1.grid(False)\nax1.set_xticklabels([])\nax1.set_yticklabels([])\n\nfig.patch.set_facecolor(background_color)\nax0.set_facecolor(background_color)\nax1.set_facecolor(background_color)\nax0.spines[\"bottom\"].set_visible(False)\nax0.spines[\"top\"].set_visible(False)\nax0.spines[\"right\"].set_visible(False)\nax0.spines[\"left\"].set_visible(False)\nax1.spines[\"bottom\"].set_visible(False)\nax1.spines[\"top\"].set_visible(False)\nax1.spines[\"right\"].set_visible(False)\nax1.spines[\"left\"].set_visible(False)\nax1.tick_params(left=False,bottom=False)\n\n#Plot the barplot\n#plt.figure(figsize=(1,3));\nsns.heatmap(correlation_matrix,cmap='inferno',annot=True,ax=ax0,cbar=False);\n\n#rotating the ticklabels in x axis\nfor tick in ax0.get_xticklabels():\n    tick.set_rotation(90)\n    \n#Draw line in the middle    \nl1= lines.Line2D([0.52,0.52],[0.1, 0.9],color='black',lw=0.2,transform=fig.transFigure)\nfig.lines.extend([l1])\n\n#heading content\nfig.text(x=0.5,\n        y=0.6,\n        fontweight='bold',\n        fontfamily='serif',\n        fontsize=17,\n        color='grey',\n        s='''\n        Feature Correlations\n        ''')\n#text content\nfig.text(x=0.5,\n        y=0.4,\n        fontweight='light',\n        fontfamily='serif',\n        fontsize=16,\n        color='grey',\n        s='''\n        As we guessed, weight feature having higher\n        correation coefficient with BMI.\n        ''')\nplt.show()","46a2ac95":"# Function for providing generalized results for regression model\ndef evaluate_model(model,x_train,y_train,x_test,y_test):\n    '''\n    Inputs\n    1. regression model eg: LinearRegression(),LassoRegression() etc.\n    2. training x data\n    3. training y data\n    4. testing x data\n    5. testing y data\n    '''\n    model.fit(x_train,y_train)\n    model_name=model.__class__.__name__\n    \n    train_score=model.score(x_train,y_train)\n    test_score=model.score(x_test,y_test)\n    print (f\"Training score: {train_score}\\nTesting score: {test_score}\")\n    \n    y_pred=model.predict(x_test)\n    print(\"Prediction completed.\")\n    df=pd.DataFrame({\"Actual\": y_test,\n                     \"Predicted\":y_pred})\n    \n    #Apply inverse box cox to retrieve original target results\n    # df=inv_boxcox(df,box_cox_param)\n    \n    #Finding the difference between original and predicted\n    df[\"difference\"]=df.Predicted-df.Actual\n    df.reset_index(inplace=True)\n    \n    #Plot actual vs predicted\n    plt.figure(figsize=(10,5));\n    sns.scatterplot(data=df,x=\"index\",y=\"Actual\",color='grey',label=[\"Actual\"]).set_facecolor(background_color);\n    sns.lineplot(data=df,x=\"index\",y=\"Predicted\",color='salmon',label=[\"Predicted\"]);\n    plt.legend(loc=\"right\",bbox_to_anchor=(1.1,1));\n    plt.title(model_name+\" -Actual vs Predicted\");\n    plt.show()\n    \n    print (\"Sample comparison file for actual and predicted target feature:\")\n    display(df.head())\n    \n    # Return the model for re-use if required.\n    return model","482f46ca":"#General data frame and function for storing and comparing model results.\ndf_model_results=pd.DataFrame(columns=[\"ModelName\",\"TrainScore\"])\n\ndef store_model_results(modl_name,train_score):\n    global df_model_results\n    row_loc=df_model_results.shape[0]+1\n    df_model_results.loc[row_loc,[\"ModelName\",\"TrainScore\"]]=[modl_name,train_score]","0742b8f1":"#Run each model and show the combined results.\ndef show_model_scores(x,y):\n    global df_model_results\n    df_model_results=df_model_results.iloc[0:0] #reset display dataframe\n    for model in  [LinearRegression(),\n                   Lasso(),\n                   Ridge(),\n                   ElasticNet(),\n                   XGBRegressor()]:\n        store_model_results(model.__class__.__name__, cross_val_score(model,x,y,cv=3).mean())\n    df_model_results.sort_values(\"TrainScore\",ascending=False,inplace=True)\n    display(df_model_results)\n    display(HTML('Selected model : <b>' + df_model_results.head(1)['ModelName'].values[0] + '<\/b>'))\n    ","105ab0b4":"# Set dependent and independent features.\ny=df_input.BMI\nx=df_input.drop('BMI',axis=1)","1fa52e64":"#Set training and testing dataset\nx_train,x_test,y_train,y_test=train_test_split(x,y,train_size=0.7)","c51f2f3f":"print (f\"X train shape: {x_train.shape}\\ny train shape: {y_train.shape}\\nX test shape : {x_test.shape}\\ny test shape : {y_test.shape}\")","ac6d482d":"#Run the models\nshow_model_scores(x_train, y_train)","21b18c5c":"evaluate_model(LinearRegression(),x_train,y_train,x_test,y_test)","d26f2343":"There is no missing values in the features.","d151e402":"Weight data ranges from 30 to 180kg.","d7d9f0dc":"## 2. Height and BMI","bdbfe22c":"## Feature Analysis","a8001fa5":"### 1. Height","3d893dbe":"## Model Training\nFind the best model for the data and train the model with available data.","1df9a7cc":"BMI values ranges from 14.9 to 45.00","650e3e35":"Height data from the dataset ranges from 140 to 221cm.<br>\nPeople with height less than 150cm is more compared to other heights.\n","7ac5c301":"### 3. BMI","8a918933":"Since there is one constant value present in the Gender feature, it doesn't add much value to the model training.Hence removing this feature.","d26be576":"### Summary\nLinear Regression fits well for this dataset.","d7fc2848":"### 4. Correlation of features with BMI","eb1eaa76":"### 3. Weight and BMI","df49426e":"Constant value 26 is present in the dataset, which doesn't add much importance to the model training.Hence removing this feature.","5ee58f3e":"### 1. Height and Weight","3c711e13":"## Feature Relationships","596267a7":"### 2. Weight","c817fa9b":"<center><h1>BMI Predictor<\/h1><\/center>\nPredict BMI using weights and heights\nRef: https:\/\/www.kaggle.com\/vishweshsalodkar\/body-mass-index"}}