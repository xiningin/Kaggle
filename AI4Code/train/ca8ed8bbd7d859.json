{"cell_type":{"c6a0a23b":"code","5c885c1c":"code","7433a6a8":"code","0269596d":"code","9bab939f":"code","fb097ab0":"code","b5fd8096":"code","dd319414":"code","f9109cd9":"code","9bc29fb2":"code","3d6c4e6b":"code","b9e5ed8b":"code","db6d8048":"code","ad7721de":"code","3fefb06d":"code","ffffb6e5":"code","cd0bbffe":"code","28f001e2":"code","1fa7b2d5":"code","4aa7ecc7":"code","f0bf2ced":"code","374b36b4":"code","e59bc7c2":"code","226fea8b":"code","7d5f4436":"code","ff20036f":"code","145bb5b1":"code","946083a4":"code","ede0cacc":"code","75994328":"code","8f44f08f":"code","392d7e68":"code","9ae559f0":"markdown","1f02a224":"markdown","cd692bb5":"markdown","42d558b4":"markdown","1ae18ae7":"markdown","5926fb51":"markdown","7ded4650":"markdown","5ee6a426":"markdown","c7f4df39":"markdown","a1cae70d":"markdown","ca63c176":"markdown","abeed78e":"markdown"},"source":{"c6a0a23b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # draw graph\n\nimport os\nprint(os.listdir(\"..\/input\"))","5c885c1c":"train = pd.read_csv(\"..\/input\/server-flow-prediction\/train.csv\")\ntest = pd.read_csv(\"..\/input\/server-flow-prediction\/test_id.csv\")\n\nprint(train.shape, test.shape)","7433a6a8":"train['count_date'] = pd.to_datetime(train['UPDATE_TIME']) - pd.to_datetime('2017-10-01')\ntrain['count_date'] = train['count_date'].astype(int) \/\/ 86400000000000\ntrain['week'] = train['count_date'] \/\/ 7\ntrain['day_of_week'] = pd.to_datetime(train['UPDATE_TIME']).dt.dayofweek\ntrain.head()","0269596d":"test['count_date'] = pd.to_datetime(test['UPDATE_TIME']) - pd.to_datetime('2017-10-01')\ntest['count_date'] = test['count_date'].astype(int) \/\/ 86400000000000\ntest['week'] = test['count_date'] \/\/ 7\ntest['day_of_week'] = pd.to_datetime(test['UPDATE_TIME']).dt.dayofweek\ntest.head()","9bab939f":"def SMAPE(n, predict, actual):\n    return sum(np.abs(predict - actual) \/ (np.abs(predict) + np.abs(actual)) * 100 \/ n)\n\n# _train  : training set\n# feature : name feature\n# y       : label\ndef linearForFeature(_train, feature ,y):\n    len_train = len(_train)\n    one = np.ones((len_train,1), dtype=float)\n    \n    feature1 = np.array(_train[feature]).reshape(len_train,1)\n    label = np.array(_train[y]).reshape(len_train,1)\n    features = np.concatenate((one, feature1, feature1 * feature1), axis=1)\n    \n    # nomal-equaltion\n    A,b = features.T @ features, features.T @ label\n    theta = np.linalg.pinv(A) @ b\n    return theta","fb097ab0":"zone_labels = sorted(set(train[\"ZONE_CODE\"].values))\nprint('ZONE_CODE:', zone_labels)\n\n# for zone in zone_labels:\n#     train[train.ZONE_CODE == zone].groupby(['UPDATE_TIME']).mean()['BANDWIDTH_TOTAL'].plot()","b5fd8096":"zone1 = train[train.ZONE_CODE == 'ZONE01'].copy().reset_index()\nzone1_gpby_mean = zone1.groupby('UPDATE_TIME').mean().reset_index()\n\nzone1_gpby_mean['BANDWIDTH_TOTAL'].plot()","dd319414":"# Drop \nzone1_bandwidth = zone1_gpby_mean.drop(zone1_gpby_mean.index[485:502])\nzone1_bandwidth = zone1_bandwidth.drop(zone1_bandwidth.index[133:146])\nzone1_bandwidth = zone1_bandwidth.drop(zone1_bandwidth.index[76:88]).reset_index()\n\nzone1_bandwidth['BANDWIDTH_TOTAL'].plot()","f9109cd9":"zone1_theta_bandwidth = linearForFeature(zone1_bandwidth,'count_date','BANDWIDTH_TOTAL')\nprint(zone1_theta_bandwidth)\n\nzone1_rate_bandwidth = zone1.groupby(['day_of_week','HOUR_ID']).mean().BANDWIDTH_TOTAL \/ zone1.mean().BANDWIDTH_TOTAL\n# zone1 = pd.merge(zone1, pd.DataFrame({'rate_hour_id_bandwidth' : zone1_rate_bandwidth}), on=['day_of_week','HOUR_ID']).sort_values('index').reset_index().drop(columns='level_0')\nfor i in range(168):\n    zone1.loc[zone1.day_of_week*24 + zone1.HOUR_ID == i,'rate_hour_id_bandwidth'] = zone1_rate_bandwidth[i\/\/24][i%24]","9bc29fb2":"zero = np.zeros((len(zone1),1)) \none = np.ones((len(zone1),1))\ncount_date = zone1['count_date'][:, np.newaxis]\n\nzone1['predict_bandwidth'] = np.concatenate((one, count_date, count_date*count_date), axis=1) @ zone1_theta_bandwidth\nzone1['predict_bandwidth'] = zone1['predict_bandwidth'] * zone1['rate_hour_id_bandwidth']\n\n# print(SMAPE(len(zone1), zone1.predict_bandwidth, zone1.BANDWIDTH_TOTAL))\n# zone1\n# plt.figure(figsize=(12,5), dpi=160)\nzone1.predict_bandwidth.plot()\nzone1.BANDWIDTH_TOTAL.plot()","3d6c4e6b":"zone2 = train[train.ZONE_CODE == 'ZONE02'].copy().reset_index()\nzone2_gpby_mean = zone2.groupby('UPDATE_TIME').mean().reset_index()\n\nzone2_gpby_mean['BANDWIDTH_TOTAL'].plot()","b9e5ed8b":"# Drop \nzone2_bandwidth = zone2_gpby_mean.drop(zone2_gpby_mean.index[415:439])\nzone2_bandwidth = zone2_bandwidth.drop(zone2_bandwidth.index[379])\nzone2_bandwidth = zone2_bandwidth.drop(zone2_bandwidth.index[62:80]).reset_index()\nzone2_bandwidth['BANDWIDTH_TOTAL'].plot()","db6d8048":"zone2_theta_bandwidth = linearForFeature(zone2_bandwidth,'count_date','BANDWIDTH_TOTAL')\nprint(zone2_theta_bandwidth)\n\nzone2_rate_bandwidth = zone2.groupby(['day_of_week','HOUR_ID']).mean().BANDWIDTH_TOTAL \/ zone2.mean().BANDWIDTH_TOTAL\nfor i in range(168):\n    zone2.loc[zone2.day_of_week*24 + zone2.HOUR_ID == i,'rate_hour_id_bandwidth'] = zone2_rate_bandwidth[i\/\/24][i%24]","ad7721de":"zero = np.zeros((len(zone2),1)) \none = np.ones((len(zone2),1))\ncount_date = zone2['count_date'][:, np.newaxis]\n\nzone2['predict_bandwidth'] = np.concatenate((one, count_date, count_date*count_date), axis=1) @ zone2_theta_bandwidth\nzone2['predict_bandwidth'] = zone2['predict_bandwidth'] * zone2['rate_hour_id_bandwidth']\n\n# zone2\n# plt.figure(figsize=(12,5), dpi=160)\nzone2.BANDWIDTH_TOTAL.plot()\nzone2.predict_bandwidth.plot()","3fefb06d":"zone3 = train[train.ZONE_CODE == 'ZONE03'].copy().reset_index()\nzone3_gpby_mean = zone3.groupby('UPDATE_TIME').mean().reset_index()\n\nzone3_gpby_mean['BANDWIDTH_TOTAL'].plot()","ffffb6e5":"# Drop \nzone3_bandwidth = zone3_gpby_mean.drop(zone3_gpby_mean.index[465:477])\nzone3_bandwidth = zone3_bandwidth.drop(zone3_bandwidth.index[112:122]).reset_index()\nzone3_bandwidth['BANDWIDTH_TOTAL'].plot()","cd0bbffe":"zone3_theta_bandwidth = linearForFeature(zone3_bandwidth,'count_date','BANDWIDTH_TOTAL')\nprint(zone3_theta_bandwidth)\n\nzone3_rate_bandwidth = zone3.groupby(['day_of_week','HOUR_ID']).mean().BANDWIDTH_TOTAL \/ zone3.mean().BANDWIDTH_TOTAL\nfor i in range(168):\n    zone3.loc[zone3.day_of_week*24 + zone3.HOUR_ID == i,'rate_hour_id_bandwidth'] = zone3_rate_bandwidth[i\/\/24][i%24]","28f001e2":"zero = np.zeros((len(zone3),1)) \none = np.ones((len(zone3),1))\ncount_date = zone3['count_date'][:, np.newaxis]\n\nzone3['predict_bandwidth'] = np.concatenate((one, count_date, count_date*count_date), axis=1) @ zone3_theta_bandwidth\nzone3['predict_bandwidth'] = zone3['predict_bandwidth'] * zone3['rate_hour_id_bandwidth']\n\n# zone3\n# plt.figure(figsize=(12,5), dpi=160)\nzone3.BANDWIDTH_TOTAL.plot()\nzone3.predict_bandwidth.plot()","1fa7b2d5":"zone1_gpby_mean.MAX_USER.plot()","4aa7ecc7":"# Drop\nzone1_maxuser = zone1_gpby_mean.drop(zone1_gpby_mean.index[485:501])\nzone1_maxuser = zone1_maxuser.drop(zone1_maxuser.index[436:438])\nzone1_maxuser = zone1_maxuser.drop(zone1_maxuser.index[316:318])\nzone1_maxuser = zone1_maxuser.drop(zone1_maxuser.index[196:199])\nzone1_maxuser = zone1_maxuser.drop(zone1_maxuser.index[132:147])\nzone1_maxuser = zone1_maxuser.drop(zone1_maxuser.index[77:87]).reset_index()\nzone1_maxuser['MAX_USER'].plot()","f0bf2ced":"zone1_theta_maxuser = linearForFeature(zone1_maxuser,'count_date','MAX_USER')\nprint(zone1_theta_maxuser)\n\nzone1_rate_maxuser = zone1.groupby(['day_of_week','HOUR_ID']).mean().MAX_USER \/ zone1.mean().MAX_USER\nfor i in range(168):\n    zone1.loc[zone1.day_of_week*24 + zone1.HOUR_ID == i,'rate_hour_id_maxuser'] = zone1_rate_maxuser[i\/\/24][i%24]","374b36b4":"zero = np.zeros((len(zone1),1)) \none = np.ones((len(zone1),1))\ncount_date = zone1['count_date'][:, np.newaxis]\n\nzone1['predict_maxuser'] = np.concatenate((one, count_date, count_date*count_date), axis=1) @ zone1_theta_maxuser  \nzone1['predict_maxuser'] = (zone1['predict_maxuser'] * zone1['rate_hour_id_maxuser']).astype(int)\n\n# zone1\n# plt.figure(figsize=(12,5), dpi=160)\nzone1.MAX_USER.plot()\nzone1.predict_maxuser.plot()","e59bc7c2":"zone2_gpby_mean.MAX_USER.plot()","226fea8b":"# Drop\nzone2_maxuser = zone2_gpby_mean.drop(zone2_gpby_mean.index[415:435])\nzone2_maxuser = zone2_maxuser.drop(zone2_maxuser.index[64:78]).reset_index()\nzone2_maxuser['MAX_USER'].plot()","7d5f4436":"zone2_theta_maxuser = linearForFeature(zone2_maxuser,'count_date','MAX_USER')\nprint(zone2_theta_maxuser)\n\nzone2_rate_maxuser = zone2.groupby(['day_of_week','HOUR_ID']).mean().MAX_USER \/ zone2.mean().MAX_USER\nfor i in range(168):\n    zone2.loc[zone2.day_of_week*24 + zone2.HOUR_ID == i,'rate_hour_id_maxuser'] = zone2_rate_maxuser[i\/\/24][i%24]","ff20036f":"zero = np.zeros((len(zone2),1)) \none = np.ones((len(zone2),1))\ncount_date = zone2['count_date'][:, np.newaxis]\n\nzone2['predict_maxuser'] = np.concatenate((one, count_date, count_date*count_date), axis=1) @ zone2_theta_maxuser  \nzone2['predict_maxuser'] = (zone2['predict_maxuser'] * zone2['rate_hour_id_maxuser']).astype(int)\n\n# zone2\n# plt.figure(figsize=(12,5), dpi=160)\n\nzone2.predict_maxuser.plot()\nzone2.MAX_USER.plot()","145bb5b1":"zone3_gpby_mean.MAX_USER.plot()","946083a4":"# # Drop\nzone3_maxuser = zone3_gpby_mean.drop(zone3_gpby_mean.index[466:477])\nzone3_maxuser = zone3_maxuser.drop(zone3_maxuser.index[110:124]).reset_index()\nzone3_maxuser['MAX_USER'].plot()","ede0cacc":"zone3_theta_maxuser = linearForFeature(zone3_maxuser,'count_date','MAX_USER')\nprint(zone3_theta_maxuser)\n\nzone3_rate_maxuser = zone3.groupby(['day_of_week','HOUR_ID']).mean().MAX_USER \/ zone3.mean().MAX_USER\nfor i in range(168):\n    zone3.loc[zone3.day_of_week*24 + zone3.HOUR_ID == i,'rate_hour_id_maxuser'] = zone3_rate_maxuser[i\/\/24][i%24]","75994328":"zero = np.zeros((len(zone3),1)) \none = np.ones((len(zone3),1))\ncount_date = zone3['count_date'][:, np.newaxis]\n\nzone3['predict_maxuser'] = np.concatenate((one, count_date, count_date*count_date), axis=1) @ zone3_theta_maxuser  \nzone3['predict_maxuser'] = (zone3['predict_maxuser'] * zone3['rate_hour_id_maxuser']).astype(int)\n\n# zone3\n# plt.figure(figsize=(12,5), dpi=160)\nzone3.MAX_USER.plot()\nzone3.predict_maxuser.plot()","8f44f08f":"for i in range(test.shape[0]):\n    # ZONE01\n    if test.loc[i,'ZONE_CODE'] == 'ZONE01':\n        # BANDWIDTH\n        test.loc[i,'rate_hour_id_bandwidth'] = zone1_rate_bandwidth[test.loc[i,'day_of_week']][test.loc[i,'HOUR_ID']]\n        test.loc[i,'predict_bandwidth'] = zone1_theta_bandwidth[0] + zone1_theta_bandwidth[1]*test.loc[i,'count_date'] + zone1_theta_bandwidth[2]*test.loc[i,'count_date']*test.loc[i,'count_date']\n        # MAX_USER\n        test.loc[i,'rate_hour_id_maxuser'] = zone1_rate_maxuser[test.loc[i,'day_of_week']][test.loc[i,'HOUR_ID']]\n        test.loc[i,'predict_maxuser'] = zone1_theta_maxuser[0] + zone1_theta_maxuser[1]*test.loc[i,'count_date'] + zone1_theta_maxuser[2]*test.loc[i,'count_date']*test.loc[i,'count_date']\n    # ZONE02\n    elif test.loc[i,'ZONE_CODE'] == 'ZONE02':\n        # BANDWIDTH\n        test.loc[i,'rate_hour_id_bandwidth'] = zone2_rate_bandwidth[test.loc[i,'day_of_week']][test.loc[i,'HOUR_ID']]\n        test.loc[i,'predict_bandwidth'] = zone2_theta_bandwidth[0] + zone2_theta_bandwidth[1]*test.loc[i,'count_date'] + zone2_theta_bandwidth[2]*test.loc[i,'count_date']*test.loc[i,'count_date']\n        # MAX_USER\n        test.loc[i,'rate_hour_id_maxuser'] = zone2_rate_maxuser[test.loc[i,'day_of_week']][test.loc[i,'HOUR_ID']]\n        test.loc[i,'predict_maxuser'] = zone2_theta_maxuser[0] + zone2_theta_maxuser[1]*test.loc[i,'count_date'] + zone2_theta_maxuser[2]*test.loc[i,'count_date']*test.loc[i,'count_date']\n    # ZONE03\n    else:\n        # BANDWIDTH\n        test.loc[i,'rate_hour_id_bandwidth'] = zone3_rate_bandwidth[test.loc[i,'day_of_week']][test.loc[i,'HOUR_ID']]\n        test.loc[i,'predict_bandwidth'] = zone3_theta_bandwidth[0] + zone3_theta_bandwidth[1]*test.loc[i,'count_date'] + zone3_theta_bandwidth[2]*test.loc[i,'count_date']*test.loc[i,'count_date']\n        # MAX_USER\n        test.loc[i,'rate_hour_id_maxuser'] = zone3_rate_maxuser[test.loc[i,'day_of_week']][test.loc[i,'HOUR_ID']]\n        test.loc[i,'predict_maxuser'] = zone3_theta_maxuser[0] + zone3_theta_maxuser[1]*test.loc[i,'count_date'] + zone3_theta_maxuser[2]*test.loc[i,'count_date']*test.loc[i,'count_date']\n    \ntest['predict_bandwidth'] = (test['predict_bandwidth'] * test['rate_hour_id_bandwidth']).round(2)\ntest['predict_maxuser'] = (test['predict_maxuser'] * test['rate_hour_id_maxuser']).astype(int)\ntest.head()","392d7e68":"test['label'] = test['predict_bandwidth'].astype(str) + \" \" + test['predict_maxuser'].astype(str)\ntest[['id','label']].to_csv('sub_aivn_server2.csv', index=False)\ntest[['id','label']].head()","9ae559f0":"## ZONE03","1f02a224":"## **ZONE01**","cd692bb5":"# **Contest AIVIVN 5 Predict Server 2**\n*https:\/\/www.aivivn.com\/contests\/5*","42d558b4":"## ZONE03","1ae18ae7":"## Count zone","5926fb51":"## ZONE02","7ded4650":"# FUNCTION\n## SMAPE\n    SMAPE = 100\/n * |Ft - At|\/(|Ft| + |At|)\n    At: actual value\n    Ft: predict value\n**Res** = 0.8 x **SMAPE of BANDWIDTH_TOTAL** + 0.2 x **SMAPE of MAX_USER**","5ee6a426":"# MAXUSER\n## ZONE01","c7f4df39":"## ZONE02","a1cae70d":"# Predict","ca63c176":"# **BANDWIDTH**","abeed78e":"**Drop lunar new year :v**"}}