{"cell_type":{"11dd3e85":"code","119eee28":"code","e443f8d7":"code","527037d0":"code","a70e38e9":"code","026204d4":"code","dfbfec80":"code","1023da9d":"code","2971645b":"code","05d75b5e":"code","f0b2fc35":"code","98532e07":"code","6f9210f2":"code","849a4e5e":"code","d850fe18":"code","cabc98d3":"code","1d2cb3ba":"code","4bb377fe":"code","9e29f222":"code","ca1eecbb":"code","f6d1a878":"code","08f07a6d":"code","29da17bf":"code","bbbe8e8e":"code","f2012c32":"code","75263437":"code","f3079349":"code","caf84644":"code","8e17edb4":"code","d515f935":"code","97f30840":"markdown","6c73f585":"markdown","111c2df3":"markdown","98f4548b":"markdown","d2bd4d04":"markdown"},"source":{"11dd3e85":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport plotly.express as px\nfrom sklearn.preprocessing import StandardScaler\nimport os\nimport plotly.io as pio;\npio.renderers.default='notebook'\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session ","119eee28":"# Display output not only of last command but all commands in a cell\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"","e443f8d7":"# Set pandas options to display results\npd.options.display.max_rows = 1000\npd.options.display.max_columns = 1000","527037d0":"os.chdir('\/kaggle\/input\/covid19\/')\nos.listdir()","a70e38e9":"ad1 = pd.read_csv(\"LockdownBef.csv\")\nad1.head()\n\nsns.jointplot(ad1.Cases,\n              ad1.Death,\n              kind = \"kde\"\n              )","026204d4":"ad = pd.read_csv(\"World.csv\")\nad.head()\n         # 2.2 Check data types of attributes\nad.dtypes\n\n# 2.3 Some more dataset related information\nad.info()               # Also informs how much memory dataset takes\n                        #   and status of nulls\n\nad.memory_usage()\n\nad.shape                \nad.columns.values\nlen(ad.columns)         \n\nlen(ad.Country.unique())                \nad.Country.value_counts()               ","dfbfec80":"##################\n# Plotting\n##################\npx.histogram(data_frame = ad,\n                     x  = 'Country',\n                     y  = 'Death%',  # Ht to be decided as per histfunc()\n                     histfunc = 'avg'   # One of 'count', 'sum', 'avg', 'min', or 'max'\n             )\n\nsns.distplot(ad.Infected)","1023da9d":"sns.distplot(ad.Death)\npx.histogram(data_frame = ad,\n                     x  = 'Country',\n                     y  = 'Recovered%',  # Ht to be decided as per histfunc()\n                     histfunc = 'avg',   # One of 'count', 'sum', 'avg', 'min', or 'max'\n                         marginal = 'violin'\n            )","2971645b":"px.histogram(data_frame =ad,\n             x = 'Country',\n             facet_row = 'Death%',\n             )","05d75b5e":"px.density_contour(\n                   data_frame =ad,\n                   x = 'Infected',\n                   y = 'Death',\n                   )","f0b2fc35":"px.density_contour(\n                   data_frame =ad,\n                   x = 'Recovered',\n                   y = 'Death',\n                   )","98532e07":"fig = px.density_contour(\n                         data_frame =ad,\n                         x = 'Country',\n                         y = 'Recovered%',\n                         z ='Death%',\n                        )\nfig.update_traces(\n                  contours_coloring=\"fill\",\n                  contours_showlabels = True\n                 )","6f9210f2":"ad1 = pd.read_csv(\"LockdownBef.csv\")\nad.head()\nfig = px.density_contour(\n                         data_frame =ad1,\n                         x = 'Country',\n                         y = 'Cases',\n                         z ='Death'\n                        )\nfig.update_traces(\n                  contours_coloring=\"fill\",\n                  contours_showlabels = True\n                 )","849a4e5e":"ad2= pd.read_csv(\"ReliefPackageGDP.csv\")\nad2.head()","d850fe18":"px.histogram(data_frame = ad2,\n                     x  = 'Country',\n                     y  = 'Package%VsGDP',  # Ht to be decided as per histfunc()\n                     histfunc = 'avg'   # One of 'count', 'sum', 'avg', 'min', or 'max'\n             )","cabc98d3":"sns.jointplot(ad.Infected,\n              ad.Death,\n              kind = \"hex\"\n              )","1d2cb3ba":"ad3 = pd.read_csv(\"LockdownAfter.csv\")\nad3.head()\n\nsns.jointplot(ad3.Cases,\n              ad3.Death,\n              kind = \"kde\"\n              )","4bb377fe":"ad4 = pd.read_csv(\"India.csv\")\nad4.head()","9e29f222":"import numpy as np                   # for multi-dimensional containers \nimport pandas as pd                  # for DataFrames\nimport plotly.graph_objects as go    # for data visualisation\nimport plotly.io as pio              # to set shahin plot layout\nimport plotly.express as px\nimport os","ca1eecbb":"access_token = 'pk.eyJ1IjoidmluZWV0dml2ZWsiLCJhIjoiY2thNmhycXRoMDcyejJxbGVwbmljZ3B6cSJ9.sPysD0hYOgxXvPEVYrmy9A'\npx.set_mapbox_access_token(access_token)","f6d1a878":"data = pd.read_csv(\"Statewise270520.csv\")\ndata.head()\ndata.shape   \ndata.columns.values","08f07a6d":"data.head()\ndata.info()","29da17bf":"missing_states = pd.isnull(data['STATE'])\nmissing_states\n# 3.2\ndata.loc[missing_states,'STATE'] = data.loc[missing_states,'STATE']","bbbe8e8e":"data.shape\n#data = data.dropna()\ndata.head()","f2012c32":"state_mask = data['STATE'] == data['STATE'].max()","75263437":"fig = px.scatter_mapbox(\n                        data,\n                        lat=\"LAT\",\n                        lon=\"LONG\",\n                        size=\"DEAD\",    # Size of bubble\n                        size_max=75,         # Limit max size of bubble to this value\n                        color=\"DEAD\",\n                        color_continuous_scale=px.colors.sequential.Pinkyl,\n                        hover_name=\"STATE\",           \n                        mapbox_style='dark',\n                        zoom=5,\n                        width=900,\n                        height=900\n                     )","f3079349":"fig.layout.coloraxis.showscale = False","caf84644":"fig.show()","8e17edb4":"fig = px.scatter_mapbox(\n                        data,\n                        lat=\"LAT\",\n                        lon=\"LONG\",\n                        size=\"DEAD\",\n                        size_max=75,\n                        color=\"DEAD\",\n                        color_continuous_scale=px.colors.sequential.Pinkyl,\n                        hover_name=\"STATE\",           \n                        mapbox_style='dark',\n                        zoom=5,\n                        width=800,\n                        height=800,\n                        animation_frame=\"STATE\",\n                        animation_group=\"STATE\"\n                     )\n","d515f935":"fig.layout.updatemenus[0].buttons[0].args[1][\"frame\"][\"duration\"] = 1000\nfig.layout.updatemenus[0].buttons[0].args[1][\"transition\"][\"duration\"] = 1000\nfig.layout.coloraxis.showscale = False\nfig.layout.sliders[0].pad.t = 10\nfig.layout.updatemenus[0].pad.t= 10\nfig.show()","97f30840":"*** STATUS OF COVID 19 : BEFORE STARTING OF LOCKDOWN ***","6c73f585":"# COVID'19 Analysis: Before Lockdown & After 50 Days of Lockdown all over the world","111c2df3":"# Today 28.05.2020, Statewise CORONA update :-","98f4548b":"# Remember, CORONA is very dangerous. So, Stay Safe.\n# Jaan Hai, Jahaan Hai..\n# Take Care \n# Thank you for giving ur valuable time\/feedback","d2bd4d04":"**STATUS OF COVID 19:AFTER 50TH DAY OF LOCKDOWN COMPLETION**"}}