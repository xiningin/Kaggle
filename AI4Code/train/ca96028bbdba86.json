{"cell_type":{"ac399bab":"code","89b38db2":"code","0fbdfcab":"code","c12a83b2":"code","c36bc05b":"code","ad0d3e97":"code","ee746bdf":"code","b18fe882":"code","7ebadd01":"code","0cb76013":"code","79309c6d":"code","c50c0f22":"code","1df72d57":"code","098ee026":"code","1e7cfa82":"code","952cbcf6":"code","e7681ee2":"code","53e35e1b":"code","5ca78cfd":"code","483874ff":"code","93977149":"code","996b1f7b":"code","c1ddd8fe":"code","82c59b9e":"code","a6c868a6":"code","a937588d":"code","654b182c":"code","06704827":"code","a35b9ddd":"code","73ccf0e7":"code","1923f6de":"code","696d6068":"code","f3efde9c":"code","5752db5e":"code","ee66d770":"code","874edbf0":"code","5284fa7f":"code","70a3bd5b":"code","b3d6314d":"code","52078688":"code","00a4d9b3":"code","54f46969":"code","b1f3bfdd":"code","92bb3474":"markdown","a1718a6c":"markdown","78b239c8":"markdown","0efbe274":"markdown","f7d45c94":"markdown","4831e0c0":"markdown"},"source":{"ac399bab":"import numpy as np\nimport pandas as pd\nimport seaborn as sb\nimport matplotlib.pyplot as plt\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier\nfrom sklearn.model_selection import RepeatedStratifiedKFold, train_test_split, GridSearchCV\n# from sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score\n\n%matplotlib inline","89b38db2":"adults = pd.read_csv(\"\/kaggle\/input\/adult-census-income\/adult.csv\")\nadults.head()","0fbdfcab":"adults.shape","c12a83b2":"adults.info()","c36bc05b":"adults.isin([\"?\"]).sum()","ad0d3e97":"adults.describe().T","ee746bdf":"adults = adults.replace(to_replace=\"?\", value=np.nan)\nadults = adults.dropna()\nadults = adults.reset_index(drop=True)\nadults.head()","b18fe882":"adults.shape","7ebadd01":"adults.rename(columns={\"education.num\":\"education_num\", \"marital.status\":\"marital_status\", \"capital.gain\":\"capital_gain\", \n                   \"capital.loss\":\"capital_loss\", \"hours.per.week\":\"hours_per_week\", \"native.country\":\"native_country\"}, inplace=True)","0cb76013":"adults[[\"education\", \"education_num\"]].head(15)","79309c6d":"adults.drop(columns=[\"education\"], inplace=True)","c50c0f22":"adults.sample()","1df72d57":"sb.countplot(x=adults[\"income\"])","098ee026":"adults.hist(column=\"income\", by=\"sex\", figsize=(10,4), sharey=True)","1e7cfa82":"adults.groupby([\"sex\", \"income\"]).size().plot.bar()","952cbcf6":"adults.hist(column=\"income\", by=\"occupation\", figsize=(16,10))","e7681ee2":"adults.groupby([\"occupation\", \"income\"]).size().plot.bar(figsize=(16,6))","53e35e1b":"adults.groupby([\"marital_status\", \"income\"]).size().plot.bar(figsize=(16,6))","5ca78cfd":"adults.sample()","483874ff":"fig, ax = plt.subplots(nrows=1, ncols=2, squeeze=True, figsize=(8,4))\nax[0].hist(adults[\"capital_gain\"]); ax[0].set_title(\"Capital Gain\")\nax[1].hist(adults[\"capital_loss\"]); ax[1].set_title(\"Capital Loss\")\nplt.show()","93977149":"plt.hist(x=adults[\"fnlwgt\"])","996b1f7b":"adults.sample()","c1ddd8fe":"numerical_columns = adults.select_dtypes(include=[np.number]).columns\ncategorical_columns = adults.select_dtypes(exclude=[np.number]).columns\ncategorical_columns = categorical_columns.difference([\"income\"])","82c59b9e":"scaler = StandardScaler()\nencoder = OneHotEncoder(sparse=False)\nstd_num_adults = pd.DataFrame(scaler.fit_transform(adults[numerical_columns]), columns=numerical_columns)\nohe_cat_adults = pd.DataFrame(encoder.fit_transform(adults[categorical_columns]))\n\nscaled_encoded_adults = pd.concat([std_num_adults, ohe_cat_adults], axis=1)","a6c868a6":"scaled_encoded_adults","a937588d":"scaled_encoded_adults.iloc[:,:6].hist(figsize=(14,10))","654b182c":"scaled_encoded_adults.describe().T","06704827":"X = scaled_encoded_adults\nY = adults[\"income\"].apply(lambda income: 1 if income==\">50K\" else 0)","a35b9ddd":"classifiers = [LogisticRegression(solver=\"liblinear\", max_iter=1e3, random_state=97),\n               DecisionTreeClassifier(random_state=97), \n               RandomForestClassifier(random_state=97),\n               ExtraTreesClassifier(random_state=97)]\n\nnames = [\"Logistic regression\", \"Decision tree\", \"Random forest\", \"Extra tree\"]\n\nparameters = [{\"penalty\":[\"l1\", \"l2\"],\n               \"C\":[0.9, 0.5, 0.2]\n              },\n              {\"max_depth\":[6, 10, 15]},\n              {\"max_depth\":[6, 10, 15], \"n_estimators\":[5,10,20]},\n              {\"max_depth\":[6, 10, 15], \"n_estimators\":[5,10,20]}]\n\nresults_panel = {}\nfor clasif, name, param in zip(classifiers, names, parameters):\n    search = GridSearchCV(clasif, param_grid=param, scoring=\"roc_auc\", cv=5, n_jobs=-1, verbose=3)\n    search.fit(X,Y)\n    results_panel[name] = pd.DataFrame(search.cv_results_)","73ccf0e7":"logreg_results_df = results_panel[names[0]].sort_values(by=\"rank_test_score\")\nlogreg_results_df.set_index(\"rank_test_score\", inplace=True)\nlogreg_results_df[[\"mean_test_score\", \"std_test_score\", \"mean_fit_time\", \"params\"]]","1923f6de":"dt_results_df = results_panel[names[1]].sort_values(by=\"rank_test_score\")\ndt_results_df.set_index(\"rank_test_score\", inplace=True)\ndt_results_df[[\"mean_test_score\", \"std_test_score\", \"mean_fit_time\", \"params\"]]","696d6068":"rf_results_df = results_panel[names[2]].sort_values(by=\"rank_test_score\")\nrf_results_df.set_index(\"rank_test_score\", inplace=True)\nrf_results_df[[\"mean_test_score\", \"std_test_score\", \"mean_fit_time\", \"params\"]]","f3efde9c":"et_results_df = results_panel[names[3]].sort_values(by=\"rank_test_score\")\net_results_df.set_index(\"rank_test_score\", inplace=True)\net_results_df[[\"mean_test_score\", \"std_test_score\", \"mean_fit_time\", \"params\"]]","5752db5e":"logreg = LogisticRegression(solver=\"liblinear\", max_iter=1e3, random_state=97, verbose=3)\nparams = {\"C\":[0.1, 0.2, 0.3],\n          \"class_weight\":[None, \"balanced\"],\n          }\ncv = RepeatedStratifiedKFold(n_repeats=5, n_splits=5, random_state=97)\nsearch = GridSearchCV(estimator=logreg, param_grid=params, scoring=\"roc_auc\", cv=cv, n_jobs=-1, verbose=3)\nsearch.fit(X,Y)","ee66d770":"results_df = pd.DataFrame(search.cv_results_)\nresults_df = results_df.sort_values(by=[\"rank_test_score\", \"mean_fit_time\"])\nresults_df.set_index(\"rank_test_score\", inplace=True)\nresults_df[[\"mean_test_score\", \"std_test_score\", \"mean_fit_time\", \"params\"]]","874edbf0":"print(\"Best parameters are: \\n\", results_df.iloc[0][\"params\"])","5284fa7f":"x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, stratify=Y)\nlog_regression = LogisticRegression(C=0.3, solver=\"liblinear\")","70a3bd5b":"log_regression.fit(x_train, y_train)\nlog_regression_predictions = log_regression.predict(x_test)","b3d6314d":"names = [\"accuracy\", \"precision\", \"recall\", \"f1\"]\nmetrics = [accuracy_score, precision_score, recall_score, f1_score]\n\nprint(\"Metrics\\n\")\nfor name, metric in zip(names, metrics):\n    print(name, metric(y_pred=log_regression_predictions, y_true=y_test), \"\\n\")","52078688":"roc_auc_score(y_true=y_test, y_score=log_regression.predict_proba(x_test)[:,1])","00a4d9b3":"encoded_columns = list(encoder.get_feature_names(categorical_columns))\nscaled_columns = list(numerical_columns)\nnamed_columns = scaled_columns + encoded_columns","54f46969":"log_coefs = log_regression.coef_.squeeze()\nsorted_importances_idx = np.argsort(log_coefs)[::-1]\n\nfeature_importances = {}\nfor idx in sorted_importances_idx:\n    if log_coefs[idx]>=0:\n        feature_importances[named_columns[idx]] = log_coefs[idx]","b1f3bfdd":"plt.figure(figsize=(14,10))\nplt.barh(list(feature_importances.keys()), feature_importances.values())","92bb3474":"## Feature engineering","a1718a6c":"## Data preparation","78b239c8":"## Machine Learning","0efbe274":"## Feature Importances","f7d45c94":"## Exploratory data analysis","4831e0c0":"## Load data"}}