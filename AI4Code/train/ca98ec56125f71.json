{"cell_type":{"c1213efc":"code","e66a0f22":"code","64420889":"code","9e81c5dd":"code","6d422f10":"code","6885665b":"code","816db190":"code","d6015d52":"code","77cfe58e":"code","5fb9faf9":"code","b4819dda":"code","9fff25a2":"code","08f69c5d":"markdown","fc0a0082":"markdown","f020202f":"markdown","ffd5c3d7":"markdown","48de0061":"markdown","266da160":"markdown","af65fd20":"markdown","ec9da347":"markdown"},"source":{"c1213efc":"import pandas as pd\nimport numpy as np","e66a0f22":"trainData = pd.read_csv('..\/input\/titanic\/train.csv', dtype={\"Age\": np.float64},)\ntestData = pd.read_csv('..\/input\/titanic\/test.csv', dtype={\"Age\": np.float64},)\nprint(trainData.info())\nprint(trainData)","64420889":"trainData.isnull().sum()","9e81c5dd":"testData.isnull().sum()","6d422f10":"trainData['Age'].fillna(trainData['Age'].median(), inplace=True)\ntrainData['Embarked'].fillna(trainData['Embarked'].mode()[0], inplace=True)\n\ntestData['Age'].fillna(testData['Age'].median(), inplace=True)\ntestData['Fare'].fillna(testData['Fare'].median(), inplace=True)","6885665b":"trainData.Sex = trainData.Sex.replace(['male', 'female'], [0, 1])\ntrainData.Embarked = trainData.Embarked.replace(['C', 'S', 'Q'], [0, 1, 2])\ntrainData['FamilySize'] = trainData['Parch'] + trainData['SibSp']\ntrainData = trainData.drop(columns = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'Parch', 'SibSp'])\n\ntestData.Sex = testData.Sex.replace(['male', 'female'], [0, 1])\ntestData.Embarked = testData.Embarked.replace(['C', 'S', 'Q'], [0, 1, 2])\ntestData['FamilySize'] = testData['Parch'] + testData['SibSp']\ntestData = testData.drop(columns = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'Parch', 'SibSp'])","816db190":"trainData","d6015d52":"X_train = trainData.drop(columns = ['Survived'])\nY_train = trainData['Survived']","77cfe58e":"from sklearn.preprocessing import StandardScaler  \nscaler = StandardScaler()  \nscaler.fit(X_train)  \nX_train = scaler.transform(X_train)  \ntestData = scaler.transform(testData)  ","5fb9faf9":"from sklearn.neural_network import MLPClassifier\nclf = MLPClassifier(solver='lbfgs', alpha=1e-5, hidden_layer_sizes=(8, 2), random_state=1, max_iter=10000)\nclf.fit(X_train, Y_train)\nMLPClassifier(alpha=1e-05, hidden_layer_sizes=(8, 2), random_state=1, solver='lbfgs', max_iter=10000)","b4819dda":"from sklearn.model_selection import cross_val_score\nscores = cross_val_score(clf, X_train, Y_train, cv=10)","9fff25a2":"print(\"%0.2f accuracy with a standard deviation of %0.2f\" % (scores.mean(), scores.std()))","08f69c5d":"We should check for empty values and replace them with mean value of whole column","fc0a0082":"First, we will split our train data","f020202f":"Cabin column is mostly empty so i wont bother filling it. Instead i will drop it later.","ffd5c3d7":"Now we will learn our model based using Multi-layer Perception Classifier","48de0061":"MLP is sensitive to feature scaling, so i will scale my data","266da160":"Now i will cross validate training values with my model predictions and do it for 10 different random data splits","af65fd20":"its time to build neural network","ec9da347":"We should drop non-essential and irrelevant columns.\nAlso family and spouses can be added to the same column\nand we will clean up a bit."}}