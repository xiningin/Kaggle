{"cell_type":{"dbc7d58f":"code","99f7d6c0":"code","af7c2cc2":"code","b2a33b6e":"code","60b4501e":"code","28fbf634":"code","128d7861":"code","7744c7b9":"code","8526ebc2":"code","2d4f4903":"code","0fc5d919":"code","3fe44a5b":"code","5bde61f5":"code","daf84f30":"code","75d512f6":"code","d97b2bc2":"code","c9526664":"code","2580ab9d":"code","e482dfb4":"code","915a6748":"code","cd0c3c8f":"code","d52e2dec":"code","a90471fc":"code","6c7a9f94":"code","bf769a1f":"code","e28349b5":"code","db11c656":"code","74383731":"code","363136a8":"code","bd402c07":"code","d6c353e1":"code","694e88e5":"code","75538955":"code","180085af":"code","3ebf0bb0":"code","0bbd783b":"code","75749ffe":"code","26614fd3":"code","01c1cf5b":"code","d9c086d2":"code","476d1236":"code","f0e25155":"code","365114e4":"code","e7885b19":"code","9a02d8f4":"code","4a17837a":"code","eaaf2d52":"code","75559d72":"code","3bb5c349":"code","376a21c5":"code","8b656a00":"code","56077f1d":"code","abd364c8":"code","1788cba0":"code","1f8d6ee1":"code","0e508a38":"code","93c31838":"code","a1cf8940":"code","96732178":"code","c904bfb6":"code","3b4c4094":"code","fd9425b8":"code","0c6f71a5":"code","384b9f8a":"code","6ade1e11":"code","4792e662":"code","eebc70bb":"code","bd38dddb":"code","fd959157":"code","447203dd":"code","41548640":"code","d482e185":"code","5545eb3c":"code","8c53e9fa":"code","3cf73352":"code","b86edbbd":"code","4ec4c63f":"code","1715db69":"code","ce7798c2":"code","ed8de7b5":"code","28934346":"code","9c8b7494":"code","89a3dc41":"code","5c02edc9":"code","0e42994d":"code","f9f58380":"code","bb98c4fc":"code","0a6a00ab":"code","225f4381":"code","e6bc9cd6":"code","9342b27d":"code","a7b512c1":"code","e8898019":"code","ef988273":"code","60fa6796":"code","526cecfa":"code","ad593e18":"code","189c047c":"code","09a9ccd5":"code","eb63f0b0":"code","740dd5de":"code","c35eaa33":"code","d22c5e6c":"code","5d1cfd61":"code","a5a6e363":"code","a03cd7c2":"code","24a3efaf":"markdown","498b094c":"markdown","3def83a1":"markdown","9d1ff517":"markdown","586563d5":"markdown","8b755e94":"markdown","c6714748":"markdown","46533d41":"markdown","8fcdb810":"markdown","7c757f72":"markdown","db49f167":"markdown","236560ba":"markdown","913997f0":"markdown","39c9e477":"markdown","b988a5f2":"markdown","61b3b21d":"markdown","52c3fafa":"markdown","8ac6e485":"markdown","12891ab8":"markdown","91ebfaa3":"markdown","6e1af9fc":"markdown","1f3006df":"markdown","b6593b56":"markdown","637c947a":"markdown","bdc3e0c5":"markdown","1263825b":"markdown","b79dddaf":"markdown","2c839d16":"markdown","c1da67a7":"markdown","96225c52":"markdown","327f4d43":"markdown","28dc19a5":"markdown"},"source":{"dbc7d58f":"# from IPython.core.display import HTML","99f7d6c0":"# HTML('''<div class=\"flourish-embed flourish-cards\" data-src=\"visualisation\/1810417\" data-url=\"https:\/\/flo.uri.sh\/visualisation\/1810417\/embed\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","af7c2cc2":"# HTML('''<div class=\"flourish-embed flourish-cards\" data-src=\"visualisation\/1816605\" data-url=\"https:\/\/flo.uri.sh\/visualisation\/1816605\/embed\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","b2a33b6e":"# get latest version of pip\n# !pip install --upgrade pip\n\n# for calender map\n# ! pip install calmap\n\n# to convert us statenames to state codes\n# ! pip install us\n\n# to get continent name from country name\n# ! pip install pycountry_convert","60b4501e":"# math opeations\n# import math\n# produce random numbers\n# import random\n# to load json files\nimport json\n# datetime oprations\nfrom datetime import timedelta\n# to get web contents\nfrom urllib.request import urlopen\n\n# for numerical analyiss\nimport numpy as np\n# to store and process data in dataframe\nimport pandas as pd","28fbf634":"# basic visualization package\nimport matplotlib.pyplot as plt\n# advanced ploting\nimport seaborn as sns\n\n# interactive visualization\nimport plotly.express as px\nimport plotly.graph_objs as go\n# import plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots","128d7861":"# for offline ploting\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)","7744c7b9":"# converter\n# from pandas.plotting import register_matplotlib_converters\n# register_matplotlib_converters()   \n\n# hide warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# to USA states details\n# import us","8526ebc2":"# color pallette\ncnf, dth, rec, act = '#393e46', '#ff2e63', '#21bf73', '#fe9801' \n\n# seaborn plot style\n# sns.set_style('darkgrid')","2d4f4903":"# list files\n# ==========\n\n# !ls ..\/input\/corona-virus-report","0fc5d919":"# Full data\n# =========\n\nfull_table = pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv')\n# full_table.head()","3fe44a5b":"# Grouped by day, country\n# =======================\n\nfull_grouped = pd.read_csv('..\/input\/corona-virus-report\/full_grouped.csv')\nfull_grouped['Date'] = pd.to_datetime(full_grouped['Date'])\n# full_grouped.head()","5bde61f5":"# Day wise\n# ========\n\nday_wise = pd.read_csv('..\/input\/corona-virus-report\/day_wise.csv')\nday_wise['Date'] = pd.to_datetime(day_wise['Date'])\n# day_wise.head()","daf84f30":"# Country wise\n# ============\n\ncountry_wise = pd.read_csv('..\/input\/corona-virus-report\/country_wise_latest.csv')\ncountry_wise = country_wise.replace('', np.nan).fillna(0)\n# country_wise.head()","75d512f6":"# Worldometer data\n# ================\n\nworldometer_data = pd.read_csv('..\/input\/corona-virus-report\/worldometer_data.csv')\nworldometer_data = worldometer_data.replace('', np.nan).fillna(0)\n# worldometer_data.head()","d97b2bc2":"temp = day_wise[['Date','Deaths', 'Recovered', 'Active']].tail(1)\ntemp = temp.melt(id_vars=\"Date\", value_vars=['Active', 'Deaths', 'Recovered'])\nfig = px.treemap(temp, path=[\"variable\"], values=\"value\", height=225, \n                 color_discrete_sequence=[act, rec, dth])\nfig.data[0].textinfo = 'label+text+value'\nfig.show()","c9526664":"def plot_map(df, col, pal):\n    df = df[df[col]>0]\n    fig = px.choropleth(df, locations=\"Country\/Region\", locationmode='country names', \n                  color=col, hover_name=\"Country\/Region\", \n                  title=col, hover_data=[col], color_continuous_scale=pal)\n#     fig.update_layout(coloraxis_showscale=False)\n    fig.show()","2580ab9d":"plot_map(country_wise, 'Confirmed', 'matter')","e482dfb4":"plot_map(country_wise, 'Deaths', 'matter')","915a6748":"plot_map(country_wise, 'Deaths \/ 100 Cases', 'matter')","cd0c3c8f":"# Over the time\n\nfig = px.choropleth(full_grouped, locations=\"Country\/Region\", \n                    color=np.log(full_grouped[\"Confirmed\"]),\n                    locationmode='country names', hover_name=\"Country\/Region\", \n                    animation_frame=full_grouped[\"Date\"].dt.strftime('%Y-%m-%d'),\n                    title='Cases over time', color_continuous_scale=px.colors.sequential.matter)\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","d52e2dec":"def plot_daywise(col, hue):\n    fig = px.bar(day_wise, x=\"Date\", y=col, width=700, color_discrete_sequence=[hue])\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\")\n    fig.show()","a90471fc":"def plot_daywise_line(col, hue):\n    fig = px.line(day_wise, x=\"Date\", y=col, width=700, color_discrete_sequence=[hue])\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\")\n    fig.show()","6c7a9f94":"temp = full_grouped.groupby('Date')['Recovered', 'Deaths', 'Active'].sum().reset_index()\ntemp = temp.melt(id_vars=\"Date\", value_vars=['Recovered', 'Deaths', 'Active'],\n                 var_name='Case', value_name='Count')\ntemp.head()\n\nfig = px.area(temp, x=\"Date\", y=\"Count\", color='Case', height=600, width=700,\n             title='Cases over time', color_discrete_sequence = [rec, dth, act])\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","bf769a1f":"plot_daywise('Confirmed', '#333333')","e28349b5":"plot_daywise('Active', '#333333')","db11c656":"plot_daywise('New cases', '#333333')","74383731":"plot_daywise('Deaths', dth)","363136a8":"plot_daywise('New deaths', dth)","bd402c07":"plot_daywise('Recovered', rec)","d6c353e1":"plot_daywise('New recovered', rec)","694e88e5":"plot_daywise_line('Deaths \/ 100 Cases', dth)","75538955":"plot_daywise_line('Deaths \/ 100 Recovered', dth)","180085af":"plot_daywise_line('Recovered \/ 100 Cases', rec)","3ebf0bb0":"plot_daywise('No. of countries', '#035aa6')","0bbd783b":"temp = day_wise[['Date', 'Recovered', 'Active']]\ntemp = temp.melt(id_vars='Date', value_vars=['Recovered', 'Active'], \n                 var_name='Variable', value_name='Count')\npx.line(temp, x='Date', y='Count', color='Variable')","75749ffe":"def plot_hbar(df, col, n, hover_data=[]):\n    fig = px.bar(df.sort_values(col).tail(n), \n                 x=col, y=\"Country\/Region\", color='WHO Region',  \n                 text=col, orientation='h', width=700, hover_data=hover_data,\n                 color_discrete_sequence = px.colors.qualitative.Dark2)\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\", \n                      yaxis_categoryorder = 'total ascending',\n                      uniformtext_minsize=8, uniformtext_mode='hide')\n    fig.show()","26614fd3":"def plot_hbar_wm(col, n, min_pop=1000000, sort='descending'):\n    df = worldometer_data[worldometer_data['Population']>min_pop]\n    df = df.sort_values(col, ascending=True).tail(n)\n    fig = px.bar(df,\n                 x=col, y=\"Country\/Region\", color='WHO Region',  \n                 text=col, orientation='h', width=700, \n                 color_discrete_sequence = px.colors.qualitative.Dark2)\n    fig.update_layout(title=col+' (Only countries with > 1M Pop)', \n                      xaxis_title=\"\", yaxis_title=\"\", \n                      yaxis_categoryorder = 'total ascending',\n                      uniformtext_minsize=8, uniformtext_mode='hide')\n    fig.show()","01c1cf5b":"plot_hbar(country_wise, 'Confirmed', 15)","d9c086d2":"plot_hbar(country_wise, 'Active', 15)","476d1236":"plot_hbar(country_wise, 'New cases', 15)","f0e25155":"plot_hbar(country_wise, 'Deaths', 15)","365114e4":"plot_hbar(country_wise, 'New deaths', 15)","e7885b19":"plot_hbar(country_wise, 'Deaths \/ 100 Cases', 15)","9a02d8f4":"plot_hbar(country_wise, 'Recovered', 15)","4a17837a":"plot_hbar(country_wise, 'New recovered', 15)","eaaf2d52":"plot_hbar(country_wise, 'Recovered \/ 100 Cases', 15)","75559d72":"plot_hbar(country_wise, '1 week change', 15)","3bb5c349":"plot_hbar(country_wise, '1 week % increase', 15)","376a21c5":"plot_hbar_wm('Tot Cases\/1M pop', 15, 1000000)","8b656a00":"plot_hbar_wm('Deaths\/1M pop', 15, 1000000)","56077f1d":"plot_hbar_wm('TotalTests', 15, 1000000)","abd364c8":"plot_hbar_wm('Tests\/1M pop', 15)","1788cba0":"def plot_stacked(col):\n    fig = px.bar(full_grouped, x=\"Date\", y=col, color='Country\/Region', \n                 height=600, title=col, \n                 color_discrete_sequence = px.colors.cyclical.mygbm)\n    fig.update_layout(showlegend=True)\n    fig.show()","1f8d6ee1":"def plot_line(col):\n    fig = px.line(full_grouped, x=\"Date\", y=col, color='Country\/Region', \n                  height=600, title=col, \n                  color_discrete_sequence = px.colors.cyclical.mygbm)\n    fig.update_layout(showlegend=True)\n    fig.show()","0e508a38":"plot_stacked('Confirmed')","93c31838":"plot_stacked('Deaths')","a1cf8940":"plot_stacked('New cases')","96732178":"plot_stacked('Active')","c904bfb6":"plot_line('Confirmed')","3b4c4094":"plot_line('Deaths')","fd9425b8":"plot_line('New cases')","0c6f71a5":"plot_line('Active')","384b9f8a":"temp = pd.merge(full_grouped[['Date', 'Country\/Region', 'Confirmed', 'Deaths']], \n                day_wise[['Date', 'Confirmed', 'Deaths']], on='Date')\ntemp['% Confirmed'] = round(temp['Confirmed_x']\/temp['Confirmed_y'], 3)*100\ntemp['% Deaths'] = round(temp['Deaths_x']\/temp['Deaths_y'], 3)*100\ntemp.head()","6ade1e11":"fig = px.bar(temp, x='Date', y='% Confirmed', color='Country\/Region', \n             range_y=(0, 100), title='% of Cases from each country', \n             color_discrete_sequence=px.colors.qualitative.Prism)\nfig.show()","4792e662":"fig = px.bar(temp, x='Date', y='% Deaths', color='Country\/Region', \n             range_y=(0, 100), title='% of Cases from each country', \n             color_discrete_sequence=px.colors.qualitative.Prism)\nfig.show()","eebc70bb":"def gt_n(n):\n    countries = full_grouped[full_grouped['Confirmed']>n]['Country\/Region'].unique()\n    temp = full_table[full_table['Country\/Region'].isin(countries)]\n    temp = temp.groupby(['Country\/Region', 'Date'])['Confirmed'].sum().reset_index()\n    temp = temp[temp['Confirmed']>n]\n    # print(temp.head())\n\n    min_date = temp.groupby('Country\/Region')['Date'].min().reset_index()\n    min_date.columns = ['Country\/Region', 'Min Date']\n    # print(min_date.head())\n\n    from_nth_case = pd.merge(temp, min_date, on='Country\/Region')\n    from_nth_case['Date'] = pd.to_datetime(from_nth_case['Date'])\n    from_nth_case['Min Date'] = pd.to_datetime(from_nth_case['Min Date'])\n    from_nth_case['N days'] = (from_nth_case['Date'] - from_nth_case['Min Date']).dt.days\n    # print(from_nth_case.head())\n\n    fig = px.line(from_nth_case, x='N days', y='Confirmed', color='Country\/Region', \n                  title='N days from '+str(n)+' case', height=600)\n    fig.show()","bd38dddb":"gt_n(100000)","fd959157":"fig = px.scatter(country_wise.sort_values('Deaths', ascending=False).iloc[:20, :], \n                 x='Confirmed', y='Deaths', color='Country\/Region', size='Confirmed', \n                 height=700, text='Country\/Region', log_x=True, log_y=True, \n                 title='Deaths vs Confirmed (Scale is in log10)')\nfig.update_traces(textposition='top center')\nfig.update_layout(showlegend=False)\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","447203dd":"def plot_treemap(col):\n    fig = px.treemap(country_wise, path=[\"Country\/Region\"], values=col, height=700,\n                 title=col, color_discrete_sequence = px.colors.qualitative.Dark2)\n    fig.data[0].textinfo = 'label+text+value'\n    fig.show()","41548640":"plot_treemap('Confirmed')","d482e185":"plot_treemap('Deaths')","5545eb3c":"def plot_bubble(col, pal):\n    temp = full_grouped[full_grouped[col]>0].sort_values('Country\/Region', ascending=False)\n    fig = px.scatter(temp, x='Date', y='Country\/Region', size=col, color=col, height=3000,\n                    color_continuous_scale=pal)\n    fig.update_layout(yaxis = dict(dtick = 1))\n    fig.update(layout_coloraxis_showscale=False)\n    fig.show()","8c53e9fa":"plot_bubble('New cases', 'Viridis')","3cf73352":"plot_bubble('Active', 'Viridis')","b86edbbd":"temp = full_grouped[['Date', 'Country\/Region', 'New cases']]\ntemp['New cases reported ?'] = temp['New cases']!=0\ntemp['New cases reported ?'] = temp['New cases reported ?'].astype(int)\n# temp.head()","4ec4c63f":"fig = go.Figure(data=go.Heatmap(\n        z=temp['New cases reported ?'],\n        x=temp['Date'],\n        y=temp['Country\/Region'],\n        colorscale='Emrld',\n        showlegend=False,\n        text=temp['New cases reported ?']))\n\nfig.update_layout(yaxis = dict(dtick = 1))\nfig.update_layout(height=3000)\nfig.show()","1715db69":"# HTML('''<div class=\"flourish-embed flourish-bar-chart-race\" data-src=\"visualisation\/1571387\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","ce7798c2":"# temp = full_table.groupby(['Country\/Region', 'Date', ])['Confirmed', 'Deaths']\n# temp = temp.sum().diff().reset_index()\n\n# mask = temp['Country\/Region'] != temp['Country\/Region'].shift(1)\n\n# temp.loc[mask, 'Confirmed'] = np.nan\n# temp.loc[mask, 'Deaths'] = np.nan\n\n# countries = full_table[full_table['Confirmed']>100000]['Country\/Region'].unique()\n\n# temp = temp[temp['Country\/Region'].isin(countries)]\n\n\n# n_cols = 3\n# n_rows = math.ceil(len(countries)\/n_cols)\n\n# fig = make_subplots(rows=n_rows, cols=n_cols, shared_xaxes=False, subplot_titles=countries)\n\n# for ind, country in enumerate(countries):\n#     row = int((ind\/n_cols)+1)\n#     col = int((ind%n_cols)+1)\n#     fig.add_trace(go.Bar(x=temp['Date'], y=temp.loc[temp['Country\/Region']==country, 'Confirmed'], name=country), row=row, col=col)\n    \n# fig.update_layout(height=4000, title_text=\"No. of new cases in each Country\")\n# fig.update_layout(showlegend=False)\n# fig.show()","ed8de7b5":"usa_df = pd.read_csv('..\/input\/corona-virus-report\/usa_county_wise.csv')\nusa_latest = usa_df[usa_df['Date'] == max(usa_df['Date'])]\nusa_grouped = usa_latest.groupby('Province_State')['Confirmed', 'Deaths'].sum().reset_index()","28934346":"us_code = {'Alabama': 'AL', 'Alaska': 'AK', 'American Samoa': 'AS', 'Arizona': 'AZ', 'Arkansas': 'AR', \n    'California': 'CA','Colorado': 'CO','Connecticut': 'CT','Delaware': 'DE', 'District of Columbia': 'DC', \n    'Florida': 'FL', 'Georgia': 'GA', 'Guam': 'GU', 'Hawaii': 'HI', 'Idaho': 'ID', 'Illinois': 'IL',\n    'Indiana': 'IN','Iowa': 'IA','Kansas': 'KS','Kentucky': 'KY','Louisiana': 'LA','Maine': 'ME',\n    'Maryland': 'MD','Massachusetts': 'MA','Michigan': 'MI','Minnesota': 'MN','Mississippi': 'MS',\n    'Missouri': 'MO','Montana': 'MT','Nebraska': 'NE','Nevada': 'NV','New Hampshire': 'NH', 'New Jersey': 'NJ',\n    'New Mexico': 'NM', 'New York': 'NY', 'North Carolina': 'NC', 'North Dakota': 'ND', 'Northern Mariana Islands':'MP',\n    'Ohio': 'OH', 'Oklahoma': 'OK', 'Oregon': 'OR', 'Pennsylvania': 'PA', 'Puerto Rico': 'PR',\n    'Rhode Island': 'RI', 'South Carolina': 'SC', 'South Dakota': 'SD', 'Tennessee': 'TN', 'Texas': 'TX',\n    'Utah': 'UT', 'Vermont': 'VT', 'Virgin Islands': 'VI', 'Virginia': 'VA', 'Washington': 'WA',\n    'West Virginia': 'WV', 'Wisconsin': 'WI', 'Wyoming': 'WY'}\n\nusa_grouped['Code'] = usa_grouped['Province_State'].map(us_code)","9c8b7494":"fig = px.choropleth(usa_grouped, color='Confirmed', locations='Code', locationmode=\"USA-states\", \n                    scope=\"usa\", color_continuous_scale=\"RdGy\", title='No. of cases in USA')\nfig","89a3dc41":"# with urlopen('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/geojson-counties-fips.json') as response:\n#     counties = json.load(response)\n\n# fig = px.choropleth(usa_latest, geojson=counties, locations='FIPS', color='Confirmed',\n#                            color_continuous_scale=\"Peach\",\n#                            scope=\"usa\",\n#                            labels={'Confirmed':'Confirmed'})\n# fig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n# fig.show()","5c02edc9":"who = country_wise.groupby('WHO Region')['Confirmed', 'Deaths', 'Recovered', 'Active',\n                                         'New cases', 'Confirmed last week'].sum().reset_index()\nwho['Fatality Rate'] = round((who['Deaths'] \/ who['Confirmed']) * 100, 2)\nwho['Recovery Rate'] = (who['Recovered'] \/ who['Confirmed']) * 100\n\nwho_g = full_grouped.groupby(['WHO Region', 'Date'])['Confirmed', 'Deaths', 'Recovered', \n                                                     'Active','New cases', 'New deaths'].sum().reset_index()","0e42994d":"def plot_hbar(col, hover_data=[]):\n    fig = px.bar(who.sort_values(col), \n                 x=col, y=\"WHO Region\", color='WHO Region',  \n                 text=col, orientation='h', width=700, hover_data=hover_data,\n                 color_discrete_sequence = px.colors.qualitative.Dark2)\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\", \n                      yaxis_categoryorder = 'total ascending',\n                      uniformtext_minsize=8, uniformtext_mode='hide')\n    fig.show()","f9f58380":"plot_hbar('Confirmed')","bb98c4fc":"plot_hbar('Deaths')","0a6a00ab":"plot_hbar('Fatality Rate')","225f4381":"temp = worldometer_data[worldometer_data['WHO Region']!=0]","e6bc9cd6":"fig = px.scatter(temp, x='TotalCases', y='TotalDeaths', color='WHO Region', \n                 height=700, hover_name='Country\/Region', log_x=True, log_y=True, \n                 title='Confirmed vs Deaths',\n                 color_discrete_sequence=px.colors.qualitative.Vivid)\nfig.update_traces(textposition='top center')\n# fig.update_layout(showlegend=False)\n# fig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","9342b27d":"fig = px.scatter(temp, x='Population', y='TotalCases', color='WHO Region', \n                 height=700, hover_name='Country\/Region', log_x=True, log_y=True, \n                 title='Population vs Confirmed',\n                 color_discrete_sequence=px.colors.qualitative.Vivid)\nfig.update_traces(textposition='top center')\n# fig.update_layout(showlegend=False)\n# fig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","a7b512c1":"px.bar(who_g, x=\"Date\", y=\"Confirmed\", color='WHO Region', \n       height=600, title='Confirmed', \n       color_discrete_sequence=px.colors.qualitative.Vivid)","e8898019":"px.bar(who_g, x=\"Date\", y=\"New cases\", color='WHO Region', \n       height=600, title='New cases', \n       color_discrete_sequence=px.colors.qualitative.Vivid)","ef988273":"px.box(worldometer_data, x='WHO Region', y='TotalCases', color='WHO Region',\n       title='Distribution of country wise no. of cases in different WHO Region')","60fa6796":"full_grouped['Week No.'] = full_grouped['Date'].dt.strftime('%U')\nweek_wise = full_grouped.groupby('Week No.')['Confirmed', 'Deaths', 'Recovered', 'Active', 'New cases', 'New deaths', 'New recovered'].sum().reset_index()","526cecfa":"def plot_weekwise(col, hue):\n    fig = px.bar(week_wise, x=\"Week No.\", y=col, width=700, color_discrete_sequence=[hue])\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\")\n    fig.show()","ad593e18":"plot_weekwise('Confirmed', '#000000')","189c047c":"plot_weekwise('Deaths', dth)","09a9ccd5":"plot_weekwise('New cases', '#cd6684')","eb63f0b0":"full_grouped['Month'] = pd.DatetimeIndex(full_grouped['Date']).month\nmonth_wise = full_grouped.groupby('Month')['Confirmed', 'Deaths', 'Recovered', 'Active', 'New cases', 'New deaths', 'New recovered'].sum().reset_index()","740dd5de":"def plot_monthwise(col, hue):\n    fig = px.bar(month_wise, x=\"Month\", y=col, width=700, color_discrete_sequence=[hue])\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\")\n    fig.show()","c35eaa33":"plot_monthwise('Confirmed', '#000000')","d22c5e6c":"plot_monthwise('Deaths', dth)","5d1cfd61":"plot_monthwise('New cases', '#cd6684')","a5a6e363":"temp = country_wise[country_wise['Active']==0]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp.reset_index(drop=True)","a03cd7c2":"happiness_report = pd.read_csv('..\/input\/world-happiness\/2019.csv')\nhappiness_report = happiness_report[['Country or region', 'Healthy life expectancy']]\n\ntemp = country_wise.merge(happiness_report, left_on='Country\/Region', right_on='Country or region')\npx.scatter(temp, y='Deaths \/ 100 Cases', x='Healthy life expectancy', color='WHO Region', hover_data=['Country\/Region'])","24a3efaf":"# Libraries","498b094c":"# Top 20 Countries","3def83a1":"# Epidemic Span","9d1ff517":"# Graph after 1M cases","586563d5":"### Load libraries","8b755e94":"# WHO Region Wise","c6714748":"### Timeline","46533d41":"# Countries with no more active cases","8fcdb810":"# Date vs","7c757f72":"https:\/\/www.kaggle.com\/imdevskp\/mers-outbreak-analysis  \nhttps:\/\/www.kaggle.com\/imdevskp\/sars-2003-outbreak-analysis  \nhttps:\/\/www.kaggle.com\/imdevskp\/western-africa-ebola-outbreak-analysis\n","db49f167":"### Acknowledgements\n\n> https:\/\/github.com\/CSSEGISandData\/COVID-19\n\n### Collection methodology\n\n> https:\/\/github.com\/imdevskp\/covid_19_jhu_data_web_scrap_and_cleaning\n\n### Disclaimer\n\n> * Data is from scrapped from JHU github repository. Any variation in the data there will also reflect in this notebook","236560ba":"# Dataset","913997f0":"# Running Bar Chart","39c9e477":"## Weekly Statistics","b988a5f2":"# Latest","61b3b21d":"> *https:\/\/en.wikipedia.org\/wiki\/WHO_regions*","52c3fafa":"https:\/\/app.flourish.studio\/visualisation\/1571387\/edit\n\n","8ac6e485":"# Cases over the time","12891ab8":"### Ships that had passengers with COVID-19","91ebfaa3":"# Composition of Cases","6e1af9fc":"# Analysis on similar pandemic\/epidemic\/outbreak","1f3006df":"# Comparison with similar epidemics","b6593b56":"# Bubble Plot","637c947a":"### Color, theme, color palettes","bdc3e0c5":"# Maps","1263825b":"# Healthy life expectancy vs Deaths \/ 100 Cases","b79dddaf":"# Confirmed vs Deaths","2c839d16":"### Install libraries","c1da67a7":"## Monthly statistics","96225c52":"https:\/\/www.kaggle.com\/imdevskp\/covid19-vs-sars-vs-mers-vs-ebola-vs-h1n1\n\n","327f4d43":"# Country Wise","28dc19a5":"# USA"}}