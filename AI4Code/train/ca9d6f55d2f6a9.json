{"cell_type":{"f27d653a":"code","eefa0415":"code","324265d4":"code","fa31c173":"code","03afae2a":"code","ad0ca4c4":"code","66e47d51":"code","e9797760":"code","bf52241c":"code","12e5ed48":"code","e38a850b":"code","ea68737f":"code","d12facfa":"code","69c6b316":"code","0c4c23f9":"code","ac986451":"code","9e2de797":"code","2761aaaf":"code","294116a5":"code","793c0ec0":"code","db188c21":"code","087e1ece":"code","c97d5464":"code","62f0ee95":"code","462a647c":"code","4a5a478c":"code","168ecda8":"code","eb64069f":"code","9efa8f6d":"code","922673d1":"code","20137af2":"code","13661a0a":"code","bdd95e5e":"code","f611f30d":"code","734434af":"code","a09bfeff":"code","d0b88506":"markdown","b956e58b":"markdown","dce7874b":"markdown","46a0b3a5":"markdown","8bf2bf48":"markdown","9e8c1b8f":"markdown","57b8b9d9":"markdown","7f16a4b7":"markdown","48fa436c":"markdown","c6ee2584":"markdown","8e70e324":"markdown"},"source":{"f27d653a":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport statsmodels.api as sm\n\nsns.set()\nrand = 9999","eefa0415":"df = pd.read_csv('..\/input\/nyc-property-sales\/nyc-rolling-sales.csv')\ndf.head()","324265d4":"# the column 'Unnamed: 0' is an iterator and is of no use here\n\ndf.drop('Unnamed: 0', axis=1, inplace=True)","fa31c173":"sum(df.duplicated())","03afae2a":"df = df.drop_duplicates(df.columns, keep='last')","ad0ca4c4":"# instead of '0's, the dataset seems to consist of '-'s', we should replace those now\n\ndf.replace({\"-\":0},inplace=True)","66e47d51":"# blank rows should instead be null values\n\ndf.replace(' ',np.nan, inplace=True)","e9797760":"df.info()","bf52241c":"# the column 'EASE-MENT' is blank and can be dropped\n\ndf.drop('EASE-MENT', axis=1, inplace=True)","12e5ed48":"for col in df.columns:\n    print(col, df[col].nunique())","e38a850b":"for col in ['BOROUGH', 'TAX CLASS AT PRESENT', 'TAX CLASS AT TIME OF SALE']:\n    print(df[col].value_counts())","ea68737f":"categoricals = ['BOROUGH', 'NEIGHBORHOOD', 'BUILDING CLASS CATEGORY', 'TAX CLASS AT PRESENT', \n                'ZIP CODE', 'YEAR BUILT', 'TAX CLASS AT TIME OF SALE', 'BUILDING CLASS AT TIME OF SALE',\n                'BUILDING CLASS AT PRESENT']\n\nfor col in categoricals:\n    df[col] = df[col].astype('category')","d12facfa":"floats = ['SALE PRICE', 'LAND SQUARE FEET', 'GROSS SQUARE FEET']\n\nfor col in floats:\n    df[col]=pd.to_numeric(df[col], errors='coerce')","69c6b316":"df.info()","0c4c23f9":"# 'ADDRESS' and 'APARTMENT NUMBER' are irrelevant to our data analysis\n\ndf.drop(labels=['ADDRESS', 'APARTMENT NUMBER'], axis=1, inplace=True)","ac986451":"# 'SALE DATE' can be split into month and year\n\ndf['SALE DATE']= pd.to_datetime(df['SALE DATE'], errors='coerce')\ndf['SALE MONTH'] = pd.DatetimeIndex(df['SALE DATE']).month.astype(\"category\")\ndf['SALE YEAR'] = pd.DatetimeIndex(df['SALE DATE']).year.astype(\"category\")\ndf.drop('SALE DATE', axis=1, inplace=True)","9e2de797":"null_pct = df.isnull().sum() \/ len(df)\nnull_pct = null_pct[null_pct>0]\nnull_pct","2761aaaf":"plt.figure(figsize=(10,10))\nsns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')\nplt.show()","294116a5":"plt.figure(figsize=(10,10))\nsns.heatmap(df.corr(), annot=True)\nplt.show()","793c0ec0":"plt.figure(figsize=(12,5))\nsns.displot(df['SALE PRICE'], bins=40, rug=True)\nplt.show()","db188c21":"df2 = df[(df['SALE PRICE'] > 10000) & (df['SALE PRICE'] < 10000000)]\n\nplt.figure(figsize=(12,5))\nsns.displot(df2['SALE PRICE'], bins=40, rug=True)\nplt.show()","087e1ece":"df2['LOG_PRICE'] = np.log(df2['SALE PRICE'])\nsns.displot(df2['LOG_PRICE'], bins=100)","c97d5464":"print(df2['LOG_PRICE'].skew())","62f0ee95":"sns.displot(df2['GROSS SQUARE FEET'], bins=80)","462a647c":"sns.displot(df2['LAND SQUARE FEET'], bins=100)","4a5a478c":"df3 = df2[(df2['GROSS SQUARE FEET'] < 8000) & (df2['LAND SQUARE FEET'] < 8000)]","168ecda8":"sns.displot(df3['GROSS SQUARE FEET'], bins=100)","eb64069f":"sns.displot(df3['LAND SQUARE FEET'], bins=100)","9efa8f6d":"df3['YEAR BUILT'].value_counts()","922673d1":"df4 = df3[df3['YEAR BUILT']!=0]","20137af2":"sns.distplot(df4['YEAR BUILT'], bins=100)","13661a0a":"sns.displot(df4['TOTAL UNITS'], bins=100)","bdd95e5e":"df5 = df4[(df4['TOTAL UNITS'] > 0) & (df4['TOTAL UNITS'] != 2261)]","f611f30d":"sns.displot(df5['TOTAL UNITS'], bins=100)","734434af":"plt.figure(figsize=(10,6))\nsns.boxplot(x='RESIDENTIAL UNITS', y='SALE PRICE', data=df5)\nplt.title('RESIDENTIAL UNITS vs SALE PRICE')\nplt.show()","a09bfeff":"plt.figure(figsize=(10,6))\nsns.boxplot(x='BOROUGH', y='SALE PRICE', data=df5)\nplt.title('RESIDENTIAL UNITS vs SALE PRICE')\nplt.show()","d0b88506":"This is better but still not normalized. Applying a log transformation will normalize our target variable and assist our future models. ","b956e58b":"Values of 'YEAR BUILT' that are 0 do not make sense and should be removed","dce7874b":"There are an incredible amount of small ($0) observations here that need to be removed as they are not useful for analysis","46a0b3a5":"Here, there are many values of '0' which again do not make sense but also many values at the extreme '2261'. With this abnormal amount of '2261' values, we can assume this is a placeholder value and remove them alongside the '0' values. ","8bf2bf48":"Next we look at 'YEAR BUILT'","9e8c1b8f":"We are seeing a similar issue with these two independent features. There are many extreme observations that can be removed to normalize our data. ","57b8b9d9":"Now our target variable is much more normalized.\n\nLet's take a look at the independent features...","7f16a4b7":"# Data Exploration \/ EDA","48fa436c":"There is a linear increase of sale price as you increase the amount of residential units up until 10 at which the sale price distributions vary greatly. This is due to a lack of data for units > 10.","c6ee2584":"From this figure, there is a much wider distribution of sale prices in borough 1 compared to the other 4 boroughs. Much like in the sale price vs residential units figure, there is not much data for borough 1.","8e70e324":"Next, 'TOTAL UNITS'"}}