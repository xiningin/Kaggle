{"cell_type":{"29434e4b":"code","53dfd293":"code","bb285d96":"code","b9b024cc":"code","62dca16a":"code","5441706d":"code","5321aa5d":"code","5d35041e":"code","5eb81d92":"code","083831dd":"code","89f6c4f0":"code","a0bf2162":"code","9f78a008":"code","3055fb2a":"code","d9aba749":"code","83ad3fe3":"code","a943a6f8":"code","6250c031":"code","76f649cc":"code","0dd5b219":"code","56fbd6fb":"code","c1ab93dc":"code","6495f562":"code","ab71900b":"code","0af61ef5":"code","3662e3c3":"code","80b87288":"code","50301bd2":"code","6adcb074":"code","95e9e250":"code","5c5f0f03":"code","8260431b":"code","31d7b076":"code","c1bc6494":"code","f993a79e":"code","85221c21":"code","e8ad5515":"code","79854e4c":"code","1d626756":"markdown","d31b64e0":"markdown","d271b695":"markdown","6c8460e1":"markdown","aa4e457a":"markdown","f9b01f28":"markdown","87514cc3":"markdown","1fda887f":"markdown","2eb5a28c":"markdown","4ee4e2b3":"markdown","59b3478c":"markdown"},"source":{"29434e4b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","53dfd293":"# importing libraries\n\nimport pandas as pd\nimport  numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport missingno as msno\n\nfrom sklearn.cluster import KMeans\nfrom scipy.cluster.hierarchy import dendrogram, linkage\nfrom sklearn.cluster import AgglomerativeClustering\nfrom sklearn.cluster import DBSCAN\nfrom sklearn import metrics\nfrom sklearn.datasets import make_blobs\nfrom sklearn.preprocessing import StandardScaler\n\nimport warnings \nwarnings.filterwarnings('ignore')\n\nplt.style.use('fivethirtyeight')\n%matplotlib inline","bb285d96":"df = pd.read_csv('\/kaggle\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv')","b9b024cc":"df.head()","62dca16a":"df.describe().T","5441706d":"df.info()","5321aa5d":"msno.bar(df)\nplt.show()","5d35041e":"# dropping useless column\n\ndf.drop('CustomerID', axis = 1, inplace = True)","5eb81d92":"# distribution plots\n\nplt.figure(figsize = (20, 8))\nplotnumber = 1\n\nfor col in ['Age', 'Annual Income (k$)', 'Spending Score (1-100)']:\n    if plotnumber <= 3:\n        ax = plt.subplot(1, 3, plotnumber)\n        sns.distplot(df[col])\n        \n    plotnumber += 1\n    \nplt.tight_layout()\nplt.show()","083831dd":"df['Gender'].value_counts()","89f6c4f0":"values = df['Gender'].value_counts()\nlabels = ['Male', 'Female']\n\nfig, ax = plt.subplots(figsize = (4, 4), dpi = 100)\nexplode = (0, 0.06)\n\npatches, texts, autotexts = ax.pie(values, labels = labels, autopct = '%1.2f%%', shadow = True,\n                                   startangle = 90, explode = explode)\n\nplt.setp(texts, color = 'orange')\nplt.setp(autotexts, size = 12, color = 'white')\nautotexts[1].set_color('black')\nplt.show()","a0bf2162":"plt.figure(figsize = (20, 8))\nplotnumber = 1\n\nfor col in ['Age', 'Annual Income (k$)', 'Spending Score (1-100)']:\n    if plotnumber <= 3:\n        ax = plt.subplot(1, 3, plotnumber)\n        sns.violinplot(x = col, y = 'Gender', data = df)\n        \n    plotnumber += 1\n    \nplt.tight_layout()\nplt.show()","9f78a008":"age_18_25 = df.Age[(df.Age >= 18) & (df.Age <= 25)]\nage_26_35 = df.Age[(df.Age >= 26) & (df.Age <= 35)]\nage_36_45 = df.Age[(df.Age >= 36) & (df.Age <= 45)]\nage_46_55 = df.Age[(df.Age >= 46) & (df.Age <= 55)]\nage_55above = df.Age[df.Age >= 55]","3055fb2a":"x_age = ['18-25', '26-35', '36-45', '46-55', '55+']\ny_age = [len(age_18_25.values), len(age_26_35.values), len(age_36_45.values), len(age_46_55.values),\n     len(age_55above.values)]\npx.bar(data_frame = df, x = x_age, y = y_age, color = x_age,\n       title = 'Number of customers per age group')","d9aba749":"px.scatter(data_frame = df, x = 'Annual Income (k$)', y = 'Spending Score (1-100)',\n          title = 'Relation between Annual Income and Spending Score')","83ad3fe3":"ss_1_20 = df['Spending Score (1-100)'][(df['Spending Score (1-100)'] >= 1) &\n                                       (df['Spending Score (1-100)'] <= 20)]\nss_21_40 = df['Spending Score (1-100)'][(df['Spending Score (1-100)'] >= 21) &\n                                       (df['Spending Score (1-100)'] <= 40)]\nss_41_60 = df['Spending Score (1-100)'][(df['Spending Score (1-100)'] >= 41) &\n                                       (df['Spending Score (1-100)'] <= 60)]\nss_61_80 = df['Spending Score (1-100)'][(df['Spending Score (1-100)'] >= 61) &\n                                       (df['Spending Score (1-100)'] <= 80)]\nss_81_100 = df['Spending Score (1-100)'][(df['Spending Score (1-100)'] >= 81) &\n                                       (df['Spending Score (1-100)'] <= 100)]\nx_ss = ['1-20', '21-40', '41-60', '61-80', '81-100']\ny_ss = [len(ss_1_20.values), len(ss_21_40.values), len(ss_41_60.values), len(ss_61_80.values),\n        len(ss_81_100.values)]\npx.bar(data_frame = df, x = x_ss, y = y_ss, color = x_ss,\n       title = 'Number of customers per Spending Score group')","a943a6f8":"ai_0_30 = df['Annual Income (k$)'][(df['Annual Income (k$)'] >= 0) & (df['Annual Income (k$)'] <= 30)]\nai_31_60 = df['Annual Income (k$)'][(df['Annual Income (k$)'] >= 31)&(df['Annual Income (k$)'] <= 60)]\nai_61_90 = df['Annual Income (k$)'][(df['Annual Income (k$)'] >= 61)&(df['Annual Income (k$)'] <= 90)]\nai_91_120 = df['Annual Income (k$)'][(df['Annual Income (k$)']>= 91)&(df['Annual Income (k$)']<=120)]\nai_121_150 = df['Annual Income (k$)'][(df['Annual Income (k$)']>=121)&(df['Annual Income (k$)']<=150)]\nx_ai = ['$ 0-30,000', '$ 30,001-60,000', '$ 60,001-90,000', '$ 90,001-120,000', '$ 120,000-150,000']\ny_ai = [len(ai_0_30.values) , len(ai_31_60.values) , len(ai_61_90.values) , len(ai_91_120.values),\n         len(ai_121_150.values)]\npx.bar(data_frame = df, x = x_ai, y = y_ai, color = x_ai,\n       title = 'Number of customers per Annual Income group')","6250c031":"X1 = df.loc[:, ['Age', 'Spending Score (1-100)']].values\n\nwcss= []\nfor k in range(1, 11):\n    kmeans = KMeans(n_clusters = k, init = 'k-means++')\n    kmeans.fit(X1)\n    wcss.append(kmeans.inertia_)\n\nplt.figure(figsize = (12, 7))\n\nplt.plot(range(1, 11), wcss, linewidth = 2, marker = '8')\nplt.title('Elbow Plot\\n', fontsize = 20)\nplt.xlabel('K')\nplt.ylabel('WCSS')\nplt.show()","76f649cc":"kmeans = KMeans(n_clusters = 4)\nlabels = kmeans.fit_predict(X1)\nprint(labels)","0dd5b219":"print(kmeans.cluster_centers_)","56fbd6fb":"plt.figure(figsize = (14, 8))\nplt.scatter(X1[:, 0], X1[:, 1], c = kmeans.labels_, s = 105)\nplt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], color = 'red', s = 250)\nplt.title('Clusters of Customers\\n', fontsize = 20)\nplt.xlabel('Age')\nplt.ylabel('Spending Score (1-100)')\nplt.show()","c1ab93dc":"X2 = df.loc[:, ['Age', 'Annual Income (k$)']].values\n\nwcss= []\nfor k in range(1, 11):\n    kmeans = KMeans(n_clusters = k, init = 'k-means++')\n    kmeans.fit(X2)\n    wcss.append(kmeans.inertia_)\n\nplt.figure(figsize = (12, 7))\n\nplt.plot(range(1, 11), wcss, linewidth = 2, marker = '8')\nplt.title('Elbow Plot\\n', fontsize = 20)\nplt.xlabel('K')\nplt.ylabel('WCSS')\nplt.show()","6495f562":"kmeans = KMeans(n_clusters = 4)\nlabels = kmeans.fit_predict(X2)\nprint(labels)","ab71900b":"plt.figure(figsize = (12, 8))\nplt.scatter(X2[:, 0], X2[:, 1], c = kmeans.labels_, s = 105)\nplt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], color = 'red', s = 250)\nplt.title('Clusters of Customers\\n', fontsize = 20)\nplt.xlabel('Age')\nplt.ylabel('Annual Income (k$)')\nplt.show()","0af61ef5":"X3 = df.loc[:, ['Annual Income (k$)', 'Spending Score (1-100)']].values\n\nwcss= []\nfor k in range(1, 11):\n    kmeans = KMeans(n_clusters = k, init = 'k-means++')\n    kmeans.fit(X3)\n    wcss.append(kmeans.inertia_)\n\nplt.figure(figsize = (12, 7))\n\nplt.plot(range(1, 11), wcss, linewidth = 2, marker = '8')\nplt.title('Elbow Plot\\n', fontsize = 20)\nplt.xlabel('K')\nplt.ylabel('WCSS')\nplt.show()","3662e3c3":"kmeans = KMeans(n_clusters = 5)\nlabels = kmeans.fit_predict(X3)\nprint(labels)","80b87288":"plt.figure(figsize = (12, 8))\nplt.scatter(X3[:, 0], X3[:, 1], c = kmeans.labels_, s = 105)\nplt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], color = 'red', s = 250)\nplt.title('Clusters of Customers\\n', fontsize = 20)\nplt.xlabel('Annual Income (k$)')\nplt.ylabel('Spending Score (1-100)')\nplt.show()","50301bd2":"X4 = df.iloc[:, 1:]\n\nwcss= []\nfor k in range(1, 11):\n    kmeans = KMeans(n_clusters = k, init = 'k-means++')\n    kmeans.fit(X4)\n    wcss.append(kmeans.inertia_)\n\nplt.figure(figsize = (12, 7))\n\nplt.plot(range(1, 11), wcss, linewidth = 2, marker = '8')\nplt.title('Elbow Plot\\n', fontsize = 20)\nplt.xlabel('K')\nplt.ylabel('WCSS')\nplt.show()","6adcb074":"kmeans = KMeans(n_clusters = 6)\nclusters = kmeans.fit_predict(X4)\nX4['label'] = clusters","95e9e250":"fig = px.scatter_3d(X4, x=\"Annual Income (k$)\", y=\"Spending Score (1-100)\", z=\"Age\",\n                    color = 'label', size = 'label')\nfig.show()","5c5f0f03":"plt.figure(figsize = (17, 8))\ndendo = dendrogram(linkage(X3, method = 'ward'))\nplt.title('Dendrogram', fontsize = 15)\nplt.show()","8260431b":"agc = AgglomerativeClustering(n_clusters = 5, affinity = 'euclidean', linkage = 'ward')\nlabels = agc.fit_predict(X3)","31d7b076":"plt.figure(figsize = (12, 8))\n\nplt.scatter(X3[labels == 0,0], X3[labels == 0,1], label = 'Cluster 1', s = 100)\nplt.scatter(X3[labels == 1,0], X3[labels == 1,1], label = 'Cluster 2', s = 100)\nplt.scatter(X3[labels == 2,0], X3[labels == 2,1], label = 'Cluster 3', s = 100)\nplt.scatter(X3[labels == 3,0], X3[labels == 3,1], label = 'Cluster 4', s = 100)\nplt.scatter(X3[labels == 4,0], X3[labels == 4,1], label = 'Cluster 5', s = 100)\n\nplt.legend(loc = 'best')\nplt.title('Clusters of Customers\\n ', fontsize = 20)\nplt.xlabel('Annual Income (k$)')\nplt.ylabel('Spending Score (1-100)')\nplt.show()","c1bc6494":"centers = [[1, 1], [-1, -1], [1, -1]]  \nX, labels_true = make_blobs(n_samples=750, centers=centers, cluster_std=0.4, \n                            random_state=0)  # generate sample blobs\nX = StandardScaler().fit_transform(X)","f993a79e":"# DBSCAN\ndb = DBSCAN(eps=0.3, min_samples=10).fit(X)\n\n# we are calculating these for showcasing in diagram\n# creating an array of true and false as the same size as db.labels\ncore_samples_mask = np.zeros_like(db.labels_, dtype=bool)  \ncore_samples_mask[db.core_sample_indices_] = True  # setting the indices of the core regions to True\nlabels = db.labels_  # similar to the model.fit() method, it gives the labels of the clustered data","85221c21":"# Number of clusters in labels, ignoring noise if present.\n\n# the label -1 is considered as noise by the DBSCAN algorithm\nn_clusters_ = len(set(labels)) - (1 if -1 in labels else 0) \nn_noise_ = list(labels).count(-1)  # calculating the number of clusters","e8ad5515":"print('Estimated number of clusters: %d' % n_clusters_)\nprint('Estimated number of noise points: %d' % n_noise_)\n\n\"\"\"Homogeneity metric of a cluster labeling given a ground truth.\n\nA clustering result satisfies homogeneity if all of its clusters\ncontain only data points which are members of a single class.\"\"\"\n\nprint(\"Homogeneity: %0.3f\" % metrics.homogeneity_score(labels_true, labels))","79854e4c":"# Plot result\nplt.figure(figsize = (10, 8))\n# Black  is used for noise.\nunique_labels = set(labels)  # identifying all the unique labels\/clusters\ncolors = [plt.cm.Spectral(each)\n          # creating the list of colours, generating the colourmap\n          for each in np.linspace(0, 1, len(unique_labels))]  \nfor k, col in zip(unique_labels, colors):\n    if k == -1:\n        # Black used for noise.\n        col = [0, 0, 0, 1]\n    class_member_mask = (labels == k)   # assigning class members for each class\n    xy = X[class_member_mask & core_samples_mask] # creating the list of points for each class  \n    plt.plot(xy[:, 0], xy[:, 1], 'o', markerfacecolor=tuple(col),markeredgecolor='k', markersize=14)\n    xy = X[class_member_mask & ~core_samples_mask] # creating the list of noise points   \n    plt.plot(xy[:, 0], xy[:, 1], 'o', markerfacecolor=tuple(col), markeredgecolor='k', markersize=14)\n    \nplt.title('Clustering using DBSCAN\\n', fontsize = 15)\nplt.show()","1d626756":"* Age group near 30-40 have the highest density.\n* Most customers have income in range of 50-80k.\n* Most of the customers have spending score of 50","d31b64e0":"kmeans clustering using **Annual Income** and **Spending Score**","d271b695":"Most of the customers annual income lies between 60k-90k.","6c8460e1":"kmeans clustering using **Age** and **Annual Income** columns","aa4e457a":"**K-Means Clustering**","f9b01f28":"There is no relation between the customers having annual income in the range of 20-40k and 80-140k but there is relation between customers who have annual income in the range of 40-60k.","87514cc3":"kmeans clustering using **Age** and **Spending Score** columns","1fda887f":"**DBSCAN**","2eb5a28c":"**Hierarchical Clustering**","4ee4e2b3":"Most of the customers spending score is between 41-60","59b3478c":"kmeans clustering using **Age**, **Annual Score** and **Spending Score**"}}