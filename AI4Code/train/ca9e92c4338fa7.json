{"cell_type":{"16675334":"code","6f1308c6":"code","6dd3e95e":"code","1ba6b114":"code","e0523051":"code","3cb0952b":"code","5cdd4c11":"code","f03b9a9f":"code","f407b21b":"code","86e8893f":"code","e1112c6e":"code","e4c570f1":"code","357f93f2":"code","c7f87860":"code","0c615c89":"code","a78dc62a":"code","fda941ff":"code","dd0faf5e":"code","31701540":"code","bf4b33be":"code","07c7b442":"code","28ec4f2d":"code","7047e640":"code","3972b975":"code","42808277":"code","f34b31cb":"code","19cfaead":"code","c8f3397a":"code","7dcf5786":"code","5020fcf0":"code","4b774312":"code","c96b7583":"code","f4ad2b58":"code","68f6055a":"code","978afc28":"code","f973362a":"code","91beec30":"code","351b5e21":"code","2f5132b1":"code","a4c79743":"code","6de2452a":"markdown","61803b91":"markdown","762ac467":"markdown"},"source":{"16675334":"import numpy as np\nimport pandas as pd\nimport pydicom\nimport os\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\nfrom PIL import Image\nfrom sklearn.metrics import mean_absolute_error","6f1308c6":"ROOT = \"..\/input\/osic-pulmonary-fibrosis-progression\"\n#DESIRED_SIZE = 256 # Memory issue\nDESIRED_SIZE = 128","6dd3e95e":"tr = pd.read_csv(f\"{ROOT}\/train.csv\")\ntr.drop_duplicates(keep=False, inplace=True, subset=['Patient','Weeks'])\nchunk = pd.read_csv(f\"{ROOT}\/test.csv\")\n\nprint(\"add infos\")\nsub = pd.read_csv(f\"{ROOT}\/sample_submission.csv\")\nsub['Patient'] = sub['Patient_Week'].apply(lambda x:x.split('_')[0])\nsub['Weeks'] = sub['Patient_Week'].apply(lambda x: int(x.split('_')[-1]))\nsub =  sub[['Patient','Weeks','Confidence','Patient_Week']]\nsub = sub.merge(chunk.drop('Weeks', axis=1), on=\"Patient\")","1ba6b114":"tr['WHERE'] = 'train'\nchunk['WHERE'] = 'val'\nsub['WHERE'] = 'test'\ndata = tr.append([chunk, sub])","e0523051":"data['min_week'] = data['Weeks']\ndata.loc[data.WHERE=='test','min_week'] = np.nan\ndata['min_week'] = data.groupby('Patient')['min_week'].transform('min')","3cb0952b":"base = data.loc[data.Weeks == data.min_week]\nbase = base[['Patient','FVC']].copy()\nbase.columns = ['Patient','min_FVC']\nbase['nb'] = 1\nbase['nb'] = base.groupby('Patient')['nb'].transform('cumsum')\nbase = base[base.nb==1]\nbase.drop('nb', axis=1, inplace=True)","5cdd4c11":"data = data.merge(base, on='Patient', how='left')\ndata['base_week'] = data['Weeks'] - data['min_week']\ndel base","f03b9a9f":"COLS = ['Sex','SmokingStatus']\nFE = []\nfor col in COLS:\n    for mod in data[col].unique():\n        FE.append(mod)\n        data[mod] = (data[col] == mod).astype(int)\n#=================","f407b21b":"#\ndata['age'] = (data['Age'] - data['Age'].min() ) \/ ( data['Age'].max() - data['Age'].min() )\ndata['BASE'] = (data['min_FVC'] - data['min_FVC'].min() ) \/ ( data['min_FVC'].max() - data['min_FVC'].min() )\ndata['week'] = (data['base_week'] - data['base_week'].min() ) \/ ( data['base_week'].max() - data['base_week'].min() )\ndata['percent'] = (data['Percent'] - data['Percent'].min() ) \/ ( data['Percent'].max() - data['Percent'].min() )\nFE += ['age','percent','week','BASE']","86e8893f":"tr = data.loc[data.WHERE=='train']\nchunk = data.loc[data.WHERE=='val']\nsub = data.loc[data.WHERE=='test']\ndel data","e1112c6e":"tr.shape, chunk.shape, sub.shape","e4c570f1":"def get_images(df, how=\"train\"):\n    xo = []\n    p = []\n    w  = []\n    for i in tqdm(range(df.shape[0])):\n        patient = df.iloc[i,0]\n        week = df.iloc[i,1]\n        try:\n            img_path = f\"{ROOT}\/{how}\/{patient}\/{week}.dcm\"\n            ds = pydicom.dcmread(img_path)\n            im = Image.fromarray(ds.pixel_array)\n            im = im.resize((DESIRED_SIZE,DESIRED_SIZE)) \n            im = np.array(im)\n            xo.append(im[np.newaxis,:,:])\n            p.append(patient)\n            w.append(week)\n        except:\n            pass\n    data = pd.DataFrame({\"Patient\":p,\"Weeks\":w})\n    return np.concatenate(xo, axis=0), data","357f93f2":"x, df_tr = get_images(tr, how=\"train\")","c7f87860":"x.shape, df_tr.shape","0c615c89":"idx = np.random.randint(x.shape[0])\nplt.imshow(x[idx], cmap=plt.cm.bone)\nplt.show()","a78dc62a":"df_tr = df_tr.merge(tr, how=\"left\", on=['Patient', 'Weeks'])","fda941ff":"y = df_tr['FVC'].values\nz = df_tr[FE].values","dd0faf5e":"z.shape","31701540":"import tensorflow as tf\nimport tensorflow.keras.backend as K\nimport tensorflow.keras.layers as L\nimport tensorflow.keras.models as M","bf4b33be":"C1, C2 = tf.constant(70, dtype='float32'), tf.constant(1000, dtype=\"float32\")\n#=============================#\ndef kloss(y_true, y_pred):\n    tf.dtypes.cast(y_true, tf.float32)\n    tf.dtypes.cast(y_pred, tf.float32)\n    sigma = y_pred[:, 1]\n    fvc_pred = y_pred[:, 0]\n    \n    #sigma_clip = sigma + C1\n    sigma_clip = tf.maximum(sigma, C1)\n    delta = tf.abs(y_true[:, 0] - fvc_pred)\n    delta = tf.minimum(delta, C2)\n    sq2 = tf.sqrt( tf.dtypes.cast(2, dtype=tf.float32) )\n    metric = (delta \/ sigma_clip)*sq2 + tf.math.log(sigma_clip* sq2)\n    return K.mean(metric)\n#=============================#\ndef kmae(y_true, y_pred):\n    tf.dtypes.cast(y_true, tf.float32)\n    tf.dtypes.cast(y_pred, tf.float32)\n    spread = tf.abs( (y_true[:, 0] -  y_pred[:, 0])  \/ y_true[:, 0] )\n    #spred = tf.square(y_true, y_pred[:, 0])\n    return K.mean(spread)\n#=============================#\n\ndef mloss(_lambda):\n    def loss(y_true, y_pred):\n        return _lambda * kloss(y_true, y_pred) + (1 - _lambda)*kmae(y_true, y_pred)\n    return loss\n#=================\ndef make_model():\n    inp = L.Input((DESIRED_SIZE,DESIRED_SIZE), name=\"input\")\n    z = L.Input((9,), name=\"Patient\")\n    x = L.Conv1D(50, 4, activation=\"relu\", name=\"conv1\")(inp)\n    x = L.MaxPool1D(2, name='pool1')(x)\n    \n    #x = L.Dropout(0.2)(x)\n    x = L.Conv1D(50, 4, activation=\"relu\", name=\"conv2\")(x)\n    x = L.MaxPool1D(2, name='pool2')(x)\n    \n    #x = L.Dropout(0.2)(x)\n    x = L.Conv1D(50, 4, activation=\"relu\", name=\"conv3\")(x)\n    x = L.MaxPool1D(2, name='pool3')(x)\n    \n    x = L.Flatten(name=\"features\")(x)\n    x = L.Dense(50, activation=\"relu\", name=\"d1\")(x)\n    l = L.Dense(10, activation=\"relu\", name=\"d2\")(z)\n    x = L.Concatenate(name=\"combine\")([x, l])\n    x = L.Dense(50, activation=\"relu\", name=\"d3\")(x)\n    preds = L.Dense(2, activation=\"relu\", name=\"preds\")(x)\n    \n    model = M.Model([inp, z], preds, name=\"CNN\")\n    model.compile(loss=mloss(0.5), optimizer=\"adam\", metrics=[kloss])\n    #model.compile(loss=kmae, optimizer=\"adam\", metrics=[kloss])\n    #model.compile(loss=kloss, optimizer=\"adam\", metrics=[kmae])#\n    return model","07c7b442":"net = make_model()\nprint(net.summary())","28ec4f2d":"x_min = np.min(x)\nx_max = np.max(x)\nxs = x - x_min \/ (x_max - x_min)","7047e640":"xs.shape, y.shape, x_min","3972b975":"net.fit([xs, z], y, batch_size=50, epochs=100) #, validation_split=0.1","42808277":"pred = net.predict([xs, z], batch_size=100, verbose=1)","f34b31cb":"sigma_opt = mean_absolute_error(y, pred[:, 0])\nsigma_mean = np.mean(pred[:, 1])\nprint(sigma_opt, sigma_mean)","19cfaead":"plt.plot(y)\nplt.plot(pred[:, 0])\n#plt.plot(pred[:, 1])","c8f3397a":"pred[:, 1].min(), pred[:, 1].max()","7dcf5786":"plt.hist(pred[:, 1])\nplt.title(\"uncertainty in prediction\")\nplt.show()","5020fcf0":"xe, df_te = get_images(sub, how=\"test\")\ndf_te = df_te.merge(sub, how=\"left\", on=['Patient', 'Weeks'])","4b774312":"x_te = xe - x_min \/ (x_max - x_min)\nze = df_te[FE].values\npe = net.predict([x_te, ze], batch_size=100, verbose=1)","c96b7583":"df_te['FVC1'] = pe[:, 0]\ndf_te['Confidence1'] = pe[:, 1]","f4ad2b58":"sub = sub.merge(df_te[['Patient','Weeks','FVC1','Confidence1']], how='left', \n                on=['Patient', 'Weeks'])\n#====================================================#","68f6055a":"sub.head()","978afc28":"subm = sub[['Patient_Week','FVC','Confidence','FVC1','Confidence1']].copy()","f973362a":"subm.loc[~subm.FVC1.isnull()].head(10)","91beec30":"subm.loc[~subm.FVC1.isnull(),'FVC'] = subm.loc[~subm.FVC1.isnull(),'FVC1']\nif sigma_mean<70:\n    subm['Confidence'] = sigma_opt\nelse:\n    subm.loc[~subm.FVC1.isnull(),'Confidence'] = subm.loc[~subm.FVC1.isnull(),'Confidence1']\n    subm.loc[subm.FVC1.isnull(),'Confidence'] = sigma_opt\n#","351b5e21":"subm.head()","2f5132b1":"subm.describe().T","a4c79743":"subm[[\"Patient_Week\",\"FVC\",\"Confidence\"]].to_csv(\"submission.csv\", index=False)","6de2452a":"### PREDICTION","61803b91":"### Quick Image processing","762ac467":"### BASELINE CNN "}}