{"cell_type":{"07b7d488":"code","87e1b17e":"code","8b7d83d9":"code","2ec9af02":"code","cb054dd6":"code","85dc65be":"code","f9d29a68":"code","f0dec721":"code","dd21daa9":"code","8ca47394":"code","e7449744":"code","73a5139f":"code","fc5c933b":"code","864e40a3":"code","bbee30fe":"code","162bce5f":"code","3cec9651":"code","86bb94f9":"code","86d0857b":"code","dd24ef99":"code","a371b799":"code","a1ca6d54":"code","35d6b932":"code","eb51d35a":"code","e5f6388a":"code","a115ed75":"code","8feecfc6":"code","0a7dd068":"code","bd19fa45":"markdown","fcd001e7":"markdown","eeffe428":"markdown","91fb51c5":"markdown","c8ab8bae":"markdown","225e7824":"markdown","c97dcdd9":"markdown","82d571f4":"markdown","c4b9c06c":"markdown","2cd4efec":"markdown","fb49bb06":"markdown","61d7d4fb":"markdown","be55ba68":"markdown","cef41124":"markdown","45e921e8":"markdown","7f205594":"markdown","a5ab28dd":"markdown","8a5fbd90":"markdown","1bb7a2db":"markdown","96ff41b9":"markdown","0c973404":"markdown","3fd78dd6":"markdown"},"source":{"07b7d488":"import matplotlib.pyplot as plt\nimport geopandas as gpd\nimport networkx as nx\nimport pandas as pd\nimport numpy as np\nimport matplotlib\nimport datetime, json, glob, unidecode\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()\nplt.rcParams.update({'font.size': 17, 'lines.linewidth':4})","87e1b17e":"# Updated confirmed cases in mexico\nc_pday = [3,4,5,5,5,5,5,6,6,7,7,7,11,15,26,41,53,82,93,118,164,203,251,316,367,405,475,585,717,848,993,1094,1215,1378,1510,1688,1890,2143,2439,2785,3181,3441,\n          3844,4219,4661,5014,5399,5847,6297,6875,7497,8261,8772,9501,10544,11633,12872,13842,14677,15529,16752,17799,19224,20739,22088,\n          23471,24905,26025,27634,29616,31522,33460,35022,36327,38324,40186,42595,45032,47144,49219,51633,54346,\n          56594,59567,62527,65856,68620,71105,74560,78023,81400,84627,87512,90664,93435,97326,101238,105680,110026,\n          113619,117103,120102,124301,129184,133974,139196,142690,146837,150264,154863,159793,165455,170485,175202,180545,\n          185122,191410,196847,202951,208392,212802,216852,220657,226089,231770,238511,245251,252165,256848,261750,268008,275003,\n          282283,289174,295268,299750,304435,311486,317635,324041,331298,338913,344224,349396,356255,362274,370712]\nmx_confirmed_cases = np.array(c_pday)\n\ndef get_date_list(base, total=len(mx_confirmed_cases)):\n    return [(base - datetime.timedelta(days=x)).strftime(\"%d-%b-%Y\") for x in range(total)][::-1]\n\n# Create data frame\nmx_covid = pd.DataFrame(mx_confirmed_cases, columns=['Confirmed Cases'])\n\n# Confirmed deads\nd_pday = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,6,8,12,16,20,28,29,37,50,60,79,94,125,141,174,194,233,273,296,332,406,449,486,546,650,686,712,\n          857,970,1069,1221,1305,1351,1434,1569,1732,1859,1972,2061,2154,2270,2507,2704,2961,3160,3353,\n          3465,3573,3926,4220,4477,4767,5045,5177,5332,5666,6090,6510,6989,7179,7394,7633,\n          8134,8597,9044,9415,9779,9930,10167,10637,11728,12545,13170,13511,13699,14053,14649,15357,\n          15944,16448,16872,17141,17580,18310,19080,19747,20394,20781,21825,22584,23377,24324,25060,25779,26381,26648,27121,27769,\n          28510,29189,29843,30366,30639,31119,32014,32796,33526,34191,34730,35006,35491,36327,36906,37574,38310,38888,39184,39485,\n          40400,41190,41908]\nmx_covid['Deceased'] = d_pday\n\n# Get the dates for the confirmed cases\ndate_list = get_date_list(datetime.datetime.today() - datetime.timedelta(days=1))\nmx_covid['Dates'] = date_list\n\n\n# Save data frame\nmx_covid.to_csv('covid_mx.csv',index=False)\n# mx_covid.head()","8b7d83d9":"# --------------\n# Mexico .shp\n# --------------\npath = '\/kaggle\/input\/mxstatesdataset\/Mexico_States.shp'\ndata = gpd.read_file(path)\ndata['NAME'] = data['NAME'].str.lower()\n# ---------------\n# Confirmed cases\n# ---------------\ndf = pd.read_csv('\/kaggle\/input\/covid19-mx\/casos_confirmados.csv')\ndf = df.dropna()\ndf.head()\ncenter_states = ['distrito federal', 'quer\u00e9taro', 'puebla', 'm\u00e9xico', 'morelos', 'hidalgo','tlaxcala']\ncases_per_state = dict()\nfor state in df.State.unique():\n    key = state.lower()\n    if key == 'ciudad de m\u00e9xico':\n        key = 'distrito federal'\n    if key == 'queretaro':\n        key = 'quer\u00e9taro'\n    cases_per_state[key] = len(df[df['State'] == state])\n\ndata['CPSTATE']= data['NAME'].map(cases_per_state)\ndata['coords'] = data['geometry'].apply(lambda x: x.representative_point().coords[:])\ndata['coords'] = [coords[0] for coords in data['coords']]\ncenter_mx = data.loc[data['NAME'].isin(center_states)]\n\ndata['CPSTATE'] = data['CPSTATE']*8\ncenter_mx = data.loc[data['NAME'].isin(center_states)]\n# ----------------\n# Complete dataset\n# ----------------\npath = '\/kaggle\/input\/covid19-mx\/covid-19_general_MX.csv'\ndf = pd.read_csv(path)\ndf['DIAS_INCUBACION'] = pd.to_datetime(df['FECHA_INGRESO'])-pd.to_datetime(df['FECHA_SINTOMAS'])\ndf['DIAS_INCUBACION'] = df['DIAS_INCUBACION'].dt.days\npositive_ip_g14 = df.loc[(df['DIAS_INCUBACION'] > 14) & (df['RESULTADO'] == 1)]","2ec9af02":"df.head()","cb054dd6":"fig, ax = plt.subplots(figsize=(4,1))\nax.text(0.0, 1.0, 'The dataset currently contains a total of {} individuals'.format(len(df)), dict(size=25))\nax.text(0.0, 0.5, 'from which {} individuals have died.'.format(len(df.loc[(df['FECHA_DEF'] != '9999-99-99') & (df.FECHA_DEF.notnull())])), dict(size=25))\nax.text(0.0, 0.0, 'There\\'s no information on recovered patients.'.format(len(df.loc[(df['FECHA_DEF'] != '9999-99-99') & (df.FECHA_DEF.notnull())])), dict(size=20))\nax.axis('off')\nplt.show()","85dc65be":"covid_positive = df.loc[df['RESULTADO'] == 1]\ndeads_positive = df.loc[(df['RESULTADO'] == 1) & (df['FECHA_DEF'] != '9999-99-99') & (df.FECHA_DEF.notnull())]\nalive_intubated = df.loc[(df['RESULTADO'] == 1) & ((df['FECHA_DEF'] == '9999-99-99') | (df.FECHA_DEF.isnull())) & (df['INTUBADO'] == 1)]\nicu_alive = df.loc[(df['RESULTADO'] == 1) & ((df['FECHA_DEF'] == '9999-99-99') | (df.FECHA_DEF.isnull())) & (df['UCI'] == 1)]\n\ncpcounts = len(covid_positive)\ndpcounts = len(deads_positive)\naicounts = len(alive_intubated)\niccounts = len(icu_alive)\n\ncolors = ['#b00c00', '#edad5f', '#d69e04', '#b5d902', '#63ba00', '#05b08e', '#128ba6', '#5f0da6', '#b30bb0', '#c41484', '#a1183d', '#3859eb', '#4da1bf', '#6bcfb6']\n\nsizes = np.array([cpcounts-dpcounts-aicounts-iccounts, dpcounts, iccounts,aicounts])\n# Plot\nfig, ax1 = plt.subplots(figsize=(20,10))\nax1.set_title('COVID-19 confirmed cases status distribution')\npatches, texts = ax1.pie(sizes,colors=colors, startangle=90, shadow=True, explode=(0.0,0.1,0.1,0.1),\n                         wedgeprops={'linewidth': 2,\"edgecolor\":\"#303030\", 'linestyle': 'solid', 'antialiased': True})\n\nporcent = 100.*sizes\/sizes.sum()\ntags = ['Positive', 'Deceased', 'Alive in intensive care', 'Alive Intubated']\nlabels = ['{0} - {1:0.2f}% = {2:0.0f}'.format(tags[x],porcent[x],sizes[x]) for x in range(len(tags))]\n\nax1.legend(patches, labels, loc='best', bbox_to_anchor=(-0.1, 1.), fontsize=15)\nfig.tight_layout()","f9d29a68":"fig, ax = plt.subplots(figsize=(4,1))\nax.text(0.0, 1.0, 'Without speculation we have a mortality rate of {0:.2f}%'.format(porcent[1]), dict(size=22))\nax.text(0.0, 0.0, 'and {0:.2f}% of confirmed COVID-19 patients find themselves in intensive care units.'.format(porcent[2]+porcent[3]), dict(size=22))\nax.axis('off')\nplt.show()","f0dec721":"deads_negative = df.loc[(df['RESULTADO'] == 2) & (df['FECHA_DEF'] != '9999-99-99') & (df.FECHA_DEF.notnull())]\ndeads_pending = df.loc[(df['RESULTADO'] == 3) & (df['FECHA_DEF'] != '9999-99-99') & (df.FECHA_DEF.notnull())]\n\ndpcounts\ndncounts = len(deads_negative)\ndpecounts = len(deads_pending)\n\nsizes = np.array([dpcounts,dncounts,dpecounts])\n# Plot\nfig, ax1 = plt.subplots(figsize=(20,10))\nax1.set_title('Deceased and COVID-19 test result correlation')\npatches, texts = ax1.pie(sizes,colors=colors, startangle=90, shadow=True, explode=(0,0,0.2),\n                         wedgeprops={'linewidth': 2,\"edgecolor\":\"#303030\", 'linestyle': 'solid', 'antialiased': True})\n\nlabels = ['{0} - {1:.2f}% = {2}'.format(i,100*j\/sum(sizes),j) for i,j in zip(list(['Positive', 'Negative', 'Pending']), sizes)]\nsort_legend = False\nif sort_legend:\n    patches, labels, dummy =  zip(*sorted(zip(patches, labels, sizes),\n                                          key=lambda x: x[2],\n                                          reverse=True))\n\n\nax1.legend(patches, labels, loc='best', bbox_to_anchor=(-0.1, 1.), fontsize=15, title=\"Test result\")\nfig.tight_layout()","dd21daa9":"positive_death_ninp = df.loc[(df['RESULTADO'] == 1) & (df['NEUMONIA'] != 1) & (df['INTUBADO'] != 1) & (df['FECHA_DEF'] != '9999-99-99') & (df.FECHA_DEF.notnull())]\npositive_death_ip = df.loc[(df['RESULTADO'] == 1) & (df['NEUMONIA'] == 1) & (df['INTUBADO'] == 1) & (df['FECHA_DEF'] != '9999-99-99') & (df.FECHA_DEF.notnull())]\npositive_death_ointubeted = df.loc[(df['RESULTADO'] == 1) & (df['NEUMONIA'] != 1) & (df['INTUBADO'] == 1) & (df['FECHA_DEF'] != '9999-99-99') & (df.FECHA_DEF.notnull())]\npositive_death_opneumonia = df.loc[(df['RESULTADO'] == 1) & (df['NEUMONIA'] == 1) & (df['INTUBADO'] != 1) & (df['FECHA_DEF'] != '9999-99-99') & (df.FECHA_DEF.notnull())]\n\nnegative_death_ninp = df.loc[(df['RESULTADO'] == 2) & (df['NEUMONIA'] != 1) & (df['INTUBADO'] != 1) & (df['FECHA_DEF'] != '9999-99-99') & (df.FECHA_DEF.notnull())]\nnegative_death_ip = df.loc[(df['RESULTADO'] == 2) & (df['NEUMONIA'] == 1) & (df['INTUBADO'] == 1) & (df['FECHA_DEF'] != '9999-99-99') & (df.FECHA_DEF.notnull())]\nnegative_death_ointubeted = df.loc[(df['RESULTADO'] == 2) & (df['NEUMONIA'] != 1) & (df['INTUBADO'] == 1) & (df['FECHA_DEF'] != '9999-99-99') & (df.FECHA_DEF.notnull())]\nnegative_death_opneumonia = df.loc[(df['RESULTADO'] == 2) & (df['NEUMONIA'] == 1) & (df['INTUBADO'] != 1) & (df['FECHA_DEF'] != '9999-99-99') & (df.FECHA_DEF.notnull())]\n\ninconclusive_death_ninp = df.loc[(df['RESULTADO'] == 3) & (df['NEUMONIA'] != 1) & (df['INTUBADO'] != 1) & (df['FECHA_DEF'] != '9999-99-99') & (df.FECHA_DEF.notnull())]\ninconclusive_death_ip = df.loc[(df['RESULTADO'] == 3) & (df['NEUMONIA'] == 1) & (df['INTUBADO'] == 1) & (df['FECHA_DEF'] != '9999-99-99') & (df.FECHA_DEF.notnull())]\ninconclusive_death_ointubeted = df.loc[(df['RESULTADO'] == 3) & (df['NEUMONIA'] != 1) & (df['INTUBADO'] == 1) & (df['FECHA_DEF'] != '9999-99-99') & (df.FECHA_DEF.notnull())]\ninconclusive_death_opneumonia = df.loc[(df['RESULTADO'] == 3) & (df['NEUMONIA'] == 1) & (df['INTUBADO'] != 1) & (df['FECHA_DEF'] != '9999-99-99') & (df.FECHA_DEF.notnull())]\n\nnr_ninp = [len(positive_death_ninp), len(negative_death_ninp), len(inconclusive_death_ninp)]\nnr_ip = [len(positive_death_ip), len(negative_death_ip), len(inconclusive_death_ip)]\nnr_intubated = [len(positive_death_ointubeted), len(negative_death_ointubeted), len(inconclusive_death_ointubeted)]\nnr_pneumonia = [len(positive_death_opneumonia), len(negative_death_opneumonia), len(inconclusive_death_opneumonia)]\n\ntags = ['Positive', 'Negative', 'Pending']\ntags_legend = ['No intubation nor pneumonia', 'Intubation & pneumonia', 'Intubation only','Pneumonia only']\n\nfig, ax1 = plt.subplots(figsize=(20,10))\nax1.set_title('Deaths related to pneumonia and intubation distributed by test result')\nx = np.arange(len(tags))\nax1.bar(x, nr_ninp, width=0.4, color=colors[0], align='center')\nax1.bar(x, nr_ip, width=0.4, color=colors[1], align='center', bottom=nr_ninp)\nax1.bar(x, nr_intubated, width=0.4, color=colors[2], align='center', bottom=np.array(nr_ip)+np.array(nr_ninp))\nax1.bar(x, nr_pneumonia, width=0.4, color=colors[3], align='center', bottom=np.array(nr_intubated)+np.array(nr_ninp)+np.array(nr_ip))\nax1.legend(handles=[matplotlib.patches.Patch(facecolor=colors[x], label='{0}'.format(tags_legend[x])) for x in range(4)], \n                     loc='best', fancybox=True, shadow=True, title=\"Death related to:\")\nplt.xticks(x, tags)\nplt.show()","8ca47394":"from collections import OrderedDict\npcv_ns = len(df.loc[(df['RESULTADO'] == 1) & (df['NEUMONIA'] != 1) & (df['INTUBADO'] != 1) & (df['FECHA_DEF'] != '9999-99-99') & (df.FECHA_DEF.notnull())])\npcv_inpn = len(df.loc[(df['RESULTADO'] == 1) & (df['INTUBADO'] == 1) & (df['NEUMONIA'] == 1) & (df['FECHA_DEF'] != '9999-99-99') & (df.FECHA_DEF.notnull())])\npcv_oint = len(df.loc[(df['RESULTADO'] == 1) & (df['INTUBADO'] == 1) & (df['NEUMONIA'] != 1) & (df['FECHA_DEF'] != '9999-99-99') & (df.FECHA_DEF.notnull())])\npcv_opne = len(df.loc[(df['RESULTADO'] == 1) & (df['NEUMONIA'] == 1) & (df['INTUBADO'] != 1) & (df['FECHA_DEF'] != '9999-99-99') & (df.FECHA_DEF.notnull())])\nd = {'Non specified':pcv_ns,\n        'Pneumonia and intubation':pcv_inpn,\n        'Intubation without pneumonia':pcv_oint,\n        'Pneumonia without intubation':pcv_opne\n       }\nd = OrderedDict(sorted(d.items(), key=lambda kv: kv[1], reverse=True))\ntags = list(d.keys())\nsizes = np.array(list(d.values()))\n# Plot\nfig, ax1 = plt.subplots(figsize=(20,10))\nax1.set_title('Confirmed COVID-19 deceased cause of death')\npatches, texts = ax1.pie(sizes,colors=colors, startangle=90, shadow=True, explode=(0.2,0,0,0.0),\n                         wedgeprops={'linewidth': 2,\"edgecolor\":\"#303030\", 'linestyle': 'solid', 'antialiased': True})\n\nlabels = ['{0} - {1:.2f}% = {2}'.format(i,100*j\/sum(sizes),j) for i,j in zip(list(tags), sizes)]\nsort_legend = False\nif sort_legend:\n    patches, labels, dummy =  zip(*sorted(zip(patches, labels, sizes),\n                                          key=lambda x: x[2],\n                                          reverse=True))\n\n\nax1.legend(patches, labels, loc='best', bbox_to_anchor=(-0.1, 1.), fontsize=15, title=\"Death associated with\")\nfig.tight_layout()","e7449744":"inds = d['Pneumonia and intubation']+d['Intubation without pneumonia']+d['Pneumonia without intubation']\nporcent = 100*inds\/sum(d.values())\nfig, ax = plt.subplots(figsize=(4,1))\nax.text(0.0, 1.0, 'From the confirmed COVID-19 cases {0:.2f}% were linked'.format(porcent), dict(size=22))\nax.text(0.0, 0.5, 'to either pneumonia, being intubated, or both', dict(size=22))\nax.text(0.0, 0.0, 'Representing a total of {} individuals from the total {} deceased.'.format(inds, dpcounts),dict(size=22)) \nax.axis('off')\nplt.show()","73a5139f":"fig, ax = plt.subplots(figsize=(4,1))\nax.text(0.0, 1.0, 'Using the previously discussed information we can assume that', dict(size=22))\nax.text(0.0, 0.5, '{0:.2f}% of the deaths related with a negative or pending'.format(porcent), dict(size=22))\nax.text(0.0, 0.0, 'test are related somehow to COVID-19.'.format(inds, dpcounts),dict(size=22)) \nax.axis('off')\nplt.show()","fc5c933b":"path_sectors = '\/kaggle\/input\/covid19-mx\/SECTOR.csv'\ndf_sector = pd.read_csv(path_sectors)\ndf_sector['TOTAL_M'] = [len(df.loc[(df['SECTOR'] == x) & (df['FECHA_DEF'] != '9999-99-99') & (df.FECHA_DEF.notnull())]) for x in list(df_sector['CLAVE'])]\ndf_sector['TOTAL_MP'] = [len(df.loc[(df['SECTOR'] == x) & (df['FECHA_DEF'] != '9999-99-99') & (df.FECHA_DEF.notnull()) & (df['RESULTADO'] == 1)]) for x in list(df_sector['CLAVE'])]\ndf_sector['TOTAL_P'] = [len(df.loc[(df['SECTOR'] == x) & (df['RESULTADO'] == 1)]) for x in list(df_sector['CLAVE'])]\ndf_sector['TOTAL_MP_PN'] = [len(df.loc[(df['SECTOR'] == x) & (df['FECHA_DEF'] != '9999-99-99') & (df.FECHA_DEF.notnull()) & ((df['RESULTADO'] == 1) | (df['NEUMONIA'] == 1) | (df['INTUBADO'] == 1))]) for x in list(df_sector['CLAVE'])]\ndf_sector['PP_PM_PN'] = (100*df_sector['TOTAL_MP_PN'])\/df_sector['TOTAL_P']\ndf_sector['PP_TM'] = (100*df_sector['TOTAL_M'])\/df_sector['TOTAL_P']\ndf_sector['PP_PM'] = (100*df_sector['TOTAL_MP'])\/df_sector['TOTAL_P']\ndf_sector = df_sector.sort_values('TOTAL_P', ascending=False)\ndf_sector = df_sector.fillna(0)\ndf_sector = df_sector.sort_values('TOTAL_P', ascending=True)\ndf_sector = df_sector.fillna(0)\n\nfig, ax1 = plt.subplots(figsize=(12,8))\nax1.set_title('Confirmed vs inferred COVID-19 deaths')\nax1.barh(df_sector['DESCRIPCI\u00d3N'], df_sector['TOTAL_MP_PN']*(porcent\/100), align='center', label=\"Inferred deaths (pneumonia and intubated cases)\")\nax1.barh(df_sector['DESCRIPCI\u00d3N'], df_sector['TOTAL_MP'], align='center', label=\"Confirmed COVID-19 deaths\")\nfor i, v in enumerate(df_sector['TOTAL_MP_PN']*(porcent\/100)):\n    positive = list(df_sector['TOTAL_MP'])[i]\n    suposed = v\n    if positive > 0 or suposed > 0:\n        ax1.text(v + 3, i - 0.25, '{0} vs {1:0.0f}'.format(positive, suposed))\n\nax1.legend()\nax1.spines['right'].set_visible(False)\nax1.spines['top'].set_visible(False)\nax1.yaxis.set_ticks_position('left')\nax1.xaxis.set_ticks_position('bottom')","864e40a3":"colors = ['#b00c00', '#edad5f', '#d69e04', '#b5d902', '#63ba00', '#05b08e', '#128ba6', '#5f0da6', '#b30bb0', '#c41484', '#a1183d', '#3859eb', '#4da1bf', '#6bcfb6']\ndf_sector['TOTAL'] = [len(df.loc[(df['SECTOR'] == x) & (df['FECHA_DEF'] != '9999-99-99') & (df.FECHA_DEF.notnull()) & (df['RESULTADO'] == 1)]) for x in list(df_sector['CLAVE'])]\ndf_sector = df_sector.sort_values('TOTAL', ascending=False)\n\nsizes = list(df_sector['TOTAL'])\n\n# Plot\nfig, ax1 = plt.subplots(figsize=(20,10))\nax1.set_title('Deceased COVID-19 confirmed cases distribution by healthcare institution')\npatches, texts = ax1.pie(sizes,colors=colors, startangle=90, shadow=True,\n                         wedgeprops={'linewidth': 2,\"edgecolor\":\"#303030\", 'linestyle': 'solid', 'antialiased': True})\n\nlabels = ['{0} - {1:.2f}% = {2}'.format(i,100*j\/sum(sizes),j) for i,j in zip(list(df_sector['DESCRIPCI\u00d3N']), sizes)]\nsort_legend = False\nif sort_legend:\n    patches, labels, dummy =  zip(*sorted(zip(patches, labels, sizes),\n                                          key=lambda x: x[2],\n                                          reverse=True))\n\n\nax1.legend(patches, labels, loc='best', bbox_to_anchor=(-0.1, 1.), fontsize=15)\nfig.tight_layout()","bbee30fe":"df_sector['TOTAL'] = [len(df.loc[(df['SECTOR'] == x) & (df['FECHA_DEF'] != '9999-99-99') & (df.FECHA_DEF.notnull())]) for x in list(df_sector['CLAVE'])]\ndf_sector = df_sector.sort_values('TOTAL', ascending=False)\n\nsizes = list(df_sector['TOTAL'])\n\n# Plot\nfig, ax1 = plt.subplots(figsize=(20,10))\nax1.set_title('Total deceased distribution by healthcare institution')\npatches, texts = ax1.pie(sizes,colors=colors, startangle=90, shadow=True,\n                         wedgeprops={'linewidth': 2,\"edgecolor\":\"#303030\", 'linestyle': 'solid', 'antialiased': True})\n\nlabels = ['{0} - {1:.2f}% = {2}'.format(i,100*j\/sum(sizes),j) for i,j in zip(list(df_sector['DESCRIPCI\u00d3N']), sizes)]\n\nsort_legend = True\nif sort_legend:\n    patches, labels, dummy =  zip(*sorted(zip(patches, labels, sizes),\n                                          key=lambda x: x[2],\n                                          reverse=True))\n\n\nax1.legend(patches, labels, loc='best', bbox_to_anchor=(-0.1, 1.), fontsize=15)\nfig.tight_layout()","162bce5f":"df_sector['TOTAL_M'] = [len(df.loc[(df['SECTOR'] == x) & (df['FECHA_DEF'] != '9999-99-99') & (df.FECHA_DEF.notnull())]) for x in list(df_sector['CLAVE'])]\ndf_sector['TOTAL_MP'] = [len(df.loc[(df['SECTOR'] == x) & (df['FECHA_DEF'] != '9999-99-99') & (df.FECHA_DEF.notnull()) & (df['RESULTADO'] == 1)]) for x in list(df_sector['CLAVE'])]\ndf_sector['TOTAL_P'] = [len(df.loc[(df['SECTOR'] == x) & (df['RESULTADO'] == 1)]) for x in list(df_sector['CLAVE'])]\ndf_sector = df_sector.sort_values('TOTAL_P', ascending=False)\ndf_sector = df_sector.fillna(0)\nfig, ax1 = plt.subplots(figsize=(20,8))\nax1.set_title('COVID-19 confirmed cases and deceases per Healthcare institution')\nx = np.arange(len(df_sector['DESCRIPCI\u00d3N']))\nw=0.3\ntotal_p = ax1.bar(x, df_sector['TOTAL_P'], width=w, color='#edad5f', align='center')\nfor i, bar in enumerate(total_p):\n    bar.set_color(colors[i])\ntotal_mp = ax1.bar(x + w, df_sector['TOTAL_MP'], width=w, align='center')\nlegend1 = ax1.legend([total_mp],['Deceased'])\nax1.legend(handles=[matplotlib.patches.Patch(facecolor=colors[x], label='{0} - {1:0.2f}%'.format(list(df_sector['DESCRIPCI\u00d3N'])[x],list(df_sector['PP_PM'])[x])) for x in range(len(df_sector['DESCRIPCI\u00d3N']))], \n                     loc='best',bbox_to_anchor=(1.1, 1.05), fancybox=True, shadow=True, title=\"Mortality Rate:\")\nplt.xticks(x + w \/2, df_sector['DESCRIPCI\u00d3N'], rotation='vertical')\nplt.gca().add_artist(legend1)\nplt.show()","3cec9651":"df_sector['TOTAL_MP_PN'] = [len(df.loc[(df['SECTOR'] == x) & (df['FECHA_DEF'] != '9999-99-99') & (df.FECHA_DEF.notnull()) & ((df['RESULTADO'] == 1) | (df['NEUMONIA'] == 1) | (df['INTUBADO'] == 1))]) for x in list(df_sector['CLAVE'])]\ndf_sector['PP_PM_PN'] = (100*df_sector['TOTAL_MP_PN'])\/df_sector['TOTAL_P']\ndf_sector = df_sector.sort_values('TOTAL_P', ascending=False)\ndf_sector = df_sector.fillna(0)\n\nfig, ax1 = plt.subplots(figsize=(20,8))\nax1.set_title('COVID-19 confirmed cases and deceases per Healthcare institution')\nx = np.arange(len(df_sector['DESCRIPCI\u00d3N']))\nw=0.3\ntotal_p = ax1.bar(x, df_sector['TOTAL_P'], width=w, color='#edad5f', align='center')\nfor i, bar in enumerate(total_p):\n    bar.set_color(colors[i])\ntotal_mp = ax1.bar(x + w, df_sector['TOTAL_MP_PN']*(porcent\/100), width=w, align='center')\nlegend1 = ax1.legend([total_mp],['Deceased'])\nax1.legend(handles=[matplotlib.patches.Patch(facecolor=colors[x], label='{0} - {1:0.2f}%'.format(list(df_sector['DESCRIPCI\u00d3N'])[x],list(df_sector['PP_PM_PN'])[x])) for x in range(len(df_sector['DESCRIPCI\u00d3N']))], \n                     loc='best',bbox_to_anchor=(1.1, 1.05), fancybox=True, shadow=True, title=\"Mortality Rate:\")\nplt.xticks(x + w \/2, df_sector['DESCRIPCI\u00d3N'], rotation='vertical')\nplt.gca().add_artist(legend1)\nplt.show()","86bb94f9":"deltas = mx_covid['Confirmed Cases']\ndeltas = [deltas[x] if x == 0 else deltas[x]-deltas[x-1] for x in range(len(deltas))]\nfig, ax = plt.subplots(figsize=(20,8))\nax.set_title('Confirmed cases delta')\nax.plot(pd.to_datetime(mx_covid['Dates']), deltas,color='orange')\nax.bar(pd.to_datetime(mx_covid['Dates']), deltas)\nfor line, name in zip(ax.lines, ['MAX new cases']):\n    y = max(line.get_ydata())\n    ax.annotate('{} {}'.format(y, name), xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\nfig.autofmt_xdate()","86d0857b":"fig, ax = plt.subplots(figsize=(20,10))\nax.set_title('Speculated vs Official COVID-19 cases')\nax.plot(pd.to_datetime(mx_covid['Dates']), mx_covid['Confirmed Cases']*8, label='8')\nax.plot(pd.to_datetime(mx_covid['Dates']), mx_covid['Confirmed Cases']*10, label='10')\nax.plot(pd.to_datetime(mx_covid['Dates']), mx_covid['Confirmed Cases']*12, label='12')\nax.plot(pd.to_datetime(mx_covid['Dates']), mx_covid['Confirmed Cases'], label='')\nax.legend(loc='upper left', shadow=True, bbox_to_anchor=[0, 1], ncol=2, title=\"Estimation scaling factor\", fancybox=True)\nfor line, name in zip(ax.lines, ['with scaling factor of 8', 'with scaling factor of 10', 'with scaling factor of 12', 'with no scaling factor']):\n    y = line.get_ydata()[-1]\n    ax.annotate('{} {}'.format(y, name), xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")","dd24ef99":"def simulate_infections(incubation_days, scaling_factor):\n    added_infected = dict()\n    for i, x in enumerate(mx_covid['Confirmed Cases']):\n        if added_infected.get(i) is None:\n            added_infected[i] = x\n        else:\n            added_infected[i] += x\n        if added_infected.get(i+incubation_days) is None:\n            added_infected[i+incubation_days] = x*scaling_factor \n        else:\n            added_infected[i+incubation_days] += x*scaling_factor \n    xl = []\n    for i in range(len(mx_covid['Confirmed Cases'])):\n        xl.append(added_infected[i])\n    return xl","a371b799":"fig, ax = plt.subplots(figsize=(12,8))\nax.set_title('Different incubation periods with 8 people infected per case confirmed')\nax.plot(pd.to_datetime(mx_covid['Dates']), mx_covid['Confirmed Cases']*8, label='estimated x8')\nax.plot(pd.to_datetime(mx_covid['Dates']), simulate_infections(3, 8), label='3 day incubation')\nax.plot(pd.to_datetime(mx_covid['Dates']), simulate_infections(4, 8), label='4 day incubation')\nax.plot(pd.to_datetime(mx_covid['Dates']), simulate_infections(5, 8), label='5 day incubation')\nax.plot(pd.to_datetime(mx_covid['Dates']), mx_covid['Confirmed Cases'], label='official')\nax.legend(loc='upper left', shadow=True, bbox_to_anchor=[0, 1], ncol=2, title=\"Legend\", fancybox=True)\nfor line, name in zip(ax.lines, ['scaling factor of 8', '3 days of incubation', '4 days of incubation', '5 days of incubation']):\n    y = line.get_ydata()[-1]\n    ax.annotate('{} with {}'.format(y, name), xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\", size=14, va=\"center\")\nfig.autofmt_xdate()\n","a1ca6d54":"fig, ax = plt.subplots(figsize=(12,8))\nax.set_title('Infected per case confirmed with 5 day incubation')\nax.plot(pd.to_datetime(mx_covid['Dates']), mx_covid['Confirmed Cases']*8, label='estimated x8')\nax.plot(pd.to_datetime(mx_covid['Dates']), simulate_infections(5, 10), label='10 infected pcc')\nax.plot(pd.to_datetime(mx_covid['Dates']), simulate_infections(5, 12), label='12 infected pcc')\nax.plot(pd.to_datetime(mx_covid['Dates']), simulate_infections(5, 14), label='14 infected ppc')\nax.legend(loc='upper left', shadow=True, bbox_to_anchor=[0, 1], ncol=2, title=\"Legend\", fancybox=True)\nfor line, name in zip(ax.lines, ['scaling factor of 8', '10 infections per case confirmed', '12 infections per case confirmed', '14 infections per case confirmed']):\n    y = line.get_ydata()[-1]\n    ax.annotate('{} with {}'.format(y, name), xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\", size=14, va=\"center\")\nfig.autofmt_xdate()","35d6b932":"G=nx.Graph()\nG.add_nodes_from(['Confirmed Case',1,2,3,4,5,6,7,8,9,10,11,12])\nG.add_edges_from([('Confirmed Case',1), ('Confirmed Case',2), ('Confirmed Case',3), (1,4), (1,5), (1,6), (2,7), (2,8), (3,9), (3,10), (3, 11), (3,12)])\n\ncolor_nodes = []\nfor node in G:\n    if node == 'Confirmed Case':\n        color_nodes.append('#f55333')\n        continue\n    if node < 4:\n        color_nodes.append('#f58733')\n        continue\n    color_nodes.append('#f5d533')\n\nplt.figure(1,figsize=(12,8)) \nnx.draw(G, node_size = 2000, node_color=color_nodes, with_labels = True)\nplt.show()","eb51d35a":"fig, ax = plt.subplots(figsize=(20,8))\nax.set_title('Estimations, infections per case confirmed & official information')\nax.plot(pd.to_datetime(mx_covid['Dates']), mx_covid['Confirmed Cases']*8, label='estimated scaling factor of 8')\nax.plot(pd.to_datetime(mx_covid['Dates']), simulate_infections(5, 12), label='12 infected pcc')\nax.plot(pd.to_datetime(mx_covid['Dates']), mx_covid['Confirmed Cases'], label='official')\nax.legend(loc='upper left', shadow=True, bbox_to_anchor=[0, 1], ncol=2, title=\"Legend\", fancybox=True)\nfor line, name in zip(ax.lines, ['with scaling factor of 8', 'with 12 infected per case confirmed', 'with official numbers']):\n    y = line.get_ydata()[-1]\n    ax.annotate('{} {}'.format(y, name), xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\nfig.autofmt_xdate()","e5f6388a":"path = '\/kaggle\/input\/mxstatesdataset\/Mexico_States.shp'\ndata = gpd.read_file(path)\ndata['NAME'] = data['NAME'].str.lower()\n\ndf = pd.read_csv('\/kaggle\/input\/covid19-mx\/casos_confirmados.csv')\ndf = df.dropna()\ndf.head()\ncenter_states = ['distrito federal', 'quer\u00e9taro', 'puebla', 'm\u00e9xico', 'morelos', 'hidalgo','tlaxcala']\ncases_per_state = dict()\nfor state in df.State.unique():\n    key = state.lower()\n    if key == 'ciudad de m\u00e9xico':\n        key = 'distrito federal'\n    if key == 'queretaro':\n        key = 'quer\u00e9taro'\n    cases_per_state[key] = len(df[df['State'] == state])\n\ndata['CPSTATE']= data['NAME'].map(cases_per_state)\ndata['coords'] = data['geometry'].apply(lambda x: x.representative_point().coords[:])\ndata['coords'] = [coords[0] for coords in data['coords']]\ncenter_mx = data.loc[data['NAME'].isin(center_states)]\n\ndata['CPSTATE'] = data['CPSTATE']*8\ncenter_mx = data.loc[data['NAME'].isin(center_states)]\n\nfig, ax1 = plt.subplots(figsize=(25,15))\n\nleft, bottom, width, height = [0.5, 0.55, 0.25, 0.25]\nax2 = fig.add_axes([left, bottom, width, height])\n\ndata.plot(ax=ax1, column='CPSTATE', cmap='Reds',edgecolor=\"black\", legend=True, legend_kwds={'label': \"Official confirmed COVID-19 cases\", 'shrink':0.5})\nfor idx, row in data.iterrows():\n    if row['NAME'] not in center_states:\n        ax1.annotate(s=row['CPSTATE'], xy=row['coords'],horizontalalignment='center')\n        \ncenter_mx.plot(ax=ax2, column='CPSTATE', cmap='Reds',edgecolor=\"black\", legend=False)\nfor idx, row in center_mx.iterrows():\n    ax2.annotate(s=row['CPSTATE'], xy=row['coords'],horizontalalignment='center')\n    \nax1.axis('off')\nax2.axis('off')\nax1.legend(fontsize=8)\nplt.show()\nplt.close()","a115ed75":"def simulate_infections_predict(incubation_days, scaling_factor, predict_days=10, base=mx_covid['Confirmed Cases']):\n    added_infected = dict()\n    last_day = 1\n    for i, x in enumerate(base):\n        if added_infected.get(i) is None:\n            added_infected[i] = x\n        else:\n            added_infected[i] += x\n        if added_infected.get(i+incubation_days) is None:\n            added_infected[i+incubation_days] = x*scaling_factor \n        else:\n            added_infected[i+incubation_days] += x*scaling_factor \n        last_day = i+incubation_days\n    for day in range(predict_days):\n        day_pinc = last_day-(incubation_days-1)\n        prev_infected = added_infected[day_pinc]\/8\n        added_infected[last_day+1] = int(prev_infected*scaling_factor)\n        last_day+=1\n    return [added_infected[x] for x in range(len(added_infected))]","8feecfc6":"pred_dates=get_date_list(datetime.datetime.today() + datetime.timedelta(days=15),total=len(mx_confirmed_cases)+15)\npred_per_day=np.array(simulate_infections_predict(5, 12))\nfig, ax = plt.subplots(figsize=(12,8))\nax.set_title('Prediction for the next {} days estimations'.format(len(pred_per_day)-len(mx_covid['Confirmed Cases'])))\nax.plot(pd.to_datetime(pred_dates), pred_per_day, label='Estimated prediction')\nax.plot(pd.to_datetime(mx_covid['Dates']), mx_covid['Confirmed Cases']*8, label='Current estimations x8')\nax.legend(loc='upper left', shadow=True, bbox_to_anchor=[0, 1], ncol=2, title=\"Legend\", fancybox=True)\nfor line, name in zip(ax.lines, ['infected of COVID-19 on {}'.format(pred_dates[-1])]):\n    y = line.get_ydata()[-1]\n    ax.annotate('{} {}'.format(y, name), xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\nfig.autofmt_xdate()","0a7dd068":"fig, ax = plt.subplots(figsize=(12,8))\nax.set_title('Prediction for the next {} days official'.format(len(pred_per_day)-len(mx_covid['Confirmed Cases'])))\nax.plot(pd.to_datetime(pred_dates), pred_per_day\/8, label='Prediction of official cases')\nax.plot(pd.to_datetime(mx_covid['Dates']), mx_covid['Confirmed Cases'], label='Official cases')\nax.legend(loc='upper left', shadow=True, bbox_to_anchor=[0, 1], ncol=2, title=\"Legend\", fancybox=True)\nfor line, name in zip(ax.lines, ['official cases of COVID-19 on {}'.format(pred_dates[-1])]):\n    y = line.get_ydata()[-1]\n    ax.annotate('{} {}'.format(int(y), name), xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\nfig.autofmt_xdate()","bd19fa45":"# Libraries,","fcd001e7":"## COVID-19 in mexico\n\n### The mexican government is updating on a daily basis their available information related to COVID-19, it's important to analyze this information in order to understand the how the situation will evolve.\n\n##### Notes:\n* The graphs and predictions are updated on a daily basis\n* Some plots are based on information infered from the public datasets\n* This is not a political statemnt, but rather a critical analysis on the current situation\n\n---\n##### It's important to know that governmental estimations according to sub secretary Dr. Hugo L\u00f3pez-Gatell Ram\u00edrez are [8 times the number of official cases.](https:\/\/www.youtube.com\/embed\/HbEH4v5ZpSg)\n---","eeffe428":"----\n## Up next is the comparison of new confirmed COVID-19 cases per day","91fb51c5":"### The previous chart plots the a prediction based on the governmental estimations, but in order to make this more official the following chart shows the comparison between my predicted official cases, and the current official cases.","c8ab8bae":"### At first instance we can assume that Mexico has a R14 spread rate. Nevertheless, we should not assume that one indivual will spread the virus to 14 different people, the infections tend to happen indirectly. One single individual will infect directly an approximate amount of 2-4 people. Which they themselves will follow the infection chain. Hence the final estimate result would be 14 per one confirmed case of COVID-19. ","225e7824":"## For the next plot let's compare mortality rate between institutions\n#### The blue bars represent the death count per institution","c97dcdd9":"# Death distribution,","82d571f4":"# Current situation,","c4b9c06c":"# Analysis,","2cd4efec":"----\n# Predictions,\n\n### As a starting prediction I want to simply used the previously discoused infectious rate, of 12 to 14 new infections per case confirmed with an average incubation period of 5 days. The next graph represents what will happen with the estimated cases and the official cases. Assuming that for the next 10 days we will have a similar behavior.","fb49bb06":"### Taking into account the scaling factor of 8, we can now analyze how much individuals get infected per case confirmed,","61d7d4fb":"### All the previously shown diagrams were not considering the inferred COVID-19 cases, let's add those in the next diagrams.","be55ba68":"# Dataset,\n### This dataset comes from a mexican acute respiratory distress syndrome surveilance program, which this year is focusing on COVID-19 related cases\n##### You can find the detailed information and the clean dataset [here](https:\/\/www.kaggle.com\/lalish99\/covid19-mx)\n##### It was downloaded from [here (2020.04.15).](https:\/\/www.gob.mx\/salud\/documentos\/datos-abiertos-152127?idiom=es)","cef41124":"## The following map plots the quantity of infected individuals per state with a scaling factor of 8.\n##### If you are interested in this information you can check the clean dataset [here](https:\/\/www.kaggle.com\/lalish99\/covid19-mx)","45e921e8":"# Updated graphs,\n\n### Before continuing into Mexico's current situation and context, I'll plot the updated official information and the same information with the scaling factor of 8. Plus on the same plot I'll add the representation of the 12 infected per case confirmed in order to compare all this plots with the updated information.","7f205594":"### According to the governments information Mexico's real case count oscillates arount [8 times the official number of confirmed cases.](https:\/\/cnnespanol.cnn.com\/video\/gatell-mexico-estima-26-mil-casos-coronavirus-covid-infectados-en-mexico-pandemia-cifras-brk\/)\n### The next graph plots that behaviour","a5ab28dd":"### With this information we can deduce that in average every mexican infected by COVID-19 transmits this desease to between 12 and 14 other individuals. These numbers seem to represent correctly what we've been observing.\n### Remember we are assuming that once this case is confirmed the person has already infected the other 12 or 14 individuals (*directly or indirectly*), and is now contained so he'll not be considered as infectious in future days\n---\n#### This number might seem extreme on first instance, considering what we can read [here](https:\/\/doi.org\/10.1016\/j.medcli.2020.02.002), [and here](https:\/\/www.businessinsider.com\/coronavirus-contagious-r-naught-average-patient-spread-2020-3?r=MX&IR=T) in which they mention that so far, COVID-19 has an spread rate between R2.5 and R3.5. This would mean that every infected person would infect between 2.5 and 3.5 individuals. We can see this in the next image\n\n<img src=\"https:\/\/i.insider.com\/5e6bf336e4f9fe0a976c50e7?width=700&format=jpeg&auto=webp\" width=450px style=\"margin-left:0\">\n\nShayanne Gal\/Business Insider","8a5fbd90":"## Let's see how death's been distributing among the healthcare institutions in Mexico","1bb7a2db":"### With this information we can now validate that in Mexico the infection rate is between R2.5 and R3.5. In the followint animation we can see a simulation of the spread with a constant spread rate of R2.","96ff41b9":"### NOTE: The dataset has been updated on a daily basis\n### NOTE: I haven't been able to update the plots from here on, the information might be inaccurate.","0c973404":"##### So far non of this predictions take into account a reduction in the infection rate, a model that does is still a work in progress.","3fd78dd6":"## Thus the following diagram, represent both confirmed COVID-19 and inferred deaths, with the percentages previously mentioned"}}