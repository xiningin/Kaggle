{"cell_type":{"e6741f93":"code","7eacd182":"code","08c589d4":"code","0ee37dcc":"code","d813dfaa":"code","198ec941":"code","b4ad6aac":"code","8c32a7bc":"code","ba5b1f37":"code","c2aa3b18":"code","24b56e50":"code","fb69972b":"code","9efe40fc":"code","b2052401":"code","6fa3f881":"code","7864c7ba":"code","5f673ff8":"code","2327aec8":"code","2568bd01":"code","d774797f":"code","e590fe71":"code","73c6934a":"code","81a53a9c":"code","f1532f43":"code","9698460f":"code","6b131a7a":"code","59249239":"code","e79f2522":"code","7a431859":"code","1480fa5d":"code","ccb30e42":"code","f4db6cc5":"code","edbb7d7c":"code","906e6392":"code","5d1840dd":"code","314cfa41":"code","d18d2189":"code","4037a85b":"code","1c00acbe":"code","b958887f":"code","57220ba0":"code","8c7f9982":"code","36aa939f":"code","4f80a3e2":"code","ef161306":"code","0b056a0c":"code","2eb07902":"code","bdcce9b9":"code","b88bd001":"code","17bd01dc":"code","469665e2":"code","e00548de":"code","0428961b":"code","d50bcdee":"code","42bf10ad":"code","74ca6ac7":"code","690cdc3a":"code","cf8dd7a0":"code","704086de":"code","582ca674":"code","4cb8d732":"code","fdd55858":"code","093b8117":"code","26dfb2be":"code","6d5c843e":"code","f7ae8c1f":"code","9662204a":"code","63850892":"code","5978e17c":"code","f69eec31":"code","c440d026":"code","dec32e86":"code","9c161ed5":"code","0bedd73b":"code","9ec59c88":"code","7d7a0791":"code","b7d26bbc":"code","98413647":"code","1ea7c653":"code","6e8f29c1":"code","840aefb5":"code","975594f2":"code","03771de5":"code","27462703":"code","730c9528":"code","91c76016":"code","d8841952":"code","fc950932":"code","6076211c":"code","8a2f7fc0":"code","76a45c65":"code","30fb7ede":"code","a9e6c92b":"code","0b4062d7":"code","d9fdcdd5":"code","fd8eae84":"code","5969a7b2":"code","5d7132cf":"code","c18f3e5b":"code","89681546":"code","be44e7f2":"code","79ca4f47":"code","455c4d57":"code","111676b1":"code","e35f74ad":"code","11998f79":"code","0a9906b3":"code","0d0afb70":"code","e1cfdb0d":"code","c9fb9bac":"code","573c020b":"code","af62bbea":"code","721cbe32":"code","7629b68c":"code","fccf9ae0":"code","91154cf5":"code","aa6e585e":"code","bb946996":"code","495623b7":"code","e996770f":"code","f4e11641":"code","f391b7b2":"code","aa5323a6":"code","3ba71ae4":"code","b01fa774":"code","88ca117b":"markdown","3a222eef":"markdown","77c0443f":"markdown","38b3124a":"markdown","43cb69ab":"markdown","794cf7bb":"markdown","d3800005":"markdown","83accca4":"markdown","bbb4ffeb":"markdown","be6d8054":"markdown","72b381df":"markdown","8cc65a77":"markdown","f75aec73":"markdown","833227ec":"markdown","b9f819b6":"markdown","cc8f7ee7":"markdown","997d2095":"markdown","c88d33bc":"markdown","d3137a77":"markdown","390ee340":"markdown","72130215":"markdown","7c228a98":"markdown","e87894b5":"markdown","d4af9753":"markdown","1eaf22f9":"markdown","23bfdfa6":"markdown","7d0e261b":"markdown","42885dba":"markdown","2af66146":"markdown","aebd17ae":"markdown","48f10797":"markdown","b3e2dabd":"markdown","ded538ea":"markdown","00d78185":"markdown","f047a083":"markdown","d38ef05d":"markdown","d3cb233f":"markdown","6e919f06":"markdown","a6de8575":"markdown","15358354":"markdown","94769f05":"markdown","3ab65b36":"markdown","e6a096e7":"markdown","bd257d97":"markdown","e1453ee1":"markdown","0e6d45bb":"markdown","3091905a":"markdown","4e6a3197":"markdown","f6c8fe17":"markdown","02635e67":"markdown","50bd1aec":"markdown","696c8e23":"markdown","e84feae9":"markdown","0b09afe7":"markdown","01e16a89":"markdown","87d0a5e2":"markdown","e2eca0be":"markdown","78714a75":"markdown","95219a33":"markdown","ad81dc50":"markdown","b13a3d2d":"markdown","93ee1017":"markdown","efcfd10a":"markdown","bc21a688":"markdown"},"source":{"e6741f93":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7eacd182":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt   \nimport seaborn as sns   # more plots\nsns.set()\n\nfrom dateutil.relativedelta import relativedelta #  dates with style\nfrom scipy.optimize import minimize    # for function minimization\n\nimport statsmodels.formula.api as smf  # statistics and \nimport statsmodels.tsa.api as smt\nimport statsmodels.api as sm\nimport scipy.stats as scs\n\nfrom itertools import product# some useful functions\n\nimport warnings    # `do not disturbe` mode\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina' \nimport plotly.express as px\nimport plotly.graph_objects as go\nsns.set_context('notebook')\npd.options.display.max_rows = 102","08c589d4":"solar1GEN = pd.read_csv(r'\/kaggle\/input\/solar-power-generation-data\/Plant_1_Generation_Data.csv', parse_dates=['DATE_TIME'], infer_datetime_format=True )\n#index_col=['Time'], \nsolar1GEN.sample(12)","0ee37dcc":"solar1Sensor  = pd.read_csv('\/kaggle\/input\/solar-power-generation-data\/Plant_1_Weather_Sensor_Data.csv', parse_dates=['DATE_TIME'], infer_datetime_format=True )\nsolar2Sensor = pd.read_csv('\/kaggle\/input\/solar-power-generation-data\/Plant_2_Weather_Sensor_Data.csv', parse_dates=['DATE_TIME'], infer_datetime_format=True )\nsolar2GEN = pd.read_csv('\/kaggle\/input\/solar-power-generation-data\/Plant_2_Generation_Data.csv', parse_dates=['DATE_TIME'], infer_datetime_format=True )\nsolar2GEN[\"TOTAL_YIELDkWh\"] =solar2GEN.TOTAL_YIELD*0.0036 # to kWh\nsolar2GEN.head(6)","d813dfaa":"print(\"Mean yield in kWh plant 2:\",round(solar2GEN[\"TOTAL_YIELDkWh\"].mean()),\"   Mean yield in kWh plant 1:\", round(solar1GEN[\"TOTAL_YIELD\"].mean()))","198ec941":"solar1GEN['DATE'] = solar1GEN['DATE_TIME'].apply(lambda x:x.date())\nsolar2GEN['DATE'] = solar2GEN['DATE_TIME'].apply(lambda x:x.date())\nsolar1GEN['TIME'] = solar1GEN['DATE_TIME'].apply(lambda x:x.time())\nsolar2GEN['TIME'] = solar2GEN['DATE_TIME'].apply(lambda x:x.time())","b4ad6aac":"solar1GEN= solar1GEN.drop(\"PLANT_ID\", axis=1); \nsolar2GEN= solar2GEN.drop(\"PLANT_ID\", axis=1)\n\nsolar1GENdt= solar1GEN.set_index(\"DATE_TIME\",  ) #inplace=True\nsolar2GENdt= solar2GEN.set_index(\"DATE_TIME\",  )\n\nsolar1Sensor= solar1Sensor.drop(\"PLANT_ID\", axis=1); \nsolar2Sensor= solar2Sensor.drop(\"PLANT_ID\", axis=1); \n\nsolar1Sensordt= solar1Sensor.set_index(\"DATE_TIME\",  )\nsolar2Sensordt= solar2Sensor.set_index(\"DATE_TIME\",  )\n\nsolar1GEN= solar1GEN.sort_values([\"SOURCE_KEY\", \"DATE_TIME\"]) #sort_index()","8c32a7bc":"solar1GEN= solar1GEN.replace({'1BY6WEcLGh8j5v7':\"A1\", '1IF53ai7Xc0U56Y':\"A2\", '3PZuoBAID5Wc2HD':\"A3\",\n   '7JYdWkrLSPkdwr4':\"A4\", 'McdE0feGgRqW7Ca':\"A5\", 'VHMLBKoKgIrUVDU':\"A6\",\n   'WRmjgnKYAwPKWDb':\"A10\", 'ZnxXDlPa8U1GXgE':\"A11\", 'ZoEaEvLYb1n2sOq':\"A12\",\n   'adLQvlD726eNBSB':\"A13\", 'bvBOhCH3iADSZry':\"A14\", 'iCRJl6heRkivqQ3':\"A15\",\n   'ih0vzX44oOqAx2f':\"A16\", 'pkci93gMrogZuBj':\"A17\", 'rGa61gmuvPhdLxV':\"A18\",\n   'sjndEbLyjtCKgGv':\"A19\", 'uHbuxQJl8lW7ozc':\"A20\", 'wCURE6d3bPkepu2':\"A21\",\n   'z9Y9gH1T5YWrNuG':\"A22\", 'zBIq5rxdHJRwDNY':\"A23\", 'zVJPv84UY57bAof':\"A24\", 'YxYtjZvoooNbGkE':\"A25\"})","ba5b1f37":"code = {'1BY6WEcLGh8j5v7':\"A1\", '1IF53ai7Xc0U56Y':\"A2\", '3PZuoBAID5Wc2HD':\"A3\",'7JYdWkrLSPkdwr4':\"A4\", 'McdE0feGgRqW7Ca':\"A5\", 'VHMLBKoKgIrUVDU':\"A6\",\n   'WRmjgnKYAwPKWDb':\"A10\", 'ZnxXDlPa8U1GXgE':\"A11\", 'ZoEaEvLYb1n2sOq':\"A12\", 'adLQvlD726eNBSB':\"A13\", 'bvBOhCH3iADSZry':\"A14\", 'iCRJl6heRkivqQ3':\"A15\",'ih0vzX44oOqAx2f':\"A16\", 'pkci93gMrogZuBj':\"A17\", 'rGa61gmuvPhdLxV':\"A18\",\n   'sjndEbLyjtCKgGv':\"A19\", 'uHbuxQJl8lW7ozc':\"A20\", 'wCURE6d3bPkepu2':\"A21\", 'z9Y9gH1T5YWrNuG':\"A22\", 'zBIq5rxdHJRwDNY':\"A23\", 'zVJPv84UY57bAof':\"A24\", 'YxYtjZvoooNbGkE':\"A25\"}\nlabel_df = pd.DataFrame.from_dict(code, orient='index', columns=['New_Code'])","c2aa3b18":"solar2GEN= solar2GEN.replace({'4UPUqMRk7TRMgml':\"B1\", '81aHJ1q11NBPMrL':\"B2\", '9kRcWv60rDACzjR':\"B3\",'Et9kgGMDl729KT4':\"B4\", 'IQ2d7wF4YD8zU1Q':\"B5\", 'LYwnQax7tkwH5Cb':\"B6\",\n       'LlT2YUhhzqhg5Sw':\"B7\", 'Mx2yZCDsyf6DPfv':\"B8\", 'NgDl19wMapZy17u':\"B9\",'PeE6FRyGXUgsRhN':\"B10\", 'Qf4GUc1pJu5T6c6':\"B11\", 'Quc1TzYxW2pYoWX':\"B12\",\n       'V94E5Ben1TlhnDV':\"B13\", 'WcxssY2VbP4hApt':\"B14\", 'mqwcsP2rE7J0TFp':\"B15\",'oZ35aAeoifZaQzV':\"B16\", 'oZZkBaNadn6DNKz':\"B17\", 'q49J1IKaHRwDQnt':\"B18\",\n       'rrq4fwE8jgrTyWY':\"B19\", 'vOuJvMaM2sgwLmb':\"B20\", 'xMbIugepa2P7lBB':\"B21\",'xoJJ8DcxJEcupym':\"B22\"})","24b56e50":"sources1 =solar1GEN.SOURCE_KEY.unique(); sources2 =solar2GEN.SOURCE_KEY.unique()","fb69972b":"def roundingP1(df):\n    df['DC_POWER'] = round(df['DC_POWER'],2)\n    df['AC_POWER'] = round(df['AC_POWER'],2)\n    df['DAILY_YIELD'] = round(df['DAILY_YIELD'],2)\n    df['TOTAL_YIELD'] = round(df['TOTAL_YIELD'],2)","9efe40fc":"def roundingP2(df):\n    df['AMBIENT_TEMP'] = round(df['AMBIENT_TEMP'],2)\n    df['MODULE_TEMP'] = round(df['MODULE_TEMP'],2)\n    df['IRRADIATION'] = round(df['IRRADIATION'],4)","b2052401":"gen1_dailymax=solar1GENdt.resample(\"D\").max()  # better when 1 selected\ngen1_dailymax.head(15)","6fa3f881":"gen2_dailymax=solar2GENdt.resample(\"D\").max()  # better when 1 selected\ngen2_dailymax.head(5)","7864c7ba":"def Inverterextract(df):\n    global plant1\n    plant1= pd.DataFrame(index=gen1_dailymax.index, data=gen1_dailymax.iloc[:,0])  #\n    \n    for b in sources1:\n        dfs= df[df.SOURCE_KEY== b] #\n        dfsi=dfs.set_index(\"DATE_TIME\")\n\n        invert =dfsi.resample(\"D\").agg({'AC_POWER':np.sum, \"DAILY_YIELD\":np.max}) #'DC_POWER': np.sum, \"DAILY_YIELD\":np.max,\"TOTAL_YIELD\":\"max\"  lambda x: np.std(x, ddof=1)\n        invert.columns = invert.columns+'_'+str(b)\n        plant1= pd.concat([plant1, invert], axis=1)\n        next   #","5f673ff8":"def Inverterextract_2(df):\n    global plant2\n    plant2= pd.DataFrame( index=gen1_dailymax.index, data=gen1_dailymax.iloc[:,0]) # [2]\n    \n    for b in sources2:\n        dfs= df[df.SOURCE_KEY== b] #\n        dfsi=dfs.set_index(\"DATE_TIME\")\n\n        invert =dfsi.resample(\"D\").agg({'AC_POWER':np.sum, \"DAILY_YIELD\":np.max}) #'DC_POWER': np.sum,\"TOTAL_YIELD\":\"max\"  lambda x: np.std(x, ddof=1)\n        invert.columns = invert.columns+'_'+str(b)\n        plant2= pd.concat([plant2, invert], axis=1)#\n        next #","2327aec8":"Inverterextract(solar1GEN)\n#if isinstance(gen1_dailymax):\nroundingP1(gen1_dailymax); gen1_dailymax.head()","2568bd01":"Inverterextract_2(solar2GEN)","d774797f":"plant1.head(15)","e590fe71":"Invertors1=plant1[[\"AC_POWER_A1\",\"DAILY_YIELD_A1\",\"AC_POWER_A2\",\"DAILY_YIELD_A2\",\"AC_POWER_A3\",\"DAILY_YIELD_A3\",\"AC_POWER_A4\",\"DAILY_YIELD_A4\",\n                   \"AC_POWER_A5\",\"AC_POWER_A6\",\"DAILY_YIELD_A6\",#\"AC_POWER_A7\",\n                   \"AC_POWER_A10\",\"DAILY_YIELD_A10\",\"AC_POWER_A11\",\"DAILY_YIELD_A11\",\"AC_POWER_A12\",\"DAILY_YIELD_A12\",\"AC_POWER_A13\",\"DAILY_YIELD_A13\",\n                   \"AC_POWER_A14\",\"DAILY_YIELD_A14\",\"AC_POWER_A15\",\"AC_POWER_A16\",\"DAILY_YIELD_A16\",\"AC_POWER_A17\",\"DAILY_YIELD_A17\",\"AC_POWER_A18\",\"DAILY_YIELD_A18\",\n                   \"AC_POWER_A19\",\"DAILY_YIELD_A19\",\"AC_POWER_A20\",\"DAILY_YIELD_A20\",\"AC_POWER_A21\",\"DAILY_YIELD_A21\",\"AC_POWER_A22\",\"DAILY_YIELD_A22\",\n                   \"AC_POWER_A23\",\"DAILY_YIELD_A23\",\"AC_POWER_A24\",\"DAILY_YIELD_A24\",\"AC_POWER_A25\",\"DAILY_YIELD_A25\"]]","73c6934a":"filter_col = [col for col in Invertors1 if col.startswith('A')]\n#filter_col\nInvertors1_AC=Invertors1[filter_col]\nInvertors1_AC.head()","81a53a9c":"plt.figure(figsize=(16, 6))\nsns.lineplot(gen1_dailymax.index, data=plant1, y=\"AC_POWER_A1\",label=\"AC_POWER_A1\",)\nsns.lineplot( gen1_dailymax.index, data=plant1, y=\"DAILY_YIELD_A1\",label=\"DAILY_YIELD_A1\", ); \nsns.lineplot(gen1_dailymax.index, data=plant2, y=\"AC_POWER_B1\",label=\"AC_POWER_B1\",)\nsns.lineplot( gen1_dailymax.index, data=plant2, y=\"DAILY_YIELD_B1\", label=\"DAILY_YIELD_B1\",); ","f1532f43":"plt.figure(figsize=(16, 6))\nsns.lineplot(gen1_dailymax.index, data=plant1, y=\"AC_POWER_A19\",label=\"AC plant1 A19\",)\nsns.lineplot( gen1_dailymax.index, data=plant1, y=\"DAILY_YIELD_A19\",label=\"DAILY YIELD A19\", ); \nsns.lineplot(gen1_dailymax.index, data=plant2, y=\"AC_POWER_B19\",label=\"AC plant2 B19\",)\nsns.lineplot( gen1_dailymax.index, data=plant2, y=\"DAILY_YIELD_B19\", label=\"DAILY YIELD plant2 B19\",);","9698460f":"plt.figure(figsize=(16, 6))\n\nsns.lineplot(x=solar1GEN.index, y=\"DAILY_YIELD\", data=solar1GEN,color=\"forestgreen\"); # kind=\"marker\"\n#plt.plot(ads.Ads, )\nplt.title('E generated (15 min. data)')\nplt.grid(True)\nplt.show()","6b131a7a":"solar1GEN_A1= solar1GEN[solar1GEN.SOURCE_KEY ==\"A1\"]\nsolar1GEN_A1","59249239":"import datetime \nfrom dateutil.rrule import (rrule, MO, TU, WE, TH, FR, SA, SU, YEARLY, MONTHLY, WEEKLY, DAILY, HOURLY, MINUTELY, SECONDLY)\nsolar1GEN_A1.set_index(\"DATE_TIME\", inplace=True)\nplt.figure(figsize=(18, 5)); solar1GEN_A1.DAILY_YIELD.plot(); ","e79f2522":"solar1GEN_A10= solar1GEN[solar1GEN.SOURCE_KEY ==\"A10\"]\n#solar1GEN_A10.sample(10)\nsolar1GEN_A10.set_index(\"DATE_TIME\", inplace=True)\nplt.figure(figsize=(18, 5)); solar1GEN_A1.DAILY_YIELD.plot(); \nsolar1GEN_A10.DAILY_YIELD.plot( c='indigo'); ","7a431859":"print(solar1GEN.TOTAL_YIELD.max(), solar2GEN.TOTAL_YIELD.max(),\"Ratio:\" ,round(solar1GEN.TOTAL_YIELD.max()\/solar2GEN.TOTAL_YIELD.max(),3))","1480fa5d":"print(solar1GEN.TOTAL_YIELD.max(), solar2GEN.TOTAL_YIELDkWh.max(),\"Ratio:\" ,round(solar1GEN.TOTAL_YIELD.max()\/solar2GEN.TOTAL_YIELDkWh.max(),3))","ccb30e42":"solar1GEN[\"Age\"] =solar1GEN.TOTAL_YIELD\/solar1GEN.TOTAL_YIELD.max()\n\nsolar2GEN[\"Age\"] =solar2GEN.TOTAL_YIELD\/solar2GEN.TOTAL_YIELD.max()\n\nsolar2GEN[\"Age_kWh\"] =solar2GEN.TOTAL_YIELD\/solar2GEN.TOTAL_YIELDkWh.max()","f4db6cc5":"sns.distplot(solar1GEN[\"Age\"], bins=50); #  module 'seaborn' has no attribute 'displot'","edbb7d7c":"sns.distplot(solar2GEN[\"Age\"], bins=50); ","906e6392":"dta= pd.to_datetime(\"2020-06-17 09:30:00\"); #dtb= pd.to_datetime(\"2020-05-23 19:00:00\")\nsolar1GEN_17june= solar1GEN[solar1GEN.DATE_TIME== dta] #\nsolar1GEN_17june[\"Age\"] =solar1GEN_17june.TOTAL_YIELD\/solar1GEN_17june.TOTAL_YIELD.max()\nsns.distplot(solar1GEN_17june[\"Age\"], bins=50); ","5d1840dd":"dta= pd.to_datetime(\"2020-06-17 05:30:00\"); dtz= pd.to_datetime(\"2020-06-17 19:30:00\"); #\nsolar2GEN_17june= solar2GEN[solar2GEN.DATE_TIME>= dta] ; solar2GEN_17june= solar2GEN_17june[solar2GEN_17june.DATE_TIME< dtz] \n# no 0 values\nsolar2GEN_17june= solar2GEN_17june[solar2GEN_17june.DAILY_YIELD !=0]\nsolar2GEN_17june= solar2GEN_17june[solar2GEN_17june.AC_POWER !=0]\nbillion= solar2GEN_17june#[solar2GEN_17june.TOTAL_YIELD>1E9] # 2080.43 TOTAL_YIELD>1E9\nbillion.DAILY_YIELD.mean()","314cfa41":"dta= pd.to_datetime(\"2020-06-17 05:30:00\"); dtz= pd.to_datetime(\"2020-06-17 19:30:00\"); #\nsolar1GEN_17june= solar1GEN[solar1GEN.DATE_TIME>= dta] ; solar1GEN_17june= solar1GEN_17june[solar1GEN_17june.DATE_TIME< dtz] \n# no 0 values\nsolar1GEN= solar1GEN[solar1GEN.DAILY_YIELD !=0]\nsolar1GEN= solar1GEN[solar1GEN.AC_POWER !=0]\nmillion= solar1GEN_17june#[solar1GEN_17june.TOTAL_YIELD>1E6] # 3452.55 TOTAL_YIELD>1E6\nmillion.DAILY_YIELD.mean()","d18d2189":"lastyield2 =solar2GEN.groupby([\"DATE\",\"SOURCE_KEY\"])[[\"DAILY_YIELD\"]].last() # [[\"DAILY_YIELD\"]]\nlastyield2 = lastyield2.reset_index( level=\"SOURCE_KEY\")\nlastyield2.index = pd.to_datetime( lastyield2.index)\n#lastyield2     average=  maximum= ,\"SOURCE_KEY\"","4037a85b":"lastyield1 =solar1GEN.groupby([\"DATE\",\"SOURCE_KEY\"])[[\"DAILY_YIELD\"]].last() # [[\"DAILY_YIELD\"]]\nlastyield1 = lastyield1.reset_index( level=\"SOURCE_KEY\")\nlastyield1.index = pd.to_datetime( lastyield1.index)","1c00acbe":"#sns.set_theme()\ncmap = sns.palplot(sns.diverging_palette(250.0\/250, 145.0\/250, s=200\/250, l=9, n=22))","b958887f":"fig, axe= plt.subplots(2,1, figsize=(20, 12)) #\nsns.lineplot(x=lastyield1.index, y=\"DAILY_YIELD\", data=lastyield1,  ax=axe[0],lw=0.7, hue=\"SOURCE_KEY\"); #color=cmap,\nsns.lineplot(x=lastyield2.index, y=\"DAILY_YIELD\", data=lastyield2,  ax=axe[1],lw=0.7, hue=\"SOURCE_KEY\");\n#plt.title('Daily yields generated (15 min. data)')\nplt.grid(True); plt.show()","57220ba0":"KWHyield2 =solar2GEN.groupby([\"DATE\",\"SOURCE_KEY\"])[[\"TOTAL_YIELDkWh\"]].last() # [[\"DAILY_YIELD\"]]\nKWHyield2 = KWHyield2.reset_index( level=\"SOURCE_KEY\")\n\nKWHyield2.index = pd.to_datetime( KWHyield2.index)","8c7f9982":"KWHyield1 =solar1GEN.groupby([\"DATE\",\"SOURCE_KEY\"])[[\"TOTAL_YIELD\"]].last() # max\nKWHyield1 = KWHyield1.reset_index( level=\"SOURCE_KEY\")\nKWHyield1.index = pd.to_datetime( KWHyield1.index)","36aa939f":"KWHyield1 =solar1GEN.groupby([\"DATE_TIME\",\"SOURCE_KEY\"])[[\"TOTAL_YIELD\"]].last() # max\nKWHyield1 = KWHyield1.reset_index( level=\"SOURCE_KEY\")\nKWHyield1.index = pd.to_datetime( KWHyield1.index)","4f80a3e2":"fig, axe= plt.subplots(1,1, figsize=(12, 8)) #p\nsns.lineplot(x=KWHyield1.index, y=\"TOTAL_YIELD\", data=KWHyield1, color=cmap, lw=0.7, hue=\"SOURCE_KEY\"); #ax=axe[0]","ef161306":"fig, axe= plt.subplots(1,1, figsize=(12, 8)) #p\nsns.lineplot(x=KWHyield2.index, y=\"TOTAL_YIELDkWh\", data=KWHyield2, color=cmap, lw=0.7, hue=\"SOURCE_KEY\"); #ax=axe[0]","0b056a0c":"KWHyield2 =solar2GEN.groupby([\"DATE_TIME\",\"SOURCE_KEY\"])[[\"TOTAL_YIELDkWh\"]].last() # [[\"DAILY_YIELD\"]]\nKWHyield2 = KWHyield2.reset_index( level=\"SOURCE_KEY\")\nKWHyield2.index = pd.to_datetime( KWHyield2.index)\nKWHyield2    # average=  maximum= ,\"SOURCE_KEY\"","2eb07902":"KWHyield2.to_csv(\"\/kaggle\/working\/KWHyield2.csv\")","bdcce9b9":"KWHyield2 =solar2GEN.groupby([\"DATE_TIME\",\"SOURCE_KEY\"])[[\"TOTAL_YIELDkWh\"]].max() # [[\"DAILY_YIELD\"]]\nKWHyield2 = KWHyield2.reset_index( level=\"SOURCE_KEY\")\nKWHyield2.index = pd.to_datetime( KWHyield2.index)","b88bd001":"fig, axe= plt.subplots(1,1, figsize=(20, 12)) #\nplt.get_cmap('jet')\nsns.lineplot(x=KWHyield2.index, y=\"TOTAL_YIELDkWh\", data=KWHyield2, color=cmap, lw=0.7, hue=\"SOURCE_KEY\"); #ax=axe[0]","17bd01dc":"B2 =KWHyield2[KWHyield2.SOURCE_KEY ==\"B2\"]; \nfig, axe= plt.subplots(1,1, figsize=(20, 4))\nsns.lineplot(x=B2.index, y=\"TOTAL_YIELDkWh\", data=B2); ","469665e2":"B2.head()","e00548de":"M24mayblib= B2[(B2.index>=\"2020-05-24 06:00:00\") &(B2.index<\"2020-05-24 23:00:00\")]\nM24may_2sensor = solar2Sensor[(solar2Sensor.DATE_TIME>=\"2020-05-24 06:00:00\") &(solar2Sensor.DATE_TIME<\"2020-05-24 23:00:00\")]","0428961b":"fig, axe= plt.subplots(1,1, figsize=(12, 5))\nsns.lineplot( x=M24may_2sensor.index ,y=M24may_2sensor.MODULE_TEMPERATURE, data=M24may_2sensor)#\"DATE_TIME\"\nsns.lineplot(  x=M24may_2sensor.index,y=M24mayblib.TOTAL_YIELDkWh\/50000, data=M24mayblib); \nplt.grid(b=True,which='minor', axis=\"both\"); plt.ylim=(25,90)\naxe.set( ylim=(25,70));  ","d50bcdee":"fig, axe= plt.subplots(1,1, figsize=(12, 5))\nsns.lineplot( x=M24may_2sensor.index,y=M24may_2sensor.MODULE_TEMPERATURE, data=M24may_2sensor)\nsns.lineplot(  x=M24may_2sensor.index,y=M24mayblib.TOTAL_YIELDkWh\/50000, data=M24mayblib); \nplt.grid(b=True,which='minor', axis=\"both\"); \naxe.set( ylim=(5,90));  ","42bf10ad":"B3 =KWHyield2[KWHyield2.SOURCE_KEY ==\"B3\"]; \nfig, axe= plt.subplots(1,1, figsize=(18, 4))\nsns.lineplot(  x=B3.index,y=B3.TOTAL_YIELDkWh, data=B3); ","74ca6ac7":"M24maybliB3= B3[(B3.index>=\"2020-06-02 06:00:00\") &(B3.index<\"2020-06-04 23:00:00\")]\nM24may_2sensorB3 = solar2Sensor[(solar2Sensor.DATE_TIME>=\"2020-06-02 06:00:00\") &(solar2Sensor.DATE_TIME<\"2020-06-04 23:00:00\")]\nfig, axe= plt.subplots(1,1, figsize=(12, 5))\nsns.lineplot( x=M24may_2sensorB3.index,y=M24may_2sensorB3.MODULE_TEMPERATURE, data=M24may_2sensorB3)\nsns.lineplot(  x=M24may_2sensorB3.index,y=M24maybliB3.TOTAL_YIELDkWh\/50000, data=M24maybliB3); \nplt.grid(b=True,which='minor', axis=\"both\"); plt.title(\"Inverter B3 ECG\")\naxe.set( ylim=(5,90)); ","690cdc3a":"billion.DAILY_YIELD.mean()\/billion.DAILY_YIELD.max() #0.4534437633686215","cf8dd7a0":"million.DAILY_YIELD.mean()\/million.DAILY_YIELD.max()#0.5236844125145991","704086de":"dta= pd.to_datetime(\"2020-05-23 05:30:00\"); dtb= pd.to_datetime(\"2020-05-23 19:30:00\")\nSensor2dt_mei23_= solar2Sensordt[solar2Sensordt.index>= dta] #\"2020-5-23 05:30:00\"\nSensor2dt_mei23_= Sensor2dt_mei23_[Sensor2dt_mei23_.index <=dtb]; #","582ca674":"dta= pd.to_datetime(\"2020-05-01 05:30:00\"); dtb= pd.to_datetime(\"2020-05-31 19:30:00\")\nSensor2dt_mei= solar2Sensordt[solar2Sensordt.index>= dta] #\"2020-5-23 05:30:00\"\nSensor2dt_mei= Sensor2dt_mei[Sensor2dt_mei.index <=dtb]; #","4cb8d732":"mei23B_merg = Sensor2dt_mei23_.merge(solar2GEN,left_index=True, right_on=\"DATE_TIME\" )","fdd55858":"mei23B_merg= mei23B_merg.loc[(mei23B_merg.AC_POWER !=0)] # weed out 0\nTOTAL_YIELDkWh_avg= np.mean(mei23B_merg.TOTAL_YIELDkWh); TOTAL_YIELDkWh_avg #","093b8117":"mei23B_merg.sample()","26dfb2be":"DAILY_YIELD_avg= np.mean(mei23B_merg.DAILY_YIELD); DAILY_YIELD_avg #DAILY_YIELD","6d5c843e":"mei23B_merg= mei23B_merg.rename(columns={\"SOURCE_KEY_y\": \"SOURCE_KEY\"})\n\nbagger= mei23B_merg.loc[(mei23B_merg.MODULE_TEMPERATURE >50)& ( mei23B_merg.DAILY_YIELD < DAILY_YIELD_avg)&(mei23B_merg.AC_POWER !=0)]\nbaggermean= bagger.groupby(\"SOURCE_KEY\")[\"MODULE_TEMPERATURE\"].agg( size= np.size)\n\nbaggermean.tail()","f7ae8c1f":"bagger_max= bagger.groupby(\"SOURCE_KEY\")[\"MODULE_TEMPERATURE\"].agg( Min= min, mean= np.mean,Max= max, size= np.size)","9662204a":"fig, ax= plt.subplots(1,1, figsize=(12, 5) ); bagger_maxx=bagger_max.loc[:,[\"Min\",\"mean\",\"Max\"]]\n\nsns.scatterplot(  data=bagger_maxx, ax=ax);","63850892":"mei_B_merg = Sensor2dt_mei.merge(solar2GEN,left_index=True, right_on=\"DATE_TIME\" )\n\n#mei_B_merg = mei_B_merg.loc[(mei_B_merg.AC_POWER !=0)]\nmei_B_merg.info()","5978e17c":"DAILY_YIELD_avg1= np.mean(mei_B_merg.DAILY_YIELD); DAILY_YIELD_avg1 #","f69eec31":"mei_B_merg= mei_B_merg.rename(columns={\"SOURCE_KEY_y\": \"SOURCE_KEY\"})\n\nbagB= mei_B_merg.loc[(mei_B_merg.MODULE_TEMPERATURE >50)& ( mei_B_merg.DAILY_YIELD < DAILY_YIELD_avg)& (mei_B_merg.AC_POWER !=0)]\nbagB_mean= bagB.groupby(\"SOURCE_KEY\")[\"MODULE_TEMPERATURE\"].agg( Min= min, mean= np.mean, Max= max, size= np.size) #\n\nbagB_mean.head()","c440d026":"fig, ax= plt.subplots(1,1, figsize=(15, 7) ); bagB_meanx=bagB_mean.loc[:,[\"Min\",\"mean\",\"Max\"]]\n\nsns.scatterplot(  data=bagB_meanx, ax=ax); #\nax2 = plt.twinx()\nsns.scatterplot(x=bagB_mean.index, y=\"size\",data=bagB_mean, color=\"red\",marker=\"^\", label=\"Size\",ax=ax2); #\"SOURCE_KEY\"\nax2.figure.legend();","dec32e86":"dta= pd.to_datetime(\"2020-05-23 05:30:00\"); dtb= pd.to_datetime(\"2020-05-23 19:30:00\")\nSensor1dt_mei23_= solar1Sensordt[solar1Sensordt.index>= dta] #\"2020-5-23 05:30:00\"\nSensor1dt_mei23_= Sensor1dt_mei23_[Sensor1dt_mei23_.index <=dtb]; #","9c161ed5":"mei23A_merg = Sensor1dt_mei23_.merge(solar1GEN,left_index=True, right_on=\"DATE_TIME\" )","0bedd73b":"DAILY_YIELD_avg1= np.mean(mei23A_merg.DAILY_YIELD); DAILY_YIELD_avg1 #DAILY_YIELD","9ec59c88":"bagA= mei23A_merg.loc[(mei23A_merg.MODULE_TEMPERATURE >50)& ( mei23A_merg.DAILY_YIELD < DAILY_YIELD_avg)& (mei23A_merg.AC_POWER !=0)]\nbagA_mean= bagA.groupby(\"SOURCE_KEY_y\")[\"MODULE_TEMPERATURE\"].agg( Min= min, mean= np.mean, Max= max, ) # size= np.size\n\nbagA_mean.head()","7d7a0791":"fig, ax= plt.subplots(1,1, figsize=(12, 5) ); #bagA_meanx=bagA_mean.loc[:,[\"Min\",\"mean\",\"Max\"]]\n\nsns.scatterplot(  data=bagA_mean, ax=ax); # hue=\"SOURCE_KEY\"","b7d26bbc":"solar1GEN[\"DC_POWER\"] = solar1GEN.DC_POWER\/10\nsolar1GENdt[\"DC_POWER\"]= solar1GENdt.DC_POWER\/10\ndf1_DC = solar1GENdt.DC_POWER.resample('D').sum()\ndf1_AC = solar1GENdt.AC_POWER.resample('D').sum()\ndf1_DY = solar1GENdt.DAILY_YIELD.resample('D').last() #.max()\ndf1_TY = solar1GENdt.TOTAL_YIELD.resample('D').last() #.max()\ndf1_DC.tail()","98413647":"df = pd.merge( df1_DC, df1_AC, left_index=True, right_index=True) \ndf_ = pd.merge( df1_DY ,df1_TY, left_index=True, right_index=True) \ndf_1 = pd.merge( df ,df_, left_index=True, right_index=True) \n\ndf_1[\"Effic\"]=df_1.AC_POWER \/df_1.DC_POWER \nroundingP1(df_1)\ndf_1.tail(15)","1ea7c653":"#df_1.info()","6e8f29c1":"df2_DC = solar2GENdt.DC_POWER.resample('D').sum()\ndf2_AC = solar2GENdt.AC_POWER.resample('D').sum()\ndf2_DY = solar2GENdt.DAILY_YIELD.resample('D').last()\ndf2_TY = solar2GENdt.TOTAL_YIELD.resample('D').last()\ndf2_DC.tail()","840aefb5":"df = pd.merge( df2_DC, df2_AC, left_index=True, right_index=True) \ndf_ = pd.merge( df2_DY ,df2_TY, left_index=True, right_index=True) \n\ndf_2 = pd.merge( df ,df_, left_index=True, right_index=True) ","975594f2":"#df_2.info()","03771de5":"fig, ax= plt.subplots(2,2, figsize=(16, 10), sharex=True, sharey=True)\nsns.pointplot(df_1.index, data=df_1, y=df_1.AC_POWER\/85,label=\"AC POWER 1\", join=False, ci=\"sd\", ax=ax[0,0], ); #units=\"AC POWER 1\"\nsns.pointplot( df_1.index, data=df_1, y=\"DAILY_YIELD\",label=\"DAILY YIELD 1\", join=False, ci=\"sd\", ax=ax[0,1]); plt.xticks([])\nsns.pointplot(df_1.index, data=df_2, y=df_2.AC_POWER\/85,label=\"AC POWER 2\", join=False, ci=\"sd\", ax=ax[1,0]); plt.xticks([])\nsns.pointplot( df_1.index, data=df_2, y=\"DAILY_YIELD\", label=\"DAILY_YIELD 2\",join=False, ci=\"sd\", ax=ax[1,1]);  # \nplt.xticks([]);","27462703":"dta= pd.to_datetime(\"2020-05-23 05:30:00\"); dtb= pd.to_datetime(\"2020-05-23 19:00:00\")\nsolar1GEN23MAY= solar1GEN[solar1GEN.DATE_TIME>= dta] #\"2020-5-23 05:30:00\"\nsolar1GEN23MAY= solar1GEN23MAY[solar1GEN23MAY.DATE_TIME <dtb]; #\"2020-5-23 19:30:00\"","730c9528":"plt.figure(figsize=(16, 9))\nax= sns.lineplot(x=solar1GEN23MAY.DATE_TIME, y=\"DC_POWER\", data=solar1GEN23MAY,color=\"forestgreen\"); # kind=\"marker\"\nsns.lineplot(x=solar1GEN23MAY.DATE_TIME, y=\"AC_POWER\", data=solar1GEN23MAY,color=\"indigo\", ax=ax); \nplt.title('E generated (23 MAY)')\nplt.grid(\"True\"); \nplt.ylim=(250,1400); #plt.show()","91c76016":"dta= pd.to_datetime(\"2020-05-23 05:30:00\"); dtb= pd.to_datetime(\"2020-05-23 19:00:00\")\nsolar1GEN_mei23_= solar1GEN[solar1GEN.DATE_TIME>= dta] # 2nd version !\nsolar1GEN_mei23_= solar1GEN_mei23_[solar1GEN_mei23_.DATE_TIME <dtb]; #\"2020-5-23 19:30:00\"","d8841952":"solar1GEN_mei23_piv= solar1GEN_mei23_.pivot(index=\"SOURCE_KEY\" , columns=\"DATE_TIME\", values= \"AC_POWER\")","fc950932":"solar1GEN_mei23_piv2= solar1GEN_mei23_.pivot(index=\"DATE_TIME\", columns=\"SOURCE_KEY\", values= \"AC_POWER\")\nsolar1GEN_mei23_piv2.head()","6076211c":"plt.figure(figsize=(18, 15))\nsns.heatmap( data=solar1GEN_mei23_piv);","8a2f7fc0":"#solar1GEN.head()","76a45c65":"solar1GEN_piv= solar1GEN[(solar1GEN.TIME>=  pd.to_datetime(\"06:00:00\").time()) & (solar1GEN.TIME<=  pd.to_datetime(\"22:00:00\").time())]\nsolar1GEN_piv= solar1GEN_piv.pivot_table( index=\"DATE_TIME\", columns=\"SOURCE_KEY\", values= \"AC_POWER\")#.max(\nsolar1GEN_piv","30fb7ede":"solar1GEN_piv= solar1GEN_piv.dropna()\n#solar1GEN_piv['TIME'] = solar1GEN_piv.index.apply(lambda x:x.time()) # ['DATE_TIME']\n#solar1GEN_piv = solar1GEN_piv[(solar1GEN_piv.TIME >  pd.to_datetime(\"06:00:00\")) & (solar1GEN_piv.TIME <=  pd.to_datetime(\"22:00:00\"))]","a9e6c92b":"plt.figure(figsize=(18, 14))\nsns.heatmap(data=solar1GEN_piv, ); #linewidths=0.1,  ","0b4062d7":"groupfallout= [\"2020-05-15\",\"2020-05-19\",\"2020-05-21\",\"2020-05-22\",\"2020-05-27\", \"2020-05-29\", \n               \"2020-06-02\", \"2020-06-04\", \"2020-06-05\", \"2020-06-06\"]\ndayends=[\"2020-05-15 23:00:00\",\"2020-05-19 23:00:00\",\"2020-05-21 23:00:00\",\"2020-05-22 23:00:00\",\"2020-05-27 23:00:00\",\"2020-05-29 23:00:00\",\n         \"2020-06-02 23:00:00\", \"2020-06-04 23:00:00\",\"2020-06-05 23:00:00\",\"2020-06-06 23:00:00\"]\ndfx=pd.DataFrame()\n\ndf = solar1GEN[(solar1GEN.DATE_TIME >  pd.to_datetime(\"2020-05-15 06:00:00\")) & (solar1GEN.DATE_TIME <=  pd.to_datetime(\"2020-05-15 23:00:00\"))]\ndfx=dfx.append(df)\ndf = solar1GEN[(solar1GEN.DATE_TIME >  pd.to_datetime(\"2020-05-19 06:00:00\")) & (solar1GEN.DATE_TIME <=  pd.to_datetime(\"2020-05-19 23:00:00\"))]\ndfx=dfx.append(df)\ndf = solar1GEN[(solar1GEN.DATE_TIME >  pd.to_datetime(\"2020-05-21 06:00:00\")) & (solar1GEN.DATE_TIME <=  pd.to_datetime(\"2020-05-21 23:00:00\"))]\ndfx=dfx.append(df)\ndf = solar1GEN[(solar1GEN.DATE_TIME >  pd.to_datetime(\"2020-05-22 06:00:00\")) & (solar1GEN.DATE_TIME <=  pd.to_datetime(\"2020-05-23 23:00:00\"))]\ndfx=dfx.append(df)\ndf = solar1GEN[(solar1GEN.DATE_TIME >  pd.to_datetime(\"2020-05-27 06:00:00\")) & (solar1GEN.DATE_TIME <=  pd.to_datetime(\"2020-05-27 23:00:00\"))]\ndfx=dfx.append(df)\ndf = solar1GEN[(solar1GEN.DATE_TIME >  pd.to_datetime(\"2020-05-29 06:00:00\")) & (solar1GEN.DATE_TIME <=  pd.to_datetime(\"2020-05-29 23:00:00\"))]\ndfx=dfx.append(df)\ndf = solar1GEN[(solar1GEN.DATE_TIME >  pd.to_datetime(\"2020-06-02 06:00:00\")) & (solar1GEN.DATE_TIME <=  pd.to_datetime(\"2020-06-02 23:00:00\"))]\ndfx=dfx.append(df)\ndf = solar1GEN[(solar1GEN.DATE_TIME >  pd.to_datetime(\"2020-06-04 06:00:00\")) & (solar1GEN.DATE_TIME <=  pd.to_datetime(\"2020-06-04 23:00:00\"))]\ndfx=dfx.append(df)\ndf = solar1GEN[(solar1GEN.DATE_TIME >  pd.to_datetime(\"2020-06-05 06:00:00\")) & (solar1GEN.DATE_TIME <=  pd.to_datetime(\"2020-06-05 23:00:00\"))]\ndfx=dfx.append(df)\ndf = solar1GEN[(solar1GEN.DATE_TIME >  pd.to_datetime(\"2020-06-06 06:00:00\")) & (solar1GEN.DATE_TIME <=  pd.to_datetime(\"2020-06-06 23:00:00\"))]\ndfx=dfx.append(df)","d9fdcdd5":"outgroup=[\"A5\",\"A11\", \"A12\",\"A14\",\"A16\", \"A18\",\"A19\",\"A21\", \"A22\",\"A25\"]\nsolar1GEN_out= dfx.loc[dfx.SOURCE_KEY.isin(outgroup) ]\nsolar1GEN_out= solar1GEN_out.set_index(\"DATE_TIME\")\nsolar1GEN_out_merg = solar1Sensordt.merge(solar1GEN_out, left_index=True, right_index=True ) # solar1GEN_A12","fd8eae84":"def Rollingsum(df,t):\n    df[\"AMB_rol\"+str(t)] =df.AMBIENT_TEMPERATURE.rolling(t).sum()\n    df[\"MOD_rol\"+str(t)] =df.MODULE_TEMPERATURE.rolling(t).sum()\n    df[\"D_Y_dif\"+str(t)] =df.DAILY_YIELD.diff(1)  #rolling(t)\n    df[\"D_Y_rol\"+str(t)] =df[\"D_Y_dif\"+str(t)].rolling(t).sum()\n    df[\"AC_rol\"+str(t)] =df.AC_POWER.rolling(t).sum()\n    df[\"DC_rol\"+str(t)] =df.DC_POWER.rolling(t).sum()","5969a7b2":"Rollingsum(solar1GEN_out_merg,4)","5d7132cf":"#solar1GEN_out_merg.sample(6)","c18f3e5b":"solar1GEN_out_merghigh =solar1GEN_out_merg.loc[solar1GEN_out_merg.MODULE_TEMPERATURE> 30] \nsolar1GEN_out_merghigh.head()","89681546":"plt.figure(figsize=(20, 10))\nsns.lineplot(x=solar1GEN_out_merghigh.index, y=\"MODULE_TEMPERATURE\", data=solar1GEN_out_merghigh, lw=0.85); # \"DATE_TIME\"\nsns.lineplot(x=solar1GEN_out_merghigh.index, y=\"AMBIENT_TEMPERATURE\", data=solar1GEN_out_merghigh, lw=0.95); \nplt.xlim( pd.to_datetime(\"2020-05-29\"), pd.to_datetime(\"2020-06-06\")); \nplt.ylim=(25,65); ","be44e7f2":"sns.scatterplot(x=\"MODULE_TEMPERATURE\" ,y='AMBIENT_TEMPERATURE', data=solar1GEN_out_merghigh, hue=\"AC_POWER\",s=7); ","79ca4f47":"sns.scatterplot(x=\"MODULE_TEMPERATURE\" ,y='AMBIENT_TEMPERATURE', data=solar1GEN_out_merghigh, hue=\"DAILY_YIELD\",s=8);","455c4d57":"dfx=pd.DataFrame()\n\ndf = solar2GEN[(solar2GEN.DATE_TIME >  pd.to_datetime(\"2020-05-15 06:00:00\")) & (solar2GEN.DATE_TIME <=  pd.to_datetime(\"2020-05-15 23:00:00\"))]\ndfx=dfx.append(df)\ndf = solar2GEN[(solar2GEN.DATE_TIME >  pd.to_datetime(\"2020-05-19 06:00:00\")) & (solar2GEN.DATE_TIME <=  pd.to_datetime(\"2020-05-19 23:00:00\"))]\ndfx=dfx.append(df)\ndf = solar2GEN[(solar2GEN.DATE_TIME >  pd.to_datetime(\"2020-05-21 06:00:00\")) & (solar2GEN.DATE_TIME <=  pd.to_datetime(\"2020-05-21 23:00:00\"))]\ndfx=dfx.append(df)\ndf = solar2GEN[(solar2GEN.DATE_TIME >  pd.to_datetime(\"2020-05-22 06:00:00\")) & (solar2GEN.DATE_TIME <=  pd.to_datetime(\"2020-05-23 23:00:00\"))]\ndfx=dfx.append(df)\ndf = solar2GEN[(solar2GEN.DATE_TIME >  pd.to_datetime(\"2020-05-27 06:00:00\")) & (solar2GEN.DATE_TIME <=  pd.to_datetime(\"2020-05-27 23:00:00\"))]\ndfx=dfx.append(df)\ndf = solar2GEN[(solar2GEN.DATE_TIME >  pd.to_datetime(\"2020-05-29 06:00:00\")) & (solar2GEN.DATE_TIME <=  pd.to_datetime(\"2020-05-29 23:00:00\"))]\ndfx=dfx.append(df)\ndf = solar2GEN[(solar2GEN.DATE_TIME >  pd.to_datetime(\"2020-06-02 06:00:00\")) & (solar2GEN.DATE_TIME <=  pd.to_datetime(\"2020-06-02 23:00:00\"))]\ndfx=dfx.append(df)\ndf = solar2GEN[(solar2GEN.DATE_TIME >  pd.to_datetime(\"2020-06-04 06:00:00\")) & (solar2GEN.DATE_TIME <=  pd.to_datetime(\"2020-06-04 23:00:00\"))]\ndfx=dfx.append(df)\ndf = solar2GEN[(solar2GEN.DATE_TIME >  pd.to_datetime(\"2020-06-05 06:00:00\")) & (solar2GEN.DATE_TIME <=  pd.to_datetime(\"2020-06-05 23:00:00\"))]\ndfx=dfx.append(df)\ndf = solar2GEN[(solar2GEN.DATE_TIME >  pd.to_datetime(\"2020-06-06 06:00:00\")) & (solar2GEN.DATE_TIME <=  pd.to_datetime(\"2020-06-06 23:00:00\"))]\ndfx=dfx.append(df)","111676b1":"solar2GEN_out= dfx#.loc[dfx.SOURCE_KEY.isin(outgroup) ]\nsolar2GEN_out= solar2GEN_out.set_index(\"DATE_TIME\")\nsolar2GEN_out_merg = solar1Sensordt.merge(solar2GEN_out, left_index=True, right_index=True ) # solar2GEN_A12","e35f74ad":"solar2GEN_out_merghigh =solar2GEN_out_merg.loc[solar2GEN_out_merg.MODULE_TEMPERATURE> 30] ","11998f79":"plt.figure(figsize=(20, 12))\nsns.lineplot(x=solar2GEN_out_merghigh.index , y=\"MODULE_TEMPERATURE\", data=solar2GEN_out_merghigh, lw=0.85); \nsns.lineplot(x=solar2GEN_out_merghigh.index , y=\"AMBIENT_TEMPERATURE\", data=solar2GEN_out_merghigh, lw=0.95); \nplt.xlim(pd.to_datetime(\"2020-05-21\") ,pd.to_datetime(\"2020-05-30\")); plt.ylim=(30,63); ","0a9906b3":"sns.scatterplot(x=\"MODULE_TEMPERATURE\" ,y='AMBIENT_TEMPERATURE', data=solar2GEN_out_merghigh, hue=\"AC_POWER\",s=9); ","0d0afb70":"def Rollingsum(df,t):\n    df[\"AMB_rol\"+str(t)] =df.AMBIENT_TEMPERATURE.rolling(t).sum()\n    df[\"MOD_rol\"+str(t)] =df.MODULE_TEMPERATURE.rolling(t).sum()\n    df[\"D_Y_dif\"+str(t)] =df.DAILY_YIELD.diff(1)  #rolling(t)\n    df[\"D_Y_rol\"+str(t)] =df[\"D_Y_dif\"+str(t)].rolling(t).sum()\n    df[\"AC_rol\"+str(t)] =df.AC_POWER.rolling(t).sum()\n    df[\"DC_rol\"+str(t)] =df.DC_POWER.rolling(t).sum()","e1cfdb0d":"Rollingsum(solar1GEN_out_merg,4)","c9fb9bac":"solar1GEN_out_merg.sample(1)","573c020b":"rol4 =solar1GEN_out_merg[[\"AMB_rol4\",\"MOD_rol4\",\"D_Y_rol4\",\"AC_rol4\", \"DC_rol4\"]] # \"DATE_TIME\",\nrol4= rol4[(rol4.index >\"2020-06-04 05:00:00\") & (rol4.index <\"2020-06-05\")]\nrol4= rol4[rol4.D_Y_rol4 > -2000]\n\nplt.style.use(\"ggplot\")\nfig, ax= plt.subplots(1,1, figsize=(16, 10))\nsns.lineplot(x=rol4.index, y=rol4.MOD_rol4, data=rol4, label=\"MOD_rol4\", lw=0.95); \nsns.lineplot(x=rol4.index , y=rol4.D_Y_rol4*2, data=rol4, label=\"D_Y_rol4 $*2$\", lw=0.95); \nsns.lineplot(x=rol4.index, y= rol4.DC_rol4\/18, data=rol4, label=\"DC_rol4 $\/18$\", lw=0.95); \nplt.axhline(y=180, xmin=0, xmax=1, ls=\":\", color=\"violet\") # 45\u00b0C\n#plt.gca()\ndt04 =pd.to_datetime(\"2020-06-04 05:00:00\"); dt05 =pd.to_datetime(\"2020-06-04 21:00:00\"); \nax.set_xlim( dt04, dt05) #plt.xlim( dt04, dt05)\nax.set_ylim(75,275)\nplt.grid(True)\nplt.title(\"Produced current and yield for plant 1, 2020-06-04\"); ","af62bbea":"Rollingsum(solar2GEN_out_merg,4)\n\nrol4 =solar2GEN_out_merg[[\"AMB_rol4\",\"MOD_rol4\",\"D_Y_rol4\",\"AC_rol4\", \"DC_rol4\"]] # \"DATE_TIME\",\nrol4= rol4[(rol4.index >=\"2020-06-04 05:00:00\") & (rol4.index <\"2020-06-05\")]\nrol4= rol4[rol4.D_Y_rol4 > -2000]\n\nplt.style.use(\"ggplot\")\nfig, ax= plt.subplots(1,1, figsize=(16, 10))\nsns.lineplot(x=rol4.index, y=rol4.MOD_rol4, data=rol4,label=\"MOD_rol4\", lw=0.95);  #DATE_TIME\nsns.lineplot(x=rol4.index, y=rol4.D_Y_rol4*4, data=rol4,label=\"D_Y_rol4 $*4$\", lw=0.95); \nsns.lineplot(x=rol4.index, y= rol4.DC_rol4\/18, data=rol4,label=\"DC_rol4 $\/18$\", lw=0.95); \nax.set_xlim(pd.to_datetime(\"2020-06-04 06:00:00\"),pd.to_datetime(\"2020-06-04 21:00:00\"))\nax.set_ylim(50,250)\nplt.axhline(y=180, xmin=0, xmax=1, ls=\":\") # 45\u00b0C\nplt.title(\"Produced current and yield for plant2, 2020-06-04\"); ","721cbe32":"sensors1_list =solar1Sensor.SOURCE_KEY.unique()\nsolar1Sensor= solar1Sensor.drop([\"SOURCE_KEY\"], axis=1) # \"PLANT_ID\",\nsolar1Sensordt= solar1Sensor.set_index(\"DATE_TIME\",  ) #inplace=True\nsolar1Sensordt.head()","7629b68c":"sensors2_list =solar2Sensor.SOURCE_KEY.unique()\nsolar2Sensor= solar2Sensor.drop([\"SOURCE_KEY\"], axis=1) # \"PLANT_ID\",\nsolar2Sensordt= solar2Sensor.set_index(\"DATE_TIME\",  ) #inplace=True","fccf9ae0":"fig, ax=  plt.subplots(1,1, figsize=(18, 7.6))  \nplt.gca()  \nsns.lineplot( data=solar1Sensordt);  ","91154cf5":"dta= pd.to_datetime(\"2020-05-23 05:30:00\"); dtb= pd.to_datetime(\"2020-05-23 19:30:00\")\nSensor1dt_mei23_= solar1Sensordt[solar1Sensordt.index>= dta] #\"2020-5-23 05:30:00\"\nSensor1dt_mei23_= Sensor1dt_mei23_[Sensor1dt_mei23_.index <=dtb]; #","aa6e585e":"dta= pd.to_datetime(\"2020-05-01 05:30:00\"); dtb= pd.to_datetime(\"2020-05-31 19:30:00\")\nSensor2dt_mei= solar2Sensordt[solar2Sensordt.index>= dta] #\"2020-5-23 05:30:00\"\nSensor2dt_mei= Sensor2dt_mei[Sensor2dt_mei.index <=dtb]; #","bb946996":"mei23_merg =solar1GEN_mei23_.merge( solar1Sensordt, right_index=True, left_on=\"DATE_TIME\")","495623b7":"mei23B_merg = Sensor2dt_mei23_.merge(solar2GEN,left_index=True, right_on=\"DATE_TIME\" )","e996770f":"mei_B_merg.info()","f4e11641":"mei_B_merg= mei_B_merg.set_index(\"DATE_TIME\")","f391b7b2":"mei_B_merg.head()","aa5323a6":"fig, ax= plt.subplots(1,1, figsize=(18, 7.6))\nsns.lineplot(x=mei23_merg.DATE_TIME,y=mei23_merg.DC_POWER\/850, data=mei23_merg,label=\"DC $\/85$\"); \n#sns.lineplot(x=mei23_merg.DATE_TIME,y=mei23_merg.AC_POWER\/85, data=mei23_merg,label=\"AC $\/85$\");\nsns.lineplot(x=mei23_merg.DATE_TIME,y=mei23_merg.IRRADIATION*30, data=mei23_merg, label=\"Irradiation $*30$\"); \nsns.lineplot(x=mei23_merg.DATE_TIME,y=mei23_merg.MODULE_TEMPERATURE, data=mei23_merg,label=\"Module temp.\"); ","3ba71ae4":"mei_B4_merg= mei_B_merg[mei_B_merg.SOURCE_KEY==\"B4\"] # was renamed\ndta= pd.to_datetime(\"2020-05-23 05:00:00\"); dtb= pd.to_datetime(\"2020-05-23 20:30:00\")\nmei_B4_merg= mei_B4_merg[mei_B4_merg.index>= dta] #\"2020-5-23 05:30:00\"pd.to_datetime(\nmei_B4_merg= mei_B4_merg[mei_B4_merg.index <=dtb]; #pd.to_datetime(\n\nmei_B4_merg[\"AC_std\"]= mei_B4_merg.AC_POWER.rolling(3).std(min_periods=1); \nmei_B4_merg[\"AC_avg\"]= mei_B4_merg.AC_POWER.rolling(3).mean(); \nmei_B4_merg[\"RAD_std\"]= mei_B4_merg.IRRADIATION.rolling(3).std(); \nmei_B4_merg[\"Mod_T_std\"]= mei_B4_merg.MODULE_TEMPERATURE.rolling(3).std(); \nmei_B4_merg[\"Amb_T_std\"]= mei_B4_merg.AMBIENT_TEMPERATURE.rolling(3).std(min_periods=1);","b01fa774":"fig, ax= plt.subplots(1,1, figsize=(17, 7)) #DATE_TIME\nsns.lineplot(x=mei_B4_merg.index ,y=mei_B4_merg.Amb_T_std, data=mei_B4_merg,label=\"Ambient temperature std\"); \nsns.lineplot(x=mei_B4_merg.index ,y=mei_B4_merg.AC_avg\/1200,data=mei_B4_merg,label=\"AC avg\");\nsns.lineplot(x=mei_B4_merg.index ,y=mei_B4_merg.AC_std\/180,  data=mei_B4_merg,label=\"AC std\");\nsns.lineplot(x=mei_B4_merg.index ,y=mei_B4_merg.RAD_std*5,   data=mei_B4_merg, label=\"Radiation std\"); #\nsns.lineplot(x=mei_B4_merg.index ,y=mei_B4_merg.Mod_T_std\/5, data=mei_B4_merg,label=\"Module temp. std\"); #\nplt.title(\"Inv. B4: standard deviations of current and temperatures\"); \nax.set_ylim(0,1.2) #plt.ylim(0,1.2); ","88ca117b":"The daily yields (orange) have been multiplied by 2 in this plot, and currents are 10 times more than those values used in the previous plot of plant 1.  \nThe panel temperature values (blue) have not been changed, so they remain at 4 times their real value: 200 in the plot means 50\u00b0C in reality. ","3a222eef":"### Filter out low production times for plant 1 ...","77c0443f":"### Total yield plant 1","38b3124a":"Note the many dark points for high current above 55\u00b0C. ","43cb69ab":"### Total yield plant 2\nA conversion of the total yield values of plant 2 had to be done in order to get values which we can compare with plant 1. ","794cf7bb":"From 10 AM onwards, the yield tries to follow the (amount of produced) DC current, but above 210 =52.5 \u00b0C, the difference in height btw. DC and yield widens. \nThe yield curve stays behind the DC curve. From this point on, the DC - AC conversion is no longer optimal. The inverters seem to normalize again after inner temperature falling below 50\u00b0C. ","d3800005":"Limit temperature and irradiation values' level of precision","83accca4":"A badly behaving inverter: B4","bbb4ffeb":"### Rearrange data of each Inverter \nIn the meantime we perform a resampling to daily values. ","be6d8054":"###  Filter out low production times for plant 2\n..., but we keep all inverters \nProduced current and yield on 2020-06-04","72b381df":"Compared to plant 1, there are no so many dark spots above 55\u00b0 for plant 2. Daily yields are even more depressed. ","8cc65a77":"## Temperature and irradiation sensor data\nHigher ambient and inner temperatures reduce the capability of inverters to convert energy. ","f75aec73":"Inverter B14 has some very odd behavior concerning total yield values:  \n- 2020-05-29 17:30:00,B14,654535.0888799999  \n- 2020-05-29 17:45:00,B14,610899.5784  \n- 2020-05-29 18:00:00,B14,654535.3710857143  \n\nMoreover, several other inverters of this plant deliver non consistent total yield values. See inverter B2 f.i.  \n**I start to suspect this plant has some systemic issue, which was not disclosed by the donor of the dataset.**","833227ec":"## Panel temperature and ambient temperature\na plot of a \"normal\" functioning solar panel plant","b9f819b6":"### Day 2020-05-23\nwe focus on what happens on a \"warmer\" day","cc8f7ee7":"## Resampling generator data to daily values\nWe try to have a better view on what is happening by viewing daily data.  \nThere appears to be a 10-fold error in a series values: DC power for plant 1. ","997d2095":"### Inverter A1","c88d33bc":"### plant comparison of daily yields","d3137a77":"### Filter out power drops below 50% daily yield.\ntherefore we need merged data:\n#### Plant 2, 2020-05-23","390ee340":"\n### Conclusion:\n\nInverter B4 doesn't slow down the current in its circuit by regulating the voltage. The current drop starts at 10:00 - 10:30.\nI noticed that on average the temperature here is 4\u00b0 higher than at plant 1. What happens here is that the voltage drops happen sooner (at a lower V.) with every degree of panel temperature increase. \n\n   1. It could be the case that this inverter was not configured for optimal functioning, in hot days, of this location.\n   2. Maybe the blocking and by-pass diodes between the panels are not in place, or broken.\n   3. Chose better material for PV cells, like pSi, aSi, InGa.\n\n","72130215":"### <a id=\"B2\">Inverter B2<\/a>: inner temperature and read out of total yields\nThe total yields values are supposed to only increase in time, not to decrease. But during the heat of the day, this is indeed what happens to B2. \nIn the plot the yield starts to drop above 52\u00b0C, and power generation stops soon after this, even before reaching 55\u00b0C.\nOn some panel data sheets you can find the I V-curves: current against voltage curve. The current stays high and constant, a horizontal line, but above say 30V, current will quickly drop to 0. Now as $P=U\u2217I$, resulting power will be 0.","7c228a98":"### Total yields for all Plant 2 inverters\nAnd what happens if we take feature \"date_time\" for a finer timing...\nBlibs are appearing everywhere, and they range in size and duration.","e87894b5":"### Rolling sum and diff\n","d4af9753":"## Inverter heatmap of plant 1","1eaf22f9":"A conversion efficiency of 98% seems ok to me. ","23bfdfa6":"### Plant 1 daily yields over 34 days\nWe can notice about 10 days with yield drops from top to bottom. ","7d0e261b":"Circuits A1 and A14 are always in service, it seems, while the rest is split up in 2 groups (8 and 12). These groups appear to work, or fall out, in turn. \nTake a look at these inverters: A5,A11, A12,A14,A16, A18,A19,A21, A22,A25.  \n\nIt is known that solar panel efficiency is  related to its placement, angle, and the sun's position. And high temperatures are known to reduce efficiency.  \nAs I noticed the solar panel inverter temperatures can reach 65\u00b0C, I suspect that overheated ones reduce or stop producing when a certain threshold is reached.  \nWe can spot 10 days where group fall out occurs: 2020-05-15,2020-05-19,2020-05-21,2020-05-22,2020-05-27, 2020-05-29,2020-06-02, 2020-06-04, 2020-06-05, 2020-06-06. We'll use this selection also for plant 2. ","42885dba":"### Filter out power drops below 50% daily yield: Plant 1\nsome normal behavior is here expected","2af66146":"#### Ideas for adding features are : \n- efficiency of Inverter= AC_POWER\/DC_POWER  \n- DAILY_YIELD increments \n- inverter age i.f.o. max\/relative TOTAL_YIELD  ","aebd17ae":"---","48f10797":"What are these interruptions? Mind they don't happen on the same day, so I exclude some deliberate shut down. ","b3e2dabd":"# Solar Power Generation\nExploration of this dataset with several weird data values, and other oddities, that lead to finding some issues with the hardware of a plant. \nFurther digging leads us to a conclusion: plant X has systemic problems. ","ded538ea":"mei_B_merg = Sensor2dt_mei.merge(solar2GENdt,left_index=True, right_index=True )","00d78185":"rol4 =solar1GEN_out_merg[[\"AMB_rol4\",\"MOD_rol4\",\"D_Y_rol4\",\"AC_rol4\", \"DC_rol4\"]] # \"DATE_TIME\",\nrol4= rol4[(rol4.index >pd.to_datetime(\"2020-06-04 08:00:00\")) & (rol4.index <pd.to_datetime(\"2020-06-05 20:00:00\"))]\n\nfig, ax= plt.subplots(1,1, figsize=(20, 10))\nsns.lineplot(x=rol4.index, y=rol4.MOD_rol4, data=rol4,label=\"MOD_rol4\", lw=0.95); # \"DATE_TIME\", \nsns.lineplot(x=rol4.index, y=rol4.D_Y_rol4*2, data=rol4,label=\"D_Y_rol4 *2\", lw=0.95); \nsns.lineplot(x=rol4.index, y= rol4.DC_rol4\/180, data=rol4,label=\"DC_rol4 \/180\", lw=0.95); \nax.set_xlim(pd.to_datetime(\"2020-06-04 08:00:00\"),pd.to_datetime(\"2020-06-05 20:00:00\")); \nax.set_ylim(75,275);  ","f047a083":"N.B.: in topic <a href=\"#B2\">\"Inverter B2\"<\/a> one cause of reduced production will be revealed. ","d38ef05d":"When I bring these values to the same scale, it is obvious that the generated energy is faulty picked up by the inverter. The daily yields for plant 2 are lower than what we could expect from its generated ac currents.  \nDoes the circuit lose energy somewhere? Maybe something else is wrong? Hardware or software?","d3cb233f":"- Plant 2 is less productive, perhaps due to smaller size or older panel age.\n- Anyway, the ambient temperature at plant 2 is a little higher on average. This has an small negative effect on the solar panels efficiency.\n    - Also, higher inner temperatures of the inverter, e.g. due to conversion, may cause the inverters to \"derate\" sooner than those of plant 1.\n    - derate = to produce less energy thru conversion while being out of manufacturer-intended working range. *derate = to produce less energy thru conversion while being out of manufacturer-intended working range*. ","6e919f06":"## Interludium: introduction to photovoltaic system performance\n\n### N.M. Pearsall, in The Performance of Photovoltaic (PV) System, 2017\n#### **1.3.4 Other performance parameters**\n\nThe three performance parameters discussed in the previous section express the overall performance of the system but it is sometimes useful to consider the specific performance of certain parts of the system in order to ensure the correct design and operational choices.\n\nIt is possible to determine the inverter efficiency if measurements of both DC input and AC output are provided. In general, the efficiency of a PV inverter is a function of the input power and input voltage, with a typical set of efficiency curves being shown in Fig. 1.4. At medium to high light levels and therefore input power from the array, the inverter has a high efficiency, generally well in excess of 90%. At low irradiance levels, the efficiency drops off sharply. This means that we can determine an optimum inverter capacity in comparison with the array capacity, such that the balance between energy loss at the low irradiance end due to reducing efficiency is balanced against energy loss at the high irradiance end due to limiting because of the maximum inverter capacity. This is illustrated in Fig. 1.5, assuming that the basic shape of the inverter efficiency curve does not depend on inverter capacity. Clearly, the balance between energy generation at low and high irradiance values is dependent on the climate and, therefore, so is the optimum inverter\/array ratio, with the general approach of a reduction in this ratio as the latitude increases.\n\n\n*Fig. 1.4. Typical inverter efficiency curve as a function of DC input voltage. The rated input voltage will be a value around the middle of the allowed voltage range. Curves are also shown for higher and lower voltages, closer to the limits of the voltage range.*\n<img src=\".\/kaggle\/input\/inverter-efficiency\/inverter efficiency1.jpg\" embed=\"True\">\n\n*Fig. 1.5. Comparison of inverter efficiency for two inverters, A and B, where the rated capacity of B is 75% of that of A. The general shape of the efficiency curve is assumed to be unaffected by the capacity and the capacity of the PV array is assumed to be equal to A. It can be seen that inverter B provides more output than A at low irradiance values but limits at PV array output values higher than 75% of rated capacity. The optimum capacity of the inverter will depend on the ratio between the energy received at low irradiance and at high irradiance for that particular system.* <img src=\"kaggle\/input\/inverter-efficiency\/inverter efficiency2.jpg\">\n\nBecause of the variation of efficiency with input power, and therefore irradiance on the array, the average operating efficiency of the inverter will vary with climate. In general, the technical information for a PV inverter will include both the peak efficiency (usually between 95% and 98% depending on the inverter technology) and a weighted efficiency to account for the operation at different irradiance levels. In Europe, this weighted efficiency is termed the Euro efficiency and can be represented by Eq. (1.10), as follows: (1.10) \n$$Euro_{efficiency}= 0.03*Eff_{5%} +0.06* Eff_{10%} +0.13*Eff_{20%} +0.1*Eff_{30%} +0.48*Eff_{50%} +0.2*Eff_{100%}$$\n\nHere, Eff_5% is the DC to AC conversion efficiency at an input power of 5% of the inverter capacity, with similar definitions for the other terms. The weighting reflects the amount of energy predicted to be gained at each energy level. An alternative weighting, using the same rationale and approach, is the California Energy Commission or CEC efficiency, calculated as follows [10]: (1.11) \n$$CEC_{efficiency}= 0.04*Eff_{10%} +0.05*Eff_{20%} + 0.12*Eff_{30%} +0.21*Eff_{50%} +0.53*Eff_{75%} +0.05*Eff_{100%}$$\n\nHere the weighting factors are more heavily biased towards the higher irradiance levels, to reflect the difference between the climates in the southwestern USA and central Europe. The use of either the Euro or CEC efficiency gives a lower but more representative value than the peak efficiency in terms of considering the overall inverter efficiency across a period of operation. Clearly, other weightings could be developed for other climate options, although there needs to be consensus within the community for widespread use.\n\nFor a stand-alone PV system, the important parameter is not the total energy generated but whether the load is met for the required time, that is, the service provided by the system. This is sometimes assessed by direct reference to the load, for example, amount of water pumped, amount of product manufactured using PV electricity. However, it is also possible to define parameters to express the system performance, such as the total amount of time for which the load is not met (to be compared with the loss of load probability defined in the system design) and the battery index, which is the percentage of days in a given period when full charge of the batteries in the system is achieved. In general, values over 30% are considered as good, although very high values may indicate an oversized array.","a6de8575":"In the heatmap the endurance of A1 and A14 was visible by their bright timetrack, and now inverter 18 may join them.","15358354":"these est. of inverter age are not credible, since pv panels are not so long commercially available. ","94769f05":"### Plants 1 & 2 production compared\nPlots of the generated and conversed energy (AC) vs. the daily cumulated energy (yield values). ","3ab65b36":"is the underperformance real or perceived? \nHardware or software cause? ","e6a096e7":"We filter out records with panel temperatures above 50\u00b0, daily yields less than average AND ac current (power) isnot 0.","bd257d97":">to be cont...","e1453ee1":"The fluctuations have a negative impact on the average total  yield of plant 2.","0e6d45bb":"## The daily maximum yield per inverter","3091905a":"Generator 1 has step by step increases in yields.","4e6a3197":"## Inverter age estimation and comparison\nThis is an attempt to get an estimate of inverter ages. This will turn out to be very difficult as the plant 2 total yield values are more than 1000 times that of plant 1.  ","f6c8fe17":"### Resampling Generator 2 data","02635e67":">It appears that the current stalls and slows down at 63\u00b0C, and it resumes an upward trend only after the inverter temperature falls below 58\u00b0C. ","50bd1aec":"### <a id=\"B3\">Inverter B3<\/a>: inner temperature and read out of total yields","696c8e23":"### Chronological Heatmap of solar plant 1, May 23rd","e84feae9":"First we rename these strange labels","0b09afe7":"The Inverters cannot keep up the conversion of energy to ac current when a certain amount of DC current - or amount of energy - has been generated. Inhibitors can be inner Inverter temperature, which is a function of the ambient temperature, the device material properties, sufficient ventilation and sufficient cover against direct sunlight.","01e16a89":"### Produced current and yield on plant 1, 2020-06-04","87d0a5e2":"## Module temperatures tempers the amount of generated current","e2eca0be":"We drop the PLANT_ID's to spare memory, and rename the inverter labels.","78714a75":"### Produced current and yield for plant2, 2020-06-04","95219a33":"---","ad81dc50":"B14 is again the odd duck as this inverter amount of yield values is much higher.\nBut perhaps it is caused by the fact that this inverter is the last man standing.\n\nNow the groups deployed in the plant 2 formation have appeared:\n\n    1,11,13,16,17,20,8\n    10,22,4\n    12,2, and perhaps 14\n\n#### Plant 2, whole month May","b13a3d2d":">**Above average alerts are coming from inverters B12,B19, B4, B7, B13 and perhaps B3.  \nThese are good candidates for inspection and replacement.**","93ee1017":"### Comparison of daily produced currents and daily yields\nI want to check if the generated energy will reflect in the daily and total yield values.  \nPlant 1 is the only reference we have at disposal. ","efcfd10a":"#### Average daily yield plant 1 and 2","bc21a688":"##  Correlation btw.  ac current, ambient temperature and module temperature.  \nComparison of the standard deviations of some measurements by a rolling window of 3. "}}