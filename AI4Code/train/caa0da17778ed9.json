{"cell_type":{"9d8cdc38":"code","a18c4479":"code","4eec2f8c":"code","177ebcf3":"code","fcdc40ec":"code","ec73989a":"code","17a8fd49":"code","476d6c89":"code","396b6375":"code","f3eebb9c":"code","90994338":"code","b4ecf2b0":"code","09e3cbbe":"code","c24b1300":"code","e413156b":"code","a6c21938":"code","01c5876f":"code","04049821":"code","a650f838":"code","4f460089":"code","3d7c5da5":"code","f6201b17":"code","90856f66":"code","e102fa72":"code","e9b8715d":"code","2a5eaf9c":"code","8e0ebd66":"code","f555e0d3":"code","1ae11b17":"code","d8192f14":"code","bb51d101":"code","ab95d51e":"code","641b2b06":"code","ff0a6b49":"code","c00c199a":"code","a94f6b63":"code","3348675c":"code","70d2b6b0":"code","69d5d4eb":"code","5c057ca6":"code","fa38a60a":"code","00fc37c4":"code","76735add":"code","3fc881d2":"code","a9ac2116":"code","23050146":"code","5fc8c2f2":"markdown","fae171dd":"markdown","553ba4df":"markdown","f63d4f03":"markdown"},"source":{"9d8cdc38":"import numpy as np\nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport scipy as sp\nfrom sklearn.preprocessing import scale \nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nimport statsmodels.formula.api as smf\n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","a18c4479":"#Importing Dataset\ndata=pd.read_csv('..\/input\/top50.csv', encoding='ISO-8859-1')\ndata.head()","4eec2f8c":"print(data.shape)","177ebcf3":"data=data.dropna(how='all')","fcdc40ec":"data.info()","ec73989a":"print(data.groupby('Genre').size())","17a8fd49":"data.isnull().sum().sum()","476d6c89":"data=data.sort_values(['Unnamed: 0'])\ndata=data.reindex(data['Unnamed: 0'])\ndata=data.drop(\"Unnamed: 0\",axis=1)\ndata.head()","396b6375":"data.describe().T","f3eebb9c":"data=data.loc[:49,:]","90994338":"#Rename Column\ndata=data.rename(columns={\"Loudness..dB..\": \"Loudness\", \n                          \"Acousticness..\": \"Acousticness\",\n                          \"Speechiness.\":\"Speechiness\",\n                          \"Valence.\":\"Valence\",\n                          \"Length.\":\"Length\"})","b4ecf2b0":"final=data.copy()","09e3cbbe":"#Correlation Matrix Between Numeric Features\nplt.figure(figsize = (16,7))\n\ncorrMatrix = final.corr()\nsns.heatmap(corrMatrix, annot=True, linewidths=.5);","c24b1300":"#Grouping Some Features According To Genre\na=final[['Genre', 'Popularity','Energy', 'Length','Liveness','Acousticness']].groupby(\n    ['Genre'], as_index=False).mean().sort_values(by='Energy', ascending=True)\na","e413156b":"sorted_energy=final.sort_values(by=['Energy'])","a6c21938":"import plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=sorted_energy['Energy'],\n    y=sorted_energy['Loudness'],\n    name=\"Energy and Loudness\"       # this sets its legend entry\n))\n\n\nfig.add_trace(go.Scatter(\n    x=sorted_energy['Energy'],\n    y=sorted_energy['Acousticness'],\n    name=\"Energy and Acousticness\"\n))\n\nfig.update_layout(\n    title=\"Acousticness-Loudness values according to Energy\",\n    xaxis_title=\"Energy\",\n    font=dict(\n        family=\"Courier New, monospace\",\n        size=12,\n        color=\"#7f7f7f\"\n    )\n)\n\nfig.show()","01c5876f":"import plotly.express as px\n\nfig = px.bar(a, x='Genre', y='Popularity',\n             hover_data=['Energy', 'Length'],\n             color='Energy',height=400)\n\nfig.update_layout(\n    title=\"Popularity and energy comparison by Genre\",\n    font=dict(\n        family=\"Courier New, monospace\",\n        size=12,\n        color=\"#7f7f7f\"\n    )\n)\n\nfig.show()","04049821":"fig = px.bar(a, y='Acousticness', x='Genre').update_xaxes(categoryorder='total ascending')\n\nfig.update_layout(\n    title=\"Acousticness comparison by Genre\",\n    font=dict(\n        family=\"Courier New, monospace\",\n        size=12,\n        color=\"#7f7f7f\"\n    )\n)\nfig.show()","a650f838":"#Add to new column according to Genre\n\nfinal['GeneralGenre']=['hip hop' if each =='atl hip hop'\n                      else 'hip hop' if each =='canadian hip hop'\n                      else 'hip hop' if each == 'trap music'\n                      else 'pop' if each == 'australian pop'\n                      else 'pop' if each == 'boy band'\n                      else 'pop' if each == 'canadian pop'\n                      else 'pop' if each == 'dance pop'\n                      else 'pop' if each == 'panamanian pop'\n                      else 'pop' if each == 'pop'\n                      else 'pop' if each == 'pop house'\n                      else 'electronic' if each == 'big room'\n                      else 'electronic' if each == 'brostep'\n                      else 'electronic' if each == 'edm'\n                      else 'electronic' if each == 'electropop'\n                      else 'rap' if each == 'country rap'\n                      else 'rap' if each == 'dfw rap'\n                      else 'hip hop' if each == 'hip hop'\n                      else 'latin' if each == 'latin'\n                      else 'r&b' if each == 'r&n en espanol'\n                      else 'raggae' for each in final['Genre']]","4f460089":"# histogram\nfinal.hist()\nplt.gcf().set_size_inches(15, 15)    #Thanks to this graphic, we can see the feature is right or left skewed.\nplt.show()\n\nfrom pandas.plotting import scatter_matrix\n\n# scatter plot matrix\nscatter_matrix(final)\nplt.gcf().set_size_inches(15, 15)\nplt.show()","3d7c5da5":"color_list = ['red' if i=='electronic' \n              else 'green' if i=='escape room' \n              else 'blue' if i == 'hip hop' \n              else 'purple' if i == 'latin'\n              else 'darksalmon' if i == 'pop'\n              else 'darkcyan' if i == 'raggae'\n              else 'greenyellow' for i in final.loc[:,'Genre']]\npd.plotting.scatter_matrix(final.loc[:,['Energy','Danceability','Length','Popularity']],\n                                       c=color_list,\n                                       figsize= [15,15],\n                                       diagonal='hist',\n                                       alpha=1,\n                                       s = 200,\n                                       marker = '+',\n                                       edgecolor= \"black\")\nplt.show()","f6201b17":"import plotly.express as px\n\nfig = px.scatter(final, x=\"Beats.Per.Minute\", y=\"Valence\",size='Acousticness'\n                 ,color=\"GeneralGenre\")\nfig.show()","90856f66":"#Box Plot Each Features\n\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly as py\nimport plotly.graph_objs as go\n\ninit_notebook_mode(connected=True)\n\ntrace0 = go.Box(\n    y=final['Beats.Per.Minute'],\n    name = 'Beats.Per.Minute'\n)\ntrace1 = go.Box(\n    y=final['Energy'],\n    name = 'Energy'\n)\ntrace2 = go.Box(\n    y=final['Danceability'],\n    name = 'Danceability'\n)\ntrace3 = go.Box(\n    y=final['Loudness'],\n    name = 'Loudness'\n)\ntrace4 = go.Box(\n    y=final['Liveness'],\n    name = 'Liveness'\n)\ntrace5 = go.Box(\n    y=final['Valence'],\n    name = 'Valence'\n)\ntrace6 = go.Box(\n    y=final['Loudness'],\n    name = 'Loudness'\n)\ntrace7 = go.Box(\n    y=final['Length'],\n    name = 'Length'\n)\ntrace8 = go.Box(\n    y=final['Acousticness'],\n    name = 'Acousticness'\n)\ntrace9 = go.Box(\n    y=final['Speechiness'],\n    name = 'Speechiness'\n)\ntrace10 = go.Box(\n    y=final['Popularity'],\n    name = 'Popularity'\n)\ndata = [trace0, trace1, trace2, trace3, trace4, trace5, trace6, trace7, trace8,trace9,trace10]\n\nfig = go.Figure(data=data)\n\npy.offline.iplot(fig)","e102fa72":"pd=pd.DataFrame(final['Genre'].value_counts())\npd.head(2)","e9b8715d":"pd.rename(columns={\"Genre\": \"Count\"},inplace=True)\npd['Genre'] = pd.index\npd['Ratio'] = pd['Count']\/pd['Count'].sum() #Add count ratio for each genre","2a5eaf9c":"pd.head()","8e0ebd66":"pd['Ratio'] = pd['Ratio'].astype(float)","f555e0d3":"import matplotlib.colors as colors\nlabels_list = pd['Genre']\ncolors_list = list(colors._colors_full_map.values())\n\n# Plot\nplt.figure(figsize=(20,10))\nplt.pie(pd['Ratio'], colors=colors_list[0:20],\nautopct='%1.1f%%', shadow=True, startangle=50,\n       labels=labels_list)\n\nplt.axis('equal')\nplt.title('Distribution of the % of Genre')\nplt.show()\n","1ae11b17":"final.info()","d8192f14":"final2=final.drop(columns=['Track.Name', 'Artist.Name', 'GeneralGenre', 'Genre'])","bb51d101":"final2.head()","ab95d51e":"#Rename Column\nfinal2=final2.rename(columns={\"Beats.Per.Minute\": \"BeatsPerMinute\"})","641b2b06":"#Standardizing to all data\n\nfrom sklearn.preprocessing import StandardScaler\nfinal2[['BeatsPerMinute', 'Energy',\n        'Danceability','Loudness',\n        'Liveness','Valence',\n        'Length','Acousticness',\n        'Speechiness','Popularity']] = StandardScaler().fit_transform(final2[['BeatsPerMinute','Energy',\n                                                                              'Danceability','Loudness',\n                                                                              'Liveness','Valence',\n                                                                              'Length','Acousticness',\n                                                                              'Speechiness','Popularity']])","ff0a6b49":"final2.tail()","c00c199a":"# KMeans Clustering\n!pip install yellowbrick\nfrom sklearn.cluster import KMeans\nfrom yellowbrick.cluster import KElbowVisualizer","a94f6b63":"kmeans=KMeans()","3348675c":"visualizer=KElbowVisualizer(kmeans, k=(2,10))\nvisualizer.fit(final2)\nvisualizer.poof()","70d2b6b0":"# PCA variance\nfrom sklearn.decomposition import PCA\nfrom sklearn.pipeline import make_pipeline\n\n\nscaler = StandardScaler()\npca = PCA()\npipeline = make_pipeline(scaler,pca)\npipeline.fit(final2)\n\nplt.bar(range(pca.n_components_), pca.explained_variance_)\nplt.xlabel('PCA feature')\nplt.ylabel('variance')\nplt.show()","69d5d4eb":"from sklearn.cluster import KMeans\nkmeans=KMeans(n_clusters=7)\nkmeans","5c057ca6":"k_fit=kmeans.fit(final2)","fa38a60a":"clusters=k_fit.labels_\nclusters","00fc37c4":"final2['segment']=clusters+1\nfinal2.head()","76735add":"import mpl_toolkits\nfrom mpl_toolkits.mplot3d import Axes3D\n\ncenters=kmeans.cluster_centers_\n\nplt.rcParams['figure.figsize'] = (16,9)\nfig=plt.figure()\n\nax=Axes3D(fig)\nax.scatter(final2.iloc[:,0], final2.iloc[:,1], final2.iloc[:,2]);","3fc881d2":"joined_df_merge = final2.merge(final, how='left', \n                                      left_index=True,\n                                      right_index=True)","a9ac2116":"joined_df_merge[['segment','Genre','GeneralGenre']]","23050146":"from scipy.cluster.hierarchy import linkage,dendrogram\n\nmerg = linkage(final2,method = 'single')\ndendrogram(merg, leaf_rotation = 90, leaf_font_size =5)\nplt.show()","5fc8c2f2":"K-Means Clustering","fae171dd":"As you can see above, while there is an negatif relationship between Energy and Acousticness, there is a positive relationship between Energy and Loudness.","553ba4df":"Unsupervised - Hierarchy","f63d4f03":"For example, this graph shows that the pop genre, which has a high Beats.Per.Minute and Valence values, has low Acousticness value."}}