{"cell_type":{"a35702bd":"code","a6322736":"code","ff4e45ac":"code","c35abc35":"code","9d324846":"code","e527f92f":"code","ca6499e6":"code","7a3e5378":"code","30544edc":"code","42bb48a0":"code","9a79183e":"code","94558939":"code","cd93c0ec":"code","63482bba":"code","da2c2a21":"code","87c7fbf1":"code","5e60b4d4":"code","46ebc010":"code","6233fe12":"code","b3d4e270":"code","30a6eca4":"code","e5c87b1e":"code","af313212":"code","7330c255":"code","34bf3bf4":"code","f7b6b2b6":"code","6b74e855":"code","9963b895":"code","61dcaab8":"code","e2b33b99":"code","a73cb4eb":"markdown","4036b545":"markdown","4eef7b11":"markdown","a2bdd344":"markdown","cc85c474":"markdown","ec9c3a5d":"markdown","51b60e64":"markdown","dbdf0eec":"markdown","3f79616b":"markdown","42b7d630":"markdown","f0605fc6":"markdown","8f87290a":"markdown","2b6fde5f":"markdown","284d5306":"markdown","cf89e9f8":"markdown"},"source":{"a35702bd":"# Intersecction function\n{1, 2, 3, 4, 5}.intersection({3, 4, 5, 6}) # {3,4,5}\n","a6322736":"# Intersecction uinsg operator\n{1, 2, 3, 4, 5} & {3, 4, 5, 6} # {3,4,5}","ff4e45ac":"# Union using Function\n{1, 2, 3, 4, 5}.union({3, 4, 5, 6,8}) #{1,2,3,4,5,6,8}","c35abc35":"# Union using Operator\n{1, 2, 3, 4, 5} | {3, 4, 5, 6,8} #{1,2,3,4,5,6,8}","9d324846":"# Difference uisng function\n{1, 2, 3, 4}.difference({2, 3, 5}) # {1,4}","e527f92f":"# Difference uisng operator\n{1, 2, 3, 4}-{2, 3, 5} # {1,4}","ca6499e6":"# Symmetric difference using function\n#check diff from both sites (elements that are not common)\n{1, 2, 3, 4}.symmetric_difference({2, 3, 5})  # {1,4,5}","7a3e5378":"# Symmetric difference using function\n{1, 2, 3, 4}^{2, 3, 5} # {1,4,5}","30544edc":"# Superset check using funcction\n{1, 2}.issuperset({1, 2, 3}) # False","42bb48a0":"# Superset check using operator\n{1, 2,3}>={1, 2, 3} # True","9a79183e":"# Subset check using function\n{1, 2}.issubset({1, 2, 3})  # True\n","94558939":"# Subset check using operator\n{1, 2} <={1, 2, 3}  # True\n","cd93c0ec":"# Disjoint check using function\n{1, 2}.isdisjoint({3, 4})  # True \n\n","63482bba":"{1, 2}.isdisjoint({1, 4})  # False","da2c2a21":"# Disjoint check using operator\n{1, 2} !={3, 4}","87c7fbf1":"# Existence check \n2 in {1,2,3} # True    ","5e60b4d4":" 4 in {1,2,3} # False    ","46ebc010":"4 not in {1,2,3}  # True","6233fe12":"# Add and Remove\ns = {1,2,3} \ns.add(4) # s == {1,2,3,4}\ns","b3d4e270":"s.discard(3)    # s == {1,2,4} \ns","30a6eca4":"s.discard(5)    # s == {1,2,4} does not throw exception","e5c87b1e":"s.remove(2)     # s == {1,4} \ns.remove(2)     # KeyError! Throw exception\n","af313212":"restaurants = [\"McDonald's\", \"Burger King\", \"McDonald's\", \"Chicken Chicken\"] \nunique_restaurants = set(restaurants)\nprint(unique_restaurants)","7330c255":"list(unique_restaurants)","34bf3bf4":"list(set(restaurants))","f7b6b2b6":"setOfsets = {{1,2}, {3,4}}\n# will throw error unhashable type 'set'","6b74e855":"\nsetOfsets ={frozenset({1, 2}), frozenset({3, 4})} # frozenset is a hashable set\nsetOfsets","9963b895":" setA = {'a','b','b','c'}\n set(['a', 'c', 'b','b'])\n","61dcaab8":"listA = ['a','b','b','c'] \nlistA \n#['a', 'b', 'b', 'c']\n","e2b33b99":"from collections import Counter\ncounterA = Counter(['a','b','b','c'])\ncounterA\n#Counter({'b': 2, 'a': 1, 'c': 1})\n","a73cb4eb":"For implementing multisets Python provides the Counter class from the collections module (starting from version 2.7):","4036b545":"### Set of Sets\n","4eef7b11":"Sets are unordered collections of distinct elements. But sometimes we want to work with unordered collections of elements that are not necessarily distinct and keep track of the elements' multiplicities.","a2bdd344":"but a list data structure introduces an extra unneeded ordering that will slow down our computations.","cc85c474":"Counter is a dictionary where where elements are stored as dictionary keys and their counts are stored as dictionary values. And as all dictionaries, it is an unordered collection.","ec9c3a5d":"This can easily be transformed back into a List with Python's built in list function, giving another list that is the same list as the original but without duplicates:","51b60e64":"##  Sets versus multisets","dbdf0eec":"#### set Operation with single elements ","3f79616b":"Let's say you've got a list of restaurants -- maybe you read it from a \ufb01le. You care about the unique restaurants in the list. The best way to get the unique elements from a list is to turn it into a set:\n","42b7d630":"By saving the strings 'a', 'b', 'b', 'c' into a set data structure we've lost the information on the fact that 'b' occurs twice. Of course saving the elements to a list would retain this information","f0605fc6":"### Get the unique elements of a list","8f87290a":"# Chapter 8: Set","2b6fde5f":"Instead, use frozenset:","284d5306":"## Set Operations","cf89e9f8":"It's also common to see this as one line:"}}