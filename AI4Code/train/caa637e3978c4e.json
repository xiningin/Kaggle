{"cell_type":{"9c9d4bba":"code","fb3ff513":"code","e5fa158d":"code","525897b6":"code","7a66530e":"code","3dc175f8":"code","ef72022d":"code","84b54ef0":"code","6bc17c36":"code","6e5381eb":"code","38f7ae5a":"code","c679a827":"code","be290941":"code","b0947852":"code","782aed4d":"code","d002a8d1":"code","20c172c7":"code","a634125a":"code","6b6412ab":"code","4af7e8a2":"code","df6f982e":"code","7777545f":"code","b121ad45":"code","aa0316d6":"code","b74c07c1":"code","d74e8b4e":"code","14949bbd":"code","29492078":"code","80e4805a":"code","eaa43f0f":"code","33fff23d":"code","adad1ba1":"code","30b5c22e":"code","006bf770":"code","af7e0e1e":"code","7bb2e599":"code","76f1e312":"code","8c2220ac":"code","7a2a481b":"code","639d3367":"code","b081cefb":"code","2f570039":"code","1591ec34":"code","5d0736eb":"code","f001d9a7":"code","66d17004":"code","dd6faf86":"code","cd746e7a":"code","2643ecfc":"code","98b59dec":"code","6c849eea":"code","def7f412":"code","a43fa788":"code","82ceca1d":"code","31ce0496":"code","e8187ad6":"code","64be3152":"code","51adc9e5":"code","9c7f79c7":"code","6c887882":"code","ec4ddec2":"code","72703c37":"code","6d3f50d0":"code","89c25a2c":"code","769301c5":"code","3292a493":"code","c2dd5927":"code","4e656d6c":"code","123ec5b3":"code","27fc3254":"code","5d23f552":"code","1a302a49":"code","e2c1535f":"code","277053eb":"markdown","ae5106e0":"markdown","eed3006d":"markdown","b169a2e9":"markdown","682c6321":"markdown","8fb68ec9":"markdown","c5b3a9ed":"markdown","a04e8ca5":"markdown","99cf1ab0":"markdown"},"source":{"9c9d4bba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fb3ff513":"#import neccessary modules\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns; sns.set(style=\"ticks\", color_codes=True)\nimport matplotlib.pyplot as plt\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\n#import chart_studio.plotly as py\nimport seaborn as sns\nimport cufflinks as cf\nimport plotly.express as px\n%matplotlib inline\n\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected = True)\ncf.go_offline() ","e5fa158d":"df=pd.read_csv('\/kaggle\/input\/world-happiness-report-2021\/world-happiness-report-2021.csv')\ndf.head()","525897b6":"#keep only related columns\ndf_v = df.iloc[:,:12]\ndf_v.head()","7a66530e":"#Scores of different regions\npx.box(df_v, x= 'Regional indicator' , y='Ladder score', color= 'Regional indicator')","3dc175f8":"#Scores of different REgions in year 2021 shwing as a pie chart\npx.pie(df_v, values='Ladder score', names= 'Regional indicator' , title= 'Ladder score of Regions 2021', \n       width=800 , height=800 , color_discrete_sequence = px.colors.sequential.RdBu)\n","ef72022d":"# scores of different regions and Logged GDP per capita to get an understanding of their correlation\npx.scatter(df_v, x='Logged GDP per capita', y='Ladder score' ,  color='Regional indicator' )","84b54ef0":"df_v['Regional indicator'].unique()","6bc17c36":"#defining a color for each region\ndic_region={'Western Europe': 'purple', 'North America and ANZ' : 'red',\n       'Middle East and North Africa' : 'lightgreen', 'Latin America and Caribbean' : 'pink',\n       'Central and Eastern Europe' : 'orange', 'East Asia' : 'green', 'Southeast Asia' : 'yellow',\n       'Commonwealth of Independent States' : 'lightblue', 'Sub-Saharan Africa': 'moccasin',\n       'South Asia' :' darkslateblue'}\n\ndf_v['Region_color'] =df_v['Regional indicator'].map(dic_region)","6e5381eb":"fig =go.Figure()\nfig.add_trace(go.Scatter(x=df_v['Logged GDP per capita'], y=df_v['Ladder score'], \n                    text=df_v['Regional indicator'],\n                    mode='markers',\n                    marker=dict(\n                    color=df_v['Region_color'])))\n\nfig.update_layout(yaxis_title = \"Ladder score\", xaxis_title = 'Logged GDP per capita', template= 'plotly_dark', \n                  title='Logged GDP per capita vs. Ladder score per Region')\n","38f7ae5a":"#plot scatter plot of scores of happines and related features \n\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nfig = make_subplots(rows=3 , cols = 2 ,horizontal_spacing=0.2,  vertical_spacing=0.3)\n\n\nfig.add_trace(go.Scatter(x=df_v['Logged GDP per capita'], y=df_v['Ladder score'], \n                    text=df_v['Regional indicator'],\n                    mode='markers',\n                    marker=dict(\n                    color=df_v['Region_color'])), row=1 , col=1)\nfig.update_xaxes(title_text = 'Logged GDP per capita',row=1, col=1)\nfig.update_yaxes(title_text = 'Ladder Score',row=1, col=1)\n\nfig.add_trace(go.Scatter(x=df_v['Social support'], y=df_v['Ladder score'], \n                    text=df_v['Regional indicator'],\n                    mode='markers',\n                    marker=dict(\n                    color=df_v['Region_color'])), row=1 , col=2)\nfig.update_xaxes(title_text = 'Social support',row=1, col=2)\nfig.update_yaxes(title_text = 'Ladder Score',row=1, col=2)\n\n\nfig.add_trace(go.Scatter(x=df_v['Healthy life expectancy'], y=df_v['Ladder score'], \n                    text=df_v['Regional indicator'],\n                    mode='markers',\n                    marker=dict(\n                    color=df_v['Region_color'])), row=2 , col=1)\nfig.update_xaxes(title_text = 'Healthy life expectancy',row=2, col=1)\nfig.update_yaxes(title_text = 'Ladder Score',row=2, col=1)\n\n\nfig.add_trace(go.Scatter(x=df_v['Freedom to make life choices'], y=df_v['Ladder score'], \n                    text=df_v['Regional indicator'],\n                    mode='markers',\n                    marker=dict(\n                    color=df_v['Region_color'])), row=2 , col=2)\nfig.update_xaxes(title_text = 'Freedom to make life choices',row=2, col=2)\nfig.update_yaxes(title_text = 'Ladder Score',row=2, col=2)\n\n\nfig.add_trace(go.Scatter(x=df_v['Generosity'], y=df_v['Ladder score'], \n                    text=df_v['Regional indicator'],\n                    mode='markers',\n                    marker=dict(\n                    color=df_v['Region_color'])), row=3 , col=1)\n\nfig.update_xaxes(title_text = 'Generosity',row=3, col=1)\nfig.update_yaxes(title_text = 'Ladder Score',row=3, col=1)\n\n\n\nfig.add_trace(go.Scatter(x=df_v['Perceptions of corruption'], y=df_v['Ladder score'], \n                    text=df_v['Regional indicator'],\n                    mode='markers',\n                    marker=dict(\n                    color=df_v['Region_color'])), row=3 , col=2)\n\nfig.update_xaxes(title_text = 'Perceptions of corruption',row=3 , col=2)\nfig.update_yaxes(title_text = 'Ladder Score',row=3 , col=2)\n\n\nfig.update_layout(template= 'plotly_dark', \n                  title='Perceptions of corruption vs. Ladder score per Region', showlegend=False)\n\n\nfig.show()","c679a827":"# we can also use sns.PairGrid\nFeatures_Region=df_v[[ 'Regional indicator', 'Ladder score',\n                      'Logged GDP per capita', 'Social support', 'Healthy life expectancy',\n                      'Freedom to make life choices', 'Generosity','Perceptions of corruption']]\nFeatures_Region_p=sns.PairGrid(Features_Region, hue='Regional indicator')\n\nFeatures_Region_p.map_diag(plt.hist)\nFeatures_Region_p.map_offdiag(plt.scatter)","be290941":"mean_by_region= df_v.groupby(['Regional indicator'])['Ladder score'].mean().reset_index(name='Ladder score').sort_values(by= 'Ladder score', ascending= False)\nmean_by_region","b0947852":"px.bar(x=mean_by_region['Ladder score'] , y=mean_by_region['Regional indicator'] , color=mean_by_region['Ladder score'])","782aed4d":"#find worse and best countries\nq10 = df_v['Ladder score'].quantile(.10)\nq90 = df_v['Ladder score'].quantile(.90)\nmean = df_v['Ladder score'].mean()\n\nWorse_Countries = df_v[df_v['Ladder score'] < q10]\n\nBest_Countries = df_v[df_v['Ladder score'] > q90]\n\nBest_and_Worse_Countries =pd.concat([Best_Countries, Worse_Countries])\n","d002a8d1":"#show happines score in worst and best countries\npx.bar(Best_and_Worse_Countries, y='Ladder score', x= 'Country name' , title= 'Ladder score of Best Countries 2021', \n      color= 'Ladder score')","20c172c7":"#scatter plot of happines scores and GDP coloring with country names\npx.scatter(Best_and_Worse_Countries, x='Logged GDP per capita', y='Ladder score' ,  color='Country name' )","a634125a":"Best_and_Worse_Countries['Country name'].unique()","6b6412ab":"#define a color for each country\ndic_c={'Finland': 'purple', 'Denmark' : 'red',\n       'Switzerland' : 'lightgreen', 'Iceland' : 'pink',\n       'Netherlands' : 'orange',  'Norway' : 'green', 'Sweden' : 'yellow',\n       'Luxembourg' : 'lightblue', 'New Zealand': 'moccasin',\n       'Austria' :' lightsteelblue', 'Israel'  : 'olive', 'Germany' : 'lemonchiffon', \n       'Canada' : 'lime', 'Ireland' : 'hotpink', 'Madagascar' : 'royalblue', 'Togo' : 'saddlebrown', \n       'Zambia' : 'seashell', 'Sierra Leone' : 'mistyrose', 'India' : 'mediumspringgreen', 'Burundi' : 'salmon',\n       'Yemen' : 'mediumblue', 'Tanzania' : 'maroon', 'Haiti' : 'mediumslateblue', 'Malawi' : 'mediumpurple', \n       'Lesotho' : 'white', 'Botswana' : 'whitesmoke','Rwanda' : 'slateblue', 'Zimbabwe' : 'teal', 'Afghanistan' : 'snow'}\n\nBest_and_Worse_Countries['Country_color'] =Best_and_Worse_Countries['Country name'].map(dic_c)","4af7e8a2":"Best_and_Worse_Countries['Country_color']","df6f982e":"#scatter plot for happines scores and the features colored by countries\n\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nfig = make_subplots(rows=3 , cols = 2 ,horizontal_spacing=0.2,  vertical_spacing=0.3)\n\n\nfig.add_trace(go.Scatter(x=Best_and_Worse_Countries['Logged GDP per capita'], y=Best_and_Worse_Countries['Ladder score'], \n                    text=Best_and_Worse_Countries['Country name'],\n                    mode='markers',\n                    marker=dict(\n                    color=Best_and_Worse_Countries['Country_color'])), row=1 , col=1)\nfig.update_xaxes(title_text = 'Logged GDP per capita',row=1, col=1)\nfig.update_yaxes(title_text = 'Ladder Score',row=1, col=1)\n\n\n\n\nfig.add_trace(go.Scatter(x=Best_and_Worse_Countries['Social support'], y=Best_and_Worse_Countries['Ladder score'], \n                     text=Best_and_Worse_Countries['Country name'],\n                    mode='markers',\n                    marker=dict(\n                     color=Best_and_Worse_Countries['Country_color'])), row=1 , col=2)\nfig.update_xaxes(title_text = 'Social support',row=1, col=2)\nfig.update_yaxes(title_text = 'Ladder Score',row=1, col=2)\n\nfig.add_trace(go.Scatter(x=Best_and_Worse_Countries['Healthy life expectancy'], y=Best_and_Worse_Countries['Ladder score'], \n                     text=Best_and_Worse_Countries['Country name'],\n                    mode='markers',\n                    marker=dict(\n                    color=Best_and_Worse_Countries['Country_color'])), row=2 , col=1)\nfig.update_xaxes(title_text = 'Healthy life expectancy',row=2, col=1)\nfig.update_yaxes(title_text = 'Ladder Score',row=2, col=1)\n\n                  \nfig.add_trace(go.Scatter(x=Best_and_Worse_Countries['Freedom to make life choices'], y=Best_and_Worse_Countries['Ladder score'], \n                     text=Best_and_Worse_Countries['Country name'],\n                    mode='markers',\n                    marker=dict(\n                    color=Best_and_Worse_Countries['Country_color'])), row=2 , col=2)\n\nfig.update_xaxes(title_text = 'Freedom to make life choices',row=2, col=2)\nfig.update_yaxes(title_text = 'Ladder Score',row=2, col=2)\n\nfig.add_trace(go.Scatter(x=Best_and_Worse_Countries['Generosity'], y=Best_and_Worse_Countries['Ladder score'], \n                     text=Best_and_Worse_Countries['Country name'],\n                    mode='markers',\n                    marker=dict(\n                    color=Best_and_Worse_Countries['Country_color'])), row=3 , col=1)\nfig.update_xaxes(title_text = 'Generosity',row=3, col=1)\nfig.update_yaxes(title_text = 'Ladder Score',row=3, col=1)\n\n\nfig.add_trace(go.Scatter(x=Best_and_Worse_Countries['Perceptions of corruption'], y=Best_and_Worse_Countries['Ladder score'], \n                     text=Best_and_Worse_Countries['Country name'],\n                    mode='markers',\n                    marker=dict(\n                    color=Best_and_Worse_Countries['Country_color'])), row=3 , col=2)\n\nfig.update_xaxes(title_text = 'Perceptions of corruption',row=3, col=2)\nfig.update_yaxes(title_text = 'Ladder Score',row=3, col=2)\n\n\n\nfig.update_layout( template= 'plotly_dark', \n                  title='Ladder score in Best Countries and the features', showlegend=False)\n\n\nfig.show()","7777545f":"df_y=pd.read_csv('\/kaggle\/input\/world-happiness-report-2021\/world-happiness-report.csv')","b121ad45":"df_y.head(5)","aa0316d6":"#Top Countries over years\ndf_country=df_y.groupby(['Country name'])['Life Ladder'].mean().reset_index(name='mean life ladder').sort_values(by='mean life ladder', ascending= False)\ntop_countries = df_country.head(10)\ntop_countries","b74c07c1":"df2020= df_y.loc[ df_y['year'] == 2020]\ndf_country2020=df2020.groupby(['Country name'])['Life Ladder'].mean().reset_index(name='mean life ladder').sort_values(by='mean life ladder', ascending= False)\ntop_countries2020 = df_country2020.head(10)\ntop_countries2020","d74e8b4e":"df_Denmark = df_y.loc[df_y['Country name'] == 'Denmark']\ndf_Finland = df_y.loc[df_y['Country name'] == 'Finland']\ndf_Switzerland = df_y.loc[df_y['Country name'] == 'Switzerland']\ndf_Norway =df_y.loc[df_y['Country name'] == 'Norway']\ndf_Netherlands = df_y.loc[df_y['Country name'] == 'Netherlands']\ndf_Iceland = df_y.loc[df_y['Country name'] == 'Iceland']\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=df_Denmark.year , y=df_Denmark['Life Ladder'], mode='lines+markers' , name='Denmark'))\n\nfig.add_trace(go.Scatter(x=df_Finland.year , y=df_Finland['Life Ladder'], mode='lines+markers' , name='Finland'))\n\nfig.add_trace(go.Scatter(x=df_Switzerland.year , y=df_Switzerland['Life Ladder'], mode='lines+markers' , name='Switzerland' , \n                         line=dict(color = 'green', width =2 )))\n\nfig.add_trace(go.Scatter(x=df_Norway.year , y=df_Norway['Life Ladder'], mode='lines+markers' , name='Norway' , \n                         line=dict(color = 'yellow', width =2 )))\n\nfig.add_trace(go.Scatter(x=df_Netherlands.year , y=df_Netherlands['Life Ladder'], mode='lines+markers' , name='Netherlands' , \n                         line=dict(color = 'white', width =2 )))\n\nfig.add_trace(go.Scatter(x=df_Iceland.year , y=df_Iceland['Life Ladder'], mode='lines+markers' , name='Iceland' , \n                         line=dict(color = 'Orange', width =2 )))\n\nfig.update_layout(title='Life Latter Score for top 6 countries over Years', xaxis_title= 'Year', yaxis_title = 'Life Score' , template= 'plotly_dark')","14949bbd":"df2020= df_y.loc[ df_y['year'] == 2020]\ndf_country2020=df2020.groupby(['Country name'])['Life Ladder'].mean().reset_index(name='mean life ladder').sort_values(by='mean life ladder', ascending= True)\nworse_countries2020 = df_country2020.head(10)\nworse_countries2020","29492078":"\ndf_country=df_y.groupby(['Country name'])['Life Ladder'].mean().reset_index(name='mean life ladder').sort_values(by='mean life ladder', ascending= True)\nworse_countries = df_country.head(10)\nworse_countries","80e4805a":"df_SouthSudan = df_y.loc[df_y['Country name'] == 'South Sudan']\ndf_CAR = df_y.loc[df_y['Country name'] == 'Central African Republic']\ndf_Burundi = df_y.loc[df_y['Country name'] == 'Burundi']\ndf_Togo =df_y.loc[df_y['Country name'] == 'Togo']\ndf_Afghanistan = df_y.loc[df_y['Country name'] == 'Afghanistan']\ndf_Rwanda = df_y.loc[df_y['Country name'] == 'Rwanda']\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=df_SouthSudan.year , y=df_SouthSudan['Life Ladder'], mode='lines+markers' , name='South Sudan'))\n\nfig.add_trace(go.Scatter(x=df_CAR.year , y=df_CAR['Life Ladder'], mode='lines+markers' , name='Central African Republic'))\n\nfig.add_trace(go.Scatter(x=df_Burundi.year , y=df_Burundi['Life Ladder'], mode='lines+markers' , name='Burundi' , \n                         line=dict(color = 'green', width =2 )))\n\nfig.add_trace(go.Scatter(x=df_Togo.year , y=df_Togo['Life Ladder'], mode='lines+markers' , name='Togo' , \n                         line=dict(color = 'yellow', width =2 )))\n\nfig.add_trace(go.Scatter(x=df_Afghanistan.year , y=df_Afghanistan['Life Ladder'], mode='lines+markers' , name='Afghanistan' , \n                         line=dict(color = 'white', width =2 )))\n\nfig.add_trace(go.Scatter(x=df_Rwanda.year , y=df_Rwanda['Life Ladder'], mode='lines+markers' , name='dRwanda' , \n                         line=dict(color = 'Orange', width =2 )))\n\nfig.update_layout(title='Life Latter Score for worse 6 countries over years', xaxis_title= 'Year', yaxis_title = 'Life Score' , template= 'plotly_dark')\n","eaa43f0f":"df_p=pd.read_csv('\/kaggle\/input\/world-happiness-report-2021\/world-happiness-report.csv')\n\ndf_p.head()\n","33fff23d":"df_p.dtypes","adad1ba1":"fig = plt.figure(figsize=(20,10))\nsns.heatmap(df_p.corr(), annot = True, fmt = '.2f', cmap = 'Blues', )","30b5c22e":"df_p.isnull().sum()","006bf770":"len(df_p)","af7e0e1e":"df_p=df_p.dropna(axis=0)\ndf_p.isnull().sum()","7bb2e599":"from sklearn.preprocessing import LabelEncoder\nlb_make=LabelEncoder()\n\ndf_p['Country name']=lb_make.fit_transform(df_p['Country name'])\n\ndf_p['year']=lb_make.fit_transform(df_p['year'])\n","76f1e312":"fig = plt.figure(figsize=(20,10))\nsns.heatmap(df_p.corr(), annot = True, fmt = '.2f', cmap = 'magma')","8c2220ac":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV\n\nfrom sklearn.metrics import *\nfrom sklearn.linear_model import LinearRegression, RANSACRegressor, Lasso, Ridge, SGDRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import DecisionTreeRegressor","7a2a481b":"X= df_p.drop(columns=['Life Ladder'])\ny=df_p['Life Ladder']","639d3367":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 42)","b081cefb":"lr_pipeline = Pipeline([(\"scaler\", StandardScaler()), (\"linear_regression\", LinearRegression())])\nridge_pipeline = Pipeline([(\"scaler\", StandardScaler()), (\"ridge_regressor\", Ridge(random_state = 42))])\nlasso_pipeline = Pipeline([(\"scaler\", StandardScaler()), (\"lasso_regressor\", Lasso(random_state = 42))])\nrandom_forest_pipeline = Pipeline([(\"scaler\", StandardScaler()), (\"randomforest_regression\", RandomForestRegressor(random_state = 42))])\nxgboost_pipeline = Pipeline([(\"scaler\", StandardScaler()), (\"xgboost_regression\", XGBRegressor())])\nknn_pipeline = Pipeline([(\"scaler\", StandardScaler()), (\"knn_regression\", KNeighborsRegressor())])","2f570039":"pipelines = [lr_pipeline, ridge_pipeline, lasso_pipeline,\n            random_forest_pipeline, xgboost_pipeline, knn_pipeline]","1591ec34":"pipe_dict = {0: \"Linear Regression\", 1: \"Ridge\",\n            2: \"Lasso\", 3: \"RandomForest\", 4: \"XGBoost\",\n            5: \"Decision Tree\", 6: \"KNN\"}","5d0736eb":"scores_df = pd.DataFrame(columns = [\"Model\", \"CVScores\"])\nfor i, pipe in enumerate(pipelines):\n    score = cross_val_score(pipe, X, y, cv = 5)\n    print(pipe_dict[i], \": \", score.mean())","f001d9a7":"grid_params = [\n    {\"classifier\": [RandomForestRegressor()],\n    \"classifier__n_estimators\": [100,150,200,250,300],\n    \"classifier__criterion\" : [\"mse\", \"mae\"],\n    \"classifier__max_features\" : [\"auto\", \"sqrt\", \"log2\"]\n    \n    },\n    {\"classifier\": [XGBRegressor()],\n     \"classifier__n_estimators\": [100,150,200,250,300],\n     \n    },\n    {\"classifier\": [LinearRegression()],\n     \"classifier__fit_intercept\": [True, False],\n    \"classifier__normalize\": [True, False],\n    }\n]","66d17004":"pipeline_new = Pipeline([(\"scaler\", StandardScaler()), (\"classifier\", RandomForestRegressor())])\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV","dd6faf86":"random_search = RandomizedSearchCV(estimator = pipeline_new, param_distributions = grid_params, scoring = 'neg_mean_absolute_error', n_jobs= -1, cv = 8, verbose = 10, random_state = 42)\n","cd746e7a":"best_model = random_search.fit(X_train, y_train)","2643ecfc":"best_model.best_params_","98b59dec":"pipeline_RandomForestRegressor = Pipeline([('scaler', StandardScaler()), ('RandomForestRegressor', RandomForestRegressor(criterion = 'mse',max_features='sqrt', n_estimators=300))])","6c849eea":"model = pipeline_RandomForestRegressor.fit(X_train, y_train)","def7f412":"predict = model.predict(X_test)","a43fa788":"r2_score(y_test, predict, multioutput='uniform_average')","82ceca1d":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=y_test, y=predict, mode='markers' ,  name='predicted vs actual'))\nfig.add_trace(go.Scatter(x=y_test , y=y_test, mode='lines' , name='actual'))\n\n\nfig.update_layout(title='actual Score vs predicted Score 2021', xaxis_title= 'Actual Score', yaxis_title = 'Predicted Score' , template= 'plotly_dark')","31ce0496":"df_v.columns","e8187ad6":"dfp= pd.read_csv('\/kaggle\/input\/world-happiness-report-2021\/world-happiness-report.csv')","64be3152":"dfp.columns","51adc9e5":"positive=dfp.groupby(['Country name'])['Positive affect'].mean().reset_index(name='Positive affect').sort_values(by='Positive affect', ascending= True)\n\nNegative=dfp.groupby(['Country name'])['Negative affect'].mean().reset_index(name='Negative affect').sort_values(by='Negative affect', ascending= True)","9c7f79c7":"for i in range(len(positive)):\n    dict_positiv={positive.iloc[i,0] : positive.iloc[i,1] }","6c887882":"positive","ec4ddec2":"Negative","72703c37":"affect= positive.merge(Negative, left_on = 'Country name', right_on= 'Country name')\naffect.isnull().sum()","6d3f50d0":"affect=affect.dropna(axis=0)\naffect","89c25a2c":"#adding Column Year\n\ndf_p['year'].unique()\n\n\n#year 2021 can be directlt considered as LabelEncoder 16","769301c5":"df2021=df_v[['Country name', 'Ladder score',\n             'Logged GDP per capita', 'Social support', 'Healthy life expectancy','Freedom to make life choices', 'Generosity',\n       'Perceptions of corruption']]\ndf2021['year'] = 16\n\n","3292a493":"df2021= df2021.merge(affect , how = 'right' , left_on='Country name' , right_on = 'Country name' )\ndf2021\n","c2dd5927":"df2021.isnull().sum()","4e656d6c":"df2021= df2021.dropna(axis=0)","123ec5b3":"df2021.columns","27fc3254":"df2021['Country name']=lb_make.fit_transform(df2021['Country name'])\n\n\nX2021=df2021[['Country name', 'year', 'Logged GDP per capita', 'Social support',\n       'Healthy life expectancy', 'Freedom to make life choices',\n       'Generosity', 'Perceptions of corruption', 'Positive affect',\n       'Negative affect']]\n\ny2021=df2021['Ladder score']","5d23f552":"predict2021 = model.predict(X2021)","1a302a49":"r2_score(y2021, predict2021, multioutput='uniform_average')","e2c1535f":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=y2021, y=predict2021, mode='markers' ,  name='predicted vs actual'))\nfig.add_trace(go.Scatter(x=y2021 , y=y2021, mode='lines' , name='actual'))\n\n\nfig.update_layout(title='actual Score vs predicted Score 2021', xaxis_title= 'Actual Score', yaxis_title = 'Predicted Score' , template= 'plotly_dark')","277053eb":"**Forecasting\u00b6**","ae5106e0":"**Report for all years**","eed3006d":"Data Visualization based on Regional indicator","b169a2e9":"**Data Visualization based on Country name**","682c6321":"**Data Visualization**","8fb68ec9":"Feature Enginnering","c5b3a9ed":"Worse Countries over years","a04e8ca5":"Check NaN Values","99cf1ab0":"**Predict 2021**"}}