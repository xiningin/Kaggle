{"cell_type":{"d6da3a5e":"code","2ae24abc":"code","f26c61a7":"code","16156d61":"code","104a0766":"code","a891999b":"code","9abe5a56":"code","9839b284":"code","5db7a0df":"code","870abea0":"code","00238014":"code","edf30c9e":"code","d3fd7a16":"code","dd910209":"code","ca3c1423":"code","aef531f0":"code","3ccab8c5":"code","d2d8a547":"code","265af9e7":"code","903b2867":"code","9b300ca3":"code","dd3ddf86":"code","872c5316":"code","b623c7a4":"code","79e92ae1":"code","2f9767c9":"code","dec78d1a":"code","d41e0bda":"code","c6a9ace7":"code","5190b7f2":"code","64941411":"code","eb1a3ef2":"code","ac5ee713":"code","ffbdd008":"code","bebaf72a":"code","a18766f9":"code","3ed52d02":"code","f383f4d8":"code","424b72b3":"code","e51fb2c2":"code","4fdf4843":"code","c466ec39":"code","d0b9bba6":"code","da1e0d58":"code","963a9a3d":"code","b5214631":"code","3c480b64":"code","2cbfc48d":"markdown","964a234c":"markdown","d63237d1":"markdown","e6a57706":"markdown","50b2f74c":"markdown","0f64ae95":"markdown","826256e6":"markdown","abdfa7d6":"markdown","1eabb329":"markdown","b6653c0c":"markdown","262d3dc9":"markdown"},"source":{"d6da3a5e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pylab as plt\nfrom sklearn import preprocessing\nimport xgboost as xgb\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, confusion_matrix, recall_score\nfrom sklearn.metrics import roc_auc_score\nfrom imblearn.over_sampling import SMOTE\nfrom imblearn.under_sampling import NearMiss\nfrom imblearn.combine import SMOTEENN","2ae24abc":"train_transaction = pd.read_csv('..\/input\/ieee-fraud-detection\/train_transaction.csv',index_col='TransactionID')\ntrain_identity = pd.read_csv('..\/input\/ieee-fraud-detection\/train_identity.csv',index_col='TransactionID')\ntest_transaction = pd.read_csv('..\/input\/ieee-fraud-detection\/test_transaction.csv',index_col='TransactionID') \ntest_identity = pd.read_csv('..\/input\/ieee-fraud-detection\/test_identity.csv',index_col='TransactionID')\nsample_submission = pd.read_csv('..\/input\/ieee-fraud-detection\/sample_submission.csv')","f26c61a7":"train = pd.merge(train_transaction, train_identity, on='TransactionID', how='left')\ntest = pd.merge(test_transaction,test_identity,on='TransactionID', how='left')","16156d61":"del (test_identity,test_transaction,train_identity,train_transaction)","104a0766":"train.memory_usage(deep=True).sum()","a891999b":"train.isFraud.value_counts(normalize=True).plot(kind='bar')","9abe5a56":"train.describe(include='all')","9839b284":"train.columns","5db7a0df":"train.dtypes.value_counts()","870abea0":"features_object=train.select_dtypes(include=['object']).columns\nprint(features_object)","00238014":"pd.crosstab(index=train['isFraud'], columns=train['ProductCD'], normalize = True, margins=True, margins_name='Total')","edf30c9e":"sns.countplot(x=\"ProductCD\", hue = \"isFraud\", data=train,  palette=\"Set1\")","d3fd7a16":"pd.crosstab(index=train['isFraud'], columns=train['card4'], normalize = True, margins=True, margins_name=\"total\").round(3)*100","dd910209":"sns.countplot(x=\"card4\", hue = \"isFraud\", data=train,  palette=\"Set2\")","ca3c1423":"pd.crosstab(index=train['isFraud'], columns=train['card6'], normalize = True, margins=True, margins_name=\"total\").round(2)*100","aef531f0":"sns.countplot(x=\"card6\", hue = \"isFraud\", data=train,  palette=\"Set2\")","3ccab8c5":"\npd.crosstab([train.ProductCD, train.card6,train.card4],[train.isFraud], \n    rownames=['card4','ProductCD', 'card6'], \n    colnames=[ 'isFraud'], normalize=True).round(4)*100\n","d2d8a547":"f, ax = plt.subplots(figsize=(11, 9))\nsns.heatmap(pd.crosstab([train.ProductCD, train.card6],[train.card4,train.isFraud], \n    rownames=['ProductCD', 'card6'], \n    colnames=['card4', 'isFraud'], normalize=True).round(4)*100,cmap=\"YlGnBu\",linewidth=0.5 ,square=False,center=0, annot=True, cbar_kws={\"shrink\": .5})","265af9e7":"fig, ax = plt.subplots(1, 2, figsize=(20,20))\nsns.countplot(y=\"P_emaildomain\",hue=\"isFraud\", ax=ax[0], data=train)\nax[0].set_title('P_emaildomain')\nsns.countplot(y=\"R_emaildomain\",hue=\"isFraud\", ax=ax[1], data=train)\nax[1].set_title('R_emaildomain')","903b2867":"id_features = train[['id_12','id_15','id_16', 'id_23', 'id_27', 'id_28', 'id_29', 'id_30', 'id_31', 'id_33',\n       'id_34', 'id_35', 'id_36', 'id_37', 'id_38']]","9b300ca3":"id_features.describe()","dd3ddf86":"id_features.isnull().sum()*100\/len(id_features)","872c5316":"m_features = [c for c in train if c[0] == 'M']\ntrain[m_features].describe()","b623c7a4":"def bar_plot(col, data, hue=None):\n    f, ax = plt.subplots(figsize = (20, 5))\n    sns.countplot(x=col, hue=hue, data=data, alpha=0.5)\n    ","79e92ae1":"m_features= train.loc[:,'M1':'M9']   \nfor col in m_features:\n    bar_plot(col, train, hue='isFraud')\n        ","2f9767c9":"pd.crosstab(train.isFraud,train.DeviceType).plot(kind='bar')","dec78d1a":"train.DeviceInfo.value_counts()","d41e0bda":"float_dtypes = train.select_dtypes(include='bool')\nfeatures_float=train.select_dtypes(include=['float']).columns\nprint(features_float)","c6a9ace7":"D_features = train.loc[:,'D1':'D14']\nD_features.describe()","5190b7f2":"colormap = plt.cm.Spectral\nplt.figure(figsize=(14,12))\nplt.title('Pearson Correlation of Features', size=15)\nsns.heatmap(D_features.corr(),linewidths=0.1,vmax=1.0, \n           square=True, cmap=colormap, linecolor='white', annot=True)\n","64941411":"[c for c in train if c[0] == 'C']","eb1a3ef2":"C_features = train.loc[:,'C1':'C14']","ac5ee713":"colormap = plt.cm.seismic\nplt.figure(figsize=(14,12))\nplt.title('Pearson Correlation of Features', size=15)\nsns.heatmap(C_features.corr(),linewidths=0.1,vmax=1.0, \n           square=True, cmap=colormap, linecolor='white', annot=True)","ffbdd008":"id_ = train.loc[:,'id_01':'id_32']","bebaf72a":"colormap = plt.cm.RdYlBu\nplt.figure(figsize=(30,20))\nplt.title('Pearson Correlation of Features', size=15)\nsns.heatmap(id_.corr(),linewidths=0.1,vmax=1.0, \n           square=True, cmap=colormap, linecolor='white', annot=True)","a18766f9":"v_feature = [v for v in train if v[0] == 'V']\nprint(train[v_feature].shape)","3ed52d02":"train[v_feature].describe()","f383f4d8":"def missing_val(train):\n        mis_val = train.isnull().sum()\n        mis_val_per =train.isnull().sum()*100 \/ len(train)\n        missing_table = pd.concat([mis_val, mis_val_per], axis=1)\n        \n        mis_val_table = missing_table.rename(columns = {0 : 'Missing_val', 1 : '% of Missing_val'})\n        \n        mis_val_table = mis_val_table.sort_values('% of Missing_val', ascending=False).round(1)\n        \n        return mis_val_table\n    \nmissing_val(train).head(10)","424b72b3":"y_train = train['isFraud'].copy()\nX_train = train.drop('isFraud', axis=1)\nX_test = test.copy()","e51fb2c2":"for f in X_train.columns:\n    if X_train[f].dtype=='object' or X_test[f].dtype=='object': \n        lbl = preprocessing.LabelEncoder()\n        lbl.fit(list(X_train[f].values) + list(X_test[f].values))\n        X_train[f] = lbl.transform(list(X_train[f].values))\n        X_test[f] = lbl.transform(list(X_test[f].values))","4fdf4843":"X_train.fillna(-999, inplace = True)\nX_test.fillna(-999, inplace = True)","c466ec39":"from sklearn.model_selection import TimeSeriesSplit,KFold\nn_fold = 5\nfolds = KFold(n_splits=n_fold,shuffle=True)\n\nprint(folds)","d0b9bba6":"for fold_n, (train_index, valid_index) in enumerate(folds.split(X_train)):\n    xgbclf = xgb.XGBClassifier(\n        n_estimators=1000,\n        max_depth=9,\n        learning_rate=0.048,\n        subsample=0.85,\n        colsample_bytree=0.85,\n        missing=-999,\n        tree_method='gpu_hist',\n        reg_alpha=0.15,\n        reg_lamdba=0.85\n    )","da1e0d58":" X_train_, X_valid = X_train.iloc[train_index], X_train.iloc[valid_index]\n\n","963a9a3d":" y_train_, y_valid = y_train.iloc[train_index], y_train.iloc[valid_index]","b5214631":"xgbclf.fit(X_train_,y_train_)\n    ","3c480b64":"del X_train_,y_train_\n    pred=xgbclf.predict_proba(X_test)[:,1]\n    val=xgbclf.predict_proba(X_valid)[:,1]\n    del xgbclf, X_valid\n    print('ROC accuracy: {}'.format(roc_auc_score(y_valid, val)))\n    del val,y_valid\n    xgb_submission['isFraud'] = xgb_submission['isFraud']+pred\/n_fold\n    del pred\n    gc.collect()","2cbfc48d":"<font size=\"5\">Importing the dataset<\/font>","964a234c":"g = sns.catplot(x=\"ProductCD\", hue=\"card4\", col=\"isFraud\",\n            data=train, kind=\"count\",\n    height=4, aspect=.7)\n","d63237d1":"\n<font size=\"3\"> This notebook provides basic exploratory data analysis of IEEE \"transaction and identity data\".<\/font>\n","e6a57706":"<font size=\"5\">Importing libraries<\/font>","50b2f74c":"\n<font size=\"3\">It clearly shows this dataset is imblanced. So, balancing this data is absolutely crucial. Data is said to be imbalanced when instances of one class outnumber the other(s) by a large proportion.<\/font>\n","0f64ae95":"<font size=\"8\">Data Exploration<\/font>","826256e6":"<font size=\"5\" color=\"Red\"> This notebook is in progress.\n\nPlease upvote if you find it useful.<\/font>\n","abdfa7d6":"<font size=\"4\">Overview of numerical features <\/font>","1eabb329":"ProductCD has 5 types, among which type \"C\" and \"W\" has most fraud cases.","b6653c0c":"<font size=\"5\">Overview of Categorical variables.<\/font>","262d3dc9":"<font size=\"5\">Imbalanced dataset<\/font>"}}