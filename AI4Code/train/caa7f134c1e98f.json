{"cell_type":{"cb337764":"code","ab5dba20":"code","4bedd865":"code","06112c5b":"code","c277758a":"code","06393dab":"code","878ac14a":"code","ebca5163":"code","b2ba49e7":"code","8d60518d":"code","3024e792":"code","2a17d1a7":"code","658a91cb":"code","f1d739c9":"code","c2c701c5":"code","9763f7c8":"code","4c868e36":"code","1731ebb4":"code","911962ac":"code","33d103a6":"code","8b516c3e":"code","05305ed2":"code","bf2077b9":"code","2ef51741":"code","1e6af841":"code","eb8e2859":"code","e5cae70f":"code","828a51a3":"code","0d47007e":"code","e23877c0":"markdown","489a636b":"markdown","a2b71c35":"markdown","4a2e0e58":"markdown","aa11dada":"markdown","09072c76":"markdown","ce19ca9f":"markdown","3f1a677c":"markdown","3ae960de":"markdown","61c732dc":"markdown","78d53c58":"markdown","722304a1":"markdown","a12d687c":"markdown","389e50ff":"markdown"},"source":{"cb337764":"import numpy as np\nimport pandas as pd\nimport os\nimport glob\nimport lightgbm as lgbm\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ab5dba20":"train=pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/train.csv')\ntrain.head()\n#\u88e1\u9762\u53ea\u6709\u540d\u7a31 \u6642\u9593 target","4bedd865":"df0_book=pd.read_parquet('..\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/stock_id=0')\ndf0_book.head()","06112c5b":"df0_trade=pd.read_parquet('..\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/stock_id=0')\ndf0_trade.head()","c277758a":"def wap1(df):\n    wap=(df['bid_price1']*df['ask_size1']+df['ask_price1']*df['bid_size1'])\/(df['bid_size1']+df['ask_size1'])\n    return wap\ndef wap2(df):\n    wap=(df['bid_price2']*df['ask_size2']+df['ask_price2']*df['bid_size2'])\/(df['bid_size2']+df['ask_size2'])\n    return wap\ndef log_return(list_stock_prices):\n    return np.log(list_stock_prices).diff()\ndef realized_volatility(series):\n    return np.sqrt(np.sum(series**2))\ndef count_unique(series):\n    return len(np.unique(series))\n","06393dab":"#\u9019\u88e1\u6211\u5011\u4f86\u5b9a\u7fa9\u5982\u4f55\u8655\u7406book\u88e1\u7684\u6578\u64da\ndef book_prep(path):\n    df=pd.read_parquet(path)\n    df['wap']=wap1(df)\n    df['log_return']=df.groupby('time_id')['wap'].apply(log_return)\n    df['wap2']=wap2(df)\n    df['log_return2']=df.groupby('time_id')['wap2'].apply(log_return)\n    df['price_spread']=(df['ask_price1']-df['bid_price1'])\/(df['ask_price1']+df['bid_price1'])\n    df['price_spread2']=(df['ask_price2']-df['bid_price2'])\/(df['ask_price2']+df['bid_price2'])\n    df['bid_spread']=df['bid_price1']-df['bid_price2']\n    df['ask_spread']=df['ask_price1']-df['ask_price2']\n    df['total_volume']=df['ask_size1'] + df['ask_size2'] + df['bid_size1'] + df['bid_size2']\n    df['volume_imbalance']=abs((df['ask_size1'] + df['ask_size2']) - (df['bid_size1'] + df['bid_size2']))\n    \n    #\u5efa\u7acb\u4e00\u500b\u7528\u4f86\u805a\u5408\u7684\u5b57\u5178\n    create_feature_dict = {\n        'log_return':[realized_volatility],\n        'log_return2':[realized_volatility],\n        'wap':[np.mean],\n        'wap2':[np.mean],\n        'price_spread':[np.mean],\n        'price_spread2':[np.mean],\n        'bid_spread':[np.mean],\n        'ask_spread':[np.mean],\n        'volume_imbalance':[np.mean],\n        'total_volume':[np.mean],\n            }\n    #book\u88e1\u7684\u7279\u5fb5\u5efa\u7acb\u5b8c\u6210\uff0c\u518d\u4f86\u7528groupby\u6240\u6709\u79d2\u6578\n    df_feature=pd.DataFrame(df.groupby(['time_id']).agg(create_feature_dict)).reset_index()\n    df_feature.columns=['_'.join(col) for col in df_feature.columns]#\u9019\u88e1\u6703\u628atime_id\u8b8a\u6210time_id_\n    #\n    last_seconds=[150,300,450]\n    for second in last_seconds:\n        second=600-second\n        df_feature_sec=pd.DataFrame(df.query(f'seconds_in_bucket >={second}').groupby(['time_id']).agg(create_feature_dict)).reset_index()\n        df_feature_sec.columns = ['_'.join(col) for col in df_feature_sec.columns]\n        df_feature_sec=df_feature_sec.add_suffix('_'+str(second))\n        df_feature=pd.merge(df_feature,df_feature_sec,how='left',left_on='time_id_',right_on=f'time_id__{second}')\n        df_feature=df_feature.drop([f'time_id__{second}'],axis=1)\n        \n    #\u5efa\u7acbrow_id\n    stock_id=path.split('=')[1]\n    df_feature['row_id']=df_feature['time_id_'].apply(lambda x:f'{stock_id}-{x}')\n    df_feature=df_feature.drop(['time_id_'],axis=1)\n    return df_feature","878ac14a":"%%time\ndata_dir = '..\/input\/optiver-realized-volatility-prediction\/'\npath = data_dir + \"book_train.parquet\/stock_id=0\"\nbook_prep(path)\n#\u8b93\u6211\u5011\u4f86\u67e5\u770b\u57f7\u884cbook\u8655\u7406\u5f8c\u7684\u6a23\u5b50\uff0c\u4e26\u770b\u9700\u8981\u591a\u5c11\u6642\u9593","ebca5163":"#\u5148\u67e5\u770btrade\u88e1\u7684\u8cc7\u6599\nlook=pd.read_parquet('..\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/stock_id=0')\nlook","b2ba49e7":"#\u9019\u88e1\u6211\u5011\u5229\u7528trade\u88e1\u7684\u8cc7\u6599\u4f86\u5efa\u7acb\u7279\u5fb5\ndef trade_prep(path):\n    df = pd.read_parquet(path)\n    df['log_return'] = df.groupby('time_id')['price'].apply(log_return)\n    \n    \n    aggregate_dictionary = {\n        'log_return':[realized_volatility],\n        'seconds_in_bucket':[count_unique],\n        'size':[np.sum],\n        'order_count':[np.mean],\n    }\n    \n    df_feature = df.groupby('time_id').agg(aggregate_dictionary).reset_index()\n    \n    df_feature.columns = ['_'.join(col) for col in df_feature.columns]\n\n    \n    \n    last_seconds = [150,300,450]\n    \n    for second in last_seconds:\n        second = 600 - second\n    \n        df_feature_sec = df.query(f'seconds_in_bucket >= {second}').groupby('time_id').agg(aggregate_dictionary)\n        df_feature_sec = df_feature_sec.reset_index()\n        \n        df_feature_sec.columns = ['_'.join(col) for col in df_feature_sec.columns]\n        df_feature_sec = df_feature_sec.add_suffix('_' + str(second))\n        \n        df_feature = pd.merge(df_feature,df_feature_sec,how='left',left_on='time_id_',right_on=f'time_id__{second}')\n        df_feature = df_feature.drop([f'time_id__{second}'],axis=1)\n    \n    df_feature = df_feature.add_prefix('trade_')\n    stock_id = path.split('=')[1]\n    df_feature['row_id'] = df_feature['trade_time_id_'].apply(lambda x:f'{stock_id}-{x}')\n    df_feature = df_feature.drop(['trade_time_id_'],axis=1)\n    \n    return df_feature","8d60518d":"%%time\ndata_dir = '..\/input\/optiver-realized-volatility-prediction\/'\npath = data_dir + \"trade_train.parquet\/stock_id=0\"\ntrade_prep(path)","3024e792":"from joblib import Parallel, delayed\ndef preprocessor(list_stock_ids, is_train = True):\n    df = pd.DataFrame()\n    \n    def for_joblib(stock_id):\n        #\u5148\u8a2d\u5b9a\u662f\u5426\u70batrain\n        if is_train:\n            file_path_book = data_dir + \"book_train.parquet\/stock_id=\" + str(stock_id)\n            file_path_trade = data_dir + \"trade_train.parquet\/stock_id=\" + str(stock_id)\n        else:\n            file_path_book = data_dir + \"book_test.parquet\/stock_id=\" + str(stock_id)\n            file_path_trade = data_dir + \"trade_test.parquet\/stock_id=\" + str(stock_id)\n            \n        df_tmp = pd.merge(book_prep(file_path_book),trade_prep(file_path_trade),on='row_id',how='left')\n     \n        return pd.concat([df,df_tmp])\n    \n    df = Parallel(n_jobs=-1, verbose=1)(\n        delayed(for_joblib)(stock_id) for stock_id in list_stock_ids\n        )\n\n    df =  pd.concat(df,ignore_index = True)\n    return df","2a17d1a7":"#\u6e2c\u8a66\u4e00\u4e0b\uff0c\u628astock0\u548cstock1\u5408\u4f75\nlist_stock_ids = [0,1]\npreprocessor(list_stock_ids, is_train = True)","658a91cb":"train = pd.read_csv(data_dir + 'train.csv')\ntrain_ids = train.stock_id.unique()","f1d739c9":"%%time\ndf_train = preprocessor(list_stock_ids= train_ids, is_train = True)\n#\u9019\u88e1\u6211\u5011\u628a\u6574\u500b\u8a13\u7df4\u8cc7\u6599\u5408\u4f75\u8d77\u4f86","c2c701c5":"#\u628afeature\u548ctarget\u5408\u4f75\ntrain['row_id'] = train['stock_id'].astype(str) + '-' + train['time_id'].astype(str)\ntrain = train[['row_id','target']]\ndf_train = train.merge(df_train, on = ['row_id'], how = 'left')","9763f7c8":"test = pd.read_csv(data_dir + 'test.csv')\ntest_ids = test.stock_id.unique()","4c868e36":"%%time\ndf_test = preprocessor(list_stock_ids= test_ids, is_train = False)","1731ebb4":"df_test = test.merge(df_test, on = ['row_id'], how = 'left')","911962ac":"from sklearn.model_selection import KFold\ndf_train['stock_id']=df_train['row_id'].apply(lambda x:x.split('-')[0])\ndf_test['stock_id']=df_test['row_id'].apply(lambda x:x.split('-')[0])\n\nstock_id_target_mean=df_train.groupby('stock_id')['target'].mean()\ndf_test['stock_id_target_enc']=df_test['stock_id'].map(stock_id_target_mean)\n\ntmp=np.repeat(np.nan,df_train.shape[0])\nkf=KFold(n_splits=10,shuffle=True)\nfor idx_1,idx_2 in kf.split(df_train):\n    target_mean = df_train.iloc[idx_1].groupby('stock_id')['target'].mean()\n    tmp[idx_2]=df_train['stock_id'].iloc[idx_2].map(target_mean)\ndf_train['stock_id_target_enc'] = tmp","33d103a6":"#\u9019\u88e1\u6211\u5011\u628astock_id\u6539\u6210int\ndf_train['stock_id'] = df_train['stock_id'].astype(int)\ndf_test['stock_id'] = df_test['stock_id'].astype(int)","8b516c3e":"X=df_train.drop(['row_id','target'],axis=1)\ny=df_train['target']","05305ed2":"#\u5b9a\u7fa9RMSPE\ndef rmspe(y_true, y_pred):\n    return  (np.sqrt(np.mean(np.square((y_true - y_pred) \/ y_true))))\n\ndef feval_RMSPE(preds, lgbm_train):\n    labels = lgbm_train.get_label()\n    return 'RMSPE', round(rmspe(y_true = labels, y_pred = preds),5), False\n#\u5b9a\u7fa9\u6a21\u578b\u7528\u7684\u8d85\u53c3\u6578\nparams = {\n      \"objective\": \"rmse\", \n      \"metric\": \"rmse\", \n      \"boosting_type\": \"gbdt\",\n      'early_stopping_rounds': 30,\n      'learning_rate': 0.01,\n      'lambda_l1': 1,\n      'lambda_l2': 1,\n  }","bf2077b9":"#\u9019\u88e1\u6211\u5011\u8a2d\u5b9aCross Vaildation\u9700\u8981\u7528\u7684\u524d\u7f6e\u4f5c\u696d\nkf = KFold(n_splits=4,shuffle=True)\noof = pd.DataFrame()        \nmodels = []                  \nscores = 0.0          ","2ef51741":"#\u958b\u59cb\u8a13\u7df4\nfor fold, (trn_idx, val_idx) in enumerate(kf.split(X, y)):\n\n    print(\"Fold :\", fold+1)\n    \n    # \u5efa\u7acb\u8a13\u7df4\u548c\u9a57\u8b49\u8cc7\u6599\n    X_train, y_train = X.loc[trn_idx], y[trn_idx]\n    X_valid, y_valid = X.loc[val_idx], y[val_idx]\n    \n    #RMSPE \u6b0a\u91cd\n    #https:\/\/www.kaggle.com\/c\/optiver-realized-volatility-prediction\/discussion\/250324\n    #\u6839\u64da\u5927\u795e\uff0c\u6211\u5011\u5229\u7528RMSPE weight\n    weights = 1\/np.square(y_train)\n    lgbm_train = lgbm.Dataset(X_train,y_train,weight = weights)\n\n    weights = 1\/np.square(y_valid)\n    lgbm_valid = lgbm.Dataset(X_valid,y_valid,reference = lgbm_train,weight = weights)\n    \n    # \u69cb\u5efa\u6a21\u578b\n    model = lgbm.train(params=params,\n                      train_set=lgbm_train,\n                      valid_sets=[lgbm_train, lgbm_valid],\n                      num_boost_round=1000,         \n                      feval=feval_RMSPE,\n                      verbose_eval=200,\n                      categorical_feature = ['stock_id']                \n                     )\n    \n    # \u9810\u6e2cvalid\u88e1\u7684\u8cc7\u6599\n    y_pred = model.predict(X_valid, num_iteration=model.best_iteration)\n    #\u9019\u88e1\u6211\u5011\u986f\u793a\u51fa\u6bcf\u6b21\u8a13\u7df4\u5f8cRMSPE\u7684\u5206\u6578\n    RMSPE = round(rmspe(y_true = y_valid, y_pred = y_pred),4)\n    print(f'Performance of the\u3000prediction: , RMSPE: {RMSPE}')\n\n    #\u8a18\u9304\u5206\u6578\u8207\u6a21\u578b\n    scores += RMSPE \/ 4\n    models.append(model)\n    print(\"*\" * 100)\n    ","1e6af841":"#\u770b\u500b\u6210\u679c\u5427\nscores","eb8e2859":"#\u6e96\u5099\u6e2c\u8a66\u8cc7\u6599\ny_pred = df_test[['row_id']]\nX_test = df_test.drop(['time_id', 'row_id'], axis = 1)\nX_test","e5cae70f":"target = np.zeros(len(X_test))\n#\u4f7f\u7528\u5404\u500b\u6a21\u578b\u4f86\u9810\u6e2ctest\uff0c\u4e26\u4f7f\u7528\u6700\u597d\u7684\u6a21\u578b\nfor model in models:\n    pred = model.predict(X_test[X_valid.columns], num_iteration=model.best_iteration)\n    target += pred \/ len(models)","828a51a3":"y_pred = y_pred.assign(target = target)\ny_pred","0d47007e":"y_pred.to_csv('submission.csv',index = False)","e23877c0":"# Joblib\nJoblib \u662f\u4e00\u7d44\u5728 Python \u4e2d\u63d0\u4f9b\u8f15\u91cf\u7d1a\u6d41\u6c34\u7dda\u7684\u5de5\u5177\u3002\u7279\u5225\u662f\uff1a\n\n\u51fd\u6578\u7684\u900f\u660e\u78c1\u76e4\u7de9\u5b58\u548c\u5ef6\u9072\u91cd\u65b0\u8a55\u4f30\uff08\u8a18\u61b6\u6a21\u5f0f\uff09\n\u7c21\u55ae\u7684\u4e26\u884c\u8a08\u7b97\nJoblib \u7d93\u904e\u512a\u5316\uff0c\u7279\u5225\u662f\u5728\u5927\u6578\u64da\u4e0a\u5feb\u901f\u4e14\u7a69\u5065\uff0c\u4e26\u4e14\u5c0dnumpy\u6578\u7d44\u9032\u884c\u4e86\u7279\u5b9a\u512a\u5316\u3002\u5b83\u662f BSD \u8a31\u53ef\u7684\u3002\n* \u907f\u514d\u5169\u6b21\u8a08\u7b97\u76f8\u540c\u7684\u4e8b\u60c5\uff1a\u4ee3\u78bc\u7d93\u5e38\u4e00\u6b21\u53c8\u4e00\u6b21\u5730\u91cd\u65b0\u904b\u884c\uff0c\u4f8b\u5982\u5728\u5c0d\u8a08\u7b97\u91cf\u5927\u7684\u5de5\u4f5c\uff08\u5982\u5728\u79d1\u5b78\u958b\u767c\u4e2d\uff09\u9032\u884c\u539f\u578b\u8a2d\u8a08\u6642\uff0c\u4f46\u70ba\u7de9\u89e3\u6b64\u554f\u984c\u800c\u624b\u5de5\u88fd\u4f5c\u7684\u89e3\u6c7a\u65b9\u6848\u5bb9\u6613\u51fa\u932f\uff0c\u4e26\u4e14\u7d93\u5e38\u5c0e\u81f4\u4e0d\u53ef\u91cd\u8907\u7684\u7d50\u679c\u3002\n* \u900f\u660e\u5730\u6301\u4e45\u5316\u5230\u78c1\u76e4\uff1a\u6709\u6548\u5730\u6301\u4e45\u5316\u5305\u542b\u5927\u6578\u64da\u7684\u4efb\u610f\u5c0d\u50cf\u662f\u5f88\u56f0\u96e3\u7684\u3002\u4f7f\u7528 joblib \u7684\u7de9\u5b58\u6a5f\u5236\u907f\u514d\u4e86\u624b\u5beb\u6301\u4e45\u5316\uff0c\u4e26\u5c07\u78c1\u76e4\u4e0a\u7684\u6587\u4ef6\u96b1\u5f0f\u93c8\u63a5\u5230\u539f\u59cb Python \u5c0d\u8c61\u7684\u57f7\u884c\u4e0a\u4e0b\u6587\u3002\u56e0\u6b64\uff0cjoblib \u7684\u6301\u4e45\u6027\u6709\u5229\u65bc\u6062\u5fa9\u61c9\u7528\u7a0b\u5e8f\u72c0\u614b\u6216\u8a08\u7b97\u4f5c\u696d\uff0c\u4f8b\u5982\u5728\u5d29\u6f70\u5f8c\u3002","489a636b":"--------------------------------------------------------------------------------","a2b71c35":"* **\u5be6\u969b\u6ce2\u52d5\u7387Realized volatility**\n\n\u7576\u6211\u5011\u4ea4\u6613\u671f\u6b0a\u6642\uff0c\u6211\u5011\u6a21\u578b\u7684\u4e00\u500b\u6709\u50f9\u503c\u7684\u8f38\u5165\u662f**\u5c0d\u6578\u6536\u76ca\u7387\u7684\u6a19\u6e96\u5deestandard deviation of the stock log returns**.\u3002\u5728\u66f4\u9577\u6216\u66f4\u77ed\u7684\u6642\u9593\u9593\u9694\u5167\u8a08\u7b97\u7684\u5c0d\u6578\u56de\u5831\u7684\u6a19\u6e96\u5dee\u6703\u6709\u6240\u4e0d\u540c\uff0c\u56e0\u6b64\u5b83\u901a\u5e38\u88ab\u6a19\u6e96\u5316\u70ba 1 \u5e74\u671f\uff0c**\u5e74\u5316\u6a19\u6e96\u5dee\u7a31\u70ba\u6ce2\u52d5\u7387**\u3002\n\n\u5728\u672c\u6b21\u6bd4\u8cfd\u4e2d\uff0c\u60a8\u5c07\u7372\u5f97 10 \u5206\u9418\u7684\u8cec\u9762\u6578\u64da\uff0c\u6211\u5011\u8981\u6c42\u60a8\u9810\u6e2c\u63a5\u4e0b\u4f86 10 \u5206\u9418\u7684\u6ce2\u52d5\u6027\u3002\u6ce2\u52d5\u7387\u5c07\u6309\u5982\u4e0b\u65b9\u5f0f\u6e2c\u91cf\uff1a\n$\\sigma = \\sqrt{\\sum_{t}r_{t-1, t}^2}$","4a2e0e58":"# What do we have?","aa11dada":"* **\u5c0f\u77e5\u8b58**\n\n\u5982\u679c\u5169\u672c\u66f8\u7684\u8cb7\u5165\u50f9\u548c\u8ce3\u51fa\u50f9\u5206\u5225\u8655\u65bc\u76f8\u540c\u7684\u50f9\u683c\u6c34\u5e73\uff0c\u5247\u5831\u50f9\u8d8a\u591a\u7684\u66f8\u5c07\u7522\u751f\u8f03\u4f4e\u7684\u80a1\u7968\u4f30\u503c\uff0c\u56e0\u70ba\u8a02\u55ae\u4e2d\u6709\u66f4\u591a\u7684\u6f5b\u5728\u8ce3\u5bb6\uff0c\u800c\u66f4\u591a\u7684\u8ce3\u5bb6\u610f\u5473\u8457 \u5e02\u5834\u4e0a\u66f4\u591a\u7684\u4f9b\u61c9**\u5c0e\u81f4\u80a1\u7968\u4f30\u503c\u8f03\u4f4e\u7684\u4e8b\u5be6**\u3002\n\n\n\u5728\u5927\u591a\u6578\u60c5\u6cc1\u4e0b\uff0c\u5728\u9023\u7e8c\u4ea4\u6613\u6642\u9593\u5167\uff0c\u8a02\u55ae\u7c3f\u4e0d\u61c9\u51fa\u73fe\u8cb7\u55ae\u9ad8\u65bc\u8ce3\u55ae\u6216\u8ce3\u55ae\u7684\u60c5\u6cc1\u3002 \u63db\u53e5\u8a71\u8aaa\uff0c\u6700\u6709\u53ef\u80fd\u7684\u662f\uff0c\u8cb7\u5165\u50f9\u548c\u8ce3\u51fa\u50f9\u6c38\u9060\u4e0d\u61c9\u8a72\u4ea4\u53c9\u3002","09072c76":"*  Training_data","ce19ca9f":"# **Feature Engineering**","3f1a677c":"# **Book_data**\n* \u6642\u9593 \n* \u6700\u5177\/\u7b2c\u4e8c\u6700\u5177\u7af6\u722d\u529b\u7684\u8cfc\u8cb7\u6c34\u5e73\u7684\u6a19\u6e96\u5316\u50f9\u683c\n* \u6700\u5177\/\u7b2c\u4e8c\u6700\u5177\u7af6\u722d\u529b\u7684\u92b7\u552e\u6c34\u5e73\u7684\u6a19\u6e96\u5316\u50f9\u683c\n* \u6700\u5177\/\u7b2c\u4e8c\u6700\u5177\u7af6\u722d\u529b\u7684\u8cb7\u5165\u7d1a\u5225\u7684\u80a1\u7968\u6578\u91cf\u3002\n* \u6700\u5177\/\u7b2c\u4e8c\u6700\u5177\u7af6\u722d\u529b\u7684\u8ce3\u51fa\u6c34\u5e73\u4e0a\u7684\u80a1\u7968\u6578\u91cf\u3002\n\n","3ae960de":"*  Test_data","61c732dc":"* **\u8cb7\u8ce3\u5dee\u50f9bid\/ask spread**\n\n\u7531\u65bc\u4e0d\u540c\u80a1\u7968\u5728\u5e02\u5834\u4e0a\u7684\u4ea4\u6613\u6c34\u5e73\u4e0d\u540c\uff0c\u6211\u5011\u63a1\u7528\u6700\u4f73\u5831\u50f9\u548c\u6700\u4f73\u8cb7\u5165\u50f9\u7684\u6bd4\u7387\u4f86\u8a08\u7b97\u8cb7\u8ce3\u50f9\u5dee\u3002\n\u8cb7\u8ce3\u50f9\u5dee\u7684\u516c\u5f0f\u53ef\u4ee5\u5beb\u6210\u4ee5\u4e0b\u5f62\u5f0f\uff1a\n\n\ud835\udc35\ud835\udc56\ud835\udc51\ud835\udc34\ud835\udc60\ud835\udc58\ud835\udc46\ud835\udc5d\ud835\udc5f\ud835\udc52\ud835\udc4e\ud835\udc51=\ud835\udc35\ud835\udc52\ud835\udc60\ud835\udc61\ud835\udc42\ud835\udc53\ud835\udc53\ud835\udc52\ud835\udc5f\/\ud835\udc35\ud835\udc52\ud835\udc60\ud835\udc61\ud835\udc35\ud835\udc56\ud835\udc51\u22121 \n\n* **\u52a0\u6b0a\u5e73\u5747\u50f9\u683c(WAP)Weighted averaged price**\n\n\u8a02\u55ae\u7c3f\u4e5f\u662f\u80a1\u7968\u4f30\u503c\u7684\u4e3b\u8981\u4f86\u6e90\u4e4b\u4e00\u3002\n\u516c\u5e73\u7684\u5e33\u9762\u4f30\u503c\u5fc5\u9808\u8003\u616e\u5169\u500b\u56e0\u7d20\uff1a\u8a02\u55ae\u7684\u6c34\u5e73\u548c\u898f\u6a21the level and the size of orders\u3002\n\u5728\u672c\u6b21\u6bd4\u8cfd\u4e2d\uff0c\u6211\u5011\u4f7f\u7528\u52a0\u6b0a\u5e73\u5747\u50f9\u683c (WAP) \u4f86\u8a08\u7b97\u77ac\u6642\u80a1\u7968\u4f30\u503c\u4f75\u8a08\u7b97\u5df2\u5be6\u73fe\u7684\u6ce2\u52d5\u7387\u4f5c\u70ba\u6211\u5011\u7684**target**\u3002\nWAP\u7684\u516c\u5f0f\u53ef\u4ee5\u5beb\u6210\u5982\u4e0b\uff0c\u5b83\u8003\u616e\u4e86\u6700\u9ad8\u50f9\u683c\u548c\u6578\u91cf\u4fe1\u606f\uff1a\n\n$WAP = \\frac{BidPrice_{1}*AskSize_{1} + AskPrice_{1}*BidSize_{1}}{BidSize_{1} + AskSize_{1}}$\nWAP=\u8cfc\u8cb7\u50f9\u683c\uff0a\u8ca9\u8ce3\u898f\u6a21\uff0b\u8ca9\u8ce3\u50f9\u683c\uff0a\u8cfc\u8cb7\u898f\u6a21 \/ \u8cfc\u8cb7\u898f\u6a21\uff0b\u8ca9\u8ce3\u898f\u6a21","78d53c58":"# Ready To Train","722304a1":"# **Trade_data**\n* \u6642\u9593\n* \u4e00\u79d2\u9418\u5167\u767c\u751f\u7684\u5df2\u57f7\u884c\u4ea4\u6613\u7684\u5e73\u5747\u50f9\u683c\u3002\u50f9\u683c\u5df2\u6a19\u6e96\u5316\uff0c\u5e73\u5747\u503c\u5df2\u6309\u6bcf\u7b46\u4ea4\u6613\u4e2d\u4ea4\u6613\u7684\u80a1\u7968\u6578\u91cf\u52a0\u6b0a\u3002\n* \u4ea4\u6613\u7684\u80a1\u7968\u7e3d\u6578\u3002\n* \u4ea4\u6613\u8a02\u55ae\u7684\u6578\u91cf","a12d687c":"* **\uff32\uff2d\uff33\uff30\uff25**\n\n\u9019\u500b\u6bd4\u8cfd\u7684\u91cd\u9ede\uff01\n\n$\\sqrt{\\frac{1}{n}\\sum^{n}_{i=1}((y_i-\\hat{y_i})\/y_i)^2}$","389e50ff":"* **\u5c0d\u6578\u6536\u76ca\u7387Log returns**\n\n\u6211\u5011\u5982\u4f55\u6bd4\u8f03\u6628\u5929\u548c\u4eca\u5929\u7684\u80a1\u7968\u50f9\u683c\uff1f\n\u6211\u5011\u53ef\u4ee5\u901a\u904e\u5c07\u79fb\u52d5\u9664\u4ee5\u80a1\u7968\u7684\u8d77\u59cb\u50f9\u683c\u4f86\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c\uff0c\u6709\u6548\u5730\u8a08\u7b97\u50f9\u683c\u8b8a\u5316\u7684\u767e\u5206\u6bd4\uff0c\u4e5f\u7a31\u70ba\u80a1\u7968\u6536\u76castock return\u3002\n\n\nLog returns\u6709\u5e7e\u500b\u512a\u9ede\uff1a\n1. \u4ed6\u662f\u53ef\u4ee5\u96a8\u6642\u9593\u589e\u52a0\u7684\n2. \u5e38\u898f\u56de\u5831\uff08regular returns\uff09\u4e0d\u80fd\u4f4e\u65bc -100%\uff0c\u800cLog returns\u4e0d\u53d7\u9650\u5236\n\n\nLog returns\u5728\u9019\u908a\u6211\u5011\u5beb\u6210\uff1a\n$r_{t_1, t_2} = \\log \\left( \\frac{S_{t_2}}{S_{t_1}} \\right)$\n\n\ud835\udc46\ud835\udc61 = \ud835\udc46\u5728\u6642\u9593 \ud835\udc61 \u7684\u80a1\u7968\u50f9\u683c\n\u901a\u5e38\u6211\u5011\u5728\u770b\u901910\u5206\u9418\u7684\u5c0d\u6578\u6536\u76ca\u7387\uff0c\u6211\u5011\u5beb\u6210\uff1a$r_t = r_{t - 10 min, t}$"}}