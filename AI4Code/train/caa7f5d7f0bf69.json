{"cell_type":{"ad8ccf96":"code","995d6808":"code","ec0e02ec":"code","22390fc3":"code","7d878366":"code","421575d7":"code","7806e8fe":"code","07ece0b0":"code","6f4b81da":"code","da01e291":"code","465e96c2":"code","f888a3eb":"code","8d8ed626":"code","b0237952":"code","3ee1c145":"code","67f4ee74":"code","83c6c5f6":"code","80871bc3":"code","27c2189d":"code","497c0c13":"code","0fda5416":"code","ff5fa945":"code","9e420c00":"code","7cda13dc":"code","f18cef89":"code","c5e72703":"code","80c910dc":"code","51988331":"code","e4593b38":"code","583abd35":"code","cd2fc207":"code","8530ef91":"code","8b67d4f4":"code","ff0c9929":"code","f3b7b956":"markdown","728b479d":"markdown","266499e2":"markdown","f0cd2d0f":"markdown","abbd061a":"markdown","df6120a2":"markdown","ed9f06fe":"markdown","eda60883":"markdown","d53537d8":"markdown","c1d52ef9":"markdown","9ccfb6c8":"markdown","a092820a":"markdown","0f6496e2":"markdown","d08581e7":"markdown","1b5e3c8d":"markdown","e0a09b1a":"markdown","438c3b4b":"markdown","bb2392b0":"markdown","6056fe58":"markdown","7e95b17f":"markdown"},"source":{"ad8ccf96":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","995d6808":"state_df = pd.read_csv('..\/input\/covid19-in-india\/StatewiseTestingDetails.csv')\ncountry_df = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\nvaccine_df = pd.read_csv('..\/input\/covid19-in-india\/covid_vaccine_statewise.csv')","ec0e02ec":"state_df[state_df['State']=='Tamil Nadu'].head()","22390fc3":"country_df[((country_df['Date']=='2020-04-04')&(country_df['State\/UnionTerritory']=='Tamil Nadu'))]","7d878366":"print(\"Minimum date :\",country_df['Date'].min())\nprint(\"Maximum date :\",country_df['Date'].max())","421575d7":"#Copying the contry_df data to df for easy reference\ndf=country_df.copy()","7806e8fe":"df.isnull().sum()","07ece0b0":"#Check data types of the dataframe\ndf.info()","6f4b81da":"df.head()","da01e291":"#lets convert the Date feature to Date&time datatype\ndf['Date']=pd.to_datetime(df['Date'],format='%Y-%m-%d')\n\n#Time is not required as it doesnt make much difference\ndf.drop(['Time'],axis=1, inplace=True)\n\n#Renaming State\/UnionTerritory to States for easy reference\ndf.rename(columns={'State\/UnionTerritory':'States'}, inplace=True)","465e96c2":"df['Active_cases']=df['Confirmed']-(df['Cured']+df['Deaths'])","f888a3eb":"df[df['States']=='Tamil Nadu'].tail()","8d8ed626":"import matplotlib.pyplot as plt\nimport matplotlib.dates as mtd\nimport seaborn as sns\nfrom matplotlib.ticker import ScalarFormatter\ncolors=['#0C68C7','#3A6794','#00FAF3','#FA643C','#C71D12']\nsns.set(palette=colors, style='white')\n\nsns.palplot(colors)","b0237952":"top_10=df.groupby(by='States').max()[['Active_cases','Date']].sort_values(by=['Active_cases'],ascending=False).reset_index()\nwith plt.xkcd():\n    fig=plt.figure(figsize=(15,8))\n    plt.title(\"Top 10 highly impacted sates as on 8th May\", size=20)\n    ax=sns.barplot(data=top_10.iloc[:10],y='Active_cases',x='States', linewidth=2, edgecolor='black')\n    ax.set_xticklabels(labels=ax.get_xticklabels(),rotation=90)\n    for i in ax.patches:\n        ax.text(x=i.get_x(),y=i.get_height(),s=i.get_height())","3ee1c145":"fig=plt.figure(figsize=(15,8))\nwith plt.xkcd():\n    ax=sns.lineplot(data=df[df['States'].isin(['Kerala','Tamil Nadu','Delhi','Maharashtra'])],x='Date',y='Active_cases',hue='States')\n    ax.set_title(\"Active cases by States\", size=20)\n   \n    \n","67f4ee74":"with plt.xkcd():\n    fig, ax=plt.subplots(nrows=10, ncols=4, figsize=[15,20], sharex=True, sharey=True)\n    ax=ax.flatten()\n\n    for i,s in enumerate(df['States'].unique()):\n        data1=df[df['States']==s][['Date','Active_cases']]\n        sns.lineplot(data=data1, x='Date',y='Active_cases', ax=ax[i])\n        ax[i].set_title(s)","83c6c5f6":"with plt.xkcd():\n    fig=plt.figure(figsize=(15,8))\n    sns.boxplot(data=df[df['States'].isin(['Kerala','Tamil Nadu','Delhi','Maharashtra'])],x='Active_cases',y='States')\n    plt.title(\"Bar plot for sample states\" ,size=20)","80871bc3":"median_states=df[df['States'].isin(['Kerala','Tamil Nadu','Delhi','Maharashtra'])]\nmedian_states.groupby(by=['States']).median().style.bar(['Active_cases'])","27c2189d":"with plt.xkcd():\n    fig=plt.figure(figsize=(15,8))\n    sns.boxplot(data=df[df['States'].isin(['Kerala','Tamil Nadu','Delhi','Maharashtra'])],x='Cured',y='States')\n    plt.title(\"Bar plot for sample states\" ,size=20)","497c0c13":"median_states.groupby(by=['States']).median().style.bar(['Cured'])","0fda5416":"states=['Kerala', 'Tamil Nadu', 'Maharashtra']\ntn=df[df['States']=='Tamil Nadu']\nkl=df[df['States']=='Kerala']\nmh=df[df['States']=='Maharashtra']\n\nwith plt.xkcd():\n\n    fig, ax=plt.subplots(nrows=3, ncols=3, figsize=(15,10), squeeze=False, sharex=True, sharey=False, constrained_layout=True )\n    plt.suptitle(\"Comparison of Active, Cured & Deaths for 3 States\")\n    sns.lineplot(data=tn, x='Date',y='Active_cases', ax=ax[0,0], color=colors[1])\n    ax[0,0].set_title(\"Tamil Nadu\")\n    sns.lineplot(data=tn, x='Date',y='Cured', ax=ax[1,0], color=colors[1])\n    sns.lineplot(data=tn, x='Date',y='Deaths', ax=ax[2,0], color=colors[1])\n\n    sns.lineplot(data=kl, x='Date',y='Active_cases', ax=ax[0,1], color=colors[2])\n    ax[0,1].set_title(\"Kerala\")\n    sns.lineplot(data=kl, x='Date',y='Cured', ax=ax[1,1], color=colors[2])\n    sns.lineplot(data=kl, x='Date',y='Deaths', ax=ax[2,1], color=colors[2])\n\n    sns.lineplot(data=mh, x='Date',y='Active_cases', ax=ax[0,2], color=colors[3])\n    ax[0,2].set_title(\"Maharashtra\")\n    sns.lineplot(data=mh, x='Date',y='Cured', ax=ax[1,2], color=colors[3])\n    sns.lineplot(data=mh, x='Date',y='Deaths', ax=ax[2,2], color=colors[3])","ff5fa945":"states=['Kerala', 'Tamil Nadu', 'Maharashtra']\ntn=df[df['States']=='Tamil Nadu']\nkl=df[df['States']=='Kerala']\nmh=df[df['States']=='Maharashtra']\n\nwith plt.xkcd():\n\n    fig, ax=plt.subplots(nrows=3, ncols=3, figsize=(15,10), squeeze=False, sharex=False, sharey=False, constrained_layout=True )\n    plt.suptitle(\"Distribution of Active, Cured & Deaths for 3 States\")\n    sns.kdeplot(data=tn['Active_cases'],ax=ax[0,0],color=colors[1], fill=True)\n    ax[0,0].set_title(\"Tamil Nadu\")\n    sns.kdeplot(data=tn['Cured'],  ax=ax[1,0],color=colors[1],fill=True)\n    sns.kdeplot(data=tn['Deaths'], ax=ax[2,0], color=colors[1],fill=True)\n\n    sns.kdeplot(data=kl['Active_cases'], ax=ax[0,1], color=colors[2],fill=True)\n    ax[0,1].set_title(\"Kerala\")\n    sns.kdeplot(data=kl['Cured'], ax=ax[1,1], color=colors[2],fill=True)\n    sns.kdeplot(data=kl['Deaths'], ax=ax[2,1], color=colors[2],fill=True)\n\n    sns.kdeplot(data=mh['Active_cases'], ax=ax[0,2], color=colors[3],fill=True)\n    ax[0,2].set_title(\"Maharashtra\")\n    sns.kdeplot(data=mh['Cured'], ax=ax[1,2], color=colors[3],fill=True)\n    sns.kdeplot(data=mh['Deaths'], ax=ax[2,2], color=colors[3],fill=True)","9e420c00":"# for testing purpose we shall take Sample states as Kerala, Tamil Nadu & Maharastra\ntn=df[df['States']=='Tamil Nadu']['Cured']\nmh=df[df['States']=='Maharashtra']['Cured']\nkl=df[df['States']=='Kerala']['Cured']\n\nfrom scipy.stats import ttest_ind\nfrom statsmodels.stats.proportion import proportions_ztest\n","7cda13dc":"st,p_value=ttest_ind(tn,kl)\nif p_value <0.05:\n    print(\"Both states {} & {} have significant difference in Cure rate\".format('Tamil Nadu','Kerala'))\nelse:\n    print(\"Both states {} & {} have no significant difference in Cure rate\".format('Tamil Nadu','Kerala'))\n\nst,p_value=ttest_ind(tn,mh)\nif p_value <0.05:\n    print(\"Both states {} & {} have significant difference in Cure rate\".format('Tamil Nadu','Maharashtra'))\nelse:\n    print(\"Both states {} & {} have no significant difference in Cure rate\".format('Tamil Nadu','Maharashtra'))\n\nst,p_value=ttest_ind(kl,mh)\nif p_value <0.05:\n    print(\"Both states {} & {} have significant difference in Cure rate\".format('Kerala','Maharashtra'))\nelse:\n    print(\"Both states {} & {} have no significant difference in Cure rate\".format('Kerala','Maharashtra'))","f18cef89":"#lets take mean impacted vs mean cured\ntn_cured = df[df['States']=='Tamil Nadu']['Cured'].max()\nmh_cured=df[df['States']=='Maharashtra']['Cured'].max()\nkl_cured=df[df['States']=='Kerala']['Cured'].max()\n\ntn_active = df[df['States']=='Tamil Nadu']['Confirmed'].max()\nmh_active=df[df['States']=='Maharashtra']['Confirmed'].max()\nkl_active=df[df['States']=='Kerala']['Confirmed'].max()","c5e72703":"print([tn_cured, mh_cured] , [tn_active, mh_active])\nprint(f' Proportion of cured cases in Tamil Nadu, Maharastra = {round(tn_cured\/tn_active,2)}%, {round(mh_cured\/mh_active,2)}% respectively \\n')\n\nprint([tn_cured, kl_cured] , [tn_active, kl_active])\nprint(f' Proportion of cured cases in Tamil Nadu, Kerala = {round(tn_cured\/tn_active,2)}%, {round(kl_cured\/kl_active,2)}% respectively \\n')\n\nprint([mh_cured, kl_cured] , [mh_active, kl_active])\nprint(f' Proportion of cured cases in Tamil Nadu, Kerala = {round(mh_cured\/mh_active,2)}%, {round(kl_cured\/kl_active,2)}% respectively \\n')","80c910dc":"stat, p_value = proportions_ztest([tn_cured, mh_cured] , [tn_active, mh_active])\n\nif p_value <0.05:\n    print(\"Both states {} & {} have significant difference in Cure rate\".format('Tamil Nadu','Maharashtra'))\nelse:\n    print(\"Both states {} & {} have no significant difference in Cure rate\".format('Tamil Nadu','Maharashtra'))\n\nstat, p_value = proportions_ztest([tn_cured, kl_cured] , [tn_active, kl_active])\n\nif p_value <0.05:\n    print(\"Both states {} & {} have significant difference in Cure rate\".format('Tamil Nadu','Kerala'))\nelse:\n    print(\"Both states {} & {} have no significant difference in Cure rate\".format('Tamil Nadu','Kerala'))\n\nstat, p_value = proportions_ztest([kl_cured, mh_cured] , [kl_active, mh_active])\n\nif p_value <0.05:\n    print(\"Both states {} & {} have significant difference in Cure rate\".format('Kerala','Maharashtra'))\nelse:\n    print(\"Both states {} & {} have no significant difference in Cure rate\".format('Kerala','Maharashtra'))\n","51988331":"from scipy.stats import norm\nwith plt.xkcd():\n    fig=plt.figure(figsize=(15,8))\n    plt.title(\"Distrubuption of Cure rate from \")\n    ax=sns.kdeplot(data=median_states[median_states['States'].isin(['Tamil Nadu','Maharashtra','Kerala'])],x='Cured', hue='States', fill=True)\n    ax.axvline(median_states[median_states['States']=='Kerala']['Cured'].mean(), ls='--', c=colors[0])\n    ax.axvline(median_states[median_states['States']=='Tamil Nadu']['Cured'].mean(), ls='--', c=colors[1])\n    ax.axvline(median_states[median_states['States']=='Maharashtra']['Cured'].mean(), ls='--', c=colors[2])\n    ","e4593b38":"#lets take mean impacted vs mean cured\ntn_cured = df[df['States']=='Tamil Nadu']['Deaths'].max()\nmh_cured=df[df['States']=='Maharashtra']['Deaths'].max()\nkl_cured=df[df['States']=='Kerala']['Deaths'].max()\n\ntn_active = df[df['States']=='Tamil Nadu']['Confirmed'].max()\nmh_active=df[df['States']=='Maharashtra']['Confirmed'].max()\nkl_active=df[df['States']=='Kerala']['Confirmed'].max()\n\nprint([tn_cured, mh_cured] , [tn_active, mh_active])\nprint(f' Proportion of Death cases in Tamil Nadu, Maharastra = {round(tn_cured\/tn_active,2)}%, {round(mh_cured\/mh_active,2)}% respectively \\n')\n\nprint([tn_cured, kl_cured] , [tn_active, kl_active])\nprint(f' Proportion of Death cases in Tamil Nadu, Kerala = {round(tn_cured\/tn_active,2)}%, {round(kl_cured\/kl_active,2)}% respectively \\n')\n\nprint([mh_cured, kl_cured] , [mh_active, kl_active])\nprint(f' Proportion of Death cases in Tamil Nadu, Kerala = {round(mh_cured\/mh_active,2)}%, {round(kl_cured\/kl_active,2)}% respectively \\n')\n\n\nstat, p_value = proportions_ztest([tn_cured, mh_cured] , [tn_active, mh_active])\n\nif p_value <0.05:\n    print(\"Both states {} & {} have significant difference in Death rate\".format('Tamil Nadu','Maharashtra'))\nelse:\n    print(\"Both states {} & {} have no significant difference in Death rate\".format('Tamil Nadu','Maharashtra'))\n\nstat, p_value = proportions_ztest([tn_cured, kl_cured] , [tn_active, kl_active])\n\nif p_value <0.05:\n    print(\"Both states {} & {} have significant difference in Death rate\".format('Tamil Nadu','Kerala'))\nelse:\n    print(\"Both states {} & {} have no significant difference in Death rate\".format('Tamil Nadu','Kerala'))\n\nstat, p_value = proportions_ztest([kl_cured, mh_cured] , [kl_active, mh_active])\n\nif p_value <0.05:\n    print(\"Both states {} & {} have significant difference in Death rate\".format('Kerala','Maharashtra'))\nelse:\n    print(\"Both states {} & {} have no significant difference in Death rate\".format('Kerala','Maharashtra'))\n","583abd35":"from scipy.stats import norm\nwith plt.xkcd():\n    fig=plt.figure(figsize=(15,8))\n    ax=sns.kdeplot(data=median_states[median_states['States'].isin(['Tamil Nadu','Maharashtra','Kerala'])],x='Deaths', hue='States', fill=True)\n    ax.axvline(median_states[median_states['States']=='Kerala']['Deaths'].mean(), ls='--', c=colors[0])\n    ax.axvline(median_states[median_states['States']=='Tamil Nadu']['Deaths'].mean(), ls='--', c=colors[1])\n    ax.axvline(median_states[median_states['States']=='Maharashtra']['Deaths'].mean(), ls='--', c=colors[2])\n    ","cd2fc207":"with plt.xkcd():\n    fig=plt.figure(figsize=(7,7))\n    plt.pie(x=top_10[top_10['Date']=='2021-05-08 00:00:00']['Active_cases'], labels=top_10[top_10['Date']=='2021-05-08 00:00:00']['States'], autopct='%.2f',radius=1.5);\n    plt.suptitle(\"% of active cases in India by States as on 8th May 2021\",size=20)","8530ef91":"#Finding our Daily cases for the data\n\ntn_count=df[df['States']=='Tamil Nadu']\ndaily=[]\ndaily.append(0)\nfor i in range(1, len(tn_count)):\n    daily.append(tn_count['Confirmed'].iloc[i]-tn_count['Confirmed'].iloc[i-1])\ntn_count['Daily']=daily\n    \n    ","8b67d4f4":"from fbprophet import Prophet\nds=pd.DataFrame(columns=['ds','y'])\n\nds['ds']=tn_count['Date']\nds['y']=tn_count['Daily']\nmodel = Prophet(changepoint_range=1)\nmodel.fit(ds)\nfuture = model.make_future_dataframe(periods=20)\nf=model.predict(future)\nf['ds']=pd.to_datetime(f['ds'], format='%Y-%m-%d')","ff0c9929":"\ntoday=f[f['ds']=='2021-05-11 00:00:00']\nwith plt.xkcd():\n    fig=plt.figure(figsize=(15,8))\n    \n        \n    ax=sns.lineplot(data=f, x='ds',y='yhat', alpha=1, color='red')\n    ax=sns.lineplot(data=tn_count, x='Date',y='Daily')\n    ax.set_xlim(mtd.datestr2num('2021-01-01'))\n    \n    ax.annotate(text=str(np.round(f['yhat'].iloc[-1],0))+ \"\\n\"+ str(f['ds'].iloc[-1]), xy=(f['ds'].iloc[-1],f['yhat'].iloc[-1]))\n    ax.annotate(text=str(np.round(today['yhat'].iloc[-1],0))+ \"\\n\"+ str(today['ds'].iloc[-1]), xy=(today['ds'].iloc[-1],today['yhat'].iloc[-1]))\n    \n    ax.annotate(text=\"2021 Lock down in TamilNadu\", xy=(0.70,0.25), xycoords='figure fraction', xytext=(0.60, 0.15),arrowprops={'arrowstyle':'-|>','color':'black'})\n    ax.axvspan(xmin='2021-05-10 00:00:00', xmax='2021-05-24 00:00:00', alpha=0.2, facecolor='y')\n    \n    ax.legend(labels=['Predicted','Actual'], loc='upper left')\n    \n    \n    \n    \n\n","f3b7b956":"**We expect the Lockdown to bring down the increasing impact rate. Also, the effect of lockdown can been seen at the end of lockdown days**","728b479d":"## Proportion Test","266499e2":"we have records starting Jan 2020 to 8th May 2021.","f0cd2d0f":"## Cure rate Testing","abbd061a":"Date, Time, State\/UnitonTerritory ConfirmedIndianNational, ConfirmedForignNational are in Categorical value. ","df6120a2":"There is no null value to handel","ed9f06fe":"Statewise Testing Details and Covid_19 India.csv has similar data, only difference i could see is that the total positive count is placed in next dat count in Covid_19_India.csv.","eda60883":"***As on May 8th Data, Maharastra has highest number active cases and comes the Karnataka, Kerala, UP & Rajestan***","d53537d8":"### But, the difference is becuase of high active cases? Lets us do another test","c1d52ef9":"## Null Hyposthesis\nH0 - mean of states cure rate are significant\nH1 - mean of states cure rate are not significant\n\nSignificant rate: 0.05","9ccfb6c8":"# Read Data","a092820a":"# Lets take TamilNadu as a Sample state for Prediciton","0f6496e2":"# Covid-19 Analysis","d08581e7":"# Checking for Null value","1b5e3c8d":"# EDA & Future Engineering","e0a09b1a":"***Almost all states shares the same trend in Covid cases, as mentioned in the above chart, Maharastra has highes number cases since july 2020.","438c3b4b":"***Observation***\n***Observation:***\n1. Maharastra - has high range of cured value as well. \n2. Kerala - is in 3rd place for cured count\n3. Tamilnadu - is in 2nd place in the sample in terms of cure.  \nbut, we can't conclude the rate by count. we will do some testing","bb2392b0":"***Observation:***\n1. Maharastra - Most of the times Active cases stays between 50000, 190000 range and the range went upto 35000+. mdeian is around 83K cases\n2. Kerala - Active cases ranging from 0 to less than 100000. Median is around 40. median value is around 24K\n3. Tamilnadu - Avtive cases in Tamilnadu ranging less than 50,000. Median is around 12K\n\nis it because of high rate for cure\/deaths?. lets check the same","6056fe58":"# Statistical testing","7e95b17f":"***All 3 states Keral, Tamil Nadu & Maharashtra have significant difference in Cure rate & Death rated compared to over all impact***"}}