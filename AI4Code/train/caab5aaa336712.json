{"cell_type":{"03a4e574":"code","7e976e04":"code","c2b6c666":"code","006ab83e":"code","813fcfdd":"code","8bc49cb0":"code","8d3945d4":"code","5b33e7cd":"code","fbe5d1b5":"code","f7d5d6be":"code","649761b3":"code","a9607ac5":"code","b7ab6be5":"code","e03a3c49":"code","2620a0c5":"code","3431b1b9":"code","ba11694b":"code","546c4e30":"code","82936c71":"code","6f7159a1":"code","19666d46":"code","097e92b4":"code","54eaf157":"code","34f3fafe":"code","efe15f3c":"code","d3411206":"code","2bcf7a35":"code","22afb425":"code","da0a3f70":"code","e8713ea5":"code","30baa88e":"code","e217b145":"code","a8dad8da":"code","b04cd310":"code","a3c0cc18":"code","19d177c5":"code","a672384b":"code","7a60a242":"code","3e3217bb":"code","bc98ce68":"code","b8a051b0":"code","0a3e81a8":"code","48ec6286":"code","8d11bf67":"code","b6fa8604":"code","4c8787bf":"code","9e4b80ff":"code","ff18bb6b":"code","04b8d163":"code","eb0e1a3e":"code","f5c78933":"markdown","6852f835":"markdown","daa90baa":"markdown","20925b08":"markdown","b47f5e61":"markdown","16c31f2f":"markdown","0c599c8a":"markdown","2f25a15f":"markdown","0fe24450":"markdown","49a90351":"markdown","c397f398":"markdown","b71ffde1":"markdown","6adb95e4":"markdown","0bd4227b":"markdown","7140f0e0":"markdown","350b0652":"markdown","a5fe251c":"markdown","55ea42ce":"markdown","196cd9a3":"markdown","ee95201f":"markdown","dddc02e4":"markdown","4cd88ac4":"markdown","79c5394d":"markdown","b24513a2":"markdown","b315a8ef":"markdown","b7e11ef0":"markdown","6536462e":"markdown","e90d8688":"markdown","1fd9fe4a":"markdown"},"source":{"03a4e574":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy.sparse import csr_matrix \n\nfrom sklearn.cluster import KMeans\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn import svm\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import mean_squared_error\n\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor\nfrom itertools import product\nimport tensorflow as tf\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7e976e04":"ds_items = pd.read_csv(\"\/kaggle\/input\/competitive-data-science-predict-future-sales\/items.csv\")\nds_sales_train = pd.read_csv(\"\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv\")\nds_submit = pd.read_csv(\"\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv\")","c2b6c666":"ds_items.columns, ds_sales_train.columns, ds_submit.columns","006ab83e":"ds_train = ds_sales_train[ds_sales_train[\"item_cnt_day\"] < 1500]\nds_train = ds_train[ds_train[\"item_price\"] < 75000]","813fcfdd":"ds_train = ds_train[['date_block_num', 'shop_id', 'item_id','item_cnt_day']]\nds_train = ds_train.groupby(['date_block_num', 'shop_id', 'item_id'], as_index = False).sum()\nds_train.rename(columns={\"item_cnt_day\": 'item_cnt_month'}, inplace = True)","8bc49cb0":"ds_train","8d3945d4":"ds_train = ds_train[ds_train['shop_id'].isin(ds_submit['shop_id'].unique())]\nds_train = ds_train[ds_train['item_id'].isin(ds_submit['item_id'].unique())]","5b33e7cd":"%%time\nds_combinations = []\ncols  = [\"date_block_num\", \"shop_id\", \"item_id\"]\nds_combinations.append(np.array(list(product(ds_train[\"date_block_num\"].unique(),ds_train[\"shop_id\"].unique(),ds_train[\"item_id\"].unique()))))\nds_combinations = pd.DataFrame(np.vstack(ds_combinations), columns = cols)","fbe5d1b5":"ds_train = pd.merge(ds_combinations,ds_train, how='left', on=cols)","f7d5d6be":"ds_train.fillna(0, inplace=True)\nds_train","649761b3":"ds_train = ds_train.join(ds_items.set_index('item_id'), on=\"item_id\").drop([\"item_name\"], axis=1)\nds_submit = ds_submit.join(ds_items.set_index('item_id'), on=\"item_id\").drop([\"item_name\"], axis=1)","a9607ac5":"ds_submit.set_index(\"ID\", inplace= True)\nds_submit['date_block_num'] = 34","b7ab6be5":"ds_train","e03a3c49":"ds_submit","2620a0c5":"#Months = {0:\"January\", 1:\"February\", 2:\"March\", 3:\"April\", 4:\"May\", 5:\"June\", 6:\"July\", 7:\"August\", 8:\"September\", 9:\"October\", 10:\"November\", 11:\"December\"}\n#one_hot = pd.get_dummies(ds_train['month'], sparse=True)\n#ds_train = ds_train.drop('month',axis = 1)\n#ds_train = ds_train.join(one_hot)\n#ds_train.rename(columns=Months, inplace=True)","3431b1b9":"#one_hot = pd.get_dummies(ds_submit['month'], sparse=True)\n#ds_submit = ds_submit.drop('month',axis = 1)\n#ds_submit = ds_submit.join(one_hot)\n#ds_submit.rename(columns=Months, inplace=True)","ba11694b":"#one_hot = pd.get_dummies(ds_train['shop_id'], prefix='shop_', sparse=True)#\n#ds_train = ds_train.drop('shop_id',axis = 1)\n#ds_train = ds_train.join(one_hot)","546c4e30":"#one_hot = pd.get_dummies(ds_submit['shop_id'], prefix='shop_', sparse=True)\n#ds_submit = ds_submit.drop('shop_id',axis = 1)\n#ds_submit = ds_submit.join(one_hot)","82936c71":"#one_hot = pd.get_dummies(ds_train['item_category_id'], prefix='item_category_', sparse=True)\n#ds_train = ds_train.drop('item_category_id',axis = 1)\n#ds_train = ds_train.join(one_hot)","6f7159a1":"#one_hot = pd.get_dummies(ds_submit['item_category_id'], prefix='item_category_', sparse=True)\n#ds_submit = ds_submit.drop('item_category_id',axis = 1)\n#ds_submit = ds_submit.join(one_hot)","19666d46":"#one_hot = pd.get_dummies(ds_train['item_id'], prefix='item_id_', sparse=True)#\n#ds_train = ds_train.drop('item_id',axis = 1)\n#ds_train = ds_train.join(one_hot)","097e92b4":"#one_hot = pd.get_dummies(ds_submit['item_id'], prefix='item_id_', sparse=True)##\n#ds_submit = ds_submit.drop('item_id',axis=1)\n#ds_submit = ds_submit.join(one_hot)","54eaf157":"ds_train[\"month\"] = (ds_train[\"date_block_num\"] % 12).astype('category')\nds_submit[\"month\"] = (ds_submit[\"date_block_num\"] % 12).astype('category')","34f3fafe":"ds_train[\"year\"] = (ds_train[\"date_block_num\"] \/\/ 12).astype('category')\nds_submit[\"year\"] = (ds_submit[\"date_block_num\"] \/\/ 12).astype('category')","efe15f3c":"tmp = ds_train[['date_block_num','shop_id','item_id','item_cnt_month']]\nshifted = tmp.copy()\ntmp.columns = ['date_block_num','shop_id','item_id', 'item_cnt_month'+'_lag_'+str(1)]\ntmp['date_block_num'] += 1\nds_train = pd.merge(ds_train, tmp, on=['date_block_num','shop_id','item_id'], how='left')\nds_train['item_cnt_month'+'_lag_'+str(1)] = ds_train['item_cnt_month'+'_lag_'+str(1)].astype('float16')\nds_train.fillna(0, inplace=True)","d3411206":"tmp = ds_train[['date_block_num','shop_id','item_id','item_cnt_month']]\ntmp.columns = ['date_block_num','shop_id','item_id', 'item_cnt_month'+'_lag_'+str(1)]\ntmp['date_block_num'] += 1\nds_submit = pd.merge(ds_submit, tmp, on=['date_block_num','shop_id','item_id'], how='left')\nds_submit['item_cnt_month'+'_lag_'+str(1)] = ds_submit['item_cnt_month'+'_lag_'+str(1)].astype('float16')\nds_submit = ds_submit.replace(np.nan, 0)","2bcf7a35":"def count_holidays(date_block_num):\n    m = 1 + date_block_num % 12\n    if m == 1:\n        return 1\n    elif m == 2:\n        return 1\n    elif m == 3:\n        return 1\n    elif m == 5:\n        return 2\n    elif m == 6:\n        return 1\n    elif m == 11:\n        return 1\n    elif m == 12:\n        return 2\n    else:\n        return 0\n    \ndef count_weekdays(date_block_num):\n    try:\n        y = 2013 + date_block_num \/\/ 12\n        m = 1 + date_block_num % 12\n        if m < 9:\n            return np.busday_count(f'{y}-0{m}', f'{y}-0{m+1}')\n        elif m ==9:\n            return np.busday_count(f'{y}-0{m}', f'{y}-10')\n        elif m != 12:\n             return np.busday_count(f'{y}-{m}', f'{y}-{m+1}')\n        else:\n            return np.busday_count(f'{y}-{m}', f'{y+1}-01')\n    except ValueError:\n        print(m,y)","22afb425":"%%time\nds_train[\"holidays_in_month\"] = ds_train[\"date_block_num\"].apply(lambda x: count_holidays(x))\nds_train[\"weekdays_in_month\"] = ds_train[\"date_block_num\"].apply(lambda x: count_weekdays(x))\n\nds_submit[\"holidays_in_month\"] = ds_submit[\"date_block_num\"].apply(lambda x: count_holidays(x))\nds_submit[\"weekdays_in_month\"] = ds_submit[\"date_block_num\"].apply(lambda x: count_weekdays(x))","da0a3f70":"group = ds_train.groupby(['item_id'])['date_block_num'].min().reset_index()\ngroup.rename(columns={\"date_block_num\": \"item_first_interaction\"}, inplace=True)\nds_train = pd.merge(ds_train, group, on=['item_id'], how='left')\nds_train[\"item_first_interaction\"] = ds_train[\"date_block_num\"] - ds_train[\"item_first_interaction\"]\n\ngroup = ds_submit.groupby(['item_id'])['date_block_num'].min().reset_index()\ngroup.rename(columns={\"date_block_num\": \"item_first_interaction\"}, inplace=True)\nds_submit = pd.merge(ds_submit, group, on=['item_id'], how='left')\nds_submit[\"item_first_interaction\"] = ds_submit[\"date_block_num\"] - ds_submit[\"item_first_interaction\"]","e8713ea5":"# \u042f\u043a\u0443\u0442\u0441\u043a \u041e\u0440\u0434\u0436\u043e\u043d\u0438\u043a\u0438\u0434\u0437\u0435, 56\n\nds_train[ds_train['shop_id'] == 0]['shop_id'] = 57\nds_submit[ds_submit['shop_id'] == 0]['shop_id'] = 57\n\n# \u042f\u043a\u0443\u0442\u0441\u043a \u0422\u0426 \"\u0426\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0439\"\n\nds_train[ds_train['shop_id'] == 1]['shop_id'] = 58\nds_submit[ds_submit['shop_id'] == 1]['shop_id'] = 58\n\n# \u0416\u0443\u043a\u043e\u0432\u0441\u043a\u0438\u0439 \u0443\u043b. \u0427\u043a\u0430\u043b\u043e\u0432\u0430 39\u043c\u00b2\n\nds_train[ds_train['shop_id'] == 10]['shop_id'] = 11\nds_submit[ds_submit['shop_id'] == 10]['shop_id'] = 11","30baa88e":"for col in ds_train.columns:\n    if col not in ds_submit.columns:\n        if col != \"item_cnt_month\":\n            null_column = np.zeros(ds_submit.shape[0], dtype=int)\n            ds_submit[col] = pd.arrays.SparseArray(null_column)","e217b145":"for col in ds_submit.columns:\n    if col not in ds_train.columns:\n        null_column = np.zeros(ds_train.shape[0], dtype=int)\n        ds_train[col] = pd.arrays.SparseArray(null_column) ","a8dad8da":"ds_train.shape[1]==ds_submit.shape[1]\nds_train","b04cd310":"ds_train['date_block_num'] = ds_train['date_block_num']\nds_train['year'] = ds_train['year']\nds_train['item_cnt_month_lag_1'] = ds_train['item_cnt_month_lag_1']","a3c0cc18":"for col in ds_submit.columns:\n    ds_submit[col] = ds_submit[col].astype(\"Sparse[int]\")\n\nfor col in ds_train.columns:\n    ds_train[col] = ds_train[col].astype(\"Sparse[int]\")","19d177c5":"ds_test = ds_train[ds_train['date_block_num'] == 33]\ny_test = ds_test.pop('item_cnt_month').to_numpy()\nX_test  = ds_test.sparse.to_coo().tocsr()\nX_test","a672384b":"ds_trn = ds_train[ds_train['date_block_num'] != 33].copy()\ny_train = ds_trn.pop('item_cnt_month').to_numpy()\nX_train = ds_trn.sparse.to_coo().tocsr()\nX_train","7a60a242":"ds_submit['date_block_num'] = ds_submit['date_block_num'].astype('Sparse[int]')\nds_submit['year'] = ds_test['year'].astype('Sparse[int]')\nds_submit['item_cnt_month_lag_1'] = ds_submit['item_cnt_month_lag_1'].astype('Sparse[int]')\n\nX_submit = ds_submit.sparse.to_coo().tocsr()","3e3217bb":"def evaluation(model, X_test, y_test):\n    y_pred = model.predict(X_test)\n    print(y_pred)\n    print(mean_squared_error(y_test, y_pred))","bc98ce68":"X_train","b8a051b0":"%%time \nmse = 100\nfor learning_rate in [0.05,0.1, 0.5,1]:\n    for max_depth in [5, 10, 25,50]:\n            print(learning_rate,max_depth)\n            model = XGBRegressor(\n                learning_rate = learning_rate,\n                max_depth=max_depth,\n                booster='gbtree',\n                n_estimators=1000,\n                min_child_weight=0.5, \n                subsample=0.8,\n                sampling_method=\"uniform\",\n                colsample_bynode=1,\n                colsample_bytree=0.8, \n                eta=0.1)\n\n            model.fit(\n                X_train, \n                y_train, \n                eval_metric=\"rmse\", \n                eval_set=[(X_train, y_train), (X_test, y_test)], \n                verbose=True, \n                early_stopping_rounds = 20)\n\n            y_pred = model.predict(X_test)\n            if mse>mean_squared_error(y_test, y_pred):\n                lr = learning_rate\n                mse = mean_squared_error(y_test, y_pred)\n                mx_d = max_depth\n                best_iter = model.get_booster().best_iteration\n            print('XGBoost MSE =', mean_squared_error(y_test, y_pred), \"\\n\")","0a3e81a8":"print(f\"Best model had parameters : learning_rate = {lr} and max_depth={mx_d} | MSE = {mse}\")","48ec6286":"ds_train","8d11bf67":"y_train = ds_train.pop('item_cnt_month').to_numpy()\nX_train = ds_train.sparse.to_coo().tocsr()\nX_train","b6fa8604":"%%time\nmodel = XGBRegressor(\n    learning_rate=lr,\n    max_depth=mx_d,\n    booster='gbtree',\n    n_estimators=best_iter,\n    min_child_weight=0.5, \n    subsample=0.8,\n    sampling_method=\"uniform\",\n    colsample_bynode=1,\n    colsample_bytree=0.8, \n    eta=0.1)\n\nmodel.fit(X_train,y_train,\n    verbose=True)","4c8787bf":"feature_importance = pd.DataFrame(model.feature_importances_, index=ds_train.columns)\nfeature_importance[feature_importance[0] > 0.005].plot.bar(figsize=(15,6))\nplt.show()","9e4b80ff":"ds_train.columns","ff18bb6b":"ds_submit.columns","04b8d163":"y_submit = model.predict(X_submit)\nds_submit = pd.read_csv(\"\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv\")\nds_submit['item_cnt_month'] = np.clip(y_submit,0,20) \nds_submit.drop([\"shop_id\",\"item_id\"], inplace=True, axis=1)","eb0e1a3e":"ds_submit.to_csv('\/kaggle\/working\/submission.csv', index=False)","f5c78933":"## 2.4. Feature Engineering","6852f835":"### 2.2.1. Months","daa90baa":"## 1.2. Creating the datasets","20925b08":"### 2.4.4. Handle duplicates","b47f5e61":"Looking quickly through the csv, we see that only 3 will be usefull.","16c31f2f":"### 1.2.1. Handling outliers","0c599c8a":"### 2.4.3. Adding holiday\/week days counts and the first interaction of products","2f25a15f":"We first decided to use one hot encoding on our categorical data but the high number of distinct categories creates a high dimensional matrix which creates a way too difficult problem to solve for models.\nWe will keep our former work and make it as comments.","0fe24450":"# 2. Preprocessing","49a90351":"## 3.3. Recreate the full dataset and get prediction","c397f398":"### 2.4.1. Making sense of months","b71ffde1":"### 1.2.3. Handling columns (join)","6adb95e4":"Now we must complete the test set with the columns from the train set.","0bd4227b":"This is ou first on a competition as Team. The goal of this notebook is to find a correlation between particular attributes of products and the number of sales.","7140f0e0":"### 3.2.1. XGBRegressor","350b0652":"### 2.2.3. Item IDs","a5fe251c":"## 3.1. Creating sets","55ea42ce":"# I. Introduction","196cd9a3":"## 3.2. Models","ee95201f":"### 2.2.2. Shop_id","dddc02e4":"For our test set, it makes sense to guess the 33rd month using the previous ones as we want to predict the 34th one for the submission.","4cd88ac4":"## 2.1. One hot encoding","79c5394d":"### 1.2.2. Data Augmentation","b24513a2":"### 2.2.3. Item categories","b315a8ef":"## 2.5. Making the test set and data set coherent","b7e11ef0":"For each **id** and **shop_id** and **date_block_num** combinations we complete the dataset by putting it to 0 if it isn't in the dataset.","6536462e":"## 1.1. Imports","e90d8688":"### 2.4.2. Adding a column lag on months","1fd9fe4a":"# 3. Modeling"}}