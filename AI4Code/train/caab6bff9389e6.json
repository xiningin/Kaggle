{"cell_type":{"32b302e9":"code","147c7930":"code","e360c58b":"code","51c193ee":"code","36027990":"code","898d1f8b":"code","93dc37af":"code","712043b0":"code","782979f2":"code","7f2e44e8":"code","413ccf93":"code","e8476fba":"code","f7b33872":"code","d2a8670a":"code","d74d8f7e":"code","9bd1907f":"code","47a9af94":"code","dd410d23":"code","2bdec187":"code","1a901ada":"markdown","c75366b5":"markdown"},"source":{"32b302e9":"# Import support labaraies\nimport regex\nimport emoji\nimport numpy as np\nimport pandas as pd\nimport plotly.express as px\nfrom collections import Counter\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator","147c7930":"class WhatsAppChatAnalysis:\n    \"\"\"\n    To dip dive into analysis of WhatApp Chat\n    \"\"\"\n    def __init__(self):\n        # Regex pattern for WhatsApp version 2.21.11.15\n        self.pattern = '^\\[([0-9]+)(\\\/)([0-9]+)(\\\/)([0-9]+), ([0-9]+):([0-9]+):([0-9]+)[ ]?(AM|PM|am|pm)?\\]'\n        \n    def parse_date_time(self,string):\n        \"\"\"Parse the Date and Time with regex match\"\"\"\n        if regex.match(self.pattern, string):\n            return True\n        return False\n    \n    def find_author(self,string):\n        \"\"\"Find the Author in String\"\"\"\n        if len(string.split(\":\",1)) == 2:\n            return True\n        else:\n            return False\n        \n    def parse_message(self,line):\n        \"\"\" Parse the raw message into chunks\"\"\"\n        splitline, split_message = line.split(']')\n        splitdate, splittime = splitline.split(\",\")\n        date = splitdate.strip('[')\n        time = splittime.strip()\n        message = split_message.strip()\n        if self.find_author(message):\n            splitmessage = message.split(\":\",1)\n            author = splitmessage[0]\n            message = \" \".join(splitmessage[1:])\n        else:\n            author= None\n        return date, time, author, message\n    \n    def process_chat(self,exported_chat):\n        \"\"\" Process the export file from whatsapp\"\"\"\n        data = []\n        with open(exported_chat, encoding=\"utf-8\") as fp:\n            fp.readline()\n            messageBuffer = []\n            date, time, author = None, None, None\n            while True:\n                line = fp.readline()\n                if not line:\n                    break\n                line = line.strip()\n                if self.parse_date_time(line):\n                    if len(messageBuffer) > 0:\n                        data.append([date, time, author, ''.join(messageBuffer)])\n                    messageBuffer.clear()\n                    date, time, author,message = self.parse_message(line)\n                    messageBuffer.append(message)\n                else:\n                    messageBuffer.append(line)\n        return data\n    \n    def extract_emojis(self, s):\n        \"\"\"Extract emojis from message string\"\"\"\n        return ''.join(c for c in s if c in emoji.UNICODE_EMOJI['en'])\n    \n    def generate_word_cloud(self,text):\n        \"\"\"Generate Word Cloud\"\"\"\n        print (\"There are {} words in all the messages.\".format(len(text)))\n        stopwords = set(STOPWORDS)\n        # Generate a word cloud image\n        wordcloud = WordCloud(stopwords=stopwords, background_color=\"white\").generate(text)\n        # Display the generated image:\n        # the matplotlib way:\n        plt.figure( figsize=(10,5))\n        plt.imshow(wordcloud, interpolation='bilinear')\n        plt.axis(\"off\")\n        plt.show()\n        \n    def emoji_pie_chat(self, emoji_df):\n        \"\"\"Generate Pie chat for Emojis Dataframe\"\"\"\n        fig = px.pie(emoji_df, values='count', names='emoji')\n        fig.update_traces(textposition='inside', textinfo='percent+label')\n        fig.show()\n        \n    def generate_report(self, dataframe, media_messages_df, author):\n        print(f'**** Stats of {author} *****')\n        # shape will print number of rows which indirectly means the number of messages\n        print('Messages Sent \\t\\t:', dataframe.shape[0])\n        # Word_Count contains of total words in one message. Sum of all words\/ Total Messages will yield words per message\n        words_per_message = (np.sum(dataframe['Word_Count']))\/dataframe.shape[0]\n        print('Average Words\/message\\t:', words_per_message)\n        # media conists of media messages\n        media = media_messages_df[media_messages_df['Author'] == author].shape[0]\n        print('Media Messages Sent\\t:', media)\n        # emojis conists of total emojis\n        emojis = sum(dataframe['emoji'].str.len())\n        print('Total Emojis Sent \\t:', emojis)\n        # links consist of total links\n        links = sum(dataframe[\"urlcount\"])   \n        print('Total Links Share \\t:', links)\n        print(\"*\"*45)\n        ","e360c58b":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","51c193ee":"# Initiate Class Instance\nchat = WhatsAppChatAnalysis()\n# Call Process chat with input as exported file\ndata = chat.process_chat('\/kaggle\/input\/whatsapp-chat-dataset\/whatsapp_chat.txt')","36027990":"df = pd.DataFrame(data, columns=[\"Date\", 'Time', 'Author', 'Message'])","898d1f8b":"df.tail(5)","93dc37af":"df.describe()","712043b0":"# Convert Date into panda datetime format\ndf['Date'] = pd.to_datetime(df['Date'])","782979f2":"df['emoji'] = df[\"Message\"].apply(chat.extract_emojis)\nemojis = sum(df['emoji'].str.len())\nprint(\"Total Emoji's Used : \", emojis)","7f2e44e8":"#print(df.tail(20))\nprint(df.info())\nprint(df.Author.unique())","413ccf93":"total_messages = df.shape[0]\nprint(total_messages)","e8476fba":"# Handle image omitted messages\nlen(df[df['Message'].str.contains(\"image omitted\")])","f7b33872":"URLPATTERN = r'(https?:\/\/\\S+)'\ndf['urlcount'] = df.Message.apply(lambda x: regex.findall(URLPATTERN, x)).str.len()\nlinks = np.sum(df.urlcount)","d2a8670a":"df['urlcount'].groupby(by=df['Author']).sum()","d74d8f7e":"author_list = [author for author in df[\"Author\"].unique() if author is not None ]","9bd1907f":"media_messages_df = df[df['Message'].str.contains(\"image omitted\")]\nmessages_df = df.drop(media_messages_df.index)\nmessages_df['Letter_Count'] = messages_df['Message'].apply(lambda s : len(s))\nmessages_df['Word_Count'] = messages_df['Message'].apply(lambda s : len(s.split(' ')))\nmessages_df[\"MessageCount\"]=1\n\nauthor_list = [author for author in df[\"Author\"].unique() if author is not None ]\n\nfor author in author_list:\n    # will contain messages of only one particular user\n    user_df = messages_df[messages_df[\"Author\"] == author]\n    chat.generate_report(user_df, media_messages_df, author)","47a9af94":"author_list = [\"person1\",\"person5\"]","dd410d23":"# Generate Word Cloud\nfor i in range(len(author_list)):\n    dummy_df = messages_df[messages_df['Author'] == author_list[i]]\n    text = \" \".join(review for review in dummy_df.Message)\n    print('Words by',author_list[i])\n    chat.generate_word_cloud(text)","2bdec187":"total_emojis_list = list(set([a for b in messages_df.emoji for a in b]))\ntotal_emojis = len(total_emojis_list)\n\ntotal_emojis_list = list([a for b in messages_df.emoji for a in b])\nemoji_dict = dict(Counter(total_emojis_list))\nemoji_dict = sorted(emoji_dict.items(), key=lambda x: x[1], reverse=True)\n#for i in emoji_dict:\n#  print(i)\n\nemoji_df = pd.DataFrame(emoji_dict, columns=['emoji', 'count'])\nimport plotly.express as px\nfig = px.pie(emoji_df, values='count', names='emoji', width=800, height=700)\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","1a901ada":"Explorartory Data Analysis","c75366b5":"# WhatsApp Chat analysis on Dummy dataset\n###                      *** You can test test the code with real whatsapp chat\n##### #######################\n#### #### All Hail the Privacy ######\n##### #######################"}}