{"cell_type":{"b9e97052":"code","ea38c784":"code","ba2fe79a":"code","5d028365":"code","4296340d":"code","ed0a60e7":"code","ae030e6e":"code","fe1d63fe":"code","bcc6f8b6":"code","9f24ef68":"code","33749c21":"code","8f333734":"code","64be120f":"code","5f4f9a19":"code","63186803":"code","c453495f":"code","8e3609cf":"code","0f8d9c2c":"code","593f233b":"code","c1963d5a":"code","a55e6e1b":"code","2ca6a5ec":"code","ed8fe10f":"code","5bf68300":"code","c8c0033b":"code","5a5bc162":"code","e0b10710":"code","b8d3cf4e":"code","0bb1d99e":"code","d4c699b2":"code","f8c1082f":"code","0db178e6":"code","d25619af":"code","ca9da81f":"code","9d75988f":"code","97a4c51c":"code","8809d282":"code","71bdbb2b":"code","f77b6911":"code","15626842":"code","8381b8b7":"code","cc4d972a":"code","c775e999":"code","f1e475bb":"code","a1a4491c":"code","100896a8":"code","32c32de7":"code","853317e9":"code","1ce88c61":"markdown","0c655502":"markdown","75a8f5ca":"markdown","d2cfb540":"markdown","100c9ad7":"markdown","e640e8b2":"markdown","48ed92f2":"markdown","3d70b0ac":"markdown","d7f9115b":"markdown","e5985469":"markdown","2beae396":"markdown","38044b98":"markdown","cbafbad9":"markdown","bf8730ea":"markdown","495d35ac":"markdown","6cd4e3a3":"markdown","972d8800":"markdown","f234c97a":"markdown","4b5b8721":"markdown","0b8a5954":"markdown","6ad7c85b":"markdown","2af0b11d":"markdown","0370dc72":"markdown","73308deb":"markdown","d520ef6d":"markdown","d4b00184":"markdown","a84b6a3c":"markdown","2ce5061d":"markdown","e7b96450":"markdown","eebf8603":"markdown","9ea969b6":"markdown","071ce80b":"markdown","86790d0e":"markdown","b94bf617":"markdown","8b3a40c8":"markdown","1a308dda":"markdown","4bd9dbd7":"markdown"},"source":{"b9e97052":"import os\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as snb\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n\n%matplotlib inline\nsnb.set({'figure.figsize':(16,8), 'axes.titlesize':30, 'axes.labelsize':20})\n#mpl.rcParams('axes.titilesize')=20","ea38c784":"TRAINFILEPATH = os.path.join('..', 'input', 'train.csv')","ba2fe79a":"data = pd.read_csv(TRAINFILEPATH, index_col=0)","5d028365":"data.head()","4296340d":"data.shape","ed0a60e7":"data.info()","ae030e6e":"data.isna().sum()","fe1d63fe":"ax = data['passenger_count'].value_counts(normalize=True).plot.bar();\nax.set_ylabel(\"Percentage\")\nax.set_xlabel(\"Passenger count\")\nax.set_title(\"Repartition of passenger count\");","bcc6f8b6":"data[data['passenger_count'] == 0].shape","9f24ef68":"ax = data['vendor_id'].value_counts(normalize=True).plot.bar()\nax.set_xlabel(\"Vendor ID\")\nax.set_ylabel(\"Frequency\")\nax.set_title(\"Frequency of vendor ID\");","33749c21":"ax = data['store_and_fwd_flag'].value_counts(normalize=True).plot.bar()\nax.set_xlabel(\"store_and_fwd_flag\")\nax.set_ylabel(\"Frequency\")\nax.set_title(\"Frequency of store_and_fwd_flag\");","8f333734":"plt.scatter(data['vendor_id'], data['trip_duration'])\nplt.xlabel(\"Vendor ID\");\nplt.ylabel(\"Trip duration\")\nplt.title(\"Scatter plot of vendor ID & trip duration\");","64be120f":"# changing the date format of pickup_datetime and dropoff_datetime from objectto datetime64\ndata['pickup_datetime'] = pd.to_datetime(data['pickup_datetime'])\ndata['dropoff_datetime'] = pd.to_datetime(data['dropoff_datetime'])","5f4f9a19":"ax = data['pickup_datetime'].dt.year.value_counts(normalize=True, ascending=True,).plot.bar()\nax.set_xlabel(\"year\");\nax.set_ylabel(\"Frequency\")\nax.set_title(\"Pickup frequency by years \");","63186803":"ax = data['pickup_datetime'].dt.month.value_counts(normalize=True, ascending=True,).plot.bar()\nax.set_xlabel(\"month\");\nax.set_ylabel(\"Frequency\")\nax.set_title(\"Pickup frequency by months \");","c453495f":"ax = data[\"trip_duration\"].plot.hist()\nax.set_xlabel(\"Trip duration\")\nax.set_ylabel(\"Frequency\")\nax.set_title(\"Frequency of trip duration\");","8e3609cf":"ax = data.loc[data['trip_duration'] < 5000, 'trip_duration'].hist(bins=20)\nax.set_xlabel(\"Trip duration\")\nax.set_ylabel(\"Frequency\")\nax.set_title(\"Frequency of trip duration - a zoom in\");","0f8d9c2c":"ax = np.log(data[\"trip_duration\"]).hist(bins=50)\nax.set_xlabel(\"Log of trip duration\")\nax.set_ylabel(\"Frequency\")\nax.set_title(\"Frequency of trip durations log\");","593f233b":"snb.boxplot(data[\"trip_duration\"]);","c1963d5a":"# We keep only the trips with a duration less than = 6 hours (21600 s) in in our dataset\ndata = data[data[\"trip_duration\"]<21600] ","a55e6e1b":"data.shape","2ca6a5ec":"print (\"{} trips have been removed. It means {:0.2f}% of the total trips in the dataset.\".format(1458644-1456583, (1458644-1456583)*100\/1458644))","ed8fe10f":"# create a copy of our dataset in order to have a backup\ntrain = data ","5bf68300":"# adding the new columns to the train dataframe\ntrain['month_pickup']=data['pickup_datetime'].dt.month\ntrain['day_pickup']=data['pickup_datetime'].dt.dayofweek\ntrain['hour_pickup']=data['pickup_datetime'].dt.hour\ntrain['minute_pickup']=data['pickup_datetime'].dt.minute\ntrain['second_pickup']=data['pickup_datetime'].dt.second\n# deleting the column pickup_datetime from the train dataframe\ntrain = train.drop(columns=['pickup_datetime'])","c8c0033b":"# This piece of code is inspired from: http:\/\/blog.tkbe.org\/archive\/python-calculating-the-distance-between-two-locations\/\n# It calculate the \"crow flies\" distance between two locations \nimport math\n \ndef cosrad(n):\n    \"Return the cosine of ``n`` degrees in radians.\"\n    return math.cos(math.radians(n))\n\ndef distance(row):\n    \"\"\"Calculate the distance between two points on earth.\n    \"\"\"\n    lat1 = row['pickup_latitude']\n    long1 = row['pickup_longitude']\n    lat2 = row['dropoff_latitude']\n    long2 = row['dropoff_longitude']\n    earth_radius = 6371  # km\n    dLat = math.radians(lat2 - lat1)\n    dLong = math.radians(long2 - long1)\n    a = (math.sin(dLat \/ 2) ** 2 +\n         cosrad(lat1) * cosrad(lat2) * math.sin(dLong \/ 2) ** 2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    d = earth_radius * c\n    return d","5a5bc162":"# adding the trip distance column to the train dataframe\ntrain['trip_distance']=data.apply(distance, axis=1)","e0b10710":"train['trip_duration_log']=data['trip_duration'].apply(np.log)","b8d3cf4e":"train.head()","0bb1d99e":"features = ['trip_distance', 'day_pickup', 'hour_pickup', 'minute_pickup', \"pickup_longitude\", \"dropoff_longitude\", \"pickup_latitude\", \"dropoff_latitude\"]\ntarget = 'trip_duration_log'","d4c699b2":"X = train[features]\ny = train[target]\nX.shape, y.shape","f8c1082f":"from sklearn.metrics import make_scorer\nfrom sklearn.model_selection import cross_val_score","0db178e6":"# Find in the comment of Enrique P\u00e9rez Herrero in: https:\/\/www.kaggle.com\/marknagelberg\/rmsle-function\ndef rmsle_func(ypred, ytest) :\n    assert len(ytest) == len(ypred)\n    return np.sqrt(np.mean((np.log1p(ypred) - np.log1p(ytest))**2))","d25619af":"rmsle = make_scorer(rmsle_func) # Make RMSLE as a scorer","ca9da81f":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import LinearRegression","9d75988f":"rfr = RandomForestRegressor(n_estimators=15)\n#rfr1 =RandomForestRegressor (n_estimators=30, min_samples_leaf=10, min_samples_split=15, max_depth=90, bootstrap=True)\nreg = LinearRegression()\nsgdr = SGDRegressor()","97a4c51c":"scores_rfr = cross_val_score(rfr, X, y, cv=5, scoring=rmsle)","8809d282":"print(\"RMSLE: %0.2f (+\/- %0.4f)\" % (scores_rfr.mean(), scores_rfr.std() * 2))","71bdbb2b":"scores_reg = cross_val_score(reg, X, y, cv=5, scoring=rmsle)\nprint(\"RMSLE: %0.2f (+\/- %0.4f)\" % (scores_reg.mean(), scores_reg.std() * 2))","f77b6911":"scores_sgdr= cross_val_score(sgdr, X, y, cv=5, scoring=rmsle)","15626842":"print(\"RMSLE: %0.2f (+\/- %0.4f)\" % (scores_sgdr.mean(), scores_sgdr.std() * 2))","8381b8b7":"rfr.fit(X, y)","cc4d972a":"TESTFILEPATH = os.path.join('..', 'input', 'test.csv')\ntest = pd.read_csv(TESTFILEPATH)","c775e999":"# Date type transformation\ntest['pickup_datetime'] = pd.to_datetime(test['pickup_datetime'])\n# It calculate the \"crow flies\" distance between two locations \ntest['month_pickup']=test['pickup_datetime'].dt.month\ntest['day_pickup']=test['pickup_datetime'].dt.dayofweek\ntest['hour_pickup']=test['pickup_datetime'].dt.hour\ntest['minute_pickup']=test['pickup_datetime'].dt.minute\ntest['second_pickup']=test['pickup_datetime'].dt.second\ntest = test.drop(columns=['pickup_datetime'])\n# adding the trip distance column\ntest['trip_distance']=test.apply(distance, axis=1)","f1e475bb":"test.head()","a1a4491c":"# test independant variables (features)\ntest_X = test[features]","100896a8":"predicted_duration_log = rfr.predict(test_X) ","32c32de7":"predicted_duration = np.exp(predicted_duration_log) # reverse the log predictions\npredicted_duration","853317e9":"my_submission = pd.DataFrame({'id': test['id'], 'trip_duration': predicted_duration})\nWORKINGFILEPATH = os.path.join('..', 'working', 'submission.csv')\nmy_submission.to_csv(WORKINGFILEPATH, index=False)","1ce88c61":"# NYC_Taxi","0c655502":" Let's try the log function onthe trip duration:","75a8f5ca":"All the trips happened on 2016.","d2cfb540":"70% of the trips has one passenger. There is 60 trips with no passengers! This is a little bit suspecious!","100c9ad7":"Vendor ID may refer to the Taxi's campany. ","e640e8b2":"**d- Target variable (trip_duration) study**","48ed92f2":"**a- Laod the test file**","3d70b0ac":"**c- Date transformation**","d7f9115b":"**b- Features vizualisation**","e5985469":"## 10. Prediction file submission","2beae396":"## 8. Chosen model fiting","38044b98":"Almost all the trip have the value 'N' in 'store_and_fwd_flag' variable which means that the trip data was sent immediately to the vendor.","cbafbad9":" There is a lot of trips with small duration ie. less than 4500 secondes (75 minutes) and a few larger trip duration that aren\u2019t visible at all at the right.","bf8730ea":"**a- Month, day, hour, minute and second extraction from the pickup date time**","495d35ac":"There are some suspecious trip durations that took about 2000000 secondes ie. 23 days!  ","6cd4e3a3":"The dataset is complete. There is no missing data.","972d8800":"## 4. Features engineering","f234c97a":"Almost all the trips have a duration between 0 to 5000 s. Lets zoom in.","4b5b8721":"The trips happended between January and June of the same year (2016).","0b8a5954":"**b- Data transformation**","6ad7c85b":"## 1. Data Loading","2af0b11d":"**a- First steps in dataset exploration**","0370dc72":"## 3. Data preprocessing","73308deb":"## 5. Scoring method","d520ef6d":"## 9. Predictions","d4b00184":"We can see that the log almost follows a normal distribution. We should also notice the existance of some values between log (11) and log(12). They are outliers.","a84b6a3c":"**e- The outliers**","2ce5061d":"## 2. Data Exploration","e7b96450":"We will add a new colunm to the dataset that gives the crow flies distance between the pickup and dropoff trips. ","eebf8603":"We notice that the Random Forest Regressor gives the smallest mean of the five cross-validation RMSLEs . So, we choose this model to fit it. But, we notice that the test dataset gives a much higher RMSLE. I tried to find where is the problem but I could not. Maybe, the RMSLE that I implemented is different (wrong one) from the true RMSLE. ","9ea969b6":"The trips with long duration are made by the vendor ID 1","071ce80b":"We choose to usde the cross-validation method. The scoring function, which is RMSLE as specified by the competition, is impelemented.","86790d0e":" **b- Crow flies distance of the trips**","b94bf617":"## 6. Models selection","8b3a40c8":"**c- Predictions using the chosen model**","1a308dda":"**c- Log transform of the trip duration**","4bd9dbd7":"## 7. Models training"}}