{"cell_type":{"e9ac2658":"code","e1ca2ba6":"code","297a6674":"code","83bff98c":"code","1d9f8f91":"code","b5dd4b6d":"code","468ec271":"code","403ec519":"code","c32613db":"code","f0a81649":"code","27d0ae9a":"code","347a2722":"code","f32e5c7e":"code","03178a85":"code","cb92225e":"code","032d1297":"code","edde5e6a":"code","a1026e28":"code","a9446094":"code","0884c6da":"code","7ebb0640":"code","28e5f3b1":"code","0084724e":"code","15715617":"code","63fc31ff":"code","addb4cd5":"code","6ec917ac":"code","6e2931e7":"code","40de78c5":"code","90f0dcf1":"code","c4e33882":"code","a426dc8c":"code","21872267":"code","d60040d6":"code","aef7e7af":"code","11ddbc58":"code","be82a838":"code","ca37cc02":"code","a2218f7c":"code","de755046":"code","62b7be26":"code","33787533":"code","1523ddab":"code","be189f68":"code","ca79b368":"code","d2a38b3f":"code","b810bfd9":"code","13461366":"code","bd6dbd2a":"code","3493b0d3":"code","ba71ddb2":"code","c72e7850":"code","15f9c590":"code","0cac846d":"code","2781a02e":"code","47fa9404":"code","8ceadb54":"code","fadf14a0":"code","5da028b4":"code","a63ce8c5":"code","0754e129":"code","e5b686be":"code","be46e194":"code","b28aa357":"code","b8735df4":"code","3d26f90f":"markdown","ffe4aec4":"markdown","84f7ecd7":"markdown","6edebaeb":"markdown","fd47243b":"markdown","1aeaf6c6":"markdown","5ebefe1f":"markdown","c9772487":"markdown","bb63027f":"markdown","516d7ec8":"markdown","0968a075":"markdown","dd3e0303":"markdown","07a2ff4f":"markdown","3d00e5d0":"markdown","95f6ebd1":"markdown","98e40e1b":"markdown","7ad629d9":"markdown","e2c796f3":"markdown","57cf0b20":"markdown","36deb775":"markdown","a897cb48":"markdown","f41b36ca":"markdown","1ca2d956":"markdown","c748003e":"markdown","2eae8215":"markdown","cdd66503":"markdown","03cc9c3c":"markdown","f43d5931":"markdown","e83c48be":"markdown","a1c00f66":"markdown","281da229":"markdown","b388db38":"markdown","50f71068":"markdown","89413135":"markdown","1a095a94":"markdown","7d9855b2":"markdown","f4946113":"markdown","c027efc9":"markdown","1414cb8a":"markdown","ba04727b":"markdown","b99ec7a9":"markdown","6bb75a95":"markdown","b0bee0ae":"markdown","7c5d5318":"markdown","55bb678e":"markdown","7807be3e":"markdown","a7e3aa4d":"markdown","3d3d8459":"markdown","7f7f6841":"markdown","351cfe84":"markdown","6afe3932":"markdown","99caf606":"markdown","ad577618":"markdown","f1ba9e37":"markdown","539eeb7e":"markdown","2f55a846":"markdown","1b0db127":"markdown","59ae4f76":"markdown","2df15d38":"markdown","edf59e36":"markdown","715f5882":"markdown","6ff42846":"markdown","203844d8":"markdown","97f4e74b":"markdown","a9ce9297":"markdown","22774d4e":"markdown","4d44d7b0":"markdown","305bb030":"markdown","3423e5d4":"markdown","5642436b":"markdown","142ef5c7":"markdown","89a59bc0":"markdown","cb235d54":"markdown","4d005e29":"markdown","4031857a":"markdown","c83e48c5":"markdown","840ac733":"markdown","5a9e8227":"markdown","5885b3da":"markdown","643ab350":"markdown","b490d758":"markdown","87c837f7":"markdown","0d227b3e":"markdown","66eb54d0":"markdown","41a74f6e":"markdown","ffca1e82":"markdown","d5dba293":"markdown","764dd8b7":"markdown"},"source":{"e9ac2658":"#import some necessary librairies\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n%matplotlib inline\nimport matplotlib.pyplot as plt  # Matlab-style plotting\nimport seaborn as sns\ncolor = sns.color_palette()\nsns.set_style('darkgrid')\nimport warnings\ndef ignore_warn(*args, **kwargs):\n    pass\nwarnings.warn = ignore_warn #ignore annoying warning (from sklearn and seaborn)\n\n\nfrom scipy import stats\nfrom scipy.stats import norm, skew #for some statistics\n\n\npd.set_option('display.float_format', lambda x: '{:.3f}'.format(x)) #Limiting floats output to 3 decimal points\n\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\")) #check the files available in the directory","e1ca2ba6":"#Now let's import and put the train and test datasets in  pandas dataframe\n\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\n","297a6674":"##display the first five rows of the train dataset.\ntrain.head(5)","83bff98c":"##display the first five rows of the test dataset.\ntest.head(5)\n","1d9f8f91":"#check the numbers of samples and features\nprint(\"The train data size before dropping Id feature is : {} \".format(train.shape))\nprint(\"The test data size before dropping Id feature is : {} \".format(test.shape))\n\n#Save the 'Id' column\ntrain_ID = train['Id']\ntest_ID = test['Id']\n\n#Now drop the  'Id' colum since it's unnecessary for  the prediction process.\ntrain.drop(\"Id\", axis = 1, inplace = True)\ntest.drop(\"Id\", axis = 1, inplace = True)\n\n#check again the data size after dropping the 'Id' variable\nprint(\"\\nThe train data size after dropping Id feature is : {} \".format(train.shape)) \nprint(\"The test data size after dropping Id feature is : {} \".format(test.shape))","b5dd4b6d":"\nfig, ax = plt.subplots()\nax.scatter(x = train['GrLivArea'], y = train['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GrLivArea', fontsize=13)\nplt.show()\n","468ec271":"#Deleting outliers\ntrain = train.drop(train[(train['GrLivArea']>4000) & (train['SalePrice']<300000)].index)\n\n#Check the graphic again\nfig, ax = plt.subplots()\nax.scatter(train['GrLivArea'], train['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GrLivArea', fontsize=13)\nplt.show()","403ec519":"sns.distplot(train['SalePrice'] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(train['SalePrice'], plot=plt)\nplt.show()","c32613db":"#We use the numpy fuction log1p which  applies log(1+x) to all elements of the column\ntrain[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])\n\n#Check the new distribution \nsns.distplot(train['SalePrice'] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(train['SalePrice'], plot=plt)\nplt.show()\n","f0a81649":"ntrain = train.shape[0]\nntest = test.shape[0]\ny_train = train.SalePrice.values\nall_data = pd.concat((train, test)).reset_index(drop=True)\nall_data.drop(['SalePrice'], axis=1, inplace=True)\nprint(\"all_data size is : {}\".format(all_data.shape))","27d0ae9a":"all_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)[:30]\nmissing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\nmissing_data.head(20)","347a2722":"f, ax = plt.subplots(figsize=(15, 12))\nplt.xticks(rotation='90')\nsns.barplot(x=all_data_na.index, y=all_data_na)\nplt.xlabel('Features', fontsize=15)\nplt.ylabel('Percent of missing values', fontsize=15)\nplt.title('Percent missing data by feature', fontsize=15)","f32e5c7e":"#Correlation map to see how features are correlated with SalePrice\ncorrmat = train.corr()\nplt.subplots(figsize=(12,9))\nsns.heatmap(corrmat, vmax=0.9, square=True)","03178a85":"all_data[\"PoolQC\"] = all_data[\"PoolQC\"].fillna(\"None\")","cb92225e":"all_data[\"MiscFeature\"] = all_data[\"MiscFeature\"].fillna(\"None\")","032d1297":"all_data[\"Alley\"] = all_data[\"Alley\"].fillna(\"None\")","edde5e6a":"all_data[\"Fence\"] = all_data[\"Fence\"].fillna(\"None\")","a1026e28":"all_data[\"FireplaceQu\"] = all_data[\"FireplaceQu\"].fillna(\"None\")","a9446094":"#Group by neighborhood and fill in missing value by the median LotFrontage of all the neighborhood\nall_data[\"LotFrontage\"] = all_data.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(\n    lambda x: x.fillna(x.median()))","0884c6da":"for col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond'):\n    all_data[col] = all_data[col].fillna('None')","7ebb0640":"for col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n    all_data[col] = all_data[col].fillna(0)","28e5f3b1":"for col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    all_data[col] = all_data[col].fillna(0)","0084724e":"for col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    all_data[col] = all_data[col].fillna('None')","15715617":"all_data[\"MasVnrType\"] = all_data[\"MasVnrType\"].fillna(\"None\")\nall_data[\"MasVnrArea\"] = all_data[\"MasVnrArea\"].fillna(0)","63fc31ff":"all_data['MSZoning'] = all_data['MSZoning'].fillna(all_data['MSZoning'].mode()[0])","addb4cd5":"all_data = all_data.drop(['Utilities'], axis=1)","6ec917ac":"all_data[\"Functional\"] = all_data[\"Functional\"].fillna(\"Typ\")","6e2931e7":"all_data['Electrical'] = all_data['Electrical'].fillna(all_data['Electrical'].mode()[0])","40de78c5":"all_data['KitchenQual'] = all_data['KitchenQual'].fillna(all_data['KitchenQual'].mode()[0])","90f0dcf1":"all_data['Exterior1st'] = all_data['Exterior1st'].fillna(all_data['Exterior1st'].mode()[0])\nall_data['Exterior2nd'] = all_data['Exterior2nd'].fillna(all_data['Exterior2nd'].mode()[0])","c4e33882":"all_data['SaleType'] = all_data['SaleType'].fillna(all_data['SaleType'].mode()[0])","a426dc8c":"\nall_data['MSSubClass'] = all_data['MSSubClass'].fillna(\"None\")\n\n","21872267":"#Check remaining missing values if any \nall_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)\nmissing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\nmissing_data.head()","d60040d6":"#MSSubClass=The building class\nall_data['MSSubClass'] = all_data['MSSubClass'].apply(str)\n\n\n#Changing OverallCond into a categorical variable\nall_data['OverallCond'] = all_data['OverallCond'].astype(str)\n\n\n#Year and month sold are transformed into categorical features.\nall_data['YrSold'] = all_data['YrSold'].astype(str)\nall_data['MoSold'] = all_data['MoSold'].astype(str)\n\n","aef7e7af":"from sklearn.preprocessing import LabelEncoder\ncols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n        'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond', \n        'YrSold', 'MoSold')\n# process columns, apply LabelEncoder to categorical features\nfor c in cols:\n    lbl = LabelEncoder() \n    lbl.fit(list(all_data[c].values)) \n    all_data[c] = lbl.transform(list(all_data[c].values))\n\n# shape        \nprint('Shape all_data: {}'.format(all_data.shape))\n\n\n","11ddbc58":"# Adding total sqfootage feature \nall_data['TotalSF'] = all_data['TotalBsmtSF'] + all_data['1stFlrSF'] + all_data['2ndFlrSF']\n","be82a838":"numeric_feats = all_data.dtypes[all_data.dtypes != \"object\"].index\n\n# Check the skew of all numerical features\nskewed_feats = all_data[numeric_feats].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nprint(\"\\nSkew in numerical features: \\n\")\nskewness = pd.DataFrame({'Skew' :skewed_feats})\nskewness.head(10)\n","ca37cc02":"skewness = skewness[abs(skewness) > 0.75]\nprint(\"There are {} skewed numerical features to Box Cox transform\".format(skewness.shape[0]))\n\nfrom scipy.special import boxcox1p\nskewed_features = skewness.index\nlam = 0.15\nfor feat in skewed_features:\n    #all_data[feat] += 1\n    all_data[feat] = boxcox1p(all_data[feat], lam)\n    \n#all_data[skewed_features] = np.log1p(all_data[skewed_features])","a2218f7c":"\nall_data = pd.get_dummies(all_data)\nprint(all_data.shape)","de755046":"train = all_data[:ntrain]\ntest = all_data[ntrain:]\n","62b7be26":"from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb\n\n","33787533":"#Validation function\nn_folds = 5\n\ndef rmsle_cv(model):\n    kf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(train.values)\n    rmse= np.sqrt(-cross_val_score(model, train.values, y_train, scoring=\"neg_mean_squared_error\", cv = kf))\n    return(rmse)","1523ddab":"lasso = make_pipeline(RobustScaler(), Lasso(alpha =0.0005, random_state=1))","be189f68":"ENet = make_pipeline(RobustScaler(), ElasticNet(alpha=0.0005, l1_ratio=.9, random_state=3))","ca79b368":"KRR = KernelRidge(alpha=0.6, kernel='polynomial', degree=2, coef0=2.5)","d2a38b3f":"GBoost = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n                                   max_depth=4, max_features='sqrt',\n                                   min_samples_leaf=15, min_samples_split=10, \n                                   loss='huber', random_state =5)","b810bfd9":"model_xgb = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state =7, nthread = -1)\n\n","13461366":"model_lgb = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.05, n_estimators=720,\n                              max_bin = 55, bagging_fraction = 0.8,\n                              bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)","bd6dbd2a":"score = rmsle_cv(lasso)\nprint(\"\\nLasso score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","3493b0d3":"score = rmsle_cv(ENet)\nprint(\"ElasticNet score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","ba71ddb2":"score = rmsle_cv(KRR)\nprint(\"Kernel Ridge score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","c72e7850":"score = rmsle_cv(GBoost)\nprint(\"Gradient Boosting score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","15f9c590":"\nscore = rmsle_cv(model_xgb)\nprint(\"Xgboost score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","0cac846d":"score = rmsle_cv(model_lgb)\nprint(\"LGBM score: {:.4f} ({:.4f})\\n\" .format(score.mean(), score.std()))","2781a02e":"class AveragingModels(BaseEstimator, RegressorMixin, TransformerMixin):\n    def __init__(self, models):\n        self.models = models\n        \n    # we define clones of the original models to fit the data in\n    def fit(self, X, y):\n        self.models_ = [clone(x) for x in self.models]\n        \n        # Train cloned base models\n        for model in self.models_:\n            model.fit(X, y)\n\n        return self\n    \n    #Now we do the predictions for cloned models and average them\n    def predict(self, X):\n        predictions = np.column_stack([\n            model.predict(X) for model in self.models_\n        ])\n        return np.mean(predictions, axis=1)   ","47fa9404":"averaged_models = AveragingModels(models = (ENet, GBoost, KRR, lasso))\n\nscore = rmsle_cv(averaged_models)\nprint(\" Averaged base models score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","8ceadb54":"class StackingAveragedModels(BaseEstimator, RegressorMixin, TransformerMixin):\n    def __init__(self, base_models, meta_model, n_folds=5):\n        self.base_models = base_models\n        self.meta_model = meta_model\n        self.n_folds = n_folds\n   \n    # We again fit the data on clones of the original models\n    def fit(self, X, y):\n        self.base_models_ = [list() for x in self.base_models]\n        self.meta_model_ = clone(self.meta_model)\n        kfold = KFold(n_splits=self.n_folds, shuffle=True, random_state=156)\n        \n        # Train cloned base models then create out-of-fold predictions\n        # that are needed to train the cloned meta-model\n        out_of_fold_predictions = np.zeros((X.shape[0], len(self.base_models)))\n        for i, model in enumerate(self.base_models):\n            for train_index, holdout_index in kfold.split(X, y):\n                instance = clone(model)\n                self.base_models_[i].append(instance)\n                instance.fit(X[train_index], y[train_index])\n                y_pred = instance.predict(X[holdout_index])\n                out_of_fold_predictions[holdout_index, i] = y_pred\n                \n        # Now train the cloned  meta-model using the out-of-fold predictions as new feature\n        self.meta_model_.fit(out_of_fold_predictions, y)\n        return self\n   \n    #Do the predictions of all base models on the test data and use the averaged predictions as \n    #meta-features for the final prediction which is done by the meta-model\n    def predict(self, X):\n        meta_features = np.column_stack([\n            np.column_stack([model.predict(X) for model in base_models]).mean(axis=1)\n            for base_models in self.base_models_ ])\n        return self.meta_model_.predict(meta_features)","fadf14a0":"stacked_averaged_models = StackingAveragedModels(base_models = (ENet, GBoost, KRR),\n                                                 meta_model = lasso)\n\nscore = rmsle_cv(stacked_averaged_models)\nprint(\"Stacking Averaged models score: {:.4f} ({:.4f})\".format(score.mean(), score.std()))","5da028b4":"def rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))","a63ce8c5":"stacked_averaged_models.fit(train.values, y_train)\nstacked_train_pred = stacked_averaged_models.predict(train.values)\nstacked_pred = np.expm1(stacked_averaged_models.predict(test.values))\nprint(rmsle(y_train, stacked_train_pred))","0754e129":"model_xgb.fit(train, y_train)\nxgb_train_pred = model_xgb.predict(train)\nxgb_pred = np.expm1(model_xgb.predict(test))\nprint(rmsle(y_train, xgb_train_pred))","e5b686be":"model_lgb.fit(train, y_train)\nlgb_train_pred = model_lgb.predict(train)\nlgb_pred = np.expm1(model_lgb.predict(test.values))\nprint(rmsle(y_train, lgb_train_pred))","be46e194":"'''RMSE on the entire Train data when averaging'''\n\nprint('RMSLE score on train data:')\nprint(rmsle(y_train,stacked_train_pred*0.70 +\n               xgb_train_pred*0.15 + lgb_train_pred*0.15 ))","b28aa357":"ensemble = stacked_pred*0.70 + xgb_pred*0.15 + lgb_pred*0.15","b8735df4":"sub = pd.DataFrame()\nsub['Id'] = test_ID\nsub['SalePrice'] = ensemble\nsub.to_csv('submission.csv',index=False)","3d26f90f":"- **Exterior1st and Exterior2nd** : Again Both Exterior 1 & 2 have only one missing value. We will just substitute in the most common string\n","ffe4aec4":"- **Electrical** : It has one NA value. Since this feature has mostly 'SBrkr', we can set that for the missing value.\n","84f7ecd7":"###Imputing missing values ","6edebaeb":"###Simplest Stacking approach : Averaging base models","fd47243b":"On this gif, the base models are algorithms 0, 1, 2 and the meta-model is algorithm 3. The entire training dataset is \nA+B (target variable y known) that we can split into train part (A) and holdout part (B). And the test dataset is C. \n\nB1 (which is the prediction from the holdout part)  is the new feature used to train the meta-model 3 and C1 (which\nis the prediction  from the test dataset) is the meta-feature on which the final prediction is done. ","1aeaf6c6":"- **BsmtFinSF1, BsmtFinSF2, BsmtUnfSF, TotalBsmtSF, BsmtFullBath and BsmtHalfBath** : missing values are likely zero for having no basement","5ebefe1f":"It remains no missing value.\n","c9772487":"**If you found this notebook helpful or you just liked it , some upvotes would be very much appreciated -  That will keep me motivated to update it on a regular basis** :-)","bb63027f":"Getting the new train and test sets. ","516d7ec8":"- **Utilities** : For this categorical feature all records are \"AllPub\", except for one \"NoSeWa\"  and 2 NA . Since the house with 'NoSewa' is in the training set, **this feature won't help in predictive modelling**. We can then safely  remove it.\n","0968a075":"**Ensemble prediction:**","dd3e0303":"We use the scipy  function boxcox1p which computes the Box-Cox transformation of **\\\\(1 + x\\\\)**. \n\nNote that setting \\\\( \\lambda = 0 \\\\) is equivalent to log1p used above for the target variable.  \n\nSee [this page][1] for more details on Box Cox Transformation as well as [the scipy function's page][2]\n[1]: http:\/\/onlinestatbook.com\/2\/transformations\/box-cox.html\n[2]: https:\/\/docs.scipy.org\/doc\/scipy-0.19.0\/reference\/generated\/scipy.special.boxcox1p.html","07a2ff4f":"**Box Cox Transformation of (highly) skewed features**","3d00e5d0":"We impute them  by proceeding sequentially  through features with missing values ","95f6ebd1":"- **BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1 and BsmtFinType2** : For all these categorical basement-related features, NaN means that there is no  basement.\n","98e40e1b":"##Features engineering","7ad629d9":"###Note : \n Outliers removal is note always safe.  We decided to delete these two as they are very huge and  really  bad ( extremely large areas for very low  prices). \n\nThere are probably others outliers in the training data.   However, removing all them  may affect badly our models if ever there were also  outliers  in the test data. That's why , instead of removing them all, we will just manage to make some of our  models robust on them. You can refer to  the modelling part of this notebook for that. ","e2c796f3":"To make the two approaches comparable (by using the same number of models) , we just average **Enet KRR and Gboost**, then we add **lasso as meta-model**.","57cf0b20":"## Ensembling StackedRegressor, XGBoost and LightGBM","36deb775":"###Final Training and Prediction","a897cb48":"**Transforming some numerical variables that are really categorical**","f41b36ca":"- **Gradient Boosting Regression** :\n\nWith **huber**  loss that makes it robust to outliers\n    ","1ca2d956":"**XGBoost:**","c748003e":"- **LotFrontage** : Since the area of each street connected to the house property most likely have a similar area to other houses in its neighborhood , we can **fill in missing values by the median LotFrontage of the neighborhood**.","2eae8215":"- **LightGBM** :","cdd66503":"**Averaged base models class**","03cc9c3c":"- **MasVnrArea and MasVnrType** : NA most likely means no masonry veneer for these houses. We can fill 0 for the area and None for the type. \n","f43d5931":"We get again a better score by adding a meta learner","e83c48be":"We add **XGBoost and LightGBM** to the** StackedRegressor** defined previously. ","a1c00f66":"The target variable is right skewed.  As (linear) models love normally distributed data , we need to transform this variable and make it more normally distributed.","281da229":"**Averaged base models score**","b388db38":"##Base models","50f71068":"##Outliers","89413135":"###Base models scores","1a095a94":"- **FireplaceQu** : data description says NA means \"no fireplace\"","7d9855b2":"Wow ! It seems even the simplest stacking approach really improve the score . This encourages \nus to go further and explore a less simple stacking approch. ","f4946113":"**Label Encoding some categorical variables that may contain information in their ordering set** ","c027efc9":"###Missing Data","1414cb8a":"let's first  concatenate the train and test data in the same dataframe","ba04727b":"**Adding one more important feature**","b99ec7a9":"###Less simple Stacking : Adding a Meta-model","6bb75a95":"-  **LASSO  Regression**  : \n\nThis model may be very sensitive to outliers. So we need to made it more robust on them. For that we use the sklearn's  **Robustscaler()**  method on pipeline ","b0bee0ae":"##Stacking  models","7c5d5318":"**Skewed features**","55bb678e":"**Getting dummy categorical features**","7807be3e":"**Define a cross validation strategy**","a7e3aa4d":"Let's see how these base models perform on the data by evaluating the  cross-validation rmsle error","3d3d8459":"- **Fence** : data description says NA means \"no fence\"","7f7f6841":"##Target Variable","351cfe84":"![Faron](http:\/\/i.imgur.com\/QBuDOjs.jpg)\n\n(Image taken from [Faron](https:\/\/www.kaggle.com\/getting-started\/18153#post103381))","6afe3932":"![kaz](http:\/\/5047-presscdn.pagely.netdna-cdn.com\/wp-content\/uploads\/2017\/06\/image5.gif)\n\nGif taken from [KazAnova's interview](http:\/\/blog.kaggle.com\/2017\/06\/15\/stacking-made-easy-an-introduction-to-stacknet-by-competitions-grandmaster-marios-michailidis-kazanova\/)","99caf606":" **Log-transformation of the target variable**","ad577618":"Is there any remaining missing value ? ","f1ba9e37":"- **MSSubClass** : Na most likely means No building class. We can replace missing values with None\n","539eeb7e":"The skew seems now corrected and the data appears more normally distributed. ","2f55a846":"- **GarageType, GarageFinish, GarageQual and GarageCond** : Replacing missing data with None","1b0db127":"**Import librairies**","59ae4f76":"Let's explore these outliers\n","2df15d38":"**Stacking averaged Models Class**","edf59e36":"#Modelling","715f5882":"**Data Correlation**\n","6ff42846":"**Hope that at the end of this notebook, stacking will be clear for those, like myself, who found the concept not so easy to grasp**","203844d8":"[Documentation][1] for the Ames Housing Data indicates that there are outliers present in the training data\n[1]: http:\/\/ww2.amstat.org\/publications\/jse\/v19n3\/Decock\/DataDocumentation.txt","97f4e74b":"In this approach, we add a meta-model on averaged base models and use the out-of-folds predictions of these base models to train our meta-model. \n\nThe procedure, for the training part, may be described as follows:\n\n\n1. Split the total training set into two disjoint sets (here **train** and .**holdout** )\n\n2. Train several base models on the first part (**train**)\n\n3. Test these base models on the second part (**holdout**)\n\n4. Use the predictions from 3)  (called  out-of-folds predictions) as the inputs, and the correct responses (target variable) as the outputs  to train a higher level learner called **meta-model**.\n\nThe first three steps are done iteratively . If we take for example a 5-fold stacking , we first split the training data into 5 folds. Then we will do 5 iterations. In each iteration,  we train every base model on 4 folds and predict on the remaining fold (holdout fold). \n\nSo, we will be sure, after 5 iterations , that the entire data is used to get out-of-folds predictions that we will then use as \nnew feature to train our meta-model in the step 4.\n\nFor the prediction part , We average the predictions of  all base models on the test data  and used them as **meta-features**  on which, the final prediction is done with the meta-model.\n","a9ce9297":"We just average four models here **ENet, GBoost,  KRR and lasso**.  Of course we could easily add more models in the mix. ","22774d4e":"**LightGBM:**","4d44d7b0":"We can see at the bottom right two with extremely large GrLivArea that are of a low price. These values are huge oultliers.\nTherefore, we can safely delete them.","305bb030":"- **Alley** : data description says NA means \"no alley access\"","3423e5d4":"- **KitchenQual**: Only one NA value, and same as Electrical, we set 'TA' (which is the most frequent)  for the missing value in KitchenQual.\n","5642436b":"- **PoolQC** : data description says NA means \"No  Pool\". That make sense, given the huge ratio of missing value (+99%) and majority of houses have no Pool at all in general. ","142ef5c7":"**SalePrice** is the variable we need to predict. So let's do some analysis on this variable first.","89a59bc0":"**Submission**","cb235d54":"We use the **cross_val_score** function of Sklearn. However this function has not a shuffle attribut, we add then one line of code,  in order to shuffle the dataset  prior to cross-validation","4d005e29":"- **Elastic Net Regression** :\n\nagain made robust to outliers","4031857a":"**StackedRegressor:**","c83e48c5":"- **SaleType** : Fill in again with most frequent which is \"WD\"","840ac733":"- **Kernel Ridge Regression** :","5a9e8227":"- **GarageYrBlt, GarageArea and GarageCars** : Replacing missing data with 0 (Since No garage = no cars in such garage.)\n","5885b3da":"**Stacking Averaged models Score**","643ab350":"We first define a rmsle evaluation function ","b490d758":"###More features engeneering","87c837f7":"- **XGBoost** :","0d227b3e":"#Data Processing","66eb54d0":"We begin with this simple approach of averaging base models.  We build a new **class**  to extend scikit-learn with our model and also to laverage encapsulation and code reuse ([inheritance][1]) \n\n\n  [1]: https:\/\/en.wikipedia.org\/wiki\/Inheritance_(object-oriented_programming)","41a74f6e":"- **MSZoning (The general zoning classification)** :  'RL' is by far  the most common value.  So we can fill in missing values with 'RL'\n","ffca1e82":"- **MiscFeature** : data description says NA means \"no misc feature\"\n","d5dba293":"Since area related features are very important to determine house prices, we add one more feature which is the total area of basement, first and second floor areas of each house","764dd8b7":"- **Functional** : data description says NA means typical"}}