{"cell_type":{"4d2661c9":"code","f902a74b":"code","979e2183":"code","cf6d9a8d":"code","b561d129":"code","6e55c66f":"code","2bc31490":"code","74df8193":"markdown","a8a75f3e":"markdown"},"source":{"4d2661c9":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\ndata = pd.read_csv('..\/input\/fifa-2018-match-statistics\/FIFA 2018 Statistics.csv')\ny = (data['Man of the Match'] == \"Yes\")  # Convert from string \"Yes\"\/\"No\" to binary\nfeature_names = [i for i in data.columns if data[i].dtype in [np.int64, np.int64]]\nX = data[feature_names]\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state=1)\nmy_model = RandomForestClassifier(random_state=0).fit(train_X, train_y)","f902a74b":"row_to_show = 5\ndata_for_prediction = val_X.iloc[row_to_show]  # use 1 row of data here. Could use multiple rows if desired\ndata_for_prediction_array = data_for_prediction.values.reshape(1, -1)\n\n\nmy_model.predict_proba(data_for_prediction_array)","979e2183":"import shap  # package used to calculate Shap values\n\n# Create object that can calculate shap values\nexplainer = shap.TreeExplainer(my_model)\n\n# Calculate Shap values\nshap_values = explainer.shap_values(data_for_prediction)","cf6d9a8d":"shap_values","b561d129":"feature_names\n#fet_imp = pd.DataFrame(data=np.array(shap_values[1]),columns=feature_names)\n\nfeature_importance = pd.DataFrame(list(zip(feature_names,shap_values[1])),columns=['col_name','feature_importance_vals'])\nfeature_importance.sort_values(by=['feature_importance_vals'],ascending=False,inplace=True)","6e55c66f":"feature_importance","2bc31490":"shap.initjs()\nshap.force_plot(explainer.expected_value[1], shap_values[1], data_for_prediction)","74df8193":"The shap_values object above is a list with two arrays. The first array is the SHAP values for a negative outcome (don't win the award), and the second array is the list of SHAP values for the positive outcome (wins the award). We typically think about predictions in terms of the prediction of a positive outcome, so we'll pull out SHAP values for positive outcomes (pulling out shap_values[1])","a8a75f3e":"Local Interpretability for a single row , checking for row 5 with class prob of 0.7"}}