{"cell_type":{"87b1676d":"code","64cef386":"code","2e530c1a":"code","9fd4371a":"code","59f61e1c":"code","c93c3659":"code","0e5aa649":"code","6382c852":"code","36a0e043":"code","f015f602":"markdown","1f96428e":"markdown","e314046b":"markdown","31e7d3c1":"markdown","81a413d4":"markdown","58d0fe00":"markdown","9838ced0":"markdown","018a9e88":"markdown"},"source":{"87b1676d":"import os\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'\n\nimport tensorflow as tf\nimport tensorflow_addons as tfa\nfrom tensorflow import keras\n\nsns.set_style(\"darkgrid\", {\"grid.color\": \".6\", \"grid.linestyle\": \":\"})","64cef386":"def per2float(x):\n  try: \n    x = float(x.strip('%'))\/100\n    return x\n  except: pass\n\ntrain_df = pd.read_csv('..\/input\/genshin-impact-character-base-stat\/Keqing\/KeqingStat.csv', converters={'CRIT DMG':per2float}, skipinitialspace=True)\ntest_df = pd.read_csv('..\/input\/genshin-impact-character-base-stat\/Keqing\/KeqingStat.csv', converters={'CRIT DMG':per2float}, skipinitialspace=True)\n\ntrain_df, test_df = train_df.drop([2, 4, 6, 8, 10, 12]), test_df.drop([2, 4, 6, 8, 10, 12]) #drop rows with \"+\" on levels\ntrain_df['Lv'], test_df['Lv'] = train_df.Lv.astype(int), test_df.Lv.astype(int)\n\ntrain_df.head()","2e530c1a":"fig, (ax1, ax2, ax3, ax4) = plt.subplots(1,4, figsize=(20,8))\n\nsns.scatterplot(x=train_df['Lv'], y=train_df['Base HP'], ax=ax1)\nsns.scatterplot(x=train_df['Lv'], y=train_df['Base ATK'], ax=ax2)\nsns.scatterplot(x=train_df['Lv'], y=train_df['Base DEF'], ax=ax3)\nsns.scatterplot(x=train_df['Lv'], y=train_df['CRIT DMG'], ax=ax4)\n\nplt.show()","9fd4371a":"def HP_model():\n  model = tf.keras.Sequential([keras.layers.Dense(1, input_shape=[1])],name='HP_Model',)\n  model.compile(loss='mean_absolute_error', optimizer=tf.keras.optimizers.Adam(1), metrics=['accuracy'])\n  return model\n\ndef ATK_model():\n  model = tf.keras.Sequential([keras.layers.Dense(1, input_shape=[1])],name='ATK_Model')\n  model.compile(loss='mean_absolute_error', optimizer=tf.keras.optimizers.Adam(0.05), metrics=['accuracy'])\n  return model\n\ndef DEF_model():\n  model = tf.keras.Sequential([keras.layers.Dense(1, input_shape=[1])],name='DEF_Model')\n  model.compile(loss='mean_absolute_error', optimizer=tf.keras.optimizers.Adam(0.05), metrics=['accuracy'])\n  return model\n\ndef CRIT_model():\n  model = tf.keras.Sequential([keras.layers.Dense(1, input_shape=[1])],name='CRIT_Model')\n  model.compile(loss='mean_squared_error', optimizer=tf.keras.optimizers.Adam(0.1), metrics=['accuracy'])\n  return model\n\nhp_m = HP_model()\natk_m = ATK_model()\ndef_m = DEF_model()\ncrit_m = CRIT_model()","59f61e1c":"hp_his = hp_m.fit(train_df['Lv'], train_df['Base HP'], epochs=900, verbose=0)\natk_his = atk_m.fit(train_df['Lv'], train_df['Base ATK'], epochs=900, verbose=0)\ndef_his = def_m.fit(train_df['Lv'], train_df['Base DEF'], epochs=900, verbose=0)\ncrit_his = crit_m.fit(train_df['Lv'], train_df['CRIT DMG'], epochs=900, verbose=0)","c93c3659":"fig, (ax1, ax2, ax3, ax4) = plt.subplots(1,4, figsize=(20,8))\n\nax1.plot(hp_his.history['loss'])\nax2.plot(atk_his.history['loss'])\nax3.plot(def_his.history['loss'])\nax4.plot(def_his.history['loss'])\n\nax1.set_xlabel('Epochs'), ax2.set_xlabel('Epochs'), ax3.set_xlabel('Epochs'), ax4.set_xlabel('Epochs'), ax4.set\nax1.set_ylabel('Loss'), ax2.set_ylabel('Loss'), ax3.set_ylabel('Loss'), ax4.set_ylabel('Loss')\n\nplt.show()","0e5aa649":"result = {}\n\nresult['hp_prediction'] = hp_m.predict(test_df['Lv'])\nresult['atk_prediction'] = atk_m.predict(test_df['Lv'])\nresult['def_prediction'] = def_m.predict(test_df['Lv'])\nresult['crit_prediction'] = crit_m.predict(test_df['Lv'])","6382c852":"fig, (ax1, ax2, ax3, ax4) = plt.subplots(1,4, figsize=(20,8))\n\nsns.scatterplot(x=test_df['Lv'], y=test_df['Base HP'], ax=ax1)\nax1.plot(test_df['Lv'], result['hp_prediction'], color='g')\n\nsns.scatterplot(x=test_df['Lv'], y=test_df['Base ATK'], ax=ax2)\nax2.plot(test_df['Lv'], result['atk_prediction'], color='r')\n\nsns.scatterplot(x=test_df['Lv'], y=test_df['Base DEF'], ax=ax3)\nax3.plot(test_df['Lv'], result['def_prediction'], color='b')\n\nsns.scatterplot(x=test_df['Lv'], y=test_df['CRIT DMG'], ax=ax4)\nax4.plot(test_df['Lv'], result['crit_prediction'], color='b')\n\nplt.show()","36a0e043":"HP = np.hstack(result['hp_prediction']).astype(int)\nATK = np.hstack(result['atk_prediction']).astype(int)\nDEF = np.hstack(result['def_prediction']).astype(int)\nconv_crit = pd.DataFrame(result['crit_prediction']).applymap(lambda x: '{:.2%}'.format(x)).values\nCRIT = np.hstack(conv_crit).astype(str)\n\ndata = {'Lv': test_df['Lv'], 'Base HP': HP, 'Base ATK': ATK, 'Base DEF': DEF, 'CRIT DMG': CRIT}\n\nresult_df = pd.DataFrame(data, columns= ['Lv', 'Base HP', 'Base ATK', 'Base DEF', 'CRIT DMG'])\nresult_df.to_csv('.\/prediction.csv')\n\nresult_df","f015f602":"# Output our predicted data as csv","1f96428e":"# Visualise the data","e314046b":"# Import and split the dataframe","31e7d3c1":"# Visualise the training data","81a413d4":"# Predict the stats using our model we've trained","58d0fe00":"# Train the model","9838ced0":"# Create models for our prediction","018a9e88":"# Visualise the testing data & our prediction data"}}