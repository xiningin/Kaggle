{"cell_type":{"1ff7416b":"code","389c88e9":"code","120bc11d":"code","24c75391":"code","ba420eeb":"code","6bed8ee8":"code","07d6846f":"code","cc92a141":"code","23ac858c":"code","54ee9eeb":"code","35f023d4":"code","854f8347":"code","ae72898a":"code","499997a8":"code","42c60f77":"code","3729662c":"code","d7e83f7b":"code","f7ab41c9":"code","19944fd5":"code","4b4e4e78":"markdown","70e69293":"markdown","2a5da2a7":"markdown","1f2ff06d":"markdown","8c214b2b":"markdown","80b9da69":"markdown","af231027":"markdown","00fdcb23":"markdown","f164f092":"markdown","d352a740":"markdown"},"source":{"1ff7416b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom keras.utils.np_utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, Flatten, MaxPool2D, Dropout\nfrom keras import optimizers\nfrom keras.preprocessing.image import ImageDataGenerator","389c88e9":"train_data = pd.read_csv('..\/input\/train.csv')\ntest_data = pd.read_csv('..\/input\/test.csv')\ny_train = train_data.iloc[:,0].values\nx_train = train_data.iloc[:,1:].values\nx_test = test_data.iloc[:,:].values","120bc11d":"train_data.head(5)","24c75391":"def row_calculator(number_of_images, number_of_columns):\n    if number_of_images % number_of_columns != 0:\n        return (number_of_images \/ number_of_columns)+1\n    else:\n        return (number_of_images \/ number_of_columns)","ba420eeb":"def display_image(x, img_size, number_of_images):\n    plt.figure(figsize = (8, 7))\n    if x.shape[0] > 0:\n        n_samples = x.shape[0]\n        x = x.reshape(n_samples, img_size, img_size)\n        number_of_rows = row_calculator(number_of_images, 4)\n        for i in range(number_of_images):\n            plt.subplot(number_of_rows, 4, i+1)\n            plt.imshow(x[i])","6bed8ee8":"display_image(x_train, 28, 16)","07d6846f":"display_image(x_test, 28, 16)","cc92a141":"g = sns.countplot(y_train)","23ac858c":"x_train = x_train\/255\nx_test = x_test\/255\ny_train = to_categorical(y_train, num_classes = 10)","54ee9eeb":"x_train = x_train.reshape(-1,28,28,1)\nx_test = x_test.reshape(-1,28,28,1)","35f023d4":"print(x_train.shape)\nprint(y_train.shape)","854f8347":"recognizer = Sequential()\n\nrecognizer.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nrecognizer.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nrecognizer.add(MaxPool2D(pool_size=(2,2)))\nrecognizer.add(Dropout(0.25))\n\n\nrecognizer.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nrecognizer.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nrecognizer.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nrecognizer.add(Dropout(0.25))\n\n\nrecognizer.add(Flatten())\nrecognizer.add(Dense(units = 256, input_dim = 1024, activation = 'relu'))\nrecognizer.add(Dense(units = 256, activation = \"relu\"))\nrecognizer.add(Dense(units = 256, activation = 'relu'))\nrecognizer.add(Dropout(0.5))\nrecognizer.add(Dense(10, activation = \"softmax\"))","ae72898a":"recognizer.summary()","499997a8":"optimizer = optimizers.RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)","42c60f77":"recognizer.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","3729662c":"datagen = ImageDataGenerator(\n        featurewise_center=False, \n        samplewise_center=False,  \n        featurewise_std_normalization=False,\n        samplewise_std_normalization=False,\n        zca_whitening=False,\n        rotation_range=10,\n        zoom_range = 0.1,  \n        width_shift_range=0.1, \n        height_shift_range=0.1,\n        horizontal_flip=False,\n        vertical_flip=False)","d7e83f7b":"datagen.fit(x_train)","f7ab41c9":"recognizer.fit_generator(datagen.flow(x_train,y_train, batch_size=100), epochs = 30, steps_per_epoch=x_train.shape[0] \/\/ 100)","19944fd5":"# predict results\nresults = recognizer.predict(x_test)\n\n# select the indix with the maximum probability\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")\n\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"cnn_with_visualization.csv\",index=False)","4b4e4e78":"## Importing the necessary Libraries","70e69293":"# Digit Recognizer","2a5da2a7":"Since most of the labels have almost equal number of training examples, the entire dataset can be used","1f2ff06d":"In this kernel a Convolutional neural network is trained to recognized Handwritten digits and predict the same from the test set given","8c214b2b":"## Creating the Neural Network","80b9da69":"## Making predictions on the test data","af231027":"## Reading the training and test data","00fdcb23":"## Training the Neural Network","f164f092":"## Function to display the image","d352a740":"## Normalization and Encoding categorical variable"}}