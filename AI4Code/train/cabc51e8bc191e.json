{"cell_type":{"6843467d":"code","8ec1c12e":"code","bba0e857":"code","c1cbb71e":"code","0a2e104b":"code","ee19ead0":"code","7fea2de8":"code","8c197688":"code","cc8eb5c1":"code","796d62d2":"code","7223fc7d":"code","883a9899":"code","9fe390de":"code","f3797e13":"code","d109a36d":"code","b22c65a3":"code","1e431e70":"code","39001cba":"code","7ed006f2":"code","0439f2fa":"code","438e5771":"code","8ea6f54d":"code","8cb7f7db":"code","bd1b24e5":"code","68caec4b":"code","291bee09":"code","a9ba45df":"code","2df39a3d":"code","34db3077":"code","3d8e9726":"code","7e0aec86":"code","7ac6b0e0":"code","44fea141":"code","423913d4":"code","d99c8d95":"code","7e5c313a":"code","0b15af75":"code","ba60dff0":"code","2abb2885":"code","376045c6":"code","2de9f208":"code","e30eab5a":"code","14295d6f":"code","ac26703c":"code","b4844e4d":"code","ffc3e12c":"code","6e952f2e":"code","41723266":"code","39b2a03e":"code","4a5922d7":"code","c3bdc4d4":"code","5673499e":"code","ab8438b9":"code","e795b1b0":"code","6cb0631b":"code","83a5b996":"markdown","1d776542":"markdown","9a8652cd":"markdown","12e0b22f":"markdown","07262e7a":"markdown","fee07253":"markdown","cc205634":"markdown","0cdd1028":"markdown"},"source":{"6843467d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport sklearn\n\n","8ec1c12e":"adult = pd.read_csv(\"..\/input\/adult-pmr3508\/train_data.csv\",\nnames=[\n        \"Age\", \"Workclass\", \"fnlwgt\", \"Education\", \"EducationNum\", \"MartialStatus\",\n        \"Occupation\", \"Relationship\", \"Race\", \"Sex\", \"CapitalGain\", \"CapitalLoss\",\n        \"HoursPerWeek\", \"Country\", \"Target\"],\n        sep=r'\\s*,\\s*',\n        engine='python',\n        na_values=\"?\")","bba0e857":"numerical = [\n    \"Age\", \"fnlwgt\", \"EducationNum\", \"CapitalGain\", \"CapitalLoss\", \"HoursPerWeek\"\n]\ncategorical = [\n    \"Workclass\", \"Education\", \"MartialStatus\", \"Occupation\", \"Sex\", \"Race\", \"Country\", \"Target\",  \"Relationship\"\n]\n\nadult.shape\n","c1cbb71e":"adult.info()","0a2e104b":"adult.describe()","ee19ead0":"adult.sort_values('Age', ascending = True, inplace = True)\nadult.sort_values('fnlwgt', ascending = True, inplace = True)\nadult.sort_values('EducationNum', ascending = True, inplace = True)\nadult.sort_values('CapitalGain', ascending = True, inplace = True)\nadult.sort_values('CapitalLoss', ascending = True, inplace = True)\nadult.sort_values('HoursPerWeek', ascending = True, inplace = True)\n\n#ordenacao crescente de features numericas","7fea2de8":"adult.head()","8c197688":"adult[\"Country\"].value_counts()","cc8eb5c1":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\n#adult['Target'] = le.fit_transform(adult['Target'])\n\n#transforma classe categorica Target em classe numerica","796d62d2":"adult['Target']","7223fc7d":"duplicados = adult[adult.duplicated(keep='first')]\nprint(duplicados)\n\nadult.drop_duplicates(keep='first', inplace=True) \n\n#limpeza de duplicatas p\/ nao afetar a distribuicao dos dados na analise, mantendo-se apenas o primeiro","883a9899":"adult['Target'] = adult['Target'].replace([2], np.nan) #outlier da classe Target","9fe390de":"adult['Age'].hist()\nplt.show()","f3797e13":"sns.displot(adult, x=\"Age\", y=\"Target\", bins=2)","d109a36d":"sns.catplot(x=\"EducationNum\", y=\"Age\", data=adult);","b22c65a3":"# set a grey background (use sns.set_theme() if seaborn version 0.11.0 or above) \nsns.set(style=\"darkgrid\")\n\nfig, axs = plt.subplots(2, 2, figsize=(14, 14))\n\nsns.histplot(data=adult, x=\"Age\", y = \"Target\", kde=True, color=\"skyblue\", ax=axs[0, 0])\nsns.histplot(data=adult, x=\"EducationNum\", y= \"Target\", kde=True, color=\"olive\", ax=axs[0, 1])\nsns.histplot(data=adult, x=\"CapitalLoss\", y= \"Target\", kde=True, color=\"gold\", ax=axs[1, 0])\nsns.histplot(data=adult, x=\"CapitalGain\", y= \"Target\", kde=True, color=\"teal\", ax=axs[1, 1])\n\nplt.show()","1e431e70":"# set a grey background (use sns.set_theme() if seaborn version 0.11.0 or above) \nsns.set(style=\"darkgrid\")\n\nfig, axs = plt.subplots(2, 2, figsize=(10, 10))\n\nsns.histplot(data=adult, y=\"Race\", x=\"Target\", kde=True, color=\"skyblue\", ax=axs[0, 0])\nsns.histplot(data=adult, y=\"Sex\", x=\"Target\",kde=True, color=\"olive\", ax=axs[0, 1])\nsns.histplot(data=adult, y=\"Country\",x=\"Target\", kde=True, color=\"gold\", ax=axs[1, 0])\nsns.histplot(data=adult, y=\"MartialStatus\", x=\"Target\", kde=True, color=\"teal\", ax=axs[1, 1])\n\nplt.show()","39001cba":"# set a grey background (use sns.set_theme() if seaborn version 0.11.0 or above) \nsns.set(style=\"darkgrid\")\n\nfig, axs = plt.subplots(2, 2, figsize=(10, 10))\n\nsns.histplot(data=adult, y=\"Education\", x=\"Target\", kde=True, color=\"skyblue\", ax=axs[0, 0])\nsns.histplot(data=adult, y=\"Workclass\", x=\"Target\",kde=True, color=\"olive\", ax=axs[0, 1])\nsns.histplot(data=adult, y=\"Occupation\",x=\"Target\", kde=True, color=\"gold\", ax=axs[1, 0])\nsns.histplot(data=adult, y=\"Country\", x=\"Target\", kde=True, color=\"teal\", ax=axs[1, 1])\n\nplt.show()","7ed006f2":"sns.histplot(data=adult, y=\"Workclass\", x=\"Target\", color=\"teal\")","0439f2fa":"#Conversao de dados tipo 'object' em 'int' p\/ variaveis categoricas e 'category' p\/ variaveis numericas\n\nnumerical_col = [\n    \"Age\", \"fnlwgt\", \"EducationNum\", \"HoursPerWeek\", 'CapitalGain', 'CapitalLoss'\n]\ncategorical_col = [\n    \"Workclass\", \"Education\", \"MartialStatus\", \"Occupation\", \"Sex\", \"Race\", \"Country\",  \"Relationship\", \n]\n\n\n\ndef to_type_numeric(DataFrame, columns, type):\n    for col in columns:\n        adult[col] = pd.to_numeric(adult[col],errors = 'coerce')\n        \ndef to_type_categoric(DataFrame, columns, type):\n    for col in columns:\n        DataFrame[col] = DataFrame[col].astype(type)\n \n \nto_type_numeric(adult, numerical_col, 'float')\nto_type_categoric(adult, categorical_col, 'category')\n\nprint(\"Colunas num\u00e9ricas: \", numerical_col)\nprint(\"Colunas categ\u00f3ricas: \", categorical_col)\n\n\nadult.info()\n","438e5771":"def exclui_outliers(DataFrame, col_name):\n  intervalo = 2.7*DataFrame[col_name].std()\n  media = DataFrame[col_name].mean()\n  DataFrame.loc[adult[col_name] < (media - intervalo), col_name] = np.nan\n  DataFrame.loc[adult[col_name] > (media + intervalo), col_name] = np.nan\n\n#remocao de dados fora do intervalo de confianca ","8ea6f54d":"for col in numerical_col:\n  exclui_outliers(adult, col)","8cb7f7db":"adultL = adult\n\nfor column in [\"Age\",\"EducationNum\",\"CapitalGain\", \"CapitalLoss\", \n               \"HoursPerWeek\", \"Sex\", \"Workclass\", \"Race\", \"Relationship\", \"Occupation\", 'MartialStatus', 'Target']:\n    adultL[column] = adultL[column].fillna(adultL[column].mode()[0])","bd1b24e5":"adultL.isnull().sum()","68caec4b":"adultL.head()","291bee09":"Y_train = adultL.pop('Target')\n\nX_train = adultL","a9ba45df":"Y_train","2df39a3d":"X_train['Sex'] = le.fit_transform(X_train['Sex'])\nX_train['Workclass'] = le.fit_transform(X_train['Workclass'])\nX_train['Race'] = le.fit_transform(X_train['Race'])\nX_train['Relationship'] = le.fit_transform(X_train['Relationship'])\nX_train['Occupation'] = le.fit_transform(X_train['Occupation'])\nX_train['MartialStatus'] = le.fit_transform(X_train['MartialStatus'])\n\n\n#Passa variaveis categoricas p\/ numericas","34db3077":"X_train.head()","3d8e9726":"from sklearn.neighbors import KNeighborsClassifier\n\n# Instancia nosso classificador\nknn = KNeighborsClassifier(n_neighbors=30)","7e0aec86":"X_train","7ac6b0e0":"X_train = X_train[[\"Age\",\"EducationNum\",\"CapitalGain\", \"CapitalLoss\", \"HoursPerWeek\", \"Sex\", \"Workclass\", \n                   \"Race\", \"Relationship\", \"Occupation\", 'MartialStatus']]\n\n#Variaveis selecionadas p\/ modelagem","44fea141":"from sklearn.model_selection import cross_val_score\n\nscores = cross_val_score(knn, X_train, Y_train, cv=10, scoring='accuracy')\nscorem = cross_val_score(knn, X_train, Y_train, cv=10, scoring='accuracy').mean()\n\nprint(scores)\nprint(scorem)","423913d4":"testAdult = pd.read_csv(\"..\/input\/adult-pmr3508\/test_data.csv\",\n        names=[\n        \"Age\", \"Workclass\", \"fnlwgt\", \"Education\", \"EducationNum\", \"MartialStatus\",\n        \"Occupation\", \"Relationship\", \"Race\", \"Sex\", \"CapitalGain\", \"CapitalLoss\",\n        \"HoursPerWeek\", \"Country\", \"Target\"],\n        sep=r'\\s*,\\s*',\n        engine='python',\n        na_values=\"?\")\n","d99c8d95":"testAdult['CapitalGain'] = testAdult['CapitalGain'].fillna(testAdult['CapitalGain'].mode()[0])\ntestAdult['CapitalGain'] = le.fit_transform(testAdult['CapitalGain'])\ntestAdult['CapitalGain'] = pd.to_numeric(testAdult['CapitalGain'],errors = 'coerce')\n\ntestAdult['EducationNum'] = testAdult['EducationNum'].fillna(testAdult['EducationNum'].mode()[0])\ntestAdult['EducationNum'] = le.fit_transform(testAdult['EducationNum'])\ntestAdult['EducationNum'] = pd.to_numeric(testAdult['EducationNum'],errors = 'coerce')\n\ntestAdult[\"Relationship\"] = testAdult[\"Relationship\"].fillna(testAdult[\"Relationship\"].mode()[0])\ntestAdult[\"Relationship\"] = le.fit_transform(testAdult[\"Relationship\"])\ntestAdult[\"Relationship\"] = pd.to_numeric(testAdult[\"Relationship\"],errors = 'coerce')","7e5c313a":"numerical_test = [\n    \"Age\",\"HoursPerWeek\", \"CapitalLoss\"\n]\ncategorical_test = [\n    \"Workclass\", \"MartialStatus\", \"Occupation\", \"Sex\", \"Race\"\n]\n\nprint(\"Colunas num\u00e9ricas: \", numerical_test)\nprint(\"Colunas categ\u00f3ricas: \", categorical_test)","0b15af75":"def to_type_numeric(DataFrame, columns, type):\n    for col in columns:\n        testAdult[col] = pd.to_numeric(testAdult[col],errors = 'coerce')\n        \ndef to_type_categoric(DataFrame, columns, type):\n    for col in columns:\n        DataFrame[col] = DataFrame[col].astype(type)\n \n\nto_type_numeric(testAdult, numerical_test, 'float')\nto_type_categoric(testAdult, categorical_test, 'category')\n","ba60dff0":"testAdult.isnull().sum()","2abb2885":"def exclui_outliers(DataFrame, col_name):\n  intervalo = 2.7*DataFrame[col_name].std()\n  media = DataFrame[col_name].mean()\n  DataFrame.loc[testAdult[col_name] < (media - intervalo), col_name] = np.nan\n  DataFrame.loc[testAdult[col_name] > (media + intervalo), col_name] = np.nan\n\n#remocao de dados fora do intervalo de confianca\n\nfor col in numerical_test:\n  exclui_outliers(testAdult, col)\n","376045c6":"testAdult.isnull().sum()","2de9f208":"testAdultL = testAdult\n\nfor column in [\"Age\",\"EducationNum\",\"CapitalGain\", \"CapitalLoss\", \n               \"HoursPerWeek\", \"Sex\", \"Workclass\", \"Race\", \"Relationship\", \"Occupation\", 'MartialStatus']:\n    testAdultL[column] = testAdultL[column].fillna(testAdultL[column].mode())","e30eab5a":"testAdult.isnull().sum()","14295d6f":"for column in [\"EducationNum\",\"CapitalGain\", \"CapitalLoss\", \"HoursPerWeek\"]:\n    testAdultL[column] = testAdultL[column].fillna(testAdultL[column].mean())","ac26703c":"testAdultL.isnull().sum()","b4844e4d":"X_test = testAdultL.drop(['fnlwgt', 'Country', 'Education'], axis=1)\n","ffc3e12c":"X_test['Sex'] = le.fit_transform(X_test['Sex'])\nX_test['Workclass'] = le.fit_transform(X_test['Workclass'])\nX_test['Race'] = le.fit_transform(X_test['Race'])\nX_test['Relationship'] = le.fit_transform(X_test['Relationship'])\nX_test['Occupation'] = le.fit_transform(X_test['Occupation'])\nX_test['MartialStatus'] = le.fit_transform(X_test['MartialStatus'])","6e952f2e":"X_test = X_test[[\"Age\", \"HoursPerWeek\", \"EducationNum\", \"Workclass\", \"Occupation\", \"Sex\", \n                 \"Race\", \"Relationship\",\"CapitalGain\", \"CapitalLoss\", 'MartialStatus']]","41723266":"knn.fit(X_train,Y_train)","39b2a03e":"prediction = knn.predict(X_test)","4a5922d7":"prediction","c3bdc4d4":"#from sklearn.metrics import precision_score, \\\n    #recall_score, confusion_matrix, classification_report, \\\n #f1_score\n\n#print('F1 score:', f1_score(Y_test, prediction,average='weighted'))\n#print('Recall:', recall_score(Y_test, prediction,average='weighted'))\n#print('Precision:', precision_score(Y_test, prediction,average='weighted'))\n","5673499e":"prediction","ab8438b9":"solution = pd.DataFrame({'Id': testAdult.index, 'income': prediction})\nsolution = solution.drop(16280)\n# you could use any filename. We choose submission here\nsolution.to_csv('submission.csv', index=False)","e795b1b0":"solution.info()","6cb0631b":"solution.head()","83a5b996":"# ATRIBUTOS CATEG\u00d3RICOS","1d776542":"Os dados de Capital Loss e Capital Gain s\u00e3o mal distribuidos entre as rendas, inviabilizando an\u00e1lise direta","9a8652cd":"# CONVERSOES DE CATEGORIAS e TRATAMENTO DE OUTLIERS","12e0b22f":"# ATRIBUTOS NUM\u00c9RICOS","07262e7a":"# EXPORTACAO","fee07253":"# CLASSIFICADOR","cc205634":"As *workclass* \"Never-worked\" e \"Without-pay\" aparecem em apenas uma das classes (<=)","0cdd1028":"# DADOS FALTANTES e LABEL ENCODING"}}