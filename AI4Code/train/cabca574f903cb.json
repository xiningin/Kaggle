{"cell_type":{"9e1d7105":"code","3f8cb994":"code","98b9f0e9":"code","0d5d7979":"code","eddf1657":"code","34aa15af":"code","08e73fca":"code","54cad5b7":"code","cbbffaa5":"code","e066378b":"code","4d875596":"code","704e17cc":"code","289b1f58":"code","3b816504":"code","a503eafe":"code","cf0c069f":"code","476a1158":"code","3819f2d0":"code","cc60a41b":"code","0611bc05":"code","634b15a1":"code","02718887":"code","ad78ae6c":"code","53a37549":"code","50d28ac8":"code","6e454612":"code","32094130":"code","cff5afd1":"code","243e72e8":"markdown","bf50e20a":"markdown","d4f378b8":"markdown","b8e57ba6":"markdown","bcb79686":"markdown","125afa83":"markdown"},"source":{"9e1d7105":"!conda install '\/kaggle\/input\/pydicom-conda-helper\/libjpeg-turbo-2.1.0-h7f98852_0.tar.bz2' -c conda-forge -y\n!conda install '\/kaggle\/input\/pydicom-conda-helper\/libgcc-ng-9.3.0-h2828fa1_19.tar.bz2' -c conda-forge -y\n!conda install '\/kaggle\/input\/pydicom-conda-helper\/gdcm-2.8.9-py37h500ead1_1.tar.bz2' -c conda-forge -y\n!conda install '\/kaggle\/input\/pydicom-conda-helper\/conda-4.10.1-py37h89c1867_0.tar.bz2' -c conda-forge -y\n!conda install '\/kaggle\/input\/pydicom-conda-helper\/certifi-2020.12.5-py37h89c1867_1.tar.bz2' -c conda-forge -y\n!conda install '\/kaggle\/input\/pydicom-conda-helper\/openssl-1.1.1k-h7f98852_0.tar.bz2' -c conda-forge -y","3f8cb994":"import os\n\nfrom PIL import Image\nimport pandas as pd\nfrom tqdm.auto import tqdm","98b9f0e9":"df = pd.read_csv('..\/input\/siim-covid19-detection\/sample_submission.csv')\n#if df.shape[0] == 2477:\n#    fast_sub = True\n#    fast_df = pd.DataFrame(([['00086460a852_study', 'negative 1 0 0 1 1'], \n#                         ['000c9c05fd14_study', 'negative 1 0 0 1 1'], \n#                         ['65761e66de9f_image', 'none 1 0 0 1 1'], \n#                         ['51759b5579bc_image', 'none 1 0 0 1 1']]), \n#                       columns=['id', 'PredictionString'])\n#else:\nfast_sub = False","0d5d7979":"import numpy as np\nimport pydicom\nfrom pydicom.pixel_data_handlers.util import apply_voi_lut\n\ndef read_xray(path, voi_lut = True, fix_monochrome = True):\n    # Original from: https:\/\/www.kaggle.com\/raddar\/convert-dicom-to-np-array-the-correct-way\n    dicom = pydicom.read_file(path)\n    \n    # VOI LUT (if available by DICOM device) is used to transform raw DICOM data to \n    # \"human-friendly\" view\n    if voi_lut:\n        data = apply_voi_lut(dicom.pixel_array, dicom)\n    else:\n        data = dicom.pixel_array\n               \n    # depending on this value, X-ray may look inverted - fix that:\n    if fix_monochrome and dicom.PhotometricInterpretation == \"MONOCHROME1\":\n        data = np.amax(data) - data\n        \n    data = data - np.min(data)\n    data = data \/ np.max(data)\n    data = (data * 255).astype(np.uint8)\n        \n    return data","eddf1657":"def resize(array, size, keep_ratio=False, resample=Image.LANCZOS):\n    # Original from: https:\/\/www.kaggle.com\/xhlulu\/vinbigdata-process-and-resize-to-image\n    im = Image.fromarray(array)\n    \n    if keep_ratio:\n        im.thumbnail((size, size), resample)\n    else:\n        im = im.resize((size, size), resample)\n    \n    return im","34aa15af":"\nsplit = 'test'\n#save_dir = f'\/kaggle\/tmp\/{split}\/'\n#\n#os.makedirs(save_dir, exist_ok=True)\n#\n#save_dir = f'\/kaggle\/tmp\/{split}\/study\/'\n#os.makedirs(save_dir, exist_ok=True)\n#if fast_sub:\n#    xray = read_xray('..\/input\/siim-covid19-detection\/train\/00086460a852\/9e8302230c91\/65761e66de9f.dcm')\n#    im = resize(xray, size=600)  \n#    study = '00086460a852' + '_study.png'\n#    im.save(os.path.join(save_dir, study))\n#    xray = read_xray('..\/input\/siim-covid19-detection\/train\/000c9c05fd14\/e555410bd2cd\/51759b5579bc.dcm')\n#    im = resize(xray, size=600)  \n#    study = '000c9c05fd14' + '_study.png'\n#    im.save(os.path.join(save_dir, study))\n#else:   \n#    for dirname, _, filenames in tqdm(os.walk(f'..\/input\/siim-covid19-detection\/{split}')):\n#        for file in filenames:\n#            # set keep_ratio=True to have original aspect ratio\n#            xray = read_xray(os.path.join(dirname, file))\n#            im = resize(xray, size=600)  \n#            study = dirname.split('\/')[-2] + '_study.png'\n#            im.save(os.path.join(save_dir, study))\n#","08e73fca":"image_id = []\ndim0 = []\ndim1 = []\nsplits = []\nsave_dir = f'\/kaggle\/tmp\/{split}\/image\/'\nos.makedirs(save_dir, exist_ok=True)\nif fast_sub:\n    xray = read_xray('..\/input\/siim-covid19-detection\/train\/00086460a852\/9e8302230c91\/65761e66de9f.dcm')\n    im = resize(xray, size=512)  \n    im.save(os.path.join(save_dir,'65761e66de9f_image.png'))\n    image_id.append('65761e66de9f.dcm'.replace('.dcm', ''))\n    dim0.append(xray.shape[0])\n    dim1.append(xray.shape[1])\n    splits.append(split)\n    xray = read_xray('..\/input\/siim-covid19-detection\/train\/000c9c05fd14\/e555410bd2cd\/51759b5579bc.dcm')\n    im = resize(xray, size=512)  \n    im.save(os.path.join(save_dir, '51759b5579bc_image.png'))\n    image_id.append('51759b5579bc.dcm'.replace('.dcm', ''))\n    dim0.append(xray.shape[0])\n    dim1.append(xray.shape[1])\n    splits.append(split)\nelse:\n    for dirname, _, filenames in tqdm(os.walk(f'..\/input\/siim-covid19-detection\/{split}')):\n        for file in filenames:\n            # set keep_ratio=True to have original aspect ratio\n            xray = read_xray(os.path.join(dirname, file))\n            im = resize(xray, size=512)  \n            im.save(os.path.join(save_dir, file.replace('.dcm', '_image.png')))\n            image_id.append(file.replace('.dcm', ''))\n            dim0.append(xray.shape[0])\n            dim1.append(xray.shape[1])\n            splits.append(split)\nmeta = pd.DataFrame.from_dict({'image_id': image_id, 'dim0': dim0, 'dim1': dim1, 'split': splits})","54cad5b7":"meta","cbbffaa5":"import numpy as np \nimport pandas as pd\n#if fast_sub:\n#    df = fast_df.copy()\n#else:\ndf = pd.read_csv('..\/input\/siim-covid19-detection\/sample_submission.csv')\n#id_laststr_list  = []\n#for i in range(df.shape[0]):\n#    id_laststr_list.append(df.loc[i,'id'][-1])\n#df['id_last_str'] = id_laststr_list#\n\n#study_len = df[df['id_last_str'] == 'y'].shape[0]","e066378b":"study_len = sum(df.id.str.contains(\"study\"))","4d875596":"#!pip install \/kaggle\/input\/kerasapplications -q\n#!pip install \/kaggle\/input\/efficientnet-keras-source-code\/ -q --no-deps\n#\n#import os\n#\n#import efficientnet.tfkeras as efn\n#import numpy as np\n#import pandas as pd\n#import tensorflow as tf\n#\n#def auto_select_accelerator():\n#    try:\n#        tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n#        tf.config.experimental_connect_to_cluster(tpu)\n#        tf.tpu.experimental.initialize_tpu_system(tpu)\n#        strategy = tf.distribute.experimental.TPUStrategy(tpu)\n#        print(\"Running on TPU:\", tpu.master())\n#    except ValueError:\n#        strategy = tf.distribute.get_strategy()\n#    print(f\"Running on {strategy.num_replicas_in_sync} replicas\")\n#\n#    return strategy\n#\n#\n#def build_decoder(with_labels=True, target_size=(300, 300), ext='jpg'):\n#    def decode(path):\n#        file_bytes = tf.io.read_file(path)\n#        if ext == 'png':\n#            img = tf.image.decode_png(file_bytes, channels=3)\n#        elif ext in ['jpg', 'jpeg']:\n#            img = tf.image.decode_jpeg(file_bytes, channels=3)\n#        else:\n#            raise ValueError(\"Image extension not supported\")\n#\n#        img = tf.cast(img, tf.float32) \/ 255.0\n#        img = tf.image.resize(img, target_size)\n#\n#        return img\n#\n#    def decode_with_labels(path, label):\n#        return decode(path), label\n#\n#    return decode_with_labels if with_labels else decode\n#\n#\n#def build_augmenter(with_labels=True):\n#    def augment(img):\n#        img = tf.image.random_flip_left_right(img)\n#        img = tf.image.random_flip_up_down(img)\n#        return img\n#\n#    def augment_with_labels(img, label):\n#        return augment(img), label\n#\n#    return augment_with_labels if with_labels else augment\n#\n#\n#def build_dataset(paths, labels=None, bsize=32, cache=True,\n#                  decode_fn=None, augment_fn=None,\n#                  augment=True, repeat=True, shuffle=1024, \n#                  cache_dir=\"\"):\n#    if cache_dir != \"\" and cache is True:\n#        os.makedirs(cache_dir, exist_ok=True)\n#\n#    if decode_fn is None:\n#        decode_fn = build_decoder(labels is not None)\n#\n#    if augment_fn is None:\n#        augment_fn = build_augmenter(labels is not None)\n#\n#    AUTO = tf.data.experimental.AUTOTUNE\n#    slices = paths if labels is None else (paths, labels)\n#\n#    dset = tf.data.Dataset.from_tensor_slices(slices)\n#    dset = dset.map(decode_fn, num_parallel_calls=AUTO)\n#    dset = dset.cache(cache_dir) if cache else dset\n#    dset = dset.map(augment_fn, num_parallel_calls=AUTO) if augment else dset\n#    dset = dset.repeat() if repeat else dset\n#    dset = dset.shuffle(shuffle) if shuffle else dset\n#    dset = dset.batch(bsize).prefetch(AUTO)\n#\n#    return dset\n#\n##COMPETITION_NAME = \"siim-cov19-test-img512-study-600\"\n#strategy = auto_select_accelerator()\n#BATCH_SIZE = strategy.num_replicas_in_sync * 16\n#\n#IMSIZE = (224, 240, 260, 300, 380, 456, 528, 600, 512)\n#\n##load_dir = f\"\/kaggle\/input\/{COMPETITION_NAME}\/\"\n#if fast_sub:\n#    sub_df = fast_df.copy()\n#else:\n#    sub_df = pd.read_csv('..\/input\/siim-covid19-detection\/sample_submission.csv')\n#sub_df = sub_df[:study_len]\n#test_paths = f'\/kaggle\/tmp\/{split}\/study\/' + sub_df['id'] +'.png'\n#\n#sub_df['negative'] = 0\n#sub_df['typical'] = 0\n#sub_df['indeterminate'] = 0\n#sub_df['atypical'] = 0\n#\n#\n#label_cols = sub_df.columns[2:]\n#\n#test_decoder = build_decoder(with_labels=False, target_size=(IMSIZE[7], IMSIZE[7]), ext='png')\n#dtest = build_dataset(\n#    test_paths, bsize=BATCH_SIZE, repeat=False, \n#    shuffle=False, augment=False, cache=False,\n#    decode_fn=test_decoder\n#)\n#\n#with strategy.scope():\n#    \n#    models = []\n#    \n#    models0 = tf.keras.models.load_model(\n#        '..\/input\/siim-covid19-efnb7-train-study\/model0.h5'\n#    )\n#    models1 = tf.keras.models.load_model(\n#        '..\/input\/siim-covid19-efnb7-train-study\/model1.h5'\n#    )\n#    models2 = tf.keras.models.load_model(\n#        '..\/input\/siim-covid19-efnb7-train-study\/model2.h5'\n#    )\n#    models3 = tf.keras.models.load_model(\n#        '..\/input\/siim-covid19-efnb7-train-study\/model3.h5'\n#    )\n#    models4 = tf.keras.models.load_model(\n#        '..\/input\/siim-covid19-efnb7-train-study\/model4.h5'\n#    )\n#    \n#    models.append(models0)\n#    models.append(models1)\n#    models.append(models2)\n#    models.append(models3)\n#    models.append(models4)\n#\n#    \n#    \n#    \n#sub_df[label_cols] = sum([model.predict(dtest, verbose=1) for model in models]) \/ len(models)","704e17cc":"#sub_df.columns = ['id', 'PredictionString1', 'negative', 'typical', 'indeterminate', 'atypical']\n#df = pd.merge(df, sub_df, on = 'id', how = 'left')","289b1f58":"#for i in range(study_len):\n#    negative = df.loc[i,'negative']\n#    typical = df.loc[i,'typical']\n#    indeterminate = df.loc[i,'indeterminate']\n#    atypical = df.loc[i,'atypical']\n#    df.loc[i, 'PredictionString'] = f'negative {negative} 0 0 1 1 typical {typical} 0 0 1 1 indeterminate {indeterminate} 0 0 1 1 atypical {atypical} 0 0 1 1'","3b816504":"#df_study = df[['id', 'PredictionString']]\n\n# df.to_csv('submission.csv',index=False)\n# df","a503eafe":"#if fast_sub:\n#    sub_df = fast_df.copy()\n#else:\n#    sub_df = pd.read_csv('..\/input\/siim-covid19-detection\/sample_submission.csv')\n#sub_df = sub_df[study_len:]\n#test_paths = f'\/kaggle\/tmp\/{split}\/image\/' + sub_df['id'] +'.png'\n#sub_df['none'] = 0\n#\n#label_cols = sub_df.columns[2]\n#\n#test_decoder = build_decoder(with_labels=False, target_size=(IMSIZE[8], IMSIZE[8]), ext='png')\n#dtest = build_dataset(\n#    test_paths, bsize=BATCH_SIZE, repeat=False, \n#    shuffle=False, augment=False, cache=False,\n#    decode_fn=test_decoder\n#)\n#\n#with strategy.scope():\n#    \n#    models = []\n#    \n#    models0 = tf.keras.models.load_model(\n#        '..\/input\/siim-covid19-efnb7-train-fold0-5-2class\/model0.h5'\n#    )\n#    models1 = tf.keras.models.load_model(\n#        '..\/input\/siim-covid19-efnb7-train-fold0-5-2class\/model1.h5'\n#    )\n#    models2 = tf.keras.models.load_model(\n#        '..\/input\/siim-covid19-efnb7-train-fold0-5-2class\/model2.h5'\n#    )\n#    models3 = tf.keras.models.load_model(\n#        '..\/input\/siim-covid19-efnb7-train-fold0-5-2class\/model3.h5'\n#    )\n#    models4 = tf.keras.models.load_model(\n#        '..\/input\/siim-covid19-efnb7-train-fold0-5-2class\/model4.h5'\n#    )\n#    \n#    models.append(models0)\n#    models.append(models1)\n#    models.append(models2)\n#    models.append(models3)\n#    models.append(models4)\n#\n#    \n#    \n#    \n#sub_df[label_cols] = sum([model.predict(dtest, verbose=1) for model in models]) \/ len(models)\n#df_2class = sub_df.reset_index(drop=True)","cf0c069f":"#del models\n#del models0, models1, models2, models3, models4","476a1158":"#from numba import cuda\n#import torch\n#cuda.select_device(0)\n#cuda.close()\n#cuda.select_device(0)","3819f2d0":"import numpy as np, pandas as pd\nfrom glob import glob\nimport shutil, os\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import GroupKFold\nfrom tqdm.notebook import tqdm\nimport seaborn as sns\nimport torch","cc60a41b":"meta = meta[meta['split'] == 'test']\nif fast_sub:\n    test_df = fast_df.copy()\nelse:\n    test_df = pd.read_csv('..\/input\/siim-covid19-detection\/sample_submission.csv')\ntest_df = df[study_len:].reset_index(drop=True) \nmeta['image_id'] = meta['image_id'] + '_image'\nmeta.columns = ['id', 'dim0', 'dim1', 'split']\ntest_df = pd.merge(test_df, meta, on = 'id', how = 'left')\n","0611bc05":"dim = 512 #1024, 256, 'original'\ntest_dir = f'\/kaggle\/tmp\/{split}\/image'\nweights_dir = '\/kaggle\/input\/siim-cov19-yolov5-train\/yolov5\/runs\/train\/exp\/weights\/best.pt'\n\nshutil.copytree('\/kaggle\/input\/yolov5-official-v31-dataset\/yolov5', '\/kaggle\/working\/yolov5')\nos.chdir('\/kaggle\/working\/yolov5') # install dependencies\n\nimport torch\n#from IPython.display import Image, clear_output  # to display images\n\n#clear_output()\n#print('Setup complete. Using torch %s %s' % (torch.__version__, torch.cuda.get_device_properties(0) if torch.cuda.is_available() else 'CPU'))\n\n\n!python detect.py --weights $weights_dir\\\n--img 512\\\n--conf 0.001\\\n--iou 0.5\\\n--source $test_dir\\\n--save-txt --save-conf --exist-ok\n","634b15a1":"def yolo2voc(image_height, image_width, bboxes):\n    \"\"\"\n    yolo => [xmid, ymid, w, h] (normalized)\n    voc  => [x1, y1, x2, y1]\n\n    \"\"\" \n    bboxes = bboxes.copy().astype(float) # otherwise all value will be 0 as voc_pascal dtype is np.int\n\n    bboxes[..., [0, 2]] = bboxes[..., [0, 2]]* image_width\n    bboxes[..., [1, 3]] = bboxes[..., [1, 3]]* image_height\n\n    bboxes[..., [0, 1]] = bboxes[..., [0, 1]] - bboxes[..., [2, 3]]\/2\n    bboxes[..., [2, 3]] = bboxes[..., [0, 1]] + bboxes[..., [2, 3]]\n\n    return bboxes\nimage_ids = []\nPredictionStrings = []\n\nfor file_path in tqdm(glob('runs\/detect\/exp\/labels\/*.txt')):\n    image_id = file_path.split('\/')[-1].split('.')[0]\n    w, h = test_df.loc[test_df.id==image_id,['dim1', 'dim0']].values[0]\n    f = open(file_path, 'r')\n    data = np.array(f.read().replace('\\n', ' ').strip().split(' ')).astype(np.float32).reshape(-1, 6)\n    data = data[:, [0, 5, 1, 2, 3, 4]]\n    bboxes = list(np.round(np.concatenate((data[:, :2], np.round(yolo2voc(h, w, data[:, 2:]))), axis =1).reshape(-1), 12).astype(str))\n    for idx in range(len(bboxes)):\n        bboxes[idx] = str(int(float(bboxes[idx]))) if idx%6!=1 else bboxes[idx]\n    image_ids.append(image_id)\n    PredictionStrings.append(' '.join(bboxes))\n\n\npred_df = pd.DataFrame({'id':image_ids,\n                        'PredictionString':PredictionStrings})","02718887":"#pred_df","ad78ae6c":"#sub_df","53a37549":"#df_study","50d28ac8":"#test_df","6e454612":"df_study = pd.read_csv('\/kaggle\/input\/siim-covid19-detection\/sample_submission.csv')","32094130":"test_df = test_df.drop(['PredictionString'], axis=1)\nsub_df = pd.merge(test_df, pred_df, on = 'id', how = 'left').fillna(\"none 1 0 0 1 1\")\nsub_df = sub_df[['id', 'PredictionString']]\nfor i in range(sub_df.shape[0]):\n    if sub_df.loc[i,'PredictionString'] == \"none 1 0 0 1 1\":\n        continue\n    sub_df_split = sub_df.loc[i,'PredictionString'].split()\n    sub_df_list = []\n    for j in range(int(len(sub_df_split) \/ 6)):\n        sub_df_list.append('opacity')\n        sub_df_list.append(sub_df_split[6 * j + 1])\n        sub_df_list.append(sub_df_split[6 * j + 2])\n        sub_df_list.append(sub_df_split[6 * j + 3])\n        sub_df_list.append(sub_df_split[6 * j + 4])\n        sub_df_list.append(sub_df_split[6 * j + 5])\n    sub_df.loc[i,'PredictionString'] = ' '.join(sub_df_list)\n#sub_df['none'] = df_2class['none'] \n#for i in range(sub_df.shape[0]):\n    #if sub_df.loc[i,'PredictionString'] != 'none 1 0 0 1 1':\n    #    sub_df.loc[i,'PredictionString'] = sub_df.loc[i,'PredictionString'] #+ ' none ' + str(sub_df.loc[i,'none']) + ' 0 0 1 1'\nsub_df = sub_df[['id', 'PredictionString']]   \ndf_study = df_study[:study_len]\ndf_study = df_study.append(sub_df).reset_index(drop=True)\n\ndf_study = df_study.replace(\"negative 1 0 0 1 1\",\"\")\ndf_study = df_study.replace(\"none 1 0 0 1 1\",\"\")","cff5afd1":"df_study.to_csv('\/kaggle\/working\/submission.csv',index = False)  \nshutil.rmtree('\/kaggle\/working\/yolov5')","243e72e8":"# study predict","bf50e20a":"# yolov5 predict","d4f378b8":"thanks to https:\/\/www.kaggle.com\/xhlulu\/siim-covid-19-convert-to-jpg-256px  \nthanks to https:\/\/www.kaggle.com\/awsaf49\/vinbigdata-cxr-ad-yolov5-14-class-infer  \ntrain_study: https:\/\/www.kaggle.com\/h053473666\/siim-covid19-efnb7-train-study  \ntrain_image: https:\/\/www.kaggle.com\/h053473666\/siim-cov19-yolov5-train  \ntrain_2class: https:\/\/www.kaggle.com\/h053473666\/siim-covid19-efnb7-train-fold0-5-2class  \n  \nversion1:Original hyperparameters (yolov5)  \nversion4:New hyperparameters (yolov5)\n","b8e57ba6":"# 2 class","bcb79686":"# study string","125afa83":"# .dcm to .png"}}