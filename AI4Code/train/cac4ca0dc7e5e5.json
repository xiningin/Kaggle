{"cell_type":{"814f9eae":"code","688649b4":"code","6c5cc617":"code","f0538a4a":"code","92d5f328":"code","1e092ed1":"code","b406f10c":"code","7142a1aa":"code","8ffaedca":"code","fe691ccf":"code","3228ed75":"code","d8020f3c":"code","0afbbeaf":"code","eddb0901":"code","71df8407":"code","9b0e38cb":"code","b0edb2d8":"code","cd5c46e7":"code","fa09c3bb":"code","5913a2bc":"code","e87f14aa":"markdown","a4d66ba1":"markdown","37a99fee":"markdown","751c220b":"markdown","050f687d":"markdown","c0507d04":"markdown","a8919471":"markdown","4b1d41d9":"markdown","f413cb31":"markdown","24ef672c":"markdown","d86d6894":"markdown","8cd6ac25":"markdown","1797a97c":"markdown","c0b5eb8f":"markdown","714f0f62":"markdown","e266f0c9":"markdown"},"source":{"814f9eae":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom sklearn.model_selection import train_test_split\nimport pickle\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import *\n\nimport zipfile ","688649b4":"working_dir = '..\/input\/histopathologic-cancer-detection'\nos.listdir(working_dir)","6c5cc617":"print('Number of images in train set',len(os.listdir('..\/input\/histopathologic-cancer-detection\/train')))\nprint('Number of images in test set',len(os.listdir('..\/input\/histopathologic-cancer-detection\/test')))","f0538a4a":"# Load the training data into a DataFrame named 'train'.\ntrain = pd.read_csv(f'..\/input\/histopathologic-cancer-detection\/train_labels.csv',dtype = 'str')\n\n# Print the shape of the resulting DataFrame.\nprint('Training set size', train.shape)","92d5f328":"# Display the first few rows of the dataframe.\ntrain.head(10) ","1e092ed1":"#The id in the csv file does not have .tif extension, let's add it.\ntrain['id'] = train['id'].apply(lambda x:f'{x}.tif')\ntrain.head()","b406f10c":"#Let's check the class distribution\n#train['label'].value_counts()\ntrain.label.value_counts() ","7142a1aa":"#Let's check the class distribution in proportion\n#y_train = train.label\nround((train.label.value_counts() \/ len(train)).to_frame()*100,2)","8ffaedca":"sample_size = 160000\ntrain = train.sample(sample_size, random_state=1)","fe691ccf":"#display 16 images\n\nsample = train.sample(n=16).reset_index()\nplt.figure(figsize=(6,6)) # specifying the overall grid size\n\nfor i, row in sample.iterrows():  \n    img = mpimg.imread(f'..\/input\/histopathologic-cancer-detection\/train\/{row.id}')\n    label = row.label\n    \n    plt.subplot(4,4,i+1)    # the number of images in the grid is 6*6 (16)\n    plt.imshow(img)\n    plt.text(0, -5, f'Class {label}', color='k')\n    plt.axis('off')\n    \nplt.tight_layout()\nplt.show()","3228ed75":"# Split the dataframe train into two DataFrames named train_df and valid_df. \n\ntrain_df, valid_df = train_test_split(train, test_size=0.20, random_state=1, stratify=train.label)\n\nprint(train_df.shape)\nprint(valid_df.shape)","d8020f3c":"# Create image data generators for both the training set and the validation set. \n# Here we use the data generators to scale the pixel values by a factor of 1\/255. \n\ntrain_datagen = ImageDataGenerator(rescale=1\/255)\nvalid_datagen = ImageDataGenerator(rescale=1\/255)","0afbbeaf":"BATCH_SIZE = 64\n\ntrain_loader = train_datagen.flow_from_dataframe(\n    dataframe = train_df,\n    directory = '..\/input\/histopathologic-cancer-detection\/train\/',\n    x_col = 'id',\n    y_col = 'label',\n    batch_size = BATCH_SIZE,\n    seed = 1,\n    shuffle = True,\n    class_mode = 'categorical',\n    target_size = (64,64)\n)\n\nvalid_loader = train_datagen.flow_from_dataframe(\n    dataframe = valid_df,\n    directory = '..\/input\/histopathologic-cancer-detection\/train\/',\n    x_col = 'id',\n    y_col = 'label',\n    batch_size = BATCH_SIZE,\n    seed = 1,\n    shuffle = True,\n    class_mode = 'categorical',\n    target_size = (64,64)\n)","eddb0901":"# Let's determine the number of training and validation batches. \n\nTR_STEPS = len(train_loader)\nVA_STEPS = len(valid_loader)\n\nprint('Number of batches in the training set:',TR_STEPS)\nprint('Number of batches in the validation set:',VA_STEPS)","71df8407":"np.random.seed(1)\ntf.random.set_seed(1)\n\ncnn_model = Sequential([\n    Conv2D(filters=32, kernel_size=(3,3), padding='valid', activation='relu', input_shape=(64,64,3)),\n    Conv2D(filters=32, kernel_size=(3,3), padding='valid', activation='relu'),\n    MaxPooling2D(2,2),\n    Dropout(0.25),\n    BatchNormalization(),\n\n    Conv2D(filters=64, kernel_size=(3,3), padding='valid', activation='relu'),\n    Conv2D(filters=64, kernel_size=(3,3), padding='valid', activation='relu'),\n    MaxPooling2D(2,2),\n    Dropout(0.25),\n    BatchNormalization(),\n\n    Flatten(),\n    \n    Dense(128, activation='relu'),\n    Dropout(0.25),\n    Dense(64, activation='relu'),\n    Dropout(0.25),\n    Dense(32, activation='relu'),\n    Dropout(0.25),\n    BatchNormalization(),\n    Dense(2, activation='softmax')\n])\n \n\ncnn_model.summary()","9b0e38cb":"# Define an optimizer and select a learning rate. \n# And then compile the model. \nimport tensorflow as tf\n\nopt = tf.keras.optimizers.Adam(0.001)\ncnn_model.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy',tf.keras.metrics.AUC()])","b0edb2d8":"%%time \n\nh1 = cnn_model.fit(\n    x = train_loader, \n    steps_per_epoch = TR_STEPS, \n    epochs = 30,\n    validation_data = valid_loader, \n    validation_steps = VA_STEPS, \n    verbose = 1\n)","cd5c46e7":"history = h1.history\nprint(history.keys())","fa09c3bb":"epoch_range = range(1, len(history['loss'])+1)\n\nplt.figure(figsize=[14,4])\nplt.subplot(1,3,1)\nplt.plot(epoch_range, history['loss'], label='Training')\nplt.plot(epoch_range, history['val_loss'], label='Validation')\nplt.xlabel('Epoch'); plt.ylabel('Loss'); plt.title('Loss')\nplt.legend()\nplt.subplot(1,3,2)\nplt.plot(epoch_range, history['accuracy'], label='Training')\nplt.plot(epoch_range, history['val_accuracy'], label='Validation')\nplt.xlabel('Epoch'); plt.ylabel('Accuracy'); plt.title('Accuracy')\nplt.legend()\nplt.subplot(1,3,3)\nplt.plot(epoch_range, history['auc'], label='Training')\nplt.plot(epoch_range, history['val_auc'], label='Validation')\nplt.xlabel('Epoch'); plt.ylabel('AUC'); plt.title('AUC')\nplt.legend()\nplt.tight_layout()\nplt.show()","5913a2bc":"# save the model and the combined history dictionary to files.\ncnn_model.save('cancer_model_v03.h5')\npickle.dump(history, open(f'cancer_history_v03.pkl', 'wb'))","e87f14aa":"#### There are 220,025 training images and 57,456 test images.\n#### The images are 96x96 pixels and are full color.","a4d66ba1":"# Label Distribution","37a99fee":"# Same model and history","751c220b":"# Import Packages","050f687d":"# Number of images in the train and test folder","c0507d04":"# View Sample of Images","a8919471":"# Build network","4b1d41d9":"# Data generator","f413cb31":"# About the images","24ef672c":"# Label as per csv file\u00b6","d86d6894":"#### 0 = no tumor tissue\n#### 1 = has tumor tissue","8cd6ac25":"# Histopathologic Cancer Detection\n## Identify metastatic tissue in histopathologic scans of lymph node sections","1797a97c":"# Train network","c0b5eb8f":"# Working Directory","714f0f62":"# Training Kurves","e266f0c9":"# Load Training DataFrame"}}