{"cell_type":{"24475fdf":"code","1251e303":"code","9d955b75":"code","20b40077":"code","412f53b8":"code","f35c1d2b":"code","515391e5":"code","5af2fa4b":"code","58109c11":"code","498fb8ae":"code","47e24eb0":"code","71f1bb54":"code","4ddf9774":"code","cb41ef21":"code","6ccfae28":"code","fa0cb399":"code","057610ee":"code","456b362e":"code","f76dd335":"code","07dc64f5":"code","dd2fb89e":"code","0b795d89":"code","00a1fa25":"code","cbe6b55c":"code","62c2a401":"code","37d0f880":"code","24947b43":"code","92a01203":"code","d05e81da":"code","efea8e11":"code","0eb9326d":"code","b22a996a":"code","44093d61":"code","a52a11fd":"code","2bcadf67":"code","23e483ef":"code","964f5217":"code","e00671e3":"code","d62efc9d":"code","1c22e7f4":"code","f6c5e54f":"code","f7173f5b":"code","a3165a55":"code","141884c9":"code","4e7f6f99":"code","4e0a4006":"code","5b361188":"code","e8d35a02":"code","973e7561":"code","c0652bc2":"code","79015597":"code","b10b715e":"code","0cb8a000":"code","50da6fdb":"code","f98139f4":"code","73697683":"code","59e860cd":"code","e2ae5b72":"code","dfee75bc":"code","6423bb35":"code","73228bfb":"code","340fda99":"code","1946e06d":"code","72685b31":"code","da237947":"code","d0a77df6":"code","a0c7c40a":"code","f9b1e613":"code","58ff5323":"code","ea5ba29f":"code","7bb2ec02":"code","c67fe67a":"code","12a8bc9d":"code","43beb044":"code","936fefa2":"code","8014ce75":"code","6bfd1824":"code","e14c82a4":"code","1fa0e140":"code","ea664024":"code","6d642e43":"code","6e587659":"code","6e6adb92":"code","6b3066c3":"code","35c4866d":"code","68237519":"code","c4b3d4ba":"code","00ef8fe1":"code","45e002ba":"code","3eadef6a":"code","6e2dc390":"code","39372291":"code","2ccd58c8":"code","b84947ba":"code","7a93344b":"code","b824c26e":"code","1fa97bc3":"code","ea370760":"code","150d22ad":"code","edbabebe":"code","1fcb5e58":"code","302fa8f5":"code","d9b5834d":"code","21fb652b":"code","107bb5c7":"code","419cac55":"code","57229abd":"code","52656bc1":"code","491065a4":"code","2f91a8f5":"code","665107cd":"code","c71b1412":"code","d6f80c35":"code","767b0bc3":"code","baecddea":"code","0fdeafa9":"code","d1383dce":"code","69f8b057":"code","0aa0c0cf":"code","1c7cb0d5":"code","6ae8e41d":"markdown","f2636f36":"markdown","0dcc3047":"markdown","71a9b732":"markdown","1001ba65":"markdown","98af452b":"markdown","66881522":"markdown","49fafb49":"markdown","b9b5b64f":"markdown","2a0cc6a9":"markdown","a82d6e46":"markdown","7dda3019":"markdown","d356b4d5":"markdown","e75d36b6":"markdown","ba883ba3":"markdown","dde4e748":"markdown","e670e369":"markdown","debea1d0":"markdown","16dab634":"markdown","9a8db905":"markdown","9a0400be":"markdown","249bcc8c":"markdown","8e607f43":"markdown"},"source":{"24475fdf":"import pandas as pd\nimport numpy as np\nimport matplotlib\n#Read files:\ntrain = pd.read_csv(\"..\/input\/item-outlet-sales-prediction\/train.csv\")\ntest = pd.read_csv(\"..\/input\/item-outlet-sales-prediction\/test.csv\")","1251e303":"from sklearn.metrics import mean_squared_error","9d955b75":"pd.set_option('display.max_columns',40)","20b40077":"# data = source\n\ntrain['data']='train'\ntest['data']='test'\ndf = pd.concat([train, test],ignore_index=True,sort = False)\nprint (train.shape, test.shape, df.shape)","412f53b8":"df.head()","f35c1d2b":"#null values\n# df . apply (lambda x: sum of ( column.isnull()))\ndf.apply(lambda x: sum(x.isnull()))","515391e5":"# number of unique values\ndf.nunique()","5af2fa4b":"# displaying only rows with null Item_Weight for better understanding\ndf[df.Item_Weight.isnull()]","58109c11":"df.loc[df.Item_Identifier=='FDP10']","498fb8ae":"df.loc[df.Item_Identifier=='FDX32']","47e24eb0":"# Test for item coede FDP10 with null values in item Weight\n# this exhibits that the for a given item identifier almost all other features are same\ndf[(df.Item_Identifier=='FDP10') & (df.Item_Weight.isnull())]","71f1bb54":"# imputing item weight according to item identifier ; we will follow these steps\n#1. creating sample copy for testing purpose\n#2. crosschecking on sample copy\n#3. imputing in original df dataframe","4ddf9774":"#1.\ntemp = df.copy()\ntemp.head()","cb41ef21":"temp.Item_Weight = temp.groupby(\"Item_Identifier\").transform(lambda x: x.fillna(x.mean()))","6ccfae28":"#2. crosschecking on sample copy\ntemp.isnull().sum()","fa0cb399":"#2. crosschecking on sample copy\ntemp.loc[temp.Item_Identifier=='FDX32']","057610ee":"#3. imputing in original df dataframe\ndf.Item_Weight = df.groupby('Item_Identifier').transform(lambda x : x.fillna(x.mean()))","456b362e":"df['Price\/Wt'] = df.Item_MRP \/ df.Item_Weight","f76dd335":"df[df.Outlet_Size.isnull()]","07dc64f5":"df[df.Outlet_Size.isnull()].Outlet_Identifier.unique()","dd2fb89e":"df.loc[df.Outlet_Identifier=='OUT017'].Outlet_Size.notnull().value_counts()","0b795d89":"df.loc[df.Outlet_Identifier=='OUT045'].Outlet_Size.notnull().value_counts()","00a1fa25":"df.loc[df.Outlet_Identifier =='OUT010'].Outlet_Size.isnull().value_counts()","cbe6b55c":"pd.crosstab(df.Outlet_Size,[df.Outlet_Location_Type,df.Outlet_Type])","62c2a401":"pd.crosstab( df.Outlet_Identifier ,[df.Outlet_Location_Type,df.Outlet_Type])","37d0f880":"pd.crosstab(df.Outlet_Size,df.Outlet_Type)","24947b43":"pd.crosstab( df.Outlet_Identifier ,[df.Outlet_Location_Type,df.Outlet_Type,df.Outlet_Size])","92a01203":"df.Outlet_Size.fillna('Small',inplace= True)","d05e81da":"df.head()","efea8e11":"df.isnull().sum()","0eb9326d":"df.Item_Type.value_counts()","b22a996a":"df.groupby('Item_Type')['Item_Outlet_Sales'].sum()","44093d61":"first = ['Fruits and Vegetables','Canned','Starchy Foods']\nsecond = ['Frozen Foods','Dairy','Meat']\nthird = ['Snack Foods','Soft Drinks']\nfourth = ['Baking Goods','Breakfast','Breads']\nfifth = ['Health and Hygiene','Household','Others']\nsixth = ['Hard Drinks','Seafood']\n","a52a11fd":"def itm_typ (x):\n    if x in first:\n        x = 'Basic_Food'\n    elif x in second:\n        x= 'Refrigerated_Food'\n    elif x in third:\n        x = 'Junk_Food'\n    elif x in fourth:\n        x = 'Light_Food'\n    elif x in fifth:\n        x = 'Daily_Needs'\n    elif x in sixth:\n        x = 'Lux_Food'\n    return(x)\ndf['Item_Type'] = df.Item_Type.apply(itm_typ)","2bcadf67":"df.head()","23e483ef":"df.Outlet_Establishment_Year.max()","964f5217":"df.Outlet_Establishment_Year = 2011 - df.Outlet_Establishment_Year \n\ndf.head()","e00671e3":"df.head()","d62efc9d":"df['Item_Identifier'].str[:2].value_counts()","1c22e7f4":"df['Item_Identifier'].str[2:3].value_counts()","f6c5e54f":"df['Item_Edible'] = df['Item_Identifier'].str[:2]","f7173f5b":"def fat(x):\n    if x in ['Low Fat','LF','low fat']:\n        return ('low fat')\n    else:\n        return('regular')\ndf.Item_Fat_Content = df.Item_Fat_Content.apply(fat)","a3165a55":"df['Item_Fat_Content'].value_counts()","141884c9":"df.head()","4e7f6f99":"df.pivot_table(values='Item_Visibility', index='Item_Identifier')","4e0a4006":"mean_viz =df.pivot_table(values='Item_Visibility', index='Item_Identifier')","5b361188":"zero_viz = (df['Item_Visibility'] == 0)","e8d35a02":"df.loc[zero_viz,'Item_Visibility'] = df.loc[zero_viz,'Item_Identifier'].apply(lambda x: mean_viz.loc[x])","973e7561":"df['Units_Sold'] = df.Item_Outlet_Sales \/ df.Item_MRP","c0652bc2":"df.head()","79015597":"df['Units_Sold'] = df.Item_Outlet_Sales \/ df.Item_MRP","b10b715e":"df.head()","0cb8a000":"df.Units_Sold.head()","50da6fdb":"dfoh = df.copy()\ndfoh.drop(['Item_Identifier','data'],axis = 1, inplace =True)","f98139f4":"ohelist=[ 'Item_Fat_Content','Item_Type', 'Outlet_Identifier', 'Outlet_Size', 'Outlet_Location_Type',\n       'Outlet_Type', 'Item_Edible']","73697683":"for i in ohelist:\n    dfoh[i] = dfoh[i].astype('category')\ndfoh = pd.get_dummies(dfoh)","59e860cd":"dfoh.head()","e2ae5b72":"dfoh.shape","dfee75bc":"dfoh = pd.concat([dfoh,df.data],axis=1)","6423bb35":"dfoh.head()","73228bfb":"X = dfoh[dfoh.data == 'train']\nX.drop(['Item_Outlet_Sales','data','Units_Sold'],axis=1,inplace =True)","340fda99":"y = dfoh[dfoh.data == 'train']['Units_Sold']","1946e06d":"X.columns","72685b31":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","da237947":"tetsetX = dfoh[dfoh.data == 'test'][['Item_Weight', 'Item_Visibility', 'Item_MRP',\n       'Outlet_Establishment_Year', 'Price\/Wt', 'Item_Fat_Content_low fat',\n       'Item_Fat_Content_regular', 'Item_Type_Basic_Food',\n       'Item_Type_Daily_Needs', 'Item_Type_Junk_Food', 'Item_Type_Light_Food',\n       'Item_Type_Lux_Food', 'Item_Type_Refrigerated_Food',\n       'Outlet_Identifier_OUT010', 'Outlet_Identifier_OUT013',\n       'Outlet_Identifier_OUT017', 'Outlet_Identifier_OUT018',\n       'Outlet_Identifier_OUT019', 'Outlet_Identifier_OUT027',\n       'Outlet_Identifier_OUT035', 'Outlet_Identifier_OUT045',\n       'Outlet_Identifier_OUT046', 'Outlet_Identifier_OUT049',\n       'Outlet_Size_High', 'Outlet_Size_Medium', 'Outlet_Size_Small',\n       'Outlet_Location_Type_Tier 1', 'Outlet_Location_Type_Tier 2',\n       'Outlet_Location_Type_Tier 3', 'Outlet_Type_Grocery Store',\n       'Outlet_Type_Supermarket Type1', 'Outlet_Type_Supermarket Type2',\n       'Outlet_Type_Supermarket Type3', 'Item_Edible_DR', 'Item_Edible_FD',\n       'Item_Edible_NC']]","d0a77df6":"categorical_features_indices = np.where(X.dtypes != np.float)[0]","a0c7c40a":"from catboost import CatBoostRegressor\nmodel=CatBoostRegressor(iterations=100, depth=3, learning_rate=0.07, loss_function='RMSE')\nmodel.fit(X_train, y_train,cat_features=categorical_features_indices,eval_set=(X_test, y_test),plot=True)","f9b1e613":"from catboost import CatBoostRegressor\nmodel=CatBoostRegressor(iterations=100, depth=3, learning_rate=0.07, loss_function='RMSE')\nmodel.fit(X, y,cat_features=categorical_features_indices,plot=True)","58ff5323":"tetsetX = dfoh[dfoh.data == 'test'][['Item_Weight', 'Item_Visibility', 'Item_MRP',\n       'Outlet_Establishment_Year', 'Price\/Wt', 'Item_Fat_Content_low fat',\n       'Item_Fat_Content_regular', 'Item_Type_Basic_Food',\n       'Item_Type_Daily_Needs', 'Item_Type_Junk_Food', 'Item_Type_Light_Food',\n       'Item_Type_Lux_Food', 'Item_Type_Refrigerated_Food',\n       'Outlet_Identifier_OUT010', 'Outlet_Identifier_OUT013',\n       'Outlet_Identifier_OUT017', 'Outlet_Identifier_OUT018',\n       'Outlet_Identifier_OUT019', 'Outlet_Identifier_OUT027',\n       'Outlet_Identifier_OUT035', 'Outlet_Identifier_OUT045',\n       'Outlet_Identifier_OUT046', 'Outlet_Identifier_OUT049',\n       'Outlet_Size_High', 'Outlet_Size_Medium', 'Outlet_Size_Small',\n       'Outlet_Location_Type_Tier 1', 'Outlet_Location_Type_Tier 2',\n       'Outlet_Location_Type_Tier 3', 'Outlet_Type_Grocery Store',\n       'Outlet_Type_Supermarket Type1', 'Outlet_Type_Supermarket Type2',\n       'Outlet_Type_Supermarket Type3', 'Item_Edible_DR', 'Item_Edible_FD',\n       'Item_Edible_NC']]","ea5ba29f":"ypredUnits = model.predict(tetsetX)","7bb2ec02":"ypredOS = ypredUnits * dfoh[dfoh.data == 'test']['Item_MRP']","c67fe67a":"ypredOS.to_csv('sub2.csv')","12a8bc9d":"ypredOS","43beb044":"from sklearn.ensemble import RandomForestRegressor\n\nrfr = RandomForestRegressor()\nrfr.fit(X_train, y_train)\ny_pred = rfr.predict(X_test)\nrmse = (np.sqrt(mean_squared_error(y_test, y_pred)))\nrmse","936fefa2":"import xgboost\n\nxgb = xgboost.XGBRegressor()\nxgb.fit(X_train,y_train)\ny_pred = xgb.predict(X_test)\nrmse = (np.sqrt(mean_squared_error(y_test, y_pred)))\nrmse","8014ce75":"Start here","6bfd1824":"df.columns","e14c82a4":"from sklearn.linear_model import LogisticRegression\nO = OrdClass(classifier=LogisticRegression)\nO.fit(X,y)\nO.predict(x_test)","1fa0e140":"fjjhhjf","ea664024":"df.groupby('Outlet_Size')['Item_Outlet_Sales'].mean()","6d642e43":"# high: 21, med:27, small:18\ndef Size(x):\n    if x == 'Small':\n        return (6)\n    elif x == 'Medium':\n        return (9)\n    elif x == \"High\":\n        return (7)\ndf['Outlet_Size'] = df['Outlet_Size'].apply(Size)","6e587659":"df.groupby('Item_Fat_Content')['Item_Outlet_Sales'].mean()","6e6adb92":"#lf: 21,reg:22 we decide to keep it 0,1\ndef fat(x):\n    if x == 'low fat':\n        return ('0')\n    else:\n        return('1')\ndf.Item_Fat_Content = df.Item_Fat_Content.apply(fat)","6b3066c3":"df.groupby('Item_Edible')['Item_Outlet_Sales'].mean()","35c4866d":"# dr:fd:nc = 19:20:21 so we keep it 0,1,2\ndef edible(x):\n    if x == 'DR':\n        return (0)\n    elif x == 'NC':\n        return (1)\n    elif x == 'FD':\n        return (2)\ndf.Item_Edible = df.Item_Edible.apply(edible)","68237519":"df.groupby('Outlet_Location_Type')['Item_Outlet_Sales'].mean()","c4b3d4ba":"# T1:T2:T3  = 18:24:21  imputing with 6,8,7\ndef loc_typ(x):\n    if x == 'Tier 1':\n        return (6)\n    elif x == 'Tier 2':\n        return (8)\n    elif x == 'Tier 3':\n        return (7)\ndf.Outlet_Location_Type = df.Outlet_Location_Type.apply(loc_typ)","00ef8fe1":"df.groupby('Outlet_Type')['Item_Outlet_Sales'].mean()","45e002ba":"# G:T1:T2:T3  = 3:24:18:36\ndef out_typ(x):\n    if x == 'Grocery Store':\n        return (1)\n    elif x == 'Supermarket Type1':\n        return (8)\n    elif x == 'Supermarket Type2':\n        return (6)\n    elif x == 'Supermarket Type3':\n        return (9)\n\ndf.Outlet_Type = df.Outlet_Type.apply(out_typ)","3eadef6a":"df.Outlet_Type.value_counts()","6e2dc390":"df.groupby('Outlet_Identifier')['Item_Outlet_Sales'].mean().sort_values()","39372291":"\ndef out_id(x):\n    if x in ['OUT010','OUT019']:\n        return (1)\n    elif x == 'OUT018':\n        return (6)\n    elif x in ['OUT045','OUT046','OUT013']:\n        return (7)\n    elif x in ['OUT017','OUT049','OUT035']:\n        return (8)\n    else :\n        return (9)\n\ndf.Outlet_Identifier = df.Outlet_Identifier.apply(out_id)","2ccd58c8":"df.head()","b84947ba":"df.columns","7a93344b":"df = df[['Item_Identifier','Item_Weight',  'Item_Visibility',\n       'Item_MRP', 'Vintage','Item_Fat_Content','priority',  'Outlet_Identifier',\n        'Outlet_Size', 'Outlet_Location_Type', 'Outlet_Type', \n       'Item_Edible', 'Item_Outlet_Sales', 'data']]","b824c26e":"df.head()","1fa97bc3":"df. info()","ea370760":"df.Outlet_Identifier.unique()","150d22ad":"outlet_id =[ 'OUT049', 'OUT018', 'OUT010', 'OUT013', 'OUT027', 'OUT045','OUT017', 'OUT046', 'OUT035', 'OUT019']","edbabebe":"hfhfhfh","1fcb5e58":"df.pivot_table(values='Item_Weight', index='Item_Identifier')","302fa8f5":"df.pivot_table(values='Item_Outlet_Sales',index='Outlet_Identifier')","d9b5834d":"#Determine average visibility of a product\nvisibility_avg = data.pivot_table(values='Item_Visibility', index='Item_Identifier')\n\n#Impute 0 values with mean visibility of that product:\nmiss_bool = (data['Item_Visibility'] == 0)\n\nprint ('Number of 0 values initially: %d'%sum(miss_bool))\ndata.loc[miss_bool,'Item_Visibility'] = data.loc[miss_bool,'Item_Identifier'].apply(lambda x: visibility_avg.loc[x])\nprint ('Number of 0 values after modification: %d'%sum(data['Item_Visibility'] == 0))","21fb652b":"#Get the first two characters of ID:\ndata['Item_Type_Combined'] = data['Item_Identifier'].apply(lambda x: x[0:2])\n#Rename them to more intuitive categories:\ndata['Item_Type_Combined'] = data['Item_Type_Combined'].map({'FD':'Food',\n                                                             'NC':'Non-Consumable',\n                                                             'DR':'Drinks'})\ndata['Item_Type_Combined'].value_counts()\n","107bb5c7":"#Years:\ndata['Outlet_Years'] = 2013 - data['Outlet_Establishment_Year']\ndata['Outlet_Years'].describe()","419cac55":"#Change categories of low fat:\nprint ('Original Categories:')\nprint (data['Item_Fat_Content'].value_counts())\n\nprint ('\\nModified Categories:')\ndata['Item_Fat_Content'] = data['Item_Fat_Content'].replace({'LF':'Low Fat',\n                                                             'reg':'Regular',\n                                                             'low fat':'Low Fat'})\nprint (data['Item_Fat_Content'].value_counts())","57229abd":"#Mark non-consumables as separate category in low_fat:\ndata.loc[data['Item_Type_Combined']==\"Non-Consumable\",'Item_Fat_Content'] = \"Non-Edible\"\ndata['Item_Fat_Content'].value_counts()","52656bc1":"#Import library:\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n#New variable for outlet\ndata['Outlet'] = le.fit_transform(data['Outlet_Identifier'])\nvar_mod = ['Item_Fat_Content','Outlet_Location_Type','Outlet_Size','Item_Type_Combined','Outlet_Type','Outlet']\nle = LabelEncoder()\nfor i in var_mod:\n    data[i] = le.fit_transform(data[i])","491065a4":"#One Hot Coding:\ndata = pd.get_dummies(data, columns=['Item_Fat_Content','Outlet_Location_Type','Outlet_Size','Outlet_Type',\n                              'Item_Type_Combined','Outlet'])","2f91a8f5":"data.dtypes","665107cd":"data[['Item_Fat_Content_0','Item_Fat_Content_1','Item_Fat_Content_2']].head()","c71b1412":"#Drop the columns which have been converted to different types:\ndata.drop(['Item_Type','Outlet_Establishment_Year'],axis=1,inplace=True)\n\n#Divide into test and train:\ntrain = data.loc[data['source']==\"train\"]\ntest = data.loc[data['source']==\"test\"]\n\n#Drop unnecessary columns:\ntest.drop(['Item_Outlet_Sales','source'],axis=1,inplace=True)\ntrain.drop(['source'],axis=1,inplace=True)\n\n#Export files as modified versions:\ntrain.to_csv(\"train_modified.csv\",index=False)\ntest.to_csv(\"test_modified.csv\",index=False)","d6f80c35":"#Mean based:\nmean_sales = train['Item_Outlet_Sales'].mean()\n\n#Define a dataframe with IDs for submission:\nbase1 = test[['Item_Identifier','Outlet_Identifier']]\nbase1['Item_Outlet_Sales'] = mean_sales\n\n#Export submission file\nbase1.to_csv(\"alg0.csv\",index=False)","767b0bc3":"#Define target and ID columns:\ntarget = 'Item_Outlet_Sales'\nIDcol = ['Item_Identifier','Outlet_Identifier']\nfrom sklearn.model_selection import cross_val_score\ndef modelfit(alg, dtrain, dtest, predictors, target, IDcol, filename):\n    #Fit the algorithm on the data\n    alg.fit(dtrain[predictors], dtrain[target])\n        \n    #Predict training set:\n    dtrain_predictions = alg.predict(dtrain[predictors])\n\n    #Perform cross-validation:\n    cv_score = cross_val_score(alg, dtrain[predictors], dtrain[target], cv=20, scoring='neg_mean_squared_error')\n    cv_score = np.sqrt(np.abs(cv_score))\n    \n    #Print model report:\n    print (\"\\nModel Report\")\n    #print (\"RMSE : %.4g\" % np.sqrt(metrics.mean_squared_error(dtrain[target].values, dtrain_predictions)))\n    print (\"CV Score : Mean - %.4g | Std - %.4g | Min - %.4g | Max - %.4g\" % (np.mean(cv_score),\n                                                                              np.std(cv_score),np.min(cv_score),np.max(cv_score)))\n    \n    #Predict on testing data:\n    dtest[target] = alg.predict(dtest[predictors])\n    \n    #Export submission file:\n    IDcol.append(target)\n    submission = pd.DataFrame({ x: dtest[x] for x in IDcol})\n    submission.to_csv(filename, index=False)","baecddea":"from sklearn.linear_model import LinearRegression, Ridge, Lasso\npredictors = [x for x in train.columns if x not in [target]+IDcol]\n# print predictors\nalg1 = LinearRegression(normalize=True)\nmodelfit(alg1, train, test, predictors, target, IDcol, 'alg1.csv')\ncoef1 = pd.Series(alg1.coef_, predictors).sort_values()\ncoef1.plot(kind='bar', title='Model Coefficients')\n","0fdeafa9":"predictors = [x for x in train.columns if x not in [target]+IDcol]\nalg2 = Ridge(alpha=0.05,normalize=True)\nmodelfit(alg2, train, test, predictors, target, IDcol, 'alg2.csv')\ncoef2 = pd.Series(alg2.coef_, predictors).sort_values()\ncoef2.plot(kind='bar', title='Model Coefficients')","d1383dce":"from sklearn.tree import DecisionTreeRegressor\npredictors = [x for x in train.columns if x not in [target]+IDcol]\nalg3 = DecisionTreeRegressor(max_depth=15, min_samples_leaf=100)\nmodelfit(alg3, train, test, predictors, target, IDcol, 'alg3.csv')\ncoef3 = pd.Series(alg3.feature_importances_, predictors).sort_values(ascending=False)\ncoef3.plot(kind='bar', title='Feature Importances')","69f8b057":"predictors = ['Item_MRP','Outlet_Type_0','Outlet_5','Outlet_Years']\nalg4 = DecisionTreeRegressor(max_depth=8, min_samples_leaf=150)\nmodelfit(alg4, train, test, predictors, target, IDcol, 'alg4.csv')\ncoef4 = pd.Series(alg4.feature_importances_, predictors).sort_values(ascending=False)\ncoef4.plot(kind='bar', title='Feature Importances')","0aa0c0cf":"from sklearn.ensemble import RandomForestRegressor\npredictors = [x for x in train.columns if x not in [target]+IDcol]\nalg5 = RandomForestRegressor(n_estimators=200,max_depth=5, min_samples_leaf=100,n_jobs=4)\nmodelfit(alg5, train, test, predictors, target, IDcol, 'alg5.csv')\ncoef5 = pd.Series(alg5.feature_importances_, predictors).sort_values(ascending=False)\ncoef5.plot(kind='bar', title='Feature Importances')","1c7cb0d5":"predictors = [x for x in train.columns if x not in [target]+IDcol]\nalg6 = RandomForestRegressor(n_estimators=400,max_depth=6, min_samples_leaf=100,n_jobs=4)\nmodelfit(alg6, train, test, predictors, target, IDcol, 'alg6.csv')\ncoef6 = pd.Series(alg6.feature_importances_, predictors).sort_values(ascending=False)\ncoef6.plot(kind='bar', title='Feature Importances')","6ae8e41d":"#Determine average visibility of a product\nvisibility_avg = data.pivot_table(values='Item_Visibility', index='Item_Identifier')\n\n#Impute 0 values with mean visibility of that product:\nmiss_bool = (data['Item_Visibility'] == 0)\n\nprint ('Number of 0 values initially: %d'%sum(miss_bool))\ndata.loc[miss_bool,'Item_Visibility'] = data.loc[miss_bool,'Item_Identifier'].apply(lambda x: visibility_avg.loc[x])\nprint ('Number of 0 values after modification: %d'%sum(data['Item_Visibility'] == 0))","f2636f36":"# RandomFORESTing","0dcc3047":"null values in outlet size","71a9b732":"adding the data column for test and train identification","1001ba65":"Checking weather  <br> outlet size, Item fat content, edible, outlet location type, outlet type <br>\nhave ordinal effect on outlet sales : conformation for one hot \/ label encoding\n<br>\n<br>\n##  i will impute with factors of avg outlet sales, considering smallest =1 and incrementing accordingli","98af452b":"Outlets OUT017 and OUT045 are both in tier 2 localities which have only small outlets size <br>\nOutlet OUT010 is a Grocer store which again is a small type outlet <br>\nso we impute null values in outlet size with small","66881522":"example <br>\ndf['city'] = df['city'].astype('category') <br>\ndf['phone'] = df['phone'].astype('category') <br>\ndf = pd.get_dummies(df)","49fafb49":"## One Hoted Dataframe dfoh","b9b5b64f":"lets jot down few hypothesises we need <br>\n1. Item id has no value except the initial letters part, (one hot encode)\n2. item weight - unclear, leave as it is\n3. item fat content , items which are not edible should have -ve value\n4. item visibility should not be zero, preferably\n5. item type is a categorical data with no ordinality (one hot encode)\n6. mrp of item, use this with item sale, to find no. of units sold OUR NEW TARGET\n7. outlet identifier, this is again for feature extraction ,can be dropped\n8. outlet establishment year, categorical , ordinal (label encode)\n9. Outlet_Size, Outlet_Location_Type, Outlet_Type categorical , nor ordinal, (one hot encode)\n","2a0cc6a9":"first handle missing values; namely in:\nItem_Weight, Outlet_Size","a82d6e46":"## CATboosting","7dda3019":"# Units_Sold  => now this will be our new target variable","d356b4d5":"the 2 codes below show that item weights are constant for a given item identifier","e75d36b6":"# Units_Sold  => now this will be our new target variable","ba883ba3":"this makes it clear that: <br>\ntier 1 + grocery store = small\ntier 2                = small\ntier 3 + supermarket 1 = high\ntier 3 + supermarket 2\/3 = medium","dde4e748":"so only outlets: 'OUT010', 'OUT045', 'OUT017' have unknown outlet size <br>\nnext step we try to confirm this hypothesis. <br>Check True\/False in output for respective notnull() and isnull()","e670e369":"lets make a crosstab for matching outlet size to \nOutlet_Location_Type,\nOutlet_Type,\n","debea1d0":"lets jot down few hypothesises we need <br>\n1. Item id has no value except the initial letters part, (one hot encode)\n2. item weight - price per unit weight\n3. item fat content , items which are not edible should have -ve value\n4. item visibility should not be zero, preferably\n5. item type is a categorical data with no ordinality (one hot encode)\n6. mrp of item, use this with item sale, to find no. of units sold OUR NEW TARGET\n7. outlet identifier, this is again for feature extraction ,can be dropped\n8. outlet establishment year, categorical , ordinal (label encode)\n9. Outlet_Size, Outlet_Location_Type, Outlet_Type categorical , nor ordinal, (one hot encode)\n","16dab634":"categorising item type column according to essentiality factor or priority<br>\nbut first lets see which item types have the max sales","9a8db905":"which outlet identifiers have missing outlet size?","9a0400be":"# XGBoosting","249bcc8c":"Now Data is ready is ready for nxt step; <br>\n- finding false values  <br>\n- encoding <br>\n- modelling <br>","8e607f43":"creating new column for 'vintage' in  Outlet_Establishment_Year"}}