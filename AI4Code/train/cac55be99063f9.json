{"cell_type":{"5ae0a61c":"code","7e6c3ca4":"code","7e6589ca":"code","6514f22b":"code","0210a740":"code","f7130a25":"code","19bd52d7":"code","406915c2":"code","a95e083c":"code","734b5f03":"code","6a4d74c8":"code","eba564e2":"code","9171ff9a":"code","759fa72c":"code","9ea3c872":"code","eed22236":"code","5f1bde27":"code","ef158de3":"code","62bc17e4":"code","16bd9e34":"code","4b6363d2":"code","92cc6134":"code","a6f036f4":"code","5e30464c":"code","92d26cf2":"code","86c00b81":"code","81c1aecc":"code","5b926a56":"code","36fb395c":"code","3329912b":"code","9093f830":"code","e4e1e332":"code","2e32af98":"code","a8d8b49c":"code","b4b967e0":"code","192b5170":"code","9b95f301":"markdown","0a328075":"markdown","f7fa0bab":"markdown","b506dbef":"markdown"},"source":{"5ae0a61c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7e6c3ca4":"import os \nfrom matplotlib import pyplot as plt\nimport seaborn as sns","7e6589ca":"DATASET_PATH = \"\/kaggle\/input\/pima-indians-diabetes-database\/\"","6514f22b":"df = pd.read_csv(os.path.join(DATASET_PATH, \"diabetes.csv\"))\ndf.head()","0210a740":"df.isnull().sum()\n\n# No Null values","f7130a25":"df.info()\n\n### No categorical\/datetime columns","19bd52d7":"df.describe()\n\n### some features look have max outliers\n### Many have 0 values assuming it's not recorded","406915c2":"df_copy = df.copy(deep = True)\ndf_copy[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = df_copy[\n    ['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0,np.NaN)","a95e083c":"df_copy.isnull().sum()","734b5f03":"df_copy.isnull().sum()\/len(df_copy)\n\n# Big diff now","6a4d74c8":"df_copy.hist(figsize = (20,20))\n\n### some have a right skew like (Pregnancies, Insulin, BMI, DiabetesPedigreeFunction, Age) other almost normal distriuted","eba564e2":"temp_df_mean = df_copy.groupby([\"Outcome\"])[\"Glucose\", \"BloodPressure\"].mean().reset_index()\ntemp_df_mean.columns = [\"Outcome\", \"Glucose_mean\", \"BloodPressure_maen\"]\ntemp_df_mean","9171ff9a":"temp_df_median = df_copy.groupby([\"Outcome\"])[\"SkinThickness\", \"Insulin\", \"BMI\"].median().reset_index()\ntemp_df_median.columns = [\"Outcome\", \"SkinThickness_median\", \"Insulin_median\", \"BMI_median\"]\ntemp_df_median","759fa72c":"#Glucose                     0.006510\n#BloodPressure               0.045573\n#SkinThickness               0.295573\n#Insulin                     0.486979\n#BMI                         0.014323\n# assign flag for the big fraction of missing values\n\ndf_copy[\"SkinThickness_missflag\"] = df_copy[\"SkinThickness\"].apply(lambda x: 0 if np.isnan(x) else 1)\ndf_copy[\"Insulin_missflag\"] = df_copy[\"Insulin\"].apply(lambda x: 0 if np.isnan(x) else 1)","9ea3c872":"#df_copy['Glucose'].fillna(df_copy['Glucose'].mean(), inplace = True)\n#df_copy['BloodPressure'].fillna(df_copy['BloodPressure'].mean(), inplace = True)\n\ndf_copy = pd.merge(df_copy, temp_df_mean, on=\"Outcome\", how=\"inner\")\n\ndf_copy[\"Glucose\"].fillna(df_copy[\"Glucose_mean\"], inplace=True)\ndf_copy[\"BloodPressure\"].fillna(df_copy[\"BloodPressure_maen\"], inplace=True)\n\ndf_copy.drop([\"Glucose_mean\", \"BloodPressure_maen\"], axis=1, inplace=True)","eed22236":"#df_copy['SkinThickness'].fillna(df_copy['SkinThickness'].median(), inplace = True)\n#df_copy['Insulin'].fillna(df_copy['Insulin'].median(), inplace = True)\n#df_copy['BMI'].fillna(df_copy['BMI'].median(), inplace = True)\n\n\ndf_copy = pd.merge(df_copy, temp_df_median, on=\"Outcome\", how=\"inner\")\n\ndf_copy[\"SkinThickness\"].fillna(df_copy[\"SkinThickness_median\"], inplace=True)\ndf_copy[\"Insulin\"].fillna(df_copy[\"Insulin_median\"], inplace=True)\ndf_copy[\"BMI\"].fillna(df_copy[\"BMI_median\"], inplace=True)\n\ndf_copy.drop([\"SkinThickness_median\", \"Insulin_median\", \"BMI_median\"], axis=1, inplace=True)","5f1bde27":"df_copy","ef158de3":"df_copy.hist(figsize = (20,20))","62bc17e4":"df_copy.isnull().sum()\n\n# No null now","16bd9e34":"df_copy[\"Outcome\"].value_counts().plot(kind=\"bar\")\n\n### data is unblance almost 1 1\/2 0","4b6363d2":"p=sns.pairplot(df_copy, hue = 'Outcome')\n\n### almost nothing is linearly correlated except (SkinThickness, BMI)","92cc6134":"plt.figure(figsize=(20,20))\nsns.heatmap(df_copy.corr(), annot=True)\n\n### some features have alomst 0.5 correlation factor like (Pregnancies, Age), (SkinThickness, BMI), (Glucose, Outcome)","a6f036f4":"X = df_copy.drop([\"Outcome\"],axis = 1)\ny = df_copy[\"Outcome\"]","5e30464c":"from imblearn.over_sampling import SMOTE\n\noversample = SMOTE()\nX, y = oversample.fit_resample(X, y)","92d26cf2":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=True, random_state=0, stratify=y)\n\n# spliting our dataset to 20% test and 80% train with stratify on y outcome to minize the bais ","86c00b81":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\n\nX_train = scaler.fit_transform(X_train)                      \nX_test = scaler.transform(X_test)","81c1aecc":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier","5b926a56":"from sklearn.model_selection import GridSearchCV\n\ndef fit(model, param_grid, X_train, y_train, cv=10):    \n    search = GridSearchCV(model, param_grid=param_grid, cv=cv)\n    search.fit(X_train, y_train)\n    return search.best_estimator_","36fb395c":"def predict(model, X_test):    \n    return model.predict(X_test)  ","3329912b":"from sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.metrics import classification_report\n\ndef get_accuracy(y_true, y_hat, text=\"\"):\n    print(text)\n    print(classification_report(y_true, y_hat))","9093f830":"param_grid = {\"penalty\":[\"l1\",\"l2\",\"elasticnet\"], \n              \"C\":[1, 0.8, 0.6]\n             }","e4e1e332":"model = fit(LogisticRegression(), param_grid, X_train, y_train)   \ny_hat = predict(model, X_test)\nget_accuracy(y_test, y_hat, text=model)","2e32af98":"param_grid = {\"n_neighbors\":[1,2,3,5,6,7]\n             }","a8d8b49c":"model = fit(KNeighborsClassifier(), param_grid, X_train, y_train)   \ny_hat = predict(model, X_test)\nget_accuracy(y_test, y_hat, text=model)","b4b967e0":"param_grid = {\"kernel\":[\"linear\",\"poly\",\"rbf\"], \n              \"C\":[1, 0.8, 0.6],\n              \"degree\": [3, 4, 5]\n             }","192b5170":"model = fit(SVC(), param_grid, X_train, y_train)   \ny_hat = predict(model, X_test)\nget_accuracy(y_test, y_hat, text=model)","9b95f301":"### the knn classifier did not do much with precision, recall, accuracy","0a328075":"### The regularization coff c make a good jump with SVM accuracy","f7fa0bab":"### For the right skew will use median to fill nan\n### normal distibution will use mean to fill nan","b506dbef":"### The linear models did not do a great work as the data itself is not linear in some how"}}