{"cell_type":{"308327d4":"code","5f24b453":"code","f2129e8c":"code","69b04634":"code","4f2bbe2e":"code","4e6b4d46":"code","057bff86":"code","b5655228":"code","caa43607":"code","f9a5b890":"code","e599dd52":"code","e0ec4a09":"code","7f217f78":"code","94c14f66":"code","48a61b48":"code","ca5d788f":"code","e36aa44f":"code","958dd924":"code","66cf3c36":"code","d927943b":"code","001da732":"code","2db46a63":"code","f0637379":"code","31ad62be":"code","811fa2a6":"code","bf3b79be":"code","0d5e8931":"code","ca2f4011":"code","15ba7373":"code","2edbe656":"code","6feb5fc0":"code","dd7ffda9":"code","aa34e555":"code","2de7ee8d":"code","1043f3df":"code","2d45d917":"code","78397018":"code","88ddf93a":"code","10fe24ea":"code","ffaa37e5":"code","a8478db8":"code","0d0189a4":"code","15e6363f":"code","cc4527eb":"markdown","07c8533b":"markdown","34aa922d":"markdown","0364ab60":"markdown","be8a9802":"markdown","85d300cd":"markdown","7bddcd59":"markdown","4e529b43":"markdown","3d1b9163":"markdown","4d2f2c9c":"markdown","455bacad":"markdown","b5094496":"markdown","828cd46d":"markdown","02a59f87":"markdown","4e822a9f":"markdown","39e31f0c":"markdown","6b3186ae":"markdown","6f4a3382":"markdown","4b9fe648":"markdown","c2ca25d4":"markdown","aa7e4592":"markdown","873145a3":"markdown","ae713f3f":"markdown"},"source":{"308327d4":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport cufflinks as cf\nfrom scipy import stats\nimport plotly.express as px\nimport matplotlib.pyplot as plt\n\nfrom plotly.offline import download_plotlyjs,init_notebook_mode,plot,iplot\ninit_notebook_mode(connected=True)\ncf.go_offline()","5f24b453":"# Read the csv file using pandas  !  \ndf = pd.read_csv('..\/input\/weather-dataset-rattle-package\/weatherAUS.csv')\ndf.head(n=5)","f2129e8c":"df.shape","69b04634":"df.describe()","4f2bbe2e":"df.isnull().sum()","4e6b4d46":"df.duplicated().sum()\n","057bff86":"df.drop_duplicates()","b5655228":"# check the null values ! \nprint(\"Q: Are there any missing values?\", \"\\n\" +\n      \"A: {}\".format(df.isnull().values.any()))","caa43607":"# using heatmap we can also vizualize the null values !\nplt.style.use('ggplot')\nplt.figure(figsize=(10,6))\nsns.heatmap(df.isnull(),cmap='winter',yticklabels=False,cbar=False)\nplt.show()","f9a5b890":"df.drop(['Evaporation','Sunshine','Cloud9am','Cloud3pm','Date'],axis=1,inplace=True)","e599dd52":"# Filling null values\n\ndef fill_na(info):\n    cols=info.columns\n    for col in cols:\n        if info[col].dtype=='object':\n            info[col].fillna(method='ffill',inplace=True)\n        else:\n            info[col].fillna(info[col].median(),inplace=True)\n    return info","e0ec4a09":"df1=fill_na(df)","7f217f78":"# Now check the null values using heatmap ! \nplt.figure(figsize=(10,6))\nsns.heatmap(df1.isnull(),cmap='winter',yticklabels=False,cbar=False)\nplt.show()","94c14f66":"df1.head(n=5)","48a61b48":"df1.shape","ca5d788f":"plt.figure(figsize=(25,30))\nplt.subplot(5,2,1)\nsns.histplot(df1,x='MinTemp')\nplt.subplot(5,2,2)\nsns.histplot(df1,x='MaxTemp')\nplt.subplot(5,2,3)\nsns.histplot(df1,x='WindGustSpeed')\nplt.subplot(5,2,4)\nsns.histplot(df1,x='WindSpeed3pm')\nplt.subplot(5,2,5)\nsns.histplot(df1,x='Humidity9am')\nplt.subplot(5,2,6)\nsns.histplot(df1,x='Humidity3pm')\nplt.subplot(5,2,7)\nsns.histplot(df1,x='Pressure9am')\nplt.subplot(5,2,8)\nsns.histplot(df1,x='Pressure3pm')\nplt.subplot(5,2,9)\nsns.histplot(df1,x='Temp9am')\nplt.subplot(5,2,10)\nsns.histplot(df1,x='Temp3pm')\nplt.show()","e36aa44f":"plt.figure(figsize=(15,15))\nsns.scatterplot(data=df1, x=\"Location\", y=\"MinTemp\", hue=\"WindGustDir\")\nplt.show()","958dd924":"df1.head(n=5)","66cf3c36":"from sklearn.preprocessing import LabelEncoder\ncols = ['Location','WindGustDir','WindDir9am','WindDir3pm','RainToday','RainTomorrow']\ndf1[cols] = df1[cols].apply(LabelEncoder().fit_transform)\ndf1.head(n=5)","d927943b":"plt.figure(figsize=(25,20))\nplt.subplot(3,2,1)\nsns.countplot(data = df1,x = df1['Location'])\nplt.subplot(3,2,2)\nsns.countplot(data = df1,x=df1['WindGustDir'])\nplt.subplot(3,2,3)\nsns.countplot(data = df1,x=df1['WindDir9am'])\nplt.subplot(3,2,4)\nsns.countplot(data = df1,x = df1['WindDir3pm'])\nplt.subplot(3,2,5)\nsns.countplot(data = df1,x=df1['RainToday'])\nplt.subplot(3,2,6)\nsns.countplot(data = df1,x=df1['RainTomorrow'])\nplt.show()","001da732":"plt.figure(figsize=(15,10))\nsns.heatmap(df1.corr(),annot=True,cmap='coolwarm')\nplt.show()","2db46a63":"plt.figure(figsize=(30,40))\nfor i,col in enumerate(df1.columns,1):\n    plt.subplot(15,2,i)\n    sns.boxplot(data=df1,x=col, orient=\"h\")\nplt.show()","f0637379":"plt.figure(figsize=(30,40))\nfor i,column in enumerate(df1.columns,1):\n    plt.subplot(15,2,i)\n    sns.violinplot(data = df1,x = df1[column],orient = 'h')\nplt.show()","31ad62be":"zscore = np.abs(stats.zscore(df1))\nprint(zscore)","811fa2a6":"print(np.where(zscore > 3))","bf3b79be":"df2 = df1[(zscore<3).all(axis=1)]","0d5e8931":"df1.shape,df2.shape","ca2f4011":"x = df2.drop(['RainToday','RainTomorrow','Temp3pm','Temp9am'],axis=True)\ny = df2['RainTomorrow']","15ba7373":"x = x.values\ny = y.values","2edbe656":"split = int(0.9*x.shape[0])\nprint(split)\n\nx_train = x[:split,:]\ny_train = y[:split]\n\nx_test = x[split:,:]\ny_test = y[split:]\n\nprint(x_train.shape,y_train.shape)\nprint(x_test.shape,y_test.shape)","6feb5fc0":"x_mean = x_train.mean(axis=0)\nx_std = x_train.std(axis=0)\n\nx_train = (x_train-x_mean)\/x_std\n\nx_test = (x_test-x_mean)\/x_std","dd7ffda9":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import confusion_matrix","aa34e555":"# Calculate accuracy percentage between two lists\ndef accuracy_score(actual, predicted):\n    correct = 0\n    for i in range(len(actual)):\n        if actual[i] == predicted[i]:\n            correct += 1\n    return correct \/ float(len(actual)) * 100.0","2de7ee8d":"k_clf = KNeighborsClassifier()\nk_clf.fit(x_train,y_train)\n\nk_acc = accuracy_score(y_test,k_clf.predict(x_test))\n\nprint(\"Train Set Accuracy:\"+str(accuracy_score(y_train,k_clf.predict(x_train))))\nprint(\"Test Set Accuracy:\"+str(accuracy_score(y_test,k_clf.predict(x_test))))","1043f3df":"l_reg = LogisticRegression()\nl_reg.fit(x_train,y_train)\n\nl_acc = accuracy_score(y_test,l_reg.predict(x_test))\n\nprint(\"Train Set Accuracy:\"+str(accuracy_score(y_train,l_reg.predict(x_train))))\nprint(\"Test Set Accuracy:\"+str(accuracy_score(y_test,l_reg.predict(x_test))))","2d45d917":"d_clf = DecisionTreeClassifier()\nd_clf.fit(x_train,y_train)\n\nd_acc = accuracy_score(y_test,d_clf.predict(x_test))\n\nprint(\"Train Set Accuracy:\"+str(accuracy_score(y_train,d_clf.predict(x_train))))\nprint(\"Test Set Accuracy:\"+str(accuracy_score(y_test,d_clf.predict(x_test))))","78397018":"r_clf = RandomForestClassifier()\nr_clf.fit(x_train,y_train)\n\nr_acc = accuracy_score(y_test,r_clf.predict(x_test))\n\nprint(\"Train Set Accuracy:\"+str(accuracy_score(y_train,r_clf.predict(x_train))))\nprint(\"Test Set Accuracy:\"+str(accuracy_score(y_test,r_clf.predict(x_test))))","88ddf93a":"g_clf = GaussianNB()\ng_clf.fit(x_train,y_train)\n\ng_acc = accuracy_score(y_test,g_clf.predict(x_test))\n\nprint(\"Train Set Accuracy:\"+str(accuracy_score(y_train,g_clf.predict(x_train))))\nprint(\"Test Set Accuracy:\"+str(accuracy_score(y_test,g_clf.predict(x_test))))","10fe24ea":"b_clf = BaggingClassifier()\nb_clf.fit(x_train,y_train)\n\nb_acc = accuracy_score(y_test,b_clf.predict(x_test))\n\nprint(\"Train Set Accuracy:\"+str(accuracy_score(y_train,b_clf.predict(x_train))))\nprint(\"Test Set Accuracy:\"+str(accuracy_score(y_test,b_clf.predict(x_test))))","ffaa37e5":"gb_clf = GradientBoostingClassifier()\ngb_clf.fit(x_train,y_train)\n\ngb_acc = accuracy_score(y_test,gb_clf.predict(x_test))\n\nprint(\"Train Set Accuracy:\"+str(accuracy_score(y_train,gb_clf.predict(x_train))))\nprint(\"Test Set Accuracy:\"+str(accuracy_score(y_test,gb_clf.predict(x_test))))","a8478db8":"x_clf = XGBClassifier()\nx_clf.fit(x_train,y_train)\n\nx_acc = accuracy_score(y_test,x_clf.predict(x_test))\n\nprint(\"Train Set Accuracy:\"+str(accuracy_score(y_train,x_clf.predict(x_train))))\nprint(\"Test Set Accuracy:\"+str(accuracy_score(y_test,x_clf.predict(x_test))))","0d0189a4":"models = pd.DataFrame({\n    'Model': ['Logistic','KNN',  'Decision Tree',\n             'Random Forest',  'Gaussian','Bagging','Boosting','xgboost'],\n    'Score': [ l_acc,k_acc, d_acc, r_acc, g_acc,b_acc,gb_acc,x_acc]\n})\n\nmodels.sort_values(by = 'Score', ascending = False)","15e6363f":"plt.figure(figsize=(10,6))\nsns.barplot(x='Model',y='Score',data=models)\nplt.show()","cc4527eb":"# Bagging Classifier","07c8533b":"Filling numerical empty column with median value of that row and for categorical filling empty values with its corresponding previous value","34aa922d":"# GaussianNB","0364ab60":"# Data Visualization","be8a9802":"# Gradient Boosting Classifier","85d300cd":"# <center> <div class=\"alert alert-block alert-info\">  <span style=\"color:crimson;\"> Data Preprocessing <\/center>","7bddcd59":"# <center> <div class=\"alert alert-block alert-info\">  <span style=\"color:crimson;\"> Rain Prediction \u2614 <\/center>\n\n![image.png](attachment:cbd782f4-5697-4ce7-92eb-0d41b1050685.png)","4e529b43":"# <center> <div class=\"alert alert-block alert-info\">  <span style=\"color:crimson;\"> Models <\/center>","3d1b9163":"# Data Cleaning \ud83e\uddf9","4d2f2c9c":"Rmoving high colinearity \n* MinTemp-Temp9am-90%\n* MinTemp-MaxTemp-73%\n* MinTemp-Temp3pm-70%\n* MaxTemp-Temp3pm-97%","455bacad":"# KNN","b5094496":"# DecisionTree Classifier","828cd46d":"# Standadization","02a59f87":"# Outliers removal","4e822a9f":"# XGB Classifier","39e31f0c":"\n## Libraries\ud83d\udcda","6b3186ae":"# <center> <div class=\"alert alert-block alert-info\">  <span style=\"color:crimson;\"> Exploratory Data Analysis <\/center>","6f4a3382":"# <center> <div class=\"alert alert-block alert-info\">  <span style=\"color:crimson;\"> Data Description <\/center>\n* **Date:** The date of observation\n* **Location:** The common name of the location of the weather station\n* **Temprature:** The (maximum & Minimum) temperature in degrees celsius\n* **Rainfall:** The amount of rainfall recorded for the day in mm\n* **Evaporation:** The so-called Class A pan evaporation (mm) in the 24 hours to 9am\n* **Sunshine:** The number of hours of bright sunshine in the day\n* **WindGustDir:** The direction of the strongest wind gust in the 24 hours to midnight\n* **WindGustSpeed:**The speed (km\/h) of the strongest wind gust in the 24 hours to midnight\n* **WindDir9am:** Direction of the wind at 9am\n* **WindDir3pm:** Direction of the wind at 3pm\n* **WindSpeed9am:** Wind speed (km\/hr) averaged over 10 minutes prior to 9am\n* **WindSpeed3pm:** Wind speed (km\/hr) averaged over 10 minutes prior to 3pm\n* **Humidity9am:** Humidity (percent) at 9am\n* **Humidity3pm:** Humidity (percent) at 3pm\n* **Pressure9am:** Atmospheric pressure (hpa) reduced to mean sea level at 9am\n* **Pressure3pm:** Atmospheric pressure (hpa) reduced to mean sea level at 3pm\n* **Cloud9am:** Fraction of sky obscured by cloud at 9am. This is measured in \"oktas\", which are a unit of eigths. It records how many\n* **Cloud3pm:** Fraction of sky obscured by cloud (in \"oktas\": eighths) at 3pm. See Cload9am for a description of the values\n* **Temp9am:** Temperature (degrees C) at 9am\n* **Temp3pm:** Temperature (degrees C) at 3pm\n* **RainToday:** Boolean: 1 if precipitation (mm) in the 24 hours to 9am exceeds 1mm, otherwise 0\n* **RainTomorrow:** The amount of next day rain in mm. Used to create response variable RainTomorrow. A kind of measure of the \"risk\"","4b9fe648":"# Logistic Regression","c2ca25d4":"# Descriptive Statistics","aa7e4592":"# Support Vector Classifier","873145a3":"# RandomForest Classifier","ae713f3f":"<h1 style='color:red;> Data Cleaning \ud83e\uddf9 <\/h1>"}}