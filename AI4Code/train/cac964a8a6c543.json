{"cell_type":{"e49441c9":"code","a8159c66":"code","33f5cdcd":"code","9418b4b4":"code","90878674":"code","5f248e97":"code","d653c89a":"code","1b1313e1":"code","c57b1ec3":"code","40850a85":"code","1f893d48":"code","d4286995":"code","e0d2717b":"code","9fbbd93c":"code","d62feb45":"markdown","b82bc007":"markdown","38da2422":"markdown","b066859e":"markdown","968b2cd1":"markdown","62328db8":"markdown","79195c0e":"markdown","460cf985":"markdown","a9f573f0":"markdown","290669a3":"markdown","766c63b1":"markdown","28c97c4a":"markdown"},"source":{"e49441c9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a8159c66":"!pip install tensorflow keras sklearn matplotlib pandas pil","33f5cdcd":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport cv2\nimport tensorflow as tf\nfrom PIL import Image\nimport os\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils import to_categorical\nfrom keras.models import Sequential, load_model\nfrom keras.layers import Conv2D, MaxPool2D, Dense, Flatten, Dropout","9418b4b4":"\ndata=[]\nlabels=[]\n\nheight = 30\nwidth = 30\nchannels = 3\nclasses = 43\nn_inputs = height * width*channels\n\nfor i in range(classes) :\n    path = \"\/kaggle\/input\/gtsrb-german-traffic-sign\/Train\/{0}\/\".format(i)\n    print(path)\n    Class=os.listdir(path)\n    for a in Class:\n        try:\n            image=cv2.imread(path+a)\n            image_from_array = Image.fromarray(image, 'RGB')\n            size_image = image_from_array.resize((height, width))\n            data.append(np.array(size_image))\n            labels.append(i)\n        except AttributeError:\n            print(\" \")\n            \nCells=np.array(data)\nlabels=np.array(labels)\n\n\n#Randomize the order of the input images\ns=np.arange(Cells.shape[0])\nnp.random.seed(42)\nnp.random.shuffle(s)\nCells=Cells[s]\nlabels=labels[s]","90878674":"\n(X_train,X_val)=Cells[(int)(0.15*len(labels)):],Cells[:(int)(0.15*len(labels))]\n\nX_train = X_train.astype('float32')\/255 \nX_val = X_val.astype('float32')\/255\n\n(y_train,y_val)=labels[(int)(0.15*len(labels)):],labels[:(int)(0.15*len(labels))]\n\n","5f248e97":"\nfrom keras.utils import to_categorical\ny_train = to_categorical(y_train, 43)\ny_val = to_categorical(y_val, 43)","d653c89a":"#Building the model\nmodel = Sequential()\nmodel.add(Conv2D(filters=32, kernel_size=(5,5), activation='relu', input_shape=X_train.shape[1:]))\nmodel.add(Conv2D(filters=32, kernel_size=(5,5), activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Dropout(rate=0.3))\nmodel.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))\nmodel.add(Conv2D(filters=128, kernel_size=(2, 2), activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Dropout(rate=0.3))\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dropout(rate=0.5))\nmodel.add(Dense(43, activation='softmax'))","1b1313e1":"\nmodel.compile(\n    loss='categorical_crossentropy', \n    optimizer='adam', \n    metrics=['accuracy']\n)","c57b1ec3":"X_test=X_val\n\ny_test=y_val","40850a85":"epochs = 20\nhistory = model.fit(X_train,\n                    y_train,\n                    batch_size=32,\n                    epochs=epochs,\n                    validation_data=(X_test, y_test))","1f893d48":"model.save(\"model.h5\")","d4286995":"\nscores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n","e0d2717b":"\nplt.figure(0)\nplt.plot(history.history['accuracy'], label='training accuracy')\nplt.plot(history.history['val_accuracy'], label='val accuracy')\nplt.title('Accuracy')\nplt.xlabel('epochs')\nplt.ylabel('accuracy')\nplt.legend()\nplt.show()","9fbbd93c":"plt.figure(1)\nplt.plot(history.history['loss'], label='training loss')\nplt.plot(history.history['val_loss'], label='val loss')\nplt.title('Loss')\nplt.xlabel('epochs')\nplt.ylabel('loss')\nplt.legend()\nplt.show()","d62feb45":"# Compilation of the model","b82bc007":"# Spliting the images into train and validation sets","38da2422":"# Evaluate the model","b066859e":"#  Reading the input images and putting them into a numpy array","968b2cd1":"# Using one hote encoding for the train and validation labels","62328db8":"Main Notebook: https:\/\/www.kaggle.com\/sohelranaccselab\/99-68-acc-on-german-traffic-sign-recognition\/output?scriptVersionId=44987808","79195c0e":"# Training & Valid loss curve","460cf985":"# Environment Setup","a9f573f0":"# Model Weigths Save","290669a3":"# Model Training","766c63b1":"# Import libraries","28c97c4a":"# Plotting graphs for accuracy "}}