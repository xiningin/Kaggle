{"cell_type":{"33a38985":"code","ff3ec045":"code","eea7809d":"code","07872eae":"code","d74f0cf5":"code","fc6f9fb1":"code","2feae0c8":"code","a3ab5102":"code","f145e974":"code","261009d5":"code","1a021229":"code","f21e780d":"code","b4784307":"code","f435d674":"code","f305606d":"code","86e6118a":"code","558680a3":"code","510ed33f":"code","e140291d":"code","7289b6cc":"code","98e3c931":"code","807e32b7":"code","12933677":"code","c999aeac":"code","9071c00b":"code","512b858e":"code","11a309a8":"code","67720cfa":"markdown","3234eb37":"markdown","98d438c2":"markdown","54172e78":"markdown"},"source":{"33a38985":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\nimport pandas.io.date_converters as conv\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ff3ec045":"data = pd.read_csv('..\/input\/athlete_events.csv')\n","eea7809d":"# Gives general information about data. Data type, columns name,\n# Total columns, null object or non-null object, \n# Number of Index, File size gives information such as\ndata.info()","07872eae":"#data.head() First 5 lines by default\n\ndata.head(10)","d74f0cf5":"#data.tail() Last 5 lines by default\n\ndata.tail(10)","fc6f9fb1":"# Gives the data types and column names of the columns\n\ndata.dtypes","2feae0c8":"data['City'] #Returns the 'City' column in 'Data'.With ID","a3ab5102":"data.columns #Returns The columns of the 'Data'.","f145e974":"data.corr() # correlation between features","261009d5":"#CORRELATION MAP\nf,ax = plt.subplots(figsize=(15, 15))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()\n\n#annot=True :It gives us correlation values inside the boxes\n#linewidths= .5 :Thickness of line between boxes\n#fmt= '.1f' :It gives how many will be written of correlation values after comma","1a021229":"#Line Plot \n# color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\ndata.Age.plot(kind='line', color='blue',label='Age',linewidth=1,alpha=0.5,grid=True,linestyle='-')\ndata.Height.plot(kind='line',color = 'yellow',label ='Height',linewidth=1, alpha = 0.5,grid = True,linestyle = '-')\nplt.legend(loc='upper right')\nplt.xlabel('x axis')\nplt.ylabel('y axis')\nplt.title('Age\/Height')\nplt.show()","f21e780d":"#Scatter is better when there is correlation between two variables\ndata.plot(kind='scatter',x='Age', y='Year',alpha=0.5,color='red')\nplt.xlabel('Age')\nplt.ylabel('Year')\nplt.title('Age-Year Scatter Plot')\nplt.show()","b4784307":"#Histogram is better when we need to see distribution of numerical data.\n#bins = number of bar in figure\ndata.Height.plot(kind='hist',bins=50,figsize=(18,18),grid=True)\nplt.xlabel('Height')\n#plt.clf()\nplt.show()","f435d674":"x = data['Age']>40\ndata[x]\n#Returns over 40 years old\n","f305606d":"# Filtering Pandas with logicial_and method\nx = np.logical_and(data['Age']>24,data['Height']>170)\ndata[x]\n#Age greater than 24 and greater than 170 cm","86e6118a":"x = np.logical_and(data['Sex'] == 'F',data['Year']  >= 1992) #women of gender and older than olympic year 1992\ny = np.logical_and(data['Age']>20,data['Height']>170)  #Age greater than 20 and greater than 170 cm\nz = np.logical_and(x,y) #'Sex' == 'F', 'Year' >= 1992 , 'Age' > 20, 'Height' > 170cm\n#data[z] \na = np.logical_and(data['NOC'] == 'USA',data['Season'] == 'Summer') # 'NOC'== 'USA', 'Season' = 'Summer'\nb = np.logical_and(data['Medal'] == 'Gold',data['City'] == 'London') # 'Medal' = 'Gold', 'City' = 'London'\nc = np.logical_and(a,b) #'NOC'== 'USA', 'Season' = 'Summer', 'Medal' = 'Gold', 'City' = 'London'\n#data[c]\n\nd = np.logical_and(z,c) #'Sex' == 'F', 'Year' >= 1992 , 'Age' > 20, 'Height' > 170cm, 'NOC'== 'USA', 'Season' = 'Summer', 'Medal' = 'Gold', 'City' = 'London'\ndata[d]","558680a3":"data.describe() #Just numerical datas\n","510ed33f":"data.sort_index(axis=1, ascending=False) #Sorting by an axis\n","e140291d":"data.sort_values(by='Age') #Sort by values","7289b6cc":"data[0:3]","98e3c931":"data[1900:1993] #for index","807e32b7":"data.iloc[1900] #1900. index","12933677":"data.iloc[3:5,0:2] #3 to 5 index and 0 to 2nd column","c999aeac":"data.iloc[[1,2,4],[0,2]] #index number 1,2,4 and column number 0 and 2","9071c00b":"data.iloc[1:3,:] #1 to 3 index and all columns","512b858e":"dates = pd.date_range('20180101', periods=6)\ndates","11a309a8":"dataFrame = pd.DataFrame(np.random.randn(6,4), index=dates, columns=list('ABCD'))\ndataFrame","67720cfa":"***HISTOGRAM***","3234eb37":"***Filtering***","98d438c2":"***SCATTER PLOT***","54172e78":"***L\u0130NE PLOT***"}}