{"cell_type":{"9634e946":"code","d5beb082":"code","d26659ba":"code","9bd8ba98":"code","22b15004":"code","a0de0ea9":"code","0b1474be":"code","066ab3c2":"code","64782bfc":"code","32161198":"code","1ca6a632":"code","d2cbbecd":"code","a1c30dd5":"code","fae29d79":"code","647f2a98":"code","9555b28b":"code","3a55c67f":"code","5db77931":"code","0b115421":"code","95fe9e42":"code","aa9cbf0b":"code","2acc1c63":"code","3b8672cd":"code","be568165":"code","c9b99166":"code","f623824e":"code","de97d436":"code","9d3e05a5":"code","2b8308e9":"code","1bd61161":"code","c4bdf0fb":"code","c249c899":"code","d95bf5e0":"code","c82f88cf":"code","0951160d":"code","5b7e8a7d":"code","89ad7e8a":"code","fd60dd0e":"code","46df2ee8":"code","16f705a0":"code","e36be545":"code","0ee9d3fe":"code","4523afa1":"code","1c8dea80":"markdown","a31dd4ec":"markdown","71b0cc0c":"markdown","55aa1b33":"markdown","73613682":"markdown","b4ac96de":"markdown","220e20a9":"markdown","6ca12a88":"markdown","0cb0eff3":"markdown","f20357e2":"markdown","ec5ce8e8":"markdown","cc7e6ab4":"markdown","3b465b3b":"markdown","f50471c3":"markdown","5108806b":"markdown","075a7ec9":"markdown","55cdc60c":"markdown","fbef6948":"markdown","4a37cc44":"markdown","998bb12f":"markdown","e81aa1f1":"markdown","92b7509c":"markdown","127594cc":"markdown","4ff811ad":"markdown","9125d7e5":"markdown","4b623ec3":"markdown","3fe322ab":"markdown","6ff1298a":"markdown","bade3ed6":"markdown","6dbcfd1a":"markdown","c0583b71":"markdown","d24bb7ec":"markdown","5ffba2b8":"markdown","47f4eb15":"markdown"},"source":{"9634e946":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.set_printoptions(precision=4)\nfrom sklearn.metrics import accuracy_score, recall_score, precision_score, f1_score , confusion_matrix\nfrom sklearn.inspection import permutation_importance\nimport warnings\nwarnings.filterwarnings('ignore')","d5beb082":"df = pd.read_csv('\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')\ndf.head(5)","d26659ba":"df.shape","9bd8ba98":"df_all = df.copy()\n\ndf_more = df[df['output']==1]\n\ndf_less = df[df['output']==0]","22b15004":"def plot_pie(column, title=\"All\"):\n    fig,axs = plt.subplots(1,1)\n    data = df_all[column].value_counts()\n    plt.pie(data,autopct='%1.2f%%',labels=data.index)\n    plt.title(title)\n    plt.show()\n    \ndef plot_hist(column, title=\"all\"):\n    plt.hist(df_all[column],density=True)\n    plt.title(title)\n    plt.show()\n\ndef plot_bar(column, sort=False, title=\"all\"):\n    if sort:\n        data_all = df_all[column].value_counts().sort_index()\n    else:\n        data_all = df_all[column].value_counts()\n    plt.bar(data_all.index,data_all)\n    plt.title(title)\n    plt.show()\n    \ndef plot_bar_compare(column, sort=False):\n    if sort:\n        data_churned = df_more[column].value_counts().sort_index()\n        data_nonchurned = df_less[column].value_counts().sort_index()\n    else:\n        data_churned = df_more[column].value_counts()\n        data_nonchurned = df_less[column].value_counts()\n    \n    fig,axs = plt.subplots(2,1)\n    plt.subplots_adjust(left=0, bottom=0, right=1, top=2, wspace=0, hspace=0.2)\n    axs[0].bar(data_nonchurned.index,data_nonchurned)\n    axs[0].title.set_text('No Stroke')\n    axs[1].bar(data_churned.index,data_churned)\n    axs[1].title.set_text('Has Stroke')\n    plt.show()\n\ndef plot_hist_compare(column, bins=5):\n    plt.hist([df_less[column], df_more[column]] , color=['c','r'])\n    plt.legend(('Less Chance', 'More Chance'))\n    plt.show()\n    \ndef plot_pie_compare(column):\n    data_churned = df_more[column].value_counts()\n    data_nonchurned = df_less[column].value_counts()\n    \n    fig,axs = plt.subplots(2,1)\n    plt.subplots_adjust(left=0, bottom=0, right=1, top=2, wspace=0, hspace=0.2)\n    axs[0].pie(data_nonchurned,autopct='%1.2f%%',labels=data_nonchurned.index)\n    axs[0].title.set_text('Less Chance')\n    axs[1].pie(data_churned,autopct='%1.2f%%',labels=data_churned.index)\n    axs[1].title.set_text('More Chance')\n    plt.show()\n\ndef plot_boxplot(column, title=\"\"):\n    sns.boxplot(x=\"output\", y=column, palette=[\"c\", \"r\"],\n            hue=\"output\",  data=df_all).set_title(title, fontsize=15)\n\ndef check_median(column):\n    data_churned = df_more[column].describe()\n    data_nonchurned = df_less[column].describe()\n    print('Less Chance: {}'.format(data_nonchurned['50%']))\n    print('More Chance: {}'.format(data_churned['50%']))\n\ndef check_most(column):\n    data_churned = df_more[column].value_counts()\n    data_nonchurned = df_less[column].value_counts()\n    print('Less Chance: {}'.format(data_nonchurned.index[0]))\n    print('More Chance: {}'.format(data_churned.index[0]))","a0de0ea9":"plot_pie('output')","0b1474be":"df.isnull().sum()","066ab3c2":"plot_hist('age')\nplot_hist_compare('age')","64782bfc":"check_median('age')","32161198":"plot_pie('sex')\nplot_pie_compare('sex')","1ca6a632":"plot_pie('cp')\nplot_pie_compare('cp')","d2cbbecd":"check_most('cp')","a1c30dd5":"plot_hist('trtbps')","fae29d79":"plot_boxplot('trtbps')","647f2a98":"check_median('trtbps')","9555b28b":"plot_hist('chol')\nplot_hist_compare('chol')","3a55c67f":"plot_boxplot('chol')","5db77931":"check_median('chol')","0b115421":"plot_pie(\"fbs\")\nplot_pie_compare('fbs')","95fe9e42":"check_most('fbs')","aa9cbf0b":"plot_pie(\"restecg\")\nplot_pie_compare('restecg')","2acc1c63":"check_most(\"restecg\")","3b8672cd":"plot_hist('thalachh')\nplot_hist_compare('thalachh')","be568165":"plot_boxplot('thalachh')","c9b99166":"check_median('thalachh')","f623824e":"plot_pie('exng')\nplot_pie_compare('exng')","de97d436":"check_most('exng')","9d3e05a5":"plot_hist('oldpeak')\nplot_hist_compare('oldpeak')","2b8308e9":"plot_boxplot('oldpeak')","1bd61161":"check_median('oldpeak')","c4bdf0fb":"plot_pie('slp')\nplot_pie_compare('slp')","c249c899":"check_most('slp')","d95bf5e0":"plot_pie('caa')\nplot_pie_compare('caa')","c82f88cf":"check_most('caa')","0951160d":"plot_pie('thall')\nplot_pie_compare('thall')","5b7e8a7d":"check_most('thall')","89ad7e8a":"X = df.copy()\n\ny = X['output']\n\n#Drop the Attrition_Flag Column\nX = X.drop(['output','age','trtbps','fbs'], axis=1)","fd60dd0e":"#transform categorical data\nX = pd.get_dummies(X, columns=['cp','restecg', 'exng', 'slp', 'caa', 'thall'], drop_first=True)","46df2ee8":"X.columns","16f705a0":"#Split to data train and test\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 1234)","e36be545":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\n\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","0ee9d3fe":"# Import ML Libraries\nfrom xgboost import XGBClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom catboost import CatBoostClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\n\nclassifiers = [[CatBoostClassifier(verbose=0),'CatBoost Classifier'],[XGBClassifier(),'XGB Classifier'], [RandomForestClassifier(),'Random Forest'], \n    [KNeighborsClassifier(), 'K-Nearest Neighbours'], [SGDClassifier(),'SGD Classifier'], [SVC(),'SVC'],[LGBMClassifier(),'LGBM Classifier'],\n              [GaussianNB(),'GaussianNB'],[DecisionTreeClassifier(),'Decision Tree Classifier'],[LogisticRegression(),'Logistic Regression']]","4523afa1":"for cls in classifiers:\n    model = cls[0]\n    model.fit(X_train, y_train)\n    \n    y_pred = model.predict(X_test)\n    print(cls[1])\n    print ('Confusion Matrix:')\n    print(confusion_matrix(y_test, y_pred))\n    print(\"Accuracy : \", accuracy_score(y_test, y_pred) *  100)\n    print(\"Recall : \", recall_score(y_test, y_pred) *  100)\n    print(\"Precision : \", precision_score(y_test, y_pred) *  100)\n    print(\"F1 score : \", f1_score(y_test, y_pred) *  100)","1c8dea80":"# check for missing data","a31dd4ec":"the value of thalachh (maximum heart rate achieved) from \"more chance\" group is higher than \"less chance\" group","71b0cc0c":"The dataset is balance","55aa1b33":"## chol ","73613682":"less chance group is dominated by exng 1 and more chance group is dominated by exng 0","b4ac96de":"the percentage of caa 0 from more chance group is 46.18% higher than less chance group","220e20a9":"## caa","6ca12a88":"## sex","0cb0eff3":"less chance group is dominated by restecg 0 and more chance group is dominated by restecg 1","f20357e2":"## restecg","ec5ce8e8":"## slp","cc7e6ab4":"## thall","3b465b3b":"less chance group is dominated by thall 3 and more chance group is dominated by thall 2","f50471c3":"No Clear Difference","5108806b":"## cp","075a7ec9":"# Conclusion\n\nthe best algorithm for predicting Heart Attack is **K-Nearest Neighbours** \n\n* acc: 84.61538461538461, \n* recall: 88.23529411764706, \n* precision: 84.90566037735849, \n* f1: 86.53846153846155)","55cdc60c":"No missing data found","fbef6948":"# Data Visualization Result\n\n| | Less chance | More Chance | Note\n| :- | :-: | :-: | :-: |\n| age (Median) | 58 | 52| No Clear Difference\n| sex (Most) | 1 | 1 | the percentage of gender label 0 from \"more chance\" group is 26.25% higher than \"less chance\" group\n| cp (Most) | 0 | 2 | less chance group is dominated by cp 0 and more chance group is dominated by cp 2\n| trtbps (Median) | 130 | 130 | No Clear Difference\n| chol (Median) | 249 | 234 | the median of \"less chance\" group is little higher than \"more chance group\". but there is No Clear Difference from both group\n| fbs (Most) | 0 | 0  | No Clear Difference\n| restecg (Most)| 0 | 1 | less chance group is dominated by restecg 0 and more chance group is dominated by restecg 1\n| thalachh (Median) | 142 | 161 | the value of thalachh (maximum heart rate achieved) from \"more chance\" group is higher than \"less chance\" group\n| exng (Most) | 1 | 0 | less chance group is dominated by exng 1 and more chance group is dominated by exng 0\n| oldpeak (Median)| 1.4 | 0.2 | the median of oldpeak from more chance group is lower than less chance group \n| slp (Most) | 1 | 2|less chance group is dominated by slp 1 and more chance group is dominated by slp 2\n|caa (Most) |0|0|the percentage of caa 0 from more chance group is 46.18% higher than less chance group\n|thall (Most) |3|2| less chance group is dominated by thall 3 and more chance group is dominated by thall 2","4a37cc44":"the median of oldpeak from more chance group is lower than less chance group","998bb12f":"the percentage of gender label 0 from \"more chance\" group is 26.25% higher than \"less chance\" group","e81aa1f1":"# EDA","92b7509c":"# Checking for imbalance data","127594cc":"# Prediction","4ff811ad":"## exng","9125d7e5":"## oldpeak","4b623ec3":"# Data Preprocessing","3fe322ab":"## thalachh","6ff1298a":"less chance group is dominated by slp 1 and more chance group is dominated by slp 2","bade3ed6":"cp 2 is dominated in \"more chance\" group and cp 0 is dominated in \"less chance\" group","6dbcfd1a":"No Clear Difference","c0583b71":"No Clear Difference","d24bb7ec":"## trtbps ","5ffba2b8":"## age","47f4eb15":"## fbs"}}