{"cell_type":{"d2728dde":"code","50fa8e2d":"code","b2ac65d3":"code","55a9e6aa":"code","9881dc84":"code","9c68bf5b":"code","691df776":"code","707ba12a":"code","2b3e3e2b":"code","4cfbdf5e":"code","4b8de591":"code","ff1ce0a9":"code","08e9e744":"code","46799ca2":"code","1f100480":"code","4e3436fb":"code","bfdf73c2":"code","b2b74cfd":"code","cbbef456":"code","1fc11f2c":"code","e9809794":"code","435d48d5":"code","9f93b8d8":"code","614c6a88":"code","8484e673":"code","328a335d":"code","6f0b45c8":"code","d56663da":"code","d34fef1c":"code","b2b5c929":"code","ab8e3f93":"code","563f0c6d":"code","d9958224":"code","14bb1b74":"code","18f476f5":"code","8fa01b44":"code","f7badcf7":"code","87751330":"code","a53bee11":"code","cdaba404":"code","f8f69a68":"code","ffbd97b1":"code","9d304788":"code","99d444e3":"code","6365326e":"code","60fa0737":"code","b80c7dca":"code","680fd060":"code","a8c40a10":"code","5cfb397c":"code","403c7ac7":"code","8ccd4b33":"code","db3c09dc":"code","753e7262":"code","47a41af5":"code","f1e34cde":"code","2b310724":"code","6793058b":"code","bb756d04":"code","be662e7a":"code","f1a172c3":"code","e9d6ce4f":"code","ffef0f56":"code","34fc7701":"code","7bcc9f83":"code","3fde44b7":"code","2c6494f2":"code","a4832e12":"code","750b161c":"code","edd809a1":"code","1770298d":"code","d414dde5":"code","33968ad6":"code","3b67939b":"code","1878ecb1":"code","66b95d6c":"code","d1864426":"code","989ba878":"code","e8a00bc6":"code","76d1ed56":"code","75be5a81":"code","c10add3f":"code","f6a423fb":"code","993bffbf":"code","716085cd":"code","bee86bfa":"code","b2a658a6":"code","432fe9c8":"code","93b07c96":"code","4cf99f90":"code","fa11d930":"code","dc856c2c":"code","eddb50d2":"code","2a0cf08b":"code","571696b4":"code","b64bc906":"code","a39d3c1a":"code","273b0ac9":"code","7462a8b4":"code","8420bc47":"code","54b85573":"code","5d9be51a":"code","bdf76e87":"code","453302bc":"code","adfe2cf7":"code","1c9d7393":"code","0d0d62ea":"markdown","3735f504":"markdown","f13ad663":"markdown","70e36feb":"markdown","95a1e4b7":"markdown","50f72f25":"markdown","3aacc10d":"markdown","ea8d72e4":"markdown","61ef0445":"markdown","0c03fe12":"markdown","4820ab71":"markdown","eb768693":"markdown","3acc76ef":"markdown","2d98f42e":"markdown","9683742d":"markdown","106a8ac3":"markdown","21b1c1bc":"markdown","ff05ea7f":"markdown","d6b2b028":"markdown","f203b2a7":"markdown","3b28b706":"markdown","3cc2ba51":"markdown","7645b1f1":"markdown","dfaeb9cf":"markdown","44fba717":"markdown","16b99cfb":"markdown","cf6c6a81":"markdown","aba15a45":"markdown","59a81da0":"markdown","767663d7":"markdown","b3d10d75":"markdown","15a54a7d":"markdown","d280c135":"markdown","eb8b55a3":"markdown","8d147aeb":"markdown","0cec07a1":"markdown","1336f7cd":"markdown","5c7d7d9a":"markdown","685d45bd":"markdown","2e5af02f":"markdown"},"source":{"d2728dde":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","50fa8e2d":"data = pd.read_csv(\"\/kaggle\/input\/bitcoin-historical-data\/bitstampUSD_1-min_data_2012-01-01_to_2021-03-31.csv\")\ndata2 = pd.read_csv(\"\/kaggle\/input\/pokemon-challenge\/pokemon.csv\")\ndel data2[\"#\"]\ndata2.head(10)","b2ac65d3":"data.info()","55a9e6aa":"data.corr()","9881dc84":"#correlation map\nf,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","9c68bf5b":"data.columns","691df776":"# Line Plot\n\ndata[\"High\"].plot(kind = 'line', color = 'g',label = 'High',linewidth=1,alpha = 0.5,grid = True,linestyle = ':')\ndata['Volume_(BTC)'].plot(color = 'r',label = 'Low',linewidth=1, alpha = 0.5,grid = True,linestyle = '-.')\n\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('x axis')              # label = name of label\nplt.ylabel('y axis')\nplt.title('Line Plot')            # title = title of plot\nplt.show()","707ba12a":"# Scatter Plot \n# x = attack, y = defense\ndata.plot(kind='scatter', x='Volume_(BTC)', y='High',alpha = 0.5,color = 'red')\nplt.ylabel('High')              # label = name of label\nplt.xlabel('Volume_(BTC)')\nplt.title('High-Low Scatter Plot')      ","2b3e3e2b":"data[\"Open\"].plot(kind=\"hist\", bins=50, figsize = (12,12))\nplt.show()","4cfbdf5e":"# clf() = cleans it up again you can start a fresh\ndata.Open.plot(kind = 'hist',bins = 50)\nplt.clf()\n# We cannot see plot due to clf()","4b8de591":"#create dictionary and look its keys and values\ndictionary = {'highest' : 66000, 'lowest' : 0}\nprint(dictionary.keys())\nprint(dictionary.values())","ff1ce0a9":"# Keys have to be immutable objects like string, boolean, float, integer or tubles\n# List is not immutable\n# Keys are unique\ndictionary['highest'] = 67000    # update existing entry\nprint(dictionary)\ndictionary['middle'] = 34000       # Add new entry\nprint(dictionary)\ndel dictionary[\"middle\"]\nprint(dictionary)\nprint(\"highest\" in dictionary)\ndictionary.clear()\nprint(dictionary)","08e9e744":"series = data['High']        # data['Defense'] = series\nprint(type(series))\ndata_frame = data[['High']]  # data[['Defense']] = data frame\nprint(type(data_frame))","46799ca2":"# 1 - Filtering Pandas data frame\nx = data['High']>50000     # There are only 3 pokemons who have higher defense value than 200\ndata[x]","1f100480":"# 2 - Filtering pandas with logical_and\n# There are only 2 pokemons who have higher defence value than 2oo and higher attack value than 100\ndata[np.logical_and(data['Open']>40000, data['Close']<49000 )]","4e3436fb":"# This is also same with previous code line. Therefore we can also use '&' for filtering.\ndata[(data['Open']>45000) & (data['Close']>50000)]","bfdf73c2":"i = -5\nwhile i != 5 :\n    print('i is: ',i)\n    i +=1\nprint(i,' is equal to 5')","b2b74cfd":"# Stay in loop if condition( i is not equal 5) is true\nlis = [1,2,3,4,5]\nfor i in lis:\n    print('i is: ',i)\nprint('')\n\n# Enumerate index and value of list\n# index : value = 0:1, 1:2, 2:3, 3:4, 4:5\nfor index, value in enumerate(lis):\n    print(index,\" : \",value)\nprint('')\n\n# For dictionaries\n# We can use for loop to achive key and value of dictionary. We learnt key and value at dictionary part.\ndictionary = {'highest': 66000, 'lower': 0}\nfor key,value in dictionary.items():\n    print(key,\" : \",value)\nprint('')\n\n# For pandas we can achieve index and value\n# for index,value in data['Open'][0:1].iterrows():\n#    print(index,\" : \",value)","cbbef456":"# example of what we learn above\ndef tuple_ex():\n    \"\"\" return defined t tuple\"\"\"\n    t = (10,11,12)\n    return t\napple,pineapple,melon = tuple_ex()\nprint(apple,pineapple,melon)","1fc11f2c":"# guess prints what\nx = \"hello\"\ndef f():\n    x = \"hi\"\n    return x\nprint(x)      # x = hello global scope\nprint(f())    # x = hi local scope","e9809794":"# What if there is no local scope\nx = 5\ndef f():\n    y = 2*x        # there is no local scope x\n    return y\nprint(f())         # it uses global scope x  \n# First local scope searched, then global scope searched, if two of them cannot be found lastly built in scope searched.\n\n# What if there is no local scope\na = 5\ndef d():\n    a = 13\n    y = 2*a        # there is no local scope x\n    return y\nprint(d())         # it uses global scope x  \n# First local scope searched, then global scope searched, if two of them cannot be found lastly built in scope searched.","435d48d5":"# How can we learn what is built in scope\nimport builtins\ndir(builtins)","9f93b8d8":"#nested function\nx = 20\ny = 30 # global scope\ndef square():\n    \"\"\" return square of value \"\"\"\n    def add():\n        \"\"\" add two local variable \"\"\"    \n        z = x + y\n        return z\n    return add()**2\nprint(square())    ","614c6a88":"# default arguments\ndef f(a, b = 20, c = 80):\n    y = a + b + c\n    return y\nprint(f(10))\n# what if we want to change default arguments\nprint(f(50,40,30))","8484e673":"# flexible arguments *args\ndef f(*args):\n    for i in args:\n        print(i)\nf(10)\nprint(\"\")\nf(1,2,3,4)\n# flexible arguments **kwargs that is dictionary\ndef f(**kwargs):\n    \"\"\" print key and value of dictionary\"\"\"\n    for key, value in kwargs.items():               # If you do not understand this part turn for loop part and look at dictionary in for loop\n        print(key, \" \", value)\nf(country = 'turkey', capital = 'ankara', population = 5700000)","328a335d":"# lambda function\ncube = lambda x: x**3     # where x is name of argument\nprint(cube(4))\nmultiply = lambda x,y,z: x*y*z   # where x,y,z are names of arguments\nprint(multiply(10,20,30))","6f0b45c8":"string_list = [\"apple\",\"pineapple\",\"melon\"]\ny = map(lambda x:x + \" fruit\",string_list)\nprint(list(y))","d56663da":"# iteration example\nname = \"ural\"\nit = iter(name)\nprint(next(it))\nprint(next(it))\nprint(next(it))    # print next iteration\nprint(*it)         # print remaining iteration","d34fef1c":"# zip example\nlist1 = [\"apple\",\"kiwi fruit\",\"pineapple\",\"melon\"]\nlist2 = [5,6,7,8]\nz = zip(list1,list2)\nprint(z)\nz_list = list(z)\nprint(z_list)","b2b5c929":"un_zip = zip(*z_list)\nun_list1,un_list2 = list(un_zip) # unzip returns tuple\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2))","ab8e3f93":"# Example of list comprehension\nnum1 = [\"apple\",\"pineapple\",\"melon\"]\nnum2 = [i + \" fruit\" for i in num1 ]\nprint(num2)","563f0c6d":"# Conditionals on iterable\nstr1 = [\"apple\",\"pineapple\",\"melon\"]\nstr2 = [i + \" ipad\" if i == \"apple\" else i + \" song\"  if i == \"pineapple\" else i + \" fruit\" for i in str1]\nprint(str2)","d9958224":"# lets return bitcoin csv and make one more list comprehension example\n# lets calculate bitcoin trend whether they are bullish or bearish trend. Our average is 35000.\naverageValue = 35000\ndata[\"trend\"] = [\"bullish\" if i > averageValue else \"bearish\" for i in data.Open]\ndata.loc[10:,[\"trend\",\"Open\"]] # we will learn loc more detailed later","14bb1b74":"data = pd.read_csv(\"\/kaggle\/input\/bitcoin-historical-data\/bitstampUSD_1-min_data_2012-01-01_to_2021-03-31.csv\")\ndata.tail(10)\n# paranthes warning","18f476f5":"data.columns","8fa01b44":"data.shape","f7badcf7":"data.info()","87751330":"print(data['Open'].value_counts())","a53bee11":"data.describe()","cdaba404":"# For example: compare attack of pokemons that are legendary  or not\n# Black line at top is max\n# Blue line at top is 75%\n# Green line is median (50%)\n# Blue line at bottom is 25%\n# Black line at bottom is min\n# There are no outliers\ndata2.boxplot(column='Attack',by = 'Legendary')\nplt.show()","f8f69a68":"# Firstly I create new data from bitcoin' s data to explain melt nore easily.\ndata_new = data.tail()    # I only take 5 rows into new data\ndata_new","ffbd97b1":"# lets melt\n# id_vars = what we do not wish to melt\n# value_vars = what we want to melt\nmelted = pd.melt(frame=data_new,id_vars = 'Open', value_vars= ['High','Low'])\nmelted","9d304788":"# PIVOTING DATA\n# Index is name\n# I want to make that columns are variable\n# Finally values in columns are value\nmelted.pivot(index = 'Open', columns = 'variable',values='value')","99d444e3":"# Firstly lets create 2 data frame\ndata_head = data.head()\ndata_tail = data.tail()\nconc_data_row = pd.concat([data_head, data_tail],axis =0,ignore_index =True) # axis = 0 : adds dataframes in row\nconc_data_row","6365326e":"data1 = data['High'].tail()\ndata3= data['Low'].tail()\nconc_data_col = pd.concat([data1,data3],axis =1) # axis = 1 : adds dataframes in column\nconc_data_col","60fa0737":"data.dtypes","b80c7dca":"# lets convert object(str) to categorical and int to float.\ndata['Open'] = data['Open'].astype('category')\ndata['High'] = data['High'].astype('float')\ndata.dtypes","680fd060":"data2.info()","a8c40a10":"data2[\"Type 2\"].value_counts(dropna =False)","5cfb397c":"# Lets drop nan values\ndata_missing = data2   # also we will use data to fill missing value so I assign it to data1 variable\ndata_missing[\"Type 1\"].dropna(inplace = True)  # inplace = True means we do not assign it to new variable. Changes automatically assigned to data\n# So does it work ?","403c7ac7":"#  Lets check with assert statement\n# Assert statement:\nassert 1==1 # return nothing because it is true","8ccd4b33":"# In order to run all code, we need to make this line comment\n# assert 1==2 # return error because it is false","db3c09dc":"# assert data2['Type 2'].notnull().all() # returns nothing because we drop nan values","753e7262":"data2[\"Type 2\"].fillna('empty',inplace = True)","47a41af5":"# assert data2['Type 2'].notnull().all() # returns nothing because we do not have nan values","f1e34cde":"# # With assert statement we can check a lot of thing. For example\n# assert data.columns[1] == 'Name'\n# assert data.Speed.dtypes == np.int","2b310724":"# data frames from dictionary\ncountry = [\"R\u00fczgar\",\"Ural\"]\npopulation = [\"15\",\"17\"]\nlist_label = [\"Name\",\"Age\"]\nlist_col = [country,population]\nzipped = list(zip(list_label,list_col))\ndata_dict = dict(zipped)\ndf = pd.DataFrame(data_dict)\ndf","6793058b":"# Add new columns\ndf[\"job\"] = [\"-\",\"-\"]\ndf","bb756d04":"# Broadcasting\ndf[\"income\"] = 0 #Broadcasting entire column\ndf","be662e7a":"# Plotting all data \ndata_visual = data2.loc[:,[\"Attack\",\"Defense\",\"Speed\"]]\ndata_visual.plot()\n# it is confusing","f1a172c3":"# subplots\ndata_visual.plot(subplots = True)\nplt.show()","e9d6ce4f":"# scatter plot  \ndata_visual.plot(kind = \"scatter\",x=\"Attack\",y = \"Defense\")\nplt.show()","ffef0f56":"# hist plot  \ndata_visual.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250), density=True, stacked=True)","34fc7701":"# histogram subplot with non cumulative and cumulative\nfig, axes = plt.subplots(nrows=2,ncols=1)\ndata_visual.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250), density=True, stacked=True,ax = axes[0])\ndata_visual.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250), density=True, stacked=True,ax = axes[1],cumulative = True)\nplt.savefig('graph.png')\nplt","7bcc9f83":"data2.describe()","3fde44b7":"time_list = [\"1992-03-08\",\"1992-04-12\"]\nprint(type(time_list[1])) # As you can see date is string\n# however we want it to be datetime object\ndatetime_object = pd.to_datetime(time_list)\nprint(type(datetime_object))","2c6494f2":"# close warning\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# In order to practice lets take head of pokemon data and add it a time list\ndata_date = data2.tail(4)\ndate_list = [\"1992-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\"]\ndatetime_object = pd.to_datetime(date_list)\ndata_date[\"date\"] = datetime_object\n# lets make date as index\ndata_date= data_date.set_index(\"date\")\ndata_date\n","a4832e12":"# Now we can select according to our date index\nprint(data_date.loc[\"1993-03-15\"])\nprint(data_date.loc[\"1992-01-10\"])\nprint(data_date.loc[\"1992-02-10\":\"1993-03-15\"])","750b161c":"# We will use data2 that we create at previous part\ndata_date.resample(\"A\").mean()","edd809a1":"# Lets resample with month\ndata_date.resample(\"M\").mean()\n# As you can see there are a lot of nan because data2 does not include all months","1770298d":"# In real life (data is real. Not created from us like data2) we can solve this problem with interpolate\n# We can interpolete from first value\ndata_date.resample(\"M\").first().interpolate(\"linear\")","d414dde5":"# Or we can interpolate with mean()\ndata_date.resample(\"M\").mean().interpolate(\"linear\")","33968ad6":"# read data\ndata_pokemon = data2\n# data_pokemon = data_pokemon.set_index(\"#\")\ndata_pokemon.head()","3b67939b":"# indexing using square brackets\ndata_pokemon[\"Speed\"][1]","1878ecb1":"# using column attribute and row label\ndata_pokemon.Speed[1]","66b95d6c":"# using loc accessor\ndata_pokemon.loc[1,[\"Speed\"]]","d1864426":"# Selecting only some columns\ndata_pokemon[[\"Speed\",\"Attack\"]]","989ba878":"# Difference between selecting columns: series and dataframes\nprint(type(data[\"Open\"]))     # series\nprint(type(data[[\"Open\"]]))   # data frames","e8a00bc6":"# Slicing and indexing series\ndata2.loc[1:15,\"Attack\":\"Speed\"]   # 10 and \"Attack\" are inclusive","76d1ed56":"# Reverse slicing\ndata2.loc[15:1:-1,\"Attack\":\"Speed\"]   # 10 and \"Attack\" are inclusive","75be5a81":"# From something to end\ndata2.loc[1:10,\"Attack\":] ","c10add3f":"# Creating boolean series\nboolean = data2.HP > 200\ndata2[boolean]","f6a423fb":"# Combining filters\nfirst_filter = data2.HP > 200\nsecond_filter = data2.Speed > 35\ndata2[first_filter & second_filter]","993bffbf":"# Filtering column based others\ndata2.HP[data2.Speed<15]","716085cd":"# Plain python functions\ndef div(n):\n    return n\/2\ndata2.HP.apply(div)","bee86bfa":"# Plain python functions\ndef div(n):\n    return n\/2\ndata2.HP.apply(div)","b2a658a6":"# Or we can use lambda function\ndata2.HP.apply(lambda n : n\/2)","432fe9c8":"# Defining column using other columns\ndata2[\"total_power\"] = data2.Attack + data2.Defense\ndata2.head()","93b07c96":"# our index name is this:\ndata_labeled = data2\nprint(data_labeled.index.name)\n# lets change it\ndata_labeled.index.name = \"index_name\"\ndata_labeled.head()","4cf99f90":"# Overwrite index\n# if we want to modify index we need to change all of them.\ndata2.head()\n# first copy of our data to data3 then change index \ndata3 = data2.copy()\n# lets make index start from 100. It is not remarkable change but it is just example\ndata3.index = range(100,900,1)\ndata3.head()","fa11d930":"# We can make one of the column as index. I actually did it at the beginning of manipulating data frames with pandas section\n# It was like this\n# data= data.set_index(\"#\")\n# also you can use \n# data.index = data[\"#\"]","dc856c2c":"# lets read data frame one more time to start from beginning\ndata2.head()\n# As you can see there is index. However we want to set one or more column to be index","eddb50d2":"# Setting index : type 1 is outer type 2 is inner index\ndata_indexed = data2.set_index([\"Type 1\",\"Type 2\"]) \ndata_indexed.head(10)\n# data1.loc[\"Fire\",\"Flying\"] # howw to use indexes","2a0cf08b":"dic = {\"treatment\":[\"A\",\"A\",\"B\",\"B\"],\"gender\":[\"F\",\"M\",\"F\",\"M\"],\"response\":[10,45,5,9],\"age\":[15,4,72,65]}\ndf = pd.DataFrame(dic)\ndf","571696b4":"# pivoting\ndf.pivot(index=\"treatment\",columns = \"gender\",values=\"response\")","b64bc906":"df1 = df.set_index([\"treatment\",\"gender\"])\ndf1\n# lets unstack it","a39d3c1a":"# level determines indexes\ndf1.unstack(level=0)","273b0ac9":"df1.unstack(level=1)","7462a8b4":"# change inner and outer level index position\ndf2 = df1.swaplevel(0,1)\ndf2","8420bc47":"df","54b85573":"# df.pivot(index=\"treatment\",columns = \"gender\",values=\"response\")\npd.melt(df,id_vars=\"treatment\",value_vars=[\"age\",\"response\"])","5d9be51a":"# We will use df\ndf","bdf76e87":"# according to treatment take means of other features\ndf.groupby(\"treatment\").mean()   # mean is aggregation \/ reduction method\n# there are other methods like sum, std,max or min","453302bc":"# we can only choose one of the feature\ndf.groupby(\"treatment\").age.max() ","adfe2cf7":"# Or we can choose multiple features\ndf.groupby(\"treatment\")[[\"age\",\"response\"]].min() ","1c9d7393":"df.info()\n# as you can see gender is object\n# However if we use groupby, we can convert it categorical data. \n# Because categorical data uses less memory, speed up operations like groupby\n#df[\"gender\"] = df[\"gender\"].astype(\"category\")\n#df[\"treatment\"] = df[\"treatment\"].astype(\"category\")\n#df.info()","0d0d62ea":"# **3. CLEANING DATA**","3735f504":"# **LAMBDA FUNCTION**","f13ad663":"Default argument example:\ndef f(a, b=1):\n  \"\"\" b = 1 is default argument\"\"\"\n\nFlexible argument example:\ndef f(*args):\n \"\"\" *args can be one or more\"\"\"\n\ndef f(**kwargs)\n \"\"\" **kwargs is a dictionary\"\"\"","70e36feb":"# **MATPLOTLIB**","95a1e4b7":"# **RESAMPLING PANDAS TIME SERIES**","50f72f25":"# **TIDY DATA**","3aacc10d":"# **WHILE and FOR LOOPS**","ea8d72e4":"# **SLICING DATA FRAME**","61ef0445":"# **MELTING DATA FRAMES**","0c03fe12":"# **FILTERING DATA FRAMES**","4820ab71":"# **INDEX OBJECTS AND LABELED DATA**","eb768693":"# **5. MANIPULATING DATA FRAMES WITH PANDAS**","3acc76ef":"# **USER DEFINED FUNCTION**","2d98f42e":"# **TRANSFORMING DATA**","9683742d":"# **MISSING DATA and TESTING WITH ASSERT**","106a8ac3":"# **SCOPE**","21b1c1bc":"# **2. PYTHON DATA SCIENCE TOOLBOX**","ff05ea7f":"# **1. Introduction Python with Bitcoin**","d6b2b028":"# **DIAGNOSE DATA for CLEANING**","f203b2a7":"# **BUILDING DATA FRAMES FROM SCRATCH**","3b28b706":"# **INDEXING DATA FRAMES**","3cc2ba51":"# **CATEGORICALS AND GROUPBY**","7645b1f1":"# **VISUAL EXPLORATORY DATA ANALYSIS**","dfaeb9cf":"# **EXPLORATORY DATA ANALYSIS**","44fba717":"# **PANDAS**","16b99cfb":"# **DEFAULT and FLEXIBLE ARGUMENTS**","cf6c6a81":"# **4. PANDAS FOUNDATION**","aba15a45":"# **DICTIONARY**","59a81da0":"# **NESTED FUNCTION**","767663d7":"# **ITERATORS**","b3d10d75":"# **STACKING and UNSTACKING DATAFRAME**","15a54a7d":"# **STATISTICAL EXPLORATORY DATA ANALYSIS**","d280c135":"# **INDEXING PANDAS TIME SERIES**","eb8b55a3":"# **HIERARCHICAL INDEXING**","8d147aeb":"# **LIST COMPREHENS\u0130ON**","0cec07a1":"# **VISUAL EXPLORATORY DATA ANALYSIS**","1336f7cd":"# **ANONYMOUS FUNCT\u0130ON**","5c7d7d9a":"# **DATA TYPES**","685d45bd":"# **CONCATENATING DATA**","2e5af02f":"# **PIVOTING DATA FRAMES**"}}