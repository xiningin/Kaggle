{"cell_type":{"b051e64b":"code","93307693":"code","386d4a4d":"code","a3ac282f":"code","f4221897":"code","051c6099":"code","7e0435af":"code","6cfbf505":"code","e2c7c465":"code","b769e980":"code","79ce6536":"code","86f20f53":"code","fc2dfe65":"code","0721f1b1":"code","fbab4034":"code","832f8d16":"code","1f2f71cb":"code","c956b59d":"code","c4492a10":"code","57a74b30":"code","0efcd6fd":"code","595ec96d":"code","ded76eee":"code","0545d87e":"code","4701decf":"code","dcc5f729":"markdown","5890472b":"markdown","e98a8fec":"markdown"},"source":{"b051e64b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\nimport keras\n# Any results you write to the current directory are saved as output.","93307693":"\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\n\n\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop\nfrom keras.optimizers import Adam\nfrom keras.optimizers import Adamax\n\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\nfrom matplotlib.pyplot import plot\nfrom sklearn.metrics import confusion_matrix\nimport itertools\nimport matplotlib.image as mpimg\n\n","386d4a4d":"test = pd.read_csv(\"..\/input\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/train.csv\")","a3ac282f":"train.head()","f4221897":"test.head()","051c6099":"y_train = train[\"label\"]\ny_train.head()","7e0435af":"x_train = train.drop(labels = [\"label\"],axis = 1) ","6cfbf505":"y_train.value_counts()","e2c7c465":"x_train.isnull().describe()","b769e980":"x_train = x_train\/255.0\ntest = test\/255.0","79ce6536":"x_train = x_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)\nprint('x_train shape:', x_train.shape)","86f20f53":"y_train = keras.utils.to_categorical(y_train,num_classes=10)","fc2dfe65":"random_seed = 1","0721f1b1":"from sklearn.model_selection import train_test_split","fbab4034":"x_train, x_val, y_train, y_val = train_test_split(x_train, y_train, test_size = 0.1, random_state=random_seed)","832f8d16":"a= plt.imshow(x_train[1][:,:,0])","1f2f71cb":"from keras.layers import LeakyReLU","c956b59d":"model = Sequential()\n\nmodel.add(Conv2D(32,(3,3), padding='Same', activation='relu', input_shape=(28, 28, 1)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(32,(7,7),activation='relu'))\nmodel.add(Conv2D(128,(5,5),activation='relu'))\nmodel.add(MaxPool2D((2,2)))\nmodel.add(Conv2D(64,(3,3), padding='Same',activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(64,(3,3),activation='relu'))\n\n\n\n\n\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='linear'))\nmodel.add(LeakyReLU(alpha=.001))\nmodel.add(Dense(64, activation='linear'))\nmodel.add(LeakyReLU(alpha=.001))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(324, activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(32, activation='linear'))\nmodel.add(LeakyReLU(alpha=.001))\n\nmodel.add(Dense(10, activation='softmax'))\nmodel.summary()","c4492a10":"optimizer = Adamax(lr=0.002, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0)\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])\n","57a74b30":"datagen = ImageDataGenerator(\n        featurewise_center=False,  # Set input mean to 0 over the dataset\n        samplewise_center=False,  # Set each sample mean to 0\n        featurewise_std_normalization=False,  # Divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # Divide each input by its std\n        zca_whitening=False,  # Apply ZCA whitening\n        rotation_range=20,  # Randomly rotate images in the range (degrees, 0 to 180) # 10\n        zoom_range = 0.13, # Randomly zoom image # 0.1\n        width_shift_range=0.1,  # Randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # Randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # Randomly flip images\n        vertical_flip=False)  # Randomly flip images\n\ndatagen.fit(x_train)","0efcd6fd":"model.fit_generator(\n    datagen.flow(x_train, y_train, batch_size=256),\n    steps_per_epoch=len(x_train)\/\/256,\n    epochs=30,\n    \n)","595ec96d":"#history = model.fit(x_train, y_train, batch_size=128, epochs=10, verbose=1)","ded76eee":"score = model.evaluate(x_val, y_val, verbose=1)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","0545d87e":"result = model.predict(test)\nresult = np.argmax(result,axis=1)\nresult = pd.Series(result,name=\"Label\")","4701decf":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),result],axis = 1)\n\nsubmission.to_csv(\"cnn_mnist.csv\",index=False)","dcc5f729":"Splitting in traing and validation","5890472b":"***LOAD DATA***","e98a8fec":"***NORMALIZATION***"}}