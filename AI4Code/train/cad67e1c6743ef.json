{"cell_type":{"93a750f3":"code","8f5e0d4e":"code","fba0cbbe":"code","29920937":"code","044bbcd8":"code","95d634d8":"code","1097ecef":"code","6660f28f":"code","a8cabd96":"code","9431cdab":"code","3e3767af":"code","3b8a39c9":"code","695cc889":"code","5807a906":"code","bc1f7a4b":"code","3e504fcd":"code","984b98c8":"code","7fa1ae1d":"code","721077f8":"code","db74056f":"code","c10bac91":"code","9855e187":"code","1d3da775":"code","8616c5ab":"code","816a70bb":"markdown","0ddd649a":"markdown","88817b32":"markdown","a5b87097":"markdown","01f9cf27":"markdown","0ba1aabc":"markdown","2d794dd3":"markdown","b55970d2":"markdown","df353f38":"markdown","e97083cd":"markdown","f4519c1b":"markdown","41e7a2b5":"markdown","20f5857f":"markdown","b99f84b3":"markdown","ef7ad36f":"markdown","70cae8e6":"markdown","c07595dc":"markdown","9307a2ec":"markdown","18463577":"markdown","144c31e4":"markdown","b9770d67":"markdown","32a658b2":"markdown","49281e40":"markdown","5502e531":"markdown","3629b2ea":"markdown","0830aa1d":"markdown","e11d7926":"markdown","5b35498d":"markdown","398d544c":"markdown","11466de3":"markdown"},"source":{"93a750f3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport time\nimport random\n\nfrom sklearn.model_selection import train_test_split\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\nfrom torch.optim.lr_scheduler import ExponentialLR\nfrom torch.utils.data import DataLoader, Dataset\n\n# For data augmentation\nfrom albumentations import Compose, ShiftScaleRotate, ToFloat\nfrom albumentations.pytorch import ToTensorV2\nimport cv2\n\nimport plotly.express as px\npx.defaults.template = 'plotly_white'\npx.defaults.color_discrete_sequence = ['steelblue']\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","8f5e0d4e":"def set_seed(seed=0):\n    np.random.seed(seed)\n    random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.cuda.manual_seed_all(seed)\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = False\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    \nset_seed(0)","fba0cbbe":"device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(device)","29920937":"train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\nsample_sub = pd.read_csv('\/kaggle\/input\/digit-recognizer\/sample_submission.csv')","044bbcd8":"train.head()","95d634d8":"test.head()","1097ecef":"sample_sub.head()","6660f28f":"label_counts = (train.label\n                .value_counts()\n                .to_frame()\n                .reset_index()\n                .rename(columns={'index': 'Label', 'label': 'Count'})\n                .sort_values('Label')\n               )\nfig = px.bar(label_counts, x='Label', y='Count')\nfig.update_traces(textposition='outside',\n                  texttemplate='%{y}',\n                  cliponaxis=False,\n                  hovertemplate=\n                  'Label: <b>%{x}<\/b><br>'+\n                  'Count: <b>%{y}<\/b>'\n                 )\nfig.update_layout(title='Distribution of labels',\n                  yaxis_title='Count',\n                  xaxis_title='Label',\n                  xaxis_type='category',\n                  yaxis_tickformat=',',\n                  hoverlabel_bgcolor=\"white\",\n                  hoverlabel_font_size=14,\n                  hovermode=\"x\"\n                 )\nfig.show()","a8cabd96":"X = train.drop(columns='label').values.reshape(-1, 28, 28, 1)\ny = train.label.values\n\ntrain_X, valid_X, train_y, valid_y = train_test_split(X,\n                                                      y,\n                                                      test_size=0.2\n                                                     )","9431cdab":"class MNISTDataset(Dataset):\n    def __init__(self, X, y=None, is_test=False, transforms=None):\n        self.X = X\n        self.y = y\n        self.is_test = is_test\n        self.transforms = transforms\n\n    def __len__(self):\n        return len(self.X)\n\n    def __getitem__(self, index):\n        image = self.X[index]\n        \n        if self.transforms:\n            image = self.transforms(image=image)['image']\n            \n        if self.is_test:\n            return image\n        else:\n            return image, self.y[index]","3e3767af":"train_transforms = Compose([ToFloat(max_value=255),\n                            ShiftScaleRotate(shift_limit=0.1,\n                                             scale_limit=0.1,\n                                             rotate_limit=10,\n                                             border_mode=cv2.BORDER_CONSTANT,\n                                             value=0,\n                                             p=1),\n                            ToTensorV2()\n                           ])\nvalid_transforms = Compose([ToFloat(max_value=255),\n                            ToTensorV2()\n                           ])","3b8a39c9":"fig = plt.figure(figsize=(12, 2))\nfor k in range(10):\n    idx = random.choice(train.label[train.label.eq(k)].index)\n    image, label = train.drop(columns='label').iloc[idx].values.reshape(28, 28), k\n    \n    ax = plt.subplot(2, 10, k+1)\n    ax.title.set_text(label)\n    plt.axis('off')\n    plt.imshow(image, cmap='gray')\n    \n    image = np.expand_dims(image, 2)\n    image = train_transforms(image=image)['image']\n    image = image.squeeze(0)\n    ax = plt.subplot(2, 10, 10+k+1)\n    plt.axis('off')\n    plt.imshow(image, cmap='gray')","695cc889":"example_transforms = Compose([ToFloat(max_value=255),\n                            ShiftScaleRotate(shift_limit=0.3,\n                                             scale_limit=0.3,\n                                             rotate_limit=30,\n#                                              border_mode=cv2.BORDER_CONSTANT,\n#                                              value=0,\n                                             p=1),\n                            ToTensorV2()\n                           ])","5807a906":"fig = plt.figure(figsize=(12, 2))\nfor k in range(10):\n    idx = random.choice(train.label[train.label.eq(k)].index)\n    image, label = train.drop(columns='label').iloc[idx].values.reshape(28, 28), k\n    \n    ax = plt.subplot(2, 10, k+1)\n    ax.title.set_text(label)\n    plt.axis('off')\n    plt.imshow(image, cmap='gray')\n    \n    image = np.expand_dims(image, 2)\n    image = example_transforms(image=image)['image']\n    image = image.squeeze(0)\n    ax = plt.subplot(2, 10, 10+k+1)\n    plt.axis('off')\n    plt.imshow(image, cmap='gray')","bc1f7a4b":"class CNN(nn.Module):\n    def __init__(self):\n        super(CNN, self).__init__()\n        self.dropout = nn.Dropout2d(0.5)\n        \n        self.bn1_1 = nn.BatchNorm2d(48)\n        self.bn1_2 = nn.BatchNorm2d(48)\n\n        self.bn2 = nn.BatchNorm1d(256)\n        \n        self.conv1 = nn.Conv2d(in_channels=1, out_channels=48, kernel_size=3, stride=1, padding=1)\n        self.conv2 = nn.Conv2d(in_channels=48, out_channels=48, kernel_size=3, stride=2, padding=1)\n        \n        self.fc1 = nn.Linear(in_features=48 * 14 * 14, out_features=256)\n        self.fc2 = nn.Linear(in_features=256, out_features=10)\n        \n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        x = self.bn1_1(x)\n        x = F.relu(self.conv2(x))\n        x = self.bn1_2(x)\n        x = self.dropout(x)\n        \n        x = torch.flatten(x, 1)\n        \n        x = F.relu(self.fc1(x))\n        x = self.bn2(x)\n        x = self.dropout(x)\n        \n        x = self.fc2(x)\n        return x","3e504fcd":"class EarlyStopping:\n    def __init__(self, mode, path, patience=3, delta=0):\n        if mode not in {'min', 'max'}:\n            raise ValueError(\"Argument mode must be one of 'min' or 'max'.\")\n        if patience <= 0:\n            raise ValueError(\"Argument patience must be a postive integer.\")\n        if delta < 0:\n            raise ValueError(\"Argument delta must not be a negative number.\")\n            \n        self.mode = mode\n        self.patience = patience\n        self.delta = delta\n        self.path = path\n        self.best_score = np.inf if mode == 'min' else -np.inf\n        self.counter = 0\n        \n    def _is_improvement(self, val_score):\n        \"\"\"Return True iff val_score is better than self.best_score.\"\"\"\n        if self.mode == 'max' and val_score > self.best_score + self.delta:\n            return True\n        elif self.mode == 'min' and val_score < self.best_score - self.delta:\n            return True\n        return False\n        \n    def __call__(self, val_score, model):\n        \"\"\"Return True iff self.counter >= self.patience.\n        \"\"\"\n        \n        if self._is_improvement(val_score):\n            self.best_score = val_score\n            self.counter = 0\n            torch.save(model.state_dict(), self.path)\n            print('Val loss improved. Saved model.')\n            return False\n        else:\n            self.counter += 1\n            print(f'Early stopping counter: {self.counter}\/{self.patience}')\n            if self.counter >= self.patience:\n                print(f'Stopped early. Best val loss: {self.best_score:.4f}')\n                return True","984b98c8":"def train_one_epoch(model, train_loader, optimizer, device, criterion):\n    \"\"\"Train model for one epoch and return the mean train_loss.\"\"\"\n    model.train()\n    running_loss_train = 0\n    for inputs, labels in train_loader:\n        inputs, labels = inputs.to(device), labels.to(device)\n        optimizer.zero_grad()\n        outputs = model(inputs)\n        loss = criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n        running_loss_train += loss.item()\n    train_loss = running_loss_train \/ len(train_loader.dataset)\n    return train_loss","7fa1ae1d":"def validate(model, valid_loader, device, criterion):\n    \"\"\"Validate model and return the accuracy and mean loss.\"\"\"\n    model.eval()\n    correct = 0\n    running_loss_val = 0\n    with torch.no_grad():\n        for inputs, labels in valid_loader:\n            inputs, labels = inputs.to(device), labels.to(device)\n            outputs = model(inputs)\n            loss = criterion(outputs, labels)\n            pred = outputs.argmax(dim=1)\n            correct += pred.eq(labels).sum().item()\n            running_loss_val += loss.item()\n    val_acc = correct \/ len(valid_loader.dataset)\n    val_loss = running_loss_val \/ len(valid_loader.dataset)\n    return val_acc, val_loss","721077f8":"def fit(model, train_loader, valid_loader, learning_rate, num_epochs):\n    criterion = nn.CrossEntropyLoss(reduction='sum')\n    optimizer = optim.Adam(model.parameters(), lr=learning_rate)\n    es = EarlyStopping(mode='min', path='model.pth', patience=5)\n    model = model.to(device)\n    scheduler = ExponentialLR(optimizer, gamma=0.9)\n\n    for epoch in range(1, num_epochs + 1):\n        train_loss = train_one_epoch(model, train_loader, optimizer, device, criterion)\n        val_acc, val_loss = validate(model, valid_loader, device, criterion)\n        scheduler.step()\n        print(f'Epoch {epoch:2}\/{num_epochs}',\n              f'train loss: {train_loss:.4f}',\n              f'val loss: {val_loss:.4f}',\n              f'val acc: {val_acc:.2%}',\n              sep=' | '\n             )\n        if es(val_loss, model):\n            break","db74056f":"TRAIN_BATCH_SIZE = 64\nVALID_BATCH_SIZE = 512\nNUM_EPOCHS = 50\nLEARNING_RATE = 1e-3\nNUM_WORKERS = 0\n\nmnist_train = MNISTDataset(train_X, train_y, is_test=False, transforms=train_transforms)\nmnist_valid = MNISTDataset(valid_X, valid_y, is_test=False, transforms=valid_transforms)\n\ntrain_loader = DataLoader(mnist_train, batch_size=TRAIN_BATCH_SIZE, shuffle=True, drop_last=True)\nvalid_loader = DataLoader(mnist_valid, batch_size=VALID_BATCH_SIZE, shuffle=False)\n\nmodel = CNN()\nstart = time.time()\nfit(model, train_loader, valid_loader, learning_rate=LEARNING_RATE, num_epochs=NUM_EPOCHS)\nprint(f'Total training time: {time.time() - start}')\nmodel.load_state_dict(torch.load('model.pth'))","c10bac91":"TEST_BATCH_SIZE = 512\n\ntest_transforms = Compose([ToFloat(max_value=255),\n                           ToTensorV2()\n                          ])\n\ntest_X = test.values.reshape(-1, 28, 28, 1)\nmnist_test = MNISTDataset(test_X, is_test=True, transforms=test_transforms)\ntest_loader = DataLoader(mnist_test, batch_size=TEST_BATCH_SIZE, shuffle=False)","9855e187":"def predict(model, test_loader, device):\n    \"\"\"Make predictions on the test data and return \n    the submission data frame.\n    \"\"\"\n    \n    model.eval()\n    predictions = sample_sub['Label'].values\n    with torch.no_grad():\n        for i, inputs in enumerate(test_loader):\n            inputs = inputs.to(device)\n            outputs = model(inputs)\n            pred = outputs.argmax(dim=1).to('cpu').numpy()\n            predictions[i*TEST_BATCH_SIZE:i*TEST_BATCH_SIZE+len(inputs)] = pred\n    \n    output = sample_sub.copy()\n    output['Label'] = predictions\n    output.to_csv('submission.csv', index=False)\n    return output\n\noutput = predict(model, test_loader, device)\noutput","1d3da775":"fig = plt.figure(figsize=(12, 10))\nfor k in range(10):\n    indices = output[output.Label.eq(k)].sample(10).index\n    for j, idx in enumerate(indices):\n        image, label = test_X[idx], output.loc[idx, 'Label'].item()\n        image = image.squeeze(2)\n        ax = plt.subplot(10, 10, 10*k+j+1)\n        ax.title.set_text(label)\n        plt.axis('off')\n        plt.imshow(image, cmap='gray')\n\nplt.subplots_adjust(left=0.125, bottom=0.1, right=0.9, top=0.9, wspace=0.2, hspace=0.6)","8616c5ab":"prediction_counts = (output.Label\n                     .value_counts()\n                     .to_frame()\n                     .reset_index()\n                     .rename(columns={'index': 'Prediction', 'Label': 'Count'})\n                     .sort_values('Prediction')\n                    )\nfig = px.bar(prediction_counts, x='Prediction', y='Count')\nfig.update_traces(textposition='outside',\n                  texttemplate='%{y}',\n                  cliponaxis=False,\n                  hovertemplate=\n                  'Prediction: <b>%{x}<\/b><br>'+\n                  'Count: <b>%{y}<\/b>'\n                 )\nfig.update_layout(title='Distribution of predictions',\n                  yaxis_title='Count',\n                  xaxis_title='Prediction',\n                  xaxis_type='category',\n                  yaxis_tickformat=',',\n                  hoverlabel_bgcolor=\"white\",\n                  hoverlabel_font_size=14,\n                  hovermode=\"x\"\n                 )\nfig.show()","816a70bb":"We will use the variable `device` to indicate whether to use GPU or CPU.","0ddd649a":"# Predict on test set and display predictions\/images","88817b32":"# Model architecture","a5b87097":"# Fitting the model","01f9cf27":"# Dataset and augmentation","0ba1aabc":"This early stopping implementation is based on the following three implementations that I found:\n\n- https:\/\/github.com\/pytorch\/ignite\/blob\/master\/ignite\/handlers\/early_stopping.py\n- https:\/\/gist.github.com\/stefanonardo\/693d96ceb2f531fa05db530f3e21517d\n- https:\/\/github.com\/Bjarten\/early-stopping-pytorch\/blob\/master\/pytorchtools.py\n\nEarly stopping allows us to terminate training if the validation loss stops improving for a certain number of epochs. This number is often referred to as 'patience'. Additionally, we use this class to save the model every time the validation loss improves. This allows us to load the model with the best validation score after training has stopped.","2d794dd3":"Finally, we make predictions on the test data and create a CSV submission file.","b55970d2":"This is currently a work in progress.\n\nThank you for reading. I am always open to suggestions for improvement.","df353f38":"We will see that this simple architecture will achieve an accuracy of over 99%. However, the purpose of this notebook is for me to document what I have learned, and not to achieve the highest accuracy possible (I don't use any ensembles either).\n\nSimilarly to how we created a custom dataset, to define a neural network, we inherit from nn.Module and simply implement the `forward()` method. Note that we define two different `nn.BatchNorm2d(48)` layers. Using the same batch normalization layer in multiple parts of the network would be a mistake because the `nn.BatchNorm2d()` class keeps track of the running mean and variance by default.","e97083cd":"Next, we define the transformations that we will use for the train and validation sets. We use the Compose function to chain together several transformations. Our pixel values are integers between 0 and 255 inclusive. \n- The ToFloat() transform divides the \"pixel values by max_value to get a float32 output array where all values lie in the range [0, 1.0]\". [[documentation]](https:\/\/albumentations.readthedocs.io\/en\/latest\/api\/augmentations.html#albumentations.augmentations.transforms.ToFloat)\n- We use the ShiftScaleRotate transform to randomly scale the input, randomly shift the input (horizontally and vertically), and randomly rotate the input slightly. We specify p=1 to indicate that we always want to apply ShiftScaleRotate. I will explain what the `border_mode` and `value` parameters are used for below. [[documentation]](https:\/\/albumentations.readthedocs.io\/en\/latest\/api\/augmentations.html#albumentations.augmentations.transforms.ShiftScaleRotate)\n- Finally, we transform the NumPy arrays to PyTorch Tensors with ToTensorV2(). This is necessary because our PyTorch model will expect Tensor inputs. We [use ToTensorV2() instead of ToTensor()](https:\/\/albumentations.ai\/docs\/faq\/#which-transformation-should-i-use-to-convert-a-numpy-array-with-an-image-or-a-mask-to-a-pytorch-tensor-totensor-or-totensorv2) because \"ToTensor() is now deprecated and will be removed in future versions\". It is also important to note that an input shape of (28, 28, 1) will be converted to have a shape of (1, 28, 28) after applying ToTensorV2(). This again has to do with the input that PyTorch expects. Our model will need to have a Tensor input of shape nSamples x nChannels x Height x Width.\n","f4519c1b":"In the example below, I have used different arguments for the shift, scale, and rotate limits to make it easier to visualize what happens if we do not specify the `border_mode` and `value` arguments.","41e7a2b5":"# Loading the data","20f5857f":"Here we split the train data to create a validation set. We'll use 20% of the train data as a validation set. Since the Albumentations library expects a channel dimension, we reshape each image to have the shape (28, 28, 1), where 1 is the channel dimension. Since our images are in grayscale, this dimension is 1. If we had colour images instead, this dimension would be 3 - one each for red, green, and blue (RGB).","b99f84b3":"# Importing libraries","ef7ad36f":"We'll also plot the distribution of predictions.","70cae8e6":"Here we fix seeds for reproducibility. This means that we will get the same results each time we run the notebook.","c07595dc":"In this notebook, I attempt to document what I have learned about PyTorch. While I have used PyTorch before, I gained a deeper understanding through [PyTorch's tutorials and examples](https:\/\/pytorch.org\/tutorials\/).\n\n\nWherever I could, I wrote code that I can reuse as much as possible. For example, while it is definitely possible to make predictions on the test data in one go, I decided to use a dataloader to make predictions in batches instead.","9307a2ec":"The default argument for the `border_mode` parameter is `cv2.BORDER_REFLECT_101`. The above result is obviously not desirable and so we specify `border_mode=cv2.BORDER_CONSTANT` and `value=0` to make the borders black.","18463577":"We use the cross entropy loss and the Adam optimizer. We also decay our learning rate by multiplying the learning rate by 0.95 every epoch. If our validation loss does not improve after 5 consecutive epochs, we stop training.","144c31e4":"After every epoch of training, we compute the validation loss and the validation accuracy. Note that we do not need to compute gradients at this stage, so wrap the validation loop with `torch.no_grad()`.","b9770d67":"# MNIST digits with PyTorch","32a658b2":"# Distribution of labels","49281e40":"Instead of writing all of our code for training and validation in one cell, it can be helpful to break the different parts into functions.","5502e531":"In PyTorch, the best way to feed data to the model is with a dataloader. In particular, `torch.utils.data.DataLoader` is an iterator which provides features such as batching, shuffling, and loading data in parallel. In order to use PyTorch's dataloader, we need to create a dataset first. The most flexible way to do this is by creating a custom dataset class that inherits from `torch.utils.data.Dataset`, which is an abstract class. The [PyTorch dataloader tutorial](https:\/\/pytorch.org\/tutorials\/recipes\/recipes\/custom_dataset_transforms_loader.html#create-a-dataset-class) tells us that we should override the following methods:\n\n> - `__len__` so that `len(dataset)` returns the size of the dataset.\n- `__getitem__` to support indexing such that `dataset[i]` can be used to get the $i$th sample\n\nNote that one of the parameters used to initialize the dataset is used to specify transformations to be applied to the image before returning it.","3629b2ea":"# Functions","0830aa1d":"Here we display some images and their transformations. The top row consists of a random image from each class. The images in the second row are the original images with transformations applied. At first glance, the images look identical to the original images. However, notice that the 3 is shifted up higher than in the original image. The 8 is slightly rotated to the right and shifted up as well. It also looks like the 6 is shifted down.","e11d7926":"# Early stopping class","5b35498d":"# Splitting the data","398d544c":"Note that the validation batch size is larger than the train batch size. This is because unlike the train batch size, the validation batch size is not a hyperparameter. Therefore, our only concern is speed when it comes to validation. I found a validation batch size of 512 to be the fastest here. Note that since the images are small, we could actually just pass the entire validation set to the model at once. But, this turns out to be slower than using a batch size of 512 because the GPU has to wait for the CPU to load all of the images in the validation set into the GPU.\n\nNote that there is no need to shuffle the validation data, unlike the train data. Also, we use `drop_last=True` to indicate that we want to drop the last batch. The last batch is usually smaller than our specified batch size and because we are using batch normalization, our batches should not be too small. Since we are shuffling the training data, dropping the last batch does not have any significant impact on training.\n\nIt is always a good idea to tune the Dataloader's `num_workers` parameter. From the PyTorch [documentation](https:\/\/pytorch.org\/docs\/stable\/data.html#torch.utils.data.DataLoader): \n> num_workers (int, optional) \u2013 how many subprocesses to use for data loading. 0 means that the data will be loaded in the main process. (default: 0)\n\nIn this case, I found the default of 0 `num_workers` to be best. The best way to set the `num_workers` parameter is by picking the fastest option by trial and error.","11466de3":"Just to make sure that our predictions make sense, we will display 10 different images from the test set for each of the 10 classes. For example, of all the images that the model assigned to class 0, we pick 10 images at random and display them in the first row. We do this for each class."}}