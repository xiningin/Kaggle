{"cell_type":{"c14d7a66":"code","9b8e5e08":"code","caa9f005":"code","8940c80b":"code","52b13f47":"code","4f35875d":"code","b1abc19a":"code","c0066318":"code","dafd40cb":"code","4d4f8890":"code","9d4e6ff3":"code","e9dd03c1":"code","ae549f17":"code","2e0a0d38":"code","ab622126":"code","bf78bc46":"code","6581ae31":"code","d1fa0c00":"code","e8154e8b":"code","9d91edd1":"code","79779a07":"code","1ef3b035":"code","dfbc5445":"code","d1dc0285":"code","3e6ba240":"code","76b72d63":"code","881a3442":"code","69e40c65":"code","faf45ba2":"code","767dfcac":"code","daf3f896":"code","dfdfe24d":"code","f43845bb":"code","2e0cf0c1":"code","a8164b7a":"code","542c9cbc":"code","fa4384cc":"code","1c5dd137":"code","27d20268":"code","2c536889":"code","26d4276f":"code","dadfdea5":"code","5c0c0a3c":"code","e2fbd803":"code","18a480a1":"code","cbe6d133":"code","c29d7cea":"code","3e20f959":"code","7cf40f79":"code","f2896ee9":"code","ef1e936c":"code","0cdb1b03":"code","b1087780":"code","35e29172":"code","3cf41e24":"code","ef53e2a4":"code","449e87b6":"code","27ec4e89":"code","33f9df1c":"code","25e2f6c0":"code","28e141c6":"code","62a3bb88":"code","b89b33f5":"code","95720c86":"code","31382b93":"code","c2899938":"code","db46b31b":"code","dee1de30":"code","c6a673f1":"code","9f168fef":"markdown","996ae451":"markdown","72e7adda":"markdown","f3f1b4ca":"markdown","577ca3da":"markdown","0d1b56ff":"markdown","1e2bb717":"markdown","5c2516c9":"markdown","24a4efd4":"markdown","43d82cd3":"markdown","4fe11384":"markdown","4a18b4d7":"markdown","328de15e":"markdown","7ffbeed2":"markdown","6a4bdec6":"markdown","2beb7c53":"markdown","c49e34dc":"markdown","900ac9db":"markdown","175e7fb3":"markdown","bebdb4b1":"markdown","443666ae":"markdown","6c491f63":"markdown","e60ac89f":"markdown","f0af90c0":"markdown","bce91504":"markdown","2022eab1":"markdown","e7f38819":"markdown","5a1c56c6":"markdown","42c27272":"markdown","cdd8e11e":"markdown","e3bb81c7":"markdown","d959a549":"markdown","df3ee442":"markdown","370384cc":"markdown","4bfeabe3":"markdown","c84b26f6":"markdown","c495a022":"markdown","20194d0c":"markdown","68a708f6":"markdown","2c324548":"markdown","a417ea12":"markdown","e0a0b4d7":"markdown","a07448b6":"markdown","db872547":"markdown","39bd9782":"markdown","f2519acf":"markdown","9b0d2ddf":"markdown","2797b813":"markdown","5122c3a3":"markdown","0a4d7f3e":"markdown","6cd2bbab":"markdown","78c487ef":"markdown","775e425e":"markdown","087c3837":"markdown","e85ddb16":"markdown"},"source":{"c14d7a66":"import re\nimport requests\nfrom bs4 import BeautifulSoup as bs","9b8e5e08":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n%matplotlib inline\n\npd.set_option('notebook_repr_html', True)","caa9f005":"import requests\nheaders = {'User-Agent': 'Mozilla\/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/61.0.3163.100 Safari\/537.36'}\nleague = ['GB1','FR1','L1','IT1','ES1']\nleague_page = \"https:\/\/www.transfermarkt.com\/jumplist\/startseite\/wettbewerb\/\"","8940c80b":"def get_club_details(tr_tag):\n    club = tr_tag.find_all('a',class_=\"vereinprofil_tooltip\")[1]\n    club_link = club['href']\n    club_name = club.get_text()\n    club_value = tr_tag.find_all('td',class_=\"rechts show-for-small show-for-pad nowrap\")[0].get_text()\n    return tuple((club_link,club_name,club_value))","52b13f47":"clubs_list = []\nfor league_id in league:\n    page = requests.get(league_page + league_id,headers = headers)\n    soup = bs(page.content, 'html.parser')\n    tbody_container = soup.find_all('tbody')[1]\n    tr_container = tbody_container.find_all('tr')\n    for tr_tag in tr_container :\n        clubs_list.append(get_club_details(tr_tag))\nprint('All the club were uploaded')","4f35875d":"def get_players_club(player):\n    player_id = player['id']\n    player_link = player['href']\n    player_name = player.get_text()\n    return tuple((player_id,player_link,player_name,club_name,club_value))","b1abc19a":"url_site = \"https:\/\/www.transfermarkt.com\"\nplayer_list = []\nfor club_link,club_name,club_value in clubs_list:\n    page = requests.get(url_site + club_link,headers = headers)\n    soup = bs(page.content, 'html.parser')\n    tbody_container = soup.find_all('tbody')[1]\n    players_details = tbody_container.find_all('a',class_=\"spielprofil_tooltip\")\n    for player in players_details[::2] :\n        player_list.append(get_players_club(player))\nprint('All the players were uploaded')","c0066318":"def get_profil_detail(soup):\n    table_container = soup.find_all('table', class_=\"auflistung\")[0]\n    td_container = table_container.find_all('td')\n    if td_container[1].find('a') == None:\n        birth = td_container[0].find('a')['href'].split(\"\/\")[-1]# take it in format YYYY-MM-DD for datetime later\n        height = td_container[3].get_text().split(\"m\")[0]# I remove the m of meter \n        country = td_container[4].find('img')['title']\n        role = td_container[5].get_text().strip()\n        foot = td_container[6].get_text()\n    else :\n        birth = td_container[1].find('a')['href'].split(\"\/\")[-1]\n        height = td_container[4].get_text().split(\"m\")[0]# I remove the m of meter \n        country = td_container[5].find('img')['title']\n        role = td_container[6].get_text().strip()\n        foot = td_container[7].get_text()\n    tbody_container = soup.find_all('tbody')[0]\n    tr_transfer_container = tbody_container.find_all('tr',class_=\"zeile-transfer\")\n    transfer_list = []\n    for tr_transfer_tag in tr_transfer_container:\n        td_transfer_container = tr_transfer_tag.find_all(\"td\")\n        tranfer_from = td_transfer_container[5].get_text()\n        transfer_to = td_transfer_container[9].get_text()\n        transfer_season = td_transfer_container[0].get_text()\n        transfer_date = td_transfer_container[1].get_text()\n        transfer_list.append(tuple((tranfer_from,transfer_to,transfer_season,transfer_date)))\n    return tuple((Id,name,club,club_value,birth,height,country,role,foot,link.split(\"\/\")[1],transfer_list))\n        ","dafd40cb":"player_details = []\ni=0\nfor Id,link,name,club,club_value in player_list:\n    i=i+1\n    if i%500 == 0:\n        print(\"new league upload\")\n    try:\n        page = requests.get(url_site + link,headers = headers)\n        soup = bs(page.content, 'html.parser')\n        player_details.append(get_profil_detail(soup))\n    except Exception as e:\n        player_details.append(tuple((Id,name,club,club_value,None,None,None,None,None,link.split(\"\/\")[1],[])))\n        continue\nprint(\"all player details uploaded\")","4d4f8890":"def get_injuries_details(soup):\n    tbody_container = soup.find_all('tbody')[0]\n    tr_container = tbody_container.find_all('tr')\n    injuries_list = []\n    for tr_tag in tr_container:\n        season = tr_tag.find_all('td')[0]\n        injury = tr_tag.find_all('td')[1]\n        time_out = tr_tag.find_all('td')[4]\n        injuries_list.append(tuple((season.get_text(),injury.get_text(),time_out.get_text().split()[0])))\n    return injuries_list","9d4e6ff3":"player_list = []\nfor Id,name,club,club_value,birth,height,country,role,foot,name_link,transfer_list in player_details:\n    try:\n        headers = {'User-Agent': 'Mozilla\/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/61.0.3163.100 Safari\/537.36'}\n        page = requests.get(\"https:\/\/www.transfermarkt.com\/{}\/verletzungen\/spieler\/{}\".format(name_link,Id),headers=headers)\n        soup = bs(page.content, 'html.parser')\n        player_list.append(tuple((Id,name,club,club_value,birth,height,country,role,foot,transfer_list,get_injuries_details(soup))))\n    except Exception as e:\n        player_list.append(tuple((Id,name,club,club_value,birth,height,country,role,foot,transfer_list,[])))\n        continue\nprint(\"all player injuries details uploaded\")\nprint(\"End of uploading from Transfermarkt\")","e9dd03c1":"def get_list_club_lequipe(h2_tag,league_id):\n    if league_id == 'EQ_D1' :\n        club = h2_tag.find_all('a')[1]\n        club_link = club['href']\n        club_name = club['title']\n        return tuple((club_link,club_name))\n    else:\n        club = h2_tag.find('a')\n        club_link = club['href']\n        club_name = club['title']\n        return tuple((club_link,club_name))","ae549f17":"league = ['EQ_ANG','EQ_D1','EQ_ALL','EQ_ITA','EQ_ESP']\nleague_page = \"https:\/\/www.lequipe.fr\/Football\/\"\nclubs_list_lequipe = []\nfor league_id in league:\n    print(league_id)\n    page = requests.get(league_page + league_id + \".html\",headers = headers)\n    soup = bs(page.content, 'html.parser')\n    tbody_container = soup.find_all('div',class_=\"listeclubs\")[0]\n    h2_container = tbody_container.find_all('h2')\n    for h2_tag in h2_container :\n        clubs_list_lequipe.append(get_list_club_lequipe(h2_tag,league_id))\nprint('All the club were uploaded')","2e0a0d38":"url_site = \"https:\/\/www.lequipe.fr\"\nplayer_list_lequipe = []\nfor club_link,club_name in clubs_list_lequipe:\n    page = requests.get(url_site + club_link,headers = headers)\n    soup = bs(page.content, 'html.parser')\n    tbody_container = soup.find_all('table')[4]\n    players_details = tbody_container.find_all('tr')\n    for player in players_details[1:] :\n        player_details = player.find_all('a')[0]\n        weight = player.find_all('td')[6]\n        player_name = player_details.get_text().strip()\n        player_list_lequipe.append(tuple((player_name,club_name,weight.get_text())))\nprint(\"all player from lequipe were uploaded\")","ab622126":"club_to_player_map = {}\nfor player in player_list_lequipe:\n    if player[1] in club_to_player_map.keys():\n        club_to_player_map[player[1]][player[0]] = player[2]\n    else:\n        club_to_player_map[player[1]] = {}\n        club_to_player_map[player[1]][player[0]] = player[2]","bf78bc46":"#Just to verify the name\nlequipe_clubs = club_to_player_map.keys()\nprint(lequipe_clubs)","6581ae31":"import difflib","d1fa0c00":"df_players = pd.DataFrame(player_list)\ndf_players.head()","e8154e8b":"Final_player = []\nfor player_transfertmarkt in player_list:\n    try:\n        list_of_players_lequipe = club_to_player_map[difflib.get_close_matches(player_transfertmarkt[2], lequipe_clubs,cutoff=0.1)[0]].keys()\n        weight_player = club_to_player_map[difflib.get_close_matches(player_transfertmarkt[2], lequipe_clubs,cutoff=0.1)[0]][difflib.get_close_matches(player_transfertmarkt[1][:15], list_of_players_lequipe,cutoff=0.1)[0]]\n        Final_player.append(tuple((player_transfertmarkt[0],player_transfertmarkt[1],player_transfertmarkt[2],player_transfertmarkt[3],player_transfertmarkt[4],weight_player,player_transfertmarkt[5],player_transfertmarkt[6],player_transfertmarkt[7],player_transfertmarkt[8],player_transfertmarkt[9],player_transfertmarkt[10])))\n    except Exception as e:\n        print(player_transfertmarkt[2])\n        Final_player.append(tuple((player_transfertmarkt[0],player_transfertmarkt[1],player_transfertmarkt[2],player_transfertmarkt[3],player_transfertmarkt[4],None,player_transfertmarkt[5],player_transfertmarkt[6],player_transfertmarkt[7],player_transfertmarkt[8],player_transfertmarkt[9],player_transfertmarkt[10])))\nprint(\"END\")\nprint(Final_player)\n                                                                                                                                        ","9d91edd1":"df_player = pd.DataFrame(Final_player)\ndf_player.columns = [\"id\", \"name\", \"club\",\"club_value\",\"birth\",\"height\",\"weight\",\"country\",\"role\",\"foot\",\"transfers\",\"injuries\"]\ndf_player.head()\ndf_player.shape","79779a07":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n%matplotlib inline\n\npd.set_option('notebook_repr_html', True)","1ef3b035":"tuples = []\ni=0\nfor t in open('..\/input\/Final-player.txt'):\n    i=i+1\n    if i == 2580:\n        tuples.append(eval(t[1:-1]))\n    else:\n        tuples.append(eval(t[1:-2]))\ndf = pd.DataFrame(tuples)\ndf.columns = [\"id\", \"name\", \"club\",\"club_value\",\"birth\",\"weight\",\"height\",\"country\",\"role\",\"foot\",\"transfers\",\"injuries\"]\nnumber_of_players = df.shape[0]\ndf.shape","dfbc5445":"df.head()","d1dc0285":"df = df[df['birth'].notnull()]\nnumber_of_new_players = df.shape[0]\ndf.shape","3e6ba240":"total_player = number_of_players-number_of_new_players\nprint(str(total_player) + \" players removed\")","76b72d63":"injuries_list = [injurie[1] for injurie in df['injuries'].sum()]\ns = pd.Series(injuries_list).value_counts()\nfor injur in (s[s > 75].index):\n    print(injur)","881a3442":"s[:5]","69e40c65":"s[:20].plot(kind='pie')","faf45ba2":"df.head()","767dfcac":"s = df.apply(lambda x: pd.Series(x[11]),axis=1).stack().reset_index(level=1, drop=True)\ns.name = 'injurie'\ndf = df.drop(['injuries'], axis=1).join(s)\ndf.reset_index()\ndf.head()\n\n","daf3f896":"df.shape","dfdfe24d":"df = df.reset_index(drop=True)\ndf.head()","f43845bb":"df = df[df['injurie'].notnull()]\ndf.shape","2e0cf0c1":"df_injurie = pd.DataFrame(df['injurie'].tolist(), index=df.index)\ndf_injurie.head()","a8164b7a":"df = df.drop('injurie', axis=1).join(df_injurie)\ndf.head()","542c9cbc":"df = df.rename(index=str, columns={0: \"season\", 1: \"type\" , 2 : \"days\"})\ndf.head()","fa4384cc":"import datetime","1c5dd137":"df.season = df.season.apply(lambda x : '20' + x[3:] + '-01-01')\ndf.head()","27d20268":"def injurie_age(season,birth):\n    return datetime.datetime.strptime(season, '%Y-%m-%d').year - datetime.datetime.strptime(birth, '%Y-%m-%d').year\n","2c536889":"df['age'] = df.apply(lambda x : injurie_age(x['season'], x['birth']), axis=1)","26d4276f":"df.head()","dadfdea5":"df[(df['age'] > 19) & (df['age'] < 36)]['age'].value_counts(normalize='true').sort_index().plot(kind='bar',style=None)","5c0c0a3c":"muscle_injurie = ['Hamstring Injury','Muscular problems','Muscle Injury','Torn Muscle Fibre',\n                  'Adductor problems','Thigh Muscle Strain','Groin Injury','Muscle Fatigue',\n                  'Achilles tendon problems','Torn muscle bundle','Biceps femoris muscle injury']","e2fbd803":"df[(df['type'].isin(muscle_injurie)) & (df['age'] > 19) & (df['age'] < 36)]['age'].value_counts(normalize='true').sort_index().plot(kind='bar',style=None)","18a480a1":"fig = plt.figure() # Create matplotlib figure\n\nax = fig.add_subplot(111) # Create matplotlib axes\nax2 = ax.twinx() # Create another axes that shares the same x-axis as ax.\nax.set_title('   General injuries RED against muscle injuries BLUE')\nwidth = 0.4\n\ndf[(df['age'] > 19) & (df['age'] < 36)]['age'].value_counts(normalize='true').sort_index().plot(kind='bar', color='red', ax=ax, width=width, position=1)\ndf[(df['type'].isin(muscle_injurie))\n   & (df['age'] > 19) & (df['age'] < 36)]['age'].value_counts(normalize='true').sort_index().plot(kind='bar',color='blue', ax=ax2, width=width, position=0)\n\nax.set_ylabel('general inj')\nax2.set_ylabel('muscle inj')\n\nplt.show()\n","cbe6d133":"df[(df['type'] == 'Ill') & (df['age'] > 19) & (df['age'] < 36)]['age'].value_counts(normalize='true').sort_index().plot(kind='bar',style=None,title=\"Ill injurie according to age\")","c29d7cea":"df.head()","3e20f959":"df = df[df['days'] != '?']\ndf[\"days\"] = pd.to_numeric(df[\"days\"])\n","7cf40f79":"fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(16,10))\nfig.suptitle('Injury recovery time according to age', fontsize=20)\ndf.groupby('type').get_group('Ankle Injury').groupby('age').filter(lambda x: len(x) > 6).groupby('age')['days'].mean().plot(ax=axes[0,0],title=\"Ankle Injury\",color='blue')\ndf.groupby('type').get_group('Hamstring Injury').groupby('age').filter(lambda x: len(x) > 0).groupby('age')['days'].mean().plot(ax=axes[0,1],title=\"Hamstring Injury\",color='blue')\ndf.groupby('type').get_group('Cruciate Ligament Rupture').groupby('age').filter(lambda x: len(x) > 5).groupby('age')['days'].mean().plot(ax=axes[1,0],title=\"Cruciate Ligament Rupture\",color='blue')\ndf.groupby('age')['days'].mean().plot(ax=axes[1,1],title=\"All Injuries\",color='blue')","f2896ee9":"df[(df['type'] == 'Cruciate Ligament Rupture')\n   & (df['age'] > 19) & (df['age'] < 36)]['age'].value_counts(normalize='true').sort_index().plot(kind='bar',style=None)","ef1e936c":"df.groupby('type')['days'].mean().sort_values(ascending=False)[:5].plot(kind='bar')","0cdb1b03":"df.head()","b1087780":"df['height'] = df['height'].str.replace(\",\",\".\")\ndf['height'] = df['height'].str.replace('\\\\xa0',\"\").astype(float)","35e29172":"df = df[df['weight'] != '-']\ndf['weight'] = df['weight'].astype(float)","3cf41e24":"def define_bmi(height,weight):\n    if (weight)\/(height*height) > 28:\n        return 1\n    return 0","ef53e2a4":"df['bmi'] = df.apply(lambda x : define_bmi(x['height'], x['weight']), axis=1)","449e87b6":"df.head()","27ec4e89":"players_high_bmi = set(df[df['bmi'] == 1].groupby('name').groups.keys())","33f9df1c":"len(players_high_bmi)","25e2f6c0":"players_high_bmi","28e141c6":"df['club_value'] = df['club_value'].apply(lambda x : x.split(\",\")[0]).astype(int)","62a3bb88":"df['club_value'] = df['club_value'].apply(lambda x : 1000 if x == 1 else x).astype(int)","b89b33f5":"df.head()","95720c86":"df['club_value'].plot(kind='hist',bins=25)","31382b93":"fig = plt.figure() # Create matplotlib figure\n\nax = fig.add_subplot(111)\ndf['club_value'].plot(kind='hist',bins=40,cumulative=True,ax=ax)\nplt.plot([0,1000], [2000,2000], 'r-', lw=2)\nplt.plot([0,1000], [4000,4000], 'r-', lw=2)\nplt.plot([0,1000], [6000,6000], 'r-', lw=2)\nplt.plot([0,1000], [8000,8000], 'r-', lw=2)\nplt.plot([0,1000], [10000,10000], 'r-', lw=2)\n","c2899938":"def club_to_category(value):\n    if 0 < value <=  75 :\n        return 1\n    if 75 < value <= 125 :\n        return 2\n    if 125 < value <= 225 :\n        return 3\n    if 225 < value <= 275 :\n        return 4\n    if 275 < value <= 600 :\n        return 5\n    else :\n        return 6  ","db46b31b":"df['club_value'] = df['club_value'].apply(club_to_category)","dee1de30":"df.head()","c6a673f1":"fig, axes = plt.subplots(nrows=2, ncols=3, figsize=(16,10))\nfig.suptitle('Injury recovery time according to budget club', fontsize=20)\ndf.groupby('type').get_group('Hamstring Injury').groupby('club_value').mean()['days'].plot(kind='bar',ax=axes[0,0],title=\"Hamstring Injury\")\ndf.groupby('type').get_group('Ankle Injury').groupby('club_value').mean()['days'].plot(kind='bar',ax=axes[0,1],title=\"Ankle Injury\")\ndf.groupby('type').get_group('Muscular problems').groupby('club_value').mean()['days'].plot(kind='bar',ax=axes[0,2],title=\"Muscular problems\")\ndf.groupby('type').get_group('Muscle Injury').groupby('club_value').mean()['days'].plot(kind='bar',ax=axes[1,0],title=\"Muscle Injury\")\ndf.groupby('type').get_group('Unknown Injury').groupby('club_value').mean()['days'].plot(kind='bar',ax=axes[1,1],title=\"Unknown Injury\")\ndf.groupby('club_value').mean()['days'].plot(kind='bar',ax=axes[1,2],title=\"Total Injury\")","9f168fef":"_estimation in millions enough to categorize_","996ae451":"### No we can see that this famous injury occurs more at the young players..","72e7adda":"_If you are not interested about web scraping you could jump directly to ANALYSIS part_ ","f3f1b4ca":"_For our analysis we will use_\n* pandas \n* numpy  \n* matplotlib ","577ca3da":"#### we will compare the two plot to see if we can draw conclusions","0d1b56ff":"### there is club like manchester city that the previous line will return 1 because it's billions and not millions so need to return it to 1000 millions","1e2bb717":"### Code to retreive injury per season of each player","5c2516c9":"#### During the analysis we will focus on injurie of player according to their age , so all the player that don't have info about the birth date will be remove ","24a4efd4":"# DATASET CREATION","43d82cd3":"#### currently each row is a player with a list of injuries , we will \"flatten\" it to get a row per injurie","4fe11384":"#### need to remove all the rows that dont have recovery time ","4a18b4d7":"#### Still I think that the age has an effect on the injuries of the players, so I selected only the muscle injuries.","328de15e":"## recovery time","7ffbeed2":"#### the injurie is currently describe as a tupple , I will create 3 new columns instead of injurie column :\n* season of the injurie\n* type of the injurie\n* recovery time ","6a4bdec6":"#### We see that the muscle injuries  happen later in the carreer when the player is older","2beb7c53":"### Is the recovery time depends on the club , the player belongs to ? If it's a rich\/poor club there will be an incidence? ","c49e34dc":"### We can see that money helps to recover faster after an injury ... We can see that for \"Total Injury\" in average if you are a player of a top club you will recover 15 days before a player of a bottom club , it's a huge difference ! ","900ac9db":"_I will describe the steps for building the dataset:_\n* get all the clubs from the 5 best league in europe .\n* For each club get all the players \n* For each player get the basic info and injury history\n","175e7fb3":"_In this project we will learn about EDA , this is my first project in EDA and for it I will analyse the injuries of soccer players in europe_","bebdb4b1":"#### Is the age's player has an impact on the injuries ?","443666ae":"## Question:","6c491f63":"#### Now we saw that the dateframe is ok , let's continue to manage and replace values in our dataframe","e60ac89f":"### Now I want to analyse the recovery time from an injurie according to player's age\nI will take \"famous\" injurie in football :<br>\n* Cruciate Ligament Rupture\n* Hamstring Injury\n* Ankle Injury\n","f0af90c0":"### Now we want to see if the famous injury 'Cruciate Ligament Rupture' occurs in olders players","bce91504":"### Let's see the distribution to know how to categorize in equal sets","2022eab1":"#### we can now start to answer to some questions , we will later manage the others column for further questions","e7f38819":"#### From the plot we can see , that is difficult to get a response to our question . We see that the player that have the most injuries are player between 23 and 27 years old ,one of the explication could be that it is the high period on their carriers , the period that players are playing a lot .","5a1c56c6":"#### we will investigate the influence of the age on the injuries ,so, for each row , I add a new column \" age \" , the age of the player at the specific injurie","42c27272":"## Replace and manage values in DataFrame","cdd8e11e":"### What are the 5 injuries that have the most recovery time ?","e3bb81c7":"#### What are the 5 main injuries ?","d959a549":"### To respond we need to group by the specific injurie and get the mean of recovery time.","df3ee442":"## Load Final-player.txt file\nFeatures are:\n* PlayerId\n* name\n* club\n* club_value\n* birth\n* weight\n* height\n* country : born state of the player\n* role\n* foot\n* transfers : history of transfers\n* injuries: history of injuries","370384cc":"# Analysis","4bfeabe3":"#### plot of the 20 main injuries","c84b26f6":"### Now I want to add a column that is the BMI of the players but ype of column are str need to convert it to float ","c495a022":"_Final-player variable is my dataset . To avoid to run the dataset creation (about 2 hours) on each change, I save it on txt file \"Final-player.txt\"\nand I will upload it each time I need_","20194d0c":"#### Let's create a list of muscle injury","68a708f6":"#### Let's see what our dataframe talking about , what are the injuries ? ","2c324548":"### Let's classify club in categories from poor club to rich club , I don't know yet How many categories it's depends on the distribution","a417ea12":"#### To get success response for my request to transfermarkt I need to join headers to my request ","e0a0b4d7":"### We want to divide our data frame in 6 equals sets , we have about ~12000 injuries , so each group get 2000 injuries","a07448b6":"### We can see that most of the club are under 320 millions","db872547":"#### Need to remove all the player that don't have any injurie history","39bd9782":"#### So we will separate the club by 6 categories :\n* [0-75] millions : 1 \n* [75-125] millions : 2 \n* [125 -225] millions : 3\n* [225 -275] millions : 4\n* [275 -600] millions : 5\n* [600 -1000] millions : 6","f2519acf":"#### we see that younger are more ill than older , perhaps their lifestyle ? ","9b0d2ddf":"#### Let's plot histogram of injurie \"ill\"","2797b813":"_until here we get all the player infos from transfertmarkt  .Now ,we need to retreive for each player his weight , this info could be find in website http:\/\/lequipe.fr_","5122c3a3":"_Below the function that calculate the BMI (kg\/m^2)<br>\ndefinition of BMI : <br>\naccepted BMI ranges are underweight: under 18.5 kg\/m2, normal weight: 18.5 to 25, overweight: 25 to 30, obese: over 30<br>_\n","0a4d7f3e":"_I'm interested about the link between age\/weight and injury\/recovery time_","6cd2bbab":"_For this project I decide to create my own dataset and not to take a dataset from known website like kaggle and so ..\nMy dataset is built from data taken from two website :_\n * http:\/\/Transfermarket.com \n * http:\/\/lequipe.fr <br>\n \n_from Transfermarket I get all the info about players name, club, age and the most important injury history and from lequipe I get the weight of the players._\n\n_This method is called Web scraping and for it we need two library:_\n* requests\n* BeautifulSoup","78c487ef":"### There is only three player with a BMI superior to 28 so can't make any analysis there is no enough player to see a correlation between BMI and injuries","775e425e":"### Questions:","087c3837":"### For the three injuries that we choose we can't draw any conclusion , but when we look to all injuries together we can see that the graph decline with the age .","e85ddb16":"_Now one of the most difficult step until now is to merge the two dataSet in one<br>\nProblem: to merge the dataset I need to find commun columns between the two dataset like club and name  but the club in the two dataset ( website ) are not neccessarly the same so I insert lib \" difflib\"._"}}