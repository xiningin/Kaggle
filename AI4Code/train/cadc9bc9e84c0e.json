{"cell_type":{"cee18645":"code","294b1cd0":"code","04258840":"code","f5742cac":"code","191c1195":"code","b64d77a9":"code","30236640":"code","ac3617e1":"code","bdefc620":"code","d0046405":"code","db179728":"code","569f5222":"code","4f7e38db":"code","eb9c8a4e":"code","5a42da20":"code","5e17d945":"code","5c951b2c":"code","af4d0464":"code","00a0075b":"code","11b35e29":"code","7c808b8c":"code","deea05cf":"code","7f34dad1":"code","1bed5236":"code","ba95ffb4":"code","fbdc34b3":"code","8fe834d5":"code","656c0b1a":"code","2e40e177":"code","1fafa369":"code","d0bb7d1f":"code","84499dce":"markdown","0f384791":"markdown","c912bf08":"markdown","5dc69ced":"markdown","f5dea21e":"markdown","adfb0cdf":"markdown","d102f26f":"markdown","5b361f8a":"markdown","e9d15b45":"markdown","aef627d5":"markdown","338a2e68":"markdown","c27f4cec":"markdown","e7b88c00":"markdown","13dee23a":"markdown","498c5723":"markdown","954f205e":"markdown","eb2a4bea":"markdown","7aa7dbd1":"markdown","d2a92904":"markdown","8515324a":"markdown","fe92fb1e":"markdown","1405c307":"markdown","d938a693":"markdown"},"source":{"cee18645":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","294b1cd0":"loans = pd.read_csv('..\/input\/loan-data\/loan_data.csv')","04258840":"loans.info()","f5742cac":"loans.describe()","191c1195":"loans.head()","b64d77a9":"plt.figure(figsize=(10,6))\nloans[loans['credit.policy']==1]['fico'].hist(alpha=0.5,color='blue',\n                                              bins=30,label='Credit.Policy=1')\nloans[loans['credit.policy']==0]['fico'].hist(alpha=0.5,color='red',\n                                              bins=30,label='Credit.Policy=0')\nplt.legend()\nplt.xlabel('FICO')","30236640":"plt.figure(figsize=(10,6))\nloans[loans['not.fully.paid']==1]['fico'].hist(alpha=0.5,color='blue',\n                                              bins=30,label='not.fully.paid=1')\nloans[loans['not.fully.paid']==0]['fico'].hist(alpha=0.5,color='red',\n                                              bins=30,label='not.fully.paid=0')\nplt.legend()\nplt.xlabel('FICO')","ac3617e1":"plt.figure(figsize=(11,7))\nsns.countplot(x='purpose',hue='not.fully.paid',data=loans,palette='Set1')","bdefc620":"sns.jointplot(x='fico',y='int.rate',data=loans,color='purple')","d0046405":"plt.figure(figsize=(11,7))\nsns.lmplot(y='int.rate',x='fico',data=loans,hue='credit.policy',col='not.fully.paid',palette='Set1')","db179728":"loans.info()","569f5222":"cat_feats = ['purpose']","4f7e38db":"final_data = pd.get_dummies(loans,columns=cat_feats,drop_first=True)","eb9c8a4e":"final_data.info()","5a42da20":"from sklearn.model_selection import train_test_split","5e17d945":"X = final_data.drop('not.fully.paid',axis=1)\ny = final_data['not.fully.paid']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=101)","5c951b2c":"from sklearn.tree import DecisionTreeClassifier","af4d0464":"dtree = DecisionTreeClassifier()","00a0075b":"dtree.fit(X_train,y_train)","11b35e29":"predictions = dtree.predict(X_test)","7c808b8c":"from sklearn.metrics import classification_report,confusion_matrix","deea05cf":"print(classification_report(y_test,predictions))","7f34dad1":"print(confusion_matrix(y_test,predictions))","1bed5236":"from sklearn.ensemble import RandomForestClassifier","ba95ffb4":"rfc = RandomForestClassifier(n_estimators=600)","fbdc34b3":"rfc.fit(X_train,y_train)","8fe834d5":"predictions = rfc.predict(X_test)","656c0b1a":"from sklearn.metrics import classification_report,confusion_matrix","2e40e177":"print(classification_report(y_test,predictions))","1fafa369":"print(confusion_matrix(y_test,predictions))","d0bb7d1f":"# Depends what metric you are trying to optimize for. \n# Notice the recall for each class for the models.\n# Neither did very well, more feature engineering is needed.","84499dce":"**What performed better the random forest or the decision tree?**","0f384791":"# Categorical Features\n\nNotice that the **purpose** column as categorical\n\nThat means we need to transform them using dummy variables so sklearn will be able to understand them. Let's do this in one clean step using pd.get_dummies.\n\nLet's show you a way of dealing with these columns that can be expanded to multiple categorical features if necessary.\n\n**Create a list of 1 element containing the string 'purpose'. Call this list cat_feats.**","c912bf08":"# Get the Data\n\n**Use pandas to read loan_data.csv as a dataframe called loans.**","5dc69ced":"**Create a countplot using seaborn showing the counts of loans by purpose, with the color hue defined by not.fully.paid. **","f5dea21e":"**Let's see the trend between FICO score and interest rate.**","adfb0cdf":"# Predictions and Evaluation\n\nLet's predict off the y_test values and evaluate our model.\n\n**Predict the class of not.fully.paid for the X_test data.**","d102f26f":"# Exploratory Data Analysis\n\nLet's do some data visualization!\n\n**Create a histogram of two FICO distributions on top of each other, one for each credit.policy outcome.**","5b361f8a":"# Train Test Split\n\nNow its time to split our data into a training set and a testing set!","e9d15b45":"For this project we will be exploring publicly available data from [LendingClub.com](https:\/\/www.lendingclub.com\/). Lending Club connects people who need money (borrowers) with people who have money (investors). Hopefully, as an investor you would want to invest in people who showed a profile of having a high probability of paying you back. We will try to create a model that will help predict this.\n\nLending club had a [very interesting year in 2016](https:\/\/en.wikipedia.org\/wiki\/Lending_Club#2016), so let's check out some of their data and keep the context in mind. This data is from before they even went public.\n\nWe will use lending data from 2007-2010 and be trying to classify and predict whether or not the borrower paid back their loan in full. You can download the data from [here](https:\/\/www.lendingclub.com\/info\/download-data.action).\n\nHere are what the columns represent:\n* credit.policy: 1 if the customer meets the credit underwriting criteria of LendingClub.com, and 0 otherwise.\n* purpose: The purpose of the loan (takes values \"credit_card\", \"debt_consolidation\", \"educational\", \"major_purchase\", \"small_business\", and \"all_other\").\n* int.rate: The interest rate of the loan, as a proportion (a rate of 11% would be stored as 0.11). Borrowers judged by LendingClub.com to be more risky are assigned higher interest rates.\n* installment: The monthly installments owed by the borrower if the loan is funded.\n* log.annual.inc: The natural log of the self-reported annual income of the borrower.\n* dti: The debt-to-income ratio of the borrower (amount of debt divided by annual income).\n* fico: The FICO credit score of the borrower.\n* days.with.cr.line: The number of days the borrower has had a credit line.\n* revol.bal: The borrower's revolving balance (amount unpaid at the end of the credit card billing cycle).\n* revol.util: The borrower's revolving line utilization rate (the amount of the credit line used relative to total credit available).\n* inq.last.6mths: The borrower's number of inquiries by creditors in the last 6 months.\n* delinq.2yrs: The number of times the borrower had been 30+ days past due on a payment in the past 2 years.\n* pub.rec: The borrower's number of derogatory public records (bankruptcy filings, tax liens, or judgments).","aef627d5":"# Predictions and Evaluation of Decision Tree\n\n**Create predictions from the test set and create a classification report and a confusion matrix.**","338a2e68":"MODEL DONE !!!","c27f4cec":"**Create a similar figure, except this time select by the not.fully.paid column.**","e7b88c00":"**Show the Confusion Matrix for the predictions.**","13dee23a":"# Setting up the Data\n\nLet's get ready to set up our data for our Random Forest Classification Model!\n\n**Check loans.info() again.**","498c5723":"**Check out the info(), head(), and describe() methods on loans.**","954f205e":"**Now create a classification report from the results.**","eb2a4bea":"# Training the Random Forest model\n\nNow its time to train our model!\n\n**Create an instance of the RandomForestClassifier class and fit it to our training data from the previous step.**","7aa7dbd1":"**Now use pd.get_dummies(loans,columns=cat_feats,drop_first=True) to create a fixed larger dataframe that has new feature columns with dummy variables. Set this dataframe as final_data.**","d2a92904":"**Create an instance of DecisionTreeClassifier() called dtree and fit it to the training data.**","8515324a":"# Training a Decision Tree Model\n\nLet's start by training a single decision tree first!","fe92fb1e":"# Import Libraries\n\n**Import the libraries for pandas and plotting.**","1405c307":"**Create the following lmplots to see if the trend differed between not.fully.paid and credit.policy.**","d938a693":"# Loan data - Decision Trees and Random Forests"}}