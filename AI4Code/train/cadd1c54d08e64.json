{"cell_type":{"d777dc18":"code","f21512f9":"code","ef6b8807":"code","30fd03d9":"code","9d81798c":"code","cc7871a4":"code","83b29b34":"code","5b075984":"code","11b3d683":"code","d6c8590f":"code","41fd01b3":"code","9499cc3f":"code","08d20899":"code","b9fb5230":"code","8ca09851":"code","80112b62":"code","cf79744d":"markdown","9085fe46":"markdown","3351d035":"markdown","c32fd05f":"markdown","01792936":"markdown","131eef4a":"markdown","3555393c":"markdown","814328c3":"markdown","1b800d2a":"markdown","7e80d09a":"markdown","f8d836c5":"markdown","8cb0b044":"markdown","c423c597":"markdown","ee0c3a1d":"markdown"},"source":{"d777dc18":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\n\nimport warnings\nwarnings.filterwarnings('ignore')","f21512f9":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\n\ntest_pid = test['PassengerId']","ef6b8807":"train.head()","30fd03d9":"train[\"Fare\"] = (train[\"Fare\"] - train[\"Fare\"].min()) \/ (train[\"Fare\"].max() - train[\"Fare\"].min())\ntrain['Fare'] = train['Fare'].fillna(-999)\n\ntest[\"Fare\"] = (test[\"Fare\"] - test[\"Fare\"].min()) \/ (test[\"Fare\"].max() - test[\"Fare\"].min())\ntest['Fare'] = test['Fare'].fillna(-999)","9d81798c":"train[\"Sex\"] = train[\"Sex\"].factorize()[0]\ntest[\"Sex\"] = test[\"Sex\"].factorize()[0]","cc7871a4":"train[\"Embarked\"] = train[\"Embarked\"].factorize()[0]\ntest[\"Embarked\"] = test[\"Embarked\"].factorize()[0]","83b29b34":"for i in range(len(train[\"Name\"])): train[\"Name\"][i] = train[\"Name\"][i].split(',')[0]\ntrain[\"Name\"] = train[\"Name\"].factorize()[0]\n\nfor i in range(len(test[\"Name\"])): test[\"Name\"][i] = test[\"Name\"][i].split(',')[0]\ntest[\"Name\"] = test[\"Name\"].factorize()[0]","5b075984":"train[\"Cabin\"] = train[\"Cabin\"].factorize()[0]\ntest[\"Cabin\"] = test[\"Cabin\"].factorize()[0]","11b3d683":"train[\"Age\"] = (train[\"Age\"] - train[\"Age\"].mean()) \/ train[\"Age\"].std()\ntrain[\"Age\"] = train[\"Age\"].fillna(-999)\n\ntest[\"Age\"] = (test[\"Age\"] - test[\"Age\"].mean()) \/ test[\"Age\"].std()\ntest[\"Age\"] = test[\"Age\"].fillna(-999)","d6c8590f":"train.drop(['Ticket'],axis=1,inplace=True)\ntest.drop(['Ticket'],axis=1,inplace=True)","41fd01b3":"X = train.drop(['Survived'],axis=1)\ny = train['Survived']","9499cc3f":"X.head()","08d20899":"from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression(random_state=0, max_iter=2500)\n\nmodel.fit(X,y)","b9fb5230":"pred = model.predict(test)","8ca09851":"sub = pd.DataFrame({'PassengerId':test_pid,'Survived':pred})","80112b62":"sub.to_csv('sub.csv',index=False)\nsub.head()","cf79744d":"# Model","9085fe46":"### Standardizing Age","3351d035":"### Mapping Embarked to int values","c32fd05f":"# Load Data","01792936":"### Dropping columns","131eef4a":"# Introduction","3555393c":"### We will be using Logistic Regression for predictions","814328c3":"# Preprocessing","1b800d2a":"![](https:\/\/st3.depositphotos.com\/1998651\/13850\/v\/600\/depositphotos_138506364-stock-illustration-cup-of-coffee-with-have.jpg)","7e80d09a":"* The Notebook is created for famous Titanic Survival Prediction.\n* The Notebook is a great example of how sometimes some basic techniques like logistic regression outperform complex techniques like xgboost,randomforest etc.\n* ThIs Notebook gives 79.904% Accurcay and lands you in top 5% of LB.","f8d836c5":"### Normalizing Fare","8cb0b044":"### Mapping Cabin to int values","c423c597":"### Getting titles from names","ee0c3a1d":"### Mapping Sex to int values"}}