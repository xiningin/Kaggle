{"cell_type":{"9598bf61":"code","699e7473":"code","6fcd8829":"code","4217d6e4":"code","5babc9bc":"code","afb63043":"code","7019139d":"code","b4e6e9b0":"code","f1b3077b":"code","9b44e1e9":"code","3ddd5658":"code","674eeb14":"markdown","3ea6226b":"markdown","e7e64878":"markdown","9ec0a613":"markdown","7781f9da":"markdown","af6864e3":"markdown","459ae76d":"markdown","6773cca2":"markdown"},"source":{"9598bf61":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\n\nfrom sklearn.metrics import accuracy_score \n\nimport warnings \nwarnings.filterwarnings('ignore')","699e7473":"df = pd.read_csv(\"..\/input\/mushroom-classification\/mushrooms.csv\")","6fcd8829":"df.head()","4217d6e4":"sns.countplot(data=df,x='class')\nplt.show()","5babc9bc":"mappings = list()\n\nencoder = LabelEncoder()\n\nfor column in range(len(df.columns)):\n    df[df.columns[column]] = encoder.fit_transform(df[df.columns[column]])\n    mappings_dict = {index: label for index, label in enumerate(encoder.classes_)}\n    mappings.append(mappings_dict)\n\nmappings","afb63043":"#corelation matrix.\ncor_mat= df[:].corr()\nmask = np.array(cor_mat)\nmask[np.tril_indices_from(mask)] = False\nfig=plt.gcf()\nfig.set_size_inches(23,9)\nsns.heatmap(data=cor_mat,mask=mask,square=True,annot=True,cbar=True,cmap='plasma')\nplt.show()","7019139d":"# Separate dependent and independent variables \nX = df.drop('class', axis=1)\ny = df['class']","b4e6e9b0":"# Scaling data\nsc = StandardScaler()\n\nX = pd.DataFrame(sc.fit_transform(X), columns=X.columns,index = X.index)\nX.head()","f1b3077b":"# Train-Test Split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state = 50)","9b44e1e9":"# Models\nmodels=[LogisticRegression(), SVC(C=1.0, kernel='rbf'),RandomForestClassifier(random_state=50),XGBClassifier(random_state=50,eval_metric='logloss')]\nmodel_names=['LogisticRegression','SVM','RandomForestClassifier','XGBoostClassifier']\nacc = []\ndictionary = {}\nfor model in range(len(models)):\n    clf = models[model]\n    clf.fit(X_train,y_train)\n    y_pred = clf.predict(X_test)\n    acc.append(accuracy_score(y_pred,y_test))\n     \ndictionary = {'Model Names':model_names,'Accuracy':acc}\n# Put the accuracies in a data frame.\nacc_df = pd.DataFrame(dictionary)\n","3ddd5658":"print(acc_df)","674eeb14":"<\/p>It's a quiet balanced dataset,so we don't need to do anything here.<\/p>","3ea6226b":"### Correlation Analysis","e7e64878":"### Load DataSet","9ec0a613":"### Importing Required Libraries","7781f9da":"### Data Preprocessing","af6864e3":"# **Mushroom Classification**","459ae76d":"**We can see that the results are very good:)**","6773cca2":"### Model Building"}}