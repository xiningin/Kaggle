{"cell_type":{"7136f25c":"code","f70a6fd4":"code","e75574f0":"code","a93561d9":"code","f5fd4009":"code","a8f00dad":"code","3b900aa2":"code","149dc3e5":"code","5db2f007":"code","27e8badb":"code","29abbe93":"code","b9f09c62":"code","1db11533":"code","be5c55d7":"code","07c56ec6":"code","dd217a69":"code","38fe407b":"code","7c3de1fa":"code","869bb1b2":"code","e725eadd":"code","d9d0d169":"code","57b1b880":"code","75792714":"code","2a243a78":"code","2822bf81":"code","abf592d3":"markdown","54e179c1":"markdown","3fb33615":"markdown"},"source":{"7136f25c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\n\nnp.random.seed(2)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\n\nsns.set(style='white', context='notebook', palette='deep')","f70a6fd4":"train=pd.read_csv('..\/input\/Kannada-MNIST\/train.csv')\ntest=pd.read_csv('..\/input\/Kannada-MNIST\/test.csv')\nsample_sub=pd.read_csv('..\/input\/Kannada-MNIST\/sample_submission.csv')","e75574f0":"print('The Train  dataset has {} rows and {} columns'.format(train.shape[0],train.shape[1]))\nprint('The Test  dataset has {} rows and {} columns'.format(test.shape[0],test.shape[1]))","a93561d9":"X_train=train.drop('label',axis=1)\nY_train=train.label","f5fd4009":"test=test.drop('id',axis=1)","a8f00dad":"X_train=X_train\/255\ntest=test\/255","3b900aa2":"X_train=X_train.values.reshape(-1,28,28,1)\ntest=test.values.reshape(-1,28,28,1)","149dc3e5":"print('The shape of train set now is',X_train.shape)\nprint('The shape of test set now is',test.shape)","5db2f007":"Y_train=to_categorical(Y_train)","27e8badb":"X_train,X_test,y_train,y_test=train_test_split(X_train,Y_train,random_state=42,test_size=0.15)","29abbe93":"plt.imshow(X_train[0][:,:,0])","b9f09c62":"datagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\ndatagen.fit(X_train)","1db11533":"model = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","be5c55d7":"optimizer=RMSprop(lr=0.001,rho=0.9,decay=0.0)","07c56ec6":"model.compile(optimizer=optimizer,loss=['categorical_crossentropy'],metrics=['accuracy'])","dd217a69":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","38fe407b":"epochs=30\nbatch_size=64","7c3de1fa":"# Fit the model\nhistory = model.fit_generator(datagen.flow(X_train,y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_test,y_test),\n                              verbose = 2, steps_per_epoch=X_train.shape[0] \/\/ batch_size\n                              , callbacks=[learning_rate_reduction])","869bb1b2":"fig,ax=plt.subplots(2,1)\nfig.set\nx=range(1,1+epochs)\nax[0].plot(x,history.history['loss'],color='red')\nax[0].plot(x,history.history['val_loss'],color='blue')\n\nax[1].plot(x,history.history['acc'],color='red')\nax[1].plot(x,history.history['val_acc'],color='blue')\nax[0].legend(['trainng loss','validation loss'])\nax[1].legend(['trainng acc','validation acc'])\nplt.xlabel('Number of epochs')\nplt.ylabel('accuracy')","e725eadd":"y_pre_test=model.predict(X_test)\ny_pre_test=np.argmax(y_pre_test,axis=1)\ny_test=np.argmax(y_test,axis=1)","d9d0d169":"test=pd.read_csv('..\/input\/Kannada-MNIST\/test.csv')\n","57b1b880":"test_id=test.id\n\ntest=test.drop('id',axis=1)\ntest=test\/255\ntest=test.values.reshape(-1,28,28,1)","75792714":"y_pre=model.predict(test)     ##making prediction\ny_pre=np.argmax(y_pre,axis=1) ","2a243a78":"sample_sub['label']=y_pre\nsample_sub.to_csv('submission.csv',index=False)","2822bf81":"sample_sub.head()","abf592d3":"## Building Model","54e179c1":"## Data Augmentation:","3fb33615":"**importing libs**"}}