{"cell_type":{"4be1d382":"code","3db086af":"code","7385e960":"code","13244cd6":"code","325b87bc":"code","cd0fade0":"code","ba756f83":"code","e7c484f3":"code","701691b8":"code","6ae83fa1":"code","6bbe3d18":"code","970055cb":"markdown","c0999e99":"markdown","4029f790":"markdown","aae601f1":"markdown","8f900ffb":"markdown","2304fc84":"markdown","868616c5":"markdown","d34021bb":"markdown","91e2251d":"markdown"},"source":{"4be1d382":"import seaborn as sns; sns.set()\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nimport pandas as pd\nimport math\nimport warnings\n\n# Disable warnings \nwarnings.filterwarnings('ignore')\n\n# Read data\ncorona_data = pd.read_csv(\"\/kaggle\/input\/covid19-india-statewise-reported-cases-timeseries\/covid19-india-statewise-timeseries.csv\",index_col=0, parse_dates=True, dayfirst=True)\n\n# Fill all blank values to 0\ncorona_data = corona_data.fillna(0);\n\n# Convert all numeric columns to int32\ncorona_data[['Total Confirmed Cases', 'Cured\/Discharged\/Migrated','Death']] = corona_data[['Total Confirmed Cases', 'Cured\/Discharged\/Migrated','Death']].astype('int32')\n\n# Active cases = Confirmed cases - (Cured\/Dicharged cases + Deaths)\nactive_cases = corona_data['Total Confirmed Cases'] - corona_data['Cured\/Discharged\/Migrated'] - corona_data['Death']\n\n# Add Active cases column to the original data\ncorona_data.insert(2, 'Active Cases', active_cases)\n\n# Calculate daily change, first sort by date and total confirmed cases\ncorona_data = corona_data.sort_values(by=['State','Date','Total Confirmed Cases'], ascending=True)\ncorona_data['Daily Change'] = corona_data.groupby('State')['Total Confirmed Cases'].diff(1)\n# For the first reported day, daily change = Confirmed cases\ncorona_data['Daily Change'].fillna(corona_data['Total Confirmed Cases'], inplace=True)\ncorona_data[['Daily Change']] = corona_data[['Daily Change']].astype('int32')\n# Restore sorting\ncorona_data = corona_data.sort_values(by=['Date','Total Confirmed Cases'], ascending=True)\n\n# Aggregate the state data datewise to get the national numbers\nindia_data = corona_data.groupby('Date')['Total Confirmed Cases','Active Cases','Daily Change'].sum().reset_index()\n# Calculate 5 day moving average\nindia_data['5 Day Moving Average'] = india_data['Total Confirmed Cases'].rolling(window=5).mean()\n# Take latest 30 day data\n# Note: Since the index was reset we cannot use last() method here\nindia_data=india_data.iloc[-30:].reset_index(drop=True)\nindia_data['5 Day Moving Average'] = india_data['5 Day Moving Average'].astype('int32')\n\n# Remove first three days as not much infomation there\n#corona_data=corona_data[3:]\ncorona_data=corona_data.last('30D')\n\n#india_data = corona_data.groupby('Date')['Total Confirmed Cases','Active Cases','Daily Change'].sum().reset_index()\n\n# Get the data for last reported date\nfull_latest = corona_data.last('1D')\n\n# Sort descending\nfull_latest = full_latest.sort_values(by=['Active Cases'], ascending=False)\n\n# Get the data for the top 10 states from the lates reported data\ntop_ten = full_latest[:10]\n\n# Get the list of top 10 states as per the latest data\nstate_list_top10 = top_ten['State'].unique()\n\n# Get all historical data for top 10 state\ncorona_data_top10 = corona_data[corona_data['State'].isin(top_ten['State'].tolist())] \n\n#maha_data = corona_data.sort_values(by=['State','Date','Total Confirmed Cases'], ascending=False)\n#maha_data.loc[maha_data['State'] == 'Maharashtra']","3db086af":"summary_data = full_latest.groupby('Date')['Total Confirmed Cases', 'Daily Change', 'Active Cases', 'Cured\/Discharged\/Migrated', 'Death'].sum().reset_index()\nsummary_data['Date'] = summary_data['Date'].dt.strftime('%d %B %Y')\nsummary_data.style.format({\"Total Confirmed Cases\": \"{:,.0f}\", \"Daily Change\": \"{:,.0f}\", \"Active Cases\": \"{:,.0f}\", \"Cured\/Discharged\/Migrated\": \"{:,.0f}\", \"Death\": \"{:,.0f}\"})\n\nstyles = [\n    dict(selector=\"th\", props=[(\"font-size\", \"120%\"),\n                               (\"text-align\", \"center\"),\n                              (\"font-weight\", \"normal\"),\n                              (\"color\", \"grey\")]),\n    dict(selector=\"td\", props=[(\"font-size\", \"250%\"),\n                               (\"text-align\", \"center\"),\n                              (\"background-color\", \"white\"),\n                           (\"color\", \"dodgerblue\")]),\n    #dict(selector=\".row_heading, .blank\", props=[(\"display\", \"none;\")])\n]\n\nhtml = (summary_data.style.set_table_styles(styles))\nhtml","7385e960":"# latest aggregated data\nfull_latest_grouped = full_latest.groupby('State')['Total Confirmed Cases', 'Daily Change', 'Active Cases', 'Cured\/Discharged\/Migrated', 'Death'].sum().reset_index()\n\nfull_latest_grouped = full_latest_grouped.sort_values(by='Total Confirmed Cases', ascending=False)\nfull_latest_grouped = full_latest_grouped.reset_index(drop=True)\nfull_latest_grouped.style.background_gradient(cmap='mako_r')","13244cd6":"import matplotlib.ticker as ticker\n\nsns.set_style(\"whitegrid\")#, {'xtick.bottom': True, 'xtick.color': '.6'}\nsns.set_context(\"talk\", rc={\"grid.linewidth\": 0.0})\n\nfig, ax1 = plt.subplots(figsize=(16,10))\nax2 = ax1.twinx()\n\ng = sns.lineplot(x=india_data.index, y='Total Confirmed Cases', legend=\"brief\", color=sns.xkcd_rgb[\"dark pink\"],\n                  data=india_data, ax=ax1)\n\ng = sns.lineplot(x=india_data.index, y='Active Cases', legend=\"brief\", color=\"teal\", \n                  data=india_data, ax=ax1)\n\nsns.barplot(x=india_data.index, y='Daily Change', color=\"lightgray\", alpha=0.3,\n            data=india_data, ax=ax2)\n\nax1.set_xlabel('Date')\nax1.set_ylabel('Number of Cases')\nax1.yaxis.label.set_color('teal')\nax1.tick_params(axis='y', colors='teal')\n\nax2.yaxis.label.set_color('gray')\nax2.tick_params(axis='y', colors='gray')\n\nx_labels = india_data['Date'].dt.strftime('%b %d').copy()\nfor i in range(len(x_labels)):\n    if (i % 7) != 0:\n        x_labels[i] = ''\n\n\nax1.xaxis.set_major_formatter(ticker.FixedFormatter(x_labels))\n\nplt.title('Total Confirmed and Active Cases Trend (Last 30 Days)')\nax1.legend(['Total Confirmed Cases','Active Cases'])\n\nplt.show()","325b87bc":"def plot_doubling_rate(data, doubling_rate, plot):\n    y_max = float(data['Total Confirmed Cases'].max())\n    y_min = float(data['5 Day Moving Average'].min())\n    x_min = float(data.index.min())\n    x_max = float(data.index.max())\n\n    x_d1 = np.empty(0)\n    y_d1 = np.empty(0)\n    x_d1 = np.append(x_d1, x_min) \n    y_d1 = np.append(y_d1, y_min)\n\n    x_2 = doubling_rate * (math.log2(y_max)-math.log2(y_min))\n    if (x_2 > x_max):\n        y_2 = 2 ** ((x_max\/doubling_rate) + math.log2(y_min))\n        x_2 = x_max\n        #x_2 = doubling_rate * (math.log2(y_2)-math.log2(y_min))\n    else:\n        y_2 = y_max\n\n    x_d1 = np.append(x_d1, int(x_2))\n    y_d1 = np.append(y_d1, int(y_2))\n\n    annotation = str(doubling_rate) + \" Days\"\n    line_index = len(plot.lines)\n    plot = sns.lineplot(x=x_d1, y=y_d1, color=\"grey\")\n    plot.lines[line_index].set_linestyle(\"-.\")\n    plot.annotate(annotation, xy=(x_d1[1], y_d1[1]),color=\"grey\")","cd0fade0":"import matplotlib.ticker as ticker\nimport numpy as np\n\nsns.set_style(\"whitegrid\")#, {'xtick.bottom': True, 'xtick.color': '.6'}\nsns.set_context(\"talk\", rc={\"grid.linewidth\": 0.3})#sns.set(style=\"ticks\", rc={\"lines.linewidth\": 0.7})\n\nplt.figure(figsize=(16, 10))\n\nplot = sns.lineplot(x=india_data.index, y='5 Day Moving Average', hue=None, color=sns.xkcd_rgb[\"tangerine\"],\n                  data=india_data)\n\nsns.set_context(rc={\"grid.linewidth\": 0.3, \"lines.linewidth\": 0.8})\n\n# Doubling rate = 14 days\nplot_doubling_rate(india_data, 14, plot)\n\n# Doubling rate = 15 days\nplot_doubling_rate(india_data, 15, plot)\n\n# Doubling rate = 16 days\nplot_doubling_rate(india_data, 16, plot)\n\nx1_labels = india_data['Date'].dt.strftime('%b %d').copy()\nfor m in range(len(x1_labels)):\n    if (m % 7) != 0:\n        x1_labels[m] = ''\n\nplot.xaxis.set_major_locator(ticker.FixedLocator(india_data.index))\nplot.xaxis.set_major_formatter(ticker.FixedFormatter(x1_labels))\n\nplt.title('5 Day Moving Average of Total Confirmed Cases and Doubling Rate(Last 30 Days)')\nplt.xlabel('Date')\nplt.ylabel('Total Confirmed Cases')\nplt.show()","ba756f83":"# Consilidate rest of the states apart from top 10 into a single entry called 'Others'\nothers_confirmed_sum = full_latest[10:]['Total Confirmed Cases'].sum()\nothers_active_sum = full_latest[10:]['Active Cases'].sum()\n\nothers_data = pd.DataFrame({'State':['Others'], \n                    'Total Confirmed Cases':others_confirmed_sum,  \n                    'Active Cases':others_active_sum,\n                    'Cured\/Discharged\/Migrated':0,\n                    'Death':0}, index=[top_ten.index[0]]) \n\n# Add the 'Others' entry to top 10\ntop_ten_with_others = top_ten.append(others_data)","e7c484f3":"# Plot pie chart to see the percentage of active cases statewise\npalette=sns.color_palette(\"Blues_r\", n_colors=11)\n\n# Plot\nplt.figure(figsize=(16, 10))\nplt.pie(top_ten_with_others['Active Cases'], labels=top_ten_with_others['State'], colors=palette,\nautopct='%1.1f%%', shadow=False, startangle=90)\n\nplt.title('Percentage of Active Cases by State')\nplt.axis('equal')\nplt.show()","701691b8":"plt.figure(figsize=(16, 10))\n\npalette=sns.color_palette(\"mako\", 10)\nsns.set_style(\"whitegrid\")\nsns.set_context(\"talk\", rc={\"grid.linewidth\": 0.3})\n\nplot = sns.lineplot(x=corona_data_top10.index, y=\"Active Cases\", legend=False,\n                  hue=\"State\", hue_order = state_list_top10, palette=palette, \n                  data=corona_data_top10)\n\n# Set x-axis major ticks to weekly interval, on Mondays\nplot.xaxis.set_major_locator(mdates.WeekdayLocator(byweekday=mdates.MONDAY))\n# Format x-tick labels as 3-letter month name and day number\nplot.xaxis.set_major_formatter(mdates.DateFormatter('%b %d'));\n\nprevious_y = 999999999999\nx = full_latest['State'].index[0]\nfor i, state in enumerate(state_list_top10):\n    y = full_latest[full_latest['State']==state]['Active Cases'][0]\n    # Do not overlap annotations\n    if ((previous_y - y) > 70):\n        plot.annotate(state, xy=(x, y),color=palette[i])\n    previous_y = y\n\nplt.title('Active Cases Trend in Top 10 States (Last 30 Days)')\nplt.xlabel('Date')\nplt.ylabel('Active Cases')\nplt.show()","6ae83fa1":"# Get sorted list of states by active cases from the master data. This list will be used as hue_order for linegraph\nstate_master_sorted = corona_data.groupby('State')['State','Active Cases'].last().sort_values(by='Active Cases', ascending=False)\n\nplt.figure(figsize=(16, 10))\n\npalette=sns.color_palette(\"Blues_r\", corona_data['State'].nunique())\nsns.set_context(\"talk\")\n\nplot = sns.lineplot(x=corona_data.index, y=\"Active Cases\", legend=False,\n                  hue=\"State\", hue_order = state_master_sorted['State'], palette=palette, \n                  data=corona_data)\n\n# Set x-axis major ticks to weekly interval, on Mondays\nplot.xaxis.set_major_locator(mdates.WeekdayLocator(byweekday=mdates.MONDAY))\n# Format x-tick labels as 3-letter month name and day number\nplot.xaxis.set_major_formatter(mdates.DateFormatter('%b %d'));\n\nprevious_y = 999999999999\nx = full_latest['State'].index[0]\nfor i, state in enumerate(state_master_sorted['State']):\n    y = state_master_sorted.loc[state_master_sorted['State'] == state]['Active Cases'][0]\n    # Do not overlap annotations\n    if ((previous_y - y) > 70):\n        plot.annotate(state, xy=(x, y),color=palette[i])\n    previous_y = y\n\nplt.title('Active Cases Trend - All States (Last 30 Days)')\nplt.xlabel('Date')\nplt.ylabel('Number of Active Cases')\nplt.show()","6bbe3d18":"# Sort descending\ncorona_data = corona_data.sort_values(by=['State','Date'])\ncorona_data = corona_data.reset_index()\n\nsns.set_style(\"whitegrid\")\nsns.set_context(\"talk\", rc={\"grid.linewidth\": 0.3})\ng = sns.FacetGrid(corona_data, col=\"State\", col_wrap=5, height=5)\ng = g.map(plt.plot, \"Date\", \"Total Confirmed Cases\", color=sns.xkcd_rgb[\"teal\"],).set(yscale ='log')\nxlabels = [''  for x in range(30)]\n\n# Hide x axis gridlines\nfor ax in g.axes:\n    ax.xaxis.grid(False)\n    ax.set_xticklabels(xlabels)\n    ax.set(xlabel=None)","970055cb":"...and here's the active cases trend for all states that reported a case.","c0999e99":"Statewise total confirmed cases for last 30 days on logarithmic scale to identify states with higher rate of increase.","4029f790":"Here's the total confirmed and active cases trend in India for last 30 days. Eagerly waiting for the curve to \"flatten\"!!!","aae601f1":"The pie chart below shows the percentage of active cases in each state based on the data reported on the last day.","8f900ffb":"The table below summarizes the latest nationwide statistics for India on the last reported date.","2304fc84":"The plot below shows doubling rate of Total Confirmed Cases over 5 day moving average for last 30 days","868616c5":"Here's the comparitive active cases trend of the top 10 states in last 30 days.","d34021bb":"# COVID-19 India Timeseries: A Visualization\n\nThis kernel provides a visualization of COVID-19 timeseries data in states of India.","91e2251d":"Here's the gradient map for statewise cases on the latest reported data."}}