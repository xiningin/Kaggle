{"cell_type":{"a31724f1":"code","b63bd16b":"code","5b528495":"code","be138f1e":"code","d2ab3dca":"code","f27d4685":"code","8d9af04c":"code","1354888d":"code","f3af7ec4":"code","17bbc689":"code","b4a15bb1":"code","ae4d2555":"code","c4c8d093":"code","74669c65":"code","397ae2fc":"code","ed6d62bd":"markdown","c264a325":"markdown","00baff09":"markdown","c41e85db":"markdown","4adc055c":"markdown","dd43f7f7":"markdown"},"source":{"a31724f1":"import pandas as pd","b63bd16b":"df = pd.read_csv('time_series.csv', index_col='date', parse_dates=True)","5b528495":"# Creating ARMA data\nfrom statsmodels.tsa.arima_process import arma_generate_sample\nar_coefs = [1, -0.9, -0.1]\nma_coefs = [1, 0.2]\ny = pd.DataFrame(arma_generate_sample(ar_coefs, ma_coefs, nsample=1000, sigma=0.5))","be138f1e":"from matplotlib import pyplot\ny.plot(style='k.')\npyplot.show()","d2ab3dca":"from statsmodels.tsa.stattools import adfuller\nadf = adfuller(y)\nprint('ADF Statistic:', adf[0])\nprint('p-value:', adf[1])","f27d4685":"df_stationary = y.diff().dropna()","8d9af04c":"# Fitting and ARMA model\nfrom statsmodels.tsa.arima_model import ARMA\n# Instantiate model object\nmodel = ARMA(y, order=(1,1)) # order(p,q)\n# Fit model\nresults = model.fit()\nprint(results.summary())","1354888d":"# Fitting ARMAX\n# Instantiate the model\nmodel = ARMA(df['productivity'], order=(2,1), exog=df['hours_sleep'])\n# Fit the model\nresults = model.fit()","f3af7ec4":"# Statsmodels SARIMAX class\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\n# Just an ARMA(p,q) model\nmodel = SARIMAX(df, order=(p,0,q))\n# An ARMA(p,q) + constant model\nmodel = SARIMAX(df, order=(p,0,q), trend='c')\n# Make predictions for last 25 values\nresults = model.fit()\n# Make in-sample prediction\nforecast = results.get_prediction(start=-25) # ,dynamic=True)\n# forecast mean\nmean_forecast = forecast.predicted_mean\n# Get confidence intervals of forecasts\nconfidence_intervals = forecast.conf_int()\n# Forecasting out of sample\nforecast = results.get_forecast(steps=20)\n# Assign residuals to variable\nresiduals = results.resid\nmae = np.mean(np.abs(residuals))\n# Create the 4 diagostics plots\nresults.plot_diagnostics()\nplt.show()","17bbc689":"# Plotting predictions\nplt.figure()\n# Plot prediction\nplt.plot(dates,\nmean_forecast.values,\ncolor='red',\nlabel='forecast')\n# Shade uncertainty area\nplt.fill_between(dates, lower_limits, upper_limits, color='pink')\nplt.show()","b4a15bb1":"from statsmodels.graphics.tsaplots import plot_acf, plot_pacf\n# Create figure\nfig, (ax1, ax2) = plt.subplots(2,1, figsize=(8,8))\n# Make ACF plot\nplot_acf(df, lags=10, zero=False, ax=ax1)\n# Make PACF plot\nplot_pacf(df, lags=10, zero=False, ax=ax2)\nplt.show()","ae4d2555":"# Seasonal decomposition\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n# Decompose data\ndecomp_results = seasonal_decompose(df['IPG3113N'], freq=12)\n# Plot decomposed data\ndecomp_results.plot()\nplt.show()","c4c8d093":"from statsmodels.tsa.statespace.sarimax import SARIMAX\n# Instantiate model\nmodel = SARIMAX(df, order=(p,d,q), seasonal_order=(P,D,Q,S))\n# Fit model\nresults = model.fit()","74669c65":"# Searching over model orders\nimport pmdarima as pm\n\n# Non-seasonal search parameters\nresults = pm.auto_arima( df, # data\nd=0, # non-seasonal difference order\nstart_p=1, # initial guess for p\nstart_q=1, # initial guess for q\nmax_p=3, # max value of p to test\nmax_q=3, # max value of q to test\n)\n\n# Seasonal search parameters\nresults = pm.auto_arima( df, # data\nseasonal=True, # is the time series seasonal\nm=7, # the seasonal period\nD=1, # seasonal difference order\nstart_P=1, # initial guess for P\nstart_Q=1, # initial guess for Q\nmax_P=2, # max value of P to test\nmax_Q=2, # max value of Q to test\n)\n\n# results = pm.auto_arima( df, # data\n# ... , # model order parameters\n# information_criterion='aic', # used to select best model\n# trace=True, # print results whilst training\n# error_action='ignore', # ignore orders that don't work\n# stepwise=True, # apply intelligent order search\n# )\n\nprint(results.summary())\nresults.plot_diagnostics()","397ae2fc":"# Saving model objects\nimport joblib\n# Select a filepath\nfilepath ='localpath\/great_model.pkl'\n# Save model to filepath\njoblib.dump(model_results_object, filepath)\n# Load model object from filepath\nmodel_results_object = joblib.load(filepath)\n# Add new observations and update parameters\nmodel_results_object.update(df_new)","ed6d62bd":"The SARIMA model\n\nSeasonal ARIMA = SARIMA, \nNon-seasonal orders\n* p: autoregressive order\n* d: differencing order\n* q: moving average order\n\nSARIMA(p,d,q)(P,D,Q)S, \nSeasonal Orders\n* P: seasonal autoregressive order\n* D: seasonal differencing order\n* Q: seasonal moving average order\n* S: number of time steps per cycle\n","c264a325":"Introduction to ARMAX models\n\nExogenous ARMA\n* Use external variables as well as time series\n* ARMAX = ARMA + linear regression\n\nARAMAX(1,1): $y_t=x_1 z_t+a_1 y_{t-1}+m_1\\epsilon_{t-1}+\\epsilon_t$","00baff09":"Stationarity Conditions:\n* Trend is zero\n* Variance is constant\n* Autocorrelation is constant\n\nThe Augmented Dicky-Fuller test\n* Tests for trend non-stationarity\n* Null hypothesis is time series is non-stationary","c41e85db":"ACF and PACF\n\n* ACF - Autocorrelation Function\n* PACF - Partial autocorrelation function","4adc055c":"Autoregressive (AR) model\n\nARMA(p, q)\n* p is order of AR part\n* q is order of MA part\n\n$$y_t=\\sum_1^p a_i y_{t-i}+\\sum_1^q m_i \\epsilon_{t-i}+\\epsilon_t$$","dd43f7f7":"`from statsmodels.tsa.statespace.sarimax import SARIMAX`\n`model = SARIMAX(df, order =(p,d,q))`\n\n* p - number of autoregressive lags\n* d - order of differencing\n* q - number of moving average lags\n\nARMA(p, 0, q) = ARMA(p, q)"}}