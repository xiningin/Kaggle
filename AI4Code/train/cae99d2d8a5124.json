{"cell_type":{"329a059c":"code","86a9b4ac":"code","6117f46b":"code","b66ad9a3":"code","051a261d":"code","703a78a8":"code","ec58bec9":"code","6342c8e5":"code","910b48a5":"code","5a7556c0":"code","85064d8c":"code","9abd70f1":"code","25ed0a63":"code","6ffbccd5":"code","7e8df96e":"code","d7de7048":"code","c06609da":"code","5df9592f":"code","935fad51":"code","d0a08e19":"code","173a548e":"code","dfdebff4":"code","39ce97a0":"code","05c801c9":"code","908ef5aa":"code","70bc2fd5":"code","05777e11":"code","7af43076":"code","22845f22":"code","c5ba42ab":"code","e36a2bbb":"code","39bbbb43":"code","e59ae470":"code","e5e20389":"code","0ea1a008":"code","fdf3490c":"code","083d959f":"code","bbfc26b9":"code","04715e42":"markdown","ea703e3e":"markdown","104e1a21":"markdown","a21e616a":"markdown","5ba536bc":"markdown","e9cce5c1":"markdown"},"source":{"329a059c":"import os\nimport datetime\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","86a9b4ac":"#Importing the dataset\ntrain = pd.read_csv('\/kaggle\/input\/bike-sharing-demand\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/bike-sharing-demand\/test.csv')\ntrain.head()","6117f46b":"test.head()","b66ad9a3":"train.info()","051a261d":"test.info()","703a78a8":"train.describe()","ec58bec9":"# Boxplot of count\nsns.boxplot(x='count', data=train, color='mediumpurple')\nplt.show()","6342c8e5":"# Histogram of count (It looks skew..)\nsns.set_style('darkgrid')\nsns.distplot(train['count'], bins=100, color='green')\nplt.show()","910b48a5":"# Scatter plot between count & each numeric features\nfields = [f for f in train]\nfields = fields[5:-3]\nprint(fields)\n\nfig = plt.figure(figsize=(17, 3))\n\nfor i, f in enumerate(fields):\n    ax = fig.add_subplot(1, 4, i+1)\n    ax.scatter(train[f], train['count'])\n    ax.set_ylabel('count')\n    ax.set_xlabel(f)\n\nplt.show()\n\n# 'temp' and 'atemp' looks similar..","5a7556c0":"# Boxplot between count & each categorical features\nfig, axes = plt.subplots(nrows=2,ncols=2)\nfig.set_size_inches(20, 10)\nsns.boxplot(data=train, y=\"count\", x=\"season\", ax=axes[0][0])\nsns.boxplot(data=train, y=\"count\", x=\"holiday\", ax=axes[0][1])\nsns.boxplot(data=train, y=\"count\", x=\"workingday\", ax=axes[1][0])\nsns.boxplot(data=train, y=\"count\", x=\"weather\", ax=axes[1][1])\n\naxes[0][0].set(xlabel='Season', ylabel=\"Count\")\naxes[0][1].set(xlabel='Holiday', ylabel='Count')\naxes[1][0].set(xlabel='Workingday', ylabel='Count')\naxes[1][1].set(xlabel='Weather', ylabel='Count')","85064d8c":"# Correlation between each features\nplt.figure(figsize=(10,10))\nsns.heatmap(train.corr(\"pearson\"),\n            vmin=-1, vmax=1,\n            cmap='coolwarm',\n            annot=True, \n            square=True)","9abd70f1":"# Convert datetime column to each elements (year, month, day, dayofweek, hour)\ntrain['datetime'] = pd.to_datetime(train['datetime'])\ntest['datetime'] = pd.to_datetime(test['datetime'])\ntrain.head()","25ed0a63":"def split_datetime(df):\n    df['year'] = df['datetime'].apply(lambda t: t.year)\n    df['month'] = df['datetime'].apply(lambda t: t.month)\n    df['day'] = df['datetime'].apply(lambda t: t.day)\n    df['dayofweek'] = df['datetime'].apply(lambda t: t.dayofweek)\n    df['hour'] = df['datetime'].apply(lambda t: t.hour)\n    df = df.drop(['datetime'], axis=1)\n    return df","6ffbccd5":"test = split_datetime(test)\ntrain = split_datetime(train)\ntrain = train.drop(['casual', 'registered'], axis=1)\ntrain.head()","7e8df96e":"# Boxplot between count & each categorical features\nfig, axes = plt.subplots(nrows=1,ncols=3)\nfig.set_size_inches(25, 5)\nsns.barplot(data=train, x='year', y=train['count'], ax=axes[0])\nsns.barplot(data=train, x='month', y=train['count'], ax=axes[1])\nsns.pointplot(data=train, x='hour', y=train['count'], ax=axes[2], hue='dayofweek')","d7de7048":"# Count column looks skew.\nsns.distplot(train['count'])","c06609da":"# Take a log for count column\ntrain['count'] = np.log1p(train['count'])","5df9592f":"sns.distplot(train['count'])","935fad51":"# Eliminate outliers (with residual less than stdev*3)\ntrain = train[np.abs(train['count']-train['count'].mean()) <= (3*train['count'].std())]","d0a08e19":"# Boxplot of count\nsns.boxplot(x='count', data=train, color='mediumpurple')\nplt.show()","173a548e":"# Eliminate outliers (between correlation)\nfig = plt.figure(figsize=(15, 15))\nfor i, f1 in enumerate(fields):\n    for j, f2 in enumerate(fields):\n        idx = i*len(fields)+j+1\n        ax = fig.add_subplot(len(fields), len(fields), idx)\n        ax.scatter(train[f1], train[f2])\n        ax.set_ylabel(f1)\n        ax.set_xlabel(f2)\nplt.show()","dfdebff4":"drop_idx = train[(train['atemp'] > 20) & (train['atemp'] < 40) & (train['temp'] > 10) & (train['temp'] < 20)].index\ntrain = train.drop(drop_idx)","39ce97a0":"# Standard Scaling numeric columns\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef scaling(df):\n    scaler = MinMaxScaler()\n    num_cols = ['temp', 'atemp', 'humidity', 'windspeed']\n    df[num_cols] = scaler.fit_transform(df[num_cols])\n    return df","05c801c9":"train = scaling(train)\ntest = scaling(test)","908ef5aa":"train.head()","70bc2fd5":"# Split train & test\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(train.drop(['count'], axis=1), train['count'], test_size=0.3)","05777e11":"\"\"\"\nnp.log1p(x) : log0\uc740 \ubb34\ud55c\ub300\ub85c \ubc1c\uc0b0\ud558\uae30 \ub54c\ubb38\uc5d0 x\uac12\uc5d0\ub2e4\uac00 1\uc744 \ub354\ud55c\ub2e4.\nnp.expm1() : 1\ube7c\uc918\uc57c \uc6d0\ub798\ub300\ub85c \ud658\uc6d0\n\"\"\"\ndef rmsle(y, pred):\n    log_y = np.log1p(y)\n    log_pred = np.log1p(pred)\n    squared_error = (log_y - log_pred) ** 2\n    rmsle = np.sqrt(np.mean(squared_error))\n    return rmsle","7af43076":"from sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\n\nfrom sklearn.model_selection import GridSearchCV","22845f22":"def evaluate(reg_cls, params=None):\n    reg = reg_cls()\n    if params:\n        reg = GridSearchCV(reg, param_grid=params, refit=True)\n    reg.fit(X_train, y_train)\n    pred = reg.predict(X_test)\n    \n    y_test_exp = np.expm1(y_test)\n    pred_exp = np.expm1(pred)\n    print('\\n', reg_cls)\n    if params:\n        print(reg.best_params_)\n        reg = reg.best_estimator_\n    print(rmsle(y_test_exp, pred_exp))\n    return reg, pred_exp","c5ba42ab":"lr_reg, pred_lr = evaluate(LinearRegression)\nrg_reg, pred_rg = evaluate(Ridge)\nls_reg, pred_ls = evaluate(Lasso)\nrf_reg, pred_rf = evaluate(RandomForestRegressor)\ngb_reg, pred_gb = evaluate(GradientBoostingRegressor)\nxg_reg, pred_xg = evaluate(XGBRegressor)\nlg_reg, pred_lg = evaluate(LGBMRegressor)\n\nparams = {'n_estimators': [100*i for i in range(1, 6)]}\nxg_reg, pred_xg = evaluate(XGBRegressor, params)\nlg_reg, pred_lg = evaluate(LGBMRegressor, params)","e36a2bbb":"def feature_importances(reg):\n    plt.figure(figsize=(20, 10))\n    print(type(reg))\n    df = pd.DataFrame(sorted(zip(X_train.columns, reg.feature_importances_)), columns=['Feature', 'Value'])\n    sns.barplot(x=\"Value\", y=\"Feature\", data=df.sort_values(by=\"Value\", ascending=False))\n    plt.show()","39bbbb43":"feature_importances(xg_reg)","e59ae470":"# LightGBMRegressor feature importances\nfeature_importances(lg_reg)","e5e20389":"submission = pd.read_csv('..\/input\/bike-sharing-demand\/sampleSubmission.csv')\nsubmission","0ea1a008":"test.shape","fdf3490c":"# pred = xg_reg.predict(test)\npred = lg_reg.predict(test)\npred_exp = np.expm1(pred)\nprint(pred_exp)","083d959f":"submission.loc[:, 'count'] = pred_exp\nsubmission","bbfc26b9":"submission.to_csv('submission.csv', index=False)","04715e42":"# Data Fields\n\n## Time series\n**datetime** - hourly date + timestamp  \n\n## Categorical\n**season** -  1 = spring, 2 = summer, 3 = fall, 4 = winter  \n**holiday** - whether the day is considered a holiday  \n**workingday** - whether the day is neither a weekend nor holiday  \n**weather** -  \n1: Clear, Few clouds, Partly cloudy, Partly cloudy  \n2: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist  \n3: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds  \n4: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog  \n\n## Numeric\n**temp** - temperature in Celsius  \n**atemp** - \"feels like\" temperature in Celsius  \n**humidity** - relative humidity  \n**windspeed** - wind speed  \n**casual** - number of non-registered user rentals initiated  \n**registered** - number of registered user rentals initiated  \n**count** - number of total rentals (casual + registered)","ea703e3e":"# Submission","104e1a21":"# Define metric (RMSLE)","a21e616a":"# Model selection","5ba536bc":"# Visualize dataset\n  * Boxplot and histogram for 'count' column.\n  * Scatter the numeric columns with 'count' column.\n  * Boxplot the categorical columns with 'count' column.\n  * Correlation between each features.","e9cce5c1":"# Data preprocessing\n* What we have to do\n  - Split 'datetime' column with converting datetime object.\n  - Take log for count column to mitigate skew.\n  - Eliminate outliers.\n  - MinMax scaling the numeric columns.\n  - Split data & train set"}}