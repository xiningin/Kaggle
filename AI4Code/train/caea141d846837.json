{"cell_type":{"05b2d793":"code","cf49bd59":"code","025b83c6":"code","3a8dee89":"code","b7f12a02":"code","8c3d8293":"code","70187d45":"code","349bd3e7":"code","25149a76":"code","2c69e32a":"code","776d62a5":"code","219bd4e0":"code","f0f464d8":"code","e59e56c4":"code","a42cae36":"code","c0df8c20":"code","9073e603":"code","7dbb4206":"code","785764d3":"code","92159178":"code","173fa9af":"code","04911900":"code","88b85894":"code","f64dca07":"markdown","43e4fcd7":"markdown","143c42ef":"markdown","effb84a1":"markdown","e7924166":"markdown","73eb2a01":"markdown","2bfac26c":"markdown","8c3f174c":"markdown","2b537b3e":"markdown","2764588f":"markdown","06df5a61":"markdown","6ec16129":"markdown","45719371":"markdown","d04741e5":"markdown","78be1d03":"markdown","8e7ad8cc":"markdown","6f6e9bf3":"markdown","0f9a7b65":"markdown","8ef27208":"markdown","e8f0de43":"markdown"},"source":{"05b2d793":"import numpy as np\nimport pandas as pd","cf49bd59":"column_names = ['user_id', 'item_id', 'rating', 'timestamp']\ndf = pd.read_csv('..\/input\/udata\/u.data', sep='\\t', names=column_names)","025b83c6":"df.head()","3a8dee89":"movie_titles = pd.read_csv('..\/input\/movie-title\/Movie_Id_Titles')\nmovie_titles.head()","b7f12a02":"df = pd.merge(df,movie_titles,on='item_id')\ndf.head()","8c3d8293":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('white')\n%matplotlib inline","70187d45":"df.groupby('title')['rating'].mean().sort_values(ascending=False).head()","349bd3e7":"df.groupby('title')['rating'].count().sort_values(ascending=False).head()","25149a76":"ratings = pd.DataFrame(df.groupby('title')['rating'].mean())\nratings.head()","2c69e32a":"ratings['num of ratings'] = pd.DataFrame(df.groupby('title')['rating'].count())\nratings.head()","776d62a5":"plt.figure(figsize=(10,4))\nratings['num of ratings'].hist(bins=70,color='purple')","219bd4e0":"plt.figure(figsize=(10,4))\nratings['rating'].hist(bins=70,color='green')","f0f464d8":"sns.jointplot(x='rating',y='num of ratings',data=ratings,alpha=0.5,color='red')","e59e56c4":"moviemat = df.pivot_table(index='user_id',columns='title',values='rating')\nmoviemat.head()","a42cae36":"ratings.sort_values('num of ratings',ascending=False).head(10)","c0df8c20":"ratings.head()","9073e603":"starwars_user_ratings = moviemat['Star Wars (1977)']\nliarliar_user_ratings = moviemat['Liar Liar (1997)']\nstarwars_user_ratings.head()","7dbb4206":"similar_to_starwars = moviemat.corrwith(starwars_user_ratings)\nsimilar_to_liarliar = moviemat.corrwith(liarliar_user_ratings)","785764d3":"corr_starwars = pd.DataFrame(similar_to_starwars,columns=['Correlation'])\ncorr_starwars.dropna(inplace=True)\ncorr_starwars.head()","92159178":"corr_starwars.sort_values('Correlation',ascending=False).head(10)","173fa9af":"corr_starwars = corr_starwars.join(ratings['num of ratings'])\ncorr_starwars.head()","04911900":"corr_starwars[corr_starwars['num of ratings']>100].sort_values('Correlation',ascending=False).head()","88b85894":"corr_liarliar = pd.DataFrame(similar_to_liarliar,columns=['Correlation'])\ncorr_liarliar.dropna(inplace=True)\ncorr_liarliar = corr_liarliar.join(ratings['num of ratings'])\ncorr_liarliar[corr_liarliar['num of ratings']>100].sort_values('Correlation',ascending=False).head()","f64dca07":"Now the same for the comedy Liar Liar:","43e4fcd7":"We can merge them together:","143c42ef":"Let's create a ratings dataframe with average rating and number of ratings:","effb84a1":"Now sort the values and notice how the titles make a lot more sense:","e7924166":"Let's clean this by removing NaN values and using a DataFrame instead of a series:","73eb2a01":"# EDA\n\nLet's explore the data a bit and get a look at some of the best rated movies.\n\n## Visualization Imports","2bfac26c":"Now set the number of ratings column:","8c3f174c":"Now let's create a matrix that has the user ids on one access and the movie title on another axis. Each cell will then consist of the rating the user gave to that movie. Note there will be a lot of NaN values, because most people have not seen most of the movies.","2b537b3e":"Now a few histograms:","2764588f":"We can then use corrwith() method to get correlations between two pandas series:","06df5a61":"## Get the Data","6ec16129":"## Recommending Similar Movies","45719371":"\n# Recommender Systems with Python\n\n\n## Import Libraries","d04741e5":"Okay! Now that we have a general idea of what the data looks like, let's move on to creating a simple recommendation system:","78be1d03":"Now if we sort the dataframe by correlation, we should get the most similar movies, however note that we get some results that don't really make sense. This is because there are a lot of movies only watched once by users who also watched star wars (it was the most popular movie). ","8e7ad8cc":"Most rated movie:","6f6e9bf3":"Let's fix this by filtering out movies that have less than 100 reviews (this value was chosen based off the histogram from earlier).","0f9a7b65":"Now let's get the movie titles:","8ef27208":"Now let's grab the user ratings for those two movies:","e8f0de43":"Let's choose two movies: starwars, a sci-fi movie. And Liar Liar, a comedy."}}