{"cell_type":{"fccc7783":"code","dd6722b0":"code","aad27e90":"code","80798408":"code","76adf5d3":"code","99571dc7":"code","53a3cc91":"code","a73420df":"code","e4483171":"code","c3c2dd8d":"code","12ba2ee3":"code","0d8b242e":"code","04c75454":"code","33abea91":"code","69efa61d":"code","3eae4b01":"code","d1d635b4":"code","ab4de00e":"code","7a9a9835":"markdown","5900bc26":"markdown","1f0324ec":"markdown","143934bb":"markdown","d3d016c7":"markdown","7129162a":"markdown","7f851230":"markdown","127d12da":"markdown","424a1757":"markdown","c3581fca":"markdown","29397546":"markdown","a028da24":"markdown","18840e9f":"markdown","88a81161":"markdown","fb3bf776":"markdown","22cc7381":"markdown","35ac5dc3":"markdown","dba07d48":"markdown","b125c10b":"markdown","07e8d0ce":"markdown"},"source":{"fccc7783":"#just the usual\nimport os\nimport numpy as np\nimport pandas as pd\n\n#All necessary plotly libraries\nimport plotly as py\nimport plotly.io as pio\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot","dd6722b0":"df = pd.read_csv(\"..\/input\/tesla-stock-data-from-2010-to-2020\/TSLA.csv\")\n#Date needs to be in datetime format to plot timeseries\ndf['Date'] = pd.to_datetime(df['Date'])\ndf.index = range(len(df))","aad27e90":"df.head()","80798408":"fig = go.Figure([go.Scatter(x=df['Date'], y=df['Close'])])\nfig.show()","76adf5d3":"fig = px.line(df, x='Date', y='High', title='Range Slider and Selectors')\n\nfig.update_xaxes(rangeslider_visible=True, rangeselector=dict(\n    buttons=list([\n            dict(count=1, label=\"1m\", step=\"month\", stepmode=\"backward\"),\n            dict(count=6, label=\"6m\", step=\"month\", stepmode=\"backward\"),\n            dict(count=1, label=\"YTD\", step=\"year\", stepmode=\"todate\"),\n            dict(count=1, label=\"1y\", step=\"year\", stepmode=\"backward\"),\n            dict(step=\"all\")\n        ])\n    )\n)\nfig.show()","99571dc7":"fig = go.Figure()\nfig.add_trace(go.Bar(x=df['Date'], y=df['Volume'],marker_color='indianred'))","53a3cc91":"fig = go.Figure(data=[go.Candlestick(x=df['Date'],\n                open=df['Open'],\n                high=df['High'],\n                low=df['Low'],\n                close=df['Close'])])\n\nfig.show()","a73420df":"fig = go.Figure(data=[go.Candlestick(x=df['Date'],\n                open=df['Open'],\n                high=df['High'],\n                low=df['Low'],\n                close=df['Close'], increasing_line_color= 'yellow', decreasing_line_color= 'black')])\n\nfig.show()","e4483171":"fig = make_subplots(rows=2, cols=1)\n\n#OHLC Plot\nfig.add_trace(go.Ohlc(x=df.Date, open=df.Open, high=df.High, low=df.Low, close=df.Close, name='Price'), row=1, col=1)\n#Volume PLot\nfig.add_trace(go.Scatter(x=df.Date, y=df.Volume, name='Volume'), row=2, col=1)\n\nfig.update(layout_xaxis_rangeslider_visible=False)\nfig.show()","c3c2dd8d":"fig = go.Figure(data=go.Ohlc(x=df['Date'],\n                open=df['Open'],\n                high=df['High'],\n                low=df['Low'],\n                close=df['Close']))\n\nfig.update_layout(\n    title='The BOOM',\n    yaxis_title='TSLA Stock',\n    shapes = [dict(x0='2019-10-10', x1='2019-10-10', y0=0, y1=1, xref='x', yref='paper',line_width=3)],\n    annotations=[dict(x='2019-10-10', y=0.05, xref='x', yref='paper', xanchor='left', text='The Boom in TSLA Stock')]\n)\n\nfig.show()","12ba2ee3":"#EMA\ndf['EMA_9'] = df['Close'].ewm(9).mean().shift()\ndf['EMA_22'] = df['Close'].ewm(22).mean().shift()\n#SMA\ndf['SMA_5'] = df['Close'].rolling(5).mean().shift()\ndf['SMA_10'] = df['Close'].rolling(10).mean().shift()\ndf['SMA_15'] = df['Close'].rolling(15).mean().shift()\ndf['SMA_30'] = df['Close'].rolling(30).mean().shift()\n#RSI14\ndef RSI(df, n=14):\n    close = df['Close']\n    delta = close.diff()\n    delta = delta[1:]\n    pricesUp = delta.copy()\n    pricesDown = delta.copy()\n    pricesUp[pricesUp < 0] = 0\n    pricesDown[pricesDown > 0] = 0\n    rollUp = pricesUp.rolling(n).mean()\n    rollDown = pricesDown.abs().rolling(n).mean()\n    rs = rollUp \/ rollDown\n    rsi = 100.0 - (100.0 \/ (1.0 + rs))\n    return rsi\n\ndf['RSI'] = RSI(df).fillna(0)\n\nEMA_12 = pd.Series(df['Close'].ewm(span=12, min_periods=12).mean())\nEMA_26 = pd.Series(df['Close'].ewm(span=26, min_periods=26).mean())\ndf['MACD'] = pd.Series(EMA_12 - EMA_26)\ndf['MACD_signal'] = pd.Series(df.MACD.ewm(span=9, min_periods=9).mean())\n","0d8b242e":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=df.Date, y=df.EMA_9, name='EMA 9'))\nfig.add_trace(go.Scatter(x=df.Date, y=df.EMA_22, name='EMA 22'))\nfig.add_trace(go.Scatter(x=df.Date, y=df.SMA_5, name='SMA 5'))\nfig.add_trace(go.Scatter(x=df.Date, y=df.SMA_10, name='SMA 10'))\nfig.add_trace(go.Scatter(x=df.Date, y=df.SMA_15, name='SMA 15'))\nfig.add_trace(go.Scatter(x=df.Date, y=df.SMA_30, name='SMA 30'))\nfig.add_trace(go.Scatter(x=df.Date, y=df.Close, name='Close', opacity=0.3))\nfig.show()\n","04c75454":"fig = go.Figure(go.Scatter(x=df.Date, y=df.RSI, name='RSI'))\nfig.show()","33abea91":"fig = make_subplots(rows=2, cols=1)\nfig.add_trace(go.Scatter(x=df.Date, y=df.Close, name='Close'), row=1, col=1)\nfig.add_trace(go.Scatter(x=df.Date, y=EMA_12, name='EMA 12'), row=1, col=1)\nfig.add_trace(go.Scatter(x=df.Date, y=EMA_26, name='EMA 26'), row=1, col=1)\nfig.add_trace(go.Scatter(x=df.Date, y=df['MACD'], name='MACD'), row=2, col=1)\nfig.add_trace(go.Scatter(x=df.Date, y=df['MACD_signal'], name='Signal line'), row=2, col=1)\nfig.show()","69efa61d":"fig = go.Figure(go.Waterfall(\n    name = \"20\", orientation = \"v\",\n    measure = [\"relative\", \"relative\", \"total\", \"relative\", \"relative\", \"total\"],\n    x = [\"Sales\", \"Royalties\", \"Net revenue\", \"Purchases\", \"Other expenses\", \"Profit before tax\"],\n    textposition = \"outside\",\n    text = [\"+1000\", \"+800\", \"\", \"-400\", \"-200\", \"Total\"],\n    y = [1000, 800, 0, -400, -200, 0],\n    connector = {\"line\":{\"color\":\"rgb(63, 63, 63)\"}},\n))\n\n\nfig.update_layout(\n        title = \"Profit and Loss\",\n        showlegend = True\n)\n\nfig.show()","3eae4b01":"#Example of this very notebook ;)\ndata = dict(\n    number=[880, 34, 22, 17],\n    stage=[\"Notebook views\", \"Upvotes\", \"Comments\", \"Forks\"])\nfig = px.funnel(data, x='number', y='stage')\nfig.show()","d1d635b4":"labels = ['Asia','Australia','North America','Europe']\nvalues = [3500, 4500, 1050, 500]\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, textinfo='label+percent',\n                             insidetextorientation='radial'\n                            )])\nfig.show()","ab4de00e":"labels = ['Asia','Australia','North America','Europe']\nvalues = [3500, 4500, 1050, 500]\n\n# Use `hole` to create a donut-like pie chart\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])\nfig.show()","7a9a9835":"**Waterfall Chart**","5900bc26":"Similar to a candle stick, you can also plot OHLC plots that essentially deliver the same purpose of ploting the Open, High, Low and CLose of a stock but just in the different aesthetic. \nAlso, like matplotlib even plotly has a make_subplots function that can be used to combine plots together, in our cases the OHLC plot with the Volume","1f0324ec":"(Also great way to demonstrate the add_trace function of plotly)","143934bb":"**Donut Plot**","d3d016c7":"**Pie Chart**","7129162a":"# Bar Charts \ud83d\udcca\nAlthough not very popular with stock data, plotly also has beautiful bar charts. So for the sake of this tutorial lets plot a few","7f851230":"There's so much we can do with pie charts that I could make an entire new kernel about it \ud83d\ude1c. But for the scope of this notebook I guess this much would do.","127d12da":"**Funnel Chart**","424a1757":"We can also add Sliders and Range Selectors to our plots.\nRange selector buttons are special controls that work well with time series and range sliders, and allow users to easily set the range of the x-axis.","c3581fca":"For our example, we're using a dataset of TSLA stock prices from the year 2010 to 2020. The dataset contains daily Date, Open, High, Low, Close and Volume features","29397546":"# Candlestick Plots \ud83d\udd6f\nAsk any person in the financial domain, the best way to represent a stock in terms of a plot would be a **Candlestick** plot. These are essentially little boxplots that represent the Open, High, Close and Low of a stock on a given time frame. A red candlestick is a **bearish** candle (Closing price < Opening price) and a green candle is a **bullish** candle (Closing price > Opening price)\n\n![Green or red candlestick (graphic 1).png](attachment:fce09dbc-5392-469c-b996-21a54b7badc0.png)","a028da24":"# Timeseries Plot \u231a\nStarting with Timeseries, these plots are essentially linegraphs over a course of time and can be used to plot Open, High, Low and Close prices indiviually. Most Frequently the Closing Price or the Highs are plotted to see the trend in which the stock is moving.\/","18840e9f":"# What are financial charts? \ud83d\udcc8\nFinancial charts are charts that visually show different company and financial parameters such as liquidity, budgets, costs, cash flow, and so on over time. Financial charts are an excellent approach to convey information about company or financial markets.\n\n# Why plotly? \ud83d\udcca\n\n![1280px-Plotly_logo_for_digital_final_(6).png](attachment:2796782e-abb2-42f0-b1cd-b9aa5ddc1ebd.png)\n\nWhy are we using plotly instead of the more common matplotlib or seaborn?\n* Interactivity: Compared to other python libraries, plotly gives much more interactivity to the user\n* Simplicity: Simple syntax when it comes to ploting complicated financial charts like OHLC plots\n* Aestheics: Its just prettier\ud83e\udd2a\n\nThis notebook aims to be like a cheatsheet when working with financial data - mainly stocks to make easier, aesthetic and more interactive charts and plots. ","88a81161":"Usually when represeting stocks, there are certain periods that one wishes to show through their plots and how beyond that the trend of the stock changed, in our dataset I have used the annotation function to show the big boom in tesla stock that happened in October 2019.","fb3bf776":"# Let the Plotting begin\nThe true beauty of a plotly graph is in its interactivity, hover the cursor to top right corner to access the various features to interact with the graphs, you can also zoom in and zoom out of the plots and also crop certain parts to focus on a specific time period for example. \n\n![Screenshot 2021-11-08 115036.png](attachment:15269337-f9b5-4db2-9156-14c4d999bf3f.png)\n\nHover over the line and plots to get the actual values at that given data too. ","22cc7381":"You can also customize the colours of the candlesticks as per your aesthetics and needs using the **increasing_line_color** and **decreasing_line_color** parameters","35ac5dc3":"# Technical Indicators \ud83d\udd3c\ud83d\udd3d\nIndicators are best way to visualize a stock pattern. I usually use three of the most common ones to get a basic idea of the trend of the stock. Just for the sake of the tutorial, we'll plot these too using plotly. The indicators are:\n* Simple Moving Average (SMA): Average of the price of stock for a set  period of time, in our case we have used a simple moving average of 5,10,15 and 30 days.\n\n* Exponential Moving Average (EMA): An exponential moving average (EMA) is a type of moving average (MA) that places a greater weight and significance on the most recent data points, basically what it means is that the newer stock price data has a higher weightage\/significance on the price than older days.\n\n* Relative Strength Index (RSI): A momentum indicator used in technical analysis that measures the magnitude of recent price changes to evaluate overbought or oversold conditions in the price of a stock.\n\n*  Moving average convergence divergence (MACD) is a trend-following momentum indicator that shows the relationship between two moving averages of a security\u2019s price. The MACD is calculated by subtracting the 26-period exponential moving average (EMA) from the 12-period EMA. Similar to RSI, MACD triggers technical signals when it crosses above (to buy) or below (to sell) its signal line.\n","dba07d48":"# OHLC Plots \ud83d\udcc8\ud83d\udcc9","b125c10b":"# Other Charts \ud83e\udd29\n* Waterfall Charts: Best way to represet profit and loss graphically.\n* Funnel Chart: Used to represent data in different stages of a business process. It\u2019s an important mechanism in Business Intelligence to identify potential problem areas of a process\n* Pie Chart: Usually looked down upon in the DS community but it can not be denied they they are one of the most used and easy to interpret graphs (wrongly or rightly doesn't matter \ud83d\ude1b) ","07e8d0ce":"Hope this notebook helps you. I have tried to make it short and exclusive to financial data but plotly has a lot of other features and visualization that can be used on any sort of data. I do plan on updating this notebook so suggestions are welcomed\n\nI have ditched matplotlib...when are you?\n\nPlotly documentation: https:\/\/plotly.com\/graphing-libraries\/"}}