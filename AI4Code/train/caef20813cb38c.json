{"cell_type":{"50c8db05":"code","6d9a5d38":"code","67cd97e9":"code","9729da15":"code","5554d7de":"code","1aa22c11":"code","6f6f21a5":"code","f53aded3":"code","0b606556":"code","5504d0bf":"code","e0de9516":"code","84449cb0":"code","dcb81a48":"code","83b4cacf":"code","28ef29fc":"code","5aab72c6":"code","bb79bfc9":"code","b27dedc5":"code","5465b368":"code","780fe8c8":"code","c1f6f6c3":"code","1fc701a9":"code","2160b3b6":"code","f2a9a196":"code","a26b179f":"markdown","e419d1fc":"markdown","8d46f8f8":"markdown","19e96fda":"markdown","3a74db22":"markdown","23a17f73":"markdown","e614d40f":"markdown","d3a45f56":"markdown","60d69b08":"markdown","b510e515":"markdown","3d80bfcd":"markdown","e8105280":"markdown","a647a336":"markdown","c91ddad2":"markdown","e7d36c8e":"markdown","fb78a58b":"markdown","f077e66b":"markdown","3b54cd7b":"markdown","0b96c34f":"markdown","ea1bd106":"markdown","85e4353a":"markdown","4433a382":"markdown","9c5d3e2a":"markdown","bccfa6a9":"markdown","952dbab6":"markdown","044086e1":"markdown","d57f9b38":"markdown","090411c7":"markdown","c38a3447":"markdown","1b8ad203":"markdown","4ae1ae9c":"markdown","af3756c3":"markdown"},"source":{"50c8db05":"import pandas as pd\nfrom sklearn import datasets\nimport seaborn as sns","6d9a5d38":"data = datasets.load_iris()\ndata","67cd97e9":"Iris = pd.DataFrame(data['data'], columns=data['feature_names'])\nIris['target'] = data['target']\nIris.head()","9729da15":"Iris.describe()","5554d7de":"sns.pairplot(hue=\"target\", data=Iris.iloc[:, :])\n","1aa22c11":"#Import SVC\nfrom sklearn.svm import SVC\n\nX = Iris.iloc[:, 0:4].values\ny = Iris[\"target\"].values\n\nmodel = SVC(kernel='linear',random_state=555)\n\n#Trainig\nmodel.fit(X=X, y=y)\n","6f6f21a5":"#Mean Accuracy\nmodel.score(X=X, y=y)","f53aded3":"predict_y = model.predict(X=X)\n\npredict_y","0b606556":"# Confusion Matrix\n\nfrom sklearn import metrics\n\nconfmat = metrics.confusion_matrix(y, predict_y)\nconfmat\n\nsns.heatmap(confmat, cmap=\"YlGnBu_r\", annot=True, fmt=\"d\")\n\n# Classifiction Report\n\nreport = metrics.classification_report(y, predict_y)\nprint(report)\n\n","5504d0bf":"# Import SVC\nfrom sklearn.svm import SVC\n\nX = Iris.iloc[:, 0:4].values\ny = Iris[\"target\"].values\n\n# Trainig\nmodel = SVC(kernel='rbf',random_state=555)\nmodel.fit(X=X, y=y)","e0de9516":"# Mean Accuracy\n\nmodel.score(X=X, y=y)","84449cb0":"# Prediction\n\npredict_y = model.predict(X=X)\n\npredict_y\n\nmetrics.accuracy_score(y, predict_y)","dcb81a48":"# Confusion Matrix\n\nfrom sklearn import metrics\n\nconfmat = metrics.confusion_matrix(y, predict_y)\nconfmat\n\nsns.heatmap(confmat, cmap=\"YlGnBu_r\", annot=True, fmt=\"d\")\n\n# Classifiction Report\n\nreport = metrics.classification_report(y, predict_y)\nprint(report)","83b4cacf":"# Assign kernal= 'poly'\nmodel3 = SVC(kernel='poly',degree=3, random_state=555)\nmodel4 = SVC(kernel='poly',degree=4, random_state=555)\nmodel5 = SVC(kernel='poly',degree=5, random_state=555)\nmodel6 = SVC(kernel='poly',degree=6, random_state=555)\n\n# Trainig\nmodel3.fit(X=X, y=y)\nmodel4.fit(X=X, y=y)\nmodel5.fit(X=X, y=y)\nmodel6.fit(X=X, y=y)","28ef29fc":"# mean accuracy\n\nprint('degree=3,  mean accuracy=', model3.score(X=X, y=y))\nprint('degree=4,  mean accuracy=', model4.score(X=X, y=y))\nprint('degree=5,  mean accuracy=', model5.score(X=X, y=y))\nprint('degree=6,  mean accuracy=', model6.score(X=X, y=y))\n","5aab72c6":"predict_y3 = model3.predict(X=X)\npredict_y4 = model4.predict(X=X)\npredict_y5 = model5.predict(X=X)\npredict_y6 = model6.predict(X=X)\n\nprint(predict_y3)\nprint(predict_y4)\nprint(predict_y5)\nprint(predict_y6)","bb79bfc9":"# Confusion Matrix\n\nfrom sklearn import metrics\n\nconfmat3 = metrics.confusion_matrix(y, predict_y3)\nconfmat4 = metrics.confusion_matrix(y, predict_y4)\nconfmat5 = metrics.confusion_matrix(y, predict_y5)\nconfmat6 = metrics.confusion_matrix(y, predict_y6)\n\nprint(confmat3)\nprint(confmat4)\nprint(confmat5)\nprint(confmat6)","b27dedc5":"sns.heatmap(confmat3, cmap=\"YlGnBu_r\", annot=True, fmt=\"d\")\nreport3 = metrics.classification_report(y, predict_y3)\nprint(report3)","5465b368":"sns.heatmap(confmat4, cmap=\"YlGnBu_r\", annot=True, fmt=\"d\")\nreport4 = metrics.classification_report(y, predict_y3)\nprint(report4)","780fe8c8":"sns.heatmap(confmat5, cmap=\"YlGnBu_r\", annot=True, fmt=\"d\")\nreport5 = metrics.classification_report(y, predict_y3)\nprint(report5)","c1f6f6c3":"sns.heatmap(confmat6, cmap=\"YlGnBu_r\", annot=True, fmt=\"d\")\nreport6 = metrics.classification_report(y, predict_y3)\nprint(report6)","1fc701a9":"#Accuracy Score\n\nprint('degree=3, accuracy score=', metrics.accuracy_score(y, predict_y3))\nprint('degree=4, accuracy score=', metrics.accuracy_score(y, predict_y4))\nprint('degree=5, accuracy score=', metrics.accuracy_score(y, predict_y5))\nprint('degree=6, accuracy score=', metrics.accuracy_score(y, predict_y6))","2160b3b6":"#Precision Score\n\nprint('degree=3, precision score=', metrics.precision_score(y, predict_y3,average='weighted'))\nprint('degree=4, precision score=', metrics.precision_score(y, predict_y4,average='weighted'))\nprint('degree=5, precision score=', metrics.precision_score(y, predict_y5,average='weighted'))\nprint('degree=6, precision score=', metrics.precision_score(y, predict_y6,average='weighted'))","f2a9a196":"#Recall Score\n\nprint('degree=3, recall score=', metrics.recall_score(y, predict_y3,average='weighted'))\nprint('degree=4, recall score=', metrics.recall_score(y, predict_y4,average='weighted'))\nprint('degree=5, recall score=', metrics.recall_score(y, predict_y5,average='weighted'))\nprint('degree=6, recall score=', metrics.recall_score(y, predict_y6,average='weighted'))","a26b179f":"### Classifiction report-degree=5","e419d1fc":"## prediction\nCode *model.predict* to make a prediction and *print* it to learn how it seems.","8d46f8f8":"# Classfication Method 2 - SVC \"rbf\"","19e96fda":"## Prediction","3a74db22":"## Model Choosing and Training\nHere we will use the same method as the one above, we assign *kernel='rbf'* or omit it.(Because 'rbf' is the default value of SVC model)","23a17f73":"## Virsualization","e614d40f":"## Confusion matrix","d3a45f56":"# **IRIS CLASSIFICATION(SVC\/RBF\/POLYNOMIAL)**","60d69b08":"## Accuracy","b510e515":"## Load data \/ observation","3d80bfcd":"## Accuracy","e8105280":"Show the relatives between each feature.\nWe can choose the proper ones to be elements for trainig model. If there are some features provide the similar information, just leave only one of them.","a647a336":"From the data *Dataframe.describe* can find out:\n- count\n- mean\n- standard deviation\n- quarterback number\n- maximun and minimun","c91ddad2":"## Model Choosing and Training\nFrom Scikit-learn import SVC module, take iris' features which are: \"sepal length\", \"sepal width\", \"petal length\", and \"petal width\" as the x value and 'target' for the y value.\n\nWe choose the SVC model to classify this dataset.\nSince the default value of SVC model is \"rbf\", we assign *kernel='linear'* and  fix the *random_state=555* to make sure we will have the same random rate on every step.\n\nAfter setting down, we train the dataset.","e7d36c8e":"## Accuracy\nThere are three scores:\n* Accuracy score\n* Prediction score\n* Recall score","fb78a58b":"# Classification Method 3 - Polynomial kernel method\n","f077e66b":"# Comparison between 'Linear', 'rbf', and 'poly'","3b54cd7b":"From the result above we can find that when assigning degree higer, the accuracy index will approch '1' which means there are no errors when we classify by the model we trained. \n\n<mark>degree \u2191, accuracy score \u2191\n    \n    \nWhen degree=5, the accuracy is same as the result when degree is assigned to 4.\nIt means the model whose degree assigned to 5 is ****overfitting****. So is the degree=6.\n\n<mark> accuracy score(degree=5) =0.99333 = accuracy score(degree=4)\n   \n  <mark>Polynomial degree=6, accuracy score=1 \u2192 overfit!","0b96c34f":"We use *pd.Dataframe* [](http:\/\/)to transfer the data type of the primary data from dictionay to dataframe.\nThen *print* it to learn how the data will be.","ea1bd106":"## Confusion matrix","85e4353a":"## Model choosing and training\nIn this method, we will try four degrees to compare their differences.\n\nFirst, assign the *kernel='poly'* and make the random_state fixed again.\nThen train the four models as the same way above.","4433a382":"Output the four confmats firstly, and we will visualize the information at the following steps.","9c5d3e2a":"### Classifiction report-degree=4","bccfa6a9":"*Load* data and *print* it to make sure how the data looks like:","952dbab6":"## Prediction","044086e1":"### Classifiction report-degree=6","d57f9b38":"## Verification\nBy using confusion matrix to verify the effect of the model we trained.  ","090411c7":"# Preparing for trainig data\n## Import the libraries for Python programming language\n*Import* pandas, datasets from scikit-learn, and seaborn for visualization, classification, regrssion and so on.[](http:\/\/)  ","c38a3447":"After trying the three methods to classify the catogories of Iris flower, we can acknowledge the accuracy level below:\n\n\nSVC in linear = Polynomial (degree=4)> RBF > Polynomial (degree=3)\n    \n    \n<font size=4 color=red> If we can classify with SVClinear, other complicated methods are not neccessary.\n\n**\"Simple is always better than complex.\"**","1b8ad203":"## Accuracy\nAfter trainig, we check the mean accuracy to know how the efficiency of the model is.","4ae1ae9c":"# Classfication Method 1 - SVC \"linear\"","af3756c3":"Let's see the virsulization edition of the matrix.\n\n### Classifiction report-degree=3"}}