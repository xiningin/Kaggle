{"cell_type":{"47c3892b":"code","a747dd30":"code","7ffb37e5":"code","2306863d":"code","7a184305":"code","69b8ac6b":"code","e8af4b93":"code","09cc6d66":"code","a812cbdf":"markdown","2ac81e05":"markdown","ef437403":"markdown","671508bb":"markdown","90bee636":"markdown","c6a8aa92":"markdown"},"source":{"47c3892b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport itertools\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import PassiveAggressiveClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a747dd30":"df = pd.read_csv('..\/input\/fakenewsdetection\/news.csv')\ndf.shape\ndf.head()","7ffb37e5":"labels = df.label\nlabels.head()","2306863d":"#Split the dataset for training and testing\nx_train, x_test, y_train, y_test = train_test_split(df['text'], labels, test_size=0.2, random_state=7)","7a184305":"tfidf_vectorizer = TfidfVectorizer(stop_words='english',max_df=0.7)\n\n#Fit and transform train set and test set\ntfidf_train = tfidf_vectorizer.fit_transform(x_train)\ntfidf_test = tfidf_vectorizer.transform(x_test)","69b8ac6b":"#Initialize the PassiveAggeressiveClassifier \npac = PassiveAggressiveClassifier(max_iter = 50)\npac.fit(tfidf_train, y_train)\n\n#Predict on the test set and calculate accuracy \ny_pred = pac.predict(tfidf_test)\nscore = accuracy_score(y_test, y_pred)\nprint(f'Accuracy: {round(score*100,2)}%')","e8af4b93":"result = confusion_matrix(y_test,y_pred, labels=['FAKE','REAL'])\ndata = result.flatten()","09cc6d66":"my_labels = ['True Positives','True Negatives','False Positives', 'False Negatives']\nplt.pie(data,labels=my_labels,autopct='%1.1f%%')\nplt.title('Fake News Confusion Matrix')\nplt.axis('equal')\nplt.show()","a812cbdf":"**Get the labels**","2ac81e05":"**Build Confusion Matrix**","ef437403":"**Initialize a TfidfVectorizer**","671508bb":"# Initialize the PassiveAggeressiveClassifier ","90bee636":"# **Fake News Detection Python using PassiveAggeressiveClassifier**","c6a8aa92":"**Read the data**"}}