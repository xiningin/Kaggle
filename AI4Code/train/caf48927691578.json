{"cell_type":{"10d17fc4":"code","54b5dcf4":"code","badd13fd":"code","9c111116":"code","8b104a4d":"code","9e728bd6":"code","b3815313":"code","3771106e":"code","d24a73f1":"code","81951249":"code","c73ab0e8":"code","63cfe31f":"code","034ca8b1":"code","43cb28b2":"code","a47337fc":"code","c4c72814":"code","dc05d2c0":"code","da9ea0f8":"code","ff7bde9d":"code","c2c8a0e8":"code","d2e66502":"code","61810db6":"code","09157ee6":"code","6a669514":"code","bf18fafb":"code","632da012":"code","4e46c6db":"code","aabd5fe6":"code","92b537cd":"code","c459e2b6":"code","c8a5477b":"code","4a46e768":"code","ae00dbd2":"code","a42b3be8":"code","4b16a283":"code","0ed881ab":"code","2956df48":"code","168149ff":"code","3c573943":"code","2807ade6":"code","f7f77fb9":"code","756052d5":"code","9b588dfa":"code","8cd263f8":"code","e218ad23":"code","a028753a":"markdown","3039b49f":"markdown","e3ed3aa6":"markdown","3f6d05ee":"markdown","2749aaac":"markdown","d2452bdf":"markdown","b3b045ca":"markdown","ec2767d2":"markdown","0be59205":"markdown","2dcfaef3":"markdown","285e7776":"markdown","9286e688":"markdown","f3e99698":"markdown","58e9b367":"markdown","3db05395":"markdown","d694458b":"markdown","fbcf27d3":"markdown","449992d9":"markdown","53665d5b":"markdown","0a87c119":"markdown","96756170":"markdown","fbe70e79":"markdown","443ec115":"markdown","2c4274e4":"markdown","81bdce36":"markdown","ed31d37f":"markdown","89c28b35":"markdown","482d2ed8":"markdown","f72ea976":"markdown","bfe258bf":"markdown","3cb6138d":"markdown","d54b8c83":"markdown","1697434f":"markdown","3919123d":"markdown","3c21d6d2":"markdown"},"source":{"10d17fc4":"import os\nimport time\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nsns.set(style='darkgrid')\n\nfrom sklearn import metrics\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.feature_selection import RFECV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score, GridSearchCV\nfrom sklearn.preprocessing import LabelEncoder\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom matplotlib import pyplot as plt\n%matplotlib inline","54b5dcf4":"train0_data = pd.read_csv('..\/input\/titanic\/train.csv')\ntest0_data = pd.read_csv('..\/input\/titanic\/test.csv')\n\nprint('Length of Training Dataset: {}'.format(len(train0_data)))\nprint('Length of Test Dataset: {}'.format(len(test0_data)))","badd13fd":"def combine_data(train, test):\n    # here we combine the two datasets\n    return pd.concat([train, test], sort=True).reset_index(drop=True)\n\ndef divide_data(all_data):\n    # with this one we can divide them back into train and test\n    return all_data.loc[:890], all_data.loc[891:].drop(['Survived'], axis=1)\n\nall_data = combine_data(train0_data, test0_data)\nprint('Length of Complete Dataset: {}'.format(len(all_data)))","9c111116":"all_data.info()","8b104a4d":"train0_data.sample(8)","9e728bd6":"train0_data.drop(['Cabin'], axis=1, inplace=True)\ntest0_data.drop(['Cabin'], axis=1, inplace=True)","b3815313":"sns.countplot(train0_data.Survived)\nplt.show()","3771106e":"sns.countplot(train0_data.Sex);","d24a73f1":"fig, axs = plt.subplots(1,2,figsize=(12,5))\nsns.countplot(train0_data.Pclass, ax=axs[0])\nsns.barplot(x='Pclass', y='Survived', data=train0_data, ax=axs[1])\nplt.show()","81951249":"fig, axs = plt.subplots(1,2,figsize=(12,5))\nsns.countplot(train0_data.Sex, ax=axs[0])\nsns.barplot(x='Sex', y='Survived', data=train0_data, ax=axs[1])\nplt.show()","c73ab0e8":"train0_data.groupby(['Sex']).Survived.sum()","63cfe31f":"fig, axs = plt.subplots(1,2,figsize=(12,5))\naxs[0].hist(train0_data.Age, edgecolor='black', bins=15)\naxs[0].set_xlabel('Age')\naxs[0].set_ylabel('count')\nsns.distplot(train0_data[train0_data['Survived']==1].Age.dropna(), bins=15, label='survived', ax=axs[1], kde=False)\nsns.distplot(train0_data[train0_data['Survived']==0].Age.dropna(), bins=15, label='not survived', ax=axs[1], kde=False)\naxs[1].legend()\nplt.show()","034ca8b1":"fig, axs = plt.subplots(1,2,figsize=(12,5))\nsns.countplot(train0_data.SibSp, ax=axs[0])\nsns.barplot(x='SibSp', y='Survived', data=train0_data, ax=axs[1])\nplt.show()","43cb28b2":"fig, axs = plt.subplots(1,2,figsize=(12,5))\nsns.countplot(train0_data.Parch, ax=axs[0])\nsns.barplot(x='Parch', y='Survived', data=train0_data, ax=axs[1])\nplt.show()","a47337fc":"fig, axs = plt.subplots(1,2,figsize=(12,5))\nsns.countplot(train0_data.Embarked, ax=axs[0])\nsns.barplot(x='Embarked', y='Survived', data=train0_data, ax=axs[1])\nplt.show()","c4c72814":"all_data.info()","dc05d2c0":"train0_data.Name.head(10)","da9ea0f8":"whole_data = train0_data.append(test0_data)\nwhole_data['Title'] = whole_data.Name.str.extract(r'([A-Za-z]+)\\.', expand=False)\nwhole_data.Title.value_counts()","ff7bde9d":"Common_Title = ['Mr', 'Mrs', 'Master']\nwhole_data['Title'].replace(['Lady', 'Miss', 'Ms', 'Mlle', 'Mme'], 'Mrs', inplace=True)\nwhole_data['Title'].replace(['Sir', 'Rev'], 'Mr', inplace=True)\nwhole_data['Title'][~whole_data.Title.isin(Common_Title)] = 'Others'","c2c8a0e8":"train0_data = whole_data[:len(train0_data)]\ntest0_data = whole_data[len(train0_data):]\n\nAgeMedian_by_titles = train0_data.groupby('Title')['Age'].median()\nAgeMedian_by_titles","d2e66502":"for title in AgeMedian_by_titles.index:\n    train0_data['Age'][(train0_data.Age.isnull()) & (train0_data.Title == title)] = AgeMedian_by_titles[title]\n    test0_data['Age'][(test0_data.Age.isnull()) & (test0_data.Title == title)] = AgeMedian_by_titles[title]","61810db6":"train0_data[train0_data['Embarked'].isnull()]","09157ee6":"train0_data['Embarked'].fillna('S', inplace=True)","6a669514":"test0_data[test0_data['Fare'].isnull()]","bf18fafb":"median_fare = all_data.groupby(['Pclass', 'Parch', 'SibSp']).Fare.median()[3][0][0]\nprint('Median Fare: {:.3f}'.format(median_fare))\ntest0_data['Fare'].fillna(median_fare, inplace=True)","632da012":"print(train0_data.Fare.sort_values(ascending=False).head(5))\ntrain0_data.loc[train0_data.Fare>512, 'Fare'] = 263","4e46c6db":"train0_data['Sex'] = train0_data['Sex'].map({'female':1, 'male':0}).astype('int')\ntest0_data['Sex'] = test0_data['Sex'].map({'female':1, 'male':0}).astype('int')\n\ntrain0_data['Embarked'] = train0_data['Embarked'].map({'S':0, 'C':1, 'Q':2}).astype('int')\ntest0_data['Embarked'] = test0_data['Embarked'].map({'S':0, 'C':1, 'Q':2}).astype('int')","aabd5fe6":"train0_data['AgeBin_5'] = pd.qcut(train0_data['Age'], 5)\ntest0_data['AgeBin_5'] = pd.qcut(test0_data['Age'], 5)\n\nfig = plt.figure(figsize=(12,5))\nsns.barplot(x='AgeBin_5', y='Survived', data=train0_data)\nplt.show()","92b537cd":"train0_data['FareBin_5'] = pd.qcut(train0_data['Fare'], 5)\ntest0_data['FareBin_5'] = pd.qcut(test0_data['Fare'], 5)\n\nfig = plt.figure(figsize=(12,5))\nsns.barplot(x='FareBin_5', y='Survived', data=train0_data)\nplt.show()","c459e2b6":"label = LabelEncoder()\ntrain0_data['AgeBin_Code_5'] = label.fit_transform(train0_data['AgeBin_5'])\ntest0_data['AgeBin_Code_5'] = label.fit_transform(test0_data['AgeBin_5'])\nlabel = LabelEncoder()\ntrain0_data['FareBin_Code_5'] = label.fit_transform(train0_data['FareBin_5'])\ntest0_data['FareBin_Code_5'] = label.fit_transform(test0_data['FareBin_5'])","c8a5477b":"train0_data['FamilySize'] = train0_data.SibSp + train0_data.Parch + 1\ntest0_data['FamilySize'] = test0_data.SibSp + test0_data.Parch + 1\n\ntrain0_data['Alone'] = train0_data.FamilySize.map(lambda x: 1 if x == 1 else 0)\ntest0_data['Alone'] = test0_data.FamilySize.map(lambda x: 1 if x == 1 else 0)","4a46e768":"fig, axs = plt.subplots(1,2,figsize=(12,5))\nsns.countplot(train0_data.FamilySize, ax=axs[0])\nsns.barplot(x='FamilySize', y='Survived', data=train0_data, ax=axs[1])\nplt.show()\n\nfig, axs = plt.subplots(1,2,figsize=(12,5))\nsns.countplot(train0_data.Alone, ax=axs[0])\nsns.barplot(x='Alone', y='Survived', data=train0_data, ax=axs[1])\nplt.show()","ae00dbd2":"fig, axs = plt.subplots(1,2,figsize=(12,5))\nsns.countplot(train0_data.Title, ax=axs[0])\nsns.barplot(x='Title', y='Survived', data=train0_data, ax=axs[1])\nplt.show()","a42b3be8":"train0_data['Title_Code'] = train0_data.Title.map({'Mr':0, 'Mrs':1, 'Master':2, 'Others':3}).astype('int')\ntest0_data['Title_Code'] = test0_data.Title.map({'Mr':0, 'Mrs':1, 'Master':2, 'Others':3}).astype('int')","4b16a283":"train0_data[['Name', 'Ticket']].sort_values('Name').head(20)","0ed881ab":"whole_data = train0_data.append(test0_data)\nwhole_data['Surname'] = whole_data.Name.str.extract(r'([A-Za-z]+),', expand=False)\nwhole_data['TixPref'] = whole_data.Ticket.str.extract(r'(.*\\d)', expand=False)\nwhole_data['SurTix'] = whole_data['Surname'] + whole_data['TixPref']\nwhole_data['IsFamily'] = whole_data.SurTix.duplicated(keep=False)*1\nsns.countplot(whole_data.IsFamily)\nplt.show()","2956df48":"whole_data['Child'] = whole_data.Age.map(lambda x: 1 if x <= 13 else 0)\nFamilyWithChild = whole_data[(whole_data.IsFamily==1)&(whole_data.Child==1)]['SurTix'].unique()\nprint('There are {} families with children.'.format(len(FamilyWithChild)))","168149ff":"whole_data['FamilyId'] = 0\nx = 1\nfor tix in FamilyWithChild:\n    whole_data.loc[whole_data.SurTix==tix, ['FamilyId']] = x\n    x += 1","3c573943":"whole_data['SurvivedDemo'] = whole_data['Survived'].fillna(9)\npd.crosstab(whole_data.FamilyId, whole_data.SurvivedDemo).drop([0]).plot(kind='bar', stacked=True, color=['black','g','grey'], figsize=(13,5))\nplt.show()","2807ade6":"whole_data['ConnectedSurvival'] = 1 \nSurvived_by_FamilyId = whole_data.groupby('FamilyId').Survived.sum()\nfor i in range(1, len(FamilyWithChild)+1):\n    if Survived_by_FamilyId[i] >= 1:\n        whole_data.loc[whole_data.FamilyId==i, ['ConnectedSurvival']] = 2\n    elif Survived_by_FamilyId[i] == 0:\n        whole_data.loc[whole_data.FamilyId==i, ['ConnectedSurvival']] = 0\ntrain0_data = whole_data[:len(train0_data)]\ntest0_data = whole_data[len(train0_data):]\nsns.barplot(x='ConnectedSurvival', y='Survived', data=train0_data)\nplt.show()","f7f77fb9":"X_train = train0_data.drop(['Name', 'Parch', 'PassengerId', 'SibSp', \n                           'Ticket', 'Title', 'AgeBin_5', 'FareBin_5',  \n                           'Surname', 'TixPref', 'SurTix', 'IsFamily', 'Child', \n                           'FamilyId', 'Survived', 'SurvivedDemo', 'Age', 'Fare'], axis=1)\n\nY_train = train0_data['Survived']","756052d5":"model = RandomForestClassifier(n_estimators=600, random_state=2)\n\nmodel.fit(X_train,Y_train)\nimportance = pd.DataFrame({'feature':X_train.columns, 'importance': np.round(model.feature_importances_,3)})\nimportance = importance.sort_values('importance', ascending=False).set_index('feature')\n\nimportance.plot(kind='bar', rot=90, figsize=(8,3))\nplt.show()","9b588dfa":"final = ['Title_Code', 'ConnectedSurvival', 'FareBin_Code_5', 'Pclass',  'FamilySize']","8cd263f8":"model = RandomForestClassifier(n_estimators=100, bootstrap=True, criterion='entropy',\n                               min_samples_leaf=5, min_samples_split=4, random_state=42)\n\nmodel.fit(X_train[final],Y_train)\n\n# this function compares two numeric data columns and returns the percentage difference\ndef compare(col1, col2):\n    new = abs(col1-col2)\n    return (1- (new.sum() \/ len(new)))\n\nprediction_train = model.predict(X_train[final])\noutput_train = pd.DataFrame({'PassengerId': train0_data.PassengerId, 'Survived': prediction_train.astype(int)})\nprint('Training Accuracy: {:.5f}'.format(compare(output_train['Survived'], train0_data['Survived'])))","e218ad23":"X_test = test0_data[final]\nprediction = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test0_data.PassengerId, 'Survived': prediction.astype(int)})\noutput.to_csv(time.strftime('submission_%y%m%d_%H%M.csv', time.localtime()), index=False)\nprint('Kaggle Score: {:.4f}'.format(compare(output['Survived'], test0_data['Survived'])))\n","a028753a":"# Embarked\nLa fonction Embarked montre le port, o\u00f9 les passagers ont rejoint le tour titanic. L\u00e0 nous avons S = Southampton, Q = Queenstown et C = Cherbourg. La plupart des gens ont embarqu\u00e9 \u00e0 Southampton. Lorsque vous embarquez \u00e0 Cherbourg vous avez les meilleures chances de survivre.","3039b49f":"\n# Pr\u00e9diction de survie du Titanic\nDans ce Notebook, nous analyserons le Titanic Disaster Dataset correspondant au Kaggle Titanic Competition (https:\/\/www.kaggle.com\/c\/titanic). Nous examinerons les donn\u00e9es s\u00e9par\u00e9ment et essaierons d'apprendre les d\u00e9pendances dans les donn\u00e9es et comment apprendre les donn\u00e9es avec un mod\u00e8le de for\u00eat al\u00e9atoire.\n\nAvec ce Notebook, on a pu atteindre un Kaggle-Score de 0.8133.\n\n## Setup the NOTEBOOK\n\nPour configurer le Notebook, nous importons les biblioth\u00e8ques n\u00e9cessaires. Pour le traitement des donn\u00e9es, nous utilisons des pandas et pour visualiser, nous utilisons seaborn et matplotlib. Toutes les parties algorithmiques n\u00e9cessaires \u00e0 l'apprentissage des donn\u00e9es sont fournies par sklearn.","e3ed3aa6":"# MODEL\n\nDans ce chapitre, nous formons enfin le mod\u00e8le. Tous les param\u00e8tres sont optimis\u00e9s pour ces donn\u00e9es d'entra\u00eenement. Nous nous entra\u00eenons avec les fonctionnalit\u00e9s finales s\u00e9lectionn\u00e9es. Apr\u00e8s ajustement, nous comparons notre solution avec les r\u00e9ponses correctes donn\u00e9es dans l'ensemble de donn\u00e9es et atteignons une pr\u00e9cision d'entra\u00eenement de 85\u00a0%.","3f6d05ee":"\n\nLes titres communs dans la liste ci-dessus sont Mr, Mrs et Master. Certains des titres (Miss, Ms, Lady, ...) peuvent \u00eatre regroup\u00e9s aux plus courants. Les titres non class\u00e9s peuvent \u00eatre regroup\u00e9s dans un nouveau groupe \"Autres\" pour r\u00e9duire le nombre de titres utilis\u00e9s.","2749aaac":"Pour chaque famille ci-dessus, s'il y a au moins un membre qui a surv\u00e9cu, nous supposons que les autres ont une chance de survivre aussi. La probabilit\u00e9 de survie est beaucoup plus \u00e9lev\u00e9e pour les passagers voyageant avec la famille, ayant un ou plusieurs enfants et ayant un ou plusieurs survivants dans la famille.","d2452bdf":"# Cabin\nLes donn\u00e9es de cabine indiquent le num\u00e9ro de cabine du passager correspondant. Dans le r\u00e9sum\u00e9, nous voyons que nous n'avons que 295 entr\u00e9es sur 1309, ce qui signifie que nous ne connaissons pas les donn\u00e9es de plus de 70\u00a0% des passagers. Cabin n'est donc pas en mesure de fournir des informations de sens au processus d'apprentissage. On d\u00e9cide donc de le supprimer du jeu de donn\u00e9es. ","b3b045ca":"Nous pouvons maintenant imputer les valeurs d'\u00e2ge manquantes en fonction des \u00e2ges m\u00e9dians des titres.","ec2767d2":"# S\u00c9LECTION DE FONCTIONNALIT\u00c9\nDans ce chapitre nous allons analyser l'importance des fonctionnalit\u00e9s pour en s\u00e9lectionner certaines pour l'entra\u00eenement final. Nous supprimons certaines fonctionnalit\u00e9s qui ne sont pas n\u00e9cessaires et cr\u00e9ons les entr\u00e9es d'entra\u00eenement dans X_train et la valeur de survie cible dans Y_train.","0be59205":"# Nombre de Parents\/Enfants (Parc)\nLa fonction Parch est similaire \u00e0 SipSp et indique le nombre de parents ou d'enfants \u00e0 bord. Plus de 70% des passagers ne voyagent pas avec leurs parents\/enfants. Mais lorsque vous ne voyagez pas seul, vous avez de meilleures chances de survivre.","2dcfaef3":"# Age\nPour nous, il est logique que la fonction Age soit corr\u00e9l\u00e9e au taux de survie, car dans cette situation de catastrophe, tout le monde \u00e0 bord pr\u00e9f\u00e9rerait les enfants. Examinons donc la r\u00e9partition par age des passagers. La plupart des personnes \u00e0 bord ont entre 20 et 40 ans. Vous avez de bonnes chances de survivre si vous avez entre 0-5 et 20-35 ans.","285e7776":"# Passanger Class\nLa classe de passagers Pclass indique la classe de chaque passager comme indicateur du statut socio-\u00e9conomique. Donc 1er = sup\u00e9rieur, 2e = milieu et 3e = classe inf\u00e9rieure. Dans le graphique de gauche, nous voyons que la plupart des gens sont en 3e classe. La 1re et la 2e classe sont presque \u00e9quitablement r\u00e9parties.\n\nApr\u00e8s cela, nous voulons voir si la classe de passagers est li\u00e9e \u00e0 la chance de survivre. Et oui, les passagers de 1\u00e8re classe ont beaucoup plus de chances de survivre que les passagers de 3\u00e8me classe. La fonction Classe est un bon indice pour la pr\u00e9diction de survie. De plus, avec les valeurs num\u00e9riques, il est facile \u00e0 utiliser pour un mod\u00e8le de pr\u00e9diction algorithmique. Aucun autre r\u00e9glage n\u00e9cessaire.","9286e688":"# Nombre de fr\u00e8res et s\u0153urs\/conjoint \u00e0 bord (SipSp)\nLa fonction SipSp g\u00e8re le nombre de fr\u00e8res et s\u0153urs et de conjoints (mari ou femme) \u00e0 bord. Lorsque nous examinons les donn\u00e9es fournies, nous constatons que la plupart des passagers ne voyagent pas avec des fr\u00e8res et s\u0153urs ou des conjoints. Tous les passagers voyageant avec 1-2 fr\u00e8res et s\u0153urs\/conjoints ont plus de chances de survivre que les autres. ","f3e99698":"Nous voyons que les personnes portant le m\u00eame nom de famille ont des noms de billets identiques ou similaires. Nous allons donc extraire les noms de famille et les noms des tickets pour trouver des doublons dans le jeu de donn\u00e9es. Il est \u00e9galement possible qu'il y ait des passagers dans le train et l'ensemble de test de la m\u00eame famille. Nous enregistrons les r\u00e9sultats dans une nouvelle fonctionnalit\u00e9, appel\u00e9e IsFamily. Dans le plot, nous voyons que 2\/3 personnes voyagent avec leur famille.","58e9b367":"# TRANSFORMATION DES DONN\u00c9ES\nAvec le dernier chapitre, nous avons rempli les donn\u00e9es manquantes et supprim\u00e9 les valeurs aberrantes. Nous sommes maintenant pr\u00eats \u00e0 transformer les donn\u00e9es en encodant les cha\u00eenes en nombres pour mieux mod\u00e9liser le probl\u00e8me.\n\n## Gender and Embarked\nLes fonctionnalit\u00e9s Sex et Embarked sont donn\u00e9es sous forme de cha\u00eenes. Nous allons maintenant les encoder en nombres. En regroupant les donn\u00e9es dans des bacs, le mod\u00e8le sera plus robuste et nous \u00e9viterons le surajustement. Le sexe est transform\u00e9 avec Masculin = 0 et F\u00e9minin = 1. Le code d'embarquement sera S = 0, C = 1 et Q = 2.","3db05395":"# Survived\nLes informations Survived sont les donn\u00e9es pertinentes qui doivent \u00eatre pr\u00e9dites pour l'ensemble de donn\u00e9es de test. Dans l'ensemble de donn\u00e9es de train, nous avons un taux de survie global d'env. 38 %. L'\u00e9tat de survie est un bool\u00e9en qui indique 0 = d\u00e9c\u00e9d\u00e9 et 1 = surv\u00e9cu.","d694458b":"# DONN\u00c9ES MANQUANTES \/ OUTLIERS","fbcf27d3":"Dans l'ensemble de donn\u00e9es du training, nous avons 3 principales valeurs aberrantes (voir la valeur de 512 dans la liste). Nous devons \u00e9liminer cela, car les valeurs aberrantes ont un impact n\u00e9gatif sur la formation (d\u00e9forment la distribution). Nous pouvons remplacer la valeur par la valeur maximale ou m\u00e9diane. Dans ce cas, on d\u00e9cide de les r\u00e9gler sur la deuxi\u00e8me valeur la plus \u00e9lev\u00e9e.","449992d9":"# Embarked\nPour la fonctionnalit\u00e9 Embarked, nous ne connaissons pas le port de deux des passagers dans l'ensemble de donn\u00e9es d'entra\u00eenement. Lorsque nous examinons les donn\u00e9es sur les passagers, nous constatons que les deux sont des femmes, de la classe sup\u00e9rieure, avec la m\u00eame cabine et qu'elles ont toutes deux surv\u00e9cu \u00e0 la catastrophe titanic. \nSelon ces informations, nous remplirons les donn\u00e9es manquantes avec \"S\" pour Southampton.","53665d5b":"# Title\nNous avons cr\u00e9\u00e9 Title pour \u00e9liminer les entr\u00e9es manquantes de l'Age. Mais il peut \u00eatre utile d'utiliser le titre comme une nouvelle fonctionnalit\u00e9. Examinons donc d'abord le taux de survie pour chaque titre. Nous voyons que la plupart des passagers sont \"M.\" avec le moins de chances de survivre. Tous les autres ont de bien meilleures chances. Apr\u00e8s cela, nous encoderons le titre en Title_Code en nombres de 0 \u00e0 4.","0a87c119":"# Age\nNous avons 177 entr\u00e9es dans l'ensemble de donn\u00e9es des trains, o\u00f9 nous ne connaissons pas l'\u00e2ge du passager. Dans l'approche utilis\u00e9e, j'utiliserai les titres de la fonction Nom pour approximer l'\u00e2ge moyen de chaque titre. Cette information sera ensuite utilis\u00e9e pour remplir les valeurs d'\u00e2ge manquantes.\n\nDonc, tout d'abord, nous examinons un \u00e9chantillon de la fonctionnalit\u00e9 Noms. Ensuite, extrayez tous les titres et listez-les pour trouver les plus utilis\u00e9s.","96756170":"# L'ANALYSE DES DONN\u00c9ES\n\nDans cette section, nous examinerons les donn\u00e9es de trou et analyserons leur importance pour les prochaines \u00e9tapes. Pour r\u00e9pertorier toutes les fonctionnalit\u00e9s disponibles de l'ensemble de donn\u00e9es, nous pouvons utiliser info() pour imprimer un r\u00e9sum\u00e9. Nous connaissons maintenant les noms de colonne dans l'ensemble de donn\u00e9es avec le type de donn\u00e9es correspondant et un nombre non nul, ce qui nous montre combien des informations manquent.","fbe70e79":"Pour la pr\u00e9diction de l'importance, nous utilisons un classificateur de for\u00eat al\u00e9atoire. Dans le plot, nous pouvons examiner l'importance de la fonctionnalit\u00e9. Nous voyons que le titre a la meilleure valeur, suivi du sexe.","443ec115":"# Age and Fare\nPour mieux utiliser la fonctionnalit\u00e9 Age and Fare, nous regrouperons les donn\u00e9es en classes. Ainsi l'Age sera regroup\u00e9 en 9 classes selon l'\u00e2ge. (premier groupe : 0-16 ans ; deuxi\u00e8me groupe : 16-21 ; etc.). Aussi le Fare sera regroup\u00e9 en 9 classes. Apr\u00e8s avoir regroup\u00e9 les donn\u00e9es, nous encoderons les groupes d'\u00e2ge\/tarif dans des bacs pour la mod\u00e9lisation. Par exemple\u00a0: le groupe d'\u00e2ge 0-16\u00a0est le niveau\u00a00.","2c4274e4":"Maintenant, nous allons d\u00e9terrer toutes les familles avec enfants (avec \u00e2ge> 13) \u00e0 bord. Ensuite, nous encoderons les familles avec enfants en g\u00e9n\u00e9rant des identifiants familiaux uniques.","81bdce36":"Maintenant, on peut choisir nos fonctionnalit\u00e9s finales. On n'utilise pas exactement la suggestion du graphique d'importance ci-dessus. On ignore le Sexe, car cette information est d\u00e9j\u00e0 dans Title, juste sous une autre forme. De plus, on ignore la fonction Age, car on a enregistr\u00e9 une performance moindre avec elle. Veuillez noter qu'un nombre inf\u00e9rieur de fonctionnalit\u00e9s \u00e9vite le surajustement.","ed31d37f":"En regardant quelques exemples de passagers dans l'ensemble de donn\u00e9es, nous voyons toutes les fonctionnalit\u00e9s avec leurs entr\u00e9es. Dans les prochaines \u00e9tapes, nous examinerons chaque caract\u00e9ristique s\u00e9par\u00e9ment et analyserons les donn\u00e9es pour donner une premi\u00e8re pr\u00e9vision de la pertinence de survivre \u00e0 cette catastrophe.\n\nDu tableau, nous pouvons noter quelques choses. Tout d'abord, que nous devons convertir un grand nombre de fonctionnalit\u00e9s en num\u00e9rique, afin que les algorithmes d'apprentissage automatique puissent les traiter. De plus, nous pouvons voir que les caract\u00e9ristiques ont des plages tr\u00e8s diff\u00e9rentes, que nous devrons convertir \u00e0 peu pr\u00e8s \u00e0 la m\u00eame \u00e9chelle. Nous pouvons \u00e9galement rep\u00e9rer d'autres fonctionnalit\u00e9s, qui contiennent des valeurs manquantes (NaN = pas un nombre), que nous devons traiter.","89c28b35":"Pour une meilleure analyse des donn\u00e9es, nous devons combiner les donn\u00e9es d'entra\u00eenement et de test dans un nouvel ensemble de donn\u00e9es volumineux. Cela nous permet d'examiner les d\u00e9pendances de l'ensemble de donn\u00e9es au lieu de chaque partie s\u00e9par\u00e9ment.","482d2ed8":"Examinons la relation entre les titres et l'age et \u00e9num\u00e9rons l'age m\u00e9dian pour chaque titre.","f72ea976":"# Gender\nLa fonction Sexe indique le sexe des passagers en \"masculin\" et \"f\u00e9minin\". La proportion entre hommes et femmes est de 2\/1, nous avons donc deux fois plus d'hommes que de femmes \u00e0 bord. Comme la classe des passagers, le sexe est une tr\u00e8s bonne caract\u00e9ristique pour la pr\u00e9diction de survie. Les passag\u00e8res ont environ 70 % de chances de survivre, mais les hommes n'ont que 20 % de chances. C'est beaucoup de diff\u00e9rence. Pour une utilisation ult\u00e9rieure de cette fonctionnalit\u00e9, nous devons encoder les num\u00e9ros d'introduction des cha\u00eenes ult\u00e9rieurement.","bfe258bf":"Les donn\u00e9es du jeu de donn\u00e9es titanic sont fournies dans deux fichiers csv. Dans ces fichiers, nous trouvons les donn\u00e9es d'entra\u00eenement et de test. Les donn\u00e9es de test sont structur\u00e9es de la m\u00eame mani\u00e8re que la formation, \u00e0 l'exception des informations Survived. Apr\u00e8s avoir charg\u00e9 avec succ\u00e8s les fichiers, nous pouvons examiner la taille de l'ensemble de donn\u00e9es. Nous avons 891 entr\u00e9es pour la formation et 418 pour les tests. C'est une bonne r\u00e9partition des donn\u00e9es.","3cb6138d":"# Projet Analyse des donn\u00e9es\n## R\u00e9alis\u00e9 par : AZZOUZI Lamia, ZAHID Hassan","d54b8c83":"Avec les ID de famille, nous pouvons tracer l'\u00e9tat de survie de chaque famille individuellement. Les donn\u00e9es noires indiquent que les membres de la famille sont morts. Les donn\u00e9es vertes, c'est quand elles ont surv\u00e9cu. Et Gray sont les membres inconnus de l'ensemble de donn\u00e9es de test. Les r\u00e9sultats pr\u00e9sent\u00e9s prouvent le concept de survie connect\u00e9e.","1697434f":"# Tarif\nIl n'y a qu'un seul passager dans l'ensemble de donn\u00e9es de test avec une valeur de tarif manquante. Lorsque nous supposons que le tarif est li\u00e9 \u00e0 la classe de passagers Pclass et \u00e0 la taille de la famille (Parch et SibSp), nous pouvons extraire la valeur m\u00e9diane des autres passagers correspondants. Le passager concern\u00e9 est un homme de 60 ans, de 3e classe sans famille \u00e0 bord.","3919123d":"# CR\u00c9ATION DE FONCTIONNALIT\u00c9S\nDans ce chapitre, nous voulons cr\u00e9er de nouvelles fonctionnalit\u00e9s et voir o\u00f9 nous pouvons optimiser les donn\u00e9es de nouvelles mani\u00e8res ou les regrouper en fonctionnalit\u00e9s compl\u00e8tement nouvelles.\n\n## Voyager seul\nLes fonctionnalit\u00e9s SibSp et Parch sont toutes deux li\u00e9es au nombre de membres de la famille. Nous les combinerons en une seule fonctionnalit\u00e9 nomm\u00e9e FamilySize. Apr\u00e8s cela, nous pouvons les regrouper en voyageant seuls ou non dans la fonctionnalit\u00e9 Seul. L\u00e0, nous avons une fonctionnalit\u00e9 binaire. La chance de survivre, lorsque vous voyagez seul est d'environ 30 %, et la chance lorsque vous voyagez en famille, elle est d'environ 50 %.","3c21d6d2":"# Connected Survival\n\nIl est \u00e9vident que les groupes familiaux survivront mieux, car ils s'entraident. De plus, les enfants ont la priorit\u00e9 pour les bateaux s\u00fbrs. Pour trouver des groupes familiaux, nous regardons les noms de famille et les billets."}}