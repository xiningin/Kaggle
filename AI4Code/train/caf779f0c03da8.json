{"cell_type":{"eec629d0":"code","4440f0d6":"code","8c8bd754":"code","11056f01":"code","3c861e8b":"code","3a15d76f":"code","8132496d":"code","39e1f893":"code","d8755c9e":"code","d7933b84":"code","99f5c65b":"code","4e39225e":"code","decaa4b6":"code","5b989c7a":"code","0d75b08a":"code","01a9bb4c":"code","3d8968b8":"code","1b076cf5":"code","fba22043":"markdown","0d991b1b":"markdown","2188d6f2":"markdown","b7905b40":"markdown","4cbb9de9":"markdown","652e11ec":"markdown"},"source":{"eec629d0":"import cv2\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils.np_utils import to_categorical\nfrom keras import layers, models, optimizers\nfrom keras.preprocessing.image import ImageDataGenerator, img_to_array\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.models import Sequential\n\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nimport os \nimport random \nimport gc","4440f0d6":"train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\ntrain.head()","8c8bd754":"y = train['label']\nx = train.drop(['label'], axis=1, inplace = True)","11056f01":"train = train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)\ntrain.shape, test.shape","3c861e8b":"plt.figure(figsize=(20,10))\ncolumns=5\nfor i in range(columns):\n    plt.subplot(5\/columns + 1, columns, i+1)\n    plt.imshow(train[i])","3a15d76f":"train = np.array(train)\ny = np.array(y)\ny = to_categorical(y,num_classes=10)\n\ntest = np.array(test)\ntrain.shape\n\nX_train, X_val, Y_train, Y_val = train_test_split(train, y, test_size=0.1, random_state=2)","8132496d":"sns.countplot(y)\nplt.title('Lable for digits')","39e1f893":"del train\ndel y\n\nn_train = len(X_train)\nn_val = len(X_val)\n\nbatch_size = 256","d8755c9e":"model = Sequential()\n\nmodel.add(Conv2D(filters=32, kernel_size=(5, 5), padding='Same', activation='relu', input_shape=(28, 28, 1)))\nmodel.add(Conv2D(filters=32, kernel_size=(5, 5), padding='Same', activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\n\n#model.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters=64, kernel_size=(3, 3), padding='Same', activation='relu'))\nmodel.add(Conv2D(filters=64, kernel_size=(3, 3), padding='Same', activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2, 2), strides=(2, 2)))\n\n#model.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation=\"relu\"))\n\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(10, activation=\"softmax\"))\n","d7933b84":"optimizer = optimizers.RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)","99f5c65b":"model.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])","4e39225e":"data_gen = ImageDataGenerator(rescale=1.\/255)","decaa4b6":"train_generator = data_gen.flow(X_train, Y_train, batch_size=batch_size)\nval_generator = data_gen.flow(X_val, Y_val, batch_size=batch_size)","5b989c7a":"history = model.fit_generator(train_generator, \n                             steps_per_epoch = n_train\/\/batch_size,\n                             epochs=50,\n                             validation_data = val_generator,\n                             validation_steps = n_val\/\/batch_size)","0d75b08a":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nep = range(1,len(acc) + 1)\n\nplt.plot(ep, acc, 'b', label='Training Accuracy')\nplt.plot(ep, val_acc, 'r', label='Validation Accuracy')\nplt.title('Training and Validation Accuracy')\nplt.legend()\n\nplt.figure()\n\nplt.plot(ep, loss, 'b', label='Training Loss')\nplt.plot(ep, val_loss, 'r', label='Validation Loss')\nplt.title('Training and Validation Loss')\nplt.legend()\n\nplt.show()","01a9bb4c":"y_result = model.predict(test)\nprint('Prediction Shape is {}'.format(y_result.shape))\n","3d8968b8":"results = np.argmax(y_result, axis=1)\nresults = pd.Series(results,name=\"Label\")","1b076cf5":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"submission.csv\",index=False)","fba22043":"# Data","0d991b1b":"# MNIST","2188d6f2":"# Training","b7905b40":"# Training","4cbb9de9":"# Submission","652e11ec":"# Results"}}