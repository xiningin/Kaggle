{"cell_type":{"5a90ef78":"code","6fc07c53":"code","aeb90886":"code","57cba745":"code","856bd4bc":"code","0e301854":"code","08228c41":"code","b8b565ef":"code","3781679d":"code","8838bee7":"code","eda32575":"code","b12e1f78":"code","9f5ba581":"code","d288b068":"code","b2b23e1d":"code","4b6c2a05":"code","8a5bdddc":"code","950a20c9":"code","6de4726e":"code","752c92ea":"code","83e553e6":"code","e24015a0":"code","33b68734":"code","ebe11d33":"code","b65db0bd":"code","d925ab4e":"code","bca90ef3":"code","b110b466":"code","6072758f":"code","5e836081":"code","b050b9e2":"code","6753fdd6":"code","70e7d3d6":"code","3f775364":"code","009d7f0c":"code","4f1cec39":"code","32618226":"code","79832e61":"code","9c297d7a":"code","7da096c5":"code","d1e6e0bb":"code","fe4bf7d1":"code","55b94805":"code","350d1251":"code","64e66f0a":"code","bd1e2c0d":"code","73d58df7":"code","00931a7f":"code","f7ba1f71":"code","180fdd86":"code","7b74319f":"code","c61aac25":"code","de10547a":"code","2be638c3":"code","24774342":"code","ef622f9d":"code","fb9dff78":"code","01122dc0":"code","54d031f5":"code","8e1064f4":"code","e24c665f":"code","6197fbaa":"code","ff9265c2":"code","7f307f05":"code","f3ea2e56":"code","8b415bbf":"code","8c89c6ab":"code","65277a4e":"code","24f6594d":"code","bf348758":"code","05048b57":"code","20dac372":"code","d6f4ac4a":"code","571fc4c5":"code","55fe5087":"code","bd01a924":"code","27e40595":"code","c7c9475a":"code","d3bb6dc0":"markdown","c450cd60":"markdown","c95b9ed9":"markdown","4548a988":"markdown","a117e8cc":"markdown","5abd2458":"markdown","1692d5a8":"markdown","13350f14":"markdown","ce427a6f":"markdown","d9c1b0e1":"markdown","a728f801":"markdown","25e5105e":"markdown","033256ac":"markdown","e1637818":"markdown","6a3a3dd3":"markdown","6eed2cd9":"markdown","1abf09b9":"markdown","07534bac":"markdown","29f5fca2":"markdown","0b27c532":"markdown","1cddc450":"markdown","ced31e62":"markdown","cc1e5502":"markdown","7f2c8aa5":"markdown","0b18c1f5":"markdown","91e4b2db":"markdown","63ae87b2":"markdown","fec2d8fa":"markdown","97edc57b":"markdown","1b82a647":"markdown","1997ca83":"markdown","8634c389":"markdown","363de2b8":"markdown","d93be932":"markdown","c690125e":"markdown","3c43660e":"markdown","6f3268cb":"markdown","1db34c0d":"markdown","054393b8":"markdown","c13e0c9a":"markdown","42ca6d39":"markdown","e92a7805":"markdown","01a260ce":"markdown","9971d64f":"markdown","e4a9fb7b":"markdown","aab59799":"markdown","19b35191":"markdown","022fb75d":"markdown","e903029a":"markdown","069bdcaa":"markdown","cb469512":"markdown","6d17dd7b":"markdown","52211b01":"markdown","2498e1a5":"markdown","31e3285e":"markdown","5d597c17":"markdown","39b02191":"markdown","13cd1f55":"markdown"},"source":{"5a90ef78":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6fc07c53":"from subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))","aeb90886":"import pandas as pd\n\ntrain = pd.read_csv('\/kaggle\/input\/restaurant-revenue-prediction\/train.csv.zip')\ntest = pd.read_csv('\/kaggle\/input\/restaurant-revenue-prediction\/test.csv.zip')\n\n# Id\u306f\u4e0d\u8981\u306a\u306e\u3067\u3001\u524a\u9664\u3057\u3066\u5225\u306b\u5909\u6570\u5316\u3057\u3001\u30b9\u30b3\u30a2\u63d0\u51fa\u6642\u306b\u4f7f\u7528\ntrain_Id = train.Id\ntest_Id = test.Id\n\n# Id\u5217\u524a\u9664\ntrain.drop('Id', axis=1, inplace=True)\ntest.drop('Id', axis=1, inplace=True)","57cba745":"#importing the libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n# import seaborn as sns\nimport seaborn as sns; sns.set(style=\"ticks\", color_codes=True)\n\nfrom datetime import datetime\nfrom scipy import stats\nfrom scipy.stats import norm, skew\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nimport lightgbm as lgb\n\n# \u6700\u5927\u30ab\u30e9\u30e0\u6570\u3092100\u306b\u62e1\u5f35(\u30c7\u30d5\u30a9\u30eb\u30c8\u3060\u3068\u7701\u7565\u3055\u308c\u3066\u3057\u307e\u3046\u306e\u3067)\n# \u5e38\u306b\u5168\u3066\u306e\u5217\uff08\u30ab\u30e9\u30e0\uff09\u3092\u8868\u793a\npd.options.display.max_columns = None\npd.options.display.max_rows = 80\n\n# \u5c0f\u6570\u70b92\u6841\u3067\u8868\u793a(\u6307\u6570\u8868\u8a18\u3057\u306a\u3044\u3088\u3046\u306b)\npd.options.display.float_format = '{:.2f}'.format\n%matplotlib inline\n#\u30ef\u30fc\u30cb\u30f3\u30b0\u3092\u6291\u6b62\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","856bd4bc":"print('Size of train data', train.shape)\nprint('Size of test data', test.shape)","0e301854":"train.shape","08228c41":"train.info()","b8b565ef":"train.describe()","3781679d":"train.describe(include='O')","8838bee7":"# import pandas_profiling as pdp\n# pdp.ProfileReport(train)","eda32575":"train[\"revenue\"].describe()","b12e1f78":"#\u76ee\u7684\u5909\u6570\u3067\u3042\u308brevenue\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3068Q-Q\u30d7\u30ed\u30c3\u30c8\u3092\u8868\u793a\u3059\u308b\n# \u5206\u5e03\u78ba\u8a8d\nfig = plt.figure(figsize=(10, 4))\nplt.subplots_adjust(wspace=0.4)\n\n# \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\nax = fig.add_subplot(1, 2, 1)\nsns.distplot(train['revenue'], ax=ax)\n\n# QQ\u30d7\u30ed\u30c3\u30c8\nax2 = fig.add_subplot(1, 2, 2)\nstats.probplot(train['revenue'], plot=ax2)\n\nplt.show()\n\n# \u5909\u63db\u5f8c\u306e\u8981\u7d04\u7d71\u8a08\u91cf\u8868\u793a\nprint(train['revenue'].describe())\nprint(\"------------------------------\")\nprint(\"\u6b6a\u5ea6: %f\" % train['revenue'].skew())\nprint(\"\u5c16\u5ea6: %f\" % train['revenue'].kurt())","9f5ba581":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u30b3\u30d4\u30fc\u3057\u3001\u65b0\u305f\u306adataframe\u3067\u691c\u8a3c\ndf = train.copy()\n\n#\u76ee\u7684\u5909\u6570\u306e\u5bfe\u6570log(x+1)\u3092\u3068\u308b\ndf['revenue'] = np.log1p(df['revenue'])\n\n# \u6a19\u6e96\u5316(\u5e73\u57470, \u5206\u65631)\nscaler=StandardScaler()\ndf['revenue']=scaler.fit_transform(df[['revenue']])\n\n# \u5206\u5e03\u78ba\u8a8d\nfig = plt.figure(figsize=(10, 4))\nplt.subplots_adjust(wspace=0.4)\n\n# \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\nax = fig.add_subplot(1, 2, 1)\nsns.distplot(df['revenue'], ax=ax)\n\n# QQ\u30d7\u30ed\u30c3\u30c8\nax2 = fig.add_subplot(1, 2, 2)\nstats.probplot(df['revenue'], plot=ax2)\n\nplt.show()\n\n# \u5909\u63db\u5f8c\u306e\u8981\u7d04\u7d71\u8a08\u91cf\u8868\u793a\nprint(df['revenue'].describe())\nprint(\"------------------------------\")\nprint(\"\u6b6a\u5ea6: %f\" % df['revenue'].skew())\nprint(\"\u5c16\u5ea6: %f\" % df['revenue'].kurt())","d288b068":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u30b3\u30d4\u30fc\u3057\u3001\u65b0\u305f\u306adataframe\u3067\u691c\u8a3c\ndf = train.copy()\n\n# \u6a19\u6e96\u5316(\u5e73\u57470, \u5206\u65631)\nscaler=StandardScaler()\ndf['revenue']=scaler.fit_transform(df[['revenue']])\n\n\n# \u5206\u5e03\u78ba\u8a8d\nfig = plt.figure(figsize=(10, 4))\nplt.subplots_adjust(wspace=0.4)\n\n# \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\nax = fig.add_subplot(1, 2, 1)\nsns.distplot(df['revenue'], ax=ax)\n\n# QQ\u30d7\u30ed\u30c3\u30c8\nax2 = fig.add_subplot(1, 2, 2)\nstats.probplot(df['revenue'], plot=ax2)\n\nplt.show()\n\n# \u5909\u63db\u5f8c\u306e\u8981\u7d04\u7d71\u8a08\u91cf\u8868\u793a\nprint(df['revenue'].describe())\nprint(\"------------------------------\")\nprint(\"\u6b6a\u5ea6: %f\" % df['revenue'].skew())\nprint(\"\u5c16\u5ea6: %f\" % df['revenue'].kurt())","b2b23e1d":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u30b3\u30d4\u30fc\u3057\u3001\u65b0\u305f\u306adataframe\u3067\u691c\u8a3c\ndf = train.copy()\n\n# Min-Max\u5909\u63db(\u6b63\u898f\u5316(\u6700\u59271, \u6700\u5c0f0))\nscaler=MinMaxScaler()\ndf['revenue']=scaler.fit_transform(df[['revenue']])\n\n# \u5206\u5e03\u78ba\u8a8d\nfig = plt.figure(figsize=(10, 4))\nplt.subplots_adjust(wspace=0.4)\n\n# \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\nax = fig.add_subplot(1, 2, 1)\nsns.distplot(df['revenue'], ax=ax)\n\n# QQ\u30d7\u30ed\u30c3\u30c8\nax2 = fig.add_subplot(1, 2, 2)\nstats.probplot(df['revenue'], plot=ax2)\n\nplt.show()\n\n# \u5909\u63db\u5f8c\u306e\u8981\u7d04\u7d71\u8a08\u91cf\u8868\u793a\nprint(df['revenue'].describe())\nprint(\"------------------------------\")\nprint(\"\u6b6a\u5ea6: %f\" % df['revenue'].skew())\nprint(\"\u5c16\u5ea6: %f\" % df['revenue'].kurt())","4b6c2a05":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\n# Open Date\u3092\u65e5\u4ed8\u578b\u306b\u5909\u63db\ntrain['pd_date'] = pd.to_datetime(train['Open Date'], format='%m\/%d\/%Y')\n# \u5e74\u306e\u307f\u3092\u62bd\u51fa\ntrain['Open_Year'] = train['pd_date'].dt.strftime('%Y')\n# \u6708\u306e\u307f\u3092\u62bd\u51fa\ntrain['Open_Month'] = train['pd_date'].dt.strftime('%m')\n\ntrain = train.drop('pd_date',axis=1)\ntrain = train.drop('Open Date',axis=1)","8a5bdddc":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\n# Open Date\u3092\u65e5\u4ed8\u578b\u306b\u5909\u63db\ntest['pd_date'] = pd.to_datetime(test['Open Date'], format='%m\/%d\/%Y')\n# \u5e74\u306e\u307f\u3092\u62bd\u51fa\ntest['Open_Year'] = test['pd_date'].dt.strftime('%Y')\n# \u6708\u306e\u307f\u3092\u62bd\u51fa\ntest['Open_Month'] = test['pd_date'].dt.strftime('%m')\n\ntest = test.drop('pd_date',axis=1)\ntest = test.drop('Open Date',axis=1)","950a20c9":"train.dtypes.value_counts()","6de4726e":"#\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3068\u6570\u5024\u5909\u6570\u306b\u5206\u3051\u308b\ncats = list(train.select_dtypes(include=['object']).columns)\nnums = list(train.select_dtypes(exclude=['object']).columns)\nprint(f'categorical variables:  {cats}')\nprint(f'numerical variables:  {nums}')","752c92ea":"train.nunique(axis=0)","83e553e6":"# \u5024\u306e\u8ffd\u52a0\n# cats.extend([''])\n\n# \u5024\u306e\u524a\u9664\n# nums.remove('')\n\nprint(f'categorical variables:  {cats}')\nprint(f'numerical variables:  {nums}')","e24015a0":"# \u540d\u7fa9\u5909\u6570\nnominal_list =cats\n               \n# \u9806\u5e8f\u5909\u6570\n# ordinal_list = []\n\n# \u6570\u5024\u5909\u6570\nnum_list = nums","33b68734":"columns = len(nominal_list)\/2+1\n\nfig = plt.figure(figsize=(30, 20))\nplt.subplots_adjust(hspace=0.6, wspace=0.4)\n\nfor i in range(len(nominal_list)):\n    ax = fig.add_subplot(columns, 2, i+1)\n    sns.countplot(x=nominal_list[i], data=train, ax=ax)\n    plt.xticks(rotation=45)\nplt.show()","ebe11d33":"columns = len(num_list)\/3+1\n\nfig = plt.figure(figsize=(30, 40))\nplt.subplots_adjust(hspace=0.6, wspace=0.4)\n\nfor i in range(len(num_list)):\n    ax = fig.add_subplot(columns, 3, i+1)\n\n    train[num_list[i]].hist(ax=ax)\n    ax2 = train[num_list[i]].plot.kde(ax=ax, secondary_y=True,title=num_list[i])\n    ax2.set_ylim(0)\n    \nplt.show()","b65db0bd":"columns = len(nominal_list)\/2+1\n\nfig = plt.figure(figsize=(20, 10))\nplt.subplots_adjust(hspace=0.6, wspace=0.4)\n\nfor i in range(len(nominal_list)):\n    ax = fig.add_subplot(columns, 2, i+1)\n\n    # \u56de\u5e30\u306e\u5834\u5408    \n    sns.boxplot(x=nominal_list[i], y=train.revenue, data=train, ax=ax)\n    plt.xticks(rotation=45)\n    # \u5206\u985e\u306e\u5834\u5408\n#     sns.barplot(x = nominal_list[i], y = train.revenue, data=train, ax=ax)\nplt.show()\n","d925ab4e":"train = train.drop('Open_Month',axis=1)\ntest= test.drop('Open_Month',axis=1)\nnominal_list.remove('Open_Month')","bca90ef3":"columns = len(num_list)\/4+1\n\nfig = plt.figure(figsize=(30, 35))\nplt.subplots_adjust(hspace=0.6, wspace=0.4)\n\nfor i in range(len(num_list)):\n    ax = fig.add_subplot(columns, 4, i+1)\n\n    # \u56de\u5e30\u306e\u5834\u5408    \n    sns.regplot(x=num_list[i],y='revenue',data=train, ax=ax)\n    plt.xticks(rotation=45)\n    # \u5206\u985e\u306e\u5834\u5408\n#     sns.barplot(x = nominal_list[i], y = train.revenue, data=train, ax=ax)\nplt.show()\n","b110b466":"train[['City','revenue']].groupby('City').mean().plot(kind='bar')\nplt.title('Mean Revenue Generated vs City')\nplt.xlabel('City')\nplt.ylabel('Mean Revenue Generated')","6072758f":"# City\u3054\u3068\u306erevenue\u5e73\u5747\u5024\u30921000000\u5358\u4f4d\u3068\u3059\u308b\nmean_revenue_per_city = train[['City', 'revenue']].groupby('City', as_index=False).mean()\nmean_revenue_per_city.head()\nmean_revenue_per_city['revenue'] = mean_revenue_per_city['revenue'].apply(lambda x: int(x\/1e6)) \n\nmean_revenue_per_city\n\nmean_dict = dict(zip(mean_revenue_per_city.City, mean_revenue_per_city.revenue))\nmean_dict","5e836081":"# city_rev = []\n\n# for i in train['City']:\n#     for key, value in mean_dict.items():\n#         if i == key:\n#             city_rev.append(value)\n            \n# df_city_rev = pd.DataFrame({'city_rev':city_rev})\n# train = pd.concat([train,df_city_rev],axis=1)\n# train.head()","b050b9e2":"# train.replace({\"City\":mean_dict}, inplace=True)\n# test.replace({\"City\":mean_dict}, inplace=True)\n# test['City'] = test['City'].apply(lambda x: 6 if isinstance(x,str) else x)\n\n# train['City_rev'] = train['City']\n# test['City_rev'] = test['City']","6753fdd6":"\nprint(train['City'].sort_values().unique())","70e7d3d6":"test['City'].sort_values().unique()\n","3f775364":"# City\u306b\u3064\u3044\u3066\u3001\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u3066\u91cd\u8907\u524a\u9664\u3057\u3001\u30ea\u30b9\u30c8\u5316\ncity_train_list = list(train['City'].unique())\ncity_test_list = list(test['City'].unique())","009d7f0c":"l1_l2_and = set(city_train_list) & set(city_test_list)\nprint(l1_l2_and)\nprint(len(l1_l2_and))","4f1cec39":"# \u3069\u3061\u3089\u304b\u306b\u3057\u304b\u306a\u3044City\u3092\u62bd\u51fa\nl1_l2_sym_diff = set(city_test_list) ^ set(city_train_list)\nprint(l1_l2_sym_diff)\nprint(len(l1_l2_sym_diff))","32618226":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u307f\u5b58\u5728\u3059\u308bCity\u306e\u4ef6\u6570\nlen(set(city_test_list).difference(city_train_list))\n","79832e61":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u307f\u5b58\u5728\u3059\u308bCity\u306e\u4ef6\u6570\nlen(set(city_train_list).difference(city_test_list))","9c297d7a":"# P\u5909\u6570\u306e1\u3064\u306e\u30af\u30e9\u30b9\u306f\u5730\u7406\u7684\u5c5e\u6027\u3067\u3042\u308b\u3068\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u305f\u3081\n# \u5404\u90fd\u5e02\u306eP\u5909\u6570\u306e\u5e73\u5747\u3092\u30d7\u30ed\u30c3\u30c8\u3059\u308b\u3068\u3001\u3069\u306eP\u5909\u6570\u304c\u90fd\u5e02\u3068\u95a2\u9023\u6027\u304c\u9ad8\u3044\u304b\u304c\u5206\u304b\u308b\ndistinct_cities = train.loc[:, \"City\"].unique()\n\n# P\u5909\u6570\u306ecity\u3054\u3068\u306e\u5e73\u5747\u5024\u3092\u53d6\u5f97\nmeans = []\nfor i in range(len(num_list)):\n    temp = []\n    for city in distinct_cities:\n        temp.append(train.loc[train.City == city, num_list[i]].mean())  \n    means.append(temp)\n    \ncity_pvars = pd.DataFrame(columns=[\"city_var\", \"means\"])\nfor i in range(37):\n    for j in range(len(distinct_cities)):\n        city_pvars.loc[i+37*j] = [\"P\"+str(i+1), means[i][j]]\n\nprint(city_pvars)            \n# \u7bb1\u3072\u3052\u56f3\u3092\u8868\u793a\nplt.rcParams['figure.figsize'] = (18.0, 6.0)\nsns.boxplot(x=\"city_var\", y=\"means\", data=city_pvars)\n\n# From this we observe that P1, P2, P11, P19, P20, P23, and P30 are approximately a good\n# proxy for geographical location.","7da096c5":"from sklearn import cluster\n\ndef adjust_cities(full_full_data, train, k):\n    \n    # As found by box plot of each city's mean over each p-var\n    relevant_pvars =  [\"P1\", \"P2\", \"P11\", \"P19\", \"P20\", \"P23\",\"P30\"]\n    train = train.loc[:, relevant_pvars]\n    \n    # Optimal k is 20 as found by DB-Index plot    \n    kmeans = cluster.KMeans(n_clusters=k)\n    kmeans.fit(train)\n    \n    # Get the cluster centers and classify city of each full_data instance to one of the centers\n    full_data['City_Cluster'] = kmeans.predict(full_data.loc[:, relevant_pvars])\n    \n    return full_data","d1e6e0bb":"num_train = train.shape[0]\nnum_test = test.shape[0]\nprint(num_train, num_test)\n\nfull_data = pd.concat([train, test], ignore_index=True)                ","fe4bf7d1":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3092\u884c\u3044\u3001\u305d\u306e\u5b66\u7fd2\u7d50\u679c\u3092\u5168\u30c7\u30fc\u30bf\u306b\u9069\u7528\u3055\u305b\u308b\nfull_data = adjust_cities(full_data, train, 20)\nfull_data\n\n# City\u9805\u76ee\u306f\u4e0d\u8981\u306a\u306e\u3067\u524a\u9664\nfull_data = full_data.drop(['City'], axis=1)","55b94805":"# Split into train and test datasets\ntrain = full_data[:num_train]\ntest = full_data[num_train:]\n# check the shapes \nprint(\"Train :\",train.shape)\nprint(\"Test:\",test.shape)\ntest","350d1251":"train[['City_Cluster','revenue']].groupby('City_Cluster').mean().plot(kind='bar')\nplt.title('Mean Revenue Generated vs City Cluster')\nplt.xlabel('City Cluster')\nplt.ylabel('Mean Revenue Generated')","64e66f0a":"mean_revenue_per_city = train[['City_Cluster', 'revenue']].groupby('City_Cluster', as_index=False).mean()\nmean_revenue_per_city.head()\nmean_revenue_per_city['revenue'] = mean_revenue_per_city['revenue'].apply(lambda x: int(x\/1e6)) \n\nmean_revenue_per_city\n\nmean_dict = dict(zip(mean_revenue_per_city.City_Cluster, mean_revenue_per_city.revenue))\nmean_dict","bd1e2c0d":"city_rev = []\n\nfor i in full_data['City_Cluster']:\n    for key, value in mean_dict.items():\n        if i == key:\n            city_rev.append(value)\n            \ndf_city_rev = pd.DataFrame({'city_rev':city_rev})\nfull_data = pd.concat([full_data,df_city_rev],axis=1)\nfull_data.head\n\n# \u5024\u306e\u8ffd\u52a0\nnominal_list.extend(['City_Cluster'])\n# \u5024\u306e\u524a\u9664\nnominal_list.remove('City')\n","73d58df7":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nle_count = 0\n\n# Iterate through the columns\n# for col in application_full_data:\nfor i in range(len(nominal_list)):    \n    \n#     if application_full_data[col].dtype == 'object':\n        # If 2 or fewer unique categories\n        if len(list(full_data[nominal_list[i]].unique())) <= 2:\n            # full_data on the full_dataing data\n            le.fit(full_data[nominal_list[i]])\n            # Transform both full_dataing and testing data\n            full_data[nominal_list[i]] = le.transform(full_data[nominal_list[i]])\n            \n            # Keep track of how many columns were label encoded\n            le_count += 1\n            \nprint('%d columns were label encoded.' % le_count)","00931a7f":"# one-hot encoding of categorical variables\nfull_data = pd.get_dummies(full_data)\nprint('full_dataing Features shape: ', full_data.shape)","f7ba1f71":"def tukey_outliers(x):\n    q1 = np.percentile(x,25)\n    q3 = np.percentile(x,75)\n    \n    iqr = q3-q1\n    \n    min_range = q1 - iqr*1.5\n    max_range = q3 + iqr*1.5\n    \n    outliers = x[(x<min_range) | (x>max_range)]\n    return outliers","180fdd86":"# \u5916\u308c\u5024\u306e\u8a73\u7d30\u30ec\u30b3\u30fc\u30c9\u3092\u8868\u793a\n# for col in num_list:\n#     outliers = tukey_outliers(train[col])\n#     if len(outliers):\n#         print(f\"* {col} has these tukey outliers,\\n{outliers}\\n\")\n#     else:\n#         print(f\"* {col} doesn't have any tukey outliers.\\n\")","7b74319f":"# train.iloc[list(tukey_outliers(df_num.acceleration).index)]","c61aac25":"columns = len(num_list)\/4+1\n\n# boxplot\nfig = plt.figure(figsize=(15,20))\nplt.subplots_adjust(hspace=0.2, wspace=0.8)\nfor i in range(len(num_list)):\n    ax = fig.add_subplot(columns, 4, i+1)\n    sns.boxplot(y=full_data[num_list[i]], data=full_data, ax=ax)\nplt.show()","de10547a":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u7f6e\u304d\u63db\u3048\n# for i in range(len(num_list)):\n#      # \u7f6e\u304d\u63db\u3048\u5024\n#     upper_lim = full_data[num_list[i]].quantile(.95)\n#     lower_lim = full_data[num_list[i]].quantile(.05)\n    \n#     # IQR\n#     Q1 = full_data[num_list[i]].quantile(.25)\n#     Q3 = full_data[num_list[i]].quantile(.75)\n#     IQR = Q3 - Q1\n#     outlier_step = 1.5 * IQR\n    \n#     # 1.5IQR\u8d85\u3048\u308b\u6570\u5024\u306f95%tile\u5024\u3067\u57cb\u3081\u308b\u3001\u4e0b\u56de\u308b\u6570\u5024\u306f5%tile\u5024\u3067\u57cb\u3081\u308b\n#     full_data.loc[(full_data[num_list[i]] > (Q3 + outlier_step)), num_list[i]] =upper_lim\n#     full_data.loc[(full_data[num_list[i]] < (Q1 - outlier_step)), num_list[i]] = lower_lim","2be638c3":"# columns = len(num_list)\/4+1\n\n# # boxplot\n# fig = plt.figure(figsize=(15,20))\n# plt.subplots_adjust(hspace=0.2, wspace=0.8)\n# for i in range(len(num_list)):\n#     ax = fig.add_subplot(columns, 4, i+1)\n#     sns.boxplot(y=full_data[num_list[i]], data=full_data, ax=ax)\n# plt.show()","24774342":"skewed_data = train[num_list].apply(lambda x: skew(x)).sort_values(ascending=False)\nskewed_data[:10]","ef622f9d":"# skew_col = skewed_data[skewed_data > 10].index\n\n# # \u53ef\u8996\u5316\n# fig = plt.figure(figsize=(10, 8))\n# for i in range(len(skew_col)):\n#     ax = fig.add_subplot(2, 3, i+1)\n#     try:\n#         sns.distplot(combined_df[skew_col[i]], fit=norm, ax=ax)\n#     except:\n#         # kde\u8a08\u7b97\u3067\u304d\u306a\u3044\u6642\u306f\u3001kde=False\n#         sns.distplot(combined_df[skew_col[i]], fit=norm, kde=False, ax=ax)\n# plt.show()\n\n# # \u5bfe\u6570\u5909\u63db\n# for i in range(len(skew_col)):\n#     combined_df[skew_col[i]] = np.log1p(combined_df[skew_col[i]])\n    \n#     # \u53ef\u8996\u5316\n# # \u53ef\u8996\u5316\n# fig = plt.figure(figsize=(10, 8))\n# for i in range(len(skew_col)):\n#     ax = fig.add_subplot(2, 3, i+1)\n#     try:\n#         sns.distplot(combined_df[skew_col[i]], fit=norm, ax=ax)\n#     except:\n#         # kde\u8a08\u7b97\u3067\u304d\u306a\u3044\u6642\u306f\u3001kde=False\n#         sns.distplot(combined_df[skew_col[i]], fit=norm, kde=False, ax=ax)\n# plt.show()","fb9dff78":"# Split into train and test datasets\ntrain = full_data[:num_train]\ntest = full_data[num_train:]\n# check the shapes \nprint(\"Train :\",train.shape)\nprint(\"Test:\",test.shape)","01122dc0":"sns.set(font_scale=1.1)\ncorrelation_train = train.corr()\nmask = np.triu(correlation_train.corr())\nfig = plt.figure(figsize=(50,50))\nsns.heatmap(correlation_train,\n            annot=True,\n            fmt='.1f',\n            cmap='coolwarm',\n            square=True,\n#             mask=mask,\n            linewidths=1)\n\nplt.show()","54d031f5":"# Find correlations with the target and sort\ncorrelations = train.corr()['revenue'].sort_values()\n\n# Display correlations\nprint('Most Positive Correlations:\\n', correlations.tail(15))\nprint('\\nMost Negative Correlations:\\n', correlations.head(15))","8e1064f4":"# \u76f8\u95a2\u304c\u9ad8\u304410\u9805\u76ee\u306e\u307f\u62bd\u51fa\ncorrelations = train.corr()\n# \u7d76\u5bfe\u5024\u3067\u53d6\u5f97\ncorrelations = abs(correlations)\n\ncols = correlations.nlargest(10,'revenue')['revenue'].index\ncols","e24c665f":"# \u76f8\u95a2\u304c\u9ad8\u304410\u9805\u76ee\u306e\u307f\u62bd\u51fa\ntrain = train[cols]\n\n#\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u76ee\u7684\u5909\u6570\u3068\u305d\u308c\u4ee5\u5916\u306b\u5206\u3051\u308b\ntrain_X = train.drop(\"revenue\",axis=1)\ntrain_y = train[\"revenue\"]\n\n#revenue\u3092\u5bfe\u6570\u5909\u63db\u3059\u308b \ntrain_y = np.log1p(train_y)\n\n#\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u30ab\u30e9\u30e0\u306e\u307f\u306b\u3059\u308b \ntmp_cols = train_X.columns\ntest_X = test[tmp_cols]\n\n#\u305d\u308c\u305e\u308c\u306e\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba\u3092\u78ba\u8a8d\nprint(\"train_X: \"+str(train_X.shape))\nprint(\"train_y: \"+str(train_y.shape))\nprint(\"test_X: \"+str(test_X.shape))","6197fbaa":"#\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30e2\u30c7\u30eb\u8a55\u4fa1\u7528\u30c7\u30fc\u30bf\u306b\u5206\u3051\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\nfrom sklearn.model_selection import train_test_split\n\n#\u30d5\u30a9\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5\u306b\u3088\u308a\u3001\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u5272 \n(X_train, X_test, y_train, y_test) = train_test_split(train_X, train_y , test_size = 0.3 , random_state = 0)\n\nprint(\"X_train: \"+str(X_train.shape))\nprint(\"X_test: \"+str(X_test.shape))\nprint(\"y_train: \"+str(y_train.shape))\nprint(\"y_test: \"+str(y_test.shape))","ff9265c2":"from sklearn.model_selection import GridSearchCV, cross_val_score, learning_curve\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom xgboost import XGBRegressor","7f307f05":"#\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u3092\u30ea\u30b9\u30c8\u306b\u683c\u7d0d\nrandom_state = 2\nclassifiers = []\nclassifiers.append(Lasso(random_state=random_state))\nclassifiers.append(LinearRegression())\nclassifiers.append(Ridge(random_state=random_state))\nclassifiers.append(ElasticNet(random_state=random_state))\nclassifiers.append(KNeighborsRegressor())\nclassifiers.append(SVR())\nclassifiers.append(RandomForestRegressor(random_state=random_state))\nclassifiers.append(GradientBoostingRegressor())\nclassifiers.append(AdaBoostRegressor(random_state = random_state))\nclassifiers.append(DecisionTreeRegressor())\nclassifiers.append(XGBRegressor())","f3ea2e56":"#\u8907\u6570\u306eclassifier \u306e\u9069\u7528\ncv_results = []\nfor classifier in classifiers :\n    cv_results.append(cross_val_score(classifier, X_train, y_train, scoring='neg_mean_squared_error', cv =10, n_jobs=4))\n\n#\u9069\u7528\u3057\u305fclassifier\u306e\u30b9\u30b3\u30a2\u3092\u53d6\u5f97    \ncv_means = []\ncv_std = []\nfor cv_result in cv_results:\n    cv_means.append(cv_result.mean())\n    cv_std.append(cv_result.std())\n\ncv_res = pd.DataFrame({\"CrossValMeans\":cv_means,\"CrossValerrors\": cv_std,\"Algorithm\":[\"Lasso\",\"LinearRegression\",\"Ridge\",\n\"ElasticNet\",\"KNeighborsRegressor\",\"SVR\",\"RandomForestRegressor\",\"GradientBoostingRegressor\",\"AdaBoostRegressor\",\"DecisionTreeRegressor\", \"XGBRegressor\"]})","8b415bbf":"g = sns.barplot(\"CrossValMeans\",\"Algorithm\",data = cv_res, palette=\"Set3\",orient = \"h\",**{'xerr':cv_std})\ng.set_xlabel(\"Mean Accuracy\")\ng = g.set_title(\"Cross validation scores\")","8c89c6ab":"cv_res.sort_values(ascending=False, by='CrossValMeans')","65277a4e":"from sklearn import datasets\nfrom sklearn.linear_model import Ridge\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nimport optuna\n \ndef objective(trial):\n    params = {\n        'alpha': trial.suggest_loguniform(\"alpha\", 0.1, 5), \n        'fit_intercept': trial.suggest_categorical('fit_intercept', [True, False]),\n        'normalize': trial.suggest_categorical('normalize', [True, False]),\n    }\n \n    reg = Ridge(**params)\n    reg.fit(X_train, y_train)\n    y_pred = reg.predict(X_test)\n \n    mae = mean_absolute_error(y_test, y_pred)\n    return mae\n ","24f6594d":"# optuna \u306b\u3088\u308b\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u6700\u9069\u5316\nstudy = optuna.create_study()\nstudy.optimize(objective, n_trials=100)\n\n# \u7d50\u679c\u3092\u8868\u793a\nprint(f'best score: {study.best_value:.4f}, best params: {study.best_params}')","bf348758":"params = {'alpha': 1.9510706324753746, 'fit_intercept': True, 'normalize': True}\n\nreg = Ridge(**params)\nreg.fit(X_train, y_train)\nprediction_log = reg.predict(test_X)\nprediction =np.exp(prediction_log) \nprint(prediction)","05048b57":"# \u4e88\u6e2c\u3057\u305f\u5024\u3092\u63d0\u51fa\u7528CSV\u30d5\u30a1\u30a4\u30eb(submission\u30d5\u30a1\u30a4\u30eb)\u306b\u66f8\u304d\u51fa\u3057\nsubmission = pd.DataFrame({\"Id\":test_Id, \"Prediction\":prediction})\nsubmission.to_csv(\"submission.csv\", index=False)","20dac372":"# #LightGBM\u30e9\u30a4\u30d6\u30e9\u30ea\n# import lightgbm as lgb\n# #\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u81ea\u52d5\u5316\u30e9\u30a4\u30d6\u30e9\u30ea\n# import optuna\n\n# lgb_train = lgb.Dataset(X_train, y_train)\n# lgb_eval = lgb.Dataset(X_test, y_test)","d6f4ac4a":"# def objective(trial):\n#     params = {'metric': {'rmse'},\n#               'max_depth' : trial.suggest_int('max_depth', 1, 10),\n#               'subsumple' : trial.suggest_uniform('subsumple', 0.0, 1.0),\n#               'subsample_freq' : trial.suggest_int('subsample_freq', 0, 1),\n#               'leaning_rate' : trial.suggest_loguniform('leaning_rate', 1e-5, 1),\n#               'feature_fraction' : trial.suggest_uniform('feature_fraction', 0.0, 1.0),\n#               'lambda_l1' : trial.suggest_uniform('lambda_l1' , 0.0, 1.0),\n#               'lambda_l2' : trial.suggest_uniform('lambda_l2' , 0.0, 1.0)}\n \n#     gbm = lgb.train(params,\n#                     lgb_train,\n#                     valid_sets=(lgb_train, lgb_eval),\n#                     num_boost_round=10000,\n#                     early_stopping_rounds=100,\n#                     verbose_eval=50)\n#     predicted = gbm.predict(X_test)\n#     RMSE = np.sqrt(mean_squared_error(y_test, predicted))\n    \n#     pruning_callback = optuna.integration.LightGBMPruningCallback(trial, 'rmse')\n#     return RMSE","571fc4c5":"# study = optuna.create_study()\n# study.optimize(objective, timeout=360)","55fe5087":"# print('Best trial:')\n# trial = study.best_trial\n# print('Value:{}'.format(trial.value))\n# print('Params:')\n# for key, value in trial.params.items():\n#     print('\"{}\" : {}'.format(key, value))","bd01a924":"\n# #Optuna\u3067\u6700\u9069\u5316\u3055\u308c\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\n# params = {\"metric\": {'rmse'},\n#           \"max_depth\" : 7,\n#           \"subsumple\" : 0.0527053286950852,\n#           \"subsample_freq\" : 0,\n#           \"leaning_rate\" : 0.00012337315517641352,\n#           \"feature_fraction\" : 0.27094712699951107,\n#           \"lambda_l1\" : 0.4567708349707908,\n#           \"lambda_l2\" :6.452511288039886e-07\n#          }\n \n# #LightGBM\u306e\u30e2\u30c7\u30eb\u69cb\u7bc9\n# gbm = lgb.train(params,\n#                 lgb_train,\n#                 valid_sets=(lgb_train, lgb_eval),\n#                 num_boost_round=10000,\n#                 early_stopping_rounds=100,\n#                 verbose_eval=50)","27e40595":"# #\u7279\u5fb4\u91cf\u306e\u91cd\u8981\u5ea6\n# lgb.plot_importance(gbm, height=0.5, figsize=(8,16))","c7c9475a":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u3066\u4e88\u6e2c\n# prediction_log = gbm.predict(test_X)\n# print(prediction_log)\n# prediction =np.exp(prediction_log) \n# print(prediction)","d3bb6dc0":"# 8.\u6570\u5024\u5909\u6570\u306e\u76f8\u95a2\u3092\u78ba\u8a8d","c450cd60":"\u4eca\u56de\u306f\u300110\u4ee5\u4e0a\u306e\u5909\u6570\u304c\u5b58\u5728\u3057\u306a\u3044\u305f\u3081\u51e6\u7406\u306e\u5fc5\u8981\u306a\u3057","c95b9ed9":"# 2.\u76ee\u7684\u5909\u6570\u306e\u78ba\u8a8d","4548a988":"# 4.\u65b0\u305f\u306a\u7279\u5fb4\u91cf\u306e\u4f5c\u6210","a117e8cc":"## \u9023\u7d9a\u5909\u6570\u9593\u306e\u95a2\u4fc2\uff1a\u9023\u7d9a\u5909\u6570\u9593\u3067\u76f8\u95a2\u306e\u9ad8\u3044\u5909\u6570\u306e\u78ba\u8a8d","5abd2458":"## revenue\u3092\u6b63\u898f\u5316(\u6700\u59271, \u6700\u5c0f0)","1692d5a8":"## 10.\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\n* Optuna\u3092\u4f7f\u7528\u3057\u3066\u307f\u308b\n* Optuna \u306f\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6700\u9069\u5316\u3092\u81ea\u52d5\u5316\u3059\u308b\u305f\u3081\u306e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3002\n* \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5024\u306b\u95a2\u3059\u308b\u8a66\u884c\u932f\u8aa4\u3092\u81ea\u52d5\u7684\u306b\u884c\u3044\u306a\u304c\u3089\u3001\u512a\u308c\u305f\u6027\u80fd\u3092\u767a\u63ee\u3059\u308b\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5024\u3092\u81ea\u52d5\u7684\u306b\u767a\u898b\u3059\u308b\n* Tree-structured Parzen Estimator \u3068\u3044\u3046\u30d9\u30a4\u30ba\u6700\u9069\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u4e00\u7a2e\u3092\u7528\u3044\u3066\u3044\u308b\u3002\n","13350f14":"# 11.\u30e2\u30c7\u30eb\u5b66\u7fd2","ce427a6f":"\n## \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u307f\u5b58\u5728\u3059\u308bCity\u306e\u4ef6\u6570\n","d9c1b0e1":"# 9.\u30e2\u30c7\u30eb\u306e\u76f8\u4e92\u691c\u8a3c","a728f801":"## \u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u5b58\u5728\u3059\u308bCity\u3092\u8868\u793a\n","25e5105e":"\n## \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u307f\u5b58\u5728\u3059\u308bCity\u306e\u4ef6\u6570\n","033256ac":"# 5.\u30ab\u30c6\u30b4\u30ea\u30fc\u5909\u6570\u306e\u30a8\u30f3\u30b3\u30fc\u30c9\n\u30ab\u30c6\u30b4\u30ea\u304c2\u3064\u3057\u304b\u306a\u3044\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306b\u306f\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u4f7f\u7528\u3057\u3001\u30ab\u30c6\u30b4\u30ea\u304c3\u3064\u4ee5\u4e0a\u306e\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306b\u306f\u30ef\u30f3\u30db\u30c3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u4f7f\u7528\u3059\u308b","e1637818":"# 12.\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u3066\u4e88\u6e2c\u3057\u30b9\u30b3\u30a2\u63d0\u51fa","6a3a3dd3":"## \u5916\u308c\u5024\u3092\u5909\u63db\u3000\u2190\u4eca\u56de\u306f\u5b9f\u65bd\u3057\u306a\u3044\n1.5IQR\u8d85\u3048\u308b\u6570\u5024\u306f95%tile\u5024\u3067\u57cb\u3081\u308b\u3001\u4e0b\u56de\u308b\u6570\u5024\u306f5%tile\u5024\u3067\u57cb\u3081\u308b","6eed2cd9":"\u7dda\u5f62\u56de\u5e30\u30e2\u30c7\u30eb\u3082\u4f7f\u7528\u3059\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067\u3001\u5bfe\u6570\u5909\u63db\u3067\u6b63\u898f\u5206\u5e03\u306b\u8fd1\u3065\u3051\u308b\u3002","1abf09b9":"# 1.\u30c7\u30fc\u30bf\u306e\u6982\u8981\u78ba\u8a8d","07534bac":"# \u5206\u6790\u5185\u5bb9\n1. \u30c7\u30fc\u30bf\u306e\u6982\u8981\u78ba\u8a8d\n1. \u76ee\u7684\u5909\u6570\u306e\u78ba\u8a8d\n    1. \u76ee\u7684\u5909\u6570\u3067\u3042\u308brevenue\u306e\u8981\u7d04\u7d71\u8a08\u91cf\u3092\u8868\u793a\n1. \u8aac\u660e\u5909\u6570\u306e\u78ba\u8a8d\n    1. \u540d\u7fa9\u5909\u6570\u306e\u5206\u5e03\u78ba\u8a8d\n    1. \u6570\u5024\u5909\u6570\u306e\u5206\u5e03\u78ba\u8a8d\n    1. \u540d\u7fa9\u5909\u6570\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u95a2\u4fc2\u3092\u78ba\u8a8d\n    1. \u6570\u5024\u5909\u6570\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u95a2\u4fc2\u3092\u78ba\u8a8d\n1. \u65b0\u305f\u306a\u7279\u5fb4\u91cf\u306e\u4f5c\u6210\n1. \u30ab\u30c6\u30b4\u30ea\u30fc\u5909\u6570\u306e\u30a8\u30f3\u30b3\u30fc\u30c9\n1. \u5916\u308c\u5024\u306e\u8abf\u67fb\n1. \u6570\u5024\u578b\u5909\u6570\u306e\u6b6a\u5ea6\u3092\u78ba\u8a8d\n1. \u6570\u5024\u5909\u6570\u306e\u76f8\u95a2\u3092\u78ba\u8a8d\n1. \u30e2\u30c7\u30eb\u306e\u76f8\u4e92\u691c\u8a3c\n1. \u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\n1. \u30e2\u30c7\u30eb\u5b66\u7fd2\n1. \u30b9\u30b3\u30a2\u63d0\u51fa","29f5fca2":"## \u30c7\u30fc\u30bf\u306e\u30ec\u30b3\u30fc\u30c9\u6570\u3068\u30ab\u30e9\u30e0\u6570\u3092\u78ba\u8a8d","0b27c532":"# 7.\u6570\u5024\u578b\u5909\u6570\u306e\u6b6a\u5ea6\u3092\u78ba\u8a8d","1cddc450":"\n## \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5b58\u5728\u3059\u308bCity\u3092\u8868\u793a","ced31e62":"## \u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u305f\u5909\u6570\u4ee5\u5916\u306e\u6570\u5024\u578b\u4ee5\u5916\u306e\u5909\u6570\u3092one-hot encoding\u3059\u308b\u3002","cc1e5502":"## \u30c7\u30fc\u30bf\u306e\u30c7\u30fc\u30bf\u5b9a\u7fa9\u3092\u78ba\u8a8d","7f2c8aa5":"# 6.\u5916\u308c\u5024\u306e\u8abf\u67fb","0b18c1f5":"## \u30aa\u30fc\u30d7\u30f3\u65e5\u3092\u65e5\u4ed8\u5f62\u5f0f\u306b\u5909\u63db\u3057\u3001\u30aa\u30fc\u30d7\u30f3\u5e74\u3068\u30aa\u30fc\u30d7\u30f3\u6708\u306b\u5206\u3051\u308b","91e4b2db":"## \u6570\u5024\u5909\u6570\u306e\u5206\u5e03\u78ba\u8a8d","63ae87b2":"## City\u3054\u3068\u306erevenue\u306e\u5e73\u5747\u5024\u3092\u7b97\u51fa","fec2d8fa":"\n## \u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30dd\u30fc\u30c8","97edc57b":"## \u540d\u7fa9\u5909\u6570\u3001\u9806\u5e8f\u5909\u6570\u3001\u9023\u7d9a\u5909\u6570\u306b\u5206\u3051\u308b\n\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306f\u5168\u3066\u540d\u7fa9\u5909\u6570\u3068\u5b9a\u7fa9\u3059\u308b\n","1b82a647":"\u30aa\u30fc\u30d7\u30f3\u6708\u306f\u3042\u307e\u308a\u5dee\u7570\u304c\u307f\u3089\u308c\u306a\u3044\u305f\u3081\u3001\u524a\u9664\u3059\u308b","1997ca83":"## \u540d\u7fa9\u5909\u6570\u306e\u5206\u5e03\u78ba\u8a8d","8634c389":"## \u76ee\u7684\u5909\u6570\u3067\u3042\u308brevenue\u306e\u8981\u7d04\u7d71\u8a08\u91cf\u3092\u8868\u793a","363de2b8":"* \u4e00\u90e8\u306e\u90fd\u5e02\u3067\u306f\u3001\u5e73\u5747\u53ce\u76ca\u304c500\u4e07\u3092\u8d85\u3048\u3066\u3044\u308b\u3002\n* \u307b\u3068\u3093\u3069\u306e\u90fd\u5e02\u3067200\u4e07\u304b\u3089400\u4e07\u306e\u9593\u3067\u3042\u308b\u3002\n* 2\u3064\u306e\u90fd\u5e02\u3067200\u4e07\u672a\u6e80\u3067\u3042\u308b\u3002\n* \u7dda\u5f62\u306a\u5024\u3068\u306a\u3063\u3066\u3044\u306a\u306e\u3067\u3001\u3053\u306e\u5217\u3067\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\n* \u751f\u6210\u3055\u308c\u305f\u5e73\u5747\u53ce\u76ca\u306b\u57fa\u3065\u3044\u3066\u90fd\u5e02\u3092\u30d3\u30cb\u30f3\u30b0(\u5e73\u5747\u53ce\u76ca\u3092100\u4e07\u5358\u4f4d)\u3059\u308b\u3002","d93be932":"### \u30ea\u30c3\u30b8\u56de\u5e30(Ridge)\n* \u57fa\u672c\u306f\u901a\u5e38\u306e\u7dda\u5f62\u56de\u5e30\n* \u904e\u5b66\u7fd2\u3092\u6291\u5236\u3059\u308b\u305f\u3081\u306b\u91cd\u307f\u306b\u5bfe\u3057\u3066\u30da\u30ca\u30eb\u30c6\u30a3\u304c\u4e0e\u3048\u3089\u308c\u308b\n* \u30da\u30ca\u30eb\u30c6\u30a3\u306b\u306f L2 \u6b63\u5247\u5316 \u304c\u4f7f\u308f\u308c\u308b\n* \u7a81\u51fa\u3057\u305f\u91cd\u307f\u304c\u51fa\u306b\u304f\u304f\u306a\u308b\n* \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u304c\u5c11\u306a\u3044\u5834\u5408\u306b\u6709\u52b9\n* \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u304c\u5927\u91cf\u306b\u3042\u308b\u5834\u5408\u306b\u306f\u52b9\u679c\u304c\u8584\u304f\u306a\u308b\n\n### \u30e9\u30c3\u30bd\u56de\u5e30(Lasso)\n* \u57fa\u672c\u306f\u901a\u5e38\u306e\u7dda\u5f62\u56de\u5e30\n* \u904e\u5b66\u7fd2\u3092\u6291\u5236\u3059\u308b\u305f\u3081\u306b\u91cd\u307f\u306b\u5bfe\u3057\u3066\u30da\u30ca\u30eb\u30c6\u30a3\u304c\u4e0e\u3048\u3089\u308c\u308b\n* \u30da\u30ca\u30eb\u30c6\u30a3\u306b\u306f L1 \u6b63\u5247\u5316 \u304c\u4f7f\u308f\u308c\u308b\n* \u3044\u304f\u3064\u304b\u306e\u91cd\u307f\u304c\u5b8c\u5168\u306b\uff10\u3068\u306a\u308b\n* \u91cd\u307f\u304c\uff10\u3068\u306a\u3063\u305f\u7279\u5fb4\u91cf\u306e\u5165\u529b\u306f\u7121\u8996\u3055\u308c\u308b\n* \u7279\u5fb4\u91cf\u304c\u591a\u304f\u3001\u91cd\u8981\u306a\u3082\u306e\u304c\u308f\u305a\u304b\u3057\u304b\u306a\u3044\u3068\u4e88\u60f3\u3055\u308c\u308b\u5834\u5408\u306b\u5411\u3044\u3066\u3044\u308b\n* \u7a81\u51fa\u3057\u305f\u91cd\u307f\u304c\u51fa\u306b\u304f\u304f\u306a\u308b\n\n### ElasticNet(ElasticNet)\n* \u30ea\u30c3\u30b8\u56de\u5e30\u3068Lasso\u304c\u7d44\u307f\u5408\u308f\u3055\u3063\u305f\u56de\u5e30\u3002\n* \u57fa\u672c\u306f\u901a\u5e38\u306e\u7dda\u5f62\u56de\u5e30\n* \u904e\u5b66\u7fd2\u3092\u6291\u5236\u3059\u308b\u305f\u3081\u306b\u91cd\u307f\u306b\u5bfe\u3057\u3066\u30da\u30ca\u30eb\u30c6\u30a3\u304c\u4e0e\u3048\u3089\u308c\u308b\n* \u6b63\u5247\u5316\u3068\u3057\u3066\u306e L1 \u3068 L2 \u304c\u7d44\u307f\u5408\u308f\u3055\u308c\u305f\u3082\u306e\n\n### K-\u8fd1\u508d\u6cd5(KNeighborsRegressor)\n* \u901a\u79f0 K-NN\uff08K-Nearest Neighbor Algorithm \u306e\u7565\u79f0\uff09\n* \u7279\u5fb4\u7a7a\u9593\u4e0a\u306b\u304a\u3044\u3066\u3001\u8fd1\u304f\u306b\u3042\u308b K\u500b \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u3046\u3061\u3001\u6700\u3082\u4e00\u822c\u7684\u306a\u30af\u30e9\u30b9\u306b\u5206\u985e\u3059\u308b\u3002\n* \u8ddd\u96e2\u306e\u7b97\u51fa\u306b\u306f\u3001\u4e00\u822c\u7684\u306b\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u8ddd\u96e2\u304c\u4f7f\u308f\u308c\u308b\u3002\uff08\u4ed6\u306b\u30de\u30f3\u30cf\u30c3\u30bf\u30f3\u8ddd\u96e2\u306a\u3069\u304c\u3042\u308b\uff09\n\n### \u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30bf\u30fc\u56de\u5e30(SVR)\n### \u52fe\u914d\u30d6\u30fc\u30b9\u30c6\u30a3\u30f3\u30b0(GradientBoostingRegressor)\n","c690125e":"## Optuna\u3067\u6700\u9069\u5316\u3055\u308c\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u4f7f\u7528\u3057\u3001\u30e2\u30c7\u30eb\u5b66\u7fd2\u3059\u308b\n","3c43660e":"## revenue\u3068\u76f8\u95a2\u306e\u9ad8\u3044\u5909\u6570\u30c8\u30c3\u30d710\u3092\u78ba\u8a8d\n","6f3268cb":"## City\u306b\u3064\u3044\u3066\u3001\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u91cd\u8907\u524a\u9664\u3057\u3001\u30ea\u30b9\u30c8\u5316","1db34c0d":"## \u6570\u5024\u5909\u6570\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u95a2\u4fc2\u3092\u78ba\u8a8d","054393b8":"## \u30e6\u30cb\u30fc\u30af\u6570\u3092\u8868\u793a","c13e0c9a":"## \u518d\u5ea6\u30c7\u30fc\u30bf\u3092\u5206\u5272","42ca6d39":"## \u5b66\u7fd2\u30c7\u30fc\u30c8\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u96c6\u7d04","e92a7805":"\u5bfe\u6570\u5909\u63db\u304c\u4e00\u756a\u826f\u3044\u306e\u3067\u3001\u5bfe\u6570\u5909\u63db\u3059\u308b\u3053\u3068\u306b\u3059\u308b\n","01a260ce":"## \u30c7\u30fc\u30bf\u306e\u6570\u5024\u9805\u76ee\u306e\u7d71\u8a08\u8981\u7d04\u91cf\u3092\u8868\u793a","9971d64f":"* id \uff1a\u30ec\u30b9\u30c8\u30e9\u30f3ID\u3002\n* \u30aa\u30fc\u30d7\u30f3\u65e5 \uff1a\u30ec\u30b9\u30c8\u30e9\u30f3\u306e\u30aa\u30fc\u30d7\u30f3\u65e5\n* City\uff1a \u30ec\u30b9\u30c8\u30e9\u30f3\u304c\u3042\u308b\u90fd\u5e02\u3002\u540d\u524d\u306b\u306fUnicode\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u3002\n* \u90fd\u5e02\u30b0\u30eb\u30fc\u30d7\uff1a \u90fd\u5e02\u306e\u30bf\u30a4\u30d7\u3002\u5927\u90fd\u5e02\u3001\u307e\u305f\u306f\u305d\u306e\u4ed6\u3002\n* \u30bf\u30a4\u30d7\uff1a\u30ec\u30b9\u30c8\u30e9\u30f3\u306e\u30bf\u30a4\u30d7\u3002FC\uff1a\u30d5\u30fc\u30c9\u30b3\u30fc\u30c8 \u3001IL\uff1a\u30a4\u30f3\u30e9\u30a4\u30f3\u3001DT\uff1a\u30c9\u30e9\u30a4\u30d6\u30b9\u30eb\u30fc\u3001MB\uff1a\u30e2\u30d0\u30a4\u30eb\n* P1\u3001P2-P37\uff1a\u3053\u308c\u3089 \u306e\u96e3\u8aad\u5316\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306b\u306f3\u3064\u306e\u30ab\u30c6\u30b4\u30ea\u304c\u3042\u308b\u3002\n    1. \u4eba\u53e3\u7d71\u8a08\u30c7\u30fc\u30bf\u306f\u3001GIS\u30b7\u30b9\u30c6\u30e0\u3092\u4f7f\u7528\u3057\u3066\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u306e\u30d7\u30ed\u30d0\u30a4\u30c0\u30fc\u304b\u3089\u53ce\u96c6\u3055\u308c\u308b\u3002\u3053\u308c\u3089\u306b\u306f\u3001\u7279\u5b9a\u306e\u5730\u57df\u306e\u4eba\u53e3\u3001\u5e74\u9f62\u3068\u6027\u5225\u306e\u5206\u5e03\u3001\u958b\u767a\u30b9\u30b1\u30fc\u30eb\u304c\u542b\u307e\u308c\u308b\u3002\n    1. \u4e0d\u52d5\u7523\u30c7\u30fc\u30bf\u306f\u3001\u4e3b\u306b\u5834\u6240\u306em2\u3001\u5834\u6240\u306e\u6b63\u9762\u30d5\u30a1\u30b5\u30fc\u30c9\u3001\u99d0\u8eca\u5834\u306e\u7a7a\u304d\u72b6\u6cc1\u306b\u95a2\u9023\u3057\u3066\u3044\u308b\u3002\n    1. \u5546\u696d\u30c7\u30fc\u30bf\u306b\u306f\u3001\u4e3b\u306b\u5b66\u6821\u3001\u9280\u884c\u3001\u305d\u306e\u4ed6\u306eQSR\u30b9\u30ad\u30e3\u30ca\u30fc\u3092\u542b\u3080\u95a2\u5fc3\u306e\u3042\u308b\u30dd\u30a4\u30f3\u30c8\u306e\u5b58\u5728\u304c\u542b\u307e\u308c\u308b\u3002\n* \u53ce\u76ca\uff1a \u53ce\u76ca\u306e\u5217\u306f\u3001\u7279\u5b9a\u306e\u5e74\u306e\u30ec\u30b9\u30c8\u30e9\u30f3\u306e\uff08\u5909\u63db\u3055\u308c\u305f\uff09\u53ce\u76ca\u3092\u793a\u3057\u3001\u4e88\u6e2c\u5206\u6790\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\u3067\u3042\u308b\u3002\n","e4a9fb7b":"P\u5909\u6570(P1\uff5eP37)\u306e\u3046\u3061\u3001\u3069\u308c\u304b\u304c\u5730\u7406\u7684\u5c5e\u6027\u3067\u3042\u308b\u3068\u8a18\u8f09\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001City\u3054\u3068\u306bP\u5909\u6570\u306e\u5909\u6570\u306e\u5e73\u5747\u5024\u306e\u5e73\u5747\u3092\u3068\u308a\u3001\u5909\u5316\u91cf\u304c\u591a\u3044(\u5206\u6563\u304c\u5927\u304d\u3044)P\u5909\u6570\u3092\u4f7f\u7528\u3057(\u305d\u308c\u304c\u5730\u7406\u7684\u5c5e\u6027\u3092\u8868\u3057\u3066\u3044\u308b\u3068\u307f\u306a\u3057)\u3001\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u3002","aab59799":"## \u5916\u308c\u5024\u3092\u8868\u793a","19b35191":"## \u5171\u901a\u306eCity\u3092\u62bd\u51fa","022fb75d":"## revenue\u3092\u6a19\u6e96\u5316(\u5e73\u57470, \u5206\u65631)","e903029a":"## \u3069\u3061\u3089\u304b\u306b\u3057\u304b\u306a\u3044City\u3092\u62bd\u51fa\n","069bdcaa":"## \u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u3066City\u5dee\u7570\u304c\u306a\u3044\u304b\u78ba\u8a8d","cb469512":"* \u6570\u5024\u578b\u5909\u6570\u306e\u6b6a\u5ea6\u3092\u8abf\u3079\u3066\u3001\u6b6a\u5ea6\u304c\u4e00\u5b9a\u5024\u3092\u8d85\u3048\u308b\u5909\u6570\u3092\u5bfe\u6570\u5909\u63db\u3059\u308b\n* \u6b6a\u5ea6\u304c10\u4ee5\u4e0a\u306e\u5909\u6570\u3092\u5bfe\u8c61\u306b\u5bfe\u6570\u5909\u63db\u3067\u5de6\u53f3\u5bfe\u79f0\u306b\u8fd1\u3065\u3051\u308b","6d17dd7b":"## revenue\u3092\u5bfe\u6570\u5909\u63db","52211b01":"## \u540d\u7fa9\u5909\u6570\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u95a2\u4fc2\u3092\u78ba\u8a8d\n\u540d\u7fa9\u5909\u6570\u3068\u3057\u3066\u5206\u3051\u305f\u5909\u6570\u306e\u4e2d\u3067\u3001\u91cd\u307f\u4ed8\u3051\u304c\u5fc5\u8981\u306a\u5909\u6570\u304c\u7121\u3044\u304b\u78ba\u8a8d","2498e1a5":"## \u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u518d\u5206\u5272","31e3285e":"## \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u578b\u306e\u30ec\u30b3\u30fc\u30c9\u6570\u3001\u30e6\u30cb\u30fc\u30af\u6570\u3001\u6700\u983b\u5024\u306e\u51fa\u73fe\u56de\u6570\u3092\u8868\u793a","5d597c17":"# 3.\u8aac\u660e\u5909\u6570\u306e\u78ba\u8a8d","39b02191":"##  \u30c7\u30fc\u30bf\u578b\u3092\u78ba\u8a8d","13cd1f55":"\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u3057\u304b\u306a\u3044City\u304c29\u4ef6\u5b58\u5728\u3059\u308b\u305f\u3081\u3001\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3092\u4f7f\u7528\u3057\u3001\u5b58\u5728\u3057\u306a\u3044City\u306b\u3064\u3044\u3066\u88dc\u5b8c\u3059\u308b\u3002"}}