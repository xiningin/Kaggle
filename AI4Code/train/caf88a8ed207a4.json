{"cell_type":{"f0e07cb1":"code","7babfec3":"code","b826d920":"code","7e67c379":"code","102aa8bf":"code","7913edfe":"code","3ce3bef5":"code","3ae55879":"code","fac00f5c":"code","bdea72b7":"code","9177c594":"code","eb589713":"code","68b71861":"code","69a38ecd":"code","1eb950e2":"code","4f7e9c34":"code","11c5a3f6":"code","d010a8bc":"code","2daa3162":"code","89bf3008":"code","ee40d653":"code","e8afbbd5":"code","fa17b0c4":"code","7749c762":"code","dc115200":"code","74ed8e3a":"markdown","81876432":"markdown","70acca86":"markdown","c0d4a20a":"markdown","207094dc":"markdown","5de5a8c9":"markdown","6aa6e511":"markdown","e58d881d":"markdown","02c191e0":"markdown","f8432487":"markdown","dd59ab59":"markdown","f55c7e61":"markdown","5f15b75e":"markdown","2458a548":"markdown"},"source":{"f0e07cb1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7babfec3":"import missingno as msno\nfrom math import sqrt\n\nimport matplotlib.pyplot as plt \nimport seaborn as sns \nfrom termcolor import colored \n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import StandardScaler\n\nimport tensorflow \nimport keras\nfrom keras.models import Sequential\nfrom keras import layers\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras import layers, callbacks\n","b826d920":"teams = pd.read_csv('..\/input\/ipl-2020-player-performance\/IPL 2020 Squads.csv',encoding='latin1')\nmatch2020 = pd.read_csv('..\/input\/ipl-2020-player-performance\/Matches IPL 2020.csv')\nmatch = pd.read_csv('..\/input\/ipl-2020-player-performance\/Matches IPL 2008-2019.csv')\ntrain = pd.read_csv('..\/input\/ipl-2020-player-performance\/Training.csv')","7e67c379":"print('*'*50)\nprint(colored('TEAMS','red'))\nprint(teams.info())\nprint('*'*50)\nprint(colored('MATCHS IN 2020','red'))\nprint(match2020.info())\nprint('*'*50)\nprint(colored('MATCHS 2008-2019','red'))\nprint(match.info())\nprint('*'*50)\nprint(colored('TRAINING DATA','red'))\nprint(train.info())","102aa8bf":"train.head(20)\n","7913edfe":"plt.figure(figsize=(15,10))\nplt.subplot(2,3,1)\nsns.scatterplot(x='Runs',y='Batting_Points',data=train)\nplt.subplot(2,3,2)\nsns.scatterplot(x='Boundaries',y='Batting_Points',data=train)\nplt.subplot(2,3,3)\nsns.scatterplot(x='Six',y='Batting_Points',data=train)\nplt.subplot(2,3,4)\nsns.barplot(x='Fifty',y='Batting_Points',data=train)\nplt.subplot(2,3,5)\nsns.barplot(x='Hundred',y='Batting_Points',data=train)\nplt.subplot(2,3,6)\nsns.barplot(x='Duck',y='Batting_Points',data=train)","3ce3bef5":"plt.figure(figsize=(15,10))\nplt.subplot(2,3,1)\nsns.scatterplot(x='Runs',y='Bowling_Points',data=train)\nplt.subplot(2,3,2)\nsns.scatterplot(x='Boundaries',y='Bowling_Points',data=train)\nplt.subplot(2,3,3)\nsns.scatterplot(x='Six',y='Bowling_Points',data=train)\nplt.subplot(2,3,4)\nsns.barplot(x='Fifty',y='Bowling_Points',data=train)\nplt.subplot(2,3,5)\nsns.barplot(x='Hundred',y='Bowling_Points',data=train)\nplt.subplot(2,3,6)\nsns.barplot(x='Duck',y='Bowling_Points',data=train)","3ae55879":"plt.figure(figsize=(15,10))\nplt.subplot(2,2,1)\nsns.scatterplot(x='Wickets',y='Batting_Points',data=train)\nplt.subplot(2,2,2)\nsns.barplot(x='4W_Haul',y='Batting_Points',data=train)\nplt.subplot(2,2,3)\nsns.barplot(x='5W_Haul',y='Batting_Points',data=train)\nplt.subplot(2,2,4)\nsns.barplot(x='Maidens',y='Batting_Points',data=train)","fac00f5c":"plt.figure(figsize=(15,10))\nplt.subplot(2,2,1)\nsns.scatterplot(x='Wickets',y='Bowling_Points',data=train)\nplt.subplot(2,2,2)\nsns.barplot(x='4W_Haul',y='Bowling_Points',data=train)\nplt.subplot(2,2,3)\nsns.barplot(x='5W_Haul',y='Bowling_Points',data=train)\nplt.subplot(2,2,4)\nsns.barplot(x='Maidens',y='Bowling_Points',data=train)","bdea72b7":"plt.figure(figsize=(15,5))\nplt.subplot(1,2,1)\nsns.scatterplot(x='Batting_Points',y='Total Points',data=train)\nplt.subplot(1,2,2)\nsns.scatterplot(x='Bowling_Points',y='Total Points',data=train)\n","9177c594":"plt.figure(figsize=(30,10))\nplt.subplot(2,4,1)\nsns.boxplot(x='Total Points',data=train)\nplt.subplot(2,4,2)\nsns.boxplot(x='Bowling_Points',data=train)\nplt.subplot(2,4,3)\nsns.boxplot(x='Batting_Points',data=train)\nplt.subplot(2,4,4)\nsns.boxplot(x='Runs',data=train)\nplt.subplot(2,4,5)\nsns.boxplot(x='Boundaries',data=train)\nplt.subplot(2,4,6)\nsns.boxplot(x='Six',data=train)\nplt.subplot(2,4,7)\nsns.boxplot(x='Wickets',data=train)\n","eb589713":"def Outlier(col_name,quantile):\n    uiqr = np.percentile(train[str(col_name)],quantile)\n    print('Capping outlier to value {}'.format(uiqr))\n    filt = train[str(col_name)] > uiqr\n    train.loc[filt,:] = uiqr\n    \n    return sns.boxplot(x=str(col_name),data=train)","68b71861":"plt.figure(figsize=(30,10))\nplt.subplot(2,3,1)\nOutlier('Total Points',95)\nplt.subplot(2,3,2)\nOutlier('Bowling_Points',90)\nplt.subplot(2,3,3)\nOutlier('Batting_Points',95)\nplt.subplot(2,3,4)\nOutlier('Runs',95)\nplt.subplot(2,3,5)\nOutlier('Boundaries',87)","69a38ecd":"train.columns","1eb950e2":"train['Id']","4f7e9c34":"train['Id'] = np.array(train['Id'].str.split(' ',expand=True))\ntrain.head(10)","11c5a3f6":"train.drop(train[train['Id'].isnull() == True].index, inplace = True) \n","d010a8bc":"train.head()","2daa3162":"x=np.array(train.iloc[:,1:-1])\ny=np.array(train.iloc[:,-1])","89bf3008":"train_x,val_x,train_y,val_y = train_test_split(x,y,test_size=0.2,random_state=0)","ee40d653":"print(train_x.shape)\nprint(val_x.shape)\nprint('*'*30)\nprint(train_y.shape)\nprint(val_y.shape)","e8afbbd5":"model = LinearRegression()\nmodel.fit(train_x,train_y)\npred_y = model.predict(val_x)","fa17b0c4":"pred_y[2]","7749c762":"val_y[2]","dc115200":"sqrt(mean_squared_error(pred_y,val_y))","74ed8e3a":"### Problem Statement: We have the historical data of all IPL matches since the year 2008 this time we are trying to predict the player performance of each player who participated in the IPL \n\n### Libraries Used:\n* Pandas : Pandas is used for data manipulating and to slice and index the tabular dataframe. \n* Numpy : Numpy is being used to convert the dataframe into a array of numbers because the model accepts only numeric data \n* missigno : This library is used to check for null values in the given data. Since the presence of null values leads to poor performance of model\n* Matplotlib and Seaborn : These libraries are used for data visualization ie to present the numeric data in a graphical manner making it easy to interpret \n* Sklearn : This library form the brain of our machine learning model. Using the we import the Linear Regression model and the metrics to evaluate our model ie mean_squared_error. Further we also use train_test_split to split our data into training and validation set. We will talk more about this as you scroll down \n\n#### This whole model is build using python because of the following reasons:\n* Python is open source language \n* Because of its high compatablility with various modules and libraries it is the most suitable language for data analytics and machine learning applications\n* Python Code are easier to understand and interpret compared to any other programming language ","81876432":"#### Used numpy library to convert the dataframe in to numerical arrays. Further assigned the dependent variables to the variable x and independent variable to y ","70acca86":"# Exploratory Data Analysis\n\n### This section will provide us insights about the following information:\n* Defining the target variable \n* Defining the dependent variables \n* Finding the relation between dependent and independent variables ","c0d4a20a":"### Bivariate Analysis \n#### Finding the relation between all the dependent variables against the independent or target variable","207094dc":"Below is information stored in the four tables ie teams ,match2020,match and train along with the number of rows and columns, number of null values in each column and its corresponding datatypes. There are mainly 2 data types being discussed here Object and integer ","5de5a8c9":"### Importing Libraries ","6aa6e511":"### Insights:\n\n* The batting score is linearly depended on Runs scored , Boundaries , Sixs , Hundreds , Fiftys and Duck outs.\n* The bowlings score is also linearly related to Runs scored , Boundaries , Sixs , Hundreds , Fiftys and Duck outs. \n* Batting score shows negative correlation with Wickets takes, 4W haul, 5W haul and maiden overs. \n* Bowling Score shows positive correlation with wickets takes , 4W Haul, 5W Haul and Maiden overs \n","e58d881d":"# Linear Regression \n#### Since there exists a linear relation between the dependent and independent variable we choose the linear regression model to perform the prediction task. This model accepts numeric values and tunes its weights in order to form a generalised polynomial equation that can evaluate the value of y. \n","02c191e0":"# Loading Datasets ","f8432487":"# INDIAN PREMIER LEAGUE (IPL)\n\n### The Indian Premier League (IPL) is a professional Twenty20 cricket league in India usually contested between March and May of every year by eight teams representing eight different cities or states in India. The league was founded by the Board of Control for Cricket in India (BCCI) in 2007.\n\n### Teams \n* Mumbai Indians\n* Chennai Super Kings\n* Sunrisers Hyderabad\n* Kings XI Punjab \n* Delhi Captians\n* Rajasthan Royals \n* Kolkatta Knight Riders\n* Royal Challengers Banglore","dd59ab59":"#### Here we divide the hundred percent of training data into 80% train and 20% validation data using train_test_split method from sklearn library. We train the model on 80% of the training data and test the model on rest of the 20% of validation data which is new to the model. Then compare the prediction wi","f55c7e61":"## Outlier Treatment","5f15b75e":"#### Since the model accepts only numeric data and the columns Id from train dataset is object data type we cannot feed it to the model. Hence i first split the id column info id and surename and dropped the column.","2458a548":"## Univariate Analysis\n* Here we look for outliers in continuous data and cap some of them to 95 or 90 percent of the maximum value. The presence of outlier cause the model to learn extreme values and overfit the training data. To generalise the data well it is good to remove outliers before feeding data to the mode\n\n* We use boxplot from seaborn library to show the presence of outliers in data"}}