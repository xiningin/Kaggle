{"cell_type":{"7b97359e":"code","7f07a791":"code","9c36a909":"code","103a2716":"code","ea3e9f83":"code","9a695c93":"code","1069e3f5":"code","5e3b7ab1":"code","818f6b54":"markdown","e5e76547":"markdown","5c19150c":"markdown","ce88e7bd":"markdown","1c2369af":"markdown"},"source":{"7b97359e":"import pandas as pd\nimport numpy as np\n\nimport janestreet\n\nfrom tqdm.notebook import tqdm\n\nimport tensorflow as tf\ntf.random.set_seed(73)\nimport tensorflow.keras.layers as layers","7f07a791":"train = pd.read_csv('\/kaggle\/input\/jane-street-market-prediction\/train.csv', nrows = 3)\nfeatures = [c for c in train.columns if 'feature' in c]","9c36a909":"def create_mlp(num_columns, num_labels, hidden_units, dropout_rates, label_smoothing, learning_rate):\n    \n    inp = tf.keras.layers.Input(shape = (num_columns, ))\n    x = tf.keras.layers.BatchNormalization()(inp)\n    x = tf.keras.layers.Dropout(dropout_rates[0])(x)\n    for i in range(len(hidden_units)): \n        x = tf.keras.layers.Dense(hidden_units[i])(x)\n        x = tf.keras.layers.BatchNormalization()(x)\n        x = tf.keras.layers.Activation(tf.keras.activations.swish)(x)\n        x = tf.keras.layers.Dropout(dropout_rates[i+1])(x)    \n        \n    x = tf.keras.layers.Dense(num_labels)(x)\n    out = tf.keras.layers.Activation('sigmoid')(x)\n    \n    model = tf.keras.models.Model(inputs = inp, outputs = out)\n    model.compile(optimizer = tf.keras.optimizers.Adam(learning_rate = learning_rate),\n                  loss = tf.keras.losses.BinaryCrossentropy(label_smoothing = label_smoothing), \n                  metrics = tf.keras.metrics.AUC(name = 'AUC'), \n                 )\n    \n    return model","103a2716":"batch_size = 4096\nhidden_units = [256, 512, 128]\ndropout_rates = [0.10, 0.2, 0.3]\nlabel_smoothing = 1e-2\nlearning_rate = 1e-3","ea3e9f83":"num_models = 2\n\nmodels = []\nfor i in range(num_models):\n    clf = create_mlp(len(features), 1, hidden_units, dropout_rates, label_smoothing, learning_rate)\n    clf.load_weights(f'..\/input\/js-nn-models\/JSModel_{i}.hdf5')\n#     clf.load_weights(f'.\/JSModel_{i}.hdf5')\n    models.append(clf)","9a695c93":"f_mean = np.load('..\/input\/js-nn-models\/f_mean.npy')\n# f_mean = np.load('.\/f_mean.npy')","1069e3f5":"env = janestreet.make_env()\nenv_iter = env.iter_test()","5e3b7ab1":"opt_th = 0.5\nfor (test_df, pred_df) in tqdm(env_iter):\n    if test_df['weight'].item() > 0:\n        x_tt = test_df.loc[:, features].values\n        if np.isnan(x_tt[:, 1:].sum()):\n            x_tt[:, 1:] = np.nan_to_num(x_tt[:, 1:]) + np.isnan(x_tt[:, 1:]) * f_mean\n        pred = 0.\n        for clf in models:\n            pred += clf(x_tt, training = False).numpy().item() \/ num_models\n#         pred = models[0](x_tt, training = False).numpy().item()\n        pred_df.action = np.where(pred >= opt_th, 1, 0).astype(int)\n    else:\n        pred_df.action = 0\n    env.predict(pred_df)","818f6b54":"# Jane Street: Neural Network Starter\n\nI have used Jane Street: Neural Network Starter notebook. The purpose is to understand the source code.","e5e76547":"# Load Models","5c19150c":"# Preprocessing","ce88e7bd":"# Training","1c2369af":"# Submitting\n\nJust use two models to reduce running time."}}