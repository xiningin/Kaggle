{"cell_type":{"85f71040":"code","96d980bc":"code","0c997b7d":"code","66e1508a":"code","acaf28d1":"code","f1ef6266":"code","91921104":"code","24b922d5":"code","af7970ed":"code","d50b013b":"code","fda0bc94":"code","aa093fc6":"code","3e6d80b1":"code","61a642ee":"code","9bcb174d":"code","3257b76c":"code","cc152dfa":"code","aadbb2cd":"code","789412b3":"code","b2fb8c9b":"code","0b78d67b":"code","cc5ee937":"code","d6d14cc7":"code","537d4371":"code","ed8abbf6":"code","3c493560":"code","6ac05dec":"code","9cb7f044":"code","9d3c54a3":"code","e8221ead":"code","e6026ea7":"code","d82fe61e":"code","734c383e":"code","b720f42d":"code","1814afc5":"code","2a6d8684":"markdown","44059783":"markdown","15c11300":"markdown","c8c9b56b":"markdown","1a97fa85":"markdown","ea16d8b3":"markdown","e1235ac1":"markdown","5acf7329":"markdown","5b4a746d":"markdown","01e0a4a2":"markdown","be830cbc":"markdown","5987da5a":"markdown","3d0279aa":"markdown","92e85304":"markdown","8731ee03":"markdown","c589c23e":"markdown"},"source":{"85f71040":"!pip freeze | grep pandas","96d980bc":"import warnings\nwarnings.filterwarnings(\"ignore\")\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport plotly.express as px\nimport pandas_profiling\nfrom IPython.display import display, HTML, IFrame","0c997b7d":"# This is our main dataset\ndf = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\ndf.head()","66e1508a":"df.shape","acaf28d1":"df1 = df.copy()","f1ef6266":"df = df1.copy()","91921104":"df.columns","24b922d5":"#@title Changing columns names","af7970ed":"df.columns = ['sr', 'date', 'time', 'state', 'is_indian', 'is_foreigner', 'cured', 'deaths', 'positive']\ndf.columns","d50b013b":"df.state.value_counts()","fda0bc94":"# Above we see that there are few values which are not states and some are reapeted\n# Unassigned &  Cases being reassigned to states are not states, hence lets drop them\n# Lets merge 'Dadar Nagar Haveli & 'Daman & Diu' in 'Dadra and Nagar Haveli and Daman and Diu'\n\ndf['state'] = df.state.replace({'Dadar Nagar Haveli': 'Dadra and Nagar Haveli and Daman and Diu'})\ndf['state'] = df.state.replace({'Daman & Diu': 'Dadra and Nagar Haveli and Daman and Diu'})\n\ndf['state'] = df.state.replace({'Cases being reassigned to states': np.nan})\ndf['state'] = df.state.replace({'Unassigned': np.nan})\n\ndf['state'].value_counts()","aa093fc6":"#@title Missing values\ndf.isna().sum()","3e6d80b1":"df.is_indian.unique()","61a642ee":"# There is a '-' value in feature is_indian which means missing value","9bcb174d":"df.is_indian.value_counts()","3257b76c":"# We see '-' missing value is more 90%","cc152dfa":"df.is_foreigner.unique()","aadbb2cd":"# There is a '-' value in feature is_foreigner which needs to be dropped ","789412b3":"df.is_foreigner.value_counts()","b2fb8c9b":"# We see '-' missing value is more 90%","0b78d67b":"# We see that is_indian and is_foreigner which provided data on how many Indian or Foreigners are effected has \n# missing values more then 90%, hence lets drop the features\n\ndf = df.drop(['is_indian', 'is_foreigner'], axis=1)\ndf.shape","cc5ee937":"# Lest drop nan values\ndf = df.dropna()\ndf.shape","d6d14cc7":"df2 = df.copy()","537d4371":"df = df2.copy()","ed8abbf6":"# Lets work in the date feature\n# The date feature has few values with 2 digit day and month (ex- 01 & 1) and some has 1 digit values\n# The year has few values of 4 digits YYYY and few with 2 digits YY\n# Hence dorectly applying the pd.datetime function will create different dates which are actually not there in the database (bug)\n# so we will split the string date into day, month & year and then convert them to int\n\n# Splitting the string data\nnew_date = df['date'].str.split('\/', 2, expand=True)\ndf['day'] = new_date[0]\ndf['month']= new_date[1]\ndf['year'] = new_date[2]\n\n# Comnverting data type\ndf['day'] = df['day'].astype(int)\ndf['month'] = df['month'].astype(int)\ndf['year'] = df['year'].astype(int)\n\ndf.head()","3c493560":"# Lets equilize the year column\n\ndf['year'] = df['year'].apply(lambda x: 2020 if x < 30 else 2020 )\ndf['year'].values","6ac05dec":"# Now all the values in the year column is 2020\n# Now to get the month name , lets merge the day, month and year to make ot datetime\n\ndf['date'] = pd.to_datetime(df[['day', 'month', 'year']])\ndf['Month'] = df['date'].dt.month_name()\n\n# Lets drop day, month and year, since we have corrected date colum now\ndf = df.drop(['day', 'month', 'year'], axis=1)\n\ndf.head()","9cb7f044":"# Lets start by converting the data type to its correct \n\n# state & time to be converted to category\n\ndf['state'] = df['state'].astype('category')\ndf['time'] = df['time'].astype('category')\n\ndf.head()","9d3c54a3":"# Now lets convert Month to category  for data visulization pourpose\n\ndf['Month'] = df['Month'].astype('category')\n\ndf.info()","e8221ead":"jan = df[df['date']=='2020-01-31']\nfeb = df[df['date']=='2020-02-29']\nmar = df[df['date']=='2020-03-31']\napr = df[df['date']=='2020-04-30']\nmay = df[df['date']=='2020-05-31']\njun = df[df['date']=='2020-06-22']\n\nframe = [jan, feb, mar, apr, may, jun]\n\ndf = pd.concat(frame)\n\ndf.date.unique()","e6026ea7":"# Lets check the number of cases each month\n\nf, ax = plt.subplots(figsize=(10, 6))\nsns.barplot(x=df.Month.unique(), y=df.Month.value_counts()[:6].sort_values(ascending=True), data=df, color= 'blue')\nax.set_title('Number of Cases each month', fontsize= 20)\nax.set_xlabel('Months', fontsize=16)\nax.set_ylabel('Number of Positive cases', fontsize=16)\nplt.show()","d82fe61e":"# Lets check the number of cases statewise in the month of April 2020\n\n#Lets create a new dataframe only for the month of April2020\ndf_April = df[df['Month']=='April']\n\n# Creting a new dataframe with groupby\ndf_April_State = df_April.groupby(['state'], as_index=False)['positive'].agg('sum').sort_values('positive', ascending=False)\n\n# Lets plot the new dataframe\nf, ax = plt.subplots(figsize=(10, 10))\nsns.barplot(x='positive', y='state',\n            order=df_April_State['state'], data=df_April_State, color= 'blue', ax=ax)\nax.set_title('Number of cases statewise in the month of April 2020', fontsize= 20)\nax.set_ylabel('States\/UT', fontsize=16)\nax.set_xlabel('Number of Positive cases', fontsize=16)\nplt.close(2)\nplt.show()","734c383e":"df_cured = df.groupby(df['state'], as_index=False)['cured'].agg('sum').sort_values('cured', ascending=False)\n\nplt.figure(figsize=(10, 10))\n\nsns.barplot(x='cured', y='state', order=df_cured['state'], data=df_cured, color='blue')\nplt.title('Number of cases statewise in the month of April 2020', fontsize= 20)\nplt.ylabel('States\/UT', fontsize=16)\nplt.xlabel('Number of Positive cases', fontsize=16)\nplt.show()","b720f42d":"# Current Status\npositive = df['positive'].sum()\ncured = df['cured'].sum()\ndeaths =df['deaths'].sum()\ndata_pie = [positive, cured, deaths]\nplt.figure(figsize=(6, 6))\nfig = px.pie(data_frame= df, values=data_pie, names=['Positive Cases', 'Cured People', 'Deaths'],\n             title= 'Currrent status of Covid19 India')\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()\n","1814afc5":"# Monthwise graph of Number of positive cases found in last 6 months\ndf_month = df.groupby(df['Month'], as_index=False)['positive', 'cured', 'deaths'].agg('sum').sort_values(by='positive', ascending=True)\n\npx.bar(df_month, x='Month', y='positive', color='Month', \n          labels={'positive': 'Positive cases', 'cured': 'People cured', 'deaths': 'Deaths occured'},\n          hover_data= ['positive', 'cured', 'deaths'], title='Most number of cases\/cure\/deaths on Monthly basis', log_y=True)","2a6d8684":"## Most number of cases\/cure\/deaths on Monthly basis","44059783":"# Data Cleaning","15c11300":"# COVID19 Cases in India","c8c9b56b":"# Observation: \n\nIn the above data we see that the feartue 'positive' shows total number of positive cases up until a particular date, hence which means, at the end of every month, it will show the total number of positive cases, total cured and total deaths.\n\nSo to further analysis, we would take only the data of the last day of each month.","1a97fa85":"## Number of Cases each month","ea16d8b3":"## Feature Engineering","e1235ac1":"**Observation** As per the data we see that there were hardly 1 or 2 cases tested or diagnosed till February 2020. However,the real testing started in the month of March 2020 and we can also see a jump in the number of positive cases in the month of April 2020.","5acf7329":"### Converting Data Type","5b4a746d":"## Loading necessary packages","01e0a4a2":"# Conclusion\n\nWith the data above we can see the increase in the number of cases in last 6 months, based on states & months. We are also able to how the number of test increased in the later months. However, the data does not have much information to further analysis or do prediction. \n","be830cbc":"## Task\n\n**To find insights from the data**","5987da5a":"\n# Data Visualization","3d0279aa":"## Current status of Covid 19 in India","92e85304":"## Number of cases cured in each state\n\n","8731ee03":"## Number of Cases Statewise in the month April 2020","c589c23e":"## Attribute\n\n- Sno - Serial number\n- Date -  Date of diagnoses\n- State\/UnionTerritory\n- ConfirmedIndianNational \n- ConfirmedForeignNational\n- Cured\n- Deaths\n- Confirmed - confirmed positive\n"}}