{"cell_type":{"bf60f0c4":"code","aca9a73b":"code","2a5a32d6":"code","8492fb56":"code","f93537e5":"code","3eed9379":"code","d4b3a50c":"code","50a605d2":"code","5c0036f0":"code","3c64b052":"code","9d7d88e6":"code","abf4fb51":"code","548092e9":"code","37a39f80":"code","3a8632f9":"code","e9015fec":"code","00e28a30":"code","816f6861":"code","2c338836":"markdown","a1c1090d":"markdown","013c804c":"markdown","fe459204":"markdown","22d81476":"markdown","54619c66":"markdown","0636656c":"markdown","6d9fe1ed":"markdown","5c047803":"markdown","72027f0b":"markdown"},"source":{"bf60f0c4":"import numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\n\nfrom tensorflow.keras.datasets import mnist\n","aca9a73b":"(x_train , y_train) , (x_test , y_test) = mnist.load_data()\n\nx_train = x_train\/255.\nx_test = x_test\/255.\n\nx_train = np.reshape(x_train , (60000 , 784))\nx_test = np.reshape(x_test , (10000 , 784))","2a5a32d6":"x_train_noise = x_train + np.random.rand(60000 , 784)*0.9\nx_test_noise = x_test + np.random.rand(10000 , 784)*0.9\n\nx_train_noise = np.clip(x_train_noise , 0. , 1.)\nx_test_noise = np.clip(x_test_noise , 0. , 1.)","8492fb56":"def plot(x , pred , labels = False):\n    \n  plt.figure(figsize=(20 , 2))\n  for i in range(10):\n    plt.subplot(1 , 10 , i+1)\n    plt.imshow(x[i].reshape(28 , 28) , cmap='binary')\n    plt.xticks([])\n    plt.yticks([])\n    if labels:\n      plt.xlabel(np.argmax(pred[i]))\n  plt.show()\n\n\nplot(x_train , None)","f93537e5":"plot(x_test_noise , None)","3eed9379":"classifier_model = tf.keras.models.Sequential([\n                                                       tf.keras.layers.Dense(256 , activation = 'relu',\n                                                                             input_shape = (784,)),\n                                                       tf.keras.layers.Dense(256 , activation='relu'),\n                                                       tf.keras.layers.Dense(10 , activation = 'softmax')\n])\n\nclassifier_model.compile(optimizer = 'adam' , loss = 'sparse_categorical_crossentropy' , metrics=['accuracy'])\n\nclassifier_model.fit(x_train , y_train , batch_size = 512 , epochs = 10)","d4b3a50c":"# evaluating on test set\n\nloss , acc = classifier_model.evaluate(x_test , y_test)\nprint(acc)","50a605d2":"# evaluating on noisy test data \n\nloss , acc = classifier_model.evaluate(x_test_noise , y_test)\nprint(acc)","5c0036f0":"input_img = tf.keras.layers.Input(shape = (784,))\nencoder = tf.keras.layers.Dense(64 , activation = 'relu')(input_img)\ndecoder = tf.keras.layers.Dense(784 , activation='sigmoid')(encoder)\n\nAutoencoder = tf.keras.Model(input_img , decoder)\nAutoencoder.compile(optimizer = 'adam' , loss = 'binary_crossentropy')","3c64b052":"from tensorflow.keras.callbacks import EarlyStopping\n\nAutoencoder.fit(x_train_noise , x_train , \n                epochs = 100 ,\n                batch_size=512 ,\n                validation_split=0.2 , verbose = 1,\n                callbacks = [EarlyStopping(monitor = 'val_loss' , patience = 5)])\n","9d7d88e6":"predictions = Autoencoder.predict(x_test_noise)","abf4fb51":"plot(x_test_noise , None)","548092e9":"plot(predictions , None)","37a39f80":"loss , accuracy = classifier_model.evaluate(predictions , y_test)\nprint(accuracy)","3a8632f9":"Input_image = tf.keras.layers.Input(shape = (784,))\nx = Autoencoder(Input_image)\ny = classifier_model(x)\n\nmodel = tf.keras.Model(Input_image , y)","e9015fec":"preds = model.predict(x_test_noise)","00e28a30":"plot(x_test_noise , preds , True)","816f6861":"y_categ = tf.keras.utils.to_categorical(y_test)\n\nplot(x_test , y_categ , True)","2c338836":"# building and training the classifier","a1c1090d":"# loading and processing the data","013c804c":"# now building the full model","fe459204":"we can see that the accuracy on noisy data is bad","22d81476":"# building the autoencoder","54619c66":"# adding noise to the images","0636656c":"# now we want to test predicted image with our first model ","6d9fe1ed":"# prediction","5c047803":"# plotting the noisy images with the actual valuse","72027f0b":"# plotting the noisy images with the predictions"}}