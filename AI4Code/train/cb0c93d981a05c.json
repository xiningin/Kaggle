{"cell_type":{"dd065be5":"code","374ab91a":"code","a12a56c2":"code","7568a7c0":"code","343bc381":"code","fdedc8fc":"code","fd8d11ab":"code","f59362b4":"code","cc356d03":"code","365ce3e2":"code","6a7c580b":"code","51b2d5ce":"code","1132baa9":"markdown","61505a58":"markdown","4848682b":"markdown","7a046072":"markdown","01b51995":"markdown","6719c20c":"markdown","03392dc2":"markdown","428e02ee":"markdown","1fc2ae32":"markdown","0d472534":"markdown","23e4a104":"markdown","57942c25":"markdown","b2c7a319":"markdown","128f8800":"markdown"},"source":{"dd065be5":"!pip install pyramid-arima","374ab91a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \nimport pyramid.arima\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.tsa.stattools import acf, pacf\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom sklearn.metrics import mean_squared_error\nimport pandas as pd\nfrom pandas.plotting import autocorrelation_plot\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom tqdm import tqdm\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\ntest = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-2\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-2\/train.csv\")\n\n# Any results you write to the current directory are saved as output.\ntrain.head()","a12a56c2":"test.head(10)","7568a7c0":"confirmed_total_date = train.groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date = train.groupby(['Date']).agg({'Fatalities':['sum']})\nfig, ax = plt.subplots(1, figsize=(17,7))\nconfirmed_total_date.plot(ax=ax, color='orange')\nfatalities_total_date.plot(ax=ax,  color='red')\nax.set_title(\"Cases and fatalities\", size=13)\nax.set_ylabel(\"Number of cases\/fatalities\", size=13)\nax.set_xlabel(\"Date\", size=13)","343bc381":"no_countr = train['Country_Region'].nunique()\nno_province = train['Province_State'].nunique()\nno_countr_with_prov = len(train[train['Province_State'].isna()==False]['Country_Region'].unique())\ntotal_forecasting_number = no_province + no_countr - no_countr_with_prov+2\nno_days = train['Date'].nunique()\nprint('there are ', no_countr, 'unique Countries\/Regionions, each with ', no_days, 'days of data, all of them having the same dates. There are also ',no_province, 'Provinces\/States which can be found on ', no_countr_with_prov, 'countries\/ regions.' )","fdedc8fc":"plt.plot([i for i in range(no_days)], train['ConfirmedCases'].iloc[[i for i in range(0,no_days)]].values)\nplt.xlabel('No. of days since 2020-01-22')\nplt.ylabel('Cases')\nplt.title('Plotting cases for Afghanistan')\nplt.show()","fd8d11ab":"plt.plot([i for i in range(no_days)], train['ConfirmedCases'].iloc[[i for i in range(no_days*38,no_days*39)]].values)\nplt.xlabel('No. of days since 2020-01-22')\nplt.ylabel('Cases')\nplt.title('Plotting cases for the 39th country\/region')\nplt.show()","f59362b4":"df = confirmed_total_date.copy()\ndf = pd.DataFrame({'date': [df.index[i] for i in range(len(df))] , 'cases': df['ConfirmedCases'].values.reshape(1,-1)[0].tolist()})\ndfog = df.copy()\ndef l_regr(x,y):\n    model = LinearRegression().fit(x, y)\n    return model\n\nx = df['cases']\nx = x.drop(x.index[-1]).values.reshape((-1, 1))\ny = df['cases']\ny = y.drop(y.index[0])\nex_slope = l_regr(x,y).coef_\n\nd = 0\n\nfor i in range(1,5):\n    plt.plot(df['cases'])\n    plt.show()\n    plt.close()\n    df['prev_cases'] = df['cases'].shift(1)\n    df['cases'] = (df['cases'] - df['prev_cases'])\n    df = df.drop(['prev_cases'],axis=1)\n    df = df.drop(df.index[0])\n    x = df['cases']\n    x = x.drop(y.index[-1]).values.reshape((-1, 1))\n    y = df['cases']\n    y = y.drop(y.index[0])\n    model = l_regr(x,y)\n    if( abs(model.coef_) > ex_slope):\n        print('this is it! ', ex_slope)\n        break\n    d += 1\n    ex_slope = model.coef_\n    print(model.coef_)","cc356d03":"X = dfog['cases'].values\nsize = int(len(X) * 0.80)\nAtrain, Atest = X[0:size], X[size:len(X)]\nhistory = [x for x in Atrain]\npredictions = list()\nfor t in range(len(Atest)):\n    model = ARIMA(history, order=(1,2,0))\n    model_fit = model.fit(disp=0)\n    output = model_fit.forecast()\n    yhat = output[0]\n    predictions.append(yhat)\n    obs = Atest[t]\n    history.append(obs)\n    print('predicted=%f, expected=%f' % (yhat, obs))\nerror = mean_squared_error(Atest, predictions)\nprint('Test MSE: %.3f' % error)\n# plot\nplt.plot(Atest)\nplt.plot(predictions, color='red')\nplt.show()","365ce3e2":"\nindex = 1\ncases_pred= []\nfatalities_pred = []\npbar = tqdm(total=total_forecasting_number)\nwhile index < total_forecasting_number+3:\n    x = train['ConfirmedCases'].iloc[[i for i in range(no_days*(index-1),no_days*index)]].values\n    z = train['Fatalities'].iloc[[i for i in range(no_days*(index-1),no_days*index)]].values\n    \n    index += 1\n    \n    no_nul_cases = pd.DataFrame(x)\n    no_nul_cases = no_nul_cases[no_nul_cases.values != 0]\n    if(not no_nul_cases.empty):\n        X = [xi for xi in no_nul_cases.values]\n        try:\n            model = pyramid.arima.auto_arima(X,seasonal=True, m=12)\n            pred = model.predict(31)\n            pred = pred.astype(int)\n            pred = pred.tolist()\n        except:\n            model = l_regr(np.array([i for i in range(len(X))]).reshape(-1, 1),X)\n            pred = [(model.coef_*(len(X)+i) + model.intercept_).astype('int')[0][0] for i in range(1,32)]\n                \n    else:\n        pred = [0] * 31\n    pred = x[-12:].astype(int).tolist() + pred\n    cases_pred+=pred\n    \n    no_nul_fatalities = pd.DataFrame(z)\n    no_nul_fatalities = no_nul_fatalities[no_nul_fatalities.values != 0]\n    if(not no_nul_fatalities.empty):\n        Z = [zi for zi in no_nul_fatalities.values]\n        try:\n            model = pyramid.arima.auto_arima(Z, seasonal=False, m=12)\n            pred = model.predict(31)\n            pred = pred.astype(int)\n            pred = pred.tolist()\n        except:\n            model = l_regr(np.array([i for i in range(len(Z))]).reshape(-1, 1),Z)\n            pred = [(model.coef_*(len(Z)+i) + model.intercept_).astype('int')[0][0] for i in range(1,32)]\n    else:\n        pred = [0] * 31\n    pred = z[-12:].astype(int).tolist() + pred\n    fatalities_pred+=pred\n    pbar.update(1)\npbar.close()","6a7c580b":"if(len(fatalities_pred) == len(test)):\n    print('the length of fatalities_pred and cases_pred is the same as the length of test')","51b2d5ce":"submission = pd.DataFrame({'ForecastId': [i for i in range(1,len(cases_pred)+1)] ,'ConfirmedCases': cases_pred, 'Fatalities': fatalities_pred})\nfilename = 'submission.csv'\nsubmission.to_csv(filename,index=False)","1132baa9":"## We got a pretty good result, now let's implement ARIMA for every country\/region","61505a58":"**For simplicity I will chose the other two variables to be 1 and 0**","4848682b":"**We see again the same type of graph, ** <br><br>\n## Now let's try and apply ARIMA on our global cases graph","7a046072":"## 1. **Importing the data and visualizing it**","01b51995":"# ARIMA model for forecasting COVID-19 cases and fatalities","6719c20c":"**For example we have Afghanistan**","03392dc2":"### Plotting data for countries","428e02ee":"**Just by looking at our data we can see that:**","1fc2ae32":"**Now let's plot the cases and fatalities at a global level**","0d472534":"**and test set head is**","23e4a104":"### **The rate of change of the cases number seems to look like the rate of change of an exponential function. This may give us a clue on how to approch this forecasting method**\nMy approach would be to fit a model for every country. Because the desiese is pretty new, we don't have a large dataset ( 500+ rows ) of cases for every country, so my approach would be to use a classical forecating method, namely ARIMA for our forecast.\n<br>\n<br>\nFirst of all, the ARIMA algorithm needs some parameters for creating and fitting the model. Luckly there are already built algorithms like auto-arima by pyramid-arima that calculate those parameter automatically.\n<br>\n<br>\nWe can now look at cases per country and try to gain some insight","57942c25":"**We see a graph that also looks close to an exponential function, let's take another one**","b2c7a319":"### Here we tried to differentiate our data to make it stationary. We did that by fitting a linear regression and getting the slope of the calculated line. this gives us the second parameter for our ARIMA algorithm which is 2, as we differentiated the data 2 times.","128f8800":"**For example a randome one**"}}