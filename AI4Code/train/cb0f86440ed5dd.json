{"cell_type":{"fb4ec9f6":"code","f230fe80":"code","8959adbf":"code","ab122685":"code","4d346d36":"code","528ea0ab":"code","33b7215e":"code","c946600c":"code","aacbf524":"code","1ddf11e9":"code","b94c3eee":"code","4106dc6b":"code","9e1fe2de":"code","3693c261":"code","f4a6cd39":"code","9da3d41c":"code","6c3f029e":"code","204fed94":"code","6b6a8e77":"code","57d969d1":"code","7e401730":"code","94ba98e7":"code","11debb8c":"code","c441a9fb":"code","cf3b1f21":"code","8f569347":"code","108a2dca":"markdown","4f7c1788":"markdown","ebbb5383":"markdown","2230cdde":"markdown","b1ca0f12":"markdown","ee84f09b":"markdown","ed69ec0f":"markdown","b1bb23f1":"markdown","5351fc64":"markdown","5bd5fc57":"markdown","b4f2883f":"markdown","e4d4e7b9":"markdown","5d6f7a39":"markdown"},"source":{"fb4ec9f6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f230fe80":"import pandas as pd\nimport numpy as np\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","8959adbf":"df = pd.read_csv(\"..\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv\")\ndf.head(5)","ab122685":"#checking NaN value\ndf.info()","4d346d36":"df['quality'].value_counts()","528ea0ab":"#Change the type of target to object type\nbins = (2,5.5,8)\ngroup_names = ['bad','good']\ncategories = pd.cut(df['quality'], bins, labels = group_names)\ndf['quality'] = categories","33b7215e":"df['quality'].value_counts()","c946600c":"X = df.drop('quality', axis=1)\ny=df['quality']","aacbf524":"#encode y(target)\nfrom sklearn.preprocessing import LabelEncoder\nle_y = LabelEncoder()\ny = le_y.fit_transform(y)\ny","1ddf11e9":"#train\/test split\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=1)","b94c3eee":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","4106dc6b":"#construct a dict to store accuracies of different each model\nsvm_acc = {}","9e1fe2de":"from sklearn.svm import SVC\nsvm_rbf = SVC(kernel='rbf', random_state=0)\nsvm_rbf.fit(X_train, y_train)\nacc_svm_rbf = svm_rbf.score(X_test, y_test)*100\nsvm_acc['svm with rbf kernel'] = acc_svm_rbf\nprint(\"Test Accuracy of rbf kernel SVM:{:.2f}%\".format(acc_svm_rbf))","3693c261":"from sklearn.metrics import confusion_matrix\ny_hat_rbf = svm_rbf.predict(X_test)\n\ncm_rbf=confusion_matrix(y_test, y_hat_rbf)\nsns.heatmap(cm_rbf, annot=True, fmt='d', cmap=\"YlGnBu\")","f4a6cd39":"print(\"false predicting by rbf kernel:\", cm_rbf[1,0]+cm_rbf[0,1])","9da3d41c":"#Linear kernel svm\nsvm_li = SVC(kernel='linear', random_state=0)\nsvm_li.fit(X_train, y_train)\nacc_svm_li = svm_li.score(X_test, y_test)*100\nsvm_acc['svm with linear kernel'] = acc_svm_li\nprint(\"Test Accuracy of linear kernel SVM:{:.2f}%\".format(acc_svm_li))","6c3f029e":"y_hat_li = svm_li.predict(X_test)\n\ncm_li=confusion_matrix(y_test, y_hat_li)\nsns.heatmap(cm_li, annot=True, fmt='d', cmap=\"YlGnBu\")","204fed94":"print(\"false predicting by linear kernel:\", cm_li[1,0]+cm_li[0,1])","6b6a8e77":"#Polynomial kernel SVM\nsvm_poly = SVC(kernel='poly', random_state=0)\nsvm_poly.fit(X_train, y_train)\nacc_svm_poly = svm_poly.score(X_test, y_test)*100\nsvm_acc['svm with ploy kernel'] = acc_svm_poly\nprint(\"Test Accuracy of polynomial kernel SVM:{:.2f}%\".format(acc_svm_poly))","57d969d1":"y_hat_poly = svm_poly.predict(X_test)\n\ncm_poly=confusion_matrix(y_test, y_hat_poly)\nsns.heatmap(cm_poly, annot=True, fmt='d', cmap=\"YlGnBu\")","7e401730":"print(\"false predicting by polynomial kernel:\", cm_poly[1,0]+cm_poly[0,1])","94ba98e7":"#sigmoid kernel svm\nsvm_sig = SVC(kernel='sigmoid', random_state=0)\nsvm_sig.fit(X_train, y_train)\nacc_svm_sig = svm_sig.score(X_test, y_test)*100\nsvm_acc['svm with sigmoid kernel'] = acc_svm_sig\nprint(\"Test Accuracy of sigmoid kernel SVM:{:.2f}%\".format(acc_svm_sig))","11debb8c":"y_hat_sig = svm_sig.predict(X_test)\n\ncm_sig=confusion_matrix(y_test, y_hat_sig)\nsns.heatmap(cm_sig, annot=True, fmt='d', cmap=\"YlGnBu\")","c441a9fb":"print(\"false predicting by sigmoid kernel:\", cm_sig[1,0]+cm_sig[0,1])","cf3b1f21":"#transform dict svm_acc to a dataframe\nacc_svm_df = pd.DataFrame(svm_acc.items(), columns=['kernel', 'acc_score'])\nacc_svm_df.head()","8f569347":"#Visulize accuracy score for each kerel\nplt.figure(figsize=(18,8))\nax = sns.barplot(x='kernel', y='acc_score', data = acc_svm_df)","108a2dca":"# Data Processing\/ Target Encoding\/ Feature Processing","4f7c1788":"# Data Inputing\/Checking","ebbb5383":"**2.Linear kernel SVM**","2230cdde":"**Confusion matrix of RBF kernel SVM**","b1ca0f12":"# Import Libraries","ee84f09b":"**1.RBF kernel**","ed69ec0f":"**Confusion matrix of sigmoid kernel SVM**","b1bb23f1":"# Kernel comparing visualize","5351fc64":"**4.sigmoid kernel SVM**","5bd5fc57":"# Fit data with different kernel of SVM","b4f2883f":"**Confusion matrix of linear kernel SVM**","e4d4e7b9":"**3.Polynomial kernel SVM**","5d6f7a39":"**Confusion matrix of polynomial kernel SVM**"}}