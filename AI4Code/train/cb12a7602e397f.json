{"cell_type":{"c8ada5d3":"code","57e8d91e":"code","688dbe82":"code","5045a277":"code","69f87a4d":"code","b036ea92":"code","5d917c38":"code","aa554443":"code","9f73c450":"code","6f6dc4e7":"code","effc55eb":"code","10001999":"code","6836d683":"code","e1b8c3ed":"code","adb3c91d":"code","5098ee27":"code","6e650f36":"code","5c45fa73":"code","30ec904e":"code","e0932481":"markdown","b023f125":"markdown","aba6cc19":"markdown","bf9b3161":"markdown","bdd55079":"markdown","c4fa930b":"markdown","8a246cbd":"markdown","bfd9f24b":"markdown","20aaf51e":"markdown","1461f7b3":"markdown","dd6239fc":"markdown","ce147c1a":"markdown"},"source":{"c8ada5d3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nimport cv2\nimport matplotlib.pyplot as plt\nimport pydicom\nimport glob as glob\nfrom skimage import exposure\n%matplotlib inline\nimport seaborn as sns\nimport matplotlib\nfrom pydicom.pixel_data_handlers.util import apply_voi_lut\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","57e8d91e":"train_df = pd.read_csv('..\/input\/vinbigdata-chest-xray-abnormalities-detection\/train.csv')\ntrain_df.shape","688dbe82":"train_df.head(6)","5045a277":"train_df.info()","69f87a4d":"counts = train_df['class_name'].value_counts()\nplt.figure(figsize=(15,5))\ncounts.plot(kind='barh')\nplt.tight_layout()\nplt.show()","b036ea92":"dataset_dir = '..\/input\/vinbigdata-chest-xray-abnormalities-detection\/'\ntrain_imgs = '..\/input\/vinbigdata-chest-xray-abnormalities-detection\/train\/'\ntest_imgs = '..\/input\/vinbigdata-chest-xray-abnormalities-detection\/test\/'\n\nprint(\"Training samples : {} \".format(len(os.listdir(train_imgs))))\nprint(\"Test samples : {} \".format(len(os.listdir(test_imgs))))","5d917c38":"from sklearn.preprocessing import LabelEncoder\nfrom PIL import Image\n\nlbl = LabelEncoder()\ntrain_df['rad_label'] = lbl.fit_transform(train_df['rad_id'])\ntrain_df.head(5)","aa554443":"train_df.isna().sum().sum()","9f73c450":"def bbox_area(row):\n    return (row['x_max']-row['x_min'])*(row['y_max']-row['y_min'])\nfinding_df = train_df[train_df['class_name']!='No finding']\nfinding_df['bbox_area'] = finding_df.apply(bbox_area, axis=1)\nfinding_df.head()","6f6dc4e7":"def dicom_to_array(path, voi_lut=True, fix_monochrome=True):\n    dicom = pydicom.read_file(path)\n    \n    if voi_lut:\n        data = apply_voi_lut(dicom.pixel_array, dicom)\n    else:\n        data = dicom.pixel_array\n    if fix_monochrome and dicom.PhotometricInterpretation == 'MONOCHROME1':\n        data = np.amax(data) - data\n    data = data - np.min(data)\n    data = data \/ np.max(data)\n    data = (data*255).astype(np.uint8)\n    return data\n\ndef plot_imgs(imgs, cols=4, size=7, is_rgb=True, title=\"\", cmap='gray', img_size=(500,500)):\n    rows = len(imgs)\/\/cols + 1\n    fig = plt.figure(figsize=(cols*size, rows*size))\n    for i, img in enumerate(imgs):\n        if img_size is not None:\n            img = cv2.resize(img, img_size)\n        fig.add_subplot(rows, cols, i+1)\n        plt.imshow(img, cmap=cmap)\n    plt.suptitle(title)\n    plt.show()","effc55eb":"img = dicom_to_array('..\/input\/vinbigdata-chest-xray-abnormalities-detection\/train\/00053190460d56c53cc3e57321387478.dicom')\nimg","10001999":"import random\nfrom random import randint\n\nimgs = []\nimg_ids = finding_df['image_id'].values\nclass_ids = finding_df['class_id'].unique()\n\n# map label_id to specify color\nlabel2color = {class_id:[randint(0,255) for i in range(3)] for class_id in class_ids}\nthickness = 3\nscale = 5\n\n\nfor i in range(8):\n    img_id = random.choice(img_ids)\n    img_path = f'{dataset_dir}\/train\/{img_id}.dicom'\n    img = dicom_to_array(path=img_path)\n    img = cv2.resize(img, None, fx=1\/scale, fy=1\/scale)\n    img = np.stack([img, img, img], axis=-1)\n    \n    boxes = finding_df.loc[finding_df['image_id'] == img_id, ['x_min', 'y_min', 'x_max', 'y_max']].values\/scale\n    labels = finding_df.loc[finding_df['image_id'] == img_id, ['class_id']].values.squeeze()\n    \n    for label_id, box in zip(labels, boxes):\n        color = label2color[label_id]\n        img = cv2.rectangle(\n            img,\n            (int(box[0]), int(box[1])),\n            (int(box[2]), int(box[3])),\n            color, thickness\n    )\n    img = cv2.resize(img, (500,500))\n    imgs.append(img)\n    \nplot_imgs(imgs, cmap=None)\nplt.tight_layout()\nplt.axis('off')\nplt.show()","6836d683":"sns.pairplot(train_df, hue='class_name')\nplt.show()","e1b8c3ed":"dicom_paths = glob.glob(f'{dataset_dir}\/train\/*.dicom')\nimgs = [dicom_to_array(path) for path in dicom_paths[:4]]\nplot_imgs(imgs)\n\n\n## Maybe, you can try some preprocess like equalize histogram.\n## You can see the difference between before and after\nimgs = [exposure.equalize_adapthist(img) for img in imgs]\nplot_imgs(imgs)\nplt.show()","adb3c91d":"def plot_example(idx_list):\n    fig, axs = plt.subplots(1, 3, figsize=(15, 10))\n    fig.subplots_adjust(hspace = .1, wspace=.1)\n    axs = axs.ravel()\n    for i in range(3):\n        image_id = train_df.loc[idx_list[i], 'image_id']\n        data_file = pydicom.dcmread(dataset_dir+'train\/'+image_id+'.dicom')\n        img = data_file.pixel_array\n        axs[i].imshow(img, cmap=plt.cm.bone)\n        axs[i].set_title(train_df.loc[idx_list[i], 'class_name'])\n        axs[i].set_xticklabels([])\n        axs[i].set_yticklabels([])\n        if train_df.loc[idx_list[i], 'class_name'] != 'No finding':\n            bbox = [train_df.loc[idx_list[i], 'x_min'],\n                    train_df.loc[idx_list[i], 'y_min'],\n                    train_df.loc[idx_list[i], 'x_max'],\n                    train_df.loc[idx_list[i], 'y_max']]\n            p = matplotlib.patches.Rectangle((bbox[0], bbox[1]),\n                                             bbox[2]-bbox[0],\n                                             bbox[3]-bbox[1],\n                                             ec='r', fc='none', lw=2.)\n            axs[i].add_patch(p)\n            \nfor num in range(15):\n    idx_list = train_df[train_df['class_id']==num][0:3].index.values\n    plot_example(idx_list)\n    plt.show()","5098ee27":"from sklearn.model_selection import GroupKFold, train_test_split\n\ntrain_df = train_df[train_df['class_id'] != 14].reset_index(drop=True)\n\ngkf  = GroupKFold(n_splits = 5)\ntrain_df['fold'] = -1\nfor fold, (train_idx, val_idx) in enumerate(gkf.split(train_df, groups = train_df.image_id.tolist())):\n    train_df.loc[val_idx, 'fold'] = fold\ntrain_df.head()","6e650f36":"train, test = train_test_split(train_df, test_size = 0.2, random_state = 45)\nprint(train.shape)\nprint(test.shape)","5c45fa73":"subs_df = pd.read_csv('..\/input\/vinbigdata-chest-xray-abnormalities-detection\/sample_submission.csv')","30ec904e":"train_df.to_csv(\"submission.csv\", index=False)","e0932481":"# Defining Bounding Box Area","b023f125":"# Visualizing the Images through CLAHE Normalization\n\n**This method produces sharper images and is quite often used in chest X-ray research. This generates view, which radiologist would not see in his standard workplace. However, it closely resembles the \"bone-enhanced\" view in some X-rays done (usually due to broken ribs).**","aba6cc19":"# Bounding Boxes with Diseases","bf9b3161":"**I will be implementing some processes used in [Trung Thann Ngyuyen](https:\/\/www.kaggle.com\/trungthanhnguyen0502\/eda-vinbigdata-chest-x-ray-abnormalities\/)'s notebook**","bdd55079":"# Understanding the Dataset\n\n**The dataset comprises 18,000 postero-anterior (PA) CXR scans in DICOM format, which were de-identified to protect patient privacy. All images were labeled by a panel of experienced radiologists for the presence of 14 critical radiographic findings as listed below:**\n\n1. 0 - Aortic enlargement\n2. 1 - Atelectasis\n3. 2 - Calcification\n4. 3 - Cardiomegaly\n5. 4 - Consolidation\n6. 5 - ILD\n7. 6 - Infiltration\n8. 7 - Lung Opacity\n9. 8 - Nodule\/Mass\n10. 9 - Other lesion\n11. 10 - Pleural effusion\n12. 11 - Pleural thickening\n13. 12 - Pneumothorax\n14. 13 - Pulmonary fibrosis\n\n**The \"No finding\" observation (14) was intended to capture the absence of all findings above.**","c4fa930b":"# Exploring arrays","8a246cbd":"# GroupKFold","bfd9f24b":"# Plotting Bounding Boxes","20aaf51e":"# Submission File","1461f7b3":"# Image Datasets ","dd6239fc":"# WORK IN PROGRESS","ce147c1a":"# Let's check the Class_name labels"}}