{"cell_type":{"60ff4a14":"code","c235a758":"code","5920dd40":"code","1853ca22":"code","1d75b851":"code","902e8a5a":"code","3dfb7789":"code","59b7567c":"code","eb30cb67":"code","00921287":"code","d543daae":"code","0ca148c1":"markdown","8230c583":"markdown","93ffdd4c":"markdown","9f03d531":"markdown","1c8193dd":"markdown"},"source":{"60ff4a14":"import os\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n!pip install opencv-contrib-python\nimport cv2\nprint(os.listdir(\"..\/input\"))\nimport matplotlib.pyplot as plt\n%matplotlib inline ","c235a758":"!ls \/kaggle\/input\/","5920dd40":"train_dir = '..\/input\/iwildcam-2020-fgvc7\/train'\ntrain_imgs = ['..\/input\/iwildcam-2020-fgvc7\/train\/{}'.format(i) for i in os.listdir(train_dir)]","1853ca22":"num_show = 15\ncolumns = 5","1d75b851":"plt.figure(figsize=(25,12))\nfor idx, train_img in enumerate(train_imgs):\n    if idx >= num_show:\n        break\n    \n    temp_img = cv2.imread(train_img, cv2.IMREAD_COLOR)\n    \n    plt.subplot(10 \/ columns + 1, columns, idx + 1)\n    plt.imshow(temp_img)\n    if idx % 5 == 4:\n        plt.show()\n        plt.figure(figsize=(25,12))","902e8a5a":"clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(16, 16))\n","3dfb7789":"plt.figure(figsize=(25,12))\nfor idx, train_img in enumerate(train_imgs):\n    if idx >= num_show:\n        break\n    \n    temp_img = cv2.imread(train_img, cv2.IMREAD_COLOR)        \n    img_lab = cv2.cvtColor(temp_img, cv2.COLOR_BGR2Lab)\n\n    l, a, b = cv2.split(img_lab)\n    img_l = clahe.apply(l)\n    img_clahe = cv2.merge((img_l, a, b))\n\n    img_clahe = cv2.cvtColor(img_clahe, cv2.COLOR_Lab2BGR)\n    \n    plt.subplot(10 \/ columns + 1, columns, idx + 1)\n    plt.imshow(img_clahe)\n    if idx % 5 == 4:\n        plt.show()\n        plt.figure(figsize=(25,12))","59b7567c":"wb = cv2.xphoto.createSimpleWB()\nwb.setP(0.4)","eb30cb67":"plt.figure(figsize=(25,12))\nfor idx, train_img in enumerate(train_imgs):\n    if idx >= num_show:\n        break\n    \n    temp_img = cv2.imread(train_img, cv2.IMREAD_COLOR)        \n    \n    img_wb = wb.balanceWhite(temp_img)\n    \n    plt.subplot(10 \/ columns + 1, columns, idx + 1)\n    plt.imshow(img_wb)\n    if idx % 5 == 4:\n        plt.show()\n        plt.figure(figsize=(25,12))","00921287":"plt.figure(figsize=(25,12))\nfor idx, train_img in enumerate(train_imgs):\n    if idx >= num_show:\n        break\n    \n    temp_img = cv2.imread(train_img, cv2.IMREAD_COLOR)        \n    \n    img_wb = wb.balanceWhite(temp_img)\n\n    img_lab = cv2.cvtColor(img_wb, cv2.COLOR_BGR2Lab)\n\n    l, a, b = cv2.split(img_lab)\n    res_l = clahe.apply(l)\n    res = cv2.merge((res_l, a, b))\n\n    res = cv2.cvtColor(res, cv2.COLOR_Lab2BGR)\n\n    plt.subplot(10 \/ columns + 1, columns, idx + 1)\n    plt.imshow(res)\n    if idx % 5 == 4:\n        plt.show()\n        plt.figure(figsize=(25,12))","d543daae":"fig=plt.figure(figsize=(32, 128))\nfor idx, train_img in enumerate(train_imgs):\n    if idx >= num_show:\n        break\n    \n    temp_img = cv2.imread(train_img, cv2.IMREAD_COLOR)        \n    \n    img_wb = wb.balanceWhite(temp_img)\n\n    img_lab = cv2.cvtColor(img_wb, cv2.COLOR_BGR2Lab)\n\n    l, a, b = cv2.split(img_lab)\n    res_l = clahe.apply(l)\n    res = cv2.merge((res_l, a, b))\n\n    res = cv2.cvtColor(res, cv2.COLOR_Lab2BGR)\n    fig.add_subplot(15, 2, 2 * idx + 1)\n    plt.imshow(temp_img)\n    fig.add_subplot(15, 2, 2 * idx + 2)\n    plt.imshow(res)\nplt.show()","0ca148c1":"# Compare Original and Pre-processed with CLAHE & SimpleWB","8230c583":"# Automatic White Balance\n- Simple\n- Grayworld\n- Learning-based\nTheses require xphoto in 'opencv-contrib-python'","93ffdd4c":"# CLAHE & Simple WB","9f03d531":"This kernel based on the [this kernerl](https:\/\/www.kaggle.com\/seriousran\/image-pre-processing-for-wild-images)\n\nIt introduce image pre-precessing for wild images using CLAHE and AWB","1c8193dd":"# CLAHE(Contrast Limited Adaptive Histogram Equalization)\nref: https:\/\/docs.opencv.org\/3.1.0\/d5\/daf\/tutorial_py_histogram_equalization.html"}}