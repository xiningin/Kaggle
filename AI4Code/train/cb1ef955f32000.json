{"cell_type":{"87c0edfe":"code","91fa23c7":"code","5432f441":"code","60dedbba":"code","605d793e":"code","52a0df6e":"code","58e086b9":"code","2b779849":"code","4cb4c6b1":"code","3adc0dce":"code","c08169b5":"code","16ed19a4":"markdown"},"source":{"87c0edfe":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n\nimport plotly.graph_objects as go\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.offline as ply\nply.init_notebook_mode(connected=True)\nimport plotly.express as px\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","91fa23c7":"data = pd.read_csv(\"\/kaggle\/input\/covid19-in-turkey\/covid_19_data_tr.csv\")\ndata.head()","5432f441":"data.rename(columns={\"Last_Update\":\"Tarih\",\"Confirmed\":\"Vaka\",\"Deaths\":\"Vefat\",\"Recovered\":\"Tedavi_Edilen\"},inplace=True)\n\n\nvaka_orani = [0]\nolum_orani = [0]\nvaka_artisi = [0]\nolum_artisi = [0]\ntest_orani = [0]\ntest_artisi = [0]\n\naktif_hasta = data[\"Vaka\"]-(data[\"Vefat\"]+data[\"Tedavi_Edilen\"])\npasif_hasta = data[\"Vefat\"]+data[\"Tedavi_Edilen\"]\n\n\nfor i in range(len(data)-1):\n    \n    vakaArtisi = data[\"Vaka\"][i+1] - data[\"Vaka\"][i]\n    \n    vakaOrani = round((data[\"Vaka\"][i+1]-data[\"Vaka\"][i])\/\n                     data[\"Vaka\"][i],2)\n    \n    olumOrani = round((data[\"Vefat\"][i+1] - data[\"Vefat\"][i])\/\n                     data[\"Vefat\"][i],2)\n    \n    olumArtisi = data[\"Vefat\"][i+1] - data[\"Vefat\"][i]\n        \n        \n    vaka_artisi.append(vakaArtisi)\n    vaka_orani.append(vakaOrani)\n    olum_orani.append(olumOrani)\n    olum_artisi.append(olumArtisi)\n    \n    \n    \n    \ndata[\"Vaka Art\u0131\u015f Say\u0131s\u0131\"] = vaka_artisi\ndata[\"Vaka Art\u0131\u015f Oran\u0131\"] = vaka_orani\ndata[\"Vefat Art\u0131\u015f Say\u0131s\u0131\"] = olum_artisi\ndata[\"Vefat Art\u0131\u015f Oran\u0131\"] = olum_orani\ndata[\"Aktif Hasta Say\u0131s\u0131\"] = aktif_hasta\ndata[\"Pasif Hasta Say\u0131s\u0131\"] = pasif_hasta\n\n    \n\n\ndata.fillna(0, inplace=True)\ndata = data.replace([np.inf,-np.inf], np.nan)\ndata.fillna(0, inplace=True)","60dedbba":"data","605d793e":"olum = go.Scatter(\n    x = data.Tarih,\n    y = data.Vefat,\n    mode = \"lines+markers\",\n    name = \"Vefat\",\n    marker = dict(color = 'rgba(255, 0, 0, 0.8)'),\n    text = data.Vefat\n)\n\ntedavi = go.Scatter(\n    x = data.Tarih,\n    y = data.Tedavi_Edilen,\n    mode = \"lines+markers\",\n    name = \"Tedavi Edilen\",\n    marker = dict(color = \"rgba(0, 180, 0, 0.8)\"),\n    text = data.Tedavi_Edilen\n)\n\ndata2 = [olum,tedavi]\n\nlayout = dict(\n    title = \"Toplam \u00d6l\u00fcm Ve Toplam Tedavi Say\u0131lar\u0131\",\n    xaxis = dict(title = \"Tarih\"),\n    yaxis = dict(title = \"Ki\u015fi Say\u0131s\u0131\"),\n    xaxis_tickangle = -45,\n             )\n\nfig = dict(data = data2, layout = layout)\niplot(fig)","52a0df6e":"#Vakalar hari\u00e7 t\u00fcm sutunlar\u0131 se\u00e7iyoruz.\nx_cols = [x for x in data.columns if (x == 'Vefat' or x == 'Tedavi_Edilen')]\n\nX_data = data[x_cols]\ny_data = data['Vaka']\n\n\n#Ard\u0131ndan vaka say\u0131lar\u0131na bakarak ka\u00e7 ki\u015finin tedavi edilece\u011fini \u00f6n g\u00f6rmeye \u00e7al\u0131\u015fyoruz:\nfrom sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors=1)\n\nknn = knn.fit(X_data, y_data)\n\ny_pred = knn.predict(X_data)\n\n\ndef accuracy(real, predict):\n    return sum(real == predict) \/ float(real.shape[0])\n\nprint(accuracy(y_data, y_pred))","58e086b9":"import numpy as np\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score\n\n\nmyList = list(range(1,40))\n\nscores = []\n\n\n\nfor k in myList:\n    knn = KNeighborsClassifier(n_neighbors=k)\n    knn = knn.fit(X_data, y_data)\n    y_pred = knn.predict(X_data)\n    def accuracy(real, predict):\n        return sum(real == predict) \/ float(real.shape[0])\n    scores.append(accuracy(y_data, y_pred))\n    \nplt.plot(myList, scores)\nplt.xlabel('Neighbors K Sayisi')\nplt.ylabel('Yanlis Siniflandirma Hatas\u0131')\nplt.show()","2b779849":"from sklearn.naive_bayes import GaussianNB, BernoulliNB, MultinomialNB\n\nx_cols = [x for x in data.columns if (x == 'Vefat' or x == 'Tedavi_Edilen')]\n\nX_data = data[x_cols]\ny_data = data['Vaka']\ncv_N = 2\n\nnb = {'gaussian': GaussianNB(),\n      'bernoulli': BernoulliNB(),\n      'multinomial': MultinomialNB()}\nscores = {}\n\nfor key, model in nb.items():\n    s = cross_val_score(model, X_data, y_data, cv=cv_N, n_jobs=cv_N, scoring='accuracy')\n    scores[key] = np.mean(s)\n\nscores","4cb4c6b1":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_data, y_data, test_size=0.8, random_state=0)\n\nmnb = MultinomialNB()\ny_pred = mnb.fit(X_train, y_train).predict(X_test)\n\nprint(\"Toplam nokta: %d Hatal\u0131 Nokta : %d\" % (X_test.shape[0], (y_test != y_pred).sum()))\nprint(\"Do\u011fruluk oran\u0131: \", np.mean(y_pred == y_test))","3adc0dce":"from sklearn.kernel_approximation import Nystroem\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn import svm\n\nX_data = data[x_cols]\ny_data = data['Vaka']\n\nX_train, X_test, y_train, y_test = train_test_split(X_data, y_data, test_size = 0.20, random_state = 0)\n\nnystroemSVC = Nystroem(kernel='rbf', gamma=1.0, n_components=100)\nX_train = nystroemSVC.fit_transform(X_train)\nX_test = nystroemSVC.transform(X_test)\n\nparams_grid = {'C': [0.0001, 0.001, 0.01,0.099, 0.1, 1],\n          'gamma': [0.00099, 0.001, 0.01, 0.1, 1],\n          'kernel':['rbf', 'linear', 'poly'] }\n\ngrid_clf = GridSearchCV(SVC(class_weight='balanced'), params_grid)\n\ngrid_clf = grid_clf.fit(X_train, y_train)\n\nprint(grid_clf.best_params_)","c08169b5":"sns.set_style('white')\nsns.set_context('talk')\nsns.set_palette('dark')\n\n# Plot of the noisy (sparse)\nax = data.set_index('Vaka')['Tedavi_Edilen'].plot(ls='', marker='o', label='data')\nax.plot(X_data, y_data, ls='--', marker='', label='real function')\n\nax.legend()\nax.set(xlabel='x data', ylabel='y data');","16ed19a4":"KNN Algoritmas\u0131:"}}