{"cell_type":{"c4c17bad":"code","69b7ddf0":"code","1d7e9ba8":"code","60c6dddf":"code","6065518b":"code","12ae790b":"code","063fa132":"code","8946b831":"code","21c90ca6":"code","d8bb73f1":"code","bc346fd8":"code","15effe82":"code","8548e5e2":"code","3b2dcde9":"markdown","1beb7a15":"markdown","dfacbb84":"markdown","fb13030e":"markdown","85f83c90":"markdown"},"source":{"c4c17bad":"# IMPORTS\n\nimport numpy as np\nimport pandas as pd\nimport librosa\nimport librosa.display\nfrom scipy import signal\nfrom scipy.fft import fft, ifft\nfrom scipy import stats\nfrom tqdm.auto import *\nfrom collections import defaultdict\ntqdm.get_lock().locks = []\nimport matplotlib.pyplot as plt","69b7ddf0":"train = pd.read_csv('\/kaggle\/input\/predict-volcanic-eruptions-ingv-oe\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/predict-volcanic-eruptions-ingv-oe\/sample_submission.csv')\ntrain.head()","1d7e9ba8":"# Read a sample dataset\ntrain_segment_id_0 = train['segment_id'][0]\ntrain_dataset_0 = pd.read_csv(f'\/kaggle\/input\/predict-volcanic-eruptions-ingv-oe\/train\/{train_segment_id_0}.csv', memory_map=True)\ntrain_dataset_0.head()","60c6dddf":"def mel_spectrogram(sensor, sr):\n    # n_mels and hop_length designed to give spectrograms of size 256x256\n    spec = librosa.feature.melspectrogram(y=sensor, sr=sr, n_mels=256, hop_length=60001\/\/256+1)\n    return librosa.power_to_db(spec)","6065518b":"# Generate 3 sample spectrograms for visualisation purposes\nspec12000 = mel_spectrogram(train_dataset_0['sensor_1'].values, 12000)\nspec48000 = mel_spectrogram(train_dataset_0['sensor_1'].values, 48000)\nspec96000 = mel_spectrogram(train_dataset_0['sensor_1'].values, 96000)","12ae790b":"librosa.display.specshow(spec12000, y_axis='mel', fmax=8000, x_axis='time')","063fa132":"librosa.display.specshow(spec48000, y_axis='mel', fmax=8000, x_axis='time')","8946b831":"librosa.display.specshow(spec96000, y_axis='mel', fmax=8000, x_axis='time')","21c90ca6":"# Create output directories\n!mkdir train test","d8bb73f1":"# Redefine spectrogram function with chosen sample rate\ndef spectrogram(sensor):\n    spec = librosa.feature.melspectrogram(y=sensor, sr=48000, n_mels=256, hop_length=60001\/\/256+1)\n    return librosa.power_to_db(spec)","bc346fd8":"def generate_spectrograms_for_df(df, dataset):\n    # Enumerate across all datasets\n    for i, segment_id in enumerate(df['segment_id'].values):\n        sensors = pd.read_csv(f'\/kaggle\/input\/predict-volcanic-eruptions-ingv-oe\/{dataset}\/{segment_id}.csv', memory_map=True)\n        sensors.fillna(0, inplace=True)\n        \n        signals = []\n        for i in range(10):\n            name = f'sensor_{i+1}'\n            sensor = sensors[name].values\n            signals.append(spectrogram(sensor))\n        \n        # Cast to uint8 to save memory\n        signals = np.array(signals, dtype='uint8')\n\n        np.savez_compressed(f'{dataset}\/{segment_id}-spec.npz', signals)","15effe82":"generate_spectrograms_for_df(train, 'train')\ngenerate_spectrograms_for_df(test, 'test')","8548e5e2":"segment_id = 1136037770\nspectrogram = np.load(f'train\/{segment_id}-spec.npz')['arr_0'].astype('float32')","3b2dcde9":"## Loading Data\nTo load data for training, you can use the following code:","1beb7a15":"## Process all train and test datasets\nBy writing a simple function, we can iterate through the whole train and test dataset to process all data.  \nIn this case, we output each set of spectrograms (10 sensors per dataset) as uint8 arrays stored in compressed `npz` format.","dfacbb84":"As seen, increasing the sample rate (12000Hz -> **48000Hz**) stretches the lower frequencies, which we hypothesise hold more info (from visual observation).  \nFurther increasing the value past 60k will result in insufficient samples for the STFT as can be seen in the 96000Hz spectrogram.","fb13030e":"# Mel Spectrogram Data Processing for INGV\n\nGiven that the dataset is time-series data, where each column represents the seismic sensor readings, we have found that representing it as a wave and using STFT to convert them into spectrograms.","85f83c90":"## Spectrogram Generation\nLet's now define a function to generate Mel Spectrograms and tweak some params"}}