{"cell_type":{"13925e0b":"code","c47e8652":"code","952eaa36":"code","46e132a0":"code","95adec81":"code","541cb866":"code","79a72687":"code","0132c327":"code","e3a331fb":"code","6a797926":"code","44096b95":"code","68760042":"code","6dd8c624":"code","aacab6f3":"code","2d063940":"code","79337c1d":"code","a1cd5ac9":"code","7239ea19":"code","c2027e13":"code","446a8d53":"code","eac57810":"code","5afba6e0":"code","b3c979cd":"code","c3511187":"code","b5cf999b":"code","ad9bd828":"code","b725fb6e":"code","bd2420a3":"code","cece8cb7":"code","489566c0":"code","96a4bd87":"code","91ff4be3":"code","6d6759b0":"code","b1e191fe":"code","995f31d5":"code","478e341e":"code","b6c1d9d7":"code","c5043f0a":"code","52c22514":"code","c802cf23":"code","edfa7b89":"code","ba03219a":"code","f535939a":"code","185cfcd2":"code","3d39a472":"code","abe0a7d9":"code","6a284f09":"code","b63b999d":"code","d82b0dfd":"markdown","14b37d57":"markdown","c89e7ae6":"markdown","00e43dc5":"markdown","b731e713":"markdown","fc516866":"markdown","1272d678":"markdown","ab05a779":"markdown","65851221":"markdown","575653ca":"markdown","a82db083":"markdown","37ab77d8":"markdown","a7506ed5":"markdown","cc39682d":"markdown","fead9547":"markdown","d412f962":"markdown","2c721e98":"markdown","bef2099c":"markdown","1366a3eb":"markdown","8911f63e":"markdown","4d154aa3":"markdown","7b0b3a19":"markdown","0b2cee34":"markdown","8b24a8a6":"markdown","80e3d27b":"markdown","7278d6f8":"markdown","33be9c36":"markdown","997c5e09":"markdown","3e4fa064":"markdown","0cd77867":"markdown","d32a37b5":"markdown","7ddd0ceb":"markdown","5f79f939":"markdown","8b935a0c":"markdown","e90ff3ae":"markdown","d6b5d5c5":"markdown","a61e6249":"markdown","3aa305d7":"markdown","95f7994e":"markdown","a9cb05b5":"markdown","faaf9ada":"markdown"},"source":{"13925e0b":"from bs4 import BeautifulSoup\nimport requests\nimport pandas as pd\nimport numpy as np\nfrom geopy.geocoders import Nominatim\nimport folium","c47e8652":"url = 'https:\/\/en.wikipedia.org\/wiki\/Neighbourhoods_of_Delhi'\nhtml_content = requests.get(url).text\n\nsoup = BeautifulSoup(html_content, \"html.parser\")","952eaa36":"delhi_table = soup.find_all(\"span\",attrs={\"class\":\"mw-headline\"})\ndistricts = []\ni=1;\nfor v in delhi_table:\n    districts.append(v.text)\n    i=i+1\n    if(i==10):\n        break","46e132a0":"districts","95adec81":"address = 'Delhi, India'\n\ngeolocator = Nominatim(user_agent=\"del_explorer\")\nlocation = geolocator.geocode(address)\nlatitude = location.latitude\nlongitude = location.longitude\nprint('The geograpical coordinate of Delhi are {}, {}.'.format(latitude, longitude))","541cb866":"df_delhi = pd.read_excel('..\/input\/delhi-neighborhoods-coordinates\/Delhi_Neigh_LatLong.xlsx')\ndf_delhi.head()","79a72687":"df_delhi.shape","0132c327":"map_delhi = folium.Map(location=[latitude, longitude], zoom_start=11)\n\n# add markers to map\nfor lat, lng, dist, neighborhood in zip(df_delhi['Latitude'], df_delhi['Longitude'], df_delhi['District'], df_delhi['Neighborhood']):\n    label = '{}, {}'.format(neighborhood, dist)\n    label = folium.Popup(label, parse_html=True)\n    folium.CircleMarker(\n        [lat, lng],\n        radius=5,\n        popup=label,\n        color='blue',\n        fill=True,\n        fill_color='#3186cc',\n        fill_opacity=0.7,\n        parse_html=False).add_to(map_delhi)  \n    \nmap_delhi","e3a331fb":"CLIENT_ID = 'Y3H35IKOA5URAE5CNY0CN5UACSA4BIVGWAPYFZ1TYQGOB435'\nCLIENT_SECRET = 'F0LOPS1EHYFZPIC3I5OSQ2FMOVN0CHA5VIQ3SRDMLYHZQW1E'\nVERSION = '20200511' \nLIMIT = 50\nradius = 1000","6a797926":"# Function for getting venues by the neighborhood, latitiute, longitude and radius\n\ndef getNearbyVenues(names, latitudes, longitudes, radius=500):\n    \n    venues_list=[]\n    for name, lat, lng in zip(names, latitudes, longitudes):\n        print(name)\n            \n        # create the API request URL\n        url = 'https:\/\/api.foursquare.com\/v2\/venues\/explore?&client_id={}&client_secret={}&v={}&ll={},{}&radius={}&limit={}'.format(\n            CLIENT_ID, \n            CLIENT_SECRET, \n            VERSION, \n            lat, \n            lng, \n            radius, \n            LIMIT)\n            \n        # make the GET request\n        results = requests.get(url).json()[\"response\"]['groups'][0]['items']\n        \n        # return only relevant information for each nearby venue\n        venues_list.append([(\n            name, \n            lat, \n            lng, \n            v['venue']['name'], \n            v['venue']['location']['lat'], \n            v['venue']['location']['lng'],  \n            v['venue']['categories'][0]['name']) for v in results])\n\n    nearby_venues = pd.DataFrame([item for venue_list in venues_list for item in venue_list])\n    nearby_venues.columns = ['Neighborhood', \n                  'Neighborhood Latitude', \n                  'Neighborhood Longitude', \n                  'Venue', \n                  'Venue Latitude', \n                  'Venue Longitude', \n                  'Venue Category']\n    \n    return(nearby_venues)","44096b95":"delhi_venues = getNearbyVenues(names=df_delhi['Neighborhood'],\n                                   latitudes=df_delhi['Latitude'],\n                                   longitudes=df_delhi['Longitude']\n                                  )\n","68760042":"delhi_venues.shape","6dd8c624":"delhi_venues.head()","aacab6f3":"delhi_venues.groupby('Neighborhood').count()","2d063940":"print('There are {} unique venue categories.'.format(len(delhi_venues['Venue Category'].unique())))","79337c1d":"conflicting_value = delhi_venues[delhi_venues['Venue Category']=='Neighborhood']\nconflicting_value","a1cd5ac9":"map_delhi_venues = folium.Map(location=[latitude, longitude], zoom_start=11)\n\n# add markers to map\nfor lat, lng, ven, cat in zip(delhi_venues['Venue Latitude'], delhi_venues['Venue Longitude'], delhi_venues['Venue'], delhi_venues['Venue Category']):\n    label = '{}, {}'.format(ven,cat)\n    label = folium.Popup(label, parse_html=True)\n    folium.CircleMarker(\n        [lat, lng],\n        radius=5,\n        popup=label,\n        color='red',\n        fill=True,\n        fill_color='yellow',\n        fill_opacity=0.7,\n        parse_html=False).add_to(map_delhi_venues)  \n    \nmap_delhi_venues","7239ea19":"url = 'https:\/\/www.census2011.co.in\/census\/state\/districtlist\/delhi.html'\nhtml_content = requests.get(url).text\n\nsoup = BeautifulSoup(html_content, \"html.parser\")","c2027e13":"density_t = soup.find(\"table\")\ndensity_headings = density_t.find_all(\"th\")\nden_headings = []\nfor v in density_headings:\n    den_headings.append(v.text)","446a8d53":"delhi_table_data = density_t.find_all(\"tr\")\ntable_data = []\nfor v in delhi_table_data:\n    if(v!=delhi_table_data[0]):\n        t_row = {}\n        for td,h in zip(v.find_all(\"td\"),den_headings):\n            t_row[h] = td.text.replace('\\n', '').strip()\n        table_data.append(t_row)","eac57810":"den_delhi = pd.DataFrame(table_data)\nden_delhi","5afba6e0":"den_delhi.dropna(inplace=True)","b3c979cd":"den_delhi = pd.DataFrame(den_delhi[['District','Density']])\nden_delhi","c3511187":"new_districts = pd.DataFrame({\"District\":['South East Delhi','Shahdara'],\"Density\":[11060,27132]})\nden_delhi = den_delhi.append(new_districts)\nden_delhi.reset_index(inplace = True, drop = True) ","b5cf999b":"den_delhi","ad9bd828":"# one hot encoding\ndelhi_onehot = pd.get_dummies(delhi_venues[['Venue Category']], prefix=\"\", prefix_sep=\"\")\n\n# add neighborhood column back to dataframe\ndelhi_onehot.insert(0, 'Neighborhoods',delhi_venues['Neighborhood'])\n\ndelhi_onehot.head()","b725fb6e":"delhi_grouped = delhi_onehot.groupby('Neighborhoods').mean().reset_index()","bd2420a3":"def return_most_common_venues(row, num_top_venues):\n    row_categories = row.iloc[1:]\n    row_categories_sorted = row_categories.sort_values(ascending=False)\n    \n    return row_categories_sorted.index.values[0:num_top_venues]","cece8cb7":"num_top_venues = 2\n\nindicators = ['st', 'nd', 'rd']\n\n# create columns according to number of top venues\ncolumns = ['Neighborhoods']\nfor ind in np.arange(num_top_venues):\n    try:\n        columns.append('{}{} Most Common Venue'.format(ind+1, indicators[ind]))\n    except:\n        columns.append('{}th Most Common Venue'.format(ind+1))\n\n# create a new dataframe\nneighborhoods_venues_sorted = pd.DataFrame(columns=columns)\nneighborhoods_venues_sorted['Neighborhoods'] = delhi_grouped['Neighborhoods']\n\nfor ind in np.arange(delhi_grouped.shape[0]):\n    neighborhoods_venues_sorted.iloc[ind, 1:] = return_most_common_venues(delhi_grouped.iloc[ind, :], num_top_venues)\n\nneighborhoods_venues_sorted.head()","489566c0":"from sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt","96a4bd87":"delhi_grouped_clustering = delhi_grouped.drop('Neighborhoods', 1)","91ff4be3":"from sklearn.metrics import silhouette_score\n\nsil = []\nkmax = 10\n\n# dissimilarity would not be defined for a single cluster, thus, minimum number of clusters should be 2\nfor k in range(3, kmax+1):\n    kmeans = KMeans(n_clusters = k).fit(delhi_grouped_clustering)\n    labels = kmeans.labels_\n    sil.append(silhouette_score(delhi_grouped_clustering, labels, metric = 'euclidean'))","6d6759b0":"plt.plot(range(3, 11), sil, color ='g', linewidth ='3') \nplt.xlabel(\"Value of K\") \nplt.ylabel(\"Silhouetee Score\") \nplt.show() # clear the plot ","b1e191fe":"kclusters = 9\n\nkmeans = KMeans(n_clusters=kclusters, random_state=0).fit(delhi_grouped_clustering)\n\nkmeans.labels_\n\nneighborhoods_venues_sorted.drop(['Cluster Labels'], axis=1, inplace=True)\n\nneighborhoods_venues_sorted.insert(0, 'Cluster Labels', kmeans.labels_)\n\nkmeans.labels_[0:10] ","995f31d5":"# Creating a dataframe with venues and respective cluster groups\n\n# lets first change the name of the' Neighborhood' column in df_toronto to 'Neighborhoods'\ndf_delhi.rename(columns={'Neighborhood':'Neighborhoods'},inplace=True)\n\n#Merging\ndelhi_merged = df_delhi\ndelhi_merged = delhi_merged.join(neighborhoods_venues_sorted.set_index('Neighborhoods'), on='Neighborhoods')\n\ndelhi_merged.head() ","478e341e":"delhi_merged.dropna(inplace=True)\ndelhi_merged.reset_index(inplace = True, drop = True)","b6c1d9d7":"delhi_merged['Cluster Labels'] = pd.to_numeric(delhi_merged['Cluster Labels'], downcast='integer')","c5043f0a":"delhi_merged.shape","52c22514":"delhi_merged.head()","c802cf23":"import matplotlib.cm as cm\nimport matplotlib.colors as colors","edfa7b89":"map_clusters = folium.Map(location=[latitude, longitude], zoom_start=11)\n\n# set color scheme for the clusters\nx = np.arange(kclusters)\nys = [i + x + (i*x)**2 for i in range(kclusters)]\ncolors_array = cm.rainbow(np.linspace(0, 1, len(ys)))\nrainbow = [colors.rgb2hex(i) for i in colors_array]\n#rainbow = ['yellow','blue','purple','red','turquoise','green']\n\n# add markers to the map\nmarkers_colors = []\nfor lat, lon, poi, cluster in zip(delhi_merged['Latitude'], delhi_merged['Longitude'], delhi_merged['Neighborhoods'], delhi_merged['Cluster Labels']):\n    label = folium.Popup(str(poi) + ' Cluster ' + str(cluster), parse_html=True)\n    folium.CircleMarker(\n        [lat, lon],\n        radius=5,\n        popup=label,\n        color=rainbow[cluster-1],\n        fill=True,\n        fill_color=rainbow[cluster-1],\n        fill_opacity=0.7).add_to(map_clusters)\n       \nmap_clusters","ba03219a":"delhi_merged.loc[delhi_merged['Cluster Labels'] == 1, delhi_merged.columns[[1] + list(range(5, delhi_merged.shape[1]))]]","f535939a":"delhi_merged.loc[delhi_merged['Cluster Labels'] == 3, delhi_merged.columns[[1] + list(range(5, delhi_merged.shape[1]))]]","185cfcd2":"delhi_merged.loc[delhi_merged['Cluster Labels'] == 7, delhi_merged.columns[[1] + list(range(5, delhi_merged.shape[1]))]]","3d39a472":"#Loading my dataset with district polygon coordinates\ndelhi_geo = r'..\/input\/delhi-district-boundaries\/delhi_districts.json' # geojson file\n\n# create a plain world map\ndelhi_dis_map = folium.Map(location=[latitude, longitude], zoom_start=10)","abe0a7d9":"den_delhi['Density'] = pd.to_numeric(den_delhi['Density'], downcast='integer')\nden_delhi.dtypes","6a284f09":"threshold_scale = np.linspace(den_delhi['Density'].min(),\n                              den_delhi['Density'].max(),\n                              6, dtype=int)\nthreshold_scale = threshold_scale.tolist() # change the numpy array to a list\nthreshold_scale[-1] = threshold_scale[-1] + 1\n\ndelhi_dis_map.choropleth(\n    geo_data=delhi_geo,\n    data=den_delhi,\n    columns=['District', 'Density'],\n    key_on='feature.properties.name',\n    fill_color='YlOrRd', \n    threshold_scale=threshold_scale,\n    fill_opacity=0.55, \n    line_opacity=0.2,\n    legend_name='Population Density'\n)\n\n# display map\ndelhi_dis_map","b63b999d":"for lat, lon, poi, cluster in zip(delhi_merged['Latitude'], delhi_merged['Longitude'], delhi_merged['Neighborhoods'], delhi_merged['Cluster Labels']):\n    label = folium.Popup(str(poi) + ' Cluster ' + str(cluster), parse_html=True)\n    folium.CircleMarker(\n        [lat, lon],\n        radius=5,\n        popup=label,\n        color=rainbow[cluster],\n        fill=True,\n        fill_color=rainbow[cluster],\n        fill_opacity=0.7).add_to(delhi_dis_map)\n       \ndelhi_dis_map","d82b0dfd":"### Let's get these datasets","14b37d57":"##### Neighborhoods with many daily life associated venues. (Moderately Concerning)","c89e7ae6":"# Predicting Covid Intensive Zones in Delhi","00e43dc5":"## Legend\n* **Most Concerning - RED, YELLOW**","b731e713":"## Results and Discussion <a name=\"results\"><\/a>","fc516866":"With the help of the final map, we can see which all districts are vulnerable to the spread of the virus and also which neighborhoods in the each district needs to be taken special take of.  \nMost Concerning zones especially in districts like North East Delhi, North Delhi and Central can aggravate the situation if timely action is not taken.  \nSouth West Delhi and North Delhi being a sparsely populated region should be the least concerning area in Delhi.  \n\nThe following improvements could be worked upon in future studies:  \n* As mentioned earlier, Foursquare API doesn't provide very detailed results when used for collecting data about Delhi. Other Location Data providers could be utilized in further studies to result in more accuracy.  \n* Furthermore, rather than working with coordinates of neighborhoods, if neighborhood boundaries could be utilized and all venues within the boundary is extracted, it would produce near perfect results.  \n* Census 2011's data was used in this project. The current year is 2020 which we could mean the statistics could be changed a lot. So working with the latest Census, as and when it is released could better the results.","1272d678":"#### Loading the Dataset I created having Latitudes and Longitudes of each Neighborhood","ab05a779":"Covid-19 is an infectious disease that has caused a havoc in the modern world by disrupting the daily life of every civilian on earth. The virus which primarily affects the lungs, has infected 4,543,390 people globally and 303,711 people have lost their lives because of it (as of 15th May, 2020). The pandemic has forced world leaders to come up with stringent measures such as nation-wide lockdowns to curb the spread of the virus. But lockdowns are holding back civilians from working and earning a living, and its effect does not trouble the poor but every section of the society, even the governments themselves. In such a situation, where economies fall and countries will be heading to recessions, people might be forced to head out and work and live along with the virus. \nThis causes a huge risk to countries like mine, India, with an enormous population density.   \nTo forsee the effects of lifting lockdowns, my research and this notebook will help people understand which neighborhoods might see a surge in Covid-19 cases. I will be using population density data and location data of popular venues, their proximity and their frequency of occurence  (like popular market places) to estimate the interaction occuring at a particular place. I will be focusing on the predictions mainly in my city (Delhi, the capital of India).  \nWith this, I hope readers can better understand potentially risky areas and authorities can take measures to place restrictions beforehand to such areas to reduce the spread of the virus and thus the suffering to civilian life.  \nI hope and pray whoever reads this is safe.","65851221":"## Introduction\/Business Problem <a name=\"intro\"><\/a>","575653ca":"### Finally, let us create the Map","a82db083":"Lets see the number of venues returned per neighborhood","37ab77d8":"### Finally lets superimpose this district-wise demarcation over our clustered neighborhoods map","a7506ed5":"Lets group and normalize this data","cc39682d":"## Conclusion <a name=\"conclusion\"><\/a>","fead9547":"#### As per our assumption lets add districts SOUTH EAST DELHI and SHAHDARA with density population equal to SOUTH DELHI and EAST DELHI resp ","d412f962":"## Methodology <a name=\"methodology\"><\/a>","2c721e98":"## Table of contents\n* [Introduction: Business Problem](#intro)\n* [Data](#data)\n* [Methodology](#methodology)\n* [Analysis](#analysis)\n* [Results and Discussion](#results)\n* [Conclusion](#conclusion)","bef2099c":"#### Checking for misleading Venue Category name","1366a3eb":"First, we shall be producing a Data Frame containing 1\/0 (ie Yes\/No) values for all venue category with respect to each venue. This process is called one-hot encoding.","8911f63e":"Now convert the **Cluster Labels** column to **int**","4d154aa3":"##### We see that Venue Category has a value 'Neighborhood' which can be misleading since one of our column names is also Neighborhood.\u00b6\n##### Hereafter, we will name the column 'Neighborhoods', to avoid the confusion","7b0b3a19":"##### **Please note this data is according to Census 2011 which declares 9 districts as opposed to 11 districts as per the current situation**.\n##### **Therefore, we will be adding places in SOUTH EAST DELHI under SOUTH DELHI and places in SHAHDARA under EAST DELHI.**","0b2cee34":"### Now let us add a layer of distinction of district-wise density population","8b24a8a6":"#### Let us now get the venues in each neighborhood","80e3d27b":"## Data <a name=\"data\"><\/a>","7278d6f8":"Covid-19 has wreaked havoc all around the globe and almost half of the year has been now spent by all the people on earth in just fighting off the pandemic. With better strategies and more efficient systems we should tackle this problem so as to be done with it as soon as possible for not just the health of all the people but also for the falling economies.  \nI hope this project of mine aids in the formation of mitigation strategies so that we all could win this battle and return to our normal lives at the earliest.  \n\nI would like to thank **Coursera**, **IBM** and all the **faculties** involved with the **Data Science Professional Certificate Courses** for introducing me to Data Science and enabling me with all the skills required to conduct the analysis of the problem at hand and reach my results.\nLast but not the least, I hope and pray my readers are safe.\n\nThank you for spending your valuable time in going through my work.","33be9c36":"##### Neighborhoods with Indian Restaurants. (Most Concerning)","997c5e09":"Dropping the row with the google advertisement info. Also, we just want the district-wise population density data so we drop the other columns.","3e4fa064":"##### Neighborhoods with Fast Food Restaurants and other socially active places. (Most Concerning)","0cd77867":"##### We see that only 161 neighborhoods were returned. This means that out of 177 neighborhoods, 16 had no venue results.  ","d32a37b5":"### It is time for Clustering!","7ddd0ceb":"#### Lets drop the neighborhoods with no venue results","5f79f939":"To predict the Covid Intensive Zones in Delhi, we shall perform the following steps:\n* Find the popular venue categories of each neighborhood\n* Form clusters of the neighborhoods according the prevalent venue categories using '**KMeans Clustering**'\n* Superimpose a layer of chloropleth map of the population densities in each dsitrict to rightly predict the severity of the possible situation","8b935a0c":"#### Now we find the top 2 venue categories in each venue","e90ff3ae":"## Analysis <a name=\"analysis\"><\/a>","d6b5d5c5":"### Now lets scrape the district-wise population density data","a61e6249":"First, let us find the optimum value of **K** by **Silhoutte Score Comparison**","3aa305d7":"We see that **K = 9** yields the best result","95f7994e":"To solve the above problem, I have made use of the following data:\n* Neighborhoods of Delhi (and the basis of their segmentation) - https:\/\/en.wikipedia.org\/wiki\/Neighbourhoods_of_Delhi  \nThere are 9 districts in delhi and the neighborhoods are aggregated into one of these districts.  \nThis data would be used to define the neighborhoods when I will be plotting the results on the map.\nI used the help of the 'search' option in Google Maps to figure out the approximate coordinates of each neighborhood and created my own dataset.\n     \n     \n* Location data of popular venues - provided by Foursquare API  \nThe Foursquare API provides data related to the frequency of occurence of different venues at a particular place.  \nI will be using the location data to identify clusters where proximity of venues with high footfall (like markets) are present.  \nThese will be identified as hotspot heighborhoods.\n\n\n* Population density of various districts - Census 2011 data - https:\/\/www.census2011.co.in\/census\/state\/districtlist\/delhi.html  \nThe population density data would be used to mark districts with potentially high risk of community transmission due to the high proximity in living conditions.\n\n* District boundaries data\nI created a data set of my own having the polygon coordinates of each district in Delhi.  \nI made use of two websites - http:\/\/nominatim.openstreetmap.org\/ and http:\/\/polygons.openstreetmap.fr\/index.py to first extract the location of a place of the map and then extract its coordinates respectively.","a9cb05b5":"#### It is noted that Foursquare API doesnt have much details reagrding venues in Delhi, therefore this is just an approximate picture of the real world. But we can surely say that it is a good approximation and will serve our need.","faaf9ada":"### Let us look at these clusters in detail"}}