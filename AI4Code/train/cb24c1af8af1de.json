{"cell_type":{"09e98f83":"code","ed85ae72":"code","01e2c560":"code","158163f5":"code","bde45cba":"code","127f6b12":"code","c99545a4":"code","b6ddf98f":"code","270a878d":"code","27de36cd":"code","da4e857f":"code","0fe405d5":"code","55d34cc8":"code","5b67f678":"code","48798927":"code","40d60499":"code","175aacdd":"code","2ef059d6":"code","94d44021":"code","20d97a15":"code","31b9e89d":"code","9061e654":"code","c5cf22db":"code","03fa6649":"code","81d0adb6":"code","4fe3be17":"code","f1744e50":"code","5edb99ae":"code","7b045672":"code","16eea56a":"code","6bbee1d7":"code","2be0177b":"code","63b2425f":"code","eb7981dc":"code","14cf964a":"code","59771eb7":"code","b9a524f8":"code","ac8f883b":"code","b16afecf":"code","ed74fdd5":"code","bcdf499c":"code","c861ef24":"code","458cbf68":"code","0fed5cdd":"code","7378fb30":"code","96f8f042":"code","aecba844":"code","953835c0":"code","9d67a5cb":"code","fa50c670":"code","0dcf1b06":"code","a00ddb9c":"markdown","a5f7aed0":"markdown","22de9c94":"markdown","7fecee60":"markdown","1012d6b1":"markdown","4115c5cb":"markdown"},"source":{"09e98f83":"# Use PIP or CONDA to install numpy (pandas is built on top of numpy, if you have pandas installed then no need to install numpy)\n\nimport numpy as np    # importing numpy library and using aliases as np ","ed85ae72":"# Declaring numpy array is as simple as declaring list\n# Use [] to specify elememts in single row\n# e.g 1 row, 3 columns\n\na = np.array([1,2,3]) \nprint(a)","01e2c560":"# If elements are seperated by [] then it is considered as next row\n# e.g 2 rows, 3 columns\n\nb = np.array([[1,2,3],[4,5,6]])\nprint(b)","158163f5":"# e.g 3 rows, 3 columns\n\nc = np.array([[1,2,3],[3,4,5],[6,7,8]])\nprint(c)","bde45cba":"# Dimensionality : If a linear array (simple list like structure) with sinle row is 1 dimension.\n                # If a array like matrix structure (rows and columns) is 2 dimension.\n                # If a array with 3 axis (x, y and z axis) is 3 dimension","127f6b12":"#To get Dimension of array use  .ndim function\n\nprint(\"Dimension of a :\", a.ndim )\nprint(\"Dimension of b :\", b.ndim )\nprint(\"Dimension of c :\", c.ndim )","c99545a4":"# To get number of rows and columns of an array use  .shape function\n\nprint(\"Shape of a :\", a.shape )\nprint(\"Shape of b :\", b.shape )\nprint(\"Shape of c :\", c.shape )","b6ddf98f":"# We have created array : c as a dimension array, lets change it to 3 dimension with 2 rows, 2 cols and 2 depth \n\nc = np.array([[[0, 1],[2, 3]],[[4, 5],[6, 7]]])\nprint(c)\nprint(\"Dimension of c :\", c.ndim )\nprint(\"Shape of c :\", c.shape )","270a878d":"# Numpy by default takes datatype as int64\n# to get data type use .dtype function\n\nprint(\"Dtype of a: \",a.dtype)\n\n# If you are sure that the all values used in array will be less tha 64 bytes then change the dtype to int32 or int16\nb = b.astype('int32')\nprint(\"Dtype of b: \",b.dtype)","27de36cd":"# Another way is to initialise the data type at the same time when array is created\n\nc = np.array([[[0, 1],[2, 3]],[[4, 5],[6, 7]]], dtype='int16') \nprint(c)\nprint(\"Dtype of c: \",c.dtype)","da4e857f":"# To know how much memory space each element in array comsumes (in bytes) use .itemsize function\n\nprint(\"Each element size of a (int64): \",a.itemsize)\nprint(\"Each element size of b (int32): \",b.itemsize)\nprint(\"Each element size of c (int16): \",c.itemsize)","0fe405d5":"# To get number of elements in array use .size function\n\nprint(\"No of elements in a : \",a.size)\nprint(\"No of elements in b : \",b.size)\nprint(\"No of elements in c : \",c.size)","55d34cc8":"# To get total memory occupied by array (in bytes) use .nbytes function\n# Memory = size of each element * number of elements (.itemsize * .size )\n\nprint(\"Memory of a : \",a.nbytes)\nprint(\"Memory of b : \",b.nbytes)\nprint(\"Memory of c : \",c.nbytes)","5b67f678":"# To access elements of array use index of row, coloum and depth\n# e.g 2 dim array\n\nprint(b)","48798927":"# access element \"3\" from array b\n# 1st row and 3rd column , in terms of index 0th row and 2nd column  \nprint(b[0,2])","40d60499":"# To access elements of array use index of row, coloum and depth\n# e.g 3 dim array\n\nprint(c)","175aacdd":"# access element \"6\" from array c\n# 2st row, 2st column, 1nd depth , in terms of index 1th row, 1th column , 0st depth \nprint(c[1,1,0])","2ef059d6":"# Visualizing 3 dim array in mind might be little bit difficult, anyways for maximum time ML will be dealing with 2 dim data","94d44021":"# Slicing in array (similar to slicing in list)\n# array[range of rows,range of columns]","20d97a15":"# to get specific row or column\n# 0tht row, all columns\nprint(b[0,:])\n\n# allrows, 2nd column\nprint(b[:,2])","31b9e89d":"# while slicing you can use start:end:step\n#Accessing elements for 3d array also remains same except you have to include the z axis(depth) also","9061e654":"#All zeros\n# To initialize array with all zero values use .zeros function followed by the shape of array\n\nnp.zeros((2,3)) #shape as argument","c5cf22db":"#All ones\n# To initialize array with all 1 values use .one function followed by the shape of array\n\nnp.ones((5,3))","03fa6649":"# Array with all same value\n# To initialize array with all same values use .full function followed by the shape of array and value\n\nnp.full((3,3),7)","81d0adb6":"# If you want to initialize array which has shape of another array\n# e.g using shape of b array (2,3)\nnp.full(b.shape,9)","4fe3be17":"#To initialize array with random decimal numbers use .rand followed by shape of array\n\nnp.random.rand(5,4) # 5,4 is the shape without","f1744e50":"# .rand function uses float \n# for int values use .randint function\n\n#arguments of .randint(low, high=None, size=None, dtype=int) ... low and high are range for the values\n\nnp.random.randint(0,5,size=(5,4))","5edb99ae":"# to use shape of other array use .random_sample\nnp.random.random_sample(b.shape)","7b045672":"# Identity matrix by default is a square matrix ...hence only one parameter is enough\n# Diagonals are always 1 and others are 0\n\nnp.identity(3) # 3x3 matrix","16eea56a":"#To repeat array use .repeat function followed by number of times and the orientation (i.e axis=1(coloum wise) or azis=0(row wise))\n\narr = np.array([[1,2,3]])\n\nr1 = np.repeat(arr,3,axis=0) # 3 times , axis = 0 for doing row wise\n\nprint(r1)","6bbee1d7":"# Create different Patterns using numpy","2be0177b":"#initialize array problem : center element =9 , outer elements = 1 and remaining elements = 0\n\na = np.zeros((5,5),dtype='int16')\na[0,:]=1\na[:,0]=1\na[-1,:]=1\na[:,-1]=1\na[2,2]=9\nprint(a)","63b2425f":"print(b)","eb7981dc":"# Add 2 to entire matrix\nprint(b+2)","14cf964a":"# Subtract 2 to entire matrix\nprint(b-2)","59771eb7":"# Multiply 2 to entire matrix\nprint(b*2)","b9a524f8":"# Divide 2 to entire matrix\nprint(b\/2)","ac8f883b":"# Linear algebra opreations are computed in different way ...element wise operation will not work here\n# Matrix multiplication of two arrays with different shape\n\na = np.ones((2,3))\n\nb = np.full((3,2),2)\nprint(a,\"\\n\",\"\\n\",b)","b16afecf":"# For matrix multiplication use .matmul\n\nnp.matmul(a,b)","ed74fdd5":"# Using dot operation\n\nnp.dot(a,b)","bcdf499c":"# to get determinant of matrix use np.linalg.det(array)\n# e.g with identity\n\nc = np.identity(3)\nnp.linalg.det(c)   #determinant","c861ef24":"# e.g with symmetric matrix\n\nc = np.full((3,3),7)\nnp.linalg.det(c) ","458cbf68":"#reordering array (changing shape of array) using .reshape function\n\nbefore = np.array([[1,2,3],[4,5,6]])\nprint(\"Befor \\n\",before)\nprint(\"Shape :\",before.shape)\n\nafter = before.reshape(1,6)\nprint(\"\\n After \\n\",after)\nprint(\"Shape :\",after.shape)","0fed5cdd":"# Stacking different arrays vertically  (** Array shapes should be same) \n\nv1 = np.array([1,2,3]) \nv2 = np.array([4,5,6])\n\nv3 = np.vstack([v1,v2,v1,v2])\nprint(v3)\nprint(v3.shape)","7378fb30":"# Stacking different arrays horizontally  (** Array shapes should be same) \nh1 = np.array([1,2,3])\nh2 = np.array([4,5,6])\n\nh3 = np.hstack([h1,h2,h1,h2])\nprint(h3)\nprint(h3.shape)","96f8f042":"#Reading from text file use .genfromtxt (filename and delimiter as argument)\n\n#np.genfromtxt(\"filename.txt\",delimiter=',')","aecba844":"#Boolean masking and advance indexing\n\nprint(h3)","953835c0":"# Boolean generates true or false\nh3 > 3","9d67a5cb":"# You can pass list a an index to access multiple elements at same time\n\nh3[[1,3,5]]","fa50c670":"# Any and All function\n# Any returns True even if any one element in array satisifies the condition\n\nnp.any(h3>4)","0dcf1b06":"# All returns True even if all elements in array satisifies the condition\nnp.all(h3<5)","a00ddb9c":"- All above function are commonly used in DS or ML process.\n- For more on Numpy : https:\/\/numpy.org\/doc\/stable\/\n- More on DS and ML : https:\/\/github.com\/chandramouli16\/DataScience-ML-Basics\n- !!! Happy Learning","a5f7aed0":"## Numpy is extreme important python package which is highly recommended for ML, DL, Al algorithms.\n\n### Advantages of Numpy\n\n- 1) Faster processing speed (occupies less memory)\n- 2) Optimised for statistical operations\n- 3) Few lines of code\n- 4) Easy process for creating n-Dimentional Arrays\n","22de9c94":"![numpy%20dimesnsion.png](attachment:numpy%20dimesnsion.png)","7fecee60":"### Arithmetic operations\n#### Basic operation like  +, -, * ... are done at element level","1012d6b1":"### Broadcasting concept : describes how numpy treats arrays with different shapes during arithmetic operations\n### https:\/\/numpy.org\/doc\/stable\/user\/basics.broadcasting.html","4115c5cb":"### Different types of arrays"}}