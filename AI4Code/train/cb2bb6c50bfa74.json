{"cell_type":{"1704d841":"code","31253acb":"code","6ac1f9ec":"code","4183d0f5":"code","20495d94":"code","ee387788":"code","57044aa3":"code","4227a54a":"code","3d750a2f":"code","896eb4e4":"code","7dee2434":"code","9e316845":"code","3521425e":"code","33063fc9":"code","c3e016fc":"code","56f753cb":"code","bd835845":"code","b29b665e":"code","cee90b35":"code","9eec6c02":"code","3987bd05":"code","a4c36569":"code","75d853ea":"code","616d2b4c":"code","949b24df":"code","0c50f510":"code","98965474":"markdown","938381e0":"markdown","1aa00218":"markdown","e5f236d1":"markdown","b271b935":"markdown","5793f234":"markdown"},"source":{"1704d841":"!pip install sorted_months_weekdays\n!pip install sort_dataframeby_monthorweek","31253acb":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport folium\nfrom folium.plugins import MarkerCluster # for world map\n\nfrom sorted_months_weekdays import *\nfrom sort_dataframeby_monthorweek import * #for sorting based on month\n\nimport warnings\nwarnings.filterwarnings('ignore')","6ac1f9ec":"df = pd.read_csv(\"..\/input\/covid19s-impact-on-airport-traffic\/covid_impact_on_airport_traffic.csv\")\ndf.head()","4183d0f5":"# Adding a column to corresponding weekday\ndf['Day'] = pd.to_datetime(df['Date']).dt.day_name()","20495d94":"# Adding a column to corresponding month\ndf['Month'] = pd.to_datetime(df['Date']).dt.month_name()","ee387788":"df['long'] = df['Centroid'].apply(lambda x: x[6:-1].split(' ')[0])\ndf['lat'] = df['Centroid'].apply(lambda x: x[6:-1].split(' ')[1])","57044aa3":"#dropping unwanted columns\ndf.drop(columns=['AggregationMethod','Version','Centroid'], inplace=True )","4227a54a":"df.head()","3d750a2f":"df.shape","896eb4e4":"df.isna().sum()","7dee2434":"df.describe()","9e316845":"df.info()","3521425e":"# changing name of United States of America (the) to United States of America\ndf['Country'] = df['Country'].str.replace(\" (the)\", \"\", regex=False).astype(object)","33063fc9":"#Encode the input Variables\ndef Encode(df):\n    for column in df.columns[~df.columns.isin(['PercentOfBaseline','Date'])]:\n        df[column] = df[column].factorize()[0] # or df['product_name'], mapping = df['product_name'].factorize(), that's why [0] is used because im only taking the labels throwing away the uniques that map back to i\/p\n\n    return df\n\ndf_en = Encode(df.copy())\ndf_en.head()","c3e016fc":"#correlation between variables\ncorrmat = df_en.corr()\ntop_corr_features=corrmat.index\nplt.figure(figsize=(20,10))\ng = sns.heatmap(df_en.corr(), annot=True,cmap='RdYlGn')","56f753cb":"fig = plt.figure(figsize=(20,15))\n\nax = sns.histplot(data=df, x = 'PercentOfBaseline',kde=True,hue='Country', multiple='stack', shrink = .8)\n\nplt.setp(ax.get_legend().get_texts(), fontsize='22') # for legend text\nplt.setp(ax.get_legend().get_title(), fontsize='32') # for legend title\n\nplt.ylabel(\"Count\",size=20)\nplt.xlabel(\"Percentage of baseline\",size=20)\nplt.title('Country wise percentage of baseline', size = 20)\nplt.tick_params(labelsize=15)\nplt.show()","bd835845":"country_name = ['Australia', 'Chile', 'Canada', 'United States of America']\ncount_list = []\nfor i in country_name:\n    airport_count = len(df.AirportName[df['Country']==i].value_counts())\n    count_list.append(airport_count)\ncount_list","b29b665e":"fig = plt.figure(figsize=(20,7))\nplt.bar(country_name, count_list)\nplt.ylabel(\"No.of Airports \",size=20)\nplt.xlabel(\"Country\",size=20)\nplt.title(\"Country's airport count\", size = 20)\nplt.tick_params(labelsize=15)\nplt.show()","cee90b35":"def make_autopct(values):\n    def my_autopct(pct):\n        total = sum(values)\n        val = int(round(pct*total\/100.0))\n        return '{p:.2f}%'.format(p=pct)\n    return my_autopct","9eec6c02":"df['Country'].value_counts()","3987bd05":"labels = df['Country'].value_counts().keys()\nvalues = df['Country'].value_counts().values\nfig1, ax1 = plt.subplots()\ncolors = ['skyblue','pink', 'yellow', 'green']\nax1.pie(values, labels=labels, autopct=make_autopct(values),shadow=True,\n        startangle=90,colors=colors, radius=3)\nplt.show()","a4c36569":"world_map= folium.Map(tiles=\"cartodbpositron\")\nmarker_cluster = MarkerCluster().add_to(world_map)","75d853ea":"for i in range(len(df)):\n    lat = df.iloc[i]['lat']\n    long = df.iloc[i]['long']\n    radius=5\n    folium.CircleMarker(location = [lat, long], radius=radius,fill =True).add_to(marker_cluster)\n    \nworld_map","616d2b4c":"for i in df['AirportName'].unique():\n    df_baseline = df[['PercentOfBaseline','Date']][df['AirportName']==i].sort_values('Date')\n    \n    fig = plt.figure(figsize=(60,20))\n\n    sns.lineplot(data=df_baseline, x = \"Date\", y=\"PercentOfBaseline\")\n\n    plt.xticks(rotation=90)\n    plt.ylabel(\"PercentOfBaseline\",size=50)\n    plt.xlabel(\"Date\",size=50)\n    plt.yticks(fontsize = 40)\n\n    plt.title(i, size = 60)\n    plt.grid()\n\nplt.show()\n","949b24df":"for i in df['Country'].unique():\n    \n    df_month = df[['PercentOfBaseline', 'Month']][df['Country']==i].sort_values('Month')\n    \n    df_month_avg = df_month.groupby('Month', as_index=False)['PercentOfBaseline'].mean()\n    \n    df_month_avg_sort = Sort_Dataframeby_Month(df=df_month_avg,monthcolumnname='Month')\n    \n    df_month_avg_sort.plot.bar(x='Month', y='PercentOfBaseline', figsize = (20,10))\n\n    plt.ylabel(\"Average percent of Baseline\",size=25)\n    plt.xlabel(\"Month\",size=25)\n    plt.title(i, size = 30)\n    plt.tick_params(labelsize=20)\n    plt.show()","0c50f510":"\nfor i in df['AirportName'].unique():\n    \n    df_month = df[['PercentOfBaseline', 'Month']][df['AirportName']==i].sort_values('Month')\n    df_month_avg = df_month.groupby('Month', as_index=False)['PercentOfBaseline'].mean()  \n    df_month_avg_sort = Sort_Dataframeby_Month(df=df_month_avg,monthcolumnname='Month')\n    \n    df_month_avg_sort.plot.bar(x='Month', y='PercentOfBaseline', figsize = (20,10))\n\n    plt.ylabel(\"Average percent of Baseline\",size=25)\n    plt.xlabel(\"Month\",size=25)\n    plt.title(i, size = 30)\n    plt.tick_params(labelsize=20)\n    \nplt.show()\n\n","98965474":"### Airport's Avg PercentOfBaseline per month","938381e0":"### Country's Avg PercentOfBaseline per month","1aa00218":"### PercentOfBaseline of each airport","e5f236d1":"### Country with airports count","b271b935":"### Country wise dataset distribution","5793f234":"# Exploratory Data Analysis"}}