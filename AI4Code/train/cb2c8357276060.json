{"cell_type":{"1697be65":"code","f0a825d2":"code","ddf230c2":"code","4321a150":"code","370fa71d":"code","309a086d":"code","cc81954c":"code","e3a639e2":"code","83f7e517":"code","8f6a5228":"code","d7c56b42":"code","3c118d4e":"code","27eab40d":"code","c9a9680a":"code","a8b38633":"code","5b4d0c70":"code","19bdbca0":"code","b1642b50":"code","7f0e0a86":"code","d3303576":"code","cb2b3026":"code","b0e6526f":"markdown","d052ce9a":"markdown"},"source":{"1697be65":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","f0a825d2":"dataPath = \"\/kaggle\/input\/m5-forecasting-accuracy\/\"\ntimesteps = 28","ddf230c2":"dt = pd.read_csv(dataPath + \"\/sales_train_validation.csv\")\ndt.head(10)","4321a150":"def downcast_dtypes(df):\n    float_cols = [c for c in df if df[c].dtype == \"float64\"]\n    int_cols = [c for c in df if df[c].dtype in [\"int64\", \"int32\"]]\n    df[float_cols] = df[float_cols].astype(np.float32)\n    df[int_cols] = df[int_cols].astype(np.int16)\n    return df","370fa71d":"dt = downcast_dtypes(dt)","309a086d":"dt = dt.T    \ndt.head(10)","cc81954c":"startDay = 350\ndt = dt[6 + startDay:]\ndt.head(10)","e3a639e2":"calendar = pd.read_csv(dataPath + \"\/calendar.csv\")","83f7e517":"daysBeforeEvent = pd.DataFrame(np.zeros((1969,1)))","8f6a5228":"daysBeforeEventTest = daysBeforeEvent[1913:1941]\n\ndaysBeforeEvent = daysBeforeEvent[startDay:1913]","d7c56b42":"daysBeforeEvent.columns = [\"oneDayBeforeEvent\"]\ndaysBeforeEvent.index = dt.index","3c118d4e":"dt = pd.concat([dt, daysBeforeEvent], axis = 1)","27eab40d":"dt.head(10)","c9a9680a":"# Feature Scaling\nfrom sklearn.preprocessing import MinMaxScaler\nsc = MinMaxScaler(feature_range = (0, 1))\ndt_scaled = sc.fit_transform(dt)","a8b38633":"X_train = []\ny_train = []\nfor i in range(timesteps, 1913 - startDay):\n    X_train.append(dt_scaled[i-timesteps:i])\n    y_train.append(dt_scaled[i][0:30490])","5b4d0c70":"del dt_scaled","19bdbca0":"X_train = np.array(X_train)\ny_train = np.array(y_train)\nprint(X_train.shape)\nprint(y_train.shape)","b1642b50":"from keras.models import Sequential\nfrom keras.layers import LSTM\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\n\n\nregressor = Sequential()\nregressor.add(LSTM(50, input_shape = (X_train.shape[1], X_train.shape[2])))\nregressor.add(Dropout(0.2))\nregressor.add(Dense(units = 30490))\n\n# Compiling the RNN\nregressor.compile(optimizer = 'adam', loss = 'mean_squared_error')\n\n# Fitting the RNN to the Training set\nepoch_no = 30\nbatch_size_RNN = 32\nregressor.fit(X_train, y_train, epochs = epoch_no, batch_size = batch_size_RNN)","7f0e0a86":"inputs= dt[-timesteps:]\ninputs = sc.transform(inputs)","d3303576":"X_test = []\nX_test.append(inputs[0:timesteps])\nX_test = np.array(X_test)\npredictions = []\n\nfor j in range(timesteps,timesteps + 28):\n#X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))\n    predicted_stock_price = regressor.predict(X_test[0,j - timesteps:j].reshape(1, timesteps, 30491))\n    testInput = np.column_stack((np.array(predicted_stock_price), daysBeforeEventTest[0][1913 + j - timesteps]))\n    X_test = np.append(X_test, testInput).reshape(1,j + 1,30491)\n    predicted_stock_price = sc.inverse_transform(testInput)[:,0:30490]\n    predictions.append(predicted_stock_price)","cb2b3026":"import time\n\nsubmission = pd.DataFrame(data=np.array(predictions).reshape(28,30490))\n\nsubmission = submission.T\n    \nsubmission = pd.concat((submission, submission), ignore_index=True)\n\nsample_submission = pd.read_csv(dataPath + \"\/sample_submission.csv\")\n    \nidColumn = sample_submission[[\"id\"]]\n    \nsubmission[[\"id\"]] = idColumn  \n\ncols = list(submission.columns)\ncols = cols[-1:] + cols[:-1]\nsubmission = submission[cols]\n\ncolsdeneme = [\"id\"] + [f\"F{i}\" for i in range (1,29)]\n\nsubmission.columns = colsdeneme\n\ncurrentDateTime = time.strftime(\"%d%m%Y_%H%M%S\")\n\nsubmission.to_csv(\"lstm_submission.csv\", index=False)","b0e6526f":"## LSTM","d052ce9a":"# Data Preparation"}}