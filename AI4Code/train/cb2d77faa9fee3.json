{"cell_type":{"0d1bd594":"code","5f2f61b9":"code","410bfdf4":"code","66c87716":"code","0aa8410b":"code","f1a45b37":"code","db73315d":"code","313554f9":"code","3c5bdd8a":"code","ce13b7d4":"code","a7616856":"code","4f746e6e":"code","5e065896":"code","3e30dd6e":"code","cef5c5c0":"code","78dea4d5":"code","ce074c14":"code","d16400a0":"code","4d9d6e3b":"markdown","63afecfe":"markdown","981b8c78":"markdown","c382e423":"markdown","9d52d836":"markdown","32715d43":"markdown","8da11527":"markdown","b298409f":"markdown"},"source":{"0d1bd594":"import pandas as pd\nimport numpy as np","5f2f61b9":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\nprint(\"train.shape\u306e\u5927\u304d\u3055:\",train.shape)\nprint(\"test.shape\u306e\u5927\u304d\u3055:\",test.shape)","410bfdf4":"#12\u306e\u7279\u5fb4\u91cf\u304c\u5b58\u5728\u3059\u308b\u4e8b\u3092\u78ba\u8a8d\ntrain.head()","66c87716":"#11\u306e\u7279\u5fb4\u91cf\u304c\u5b58\u5728\u3059\u308b\u4e8b\u3092\u78ba\u8a8d\ntest.head()\n\n#\u8a13\u7df4\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u3042\u308b\"Survived\"\u304c\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u306f\u5b58\u5728\u3057\u306a\u3044\n#\u4eca\u56de\u306f\u3053\u306e Survived\u3000\u3092\u76ee\u7684\u5909\u6570\u3068\u3057\u3066\u5206\u6790\u3057\u3066\u3044\u304f","0aa8410b":"#dataFrame.describe()\u95a2\u6570:\u57fa\u672c\u7d71\u8a08\u91cf\u3092\u78ba\u8a8d\ntrain.describe()\n#count\u306e\u884c\u3092\u78ba\u8a8d\n#Age\u304c\u672a\u8a2d\u5b9a\u306e\u884c\u6570\u304c\u3000\uff08891-714\uff09\uff1d177\u3000\u884c\u3042\u308b","f1a45b37":"test.describe()\n#count\u306e\u884c\u3092\u78ba\u8a8d\n#Age\u304c\u672a\u8a2d\u5b9a\u306e\u884c\u6570\u304c\u3000\uff08418-332\uff09\uff1d\uff18\uff16\u3000\u884c\u3042\u308b\n#Fare\u304c\u672a\u8a2d\u5b9a\u306e\u884c\u6570\u304c\u3000\uff08418-417\uff09\uff1d1\u3000\u884c\u3042\u308b","db73315d":"def kesson_table(df): \n        null_val = df.isnull().sum()\n        percent = 100 * df.isnull().sum()\/len(df)\n        kesson_table = pd.concat([null_val, percent], axis=1)\n        kesson_table_ren_columns = kesson_table.rename(\n        columns = {0 : '\u6b20\u640d\u6570', 1 : '%'})\n        return kesson_table_ren_columns\n\nprint(\"\u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u60c5\u5831\")\nkesson_table(train)","313554f9":"print(\"\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u60c5\u5831\")\nkesson_table(test)","3c5bdd8a":"# \u2461\u6b20\u640d\u30c7\u30fc\u30bf\u306e\u4e8b\u524d\u51e6\u7406\n# \u2461-(1) \u6b20\u640d\u30c7\u30fc\u30bf\u3092\u4ee3\u7406\u30c7\u30fc\u30bf\u306b\u5165\u308c\u66ff\u3048\u308b\n# \u300cCabin\u300d\u306f\u4e88\u6e2c\u30e2\u30c7\u30eb\u3067\u4f7f\u308f\u306a\u3044\u306e\u3067\u3001\u300cAge\u300d\u3068\u300cEmbarked\u300d\u306e2\u3064\u306e\u6b20\u640d\u30c7\u30fc\u30bf\u3092\u88dc\u5b8c\u3059\u308b\n\n#\u8a13\u7df4\u30c7\u30fc\u30bf\u306eAge\u306e\u6b20\u640d\u7b87\u6240\u306b\u3001\u8a13\u7df4\u30c7\u30fc\u30bf\u306eAge\u306e\u4e2d\u592e\u5024\u3092\u4ee3\u5165\u3059\u308b\n# pandas.DataFrame.fillna() \u6b20\u640d\u5024\u3092\u5f15\u6570\u306e\u5024\u306b\u7f6e\u304d\u63db\u3048\u308b\ntrain[\"Age\"] = train[\"Age\"].fillna(train[\"Age\"].median())\n#\u8a13\u7df4\u30c7\u30fc\u30bf\u306eEmbarked\u306e\u6b20\u640d\u7b87\u6240\u306b\u3001S\u3092\u4ee3\u5165\u3059\u308b\ntrain[\"Embarked\"] = train[\"Embarked\"].fillna(\"S\")\n\n#\u8a13\u7df4\u30c7\u30fc\u30bf\u306b\u3066\u6b20\u640d\u304c\u306a\u304f\u306a\u3063\u305f\u4e8b\u3092\u78ba\u8a8d(Cabin\u306f\u9664\u304f)\nkesson_table(train)","ce13b7d4":"# \u2461-(2) \u6587\u5b57\u5217\u30ab\u30c6\u30b4\u30ea\u5217\u30c7\u30fc\u30bf\u3092\u6570\u5b57\u3078\u5909\u63db\n# \u4e88\u60f3\u3067\u4f7f\u3046\u9805\u76ee\u3067\u6587\u5b57\u5217\u3092\u5024\u3068\u3057\u3066\u6301\u3063\u3066\u3044\u308b\u30ab\u30e9\u30e0\u306f\u300cSex\u300d\u3068\u300cEmbarked\u300d\n# Sex\u306f\u300cmale\u300d\u300cfemale\u300d\u306e\uff12\u3064\u306e\u6587\u5b57\u5217\u5024\n# Embarked\u306f\u306f\u300cS\u300d\u300cC\u300d\u300cQ\u300d\u306e3\u3064\u306e\u6587\u5b57\u5217\u5024\u3000\u3053\u308c\u3089\u3092\u6570\u5b57\u306b\u5909\u63db\u3059\u308b\u3002\n\n# Sex\u306b\u3066male\u30920 female\u30921\u3000\u306b\u5909\u63db\ntrain[\"Sex\"][train[\"Sex\"] == \"male\"] = 0\ntrain[\"Sex\"][train[\"Sex\"] == \"female\"] = 1\n\n# Embarked\u306b\u3066S\u30920 C\u30921\u3000Q\u30922 \u306b\u5909\u63db\ntrain[\"Embarked\"][train[\"Embarked\"] == \"S\" ] = 0\ntrain[\"Embarked\"][train[\"Embarked\"] == \"C\" ] = 1\ntrain[\"Embarked\"][train[\"Embarked\"] == \"Q\"] = 2\n\n# \u6700\u521d\u306e10\u884c\u3092\u898b\u3066\u5909\u63db\u3055\u308c\u305f\u304b\u3092\u78ba\u8a8d\ntrain.head(10)","a7616856":"#\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u304a\u3044\u3066\u3082\u540c\u69d8\u306b\u3001\u6b20\u640d\u30c7\u30fc\u30bf\u306e\u4e8b\u524d\u51e6\u7406\u3092\u884c\u3046\ntest[\"Age\"] = test[\"Age\"].fillna(test[\"Age\"].median())\ntest[\"Sex\"][test[\"Sex\"] == \"male\"] = 0\ntest[\"Sex\"][test[\"Sex\"] == \"female\"] = 1\ntest[\"Embarked\"][test[\"Embarked\"] == \"S\"] = 0\ntest[\"Embarked\"][test[\"Embarked\"] == \"C\"] = 1\ntest[\"Embarked\"][test[\"Embarked\"] == \"Q\"] = 2\n#\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u306fFare\u304c\u4e00\u3064\u6b20\u640d\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u4e2d\u592e\u5024\u3092\u8a2d\u5b9a\u3059\u308b\ntest.Fare[152] = test.Fare.median()\n\n# \u6700\u521d\u306e10\u884c\u3092\u898b\u3066\u5909\u63db\u3055\u308c\u305f\u304b\u3092\u78ba\u8a8d\ntest.head(10)","4f746e6e":"# \u8aac\u660e\u5909\u6570\u3068\u3057\u3066\u306f\"Pclass\",\"Age\",\"Sex\",\"Fare\", \"SibSp\", \"Parch\", \"Embarked\"\u3092\u4f7f\u7528\u3059\u308b\nfeatures_col = [\"Pclass\",\"Age\",\"Sex\",\"Fare\", \"SibSp\", \"Parch\", \"Embarked\"]\nfeatures = train[features_col].values\n# \u76ee\u7684\u5909\u6570\u3068\u3057\u3066\"Survived\"\u3092\u53d6\u5f97\ntarget = train[\"Survived\"].values","5e065896":"# from xgboost import XGBClassifier\n# from sklearn.model_selection import GridSearchCV\n# #\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u306e\u7bc4\u56f2\u3092\u6307\u5b9a\n# parameters = {\n#     \"n_estimators\":[i for i in range(10,100,10)],\n#     \"learning_rate\":[10,1,0.1,0.01],\n#     \"max_depth\":[i for i in range(1,5,1)],\n#     \"random_state\":[3],\n# }\n# #\u4ea4\u5dee\u691c\u8a3c+\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u306b\u3088\u308a\u6700\u826f\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u691c\u7d22\n# clf = GridSearchCV(XGBClassifier(), parameters, cv=5)\n# clf.fit(features, target)","3e30dd6e":"# print(\"\u6700\u826f\u30d1\u30e9\u30e1\u30fc\u30bf: {}\".format(clf.best_params_))\n# print(\"\u6700\u826f\u4ea4\u5dee\u691c\u8a3c\u30b9\u30b3\u30a2: {:.2f}\".format(clf.best_score_))\n# # \u6700\u826f\u30d1\u30e9\u30e1\u30fc\u30bf: {'criterion': 'friedman_mse', 'learning_rate': 0.01, 'max_depth': 4, 'min_samples_split': 2, 'random_state': 3}\n# # \u6700\u826f\u4ea4\u5dee\u691c\u8a3c\u30b9\u30b3\u30a2: 0.83","cef5c5c0":"# from xgboost import XGBClassifier\n# # \u6700\u826f\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u6539\u3081\u3066XGBClassifier\u306e\u4f5c\u6210\n# xgb_tree = XGBClassifier(max_depth=3, learning_rate=0.01, n_estimators=50, random_state=3)\n# # \u4e88\u6e2c\u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u3055\u305b\u308b\n# xgb_tree.fit(features, target)\n# # \u9069\u5408\u5177\u5408\u3092\u78ba\u8a8d 0.8316498316498316\n# print(\"\u8a13\u7df4\u30c7\u30fc\u30bf\u30b9\u30b3\u30a2:\",xgb_tree.score(features,target))\n\nimport lightgbm as lgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n# X_train\u3068Y_train\u3092train\u3068valid\u306b\u5206\u5272\ntrain_x, valid_x, train_y, valid_y = train_test_split(features, target, test_size=0.33, random_state=0)\n\n# lab.Dataset\u3067train\u3068valid\u3092\u4f5c\u3063\u3066\u304a\u304f\nlgb_train = lgb.Dataset(train_x, train_y)\nlgb_eval = lgb.Dataset(valid_x, valid_y)\n \nparams = {\n    'task': 'train',\n    'boosting_type': 'gbdt',\n    'objective': 'regression',\n    'metric': {'l2'},\n    'num_leaves': 200,\n    'learning_rate': 0.003,\n    'num_iterations':100,\n    'feature_fraction': 0.52,\n    'bagging_fraction': 0.79,\n    'bagging_freq': 7,\n    'verbose': 0\n}\n\ngbm = lgb.train(params,\n                lgb_train,\n                num_boost_round=5000,\n                valid_sets=lgb_eval,\n                early_stopping_rounds=1000)","78dea4d5":"# valid_x\u306b\u3064\u3044\u3066\u63a8\u8ad6\noof = (gbm.predict(valid_x) > 0.5).astype(int)\nprint('\u30b9\u30b3\u30a2\uff1a', round(accuracy_score(valid_y, oof)*100,2)) ","ce074c14":"test_pred = np.zeros((len(test)))\n# \u300ctest\u300d\u306e\u8aac\u660e\u5909\u6570\u306e\u5024\u3092\u53d6\u5f97\ntest_features = test[features_col].values\n# test\u306b\u3064\u3044\u3066\u4e88\u6e2c\ntest_pred = (gbm.predict(test_features) > 0.5).astype(int)","d16400a0":"# \u4e8c\u5024\u306b\u5206\u985e\u3059\u308b\nmy_prediction = (test_pred > 0.5).astype(int)\n\n# \u5143\u306e\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u304b\u3089PassengerId\u3092\u53d6\u5f97\nPassengerId = np.array(test[\"PassengerId\"]).astype(int)\n# my_prediction(\u4e88\u6e2c\u30c7\u30fc\u30bf\uff09\u3068PassengerId\u3092\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3078\u843d\u3068\u3057\u8fbc\u3080\nmy_solution = pd.DataFrame(my_prediction, PassengerId, columns = [\"Survived\"])\n# submission.csv\u3068\u3057\u3066\u66f8\u304d\u51fa\u3057\u3000\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30e9\u30d9\u30eb\u3068\u3057\u3066PassengerId\u3092\u6307\u5b9a\nmy_solution.to_csv(\"lgbm2.csv\", index_label = [\"PassengerId\"])","4d9d6e3b":"## \u524d\u51e6\u7406","63afecfe":"### \u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u4e88\u6e2c\u3092\u884c\u3046","981b8c78":"## Titanic - LightGBM\u3092\u7528\u3044\u305f\u5206\u6790\n\u5bfe\u8c61\u30b3\u30f3\u30da  \nhttps:\/\/www.kaggle.com\/c\/titanic  \n\u53c2\u8003\u8a18\u4e8b  \nhttps:\/\/lp-tech.net\/articles\/JsWwf\/view","c382e423":"### \u8a13\u7df4\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u6e96\u5099(\u8aac\u660e\u5909\u6570\/\u76ee\u7684\u5909\u6570\u306e\u751f\u6210)","9d52d836":"## LightGBM\u306e\u69cb\u7bc9","32715d43":"## \u6b20\u640d\u5024\u306e\u78ba\u8a8d","8da11527":"## \u30c7\u30fc\u30bf\u306e\u53d6\u5f97\/\u78ba\u8a8d","b298409f":"## GridSearchCV\u306b\u3088\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0"}}