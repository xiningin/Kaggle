{"cell_type":{"b4b68e35":"code","5ced3b27":"code","9b5e6cb3":"code","225cd084":"code","511b5941":"code","22a4554c":"code","bc0090ab":"code","4eaebc82":"code","1e427a72":"code","9f9e39d4":"code","7285715a":"code","e1d3c147":"code","69d49e0c":"code","704b52a9":"code","e40651ed":"code","e08bcfe5":"code","05708a60":"code","455c424b":"markdown","9df2799a":"markdown","a045d23c":"markdown","fd6f5feb":"markdown","8f10da46":"markdown","9bab6946":"markdown","1a401dbf":"markdown"},"source":{"b4b68e35":"# Importing necessary libraries\nimport sys\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","5ced3b27":"# Loading data\ndata = pd.read_csv('..\/input\/creditcard.csv')","9b5e6cb3":"# View DataFrame\ndata.head()","225cd084":"data.shape","511b5941":"data.columns","22a4554c":"data.info()","bc0090ab":"data.describe()  #statistical inference","4eaebc82":"# Visualising every feature\ndata.hist(figsize=(20,20))\nplt.show()","1e427a72":"# Determine number of fraud cases in dataset\nFraud = data[data['Class'] == 1]\nValid = data[data['Class'] == 0]\n\noutlier_fraction = len(Fraud)\/(len(Valid))\nprint(outlier_fraction)\n\nprint('Fraud Cases : {}'.format(len(Fraud)))\nprint('Valid Cases : {}'.format(len(Valid)))","9f9e39d4":"# Correlation\ncorr = data.corr()\nfigure = plt.figure(figsize=(12,10))\nsns.heatmap(corr)","7285715a":"# Splitting data\nx = data.iloc[:,:-1].values\ny = data.iloc[:,-1].values\n\nfrom sklearn.model_selection import train_test_split\nxtr,xtest,ytr,ytest = train_test_split(x,y,test_size=0.3,random_state=0)","e1d3c147":"xtr.shape,ytr.shape","69d49e0c":"xtest.shape,ytest.shape","704b52a9":"from xgboost import XGBClassifier\nxg = XGBClassifier(random_state=0)\nxg.fit(xtr,ytr)\nxg.score(xtr,ytr)","e40651ed":"pred = xg.predict(xtest)","e08bcfe5":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(pred,ytest)\ncm","05708a60":"from sklearn.metrics import accuracy_score\naccuracy_score(pred,ytest)","455c424b":"<h3>Checking Accuracy<\/h3>","9df2799a":"<h1>CREDIT CARD FRAUD DETECTION<\/h1>\n<p>The datasets contains transactions made by credit cards in September 2013 by european cardholders. This dataset presents transactions that occurred in two days, where we have 492 frauds out of 284,807 transactions. The dataset is highly unbalanced, the positive class (frauds) account for 0.172% of all transactions.\n\nIt contains only numerical input variables which are the result of a PCA transformation. Unfortunately, due to confidentiality issues, we cannot provide the original features and more background information about the data. Features V1, V2, ... V28 are the principal components obtained with PCA, the only features which have not been transformed with PCA are 'Time' and 'Amount'. Feature 'Time' contains the seconds elapsed between each transaction and the first transaction in the dataset. The feature 'Amount' is the transaction Amount, this feature can be used for example-dependant cost-senstive learning. Feature 'Class' is the response variable and it takes value 1 in case of fraud and 0 otherwise.<\/p>","a045d23c":"<h1>XGBoost<\/h1>\n<p>XGBoost is an implementation of gradient boosted decision trees designed for speed and performance.<\/p>","fd6f5feb":"<h3>Initialising and fitting data to the model<\/h3>","8f10da46":"<h1>Data Preprocessing<\/h1>","9bab6946":"<h3>Validating on test data<\/h3>","1a401dbf":"<p>Kudos! We don't have any missing values in our data<\/p>\n<p>30 columns in our data is float, and 1 is int<\/p>"}}