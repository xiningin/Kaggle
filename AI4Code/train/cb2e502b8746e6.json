{"cell_type":{"263eaa58":"code","edfb3609":"code","60d4aec3":"code","8a6b53d1":"code","e83de6b3":"code","fe3e672e":"code","67eb03f5":"code","62f633f0":"code","350fb259":"code","14f44573":"code","a217a7ff":"code","639bbd04":"code","b26e51a4":"code","3d645fc7":"markdown","0a93d32b":"markdown"},"source":{"263eaa58":"import numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D,MaxPool2D,Dense,Flatten,MaxPooling2D\nfrom keras.preprocessing import image\nfrom keras_preprocessing.image import ImageDataGenerator\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.callbacks import ModelCheckpoint\nfrom keras import optimizers\nfrom keras.utils import np_utils\nfrom sklearn.utils import shuffle\nimport glob\nimport matplotlib.pyplot as plt\nfrom keras.models import model_from_json","edfb3609":"# creating dictionary to convert labels of fruits into numeric label which cna be used in our deep learning models\nkeys =0\nfruitname_label_map = {}\n# accessing names of fruits from the directory we have \nfor sub_folder in glob.glob('\/kaggle\/input\/fruits\/fruits-360\/Training\/*') :\n    name = sub_folder.split('\/')[-1]\n    # creating dictionary with the help of names we obtain\n    fruitname_label_map[name] = keys\n    keys += 1\n    \nfruitname_label_map","60d4aec3":"# reversing above dictionary to convert labels to name of fruit\nfruitlabel_name_map = {v: k for k, v in fruitname_label_map.items()}\nfruitlabel_name_map","8a6b53d1":"# rotating images to 20degree rescaling images value from range 0-255 to 0-1 and other augmentation process\n\nimg_generator = ImageDataGenerator(rotation_range=20, rescale=1.\/255, horizontal_flip=True, shear_range=0.1)\n# shear_range: Float. Shear Intensity (Shear angle in counter-clockwise direction in degrees)\n\n# using flow_from _directory which best suit with the type folders we have in our dataset it labels the class according to the folders we have\n# and we don't need to wory about labaling data on our own.\ntrain = img_generator.flow_from_directory(directory=\"\/kaggle\/input\/fruits\/fruits-360\/Training\/\", \n                                                    target_size=(100, 100), # size of each image\n                                                    batch_size=32, # creating batches as it will easy computer processing\n                                                    class_mode=\"categorical\",\n                                                    shuffle=True, # random pick the data\n                                                    seed=0   # seed set so that random value fixed for different computers\n                                                   )\n","e83de6b3":"# performing sam for test data\ntest_gen = ImageDataGenerator(rescale=1.\/255)\ntest = test_gen.flow_from_directory(directory=\"\/kaggle\/input\/fruits\/fruits-360\/Test\/\",\n                                     target_size=(100, 100),\n                                     color_mode=\"rgb\",\n                                     batch_size=32,\n                                     class_mode=\"categorical\",\n                                     shuffle=True,\n                                     seed=0\n                                    )","fe3e672e":"# deep learning model \nmodel = Sequential()\nmodel.add(Conv2D(filters=16,kernel_size=(5,5),activation=\"relu\",input_shape=(100,100,3)))\nmodel.add(MaxPool2D(strides=2, pool_size=(2,2)))\nmodel.add(Conv2D(filters=32,kernel_size=(5,5),activation=\"relu\"))\nmodel.add(MaxPool2D(strides=2, pool_size=(2,2)))\nmodel.add(Conv2D(filters=64,kernel_size=(5,5),activation=\"relu\"))\nmodel.add(MaxPool2D(strides=2, pool_size=(2,2)))\nmodel.add(Conv2D(filters=128,kernel_size=(5,5),activation=\"relu\"))\nmodel.add(MaxPool2D(strides=2, pool_size=(2,2)))\nmodel.add(Flatten())\nmodel.add(Dense(1024,activation=\"relu\"))\nmodel.add(Dense(256,activation=\"relu\"))\nmodel.add(Dense(125,activation=\"softmax\"))\nmodel.summary()","67eb03f5":"checkpoint = ModelCheckpoint(\"fruits_classifier.h5\", monitor = 'val_acc', verbose=1, save_best_only=True, save_weights_only=False, mode='auto', period=1)\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=optimizers.Adam(), metrics = ['acc'])","62f633f0":"# training deep network using fit_generate as we have augmented the data callback is used to monitor the loss and accuracy of the model\n# in each step \/ epoch\ntrained_model = model.fit_generator(train, epochs=15,shuffle=False,validation_data=test,callbacks=[checkpoint])","350fb259":"# Plots visualize the models we have trained above \nep = range(1,len(trained_model.history['acc'])+1)\nplt.plot(ep, trained_model.history['acc'], label = 'Training')\nplt.plot(ep, trained_model.history['val_acc'], label='Validation')\nplt.title('Accuracy Plot')\nplt.legend()\nplt.savefig('Accuracy.jpg')","14f44573":"classifier_json = model.to_json()\nwith open(\"fruit_model.json\", \"w\") as json_file:\n    json_file.write(classifier_json)\nmodel.save_weights(\"fruit_model_weights.h5\")\nprint(\"Model Saved.....\")","a217a7ff":"json_file = open('\/kaggle\/working\/fruit_model.json', 'r')\nmodel_json = json_file.read()\njson_file.close()\nfruit_clf = model_from_json(model_json)\n\nfruit_clf.load_weights(\"\/kaggle\/working\/fruit_model_weights.h5\")\nprint(\"Model loaded.....\")","639bbd04":"\nxtest,ytest=test.next()  # get x and y to test on\nypred = fruit_clf.predict(xtest)   # model gives preidction\n\npred_result = ypred.argmax(axis=1)   # taking class with max value\ntest_result = ytest.argmax(axis=1)\n","b26e51a4":"for i in range(32):\n    print(\"Actual o\/p:{} ---- Predicted o\/p:{}\".format(fruitlabel_name_map[test_result[i]],fruitlabel_name_map[pred_result[i]]))","3d645fc7":"## showing the answers below","0a93d32b":"## for total model was trained for 25 epochs and the plot don't show previous epochs as the kernel didn't restart and training again will take lot of time."}}