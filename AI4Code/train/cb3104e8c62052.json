{"cell_type":{"366aef0e":"code","541b87b5":"code","4eaf24b0":"code","e4521d42":"code","480819a8":"code","93562000":"code","b2632ca7":"code","f0e54aca":"code","f1b9a0e1":"code","98176dc4":"code","ec11a472":"code","f3af595c":"code","79ef563b":"code","288c2a35":"code","fd92a9ae":"code","521d2cc3":"code","5bc0058f":"code","d6a8f335":"code","a1555459":"code","8c28d9d9":"code","527bc780":"code","5a9e0de9":"code","113f904f":"code","24977f5f":"markdown","b332aae8":"markdown","2c7f1613":"markdown","ec871f73":"markdown","b7cf72d6":"markdown","4653419c":"markdown","94eaf56e":"markdown","79a25fae":"markdown","26d3af76":"markdown","5fdccdf9":"markdown"},"source":{"366aef0e":"# import libraries\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\n\nnp.random.seed(2)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\nsns.set(style='white', context='notebook', palette='deep')","541b87b5":"#Load data\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","4eaf24b0":"y_train = train['label']\nX_train = train.drop(labels = ['label'], axis=1)\n\ndel train","e4521d42":"g = sns.countplot(y_train)\ny_train.value_counts()","480819a8":"X_train.isnull().any().describe()","93562000":"test.isnull().any().describe()","b2632ca7":"# Grayscale normalization to reduce effect of illumination's differences.\nX_train = X_train \/ 255.0\ntest = test \/ 255.0","f0e54aca":"#reshape image in 3 dimension - height = 28px, width = 28px, canal = 1\nX_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","f1b9a0e1":"# Encode labels to one hot vectors\ny_train = to_categorical(y_train, num_classes=10)","98176dc4":"X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size =0.1, random_state=2)","ec11a472":"#example\ng = plt.imshow(X_train[0][:,:,0])","f3af595c":"# Set the CNN model\n# [[Conv2D->relu]*2 -> MaxPool2D -> Dropout]*2 -> Flatten -> Dense -> Dropout -> Out\n\nmodel = Sequential()\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters=64, kernel_size=(3,3), padding='Same', activation='relu'))\nmodel.add(Conv2D(filters=64, kernel_size=(3,3), padding='Same', activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation='softmax'))","79ef563b":"#set the optimizer\n\noptimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)","288c2a35":"#compile the model\n\nmodel.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])","fd92a9ae":"#set a learning rate annealer\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', patience=3, verbose=1, factor=0.5, min_lr=0.00001)","521d2cc3":"epochs = 10\nbatch_size = 86","5bc0058f":"datagen = ImageDataGenerator(\n            featurewise_center=False, \n            samplewise_center= False,\n            featurewise_std_normalization=False,\n            samplewise_std_normalization=False,\n            zca_whitening=False,\n            rotation_range=10,  #randomly rotate image in 0 to 180 degree\n            zoom_range=0.1, #randomly zoom image\n            width_shift_range=0.1, #randomly shift images horizontally\n            height_shift_range=0.1, #randomly shift images vertically\n            horizontal_flip = False, #randomly flip images\n            vertical_flip = False #randomly flip images\n)\ndatagen.fit(X_train)","d6a8f335":"# Fit the model\n# epoch = 1\nclf = model.fit_generator(datagen.flow(X_train, y_train, batch_size=batch_size), epochs=1, validation_data=(X_val, y_val),\n                             verbose=2, steps_per_epoch=X_train.shape[0] \/\/ batch_size, callbacks=[learning_rate_reduction])","a1555459":"# Fit the model\nclf = model.fit_generator(datagen.flow(X_train, y_train, batch_size=batch_size), epochs=epochs, validation_data=(X_val, y_val),\n                             verbose=2, steps_per_epoch=X_train.shape[0] \/\/ batch_size, callbacks=[learning_rate_reduction])","8c28d9d9":"# plot the loss and accuracy curves\nfig, ax = plt.subplots(2,1)\nax[0].plot(clf.history['loss'], color='b', label='Training loss')\nax[0].plot(clf.history['val_loss'], color='r', label='Validation loss', axes=ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(clf.history['acc'], color='b', label='Training accuracy')\nax[1].plot(clf.history['val_acc'], color='r', label='Validation accuracy')\nlegend = ax[1].legend(loc='best', shadow=True)","527bc780":"# Look at confusion matrix \n\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\n# Predict the values from the validation dataset\ny_pred = model.predict(X_val)\n# Convert predictions classes to one hot vectors \ny_pred_classes = np.argmax(y_pred,axis = 1) \n# Convert validation observations to one hot vectors\ny_true = np.argmax(y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(y_true, y_pred_classes) \n# plot the confusion matrix\nplot_confusion_matrix(confusion_mtx, classes = range(10)) ","5a9e0de9":"# predict results\nresults = model.predict(test)\n\n# select the indix with the maximum probability\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")","113f904f":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"digitrecognizer.csv\",index=False)","24977f5f":"## Evaluate the model","b332aae8":"# Digit Recognizer","2c7f1613":"## Normalize the data","ec871f73":"# CNN","b7cf72d6":"## Label encoding","4653419c":"**Reference: [Introduction to CNN Keras 0.997(top 6)](https:\/\/www.kaggle.com\/yassineghouzam\/introduction-to-cnn-keras-0-997-top-6)**","94eaf56e":"## Data augmentation","79a25fae":"## Split training and validation set","26d3af76":"## Check for null and missing values","5fdccdf9":"\n*     Randomly rotate some training images by 10 degrees\n*     Randomly Zoom by 10% some training images\n*     Randomly shift images horizontally by 10% of the width\n*     Randomly shift images vertically by 10% of the height\n"}}