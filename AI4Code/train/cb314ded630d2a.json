{"cell_type":{"1c06d851":"code","7c79645a":"code","5d3957ce":"code","a470d2a5":"code","35dc9fad":"code","ad82dd9f":"code","82710693":"code","52578377":"code","b14b5112":"code","14e9861c":"code","87c1bacd":"code","8183874f":"code","51c4d69f":"code","5f8edabb":"code","fab09834":"code","b439969b":"code","a62e0ff1":"code","e72bd5b9":"code","d158ff7c":"code","1a6b4cf2":"code","9f56c77f":"code","7f3f6298":"code","d8166a10":"code","af424939":"code","395d80ab":"code","af7cdc3c":"code","5c67bd7a":"code","39ee9f6b":"code","0a0007dd":"code","37b39651":"code","c002bdf6":"code","19918530":"code","e38e36fe":"code","c916a8bc":"code","0c78bff0":"code","2d31655d":"code","d57dab3f":"markdown","8b65fcc4":"markdown","8ba64148":"markdown"},"source":{"1c06d851":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","7c79645a":"from sklearn.model_selection import train_test_split,learning_curve\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import tree\nfrom sklearn.cluster import KMeans\nfrom xgboost import XGBClassifier,XGBRFClassifier\nfrom sklearn.metrics import confusion_matrix,accuracy_score","5d3957ce":"plt.style.use('seaborn-talk')\n#plt.style.available","a470d2a5":"from pylab import rcParams\nrcParams['figure.figsize'] = 14,6","35dc9fad":"data = pd.read_csv('\/kaggle\/input\/assay-of-serum-free-light-chain\/flchain.csv').sort_values(\"sample.yr\").reset_index()\ndata.drop([\"Unnamed: 0\",\"index\"],axis=1,inplace=True)","ad82dd9f":"data.head()","82710693":"sns.scatterplot(x=\"kappa\" ,y=\"lambda\" ,data=data,hue=\"flc.grp\",palette=\"coolwarm\")\nplt.show()","52578377":"sns.scatterplot(x=\"futime\" ,y=\"age\",data=data,hue=\"death\",palette=\"coolwarm\")\nplt.show()","b14b5112":"data.shape","14e9861c":"data[\"sex\"].replace(to_replace=[\"M\",\"F\"],value=[1,0],inplace=True)","87c1bacd":"plt.style.use('classic')\nrcParams['figure.figsize'] = 14,6\nsns.heatmap(data.isnull(),yticklabels=False,cmap=\"coolwarm\");","8183874f":"sns.heatmap(data.corr(),annot=True,cmap=\"coolwarm\")\nplt.show()","51c4d69f":"data.isnull().sum()","5f8edabb":"data[\"creatinine\"].fillna(\"?\",inplace=True)\nplt.hist(data.loc[data[\"creatinine\"]!=\"?\"][\"creatinine\"],alpha=0.5,density=True,bins=100)\nplt.title(\"Histogram of Creatinine\")\nplt.show()","fab09834":"data[\"chapter\"].value_counts()","b439969b":"sns.countplot(y=\"chapter\",data=data,palette=\"dark\")\nplt.show()","a62e0ff1":"data.drop([\"creatinine\",\"chapter\"],axis=1,inplace=True)","e72bd5b9":"data.head()","d158ff7c":"data.isnull().sum()","1a6b4cf2":"sns.countplot(x=\"mgus\",hue=\"sex\",data=data)\nplt.legend({\"Female\",\"Male\"})\nplt.show()","9f56c77f":"sns.countplot(x=\"death\",hue=\"sex\",data=data)\nplt.legend({\"Female\",\"Male\"})\nplt.show()","7f3f6298":"sns.countplot(x=\"sex\",data=data)\nplt.xticks([0,1],[\"Female\",\"Male\"])\nplt.show()","d8166a10":"sns.countplot(x=\"flc.grp\",data=data)\nplt.show()","af424939":"sns.countplot(x=\"sample.yr\",data=data)\nplt.show()","395d80ab":"plt.subplot(1,2,1)\nplt.hist(data.loc[data[\"death\"]==1][\"age\"],alpha=0.7,label=\"Death:1\",density=True,bins=20)\nplt.hist(data.loc[data[\"death\"]==0][\"age\"],alpha=0.7,label=\"Death:0\",density=True,bins=20)\nplt.legend()\nplt.title(\"age\")\n\nplt.subplot(1,2,2)\nplt.hist(data.loc[data[\"death\"]==1][\"kappa\"],alpha=0.7,label=\"Death:1\",density=True,bins=30)\nplt.hist(data.loc[data[\"death\"]==0][\"kappa\"],alpha=0.7,label=\"Death:0\",density=True,bins=30)\nplt.title(\"kappa\")\nplt.legend()\nplt.show()","af7cdc3c":"plt.subplot(1,2,1)\nplt.hist(data.loc[data[\"death\"]==1][\"lambda\"],alpha=0.7,label=\"Death:1\",density=True,bins=30)\nplt.hist(data.loc[data[\"death\"]==0][\"lambda\"],alpha=0.7,label=\"Death:0\",density=True,bins=30)\nplt.legend()\nplt.title(\"lambda\")\n\nplt.subplot(1,2,2)\nplt.hist(data.loc[data[\"death\"]==1][\"futime\"],alpha=0.7,label=\"Death:1\",density=True,bins=30)\nplt.hist(data.loc[data[\"death\"]==0][\"futime\"],alpha=0.7,label=\"Death:0\",density=True,bins=30)\nplt.title(\"futime\")\nplt.legend()\nplt.show()","5c67bd7a":"plt.subplot(1,2,1)\nsns.boxplot(x=\"death\",y=\"age\",data=data);\n\nplt.subplot(1,2,2)\nsns.boxplot(x=\"sex\",y=\"age\",data=data);\nplt.xticks([0,1],[\"Female\",\"Male\"])\nplt.show()","39ee9f6b":"from yellowbrick.classifier import ROCAUC\nfrom yellowbrick.classifier import ConfusionMatrix\nfrom yellowbrick.classifier import DiscriminationThreshold","0a0007dd":"X = data.drop(\"death\",axis=1) \ny = data[\"death\"]\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=.35,random_state=42)","37b39651":"lr = LogisticRegression(solver=\"lbfgs\",max_iter=500)\nlr.fit(X_train,y_train)\nscore = lr.score(X_test,y_test)\npred_lr= lr.predict(X_test)\n\nprint(\"=LogisticRegression=\")\nprint(\"Test Variable Score:\",score)\nprint(\"Accuracy Score     :\",accuracy_score(y_test,pred_lr))\n\nplt.figure(figsize=(10,5))\nvisualizer = ROCAUC(lr, classes=[0,1])\nvisualizer.fit(X_train, y_train)        # Fit the training data to the visualizer\nvisualizer.score(X_test, y_test)        # Evaluate the model on the test data\nvisualizer.show();\n\nplt.figure(figsize=(5,4))\ncm = ConfusionMatrix(lr, classes=[0,1])\ncm.fit(X_train, y_train)\ncm.score(X_test, y_test)\ncm.show();","c002bdf6":"gnb = GaussianNB()\ngnb.fit(X_train,y_train)\nscore = gnb.score(X_test,y_test)\npred_knc= gnb.predict(X_test)\n\nprint(\"=GaussianNB=\")\nprint(\"Test Variable Score:\",score)\nprint(\"Accuracy Score     :\",accuracy_score(y_test,pred_knc))\n\nplt.figure(figsize=(10,5))\nvisualizer = ROCAUC(gnb, classes=[0,1])\nvisualizer.fit(X_train, y_train)        # Fit the training data to the visualizer\nvisualizer.score(X_test, y_test)        # Evaluate the model on the test data\nvisualizer.show();\n\nplt.figure(figsize=(5,4))\ncm = ConfusionMatrix(gnb, classes=[0,1])\ncm.fit(X_train, y_train)\ncm.score(X_test, y_test)\ncm.show();","19918530":"knc = KNeighborsClassifier(n_neighbors=24)\nknc.fit(X_train,y_train)\nscore = knc.score(X_test,y_test)\npred_knc= knc.predict(X_test)\n\nprint(\"=KNeighborsClassifier=\")\nprint(\"Test Variable Score:\",score)\nprint(\"Accuracy Score     :\",accuracy_score(y_test,pred_knc))\n\nplt.figure(figsize=(10,5))\nvisualizer = ROCAUC(knc, classes=[0,1])\nvisualizer.fit(X_train, y_train)        # Fit the training data to the visualizer\nvisualizer.score(X_test, y_test)        # Evaluate the model on the test data\nvisualizer.show();\n\nplt.figure(figsize=(5,4))\ncm = ConfusionMatrix(knc, classes=[0,1])\ncm.fit(X_train, y_train)\ncm.score(X_test, y_test)\ncm.show();","e38e36fe":"net = MLPClassifier(max_iter=1000,activation=\"logistic\")\nnet.fit(X_train,y_train)\nscore = net.score(X_test,y_test)\npred_net= net.predict(X_test)\n\nprint(\"=MLPClassifier=\")\nprint(\"Test Variable Score:\",score)\nprint(\"Accuracy Score     :\",accuracy_score(y_test,pred_net))\n\nplt.figure(figsize=(10,5))\nvisualizer = ROCAUC(net, classes=[0,1])\nvisualizer.fit(X_train, y_train)        # Fit the training data to the visualizer\nvisualizer.score(X_test, y_test)        # Evaluate the model on the test data\nvisualizer.show();\n\nplt.figure(figsize=(5,4))\ncm = ConfusionMatrix(net, classes=[0,1])\ncm.fit(X_train, y_train)\ncm.score(X_test, y_test)\ncm.show();","c916a8bc":"dt = tree.DecisionTreeClassifier()\ndt.fit(X_train,y_train)\nscore = dt.score(X_test,y_test)\npred_dt= dt.predict(X_test)\n\nprint(\"=DecisionTreeClassifier=\")\nprint(\"Test Variable Score:\",score)\nprint(\"Accuracy Score     :\",accuracy_score(y_test,pred_dt))\n\nplt.figure(figsize=(10,5))\nvisualizer = ROCAUC(dt, classes=[0,1])\nvisualizer.fit(X_train, y_train)        # Fit the training data to the visualizer\nvisualizer.score(X_test, y_test)        # Evaluate the model on the test data\nvisualizer.show();\n\nplt.figure(figsize=(5,4))\ncm = ConfusionMatrix(dt, classes=[0,1])\ncm.fit(X_train, y_train)\ncm.score(X_test, y_test)\ncm.show();","0c78bff0":"gbc = GradientBoostingClassifier(n_estimators=10,random_state=0)\ngbc.fit(X_train,y_train)\nscore = gbc.score(X_test,y_test)\npred_gbc= gbc.predict(X_test)\n\nprint(\"=GradientBoostingClassifier=\")\nprint(\"Test Variable Score:\",score)\nprint(\"Accuracy Score     :\",accuracy_score(y_test,pred_gbc))\n\nplt.figure(figsize=(10,5))\nvisualizer = ROCAUC(gbc, classes=[0,1])\nvisualizer.fit(X_train, y_train)        # Fit the training data to the visualizer\nvisualizer.score(X_test, y_test)        # Evaluate the model on the test data\nvisualizer.show();\n\nplt.figure(figsize=(5,4))\ncm = ConfusionMatrix(gbc, classes=[0,1])\ncm.fit(X_train, y_train)\ncm.score(X_test, y_test)\ncm.show();","2d31655d":"xg = XGBRFClassifier(learning_rate=0.0001,objective=\"binary:logistic\").fit(X_train,y_train)\nxg.score(X_test,y_test)\nscore = xg.score(X_test,y_test)\npred_xg= xg.predict(X_test)\n\nprint(\"=XGBRFClassifier=\")\nprint(\"Test Variable Score:\",score)\nprint(\"Accuracy Score     :\",accuracy_score(y_test,pred_xg))\n\nplt.figure(figsize=(10,5))\nvisualizer = ROCAUC(xg, classes=[0,1])\nvisualizer.fit(X_train, y_train)        # Fit the training data to the visualizer\nvisualizer.score(X_test, y_test)        # Evaluate the model on the test data\nvisualizer.show();\n\nplt.figure(figsize=(5,4))\ncm = ConfusionMatrix(xg, classes=[0,1])\ncm.fit(X_train, y_train)\ncm.score(X_test, y_test)\ncm.show();","d57dab3f":"# RESULT","8b65fcc4":"*The algorithm performance for classifying \"XGBRF Classifier\" dataset is higher than other classification algorithms.*","8ba64148":"*Since the correlation coefficient of the \"creatinine\" Attribute with other attributes is low, we subtract the missing \"creatinine\" data from the data set instead of estimating.*"}}