{"cell_type":{"9dd94bed":"code","4031fdbd":"code","7bd53abd":"code","e6b748d6":"markdown"},"source":{"9dd94bed":"# !pip install nb_black\n# %load_ext nb_black\nimport pandas as pd\nfrom IPython.core.display import display, HTML\n\n# Import data\ndata_path = \"..\/input\/kaggle-survey-2019\/\"\nmultiple_choice_responses_19 = pd.read_csv(\n    data_path + \"multiple_choice_responses.csv\", engine=\"c\", low_memory=False\n)\nother_text_responses_19 = pd.read_csv(\n    data_path + \"other_text_responses.csv\", engine=\"c\"\n)\nquestions_only_19 = pd.read_csv(data_path + \"questions_only.csv\", engine=\"c\")","4031fdbd":"# TABLE OF CONTENTS\n\n# Iterate questions and add links\n# The questions table is transposed and the first row discarted\nquestionnaire = \"<h1>Table of contents<\/h1><br>\"\nfor index, value in questions_only_19.T[1:].iterrows():\n    questionnaire += f'<a href=\"#{index}\" style=\"text-decoration: none;\"><strong>{index}<\/strong>: {value[0]}<\/a><br>\\n'\n# Display the HTML content\ndisplay(HTML(questionnaire))","7bd53abd":"# Iterate questions and add tables formatted in HTML to a string variable\n# The questions table is transposed and the first row discarted\nquestionnaire = \"\"\nfor index, value in questions_only_19.T[1:].iterrows():\n\n    # QUESTION\n    # --------\n    questionnaire += (\n        f'<span id=\"{index}\"><strong>{index}<\/strong><\/span>: {value[0]}<br>\\n'\n    )\n\n    # NORMAL QUESTION\n    # ---------------\n    # If the question is single choice, it is in the multiple_choice_responses columns\n    if index in multiple_choice_responses_19.columns:\n        # Get the responses sorted by the frequency in descending order\n        question = multiple_choice_responses_19[index][1:].value_counts()\n        # Check if they are more than 10 responses\n        # Get the sum of the rest\n        more_sum = question[10:].sum()\n        # Get the number of discarded responses\n        more_number = len(question[10:])\n        # If they are more than 11 responses:\n        # - show only the 10 first responses\n        # - aggregate the rest and show the summed frequency\n        if more_number > 1:\n            question = question[0:10].append(\n                pd.Series([more_sum], index=[f\"{more_number} more ...\"])\n            )\n        # Add the table formatted in HTML to the summary\n        questionnaire += question.to_frame().to_html(header=False, bold_rows=False)\n        questionnaire += \"<br>\\n\"\n\n    # MULTIPLE CHOICE QUESTION\n    # ------------------------\n    # If the question is multiple choice, the question is followed by _Part_\n    # Get all columns with _Part_\n    multiple_choice = multiple_choice_responses_19.filter(\n        like=f\"{index}_Part_\", axis=\"columns\"\n    )\n    # Drop multiple choice columns with text response\n    multiple_choice = multiple_choice.drop(\n        columns=list(multiple_choice.filter(like=\"_TEXT\"))\n    )\n    # If it is an adequate multiple choice question, print table\n    # In instance, Q14 only have parts with free text responses\n    if multiple_choice.shape[1] > 0:\n        questionnaire += (\n            multiple_choice[1:]  # discard first row\n            .describe()  # describe do a summary with top and count\n            .T[[\"top\", \"count\"]]  # transpose and get only top and count\n            .sort_values(by=\"count\", ascending=False)  # sorty by count\n            .to_html(index=False, header=False)  # export to HTML\n        )\n        questionnaire += \"<br>\\n\"\n\n    # TEXT RESPONSES\n    # --------------\n    # If the question has a free text, the question ends with _TEXT\n    # Get all columns ending with _TEXT\n    other = other_text_responses_19.filter(regex=f\"{index}_.*_TEXT\", axis=\"columns\")\n    # Make a table of each free text field\n    for o in other.columns:\n        # Get the responses sorted by the frequency in descending order\n        unique = other[o].value_counts()\n        # Check if they are more than 10 responses\n        # Get the sum of the rest\n        more_sum = unique[10:].sum()\n        # Get the number of discarded responses\n        more_number = len(unique[10:])\n        # If they are more than 11 responses:\n        # - show only the 10 first responses\n        # - aggregate the rest and show the summed frequency\n        if more_number > 1:\n            unique = unique[0:10].append(\n                pd.Series([more_sum], index=[f\"{more_number} more ...\"])\n            )\n        # Add the table formatted in HTML to the summary\n        questionnaire += unique.to_frame(name=o).to_html(header=True, bold_rows=False)\n        questionnaire += \"<br>\\n\"\n\n# Save the content in an HTML file to have it in output\nwith open(\"questionnaire.html\", \"w\") as file:\n    file.write(questionnaire)\n\n# Display the HTML content\ndisplay(HTML(questionnaire))","e6b748d6":"This notebook simply list the questions and answers in a minimalist way.\n\nThere are some types of questions:\n\n- Simple \/ multiple choice question with a fixed list of responses.\n- Simple \/ multiple choice question with simple \/ multiple open text responses.\n\nThe responses for a question (either simple, multiple choice or open text) are summarized in tables.\nOnly the ten most frequent responses are shown.\nThe rest are summed up.\n\nThe information presented this way, allows to see at a glance all the responses.\nAnd helps to analyze the data."}}