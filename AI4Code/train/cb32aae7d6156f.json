{"cell_type":{"af5df3c5":"code","f75de3e0":"code","7e8b9409":"code","d8c838f6":"code","6b4d1667":"code","9c591b68":"code","1a3326e8":"code","a47360ad":"code","6abfc9d7":"code","c2c7b1ef":"code","cfd8ada9":"code","b3ca24c2":"code","d3362a57":"code","638d8b5f":"code","fbde8be3":"code","4e624819":"code","679122be":"code","111895d2":"code","d745aa1e":"code","e863b928":"code","839815eb":"code","31a89839":"code","846d2a8c":"code","5b94489d":"markdown","70bc17a1":"markdown","aa266a89":"markdown","2168a522":"markdown","efe7dd8a":"markdown","a40a1842":"markdown","99117c38":"markdown","ccc40dd0":"markdown","6a6e7e7f":"markdown","3603a571":"markdown","8dfc6640":"markdown"},"source":{"af5df3c5":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n        print(dirname)","f75de3e0":"import pandas as pd\nimport numpy as np\n\nimport random\nimport shutil\n\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img\n\nimport matplotlib.pyplot as plt","7e8b9409":"base_dir = os.path.join(\"\/kaggle\/input\/multiclass-weather-dataset\/dataset\/\")\nos.listdir(base_dir)","d8c838f6":"train_dir = \"\/train\/\"\ntest_dir = base_dir + \"alien_test\/\"","6b4d1667":"# Code to replicate the whole directory\n\ndef copytree(src, dst, symlinks=False, ignore=None):\n    for item in os.listdir(src):\n        s = os.path.join(src, item)\n        d = os.path.join(dst, item)\n        if os.path.isdir(s):\n            shutil.copytree(s, d, symlinks, ignore)\n        else:\n            shutil.copy2(s, d)\n            \ncopytree(base_dir, train_dir) # Define source directory and destination directory\n\n# Here we remove the unwanted folders by condition\n            \nfor i in os.listdir(train_dir):\n    if i not in ['sunrise', 'shine', 'cloudy', 'rainy', 'foggy']:\n        try:\n            os.remove(train_dir + i)\n        except:\n            shutil.rmtree(train_dir + i)","9c591b68":"print(\"Train directory -->\", os.listdir(train_dir))\nprint(\"Test directory -->\", os.listdir(test_dir)[:5])","1a3326e8":"# Displaying random image from the dataset\n\nfig, ax = plt.subplots(1, 5, figsize=(15, 10))\n\nsample_paper = random.choice(os.listdir(train_dir + \"rainy\"))\nimage = load_img(train_dir + \"rainy\/\" + sample_paper)\nax[0].imshow(image)\nax[0].set_title(\"Rainy\")\nax[0].axis(\"Off\")\n\nsample_rock = random.choice(os.listdir(train_dir + \"foggy\"))\nimage = load_img(train_dir + \"foggy\/\" + sample_rock)\nax[1].imshow(image)\nax[1].set_title(\"Foggy\")\nax[1].axis(\"Off\")\n\nsample_scissor = random.choice(os.listdir(train_dir + \"shine\"))\nimage = load_img(train_dir + \"shine\/\" + sample_scissor)\nax[2].imshow(image)\nax[2].set_title(\"Shine\")\nax[2].axis(\"Off\")\n\nsample_scissor = random.choice(os.listdir(train_dir + \"sunrise\"))\nimage = load_img(train_dir + \"sunrise\/\" + sample_scissor)\nax[3].imshow(image)\nax[3].set_title(\"Sunrise\")\nax[3].axis(\"Off\")\n\nsample_scissor = random.choice(os.listdir(train_dir + \"cloudy\"))\nimage = load_img(train_dir + \"cloudy\/\" + sample_scissor)\nax[4].imshow(image)\nax[4].set_title(\"Cloudy\")\nax[4].axis(\"Off\")\n\nplt.show()","a47360ad":"model = tf.keras.models.Sequential([\n    \n    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    \n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    \n    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    \n    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    \n    tf.keras.layers.Flatten(),\n    \n    tf.keras.layers.Dense(256, activation='relu'),\n    \n    tf.keras.layers.Dense(5, activation='softmax')\n])","6abfc9d7":"model.summary()","c2c7b1ef":"model.compile(loss = 'categorical_crossentropy',\n              optimizer = 'SGD',\n              metrics = ['accuracy'])","cfd8ada9":"class myCallback(tf.keras.callbacks.Callback):\n    def on_epoch_end(self, epoch, logs={}):\n        if(logs.get('accuracy')>0.85):\n            print(\"\\nReached >85% accuracy so cancelling training!\")\n            self.model.stop_training = True\n        \ncallbacks = myCallback()","b3ca24c2":"train_datagen = ImageDataGenerator(\n      rescale=1.\/255,\n      rotation_range=40,\n      width_shift_range=0.4, # Shifting image width by 40%\n      height_shift_range=0.4,# Shifting image height by 40%\n      shear_range=0.2,       # Rotation across X-axis by 20%\n      zoom_range=0.3,        # Image zooming by 30%\n      horizontal_flip=True,\n      fill_mode='nearest')\n\ntrain_generator = train_datagen.flow_from_directory(\n    train_dir,\n    target_size = (150, 150),\n    class_mode = 'categorical',\n    batch_size = 20\n)","d3362a57":"history = model.fit_generator(\n      train_generator,\n      steps_per_epoch = np.ceil(1500\/20),  # 1500 images = batch_size * steps\n      epochs = 50,\n      callbacks=[callbacks],\n      verbose = 2)","638d8b5f":"print(\"Accuracy of the model on train data is {:.2f}%\".format(history.history[\"accuracy\"][-1]*100))","fbde8be3":"test_img = os.listdir(os.path.join(test_dir))\n\ntest_df = pd.DataFrame({'Image': test_img})\ntest_df.head()","4e624819":"len(test_df)","679122be":"test_gen = ImageDataGenerator(rescale=1.\/255)\n\ntest_generator = test_gen.flow_from_dataframe(\n    test_df, \n    test_dir, \n    x_col = 'Image',\n    y_col = None,\n    class_mode = None,\n    target_size = (150, 150),\n    batch_size = 20,\n    shuffle = False\n)","111895d2":"predict = model.predict_generator(test_generator, steps = int(np.ceil(30\/20)))","d745aa1e":"# Identifying the classes\n\nlabel_map = dict((v,k) for k,v in train_generator.class_indices.items())\nlabel_map","e863b928":"test_df['Label'] = np.argmax(predict, axis = -1) # axis = -1 --> To compute the max element index within list of lists\n\ntest_df['Label'] = test_df['Label'].replace(label_map)","839815eb":"test_df.Label.value_counts().plot.bar(color = ['red','blue','green','yellow','orange'])\nplt.xticks(rotation = 0)\nplt.show()","31a89839":"v = random.randint(0, 12)\n\nsample_test = test_df.iloc[v:(v+18)].reset_index(drop = True)\nsample_test.head()\n\nplt.figure(figsize=(12, 24))\nfor index, row in sample_test.iterrows():\n    filename = row['Image']\n    category = row['Label']\n    img = load_img(test_dir + filename, target_size = (150, 150))\n    plt.subplot(6, 3, index + 1)\n    plt.imshow(img)\n    plt.xlabel(filename + ' ( ' + \"{}\".format(category) + ' )' )\nplt.tight_layout()\nplt.show()","846d2a8c":"lis = []\nfor ind in test_df.index: \n    if(test_df['Label'][ind] in test_df['Image'][ind]):\n        lis.append(1)\n    else:\n        lis.append(0)\n\nprint(\"Accuracy of the model on test data is {:.2f}%\".format((sum(lis)\/len(lis))*100))","5b94489d":"#### Label Mapping","70bc17a1":"### CNN Model","aa266a89":"To increase the accuracy of the model on unseen data we need more training data in that way model can be improved!!!","2168a522":"We can see that the image folders are not in structure to feed the generator. In order to structurize it, we copy the whole tree and remove the unnecessary folders.","efe7dd8a":"### Image Generator","a40a1842":"### Callback function","99117c38":"### Importing packages","ccc40dd0":"### Random image generator","6a6e7e7f":"### Test Generator","3603a571":"This dataset doesn't have any validation data. So, there is no need to define Validation generator","8dfc6640":"### Defining Base directory"}}