{"cell_type":{"bd55a155":"code","c83467fc":"code","78ab0662":"code","22317136":"code","30b41f73":"code","ac46dbcb":"code","f008af68":"code","00478803":"code","3a1cfecf":"code","98cf167e":"code","09612cd8":"code","6217f536":"code","28bfe234":"code","feb4bd12":"code","eda1e382":"code","16ade772":"code","1f1cd658":"code","b0e5125d":"markdown","9a59fa06":"markdown","e5b75ca7":"markdown","293fc7e0":"markdown","b4f22548":"markdown","33c92e00":"markdown","cb3630c2":"markdown","d28fb29e":"markdown","560c7985":"markdown","6b0429bd":"markdown","9fc8b2a5":"markdown","69a34da3":"markdown","b472242d":"markdown","6712a6f2":"markdown","c8120c93":"markdown","80cb7c22":"markdown","7a04fa2a":"markdown","628bdfda":"markdown"},"source":{"bd55a155":"import pandas as pd\nimport numpy as np\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom statistics import mean\nfrom sklearn.preprocessing import LabelEncoder\nimport sys\nimport os","c83467fc":"def correct_indexing(dataset):\n    dataset.insert(0, 'index', range(0, len(dataset)))\n    dataset.set_index(\"index\", inplace = True)\n    return","78ab0662":"dataset = pd.read_csv(\"..\/input\/credit-card-customers\/BankChurners.csv\")\ndataset.drop(['CLIENTNUM', 'Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1', 'Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2'], axis = 1, inplace = True)\n\ndataset['Attrition_Flag'].replace({'Existing Customer' : 1, 'Attrited Customer' : 0}, inplace = True)\ndataset['Gender'].replace({'M' : 1, 'F' : 0}, inplace = True)\ndataset['Education_Level'].replace({'Uneducated' : 0, 'Unknown' : -1, 'High School' : 1, 'College' : 2, 'Graduate' : 3, 'Post-Graduate' : 4, 'Doctorate' : 5}, inplace = True)\ndataset['Marital_Status'].replace({'Married' : 1, 'Single' : 0, 'Divorced' : 2, 'Unknown' : -1}, inplace = True)\ndataset['Income_Category'].replace({'Unknown' : -1, 'Less than $40K' : 1, '$40K - $60K' : 2, '$60K - $80K' : 3, '$80K - $120K' : 4, '$120K +' : 5}, inplace = True)\ndataset['Card_Category'].replace({'Blue' : 0, 'Silver' : 1, 'Gold' : 2, 'Platinum' : 3}, inplace = True)\n\ndataset.drop(dataset[dataset['Education_Level'] == -1 ].index, inplace = True)\ndataset.drop(dataset[dataset['Income_Category'] == -1 ].index, inplace = True)\ndataset.drop(dataset[dataset['Marital_Status'] == -1 ].index, inplace = True)\ndataset = dataset.dropna()\ncorrect_indexing(dataset)\n\ndataset.head(5)","22317136":"def approximator(dataset, column, approximation):\n    rounded = []\n    j = 0\n    for i in dataset[column].items():\n        j = approximation * round(i[1] \/ approximation)\n        rounded.append(j)\n    dataset[column] = rounded\n    return\n\napproximator(dataset, 'Credit_Limit', 1000)\napproximator(dataset, 'Total_Revolving_Bal', 100)\napproximator(dataset, 'Avg_Open_To_Buy', 1000)\napproximator(dataset, 'Total_Trans_Amt', 500)\napproximator(dataset, 'Total_Trans_Ct', 10)\napproximator(dataset, 'Total_Amt_Chng_Q4_Q1', 0.05)\napproximator(dataset, 'Total_Ct_Chng_Q4_Q1', 0.05)\napproximator(dataset, 'Avg_Utilization_Ratio', 0.15)","30b41f73":"matrix = dataset.corr()\nsns.heatmap(matrix, vmax = 1, square = True)","ac46dbcb":"def catagory_churn_unchurn(type_of_card, data):\n    dataset_card = data[data['Card_Category'] == type_of_card]\n    correct_indexing(dataset_card)\n    return dataset_card\n\nblue = catagory_churn_unchurn(0, dataset)\nsilver = catagory_churn_unchurn(1, dataset)\ngold = catagory_churn_unchurn(2, dataset)\nplatinum = catagory_churn_unchurn(3, dataset)","f008af68":"def plotter(column, Group):\n    if (column == 'Contacts_Count_12_mon') | (column == 'Total_Revolving_Bal') | (column == 'Total_Trans_Amt') | (column == 'Total_Trans_Ct'):\n        plot = pd.crosstab(dataset[column], dataset[Group])\n        plot.div(plot.sum(1).astype(float), axis = 0).plot(kind = \"bar\", stacked = True) \n        plot1 = pd.crosstab(blue[column], blue[Group])\n        plot1.div(plot1.sum(1).astype(float), axis = 0).plot(kind = \"bar\", stacked = True) \n        plot2 = pd.crosstab(silver[column], silver[Group])\n        plot2.div(plot2.sum(1).astype(float), axis = 0).plot(kind = \"bar\", stacked = True)\n        plot3 = pd.crosstab(gold[column], gold[Group])\n        plot3.div(plot3.sum(1).astype(float), axis = 0).plot(kind = \"bar\", stacked = True)\n        plot4 = pd.crosstab(platinum[column], platinum[Group])\n        plot4.div(plot4.sum(1).astype(float), axis = 0).plot(kind = \"bar\", stacked = True)\n        plt.show()\n    else:\n        plot = pd.crosstab(dataset[column], dataset[Group])\n        plot.div(plot.sum(1).astype(float), axis = 0).plot(kind = \"line\", stacked = True)\n        plot1 = pd.crosstab(blue[column], blue[Group])\n        plot1.div(plot1.sum(1).astype(float), axis = 0).plot(kind = \"line\", stacked = True)\n        plot2 = pd.crosstab(silver[column], silver[Group])\n        plot2.div(plot2.sum(1).astype(float), axis = 0).plot(kind = \"line\", stacked = True)\n        plot3 = pd.crosstab(gold[column], gold[Group])\n        plot3.div(plot3.sum(1).astype(float), axis = 0).plot(kind = \"line\", stacked = True)\n        plot4 = pd.crosstab(platinum[column], platinum[Group])\n        plot4.div(plot4.sum(1).astype(float), axis = 0).plot(kind = \"line\", stacked = True)\n        plt.show()\n    return","00478803":"plotter('Contacts_Count_12_mon', 'Attrition_Flag')","3a1cfecf":"plotter('Total_Revolving_Bal', 'Attrition_Flag')","98cf167e":"plotter('Total_Trans_Amt', 'Attrition_Flag')","09612cd8":"plotter('Total_Trans_Ct', 'Attrition_Flag')","6217f536":"plotter('Total_Amt_Chng_Q4_Q1', 'Attrition_Flag')","28bfe234":"plotter('Total_Ct_Chng_Q4_Q1', 'Attrition_Flag')","feb4bd12":"plot = pd.crosstab(dataset['Credit_Limit'], dataset['Income_Category'])\nplot.div(plot.sum(1).astype(float), axis = 0).plot(kind = \"bar\", stacked = True)\nplt.show()","eda1e382":"plot = pd.crosstab(dataset['Credit_Limit'], dataset['Attrition_Flag'])\nplot.div(plot.sum(1).astype(float), axis = 0).plot(kind = \"bar\", stacked = True)\nplt.show()","16ade772":"le = LabelEncoder()\n\ndef categorisation(data_col, ds1, ds2, ds3, ds4, ds5):\n    ds1 = pd.concat([ds1, pd.get_dummies(ds1[data_col], prefix = data_col)], axis = 1)\n    ds1.drop([data_col], axis = 1, inplace = True)\n    \n    ds2 = pd.concat([ds2, pd.get_dummies(ds2[data_col], prefix = data_col)], axis = 1)\n    ds2.drop([data_col], axis = 1, inplace = True)\n    \n    ds3 = pd.concat([ds3, pd.get_dummies(ds3[data_col], prefix = data_col)], axis = 1)\n    ds3.drop([data_col], axis = 1, inplace = True)\n    \n    ds4 = pd.concat([ds4, pd.get_dummies(ds4[data_col], prefix = data_col)], axis = 1)\n    ds4.drop([data_col], axis = 1, inplace = True)\n    \n    ds5 = pd.concat([ds5, pd.get_dummies(ds5[data_col], prefix = data_col)], axis = 1)\n    ds5.drop([data_col], axis = 1, inplace = True)\n    return ds1, ds2, ds3, ds4, ds5\n\ndataset, blue, silver, gold, platinum = categorisation('Credit_Limit', dataset, blue, silver, gold, platinum)\ndataset, blue, silver, gold, platinum = categorisation('Months_Inactive_12_mon', dataset, blue, silver, gold, platinum)\ndataset, blue, silver, gold, platinum = categorisation('Contacts_Count_12_mon', dataset, blue, silver, gold, platinum)\ndataset, blue, silver, gold, platinum = categorisation('Total_Revolving_Bal', dataset, blue, silver, gold, platinum)\ndataset, blue, silver, gold, platinum = categorisation('Total_Trans_Amt', dataset, blue, silver, gold, platinum)\ndataset, blue, silver, gold, platinum = categorisation('Total_Trans_Ct', dataset, blue, silver, gold, platinum)\ndataset, blue, silver, gold, platinum = categorisation('Total_Amt_Chng_Q4_Q1', dataset, blue, silver, gold, platinum)\ndataset, blue, silver, gold, platinum = categorisation('Total_Ct_Chng_Q4_Q1', dataset, blue, silver, gold, platinum)","1f1cd658":"def test_train(dataset):\n    train, test = train_test_split(dataset, train_size=0.4, random_state = 0)\n    \n    train.drop(['Customer_Age', 'Dependent_count', 'Months_on_book', 'Total_Relationship_Count', 'Gender', 'Education_Level', 'Marital_Status', 'Income_Category', 'Card_Category', 'Avg_Open_To_Buy', 'Avg_Utilization_Ratio'], axis = 1, inplace = True)\n    test.drop(['Customer_Age', 'Dependent_count', 'Months_on_book', 'Total_Relationship_Count', 'Gender', 'Education_Level', 'Marital_Status', 'Income_Category', 'Card_Category', 'Avg_Open_To_Buy', 'Avg_Utilization_Ratio'], axis = 1, inplace = True)\n    \n    train.columns\n    test.columns\n    \n    y_test = test['Attrition_Flag']\n    y_train = train['Attrition_Flag']\n    x_test = test.drop(['Attrition_Flag'], axis = 1)\n    x_train = train.drop(['Attrition_Flag'], axis = 1)\n    \n    oversample = SMOTE(k_neighbors = 1)\n    x_train_upsampled, y_train_upsampled = oversample.fit_resample(x_train, y_train)\n    \n    return x_train_upsampled, x_test, y_train_upsampled, y_test\n\ndef classifier_models(dataset):\n    x_train, x_test, y_train, y_test = test_train(dataset)\n    classifier = RandomForestClassifier(n_estimators = 50, random_state = 0)\n    classifier.fit(x_train, y_train)\n    \n    predict = classifier.predict(x_test)\n    acc = accuracy_score(y_test, predict) *  100\n    return acc\n\ndef model_looper():\n    datasets = [dataset, blue, silver, gold, platinum]\n    for j in range (0, 5):\n        avg_acc = []\n        for i in range (0, 10):\n            avg_acc.append(classifier_models(datasets[j]))\n        print (\"Accuracy of model in predicting churned vs unchurned in \", j, \" is :-> \", round (mean(avg_acc), 2), \"%\")\n    return\n\nmodel_looper()","b0e5125d":"Total_Trans_Ct shows a strong positive corellation with the Attirition_flag of the customer and is very consistant and the relationship can be used for predictiong the future churning customers","9a59fa06":"Contacts_Counts_12_mon shows a weak negative corellation with the Attirition_flag of the customer BUT is very consistant and the relationship can be used for predictiong the future churning customers","e5b75ca7":"# This is a script to analyze the dataset and provide visualisations of the most relatable variables affecting customers. with ML predictions to support them!","293fc7e0":"This function produced dataset based on the type of credit card the customer have","b4f22548":"Total_Revolving_Bal shows a strong positive corellation with the Attirition_flag of the customer and is very consistant and the relationship can be used for predictiong the future churning customers","33c92e00":"Total_Ct_Chng_Q4_Q1 shows a strong positive corellation with the Attirition_flag of the customer and is very consistant and the relationship can be used for predictiong the future churning customers","cb3630c2":"This function only corrects the indexing of the dataset for further use","d28fb29e":"This function will plot the graphs of the given column1 against column2 and for 5 datasets.\n* complete dataset\n* blue credit card holders\n* silver credit card holders\n* gold credit card holders\n* platinum credit card holders\n\nGraphs are in this specific orders","560c7985":"Here with the help of this corellation plot we can see that most of the data is not related to 'Attrition_Flag' of a customer and we can see a moderate corellation between **'Attrition_Flag'** and **'Contacts_Count_12_mon', 'Total_Revolving_Bal', 'Total_Trans_Amt', 'Total_Trans_Ct', 'Total_Amt_Chng_Q4_Q1', 'Total_Ct_Chng_Q4_Q1'\n\nWe can now see that these variable are more closely related to 'Attrition_Flag' than 'Income_Category'. So moving on we will only focus on finding type of relation between these variables and supporting this point!","6b0429bd":"Here we can see the above plot of complete dataset is approximating the 0.2 ration of churned customers as seen in above plots.","9fc8b2a5":"Total_Amt_Chng_Q4_Q1 shows a strong positive corellation with the Attirition_flag of the customer and is very consistant and the relationship can be used for predictiong the future churning customers","69a34da3":"This function is used to approximate most of the wildely scattered values. Basically it rounded up the values in order of the number provided to the function! Useful to reduce scattered data into some symmetry","b472242d":"We can see that The amount of customers with high end card with low credit limit. This seems to be the problem in future.\nLets furture investigate it\n* Here we can see that the customers with lowest credit limit are still 0.2 in ratio of whole for high end cards.","6712a6f2":"Label encoding the 'Y' column and getting the dummied from the rest of the column","c8120c93":"Importing the liberaries to be used","80cb7c22":"# The conclusion from this plot comparision is to limit the lower limit of credit card which are high end to avoide customers from getting high end cards with low credit limits\n\n# Another thing we learned is that 'Months_Inactive_12_mon', 'Contacts_Count_12_mon', 'Total_Revolving_Bal', 'Total_Trans_Amt', 'Total_Trans_Ct', 'Total_Amt_Chng_Q4_Q1', 'Total_Ct_Chng_Q4_Q1' data is most accurate in predicting in the churned and unchurned datasets.\n\n# The churned customers are the ones with lower income and high end card or high expenditure.\n\n# currently hidden churning customers are those with lower credit limit and high end card.","7a04fa2a":"Total_Transaction_Amt shows a strong positive corellation preak between 5000 to 10000 with the Attirition_flag of the customer and is very consistant and the relationship can be used for predictiong the future churning customers","628bdfda":"* Accuracy of model in predicting churned vs unchurned in  0  is :->  92.06 %\n* Accuracy of model in predicting churned vs unchurned in  1  is :->  91.42 %\n* Accuracy of model in predicting churned vs unchurned in  2  is :->  82.09 %\n* Accuracy of model in predicting churned vs unchurned in  3  is :->  83.67 %\n* Accuracy of model in predicting churned vs unchurned in  4  is :->  100.0 %\n\n* The **'0'** means the complete **dataset**\n* The **'1'** means the complete **Blue Card Owners Only**\n* The **'2'** means the complete **Silver Card Owners Only**\n* The **'3'** means the complete **Gold Card Owners Only**\n* The **'4'** means the complete **Platinum Card Owners Only**"}}