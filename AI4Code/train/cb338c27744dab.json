{"cell_type":{"78609641":"code","a40964f8":"code","7483404f":"code","3f848353":"code","cf5fff7b":"code","ae939551":"code","7603de20":"code","62ed4bf0":"code","5287d181":"code","96d94c10":"code","b8669b65":"code","7bea735a":"code","5bbff68a":"code","46fcea31":"code","01c4822d":"code","29ef154f":"code","f6e8a780":"code","4b9be519":"code","455d0fca":"code","7deea0da":"code","592ddace":"code","eba1e7eb":"code","5b4051b4":"code","5f097561":"code","0b4ccc1a":"code","9404243f":"code","48252ef6":"code","2a96149a":"code","aa115919":"code","2d409b21":"code","d7cced68":"code","33fb8a1e":"code","4c22a326":"code","4804813b":"code","5856b76d":"code","0289898e":"code","9685c647":"code","a4abb5aa":"code","2c0abded":"code","8631411e":"code","697a0aa5":"code","b9e4206a":"code","d2e97303":"code","9b08b32f":"code","4f6747d8":"code","25058aee":"code","4bc72600":"code","49c52c14":"code","297e151f":"markdown","b148e4d3":"markdown","6b807ebf":"markdown","06299755":"markdown","4b6c8932":"markdown","1e9a4961":"markdown","3c5073fa":"markdown"},"source":{"78609641":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a40964f8":"df=pd.read_csv(\"..\/input\/donorsprediction\/Raw_Data_for_train_test.csv\")","7483404f":"df","3f848353":"df.head()","cf5fff7b":"df.columns","ae939551":"df.describe()","7603de20":"df.isnull().sum()","62ed4bf0":"df.columns[df.isnull().any()]","5287d181":"df.isnull().sum()","96d94c10":"df['TARGET_D']=df['TARGET_D'].fillna(df['TARGET_D'].mean())","b8669b65":"# create a list of our conditions\nconditions = [\n    (df['TARGET_D'] >= 50),\n    (df['TARGET_D'] >= 20) & (df['TARGET_D'] < 50),\n    (df['TARGET_D'] >= 13) & (df['TARGET_D'] < 20),\n    (df['TARGET_D'] >= 10) & (df['TARGET_D'] < 13),\n    (df['TARGET_D'] < 10)\n    ]\n\n# create a list of the values we want to assign for each condition\nvalues = ['A', 'B', 'C', 'D','E']\n\n# create a new column and use np.select to assign values to it using our lists as arguments\ndf['DONATION_TYPE'] = np.select(conditions, values)\n\n# display updated DataFrame\ndf.head()","7bea735a":"df.isnull().sum()","5bbff68a":"#target d contains a lot of null values ,so delete this column\ndf=df.drop(['TARGET_D'],axis=1)","46fcea31":"df=df.drop(['PUBLISHED_PHONE'],axis=1)","01c4822d":"df['DONOR_AGE']=df['DONOR_AGE'].fillna(df['DONOR_AGE'].mean())","29ef154f":"df['DONOR_AGE']=df['DONOR_AGE'].astype('int64')","f6e8a780":"df['INCOME_GROUP']=df['INCOME_GROUP'].fillna(df['INCOME_GROUP'].mode()[0])","4b9be519":"df['INCOME_GROUP']=df['INCOME_GROUP'].astype('int64')","455d0fca":"df['WEALTH_RATING']=df['WEALTH_RATING'].fillna(df['WEALTH_RATING'].mode()[0])","7deea0da":"df['WEALTH_RATING']=df['WEALTH_RATING'].astype('int64')","592ddace":"df=df.dropna()","eba1e7eb":"df.columns[df.isnull().any()]","5b4051b4":"df","5f097561":"df['SES'].value_counts()","0b4ccc1a":"df['SES']=df['SES'].str.replace('?','2')\ndf['SES']=df['SES'].astype('int64')","9404243f":"df['URBANICITY'].value_counts()","48252ef6":"df['URBANICITY']=df['URBANICITY'].str.replace('?','S')","2a96149a":"df['CLUSTER_CODE'].value_counts()","aa115919":"df['CLUSTER_CODE']=df['CLUSTER_CODE'].str.replace('.','40')\ndf['CLUSTER_CODE']=df['CLUSTER_CODE'].astype('int64')","2d409b21":"# Get list of categorical variables\ns = (df.dtypes == 'object')\nobject_cols = list(s[s].index)\n\nprint(\"Categorical variables:\")\nprint(object_cols)","d7cced68":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\nfor i in list(df.columns):\n    if df[i].dtype=='object':\n        df[i]=le.fit_transform(df[i])","33fb8a1e":"df.dtypes","4c22a326":"df","4804813b":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns; sns.set()\nimport numpy as np\nfrom sklearn.cluster import KMeans","5856b76d":"# Using the elbow method to find the optimal number of clusters\nfrom sklearn.cluster import KMeans\nwcss = []\nfor i in range(1, 11):\n    kmeans = KMeans(n_clusters = i, init = 'k-means++', random_state = 42)\n    kmeans.fit(X)\n    # inertia method returns wcss for that model\n    wcss.append(kmeans.inertia_)","0289898e":"plt.figure(figsize=(10,5))\nsns.lineplot(range(1, 11), wcss,marker='o',color='red')\nplt.title('The Elbow Method')\nplt.xlabel('Number of clusters')\nplt.ylabel('WCSS')\nplt.show()","9685c647":"# Fitting K-Means to the dataset\nkmeans = KMeans(n_clusters = 2, init = 'k-means++', random_state = 42)\ny_kmeans = kmeans.fit_predict(X)","a4abb5aa":"# Generate scatter plot for training data\ncolors = list(map(lambda x: '#3b4cc0' if x == 1 else '#b40426', y_kmeans))\nplt.scatter(X[:,0], X[:,1], c=colors, marker=\"o\", picker=True)\nplt.title('Two clusters of data')\nplt.xlabel('Temperature yesterday')\nplt.ylabel('Temperature today')\nplt.show()","2c0abded":"# Fitting K-Means to the dataset\nkmeans = KMeans(n_clusters = 3, init = 'k-means++', random_state = 42)\ny_kmeans = kmeans.fit_predict(X)","8631411e":"# Visualising the clusters\nplt.figure(figsize=(15,7))\nsns.scatterplot(X[y_kmeans == 0, 0], X[y_kmeans == 0, 1], color = 'yellow', label = 'Cluster 1',s=50)\nsns.scatterplot(X[y_kmeans == 1, 0], X[y_kmeans == 1, 1], color = 'blue', label = 'Cluster 2',s=50)\nsns.scatterplot(X[y_kmeans == 2, 0], X[y_kmeans == 2, 1], color = 'green', label = 'Cluster 3',s=50)\nsns.scatterplot(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], color = 'red', \n                label = 'Centroids',s=300,marker=',')\nplt.grid(False)\nplt.legend()\nplt.show()","697a0aa5":"#%% KMEANS wiht sklearn \nfrom sklearn.cluster import KMeans\nwcss=[]\n#find best k value\nfor k in range(1,15):\n    kmeans=KMeans(n_clusters=k)\n    kmeans.fit(df)\n    wcss.append(kmeans.inertia_)\n#elbow rule on plot    \nplt.figure(figsize=(12,8))\nplt.plot(range(1,15),wcss,\"-o\")\nplt.title(\"wcss \/ number of cluster\", fontsize=18)\nplt.xlabel(\"number of k(cluster) values\")\nplt.xticks(range(1,15))\nplt.grid(True)\nplt.ylabel(\"wcss\")\nplt.tight_layout()\nplt.show()","b9e4206a":"#%%   from elbow plot we can choose 3 or 4 i'll go with 4 cluster.\n#kmeans2=KMeans(n_clusters=2)\n#kmeans3=KMeans(n_clusters=3)\nkmeans=KMeans(n_clusters=4)\nclusters=kmeans.fit_predict(df)\ndf[\"label\"]=clusters","d2e97303":"#%% plot with cluster \/ center(centroid)\nplt.figure(figsize=(20,8))\nplt.scatter(df.CLUSTER_CODE[df.label==0],df.CONTROL_NUMBER[df.label==0],color=\"red\",alpha= 0.8)\nplt.scatter(df.CLUSTER_CODE[df.label==1],df.CONTROL_NUMBER[df.label==1],color=\"green\",alpha= 0.8)\nplt.scatter(df.CLUSTER_CODE[df.label==2],df.CONTROL_NUMBER[df.label==2],color=\"blue\",alpha= 0.8)\nplt.scatter(df.CLUSTER_CODE[df.label==3],df.CONTROL_NUMBER[df.label==3],color=\"black\",alpha= 0.8)\nplt.scatter(kmeans.cluster_centers_[:,0],kmeans.cluster_centers_[:,1],color=\"orange\")# cluster center(centroid)\nplt.title(\"Kmeans(k=4) Cluster\")\nplt.xlabel(\"CLUSTER_CODE\")\nplt.ylabel(\"CONTROL_NUMBER\")\nplt.legend(df,loc='upper right')\nplt.show()","9b08b32f":"#%% plot with cluster \/ center(centroid)\nplt.figure(figsize=(20,8))\nplt.scatter(df.DONOR_AGE [df.label==0],df.IN_HOUSE[df.label==0],color=\"red\",alpha= 0.8)\nplt.scatter(df.DONOR_AGE [df.label==1],df.IN_HOUSE[df.label==1],color=\"green\",alpha= 0.8)\nplt.scatter(df.DONOR_AGE [df.label==2],df.IN_HOUSE[df.label==2],color=\"blue\",alpha= 0.8)\nplt.scatter(df.DONOR_AGE [df.label==3],df.IN_HOUSE[df.label==3],color=\"black\",alpha= 0.8)\nplt.scatter(kmeans.cluster_centers_[:,0],kmeans.cluster_centers_[:,1],color=\"orange\")# cluster center(centroid)\nplt.title(\"Kmeans(k=4) Cluster\")\nplt.xlabel(\"DONOR_AGE \")\nplt.ylabel(\"IN_HOUSE\")\nplt.legend(df,loc='upper right')\nplt.show()","4f6747d8":"#%%   from elbow plot we can choose 3 or 4 i'll go with 4 cluster.\n#kmeans2=KMeans(n_clusters=2)\n#kmeans3=KMeans(n_clusters=3)\nkmeans=KMeans(n_clusters=2)\nclusters=kmeans.fit_predict(df)\ndf[\"label\"]=clusters","25058aee":"#%% plot with cluster \/ center(centroid)\nplt.figure(figsize=(20,8))\nplt.scatter(df.DONOR_AGE [df.label==0],df.IN_HOUSE[df.label==0],color=\"red\",alpha= 0.8)\nplt.scatter(df.DONOR_AGE [df.label==1],df.IN_HOUSE[df.label==1],color=\"green\",alpha= 0.8)\nplt.scatter(kmeans.cluster_centers_[:,0],kmeans.cluster_centers_[:,1],color=\"orange\")# cluster center(centroid)\nplt.title(\"Kmeans(k=4) Cluster\")\nplt.xlabel(\"DONOR_AGE \")\nplt.ylabel(\"IN_HOUSE\")\nplt.legend(df,loc='upper right')\nplt.show()","4bc72600":"#%%   from elbow plot we can choose 3 or 4 i'll go with 4 cluster.\n#kmeans2=KMeans(n_clusters=2)\n#kmeans3=KMeans(n_clusters=3)\nkmeans=KMeans(n_clusters=5)\nclusters=kmeans.fit_predict(df)\ndf[\"label\"]=clusters","49c52c14":"#%% plot with cluster \/ center(centroid)\nplt.figure(figsize=(20,8))\nplt.scatter(df.CLUSTER_CODE[df.label==0],df.CONTROL_NUMBER[df.label==0],color=\"red\",alpha= 0.8)\nplt.scatter(df.CLUSTER_CODE[df.label==1],df.CONTROL_NUMBER[df.label==1],color=\"green\",alpha= 0.8)\nplt.scatter(df.CLUSTER_CODE[df.label==2],df.CONTROL_NUMBER[df.label==2],color=\"blue\",alpha= 0.8)\nplt.scatter(df.CLUSTER_CODE[df.label==3],df.CONTROL_NUMBER[df.label==3],color=\"black\",alpha= 0.8)\nplt.scatter(df.CLUSTER_CODE[df.label==3],df.CONTROL_NUMBER[df.label==3],color=\"cyan\",alpha= 0.8)\nplt.scatter(kmeans.cluster_centers_[:,0],kmeans.cluster_centers_[:,1],color=\"orange\")# cluster center(centroid)\nplt.title(\"Kmeans(k=4) Cluster\")\nplt.xlabel(\"CLUSTER_CODE\")\nplt.ylabel(\"CONTROL_NUMBER\")\nplt.legend(df,loc='upper right')\nplt.show()","297e151f":"# make label encoder to categorical coulmns","b148e4d3":"# create a new column(DONATION_TYPE)","6b807ebf":"# Missing values","06299755":"# Apply K Means","4b6c8932":"# Visulization","1e9a4961":"# Read Data","3c5073fa":"# Find missing values"}}