{"cell_type":{"6226ff3d":"code","27f28e2e":"code","bc5f9441":"code","d351f7f9":"code","f13ad7fe":"code","f4afb416":"code","1ec7fcec":"code","7e1c847a":"code","253afec0":"code","e5deced2":"code","1b9c8d9e":"code","a0311800":"code","369929a0":"code","02839336":"markdown","a68b3827":"markdown"},"source":{"6226ff3d":"!pip install -q   timm","27f28e2e":"from pathlib import Path\n\nimport numpy as np\nimport librosa.display as lbd\nimport pandas as pd\n\nimport torch\nfrom  torch.utils.data import Dataset, DataLoader\n\nfrom matplotlib import pyplot as plt\n\nfrom tqdm.notebook import tqdm\n\nimport timm","bc5f9441":"TEST_BATCH_SIZE = 768\nTEST_NUM_WORKERS = 2\n\nDEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\nprint(\"Device:\", DEVICE)","d351f7f9":"def get_file_path(file_id):\n    return str(\"..\/input\/g2net-test-mels-2\/audio_images\/{}\/{}\/{}\/{}.npy\".format(file_id[0], file_id[1], file_id[2], file_id))","f13ad7fe":"df = pd.read_csv(\"..\/input\/g2net-gravitational-wave-detection\/sample_submission.csv\")\ndf[\"impath\"] = df[\"id\"].apply(get_file_path)\n\nprint(df.shape)\ndf","f4afb416":"class G2NetDataset(Dataset):\n    def __init__(self, data):\n        \n        self.data = data\n        \n    def __len__(self):\n        return len(self.data)\n    \n    def __getitem__(self, idx):\n        return np.vstack(np.load(self.data.loc[idx, \"impath\"]).astype(\"float32\") \/ 255.0)[None]","1ec7fcec":"ds = G2NetDataset(data=df)\nprint(len(ds))\n\nx = ds[np.random.choice(len(ds))]\nprint(x.shape)","7e1c847a":"lbd.specshow(x[0])","253afec0":"def load_net(checkpoint_path):\n    net = timm.create_model(\"tf_efficientnet_b0\", pretrained=False, num_classes=1)\n    net.conv_stem = torch.nn.Conv2d(1, 32, kernel_size=(3, 3), stride=(2, 2), bias=False)\n    net = net.to(DEVICE)\n    net.load_state_dict(torch.load(checkpoint_path, map_location=DEVICE))\n    net = net.eval()\n    return net","e5deced2":"@torch.no_grad()\ndef predict(nets, test_data):\n    preds = []\n    for xb in  tqdm(test_data):\n        pred = 0\n        for net in nets:\n            o = torch.sigmoid(net(xb.to(DEVICE)).squeeze(1))\n            pred += o\n            \n        pred \/= len(nets)\n            \n        preds.append(pred.cpu().numpy())\n    preds = np.concatenate(preds)\n    return preds","1b9c8d9e":"checkpoint_paths = [\n    \"..\/input\/g2net-kkiller-public-models\/tf_efficientnet_b0_fold0.pth\",\n    \"..\/input\/g2net-kkiller-public-models\/tf_efficientnet_b0_fold1.pth\",\n    \"..\/input\/g2net-kkiller-public-models\/tf_efficientnet_b0_fold2.pth\",\n]\n\nnets = [load_net(checkpoint_path) for checkpoint_path in checkpoint_paths ]\n\nprint(\"n_models:\", len(checkpoint_paths))","a0311800":"test_data = G2NetDataset(data=df)\ntest_laoder = DataLoader(test_data, batch_size=TEST_BATCH_SIZE, num_workers=TEST_NUM_WORKERS, shuffle=False)\n\nlen(test_data), len(test_laoder)","369929a0":"sub = df[[\"id\", \"target\"]].copy()\nsub[\"target\"] = predict(nets, test_laoder)\n\nsub.to_csv(\"submission.csv\", index=False)\n\nprint(sub.shape)\nsub","02839336":"# Inference","a68b3827":"# Data"}}