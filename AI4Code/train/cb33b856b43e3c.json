{"cell_type":{"837c850a":"code","97478a76":"code","01377271":"code","4616c9fd":"code","cc245143":"code","a65b9011":"code","214b0726":"code","0a739e44":"code","58575aad":"code","434026a4":"code","eff1899a":"code","fde72052":"code","08531ba7":"code","3924b9a6":"code","8c655253":"code","46094cbf":"markdown","b0de268c":"markdown","587882ba":"markdown","43ec2a5d":"markdown","1e7b0432":"markdown","9bd6d6b0":"markdown","a174b972":"markdown","a12689e5":"markdown","e4ae8781":"markdown"},"source":{"837c850a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","97478a76":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.feature_selection import f_classif\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","01377271":"train_data = pd.read_csv('\/kaggle\/input\/tabular-playground-series-sep-2021\/train.csv', index_col='id')\ntest_data = pd.read_csv('\/kaggle\/input\/tabular-playground-series-sep-2021\/test.csv', index_col='id')\nsample_submission = pd.read_csv('\/kaggle\/input\/tabular-playground-series-sep-2021\/sample_solution.csv')","4616c9fd":"train_data.info()","cc245143":"test_data.info()","a65b9011":"train_data.head()","214b0726":"test_data.head()","0a739e44":"sample_submission.head()","58575aad":"train_data.describe()","434026a4":"test_data.describe()","eff1899a":"train_data.isnull().sum()","fde72052":"test_data.isnull().sum()","08531ba7":"corr=train_data.corr()\ncorr","3924b9a6":"fig, ax = plt.subplots(figsize=(25,25))\nsns.heatmap(corr,\n            cmap=sns.diverging_palette(230, 10, as_cmap=True),\n            square=True,\n            ax=ax)\nplt.show()","8c655253":"for i in range(0,11):\n    cols=[]\n    for j in range (0,10):\n        k=i*10+j\n        fx='f'+str(k)\n        if (fx != 'f0'):\n            cols.append(fx)\n    print(cols)\n    corr1=train_data[cols+['claim']].corr()['claim']\n    corr2=train_data[cols+['claim']].corr(method='spearman')['claim']\n    print(corr1)\n    print(corr2)\n    print()\n    print()\ncols=[]\nfor i in range(110,119):\n    fx='f'+str(i)\n    cols.append(fx)\nprint(cols)\ncorr1=train_data[cols+['claim']].corr()['claim']\ncorr2=train_data[cols+['claim']].corr(method='spearman')['claim']\nprint(corr1)\nprint(corr2)","46094cbf":"**check general statistics in train_data and test_data**","b0de268c":"**load the first five columns in train_data, test_data and sample_submission**","587882ba":"**There are not categorical variables**","43ec2a5d":"**Read csv files**","1e7b0432":"**check data correlation in train data**","9bd6d6b0":"**It seems there are some missing data in train_data and test_data**","a174b972":"**The plot is not clear either. Let's split the train data and cheeck the correlation with 'claim' column**","a12689e5":"**We could not display the whole correlation table. Let's drow a plot**","e4ae8781":"**checktrain_data and test_data general content (metadata)**"}}