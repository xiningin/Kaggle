{"cell_type":{"76aa7554":"code","0a712082":"code","a319ca21":"code","c6ef99e3":"code","d901980f":"code","0a266767":"code","8aee59c6":"code","1f60531d":"code","1fbe3383":"code","aeaa35d1":"code","8014d024":"code","64ab1dbb":"code","e52e9299":"code","d059d684":"code","49fa72f6":"code","8be096f5":"code","0f8cdea1":"code","53063160":"code","2a3a3c8b":"code","aa612464":"code","2f27b23c":"code","45b383e4":"code","8737248e":"code","0d642b8b":"code","0c1cb290":"code","8cb19b67":"code","4d6d5003":"code","a33bbaa0":"code","7db34f9e":"code","d9f4b711":"code","672ba54f":"code","16e8e8fb":"code","5adaff34":"code","2f569afa":"code","fa5a2491":"code","fc65b57c":"code","adc30228":"code","e9b7b369":"code","5c694b56":"code","ed71274e":"code","bcfba950":"code","408ab280":"code","540f4942":"code","388d0400":"code","affa5ad3":"code","a5fe3116":"code","cfdacbc8":"code","c94914cd":"code","da8cd2cc":"code","62d0f49f":"code","3bca3108":"code","9872117d":"code","f0c9e446":"code","49c6c228":"code","5a628810":"code","e258e4b2":"code","a3362cc9":"code","c7fdb44b":"code","dc4f64fc":"code","bc98412d":"code","779d8e6a":"code","3a8b1f3f":"code","a0f687eb":"code","ed11bd71":"code","e66dcc36":"code","798be649":"code","324169cc":"code","ba5f1ce4":"code","43b6bd1f":"code","e5423b35":"code","e4e18d40":"code","6ef89d2e":"code","ef946709":"code","5fc12116":"code","19c29ae2":"code","679d74ed":"code","116fa267":"code","a7290112":"code","1e1a23cb":"markdown","d40fb0e4":"markdown","d97f7109":"markdown","15da4e3f":"markdown","40e8c7fb":"markdown","25e2df8b":"markdown","2df55ad3":"markdown","6e09bc8d":"markdown","4941ea3f":"markdown","52faea2e":"markdown","177c8812":"markdown","a5fd4026":"markdown","6efa2455":"markdown","d249e08c":"markdown","14294041":"markdown","a9ccab6b":"markdown","119ab4aa":"markdown","85387261":"markdown","6731fc68":"markdown","103c2e0b":"markdown","9467c7f4":"markdown","dd7d1310":"markdown","3e034083":"markdown","d11ece63":"markdown","0a30181f":"markdown","0b6d8496":"markdown","b32ccd48":"markdown","4d679ecb":"markdown","38dd313d":"markdown","815aee2c":"markdown","db37557e":"markdown","0bf1659a":"markdown","4530d428":"markdown","36516b9a":"markdown","18e2282b":"markdown","c397654b":"markdown","47905742":"markdown","9d27857c":"markdown","7e174a63":"markdown","4f68dec6":"markdown","11468fc4":"markdown","8539ce73":"markdown","ece5eb61":"markdown","fc763904":"markdown","8c151a23":"markdown","58720a3a":"markdown","fb95c9bc":"markdown","1a6e28c4":"markdown","6b606e83":"markdown","1cdf7305":"markdown"},"source":{"76aa7554":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0a712082":"file = open('\/kaggle\/input\/datalab3\/files\/adult.data', 'r')","a319ca21":"def chr_int(a):\n    if a.isdigit():\n        return int(a)\n    else:\n        return 0\n                \ndata=[]\nfor line in file:\n     data1=line.split(', ')\n     if len(data1)==15:\n        data.append([chr_int(data1[0]),data1[1],chr_int(data1[2]),data1[3],chr_int(data1[4]),data1[5],data1[6],\\\n            data1[7],data1[8],data1[9],chr_int(data1[10]),chr_int(data1[11]),chr_int(data1[12]),data1[13],\\\n            data1[14]])","c6ef99e3":"print (data[1:2])","d901980f":"%matplotlib inline\nimport pandas as pd\n\ndf = pd.DataFrame(data) #  Two-dimensional size-mutable, potentially heterogeneous tabular data structure with labeled axes \n\ndf.columns = ['age', 'type_employer', 'fnlwgt', 'education', \n                \"education_num\",\"marital\", \"occupation\", \"relationship\", \"race\",\"sex\",\n                \"capital_gain\", \"capital_loss\", \"hr_per_week\",\"country\",\"income\"]\ndf.head()","0a266767":"df.tail()","8aee59c6":"df.shape","1f60531d":"counts = df.groupby('country').size()\n\nprint (counts) ","1fbe3383":"counts = df.groupby('age').size() # grouping by age\nprint (counts)","aeaa35d1":"ml = df[(df.sex == 'Male')] # grouping by sex\nml.shape\n","8014d024":"ml1 = df[(df.sex == 'Male')&(df.income=='>50K\\n')]\nml1.shape","64ab1dbb":"fm =df[(df.sex == 'Female')]\nfm.shape","e52e9299":"fm1 =df[(df.sex == 'Female')&(df.income=='>50K\\n')]\nfm1.shape","d059d684":"df1=df[(df.income=='>50K\\n')]\n\nprint ('The rate of people with high income is: ', int(len(df1)\/float(len(df))*100), '%.' )\nprint ('The rate of men with high income is: ', int(len(ml1)\/float(len(ml))*100), '%.' )\nprint ('The rate of women with high income is: ', int(len(fm1)\/float(len(fm))*100), '%.' )","49fa72f6":"df1=df[(df.income=='>50K\\n')]\n\nprint ('The rate of people with high income is: ', int(len(df1)\/float(len(df))*100), '%.' )\nprint ('The rate of men with high income is: ', int(len(ml1)\/float(len(ml))*100), '%.' )\nprint ('The rate of women with high income is: ', int(len(fm1)\/float(len(fm))*100), '%.' )","8be096f5":"print ('The average age of men is: ', ml['age'].mean(), '.' )\nprint ('The average age of women is: ', fm['age'].mean(), '.')","0f8cdea1":"print ('The average age of high-income men is: ', ml1['age'].mean(), '.' )\nprint ('The average age of high-income women is: ', fm1['age'].mean(), '.')","53063160":"ml_mu = ml['age'].mean()\nfm_mu = fm['age'].mean()\nml_var = ml['age'].var()\nfm_var = fm['age'].var()\nml_std = ml['age'].std()\nfm_std = fm['age'].std()\n\nprint ('Statistics of age for men: mu:', ml_mu, 'var:', ml_var, 'std:', ml_std)\nprint ('Statistics of age for women: mu:', fm_mu, 'var:', fm_var, 'std:', fm_std)","2a3a3c8b":"ml_mu_hr = ml['hr_per_week'].mean()\nfm_mu_hr = fm['hr_per_week'].mean()\nml_var_hr = ml['hr_per_week'].var()\nfm_var_hr = fm['hr_per_week'].var()\nml_std_hr = ml['hr_per_week'].std()\nfm_std_hr = fm['hr_per_week'].std()\n\nprint ('Statistics of hours per week for men: mu:', ml_mu_hr, 'var:', ml_var_hr, 'std:', ml_std_hr)\nprint ('Statistics of hours per week for women: mu:', fm_mu_hr, 'var:', fm_var_hr, 'std:', fm_std_hr)","aa612464":"ml_median= ml['age'].median()\nfm_median= fm['age'].median()\n\nprint (\"Median age per men and women: \", ml_median, fm_median)","2f27b23c":"ml_median_age= ml1['age'].median()\nfm_median_age= fm1['age'].median()\n\nprint (\"Median age per men and women with high-income: \", ml_median_age, fm_median_age)","45b383e4":"ml_median_hr= ml['hr_per_week'].median()\nfm_median_hr= fm['hr_per_week'].median()\nprint (\"Median hours per week per men and women: \", ml_median_hr, fm_median_hr)","8737248e":"import matplotlib.pyplot as plt\nml_age=ml['age']\nml_age.hist(density=0, histtype='stepfilled', bins=20)","0d642b8b":"fm_age=fm['age']\nfm_age.hist(density=0, histtype='stepfilled', bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Female samples',fontsize=15)\nplt.show()","0c1cb290":"import seaborn as sns\nfm_age.hist(density=0, histtype='stepfilled', alpha=.5, bins=20)   # default number of bins = 10\nml_age.hist(density=0, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75), bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Samples',fontsize=15)\nplt.show()","8cb19b67":"fm_age.hist(density=1, histtype='stepfilled', alpha=.5, bins=20)   # default number of bins = 10\nml_age.hist(density=1, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75), bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('PMF',fontsize=15)\nplt.show()","4d6d5003":"ml_age.hist(density=1, histtype='stepfilled', bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","a33bbaa0":"fm_age.hist(density=1, histtype='stepfilled', bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","7db34f9e":"ml_age.hist(density=1, histtype='step', cumulative=True, linewidth=3.5, bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","d9f4b711":"fm_age.hist(density=1, histtype='step', cumulative=True, linewidth=3.5, bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","672ba54f":"ml_age.hist(bins=10, density=1, histtype='stepfilled', alpha=.5)   # default number of bins = 10\nfm_age.hist(bins=10, density=1, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75))\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","16e8e8fb":"ml_age.hist(density=1, histtype='step', cumulative=True,  linewidth=3.5, bins=20)\nfm_age.hist(density=1, histtype='step', cumulative=True,  linewidth=3.5, bins=20, color=sns.desaturate(\"indianred\", .75))\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","5adaff34":"print (\"The mean sample difference is \", ml_age.mean() - fm_age.mean())","2f569afa":"df['age'].median()","fa5a2491":"len(df[(df.income == '>50K\\n') & (df['age'] < df['age'].median() - 15)])","fc65b57c":"len(df[(df.income == '>50K\\n') & (df['age'] > df['age'].median() + 35)])","adc30228":"df2 = df.drop(df.index[(df.income=='>50K\\n') & (df['age']>df['age'].median() +35) & (df['age'] > df['age'].median()-15)])\n\ndf2.shape","e9b7b369":"ml1_age=ml1['age']\nfm1_age=fm1['age']","5c694b56":"ml2_age = ml1_age.drop(ml1_age.index[(ml1_age >df['age'].median()+35) & (ml1_age>df['age'].median() - 15)])\n\nfm2_age = fm1_age.drop(fm1_age.index[(fm1_age > df['age'].median()+35) & (fm1_age > df['age'].median()- 15)])","ed71274e":"mu2ml = ml2_age.mean()\nstd2ml = ml2_age.std()\nmd2ml = ml2_age.median()\n\n# Computing the mean, std, median, min and max for the high-income male population\n\nprint (\"Men statistics: Mean:\", mu2ml, \"Std:\", std2ml, \"Median:\", md2ml, \"Min:\", ml2_age.min(), \"Max:\",ml2_age.max())","bcfba950":"mu3ml = fm2_age.mean()\nstd3ml = fm2_age.std()\nmd3ml = fm2_age.median()\n\n# Computing the mean, std, median, min and max for the high-income female population\nprint (\"Women statistics: Mean:\", mu2ml, \"Std:\", std2ml, \"Median:\", md2ml, \"Min:\", fm2_age.min(), \"Max:\",fm2_age.max())","408ab280":"print ('The mean difference with outliers is: %4.2f.'% (ml_age.mean() - fm_age.mean()))\nprint (\"The mean difference without outliers is: %4.2f.\"% (ml2_age.mean() - fm2_age.mean()))","540f4942":"plt.figure(figsize=(13.4,5))\n\ndf.age[(df.income == '>50K\\n')].plot(alpha=.25, color='blue')\ndf2.age[(df2.income == '>50K\\n')].plot(alpha=.45,color='red')\n\nplt.ylabel('Age')\nplt.xlabel('Samples')","388d0400":"import numpy as np\n\ncountx,divisionx = np.histogram(ml2_age, normed=True)\ncounty,divisiony = np.histogram(fm2_age, normed=True)","affa5ad3":"import matplotlib.pyplot as plt\n\nval = [(divisionx[i]+divisionx[i+1])\/2 for i in range(len(divisionx)-1)]\n\nplt.plot(val, countx-county,'o-')\nplt.title('Differences in promoting men vs. women')\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Differences',fontsize=15)\nplt.show()","a5fe3116":"print (\"Remember:\\n We have the following mean values for men, women and the difference:\\nOriginally: \", ml_age.mean(), fm_age.mean(),  ml_age.mean()- fm_age.mean()) # The difference between the mean values of male and female populations.)\nprint (\"For high-income: \", ml1_age.mean(), fm1_age.mean(), ml1_age.mean()- fm1_age.mean()) # The difference between the mean values of male and female populations.)\nprint (\"After cleaning: \", ml2_age.mean(), fm2_age.mean(), ml2_age.mean()- fm2_age.mean()) # The difference between the mean values of male and female populations.)\n\nprint (\"\\nThe same for the median:\")\nprint (ml_age.median(), fm_age.median(), ml_age.median()- fm_age.median()) # The difference between the mean values of male and female populations.)\nprint (ml1_age.median(), fm1_age.median(), ml1_age.median()- fm1_age.median()) # The difference between the mean values of male and female populations.)\nprint (ml2_age.median(), fm2_age.median(), ml2_age.median()- fm2_age.median()), # The difference between the mean values of male and female populations.)","cfdacbc8":"def skewness(x):\n    res=0\n    m=x.mean()\n    s=x.std()\n    for i in x:\n        res+=(i-m)*(i-m)*(i-m)\n    res\/=(len(x)*s*s*s)\n    return res\n\nprint (\"The skewness of the male population is:\", skewness(ml2_age))\nprint (\"The skewness of the female population is:\", skewness(fm2_age))","c94914cd":"def pearson(x):\n    return 3*(x.mean()-x.median())\/x.std()\n\nprint (\"The Pearson's coefficient of the male population is:\", pearson(ml2_age))\nprint (\"The Pearson's coefficient of the female population is:\", pearson(fm2_age))","da8cd2cc":"ml1 = df[(df.sex == 'Male')&(df.income=='>50K\\n')]\n\nml2 = ml1.drop(ml1.index[(ml1['age']>df['age'].median() +35)&(ml1['age']< df['age'].median()- 15)])\n\nfm2 = fm1.drop(fm1.index[(fm1['age']> df['age'].median() + 35)& (fm1['age']< df['age'].median() - 15)])\n\nprint (ml2.shape, fm2.shape)","62d0f49f":"print (\"Men grouped in 3 categories:\")\nprint (\"Young:\",int(round(100*len(ml2_age[ml2_age<41])\/float(len(ml2_age.index)))),\"%.\")\nprint (\"Elder:\", int(round(100*len(ml2_age[ml2_age >44])\/float(len(ml2_age.index)))),\"%.\")\nprint (\"Average age:\", int(round(100*len(ml2_age[(ml2_age>40) & (ml2_age< 45)])\/float(len(ml2_age.index)))),\"%.\")","3bca3108":"print (\"Women grouped in 3 categories:\")\nprint (\"Young:\",int(round(100*len(fm2_age[fm2_age <41])\/float(len(fm2_age.index)))),\"%.\")\nprint (\"Elder:\", int(round(100*len(fm2_age[fm2_age >44])\/float(len(fm2_age.index)))),\"%.\")\nprint (\"Average age:\", int(round(100*len(fm2_age[(fm2_age>40) & (fm2_age< 45)])\/float(len(fm2_age.index)))),\"%.\")","9872117d":"print (\"The male mean:\", ml2_age.mean())\nprint (\"The female mean:\", fm2_age.mean())","f0c9e446":"ml2_young = len(ml2_age[(ml2_age<41)])\/float(len(ml2_age.index))\nfm2_young  = len(fm2_age[(fm2_age<41)])\/float(len(fm2_age.index))\nprint (\"The relative risk of female early promotion is: \", 100*(1-ml2_young\/fm2_young))","49c6c228":"ml2_elder = len(ml2_age[(ml2_age>44)])\/float(len(ml2_age.index))\nfm2_elder  = len(fm2_age[(fm2_age>44)])\/float(len(fm2_age.index))\nprint (\"The relative risk of male late promotion is: \", 100*ml2_elder\/fm2_elder)","5a628810":"l = 3\nx=np.arange(0,2.5,0.1)\ny= 1- np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential CDF: $\\lambda$ =%.2f'% l ,fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","e258e4b2":"from __future__ import division\nimport scipy.stats as stats\n\nl = 3\nx=np.arange(0,2.5,0.1)\ny= l * np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential PDF: $\\lambda$ =%.2f'% l, fontsize=15)\nplt.xlabel('x', fontsize=15)\nplt.ylabel('PDF', fontsize=15)\nplt.show()","a3362cc9":"l = 0.25\n\nx=np.arange(0,25,0.1)\ny= l * np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential: $\\lambda$ =%.2f' %l ,fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('PDF',fontsize=15)\nplt.show()","c7fdb44b":"u=6 # mean\ns=2 # standard deviation\n\nx=np.arange(0,15,0.1)\n\ny=(1\/(np.sqrt(2*np.pi*s*s)))*np.exp(-(((x-u)**2)\/(2*s*s)))\n\nplt.plot(x,y,'-')\nplt.title('Gaussian PDF: $\\mu$=%.1f, $\\sigma$=%.1f'%(u,s),fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('Probability density',fontsize=15)\nplt.show()","dc4f64fc":"fig, ax = plt.subplots(1, 4, sharey=True, squeeze=True, figsize=(14, 5))\nx = np.linspace(0, 1, 100)\nfor i in range(4):\n    f = np.mean(np.random.random((10000, i+1)), 1)\n    m, s = np.mean(f), np.std(f, ddof=1)\n    fn = (1\/(s*np.sqrt(2*np.pi)))*np.exp(-(x-m)**2\/(2*s**2))  # normal pdf            \n    ax[i].hist(f, 40, density=True, color=[0, 0.2, .8, .6]) \n    ax[i].set_title('n=%d' %(i+1))\n    ax[i].plot(x, fn, color=[1, 0, 0, .6], linewidth=5)\nplt.suptitle('Demonstration of the central limit theorem for a uniform distribution', y=1.05)\nplt.show()","bc98412d":"from scipy.stats.distributions import norm\n\n# Some random data\ny = np.random.random(15) * 10\nx = np.linspace(0, 10, 100)\n\nx1 = np.random.normal(-1, 2, 15) # parameters: (loc=0.0, scale=1.0, size=None)\nx2 = np.random.normal(6, 3, 10)\ny = np.r_[x1, x2] # r_ Translates slice objects to concatenation along the first axis.\nx = np.linspace(min(y), max(y), 100)\n\n# Smoothing parameter\ns = 0.4\n\n# Calculate the kernels\nkernels = np.transpose([norm.pdf(x, yi, s) for yi in y])\n\nplt.plot(x, kernels, 'k:')\nplt.plot(x, kernels.sum(1), 'r')\nplt.plot(y, np.zeros(len(y)), 'go', ms=10)","779d8e6a":"from scipy.stats import kde\n\nx1 = np.random.normal(-1, 0.5, 15)\n\n# parameters: (loc=0.0, scale=1.0, size=None)\n\nx2 = np.random.normal(6, 1, 10)\ny = np.r_[x1, x2]\n\n# r_ Translates slice objects to concatenation along the first axis.\n\nx = np.linspace(min(y), max(y), 100)\ns = 0.4   # Smoothing parameter\n\nkernels = np.transpose([norm.pdf(x, yi, s) for yi in y])\n\n# Calculate the kernels\ndensity = kde.gaussian_kde(y)\n\nplt.plot(x, kernels, 'k:')\nplt.plot(x, kernels.sum(1), 'r')\nplt.plot(y, np.zeros(len(y)), 'bo', ms=10)","3a8b1f3f":"xgrid = np.linspace(x.min(), x.max(), 200)\nplt.hist(y, bins=28, density=True)\nplt.plot(xgrid, density(xgrid), 'r-')","a0f687eb":"# Create a bi-modal distribution with a mixture of Normals.\n\nx1 = np.random.normal(-1, 2, 15) # parameters: (loc=0.0, scale=1.0, size=None)\nx2 = np.random.normal(6, 3, 10)\n\n# Append by row\nx = np.r_[x1, x2]\n\n# r_ Translates slice objects to concatenation along the first axis.\nplt.hist(x, bins=18, density=True)","ed11bd71":"density = kde.gaussian_kde(x)\nxgrid = np.linspace(x.min(), x.max(), 200)\nplt.hist(x, bins=18, density=True)\nplt.plot(xgrid, density(xgrid), 'r-')","e66dcc36":"x = np.random.normal(0.0, 1.0, 10000)\na = plt.hist(x,50,density='True')","798be649":"print ('The empirical mean of the sample is ', x.mean())","324169cc":"NTs=200\nmu=0.0\nvar=1.0\nerr = 0.0\nNPs=1000\nfor i in range(NTs):\n    x = np.random.normal(mu, var, NPs)\n    err += (x.mean()-mu)**2\n\nprint ('MSE: ', err\/NTs)","ba5f1ce4":"def Cov(X, Y):\n    def _get_dvis(V):\n        return [v - np.mean(V) for v in V]\n    dxis = _get_dvis(X)\n    dyis = _get_dvis(Y)\n    return np.sum([x * y for x, y in zip(dxis, dyis)])\/len(X)\n\n\nX = [5, -1, 3.3, 2.7, 12.2]\nX= np.array(X)\nY = [10, 12, 8, 9, 11]\n\nprint (\"Cov(X, X) = %.2f\" % Cov(X, X))\nprint (\"Var(X) = %.2f\" % np.var(X))\n\nprint (\"Cov(X, Y) = %.2f\" % Cov(X, Y))","43b6bd1f":"MAXN=100\nMAXN=40\n\nX=np.array([[1,9],[3, 2], [5,3],[5.5,4],[6,4],[6.5,4],[7,3.5],[7.5,3.8],[8,4],\n[8.5,4],[9,4.5],[9.5,7],[10,9],[10.5,11],[11,11.5],[11.5,12],[12,12],[12.5,12],[13,10]])","e5423b35":"plt.subplot(1,2,1)\nplt.scatter(X[:,0],X[:,1],color='b',s=120, linewidths=2,zorder=10)\nplt.xlabel('Economic growth(T)',fontsize=15)\nplt.ylabel('Stock market returns(T)',fontsize=15)\nplt.gcf().set_size_inches((20,6))","e4e18d40":"X=np.array([[1,8],[2, 7], [3,6],[4,8],[5,8],[6,7],[7,7],[8,5],[9,5],[10,6],[11,4],[12,5],[13,3],[14,2],[15,2],[16,1]])\n\nplt.subplot(1,2,1)\nplt.scatter(X[:,0],X[:,1],color='b',s=120, linewidths=2,zorder=10)\nplt.xlabel('World Oil Production(T)',fontsize=15)\nplt.ylabel('Gasoline prices(T)',fontsize=15)\nplt.gcf().set_size_inches((20,6))","6ef89d2e":"def Corr(X, Y):\n    assert len(X) == len(Y)\n    return Cov(X, Y) \/ np.prod([np.std(V) for V in [X, Y]])\n\nprint (\"Corr(X, X) = %.5f\" % Corr(X, X))\n\nY=np.random.random(len(X))\n\nprint (\"Corr(X, Y) = %.5f\" % Corr(X, Y))","ef946709":"def list2rank(l):\n    #l is a list of numbers\n    # returns a list of 1-based index; mean when multiple instances\n    return [np.mean([i+1 for i, sorted_el in enumerate(sorted(l)) if sorted_el == el]) for el in l]\n\nl = [7, 1, 2, 5]\nprint (\"ranks: \", list2rank(l))\n\ndef spearmanRank(X, Y):\n    # X and Y are same-length lists\n    print (list2rank(X) )\n    print (list2rank(Y))\n    return Corr(list2rank(X), list2rank(Y))\n\nX = [10, 20, 30, 40, 1000]\nY = [-70, -1000, -50, -10, -20]\nplt.plot(X,'ro')\nplt.plot(Y,'go')\n\nprint (\"Pearson rank coefficient: %.2f\" % Corr(X, Y))\nprint (\"Spearman rank coefficient: %.2f\" % spearmanRank(X, Y))","5fc12116":"X=np.array([[10.0, 8.04,10.0, 9.14, 10.0, 7.46, 8.0, 6.58],\n[8.0,6.95, 8.0, 8.14, 8.0, 6.77, 8.0, 5.76],\n[13.0,7.58,13.0,8.74,13.0,12.74,8.0,7.71],\n[9.0,8.81,9.0,8.77,9.0,7.11,8.0,8.84],\n[11.0,8.33,11.0,9.26,11.0,7.81,8.0,8.47],\n[14.0,9.96,14.0,8.10,14.0,8.84,8.0,7.04],\n[6.0,7.24,6.0,6.13,6.0,6.08,8.0,5.25],\n[4.0,4.26,4.0,3.10,4.0,5.39,19.0,12.50],\n[12.0,10.84,12.0,9.13,12.0,8.15,8.0,5.56],\n[7.0,4.82,7.0,7.26,7.0,6.42,8.0,7.91],\n[5.0,5.68,5.0,4.74,5.0,5.73,8.0,6.89]])","19c29ae2":"plt.subplot(2,2,1)\nplt.scatter(X[:,0],X[:,1],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)","679d74ed":"plt.subplot(2,2,2)\nplt.scatter(X[:,2],X[:,3],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)\nplt.subplot(2,2,3)\nplt.scatter(X[:,4],X[:,5],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)","116fa267":"plt.subplot(2,2,4)\nplt.scatter(X[:,6],X[:,7],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)\nplt.gcf().set_size_inches((10,10))","a7290112":"print (\"Cov(X, X) = %.2f\" % Cov(X, X))\nprint (\"Var(X) = %.2f\" % np.var(X))\nprint (\"Corr(X, X) = %.5f\" % Corr(X, X))\nprint (\"Pearson rank coefficient: %.2f\" % Corr(X, X))\nprint (\"Spearman rank coefficient: %.2f\" % spearmanRank(X,X))","1e1a23cb":"* The relative risk is the ratio of two probabilities. In order to get the relative risk  of early promotion, we need to consider the fraction of both probabilities.*","d40fb0e4":"*SciPy implements a Gaussian KDE that automatically chooses an appropriate bandwidth. we create a bi-modal distribution of data that is not easily summarized by a parametric distribution*","d97f7109":"* since i have created a group for high income males ml1 i can calculate the median of this group by calling the function median()*\n* same for female fm1*","15da4e3f":"* the average age of male can be calculated by using the function mean() and we have already created the group ml*\n* the average age of female can be calculated by using the function mean() and we have already created the group fm*","40e8c7fb":"* eliminating the index of male and female with income higher than 50K and age >72 and age<22 ( outliers) , then computing the dataframe shape of both female and male*","25e2df8b":"* histogram type is step type, we are combining both male and female in the same histogram in a cumulative way for each one*","2df55ad3":"*What is the age of the most represented people?*\nthe most represented people age is 20","6e09bc8d":"* we can see the pearson's skewness coefficient of male and female *","4941ea3f":"* in this case we are working on female ages, we are using PMF and not female samples number and bins=20, the histogram is normalized*","52faea2e":"* the average age of high income male can be calculated by using the function mean() and we have already created the correspondant group ml1*\n* the average age of high income female can be calculated by using the function mean() and we have already created the correspondant group fm1*","177c8812":"* Correlation coefficients are used to measure the strength of the relationship between two variables.\n* Pearson correlation is the one most commonly used in statistics. This measures the strength and direction of a linear relationship between two variables\n* A calculated number greater than 1.0 or less than -1.0 means that there was an error in the correlation measurement*\n* so because X is the same serie , we got Corr(X,X)=2 which is a high value and then there is strong relation between the 2 variables( but it is the same variable X here)\n* in the second case, Corr(x,Y) the value is 0.03362, the relation between the variables X and Y is not very strong","a5fd4026":"* bins was = 20 for both and now bins=10 so the number of samples is multiplied by 2, and the type is stepfilled and density=1, the histogram shows the probability and not the samples numbert, the histogram is normalized*","6efa2455":"* by using the plot method, we can see in this graph the number of males with their different ages, approximately 2400 male have the age of 32*","d249e08c":"**split people according to gender into two groups: men and women*\n; we obtained 21790 male*","14294041":"* i can calculate the median by calling its function median() and of course by using the group ml for male or fm for female*","a9ccab6b":"**Gaussian kernel is used to generate the density around the data. for this example, we consider a set of random data generated by a bimodal normal distribution. If we consider a Gaussian kernel around the data, the sum of those kernels can give us a continuous function that when normalized would approximate the density of the distribution**","119ab4aa":"* in the previous operations, we classified men and women in groups and then we did the calculation again for the mean, std and median so that we can see for each gender the outliers. finally we did the mean difference without outliers and it become lower ( 2.44 ) than the first result ( 2.58) because we removed the outliers from them*","85387261":"* series X and Y are tending to varying together since their product is positive*","6731fc68":"**Kernel density*\nwhen the interest is not in the parameters of a particular distribution of data, it is for continuous data representation, then the distribution non-parametrically should be estimated without assumptions about the form of the underlying distribution\n * we have a set of data measurements without knowing their distribution and we need to estimate the continuous representation of their distribution. In this case, we can consider a Gaussian kernel to generate the density around the data. Let us consider a set of random data generated by a bimodal normal distribution. If we consider a Gaussian kernel around the data, the sum of those kernels can give us a continuous function that when normalized would approximate the density of the distribution:","103c2e0b":"* by indicating bin=20 for females, histogram shows the female samples number divided by 2*\n* by indicating bin=10 for males, histogram shows the male samples multiplied by 2* ","9467c7f4":"*Describe an explain the result*\nHere i created a new dataframe where i am calling the function head() to print the 1st 5 rows","dd7d1310":"* by using drop function we remove the selected index in this case we remove index where people have an income higher than 50K, their age is between 37 and 72 and age is betwwen 22*","3e034083":"we have 10771 female","d11ece63":"*What is the obtained result? What did you ask for in the previous command? Explain*\ni am filling the data in a dictionnary that i could call it later by mentioning which row i want or row interval, \nin this case i am printing the 2nd index with its data divided in columns","0a30181f":"*after creating ml1 and fm1 we can calculate these percentages*","0b6d8496":"*creating some examples of positive and negative correlations like those showing the relations of stock market with respect to the economic growth or the gasoline prices with respect to the world oil production*","b32ccd48":"* How many items are there for USA? and for Mexico?*\n For USA 29170\n; for Mexico 643","4d679ecb":"* since skewness is not 0, then male age is not symetric and it is shifted to the right of mean value *\n* same for the female, female age is not symetric then skewness is not 0 and it is shifted to the right of mean value *","38dd313d":"*  the difference between male age average and female age average is 2 years and half ( 2.5 years) *","815aee2c":"* here we are finding the number of persons where their income is higher than 50K and their age is lower than 22, since 37 is the median and any age outside the range of 22-72 is considered as outliers*","db37557e":"1179 are female and their income is higher than 50k","0bf1659a":"*the final construction of the density estimate is obtained*","4530d428":"*we are working on estimating values of unknown parameters of the dataset*","36516b9a":"*Describe and explain the result. Compare with the previous one.*\nI am printing the last 5 rows of the dataframe structure by using the tail() function","18e2282b":"* 2500 female are in the range of 18-25 years old, we can see different females ages with their numbers*","c397654b":"* the histogram type is now step type and not stepfilled and cumulative, we obtain this form of histogram for females*","47905742":"*this is the value of mean square errors, this value 0.0009 means that there is not a lot of errors, since there is no outliers and the mean x- used minimizes MSE*","9d27857c":"* ml1 is the reate of male having an income higher than 50k*\n* fm1 is the rate of female having an income higher than 50k*\n* df1 is the total rate of people having an income higher than 50k*\n* so in this case we can calculate the rate of each gender having the income higher than 50k*","7e174a63":"* 6662 are male and their income is higher than 50k*","4f68dec6":"* we can see how the graph of dataframe df2 became smaller ( red ) because it does not contain outliers*","11468fc4":"* in these operations, since i have created a group male ml which contains all male data from the dataframe structure, i can then do some statistics to calculate the age mean(), variance var() and standard deviation std() by calling the appropriate function *\n* same for the hours per week for both female and male * ","8539ce73":"* by creating a new group called ml_median_hr,  i can access males hour per week from male group ml and then calculate the median of this group*\n* same for the female*","ece5eb61":"* here we are finding the number of persons where their income is higher than 50K and their age is higher than 72, since 37 is the median and any age outside the range of 22-72 is considered as outliers**","fc763904":"*Describe an explain the result* \nshape() function gives how many rows and columns we have in the dataframe structure, in our case we have 32561 rows and 15 columns","8c151a23":"**","58720a3a":"* in this case we are working on male ages, we are using PMF and bins=20 so the number of males divided by 2, the histogram is normalized*","fb95c9bc":"* Moreover, histograms and other statistics show the skewness of the data and the fact that women used to be promoted a little bit earlier than men, in general. *","1a6e28c4":"* to show the PMF we should indicate density=1 in this case we will not see the samples number, we see the probability for each females and males*","6b606e83":"*the histogram type is now step type and not stepfilled and cumulative, we obtain this form of histogram for males*","1cdf7305":"* as a recap, what we obtained as mean and median values after classifiying male and female as high income, then after cleaning them from outliers*"}}