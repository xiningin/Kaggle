{"cell_type":{"78fc17f0":"code","377218ea":"code","479e0461":"code","1251d9f3":"code","327f45d9":"code","0bd16acf":"code","22b08100":"code","bd4d150f":"code","83737a84":"code","d96d281b":"code","87a79f84":"code","0cdd3829":"code","5030657e":"code","a9791530":"code","c5feb3a1":"code","5ad99b9d":"code","422d31f7":"code","2cbcdd59":"code","8f331d60":"code","03e5bcaf":"code","202ed5c8":"code","6203add7":"code","7771257c":"code","7d5209d9":"code","949d86a9":"code","2a593b87":"code","123af65c":"code","19e2e890":"code","1fd99aed":"code","1660ff83":"code","fe7e7ac2":"code","57a901d5":"code","bc32b103":"code","26b637cc":"code","974331f1":"code","23fea3f0":"code","1d97a356":"code","48f288d6":"code","47cfcebb":"code","0b1a3974":"code","27d8b32b":"code","7ad0583d":"code","d8631d5e":"code","26be5932":"code","95fa2f93":"code","7e747a1a":"code","d5156532":"code","49dca2f2":"markdown","6ad79036":"markdown","f3d13826":"markdown","90f7cf74":"markdown","bf49728c":"markdown","7d4faae1":"markdown","1842cd6f":"markdown","365f27e0":"markdown","b04c0179":"markdown","f5c2607b":"markdown","81430fcb":"markdown","c8caab75":"markdown","650aa751":"markdown","c06b5549":"markdown"},"source":{"78fc17f0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport skimage\nfrom skimage import transform\nfrom skimage import util\nimport cv2\nimport tensorflow as tf\nfrom math import pi\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport warnings\nimport os\nprint(os.listdir(\"..\/input\"))\nwarnings.filterwarnings(\"ignore\")\n\n# Any results you write to the current directory are saved as output.","377218ea":"df_train = pd.read_csv('..\/input\/train.csv')","479e0461":"df_train.head()","1251d9f3":"X_train = df_train.iloc[:, 1:]\nY_train = df_train.iloc[:, 0]","327f45d9":"X_train.head()","0bd16acf":"Y_train.head()","22b08100":"X_train = np.array(X_train)\nY_train = np.array(Y_train)","bd4d150f":"def plot_digits(X, Y, shape):\n    for i in range(9):\n        plt.subplot(3, 3, i+1)\n        plt.tight_layout()\n        plt.imshow(X[i].reshape((28,28)), interpolation='none', cmap='gray')\n        plt.title('Digit:{}'.format(Y[i]))\n        plt.xticks([])\n        plt.yticks([])\n    plt.show()","83737a84":"plot_digits(X_train, Y_train, 28)","d96d281b":"def rotate_image(X, degrees):\n    X_flip = []\n    for i in range(9):\n        img = X[i].reshape((28, 28))\n        img = skimage.transform.rotate(img, degrees)\n        X_flip.append(img.reshape((784)))\n    X_trfr = np.array(X_flip)\n    X = np.concatenate((X, X_flip))\n    return X","87a79f84":"X_rot = rotate_image(X_train, -30)","0cdd3829":"plot_digits(X_rot[42000:], Y_train, 28)","5030657e":"def flip_digits(X):\n    X_flip = []\n    for i in range(9):\n        img = X[i].reshape((28, 28))\n        img = np.fliplr(img)\n        X_flip.append(img.reshape((784)))\n    X_trfr = np.array(X_flip)\n    X = np.concatenate((X, X_flip))\n    return X","a9791530":"X_flip = flip_digits(X_train)","c5feb3a1":"plot_digits(X_flip[42000:], Y_train, 28)","5ad99b9d":"def noise_image(X):\n    X_flip = []\n    for i in range(9):\n        img = X[i].reshape((28, 28))\n        img = skimage.util.random_noise(img, mode='pepper')\n        X_flip.append(img.reshape((784)))\n    X_trfr = np.array(X_flip)\n    X = np.concatenate((X, X_flip))\n    return X","422d31f7":"X_noise = noise_image(X_train)","2cbcdd59":"plot_digits(X_noise[42000:], Y_train, 28)","8f331d60":"def scale_up_image(X, scale):\n    X_flip = []\n    for i in range(9):\n        img = X[i].reshape((28, 28))\n        img = skimage.transform.rescale(img, scale, clip=True)\n        img = skimage.util.crop(img, ((0, 28), (0, 28)))\n        X_flip.append(img.reshape((784)))\n    X_trfr = np.array(X_flip)\n    X = np.concatenate((X, X_flip))\n    return X","03e5bcaf":"X_scale = scale_up_image(X_train, 2)","202ed5c8":"plot_digits(X_scale[42000:], Y_train, 28)","6203add7":"def translate_image(X, h, w):\n    X_flip = []\n    M = np.float32([[1, 0, h], [0, 1, w]])\n    for i in range(9):\n        img = X[i].reshape((28, 28))\n        img = img.astype(np.float32)\n        img = cv2.warpAffine(img, M, (28, 28))\n        X_flip.append(img.reshape((784)))\n    X_trfr = np.array(X_flip)\n    X = np.concatenate((X, X_flip))\n    return X","7771257c":"X_translate = translate_image(X_train, 5, 5)","7d5209d9":"plot_digits(X_translate[42000:], Y_train, 28)","949d86a9":"def flip_image_tf(X, mode):\n    X_img = tf.placeholder(dtype=tf.float32, shape=(28, 28, 1), name='X')\n    if mode == 1:\n        tf_flip = tf.image.flip_left_right(X_img)\n    elif mode == 2:\n        tf_flip = tf.image.flip_up_down(X_img)\n    elif mode == 3:\n        tf_flip = tf.image.transpose_image(X_img)\n\n    tf.global_variables_initializer()\n    sess = tf.Session()\n    X_flip = []\n    for i in range(9):\n        img = X[i].reshape((28, 28, 1))\n        img_flip = sess.run([tf_flip], feed_dict={X_img:img})\n        X_flip.append(img_flip[0].reshape((784)))\n    return X_flip","2a593b87":"X_lr = flip_image_tf(X_train, 1)\nX_lr = np.array(X_lr)","123af65c":"plot_digits(X_lr, Y_train, 28)","19e2e890":"X_ud = flip_image_tf(X_train, 2)\nX_ud = np.array(X_ud)","1fd99aed":"plot_digits(X_ud, Y_train, 28)","1660ff83":"X_tr = flip_image_tf(X_train, 3)\nX_tr = np.array(X_tr)","fe7e7ac2":"plot_digits(X_tr, Y_train, 28)","57a901d5":"def rotate_image_tf(X, rot_angle):\n    X_img = tf.placeholder(dtype=tf.float32, shape=(28, 28, 1), name='X')\n    angle = tf.placeholder(dtype=tf.float32, shape=(1), name='angle')\n    tf_rot = tf.contrib.image.rotate(X_img, angle)\n    tf.global_variables_initializer()\n    sess = tf.Session()\n    X_rot = []\n    for i in range(9):\n        img = X[i].reshape((28, 28, 1))\n        rad = [rot_angle*pi\/180]\n        img_rot = sess.run([tf_rot], feed_dict={X_img:img, angle:rad})\n        img_rot = img_rot[0].reshape((784))\n        X_rot.append(img_rot)\n    return X_rot","bc32b103":"X_rot = rotate_image_tf(X_train, 45)\nX_rot = np.array(X_rot)","26b637cc":"plot_digits(X_rot, Y_train, 28)","974331f1":"from keras.preprocessing.image import ImageDataGenerator","23fea3f0":"def image_aug_keras(X):\n    datagen = ImageDataGenerator(rotation_range=10, zoom_range=0.1, \\\n                                 width_shift_range=0.1, height_shift_range=0.1)\n    X_aug = []\n    for i in range(9):\n        X_train2, Y_train2 = datagen.flow(X_train[i,:].reshape((1, 28, 28, 1)), \\\n                                          Y_train[i].reshape((1, 1, 1, 1))).next()\n        X_aug.append(X_train2.reshape((28,28)))\n    return X_aug","1d97a356":"X_aug = image_aug_keras(X_train)\nX_aug = np.array(X_aug)","48f288d6":"plot_digits(X_aug, Y_train, 28)","47cfcebb":"from imgaug import augmenters as iaa","0b1a3974":"def flip_image_iaa(X):\n    X_flip = []\n    seq = iaa.Sequential([\n        iaa.Fliplr(1)\n    ])\n    for i in range(9):\n        img = X[i].reshape((1, 28, 28))\n        img_aug = seq.augment_images(img)\n        X_flip.append(img_aug[0].reshape((784)))\n    return X_flip","27d8b32b":"X_flip = flip_image_iaa(X_train)\nX_flip = np.array(X_flip)","7ad0583d":"plot_digits(X_flip, Y_train, 28)","d8631d5e":"def augment_image_iaa(X):\n    X_rotate = []\n    seq = iaa.Sequential([\n        iaa.Affine(\n            scale={\"x\": (0.8, 1.2), \"y\": (0.8, 1.2)},\n            translate_percent={\"x\": (-0.2, 0.2), \"y\": (-0.2, 0.2)},\n            rotate=(-25, 25),\n            shear=(-8, 8)\n        )\n    ])\n    for i in range(9):\n        img = X[i].reshape((1, 28, 28))\n        img_aug = seq.augment_images(img)\n        X_rotate.append(img_aug.reshape((784)))\n    return X_rotate","26be5932":"X_aug = augment_image_iaa(X_train)\nX_aug = np.array(X_aug)","95fa2f93":"plot_digits(X_aug, Y_train, 28)","7e747a1a":"X_aug = augment_image_iaa(X_train)\nX_aug = np.array(X_aug)","d5156532":"plot_digits(X_aug, Y_train, 28)","49dca2f2":"# Add noise","6ad79036":"# Augmentation with ImgAug","f3d13826":"# Let's do the same in TensorFlow\n\n* Flip\n* Rotate\n* Scale\n* Crop\n* Translate","90f7cf74":"# Rotate Image","bf49728c":"# Flip Image - LR, Up-Down, Transpose","7d4faae1":"# Translate image","1842cd6f":"# Flip Image","365f27e0":"# Let's explore Keras ImageDataGenerator","b04c0179":"# Rotate image","f5c2607b":"This kernel has implementation of different data augmentation techniques in Python(skimage, OpenCV), TensorFlow, Keras, ImgAug for Digit Recognizer.\n\n* Rotate\n* Flip\n* Add Noise\n* Scale\n* Translate","81430fcb":"# Scale image","c8caab75":"   # Load data","650aa751":"# Split train to X and Y","c06b5549":"# Plot Digits"}}