{"cell_type":{"a43f1b46":"code","bf2d30b3":"code","1904f1e6":"code","454e2129":"code","67b98169":"code","eb675097":"code","2a832cd9":"code","12f0b8dc":"code","bd09b413":"code","ff858408":"code","a80ed657":"code","5b97c373":"code","1c3e8365":"code","824e40bf":"code","ce0255c2":"code","56d938d5":"code","953b70dd":"code","64e252e0":"code","443b8f5c":"code","4902a24a":"code","3e051a5a":"code","d3e1743f":"code","b67ad90e":"code","1bcf07b8":"code","0459a019":"code","24348373":"code","10fa13c7":"code","432f875c":"code","004c8613":"code","dce4b49a":"code","2455ce42":"code","a063ec22":"code","ed967ade":"code","0c33ead3":"code","569b237b":"code","78b3f89b":"code","ffb8346e":"markdown","0e84e68c":"markdown","1927f639":"markdown","e1fef76b":"markdown","aed4f77d":"markdown","9423c61d":"markdown","88251d1e":"markdown","c800b1bc":"markdown","c77687f1":"markdown","9408d6b3":"markdown"},"source":{"a43f1b46":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","bf2d30b3":"#Import libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('white')\n%matplotlib inline","1904f1e6":"#Dataframe-1 \ncolumn_names = ['user_id', 'item_id', 'rating', 'timestamp']\ndf = pd.read_csv('..\/input\/movie-dataset123\/u.csv', names=column_names)\n","454e2129":"df.head()","67b98169":"#Movie_titles(Dataframe-2)\nmovie_titles = pd.read_csv(\"..\/input\/movie-title\/Movie_Id_Titles.csv\")\nmovie_titles.head()\n","eb675097":"#Merging or joinning two dataframe based on Item_id..........\ndf = pd.merge(df,movie_titles,on='item_id')\ndf.head()\n","2a832cd9":"\n#Visualize highest user rating..........\ndf['rating'].value_counts().plot(kind='bar',color='green')\n","12f0b8dc":"\n#Checking the unique title in df dataset....... \ndf1 =pd.DataFrame(df['title'].unique())\ndf1.count()","bd09b413":"#Checking the unique user's in df dataset....... \ndf2 =pd.DataFrame(df['user_id'].unique())\ndf2.count()\n","ff858408":"\n# =============================================================================\n# # EDA\n# \n# Let's explore the data a bit and get a look at some of the best rated movies.\n# =============================================================================\n# \n# Let's create a ratings dataframe with average rating and number of ratings:\n# =============================================================================\nMean_df= df.groupby('title')['rating'].mean().sort_values(ascending=False).head()\nMean_df.head()","a80ed657":"#Checking the user's who have viewed Movie most.... \nCount_df = df.groupby('title')['rating'].count().sort_values(ascending=False).head()\nCount_df.head()","5b97c373":"#Taking out the mean of the rating based on unique title movie.........\nratings = pd.DataFrame(df.groupby('title')['rating'].mean())\nratings.head()\n","1c3e8365":"\n#Now set the number of ratings column\nratings['num of ratings'] = pd.DataFrame(df.groupby('title')['rating'].count())\nratings.head()","824e40bf":"#Visualizing the num of rating(Count of movie who have give rating to it)\nplt.figure(figsize=(10,4))\nratings['num of ratings'].hist(bins=70)","ce0255c2":"\n\n#Visualizing the rating\nplt.figure(figsize=(10,4))\nratings['rating'].hist(bins=70)","56d938d5":"\n#Or you can even try this plot used to view two different plot(Hist,scatter plot) \nsns.jointplot(x='rating',y='num of ratings',data=ratings,alpha=0.5)\n","953b70dd":"\n# =============================================================================\n# \n# Okay! Now that we have a general idea of what the data looks like, \n# let's move on to creating a simple recommendation system:\n# \n# Recommending Similar Movies\n# \n# Now let's create a matrix that has the user ids on one access and the movie title\n# on another axis. Each cell will then consist of the rating the user gave to that movie. \n#Note there will be a lot of NaN values, because most people have not seen most of the movies.\n# =============================================================================\n\n\nmoviemat = df.pivot_table(index='user_id',columns='title',values='rating')\n\nmoviemat.head()\n\n\n","64e252e0":"#Lets see the top rated movies based on user interest..........\nratings.sort_values('num of ratings',ascending=False).head(10)\n\n\nratings.head()\n","443b8f5c":"\n\n#Now if we sort the dataframe by correlation, we should get the most similar\n#movies, however note that we get some results that don't really make sense.\n#This is because there are a lot of movies only watched once by users who also\n#watched star wars (it was the most popular movie).\n\n# =============================================================================\n# Working with star_wars movie .......................\n# =============================================================================\n\n#Now let's grab the user ratings for those two movies:\nstarwars_user_ratings = moviemat['Star Wars (1977)']\nstarwars_user_ratings.head()\n\n","4902a24a":"\n\n#We can then use corrwith() method to get correlations between two pandas series:\nsimilar_to_starwars = moviemat.corrwith(starwars_user_ratings)\n\n","3e051a5a":"#Drop nan:----(STARWARS)\ncorr_starwars = pd.DataFrame(similar_to_starwars,columns=['Correlation'])\ncorr_starwars.dropna(inplace=True)\ncorr_starwars.head()\n","d3e1743f":"\ncorr_starwars.sort_values('Correlation',ascending=False).head(10)","b67ad90e":"\n#Let's fix this by filtering out movies that have less than 100 reviews \n#(this value was chosen based off the histogram from earlier).\ncorr_starwars = corr_starwars.join(ratings['num of ratings'])\ncorr_starwars.head()\n","1bcf07b8":"\n\n#Now sort the values and notice how the titles make a lot more sense:\ncorr_starwars[corr_starwars['num of ratings']>100].sort_values('Correlation',ascending=False).head()\n\n\n","0459a019":"\n# =============================================================================\n# Working with LiarLiar movie............\n# =============================================================================\n\n\nliarliar_user_ratings = moviemat['Liar Liar (1997)']\nliarliar_user_ratings.head()\n","24348373":"\n\nsimilar_to_liarliar = moviemat.corrwith(liarliar_user_ratings)","10fa13c7":"\n\n#Now the same for the comedy Liar Liar:\ncorr_liarliar = pd.DataFrame(similar_to_liarliar,columns=['Correlation'])\ncorr_liarliar.dropna(inplace=True)\n\n","432f875c":"corr_liarliar.sort_values('Correlation',ascending=False).head(10)\n","004c8613":"\n#Let's fix this by filtering out movies that have less than 100 reviews \n#(this value was chosen based off the histogram from earlier).\ncorr_liarliar = corr_liarliar.join(ratings['num of ratings'])\n","dce4b49a":"\n#Now sort the values and notice how the titles make a lot more sense:\ncorr_liarliar[corr_liarliar['num of ratings']>100].sort_values('Correlation',ascending=False).head()\n\n\n","2455ce42":"\n# =============================================================================\n# Working with Contact movie.............\n# =============================================================================\n\n#Now let's grab the user ratings for those two movies:\nContact_user_ratings = moviemat['Contact (1997)']\nContact_user_ratings.head()","a063ec22":"\nsimilar_to_Contact = moviemat.corrwith(Contact_user_ratings)","ed967ade":"corr_Contact = pd.DataFrame(similar_to_Contact,columns=['Correlation'])\ncorr_Contact.dropna(inplace=True)\n","0c33ead3":"\ncorr_Contact.sort_values('Correlation',ascending=False).head(10)\n","569b237b":"\n#Let's fix this by filtering out movies that have less than 100 reviews \n#(this value was chosen based off the histogram from earlier).\ncorr_Contact = corr_Contact.join(ratings['num of ratings'])\n","78b3f89b":"#Now sort the values and notice how the titles make a lot more sense:\ncorr_Contact[corr_Contact['num of ratings']>100].sort_values('Correlation',ascending=False).head()\n","ffb8346e":"**From the above output we can see that the user who viewed Liar liar(1997) will get recommendation\/suggestion as Batman Forever(1995),Mak,The(1994) and all we get is based on correlation values(The more it is near to 1 the higher chances of getting recommend\/suggestion)**","0e84e68c":"# Guys if you like then VOTE UP!!\n\n\n\n![](https:\/\/i.gifer.com\/1B4T.gif)","1927f639":"# Here is the simplest way of describing recommendation system.....\n\nSo what is recommendation system?\n\n->Simple way of defining this is ---it always keep tracking your activity at the back-end and whenever you visit back to the same website you will get suggestions based on that......\n\n\n\n# Example\nLike if you are watching some movie at Hotstar lets say a comedy movie and you have given rating 4 to it.....\nIt will always tracking user activity at the back-end and next time when you visit hotstar you will get recommend comedy movie with 4+ rating......","e1fef76b":"**From the above output we can see that the user who viewed Star wars(1997) will get recommendation\/suggestion as Empire Strikes Back,The(1980),Return of the jedi(1983) and all we get is based on correlation values(The more it is near to 1 the higher chances of getting recommend\/suggestion)**","aed4f77d":"# Overview about the dataset.\nIn this datset we have data about movie like User_id,Item_id,title,ratings etc\nWe closely analysis it.\n","9423c61d":"![](https:\/\/miro.medium.com\/max\/1500\/1*gBGnffHvHxI0SnVVu36bMw.gif)","88251d1e":"**From the above output we can see most of the users have viewed Starwars->584,Contact->509,Fargo->508,Return of the jedi->507,liar liar->485 **","c800b1bc":" From above \"Bar graph\" we can see that almost 33000+ user's given \"4\" rating....which is highest among all....\n\nAverage number(240000+) of user's has given \"5\"rating.... \n\nVery less  user's has given rating \"1\" which is around 7000+.......................\n\n","c77687f1":"**From the above output we can see that the user who viewed Contact(1997) will get recommendation\/suggestion as Philadelphia(1993),Mak,The(1994) and all we get is based on correlation values(The more it is near to 1 the higher chances of getting recommend\/suggestion)**","9408d6b3":"# We are trying to join two different dataframe....\n"}}