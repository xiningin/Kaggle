{"cell_type":{"221f736f":"code","de603d97":"code","2c8e8ad4":"code","e33d20d1":"code","6a4d8992":"code","94514465":"code","9c0f111a":"code","8d7aa9a0":"code","3ee8937f":"code","a59a1861":"code","b4abee3b":"code","93b09f7c":"code","81da3ed4":"code","166c2dff":"code","f61437aa":"code","477ffa4e":"code","3963ec77":"code","0f5271df":"code","3b05476d":"code","c4cc285e":"code","6c1222d8":"code","dcd9ab22":"code","1dfe5a33":"code","ce111e07":"code","848b16e2":"code","93742e8b":"code","b251643c":"code","d869d675":"code","ddcffbfc":"code","51cf46de":"code","f02c275a":"markdown","2b190466":"markdown","afbf5ada":"markdown","dda4b57c":"markdown","cdf4a634":"markdown","8194ff4a":"markdown","c0c3e63f":"markdown"},"source":{"221f736f":"import math\nimport random\nimport numpy as np\nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\nfrom scipy import stats\nfrom scipy.stats import norm, skew \n\n\nimport pickle\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import explained_variance_score\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.linear_model import LinearRegression, Ridge, \\\n                                 RidgeCV, Lasso, LassoCV, \\\n                                 ElasticNet, ElasticNetCV","de603d97":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv', header = 0)\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nsample = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')","2c8e8ad4":"train.head(5)","e33d20d1":"train.shape\ntest.shape\n","6a4d8992":"test.shape","94514465":"train.columns","9c0f111a":"test.columns","8d7aa9a0":"sample","3ee8937f":"X = train[['MSSubClass', 'LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearBuilt',\n             'YearRemodAdd', 'MasVnrArea', 'ExterQual', 'ExterCond','BsmtQual','BsmtCond', 'BsmtExposure' ,'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'CentralAir',\n             '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n             'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageYrBlt', 'GarageCars',\n             'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch',\n             'PoolArea', 'MiscVal', 'MoSold','YrSold', 'BsmtFinType1','BsmtFinType2', 'HeatingQC','KitchenQual',\n              'FireplaceQu','GarageFinish','GarageQual','GarageCond','PavedDrive', 'PoolQC','Fence'\n              ]]","a59a1861":"Y = test[['MSSubClass', 'LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearBuilt',\n             'YearRemodAdd', 'MasVnrArea', 'ExterQual', 'ExterCond','BsmtQual','BsmtCond', 'BsmtExposure' ,'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'CentralAir',\n             '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n             'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageYrBlt', 'GarageCars',\n             'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch',\n             'PoolArea', 'MiscVal', 'MoSold','YrSold', 'BsmtFinType1','BsmtFinType2', 'HeatingQC','KitchenQual',\n              'FireplaceQu','GarageFinish','GarageQual','GarageCond','PavedDrive', 'PoolQC','Fence']]","b4abee3b":"sale = train[['SalePrice']]","93b09f7c":"\na = {'CentralAir' : {\"Y\": 1 , \"N\":0}}\nX.replace(a , inplace= True)\nY.replace(a , inplace= True)\n\nb = {'HeatingQC' : {\"Po\":1, \"Fa\":2, \"TA\":3, \"Gd\":4, \"Ex\":5}}\nX.replace(b , inplace= True)\nY.replace(b , inplace= True)\n\nc = {'ExterQual' : {\"Po\":1, \"Fa\":2, \"TA\":3, \"Gd\":4, \"Ex\":5}}\nX.replace(c , inplace= True)\nY.replace(c , inplace= True)\n\nd = {'ExterCond' : {\"Po\":1, \"Fa\":2, \"TA\":3, \"Gd\":4, \"Ex\":5}}\nX.replace(d , inplace= True)\nY.replace(d , inplace= True)\n\n\ne = {'BsmtQual' : {\"NA\":0,\"Po\":1, \"Fa\":2, \"TA\":3, \"Gd\":4, \"Ex\":5}}\nX.replace(e , inplace= True)\nY.replace(e , inplace= True)\n\nf = {'BsmtCond' : {\"NA\":0,\"Po\":1, \"Fa\":2, \"TA\":3, \"Gd\":4, \"Ex\":5}}\nX.replace(f , inplace= True)\nY.replace(f , inplace= True)\n\ng = {'BsmtExposure' : {\"NA\":0,\"No\":1, \"Mn\":2, \"Av\":3, \"Gd\":4}}\nX.replace(g , inplace= True)\nY.replace(g , inplace= True)\n\nh = {'BsmtFinType1' : {\"NA\":0,\"Unf\":1, \"LwQ\":2, \"Rec\":3, \"BLQ\":4, \"ALQ\":5, \"GLQ\":6}}\nX.replace(h , inplace= True)\nY.replace(h , inplace= True)\n\ni = {'BsmtFinType2' : {\"NA\":0,\"Unf\":1, \"LwQ\":2, \"Rec\":3, \"BLQ\":4, \"ALQ\":5, \"GLQ\":6}}\nX.replace(i , inplace= True)\nY.replace(i , inplace= True)\n\nj = {'HeatingQC' : {\"Po\":1, \"Fa\":2, \"TA\":3, \"Gd\":4, \"Ex\":5}}\nX.replace(j , inplace= True)\nY.replace(j , inplace= True)\n\nk = {'KitchenQual' : {\"Po\":1, \"Fa\":2, \"TA\":3, \"Gd\":4, \"Ex\":5}}\nX.replace(k , inplace= True)\nY.replace(k , inplace= True)\n\nl = {'FireplaceQu' : {\"NA\":0,\"Po\":1, \"Fa\":2, \"TA\":3, \"Gd\":4, \"Ex\":5}}\nX.replace(l , inplace= True)\nY.replace(l , inplace= True)\n\nm = {'GarageFinish' : {\"NA\":0,\"Unf\":1, \"RFn\":2, \"Fin\":3}}\nX.replace(m , inplace= True)\nY.replace(m , inplace= True)\n\nn = {'GarageQual' : {\"NA\":0,\"Po\":1, \"Fa\":2, \"TA\":3, \"Gd\":4, \"Ex\":5}}\nX.replace(n , inplace= True)\nY.replace(n , inplace= True)\n\no = {'GarageCond' : {\"NA\":0,\"Po\":1, \"Fa\":2, \"TA\":3, \"Gd\":4, \"Ex\":5}}\nX.replace(o , inplace= True)\nY.replace(o , inplace= True)\np = {'PavedDrive' : {\"N\":0,\"P\":1, \"Y\":2}}\nX.replace(p , inplace= True)\nY.replace(p , inplace= True)\n\nq = {'PoolQC' : {\"NA\":0, \"Fa\":1, \"TA\":2, \"Gd\":3, \"Ex\":4}}\nX.replace(q , inplace= True)\nY.replace(q , inplace= True)\n\nr = {'Fence' : {\"NA\":0, \"MnWw\":1, \"GdWo\":2, \"MnPrv\":3, \"GdPrv\":4}}\nX.replace(r , inplace= True)\nY.replace(r , inplace= True)","81da3ed4":"X","166c2dff":"X.shape","f61437aa":"Y.shape","477ffa4e":"from sklearn.impute import SimpleImputer # Imputation transformer for completing missing values.\nimport numpy as np","3963ec77":"ImputedModule = SimpleImputer(missing_values = np.nan, strategy = 'mean')\nImputedX = ImputedModule.fit(X)\nX = ImputedX.transform(X)\n\nImputedY = ImputedModule.fit(Y)\nY = ImputedX.transform(Y)","0f5271df":"X.shape\nY.shape","3b05476d":"mean = X.mean(axis=0)\nX -= mean\nstd = X.std(axis=0)\nX \/= std\n\nY -= mean\nY \/= std\n","c4cc285e":"from keras import models\nfrom keras import layers\n\ndef build_model():\n    model = models.Sequential()\n    model.add(layers.Dense(128, activation='relu', input_shape=(X.shape[1],)))\n    model.add(layers.Dense(64, activation='relu'))\n    model.add(layers.Dense(64, activation='relu'))\n    model.add(layers.Dense(1))\n\n    model.compile(optimizer='rmsprop',\n              loss='mse',\n              metrics=['mae'])\n    return model","6c1222d8":"from sklearn.linear_model import LinearRegression \nregressor = LinearRegression() \nregressor.fit( X, sale) ","dcd9ab22":"y_pred = regressor.predict(Y)\nprint(y_pred.shape)","1dfe5a33":"plt.scatter(train[\"Id\"], sale, color = 'red') \nplt.plot(train[\"Id\"], regressor.predict(X), color = 'blue')  \nplt.title('ID vs Sale Price Training set') \nplt.xlabel('ID') \nplt.ylabel('Sale Price') \nplt.show()","ce111e07":"plt.scatter(test[\"Id\"], sample[\"SalePrice\"], color = 'red') \nplt.plot(test[\"Id\"], regressor.predict(Y), color = 'blue')  \nplt.title('ID vs Sale Price Testing set') \nplt.xlabel('ID') \nplt.ylabel('Sale Price') \nplt.show()\n","848b16e2":"from sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\n\ndef performance(ytrue, ypredicted):\n    print(\"Mean Squared Error: \",np.sqrt(mean_squared_error(ytrue, ypredicted))) \n    print(\"Mean Absolute Error: \", np.sqrt(mean_absolute_error(ytrue, ypredicted))) \n    \nperformance(sample[\"SalePrice\"], y_pred)","93742e8b":"from sklearn.linear_model import SGDRegressor\n\n# SkLearn SGD classifier\nclf_ = SGDRegressor()\nclf_.fit(X, sale)\nplt.scatter(sample[\"SalePrice\"],clf_.predict(Y))\nplt.grid()\nplt.xlabel('Actual y')\nplt.ylabel('Predicted y')\nplt.title('scatter plot between actual y and predicted y')\nplt.show()\nperformance(sample[\"SalePrice\"], clf_.predict(Y))","b251643c":"lasso = Lasso(max_iter = 100000, normalize = True)\n\nlassocv = LassoCV(alphas = None, cv = 10, max_iter = 100000, normalize = True)\nlassocv.fit(X, sale)\n\nlasso.set_params(alpha=lassocv.alpha_)\nlasso.fit(X, sale)\n\nprint('The Lasso I:')\nprint(\"Alpha =\", lassocv.alpha_)\nperformance(sample[\"SalePrice\"], lasso.predict(Y))","d869d675":"alphas = np.geomspace(1e-9, 5, num=100)\n\nridgecv = RidgeCV(alphas = alphas, scoring = 'neg_mean_squared_error', normalize = True)\nridgecv.fit(X, sale)\n\nridge = Ridge(alpha = ridgecv.alpha_, normalize = True)\nridge.fit(X, sale)\n\nprint('Ridge Regression:')\nprint(\"Alpha =\", ridgecv.alpha_)\nperformance(sample[\"SalePrice\"], ridge.predict(Y))","ddcffbfc":"from sklearn.linear_model import ElasticNet\n\nmodel_1 = ElasticNet(alpha=0.1, l1_ratio=0.9, selection='random', random_state=42)\nmodel_1.fit( X, sale)\n\ntest_pred = model_1.predict(Y)\n\nperformance(sample[\"SalePrice\"], model_1.predict(Y))","51cf46de":"from sklearn.svm import SVR\n\nsvm_reg = SVR(kernel='rbf', C=1000000, epsilon=0.001)\nsvm_reg.fit( X, sale)\n\ntest_pred = svm_reg.predict(Y)\n\nperformance(sample[\"SalePrice\"], svm_reg.predict(Y))","f02c275a":"the best model depend on mean absolute error is svm\n","2b190466":"# - LinearRegression","afbf5ada":"# Ridge","dda4b57c":"# ElasticNet\n","cdf4a634":"# SVM","8194ff4a":"# Lasso","c0c3e63f":"# SGDRegressor"}}