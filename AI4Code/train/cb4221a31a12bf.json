{"cell_type":{"06bd2236":"code","583da3ab":"code","099bd8d4":"code","d3ee23ad":"code","5a20d778":"code","edd8f2f4":"code","6e14a647":"code","630a7215":"code","1ea28916":"markdown","b8b00c07":"markdown","2fb531bc":"markdown","4d132970":"markdown","b7c42386":"markdown","43725735":"markdown","162b67d8":"markdown","acbfceb2":"markdown","3e5c0f25":"markdown","8b7b7d3a":"markdown","57e54c77":"markdown","0da4fb16":"markdown"},"source":{"06bd2236":"# pip install surprise\n#Unless you have it\nimport pandas as pd\nfrom surprise import Reader, SVD, Dataset, accuracy\nfrom surprise.model_selection import GridSearchCV, train_test_split, cross_validate\npd.set_option('display.max_columns', None)","583da3ab":"movie = pd.read_csv(\"..\/input\/movielens-20m-dataset\/movie.csv\")\nrating = pd.read_csv('..\/input\/movielens-20m-dataset\/rating.csv')\ndf = movie.merge(rating, how=\"left\", on=\"movieId\")\ndf.head()","099bd8d4":"movie_ids = [130219, 356, 4422, 541]\nmovies = [\"The Dark Knight (2011)\",\n          \"Cries and Whispers (Viskningar och rop) (1972)\",\n          \"Forrest Gump (1994)\",\n          \"Blade Runner (1982)\"]\n\nsample_df = df[df.movieId.isin(movie_ids)]\nsample_df.shape","d3ee23ad":"user_movie_df = sample_df.pivot_table(index=[\"userId\"], columns=[\"title\"], values=\"rating\")\nuser_movie_df.head()\n\nreader = Reader(rating_scale=(1, 5))\ndata = Dataset.load_from_df(sample_df[['userId', 'movieId', 'rating']], reader)","5a20d778":"trainset, testset = train_test_split(data, test_size=.25)\n\nsvd_model = SVD()\nsvd_model.fit(trainset)\n\npredictions = svd_model.test(testset)\n#This validation for check our accuracy.\ncross_validate(svd_model, data, measures=['RMSE', 'MAE'], cv=5, verbose=True)","edd8f2f4":"# Blade Runner\nsvd_model.predict(uid=1.0, iid=541, verbose=True)","6e14a647":"##############################\n# Ad\u0131m 3: Model Tuning\n##############################\n\nparam_grid = {'n_epochs': [5, 10], 'lr_all': [0.002, 0.005]}\n\ngs = GridSearchCV(SVD, param_grid, measures=['rmse', 'mae'], cv=3, n_jobs=-1, joblib_verbose=True)\n\ngs.fit(data)\n\ngs.best_score['rmse']\n\ngs.best_params['rmse']","630a7215":"#Prediction\n\nsvd_model = SVD(**gs.best_params['rmse'])\n\ndata = data.build_full_trainset()\nsvd_model.fit(data)\n\n# userid 1 - blade runner prediction\nsvd_model.predict(uid=1.0, iid=541, verbose=True)","1ea28916":"*Now we will read our csv, we have 2 different dataset and we can merge with movie ID column*","b8b00c07":"*New DataFrame ready to use\u00a0! Let's choose the top movies inside of the dataset and see which movies will be recommended\u00a0:)*","2fb531bc":"*We found our best parameters and hide them in the best_params. With better accuracy, you can check the last prediction and in my suggestion, add more epochs and lr(learning rate) to param_grid.*","4d132970":"And you can reach the dataset via:\nhttps:\/\/www.kaggle.com\/hiraahmed\/movielense20m","b7c42386":"*Actually, after we make a prediction, our project is ready but we need to tune model for increase our accuracy. That is why, let's predict now and see the difference after the tuning.*","43725735":"*Pivot table is essential for recommendations. Created a pivot table with columns and indices.\nThe Reader class is used to parse a file containing ratings.\nSuch a file is assumed to specify only one rating per line, and each line needs to respect the following structure*","162b67d8":"*Classic Machine Learning step\u00a0:) Divide to train and test with size of 25% to 75%. You can use 30 to 70,it is up to you. SVD is our model for recommend a movie for different users with their ID*","acbfceb2":"*For better results, we should optimize the parameters in the best way. If you want to try more parameters. Go for it\u00a0!*","3e5c0f25":"Model based recommender's synonim is Matrix Factorization. Still there is lots of conflicts about this subject but today we won't concern about this\u00a0:)\nWe need our libraries for sure, so let's dive in","8b7b7d3a":"**In my opinion, Reccomendations so clear\u00a0:) If you can not decide which movie do you want, check this recommender and also make Data Science practice. I hope my expressions made sense for you. Thank you for your time. See you at new project\u00a0!**","57e54c77":"**When we are listening to music , watching movie and video or even ordering a product from some e commerce company. We all see that they offer us 'Those who bought it also got these, check this out, too'. That is why, I would like to show how can we recommend best product to our customers for increase customers satisfaction also increasing our profit ? This article will help us.  Firstly, if you want to learn more about CLTV, you can check my last story. It will be more helpful to understand what we will be doing.  Hybrid recommender was my last project however I would like to show model based recommender with machine learning. I hope you will have a great time.**","0da4fb16":"[https:\/\/medium.com\/@cakirtaha97\/science-of-customer-cltv-d87c7182e406](http:\/\/)"}}