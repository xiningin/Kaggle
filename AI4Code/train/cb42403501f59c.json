{"cell_type":{"3012cf40":"code","21562d55":"code","e31dcdc7":"code","469334c8":"code","eaff29c0":"code","93d6f1ff":"code","1b3de758":"code","63160c76":"code","4dcc2a29":"code","32bc65c8":"code","f9f2d35b":"code","a6ecdb6c":"code","2d01eba0":"code","5aa8a6ab":"code","2c44b92e":"code","f7b3eab9":"code","9e4d8a98":"code","06907b33":"code","94abace7":"code","9dbc88dc":"code","8beae674":"code","d0580823":"code","2d2a9000":"code","17a24064":"code","32d1899f":"code","13a2ade7":"code","6a6cfb06":"code","8314afe5":"code","2365f96d":"code","15a0e4f9":"code","17ce16fd":"code","77fb400a":"code","6a1e4fe7":"code","4d88fa50":"code","fa419299":"code","c501cf5e":"code","db4ed17b":"code","4e96fddc":"code","8980ed6c":"code","549cf319":"code","4e028e2b":"code","3e9e7fa2":"code","9deb607e":"code","82506f10":"code","6fe820e9":"code","de3c79b4":"code","32b44ad5":"code","58fcbdd5":"code","c6ff7001":"code","eb1581ce":"code","1c8d540d":"code","0cf9739c":"code","2ff409fa":"code","afb92d5d":"code","00510551":"code","4983fe05":"code","11aabd1d":"code","d1f51556":"code","fb34c30d":"code","2287adc5":"code","77397bf1":"code","0ba63b93":"code","e275d98b":"markdown","e91a756f":"markdown","da3a4c29":"markdown","699e7f0e":"markdown","7fcc11a3":"markdown","d41c0957":"markdown","7a91736b":"markdown","4a8131c9":"markdown","d23e3cf8":"markdown","1e4f5a17":"markdown","a774e3fb":"markdown","ac4d3d73":"markdown"},"source":{"3012cf40":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.metrics import confusion_matrix, classification_report, plot_confusion_matrix, accuracy_score\nfrom sklearn.preprocessing import StandardScaler\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","21562d55":"df = pd.read_csv('\/kaggle\/input\/maternal-health-risk-data\/Maternal Health Risk Data Set.csv')","e31dcdc7":"df.head()","469334c8":"df.info()","eaff29c0":"df.shape","93d6f1ff":"df.count()","1b3de758":"df.describe().transpose()","63160c76":"columns = df.columns[:len(df.columns) - 1]\nfor column in columns:\n    plt.figure(figsize=(10,8), dpi=200)\n    sns.displot(data=df, x=str(column), kde=True, hue=\"RiskLevel\", bins=30).set(title=\"{} Distribution of Patients\".format(str(column)))\n    plt.show()\n","4dcc2a29":"plt.figure(figsize=(6,6), dpi=200)\nsns.countplot(data=df, x=\"RiskLevel\").set(title=\"Number Of Patients In Each Risk Category\")","32bc65c8":"fig = plt.figure(figsize=(6,4), dpi=200)\nsns.violinplot(x=\"RiskLevel\", y=\"Age\", data=df).set(title=\"Analysis In Age on Risk Level\", xlabel=\"Risk Level\")\nplt.show()","f9f2d35b":"plt.figure(figsize=(6,6), dpi=150)\nlabels = ['Low risk', 'Mid risk', 'High risk']\nlow_risk = df[df['RiskLevel'] == 'low risk']\nmid_risk = df[df['RiskLevel'] == 'mid risk']\nhigh_risk = df[df['RiskLevel'] == 'high risk']\ndata = [len(low_risk), len(mid_risk), len(high_risk)]\ncolors = sns.color_palette('pastel')[0:5]\nfig = plt.pie(x=data, labels=labels, colors=colors, autopct='%.0f%%')\nplt.title('Analysis On Risk')\nplt.show()","a6ecdb6c":"plt.figure(figsize=(10, 8), dpi=200)\nsns.catplot(x=\"RiskLevel\", y=\"SystolicBP\", data=df, kind=\"box\").set(title=\"Distribution based on SystolicBP\")\nplt.show()","2d01eba0":"plt.figure(figsize=(10, 8), dpi=200)\nsns.catplot(x=\"RiskLevel\", y=\"DiastolicBP\", data=df, kind=\"box\").set(title=\"Distribution based on DiastolicBP\")\nplt.show()","5aa8a6ab":"plt.figure(figsize=(10,6), dpi=150)\nsns.heatmap(df.corr(), cmap='viridis', annot=True)\nplt.show()","2c44b92e":"plt.figure(dpi=200)\nsns.pairplot(df, hue='RiskLevel')\nplt.show()","f7b3eab9":"from sklearn.metrics import roc_curve, auc","9e4d8a98":"def plot_multiclass_roc(clf, X_test, y_test, n_classes, figsize=(5,5)):\n    y_score = clf.decision_function(X_test)\n\n    # structures\n    fpr = dict()\n    tpr = dict()\n    roc_auc = dict()\n\n    # calculate dummies once\n    y_test_dummies = pd.get_dummies(y_test, drop_first=False).values\n    for i in range(n_classes):\n        fpr[i], tpr[i], _ = roc_curve(y_test_dummies[:, i], y_score[:, i])\n        roc_auc[i] = auc(fpr[i], tpr[i])\n\n    # roc for each class\n    fig, ax = plt.subplots(figsize=figsize)\n    ax.plot([0, 1], [0, 1], 'k--')\n    ax.set_xlim([0.0, 1.0])\n    ax.set_ylim([0.0, 1.05])\n    ax.set_xlabel('False Positive Rate')\n    ax.set_ylabel('True Positive Rate')\n    ax.set_title('Receiver operating characteristic example')\n    for i in range(n_classes):\n        ax.plot(fpr[i], tpr[i], label='ROC curve (area = %0.2f) for label %i' % (roc_auc[i], i))\n    ax.legend(loc=\"best\")\n    ax.grid(alpha=.4)\n    sns.despine()\n    plt.show()","06907b33":"df.head()","94abace7":"from sklearn.model_selection import train_test_split","9dbc88dc":"X = df.drop(\"RiskLevel\", axis=1)\ny = df['RiskLevel']\naccuracy_list = []","8beae674":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)","d0580823":"from sklearn.ensemble import RandomForestClassifier","2d2a9000":"rfm = RandomForestClassifier()","17a24064":"rfm.fit(X_train, y_train)","32d1899f":"rfm_pred = rfm.predict(X_test)","13a2ade7":"plot_confusion_matrix(rfm, X_test, y_test)","6a6cfb06":"print(classification_report(y_test, rfm_pred))","8314afe5":"rfm_acc = accuracy_score(y_test, rfm_pred)\naccuracy_list.append(rfm_acc * 100)","2365f96d":"from sklearn.neighbors import KNeighborsClassifier","15a0e4f9":"scaler = StandardScaler()","17ce16fd":"scaled_X_train = scaler.fit_transform(X_train)\nscaled_X_test = scaler.transform(X_test)","77fb400a":"knn = KNeighborsClassifier(n_neighbors=1)","6a1e4fe7":"knn.fit(scaled_X_train, y_train)","4d88fa50":"knn_pred = knn.predict(scaled_X_test)","fa419299":"print(classification_report(y_test, knn_pred))","c501cf5e":"plot_confusion_matrix(knn, scaled_X_test, y_test)","db4ed17b":"knn_acc = accuracy_score(y_test, knn_pred)","4e96fddc":"accuracy_list.append(knn_acc * 100)","8980ed6c":"scaler = StandardScaler()","549cf319":"scaled_X_train = scaler.fit_transform(X_train)\nscaled_X_test = scaler.transform(X_test)","4e028e2b":"from sklearn.linear_model import LogisticRegressionCV","3e9e7fa2":"lg = LogisticRegressionCV()","9deb607e":"lg.fit(scaled_X_train, y_train)","82506f10":"lg_pred = lg.predict(scaled_X_test)","6fe820e9":"plot_confusion_matrix(lg, scaled_X_test, y_test)","de3c79b4":"print(classification_report(y_test, lg_pred))","32b44ad5":"plot_multiclass_roc(lg, scaled_X_test, y_test, n_classes = 3, figsize=(12,8))","58fcbdd5":"lg_acc = accuracy_score(y_test, lg_pred)\naccuracy_list.append(lg_acc * 100)","c6ff7001":"scaled_X_train = scaler.fit_transform(X_train)\nscaled_X_test = scaler.transform(X_test)","eb1581ce":"from sklearn.svm import SVC","1c8d540d":"svc = SVC(decision_function_shape='ovo', class_weight='balanced')","0cf9739c":"from sklearn.model_selection import GridSearchCV","2ff409fa":"param_grid = {'C': [0.001, 0.01, 0.1, 0.5, 1], 'gamma': ['scale', 'auto']}\ngrid = GridSearchCV(svc, param_grid)","afb92d5d":"grid.fit(scaled_X_train, y_train)","00510551":"grid.best_params_","4983fe05":"svc_pred = grid.predict(scaled_X_test)","11aabd1d":"print(classification_report(y_test, svc_pred))","d1f51556":"plot_multiclass_roc(grid, scaled_X_test, y_test, n_classes = 3, figsize=(12,8))","fb34c30d":"plot_confusion_matrix(grid, scaled_X_test, y_test)\nplt.show()","2287adc5":"svc_acc = accuracy_score(y_test, svc_pred)\naccuracy_list.append(svc_acc * 100)","77397bf1":"model_list = [\"Random Forest\", \"KNearestNeighbors\", \"LogisticRegression\",\"SVC\"]","0ba63b93":"sns.set_style(\"whitegrid\")\nsns.color_palette(\"Paired\")\nplt.figure(figsize=(8,5), dpi=150)\nax = sns.barplot(x=model_list, y=accuracy_list)\nplt.title(\"Accuracy of Models\")\nplt.xlabel('Classification Models')\nplt.ylabel(\"Accuracy of Classification Model\")\nfor i in ax.patches:\n    width, height = i.get_width(), i.get_height()\n    x, y = i.get_xy() \n    ax.annotate(f'{round(height,2)}%', (x + width\/2, y + height*1.02), ha='center')\nplt.show()","e275d98b":"Pairplot","e91a756f":"ROC Curve Plotting Function","da3a4c29":"<h1>Support Vector Machine Classification<\/h1>","699e7f0e":"Scale data","7fcc11a3":"# Data Modelling","d41c0957":"<h1>Random Forest Classification<h1>","7a91736b":"<h1>Logistic Regression Multiclass Classification<\/h1>","4a8131c9":"Heatmap","d23e3cf8":"<h1>Exploratory Data Analysis<\/h1>","1e4f5a17":"<h1>K Nearest Neighbor Classifier<\/h1>","a774e3fb":"Scale Data","ac4d3d73":"<h2>Train test split<\/h2>"}}