{"cell_type":{"1b0df526":"code","96b0d4ef":"code","8a591531":"code","23f76f16":"code","7de5c8b0":"code","c7f80e79":"code","51e74a8b":"code","d0fc8e8d":"code","7bb15ead":"code","c23beeb1":"code","a0bd0d31":"code","23cf6717":"code","4d0cf51c":"code","40f8a051":"code","15928dce":"code","3236b311":"code","a115de89":"code","c9bd4b11":"code","5ea9ae73":"code","e86ea466":"code","bf73dea3":"code","ca57d9fe":"code","0838a0f8":"code","472ea422":"code","1eccfe5f":"code","06fc5be9":"code","0efe9f28":"code","214dde51":"code","9281177d":"code","77df285e":"code","48531383":"code","a0380aba":"code","18c638b4":"code","c4d948f3":"code","47da49e2":"code","159455d9":"code","3e615a43":"code","e1c32278":"code","4cd8134f":"code","5c326662":"code","4c3a88ed":"code","71c3bd52":"code","cf7f9733":"code","2ed47257":"code","419de7e4":"code","6398ad1c":"code","f2c7ae71":"code","61d9a24c":"code","e923f58c":"code","fc0263f5":"code","db9fe34f":"code","335ecb5e":"code","39b8806c":"code","7df16215":"code","4c02fb33":"code","112ebbea":"code","5dd9be22":"code","09935cee":"code","77f98262":"code","c0878f59":"code","54c6f4cf":"code","030d6523":"code","44e7b064":"code","7f5b257d":"code","565ebbd7":"code","c2b272d0":"code","f0ee8d0d":"code","8f3ba91e":"code","76b059f9":"code","dbf97aca":"code","d3b8fd0f":"code","f9a248fb":"code","a36a4d8a":"code","e815b0a3":"code","b9553e2b":"code","2c13e7f9":"code","8127a8ce":"code","3515e3e1":"code","1086d764":"code","8b839f7d":"code","bac359be":"code","1ce77bb6":"markdown","894680a3":"markdown","e66bc2c5":"markdown","5debd880":"markdown","a086a395":"markdown","ff19aa36":"markdown","54358055":"markdown","346daea4":"markdown","157cea53":"markdown","d68969b3":"markdown","7fd2f8cb":"markdown","28a5635b":"markdown","90dbc759":"markdown","50994527":"markdown","6211925e":"markdown","66c324ba":"markdown","e4c5297c":"markdown","1c5dee46":"markdown","ef496c82":"markdown","77ce7cef":"markdown","97e2d33a":"markdown","b1359522":"markdown","f7d41080":"markdown","33228701":"markdown","865ef230":"markdown","c16d7fbb":"markdown","daddce95":"markdown"},"source":{"1b0df526":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","96b0d4ef":"# ri stands for Rhode Island\nri = pd.read_csv('..\/input\/my-new-dataset\/police.csv')","8a591531":"# what does each row represent?\nri.head()","23f76f16":"# what do these numbers mean?\nri.shape","7de5c8b0":"# what do these types mean?\nri.dtypes","c7f80e79":"# what are these counts? how does this work?\nri.isnull().sum()","51e74a8b":"# axis=1 also works, inplace is False by default, inplace=True avoids assignment statement\nri.drop('county_name', axis='columns', inplace=True)","d0fc8e8d":"ri.shape","7bb15ead":"ri.columns","c23beeb1":"# Alternative method\n#  ri.dropna(axis='columns', how='all')","a0bd0d31":"# when someone is stopped for speeding, how often is it a man or woman?\nri[ri.violation == 'Speeding'].driver_gender.value_counts(normalize=True)","23cf6717":"# Alternative method\nri.loc[ri.violation == 'Speeding', 'driver_gender'].value_counts(normalize=True)","4d0cf51c":"# when a man is pulled over, how often is it for speeding?\nri[ri.driver_gender == 'M'].violation.value_counts(normalize=True)","40f8a051":"# repeat for women\nri[ri.driver_gender == 'F'].violation.value_counts(normalize=True)","15928dce":"# combines the two lines above\nri.groupby('driver_gender').violation.value_counts(normalize=True)","3236b311":"# ignore gender for the moment\nri.search_conducted.value_counts(normalize=True)","a115de89":"# how does this work?\nri.search_conducted.mean()","c9bd4b11":"# search rate by gender\nri.groupby('driver_gender').search_conducted.mean()","5ea9ae73":"# include a second factor\nri.groupby(['violation', 'driver_gender']).search_conducted.mean()","e86ea466":"ri.isnull().sum()","bf73dea3":"# maybe search_type is missing any time search_conducted is False?\nri.search_conducted.value_counts()","ca57d9fe":"# test that theory, why is the Series empty?\nri[ri.search_conducted == False].search_type.value_counts()","0838a0f8":"# value_counts ignores missing values by default\nri[ri.search_conducted == False].search_type.value_counts(dropna=False)","472ea422":"# when search_conducted is True, search_type is never missing\nri[ri.search_conducted == True].search_type.value_counts(dropna=False)","1eccfe5f":"# alternative method\nri[ri.search_conducted == True].search_type.isnull().sum()","06fc5be9":"# multiple types are separated by commas\nri.search_type.value_counts(dropna=False)","0efe9f28":"# use bracket notation when creating a column\nri['frisk'] = ri.search_type == 'Protective Frisk'","214dde51":"ri.frisk.dtype","9281177d":"# includes exact matches only\nri.frisk.sum()","77df285e":"# is this the answer?\nri.frisk.mean()","48531383":"# uses the wrong denominator (includes stops that didn't involve a search)\nri.frisk.value_counts()","a0380aba":"# includes partial matches\nri['frisk'] = ri.search_type.str.contains('Protective Frisk')","18c638b4":"# seems about right\nri.frisk.sum()","c4d948f3":"# frisk rate during a search\nri.frisk.mean()","47da49e2":"# str.contains preserved missing values from search_type\nri.frisk.value_counts(dropna=False)","159455d9":"# this works, but there's a better way\nri.stop_date.str.slice(0, 4).value_counts()","3e615a43":"# make sure you create this column\ncombined = ri.stop_date.str.cat(ri.stop_time, sep=' ')\nri['stop_datetime'] = pd.to_datetime(combined)","e1c32278":"ri.dtypes","4cd8134f":"# why is 2005 so much smaller?\nri.stop_datetime.dt.year.value_counts()","5c326662":"ri.drugs_related_stop.dtype","4c3a88ed":"# baseline rate\nri.drugs_related_stop.mean()","71c3bd52":"# can't groupby 'hour' unless you create it as a column\nri.groupby(ri.stop_datetime.dt.hour).drugs_related_stop.mean()","cf7f9733":"# line plot by default (for a Series)\nri.groupby(ri.stop_datetime.dt.hour).drugs_related_stop.mean().plot()","2ed47257":"# alternative: count drug-related stops by hour\nri.groupby(ri.stop_datetime.dt.hour).drugs_related_stop.sum().plot()","419de7e4":"ri.stop_datetime.dt.hour.value_counts()","6398ad1c":"ri.stop_datetime.dt.hour.value_counts().plot()","f2c7ae71":"ri.stop_datetime.dt.hour.value_counts().sort_index().plot()","61d9a24c":"# alternative method\nri.groupby(ri.stop_datetime.dt.hour).stop_date.count().plot()","e923f58c":"# mark bad data as missing\nri.stop_duration.value_counts()","fc0263f5":"# what two things are still wrong with this code?\nri[(ri.stop_duration == '1') | (ri.stop_duration == '2')].stop_duration = 'NaN'","db9fe34f":"# assignment statement did not work\nri.stop_duration.value_counts()","335ecb5e":"# solves Setting With Copy Warning\nri.loc[(ri.stop_duration == '1') | (ri.stop_duration == '2'), 'stop_duration'] = 'NaN'","39b8806c":"# confusing!\nri.stop_duration.value_counts(dropna=False)","7df16215":"# replace 'NaN' string with actual NaN value\nimport numpy as np\nri.loc[ri.stop_duration == 'NaN', 'stop_duration'] = np.nan","4c02fb33":"ri.stop_duration.value_counts(dropna=False)","112ebbea":"# alternative method\n#ri.stop_duration.replace(['1', '2'], value=np.nan, inplace=True)","5dd9be22":"# make sure you create this column\nmapping = {'0-15 Min':8, '16-30 Min':23, '30+ Min':45}\nri['stop_minutes'] = ri.stop_duration.map(mapping)","09935cee":"# matches value_counts for stop_duration\nri.stop_minutes.value_counts()","77f98262":"ri.groupby('violation_raw').stop_minutes.mean()","c0878f59":"ri.groupby('violation_raw').stop_minutes.agg(['mean', 'count'])","54c6f4cf":"# what's wrong with this?\nri.groupby('violation_raw').stop_minutes.mean().plot()","030d6523":"# how could this be made better?\nri.groupby('violation_raw').stop_minutes.mean().plot(kind='bar')","44e7b064":"ri.groupby('violation_raw').stop_minutes.mean().sort_values().plot(kind='barh')","7f5b257d":"# good first step\nri.groupby('violation').driver_age.describe()","565ebbd7":"# histograms are excellent for displaying distributions\nri.driver_age.plot(kind='hist')","c2b272d0":"# similar to a histogram\nri.driver_age.value_counts().sort_index().plot()","f0ee8d0d":"# can't use the plot method\nri.hist('driver_age', by='violation')","8f3ba91e":"# what changed? how is this better or worse?\nri.hist('driver_age', by='violation', sharex=True)","76b059f9":"# what changed? how is this better or worse?\nri.hist('driver_age', by='violation', sharex=True, sharey=True)","dbf97aca":"ri.head()","d3b8fd0f":"# appears to be year of stop_date minus driver_age_raw\nri.tail()","f9a248fb":"ri['new_age'] = ri.stop_datetime.dt.year - ri.driver_age_raw","a36a4d8a":"# compare the distributions\nri[['driver_age', 'new_age']].hist()","e815b0a3":"# compare the summary statistics (focus on min and max)\nri[['driver_age', 'new_age']].describe()","b9553e2b":"# calculate how many ages are outside that range\nri[(ri.new_age < 15) | (ri.new_age > 99)].shape","2c13e7f9":"# raw data given to the researchers\nri.driver_age_raw.isnull().sum()","8127a8ce":"# age computed by the researchers (has more missing values)\nri.driver_age.isnull().sum()","3515e3e1":"# what does this tell us? researchers set driver_age as missing if less than 15 or more than 99\n5621-5327","1086d764":"# driver_age_raw NOT MISSING, driver_age MISSING\nri[(ri.driver_age_raw.notnull()) & (ri.driver_age.isnull())].head()","8b839f7d":"# set the ages outside that range as missing\nri.loc[(ri.new_age < 15) | (ri.new_age > 99), 'new_age'] = np.nan","bac359be":"ri.new_age.equals(ri.driver_age)","1ce77bb6":"## ||1. Remove the column that only contains missing values||","894680a3":"# 5. During a search, how often is the driver frisked?","e66bc2c5":"# Does this prove causation?\n\n# Lessons:\n\n* Causation is difficult to conclude, so focus on relationships\n* Include all relevant factors when studying a relationship","5debd880":"# Lessons:\n\n* Don't use a line plot to compare categories\n* Be conscious of sorting and orientation when plotting","a086a395":"# Lessons:\n\n* Ambiguous data should be marked as missing\n* Don't ignore the SettingWithCopyWarning\n* NaN is not a string","ff19aa36":"# 13. Pretend you don't have the driver_age column, and create it from driver_age_raw (and call it new_age)","54358055":"# Lessons:\n\n* Use plots to help you understand trends\n* Create exploratory plots using pandas one-liners","346daea4":"## 3. Does gender affect who gets searched during a stop?","157cea53":"# 4. Why is search_type missing so often?","d68969b3":"# 12. Compare the age distributions for each violation\n","7fd2f8cb":" # 11. Plot the results of the first groupby from the previous exercise","28a5635b":"# What are some relevant facts that we don't know?\n\n# Lessons:\n \n* There is more than one way to understand a question","90dbc759":"# 6. Which year had the least number of stops?","50994527":"# Lessons:\n\n* Verify your assumptions about your data\n* pandas functions ignore missing values by default","6211925e":"# Lessons:\n\n* Be conscious of sorting when plotting","66c324ba":"# Lessons:\n\n* Pay attention to default arguments\n* Check your work\n* There is more than one way to do everything in pandas","e4c5297c":"# Lessons:\n\n* Use histograms to show distributions\n* Be conscious of axes when using grouped plots","1c5dee46":"# Dataset: Stanford Open Policing Project ","ef496c82":"# 10. What is the mean stop_duration for each violation_raw?","77ce7cef":"# Lessons:\n\n* Convert strings to numbers for analysis\n* Approximate when necessary\n* Use count with mean to looking for meaningless means","97e2d33a":"# 9. Find the bad data in the stop_duration column and fix it","b1359522":"# Lessons:\n\n* Don't assume that the head and tail are representative of the data\n* Columns with missing values may still have bad data (driver_age_raw)\n* Data cleaning sometimes involves guessing (driver_age)\n* Use histograms for a sanity check","f7d41080":"# Lessons:\n\n* Consider removing chunks of data that may be biased\n* Use the datetime data type for dates and times","33228701":"# 8. Do most stops occur at night?","865ef230":"# 7. How does drug activity change by time of day?","c16d7fbb":"# Lessons:\n\n* Use string methods to find partial matches\n* Use the correct denominator when calculating rates\n* pandas calculations ignore missing values\n* Apply the \"smell test\" to your results","daddce95":"# ||2. Do men or women speed more often?||"}}