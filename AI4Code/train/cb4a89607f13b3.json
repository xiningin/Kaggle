{"cell_type":{"4a68af92":"code","15c444c3":"code","50905e54":"code","b0b49e3e":"code","a3e8102f":"code","1a0242a7":"code","e395964e":"code","f06aae5f":"code","90068ede":"code","5ff74e12":"code","e8b68c84":"code","8743b819":"code","1c349e1f":"code","dc9cb29e":"code","52646cb4":"code","d0d63217":"code","172701f4":"code","ec2230c8":"code","af44ae06":"code","0e97577a":"code","b4926089":"code","b5d669ac":"code","6c1e73cb":"code","3cb7c671":"code","ff906e08":"code","3eeb2e18":"code","da01b806":"code","6f127958":"code","307d8332":"markdown","456b7828":"markdown","41af2b9c":"markdown","21dd0323":"markdown","c06829ff":"markdown","6764706c":"markdown","872ab120":"markdown","3e43e2bb":"markdown","019ef983":"markdown","3529b0b2":"markdown","430eb5c1":"markdown","7e317c20":"markdown","da743f7a":"markdown","e0b3d4a5":"markdown","358194ab":"markdown","8dc3a487":"markdown","868f160c":"markdown","850431aa":"markdown"},"source":{"4a68af92":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('darkgrid')\n\nfrom pylab import rcParams\n\nrcParams['figure.figsize'] = 20, 6\nrcParams['axes.grid'] = True","15c444c3":"df = [pd.read_json(f'..\/input\/game-of-thrones-srt\/season{i+1}.json') for i in range(7)]\ndf = pd.concat(df, axis=1)\nprint(df.shape)\ndf.head()","50905e54":"df = pd.DataFrame(df.values.reshape(-1, 1), columns=['Script']).dropna().reset_index(drop=True)\ndf.head()","b0b49e3e":"import re\ncleanr = re.compile('<.*?>|&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-f]{1,6});')\n\ndef cleanhtml(raw_html):\n  cleantext = re.sub(cleanr, '', raw_html)\n  return cleantext\n\ndf['Script'] = df['Script'].apply(cleanhtml)","a3e8102f":"text = '\\n'.join(df['Script'].values)\nvocab = sorted(set(text))\nprint('{} unique characters'.format(len(vocab)))","1a0242a7":"char2idx = {u:i for i, u in enumerate(vocab)}\nidx2char = np.array(vocab)\n\ntext_as_int = np.array([char2idx[c] for c in text])","e395964e":"import tensorflow as tf","f06aae5f":"seq_length = 100\nexamples_per_epoch = len(text)\/\/(seq_length+1)\n\nchar_dataset = tf.data.Dataset.from_tensor_slices(text_as_int)\n\nfor i in char_dataset.take(5):\n    print(idx2char[i.numpy()])","90068ede":"sequences = char_dataset.batch(seq_length+1, drop_remainder=True)\n\nfor item in sequences.take(5):\n    print(repr(''.join(idx2char[item.numpy()])))","5ff74e12":"def split_input_target(chunk):\n    input_text = chunk[:-1]\n    target_text = chunk[1:]\n    return input_text, target_text\n\ndataset = sequences.map(split_input_target)\n\nfor input_example, target_example in  dataset.take(1):\n    print('Input data: ', repr(''.join(idx2char[input_example.numpy()])))\n    print('Target data:', repr(''.join(idx2char[target_example.numpy()])))","e8b68c84":"for i, (input_idx, target_idx) in enumerate(zip(input_example[:5], target_example[:5])):\n    print(\"Step {:4d}\".format(i))\n    print(\"  input: {} ({:s})\".format(input_idx, repr(idx2char[input_idx])))\n    print(\"  expected output: {} ({:s})\".format(target_idx, repr(idx2char[target_idx])))","8743b819":"BATCH_SIZE = 64\n\n# Buffer size to shuffle the dataset\n# (TF data is designed to work with possibly infinite sequences,\n# so it doesn't attempt to shuffle the entire sequence in memory. Instead,\n# it maintains a buffer in which it shuffles elements).\nBUFFER_SIZE = 10000\n\ndataset = dataset.shuffle(BUFFER_SIZE).batch(BATCH_SIZE, drop_remainder=True)\n\ndataset","1c349e1f":"# Length of the vocabulary in chars\nvocab_size = len(vocab)\n\n# The embedding dimension\nembedding_dim = 256\n\n# Number of RNN units\nrnn_units = ['G1024']","dc9cb29e":"from keras.models import Sequential, load_model\nfrom keras.layers import Embedding, SimpleRNN, LSTM, GRU, Dense \nfrom keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\nfrom keras.utils import plot_model","52646cb4":"es = EarlyStopping(monitor='loss', mode='min', verbose=1, patience=10)\nfilepath = \"model.h5\"\nckpt = ModelCheckpoint(filepath, monitor='loss', verbose=1, save_best_only=True, mode='min', save_weights_only=True)\nrlp = ReduceLROnPlateau(monitor='loss', patience=3, verbose=1)","d0d63217":"def build_model(vocab_size, embedding_dim, rnn_units, batch_size):\n    model = Sequential()\n    model.add(Embedding(vocab_size, embedding_dim, batch_input_shape=[batch_size, None]))\n    for rnn_unit in rnn_units:\n        layer_type = rnn_unit[0]\n        num_cells = int(rnn_unit[1:])\n        if layer_type == 'G':\n            model.add(GRU(\n                num_cells, return_sequences=True, stateful=True, recurrent_initializer='glorot_uniform'\n            ))\n        elif layer_type == 'L':\n            model.add(LSTM(\n                num_cells, return_sequences=True, stateful=True, recurrent_initializer='glorot_uniform'\n            ))\n        else:\n            model.add(SimpleRNN(\n                num_cells, return_sequences=True, stateful=True, recurrent_initializer='glorot_uniform'\n            ))\n\n    model.add(Dense(vocab_size))\n    return model","172701f4":"model = build_model(\n    vocab_size=len(vocab),\n    embedding_dim=embedding_dim,\n    rnn_units=rnn_units,\n    batch_size=BATCH_SIZE\n)","ec2230c8":"model.summary()\nplot_model(model, show_shapes=True)","af44ae06":"for input_example_batch, target_example_batch in dataset.take(1):\n    example_batch_predictions = model(input_example_batch)\n    print(example_batch_predictions.shape, \"# (batch_size, sequence_length, vocab_size)\")","0e97577a":"sampled_indices = tf.random.categorical(example_batch_predictions[0], num_samples=1)\nsampled_indices = tf.squeeze(sampled_indices,axis=-1).numpy()","b4926089":"sampled_indices","b5d669ac":"print(\"Input: \\n\", repr(\"\".join(idx2char[input_example_batch[0]])))\nprint()\nprint(\"Next Char Predictions: \\n\", repr(\"\".join(idx2char[sampled_indices ])))","6c1e73cb":"def loss(labels, logits):\n    return tf.keras.losses.sparse_categorical_crossentropy(labels, logits, from_logits=True)\n\nexample_batch_loss = loss(target_example_batch, example_batch_predictions)\nprint(\"Prediction shape: \", example_batch_predictions.shape, \" # (batch_size, sequence_length, vocab_size)\")\nprint(\"scalar_loss:      \", example_batch_loss.numpy().mean())","3cb7c671":"model.compile(optimizer='adam', loss=loss)","ff906e08":"EPOCHS = 500\nhistory = model.fit(dataset, epochs=EPOCHS, callbacks=[es, ckpt, rlp])\npd.DataFrame(history.history)[['loss']].plot();","3eeb2e18":"model = build_model(vocab_size, embedding_dim, rnn_units, batch_size=1)\nmodel.load_weights(filepath)\nmodel.build(tf.TensorShape([1, None]))\nmodel.summary()","da01b806":"def generate_text(model, start_string):\n    # Evaluation step (generating text using the learned model)\n\n    # Number of characters to generate\n    num_generate = 1000\n\n    # Converting our start string to numbers (vectorizing)\n    input_eval = [char2idx[s] for s in start_string]\n    input_eval = tf.expand_dims(input_eval, 0)\n\n    # Empty string to store our results\n    text_generated = []\n\n    # Low temperature results in more predictable text.\n    # Higher temperature results in more surprising text.\n    # Experiment to find the best setting.\n    temperature = 1.0\n\n    # Here batch size == 1\n    model.reset_states()\n    for i in range(num_generate):\n        predictions = model(input_eval)\n        # remove the batch dimension\n        predictions = tf.squeeze(predictions, 0)\n\n        # using a categorical distribution to predict the character returned by the model\n        predictions = predictions \/ temperature\n        predicted_id = tf.random.categorical(predictions, num_samples=1)[-1,0].numpy()\n\n        # Pass the predicted character as the next input to the model\n        # along with the previous hidden state\n        input_eval = tf.expand_dims([predicted_id], 0)\n\n        text_generated.append(idx2char[predicted_id])\n\n    return (start_string + ''.join(text_generated))","6f127958":"print(generate_text(model, start_string=\"Seven Hells\"))","307d8332":"Configure the training procedure using the `tf.keras.Model.compile` method. Use `tf.keras.optimizers.Adam` with default arguments and the loss function.","456b7828":"# Process the text","41af2b9c":"For each sequence, duplicate and shift it to form the input and target text by using the map method to apply a simple function to each batch:","21dd0323":"The batch method lets us easily convert these individual characters to sequences of the desired size.","c06829ff":"# Build The Model\n\nWe'll use `keras.model.Sequential` to define the model. For this simple example three types of layers are used to define our model:\n\n* `keras.layers.Embedding`: The input layer. A trainable lookup table that will map the numbers of each character to a vector with embedding_dim dimensions;\n* `keras.layers.GRU`: A type of RNN with size units=rnn_units (`keras.layers.LSTM` and `keras.layers.SimpleRNN` can also be used)\n* `keras.layers.Dense`: The output layer, with vocab_size outputs","6764706c":"# Load the dataset","872ab120":"## Try the model\nNow run the model to see that it behaves as expected.\n\nFirst check the shape of the output:","3e43e2bb":"Each index of these vectors is processed as a one time step. For the input at time step 0, the model receives the index for \"E\" and tries to predict the index for \"a\" as the next character. At the next timestep, it does the same thing but the RNN considers the previous step context in addition to the current input character.","019ef983":"## Create training batches\n\nWe used tf.data to split the text into manageable sequences. But before feeding this data into the model, we need to shuffle the data and pack it into batches.","3529b0b2":"To get actual predictions from the model you need to sample from the output distribution, to get actual character indices. This distribution is defined by the logits over the character vocabulary.\n\nTry it for the first example in the batch:","430eb5c1":"# Generate text\n\nThe following code block generates the text:\n\n* Begin by choosing a start string, initializing the RNN state and setting the number of characters to generate.\n\n* Get the prediction distribution of the next character using the start string and the RNN state.\n\n* Then, use a categorical distribution to calculate the index of the predicted character. Use this predicted character as our next input to the model.\n\n* The RNN state returned by the model is fed back into the model so that it now has more context, instead of only one character. After predicting the next character, the modified RNN states are again fed back into the model, which is how it learns as it gets more context from the previously predicted characters.\n\n![](https:\/\/www.tensorflow.org\/tutorials\/text\/images\/text_generation_sampling.png)","7e317c20":"For each character the model looks up the embedding, runs the GRU one timestep with the embedding as input, and applies the dense layer to generate logits predicting the log-likelihood of the next character:\n\n![](https:\/\/www.tensorflow.org\/tutorials\/text\/images\/text_generation_training.png)\n\nPlease note that Keras sequential model is used here since all the layers in the model only have single input and produce single output. In case you want to retrieve and reuse the states from stateful RNN layer, you might want to build your model with Keras functional API or model subclassing.","da743f7a":"## The prediction task\nGiven a character, or a sequence of characters, what is the most probable next character? This is the task we're training the model to perform. The input to the model will be a sequence of characters, and we train the model to predict the output\u2014the following character at each time step.\n\nSince RNNs maintain an internal state that depends on the previously seen elements, given all the characters computed until this moment, what is the next character?\n\n## Create training examples and targets\nNext we divide the text into example sequences. Each input sequence will contain seq_length characters from the text.\n\nFor each input sequence, the corresponding targets contain the same length of text, except shifted one character to the right.\n\nSo break the text into chunks of seq_length+1. For example, say seq_length is 4 and our text is \"Hello\". The input sequence would be \"Hell\", and the target sequence \"ello\".\n\nTo do this first use the `tf.data.Dataset.from_tensor_slices` function to convert the text vector into a stream of character indices.","e0b3d4a5":"This gives us, at each timestep, a prediction of the next character index:","358194ab":"# Train the model\nAt this point the problem can be treated as a standard classification problem. Given the previous RNN state, and the input this time step, predict the class of the next character.\n\n## Attach an optimizer, and a loss function\nThe standard `tf.keras.losses.sparse_categorical_crossentropy` loss function works in this case because it is applied across the last dimension of the predictions.\n\nBecause your model returns logits, you need to set the from_logits flag.","8dc3a487":"![](https:\/\/static.posters.cz\/image\/750\/poster\/il-trono-di-spade-game-of-thrones-logo-i21034.jpg)","868f160c":"## Vectorize the text\nBefore training, we need to map strings to a numerical representation. We create two lookup tables: one mapping characters to numbers, and another for numbers to characters.","850431aa":"Reference: [Text generation with an RNN](https:\/\/www.tensorflow.org\/tutorials\/text\/text_generation)"}}