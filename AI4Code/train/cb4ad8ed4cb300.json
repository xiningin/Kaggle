{"cell_type":{"987adb3a":"code","5456c864":"code","cc9e24f9":"code","107f7464":"code","fe057458":"code","91a960b0":"code","f60b474d":"code","c21d457c":"code","dd496e86":"markdown","f3f5d17a":"markdown","f2ebc2e8":"markdown","80ab8bc2":"markdown","20991f94":"markdown","76c6ed15":"markdown","ba6eb1e2":"markdown","4c0cabaa":"markdown","a4a9f9c2":"markdown","5eb5470a":"markdown"},"source":{"987adb3a":"# define Questions\n\nQ1 = \"Does the workstation have a valve?\"\nQ2 = \"What action may I use to open the valve?\"\nQ3 = \"Is the valve related to Pipe1?\"\nQ4 = \"What is the data type of the input data for the valve?\"\nQ5 = \"What is the status of the pump?\"\nQ6 = \"How to use the emergency stop?\"\nQ7 = \"What action may I use to close the valve?\"\n\n\nquestion_list = [Q1, Q2, Q3, Q4, Q5, Q6, Q7]","5456c864":"# read in jsonld file and use it to answer questions\nimport json\n\n# read file\nwith open('..\/input\/siemens-task-2-dataset\/W3C_WoT_Thing_Description.jsonld', 'r') as myfile:\n    data=myfile.read()\n\n# parse file\ndata_dict = json.loads(data)\n\n# print(json.dumps(data_dict, indent = 4))","cc9e24f9":"# Answers to questions\nA1 = data_dict['properties']['ValveStatus']['description']\nA2 = data_dict['actions']['OpenValve']['description']\nA3 = 'ValveStatus: isPropertyOf: @id' + data_dict['properties']['ValveStatus']['isPropertyOf']['@id']\nA4 = data_dict['actions']['OpenValve']['input']['type']\n# or A4 = data_dict['actions']['CloseValve']['input']['type']\nA5 = data_dict['properties'][\"PumpStatus\"][\"description\"]\nA6 = data_dict['actions']['EmergencyStop']['input']['description']\nA7 = data_dict['actions']['CloseValve']['description']\n\n# put answers in a list\nA_list = [A1, A2, A3, A4, A5, A6, A7]","107f7464":"# import spacy and load large library\nimport spacy\nnlp = spacy.load('en_core_web_lg')","fe057458":"# use word2vec embedding of spacy \n# get 300 dim vectors out of Questions\nQ1_vector = nlp(Q1).vector\nQ2_vector = nlp(Q2).vector\n# replace Pipe1 by Pipe 1, since for Pipe1 there exist no word embedding, \n# which makes it otherwise meaningless (get just maped to 0 vector)\nQ3_vector = nlp(Q3.replace('Pipe1', 'Pipe 1')).vector    \nQ4_vector = nlp(Q4).vector\nQ5_vector = nlp(Q5).vector\nQ6_vector = nlp(Q6).vector\nQ7_vector = nlp(Q7).vector\n\nq_vec = [Q1_vector, Q2_vector, Q3_vector, Q4_vector, Q5_vector,\n         Q6_vector, Q7_vector]\n\n# shift qestions, so that they are located around the origin\nimport numpy as np\nshift_vec =  np.mean(np.array(q_vec), axis = 0)\nq_vec_shift = q_vec - shift_vec","91a960b0":"# define cosine similarity (typical measure for similarity in NLP context)\n# and use this as measure of similarity\n# same as space does with its similarity function\ndef cosine_similarity(array1, array2):\n    return np.dot(array1, array2) \/ np.sqrt(np.dot(array1, array1) * np.dot(array2, array2))","f60b474d":"# define here the function or class (at first a fct later maybe a class)\ndef answer_function(your_question):\n    your_question = your_question.replace('Pipe1', 'Pipe 1')\n    your_question = your_question.replace('pipe1', 'Pipe 1')    \n    sim_list = []\n    for question in q_vec_shift:\n        sim_list.append(cosine_similarity(question, nlp(your_question).vector - shift_vec))\n        \n    print(sim_list)\n    return A_list[np.argmax(np.array(sim_list))]","c21d457c":"# example Questions:\n# Status of pump?\n# Hey robot, do we have a valve?\n# How to open valve?\n# Relationship of pipe1 to valve\n# Input data of valve?\n# STOP!!!\n# How can I close the valve\nanswer_function('how open valve')","dd496e86":"# 2. Answers","f3f5d17a":"*Cosine Similarity*\n$$\\frac{\\vec x \\cdot \\vec y}{|\\vec x|\\cdot |\\vec y|} = \\cos(\\sphericalangle(\\vec x,\\vec y))$$","f2ebc2e8":"# 4. Define Measure of Similarity","80ab8bc2":"**Possible Improvements**\n\n* Provide more possible questions for one answer, should increase accuracy of providing the right answer.\n* Possibility of answering more questions at once (e.g. \"Is there a valve and is it related to Pipe1?\")\n* May add some threshold of cosine similarity. If question is below that threshold provid a answer like \"Sorry I don't understand your question, maybe you mean (most similar question)\".\n* Possiblility to say something like \"That was not my question\", if one got a false answer. Then the machine should answer something like \"Oh sorry for that, maybe you meant (second most similar question)\". If than one answers \"Yes\" the machine should provide the answer to the second most similar question. If one answers \"No\" one can start the game from begining.\n* Possibility to provide two answers if the question is quite similar to 2 or more questions at once.","20991f94":"* works quite well\n* got only for \"open valve?\" a wrong answer (\"How open valve?\" is answered right)","76c6ed15":"# 5. Define Function, which Answers Questions","ba6eb1e2":"# 6. Test Function with Some Questions","4c0cabaa":"# 1. Questions","a4a9f9c2":"# 3. Use spacy to Get a Vector Representation of Questions","5eb5470a":"# 7. Some Thoughts about Goodness and Improvement"}}