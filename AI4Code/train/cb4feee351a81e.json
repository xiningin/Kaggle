{"cell_type":{"b59955df":"code","8e42a314":"code","afe74c51":"code","9cc24b37":"code","8a267b51":"code","a69f73be":"code","2c1ff3da":"code","f4c5378d":"code","8383b9ce":"code","4cb58fbf":"code","acb5e279":"code","922b6c55":"code","701c7551":"code","dbe3eaf4":"code","2484ae96":"code","0c41fa00":"code","c44cd66d":"code","49cb8dd3":"code","6ad659d2":"code","c7739392":"code","68fdb37e":"code","ccedbfce":"code","0b85d699":"code","524edc13":"code","9007227a":"code","892e41fe":"code","c9157373":"code","629af755":"code","dd5893ee":"code","601ec47b":"code","cb6b2121":"code","fe2841fe":"code","d5012b72":"code","c010de78":"code","e3730690":"code","7c71996a":"code","5c2d024b":"code","ea475e69":"code","32ba4316":"code","b61a90aa":"code","e7023784":"code","745ec6f3":"code","2c782ef6":"code","a19e8e92":"code","abb6b0ad":"code","a9a11d5c":"code","ea49f438":"code","4a33ce27":"code","8812772e":"code","92cec92b":"code","3f31c065":"code","344e2899":"code","9225d627":"code","2ef3824d":"code","175e755b":"code","d4e5f894":"code","b4cfbd63":"code","d45b415c":"code","6c6c5d51":"markdown","9ed71952":"markdown","51af6ccc":"markdown","56cd6d2a":"markdown","9335f996":"markdown","45f952cd":"markdown","bd576a8f":"markdown","90c82343":"markdown","92ffe692":"markdown","d12274c3":"markdown","ca00f375":"markdown","9ee2fd52":"markdown"},"source":{"b59955df":"import pandas as pd","8e42a314":"df_train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\n\ndf_test = test.copy()\n\ndatasets = [df_train, df_test]\n\ndf_train.head()","afe74c51":"df_train.describe()","9cc24b37":"for df in datasets:\n    df.set_index('PassengerId',inplace=True)","8a267b51":"df_train.Survived.value_counts(normalize=True)","a69f73be":"df_train.Pclass.value_counts(normalize=True)","2c1ff3da":"df_train.SibSp.value_counts(normalize=True)","f4c5378d":"df_train.Parch.value_counts()","8383b9ce":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\n\ndef boxplot(col_x, col_y,hue):\n    x = df_train[col_x]\n    hue = df_train[hue]\n    y = df_train[col_y]\n    ax = sns.boxplot(x = x, y = y, hue = hue, palette = 'husl')\n    ax.set_title(f'{col_x} per {col_y}')  \n    plt.show()","4cb58fbf":"boxplot('Survived', 'Fare', 'Sex')","acb5e279":"boxplot('Survived','Age','Pclass')","922b6c55":"df_survived = df_train.query('Survived ==1')\ndf_survived.describe()","701c7551":"df_not_survived = df_train.query('Survived == 0')\ndf_not_survived.describe()","dbe3eaf4":"def survived_per_class(column):\n    data = df_train.groupby(column)['Survived'].sum()\/len(df_survived)\n    plt.bar(data.index, data.values)\n    plt.title('Survived by '+ column)\n    plt.show()\n    \nsurvived_per_class('Sex')\n\nsurvived_per_class('Pclass')\n\nsurvived_per_class('Embarked')","2484ae96":"def survived_per_class_relative(df, column):\n    data = df.groupby(column)['Survived'].sum()*100\/df.groupby(column)['Survived'].count()\n    sns.barplot(x = data.index,y = data.values)\n    plt.title('% survived by '+ column)\n    plt.show()\n    \nsurvived_per_class_relative(df_train,'Sex')\nsurvived_per_class_relative(df_train,'Pclass')\nsurvived_per_class_relative(df_train,'Embarked')\nsurvived_per_class_relative(df_train,'SibSp')\nsurvived_per_class_relative(df_train,'Parch')","0c41fa00":"df_train.groupby('Embarked').Fare.mean()","c44cd66d":"def hist_age(df,title):\n    plt.hist(df['Age'])\n    plt.title(title)\n    plt.show()\n\nfor i,j in zip([df_train,df_survived,df_not_survived], ['Total','Survived','Not Survived']):\n    hist_age(i,j)","49cb8dd3":"df_train.loc[(df_train.Sex == 'male') & (df_train.Age > 16)].Survived.value_counts(normalize=True)","6ad659d2":"df_train.loc[(df_train.Sex == 'male') & (df_train.Age < 16)].Survived.value_counts(normalize=True)","c7739392":"df_train.loc[(df_train.Sex == 'female') & (df_train.Age > 16)].Survived.value_counts(normalize=True)","68fdb37e":"df_train.loc[(df_train.Sex == 'female') & (df_train.Age < 16)].Survived.value_counts(normalize=True)","ccedbfce":"df_young = df_train.query('Age < 16')\n\nsns.scatterplot(x = df_young.Age, y = df_young.Fare, hue = df_young.Survived)","0b85d699":"#Obtain only the cabin level\nimport numpy as np\n\n\nfor df in datasets:\n    df.Cabin.fillna('U', inplace=True)\n    for i in range(len(df)):\n        df.Cabin.iloc[i] = df.Cabin.iloc[i][0]","524edc13":"survived_per_class('Cabin')\nsurvived_per_class_relative(df_train,'Cabin')","9007227a":"df_train.info()","892e41fe":"df_train.info()","c9157373":"df_unknown = df_train.loc[np.isnan(df_train.Age) == True]","629af755":"df_unknown.describe()","dd5893ee":"df_unknown.Survived.value_counts(normalize=True)","601ec47b":"df_unknown.Pclass.value_counts(normalize=True)","cb6b2121":"from sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer\n\nfor df in datasets:\n    mice_imputer = IterativeImputer()\n    df['Age'] = mice_imputer.fit_transform(df[['Age']])","fe2841fe":"df_train.corr()","d5012b72":"df_train.query(\"Cabin == 'T'\") ","c010de78":"df_train.Cabin.replace('T','U',inplace=True)","e3730690":"df_train['Embarked'].fillna('S', inplace=True)\n\ndf_test['Fare'].fillna(df_test.Fare.median(), inplace=True)","7c71996a":"df_train.info()","5c2d024b":"df_test.info()","ea475e69":"#Feature Engineering\n\ndf_train","32ba4316":"#separe features and result\n\ny = df_train['Survived']\nx = df_train.iloc[:,1:]\n\ndatasets = [x, df_test]","b61a90aa":"for df in datasets:\n    df['Family'] = df['SibSp'] + df['Parch']","e7023784":"df_corr = pd.concat([x,y],axis=1)\ndf_corr.corr().Survived.sort_values(ascending=False)","745ec6f3":"survived_per_class_relative(df_corr,'Family')","2c782ef6":"for dataset in datasets:\n    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col',\n                                                 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n","a19e8e92":"df_test","abb6b0ad":"x","a9a11d5c":"col_drop = ['Ticket', 'Name','Family','Parch','SibSp']\n\nx.drop(columns = col_drop, inplace=True)\ndf_test.drop(columns = col_drop, inplace=True)","ea49f438":"df_corr = pd.concat([x,y],axis=1)\ndf_corr.corr().Survived.sort_values(ascending=False)","4a33ce27":"from sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nimport numpy as np\n\n\ndef encode_features(cat, data):\n    transformer = ColumnTransformer([('encoder', OneHotEncoder(), cat)], remainder='passthrough')\n    data = transformer.fit_transform(data)\n    return pd.DataFrame(data)\n\ncat = ['Pclass','Sex','Cabin','Embarked','Title']\n\ndf_test = encode_features(cat, df_test)\nx = encode_features(cat,x)","8812772e":"#split train and val data\n\nfrom sklearn.model_selection import train_test_split\n\nrandom_state = 42\n\nx_train, x_val, y_train, y_val = train_test_split(x, y)","92cec92b":"x_train.head()","3f31c065":"x_val.head()","344e2899":"#Scale the data\n\nfrom sklearn.preprocessing import StandardScaler\n\n\nscaler = StandardScaler().fit(x_train)\n\nx_train = scaler.transform(x_train)\nx_val = scaler.transform(x_val)\ndf_test = scaler.transform(df_test)","9225d627":"#Choose model\n\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import f1_score, roc_auc_score, accuracy_score, confusion_matrix\nrandom_state = 42\n\nscoring = ('f1', 'roc_auc', 'accuracy')\n\ndef best_model(estimator, x, y, scoring):\n    crossval = cross_validate(estimator(),x,y, scoring=scoring, cv=10, return_train_score=True)\n    print('_________________________________________')\n    print(estimator)\n    print('Test:')\n    print(f\"F1: {crossval['test_f1'].mean()}\")\n    print(f\"Roc_auc: {crossval['test_roc_auc'].mean()}\")\n    print(f\"Accuracy: {crossval['test_accuracy'].mean()}\")\n    print('Train:')\n    print(f\"F1: {crossval['train_f1'].mean()}\")\n    print(f\"Roc_auc: {crossval['train_roc_auc'].mean()}\")\n    print(f\"Accuracy: {crossval['train_accuracy'].mean()}\")\n    \nestimators= [SVC, XGBClassifier, RandomForestClassifier, LogisticRegression]\n\nfor estimator in estimators:    \n    best_model(estimator, x_train, y_train, scoring)\n    ","2ef3824d":"#Tuning\nfrom sklearn.model_selection import GridSearchCV\n\n\nrandom_state = 42\n\ndef tuning(estimator,param_grid, x, y):\n    gridsearch = GridSearchCV(estimator, param_grid)\n    gridsearch.fit(x,y)\n    print(gridsearch.best_params_)\n    print(gridsearch.best_score_)\n\nestimator = XGBClassifier()\nparam_grid = {\n 'max_depth':range(3,10,2),\n 'min_child_weight':range(1,6,2)\n}\n\ntuning(estimator, param_grid, x_train, y_train)","175e755b":"#Tuning 2\n\nestimator = XGBClassifier(max_depth = 5, min_child_weight = 3)\n\nparam_grid = {\n 'gamma':[i\/10.0 for i in range(0,5)]\n}\n\ntuning(estimator, param_grid, x_train, y_train)","d4e5f894":"#Tuning 3\n\nestimator = XGBClassifier(max_depth = 5, min_child_weight = 5, gamma = 0)\n\nparam_grid = {\n 'learning_rate':[0.01, 0.03, 0.1, 0.03, 1]\n}\n\ntuning(estimator, param_grid, x_train, y_train)","b4cfbd63":"#train model\n\nmodel_xgb = XGBClassifier(max_depth = 5, min_child_weight = 3, gamma = 0, learning_rate = 0.1)\nmodel_xgb.fit(x_train,y_train)\ny_predict_xgb = model_xgb.predict(x_val)","d45b415c":"#Evaluate\n\ndef evaluate_model(y_val, y_predict):\n    print(f\"Accuracy: {accuracy_score(y_val, y_predict)}\")\n    print(f\"F1: {f1_score(y_val, y_predict)}\")\n    print(f\"Roc_auc: {roc_auc_score(y_val, y_predict)}\")\n    print(f\"Confusion Matrix: {confusion_matrix(y_val, y_predict)}\")\n    \n\nevaluate_model(y_val,y_predict_xgb)","6c6c5d51":"38% of the passangers in this dataset died in the accident. About 50% of them were in the lower class.\n","9ed71952":"Now let's analyze by relative quantities","51af6ccc":"Preprocessing","56cd6d2a":"As seen before, in this dataset, passangers who had cabins had a much higher survival chance than the ones who did not, even though the last ones were the majority in the cruise.","9335f996":"It is interesting to notice that, while male children survived at a way higher pct than male adults, the opposite happens when females are analyzed, although without such a big difference.","45f952cd":"In the same way as women, children were given preference on the boats, thus a higher pct of them survived. In the opposite way, older people had lower survival rate.","bd576a8f":"   It is clear that women and passangers in higher classes had a bigger chance of survival, especially women. \n   Also, more than half of the passangers from from Cherbourg survived, which might be explained by the fact that their mean Fare was higher,although this logic does'nt apply to the other two embarkments, because more people from Q survived even though it's mean fare was less than half of S.","90c82343":"My first competition! Feel welcome to make any corrections and give me advices.\n\nThis is not the version used to reach the top 8%. I made some changes after getting the result and forgot to save a copy of it.","92ffe692":"76% of the people with no age registered are from the third class, which means they paid lower fares. 177 passengers is an amount of data too valuable to be thrown off, so the missing ages will be filled with the median age of the passangers.","d12274c3":"Treating the data","ca00f375":"Analyze the Data","9ee2fd52":"Although the display is not very clear, it is noticeble that passangers who survived tended to had paid a higher fare. "}}