{"cell_type":{"bd8c390d":"code","214bab34":"code","eae48bee":"code","b0b2b2ab":"code","4856091f":"code","a5d47e92":"code","ce26317b":"code","b008921d":"code","54156604":"code","65c87bfd":"code","ad2e444b":"code","8c910ac9":"code","1ab9a2a3":"code","55a19d1b":"code","346f20d6":"code","23556ebf":"code","37832275":"code","e683a49f":"code","2cfe36b1":"code","2bf118c9":"code","613cc000":"code","46b13bb0":"code","ede889db":"code","e08dd158":"code","0741831e":"code","a7400bed":"code","d04a06ef":"code","50f5e1a5":"code","2c03c378":"code","cdfba333":"markdown","58ccc38a":"markdown","323c090a":"markdown","1eeee7d0":"markdown","924c6e90":"markdown","c173914a":"markdown","2ab062e3":"markdown","823db78a":"markdown","038acba9":"markdown","d8ff0dbc":"markdown","d139e83a":"markdown","e4d2ecbb":"markdown","9e43bdd7":"markdown","563eca10":"markdown","f8fddef8":"markdown","016ba3cd":"markdown","84782e74":"markdown","d8f54485":"markdown","b8c07238":"markdown","eb4ef1ad":"markdown","43e1bfc8":"markdown"},"source":{"bd8c390d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n","214bab34":"df=pd.read_csv(\"..\/input\/loan_data.csv\")","eae48bee":"df.info()","b0b2b2ab":"df.describe()","4856091f":"df.head()","a5d47e92":"plt.figure(figsize=(10,6))\ndf[df['credit.policy']==1]['fico'].hist(alpha=0.5,color='blue',\n                                              bins=30,label='Credit.Policy=1')\ndf[df['credit.policy']==0]['fico'].hist(alpha=0.5,color='red',\n                                              bins=30,label='Credit.Policy=0')\nplt.legend()\nplt.xlabel('FICO')","ce26317b":"plt.figure(figsize=(10,6))\ndf[df['not.fully.paid']==1]['fico'].hist(alpha=0.5,color='blue',\n                                              bins=30,label='not.fully.paid=1')\ndf[df['not.fully.paid']==0]['fico'].hist(alpha=0.5,color='red',\n                                              bins=30,label='not.fully.paid=0')\nplt.legend()\nplt.xlabel('FICO')","b008921d":"sns.countplot(data=df,x=\"purpose\",hue=\"not.fully.paid\",palette='Set1')","54156604":"sns.jointplot(x='fico',y='int.rate',data=df,color='purple')","65c87bfd":"sns.lmplot(y='int.rate',x='fico',data=df,hue='credit.policy',\n           col='not.fully.paid',palette='Set1')","ad2e444b":"df.info()","8c910ac9":"cat_feats=['purpose']","1ab9a2a3":"final_data =pd.get_dummies(df,columns=cat_feats,drop_first=True)","55a19d1b":"final_data.info()","346f20d6":"from sklearn.model_selection import train_test_split ","23556ebf":"X = final_data.drop('not.fully.paid',axis=1)\ny = final_data['not.fully.paid']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=101)","37832275":"from sklearn.tree import DecisionTreeClassifier","e683a49f":"dtree =DecisionTreeClassifier()","2cfe36b1":"dtree.fit(X_train,y_train)","2bf118c9":"predict = dtree.predict(X_test)","613cc000":"from sklearn.metrics import confusion_matrix,classification_report","46b13bb0":"print(classification_report(y_test,predict))","ede889db":"print(confusion_matrix(y_test,predict))","e08dd158":"from sklearn.ensemble import RandomForestClassifier","0741831e":"rfc= RandomForestClassifier(n_estimators=600)","a7400bed":"rfc.fit(X_train,y_train)","d04a06ef":"predict_rfc= rfc.predict(X_test)","50f5e1a5":"print(classification_report(y_test,predict_rfc))","2c03c378":"print(confusion_matrix(y_test,predict_rfc))","cdfba333":"**Show the Confusion Matrix for the predictions.**","58ccc38a":"**Now create a classification report from the results. Do you get anything strange or some sort of warning?**","323c090a":"# Setting up the Data\n\nLet's get ready to set up our data for our Random Forest Classification Model!\n\n**Check loans.info() again.**","1eeee7d0":"**Now use pd.get_dummies(loans,columns=cat_feats,drop_first=True) to create a fixed larger dataframe that has new feature columns with dummy variables. Set this dataframe as final_data.**","924c6e90":"** Check out the info(), head(), and describe() methods on loans.**","c173914a":"** Create a countplot using seaborn showing the counts of loans by purpose, with the color hue defined by not.fully.paid. **","2ab062e3":"Thanks for looking my kernel.This project belongs to udemy - \"Data science and Machine learning Bootcamp\". If you like please upvote  and comment your suggestion.","823db78a":"______\n# Comparison between Decision Trees  and Random Forest Project \n\nFor this project we will be exploring publicly available data from [LendingClub.com](www.lendingclub.com). Lending Club connects people who need money (borrowers) with people who have money (investors). Hopefully, as an investor you would want to invest in people who showed a profile of having a high probability of paying you back. We will try to create a model that will help predict this.\n\nLending club had a [very interesting year in 2016](https:\/\/en.wikipedia.org\/wiki\/Lending_Club#2016), so let's check out some of their data and keep the context in mind. This data is from before they even went public.\n\nWe will use lending data from 2007-2010 and be trying to classify and predict whether or not the borrower paid back their loan in full. You can download the data from [here](https:\/\/www.lendingclub.com\/info\/download-data.action) or just use the csv already provided. It's recommended you use the csv provided as it has been cleaned of NA values.\n\nHere are what the columns represent:\n* credit.policy: 1 if the customer meets the credit underwriting criteria of LendingClub.com, and 0 otherwise.\n* purpose: The purpose of the loan (takes values \"credit_card\", \"debt_consolidation\", \"educational\", \"major_purchase\", \"small_business\", and \"all_other\").\n* int.rate: The interest rate of the loan, as a proportion (a rate of 11% would be stored as 0.11). Borrowers judged by LendingClub.com to be more risky are assigned higher interest rates.\n* installment: The monthly installments owed by the borrower if the loan is funded.\n* log.annual.inc: The natural log of the self-reported annual income of the borrower.\n* dti: The debt-to-income ratio of the borrower (amount of debt divided by annual income).\n* fico: The FICO credit score of the borrower.\n* days.with.cr.line: The number of days the borrower has had a credit line.\n* revol.bal: The borrower's revolving balance (amount unpaid at the end of the credit card billing cycle).\n* revol.util: The borrower's revolving line utilization rate (the amount of the credit line used relative to total credit available).\n* inq.last.6mths: The borrower's number of inquiries by creditors in the last 6 months.\n* delinq.2yrs: The number of times the borrower had been 30+ days past due on a payment in the past 2 years.\n* pub.rec: The borrower's number of derogatory public records (bankruptcy filings, tax liens, or judgments).","038acba9":"## Training a Decision Tree Model\n\nLet's start by training a single decision tree first!\n\n** Import DecisionTreeClassifier**","d8ff0dbc":"## Get the Data\n\n** Use pandas to read loan_data.csv as a dataframe called loans.**","d139e83a":"** Let's see the trend between FICO score and interest rate. Recreate the following jointplot.**","e4d2ecbb":"## Training the Random Forest model\n\nNow its time to train our model!\n\n**Create an instance of the RandomForestClassifier class and fit it to our training data from the previous step.**","9e43bdd7":"**Create an instance of DecisionTreeClassifier() called dtree and fit it to the training data.**","563eca10":"## Predictions and Evaluation of Decision Tree\n**Create predictions from the test set and create a classification report and a confusion matrix.**","f8fddef8":"** Create the following lmplots to see if the trend differed between not.fully.paid and credit.policy. Check the documentation for lmplot() if you can't figure out how to separate it into columns.**","016ba3cd":"## Train Test Split\n\nNow its time to split our data into a training set and a testing set!\n\n** Use sklearn to split your data into a training set and a testing set as we've done in the past.**","84782e74":"# Exploratory Data Analysis\n\nLet's do some data visualization! We'll use seaborn and pandas built-in plotting capabilitie.\n\n** Create a histogram of two FICO distributions on top of each other, one for each credit.policy outcome.**\n\n","d8f54485":"## Predictions and Evaluation\n\nLet's predict off the y_test values and evaluate our model.\n\n** Predict the class of not.fully.paid for the X_test data.**","b8c07238":"# Import Libraries\n\n**Import the usual libraries for pandas and plotting. You can import sklearn later on.**","eb4ef1ad":"** Create a similar figure, except this time select by the not.fully.paid column.**","43e1bfc8":"## Categorical Features\n\nNotice that the **purpose** column as categorical\n\nThat means we need to transform them using dummy variables so sklearn will be able to understand them. Let's do this in one clean step using pd.get_dummies.\n\nLet's show you a way of dealing with these columns that can be expanded to multiple categorical features if necessary.\n\n**Create a list of 1 element containing the string 'purpose'. Call this list cat_feats.**"}}