{"cell_type":{"a348640d":"code","6edd5d1d":"code","68f86c00":"code","26f4695b":"code","adb4652c":"code","40a9a465":"code","81ab3454":"code","711f6a39":"code","bcc143b4":"code","65d3205a":"code","58d4f8ee":"code","3ca9ca1b":"code","28e377d9":"code","84047b50":"code","c98893e7":"markdown","7aaaa52a":"markdown","f21d3c48":"markdown","4a5b52c4":"markdown","78dde919":"markdown","f9563d6b":"markdown","1cafd9f6":"markdown","7aae4bcd":"markdown","d4d894f5":"markdown","2fb94f8f":"markdown","140a2690":"markdown","8e1b46d7":"markdown"},"source":{"a348640d":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport keras\nfrom keras import optimizers\nfrom keras import backend as K\nfrom keras import regularizers\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation, Dropout, Flatten\nfrom keras.layers import Embedding, Conv1D, MaxPooling1D, GlobalMaxPooling1D \nfrom keras.utils import plot_model\nfrom keras.preprocessing import sequence\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.callbacks import EarlyStopping\n\nfrom tqdm import tqdm\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import RegexpTokenizer \nimport os, re, csv, math, codecs\n\nsns.set_style(\"whitegrid\")\nnp.random.seed(0)\n\nDATA_PATH = '..\/input\/'\nEMBEDDING_DIR = '..\/input\/'\n\nMAX_NB_WORDS = 100000\ntokenizer = RegexpTokenizer(r'\\w+')\nstop_words = set(stopwords.words('english'))\nstop_words.update(['.', ',', '\"', \"'\", ':', ';', '(', ')', '[', ']', '{', '}'])\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n","6edd5d1d":"#load embeddings\nprint('loading word embeddings...')\nembeddings_index = {}\nf = codecs.open('..\/input\/fasttext\/wiki.simple.vec', encoding='utf-8')\nfor line in tqdm(f):\n    values = line.rstrip().rsplit(' ')\n    word = values[0]\n    coefs = np.asarray(values[1:], dtype='float32')\n    embeddings_index[word] = coefs\nf.close()\nprint('found %s word vectors' % len(embeddings_index))","68f86c00":"#load data\ntrain_df = pd.read_csv('..\/input\/toxiccomments\/train.csv', sep=',', header=0)\ntest_df = pd.read_csv('..\/input\/toxiccomments\/test.csv', sep=',', header=0)\ntest_df = test_df.fillna('_NA_')\n\nprint(\"num train: \", train_df.shape[0])\nprint(\"num test: \", test_df.shape[0])\n\nlabel_names = [\"toxic\", \"severe_toxic\", \"obscene\", \"threat\", \"insult\", \"identity_hate\"]\ny_train = train_df[label_names].values\n\n#visualize word distribution\ntrain_df['doc_len'] = train_df['comment_text'].apply(lambda words: len(words.split(\" \")))\nmax_seq_len = np.round(train_df['doc_len'].mean() + train_df['doc_len'].std()).astype(int)\nsns.distplot(train_df['doc_len'], hist=True, kde=True, color='b', label='doc len')\nplt.axvline(x=max_seq_len, color='k', linestyle='--', label='max len')\nplt.title('comment length'); plt.legend()\nplt.show()","26f4695b":"raw_docs_train = train_df['comment_text'].tolist()\nraw_docs_test = test_df['comment_text'].tolist() \nnum_classes = len(label_names)\n\nprint(\"pre-processing train data...\")\nprocessed_docs_train = []\nfor doc in tqdm(raw_docs_train):\n    tokens = tokenizer.tokenize(doc)\n    filtered = [word for word in tokens if word not in stop_words]\n    processed_docs_train.append(\" \".join(filtered))\n#end for\n\nprocessed_docs_test = []\nfor doc in tqdm(raw_docs_test):\n    tokens = tokenizer.tokenize(doc)\n    filtered = [word for word in tokens if word not in stop_words]\n    processed_docs_test.append(\" \".join(filtered))\n#end for\n\nprint(\"tokenizing input data...\")\ntokenizer = Tokenizer(num_words=MAX_NB_WORDS, lower=True, char_level=False)\ntokenizer.fit_on_texts(processed_docs_train + processed_docs_test)  #leaky\nword_seq_train = tokenizer.texts_to_sequences(processed_docs_train)\nword_seq_test = tokenizer.texts_to_sequences(processed_docs_test)\nword_index = tokenizer.word_index\nprint(\"dictionary size: \", len(word_index))\n\n#pad sequences\nword_seq_train = sequence.pad_sequences(word_seq_train, maxlen=max_seq_len)\nword_seq_test = sequence.pad_sequences(word_seq_test, maxlen=max_seq_len)","adb4652c":"#training params\nbatch_size = 256 \nnum_epochs = 8 \n\n#model parameters\nnum_filters = 64 \nembed_dim = 300 \nweight_decay = 1e-4","40a9a465":"#embedding matrix\nprint('preparing embedding matrix...')\nwords_not_found = []\nnb_words = min(MAX_NB_WORDS, len(word_index))\nembedding_matrix = np.zeros((nb_words, embed_dim))\nfor word, i in word_index.items():\n    if i >= nb_words:\n        continue\n    embedding_vector = embeddings_index.get(word)\n    if (embedding_vector is not None) and len(embedding_vector) > 0:\n        # words not found in embedding index will be all-zeros.\n        embedding_matrix[i] = embedding_vector\n    else:\n        words_not_found.append(word)\nprint('number of null word embeddings: %d' % np.sum(np.sum(embedding_matrix, axis=1) == 0))","81ab3454":"print(\"sample words not found: \", np.random.choice(words_not_found, 10))","711f6a39":"#CNN architecture\nprint(\"training CNN ...\")\nmodel = Sequential()\nmodel.add(Embedding(nb_words, embed_dim,\n          weights=[embedding_matrix], input_length=max_seq_len, trainable=False))\nmodel.add(Conv1D(num_filters, 7, activation='relu', padding='same'))\nmodel.add(MaxPooling1D(2))\nmodel.add(Conv1D(num_filters, 7, activation='relu', padding='same'))\nmodel.add(GlobalMaxPooling1D())\nmodel.add(Dropout(0.5))\nmodel.add(Dense(32, activation='relu', kernel_regularizer=regularizers.l2(weight_decay)))\nmodel.add(Dense(num_classes, activation='sigmoid'))  #multi-label (k-hot encoding)\n\nadam = optimizers.Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-08, decay=0.0)\nmodel.compile(loss='binary_crossentropy', optimizer=adam, metrics=['accuracy'])\nmodel.summary()","bcc143b4":"#define callbacks\nearly_stopping = EarlyStopping(monitor='val_loss', min_delta=0.01, patience=4, verbose=1)\ncallbacks_list = [early_stopping]","65d3205a":"#model training\nhist = model.fit(word_seq_train, y_train, batch_size=batch_size, epochs=num_epochs, callbacks=callbacks_list, validation_split=0.1, shuffle=True, verbose=2)","58d4f8ee":"y_test = model.predict(word_seq_test)","3ca9ca1b":"#create a submission\nsubmission_df = pd.DataFrame(columns=['id'] + label_names)\nsubmission_df['id'] = test_df['id'].values \nsubmission_df[label_names] = y_test \nsubmission_df.to_csv(\".\/cnn_fasttext_submission.csv\", index=False)","28e377d9":"#generate plots\nplt.figure()\nplt.plot(hist.history['loss'], lw=2.0, color='b', label='train')\nplt.plot(hist.history['val_loss'], lw=2.0, color='r', label='val')\nplt.title('CNN sentiment')\nplt.xlabel('Epochs')\nplt.ylabel('Cross-Entropy Loss')\nplt.legend(loc='upper right')\nplt.show()","84047b50":"plt.figure()\nplt.plot(hist.history['acc'], lw=2.0, color='b', label='train')\nplt.plot(hist.history['val_acc'], lw=2.0, color='r', label='val')\nplt.title('CNN sentiment')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend(loc='upper left')\nplt.show()","c98893e7":"Let's define our training and model parameters:","7aaaa52a":"**Keras CNN with FastText Embeddings**","f21d3c48":"CNNs provide a faster alternative to LSTM models at a comparable performance. They are faster to train and use fewer parameters. CNN models are translation invariant and in application to text make sense when there is no strong dependence on recent past vs distant past of the input sequence. CNNs can learn patterns in word embeddings and given the nature of the dataset (e.g. multiple misspellings, out of vocabulary words), it makes sense to use sub-word information. In this notebook, a simple CNN architecture is used for multi-label classification with the help of FastText word embeddings. Thus, it can be a good addition (diverse and accurate) to your ensemble.","4a5b52c4":"We can finally define the CNN architecture","78dde919":"**References:**\n\n[1] P. Bojanowski, E. Grave, A. Joulin, T. Mikolov, \"Enriching Word Vectors with Subword Information\", arXiv, 2016  \n[2] FastText Embeddings: https:\/\/github.com\/facebookresearch\/fastText\/blob\/master\/pretrained-vectors.md  \n[3] F. Chollet, \"Deep Learning with Python\", Manning Publications, 2017  ","f9563d6b":"It's interesting to look at the words not found in the embeddings:","1cafd9f6":"Looking at training and validation loss \/ accuracy figures below, we can see there is no sign of over-fitting.","7aae4bcd":"Let's load the data and the embeddings...","d4d894f5":"Because of the multi-label loss, we are using k-hot encoding of the output and sigmoid activations. As a result, the loss is binary cross-entropy.","2fb94f8f":"Let's make predictions on the test data:","140a2690":"We can now prepare our embedding matrix limiting to a max number of words:","8e1b46d7":"Let's pre-process the text, tokenize it and pad it to a maximum length (as in the figure above)."}}