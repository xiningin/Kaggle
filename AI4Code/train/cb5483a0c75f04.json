{"cell_type":{"15dec910":"code","fab9bf2c":"code","0b29097e":"code","2982c2c4":"code","19fce2bd":"code","23b7390c":"code","9d67de42":"code","ab2b2761":"code","c90e77db":"code","add858e1":"code","ded48833":"code","b666c588":"code","8dd8f7b9":"code","ac1e7ef4":"code","728c871c":"code","0615e614":"code","114ef29a":"code","6d2c980c":"code","c8f640b9":"code","9970c45f":"code","455c0d76":"code","19c587b5":"code","273ff518":"code","332ba769":"code","e3c7098b":"code","987532cd":"code","df9a70d7":"code","3199bcf4":"code","5267279b":"code","3aac6501":"code","2d23d52a":"code","56039e60":"code","be1d25d1":"code","1e5ed68e":"code","f1b59710":"code","2bc64fa6":"code","a95b56a8":"code","46b55cd6":"code","88b5db0d":"code","ebd0d3ce":"code","964e65fb":"code","3663599c":"code","96632a2d":"code","93127674":"code","db9401da":"code","04e123b6":"code","832ced14":"code","4d5d0b01":"code","3d3af9dd":"code","e7cc2163":"code","5ce0bf3b":"code","cdc66cda":"code","539a2347":"markdown","0ec48c1a":"markdown","9c364ba6":"markdown"},"source":{"15dec910":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_theme()\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fab9bf2c":"train_path = '\/kaggle\/input\/titanic\/train.csv'\ntest_path = '\/kaggle\/input\/titanic\/test.csv'\ngender_submission_path = '\/kaggle\/input\/titanic\/gender_submission.csv'\n\ntrain = pd.read_csv(train_path)\ntest = pd.read_csv(test_path)\ngender_submission = pd.read_csv(gender_submission_path)","0b29097e":"train.head()","2982c2c4":"train.info()","19fce2bd":"train['Pclass'].value_counts()","23b7390c":"train['Embarked'].value_counts()","9d67de42":"train.describe()","ab2b2761":"train.hist(figsize = (20, 15))","c90e77db":"corr_matrix = train.corr()\nplt.figure(figsize = (18, 9))\nsns.heatmap(corr_matrix, vmin=-1, vmax=1, center= 0, cmap= 'coolwarm', annot = True)","add858e1":"# Correlation of features with Target variable\n\ncorr_matrix['Survived'].sort_values(ascending = False)","ded48833":"x = train.loc[train['Survived'] == 0]\nx['Embarked'].value_counts()","b666c588":"x = train.loc[train['Survived'] == 1]\nx['Embarked'].value_counts()","8dd8f7b9":"x = train.loc[train['Survived'] == 1]\nx['Pclass'].value_counts()","ac1e7ef4":"# No of Male\/Female not Survived\n\n\nx = train.loc[train['Survived'] == 0]\nx['Sex'].value_counts()","728c871c":"x.loc[x['Sex'] == 'male', 'Embarked'].value_counts()","0615e614":"# No of Male\/Female Survived\n\nx = train.loc[train['Survived'] == 1]\nx['Sex'].value_counts()","114ef29a":"sns.countplot('Survived', data = train )","6d2c980c":"x = train.loc[train['Survived'] == 0]\nsns.countplot('Sex', data = train , hue = 'Survived')","c8f640b9":"X_train = train.drop('Survived', axis = 1)\nX_train.head()","9970c45f":"y_train = train['Survived'].copy()\ny_train.head()","455c0d76":"train.isnull().sum()","19c587b5":"cols = ['Cabin', 'Name', 'PassengerId', 'Ticket']\nX_train = X_train.drop(cols, axis = 1)\nX_train.head()","273ff518":"X_train['Embarked'].value_counts()","332ba769":"# Since 'S' is most commom Category in embarked, we'll use it to fill two null values \n\nX_train.loc[X_train['Embarked'].isnull(), 'Embarked'] = 'S'\nX_train['Embarked'].isnull().sum()","e3c7098b":"# Let's replace 177 null values with it's median in Age Column \n\nmedian = X_train['Age'].median()\nX_train['Age'].fillna(median, inplace = True)","987532cd":"X_train['Age'] = X_train['Age'].astype('int') \nX_train['Fare'] = X_train['Fare'].astype('int')","df9a70d7":"X_train.isnull().sum()","3199bcf4":"from sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\n\nct = ColumnTransformer([('cat', OneHotEncoder(sparse = False), ['Embarked', 'Sex'])],\n                       remainder = 'passthrough')\n\nX_train = ct.fit_transform(X_train)","5267279b":"from sklearn.preprocessing import StandardScaler\n\nstd_scaler = StandardScaler()\nX_train = std_scaler.fit_transform(X_train)","3aac6501":"from sklearn.linear_model import LogisticRegression\n\nlog_reg = LogisticRegression()\nlog_reg.fit(X_train, y_train)","2d23d52a":"from sklearn.model_selection import cross_val_score\n\ncross_val_score(log_reg, X_train, y_train, cv = 3, scoring = 'accuracy')","56039e60":"from sklearn.svm import SVC\n\nsvm_clf = SVC(random_state = 42)\nsvm_clf.fit(X_train, y_train)","be1d25d1":"cross_val_score(svm_clf, X_train, y_train, cv = 3, scoring = 'accuracy')","1e5ed68e":"from sklearn.tree import DecisionTreeClassifier\n\ndt_clf = DecisionTreeClassifier(max_depth = 3, random_state = 42)\ndt_clf.fit(X_train, y_train)","f1b59710":"cross_val_score(dt_clf, X_train, y_train, cv = 3, scoring = 'accuracy')","2bc64fa6":"from sklearn.ensemble import RandomForestClassifier\n\nrnd_clf = RandomForestClassifier(random_state = 42)\nrnd_clf.fit(X_train, y_train)","a95b56a8":"cross_val_score(rnd_clf, X_train, y_train, cv = 3, scoring = 'accuracy')","46b55cd6":"from sklearn.ensemble import VotingClassifier\n\nvt_clf = VotingClassifier([('rnd_clf', rnd_clf), ('svc', svm_clf)], voting = 'hard')\n\nvt_clf.fit(X_train, y_train)","88b5db0d":"cross_val_score(vt_clf, X_train, y_train, cv = 3, scoring = 'accuracy')","ebd0d3ce":"X_test = test.copy()\nX_test.head()","964e65fb":"y_test = gender_submission['Survived'].copy()\ny_test.head()","3663599c":"# preparing test set for model\n\nX_test = X_test.drop(cols, axis = 1)\nX_test.head()","96632a2d":"X_test.isnull().sum()","93127674":"median = X_test['Age'].median()\nX_test['Age'].fillna(median, inplace = True)\nX_test['Age'] = X_test['Age'].astype('int')","db9401da":"median = X_test['Fare'].median()\nX_test['Fare'].fillna(median, inplace = True)\nX_test['Fare'] = X_test['Fare'].astype('int')","04e123b6":"ct = ColumnTransformer([('cat', OneHotEncoder(sparse = False), ['Embarked', 'Sex'])],\n                       remainder = 'passthrough')\n\nX_test = ct.fit_transform(X_test)","832ced14":"X_test = std_scaler.fit_transform(X_test)","4d5d0b01":"vt_pred = vt_clf.predict(X_test)\nsvm_pred = svm_clf.predict(X_test)","3d3af9dd":"vt_clf_acc = (vt_pred == y_test).mean()\nprint('vt_clf Accuracy: {}'.format(vt_clf_acc))","e7cc2163":"svm_clf_acc = (svm_pred == y_test).mean()\nprint('svm_clf Accuracy: {}'.format(svm_clf_acc))","5ce0bf3b":"submission = pd.DataFrame({'PassengerId' :test['PassengerId'], 'Survived': svm_pred})\nsubmission.head()","cdc66cda":"filename = 'TitanicPredictions.csv'\n\nsubmission.to_csv(filename, index = False)","539a2347":"# **Prepare Data**","0ec48c1a":"# Select and train a model","9c364ba6":"# Evaluate on test set"}}