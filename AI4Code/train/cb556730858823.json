{"cell_type":{"856945b4":"code","8e6ca72c":"code","7a26a6de":"code","2886f08d":"code","ae65ab84":"code","30490a12":"code","216d6564":"code","aedd69e5":"code","4c2e469e":"code","d3ed6a63":"code","31fee50e":"code","3a0d32ed":"code","9b7bd0ae":"code","9f229a99":"code","580ff72f":"code","4ddc67f7":"code","cf123343":"code","1d566597":"code","707f629a":"code","480dbebd":"code","0af244c8":"code","9fe49e3d":"code","e4a9a343":"code","23afa9a2":"code","8e95d4ab":"code","9fa75dbb":"code","c7a43f9c":"code","8796de3c":"code","ebfb2ec1":"code","ca14234c":"code","84a7be5e":"markdown","d56059cf":"markdown","1f75d252":"markdown","7191194f":"markdown"},"source":{"856945b4":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n!pip install bioinfokit","8e6ca72c":"#Loading the dataset\ndf = pd.read_csv(\"..\/input\/mcdonalds\/mcdonalds.csv\")\ndf.shape\ndf.head()\ndf.dtypes\n# 11 variable(cols) has yes or no values.\n\n# checking for null data --> No null data\ndf.info()\ndf.isnull().sum()","7a26a6de":"#Checking for the count of below variables\ndf['Gender'].value_counts()\ndf['VisitFrequency'].value_counts()\ndf['Like'].value_counts()","2886f08d":"\n#EXPLORING DATA\n\n#Customer segmentation - based on socio-demographs (Age & Gender)\n\n#Gender\nlabels = ['Female', 'Male']\nsize = df['Gender'].value_counts()\ncolors = ['pink', 'cyan']\nexplode = [0, 0.1]\nplt.rcParams['figure.figsize'] = (7, 7)\nplt.pie(size, colors = colors, explode = explode, labels = labels, shadow = True, autopct = '%.2f%%')\nplt.title('Gender', fontsize = 20)\nplt.axis('off')\nplt.legend()\nplt.show()\n#we infer that there are more female customers than male.\n\n#Age\nplt.rcParams['figure.figsize'] = (25, 8)\nf = sns.countplot(x=df['Age'],palette = 'hsv')\nf.bar_label(f.containers[0])\nplt.title('Age distribution of customers')\nplt.show()\n# Mcdonalds recieve more customers of age between 50-60 and 35-40.\n","ae65ab84":"#Customer segmentation - based on pyschographic segmentation\n\n#For convinence renaming the category\ndf['Like']= df['Like'].replace({'I hate it!-5': '-5','I love it!+5':'+5'})\n#Like \nsns.catplot(x=\"Like\", y=\"Age\",data=df, \n            orient=\"v\", height=5, aspect=2, palette=\"Set2\",kind=\"swarm\")\nplt.title('Likelyness of McDonald w.r.t Age')\nplt.show()\n\n\n","30490a12":"#Label encoding for categorical - Converting 11 cols with yes\/no\n\nfrom sklearn.preprocessing import LabelEncoder\ndef labelling(x):\n    df[x] = LabelEncoder().fit_transform(df[x])\n    return df\n\ncat = ['yummy', 'convenient', 'spicy', 'fattening', 'greasy', 'fast', 'cheap',\n       'tasty', 'expensive', 'healthy', 'disgusting']\n\nfor i in cat:\n    labelling(i)\ndf","216d6564":"#Histogram of the each attributes\nplt.rcParams['figure.figsize'] = (12,14)\ndf.hist()\nplt.show()","aedd69e5":"#Considering only first 11 attributes\ndf_eleven = df.loc[:,cat]\ndf_eleven","4c2e469e":"#Considering only the 11 cols and converting it into array\nx = df.loc[:,cat].values\nx","d3ed6a63":"#Principal component analysis\n\nfrom sklearn.decomposition import PCA\nfrom sklearn import preprocessing\n\npca_data = preprocessing.scale(x)\n\npca = PCA(n_components=11)\npc = pca.fit_transform(x)\nnames = ['pc1','pc2','pc3','pc4','pc5','pc6','pc7','pc8','pc9','pc10','pc11']\npf = pd.DataFrame(data = pc, columns = names)\npf\n","31fee50e":"#Proportion of Variance (from PC1 to PC11)\npca.explained_variance_ratio_","3a0d32ed":"np.cumsum(pca.explained_variance_ratio_)","9b7bd0ae":"# correlation coefficient between original variables and the component\n\nloadings = pca.components_\nnum_pc = pca.n_features_\npc_list = [\"PC\"+str(i) for i in list(range(1, num_pc+1))]\nloadings_df = pd.DataFrame.from_dict(dict(zip(pc_list, loadings)))\nloadings_df['variable'] = df_eleven.columns.values\nloadings_df = loadings_df.set_index('variable')\nloadings_df","9f229a99":"#Correlation matrix plot for loadings \nplt.rcParams['figure.figsize'] = (20,15)\nax = sns.heatmap(loadings_df, annot=True, cmap='Spectral')\nplt.show()","580ff72f":"#Scree plot (Elbow test)- PCA\nfrom bioinfokit.visuz import cluster\ncluster.screeplot(obj=[pc_list, pca.explained_variance_ratio_],show=True,dim=(10,5))","4ddc67f7":"# get PC scores\npca_scores = PCA().fit_transform(x)\n\n# get 2D biplot\ncluster.biplot(cscore=pca_scores, loadings=loadings, labels=df.columns.values, var1=round(pca.explained_variance_ratio_[0]*100, 2),\n    var2=round(pca.explained_variance_ratio_[1]*100, 2),show=True,dim=(10,5))","cf123343":"#Extracting segments\n\n#Using k-means clustering analysis\nfrom sklearn.cluster import KMeans\nfrom yellowbrick.cluster import KElbowVisualizer\nmodel = KMeans()\nvisualizer = KElbowVisualizer(model, k=(1,12)).fit(df_eleven)\nvisualizer.show()","1d566597":"#K-means clustering \n\nkmeans = KMeans(n_clusters=4, init='k-means++', random_state=0).fit(df_eleven)\ndf['cluster_num'] = kmeans.labels_ #adding to df\nprint (kmeans.labels_) #Label assigned for each data point\nprint (kmeans.inertia_) #gives within-cluster sum of squares. \nprint(kmeans.n_iter_) #number of iterations that k-means algorithm runs to get a minimum within-cluster sum of squares\nprint(kmeans.cluster_centers_) #Location of the centroids on each cluster. ","707f629a":"#To see each cluster size\nfrom collections import Counter\nCounter(kmeans.labels_)","480dbebd":"#Visulazing clusters\nsns.scatterplot(data=pf, x=\"pc1\", y=\"pc2\", hue=kmeans.labels_)\nplt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1], \n            marker=\"X\", c=\"r\", s=80, label=\"centroids\")\nplt.legend()\nplt.show()","0af244c8":"#DESCRIBING SEGMENTS\n\nfrom statsmodels.graphics.mosaicplot import mosaic\nfrom itertools import product\n\ncrosstab =pd.crosstab(df['cluster_num'],df['Like'])\n#Reordering cols\ncrosstab = crosstab[['-5','-4','-3','-2','-1','0','+1','+2','+3','+4','+5']]\ncrosstab ","9fe49e3d":"#MOSAIC PLOT\nplt.rcParams['figure.figsize'] = (7,5)\nmosaic(crosstab.stack())\nplt.show()","e4a9a343":"#Mosaic plot gender vs segment\ncrosstab_gender =pd.crosstab(df['cluster_num'],df['Gender'])\ncrosstab_gender","23afa9a2":"plt.rcParams['figure.figsize'] = (7,5)\nmosaic(crosstab_gender.stack())\nplt.show()","8e95d4ab":"#box plot for age\n\nsns.boxplot(x=\"cluster_num\", y=\"Age\", data=df)\n","9fa75dbb":"#Calculating the mean\n#Visit frequency\ndf['VisitFrequency'] = LabelEncoder().fit_transform(df['VisitFrequency'])\nvisit = df.groupby('cluster_num')['VisitFrequency'].mean()\nvisit = visit.to_frame().reset_index()\nvisit","c7a43f9c":"#Like\ndf['Like'] = LabelEncoder().fit_transform(df['Like'])\nLike = df.groupby('cluster_num')['Like'].mean()\nLike = Like.to_frame().reset_index()\nLike","8796de3c":"#Gender\ndf['Gender'] = LabelEncoder().fit_transform(df['Gender'])\nGender = df.groupby('cluster_num')['Gender'].mean()\nGender = Gender.to_frame().reset_index()\nGender","ebfb2ec1":"segment = Gender.merge(Like, on='cluster_num', how='left').merge(visit, on='cluster_num', how='left')\nsegment","ca14234c":"#Target segments\n\nplt.figure(figsize = (9,4))\nsns.scatterplot(x = \"VisitFrequency\", y = \"Like\",data=segment,s=400, color=\"r\")\nplt.title(\"Simple segment evaluation plot for the fast food data set\",\n          fontsize = 15) \nplt.xlabel(\"Visit\", fontsize = 12) \nplt.ylabel(\"Like\", fontsize = 12) \nplt.show()","84a7be5e":"**DESCRIBING SEGMENTS**","d56059cf":"**EXTRACTING SEGMENTS**","1f75d252":"***EXPLORING DATA***","7191194f":"**Selecting target segment**"}}