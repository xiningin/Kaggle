{"cell_type":{"6570187c":"code","61a82d34":"code","50fc5aec":"code","dfd7b13f":"code","d50da67a":"code","6125a468":"code","8547b75b":"code","460c04fe":"code","8af229d3":"code","e9fba44c":"code","a3daa602":"code","9f79864e":"code","ccecbf53":"code","eedbd849":"code","35339d1c":"code","23f29b5a":"code","8bcc9288":"code","7e55e2e9":"code","c5826e9b":"code","6aed5852":"code","d140f1bf":"code","4189c414":"code","f7b64020":"code","fd8532e1":"code","c7933a20":"code","b8f5cf90":"code","974467b2":"code","cbcf46e2":"code","263ccdbd":"code","eac9b0a4":"code","85727141":"code","4991dfaf":"code","9a3597ab":"code","0db6e3f2":"code","7ddab05f":"code","9a451a50":"code","16e7dcd8":"code","ae0a5847":"code","1db19506":"code","66dfbf3d":"code","f6742471":"code","7142df79":"code","e5e0107c":"code","7d369236":"code","1f5278f8":"code","5ad50961":"code","08fa8c95":"code","9cf67936":"code","ff39b640":"code","6971dcd6":"code","e6f45930":"code","be68c55e":"code","84d37005":"code","03d3e6cb":"code","c5d76aad":"code","42299f58":"code","777c672a":"code","812a3295":"code","eca644e4":"code","2a14f317":"markdown","14c7ee99":"markdown","3bdd071f":"markdown","b5debc98":"markdown","bb090aeb":"markdown","86951b04":"markdown","677caca3":"markdown","3875e51f":"markdown","8045d75f":"markdown","0df2def0":"markdown","36f28210":"markdown","035bced7":"markdown","d66f26fc":"markdown","36c922fe":"markdown","f5491f61":"markdown","269a272e":"markdown","f1a029ed":"markdown","78195cdf":"markdown","e70b0c6b":"markdown"},"source":{"6570187c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.datasets import make_regression\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.neighbors import KNeighborsRegressor\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\ntrain_data = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\", encoding= 'unicode_escape')\ntest_data = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\", encoding= 'unicode_escape')\nsample_submission = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\", encoding= 'unicode_escape')","61a82d34":"corr_matrix = train_data.corr()\ncorr_matrix","50fc5aec":"corr_matrix[\"SalePrice\"].sort_values(ascending=False)","dfd7b13f":"train_data.describe()","d50da67a":"train_df = train_data.fillna(0)\ntest_df = test_data.fillna(0)","6125a468":"### check for any possible aoutliers in the train dataset\nfig, ax = plt.subplots()\nax.scatter(x=train_df['GrLivArea'], y=train_df['SalePrice'],color='green',alpha=0.3)\nplt.ylabel('SalsPrice', fontsize=13)\nplt.xlabel('GrLivArea', fontsize=13)\nplt.show()","8547b75b":"train_df = train_df.drop(train_df[(train_df['GrLivArea']>4000) & (train_df['SalePrice']<300000)].index)\n\n# plot the train data again\nfig, ax = plt.subplots()\nax.scatter(train_df['GrLivArea'], train_df['SalePrice'],color='green',alpha=0.3)\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GrLivArea', fontsize=13)\nplt.show()","460c04fe":"feature_drop = ['BsmtFinSF2','BsmtHalfBath','MiscVal','LowQualFinSF','YrSold','OverallCond','MSSubClass','EnclosedPorch','KitchenAbvGr']","8af229d3":"train_df_clean = train_df.drop(feature_drop[0],axis=1)\nfor i in range(len(feature_drop)-1):\n    train_df_clean = train_df_clean.drop(feature_drop[i+1],axis=1)\n    i = i+1","e9fba44c":"test_df_clean = test_df.drop(feature_drop[0],axis=1)\nfor i in range(len(feature_drop)-1):\n    test_df_clean = test_df_clean.drop(feature_drop[i+1],axis=1)\n    i = i+1","a3daa602":"feature = [\"MSZoning\",\"Street\",\"Alley\",\"LotShape\",\"LandContour\",\"Utilities\",\"LotConfig\",\"LandSlope\"\n           ,\"Neighborhood\",\"Condition1\",\"Condition2\",\"BldgType\",\"HouseStyle\",\"RoofStyle\",\"RoofMatl\"\n           ,\"Exterior1st\",\"Exterior2nd\",\"MasVnrType\",\"ExterQual\",\"ExterCond\",\"Foundation\",\"BsmtQual\"\n           ,\"BsmtCond\",\"BsmtExposure\",\"BsmtFinType1\",\"BsmtFinType2\",\"Heating\",\"HeatingQC\",\"CentralAir\"\n           ,\"Electrical\",\"KitchenQual\",\"Functional\",\"FireplaceQu\",\"GarageType\",\"GarageFinish\",\"GarageQual\"\n           ,\"GarageCond\",\"PavedDrive\",\"PoolQC\",\"Fence\",\"MiscFeature\",\"SaleType\",\"SaleCondition\"]","9f79864e":"i=0\nfor i in range(len(feature)):\n    train_coded_df = pd.DataFrame(train_df_clean, columns=[feature[i]])# generate binary values using get_dummies\n    dum_df = pd.get_dummies(train_coded_df, columns=[feature[i]])# merge with main df bridge_df on key values\n    train_df_clean = train_df_clean.join(dum_df)\n    train_df_clean = train_df_clean.drop(feature[i],axis=1)\n    i=i+1","ccecbf53":"i=0\nfor i in range(len(feature)):\n    test_coded_df = pd.DataFrame(test_df_clean, columns=[feature[i]])# generate binary values using get_dummies\n    dum_df = pd.get_dummies(test_coded_df, columns=[feature[i]])# merge with main df bridge_df on key values\n    test_df_clean = test_df_clean.join(dum_df)\n    test_df_clean = test_df_clean.drop(feature[i],axis=1)\n    i=i+1","eedbd849":" feature_drop_train = ['Condition2_RRAe','Condition2_RRAn','Condition2_RRNn','Electrical_0','Electrical_Mix','Exterior1st_ImStucc'\n                       ,'Exterior1st_Stone','Exterior2nd_Other','GarageQual_Ex','Heating_Floor','Heating_OthW','HouseStyle_2.5Fin'\n                       ,'MiscFeature_TenC','PoolQC_Fa','RoofMatl_Membran','RoofMatl_Metal','RoofMatl_Roll','Utilities_NoSeWa','Id']","35339d1c":"train_df_clean = train_df_clean.drop(feature_drop_train[0],axis=1)\nfor i in range(len(feature_drop_train)-1):\n    train_df_clean = train_df_clean.drop(feature_drop_train[i+1],axis=1)\n    i = i+1","23f29b5a":" feature_drop_test = ['Exterior1st_0','Exterior2nd_0','Functional_0','KitchenQual_0','MSZoning_0','SaleType_0','Utilities_0','Id']","8bcc9288":"test_df_clean = test_df_clean.drop(feature_drop_test[0],axis=1)\nfor i in range(len(feature_drop_test)-1):\n    test_df_clean = test_df_clean.drop(feature_drop_test[i+1],axis=1)\n    i = i+1","7e55e2e9":"train_y = pd.DataFrame(train_df_clean['SalePrice'])\ntrain_df_clean = train_df_clean.drop('SalePrice',axis=1)\ntrain_X = train_df_clean\ntest_X = test_df_clean","c5826e9b":"print(train_X.shape)\nprint(train_y.shape)\nprint(test_X.shape)","6aed5852":"X_train, X_test, y_train, y_test = train_test_split(train_X, train_y, test_size=0.33, random_state=42)","d140f1bf":"from sklearn import linear_model\nclflasso = linear_model.Lasso(alpha=0.1)\nclflasso.fit(X_train, np.ravel(y_train))\ny_pred_Lasso = clflasso.predict(X_test)","4189c414":"plt.figure(figsize=(5,4))\nsns.distplot(y_test, label='test')\nsns.distplot(y_pred_Lasso, hist_kws={'alpha':0.3}, label='prediction')\nplt.legend()\nplt.title((np.sqrt(mean_squared_error(y_test, y_pred_Lasso))))\nplt.show()","f7b64020":"#from sklearn.linear_model import HuberRegressor\n#reghub = HuberRegressor()\n#reghub.fit(X_train, np.ravel(y_train))\n#y_pred_Hub = reghub.predict(X_test)","fd8532e1":"#plt.figure(figsize=(5,4))\n#sns.distplot(y_test, label='test')\n#sns.distplot(y_pred_Hub, hist_kws={'alpha':0.3}, label='prediction')\n#plt.legend()\n#plt.title((np.sqrt(mean_squared_error(y_test, y_pred_Hub))))\n#plt.show()","c7933a20":"regl = LinearRegression()\nregl.fit(X_train, np.ravel(y_train))\ny_pred_Lin = regl.predict(X_test)","b8f5cf90":"plt.figure(figsize=(5,4))\nsns.distplot(y_test, label='test')\nsns.distplot(y_pred_Lin, hist_kws={'alpha':0.3}, label='prediction')\nplt.legend()\nplt.title((np.sqrt(mean_squared_error(y_test, y_pred_Lin))))\nplt.show()","974467b2":"regd = DecisionTreeRegressor()\nregd.fit(X_train, np.ravel(y_train))\ny_pred_D = regd.predict(X_test)","cbcf46e2":"plt.figure(figsize=(5,4))\nsns.distplot(y_test, label='test')\nsns.distplot(y_pred_D, hist_kws={'alpha':0.3}, label='prediction')\nplt.legend()\nplt.title((np.sqrt(mean_squared_error(y_test, y_pred_D))))\nplt.show()","263ccdbd":"regr = RandomForestRegressor()\nregr.fit(X_train, np.ravel(y_train))\ny_pred_RF = regr.predict(X_test)","eac9b0a4":"plt.figure(figsize=(5,4))\nsns.distplot(y_test, label='test')\nsns.distplot(y_pred_RF, hist_kws={'alpha':0.3}, label='prediction')\nplt.legend()\nplt.title((np.sqrt(mean_squared_error(y_test, y_pred_RF))))\nplt.show()","85727141":"regknn = KNeighborsRegressor()\nregknn.fit(X_train, np.ravel(y_train))\ny_pred_KNN = regknn.predict(X_test)","4991dfaf":"plt.figure(figsize=(5,4))\nsns.distplot(y_test, label='test')\nsns.distplot(y_pred_KNN, hist_kws={'alpha':0.3}, label='prediction')\nplt.legend()\nplt.title((np.sqrt(mean_squared_error(y_test, y_pred_KNN))))\nplt.show()","9a3597ab":"y_pred_avg = (y_pred_Lin + y_pred_RF)\/2\n\nplt.figure(figsize=(5,4))\nsns.distplot(y_test, label='test')\nsns.distplot(y_pred_avg, hist_kws={'alpha':0.3}, label='prediction')\nplt.legend()\nplt.title(np.sqrt(mean_squared_error(y_test, y_pred_avg)))\nplt.show()","0db6e3f2":"def display_scores(scores):\n    print(\"Scores:\",scores)\n    print(\"Mean:\",scores.mean())\n    print(\"Standard Deviation:\",scores.std())","7ddab05f":"scores = cross_val_score(regl,y_test,y_pred_Lin,scoring=\"neg_mean_squared_error\",cv=10)\nLin_rmse_scores = np.sqrt(-scores)\n\nscores = cross_val_score(regd,y_test,y_pred_D,scoring=\"neg_mean_squared_error\",cv=10)\nDR_rmse_scores = np.sqrt(-scores)\n\nscores = cross_val_score(regr,y_test,y_pred_RF,scoring=\"neg_mean_squared_error\",cv=10)\nRF_rmse_scores = np.sqrt(-scores)\n\nscores = cross_val_score(regknn,y_test,y_pred_KNN,scoring=\"neg_mean_squared_error\",cv=10)\nKNN_rmse_scores = np.sqrt(-scores)\n\n#scores = cross_val_score(reghub,y_test,y_pred_Hub,scoring=\"neg_mean_squared_error\",cv=10)\n#Huber_rmse_scores = np.sqrt(-scores)\n\nscores = cross_val_score(clflasso,y_test,y_pred_Lasso,scoring=\"neg_mean_squared_error\",cv=10)\nLasso_rmse_scores = np.sqrt(-scores)","9a451a50":"print('Linear Regression Scores')\ndisplay_scores(Lin_rmse_scores)","16e7dcd8":"print('Decision Tree Regressor Scores')\ndisplay_scores(DR_rmse_scores)","ae0a5847":"print('Random Forest Regressor Scores')\ndisplay_scores(RF_rmse_scores)","1db19506":"print('KNN Regressor Scores')\ndisplay_scores(KNN_rmse_scores)","66dfbf3d":"#print('Huber Regressor Scores')\n#display_scores(Huber_rmse_scores)","f6742471":"print('Lasso Regressor Scores')\ndisplay_scores(Lasso_rmse_scores)","7142df79":"from sklearn.ensemble import AdaBoostRegressor\n\nada_clf = AdaBoostRegressor(\nRandomForestRegressor())\nboost = ada_clf.fit(X_train, np.ravel(y_train))","e5e0107c":"best_fit_pred_boost = boost.predict(X_test)","7d369236":"plt.figure(figsize=(5,4))\nsns.distplot(y_test, label='test')\nsns.distplot(best_fit_pred_boost, hist_kws={'alpha':0.3}, label='prediction')\nplt.legend()\nplt.title((np.sqrt(mean_squared_error(y_test, best_fit_pred_boost))))\nplt.show()","1f5278f8":"scores = cross_val_score(ada_clf,y_test,best_fit_pred_boost,scoring=\"neg_mean_squared_error\",cv=10)\nboost_rmse_scores = np.sqrt(-scores)","5ad50961":"display_scores(boost_rmse_scores)","08fa8c95":"from sklearn.ensemble import GradientBoostingRegressor\ngbrt = GradientBoostingRegressor()\ngrad_boost = gbrt.fit(X_train, np.ravel(y_train))","9cf67936":"best_fit_pred_grad_boost = grad_boost.predict(X_test)","ff39b640":"plt.figure(figsize=(5,4))\nsns.distplot(y_test, label='test')\nsns.distplot(best_fit_pred_grad_boost, hist_kws={'alpha':0.3}, label='prediction')\nplt.legend()\nplt.title((np.sqrt(mean_squared_error(y_test, best_fit_pred_grad_boost))))\nplt.show()","6971dcd6":"scores = cross_val_score(ada_clf,y_test,best_fit_pred_grad_boost,scoring=\"neg_mean_squared_error\",cv=10)\ngrad_boost_rmse_scores = np.sqrt(-scores)","e6f45930":"display_scores(grad_boost_rmse_scores)","be68c55e":"gbrt_ensm = GradientBoostingRegressor(n_estimators=3000)\ngbrt_ensm.fit(X_train, np.ravel(y_train))\n\nerrors = [mean_squared_error(y_test,best_fit_pred_grad_boost)\n         for best_fit_pred_grad_boost in gbrt.staged_predict(X_test)]\nbst_n_estimators = np.argmin(errors) + 1\n\ngbrt_best = GradientBoostingRegressor(n_estimators = bst_n_estimators)\ngbrt_best.fit(X_train, np.ravel(y_train))","84d37005":"best_fit_pred_grad_boost = gbrt_best.predict(X_test)","03d3e6cb":"plt.figure(figsize=(5,4))\nsns.distplot(y_test, label='test')\nsns.distplot(best_fit_pred_grad_boost, hist_kws={'alpha':0.3}, label='prediction')\nplt.legend()\nplt.title((np.sqrt(mean_squared_error(y_test, best_fit_pred_grad_boost))))\nplt.show()","c5d76aad":"#param_grid = [\n#    {'n_estimators': [3,10,30,40,50,60,70,80,90,100], 'max_features': [2,4,6,8,10,12]},\n#    {'bootstrap':[False],'n_estimators': [3,10,30,40,50,60,70,80,90,100], 'max_features': [2,3,4]},\n#]\n#\n#forest_reg = RandomForestRegressor()\n#\n#grid_search = GridSearchCV(forest_reg, param_grid, cv=5, scoring='neg_mean_squared_error',return_train_score=True)\n#\n#grid_search.fit(X_train, np.ravel(y_train))\n#\n#grid_search.best_estimator_","42299f58":"#final_model = grid_search.best_estimator_","777c672a":"#final_model.fit(X_train, np.ravel(y_train))\n#final_pred = regr.predict(X_test)\n\n#plt.figure(figsize=(5,4))\n#sns.distplot(y_test, label='test')\n#sns.distplot(final_pred, hist_kws={'alpha':0.3}, label='prediction')\n#plt.legend()\n#plt.title((np.sqrt(mean_squared_error(y_test, final_pred))))\n#plt.show()","812a3295":"grad_boost = gbrt_best.fit(train_X, np.ravel(train_y))\nbest_fit_pred_grad_boost_submission = gbrt_best.predict(test_X)","eca644e4":"submission = sample_submission.join(pd.DataFrame(best_fit_pred_grad_boost_submission))\nsubmission = submission.drop('SalePrice',axis=1)\nsubmission = submission.rename(columns={0:'SalePrice'})\n\n\nsubmission.to_csv('submission.csv',index=False)","2a14f317":"**KNN Regressor**","14c7ee99":"# Grid Search","3bdd071f":"# Submission","b5debc98":"# Optimization Evaluation","bb090aeb":"**Linear Regression**","86951b04":"**Training Model Predictions Averaged**","677caca3":"# Boosting","3875e51f":"**Lasso Regressor**","8045d75f":"**Ada Booster**","0df2def0":"**Outlier Detection**","36f28210":"# ML Modeling","035bced7":"**Feature Drops**","d66f26fc":"**Gradient Booster**","36c922fe":"**Random Forest Regressor**","f5491f61":"# Train Test Split","269a272e":"**Decision Tree Regressor**","f1a029ed":"**Model Comparisons**","78195cdf":"**HuberRegressor**","e70b0c6b":"# Prepare Data"}}