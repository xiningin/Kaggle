{"cell_type":{"c89f3f9d":"code","7c880b1f":"code","51529249":"code","28c91057":"code","8ef9c0f1":"code","eb2ad99c":"code","2a676f85":"code","f0d55160":"code","8943839b":"code","e03459af":"code","e2b1c1e9":"code","7c019e19":"code","69f74a2e":"code","bc478d18":"code","beec6151":"code","ddf3e44a":"code","74aac6f9":"code","1e96aa3d":"code","cb105fab":"code","6c33b6af":"code","cc91ba3a":"code","ed071a40":"code","14ae160f":"code","0c5388fc":"code","c1dceee5":"code","93f157ea":"code","2061b3af":"code","2881f556":"code","f0be8703":"code","3b9caa0e":"code","313726b2":"code","f782f81c":"code","ace118ec":"code","55555c75":"code","b6aeba23":"code","69b1f2e2":"code","08dbd72c":"code","195572c0":"code","598e6995":"code","4a7e8a4a":"code","085f19f3":"code","8e9a7646":"code","903fac52":"code","6e5c64c3":"code","736dc89e":"markdown","99d8620c":"markdown","7f8fe24a":"markdown","1adf0f85":"markdown","19b86bf3":"markdown","c1cde79d":"markdown","e887e977":"markdown","7d6c39d8":"markdown","2b2496d9":"markdown","40d46e87":"markdown","f2e3fd79":"markdown","66168d21":"markdown","8fa69333":"markdown","5165bd61":"markdown","ecee1f40":"markdown","49e5e384":"markdown","346a3379":"markdown","62a1d93a":"markdown","ea9ba6ac":"markdown","2e3208eb":"markdown","ba9c4dd2":"markdown","82a28660":"markdown","7a07f406":"markdown","4760134f":"markdown","b5d616c6":"markdown","9930e92f":"markdown","eed34818":"markdown","e5e2588a":"markdown","16f281d3":"markdown","a645a4a3":"markdown","56998052":"markdown"},"source":{"c89f3f9d":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n%matplotlib inline\n","7c880b1f":"df = pd.read_csv('..\/input\/noshowappointments\/KaggleV2-May-2016.csv') #read the data from .csv file","51529249":"df.info()","28c91057":"#Renaming the columns with a standard style.\na = ['patient_id', 'appointment_id', 'gender', 'scheduled_date_time',\n     'appointment_date_time', 'age', 'neighbourhood', 'scholarship', 'hypertension',\n     'diabetes', 'alcoholism', 'handicap', 'sms_received', 'no_show']\ndf.columns = a \n\n#Converting the data type of appionment_id and patient_id to string\ndf['patient_id'] = df['patient_id'].astype(int).astype(str)\ndf['appointment_id'] = df['appointment_id'].astype(str)","8ef9c0f1":"#Converting scheduled_day and appiontment_day to datetime objects\ndf['scheduled_date_time'] = pd.to_datetime(df['scheduled_date_time'])\ndf['appointment_date_time'] = pd.to_datetime(df['appointment_date_time'])\n\n#Adding the two columns for date without time\ndf['scheduled_date'] = df['scheduled_date_time'].dt.date\ndf['appointment_date'] = df['appointment_date_time'].dt.date\n\n#Adding a column with the name of the appiontment's day \ndf['appointment_date_day'] = df['appointment_date_time'].dt.strftime('%A')\n\n#Adding a column for the difference between the date of booking and the appiontment\ndf['difference_days'] = df['appointment_date'] - df['scheduled_date'] \ndf['difference_days'] = df['difference_days'] .dt.days\n","eb2ad99c":"df.head() #have a look at the head of data with new columns","2a676f85":"df.isnull().sum() #checking null Values","f0d55160":"df.describe()","8943839b":"#we notice a negative age \ndf = df.query('age >= 0') #deleting rows with ages below zero\n","e03459af":"# i am interested in handicap as a true or False Values i mean one or zero\n# i will replace the valuse > 1 to be 1\ndf.loc[df['handicap'] > 1 ,'handicap'] = 1","e2b1c1e9":"df.duplicated().sum() #cheching for duplicated rows.","7c019e19":"df.appointment_id.duplicated().sum() #checking for duplicated Appiontments.","69f74a2e":"#people has multiple appiontments at the same day is kind of duplicated date.\n#By logic, you can't be Shown and not-shown at the same day.\nduplicated = df[['patient_id','appointment_date']].duplicated()\nduplicated.sum()","bc478d18":"df=df[~duplicated] # '~' is used as a not gate","beec6151":"df[(df['appointment_date']<df['scheduled_date'])] #check for appointments date before the scheduled_date ","ddf3e44a":"df = df[~(df['appointment_date']<df['scheduled_date'])] #deleting the four appointments.\ndf.index = list(range(0,df.shape[0])) #reset_index\ndf","74aac6f9":"no_show = df.groupby('no_show').count().loc['Yes'][0]\ntotal_number = df.shape[0]\nratio= no_show\/total_number\nprint(\" no show cases = {}\\n the total cases = {}\\n the Ratio= {}\".format(no_show,total_number,ratio))","1e96aa3d":"absent = df.no_show == \"Yes\" #absent condition\nattended = df.no_show == \"No\" #attended condition\ndf_age_absent =  df[absent][['age','patient_id']].groupby('age').count() #total absent cases for every age\ndf_age_attended =  df[attended][['age','patient_id']].groupby('age').count() #total attended cases for every age\ndf_age = pd.merge(df_age_attended,df_age_absent,how='left',on='age') #merging absent and attended to one dataframe\nfigure_age, ax_age = plt.subplots()\nax_age.bar(df_age.index,df_age.patient_id_x,label='attended') #plotting the attended cases\nax_age.bar(df_age.index,df_age.patient_id_y,bottom=df_age.patient_id_x,label='No-Show') #plotting the absent u\nax_age.set_title('the number of patients for every year',size=15) #setting title\nax_age.set_xlabel('Age (years)',size=15) #setting X labels\nax_age.set_ylabel('number of appiontments',size=15) #setting Y labels\nax_age.set_xlim([-1,120]) # X limits\nax_age.set_ylim([0,4000]) # Y limits\nax_age.set_xticks(np.arange(0,116,5)) # x Ticks values\nfigure_age.set_figheight(10) #set figure height\nfigure_age.set_figwidth(20) #set figure width\nax_age.legend(loc='upper right',prop=dict(size=18)) #Add legend legend\nax_age.grid() #Add grid\nplt.show()","cb105fab":"df_age['ratio'] = df_age.patient_id_y \/ (df_age.patient_id_x+df_age.patient_id_y )\nfigure_age, ax_age_ratio = plt.subplots()\n\nax_age_ratio.bar(df_age.index,df_age.ratio,label='Ratio (No-Show\/Attend)')\nax_age_ratio.set_xlabel('Age (years)',size=20)\nax_age_ratio.set_ylabel('number of appiontments',size=20)\nax_age_ratio.set_title('the ratio of no-show for every year',size=15)\nax_age_ratio.set_xlabel('Age (years)',size=15) #setting X labels\nax_age_ratio.set_ylabel('Ratio',size=15) #setting Y labels\nax_age_ratio.set_xlim([-1,120]) # X limits\nax_age_ratio.set_ylim([0,.6]) # Y limits\nax_age_ratio.set_xticks(np.arange(0,116,5)) # x Ticks values\nfigure_age.set_figheight(10) #set figure height\nfigure_age.set_figwidth(20) #set figure width\nax_age_ratio.legend(loc='upper right',prop=(dict(size=18))) #Add legend legend\nax_age_ratio.grid() #Add grid\nplt.show()","6c33b6af":"''' function to plot two bars side to side and do a comparision '''\ndef plot_two_bars(df,column_name,x_labels=['',''],rotation=0):\n    \n    df_column = df.groupby(['no_show',column_name]).count() #grouping the data by column_name.\n    bar_values=[df_column.patient_id.loc['No'],df_column.patient_id.loc['Yes']] #preparing the data  for two barplots\n    figure ,ax = plt.subplots(2,1)\n    width = .25 #width of bar\n    bar_labels=['Attended','No Show']\n    for i in range(2): # loop to plot two barplots side to side\n        ax[0].bar(np.arange(0+i*width,2,1),bar_values[i],label=bar_labels[i],width=width)\n        ax[0].set_ylim(0,max(np.append(bar_values[0].values,(bar_values[1].values)))*1.15) \n        ax[0].set_xlim(-0.25,1.5)\n        ax[0].set_xticks([0.125,1.125])\n        ax[0].set_xticklabels(x_labels,rotation = rotation,size=16)\n        ax[0].set_ylabel('Number of cases',size=16)\n\n    bar_ratio = bar_values[1]\/(bar_values[0]+bar_values[1])\n    ax[1].bar ([0.25,1.25],bar_ratio,label='Ratio',width=.25) #calculating Ratio\n    ax[1].set_xlim(-.125,1.5)\n    ax[1].set_xticks([0.25,1.25])\n    ax[1].set_xticklabels(x_labels,size=16)\n    ax[1].grid()\n    ax[1].legend(loc='upper center',fontsize=14)\n    ax[0].grid()\n    ax[0].legend(fontsize=14)\n    ax[0].set_title('total cases based on {} '.format(column_name),size=15)\n    ax[1].set_title('ratio of no-show based on {}'.format(column_name),size=15)\n    ax[1].set_ylabel('Ratio',size=15)\n    ax[1].set_xlabel(column_name.upper(),size=15)\n    ax[0].set_xlabel(column_name.upper(),size=15)\n\n    figure.set_figheight(18)\n    figure.set_figwidth(10)\n    plt.show()\n    return bar_ratio\n ","cc91ba3a":"plot_two_bars(df,'gender',['Female','Male'])","ed071a40":"plot_two_bars(df,'hypertension',['Without \\n Hypertension','with Hypertension']) #the Hypertension","14ae160f":"plot_two_bars(df,'diabetes',['Without \\n Diabetes','with Diabetes']) #the Diabetes","0c5388fc":"plot_two_bars(df,'alcoholism',['Non Alcoholism','Alcoholism']) #the Alcholism","c1dceee5":"plot_two_bars(df,'handicap',['Without handicap','with handicap']) #the Handicap","93f157ea":"plot_two_bars(df,'sms_received',[\"Didn't received \\n SMS\",'Received SMS']) #Receving SMS","2061b3af":"df_neighbourhood_absent = df[absent].groupby('neighbourhood').count().patient_id\ndf_neighbourhood_total =df.groupby('neighbourhood').count().patient_id\ndf_neighbourhood_total = df_neighbourhood_total.sort_values(ascending=False)\ndf_neighbourhood_ratio = df_neighbourhood_absent \/ df_neighbourhood_total\ndf_neighbourhood = pd.merge(df_neighbourhood_total.to_frame(),df_neighbourhood_ratio.to_frame(),how='inner', left_index=True,\n    right_index=True,)\n\ndf_neighbourhood.columns = ['Total number','Absent Ratio']\nfigure_neighbourhood, ax_neighbourhood =plt.subplots()\n\nax_neighbourhood.bar(range(0,df_neighbourhood.shape[0]),df_neighbourhood['Total number'].values,label='Total number of patients')\n\n\nax_ratio = ax_neighbourhood.twinx()\nax_ratio.bar(range(0,df_neighbourhood.shape[0]),df_neighbourhood['Absent Ratio'].values,color = 'red',alpha = .5,label='Absent Ratio')\n\n\nax_neighbourhood.set_xticks(range(0,df_neighbourhood.shape[0]))\nax_neighbourhood.set_xticklabels(df_neighbourhood.index,rotation = 90)\nax_neighbourhood.set_ylabel('Total number of cases',size=15)\nax_neighbourhood.set_title('the absent Ratio and number of cases for evey neighbourhood',size=15)\nax_neighbourhood.grid()\n\nfigure_neighbourhood.set_figheight(10)\nfigure_neighbourhood.set_figwidth(20)\n\nax_neighbourhood.set_ylim(0,8000)\nax_ratio.set_ylim(0,1.15)\nax_ratio.set_ylabel('Ratio',size=15)\nax_neighbourhood.set_xlabel('neighbourhood',size=20)\nax_ratio.legend(loc='upper right',prop=dict(size=20))\nax_neighbourhood.legend(loc='upper left',prop=dict(size=20))\n","2881f556":"df_dayweek_absent = df[absent].groupby('appointment_date_day').count().patient_id\ndf_dayweek_total =df.groupby('appointment_date_day').count().patient_id\ndf_dayweek_ratio = df_dayweek_absent \/ df_dayweek_total \nfigure_day, ax_day =plt.subplots()\nax_day.bar(df_dayweek_ratio.index,df_dayweek_ratio.values,label='ratio')\nax_day.set_ylim(0,0.25)\nax_day.set_title('Ratio of absent for every day in the week',size=15)\nax_day.set_ylabel('Ratio')\nax_day.grid()\nax_day.legend()\nax_day.set_xlabel('Days',size=20)\nfigure_day.set_figheight(10)\nfigure_day.set_figwidth(10)","f0be8703":"df_appointment_date_absent = df[absent].groupby('appointment_date').count().patient_id\ndf_appointment_date_total =df.groupby('appointment_date').count().patient_id\ndf_appointment_date_ratio = df_appointment_date_absent \/ df_appointment_date_total \nfigure_date, ax_date =plt.subplots()\nax_date.bar(df_appointment_date_ratio.index,df_appointment_date_ratio.values,label='ratio')\nax_date.set_xticks(df_appointment_date_ratio.index)\nax_date.set_xticklabels(df_appointment_date_ratio.index,rotation = 90)\nax_date.set_ylim(0,0.25)\nax_date.set_ylabel('ratio',size=15)\nax_date.set_title('the absent ratio for every appiontment day',size=15)\nax_date.set_xlabel('The date of appiontments',size=15)\nax_date.legend()\nax_date.grid()\nfigure_date.set_figheight(10)\nfigure_date.set_figwidth(15)","3b9caa0e":"#group data with difference_days and select the absent\ndf_difference_days_absent = df[absent].groupby('difference_days').count().patient_id\n#group data with difference_days and select the total number of patients\ndf_difference_days_total =df.groupby('difference_days').count().patient_id\n#calculating the Ratio\ndf_difference_days_ratio = df_difference_days_absent \/ df_difference_days_total \n\n","313726b2":"# first i need to look at the total number of cases at every point \nfig,ax = plt.subplots()\nax.bar(df_difference_days_total.index,df_difference_days_total.values,label='number of cases')\nax.grid()\nax.set_ylabel('Number of cases',size=15)\nax.set_title('number of cases for every difference days between booking and appiontment',size=15)\nax.set_xlabel('difference days between booking and appiontment',size=15)\nax.legend()\nfig.set_figheight(10)\nfig.set_figwidth(15)","f782f81c":"# the differents days from zero to 50 almost represesnts the whole data\n# i wont be interested in the outliers \nfigure_date, ax_date =plt.subplots()\nax_date.bar(df_difference_days_ratio.index[0:50],df_difference_days_ratio.values[0:50],label='ratio')\nax_date.set_xticks(df_difference_days_ratio.index[0:50])\nax_date.set_xticklabels(df_difference_days_ratio.index[0:50])\nax_date.set_ylim(0,0.5)\nax_date.set_ylabel('ratio of absent',size=15)\nax_date.set_title('ratio of absent for every difference days between booking and appiontment',size=15)\nax_date.set_xlabel('difference days between booking and appiontment',size=15)\nax_date.legend()\nax_date.grid()\nfigure_date.set_figheight(10)\nfigure_date.set_figwidth(15)\n","ace118ec":"print('we get a ratio of no-show ={}.For {} patients. '.format(df_difference_days_ratio[0],df_difference_days_total[0]))","55555c75":"# DataFrame for people have more than one appiontments sorted by appointment_id \ndf_patients_more_than_one_app = df[df['patient_id'].duplicated(keep=False)].sort_values(by='appointment_id')\ndf_patients_more_than_one_app","b6aeba23":"# to make sure that the new data frame has at least 2 appiontments\ndf_patients_more_than_one_app.groupby('patient_id').count().min()","69b1f2e2":"# the 1st appiontment\ndf_patients_more_than_one_app_1st = df_patients_more_than_one_app[~df_patients_more_than_one_app.patient_id.duplicated()]\nprint('number of patients that have more than one appiontments = {}'.format(df_patients_more_than_one_app_1st.shape[0]))","08dbd72c":"# people didn't attend their first appiontment\ndf_patients_more_than_one_app_1st_absent = df_patients_more_than_one_app_1st.query('no_show==\"Yes\"')\ndf_patients_more_than_one_app_1st_absent_ids = df_patients_more_than_one_app_1st_absent.patient_id\nratio_1 = df_patients_more_than_one_app_1st_absent.shape[0]\/df_patients_more_than_one_app_1st.shape[0]\nprint ('Number of people non-shown in their first appionment = {}'.format(df_patients_more_than_one_app_1st_absent.shape[0]))\nprint('the percent of non shown for the first time = {}'.format(ratio_1))","195572c0":"#inner join the patients booked more than one appiontments with the patients ids were absent the first appiontment.\ndf_multi_app_with_1st_absent = pd.merge(df_patients_more_than_one_app,df_patients_more_than_one_app_1st_absent_ids.to_frame(),how='right',on='patient_id').sort_values(by='appointment_id')\n\n#checking that if i picked the first appiontment i will get 5230 with no_show = Yes\ndf_multi_app_with_1st_absent[~df_multi_app_with_1st_absent['patient_id'].duplicated()].groupby('no_show').count()","598e6995":"#df1 is the data frame for poeple have more than one appiontments + was absent for the first one  \n#but  the first appiontment is droped\ndf1 = df_multi_app_with_1st_absent[df_multi_app_with_1st_absent['patient_id'].duplicated()].sort_values(by='appointment_id')\n\n#df2 is the first appiontments of df1\n#df2 represent the second appiontments of people were absent in their first appiontment\ndf2 = df1[~df1['patient_id'].duplicated()]\n","4a7e8a4a":"df.query('patient_id==\"541337818642\"').sort_values(by='appointment_id')\n","085f19f3":"df.query('patient_id==\"934778858774877\"').sort_values(by='appointment_id')\n","8e9a7646":"df.query('patient_id==\"72796647284433\"').sort_values(by='appointment_id')\n","903fac52":"df2.groupby('no_show').count()","6e5c64c3":"ratio_2 = df2.groupby('no_show').count().loc[\"Yes\"][0] \/ 5230\nprint('the percent of non shown for the first time = {}'.format(ratio_1))\nprint('the percent of non shown for the second time = {}'.format(ratio_2))\n","736dc89e":"<a id='intro'><\/a>\n## Introduction\nPatients book appiontments with doctor, but when it's time to see the doctor -somehow- they don't show.\nIn Brazil around 20% of patient doesn't attend their appiontments with doctor after booking.\nwe are going to dive together into a hostpital dataset for more than 100K appointments from 29\/4\/2016 \ntill 6\/6\/2016 to discover what is the reason behind Not showing !?\n","99d8620c":"lets check random data and let's pray that we get patients with more than one appiontment and were absent in the first one","7f8fe24a":"it's almost with the same ratio 0.2 ","1adf0f85":"# \u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640","19b86bf3":"# Research Question 6\n# ( is it about the difference between the scheduled date and appiontment date !? )\nMaybe when the patient get an appiontment in the same day he will have a better chance to attend !? ","c1cde79d":"it's clear that the heighest number of non-shown and shown cases is for new born babies.\n\nBut we are more interested in the ratio of no-show cases with the total cases for every age.","e887e977":"No significant relation between one of the diseases and the so-show cases. ","7d6c39d8":"<a id='Assessing'><\/a>\n## Assessing Data","2b2496d9":"we hardly can say that MEN are more committed than Women.\nit's almost the same ratio.","40d46e87":"### Research Question 2  ( Is it about the gender ! )\nMaybe we a have a gender who is more committed than the other?\n\njoke(\"if we have a feminist here .. she will definitely choose Females\")\nmaybe our data has another opinion.","f2e3fd79":"<a id='Cleaning'><\/a>\n## Cleaning Data\n","66168d21":"### Research Question 6  ( is it about the date of appionment !? )\nDo we have a certian date with a high propability of no_show !?","8fa69333":"\n<a id='conclusions'><\/a>\n## Conclusions\n\nAfter analysing the whole data.\n\nI highly recommend that the main reason of no-show cases is that people didn't get an appiontment in the same date of booking.\npeople may lose their urge, forget the date or even become busy with another unpredicted events.\nas we get a ratio of no-show =0.04 . For 34277 cases. when they booked an appiontment in the same day.\n\nlimitations :\n* we have people booking more than one appiontments with in a really short time like 1 mins or few seconds.\n* patients with 0 age are they just new born babies !?\n* the distance from the hospital to the neighbourhood is not provided.\n","5165bd61":"No significant change :(\n\nBut anyway, the question worth the analysis","ecee1f40":"### Research Question 4  ( is it about the place where the patients come from !? )\n\n","49e5e384":"saturdays have a little bit higher percent of no show than other days but it's not a significant difference  ","346a3379":"it's easily to notice that we have an outlier at age = 115.\n\ncases above 45 maybe have smaller ratio than cases below 45.","62a1d93a":"that's really amazin ..\nlet's check the ratio of non-show for the second appiontment","ea9ba6ac":"### Research Question 3 ( Are people received messages likely to attend !? )\n","2e3208eb":"\n# Project: Investigate a Dataset (Medical Appointment No Shows)\n## Table of Contents\n<ul>\n<li><a href=\"#intro\">Introduction<\/a><\/li>\n<li><a href=\"#wrangling\">Data Wrangling<\/a><\/li>\n<li><a href=\"#eda\">Exploratory Data Analysis<\/a><\/li>\n<li><a href=\"#conclusions\">Conclusions<\/a><\/li>\n<\/ul>","ba9c4dd2":"<a id='wrangling'><\/a>\n## Data Wrangling\nIt's consist of three steps:\n<ul>\n<li><a href=\"#Gathering\">Gathering Date<\/a><\/li>\n<li><a href=\"#Assessing\">Assesing Data<\/a><\/li>\n<li><a href=\"#Cleaning\">Cleaning Data<\/a><\/li>\n<\/ul>\n\n","82a28660":"# This is The Most Satisfaing plot ! Finally we have found a real reasonable relation between the no-show and something hidden in the data\n","7a07f406":"### Research Question 5  ( is it about the day of the week !? )\nDo we have a certian day in the week with a high propability of no_show !?","4760134f":"now i am interested in the same patients when they book the second appiontment.\n\nyou may have to pay attention to these steps:\n\n1- i will go back the dataframe for people have more than one appiontments.\n\n2- i will join this data frame with the '5230' patients ids for people didn't attend their first appiontment\n\n3- i will Keep the the duplicated values.\n\n4- i will keep the first oppiontment for the duplicated values and it will be represented the second appiontmets becasue the data frame is sorted by appiontment_id\n","b5d616c6":"<a id='eda'><\/a>\n## Exploratory Data Analysis\nNow we have a cleaned data that we can work on.\nLets invistgate what is hidden behind non-shown patients.\n\nwhat is the actual precent of No-show patient ?\n","9930e92f":"# One more interested Question. (If a patient doesn't attend his first appiontment. but he booked another one in another day. \nwhat is the chance of not attending the second appionment !?\n\nis it high or low !?","eed34818":"The data set provides us with 14 columns:\n\n1-Patient_Id: Identification of a patient.\n\n2-Appointment_ID: Identification of each appointment\n\n3-Gender: Male or Female . Female is the greater proportion, woman takes way more care of they health in comparison to man.\n\n4-Scheduled_Date: The day someone called or registered the appointment, this is before appointment of course.\n\n5-Appiontment_Date: The day of the actuall appointment, when they have to visit the doctor.\n\n6-Age: How old is the patient.\n\n07-Neighbourhood: Where the appointment takes place.\n\n8-Scholarship: True of False and it's kinda of health care program.\n    \n09-Hyper_tension:True or False.\n\n10 Diabetes: True or False.\n\n11-Alcoholism: True or False.\n\n12-Handicap: True or False.\n\n13-SMS_received:1 or more messages sent to the patient.\n\n14-No-show: True or False. it's True when the patient didn't attend.\n","e5e2588a":"<a id='Gathering'><\/a>\n## Gathering Data:\nwe have the csv file of data, all we have is to read it to a DataFrame","16f281d3":"### Research Question 2  ( Is it about one of the diseases ! )\n","a645a4a3":"oops. sounds like the more you give attention the more you get ignored :D ","56998052":"\n### Research Question 1 ( Is it about the age !?)\ni mean, do we have a certain age with a high percent of non-shown !? \n\nfirst, plotting the number of attended and absent cases for every age."}}