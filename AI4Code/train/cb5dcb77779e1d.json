{"cell_type":{"90c95682":"code","42cec80e":"code","0d004ccd":"code","a4c60e79":"code","e7333ade":"code","f8348e00":"code","471f8804":"code","fb048f0e":"code","92bffc2c":"code","42abd9de":"code","558389e7":"code","1b362ca2":"code","15155035":"code","1236c2ea":"code","2a1d0092":"code","813dcfa0":"code","bfc32b59":"code","e347baa2":"code","fff16e4b":"code","5d98c813":"code","0b50f25c":"code","44d414f3":"code","7eec9020":"code","2520bbad":"code","55ea905e":"code","a26029fb":"code","00a825f6":"code","72e8716c":"code","d48c4a4a":"code","23e131f6":"code","6558f211":"code","85a244c1":"code","617203da":"code","da69e379":"code","0cc05a0f":"code","9fc11cf7":"code","20b7a38a":"code","2af7c8f0":"code","62a5671e":"code","00e2fba4":"code","f634ce2c":"code","c1cfd7b8":"markdown","ef5cbd01":"markdown","501247b3":"markdown","52f0eb92":"markdown","0447d887":"markdown","ac4ce2f2":"markdown","891205a8":"markdown","e459c849":"markdown","aaeed88c":"markdown","09d5fbb6":"markdown","75a7ee03":"markdown","d5e2203d":"markdown","de355cf5":"markdown","ff507743":"markdown","386275a3":"markdown"},"source":{"90c95682":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","42cec80e":"import pandas as pd\nnames = ['khanh', 'trang', 'nga', 'nhung', 'linh']\nbirths = [9, 10, 7, 15, 21]\n\ndatalist = list(zip(names, births))\n\ndataset = pd.DataFrame(datalist, columns = ['Name', 'Birth'])\ndataset","0d004ccd":"dataset = pd.read_csv('https:\/\/raw.githubusercontent.com\/phamdinhkhanh\/LSTM\/master\/shampoo.csv', header = 0, index_col = 0, sep = '\\t')\ndataset.head()","a4c60e79":"dataset.dtypes","e7333ade":"dataset = pd.read_csv('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/iris.csv', header = 0, sep = ',')\ndataset.head()","f8348e00":"# K\u00edch th\u01b0\u1edbc d\u1eef li\u1ec7u\ndataset.shape","471f8804":"# l\u1ea5y d\u1eef li\u1ec7u c\u00e1c d\u00f2ng t\u1eeb 10:15 v\u00e0 c\u1ed9t 2:3.\ndataset.iloc[10:16, 2:4]","fb048f0e":"# l\u1ea5y d\u1eef li\u1ec7u t\u1eeb to\u00e0n b\u1ed9 c\u00e1c c\u1ed9t c\u1ee7a d\u00f2ng \u0111\u1ea7u ti\u00ean\ndataset.iloc[1, :]","92bffc2c":"# l\u1ea5y d\u1eef li\u1ec7u t\u1eeb 3 d\u00f2ng \u0111\u1ea7u ti\u00ean.\ndataset.iloc[:3, :]","42abd9de":"# l\u1ea5y d\u1eef li\u1ec7u t\u1eeb 3 d\u00f2ng cu\u1ed1i c\u00f9ng\ndataset.iloc[-3:, :]","558389e7":"# l\u1ea5y d\u1eef li\u1ec7u t\u1eeb 3 c\u1ed9t \u0111\u1ea7u ti\u00ean\ndataset.iloc[:, :3]","1b362ca2":"# l\u1ea5y d\u1eef li\u1ec7u t\u1eeb 3 c\u1ed9t cu\u1ed1i c\u00f9ng\ndataset.iloc[:, -3:]","15155035":"# L\u1ea5y to\u00e0n b\u1ed9 c\u00e1c c\u1ed9t c\u1ee7a dataset.\ncols = dataset.columns\ncols","1236c2ea":"# L\u1ea5y c\u00e1c c\u1ed9t s\u00f4 2:3\ntake_cols = cols[2:4]\ntake_cols","2a1d0092":"# L\u1ea5y c\u00e1c c\u1ed9t d\u1ee5a tr\u00ean t\u00ean c\u1ed9t.\ndataset[take_cols].head()","813dcfa0":"melt_data = dataset.melt(['Name'])\nmelt_data.head()","bfc32b59":"# Mu\u1ed1n thay \u0111\u1ed5i t\u00ean m\u1eb7c \u0111\u1ecbnh variable v\u00e0 value\ndataset.melt(['Name'], var_name = ['measurement'], value_name = 'length').head()","e347baa2":"dataset.describe()","fff16e4b":"# L\u1ea5y trung b\u00ecnh, min, max, \u0111\u1ed9 l\u1ec7ch chu\u1ea9n, s\u1ed1 quan s\u00e1t, median\nprint('mean: -----------------\\n', dataset.mean())\nprint('min: -----------------\\n', dataset.min())\nprint('max: -----------------\\n', dataset.max())\nprint('std: -----------------\\n', dataset.std())\nprint('count: -----------------\\n', dataset.count())\nprint('median: -----------------\\n', dataset.median())","5d98c813":"# Gi\u1ea3 s\u1eed l\u1ea5y 5 d\u00f2ng d\u1eef li\u1ec7u \u0111\u1ea7u ti\u00ean t\u1eeb dataset v\u00e0 thay th\u1ebf c\u1ed9t th\u1ee9 2 b\u1eb1ng missing t\u1ea1i d\u00f2ng 4 v\u00e0 5\nimport numpy as np\n\ndatana = dataset.iloc[:5, :].copy()\ndatana.iloc[3:,1] = np.nan\ndatana","0b50f25c":"# drop c\u00e1c d\u00f2ng missing\ndatana.dropna()","44d414f3":"# Ki\u1ec3m tra d\u1eef li\u1ec7u missing\ndatana.isna()","7eec9020":"# L\u1ea5y trung b\u00ecnh c\u1ed9t 2\nmean = datana.iloc[:, 1].mean()","2520bbad":"# Thay th\u1ebf c\u00e1c d\u1eef li\u1ec7u missing b\u1eb1ng trung b\u00ecnh \ndatana.fillna(mean)","55ea905e":"sum_data = dataset.groupby(['Name']).sum()\nsum_data","a26029fb":"# Kh\u00f4ng mu\u1ed1n bi\u1ebfn Name th\u00e0nh index\ndataset.groupby(['Name'], as_index = False).sum()","00a825f6":"pd.pivot_table(dataset, \n               values = ['SepalLength', 'SepalWidth'], \n               index = ['Name'], \n               aggfunc = sum)","72e8716c":"# N\u1ebfu SepalLength ta mu\u1ed1n t\u00ednh sum v\u00e0 SepalWidth ta mu\u1ed1n t\u00ednh mean\npd.pivot_table(dataset, \n               values = ['SepalLength', 'SepalWidth'], \n               index = ['Name'], \n               aggfunc = {'SepalLength': sum,\n                         'SepalWidth': np.mean})","d48c4a4a":"# Bi\u1ec3u \u0111\u1ed3 line\ndataset.plot()","23e131f6":"# Bi\u1ec3u \u0111\u1ed3 line. Mu\u1ed1n chia th\u00e0nh c\u00e1c chu\u1ed7i ri\u00eang l\u1ebb.\ndataset.plot(subplots = True, figsize = (6, 10))","6558f211":"# Bi\u1ec3u \u0111\u1ed3 bar\ndataset.iloc[:5, :4].plot.bar()","85a244c1":"# Ho\u1eb7c\ndataset.iloc[5, :4].plot(kind = 'bar')","617203da":"# Bar xoay ngang\ndataset.iloc[5, :4].plot(kind = 'barh')","da69e379":"# Bi\u1ec3u \u0111\u1ed3 piece\ndataset.iloc[5, :4].plot(kind = 'pie', autopct = '%.2f')","0cc05a0f":"# Bi\u1ec3u \u0111\u1ed3 boxplot\ndataset.iloc[:, :4].plot(kind = 'box')","9fc11cf7":"# Bi\u1ec3u \u0111\u1ed3 area\ndataset.iloc[:, :4].plot(kind = 'area')","20b7a38a":"# Bi\u1ec3u \u0111\u1ed3 area kh\u00f4ng ch\u1ed3ng.\ndataset.iloc[:, :4].plot(kind = 'area', stacked = False)","2af7c8f0":"# Bi\u1ec3u \u0111\u1ed3 scatter. L\u01b0u \u00fd c\u1ea7n 2 chi\u1ec1u x, y\ndataset.iloc[:, :2].plot(kind = 'scatter', x = 'SepalLength', y = 'SepalWidth')","62a5671e":"# Bi\u1ec3u \u0111\u1ed3 hexagonal. C\u1ea7n tr\u1ee5c x, y\ndataset.iloc[:, :2].plot(kind = 'hexbin', x = 'SepalLength', y = 'SepalWidth')","00e2fba4":"# Bi\u1ec3u \u0111\u1ed3 density\ndataset.iloc[:, :2].plot(kind = 'kde')","f634ce2c":"# Bi\u1ec3u \u0111\u1ed3 histogram\ndataset.iloc[:, :2].plot(kind = 'hist', bins = 10)","c1cfd7b8":"# 1. Gi\u1edbi thi\u1ec7u\n\npandas l\u00e0 m\u1ed9t th\u01b0 vi\u1ec7n l\u01b0u tr\u1eef v\u00e0 x\u1eed l\u00fd d\u1eef li\u1ec7u d\u1ea1ng b\u1ea3ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng ph\u1ed5 bi\u1ebfn trong python. C\u00e1c \u0111\u1eb7c tr\u01b0ng c\u1ee7a pandas \u0111\u00f3 l\u00e0:\n\n* Truy v\u1ea5n v\u00e0 x\u1eed l\u00fd d\u1eef li\u1ec7u nhanh b\u1edfi intergrated indexing.\n* T\u00edch h\u1ee3p v\u1edbi nhi\u1ec1u h\u00e0m ch\u1ee9c n\u0103ng data wragling v\u00e0 manipulation.\n* Handle missing data.\n* Th\u1ed1ng k\u00ea d\u1eef li\u1ec7u theo c\u00e1c chi\u1ec1u nh\u1edd c\u00e1c h\u00e0m groupby v\u00e0 pivotable.\n* Merge v\u00e0 join b\u1ea3ng c\u00f3 m\u1ed1i quan h\u1ec7 d\u1eef li\u1ec7u.\n* L\u01b0u tr\u1eef d\u1eef li\u1ec7u chu\u1ed7i th\u1eddi gian.\n* Reshape l\u1ea1i d\u1eef li\u1ec7u.\n* Timeseries.\n\n# 2. Kh\u1edfi t\u1ea1o b\u1ea3ng\n\n## 2.1. Kh\u1edfi t\u1ea1o b\u1ea3ng t\u1eeb list.\n\n\n","ef5cbd01":"\n\n## 3.2. S\u1eed d\u1ee5ng t\u00ean c\u1ed9t.","501247b3":"## 4.2. X\u1eed l\u00fd d\u1eef li\u1ec7u missing.\npandas cho ph\u00e9p ta l\u00e0m vi\u1ec7c v\u1edbi c\u00e1c d\u1eef li\u1ec7u missing nh\u01b0 x\u00f3a b\u1ecf, thay th\u1ebf th\u00f4ng qua c\u00e1c h\u00e0m `dropna, fillna`.","52f0eb92":"## 2.2. \u0110\u1ecdc t\u1eeb csv file.\n\nC\u00fa ph\u00e1p chung\n`pd.read_csv(link, header, index_col, sep, encoding)`\nTrong \u0111\u00f3:\n\nlink: l\u00e0 \u0111\u01b0\u1eddng d\u1eabn t\u1edbi file, c\u00f3 th\u1ec3 l\u00e0 m\u1ed9t link tr\u00ean internet. \n\nheader: th\u1ee9 t\u1ef1 d\u00f2ng l\u00e0m ti\u00eau \u0111\u1ec1.\n\nindex_col: th\u1ee9 t\u1ef1 c\u1ed9t l\u00e0m index.\n\nsep: lo\u1ea1i delimiter ng\u0103n c\u00e1ch gi\u1eefa c\u00e1c tr\u01b0\u1eddng. Kho\u1ea3ng tr\u1eafng l\u00e0 '\\t', d\u1ea5u ph\u1ea3y l\u00e0 ','.\n\nencoding: lo\u1ea1i m\u00e3 encoding \u0111\u1ec3 \u0111\u1ecdc d\u1eef li\u1ec7u. \n","0447d887":"Ta nh\u1eadn th\u1ea5y ph\u1ea3i c\u1ed9ng th\u00eam ch\u1ec9 s\u1ed1 cu\u1ed1i c\u00f9ng 1 \u0111\u01a1n v\u1ecb b\u1edfi c\u00e1c index t\u1eeb $i:(j+1)$ s\u1ebd l\u1ea5y c\u00e1c c\u1ed9t t\u1eeb $i, i+1,..., j$. \u0110\u00e2y c\u0169ng l\u00e0 c\u00e1ch \u0111\u00e1nh s\u1ed1 chung c\u1ee7a index trong python.\nL\u01b0u \u00fd khi mu\u1ed1n l\u1ea5y d\u1eef li\u1ec7u t\u1eeb to\u00e0n b\u1ed9 1 d\u00f2ng ho\u1eb7c m\u1ed9t c\u1ed9t ta ch\u1ec9 c\u1ea7n \u0111\u1eb7t k\u00ed hi\u1ec7u ':' ho\u1eb7c '...' m\u00e0 kh\u00f4ng c\u1ea7n khai b\u00e1o index. Python s\u1ebd t\u1ef1 hi\u1ec3u v\u00e0 l\u1ea5y to\u00e0n b\u1ed9 index hi\u1ec7n c\u00f3.","ac4ce2f2":"Nh\u01b0 v\u1eady ch\u00fang ta \u0111\u00e3 h\u00ecnh dung ra \u0111\u01b0\u1ee3c ch\u1ee9c n\u0103ng c\u1ee7a h\u00e0m `melt` l\u00e0 l\u00e0m g\u1ecdn d\u1eef li\u1ec7u theo c\u00e1ch th\u1ed1ng k\u00ea c\u00e1c measurement theo dimension. C\u00e1c dimension \u0111\u01b0\u1ee3c \u0111\u01b0a v\u00e0o trong h\u00e0m `melt`.","891205a8":"# 4. Data wragling\n## 4.1. Th\u1ed1ng k\u00ea m\u00f4 t\u1ea3 trong pandas\nS\u1eed d\u1ee5ng h\u00e0m `describe` ta c\u00f3 th\u1ec3 thu \u0111\u01b0\u1ee3c m\u1ed9t s\u1ed1 th\u1ed1ng k\u00ea m\u00f4 t\u1ea3 trong pandas v\u1ec1 trung b\u00ecnh, ph\u01b0\u01a1ng sai, c\u00e1c kho\u1ea3ng t\u1ee9 ph\u00e2n v\u1ecb, min, max.","e459c849":"## 3.3. Reshape d\u1eef l\u1ec7u\n### 3.3.1. L\u00e0m g\u1ecdn d\u1eef li\u1ec7u b\u1eb1ng h\u00e0m melt.\nGi\u1ea3 s\u1eed d\u1eef li\u1ec7u c\u1ee7a b\u1ea1n g\u1ed3m c\u00e1c lo\u00e0i hoa v\u1edbi r\u1ea5t nhi\u1ec1u c\u00e1c ph\u00e9p \u0111o l\u01b0\u1eddng \u0111\u1ed9 r\u1ed9ng v\u00e0 d\u00e0i c\u1ee7a t\u00e1n v\u00e0 \u0111\u00e0i hoa. Ta mu\u1ed1n d\u1eef li\u1ec7u g\u1ecdn h\u01a1n v\u1edbi 1 tr\u01b0\u1eddng variable th\u1ec3 hi\u1ec7n ch\u1ec9 s\u1ed1 \u0111o l\u01b0\u1eddng (ch\u00ednh l\u00e0 t\u00ean c\u00e1c tr\u01b0\u1eddng numerical c\u1ee7a b\u1ea3ng g\u1ed1c) v\u00e0 tr\u01b0\u1eddng th\u1ec3 hi\u1ec7n gi\u00e1 tr\u1ecb c\u1ee7a ph\u00e9p \u0111o l\u01b0\u1eddng. Ta s\u1ebd s\u1eed d\u1ee5ng h\u00e0m melt nh\u01b0 sau:","aaeed88c":"## 5.2.  S\u1eed d\u1ee5ng pivot_table\nC\u00fa ph\u00e1p chung:\n\n`pd.pivot_table(dataset, values = [], index = [], aggfunc = np.sum)`\n\ntrong \u0111\u00f3:\n\ndataset l\u00e0 b\u1ea3ng d\u1eef li\u1ec7u.\n\nvalues l\u00e0 c\u00e1c c\u1ed9t \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 t\u00ednh to\u00e1n theo h\u00e0m aggfunc. Th\u00f4ng th\u01b0\u1eddng l\u00e0 c\u00e1c bi\u1ebfn numerical.\n\nindex l\u00e0 c\u00e1c c\u1ed9t \u0111\u01b0\u1ee3c groupby. Th\u00f4ng th\u01b0\u1eddng l\u00e0 c\u00e1c bi\u1ebfn categorical.\n\naggfunc l\u00e0 h\u00e0m s\u1ed1 s\u1eed d\u1ee5ng \u0111\u1ec3 t\u00ednh c\u00e1c c\u1ed9t \u0111\u01b0\u1ee3c qui \u0111\u1ecbnh trong values.","09d5fbb6":"# 5. Th\u1ed1ng k\u00ea d\u1eef li\u1ec7u\n## 5.1. S\u1eed d\u1ee5ng groupby\n\n","75a7ee03":"L\u01b0u data v\u00e0o \u1ed5 c\u1ee9ng.\n\n`dataset.to_csv('filename')`","d5e2203d":"Ki\u1ec3m tra \u0111\u1ecbnh d\u1ea1ng c\u00e1c tr\u01b0\u1eddng trong data frame.","de355cf5":"# 6. V\u1ebd bi\u1ec3u \u0111\u1ed3\nTrong pandas t\u00edch h\u1ee3p s\u1eb5n m\u1ed9t s\u1ed1 bi\u1ec3u \u0111\u1ed3 nh\u01b0 line, bar, piece, density, histogram, ... \u0111\u01b0\u1ee3c k\u1ebf th\u1eeba t\u1eeb matplotlib. Nh\u1eefng bi\u1ec3u \u0111\u1ed3 nhanh c\u00f3 c\u00fa ph\u00e1p r\u1ea5t g\u1ecdn nh\u01b0 sau:\n\n* Bi\u1ec3u \u0111\u1ed3 line: `dataset.plot()\n\n* Bi\u1ec3u \u0111\u1ed3 bar: `dataset.plot.bar() ho\u1eb7c * Bi\u1ec3u \u0111\u1ed3 bar: `dataset.plot.barh() (cho d\u1ea1ng xoay ngang).\n\n* Bi\u1ec3u \u0111\u1ed3 piece:  `dataset.plot.pie()`\n\n* Bi\u1ec3u \u0111\u1ed3 scatter: `dataset.plot.scatter()`\n\n* Bi\u1ec3u \u0111\u1ed3 hexagon: `dataset.plot.hexbin()`\n\n* Bi\u1ec3u \u0111\u1ed3 area: `dataset.plot.area()`\n\n* Bi\u1ec3u \u0111\u1ed3 boxplot: `dataset.plot.box()`\n\nHo\u1eb7c ta c\u00f3 th\u1ec3 \u0111\u01b0a lo\u1ea1i bi\u1ec3u \u0111\u1ed3 v\u00e0o trong h\u00e0m plot th\u00f4ng qua khai b\u00e1o tham s\u1ed1 kind: `dataset.plot(kind = 'plottype')\n`\n","ff507743":"Ngo\u00e0i ra ta c\u00f3 th\u1ec3 l\u1ea5y \u0111\u01b0\u1ee3c c\u00e1c gi\u00e1 tr\u1ecb n\u00e0y th\u00f4ng qua c\u00e1c h\u00e0m `min, max, std, count, median, sum,...` g\u1ecdi tr\u1ef1c ti\u1ebfp t\u1eeb dataset","386275a3":"# 3. Truy c\u1eadp v\u00e0 reshape d\u1eef li\u1ec7u.\n# 3.1. S\u1eed d\u1ee5ng iloc.\niloc cho ph\u00e9p ta l\u1ef1a ch\u1ecdn c\u00e1c c\u1ed9t v\u00e0 dong theo index m\u00e0 kh\u00f4ng c\u1ea7n ph\u1ea3i n\u00eau r\u00f5 t\u00ean d\u00f2ng v\u00e0 c\u1ed9t.\n\nC\u00fa ph\u00e1p: `dataset.iloc[idx_row, idx_col]`"}}