{"cell_type":{"e0391487":"code","561cd7a7":"code","ac99afd7":"code","6f475fb9":"code","e1cef099":"markdown","68af2f97":"markdown"},"source":{"e0391487":"import pandas as pd","561cd7a7":"#Loading data\ntrain_df = pd.read_csv('..\/input\/data-without-drift\/train_clean.csv')\ntest_df = pd.read_csv('..\/input\/data-without-drift\/test_clean.csv')","ac99afd7":"from pykalman import KalmanFilter\n\ndef Kalman1D(observations,damping=1):\n    # To return the smoothed time series data\n    observation_covariance = damping\n    initial_value_guess = observations[0]\n    transition_matrix = 1\n    transition_covariance = 0.1\n    initial_value_guess\n    \n    kf = KalmanFilter(\n            initial_state_mean=initial_value_guess,\n            initial_state_covariance=observation_covariance,\n            observation_covariance=observation_covariance,\n            transition_covariance=transition_covariance,\n            transition_matrices=transition_matrix\n        )\n    \n    pred_state, state_cov = kf.smooth(observations)\n    return pred_state\n\n\n# Kalman Filter\nobservation_covariance = .0015\ntrain_df['signal'] = Kalman1D(train_df.signal.values,observation_covariance)\ntest_df['signal'] = Kalman1D(test_df.signal.values,observation_covariance)","6f475fb9":"train_df.to_csv(\"train.csv\", index=False, float_format=\"%.4f\")\ntest_df.to_csv(\"test.csv\", index=False, float_format=\"%.4f\")","e1cef099":"Kalman filter from TJ Klein's notebook [A signal processing approach - Kalman Filtering](https:\/\/www.kaggle.com\/teejmahal20\/a-signal-processing-approach-kalman-filtering)","68af2f97":"Clean data from Chris Deotte's dataset [Data Without Drift](https:\/\/www.kaggle.com\/cdeotte\/data-without-drift)"}}