{"cell_type":{"f68fbef1":"code","ec6f8894":"code","a25438eb":"code","a2d2c324":"code","5d54ce6e":"code","f8f7434b":"code","146afb76":"code","8ad76298":"code","cd026f23":"code","ac2706fb":"code","e70dc8cf":"code","ef8d50d6":"code","b528c143":"code","5aacdfb8":"code","950b8684":"code","dccb5fcc":"code","ad341fa2":"code","6e747656":"code","36aa74d9":"code","aa778b09":"code","ddbfba6f":"code","2c53dba9":"code","f80584bd":"code","4187d205":"code","105e6a94":"code","1ccf5783":"code","fe5401b9":"code","1447079f":"code","c65a7b52":"code","6f7eb067":"code","f4433f08":"code","6b80c6e1":"code","b15c092d":"code","b034ae4f":"code","34d7af50":"code","89db7336":"code","cb7cec03":"code","26af3e8c":"code","45cf01b4":"code","0ebce51c":"code","bd1dcc9e":"code","6d7feaab":"code","ce8cbaa8":"code","eb61e76f":"code","8f323c88":"code","a74c4b36":"code","91a044bd":"code","e69b94a5":"code","0f87654b":"code","9a43dda0":"markdown","b65a1315":"markdown","965fefe2":"markdown","8e51d0e0":"markdown","531572b1":"markdown","f700674d":"markdown","0508f05f":"markdown","0e77ca13":"markdown","83c4cd70":"markdown","50ce9e33":"markdown","bb0e8bd9":"markdown","7edc3aaa":"markdown","fc9291e5":"markdown","a4f57703":"markdown","8a686745":"markdown","a169272f":"markdown","eddbbd33":"markdown","607dd9e9":"markdown","af9b236d":"markdown","82c253f4":"markdown","d046a72c":"markdown","74ccc66a":"markdown","7ccb59d6":"markdown","336294bd":"markdown","f2e07939":"markdown","0144ff9d":"markdown","6b521e8c":"markdown","535a229b":"markdown","8bf133fb":"markdown","a2fa46b0":"markdown","97124ef9":"markdown","121a5a69":"markdown","c4a3fc29":"markdown","d1a6841b":"markdown","77423510":"markdown","ca16742a":"markdown","6d41abc3":"markdown"},"source":{"f68fbef1":"import numpy as np \nimport pandas as pd \nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly\nimport re\nimport os\nprint(\"\")\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nprint('modules are imported')","ec6f8894":"df_20 = pd.read_csv('\/kaggle\/input\/fifa-20-complete-player-dataset\/players_20.csv', error_bad_lines=False)","a25438eb":"df_20.head()","a2d2c324":"df_20.shape","5d54ce6e":"df_20.columns","f8f7434b":"useless_columns = ['dob','sofifa_id', 'player_url', 'long_name', 'body_type', 'real_face', \n                   'loaned_from', 'nation_position', 'nation_jersey_number']","146afb76":"df_20  = df_20.drop(useless_columns,axis=1)","8ad76298":"df_20.head()","cd026f23":"df_20['BMI'] = df_20['weight_kg'] \/ (df_20['height_cm'] \/100)**2","ac2706fb":"df_20.head()","e70dc8cf":"df_20[['short_name','player_positions']]","ef8d50d6":"new_player_pos = df_20['player_positions'].str.get_dummies(sep =', ').add_prefix('Position_')\nnew_player_pos.head()","b528c143":"df_20 = pd.concat([df_20,new_player_pos], axis=1)","5aacdfb8":"df_20.head()","950b8684":"df_20 = df_20.drop('player_positions', axis=1)","dccb5fcc":"df_20.head()","ad341fa2":"columns = ['ls', 'st', 'rs', 'lw', 'lf', 'cf', 'rf', 'rw', 'lam', 'cam', 'ram',\n       'lm', 'lcm', 'cm', 'rcm', 'rm', 'lwb', 'ldm', 'cdm', 'rdm', 'rwb', 'lb',\n       'lcb', 'cb', 'rcb', 'rb']","6e747656":"df_20[columns].head()","36aa74d9":"\nfor col in columns:\n    df_20[col] = df_20[col].str.split('+', n=1, expand= True)[0]\n\ndf_20[columns].head()","aa778b09":"df_20[columns] = df_20[columns].fillna(0)","ddbfba6f":"df_20[columns] = df_20[columns].astype(int)","2c53dba9":"df_20[columns].head()","f80584bd":"columns2 = [\"dribbling\", \"defending\", \"physic\", \"passing\", \"shooting\", \"pace\"]\ndf_20[columns2]","4187d205":"df_20[columns2].isna().sum()","105e6a94":"for c in columns2:\n    df_20[c] = df_20[c].fillna(df_20[c].median())\ndf_20[columns2]","1ccf5783":"df_20 =df_20.fillna(0)","fe5401b9":"df_20.isnull().sum()","1447079f":"#using plotly\nfig = go.Figure(\n    \n    data = go.Scatter(\n        x= df_20['overall'],\n        y= df_20['value_eur'],\n        mode= 'markers',\n        marker = dict(\n            size = 10,\n            color = df_20['age'],\n            showscale = True\n        ),\n        text = df_20['short_name'])\n)\n    \nfig.update_layout(title=' Scatter Plot ( colored by  age) year 2020 - Overall ratings vs market value in euro'\n                  , xaxis_title = 'Overall Rating'\n                  , yaxis_title= 'Market Value in Euros')\nfig.show()","c65a7b52":"fig = px.pie(df_20, names = 'preferred_foot', title= '% of players preferred foot') \nfig.show()","6f7eb067":"fig = px.histogram(df_20, x= 'age' , title= 'Histogram of Players Ages')\nfig.show()","f4433f08":"df_15 = pd.read_csv(\"\/kaggle\/input\/fifa-20-complete-player-dataset\/players_15.csv\", error_bad_lines=False)\ndf_16 = pd.read_csv(\"\/kaggle\/input\/fifa-20-complete-player-dataset\/players_16.csv\", error_bad_lines=False)\ndf_17 = pd.read_csv(\"\/kaggle\/input\/fifa-20-complete-player-dataset\/players_17.csv\", error_bad_lines=False)\ndf_18 = pd.read_csv(\"\/kaggle\/input\/fifa-20-complete-player-dataset\/players_18.csv\", error_bad_lines=False)\ndf_19 = pd.read_csv(\"\/kaggle\/input\/fifa-20-complete-player-dataset\/players_19.csv\", error_bad_lines=False)","6b80c6e1":"attributes = ['Pace','Shooting','Passing','Dribbling','Defending','Physic','Overall'] ","b15c092d":"def playergrowth(name):\n    \n    data20 = df_20[df_20.short_name.str.startswith(name)]\n    data19 = df_19[df_19.short_name.str.startswith(name)]\n    data18 = df_18[df_18.short_name.str.startswith(name)]\n    data17 = df_17[df_17.short_name.str.startswith(name)]\n    data16 = df_16[df_16.short_name.str.startswith(name)]\n    data15 = df_15[df_15.short_name.str.startswith(name)]\n    \n    \n    trace0 = go.Scatterpolar(\n        \n        r = [ data20['pace'].values[0], data20['shooting'].values[0], data20['passing'].values[0]\n           , data20['dribbling'].values[0],  data20['defending'].values[0], data20['physic'].values[0]\n           , data20['overall'].values[0]]\n        ,\n        theta = attributes,\n        fill = 'toself',\n        name = '2020'\n    \n    )\n    trace1 = go.Scatterpolar(\n        \n        r=[data19['pace'].values[0], data19['shooting'].values[0],\n           data19['passing'].values[0] , data19['dribbling'].values[0],  \n           data19['defending'].values[0], \n           data19['physic'].values[0]  , data19['overall'].values[0] ],\n        theta = attributes,\n        fill = 'toself',\n        name = '2019'\n    \n    )\n    \n    trace2 = go.Scatterpolar(\n        \n        r = [data18['pace'].values[0], data18['shooting'].values[0], \n             data18['passing'].values[0], data18['dribbling'].values[0], \n             data18['defending'].values[0], data18['physic'].values[0]\n           , data18['overall'].values[0] ],\n        theta = attributes,\n        fill = 'toself',\n        name = '2018'\n    \n    )\n    trace3 = go.Scatterpolar(\n        \n        r  = [ data17['pace'].values[0], data17['shooting'].values[0], data17['passing'].values[0]\n           , data17['dribbling'].values[0],  data17['defending'].values[0], data17['physic'].values[0]\n           , data17['overall'].values[0] ],\n        theta = attributes,\n        fill = 'toself',\n        name = '2017'\n    \n    )\n    trace4 = go.Scatterpolar(\n        \n        r = [data16['pace'].values[0], data16['shooting'].values[0], data16['passing'].values[0]\n           , data16['dribbling'].values[0],  data16['defending'].values[0], data16['physic'].values[0]\n           , data16['overall'].values[0] ],\n        theta = attributes,\n        fill = 'toself',\n        name = '2016'\n    \n    )\n    \n    trace5 = go.Scatterpolar(\n        \n        r = [data15['pace'].values[0], data15['shooting'].values[0], data15['passing'].values[0]\n           , data15['dribbling'].values[0],  data15['defending'].values[0], data15['physic'].values[0]\n           , data15['overall'].values[0] ],\n        theta = attributes,\n        fill = 'toself',\n        name = '2015'\n    \n    )\n    \n    data = [ trace0, trace1, trace2, trace3, trace4, trace5]\n    layout = go.Layout(\n            polar = dict(\n            radialaxis = dict(\n            visible = True,\n            range = [0,100]))\n            , \n            showlegend = True, \n            title = 'Stats retaled to {} from 2015 to 2020'.format(name) )\n    \n    fig = go.Figure(data = data , layout = layout)\n    fig.show()\n    \n    ","b034ae4f":"playergrowth('L. Messi')","34d7af50":"playergrowth('L. Su\u00e1rez')","89db7336":"playergrowth('Neymar')","cb7cec03":"playergrowth('Cristiano Ronaldo')","26af3e8c":"playergrowth('K. Benzema')","45cf01b4":"playergrowth('G. Bale')","0ebce51c":"attack = ['RW', 'LW', 'ST', 'CF', 'LS', 'RS', 'RF', 'LF']\n\nsample_att = df_20.query('team_position in @attack')\nsample_att.head()","bd1dcc9e":"fig = px.pie(sample_att, names='team_position', color_discrete_sequence= px.colors.sequential.Magma_r, \n            title = '% of Players in Attacker Position')\nfig.show()","6d7feaab":"mid = ['CAM', 'RCM', 'CDM', 'LDM', 'RM', 'LCM', 'LM', 'RDM', 'RAM','CM', 'LAM']\n\nsample_mid = df_20.query('team_position in @mid')\nsample_mid.head()","ce8cbaa8":"fig = px.pie(sample_mid, names='team_position', color_discrete_sequence= px.colors.sequential.Blugrn_r ,\n            title = '% of Players in MidField Position')\nfig.show()","eb61e76f":"defence = ['LCB', 'RCB', 'LB', 'RB', 'CB', 'RWB', 'LWB']\nsample_def = df_20.query('team_position in @defence')\nsample_def.head()","8f323c88":"fig = px.pie(sample_def, names='team_position', color_discrete_sequence= px.colors.sequential.GnBu_r, \n            title = '% of Players in Defender Position')\nfig.show()","a74c4b36":"def pick_top_player(pos, value):\n    column = str('Position_')+str.upper(pos)\n    target_player= df_20[(df_20[column] == 1) & (df_20['value_eur'] <= value)][['short_name','age','overall','value_eur']].head(5)\n    \n    return target_player\n\n                        ","91a044bd":"pick_top_player('lb',400000000)","e69b94a5":"pick_top_player('cf',500000000)","0f87654b":"pick_top_player('ST',55000000)","9a43dda0":"### Player's Position \nConvert the categorical values in Player's Position column in integer values.","b65a1315":"player attributes column names","965fefe2":"What about **BBC**\n![BBC](https:\/\/footify.fr\/image%2Fjpeg\/873fe052bff72\/16004321190546.jpg)\n- **K. Benzema**\n- **G. Bale**\n- **Cristiano Ronaldo**\n","8e51d0e0":"#### 8- Pie chart Describing the Percentage of Players in different Defender positions","531572b1":"Let's check the growth of MSN over time\n\n- **L. Messi**\n- **L. Su\u00e1rez**\n-   **Neymar**\n![MSN](https:\/\/www.fcbarcelonanoticias.com\/uploads\/s1\/11\/89\/40\/8\/messi-ney-suarez.jpeg)\n\n","f700674d":"let's check the columns","0508f05f":"## Exploratory Data Analysis\n\n#### 1- Scatter Plot (colored by Age) year 2020 - Overall Rating vs Value in Euros ","0e77ca13":"let's check the dataset again","83c4cd70":"let's check the dataset again","50ce9e33":"let's count the NaN values again ","bb0e8bd9":"### Filling Missing Values\nLet's fill <b>\"dribbling\", \"defending\", \"physic\", \"passing\", \"shooting\" and \"pace\" <\/b> missing values of these columns by median\n","7edc3aaa":"### Pick Top 5 Players per Position\nCreating a method to pick top 5 player based on a the player position and the player value in euro","fc9291e5":"#### 7- Pie chart Describing the Percentage of Players in different Midfielder positions","a4f57703":"### Calculating BMI \nlet's calculate body max index of each Player ","8a686745":"Let's Replace NaN values with 0 ","a169272f":"### Position Columns ratings\nClean, Process and Assign the new attributes to columns listed below.","eddbbd33":"let's drop the original player_positions columns","607dd9e9":"### Data Preprocessin\nDropping some useless columns","af9b236d":"#### 4- Scatterpolar plot to compare a player's grothw over time\nlet's load the other datasets players from 2015 to 2019","82c253f4":"now lets fill the NaN values with the median of the respective column","d046a72c":"# WELCOME TO THE NOTEBOOK  FIFA 20\n------------------------------\n\n### Importing the modules","74ccc66a":"let's check what we have in these columns","7ccb59d6":"Let's check the dataframe again","336294bd":"Creating a method to compare a Players growth over Time","f2e07939":"#### 6- Pie chart Describing the Percentage of Players in different Attacker positions","0144ff9d":"Let's convert the columns to int ","6b521e8c":"At first let's check how many NaN values are there in these columuns","535a229b":"let's fill all NaN values in the dataframe with 0","8bf133fb":"#### 3- Histogram of Players Ages ","a2fa46b0":"checking how many rows and columns we have","97124ef9":"let's check the dataset","121a5a69":"let's convert the column to integeral columns","c4a3fc29":"### let's load the fifa 2020 dataset","d1a6841b":"Checking the dataframe again","77423510":"#### 2- Pie chart proportion of right-foot players vs left-foot players","ca16742a":"concatinating new_player_position dataframe to our dataframe","6d41abc3":"let's omit the '+' sign"}}