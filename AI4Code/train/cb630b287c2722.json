{"cell_type":{"4a6bf251":"code","7b4158d0":"code","ac92e628":"code","5c255a48":"code","913a5dce":"code","2b298a84":"code","3b5ab550":"code","6bb5cdc9":"code","bc53884a":"code","6b4a469e":"code","78feaf26":"code","f5b60e32":"code","f0e0973b":"code","70518bc3":"code","757862bf":"code","7eaacf0d":"code","54c6b8b1":"code","77849c66":"code","c657e780":"code","da11dba1":"code","58468999":"code","e2228108":"code","d53eac92":"markdown","ead30814":"markdown","a9db7d1a":"markdown","93f0a11c":"markdown","39d6d13b":"markdown","1bb4dd86":"markdown","8b9403dd":"markdown","4b7d4bf4":"markdown","64d03de3":"markdown","54883861":"markdown","d3633b48":"markdown","f4223758":"markdown","8646b611":"markdown","fbcd1ffc":"markdown","bd306a5e":"markdown","9c83a662":"markdown","73ae2fb7":"markdown","801c63c9":"markdown","b4a6c9f0":"markdown","e100e919":"markdown"},"source":{"4a6bf251":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        name = os.path.join(dirname, filename)\n        print(name)\n        if \"train\" in name:\n            df = pd.read_csv(name, index_col=\"id\")\n        elif \"test\" in name:\n            test = pd.read_csv(name, index_col=\"id\")\n        else:\n            sample = pd.read_csv(name)","7b4158d0":"df.head()","ac92e628":"df.info()","5c255a48":"df.describe().T","913a5dce":"df.corr()","2b298a84":"df.skew()","3b5ab550":"def add_standard_time(df): \n    ms = df['song_duration_ms']\n    seconds=(ms\/1000)%60\n    minutes=(ms\/(1000*60))%60\n    hours=(ms\/(1000*60*60))%24\n    df['song_duration_s'] = seconds\n    df['song_duration_m'] = minutes\n    df['song_duration_h'] = hours\n    return df\n\ndf = add_standard_time(df)\ntest = add_standard_time(test)","6bb5cdc9":"#plt.figure(figsize=(36,10))\ndf.hist(layout=(6,3), figsize=(16,12));\nplt.show()","bc53884a":"df.plot(kind='density', subplots=True,layout=(6,3),figsize=(16,12), sharex=False);","6b4a469e":"df.plot(kind='box', subplots=True, layout=(6,3), figsize=(16,12), sharex=False, sharey=False);","78feaf26":"plt.figure(figsize=(16,12))\nsns.heatmap(df.corr(), annot=True);","f5b60e32":"from sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer\n\nFEATURES = [name for name in df.drop('song_popularity', axis=1).columns]\nimp_mean = IterativeImputer(random_state=17)\ntrain = imp_mean.fit_transform(df[FEATURES])\ntest_new = imp_mean.fit_transform(test[FEATURES])\nXX_train = pd.DataFrame(train, columns=FEATURES)\nX_test = pd.DataFrame(test_new, columns=FEATURES)\nyy_train = df['song_popularity']","f0e0973b":"from sklearn.ensemble import ExtraTreesClassifier\n\nmodel = ExtraTreesClassifier()\nmodel.fit(XX_train, yy_train)\nimportant = model.feature_importances_\nplt.figure(figsize=(16,12))\nplt.title(\"Feature importance\")\nsns.histplot(y = important, x=FEATURES);","70518bc3":"XX_train.drop([\"audio_mode\", \"time_signature\"], axis=1, inplace=True)\nX_test.drop([\"audio_mode\", \"time_signature\"], axis=1, inplace=True)","757862bf":"from sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split(XX_train, yy_train, test_size=0.35,\nrandom_state=17)","7eaacf0d":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import GradientBoostingRegressor","54c6b8b1":"scoring =\"roc_auc\"\n#scaler = StandardScaler().fit(X_train)\n#rescaledX = scaler.transform(X_train)\n#param_grid = dict(n_estimators=[50,100,200,300,350,400])\n#model = GradientBoostingRegressor(random_state=17)\n#kfold = KFold(n_splits=10, random_state=17, shuffle=True)\n#grid = GridSearchCV(estimator=model, param_grid=param_grid, scoring=scoring, cv=kfold)\n#grid_result = grid.fit(rescaledX, y_train)\n#grid_result","77849c66":"#print(grid_result.best_score_, grid_result.best_params_)","c657e780":"from sklearn.metrics import roc_auc_score\nscaler = StandardScaler().fit(X_train)\nrescaledX = scaler.transform(X_train)\nmodel = GradientBoostingRegressor(random_state=17, n_estimators=50)\nmodel.fit(rescaledX, y_train)\nrescaledValidationX = scaler.transform(X_val)\npredictions = model.predict(rescaledValidationX)\nprint(roc_auc_score(y_val, predictions)) #0.5576388797311247","da11dba1":"scaler_test = StandardScaler().fit(X_test)\nrescaledX_test = scaler_test.transform(X_test)\nclassic_rescaledX = scaler.transform(X_test)\n\nypred_with_new_scaler = model.predict(rescaledX_test)\nypred_classic = model.predict(classic_rescaledX)","58468999":"sample['song_popularity'] = ypred_with_new_scaler\nsample.to_csv(\"submission_with_new_scaler.csv\", index=False)\nsample","e2228108":"sample['song_popularity'] = ypred_classic\nsample.to_csv(\"submission_classic_scaler.csv\", index=False)\nsample","d53eac92":"`song_popularity` is **Y**,\n\n`other features` are **X**","ead30814":"### Dropping useless features","a9db7d1a":"## Skew of Univariate Distributions\n> Skew refers to a distribution that is assumed Gaussian (normal or bell curve) that is shifted or\nsquashed in one direction or another. Many machine learning algorithms assume a Gaussian\ndistribution. Knowing that an attribute has a skew may allow me to perform data preparation\nto correct the skew and later improve the accuracy of my models.","93f0a11c":"### Density Plot","39d6d13b":"# Evaluating Algorithms(Models)\n\nThe Best CV technique is KFold, because it works fast","1bb4dd86":"350 | 0.5593776216286018\n\n400| 0.5576388797311247\n\n250| 0.5624377543543706\n\n50| 0.5651604874344173","8b9403dd":"### Box plot","4b7d4bf4":"### Correlation Matrix Plot","64d03de3":"# Defining Problem","54883861":"# Analyzing Data","d3633b48":"### Feature Importance","f4223758":"### Histogram","8646b611":"## Correlations Between Attributes","fbcd1ffc":"To better understand each feature, I advice to look at Spotify open dataset, which has many things to learn.\n\ndanceability: \n> Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable.\n\nenergy: \n> Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy.\n\nkey: \n> The estimated overall key of the track. Integers map to pitches using standard Pitch Class notation . E.g. 0 = C, 1 = C\u266f\/D\u266d, 2 = D, and so on. If no key was detected, the value is -1.\n\nloudness: \n> The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typical range between -60 and 0 db.\n\nmode: \n> Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.\n\nspeechiness: \n> Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks.\n\nacousticness:\n> A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic.\n\ninstrumentalness:\n> Predicts whether a track contains no vocals. \u201cOoh\u201d and \u201caah\u201d sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly \u201cvocal\u201d. The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.\n\nliveness: \n> Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live.\n\nvalence:\n>A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).\n\ntempo:\n>The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.\n\nduration_ms: \n> Duration of song in milliseconds\n\nSource: https:\/\/rpubs.com\/ananyac\/spotifydataanalytics","bd306a5e":"## Fixing Missing Values","9c83a662":"# Finalizing Model","73ae2fb7":"## Univariate Plots","801c63c9":"# Data Visualization","b4a6c9f0":"# Preparing Data","e100e919":"## Multivariate Plots"}}