{"cell_type":{"8d111245":"code","09a2dab6":"code","e6db7aef":"code","350a365a":"code","4b8fc6c0":"code","3d92527b":"code","a82f924b":"code","f42097f1":"code","a0077252":"code","5c2fdd64":"code","caa93eda":"code","c2ad12a2":"code","a4cfafc0":"code","65487c30":"code","41e63081":"code","b6b53ff0":"code","e2f3bf30":"markdown"},"source":{"8d111245":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","09a2dab6":"# Importing Required Libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\nfrom xgboost import XGBClassifier\nfrom plotly.offline import iplot,plot,init_notebook_mode\ninit_notebook_mode(connected = True)","e6db7aef":"# Load The Data Using Pandas\ntrain_df = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\") # Train Data\ntest_df = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\") # Test Data\nsubmission_df = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/sample_submission.csv\") # Submission Sample Data.","350a365a":"#ip = int(input('Enter Digit 0-9 to Show Image'))\n#ip = int(input('Enter Digit 0-9 to Show Image'))\ndef show_img(data): \n    ip = int(input('Enter Digit 0-9 to Show Image'))\n    data = data[data['label'] == ip][0:1]\n    label = data['label']\n    pixels = np.array(data.iloc[:,1:],dtype='uint8')\n    pixels = pixels.reshape((28,28))\n    fig = px.imshow(pixels)\n    fig.show()\n        \n#show_img(train_df)","4b8fc6c0":" # Shape of Data's\nprint(\"Shape of Train Data : {}\\nShape of Test Data : {}\\nShape of Submission Data : {}\".format(train_df.shape,test_df.shape,submission_df.shape))","3d92527b":"train_df.head()","a82f924b":"train_df.info()","f42097f1":"train_df.describe()","a0077252":"count = dict()\nfor i in list(set(train_df['label'].to_list())):\n    count[i]= len(train_df[train_df['label'].values==i])\ndf = pd.DataFrame({'Digits': count.keys(),\"Counts\":count.values()})\nfig = px.bar(df,'Digits','Counts',color = 'Digits',title = 'Total Samples Take by every Digits')\nfig.show()","5c2fdd64":"nan_count = 0\ndef count_nan(data):\n    for i in data.isnull().sum().values:\n        if i > 0:\n            nan_count =+1\n            return nan_count\n        else:\n            return f\"Nan Values Not Found\"\ncount_nan(train_df)","caa93eda":"label = train_df[['label']]\ntrain = train_df.drop(['label'],axis=1)\ntrain_df.head()","c2ad12a2":"X_train,X_test,y_train,y_test = train_test_split(train,label,test_size = 0.25)\nX_train.shape,X_test.shape,y_train.shape,y_test.shape","a4cfafc0":"model_1 = SVC(kernel='rbf', C=4)\nmodel_1.fit(X_train,y_train)","65487c30":"pred_1 = model_1.predict(X_test)\nprint(classification_report(y_test,pred_1))","41e63081":"prediction = model_1.predict(test_df)","b6b53ff0":"pd.DataFrame({\"ImageId\": submission_df['ImageId'],\"Label\": prediction}).to_csv('submission_file.csv',index=False,header=True)","e2f3bf30":"> > > >"}}