{"cell_type":{"b321c1d0":"code","0e0d57f7":"code","7b0f9078":"code","59fdfce0":"code","c1e5b488":"code","1012de07":"code","d55847ba":"code","7b0659e1":"code","9f8849d9":"code","c4f66952":"code","b7ea3a10":"code","c5aad4b7":"code","bc62b38a":"code","8c3a75f4":"code","421853b4":"code","8996e134":"code","0961103e":"code","62251885":"code","69a9b640":"code","bea29ebe":"code","60f1fc22":"code","3a5aac47":"code","41c09915":"code","7e4549c7":"code","d30f2780":"code","4d1c94b0":"code","3b813f7f":"code","9b7b9959":"code","0ab0b9ce":"code","1192e4b0":"code","924b8556":"code","dce3eb3e":"code","e9166641":"code","67c0c626":"code","b86c1d9e":"code","63b4b7c9":"code","f89ff6a3":"code","e3101f51":"code","a908c45c":"code","8f412067":"code","30d58b66":"code","5ade9ecd":"code","5694eeb3":"code","2ced2078":"code","dc123984":"markdown","135c921a":"markdown","91ef9d11":"markdown"},"source":{"b321c1d0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd \nimport matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0e0d57f7":"kp = pd.read_csv('\/kaggle\/input\/odi-cricket-matches-19712017\/ContinousDataset.csv', index_col=0)\ntp = pd.read_csv('\/kaggle\/input\/odi-cricket-matches-19712017\/originalDataset.csv', index_col=0)","7b0f9078":"print(f'Number of rows    = {len(kp)}')\nprint(f'Number of columns = {len(kp.columns)}')\nkp.head()","59fdfce0":"print(f'Number of rows    = {len(tp)}')\nprint(f'Number of columns = {len(tp.columns)}')\ntp.head()","c1e5b488":"sns.set_style('darkgrid')\nmatplotlib.rcParams['font.size'] = 14\nmatplotlib.rcParams['figure.figsize'] = (9, 5)\nmatplotlib.rcParams['figure.facecolor'] = '#00000000'","1012de07":"print(kp.describe())\nprint(tp.describe())#Statistical information of datset\nprint(tp.info())\nprint(kp.info())  #Getting the information about the matches dataframe","d55847ba":"print(kp.isnull().sum())\nprint(tp.isnull().sum())","7b0659e1":"unique_teams = kp[\"Winner\"].unique()\nprint(unique_teams)","9f8849d9":"kp.drop(columns=['Host_Country'], inplace=True)","c4f66952":"kp.head(1)","b7ea3a10":"print(kp.shape)\nprint(tp.shape)","c5aad4b7":"x, y = kp.shape","bc62b38a":"winner_count = kp.loc[:,[\"Winner\",\"Scorecard\"]].groupby(\"Winner\").count()\nwinner_count[\"Percentage\"] = round(winner_count[\"Scorecard\"]*100\/x,0);\nwinner_count = winner_count.sort_values(\"Scorecard\",ascending=False)\nwinner_count","8c3a75f4":"print('Winning Team Based on Innings in %:\\n',\n     kp.Margin.value_counts()\/7494*100)","421853b4":"print('Most Matches won at Neutral Venues:'\n,kp.loc[kp.Venue_Team1 == 'Neutral'].Winner.value_counts().idxmax())","8996e134":"winner_count.iloc[:,0:1].plot(kind=\"bar\",figsize=(20,3))\nplt.xticks(rotation=45)\nplt.xlabel(\"Teams\")\nplt.ylabel(\"Wins\")\nplt.title(\"Team wise Matches wins\")\nplt.grid()\nplt.show()","0961103e":"winner_count.iloc[:,1:2].plot(kind=\"bar\",figsize=(20,3))\nplt.xticks(rotation=45)\nplt.xlabel(\"Teams\")\nplt.ylabel(\"Wins %\")\nplt.title(\"Team wise wins%\")\nplt.grid()\nplt.show()","62251885":"print('Number of times Home Team Batted First:\\n',\n     round(kp.loc[((kp['Venue_Team1'] == 'Home') & (kp['Innings_Team1'] == 'First')) |\n                       ((kp['Venue_Team2'] == 'Home') & (kp['Innings_Team2'] == 'First'))].shape[0]\/7494*100,2), \n      '%')","69a9b640":"kp['Year'] = kp['Match Date'].str[-4:]\nyearwise = kp[['Year']].value_counts()\/2\nyearwise = yearwise.reset_index()\nyearwise.columns =['Year', 'Matches']\nyearwise =yearwise.sort_values(by='Year', ascending=True)\nsns.set_style('darkgrid')\nplt.figure(figsize=(20,10))\nplt.bar(yearwise['Year'], yearwise['Matches'], width=0.65, color='Green')\nplt.xticks(rotation='vertical', size=15)\nplt.yticks(size=15)\nplt.xlabel('Year', size=20)\nplt.ylabel('No. of Matches', size=20)\nplt.title('Matches per year', size=25)\nplt.show","bea29ebe":"group1=kp.groupby(\"Team 1\").size().rename(\"Team 1\")\ngroup2=kp.groupby(\"Team 2\").size().rename(\"Team 2\")\ntotal=pd.concat([group1,group2],axis=1).fillna(0)\ntotal[\"total\"]=total[\"Team 1\"]+total[\"Team 2\"]\ntotal.columns","60f1fc22":"sns.barplot(x=total.index,y=total[\"total\"])\nplt.ylabel(\"Number of Matches\")\nplt.xlabel(\"Teams\")\nplt.yticks([100,200,300,400,500,600,700,800])\nplt.xticks(rotation=90)\nplt.title(\"ODI Matches Played by team\")","3a5aac47":"kp.head(1)","41c09915":"sns.countplot(y='Team 1',hue='Venue_Team1',data=kp)\nplt.show()","7e4549c7":"c= kp['Winner'].value_counts()\nd=c.idxmax()\nprint(' Which team has won the most?\\n', d)","d30f2780":"#Team that won the most\nsns.countplot(x='Winner', data=kp)\nplt.xticks(rotation='vertical')\nplt.show()","4d1c94b0":"plt.figure(figsize=(12,6))\nsns.countplot(x='Venue_Team1', data=kp)\nplt.xticks(rotation='vertical')\nplt.show()","3b813f7f":"plt.figure(figsize=(12,6))\nsns.countplot(x='Team 1', data=kp)\nplt.xticks(rotation='vertical')\nplt.show()","9b7b9959":"dataset_filtered = kp[ (kp['Team 1'].isin(['Australia','India'])) & (kp['Team 2'].isin(['Australia','India']))]\n\n\n# Converting categorical values to encoded values\nx = dataset_filtered.drop(['Winner','Scorecard','Match Date'],axis =1)\ny = dataset_filtered['Winner']\nx_filtered = pd.get_dummies(x,drop_first = True)\ny_filtered = pd.get_dummies(y,drop_first = True)","0ab0b9ce":"display(x_train.head())\ndisplay(y_train.head())","1192e4b0":"from xgboost import XGBClassifier\n\nclassifier = XGBClassifier(learning_rate=0.25,n_estimators=500,objective='binary:logistic')\n\nclassifier.fit(x_train,y_train)\ny_pred = classifier.predict(x_test)","924b8556":"# Model accuracy\nfrom sklearn.metrics import roc_auc_score\n\ndisplay(roc_auc_score(y_test,y_pred))\n\ndisplay(x_filtered.head())","dce3eb3e":"x_current = x_filtered[(x_filtered['Team 1_India']==1) & (x_filtered['Venue_Team1_Home']==1) &\n         (x_filtered['Ground_Visakhapatnam']==1)]\n\ndisplay('Visag',classifier.predict(x_current).mean())\n\n#  (x_filtered['Ground_Visakhapatnam']==1) | (x_filtered['Ground_Bengaluru']==1) |\n#           (x_filtered['Ground_Hyderabad']==1) | (x_filtered['Ground_Nagpur']==1) |\n#           (x_filtered['Ground_New Delhi']==1)]\n\n\nx_current = x_filtered[(x_filtered['Team 1_India']==1) & (x_filtered['Venue_Team1_Home']==1) &\n         (x_filtered['Ground_Bengaluru']==1)]\n\ndisplay('Bangalore',classifier.predict(x_current).mean())\n\nx_current = x_filtered[(x_filtered['Team 1_India']==1) & (x_filtered['Venue_Team1_Home']==1) &\n         (x_filtered['Ground_Hyderabad']==1)]\n\ndisplay('Hydrabad',classifier.predict(x_current).mean())\n\nx_current = x_filtered[(x_filtered['Team 1_India']==1) & (x_filtered['Venue_Team1_Home']==1) &\n         (x_filtered['Ground_Nagpur']==1)]\n\ndisplay('Nagpur',classifier.predict(x_current).mean())\n\nx_current = x_filtered[(x_filtered['Team 1_India']==1) & (x_filtered['Venue_Team1_Home']==1) &\n         (x_filtered['Ground_New Delhi']==1) | (x_filtered['Ground_Delhi']==1)]\n\ndisplay('New Delhi',classifier.predict(x_current).mean())","e9166641":"display(x_filtered.head())","67c0c626":"labels = kp[['Winner']]\ndata = kp[['Team 1', 'Team 2', 'Ground', 'Venue_Team1', 'Venue_Team2', 'Innings_Team1', 'Innings_Team2']]","b86c1d9e":"data_hot = pd.get_dummies(data) #one hot encoding our data","63b4b7c9":"df_india_australia = tp[(tp['Team 1'].str.contains('Australia') | tp['Team 1'].str.contains('India'))  & (tp['Team 2'].str.contains('India') | tp['Team 2'].str.contains('Australia'))]","f89ff6a3":"df_india_australia","e3101f51":"df_india_australia['Winner'].value_counts()","a908c45c":"df_most_number_of_matches_played_at_a_ground = df_india_australia['Ground'].value_counts()\ndf_most_number_of_matches_played_at_a_ground.keys()[0]","8f412067":"df_west_indies = tp[tp['Team 1'].str.contains('West Indies') | tp['Team 2'].str.contains('West Indies')]","30d58b66":"total_number_of_matches = df_west_indies.shape\ntotal = total_number_of_matches[0]\ntotal","5ade9ecd":"total_won_number = df_west_indies['Winner'].value_counts(sort=True)[0]\ntotal_won_number","5694eeb3":"win_ratio = int(total_won_number) \/ int(total)\nfinal_win_ratio = win_ratio * 100\nfinal_win_ratio","2ced2078":"yeared=kp.groupby(\"Year\").size()\nyeared.plot(kind=\"line\",color=\"green\",linewidth=4)\nplt.title(\"ODI Cricket Matches by Year\")\nplt.ylabel(\"Number of Matches\")","dc123984":"# Prediction of Top_Score","135c921a":"# THANK YOU!","91ef9d11":"# DATA CLEANING"}}