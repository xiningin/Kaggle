{"cell_type":{"f01e3166":"code","1f0e7e52":"code","13f83aae":"code","24871770":"code","0c6ff4b4":"code","5e91feb6":"code","76f6537c":"code","54ecd1e3":"code","bfef8b54":"code","7ba66fd0":"code","869ff1bd":"code","75234de5":"code","ebe19e8e":"code","1a63364b":"code","475a7858":"code","01a0fef8":"code","489e38ae":"code","76168d1a":"code","93c8be94":"code","7aa90b3c":"code","336ec7a1":"code","1753f862":"code","7868245e":"code","bc1eb181":"code","2d40b112":"code","b55d849f":"code","14e23dbd":"code","7fad4676":"code","d180f9c1":"code","531d5181":"code","223a131e":"code","702bef28":"code","f5bd6ec8":"code","51329a76":"code","21e3628f":"code","fcb9918b":"code","58fd0bbf":"code","2cebc7ec":"code","2d77e798":"code","dd1460b2":"code","154cca98":"code","bf52a653":"code","41ac9f5e":"code","5677f235":"code","81f7c76e":"code","03604e2c":"code","4ca42cf0":"code","60474960":"code","1468721f":"code","460542c3":"code","1b14665c":"code","503b7778":"code","b056f556":"code","8c59bc28":"code","ca3fa229":"code","0e192f9c":"code","85daba69":"markdown","f53302c0":"markdown","75b95a47":"markdown","e83db031":"markdown","73bebebe":"markdown","819182e9":"markdown","b3675941":"markdown","26e76185":"markdown","54efef82":"markdown","feab0da3":"markdown","72ec6624":"markdown","a84cb5d8":"markdown","eed9f53f":"markdown","fa0e1f74":"markdown","6ca989fe":"markdown","2778c505":"markdown","11a3d32a":"markdown","d04781b5":"markdown","c736ad3c":"markdown","f6f3d608":"markdown"},"source":{"f01e3166":"import pandas as pd\nimport numpy as np\nimport matplotlib; matplotlib.rc('font', family='Malgun Gothic')\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\nimport warnings; warnings.filterwarnings('ignore')\n\nplt.style.use('ggplot')","1f0e7e52":"raw_df = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/patient.csv')\nprint(raw_df.shape)\nraw_df.head()","13f83aae":"raw_df.info()","24871770":"msno.bar(raw_df)","0c6ff4b4":"raw_df.describe(include='all')","5e91feb6":"# \uac01 \uceec\ub7fc\uc758 \uacb0\uce21\uce58 \uac1c\uc218\nraw_df.isnull().sum().to_frame().T","76f6537c":"print(raw_df['sex'].unique())\nplt.style.use('ggplot')\nraw_df['sex'].value_counts().plot.bar()","54ecd1e3":"raw_df.head()","bfef8b54":"raw_df['birth_year'].value_counts()","7ba66fd0":"sns.distplot(raw_df['birth_year'], hist=False, color='red')","869ff1bd":"# birth_year \ub300\uc2e0 age \uceec\ub7fc\uc744 \uc0c8\ub85c \ub9cc\ub4e4\uaca0\ub2e4\n# raw_df['birth_year'] = raw_df['birth_year'].astype(float).map(lambda x: x if x>0 else np.nan)\nraw_df['age'] = pd.datetime.now().year - raw_df['birth_year']\nsns.distplot(raw_df['age'], hist=False)","75234de5":"raw_df.drop(['birth_year'], axis=1, inplace=True)\nraw_df.head(3)","ebe19e8e":"raw_df.isnull().sum().to_frame().T","1a63364b":"print(raw_df['country'].value_counts()); print('------------------------')\nprint(raw_df['region'].value_counts())\nraw_df[['country', 'region']].head()","475a7858":"def region_clean(df):\n    if pd.isnull(df):\n        return np.nan\n    else:\n        return df.replace('Gyeongsangbuk-do', 'Gyeongbuk').\\\n    replace('capital area', 'Capital').replace('Dague', 'Daegu').\\\n    replace('Gangwon-do', 'Gangwon').replace('Jeollabuk-do', 'Jeonbuk').replace('Jeollanam-do', 'Jeonnam').\\\n    replace('Jeju-do', 'Jeju').replace('Chungcheongbuk-do', 'Chungcheong').\\\n    replace('Chungcheongnam-do', 'Chungcheong')\n    \nraw_df['region'] = raw_df['region'].apply(region_clean)\nraw_df['region'].value_counts()","01a0fef8":"import chart_studio.plotly as py\nimport plotly.graph_objs as go\nimport cufflinks as cf \ncf.go_offline(connected=True)\n\nraw_df['region'].iplot(kind='hist', linecolor='blue')","489e38ae":"raw_df.head()","76168d1a":"print(raw_df['group'].value_counts()); print('--------------------')\nprint(raw_df['infection_reason'].value_counts()); print('------------------')\nprint(raw_df['infection_order'].value_counts()); print('---------------------')\nprint(raw_df['infected_by'].value_counts())","93c8be94":"def infection_reason_clean(df):\n    if pd.isnull(df):\n        return np.nan\n    if 'Wuhan' in df:\n        return 'Wuhan'\n    if 'Daegu' in df:\n        return 'Daegu'\n    if 'Israel' in df: \n        return 'Abroad'\n    if 'Thailand' in df:\n        return 'Abroad'\n    if 'Singapore' in df:\n        return 'Abroad'\n    if 'Vietnam' in df:\n        return 'Abroad'\n    if 'Japan' in df:\n        return 'Abroad'\n    if 'China' in df:\n        return 'Abroad'\n    if 'Italy' in df:\n        return 'Italy'\n    if 'Cheongdo' in df:\n        return 'Cheongo Daenam hospital'\n    else:\n        return df\n        \nraw_df['infection_reason'] = raw_df['infection_reason'].apply(infection_reason_clean)\nraw_df['infection_reason'].value_counts()","7aa90b3c":"fig = plt.figure(figsize=(10, 4))\n\nfig.add_subplot(1, 2, 1)\nraw_df['infection_reason'].value_counts().plot.barh(color='green')\nplt.title('infection reason')\nfig.add_subplot(1, 2, 2)\nraw_df['infection_order'].value_counts().plot.bar()\nplt.title('infection order')","336ec7a1":"raw_df['infected_by'].value_counts().plot(kind='barh', figsize=(20,10))","1753f862":"print(raw_df['contact_number'].value_counts())\nraw_df['contact_number'].value_counts().iplot(kind='bar')","7868245e":"plt.figure(figsize=(10,8))\nraw_df['contact_number'].value_counts().plot.kde()","bc1eb181":"sns.set(font_scale=1.2)\nraw_df['state'].value_counts().plot.bar(figsize=(8,6))\nplt.title('state')","2d40b112":"table = pd.pivot_table(data=raw_df,\n               index='id',\n              values='contact_number',\n              aggfunc='sum')\ntable = table[table['contact_number'] > 0]\ntable","b55d849f":"sns.relplot(y='contact_number', x='id', data=table.reset_index())","14e23dbd":"msno.bar(raw_df[['confirmed_date', 'released_date', 'deceased_date']],\n        fontsize=30)","7fad4676":"raw_df.info()","d180f9c1":"raw_df['confirmed_date'] = pd.to_datetime(raw_df['confirmed_date'])\nraw_df['released_date'] = pd.to_datetime(raw_df['released_date'])\nraw_df['deceased_date'] = pd.to_datetime(raw_df['deceased_date'])\nraw_df.dtypes","531d5181":"sns.set(font_scale=1.4)\n# plt.rc('font', family='Malgun Gothic')\n\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(18,10))\nsns.distplot(raw_df['confirmed_date'].value_counts(), kde=False, ax=ax1)\nsns.distplot(raw_df['confirmed_date'].value_counts(), bins=3, hist=False, ax=ax2)\nax1.set_title('confirmed histogram')\nax2.set_title('confirmed kde plot')\nplt.tight_layout()","223a131e":"# \ud3b8\uc758\uc0c1 \uceec\ub7fc \uc21c\uc11c \ubcc0\uacbd!\nraw_df.head()","702bef28":"raw_df.columns.tolist()","f5bd6ec8":"col = raw_df.columns[[0, 12, 13, 1, 2, 3, 9, 10, 11, 4, 5, 7, 8, 6]]\ndf = raw_df[col].copy()\nprint(df.shape)\ndf.head()","51329a76":"# df.to_csv('..\/corona\/corona(kaggle)_update_data.csv')","21e3628f":"len(df.id.unique())","fcb9918b":"confirm = pd.pivot_table(data=df,\n                        index='confirmed_date',\n                        values='id',\n                        aggfunc=len)\nconfirm.rename(columns={'id':'count'}, inplace=True)\nconfirm","58fd0bbf":"confirm.iplot(kind='line',\n             xTitle='\ub0a0\uc9dc',\n             yTitle='\ud655\uc9c4\uc790\uc218',\n             title='\ud655\uc9c4\uc790 \ucd94\uc774',\n             theme=cf.set_config_file(theme='solar'))","2cebc7ec":"plt.figure(figsize=(10,8))\nsns.pointplot(data=confirm.reset_index(), x=np.arange(len(confirm.reset_index()['confirmed_date'])), y='count')\nplt.xlabel('2020.01.26~2020.03.04',\n          fontdict={'size':16})","2d77e798":"release = df.groupby('released_date')['id'].count().to_frame()\ndecease = df.groupby('deceased_date')['id'].count().to_frame()","dd1460b2":"confirm_reset = confirm.reset_index()\nrelease_reset = release.reset_index()\ndecease_reset = decease.reset_index()\ndata_merged = confirm_reset.merge(release_reset,\n                    how='inner',\n                    left_on='confirmed_date',\n                    right_on='released_date', ).\\\nmerge(decease_reset,\n     how='inner', left_on='released_date', right_on='deceased_date')\n\ndata_merged.drop(columns=['released_date', 'deceased_date'], axis=1, inplace=True)\ndata_merged.columns = ['date', 'confirmed', 'released', 'deceased']\ndata_merged","154cca98":"data_merged.set_index('date').iplot(kind='box')","bf52a653":"data_merged.set_index('date').iplot(kind='barh')","41ac9f5e":"cf.set_config_file(theme='ggplot')\ndata_merged.set_index('date').iplot(kind='surface')","5677f235":"data_merged.set_index('date').iplot(kind='spread')","81f7c76e":"plt.rc('font', family='Malgun Gothic')\nconfirm.cumsum().plot(figsize=(9,6))\nplt.title('confirmed Cumulative trend')","03604e2c":"from statsmodels.tsa.arima_model import ARIMA\nimport statsmodels.api as sm\n\nconfirm_cumsum = confirm.cumsum()\n# confirm_cumsum = confirm_cumsum['count'].astype(float).to_frame()\nconfirm_cumsum.tail()","4ca42cf0":"model = ARIMA(confirm_cumsum['count'].values, order=(1, 2, 1))\nfit_model = model.fit(trend='c', full_output=True, disp=True)\nfit_model.summary()\n# \uacc4\uc218\ub4e4\uc758 p-value \uac12\uc774 \uc720\uc758\uc218\uc900 0.05\ubcf4\ub2e4 \uc791\uc74c. AR=1, MA=1, \ucc28\ubd84=2\ub85c \uc124\uc815\ud558\ub294 \uac83 \uc720\uc758\ubbf8\ud558\ub2e4\uace0 \ubcf4\uc5ec\uc9d0.","60474960":"plt.rc('font', family='Malgun Gothic')\nfit_model.plot_predict()\nplt.title('Forecast Result')\npd.DataFrame(fit_model.resid).plot()\nplt.title('Error Variation of Actual and Predicted Values')","1468721f":"forcast = fit_model.forecast(steps=6)\npred_y = forcast[0].tolist()\npred_y","460542c3":"pd.DataFrame(data=pred_y,\n             index=['3\/5', '3\/6', '3\/7', '3\/8', '3\/9', '3\/10'],\n            columns=['confirmed_count(cumsum)'])","1b14665c":"from fbprophet import Prophet","503b7778":"fb_data = confirm_cumsum.reset_index()\nfb_data.columns = ['ds','y']\nfb_data","b056f556":"prophet = Prophet(growth='linear',\n                  seasonality_mode='multiplicative',\n                  yearly_seasonality=True,\n                  weekly_seasonality=True,\n                  daily_seasonality=True,\n                  changepoint_range=0.6, # \ub370\uc774\ud130\uc758 60% \uc815\ub3c4\uc5d0\uc11c changepoint\n                  changepoint_prior_scale=0.1) \nprophet.fit(fb_data)","8c59bc28":"# 4\uc77c \ub3d9\uc548\uc758 \ud655\uc9c4\uc790 \uc218(\ub204\uc801) \uc608\uce21\nfuture_data = prophet.make_future_dataframe(periods=4)\nforecast_data = prophet.predict(future_data)\nforecast_data[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(10)","ca3fa229":"from fbprophet.plot import add_changepoints_to_plot\n\nfig = prophet.plot(forecast_data)\na = add_changepoints_to_plot(fig.gca(), prophet, forecast_data)","0e192f9c":"sns.set(font_scale=1.1)\nfig1 = prophet.plot_components(forecast_data)\nplt.tight_layout()","85daba69":"- region \uceec\ub7fc\uc758 \ub370\uc774\ud130 \uc815\uc81c","f53302c0":"#### - ARIMA\ub85c \uc608\uce21\ud574\ubcf4\uae30","75b95a47":"- 1\ubc88 \uadf8\ub798\ud504\ub294 \uc2dc\uacc4\uc5f4 \ub370\uc774\ud130\uc758 \uc804\uccb4\uc801\uc778 \ud2b8\ub80c\ub4dc\ub97c \ubcf4\uc5ec\uc8fc\uace0\n- 2\ubc88 \uadf8\ub798\ud504\ub294 weekly \ud2b8\ub80c\ub4dc\ub97c\n- 3\ubc88 \uadf8\ub798\ud504\ub294 yearly \ud2b8\ub80c\ub4dc\ub97c\n- \ub9c8\uc9c0\ub9c9 4\ubc88 \uadf8\ub798\ud504\ub294 daily \ud2b8\ub80c\ub4dc\ub97c \ubcf4\uc5ec\uc900\ub2e4","e83db031":"### confirmed_date, released_date, deceased_date","73bebebe":"### bitrh_year","819182e9":"\ub370\uc774\ud130 \ubd84\uc11d \uacf5\ubd80\ud558\uace0 \uc788\ub294 \ud559\ubd80\uc0dd\uc785\ub2c8\ub2e4.  \n\ubd80\uc871\ud55c \uc2e4\ub825\uc774\uc9c0\ub9cc \uceec\ub7fc\ubcc4\ub85c \uc815\uc81c\ud574\ubcf4\uace0 \uc2dc\uac01\ud654\ud55c \ud6c4, ARIMA \ubaa8\ub378\uacfc Prophet\uc73c\ub85c \ub204\uc801\ud655\uc9c4\uc790 \uc218\ub97c \uc608\uce21\ud574\ubd24\uc2b5\ub2c8\ub2e4.  \nProphet\uc740 \ucc98\uc74c \uc368\ubd10\uc11c \uc81c\ub300\ub85c \ub41c \uac83 \uac19\uc9c4 \uc54a\uc9c0\ub9cc \ub108\uadf8\ub7fd\uac8c \ubd10\uc8fc\uc2dc\uba74 \uac10\uc0ac\ud558\uaca0\uc2b5\ub2c8\ub2e4.  \n(\ucf54\ub85c\ub09819\uac00 \uc5bc\ub978 \uc885\uc2dd\ub418\uc5b4 \ud558\ub8e8 \ube68\ub9ac \uc6d0\ub798\uc758 \uc77c\uc0c1\uc73c\ub85c \ub3cc\uc544\uac00\uae38 \ubc14\ub78d\ub2c8\ub2e4!)","b3675941":"## \ucd94\uc774","26e76185":"## \ud655\uc9c4\uc790 \uc608\uce21","54efef82":"### contact_number, state","feab0da3":"\uacc4\uc218\ub4e4\uc758 p-value\uac12\uc774 0.05\ubcf4\ub2e4 \uc791\uc73c\ubbc0\ub85c AR, MA, \ucc28\ubd84\uac12 \uc720\uc758\ubbf8\ud558\ub2e4\uace0 ","72ec6624":"## \uceec\ub7fc \uc21c\uc11c \ubcc0\uacbd","a84cb5d8":"####  - \uc774 ARIMA \ubaa8\ub378\ub85c 3\uc6d4 5\uc77c\ubd80\ud130 10\uc77c\uae4c\uc9c0 \ub204\uc801 \ud655\uc9c4\uc790 \uc218 \uc608\uce21","eed9f53f":"## \uac01 \uceec\ub7fc \uc0b4\ud3b4\ubcf4\uae30(cleaning)","fa0e1f74":"### country & region","6ca989fe":"### sex","2778c505":"### group, infection_reason, infection_order, infected_by","11a3d32a":"**3\uc6d4 5\uc77c \uc624\ud6c4 19\uc2dc 31\ubd84 \uae30\uc900\uc73c\ub85c \uc2e4\uc81c \ub204\uc801 \ud655\uc9c4\uc790 \uc218\ub294 6088\uba85**  \nARIMA \ubaa8\ub378\ub85c \uc608\uce21\ud55c \uac12\uacfc \uc2e4\uc81c \uac12 \uc0ac\uc774\uc5d0 \uc624\ucc28\uac00 \uc870\uae08\uc740 \uc788\uc9c0\ub9cc \uc720\uc0ac\ud568","d04781b5":"- id: \ud655\uc9c4\uc790\uc758 id (n\ubc88\uc9f8 \ud655\uc9c4\uc790)\n- sex: \uc131\ubcc4\n- birth_year: \ucd9c\uc0dd \uc5f0\ub3c4\n- country: \uad6d\uc801\n- region: \uc8fc \ud65c\ub3d9 \uc9c0\uc5ed (\uad11\uc5ed\uc2dc\/\ub3c4 \ub2e8\uc704)\n- group: \ud2b9\uc815 \uc9d1\ub2e8 \uad00\ub828\n- infection_reason: \uac10\uc5fc \uacbd\ub85c\n- infection_order: \uac10\uc5fc \ucc28\uc218 (n\ucc28 \uac10\uc5fc)\n- infected_by: \ud574\ub2f9 \ud655\uc9c4\uc790\uc758 \uac10\uc5fc\uc6d0 id\n- contact_number: \uc811\ucd09\uc790 \uc218\n- confirmed_date: \ud655\uc9c4 \uc77c\uc790\n- released_date: \ud1f4\uc6d0 \uc77c\uc790 (\uaca9\ub9ac \ud574\uc81c \uc77c\uc790)\n- deceased_date: \uc0ac\ub9dd \uc77c\uc790\n- state: \uc0c1\ud0dc","c736ad3c":"### fbprophet\uc73c\ub85c \uc608\uce21","f6f3d608":"- \uacb0\uce21\uce58\uac00 \ub9e4\uc6b0 \ub9ce\uc74c  "}}