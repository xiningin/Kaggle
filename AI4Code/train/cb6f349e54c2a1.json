{"cell_type":{"647c7590":"code","2c431bdc":"code","711de255":"code","409a9780":"code","7716a2c9":"code","66f72152":"code","7bad749e":"code","89330bbf":"code","5d47a0f5":"code","79bdd908":"code","34411940":"code","c57502ba":"markdown","79f8e3c3":"markdown","a28eac62":"markdown","eb940301":"markdown"},"source":{"647c7590":"import numpy as np\nimport tensorflow as tf","2c431bdc":"classes = 10\nimg_row, img_col = 28, 28\nnum_channels = 1\ninput_shape = (img_row, img_col, num_channels)","711de255":"(x_train, y_train),(x_test, y_test) = tf.keras.datasets.mnist.load_data()\nx_train, x_test = x_train\/255.0, x_test\/255.0","409a9780":"model = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(128, activation = 'relu'))\nmodel.add(tf.keras.layers.Dense(classes, activation = 'softmax'))","7716a2c9":"model.compile(optimizer = 'sgd',\n             loss = 'sparse_categorical_crossentropy',\n             metrics = ['accuracy'])\ncallbacks = [tf.keras.callbacks.TensorBoard('.\/keras')]\nhistory = model.fit(x_train, y_train, epochs = 25, verbose = 1, validation_data =\n         (x_test, y_test), callbacks = callbacks)","66f72152":"from matplotlib import pyplot as plt\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('MODEL ACCURACY')\nplt.ylabel('Accuracy')\nplt.xlabel('No. of epochs')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()","7bad749e":"model_input = tf.keras.layers.Input(shape = input_shape)\noutput = tf.keras.layers.Flatten()(model_input)\noutput = tf.keras.layers.Dense(128, activation = 'relu')(output)\noutput = tf.keras.layers.Dense(classes, activation = 'softmax')(output)\nmodel_1 = tf.keras.Model(model_input, output)","89330bbf":"model_1.compile(optimizer = 'sgd',\n             loss = 'sparse_categorical_crossentropy',\n             metrics = ['accuracy'])\ncallbacks = [tf.keras.callbacks.TensorBoard('.\/keras')]\nhistory_1 = model_1.fit(x_train, y_train, epochs = 25, verbose = 1, validation_data =\n         (x_test, y_test), callbacks = callbacks)","5d47a0f5":"from matplotlib import pyplot as plt\nplt.plot(history_1.history['accuracy'])\nplt.plot(history_1.history['val_accuracy'])\nplt.title('MODEL ACCURACY')\nplt.ylabel('Accuracy')\nplt.xlabel('No. of epochs')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()","79bdd908":"estimator = tf.keras.estimator.model_to_estimator(model, model_dir = '.\/estimator_dir')","34411940":"batch_size = 32\ndef train_input():\n    train_dataset = tf.data.Dataset.from_tensor_slices((x_train, y_train))\n    train_dataset = train_dataset.batch(batch_size).repeat()\n    return train_dataset\nestimator.train(train_input, steps = len(x_train)\/\/batch_size)","c57502ba":"# Functional API\n\nThe Keras functional API provides a more flexible way for defining models.\n\nIt specifically allows you to define multiple input or output models as well as models that share layers. More than that, it allows you to define ad hoc acyclic network graphs.\n\nModels are defined by creating instances of layers and connecting them directly to each other in pairs, then defining a Model that specifies the layers to act as the input and output to the model.","79f8e3c3":"# Introduction:\n\nThis notebook is an introduction for building a simple Neural Network using TensorFlow through Sequential and Functional APIs and Estimator API. The notebooks deals with MNIST digits dataset.\n\n**TensorFlow**\n\nCreated by the Google Brain team, TensorFlow is an open source library for numerical computation and large-scale machine learning. TensorFlow bundles together a slew of machine learning and deep learning (aka neural networking) models and algorithms and makes them useful by way of a common metaphor. It uses Python to provide a convenient front-end API for building applications with the framework, while executing those applications in high-performance C++.\n\n![image.png](attachment:image.png)","a28eac62":"# Estimator\n\nTensorFlow Estimators is a High-level TensorFlow API that greatly simplifies machine learning programming. The design goals can be summarized as automating repetitive and error-prone tasks, encapsulating best practices, and providing a ride from training to deployment. The tf.estimator Quickstart web page gives a good reason to use it: \u201cTensorFlow\u2019s high-level machine learning API (tf.estimator) makes it easy to configure, train, and evaluate a variety of machine learning models\u201d\n\nA more extensive list is the Advantages of Estimators page that list a few points of particular interest:\n\n* Run on CPU, GPU or TPU without reordering your model\n* Safely distributed training loop to build a graph, initialize variables, start queues, create checkpoints, save summaries to TensorBoard\n* Export for serving\n\n![image.png](attachment:image.png)","eb940301":"# Sequential API\n\nThe Sequential model API is a way of creating deep learning models where an instance of the Sequential class is created and model layers are created and added to it. Our model is a linear stack of layers, we start by calling the Sequential function. We then add each layer one after the other.\n\nThe Sequential model API is great for developing deep learning models in most situations, but it also has some limitations.\n\nFor example, it is not straightforward to define models that may have multiple different input sources, produce multiple output destinations or models that re-use layers."}}