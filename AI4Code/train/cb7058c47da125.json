{"cell_type":{"533abb48":"code","11ff173c":"code","0f44b285":"code","b1c0013e":"code","ae93cb93":"code","112bc70b":"code","ec674926":"code","8bd8c184":"code","2e92a0e0":"code","4cee5794":"code","080bce09":"code","2c612866":"code","2c9ab0e2":"code","4e15b9cc":"code","e3643719":"code","20086efe":"code","c9a6be69":"code","4ac6373d":"code","901e3224":"code","e75d00d9":"code","6e138ccb":"code","46cb14cc":"code","40c8b30c":"code","2fea87c9":"code","2c9147d6":"code","6406c8e0":"code","fb4d79e4":"code","d79aa77e":"code","99e69287":"code","7a8cfe51":"code","0bac275c":"code","ca0213a3":"code","e9b2ebcc":"code","7f0f1a95":"code","cb7479be":"code","43d678b8":"code","6f630beb":"code","314a6b9f":"code","398ad492":"markdown","5877eaa0":"markdown","c96f2e04":"markdown","96eda1f2":"markdown","51e84da5":"markdown","041693da":"markdown","55e6c1c3":"markdown","b14d3e76":"markdown","e2f2856c":"markdown","c780909b":"markdown"},"source":{"533abb48":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","11ff173c":"# importing different libraries\nimport seaborn as sns   \nfrom matplotlib import pyplot as plt","0f44b285":"# importing data\ntrain=pd.read_csv(\"..\/input\/home-data-for-ml-course\/train.csv\")\ntest=pd.read_csv(\"..\/input\/home-data-for-ml-course\/test.csv\")\nsubmission=pd.read_csv(\"..\/input\/home-data-for-ml-course\/sample_submission.csv\")","b1c0013e":"# Reading data\ntrain.head(5)","ae93cb93":"# check non null counta and data\ntrain.info()","112bc70b":"#total null values\ntrain.isnull().sum().sum()","ec674926":"# check correlation b\/w columns and heat map \ntrain_corr = train.corr(method=\"spearman\")\nplt.figure(figsize=(22,22))\nsns.heatmap(train_corr, vmin=-1, vmax=1, cmap=\"viridis\", annot=True, linewidth=0.1)","8bd8c184":"# taking Main Features having correlation more than 0.45\nmain_features = ['LotArea','OverallQual', 'YearBuilt', 'YearRemodAdd', '1stFlrSF', 'GrLivArea', 'FullBath', 'Fireplaces', 'TotRmsAbvGrd', 'OpenPorchSF']\n#(, 'GarageYrBlt', 'TotalBsmtSF', 'GarageCars', 'GarageArea')","2e92a0e0":"# new varibales to different features named 'feature1,feature2,......,feature10\nsaleprice = train['SalePrice']\n#LotArea: Lot size in square feet\nfeature1= train['LotArea']\n#OverallQual: Rates the overall material and finish of the house\nfeature2= train['OverallQual']\n#YearBuilt: Original construction date\nfeature3= train['YearBuilt']\n#YearRemodAdd: Remodel date (same as construction date if no remodeling or additions)\nfeature4= train['YearRemodAdd']\n#1stFlrSF: First Floor square feet\nfeature5= train['1stFlrSF']\n#GrLivArea: Above grade (ground) living area square feet\nfeature6= train['GrLivArea']\n#FullBath: Full bathrooms above grade\nfeature7= train['FullBath']\n#Fireplaces: Number of fireplaces\nfeature8= train['Fireplaces']\n#TotRmsAbvGrd: Total rooms above grade (does not include bathrooms)\nfeature9= train['TotRmsAbvGrd']\n#OpenPorchSF: Open porch area in square feet\nfeature10= train['OpenPorchSF']","4cee5794":"#LotArea: Lot size in square feet\nplt.figure(figsize=(10,7))\nsns.scatterplot(saleprice,feature1,color='#808080')\nplt.title('Scatterplot for Saleprice and LotArea')\nplt.show()","080bce09":"#OverallQual: Rates the overall material and finish of the house\nplt.figure(figsize=(10,7))\nsns.scatterplot(saleprice,feature2,color='#808080')\nplt.title('Scatterplot for Saleprice and OverallQual')\nplt.show()","2c612866":"#YearBuilt: Original construction date\nplt.figure(figsize=(10,7))\nsns.scatterplot(saleprice,feature3,color='#808080')\nplt.title('Scatterplot for Saleprice and YearBuilt')\nplt.show()","2c9ab0e2":"#YearRemodAdd: Remodel date (same as construction date if no remodeling or additions)\nplt.figure(figsize=(10,7))\nsns.scatterplot(saleprice,feature4,color='#808080')\nplt.title('Scatterplot for Saleprice and YearRemodAdd')\nplt.show()","4e15b9cc":"#1stFlrSF: First Floor square feet\nplt.figure(figsize=(10,7))\nsns.scatterplot(saleprice,feature5,color='#808080')\nplt.title('Scatterplot for Saleprice and 1stFlrSF')\nplt.show()","e3643719":"#GrLivArea: Above grade (ground) living area square feet\nplt.figure(figsize=(10,7))\nsns.scatterplot(saleprice,feature6,color='#808080')\nplt.title('Scatterplot for Saleprice and GrLivArea')\nplt.show()","20086efe":"#FullBath: Full bathrooms above grade\nplt.figure(figsize=(10,7))\nsns.scatterplot(saleprice,feature7,color='#808080')\nplt.title('Scatterplot for Saleprice and FullBath')\nplt.show()","c9a6be69":"#Fireplaces: Number of fireplaces\nplt.figure(figsize=(10,7))\nsns.scatterplot(saleprice,feature8,color='#808080')\nplt.title('Scatterplot for Saleprice and Fireplaces')\nplt.show()","4ac6373d":"#TotRmsAbvGrd: Total rooms above grade (does not include bathrooms)\nplt.figure(figsize=(10,7))\nsns.scatterplot(saleprice,feature9,color='#808080')\nplt.title('Scatterplot for Saleprice and TotRmsAbvGrd')\nplt.show()","901e3224":"#OpenPorchSF: Open porch area in square feet\nplt.figure(figsize=(10,7))\nsns.scatterplot(saleprice,feature10,color='#808080')\nplt.title('Scatterplot for Saleprice and OpenPorchSF')\nplt.show()","e75d00d9":"plt.figure(figsize=(10,7))\ntrain['LotArea'].value_counts().head(10).plot.bar(color='#808080')\nplt.xlabel(\"LotArea\")\nplt.ylabel(\"Count\")\nplt.title('Value Counts Graph For LotArea')\nplt.show()","6e138ccb":" #10    Very Excellent\n #9    Excellent\n #8    Very Good\n #7    Good \n #6    Above Average\n #5    Average\n #4    Below Average\n #3    Fair\n #2    Poor\n #1    Very Poor\nplt.figure(figsize=(10,7))\ntrain['OverallQual'].value_counts().plot.bar(color='#808080')\nplt.xlabel(\"LotArea\")\nplt.ylabel(\"Count\")\nplt.title('Value Counts Graph For LotArea')\nplt.show()","46cb14cc":"plt.figure(figsize=(10,7))\ntrain['YearBuilt'].value_counts().head(10).plot.bar(color='#808080')\nplt.xlabel(\"LotArea\")\nplt.ylabel(\"Count\")\nplt.title('Value Counts Graph For LotArea')\nplt.show()","40c8b30c":"plt.figure(figsize=(10,7))\ntrain['YearRemodAdd'].value_counts().head(10).plot.bar(color='#808080')\nplt.xlabel(\"LotArea\")\nplt.ylabel(\"Count\")\nplt.title('Value Counts Graph For LotArea')\nplt.show()","2fea87c9":"plt.figure(figsize=(10,7))\ntrain['1stFlrSF'].value_counts().head(10).plot.bar(color='#808080')\nplt.xlabel(\"LotArea\")\nplt.ylabel(\"Count\")\nplt.title('Value Counts Graph For LotArea')\nplt.show()","2c9147d6":"plt.figure(figsize=(10,7))\ntrain['GrLivArea'].value_counts().head(10).plot.bar(color='#808080')\nplt.xlabel(\"GrLivArea\")\nplt.ylabel(\"Count\")\nplt.title('Value Counts Graph For GrLivArea')\nplt.show()","6406c8e0":"plt.figure(figsize=(10,7))\ntrain['FullBath'].value_counts().plot.bar(color='#808080')\nplt.xlabel(\"FullBath\")\nplt.ylabel(\"Count\")\nplt.title('Value Counts Graph For FullBath')\nplt.show()","fb4d79e4":"plt.figure(figsize=(10,7))\ntrain['Fireplaces'].value_counts().plot.bar(color='#808080')\nplt.xlabel(\"Fireplaces\")\nplt.ylabel(\"Count\")\nplt.title('Value Counts Graph For Fireplaces')\nplt.show()","d79aa77e":"plt.figure(figsize=(10,7))\ntrain['TotRmsAbvGrd'].value_counts().head(10).plot.bar(color='#808080')\nplt.xlabel(\"TotRmsAbvGrd\")\nplt.ylabel(\"Count\")\nplt.title('Value Counts Graph For TotRmsAbvGrd')\nplt.show()","99e69287":"plt.figure(figsize=(10,7))\ntrain['OpenPorchSF'].value_counts().head(10).plot.bar(color='#808080')\nplt.xlabel(\"OpenPorchSF\")\nplt.ylabel(\"Count\")\nplt.title('Value Counts Graph For OpenPorchSF')\nplt.show()","7a8cfe51":"# main features for model building\ntrain_new= train[main_features].copy()\ntest_new = test[main_features].copy()\ny= train.SalePrice","0bac275c":"# train_test_split to check the best model \nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test= train_test_split(train_new,y, train_size=0.8, test_size=0.2, random_state=0)","ca0213a3":"from sklearn.linear_model import LinearRegression\nregr = LinearRegression()\nregr.fit(X_train, y_train)\npred=regr.predict(X_test)\nprint(regr.score(X_test, y_test))","e9b2ebcc":"from sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators = 150, max_depth=12, n_jobs=4, random_state = 0)\nregressor.fit(X_train, y_train)  \npred=regressor.predict(X_test)\nprint(regressor.score(X_test, y_test))","7f0f1a95":"from sklearn.tree import DecisionTreeRegressor\nregressorTree = DecisionTreeRegressor(random_state = 0)\nregressorTree.fit(X_train, y_train)  \npred=regressorTree.predict(X_test)\nprint(regressorTree.score(X_test, y_test))","cb7479be":"test_new=test[main_features].copy()","43d678b8":"regressor.fit(train_new,y)\npred_test=regressor.predict(test_new)","6f630beb":"# final submission \nmy_submission = pd.DataFrame({'Id':test.Id, 'SalePrice': pred_test})\nmy_submission.to_csv('submission.csv', index=False)","314a6b9f":"print(my_submission)","398ad492":"**RandomForest Regressor gives more accuracy**","5877eaa0":"# **Scatter plots**","c96f2e04":"**Plotting a bargraph of values we got from above(features named 'feature1,feature2,......,feature10)**","96eda1f2":"**RandomForestRegressor**","51e84da5":"# **Model building**","041693da":"# **Correlation Of Different Features**","55e6c1c3":"**DecisionTreeRegressor**","b14d3e76":"# **Plotting Graphs**","e2f2856c":"**LinearRegression**","c780909b":"# **Submission**"}}