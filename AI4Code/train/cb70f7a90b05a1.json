{"cell_type":{"6ebabd43":"code","b7e8b357":"code","cf9c7f0c":"code","502379c9":"code","529643c6":"code","675469f1":"code","9be7b6bd":"code","776a8484":"code","f2b81d5f":"code","f9f94f23":"code","385baa06":"code","6cc8a7eb":"code","b34e3045":"code","0dd126b3":"code","28c53601":"code","c74fa3c2":"code","69d3f91c":"code","9108ce77":"code","166b32f0":"code","c3837d57":"code","5580c07d":"code","18ab6d29":"code","5a44d810":"code","9c7cac7b":"code","3731bcb2":"code","3d814876":"code","5bed8a5a":"code","9518ef8b":"markdown","15eeb183":"markdown","80cb3fff":"markdown","dc43280d":"markdown","24977cc8":"markdown","3dcd30a2":"markdown","5702f76b":"markdown","81cce8cd":"markdown","d79bfd6c":"markdown","7c536c35":"markdown","1832c7f0":"markdown","9cd15db3":"markdown","d9bd482e":"markdown","0ee9f8a1":"markdown","22d8adeb":"markdown","4ab3d502":"markdown","b2ac9df5":"markdown","672749df":"markdown"},"source":{"6ebabd43":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b7e8b357":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.metrics import confusion_matrix\n\nfrom sklearn.model_selection import train_test_split, KFold, cross_val_score, GridSearchCV, StratifiedShuffleSplit, StratifiedKFold\n\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler, LabelEncoder, OneHotEncoder, Normalizer, QuantileTransformer, RobustScaler, \\\nPowerTransformer\n\nfrom imblearn.over_sampling import RandomOverSampler\n\nfrom sklearn.pipeline import Pipeline\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\n\nfrom sklearn.ensemble import AdaBoostClassifier, GradientBoostingClassifier, RandomForestClassifier, ExtraTreesClassifier","cf9c7f0c":"df=pd.read_csv(\"\/kaggle\/input\/water-potability\/water_potability.csv\")","502379c9":"df.head()","529643c6":"df.isnull().sum()\/len(df)*100","675469f1":"df.iloc[:,-1].value_counts()\/len(df)","9be7b6bd":"df.hist(figsize=(8,8))\nplt.tight_layout()","776a8484":"plt.figure(figsize=(8,8))\nsns.heatmap(df.corr(),annot=True)","f2b81d5f":"training,validation=train_test_split(df)\nX,y=training.iloc[:,0:9],training.iloc[:,9]","f9f94f23":"models = []\nmodels.append(('LR', LogisticRegression(solver='liblinear')))\nmodels.append(('LDA', LinearDiscriminantAnalysis()))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('CART', DecisionTreeClassifier()))\nmodels.append(('NB', GaussianNB()))\nmodels.append(('SVM', SVC(gamma='auto')))","385baa06":"imputer=SimpleImputer()\n\nresults = []\nnames = []\nfor name, model in models:\n    kfold = StratifiedKFold(n_splits=10, random_state=0, shuffle=True)\n    pipe=Pipeline([('imputer',imputer),('model',model)])\n    cv_results = cross_val_score(pipe, X, y, cv=kfold, scoring='accuracy')\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n    print(msg)","6cc8a7eb":"imputer=SimpleImputer()\nmodel=RandomForestClassifier()\npipe=Pipeline([('imputer',imputer),('model',model)])\npipe.fit(X,y)","b34e3045":"pipe.named_steps.model.feature_importances_","0dd126b3":"imputer=SimpleImputer()\n\nspace={'scaler':[MinMaxScaler(),StandardScaler(),Normalizer(),RobustScaler(),PowerTransformer(),QuantileTransformer()]}\n\nfor name, model in models:\n    kfold = StratifiedKFold(n_splits=10, random_state=0, shuffle=True)\n    pipe=Pipeline([('imputer',imputer),('scaler',MinMaxScaler()),('model',model)])\n    grid = GridSearchCV(estimator=pipe,param_grid=space, cv=10, scoring='accuracy')\n    grid.fit(X,y)\n    print(grid.best_params_,grid.best_score_.round(3),name)","28c53601":"ensembles = []\nensembles.append(('AB', AdaBoostClassifier()))\nensembles.append(('GBM', GradientBoostingClassifier()))\nensembles.append(('RF', RandomForestClassifier(n_estimators=10)))\nensembles.append(('ET', ExtraTreesClassifier(n_estimators=10)))","c74fa3c2":"imputer=SimpleImputer()\nresults = []\nnames = []\nfor name, model in ensembles:\n    kfold = StratifiedKFold(n_splits=10, random_state=0, shuffle=True)\n    pipe=Pipeline([('imputer',imputer),('model',model)])\n    cv_results = cross_val_score(pipe, X, y, cv=kfold, scoring='accuracy')\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n    print(msg)","69d3f91c":"imputer=SimpleImputer()\n\nspace={'scaler':[MinMaxScaler(),StandardScaler(),Normalizer(),RobustScaler(),PowerTransformer(),QuantileTransformer()]}\n\nfor name, model in ensembles:\n    kfold = StratifiedKFold(n_splits=10, random_state=0, shuffle=True)\n    pipe=Pipeline([('imputer',imputer),('scaler',MinMaxScaler()),('model',model)])\n    grid = GridSearchCV(estimator=pipe,param_grid=space, cv=10, scoring='accuracy')\n    grid.fit(X,y)\n    print(grid.best_params_,grid.best_score_.round(3),name)","9108ce77":"oversample = RandomOverSampler(sampling_strategy='minority')\nX_over, y_over = oversample.fit_resample(X, y)","166b32f0":"X.shape,y.shape","c3837d57":"y.value_counts()","5580c07d":"X_over.shape,y_over.shape","18ab6d29":"y_over.value_counts()","5a44d810":"imputer=SimpleImputer()\n\nresults = []\nnames = []\nfor name, model in models:\n    kfold = StratifiedKFold(n_splits=10, random_state=0, shuffle=True)\n    pipe=Pipeline([('imputer',imputer),('model',model)])\n    cv_results = cross_val_score(pipe, X_over, y_over, cv=kfold, scoring='accuracy')\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n    print(msg)","9c7cac7b":"imputer=SimpleImputer()\n\nspace={'scaler':[MinMaxScaler(),StandardScaler(),Normalizer(),RobustScaler(),PowerTransformer(),QuantileTransformer()]}\n\nfor name, model in models:\n    kfold = StratifiedKFold(n_splits=10, random_state=0, shuffle=True)\n    pipe=Pipeline([('imputer',imputer),('scaler',MinMaxScaler()),('model',model)])\n    grid = GridSearchCV(estimator=pipe,param_grid=space, cv=10, scoring='accuracy')\n    grid.fit(X_over,y_over)\n    print(grid.best_params_,grid.best_score_.round(3),name)","3731bcb2":"imputer=SimpleImputer()\nresults = []\nnames = []\nfor name, model in ensembles:\n    kfold = StratifiedKFold(n_splits=10, random_state=0, shuffle=True)\n    pipe=Pipeline([('imputer',imputer),('model',model)])\n    cv_results = cross_val_score(pipe, X_over, y_over, cv=kfold, scoring='accuracy')\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n    print(msg)","3d814876":"imputer=SimpleImputer()\n\nspace={'scaler':[MinMaxScaler(),StandardScaler(),Normalizer(),RobustScaler(),PowerTransformer(),QuantileTransformer()]}\n\nfor name, model in ensembles:\n    kfold = StratifiedKFold(n_splits=10, random_state=0, shuffle=True)\n    pipe=Pipeline([('imputer',imputer),('scaler',MinMaxScaler()),('model',model)])\n    grid = GridSearchCV(estimator=pipe,param_grid=space, cv=10, scoring='accuracy')\n    grid.fit(X_over,y_over)\n    print(grid.best_params_,grid.best_score_.round(3),name)","5bed8a5a":"model=ExtraTreesClassifier()\nscaler=StandardScaler()\nimputer=SimpleImputer()\npipe=Pipeline([('imputer',imputer),('scaler',scaler),('model',model)])\npipe.fit(X_over,y_over)\nX_val,y_val=validation.iloc[:,0:9],validation.iloc[:,9]\npredictions=pipe.predict(X_val)\nconfusion_matrix(predictions,y_val)","9518ef8b":"# Baseline","15eeb183":"# Feature importance with random forest","80cb3fff":"# Ensemble scaler grid search","dc43280d":"# Ensemble scaler grid search with oversampling","24977cc8":"# Ensemble baseline","3dcd30a2":"# Make predictions on the validation set","5702f76b":"# View class distribution ","81cce8cd":"# Create training and validation sets","d79bfd6c":"# Modeling","7c536c35":"# Oversampling","1832c7f0":"# Correlation","9cd15db3":"# Scaler grid search with oversampling","d9bd482e":"# Visualization","0ee9f8a1":"# Ensemble baseline with oversampling","22d8adeb":"# Ensemble","4ab3d502":"# Scaler grid search","b2ac9df5":"# Baseline with oversampling","672749df":"# Check for missing values"}}