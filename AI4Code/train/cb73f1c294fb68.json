{"cell_type":{"efed0e0e":"code","e62ea5d9":"code","eaaa5394":"code","450ff044":"code","2a40e5eb":"code","59f69718":"code","1a1dcb1f":"code","c804c6f2":"code","897741c6":"code","a520c80b":"code","b80236b6":"code","80a3d049":"code","219512af":"code","ce096684":"code","2e9bb3b4":"code","b7e0551e":"code","be1971f2":"code","dd8556ad":"code","129cb027":"code","8a448e9b":"code","d4cef766":"code","5562a583":"code","63a5afea":"code","7cf2c252":"code","2a799382":"code","3f06fa2d":"code","b94bf09b":"code","944b83bf":"code","408b24dd":"markdown","2a70902e":"markdown","1cca5d78":"markdown","004c470a":"markdown"},"source":{"efed0e0e":"import librosa, IPython\nimport librosa.display\nimport sklearn\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport numpy as np\nimport pandas as pd\nimport os\n\nimport tensorflow as tf\nimport tensorflow_addons as tfa\nfrom tensorflow.keras import layers \n\nimport matplotlib.pyplot as plt\nfrom IPython import display\nfrom IPython.display import clear_output\n\nimport glob\nimport imageio\nimport time","e62ea5d9":"seed=123\ntf.compat.v1.set_random_seed(seed)\nsession_conf = tf.compat.v1.ConfigProto(intra_op_parallelism_threads=1, inter_op_parallelism_threads=1)\nsess = tf.compat.v1.Session(graph=tf.compat.v1.get_default_graph(), config=session_conf)\ntf.compat.v1.keras.backend.set_session(sess)","eaaa5394":"AUTOTUNE = tf.data.experimental.AUTOTUNE","450ff044":"genres = [\n    \"hiphop\",\n    \"jazz\",\n    \"rock\",\n    \"blues\"\n]","2a40e5eb":"BASE_PATH = \"\/kaggle\/input\/gtzan-dataset-music-genre-classification\/Data\/genres_original\"\nBATCH_SIZE = 8\nepochs = 20\n# set the dimensionality of the latent space to a plane for visualization later\nlatent_dim = 2\nnum_examples_to_generate = 2","59f69718":"file = '..\/input\/gtzan-dataset-music-genre-classification\/Data\/genres_original\/classical\/classical.00005.wav'\nSignal , sr = librosa.load(file , sr = 22050) # n_samples = 2.6 * 60 * 22050","1a1dcb1f":"plt.figure(figsize=(15,5))\nlibrosa.display.waveplot(Signal , sr = sr)\nplt.xlabel('Time')\nplt.ylabel('Amplitude')\nplt.title(\"Classical music signal\")\nplt.show()","c804c6f2":"def DatasetLoader(class_):\n    music_list = np.array(sorted(os.listdir(BASE_PATH+'\/'+class_)))\n    train_music_1 = list(music_list[[0,52,19,39,71,12,75,85,3,45,24,46,88]]) #99,10,66,76,41\n    train_music_2 = list(music_list[[4,43,56,55,45,31,11,13,70,37,21,78]]) #65,32,53,22,19,80,89,\n    TrackSet_1 = [(BASE_PATH)+'\/'+class_+'\/%s'%(x) for x in train_music_1]\n    TrackSet_2 = [(BASE_PATH)+'\/'+class_+'\/%s'%(x) for x in train_music_2]\n\n    return TrackSet_1, TrackSet_2","897741c6":"def load(file_):\n    data_, sampling_rate = librosa.load(file_,sr=3000, offset=0.0, duration=30)\n    data_ = data_.reshape(1,90001)\n    return data_\nmap_data = lambda filename: tf.compat.v1.py_func(load, [filename], [tf.float32])","a520c80b":"TrackSet_1, TrackSet_2 = DatasetLoader('jazz')","b80236b6":"sample = TrackSet_1[1]\nsample_, sampling_rate = librosa.load(sample,sr=3000, offset=0.0, duration=30)\ndisplay.Audio(sample_,rate=3000)","80a3d049":"train_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices((TrackSet_1))\n    .map(map_data, num_parallel_calls=AUTOTUNE)\n    .shuffle(3)\n    .batch(BATCH_SIZE)\n)\ntest_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices((TrackSet_2))\n    .map(map_data, num_parallel_calls=AUTOTUNE)\n    .shuffle(3)\n    .batch(BATCH_SIZE)\n)","219512af":"class Resnet1DBlock(tf.keras.Model):\n    def __init__(self, kernel_size, filters,type='encode'):\n        super(Resnet1DBlock, self).__init__(name='')\n    \n        if type=='encode':\n            self.conv1a = layers.Conv1D(filters, kernel_size, 2,padding=\"same\")\n            self.conv1b = layers.Conv1D(filters, kernel_size, 1,padding=\"same\")\n            self.norm1a = tfa.layers.InstanceNormalization()\n        if type=='decode':\n            self.conv1a = layers.Conv1DTranspose(filters, kernel_size, 1,padding=\"same\")\n            self.conv1b = layers.Conv1DTranspose(filters, kernel_size, 1,padding=\"same\")\n            self.norm1a = tf.keras.layers.BatchNormalization()\n        else:\n            return None\n        \n    def call(self, input_tensor):\n        x = tf.nn.relu(input_tensor)\n        x = self.conv1a(x)\n        x = self.norm1a(x)\n        x = layers.LeakyReLU(0.4)(x)\n\n        x = self.conv1b(x)\n        x = self.norm1a(x)\n        x = layers.LeakyReLU(0.4)(x)\n\n        x += input_tensor\n        return tf.nn.relu(x)","ce096684":"class CVAE(tf.keras.Model):\n    \"\"\"Convolutional variational autoencoder.\"\"\"\n\n    def __init__(self, latent_dim):\n        super(CVAE, self).__init__()\n        self.latent_dim = latent_dim\n        self.encoder = tf.keras.Sequential(\n            [\n                tf.keras.layers.InputLayer(input_shape=(1,90001)),\n                layers.Conv1D(64,1,2),\n                Resnet1DBlock(64,1),\n                layers.Conv1D(128,1,2),\n                Resnet1DBlock(128,1),\n                layers.Conv1D(128,1,2),\n                Resnet1DBlock(128,1),\n                layers.Conv1D(256,1,2),\n                Resnet1DBlock(256,1),\n                # No activation\n                layers.Flatten(),\n                layers.Dense(latent_dim+latent_dim)\n\n            ]\n        )\n        self.decoder = tf.keras.Sequential(\n            [\n                tf.keras.layers.InputLayer(input_shape=(latent_dim,)),\n                layers.Reshape(target_shape=(1,latent_dim)),\n                Resnet1DBlock(512,1,'decode'),\n                layers.Conv1DTranspose(512,1,1),\n                Resnet1DBlock(256,1,'decode'),\n                layers.Conv1DTranspose(256,1,1),\n                Resnet1DBlock(128,1,'decode'),\n                layers.Conv1DTranspose(128,1,1),\n                Resnet1DBlock(64,1,'decode'),\n                layers.Conv1DTranspose(64,1,1),\n                # No activation\n                layers.Conv1DTranspose(90001,1,1),\n            ]\n        )\n    \n    @tf.function\n    def sample(self, eps=None):\n        if eps is None:\n            eps = tf.random.normal(shape=(200, self.latent_dim))\n        return self.decode(eps, apply_sigmoid=True)\n    @tf.function\n    def encode(self, x):\n        mean, logvar = tf.split(self.encoder(x), num_or_size_splits=2, axis=1)\n        return mean, logvar\n    @tf.function\n    def reparameterize(self, mean, logvar):\n        eps = tf.random.normal(shape=mean.shape)\n        return eps * tf.exp(logvar * .5) + mean\n    @tf.function\n    def decode(self, z, apply_sigmoid=False):\n        logits = self.decoder(z)\n        if apply_sigmoid:\n            probs = tf.sigmoid(logits)\n            return probs\n        return logits","2e9bb3b4":"optimizer = tf.keras.optimizers.Adam(0.0003,beta_1=0.9, beta_2=0.999,epsilon=1e-08)","b7e0551e":"@tf.function\ndef log_normal_pdf(sample, mean, logvar, raxis=1):\n    log2pi = tf.math.log(2. * np.pi)\n    return tf.reduce_sum(\n         -.5 * ((sample - mean) ** 2. * tf.exp(-logvar) + logvar + log2pi),\n          axis=raxis)","be1971f2":"@tf.function\ndef compute_loss(model, x):\n    mean, logvar = model.encode(x)\n    z = model.reparameterize(mean, logvar)\n    x_logit = model.decode(z)\n    cross_ent = tf.nn.sigmoid_cross_entropy_with_logits(logits=x_logit, labels=x)\n    logpx_z = -tf.reduce_sum(cross_ent, axis=[1,2])\n    logpz = log_normal_pdf(z, 0., 0.)\n    logqz_x = log_normal_pdf(z, mean, logvar)\n    return -tf.reduce_mean(logpx_z + logpz - logqz_x)","dd8556ad":"@tf.function\ndef train_step(model, x, optimizer):\n    \n    \"\"\"Executes one training step and returns the loss.\n\n       This function computes the loss and gradients, and uses the latter to\n       update the model's parameters.\n     \"\"\"\n    with tf.GradientTape() as tape:\n            mean, logvar = model.encode(x)\n            z = model.reparameterize(mean, logvar)\n            x_logit = model.decode(z)\n            cross_ent = tf.nn.sigmoid_cross_entropy_with_logits(logits=x_logit, labels=x)\n            logpx_z = -tf.reduce_sum(cross_ent, axis=[1,2])\n            logpz = log_normal_pdf(z, 0., 0.)\n            logqz_x = log_normal_pdf(z, mean, logvar)\n            loss_KL = -tf.reduce_mean(logpx_z + logpz - logqz_x)\n            reconstruction_loss = tf.reduce_mean(\n                     tf.keras.losses.binary_crossentropy(x, x_logit)\n                 )\n            total_loss = reconstruction_loss+ loss_KL\n    gradients = tape.gradient(total_loss, model.trainable_variables)\n    optimizer.apply_gradients(zip(gradients, model.trainable_variables))","129cb027":"random_vector_for_generation = tf.random.normal(\n    shape=[num_examples_to_generate, latent_dim])\nmodel = CVAE(latent_dim)","8a448e9b":"\nsave_music=[]\ndef generate_and_save_images(model, epoch, test_sample):\n    mean, logvar = model.encode(test_sample)\n    z = model.reparameterize(mean, logvar)\n    predictions = model.sample(z)\n    fig = plt.figure(figsize=(18, 15))\n\n    for i in range(predictions.shape[0]):\n        plt.subplot(4, 4, i + 1)\n        wave = np.asarray(predictions[i])\n        if epoch>14:\n            save_music.append(wave)\n        librosa.display.waveplot(wave[0], sr=3000)\n\n    # tight_layout minimizes the overlap between 2 sub-plots\n    plt.savefig('jazz_{:04d}.png'.format(epoch))\n    plt.show()","d4cef766":"assert BATCH_SIZE >= num_examples_to_generate\nfor test_batch in test_dataset.take(1):\n    test_sample = test_batch[0]","5562a583":"generate_and_save_images(model, 0, test_sample)\nresults = {}\nresults['loss'] = []\nresults['time'] = []\nfor epoch in range(1, epochs + 1):\n    start_time = time.time()\n    for train_x in train_dataset:\n        train_x = np.asarray(train_x)[0]\n        train_step(model, train_x, optimizer)\n    end_time = time.time()\n\n    loss = tf.keras.metrics.Mean()\n    for test_x in test_dataset:\n        test_x = np.asarray(test_x)[0]\n        loss(compute_loss(model, test_x))\n    display.clear_output(wait=False)\n    elbo = -loss.result()\n    results['loss'].append(elbo)\n    results['time'].append(end_time - start_time)\n    print('Epoch: {}, Test set ELBO: {}, time elapse for current epoch: {}'.format(epoch, elbo, end_time - start_time))\n    generate_and_save_images(model, epoch, test_sample)","63a5afea":"anim_file_1 = 'jazz_cvae.gif'\n\nwith imageio.get_writer(anim_file_1, mode='I') as writer:\n    filenames = glob.glob('jazz*.png')\n    filenames = sorted(filenames)\n    for filename in filenames:\n        image = imageio.imread(filename)\n        writer.append_data(image)\n    image = imageio.imread(filename)\n    writer.append_data(image)","7cf2c252":"l1=save_music[18][0]\ndisplay.Audio(l1,rate=3000)","2a799382":"plt.figure(figsize=(15,5))\nlibrosa.display.waveplot(l1 , sr = sr)\nplt.xlabel('Time')\nplt.ylabel('Amplitude')\nplt.title(\"Classical music signal\")\nplt.show()","3f06fa2d":"results['loss'] = [i.numpy for i in results['loss']]","b94bf09b":"results['loss'] =[i() for i in results['loss']]","944b83bf":"pd.DataFrame(results).plot()","408b24dd":"p","2a70902e":"# Music generation\n\n**import all necessary libraries**","1cca5d78":"*configuration*","004c470a":"**Load music**"}}