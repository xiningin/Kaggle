{"cell_type":{"65ad594f":"code","e860ca12":"code","0af254c2":"code","5f749122":"code","a906a4e3":"code","619302f8":"code","29f8d7b5":"code","129aa91d":"code","22226540":"code","3d7af190":"code","97c5900d":"code","1dd6882a":"code","23a2cda5":"code","1db41fb4":"code","3ae7e378":"code","509184bd":"code","d6c0629f":"code","b4e2d1f9":"code","6190d64e":"code","7e7cc51d":"code","fe13e597":"code","ef2fd31b":"code","e297a1ca":"code","e4dd04f4":"code","5e497c5d":"code","d3ee8ff3":"code","e47901e0":"code","00d3846d":"code","b1f826e0":"code","33fdd35e":"code","81342a05":"code","1aa02544":"code","79bc16d6":"code","628cc2dd":"code","db97b366":"code","b5914cd7":"code","06e5fd7c":"code","4843b1aa":"code","de19a189":"code","d7361689":"code","f9ecbf17":"code","5730b37b":"code","4ae4c987":"code","ee615aed":"code","dab02c36":"code","02ab85e9":"code","f2efb171":"code","66631aa9":"code","4eec1177":"code","2ff493b2":"code","47db52df":"code","8497795a":"code","3c66c1f3":"code","7079831b":"code","1c745c2c":"code","ca826c76":"code","a87acff9":"code","6452298d":"code","3305c519":"code","4a1bad55":"code","bafdef73":"markdown","224876d5":"markdown","b3c12c69":"markdown","ec50e8d0":"markdown","681ed471":"markdown","d65ca621":"markdown","0220ddd5":"markdown","5f233848":"markdown","07791eee":"markdown","ac79986d":"markdown","9b40294d":"markdown","e0f13b90":"markdown","057c70b1":"markdown","b0e60a2d":"markdown","91fceb27":"markdown","bf414bf9":"markdown","67709ab7":"markdown","b22f6381":"markdown","3f40f498":"markdown","c0038e29":"markdown","e4394029":"markdown","418e0a70":"markdown","42a9a88f":"markdown","a65e86d4":"markdown","100ebf28":"markdown","5a1e9beb":"markdown"},"source":{"65ad594f":"import pandas as pd\nimport numpy as np","e860ca12":"INPUT_PATH='..\/input\/chaii-hindi-and-tamil-question-answering\/'","0af254c2":"sub = pd.read_csv(INPUT_PATH+'sample_submission.csv')\nsub.head(1)","5f749122":"train = pd.read_csv(INPUT_PATH+'train.csv')\ntrain.head()","a906a4e3":"train.loc[0,'context']","619302f8":"train.loc[0,'question']","29f8d7b5":"train.language.value_counts()","129aa91d":"test = pd.read_csv(INPUT_PATH+'test.csv')\ntest.head()","22226540":"len(test)","3d7af190":"import transformers","97c5900d":"model_checkpoint = '..\/input\/xlm-roberta-squad2\/deepset\/xlm-roberta-large-squad2'\nbatch_size = 4","1dd6882a":"from transformers import AutoTokenizer\n    \ntokenizer = AutoTokenizer.from_pretrained(model_checkpoint)","23a2cda5":"from transformers import AutoModelForQuestionAnswering, AutoTokenizer, pipeline\nmodel_name = \"..\/input\/xlm-roberta-squad2\/deepset\/xlm-roberta-large-squad2\"\nnlp = pipeline('question-answering', model=model_name, tokenizer=model_name)\nmodel = AutoModelForQuestionAnswering.from_pretrained(model_name)\ntokenizer = AutoTokenizer.from_pretrained(model_name)\nQA_input = {\n    'question': 'What sports do you like?',\n    'context': 'My name is lunana. I like swimming.'\n}\nres = nlp(QA_input)\nres['answer']","1db41fb4":"QA_input = {\n    'question': 'Who are you?',\n    'context': 'My name is lunana. I like swimming.'\n}\nres = nlp(QA_input)\nres['answer']","3ae7e378":"context='The skeleton of a normal adult human contains the following 206 (208 if the sternum is divided into three parts). This number may vary depending on the anatomical differences. For example, a very small number of people have an extra rib (neck) or an extra lower spine; If some of the joined bones are not considered a separate bone, the five joint vertebrae; The 26 number of vertebrae, including three (3 - 5) vertebrae, can be considered 33. \\ nThe human skull contains 22 bones (excluding the ear canals); These are divided into eight cranium bones and 14 facial bones. (Bold numbers refer to the numbers in the adjacent figure.) \\ N \\ n \\ n \\ nCapillary bones (8) \\ n 1 frontal bone \\ n 2 parietal bone (2) \\ n 3 temporal bone (temporal bone) 2) \\ n4 occipital bone \\ nsphenoid bone \\ n ethmoid bone \\ nfacial bones (14) \\ n 7 mandible \\ n 6 maxilla (2 ) \\ n palatine bone (2) \\ n 5 zygomatic bone (2) \\ n 9 nasal bone (2) \\ n lacrimal bone (2) \\ n nasal wall Bone (vomer) \\ nInferior nasal conchae (2) \\ nIn midsoles (6): \\ nMalleus \\ nIncus \\ nStapes \\ nThroat (1): \\ nThroat Bone (navoid bone) (hyoid) \\ nShort (4): \\ n 25. Clavicle \\ n 29. Scapula \\ nThorax (25): \\ n 10. sternum (1 ) \\ nCan be considered as three more: manubrium, body sternum Body (sternum), xiphoid process \\ n 28. ribs (rib) (24) \\ n vertebral column (33): \\ n 8. cervical vertebra (7) \\ nThoracic vertebra (12) \\ n 14. Lumbar vertebra (5) \\ n 16. sacrum \\ nTail (coccyx) \\ nwax (arm) ( 1): \\ n 11. humerus \\ n 26. condyles of humerus \\ n forearm (4): \\ n 12. ulna (2) \\ n 13. radius (2) \\ n 27. Radius head (radius) \\ nHand (hand) (54): \\ nCarpal: \\ nScaphoid ( 2) \\ nlunate (2) \\ nThree triquetrum (2) \\ nPisiform (2) \\ nTrapezium (2) \\ nTrapezoid (2) \\ nCapitate (2) \\ nHamate (2) \\ nFemoral bones (metacarpal): (5 \u00d7 2) \\ nPhalange: \\ nProximal phalanges (5 \u00d7 2) \\ nIntermediate phalanges (4 \u00d7 2) \\ nDistal phalanges (5 \u00d7 2) \\ nPelvis (2): \\ n 15. Ilium and lower hip (ischium) \\ n \\ n \\ nLeg (8): \\ n 18. Femur (2) \\ n 17. hip joint (joint, bone) \\ n 22. greater trochanter of femur \\ n 23. condyles of femur \\ n 19. patella (2) \\ n 20. Tibia (tibia) (2) \\ n 21. Fibula (2) \\ nFoot (52): \\ nTarsal: \\ nHeel ( calcaneus) (2) \\ nTalus (2) \\ n navicular bone (2) \\ nInterval wedge bone (2) \\ nIndial wedge bone (2) \\ nOuter wedge bone (2) \\ n Cuboidal bone (2) \\ nMetatarsal (5 \u00d7 2) \\ nFinger (p halange): \\ nProximal phalanges (5 \u00d7 2) \\ nInternal phalanges (4 \u00d7 2) \\ nDistal phalanges (5 \u00d7 2) \\ nBy infantile skeleton The incoming bones are extra: \\ nThe cranial and cranial bones (21), which together form the cranium. Together they form the ribs \\ nThe hip, lower pelvis and pubis (pubis) combine to form the pelvis in adults \\ n \\ nCategory: Human anatomy \\ nCategory: Bones'","509184bd":"question='How many bones are there in the human body?'","d6c0629f":"QA_input = {\n    'question': question,\n    'context': context\n}\nres = nlp(QA_input)\nres['answer']","b4e2d1f9":"train['num_tokens_context'] = train['context'].apply(lambda t: len(tokenizer(t)['input_ids']))","6190d64e":"train.loc[0,'num_tokens_context']","7e7cc51d":"train['num_tokens_context'].hist()","fe13e597":"max_length = 384 # The maximum length of a feature (question and context)\ndoc_stride = 128 # The authorized overlap between two part of the context when splitting it is needed.","ef2fd31b":"pad_on_right = tokenizer.padding_side == \"right\"","e297a1ca":"def prepare_train_features(examples):\n    examples[\"question\"] = [q.lstrip() for q in examples[\"question\"]]\n\n    tokenized_examples = tokenizer(\n        examples[\"question\" if pad_on_right else \"context\"],\n        examples[\"context\" if pad_on_right else \"question\"],\n        truncation=\"only_second\" if pad_on_right else \"only_first\",\n        max_length=max_length,\n        stride=doc_stride,\n        return_overflowing_tokens=True,\n        return_offsets_mapping=True,\n        padding=\"max_length\",\n    )\n\n    sample_mapping = tokenized_examples.pop(\"overflow_to_sample_mapping\")\n    offset_mapping = tokenized_examples.pop(\"offset_mapping\")\n\n    tokenized_examples[\"start_positions\"] = []\n    tokenized_examples[\"end_positions\"] = []\n\n    for i, offsets in enumerate(offset_mapping):\n        input_ids = tokenized_examples[\"input_ids\"][i]\n        cls_index = input_ids.index(tokenizer.cls_token_id)\n\n        sequence_ids = tokenized_examples.sequence_ids(i)\n\n        sample_index = sample_mapping[i]\n        answers = examples[\"answers\"][sample_index]\n        if len(answers[\"answer_start\"]) == 0:\n            tokenized_examples[\"start_positions\"].append(cls_index)\n            tokenized_examples[\"end_positions\"].append(cls_index)\n        else:\n            start_char = answers[\"answer_start\"][0]\n            end_char = start_char + len(answers[\"text\"][0])\n\n            token_start_index = 0\n            while sequence_ids[token_start_index] != (1 if pad_on_right else 0):\n                token_start_index += 1\n\n            token_end_index = len(input_ids) - 1\n            while sequence_ids[token_end_index] != (1 if pad_on_right else 0):\n                token_end_index -= 1\n\n            if not (offsets[token_start_index][0] <= start_char and offsets[token_end_index][1] >= end_char):\n                tokenized_examples[\"start_positions\"].append(cls_index)\n                tokenized_examples[\"end_positions\"].append(cls_index)\n            else:\n                while token_start_index < len(offsets) and offsets[token_start_index][0] <= start_char:\n                    token_start_index += 1\n                tokenized_examples[\"start_positions\"].append(token_start_index - 1)\n                while offsets[token_end_index][1] >= end_char:\n                    token_end_index -= 1\n                tokenized_examples[\"end_positions\"].append(token_end_index + 1)\n\n    return tokenized_examples","e4dd04f4":"#!pip uninstall fsspec -qq -y\n#!pip install fsspec \n\n!pip install --no-index --find-links ..\/input\/hf-datasets\/wheels datasets -qq","5e497c5d":"from datasets import Dataset","d3ee8ff3":"def convert_answers(r):\n    start = r[0]\n    text = r[1]\n    return {\n        'answer_start': [start],\n        'text': [text]\n    }","e47901e0":"train = train.sample(frac=1, random_state=42)\ntrain['answers'] = train[['answer_start', 'answer_text']].apply(convert_answers, axis=1)","00d3846d":"train.loc[0,'answers']","b1f826e0":"df_train = train[:-64].reset_index(drop=True)\ndf_valid = train[-64:].reset_index(drop=True)","33fdd35e":"train_dataset = Dataset.from_pandas(df_train)\nvalid_dataset = Dataset.from_pandas(df_valid)","81342a05":"train_dataset[0]","1aa02544":"tokenized_train_ds = train_dataset.map(prepare_train_features, batched=True, remove_columns=train_dataset.column_names)\ntokenized_valid_ds = valid_dataset.map(prepare_train_features, batched=True, remove_columns=train_dataset.column_names)","79bc16d6":"from transformers import AutoModelForQuestionAnswering, TrainingArguments, Trainer\n\nmodel = AutoModelForQuestionAnswering.from_pretrained(model_checkpoint)","628cc2dd":"%env WANDB_DISABLED=True","db97b366":"args = TrainingArguments(\n    f\"chaii-qa\",\n    evaluation_strategy = \"epoch\",\n    save_strategy = \"epoch\",\n    learning_rate=3e-5,\n    warmup_ratio=0.1,\n    gradient_accumulation_steps=8,\n    per_device_train_batch_size=batch_size,\n    per_device_eval_batch_size=batch_size,\n    num_train_epochs=1,\n    weight_decay=0.01,\n)","b5914cd7":"from transformers import default_data_collator\n\ndata_collator = default_data_collator","06e5fd7c":"trainer = Trainer(\n    model,\n    args,\n    train_dataset=tokenized_train_ds,\n    eval_dataset=tokenized_valid_ds,\n    data_collator=data_collator,\n    tokenizer=tokenizer,\n)","4843b1aa":"trainer.train()","de19a189":"trainer.save_model(\"chaii-bert-trained\")","d7361689":"def prepare_validation_features(examples):\n    examples[\"question\"] = [q.lstrip() for q in examples[\"question\"]]\n\n    tokenized_examples = tokenizer(\n        examples[\"question\" if pad_on_right else \"context\"],\n        examples[\"context\" if pad_on_right else \"question\"],\n        truncation=\"only_second\" if pad_on_right else \"only_first\",\n        max_length=max_length,\n        stride=doc_stride,\n        return_overflowing_tokens=True,\n        return_offsets_mapping=True,\n        padding=\"max_length\",\n    )\n\n    sample_mapping = tokenized_examples.pop(\"overflow_to_sample_mapping\")\n\n    tokenized_examples[\"example_id\"] = []\n\n    for i in range(len(tokenized_examples[\"input_ids\"])):\n        sequence_ids = tokenized_examples.sequence_ids(i)\n        context_index = 1 if pad_on_right else 0\n\n        sample_index = sample_mapping[i]\n        tokenized_examples[\"example_id\"].append(examples[\"id\"][sample_index])\n\n        tokenized_examples[\"offset_mapping\"][i] = [\n            (o if sequence_ids[k] == context_index else None)\n            for k, o in enumerate(tokenized_examples[\"offset_mapping\"][i])\n        ]\n\n    return tokenized_examples","f9ecbf17":"validation_features = valid_dataset.map(\n    prepare_validation_features,\n    batched=True,\n    remove_columns=valid_dataset.column_names\n)","5730b37b":"len(validation_features)","4ae4c987":"valid_feats_small = validation_features.map(lambda example: example, remove_columns=['example_id', 'offset_mapping'])\nvalid_feats_small","ee615aed":"raw_predictions = trainer.predict(valid_feats_small)","dab02c36":"max_answer_length = 30","02ab85e9":"import collections\n\nexamples = valid_dataset\nfeatures = validation_features\n\nexample_id_to_index = {k: i for i, k in enumerate(examples[\"id\"])}\nfeatures_per_example = collections.defaultdict(list)\nfor i, feature in enumerate(features):\n    features_per_example[example_id_to_index[feature[\"example_id\"]]].append(i)","f2efb171":"from tqdm.auto import tqdm\n\ndef postprocess_qa_predictions(examples, features, raw_predictions, n_best_size = 20, max_answer_length = 30):\n    all_start_logits, all_end_logits = raw_predictions\n    example_id_to_index = {k: i for i, k in enumerate(examples[\"id\"])}\n    features_per_example = collections.defaultdict(list)\n    for i, feature in enumerate(features):\n        features_per_example[example_id_to_index[feature[\"example_id\"]]].append(i)\n\n    predictions = collections.OrderedDict()\n\n    print(f\"Post-processing {len(examples)} example predictions split into {len(features)} features.\")\n\n    for example_index, example in enumerate(tqdm(examples)):\n        feature_indices = features_per_example[example_index]\n\n        min_null_score = None \n        valid_answers = []\n        \n        context = example[\"context\"]\n        for feature_index in feature_indices:\n            start_logits = all_start_logits[feature_index]\n            end_logits = all_end_logits[feature_index]\n            offset_mapping = features[feature_index][\"offset_mapping\"]\n\n            cls_index = features[feature_index][\"input_ids\"].index(tokenizer.cls_token_id)\n            feature_null_score = start_logits[cls_index] + end_logits[cls_index]\n            if min_null_score is None or min_null_score < feature_null_score:\n                min_null_score = feature_null_score\n\n            start_indexes = np.argsort(start_logits)[-1 : -n_best_size - 1 : -1].tolist()\n            end_indexes = np.argsort(end_logits)[-1 : -n_best_size - 1 : -1].tolist()\n            for start_index in start_indexes:\n                for end_index in end_indexes:\n                    if (\n                        start_index >= len(offset_mapping)\n                        or end_index >= len(offset_mapping)\n                        or offset_mapping[start_index] is None\n                        or offset_mapping[end_index] is None\n                    ):\n                        continue\n                    if end_index < start_index or end_index - start_index + 1 > max_answer_length:\n                        continue\n\n                    start_char = offset_mapping[start_index][0]\n                    end_char = offset_mapping[end_index][1]\n                    valid_answers.append(\n                        {\n                            \"score\": start_logits[start_index] + end_logits[end_index],\n                            \"text\": context[start_char: end_char]\n                        }\n                    )\n        \n        if len(valid_answers) > 0:\n            best_answer = sorted(valid_answers, key=lambda x: x[\"score\"], reverse=True)[0]\n        else:\n            best_answer = {\"text\": \"\", \"score\": 0.0}\n        \n        predictions[example[\"id\"]] = best_answer[\"text\"]\n\n    return predictions","66631aa9":"final_predictions = postprocess_qa_predictions(valid_dataset, validation_features, raw_predictions.predictions)","4eec1177":"references = [{\"id\": ex[\"id\"], \"answer\": ex[\"answers\"]['text'][0]} for ex in valid_dataset]","2ff493b2":"def jaccard(row): \n    str1 = row[0]\n    str2 = row[1]\n    a = set(str1.lower().split()) \n    b = set(str2.lower().split())\n    c = a.intersection(b)\n    return float(len(c)) \/ (len(a) + len(b) - len(c))","47db52df":"res = pd.DataFrame(references)\nres['prediction'] = res['id'].apply(lambda r: final_predictions[r])\nres['jaccard'] = res[['answer', 'prediction']].apply(jaccard, axis=1)\nres","8497795a":"res.jaccard.mean()","3c66c1f3":"test_dataset = Dataset.from_pandas(test)","7079831b":"test_features = test_dataset.map(\n    prepare_validation_features,\n    batched=True,\n    remove_columns=test_dataset.column_names\n)","1c745c2c":"test_feats_small = test_features.map(lambda example: example, remove_columns=['example_id', 'offset_mapping'])\ntest_feats_small","ca826c76":"test_predictions = trainer.predict(test_feats_small)","a87acff9":"test_features.set_format(type=test_features.format[\"type\"], columns=list(test_features.features.keys()))","6452298d":"final_test_predictions = postprocess_qa_predictions(test_dataset, test_features, test_predictions.predictions)","3305c519":"sub['PredictionString'] = sub['id'].apply(lambda r: final_test_predictions[r])\nsub.head()","4a1bad55":"sub.to_csv('submission.csv', index=False)","bafdef73":"**\u9b54\u7406\u6c99:\u30bf\u30df\u30eb\u3068\u30d2\u30f3\u30c7\u30a3\u30fc\u3092\u82f1\u8a9e\u306b\u7ffb\u8a33\u3067\u304d\u308c\u3070\u3044\u3044\u306e\u304b\uff1f\u3042\u308b\u3044\u306f\u3001roberta\u3092finetuning\u3059\u308c\u3070\u3044\u3044\u306e\u304b\uff1f\u306f\u305f\u307e\u305f\u3001\u3046p\u4e3b\u306b\u305d\u306e\u529b\u304c\u3042\u308b\u306e\u304b\uff1f\uff1f**","224876d5":"**\u970a\u5922:PredictionString\u306fanswer_text\u306e\u5bfe\u7b49\u304b\u306a\uff1f**","b3c12c69":"**\u9b54\u7406\u6c99:\u3053\u308c\u306f\u3084\u3089\u306a\u304f\u3066\u3044\u3044\u307f\u305f\u3044\u3002**","ec50e8d0":"**\u970a\u5922:\u30bf\u30df\u30eb\u8a9e\u306f\u5357\u30a4\u30f3\u30c9\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u8a00\u8a9e\u3089\u3057\u3044\u305e\u3002  \n\u9b54\u7406\u6c99:\u3046p\u4e3b\u306fTensor Girl\u69d8\u3092\u53c2\u8003\u306b\u3059\u308b\u3089\u3057\u3044\u305e\u3002**\n\n[https:\/\/www.kaggle.com\/usharengaraju\/chaii-eda-and-preprocessing-weights-biases](https:\/\/www.kaggle.com\/usharengaraju\/chaii-eda-and-preprocessing-weights-biases)","681ed471":"**\u9b54\u7406\u6c99:\u30d2\u30f3\u30c7\u30a3\u30fc\u8a9e\u3068\u30bf\u30df\u30eb\u8a9e\u306f2:1\u306e\u5272\u5408\u3067\u3042\u308b\u306d\u3002**","d65ca621":"**\u970a\u5922:\u63d0\u51fa\u7528\u30d5\u30a1\u30a4\u30eb\u3060\u306d\u3002  \n\u9b54\u7406\u6c99:PredictionString\u3063\u3066\u4f55\uff1f**","0220ddd5":"\u5217\n* id -\u4e00\u610f\u306e\u8b58\u5225\u5b50\n* context -\u56de\u7b54\u306e\u5143\u3068\u306a\u308b\u30d2\u30f3\u30c7\u30a3\u30fc\u8a9e\/\u30bf\u30df\u30eb\u8a9e\u306e\u30b5\u30f3\u30d7\u30eb\u306e\u30c6\u30ad\u30b9\u30c8\n* question -\u8cea\u554f\u3001\u30d2\u30f3\u30c7\u30a3\u30fc\u8a9e\/\u30bf\u30df\u30eb\u8a9e\n* answer_text \uff08\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u306e\u307f\uff09-\u8cea\u554f\u3078\u306e\u56de\u7b54\uff08\u624b\u52d5\u6ce8\u91c8\uff09\uff08\u6ce8\uff1a\u30c6\u30b9\u30c8\u306e\u5834\u5408\u3001\u3053\u308c\u306f\u4e88\u6e2c\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u3082\u306e\u3067\u3059\uff09\n* answer_start\uff08\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u306e\u307f\uff09-context\u56de\u7b54\u306e\u958b\u59cb\u6587\u5b57\uff08\u30c7\u30fc\u30bf\u6e96\u5099\u4e2d\u306b\u90e8\u5206\u6587\u5b57\u5217\u306e\u4e00\u81f4\u3092\u4f7f\u7528\u3057\u3066\u6c7a\u5b9a\uff09\n* language -\u554f\u984c\u306e\u30c6\u30ad\u30b9\u30c8\u304c\u30bf\u30df\u30eb\u8a9e\u304b\u30d2\u30f3\u30c7\u30a3\u30fc\u8a9e\u304b","5f233848":"**\u970a\u5922:\u30a4\u30f3\u30c9\u306f14\u5104\u4eba\u3082\u3044\u308b\u306e\u304b\u3002  \n\u9b54\u7406\u6c99:\u4e2d\u56fd\u3068\u307b\u307c\u540c\u3058\u3058\u3083\u3093\u3002\u305d\u308a\u3083\u3001\u305f\u304f\u3055\u3093\u8a00\u8449\u304c\u3042\u308b\u308f\u3051\u3060\u3002**","07791eee":"**\u3046p\u4e3b:\u4eca\u56de\u306f\u624b\u306b\u8ca0\u3048\u306a\u3044\u306e\u3067\u3053\u3053\u307e\u3067\u3067\u3059\u3002\u3046p\u4e3b\u306b\u306f\u529b\u304c\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002**\n![https:\/\/3.bp.blogspot.com\/-qVOh7kBBEdw\/Wn1aMftNAGI\/AAAAAAABKS0\/IlYjJ89HXK4-G6U7007l3nJovIfKsWt3ACLcBGAs\/s400\/pose_kuyashii_woman.png](https:\/\/3.bp.blogspot.com\/-qVOh7kBBEdw\/Wn1aMftNAGI\/AAAAAAABKS0\/IlYjJ89HXK4-G6U7007l3nJovIfKsWt3ACLcBGAs\/s400\/pose_kuyashii_woman.png)","ac79986d":"**\u970a\u5922:\u30d2\u30f3\u30c7\u30a3\u30fc\u3068\u30bf\u30df\u30eb\u5206\u3051\u306a\u304f\u3066\u3044\u3044\u306e\u304b\u306a\uff1f**","9b40294d":"**\u970a\u5922:\u4eba\u4f53\u89e3\u5256\u5b66\u306e\u9aa8\u306e\u8a71\uff1f**","e0f13b90":"**\u970a\u5922:answer_start\u3063\u3066\u4f55\u306b\u4f7f\u3046\u306e\u304b\u306a\uff1f**","057c70b1":"**\u970a\u5922:Tensor Girl\u69d8\u306e\u306f\u3046\u307e\u304f\u5b9f\u884c\u3067\u304d\u306a\u304b\u3063\u305f\u306e\u3067\u3001Darek K\u0142eczek\u69d8\u3092\u53c2\u8003\u306b\u3057\u307e\u3059\u3002**  \n[https:\/\/www.kaggle.com\/thedrcat\/chaii-eda-baseline](https:\/\/www.kaggle.com\/thedrcat\/chaii-eda-baseline)","b0e60a2d":"**\u9b54\u7406\u6c99:pd\u3092dataset\u306e\u5f62\u306b\u5909\u63db\u3057\u305f\u3093\u3060\u306d\u3002**","91fceb27":"\u97f3\u58f0\u304a\u3088\u3073\u6587\u5b66\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\n\n\u30bf\u30df\u30eb\u8a9e\u306f\u3001\u3055\u307e\u3056\u307e\u306a\u65b9\u8a00\u306b\u52a0\u3048\u3066\u3001\u30b1\u30f3\u30bf\u30df\u30eb\u3068\u547c\u3070\u308c\u308b\u5f62\u5f0f\u7684\u307e\u305f\u306f\u53e4\u5178\u7684\u306a\u7a2e\u985e\u3068\u3001\u30b3\u30c9\u30a5\u30f3\u30bf\u30df\u30eb\u3068\u547c\u3070\u308c\u308b\u53e3\u8a9e\u7684\u306a\u5f62\u5f0f\u3068\u306e\u9593\u306b\u304b\u306a\u308a\u92ed\u3044\u30c0\u30a4\u30b0\u30ed\u30b7\u30a2\u3092\u793a\u3057\u307e\u3059\u3002\u30c0\u30a4\u30b0\u30ed\u30b7\u30a2\u306f\u53e4\u4ee3\u304b\u3089\u3053\u306e\u8a00\u8a9e\u3067\u5b58\u5728\u3057\u3066\u304d\u307e\u3057\u305f\u3002\u521d\u671f\u306e\u5bfa\u9662\u306e\u7891\u6587\u3067\u4f7f\u7528\u3055\u308c\u3066\u3044\u305f\u8a00\u8a9e\u306f\u3001\u53e4\u5178\u8a69\u306e\u8a00\u8a9e\u3068\u306f\u304b\u306a\u308a\u5927\u304d\u304f\u7570\u306a\u308a\u307e\u3059\u3002\u7d50\u679c\u3068\u3057\u3066\u3001\u6a19\u6e96\u306e\u30bb\u30f3\u30bf\u30df\u30eb\u306f\u7279\u5b9a\u306e\u5730\u57df\u306e\u30b9\u30d4\u30fc\u30c1\u306b\u57fa\u3065\u3044\u3066\u3044\u307e\u305b\u3093\u3002\u3053\u308c\u306f\u3001\u30bf\u30df\u30eb\u8a9e\u3092\u8a71\u3059\u3055\u307e\u3056\u307e\u306a\u5730\u57df\u3067\u66f8\u304b\u308c\u305f\u8a00\u8a9e\u3092\u307b\u307c\u540c\u3058\u306b\u4fdd\u3064\u306e\u306b\u5f79\u7acb\u3061\u307e\u3057\u305f\u3002\n\n\u73fe\u4ee3\u3067\u306f\u3001\u30bb\u30f3\u30bf\u30df\u30eb\u306f\u4e00\u822c\u7684\u306b\u6b63\u5f0f\u306a\u6587\u7ae0\u3084\u30b9\u30d4\u30fc\u30c1\u3067\u4f7f\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u308c\u306f\u3001\u4f8b\u3048\u3070\u3001\u6559\u79d1\u66f8\u3001\u30bf\u30df\u30eb\u6587\u5b66\u306e\u591a\u304f\u3001\u305d\u3057\u3066\u4eba\u524d\u3067\u8a71\u3059\u3053\u3068\u3084\u8a0e\u8ad6\u306e\u8a00\u8a9e\u3067\u3059\u3002\u3057\u304b\u3057\u3001\u6700\u8fd1\u3067\u306f\u3001\u30b3\u30c9\u30a5\u30f3\u30bf\u30df\u30eb\u306f\u4f1d\u7d71\u7684\u306b\u30bb\u30f3\u30bf\u30df\u30eb\u306e\u5dde\u3068\u898b\u306a\u3055\u308c\u3066\u304d\u305f\u5730\u57df\u306b\u4fb5\u5165\u3057\u3066\u3044\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u3001\u30c6\u30ec\u30d3\u3084\u30e9\u30b8\u30aa\u3067\u306e\u73fe\u4ee3\u306e\u6620\u753b\u3001\u5287\u5834\u3001\u4eba\u6c17\u306e\u3042\u308b\u5a2f\u697d\u306e\u307b\u3068\u3093\u3069\u306f\u30b3\u30c9\u30a5\u30f3\u30bf\u30df\u30eb\u306b\u3042\u308a\u3001\u591a\u304f\u306e\u653f\u6cbb\u5bb6\u306f\u305d\u308c\u3092\u4f7f\u3063\u3066\u89b3\u5ba2\u306b\u8fd1\u3065\u3044\u3066\u3044\u307e\u3059\u3002\n\n\u8a71\u3055\u308c\u305f\u65b9\u8a00\u306f\u3042\u307e\u308a\u5a01\u4fe1\u3092\u6301\u3063\u3066\u3044\u307e\u305b\u3093\u3067\u3057\u305f\uff1a\u30bf\u30df\u30eb\u4eba\u306f\u3001\u6587\u5b66\u7684\u306a\u30bb\u30f3\u30bf\u30df\u30eb\u306e\u6587\u6cd5\u898f\u5247\u304c\u795e\u306b\u3088\u3063\u3066\u5b9a\u5f0f\u5316\u3055\u308c\u305f\u3068\u4fe1\u3058\u3066\u3044\u305f\u306e\u3067\u3001\u305d\u308c\u3089\u306f\u552f\u4e00\u306e\u6b63\u3057\u3044\u30b9\u30d4\u30fc\u30c1\u3067\u3042\u308b\u3068\u898b\u306a\u3055\u308c\u307e\u3057\u305f\uff08\u305f\u3068\u3048\u3070\u3001Kankeyar\u30011840\u3092\u53c2\u7167\uff09\u3002\u3057\u305f\u304c\u3063\u3066\u3001\u307b\u3068\u3093\u3069\u306e\u30e8\u30fc\u30ed\u30c3\u30d1\u8a00\u8a9e\u3068\u306f\u5bfe\u7167\u7684\u306b\u3001\u30bf\u30df\u30eb\u8a9e\u306f\u305d\u306e\u6b74\u53f2\u306e\u591a\u304f\u3067\u6a19\u6e96\u7684\u306a\u8a71\u3057\u8a00\u8449\u3092\u6301\u3063\u3066\u3044\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u3057\u304b\u3057\u3001\u73fe\u4ee3\u3067\u306f\u3001\u30b3\u30c9\u30a5\u30f3\u30bf\u30df\u30eb\u306e\u4f7f\u7528\u306e\u5897\u52a0\u306b\u3088\u308a\u3001\u975e\u516c\u5f0f\u306e\u300c\u6a19\u6e96\u7684\u306a\u300d\u65b9\u8a00\u304c\u51fa\u73fe\u3057\u3066\u3044\u307e\u3059\u3002\u30a4\u30f3\u30c9\u3067\u306f\u3001\u300c\u6a19\u6e96\u7684\u306a\u300d\u30b3\u30c9\u30a5\u30f3\u30bf\u30df\u30eb\u306f\u30011\u3064\u306e\u65b9\u8a00\u3067\u306f\u306a\u304f\u3001\u300c\u6559\u80b2\u3092\u53d7\u3051\u305f\u975e\u30d0\u30e9\u30e2\u30f3\u8a9e\u300d\u306b\u57fa\u3065\u3044\u3066\u3044\u307e\u3059\u304c\uff08Schiffman\u30011998\uff09\u3001\u30bf\u30f3\u30b8\u30e3\u30f4\u30eb\u3068\u30de\u30c9\u30a5\u30e9\u30a4\u306e\u65b9\u8a00\u306e\u5f71\u97ff\u3092\u5927\u304d\u304f\u53d7\u3051\u3066\u3044\u307e\u3059\u3002\u30b9\u30ea\u30e9\u30f3\u30ab\u3067\u306f\u3001\u6a19\u6e96\u306f\u30b8\u30e3\u30d5\u30ca\u306e\u65b9\u8a00\u306b\u57fa\u3065\u3044\u3066\u3044\u307e\u3059\u3002","bf414bf9":"\u30bf\u30df\u30eb\u8a9e\u306e\u8d77\u6e90\u306f\u3001\u4ed6\u306e\u30c9\u30e9\u30f4\u30a3\u30c0\u8a9e\u3068\u540c\u69d8\u306b\u4e0d\u660e\u3067\u3059\u304c\u3001\u30a4\u30f3\u30c9\u306e\u4ed6\u306e\u78ba\u7acb\u3055\u308c\u305f\u6587\u5b66\u8a00\u8a9e\u306e\u307b\u3068\u3093\u3069\u3068\u306f\u7570\u306a\u308a\u3001\u30b5\u30f3\u30b9\u30af\u30ea\u30c3\u30c8\u8a9e\u304b\u3089\u72ec\u7acb\u3057\u3066\u3044\u307e\u3059\u3002\u30bf\u30df\u30eb\u8a9e\u306f\u30c9\u30e9\u30f4\u30a3\u30c0\u8a9e\u306e\u4e2d\u3067\u6700\u3082\u53e4\u3044\u6587\u5b66\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u304c\uff08Hart\u30011975\uff09\u3001\u8a00\u8a9e\u3068\u6587\u5b66\u3092\u6b63\u78ba\u306b\u5e74\u4ee3\u6e2c\u5b9a\u3059\u308b\u3053\u3068\u306f\u56f0\u96e3\u3067\u3059\u3002\u30a4\u30f3\u30c9\u307e\u305f\u306f\u30b9\u30ea\u30e9\u30f3\u30ab\u306e\u6587\u5b66\u4f5c\u54c1\u306f\u3001\u30e4\u30b7\u306e\u8449\u306e\u5199\u672c\uff08\u30b3\u30d4\u30fc\u3068\u518d\u30b3\u30d4\u30fc\u306e\u7e70\u308a\u8fd4\u3057\u3092\u610f\u5473\u3059\u308b\uff09\u307e\u305f\u306f\u53e3\u982d\u3067\u306e\u4f1d\u9054\u306b\u3088\u3063\u3066\u4fdd\u5b58\u3055\u308c\u3066\u3044\u305f\u305f\u3081\u3001\u76f4\u63a5\u306e\u4ea4\u969b\u306f\u4e0d\u53ef\u80fd\u3067\u3057\u305f\u3002\u3057\u304b\u3057\u3001\u5916\u90e8\u306e\u5e74\u4ee3\u9806\u306e\u8a18\u9332\u3068\u5185\u90e8\u306e\u8a00\u8a9e\u5b66\u7684\u8a3c\u62e0\u306f\u3001\u73fe\u5b58\u3059\u308b\u6700\u53e4\u306e\u4f5c\u54c1\u304c\u304a\u305d\u3089\u304f\u897f\u66a62\u4e16\u7d00\u306e\u3044\u3064\u304b\u3067\u4f5c\u6210\u3055\u308c\u305f\u3053\u3068\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30bf\u30df\u30eb\u8a9e\u3067\u73fe\u5b58\u3059\u308b\u6700\u3082\u521d\u671f\u306e\u30c6\u30ad\u30b9\u30c8\u306f\u3001\u53e4\u5178\u6d3e\u306e\u8a00\u8a9e\u3092\u8aac\u660e\u3059\u308b\u8a69\u5b66\u3068\u6587\u6cd5\u306b\u95a2\u3059\u308b\u4f5c\u54c1\u3067\u3042\u308b\u30c8\u30eb\u30cf\u30fc\u30c3\u30d4\u30e4\u30e0\u3067\u3059\u3002\u3053\u306e\u672c\u306e\u6700\u3082\u53e4\u3044\u90e8\u5206\u306f\u3001\u7d00\u5143\u524d200\u5e74\u9803\u306b\u3055\u304b\u306e\u307c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\uff08Hart\u30011975\uff09\u3002\u3053\u308c\u3089\u3068\u306f\u5225\u306b\u3001\u4eca\u65e5\u79c1\u305f\u3061\u304c\u6301\u3063\u3066\u3044\u308b\u30bf\u30df\u30eb\u8a9e\u306e\u6700\u3082\u521d\u671f\u306e\u4f8b\u306f\u3001\u7d00\u5143\u524d3\u4e16\u7d00\u306e\u5ca9\u306e\u7891\u6587\u3067\u3042\u308a\u3001\u30d6\u30e9\u30fc\u30d5\u30df\u30fc\u6587\u5b57\u306e\u9069\u5fdc\u5f62\u5f0f\u3067\u3042\u308b\u30bf\u30df\u30eb\u8a9e-\u30d6\u30e9\u30fc\u30d5\u6587\u5b57\u3067\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\uff08Mahadevan\u30012003\uff09\u3002\u8a00\u8a9e\u5b66\u8005\u306f\u3001\u30bf\u30df\u30eb\u6587\u5b66\u3068\u8a00\u8a9e\u30923\u3064\u306e\u671f\u9593\u306b\u5206\u985e\u3057\u307e\u3059\u3002\u53e4\u4ee3\uff08\u897f\u66a6\u524d500\u5e74\u304b\u3089\u897f\u66a6700\u5e74\uff09\u3001\u4e2d\u4e16\uff08\u897f\u66a6700\u5e74\u304b\u3089\u897f\u66a61500\u5e74\uff09\u3001\u73fe\u4ee3\uff08\u897f\u66a61500\u5e74\u304b\u3089\u73fe\u5728\uff09\u3067\u3059\u3002","67709ab7":"\u65e5\u672c\u8a9e\u8a33  \n\u300c\u4eba\u4f53\u306b\u306f\u3044\u304f\u3064\u306e\u9aa8\u304c\u3042\u308a\u307e\u3059\u304b\uff1f\u300d","b22f6381":"\u65b9\u8a00\n\n\u30bf\u30df\u30eb\u8a9e\u306e\u65b9\u8a00\u306f\u3001\u53e4\u3044\u30bf\u30df\u30eb\u8a9e\u304b\u3089\u9032\u5316\u3059\u308b\u969b\u306b\u7570\u306a\u308b\u97f3\u97fb\u5909\u5316\u3068\u97f3\u306e\u5909\u5316\u3092\u7d4c\u9a13\u3057\u305f\u3068\u3044\u3046\u4e8b\u5b9f\u306b\u3088\u3063\u3066\u3001\u4e3b\u306b\u4e92\u3044\u306b\u533a\u5225\u3055\u308c\u307e\u3059\u3002\u3057\u305f\u304c\u3063\u3066\u3001\u300c\u3053\u3053\u300d\u306e\u5358\u8a9e-Centamil\uff08\u53e4\u5178\u7684\u306a\u54c1\u7a2e\uff09\u306eingu-\u306f\u30b3\u30a4\u30f3\u30d0\u30c8\u30fc\u30eb\u306eKongu\u65b9\u8a00\u306einge\u3001Thanjavur\u306e\u65b9\u8a00\u306einga\u3001Tirunelveli\u306e\u65b9\u8a00\u306eingane\u3001Ramanathapuram\u306e\u65b9\u8a00\u306einguttu\u3001ingale\u306b\u9032\u5316\u3057\u307e\u3057\u305f\u30b9\u30ea\u30e9\u30f3\u30ab\u306e\u3055\u307e\u3056\u307e\u306a\u5317\u65b9\u8a00\u306e\u30a4\u30f3\u30b2\u30fc\u30c9\u3068\u3044\u304f\u3064\u304b\u306e\u65b9\u8a00\u306e\u30a4\u30f3\u30ac\u30a4\u3002\n\n\u307b\u3068\u3093\u3069\u306e\u30bf\u30df\u30eb\u8a9e\u65b9\u8a00\u306f\u8a9e\u5f59\u306b\u305d\u308c\u307b\u3069\u5927\u304d\u306a\u9055\u3044\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u3044\u304f\u3064\u304b\u306e\u4f8b\u5916\u304c\u3042\u308a\u307e\u3059\u3002\u30b9\u30ea\u30e9\u30f3\u30ab\u3067\u8a71\u3055\u308c\u3066\u3044\u308b\u65b9\u8a00\u306f\u3001\u30a4\u30f3\u30c9\u3067\u306f\u65e5\u5e38\u7684\u306b\u4f7f\u7528\u3055\u308c\u3066\u3044\u306a\u3044\u591a\u304f\u306e\u5358\u8a9e\u3092\u4fdd\u6301\u3057\u3066\u304a\u308a\u3001\u4ed6\u306e\u591a\u304f\u306e\u5358\u8a9e\u306e\u4f7f\u7528\u65b9\u6cd5\u306f\u5c11\u3057\u7570\u306a\u308a\u307e\u3059\u3002\u30d1\u30e9\u30ab\u30c3\u30c9\u306e\u30a2\u30e4\u30fc\u30eb\u306e\u65b9\u8a00\u306b\u306f\u3001\u591a\u6570\u306e\u30de\u30e9\u30e4\u30fc\u30e9\u30e0\u8a9e\u306e\u5916\u6765\u8a9e\u304c\u3042\u308a\u3001\u30de\u30e9\u30e4\u30fc\u30e9\u30e0\u8a9e\u306e\u69cb\u6587\u306e\u5f71\u97ff\u3082\u53d7\u3051\u3066\u304a\u308a\u3001\u660e\u78ba\u306a\u30de\u30e9\u30e4\u30fc\u30e9\u30e0\u8a9e\u306e\u30a2\u30af\u30bb\u30f3\u30c8\u3082\u3042\u308a\u307e\u3059\u3002\u6700\u5f8c\u306b\u3001\u524d\u8005\u306f\u30bf\u30df\u30eb\u8a9e\u30a2\u30e4\u30fc\u30eb\u306e\u30b0\u30eb\u30fc\u30d7\u306b\u3088\u3063\u3066\u8a71\u3055\u308c\u3001\u5f8c\u8005\u306e2\u3064\u306f11\u4e16\u7d00\u306b\u30ab\u30eb\u30ca\u30bf\u30ab\u306b\u79fb\u4f4f\u3057\u305fVaishnavites\u306b\u3088\u3063\u3066\u8a71\u3055\u308c\u305f\u3001Sanketi\u3001Hebbar\u3001\u304a\u3088\u3073Mandyam\u306e\u65b9\u8a00\u306f\u30019\u756a\u76ee\u306b\u8a2d\u8a08\u3055\u308c\u305f\u30bf\u30df\u30eb\u8a9e\u306e\u7279\u5225\u306a\u5f62\u5f0f\u3067\u3042\u308bVaishnavaparibasai\u306e\u591a\u304f\u306e\u6a5f\u80fd\u3092\u4fdd\u6301\u3057\u3066\u3044\u307e\u3059\u3002\u30d0\u30f3\u30ac\u30ed\u30a2\u306b\u306f\u72ec\u81ea\u306e\u30bf\u30df\u30eb\u8a9e\u3082\u3042\u308a\u3001\u4e3b\u306b\u6bcd\u56fd\u8a9e\u304c\u30bf\u30df\u30eb\u8a9e\u3067\u306f\u306a\u304f\u3001\u30ab\u30f3\u30ca\u30c0\u8a9e\u3084\u30d2\u30f3\u30c7\u30a3\u30fc\u8a9e\u304b\u3089\u306e\u8a00\u8449\u3092\u5439\u304d\u8fbc\u3093\u3067\u3044\u308b\u4eba\u3005\u306b\u3088\u3063\u3066\u8a71\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u30bf\u30df\u30eb\u8a9e\u306e\u65b9\u8a00\u306f\u3001\u5730\u57df\u3068\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u306e\u4e21\u65b9\u306b\u3088\u3063\u3066\u7570\u306a\u308a\u307e\u3059\u3002\u3044\u304f\u3064\u304b\u306e\u30ab\u30fc\u30b9\u30c8\u306b\u306f\u72ec\u81ea\u306e\u65b9\u8a00\u304c\u3042\u308a\u3001\u305d\u306e\u30ab\u30fc\u30b9\u30c8\u306e\u307b\u3068\u3093\u3069\u306e\u30e1\u30f3\u30d0\u30fc\u306f\u3001\u51fa\u8eab\u5730\u306b\u95a2\u4fc2\u306a\u304f\u4f1d\u7d71\u7684\u306b\u4f7f\u7528\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u3053\u308c\u3089\u306e\u9055\u3044\u306e\u3044\u304f\u3064\u304b\u306f\u3001\u53cd\u30ab\u30fc\u30b9\u30c8\u904b\u52d5\u306e\u7d50\u679c\u3068\u3057\u3066\u8fd1\u5e74\u6d88\u3048\u59cb\u3081\u3066\u3044\u307e\u3059\u304c\u3001\u591a\u304f\u306e\u75d5\u8de1\u304c\u6b8b\u3063\u3066\u304a\u308a\u3001\u30b9\u30d4\u30fc\u30c1\u306b\u3088\u3063\u3066\u4eba\u306e\u30ab\u30fc\u30b9\u30c8\u3092\u8b58\u5225\u3059\u308b\u3053\u3068\u304c\u3057\u3070\u3057\u3070\u53ef\u80fd\u3067\u3059\u3002","3f40f498":"14\u5104\u4eba\u8fd1\u304f\u306e\u4eba\u53e3\u3092\u62b1\u3048\u308b\u30a4\u30f3\u30c9\u306f\u3001\u4e16\u754c\u30672\u756a\u76ee\u306b\u4eba\u53e3\u306e\u591a\u3044\u56fd\u3067\u3059\u3002\u305d\u308c\u3067\u3082\u3001\u30d2\u30f3\u30c7\u30a3\u30fc\u8a9e\u3084\u30bf\u30df\u30eb\u8a9e\u306a\u3069\u306e\u30a4\u30f3\u30c9\u306e\u8a00\u8a9e\u306f\u3001\u30a6\u30a7\u30d6\u4e0a\u3067\u306f\u904e\u5c0f\u8a55\u4fa1\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4eba\u6c17\u306e\u3042\u308b\u81ea\u7136\u8a00\u8a9e\u7406\u89e3\uff08NLU\uff09\u30e2\u30c7\u30eb\u306f\u3001\u82f1\u8a9e\u3068\u6bd4\u8f03\u3057\u3066\u30a4\u30f3\u30c9\u306e\u8a00\u8a9e\u3067\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u4f4e\u4e0b\u3057\u307e\u3059\u3002\u305d\u306e\u5f71\u97ff\u306b\u3088\u308a\u3001\u30a4\u30f3\u30c9\u306e\u30e6\u30fc\u30b6\u30fc\u5411\u3051\u306e\u30c0\u30a6\u30f3\u30b9\u30c8\u30ea\u30fc\u30e0Web\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u306e\u30a8\u30af\u30b9\u30da\u30ea\u30a8\u30f3\u30b9\u304c\u52a3\u308a\u307e\u3059\u3002Kaggle\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u3068\u65b0\u3057\u3044\u6a5f\u68b0\u5b66\u7fd2\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u304b\u3089\u306e\u6ce8\u76ee\u3092\u96c6\u3081\u308b\u3053\u3068\u3067\u3001\u30a4\u30f3\u30c9\u306e\u30e6\u30fc\u30b6\u30fc\u304cWeb\u3092\u6700\u5927\u9650\u306b\u6d3b\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u652f\u63f4\u3067\u304d\u307e\u3059\u3002\n\n\u8cea\u554f\u3078\u306e\u56de\u7b54\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u306f\u4e00\u822c\u7684\u306aNLU\u30bf\u30b9\u30af\u3067\u3059\u304c\u3001\u30d2\u30f3\u30c7\u30a3\u30fc\u8a9e\u3068\u30bf\u30df\u30eb\u8a9e\u3067\u306f\u305d\u3046\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u591a\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0\u306e\u73fe\u5728\u306e\u9032\u6b69\u306b\u306f\u3001\u9ad8\u54c1\u8cea\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u751f\u6210\u3057\u3001\u30e2\u30c7\u30ea\u30f3\u30b0\u3092\u6539\u5584\u3059\u308b\u305f\u3081\u306e\u96c6\u4e2d\u7684\u306a\u53d6\u308a\u7d44\u307f\u304c\u5fc5\u8981\u3067\u3059\u3002\u3055\u3089\u306b\u3001\u4e00\u822c\u306b\u516c\u958b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u904e\u5c0f\u8a55\u4fa1\u3055\u308c\u3066\u3044\u308b\u8a00\u8a9e\u306e\u5834\u5408\u3001\u4fe1\u983c\u3067\u304d\u308b\u8a55\u4fa1\u3092\u69cb\u7bc9\u3059\u308b\u306e\u306f\u96e3\u3057\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u30b3\u30f3\u30c6\u30b9\u30c8\u306b\u63d0\u4f9b\u3055\u308c\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3001\u304a\u3088\u3073\u53c2\u52a0\u8005\u306b\u3088\u3063\u3066\u751f\u6210\u3055\u308c\u305f\u8ffd\u52a0\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u3001\u30a4\u30f3\u30c9\u306e\u8a00\u8a9e\u306e\u5c06\u6765\u306e\u6a5f\u68b0\u5b66\u7fd2\u3092\u53ef\u80fd\u306b\u3059\u308b\u3053\u3068\u3092\u9858\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u3053\u306e\u30b3\u30f3\u30c6\u30b9\u30c8\u3067\u306e\u3042\u306a\u305f\u306e\u76ee\u6a19\u306f\u3001\u30a6\u30a3\u30ad\u30da\u30c7\u30a3\u30a2\u306e\u8a18\u4e8b\u306b\u95a2\u3059\u308b\u5b9f\u969b\u306e\u8cea\u554f\u3078\u306e\u56de\u7b54\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u8cea\u554f\u5fdc\u7b54\u30da\u30a2\u3092\u6301\u3064\u65b0\u3057\u3044\u8cea\u554f\u5fdc\u7b54\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u3042\u308bchaii-1\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u3001\u7ffb\u8a33\u3092\u4f7f\u7528\u305b\u305a\u306b\u53ce\u96c6\u3055\u308c\u305f\u30d2\u30f3\u30c7\u30a3\u30fc\u8a9e\u3068\u30bf\u30df\u30eb\u8a9e\u3092\u5bfe\u8c61\u3068\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u308c\u306f\u3001\u30cd\u30a4\u30c6\u30a3\u30d6\u30b9\u30d4\u30fc\u30ab\u30fc\u306e\u5c02\u9580\u5bb6\u30c7\u30fc\u30bf\u30a2\u30ce\u30c6\u30fc\u30bf\u30fc\u306b\u3088\u3063\u3066\u66f8\u304b\u308c\u305f\u8cea\u554f\u3067\u73fe\u5b9f\u7684\u306a\u60c5\u5831\u63a2\u7d22\u30bf\u30b9\u30af\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u69cb\u7bc9\u3059\u308b\u305f\u3081\u306e\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u30e2\u30c7\u30eb\u3068\u63a8\u8ad6\u30b3\u30fc\u30c9\u304c\u63d0\u4f9b\u3055\u308c\u307e\u3059\u3002\n\n\u6210\u529f\u3059\u308b\u3068\u3001\u30a4\u30f3\u30c9\u306e\u8a00\u8a9e\u3067\u306eNLU\u30e2\u30c7\u30eb\u306e\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u5411\u4e0a\u3057\u307e\u3059\u3002\u305d\u306e\u7d50\u679c\u3001\u30a4\u30f3\u30c9\u306e\u7d0414\u5104\u4eba\u306e\u591a\u304f\u306e\u4eba\u3005\u306eWeb\u30a8\u30af\u30b9\u30da\u30ea\u30a8\u30f3\u30b9\u304c\u5411\u4e0a\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u3055\u3089\u306b\u3001\u3053\u306e\u30b3\u30f3\u30c6\u30b9\u30c8\u306e\u8a00\u8a9e\u3092\u8d85\u3048\u3066\u9069\u7528\u3067\u304d\u308b\u591a\u8a00\u8a9eNLP\u306b\u8ca2\u732e\u3057\u307e\u3059\u3002","c0038e29":"**\u9b54\u7406\u6c99:train\u3068\u307b\u307c\u540c\u3058\u3060\u306d\u3002**","e4394029":"[![](https:\/\/img.youtube.com\/vi\/FnV0thLS1Fs\/0.jpg)](https:\/\/www.youtube.com\/watch?v=FnV0thLS1Fs)","418e0a70":"\u65e5\u672c\u8a9e\u8a33  \n'\u6b63\u5e38\u306a\u6210\u4eba\u306e\u9aa8\u683c\u306b\u306f\u3001\u6b21\u306e206\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\uff08\u80f8\u9aa8\u304c3\u3064\u306e\u90e8\u5206\u306b\u5206\u5272\u3055\u308c\u3066\u3044\u308b\u3068\u898b\u306a\u3055\u308c\u308b\u5834\u5408\u306f208\uff09\u3002\u3053\u306e\u6570\u306f\u3001\u89e3\u5256\u5b66\u7684\u306a\u9055\u3044\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u3001\u3054\u304f\u5c11\u6570\u306e\u4eba\u304c\u4f59\u5206\u306a\u808b\u9aa8\uff08\u9996\uff09\u307e\u305f\u306f\u4f59\u5206\u306a\u80cc\u9aa8\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u7d50\u5408\u3055\u308c\u305f\u9aa8\u306e\u4e00\u90e8\u304c\u5225\u500b\u306e\u9aa8\u3068\u898b\u306a\u3055\u308c\u306a\u3044\u5834\u5408\u30015\u3064\u306e\u95a2\u7bc0\u690e\u9aa8\u3002 3\u3064\uff083\u301c5\uff09\u306e\u690e\u9aa8\u3092\u542b\u3080\u5408\u8a0826\u306e\u690e\u9aa8\u306f\u300133\u3068\u898b\u306a\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\\ n\u4eba\u9593\u306e\u982d\u84cb\u9aa8\u306b\u306f22\u306e\u9aa8\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\uff08\u5916\u8033\u9053\u3092\u9664\u304f\uff09\u3002\u3053\u308c\u3089\u306f8\u3064\u306e\u982d\u84cb\u9aa8\u306814\u306e\u9854\u9762\u9aa8\u306b\u5206\u3051\u3089\u308c\u307e\u3059\u3002 \uff08\u592a\u5b57\u306e\u6570\u5b57\u306f\u96a3\u306e\u56f3\u306e\u6570\u5b57\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002\uff09\\ N \\ n \\ n \\ n\u6bdb\u7d30\u8840\u7ba1\u306e\u9aa8\uff088\uff09\\ n1\u524d\u982d\u9aa8\\ n 2\u982d\u9802\u9aa8\uff082\uff09\\ n 3\u5074\u982d\u9aa8\uff08\u5074\u982d\u9aa8\uff092\uff09\\ n4\u5f8c\u982d\u9aa8\\ nsphenoid\u9aa8\\ nethmoid\u9aa8\\ nfacial\u9aa8\uff0814\uff09\\ n7\u4e0b\u984e\u9aa8\\ n 6\u4e0a\u984e\u9aa8\uff082\uff09\\ n\u53e3\u84cb\u9aa8\uff082\uff09\\ n 5\u63a5\u5408\u9aa8\uff082\uff09\\ n 9\u9f3b\u9aa8\uff082\uff09 \\ n lacrimal bone\uff082\uff09\\ n nasal wall Bone\uff08vomer\uff09\\ nInferior nasal conchae\uff082\uff09\\ nIn midsoles\uff086\uff09\uff1a\\ nMalleus \\ nIncus \\ nStapes \\ nThroat\uff081\uff09\uff1a\\ nThroat Bone\uff08navoid bone\uff09\uff08hyoid \uff09\\ nShort\uff084\uff09\uff1a\\ n 25. Clavicle \\ n 29. Scapula \\ nThorax\uff0825\uff09\uff1a\\ n 10. sternum\uff081\uff09\\ n\u3055\u3089\u306b3\u3064\u3068\u898b\u306a\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1amanubrium\u3001body sternum\u4f53\uff08\u80f8\u9aa8\uff09\u3001\u5263\u72b6\u7a81\u8d77\\ n 28.\u808b\u9aa8\uff08\u808b\u9aa8\uff09\uff0824\uff09\\ n\u810a\u67f1\uff0833\uff09\uff1a\\ n 8.\u9838\u690e\uff087\uff09\\ n\u80f8\u690e\uff0812\uff09\\ n 14.\u8170\u690e\uff085\uff09 \\ n16\u3002\u4ed9\u9aa8\\ n\u5c3e\uff08\u5263\u72b6\u7a81\u8d77\uff09\\ nwax\uff08\u8155\uff09\uff081\uff09\uff1a\\ n11\u3002\u4e0a\u8155\\ n26\u3002\u4e0a\u8155\u306e\u9846\\ n\u524d\u8155\uff084\uff09\uff1a\\ n 12. ulna\uff082\uff09\\ n13\u3002 radius\uff082\uff09\\ n 27. Radius head\uff08radius\uff09\\ nHand\uff08hand\uff09\uff0854\uff09\uff1a\\ nCarpal\uff1a\\ nScaphoid\uff082\uff09\\ nlunate\uff082\uff09\\ nThree triquetrum\uff082\uff09\\ nPisiform\uff082\uff09\\ nTrapezium\uff082 \uff09\\ nTrapezoid\uff082\uff09\\ nCapitate\uff082\uff09\\ nHamate\uff082\uff09\\ n\u5927\u817f\u9aa8\uff08\u4e2d\u624b\u9aa8\uff09:( 5\u00d72\uff09\\ n\u6307\u9aa8\uff1a\\ n\u8fd1\u4f4d\u6307\u9aa8\uff085\u00d72\uff09\\ n\u4e2d\u9593\u6307\u9aa8\uff084\u00d72\uff09\\ n\u9060\u4f4d\u6307\u9aa8\uff085\u00d72\uff09\\ n\u9aa8\u76e4\uff082\uff09\uff1a\\ n15\u3002\u8178\u9aa8\u3068\u80a1\u95a2\u7bc0\u4e0b\u90e8\uff08\u5750\u9aa8\uff09\\ n \\ n \\ n\u811a\uff088\uff09\uff1a\\ n 18.\u5927\u817f\u9aa8\uff082\uff09\\ n 17.\u80a1\u95a2\u7bc0\uff08\u95a2\u7bc0\u3001\u9aa8\uff09\\ n22\u3002\u5927\u817f\u9aa8\u306e\u5927\u80a1\u95a2\u7bc0\\ n23\u3002\u5927\u817f\u9aa8\u306e\u9846\\ n 19 .patella\uff082\uff09\\ n 20. Tibia\uff08tibia\uff09\uff082\uff09\\ n 21. Fibula\uff082\uff09\\ nFoot\uff0852\uff09\uff1a\\ nTarsal\uff1a\\ nHeel\uff08c\u200b\u200balcaneus\uff09\uff082\uff09\\ nTalus\uff082\uff09\\ n navicular bone \uff082\uff09\\ n\u30a4\u30f3\u30bf\u30fc\u30d0\u30eb\u30a6\u30a7\u30c3\u30b8\u30dc\u30fc\u30f3\uff082\uff09\\ n\u30a4\u30f3\u30c7\u30a3\u30a2\u30eb\u30a6\u30a7\u30c3\u30b8\u30dc\u30fc\u30f3\uff082\uff09\\ n\u30a2\u30a6\u30bf\u30fc\u30a6\u30a7\u30c3\u30b8\u30dc\u30fc\u30f3\uff082\uff09\\ n\u30ad\u30e5\u30fc\u30dc\u30a4\u30c9\u30dc\u30fc\u30f3\uff082\uff09\\ n\u4e2d\u624b\u9aa8\uff085\u00d72\uff09\\ n\u6307\u9aa8\uff08p halange\uff09\uff1a\\ n\u8fd1\u4f4d\u6307\u9aa8\uff085\u00d72\uff09\\ n\u5185\u90e8\u6307\u9aa8\uff084\u00d72\uff09\\ n\u9060\u4f4d\u6307\u9aa8\uff085\u00d72\uff09\\ n\u4e73\u5150\u306e\u9aa8\u683c\u306b\u3088\u3063\u3066\u5165\u3063\u3066\u304f\u308b\u9aa8\u306f\u4f59\u5206\u3067\u3059\uff1a\\ n\u982d\u84cb\u9aa8\u3068\u982d\u84cb\u9aa8\uff0821\uff09\u304c\u4e00\u7dd2\u306b\u5f62\u6210\u3055\u308c\u307e\u3059\u982d\u84cb\u9aa8\u3002\u4e00\u7dd2\u306b\u30ea\u30d6\u3092\u5f62\u6210\u3057\u307e\u3059\\ n\u9aa8\u76e4\u3001\u4e0b\u9aa8\u76e4\u3001\u304a\u3088\u3073\u6065\u9aa8\uff08\u6065\u9aa8\uff09\u304c\u4e00\u7dd2\u306b\u306a\u3063\u3066\u6210\u4eba\u306e\u9aa8\u76e4\u3092\u5f62\u6210\u3057\u307e\u3059\\ n \\ n\u30ab\u30c6\u30b4\u30ea\uff1a\u4eba\u4f53\u89e3\u5256\u5b66\\ n\u30ab\u30c6\u30b4\u30ea\uff1a\u9aa8 '","42a9a88f":"**\u9b54\u7406\u6c99:roberta\u306fA Robustly Optimized BERT Pretraining Approach\u306e\u7565\u3060\u3088\u3002**  \n[https:\/\/arxiv.org\/abs\/1907.11692](https:\/\/arxiv.org\/abs\/1907.11692)\n\n**squad2\u306fThe Stanford Question Answering Dataset\u306e\u7565\u3060\u3088\u3002** \n\n[https:\/\/rajpurkar.github.io\/SQuAD-explorer\/](https:\/\/rajpurkar.github.io\/SQuAD-explorer\/)\n\n**\u57fa\u672cBERT\u306eroberta\u7248\u3067\u3001squad2\u3092\u5b66\u7fd2\u3057\u305f\u3002  \n\u970a\u5922:\u9b54\u7406\u6c99\u4f55\u3067\u305d\u3093\u306a\u3053\u3068\u77e5\u3063\u3066\u308b\u306e\uff1f\uff1f**\n![https:\/\/4.bp.blogspot.com\/-IMLly7zzfIk\/Wn1ViNMu99I\/AAAAAAABKDE\/oTpDtyrZcTwGZLZAAtbeQ5PIn7ixnaaQgCLcBGAs\/s400\/bikkuri_me_tobideru_woman.png](https:\/\/4.bp.blogspot.com\/-IMLly7zzfIk\/Wn1ViNMu99I\/AAAAAAABKDE\/oTpDtyrZcTwGZLZAAtbeQ5PIn7ixnaaQgCLcBGAs\/s400\/bikkuri_me_tobideru_woman.png)\n","a65e86d4":"# Baseline","100ebf28":"**\u9b54\u7406\u6c99:\u7b54\u3048\u306f206\uff1f**","5a1e9beb":"lunana  \nLast update 2021.10.11  \n\u3086\u3063\u304f\u308a\u3057\u3066\u3063\u3066\u306d  \n\u970a\u5922:\u4eca\u65e5\u306f\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u306e\u30b3\u30f3\u30da\u3060\u306d\u3002  \n\u9b54\u7406\u6c99:\u307e\u305a\u306f\u6982\u7565\u304b\u3089\u898b\u308b\u305e\u3002\n"}}