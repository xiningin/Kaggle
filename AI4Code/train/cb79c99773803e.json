{"cell_type":{"3e30c115":"code","e7ecf6bf":"code","e7a83add":"code","df6801bf":"code","d1478586":"code","4a68990d":"code","a0c22015":"code","44508f38":"code","8c0b9ddc":"code","0377491b":"code","4e9648b2":"code","c198f1c1":"code","c8c2eead":"code","39b687af":"code","7790ce1e":"code","ece9d6d6":"code","acebf323":"code","7ea1d9d9":"code","bd4520ff":"code","ca92b108":"code","d0ed5273":"markdown","7329a472":"markdown","08df1986":"markdown","6de3b3b2":"markdown","917ec86e":"markdown","32cdc4c0":"markdown","0c4691b5":"markdown","64049000":"markdown"},"source":{"3e30c115":"import pandas as pd\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom tqdm import tqdm\nimport helpers\nsns.set()\nnp.random.seed(42)","e7ecf6bf":"symbol = 'AAPL'\noutput_size = 'compact'","e7a83add":"df_raw = helpers.fetch_data(symbol, output_size)\ndf = df_raw.copy()","df6801bf":"df = df_raw.sort_values(by='timestamp')\ndf.head()","d1478586":"simulation = pd.DataFrame()","4a68990d":"number_simulation = 100\npredict_days = 30","a0c22015":"def percent_change (time_series, period=1):\n    time_series = np.array(time_series)\n    percent_change = (time_series[period:] - time_series[:-period]) \/ time_series[:-period]\n    return percent_change","44508f38":"for i in tqdm(range(number_simulation)):\n    price_list = df['adjusted_close'].values[-predict_days:].tolist()\n    volatility = percent_change(price_list[-predict_days:]).std()\n    for d in range(predict_days):\n        price_list.append(price_list[-1] * (1 + np.random.normal(0, volatility)))\n        volatility = percent_change(price_list[-predict_days:]).std()\n    simulation[i] = pd.Series(price_list[-predict_days:]).values","8c0b9ddc":"simulation.head()","0377491b":"plt.style.use(['ggplot'])\nplt.figure(figsize=(15,7))\nplt.plot(simulation)\nplt.title('Simulation', color='black')\nplt.ylabel('Stock Price')\nplt.xlabel('Simulation Days')\nplt.show()","4e9648b2":"simulation_means = np.array([simulation[i].mean() for i in range(100)])","c198f1c1":"plt.style.use(['ggplot'])\nplt.figure(figsize=(15,5))\nplt.subplot(1,2,1)\nsns.distplot(df['adjusted_close'],norm_hist=True)\nplt.title('Simulation\\nmean = {:.4f}\\nstdev = {:.4f}\\nskewness = {:.4f}\\nkurtosis = {:.4f}'\n      .format(np.mean(simulation_means), \n              np.std(simulation_means), \n              stats.skew(simulation_means), \n              stats.kurtosis(simulation_means)), color='black')\nplt.xlabel('Close Price')\n\nplt.subplot(1,2,2)\nsns.distplot(simulation_means, norm_hist=True,label='Simulation')\nsns.distplot(df['adjusted_close'],norm_hist=True,label='Sample')\nplt.title('Sample\\nmean = {:.4f}\\nstdev = {:.4f}\\nskewness = {:.4f}\\nkurtosis = {:.4f}'\n      .format(df['adjusted_close'].mean(), \n              df['adjusted_close'].std(), \n              df['adjusted_close'].skew(), \n              df['adjusted_close'].kurtosis()), color='black')\nplt.xlabel('Close Price')\n\nplt.legend()\nplt.show()","c8c2eead":"mean_real = df['adjusted_close'].mean()","39b687af":"t_statistic, p_value = helpers.t_test_1sample(alpha=0.05, \n                                              sample_array=simulation_means, \n                                              population_mean=mean_real)","7790ce1e":"margin_error_real = helpers.moe_t_test_1sample(alpha=0.05, \n                                         sample_size=df['adjusted_close'].shape[0], \n                                         stdev=df['adjusted_close'].std())","ece9d6d6":"lower_bound_real, upper_bound_real = helpers.confidence_interval(mean=df['adjusted_close'].mean(), \n                                                                 margin_of_error=margin_error_real)\nprint('Lower bound for real:', lower_bound_real)\nprint('Upper bound for real:', upper_bound_real)","acebf323":"margin_error_simulation = helpers.moe_t_test_1sample(0.05, \n                                               sample_size=simulation_means.shape[0], \n                                               stdev=simulation_means.std())","7ea1d9d9":"lower_bound_simulation, upper_bound_simulation = helpers.confidence_interval(\n                                                    mean=simulation_means.mean(), \n                                                    margin_of_error=margin_error_simulation)\nprint('Lower bound for simulation:', lower_bound_simulation)\nprint('Upper bound for simulation:', upper_bound_simulation)","bd4520ff":"b_statistic, p_value = helpers.bartlett(0.05, simulation_means, df['adjusted_close'])","ca92b108":"ks_statistic, p_value = helpers.ks_test_2sample(0.05, simulation_means, df['adjusted_close'])","d0ed5273":"## T Test for Mean","7329a472":"## KS Test for Distribution","08df1986":"## Confidence Interval for Mean","6de3b3b2":"## Data Processing","917ec86e":"## Data Fetching","32cdc4c0":"## Run Simulation","0c4691b5":"----","64049000":"## Bartlett Test for Variance"}}