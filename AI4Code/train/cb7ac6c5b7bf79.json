{"cell_type":{"38e7e989":"code","ca8f1fdb":"code","3e40da33":"code","550b722d":"code","1daf87b9":"code","8edc3772":"code","335dfff9":"code","776462a3":"code","6e388e49":"code","3310ee25":"code","21666884":"code","daf5b310":"code","fc4d240d":"code","5fc89be4":"code","c7f7b75a":"code","b5acf05f":"code","0de41b65":"code","061c935b":"code","b05d3637":"code","3faf042d":"code","1ecd0cd3":"code","bb3cf783":"markdown","fa3a1ead":"markdown","efbb96aa":"markdown","022c2f27":"markdown","f2124868":"markdown","40b93ae2":"markdown","73245b17":"markdown","0857578d":"markdown"},"source":{"38e7e989":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\nfrom PIL import Image\nimport os\nimport random\n\nfrom tensorflow import keras\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Conv2D, Dense, Dropout, MaxPooling2D, InputLayer, GlobalAveragePooling2D\nfrom tensorflow.keras.layers.experimental import preprocessing as pre","ca8f1fdb":"test_dir = r\"..\/input\/cat-and-dog\/test_set\/test_set\"\ntrain_dir = r\"..\/input\/cat-and-dog\/training_set\/training_set\"","3e40da33":"def define_y(X):\n    arr = []\n    k = 0\n    for i in X:\n        if \"cat\" == i.split(\"\/\")[-1][:3]:\n            arr.append(0)\n        elif \"dog\" == i.split(\"\/\")[-1][:3]:\n            arr.append(1)\n            \n        k += 1\n        \n    return np.array(arr)\n\ndef define_dir(dir):\n    del (dir[dir.index(\"_DS_Store\")])\n\n    for i in range(len(dir)):\n        direct = train_dir+f\"\/{dir[i][:3]}s\/\"\n        direct += dir[i]\n        \n        dir[i] = direct\n        \ndef define_dir_test(dir):\n    del (dir[dir.index(\"_DS_Store\")])\n\n    for i in range(len(dir)):\n        direct = test_dir+f\"\/{dir[i][:3]}s\/\"\n        direct += dir[i]\n        \n        dir[i] = direct","550b722d":"cats_dir = os.listdir(train_dir+r\"\/cats\")\ndogs_dir = os.listdir(train_dir+r\"\/dogs\")\n\ncats_test_dir = os.listdir(test_dir+r\"\/cats\")\ndogs_test_dir = os.listdir(test_dir+r\"\/dogs\")\n\ndefine_dir(cats_dir)\ndefine_dir(dogs_dir)\n\ndefine_dir_test(cats_test_dir)\ndefine_dir_test(dogs_test_dir)","1daf87b9":"X_train = np.array(cats_dir[:200]+dogs_dir[:200])\n\nrandom.shuffle(X_train)\n\nY_train = define_y(X_train)\n\ndf = pd.DataFrame({\n    \"dir\": X_train,\n    \"target\": Y_train\n})\ndf","8edc3772":"X_test = np.array(cats_test_dir[:50]+dogs_test_dir[:50])\n\nrandom.shuffle(X_test)\n\nY_test = define_y(X_test)\n\ndf_test = pd.DataFrame({\n    \"dir\": X_test,\n    \"target\": Y_test\n})\n\ndf_test","335dfff9":"X_ = []\n\nfor i in range(len(df[\"dir\"])):\n    img = Image.open(df[\"dir\"][i]).resize((224, 224))\n    \n    arr = np.reshape(list(img.getdata()), (224, 224, 3))\n    \n    X_.append(arr)","776462a3":"np.array(X_).shape","6e388e49":"X_train = np.array(X_)","3310ee25":"X_ = []\n\nfor i in range(len(df_test[\"dir\"])):\n    img = Image.open(df_test[\"dir\"][i]).resize((224, 224))\n    \n    arr = np.reshape(list(img.getdata()), (224, 224, 3))\n    \n    X_.append(arr)","21666884":"X_test = np.array(X_)","daf5b310":"for i in range(5):\n    plt.figure(figsize=(14, 9))\n    plt.subplot(2, 5, i+1)\n    plt.imshow(X_train[i])","fc4d240d":"vgg = keras.applications.vgg16.VGG16(\n    weights=\"imagenet\",\n    include_top=False\n)\nvgg.trainable = False","5fc89be4":"X_train = X_train \/ 255\nX_test = X_test \/ 255","c7f7b75a":"model = keras.Sequential([\n    pre.RandomFlip(\"horizontal\"),\n    pre.RandomContrast(0.5),\n    vgg,\n    GlobalAveragePooling2D(),\n    Dense(32, activation='relu'),\n    Dense(32, activation='relu'),\n    Dense(1, activation='sigmoid')\n])\n\nmodel.compile(\n    loss='binary_crossentropy',\n    optimizer='adam',\n    metrics=[\"binary_accuracy\"]\n)","b5acf05f":"from tensorflow.keras.callbacks import EarlyStopping\n\nearly_stop = EarlyStopping(\n    min_delta=0.001,\n    patience=2,\n    restore_best_weights=True\n)","0de41b65":"hist = model.fit(X_train, Y_train, epochs=7, validation_data=(X_test, Y_test), callbacks=[early_stop])","061c935b":"plt.plot(hist.history[\"loss\"])\nplt.plot(hist.history[\"val_loss\"])","b05d3637":"test_preds = model.predict(X_test)","3faf042d":"k = 0\n    \nfor i in test_preds:\n    if int(i[0] >= 0.5) != Y_test[k]:\n        print(f\"Predicted: {i}, Y: {Y_test[k]}, X_test index: {k}\")\n        \n    k += 1","1ecd0cd3":"plt.imshow(X_test[7])\ntest_preds[4]","bb3cf783":"# Setup","fa3a1ead":"# Modeling","efbb96aa":"# Create a test predictions","022c2f27":"Don't forget to standartize a data","f2124868":"Let's see first 5 images of train set","40b93ae2":"We will use a pretrained model VGG16 as base","73245b17":"And convert image to array, resizing this to 224x244","0857578d":"We will use 400 rows of dataset. It takes more time so, you can try use all rows on jupyter notebokk"}}