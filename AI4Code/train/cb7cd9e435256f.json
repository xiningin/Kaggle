{"cell_type":{"ac36d463":"code","e2ead9c8":"code","48e86550":"code","052db7ca":"code","c4662d85":"code","72467b61":"code","5e5736bc":"code","1ef21679":"code","bce6f1c6":"code","45f59880":"code","29ce4037":"code","6e299d5f":"markdown","8086b8cc":"markdown","c8b6b219":"markdown","44a191a4":"markdown","a53358b9":"markdown","7813ee1e":"markdown","8dc68629":"markdown","b347a171":"markdown"},"source":{"ac36d463":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport tensorflow as tf\nfrom tensorflow import keras\nimport string\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os,fnmatch\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","e2ead9c8":"#Only Selecting the Images and excluding the directories in the folder\nimages_names=fnmatch.filter(os.listdir('\/kaggle\/input\/captcha-version-2-images\/samples\/'),'*.*')\n\nX=[]\nfor name in images_names:\n    im_name='\/kaggle\/input\/captcha-version-2-images\/samples\/'+name\n    img=mpimg.imread(im_name)\n    img=img[:,:,0]\n    img=np.reshape(img,(50,200,1))\n    X.append(img)\n\nX=np.asarray(X)\nprint(\"No of Images :\",X.shape[0])\n\n# Seprating the file extension from the Image Name.\noutputs=[]\nfor name in images_names:\n    outputs.append(name[0:5])\n\nsymbols = string.ascii_lowercase + \"0123456789\"\nprint(\"Characters :\",symbols)\n","48e86550":"y=np.zeros(shape=(5,len(outputs),len(symbols)))\nfor i in range(5):\n    for j in range(len(outputs)):\n        y[i][j][symbols.index(outputs[j][i])]=1\nprint(\"Shape of Hot Encoded Y :\",y.shape)\n        \ntrain_X=X[:int(0.8*len(X))]\ntrain_Y=y[:,:int(0.8*len(X)),:]\ntrain_outputs=outputs[:int(0.8*len(X))]\n\nvalidation_X=X[int(0.8*len(X)):int(0.9*len(X))]\nvalidation_Y=y[:,int(0.8*len(X)):int(0.9*len(X)),:]\nvalidation_outputs=outputs[int(0.8*len(X)):int(0.9*len(X))]\n\ntest_X=X[int(0.9*len(X)):]\ntest_Y=y[:,int(0.9*len(X)):,:]\ntest_outputs=outputs[int(0.9*len(X)):]\n\n","052db7ca":"print(\"Train X Shape\",train_X.shape)\nprint(\"Train Y Shape\",train_Y.shape)\n\nprint(\"Validation X Shape\",validation_X.shape)\nprint(\"Validation Y Shape\",validation_Y.shape)\n\nprint(\"Test X Shape\",test_X.shape)\nprint(\"Test Y Shape\",test_Y.shape)\n","c4662d85":"# Neural Network Model \n# Try Removing Batch Normalisation and see how the performance decreases.\n\nimage=keras.layers.Input((50,200,1))\nconv1=keras.layers.Conv2D(16,(3,3),activation='relu',padding='same')(image)\nmp1=keras.layers.MaxPooling2D((2,2),padding='same')(conv1)\nconv2=keras.layers.Conv2D(32,(3,3),activation='relu',padding='same')(mp1)\nmp2=keras.layers.MaxPooling2D((2,2),padding='same')(conv2)\nconv3=keras.layers.Conv2D(64,(3,3),activation='relu',padding='same')(mp2)\nbn = keras.layers.BatchNormalization()(conv3)\nflat=keras.layers.Flatten()(bn)\n\nout=[]\nfor i in range(5):     # 5 is the number of characters in the captcha.\n    den1=keras.layers.Dense(64,activation='relu')(flat)\n    drop1=keras.layers.Dropout(0.5)(den1)\n    den2=keras.layers.Dense(36,activation='sigmoid')(drop1)\n    out.append(den2)\nmodel=keras.Model(image,out)","72467b61":"model.compile(loss='categorical_crossentropy',optimizer=\"adam\",metrics=['accuracy'])\nmodel.summary()\n","5e5736bc":"model.fit(train_X, [train_Y[0], train_Y[1], train_Y[2], train_Y[3], train_Y[4]], batch_size=32, epochs=50,validation_data=(validation_X,[validation_Y[0],validation_Y[1],validation_Y[2],validation_Y[3],validation_Y[4]]))","1ef21679":"prediction=np.asarray(model.predict(test_X))","bce6f1c6":"results=[]\nfor i in range(prediction.shape[1]):\n    for j in range(prediction.shape[0]):\n        results.append(symbols[np.argmax(prediction[j][i])])\n\ni=0\nans=[]\nwhile(i!=len(results)):\n    ans.append(''.join(results[i:i+5]))\n    i=i+5\n","45f59880":"\nfrom random import *\nx = randint(1, prediction.shape[1]-5)\n\nprint(\"Correct Output :\",ans[x:x+5])\nprint(\"Predicted Output :\",test_outputs[x:x+5])\nan=ans[x:x+5]\n","29ce4037":"fig, axs = plt.subplots(5,sharex='col', sharey='row')\ntest_images=[]\nfor i in (test_outputs[x:x+5]):\n    test_images.append('\/kaggle\/input\/captcha-version-2-images\/samples\/'+ i+'.png')\n\nplt.subplots_adjust(wspace=0, hspace=0.9)\nfor k,i in enumerate(test_images):\n    img=mpimg.imread(i)\n    axs[k].imshow(img)\n    axs[k].set_title(an[k])\n    axs[k].set_aspect('equal')\n\n    \n    \n","6e299d5f":"Fitting the Model","8086b8cc":"The Prediction Model for Recognition using Keras.","c8b6b219":"Here I have created a one hot matrix for Y.","44a191a4":"Checking our predictions.","a53358b9":"In this Notebook I have used keras to predict the text written in the captcha.","7813ee1e":"Just taking some random 5 datapoints from the dataset","8dc68629":"Here I have taken the output of each captcha image in the \"outputs\" array.","b347a171":"Testing the results after Training on the Test Dataset by Decoding the data."}}