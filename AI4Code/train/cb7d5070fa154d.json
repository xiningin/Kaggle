{"cell_type":{"066deab5":"code","d281819e":"code","4d4c0fa4":"code","3a5ca477":"code","11b49205":"code","468d7abb":"code","2e46cc57":"code","b3e27050":"code","68e0e01e":"code","0641fd12":"code","1bbc7469":"code","11b691eb":"code","d31cfd94":"code","496ade0b":"code","cdef6769":"code","110ae7fd":"code","f2b5fbef":"code","43604683":"code","d4f96851":"code","78fadb4c":"code","124e297b":"code","1a95643f":"code","f1a30316":"code","c56fd9b7":"code","b4f8a42c":"code","2802d6cc":"code","5cc6be10":"code","84452fe8":"code","6bd5101f":"code","dbc54029":"code","723ae670":"code","5c93b8f9":"code","778af8d2":"code","1ec1a92f":"code","28af2d00":"code","63ab4816":"code","81575f9f":"code","aae4eaa0":"code","048d6e44":"code","86849363":"code","0c2ae2f9":"code","f43d166d":"code","29d01c42":"code","5cf6548e":"code","5631e577":"code","e15c7f0e":"code","d2f856df":"code","a62ee8cd":"code","29bdcb98":"code","43fe4980":"code","2b7a7349":"code","cbacae3f":"code","ddd22049":"code","abd0d083":"code","b8cbbf71":"code","7f232cc3":"code","48ccd789":"code","2d3f0353":"code","6f0a90d5":"code","3703a4f1":"code","d1509399":"code","ba8774fc":"code","5b0ea52e":"code","20d5fed9":"code","a5aa6f73":"code","845cca7c":"code","3a922b1e":"code","abc93203":"code","85ad0c77":"code","a5dac1c4":"code","8577c897":"code","19715f93":"code","6d6e4295":"code","6b1f6508":"code","d59b62b0":"code","eda55224":"code","1622e622":"code","e1d19391":"code","dc060049":"code","34749856":"code","baf13e5e":"code","41c2750a":"code","ac53e4e7":"code","0b797530":"code","4b84de37":"code","027fdf6f":"code","4987067f":"code","8e39205d":"code","7ea45c98":"code","b8149ce8":"code","9a7dd848":"code","de56d378":"code","f8ae0ca4":"code","593d9c1d":"code","592d8853":"code","fb239d63":"code","d38b9dda":"code","d27e0d35":"code","0740c539":"code","c49ac85f":"code","874abf0f":"code","52548a61":"code","12166166":"code","06e75a2a":"code","107bbae5":"code","3fe1de37":"code","11591c57":"code","b95d1862":"code","78582b72":"code","956fa272":"code","a7124eb5":"code","c5720346":"code","cc18a9f7":"code","86ec147b":"code","b29e320b":"code","b476522f":"code","aa91e8a3":"code","9093d6a3":"code","efb7abc8":"code","01014c13":"code","487cd0cd":"code","4aec3cd9":"code","d203733d":"code","22f3101b":"code","644eb053":"code","e1c6ef08":"code","c2afff7b":"code","7de55760":"code","9d8900e1":"code","b19422ea":"code","353321d9":"code","8080b16a":"code","a123b71a":"code","035cb87e":"code","24ded376":"code","da81ea94":"code","f858ab10":"code","275bf05c":"code","676de9df":"code","fc5f8cdd":"code","e53372ca":"code","d0fac85d":"code","1e0a8a60":"code","6f1dfed9":"code","c0cf3490":"markdown","49fbd680":"markdown","b207f6ba":"markdown","8d0163b5":"markdown","4757059a":"markdown","01733491":"markdown","1c6c46b6":"markdown","f42afd1e":"markdown","f1d206f1":"markdown","3a623dad":"markdown","46ff383e":"markdown","f32c1f3c":"markdown","1d74610f":"markdown","df145464":"markdown","9e179ceb":"markdown","cec91159":"markdown","09bff2b2":"markdown","5c309e80":"markdown","b9e81de7":"markdown","6a4ceb76":"markdown"},"source":{"066deab5":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d281819e":"#! pip install pycld2","4d4c0fa4":"import numpy as np\nimport pandas as pd\n\n#NLP Library\nimport spacy\nimport re\n\n#Language Detect Library\nimport pycld2 as cld2\n\n#Feature extraction, model selection and model training library\nfrom sklearn.feature_extraction.text import HashingVectorizer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.model_selection import train_test_split\n\n#Libraries to check the model performance\nfrom sklearn import metrics\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\n\n#Graphing Libraries\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as snb\nfrom wordcloud import WordCloud, STOPWORDS\n\n#Hypothesis Testing\nimport math\nfrom scipy.stats import chi2_contingency, chisquare, chi2","3a5ca477":"nlp = spacy.load(\"en_core_web_sm\",disable=[\"tagger\",\"parser\",\"ner\"])","11b49205":"def clean_tweet_text_regex(tweet):\n    tweet = tweet.lower() # to lower case\n    tweet = re.sub(r\"@[A-Za-z0-9]+\",\"\", tweet) # Remove @Mentions\n    tweet = re.sub(r\"#\",\"\", tweet) # remove # \\ART[\\s]+\n    tweet = re.sub(r\"\\ART[\\s]+\",\"\", tweet) # Remove RT in start\n    tweet = re.sub(r\"https?:\\\/\\\/\\S+\",\"\", tweet) # Remove hyperlink\n    tweet = re.sub(\"(.)\\\\1{2,}\",\"\\\\1\", tweet) # Remove more than one characters.\n    tweet = re.sub(r\"[^A-Za-z0-9\\s]+\", \"\",str(tweet)) #remove special characters \"!\"\n    \n    return tweet","468d7abb":"def clean_tweet_spacy_core(doc):\n    tokens= []\n\n    for token in doc:\n        if token.is_stop:\n            continue\n        if token.text != token.lemma_:\n            tokens.append(token.lemma_)\n        else:\n            tokens.append(token.text)\n      \n    \n    tweet=\" \".join(tokens)\n    return tweet","2e46cc57":"def doc_to_spans(list_of_texts, join_string=' ||| '):\n    all_docs = nlp(' ||| '.join(list_of_texts))\n    split_inds = [i for i, token in enumerate(all_docs) if token.text == '|||'] + [len(all_docs)]\n    new_docs = [all_docs[(i + 1 if i > 0 else i):j] for i, j in zip([0] + split_inds[:-1], split_inds)]\n    all_docs = None\n    return new_docs \n\ndef get_complete_spans(data,colname):\n    splitted_frames = np.array_split(data, 500)\n    docs=[]\n    i = 1\n    for frame in splitted_frames:\n        docs.append(doc_to_spans(frame[colname]))\n    return docs","b3e27050":"def clean_tweet_spacy(data, colname):\n    docs = get_complete_spans(data, colname)\n    \n    print(\"Tweets cleaning started\")\n    tweets = []\n    \n    for doces in docs:\n        for doc in doces:\n            tweets.append(clean_tweet_spacy_core(doc))\n\n    print(\"Tweets cleanned\")\n    return tweets","68e0e01e":"def detect_lang(tweet):\n    try:\n        isReliable, textBytesFound, details = cld2.detect(tweet)\n        return details[0][0]\n    except:\n        return \"not found\"","0641fd12":"labeled_data = pd.read_csv(\"\/kaggle\/input\/sentiment140\/training.1600000.processed.noemoticon.csv\", encoding = \"ISO-8859-1\", engine=\"python\")","1bbc7469":"labeled_data.head()","11b691eb":"labeled_data.columns = [\"label\", \"time\", \"date\", \"query\", \"username\", \"text\"]","d31cfd94":"labeled_data.head()","496ade0b":"def check_col_null_values(data):\n    col_null_values = pd.DataFrame(columns=[\"column\",\"nullvalues\"])\n    null_values = []\n\n    for col in data.columns:\n        sum = data[col].isnull().sum()\n        print(f\"{col}: null percent: {sum\/data.shape[0]*100} null values: {sum}\/{data.shape[0]} value count: {data.shape[0] - sum}\/{data.shape[0]}\")\n        null_values.append(sum)\n    \n    col_null_values[\"column\"] = data.columns\n    col_null_values[\"nullvalues\"] = null_values\n\n    return col_null_values","cdef6769":"check_col_null_values(labeled_data)","110ae7fd":"labeled_data[\"text\"] = labeled_data[\"text\"].apply(clean_tweet_text_regex)","f2b5fbef":"train_langs = labeled_data[\"text\"].apply(detect_lang)","43604683":"train_langs.value_counts()","d4f96851":"labeled_data[\"Lang\"] = train_langs","78fadb4c":"eng_train_data = labeled_data[labeled_data[\"Lang\"] == \"ENGLISH\"]","124e297b":"len(eng_train_data)","1a95643f":"eng_train_data[\"text\"] = clean_tweet_spacy(eng_train_data,\"text\")","f1a30316":"if np.sum(labeled_data[\"text\"].isnull()) > 0:\n    labeled_data = labeled_data.dropna(subset=['text'])","c56fd9b7":"trump_tweets = pd.read_csv(\"\/kaggle\/input\/us-election-2020-tweets\/hashtag_donaldtrump.csv\", engine=\"python\")\ntrump_tweets.head()","b4f8a42c":"trump_tweets.columns","2802d6cc":"columns = [\"tweet\", \"created_at\", 'likes', 'retweet_count', 'user_id', 'user_followers_count', 'user_location', 'lat',\n       'long', 'city', 'country', 'continent', 'state', 'state_code']\n\ntrump_tweets = trump_tweets[columns]\n\ntrump_tweets.head()","5cc6be10":"col_null_values = check_col_null_values(trump_tweets)","84452fe8":"plt.figure(figsize=(24,6))\n\nsnb.barplot(x=col_null_values[\"column\"], y=col_null_values[\"nullvalues\"])\n\nplt.title(\"Null Values in Donald Trump Dataset\")","6bd5101f":"trump_tweets.dtypes","dbc54029":"def clean_data_frame(dataframe):\n    dataframe['likes'] = pd.to_numeric(dataframe['likes'], errors=\"coerce\")\n    dataframe['user_followers_count'] = pd.to_numeric(dataframe['user_followers_count'], errors=\"coerce\")\n    dataframe[\"likes\"].fillna(dataframe[\"likes\"].mean(), inplace=True)\n    dataframe[\"retweet_count\"].fillna(dataframe[\"retweet_count\"].mean(), inplace=True)\n    #dataframe[\"user_followers_count\"].fillna(dataframe[\"user_followers_count\"].mean(), inplace=True) ??\n    dataframe['created_at'] = pd.to_datetime(dataframe['created_at'], errors=\"coerce\") \n    dataframe[\"created_at\"] = dataframe[\"created_at\"].dt.strftime('%m-%d')","723ae670":"clean_data_frame(trump_tweets)","5c93b8f9":"np.sum(trump_tweets[\"tweet\"].isnull())","778af8d2":"trump_tweets = trump_tweets.dropna(subset=['tweet'])","1ec1a92f":"check_col_null_values(trump_tweets)","28af2d00":"trump_tweets[\"tweet\"] = trump_tweets[\"tweet\"].apply(clean_tweet_text_regex)","63ab4816":"trump_langs = trump_tweets[\"tweet\"].apply(detect_lang)","81575f9f":"trump_langs.unique()","aae4eaa0":"trump_tweets[\"Lang\"] = trump_langs","048d6e44":"eng_tweet_trump = trump_tweets[trump_tweets[\"Lang\"] == \"ENGLISH\"]","86849363":"eng_tweet_trump[\"tweet\"] = clean_tweet_spacy(eng_tweet_trump, \"tweet\")","0c2ae2f9":"joebiden_tweets = pd.read_csv(\"\/kaggle\/input\/us-election-2020-tweets\/hashtag_joebiden.csv\", engine=\"python\")\njoebiden_tweets.head()","f43d166d":"joebiden_tweets = joebiden_tweets[columns]","29d01c42":"joe_col_null_values = check_col_null_values(joebiden_tweets)","5cf6548e":"plt.figure(figsize=(24,6))\n\nsnb.barplot(x=joe_col_null_values[\"column\"], y=joe_col_null_values[\"nullvalues\"])\nplt.title(\"Null Values in Joe Biden Dataset\")","5631e577":"joebiden_tweets.dtypes","e15c7f0e":"clean_data_frame(joebiden_tweets)","d2f856df":"np.sum(joebiden_tweets[\"tweet\"].isnull())","a62ee8cd":"joebiden_tweets = joebiden_tweets.dropna(subset=['tweet'])","29bdcb98":"joebiden_tweets[\"tweet\"] = joebiden_tweets[\"tweet\"].apply(clean_tweet_text_regex)","43fe4980":"joe_langs = joebiden_tweets[\"tweet\"].apply(detect_lang)","2b7a7349":"joe_langs.unique()","cbacae3f":"joe_langs.value_counts()","ddd22049":"joebiden_tweets[\"Lang\"] = joe_langs","abd0d083":"eng_joebiden_tweets = joebiden_tweets[joebiden_tweets[\"Lang\"] == \"ENGLISH\"]","b8cbbf71":"eng_joebiden_tweets[\"tweet\"] = clean_tweet_spacy(eng_joebiden_tweets, \"tweet\")","7f232cc3":"trian_languages = labeled_data[\"Lang\"].value_counts()\n\ntrian_languages","48ccd789":"trump_langs_value_count = trump_langs.value_counts()\n\ntrump_langs_value_count","2d3f0353":"jeo_lang_count = joe_langs.value_counts()\n\njeo_lang_count","6f0a90d5":"fig, axes = plt.subplots(nrows=3, figsize=(16, 8))\n\n#plt.figure(figsize=(16,6))\nfig.tight_layout(pad=3.0)\nplt.setp(axes, xlabel=\"Languages\", ylabel=\"Count\")\naxes[0].set_title(\"Train Data Top Ten Languages Count\")\naxes[1].set_title(\"Trump Data Top Ten Languages Count\")\naxes[2].set_title(\"Joe Biden Data Top Ten Languages Count\")\nsnb.barplot(x=trian_languages.index[:10], y=trian_languages.values[:10], ax=axes[0])\n\nsnb.barplot(x=trump_langs_value_count.index[:10], y=trump_langs_value_count.values[:10], ax=axes[1])\n\nsnb.barplot(x=jeo_lang_count.index[:10], y=jeo_lang_count.values[:10], ax=axes[2])","3703a4f1":"trump_tweets_by_date = trump_tweets.groupby(\"created_at\")\n\ntrump_tweets_count_by_date = trump_tweets_by_date.count()\n\ntrump_tweets_by_date_sum = trump_tweets_by_date.sum(numeric_only=True)","d1509399":"joe_tweets_by_date = joebiden_tweets.groupby(\"created_at\")\n\njoe_tweets_count_by_date = joe_tweets_by_date.count()\n\njoe_tweets_by_date_sum = joe_tweets_by_date.sum(numeric_only=True)","ba8774fc":"tweet_df = pd.DataFrame(columns=[\"Date\", \"Trump Tweets Count\", \"Joe Biden Tweet Count\"])\ntweet_df[\"Date\"] = trump_tweets_count_by_date.index\ntweet_df[\"Trump Tweets Count\"] = list(trump_tweets_count_by_date.tweet)\ntweet_df[\"Joe Biden Tweet Count\"] = list(joe_tweets_count_by_date.tweet)\n\ntweet_df.set_index(\"Date\", inplace=True)\n","5b0ea52e":"plt.figure(figsize=(16,6))\n\nsnb.lineplot(data=tweet_df)\nplt.title(\"Tweets count w.r.t. Date\")\nplt.ylabel(\"Tweet Counts\")","20d5fed9":"likes_df = pd.DataFrame(columns=[\"Date\", \"Trump Likes\", \"Joe Biden Likes\"])\nlikes_df[\"Date\"] = trump_tweets_count_by_date.index\nlikes_df[\"Trump Likes\"] = list(trump_tweets_by_date_sum.likes)\nlikes_df[\"Joe Biden Likes\"] = list(joe_tweets_by_date_sum.likes)\n\nlikes_df.set_index(\"Date\", inplace=True)","a5aa6f73":"plt.figure(figsize=(16,6))\n\nsnb.lineplot(data=likes_df)\n\nplt.title(\"Likes count w.r.t. Date\")\nplt.ylabel(\"Likes Counts\")","845cca7c":"retweet_count_df = pd.DataFrame(columns=[\"Date\", \"Trump Retweet Count\", \"Joe Biden Retweet Count\"])\nretweet_count_df[\"Date\"] = trump_tweets_count_by_date.index\nretweet_count_df[\"Trump Retweet Count\"] = list(trump_tweets_by_date_sum.retweet_count)\nretweet_count_df[\"Joe Biden Retweet Count\"] = list(joe_tweets_by_date_sum.retweet_count)\n\nretweet_count_df.set_index(\"Date\", inplace=True)","3a922b1e":"plt.figure(figsize=(16,6))\n\nsnb.lineplot(data=retweet_count_df)\n\nplt.title(\"Retweets count w.r.t. Date\")\nplt.ylabel(\"Retweets Counts\")","abc93203":"stopwords = set(STOPWORDS)\nwordcloud = WordCloud(width=5000, height=4000,stopwords=stopwords,random_state = 2016).generate(\" \".join([i for i in eng_tweet_trump['tweet'].str.upper()]))\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.title(\"Trump Tweets Word Cloud\")\n","85ad0c77":"stopwords = set(STOPWORDS)\nwordcloud = WordCloud(width=5000, height=4000,stopwords=stopwords,random_state = 2016).generate(\" \".join([i for i in eng_tweet_trump['tweet'].str.upper()]))\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.title(\"Joe Biden Tweets Word Cloud\")","a5dac1c4":"def train_model(train_data, targets):\n    X_train, X_test, Y_train, Y_test = train_test_split(train_data, targets, test_size=0.2)\n\n    model = Pipeline([('vect', HashingVectorizer()),\n                      ('logreg', LogisticRegression(max_iter=1000, solver=\"saga\")),\n              ])\n    model.fit(X_train, Y_train)\n\n    return model, X_test, Y_test","8577c897":"def check_model_metrics(model, test_data, test_targets):\n    y_pred = model.predict(test_data)\n\n    print(\"ACCURACY:\")\n    print(metrics.accuracy_score(test_targets, y_pred)*100)\n\n    print(\"\\nCONFUSSION MATRIX\")\n    print(confusion_matrix(test_targets, y_pred))\n\n    print(\"\\nCLASSIFICATION REPORT\")\n    print(classification_report(test_targets, y_pred))","19715f93":"train_data = eng_train_data['text']","6d6e4295":"targets = eng_train_data[\"label\"]","6b1f6508":"model, x_test, y_test = train_model(train_data, targets)","d59b62b0":"check_model_metrics(model, x_test, y_test)","eda55224":"def get_sentiments(model, data, level_of_signifence):\n    sentiments=[]\n    polarity = []\n    prediction_prob = model.predict_proba(data)\n\n    for prob in prediction_prob:\n        dif = prob[1] - prob[0]\n        polarity.append(prob[1])\n        if dif >= -level_of_signifence and dif <= level_of_signifence:\n            sentiments.append(\"Neutral\")\n        elif dif > level_of_signifence:\n            sentiments.append(\"Positive\")\n        else:\n            sentiments.append(\"Negative\")\n            \n    return sentiments, polarity","1622e622":"trump_tweets_data = eng_tweet_trump[\"tweet\"]","e1d19391":"trump_sentiments, tump_polarity = get_sentiments(model, trump_tweets_data, 0.1)","dc060049":"joe_tweets_data = eng_joebiden_tweets[\"tweet\"]","34749856":"joe_sentiments, joe_polarity = get_sentiments(model, joe_tweets_data, 0.1)","baf13e5e":"pd.Series(trump_sentiments).value_counts(normalize=True)","41c2750a":"pd.Series(joe_sentiments).value_counts(normalize=True)","ac53e4e7":"eng_tweet_trump[\"sentiments\"] = trump_sentiments\neng_tweet_trump[\"polarity\"] = tump_polarity","0b797530":"eng_joebiden_tweets[\"sentiments\"] = joe_sentiments\neng_joebiden_tweets[\"polarity\"] = joe_polarity","4b84de37":"frame = (eng_tweet_trump[\"country\"].value_counts(normalize=True)*100).to_frame()","027fdf6f":"trump_contries = frame[frame[\"country\"] >= 1].index","4987067f":"trump_countrywise_tweets = eng_tweet_trump[eng_tweet_trump[\"country\"].isin(trump_contries)][[\"country\",\"sentiments\",\"tweet\"]]\n","8e39205d":"trump_countrywise_tweets_count = trump_countrywise_tweets.groupby([\"country\", \"sentiments\"]).count()","7ea45c98":"positive_tweets = []\nneutral_tweets = []\nnegative_tweets = []\ni = 0\n\ndf_trump_countrywise_sentiments= pd.DataFrame(columns=[\"country\", \"Positive Tweets Count\", \"Neutral Tweets Count\", \"Negative Tweets Count\"])\n\ndf_trump_countrywise_sentiments[\"country\"] = trump_contries\ndf_trump_countrywise_sentiments[\"Positive Tweets Count\"] = [0]*len(trump_contries)\ndf_trump_countrywise_sentiments[\"Neutral Tweets Count\"] = [0]*len(trump_contries)\ndf_trump_countrywise_sentiments[\"Negative Tweets Count\"] = [0]*len(trump_contries)\n\nfor item in trump_countrywise_tweets_count.index:\n  country = item[0]\n  if item[1] == \"Positive\":\n    \n    df_trump_countrywise_sentiments.loc[df_trump_countrywise_sentiments.country == country, 'Positive Tweets Count'] = trump_countrywise_tweets_count.tweet[i]\n  if item[1] == \"Negative\":\n    df_trump_countrywise_sentiments.loc[df_trump_countrywise_sentiments.country == country, 'Negative Tweets Count']= trump_countrywise_tweets_count.tweet[i]\n  if item[1] == \"Neutral\":\n    df_trump_countrywise_sentiments.loc[df_trump_countrywise_sentiments.country == country, 'Neutral Tweets Count']= trump_countrywise_tweets_count.tweet[i]\n  i+=1\n\n\n\ndf_trump_countrywise_sentiments.set_index(\"country\", inplace=True)","b8149ce8":"pp = (df_trump_countrywise_sentiments[\"Positive Tweets Count\"] \/ (df_trump_countrywise_sentiments[\"Positive Tweets Count\"] +df_trump_countrywise_sentiments[\"Neutral Tweets Count\"]+df_trump_countrywise_sentiments[\"Negative Tweets Count\"]))*100\n\nnup = (df_trump_countrywise_sentiments[\"Neutral Tweets Count\"] \/ (df_trump_countrywise_sentiments[\"Positive Tweets Count\"] +df_trump_countrywise_sentiments[\"Neutral Tweets Count\"]+df_trump_countrywise_sentiments[\"Negative Tweets Count\"]))*100\n\nnp = (df_trump_countrywise_sentiments[\"Negative Tweets Count\"] \/ (df_trump_countrywise_sentiments[\"Positive Tweets Count\"] +df_trump_countrywise_sentiments[\"Neutral Tweets Count\"]+df_trump_countrywise_sentiments[\"Negative Tweets Count\"]))*100\n\ndf_trump_countrywise_sentiments[\"Positive Tweets Count\"] = pp\n\ndf_trump_countrywise_sentiments[\"Neutral Tweets Count\"] = nup\n\ndf_trump_countrywise_sentiments[\"Negative Tweets Count\"] = np\n","9a7dd848":"frame = (eng_joebiden_tweets[\"country\"].value_counts(normalize=True)*100).to_frame()","de56d378":"joe_contries = frame[frame[\"country\"] >= 1].index","f8ae0ca4":"joe_countrywise_tweets = eng_joebiden_tweets[eng_joebiden_tweets[\"country\"].isin(joe_contries)][[\"country\",\"sentiments\",\"tweet\"]]\n","593d9c1d":"joe_countrywise_tweets_count = joe_countrywise_tweets.groupby([\"country\", \"sentiments\"]).count()","592d8853":"positive_tweets = []\nneutral_tweets = []\nnegative_tweets = []\ni = 0\n\ndf_joe_countrywise_sentiments= pd.DataFrame(columns=[\"country\", \"Positive Tweets Count\", \"Neutral Tweets Count\", \"Negative Tweets Count\"])\n\ndf_joe_countrywise_sentiments[\"country\"] = joe_contries\ndf_joe_countrywise_sentiments[\"Positive Tweets Count\"] = [0]*len(joe_contries)\ndf_joe_countrywise_sentiments[\"Neutral Tweets Count\"] = [0]*len(joe_contries)\ndf_joe_countrywise_sentiments[\"Negative Tweets Count\"] = [0]*len(joe_contries)\n\nfor item in joe_countrywise_tweets_count.index:\n  country = item[0]\n  if item[1] == \"Positive\":\n    \n    df_joe_countrywise_sentiments.loc[df_joe_countrywise_sentiments.country == country, 'Positive Tweets Count'] = joe_countrywise_tweets_count.tweet[i]\n  if item[1] == \"Negative\":\n    df_joe_countrywise_sentiments.loc[df_joe_countrywise_sentiments.country == country, 'Negative Tweets Count']= joe_countrywise_tweets_count.tweet[i]\n  if item[1] == \"Neutral\":\n    df_joe_countrywise_sentiments.loc[df_joe_countrywise_sentiments.country == country, 'Neutral Tweets Count']= joe_countrywise_tweets_count.tweet[i]\n  i+=1\n\n\n\ndf_joe_countrywise_sentiments.set_index(\"country\", inplace=True)","fb239d63":"pp = (df_joe_countrywise_sentiments[\"Positive Tweets Count\"] \/ (df_joe_countrywise_sentiments[\"Positive Tweets Count\"] +df_joe_countrywise_sentiments[\"Neutral Tweets Count\"]+df_joe_countrywise_sentiments[\"Negative Tweets Count\"]))*100\n\nnup = (df_joe_countrywise_sentiments[\"Neutral Tweets Count\"] \/ (df_joe_countrywise_sentiments[\"Positive Tweets Count\"] +df_joe_countrywise_sentiments[\"Neutral Tweets Count\"]+df_joe_countrywise_sentiments[\"Negative Tweets Count\"]))*100\n\nnp = (df_joe_countrywise_sentiments[\"Negative Tweets Count\"] \/ (df_joe_countrywise_sentiments[\"Positive Tweets Count\"] +df_joe_countrywise_sentiments[\"Neutral Tweets Count\"]+df_joe_countrywise_sentiments[\"Negative Tweets Count\"]))*100\n\ndf_joe_countrywise_sentiments[\"Positive Tweets Count\"] = pp\n\ndf_joe_countrywise_sentiments[\"Neutral Tweets Count\"] = nup\n\ndf_joe_countrywise_sentiments[\"Negative Tweets Count\"] = np\n","d38b9dda":"plot = df_trump_countrywise_sentiments.plot(kind=\"bar\",figsize=(16,6),color=[\"blue\",\"Green\",\"red\"])\n\nplt.title(\"Donald Trump Sentiment Percent w.r.t. Country\")\nplt.ylabel(\"Sentiment Counts\")\nfor p in plot.patches:\n  plot.annotate(str(p.get_height().round(decimals=2)), (p.get_x(), p.get_height()+0.5 ))","d27e0d35":"plot = df_joe_countrywise_sentiments.plot(kind=\"bar\",figsize=(16,6),color=[\"blue\",\"Green\",\"red\"])\nplt.title(\"Joe Biden Sentiment Percent w.r.t. Country\")\nplt.ylabel(\"Sentiment Counts\")\n\nfor p in plot.patches:\n  plot.annotate(str(p.get_height().round(decimals=2)), (p.get_x(), p.get_height()+0.5 ))","0740c539":"trump_US_tweets = pd.concat([eng_tweet_trump[eng_tweet_trump[\"country\"] == \"United States of America\"], eng_tweet_trump[eng_tweet_trump[\"country\"] == \"United States\"]])\n\njoe_US_tweets = pd.concat([eng_joebiden_tweets[eng_joebiden_tweets[\"country\"] == \"United States of America\"], eng_joebiden_tweets[eng_joebiden_tweets[\"country\"] == \"United States\"]])","c49ac85f":"frame = (trump_US_tweets[\"state\"].value_counts(normalize=True)*100).to_frame()\ntrump_states = frame[frame[\"state\"] >= 1].index\n\ntrump_US_tweets = trump_US_tweets[trump_US_tweets[\"state\"].isin(trump_states)]","874abf0f":"frame = (joe_US_tweets[\"state\"].value_counts(normalize=True)*100).to_frame()\njoe_states = frame[frame[\"state\"] >= 1].index\n\njoe_US_tweets = joe_US_tweets[joe_US_tweets[\"state\"].isin(joe_states)]","52548a61":"trump_US_tweets_groupby_state_sent = trump_US_tweets.groupby([\"state\", \"sentiments\"])\n\njoe_US_tweets_groupby_state_sent = joe_US_tweets.groupby([\"state\", \"sentiments\"])","12166166":"trump_US_tweets_groupby_state_sent_count = trump_US_tweets_groupby_state_sent.count()\n\njoe_US_tweets_groupby_state_sent_count = joe_US_tweets_groupby_state_sent.count()","06e75a2a":"us_trump_states = trump_US_tweets_groupby_state_sent_count.index.to_frame()[\"state\"].unique()\n\nus_joe_states = joe_US_tweets_groupby_state_sent_count.index.to_frame()[\"state\"].unique()","107bbae5":"positive_tweets = []\nneutral_tweets = []\nnegative_tweets = []\ni = 0\n\ndf_trump_statewise_sentiments= pd.DataFrame(columns=[\"State\", \"Positive Tweets Count\", \"Neutral Tweets Count\", \"Negative Tweets Count\"])\n\ndf_trump_statewise_sentiments[\"State\"] = us_trump_states\ndf_trump_statewise_sentiments[\"Positive Tweets Count\"] = [0]*len(us_trump_states)\ndf_trump_statewise_sentiments[\"Neutral Tweets Count\"] = [0]*len(us_trump_states)\ndf_trump_statewise_sentiments[\"Negative Tweets Count\"] = [0]*len(us_trump_states)\n\nfor item in trump_US_tweets_groupby_state_sent_count.index:\n  state = item[0]\n  if item[1] == \"Positive\":\n    \n    df_trump_statewise_sentiments.loc[df_trump_statewise_sentiments.State == state, 'Positive Tweets Count'] = trump_US_tweets_groupby_state_sent_count.tweet[i]\n  if item[1] == \"Negative\":\n    df_trump_statewise_sentiments.loc[df_trump_statewise_sentiments.State == state, 'Negative Tweets Count']= trump_US_tweets_groupby_state_sent_count.tweet[i]\n  if item[1] == \"Neutral\":\n    df_trump_statewise_sentiments.loc[df_trump_statewise_sentiments.State == state, 'Neutral Tweets Count']= trump_US_tweets_groupby_state_sent_count.tweet[i]\n  i+=1\n\n\npp = (df_trump_statewise_sentiments[\"Positive Tweets Count\"] \/ (df_trump_statewise_sentiments[\"Positive Tweets Count\"] +df_trump_statewise_sentiments[\"Neutral Tweets Count\"]+df_trump_statewise_sentiments[\"Negative Tweets Count\"]))*100\n\nnup = (df_trump_statewise_sentiments[\"Neutral Tweets Count\"] \/ (df_trump_statewise_sentiments[\"Positive Tweets Count\"] +df_trump_statewise_sentiments[\"Neutral Tweets Count\"]+df_trump_statewise_sentiments[\"Negative Tweets Count\"]))*100\n\nnp = (df_trump_statewise_sentiments[\"Negative Tweets Count\"] \/ (df_trump_statewise_sentiments[\"Positive Tweets Count\"] +df_trump_statewise_sentiments[\"Neutral Tweets Count\"]+df_trump_statewise_sentiments[\"Negative Tweets Count\"]))*100\n\ndf_trump_statewise_sentiments[\"Positive Tweets Count\"] = pp\n\ndf_trump_statewise_sentiments[\"Neutral Tweets Count\"] = nup\n\ndf_trump_statewise_sentiments[\"Negative Tweets Count\"] = np\n\n\ndf_trump_statewise_sentiments.set_index(\"State\", inplace=True)","3fe1de37":"positive_tweets = []\nneutral_tweets = []\nnegative_tweets = []\ni = 0\n\ndf_joe_statewise_sentiments= pd.DataFrame(columns=[\"State\", \"Positive Tweets Count\", \"Neutral Tweets Count\", \"Negative Tweets Count\"])\n\ndf_joe_statewise_sentiments[\"State\"] = us_joe_states\ndf_joe_statewise_sentiments[\"Positive Tweets Count\"] = [0]*len(us_joe_states)\ndf_joe_statewise_sentiments[\"Neutral Tweets Count\"] = [0]*len(us_joe_states)\ndf_joe_statewise_sentiments[\"Negative Tweets Count\"] = [0]*len(us_joe_states)\n\nfor item in joe_US_tweets_groupby_state_sent_count.index:\n  state = item[0]\n  if item[1] == \"Positive\":\n    \n    df_joe_statewise_sentiments.loc[df_joe_statewise_sentiments.State == state, 'Positive Tweets Count'] = joe_US_tweets_groupby_state_sent_count.tweet[i]\n  if item[1] == \"Negative\":\n    df_joe_statewise_sentiments.loc[df_joe_statewise_sentiments.State == state, 'Negative Tweets Count']= joe_US_tweets_groupby_state_sent_count.tweet[i]\n  if item[1] == \"Neutral\":\n    df_joe_statewise_sentiments.loc[df_joe_statewise_sentiments.State == state, 'Neutral Tweets Count']= joe_US_tweets_groupby_state_sent_count.tweet[i]\n  i+=1\n\n\npp = (df_joe_statewise_sentiments[\"Positive Tweets Count\"] \/ (df_joe_statewise_sentiments[\"Positive Tweets Count\"] +df_joe_statewise_sentiments[\"Neutral Tweets Count\"]+df_joe_statewise_sentiments[\"Negative Tweets Count\"]))*100\n\nnup = (df_joe_statewise_sentiments[\"Neutral Tweets Count\"] \/ (df_joe_statewise_sentiments[\"Positive Tweets Count\"] +df_joe_statewise_sentiments[\"Neutral Tweets Count\"]+df_joe_statewise_sentiments[\"Negative Tweets Count\"]))*100\n\nnp = (df_joe_statewise_sentiments[\"Negative Tweets Count\"] \/ (df_joe_statewise_sentiments[\"Positive Tweets Count\"] +df_joe_statewise_sentiments[\"Neutral Tweets Count\"]+df_joe_statewise_sentiments[\"Negative Tweets Count\"]))*100\n\ndf_joe_statewise_sentiments[\"Positive Tweets Count\"] = pp\n\ndf_joe_statewise_sentiments[\"Neutral Tweets Count\"] = nup\n\ndf_joe_statewise_sentiments[\"Negative Tweets Count\"] = np\n\ndf_joe_statewise_sentiments.set_index(\"State\", inplace=True)","11591c57":"plot = df_trump_statewise_sentiments.plot(kind=\"bar\",figsize=(16,10),color=[\"blue\",\"Green\",\"red\"])\n\nplt.title(\"Donald Trump Sentiment Percent w.r.t. States\")\nplt.ylabel(\"Sentiment Counts\")\n\nfor p in plot.patches:\n  plot.annotate(str(p.get_height().round(decimals=2)), (p.get_x(), p.get_height()+0.5 ))","b95d1862":"plot = df_joe_statewise_sentiments.plot(kind=\"bar\",figsize=(16,10),color=[\"blue\",\"Green\",\"red\"])\n\nplt.title(\"Joe Biden Sentiment Percent w.r.t. Country\")\nplt.ylabel(\"Sentiment Counts\")\n\nfor p in plot.patches:\n  plot.annotate(str(p.get_height().round(decimals=2)), (p.get_x(), p.get_height()+0.5 ))","78582b72":"trump_US_tweets_groupby_date = trump_US_tweets.groupby(\"created_at\")\n\njoe_US_tweets_groupby_date = joe_US_tweets.groupby(\"created_at\")","956fa272":"trump_groupby_date_mean = trump_US_tweets_groupby_date.mean()\n\njoe_groupby_date_mean = joe_US_tweets_groupby_date.mean()","a7124eb5":"datewise_polarity = pd.DataFrame(columns=[\"Date\", \"Trump Polarity\", \"Joe Polarity\"])\ndates = trump_groupby_date_mean.index\ndatewise_polarity[\"Date\"] = dates\ndatewise_polarity[\"Trump Polarity\"] = list(trump_groupby_date_mean.polarity)\ndatewise_polarity[\"Joe Polarity\"] =list(joe_groupby_date_mean.polarity)\n\ndatewise_polarity.set_index(\"Date\", inplace=True)","c5720346":"plt.figure(figsize=(16,6))\n\nplt.title(\"Average Polarity w.r.t. Date\")\nplt.ylabel(\"Average Polarity\")\n\nsnb.lineplot(data=datewise_polarity)","cc18a9f7":"trump_US_tweets_gp_date_sent = trump_US_tweets.groupby([\"created_at\",\"sentiments\"])\njoe_US_tweets_gp_date_sent = joe_US_tweets.groupby([\"created_at\",\"sentiments\"])","86ec147b":"positive_tweets = []\nneutral_tweets = []\nnegative_tweets = []\ni = 0\ntrump_US_tweets_gp_date_sent_count = trump_US_tweets_gp_date_sent.count()\n\nfor item in trump_US_tweets_gp_date_sent_count.index:\n  if item[1] == \"Positive\":\n    positive_tweets.append(trump_US_tweets_gp_date_sent_count.tweet[i])\n  if item[1] == \"Negative\":\n    negative_tweets.append(trump_US_tweets_gp_date_sent_count.tweet[i])\n  if item[1] == \"Neutral\":\n    neutral_tweets.append(trump_US_tweets_gp_date_sent_count.tweet[i])\n  i+=1\n\ndf_trump_datewise_sentiments = pd.DataFrame(columns=[\"Date\", \"Positive Tweets Count\", \"Neutral Tweets Count\", \"Negative Tweets Count\"])\n\ndf_trump_datewise_sentiments[\"Date\"] = dates\ndf_trump_datewise_sentiments[\"Positive Tweets Count\"] = positive_tweets\ndf_trump_datewise_sentiments[\"Neutral Tweets Count\"] = neutral_tweets\ndf_trump_datewise_sentiments[\"Negative Tweets Count\"] = negative_tweets\n\ndf_trump_datewise_sentiments.set_index(\"Date\", inplace=True)","b29e320b":"positive_tweets = []\nneutral_tweets = []\nnegative_tweets = []\ni = 0\njoe_US_tweets_gp_date_sent_count = joe_US_tweets_gp_date_sent.count()\n\nfor item in joe_US_tweets_gp_date_sent_count.index:\n  if item[1] == \"Positive\":\n    positive_tweets.append(joe_US_tweets_gp_date_sent_count.tweet[i])\n  if item[1] == \"Negative\":\n    negative_tweets.append(joe_US_tweets_gp_date_sent_count.tweet[i])\n  if item[1] == \"Neutral\":\n    neutral_tweets.append(joe_US_tweets_gp_date_sent_count.tweet[i])\n  i+=1\n\ndf_joe_datewise_sentiments = pd.DataFrame(columns=[\"Date\", \"Positive Tweets Count\", \"Neutral Tweets Count\", \"Negative Tweets Count\"])\n\ndf_joe_datewise_sentiments[\"Date\"] = dates\ndf_joe_datewise_sentiments[\"Positive Tweets Count\"] = positive_tweets\ndf_joe_datewise_sentiments[\"Neutral Tweets Count\"] = neutral_tweets\ndf_joe_datewise_sentiments[\"Negative Tweets Count\"] = negative_tweets\n\ndf_joe_datewise_sentiments.set_index(\"Date\", inplace=True)","b476522f":"fig, axes = plt.subplots(nrows=2, figsize=(16, 12))\n\nfig.tight_layout(pad=3.0)\naxes[0].set_title(\"Trump Datewise Sentiments\")\naxes[1].set_title(\"Joe Biden Datewise Sentiments\")\n\nsnb.lineplot(data=df_trump_datewise_sentiments,ax=axes[0], palette=[\"blue\",\"orange\", \"red\"])\nsnb.lineplot(data=df_joe_datewise_sentiments,ax=axes[1], palette=[\"blue\",\"orange\", \"red\"])","aa91e8a3":"positive_likes = []\nneutral_likes = []\nnegative_likes = []\ni = 0\ntrump_US_tweets_gp_date_sent_sum = trump_US_tweets_gp_date_sent.sum()\n\nfor item in trump_US_tweets_gp_date_sent_sum.index:\n  if item[1] == \"Positive\":\n    positive_likes.append(trump_US_tweets_gp_date_sent_sum.likes[i])\n  if item[1] == \"Negative\":\n    negative_likes.append(trump_US_tweets_gp_date_sent_sum.likes[i])\n  if item[1] == \"Neutral\":\n    neutral_likes.append(trump_US_tweets_gp_date_sent_sum.likes[i])\n  i+=1\n\ndf_trump_datewise_sentiments_likes = pd.DataFrame(columns=[\"Date\", \"Positive Tweets Like\", \"Neutral Tweets Like\", \"Negative Tweets Like\"])\n\ndf_trump_datewise_sentiments_likes[\"Date\"] = dates\ndf_trump_datewise_sentiments_likes[\"Positive Tweets Like\"] = positive_likes\ndf_trump_datewise_sentiments_likes[\"Neutral Tweets Like\"] = neutral_likes\ndf_trump_datewise_sentiments_likes[\"Negative Tweets Like\"] = negative_likes\n\ndf_trump_datewise_sentiments_likes.set_index(\"Date\", inplace=True)","9093d6a3":"positive_likes = []\nneutral_likes = []\nnegative_likes = []\ni = 0\njoe_US_tweets_gp_date_sent_sum = joe_US_tweets_gp_date_sent.sum()\n\nfor item in joe_US_tweets_gp_date_sent_sum.index:\n  if item[1] == \"Positive\":\n    positive_likes.append(joe_US_tweets_gp_date_sent_sum.likes[i])\n  if item[1] == \"Negative\":\n    negative_likes.append(joe_US_tweets_gp_date_sent_sum.likes[i])\n  if item[1] == \"Neutral\":\n    neutral_likes.append(joe_US_tweets_gp_date_sent_sum.likes[i])\n  i+=1\n\ndf_joe_datewise_sentiments_likes = pd.DataFrame(columns=[\"Date\", \"Positive Tweets Like\", \"Neutral Tweets Like\", \"Negative Tweets Like\"])\n\ndf_joe_datewise_sentiments_likes[\"Date\"] = dates\ndf_joe_datewise_sentiments_likes[\"Positive Tweets Like\"] = positive_likes\ndf_joe_datewise_sentiments_likes[\"Neutral Tweets Like\"] = neutral_likes\ndf_joe_datewise_sentiments_likes[\"Negative Tweets Like\"] = negative_likes\n\ndf_joe_datewise_sentiments_likes.set_index(\"Date\", inplace=True)","efb7abc8":"fig, axes = plt.subplots(nrows=2, figsize=(16, 12))\n\nfig.tight_layout(pad=3.0)\naxes[0].set_title(\"Trump Datewise Sentiments Likes\")\naxes[1].set_title(\"Joe Biden Datewise Sentiments Likes\")\n\nsnb.lineplot(data=df_trump_datewise_sentiments_likes,ax=axes[0], palette=[\"blue\",\"orange\", \"red\"])\nsnb.lineplot(data=df_joe_datewise_sentiments_likes,ax=axes[1], palette=[\"blue\",\"orange\", \"red\"])","01014c13":"positive_retweets = []\nneutral_retweets = []\nnegative_retweets = []\ni = 0\ntrump_US_tweets_gp_date_sent_sum = trump_US_tweets_gp_date_sent.sum()\n\nfor item in trump_US_tweets_gp_date_sent_sum.index:\n  if item[1] == \"Positive\":\n    positive_retweets.append(trump_US_tweets_gp_date_sent_sum.retweet_count[i])\n  if item[1] == \"Negative\":\n    negative_retweets.append(trump_US_tweets_gp_date_sent_sum.retweet_count[i])\n  if item[1] == \"Neutral\":\n    neutral_retweets.append(trump_US_tweets_gp_date_sent_sum.retweet_count[i])\n  i+=1\n\ndf_trump_datewise_sentiments_retweets = pd.DataFrame(columns=[\"Date\", \"Positive Tweets Retweets\", \"Neutral Tweets Retweets\", \"Negative Tweets Retweets\"])\n\ndf_trump_datewise_sentiments_retweets[\"Date\"] = dates\ndf_trump_datewise_sentiments_retweets[\"Positive Tweets Retweets\"] = positive_retweets\ndf_trump_datewise_sentiments_retweets[\"Neutral Tweets Retweets\"] = neutral_retweets\ndf_trump_datewise_sentiments_retweets[\"Negative Tweets Retweets\"] = negative_retweets\n\ndf_trump_datewise_sentiments_retweets.set_index(\"Date\", inplace=True)","487cd0cd":"positive_retweet = []\nneutral_retweet = []\nnegative_retweet = []\ni = 0\njoe_US_tweets_gp_date_sent_sum = joe_US_tweets_gp_date_sent.sum()\n\nfor item in joe_US_tweets_gp_date_sent_sum.index:\n  if item[1] == \"Positive\":\n    positive_retweet.append(joe_US_tweets_gp_date_sent_sum.retweet_count[i])\n  if item[1] == \"Negative\":\n    negative_retweet.append(joe_US_tweets_gp_date_sent_sum.retweet_count[i])\n  if item[1] == \"Neutral\":\n    neutral_retweet.append(joe_US_tweets_gp_date_sent_sum.retweet_count[i])\n  i+=1\n\ndf_joe_datewise_sentiments_retweets = pd.DataFrame(columns=[\"Date\", \"Positive Tweets Retweets\", \"Neutral Tweets Retweets\", \"Negative Tweets Retweets\"])\n\ndf_joe_datewise_sentiments_retweets[\"Date\"] = dates\ndf_joe_datewise_sentiments_retweets[\"Positive Tweets Retweets\"] = positive_retweet\ndf_joe_datewise_sentiments_retweets[\"Neutral Tweets Retweets\"] = neutral_retweet\ndf_joe_datewise_sentiments_retweets[\"Negative Tweets Retweets\"] = negative_retweet\n\ndf_joe_datewise_sentiments_retweets.set_index(\"Date\", inplace=True)","4aec3cd9":"fig, axes = plt.subplots(nrows=2, figsize=(16, 12))\n\nfig.tight_layout(pad=3.0)\naxes[0].set_title(\"Trump Datewise Sentiments Retweets\")\naxes[1].set_title(\"Joe Biden Datewise Sentiments Retweets\")\n\nsnb.lineplot(data=df_trump_datewise_sentiments_retweets,ax=axes[0], palette=[\"blue\",\"orange\", \"red\"])\nsnb.lineplot(data=df_joe_datewise_sentiments_retweets,ax=axes[1], palette=[\"blue\",\"orange\", \"red\"])","d203733d":"fig, axes = plt.subplots(ncols=2, figsize=(16, 8))\n\nfig.tight_layout(pad=3.0)\naxes[0].set_title(\"Trump Sentiments Ratio\")\naxes[1].set_title(\"Joe Biden Sentiments Ratio\")\n\ntrump_sentiments_values = eng_tweet_trump[\"sentiments\"].value_counts()\njoe_sentiments_values = eng_joebiden_tweets[\"sentiments\"].value_counts()\n\naxes[0].pie(x=trump_sentiments_values.values, autopct=\"%.1f%%\", explode=[0.05,0, 0], colors=[\"green\",\"orange\",\"gray\"],labels=trump_sentiments_values.index, pctdistance=0.5)\naxes[1].pie(x=joe_sentiments_values.values, autopct=\"%.1f%%\", explode=[0.05,0, 0], colors=[\"green\",\"orange\",\"gray\"],labels=joe_sentiments_values.index, pctdistance=0.5)\n","22f3101b":" all_polarity = pd.concat([eng_tweet_trump[\"polarity\"], eng_joebiden_tweets[\"polarity\"]])","644eb053":"sample = eng_joebiden_tweets[\"polarity\"].sample(n=50)","e1c6ef08":"x_ = sample.mean()\nmio = all_polarity.mean()\nsigma =all_polarity.std()\nn=50\n\nprint(\"sample mean: \",x_, \", population mean: \", mio,\", sigma: \", sigma, \", n: \", n)","c2afff7b":"z_calc = (x_ - mio)\/(sigma\/math.sqrt(n))\nprint(\"Z calculated value is: \", z_calc)","7de55760":"chiObservedData = pd.crosstab(joe_US_tweets[\"sentiments\"], joe_US_tweets[\"state\"])","9d8900e1":"chiObservedData","b19422ea":"stat, p, ddof, expected = chi2_contingency(chiObservedData)","353321d9":"stat, p, ddof, expected","8080b16a":"chi_value, p_value = chisquare(chiObservedData, expected)","a123b71a":"chi_value, p_value","035cb87e":"print(\"Chi-Square Calculated Value:\",  chi_value.sum())","24ded376":"alpha = 0.05\nprob = 1 - alpha\ncritical_value = chi2.ppf(prob, ddof)\nprint(\"Critcal Value: \", critical_value)","da81ea94":"p<alpha","f858ab10":"joe_high_profile_user_tweets = joe_US_tweets[joe_US_tweets[\"user_followers_count\"] > 100000]","275bf05c":"print(\"No. of high profile users in US tweeted for Joe Biden: \", len(joe_high_profile_user_tweets[\"user_id\"].unique()))","676de9df":"trump_high_profile_user_tweets = trump_US_tweets[trump_US_tweets[\"user_followers_count\"] > 100000]","fc5f8cdd":"print(\"No. of high profile users in US tweeted for Donald Trump: \", len(trump_high_profile_user_tweets[\"user_id\"].unique()))","e53372ca":"all_polarity_high_profile_users = pd.concat([trump_high_profile_user_tweets[\"polarity\"], joe_high_profile_user_tweets[\"polarity\"]])","d0fac85d":"sample_joe_high_profile_users = joe_high_profile_user_tweets[\"polarity\"].sample(n=50)","1e0a8a60":"x_ = sample.mean()\nmio = all_polarity.mean()\nsigma =all_polarity.std()\nn=50\n\nprint(\"sample mean: \",x_, \", population mean: \", mio,\", sigma: \", sigma, \", n: \", n)","6f1dfed9":"z_calc = (x_ - mio)\/(sigma\/math.sqrt(n))\nprint(\"Z calculated value is: \", z_calc)","c0cf3490":"# ***First Hypothesis***\nH0 = Average polarity of Joe Biden is greater than overall average polarity.\n\nHa = Average polarity of Joe Biden is lesser than overall average polarity.","49fbd680":"# ***Exploratory Data Analysis***\n","b207f6ba":"# ***Third Hypothesis***\nH0 = Average polarity among high profile users of Joe Biden is greater than overall average polarity among high profile users.\n\nHa = Average polarity among high profile users of Joe Biden is lesser than overall average polarity among high profile users.","8d0163b5":"# ***Data Preparation***\nData Cleansing and Data Transformation","4757059a":"# ***Data Colection***\nWe have retrieved data of US 2020 election with hashtag of Donald Trump and Joe Biden from Kaggle (https:\/\/www.kaggle.com\/manchunhui\/us-election-2020-tweets). It contains almost 900000 tweets related to Donal Trump and 700000 tweets related to Joe Biden. Secondly to train our model we have retrieved labeled data with sentiments from Kaggle (https:\/\/www.kaggle.com\/kazanova\/sentiment140 ), It contains 1.6 million tweets annotated with sentiments.","01733491":"# ***Presentation Of Final Results***\nAfter sentiments of Donald Trump and Joe Biden Tweets are determined, we have shown that Joe Biden had won the elections 2020 according to the sentiments in tweets also. First we have analyzed sentiments counts w.r.t. Country and states of both the participants. Then we have analyzed Average polarity w.r.t. Date of both the participants. Then we have analyzed Sentiment count w.r.t. Date of both the participants. Then we have analyzed likes of the sentiments w.r.t. Date of both the participants. Then we have analyzed Sentiment retweets w.r.t. Date of both the participants. Lastly we have shown the pie chart of the percentage of positive, neutral and negative tweets of both the participants.","1c6c46b6":"\n\n---\n\n\nAlpha = 0.05\nZ_tabular = 1.65\n\nAs,\n\n***Z_calc < Z_tabular***\n\nSo H0 is accepted and Average polarity of Joe Biden is greater than overall average polarity.\n\n---\n\n","f42afd1e":"\n\n---\n\n\nSince\n\n***chi-square-value > critical_value***\n\nand also\n\n***p < alpha***\n\nSo H0 is rejected and Sentiments of Joe Biden is Independent or not related to states\n\n---\n\n\n","f1d206f1":"# ***Clean Tweets Using Regex***\nIn it we removed some special characters and words that did not add any value in the sentiments of tweets but reduced processing time","3a623dad":"# ***Clean Tweets Using Spacy***\nWe have used Spacy to remove stopwords and lemmatization. Since there are a very huge number of tweets in each dataset, we have created the nlp document in chunks and then split it into spans. Now we have used spans to remove the stopwords and replace the lemma word","46ff383e":"# ***Hypothesis Testing***","f32c1f3c":"# ***Analyzed Tweets, Likes and Retweets Count w.r.t. Date.***\nFirst we have analyzed the count of tweets and likes for both the participants w.r.t. Date and according to graph Joe Biden Graph is increasing by time.\n\nNow we have analyzed the count of retweets for both the participants w.r.t. Date and according to the graph Donald Trump retweets count is increasing by time.","1d74610f":"# ***Libraies Loaded***","df145464":"# ***Building a Model***\nFirst of all we have extracted features from tweets using HashVectorizer and then we have splitted our training data in 80-20 ratio. We have tried different algorithms but due huge dataset including huge number of features and rows, very limited number of algorithms worked quickly. In Others like Random Forest, SVM we waited for a very long time it did not completed training. Only Naive Bayessian (GaussianNB) and LogisticRegression worked Quickly. Among these two LogisticRegression had given us 77% of accuracy and Naive Bayessian gave 50% of accuracy. So we have selected LogisticRegression. Once our model is trainned we used this model to find the sentiments of the tweets of both the participants.","9e179ceb":"# ***Detecting Language***\nNow we have used https:\/\/pypi.org\/project\/pycld2\/ library to detect the languages of tweets. We have only used English tweets in this project to analyze the sentiments.","cec91159":"# ***Analyzed Top 10 Languages in All Datasets***\nWe have only used English tweets in this project to analyze the sentiments.","09bff2b2":"# ***Sentiment Analysis***\nSentiment analysis is the process of detecting positive or negative sentiment in text. It\u2019s often used by businesses to detect sentiment in social data, gauge brand reputation, and understand customers\u2019 likes & dislikes. Since customers express their thoughts and feelings more openly than ever before, sentiment analysis is becoming an essential tool to monitor and understand that sentiment. Automatically analyzing customer feedback, such as opinions in survey responses and social media conversations, allows brands to learn what makes customers happy or frustrated. By virtue of knowing customer preference and feedback, companies are able to timely tailor products & services to meet their customers\u2019 needs and expectations. For example, using sentiment analysis to automatically analyze 4,000+ reviews about your product could help you discover if customers are happy about your product acceptance and its value for money. \n\n![image.png](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAh0AAAC8CAYAAADcvxyFAAAgAElEQVR4Aey9B5Sd1Xnur8T+G2tmJE1XmaZCM9ggauz\/yr25SW5WshJDru0YG4Nx4hbAwZViOghEUUdCvY9GQhKiY+OW5Dq2cUlsAzbNdFBFZcqZPnPm+a937\/3u79372993vjMjwUj\/ZK1n7e+cOTPIWVqa33qe5333mIZP\/QYxXRB4z\/\/cUfiZ+k\/9BvWf+q1S04W\/xdSLfD2FqRdHarr4KSh99ik0KT2Nps8aXfI0mqQ+9wyaPvcMGn394zNoVPodGv\/xd2j8J1cN\/\/Q7NHye9HtXX\/g9GpSeRcMXjL74LBqM6r\/4LJS+9Czqv\/Scqy8\/h\/ovP4eplz2P6Ze\/oDTtKy\/A0b+8gGn\/8qKrK17ENKOpV7yIqVf8AVO\/akTPLH7vqy9hKutrL6HJ19dfRpOvb7yMJqVX0PiNSA3feAWRXkXDN+Oq\/9ar0HoN9d96DfVXatVd+Roar3oNM659Hcdf94bVjOvegNL1b2CGozcx44aAbnwT0294C9OkbnwL06x2YtqNOzHtJldTb9qJqTfvRJOvW3aiyWoXmm7ZhcZbd6Eppt1oulVo1m40CTXO2o3G2\/agIUH1t+2F1e17UW9Ud\/te1N2+D3WzA7pjH+rueNvVnW9jiqP9mHJXQHfvxxSlA5h8t9GcA5jsa+5BTBaaNO8gJs87CDonzTsUaf4hTPK1oBWTjCYuaMXEhdlUS59b1IZaqXvaUGs0cXEbJi5ux8QlAd3bjon3drha2oGJVjlMXJpD7bIcJi7TJz3XLmd1ona50IpO1Fp1oXZFF2pXelrVhVqlbtSuMlrdjVqjGvvcg9o1ntb2oNaqF7Vre1G7rhc1jvpQs74PNRv6UL62D6Vr+lBGWqtVurYfyRpA6Tqh9QMoWz+A0g1SgyjdMIjSjb7yKG3Oo6RZn\/SstCmPUqshlLa4KmsZQtlmEsJqSXhffP59zcB7m4H\/J00bC3ydvncUf+aPNwJjQtqQ8L78bJbPyM8f7ucYcPhw8W6\/PkxwI4Gj4dM+bJjXAjgIPjIDB8FHImwQdBjg8KBDAYeCjiTgEODhwwZBRwJw1H3pOTRdSsDxPKZd7sEGw4cPHTHgeFEDB4MGnyHg+GoAOL6WDBwSNug5gg3zHACOBh84DHTUfes1NF79Go5XwFEIOt7EjOuNPOiYfkMh4CD4cGGD4aPp5regJcDDwgaBhwaOOGwwgAjgIPggyLDaEwSO+tv2QCsOHAQbBB6J0KGAw4MOBzYMfCQAx2QDHcnA4cIGg4eGDQ86fNig16nAcSgVQBzYIPAQwFF7TzuUFrej1oBH7ZJ2kAg2ao0seFjYIPDQwEGw4QBHEnRY2CDw6ELNykgWPCxwEHgkQUcPalb3oMYHDnpNkCFUszYBOAg61vehlsBjnQEPAhClFOiQwEHPIeCIwcYgSptJHmzQawsb9Dyk5UFHKQNHBrgoS\/hMaUsGoJBAMorhIgmc3psFBLLAxbvxmVEPHYcBejRwCJfjMwHoMMBBoBEHDnI6EhwOAxyZoKNol4OgI3I3yOWwDoeCjrjDUffl59D4z9rhyAwc5Hg4DgcBR3boiDkcIeAgx8M4HE2JDgdBR9zhIODQ0GEcDgaOK19DEwOHBx1hlyMMHOR6OO4GOx3W4TDA4UHH1JveQtNNAjSk02GhoxBwEHhE0BHBBoOHcThm7UHDrD2oZwWgw4WNQi6HCx2uw\/F2qsNB0GGBg5yOAg6Hgg7rcAiXIwtwZHU5FrW67gY7HT50GOAg6LAi8BDQwc+Rw2GgY1jA0YmaFZ0OdBCAKPDwHQ4CD+FwkMuhtEZDhwUP626w09GLOHD0aofDAIdyOwx4VBjwSHY4+lG6jiRcjnUDKCHosOCR5HAkQIcDHPmYw2EdD+FYJLodGT7z\/k0Z3A4JHkfhc6LbkQVI3s3P\/P8DOnSkQtFK0OUYocMxHOCgmCUWq9hIpYDDkQAcFKmQpl1uoINdDf8sGKtkB46pfqRCr1MilXTgeCUeq1iHg6KVKFahSMUBjmujWIUiFjdWKdLhIOhwgMN3Od6CAg7lcASgwwJHdpej8VaGDH02zNqtIMMBjRTgYGeDz\/RYpQBw3BmIVMj1yBKriDiFHQ6KVGKxShA4Crkc4YglGKkUcDkIOGpYSzpQQ5LgsbQDtULDczjiLod1PFZ1oUZCh41RDGgo4Ihgg4DDSkEHuRyR2+FGKsbx8ICDYxZyPCrW96N0TZLL4cKGgo\/1GjoUeFCcEoxUAg6HDxvqtRupSOAo3QyQRgIc\/L2ZYpajEDbY\/aAIKRixvJtAkeW\/TdBBTgDDh3oORBpH62e0yxFBR1OKy2EdDopWMvU4MsYqw3U4hMvhOhzJPQ4dqyREKgQfPnAEXQ7R30iIVZqoyxEDjuRIxXc5YpFKyOGgmEVBRwGHo2CXI+xwBCOVGHDIHoeGDe1wUKQyMuBQoEGwwVKgYWDjVuFqMGzwKTsc9OzEKYUcjrQex35MCQGHhQ3hcPjuBr1OBY5CHY4IOFSHI6vDoToc6T0OP1Zhh0NBx5J2DRwCPCx8KOjIodb0OFR\/w+lyiP4GdzlErBJyOBR0GOCoWdUNkopWCjgcEjhq1vYoZ4OjlRhwrA+7HNTr0OpHzYZ+DR6hTofncBB0EGxoDaJkfQJ0hGKVGHQUBo7DBR4lLf\/tdoxKKAlCh4AQB0bM+xJA+Ouj9edwcVS5HLHyaFQadQqkPnDIwig\/+x0Oem1Lo6LHMSzgcGOVrMDRwLGK72zwa7\/HEQOO7MXReKQScDjY8fjGyyml0ZQexzeFu2FcDnI4pl7zGk4g0GCllkcTgOP6NzGNxFEKn47DIYFjp3I3LHBQtOJDh+NwGJcjVhrVZVILGsbh0M7GbjTcSkoDDupyxHscjsMRKo8GehyxSEUBRyBasdCRXBydNOcgJs09iElzDsA+02vSvAOmPGqilRSXY+ICDR9Zi6MTFxFweNDhRypel8O6HD5wGLeDoENpaQ41BBxGNctyIEXlUQ86BHCo0qjX5XCBg5wODR02RuE4xXQ4LGiwy6FgQwMHxSnV1OGI9TgKA0f1hn6Qajb2o2JDP0oYPAKw4QIHgYeGjpINgyA5BVK\/x+EAR0KHgzodm0na4fBPdi2Ge76fwCNLZ+ModTyOOreDOiQSGo6lZ+1wRD0Ogo6YyzHsWKXQpEocOqLSaGBShSZXnGjlWdQblyMrcBSMVYYLHOR0qPJoNKlCLkcMOhgw\/NObVAk6HFQmFeXRegUb3qTKt14DlUanXv26AA6KVKLyaGKPwy+NXv8mpivg8KAjATgINBzYUMDhQUcIOKhA6kGHhg0CDwYMcjbE8627UZ8EHYEeRwQbhYqj5HAUF6tMvms\/pCbddQBKdx\/AJF8EHUIT5x5EpAPR87yDmCg1\/yAmzj8UacEhEHhEakXi9MoIehw1hYBDgYeGDgIPJQMdGj46UbPMQIcDG6bDEQIOKpN6LgcDR\/XqbpD0axGlMHDQGYIOZ1IlO3BUb+wHyQEPDzoid8N1ORg41ElF0qwOB5VH\/eKogo4wcDCADBc4+Pved4z3O\/4oS6Qxmj5zLIEG\/2\/xI5X6Twe6HAI4UkdjqUDK7gafofFY63KER2NVhyPrpEqRwEHl0dRYpSBwFBqPLQAcoeKoGI2lHgd3OVzoCJRGU4CDOhwhh8PCBnU57GhsssNBwBEbjQ3GKlGcYqEja49DwoYZlaVxWelwaFdjmMARG43NFqtMMWOyIZdj8p374chCh4ENgg4fNui1gA1+joBDwocHHAQf8w+idv4hJYKP2gVSrahd0ArqbLAcB4TLovL0XQ5RGKU4JXI5TI\/Di1Wsy3FvBBzVS3NQCkAHgQfFKP5orO1uiKkVDRzG3RAuBwOHPrMBB0Uq1UI2YvF7HDZSoWhFOxwMHHzWNA+gYsMASgR0qGcbqcQdDgc8fIcjNqliplWCwJHschwu6DjWY5ZMkyyjDTpkXCKf+Zc4nfJ9+dwg+h\/yffn8Tn6G\/rtapsfx6d+CoMNxOeSESmw0ttCkytMpuzjiDoeFjRBwBBwO3sORZVKF3A0CjsKxSnwfh97DYWDDuhlelyMwHhtzOELAQW6HilSGEavY4mjU4yCHwy2NUrQSFUctdFjgIPiIQ4eCjWECh4KO0GgsRSyOyxFwNzzoCMEGv2enU7i\/QWeCwxHrciTu44gcDoIO0mRHHmwwfGSBDo5TJHiYWMUBD+lu8LOADQUcGaCD4aN2UStqJGzEiqM0LismVBzgCPc4UoGDwGMZqdNKAcfyTtSwFHxEo7EOePgOxyrtbPjAUb2mBywVr1h3I4pVVLQigEPDRx+qU4CDIxUGDedsHgCBR\/lGAR5ZgWPjIEo2euOxhyFWYeDgk12L4Z5qmuUYjlmOKrdDgsWx8BwCDndiJepx2PFY2+EoAByXBGIV63CEgcNCh7\/8qyjg8IqjZkqFoUMtAePehjxTHA4akS28ACxyOGgJWDHAoaEjafmXG6fIaMXfx6GA4yqzhyNThyMOHBY2FHB4kUoGh8MCR2g81gKHGY0VkUojwQZLxim37EYDSb6XFKskAIc7HhtY\/kUAInocCjZm+8CxH5PvCACHgI3JaZHK3W6kIrschYHDjVXY7YicjrjLIYGD9nEQdFjd04aaBJfDdTg84PB7HORw3KudDYpUpMvhQ0c1w4Y9u1ATilUCwOHHKgo+BHBY8DClUS6PpgEHQYcDHsLlUNBhIhUXOPpR3TygpMDDOB5utKL7G467QZ0OAxwEHRY8LHCYDkdipFLY4WDg4HO4wEHfRz+Dpj4KLg07Srsd7zmaJllioCGci9jXuGA6Sj+T5HI02omVCDhSJ1U4RvHO2LbRrOXR1I2jpjSadVJFAAdBRyMtAZOgIZ9ToMM6Hexm8JSKdD1422hwUmUkxdFwrBIEDrmHw4OOLA6HCxxvxWMVp8ehR2UJMnzFln+FHA4GDgYN43A03LJLAwbDRgw49oR7HAo4RGk0OKmyN7hxdMod+6ClQYOhw3U43nbjFM\/hsB2OUKwScjjm6CiFyqMWOtjVkKfX44gDB0UsUaRiYUPFLAI0GDoMcBB0aIlxWB6LpdPvcXBhlPsboUiFwcNzOQg44upC9QqtuMshYhXT3XBcjgBwVK\/tgZYpjJrSqIxVqtdp0GDg4FNOqiQCB0GIAQ55TiDHQzkdpjRK5VFTHHXOjXmMNcChwIM2kGaBjpTiKAMGLfiyz0ljtAnLwRw4EZ9JjFmyOCBHwWdibse7sfgrLcbhP08iWDBgHCVnEnBQtGLXnYseh4UO63KY5V+hDgfBhz+tEnI4xMZRKo5Guzi88qhXGk1cAJawcZRggzWcBWDa5TBRCkFHEDioQBo5HTGXwy+MmkiloMPhlUaty2FjFT2xQg5Hg+9wEHSISZX4Pg7X5XCAw8QqsS6HBx1Tb3SBoylUGo0BR7SPwzobBjwUcEjY8ICjPsnhsLFKIehwXY4psxk26BTA4cQpJl5hyJCncDksdMR6HAGHg+IVCRv8LGGDn0VxVAFHqMcRgg4VqehYxXc4LGzc4wJHNUOHDxwJDgeXRq3DEYhVVMQioKNqeQQbDB10utMq8UkV7nAEXQ4LHAQeelJFnU6s0ocgdGzoQ7VVuMeh3A4fODYNoNpo\/IYBjPUmVSxwSNCQzz50DLPD4cOGfO0AxTD2eRxHpdIsAHEUOh7vSfuFP5q+dixAhxOp0N0qpsdBZ6Mdkw24HFmA43MEHGk9jvCK8wg4sq84d3ocCjjSY5Wmy14IuxzK4fB2csQ2jvJUShJ0JAFHYBeHAA5ZGo2vOC\/kcEQjsgQc6i4VdjcEcJDDkQgcZlIlDhzpsUoINmysEiqP2lhl+MBB8UrmSZWU4qgCDYINVsDlyORwEHwo6DgAilVUtBIDjnBxNDtwRLFKosMRAg5yOdjZ4NM6G+kOB4FH9ZIOK14EFnU49IgsgYYTqYRcDgEbkdOhoaPKuBwSPKpXCoeDyqMxlyPqcHCkIh0OBo4qBg8HOnpVnMLuhj039KFKQUfxwFFlwWMQ4zYOavDwXQ4JGvxs7lmhu1ZKklacZ5hUkYCR9DwS8CC3g5drHYtnzO0YTbDBfxaCDvqlzfAhn\/m9o+Ezdh+HAA5VIKVL3VIdjgI9Dt\/hcCKVFODIunH0C3q1uQMcBTaOUnm0PmknR0qkEnM4El2OJOCgXkcAOsSkirxXxZ1UCa84pwvcQgvAZnxb7OFQ4JG9OBoHjvRYRQGH53Ao4Ci4iyPqcZCjwS6Hdjd26d6GdDmydDgKOBx6RHafusjNQgbDRoLLEQOOUI\/DAgeBR9poLEFHpIlzaByWlRyr1JLLYWIVCxtZi6PG4aha2IbyBW2YML8NExa0oXJRG6oteLSjxnM5qMuhgcOFjup7O8DS4BGYVLEOh1sejUCD45UuEGz4ql7ZBa1uEHhUh4AjFKnQe9bl0A4HAYeUjVdMh0PCBjscVRv6QXL6G9zpaI7HKlXNAyDg0BpE9aZBVLcMoozAQ0IHQ4Y8JXA0D6GEFHQ54pFJElikvT8S6KDvPZZXpB8Vq9GPBqCQ8MPPUZwidnF4wNFALsfFAeiwDkch4BimwxECjlBxNHE0NtnhiMqjAZcji8PhdDaEy8HdjrRIJQQcnsvB0JEFOKIOR+Rw0Krz6T5wZNnFQdMqdGkbxShSvPRLniJSscDhQYeOVQpvHGXQ4FMBx80EHCxTGvVilcQFYKEeh+ly6Avc9mLK7cLVOFLA4fU4Jt59AAowCDKEauccQO1c1kHUzj0IAoyYzKQKAUeN1IJDqFFqRc2CVtQs1OIeR9WCVhx3dyvee1cryue3oWlpG05c0Y7py9sVcLxvTivee3cbJix0YxW1bdRzOKzbIaBDwQc7Gv4pJlX8SEXDRxw2LHys7EIVwQaLplXkxMqabjulYh2OAHCQ0yGBQz2T2+EDB702DgcDR9XGfrAsfASAgyIVCRxVmwZR1aKhg05aAKbBQxdGuThqexwWOgxwbBpSbocDHll6HAkLwkIAMhLwoJ93LLocXJQd9W4H\/xI\/2s4IOqIV5zJWUS4HFUjNSCyf7s2xBjq8wqjeyxG4pj7kcgQ3jnqRSgw4ovKos\/xLORwEHMnQoUZkL33evaaey6NqxbmIVcyESjSpkrCPwwJH1OOIdTjUyvNkl6NRLAGLA0d4WiW6qj7qcUy7xptUEbEKRyrHJ4zGOrBhJlXSOhxJwBHFKh50eJEKgwafDUmw4QGHilRCC8BCkyq38dIvgo0U4LAuR9TjKNbhmHTXfkxkEWT48mCDXY7C0KH3cBBsWOiwsEHQ4QIHgUf1gla8945DqFzQin94oBNrftuL\/9ozgLc68jjYnceezjx+v38Q25\/vw6Xf68a05e14z91tKF+k4aN6CbkbnsNBEYsPHGZSxelwWJcjGo\/1HY6q5Z2gLoeFDHY7FGxo4CDoUDLAUbWqGyTb5fCdDs\/hSAKOqnV9IDngYTocFjjI6RDQQc9JPY4IOAg+BrVaIvCo3KSLpE5plJwOCxv8bGDDh44iYCIEGKH3RgId9L1jj+GFYaPe7TjaYIP+vFmAo+FCt8NhocO6HE8n3xwbWv6VGTi80mgMOJ51bo51oMOHjS9FhVHtcDyP+i8nXFfv36nidzi4LMqAwa+t86EjlfCdKgmTKoFYpXjg0Ps44ttGTbziF0cd4DDF0ZDDUWDFuQWOYUyqKMi4OYpT6LUCDgsdwt3wgEP1OOQODvnsuxzmenoNGynQkaXDQUVSURiddOd+KN21HwQbVBqdqLQ\/Dhshl8O6G+RyGIejgMthHY4U4CCHY\/zcVhx31yF89tFOPLV3EFn+b2cuj5t\/0qPilOPmtan7VKyzwX0OHziEs1G1NAelZTlUqUmVtFilC9WJwGFAg4GDTgMb9lzdg2qShA4LHG5xNOZykPNhoMOChy2NUpdDxyo+cKjXXnGUIhVdHDWg4QEHuRzK8dg8iPJN3qRKDDo84JDgcQSgg0BkpOBxrF4IN+pXo\/MvcYaPojsdYnxWfq98PpzLwbIAhyqQGpeD+xzu1tEU4FCTKsXFKsWuOOdplWKAg6EjOCJ7GGOV4IrzUKwSAI54cZQcjoDL4U2qUKTSmGU0NrRxVEYp8lnGKfxsYhULHMFIxVtv7k2qNN6yE40EHAY6LGxkBI4ssUoduRsxhyPB5QgAx5TZ\/vIvDRwWNBg46DTQoYEj4G6EgMP0OLTDkQ04rMNB0YqFDuNwmFiFgKN0ziG1fXTL73uzsEbsM7\/eM4izN+bwnrl6H4cFDx84jMNhYcOBjk5ULYskXY5Eh4OcDhOpWIfDAEflqm6wqlb3QMqCh4WOcI9Dxyra4ZDQUbW+D0oqWkkDjn6o3oYAj8jhENBhQIOBQ52bB1G9OY\/xEjwcl8OLVRg46GwZQskRgo6RgkfiCO1ROLnix0WjOmJh2DhaTg0dyZGKilgufAq8+Ms6HKGbY7PGKnY8Nrk4qqdV0mIV1+FwiqOhSRXH5dAOR\/0\/07X1gRtkE1yOKFYR47GyPKpcj6g0GlwA9vV0l4M7HGHgCEyrWOCIHI6GK\/1IJeOdKmbraChWSbrIbeqNb8JCh+dyBHdxCOhwHA6CDCnV4fAcjpjLkXCRm4hVfOCgHkdqrKKgI4pU4ttG39aOhgQNfjYOh3U5\/DjlMAFHOFaJA0fZ3FZMWtSKn701EIOJYt7Y353H\/9jcifcyeCQAB0UqDnQolyOCDQ0YFKNwaZTOQKSSETgUeHjQQQCiwMNMpxBchGOVZOCoJPBIczgoZqGiqC\/V5SgAHAQhm\/NKBB7jCDwscBjYoOKoBA2GjRaAfrGTQhHJ4XpvJI4HjdD6v7CPhdejelnY0QIb\/OcsDB1PofEzUbQS7HAk7uLIuI8j2OMYSazynNvjEHs49D6O51H35edBI7LTuL9BZyaH40VzYZs3IssxiymOhh2ONODQ96mE71TJ7nDUX\/kaYpMqYiSWexxqEZiNVsyKc+lsmFtjg9fVOw6HgQ4BHNEuDs\/lEB2OxpuFw2GcDgsdBUujejS2QUYp\/GwiFQsbwuGIgGNvNA6bsTg66Y63YcWQwaeNVKjDYWKVIoCDplUK9jjEnSpZYhXqbpDL8f1X+ovhi8TP7snlceLqHMYuSO5xxIGDopUwdFSqDkdnvMNhgSPe46A4hR2OylU9qFztSjkea3pQtaY3Uqg46kUq1ukwLkfl+n6QFHh4PY6q5jhwVDJ8SOgIOhwaNhg61LlFrzzX4FHA4RDQUTR4ZAEV85lU6BDLwUKfoz9XJsjIsttjFH2GIpZMbgcv7OJx1tB5uD\/Dv8xH+xnFKsnTKvUX\/hb15HJclAQdJlYJORxqH4dXHrUOR\/KK88IOB98gGzkdxcQqBBskGpF1gMNCR\/xeFcfhsHBhoMN2OKLSqFoCpoqi3qpzmkzxJWIVBo64yxFwOAIXuVGPY9o18tZYWv4VLQCzG0ezxioco8jTAY63tMshgCMajfWAQzocacCRKVZJ2zi6R0cpXqQSAUeGSRWKU0ykYkFDQYfpbTBs8Ol0OIqDjhhsBHscujDKo7EKOmykEi6O\/vEdh3DTj7sTIWI4X\/jBa\/04bn47KhZ3oGpJB6ooUgnFKqbH4QAHwQeDxvJOVC7vsgqXR70uRwHgUACigIOgQ4BHCDpEh8MHDopWGDoqA+XRmLvRPACCDgUeCR0OHamEgaNqSx4VmxOKo+x2eLDBbkfR4JExlgnBRDHvHasLw0ZtoXS0wwb\/+Qo7HBo4GhJdjpQehwEOZ+toBuBQXY7QivNQefSLz8KJVGhSpcA+Dt\/lcNad+\/s4THGUgMNChw8c9NpCh4hVsgKHGI9NjlXCwOGPx6o7VVJ6HORwWJejgMNh4xUJG\/RcADiUw2E3jnrQYVwO7XCQyxE5HdbhyAActHE02OO4jWCjEHCYaEW6GzylYt5TsDFbuBrS4aBnBg0+rcvBxdHD3+OomXfQHYtN6nGYLkfZ3EM4ZWU7OnqHhsMWqd\/zmce78Z557ahaktO6N6fgI+5yCIfDAw6CDwkd\/KzgQxZGzTO5G4VcDoaOyjW9IJHboZ596EgFDu1wKOjY0A+CDgc82NEQpwaOQVQ2a\/F4rNPhEJGK73IQdFRvGUJ5yxDGZohVJHAcKegYabeDVq5ncjuOsq7HqL19ln6p0y90+cudn+X5bn4mcjncm2OdEdkLn1IuR6N0ObJMqqjiqHeRWwg4xIpzcjeGs3G0GIeDplRIdf8ccDkSYhW6T0UDh4QLEas4EBJBR2w81nc3BGxIdyOrw0GrzqPx2NeQZcW5dTmGCxwGOlI7HCnAEcGGKY1yeTTW4\/CWgHkLwILAMSsAHMFYJcHlmL0Pk5W0w+G6GwZAGDLkaYFDTKtkiFXULg65j2POQdSQ5gY07xBqhKrnH4IrPQ5LI7GsP559CHc92ROEh6F8Hvkn\/w35TcuQf7gFQ7vf0p+j93\/2r9H7e3YGv\/9nOwdQsrADFQQd9+ZQ6UnBh4xUYsDRpUZjGTScc0UXKlfEHY4IOHoQilUq1\/RAS4NGBQHH2kjRxEqgx0EQ4sUqDBvyrNoY6HAIl4Ohg8ZhiwGOqi1DIBF4jCPwYHfD9jioPBp1OULPh6vL4f+cYtwN\/7PHtNuRJR4JxSpH6r2jBzoKA4eKVoq8qr7xEi9ScUZjC8Uqw+xxhIqjoR7HP2vocLocCcBh3Q21myMJNPj9IoHDQkd0a2wjTaXQPSpS3wy7HBI4aFJF9TjkenOxi8NZcW5jlXCHI9HhsMBh4hRvSiU1UqFYRbkarrtB0yqOw6FcDq84GgOO3fCvqq8j4FDQYSZUEmOVcI\/DgY1gpELQEYhVLHDobaOqy+EAB43K6nHZ2rsPwNGcA6gh6FBnHDiq5x6E1bxDqJYy0FGlzlZUz9ewQUu\/CDoq5reicn4rnt0fGI0dHES+ZTkG\/+VTyH\/js8h\/9ULkb7wcQ0\/\/CvnNKzB4xVHkuJQAACAASURBVKej96+\/FEOv\/SEGHoNDQ\/hwSxfev1DHKw54LM2hUkm4HCJSSXI4FHgo4NDQYcEji8NhgYPAI4KOCgEdlWv7QLJRCrsdPKkiIxXqcwiXQz1vHEClkYxXOFaRwEHQ4YCHKY1WmpN7HORwaGnoqLpvCKRSCR4FYMMCSMbYxIeKQq99kCjmNf3ZjkW3Y9Tdx0IAJN2M0fjsuBzexlHrdFz4FOoufAoUrcSLo0\/pfRwJPY7YzbGOy2Ggg50NcTZQhOLLucjNLADjGIXPEHA4kyp6N4fqcpDLIReBZQKOQHHUOhwRbPCkylQnWgl0OCxwvAzH5fChIzQa6zkcBBzc4zheQofYxRF3OKJL3CxkyAKpH6lkAI4IOgLLv4YLHN6kirrIjcui5tSwEXc5aDol2jYaHo3VsOE6HLT8K+5yBICD3A4DHXYXBy0BI8gwy8Bq79qP2rtJEXDU3K1ho3rOAWgdRPUcARgSNujZwEbVvENQmn8IBBtaraia3wqCDamxcw7hnPUdGMzHoxUFFwQa1\/0z8tdfivz1lyH\/7S8if\/XntdR75v2vX4z8sjuBfD4GHlf8qAd\/NK\/DdTkEcFQu7YQSOx5m8ZfjaohOR6UHHAQdlSuNZJfDK45GkUocOAg6IvDoQ+U6LQc8FGy4HY44cPRb4JDgEQEH9Tk0aDBwqFNFKtGkShw2CDpc4Ki+bwiVW3j7aLq7YYGDwWQUgsexuh49U6H0SLkaoZ87GkGD3RcNHIXHY8nhIOhodMZiCTZGAhxmPPawT6p420Y94KCNowwcFK008YjsiIHDLY7Gp1XSgUN2ODK5HHY0Nlpxzj2OExKAI97hiIBjhgQNfs4CHJ7LQT2OxI2jPnDcpKMVx+EITap4wOFHKpG74XU4PJfDLgETHY7Jt++DkhepUJejeODwIINAQ0hBBoGGkAMbScAhnY0igIPg4z13teKChzpjoEBv5B\/chPzXLzLAQXBhZCFEvPftLyF\/8xUY6miL\/awlv+kLQAeBBjkdEXBULuuEIwka\/GyBI3I5LHAo8EiIVAhAlMthuhsiUmHg0GcfKgxwMHjQ6RRGQ+6Gcjsih4OBw4UNAxw+dLQMorIlr+R0OMjtSHA42Omo3jqECVuAsQwTGU7+bCHnYjhfL8bd8D97rHY7Rl2hlH\/BM3zI7ga\/9258Jhtw6PIoQUd9zOVIKY6qSMVbAOY4HGHgyNbjMFMqoXtVMhRHJXBYlyMFOJxYxToaHKPIU7gcjrthJlZSehwOcHxDRywFYxULHXofB7kcxV9VX2SsQoChlLKLw\/Y4XJcj6nBEhVFeAhaHjrRYRU+q8HisBY5QjyPmcESRioWNBOiIA0egNCodjjv3o5ZlQKPmrv2wkqDBz77DkQE64g4HOR1hl6NqYSv+6I5WXP69rhgo0BtD33sQ+a99JoINho7QefUXkL\/9mxjqif+s7S\/044\/nC6dDwoYHHRXLOqHEkCHPFOCoWNkNrR5UrNJyRmRtrBJBhwsb2ukg4GBZ6PAdjiB0hIGjonkAJKdAaiIV63QI6LCxioUNBg8dpzBs2HPrEKq36u2gDBMxVyMJREar25Fl9PUoKpWOup0dEixG07O9NZauqveuq9cLwCLgUC4HFUhtcdQ4HIF9HI2XeLBBHQ6nx1EkcIQmVULAEYpVUnocyuWgvRwh4KBlYGJaRU2k2KkUCRry2UBHCDiK2DgaczlCPQ4fOK7UsYp7kVt0a6x1OGyHgxyOyOWIxSo3vInQnSox4Ai4HEkXuUXQ4RZHiwEOPamiexxx2Ai4HM6a8316CRg5GgwadGZyOOI9jol37oeUBA4LGgwdDBnyHAZwULwSxSkCNgKxSuXCVtCtsWPuTIGOPTuRv\/bLyBNQhEBDvkf9jke2BOHFgQ4fODx3Q0NHFyqWR3I7HMLhELGKDxwx8CgIHRFsMHQoxyMTcMQjFQaNCDoCkQrDh3E52O1Q4OFARwJwUK9jK5Qq7ysuXmFAGY6bUeh7fAejmNfHqtsxqiKWGGiIteaxr\/GUyxH8TMzhCAKHnlThWIWgI+pykMNxpGIVr8cR6nCYq+qdSZWCDkc0qUKw4UyshKDDTqnQBW7eJW5Bt+MlUJzi9jd4J8dwY5VX0fCNeHE0Ko16sco1r2E4sUoMOChauSF8Vb3dNMpbR4P7ONIcjp1ovEkXRmPF0dDGUa84qi5y46KoPFNGY6N9HHtd2GDw8KBjUihWERMqE+98GxPv0Kq9821o7UfNnUYMGnxK0ODnzMAR9TgUcCRBh9fjUJ2OhW2oXNim4pVPPxyOV5Tb8esnkf\/W55Cn+ERChngepAhmxRygNzwBcy\/FK+x0FISOCDYkeFRYl6NbTazIHkfI5WDoqLCxStTjoEmVuMsRh45ycj3Ws\/pREXQ4CDjC0KGBYxAVzUYMGfKULgfDx+Y8Ki10uD0O63Ao4Iigg9yOcopZNhUHH4kr0otYDhaCEAsaBZaDqc95nwlOsmRxP0bxZxIjliyTLYf7M4lgwYDxDp4aOFKWf3GR1IzHMnSoaMW6HMkLwMjRcHZxOA5HkZMqCcBBuzhi+ziUy0FbR4Ucl0OPxTJw0NlIXY7DBBxq+ddXGTLkmQ4cfnHUcTkSHI5oH0dKrCKKo3Yfhx2NjRyO4nocIlLxHI7E4qjT4XBjlWIcDrrEjXscjsMRilTEaKztcDBg+KcADoKNcI9DxyoMGnyOHDhEedQvjKrSaAQcxRRHNXC0KuAg6Hj\/nFZ8ZFMOgR6pdS2GaGT2m59F\/loPPG64DINUIF1yezBW4R\/wtX\/vxRiCDh84KFpxnI5k4CDoqFjRrRQGjm4bq1jgoJhlNUlEKmtCwNFrIxXrcljYIOjQwFGxoR8kpzwaAA6KUtjhkMBRIWGDnhky5EnAYeQXR13g0A4HOx102pjlcIHHCOIXCx3DuBjuWJxkGVWXwI0W6IgBR8jhIOgQwMHQoQukaR2Op6Guq+cohc\/D1uOIJlVi0FEQONziKIOH2j6qoENsHHUiFeNwhGKVr3GsInocIehI6XEQcFjo+OYrcICDxmQ96Kin1zZWiVwOGo91YhW1cdTbOpoROKbd8CZCd6pEDkfKxtFAlyOKVFLGY0MOR6w4GohULHCkxyqTbyvkcFDEkgwcDBl01rKUw6E7HEU5HOR0KJfDTKlk6HAU73DoWIWAgzR+fismLu3AS+3x6RWGBuV4\/Ph7yH\/jYh23KJfjMgzS64U3A505+VHnmX7qn+3oxfsW5lCxtNPKhQ0NH46zwfGKgo0IOBR42P4G9zjojLocFjoUcGjoIPCgfRxZHA4FHhY6+lG+zoUOBzzEeKwsj4ZcDoIOVuUmXRx1wEMAhwIPmlYxo7HOaSIVCRz8XGzMwv2PkFsx0vdGAh5Bt+Mo6nGExn9HTcRC0EG\/8Bk+5DO\/9058RkOHmFQJQYcADopUlKhAynEKdTgCPY6mSwo5HO5orCqM\/tPvoDeOepFKSoejeODQK84ZNPhstF2ONOBIGI0l4FDQIYAj1uN4GU0pPQ4qjvrA4UCHBxzu8q8IOIqfVkkpjqZGKsLlEJFK2qRKJuDIsHGUr6qPORwWOsQ+Dq84Ovm2fVBKcTgYOOIux74oRmHYoFNEKtTjUNDBUYo8OUqRZ5ZYZV7kcNgRWTsWK3ocoUiF3jOwwdBRsbAV753fgWXPpUMHkUT+h49CRSk0vULOx9zrMdTe6kCG\/+KpQ1DXyI9b7EIHF0YZPoYPHD3ZgGN1L8oJOhzwiEcqEjjK1\/dDip0OPi1kGPCo2BhwOChaEbDBz5V+rOIDx+YhVJJ86NgaRSoMGvIkt6PYaRYFHiNwNZLgZCTQcSy6HaNmZ8c7ARRZ4MWBDo5R5OkDx2eeQt1nnkLDRaI0GgQOfYlbcqwSLo5G19V70BGKVUyk4sQqBR2OeI+DoWOqulelAHCEHA7qc\/jAMQyHw06rGIfDAY7UHkcUqahpFf\/2WBGrqH0cIYeDSqI8EstnanGUJ1b0KCxFKSxdGqX15u6Kcxc4hl8cVcBxq1n2FetwhB0OFamQu1EQOCKHQwLHxNlvg2WdDYYOARzW4SDwkLBBzxI0+NkCB8UqCfs4QsAR6nGEgMMURxk2+KxY2Iayhe3488fz6M5wuWz+ew9g8LJPIH\/n1Rg6tN9njNjrb\/4KKF3eg\/GLcyi\/txPlS7UYOnhSJRN0GIejfGU3rMykinU3+LWJVZTDYVwOgg6WcjzEpEo8VnGBIwYfBBieyxFFKgQfYdhQ0NGSR0VCpKKjFQMcW\/QeDutyFAAOCR\/0C5\/LouxmFDqT4GEk748EPN7XDFAsEXINjsb3Rk3EIoHg3Xh2YIPcjQIOB0cqBBwkJ1oJLQAbxsbRbHeqRBe4ObChSqOBXRxiH4e6wM1c5Magwad2OQRwiEkVXRpNKY4ql0M4HEHgCNwcay9xexkh4LDQEXA42OXQ0UoEHbElYOIiNzut4kPHDdrpCEFH1liF3Y2ox5EGHIV6HN6KcxGr0KRKXQg4rMPhQYe5ol7FKQwdiQ5HBBy2OCphY7aIUgRw1BjoKAY4qgk6sgCHWP5lI5UQcAQmVajHwZDhnIvaULmoDVWL2lHXMoh7no0xQ+wN8kOGfvAwhna+Hvua\/8aT+4CTHgAmru6OQYeCDzUeq3sc5Ryn8GljFRGtxKCjB+WrtBzo8GIVBg3npDKpDx0yUvFcDgkd5dTtMNBhwcOMxTqxSsDhqGgZVMBRbsCDLm\/jDkcIOGj5l3U7ioAOilkOW6l0BC7ISKCDoOlYgg4CpVERsbwboMH\/TQ0cBYqjwuHwgYOgQ8UpKQ5H+sbRFJfD3zZaVKwiCqMCNvQFbrRxVE+oMGjIM+RyRLBRoMfhuRzxO1UCwGE3jrorzgk0WGonRwg4EjocBByNV72GaOtoNB6btnE0VBwNwQZd5Bb1ONyr6h3oMCvNaa25u9o8pcPB684JMKScSRW9iyMIHQkXuU1RoJHF4TA3xnKPg6ZVDHDUzt4X9TYYNkSkQtBhgcN3N+5yl36x2xHbNhp0OWi1uRurxPdxhHdx0JX1tI\/DiVUMbBBwkMjtOHHrIE55EPjpXh8dhvd6fw\/wl08AJ+0AJhF0LHGdDu14dGHCsi4QcLCU42GBQxdH\/R6Hdjki4GDwKLew4fY4HNhgt2NtH8rXinjFAEe5Oo3LsS7B7digXQ4LHinFUY5TtMOhgYNcDisHOlyHQwGHcTsUeKR0OaTLQc8Us4wnt6PIUulIXI2k7x0ueNDPI7fjaHQ1kv7MoyJiIQCgX\/4SBPhZnof7MzHgCDocbnFU9jgIOOovSupw0C6O4e3jSHQ5nFglcjnio7EBl8ObVJELwCRw1Ksuh3A5YsXRhB4Hxypfi1yOGHBQr6NAcTTkcjTwunMPOqg4Go3HRg4HFUfV3Srffl1DR8jhcPZxmB5HQqwSgo4IOFKKo6mRSorDkdLjmHTTLky4bhdKrtmFkm\/vQsm10Vl+w25MIucjMB5LwBFBR6HiqCmNWmdjHyYSbLAkbPBzFocjIVaJQUdoUsVzOZTTkaHHQcBB+zgcd4M6HR50lC9ow8lb+vGBB4FzHgV+c2B4oMHfdagXuODfgGnbgTMeHkLtKgMdJloh4JiwVAMHQYcPHuViUkUCh41UVgaAgxyP1axeNbFC0UoacBB0WPCw0JEAGsr5GED5BqGNAygnWeiIRmMd2GDHQ8IGPW+OpPob1OFgyJAnrTu\/D0o+XKS+LnJ3x2jsdhxrq9FHRcQiweKdfI5Bh+xv8LNwOXzgqPvM02i42EylBGKV9PHYsMNhC6S+y+EAhzup4kDHCHocdZealecUp7DUDg5yNxIcDuVsmB4HAQdDR6w4mgAcmVyOQvs4XOCou\/I1NF1D0ymsyOVQsYofqVz\/JmZkjVUchyMNONxdHHGXo1CPI4pVGm\/djeobdqHsmp048Y49+MSGA7jxiXYs\/1kn1v2yE4v+I4dvPtqG\/71yv4KOkut2YeKte1BvVpxTnBIBR7biqIpUFHQI2CjgclCBtBiXI4KN7KOx4Vgl7HCo0dhAcVQBiAMd7Sif34YTWvpw1qPAiTuAMx8GHn+TEaK487nWIZz\/gzymbcvjjIfymPlQHjUrujBhSdTnKCfg8KBDwQc7Hiu6Uc4Skyqp0CGAo5xgI9DjUABiQIOBQ53r+tSEihOhhOIVCRz0LKCjnHdxJHU5fOBwoCPF4VDxigYOAo9UyPCckMO+u+NdiFmOxWVhKmLJsnsjdG\/K4XgvBhpHcPGX+m9doJ0VZ+MoQ4Y8BXCEYhWCjuCkSkGHgyZVnlFX0xNkSDV8nm6N9W6OdYCDHI4E6CgIHOHRWOV0XEoXu9FejhTg+GqCy6F6HAQeSS4H7eIIQEeox0ErzmOxijse647GusDBLoeOVQg2otHYeI8jcjgIOuI9jrcKj8eK0qgtj3oORxw4jMsRWgImxmMbb9mNKTfvRunVO3Huwn1Y\/rMcdrYFbkK1vxOH8Ntd\/bj68XbU374XZdfvVrBREDio1+Ht45h0u+duJAGHjVZSln+pmCUerUTQkX08Nh6piGkVc1us6m+Qw6HUhsoFejQ25nYox6MdlYs0dExv7sWZjwJnPDSED+wYwvH3D+HKXw7hhTbV4rD\/X0562N8zhCXP5nHmQ3kcvz2PMx7U0HH6A3lUE3SIEmkScExY3gWtbkxg6KDTFkfJ4ei2PQ4bq3guh4IOjlHkmQgcBB0GPFIiFcfl2DCACR50KPBgV0OeqcBBbseQUszlEA6Hcjq2FO92qN0dLUXGLFnhoogFYqkRi7cczP9s5vHZUbwcTMYtTsSSBT4O92di0CGiliPxtWIdjiTgUNGK73B8rtCkSvICsGLGYx13I6k46kQqKcBBG0gvfcEsAzPQ4W8cDW4Z9RwOdjoclyN9NNaOxZr7VCRw0LO\/i4NLo7FYxUQq5HJMUy5HIeAQC8ASgCN5zTk5HG\/aCRWGDVUcVcDhFUdv4v4Gn4U3jhJwTLxxFyqu24mbnmhDe0\/85tKkX370\/u\/39uO89Qdx3LW7MWkW9TiM\/OKoBQ7d21Ddjds9dyMJOOykCo3JHoHRWBWzRNfU8wKwynmHEKkVlfP01fR0Rb2jBW2okFqouxvU39BqR8UirQkL2jB1fQ\/OfGRIORPkTpz2YB7TtuYx88E8vvKzPLa\/OoRnDw2B4KKtbwgHe4fwSvsQfvDWEG76dR7\/87E8pm4dxAd3DOLMBwdxxoODOPOhQZz+wACqCCYsdLixCscrDnAs78YEkgGPCQ50eNFKwOEg6JiwRkvHKzpGcdwNAhAFGvqcsK4fpKDb4TscBjgIOhR4NA+CgKN8k5YTrZjiqO1weA4HA0fFliGQLHj4wGHilWJjFoKOCiqVJt2\/kvB+Uj9jJO\/7MJH19bE2PvuuRyxHAiySfmYMOEI9DnI7fJfDTKroiZWnQS5HYyhaCbkcGRaARQ5HIZdDbxt1plWUwzH8HgfFKgQdU7\/iuhwFL3KzDodxORzY4K2j6RtHbYfDcziSgMOFDtflIOCwF7qlOhwucMRcjmHu49DjsW6s4o7Gxnsczqpz43IQcNTesEtBx\/1PxS8PS4MN+bX80BC+9kgbjrt2DyYRdGQBDu5t+Cd3N+RpoSMNONzxWJ5UiaZVwqOxVXMPomruIaXKuYfAqph3CK480JjfinKCjwWtoJ6G1cI2lDtqR\/nCdpSTy7GoHeMWtKFhTTfOenhIQQaBBkED6bQH8pixbRDTt9HzIP7Ho4P4i+8M4s8eG8RZDw7iBPqagA0CDtbZBB07BtTWUYYOCxmmy8GxinU4BHCMX6HBg6BjwsoeJcfdCDgcEwRwROCRDB0T1vUp2GDomJAxVmHgmLBxECQJHQQfacVR7nKUbx7C+JYhlLUMobRlCOM2D4HeU+BxmKCDS6XjRsEIbVbICH3uWCuUvqtTLEmAcCTedyKVIHBEd6pYh4OWgFno0MBRd9HTaPQnVozL4UyrZAEOWgLmdzhikypFRCqxaZX4inOOVBg4GmSB1HE5eLOod1rgMD0O43K45dF04HBcDhGpaLcjfqdKEDiMw0GxinI5qDzqAUdqjyPmcoTvVHGnVaI9HOxyRPs40qDD7XFY4BCRCk2rTLlpNyqv24WHnumWDDHs56881Ib3XbsnDh2z92GSErkc+zAxFKmERmNtpCIcjtAujkBxlKFDRysiVplzEFVCDBl0VhjoiMHGvDhwKKfDBw6CjxTgYOiYsqoLZz0cwQZDBwPEmQ8MYuYDg\/jQDu1m0DmTXI0HNHwQgCjRa6UBnP3gAE6\/vx8VBBiB8mgacJDLQdChpYEjBh7W5aACqe5xMGg459o+TPCjFRGnKOBY3w8CDpZ2PERpVLgdPnAo8BBOh3I8\/EhFlEbHNucxZt0Q\/nj9ECZsHsKUbUNo2K63j75v0xDGbBgCRQoVJk5hd8M\/i+l30PcW2tPhf30krkbS94aAIst7qlCaJT45SqZdEu9iORydjUI\/g+CCHAiGDPnM7430M8U6HFQatdDhA8dnngZBh1przvHKMIFDFUcLAseRmVRh4CCXo4lcDgc2Cu3iiNyN4Vzilg4c4VglWnHuOhwMHGpEViz\/ItgoCBwSOm4IdDjoPVseTd46mr78K4pVwlfVu6Ox1OGY\/cP2YUOG\/419g0P481UHUXrDHkxht0MAh4KNUKSSIVZJLo66DgeNx0YdDn4+iKq7I9ionHMQVhI26NlxOFpRkQQcyuUQDkcMOAhAIofDOh0L2zFpRQ5nk0thgIHB4awHBhBXv3lPnvTs6uwH+3Hatj6kFUfTHA4GjvErejDeOB0MHhOsy6FhQ0YqIeAg6LDgYWIV625QtCKAQz1v6HcnVUxxNAk4JjQPgqSBYxB2D4eBD9rBUdKcxx+tz+OEHUO44hdD2PHaEH53aAhvdg5hV9eQWkX\/g11DuP1p4E+\/G42K+rDBr6uKKJbaEdqEOMUHDvU6a7ejiM9lAYzQZ461Qum7GrFIsDhSzxo6xIpzWRhVz0+h\/tORyxGaVKFIhSWnVuiq+iY\/VsnqcIRcjlhxNLrArdhYJWk0VgKHila8BWDT0raNKpejgMMRWnFuJ1XEArBArNLojcaqXofdxxEHDoaOacrl0KBhS6POaGxKrELwYaCDT4KNGHB4xVHlcKg7VdIcjihWcS5xU6OxLnBUXbcLf7p4H3oHCq\/k9uEi7fWv9w6ilvZk3LpXlUa1w2HcDQKOrNBhR2PTJlUIOJKhQ4HG3QIwJGzQ81ySjlTI5VDyocPvb9hYpXjgmLCoHeMXtqN2Wc5AA0GGCw+FXp\/9QD+sdkTP5z7Yjw9t7dOTKv60ii2NUnk06nCQw8Gy0LFSQweBh4KPVT0g6NDgYRyOQKzCoOGcgR5HDDgIQKi3Id0Nr8fB7gbDhj2p19GSd0RxCsFG3bY8Fj+r+zBA4b\/jj78F\/OkTwJgNerU5QQYDB59Hm9sRAoqs7x13DG0oJeh41yKWIwUa\/HMLA0egwxGKVIzDEYtWstwc602paIcjEKukAIdTHg1NqjixSvKKcwkcUy59AQ10m6wzGpvgcthIRbgcNJXidDnSI5W0DoeKVb6VFqskA0fj1YEplULAwS6H6XBY2GDHw4GOpEiFYMMrjjo3x7qRSiHooLHYLb8u3ON4swv40T7gkV3Azw8Abf1pyKG\/dtkP+1B+xwFMnLUXajqF4pQk4JDdDflsoSOtx+FOqlCkwqq6+wAqCThYMeCIYIOjlUwuh4pUvB5HzOWIOxzkdEy4px3jF7Wj+t4czrxfA8NZO\/rBOls803v0Oknn7OjHOTv6cLZSP\/7kgT588L7exPFYx+UQsGGjFQ82FHSs6sF4owmreqEUAo412tnwgUN3OESPw3c4BHBI8IgcDiqPalfDgoZxOdTrTYOY4EHHmLV5\/NX38ni1ozBo+H+Tib9v+A1AEw\/UyxgJeCi3Y0uRpdIiXIykSMV\/Pytk+J871jaUvmsRC8GBjFTkM4PDcD+TCTiyOhwX6VhFRivpuziKnFQJAccXIpejIHQ40yoJG0dVaVQXR8nhCEcrXn+DJ1csdAiX43BCx7deRaMPHdbhiC5xoztVeDSWT3WLrIhW0u5VUTs5GDiuD9waayKVyOVI28eRBhyRw2H7G3bbaLSHg7eO0rTKaXP2oi1lUoXgYtEfgAt\/Dvz9z4C\/\/ynwsZ8BX\/xP4NFd\/j\/X7usfvjGIqau60Tj\/EGpm7dUdjqJ7HMXdHOvChgAOHzY8h6Mo4AhFKiHgCMQqBBwT7unA+EUdqFzcgTO29+Ecci0sWPQZiCCY0EBBUBHT\/YH3dvQp6Dh1Sy\/GJbocxuEwkyoWNrjL4UOHAI7xq3phFYOOdOAYbyZVwg5H5HIQdIwPORxJ0EHAsSmvZcCDgOOCf8+DYr6R\/N\/KF\/VK8PGBnsdw3I5Mm0rNNlMfGkb62oeJrK\/pvytHT4\/2Z2d0tlAP43B+XYLF4XzWwEFAkxKrXKhdjnCHgwqkUXGUYINUz1MrqT0Os\/zrH909HMrhUJFKdpfDiVTseKyYVnFgw4zGhtacB4BDbSB1uhxHEjhErOIXR4cJHFQeDbocSQvAaAmYAI6YuyGAw4EOL1bR47FupBLfxxGNxsahw41VCDzGf3snvrj1UOK\/y12DwLefAf7uJ8BnfgFc\/MtIF\/wc+NufAFveSPx2HOwewke29OCkdd1oXHBQgUc8VgnfqaJvji0AHGLNefVdB0CqIil3owBwzIkcjnikYjocCT2O8mEUR5XDYVwOgg7W6Vt7cS5DBYFEUeqNff7DD\/ThlM09LnTYWCUOHA50+MBBry109GIcQ8fqXow3Ul0O091wHA56z0ypEHCwskLHeDMaqxyOLMCxSccrFKn82RN59I4QOPhv9Z3P6KiFoxU+j3S3Y6SQ4X9\/VsgIfU7t7DhKyqKFoOhdi1hioHEYloNFwCGgI9TjyDAaq8DDAMeUi55GRGU7tQAAIABJREFUA02thIDjc2bpl+1zuFtH3Vtj06AjKo6GgSP5XhXV4cgIHPFoJQE45IpzsYtjquNyjDxWSXY5wrEKdzmmXxuIVix0uAvAFHAY6JhGN8hylMKniVTSgCPbpErkcsQjlbjLQbfFll6zE\/f8OMf\/vsbObW9q4Pj4k8Cnfg5c+AvtchB80HukTz4JvJT8I\/Dpx3owbVUXPrihG02LWjV4yPFYGaXws9o0WmBShS5tM6ARhw0BHKEuR5YORwJw0LSKHYsldyPmcMSLo9ThUFIuh3Y62O340OYe\/MkOgoeRqkf9jA\/v6MVJm3pQxk7HYQIOdjjGre4Fi8FjfEqswrAxfn0\/pCx8mB4HxyoUqRBwaOnR2GCkQvEKOxzmpAmVqi15VQ6N\/WX23tjX34HXe7Ltnv+7H+mohYGDz2LcDvosFTOD5VF+37uzxQcH9bqI5WD+9ztAUWA5mPqs+Qz9mRN\/mWeZbhlln8nU6xjty8Ei4EhxONQujjSXIyqNssPBpy6OPgNnNNYBDhc23I2j3jX1sdFYAxwmVnGgw+9xeA4HXeaWXhx1Y5W6y17AVFMgtWvOOUqRZ1KsUgg6zMbRLD0OBzgoYjHSS8AMdIjxWAYO6XIkXuRm3A0bqzB0MGjwGQIOmlwRLkcScLguR0qPQ43HetBx627QjbHjrt2F7U+Fx2TzQ8BVT2vIWPKSdjyu+A2w5lXtdix+CbjlWeBv\/iPd7bjiR72oX9GFU9d3K\/CYek8ram7ba+5VSXY50i9y269cDQsbxuGovDujyyH3cMSKoymTKsN0OLjHwe6GOhd1YNzCDpza0g0ChXMNdJx7f496ptdK283r7b04l57Va3PK1+r7evCRHT04cWM3Su7twngam1XQIRwOE6tEo7HdqijKhVF7CocjBBwEHgo61vSBoCMGHsrl6LMOhwQOelbQ4QOHiVUYOMZvHMR42d2Qzx5wUKeDYpVZv80Wqdyz84f4h2eX4bWe\/R6OxF\/SvThlLbpYysDBZxbwqBzmZXA+NByO1w54bAayvCZYOpZ2drwrEUvM6RDjs8P5Wibo8B2OAsVRBg4VrWQpjgZilczjsV\/M2ONwoOP5AsCh+xvc4yCXg6OV4QCHcjkUdCRsHBWTKoXGYwk4fOhwYCPQ4WDomH6tGYul0miB4qiEjmk3eF0OARypLodXGiXYSAOOgrGKuTmWoePR34ehoz8P\/MtvgE88CezqBlreAO54HsgNAJ\/\/T+1uPL4b+MsfA6teif9Dze988996Ub+8E6eu7cKp67TjMW1JG2pu34caf0RWlEbtxtHAPo7qO02MwnGKE6kIlyPY44gWfxXT46BIhbaNprsc7gIwHo\/VLkcUqTB8lC3swMkbu\/ERgg4GiBGeBB3HG+gYt6wL45Z1Y3xgUsVCR2qkQvFK1ONgh0OffRi3ug\/jBHSMt5GKF614LocCkABwRA4HOR2DWs0B8NiUx3gPOsZuzGPifXns6S4MHfv62vGPL6zF3\/1uEb5\/6Pf8VzX1vOD\/AlRCZNjgMwt08Gfoe1KdDnY8xHk4QEP+jCyQEfrMsXQJ3HsPZ1cj689ywCJLtJICJcMGDgsdyQ5H3UXPoP6zz6CJXA0pG6ckF0eD0ypOcdQs\/0p0OESHw5lSoWvqU66qD\/Q4CDwIOhrNbo6pxYzHfv0lWOBg6PBvjs1wp4qeVHlFwYYCDi6QWodDRCoJ0NEgJlaKA47kBWAEHAo6hLvBToeeUnGLo5mBI+Rw0LX1xuWou3U3yq7dha2\/TZ5cmf2cLo9+4T+Bz\/1KOxz0TDELgQe999GfAt\/fk\/zv9Vd+qKHjlLVdUFqnXY\/p97Yp6KjhZWB222jyaGz1XdrhUL0NCRx3EWgI2AhFKqo4mgYcaQ5HIdgwkUqoOKp6HHHgIPAg6DhhfZdyJxR0bPMcjBCAbOvBOduT9ZH7ezB9g3Y6CDisluulXwU7HLbHEcEGORoucJjXazR0WPBY2wcNHlGHw3c4NHD0q7KoKowK+IigwwUOcjus4yGLowwe5HKsy+OLPy0MHPQ3dcu+X+D\/PLsEH3t2KX7c+mLyX17xlW2vhaGDQIKhotBJkyzFbimVwHA4nkNAkeW91IjlKOt7vCu9DoIOggWGD\/nM72X\/jIhUQhtHQw6HBY5wcZRdjikXP4PGSzzoyAwcabGKG6k4UyqqOOp1OGLQkTCpou5UiUcqUy57AaQmFa0k9DgSIhUCDgsdI9rFEQGHhI7YnSpB4HgddVe9Dt7LUQxwTPcdDopWQi6HBx3FxipOjyMFOCR0jP32Lsz99w7xT6v7+KuDABVGP\/0LXSS96Jf6mTodVCylaZbLfw10JI7PDuHjD3Vj6opODRwMHuR6rO\/G9KXtIOiooS6HhY74RW7Vd+4HqSrB4YgVR0PQISKVYhyOqMPhdTkKbByNiqNh4GDomL6mEx+5vxvnbOvGuVY9OJcAREm+r5\/1Z\/nr4tzeA4KOqesZOrTTocBjeTfGGSXt4nDHYyPoiAGHgA0CDhYBhxIXRxMcDoINKTWxInocHKswbPDpdzjU65Y8yjblMW5THltTHDf+m50b7MWlf2jGhc+vxKeeW4Glu\/4N\/976PH506Fn8a+tzONjfyR91zlc7gNqtwPjN77DbcZjHZ7MARtJnjqWI5R0fnZVgMdznTA6H6nGkLQBLgY6Ln0EdQUeiw2FcDm8fh77ELVAaDXQ5CDacDoedVPGgI0usEnI4LnsB1OMg4Ki\/XG8gnSq7G\/JZQYc7GsvAkQ06XgF1OVS04k+q0GsTqfAZXADmdTjUeOxVr6H+qtfRcJUuj8Z7HKY4ytfViz4HAUdacbRwrOK5HLfwptGoNBqPU7i\/wad2Nwg2IuDYg7pZezDuul24ePNB5x9X+WJnt4YLGpElUZmUAIRAhByOz\/8KeD6ZWbC3M4+zNnThxNUGOtZ04QNrunCKOQk8ZixrV9BRbcDD3zgaAcd+PZkiHQ47pSKcjmCkElj+Fdo6GloAVkysstAURrk4Kl2ORXH4IKejabWGjgg4GDK6BITwe4XPD2\/vRuO6bpQsdV0OAo4ylhqPdZd\/ZQYOcj0EaNjntX0Yp9SPcWuN05EFOixsxCMVhg17+rGKAY6J9+lbep\/cJ\/\/2Rs+t\/V34adtL+E3uDTx28Cl84tmluOSFNfjcC2sUeNBr0t88swD37PxR9I3iqWcAmPmovjmWoxV5FnI5+OvkdtAv9Szjs3xh3OFwOOTPSIKKQu8fS2vR3\/Fex3BBQ35fDDpSJlXsttGQwyEWgLHDUXfx0wo4HOgIORyBHkfsmvoYbFCsEt2r4rgcfnE04HDUhyZVQg4H7eQQ0NFA0YqEDPnsuxzG3WDo0NfUp11Vr4FDFUizAEfGXRwaOrTLMfXboRXnZuOoAA3Z4ygEHBY6hMuhHQ7d2+D+hjpTgMMBD+9eFYaNCDh2o+5WDR21N+\/BiXftxdu58PX1tATsoz\/RXY55LwCX\/lrHKlf8Vvc49vWIf5UDjw\/\/YQB1SzsVaEjYoGcW9TyOX96hb429w0Qr6mp67W5kczhMtBICDhOr8H0qyuVwto3SyvPwnSp0kZvscNDNsHG1YwLBhhFtGlWiraOL9D4Oe9J+DjMuS2fZohzqVnbiI+RwbO1KEIFG\/GvnbO0C6dyt2iUh94P04e1dqF\/blQ4dy3tQtqIH48yqc7c8qh0OGo+NORwqZomcDR84ygR0jAu5HZ7DMW7DAMZt1LIdDlMetaBhohXqcJCbIbsc5HBUb8njQw8Cpz0IPN8a+EsI4K43v4u\/fmYBLn2pGUt2\/QgXPLdcQQeBh9THn70XS3b9a\/iHAPhf39OFSgkb\/MxQUegk6FA30HqTKhRfpElCw0ifC8FF0tfpz0fRROIky1H0NfrfMSZrH+NwfI7gQUYq8tkHC34tPzNy4EhxOGhU9uJnQNEK9Tms0xGCDuFyFONwNCQuAEtzOIrscQjg4Ggl6HL4DgeNyMagI3k81plUCa04\/5brcrhTKmIBWNDleF25HOR0xCOV+IpzBo4ZNwYcjlisshNTvUkVtYtDrTiPOxxNFjrMpMpN+iwYqxiHg6CDehwMHOR0kChiWf5k2FJ+JQf8l1jj0TkAHOgD+jLeen\/RYz2oX5bDB9YQeETwwcDB5ynrunDCig7UUmfDgIeGDYpUyOFIczlSto2GgCPkcHjQoWBDrTlvw4T5nhzwiGDDgQ4FHB50GOAg2NDKKeiYtDyHP0kEDg0WDBhZzg9v68KUNcbpEJGKdTnI7VihoUOdXCT1plWC0JHicBBwlK3tVyLgYNlOhwccFK8wcOgz3ONQ8GFgg6GDAYRWnX\/wwSHMfAgKPF5IgI6rXrlfORnfeGUrlu\/+90To+Niz9+Kh\/b8ZHnQU0e0gMCklyCgCPEYKGv73J4FF2vv0M46ViOUd73UwSBR9XqBhRUOH6XLEHA53xXl4CVh8AVjkcuhYhaCj4RIDHQWAI1oA5vU4QsVRE6k4sUrI4Qi4HOqmWHI1pFSs4k6qSIeDgKPusoQ15+R2yD0cAeCY6pdG+bUqjxbncNguh3I6RHE0BBxXauCgLkfTNa\/jeLuHQ8BGIFIh8Ig5HA5w7MS0G3dimnA3bHE0cKcKwYYCDgUdhUZjvQVgAjhoWsUHDoKOqpt24\/T5+1K3kib+K5zyhX99fQANyzpx8moJHPwcnSev6QJJgcfKnLqvpeqOtzVsKOAIT6rEehwhlyO1xyEWgM1rRbkvHzbotQWOdkxYoGWdDXY46ExxORg4xi\/OoeyeHKqX5XDOfQIu7uvCufRailwN7zOxrxvn40+2dWHS6iToELDhgcc4BR16AVgQOMykinU3GEBErKKgY10\/ygR0KMcjABxUGo2gYxDjNmrFHY5B5W4QaLAUfLTkcfIDQzjzYeD0h4CTHwB+kRCvXPvqAzj\/94vx9VfuS4WOTzy7DD9vDxdDegeBMx9LjlfI8SjkcvDXye2YQKvRjzLoICBRi8Ky7N04ClyPd7TXUTRseKVTu3E0BBxixXn81ljhcARjlQg4VInU2cWRPKmS6HI40JGwACwDcCQuAFOxigccXqyiFoJ95UXEXA4\/UkkAjhh02F0cL+v+RsjdUBGLHovlDgefsZtjg8ChexwEHCQ1JpsVOgq6HBo6GDTk6cQpZjTWQoe6XyUBOjIUR+spUjGxCrscdNbftgdjr92Nrz\/SloIQxX2prXcI\/3NzF5qWG7hg8KBzdSdOXiOloePk1V34wFpyPHKgG2Ir7wi4G6bPEZtUGWZxtHxuADYIPgLAMX5BGyK1Y\/wCE6MI2Bi3sB3jFpE6It3TgXGOchi3WIugo3JpDmdv6cS593XinER5ECKBxDyfbU6KaSau6kYJTa5wh4NPCRr0vFIq2jgaj1UCkQpBhwEOdjgkdDjgsd4tjiYBRww8NsWBg8CjdFMeM+7XwEEuB2nqdmDbq+G\/p9e9ukOVR696ZTuW7f63oNPx2RdW4zPPr8LL3WFyeaMTmLwtXCTliKUY8KCNphRXOEqDEC6UjmA5mHQ7aO9Imquhvhb4TOwuliwAMko\/k9rrGC3LwRyHIzSp4hVH49CRMh5rehwEG6Q6ilYKOBzRxtFAcdQBjqjD4TgcGSdVgj2OkMPhAweVSC99EY3\/EphYyQIdBBjsbPBpoWMYLseVFKeISCU0qXJV5HAQcNCY7AwHOJJ7HMrloMkUXv7lOBw0tUIOR9zlSJxUcVyOtPKo53CY0VjucyiXw8QpEjjqbtsD0pRZe1F63W7c+7NwzBL+pzz87kB+CP\/0nW5MXpLDKQYyFGgQbHg6aXWXfe+k1Z0gketxAjkecw6iIgAeGjjEeGzI4TArzqm\/EZtUmXsICjYIODzomDCvFUrz2zBeqgBwKNgIAQfBRwA4ysjlWJxD6eIcJtybwxmbNXQQfJxDuq8TZxsA0SdDh\/s+fU2rCwQdDB41q7pR6kBHD8pMj8OPVspW9hr46EXpSuN0OCOywwMOgg4FHusHMI5EcQo5Ho7DQW5H5HLYZ9HjYHdDnS0aOBq353Hmw0OY+bAGDoKOaduBq38V\/zuZH8qDnI7\/7HgNc998AvPf+j4+9vsl+PTzK4RWqkVhtLujbSA8Qv7wG3oraUXgHhaCDeppFAMd5HbQJMzR5nZQLHQsdDrof8M72usYjtNRLHDY8uhnyN0o4HBc5DocCjooWrHQkbJxtIir6gk4HOhQLsdI9nEIl8N0OHhaZcplL4IUjFayAMfXX8ZUHzoMcDR9I+VOlcCkinI5rnwVDQo6CsQqBjqox0HQMZWWgTnQEV9zHnU50vZxcKyy024cJdhQPY7QAjADHLEuB1\/gxqdfHA0AR30IOOg9Ax11tCH0lj0ou34PFqSsRY\/\/k+6+09pDwNGDiUty+MCqOGT40MGvT1rVCRJNuZxIzwo8OlE71wMPZ1ol6ar6wC4OBRoEGywXOCLYaFUdjmKAg+KVoMMRAw4CEOFyGPAYtySH01oi6CDwKE5dOHuL0X1dOGtLF6pWauiwPQ7f4XBcDoIOrdJVvSCVrRIlUo5R5GkjlajHwZBhz\/X9KFs\/oKSgg8HDQkcANhhACDoCPQ5yOCZvHcQZjwxi5kN5zHyI+hwaPk59EPjTx4HWXvfvJL2inga5HLe\/8Rg27X0Sl\/9hE77+8n2OLvvDJmzY+1MMIbzr45KfAH+0IT4uK10OfuYYpdCpCqW+25H2mt2Ow3QWdDoSNpYeK9fdv3vQkWE52MiBQ0CHuDlW9jjY4eCzwYlW4pe4JfY4YtMqGjQc2Mg0GluoOCqAI+ZwaOAg6KBRWSda8YHDK42qEuk3AsBBToeCjuIdjsYrXwWpgZwNVixWiUqjDBz15HI4W0f15W0WMuTUyo1vYbp0OZxdHBFwyC6HcjhSehy6y2EiFYKLm73yKAGGL9Hj0BMrujDqOBwWOPaCgGOKUe2tezH2ut34x22tePVgeKIl\/k+6fuf\/vjGAv7yvC5MWd+BkAo5CImeDYYOAwxO5ICes6sTEeQdRQd0OCxxpxdFCwJEAG+RwzC8EHBSvJMQqfqQSA45cEDjY7fhgcyfOJdjY3ImzjOj57M05nEXa0plJ5HqcuaUTlRI6UoGD4pU4dCjwKDgamwIc5HIY4OBTuh1cHLXOBsMGn815jCNxj8M4HDSpMvORAZzx8CBmkix4aMejaRuwLmHXV+dgL3ry\/egfGlQnPftK+rv9QhtQvkUv9mKwSDsLwYb8Ov3i59FYJ2oJwcdhgg0nZkkAizQgOZa2k2a6h+WdnF4hR6RY4IhHKsUDxxSeWqGRWG8sliKVROAIRSpZJ1W84mj6nSph4NAuhwGOS\/XZSAvBeDzWB46kHocPHTZSET2OpC6Ht49DlUd9lyMGHLrDQbDBwEEuRyONyVqXI93hmJEROtwOB02peJMq1OVwXI6ox+FARwGHIytwKOiYtVdFLAQfk28j8NiDaXfuw7VPdOC3ewaQhB\/kbHz\/1QF88bvdaFqWQ8NScjhyqcDBoKHOlXHYkPBBcQu9njj\/ECrU1tE04Ih2cVCkUj5HSDgcE+aaCIWjFD5Nj8O6HE6kwn0Ot8cRxSqiw8F9jkCsQl0OjlbUuSSHksWdOHmDhg4GDgUam3M4U6kTZyoQodcEJRGIEGCQ+PvIIaGoppygQ\/U4koujPmyQu8FOhz77UOaXR63DoadU\/A5H5HJoh4OBQ50bBlBmNG5DgsvRPIhxSi500Ghs+eY8Tnt4AGc+MoDTHxnQ0OGBxykPAB95DNgb3uyfxBQF36cV6GOMy8ExyuGADlsoDQFGwnsSGEb6nAYWaV8jODpWIpZ3rExaTLziQEeoOGo2joanVAoARyBWIeBQ0MHA4UGHCxxel8OBjqg46uziCLkczvIv43CE9nEk9Dj0hIpeAqZiFQMc9NxEK89DsMFTK77TYYDDRitZI5VQrMIOh4KOFJfDLADzoWOailaSl38px4OKowY4nKkV63TEXY6ow+EBh4CNplt2oZEnVuiZ4xQ6CxRHG27doy50S49VXJeDYIM15fa9qL51L467bg8m3r4Pf7GxA1f8oAezftqL2T\/rxQ0\/7sHnHuvG\/9vcifp7OzBlSQdOXJHDySsJOAx0rMzhJNIqX67DcYIHHuRuSJ1oHI9JtKSLwSOlx1Ex5xBICjosbByCgo0U4LCwwV0OBzqSYCNQHE1xOXzgKDPQccK6HM7ZwpCRw5ktrE6c2dKJM1r0Sc8EHgwjBBgsBSRbOnF6Sydo1XlpqMMRilVisNGL0tWkPqUyjlUscAiHg0ZkTXfDniJWYego3TAAUtmGQaugy2GAo0w4HQQc41vyOOWhfpz1WD9mPkIi8DBux8NRzHKG6XZ86adICEkK8kXsAyte1Pscyk1vIwt0EJBINyPtmT5b0OEQADJS0PC\/Pw0ukr5GP+NYGZ19zzu1ryMLdDiwQaXRUHF0BCvOaRcH7+PgSIWBo071OeIuhwsc2cZj48Dh7eLwHA4qjSrJsVg1pULrzeMrzt3x2ChWUX0OjlZC0OHDhulwEGywVInUQkdarBKYVDHuRsOVr4GkFn2lFEcZONjpqL+GC6QpDgeNxzJwcLRiYcMUR2151O1ypDscu6ChQwNGQeAIRCrFAAc7HAwdk2\/bh8m3a9XO2ovxN+\/FhNv3o3ZhuyqITrqnA3VLOjBtmQYLBRsEHEYKNhKgQzkZKztBsBETAQe9HzpXdWLywlaUE3gEoMOBDYKOEHCEoKNgrOICh+1wqOLoMB0OcjyWkDoxdnEnpq3N4ZzNOZzRkqBNOZxBUl\/XEDKzpROkM+j7lDSQfKilE+NX9IShw06r6NJo3N0wbocBDgc8QtDhA0cgVildr4GjVAAHwUcMOqTDYaCD4KO0OY8THiTg6MXMR\/sw89F+nGHAY6YCjzxOF+BB5VKKWW74dYwfin5jx+vA+80EB8EGK83l4K+lgYb8Grkd9Ms9c6H0MEUsJebnJIFFofePldHZd+zyN45NGD4IMPiZvxaDjhSXw0YqoY2joQ6HWADmAweBR\/3nDHB4Lkc0rZIGHJHDEe5xJBdH6\/iq+kSXIw4d5HJoucBB0FH\/lbjL0ZTB4VAuh4UNKo0OvzhK5VELHQwf8vSKoxSrTLn6dTTZaCWhx3Hjm+BIhcFDTa1Y6JAOh55a4WglHTh4Lwc5HVrxBWBelyMAHbEOh+1xUIHUdTm406Ggw8AGQ8ek2\/eBVDtrDybN3odpi1pVhKJiFHI3jMNx0soO7WwwbIjzxJU5KK0y58qcmlChKZVILoQcv7ITkXI43jggkxe1opz6HQI82Nngk12OCXPJ4UhxOQoCh+lxiLFYCx2qx+GNx5popcxGK3oXh+NwCOBg6GhcnVP9DQUWEjD4eVMOM1ktOeVmEHCQq0GKAKQTpzZ3qk2jpYldjnCHw0YrHnAo8FhD7oYekbXjsRmAg5wOdjkIOhR4bBxEmZEDHuxu8Lkpj5LmPJru78fZj\/dgpoAOdjsixyOPmQI8aG8HgcdXfw4cDBRLs9DHPc9p4CAXgkCCgYNPhoukU4JF2jNBB\/VF3mnoYMejEFwkfV2NzmYZhR3l+zresSVhEjBCz8UCh4UOO6lSIFYxY7Eh4Jjy2d+hgaBDbBvlZ72PwwMOpzhaCDg8l8OLVUbc4zATKwQcpEYbrYg7VWI9jpdBuzjY3eBTl0aH1+FQpVEDG47TIWHDLP9ih4Ngo+7qSNNUgTTB5QgBh4WNuMNBY7JqSiVUGvU6HORwsMtB0KGiFI5W+LUsjzrAsQfkcARdDjGpIsujjsvhAQeBBwEHRSwTb9+L2tv2ombWXtTNOYATlrYr+DhpRQ5KBBn0LGDDfybwsJCxwjyvyOH4lSQJGfQceM+Ax5R72lBx9wFU0FitiFMsdBSCDdPjiEUqFK34sYrZxzFuQTtYZQvb1Q2xdHeK1SJaay5lgOOeHEql1Khsp3I5GDqmrMrhrBYCi44ILpo1aJy+KQdXnTh9k5T+Ok3AzNzciZObO0HA4UCHdTh0cZRGY6nTYUFDRSx9KF2lIxV2OBg4Stf0oXRNcT2OyOFg8NDQURqCjoDLMXbjEKZsG8BZj\/fgjMdIvZj5GDkd2u2IwGMQ7HhE4GF2d2wD\/vcTwEOvA\/0Zt+g++TZw\/r\/qDgf9wg0BB4FHEmzI99Ngw\/na0Rix\/Hevo7g16iHQkO8VCx1qPDYjcFjQkOBhehw6XvkdGjyHI3usEk2qxF0ODzi8WGX4wEFOR9zloPeaMm4cZdCwp5hUURe4FVEaleOxDBxBp0M4HBypMHTUXyO2jsoJFXpWwOHGKmpqxUKHcThErFIsdLDDoaAjM3DQhW5pwKHdDd\/l0JHKPt3n8KCDXQ4NHQY+Zu9DDY3Yzt6HpoWHFGhQrGLhgyHEnCeu0H0PWvrl63gCjpAUcASgg8FkVScIPCbcdVB1NyxsmFglm8PhTas4sKEdDoYMPssWtEOpIHREwEELwCx0mN0cpYs7waJ4ZeIKik86cHpzLqbTzHt0Wm0yz3RuyuFDStr1OHFjJ0oMdCjwCAAHQYcLHPQ6ABzkeijg0NBRwuDhuxzepAoXR32Xg4BDQgc5Hk5x1LgcJRuHUL1lAGc81q2AY6aBjjMIOhzwGLD9jtPVRIvreJzxMHDSDmD6duC8HwL3PAv8fB+wq0vfjExr\/ff36DtbWl7WsEHOBk00yA4Huxv+KQEj9OyAxdbknge5HeMOZ8RS5AKxJDej0AIx1evI4naM8s+oJWH+MjD\/dWiCpZjPSMCQzxo2aGJFXFfvxyqpPY6U5V8mUknqcTBwkNPBzoY8G8jR8OUUR6MFYPEehxepZAWO0MZR706VJOCooz4HRyl8ZuhxMHjwLo7EW2O\/GehxfEvv4uBIhaFD9TmkyxECDuN0cLQSHItVHY7hAUeWfRyJLkdBhyMCjpjL4TkcYZcj6nBwrKJcjtnsckQnwQaL4GPy3fsx49421ecg8KBuY+3BAAAgAElEQVRCKYOGftbvEXAcvzwBMiR4EHCsyGEGvbcyhxkrO4XM6xXaFZmyuB3ld2vwoEglgo2USEWNx+r7VByng6BjfhvGKbVj3PzI2XCgQ7ob9Oy4G\/oSN7rIzYENAg\/jcDBs8EnQUbW8E6c3dyio+NBGDRQfIsjYmAOdafrgpk7QyC3ptE2dmLG+E2OXaaejdGUPSHpShc8AcCREKj5wEHSU+uXREHAEYhUGDj5VxNKchy2NGuCgDkd5yyBOe6wbZz7eDQKOCDp6ocCD3Y5H+zHzUQIP7XbEwSNaHkbwMXWbhpAPPwr81RPAX38f+F\/fAU56QE9j0CQDrSf34SLpdQg0\/PeygIeKWO4rYnQ2C1QU0f1IhI4C47Sq1zHK45MsUzapm0lDsDGc9yRoyGfH4fBhQ72OrqmnSEXFKo7DkRKrmOKoAx2ew0HAUXeJCx06UvGmVJxIxcCGGY0t1uFQ20ZDHQ5bHg2Px6Z1OQhE6mkLqYEN1ePIChzC5bCXuWW4OVaOxjJsNFwlSqQB6FCRilkCxi5H3dVvYNp1CT0Orzhquxy+y6G2jvL2UYpW6NZYb1IlFqtQlyPqcTjRioKOtB7HnpG5HJ7DwcCho5W9Jl6JYIOho3b226ihvscd+9Cw4BBOXK57HQQddIGbdTaW53ACAUcW6DDAMWNFJ7Q0gBCEzFiZw\/QVpE6lGeR4LGnHhLsPYXwIOngcVp6qx9Hqbhy1sEHQkQAcyt0oFKvoS9xiwGGhg+AjcjlKTZG0YmknCDZIH0xScw4fFDq1Oaf6G9ThYH1oUyemre\/C+5f3oGS5Bg4NHro4Gnc3oikVJ1JxHI4+EGwore1HiZGeVgmPxmqHw8QppsvBsGHP5kEFHAQdDB7q3JTHBx7pwVnf6cJMgg4GDxWzEHQY8FCOB0GHEY3RiomW03lxmDoj+KC+xwcfBGi89tQHgKbt2mUYXwRsMIT4gBF6nQU61GfexYhluNARW4l+lALIO7IkTIJGg1kO5gBHaFJF3KlS9Hist+LcRiwh6PD6HDF3IwYckcNxRIEjYeNo0Om4\/EU0qD6H6XLEgOOlWIeDHQ46baQSjFXCDoddAGamVRR40CishA3R40gCDhWt+JGKiVUYMux5k1kIpqAjXhzVsUrgmvoYcOgeh4SOwmOx5G5oh4NjlbDLEY5VdJeDYpW4yxGKVWoJLoTLoZ7veBu1RtXU\/7h7P6YtadOlUYpTFGx0qKvr6fp6BR0efCiYsKAhAMN7T8NGDtOW5zBtRafV9JUEHh0KOiLwaNUjshI2+JlHYue1YRzJAQ4DHaK\/QS5HYqQSczqSHA4PNgg8lmiR0zF+aSdO3dCBD27owKkbO9TzqRtzIJ1iTvma3rNqzuEUEsFKcw5N6wx0rOhRMUvJCgMcwUglATpspBIGDgKP0sCkSqg4qgqkJlaxwEGvzWQKQwedpc1DOOGhHpz13U7MfFxAhyqS9mCmBY8+43gI6FCORwQeaqKFVqWbjaV8RwudFLvQ2bBNAwe5G1TmZJgo5gyBhnwvK3TYiEWMx6aN0nIR9HCdwwEP+vNlcRJG+2fekTIpQQdBBsNHYeBIuDnWuhwpsYoBDsfhoD6HBY7fgRwOpUt+h3rT59CTKtkjlThwpEcq9apE6t0YS+6GdTjikyrRivPkHseUy1\/ElMv\/gMavivKoDx1iLNbChiiTWujI6HAkuhw+dIhYxUKHKI9StEILwYLRihiNldAxTbocAYdDuxweeDj7OLTDEQYOXSStv2UX6m\/eBXXSs9VutY9DX1m\/G1NuFZpFd6p4um0PJtMUCuu2vZgUEHU4qDTKqrl9L2Kiboen6tl7UT17H+rmHcTxSzu0u7GsAzNCWt6B6cs6MH15B2bQc1A5+\/605R3Q0uAxdXkOTUbTVuSU40HQMW7OIYyfG9C8Qxg3rxXj5raiTGpeK8qU2lA2rw1l812Vzm9D6QJSu6uF7Si16kDpwg6ULupAia97OlByT87VYloKpkXQQYXSk9Zp2DhlQwc+IHTyhg4ordfnBzbkQDo5IIKP+rWdOG5ZN8YuJ\/VoEYCs7MHYlfqkZ6VVvSiRWt2LEqs+jF1ttKYPY30Zx4Pgg1Wyvh9aAyhZP4CSDQFtHESJEIFISfMg3r8hj6YdvTjzOzmcroCDoMMDD4KPxyO3Q0ctDB6630ETLfFiKcEH1F0tdCvthx4EJppRVQaOIwUdBCBZwIOgo6ibZ4uIT7KAyXCgg35u5l7HKHdBjvhmUoYNPp0OR8jlED2O+J0qFKmYWCUwHmtdjZTiKAPHlEuiEmnD5wtFKuRw\/F7dpRIGjsLQ4VxRXxRwJECHAo4XMeUrf0DyaGxhl6NY6NAdDj0ayw6HilYkdIQWgAngoFiFNDUUrSQAx\/SbaFJFXuTmRirK6VCxihetONBhXI5bw9GKgg0CDpYBjrqbd6Lull2OptyyC0q37vIAZDemzNqNybN2Y9KtJAKP3RF8WAjZg4m3adGIbM2sPai9bQ9qHBGA7IlDCIHJbNI+VNHzHW+jceEhHL+sXWnG0naQpi9rx3Q+6dmRBpFpBCPLaA+I1tRlHfDVtKwDUgQhFLWMn3MQ4+4+qE56VppLMHJQAUnZnENQmnsIZY4YPtyzdH4rtNqgAMRCCMOIARIDICUL22G1qB0lSgZGFIAQhLByGEtAsjiH49e245T17Th5ndH6dpy0rh0n0anUgZPWx3Xi+g6wCE6mrO7EcUu7MHYZqVvp\/QwhK7oxdkU3SkgMHvJc1YOSVT0Yq9SLsat6MXZ1QAJAStf2oXSdVsm6PmgxfIhzQz9KlDwQ2TiA49YPYvLWXpyhgKMTpz9OYuhg8NBOB7kdND4bjlkGcIaCDhc8OGo562Hg5AeAyi16Nwb9kmcRdAwHPKSrkfScBTroM\/T9ae6G\/7UsMFHoM\/+9ryPq84wZTlcj6\/dEsOGtOQ\/2OOIuh4YMARuha+oLFkddh4OAQ0EHXeAWusQtFqvo8Vgqjcahw5tU8UZjE3sc\/vKv2J0qBjbExlEbrzBwXP4H1Kn9HC9B3aPiuBzx0VjrdJhYJRE4vvUK1GSKv+bcWwIWhA7jcJC74U+q6C6HBo66a97A9Ou9PkcKcGjoiECDIINFDsdUilF8+cBx6y40ecBBfQ4LGQwbN+9EPYHGTTtRee2bGH\/NmxhH+rZW2bffhNW1b6JM6S2UXatVet1bKLnW03U7UeJp7HU78f7rduK4697CcXReH9ANO3HcDbsi3bgLx924C+8Teu8Nu\/Ce63dh7Ky9qJx7EDULWjFpYSsmLQpr4qJWhFS7qBVabahd1IYao+pFbbC6Rz\/XULF0QSvee\/t+jJn1tid6T+i2\/Rjj6ADG3O5p9gGMUTqIMbON7jiIMb7uPIQxUncdwhjW3a0YIzWnFWMctWHMnDbULG1F48pW1K9oU6pb2Yq6Fa3QZxvqVrZhSlDtmLJSq35VO0qWdmDMghzGLGR1YswioXs6MWYxqwtjFgst6cIYq26MWdKNMfcGtLQbY5b2RFregzG+VvRijNTKXoyx6sOYlX0Ys4rUj\/GbenHKox047fEcTlPAkQYevcrtkOCRxfGgW2mn3z+kbnalSRGGDToZOIYDHRTFJMEGv58VOuhzBAlZd3YUAopivz4ct4OWp1E8MdojlEJ\/viO+Dp2gQ0cqfCZsHBU9jnhxVEQqIegI9ThspMLxigYNBg4LHQVdjrR9HB5weJMqicBhYxVRHM3a4xDAMfnyP+gSqQMbBCAJwCHeJ+BQ0JE1VrHAkeBysNORGqsY4Lj6DTQEohUbpTB8UI\/DKM3lIOCIQYcPHLSTIwAdMeC4SQPHxBveQuW1b+Av7t2DT298G5\/asM\/qgg37cMHGNL2NT25MUPPb+GTzfvxD8358grTxbXyi2dd+fGKT1sfNya\/p\/HiL1AF8rGW\/0v9ppvcP4NM72vHR7Tn8zdYcProtp57pNenvjPg1n\/y+f\/4tff5+\/X1\/S6dVJz66oxN\/vbUDH72vFR\/f2oq\/vy\/S+fe1QmlrK8531Ibzt7bh\/G0J2t6O89N0fwfOv79d6bz723He\/R2RdnTgvJhyOG+H0QM5nPdADp94uAMXPNKOTzrqwCcf6cAnHy2gx\/TXL3isAx97NIfzHurCeQ8H9EgXziM9SuqO67FunGfVg\/Me8\/R4D84L6Ts9OP87PTjvu6TesJ7oxXlP9Cmd\/0Qfzv9eHz72\/X781Xd78Zc\/zOHPf9iBUx\/twAcfc8FDRyzselCxlB0PDR+O40Fr0u1Ei45b6EbaMx7Oo377EMo2D4EKoxI4+NmCR2ARWKGOB8NF0pkVOihiKeq6+1EQsZD7cixAxxEvk0ZOR\/bR2PikioGOQKRSVxA4og4HA8fkS36HOiqRhoDDcTnSgGOYkUoIOIzLEd2rEt7FwR0O6nGQCDoarvBdjgTgEN0OBo6mooFDT6hwnCLP+lCk4i0BU7HKNW9gytVvoMmPVhg0+BTAkeRyKIfDuBwOdKQAh3U6bjUdDuVqGLdDAcdbmHzjm5h0wxvY8l855IfC129n2bT4bn6maxD49X7gRzuBH+8G\/mMP8BOhn+4BlPYCPzN6ci\/A+vleQGkf8AuhX+4DrN4Gfvk28Fzru\/m\/tPj\/9v6uQbxwoB8v\/3\/svXeQXFd25olRN1wVCJAgUB5gd0dsyLXZHu3GxP6xsRFrZ+ePVq+kkUa72lW3Wq1prxa9J7w3JOg9LAmSIAxBEAA9Qc8GSMIDVSjvvcvyWfVtnOvevffdZzKrsgxQiDhz33v5KjOrNNHvx+\/7zrmtg7jSNohSWe2DKNOqvH0QsiraB1HRMYhKUeVtg+iLOwUr9a+YgZ8Ywb6aXmy53I3NlxL47clu\/PB1Ag9SPTy1w7NadOjg+Q6ueIhgqd7RcmgQf\/HaEL53MImcvQQcbtgYD+ggGIkDHgQdBDixd52dBK2z2VdRmDSj9kqqwVEGHK4R5y6FQ9gqviyHoXIEQMdP4uQ4HHaKaxM3h8LBVA6Z3dDXuLaKawiYCI5K4KA8BwuR6kqHBhfKTlEKRym+JRQOAg4TOoI7VcJyHBI85LRRubLwqCPHQbYK1bd1a+W+at+Yc6lw8NWzUqSlwjMcpHBUmyqHARyiNVYoHEzpkK2yCjpM4Ci6vwrzbi3Hva+3ZuB\/+Mf3LYmXSjs5eByvAt6tMeu9GoBVLfC+VR\/UAlQnqAhaRH1YB1B9pBXd94cmoC9oi9zx\/bUjP62hO4lzTYMMPAg+qC7Lah1EsVYlrYOQJSGFQIXu6eqPOXoz8htl\/obDtX3YcKkbDxYnGHQ8XJLATz\/txp8e8lstnuLhAA8tXMqHh\/HN4f7kQBI3vBANHDZ4RCkb9utBCod+PQ500D30M3Z2wzjfZb7utFDiwIjjHp+9Ivad8V235ndEbv42yYeDkfXi62BJZfBXWK5Dvo8RHHXlOLTgaKrA4YMNo1OFbBU\/cJDaQUpH0U+sbhXX8C\/XPI6fk8JhqRyuHIcOGvJ41MDBu1V06DDncoSrHErhIPCwVQ4rv7GEziMslXSBg1plv6MmjvJWWMNaMVSOMODgtkqoykEZDg062ARSdq2Od6awHEcNikjluL8KhfdVYv5tZTh+MZH5J8E4fULXIPBlM\/CmAA8dMCRcyJVBhgANCRgKMqQ6Ug98rNUn9RxKvmgEEoPj9EuN4mNaepO42MLBQQIFrTpUKPWjbRBlVEIB4crHELuWGJga0PFRcz+2FHfjkSsJbCtJYOvlBIOPu08n8N3Dnfj+4S784HXqZJGKh91G24sfalaLtFn+\/eEB\/MXhAXz71SSue8FriZVgEbZKi8WGijjnOmC4juNCB6kd9JCPq3Y4oSNN2yUKLoJev1qGhGW0g0VBxxgDB7XFBrfGBgMHh45zKPqpBh0u4BChUQqOGuHRSOC4wFthJWjIlQGH1Rqr2SpBG7mx8KiW49CtlUIaCiZVDpfCYVzjGQ6pcMSBDk\/hcOc4GHTcXs4Coyo06rJUqFtFKBwFd1RiyV2iVdaxr4qtcHxHC4xKlUMGR2WWQ0GHQ+WQOQ65EoBQ0dwNL89BOY5qFN1ficJ7K7Dg9itXFXTI53NNgisU71QLFcNSLyRkMBVDAIYNFwQYVJ9SSQumAfiMLJp6gMCja0B+4uRcO\/qGmVJBYMFhYoit5e1D4DUIbqcMoaJjCJVaVXUMgYqu9U4Be+V85yAevdKNp8oSeLw0gUdKEthWzOHjvjPd+P5rnfjea534wetBigcfGkbQocDjcD\/+QigehS8nWSCToCMow+GCDwkd6QRKXaChX7sxBYtlQQphUtl9MhbwEQQVUdfn7Lo6ch0ZDZPGhQ6zPVYLjjpzHOkBBykc+f94Dvn\/eDYEOkaT47iI4H1VtNCo1qnizeMIy3F4CgdTOX5djPxfF6NI5TnCFQ5lqQiFQ4LHUqZ2OGwVQ+EIAQ6aQno771JR0BFiqRB4EHSwPEcMS+U7D9SAyoANLcMhoYN1raQAHEvFxm0GdNxfhaL7KlFwbxkW3FqMYxeuHqVDf\/STBXK+ldsppG5QriMILBhcWGBBcEH1uV6NHDYIOAhE\/tAIdKS546j+XTN1TAoFwYWECQkSVZ1DqNaqpnMIsmq7hmBX\/9DkVjpqe4fwfEU3nivvxrPlCQM8Hr2SwANnu\/G919oZdEi1w8t3kOohW2i5zfLD17ni8RdH+vC91wawaO8wAw6CDVkuwHBdGw10kBqiQ4brOI7awXIdtOtszCFhYwkdBC5RgOF6\/WqZTJrRcegMOtJVORzAURCZ4wi2VAg2CDoK\/jFa5Uh1T5WMdKpQrsOR4yDgoFpCQ8FUXiMIPITCYQEHVzrKsNSxr4qncIjgKE0eJcCw6\/YKBR3+AWBea6xUOeTK8hwyMKqvylapASkcTugQnSoSOJjKYQCHt3OsVDfkylUOMV10mVQ6pMpB0FGBgntLMf\/Wyzh2vjtTz7xJ8b5NvRwUCDxsuCBwkHBhAIYGFwQYBBeyTjYCrJr4+55sAtonKXhQAJTgwgUUdV1DkFXfNQSqhm5ZSe14CAPJyRsybh8cxss1Ceys7MauygSDDwYepVzxeKI0geVnu\/HdQ2347qEOfJ9slte5zeKBRw9+QKPRjwi140gv\/rs3evHHBwew4MURH3CkCx5xLBX7Hhdo6NfiQAfLdew1cxtGpsMBI2Ohcsj3cEFF1DX6flEtqVPh9W\/sRGo7x4ZlOezXiiKAw1Q4oudxFPzDafiyHCo4GgIcSuU4hwKZ5zBsldEoHBcQHRwV1oqvNTZg+JcFHLrCIaFjKe23YlgoNnhEAIeV4wjaNdYHG0LhYCoHKRtBlopmq0jgKLqzCt+518pxKNiQLbIedHxbVzocwOGEDi3DIYGDVlI4pMqxhKCDzejwoKPwvnLk33MF82+5iGPnuyYFHGTyS5A7QEFTaZnIrpQvGjzlQkKFXHW4ILA4JerLJoBVM8+PyOutkxA8BpMjqO8eYuUBxRAaE7KSaEwk0aRVcyIJ6nqhahE1NDw5oaM\/OYKjDT14obobe6u7saeK4IPAI4FnhOLxdFkCK8914buHWvHdQ+34nsh20PwOynZ8\/whXOn5wpJeBxw+P9OLfv9GLb706qP4LXUKGvbqUDdc1pXZMcOssPegnYl5HFGC4XidgmQpQEfUdxxc6\/j79AWA+2IgZHGU5DmarkLUioMMAjrA9VUYRHKU8hx0e\/SVBhl5htgpvjVU5DqFwSOi4KVTlCAYOpnKEAke0pULAEQkdIschgYPnOWjL+iDoELBhqRx2a6xSOQyFQ4w4dwEHm9HBgSMYOipReF8Zh46bL1wT0CGBpmMAONPC22VJwSCwIMggqJAlIYJWBRh03Ax8pdXXzYAseb2lT37S5FiTwyNoTgyhKTHEVgkTOlC09iTR2surrTcJu9r7kqD3mWz\/RkZG8HFrL16u6cb+2gReqUlgb3WCg0eFBx7PlSew+nwXvnuwBX\/OoKODg4fIdhB4\/OBID6sfsrUX+S8nWbeHzG\/YsCHPXYDhuqagI429WHRVw3kcsr29roKkOq9DqhRjsbqgIs612TQgLE6XyiQeJJbRWR2G0hHaqSLGm6fVGisUDupWEdNG5erlODhwEHQUktKhoMNUOEJDo77W2As8w+HaOdYVHPWpHGHAYeY4qD1WwgatBb8pQRh02J0qMsfBV0eOI2Crep\/KcTvPcRjQEZHj0KFjKc3n0KHDUDk8hYNlOUjZoAyHI8fBwMOADm\/Eua5uyGOpcijooCCpoXQI6Li7BPNvPo9j5zsn2\/Mko9+Hnp\/V3RwyCDwMuCCoaPLgQkIFW1uA01oRvMg6K47pvubejH79lN6cZq+09VlA0ZdEe6+oviQ6IqqzLzkpZ7ic7ezHgbpuHK5P4GBdAq\/WJpjN8mJ1ArurEthRmQABx\/aKBNZe6MKfH2jBnx9s49mOw534noKObvzgSAL\/\/o0E\/uy1Pix8cRhZu7xdYiVguFYXYLiujQY6xjLXQd9jqigdBCWsg+UqgI6MdbAEQQezVdQmbpqt4shxFP4\/juCooXK4bRXZqcLDoxp0UOeKgg5vTxUDOGLO40h1T5XI4GgMW4Wgo5BCpIHWSrjKcZOtchjB0ZAcB1M3POgoMmCjgu2nIvdVkaAh14I7K1FwZxW+dY82kyMEOAzocNkqy2rwLQUdYcBRx0efC2tl6Qqe6SjSoKPwgWoU3l+BAlI67i7G\/H87d81Bh3xqU8vrpXYOH6RiEDCcluWACwkWtJ5rBc628pWOqSi0ek7AB+VIJsM\/ml9CMzZIrZBwQRBBx7TGqa5+go7J8Nt436GiZxBHGrpxtDGBIw0JvFafwAEBHi\/VJMDBoxs7KhLYVZXA+osEHc34s4Ot+C4FSi3o+OEb3fhvDvbjuj0joMFUNNKcygUa9jUXZLiuSfCwMxtxzp0KhxYy1RWNsGN6n6gsh\/76WKgc8j3iKBv2PQRIV8Nk0pShQ87hsDMc+jndo6BDqBwqwxF3ABjbvM3KcagMh3vEOVM3WIaDgqOyY0VAx0\/OoUhNHTVVDiM8arfG+lSOi6DdY33QYdsp1Knia429hIJfBGQ5XO2xlspB0FFEIdIA6FAqhxgAZqgcNnDQuYKOEOCQnSrCVlHWigEe7vAoB45KFN5ZhW\/LPIcBHJTlMFUOBR0MOPgAMN1WIeDg0BEAHMJS4UqHZ634oGNZDTzoKL3moUM+whp7uWJBFolSLggqWjhYSMjQ4YIAg1UbcEHUxTZAFt3b2CM\/YWJX6mAxIKM\/CQIJAo4uKnEetHb3JzGZhtU2DyTxTnMCbzcl8GZTAsc08DAVj26meLxQncDGi134s\/1NDDrIYqGZHd8lpeNIF\/7bI91Ysm+AwYYOHAw8tG4VGzbkuQswXNckdFw\/gbkOarGl31EHC3ZsDQeTr0tgYKtj8JfxOs3xCLlHAUWc4WDintAOljgKyCS5R7XNxoUJHS5cx\/J9GHSE2ioh7bGuEecuhcOyVbilYsEGZTp+wotDhwccBmzEUjjiBEe1FlkjwxEAGzEVjvzflICKda74oCNa4bBVjpQ7VahFVit7EzepbHhrFYMNUjkIOtgQMAM4\/LBBwOFBRxrAoXIdpHLwYvaKUDnYjI7ldShcRlXrQce9EjrOXrNKh44C\/UmgvJPbJwQZCipagQuyLLi4JCCDVqrL7WYRgEwG8OgZGOaAEQEXBB0EGHYlBiYPdHQPJfFxWw\/eb0mwIvgg8CDF43WpeNQmsK8mgZeqE3ihKgFSPrZc4tDxp2SxMOjowPdf72B7suTsHWSWAz0UpcKhrxIuglYXYLiuKejIRK4jhXkd9HvGbZ31QUWaA8LofRR0pHBM8BMV1JwKryvocAHEaK7JzdvUtFFD4RhNjiN4AJgrxyGBg1YFHdoAMAUeLoXDoXL4FA4VGtUGgGkZjkhbRSkcXpZDz3CwYwEcDDr+1e5UoXMBHQEKBwFHJHTYbbFap4qe4yi6owJUHDqEtWIFRxl4CNgg6Ci6u0pt4OYNAfNDB+tYCbFUPJUjIDyqVA4NOlbUgakcDDzqQfaKDzqEvXLdzdPQocMHtb4SPJB1IlWLi+3chiErhsqGi+J2QK+SDkAW3d\/QgwlVCmiwVxBQ6ICR6E\/CVb2TBDoGhkfwVWcvPmpLMPA40ZLAey0JvN2cwHEXeNQScHTjldoEHrzchT\/d3wQOHW34\/uvt+OOD3bh+zyDm7hzBvN0jTuAYS4tlNNAxlrmOVDZ\/m2joIOVkKkBF1HfM2KwOH3QYOY6x3ciNZzgcCoemcuT\/xFM4IqeN+mAjSuHQgMNlqTDFwxEeVcChdas4LBWpctC61AcdYSoHhw0dOmjMuU\/lcAKHl+GQlooEDp7pcFsqHDi4pULAQbWU9ltRKoeADa1TRVc4CDyUnSKPhaXCocPbNVaGRc1VAw7KcxBsKKWDoKPeDR33FCMd6KCugau1gBFQm2ltYgQXWkdwsW0El9t5FWtrcceIAosrHYCs0g7AqE4OIBMJHjTYS8KFCyrYtQEOHD20ipLHfYMTv9EMBWIvJ\/rwWXsCX7T34NO2HnzU2oMTLT0KPHTF41B9AvvreEcLrduKu\/An+5vwJwda8P3DbfjWvi5k7xxA1s4k5u0aZjvF6uqGfhykcOjXXcqGfW2yQAd9j7hKx1gOCUtH6SDoidyDZRJ3rkgYySh0UI6DKR2xgcMRHDVyHO7gqFPhMIDjHPJ\/6kGHUjfIUollq1z0ZzhcCoczx+GADYelwtpjfcDBLRUDOox22fjAIZWOWMBxG2+LlQoHgw6hcHCVIww4OGhI4KD1pnur\/dAhrBQDOJbV4tsEGBI2aLWA41vKQrHhw4MNZq0IhcODjnoUreBVyNQOzV5hLbMluO7mcziaYvdKMplEb28v+vr6rsoa6O\/DYH8fWrr7cKm5H6cb+nGusR\/nqZr6caGxH8XtSTb3g2Z\/UJVpRTaNXhVd\/Jfu0OQAACAASURBVB4Cj4kIZA4I6CCYIJCIW6RwUPVPAuio6uvHqc4efNnZg5MdvfhcA48PLMXjjQZutRyqS7BWWgKQR0rIXmnEnx5oRv6LnZj7XB+ydgwie9f4QQdBiAKPCcp1yB1nZWYjch2FnWKrJOlAB\/3MrF1TX+3I2KwOZavEBA6axZHOnipROQ5ur5xHAUGHvZ8KA44LERu5BYw4j2iN5bZKGHB4dkpc4Cj4rdkuGxUclQqHBA4vOBoyj0MLjCqFg7IcOnS47BS6JjpVdOCg429Rq6yudDiBowbftqHDBg5mn9iwIc8joEMAB4GHgo5l1Sh8oJJ3rzClYxo6guCJ4KOntw\/V7X0439iHc419uMigow9X2pMo7\/LgoqITILiQVdkF6FXVzV+bCPAYSg4z0JAQQdAhj+OsBC0T+a95YBCnuxM4292DrxV49DDw+EQoHh+09OBdslqaEjjemACBB7XSEnjQ+mhJJ\/54XyNu2N6G2c8kkP18H7J16AiyV0Qni65quI5tVSPoXEFHBnIdYV0rxmtTrIPlatj4LWOzOvzQERIcdY04j1A4GGyInWPt1lg9x0G2CpWEDkPlcOU4jJ1jA4BDqRxaaFTYKl6GIyA4alkq+b\/i1oovx\/Frv8pRoDpXNIXDN+bctFQkeHjAEd2pIhUOFRxVwFEJ2inWC4tqx8JKsYGj4K4qfJtBh9tWYTkOBhukctR6KocBHKR41CIVleMmQ+nwVI5g6JhWOoKAQ17v7+sDwUd7og9lLX240NSPS019KOtIGlBBgFFF1e0VzQKRVdMNNPbzah8a\/0c4GSSEDnGLOmSpJhY3gK6hIVxI9LA6l+jBGQ08\/tDRg8\/ae0Dg8WErD5e+25zAWxZ4vNbQje2l3bj+6WbMfKIDWc+Z0JFN9koQdMRsnQ2CDNd1CR5xWmX1e8aqbZYAhHWwBHSs2OqHrViM5jwdteNq2PgtY9Dhn8cRluM4EzLiPP3gqFQ5GHT8U8Susb4cB7XGBkCHqz02TqeKBRyuEeccPvzAkfebEhT+TguN+mCDb1svIcNYb5XtsfGBQ6kcCjhI7UgROu6qQqEKkXp7qhiWCo07j4QODhw+6HAERwk2TOCgTIcDOpbXolAqHffTRNISXHfLtNIhASNsJfCg1xs6+1DcTNAxrIBCggWtBBeyahOArMY+4FRpA458cgaHPz6DY5+ewUeff4lPP\/8DPvn8ZEbr489P4cPPvsSHn3\/prXQsir6HWafEOa2nQD8\/2u\/48ecn8ekXp1Df2BSbuPqGh3GltweXe3gRfESDRw8keFBHy8G6blxKDOBMyyCyHm\/G7Cc7kPVsAlma0sGgY09wkHQsw6QEIZmCDoISQ9EImFRKFgv9TpG5DgElo4EM+2fTho44ra+TPNuR8qyOOF0thS5bxTV1NNRWSW3iKFM8RHusDhx5Pz2PAh06mMJBY87JWtFKUzlo11jnviost2EFR43wKFkq8VSOuLYKZTryfluCQhYiDelUuTlY5eBKRwh0OCaOMqVDQUcliu7k5VM6bJXjLp7ryL+LOlektRIAHRpwKKXDUDkCgENlOzRbRQCHBx31WLKyfho6MpQ3IfjoSvSiIZFk0EGAIcFCrnUJQFZ9AmgZAE6W1OLBnQexdccBPMTWg3hoxwE8teNFPLPjBTzDVjoe+3p6x4t4etfLVr2Ep3eJ2vkSnpHHtIpzuvYMHe\/cOybf66nte\/D87pdigcfQ8DCq+3tR2teD0t4elPT24FKPUDy6e3Cmi1stpzp6IBUPaqUlxYMyHhQqJZulrGeQQc7FtiHMHQV0RI1DJ8vFpWq4rqULHddqBwvBkQxkTtWVlI6UoEPO4QgDD7rHg45whaPQ3sjNsFWEyqGNOFe2Chv+ZXWsGMBBsznOswApQUfhz0RoVAVHNejQYIMN\/nIN\/zIsFQ06tPZYb2+VmFmOGMFRFiL9LYeOoijoEK2xSuW4tQw3CZXDgA5ft0p4cJTnOQR02PaK1hqrrBWCjruqQNCxhCaRBnWqLDNVDgYdBnCkZ6tw6KjHUgKOlabKweyVFXUotJWOe6eVjjB1I\/i1Xgwnk6CJpvU9HDoILuiYinIbepGdcvD9P+DBHQfwxN4jqh7fewRP7n0dO\/bux669+7Br76sZqZ17X8XOlw6o2iWOaWW19wB2hRZ9v7H5bk89vxufn\/wqVO0YxggaB\/tQ0d\/DqryvhykexQ7w+KqzBwQeX5DV0tbDWmkp20GdLa0DXtfN+VYNOp5LXenIBHRM1JAwUjoIhoxx6CFWi1IrQgZ\/xb2HKR0pDAej+wNndcRRPybRPQw64sJEGGzQa\/J9OHSEAYc1bdQY\/hVlqViwYXeqiBwHdawQcCjocCkcFnAEWioGdGhZDsNWiQkbvzL3UwmyVFTXCoOOKyj6vbBQfPM4whWOpbeWg2qJc6t6EzhMdcOzVJwqx51mayyDDgEcHDqqsZQmkWrBUTmLg7pUdFtFHtvdKtQOa9gqKkzqVjiUvSKAw4AOApCV9SiUYdLlNJW0EgVkrzDoOD\/dvZKiKkKdO9TBQ\/+Sw3xbewkbNN2URqDLlY47k8CJry5jy7Ov4NHdh\/DYnkN4dM8hPLab1tfY+bN7XsH23S\/h+T0vj33tpvfcx2r7nn2QpV97\/oV9YCXuk6\/xa6P\/Ttv3vIzndr+EJ57bjZLS8lDoaB8aQM1AD2oGelElwKMsADxOd\/WAg0cva6X9sDWB05196LPahAzoSMNeGUuLRSodEwkdpJpE2iticqkCijHoZEnHXgmEjklup9iqTEYGhBWSlSLLta8KG3OuZTkiFI6wjdzM4KiYQPpTT+UwoUOzU3w5DrGRGwGGXQE5jvjBUa1bxadwEIT4cxz5vy0BryvI++0VLAmCDlvhECPOSd2QwMGgw6dwmLM4wnIcbuiw2mM14JDQcROFSDXooGMncBBcUFiUKR3i2AYOl6VCk0c1W4UfeyqHHzoaTOhYNg0dwSpGdBuwDh3y6dk3BLT28QmktOFbcx9AO85StfUDLb1JvP35Gew+9A52v\/YO9uh1+F28cPgd7HvtGA4ePooDGaj9h49j\/+vHQeuB13mxc7omSl73r8dG\/Z32v3YU+w8fxVdnzrEZL\/LvZq+J4UE0DPaifrAXdQO9keBBHS0EHtRKS220ZT0Dzvc3oIOUju1ey2ycIGlGoGMCO1hS2oNlDGBDgks60HG1DAjLLHQEAEdke6xmqaQGHBw2SOUwlA5lq2jQ4VI5bNgIUTgigUPN49CAw6VyaBNHdXXDho6lrvCoAzh0S0VCh2\/X2IiJo8pSofCoyHLQSm2xvMKBo+CualB96z4vy8E7VRwKx\/JafNuADs9WMVQOBh2awhECHNJaUdDBVI4GFK0U0MEslhoUMugoR9600pHWnBEXdNDDk\/7junuQgwYBSJsADjruGAASw3RtmO36ylfaiM2rjv5h0CCv4eFhJKmSY1cDg0PoH+A1MDAEVoNDoOvqnK7La9o6NJQcg+9Co9TDd43rH0miOdmL5qFeNA4J8BgMAI+eHlxK9OB8ooe1037d1YOmgeC2oEjoiAiSEnSMlcWilI5p6Ig1Gp2A5WoYEJY56AgADt9MDkPlSHcAGG+NtWFD2Sv\/rMGGQ+FwhkZDgCMyv2EBh7s1tsStcBCEMJWDKxykclD5oCMAODh0cEuFQccYKBwSPJzAQUFSQ+XgwFFwdzXbnl4qHfGgw1M5jEmjK2gehwUcPuiox9IVXOUwoEPYKgQcNnQUEHQ8QNBxBfNumfz2ysDAAOLUaNSLVH42CDrkf7UPDgOdA1zh6OgHZNG1rkFeBCeshsCyIQlaRSXDn83yY1Jah4dHQsBhxAk5DH6Sw+Mywn1oZBjtyT60JfvQkuxD81AfGoXiUTvYi+qBXlT296C8vwfKaumhbpYELiV6kRB2V9AfxQcdz1tKx1UCHXE7WAI3fnNtBjfRSsdVAh0ZmUpaGAIcBB2qDODwB0fNEedWlsMIjgZAxz+dR94\/XUCRDh0+hcOxa6xUPOSUUbmK4KgHHaPpVClmm7gpdUMqHpatQsCR\/7srWGpkOdw5Dk\/lENBxWzmW2tChdaqoWRzGADDeGstaZFNWOTzgIOgg0GCWistWEQoHqRye0mFlOKSlYkNHgKVCsKEDB1M6dJVDKB0FK+pQsLwGBnTcOrmho7+\/Hx0dnWhv70B7R3gROND9qQBEOvdGQQc9+Igb+pIcPhhsEHAMAN2yBgVsaCs1Wsga63lcpJqQYmGWuJZMYihJakYSSaZq8PvYzySjFYqgB33c6zTiPDE8gI7hfnQk+zl4DPWhSVM8agcIPHoUeFBXy6WeBKr6+jAUoaDQ9zCggzIdadgrY6V0ZLJtlmAibtssWR1TJddxVUwljQqHpvO6Dzp00JDHBnCEKRwWbAQER0nV0C0VpnL80wUOHYGtsQHA4Zo4KlpjPVslIDiqVA5vTxX\/8K8w4LiCfKFuSJXDBx0BKoeR4xDA4YcOLzyqoEO1xorwqAYbpspRyfZTsTtVuNJhAkfhPRp0uIKjNnQEZTgIOCRk+NQNkekQsGFDBwVHeQmVQ7NXOHRUcaXjviuYN4mhY2hoEJdLyvD2+x\/jnQ8+CS2658y5i0wRSQckUvmZONAhH7gUNO0VYGFlG+Ut47by\/XKIiGjvHArBkn0joIIoiS6yEtTErmX269F36hsZQvfwALqG+9HpAI8GYbVwxYN3tJT2JdA8OBD7y\/mgw1I6siOGgzF7ZQ\/gmkaqX3O1yLquKYslxXHoUQPC4iod1MESGzrGUOkgqySdXMfVMJV0fJQOCRr6akOHK8fBWmPPIXLqqNapIi0VJ3QYKkfALI4QWyUSOBwDwApcwVGpatirw1bJ+90V5P\/rFdwklY5Q4NDCo06VwwMOFhy1YUMMAJOgoa+0Rb2CjRBLhRSO\/LurQdARFhyVCodcKb\/hy3DYwOGDjnrcpFkqBnSsIuDgsCHXwlUNKFhZD6Z0rKhBwfLJDx2DgwNobmnFW+99hDfefA+HjrwZWAePvMnuOfbOCVTX1iE5NJRRtSMV6JBPRerefK8KeOEC8NJF4OVLZr1yCXDVq5eB\/Zf5ayeqAamAdCV60NDcisaWtlhF99Y3taKhqRX1ja1obm3H4OAQy1l003uJ11xrY3O8z\/B9l+Y2NLW0ob8\/AA5GRtA\/MoSekQH0jAwytaNreICBR7uleMhwKakd1NHSnQzOb8i\/ub5GQkcce2USQMdYzuogkDLaZl3WyiTpYGHQEaf9dRJ3tGQeOnTQkMexgINgI4bK4VI4CEKEypFP9soY5Dg84BilpeLqVHHlOH53BQQcBnSEAoeZ4yCFQxYLkrr2VVHQ4bZUGHTcVYkimi4aCB1C4aDw6N28CDqK7q3Bd1wKBw0EM1SOOgYbbuCIUjm8DIcEDmavrKrHklUmcBStasBkhI6B\/n4GB8nkEAYHB01I6O\/DwEA\/\/vDlaRx9+wMGGwcOH8PB1487S75G93702Un09PRk1GZJBzreqQD++RjwizeBX2r1q+P8\/FdvAq6ie39N9Rb\/+TcrgMH+Hly6UiGqEpeuRNfFkgpcKK4ArReLy3H+chnqG1vQ1z+Ay6WVuFBcjoslAcU+K\/ozXN+DPq+sspbZNzoE0PGAAI7ekUFQ9QxL8OhnVgtlPFop4yGslrrBHja\/Y2DYm79hv2fQeRB0ZO1KgrpXsq9B6Jg\/haCDjUK\/lqBDzuEIs1zYcDCZ6fiH0yEbuZGlEpbjsIDDl+EwB4C5FA4Cj\/yf+aGDJo6yktkNubpsFd8AsABbhakcnqXinjgabqtIO4WtBnSUQg390sFDG\/4lO1UkaOjrEpHjUHaKkeHwz+PQFQ4GHDZ0BARHY0GHBRzfXu6ADqZwaMAh7RVt1UOjOnA4oYMAJAg6lpUjbxztFYIMskuGhobY2tnZidPnLrBBUZXVNQwyCEDoHowMo7KqBqRcHH\/nAxw++jZeP\/ZOaNE9R99+H8fePoFLxaUYGaG8An8\/\/rn02WZRODUVW0Xemw50PHcG+K\/Hgdve43Xre4Be8rq9yntue5\/\/\/LNngURnBwOEkvJqxK3isioUl1aqIsCorKlDZ1c3LhSX8etllSimkvfJ47Kq2J9jfx\/6XIIRghv939BIkikcEjjkSqoH5Tt0xYPAg\/IdpH5Q\/iOdfwZ0iOFgtMusDh0k+0sbJXB9YWwsFmWvTFAHi3NA2CRWOq4G6MjI\/iss02FPGyWVQykc7hHn3q6xFnAE5Dh83SosOOqpHAo6NFslHeDwgqMBwBEnx2FbKfLcERyVCodcC2hGhw4bNIvDNY9DUzckdEjgMDZyUwqHBhxWe6yhchB0EGhE2Co6dCyhdll9zLkBG6R21PFawaHD7FZxzd8wr9mgwc6ZwiFUDl3pEMChlA5msdRa9soFHD3fldL\/jqe6tT093Ds7u1BRVcNgguc0PsJrb7zFVIwjx9\/ByS9Po7K6FhVV1aiorMaJT\/6AN9\/7iOU43j3xKd498UlEfcrufev9j\/Heh5+itLySfV55ZTVcRZ9DwdR0wCMd6ChpA+79EPj9O8At76Ze\/\/YOcPcHwOU2YCQ5iPKqOlwurQKDCQKKiLpcVonLpRVM1aCVwKKjs4u151bV1jPVhBQPdc+VSlyWlcLn6N\/jclkV+7z6phajXTY5MqwsFaZwCKVDgcfwgMp4yGApqSCj+WdAhxgONimgI8VMx1jaKwQ+U8VeuSo2fQtTLdJ9zTfe3ACOqImjMTIcYsR5UHBUWit+6AjLcWiTRrXQqGerBACHleOg9tjUgqO8RVapHJrCEQodSuUItlWWWpZK4AAwR3C06K5KBhoEG7LM1lhqlfUsFQkctJK9Eg4dHnB824YOPcehKRsqTOrIcCgAEbYKs1aEukEKh1Q5OHTIXAeHjnyldGQWOuih3trWjg8+\/pxZJVy9OAGCAwqHElDQ+ua7Hwpl4wRb44RHg8Kl9LPHmUpyAsff\/dCsdz5krx17+wP22U1NzaD8iFQx4qzpQAc9MKl7pbwDqOhMvejnOvu9xy61s\/b29aOPunViFN3b29univ7vwgOlIxhO8vfSX2fHfX3oZdNa432G\/T3oM+08BykVHDQG0DssbBUGHQPMXtHBg4KlVAMjqdsp3l+KHxnQoQ0HU0rH7hEWcAxUOKQKchUpHVMJOqjLhpQCe8rnVDr\/ZrpgEfZzkcO\/\/t+zkEO\/5OqpHBZ0+GwV9wCwPNEeqwNH3s8uIJ\/aZWk\/FVaOaaOu4KhmqXDoiAcczFJxQYdUNfRVKBwKNqhjxQEcef9aCp\/SEQs4ymFDBx\/6ReqGpnAEAIeyVQKhIwA47qlG3t01WEp7rkilw1A5TOAwoMMFGSvrcBOVeC3QVllVj6WrGliWw4YOgg1ZBSsd0HH\/Fcy7LbPQQZbG2fOXcPStDxhcBIFCJq4TfBw+9i5ee+NtvHb0Hba+fvxdvPM+74ShDMiXp8\/5MyURY9HThQ77QTjR57ybJT27Iq3vPgIWHCWwoI6VPrUOCRAZZIHSXrJYRghKBkCqyFj8C4OOLJHpuNbslRteALJC9lzRt7iXE0XHYk2ne+WqgI6dwIwwgEjnNQM6lKWiKRwadBBssHkccUKjgQqHaakw8PjZBXjQEZDhcAFHXJXDUjjSAQ6jNTYAOBh00DRSaa+ojdxCFA6yWW6vUNChshwuW8UJHZ66IVUOZq+oLEcwcOQTdNxD0FGL7xBsOIKjBBoMNkjlEHWTS+GwgMPVqbKUwQYHDgUdq7m6oSschasbQVWgOlg0peP+K8i+NbPQQSFRerAff+fDUUEHAURQOYHlxCes82XfoaOQ9crBo3j1tWOqBZfUlS9OfZ2yxTIVoUN2v6azjsVDn95jCMMMOgaQZOoFKRhUdJ2+l1RAKNdBXS1RE0xT+V4+6BAts0rp2BNT6RijDhaW6djDt7knyySVimqbjTungz5TB4uw47GADfkeaUHHrqtA6cgEdKjhX4at4s5xmAPANJXDUDi80GgcS4VgQxZXOi6iSIZF9dW1p4oGHQWU1QgqGzpcrbGuThXRFivHnCulwwcdpSDg0KGD5nAYA8AcGQ6W5RDAIZUOBh2jBA4DOkSXirRUyE4h2Mi\/p4YVh44aDh22yuEADgIPH3RI4JDrijo2+EtZKXI2R7rQsbIWBSuqkb+sAnnjBB1fnTmfNnQw0PjgY2aFfPDR5yzrceLTk2z94OMv8N6HnzGYofsM+JDQ8ZoJHfsPm9Dxh1OnxwU6aCYGtZ5W1zWiJsNFn0HV3tnNnssjzQ0Y3vMEkk9uRPKZzRh+ZjNfn+ZrklathvXjpzZi+JktGLl0lr1XT28fauqbQn8P+uzmtg52f2eyF4\/Wvou7y1\/F\/RUHcH\/FQaPuqzgAqvc7L4OmkhJ4DI6BnWIDiQEd2nAwBR1x7ZWxhI4XpqEjLoAwpWOKd69kJEiqoMOlcljzOLitosEGhUZ9wdFzbPCXHzhI4bBUDg04cqW9ooOGPA7oVKHQaLwch9mp4s9xODZxI3tFg444wJH7r6UoJKVDWSraLA7aQdYFHiLL4YeOkNZYUjwcOQ6\/0mGqHDZwSPBYSlNIbeCgThVN3fCOHZ0qEjbY6m6NtVUOpnSsbsASoXRIS0WqHIbSMUWgQ6oa73\/0OT7+\/Et8fvI0vjh1Bp+dPK3q81NnQPXJF1+BAISgw4YPynaQjSLr+LsnFJyQ0jFe0NHU0o7zxeUiyEmBzczWpdJKXCytRA91jTyzBclf\/Q2St\/4jkrekUb\/7e4zc\/xsMtbWgtLaJtd1GfX9qwe3v7sf2xo\/xH89swd9eeJzV3114HH934Qn8F6qLvP7mwqP4h0tPo7K\/FSOkeWTA8fFBh610jDN0ZHQq6d7oqaTUvUKKSZi6ob8mVYqxWOOChn4fQcdUym+4vmvmoCM2cKTZqcJmcYRBx0Xk\/uwi8n\/uUDlcwCEUDq9TZTTzOMKAg8BD21fFp3BcUQoHqRyh0GEDh6ZwGPaKUjlCoEPLbuigIY\/lJm5S3ZBrMHTo8zjMHIcHGx6EyMwGWw3goEyHAzoshYOAQ0JHkQ4dwlaR4MHslVX1KJDQsbwCuaR0ZDjTQfZKqkoHgQMFTAk2vvjyLIMKCp4eOvo224n15YNv4JVDR3HwyFssdPrhpyfZfZ\/+4WsQpOjgwTtfqPtF1Ac8uEqAMp7QQTMxLpSUR3aZ6N0foz2+UFqJ7t4+YNsKDP\/u7zF8xz8j6Sj9Oh376tafYPiOn2GwoQ4lNY0MmKK+G0FHb2cvnmh4H\/\/n2a34+4tP8rrwJP5e1sUn8X9ffFLAyBOo7m+zBYoxOw+DjpQyHWOkdDDomEB7hSyYqQQdBECuB\/lUupYZ6DCAI4VZHD6Fw9tTheZwGEqHoz1WWip8TRE6tPBobEvlV1ztMFWOKOAoYRu4MZUjAjgUdNxMtgplODSVwwcclOMwsxysTVYBR0h49K4qPgAsEDzMEecSOGjVbRWpcuTfW4OblNLh5TfsHAeHj1qmfgTBxk0EF4HQwUFDAsdSqXIw6GhE4Sqe45DAoZSOKQAdBAwEDqRokIpB3S4vvnoYO158ldXOvfshS17b8\/JBFhglxYN+htptdfAwbBdtnPp4QsfA4CAqaxtwpaIGpZW1GS\/6HJpAymKYl89heP2dGF7xbxhedUuKdTOGV\/wew+8dZQBAlk1pZfjvQJ9NFgx9eONgJ1ZUvIZflezG70peMOq3JXvwG1a7cbjl6zEDDNcbhUGHHA5G\/2Ud2b0yRtAx0ZmOVKEjawxHoesKRtzjqwo64g7+igqW0vt48zi08Khtq6QQHDUGf0UqHDzPQSqHVDoKpaVCq53j0GAj1FZRGQ6+Vb1759iA4V\/KVtFUjhjA4YcOER61gYPOLZVjyR0VkBXdreIOjkqVozCkNVaBhshzEHBw6DBncbiBgysdSuVwKBxO6GAqhx84DOiwFA4JHrrSkU+ZDqZ0lHKl40Lm5nSkonQQKFBGg4CDAGL\/4ePY\/uKrDDJ2vXQAu18+CAKMPa8cYkXndJ1q+wuvYu\/+w\/jg4z8wG+aDGOAxntBBD0JyDdTGanKDtQyuxsN3aAgjiS6M9HSnVolujPT1Gm\/Fd58VG8QFfH\/jBwD0JPvRM0xtsVYlBzAwnNpIc\/u945wb0DGa4WBjBB2ZtFcWxrBXpqFj\/JWTDCsdYRu5heU4PIXDUDdSBI7cf+b2ioIOGziM0CjZKQGWijX8i83icLXGUphUb4uVx3Z7bEzgyPt9KXJ\/X4pCpXQEQEcocIRYKnfSLA7\/PA4PNghGqlkZ6oaYxREEHAw6WNcKVznCgIPUDjd01IOAw4COAEuFYEMCB8tzrG5EkQ0daxpRuKYRBasbRAeLCJISdDwweaBDKhNkkVCRfULAIWGD1I6X97+OVw4cwb4DR9j68oEj2PvqYQYju14+iB0v7mcwQsBBiodttdiKx3hDR5yH4\/Q9mfkLGNBhDQebCHuFKR0TGCRlHS4pZDqmlY7RQ0oGoSNd4KBOFa9bxa1y8N1j1UwOLTyaRwrHP3tFmQ4GHS7g8EFHQLeKUjm88KhpqdBAMIetImAjMsNBECI6VYzVBR0+lYO3xkqlQ1oqUuVYErKJG83icM3j8KCDA0ehs1uFd6oo8BAKh1I6CDoCOlXsTIdurSwVwVEJHJHQIYDDgA4CjEDo4G2z+avqkL9SVzou4ugkUDoIOmQ249Abb2P7C\/uw66WD2P3KQQYb+w6+AVWH3hBtsPzaKwffwAuvHGKAQpbLSweOMHAhtcQGDf18vKGDWkAHh4YmvNIdJZ4ZHBifdzWgwxoOxqBjnIOkkwU6skNGn+tB0mnomLTQ4W6PTWcAmAEddqcKbepmA4cLOlzBUc1WiVY4uKUSOIsjQuEg6FDgkaLKkSOVDh9sUOeKBxxyzLkHG2SvVLIqChhx7sGFy17xgMMHHdJK0VcDOmpxU1zoCLBUaA+H\/wAAIABJREFUfNARS+VoRNEaXgZ0MJWjyVA6DOhgSsfEQwcBBwU9SZ1498PPDDuFKRsCOF49fIyFSQ8dfQuvvn4MdP4qtcQePMKARIIHKSRvvPU+C5e+\/7EZLJ0o6OgfGEBFdR3bw+RKRTUmqmhvlLKqWjbNdHwe95PjU8KgYyIyHZm0V5iKEcdimVY6xjWcmiGlwz9xlA8AC7NUhLqRxgAwPTiqqxx0nEebu7lUjnFpjeUZjnSBI\/f3Zcj5fRkKaJ8VGzq00KhsjXUCh2v4F7NVXKAhrwngIGuFtqnXdo8NCo5KhYOvHnTYqobv3IAOz1IxoMMFHD6FoxFLyFaR0KGrHQI6CtY0oYAGhK1ugIKOFdJemRzQQeFPgo4Dr7\/JAqNkq7y0\/3Wubhx6AweOvMlCpQQnpFAQcOx\/\/TgrGvhFKggBCuU8du49wMKnpHRQB4y0bnTgoOPxVDrqVPdK9bh2sPi7TKpZyysLek4OHhiXb+GDDrtldpyHg2UUOl6MbpmdtldGr1yk2jmTceiIP3HUs1TcOQ7LUrFUDhYc1WwVCR8cOtz7qnjtsWG2imepkNLhs1V+E5bjiGiNddkqwlIh4EgJOrTgKIePSixxAQfLcMTLcUjgCIUOQ+GgEGktK6l0mJDBO1XUtZV1+FY60GFlOCjHQcCxRAAHgQflN5jaIY8JONY0IX91I\/IN6KjkmY7bJwd0ECB89Nkplskg4CDVgrIbBBP7jxxnm78RcBAsvHb0bQM6CD72McXjDby47zC3Wfbux9sffMJCqfLnJhI6mlvbWcsszc+ImnGRydfp86mdtbG5dVwe9pPlQwzomATDwdKGjhd4q2vYVNK4Skdky6w2Ij1wPsduIPA12fFi3ePsWNkNtveN87U9AJvTEWc42CS+JxA6RtPNQqoGUza0lQ38koO\/fK2xnsph2CkqOGoBh2WpsByHZasw6Pg5KR1hwBEGG6al4gYOR45D61RRw7+c+6p4E0dVjsMCDgUdN+tKh2ephOU4mLXihA6pZgStnrohYUOuPpXDAA4OG3kEHffFVDoUdNSzWRy6uqGOV9ezkKjeFqvnN3Tg8EGHUDgK15C14oKOGuStmDzQQTDw2cmv8e4Jz1p5cd9rQuU4ijfefB\/vCeA4fOwd7NNUDqV2HOZqB6kjpHZQtuPIm++xThbqiHGpHeOpdFDHR3NrB2slrW1oxkQVKRw0qIwmpF5L\/3zQYSsd12CmIxI6tLxHJFhIwIixBoFF2PXY0DGJN4ULhI6o1tiw13XoiDdxNKBbxTWLw6dwXDCCo1LhyP35RVAZ0OHLcQR0q7DgqKdwpL5zrKZwOIEjPDgqVY7cfysDlWGvxLRVSOXwKR130dTRENhgr5nQIdWOAm3MOQuPGsDhKRx599WCaqnIdChVQ59EKmCDVA6udLhtlZtW1+MmaaOI4V92pwqDjjVc5dChQ6kdAjgYdKxtQv4aXemQ0FGG7EmgdMg8B21lv2PvfqZUvPTqYQYdZKMQHDCFg4DjNc9WkcAh132HPIuFoIMCqTTFlKaVTjR0XEsP+Mn4u0ZCxzjbK5MhSDrVoIMe2qlaGpPp\/sxDh65uyGNjX5UA4GAqR5jCoc3jsG0VARy5P7\/kQYeW4Uh151ifpeLqVNEUDpXhcAKHQ+GgzhVb5RDAwaFDjDvXWmPDgqMSOAzoiNkaKyFDrqxV9p5qFOihUTo2oIOrHKRw6NDhBA6CDwM6AlQOBhwWdIjhX4bSoQGHgo61wl6xgKNAh47VdchfVYN8UjqWlU4u6Hj3Iy\/PoUEH2SkH33jLZ6lI2JArbewmcx3UPks\/Mw0dkxEBxv87TUromMCJpFNxDDptDT+ZICLV76KgYzR2iq56sOFg\/99ZMIWDVgkacg0AjrRsFRs25DmDjktQ0OFSOH7hsFZitcZGt8cq6PB1qviBg8achwEHQUf+zea00bDgqLRVJHgUiT1VghUOUj7MThU\/cFjQYQCHUDnu47aKhI4ly7xJpAo+DNiQ8OFQOTTgMJQOI8vBg6MEGnoVrW0EFct0SFtlbRMIOFzQkbeS7JXJo3TQQDBSM2jaKGU6aP4G5TkoJMq6VByWioQNWukeup9meUh75fDxdxl0BM3rGE97Zfwfs9OfqP8FDOgYzXCwF4D5EUV5jaiaaKVjGjrGH2AUdOjgMNpj3qlCwGFBRwBwxAqOOnIceRIy9FUDDhs6Um6N9QVHS9zzODSVQ+U4YgIHDf\/ixYOjzFrRVI4cgo5bzImjcVUOpXQEWirSavFbKmoY2D01TOVQSocBHBw0SOHQVQ4CjzjQQXuqqOyGGATGzoWtQsChoMMAjgYDNPzQ0YTCtTzHQasEjkDoWFaGrElgrxBsUJD0xCcn+aAvGSSlVtlDR1WXig4Z9rHsYCFYIWghpYPsGtaGe+LTaXtFfwJfg8cGdFjDwSaiZVZBR4rb2tN29GEhUnotTpCUoGNKbW2\/+yrY2n60gOH6eR9skMphAIfZqeKHjjBbhY83V9kNH3BQloOrHGylICmbNBp\/4igLjfqAIwWFw2erlCIvRqeKneWQmQ4dOlIBDgYdcYBDa431qxzxoEMqHLTmMujgw8GCVY4w4OC2ig0dPDTqdarosMGOhcpRRMAhoEMHDgUdLNdRz+wVpnQw6LiENyZ4OBjlLWgwGKkdBBmkdpBaQaoFVzvCwUOqHPsOvMHGpBN00Kh0es+wAWEToXQMtXyGkSG+5bx89o8kezDU8qk8VetQy8cYSfapczoY7q1BsoNvM6+\/QNen\/wX\/BQzosIaDMeiYqCDpBEAHjUmfatAxZ9c0dMxIHTq8DIfPUonsVrkI6lSxp47KThUDNiR4\/AuHjegcBwVHvX1VUs1xKIXDBxxXkPc7v63COlaYyuFWOCRw5P5bOfJuKQfBhrJVaOt61iJLw7\/EEDARHJW2ClsjJ45WqTkcEjZo5TkODzZI5WBKh1I5vAyHrXBI6CjS7RXDVqEMB9851qdyWLYKg441DVi6hm9Xr6DDslQkcCxZ24gla5sgocMGjlDouGNyQAd1mHxx6ixTJygEqtpmxeAvGgJGe7H4FA5hqxCc7N33mlA5vBBp2OZv4wkdw721GGw4jq4T\/zv6LqxBsu0URoYHMNT+JfoubUDXB\/8rBuuPYbivHuzeujfQ9f7\/gr7LW5DsOI2RoQSGWj5Bz1e\/R+KTv8VQ47sYHmjDyGAnkl2X0F\/9MpJdF\/m14GfvNftKJHTEDZJGWCtkvURZK3q77PUTAB2khBB0kNoyV2uLNSaQap0rdH2iu1euCujYCTjBwQUTca8F5zgEcIgBYD7osCeOGpYKBUfDgMNSOAg6\/oWXslXSznEEt8bmsVHnWrdKDFvFy3CQtRIOHTkadDCVw5jHwSeOGqAh4eOuSiwJhY6wHIcfOAoUcHidKi5bJe\/+OuTeX4dCgg6CDVdwVLdS9GPLVvFDh5nfMJSOtU0GcNi2SsHaZhSsa0a+CpNqSsfyMmRNAugge4XUDhrkRWoH7buiwGPfa3jlgBiBfogyHkdVkSpCsMGAQ9gqNBhs98tc5aD3CprRQZ85ntCR7C5B94f\/CR3H\/gQdx\/4U\/Vcex8jIEPrLnkXnsT9D57E\/QdeJ\/4jhRDmGu6+g64P\/jd3XcezP0V+xEyNDPeg9dz86jv4xq8QX\/4jhgRYGKf1VL7J7aE32VF6zYBH2i\/ugw26ZnYYOTHromOJB0m9kHDoMW8VUOQxbxQYOqzVWTR3V7RQ6Vp0qGnQI2MiR0PGLsNZYax4HjTQ3KiDHEXdfFXtPFZXh0LIcWobDUzjKkHtzOS+pdBjA4Y0590GHaI0N3lvFP3FUKh3UGiuVDbXeWwMPOmohZ3H4VI77a6FDh9mlQsHRgE4VAo8A4LhJKR0BwMHUDa5wSJVDKh0eeHDgMKBjDUFHLZS9cselSbP3CqkdlME48elJZo\/IUClZJTR\/Q272JkGDzsmCeUEoHDLL8db7H7MR6B984m6VJeAYb+igB2LfxXXoevs\/oOv9\/xnDfQ3sGTk80MpUDrree2GVem72nnsAXe\/8B3Sd+D+YmkEvDLV9ia53\/gd0vv3fY6DqRXXvQMOb6K96CQMNx9S16QPzL2BAxyiGg41FiHRUSscYDQcjpYN+l1ClQ1NBApWOOCqIdY9zHkfEcLDZZK\/EgY5JfE8gdIymm0UpHQHAYcCGslTOQ23gZgFHLlM8vE3cjDyHFRyV6gatBB1UBS6Fg+0c683iYPuqGLAhMhwR7bHKVvEpHP5ZHGaniqZyuKBDAEcOrQI6XGPOfcBBSodQOEKhQ4w3l7DBbJUQ4NChw61wEHB40FGwTHan6KsjxxFgqUjY4GsAcJDNIiwVAg4JHSzPYQRIA6BjNUFHFXKF0pHpDd++PH0Ox9\/hszbkA9+1ktpBMzW++PIsWwkm5E6ztIsswQddo8FhVHRO2Q8GG3v3Y+dLB3D83Y\/Yz9N0U9dsDv1zSen44uTXGBgYQF9fX+zq7e1FMpk0n2pRZyMjGGr9HMP9zcxSIQuF\/pGdMtR2il9v\/QwYGQFGhlnGY7i\/BUNtJzHc38juJbUk2XmR5TrIlqF\/I8NDSPbVYSTZz9fhQXZ9+v8x\/wI+6BBKR\/auJGSm47o9QFRNOHSMYZB0vpj0GaZwyNcCoSPGMDD7Z53QsSd8IimDjik+p+MbcS2TVO6Lgg7DVomhcASNOPdUDjM4KhWOnH+5DCondFgDwJwTR+MChyvHYSscRmtsGHAIdUOHjpvLUWTkOMJsFb5zrAQOf6us31ZxdarYKgeHDq9bRQ+OStgglUOWDR1xO1V0S4WyHLwCoMNSORh0rBMhUgkd6zzgUErH2kbkk9JB0LFKQMedmVU6hgYHcfb8JbYBm\/7ADzomUKAcBoEHgQPtxUKKB9ktUvkgyKCS16lT5eWDR\/Deh5+rn6P3j4KOo29\/AAKiwcHB2MBBcJIWdJjPwOmzcf4LRELHnpFI4CAgGQvoUJ0raWxtH9W5kkr3Cv0+oUqHzHWkARY2aMjzdICDfmb2FAcOmumRGegwFA6zUyUSOCyVg2wVJ3TYCoeW4eAqBweOnP8aNI\/DVDlMS4X2U3HsqaIsFb6RG1M5XApHaKdKGHBolooGHTm3SOgQsEG7x8rshr5qOQ4FHXfLttiQeRxM4bBsFWGpEGzw8sKjJnAQaHCFQwIHrfkPUFiUqxzhwGF2qpCyIUsCx1KCCzs8GgAcRRp0FFrAEQQdOcvLkJ1h6CAVoa2tHR989DnoIX\/snRM4HlLH3j4BKto35cNPT+HjL75iO8\/SgDDasp72ZCF1g1QOao8lKHnrPZ4HoUwI7VJLn0HvEfQ58nXKezQ1t2BwPJSOcX7ITn+c+RcYE+gY6xDpC7xtlVpX49ZYQgc9zKcCdBCwzLoKoOOPUlEw4louZnusl+MwbJUYI85ZcNTOcMhz1p3iznFwW+UyCDio8slKkeUYAOZXOYKDo\/kiOBo8AMxvq5idKiHQcTNBhwceZK2wUtAR3qli2ypFd1eBSm1hH9dSoW4VDTYK7q1FgWMWhws2GHg8UIc8HTr0sKh+zOZwaNAhgMNTOBpAwOGDDgUcWpZjXRMIOGQVrm2GDR3565qRR0HStY3I05QOBR0XzRZO83+u\/WdkLdB\/7ce1JAg8Oru6UFFVg\/LKKpRXVkdXRRWqqmtxsbgUn586jY8\/\/4pBCNkv7330Od7\/6AuW\/fjo8y\/x6R++xpnzl1FZXRv9vuyzq9h3ae\/oTNlamVY6\/P\/\/YSpcMaBDGw4m7ZV5E6R0xIUNed9YQQd1sMyTSkbUOsFKR\/buqwg64sBEKnDiQYcHHIbCEWvEedQ8Ds1S+bmX31DAQdaKDR0O4PApHBGWioINl6XiUjgMW0V0qrgyHP\/m2So6bJDKQVXI7JUUbBUBHBw6\/JaKzHKEBUelwhEbOgRsEHAo6NAhQx67chwEIAZ0cNiQ0GGAB4MOnuGQloqEDb5y4LCho2B9M\/LWNSFPQEeesFcIOrLuuoSjGYYOelAPDPRjaGgw5SJg6ejoRFV1HS4VlzG4+PrcJZw+fwnnL11BWUU1Wlrb0N\/fD7Jy4n\/GUFrAMQ0dUwEx\/N\/RgA5tOFhK0DEFlI44g8HYPS8C9DCXmY3QdaKhY8\/4Tw9NdcR5nPtTUjriggeHDg84DIVDBUfDB4A5Z3GobhUTOHzhUQEbBnS4gMM1AIymi9qlbJUrUNDhslVCcxzhrbGqU0WqG7QK4KC1gKBDt1L0Yys4KhUOuUrA0Fd9TxWV3zAUDql2cJXDp3Ro+Q1lq2jQkftAHZaSvSJBQ18jOlV0W8UHHZHAwdUOAg4DOtY3I1+HjrUN0KEje5ygI64q4rqPgIVyF2SDEFywe\/oJZAbYdVpdP5epa+lkOkgdampqQl1dHerr68e96HPb29v9T+Nr5IoBHWI4WPaOQSjo2B2d6YjKc9DrU2FGB0EHKSahoKEBicxjjMWaTqaDvmech\/pkvyez0PHT8yDgMKAjRnA0HeDgCodQPCzoyGOdKtQaa7bH+lUOR45DG3EeDhx+W8UbcR5iqZDqIfIbtLpUjsW3VKDg9kos1UFDHts5Dk3h4NDhH3HOOlVoCJjdraIsFQ04hLViQIcjwyHVDbkSdCyhGR06bNCxS+UwFA4Kj\/pVDqZ0KFvF61QxFY4mFK1vZhUEHflM6SC1owF5a3iQlNkrUwA6MgUP6b5vOtBRW1uLU6dO4auvvjLq66+\/Ns7t18f6vKur6xrBDPPXjISOGPZKFHTEAY5RtcuOYefKNHSMP8j8u7jqRSr35f8kQOUYTY5DzePQVA5tHoeyVSzgILWDQ4cXHHVuVW+rG\/LcznA4bRXHxFE1jyOewkGwoaBDUzhybqkAQUf+bQ6lw1Y46NyAjmoU3eOHjqCJo16Og6CjlpVsj5WrM8ehKRwEHbkP1IKgo2hFvQkdIQoHb40NBg4OHZ6lskTLbxjgYUPH+maQrVKwvkUoHdJi0aBjRTmy77o8LvZKug\/4yfhz6UBHeXk5CDDOnj1r1JkzZxh00GtjWfS+9mcRwLS0tJhP42vkzAcdz\/fBUDquMei4gWZ0aGpGmOoxFgqHfI90lA76npNdxYj6frTZW+agI47C4etUCZvFoYVGtRHn+jwOaafYa641k8OvcDgsFaVwaNNGXcDhslTi5jhcCodhq1SAoIMqz4aOSOAgAPGgg0CDKRy2uiE3dHOpHCI8KoGD1ijoINhgtawOhTp0hCgcUVmOpetEmFTM4nDnODyVg9QOpXQI6Mhn0NGCPAqTMrVDQMfqKuRMQ0datkw60FFRUeGDjtOnT+Py5csMBFpbWzFW1djYiHPnzsEGD4Ia+oxr8Z8BHWI42ERDhwyHprIujBgOFifTQYPBSHGJ1bliDfaS8KDWqNcpD6LdEwgdIcPB5tBmbzT0axIP\/gqEDu07B0JHnHBp0D0+S8WV43CMOHe2xkbkOJTCoQVHFXT84jJyfnEZub\/UVA7fALCYlooLOEL3VNEsFRp17guPesHRIIVDAkfOrRXI1aCDb1dvzeOwFQ4BHEzpEGpHKgoH2SnSUlHQEWGr6MCRu6wOBcvr+C6yLuDQgqNc5XBbKgw41jVh6TpP5TCUDaZ4cEtFWisMOgg8FHBQnoOUDhs66pA3DR1pAQcpL2MFHaQ8UNYiE\/+Ki4tBUKOrHdPQ0YzZT3Yg69kEsm2lIyrTMQVCpGSZxIUONhhMmzg6mZWO6X1XQvZsMTIcLuDwKRx8XxVj0qhqjU1f4SDgyPlFMSs2cTRucFRTOYJzHA5LRageYVvVK\/jQVA4\/dHgKBwGHhA6CDRYmtVWOKOCQ0OFSOQyFg1sqPtggxeN+Xio0SkFSn61SB4INWXkEHS7g0GZxSJXjpoAchw86XLaKsFTc0MFhg0HHhhbkqTApKR0EHdVM6ci6e9peSdXCGSvoICXi\/PnzqKysRFVV1ZhVWVmZARsSPKahIwQ6IuyVqDxHyiHSCZ7RwQaDxbFXxrBzhdSRQKUj5LXYI9An8SwPslfGfLM3yn4Y0OHKcbhUDgkZ+hoyAMwLjnqtsUrhoFyHAI7FBB2\/tPdTkedhtkrEADCXrfL7UvDN3OLlOPywQR0rfuCQ4MGgIxQ4hKWiqRxS6eCh0egBYFLhMMBDAEe+3rGiAQdXOGoVbEjoyF1eh6UsPNoAuU29nDjqwUYDblrbyErvVGHHZKsIlYMpHS7gWOdXOYo2cJWDKx0COja0IF+HjnXT0JEqZNj3pwMdlOkgZUMCgFwJPMYyyyHfS76\/vk5nOtzQMW\/XMKLmdERBR8oh0rGEDmG5xFE52D2yXTaO0jGG0JEOcNDPEHQE2heTGDT075zyNNIgO0UPmdI9xkwOUjXs0qAjfUuFOlXCgIODRyh0yLCovv62BGo\/FbJUnLaKv1PFuXOsz1IxO1VCoUMoHBI4aC0kpSMQOqpVhoNAQ6\/Ce+N0qojwqCPHQbAhSx\/+JZUOFhzVFA4dOpbo0BGgcDihgwEHhw4KjVKOwxketVWODc1g0LGhBYXrW1iAtEAAhw861tYhd1rpGFd7pbm5WQVGyfYY7yIYIQAhYLoW\/xmZjudMe2VCoCOFKaQy8xE1GCwOdFCeI5XOlawJhg5SR66GaaQpQ4cOF2HHCjrs9lgNNtSusT9zhEfjdqq4oEPkOKSt4oaOcIXDgA7fPA6HraIUDi3HMcbAsfjWChTY0BFiq0iFg4Cj8N4aFMrAqFxj2yoecDDw0BQODzo8S0UHjtzl9ShaWY9vscmj3vAvT+XgCocPOiyFQ6ocPuiwgYPOU4SOvDXVyFlZjml7Jf5Gb1LxSEfpoAd9T08POjs7QW2r4130uTTj5Fr9p0NHtpXpiISOSZDnIPAYK+ig9wrLcOivqcDoGMBHOkoHhVB1xWCqHmcWOiKB4wKcGQ5XcFS0xkZ2qljAwcDjl8VY\/Mti5KkAaThwUIYjOMcRU+FwBkdNlUOON\/cGgAlbxaFw5NxWgcW3VSKf9lyRSkcEcPiggyAjAjgMS0XlOMKhQ3aqKNggxWM5r5zldSik7exJ4VjNN2\/zgMOzVSKhQ6gcHnQ0oyjAVlEqBykdG1pAKodP6VjfhDyyV0jpGCV00AOUHr7XYtHvnvIus9fq036S\/N4GdJDSsZ23zM7blQSDjpAgaZS1Mh55jjGBjhcBUjpow7kx6VxJEUTSgQ4CoKkKGvr3zhx02MAxBsFRL8MRx1bh4VHKchBwGNChWynyWJvFkRJwuFpjYwBHSrbKbRXIua2SQUceQYcBG3Iuh2mnuICD1A4GHYbC4VkqcYGDNnKTCgetBmxIi4VBRz1yltcjf4WADrFjrAcdpsqhwCNE5WA2C+U6QhSOIgEbhRvDoIPaZhtHDR3Dw8MYGhq6pov+BtP\/ps5fQELHnCc7kD0FoSNK5aDX49orU6lz5WqY0UHwkZFppGS7hGU4lK2iB0blsR0cdSkcLktFC46SusEsFREgVdDxq2iFQ9kqPkvFoXDEBg6zNZYBhzX8S4VHfSpHpQIOUjpyb6\/0D\/+yQqMyy6FsFbJWRLmGf+n7quitsbxbRVM5HuA7x+rQEQYcZK1Q5WnQEQoc6xpxUwzgWOICDttWIfAIgg4VJrWg457ilIeDTZ1HzfQ3nf4L8L+ADzpEy6xSOoK6V8bIWpkMk0gJSkjpIMUh1mCwFJWMKCsmHaXjamiXJegInNERlteI85oBHa4ch4QMfQ3JcXi2SlhwlNQNr0VWwoZcc13Qoe2pEgocro3cYk8c9WwV\/4jz4E4VFiAVtgoBB1UOQQfZK0ztEMFROQBMC48WUouszHJEQUdEcFTmOAg2eNUzpSPYVuGwIaEjd0U9lhozORwKhwAOBR2anSLVDb42wwkdLMfRAqVySOjYqNsrrcjf2Io8Azrqmb2yeGUFsqahY\/q5fA38BQzooEyHba9kGDrI0pAlg6GprErpCBgOFkflYPfIzpWxapfVBn8FQoe4JxQ6AoaDsXZZ2aGiDdrSrQvjeLLdI757KHTE7VRxQUgQdLBOlcDgqDbenCaO+lSOMODwYIMpHZqtwqGjBLmu3WOVraJ1rMRUOVKdxaGAI2DiqN6l4gIOBh63V7Jt6r1R50G2iqduSJWj8D65n4o34ly2xyqFIyTH4UFHHfKkjaKvwlJRsEFKx4p65KyoR5GCjnDguEkfAkYdK3atd0CHCI4q4CCFQ6sCCR4bLehY34i8dQQdNZiGjmvgaTv9K7K\/AEFH1uPNYPaKCJLO2zEIpXQEZDqumjyHUDkIXvSgaOjxGCodocARMqNjFrXLxgEJCSaTcM3YjA7DXtFUjsDWWFI75FhzufqAIyDHERIclQqHhI4cGzpiqRyOTpU0bZXA4CjN5bBtFUvhkMCx+PZKFDClw1Q5lKUSoHAQcHjQ4Q0ASz3HQSpHPfKW1ZtZDhEctYFDQkfBKn9oVGY4SN3g1QQJHXq3iq5wkMphKB16p4qe5dCgo3BjKwpEkdKRu6EFuTQgbH0jcqehY\/pRfI39BSKhI0DpiIKOlOdzZKBVNpU8x1QKkZJyYqgYkxAo4ny\/zEOHBhw8x+HoVnFZKprKweZwUIbDleOIBRwlPEj6qxIs1u2VWMAxihyHNW3UHxwNsVW04Ki0VQg2ZOXr0OG0VESLrLRVBHAw6KDR5tausUzl0IZ\/yXkctq1CodF8ARwGdCjgoI4VzVpZ4Skd+UHQoYCDwENAx3ox8lypHBw0JHAo6FAKRzPrUqFOFV3h8I4d0LGhGbkSOtbWYPGqaXvlGnv2XrO\/blrQMUXyHKlAx1QKkV7TnStxLRcJGXINVDns4KgBHGKbehdwWMFRNZPDsFU4aBBsyMqjbhUFHNrEUecAMFPlyDUUjszN45CdKgo4KM8hoGPR7VXIu7PKGPwV1KnCbBUNOArFXirpWSr1BnD4oUODDc1WIWuFKncl3z1WqRtiAqmucDDoIOAQpawVoW4Y0BFdmZYMAAAgAElEQVQLOFpRuImXT+mYho5r9qF7rf\/iBnQ8l8C85\/tg2CsOpSNK5ZgyrbJ7eWcLC5HunjohUgq7kkoQR02YzPdkrF2W2SuaypEOcMQPjorWWOpYMYCjWIGGBA5aTehIYdrovxJk6CXGnIcMAHNnOMLHnBNw+KBDUzkW316F3DuCoMPKcRjAQfZKLSu3pUL7qrg7VVR4dBm3VQg4OHQQaMiZHBp0aApHzooGsFrZgCVrrDwHUzm4umGoHAZ0+FWOJRpwBOU4mMohgIPAo4BKZjo2tiDXBR33TnevXOsP5Gvh9zeg49mxgY6UrZWxHH2uDQtLJUQamuGwwqWBwdAUsx7p5jmuls6VjLXLmtBxEXl6h4o8dikcQuXw5nHED47q8zhkhkOHDXmcy5QObfiXS+EgRcMuBRzx91TxWyoacNgZDjoPyXFIpYOgI+eOKlB3ispxsC4Vy1Iha8WAjloU3l+LAiq7W0WHDXmsOlVoJocJGxI68piVEmypSJUjZ2UDFq9sQCFBB4EGqRzKVvGgQyoccl2yvonlN3SFgx1vaMaSDVqnipHf0CwWGzo2tSJ\/UyvyAqGjBG9c7L4WnjvTv+M1\/BfQoWMeKR3bLaXDDpJmwFpJpVtF3qu6VjTIsK\/FgQ5SOW6YQkPBCFSuhj1XSIEZB+i4iDxXpwoLjgaHR+NsVa\/sFGsWRxhwEHhI6Ahtj7WBw1A5QqDjZq81loAjpXkcETkOgg1Wd1Rh8R1VoC3qTeiIoXK4oINlOTSFg6BDAw6W4XBBB83f0PMbwlKRwVEOHA0g4JDQwXIdCja8DAcLj2q2CocOh8JBNgsDjhjQ4QAOUjsM6NjQhNz19ciVmY57S\/DGpWnouIafx9fEr25ABykdYdARAzgmi7VyteY5SGW5GvZcIegIbZd1tcGmco3Bhgs4IoOjokvFleOIGxzVMhxS4Vj86xIs+nUJcn6jqRy+1li\/wkE5Ds9WCQEOslm08KiyVtQQsPSDozZwLLqjCvkEHY45HHp7LFc6hKVyv6Z0EGjEbI3Vg6O6wkHAYUCHsFQ86PCAQ4JHrgyTWraKVDaMdUMzljqyHBw6uMrBrBWXyqEBh7JWNnOLhUNHK3KZ2kHQ0cChY3UFsu4twbFp6LgmHrzX8i95oY23zM59sgPzGHT0B2c6YkBHlLUioUTO5qBVqheprLaqYZ\/HUTnonqk2FOxqCZFmtHOF4CT2nipacDQ0x+EADrmRm5fl8AKjCjYIQH7Na9Gvr2Dxb0SOI6at4gHHGARHAywVX4ZDC44q4CClQ6gcBB25d4VAR5CtIpUOBR1hCgdXPBRo6HkOBhwNyFve4HWrGDmOeuSspPKDxxJlrQTbKgw+CDpI1dDBg2U5POAocgJHiwqP6sBRSNCxmZSONuRR26wBHbVYvLoSc+4pwdFp6LiWn8fXxO9+vnUQcx5vxtynNOjYqc3p0IKkYxUgzcgUUms4WFzoIFgx8hxh29rLzEYKg7\/C8h\/zAgZ\/GVkP6x76rr4QaZx5HZPsnm\/GUS3idqrY70U\/54QOV47jX3iHCgeOgNbYWJ0qFCQNh47FBB2\/DgiPOiyVVLeqV+pG3OFft9ImbnwjN9WpYoRGZdeKBxwEHgQdOXdWqdHmfnVD5jm4uqGyHDp0yOyGXC1LxalwEHhowKGgwwYO6lhxAAflOgpYrkO0xtIgMJ+t0sRgg4BDQYdlqZDCQcAhi7fGep0qsmOFrZtbwYGjDQWb2xR08FyHUDrW1SJnTRVm3lOCu482XRMPnulf8tr9Czx+pgcztjVj3tOdmPdcD+Zt78c8CR27hzFPZjrGQOWQKkimVY5UrBU2n8MKihoQor0WBhDpvGbARcggMP2+qyVE+o2dwAwbFsbyPBZ0iAFgqQZH\/QpHAHAIhUNXOkjtyLVVDhdw0LVY4VFzX5XAAWCWykHb1IcrHAQcZo5DVzoW31nNtqpXwBEQHHUBR8EDwZ0q9iwOQ+kQlgrBhqoVDWrqqJ3jMMBjVQMWr2pA3mqe5aDhX1HAwaBDAw4ZHpWwIdcg6CBlwysBHZvbkCfDpBubkbuBBoTVMehYuLIMNy4vxotfdVy7T6Tp3\/yq\/gscq+hDztNNmPV4K+Y906VBxxCfSKpBx2RROciCsa0U37lohY1SO8hamUrzOVSINI5qMclbajMaIiV48UGHK8thQEeAyuGwVfxjzqMUDrJXroCAY9FvbOjw5zhY54oCDmGrOFtj089xkLLhgw6fymEqHAo67qzCojur2Y6xCjoMS6WGdagQcPig44FaFDxQx8oe\/qVaY13BUaZyaLBB4LGCl5fjoJkcfkslZ1UDeDUiZ1UjCDhuilA4pNIhwYOpG6JjRcKGXO32WJfCQSpHwRYOHj7oWF+HnLXVyFlTgeuXlyD73ov4nx67gv+yqxx\/t7MUf7fjCv52ewn+9vkS\/O32Yn68vQT\/WdaOEvxnWa5r8jWx\/s2OElD9tVFX8Nc7tNp5BX8t6q92XsFf7SzltasUf2XV\/7WrDHb9eFcZjNpdhh87qxw\/3uOvv9xTjlj1QgX+UtSPXqiAUS9W4EeBVYkfvViJH+0NqJeq8COqvWKV5\/b6chV+pKoaP3q5Gj96Jaxq8KNXtNpXgx9loP5yXw3Gsn78ag1Srv01+PH+Ovz4QD3+6lAj\/seXGjHz4Tp845EmXPdUO+Y92415z\/di3vYBzNtpQUeEynGdeF0qGVGrUjomcAqpzHOQQhGkbKjrZLlIa2WMVl29iHtM35WFSK9l6IhruRjQYdsqBmyIAWBkobiKQQefxUEKh5ff0I4DgqO2wkHAQZWjKx0OlcPLcYTM4rCCo\/722JDgqEvliAEcZKssEsBB0JF3t2iTNYCDB0d9sEHWigYcBB4u6Ahrj1XqhgYcBB4KOhyWClM7GHRw4Fi8qhFFa23o4FaKDhrseGMzlm70OlVsW0VCR5EVHGVZDqVycNBQ0LHFUzrySOnYyDtYctbVYPGaSixeVYZFy0sw9+7zmHn7acy87St889ZT+OYtJ1l945Y\/gNdJfOOWk\/ijW07iG7eexB\/pRdfZ+Sn80a28\/t1tp6DXjNtOYcZtX7rr9i8x4\/aveN3xFWY462vMuCOoTmPGnVrddRozjDqDGXcH1D1nMIPKfl1ev+csZsi69yxm6HXfOcww6jxm3HceM+636oHzmPHABbOWXcAMoy5ixjJRyy9ihlGXMGNFQK28jBmyVl3GDGcVY8aqYsxYnaFaU4wZY11rizFDL3p\/\/dx5XIIZ665gxvoyzNhYiRlbazDn0UbMe7IV854WeQ42GExCB1krw5i3ZwQZUTkyFCBNxVqhexVYaDaK89oYwQaBQ1zIsO\/L3j31B4LJYWUZ7VwxlI44wOHqVLFyHG7goBHnDpXDsFU8hUNCx2IJHQ7giGepOBQO1aWizeII3FMlKsfht1Vs4CDoyLmr2j+Lg6aOuhSO+7m6IVUOBh1p5jgYfCiVg6DDGwBmWCoEIZbKsXhlI\/Ip16ErHSK\/YUCHBA4dOrQchw4cNnR4lgrZKwI6SOUQlbe5lVssm1qQyyyWBuSsr8PitdVYvKYCi1eVYvGKYixafgmLHriARQ+cw6L7z7K68f4zuPH+s6wW3n8WCx+watk53PCAo+j6svO4XqsFy86Dar6qC5i\/7ALmL9frIuYvv4j5Ky5g\/gparVp5EdetvIR5Ky4hm2plQK26hOxVl43KWnUZWav9NXf1ZcxdcxlzqFYX81pTjDlazV5bDF4lmL3WqnUlmC1q1rorYLX+Cmb5qhSz1pdi1gazZm4oxcyNZe7aVIaZrMoxc5OozeWYadeWCswMqq2VmBlRs7ZWItWaTT\/zYCVmj2HNeagSc9OuKmRtq0bWwzXIerQOWY83IvuJFsxjKodmrRibvQ3jugjoGE+VI461EmWpyNfJWiFFZm5YcFQDkXQyG0E\/Y8NE3HP6rr4Q6SS3USRk6GvGO1cUdKRrqVjAIWdy+AaAhSocAjaEpSKBg1bWwWJtVS9HnPugw2erUIYjJnRYOY6wnWP14V\/SRtFXXeEg4KBaHAAdPpXDUjgkePjmcegdKvI4IMfhWSsCOlwqh6ZwkK1CKgcVs1gkdIQAx9KNLVgiSkGGAR6tIOAwoEMpHG7gIPDIl7mOTa3I3URqRyNyNtQjZ30NFq+tEuBRhsUrrwj4uMwBZPkl3Lj8oqhLWLhc1IpLWGjUZSxccRk32LXyMm5gVYwbVhbj+lW8FqwshqpVxViwqoTV\/FUlMGp1CeazuoL5q0WtuYL5a0pw3ZoryF4tio6dVYrstVqtK0WWUWXIWleGrPVlmKvVnPVlmLO+3F0byjGHVQXmbBC1sQJzRM3eWIFZGyt5barELFdtrsIsu7ZUYSaraszcImprNWba9WA1Zj5Y46+HajDzoVqzttViZkTN2laLdGr2w7WgmjPGNfeRWqRdBBqP1iPrsUa2qyxTOAg4WJZDTCLVrZVdIkT6QrTSEWWnyNeVrULb2U8Ca4Ue9lMJOth29leBtZLR8ecyjMrslUiVI8xSMbeq9wGHS+HQ2mNVhsMBHYt+WwoGGbbSoXIcIbaKNotDzuXIcakc6QKH1horoYOrHBw0JHCw9a5qFKgAqWer+KHDUjmW1aFgmWiJZWpH8MRRw1Lx2SocOGhfFSpD5bCAQ4cOZrFQkNQFHHSNqRwecBB4+KBDwIYBHTGAg0EHWSwKPFqQs6kZOQw86pCzvlaARyUWry7H4tVlXPkg9WNVKRatuoIbWZXixlWluHG1uxauLoNeN6wuww1r\/HX9mjJQLWBVjgVryrFgbTnm27WuHPNVVWD+Oq3WV+C69RWYt74C2euoKpG93q4qZK+vQvYGqzZWIWtjtarsjdXI3lSNLKNqMHcTrzmbamDU5lrMsWtLLeaoqsPsLXWYtdWqB+swS1U9Zj0o6qF6zDSqATMfasDMbY56mDIKVj3SiJmsmjDzEVGPNmFmRM16tAnp1OxHmzD7MV5zHmvCWNXcx5qQ9fgo64lmZD3RgqwnW5H9VBu3VAg42OhzynLo8zmS3FqhzpUMQUcqMznkvb7AqCNUKpWMqHWirJXR2CtXy1Cw8YEOB3B4XSohOQ5HcNSf43BYKnGB4zelYNDxOytAGgs4RqNwRAVH\/ZYKQUcYcNx4VzXy7vH2VCHYMICDKRxecFQqHAQcDDqWiRHnruBoTIWDrBUfdFiWig0ci1aRxdKEm1zQoWwVDTo2WdBhAQdTOlzAIcOjmrUioYOpHZvbkEtqx+YW5GxsEuBBikcdWMZjXTUHkLWVWEy1phKL1vK6cW0ljFpXiRu1WriuEryqsHBdFW6Qtb4KN6iqxvXrq3H9hmosWK8VnW+o8dX8DTWYv1FWLeZvFLWpFvNFXbepFvM21blrcz3mba5jlb25Hqy21CPbrq0NyBaVtbUBsuZubcCcrY1mPdiIOayaMOfBJsx5yKvZDzWB1bYmzGbVjNnbmjFL1sPNmKWqBbMebsHMR7R6tAUzjWrFzEeteqwVM1m1YeZjbZj5uKOeaMPMJ9p9NeuJdoymZj\/RjtlPtmPOGNfcJ9sx96l2ZI2mnm5HNqsOZFNrrIQNapGlHIdqkxUBUqlyRFgrMushlYywdbQqRyxr5UW+gVsUcChrRbNPnDkO8XqQTZLu9bh2in4ffT\/dopjKxxnvXGH2Cg39kmXM4ggBDoet4gcO90ZuMjQarHCUYpEADoKOHA06vOBo\/AFgcVtjmaUy6uAo71ZRKsdd1Vh0VzUIOnLurmGg4QMOFRzVoEPAhgcdAQqHYx6HzHEwyGDhUVPlMJSOCOhgFstqh9KhFI5mZass2dQCWUrtsKFDzOKQA8BcOQ6Z5yjY2o58qXQQdGwm6GgVaocEjwZut2wQygepH2S9aLVoQy2M2ijON9ZhkagbN9ZhoVH1WLhR1KZ6LBR1w6Z63LCpAddvasACvTY3YIGqRizYrNWWRiwQNX9LE+Zv9Wreliaw2tqEeayaMW9rM+Y9yCv7wWYY9VALsvXa1oJsVa3I2sZr7sOtmLutFXNUtWHOw456pA2zWbVj9iOiHm3HbKM6MOuxdsx6jFZeMx\/rwMzHZXVi5uOinujETK2+qY67MPNJq57qwsynus16uhszRc16uhtjUbOf7sbsZ7oxZ4xr7jPdmPtsN7JGWdnPdoPVcwlkM9Do9WBjBwVHB72OFQYccj5HZqwVqVykso6lykHQcR1ZKy7ocGQ8fHAxiuFgOkikMhwsNM8Rx3KZRPfEDpHG7VSRlopc2XAwCRzaxFFP6XDYKpbCwWZx+LpVAhQOpXIE5zh04CDoWCyhw1Y4fl+GXDvHYVkqagiYslVCOlVcrbHGxFExj0NMGzUsFatbRVoqBBy8arD47oD2WNEWq9QNOjegox75y3gZszhCgIN3qvhhw1A6LFtF5ji8tQmLV\/MqWq91rQjg0HMcEjbkWrTRy3BIW0WqHAQchTI06lQ42kHAwaFDgMeWNuRSCfjI2SSsFrJbNgkAIdtlYwMW27WpAYtYNWLRJq02N2IRqybcuLkJC121pQkLWTVj4ZZm3CDq+q3NWLBFVgsWbHXUgy1YwKoVCx7kNf+hVpjVhnkPOWpbG+Zta0P2tnazHm5HtqoOZD\/ir6xHO0A199FOVXMe7YRRj3VhzmNdmK3X412Yraobsx\/vxuwnzJr1RDdmPZlQNfPJBFQ9lcBMVT2Y+VQPvvkUX2c+3YOZT\/ea9UwvZlo169k+RNZzMe55tg+zZT3Xhzmuej7gun5vyD1zn+tD1vN9yNouVjoOqoB7sp\/vgypSNGQRbFBoVLbH7kpiHgGHpnJEhUhJ6QhTN\/TXlNKRRpYjjspBUBKlcNDrBBxT0VpheY4pGBq1FRkKkcaGDgkR6ay6yuGNNyeVwwEcSuEwcxw+lcMVHNWAQ6kcojVWD486oSMOcFitsX7g0LpVnDmO1G0VZqm4gIMCpAo46LgGN95Vw\/ZRMWwVpnK4cxwcPOpRQMCx3AEd1sTROAoHgw6lblDHCg+L2rYKBw8OHItWNyGfWmdVhoPUDcpzCFtFUzgUdNgKB51rKoeCDstOYSrH1jYPOqTaIaFDrDmkeJDVQkUAwo6bkbO5GYsdtWhLM3i1YNEWUVtbsGhrC24U68ItLVi4tdWsB1ux0Kg23PBgG65\/qA3XP9iGBbIeasOCh9rN2taOBao6MH+bqIc7MF+r6x7uwLyHO816pBPZqrqQ\/YioR7uQrddjXch+rJtV1mPdYPV4N7KoHuvG3MepEqzmPJ6AqicSmPNEArMf7+H1RA9mPymKjuX5U72YTfUkX2c91YtZT4t6qg+zntbqGXFM6zP9mPmsKP34uX7Meo6uD2DmcwOYRfW8KHm8XbsmX0txnf38AGZv5zVn+wDGuubuGEDWGFT2jgFk7xhkxSFDgIYOGzsFcIhhYNQmy4EjXOnQoSLsmICDXqc1FXVDvzdK6YgDHBI66Ls4VQ6X8jGGrbLp5jno566WPEes8efpQIb9Mww6xDwOAzoIMOzSZnHIThUfcIQGR\/l4czb8yxUcJQj5Lc9y0HojHf\/OsZGbrXCIcwkaahaHGnMeonC4LBVD4RAZDis46rXGWpaKAzgkdORSmFQbcW7P4zAVDlI8hMpB0EGQYXSqBA0AC1Y4JHTQhm6hwCEUDql05KxpYrvGuoKjEjTUurkVSzZbSocFHAQdhXGAg6BjazvyyGZhwNGO3K3tyNnSBg4eBB+8Fm9pha+2tmKxqEVb28DqwTYsEnXjg21g9VA7bnyoHQsf1IrOWXVg4UMdWLjNq+u3dUDWgm0dWLCt06yHO7FAVRfmP+KoR7sxX9R1j3Zj3iOiHu1GtlEJZD9m1eMJZLPqQfbjvLKe6IFXvch6ohdZT\/Ka+2QvZM15sg9Us\/V6qg+zjerH7KeteqYfs54ZMOvZAcyyi8HEIGY9p9Xzg5ilagiznhe1fQizVCUxa8cQZu2gNaS2m6\/NFPfO3pGEqp1JzImqHendM3dnElm7tIo6p3sd92TvSkKveUzNIMCQJZQNoW7QyHM+9jwcNlLJckjYkEqHDhJxj6OAI67KIaGDda24AMNxzWetjBJCDHsl5swOlueIY49MASVk1HmOuJaLDh1qq3obNgIUjlQ6VRRoEGy4gOO3JnAw+Pgdh44ctoNsyM6xcVtjXfM42L4qlVB7qhjAETLinA3\/igEcd9fgRlGLKUwqocPVHmvbKgI2mNIRBh3WLA49NCotFbWuakBuDIVDAodcC8lioVkcUuGg1adycOAwoMMFHE7o0GwVARsEHLw6BHxw6Mjd2sbBg+BD1OKtbVi8RRQdq2rH4q3tWPSgVQ914Ea9tnWycwYYBBkPdXq1rQsLt3Xhhm2dvB7uwvUP\/\/\/tnXlvHUd2xQMEEZdHcXkbKVkzny9BAK8ZIIg1sjFeJFkTWeImUhS1O5PvNLAlJ7ZkayVFUqS43eBU1a2+VX27u97je+KC\/HFR3f2aNMEW3D+ec+6tVRqfeUNjqOk1Gpt2x3xtZo3GZtdodHadRs2KYwaNdRqd49qg0fl1Oj2\/TiNz61QztUG1eaUcYNRuvCVbm1Rb2LSAAcjA8aJeQzc3CTV4c8vXwM0tCmrpHQ342rbHAWhs06lbrpa36ZSs2zt0ytU\/8THDhVl36dSdXToFaIjr3h6dQt13K59rq3LPwL09MnV\/jwbu79Hggz0axFpWXdwz9GCPUMOyHkbn8jM+ju6pPdgjWd468ZkNN\/yL1Y0AOKqho0zZkJ8xbHSrcqQARyp0HFdr5aTstwKr5b1YK1A9oG5kCkfBiHMPHXbiqFE5\/kVMGjXHBTkOv3MstqwvAA4RHA2Ujg9\/pMaHP1LrozLgsHuqQOXIKxzCUtGAQ8txaBNHC1WOqD02slSgcDT\/wxbAA8cYCBbkNzjTEQMH2yoCPHib+qA91gFHVY4D6oat3z10ZPkNns2R5TgYNrDCYpm6JCwVFTheGIUDwGGgg9WOGDquWpUjp3RwjsODBgMHryt05toKTV17bcooHlA9UNfc+r0FjNa112RrhVrXVqh13Vbz+gr5ml6hJkCDa2aVGjOrVJ9GWcgw68wbqkc1MfuGJmbXaNwV4CKrdRqbdTW3TmMOLsw6v24AY3QeoOHqxgaNujp9Y4NGABTzDBViXXhLNVMWNAAbtUVbAI3a4hYNo25GtbRFw77e0dCSq1vvaNAXAGObBm5FtbxNA752aGA5AwsGDLMCJuIKwGKPTt11FYDEvgWN+1g7q4H7+4QafND\/GnqwT0MP92m4B1V7uE+yWMHw6w\/7ZtKoOcex2dQNlgolTR89jlkOVjmMtaKERbXulaOgckAZGbh\/MoaCHR50pCocueBot50qdty5BA1\/7IAD0NEEdGiWSqXC4aBDzXAkbuQWBUcL22MLgINVDl6nMImUQYPXADie2AyHgA2jdPzFWSxxliNWOdwsDq9s8HkKdES2igGPb59R89tn1ILFUqZyONhg6GDw4OCosVScwgHg4LI5jjKVA9ABpYOhA+CxQpMAjWuvafLaCrVlXV+hdlCr1J621ZpeJa7mzCo1Z96ENfuGGjOy1qgxu0b1uObWqD63ThOixufWSdbY3AaNzUd1Y4PGfL2lsRtvaWwhrNGFtzSysJmvxU0aMbVFI4uubm5RLa6ld1SL69Y7qpnapuFbrpa3aSiqweVtGlzeyer2Dg3e3qEBX7s0cHuXBu4odXeXBu7uZcXqg1n3aeCehQSGBb8+2CcE8VILf1n6emj9f2QAel2D7nvyC68XLzlNvgdMpBTbJlWrVDLKjg+qcsB+SVE6UvMcuA+jxA9jIBierfZsqq7h6+Iw5nE9fy+TSDnb0UmnitnATQMOLcchRpx7hUO1VbIMhwcOl+VofPiTUTqw6tBh1Y3i4V9l0NF5cNQAh9hTxbfGBjmOX0xwVCocDBxY2+cj6AiAA8HREugAYEjo6EjlyBQOY698k+2x0vpaVzgAGraeU\/Pb53T28gv6o2qphCqHAY6rL+ncVdupUgQcRu2Ig6OB0uFgwwEHlA6rdjB4JADH9Tx0WOCIoGP2DTVdWfAoAw4LHR485kPgGNeAAwASA4eDDoCGr8VNGgVcSPDwwAHw6BY43gXAMby8TVwGPm7v0JCDDAMeHjQYOsqAQ8AGg0cKdHQAHB40AB0PbfUaNLTvB+joBXBoL7YU2DD3VGzqxiBSBhnyMwkc3Uwf7TVwwFrB90wFjqOwwRuABP9ejitkxD9337ezZ+DA2mmOIwyOlu+p0vzXMktFyXBwiNSrHIAOW+24RbZU5agOjpbvHJsfAJYFR8ssFdupwsCB1QPH579Q4\/NfqFkBHZzfCFaoHKbcjrFi4mgwj4NVDbl6hUNkOQAcrmSnirRUQpXDQkf74vPSHAerHOhUAXBY6HDgIdQNVjk++P41oUx7bAAbbKk4lcPBRgAd11\/TJBSNMpXDKRyx0pFTOKB4COjAcWOmCDrWjcoB4DA1v04TrqzSEakbrHYUAAeUDg8cOHbQgfU0g0ekcMBKGYkVDpwrCsewUzmkwsGwEawOOgAepu7s0CAX1A2uWOVgyJBrCnDAHqmAjhg0NCjo57V+AgdeWqnQwVBRtUqwKDuW0JEaGI3v66XKUTqb44gGSPH8TkqrLADkwCFSCRVVx9WtsaI9tqMch5jFoSocCnS44CgsFVsOOj76iVo56MhUDtO14mdxiByHaqtEodFccLRgHkdScDSEjhg4Gp\/\/SijspWIslkDleGLnccS2Cs4dcJz5y2+E4v1UuslxTArgAHgY6CiwVaByQOGQhe3pswBpFhxlO+UPDjYsdDgbRbFVPrhqgaMYOjJLhWGD16nrKzTloMODR4GlEgNHK7ZUcsCxRs3ZdOCoC+iYmN+gcYYMuRrgcHYK1A1N4YiAg+HDWipC4VhULBUNOAAgHQDH8O0d4hq6s0Ncg3d2ydfdXRqEjQLwMHAh7EYAABZPSURBVHZKZKkAPDoAjlOKrXLYoAGI6aWloikchwkcgBEPHX2cy1H\/7z7N5qhSnqo+R4dLdA+eR64eKtfEfXiuSa2yKZ0tR+CeIESa2oVSBRdF30eFDqU1tpNOFTt1VECHNo+DVQ23oj1Wg43GRz8RqumhI4IN3xYrYEMLjbrW2K4UjsRZHHFwNIQOCxz1z3+lNnIdKcAhFA4GDoaOQOEQI859lsMrHNZW8ZZKDB2pwHHxOTUuPqdJabHEOY4IOM5dfUUor2zw8fevjMJRrHQUA8eZ6yuEAngAOAx0BMCBTEdmqQTQMbNKgI4APAKFwwJHc26NGq5MnsNlOLy6IVQOQIcHjxsbNA7AyAEHrBUBHS7HUaRwMHCM3twk1GlARVe2ishwIMshLBV7nIGGBw4oHR46dmnozi4N3c0K0GEKLaf39kyFoMHgUZzjMOHP+yKbwTmN92ibFCkkBjgO2Hop7Zjcy6wDhYN3ia1SOPB5mbIhP\/PA0ce5HKkdKxwgHe1gc7deWytFUKg9N3kN\/05ii+K4nr\/XPIexV1LCozmFA50rSreKz3GIeRwJwGGyHF7dAHxkCgdDB1aT64i7VALoEOARqxx\/iraph8KRUznKbJWoPTYIjhYoHLBXjK1igYOVDmOxeOhww78SFA4DHF9ZpSOADmmn8LGBjjLgeEaYv9GOocPlOKS60bz4nGSdQ64jBg5hqTBsmBWAwbDBq7BV\/PTRwF4pgA4DG6s0dR3loGNagsdqEnB46KgADoBH3VfeVgmAY36DJhx0BOARqxwiOJpBh81xeNiAxeKAY\/TmFqEAHkmWilA4ahwaVYFj2ysbDBxmjYEjgg4DIAI4GDzC9tR9GkRnCRc6TIJOkyz4yYHNIgjo+fUH2X87\/t69tFOKXmaplgruS4GNboGjn1mOVJWDQ6ZQHlhdqlol0PXiWIJEJ8dQ5DBM67iChvy532ueQ4WOaMy5qnCUAofIceRslbLQqIANQIdTOOTa\/qRM5SgHjrYGHUF7bAYcPGk0C45GwBEERzsDjsb5Xwk1BYvlSzFxNIaOWOX46jc642oKYMH7qjBkyDVJ5XDQAchg8BDB0RbbKhFwQO2Y+u4F\/TGGDk3l+P4VnUMxbGB1wMG2ytlrr4krm8lhA6Nsp\/jVwAZDhwMPQMe0UzegcGgqh1A4WOloBcCBTMcaQeGQKkdj3ioeZQpHfX6DUAAOCR0GPGLgcLZKluPYpNGFauAw4LG0RaeXtmhkSdor6Z0qgcohrJRugGPIKRxYfd3foyFT+zR03xVaTWU9tK2n8cv+sM\/Ni66H6ga\/DOOXWC+Bg1UQqWJUHXuVo0tbpR8BUvxMeP5VsPG+nlH8zLRzPN8ka+UYDAQDfPQsz1Fkp0gbBvcEU0dj4NA6VUpHnP+dSkecR5aK71ZJUDkaHz2iloAOM5OjZzmO\/yHeS0WuNjyaEBx18zi8neIVDigdocoB4Kif\/5XaF9zE0Rg2lAyHsVZi6GDwkLCBY69w2OCobqtkwAG1I+tSscdokTVKRwQcVu14Qa1LeaWDg6Oc5TCwwdDBaoezVVjdMKsGHVFw1EBHDBzTqzTlgAPQMYnQqAYcaJONoWP2DYXQoQAH7BVAhymhcjg7hVUOY6044AjAY4G7VUJbJVM3ECBVgENROYzS4aDDg0ccGuXzgvbYEDoUlcMrHLBX8raKt1icyuFhA+DhgQPHBcDhZl0cNmBo\/\/3Y42do6HRl6V97UXUCHAwUVUpHFWTIzz1w9NlW6dRawcZqqdDR6fMour\/sOWnPLr4GAJJKwXE\/DvIcEhD6dZyHjrIBYGXzOCoslYoBYN5S0VSOjx9R4+NH1HTQURgc1bIcbKPwGqgb+YmjAA2jcBwkx6FYKqxwMHQ0\/1wWHLWBUZ\/jiIBj6qvfyagdhcCRYKvAWnEVQocIjsbQcekFNS+9oMalF3TmyktCaDQOjrKlkoOOWOFA14oAjrPXVgjlVQ15fH2VzqjQweCxaqFDdKvwPA6vbLgshzl30GHBoww41qkxb0tCBh8jOGoqgo6JhQ0aX3jri4OjmcJRBRzWUvHWigAOQMfpW+9MBd0qHjaKW2MNeGgqRzJwWGUDloqHjmMKHPyXddGLqdvr8QsK550ARxVoyM8lVFQde+g4QioHlBN+Dilrt8+k6Ou0Z5Vy7SRZK+89z+HtlRSFA5ZKqa3SWXA0Ncdh7BUHHQAP3l+l7VUO1x4bZzhMcFQZABZAR2apsMLhoaNyHsf\/+mmjQWusVznyCkcGHk+ofv6J2UvlbKx0RJ0qrHIAMmz9TlNf2\/KhUa9wZOqGrnD87kGDgcOsF59RC8WWCtYYOHB+CWWho3X5RUfQcS6GDgU4ziIkKmEDx0GOw1krRuUAcNiCyjE5YwvB0Qw4ilUOAIetyFLhEKlTOBg6sDJs2LUAOAAgC7YYPHgAWKXKEeU4YoXDAIeADsDHSAAb6FjZNmVaZBOCo8OpwIEwqYSNY6xw4AVX9CI66PX4pdUJcKQqHJ3kOAAjHjiOisrxN7ujLH43hzWbA885flYp5\/i6k2St\/GO\/1Iyy72uUjkroUEKjftdYm+Hwtkoux6G0xsJm8e2x2SwOmd+wx1bhAGyg6h8\/opYWHFWBA8O\/ovCoBhzRiHOjcmjtsUFw1A4Ag53CMzm8tVKhcljweEL1Pz+hNnIdEjoqchxW4VCgw2c4MujgORzBKtQNDx0Xn1HblYcOFTisygHoYPA4+1epdNjsRqxw2PPXFEBHABxQPFYIwMHlwcN0qsgMRwYaDBxmdcAB8GjDStEsFSgdHjT4eI1acY7D2yqZymHA44ZUPMIcB9sqDBsTC2+Ja3zxLaEClUPM4vDhUQU4RgEYcd2yKgerHWZd5vZY0a2SAw7FUoHqEUOH6FTxlooGHAF0lFgqxlYpDm9qdke\/rvFf0wcFi6Kv55cWv9A6Ao4eB0cZTCRwdBse7UeWAzYMP4+Uteh33u11fladrvhZoQ4cd0uFf\/6e5TnKICP+rG2A4yCWShc5jqQMx08GNBg4GDpgsQQqhwYcRuWI5nEEwJGfxWHyG51YKtiuXg7\/SlA4kOVonLfAAehoXBDTRwsUDoRHNZUjUDt8jqPMVlFUDg8czwmDv1oabFwMYUNCR\/s7ho5q4PDQEQCHtVTKoMN2qgjwiFQODToMeEg7JQcca9SatcDB0OEDpIrC0QBwuPIqh2KplEKHA4+x0hxHZqugWyUVOE4vv6MRUyUqh2KrZK2xLsfRa+AwwdHDBw5+qXX7gkr5uvjldZjAIa0WCR3xgK\/U85RBYJ10rHQ6DIwzGCnPIfWe+Hmlnhtr5QRBx3vPcwBAeIt6XsOJo8hwlOc4ykecKyqHVzhEt4rSqdL4+CejbEDdYOCof\/KIGh46ym2VYNfYoDU2b6n4DEcH0KEDRxQcdZ0qbKvAUgFsyMJ29fHwL7ZUZLeKUTmcrcLAgTULjnYIHFA9BHQAOFTocJYKw4ZZL7+ghquz6GLBPA4RGg2PM5XDgIcGHULl8GpHnOHAeQFwTEmlY3aV2igJHQUKhwQOAx0iOOptFQEcFjw2qJ4IHBNO5fBqx+ImjSWoHCpwLOkKhwSOkeVtGrm9TVhrUulQgCOncGitsUbhOIitcrjAcRiwgZdXv4CD1QsJFWXH7wU4\/svuwcLtr1Vrx7vJSitMHhd1GyXcg\/BqJWQo9wBoAmslpWX2CN+Dlt9\/0Cq1C0X7WnlN+z6me+WfM5UjBxwVGQ5vqaizOA4CHJmtAugw9ckjAnSgWgiMaqHRA+Q4mikZjmjX2AA8Km0Vm+OQwIHj1hdP8tARB0cV2DDg8U0GGshw6DmOLDDqLRUBHAwbrUvPCZXLcjg7xUPH5RfUdMBRv\/ySrNqhQYeFDa9wINNxjUtXOBg4zk6v0hkAhgSPADhWLIDMrBKAQ1Z79g1xxaFRznBoKgego1mqcljYAHBwldkqAA6uGDoC8IhslZy6YeyVYuCw0GFBw0MHwMPAxw7Vboe2CkacAzgsdKBLpUTluFcFHK5bRbbF8nEfNmFLsV0YNLCm\/tXb7X3ai6sfwMFZjzLAiD+TwNFvW6XTjhUzDOyYtcniWePf30myVg4lzwEoYYVDncehtceKAWBe5VChIz+TI5s46lQOTeHANREczUPHY2p9+pjaBbZKscKhd6p0bKuIreo9dHQJHIAOWCxTsbVSYakwcEx94wKlBwUOqBwOOjLwKLBVvMrxkhqXbZ39z1f0B6l0XM2Aw0OHBw6Ah4MOReEAeAA4AB4eOgLgcIqHgA0OkU7OrtKkhA5N4XC2ioEMl+dg4GjOrxPKZzgilYNhQ66apRLDhoGOm5s0ftMqHYAOAx4RcOjBUQU4br0jwIatAuAw4LFDI3ds1ZzawfuqeNg4QQqHAQ5lzHUAFSkwknCPBA58f5x3ChwME7Ijpew4Boui814Bx0nMcvCzks8v9djstZKiXBwT++VQ8hweOnITRw+\/U8XDBpQOr3I8pvonj6lRBB3cFstrQo4jC44mzOMoBA5hq0SWislwnA8tFa92XHhC9QtPqG1mc2TDv6pyHAY2AByudIVDyXAIhQPWSqxyMHh4VUNROdhWYeCA2tG68jKyVzJLxQ8D89CxYqDDgEcMHdMrBjYAHVxllgorHAY6HHAAOjx4zHFglNd8jiMGDg8eAXBk6oYEDnNsOlWy4CgDB1arcFjYAHBwMXSMAULcxFE1NKpZKgFwIMvhVA1WN+TqgMODx50dqjmVY5hncWjQYbpUqlSOaPDXISkcBjTcX80BXBTJ711el7kC7SXVT+Aogoui6xI6UnMb2n0pWY7G39L2WDnOI8\/xvDHLhcOXJ2HtS6usZqdIuwXHuKeVOgBMKBzltkpe4UCnSjCHQ5vFUalwAD4sdNQ16OiiUyVrj+0SOEx4tKw1NgyOethArsMBR\/3CU2p88TSYNuqDo1\/\/5ttjZY7DwsYzmvrGlg4diq0iMhwcHGXQCFZYKAnA0fjuJaHq372ks1ehdigKR2CrWJXjg+srhPJ2Co4V4DAWi1c5dEslVjk8dMy9obYrb6vMZd0qXumYh61iFQ6\/BsCBEGkBdCxsUF1Ch2KpMGgE6xJgwwJHx9DhFQ4HHEXQEQGHAY+7O1TztUu1u7s07CrfqRJBRzyPgyEjXvtgq8Sj0mPQkEDQT\/CQfyXzccewAUUkcat6Vj2K4EK7DuDAdQMefZ7J0amtgvvNs3uQ1rnSj2epAWPKNbT2\/r+1UpABicGi6jzJVvHAUTbiPJ\/hMJu4ufbYeNfYXHussFRkcDRWOQAcqKbMdLCyIddA5SgIj2o5DqU1NtcWy10ryrRRDo1iDSBDBkgNcDwlAAcXxpqnBEdj4AB4TH6DPVSy7eqD7Aa3yaYCx6UXhBkcAXTEloqDDYYOrFbtSFM4dOiwlgorHGadWaUzsFEYPISl4lWOSOFg6Jj00LFGbQcbCI4G4dEC4GjeWCcUgqM5ZYMBxAFHfeEtoUyLrIMOznCML2bqRgwd4wCPpa1ipQOKRlweOMosFSgfma3CKsfI3R1CWeiwwFG7t0tcBj5MhqMMNkomjvaoUyUGDM5xeND4geh9Qga\/+OIXE673Gzg0qCi79j4Vjk6Ag1UO\/L7wPP2zLDvuUpHi56Wt8TNMPcf3CgKkx8Q+KVNkDs1aAZDkwqOlOQ4BHSk5juTWWOQ4sixHHByVCgeAY+LTx9Rg6PhT1QCwn3MjzrvJcfj8hgcOZTO3wFopt1Ss0mGhY+LCU2p9aaHDqxyYOhoHSL2lkqkcDB3ZlvWKwiFsFTMEzHWqBOqGyXRY4DDQ4cAD00djS0XCBh9D7ThjuliyLeuz4KhTOK45a8UpHV7t0FQOBxyADgMeAji8uoGuFQ065t5QEXSECoeucjBwyG6VAD4McFjYYOio54DjrbdTNOAYX9oilAGPpS2CvcJlwqSFwFGlcGz7HIcEjgA27mawwdBh1vu7VLu\/R8P3sjqMEefaS0l7ifTzmgQb7eXUb+A4SKcK4EOzS1KvpdgqnUAHOlbw304GjoRMTTfPXnuOKdfw77HsBX4cPzuUVllWQALoKAQOO+K82FZRLJVkhSODDQ6QqtDhFA5WOpDraLl5HMF29V7hgLqRn8fh22M7UDl04KiwVaSyIY9jleOLpzTxxVOqf\/k0N3E0gI5S4IDa4ZQOVjbkKlSOohxH6\/Jzo3AAOLi4S8VChwuOKioHwKN+5RU1\/\/qKzl0Takec4xCw4dWOaRsc1RQOBg4VOgxs2OCoVzeQ53DAYVercrTn1wjlVQ6jcETA4dQNVjmaNzaoubBBDQAGqxtYI4XDQIcDjgA8RIbDQ8fSJkHhYOAw0HFri8ZuZcAxuvSORmPgwHmKynGnDDigcuQVDg8dDjgAHVzDD\/Yoq30afmAr2MQN9kqXlgr+Z174IurDX7qdvqiKXkjdAAdbJalrmaKhfXbUVQ78Lgufdax49OHZFz3LlOsmQHoC1A2Go77kORgoUlYPHYXAIYZ\/adNGoXhoG7l5laNs4mgGHD446kOjIsOBLEcEHROf\/kzN0iFguqWSFhy1E0dVW8V0qojgKCyWWOHQgqMxbLC14qAD4NGCxRKrGziPgAN2ilbFtgpmcBQHR43iIWAjDx1ZpworG8F65RU1rrwy4DGFzhUPG8UKh4GO6RX6wHWqeOiIFA4DHrOrdGY2a421wVEbGC0Djsm5NZpk4MhBRz7HkQGHzXEAOLg8eMQqx+JbYtjgdaJD4AB02LLAAejg4omj1Z0qCnAgOBpbKoUqRwYbBjoe7FHN1z7VHuxT7WFWww\/3KatEyVx5uUhFoVMo6PX9\/LMUvYi6gQ18TSpo8H0aVJRde+\/A0WF4FD9fMnAcMZXjpAVIAR6Haq1Ye6V8xLlXN1Tg+JGa2kZuGnBo4VGR48hDhwuNKsBR\/+wxTXz2MzX+rWjqqAMON+KcA6MdqRwpnSoacEhVg49FaJQzHGYVwDHxxW\/U+DIxOKpBx7fPaFKqG8JS8aHRqDXW2ysKcLS+e0FNlMlzlKgcAjigdjT++krM4xDQoagcDBw8l0PmOLzK4YDDQIcED9el4qEjUDigeGTAYVQOBx2tihyHtVYy2GDoMIpHDBzIcwjosJ0rmwToyIFHrHJ40GDgwPqOxpYz4DDg4RQO06WC0GgHwdEMOKpUjjLgAHzkocMAyA\/7fZ+F0WuwqPp+PQWODgOjgI4yuJCf8b0SOA4yjwP2R69tFR4Uht9pMnQcFZXDDQc7aRNIoXIcqrViule0AWBQPUx4lDdx+zs1UzIcmqWiwUbUqZISHA2Ujs9+NtBR\/8xBh7dUYKfwPI6CLMe\/R50qOPfh0SqFo9hSwYhzbeKoCZNqKgcsFVdQOQAdE18+pTZmdLDa4RUOqB26uuEVj0LosJNGja0iZnGUAgfyHAY6XlITdoqbxxGoG7h+hcuqHIAOVNurHbZLha0Uv06veoUDwOGho0Tl8NChZThytsobo3CwyuHtFYCHKaFyRLYKOlUkaPjjxbfUAGC44KgJjzrg8ArHYgYcAXgUWCqZwuHAY9lChwEPwIeo08vbhDJDv2RbLI6VTpWugQP2SqxwRCqHVzxOGHQcF+Bg+DjqwIEsB37W5E3djprKcQIDpIVTSFNskR7d83\/rPufqKfE3UQAAAABJRU5ErkJggg==)\n\n## ***Types of Sentiment Analysis***\nSentiment analysis models focus on polarity (positive, negative, neutral) but also on feelings and emotions (angry, happy, sad, etc.), urgency (urgent, not urgent) and even intentions (interested vs. not interested). Depending on how you want to interpret customer feedback and queries, you can define and tailor your categories to meet your sentiment analysis needs. Below is the overview of the most popular and frequently used types of sentiment analysis:\n\n### **Fine-grained Sentiment Analysis**\nWhen polarity precision is important to the business, Fine Grained Sentiment Analysis is preferred to include:\n\n\u25cf\tVery positive\n\u25cf\tPositive\n\u25cf\tNeutral\n\u25cf\tNegative\n\u25cf\tVery negative\n\nThis is usually referred to as fine-grained sentiment analysis, and could be used to interpret 5-star ratings in a review, for example:\n\n\u25cf\tVery Positive = 5 stars\n\u25cf\tVery Negative = 1 star\n\n### **Emotion detection**\nThis type of sentiment analysis aims to detect emotions, like happiness, frustration, anger, sadness, and so on. Many emotion detection systems use lexicons (i.e. lists of words and the emotions they convey) or complex machine learning algorithms. One of the downsides of using lexicons is that people express emotions in different ways. Some words that typically express anger, like bad or kill (e.g. your product is so bad or your customer support is killing me) might also express happiness (e.g. this is bad ass or you are killing it).\n\n### **Aspect-based Sentiment Analysis**\nUsually, when analyzing sentiments of texts, let\u2019s say product reviews, you\u2019ll want to know which particular aspects or features people are mentioning in a positive, neutral, or negative way. That's where aspect-based sentiment analysis can help, for example in this text: \"The battery life of this camera is too short\", an aspect-based classifier would be able to determine that the sentence expresses a negative opinion about the feature battery life.","5c309e80":"# ***Word Cloud Of Donald Trump and Joe Biden Tweets***","b9e81de7":"# ***Second Hypothesis***\nHo = Sentiments of Joe Biden is dependent or related to states\n\nHa = Sentiments of Joe Biden is Independent or not related to states","6a4ceb76":"\n\n---\n\n\nAlpha = 0.05\nZ_tabular = 1.65\n\nAs,\n\n***Z_calc < Z_tabular***\n\nSo H0 is accepted and Average polarity among high profile users of Joe Biden is greater than overall average polarity among high profile users.\n\n---\n"}}