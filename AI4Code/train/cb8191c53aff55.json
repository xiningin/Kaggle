{"cell_type":{"34b4d0c9":"code","c062c6be":"code","2fb98396":"code","cccaf474":"code","11c39bfd":"code","68ef3f69":"code","cb36c709":"code","84442961":"code","a797ae91":"code","4d79ff40":"code","93267d86":"code","d0898863":"code","bbd4279f":"code","fd824398":"code","0409bed3":"code","66517b4d":"code","6864ebd6":"code","30c83414":"code","4a63a03b":"code","15080870":"markdown","d4ea5b47":"markdown","b646ea3f":"markdown","0c45b774":"markdown","921d447a":"markdown"},"source":{"34b4d0c9":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport itertools\nimport os\nfrom glob import glob\n\nfrom sklearn.metrics import mean_squared_error as mse\nfrom sklearn.metrics import mean_absolute_error as mae\nfrom sklearn.metrics import roc_auc_score\n\nimport seaborn as sns\nsns.set(font_scale=1.4)\n\nimport matplotlib.pyplot as plt","c062c6be":"PATH = '\/kaggle\/input\/tabular-playground-series-mar-2021\/'\ntrain = pd.read_csv(PATH+'train.csv')\ntest = pd.read_csv(PATH+'test.csv')\nsample_submission = pd.read_csv(PATH+'sample_submission.csv')","2fb98396":"xgb_path  = '\/kaggle\/input\/tabmar21-xgb-for-stacking\/'\nlgbm_path  = '\/kaggle\/input\/tabmar21-lgbm-encoded-sub-300321\/'\ndae1_path = '\/kaggle\/input\/tabmar21-daesub1\/'\ndae2_path = '\/kaggle\/input\/tabmar21-daesub2\/'\ndae3_path = '\/kaggle\/input\/tabmar21-daesub3\/'\ndae4_path = '\/kaggle\/input\/tabmar21-daesub4\/'\ndae5_path = '\/kaggle\/input\/tabmar21-dae-mlp-finalexpts1\/'\ndae6_path = '\/kaggle\/input\/tabmar21-dae-narrow-290321\/'\ndae7_path = '\/kaggle\/input\/tabmar21-dae-run005\/'\ndae8_path = '\/kaggle\/input\/tabmar21-dae-binned1\/'\ndae9_path = '\/kaggle\/input\/tabmar21-dae-run3st4\/'\n\ndescrs = ['xgb', 'lgbm', 'dae1', 'dae2', 'dae3', 'dae4', 'dae5','dae6', 'dae7', 'dae8',  'dae9',]\n\noof_counts = [len(glob(xgb_path+'*oof*')), len(glob(lgbm_path+'*oof*')), len(glob(dae1_path+ '*oof*')) , len(glob(dae2_path+ '*oof*')),\nlen(glob(dae3_path+ '*oof*')),  len(glob(dae4_path+ '*oof*')), len(glob(dae5_path+ '*oof*')), len(glob(dae6_path+ '*oof*')), len(glob(dae7_path+ '*oof*')), len(glob(dae8_path+ '*oof*')), len(glob(dae9_path+ '*oof*'))] \n\noofs = glob(xgb_path+'*oof*')+ glob(lgbm_path+'*oof*') + glob(dae1_path+ '*oof*') + glob(dae2_path+ '*oof*')+ glob(dae3_path+ '*oof*')+ glob(dae4_path+ '*oof*')+ glob(dae5_path+ '*oof*')+ glob(dae6_path+ '*oof*')+ glob(dae7_path+ '*oof*')+ glob(dae8_path+ '*oof*')+ glob(dae9_path+ '*oof*')\nsubs = glob(xgb_path+'*test*')+glob(lgbm_path+'*test*') + glob(dae1_path+ '*submission*')+ glob(dae2_path+ '*submission*')+ glob(dae3_path+ '*submission*')+ glob(dae4_path+ '*submission*')+ glob(dae5_path+ '*submission*')+ glob(dae6_path+ '*submission*')+ glob(dae7_path+ '*submission*')+ glob(dae8_path+ '*submission*')+ glob(dae9_path+ '*submission*')\n\noofs_dfs = [pd.read_csv(x) for x in oofs]\nsubs_dfs = [pd.read_csv(x) for x in subs]\n\nprint('Out of Fold links', oofs)\n\nprint( '  -   ')\n\nprint('Submission links', subs)","cccaf474":"assert len(oofs) == len(subs)","11c39bfd":"print('Counts of Inputs')\nprint(len(oofs), len(subs))","68ef3f69":"output_tags = [[z+'_'+str(y) for y in range(x)] for x, z in zip(oof_counts, descrs)]\noutput_tags = [item for sublist in output_tags for item in sublist]\nprint('Model Tags')\noutput_tags","cb36c709":"for count, oo in enumerate(oofs_dfs):\n    print(output_tags[count],roc_auc_score(oo['target'], oo['oof_prediction']))","84442961":"combined_oofs = pd.DataFrame()\n\nfor o in oofs_dfs:\n    combined_oofs = pd.concat([combined_oofs, o[['oof_prediction']]], \n                             axis=1)\n    \ncombined_oofs.columns=output_tags    \n\ncombined_oofs_corr = combined_oofs.corr()\n\nsns.set(font_scale=1.3)\n\nfig,axes=plt.subplots(figsize=(12,12))\n\nsns.heatmap(combined_oofs_corr,\n           annot=True,\n           vmin=0.98,\n           vmax=1,\n           fmt='.3f',\n           cmap='seismic_r',\n           linewidth=1,\n         annot_kws={\"fontsize\":8})\n\nplt.title('Model OOF Prediction Correlations')\nplt.tight_layout()","a797ae91":"import optuna\nfrom optuna.samplers import TPESampler\noptuna.logging.set_verbosity(optuna.logging.WARNING)\n\nOPTUNA_TRIALS = 5000\n\ndef run_optimise():\n    print('running Optuna')         \n    class Optimizer:\n        def __init__(self, metric, trials=OPTUNA_TRIALS):\n            self.metric = metric\n            self.trials = trials\n            self.sampler = TPESampler(seed=42)\n\n        def objective(self, trial):\n            #print('running a trial')\n            model_weights = np.array(create_model(trial))\n            model_weights=model_weights\/model_weights.sum()\n            \n            oof_blend = np.zeros((len(train),))\n            \n            for count, od in enumerate(oofs_dfs):\n                oof_blend+=oofs_dfs[count]['oof_prediction']*model_weights[count]\n                           \n            \n            error = roc_auc_score(train['target'], oof_blend)\n            return error\n\n        def optimize(self):\n            study = optuna.create_study(direction=\"maximize\", sampler=self.sampler)\n            study.optimize(self.objective, n_trials=self.trials)\n            return study.trials_dataframe()\n\n    def create_model(trial):\n        l_default=0.000\n        u_default=3.0\n        \n        #formatted = ['{0:03}'.format(x) for x in range(len(oofs))]\n        \n        model_weights  = [trial.suggest_uniform(f'oof_weights_{x}', l_default,u_default) for x in output_tags]\n        \n        #print(xgb_weights)\n        \n        return model_weights\n\n    optimizer = Optimizer('mse')\n\n    output_params = optimizer.optimize()\n    \n    return output_params","4d79ff40":"#%%time\noptim_settings = run_optimise()","93267d86":"optim_settings","d0898863":"params = ['params_oof_weights_' + x for x in output_tags]\noptim_settings[params] = optim_settings[params] \/ optim_settings[params].sum(axis=1).values.reshape(-1,1)\noptim_settings=optim_settings.sort_values('value',ascending=False).reset_index(drop=True)\noptim_settings[['value']+params].head(10)","bbd4279f":"fig,axes=plt.subplots(nrows=len(subs)\/\/5+1,ncols=5,figsize=(20,16), sharex=True, sharey=True)\nfor count,p in enumerate(params):\n    axes[count\/\/5,count%5].scatter(x=optim_settings[p], y=optim_settings['value'], color='Red')\n    axes[count\/\/5,count%5].set_title(output_tags[count] + ' weight vs ROCAUC score')\nplt.tight_layout()","fd824398":"CUTOFF = 10\nweightings = optim_settings.loc[0:CUTOFF,params].mean(axis=0).values\nprint('weightings to use')\nprint({a:np.round(b,4) for a,b in zip(output_tags, weightings)})","0409bed3":"weightings.sum()","66517b4d":"print('Generating Blended OOF and Submission Predictions')\ntrain_predictions = np.zeros((len(train),))\ntest_predictions = np.zeros((len(test),))\nfor count,w in enumerate(weightings):\n    train_predictions += oofs_dfs[count]['oof_prediction']*weightings[count]\n    test_predictions += subs_dfs[count]['target']*weightings[count]\nsns.kdeplot(train_predictions,\n           color='Green')    \nsns.kdeplot(test_predictions,\n           color='Red')\n\nplt.title('Blended Train OOF and Test Predictions')\nplt.legend(['Train', 'Test'], facecolor='White')\nplt.tight_layout()","6864ebd6":"print('Blended ROC AUC Score', roc_auc_score(train['target'], train_predictions))","30c83414":"sample_submission['target']=test_predictions\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(10)","4a63a03b":"for count, (descr, oof_file, sub_file) in enumerate(zip(output_tags, oofs_dfs, subs_dfs)):\n    oof_file.to_csv(f'oof_predictions_model_{descr}.csv')\n    sub_file.to_csv(f'test_predictions_model_{descr}.csv')","15080870":"# Model Prediction Correlations","d4ea5b47":"# Individual Model Scores","b646ea3f":"Added - to make individual model outputs available without me having to add all datasets as public, am outputting the files inside this notebook.","0c45b774":"# Load Submission + Out Of Fold Predictions from each model","921d447a":"Generally blend will be better if there is some variation in models (if all sets of predictions are 100% correlated, blending will not provide any benefit)"}}