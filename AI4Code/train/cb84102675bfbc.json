{"cell_type":{"0d78049b":"code","4251c634":"code","39d5a7ce":"code","eb33a627":"code","56ebb8ec":"code","395dbe2f":"code","bed899df":"code","02ee43e0":"code","58983b8c":"code","a6927587":"code","fe37a8b6":"code","f6e1e1ad":"code","405e24a8":"code","c22c022f":"code","ffaa4dce":"code","ab8789c3":"code","28325722":"code","f4ea5028":"code","f72be79c":"code","4cbc3e95":"code","1dc7399a":"code","baa05c77":"code","79553c07":"code","42108372":"code","7bf1279e":"code","2164289c":"code","8a2bc583":"code","77adbde5":"code","339f68db":"code","a77af326":"code","643d570a":"code","7f3b74de":"code","34634666":"code","0495be91":"code","5a1d3b27":"code","983776c4":"code","9976ee53":"code","841bbcbe":"code","8ddf4b57":"code","e5b8e4f1":"code","82e1f04c":"code","b8ad5ca5":"code","e4301967":"code","b6a92753":"code","b1d39bf2":"code","1fe6e489":"code","387b8fef":"code","7afbc61c":"code","a4cd483f":"code","6c6e65bd":"code","600f60e7":"code","0f9b12f3":"code","092e5171":"code","44fdde52":"code","29df05b4":"code","025abbb9":"code","ae5086da":"code","a3b28a8c":"code","67917534":"code","f0e4e324":"code","72432ea0":"code","60f964c4":"code","61bb2c41":"code","7ec353e1":"code","44082d1c":"code","d93567dd":"code","79ef09d6":"code","e831f6a4":"code","e92ad1e5":"markdown","fe2383c2":"markdown","886a2ff2":"markdown","e74833fa":"markdown","566e056a":"markdown","93a7272a":"markdown","16f36b64":"markdown","49b818c9":"markdown","a7b9ead7":"markdown","3f62ac19":"markdown","4abd8957":"markdown","643bfefe":"markdown","ace80dcb":"markdown","89f96516":"markdown","0af90ea4":"markdown","5d452717":"markdown","355f6686":"markdown","d75fb1fd":"markdown","4418fd16":"markdown","27959a12":"markdown","3c8b0ffb":"markdown","e1288cb3":"markdown","87745edc":"markdown","1c354f2b":"markdown","2824b917":"markdown","a788e1f9":"markdown","4db34f0f":"markdown","3fe5127c":"markdown","958d639a":"markdown","c74e17d3":"markdown","daf16fd4":"markdown","e788be62":"markdown"},"source":{"0d78049b":"# Loading packages\nimport pandas as pd #Analysis \nimport matplotlib.pyplot as plt #Visulization\nimport seaborn as sns #Visulization\nimport numpy as np #Analysis \nfrom scipy.stats import norm #Analysis \nfrom sklearn.preprocessing import StandardScaler #Analysis \nfrom scipy import stats #Analysis \nimport warnings \nwarnings.filterwarnings('ignore')\n%matplotlib inline\nimport gc\nimport plotly.graph_objs as go\nimport plotly.offline as py\nfrom plotly import tools","4251c634":"df_train = pd.read_csv('..\/input\/train.csv')\ndf_test  = pd.read_csv('..\/input\/test.csv')","39d5a7ce":"print(\"train.csv. Shape: \",df_train.shape)\nprint(\"test.csv. Shape: \",df_test.shape)","eb33a627":"df_train.head(10)","56ebb8ec":"df_test.head(10)","395dbe2f":"f, ax = plt.subplots(figsize=(8, 6))\nsns.distplot(df_train['price'])","bed899df":"df_train['price'] = np.log1p(df_train['price'])\nf, ax = plt.subplots(figsize=(8, 6))\nsns.distplot(df_train['price'])","02ee43e0":"df_train[\"bedrooms\"].drop_duplicates()","58983b8c":"df_train[\"bathrooms\"].drop_duplicates()","a6927587":"data = pd.concat([df_train['price'], df_train['sqft_living']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.regplot(x='sqft_living', y=\"price\", data=data)","fe37a8b6":"df_train[df_train[\"sqft_living\"]>13000]","f6e1e1ad":"df_train[\"floors\"].drop_duplicates()","405e24a8":"fig, ax = plt.subplots(figsize=(8, 6))\nsns.boxplot(x=\"floors\", y=\"price\", data=df_train)\nplt.title(\"Box Plot\")\nplt.show()","c22c022f":"df_train[\"waterfront\"].drop_duplicates()","ffaa4dce":"fig, ax = plt.subplots(figsize=(8, 6))\nsns.boxplot(x=\"waterfront\", y=\"price\", data=df_train)\nplt.title(\"Box Plot\")\nplt.show()","ab8789c3":"df_train[\"view\"].drop_duplicates()","28325722":"fig, ax = plt.subplots(figsize=(8, 6))\nsns.boxplot(x=\"view\", y=\"price\", data=df_train)\nplt.title(\"Box Plot\")\nplt.show()","f4ea5028":"df_train[\"condition\"].drop_duplicates()","f72be79c":"fig, ax = plt.subplots(figsize=(8, 6))\nsns.boxplot(x=\"condition\", y=\"price\", data=df_train)\nplt.title(\"Box Plot\")\nplt.show()","4cbc3e95":"df_train[\"grade\"].drop_duplicates()","1dc7399a":"fig, ax = plt.subplots(figsize=(8, 6))\nsns.boxplot(x=\"grade\", y=\"price\", data=df_train)\nplt.title(\"Box Plot\")\nplt.show()","baa05c77":"df_train[\"yr_built\"].describe()","79553c07":"df_train[df_train[\"yr_renovated\"]!=0][\"yr_renovated\"].describe()","42108372":"df_train.plot(kind = \"scatter\", x = \"long\", y = \"lat\", alpha = 0.1, s = df_train[\"sqft_living\"]*0.02, \n             label = \"sqft_living\", figsize = (10, 8), c = \"price\", cmap = plt.get_cmap(\"jet\"), colorbar = True, sharex = False)","7bf1279e":"df_train[[\"sqft_living\",\"sqft_lot\",\"sqft_living15\",\"sqft_lot15\",\"yr_renovated\",\"lat\",\"long\"]].head(30)","2164289c":"from scipy.stats import spearmanr\n\ndf_train_noid = df_train.drop(\"id\",1)\ndf_train_noid = df_train_noid.drop(\"date\",1)\n\nplt.figure(figsize=(21,21))\nsns.set(font_scale=1.25)\nsns.heatmap(df_train_noid.corr(method='spearman'),fmt='.2f', annot=True, square=True , annot_kws={'size' : 15})","8a2bc583":"cor = df_train_noid.corr(method='spearman')\ncor[\"price\"].nlargest(n=20).index","77adbde5":"df_train[df_train[\"sqft_living\"]>13000]","339f68db":"data = pd.concat([df_train['price'], df_train['grade']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x='grade', y=\"price\", data=data)","a77af326":"df_train[df_train[\"grade\"]==3]","643d570a":"df_train.loc[(df_train['price']>14.7) & (df_train['grade'] == 8)]","7f3b74de":"df_train.loc[(df_train['price']>15.5) & (df_train['grade'] == 11)]","34634666":"df_train.plot(kind = \"scatter\", x = \"long\", y = \"lat\", alpha = 0.1, s = df_train[\"sqft_living\"]*0.02, \n             label = \"sqft_living\", figsize = (10, 8), c = \"price\", cmap = plt.get_cmap(\"jet\"), colorbar = True, sharex = False)","0495be91":"df_train = df_train.loc[df_train['id']!=2302]","5a1d3b27":"skew_columns = ['bedrooms', 'sqft_living', 'sqft_lot', 'sqft_above', 'sqft_basement']\n\nfor c in skew_columns:\n    df_train[c] = np.log1p(df_train[c].values)\n    df_test[c] = np.log1p(df_test[c].values)","983776c4":"for df in [df_train,df_test]:\n    df['date'] = df['date'].apply(lambda x: x[0:8])","9976ee53":"df_train.head(4)","841bbcbe":"df_train.loc[df_train['price']==15.856731016694035] # \uac00\uc7a5 \ube44\uc2fc \uc9d1","8ddf4b57":"for df in [df_train,df_test]:\n    df['total_rooms'] = df['bedrooms'] + df['bathrooms']\n    df['sqft_ratio'] = df['sqft_living'] \/ df['sqft_lot']\n    df['sqft_ratio15'] = df['sqft_living15'] \/ df['sqft_lot15']\n    df['date'] = df['date'].astype('int')","e5b8e4f1":"# \uac00\uc7a5 \ube44\uc2fc \uc9d1 \uacfc\uc758 \uc0c1\ub300\uc801\uc778 \uac70\ub9ac (\uc720\ud074\ub9ac\ub514\uc548 \uac70\ub9ac \uc0ac\uc6a9)\nfor df in [df_train,df_test]:\n    df['re_lat'] =  df['lat'] - 47.6298\n    df['re_long'] = df['long'] - (-122.323)\n    df['re_location'] = (df['re_lat']**2 + df['re_long']**2)**0.5\n    del df['re_lat'],df['re_long']","82e1f04c":"print(df_train.dtypes)","b8ad5ca5":"df_train.head(3)","e4301967":"#non_categorical_features = ['id', 'price','date','sqft_living', 'sqft_lot', 'floors','sqft_above', 'sqft_basement','yr_built','yr_renovated','sqft_living15','sqft_lot15','been_renovated']","b6a92753":"#for categorical_feature in list(df_train.columns):\n#    if categorical_feature not in non_categorical_features:\n#        df_train[categorical_feature] = df_train[categorical_feature].astype('category')","b1d39bf2":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import Imputer\nimport xgboost as xgb\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import LabelEncoder\n\ntarget_train = pd.DataFrame(df_train['price'].values)\nid_test = pd.DataFrame(df_test['id'].values)\n\ntrain = df_train.drop(['id','price'],1)\ntest = df_test.drop('id', 1)\n\n#my_imputer = Imputer()\n#train_X = my_imputer.fit_transform(X_train)\n#test_X = my_imputer.transform(X_test)","1fe6e489":"train_columns = [c for c in df_train.columns if c not in ['id','price']]\nfeature_importance_df = pd.DataFrame()\nkf = KFold(n_splits=5, random_state = 42, shuffle=True)","387b8fef":"xgb_preds=[]\nfor i, (train_index, test_index) in enumerate(kf.split(train)):\n    print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n    train_X, valid_X = train.iloc[train_index], train.iloc[test_index]\n    train_y, valid_y = target_train.iloc[train_index], target_train.iloc[test_index]\n\n\n    xgb_pars = {'objective' : 'reg:linear', \n            'booster' : \"gbtree\",\n            'eval_metric' : 'rmse', # rmse, \n            'nthread' : 4,\n            'eta' : 0.015, # learning Rate\n            'gamma' : 0,\n            'max_depth' : 6, \n            'subsample' : 0.8, \n            'colsample_bytree' : 0.6, \n            'min_child_weight' : 10,\n            'random_state' : 42, \n            'nrounds' : 2000,\n            'n_estimators' : 3200,\n            'tree_method' : 'hist'}\n\n\n    d_train = xgb.DMatrix(train_X, train_y)\n    d_valid = xgb.DMatrix(valid_X, valid_y)\n    d_test = xgb.DMatrix(test)\n    \n  \n    watchlist = [(d_train, 'train'), (d_valid, 'valid')]\n    model = xgb.train(xgb_pars, d_train, 4000,  watchlist, verbose_eval=500, early_stopping_rounds=100)\n    \n    y = model.get_score(importance_type = 'weight')\n    importance = pd.DataFrame.from_dict(y, orient = 'index')\n    importance = importance.reset_index()\n    importance = importance.rename(columns={'index': 'Feature', 0: 'Importance'})\n    feature_importance_df = pd.concat([feature_importance_df, importance], axis=0)\n\n    xgb_pred = model.predict(d_test, ntree_limit = model.best_ntree_limit)\n    xgb_preds.append(list(xgb_pred))","7afbc61c":"feature_importance = feature_importance_df.groupby(\"Feature\").mean().reset_index()\n\nplt.figure(figsize=(14,26))\nsns.barplot(x=\"Importance\", y=\"Feature\", data=feature_importance.sort_values(by=\"Importance\",ascending=False))\nplt.title('XGBoost Features (averaged over folds)')\nplt.tight_layout()\nplt.savefig('xgb_importances.png')","a4cd483f":"import lightgbm as lgb\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.pipeline import make_pipeline\n\nfrom sklearn.linear_model import RidgeCV\n\ntarget_train = pd.DataFrame(df_train['price'].values)\nid_test = pd.DataFrame(df_test['id'].values)\n\ntrain = df_train.drop(['id','price'],1)\ntest = df_test.drop('id', 1)\n\nparam = {'num_leaves': 31,\n         'min_data_in_leaf': 30, \n         'objective':'regression',\n         'max_depth': -1,\n         'learning_rate': 0.015,\n         \"min_child_samples\": 20,\n         \"boosting\": \"gbdt\",\n         \"feature_fraction\": 0.9,\n         \"bagging_freq\": 1,\n         \"bagging_fraction\": 0.9 ,\n         \"bagging_seed\": 11,\n         \"metric\": 'rmse',\n         \"lambda_l1\": 0.1,\n         \"verbosity\": -1,\n         \"nthread\": 4,\n         \"random_state\": 4950}\n","6c6e65bd":"train_columns = [c for c in df_train.columns if c not in ['id','price']]\nfeature_importance_df = pd.DataFrame()\nkf = KFold(n_splits=5, random_state = 42, shuffle=True)","600f60e7":"folds = KFold(n_splits=5, shuffle=True, random_state=42)\noof = np.zeros(len(train))\npredictions = np.zeros(len(test))\ny_reg = df_train['price']\nfeature_importance_df = pd.DataFrame()\n\n#run model\nfor fold_, (trn_idx, val_idx) in enumerate(folds.split(df_train)):\n    trn_data = lgb.Dataset(df_train.iloc[trn_idx][train_columns], label=y_reg.iloc[trn_idx])#, categorical_feature=categorical_feats)\n    val_data = lgb.Dataset(df_train.iloc[val_idx][train_columns], label=y_reg.iloc[val_idx])#, categorical_feature=categorical_feats)\n\n    num_round = 10000\n    clf = lgb.train(param, trn_data, num_round, valid_sets = [trn_data, val_data], verbose_eval=500, early_stopping_rounds = 100)\n    oof[val_idx] = clf.predict(df_train.iloc[val_idx][train_columns], num_iteration=clf.best_iteration)\n    #feature importance\n    fold_importance_df = pd.DataFrame()\n    fold_importance_df[\"Feature\"] = train_columns\n    fold_importance_df[\"importance\"] = clf.feature_importance()\n    fold_importance_df[\"fold\"] = fold_ + 1\n    feature_importance_df = pd.concat([feature_importance_df, fold_importance_df], axis=0)\n    #predictions\n    predictions += clf.predict(df_test[train_columns], num_iteration=clf.best_iteration) \/ folds.n_splits\n    \ncv = np.sqrt(mean_squared_error(oof, y_reg))\nprint(cv)","0f9b12f3":"##plot the feature importance\ncols = (feature_importance_df[[\"Feature\", \"importance\"]]\n        .groupby(\"Feature\")\n        .mean()\n        .sort_values(by=\"importance\", ascending=False)[:1000].index)\nbest_features = feature_importance_df.loc[feature_importance_df.Feature.isin(cols)]\n\nplt.figure(figsize=(14,26))\nsns.barplot(x=\"importance\", y=\"Feature\", data=best_features.sort_values(by=\"importance\",ascending=False))\nplt.title('LightGBM Features (averaged over folds)')\nplt.tight_layout()\nplt.savefig('lgbm_importances.png')","092e5171":"submission=pd.read_csv('..\/input\/sample_submission.csv')\nsubmission['price']=np.expm1(predictions)\nsubmission.to_csv('submission.csv',index=False) ","44fdde52":"# importances = my_model.booster().get_fscores()\n# importances = importances.tolist()\n# importances","29df05b4":"# len(df_train.columns)","025abbb9":"# importance_frame = pd.DataFrame({'Importance': importances , 'Feature': df_test.columns})\n# importance_frame.sort_values(by = 'Importance', inplace = True)\n# importance_frame.plot(kind = 'barh', x = 'Feature', figsize = (8,8), color = 'orange')","ae5086da":"# sns.set(font_scale = 1.5)\n# fig, ax = plt.subplots(figsize=(8, 6))\n# xgb.plot_importance(my_model, ax=ax)","a3b28a8c":"# submission=pd.read_csv('..\/input\/sample_submission.csv')","67917534":"# submission['price']=np.exp(xgb_preds)\n# submission.to_csv('submission.csv',index=False)","f0e4e324":"# submission","72432ea0":"# import torch\n# import torch.nn as nn\n# import torchvision\n# import torchvision.transforms as transforms\n\n# lat_values = np.array(df_train['lat'].values)\n# long_values = np.array(df_train['long'].values)\n# location = torch.from_numpy(np.vstack((lat_values,long_values)).T)\n\n# price = np.exp(torch.from_numpy(np.array(df_train['price'].values)))\n\n# print(location)\n# print(price)\n","60f964c4":"# input_size = 2\n# hidden_size = 3\n# num_classes = 1\n# learning_rate = 0.001\n# class NeuralNet(nn.Module):\n#     def __init__(self, input_size, hidden_size, num_classes):\n#         super(NeuralNet, self).__init__()\n#         self.fc1 = nn.Linear(input_size, hidden_size) \n#         self.relu = nn.Sigmoid()\n#         self.fc2 = nn.Linear(hidden_size, num_classes)  \n# #        self.relu = nn.ReLU()\n# #        self.fc3 = nn.Linear(hidden_size, num_classes)\n    \n#     def forward(self, x):\n#         out = self.fc1(x)\n#         out = self.relu(out)\n#         out = self.fc2(out)\n#  #       out = self.relu(out)\n#  #       out = self.fc3(out)\n#         return out\n    \n# model = NeuralNet(input_size, hidden_size, num_classes)\n# print(model)\n","61bb2c41":"# # \ub610\ud55c, nn \ud328\ud0a4\uc9c0\uc5d0\ub294 \ub110\ub9ac \uc0ac\uc6a9\ud558\ub294 \uc190\uc2e4 \ud568\uc218\ub4e4\uc5d0 \ub300\ud55c \uc815\uc758\ub3c4 \ud3ec\ud568\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4;\n# # \uc5ec\uae30\uc5d0\uc11c\ub294 \ud3c9\uade0 \uc81c\uacf1 \uc624\ucc28(MSE; Mean Squared Error)\ub97c \uc190\uc2e4 \ud568\uc218\ub85c \uc0ac\uc6a9\ud558\uaca0\uc2b5\ub2c8\ub2e4.\n# loss_fn = torch.nn.MSELoss(size_average=False)\n# optimizer = torch.optim.Adam(model.parameters(), lr = learning_rate)","7ec353e1":"# x_1 = location.float()\n# y_1 = price.float()\n\n# for t in range(256):\n#     # \uc21c\uc804\ud30c \ub2e8\uacc4: \ubaa8\ub378\uc5d0 x\ub97c \uc804\ub2ec\ud558\uc5ec \uc608\uc0c1\ud558\ub294 y \uac12\uc744 \uacc4\uc0b0\ud569\ub2c8\ub2e4. \ubaa8\ub4c8 \uac1d\uccb4\ub294\n#     # __call__ \uc5f0\uc0b0\uc790\ub97c \ub36e\uc5b4\uc368\uc11c(Override) \ud568\uc218\ucc98\ub7fc \ud638\ucd9c\ud560 \uc218 \uc788\uac8c \ud569\ub2c8\ub2e4.\n#     # \uadf8\ub807\uac8c \ud568\uc73c\ub85c\uc368 \uc785\ub825 \ub370\uc774\ud130\uc758 Tensor\ub97c \ubaa8\ub4c8\uc5d0 \uc804\ub2ec\ud558\uace0 \ucd9c\ub825 \ub370\uc774\ud130\uc758\n#     # Tensor\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4.\n#     y_pred = model(x_1)\n\n#     # \uc190\uc2e4\uc744 \uacc4\uc0b0\ud558\uace0 \ucd9c\ub825\ud569\ub2c8\ub2e4. \uc608\uce21\ud55c y\uac12\uacfc \uc815\ub2f5 y\ub97c \uac16\ub294 Tensor\ub4e4\uc744 \uc804\ub2ec\ud558\uace0,\n#     # \uc190\uc2e4 \ud568\uc218\ub294 \uc190\uc2e4(loss)\uc744 \uac16\ub294 Tensor\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n#     loss = loss_fn(y_pred, y_1)\n#     print(t, loss.item(), y_1[t])\n\n#     # \uc5ed\uc804\ud30c \ub2e8\uacc4\ub97c \uc2e4\ud589\ud558\uae30 \uc804\uc5d0 \ubcc0\ud654\ub3c4\ub97c 0\uc73c\ub85c \ub9cc\ub4ed\ub2c8\ub2e4.\n#     optimizer.zero_grad()\n\n#     # \uc5ed\uc804\ud30c \ub2e8\uacc4: \ubaa8\ub378\uc758 \ud559\uc2b5 \uac00\ub2a5\ud55c \ubaa8\ub4e0 \ub9e4\uac1c\ubcc0\uc218\uc5d0 \ub300\ud574\uc11c \uc190\uc2e4\uc758 \ubcc0\ud654\ub3c4\ub97c\n#     # \uacc4\uc0b0\ud569\ub2c8\ub2e4. \ub0b4\ubd80\uc801\uc73c\ub85c \uac01 \ubaa8\ub4c8\uc758 \ub9e4\uac1c\ubcc0\uc218\ub294 requires_grad=True \uc77c \ub54c\n#     # Tensor \ub0b4\uc5d0 \uc800\uc7a5\ub418\ubbc0\ub85c, \uc774 \ud638\ucd9c\uc740 \ubaa8\ub4e0 \ubaa8\ub378\uc758 \ubaa8\ub4e0 \ud559\uc2b5 \uac00\ub2a5\ud55c \ub9e4\uac1c\ubcc0\uc218\uc758\n#     # \ubcc0\ud654\ub3c4\ub97c \uacc4\uc0b0\ud558\uac8c \ub429\ub2c8\ub2e4.\n#     loss.backward()\n\n#     # \uacbd\uc0ac\ud558\uac15\ubc95(Gradient Descent)\ub97c \uc0ac\uc6a9\ud558\uc5ec \uac00\uc911\uce58\ub97c \uac31\uc2e0\ud569\ub2c8\ub2e4. \uac01 \ub9e4\uac1c\ubcc0\uc218\ub294\n#     # Tensor\uc774\ubbc0\ub85c \uc774\uc804\uc5d0 \ud588\ub358 \uac83\uacfc \uac19\uc774 \ubcc0\ud654\ub3c4\uc5d0 \uc811\uadfc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n#     optimizer.step()\n    \n# #    with torch.no_grad():\n# #        for param in model.parameters():\n# #            param -= learning_rate * param.grad","44082d1c":"# torch.save(y_pred, 'model.ckpt')","d93567dd":"# model1 = torch.load('model.ckpt')","79ef09d6":"# model1.detach().numpy()","e831f6a4":"# np.exp(model1.detach().numpy())","e92ad1e5":"sqft_living = 13540\uc774 \uac00\uc7a5 \ub5a8\uc5b4\uc9c4 \ubaa8\uc2b5\uc744 \ubcfc \uc218 \uc788\ub294\ub370, \uc774\uc0c1\uce58\ub85c \ud310\ubcc4\ud574\uc57c\ud558\ub294 \uc9c0\uc5d0 \ub300\ud55c \uace0\ubbfc\uc740 \uc880 \ub354 \ud544\uc694\ud574 \ubcf4\uc778\ub2e4.","fe2383c2":"* ID : \uc9d1\uc744 \uad6c\ubd84\ud558\ub294 \ubc88\ud638\n* date : \uc9d1\uc744 \uad6c\ub9e4\ud55c \ub0a0\uc9dc\n* price : \uc9d1\uc758 \uac00\uaca9(Target variable)\n* bedrooms : \uce68\uc2e4\uc758 \uc218\n* bathrooms : \uce68\uc2e4 \uac1c\uc218 \ub2f9 \ud654\uc7a5\uc2e4\uc758 \uc218(\ud654\uc7a5\uc2e4\uc758 \uc218 \/ \uce68\uc2e4\uc758 \uc218 )\n* sqft_living : \uc8fc\uac70 \uacf5\uac04\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)\n* sqft_lot : \ubd80\uc9c0\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)\n* floors : \uc9d1\uc758 \uce35 \uc218\n* waterfront : \uc9d1\uc758 \uc804\ubc29\uc5d0 \uac15\uc774 \ud750\ub974\ub294\uc9c0 \uc720\ubb34 (a.k.a. \ub9ac\ubc84\ubdf0)\n* view : \uc9d1\uc774 \uc5bc\ub9c8\ub098 \uc88b\uc544 \ubcf4\uc774\ub294\uc9c0\uc758 \uc815\ub3c4\n* condition : \uc9d1\uc758 \uc804\ubc18\uc801\uc778 \uc0c1\ud0dc\n* grade : King County grading \uc2dc\uc2a4\ud15c \uae30\uc900\uc73c\ub85c \ub9e4\uae34 \uc9d1\uc758 \ub4f1\uae09\n* sqft_above : \uc9c0\ud558\uc2e4\uc744 \uc81c\uc678\ud55c \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)\n* sqft_basement : \uc9c0\ud558\uc2e4\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)\n* yr_built : \uc9c0\uc5b4\uc9c4 \ub144\ub3c4\n* yr_renovated : \uc9d1\uc744 \uc7ac\uac74\ucd95\ud55c \ub144\ub3c4\n* zipcode : \uc6b0\ud3b8\ubc88\ud638\n* lat : \uc704\ub3c4\n* long : \uacbd\ub3c4\n* sqft_living15 : 2015\ub144 \uae30\uc900 \uc8fc\uac70 \uacf5\uac04\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801, \uc9d1\uc744 \uc7ac\uac74\ucd95\ud588\ub2e4\uba74, \ubcc0\ud654\uac00 \uc788\uc744 \uc218 \uc788\uc74c)\n* sqft_lot15 : 2015\ub144 \uae30\uc900 \ubd80\uc9c0\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801, \uc9d1\uc744 \uc7ac\uac74\ucd95\ud588\ub2e4\uba74, \ubcc0\ud654\uac00 \uc788\uc744 \uc218 \uc788\uc74c)","886a2ff2":"\uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \ud65c\uc6a9\ud574 lat\ubcc0\uc218\uc640 long\ubcc0\uc218\uc758 \ud2b9\uc9d5 \uacb0\ud569 \ud559\uc2b5","e74833fa":"sqlf_above \/ sqlf_basement\n\nsqlf_above\ub294 \uc9c0\ud558\uc2e4\uc744 \uc81c\uc678\ud55c \uc9c0\uc0c1\uc758 \ud3c9\ubc29 \ud53c\ud2b8 \uc774\uba70, sqlf_basement\ub294 \uc9c0\ud558\uc2e4\uc758 \ud3c9\ubc29 \ud53c\ud2b8\uc774\ub2e4.\n\n\uc774\ub54c, sqlf_above\ub294 \ubd80\uc9c0 \uc804\uccb4\ub97c \ub9d0\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c, sqlf_living, \uc989 \uc2e4\uc81c \uc804\uc6a9 \uba74\uc801 \uc911\uc5d0\uc11c \uc9c0\uc0c1\uc778 \uac83\ub4e4\nsqlf_basement\ub294 \uc2e4\uc81c \uc804\uc6a9 \uba74\uc801 \uc911\uc5d0\uc11c \uc9c0\ud558\uc2e4\uc778 \uba74\uc801\uc744 \ub73b\ud55c\ub2e4.","566e056a":"**sqlf_living \/ sqlf_lot\n\n\uc8fc\uac70 \ud3c9\ubc29 \ud53c\ud2b8 \/ \ubd80\uc9c0 \ud3c9\ubc29 \ud53c\ud2b8\n\n\ub2e8\uc704\ub294 1 \uc2a4\ud018\uc5b4\ud53c\ud2b8 (sqlf)\ub85c \ud45c\ud604\ub418\uc5b4 \uc788\ub2e4.\n1 sqlf = 0.0281\ud3c9\uc774\ub2e4.\n\n\ub300\ub7b5 1000sqlf\uc740 \ub300\ub7b5 28\ud3c9~32\ud3c9 \uc815\ub3c4\ub85c \uac00\ub2a0\ud558\uc5ec \ubcf4\uba74 \ub41c\ub2e4.\n\nsqlf_lot\ub294 \ubd80\uc9c0 \ud3c9\ubc29 \ud53c\ud2b8\uc778\ub370, \ud754\ud788 \uc6b0\ub9ac\ub098\ub77c\uc758 \uacbd\uc6b0, 32\ud3c9\ud615 \uc544\ud30c\ud2b8\ub294 \uc77c\ubc18\uc801\uc73c\ub85c \uc2e4\uc81c\ub85c \uc4f0\ub294 \uc804\uc6a9 \uba74\uc801\uc740 25.7\ud3c9 \uc815\ub3c4\uc774\ub2e4.\n\n\uc989 sqlf_living\uc740 \uc2e4\uc81c \uc0ac\uc6a9 \uba74\uc801 \/ sqlf\ub294 \ucd1d \ubd80\uc9c0\uc758 \uba74\uc801\uc73c\ub85c \uc0dd\uac01\ud558\uba74 \ub41c\ub2e4.","93a7272a":"**ID\n\nID\ub294 \uc21c\uc11c\ub300\ub85c \uace0\uc720\ubc88\ud638\uc774\uba70, date\ub294 \ubaa8\ub450 T000000\uc774 \ub2ec\ub824 \uc788\ub2e4.","16f36b64":"3-3 \ubcc0\uc218 \uc218\uc815\n\n\uba3c\uc800, date \ub4a4\uc5d0 \uc788\ub294 T000000\uc744 \uc81c\uc678\ud569\ub2c8\ub2e4.","49b818c9":"4. \ubcc0\uc218 \uc0dd\uc131","a7b9ead7":"* sqft_living15 : 2015\ub144 \uae30\uc900 \uc8fc\uac70 \uacf5\uac04\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801, \uc9d1\uc744 \uc7ac\uac74\ucd95\ud588\ub2e4\uba74, \ubcc0\ud654\uac00 \uc788\uc744 \uc218 \uc788\uc74c)\n* sqft_lot15 : 2015\ub144 \uae30\uc900 \ubd80\uc9c0\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801, \uc9d1\uc744 \uc7ac\uac74\ucd95\ud588\ub2e4\uba74, \ubcc0\ud654\uac00 \uc788\uc744 \uc218 \uc788\uc74c)\n\n\n\nhttps:\/\/www.kaggle.com\/c\/2019-2nd-ml-month-with-kakr\/discussion\/83533\nhttps:\/\/geodacenter.github.io\/data-and-lab\/\/KingCounty-HouseSales2015\/\n\ub4f1\uc5d0 \ub530\ub978 \uc815\uc758\n\n* sqft_living15 : \uc774\uc6c3 15\uac00\uad6c\uc758 \ud3c9\uade0\uc744 \uacc4\uc0b0\ud55c \uac12\n* sqft_lot15 : \uc774\uc6c3 15\uac00\uad6c\uc758 \ud3c9\uade0\uc744 \uacc4\uc0b0\ud55c \uac12\n\nsqft_lot15\uc758 \uac12\uacfc sqft_lot\uc758 \uac12\uc774 \uac19\uc744 \ub54c, \uc544\ud30c\ud2b8\uac00 \uc544\ub2c8\ub0d0\ub294 \uc758\uacac\uc774 \uc874\uc7ac\ud588\ub2e4.\n\ud558\uc9c0\ub9cc, \ud574\ub2f9 \uac12\uc758 \uc704\ub3c4\uc640 \uacbd\ub3c4\ub97c \ud655\uc778\ud55c \uacb0\uacfc \uc544\ud30c\ud2b8\ub294 \uc544\ub2c8\uc5c8\ub2e4..","3f62ac19":"price\uac00 \ub192\uc744 \uc218\ub85d \uc218\ub85d condition \uc774 \ub192\ub2e4\ub294 \uac83\uc744 \ud655\uc778 \ud560 \uc218 \uc788\ub2e4.","4abd8957":"**bathrooms\n\n\nbathrooms\ub294 \uc18c\uc218\uc810\uc774 \uc874\uc7ac\ud558\ub294\ub370, \uc774\ub294 \ubbf8\uad6d\uc5d0\uc11c\ub294\n\nfull bath : \ud654\uc7a5\uc2e4, \uc138\uba74\ub300, \uc0e4\uc6cc\uc2e4, \uc695\uc870\n3\/4 bath : \ud654\uc7a5\uc2e4, \uc138\uba74\ub300, \uc0e4\uc6cc\uc2e4\nhalf bath : \ud654\uc7a5\uc2e4, \uc138\uba74\ub300\n\n\uacfc \uac19\uc774 \ud45c\uae30\ud55c\ub2e4\uace0 \ud55c\ub2e4.  \ucd9c\ucc98 : https:\/\/www.kaggle.com\/c\/2019-2nd-ml-month-with-kakr\/discussion\/83533\n\n\uc608\ub97c \ub4e4\uc5b4, 2.25\uac00 \uac12\uc774\ub77c\uace0 \ud55c\ub2e4\uba74, full bath + 3\/4 bath + half bath \ub85c \ucd1d 3\uac1c\uac00 \uc874\uc7ac\ud55c\ub2e4\uace0 \ud560 \uc218 \uc788\ub2e4.\n\n\uc989, 0~1\uc740 1\uac1c, 1~2\ub294 2\uac1c, 2~3\ub294 3\uac1c\ub85c \ucd94\uc815 \uac00\ub2a5\ud558\ub2e4.","643bfefe":"**yr_bulit \/ yr_renovated\n\n\ub2e8\uc21c\ud788 \uc9c0\uc5b4\uc9c4 \uc5f0\ub3c4\uc640 \ub9c8\uc9c0\ub9c9\uc73c\ub85c \ub9ac\ubaa8\ub378\ub9c1 \ub41c \uc5f0\ub3c4\ub2e4.\n\nyr_built : 1900 ~ 2015\nyr_renovated : 1940 ~ 2015    \/\/   0\uc740 \ud55c\ubc88\ub3c4 \ub9ac\ubaa8\ub378\ub9c1 \ub41c \uc801 \uc5c6\ub2e4\ub294 \uac83\uc744 \ub73b\ud55c\ub2e4.","ace80dcb":"\uc544\ub798\uc758 map\uc744 \ubcf4\uba74, id=2302\uc778 \uacbd\uc6b0, map\uc758 \ub300\ub7b5\uc801\uc778 \uc704\uce58\uac00 \ub0ae\uac8c \ud615\uc131\ub418\uc5b4 \uc788\ub294 \uacf3\uc774\uace0, sqft \ub610\ud55c \uc791\uc740\ub370\ub3c4 \ubd88\uad6c\ud558\uace0, price\uac00 \ub192\uac8c \ucc45\uc815\ub418\uc5c8\ub2e4\ub294 \uac83\uc73c\ub85c \uc774\uc0c1\uce58\ub85c \uaddc\uc815\ud558\uace0 \uc81c\uac70\ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n\ubc18\uba74, id = 4123\uc778 \uacbd\uc6b0\uc5d0\ub294, \uc704\ub3c4\uac00 47.5\ubcf4\ub2e4 \uc870\uae08 \uc704\uc778 \uacbd\uc6b0\ub85c, \uaf64\ub098 \uc911\uc2ec\uc9c0\ub85c \ubcf4\uc5ec\uc9c0\uae30 \ub54c\ubb38\uc5d0, \uc81c\uac70\ud558\uc9c0 \uc54a\uaca0\uc2b5\ub2c8\ub2e4.","89f96516":"\ubaa9\uc801 \ubcc0\uc218\uc758 \ubd84\ud3ec\uac00 \uad49\uc7a5\ud788 \uce58\uc6b0\uccd0 \uc788\uae30 \ub54c\ubb38\uc5d0, \uc815\uaddc\ud654(log)\ub97c \ucde8\ud574\uc904 \ud544\uc694\uc131\uc774 \uc788\ub2e4.\n\n\uc815\uaddc\ud654(log)\ub97c \ucde8\ud574\uc8fc\uba74 \uc544\ub798\uc640 \uac19\uc774 \uc774\uc05c \ubaa8\uc591\uc758 price\uac00 \uca18 \ud558\uace0 \ub098\uc628\ub2e4.","0af90ea4":"price\uac00 \ub192\uc744 \uc218\ub85d \uc218\ub85d veiw \uac00 \ub192\ub2e4\ub294 \uac83\uc744 \ud655\uc778 \ud560 \uc218 \uc788\ub2e4.\n\n","5d452717":"\ud574\ub2f9 \uac12\uc758 \uc704\uce58\uac00 \uc9d1\uc774 \ub113\uc74c\uc5d0 \ube44\ud574 \uac00\uaca9\uc774 \ub0ae\uc740 \uac83\uc740, \ud574\ub2f9 \uc704\ub3c4\uc758 \uc704\uce58\uc5d0 \ub530\ub978 \uac83\uc774\ub77c\uace0 \uc0dd\uac01\ub418\uc5b4, \uc774\uc0c1\uce58\ub85c \uaddc\uc815\ud558\uc9c0 \uc54a\uaca0\uc2b5\ub2c8\ub2e4. (\uc544\ub798\uc758 map \ud655\uc778)","355f6686":"**waterfront\n\nwaterfront == 1 \uc774 \ub9ac\ubc84\ubdf0 \uc778 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4. 0\uc740 \ubb3c\uc774 \uc548\ubcf4\uc774\ub294 \uc9d1\n\n\uadf8\ub9ac\uace0 \ub300\uccb4\uc801\uc73c\ub85c \ub9ac\ubc84\ubdf0\uc778 \uacf3\uc740 \uac00\uaca9\ub300\uac00 \uaf64\ub098 \ub192\uac8c \ud615\uc131\ub418\uc5b4 \uc788\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4.","d75fb1fd":"grade\uc5d0\uc11c \uc774\uc0c1\uce58\ub85c \ubcf4\uc5ec\uc84c\ub358 \uac12\ub4e4\uc5d0 \ub300\ud574\uc11c \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","4418fd16":"**Price\nPrice\ub294 \ubaa9\uc801 \ubcc0\uc218\uc774\uba70, \ubd84\ud3ec\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.","27959a12":"price\uac00 \ub192\uc744 \uc218\ub85d \uc218\ub85d grade \uac00 \ub192\ub2e4\ub294 \uac83\uc744 \ud655\uc778 \ud560 \uc218 \uc788\ub2e4.\n\n\"1\uc5d0\uc11c 13\uae4c\uc9c0\uc758 \uc0c9\uc778. 1-3\uc740 \uac74\ubb3c \uac74\ucd95 \ubc0f \ub514\uc790\uc778\uc5d0 \ubbf8\uce58\uc9c0 \ubabb\ud558\uace0 7\uc740 \ud3c9\uade0 \uc218\uc900\uc758 \uac74\ucd95 \ubc0f \ub514\uc790\uc778\uc744, 11-13\uc740 \ub192\uc740 \uc218\uc900\uc758 \uac74\ucd95 \ubc0f \ub514\uc790\uc778\uc744 \uc9c0\ub2c8\uace0 \uc788\uc2b5\ub2c8\ub2e4.\" \ub77c\uace0 \ud55c\ub2e4.\n\n\uadf8\ub7f0\ub370, 3\uc758 \ubd84\ud3ec\uac00 \ud2b9\uc774\ud558\ub2e4\ub294 \uc0ac\uc2e4\uc5d0 \ub300\ud574 \uc870\uae08 \ub354 \uc0dd\uac01\ud574\ubcfc \ud544\uc694\uac00 \uc788\uc5b4 \ubcf4\uc778\ub2e4.","3c8b0ffb":"3. \ub370\uc774\ud130 \uc804\ucc98\ub9ac\n\n3-1 \uc774\uc0c1\uce58 \uc81c\uac70\n\nsqft_living\uc758 \uac12\uc785\ub2c8\ub2e4.","e1288cb3":"3-2 \ubcc0\uc218 \uc815\uaddc\ud654\n\n\ucd9c\ucc98. https:\/\/www.kaggle.com\/kcs93023\/2019-ml-month-2nd-baseline\n\n\uc704 \ucee4\ub110\uc744 \ud65c\uc6a9\ud558\uc5ec, \ubd84\ud3ec\uac00 \uce58\uc6b0\uccd0\uc838 \uc788\ub294 \ubcc0\uc218\ub4e4\uc5d0 \ub300\ud574 \uc815\uaddc\ud654\ub97c \uc9c4\ud589\ud569\ub2c8\ub2e4.","87745edc":"**zipcode : \uc6b0\ud3b8\ubc88\ud638\nlat : \uc704\ub3c4\nlong : \uacbd\ub3c4\n\nhttps:\/\/www.kaggle.com\/fulrose\/map-visualization-with-folium-ing \n\ud574\ub2f9 \ucee4\ub110\uc744 \ucc38\uc870\ud558\uba74,\n\n\uac15\ub0a8, \uc11c\ucd08, \ubc18\ud3ec \ub4f1\uacfc \uac19\uc774 \ud2b9\uc815 \uc9c0\uc5ed\uc5d0\uc11c\uc758 \uc9d1 \uac12\uc774 \ub192\ub2e4\ub294 \uc0ac\uc2e4\uc744 \uc54c \uc218 \uc788\ub2e4.\n\n\ud574\ub2f9 \uc704\ub3c4\uc640 \uacbd\ub3c4\ub97c google map\uc5d0 \uac80\uc0c9\ud574\uc11c zip code\ub97c \uac80\uc0c9\ud558\uba74 \uc77c\uce58\ud558\ub294 \uacb0\uacfc\ub97c \uc5bb\uc744 \uc218 \uc788\ub2e4.\n\n\ud574\ub2f9 \ubd84\ud3ec\ub97c \uc704\ub3c4, \uacbd\ub3c4\uc5d0 \ub530\ub77c \ub098\ud0c0\ub0b4\uba74, \ubd84\ud3ec\uc640 \uc9d1\uac12\uc744 \ubcfc \uc218 \uc788\ub2e4.","1c354f2b":"\ucd1d \uc815\ub9ac\n\n****ID : \uc9d1\uc744 \uad6c\ubd84\ud558\ub294 \ubc88\ud638**\n\n   \uace0\uc720 \ubc88\ud638\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\uc74c \n  \n****date : \uc9d1\uc744 \uad6c\ub9e4\ud55c \ub0a0\uc9dc**\n\n   T000000 \uc81c\uc678\n\n****price : \uc9d1\uc758 \uac00\uaca9(Target variable)**\n\n\n****bedrooms : \uce68\uc2e4\uc758 \uc218**\n\nbedrooms\ub294 \ub2e8\uc21c\ud558\uac8c \uce68\uc2e4 \uac1c\uc218\ub85c \ucd94\uc815\ub41c\ub2e4.\n\n****bathrooms : \uce68\uc2e4 \uac1c\uc218 \ub2f9 \ud654\uc7a5\uc2e4\uc758 \uc218(\ud654\uc7a5\uc2e4\uc758 \uc218 \/ \uce68\uc2e4\uc758 \uc218 )**\n\nfull bath : \ud654\uc7a5\uc2e4, \uc138\uba74\ub300, \uc0e4\uc6cc\uc2e4, \uc695\uc870 3\/4 bath : \ud654\uc7a5\uc2e4, \uc138\uba74\ub300, \uc0e4\uc6cc\uc2e4 half bath : \ud654\uc7a5\uc2e4, \uc138\uba74\ub300     \n\n\uc608\ub97c \ub4e4\uc5b4, bathrooms\uc758 \uac12\uc774 2.25\ub77c\uace0 \ud55c\ub2e4\uba74, \uc9d1 \uc548\uc5d0 full bath\ud558\ub098, 3\/4 bath\ud558\ub098, half bath \ud558\ub098\uac00 \uc788\uc744 \uac83\uc73c\ub85c \uc720\ucd94\ud560 \uc218 \uc788\ub2e4.\n\n\ucd9c\ucc98 : https:\/\/www.kaggle.com\/c\/2019-2nd-ml-month-with-kakr\/discussion\/83533\n\n\n****sqft_living : \uc8fc\uac70 \uacf5\uac04\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)**\n\n\ub2e8\uc704\ub294 1 \uc2a4\ud018\uc5b4\ud53c\ud2b8 (sqlf)\ub85c \ud45c\ud604\ub418\uc5b4 \uc788\uc73c\uba70 1 sqlf = 0.0281\ud3c9\uc774\ub2e4.\n\nsqlf_living\uc740 \uc2e4\uc81c \uc0ac\uc6a9 \uba74\uc801\uc774\ub2e4. sqlf\ub294 \ucd1d \ubd80\uc9c0\uc758 \uba74\uc801\uc73c\ub85c \uc0dd\uac01\ud558\uba74 \ub41c\ub2e4.\n\n****sqft_lot : \ubd80\uc9c0\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)**\n\nsqlf_lot\ub294 \ubd80\uc9c0 \ud3c9\ubc29 \ud53c\ud2b8\uc778\ub370, \ud754\ud788 \uc6b0\ub9ac\ub098\ub77c\uc758 \uacbd\uc6b0, 32\ud3c9\ud615 \uc544\ud30c\ud2b8\ub294 \uc77c\ubc18\uc801\uc73c\ub85c \uc2e4\uc81c\ub85c \uc4f0\ub294 \uc804\uc6a9 \uba74\uc801\uc740 25.7\ud3c9 \uc815\ub3c4\uc774\ub2e4.\n\nsqlf_lot\ub294 \ucd1d \ubd80\uc9c0\uc758 \uba74\uc801\uc73c\ub85c \uc0dd\uac01\ud558\uba74 \ub41c\ub2e4.\n\n\n****floors : \uc9d1\uc758 \uce35 \uc218**\n\n\uc9d1\uc758 \uce35 \uc218\ub85c\ub294 1.0 \/ 1.5 \/ 2.0 \/ 2.5 \/ 3.0 \/ 3.5 \uc758 \ubcc0\uc218 \uac12\uc774 \uc874\uc7ac\ud55c\ub2e4.\n\n\uc774 \ub54c, 0.5\uac00 \ub2ec\ub824\uc788\ub294 \uac83\ub4e4\uc740 \uc628\uc804\ud55c \uce35\uc774 \uc544\ub2cc \ub2e4\ub77d\ubc29 \uc218\uc900\uc758 \ubc29\uc774 \uc874\uc7ac\ud560 \ub54c\ub97c \ub9d0\ud55c\ub2e4.\n\n\ud574\ub2f9 \uc9c0\uc5ed\uc778 \uc2dc\uc560\ud2c0, \uc989 \ubbf8\uad6d\uc5d0\uc11c \uaf64\ub098 \ud754\ud558\uac8c \ubcfc \uc218 \uc788\ub294 \uac00\uc815\uc9d1\uc740 1.5\uce35\uc758 \uac74\ubb3c\uc73c\ub85c, \uc9c0\ubd95\uc774 \uc0bc\uac01\ud615\uc73c\ub85c \ub418\uc5b4 \uc788\uc73c\uba74\uc11c \ub2e4\ub77d\ubc29\uc774 \ub538\ub824 \uc788\ub294 \uacbd\uc6b0\uc774\ub2e4.\n\n****waterfront : \uc9d1\uc758 \uc804\ubc29\uc5d0 \uac15\uc774 \ud750\ub974\ub294\uc9c0 \uc720\ubb34 (a.k.a. \ub9ac\ubc84\ubdf0)**\n\n0\uc774 \uc5c6\ub2e4\ub294 \ub73b \uc774\uace0 1\uc774 \uc788\ub2e4\ub294 \ub73b\uc774\ub2e4.\n\n\n****view : \uc9d1\uc774 \uc5bc\ub9c8\ub098 \uc88b\uc544 \ubcf4\uc774\ub294\uc9c0\uc758 \uc815\ub3c4**\n\n1~5\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\uc73c\uba70, \uc9d1\uc758 \uc678\uad00\uc5d0 \ub300\ud55c \ud3c9\uac00\ub85c \uc0dd\uac01\ud560 \uc218 \uc788\ub2e4.\n\nview \uac12\uc740 \ub192\uc744 \uc218\ub85d \uc88b\ub2e4.\n\n****condition : \uc9d1\uc758 \uc804\ubc18\uc801\uc778 \uc0c1\ud0dc**\n\n1~5\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\uc73c\uba70, \uc9d1\uc758 \uc804\ubc18\uc801\uc778 \uc0c1\ud0dc\uc5d0 \ub300\ud55c \ud3c9\uac00\ub2e4.\n\ncondition \uac12\uc740 \ub192\uc744 \uc218\ub85d \uc88b\ub2e4.\n\n\n****grade : King County grading \uc2dc\uc2a4\ud15c \uae30\uc900\uc73c\ub85c \ub9e4\uae34 \uc9d1\uc758 \ub4f1\uae09**\n\n1~13\uc758 \uac12\uc73c\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\uc73c\uba70,. 1-3\uc740 \uac74\ubb3c \uac74\ucd95 \ubc0f \ub514\uc790\uc778\uc5d0 \ubbf8\uce58\uc9c0 \ubabb\ud558\uace0 7\uc740 \ud3c9\uade0 \uc218\uc900\uc758 \uac74\ucd95 \ubc0f \ub514\uc790\uc778\uc744, 11-13\uc740 \ub192\uc740 \uc218\uc900\uc758 \uac74\ucd95 \ubc0f \ub514\uc790\uc778\uc744 \uc9c0\ub2c8\uace0 \uc788\ub2e4\uace0 \ub300\ub7b5\uc801\uc73c\ub85c \ubcf4\uba74 \ub41c\ub2e4.\n\ub192\uc744 \uc218\ub85d \ub192\uc740 \ub4f1\uae09\uc774\ub2e4.\n\n****sqft_above : \uc9c0\ud558\uc2e4\uc744 \uc81c\uc678\ud55c \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)**\n\nsqlf_above\ub294 \uc9c0\ud558\uc2e4\uc744 \uc81c\uc678\ud55c \uc9c0\uc0c1\uc758 \ud3c9\ubc29 \ud53c\ud2b8\uc774\ub2e4.\n\uc774\ub54c, sqlf_above\ub294 \ubd80\uc9c0 \uc804\uccb4\ub97c \ub9d0\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c, sqlf_living, \uc989 \uc2e4\uc81c \uc804\uc6a9 \uba74\uc801 \uc911\uc5d0\uc11c \uc9c0\uc0c1\uc778 \uac83\ub4e4\uc744 \uc758\ubbf8\ud55c\ub2e4.\n\n****sqft_basement : \uc9c0\ud558\uc2e4\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)**\n\nsqlf_basement\ub294 \uc9c0\ud558\uc2e4\uc758 \ud3c9\ubc29 \ud53c\ud2b8\uc774\ub2e4.\nsqlf_basement\ub294 \uc2e4\uc81c \uc804\uc6a9 \uba74\uc801 \uc911\uc5d0\uc11c \uc9c0\ud558\uc2e4\uc778 \uba74\uc801\uc744 \ub73b\ud55c\ub2e4.\n\n****yr_built : \uc9c0\uc5b4\uc9c4 \ub144\ub3c4**\n\n1900~2015\n\n****yr_renovated : \uc9d1\uc744 \uc7ac\uac74\ucd95\ud55c \ub144\ub3c4**\n\n1940~2015\n0\uc740 \ud55c\ubc88\ub3c4 \uc7ac\uac74\ucd95\uc774 \ub41c \uc801 \uc5c6\ub294 \uc9d1\uc744 \uc758\ubbf8\ud55c\ub2e4.\n\n****zipcode : \uc6b0\ud3b8\ubc88\ud638**\n\n\uc2e4\uc81c \uac12\uc744 \ub098\ud0c0\ub0c4, \uc704\ub3c4, \uacbd\ub3c4\uc640 \uc77c\uce58 ( google map\uc5d0\uc11c \ud655\uc778 \uac00\ub2a5 )\n\n****lat : \uc704\ub3c4**\n\n****long : \uacbd\ub3c4**\n\n\n****sqft_living15 : 2015\ub144 \uae30\uc900 \uc8fc\uac70 \uacf5\uac04\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801, \uc9d1\uc744 \uc7ac\uac74\ucd95\ud588\ub2e4\uba74, \ubcc0\ud654\uac00 \uc788\uc744 \uc218 \uc788\uc74c)\n**sqft_lot15 : 2015\ub144 \uae30\uc900 \ubd80\uc9c0\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801, \uc9d1\uc744 \uc7ac\uac74\ucd95\ud588\ub2e4\uba74, \ubcc0\ud654\uac00 \uc788\uc744 \uc218 \uc788\uc74c)**\n\n\ub610 \ub2e4\ub978 \ud574\uc11d \uc874\uc7ac\n\n****sqft_living15 : \uc774\uc6c3 15\uac00\uad6c\uc758 \ud3c9\uade0\uc744 \uacc4\uc0b0\ud55c \uac12\n**sqft_lot15 : \uc774\uc6c3 15\uac00\uad6c\uc758 \ud3c9\uade0\uc744 \uacc4\uc0b0\ud55c \uac12**","2824b917":"\ub2e8\uc21c\ud558\uac8c, \ubaa9\uc801 \ubcc0\uc218\uc778 price\uc640 \uc5f0\uad00\uc774 \ub192\uc740 \uc21c\uc73c\ub85c \ubc30\uc5f4\ud574\ubcf4\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4.","a788e1f9":"Workspace\uac00 \uc5c6\uc5b4\uc838\uc11c (\uc2e4\uc218)\n\uc7ac\uc5c5\ub85c\ub4dc\ud569\ub2c8\ub2e4.\n\n\n\ubaa9\ucc28\n\n1. \uac01 \ubcc0\uc218\uc5d0 \ub300\ud55c \ud0d0\uc0c9\n    - \uc790\uc138\ud55c \uc124\uba85\n    - \ubaa9\uc801 \ubcc0\uc218\uc640\uc758 \uad00\uacc4 \ub3c4\ucd9c\n\n2. \uc0c1\uad00\uad00\uacc4 \ud0d0\uc0c9\n    - \uc2a4\ud53c\uc5b4\ub9cc \uc0c1\uad00 \uacc4\uc218\n    \n3. \ub370\uc774\ud130 \uc804\ucc98\ub9ac\n    1. \uc774\uc0c1\uce58 \uc81c\uac70\n    2. \ubcc0\uc218 \uc815\uaddc\ud654\n    3. \ubcc0\uc218 \uc218\uc815\n\n4. \ubcc0\uc218 \uc0dd\uc131\n\n5. XGB \uc0ac\uc6a9 \ubaa8\ub378\ub9c1\n\n\n\n\ucc38\uc870 : https:\/\/rstudio-pubs-static.s3.amazonaws.com\/155304_cc51f448116744069664b35e7762999f.html3\n\nhttps:\/\/geodacenter.github.io\/data-and-lab\/\/KingCounty-HouseSales2015\/\n","4db34f0f":"XGB \uc0ac\uc6a9 \ubaa8\ub378\ub9c1","3fe5127c":"yr_renovated\uc758 \uc720\ubb34\uc5d0 \ub530\ub77c\uc11c sqft_lot \uac12\uacfc sqft_15\uc758 \uac12\uc774 \ubcc0\ud55c\ub2e4\ub294 \uc0c1\uad00\uad00\uacc4\ub294 \ud655\uc778\ud558\uae30 \ud798\ub4e4\ub2e4.\n\n\uc5b4\ub5a4 \uac12\uc744 \uc758\ubbf8\ud558\ub294 \uc9c0 \uc880 \ub354 \ud0d0\uc0c9\uc774 \ud544\uc694\ud574 \ubcf4\uc778\ub2e4.","958d639a":"\ub450 \uac12 \ubaa8\ub450, date\uac00 \uaf64\ub098 \ucd5c\uc2e0\uc774\uba70, \uc9d1\uc758 \uc704\uce58\uac00 \uc911\uc2ec\uc9c0\ub85c\uc11c \ubcf4\uc5ec\uc9c0\uae30 \ub54c\ubb38\uc5d0 \uc81c\uac70\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.","c74e17d3":"2. \uc0c1\uad00\uad00\uacc4 \ubd84\uc11d\n\n\ubc94\uc8fc\ud615 \ubc94\uc218\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc73c\ubbc0\ub85c, \uc2a4\ud53c\uc5b4\ub9cc \uc0c1\uad00\uacc4\uc218\ub97c \ud65c\uc6a9\ud574 \ubcf8\ub2e4.","daf16fd4":"**bedrooms\n\nbedrooms\ub294 \ub2e8\uc21c\ud558\uac8c \uce68\uc2e4 \uac1c\uc218\ub85c \ucd94\uc815\ub41c\ub2e4.","e788be62":"**floors\n\n\ubbf8\uad6d\uc5d0\uc11c\ub294 1.5 floors house plan\uc744 \ubcf4\uba74 \ubbf8\uad6d \ub610\ub294 \uc720\ub7fd \ub4f1\uc5d0\uc11c \ud754\ud788 \ubcfc \uc218 \uc788\ub294 \uc9d1\uc774 \uac80\uc0c9 \uacb0\uacfc\ub85c \ub098\uc628\ub2e4.\n\uc608\ub97c \ub4e4\uc5b4, \uc9c0\ubd95\uc774 \uc0bc\uac01\ud615\uc73c\ub85c \ub418\uc5b4 \uc788\uc73c\uba70 \ub2e4\ub77d\ubc29\uc744 \ub07c\uace0 \uc788\ub294 \uc9d1\uc744 \ubcfc \uc218 \uc788\ub2e4.\n\n\uc989 1.5 floors\ub780 2\uce35 \uc9d1\uc778\ub370, 2\uce35\uc758 \uba74\uc801\uc774 \uc628\uc804\ud788 1\uce35\uc758 \uba74\uc801\uc744 \ud3ec\ud568\ud558\uc9c0 \ubabb\ud558\ub294 \uc218\uc900\uc758 \uc9d1\uc774\ub77c\uace0 \ud45c\ud604\ud560 \uc218 \uc788\uaca0\ub2e4.\n\n"}}