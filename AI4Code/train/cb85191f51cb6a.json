{"cell_type":{"4b351886":"code","e2c93056":"code","48ff2dab":"code","17b82bae":"code","f082184f":"code","839811b1":"code","38455e2c":"code","1c136244":"code","57666674":"code","e4512a36":"code","1ba9d0f8":"code","06c7f27e":"code","968975ed":"code","460c36cc":"code","d6bbffcf":"code","b31500e6":"code","3d45eaac":"code","d2ba1076":"code","5c7813b3":"code","e55a6175":"code","fbb21dd1":"code","6c03b350":"code","ac4be742":"code","84bf5851":"code","14e39fec":"code","5d8f3fb3":"code","bafc512f":"code","f8a46502":"markdown","5d5c91bc":"markdown","8dd85cb8":"markdown","963f045b":"markdown","dae7c59f":"markdown","01b1e59d":"markdown","edb48527":"markdown","0a6e84e5":"markdown","65418c25":"markdown","b70603e4":"markdown","7403486d":"markdown","3c9cb57e":"markdown"},"source":{"4b351886":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMTEhUTExIVFRUXFxUYFRgXGBUdGBoXFxUYFxUYGR0YHSggGBolHRUWITEiJikrLi4uFx8zODMtNygtLisBCgoKDg0OGhAQGy0lICUuLS0tLS0tLS0tLS0tLy0tLS0tLS0tLS0tLS0tLS8tLS0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIAKIBNgMBEQACEQEDEQH\/xAAcAAABBQEBAQAAAAAAAAAAAAAAAQIDBAUGBwj\/xABQEAACAQIDBAUGBwsKBgMBAAABAgMAEQQSIQUTMUEGIlFhcQcygZGh8BQ0QlKSscEVIyRTVGJygrPR0xYzNXOTo7LC0uElQ0SD4\/F0osNj\/8QAGgEBAAMBAQEAAAAAAAAAAAAAAAECAwQFBv\/EADwRAAICAQIDBAkCBAYBBQAAAAABAhEDBCESMVEyQWFxBRMigZGhscHRFPAzYnLhBhUjNEJSNSQlgsLx\/9oADAMBAAIRAxEAPwDyWvUPPNfEbE3KI2Jk3TOuZIwpaXKeDMtwEB5Xa\/HSuKGs9bJrDHiS2buo30T3b9yrxOh4OBJzdX3d4kOxDIkkkMiyJGjPJcFXUKpIup7bWBUkX4kVMtYscowyRacmku9O\/Hw8afQLBxK4u0ZNdhzhQBQBQBQBQCgUA4RE8qUB\/wAGbs9oqeFixu4bspTAvwduynCwX9ibNSSeNJ5N1Exs73GgsTz0FzYXPC9Yap5ceGU8UeKSWy6mmJQlNKbpCbdwCRTyJA5liU2R+0WBPDQ2JIuONqjSzyzwxnljwyfNdCcsYKbUHaM0itzISgCgFIoBKAKA6Jei18L8M+ExbkNlPVlzZrgWy5e+vMfpKtR+m9W+Kr5qq87Oz9KvV+s4lRVfYDmBsRC6TRx\/zmTMHj72VwDl7xccew1stdFZVhyJxk+V1T8mm9\/B0ZvTtw44O0jIAvwrtOcSgCgCgCgOq2HsbDz4HFTFZBLh0uDnGRiQSDbLccDpevH1erz4dXixJrhm+m699\/Y7sOHHPFKVbo5WvYOEKAKAKAKA2uimzsNPKyYrEbhAhIa6i7AiwuwI4Em3O1cHpDPqMONSwQ4nfLw9x0abHjnKpujImUBiFOYAkA2tcX0NuVxyrti20m1TMJUnsMqxAUBu9BsEs2Pw8bi65ixHbkRnA8LqK8\/0rmlh0eScedV8Wl9zp0cFLNFMb01xZlx2JY8pWQeEZyD\/AA1PovEsekxxXRP47\/cjVz4s0vMz9n44xbywvvInib9FwL+0A+iunNhWXhvual8DPHkcLrvVG1gNjRpgWx0658z7uCO7KrNrd3KkNYWbQEebx1rgzavJPVrS4nVK5Pm0uivbpu75nRDFGOH1s9+5Ids7ZEWLwmIkjTdT4cB2VS5SSMgk6OWKuMrcDY6aa6Rm1WTS6jHCb4oT2t1afuSTTvpZMcUc2NyiqcfmW+jGx8LiMFipJEKPAoO8DvaxBObLexYZTpwOlY6\/V6nBqsUIO1N8qXwvpv5l9Pix5MUm1uiuMDg58NEsI3eMeYIEzSkZC1gXLXB0scygcbWrfj1eHPOWV3iUbvZbrolv4U78yjWGcEodq67\/AJ\/v3B0hwWHwk\/wdcPv92F3sjvIpZiAzBQjAIADpcHXt5zopajV4fXSlw8V8KSjSXLe02\/iiMyx4p8CV1zu\/t\/cj6TbDjwssUiAy4eZBLGGazWIuVJXszKb9476n0fqp6rHOEvZnF8Lrr1pjPijilFreL3NXpfsbC4R4jFCXzxhgjSPYEk3ZiGDG4sAAQOqxNc3orUarWQnxSrhlVpL4K9vFtp80aaqGLC1S5rluU+lmzY4sPhcTAhjE6nOmZmystj1SxJsbtxPIV0ej9XmlmzafK7cHs6pteNbGeoxQUIZI7X3Fba0WGw0eGdDFi2kQvMGZ7o3VOX724yDUjUXup8KnTZdTqMmWM04JOoulvz39pO\/dtuJwxQUK9q+e7+zNfbmy8PhcakbKxw7pG5GYhkV2KnUccuUnXkfTVdDrNRq9FKUWlki2uWzpXy8bojPhx4cyT7L+RW6X7Ojw2J3aR2QBWW7Mc6kczfTUMNK6PROpyavTesnL2t09kqa\/tT3M9Xijiy8KW3PnzJYcPhmxcUG4IVjGkn31yRI1s9j2KxK27jWc8mpjo55\/Wbq3H2VXCrq\/NbllHE8yhw9E93z\/ALcintrDQRbQbD7stFvETLnYEBsmobiTqeOlMOpzZvR8cvFU6bul3X3EyxQhqHGtrL+19k7Pwu0FglX7yQC5LSndruzbzCGLs41JuACNOzztNqtdqdE8sH7S5bLffxVUl7273OnJjwY83DJbfT9srbH2Tg54toMsbH4OkjwSF3GZSJTGWXtGRfHmK11Op1WHJp02vbaUlS25XT8b\/DK4sWKcZtLldMj8nuz4MTJJDNGWyxtIrB2HmlRlIB4da9619MarPpscZ4pVbSapPne\/yM9Hihlk1Jct+ZT6G7EXFfCGZTI0MJeOIEjePqFBIINtOVibjWtPSesem9Wk6UpU5c6X0+JGlwrI5N713FMCBocQWjEU6ZN2oZwpvKokusjFs6i4te1mOlxet\/8AWjlxqMuKDu3Svk63SSp+Xdz3K\/6bjK1TXIyK7TlO7C5dgNf8pH1rXgyVemV\/R+T0Y76N+Y3yfSiHDY\/ESC0RiEa34O9n6i9p1A\/WqvpiLzZ8GGHaTt+C23f77idG+DHOUuRlxbLgTBRzh45J2kKvE5e6qMwuBG6tfQEk6dYW7\/QWTUZNXLDwuMErUklu9u9pr3LfY56xQxKezbfL\/wDC30i2FEkWFxEYKrOl3jLMwDLYnKWJbKbnncdtV9H6jJlzZsGR24PZ0lad862tDUQjGEMkVXF3FzaWw8GmCgxQiYNIxBTePZiMwtc8E6pOmvAX1vXNp8+qnrcumctornS25fPeunN13GuSOKOCOXh59xSxexIZNnHFxxCGWOURuqvIyMDlsRvGJU9Yc+RrWGfPi1\/6WcuJSjabSTXPokny6FZQxz0\/rUqadEGD2EkWBONnQyF33cEWZgpIvmdyhDEDK2gI4cddLZdTlyaz9LidcKuT2b7qSvbvW7vn4FYY4Rw+tlveyRsdF5EfZu0skQjO7XMFZip0exGckg8b6kcOFcGvhKOv0ycr376vu6JL5HTp5J4MjqjD2FsFWw8+LnVmjhsqxgkGSVrWBI1CjMt7a68rV6Os1c4Z8emx7Slu2+6K7667OjmwYYuEskuS+pPs\/Y0WJwWJlWLczYaz9UyZHjIJIIkZiGGVtQeysc2ryabVYsblxQntvVp+5LbddxeOKOXFJpU0T7G2PhJtnT4h42SSFlUsrscw6hNlOgZgSutwCQaz1Oq1OLXY8MXcZJumltz7+dLn1LY8WKeBzapoTo9srC4yDFExDDtAqyCRXlbqnOWDq7EE2Q6i3HlTWanUaTNiqXGptqmkt9qppePfZOHHjzY5OqrvE6KbNwuNaaD4Pu2WJnikEkhcFSo64JyNfMOCjhU+kNRqNHGGXjtOSTVKt75bWuXe2V08MeZuHDW2zIPJ5szD4rEbmeIsCjOGDspGXL1SBxGp7609M6jNpsPrcUq3Sqk+dkaLHDJNxkip0Y6P\/C8S0ZYpEgd5WHEIptYX+UdBr3nW1ba7XfpcCmlcnSS8X9jPBg9bka7lzLGxIsFiJpEkEeFhyOY3Z5N5cWC3LPkLa3Iy8rDtrPVS1enxRlC8krVpJV48lddN\/M0xLDkk4tcK+f4OZFeqcJr9EtpDDYyGZvNVrN3K6lGPoDE+iuL0jp3qNNPFHm1t5rf7HRpsix5VJmj022SY8bI2hjlbexkXsyv1iQRodSfZ21l6GzLNpYLvj7LXeq2+hbWQ4Mrfc90R7G2UJBO2XqxQySE9jAdQE951t3Gu3VahYHjiucpJe7v\/AH4mGLG5qT6Jv8HQYwiTY0WWx3M5Eg7MxksT\/aL668rHH1fpmfF\/zht7q\/DOqT4tFGu57\/P8h0EyxQY6ZgAghCX5FiHsvedQP1h21HpuHrM+mxR5uV+5Vv8AvoW0UuGGSb5V+RvRSIfc7aIt8hL\/AEWqfSiX+YaXzf2K6Vv9Pl8jB6NskWLgkNgFkXMeQBNie617+ivT9I4Hl0uSEObi6ObT5OHLFvlZe6e4crjp7kjMVYd6lF1HtHorn9CSU9Djp8k182aa32c8r\/exd6fsscGBw7H75HhgHF9RdUUA+lD6q4\/QaUs2pzLsynt47v8AKN9c3w4496W\/yGeVR7T4cDS+Gj1v+c9U\/wAPP\/RyJf8Ad\/RE+kF7cfIf0la2y9nnj1X9OnfV\/Rf\/AJHVe4jVL\/QxGb0q2euAeOCGMPM8auZWXMS7MQFiU9VbEcbFtRqKvoNQ9dGWbI6gm1wp1su+T5\/NLwJzY\/UOMIq31\/Br+U0fhUV+PweP\/HJeq\/4aX\/pptf8Ad\/SJT0m\/9VL+VfVk006YjAw4pyC+DYpKCdWUC8QPbmYRr+s1Yri0muy6eHLKrjXc32vgrfuRptlwwyPnDn49Pt8zk+jWMd8dhyeLTxk9pJcEmvV9IOtHlS2XC\/ocmnV5ot9UaPSiL\/i7nMPjEOnP\/l1yej1\/7XH+iX3OjO\/\/AFXvQzypD\/iMv6MX7Nap6A\/2MPN\/UjX\/AMZ+4sdAfiu1Bz+C\/wCSb94rP0v\/ALjSv+f7xNNF\/CyeX5LHkjwrHETSW6ogdb97MhAHoU1T\/EUksEIvvkvkn+R6OT45PwMjYJkiEmIgco8G6zWAtlkJU5u0XC6Htr2NYsOScdNljanfxW\/x5nHheSMXli6ar5nR7WMO0MFLiniEeJgyh2XQSA2sO+99L3IIGtjXi4MeT0drYaeMnLHO6T5r9\/Brus7ZyjqcLyNVKPwZwS4S\/d9dfSqB5lo7zAsY9iMUJUjEcfEqK+dy4YT9MqEla4PyejDJKOjcl1OUxOJkkILyO9uAZiQPAHQeivoMWnxYv4cUr50ufmefLJOfadm3i9nJhcJh5cokknBYM4ukagAhQvBm6w1a40Olebp9Rk1Wqy4b4Y49qXN+LfNLburzOnJjjixQnVuXXkvd18zT6ZFvgOAL3zFWvcWN8q8uXhXJ6HUf12q4OVr7m2sv1GLi5kO3f6JwP6cn1yVfQ\/8AltT5L7Fc\/wDtMfn+QwX9Cz\/\/ACE+uKmb\/wA1i\/of\/wBhD\/ZS\/q\/A\/ah3mx8My67qUrJ+bfOAT45l+kKrpv8AT9MZoy\/5RTXjy\/D+BOX2tHBrue\/zDoqh+5+0TbTIBfvCsT6gR66n0pJf5jpF32\/m0NKn+ny\/vuJNgs0mysTHCSJY5BIQpIYp1DcW14Kw\/VrPXKOP0thyZV7Eo8O\/K9\/yviTgblpJxhzTv3bHLRYiaQMBJIwCsz3drZAOtmubW5d5IHOvdnjwY6biluktlz8Nv3zOFTyStJv4m\/seIfcfGi2m9j\/xRV42sS\/zfTr+WX0kdmJv9Hk819g6ExD4NtIAf9OL\/RlqfTCS1Ok\/r+8RpG\/VZvL7MZ5LoMuLkI4fB5NP146p\/iSNaaP9a+jJ9Gu8r8n9in5Ivj4\/qZP8tP8AEf8As3\/UvuX9H\/xmW\/JrIpnxkBNnmidU8QWuPGzX\/VNY+nItYsOXujJN\/L8fMtomuKcO9nEwYKRpBCEO8LZcvMMNCD2W1ueVjXvTzQjj9Y37NXfh++RwLHJy4UtyEj3HCtCjVEkJsb2v40TpijU+78qoIgwZBqEkVXVe9Q4OX0WrGeDFKfrEql3tNpvzpq\/eXU5xXC910av6\/YrttuY\/KAFmXKqqqWYEN1VAFyDYnjVlhgt6t7O3be263e+3nRDnJ\/uvkWtl7TkTMY2KhhlcEAqw7GVrqw15ir5MGPPXGrrdPk0\/Brde4rGcodl8yfE7RkdBGWtGDcIqqqX7cqAAnvOtTj02LHN5Evafe2266W728EJZZSXC+XTkvkTYPbuIiTJHKUXmAEsfHTremssvo\/TZp8eSFvq2\/lvt7i0NRlguGLpe4oyyFiWNrnjYAD1KABXXGKiqX5+u5k3btll9sYiyBWDslhGXSN2XXQKXUka8By5VyZNFh9ppVfaptJ+aTS8+ptHPPa965WkzJxc06Tl5c4mvmberdrkXBIkHYRa47LcqpjhhliUcdcH8r2+KJlKancufiaM2158QoM8hksbrmVNPA2vbu4VbTaHBgt441fS\/z8yMufJOuJi7Q2viZIzG82aMDqoVSwsNLDL1fRaqw9HafHN5IRp9bfz3395Z6nJKPC2V36TYsxiI4hygGUebmAtawe2e1tONZL0dpVN5FBW9++vhy+RZ6rLw8Njm2tjJ0yFnlSJbkZAcqKOLMq5so49Y2q0MOm00+OKUXJ9ebfRN1b8CJZMmWNPdL97mYmKcI8YYhHKl15MVvlJ8MxroeOLmptbq6fnzMlOSTiuTJcDjpcO+aNsj9uVcw8MwOXxFUy4ceePDNWvPb5FoTljdrmWJNv4hpRM0t5V4OUjLcueXUiwseI5VlHQ4I43jUfZfdbr6l3qMjlxN7hjts4jE2WaXedhZUuOdg1r+i9W0+iw4X\/pRrybr4XRGTPOa9pjdlY3EYY76EugvkZgt0N9SjXBU3AvY+NTnw4M\/+llSffV7+a7\/AHjHPJj9qPkaWE6SYhXzpJuuqQMqxqoUkFrKq5VJKjW1zbjSWh02SPBkja57tt7bbtu9rdK6IWbJF3F15JfTkVcDtLEmSUxEnedaUKikMqggllAsVszE3Fje5vSeDAlHjSpbK3yuuTbu9lVO+5ErJkd176X1LEm0pWj3RYBL5siKiKW+cQgGY8NTetselxQn6yrlyttt10Vt17jOWWTXD3dFsVa6TI012\/iQm7Ev3v5mSPJ2+bltXE\/R2mc\/WOHtdbd\/G7N\/1OXh4b26UvwZpPv\/AOq7UYGjhtvYmOMRJMwQcFspt+iWBK+giuPJ6P02TJ62UFxdd1fnTp+82jqMsY8KlsMO2cQY90ZWKAkgMFJ6xu3WIzWNzcXsb1ZaHTrJ61QSl4WuXLZbbd22xHr8nDwN7C4nbeIkTdvKWTkpVMotwygL1fRaox6DT45+shGpdbd+\/ff3ky1GSUeFvb3CxbcxCx7oS2jtbJljy+kFbHxNRL0fppZPWuPtdbd\/GwtRkUeFPbpS\/BFs\/acsOYRvZXFnUhWVh+crAg+qtNRpMOenkjbXJ7pryaplceWeO+F8\/wB95PD0gxKBgkuRWABVVjC2F9AoWwHWOgGt9ayn6N002nOFtd7bb+N33e7uLrU5Y7J17l+Crg9oSxSbyJyj66rYcdSLcCO61q3zabFmx+ryRteP55348zOGSUJcUXTJdpbbmlUiR7rfMQqooYjm2QDMfG9ZYdFgwPihHfxbdeVt17i88+TJtJ\/RfQrQdKsSibpXtHwKWTKRzuMvWOnE3rKej088nrJQuXW3fud7e4tHPkjHhT26bDNldIMTF1IpiiEm4ATXjoSVu3HnU5dFgzzUssbfi3t5b7e4QzzhGouhYtv4qAtupN3nNyUVAT7NB3cKajR4cySyxuuVt\/nn48xjzzhbi6shwvSHExszxy5GfzmVIwTw5heGg07dapk0OnyRUZxtLkm2\/uWjqMkW2nzKk20JWk3xciS9862U37eoBr38a2jgxxh6tL2ej3+tmbyScuLvL+N6UYuVSrzXDCzkJGrMOxmVQzDuJ1rmxejtNikpRjy5btpeSbo1lqsslTZj13HOdD5P2P3Rw+vFyD3jI2h7a8z0wl+iyeX3R16L+MhZmK4BxId6zzrumBzCMqpMoLciwK9Xna\/KkUnrFweylF8S5XfLbw339xZ7YXxb29vDqJtHYcULzwvLlkiiDBi8eV5QEZoglswuGIBv8nv0YdZkyxhkjG4ydVTtR3qV8u7fz8CJ6eEW4t7pfPyLGJ2OsUYdc7pIkbRSqVMbyHJvIyAPvZF30Jv1fVtpNa8k3B0mm+KL5qKumt9725LvM8+FRSkrppU+6+ngWNobJiiaeNpLSRKCCXS0jjLnQLbMOJtr8nXjpODW5csceRR9mb32dxW9O+T8fPblvGTBGDlFvdeK3feq5+Qh2VG0Uzxs7COON1dhlV8zKsihSL6FjqCeHfU\/rMkcuOGRJcUpJpbtUm07vvrlXf4EPDFwlKLeyTvr1HYvZ0CCIZpc82HWSMdQgSuxVVbqjqGx14i3O+kYtVnm5uo1Cbi+fZSttbvf6kyw41w87cbXLm\/sV9q4GGJp4i77yKyqbXWRwQJNAOoBra5N7VtpdRmzRx5FFcMt31iu7zb79kZ5ccIOUbdr59fI1ekGzY58ZMCXDJhxKCCuXNHh0bKVK3IIHG4415mjzZMWlxS2pz4a7\/am1d33dKOvNGMss1vfDfwSOewKRs4Ejsim+qqWYtlOVQBrqbDhzr2tROcMblBJvbm62737lucOOKlKpOjUw+yIzJglbeKMVmBW65kZZCh1y2twNiLjWvOyekpLHncabx8nTppq+vzvxOmOlXFC7qXy38jLxOyo2ixEiZw8MsSWJUq4lLqCAFBU3j7Txqz1OSOaEZ1Uot7XtVPq759EFhi4Nx7nRqbOwCYfEYyAFmaPB4pWckZS26BfKuW4AJsNTw79OHNnnnwYcrpJ5INLvq9rd\/Y6IQjjlOK7ov6HP9HcVHFiEeUHJ1gSouy5kZRIo5lSQw8K9LW455MMo4+e3Pk6adPz5HJglGM05cjZlwEkT4ZWdcRhnxCNFMhuGJKqUbMCVPMoe\/vrhjnhljlcU4ZFFpxfdzdqufg1+Dq4HFxT3i3syntTDQti8WDnUrJNu0QZs7iU9UZV6i5bngeFbYMmWOnwvZpqNt7Uq57vd2ZThCWSa8X9TX2bsyODESR5SwbAvMtypZc8GYi4WxIN7MLeFc2XVTzYIS5NZVF1e9Srry6o2hhjCb\/pv5GcMKHwZkDyovwlFaMsDGbxMd5lAHXAFr9ld7k\/1ijwpvgbuqezSq7ezOWksF3\/AMq8ORZ2nsSOB1BRypkTcvmVkliJN3DBbA3ydXXzj41XTap6jG6q0nxKmnGW2zTd1z38PcTkxrHJc6tV0a+HlsaE+GQ4\/FohkiIXEm8bBb5ELZbBfMNrWvXLjyOOgwTklK3Dmr5tK+fNdTSUU9RNJtc+T\/sZi7OiRcOZnZRMGclbHJGCVU2sS5JU8xYWr0HqcuSWVYUnwNLfvdW972SvxMFjhFRc2\/a+SJItkqYEn67J1xKyEHdOCwjVlsSA1lOa9ut3a1lrZLPLDsntwp37S2tp3Vrfbw+ErCnjU963uu7psY969E5hDQkW1CAtSgF6AS9LFBQC3oBKEge+nmCGXDrbQa91UcV3Ep9SiwtWZYfJMSADy51LdkEVVAUAUAUBobA2n8GxEc+TOYySFzZQSQRqbHTWufWaf9Rhliur76v7o2wZfVTUqHwbTVYJcOYyyO6SIc4DI6hlv5vWBVrHhwqs9O3mhmUqaTT25p79dt14krKlBwrbmSbW2quIYyNCRO6hXYP1GYKF3mTLcNYD5Vr62qNNpZYEscZeynsq353V3y91lsmaM3xNb\/vuNJNq5Y50SPKJypYZropVg2ZRlHWuOPL6tI6H2scpytwutt3aqm75fUzlqNpJLn48vINq7SWdmkaK0rgByH6hawBcJluGNuGa19avpdLPTxWOM\/YXJVvXS75e66K5cqyPia3fjt51\/ctYnb6uZzubb+NUa0mi5CpXIMmi9TzTfjoRWGP0dKCxrj7Em17PO7u993vz28maS1Kk5Ph7Srn9NintHaIk3OVChijSMHPe4QkqfNFjdq6dPpXi9ZxO1OTlyrnSa5vbYyyZePhpVSS59PcG1doJMzSGIiR7ZyH6t9MzKuW6k25kgXOnZXTaaeCCxqdxjy238E3e6Xgk2TkyrI3Jrd899vdt+S0+3wZ5JzCfvkRiK7zgDGIiwOT5oGluPqrBejmtPHDx9mXFddJcVVfX5Gj1CeRzrmq5+FdDI2bthYJGbJnBSSM9bKwDrlujWOVh227a21eL18VFOqafK1s7pq917ymKfq3ddzXx+5Nh+kaocIVgP4KzlBvPODPn63U435j1CuOeglNZk5\/xKvblSrbf99WbrUJcO3ZKo2wBFiIxG33543DbzVN2zsoAydbV2udOXCtnpm8mObl2E1Vc7q+\/bkUWZKMlXMuHpKpmmnaAmSeJ4pbSWW7oEZ0GQlSbXsSeJ9GH+XyWKGJT2hJNbb7O0nv+DT9SnJya3apmPgMUI2YlM4ZHQi9tHW1wbcRxHeBXbmxvIkk6aafwOfHNRb2LSbXyRJFGtlWcYgljcmRVCqNALKAPE39FZPS8eSWSb3ceHbbZ7vruaLPwxUYrk7LUu3o2OJ+8MBiTmciUZ1Jk3llbd2yX0yka9tYx0U0sXt9jl7Oz2rdXz8b9xf8AURuW3a8Swm3i0qyiEAfBjhnUPxTd7vMpK9Q8Drm4Uj6NfqnBS\/58add93vvuvgHqlxJ13UCbYSODdbo23scty99UXKARk1uL3PafRXS9LL1qyynvwuPLq7u77u7w+Jl61cPCo96fPp7iJ9u3haGNMoMomXM2YKVv1UFhl87U8TYVWOlTzLLJ7qPDyq+W738Ng8vscKW135eRcTpIhnkm3BzyLKHUycDKuVrHJ5ouSB36msVoJeohg49o8Nez\/wBXavf4\/Qu8643Ph5339fcVMVtZTFEkkRYxZljYPl6hOYJIMpzAG\/AqbE+NdD00oZJTxyrjq1V71Vrfa11vqZrInFRkrrl+H+0M2f0gMLK4jYNuniIzWjfNm6zrl61s\/C\/yR6c8+keZcM5bcSly3VVyd99c672XhmUN4req8PeUnfq3X0e\/bXouVq0cqVDMNLcanXvqIy2JaJ71cgL0sigNCRaEBQBegoS1CRakgikmC\/ZVHJItRRjW+hNrVkkWGGgEqCAqQFAFCQqCAoCxhYzmByn1Hsq0WrJa2NLdn5p9RrYzoTdn5p9RoKDdn5p9RoKF3Z+afUaChN2fmn1Gliiji8xNrG3gaxlK2aJFfdN80+o1WxTDdN80+o0sUw3TfNPqNLFMN03zT6jSxQbpvmn1GlimG6b5p9RpYphum+afUaWKZcwtwLZG07Ae2tIyRDQ2TCu5vlI7Lg1DTluOQyXCMALgkX5A1DVErcapYMDlbTTgeFQpb2KHRyZScwOvC\/H21MZJMNMsR4gE2F60U09ivCPNSQRJCQ17ixqqi07JvYmNXIEIqKJsUURDFqxAUAUAUBXxKkdbMRp2VnNPmWT7iuzZhcnVR6\/96pzRIYaI3B4Dj6KRW4IpBYnxqGBtQSFCAoAqQFQSFAe+eTbYEE+AjeSLOwst87r1RGhAsrAczXHlk1LY6ccU1udV\/JXDD\/p9LfjJf4lU9bPqX9XEB0Ww34j+8k4f2lPXT6j1cegHorh\/yf8AvJP4lPWz6j1cR56KYUamDT+sl4fTp62fUeriYG2OjpQYh9zAIFjZomWXEGXMAuXMrHJbzvZV1kbpEOCSs5jo5hllxMUbi6M1mFyLjKTxBuOFXk6VmcVbO6PRrBDjEo8ZpL\/tKw9a+pusN8kH8m8D+KT+3k\/iVHrX1HqfB\/Mk\/k1s\/wDFD+3f+JU+skV4IkidFMAeEN\/+9J\/rqPWvqOCJz23+jW6XESCGFYVUblllxBlzF4x11Y5LWMn\/ANa0hO2iJQSVmJ0UwSTYlI5FzKQ9xdhqEJGqkHiBzrSbpWjOKtnbydFsEvnRAf8Acn\/11zvK1zZusSfJCJsDAjhGPpzf66fqH1+RPqPD5j16P4P8UPpz\/wCqn6h9fkP0\/h8xf5OYI8YtP05\/9VR+ofX5D1Hh8yvtTojCY74SCIvmH89LiQuXW\/mte\/D21aOVsq8aWx5F5UNmKmKEYGXKvAEkAlVLWLakXJ413YI8UbOXK6dHIRwhToda3UaZnexParlRgl1ynQ8u+oUt6DXeSGpZCEoAoSF6WKC9LIoUGgCpAUBmYhLMQKwkqZcazk1BI2oAUAUAUAUAUAUB9IeSSMNsxVJIBI80kH+aj4Eaj0Vw51cjswulYuz9g4tp2ErhYgWC3d5Gy5gVC5+75R7DpXmwxTcnb2+J7WXVadY1wL2vJL6fQ6bbcblVSNwmZuubG5Wx0FiCNbag10ZHSpd552Jq7ashgjY+cG0t1gfRwPOudQcudmjklyov4SKx4k+JP1V0Y4cPezCcrKnSr4nP\/Vt9Vbw7SMpcmeZ9EPjsH6f+U10T7LMY8zV6X\/G5OB8zh+gteVl7R9Jo\/wCCvf8AUxrVQ6R9rjw+r3+uvR0GTnBnj+lMK2yLyZrdFpT8JiB16x\/wmtc+lh247HjwXtI63pqlsDN4J+0WssfaOmfI4boF8dj8JP2bVtk7JlDmd9jcKGkUXIAJJFgb8K45K2jrhkcLrvNWEd1vRarmZLQBQBQHgXld+Pt7\/JWvT03YOLP2jhMQlxccRqK2krRkh0MmYA1MXasNUJNFmFJRsJ0QyKVFw3jfnVGnFWi12RJi2vrqKhTYpF1GB4G9aplGOqQQvMAbc6zckmWSslq\/IgRnA1OgpYojkxKjvqrmkOEoyNfXmSb\/AGVk2XGVACgCgCgCgCgCgCgPpPyPf0cn6Q\/ZR1w5u0deLsnV7Uw5ZRYkEHSxsNdNfZXJmg5LbmdOKai9ywsXVCk5ja1zzPbWij7NMo3vaFiSwtUpUiG7E3etxUVuLM7pV8Tn\/q2+qtIdpFJcmeadEW\/DIP0\/8pron2WZR5mr0wP4XJ+p\/gWvKy9o+i0f8Fe\/6mNVDqHw8bdun7vbatMU+CakYajF6zG4ml0YFsXEPzj\/AIWr28rTxto+Yimp0zsum\/xGbwT9otcMO0jefZOD6Bn8Nj8JP2bVtk7JlDmek5M0l+PHsPG3o5VzUb3sXYUsPX2fZQD6AKAKA8C8rnx9vf5KV6el7BxZ+0cSa6TEqxqVaw801ktmXe6JpZQOJq7aRVIozzFu4Vk5WWIqqSWcC9jbtq8HuQ+RPipso04mrzlRVIz6xLl3D4i9lPGtIy7irRLPHcWq0lYTM+S9zfjWTLCooIPbpb7aAZUAKAKAKAKAKAKAKA+kfJC1tnJpzH7KL99cObtHXi7J2SqbHVvST7KyNBSh+cff0VFeJNjWjb8Yw+j9q1FPr9PwTxLovn+SN8O34+UeAi+2Opp9SeNf9V8\/yU+kI\/A5lJY\/emuTa59QAq+PtIznyZ570UiHwuE\/n\/5TXTNeyzCL9pHYbW6LmeZpd7kzW0yE8FA43HZXnyxcTuz1sOs9XBR4fmUv5En8d\/dn99V9T4mv+Y\/y\/P8AsH8iT+O\/uz++nqfEf5j\/AC\/P+xobM6MGORJDIGK6+aQeBHG+vHsraDnFcN7HJmyY8jvgp9bLHTX4jNc8k\/aLWmPtI5Z8jhOg\/wAcT9GTv\/5bcudbZOyZQ5nqShuWn6tc1m4oV+32GgDK3b9fuaAAGv53soBxkPuPq1oDwfyufH29\/kpXp6bsHFn7RxFdBkJItxajVhOirNCqqTrfvrNxSRZMqVmSFAKptrUgsYh82o5Wv6atJ2QlRWqhI6M6ipBNHOVuDr7\/AFVKlWxDRC7XN6hkgtQBZUtbhqKmqDGVACgCgCgCgCgCgPb\/ACf4THSYNDhp1jQBQQTa7btCT5h5W9VcuRxUtzogpVsdJ9ytrflcf0j\/AA6z4odC9T6gNk7W\/Ko\/pH+HTih0FT6jW2LtU\/8AUx9vnH+HTih0FT6h9yNq\/lUfd1v\/AB04odBU+orbC2mylHxEZVhYi5tbs0jq0Z41vRDjN95Vw\/Q7FowdHiDDgczdluad9XeaLKrHJGgNmbTA+MxgeIH\/AOdU4sfQtU+op2dtUjTFR+v\/AMdRxY+hNT6kB2PtYm\/wmO\/j\/wCKo4odBU+ov3K2tf41FfxF\/wBlS4dBU+pFiuj+05EMb4iJkNri9r2II4Rdw9VSpQXcQ4yZTwfQvHRMHjkiVhexDPfUWPyOypeSL5kKEkXxsja35Wn0z\/DqvFDoWqfUX7j7W\/Kk+m38OnFDoKn1GvsPap44pNPz2\/h04odBU+o9Nk7UHHEx\/SP8OpUsfQip9SQbH2n+Up9I\/wAOp4sfQcM+p5V5SIpFxIWVs0gBzMDoT1bchytyrtwU47HNltPc5OtzMRjbidKMFDEzZjpwFYydlkQ1UkKAKAKAKAfGw5jQ+v0VKBNiVsF7ufaOVWkqIEw+HvqeFIxsNi4tdQNOHdSfMIgt7KoSNoAoAoAoAoAoAoD6B8mKE7OWzKvWXzlDD+YTSxI529VcmXtnVj7J1fwd7WDQk6D+ZXXU3Ng3Hh9Hv0zrwLlrZ8EqWzFSOYSIJfS3zqq2mSjSVr30I8aqSVnc3823CxunW0F+OvdVqVLcgkiLX1DAd+S3s1qCSeoBFiL2FlzXOvm6aHXrcdbD01KS72Qx0A6ouLer\/LpUEj6AY0et72PgPtFAOUd96AWgKyYYj\/mG+uuWPtv833tVpNN7IhInjUjixbxt9gFVJHUBUmlW56y3vY6pxsDrm52t66tTXMi0EWLGnWBva3Wj+w61FA8N8rfx5vf5KV6Wl7Bx5+0cQoroSMmynjZDfLWU3vRZFWqEhQBQBQBQBQBQFhJAVynj8mr3aogSOVkFrad96JtCrATaknnUWSQiqgmjkBtmF7e+tWTXeCeTCA8NKu4dCtlPLWRYQ0AlAFSAqAfRfkhv8AWwB6y3uTw3KcLDje1cWbtHVi5Hc5e72n91ZWajh76n91QBT6fbQFeTE2OWxPD5S9nYTegGnHC9grH9ZP8AVQCjGA8Ae67rqezjQAuMHYdTp1l9fGgHR4tSbajxZfsagJd6nzx9IUACZPnj6QoA3qfPH0qAN6nzx9KgDep88fSoA3yfPH0qAcjKeDX8DegFCCgOJxHTPELizANmylBOsW9vJbKXyby26tYceNrc604Y12iPb6HnPlc+PN7\/ACVru03YOPN2jiL\/AO9dHkZEe3sGYZmjYgspIJF7adl7dtc2PKs2OOWK2aNJQcJOD7jPCnjVyC3JsyRc9wLxi8iggsguFuwB5EgG3AnW1YR1GN8O\/a5Pufl9uvdZo8UlfhzKdbmZNgsM0sixpbM5CrcgAk6AXOgudKzy5Fig5y5LdloQcpKKJ\/uXJlD6ZTKYhqP5wWJBHEaEG5rP9RDice9Li9xb1MqvxoqSLYkXBsSLg3GnYeYrdO1Zm1RPg8GZFlYMBukDkG9yudU0sON3XjWeTKscoxa7Tr3039i8cbkm+gLgyYTNcZRIsZGt7ursDwtayNzqHlSyrF3tN\/BpfccD4OPxoa6lVVt4pzX6oJutjazjkTxHdV4zbbjT2+D8iHGkn1IQ3h49lWIL+L2RKjOpVSY9JArKSuoFzY6i7AXFwLisMWpx5FFx\/wCXLbmXnilG77uZDBgJGdUQZmbzQCLmwueOnI1tlksUXObpIpCLm6iRM7ZQb6cqu7IGO1zeoe4EqAJQBQBQH0L5KkJ2elkZ+sODlbfg6i5sRca2t3g8q5cjpvfu+50w5I7vCQ5dcrKTyZ2bhw4sRXOzUsXNCSPEaowtfqnTt0qAPVBx1vbtNvVwoB9AFAISBxoBtyeAt4\/uqCdgse0er\/em42Czdo9R\/fTcbBZu0eo\/vpuNg63cfWP303GwjOR8gnwK\/balsUuosbE8VI8cv2E0TDQ+pIGuaAcKA8B8rnx5vf5KV6Wm7BxZu0cLOwCk+966LSMuZ0OK27eeV4mMrHEQPhlUMSBHn3ptbqhlOUjib34Cvn4aS8eOGRcKUZKT276rzp7+B6bzJOTju7te4ytqYlIsQgju0UUodQb6gSZyDfn8k\/o16Mccp6ep7Skt68q\/ucnGo5bW6T2+oHFxpLi5RIHWVMQsYF8xM5IGYEdXKGJN+YFr8a5\/VTnjxY2qcXFvp7PTrfd4c6NlOMZzlfO695o4jacbGdhMPvjbPZASQfvSBZSewgjx0rlhp5xWNOPJZU\/\/AJO18TZ5Yu9\/+vyMbpDtFnxDssuZVllaEjgA0hdSunge6u7R4IwwRTjTcUpe5VucubI3kdPa3RpYzbcLHEgAhZBHPGLcMVe7+j764v8A\/wAx3Vy4tHlj6u+auL\/o7vovibSzwfF40\/f+2R4jHxlZcrgK0GFSFNQUlQxZ2\/NsUlObnvOdza0MGRSja3UpuT6xfFS8buO3dXgiJZI06fcq89v7lnH7WV5sdmlVomEm5ANg2fEQyELpcErGePMd9ZYdNKGLBUakq4vCoyW\/vZaWVOc7e29fFP7FfbmMR4sQFlVg+KSWJRfSHJMFABHVyh0XLyt2a1rpcU45MblFqoNSf81x7++6bsrmnFxlT7015bkuztoIsUA3qhlw2OQi50aTPulPjdbdluVqpmwSlkm+HZzxv3Krf1LQyR4I790ihtlRLuCGDEYeNZDfXeDMCGJ52K6136LFKHHxKlxNry25GGoyJ8LT3r5m3j8bGJ8XIrK4lSRI8tzfeZQWOmgABPbcCssGnyPT4MbVOLTd+F7e\/wClieSKyZJJ3dpe+i2MdCJImMwYpiJTnAIO7eJVVrKoCqStyoGnjXLLSZZ45Lgq4R2\/mUm2rbdunzfM2jmhGS9rvfwa8tvsZ+HeNcM0bTK5MEy2N9JC4ZR5t3vluGJPGwtXRmxZJZFKMGkpRfmqd9+3OqS8WUhkiovil3P4\/D5nHV3nKFAFAFAFAfQ3kpjvs9eoHs4OrZbfg6i\/fxt6b8q5cjqT37vudMFsd5g4co83KSdRmLeGprnZqWKgkjxHmNz6p7uXsoKEaO+uZh3C1vqoCWgAmgI7\/KbTsvy\/3qFuSNbEqOfsNvXwqSAXEqeZ+i3s01oAOJH5x8Fb26WHpqLACW\/MD2n2cKC0JG1jcuT4gAeg2+2gbRMpvwN6kC0AUBHKwuAed\/ZqaATegEC9ydBbX\/1QHg3lc+PN7\/JSvT03YOLN2jz\/ABkvybcff7K0m+4ol3lfDylGDAkEcwbH0Gs9nzVk+QTSZjepbtkEdQSFAFAFAFAFAFAXMAvE1pBFZFutSoUAUAUBm4lbMQKwkqZciqpIpNAJQBQH0L5KY82z06iNZx55sB+DqLjQ3OtvAmuXI6b37vudMFsjvMJCqi4REY8clreuwv6q52zVFmoJI8R5rfonjw4c+6pQHjh6KgC0BFM3L346e32A0JRE7gHU69p4+Cj39NLIsPhCjsHexA+s3oNl3g7ZtCGYdy2Hrb7DSmL6CKh4DMg5AZT7dbeipFgR86PMPQfYSaWQTpOp1DA+kVFE2D4dCblFJ7SBelEUhY41UWUAeAtQlKh9ANeMG1xw4UAPGDa4vbhQHz95YpwMc3b2fqpXo6eSUDjzL2jzp2JNzVyg2oAUAUAUAUAUAUAUAUBcwZAUkkDWtIbLcqySTFqOGtWc0RwjYsWDxFqhT6k8PQs1oVGTShRr6Kq3RKVmYzXNzWJcSoAUAUAUB9C+SpQdnpcRnrj+c4fFl83Tjy8C1cuR7vny7vPv8PudMOS\/fcdjEqBgcuGFtbgi47x1fDsrA1NMG+oqpIzEea3gePDhz7qC63BogbEjUcKAc7AC5oDHlx+Zja3G3Hrf++PPS\/PkJr4FzD4YWv28dST6\/fnwpsL6EwgTs+ugtjt0vzR6hQcT6jTl4ag9ikm3oH7qE2winuSL3tx0II8R7+FBQ5lR+IVrdtjQhrqKYByLDwJ+o6VNkDo0tzJ8bfYKgD6AKAKA+cvLP\/SDe\/yUrtwdk5cvM4KtjIKAKAKAKAKAKAKAKAKAKAKAKAufCja+X01pxuiOFFaSQsbmqN2BlQSOVfV21IFlIvpejoDKgBQH0N5Kf6PU9SwYElxcAfB0FxrpxHovXJkftPn+2dOPkdfG6sQM2HbXgF1Ph1uNYmpohwOFVJEla6kDmDx4cOdGNu8czgAXIF9BegMraeLzOIl5edrpfjYnsA9pFQSifCqEUDieAsLX7TrwBN\/X362IFN1OZFt2i4t4m3A94vpUCh64m\/zR4sNO499BsOuvNw3p09V7UFkyWtpa3dQD6AGAPEA0F0RnDpzHtP76FuNkqgAWHKhUWgCgCgPnLyz\/ANIN7\/JSu3B2Tly8zgq2MgoAoAoAoAoAoAoAoAoAoAoAoBSxqQJUAehUDUXPsqVQEZieNANqAFAFAfRHkma2zr3AsRqeA+8x6muPN2jqx9k7LCNcXzK3YVFh9ZrJmhPUADQEkz2RiBchSQPAVBJibJw7AZmW7m99RZbnUa6+J\/cKEs1oojxPH2Du9+ygJQO6hAhXmND9fj20AofkRbs7DQCtED3HtoBBJbjp48PQaEWSChItAFARvOg0LKD3kUItD1IOo1HdQkWgPnLyz\/0g3v8AJSu3B2Tly8zgq2MgoAoAoAoAoAoAoAoAoAoAoAoAoAoAoAoAoBl6rZIXpYPo3yP\/ABBfFf2MdcmXtHVj5Hb1kXCgA0BYHD0VBIjUAlALQAaAZKND4GgHodB4CgK+0GIUWJGvLwqUCTCHqj0\/XUEImoSFAR4fzR4UIRJQkKA+cPLSf+IN7\/JSuzD2Tmy8zgb1rZkF6WAvSwF6WAvSwF6WAvSwF6WAvSwF6WAvSwF6WAvSwF6WAvSwF6WAvSwF6WD\/2Q==',width=400,height=400)","e2c93056":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.offline as py\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport plotly.express as px\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","48ff2dab":"df = pd.read_csv('..\/input\/hackathon\/task_2-owid_covid_data-21_June_2020.csv')\ndf.head()","17b82bae":"na = (df.isnull().sum() \/ len(df)) * 100\nna = na.drop(na[na == 0].index).sort_values(ascending=False)\n\nf, ax = plt.subplots(figsize=(12,8))\nsns.barplot(x=na.index, y=na)\nplt.xticks(rotation='90')\nplt.xlabel('Features', fontsize=15)\nplt.title('Percentage Missing', fontsize=15)","f082184f":"# filling missing values with NA\ndf[['new_tests', 'new_tests_per_thousand', 'total_tests_per_thousand', 'total_tests', 'new_tests_smoothed', 'new_tests_smoothed_per_thousand', 'tests_units', 'handwashing_facilities', 'extreme_poverty', 'male_smokers', 'female_smokers', 'stringency_index', 'hospital_beds_per_thousand', 'gdp_per_capita', 'aged_65_older', 'aged_70_older', 'median_age', 'cvd_death_rate', 'diabetes_prevalence', 'population_density', 'life_expectancy', 'new_deaths_per_million', 'total_deaths_per_million', 'new_deaths', 'total_deaths', 'new_cases_per_million', 'total_cases_per_million', 'new_cases', 'total_cases', 'continent']] = df[['new_tests', 'new_tests_per_thousand', 'total_tests_per_thousand', 'total_tests', 'new_tests_smoothed', 'new_tests_smoothed_per_thousand', 'tests_units', 'handwashing_facilities', 'extreme_poverty', 'male_smokers', 'female_smokers', 'stringency_index', 'hospital_beds_per_thousand', 'gdp_per_capita', 'aged_65_older', 'aged_70_older', 'median_age', 'cvd_death_rate', 'diabetes_prevalence', 'population_density', 'life_expectancy', 'new_deaths_per_million', 'total_deaths_per_million', 'new_deaths', 'total_deaths', 'new_cases_per_million', 'total_cases_per_million', 'new_cases', 'total_cases', 'continent']].fillna('NA')","839811b1":"plt.style.use('fivethirtyeight')\ndf.plot(subplots=True, figsize=(4, 4), sharex=False, sharey=False)\nplt.show()","38455e2c":"plt.style.use('fivethirtyeight')\nsns.countplot(df['continent'],linewidth=3,palette=\"Set2\", edgecolor='black')\nplt.show()","1c136244":"ax = df['continent'].value_counts().plot.barh(figsize=(14, 6))\nax.set_title('Continent Total Cases  Distribution', size=18)\nax.set_ylabel('Continent', size=14)\nax.set_xlabel('total_cases', size=14)","57666674":"ax = df['diabetes_prevalence'].value_counts().plot.barh(figsize=(14, 6), color='r')\nax.set_title('Diabetes Prevalence in the 65-older Group', size=18)\nax.set_ylabel('Diabetes Prevalence', size=14)\nax.set_xlabel('aged_65_older', size=14)","e4512a36":"import plotly.express as px\nfig = px.scatter_ternary(df, a=\"population\", b=\"diabetes_prevalence\",c=\"aged_65_older\")\nfig.show()","1ba9d0f8":"plt.style.use('dark_background')\nax = df['extreme_poverty'].value_counts().plot.barh(figsize=(14, 6), color='b')\nax.set_title('GDP per Capita vs Extreme Poverty', size=18)\nax.set_ylabel('Extreme Poverty', size=14)\nax.set_xlabel('gdp_per_capita', size=14)","06c7f27e":"plt.style.use('dark_background')\nax = df['cvd_death_rate'].value_counts().plot.barh(figsize=(14, 6), color='g')\nax.set_title('Handwashing Facilities vs Covid19 Death Rate', size=18)\nax.set_ylabel('Covid-19 Death Rate', size=14)\nax.set_xlabel('handwashing_facilities', size=14)","968975ed":"plt.style.use('dark_background')\nax = df.plot(figsize=(15,8), title='Covid19 Death Rate linked to Diabetes Prevalence in older 65 and Handwashing Facilities ')\nax.set_xlabel('diabetes_prevalence, aged_65_older, cvd_death_rate , handwashing_facilities ')\nax.set_ylabel('continent')","460c36cc":"plt.style.use('dark_background')\nfrom pandas.plotting import scatter_matrix\nscatter_matrix(df, figsize= (4,4), diagonal='kde', color = 'b')\nplt.xticks(rotation=45)\nplt.yticks(rotation=45)\nplt.show()","d6bbffcf":"fig = px.line_3d(df, x=\"total_cases\", y=\"total_deaths\", z=\"total_tests\",color = \"continent\")\nfig.show()","b31500e6":"fig = px.line_3d(df, x=\"diabetes_prevalence\", y=\"cvd_death_rate\", z=\"aged_65_older\",color = \"continent\")\nfig.show()","3d45eaac":"fig = go.Figure()\n\n\nfig.add_trace(go.Scatter(x=df.index, y=df['total_cases'],\n                    mode='lines',marker_color='yellow',\n                    name='total_tests',line=dict( dash='dot')))\n\nfig.update_layout(\n    title='Total tests vs. Total Cases',\n        template='plotly_dark'\n\n)\n\nfig.show()","d2ba1076":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(x=df.index, y=df['diabetes_prevalence'],name='aged_65_older',\n                                   marker_color='black',mode='lines',line=dict( dash='dot') ))\n\nfig.update_layout(\n    title='Diabetes Prevalence in People Older than 65',\n        template='plotly_white'\n\n)\n\nfig.show()","5c7813b3":"fig = px.pie(df,\n             values=\"total_cases\",\n             names=\"continent\",\n             template=\"seaborn\")\nfig.update_traces(rotation=90, pull=0.05, textinfo=\"percent+label\")\nfig.show()","e55a6175":"from category_encoders import OneHotEncoder\nfrom sklearn.linear_model import LinearRegression, Ridge\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, MaxAbsScaler\n\ncols_selected = ['life_expectancy']\nohe = OneHotEncoder(cols=cols_selected, use_cat_names=True)\ndf_t = ohe.fit_transform(df[cols_selected+['population']])\n\n#scaler = MaxAbsScaler()\nX = df_t.iloc[:,:-1]\ny = df_t.iloc[:, -1].fillna(df_t.iloc[:, -1].mean()) \/ df_t.iloc[:, -1].max()\n\nmdl = Ridge(alpha=0.1)\nmdl.fit(X,y)\n\npd.Series(mdl.coef_, index=X.columns).sort_values().head(10).plot.barh()","fbb21dd1":"plt.style.use('fivethirtyeight')\nsns.countplot(df['stringency_index'],linewidth=3,palette=\"Set2\", edgecolor='black')\nplt.show()","6c03b350":"fig=sns.lmplot(x=\"male_smokers\", y=\"life_expectancy\",data=df)","ac4be742":"from plotly.subplots import make_subplots\n\nContinents = df[\"continent\"].value_counts().nlargest(n=10)\nContinents_all = df[\"tests_units\"].value_counts()\nfig = make_subplots(1,2, \n                    subplot_titles = [\"Continents\", \n                                      \"Tests Units\"])\nfig.append_trace(go.Bar(y=Continents.index,\n                          x=Continents, \n                          orientation='h',\n                          marker=dict(color=Continents.values, coloraxis=\"coloraxis\", showscale=False),\n                          texttemplate = \"%{value:,s}\",\n                          textposition = \"inside\",\n                          name=\"Tests Units by Continents\",\n                          showlegend=False),\n                \n                 row=1,\n                 col=1)\nfig.update_traces(opacity=0.7)\nfig.update_layout(coloraxis=dict(colorscale='tealrose'))\nfig.append_trace(go.Scatter(x=Continents_all.index,\n                          y=Continents_all, \n                          line=dict(color=\"#008B8B\",\n                                    width=2),\n                          showlegend=False),\n                 row=1,\n                 col=2)\nfig.update_layout(showlegend=False)\nfig.show()","84bf5851":"Tests = df['tests_units'].value_counts().nlargest(n=10)\nfig = px.pie(Tests, \n       values = Tests.values, \n       names = Tests.index, \n       title=\"Tests Units\", \n       color=Tests.values,\n       color_discrete_sequence=px.colors.qualitative.Prism)\nfig.update_traces(opacity=0.7,\n                  marker_line_color='rgb(8,48,107)',\n                  marker_line_width=1.5)\nfig.update_layout(title_x=0.5)\nfig.show()","14e39fec":"Beds = df['hospital_beds_per_thousand'].value_counts().nlargest(n=10)\nfig = px.bar(y=Beds.values,\n       x=Beds.index,\n       orientation='v',\n       color=Beds.index,\n       text=Beds.values,\n       color_discrete_sequence= px.colors.qualitative.Bold)\n\nfig.update_traces(texttemplate='%{text:.2s}', \n                  textposition='outside', \n                  marker_line_color='rgb(8,48,107)', \n                  marker_line_width=1.5, \n                  opacity=0.7)\n\nfig.update_layout(width=800, \n                  showlegend=False, \n                  xaxis_title=\"Hospital Beds\",\n                  yaxis_title=\"Count\",\n                  title=\"Hospital Beds per Thousand\")\nfig.show()","5d8f3fb3":"from nltk.tokenize import RegexpTokenizer\nfrom wordcloud import WordCloud\n\nlocation_words = df['location'].dropna().to_list()\ntokenizer = RegexpTokenizer(r'\\w+')\ntokenized_list = [tokenizer.tokenize(i) for i in location_words]\ntokenized_list = [w for l in tokenized_list for w in l]\n\ntokenized_list = [w.lower() for w in tokenized_list]\nstring = \" \".join(w for w in tokenized_list)\nwordcloud = WordCloud(width = 800, height = 800, \n                background_color ='black', colormap='Set2',\n                min_font_size = 10).generate(string) \nplt.figure(figsize = (8, 8), facecolor = None) \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \n  \nplt.show() ","bafc512f":"from IPython.display import IFrame\nIFrame('https:\/\/app.powerbi.com\/view?r=eyJrIjoiMjcxNDIyNjAtOGM0Yi00ZWJhLWJkNmEtNjFiOTI0MWVlYjNiIiwidCI6IjI1NmNiNTA1LTAzOWYtNGZiMi04NWE2LWEzZTgzMzI4NTU3OCIsImMiOjh9', width=800, height=500)","f8a46502":"#COVID-19: Government Response Stringency Index\n\nThe Government Response Stringency Index is a composite measure based on nine response indicators including\nschool closures, workplace closures, and travel bans, rescaled to a value from 0 to 100 (100 = strictest response).\n\nThe specific policy and response categories are coded as follows:\n\nSCHOOL CLOSURES:\n0 - No measures\n1 - recommend closing\n2 - Require closing (only some levels or categories,\neg just high school, or just public schools)\n3 - Require closing all levels\nNo data - blank\n\nWORKPLACE CLOSURES:\n0 - No measures\n1 - recommend closing (or work from home)\n2 - require closing (or work from home) for some\nsectors or categories of workers\n3 - require closing (or work from home) all but essential workplaces (eg grocery stores, doctors)\nNo data - blank\n\nCANCEL PUBLIC EVENTS:\n0- No measures\n1 - Recommend cancelling\n2 - Require cancelling\nNo data - blank\n\nRESTRICTIONS ON GATHERINGS:\n0 - No restrictions\n1 - Restrictions on very large gatherings (the limit is above 1000 people)\n2 - Restrictions on gatherings between 100-1000 people\n3 - Restrictions on gatherings between 10-100 people\n4 - Restrictions on gatherings of less than 10 people\nNo data - blank\n\nCLOSE PUBLIC TRANSPORT:\n0 - No measures\n1 - Recommend closing (or significantly reduce volume\/route\/means of transport available)\n2 - Require closing (or prohibit most citizens from using it)\n\nPUBLIC INFORMATION CAMPAIGNS:\n0 -No COVID-19 public information campaign\n1 - public officials urging caution about COVID-19\n2 - coordinated public information campaign (e.g. across traditional and social media)\nNo data - blank\n\nSTAY AT HOME:\n0 - No measures\n1 - recommend not leaving house\n2 - require not leaving house with exceptions for daily exercise, grocery shopping, and \u2018essential\u2019 trips\n3 - Require not leaving house with minimal exceptions (e.g. allowed to leave only once every few days, or only one person can leave at a time, etc.)\nNo data - blank\n\nRESTRICTIONS ON INTERNAL MOVEMENT:\n0 - No measures\n1 - Recommend movement restriction\n2 - Restrict movement\n\nINTERNATIONAL TRAVEL CONTROLS:\n0 - No measures\n1 - Screening\n2 - Quarantine arrivals from high-risk regions\n3 - Ban on high-risk regions\n4 - Total border closure\nNo data - blank\n\nTESTING POLICY\n0 \u2013 No testing policy\n1 \u2013 Only those who both (a) have symptoms AND (b) meet specific criteria (eg key workers, admitted to hospital, came into contact with a known case, returned from overseas)\n2 \u2013 testing of anyone showing COVID-19 symptoms\n3 \u2013 open public testing (eg \u201cdrive through\u201d testing available to asymptomatic people)\nNo data\n\nCONTRACT TRACING\n0 - No contact tracing\n1 - Limited contact tracing - not done for all cases\n2 - Comprehensive contact tracing - done for all cases\nNo data\nhttps:\/\/ourworldindata.org\/grapher\/covid-stringency-index?tab=table&country=~LKA","5d5c91bc":"Das War's Kaggle Notebook Runner: Mar\u00edlia Prata  @mpwolke","8dd85cb8":"#Incidence of diabetes in older people\n\nDiabetes can present at any age but in older people the presence of other medical problems complicates its management. It is even difficult to define \u2018older\u2019 as there is no direct link between chronological age and functional performance. They will take the accepted cut off of 65 years of age to mean \u2018older\u2019, with the important proviso that many people with diabetes in this age group are extremely fit and well and should be managed in the same way as their younger counterparts.https:\/\/www.practicaldiabetes.com\/article\/diagnosis-management-diabetes-older-people\/","963f045b":"#Diabetes a Risk factor\n\nDiabetes is a risk factor for hospitalization and mortality of the COVID-19 infection. Diabetes was a comorbidity in 22 per cent of 32 non-survivors in a study of 52 intensive care patients. In another study of 173 patients with severe disease, 16.2 per cent had diabetes, and in further study of 140 hospitalised patients, 12 per cent had diabetes. When comparing intensive care and non-intensive care patients with COVID-19, there appears to be a twofold increase in the incidence of patients in intensive care having diabetes. Mortality seems to be about threefold higher in people with diabetes compared with the general mortality of COVID-19 in China.\n\nThe number of comorbidities is a predictor of mortality in COVID-19. In addition to diabetes, the other common comorbidities were hypertension, in about 20 per cent of cases, cardiovascular disease (16 per cent), and lung disease (6 per cent). Indeed, people with diabetes are a high-risk group for severe disease. Notably, diabetes was also a risk factor for severe disease and mortality in the previous SARS, MERS (Middle East respiratory syndrome) coronavirus infections and the severe influenza A H1N1 pandemic in 2009.https:\/\/www.touchendocrinology.com\/insight\/covid-19-infection-in-people-with-diabetes\/","dae7c59f":"#Code from Sayar_Banner https:\/\/www.kaggle.com\/sayar1106\/eda-on-naukri-com-data-using-plotly","01b1e59d":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcSRdeb-PSzQ1Nc2BVFGgp9_2_Kj0fUw4WGhyg&usqp=CAU)\nA Stringency Index created by Oxford University shows how strict a country\u2019s measures were responding to the Covid-19 outbreak, and at what stage of the spread it enforced these.\n\nIt is among the metrics being used by the Oxford COVID-19 Government Response Tracker.\n\nIt tracks 17 indicators of government response. These indicators examine containment policies such as school and workplace closings, public events, public transport, stay-at-home policies.\n\nThe Stringency Index is a number from 0 to 100 that reflects these indicators. A higher index score indicates a higher level of stringency. \nhttps:\/\/vajiramias.com\/current-affairs\/stringency-index\/5eb627301d5def085925d4a7\/","edb48527":"#What explain the increase risk of diabetes?\n\nIt is a fact that people with diabetes are at increased risk of infections including influenza and for related complications such as secondary bacterial pneumonia. Diabetes patients have impaired immune-response to infection both in relation to cytokine profile and to changes in immune-responses including T-cell and macrophage activation. Poor glycaemic control impairs several aspects of the immune response to viral infection and also to the potential bacterial secondary infection in the lungs. It is likely that many of the patients with diabetes in China have been in poor metabolic control when infected by COVID-19.\n\nMany patients with type 2 diabetes are obese and obesity is also a risk factor for severe infection. It was illustrated during the influenza A H1N1 epidemic in 2009 that the disease was more severe and had a longer duration in about twofold more patients with obesity who were then treated in intensive care units compared with background population. Specically, metabolic active abdominal obesity is associated with higher risk. The abnormal secretion of adipokines and cytokines like TNF-alfa and interferon characterise a chronic low-grade in abdominal obesity and may induce an impaired immune-response.\n\nPeople with severe abdominal obesity also have mechanical respiratory problems, with reduced ventilation of the basal lung sections increasing the risk of pneumonia as well as reduced oxygen saturation of blood.  Obese subjects also have an increased asthma risk, and those patients with obesity and asthma have more symptoms, more frequent and severe exacerbations and reduced response to several asthma medications https:\/\/www.touchendocrinology.com\/insight\/covid-19-infection-in-people-with-diabetes\/","0a6e84e5":"Our World in Data (OWID) is a scientific online publication that focuses on large global problems such as poverty, disease, hunger, climate change, war, existential risks, and inequality. \nThe publication's founder is the social historian and development economist Max Roser. The research team is based at the University of Oxford. https:\/\/en.wikipedia.org\/wiki\/Our_World_in_Data","65418c25":"![](https:\/\/i1.wp.com\/wileymicrositebuilder.com\/practicaldiabetes\/wp-content\/uploads\/sites\/29\/2017\/07\/Kilvert-figure-1.png?w=594&ssl=1)The Health Improvement Network (THIN) data show that the highest incidence of type 2 diabetes for both men and women is in the 70\u201379 age group at 12.7 and 10.3 per 1000 PYAR for men and women respectively, with the 60\u201369 and 80\u201389 age groups coming second and third. In both men and women the incidence rates were highest at 75 years, although both groups showed a slight decline in incidence over the course of the observation period. https:\/\/www.practicaldiabetes.com\/article\/diagnosis-management-diabetes-older-people\/ ","b70603e4":"#Visualization of every feature with missing values.","7403486d":"#Codes from Fedi Ben Messaoud","3c9cb57e":"ourworldindata.org"}}