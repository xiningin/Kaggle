{"cell_type":{"cc02b1ac":"code","b5117456":"code","46d5cc5e":"code","f8782625":"code","53407e66":"code","f53d17fd":"code","8d6b19e5":"code","8d6945ed":"code","ea72c5d4":"code","faaa4bb8":"code","8cb99060":"code","c0b0d6c6":"code","e42d8e2e":"code","f01e2bdd":"code","824914ab":"code","28dd6c9d":"code","47648a92":"code","4e6ceefd":"code","f11fb333":"code","398a23da":"code","839a0c58":"code","e10b68c5":"code","de9a25ea":"code","4acb094f":"code","e4f17956":"code","2d9f2a21":"code","cf5dceab":"code","49f41240":"code","b0ddd0af":"code","c6a3ddfa":"code","2b17746e":"code","11b1e4ee":"code","e7eec8b0":"code","f2e4ef16":"code","d88c26eb":"code","fc98914f":"code","ccdc1bac":"code","a62b1bd9":"code","75abeeac":"code","f961823e":"code","051989e1":"code","3bd06013":"code","d92a3056":"code","de3408e8":"code","413113ba":"code","7efe6074":"code","d12721c6":"code","b52c080b":"code","5e1f3f3d":"markdown","7302e9c0":"markdown","8e958799":"markdown","5a82c542":"markdown","fc039787":"markdown","feecc3d0":"markdown","47581219":"markdown","5897a086":"markdown","b722a6a1":"markdown","01391946":"markdown","fda76096":"markdown","820c20b4":"markdown","0df19ea7":"markdown","debd08d5":"markdown","4c7ada4d":"markdown","33f98871":"markdown","6ff3451d":"markdown","60c7aa0f":"markdown","26483258":"markdown"},"source":{"cc02b1ac":"import gc\nimport os\nimport random\n\nimport lightgbm as lgb\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport itertools\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.decomposition import TruncatedSVD\n\nfrom matplotlib import pyplot as plt\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import StratifiedKFold, KFold, GroupKFold\nfrom sklearn.cluster import KMeans\n\nsns.set(style='darkgrid')\nSEEDS = 42","b5117456":"inputPath = '\/kaggle\/input\/used-car-price-forecasting\/'\ntrain = pd.read_csv(inputPath + 'train.csv')\ntest = pd.read_csv(inputPath + 'test.csv')","46d5cc5e":"# yaer\u306e\u5916\u308c\u5024\u9664\u53bb (test\u6700\u5c0f\u3088\u308a\u6614\u306eyear\u306e\u5024\u3092\u6301\u3064train\u306e\u30ec\u30b3\u30fc\u30c9\u3092\u524a\u9664\u3059\u308b)\ntrain = train[train.year >= test.year.min()].copy()","f8782625":"train['flag'] = 'train'\ntest['flag'] = 'test'\n\ndf = pd.concat([train,test],axis=0)\ndel train,test\ngc.collect()","53407e66":"# \u6b63\u898f\u8868\u73fe\u30de\u30c3\u30c1\u30f3\u30b0\u3092\u7c21\u7565\u5316\u3059\u308b\u305f\u3081\u306bdescription\u3092\u524d\u51e6\u7406\ndf['description'] = df['description'].str.lower()\ndf['description'] = df['description'].str.replace(',','') #\u6570\u5024\u306e\u6841\u533a\u5207\u306e,\u3092\u524a\u9664","f53d17fd":"# \"XX miles\" \u3068 \"Mileage: XX\"\u306eXX\u3092\u62bd\u51fa\uff0812k\u3068\u3044\u3046\u3088\u3046\u306b\u30ad\u30ed\u306e\u63a5\u982d\u8f9e\u3092\u7528\u3044\u3066\u3044\u308b\u30b1\u30fc\u30b9\u304c\u3042\u308b\u304c\u305d\u306e\u307e\u307e\u53d6\u308b\uff09\ndf['XX_miles'] = df.description.str.extract('([1-9]+[0-9]+k?)\\s?miles')\ndf['mileage_XX'] = df.description.str.extract('mileage[\\s:]?[\\s:]?([1-9]+[0-9]+k?)')\n\ndf['XX_miles'].fillna('-', inplace=True)\ndf['mileage_XX'].fillna('-', inplace=True)","8d6b19e5":"# k(\u30ad\u30ed)\u304c\u4ed8\u3044\u3066\u3044\u308b\u3082\u306e\u306f1000\u500d\u3059\u308b\ndf.loc[df['XX_miles'].str.contains('k', na=False),'XX_miles'] = \\\ndf.loc[df['XX_miles'].str.contains('k', na=False),'XX_miles'].str.replace('k','').astype(int) * 1000\n\ndf.loc[df['mileage_XX'].str.contains('k', na=False),'mileage_XX'] = \\\ndf.loc[df['mileage_XX'].str.contains('k', na=False),'mileage_XX'].str.replace('k','').astype(int) * 1000","8d6945ed":"# \u6570\u5024\u578b\u306b\u5909\u63db\ndf['XX_miles'] = pd.to_numeric(df['XX_miles'], errors='coerce')\ndf['mileage_XX'] = pd.to_numeric(df['mileage_XX'], errors='coerce')","ea72c5d4":"# odometer\u304c\u6b20\u640d\u5024\u3092description\u304b\u3089\u62bd\u51fa\u3057\u305f\u6570\u5024\u306b\u7f6e\u304d\u63db\u3048\nbfr_cnt = df.odometer.dropna().count()\ndf.loc[(df.odometer.isnull())&(df.XX_miles.isnull())&(~df.mileage_XX.isnull()),'odometer'] = \\\ndf.loc[(df.odometer.isnull())&(df.XX_miles.isnull())&(~df.mileage_XX.isnull()),'mileage_XX']\n\ndf.loc[(df.odometer.isnull())&(~df.XX_miles.isnull())&(df.mileage_XX.isnull()),'odometer'] = \\\ndf.loc[(df.odometer.isnull())&(~df.XX_miles.isnull())&(df.mileage_XX.isnull()),'XX_miles']\n\ndf.loc[(df.odometer.isnull())&(~df.XX_miles.isnull())&(~df.mileage_XX.isnull()),'odometer'] = \\\ndf.loc[(df.odometer.isnull())&(~df.XX_miles.isnull())&(~df.mileage_XX.isnull()),'XX_miles']\naftr_cnt = df.odometer.dropna().count()\nprint('odometer\u306e\u6b20\u640d\u5024\u88dc\u5b8c\u6570:', aftr_cnt - bfr_cnt)","faaa4bb8":"# \u4e0d\u8981\u5217\u3092\u524a\u9664\ndel df['XX_miles']\ndel df['mileage_XX']","8cb99060":"# vin\u306e\u6841\u6570\ndf['vin_cnt'] = df['vin'].apply(lambda x: len(x) if x is not np.nan else 0)\n\n\n# vin\u306e\u6841\u3054\u3068\u5206\u89e3\nfor i in range(10):\n    df.loc[df['vin_cnt'] == 17, 'vin'+'_'+str(i+1)] = df.loc[df['vin_cnt'] == 17, 'vin'].str[i]\ndf.loc[df['vin_cnt'] == 17, 'vin_1-10'] = df.loc[df['vin_cnt'] == 17, 'vin'].str[:10]","c0b0d6c6":"df['lat_long'] = df['lat'].astype(str) + '_' + df['long'].astype(str)\ndf['lat_long_cnt'] = df.groupby(['lat_long'])['flag'].transform('count')","e42d8e2e":"n_clstr = 15\nkmeans = KMeans(n_clusters=n_clstr, random_state=SEEDS).fit(df[['lat', 'long']])\ndf['lat_long_clstr'] = kmeans.labels_","f01e2bdd":"# text_count\ndf['num_chars'] = df['description'].apply(len) \ndf['num_words'] = df['description'].apply(lambda x: len(x.split()))\ndf['num_unique_words'] = df['description'].apply(lambda x: len(set(w for w in x.split())))","824914ab":"# aggregation\nfor c in ['manufacturer', 'condition', 'cylinders', 'fuel', 'drive', 'type']:\n    df['mean_' + c + '_odometer'] = df.groupby(c)['odometer'].transform('mean')\n    df['std_' + c + '_odometer'] = df.groupby(c)['odometer'].transform('std')\n    df['max_' + c + '_odometer'] = df.groupby(c)['odometer'].transform('max')\n    df['min_' + c + '_odometer'] = df.groupby(c)['odometer'].transform('min')\n    df['maxmin_' + c + '_odometer'] = df['max_' + c + '_odometer'] - df['min_' + c + '_odometer']","28dd6c9d":"%%time\n#URL www~.com(youtube, facebook\u9664\u304f)\ndf['haswebsite'] = (df['description'].str.contains('www', case=False) & ~df['description'].str.contains('youtube|facebook', na = False, case=False)).astype(int)\ndf['hasyoutube'] = df['description'].str.contains('youtube', case=False).astype(int)\n#df['hasfacebook'] = df['description'].str.contains('facebook', case=False).astype(int)\n#df['website']= df['description'].str.extract('www.(.*?).com', expand=True)","47648a92":"%%time\n#model\u540d\u304c\u6570\u5024\u3060\u3051\uff081500,2500\uff09\u7b49\u306fmanufacturer\u3092\u524d\u306b\u7740\u3051\u308b\n#manufacturer\u3054\u3068\u306e\u5e73\u5747\u4fa1\u683c\u4e0a\u4f4d\u4e09\u8eca\u7a2e\u30d5\u30e9\u30b0\n\n#\u30af\u30e9\u30b7\u30c3\u30af\u30ab\u30fc\u30d5\u30e9\u30b0\uff1ayear\u304c1980\u5e74\u4ee5\u4e0a\u524d\u3068\u304b\n\n#\u3001\u5e73\u5747\u4fa1\u683c50k\u3092\u8d85\u3048\u308bmodel\u304b\n#\u5e74\u9593\u8d70\u884c\u8ddd\u96e2\n#df['odometer_per_year'] = df['odometer'] \/ ((df['year'].max() + 1) - df['year'])\n#manufacturer + model\ndf['manufacturer_model'] = df['manufacturer'].str.cat(df['model'])\ndf['year_manufacturer'] = df['year'].astype(str).str.cat(df['manufacturer'])\ndf['year_model'] = df['year'].astype(str).str.cat(df['model'])\n#df['year_manufacturer_model'] = df['year'].astype(str).str.cat(df['manufacturer_model'])\n#df['year_manufacturer_model_carvana'] = df['year_manufacturer_model'] + df['description'].str.contains('carvana', case=False).astype(int).astype(str)\n#del df['year_manufacturer_model']\n#del df['manufacturer_model']","4e6ceefd":"%%time\n#\u50b7\ndf['hasrip'] = (df['description'].str.contains('rip', case=False) ).astype(int)\ndf['hasdent'] = (df['description'].str.contains('dent', case=False) ).astype(int)","f11fb333":"%%time\n#2000\u5e74\u4ee3\u3000\u52b9\u304b\u306a\u3044\n#df['2000s'] = (df['year'].between(2000, 2009, inclusive=True)).astype(int)\n#df['2010s'] = (df['year'].between(2010, 2021, inclusive=True)).astype(int)\n#df['2000s'] = (df['year'].between(2000, 2021, inclusive=True)).astype(int)","398a23da":"%%time\n#DVD\ndf['hasdvd'] = (df['description'].str.contains('dvd', case=False) ).astype(int)\n\n#Financing \u52b9\u304f\ndf['hasfinance'] = (df['description'].str.contains('Financ', case=False) ).astype(int)\n#df['hasloan'] = (df['description'].str.contains('loan', case=False) ).astype(int)\n\n#no issue\u3000\u666e\u901a\ndf['hasnoissue'] = (df['description'].str.contains('no issue', case=False) ).astype(int)\n\n#cheap\u3000\u52b9\u304b\u306a\u3044\n#df['ischeap'] = (df['description'].str.contains('cheap', case=False) ).astype(int)\n#quality\ndf['hasquality'] = (df['description'].str.contains('quali', case=False) ).astype(int)\n#turbo\ndf['isturbo'] = (df['description'].str.contains('turbo', case=False) ).astype(int)\n#super charger\ndf['issupercharger'] = (df['description'].str.contains('charg', case=False) ).astype(int)\n#restore \u52b9\u304b\u306a\u3044\n#df['isrestored'] = (df['description'].str.contains('restor', case=False) ).astype(int)\n#platinum\ndf['isplatinum'] = (df['description'].str.contains('platin', case=False) ).astype(int)\n#account\ndf['hasaccount'] = (df['description'].str.contains('account', case=False) ).astype(int)\n#incentive\ndf['hasincentive'] = (df['description'].str.contains('incentive', case=False) ).astype(int)\n#inspection\n#df['hasinspection'] = (df['description'].str.contains('inspection', case=False) ).astype(int)\n#interior\n#df['hasinterior'] = (df['description'].str.contains('interior', case=False) ).astype(int)\n#CASH SPECIALS\n#df['hascashspecials'] = (df['description'].str.contains('cash special', case=False) ).astype(int)","839a0c58":"%%time\n# aggregation\ndf['car_age'] = (df['year'].max() + 1) - df['year']\nfor c in ['manufacturer', 'condition', 'cylinders', 'fuel', 'drive', 'type']:\n    df['mean_' + c + '_car_age'] = df.groupby(c)['car_age'].transform('mean')\n    df['std_' + c + '_car_age'] = df.groupby(c)['car_age'].transform('std')\n    df['max_' + c + '_car_age'] = df.groupby(c)['car_age'].transform('max')\n    df['min_' + c + '_car_age'] = df.groupby(c)['car_age'].transform('min')\n    df['maxmin_' + c + '_car_age'] = df['max_' + c + '_car_age'] - df['min_' + c + '_car_age']","e10b68c5":"%%time\ndf['odometer_per_year'] = df['odometer'] \/ ((df['year'].max() + 1) - df['year'])\nfor c in ['manufacturer', 'condition', 'cylinders', 'fuel', 'drive', 'type']:\n    df['mean_' + c + '_odometer_per_year'] = df.groupby(c)['odometer_per_year'].transform('mean')\n    df['std_' + c + '_odometer_per_year'] = df.groupby(c)['odometer_per_year'].transform('std')\n    df['max_' + c + '_odometer_per_year'] = df.groupby(c)['odometer_per_year'].transform('max')\n    df['min_' + c + '_odometer_per_year'] = df.groupby(c)['odometer_per_year'].transform('min')\n    df['maxmin_' + c + '_odometer_per_year'] = df['max_' + c + '_odometer_per_year'] - df['min_' + c + '_odometer_per_year']","de9a25ea":"# \u4e0d\u8981\u5217\u3092\u524a\u9664\ndel df['odometer_per_year']\ndel df['car_age']","4acb094f":"#del df['min_cylinders_odometer_per_year']","e4f17956":"%%time\n#color\n\n#df['iswhite'] = (df['description'].str.contains('white', case=False) ).astype(int)\n#df['isblack'] = (df['description'].str.contains('black', case=False) ).astype(int)\n#df['isorange'] = (df['description'].str.contains('orange', case=False) ).astype(int)\n##df['isyellow'] = (df['description'].str.contains('yellow', case=False) ).astype(int)\n#df['isred'] = (df['description'].str.contains('red', case=False) ).astype(int)\n#df['isgrey'] = (df['description'].str.contains('grey', case=False) ).astype(int)\n#df['issilver'] = (df['description'].str.contains('silver', case=False) ).astype(int)\n#df['ispblue'] = (df['description'].str.contains('blue', case=False) ).astype(int)\n#df['isppurple'] = (df['description'].str.contains('purple', case=False) ).astype(int)\n#df['isbrown'] = (df['description'].str.contains('brown', case=False) ).astype(int)\n#df['isgreen'] = (df['description'].str.contains('green', case=False) ).astype(int)\n\ndf.loc[(df['description'].str.contains('white', case=False)) & (df['paint_color'].isnull()), 'paint_color'] = 'white'\ndf.loc[(df['description'].str.contains('black', case=False)) & (df['paint_color'].isnull()), 'paint_color'] = 'black'\ndf.loc[(df['description'].str.contains('orange', case=False)) & (df['paint_color'].isnull()), 'paint_color'] = 'orange'\ndf.loc[(df['description'].str.contains('yellow', case=False)) & (df['paint_color'].isnull()), 'paint_color'] = 'yellow'\ndf.loc[(df['description'].str.contains('red', case=False)) & (df['paint_color'].isnull()), 'paint_color'] = 'red'\ndf.loc[(df['description'].str.contains('grey', case=False)) & (df['paint_color'].isnull()), 'paint_color'] = 'grey'\ndf.loc[(df['description'].str.contains('silver', case=False)) & (df['paint_color'].isnull()), 'paint_color'] = 'silver'\ndf.loc[(df['description'].str.contains('blue', case=False)) & (df['paint_color'].isnull()), 'paint_color'] = 'blue'\ndf.loc[(df['description'].str.contains('purple', case=False)) & (df['paint_color'].isnull()), 'paint_color'] = 'purple'\ndf.loc[(df['description'].str.contains('brown', case=False)) & (df['paint_color'].isnull()), 'paint_color'] = 'brown'\ndf.loc[(df['description'].str.contains('green', case=False)) & (df['paint_color'].isnull()), 'paint_color'] = 'green'\n","2d9f2a21":"%%time\n#1\u30aa\u30fc\u30ca\u30fc\u30d5\u30e9\u30b0\uff08description\u304b\u3089\uff09\ndf['one_owner'] = (df['description'].str.contains('owner ', case=False) ).astype(int)\n#\u30d7\u30ec\u30df\u30a2\u30e0\u30d5\u30e9\u30b0\ndf['ispremium'] = (df['description'].str.contains('premium', case=False) ).astype(int)\n#\u30af\u30ea\u30fc\u30f3\ndf['isclean'] = (df['description'].str.contains('clean', case=False) ).astype(int)\n#type\n#df['ispickup'] = (df['description'].str.contains('pickup', case=False) ).astype(int)\n#df['istruck'] = (df['description'].str.contains('truck', case=False) ).astype(int)\n#df['isbus'] = (df['description'].str.contains('bus', case=False) ).astype(int)\n#df['iscoupe'] = (df['description'].str.contains('coupe', case=False) ).astype(int)\n##df['isoffroad'] = (df['description'].str.contains('offroad', case=False) ).astype(int)\n##df['isconvertible'] = (df['description'].str.contains('convertible', case=False) ).astype(int)\n#df['issuv'] = (df['description'].str.contains('suv', case=False) ).astype(int)\n#df['isvan'] = (df['description'].str.contains('van', case=False) ).astype(int)\n##df['ishatch'] = (df['description'].str.contains('hatch', case=False) ).astype(int)\n#df['issedan'] = (df['description'].str.contains('sedan', case=False) ).astype(int)\n#df['ismini'] = (df['description'].str.contains('mini', case=False) ).astype(int)","cf5dceab":"%%time\n#type\u88dc\u5b8c\ndf.loc[(df['description'].str.contains('pickup', case=False)) & (df['type'].isnull()), 'type'] = 'pickup'\ndf.loc[(df['description'].str.contains('truck', case=False)) & (df['type'].isnull()), 'type'] = 'truck'\ndf.loc[(df['description'].str.contains('bus', case=False)) & (df['type'].isnull()), 'type'] = 'bus'\ndf.loc[(df['description'].str.contains('coupe', case=False)) & (df['type'].isnull()), 'type'] = 'coupe'\ndf.loc[(df['description'].str.contains('offroad', case=False)) & (df['type'].isnull()), 'type'] = 'offroad'\ndf.loc[(df['description'].str.contains('convertible', case=False)) & (df['type'].isnull()), 'type'] = 'convertible'\ndf.loc[(df['description'].str.contains('suv', case=False)) & (df['type'].isnull()), 'type'] = 'SUV'\ndf.loc[(df['description'].str.contains('van', case=False)) & (df['type'].isnull()), 'type'] = 'van'\ndf.loc[(df['description'].str.contains('hatchback', case=False)) & (df['type'].isnull()), 'type'] = 'hatchback'\ndf.loc[(df['description'].str.contains('sedan', case=False)) & (df['type'].isnull()), 'type'] = 'sedan'\ndf.loc[(df['description'].str.contains('mini-van', case=False)) & (df['type'].isnull()), 'type'] = 'mini-van'","49f41240":"%%time\n#drive\n#df['is4x4'] = (df['description'].str.contains('4x4', case=False) ).astype(int)\n#df['is4x2'] = (df['description'].str.contains('4x2', case=False) ).astype(int)\n\ndf.loc[(df['description'].str.contains('rwd', case=False)) & (df['drive'].isnull()), 'drive'] = 'rwd'\ndf.loc[(df['description'].str.contains('fwd', case=False)) & (df['drive'].isnull()), 'drive'] = 'fwd'\ndf.loc[(df['description'].str.contains('4x4|4wd', case=False)) & (df['drive'].isnull()), 'drive'] = '4wd'","b0ddd0af":"#df['model_drive'] = df['model'].str.cat(df['drive'])","c6a3ddfa":"%%time\nfor c in ['region','manufacturer','model','condition','fuel','title_status','transmission', 'vin', 'drive', 'size', 'type', 'state','manufacturer_model', 'year_manufacturer', 'year_model']:\n    df['count_' + c] = df.groupby([c])['flag'].transform('count')","2b17746e":"#\u6b20\u640d\u5024\u306e\u6570\u3092\u30ab\u30a6\u30f3\u30c8\ndf['nan_count'] = df[df.columns[df.columns != 'price']].isnull().sum(axis=1)","11b1e4ee":"# tfidf\u306e\u30d1\u30e9\u30e1\u30fc\u30bf(senkin\u3055\u3093 avito\u8cc7\u6599\u3092\u53c2\u8003\u306b)\ntfidf_param = {\n    'stop_words' : 'english',\n    'analyzer' : 'word',\n    'lowercase' : True,\n    'sublinear_tf' : True,\n    'dtype' : np.float32,\n    'ngram_range' : (1,2)\n}\n\n# svd\u306e\u6b21\u5143\u6570\nsvd_n_comp = 40\n\nvectorizer = TfidfVectorizer(**tfidf_param) \ntfidf = vectorizer.fit_transform(df.description)\nsvd = TruncatedSVD(n_components=svd_n_comp, random_state=SEEDS)\ntruncated_tfidf = svd.fit_transform(tfidf)\n\n# svd\u306e\u5404\u6b21\u5143\u3054\u3068\u7279\u5fb4\u91cf\u5316\nfor i in range(svd_n_comp):\n    df['desc_embed' + str(i)] = truncated_tfidf[:,i]","e7eec8b0":"# \u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\nle = LabelEncoder()\nfor c in list(df.dtypes[df.dtypes == 'object'].index):\n    if c != 'flag':\n        df[c] = le.fit_transform(df[c].astype(str))","f2e4ef16":"target = 'price'\nnot_use_cols = [target,'flag', 'id', 'description', 'vin_cnt']\nfeatures = [c for c in df.columns if c not in not_use_cols]\ndf[features].dtypes","d88c26eb":"def rmse(y_true, y_pred):\n    return (mean_squared_error(y_true, y_pred))** .5","fc98914f":"train = df[df['flag']=='train'].copy()\ntrain['price'] = np.log1p(train['price'])\ntest = df[df['flag']=='test'].copy()\ndel df\ngc.collect()","ccdc1bac":"# optuna lgb tuner\u3067\u7b97\u51fa\nparams = {'objective': 'regression',\n          'boosting': 'gbdt',\n          'metric': 'rmse',\n          'lambda_l1':  3.6263232733678154e-08, #1.4620889640612657e-07-->3.6263232733678154e-08\n          'lambda_l2': 5.90600258293929, #1.5940260411245383e-05 -->5.90600258293929\n          'num_leaves': 31,\n          'feature_fraction': 0.5, # 0.6 -->0.5\n          'bagging_fraction': 1.0, # 0.9926030415777137 -->1.0\n          'bagging_freq': 0, # 7 -->0\n          'min_child_samples': 5 #20-->5\n         }","a62b1bd9":"# cv\u8a2d\u5b9a\nFOLD_N = 5\nkf = KFold(n_splits=FOLD_N, shuffle = True, random_state = SEEDS)","75abeeac":"feature_importances = pd.DataFrame()\noof = pd.DataFrame()\npreds = np.zeros(len(test))\nscores = 0.0\n\nfor n, (tr_idx, vl_idx) in enumerate(kf.split(train[features])):\n    print('Fold: ' +str(n+1))\n    tr_x, tr_y = train[features].iloc[tr_idx], train[target].iloc[tr_idx]\n    vl_x, vl_y = train[features].iloc[vl_idx], train[target].iloc[vl_idx]\n    vl_id = train['id'].iloc[vl_idx]\n\n    tr_data = lgb.Dataset(tr_x, label=tr_y)\n    vl_data = lgb.Dataset(vl_x, label=vl_y)\n    \n    model = lgb.train(params, tr_data, valid_sets=[tr_data, vl_data],\n                      num_boost_round=200000, early_stopping_rounds=100,verbose_eval=1000)\n    \n    fi_tmp = pd.DataFrame()\n    fi_tmp['feature'] = model.feature_name()\n    fi_tmp['importance'] = model.feature_importance(importance_type='gain')\n    fi_tmp['fold'] = n\n    feature_importances = feature_importances.append(fi_tmp)\n    \n    vl_pred = model.predict(vl_x, num_iteration=model.best_iteration)\n    score = rmse(vl_y, vl_pred)\n    scores += score \/ FOLD_N\n    print(f'score : {score}')\n    \n    oof = oof.append(pd.DataFrame({'id':vl_id, 'pred':vl_pred}))\n    \n    pred = model.predict(test[features], num_iteration=model.best_iteration)\n    preds += pred \/ FOLD_N\nprint(f'total_score : {scores}')","f961823e":"# out-of-fold\u306e\u4e88\u6e2c\u7d50\u679c\u3092\u51fa\u529b\noof = train.merge(oof, how='inner', on='id')[['id', 'pred']]\noof['pred'] = np.expm1(oof['pred'])\noof.to_csv('oof_pred.csv', index=False)","051989e1":"# \u7279\u5fb4\u91cf\u91cd\u8981\u5ea6\nplt.figure(figsize=(14, 20))\nsns.barplot(x=\"importance\", y=\"feature\", data=feature_importances.sort_values(by=\"importance\", ascending=False))\nplt.title(\"LightGBM Feature Importance\")\nplt.tight_layout()","3bd06013":"test['price'] = np.expm1(preds)","d92a3056":"test[['id','price']].to_csv('submission_without_pp.csv',index=False)","de3408e8":"train_pp = pd.read_csv(inputPath + 'train.csv')\ntest_pp = pd.read_csv(inputPath + 'test.csv')\nlen(test_pp)","413113ba":"# \u540c\u3058\u8eca\u4e21\u304b\u5224\u65ad\u3059\u308b\u305f\u3081\u306b\u7528\u3044\u308b\u5217 \n# (vin\u3060\u3051\u3067\u4e00\u610f\u306b\u306a\u308b\u3068\u601d\u3063\u305f\u304c\u6b63\u3057\u304f\u306a\u3044\u5024\u304c\u5165\u3063\u3066\u3044\u308b\u30b1\u30fc\u30b9\u3082\u3042\u308b\u305f\u3081\u3001\u5217\u3092\u5897\u3084\u3057\u305f)\ncols = ['year', 'manufacturer', 'model','fuel', 'title_status', 'transmission', 'vin']\n\ntrain_pp = train_pp.groupby(cols)['price'].mean().reset_index()\ntest_pp = test_pp.merge(train_pp, on=cols, how='inner')\ntest_pp = test_pp[['id','price']]\ntest_pp.columns = ['id', 'price2']\nlen(test_pp)","7efe6074":"test = test.merge(test_pp, on='id', how='left')\ntest.loc[~test['price2'].isnull(), 'price'] = test.loc[~test['price2'].isnull(), 'price2']","d12721c6":"test[['id','price']].to_csv('submission.csv',index=False)","b52c080b":"test[['id','price']]","5e1f3f3d":"## descprition\u306eembedding\ndescription\u3092tfidf\u3067\u30d9\u30af\u30c8\u30eb\u5316\u3057\u3001SVD\u3067\u6b21\u5143\u5727\u7e2e","7302e9c0":"## \u7d4c\u5ea6\u00d7\u7def\u5ea6\u3092kmeans\u3067\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0","8e958799":"## year\u306e\u5916\u308c\u5024\u9664\u53bb  \ntest\u306b\u542b\u307e\u308c\u306a\u3044\u3088\u3046\u306ayear\u306e\u53e4\u3044train\u30c7\u30fc\u30bf\u3092\u524a\u9664\u3059\u308b","5a82c542":"v1 : n_clstr = 10  \nv2 : n_clstr = 5  \nv4 : n_clstr = 15  \nv5 20","fc039787":"# post_processing  \n\u540c\u3058\u8eca\u4e21\u306e\u3082\u306e\u3068\u60f3\u5b9a\u3055\u308c\u308b\u91cd\u8907\u30c7\u30fc\u30bf\u306b\u95a2\u3057\u3066\u3001train\u306eprice\u3092\u305d\u306e\u307e\u307etest\u306e\u4e88\u6e2c\u5024\u3068\u3057\u3066\u66f8\u304d\u63db\u3048\u308b","feecc3d0":"# \u30ab\u30a6\u30f3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","47581219":"## \u7d4c\u5ea6\u00d7\u7def\u5ea6\u306e\u7279\u5fb4\u91cf\u4f5c\u6210\n\u7d4c\u5ea6\u3068\u7def\u5ea6\u306e\u7d44\u307f\u5408\u308f\u305b\u5217\uff08\u3064\u307e\u308a\u5ea7\u6a19\u70b9\uff09\u3092\u4f5c\u6210  \n\u305f\u304f\u3055\u3093\u51fa\u54c1\u3057\u3066\u3044\u308b\u51fa\u54c1\u8005\u306a\u3069\u306e\u7279\u5fb4\u8868\u73fe\u3068\u3057\u3066\u3053\u306e\u5ea7\u6a19\u70b9\u306e\u30ab\u30a6\u30f3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u5b9f\u65bd","5897a086":"# \u5c65\u6b74\n\n1: \u6d3e\u751f\u521d\u7248: RMSE: 0.2230705963427297, LB:0.21642<br>\n2:20\u219215 RMSE:0.22293670620528716, LB:0.21579<br>\n3: \u30ab\u30a6\u30f3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0 RMSE\uff1a0.2223763971667362\u3001LB\uff1a0.21464<br>\n4:isyeallow,isgrreem\u524a\u9664 RMSE\uff1a0.2219716988301068<br>\n5:brown\u524a\u9664\uff1a0.22194107655067113 LB:0.21557 \u2190LB\u306f\u60aa\u5316<br>\n6:year_manufacturer\u3001year_model\u8ffd\u52a0 RMSE\uff1a0.2217281406101977 LB: 0.21485 \u2190LB\u306f\u82e5\u5e72\u524d\u56de\u3088\u308a\u6539\u5584<br>\n7:4x4\u30fbrwd\u30fbfwd\u3001type,color\u3092\u30d5\u30e9\u30b0\u304b\u3089\u6b20\u640d\u88dc\u5b8c\u3078\u3002 RMSE:0.22241630307045201<br>\n8:car age \u3000aggregation RMSE:0.22185800524576982 LB:0.21433<br>\n9:web\u30b5\u30a4\u30c8\u8ffd\u52a0 RMSE:0.22161836375714633<br>\n10:\u30cf\u30a4\u30d1\u30e9\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0 RMSE:0.2203901031858307 LB0.21417<br>\n11: NaN\u30ab\u30a6\u30f3\u30c8\uff1a CV RMSE\uff1a0.2203560163049716 LB\uff1a0.21359<br>\n12\uff1aFacebook\u9664\u53bb: CV RMSE\uff1a0.2201507290599086\u21920.21982561573826517<br>","b722a6a1":"## description\u304b\u3089\u306eodometer\u306e\u6b20\u640d\u5024\u88dc\u5b8c  \n\"Mileage: XX\" \u3084 \"XX miles\"\u3068\u3044\u3046\u5f62\u3067odometer\u3068\u601d\u308f\u308c\u308b\u30c7\u30fc\u30bf\u304cdescription\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u306e\u3067\u3001  \n\u6b63\u898f\u8868\u73fe\u3067\u62bd\u51fa\u3057\u3001odometer\u306e\u6b20\u640d\u5024\u88dc\u5b8c\u306b\u7528\u3044\u308b","01391946":"# \u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f","fda76096":"# \u30c7\u30fc\u30bf\u52a0\u5de5","820c20b4":"# Aoyama\u7279\u5fb4\u91cf\u8ffd\u52a0","0df19ea7":"# \u7279\u5fb4\u91cf\u4f5c\u6210","debd08d5":"## description\u306e\u5358\u7d14\u306a\u7279\u5fb4\u91cf\u4f5c\u6210  \n\u5358\u8a9e\u6570\u306a\u3069\u306e\u5358\u7d14\u306a\u7279\u5fb4\u91cf\u4f5c\u6210","4c7ada4d":"# \u52b9\u304b\u306a\u3044\u304b\u3082\u5909\u6570\u524a\u9664","33f98871":"# \u30e2\u30c7\u30ea\u30f3\u30b0","6ff3451d":"## train\u3068test\u306e\u7d50\u5408  \n\u5f8c\u3005\u306e\u30c7\u30fc\u30bf\u52a0\u5de5\u3092\u307e\u3068\u3081\u3066\u884c\u3046\u305f\u3081\u3001train\u3068test\u3092\u7d50\u5408\u3057\u3066\u304a\u304f","60c7aa0f":"## vin\u306e\u5206\u89e3\nvin\u306f\u5404\u6841\u3054\u3068\u610f\u5473\u3092\u6301\u3064\u305f\u3081\u3001\u5206\u89e3\u3057\u7279\u5fb4\u91cf\u5316\u3092\u884c\u3046","26483258":"## aggregation\u7279\u5fb4\u91cf\u4f5c\u6210"}}