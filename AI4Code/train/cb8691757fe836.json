{"cell_type":{"c011e6ce":"code","70bb9a6d":"code","8493ee9e":"code","b38b7152":"code","5bdb6896":"code","ca46a3d3":"code","c5526fae":"code","ddef3ed3":"code","c836c665":"code","194d83c8":"code","9f05a287":"code","4a3d3c7f":"code","a2e095b1":"code","7b377cb2":"code","8e267e43":"code","0ff213a6":"code","20030e4d":"code","599d3200":"code","61d52e34":"code","37b9dace":"code","d3b9c4ba":"code","00363df3":"code","fcbff40c":"code","54d3e89a":"code","0f85b6b0":"code","8be9de4e":"code","121561e6":"code","9ceb5a2b":"code","39354911":"code","71838a79":"markdown","dcdd1f19":"markdown","b87d3189":"markdown","56720597":"markdown","af3666a9":"markdown","0ecf41c3":"markdown","ef760ccb":"markdown","1e8a9d74":"markdown","0ce22220":"markdown","8fb82d21":"markdown","9b212f8b":"markdown","fdf2c43e":"markdown","67592dfb":"markdown","7b698f65":"markdown"},"source":{"c011e6ce":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","70bb9a6d":"df = pd.read_csv('\/kaggle\/input\/real-or-fake-fake-jobposting-prediction\/fake_job_postings.csv')\ndf.head()","8493ee9e":"df.columns","b38b7152":"df = df.drop(['job_id', 'title', 'location', 'department', 'salary_range',\n       'company_profile', 'requirements', 'benefits',\n       'telecommuting', 'has_company_logo', 'has_questions', 'employment_type',\n       'required_experience', 'required_education', 'industry', 'function'], axis=1)","5bdb6896":"df.head()","ca46a3d3":"df.dropna(inplace=True) ","c5526fae":"df.columns = ['data', 'labels']\ndf.head()","ddef3ed3":"df['data'] = df['data'].str.lower()\ndf.data[0]","c836c665":"import nltk \n\nnltk.download('stopwords')\nnltk.download('punkt')","194d83c8":"df['data'][1]","9f05a287":"from nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\nstemming = PorterStemmer()\nstops = set(stopwords.words(\"english\"))    \ndef identify_tokens(row):\n    review = row\n    tokens = nltk.word_tokenize(review)\n    # taken only words (not punctuation)\n    token_words = [w for w in tokens if w.isalpha()]\n    meaningful_words = [w for w in token_words if not w in stops]\n    stemmed_list = [stemming.stem(word) for word in meaningful_words]\n    joined_words = (' '.join(stemmed_list))\n    return joined_words","4a3d3c7f":"df['processed'] = df['data'].apply(identify_tokens)","a2e095b1":"df['processed'][1]","7b377cb2":"import numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn import metrics\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix","8e267e43":"Y = df['labels'].to_numpy()","0ff213a6":"tfidf = TfidfVectorizer(decode_error='ignore')\nX = tfidf.fit_transform(df['processed'].values.astype('U'))\nX.shape","20030e4d":"df['processed'][17876]","599d3200":"xtrain,xtest,ytrain,ytest = train_test_split(X,Y,test_size=0.3)","61d52e34":"modelNB = MultinomialNB()\nmodelNB.fit(xtrain,ytrain)","37b9dace":"NBPreds = modelNB.predict(xtest)\nprint('Confusion Matrix')\nprint(confusion_matrix(ytest, NBPreds))\n\nprint('Classification Report')\nprint(classification_report(ytest, NBPreds))\n\nprint(\"Accuracy:\",metrics.accuracy_score(ytest, NBPreds))\nprint(\"TNR:\",metrics.precision_score(ytest, NBPreds))\nprint(\"NPV:\",metrics.recall_score(ytest, NBPreds))","d3b9c4ba":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import svm\nfrom sklearn.ensemble import RandomForestClassifier","00363df3":"clf = svm.SVC(kernel='linear') # Linear Kernel\nclf.fit(xtrain,ytrain)","fcbff40c":"SVMpred = clf.predict(xtest)","54d3e89a":"print('Confusion Matrix')\nprint(confusion_matrix(ytest, SVMpred))\nprint('Classification Report')\nprint(classification_report(ytest, SVMpred))\nprint(\"Accuracy:\",metrics.accuracy_score(ytest, SVMpred))\nprint(\"TNR:\",metrics.precision_score(ytest, SVMpred))\nprint(\"NPV:\",metrics.recall_score(ytest, SVMpred))","0f85b6b0":"DTC = DecisionTreeClassifier()\nDTC = DTC.fit(xtrain,ytrain)\nDTCPred = DTC.predict(xtest)","8be9de4e":"print('Confusion Matrix')\nprint(confusion_matrix(ytest, DTCPred))\nprint('Classification Report')\nprint(classification_report(ytest, DTCPred))\nprint(\"Accuracy:\",metrics.accuracy_score(ytest, DTCPred))\nprint(\"TNR:\",metrics.precision_score(ytest, DTCPred))\nprint(\"NPV:\",metrics.recall_score(ytest, DTCPred))","121561e6":"KNN = KNeighborsClassifier(n_neighbors=3)\nKNN.fit(xtrain,ytrain)\nKNNPred= KNN.predict(xtest)","9ceb5a2b":"print('Confusion Matrix')\nprint(confusion_matrix(ytest, KNNPred))\nprint('Classification Report')\nprint(classification_report(ytest, KNNPred))\nprint(\"Accuracy:\",metrics.accuracy_score(ytest, KNNPred))\nprint(\"TNR:\",metrics.precision_score(ytest, KNNPred))\nprint(\"NPV:\",metrics.recall_score(ytest, KNNPred))","39354911":"RF=RandomForestClassifier(n_estimators=100) #default number of trees in the forest model \nRF.fit(xtrain,ytrain)\nRFPred=RF.predict(xtest)\nprint('Confusion Matrix')\nprint(confusion_matrix(ytest, RFPred))\nprint('Classification Report')\nprint(classification_report(ytest, RFPred))\nprint(\"Accuracy:\",metrics.accuracy_score(ytest, RFPred))\nprint(\"TNR:\",metrics.precision_score(ytest, RFPred))\nprint(\"NPV:\",metrics.recall_score(ytest, RFPred))","71838a79":"**Importing the Data into pandas Data Frame**","dcdd1f19":"**Change Cols Names**","b87d3189":"**DropNa**","56720597":"**K-Nearest Neighbors**","af3666a9":"**Text Pre-processing**","0ecf41c3":"**Random Forest**","ef760ccb":"**Train\/ Test Splitting**","1e8a9d74":"**This is Paper-Related Code.**\n\nPaper:\n\n**Nasser, Ibrahim, and Amjad H. Alzaanin. \"Machine Learning and Job Posting Classification: A Comparative Study.\" International Journal of Engineering and Information Systems (IJEAIS) ISSN (2020): 6-14.**","0ce22220":"**TF-IDF Feature Extraction**","8fb82d21":"**Lowecasing All Letters**","9b212f8b":"**Remove Unrelated Attributes**","fdf2c43e":"**Decision Tree**","67592dfb":"**Support Vector Machine**","7b698f65":"**Multi-Nomial Naive Bayes**"}}