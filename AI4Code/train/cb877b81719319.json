{"cell_type":{"b8ae4c1b":"code","bbf8bd71":"code","0ead0e51":"code","575037bf":"code","9f48c9c3":"code","d28e5c92":"code","dc301afc":"code","ec527716":"code","41cf4691":"code","7338750c":"code","4f616b5c":"code","f01df145":"code","5dc8a668":"markdown","9959862b":"markdown","55b4787e":"markdown","185222b2":"markdown"},"source":{"b8ae4c1b":"import json, os, sys, time\nimport pandas as pd, numpy as np\nimport matplotlib.pyplot as plt\nfrom IPython.display import HTML, display, Image","bbf8bd71":"plt.rc('figure', figsize=(10, 10))\nplt.rc('font', size=12)","0ead0e51":"base_dir = '..\/input\/jane-street-public-leaderboards'\nNFILES = len(os.listdir(base_dir))\nfiles = [f'jane-street-market-prediction-publicleaderboard_{i}.csv' for i in range(NFILES)]\nlen(files)","575037bf":"def read_lb(name):\n    df = pd.read_csv(name)\n    df['Rank'] = np.arange(len(df)) + 1\n    df['Medal'] = None\n    return df.set_index('TeamId')\n\ndef week_id(json_file):\n    return json_file.split('_')[1].replace('.csv', '')\n\ntag = 'original'\noriginal = read_lb(f'{base_dir}\/{files[0]}').add_prefix(f'{tag} ')","9f48c9c3":"medals = { 'gold':3, 'silver':2, 'bronze':1, None:0 }\nmedal_colors = np.asarray(['deepskyblue', 'chocolate', 'silver', 'gold'])\nrank_to_color = lambda r: f'#00{int((1-r)*255):02x}{int(r*255):02x}'","d28e5c92":"names = []\nfor i, json_file in enumerate(files):\n    df = read_lb(f'{base_dir}\/{json_file}')\n    df = df.join(original, how='inner')\n    # using original rankings to color points\n    # either color scheme results in bands over x or y coordinates\n    # using one consistent color per team makes it easier to see movements\n    ranks = df[f'{tag} Rank'].rank(pct=True, ascending=False)\n    medal_ser = df[f'{tag} Medal'].map(medals)\n    color = ranks.apply(rank_to_color)\n    color = np.where(medal_ser, medal_colors[medal_ser], color)\n    size = 5 # np.log(df['entries']) * 5\n    shakeup = abs(df[f'{tag} Rank'] - df['Rank']).mean() \/ len(df)\n    df.plot.scatter(f'{tag} Rank', 'Rank', c=color, s=size)\n    ind0 = week_id(files[0])\n    ind1 = week_id(json_file)\n    plt.ylim(plt.xlim()) # make axis same limits\n    plt.title(f'Jane St Shake - {ind0} \u2192 {ind1} - shake-up: {shakeup:.3f}')\n    plt.tight_layout()\n    png = f'{tag}_{i}.png'\n    names.append(png)\n    plt.savefig(png, bbox_inches='tight')\n    plt.close()","dc301afc":"# https:\/\/github.com\/ipython\/ipython\/issues\/10045\ndef show_gif(fname):\n    import base64\n    with open(fname, 'rb') as fd:\n        b64 = base64.b64encode(fd.read()).decode('ascii')\n    return HTML(f'<img src=\"data:image\/gif;base64,{b64}\" \/>')","ec527716":"name_list = ' '.join(names)\nrepeat_final = ' '.join([names[-1]] * 10)\noutput = f'{tag}_jane-st-shakeup.gif'","41cf4691":"!convert -delay 100 -loop 0 -dispose previous {name_list} {repeat_final} {output}","7338750c":"show_gif(output)","4f616b5c":"# The loop is the same, these three lines change the outcome\ntag = 'week1'\nfiles.pop(0) #\u00a0remove 1st\noriginal = read_lb(f'{base_dir}\/{files[0]}').add_prefix(f'{tag} ')\n\nnames = []\nfor i, json_file in enumerate(files):\n    df = read_lb(f'{base_dir}\/{json_file}')\n    df = df.join(original, how='inner')\n    # using original rankings to color points\n    # either color scheme results in bands over x or y coordinates\n    # using one consistent color per team makes it easier to see movements\n    ranks = df[f'{tag} Rank'].rank(pct=True, ascending=False)\n    medal_ser = df[f'{tag} Medal'].map(medals)\n    color = ranks.apply(rank_to_color)\n    color = np.where(medal_ser, medal_colors[medal_ser], color)\n    size = 5 # np.log(df['entries']) * 5\n    shakeup = abs(df[f'{tag} Rank'] - df['Rank']).mean() \/ len(df)\n    df.plot.scatter(f'{tag} Rank', 'Rank', c=color, s=size)\n    ind0 = week_id(files[0])\n    ind1 = week_id(json_file)\n    plt.ylim(plt.xlim()) # make axis same limits\n    plt.title(f'Jane St Shake - {ind0} \u2192 {ind1} - shake-up: {shakeup:.3f}')\n    plt.tight_layout()\n    png = f'{tag}_{i}.png'\n    names.append(png)\n    plt.savefig(png, bbox_inches='tight')\n    plt.close()","f01df145":"name_list = ' '.join(names)\nrepeat_final = ' '.join([names[-1]] * 10)\noutput = f'{tag}_jane-st-shakeup.gif'\n\n!convert -delay 100 -loop 0 -dispose previous {name_list} {repeat_final} {output}\n\nshow_gif(output)","5dc8a668":"# Jane St Animated Shake-up Plot\n\nThe shake-up was a live, dynamic process in [this competition](https:\/\/www.kaggle.com\/c\/jane-street-market-prediction)!\n\nThis is a quick fork from [Santa 2020 Animated Shake-up Plot](https:\/\/www.kaggle.com\/jtrotman\/santa-2020-animated-shake-up-plot).\n\nThe x-axis shows original public LB ranks and the y-axis is updated ranks from the bi-weekly updates, as saved by\n[Carl McBride Ellis](https:\/\/www.kaggle.com\/carlmcbrideellis)\nin the\n[Jane Street Public Leaderboards](https:\/\/www.kaggle.com\/carlmcbrideellis\/jane-street-public-leaderboards)\ndataset.","9959862b":"# Animated Shake-up","55b4787e":"# Ignoring Original \"Public\" LB\n\nSame again but using the week 1 rescore ranks as the x-axis - how did the rescores vary?","185222b2":"# See Also\n\nHere are some further competition shake-up visualisation resources, in *chronological* order of appearance:\n\n - [BreakfastPirate discussion page](https:\/\/www.kaggle.com\/breakfastpirate\/discussion)\n - [Meta Kaggle: Scatter Plot Competition Shake-up](https:\/\/www.kaggle.com\/jtrotman\/meta-kaggle-scatter-plot-competition-shake-up)\n - [Santa 2020 Animated Shake-up Plot](https:\/\/www.kaggle.com\/jtrotman\/santa-2020-animated-shake-up-plot)\n - [Rock Paper Scissors Animated Shake-up Plot](https:\/\/www.kaggle.com\/jtrotman\/rock-paper-scissors-animated-shake-up-plot)\n - [Shakeup interactive scatterplot maker](https:\/\/www.kaggle.com\/carlmcbrideellis\/shakeup-interactive-scatterplot-maker)\n - [Shakeup scatterplots: Boxes, strings and things...](https:\/\/www.kaggle.com\/carlmcbrideellis\/shakeup-scatterplots-boxes-strings-and-things)\n\n"}}