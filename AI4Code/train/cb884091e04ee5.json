{"cell_type":{"ef15a793":"code","e2a34a3d":"code","c7ab4fdf":"code","7b30daef":"code","42e67a6d":"code","063684ec":"code","30665cbf":"code","5d881c98":"markdown","5b318bc9":"markdown","c824e7e9":"markdown"},"source":{"ef15a793":"import os\nimport json\nimport numpy as np\nimport pandas as pd\nfrom pathlib import Path\nfrom glob import glob\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors","e2a34a3d":"data_path = Path('\/kaggle\/input\/abstraction-and-reasoning-challenge\/')\ntraining_path = data_path \/ 'training'\nevaluation_path = data_path \/ 'evaluation'\ntest_path = data_path \/ 'test'\n\ntraining_tasks = sorted(glob(str(training_path \/ '*')))\nevaluation_tasks = sorted(glob(str(evaluation_path \/ '*')))","c7ab4fdf":"cmap = colors.ListedColormap(\n    ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n     '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\n\ndef plotTest(t_in, t_out, t_pred, title=''):\n    fig, axs = plt.subplots(3, 1, figsize=(4,12), dpi=50)\n    plt.subplots_adjust(wspace=0.3, hspace=0.3)\n    fig.suptitle(title, fontsize=16)\n    axs[0].imshow(t_in, cmap=cmap, norm=norm)\n    axs[0].set_title('Test in')\n    axs[0].set_yticks(list(range(t_in.shape[0])))\n    axs[0].set_xticks(list(range(t_in.shape[1])))\n    axs[1].imshow(t_out, cmap=cmap, norm=norm)\n    axs[1].set_title('Test out')\n    axs[1].set_yticks(list(range(t_out.shape[0])))\n    axs[1].set_xticks(list(range(t_out.shape[1])))\n    axs[2].imshow(t_pred, cmap=cmap, norm=norm)\n    axs[2].set_title('Test pred')\n    axs[2].set_yticks(list(range(t_pred.shape[0])))\n    axs[2].set_xticks(list(range(t_pred.shape[1])))","7b30daef":"def getData(task_filename):\n    with open(task_filename, 'r') as f:\n        task = json.load(f)\n    return task\n\ndef getObjectHash(pixmap):\n    flat = pixmap.flatten().astype(np.bool)\n    mult = np.array([2 ** x for x in range(len(flat))])\n    return np.sum(flat * mult)\n\ndef groupByColor(pixmap):\n    nb_colors = int(pixmap.max()) + 1\n    splited = [(pixmap == i) * i for i in range(1, nb_colors)]\n    return [x for x in splited if np.any(x)]\n\ndef checkColorMap(task):\n    c = 1\n    for example in task['train']:\n        inp = np.array(example['input'])\n        out = np.array(example['output'])\n        inp_hashes = sorted([getObjectHash(pm) for pm in groupByColor(inp)])\n        out_hashes = sorted([getObjectHash(pm) for pm in groupByColor(out)])\n        c *= inp_hashes == out_hashes\n    return bool(c)\n\ndef findColorMap(task):\n    colormap = {}\n    for example in task['train']:\n        inp = np.array(example['input']).flatten()\n        out = np.array(example['output']).flatten()\n        for col, idx in zip(*np.unique(inp,return_index=True)):\n            if col in colormap.keys(): continue\n            colormap[col] = out[idx]\n    return colormap\n\ndef applyColorMap(pixmap, colormap):\n    return np.vectorize(colormap.__getitem__)(pixmap)","42e67a6d":"for task_id in training_tasks:\n    task = getData(task_id)\n    if checkColorMap(task):\n        colormap = findColorMap(task)\n        for example in task['test']:\n            test_in = np.array(example['input'])\n            test_out = np.array(example['output'])\n            pred = applyColorMap(test_in,colormap)\n            correct = np.array_equal(pred,test_out)\n            if correct:\n                plotTest(test_in,test_out,pred,title=task_id)","063684ec":"def flattenPred(pred):\n    return str(pred.astype(np.int)) \\\n                   .replace(' ','') \\\n                   .replace('[[','|') \\\n                   .replace(']\\n[','|') \\\n                   .replace(']]','|')","30665cbf":"submission = pd.read_csv(data_path \/ 'sample_submission.csv')\ntest_tasks = submission['output_id'].values\n\npredictions = []\nfor output_id in test_tasks:\n    task_id, grid_id = output_id.split('_')\n    task_id = test_path \/ ('%s.json' % task_id)\n    task = getData(task_id)\n    if checkColorMap(task):\n        colormap = findColorMap(task)\n        test_in = np.array(task['test'][output_id]['input'])\n        pred = applyColorMap(test_in,colormap)\n    else:\n        pred = np.zeros((1,1))\n    predictions.append(flattenPred(pred))\n\nsubmission[\"output\"] = predictions\nsubmission.to_csv('submission.csv', index=False)","5d881c98":"## Simple Color Map Program\nI'm not sure if anyone had tried this yet, just wanted to share my results. I wrote a couple functions to check if the solution involves using a color map, then to determine that map and apply it. There are **three examples** of this task in the training set, however **none are present in the evaluation set or private LB test set**.","5b318bc9":"### Now create submission on test set","c824e7e9":"### Testing on the training set"}}