{"cell_type":{"6d457da1":"code","a975f6e5":"code","29252c64":"code","f92a6720":"code","1571a8aa":"code","e9b81ffd":"code","9ef58f43":"code","e39b89de":"code","e85765fb":"code","5d021c1a":"code","c6d25dd6":"code","70f81b45":"code","62a51ee6":"code","5502f4b7":"markdown","52443f4e":"markdown","79ace763":"markdown","0a38332a":"markdown","4eae877c":"markdown","99cfa8d9":"markdown","8edb3cf6":"markdown","c920fc08":"markdown","9be58716":"markdown","2f4af150":"markdown","54741182":"markdown","82ac5143":"markdown","f73f736c":"markdown","b4c978a6":"markdown","b87cce2d":"markdown","9349f5be":"markdown","93732d75":"markdown","97768b92":"markdown"},"source":{"6d457da1":"x = True\nprint(x)\nprint(type(x))","a975f6e5":"def can_run_for_president(age):\n    \"\"\"Can someone of the given age run for president in the US?\"\"\"\n    # The US Constitution says you must \"have attained to the Age of thirty-five Years\"\n    return age >= 35\n\nprint(\"Can a 19-year-old run for president?\", can_run_for_president(19))\nprint(\"Can a 45-year-old run for president?\", can_run_for_president(45))","29252c64":"3.0 == 3","f92a6720":"'3' == 3","1571a8aa":"def is_odd(n):\n    return (n % 2) == 1\n\nprint(\"Is 100 odd?\", is_odd(100))\nprint(\"Is -1 odd?\", is_odd(-1))","e9b81ffd":"def can_run_for_president(age, is_natural_born_citizen):\n    \"\"\"Can someone of the given age and citizenship status run for president in the US?\"\"\"\n    # The US Constitution says you must be a natural born citizen *and* at least 35 years old\n    return is_natural_born_citizen and (age >= 35)\n\nprint(can_run_for_president(19, True))\nprint(can_run_for_president(55, False))\nprint(can_run_for_president(55, True))","9ef58f43":"True or True and False","e39b89de":"def inspect(x):\n    if x == 0:\n        print(x, \"is zero\")\n    elif x > 0:\n        print(x, \"is positive\")\n    elif x < 0:\n        print(x, \"is negative\")\n    else:\n        print(x, \"is unlike anything I've ever seen...\")\n\ninspect(0)\ninspect(-15)","e85765fb":"def f(x):\n    if x > 0:\n        print(\"Only printed when x is positive; x =\", x)\n        print(\"Also only printed when x is positive; x =\", x)\n    print(\"Always printed, regardless of x's value; x =\", x)\n\nf(1)\nf(0)","5d021c1a":"print(bool(1)) # all numbers are treated as true, except 0\nprint(bool(0))\nprint(bool(\"asf\")) # all strings are treated as true, except the empty string \"\"\nprint(bool(\"\"))\n# Generally empty sequences (strings, lists, and other types we've yet to see like lists and tuples)\n# are \"falsey\" and the rest are \"truthy\"","c6d25dd6":"if 0:\n    print(0)\nelif \"spam\":\n    print(\"spam\")","70f81b45":"def quiz_message(grade):\n    if grade < 50:\n        outcome = 'failed'\n    else:\n        outcome = 'passed'\n    print('You', outcome, 'the quiz with a grade of', grade)\n    \nquiz_message(80)","62a51ee6":"def quiz_message(grade):\n    outcome = 'failed' if grade < 50 else 'passed'\n    print('You', outcome, 'the quiz with a grade of', grade)\n    \nquiz_message(45)","5502f4b7":"<small>You may recognize this as being similar to the <i>ternary operator<\/i> that exists in many other languages. For example, in javascript, we would write the assignment above as `var outcome = grade < 50 ? 'failed' : 'passed'`. (When it comes to readability, I think Python is the winner here.)<\/small>","52443f4e":"## Combining Boolean Values\nPython provides operators to combine boolean values using the standard concepts of \"and\", \"or\", and \"not\". And in fact, the corresponding Python operators use just those words: ``and``, ``or``, and ``not``.\n\nWith these, we can make our `can_run_for_president` function more accurate.","79ace763":"But not too clever...","0a38332a":"# Conditionals\n\nWhile useful enough in their own right, booleans really start to shine when combined with *conditional statements*, using the keywords ``if``, ``elif``, and ``else``.\n\nConditional statements, often referred to as *if-then* statements, allow the programmer to execute certain pieces of code depending on some Boolean condition.\nA basic example of a Python conditional statement is this:","4eae877c":"# Booleans\n\nPython has a type `bool` which can take on one of two values: `True` and `False`.","99cfa8d9":"## Conditional expressions (aka 'ternary')\n\nSetting a variable to either of two values depending on some condition is a pretty common pattern.","8edb3cf6":"We can use non-boolean objects in `if` conditions and other places where a boolean would be expected. Python will implicitly treat them as their corresponding boolean value:","c920fc08":"Quick, can you guess the value of this expression?","9be58716":"Remember to use `==` instead of `=` when making comparisons. If you write `n == 2` you are asking about the value of n. When you write `n = 2` you are changing the value of n.","2f4af150":"## Boolean conversion\n\nWe've seen `int()`, which turns things into ints, and `float()`, which turns things into floats, so you might not be surprised to hear that Python has a `bool()` function which turns things into bools.","54741182":"Comparison operators can be combined with the arithmetic operators we've already seen to express a virtually limitless range of mathematical tests. For example, we can check if a number is odd by checking that the modulus with 2 returns 1:","82ac5143":"(Click the \"output\" button to see the answer)\n\nPython has precedence rules that determine the order in which operations get evaluated in expressions like above. For example, `and` has a higher precedence than `or`, which is why the first expression above is `True`. If we had evaluated it from left to right, we would have calculated `True or True` first (which is `True`), and then taken the `and` of that result with `False`, giving a final value of `False`.\n\nYou could try to [memorize the order of precedence](https:\/\/docs.python.org\/3\/reference\/expressions.html#operator-precedence), but a safer bet is to just use liberal parentheses. Not only does this help prevent bugs, it makes your intentions clearer to anyone who reads your code. \n\nFor example, consider the following expression:\n\n```python\nprepared_for_weather = have_umbrella or rain_level < 5 and have_hood or not rain_level > 0 and is_workday\n```\n\nI'm trying to say that I'm safe from today's weather....\n- if I have an umbrella...\n- or if the rain isn't too heavy and I have a hood...\n- otherwise, I'm still fine unless it's raining *and* it's a workday\n\nBut not only is my Python code hard to read, it has a bug. We can address both problems by adding some parentheses:\n\n```python\nprepared_for_weather = have_umbrella or (rain_level < 5 and have_hood) or not (rain_level > 0 and is_workday)\n```\n\nYou can add even more parentheses if you think it helps readability:\n\n```python\nprepared_for_weather = have_umbrella or ((rain_level < 5) and have_hood) or (not (rain_level > 0 and is_workday))\n```\n\nWe can also split it over multiple lines to emphasize the 3-part structure described above:\n\n```python\nprepared_for_weather = (\n    have_umbrella \n    or ((rain_level < 5) and have_hood) \n    or (not (rain_level > 0 and is_workday))\n)\n```","f73f736c":"Comparisons are a little bit clever...","b4c978a6":"Python adopts the ``if`` and ``else`` often used in other languages; its more unique keyword is ``elif``, a contraction of \"else if\".\nIn these conditional clauses, ``elif`` and ``else`` blocks are optional; additionally, you can include as many ``elif`` statements as you would like.\n\nNote especially the use of colons (``:``) and whitespace to denote separate blocks of code. This is similar to what happens when we define a function - the function header ends with `:`, and the following line is indented with 4 spaces. All subsequent indented lines belong to the body of the function, until we encounter an unindented line, ending the function definition.","b87cce2d":"Rather than putting `True` or `False` directly in our code, we usually get boolean values from **boolean operators**. These are operators that answer yes\/no questions. We'll go through some of these operators below. ","9349f5be":"Python has a handy single-line 'conditional expression' syntax to simplify these cases:","93732d75":"## Comparison Operations\n\n| Operation     | Description                       || Operation     | Description                          |\n|---------------|-----------------------------------||---------------|--------------------------------------|\n| ``a == b``    | ``a`` equal to ``b``              || ``a != b``    | ``a`` not equal to ``b``             |\n| ``a < b``     | ``a`` less than ``b``             || ``a > b``     | ``a`` greater than ``b``             |\n| ``a <= b``    | ``a`` less than or equal to ``b`` || ``a >= b``    | ``a`` greater than or equal to ``b`` |\n\n","97768b92":"# Your turn!\n\nHead over to [the Exercises notebook](https:\/\/www.kaggle.com\/kernels\/fork\/1275165) to get some hands-on practice working with booleans and conditionals."}}