{"cell_type":{"c1146d03":"code","4e5e8fd7":"code","5e790b34":"code","9a5be35e":"code","f51423c2":"code","15f3f4cd":"code","09230e30":"code","ab6bf874":"code","29ff6dc9":"code","08940112":"code","d2456ed3":"code","cc7f83c4":"code","feff9bab":"code","c327fc79":"code","f3034268":"code","10eaebfb":"code","d9d358bd":"code","ddd48911":"code","fa33e474":"code","8999c352":"code","4d5f7bdb":"code","ced2f3dd":"code","b94f1cf2":"code","0e8d664d":"code","66769163":"code","91e2defd":"code","143f98c7":"markdown","6cad97ba":"markdown","adcf915d":"markdown","12ac6208":"markdown","8145de63":"markdown","17e0d6e2":"markdown","529367b2":"markdown","38de6f89":"markdown","6511c3cc":"markdown","c02feff1":"markdown","dfdd9c13":"markdown","2b0947e2":"markdown","5599d477":"markdown","c6e46b0c":"markdown","58a036ec":"markdown","133959f1":"markdown","d080ed02":"markdown","5e83fc70":"markdown","ad198375":"markdown","27981f16":"markdown","0de36e9c":"markdown","911d4ae1":"markdown","dbc6b141":"markdown","42ad995d":"markdown","f7ddd7a2":"markdown","69ba020d":"markdown","14ef9ff1":"markdown","c2eb5b1d":"markdown","b0a0eb90":"markdown","6ef5f90d":"markdown","10364215":"markdown","33855801":"markdown","e80b9e0c":"markdown","03e23bb4":"markdown","bfe6e7c2":"markdown","ff919cc3":"markdown","b8a88cb5":"markdown","b4f8a7a8":"markdown","b7ee113c":"markdown","868c3f9d":"markdown","175c2f40":"markdown","6873782d":"markdown","2af7b35e":"markdown"},"source":{"c1146d03":"# Import Pandas and NumPy\n\nimport numpy as np\nimport pandas as pd\n\n# Import Libraries for plotting    # Visualizations\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n\n#pip install db-sqlite3\n#SQLite in general is a server-less database that you can use within almost all programming languages including Python.\nimport sqlite3\n\n\n# Supress Warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n","4e5e8fd7":"db = '..\/input\/imdbsqlitedataset\/movie.sqlite'\n\n\ncon = sqlite3.connect(db)\ncur = con.cursor()","5e790b34":"cur.execute('SELECT * FROM movies')\n#use the cursor object to call the execute() method to execute any SQL queries.\nmovies = cur.fetchall()\n\n#movies -> if u print movies , all the data shown in list manner, can't understanadble\n\n#Note - fetchall() --> fetch all rows for the current query, if no rows avaliable then,it returns an empty list.\n\nmovies = pd.DataFrame(movies, columns = ['id', 'original_title', 'budget', 'popularity', 'release_date', 'revenue', 'title', 'vote_average', 'vote_count', 'overview', 'tagline', 'uid', 'director_id'])\n#Creating a dataframe, A dataframe contains rows and columns , It is a Two-dimensional, size-mutable, potentially heterogeneous tabular data.\n\n\n\nprint('Shape of Movies data :',movies.shape)\nprint('\\n\\n\\n')\nmovies.head(3)\n#Displays first 3 rows in the table\n","9a5be35e":"movies.info()","f51423c2":"cur.execute('SELECT * FROM directors')\n#use the cursor object to call the execute() method to execute any SQL queries.\n\ndirectors = cur.fetchall()\n#Note - fetchall() --> fetch all rows for the current query, if no rows avaliable then,it returns an empty list.\n\n\ndirectors = pd.DataFrame(directors, columns = ['name', 'id', 'gender', 'uid', 'department'])\n#Creating a dataframe, A dataframe contains rows and columns , It is a Two-dimensional, size-mutable, potentially heterogeneous tabular data.\n\nprint('Shape of Directors data :',directors.shape)\nprint('\\n\\n\\n')\n\n\ndirectors.head(3)","15f3f4cd":"directors.info()","09230e30":"cur.execute('SELECT COUNT (*) from movies;')\n#use the cursor object to call the execute() method to execute any SQL queries.\n\ncount = cur.fetchall()\nprint(\"the number of movies is present in IMDB is \\t\\t\\t :\",count[0])\n#Note - fetchall() --> fetch all rows for the current query, if no rows avaliable then,it returns an empty list.\n\n\n","ab6bf874":"cur.execute(\"SELECT * from directors where name == 'James Cameron' or name =='Luc Besson' or name =='John Woo'\")\n\n#use the cursor object to call the execute() method to execute any SQL queries.\n\n# where - WHERE clause to get that rows that met these conditions.\n\n\nthree_directors = cur.fetchall()\n\nprint(\"These 3 directors are: \\t :\",three_directors)\n#Note - fetchall() --> fetch all rows for the current query, if no rows avaliable then,it returns an empty list.\n\n\n","29ff6dc9":"\ncur.execute(\"SELECT * from directors where name LIKE 'Steven%'\")\n\n#use the cursor object to call the execute() method to execute any SQL queries.\n\n# where - WHERE clause to get that rows that met these conditions.\n\n#LIKE  - LIKE operator is case sensitive, it works like whose names start with particualar word shuould be match\n\n# Example - The d% pattern that uses the percent sign wildcard ( %) matches any string that starts with s e.g.,danger and dance,door.\n\n\nname_like = cur.fetchall()\nprint(\"The name like stevens are: \\n \\t\", name_like)\n\n\n\n","08940112":"\ncur.execute(\" SELECT COUNT(*) from directors where gender == 1\")\n\n#SQLite SELECT statement provides all features of the SELECT statement in SQL standard.\n\n#use the cursor object to call the execute() method to execute any SQL queries.\n\n\n\n\nfemale_directors = cur.fetchall()\nprint(\"The numbe rof femail directors  are: \\n \\t\", female_directors[0])\n\n\n\n","d2456ed3":"cur.execute(\"SELECT name FROM directors WHERE gender == 1 ORDER by id asc limit 1 OFFSET 10\")\n\n#SQLite SELECT statement provides all features of the SELECT statement in SQL standard.\n\n#use the cursor object to call the execute() method to execute any SQL queries.\n#ORDER by - To sort the data we use order by , ascending (asc)  OR Descending (dsc)\n#LIMIT -  LIMIT clause to constrain the number of rows returned by the query.\n\n# LIMIT_OFFSET - clause to get the nth highest or the nth lowest row\n            \ntenth= cur.fetchall()\nprint(\"The name of the 10th first women directors is: \\n\\n \\t\", tenth[0])\n            ","cc7f83c4":"cur.execute(\"SELECT original_title  FROM movies ORDER by popularity desc limit 3\")\n\n#SQLite SELECT statement provides all features of the SELECT statement in SQL standard.\n\n#use the cursor object to call the execute() method to execute any SQL queries.\n#ORDER by - To sort the data we use order by , ascending (asc)  OR Descending (dsc)\n#LIMIT -  LIMIT clause to constrain the number of rows returned by the query.\n\n# LIMIT_OFFSET - clause to get the nth highest or the nth lowest row\n            \nmost_popular = cur.fetchall()\nprint(\"The three most popular movies are: \\n\\n \\t\", most_popular)\n            ","feff9bab":"cur.execute(\"SELECT original_title  FROM movies ORDER by budget desc limit 3\")\n\n#SQLite SELECT statement provides all features of the SELECT statement in SQL standard.\n\n#use the cursor object to call the execute() method to execute any SQL queries.\n#ORDER by - To sort the data we use order by , ascending (asc)  OR Descending (dsc)\n#LIMIT -  LIMIT clause to constrain the number of rows returned by the query.\n\n# LIMIT_OFFSET - clause to get the nth highest or the nth lowest row\n            \nmost_bankable = cur.fetchall()\nprint(\"The three most bankable movies are: \\n\\n \\t\", most_bankable)\n            ","c327fc79":"cur.execute(\" SELECT original_title FROM movies WHERE release_date > '2000-01-01' ORDER by vote_average DESC LIMIT 1;\")\n\n#SQLite SELECT statement provides all features of the SELECT statement in SQL standard.\n\n#use the cursor object to call the execute() method to execute any SQL queries.\n#ORDER by - To sort the data we use order by , ascending (asc)  OR Descending (dsc)\n#LIMIT -  LIMIT clause to constrain the number of rows returned by the query.\n\n# LIMIT_OFFSET - clause to get the nth highest or the nth lowest row\n            \nmost_awarded_avg = cur.fetchall()\nprint(\"The most awarded average vote since the January 1st, 2000: \\n\\n \\t\", most_awarded_avg)\n            ","f3034268":"\ncur.execute(\"SELECT original_title FROM movies  JOIN directors ON directors.id = movies.director_id WHERE directors.name = 'Brenda Chapman';\")\n\n#SQLite SELECT statement provides all features of the SELECT statement in SQL standard.\n# JOIN _ joining the tables ,  INNER JOIN, LEFT JOIN, or CROSS JOIN clause.\n#use the cursor object to call the execute() method to execute any SQL queries.\n\n            \ndirected_by= cur.fetchall()\nprint(\"The movie(s) were directed by Brenda Chapman \\n\\n \\t\", directed_by)\n            ","10eaebfb":"\ncur.execute(\"SELECT name FROM directors  JOIN movies ON directors.id = movies.director_id GROUP BY director_id ORDER BY count(name) DESC limit 1;\")\n\n#SQLite SELECT statement provides all features of the SELECT statement in SQL standard.\n\n#use the cursor object to call the execute() method to execute any SQL queries.\n# JOIN _ joining the tables ,  INNER JOIN, LEFT JOIN, or CROSS JOIN clause.\n#inner join -. default join is\n\n\n            \ndirected_by= cur.fetchall()\nprint(\"The director made the most movies \\n\\n \\t\", directed_by)\n            ","d9d358bd":"\ncur.execute(\"SELECT name FROM directors JOIN movies ON directors.id = movies.director_id GROUP BY director_id ORDER BY sum(budget) DESC limit 1;\")\n\n#SQLite SELECT statement provides all features of the SELECT statement in SQL standard.\n\n#use the cursor object to call the execute() method to execute any SQL queries.\n# JOIN _ joining the tables ,  INNER JOIN, LEFT JOIN, or CROSS JOIN clause.\n\n            \nmost_bankable_dir= cur.fetchall()\nprint(\"The most bankable director is \\n\\n \\t\", most_bankable_dir)\n            ","ddd48911":" \n\ncur.execute('SELECT original_title, name, release_date, budget, revenue FROM movies JOIN directors ON movies.director_id = directors.id ORDER BY budget DESC')\nmostExpensive = cur.fetchall()\nmostExpensive = pd.DataFrame(mostExpensive, columns = ['original_title', 'director_name', 'release_date', 'budget', 'revenue'])\nmostExpensive.head(10)","fa33e474":"\ncur.execute('SELECT original_title, name, release_date, popularity, revenue FROM movies JOIN directors ON movies.director_id = directors.id ORDER BY popularity DESC')\nmostPopular = cur.fetchall()\nmostPopular = pd.DataFrame(mostPopular, columns = ['original_title', 'director_name', 'release_date', 'popularity', 'revenue'])\nmostPopular.head(10)","8999c352":"\ncur.execute('SELECT original_title, name, release_date, revenue FROM movies JOIN directors ON movies.director_id = directors.id ORDER BY revenue DESC')\nmostProfit = cur.fetchall()\nmostProfit = pd.DataFrame(mostProfit, columns = ['original_title', 'director_name', 'release_date', 'revenue'])\nmostProfit.head(10)","4d5f7bdb":"\ncur.execute('SELECT original_title, release_date, budget, revenue, popularity, vote_average FROM directors JOIN movies ON directors.id = movies.director_id WHERE name = \"James Cameron\" ORDER BY revenue DESC')\nmoviesByJamesCameron = cur.fetchall()\nmoviesByJamesCameron = pd.DataFrame(moviesByJamesCameron, columns = ['original_title', 'release_date', 'budget', 'revenue', 'popularity', 'vote_average'])\nmoviesByJamesCameron","ced2f3dd":"\n\ncur.execute('SELECT original_title, name, release_date, vote_average, vote_count FROM movies JOIN directors ON movies.director_id = directors.id ORDER BY vote_average DESC')\nbestVote = cur.fetchall()\nbestVote = pd.DataFrame(bestVote, columns = ['original_title', 'director_name', 'release_date',  'vote_average', 'vote_count'])\nbestVote.head(10)","b94f1cf2":"# plot a heatmap of correlation\n#corr() is used to create the correlation matrix.\n#You'll have to make sure that all the elements in the matrix are of numeric type. \n#If they are not of the numeric type you'll have to add or concat them explicitly.\n\nsns.set(rc = {'figure.figsize': (8, 8)})\nsns.heatmap(movies[['budget', 'popularity', 'revenue', 'vote_average', 'director_id']].corr(), \n            annot = True, fmt = '.2f', linewidth = 1);","0e8d664d":"\ncur.execute('SELECT name, COUNT(original_title), SUM(revenue)FROM directors JOIN movies ON directors.id = movies.director_id GROUP BY name ORDER BY SUM(revenue) DESC')\nmostProfitableDirector = cur.fetchall()\nmostProfitableDirector = pd.DataFrame(mostProfitableDirector, columns = ['director_name', 'movies', 'revenue'])\nmostProfitableDirector.head(10)","66769163":"\ncur.execute('SELECT name, COUNT(original_title), SUM(revenue) FROM directors JOIN movies ON directors.id = movies.director_id GROUP BY name ORDER BY COUNT(original_title) DESC')\nmostProductiveDirector = cur.fetchall()\nmostProductiveDirector = pd.DataFrame(mostProductiveDirector, columns = ['director_name', 'movies', 'revenue'])\nmostProductiveDirector.head(10)","91e2defd":" \ncur.execute('SELECT original_title, release_date, budget, revenue, popularity, vote_average FROM directors JOIN movies ON directors.id = movies.director_id WHERE name = \"Steven Spielberg\" ORDER BY release_date DESC')\nmoviesByStevenSpielberg = cur.fetchall()\nmoviesByStevenSpielberg = pd.DataFrame(moviesByStevenSpielberg, columns = ['original_title', 'release_date', 'budget', 'revenue', 'popularity', 'vote_average'])\nmoviesByStevenSpielberg","143f98c7":"\n\n> ## Note : \n\nFrom the mostProfit Table, It Can Be Seen That The Movies In The First And Second Rank Is A Movies Directed By James Cameron.\n\nIn The Table moviesByJamesCameron Shows All Movies Directed By James Cameron.","6cad97ba":"\n\n\n> ## DATASET INTRO :\n\nThis Database Contains Movies Created By Several Directors In The World\n\nThis Database Contains Two Tables. The First Table Is Called 'directors', Contains The Name Of The Director And His Gender. The Second Table Is Called 'movies', Contains The Title Of The Movies, budget, revenue, popularity, etc.\n","adcf915d":"####   We import the sqlite3 module and then create a connection object which will connect us to the database and will let us execute the SQL statements.\n> - sqlite3.connect(Database)\n> - **cursor()** - we can use the cursor object to call the execute() method to execute any SQL queries.\n\n\n#### STEPS\n> To query data in an SQLite database from Python, you use these steps:\n\n- First, establish a connection to the SQLite database by creating a Connection object.\n- Next, create a Cursor object using the cursor method of the Connection object.\n- Then, execute a  SELECT statement.\n- After that, call the fetchall() method of the cursor object to fetch the data.\n- Finally, loop the cursor and process each row individually.\n","12ac6208":"#### **Question 13:** Whose director is the most bankable?\n","8145de63":" \n\n> ## Note :\n\nBestVote Table Contains The Best Movies By Vote. Stiff Upper Lips, Directed By Gary Sinyor And Dancer, Texas Pop. 81 Directed by the MacCanlies Was Successfully Becomes the Best Movies By Vote With Perfect Score, 10.\n\nHowever, There Are Anomalies. It Turned Out That The Two Movies Were Only Vote By One Person. So, Likely to Affect The Assessment Results..","17e0d6e2":"![imdb.jpg](attachment:imdb.jpg)","529367b2":"#### **Question 4:** Find these 3 directors: James Cameron ; Luc Besson ; John Woo\n","38de6f89":"### Directors","6511c3cc":"### JOINS\n> Inner join\n> left join\n> right join\n> full outer join\n- #### Explanation\n\n> Inner join : - Wherever the data matching between the two tables only thouse records will displayed . (Only matched in both tables)\n\n> Left join : - All the data which is present on the left side will displayed, irrespective it having matching entry will displays or if it does not match entry on another table\n\n> Right join : - ( vice-versa ) as Left join From right table all records will displayas, irrespective\nBut in left table who are matching are be displayed\n\n> full outer join : -  It is a combination of  Inner join , Left join, Right join.\n> **Full outer join** shows all matching records,\n- It will displays all matching records as well as It will display non matching records  On left table and right table.\n- It will show every thing on what tables contains\n                        \n                     \n        \n**NOTE** \n- >  Left join display all records in left table\n- >  Right join display all records in right table\n- >  Inner join display only matching records from tables\n\n","c02feff1":"\n\n> ## Note:\n\nmostPopular Table Shows 10 Movies With The Highest Ranking By Popularity. \n\nCurrently, Minions Directed By Kyle Balda Got The First Place With Score 875, Beating Interstellar As The Closest Competitor, Deadpool And The Other Competitors.","dfdd9c13":"**Question**- List out the  director names with number of movies and revenue","2b0947e2":"\n\n\n\n> ## Note :\n\nThe mostExpensive Table Contains List Of Movies With Highest Production Costs. \n\nFor Your Information, Pirates of the Caribbean: On Stranger Tides, Directed By Rob Marshall, Is The Most Production Costs, It's USD 380,000,000.","5599d477":"\n\n> ### Note :\n\nThe mostProductiveDirector Table Contains The Name Of The Director And The Number Of Movies It Has Directed By Him. \n\nSteven Spielberg Is The Most Productive Director With 27 Movies Titles He Has Directed. Meanwhile, Woody Allen Has Only 21 Movies Titles. \n\nThen, Martin Scorsese And Clint Eastwood With 20 Movies Titles.\n","c6e46b0c":"### Revenu Analysis","58a036ec":"#### **Question 11:**  Which movie(s) were directed by Brenda Chapman?\n","133959f1":"#### **Question 7:**  Find the name of the 10th first women directors?\n","d080ed02":"#### **Question 1:** Can you get all data about movies?","5e83fc70":"#### **Question 3:** Check how many movies are present in iMDB.","ad198375":"**Question** - List out Particular movie for Voting average and votecount ","27981f16":"\n\n> ## Note On correlation :\n\nThe Heat Map Graph Shows The Effect Between One Variable To The Other Variables. \n\nIn The Graph, It Is Clear That budget Has The Greatest Impact on revenue with 0.73. \n\nMeanwhile, popularity Is Quite Impact On revenue, And director_id Which Means director_name Also Has A Correlation With revenue, Even Though It Is Small. \n\nHowever, vote_average Has A Very Small Correlation With revenue.","0de36e9c":"#### **Question 5:** Find all directors with name starting with Steven.\n","911d4ae1":"### Budget Analysis","dbc6b141":"## QUESTIONS","42ad995d":"### CORRELATION\n- **Correlation** is also a statistical technique that determines how the change of one variable related to another variable affects the relationship.\n-  it defines the degree of relation between two variables. There exist three types of correlations - positive and negative, and zero correlations. \n\n\n\n> The main intention of Seaborn heatmap is to visualize the correlation matrix of data for feature selection to solve business problems\n> Python data visualization seaborn library has a powerful function that is called sns.heatmap(). \n> annot \u2014 **annot** when set to True, the correlation values become visible on the colored cells\n> linewidth- **linewidth** Width of the lines that will divide each cell.\n","f7ddd7a2":"#### **Question 9:**  What are the 3 most bankable movies?\n ","69ba020d":"\n\n> ## Note :\n\nThe mostProfitableDirector Table Shows The Directors With The Highest Gross Profit. \n\nCurrently, Steven Spielberg Is The Director With The Most Gross Profit, with USD 9,147,393,164 from his 27 movies. \n\nThen, Peter Jackson With USD 6,498,642,820, James Cameron With USD 5,883,569,439, And The Other Directors.","14ef9ff1":"\n\n> ## Note : \n\nFrom Two Tables Above, mostProfitableDirector And mostProductiveDirector, It Can Be Seen That Steven Spielberg Is Always In The First Place. \n\nIt Can Be Understood That Steven Spielberg Has Produced Many And Incredible Movies That Are Shows In The Table MoviesByStevenSpielberg Above.\n\n","c2eb5b1d":"#### **Question 12:** Whose director made the most movies?\n\n","b0a0eb90":"**Question** - Display all the number of movies for particular director and revenue .","6ef5f90d":"**Question** - List out Top 10 highest budget made movies ","10364215":"#### **Question 6:** Count female directors.\n","33855801":"#### **Question 10:**  What is the most awarded average vote since the January 1st, 2000?\n","e80b9e0c":"###  Analysis on IMDB useful libraries with sql\n\n**SQLite :** - SQLite database is integrated with the application that accesses the database. The applications interact with the SQLite database read and write directly from the database files stored on disk.\n         \n**PANDAS :**\n    - Pandas provide high performance, fast, easy to use data structures and data analysis tools for manipulating numeric data and time series. Pandas is built on the numpy library and written in languages like Python, Cython, and C. In pandas, we can import data from various file formats like JSON, SQL, Microsoft Excel, etc.\n    \n**NUMPY:**\n       - Numpy is an Python library,It is used for scientific computing in python.It contains a collection of tools and techniques that can be used to solve on computers with mathematical model of problems.\n       - High performance and multi-dimensional areay objects.\n       - High level mathematical functions.\n       - matrices\n       \n       \n ### Data Visualizations\n - Data Visualization is the graphic representation of data. It converts a huge dataset into small graphs, thus aids in data analysis and predictions\n       \n**MATPLOTLIB**\n- It is a Python library used for plotting graphs with the help of other libraries like Numpy and Pandas. It is a powerful tool for visualizing data in Python. It is used for creating statical interferences and plotting 2D graphs of arrays\n\n**SEABORN:**\n- It is also a Python library used for plotting graphs with the help of Matplotlib, Pandas, and Numpy. It is built on the roof of Matplotlib and is considered as a superset of the Matplotlib library. It helps in visualizing univariate and bivariate data","03e23bb4":"\n\n> ## Note :\n\nThe mostProfit Table Shows The 10 Movies Got The Highest Gross Profit When Compared To The Other Movies.\n\nIt Turns Out That Avatar Directed By James Cameron Got A Gross Profit USD 2,787,965,087. It's Make Avatar In First Place, Followed By Titanic, The Avengers, Jurassic World, And Others.\n\nFrom The Table, It Can Be Seen That James Cameron Make Two Movies To Fill The First And Second Place On The Rankings.\n\n","bfe6e7c2":"### Voting Analysis","ff919cc3":"**Question**- List out Top 10 popularity on movies","b8a88cb5":"**Question**- By doing Director analysis We know Steven Spielberg is the highest revenue, so list the Steven Spielberg movies info","b4f8a7a8":"**Question** - What are the top 10 Revenue  movies  ","b7ee113c":"### Popularity Analysis","868c3f9d":"#### **Question 8:** What are the 3 most popular movies?\n","175c2f40":"\n#### **Question 2:** How do you get all data about directors?","6873782d":"**Question** - Display most popular movies with vote_average","2af7b35e":"# Analysis on IMDB DATA SET"}}