{"cell_type":{"774d2912":"code","77171dd5":"code","9b32ef4b":"code","114da887":"code","ec3e9215":"code","c3f4a0d9":"code","df0ed8bc":"code","a7c5c0aa":"code","da35915a":"code","12132e6f":"code","db25d9d2":"code","aba73f72":"code","c1c7ee0e":"code","cf27399f":"markdown","83983667":"markdown","07986aec":"markdown","be0df1a2":"markdown","94cef6b3":"markdown","ca566206":"markdown","9772c49f":"markdown","3b3cec41":"markdown","af3087c0":"markdown","ce40a873":"markdown","e84a885c":"markdown"},"source":{"774d2912":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","77171dd5":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom catboost import CatBoostClassifier, Pool\nfrom sklearn.model_selection import StratifiedKFold # For creating folds\nfrom sklearn.metrics import log_loss # Evaluation metrics","9b32ef4b":"df = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jun-2021\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jun-2021\/test.csv\")\nss = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jun-2021\/sample_submission.csv\")","114da887":"print(f\"Shape of train : {df.shape}\")\nprint(f\"Shape of test : {test.shape}\")\nprint(f\"Shape of sample submission : {ss.shape}\")","ec3e9215":"df.head()","c3f4a0d9":"df.info()","df0ed8bc":"test.info()","a7c5c0aa":"sns.countplot(x= df.target)","da35915a":"cat_features = [f\"feature_{i}\" for i in range(75)]","12132e6f":"df[\"kfold\"] = -1\ndf = df.sample(frac=1).reset_index(drop=True)\ny = df.target\nkf = StratifiedKFold(n_splits=5)\nfor f, (t_,v_) in enumerate(kf.split(X=df,y=y)):\n  df.loc[v_,\"kfold\"] = f","db25d9d2":"cat = CatBoostClassifier(task_type='GPU',\n                         iterations=3000,\n                         loss_function='MultiClass',\n                         random_state = 42,\n                         early_stopping_rounds=500,\n                         verbose = 100)","aba73f72":"logloss = []\ncat_pred = 0\nfor f in range(5): # Looping around 5 folds\n    \n    #Splitting the data into train and validation set\n    train = df[df.kfold!= f].reset_index(drop=True) \n    valid = df[df.kfold== f].reset_index(drop=True)\n    \n    #Creating X_train and y_train\n    X_train = train.drop([\"id\",\"target\", \"kfold\"], axis=1)\n    y_train = train.target\n    X_valid = valid.drop([\"id\",\"target\", \"kfold\"], axis=1)\n    y_valid = valid.target\n    X_test = test.drop([\"id\"], axis=1)\n    \n    #Creating pool\n    train_pool = Pool(data=X_train,label=y_train,cat_features=cat_features)\n    valid_pool = Pool(data=X_valid,label=y_valid,cat_features=cat_features)\n    \n    #Fitting the model\n    cat.fit(train_pool, eval_set=valid_pool, verbose=100)\n    \n    #Predicting for valid and test datasets\n    valid_preds = cat.predict_proba(X_valid)\n    cat_pred += cat.predict_proba(X_test)\/5\n    \n    #Calculating log loss\n    logloss.append(log_loss(y_valid,valid_preds))\n    \nprint(logloss)\nprint(sum(logloss)\/len(logloss))","c1c7ee0e":"ss[\"Class_1\"] = cat_pred[:,0]\nss[\"Class_2\"] = cat_pred[:,1]\nss[\"Class_3\"] = cat_pred[:,2]\nss[\"Class_4\"] = cat_pred[:,3]\nss[\"Class_5\"] = cat_pred[:,4]\nss[\"Class_6\"] = cat_pred[:,5]\nss[\"Class_7\"] = cat_pred[:,6]\nss[\"Class_8\"] = cat_pred[:,7]\nss[\"Class_9\"] = cat_pred[:,8]\nss.to_csv(\"\/kaggle\/working\/cat_pred.csv\", index=False)","cf27399f":"Traing and evaluating the model in the 5 folds cross validation manner.","83983667":"There are no missing values in the both train and test datasets and all are integers, so the categories might be encoded already.","07986aec":"Since it is a baseline\/starter model, I am not doing EDA and directly moving onto model building part.","be0df1a2":"Target column is imbalanced, so I will use StratifiedKFold for cross validation.","94cef6b3":"Creating folds for the train dataset, so that we can train the model for the n folds, to avoid overfitting.","ca566206":"# Basline model","9772c49f":"Defining a variable with all the categorical features to pass to catboost classifier","3b3cec41":"# Reading the train, test and sample submission file","af3087c0":"Thank you","ce40a873":"**The average log loss is 1.7483222444669384**","e84a885c":"# Submission file"}}