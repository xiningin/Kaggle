{"cell_type":{"6e73feb8":"code","1cc74a57":"code","3f4dbcdf":"code","1d980bb8":"code","bbd2d8ae":"code","673c71ae":"code","a1c90d4a":"code","b4fcb6a4":"code","a3d56f8f":"code","8f6b96bf":"code","30704edf":"code","b4538062":"code","43c2df97":"code","c2deddf0":"code","39ad10ca":"code","b16a3c0a":"code","a92e7e65":"code","c912fa5f":"code","99599484":"code","1ad51720":"code","4e33f46f":"code","2921cff5":"code","a70fc172":"code","c9e54f2b":"code","abef8333":"code","61bd15c6":"code","ef33f74c":"markdown","c72649c4":"markdown","f29d26ba":"markdown","f111a508":"markdown","d1cda947":"markdown","54290407":"markdown","b6edd876":"markdown","d67b2b27":"markdown","917a01a1":"markdown","88a2fac0":"markdown","fc6b078a":"markdown","335ebd07":"markdown","113d055e":"markdown","1b6d5a81":"markdown","9f933897":"markdown","66cac7b3":"markdown","a3abe5f8":"markdown","e3a118d8":"markdown","2c5d1768":"markdown","9893511e":"markdown","083453e7":"markdown","053780c4":"markdown","4b030f3d":"markdown","5aefb9e7":"markdown","e7ba46e6":"markdown","73ab2b66":"markdown","7475189c":"markdown","4ce5d1b0":"markdown"},"source":{"6e73feb8":"# --- CSS STYLE ---\nfrom IPython.core.display import HTML\ndef css_styling():\n    styles = open(\"..\/input\/competiongoal\/archive\/alerts.css\", \"r\").read()\n    return HTML(\"<style>\"+styles+\"<\/style>\")\ncss_styling()","1cc74a57":"from pathlib import Path\nimport pandas as pd\nimport glob\nimport numpy as np\nimport pyarrow.parquet\nimport pyarrow as pa\nimport seaborn as sns\n#import tqdm\nfrom tqdm.notebook import tqdm\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport gc\n\nimport warnings\nwarnings.filterwarnings('ignore')","3f4dbcdf":"train = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/train.csv')\ntrain","1d980bb8":"col=['deg_C','relative_humidity','absolute_humidity','sensor_1','sensor_2','sensor_3','sensor_4','sensor_5','target_carbon_monoxide','target_benzene','target_nitrogen_oxides']\nplt.figure(figsize=(10,8))\nsns.heatmap(train[col].corr(), vmin=-1.0, vmax=1.0, annot=True, cmap='coolwarm', linewidths=0.1)\nplt.show()","bbd2d8ae":"train.target_carbon_monoxide.hist()","673c71ae":"train.target_benzene.hist()","a1c90d4a":"train.target_nitrogen_oxides.hist()","b4fcb6a4":"\ntargets = [\"target_carbon_monoxide\", \"target_benzene\", \"target_nitrogen_oxides\"]\ntarget_names = [\"Carbon monoxide\", \"Benzene\", \"Nitrogen oxides\"]\nfig, axs = plt.subplots(figsize=(16, 18), ncols=1, nrows=3, sharex=False)\nplt.subplots_adjust(hspace = 0.3)\n\ncolors = [\"red\", \"blue\", \"green\"]\n\nfor i in [0, 1, 2]:\n    axs[i].plot(train[\"date_time\"], train[targets[i]], color=colors[i])\n    axs[i].set_title(f\"{target_names[i]} (target #{i+1}) \", fontsize=20, pad=5)\n    axs[i].set_ylabel(f\"{target_names[i]} level\", fontsize=14, labelpad=5)\n    axs[i].set_xlabel(\"Date\", fontsize=14, labelpad=5)\n    axs[i].grid(axis=\"both\")\n\nplt.show();\n","a3d56f8f":"test = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/test.csv')\ntest","8f6b96bf":"sub = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/sample_submission.csv')\nsub","30704edf":"from sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split","b4538062":"train['SMC'] = (train['absolute_humidity'] * 100) \/ train['relative_humidity']\ntrain['Dew_Point'] = 243.12*(np.log(train['relative_humidity'] * 0.01) + (17.62 * train['deg_C'])\/(243.12+train['deg_C']))\/(17.62-(np.log(train['relative_humidity'] * 0.01)+17.62*train['deg_C']\/(243.12+train['deg_C'])))","43c2df97":"test['SMC'] = (test['absolute_humidity'] * 100) \/ test['relative_humidity']\ntest['Dew_Point'] = 243.12*(np.log(test['relative_humidity'] * 0.01) + (17.62 * test['deg_C'])\/(243.12+test['deg_C']))\/(17.62-(np.log(test['relative_humidity'] * 0.01)+17.62*test['deg_C']\/(243.12+test['deg_C'])))","c2deddf0":"train","39ad10ca":"target = train[['target_carbon_monoxide','target_benzene','target_nitrogen_oxides']]\ntrain = train.drop(['target_carbon_monoxide','target_benzene','target_nitrogen_oxides','date_time','deg_C'],axis=1)","b16a3c0a":"test = test.drop(['date_time','deg_C'],axis=1)","a92e7e65":" X_train, X_test, y_train, y_test =train_test_split(train, target, test_size=0.3, random_state=42)","c912fa5f":"import optuna \nimport optuna.integration.lightgbm as lgbo\nimport lightgbm as lgb\n\nparams = { 'objective': 'mae', 'metric': 'mae' } #binary_error(\u6b63\u7b54\u7387)\nx_train, x_test, y_train, y_test = train_test_split(train, target['target_carbon_monoxide'], test_size=0.3, random_state=42)\nlgb_train1 = lgb.Dataset(X_train, y_train)\nlgb_valid1 = lgb.Dataset(X_test, y_test)\nmodel1 = lgbo.train(params, lgb_train1, valid_sets=[lgb_valid1], verbose_eval=100)\nmodel1.params\n\nx_train, x_test, y_train, y_test = train_test_split(train, target['target_benzene'], test_size=0.3, random_state=42)\nlgb_train2 = lgb.Dataset(X_train, y_train)\nlgb_valid2 = lgb.Dataset(X_test, y_test)\nmodel2 = lgbo.train(params, lgb_train2, valid_sets=[lgb_valid2], verbose_eval=100)\nmodel2.params\n\nx_train, x_test, y_train, y_test = train_test_split(train, target['target_nitrogen_oxides'], test_size=0.3, random_state=42)\nlgb_train3 = lgb.Dataset(X_train, y_train)\nlgb_valid3 = lgb.Dataset(X_test, y_test)\nmodel3 = lgbo.train(params, lgb_train3, valid_sets=[lgb_valid3], verbose_eval=100)\nmodel3.params","99599484":"import lightgbm as lgb\nparams={'objective': 'mae',\n 'metric': 'mae',\n 'feature_pre_filter': False,\n 'lambda_l1': 4.670375258649679e-05,\n 'lambda_l2': 0.012532552526253581,\n 'num_leaves': 192,\n 'feature_fraction': 0.8999999999999999,\n 'bagging_fraction': 0.7664304386463259,\n 'bagging_freq': 4,\n 'min_child_samples': 20,\n 'num_iterations': 1000,\n 'early_stopping_round': None}\nparams[\"learning_rate\"] = 0.01\nparams[\"early_stopping_round\"] = 50  \nparams[\"max_depth\"] = 11\n#best_lgb_params['min_data_in_leaf'] = 9\nparams[\"num_iterations\"] = 800\n\nmodel1.params['learning_rate'] = 0.01\nmodel1.params[\"num_iterations\"] = 2000\nmodel1.params[\"early_stopping_round\"] = 50 \nmodel2.params['learning_rate'] = 0.01\nmodel2.params[\"num_iterations\"] = 2000\nmodel2.params[\"early_stopping_round\"] = 50 \nmodel3.params['learning_rate'] = 0.01\nmodel3.params[\"num_iterations\"] = 2000\nmodel3.params[\"early_stopping_round\"] = 50 ","1ad51720":"model1.params","4e33f46f":"model2.params","2921cff5":"model3.params","a70fc172":"model1 = lgb.train(model1.params,lgb_train1,valid_sets=[lgb_valid1] ,verbose_eval=100)\nmodel2 = lgb.train(model2.params,lgb_train2,valid_sets=[lgb_valid2] ,verbose_eval=100)\nmodel3 = lgb.train(model3.params,lgb_train3,valid_sets=[lgb_valid3] ,verbose_eval=100)","c9e54f2b":"y_pred1 = model1.predict(test)\ny_pred2 = model2.predict(test)\ny_pred3 = model3.predict(test)","abef8333":"sub.target_carbon_monoxide = y_pred1\nsub.target_benzene = y_pred2\nsub.target_nitrogen_oxides =y_pred3","61bd15c6":"sub.to_csv('submission.csv',index=False)\nsub","ef33f74c":"from sklearn.multioutput import MultiOutputRegressor\nimport lightgbm as lgb\n\nparams={'learning_rate': 0.07,\n        'objective':'mae', \n        'metric':'mae',\n        'lambda_l1': 4.670375258649679e-05,\n        'lambda_l2': 0.012532552526253581,\n        'num_leaves': 192,\n        'feature_fraction': 0.8999999999999999,\n        'bagging_fraction': 0.7664304386463259,\n        'bagging_freq': 4,\n        'min_child_samples': 20,\n        'verbose': 1,\n        'bagging_fraction': 0.8,\n        'feature_fraction': 0.8,\n        'max_depth':30\n       }\nreg = MultiOutputRegressor(lgb.LGBMRegressor(**params, n_estimators=1000))\n\nreg.fit(X_train, y_train)","c72649c4":"![image.png](attachment:1d7101d1-facf-4a87-8b8b-3f9337149b9a.png)","f29d26ba":"![image.png](attachment:df070b82-8416-4bfa-8e42-2d300a4c601b.png)","f111a508":"## \ud83d\udd28\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u3092\u3068\u308a\u3042\u3048\u305a\u898b\u3066\u307f\u308b","d1cda947":"# \ud83d\udcccsample_submission.csv\n\u76ee\u7684\u95a2\u6570\u306f\u3001target_carbon_monoxide\ttarget_benzene\ttarget_nitrogen_oxides\u306e\uff13\u3064\u3067\u3059\u306d\u3002\n\u82f1\u8a9e\u3060\u3068\u308f\u304b\u308a\u307e\u305b\u3093\u304c\u3001\u8a33\u3059\u3068\u4e00\u9178\u5316\u70ad\u7d20\u3001\u30d9\u30f3\u30bc\u30f3\u3001\u7a92\u7d20\u9178\u5316\u7269\u3068\u306a\u308a\u307e\u3057\u305f\u3002","54290407":"### \ud83d\udcd0target_carbon_monoxide \u4e00\u9178\u5316\u70ad\u7d20","b6edd876":"# \u3044\u3058\u308c\u3070\u30a4\u30b8\u308b\u307b\u3069\u30b9\u30b3\u30a2\u304c\u60aa\u5316\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n# \u521d\u5fc3\u8005\u3042\u308b\u3042\u308b\u306a\u3093\u3067\u3059\u304b\u306d\u3002","d67b2b27":"\u3069\u3046\u3082\u3046\u307e\u304f\u52d5\u304d\u307e\u305b\u3093\u3002\u3053\u306e\u51c4\u307e\u3058\u3044\u30ef\u30fc\u30cb\u30f3\u30b0\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u3069\u3046\u306b\u304b\u306a\u3089\u306a\u3044\u3082\u306e\u306a\u3093\u3067\u3059\u304b\u306d\u3002<br>\n\u691c\u7d22\u3057\u3066\u3082\u3067\u3066\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002<br>\n\u305d\u3046\u3044\u3048\u3070\u3001OPTUNA\u4f7f\u3063\u3066\u30b9\u30b3\u30a2\u304c\u6539\u5584\u3057\u305f\u3053\u3068\u306f\u4eca\u306e\u3068\u3053\u308d\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001\u4eca\u56de\u306f\u5c11\u3057\u3088\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\n![image.png](attachment:9312109c-bc72-4706-9502-771b604c177d.png)","917a01a1":"### \u4ed6\u30af\u30e9\u30b9LightGBM \u4e00\u65e6\u30b3\u30e1\u30f3\u30c8","88a2fac0":"### \u65e5\u3054\u3068\u306e\uff13\u3064\u306e\u76ee\u7684\u95a2\u6570\u3068\u306e\u95a2\u4fc2(\u6642\u9593\u304c\u7d50\u69cb\u304b\u304b\u308b\uff09","fc6b078a":"absolute_humidity\uff1a\u7d76\u5bfe\u6e7f\u5ea6\uff1f<br>\nrelative_humidity\uff1a\u76f8\u5bfe\u6e7f\u5ea6<br>\ndeg_C:\u6570\u5b57\u304b\u3089\u3057\u3066\u6442\u6c0f\u3060\u3068\u601d\u3046","335ebd07":"y_pred = reg.predict(X_test)\n","113d055e":"### \u3067\u304d\u308c\u308c\u3070\u3001\u4eca\u56de\u306fAUTOML\u3092\u4f7f\u308f\u305a\u306b\u306a\u3093\u3068\u304b\u3057\u305f\u3044\u3002\u524d\u56de\u3001AUTOML\u3092\u4f7f\u3063\u305f\u3089\u8003\u3048\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u3002\ud83d\ude02","1b6d5a81":"test['date_time'] = pd.to_datetime(test['date_time'])\ntest['year'] = test['date_time'].dt.year\ntest['month'] = test['date_time'].dt.month\ntest['week'] = test['date_time'].dt.week\ntest['day'] = test['date_time'].dt.day\ntest['dayofweek'] = test['date_time'].dt.dayofweek\ntest['time'] = test['date_time'].dt.date - test['date_time'].dt.date.min()\ntest['hour'] = test['date_time'].dt.hour\ntest['time'] = test['time'].apply(lambda x : x.days)\ntest","9f933897":"\u30fb\u6c17\u6e29\u306f\u3042\u3093\u307e\u308a\u95a2\u4fc2\u306a\u304f\u3066\u3001senser1,2,4,5\u306f\u6b63\u306e\u95a2\u4fc2\u30013\u306f\u8ca0\u306e\u95a2\u4fc2\u3068\u3044\u3046\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002<br>\n\u30fb\u6e7f\u5ea6\u3082\u3042\u307e\u308a\u95a2\u4fc2\u306a\u3044\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u3002<br>\n<u>\u2192\u6c17\u6e29\u3068\u6e7f\u5ea6\u306f\u8aac\u660e\u5909\u6570\u304b\u3089\u5916\u305d\u3046\u304b\u306a\u3042<\/u><br>\n\u30fbsensor2\u306ftarget_benzene\u3068\u6975\u3081\u3066\u9ad8\u3044\u95a2\u4fc2\u304c\u3042\u308a\u307e\u3059\u306d\u3002<br>\n\u30fbtarget_carbon_monoxide\u306f\u3001sensor1,2,5\u3068\u95a2\u4fc2\u304c\u9ad8\u305d\u3046\u3067\u3059\u3002<br>\n\u30fbtarget_nitrogen_oxides\u306f\u3069\u306e\u30bb\u30f3\u30b5\u30fc\u3082\u5fae\u5999\u306a\u95a2\u4fc2\u3068\u3044\u3046\u3068\u3053\u3067\u3057\u3087\u3046\u304b\u3002","66cac7b3":"> train.csv-\u6c17\u8c61\u30c7\u30fc\u30bf\u3001\u30bb\u30f3\u30b5\u30fc\u30c7\u30fc\u30bf\u30013\u3064\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u5024\u3092\u542b\u3080\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf<br>\n> test.csv-train.csv\u3068\u540c\u3058\u5f62\u5f0f\u3067\u3059\u304c\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u5024\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u3042\u306a\u305f\u306e\u4ed5\u4e8b\u306f\u3001\u3053\u308c\u3089\u306e\u5404\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u5024\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u3067\u3059\u3002<br>\n> sample_submission.csv-\u6b63\u3057\u3044\u5f62\u5f0f\u306e\u30b5\u30f3\u30d7\u30eb\u9001\u4fe1\u30d5\u30a1\u30a4\u30eb\u3002","a3abe5f8":"y_pred = reg.predict(test)","e3a118d8":"train['date_time'] = pd.to_datetime(train['date_time'])\ntrain['year'] = train['date_time'].dt.year\ntrain['month'] = train['date_time'].dt.month\ntrain['week'] = train['date_time'].dt.week\ntrain['day'] = train['date_time'].dt.day\ntrain['dayofweek'] = train['date_time'].dt.dayofweek\ntrain['time'] = train['date_time'].dt.date - train['date_time'].dt.date.min()\ntrain['hour'] = train['date_time'].dt.hour\ntrain['time'] = train['time'].apply(lambda x : x.days)\ntrain","2c5d1768":"\n<div class=\"alert simple-alert\"><font color=\"black\">\n\ud83d\ude80 <b>Competition Goal<\/b>\uff1a \u6642\u9593\u306e\u7d4c\u904e\u306b\u4f34\u3046\u5927\u6c17\u6c5a\u67d3\u6e2c\u5b9a\u5024\u3092\u4e88\u6e2c\u3057\u307e\u3059\u3002\n<\/div>","9893511e":"### \u7279\u5fb4\u91cf\u8ffd\u52a0","083453e7":"# \ud83d\udccctest.csv\n2011\/1\/1\uff5e2011\/4\/4\u306e\u30c7\u30fc\u30bf\u3092\u4e88\u6e2c\u3059\u308b\u3002\u968f\u5206\u53e4\u3044\u30c7\u30fc\u30bf\u3092\u4e88\u6e2c\u3059\u308b\u3093\u3067\u3059\u306d\u3002","053780c4":"### \ud83d\udcd0target_benzene \u30d9\u30f3\u30bc\u30f3","4b030f3d":"![image.png](attachment:3f458990-0893-4eb4-975f-170fe023fe35.png)","5aefb9e7":"RMSE=np.sqrt(mean_squared_error(y_test, y_pred))\nRMSE","e7ba46e6":"### \ud83d\udcd0target_nitrogen_oxides\u3000\u7a92\u7d20\u9178\u5316\u7269","73ab2b66":"# \ud83d\udccctrain.csv\n2010\/3\/10\uff5e2011\/1\/1\u306e\u30c7\u30fc\u30bf","7475189c":"> \u3053\u306e\u30b3\u30f3\u30c6\u30b9\u30c8\u3067\u306f\u3001\u57fa\u672c\u7684\u306a\u6c17\u8c61\u60c5\u5831\uff08\u6e29\u5ea6\u3068\u6e7f\u5ea6\uff09\u30685\u3064\u306e\u30bb\u30f3\u30b5\u30fc\u306e\u5165\u529b\u5024\u306b\u57fa\u3065\u3044\u3066\u3001\u6642\u9593\u306e\u7d4c\u904e\u306b\u4f34\u3046\u5927\u6c17\u6c5a\u67d3\u6e2c\u5b9a\u5024\u3092\u4e88\u6e2c\u3057\u307e\u3059\u3002\n> \n> \u4e88\u6e2c\u3059\u308b3\u3064\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\u5024\u306f\u3001target_carbon_monoxide\u3001target_benz\u3001\u304a\u3088\u3073target_nitrogen_oxides\u3067\u3059\u3002","4ce5d1b0":"## \ud83d\udcc1\u8a55\u4fa1\u306f\u5bfe\u6570\u5e73\u5747\u4e8c\u4e57\u8aa4\u5dee\uff08RMSLE)\u3060\u305d\u3046\u3067\u3059\u3002\n\n![image.png](attachment:0d01482c-eca3-445d-a436-4a5a408f7093.png)"}}