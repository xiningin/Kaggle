{"cell_type":{"acea82fe":"code","6ac8aceb":"code","4d36569c":"code","e06c5267":"code","28e2ab0a":"code","0ea1485f":"code","d49d16f7":"code","2ba09a02":"code","4bb93d3b":"code","583b69ca":"code","b3765f5c":"code","0d1eaec3":"code","ccea1a22":"code","b3ec0933":"code","18256976":"code","00d781ed":"code","a80b515f":"code","a3c39378":"code","94fb2a3b":"code","7a0f75d9":"code","0d3894f0":"code","b7d868b3":"code","78be92c7":"code","951a16a3":"code","7f4317be":"code","944cf21f":"code","63552335":"code","a09cfdbc":"code","eeacadbc":"code","13bcdaf4":"code","a2ee8d1b":"code","5efe3d40":"code","3fc58970":"code","eac41806":"code","e159fdb7":"code","b640aa76":"code","02d572e0":"code","bb60c2da":"code","48fa0775":"code","c4ea9be5":"code","711f1137":"code","6a2bb7c8":"code","5bc44621":"code","6e719ba3":"code","95ccd020":"code","19285363":"code","2a21ac2c":"code","89055a24":"markdown","8eebd465":"markdown","e8237273":"markdown","5baa8f18":"markdown","62fa823b":"markdown","976afb1d":"markdown","2ef36b53":"markdown","743ab805":"markdown","fac71086":"markdown","49927ff0":"markdown","76ff30d9":"markdown","100d5488":"markdown","6aa6a90e":"markdown","19ab995c":"markdown","0c6fe72f":"markdown","f05b4e46":"markdown","0e377e89":"markdown","e193bab6":"markdown"},"source":{"acea82fe":"import os \nimport random\nimport pandas as pd \nimport numpy as np\nfrom  matplotlib import pyplot as plt \nfrom glob import glob\nimport matplotlib.image as mpimg\nfrom sklearn.model_selection import train_test_split\nimport cv2\nfrom tqdm import tqdm ","6ac8aceb":"# \u062a\u062c\u0647\u064a\u0632 \u0627\u0644\u0628\u0630\u0648\u0631 \u0627\u0644\u0639\u0634\u0648\u0627\u0626\u064a\u0647\nseed = 42\nnp.random.seed = seed","4d36569c":"# glob\n# \u062a\u0644\u0643 \u0627\u0644\u062f\u0627\u0644\u0647 \u062a\u0639\u0645\u0644 \u0639\u0644\u064a \u0627\u0644\u0628\u062d\u062b \u0641\u064a \u0645\u062c\u0645\u0648\u0639\u0647 \u0645\u0646 \u0627\u0644\u0645\u0644\u0641\u0627\u062a \u0627\u0648 \u0627\u0644\u0641\u0644\u062f\u0631\u0627\u062a \u062d\u0648\u0644 \u0627\u0644\u0642\u064a\u0645 \u0627\u0644\u062a\u064a \u062a\u062a\u0637\u0627\u0628\u0642 \u0645\u0639 \u0627\u0644\u0645\u0631\u0633\u0644 \u0627\u0644\u064a\u0647\u0627 \n# \u0646\u062d\u0646 \u0646\u0633\u062a\u0647\u062f\u0647 \u0627\u0644\u0645\u0633\u0643\u0627\u062a \nmask_files = glob('..\/input\/lgg-mri-segmentation\/kaggle_3m\/*\/*_mask*')","e06c5267":"train_files = []\nfor i in mask_files:\n    train_files.append(i.replace('_mask', ''))","28e2ab0a":"# \u0647\u0646\u0627 \u0646\u0638\u0647\u0631 \u0639\u062f\u062f \u0627\u0644\u0635\u0648\u0631 \u0641\u064a \u0645\u062e\u0632\u0646 \nprint(len(train_files))\nprint(len(mask_files))","0ea1485f":"# \u0646\u0644\u0627\u062d\u0638 \u0627\u0646\u0647 \u0644\u0643\u0644 \u0635\u0648\u0631\u0647 \u0627\u0644\u0645\u0627\u0633\u0643 \u0627\u0644\u062e\u0627\u0635 \u0628\u0647\u0627 \nprint(train_files[:1])\nprint('--------------------------------------------------------------------------')\nprint(mask_files[:1])","d49d16f7":"plt.figure(figsize=(20,20))\n\nfor i in range(5):\n    # \u0647\u0646\u0627 \u0646\u0633\u062a\u062e\u062f\u0645 \u0627\u0644\u0627\u062e\u062a\u064a\u0627\u0631 \u0627\u0644\u0639\u0634\u0648\u0627\u0626\u064a \u0644\u0644\u0635\u0648\u0631 \u0641\u064a \u0643\u0644 \u0645\u0631\u0647 \u0641\u064a \u0627\u0644\u0645\u062d\u0627\u0648\u0644\u0627\u062a \u0627\u0644\u062e\u0645\u0633\u0647 \n    file = random.choice(train_files)\n    # \u0647\u0646\u0627 \u0646\u0639\u0645\u0644 \u0639\u0644\u064a \u0642\u0631\u0627\u0621\u0647 \u0627\u0644\u0635\u0648\u0631\u0647 \n    img=mpimg.imread(file)\n    # \u0647\u0646\u0627 \u0637\u0631\u064a\u0642\u0647 \u062c\u064a\u062f\u0647 \u0644\u0644\u0639\u0631\u0636\n    ax=plt.subplot(1,5,i+1)\n    # \u0647\u0646\u0627 \u0646\u0639\u0645\u0644 \u0639\u0644\u064a \u0639\u0631\u0636 \u0627\u0644\u0635\u0648\u0631\u0647 \n    plt.imshow(img)","2ba09a02":"plt.figure(figsize=(20,20))\n\nfor i in range(5):\n    # \u0647\u0646\u0627 \u0646\u0633\u062a\u062e\u062f\u0645 \u0627\u0644\u0627\u062e\u062a\u064a\u0627\u0631 \u0627\u0644\u0639\u0634\u0648\u0627\u0626\u064a \u0644\u0644\u0635\u0648\u0631 \u0641\u064a \u0643\u0644 \u0645\u0631\u0647 \u0641\u064a \u0627\u0644\u0645\u062d\u0627\u0648\u0644\u0627\u062a \u0627\u0644\u062e\u0645\u0633\u0647 \n    file = random.choice(mask_files)\n    # \u0647\u0646\u0627 \u0646\u0639\u0645\u0644 \u0639\u0644\u064a \u0642\u0631\u0627\u0621\u0647 \u0627\u0644\u0635\u0648\u0631\u0647 \n    img=mpimg.imread(file)\n    # \u0647\u0646\u0627 \u0637\u0631\u064a\u0642\u0647 \u062c\u064a\u062f\u0647 \u0644\u0644\u0639\u0631\u0636\n    ax=plt.subplot(1,5,i+1)\n    # \u0647\u0646\u0627 \u0646\u0639\u0645\u0644 \u0639\u0644\u064a \u0639\u0631\u0636 \u0627\u0644\u0635\u0648\u0631\u0647 \n    plt.imshow(img)","4bb93d3b":"train_images = []\nfor img_path in train_files:\n    img = cv2.imread(img_path, cv2.IMREAD_COLOR)       \n    img = cv2.resize(img, (128, 128))\n    img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)\n    train_images.append(img)\n    #train_labels.append(label)\n# \u0647\u0646\u0627 \u0646\u0639\u0645\u0644 \u0639\u0644\u064a \u062a\u062d\u0648\u064a\u0644 \u0627\u0644\u0635\u0648\u0631 \u0627\u0644\u0645\u0648\u062c\u0648\u062f\u0647 \u0641\u064a \u0627\u0644\u0645\u062e\u0632\u0646 \u0627\u0644\u064a \u0645\u0635\u0641\u0648\u0641\u0627\u062a \u0646\u0627\u0645\u0628\u0627\u064a \n# \u0648\u0630\u0644\u0643 \u062d\u062a\u064a \u064a\u0643\u0648\u0646 \u0645\u0646 \u0627\u0644\u0633\u0647\u0644 \u0645\u0639\u0627\u0644\u062c\u062a\u0647\u0627 \ntrain_images = np.array(train_images)","583b69ca":"train_masks=[]\nfor mask_path in mask_files:\n    # \u0647\u0646\u0627 \u0646\u0642\u0648\u0645 \u0628\u0642\u0631\u0627\u0621\u0647 \u0627\u0644\u0635\u0648\u0631 \u0627\u0644\u0645\u0645\u0631\u0631\u0647 , \u0648\u062a\u062d\u062f\u064a\u062f\u0627 \u0627\u0644\u0642\u0646\u0627\u0647 \u0627\u0644\u0627\u0648\u0644\u064a \n    mask = cv2.imread(mask_path, 0)       \n    # \u0647\u0646\u0627 \u0646\u0639\u0645\u0644 \u0639\u0644\u064a \u062a\u0648\u062d\u064a\u062f \u0627\u0628\u0639\u0627\u062f \u0627\u0644\u0635\u0648\u0631 \n    mask = cv2.resize(mask, (128, 128))\n    #mask = cv2.cvtColor(mask, cv2.COLOR_RGB2BGR)\n    train_masks.append(mask)\n    #train_labels.append(label)\n#Convert list to array for machine learning processing \n# \u0647\u0646\u0627 \u0646\u0639\u0645\u0644 \u0639\u0644\u064a \u062a\u062d\u0648\u064a\u0644 \u0627\u0644\u0635\u0648\u0631 \u0627\u0644\u0645\u0648\u062c\u0648\u062f\u0647 \u0641\u064a \u0627\u0644\u0645\u062e\u0632\u0646 \u0627\u0644\u064a \u0645\u0635\u0641\u0648\u0641\u0627\u062a \u0646\u0627\u0645\u0628\u0627\u064a \n# \u0648\u0630\u0644\u0643 \u062d\u062a\u064a \u064a\u0643\u0648\u0646 \u0645\u0646 \u0627\u0644\u0633\u0647\u0644 \u0645\u0639\u0627\u0644\u062c\u062a\u0647\u0627 \ntrain_masks = np.array(train_masks)","b3765f5c":"# \u0627\u0638\u0647\u0627\u0631 \u0627\u0644\u0627\u0628\u0639\u0627\u062f \u0628\u0639\u062f \u062a\u0648\u062d\u064a\u062f\u0647\u0627 \u0648\u0639\u062f\u062f \u0627\u0644\u0642\u0646\u0648\u0627\u062a \u0648\u0627\u064a\u0636\u0627 \u0639\u062f\u062f \u0627\u0644\u0635\u0648\u0631 \u0648\u0627\u0644\u0645\u0633\u0643\u0627\u062a \u0641\u064a \u0627\u0644\u0645\u062e\u0627\u0632\u0646\nprint(train_images.shape)\nprint('-----------------------')\nprint(train_masks.shape)","0d1eaec3":"train_images_1=train_images[:1000]\ntrain_masks_1=train_masks[:1000]","ccea1a22":"#Use customary x_train and y_train variables\n# \u062a\u0645\u0631\u064a\u0631 \u0645\u062d\u062a\u0648\u064a \u0627\u0644\u0645\u062e\u0627\u0632\u0646 \u0627\u0644\u064a \u0645\u063a\u064a\u0631\u0627\u062a \u062c\u062f\u064a\u062f\u0647 \u0627\u0633\u0645\u0627\u0621\u0647\u0627 \u0645\u0634\u0647\u0648\u0631\u0647 \u0641\u064a \u0627\u0644\u062a\u0642\u0633\u064a\u0645 \nX_train = train_images_1\ny_train = train_masks_1","b3ec0933":"# \u0647\u0646\u0627 \u064a\u062a\u0645 \u0627\u0644\u0627\u0639\u062a\u0646\u0627\u0621 \u0628\u0627\u0628\u0639\u0627\u062f \u0627\u0644\u0639\u0645\u0648\u062f \u0627\u0644\u0630\u064a \u064a\u062d\u0645\u0644 \u0627\u0644\u0646\u062a\u0627\u0626\u062c \u0648\u0644\u0643\u0646\u0647\u0627 \u063a\u064a\u0631 \u0636\u0631\u0648\u0631\u064a\u0647 \ny_train = np.expand_dims(y_train, axis=3)\nprint(y_train.shape)","18256976":"import cv2\nimport pickle\nfrom keras.models import Sequential, Model\nfrom keras.layers import Conv2D\nfrom keras.applications.vgg16 import VGG16","00d781ed":"# \u0647\u0646\u0627 \u064a\u0627 \u0635\u062f\u064a\u0642\u064a \u0646\u0642\u0648\u0645 \u0628\u0627\u0633\u062a\u062f\u0639\u0627\u0621 \u0627\u0644\u0645\u0648\u062f\u064a\u0644 \u0627\u0644\u0645\u062f\u0631\u0628 , \u0648\u0647\u0648 \u064a\u062d\u062a\u0648\u064a \u0639\u0644\u064a \u0628\u0639\u0636 \u0627\u0644\u0628\u0627\u0631\u0627\u0645\u062a\u0631\u0627\u062a \u0627\u0644\u0647\u0627\u0645\u0647 \n#weights='imagenet'\n# \u0647\u0630\u0627 \u064a\u0639\u0646\u064a \u0627\u0633\u062a\u064a\u0631\u0627\u062f \u0627\u0644\u0627\u0648\u0632\u0627\u0646 \n#include_top=False\n# \u0647\u0630\u0627 \u064a\u0639\u0646\u064a \u0639\u062f\u0645 \u0627\u0633\u062a\u064a\u0631\u0627\u062f \u0627\u0644\u0637\u0628\u0642\u0627\u062a \u0627\u0644\u0643\u062b\u064a\u0641\u0647 \u0648\u0637\u0628\u0642\u0647 \u0627\u0644\u0627\u062e\u0631\u0627\u062c \n# \u0644\u0627\u0646\u0646\u0627 \u0646\u062d\u0646 \u0645\u0646 \u0633\u064a\u062a\u0639\u0627\u0645\u0644 \u0645\u0639\u0647\u0627 \u0645\u0628\u0627\u0634\u0631\u0647 \nVGG_model = VGG16(weights='imagenet', include_top=False, input_shape=(128, 128, 3))","a80b515f":"VGG_model.summary()","a3c39378":"# \u0647\u0646\u0627 \u0642\u0645\u0646\u0627 \u0628\u0627\u0646\u0634\u0627\u0621 \u0644\u0648\u0628 \u064a\u0639\u0645\u0644 \u0639\u0644\u064a \u062a\u062d\u0648\u064a\u0644 \u0627\u0644\u0637\u0628\u0642\u0627\u062a \u0627\u0644\u0645\u0648\u062c\u0648\u062f\u0647 \u0641\u064a \u0627\u0644\u0634\u0628\u0643\u0647 \u0627\u0644\u064a \u0627\u062c\u0632\u0627\u0621 \u0645\u062c\u0645\u062f\u0647 \u063a\u064a\u0631 \u0642\u0627\u0628\u0644\u0647 \u0644\u0644\u062a\u062f\u0631\u064a\u0628 \u0648\u0628\u0627\u0644\u062a\u0627\u0644\u064a \u0639\u0646\u062f\u0645\u0627 \u0646\u062d\u0635\u0644 \u0639\u0644\u064a \u062a\u0644\u062e\u064a\u0635 \u0644\u0644\u0645\u0648\u062f\u064a\u0644 \u0633\u0646\u0644\u0627\u062d\u0638 \u0627\u0646\u0639\u0627\u0633 \u0627\u0644\u0646\u062a\u0627\u0626\u062c \u0627\u0644\u062a\u064a \u0628\u0627\u0644\u0627\u0639\u0644\u064a \nfor layer in VGG_model.layers:\n\tlayer.trainable = False","94fb2a3b":"VGG_model.summary()  #Trainable parameters will be 0","7a0f75d9":"new_model = Model(inputs=VGG_model.input, outputs=VGG_model.get_layer('block1_conv2').output)\nnew_model.summary()","0d3894f0":"features=new_model.predict(X_train)","b7d868b3":"fig=plt.figure(figsize=(20,20))\n#Plot features to view them\n# \u0647\u0646\u0627 \u0646\u0642\u0648\u0645 \u0628\u0627\u0638\u0647\u0627\u0631 \u0627\u0644\u0635\u0648\u0631 \nsquare = 8\nix=1\nfor _ in range(square):\n    for _ in range(square):\n        ax = plt.subplot(square, square, ix)\n        ax.set_xticks([])\n        ax.set_yticks([])\n        plt.imshow(features[0,:,:,ix-1], cmap='gray')\n        ix +=1\nplt.show()","78be92c7":"#Reassign 'features' as X to make it easy to follow\n# \u0646\u062d\u0645\u064a\u0644 \u0627\u0644\u0645\u062e\u0632\u0646 \u0627\u0643\u0633 \u0627\u0628\u0639\u0627\u062f \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062a\u0648\u0642\u0639 \u0645\u0646 \u0627\u0644\u0645\u0648\u062f\u064a\u0644 \u0627\u0644\u0633\u0627\u0628\u0642 \nX=features","951a16a3":"print(X.shape)","7f4317be":"X = X.reshape(-1, X.shape[3])  #Make it compatible for Random Forest and match Y labels","944cf21f":"# \u0641\u064a \u0627\u0644\u0646\u062a\u0627\u0626\u062c \u0646\u0644\u0627\u062d\u0638 \u0627\u0646 \u0644\u062f\u064a\u0646\u0627 \u0639\u062f\u062f \u0643\u0628\u064a\u0631 \u062c\u062f\u0627 \u0645\u0646 \u0627\u0644\u0628\u0643\u0633\u0644\u0632 \u0648\u0627\u0644\u062a\u064a \u062a\u0628\u0644\u063a 16384000 \n# \u0628\u0627\u0644\u062a\u0627\u0643\u064a\u062f \u0647\u0646\u0627\u0643 \u0627\u0644\u0643\u062b\u064a\u0631 \u0645\u0646 \u0627\u0644\u0628\u0643\u0633\u0644\u0632 \u0627\u0644\u0627\u0644\u063a\u064a\u0631 \u0645\u0631\u063a\u0648\u0628 \u0628\u0647\u0627 \u0648\u0627\u0644\u062a\u064a \u062a\u0644\u0628\u063a \u0627\u0644\u0642\u064a\u0645\u0647 0 \u0648\u062a\u0644\u0643 \u0633\u0646\u062a\u062e\u0644\u0635 \u0645\u0646\u0647\u0627 \u0644\u0627\u0646\u0647\u0627 \u0641\u064a \u0627\u0644\u0627\u0635\u0644 \u0628\u0643\u0633\u0644 \u0628\u0627\u0644\u0644\u0648\u0646 \u0627\u0644\u0627\u0633\u0648\u062f \nprint(X.shape)","63552335":"#Reshape Y to match X\n# \u0647\u0646\u0627 \u0646\u0642\u0648\u0645 \u0628\u0627\u062f\u0631\u0627\u062c \u0627\u0644\u0648\u0627\u064a \u062d\u062a\u064a \u062a\u0643\u0648\u0646 \u0645\u062a\u0648\u0627\u0641\u0642\u0647 \u0645\u0639 \u0627\u0644\u0627\u0643\u0633 \nY = y_train.reshape(-1)","a09cfdbc":"print(Y.shape)","eeacadbc":"#Combine X and Y into a dataframe to make it easy to drop all rows with Y values 0\n#In our labels Y values 0 = unlabeled pixels. \n# \u0647\u0646\u0627 \u0646\u0642\u0648\u0645 \u0628\u0627\u0646\u0634\u0627\u0621 \u0627\u0637\u0627\u0631 \u0628\u064a\u0627\u0646\u0627\u062a \u0645\u0646 \u0627\u062c\u0644 \u0627\u0633\u062a\u062e\u0631\u0627\u062c \u0628\u0639\u0636 \u0627\u0644\u0645\u0639\u0644\u0648\u0645\u0627\u062a \n# \u0627\u0637\u0627\u0631 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0647\u0630\u0627 \u0633\u064a\u0643\u0648\u0646 \u0628\u0646\u0641\u0633 \u0627\u0628\u0639\u0627\u062f \u0627\u0644\u0645\u062e\u0632\u0646 \u0627\u0643\u0633 \ndataset = pd.DataFrame(X)\nprint(dataset.shape)","13bcdaf4":"# \u0642\u0645\u0646\u0627 \u0628\u0627\u0636\u0627\u0641\u0647 \u0639\u0645\u0648\u062f \u062c\u062f\u064a\u062f \u0627\u0644\u064a \u0627\u0644\u0627\u0637\u0627\u0631 \u064a\u062d\u0645\u0644 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062e\u0627\u0635\u0647 \u0628 \u0648\u0627\u064a \ndataset['Label'] = Y\n# \u0647\u0646\u0627 \u0642\u0645\u0646\u0627 \u0628\u0627\u0633\u062a\u062e\u0631\u0627\u062c \u0627\u0644\u0642\u064a\u0645 \u0627\u0644\u0645\u0641\u0631\u062f\u0647 \u0648\u062a\u0635\u0641\u064a\u0647 \u0627\u0644\u0642\u064a\u0645 \nprint(dataset['Label'].unique())\n# \u0647\u0646\u0627 \u0642\u0645\u0646\u0627 \u0628\u0637\u0628\u0627\u0639\u0647 \u0627\u0644\u0642\u064a\u0645 \/ \u0639\u062f\u062f \u0627\u0644\u0642\u064a\u0645 \u0627\u0644\u0645\u0643\u0631\u0631\u0647 \u0644\u0643\u0644 \u0642\u064a\u0645\u0647 \u0645\u0641\u0644\u062a\u0631\u0647 \nprint(dataset['Label'].value_counts())","a2ee8d1b":"# \u0647\u0646\u0627 \u0627\u0642\u0648\u0645 \u0628\u0627\u0633\u0642\u0627\u0637 \u0627\u0644\u0628\u0643\u0633\u0644\u0632 \u0627\u0644\u062a\u064a \u062a\u0633\u0627\u0648\u064a 0 \n# \u064a\u0645\u0643\u0646\u0643 \u0627\u0646 \u062a\u0633\u0645\u064a\u0647 \u0627\u0633\u0642\u0627\u0637 , \u0648\u0644\u0643\u0646 \u0627\u0644\u0627\u062f\u0642 \u0647\u0648 \u0627\u0639\u0627\u062f\u0647 \u062a\u062e\u0632\u064a\u0646 \u0642\u064a\u0645 \u0645\u0639 \u0639\u062f\u0645 \u062a\u0636\u0645\u064a\u0646 \u0627\u0644\u0642\u064a\u0645 \u0627\u0644\u062a\u064a \u062a\u0633\u0627\u0648\u064a 0 \ndataset = dataset[dataset['Label'] != 0]","5efe3d40":"print(dataset['Label'].unique())\nprint(dataset['Label'].value_counts())","3fc58970":"#Redefine X and Y for Random Forest\n# \u0647\u0646\u0627 \u0633\u0646\u0642\u0648\u0645 \u0628\u0627\u0639\u062f\u0627\u062f \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u062a\u0645\u0647\u064a\u062f\u0627 \u0644\u0627\u062f\u062e\u0627\u0644\u0647\u0627 \u0641\u064a \u062e\u0648\u0627\u0631\u0632\u0645\u064a\u0647 \u0627\u0644\u063a\u0627\u0628\u0647 \u0627\u0644\u0639\u0634\u0648\u0627\u0626\u064a\u0647 \n# \u0647\u0646\u0627 \u0627\u0642\u0648\u0645 \u0628\u0627\u0644\u062a\u0642\u0633\u064a\u0645 \u0644\u0644\u0628\u064a\u0627\u0646\u0627\u062a \n# \u0627\u0644\u0642\u064a\u0645 \u0627\u0644\u0639\u0627\u062f\u064a\u0647 \nX_for_RF = dataset.drop(labels = ['Label'], axis=1)\n# \u0627\u0644\u0642\u064a\u0645 \u0627\u0644\u062a\u0627\u0631\u062c\u062a \u0627\u0648 \u0627\u0644\u0647\u062f\u0641 \nY_for_RF = dataset['Label']","eac41806":"print(X_for_RF.shape)\nprint(Y_for_RF.shape)","e159fdb7":"#RANDOM FOREST\n# \u0627\u0633\u062a\u062f\u0639\u0627\u0621 \u0627\u0644\u063a\u0627\u0628\u0647 \u0627\u0644\u0639\u0634\u0648\u0627\u0626\u064a\u0647 \nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV","b640aa76":"#RandomForestClassifierModel=RandomForestClassifier()","02d572e0":"#parameters = {\n#    \"n_estimators\":[50,70],\n#    \"max_depth\":[7,11,13,15,32,1000,None]   \n#}","bb60c2da":"#  I will pass the classifier and parameters and the number of iteration in the GridSearchCV method.\n#cv = GridSearchCV(RandomForestClassifierModel,parameters,cv=2)\n#cv.fit(X_for_RF, Y_for_RF)","48fa0775":"#I have defined the method for printing all the iteration done and scores in each iteration.\n#def display(results):\n#    print(f'Best parameters are: {results.best_params_}')\n#    print(\"\\n\")\n#    mean_score = results.cv_results_['mean_test_score']\n#    std_score = results.cv_results_['std_test_score']\n#    params = results.cv_results_['params']\n#    for mean,std,params in zip(mean_score,std_score,params):\n#        print(f'{round(mean,3)} + or -{round(std,3)} for the {params}')","c4ea9be5":"#display(cv)","711f1137":"model = RandomForestClassifier(n_estimators = 50, random_state = 42)","6a2bb7c8":"# Train the model on training data\n# \u062a\u062f\u0631\u064a\u0628 \u0627\u0644\u0645\u0648\u062f\u064a\u0644 \nmodel.fit(X_for_RF, Y_for_RF)","5bc44621":"#Save model for future use\n# \u0627\u0644\u0627\u0646 \u0633\u0646\u0628\u062f\u0627 \u0641\u064a \u062d\u0641\u0638 \u0627\u0644\u0645\u0648\u062f\u064a\u0644 \u0641\u064a \u062d\u0627\u0644\u0647 \u0627\u0646 \u0627\u0631\u062f\u0646\u0627 \u0627\u0633\u062a\u0639\u0645\u0627\u0644 \u0647\u0630\u0627 \u0627\u0644\u0645\u0648\u062f\u064a\u0644 \u0644\u0644\u0642\u064a\u0627\u0645 \u0628\u0627\u0644\u0645\u0632\u064a\u062f \u0645\u0646 \u0627\u0644\u062a\u0642\u0633\u064a\u0645 \u0644\u0644\u0635\u0648\u0631 \nfilename = 'RF_model.sav'\npickle.dump(model, open(filename, 'wb'))","6e719ba3":"#Load model.... \nloaded_model = pickle.load(open(filename, 'rb'))","95ccd020":"#Test on a different image\n#READ EXTERNAL IMAGE...\n# \u0627\u0644\u0627\u0646 \u0633\u0646\u0642\u0648\u0645 \u0628\u0627\u062e\u062a\u0628\u0627\u0631 \u0627\u0644\u0645\u0648\u062f\u064a\u0644 \u0648\u0644\u0643\u0646\u0647\u0627 \u0639\u0644\u064a \u0628\u064a\u0627\u0646\u0627\u062a \u062e\u0627\u0631\u062c\u064a\u0647 \n# \u0648\u0644\u0643\u0646 \u0627\u0648\u0644\u0627 \u0639\u0644\u064a\u0646\u0627 \u062a\u062d\u0648\u064a\u0644 \u0648\u0645\u0639\u0627\u0644\u062c\u0647 \u0627\u0644\u0635\u0648\u0631\u0647 \u0643\u0645\u0627 \u0641\u0639\u0644\u0646\u0627 \u0645\u0639 \u0627\u0644\u0635\u0648\u0631 \u0627\u0644\u0627\u062e\u0631\u064a \ntest_img = cv2.imread('..\/input\/lgg-mri-segmentation\/kaggle_3m\/TCGA_CS_4942_19970222\/TCGA_CS_4942_19970222_10_mask.tif', cv2.IMREAD_COLOR)       \ntest_img = cv2.resize(test_img, (128, 128))\ntest_img = cv2.cvtColor(test_img, cv2.COLOR_RGB2BGR)\ntest_img = np.expand_dims(test_img, axis=0)","19285363":"#predict_image = np.expand_dims(X_train[8,:,:,:], axis=0)\n# \u062a\u0645 \u0627\u0639\u0627\u062f\u0647 \u0627\u0633\u062a\u0639\u0645\u0627\u0644 \u0627\u0644\u0645\u0648\u062f\u064a\u0644 \u0627\u0644\u062e\u0627\u0635 \u0628\u0627\u062a\u0627\u0631\u0646\u0633\u0641\u064a\u0631 \u0644\u0631\u0646\u0646\u062c \nX_test_feature = new_model.predict(test_img)\nX_test_feature = X_test_feature.reshape(-1, X_test_feature.shape[3])\n\nprediction = loaded_model.predict(X_test_feature)","2a21ac2c":"#View and Save segmented image\nprediction_image = prediction.reshape(mask.shape)\nplt.imshow(prediction_image, cmap='gray')\n# \u0647\u0646\u0627 \u0646\u0642\u0648\u0645 \u0628\u0637\u0628\u0627\u0639\u0647 \u0627\u0644\u0648\u0631\u0645 \u0627\u0644\u0645\u0648\u062c\u0648\u062f \u0641\u064a \u0627\u0644\u0635\u0648\u0631\u0647 \u0627\u0646 \u0643\u0627\u0646 \u064a\u0648\u062c\u062f ","89055a24":"**Here we will not use the model known as U-Net.**\n\n**Rather, we are going to combine vgg16 with Random Forest Classifier .**\n\n**Then we will see the results.**","8eebd465":"    \u0646\u0644\u0627\u062d\u0638 \u0647\u0646\u0627 \u0627\u0646\u0646\u0627 \u0642\u0645\u0646\u0627 \u0628\u0627\u0633\u062a\u062e\u0644\u0627\u0635 \u0627\u0648\u0644 \u0637\u0628\u0642\u062a\u064a\u0646 \u062a\u0644\u0627\u0641\u0641\u064a\u062a\u064a\u0646 \u0648\u0630\u0644\u0643 \u0644\u0627\u0633\u0628\u0627\u0628\n\n    \u0628\u0639\u062f \u0627\u0644\u0637\u0628\u0642\u062a\u064a\u0646 \u0627\u0644\u0627\u0648\u0644\u062a\u064a\u0646 \u0628\u062d\u062f\u062b \u062a\u063a\u064a\u0631 \u062a\u0627\u0645 \u0641\u064a \u0627\u0628\u0639\u0627\u062f \u0627\u0644\u0635\u0648\u0631\u0647 \u0648\u0628\u0627\u0644\u062a\u0627\u0644\u064a \u0644\u062a\u062c\u0646\u0628 \u062a\u0644\u0643 \u0627\u0644\u0639\u0645\u0644\u064a\u0647 \u0642\u0645\u0646\u0627 \u0628\u062a\u0646\u0641\u064a\u0630 \u0627\u0644\u0633\u0627\u0628\u0642","e8237273":"# Segmentation with VGG16 and Random Forest","5baa8f18":"**Here I use this beautiful tool in order to test a set of values and filter the best for the data among those values that we will pass to the beautiful algorithm called GridSearchCV**","62fa823b":"**I will now adjust the higher parameters of the model, which will play a major role in the accuracy of the model that we will reach.**","976afb1d":"# Don't forget to vote","2ef36b53":"# Thanks to:\n**[link](https:\/\/github.com\/bnsreenu\/python_for_microscopists\/blob\/master\/159b_VGG16_imagenet_weights_RF_for_semantic.py)**","743ab805":"# Import libraries.","fac71086":"# working in progress","49927ff0":"**\u0648\u0647\u0648 \u0627\u0644\u0645\u0637\u0644\u0648\u0628**\n\n**\u0646\u0644\u0627\u062d\u0638 \u0627\u064a\u0636\u0627 \u0627\u0646 \u0627\u0644\u0634\u0628\u0643\u0647 \u0645\u0643\u0648\u0646\u0647 \u0645\u0646 5 \u0627\u062c\u0632\u0627\u0621 \u0627\u0648 \u0628\u0644\u0648\u0643\u0627\u062a \u0647\u0646\u0627 \u0633\u0646\u062d\u0627\u0648\u0644 \u0627\u0633\u062a\u062e\u0631\u0627\u062c \u062c\u0632\u0621 \u0645\u0646 \u0627\u0644\u0634\u0628\u0643\u0647 \u0627\u0648 \u0628\u0644\u0648\u0643 \u0645\u0639\u064a\u0646 \u0648\u0630\u0644\u0643 \u0644\u0627\u0633\u0628\u0627\u0628 \u0633\u0627\u0630\u0643\u0631\u0647\u0627**","76ff30d9":"**\u0647\u0646\u0627 \u0646\u0627\u0644\u0627\u062d\u0638 \u0627\u0646 \u0642\u064a\u0645\u0647 \u0627\u0644\u0628\u0643\u0633\u0644\u0632 \u0627\u0644\u063a\u064a\u0631 \u0645\u0647\u0645\u0647 \u062a\u0635\u0644 \u0627\u0644\u064a 16202980 \u0648\u0628\u0627\u0644\u062a\u0627\u0644\u064a \u0633\u0646\u0642\u0648\u0645 \u0628\u0641\u0644\u062a\u0631\u0647 \u062a\u0644\u0643 \u0627\u0644\u0642\u064a\u0645**","100d5488":"# Training the model on the rest of the data","6aa6a90e":"**In the next stage, I will train the model on the rest of the data, and then I will test the model on 50 test images.**\n\n**Then I calculate the results that I will get from the model, and many other things.....**\n\n**Continue to learn together.**","19ab995c":"**\u0641\u064a \u0627\u0644\u0627\u0643\u0648\u0627\u062f \u0627\u0644\u0642\u0644\u064a\u0644\u0647 \u0627\u0644\u0642\u0627\u062f\u0645\u0647 \u0633\u0646\u0642\u0648\u0645 \u0628\u0627\u0644\u0643\u062b\u064a\u0631 \u0645\u0646 \u0627\u0644\u0645\u0647\u0627\u0645**\n\n**\u0644\u0630\u0627 \u0641\u0644\u062a\u062a\u0627\u0628\u0639 \u0648\u0633\u062a\u062a\u0639\u0644\u0645 \u0627\u0644\u0643\u062b\u064a\u0631**","0c6fe72f":"# importing VGG16","f05b4e46":"**\u0646\u0644\u0627\u062d\u0638 \u0627\u0646 \u0643\u0644 \u0627\u0644\u0645\u0639\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0648\u062c\u0648\u062f\u0647 \u0641\u064a \u0627\u0644\u0645\u0648\u062f\u064a\u0644 \u0642\u0627\u0628\u0644\u0647 \u0644\u0644\u062a\u062f\u0631\u064a\u0628 \u0648\u0644\u0643\u0646\u0646\u0627 \u0633\u0646\u0642\u0648\u0645 \u0628\u062a\u062d\u0648\u064a\u0644\u0647\u0627 \u0627\u0644\u064a \u0645\u0639\u0644\u0645\u0627\u062a \u063a\u064a\u0631 \u0642\u0627\u0628\u0644\u0647 \u0644\u0644\u062a\u062f\u0631\u064a\u0628 \u0648\u0630\u0644\u0643 \u062d\u062a\u064a \u062a\u0624\u062f\u064a \u0627\u0644\u0645\u0647\u0645\u0647 \u0627\u0644\u062a\u064a \u0644\u0627\u062c\u0644\u0647\u0627 \u0642\u0645\u0646\u0627 \u0628\u0627\u0633\u062a\u062f\u0639\u0627\u0626\u0647\u0627**","0e377e89":"# Importing Random Forest Classifier","e193bab6":"# Let's start the test."}}