{"cell_type":{"63031736":"code","f9304426":"code","f38f1774":"code","16e65b98":"code","ed0bafd3":"code","da3fb103":"code","54dc7988":"code","3f12ea09":"code","2c0b0f34":"code","0ddc6c97":"code","0bfd29da":"code","5f23f4a0":"code","042138d5":"code","80207074":"markdown","0c958cd9":"markdown","c19f086c":"markdown","1eaf607f":"markdown","9db1eea4":"markdown","89893c4a":"markdown","7b9cfd6b":"markdown","57b698ec":"markdown","c3efed63":"markdown","fc078cfc":"markdown","18d97b46":"markdown","503d9b30":"markdown","4d480f1c":"markdown","a80dad8f":"markdown","cb80b159":"markdown","5a15f3ac":"markdown","ad64b973":"markdown","4ef63394":"markdown","60de065e":"markdown","64dced73":"markdown"},"source":{"63031736":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f9304426":"df = pd.read_csv('\/kaggle\/input\/most-starred-github-repositories\/Most starred Github Repositories.csv')\ndf.head()","f38f1774":"forks = df.sort_values(by='forks',ascending=False)\nforks.head()","16e65b98":"df.sort_values(by=['issues','stars']).head()","ed0bafd3":"df.sort_values(by=['issues', 'stars'],\n        ascending=[False, True]).head(10)","da3fb103":"forks.head()","54dc7988":"forks.sort_index()","3f12ea09":"df.sort_values(by='forks',ascending=False, ignore_index=True).head()","2c0b0f34":"df.sort_values(by='forks', kind='mergesort').head()","0ddc6c97":"df.sort_index(axis=1).head(5)","0bfd29da":"sorted_forks = df.sort_values(by='forks', inplace=True)","5f23f4a0":"df.sort_values(by='forks', na_position='first') #NaN placed first  \ndf.sort_values(by='forks', na_position='last') #NaN placed in the end","042138d5":"df.sort_values(by='repo_name',key=lambda col: col.str.lower())[:5]","80207074":"As is evident, the index is unsorted. We can sort it by using the `dataframe.sort_index()` function.\n","0c958cd9":"## 2. Sorting on multiple\u00a0columns\nPandas also make it possible to sort the dataset on multiple columns. Simply, pass in the list of the desired columns names in the `sort_values` function as follows:","c19f086c":"## 7. Sorting by column names\n\nAdditionally, we can also sort the dataframe using the column names instead of the rows using the sort_index() function. For this we need to set the axis parameter to 1.\n","1eaf607f":"In the example above, we have sorted the dataframe based on the number of `open issues` and the number of stars a project has. Note that by default, the sorting has been done in ascending order.","9db1eea4":"## 8. Performing operations in-place\n\nBy setting the `inplace` parameter to `True`, all the sorting operations are done in place. This means that the existing dataframe gets modified. When `**inplace** = False` the operations take place on a copy of the dataframe, which is then returned. The original dataframe remains unchanged.","89893c4a":"The columns above have been sorted in ascending alphabetical order. By setting `ascending=False`, the sorting can be done in descending order also.","7b9cfd6b":"## 9. Handling missing values\n\nData usually contains null values. Using the `na_position` as first or last, in `sort_values()` function, we can choose to puts NaNs at the beginning or at the end.\n\n\n","57b698ec":"## 3. Sorting by Multiple Columns With Different Sort\u00a0Orders\nWhen sorting by multiple columns, it is also possible to pass in different sort orders for different columns.","c3efed63":"In the above examples, the dataframe will be first sorted on the `Open Issues` column in ascending order and then on the `Stars` column in descending order.","fc078cfc":"### Conclusion and additional resources\n\nIn this article we looked at the different ways of sorting a dataframe using the pandas library. We looked at the usage of both sort_values() as well as the sort_index() functions along with their parameters. [The official documentation](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.sort_values.html) is an excellent resource if you are thinking of going deeper into the details.","18d97b46":"Let's quickly go over the various columns of the dataset:\nProject Name: Name of the repository in Github\n* Stars: A bookmark or display of appreciation for a repository.\u00a0\n* Forks\u00a0: A fork is a copy of a repository that you manage.\n* Language\u00a0: Main programming languages used in the project\n* Open Issues\u00a0: Issues are suggested improvements, tasks or questions related to the repository. The issues which haven't been resolved are labelled as open issues.\n* Description\u00a0: A paragraph detailing the purpose of the project.\n* Last Commit: A commit, or \"revision\", is an individual change to a file (or set of files). This field stores the date and time of the last commit.\n\nNote: All the above definitions have been taken from the Github glossary.\nThe current dataset is ordered by the number of Stars \u2b50\ufe0f i.e, the project with the maximum number of stars comes first and so on. Pandas supports three kinds of sorting: sorting by index labels, sorting by column values, and sorting by a combination of both. Let's now look at the different ways of sorting this dataset with some examples:","503d9b30":"Sorting is a way of ordering elements in an order based on their rank.In this notebook we'll see different ways of performing sorting in pandas. This notebookis part of a blogpost I wrote on the same topic.","4d480f1c":"## 6. Choosing the sorting algorithm\nWe touched upon the topic of different sorting algorithms in the beginning. By default, `sort_values` uses the **quicksort** algorithm. However, we can choose between **_\u2018_quicksort,\u2019 \u2018mergesort\u2019 and \u2018heapsort\u2019** algorithm using the kind parameter . Remember that this option is only applied when sorting on a single column or label.","a80dad8f":"The function `dataframe.sort_values` comes with a lot of parameters. We will touch upon a few important ones as we advance through the article. In the above example, we have encountered two of them\u00a0:\n* by: The optional by parameter is  used to specify the column(s) which are used to determine the sorted order.\n* ascending: specifies  whether to sort the dataframe in ascending or descending order. The default value is ascending. To sort in descending order, we need to specify `ascending=False`.","cb80b159":"## 10. Apply the key function to the values before sorting\n\nWe can also apply a key function to the values before sorting. The function expects a `Series` and return a Series with the same shape as the input. It will be applied to each column in by independently. In the example below, we first convert the column `Project Name` in lowercase and then sort the dataframe on this column","5a15f3ac":"## 5. Ignore the index while sorting\n\nThe index column can also be ignored entirely while sorting the dataframe. This results in an index labeled from 0 to n-1 where n refers to the number of observations.\n\n","ad64b973":"## 4. Sorting by index\n\nAnother way of sorting a dataframe would be by its index. In section 1, we created a dataframe named forks. This is just another version of the original dataframe, which has been sorted on the `Forks` columns. The dataframe appears like this:","4ef63394":"## 1. Sorting on a single\u00a0column\nThe function used for sorting in pandas is called `DataFrame.sort_values()`. It is used to sort a DataFrame by its column or row values. Let's sort the dataset by the Forks column.","60de065e":"07\/14\/021: Updated for the latest version\n\n07\/08\/021: Updated for the latest version","64dced73":"Alternatively, you can sort the index in descending order by passing in the `ascending=False` the argument in the function above.\n"}}