{"cell_type":{"189498f1":"code","0b3c013e":"code","93b8d8dc":"code","f73925f8":"code","645656ff":"code","1a606a67":"code","cc6fb7e8":"code","354a2696":"code","7d4362f0":"code","d72a5629":"code","b28ccad6":"code","1fc031c9":"code","65fa2063":"code","17f2592e":"code","69e82cb0":"code","50f421e2":"code","81e0007a":"code","5962c6d7":"code","544c8c6b":"code","6aea0c7f":"code","0a43e9bf":"code","67a98dde":"code","3704a020":"code","f31b4619":"code","97d07224":"code","5ecb9bed":"code","d1ab235c":"code","9106ab63":"code","17d84980":"code","2780b663":"code","f9f481db":"code","ac74267a":"code","f6613786":"code","77b010c9":"code","7d337c48":"code","92e93b60":"code","078d0561":"code","309db166":"code","790b1feb":"code","03a4d02f":"code","96164037":"code","39dc8289":"code","a8a03b97":"code","ed70fc0b":"code","c262d62f":"code","3c18a4c8":"code","ad1b3800":"code","02f4768c":"code","2d966bcf":"code","c25c457b":"code","f675f688":"code","ea39fe58":"code","fae04aa8":"code","342b8bf6":"code","3bc64d71":"markdown","64263faf":"markdown","98cc2e6d":"markdown","e9d1a74a":"markdown","bde5847d":"markdown","50dda99b":"markdown","20450bad":"markdown","d9415a53":"markdown","3ab4853d":"markdown","73ad4677":"markdown","c4f1bad5":"markdown","039a4221":"markdown","c230f7c8":"markdown","bb21369c":"markdown","3905b20c":"markdown","e5d8d2c1":"markdown","570fe5b0":"markdown","3bee4310":"markdown","b3e9176b":"markdown","464ba8b1":"markdown","e1d56c0e":"markdown","1b32afb2":"markdown","881cde09":"markdown","03ba967b":"markdown","bddece98":"markdown","58fd0ef9":"markdown","5eb79025":"markdown","779950f9":"markdown","efba90cb":"markdown","7563a98d":"markdown","1cb92f65":"markdown","adb54d6b":"markdown","63977f15":"markdown","e6570233":"markdown","b00e2989":"markdown","4e92137a":"markdown","eee59677":"markdown","b721b64c":"markdown","f6e6a6c9":"markdown","cd101458":"markdown","464ee8ac":"markdown","c5b5c847":"markdown","0283483f":"markdown","14dcd9f9":"markdown","7761161a":"markdown","a4b87488":"markdown","517f5003":"markdown","33dfb151":"markdown","0ec318a8":"markdown","edadcde6":"markdown","93c6bdc0":"markdown","539ecd71":"markdown","0a77227d":"markdown","297d2424":"markdown","3f6a4b54":"markdown","b4058a24":"markdown","c3f3f13c":"markdown","f435a398":"markdown"},"source":{"189498f1":"from datetime import date\nimport os\n\nimport geopandas as gpd\nimport geoplot as gplt\nimport folium\nimport mapclassify\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.express as px\nimport re\nimport seaborn as sns\nfrom shapely.geometry import Point, Polygon\nfrom shapely.geometry import MultiPolygon\n\n","0b3c013e":"%matplotlib inline","93b8d8dc":"!ls ..\/input\/covid19s-impact-on-airport-traffic\/covid_impact_on_airport_traffic.csv","f73925f8":"covid_impact_on_airport_traffic = pd.read_csv(\"..\/input\/covid19s-impact-on-airport-traffic\/covid_impact_on_airport_traffic.csv\")","645656ff":"covid_impact_on_airport_traffic.head()","1a606a67":"covid_impact_on_airport_traffic.info()","cc6fb7e8":"covid_impact_on_airport_traffic[\"Date\"] = covid_impact_on_airport_traffic[\"Date\"].map(lambda x: date.fromisoformat(x))","354a2696":"covid_impact_on_airport_traffic[\"weekday\"] = covid_impact_on_airport_traffic[\"Date\"].map(lambda x: x.weekday())\nw_list = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\ncovid_impact_on_airport_traffic[\"weekday\"] = [w_list[idx] for idx in covid_impact_on_airport_traffic[\"weekday\"]]","7d4362f0":"def cut_long(point):\n    #point is like 'POINT(151.180087713813 -33.9459774986125)'\n    long, _ = point[6:-1].split(\" \")\n    return float(long)\n\ndef cut_lat(point):\n    #point is like 'POINT(151.180087713813 -33.9459774986125)'\n    _, lat = point[6:-1].split(\" \")\n    return float(lat)","d72a5629":"covid_impact_on_airport_traffic[\"long\"] = covid_impact_on_airport_traffic[\"Centroid\"].map(cut_long)\ncovid_impact_on_airport_traffic[\"lat\"] = covid_impact_on_airport_traffic[\"Centroid\"].map(cut_lat)","b28ccad6":"need_columns = [col for col in covid_impact_on_airport_traffic.columns if not col in [\"AggregationMethod\", \"Version\", \"Centroid\"]]\ncovid_impact_on_airport_traffic = covid_impact_on_airport_traffic[need_columns]","1fc031c9":"covid_impact_on_airport_traffic.head()","65fa2063":"covid_impact_on_airport_traffic_unique = covid_impact_on_airport_traffic[~covid_impact_on_airport_traffic[[\"AirportName\"]].duplicated()].reset_index(drop=True)\ncovid_impact_on_airport_traffic_unique","17f2592e":"df_geometry = covid_impact_on_airport_traffic_unique[['AirportName', 'City', 'State',\n                                                     'ISO_3166_2', 'Country', 'long', 'lat']]","69e82cb0":"def visualize_airport_map(df,  zoom):\n    \n    lat_map=30.038557\n    lon_map=31.231781\n    f = folium.Figure(width=1000, height=500)\n    m = folium.Map([lat_map,lon_map], zoom_start=zoom).add_to(f)\n        \n    for i in range(0,len(df)):\n        folium.Marker(location=[df[\"lat\"][i],df[\"long\"][i]],icon=folium.Icon(icon_color='white',icon ='plane',prefix='fa')).add_to(m)\n        \n    return m","50f421e2":"visualize_airport_map(covid_impact_on_airport_traffic_unique, 1)","81e0007a":"df_Country_count = pd.DataFrame(covid_impact_on_airport_traffic[\"Country\"].value_counts())\n#df_Country_count\ng = df_Country_count.plot.pie(y='Country', figsize=(7, 7))\ng.set_title(\"records for each country\")","5962c6d7":"plt.figure(figsize=(10, 5))\ng = sns.countplot(data=covid_impact_on_airport_traffic, x=\"AirportName\",\n              order = covid_impact_on_airport_traffic['AirportName'].value_counts().index)\ng.set_xticklabels(g.get_xticklabels(), rotation=90)\ng.set_title(\"records for each airport\")","544c8c6b":"df_month_count = pd.DataFrame(covid_impact_on_airport_traffic[\"Date\"].map(lambda d: d.month).value_counts())\ndf_month_count = df_month_count.reset_index()\ndf_month_count = df_month_count.rename(columns={\"Date\":\"count\", \"index\":\"month\"})\ng = sns.barplot(data=df_month_count.reset_index(), y=\"count\", x=\"month\")\ng.set_xticklabels(g.get_xticklabels(), rotation=90)\ng.set_title(\"records for each month\")","6aea0c7f":"df_weekday_count = pd.DataFrame(covid_impact_on_airport_traffic[\"weekday\"].value_counts())\ng = df_weekday_count.plot.pie(y='weekday', figsize=(7, 7))\ng.set_title(\"records for each weekday\")","0a43e9bf":"gdf = gpd.GeoDataFrame(covid_impact_on_airport_traffic_unique, \n                       geometry=gpd.points_from_xy(covid_impact_on_airport_traffic_unique.long, covid_impact_on_airport_traffic_unique.lat))","67a98dde":"gdf.head()","3704a020":"world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\nworld.head()","f31b4619":"g = world.plot(color='white', edgecolor='gray')\ng.set_title(\"example world map\")","97d07224":"ax = world.plot(color='white', edgecolor='gray', figsize=(15, 10))\ng = gdf.plot(ax=ax, marker='*', color='red', markersize=50)\ng.set_title(\"example world map with marker\")\nplt.show()","5ecb9bed":"fig, ax = plt.subplots(1, 1, figsize=(15, 10))\ndivider = make_axes_locatable(ax)\ncax = divider.append_axes(\"right\", size=\"5%\", pad=0.1)\n\nworld.plot(ax=ax, color='white', edgecolor='gray')\ng = gdf.plot(column='PercentOfBaseline', ax=ax, markersize=50, legend=True, cax=cax)\ng.set_title(\"example world map with \")\nplt.show()","d1ab235c":"df_airport_weekday_mean = covid_impact_on_airport_traffic[[\"AirportName\", \"weekday\", \"PercentOfBaseline\"]].groupby([\"AirportName\", \"weekday\"]).mean()\ndf_airport_weekday_mean = df_airport_weekday_mean.reset_index()\ndf_airport_weekday_mean = df_airport_weekday_mean.merge(df_geometry, on=\"AirportName\")","9106ab63":"df_airport_weekday_mean.head()","17d84980":"df_airport_weekday_mean_sun = df_airport_weekday_mean[df_airport_weekday_mean[\"weekday\"]==\"Sun\"]\ngdf_airport_weekday_mean_sun = gpd.GeoDataFrame(df_airport_weekday_mean_sun, \n                                                geometry=gpd.points_from_xy(df_airport_weekday_mean_sun.long, df_airport_weekday_mean_sun.lat))","2780b663":"fig, ax = plt.subplots(1, 1, figsize=(15, 10))\ndivider = make_axes_locatable(ax)\ncax = divider.append_axes(\"right\", size=\"5%\", pad=0.1)\n\nworld.plot(ax=ax, color='white', edgecolor='gray')\ngdf_airport_weekday_mean_sun.plot(column='PercentOfBaseline', ax=ax, markersize=50, legend=True, cax=cax)\nplt.show()","f9f481db":"df_airport_weekday_mean_wed = df_airport_weekday_mean[df_airport_weekday_mean[\"weekday\"]==\"Wed\"]\ngdf_airport_weekday_mean_wed = gpd.GeoDataFrame(df_airport_weekday_mean_wed, \n                                                geometry=gpd.points_from_xy(df_airport_weekday_mean_wed.long, df_airport_weekday_mean_wed.lat))\n\nfig, ax = plt.subplots(1, 1, figsize=(15, 10))\ndivider = make_axes_locatable(ax)\ncax = divider.append_axes(\"right\", size=\"5%\", pad=0.1)\n\nworld.plot(ax=ax, color='white', edgecolor='gray')\ngdf_airport_weekday_mean_wed.plot(column='PercentOfBaseline', ax=ax, markersize=50, legend=True, cax=cax)\nplt.show()","ac74267a":"df_airport_date_mean = covid_impact_on_airport_traffic[[\"AirportName\", \"Date\", \"PercentOfBaseline\"]]\ndf_airport_date_mean[\"Date\"] = df_airport_date_mean[\"Date\"].map(lambda d: d.month)\ndf_airport_date_mean = df_airport_date_mean.groupby([\"AirportName\", \"Date\"]).mean()\ndf_airport_date_mean = df_airport_date_mean.reset_index()\ndf_airport_date_mean = df_airport_date_mean.merge(df_geometry, on=\"AirportName\")\ndf_airport_date_mean = df_airport_date_mean.rename(columns={\"Date\": \"month\"})","f6613786":"df_airport_date_mean_3 = df_airport_date_mean[df_airport_date_mean[\"month\"]==3]\ndf_airport_date_mean_3 = gpd.GeoDataFrame(df_airport_date_mean_3, \n                                                geometry=gpd.points_from_xy(df_airport_date_mean_3.long, df_airport_date_mean_3.lat))\n\nfig, ax = plt.subplots(1, 1, figsize=(15, 10))\ndivider = make_axes_locatable(ax)\ncax = divider.append_axes(\"right\", size=\"5%\", pad=0.1)\n\nworld.plot(ax=ax, color='white', edgecolor='gray')\ng = df_airport_date_mean_3.plot(column='PercentOfBaseline', ax=ax, markersize=50, legend=True, cax=cax)\ng.set_title(\"PercentOfBaseline of May\")\nplt.show()","77b010c9":"df_airport_date_mean_4 = df_airport_date_mean[df_airport_date_mean[\"month\"]==4]\ndf_airport_date_mean_4 = gpd.GeoDataFrame(df_airport_date_mean_4, \n                                                geometry=gpd.points_from_xy(df_airport_date_mean_4.long, df_airport_date_mean_4.lat))\n\nfig, ax = plt.subplots(1, 1, figsize=(15, 10))\ndivider = make_axes_locatable(ax)\ncax = divider.append_axes(\"right\", size=\"5%\", pad=0.1)\n\nworld.plot(ax=ax, color='white', edgecolor='gray')\ng = df_airport_date_mean_4.plot(column='PercentOfBaseline', ax=ax, markersize=50, legend=True, cax=cax)\ng.set_title(\"PercentOfBaseline of April\")\nplt.show()","7d337c48":"df_airport_date_mean_5 = df_airport_date_mean[df_airport_date_mean[\"month\"]==5]\ndf_airport_date_mean_5 = gpd.GeoDataFrame(df_airport_date_mean_5, \n                                                geometry=gpd.points_from_xy(df_airport_date_mean_5.long, df_airport_date_mean_5.lat))\n\nfig, ax = plt.subplots(1, 1, figsize=(15, 10))\ndivider = make_axes_locatable(ax)\ncax = divider.append_axes(\"right\", size=\"5%\", pad=0.1)\n\nworld.plot(ax=ax, color='white', edgecolor='gray')\ng = df_airport_date_mean_5.plot(column='PercentOfBaseline', ax=ax, markersize=50, legend=True, cax=cax)\ng.set_title(\"PercentOfBaseline of May\")\nplt.show()","92e93b60":"df_airport_date_mean_6 = df_airport_date_mean[df_airport_date_mean[\"month\"]==6]\ndf_airport_date_mean_6 = gpd.GeoDataFrame(df_airport_date_mean_6, \n                                                geometry=gpd.points_from_xy(df_airport_date_mean_6.long, df_airport_date_mean_6.lat))\n\nfig, ax = plt.subplots(1, 1, figsize=(15, 10))\ndivider = make_axes_locatable(ax)\ncax = divider.append_axes(\"right\", size=\"5%\", pad=0.1)\n\nworld.plot(ax=ax, color='white', edgecolor='gray')\ng = df_airport_date_mean_6.plot(column='PercentOfBaseline', ax=ax, markersize=50, legend=True, cax=cax)\ng.set_title(\"PercentOfBaseline of June\")\nplt.show()","078d0561":"df_airport_date_mean_7 = df_airport_date_mean[df_airport_date_mean[\"month\"]==7]\ndf_airport_date_mean_7 = gpd.GeoDataFrame(df_airport_date_mean_7, \n                                                geometry=gpd.points_from_xy(df_airport_date_mean_7.long, df_airport_date_mean_7.lat))\n\nfig, ax = plt.subplots(1, 1, figsize=(15, 10))\ndivider = make_axes_locatable(ax)\ncax = divider.append_axes(\"right\", size=\"5%\", pad=0.1)\n\nworld.plot(ax=ax, color='white', edgecolor='gray')\ng = df_airport_date_mean_7.plot(column='PercentOfBaseline', ax=ax, markersize=50, legend=True, cax=cax)\ng.set_title(\"PercentOfBaseline of July\")\nplt.show()","309db166":"df_airport_date_mean_8 = df_airport_date_mean[df_airport_date_mean[\"month\"]==8]\ndf_airport_date_mean_8 = gpd.GeoDataFrame(df_airport_date_mean_8, \n                                                geometry=gpd.points_from_xy(df_airport_date_mean_8.long, df_airport_date_mean_8.lat))\n\nfig, ax = plt.subplots(1, 1, figsize=(15, 10))\ndivider = make_axes_locatable(ax)\ncax = divider.append_axes(\"right\", size=\"5%\", pad=0.1)\n\nworld.plot(ax=ax, color='white', edgecolor='gray')\ng = df_airport_date_mean_8.plot(column='PercentOfBaseline', ax=ax, markersize=50, legend=True, cax=cax)\ng.set_title(\"PercentOfBaseline of August\")\nplt.show()","790b1feb":"df_airport_date_all_mean = covid_impact_on_airport_traffic.groupby([\"AirportName\"]).mean()\ndf_airport_date_all_mean = df_airport_date_all_mean.reset_index()","03a4d02f":"df_airport_date_all_mean.head()","96164037":"fig = px.scatter_mapbox(df_airport_date_all_mean,\n                        lat=\"lat\",\n                        lon=\"long\",\n                        hover_name=\"AirportName\",\n                        hover_data=[\"PercentOfBaseline\"],\n                        color=\"PercentOfBaseline\",\n                        zoom=1,\n                        height=600,\n                        size=\"PercentOfBaseline\",\n                        size_max=30,\n                        opacity=0.4,\n                        width=1300)\nfig.update_layout(mapbox_style='stamen-terrain')\nfig.update_layout(margin={\"r\": 0, \"t\": 0, \"l\": 0, \"b\": 0})\nfig.update_layout(title_text=\"Mean of trafic on sunday\")\nfig.show()","39dc8289":"fig = px.scatter_mapbox(df_airport_date_all_mean,\n                        lat=\"lat\",\n                        lon=\"long\",\n                        hover_name=\"AirportName\",\n                        hover_data=[\"PercentOfBaseline\"],\n                        color=\"PercentOfBaseline\",\n                        zoom=1,\n                        height=600,\n                        size=\"PercentOfBaseline\",\n                        size_max=30,\n                        opacity=0.4,\n                        width=1300)\nfig.update_layout(mapbox_style='carto-positron')\nfig.update_layout(margin={\"r\": 0, \"t\": 0, \"l\": 0, \"b\": 0})\nfig.update_layout(title_text=\"Mean of trafic on sunday\")\nfig.show()","a8a03b97":"gdf = gdf[[col for col in gdf.columns if col not in [\"geometry\"]]]\ngdf = gdf.rename(columns={'Geography': 'geometry'})","ed70fc0b":"def polygon_str2polygon(polygon_str):\n    coodinates = re.split(\"[, ]\", polygon_str[9:-2])\n    coodinates = [float(item) for item in coodinates if item != \"\"]\n    return Polygon([coodinates[i:i+2] for i in range(0,len(coodinates),2)])\n    \ngdf[\"geometry\"] = gdf[\"geometry\"].map(polygon_str2polygon)","c262d62f":"gdf_newyork = gdf[gdf[\"City\"].isin([\"New York\"])]\ngdf_newyork = gpd.GeoDataFrame(gdf_newyork)\ngdf_newyork","3c18a4c8":"gdf_newyork.iloc[0][\"geometry\"]","ad1b3800":"gdf_newyork.iloc[1][\"geometry\"]","02f4768c":"contiguous_usa = gpd.read_file(gplt.datasets.get_path('contiguous_usa'))\nnewyork_shape = contiguous_usa[contiguous_usa[\"state\"].isin([\"New York\"])]\nnewyork_shape","2d966bcf":"g = newyork_shape.plot(color='white', edgecolor='gray')\ng.set_title(\"New York\")","c25c457b":"gpd_per_person = gdf_newyork[\"PercentOfBaseline\"]\nscheme = mapclassify.Quantiles(gpd_per_person, k=5)\n\nbase1 = gplt.choropleth(\n    gdf_newyork, #ax=base,\n    hue=gpd_per_person, scheme=scheme,\n    cmap='inferno_r', legend=True, figsize=(12, 12)\n)\n\ngplt.polyplot(\n    newyork_shape, ax=base1,\n    edgecolor='white',\n    facecolor='lightgray',\n    figsize=(12, 12)\n)","f675f688":"gpd_per_person = gdf_newyork[\"PercentOfBaseline\"]\nscheme = mapclassify.Quantiles(gpd_per_person, k=5)\n\nbase2 = gplt.polyplot(\n    newyork_shape,\n    edgecolor='white',\n    facecolor='lightgray',\n    figsize=(12, 12)\n)\ngplt.choropleth(\n    gdf_newyork, ax=base2,\n    hue=gpd_per_person, scheme=scheme,\n    cmap='inferno_r', legend=True, figsize=(12, 12)\n)","ea39fe58":"def create_point_geom(data):\n    x = data[0]\n    y = data[1]\n    point = Point(x, y)\n    return point","fae04aa8":"gdf[\"geometry\"] = gdf[[\"long\", \"lat\"]].apply(create_point_geom, axis=1)","342b8bf6":"ax = gplt.pointplot(\n    gpd.GeoDataFrame(gdf),\n    legend_kwargs={'orientation': 'horizontal'}, scale='PercentOfBaseline',limits=(5, 10),\n    hue='PercentOfBaseline', legend=True, figsize=(15, 15)\n)\ngplt.polyplot(\n    world, ax=ax, \n    edgecolor='None', facecolor='lightgray'\n)","3bc64d71":"If we use \"carto-positron\" for mapbox_style, we can create more simple geographical visualization.","64263faf":"Just like the map above, we were able to plot the location of the airport.\n\nWhen we use plot(), if we pass column argment to it, we can easily create choropleth like maps. Of couase, add legend, we have to be a little more creative, though, as shown below.","98cc2e6d":"<a id=\"9\"><\/a> <br>\n## <div class=\"alert alert-block alert-success\">Plot with pointplot of geoplot<\/div>\n\nwe can also plot pointplot by geoplot. We have to pass geopandas dataframe which has Point instance for geometry column.","e9d1a74a":"<a id=\"3\"><\/a> <br>\n# <div class=\"alert alert-block alert-info\">Data overview<\/div>","bde5847d":"Finally, check the weekday rates. If you look at the pie chart, you can see that it is roughly the same","50dda99b":"I'll find out where the airport is located. With folium, we can check the location on interactive map.","20450bad":"Newark Liberty International Airport is the highest, and Kingsford Smith Airport is the lowest.","d9415a53":"Newark Liberty International Airport is the highest, and Santiago International Airport is the lowest.","3ab4853d":"For another example of scatter_mapbox function of Plotly express, you can cehck [Analyzing Geospatial Environmental Data using Plotly Express and GeoPandas](https:\/\/medium.com\/analytics-vidhya\/analyzing-geospatial-enviromental-data-using-plotly-and-geopandas-c568eba96ac6).","73ad4677":"Most of them are also in North America. In particular, The U.S. accounted for more than half of the total.\n\nLet's also count the number of records per airport. The number of records at each airport is roughly the same.","c4f1bad5":"## Summary\n\n- I ploted and checked the airport location with folium.\n\n- I explained how to display the world map and how to plot the data using GeoPandas.\n\n- I create plots of the data on a world map by weekday and month using GeoPandas.\n\n- I explained how to use scatter_mapbox of Plotly, and create plot for mean of all traffic data by each airports..\n\n## Motivation\n\nCOVID-19 must have a major impact on the use of air traffic. In this notebook, I tried to explore the given air traffic data and check the impact using geospacial visualization tools. \n\nI think that few users are very familiar with how to visualize and analyze geographic data even in the kaggle community. In this notebook, I use GeoPandas and Ploty for analysis and Visualization. By GeoPandas, we can create simple and easy to use geograpycal plots. And by Plotly, we can create an interactive and engaging plots.  Those who reading this note have probably at one time wished you had these tools at your disposal to create the plot you had in mind. Or maybe you will. I'm hoping this notebook will help us with how to use it.","039a4221":"And I'll create \"weekday\" columns. date.weekday() returns 0 for Monday and 6 for Sunday.\n\nWith list of Weekday string, we can get weekday columns which has each weekday string.","c230f7c8":"Winnipeg International Airport is the highest, and Santiago International Airport is the lowest.","bb21369c":"Let's take a look at the data for New York.","3905b20c":"Most of them are in North America.\n\nAlso you can easily look up the name and geographic information of the area where the airport is located.\n\nLet's check out the pie chart to see how many records there are for each country.","e5d8d2c1":"Next, I'll check given data.\n\nThere are one csv file.","570fe5b0":"There are no null data.","3bee4310":"I'll filter by month and visualize with geopandas.","b3e9176b":"We can find that Hamilton International Airport has highest, and Santiago International Airport is the lowest. Unlike geopandas plots, this is an interactive plot, so we can also hover the cursor over a point to get a specific value.","464ba8b1":"For example, we can visualize the following","e1d56c0e":"<div class=\"alert alert-block alert-warning\">\u2191too little...<\/div>\n","1b32afb2":"<a id=\"7\"><\/a> <br>\n# <div class=\"alert alert-block alert-warning\">Appendix<\/div>\n\nAs a reference for visualization of geographic data, I have also included a visualization method using geoplot. I will organize this notebook to make them a bit more clear in a later release.","881cde09":"<a id=\"6\"><\/a> <br>\n# <div class=\"alert alert-block alert-info\">Visualization with plotly<\/div> \n\nUsing scatter_mapbox function of Plotly express, we can also easily create interactive geographic plots.\n\nSo far, we have looked at detailed data by month and weekday, but here, for reasons to be discussed later, let's visualize the total data by airport name.","03ba967b":"Now, we can overwrite the data on world map like following,","bddece98":"Winnipeg International Airport is the highest, and Santiago International Airport is the lowest.","58fd0ef9":"To better visualization, I'll preprocess the data.\n\nFirst, I'll change data of \"Date\" column to date type. ","5eb79025":"# Airport Traffic Visualization geopandas & Plotly\u2708\n\n## **Release info**\n* Version1: visualize data by getpandas\n* Version2: Added visualization by Plotly express\n* Version3: Added a way to draw the shape of New York State's airports on a map.\n\n## **Content**\n1. [Data and library loading](#1)\n1. [Preprocessing](#2)\n1. [Data overview](#3)\n1. [How to visualization with geopandas?](#4)\n1. [Visualization with geopandas](#5)\n   - Average per weekday\n   - Average per month\n1. [Visualization with plotly](#6) \n1. [Appendix](#7)\n   - [How to draw airports shape on map](#8)\n   - [Plot with pointplot of geoplot](#9)","779950f9":"Following to Data discription page, there are 11 columns.\n\n- AggregationMethod: Aggregation period used to compute this metric\n\n- Date: Date Traffic volume measured, in format YYYY-MM-DD.\n\n- Version: Version of this dataset\n\n- AirportName: Name of airport\n\n- PercentOfBaseline: Proportion of trips on this date as compared to Avg number of trips on the same day of week in baseline period i.e 1st February 2020 - 15th March 2020\n\n- Centroid: Geography representing centroid of the Airport polygon\n\n- City: City within which the Airport is located\n\n- State: State within which the Airport is located\n\n- ISO_3166_2: ISO-3166-2 code representing Country and Subdivision\n\n- Country: Country within which the Airport is located\n\n- Geography: Polygon of the Airport that is used to compute this metric","efba90cb":"covid_impact_on_airport_traffic_unique was a dataframe that I created appropriately so that the airport's information would be unique. So the map doesn't mean much.\n\nNext, let's try to visualize it with meaningful data.","7563a98d":"First, I'll load libraries.","1cb92f65":"The map can also be reversed by swapping the plots passed to ax.","adb54d6b":"<a id=\"5\"><\/a> <br>\n# <div class=\"alert alert-block alert-info\">Visualization with geopandas<\/div>\n\n## Average per weekday\n\nFirst, I'll average \"PercentOfBaseline\" across specified weekday.\n\nThe airport and day of the week are used as a composite key, averaged and combined with geographic data to create data to be visualized.","63977f15":"Next, geometry dataframe which key is airport name.","e6570233":"<a id=\"2\"><\/a> <br>\n# <div class=\"alert alert-block alert-info\">Preprocessing<\/div>","b00e2989":"In addition, I'll create a supplementary data frame.\n\nFirst, a data frame that makes the airport name unique. We can easily see data for each airport. and I'll use it later when we plot it with folium. ","4e92137a":"I wanted to plot Poligon data in \"Geography\" column, so I tried.\n\nIn order to plot by geoplot, we will change the column name and also convert data from a string to a polygon instance.","eee59677":"We can find that Daniel K. Inouye International Airport in Hawaii is the highest, and Santiago International Airport is the lowest. \n\nUsing the same method, I'll plot them in April and beyond.","b721b64c":"Let's plot!","f6e6a6c9":"We will also get a map of New York State that will serve as a background for depicting the two shapes above.","cd101458":"Drop unnecessary columns.","464ee8ac":"With plot(), we can plot the map.","c5b5c847":"Winnipeg International Airport is the highest, and Santiago International Airport is the lowest.","0283483f":"Now let's draw shapes of airports over the state of New York.","14dcd9f9":"On Sunday, Hawaii's PercentOfBaseline is the highest, but on Wednesday, Winnipeg's value is the highest.\n\nI don't know if it makes sense to look at averages for all weekdays, so I'll just leave it at that. If you have interest, please fork and try.","7761161a":"<a id=\"4\"><\/a> <br>\n# <div class=\"alert alert-block alert-info\">How to visualization with geopandas?<\/div>","a4b87488":"Next, I'll plot data to world map by geopandas.\n\nFor mapping with geopandas, [this page](https:\/\/geopandas.org\/mapping.html) is helpful.","517f5003":"And get world map with datasets.get_path(). By this, we can get GeoDataFrame which includes world map data.","33dfb151":"And also I'll extract only on Wednesday's data , create GeoDataFrame and plot.","0ec318a8":"At first glance, Plotly looks better, but\u3000I also found out that it's not all good.\n\nFor example, if you create a large number of plots, some plots will become impossible to display. In this theme, we want to visualize geographic data in a time series. Therefore, we need to display a large number of plots.\n\nAlso, if you plot a large amount of data, it will take a long time to load when you save and view it from a browser.\n\nBut scatter_mapbox is very useful and powerful function for geographical visualization. I don't think there are many ways to display geographic data in such an interactive and attractive way, even among kagglers. We should use it actively. ","edadcde6":"By specifying lat and lon, we can specify the position of the markers, and by specifying color and size, we can change the color and size of the marker to match the size of the data. Also, by setting mapbox_style to 'stimen-terrain', it is possible to depict data on a map that shows geographic features in color.","93c6bdc0":"Next, I'll create Latitude and longitude columns. Centroid column has Latitude and longitude data as Point object, but it seems to be string. So, I'll cut out Latitude and longitude.","539ecd71":"<a id=\"1\"><\/a> <br>\n# <div class=\"alert alert-block alert-info\">Data and library loading<\/div>","0a77227d":"<a id=\"8\"><\/a> <br>\n## <div class=\"alert alert-block alert-success\">How to draw airports shape on map<\/div>","297d2424":"We can view the shape of polygon instances.","3f6a4b54":"## Average per month\n\nI also try to plot on specific month.\n\nJust like the weekdays, I now create a table with the airport name and the month as a compound key.","b4058a24":"I'll extract only on Sunday's data and create GeoDataFrame.","c3f3f13c":"Let's also count the number of records per month. The numbers of records between April to September are roughly the same, but March and October are less.","f435a398":"First, I'll create GeoDataFrame. When create, we can create a column of Point instances by specifying \"geometry\" argument."}}