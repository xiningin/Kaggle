{"cell_type":{"dcac65b2":"code","89645717":"code","e85c7d59":"code","0e242642":"code","7711982c":"code","ad12feac":"code","06324529":"code","729d5061":"code","4b568ceb":"code","64112c13":"code","94bbc708":"code","3ef8771a":"markdown","b6a8469e":"markdown","948471e2":"markdown","b07f8d39":"markdown","fc13b385":"markdown","26a61e32":"markdown","c607e60b":"markdown","d5a3200a":"markdown"},"source":{"dcac65b2":"import tensorflow as tf\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimage\nimport numpy as np\n\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.applications.vgg16 import VGG16","89645717":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e85c7d59":"\ndataset_url = '\/kaggle\/input\/rockpaperscissors\/rps-cv-images'\nrock_url = 'rock'\npaper_url ='paper'\nscissors_url = 'scissors'\n\nrock_results= os.listdir(os.path.join(dataset_url,rock_url))\npaper_results = os.listdir(os.path.join(dataset_url,paper_url))\nscissors_results = os.listdir(os.path.join(dataset_url,scissors_url))\n","0e242642":"\nprint('Terdapat :', len(rock_results), 'Gambar Batu dalam Dataset')\nprint('Terdapat :', len(paper_results), 'Gambar Kertas dalam Dataset')\nprint('Terdapat :', len(scissors_results), 'Gambar Gunting dalam Dataset')","7711982c":"data_index = 100\n\nnext_rock = [os.path.join(dataset_url, rock_url, fname) \n                for fname in rock_results[data_index-1:data_index]]\nnext_paper = [os.path.join(dataset_url, paper_url, fname) \n                for fname in paper_results[data_index-1:data_index]]\nnext_scissors = [os.path.join(dataset_url, scissors_url, fname) \n                for fname in scissors_results[data_index-1:data_index]]\n\narray,f = plt.subplots(1,3, figsize=(15,10))\nfor iter, img_path in enumerate(next_rock+next_paper+next_scissors):\n    pict = mpimage.imread(img_path)\n    array[iter].imshow(pict)\n    array[iter].axis('Off')\nplt.show()","ad12feac":"image_gen     = ImageDataGenerator(validation_split=0.2,\n                                  rescale = 1.\/255,\n                                  rotation_range=20,\n                                  width_shift_range=0.2,\n                                  height_shift_range=0.2,\n                                  shear_range=0.2,\n                                  zoom_range=0.2,\n                                  horizontal_flip=True,\n                                  vertical_flip = True\n                                  )\ntrain_data_gen = image_gen.flow_from_directory(dataset_url,\n                                              target_size=(224,224),\n                                              class_mode='categorical',\n                                              batch_size=32,\n                                              shuffle=True,\n                                              subset='training'\n                                               )\n\nvalidation_data_gen = image_gen.flow_from_directory(dataset_url,\n                                                    target_size=(224,224),\n                                                    class_mode='categorical',\n                                                    batch_size=32,\n                                                    shuffle=False,\n                                                    subset='validation'\n                                                    )","06324529":"basic_cls = VGG16(weights='imagenet',include_top=False,input_shape=(224,224,3))\nbasic_cls.trainable = False\n\ncls = tf.keras.models.Sequential([\n    basic_cls,\n    tf.keras.layers.GlobalAveragePooling2D(),\n    tf.keras.layers.Dense(512, activation='relu'),\n    tf.keras.layers.Dropout(0.5), #untuk mengurangi overfitting\n    tf.keras.layers.Dense(3, activation='softmax')\n])\n\ncls.summary()","729d5061":"cls.compile(loss = 'categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","4b568ceb":"model_history = cls.fit_generator(\n    train_data_gen,  \n    validation_data  = validation_data_gen,\n    epochs = 10, \n    verbose = 1\n)","64112c13":"get_acc = model_history.history['accuracy']\nvalue_acc = model_history.history['val_accuracy']\nget_loss = model_history.history['loss']\nvalue_loss = model_history.history['val_loss']\n\nepochs = range(len(get_acc))\nplt.plot(epochs, get_acc, 'r', label='Accuracy of Training data')\nplt.plot(epochs, value_acc, 'b', label='Accuracy of Validation data')\nplt.title('Training vs validation accuracy')\nplt.legend(loc=0)\nplt.figure()\n\n\nplt.show()","94bbc708":"\nimport keras\nfrom google.colab import files\nfrom keras.preprocessing import image\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom keras.utils.np_utils import to_categorical\n%matplotlib inline\n\nget_upload = files.upload()\n\nfor iter_up in get_upload.keys():\n\n  #Mari lakukan prediksi terhadap gambar\n  path = iter_up\n  pic = image.load_img(path, target_size=(150,150))\n  imgplot = plt.imshow(pic)\n  x = image.img_to_array(pic)\n  x = np.expand_dims(x, axis=0)\n\n  images = np.vstack([x])\n  classes = cls.predict(images, batch_size=10)\n  y_classes = int(classes.argmax(axis=-1))\n  print(\"Masuk dalam Class \", y_classes,\", yaitu : \")\n  if (y_classes==0):\n    print(\"---Kertas---\")\n  elif (y_classes==1):\n    print(\"---Batu---\")\n  elif (y_classes==2):\n    print(\"---Gunting---\")\n    \n  print(iter_up)\n  ","3ef8771a":"## Extract Dataset","b6a8469e":"## Download Dataset dan simpan dalam folder Home","948471e2":"# TESTING DENGAN UPLOAD GAMBAR KITA SENDIRI.","b07f8d39":" * Dapat dilihat bahwa model yang kita buat Menghasilkan akurasi hingga 0.98","fc13b385":"## Buat sebuah model (classification)","26a61e32":"## Kita compile Model yang telah kita buat ","c607e60b":"## Import seluruh library yang dibutuhkan","d5a3200a":"## Tampilkan Total Dataset untuk setiap classnya"}}