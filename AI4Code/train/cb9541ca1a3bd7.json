{"cell_type":{"c9d2da79":"code","1a0b61da":"code","1c0b8d14":"code","be4dc95a":"code","0533b2fc":"code","c2bccd11":"code","6d38c7ef":"code","1f2914a6":"code","6de819c6":"code","a2bad4a3":"code","f2b51b6a":"code","e1d2d5e5":"code","0b886e76":"code","17d046fe":"code","c392d637":"code","324a9488":"code","275d31af":"code","f71da126":"code","6e3191cc":"code","40f26ba5":"code","64b28e09":"markdown","63ff51ee":"markdown","c2cbdf20":"markdown","a103c825":"markdown","6d83d60f":"markdown","6afeffa0":"markdown","f8d4cd84":"markdown","104dcf53":"markdown","252d41b4":"markdown","b1ecb80a":"markdown","8f6e345b":"markdown","f0f3cd65":"markdown","e0b81841":"markdown","3b6a1a01":"markdown","6b39d314":"markdown","e8060aff":"markdown","cb581a7a":"markdown","e952b037":"markdown","5f1df1f7":"markdown","eab35556":"markdown","a238ea1f":"markdown","ba6281da":"markdown","a6ac3284":"markdown","f87f8774":"markdown","b5e39379":"markdown","921e01e7":"markdown","ec3fd394":"markdown","19e5fc01":"markdown"},"source":{"c9d2da79":"import warnings\nwarnings.filterwarnings('ignore')","1a0b61da":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib as mpl\nfrom matplotlib import pyplot as plt","1c0b8d14":"%matplotlib inline","be4dc95a":"df_iris = sns.load_dataset('iris')\ndf_iris.head()","0533b2fc":"sns.set_style('dark')","c2bccd11":"sns.relplot(x='sepal_length', y='sepal_width', data=df_iris)","6d38c7ef":"df_iris['species'].unique()","1f2914a6":"sns.relplot(x='sepal_length', y='sepal_width', data=df_iris, hue='species'); # hint: semicolon","6de819c6":"sns.set_style('whitegrid')","a2bad4a3":"fmri = sns.load_dataset(\"fmri\")\nfmri.head()","f2b51b6a":"fmri.region.unique()","e1d2d5e5":"sns.relplot(x='timepoint', y='signal', data=fmri, hue='region', kind='line', height=10);","0b886e76":"sns.lineplot(x='timepoint', y='signal', data=fmri, hue='region') # No height parameter because it's too big\nplt.legend(bbox_to_anchor=(1, 1), loc=2);","17d046fe":"plt.rcParams[\"figure.figsize\"] = (15,9) #(width, height)","c392d637":"sns.catplot(kind='box', data=df_iris);","324a9488":"sns.barplot(x='species', y='petal_width', data=df_iris)\n\nplt.title('Average Petal Width of Irises')","275d31af":"sns.countplot(x='petal_width', data=df_iris)\n\nplt.title('Petal Width Distribution');","f71da126":"sns.set_style('whitegrid')\nsns.distplot(df_iris['sepal_length'], kde=True);","6e3191cc":"sns.barplot(x='species', y='petal_width', data=df_iris)\nsns.despine() # This must be run after creating chart","40f26ba5":"sns.set_palette(sns.color_palette('colorblind'))\nsns.barplot(x='species', y='petal_width', data=df_iris)","64b28e09":"Here we have length and width measurements for the petals and sepals (those green, leaf-like bits near the base of the flower head), along with the species they belong to. But we don't want to spend our time looking at the entire table, do we? We will need to represent this information in a way that makes it easy to understand, at a glance.","63ff51ee":"Notice the shaded regions for each line. These are confidence intervals, which mean that the true value (signal) on each timepoint would be within the range of the shaded area. This happens when you have multiple measurements for the same timepoint, which seaborn automatically aggregates.\n\nWe can also create line plots by directly using `sns.lineplot` with the same parameters (except `kind`). And since seaborn plots are also matplotlib plots, we can also tweak them with matplotlib (in this example, the legend for this chart is moved up to the top right corner)","c2cbdf20":"## Load Dataset\n\nWe will now play the role of a botanist studying flowers. There are three related flowers we want to examine and classify. Sadly, we are too lazy :)\n\nWe would have to travel everywhere, collect individual specimes, write down each measurement we make, all while making sure we don't make any mistakes. Fortunately, there are people who have already done that for us, gathering measurements for all specimens of those three flower varieties into a single dataset called the Iris Dataset. Let's first open that up so we can start looking at the data.","a103c825":"Now we can see that the iris setosa is the most distinguishable of the three irises, while the versicolor and virginica are hard to tell from petal and sepal measurements alone.","6d83d60f":"### 2. Plot Categorical Data\n\nThese types of plots look at the characteristics of discrete\/categorical variables. We will cover two common types of categorical plots:\n\n- Strip Plot\n- Swarm Plot (kind='swarm')\n- <b style=\"color:green;\">Box Plot (kind='box')<\/b>\n- Violin Plot (kind='violin')\n- Boxen Plot (kind='boxen')\n- Point Plot (kind='point')\n- <b style=\"color:green;\">Bar Plot (kind='bar')<\/b>\n- <b style=\"color:green;\">Count Plot (kind='count')<\/b>","6afeffa0":"### Scatter Plot\n\nLet's begin by looking at the relationship between sepal length and sepal width.","f8d4cd84":"### Matplotlib Inline Settings\nThis ensures that our charts will be rendered properly in our notebook","104dcf53":"### 1. Plot Statistical Relationship Data (relplot)\n\nThis type of plot is used to see how two variables are related to each other. There are two kinds of plots in this category:\n\n- <b style=\"color:green;\">Scatter Plot (kind='scatter'; default)<\/b>\n\nData in a scatter plot is represented as points on a grid, with their X and Y points being the values of their attributes. Because only two points are used, we can only look at the relationship between two variables at a time.\n\n- <b style=\"color:green;\">Line Plot (kind='line')<\/b>\n\nLine plots are usually used when we need to know the relationship of data to time. We can track changes over a certain interval with this kind of plot.","252d41b4":"### 3. Plot Distribution of Data\n\nThis type of plot is used to look at the distribution or spread of continuous values of data.\n\n- <b style=\"color:green;\">Dist Plot<\/b>\n- <b style=\"color:green;\">KDE Plot<\/b>\n- Joint Plot\n- Pair Plot","b1ecb80a":"### Count Plot\n\nThis plot can be used to count the frequency of categorical values. For instance, you could get the number of users of an app by region. But for this example, we will use the petal width from the Iris dataset.","8f6e345b":"### Box Plot\n\nThis plot shows several statistical properties of the data. There are five components in a box plot:\n\n1. Minimum: The lowest data point exlcuding any outliers, with the threshold usually defined as $$Q_1 - 1.5 \\times IQR$$\n\n2. Maximum: The highest data point exlcuding any outliers, with the threshold usually defined as $$Q_3 + 1.5 \\times IQR$$\n\n3. Median: The middle value of the dataset\n\n4. First quartile (Q<sub>1<\/sub>): The median of the lower half of the dataset\n\n5. Third quartile (Q<sub>3<\/sub>): The median of the upper half of the dataset\n\nInterquartile range (IQR) is defined as the difference between the third and first quartiles (Q<sub>3<\/sub> - Q<sub>1<\/sub>)\n\n![image.png](attachment:image.png)","f0f3cd65":"### sns.set_palette()\n\nYou can even use a palette that's more colorblind-friendly using `sns.set_palette(sns.color_palette('colorblind'))`\nOther built-in palettes include `deep`, `muted`, `pastel`, `bright`, `dark`, and `colorblind`\nSimply change the string parameter you provide to `color_palette` to use them","e0b81841":"# Seaborn\n\nSeaborn is a Python data visualization library built on top of Matplotlib. It allows us to quickly create figures and charts without having to worry too much about the nitty gritty details of Matplotlib.","3b6a1a01":"## Import Packages","6b39d314":"## Seaborn Plot Examples\n\nThere are various types of plots you can make in Seaborn, depending on what you want to convey.","e8060aff":"### Dist Plot\n\nThis chart is essentially a histogram, which displays an approximation of the distribution of the data by putting data points into several bins or intervals.\n\nThe Kernel Density Estimation (KDE) is a similar type of chart, and could be considered a smoothed version of the histogram.\n\nHistograms and KDE plots can be overlaid on a single chart using distplot with the kde parameter set to True.","cb581a7a":"### Line Plot\n\nLet's take a look at another dataset we will use, this time for line plots.","e952b037":"You can also resize charts individually through matplotlib, just add this line before creating your chart\n\n```py\nplt.figure(figsize=(15, 9))\n```","5f1df1f7":"## Setting Seaborn Style\n\nThis is for telling Seaborn what kind of design or theme we want to use (we can also provide our own custom designs or just use their default theme)\n\nOptions: {`dict`, `None`, or one of {`'darkgrid'`, `'whitegrid'`, `'dark'`, `'white'`, `'ticks'`}}\n\nFor the purposes of the tutorial, we will stick to Seaborn's default themes","eab35556":"Okay, this looks like a time series dataset, with two variables which will be used in generating the line plot, timepoint and signal.","a238ea1f":"Let's plot for both types of regions on the same chart.","ba6281da":"# Ignore Warnings\nFirst, let's hide warnings to keep things tidy. While they are useful in certain situations, they are unnecessary for the purposes of this workshop.","a6ac3284":"### Bar plot\n\nUnlike the count plot, the bar length represents the magnitude or aggregate of magnitudes of a related variable.","f87f8774":"If you need to figure out other parameters that can be tweaked for each chart or find out more about what you can do in Seaborn, this [API reference](https:\/\/seaborn.pydata.org\/api.html) will be helpful.\n\n# Now on to the challenge!","b5e39379":"### Resizing Plot Display (assign default value)\n\nWe can use Matplotlib to resize the figure","921e01e7":"## Tweaking Seaborn Charts\n\nAs we saw in the first session, data-to-ink ratio can be important in conveying information effectively, not to mention making charts readable even for color-blind people. So here are two methods we could use to remove unnecessary elements.","ec3fd394":"Hmmm... there seems to be an interesting \"rift\" separating two clusters of data points, but we're not quite sure on what it means. Let's color each data point based on what species each flower is.","19e5fc01":"### sns.despine()\n\nThis will remove the top and right spines\/borders on your chart. You could also remove all spines by calling it with left and bottom set to `True`.\n\n```py\nsns.despine(bottom=True, left=True)\n```"}}