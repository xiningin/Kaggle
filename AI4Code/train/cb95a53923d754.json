{"cell_type":{"a21e43fd":"code","048c95af":"code","71ba8108":"code","50017293":"code","8157584a":"code","fbceef6f":"code","e321b81b":"code","deb7c893":"code","71f1a66d":"code","9a498ba8":"code","ae792a1a":"code","966a9aa9":"code","8552b48d":"code","67274cb3":"code","1aa5b8ef":"code","e47e6a21":"code","fff1b995":"code","83afa300":"code","99805ce6":"code","55087131":"code","3ada082d":"code","1096ffed":"code","0a9aeb4a":"code","342b782c":"code","a51261b3":"code","534a065f":"code","94ae8eb2":"code","e3604d5d":"code","eae13ae0":"code","71338557":"code","a673a8d4":"code","e175c815":"code","dec43fa0":"code","57b07740":"markdown"},"source":{"a21e43fd":"import os\nimport sys\nimport warnings\n\nif not sys.warnoptions:\n    warnings.simplefilter(\"ignore\")\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import AdaBoostClassifier, RandomForestClassifier","048c95af":"!ls","71ba8108":"!pwd","50017293":"!ls \/kaggle\/input\/titanic","8157584a":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","fbceef6f":"Train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\nTest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ngender_df = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')","e321b81b":"Train_df.head()","deb7c893":"Test_df.head()","71f1a66d":"gender_df","9a498ba8":"# Select the parameters that will only get in the way\nnot_need_columns = [\n    'PassengerId', 'Name', 'Cabin'\n]","ae792a1a":"train_df = Train_df.drop(axis=1, columns=not_need_columns)\ntest_df = Test_df.drop(axis=1, columns=not_need_columns)","966a9aa9":"train_df.head()","8552b48d":"test_df.head()","67274cb3":"train_df.info()","1aa5b8ef":"# Changing the categorical features into numerical features\nle = LabelEncoder()\n\ntrain_df['Sex'] = le.fit_transform(train_df['Sex'])\ntrain_df['Embarked'] = le.fit_transform(train_df['Embarked'])\ntrain_df['Age'] = train_df['Age'].fillna(value=train_df['Age'].mean())\n\ntest_df['Sex'] = le.fit_transform(test_df['Sex'])\ntest_df['Embarked'] = le.fit_transform(test_df['Embarked'])\ntest_df['Age'] = test_df['Age'].fillna(value=test_df['Age'].mean())","e47e6a21":"train_df['Embarked']","fff1b995":"tickets = train_df['Ticket'].str.split()\ntickets = [ticket[-1] if len(ticket) > 1 else ticket[0] for ticket in tickets]\ntickets = [int(elem) if elem.isdigit() else 9999999 for elem in tickets]","83afa300":"train_df['Ticket'] = tickets","99805ce6":"tickets = test_df['Ticket'].str.split()\ntickets = [ticket[-1] if len(ticket) > 1 else ticket[0] for ticket in tickets]\ntickets = [int(elem) if elem.isdigit() else 9999999 for elem in tickets]\ntest_df['Ticket'] = tickets","55087131":"train_df.info()","3ada082d":"test_df.info()","1096ffed":"test_df['Fare'] = test_df['Fare'].fillna(value=test_df['Fare'].mean())","0a9aeb4a":"test_df.info()","342b782c":"Y_train = train_df.loc[:, ['Survived']]\nX_train = train_df.drop(axis=1, columns=['Survived'])","a51261b3":"x_train, x_test, y_train, y_test = train_test_split(X_train, Y_train,\n                                                    random_state=42)","534a065f":"adc = AdaBoostClassifier()\nadc.fit(x_train, y_train)\nY_pred = adc.predict(x_test)\naccuracy_score(Y_pred, y_test)","94ae8eb2":"rfc = RandomForestClassifier()\nrfc.fit(x_train, y_train)\nY_pred = rfc.predict(x_test)\naccuracy_score(Y_pred, y_test)","e3604d5d":"tree = DecisionTreeClassifier()\ntree.fit(x_train, y_train)\nY_pred = tree.predict(x_test)\naccuracy_score(Y_pred, y_test)","eae13ae0":"rfc = RandomForestClassifier(n_estimators=25, max_depth=7, random_state=42)\nrfc.fit(X_train, Y_train)\nY_pred = rfc.predict(test_df)","71338557":"accuracy_score(Y_pred, gender_df.loc[:, ['Survived']])","a673a8d4":"submission = pd.DataFrame({\n        \"PassengerId\": Test_df[\"PassengerId\"],\n        \"Survived\": Y_pred\n    })","e175c815":"submission.to_csv('submission.csv', index=False)","dec43fa0":"pd.read_csv('submission.csv')","57b07740":"# Thanks for reading. Don't forget to upvote the work. Good luck kaggling!"}}