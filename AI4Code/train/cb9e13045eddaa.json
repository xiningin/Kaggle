{"cell_type":{"b3ac100e":"code","fd695e04":"code","a13362ae":"code","c693eae4":"code","bf1ab59e":"code","193c030d":"code","a10bdbb7":"code","e986c6a4":"code","a229afb9":"code","c44bb8a7":"code","94c6eab2":"code","76aca728":"code","edd2b9cd":"code","3a0b3f26":"code","11b985f2":"code","f4a98f5f":"code","e74cd32f":"code","8c23ec83":"code","694a2015":"code","21793545":"code","ff6fca4c":"code","ce68d78c":"code","e8eb1dd8":"code","b78badaf":"code","15ba9adf":"code","69b82432":"code","e3ce5121":"code","6be3633e":"code","9bdc69a8":"code","bf022fe1":"code","5d8a5806":"code","94126873":"code","362d4662":"code","c5831c8c":"code","c86e6de9":"code","82bc42c9":"code","f922f768":"code","585770c9":"code","19f8637a":"code","16ddebcd":"markdown"},"source":{"b3ac100e":"!pip install pycaret","fd695e04":"\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom imblearn.over_sampling import SMOTE\nfrom pycaret.classification import *\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score,classification_report,mean_squared_error,mean_absolute_error,confusion_matrix\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.preprocessing import MinMaxScaler\nimport pickle","a13362ae":"df = pd.read_csv(\"..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv\")","c693eae4":"df","bf1ab59e":"df.isnull().sum()","193c030d":"df.corr()","a10bdbb7":"px.histogram(df,x='work_type',color='work_type',template='plotly_dark')","e986c6a4":"px.histogram(df,x='smoking_status',color='smoking_status',template='plotly_dark')","a229afb9":"df[\"stroke\"].value_counts()","c44bb8a7":"plt.xlabel(\"Age\")\nplt.ylabel(\"BMI\")\nplt.xlim(0,40)\nplt.bar(df[\"age\"],df[\"bmi\"])","94c6eab2":"plt.xlabel(\"Age\")\nplt.ylabel(\"BMI\")\nplt.xlim(40,80)\nplt.bar(df[\"age\"],df[\"bmi\"])","76aca728":"df.dropna(inplace=True)","edd2b9cd":"df = df.reset_index(drop = True)","3a0b3f26":"df","11b985f2":"gender = pd.get_dummies(df[\"gender\"])\never_married = pd.get_dummies(df[\"ever_married\"])\nwork_type = pd.get_dummies(df[\"work_type\"])\nresidence_type = pd.get_dummies(df[\"Residence_type\"])\nsmoking_status = pd.get_dummies(df[\"smoking_status\"])\ndf[\"gender_Female\"] = gender[\"Female\"]\ndf[\"gender_Male\"] = gender[\"Male\"]\ndf[\"gender_Other\"] = gender[\"Other\"]\ndf[\"work_type_Govt_Job\"] = work_type[\"Govt_job\"]\ndf[\"work_type_Never_Worked\"] = work_type[\"Never_worked\"]\ndf[\"work_type_Private\"] = work_type[\"Private\"]\ndf[\"work_type_Self-Employed\"] = work_type[\"Self-employed\"]\ndf[\"work_type_children\"] = work_type[\"children\"]\ndf[\"ever_married_Yes\"]=ever_married[\"Yes\"]\ndf[\"ever_married_No\"]=ever_married[\"No\"]\ndf[\"residence_type_Urban\"]=residence_type[\"Urban\"]\ndf[\"residence_type_Rural\"]=residence_type[\"Rural\"]\ndf[\"smoking_status_Unknown\"] = smoking_status[\"Unknown\"]\ndf[\"smoking_status_Formerly_Smoked\"] = smoking_status[\"formerly smoked\"]\ndf[\"smoking_status_Never_Smoked\"] = smoking_status[\"never smoked\"]\ndf[\"smoking_status_Smokes\"] = smoking_status[\"smokes\"]","f4a98f5f":"df","e74cd32f":"columns_to_drop = [\"id\",\"gender\",\"ever_married\",\"work_type\",\"smoking_status\",\"Residence_type\"]\ndf.drop(columns_to_drop,axis = 1,inplace= True)","8c23ec83":"df","694a2015":"X = df.drop(\"stroke\",axis = 1)\nY = df[\"stroke\"]","21793545":"sm = SMOTE(random_state=27,k_neighbors=10)\nX, Y = sm.fit_resample(X,Y)","ff6fca4c":"Y.value_counts()","ce68d78c":"df_final = pd.concat([X,Y],axis = 1)","e8eb1dd8":"train,test = train_test_split(df_final, test_size=0.25,random_state= 27)","b78badaf":"experiment = setup(\n    data = train,\n    target = 'stroke',\n    normalize = True\n)","15ba9adf":"compare_models()","69b82432":"X = MinMaxScaler().fit_transform(X)","e3ce5121":"X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size = 0.25, random_state = 42)","6be3633e":"print('Training Features Shape:', X_train.shape)\nprint('Training Labels Shape:', X_test.shape)\nprint('Testing Features Shape:', Y_train.shape)\nprint('Testing Labels Shape:', Y_test.shape)","9bdc69a8":"rf = RandomForestClassifier(n_estimators = 1000, random_state = 42)","bf022fe1":"rf.fit(X_train,Y_train)","5d8a5806":"Y_pred = rf.predict(X_test)","94126873":"print(accuracy_score(Y_pred,Y_test))","362d4662":"n_estimators = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(10, 150, num = 11)]\nmax_depth.append(None)\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5,8,10]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 4,8]\n# Method of selecting samples for training each tree\nbootstrap = [True, False]\n# Create the random grid\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}\nprint(random_grid)","c5831c8c":"rf1 = RandomForestClassifier()\n# Random search of parameters, using 3 fold cross validation, \n# search across 100 different combinations, and use all available cores\nrf_random = RandomizedSearchCV(estimator = rf1, param_distributions = random_grid, n_iter = 25, cv = 2, verbose=2, random_state=42, n_jobs = -1)","c86e6de9":"rf_random.fit(X_train, Y_train)","82bc42c9":"rf_random.best_params_","f922f768":"predictions = rf_random.predict(X_test)","585770c9":"print(accuracy_score(predictions,Y_test))","19f8637a":"pickle.dump(rf_random,open(\"model_stroke.pkl\",\"wb\"))","16ddebcd":"<center><h1 class=\"list-group-item list-group-item-success\">Stroke Prediction<\/center>\n<img src = \"https:\/\/topnews.in\/healthcare\/sites\/default\/files\/styles\/large\/public\/Stroke7.jpg?itok=xInaWFYK\">\n    \n### Context\nAccording to the World Health Organization (WHO) stroke is the 2nd leading cause of death globally, responsible for approximately 11% of total deaths.\nThis dataset is used to predict whether a patient is likely to get stroke based on the input parameters like gender, age, various diseases, and smoking status. Each row in the data provides relavant information about the patient."}}