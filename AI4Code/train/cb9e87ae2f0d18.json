{"cell_type":{"b53b9686":"code","06f1f355":"code","3a6f945c":"code","3045f19b":"code","1f1e4ed7":"code","4fd23714":"code","bf9b71e2":"code","886cd17d":"code","d1d304ba":"code","df5553d6":"code","bf68e1ca":"code","3cd3a3a6":"code","b9da10e8":"code","028dfbc8":"code","a477f89e":"code","865d5fc6":"code","e49f07db":"markdown","e0e5c9d9":"markdown","9e0158c8":"markdown"},"source":{"b53b9686":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","06f1f355":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.impute import SimpleImputer","3a6f945c":"train=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n\n#--------------------------------------------------------------\n\n\nsubmit=pd.DataFrame(test['PassengerId'])\ntrainx,validx,trainy,validy=train_test_split(train.drop('Survived',axis=1),train['Survived'])\n","3045f19b":"sns.barplot(x='Sex',y='Survived',data=train)  \nprint(\"\"\"In this barplot we can easily say that female has more chance to survive with more than 80% chnace to survive \"\"\")","1f1e4ed7":"sns.barplot(x='Pclass',y='Survived',data=train,hue='Sex')\n\nprint('Women of 1st class has more chance to survive and women in 3rd class has about 40%  chance to survive')","4fd23714":"sns.barplot(x='Embarked',y='Survived',data=train,hue='Pclass')\n\nprint('C = Cherbourg, Q = Queenstown, S = Southampton')\nprint('---->  People from Southampton has  less chance to survive specially lower class.')\nprint('---->  People from Queentown  has more chance to survive than all other class')","bf9b71e2":"sns.displot(x=train['Fare'],bins=30,kde=True)\nplt.xlabel('Fare')\nprint('--> The fare column is skewed towards left side')","886cd17d":"\nsns.displot(train['Age'],kde=True)\nprint('We can see there is a bump of lower age')\n","d1d304ba":"sns.boxplot(y=train['Age'],x=train['Survived'])","df5553d6":"#------------------Label Encoding--------------------\n\ntrainx['Sex']=trainx['Sex'].replace({'male':0,'female':1})\ntrainx['Embarked']=trainx['Embarked'].replace({'S':0,'C':1,'Q':2})\n\nvalidx['Sex']=validx['Sex'].replace({'male':0,'female':1})\nvalidx['Embarked']=validx['Embarked'].replace({'S':0,'C':1,'Q':2})\n\n\ntest['Sex']=test['Sex'].replace({'male':0,'female':1})\ntest['Embarked']=test['Embarked'].replace({'S':0,'C':1,'Q':2})\n\n\n#--Right now we are avoiding imputing null values as we do in pipeline as a part","bf68e1ca":"def outlier(data):\n    q25, q75 = np.percentile(data, 25),np.percentile(data, 75)\n    iqr = q75 - q25\n\n# calculate the outlier cutoff\n    cut_off = iqr * 2\n    lower, upper = q25 - cut_off, q75 + cut_off\n# identify outliers\n    for i in range(len(data)):\n        if( data.iloc[i]>= lower and data.iloc[i] <= upper):\n            \n            b.append(i)\n    return b\n\nb=[]\na=outlier(trainx['Fare'])\n\ntrainx.drop(trainx.index[a[0]])\nb=[]\na=outlier(validx['Fare'])\n\nvalidx.drop(validx.index[a[0]])\nb=[]\na=outlier(test['Fare'])\n\nmm = {\n897:1,\n899:1, \n930:1,\n932:1,\n949:1,\n987:1,\n995:1,\n998:1,\n999:1,\n1016:1,\n1047:1,\n1083:1,\n1097:1,\n\n}","3cd3a3a6":"# Creating new column \n\n#----------Title-------------------\nb=[]\nfor i in range(len(trainx['Name'])):\n    b.append(trainx['Name'].iloc[i].split(',')[1].split('.')[0])\ntrainx['Title']=b\ntrainx['Title']=trainx['Title'].replace([' Don',' Mme',' Dr',' Rev',' Col',' Mlle',' Major',' Sir',' Lady',' Ms',' Jonkheer',' the Countess',' Capt'],'Rare')\ntrainx['Title']=trainx['Title'].replace({' Mr':1,' Miss':2,' Mrs':2,' Master':3,'Rare':4})\n    \nb=[]\nfor i in range(len(validx['Name'])):\n    b.append(validx['Name'].iloc[i].split(',')[1].split('.')[0])\nvalidx['Title']=b\nvalidx['Title']=validx['Title'].replace([' Don',' Mme',' Dr',' Rev',' Col',' Mlle',' Major',' Sir',' Lady',' Ms',' Jonkheer',' the Countess',' Capt'],'Rare')\nvalidx['Title']=validx['Title'].replace({' Mr':1,' Miss':2,' Mrs':2,' Master':3,'Rare':4})\n    \nb=[]\nfor i in range(len(test['Name'])):\n    b.append(test['Name'].iloc[i].split(',')[1].split('.')[0])\ntest['Title']=b\ntest['Title']=test['Title'].replace([' Don',' Dona',' Mme',' Dr',' Rev',' Col',' Mlle',' Major',' Sir',' Lady',' Ms',' Jonkheer',' the Countess',' Capt'],'Rare')\ntest['Title']=test['Title'].replace({' Mr':1,' Miss':2,' Mrs':2,' Master':3,'Rare':4})\n    \n#-----------------------------Fare group -----------------------------\n\n\n\ndef fare_group(fare):\n    a=''\n    if(fare<8):\n        a=1\n    elif(fare<14):\n        a=2\n    elif(fare<30):\n        a=3\n    elif(fare<60):\n        a=4\n    else:\n        a=5\n    return a\ntrainx['fare_group']=trainx['Fare'].map(fare_group)\nvalidx['fare_group']=validx['Fare'].map(fare_group)\ntest['fare_group']=test['Fare'].map(fare_group)\n\n\n\n\n#-----------------------------Age group----------------------------------\n\n\n\ndef age_group(age):\n    a=''\n    if(age<3):\n        a=1\n    elif(age<10):\n        a=2\n    elif(age<17):\n        a=3\n    elif(age<30):\n        a=4\n    elif(age<45):\n        a=5\n    else:\n        a=6\n    return a\n\ntrainx['age_group']=trainx['Age'].map(age_group)\nvalidx['age_group']=validx['Age'].map(age_group)\ntest['age_group']=test['Age'].map(age_group)\n\n\ntrainx.drop(['Name','Cabin','Ticket','PassengerId'],axis=1,inplace=True)\nvalidx.drop(['Name','Cabin','Ticket','PassengerId'],axis=1,inplace=True)\ntest.drop(['Name','Cabin','Ticket','PassengerId'],axis=1,inplace=True)\n\ntrainx=pd.get_dummies(trainx,columns=['Embarked','Title','fare_group','age_group'],drop_first=True)\nvalidx=pd.get_dummies(validx,columns=['Embarked','Title','fare_group','age_group'],drop_first=True)\ntest=pd.get_dummies(test,columns=['Embarked','Title','fare_group','age_group'],drop_first=True)\n                      \n    \n    \n","b9da10e8":"trainx","028dfbc8":"from sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer,KNNImputer\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import MinMaxScaler,StandardScaler,PolynomialFeatures\nfrom sklearn.model_selection import RepeatedStratifiedKFold,cross_val_score\nfrom sklearn.feature_selection import SelectKBest,chi2,mutual_info_classif\n\n\n\n\npipeline=Pipeline(steps=[('impute',KNNImputer(n_neighbors=9)),('model',GradientBoostingClassifier())])\ncv=RepeatedStratifiedKFold(n_splits=7,n_repeats=6,random_state=1)\nscore=cross_val_score(pipeline,trainx,trainy,cv=cv,scoring='accuracy',n_jobs=-1)\nprint(np.mean(score),i)\n","a477f89e":"from sklearn.metrics import accuracy_score\npipeline.fit(trainx,trainy)\na=pipeline.predict(validx)\naccuracy_score(validy,a)\n\n","865d5fc6":"\nsubmit['Survived']=pipeline.predict(test)\n\nsubmit.to_csv('ver1.csv',index=False)","e49f07db":"# Feature Extraction","e0e5c9d9":"# Data Cleaning","9e0158c8":"# Data Visualization"}}