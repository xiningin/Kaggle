{"cell_type":{"e5f352f5":"code","b4c0fe95":"code","c8034eff":"code","265ec2cc":"code","0c918139":"code","239603d1":"code","ca550914":"code","fa89b359":"code","a2a426c4":"code","84e1b57f":"code","338e08b2":"code","a413fd91":"code","f048b641":"code","b7639dbc":"code","01452ae5":"code","40669252":"code","fec82de6":"code","dec563ed":"code","1663a9ee":"code","c95e59ac":"code","7a0c6c2f":"code","b55b72ab":"code","93f8b189":"code","83022021":"code","d0b3bace":"code","1d47ce79":"code","f1431a16":"code","709644e6":"code","7708c827":"code","4a0a89ed":"code","f6de642b":"code","5279e8a3":"markdown","ad5adc9b":"markdown","7c7065b6":"markdown","54dbd4f2":"markdown","b9b2823c":"markdown"},"source":{"e5f352f5":"import numpy as np\nimport pandas as pd\nimport os\nimport math\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\nfrom sklearn import preprocessing\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set(style=\"white\") #white background style for seaborn plots\nsns.set(style=\"whitegrid\", color_codes=True)\nfrom sklearn.metrics import accuracy_score\nfrom scipy.stats import norm,skew\nfrom sklearn import metrics","b4c0fe95":"data = pd.read_csv('..\/input\/zoo.csv')\ndf2 = pd.read_csv('..\/input\/class.csv')\ndata.head()","c8034eff":"df2","265ec2cc":"# Check data type for each variable\ndata.info()","0c918139":"#lets try to assess missing values\ndata.isnull().sum()","239603d1":"data.describe()","ca550914":"print(data.shape, df2.shape)","fa89b359":"# lets try to join both sets to show actual class names\ndf=pd.merge(data,df2,how='left',left_on='class_type',right_on='Class_Number')\ndf.head()\n","a2a426c4":"plt.hist(df.class_type, bins=7)","84e1b57f":"# lets see which class the most zoo animals belong to\nsns.factorplot('Class_Type', data=df,kind=\"count\", aspect=2)","338e08b2":"corr = df2.corr()\nsns.heatmap(corr, square=True, linewidths=.3,cmap=\"RdBu_r\")\nplt.show()","a413fd91":"corr = data.corr()\n\nsns.heatmap(corr, square=True, linewidths=.2,cmap=\"RdBu_r\")\nplt.show()","f048b641":"plt.subplots(figsize=(20,15))\nax = plt.axes()\nax.set_title(\"Correlation Heatmap\")\ncorr = data.corr()\nsns.heatmap(corr, annot=True,\n            xticklabels=corr.columns.values,\n            yticklabels=corr.columns.values)","b7639dbc":"# show vairable correlation which is more than 0.7 (positive or negative)\ncorr_filt = corr[corr != 1][abs(corr)> 0.7].dropna(how='all', axis=1).dropna(how='all', axis=0)\nprint(corr_filt)","01452ae5":"df.groupby('Class_Type').mean()","40669252":"from sklearn.model_selection import train_test_split\n# 80\/20 split\nX = data.iloc[:,1:17]\ny = data.iloc[:,17]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1, stratify=y)","fec82de6":"print(X.shape,y.shape)","dec563ed":"from sklearn.model_selection import cross_val_score\n","1663a9ee":"from sklearn import tree\ndt = tree.DecisionTreeClassifier()\nscore_dt=cross_val_score(dt, X,y, cv=5)\nscore_dt\n","c95e59ac":"# The mean score and the 95% confidence interval of the score estimate are:\n#print(\"Accuracy: %0.2f (+\/- %0.2f)\" % (score_dt.mean(), score_dt.std() * 2))","7a0c6c2f":"print(\"accuracy:\" +str(score_dt.mean()))","b55b72ab":"\nfrom sklearn.svm import SVC\nsvc = SVC(kernel='linear', C=1)\nscore_svc=cross_val_score(svc, X,y, cv=5)\nscore_svc","93f8b189":"print(\"accuracy:\" +str(score_svc.mean()))","83022021":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression(multi_class='multinomial', solver='newton-cg')\nscore_lr=cross_val_score(lr, X,y, cv=5)\nscore_lr\n#print('Accuracy:', round(score_lr, 2), '%.')\n","d0b3bace":"print(\"accuracy:\" +str(score_lr.mean()))","1d47ce79":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor(n_estimators = 35,max_depth=7, random_state = 42)\nscore_rf=cross_val_score(rf,X,y, cv=5)\nscore_rf\n","f1431a16":"print(\"accuracy:\" +str(score_rf.mean()))","709644e6":"\n\nmodels = pd.DataFrame({\n    'Model': ['Support Vector Machines',  'Decision Tree', 'Logistic Regression','Random Forest'],\n    'Score': [score_svc.mean(), score_dt.mean(), score_lr.mean(), score_rf.mean()]})\nmodels.sort_values(by='Score', ascending=False)\n\n","7708c827":"Model= ['Support Vector Machines',  'Decision Tree', 'Logistic Regression','Random Forest']\nScore = [score_svc.mean(), score_dt.mean(), score_lr.mean(), score_rf.mean()]","4a0a89ed":"print(Score)","f6de642b":"# Performance of models\nfg,ax = plt.subplots(nrows=1,ncols=1,figsize=(6, 2.5))\nsns.barplot(Model, Score,palette=\"RdBu\")\nplt.ylim(0.94, 0.97)\nax.set_ylabel(\"Performance\")\nax.set_xlabel(\"Name\")\nax.set_xticklabels(Model,rotation=35)\nplt.title('Model')\n","5279e8a3":"# SVM","ad5adc9b":"# Logistic Regression","7c7065b6":"# DECISION TREE","54dbd4f2":"After comparing the score of each model, the RF model seems to be the most accurate.","b9b2823c":"# Random Forest"}}