{"cell_type":{"65e6cd58":"code","264ac9bf":"code","9c06e4c9":"code","fbee2519":"code","34100678":"code","8a548da0":"code","64fa04ce":"code","eefd168a":"code","62e9f424":"code","7fc02ed4":"code","f356a13c":"markdown","bd1328af":"markdown","1ec7ff0a":"markdown","4c996108":"markdown","ede658e7":"markdown"},"source":{"65e6cd58":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nimport pandas as pd\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","264ac9bf":"trainset = pd.read_csv('..\/input\/fashion-mnist_train.csv')\ntestset = pd.read_csv('..\/input\/fashion-mnist_test.csv')","9c06e4c9":"trainset.head()","fbee2519":"train_label = pd.get_dummies(trainset['label'])\ndel trainset['label']\ntest_label = pd.get_dummies(testset['label'])\ndel testset['label']","34100678":"import numpy as np\ntrainset = trainset.values.reshape(-1,28,28,1)\ntestset = testset.values.reshape(-1,28,28,1)","8a548da0":"from keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, MaxPooling2D, Dropout, Flatten\n","64fa04ce":"input_shape=(28,28,1)\nnClasses=10","eefd168a":"def createModel():\n    model = Sequential()\n    model.add(Conv2D(28, (3, 3), padding='same', activation='relu', input_shape=input_shape))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(Dropout(0.25))\n\n    model.add(Conv2D(28, (3, 3), padding='same', activation='relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(Dropout(0.25))\n\n    model.add(Flatten())\n    model.add(Dense(512, activation='relu'))\n    model.add(Dropout(0.5))\n    model.add(Dense(nClasses, activation='softmax'))\n     \n    return model","62e9f424":"model1 = createModel()\nmodel1.summary()","7fc02ed4":"batch_size = 256\nepochs = 10\nmodel1.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\nhistory = model1.fit(trainset, train_label, batch_size=batch_size, epochs=epochs, verbose=1, \n                   validation_data=(testset, test_label))\n \nprint(model1.evaluate(testset, test_label))","f356a13c":"**Reading the Dataset**","bd1328af":"**Preparing the input feature values**","1ec7ff0a":"**Model Creation  and Execution**","4c996108":"**Defining Model Template**","ede658e7":"**Storing labels in separate file**"}}