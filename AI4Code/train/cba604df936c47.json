{"cell_type":{"56a82e8b":"code","e2ec9ca6":"code","55ff13a4":"code","d14d42a2":"code","21987b49":"code","bee2fb94":"code","8b03ff2c":"code","dae709f6":"code","4516a269":"code","2f2b85b4":"code","4a428d27":"code","98b547a6":"code","a6e7c96a":"code","a537e140":"code","8b534e64":"code","411cd0d7":"code","29792a30":"code","1c18c888":"code","9bac1989":"code","d5bda3bd":"code","ec92a9ea":"code","d572f22a":"code","f2a15854":"code","22bc3d9d":"code","05b068e0":"code","672423ff":"markdown","b880475e":"markdown","0725bf4d":"markdown"},"source":{"56a82e8b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e2ec9ca6":" df = pd.read_csv('..\/input\/saudi-arabia-bookingcom\/project3_df1.csv')\ndf ","55ff13a4":"df.columns","d14d42a2":"df.select_dtypes(include='object').columns","21987b49":"df.isnull().any()","bee2fb94":"df.City","8b03ff2c":"df.City.isnull()","dae709f6":"any([True, True, True]), any([True, False, True]), any([False, False, False])","4516a269":"all([True, True, True]), all([True, False, True]), all([False, False, False])\n","2f2b85b4":"df.isnull().sum()","4a428d27":"df.shape","98b547a6":"for col in df.columns:\n    if df[col].isnull().any():\n        print(col, df[col].isnull().sum())","a6e7c96a":"for col in df.columns:\n    if df[col].dtype == 'object':\n        print(col)","a537e140":"for col in df.columns:\n    if df[col].dtype == 'int64' or df[col].dtype == 'float64':\n        print(col)","8b534e64":"# Get list of categorical variables\ns = (df.dtypes == 'object')\nprint(s)\nobject_cols = list(s[s].index)\n\nprint(\"Categorical variables:\")\nprint(object_cols)","411cd0d7":"df_num = df.select_dtypes(exclude='object')\ndf_num","29792a30":"df_cat = df[object_cols]\ndf_cat","1c18c888":"import matplotlib.pyplot as plt # plotting\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()","9bac1989":"def plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()","d5bda3bd":"def plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","ec92a9ea":"nRowsRead = 1000 \ndf1 = pd.read_csv('..\/input\/saudi-arabia-bookingcom\/project3_df1.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = '..\/input\/saudi-arabia-bookingcom\/project3_df1.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","d572f22a":"df1.head(5)","f2a15854":"plotPerColumnDistribution(df, 10, 5)","22bc3d9d":"plotCorrelationMatrix(df1, 8)","05b068e0":"plotScatterMatrix(df1, 18, 10)","672423ff":"read db","b880475e":"show dtypes include ='object'","0725bf4d":"show columns"}}