{"cell_type":{"46cb6bca":"code","47440140":"code","257a33a5":"code","e75ad211":"code","857f8781":"code","b84f1266":"code","5288b768":"code","a8f56bf0":"code","de6090a2":"code","29e63497":"code","8ed9859e":"code","e2e7ba4a":"code","81b8f283":"code","70abb884":"code","eeedfc48":"code","ac32a6f4":"code","670a68ec":"code","7ac3d0bf":"code","183bcbd8":"code","616ff63f":"code","aa20b0d3":"code","156ef6fc":"code","fed83836":"code","e1bbffe8":"code","d831f734":"code","e87c9e2c":"markdown","3bfc5a2d":"markdown","675d7407":"markdown","47949861":"markdown","a044b36d":"markdown","83a9f835":"markdown","46a9f484":"markdown","45ae9f46":"markdown","959ad234":"markdown","dd500224":"markdown","3bd3e6a6":"markdown","b94886fc":"markdown","b099cea3":"markdown","5211cd22":"markdown"},"source":{"46cb6bca":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","47440140":"%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy as stats\nfrom ast import literal_eval\nfrom sklearn.feature_extraction.text import TfidfVectorizer,CountVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel, cosine_similarity\nfrom nltk.stem.snowball import SnowballStemmer\nfrom nltk.stem.wordnet import WordNetLemmatizer\nfrom nltk.corpus import wordnet\nfrom surprise import Reader,Dataset,SVD\n\npd.pandas.set_option('display.max_columns',None)","257a33a5":"link_small = pd.read_csv('\/kaggle\/input\/the-movies-dataset\/links_small.csv')\nmd = pd.read_csv('\/kaggle\/input\/the-movies-dataset\/movies_metadata.csv')\nlink_small.head()","e75ad211":"print(link_small['tmdbId'].isnull().sum())\nprint(link_small.info())","857f8781":"link_small = link_small[link_small['tmdbId'].notnull()]['tmdbId'].astype('int')\nlink_small.head()","b84f1266":"md.isnull().sum()","5288b768":"md['id']","a8f56bf0":"md = md.drop([19730, 29503, 35587])","de6090a2":"md['id'] = md['id'].astype('int')","29e63497":"smd = md[md['id'].isin(link_small)]\nsmd.shape","8ed9859e":"smd['tagline'] = smd['tagline'].fillna('')","e2e7ba4a":"smd['description'] = smd['overview'] + smd['tagline']","81b8f283":"smd['description'] = smd['description'].fillna('')","70abb884":"from sklearn.feature_extraction.text import TfidfVectorizer\n\ntf = TfidfVectorizer(analyzer='word',ngram_range=(1,2),min_df=0,stop_words='english')\ntfid_mat = tf.fit_transform(smd['description'])","eeedfc48":"cos_sim = linear_kernel(tfid_mat,tfid_mat)","ac32a6f4":"len(cos_sim[0])","670a68ec":"smd = smd.reset_index()","7ac3d0bf":"titles = smd['title']","183bcbd8":"indices = pd.Series(smd.index,index=smd['title'])\nindices","616ff63f":"idx = indices['The Dark Knight']","aa20b0d3":"sim_scores = list(enumerate(cos_sim[idx]))\nsim_scores[:5]","156ef6fc":"sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True) #sorting the movies based on the max similarity score\nsim_scores = sim_scores[1:31]\nmovie_indices = [i[0] for i in sim_scores]#getting the similarity score of the movies based on movie 'the dark night raises'\nprint(titles.iloc[movie_indices])","fed83836":"def get_recommendations(title):\n    idx = indices[title]\n    sim_scores = list(enumerate(cos_sim[idx]))\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n    sim_scores = sim_scores[1:31]\n    movie_indices = [i[0] for i in sim_scores]\n    return titles.iloc[movie_indices]","e1bbffe8":"get_recommendations('The Godfather').head(10)","d831f734":"get_recommendations('The Dark Knight').head(10)","e87c9e2c":"### Content Based Recommender\nAs of above, we have created simple recommender system where we can get the movies recommended based on the ratings and based on the genre. But with this recommendation system we cannot able to recommend a movie based on personal choice.\n\nfor example if you consider Inception the Darknight are the movie by cristopher nolan from this we can make a assumption that the person Like Cristopher nolan movies.But he can only see the action movies. where most of them were made by differnt directors and not by cristopher nolan\n\nTo personalise this recommendation we need some more features to form a certain metric to recommend the movie\n\nwe are going to build two content based system\n\nMovie Overviews and Taglines\n\nMovie Cast, Crew, Keywords and Genre","3bfc5a2d":"Droping worngly indexed row found by feature analysis","675d7407":"\nWe have 9099 movies got by modeling the dataset or joining the table which is 5 times smaller than original dataset","47949861":"getting the index of the movie we need","a044b36d":"we made the title as index and index as values so that we can match the index of cosine similarity with the title.","83a9f835":"from the above we can see that each record created alist of values containing their similarity","46a9f484":"we can see using tag line we can work out some combinations","45ae9f46":"From the above we can able to see that when we give the dark night it gives all the batman movies . where it found the similarity based on discription and taglines. This recomendation are good when we want a sequel of the movie. but suppose if the movie doesn't have any sequel then we have to recommend movies based on other criteria like cast, crew, geners  keywords.","959ad234":"we combined overview and tagline to encode and find some similarity","dd500224":"by printing we would get the movies similar to dark night raises based on the tagline and discription\n\n#### now creating a function using this","3bd3e6a6":"enumarating the cosine similarity of all the movies based on the dark night raises to match the index","b94886fc":"using TFid vectoriser to encode the description","b099cea3":"here analyzer indicates what to be analysed in the document like word, number,characters\n\nngram_range is to specify the grouping in the tfid vectoriser (1,2) indicates group the letters in unigram and bigram. where if you consider a document 'i am studying NLP' for bigram this will group as 'i am' 'am studying' 'studying NLP'\n\n\nthus encoding the descrption in TFid matrix\n\n\nwe will use Cosine similarity to find the similarity between the movies. such that cosine similarity is understood by ploting the data in the x y plot,where x and y are the each document tfid values. since the dot product of the cosine similarity is alredy found we will use linear_kernal to find the similarity","5211cd22":"from ast import literal_eval is used to evaluate the python literals like float,int,string etc. eg: code = \"\"\"(1, 2, {'foo': 'bar'})\"\"\" can be evaluated as Tuple when passed through the literal_eval object"}}