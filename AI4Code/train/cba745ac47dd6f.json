{"cell_type":{"e043bec9":"code","d45c3015":"code","642c8c33":"code","be3c0fa5":"code","c61c4753":"code","9d0b7887":"code","8952403f":"code","e2c97dcd":"code","232c347f":"code","3b7bb826":"code","8f64b0cf":"code","4e79e35f":"code","32078e76":"code","ef9f7d14":"code","59fb9104":"code","ae92a67d":"code","a57b0bce":"code","68d78811":"code","3478c2fe":"code","7df003c1":"code","6ad0ba72":"code","88f5d4af":"code","15eca27a":"code","7bbcba9c":"markdown","961f3567":"markdown","d891ef91":"markdown","927ce26a":"markdown","70389dfa":"markdown","3d89146c":"markdown","2975d8a7":"markdown","d758b26a":"markdown","b2709994":"markdown","8f721399":"markdown","9b762fc1":"markdown","b94894d2":"markdown","01403f4c":"markdown","450fb46f":"markdown","ddca511c":"markdown","6916bce8":"markdown","35fc133b":"markdown","40e2bdb9":"markdown","6df9389c":"markdown","39d854ed":"markdown","dbcd3f83":"markdown"},"source":{"e043bec9":"import numpy as np\nimport pandas as pd \nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n#UTF-8 is a variable-width character encoding standard \n#that uses between one and four eight-bit bytes to represent all valid Unicode code points.\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n# Any results you write to the current directory are saved as output.       ","d45c3015":"data = pd.read_csv('\/kaggle\/input\/youtube-new\/USvideos.csv')\n#\/kaggle\/input\/youtube-new\/INvideos.csv\n#\/kaggle\/input\/youtube-new\/CAvideos.csv\n#If you run the code above, you need to put the \".csv\" path in pd.read_csv () \ndata.head()","642c8c33":"data.info()","be3c0fa5":"data.corr()","c61c4753":"data.head(10)  # The first 10 YouTube Trending Videos","9d0b7887":"data.views.plot(kind = 'line', color = 'g',label = 'dislikes',linewidth=1,alpha = 0.5,grid = True,linestyle = ':')\ndata.likes.plot(color = 'b',label = 'likes',linewidth=1, alpha = 0.5,grid = True,linestyle = '-.')\n\ndata.plot(kind='scatter', x='views', y='comment_count',alpha = 0.5,color = 'red')\nplt.xlabel('views')             \nplt.ylabel('comment_count')\nplt.title('Views - comment_count Scatter Plot')            ","8952403f":"# Histogram\n# bins = number of bar in figure\ndata.views.plot(kind = 'hist',bins = 50,figsize = (5,5))\nplt.show()","e2c97dcd":"#Program to demonstrate the\n#use of user defined functions\n\ndef sum(a,b):\n   total = a + b \n   return total\nx = 10 \ny = 20\nprint(\"The sum of\",x,\"and\",y,\"is:\",sum(x, y))","232c347f":"#Local Scope\n#A variable created inside a function belongs to the local scope of that function, and can only be used inside that function.\n#A variable created inside a function is available inside that function:\ndef myfunc():\n    x = 300\n    print(x)\nmyfunc()","3b7bb826":"#Function Inside Function\n#The variable x is not available outside the function, but it is available for any function inside the function:\n#The local variable can be accessed from a function within the function:\ndef myfunc():\n  x = 300\n  def myinnerfunc():\n    print(x)\n  myinnerfunc()\n\nmyfunc()","8f64b0cf":"#Global Scope\n#A variable created in the main body of the Python code is a global variable and belongs to the global scope.\n#Global variables are available from within any scope, global and local.\n\nx = 300\ndef myfunc():\n  print(x)\n\nmyfunc()\nprint(x)","4e79e35f":"#If you operate with the same variable name inside and outside of a function, Python will treat them as two separate variables, \n#one available in the global scope (outside the function) and one available in the local scope (inside the function):\n\nx = 300\ndef myfunc():\n  x = 200\n  print(x)\n\nmyfunc()\nprint(x)","32078e76":"#Global Keyword\n#If you need to create a global variable, but are stuck in the local scope, you can use the global keyword.\n#The global keyword makes the variable global.\ndef myfunc():\n  global x\n  x = 300\n\nmyfunc()\nprint(x)\n\n# How can we learn what is built in scope\n#import builtins\n#dir(builtins)","ef9f7d14":"def function1(): # outer function\n    print (\"Hello from outer function\")\n    def function2(): # inner function\n        print (\"Hello from inner function\")\n    function2()\n\nfunction1()","59fb9104":"def function1():          # outer function\n    x = 2                 # A variable defined within the outer function\n    def function2(a):     # inner function\n                          # Let's define a new variable within the inner function rather than changing the value of x of the outer function\n        x = 6\n        print (a+x)\n    print (x)             # to display the value of x of the outer function\n    function2(3)\n\nfunction1()","ae92a67d":"def student(firstname, lastname ='Bal\u0131bey', college ='University of Padua'): \n    print(firstname, lastname, 'studies masters degree at', college, 'in Italy') \n#function student accept one required argument (firstname) and rest two arguments are optional.\nstudent(\"Recep\")","a57b0bce":"# flexible arguments *args\ndef f(*args):      # can take many parameters\n    for i in args:\n        print(i)\nf(1,2,3,4)\n\n# flexible arguments **kwargs that is dictionary\ndef f(**kwargs):\n    for key, value in kwargs.items():               \n        print(key, \": \", value)\nf(country = 'Spain', capital = 'Madrid', population = 6642000)","68d78811":"# Program to show the use of lambda functions\ndouble = lambda x: x * 2\nprint(double(5))\n# Here x is the argument and x * 2 is the expression that gets evaluated and returned.\n\nsquare = lambda x: x**2     # where x is name of argument\nprint(square(4))\ntot = lambda x,y,z: x+y+z   # where x,y,z are names of arguments\nprint(tot(1,2,3))","3478c2fe":"my_list = [1, 5, 4, 6, 8, 11, 3, 12]\nnew_list = list(filter(lambda x: (x%2 == 0) , my_list))\nprint(new_list)","7df003c1":"my_list = [1, 5, 4, 6, 8, 11, 3, 12]\nnew_list = list(map(lambda x: x * 2 , my_list))\nprint(new_list)","6ad0ba72":"# Here is an example of a python inbuilt iterator, value can be anything which can be iterate \niterable_value = 'Geeks'\niterable_obj = iter(iterable_value) \n\nwhile True: \n    try: \n    # Iterate by calling next \n       item = next(iterable_obj) \n       print(item) \n    except StopIteration: \n# exception will happen when iteration will over \n      break\n","88f5d4af":"class IterationExample:\n    def __iter__(self):\n        self.x = 0\n        return self\n\n    def __next__(self):\n        y = self.x\n        self.x += 1\n        return y\n    \nclassinstance = IterationExample()\nelement = iter(classinstance)\n# We have created an iterator named element that prints numbers from 0 to N. We first created an instance of the class and \n# we gave it the name classinstance. We then called the iter() built-in method and passed the name of the class instance as the parameter. \n# This creates the iterator object.","15eca27a":"class IterationExample:\n    def __iter__(self):\n        self.x = 0\n        return self\n\n    def __next__(self):\n        y = self.x\n        self.x += 1\n        return y\n\nclassinstance = IterationExample()\nelement = iter(classinstance)\n\nprint(next(element))\nprint(next(element))\n# We called the next() method and passed the name of the iterator element to the method as the parameter. \n# Every time we do this, the iterator moves to the next element in the sequence. ","7bbcba9c":"![image.png](attachment:image.png)","961f3567":"# Corrrelation Map \nThe statistical relationship between two variables is referred to as their correlation. A correlation could be positive, meaning both variables move in the same direction, or negative, meaning that when one variable's value increases, the other variables' values decrease.","d891ef91":"# Explanation of libraries mentioned above : \n\n# 1. Numpy\n\nNumPy is the fundamental package for scientific computing in Python. It is a Python library that provides a multidimensional array object, various derived objects (such as masked arrays and matrices), and an assortment of routines for fast operations on arrays, including mathematical, logical, shape manipulation, sorting, selecting, I\/O, discrete Fourier transforms, basic linear algebra, basic statistical operations, random simulation and much more.\n\n**Why Use NumPy ?**\n\nIn Python we have lists that serve the purpose of arrays, but they are slow to process.\nNumPy aims to provide an array object that is up to 50x faster that traditional Python lists.\nThe array object in NumPy is called ndarray, it provides a lot of supporting functions that make working with ndarray very easy. Arrays are very frequently used in data science, where speed and resources are very important.\n\n**Why is NumPy Faster Than Lists? **\n\nNumPy arrays are stored at one continuous place in memory unlike lists, so processes can access and manipulate them very efficiently. This behavior is called locality of reference in computer science. This is the main reason why NumPy is faster than lists. Also it is optimized to work with latest CPU architectures.\n\n**Numerical data in machine learning**\n\nData manipulation is a core component in data sciences and machine learning. In the case of machine learning, the system takes in a huge amount of data and trains itself to make accurate predictions. Naturally, it would need to perform arithmetic operations on numerical data to produce something meaningful. This is where NumPy comes into play.\n\n","927ce26a":"# map()\n\nThe map() function in Python takes in a function and a list.\nThe function is called with all the items in the list and a new list is returned which contains items returned by that function for each item.","70389dfa":"# PYTHON DATA SCIENCE\n\n# Python User defined Functions\n\nThere are two types of functions in Python: Built-in functions and user defined functions. Built-in functions are those that are already defined in Python libraries and we can call them directly. User defined functions are those that we define ourselves in our program and then call them wherever we want. \n\nA function that you define yourself in a program is known as user defined function. You can give any name to a user defined function, however you cannot use the Python keywords as function name. In python, we define the user-defined function using def keyword, followed by the function name. Function name is followed by the parameters in parenthesis, followed by the colon.\n\nFor example:\n\n> def function_name(parameter_1, parameter_2, ...) :\n>       statements","3d89146c":"# 5. Seaborn\n![image.png](attachment:image.png)\n\n","2975d8a7":"![image.png](attachment:image.png)","d758b26a":"What if we attempt to change the variables of the outer function from inside the inner function? Let us see what happens:","b2709994":"# **Using \"Trending YouTube Video Statistics\" Dataset to start Data Science Learning Adventure**\n\n**More and more, data science is finding a way into our businesses, our communities, and in some cases, our lives. But just what exactly is data science?**\n\nData science is the field of study that combines domain expertise, programming skills, and knowledge of mathematics and statistics to extract meaningful insights from data. Data science practitioners apply machine learning algorithms to numbers, text, images, video, audio, and more to produce artificial intelligence (AI) systems to perform tasks that ordinarily require human intelligence. In turn, these systems generate insights which analysts and business users can translate into tangible business value.\n","8f721399":"# **2. Pandas**\n\n*pandas is derived from the term \"panel data\", an econometrics term for data sets that include observations over multiple time periods for the same individuals.*\n\nThis tool is essentially your data\u2019s home. Through pandas, you get acquainted with your data by cleaning, transforming, and analyzing it. Python with Pandas is used in a wide range of fields including academic and commercial domains including finance, economics, Statistics, analytics, etc.\n\nFor example, say you want to explore a dataset stored in a CSV(comma - separated values) on your computer. Pandas will extract the data from that CSV into a DataFrame \u2014 a table, basically \u2014 then let you do things like:\n\n* Calculate statistics and answer questions about the data:\n-What's the average, median, max, or min of each column?\n-Does column A correlate with column B?\n-What does the distribution of data in column C look like?\n* Clean the data by doing things like removing missing values and filtering rows or columns by some criteria\n* Visualize the data with help from Matplotlib. Plot bars, lines, histograms, bubbles, and more.\n* Store the cleaned, transformed data back into a CSV, other file or database\n\n**Key Features of Pandas**\n\n* Fast and efficient DataFrame object with default and customized indexing.\n* Tools for loading data into in-memory data objects from different file formats.\n* Data alignment and integrated handling of missing data.\n* Reshaping and pivoting of date sets.\n* Label-based slicing, indexing and subsetting of large data sets.\n* Columns from a data structure can be deleted or inserted.\n* Group by data for aggregation and transformations.\n* High performance merging and joining of data.\n* Time Series functionality.","9b762fc1":"# Default arguments in Python\n\nPython allows function arguments to have default values. If the function is called without the argument, the argument gets its default value.\nPython has a different way of representing syntax and default values for function arguments. Default values indicate that the function argument will take that value if no argument value is passed during function call. The default value is assigned by using assignment(=) operator of the form keywordname=value.\n\n","b94894d2":"# Iterators in Python\n\n* Iterator in Python is simply an object that can be iterated upon. An object which will return data, one element at a time.\nThe iterator simply implements the Python's iterator protocol. The iterator protocol is a Python class which comes with two special methods, namely __iter__() and __next__(). With these two methods, the iterator is able to compute the next value in the iteration.\n* With iterators, it is easy for us to work with sequences of items in Python. We don't have to allocate computing resources to all the items in the sequence, rather we iterate upon single item at a time which helps us save the memory space.\nIterators have several advantages:\n* Cleaner code\n* Iterators can work with infinite sequences\n* Iterators save resources\nPython has several built-in objects, which implement the iterator protocol. For example lists, tuples, strings, dictionaries or files.\nThe iter() function (which in turn calls the __iter__() method) returns an iterator from them.\n* We use the next() function to manually iterate through all the items of an iterator. \nWhen we reach the end and there is no more data to be returned, it will raise the StopIteration Exception. ","01403f4c":"# Information about Dataset\n\nYouTube (the world-famous video sharing website) maintains a list of the top trending videos on the platform. According to Variety magazine, \u201cTo determine the year\u2019s top-trending videos, YouTube uses a combination of factors including measuring users interactions (number of views, shares, comments and likes). Note that they\u2019re not the most-viewed videos overall for the calendar year\u201d. Top performers on the YouTube trending list are music videos (such as the famously virile \u201cGangam Style\u201d), celebrity and\/or reality TV performances, and the random dude-with-a-camera viral videos that YouTube is well-known for.\n\nThis dataset is a daily record of the top trending YouTube videos.\n\n* This dataset includes several months (and counting) of data on daily trending YouTube videos. Data is included for the US, GB, DE, CA, and FR regions (USA, Great Britain, Germany, Canada,France, respectively) and RU, MX, KR, JP and IN regions (Russia, Mexico, South Korea, Japan and India respectively), with up to 200 listed trending videos per day. Data includes the video title, channel title, publish time, tags, views, likes and dislikes, description, and comment count.\n\n\n","450fb46f":"# Python Scope\n","ddca511c":"# 4. Matplotlib\n\nThe matplotlib Python library is used to create high-quality graphs, charts, and figures. The library is extensive and capable of changing very minute details of a figure. Some basic concepts and functions provided in matplotlib are:\n\n1. Figure and axes\nThe entire illustration is called a figure and each plot on it is an axes (do not confuse Axes with Axis). The figure can be thought of as a canvas on which several plots can be drawn. We obtain the figure and the axes using the subplots() function.\n\n2. Plotting\nThe very first thing required to plot a graph is data. A dictionary of key-value pairs can be declared, with keys and values as the x and y values. After that, \u200bscatter(), bar(), and pie(), along with tons of other functions, can be used to create the plot.\n\n3. Axis\nThe figure and axes obtained \u200busing subplots() can be used for modification. Properties of the x-axis and y-axis (labels, minimum and maximum values, etc.) can be changed using Axes.set().\n\nLine plot is better when x axis is time.\nScatter is better when there is correlation between two variables.\nHistogram is better when we need to see distribution of numerical data.\nCustomization: Colors,labels,thickness of line, title, opacity, grid, figsize, ticks of axis and linestyle.\n\n","6916bce8":"# What is a Nested Function?\n\nFunctions are one of the \"first-class citizens\" of Python, which means that functions are at the same level as other Python objects like integers, strings, modules, etc. They can be created and destroyed dynamically, passed to other functions, returned as values, etc.\nPython supports the concept of a \"nested function\" or \"inner function\", which is simply a function defined inside another function. There are various reasons as to why one would like to create a function inside another function. The inner function is able to access the variables within the enclosing scope. \n\nTo define an inner function in Python, we simply create a function inside another function using the Python's def keyword. Here is an example:","35fc133b":"# 3. OS \n\nPython OS module allows us to use the operating system dependent functionalities and to interact with the underlying operating system in several different ways. For example, we can work with files, change the environment variables, and we can move files around, etc. This is as same as overriding all the os built-in functionalities in a module and using them in a file I\/O and system handling.","40e2bdb9":"Seaborn is a Python library created for enhanced data visualization. It\u2019s a very timely and relevant tool for data professionals working today precisely because effective data visualization \u2013 and communication in general \u2013 is a particularly essential skill. Being able to bridge the gap between data and insight is hugely valuable, and Seaborn is a tool that fits comfortably in the toolchain of anyone interested in doing just that.\n\nHere is some of the functionality that seaborn offers:\n\n* A dataset-oriented API for examining relationships between multiple variables.\n* Specialized support for using categorical variables to show observations or aggregate statistics.\n* Options for visualizing univariate or bivariate distributions and for comparing them between subsets of data.\n* Automatic estimation and plotting of linear regression models for different kinds dependent variables.\n* Convenient views onto the overall structure of complex datasets.\n* High-level abstractions for structuring multi-plot grids that let you easily build complex visualizations.\n* Concise control over matplotlib figure styling with several built-in themes.\n* Tools for choosing color palettes that faithfully reveal patterns in your data.\n\nThe colors stand out, the layers blend nicely together, the contours flow throughout, and the overall package not only has a nice aesthetic quality, but it provides meaningful insights to us as well.\nThis is quite important in data science where we often work with a lot of messy data. Having the ability to visualize it is critical for a data scientist. Our stakeholders or clients will more often than not rely on visual cues rather than the intricacies of a machine learning model.\n\nSeaborn is complimentary to Matplotlib and it specifically targets statistical data visualization. But it goes even further than that: Seaborn extends Matplotlib and that\u2019s why it can address the two biggest frustrations of working with Matplotlib.If matplotlib \u201ctries to make easy things easy and hard things possible\u201d, seaborn tries to make a well-defined set of hard things easy too.","6df9389c":"# Python Anonymous\/Lambda Function\n\nWhile normal functions are defined using the def keyword in Python, anonymous functions are defined using the lambda keyword.\nHence, anonymous functions are also called lambda functions.A lambda function in python has the following syntax. \n\nlambda arguments: expression\n\nLambda functions can have any number of arguments but only one expression. The expression is evaluated and returned. Lambda functions can be used wherever function objects are required.","39d854ed":"Lambda functions are used along with built-in functions like filter(), map() etc.\n# filter() \nThe filter() function in Python takes in a function and a list as arguments.\nThe function is called with all the items in the list and a new list is returned which contains items for which the function evaluates to True.","dbcd3f83":"**What makes something count as data?** \n\nIs a handwritten ledger from the year 1500 considered data? Is a book sitting on a store shelf data? Are we all just data?\nIn the context of data science, the only form of data that matters is digital data.\nDigital data is information that is not easily interpreted by an individual but instead relies on machines to interpret, process, and alter it. The words you are reading on your computer screen are an example of this. These digital letters are actually a systematic collection of ones and zeros that encodes to pixels in various hues and at a specific density."}}