{"cell_type":{"5bf734b3":"code","067cf654":"code","cf2af3b5":"code","ec11cd54":"code","9dce5eca":"code","a65d726b":"code","5a38421a":"code","1a8df859":"code","90ad9dbd":"markdown","464d7abd":"markdown"},"source":{"5bf734b3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy.io.wavfile import read\nfrom scipy import signal\nfrom IPython.display import Audio, Image\nimport librosa\nimport librosa.display\nimport pylab\nfrom numpy.fft import fft, ifft\n%matplotlib inline\nimport math\nfrom PIL import Image, ImageDraw","067cf654":"# Load the data and get an idea of how the note names are stored\ntriads = pd.read_csv(\"\/kaggle\/input\/piano-triads-wavset\/triads.csv\")\ntriads.head(20)","cf2af3b5":"# This is a function to build a piano keyboard\n#\ndef make_keyboard(chord):\n    key_width = 15\n    key_height = 100\n    octaves = 7\n    \n    white_keys = [\"C\",\"D\",\"E\",\"F\",\"G\",\"A\",\"B\"]\n    black_keys = ['Cs',\"Eb\",\"Fs\",\"Gs\",\"Bb\"]\n    \n    notes2 = []\n    notes2.append([str(chord['Note1'].values[0]).split(\"_\")[0], str(chord['Note1'].values[0]).split(\"_\")[1]])\n    notes2.append([str(chord['Note2'].values[0]).split(\"_\")[0], str(chord['Note2'].values[0]).split(\"_\")[1]])\n    notes2.append([str(chord['Note3'].values[0]).split(\"_\")[0], str(chord['Note3'].values[0]).split(\"_\")[1]])\n    \n    img_width = (key_width) * 7 * (octaves + 1)\n    img_height = key_height + 5\n\n    img = Image.new(\"RGB\", (img_width, img_height), color=(230,230,230))\n    img1 = ImageDraw.Draw(img)\n\n    # Draw the white keys\n    for i in range(2, octaves + 2):\n        offset = (i * (key_width + 2) * 7) - ((key_width + 2) * 7 * 2)\n        \n        # Draw the white keys\n        j = 1\n        for note in white_keys:\n            fill_color = \"FFFFFF\"\n            if (note == notes2[0][0] and str(i) == notes2[0][1]) or (note == notes2[1][0] and str(i) == notes2[1][1]) or (note == notes2[2][0] and str(i) == notes2[2][1]):\n                fill_color = \"FF0000\"\n            x = j * (key_width + 2) + offset - key_width\n            w = j * (key_width + 2) + key_width + offset - key_width\n            img1.rectangle([(x, 0), (w, key_height)], fill = \"#\" + fill_color, outline =\"#555555\")\n            j += 1\n\n    # Draw the black keys\n    for i in range(2, octaves + 2):\n        offset = (i * (key_width + 2) * 7) - ((key_width + 2) * 7 * 2)\n        j = 1\n        for note in black_keys:\n            fill_color = \"444444\"\n            if (note == notes2[0][0] and str(i) == notes2[0][1]) or (note == notes2[1][0] and str(i) == notes2[1][1]) or (note == notes2[2][0] and str(i) == notes2[2][1]):\n                fill_color = \"FF0000\"\n\n            if (j == 3):\n                j += 1   \n            x = j * (key_width + 2) + offset - key_width + (key_width \/ 2) + 4\n            w = j * (key_width + 2) + key_width + offset - key_width  + (key_width \/ 2)\n            img1.rectangle([(x , 0), (w, key_height * .65)], fill = \"#\" + fill_color, outline = \"#555555\")\n                \n            j += 1\n\n    display(img)","ec11cd54":"# The chord we want to get (all chord names are uppercase, maj\/min is in lowercase)\nchord = \"G_dim\"\n\n# The Octave\noctave = \"6\"\n\n# Inversion (Root = 0, First Inversion = 1)\ninversion = \"0\"\n\n# Load the wav and make a player\nfilename = chord + \"_\" + octave + \"_\" + inversion","9dce5eca":"# Get the note names\/positions from the data\nchord = triads[triads['Chord'] == filename]\n\n# Display the notes on the keyboard\nmake_keyboard(chord)","a65d726b":"# Read the wav with IPython and make a player\nsample_rate, wav_data = read(\"..\/input\/piano-triads-wavset\/piano_triads\/\" + filename + \".wav\")\nAudio(wav_data, rate=sample_rate)","5a38421a":"# Plot out some waveforms and a Mel Freq spectrogram\ny, sr = librosa.load(\"..\/input\/piano-triads-wavset\/piano_triads\/\" + filename + \".wav\")\ny_harm, y_perc = librosa.effects.hpss(wav_data)\n\nfig, ax = plt.subplots(nrows=1, ncols= 3, figsize=(15,5))\nlibrosa.display.waveplot(y, sr=sr, ax=ax[0])\n\nlibrosa.display.waveplot(y_harm, sr=sr, alpha=0.25, ax=ax[1])\nlibrosa.display.waveplot(y_perc, sr=sr, color='r', alpha=0.5, ax=ax[1])\n\nS = librosa.feature.melspectrogram(y=y, sr=sr, n_mels=128, fmax=8000)\nS_dB = librosa.power_to_db(S, ref=np.max)\nmel = librosa.display.specshow(S_dB, x_axis='time', y_axis='mel', sr=sr, fmax=8000, ax=ax[2])\nfig.colorbar(mel, ax=ax[2], format='%+2.0f dB')\n\nax[0].set(title='Monophonic');\nax[1].set(title='Harmonic + Percussive');\nax[2].set(title='Mel-frequency spectrogram');\nax[2].set(title='New');","1a8df859":"n_fft = 2048\nhop_length = 512\n\nstft = librosa.core.stft(wav_data, hop_length=hop_length, n_fft=n_fft)\nspectrogram = np.abs(stft)\n\nlog_spectrogram = librosa.amplitude_to_db(spectrogram)\nlibrosa.display.specshow(log_spectrogram, sr=sr, hop_length=hop_length)\nplt.show()","90ad9dbd":"# Piano Triads Wavset\n\n### This notebook shows how to extract a triad, play it and visualize the notes on a piano keyboard.\n\n\nLink to dataset -> https:\/\/www.kaggle.com\/davidbroberts\/piano-triads-wavset\n\n- This dataset consists of 432 Wav files of piano triads across 6 octaves. \n\n- There are wavs for each of the 12 major, minor and diminished triad chords in both the root and first inversion positions.\n\n- The samples are 32 bit 44KHz mono, around 520K in size and 3 seconds in length. The total size of the wavs is around 220MB.\n\n- The chords are whole note in duration with a tempo of 120.\n\n- The CSV file (triads.csv) contains a list of each of the chord names, their octave on the keyboard, the inversion position, and the notes that make up the chord .\n\n- The chord names are delimited by two underscore characters which split it into four parts. Chords are maj, min or dim.\n\n- A lower case 's' following a note name denotes <i>sharp<\/i> notes\/chords. Lower case b indicates <i>flat<\/i> notes\/chords.\n\n- \"Cs_maj_2_0\" indicates the chord is a C Sharp Major, second octave, root position (inversion).\n\n- The octaves range from 2-7 .. with octave 5 being \"middle C\".\n\n- Side note .. I used E flat instead of D sharp (for all the purists :).\n\n- The Note1 column indicates the root note and its position. The remaining notes are in Note2 and Note3 columns.\n\n- All audio samples were recorded on a DAW.","464d7abd":"- This is where we specify the chord, it's position on the keyboard, and it's inversion.\n- Chord names follow this convention.\n-- Gs_maj = G Sharp Major\n-- A_min = A Minor\n-- Eb_maj = E Flat Major\n-- D_dim = D diminished\n\n\n- Octaves are from 2-7.\n\n- Inversion can be 0 or 1. 0 = Root position, 1 = First Inversion"}}