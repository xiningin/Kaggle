{"cell_type":{"a8969b58":"code","630e92d4":"code","b28efd68":"code","f85bd366":"code","b3aa8482":"code","95a82182":"code","07b304df":"code","7e8032be":"code","860f6e34":"code","c81abaa2":"code","a8ba4011":"code","bafcdac4":"code","ac46e45c":"code","41ffcc9a":"code","60acd9aa":"code","7af3aaee":"code","c1ddedfd":"code","89a2b297":"code","9fe8ff59":"code","b28518f5":"code","ef6992d7":"code","99a867bb":"code","8033dee6":"markdown","24eb3e87":"markdown","fb6729e0":"markdown","b63f129a":"markdown","94685696":"markdown","f299fa60":"markdown","3986749d":"markdown","3df70780":"markdown","27f86a11":"markdown","4de4b2a7":"markdown","9de6b5d0":"markdown","de694951":"markdown","6cce25c2":"markdown","1c20c7f0":"markdown","aa82eb35":"markdown","5697bf4d":"markdown"},"source":{"a8969b58":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","630e92d4":"#setup\nimport numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport ast\nimport json\nfrom PIL import Image, ImageDraw \n","b28efd68":"test_simplified = pd.read_csv(\"..\/input\/test_simplified.csv\")\ntest_simplified.head()","f85bd366":"display_test=pd.DataFrame()\ndisplay_test=display_test.append(pd.read_csv(\"..\/input\/test_simplified.csv\",usecols=['drawing'],nrows=50))\ndisplay_test.head()","b3aa8482":"display_test['drawing'] = display_test['drawing'].apply(json.loads)\ndisplay_test.shape","95a82182":"figrows=10\nfigcols=5\nfig, axs = plt.subplots(nrows=figrows, ncols=figcols, sharex=True, sharey=True, figsize=(16, 10))\nfor i, drawing in enumerate(display_test.drawing):\n    ax = axs[i \/\/ figcols, i % figcols]\n    for x, y in drawing:\n        ax.plot(x, -np.array(y), lw=3)\n    ax.axis('off')\nplt.show()","07b304df":"sample_submission = pd.read_csv(\"..\/input\/sample_submission.csv\")\nsample_submission.head()","7e8032be":"path_train = '..\/input\/train_simplified\/'\ntrain0 = pd.read_csv(path_train+(os.listdir(path_train)[0]))\ntrain0.head()","860f6e34":"path_train = '..\/input\/train_simplified\/'\ndisplay_samples=pd.DataFrame()\ndisplay_samples=display_samples.append(pd.read_csv(path_train+(os.listdir(path_train)[0]),usecols=['drawing', 'word'],nrows=50))\ndisplay_samples.head()","c81abaa2":"display_samples['drawing'] = display_samples['drawing'].apply(json.loads)\ndisplay_samples.shape","a8ba4011":"figrows=10\nfigcols=5\nfig, axs = plt.subplots(nrows=figrows, ncols=figcols, sharex=True, sharey=True, figsize=(16, 10))\nfor i, drawing in enumerate(display_samples.drawing):\n    ax = axs[i \/\/ figcols, i % figcols]\n    for x, y in drawing:\n        ax.set_title(display_samples.word.iloc[i])\n        ax.plot(x, -np.array(y), lw=3)\n    ax.axis('off')\nplt.show()","bafcdac4":"len(os.listdir(path_train))","ac46e45c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport ast\nimport os\nfrom glob import glob\nfrom tqdm import tqdm\nfrom dask import bag\nimport cv2\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.metrics import top_k_categorical_accuracy\nfrom keras.metrics import sparse_top_k_categorical_accuracy\nfrom keras.callbacks import ModelCheckpoint, ReduceLROnPlateau, EarlyStopping","41ffcc9a":"classfiles=os.listdir('..\/input\/train_simplified\/')\nnumstonames={i : v[:-4].replace(' ','_') for i , v in enumerate(classfiles)}\n\nnum_class=340\nimheight,imwidth=32,32\nims_per_class=2000","60acd9aa":"def stroke_to_img(strokes):\n    img=np.zeros((256,256))\n    for each in ast.literal_eval(strokes):\n        for i in range(len(each[0])-1):\n            cv2.line(img,(each[0][i],each[1][i]),(each[0][i+1],each[1][i+1]),255,5)\n    img=cv2.resize(img,(32,32))\n    img=img\/255\n    return img","7af3aaee":"rd=np.random.randint(340)\nranclass=numstonames[rd]\nranclass=ranclass.replace('_',' ')\nrdpath='..\/input\/train_simplified\/'+ranclass+'.csv'\none=pd.read_csv(rdpath,usecols=['drawing','recognized','word'],nrows=10)\none=one[one.recognized==True].head(2)\nname=one['word'].head(1)\nstrk=one['drawing']\npic=[]\nfor s in strk:\n    pic.append(stroke_to_img(s))\nname=name.values","c1ddedfd":"train_grand=[]\nclass_paths = glob('..\/input\/train_simplified\/*.csv')\nfor i , c in enumerate(tqdm(class_paths[0:num_class])):\n    train=pd.read_csv(c,usecols=['drawing','recognized'],nrows=ims_per_class*2)\n    train=train[train.recognized==True].head(ims_per_class)\n    imagebag=bag.from_sequence(train.drawing.values).map(stroke_to_img)\n    trainarray=np.array(imagebag.compute())\n    trainarray=np.reshape(trainarray,(ims_per_class,-1))\n    labelarray=np.full((train.shape[0],1),i)\n    trainarray=np.concatenate((labelarray,trainarray),axis=1)\n    train_grand.append(trainarray)\n\ntrain_grand=np.array([train_grand.pop() for i in np.arange(num_class)])\ntrain_grand=train_grand.reshape((-1,(imheight*imwidth+1)))\n\ndel trainarray\ndel train","89a2b297":"valfrac=0.2\ncutpt=int(valfrac*train_grand.shape[0])\n\nnp.random.shuffle(train_grand)\ny_train, x_train=train_grand[cutpt:,0],train_grand[cutpt:,1:]\ny_val,x_val=train_grand[0:cutpt,0], train_grand[0:cutpt,1:]\n\ndel train_grand\n\nx_train=x_train.reshape(x_train.shape[0],imheight,imwidth,1)\nx_val=x_val.reshape(x_val.shape[0],imheight,imwidth,1)","9fe8ff59":"model =Sequential()\nmodel.add(Conv2D(32,kernel_size=(3,3),padding='same',activation='relu',input_shape=(imheight,imwidth,1)))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Conv2D(64,kernel_size=(3,3),padding='same',activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Conv2D(64,kernel_size=(3,3),padding='same',activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Flatten())\nmodel.add(Dropout(0.5))\nmodel.add(Dense(680,activation='relu'))\nmodel.add(Dense(num_class,activation='softmax'))\nmodel.summary()","b28518f5":"def top_3_accuracy(x,y):\n    t3=sparse_top_k_categorical_accuracy(x,y,3)\n    return t3\n\nreduceLROnPlat=ReduceLROnPlateau(monitor='val_loss',factor=0.3,patience=5,verbose=1,mode='auto',min_delta=0.005,cooldown=5,min_lr=0.001)\nearlystop=EarlyStopping(monitor='val_acc',mode='max',patience=5)\ncallbacks=[reduceLROnPlat,earlystop]\n\nmodel.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['accuracy',top_3_accuracy])\n\nhistory=model.fit(x=x_train,y=y_train,batch_size=150,epochs=500,validation_data=(x_val,y_val),callbacks=callbacks,verbose=1)","ef6992d7":"acc=history.history['acc']\nval_acc=history.history['val_acc']\nloss= history.history['loss']\nval_loss=history.history['val_loss']\n\nepochs=range(1,len(acc)+1)\n\nplt.plot(epochs,acc,label='Training acc')\nplt.plot(epochs,val_acc,label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.legend()\n\nplt.figure()\n\nplt.plot(epochs,loss,label='Training loss')\nplt.plot(epochs,val_loss,label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\n\nplt.show()","99a867bb":"ttvlist=[]\nreader=pd.read_csv('..\/input\/test_simplified.csv',index_col=['key_id'],chunksize=2048)\nfor chunk in tqdm(reader,total=55):\n    imagebag=bag.from_sequence(chunk.drawing.values).map(stroke_to_img)\n    testarray=np.array(imagebag.compute())\n    testarray=np.reshape(testarray,(testarray.shape[0],imheight,imwidth,1))\n    testpreds=model.predict(testarray,verbose=0)\n    ttvs=np.argsort(-testpreds)[:,0:3]\n    ttvlist.append(ttvs)\nttvarray=np.concatenate(ttvlist)\npred_df=pd.DataFrame({'first': ttvarray[:,0],'second':ttvarray[:,1],'third':ttvarray[:,2]})\npred_df=pred_df.replace(numstonames)\npred_df['words']=pred_df['first']+' '+pred_df['second']+' '+pred_df['third']\n\nsub=pd.read_csv('..\/input\/sample_submission.csv',index_col=['key_id'])\nsub['word']=pred_df.words.values\nsub.to_csv('submission_summer.csv')","8033dee6":"########################################################################################\n# \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud574 \uc5ec\ub7ec \ub77c\uc774\ube0c\ub7ec\ub9ac import \ubc0f \uc0b4\ud3b4\ubcf4\uae30\n########################################################################################","24eb3e87":"########################################################################################\n# \uc5b4\ub5a4 \ub370\uc774\ud130\ub4e4\uc774 \uc874\uc7ac\ud558\ub294\uc9c0 \uc0b4\ud3b4\ubcf8\ub2e4.\n########################################################################################","fb6729e0":"# epoch\uc5d0 \ub530\ub978 \uc815\ud655\ub3c4\uc640 \uc190\uc2e4\ud568\uc218 \uadf8\ub9bc","b63f129a":"# <\ud55c\uacc4\uc810>\n\uc0ac\uc2e4\uc0c1 \uc774 \ubd84\uc11d\uc740 epoch\ub97c 200\ud68c \uc774\uc0c1\uc73c\ub85c \ud558\uc5ec \ubd84\uc11d\ud558\ub294\uac83\uc774 \uc633\uc9c0\ub9cc \ucef4\ud4e8\ud130\uc758 \uc0ac\uc591\uacfc \uc2dc\uac04 \ubd80\uc871\uc73c\ub85c \uc778\ud574 \uadf8\ub9ac\ub4dc\uc11c\uce58 \ub610\ub294 \ub79c\ub364\uc11c\uce58\ub97c \ud560 \uc218\uac00 \uc5c6\uc5c8\ub2e4. \n\uadf8\ub7ac\uae30 \ub54c\ubb38\uc5d0 \uc815\ud655\uc131\uc774 \ud604\uc800\ud788 \ub5a8\uc5b4\uc9c4\ub2e4.\n\n","94685696":"# CNN\uc744 \uc120\ud0dd\ud55c \uc774\uc720\n  \nCNN\uc740 \uc774\ubbf8\uc9c0 \uc778\uc2dd\uacfc \uc74c\uc11d \uc778\uc2dd \ub4f1 \ub2e4\uc591\ud55c \uacf3\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294\ub370, \ud2b9\ud788 \uc774\ubbf8\uc9c0 \uc778\uc2dd \ubd84\uc57c\uc5d0\uc11c \ub525\ub7ec\ub2dd\uc744 \ud65c\uc6a9\ud55c \uae30\ubc95\uc740 \uac70\uc758 \ub2e4 CNN\uc744 \uae30\ucd08\ub85c \ud55c\ub2e4.\n\uc9c0\uae08\uae4c\uc9c0\ub294 \uc644\uc804\uc5f0\uacb0(Affine) \uc2e0\uacbd\ub9dd\uc744 \uc0ac\uc6a9\ud588\ub2e4.\n\n\uc644\uc804\uc5f0\uacb0 \uacc4\uce35\uc5d0\uc11c\ub294 \uc778\uc811\ud558\ub294 \uacc4\uce35\uc758 \ub274\ub7f0\uc774 \ubaa8\ub450 \uc5f0\uacb0\ub418\uace0 \ucd9c\ub825\uc758 \uc218\ub294 \uc784\uc758\ub85c \uc815\ud560 \uc218 \uc788\ub2e4.\n\n\uc644\uc804\uc5f0\uacbd \uacc4\uce35\uc744 \uc0ac\uc6a9\ud558\uba74 \ub418\uc9c0 \uc54a\ub294\uac00?\n\n\uc644\uc804\uc5f0\uacb0 \uacc4\uce35\uc758 \ubb38\uc81c\uc810\uc740 \ubb34\uc5c7\uc778\uac00?\n\n\ubc14\ub85c '\ub370\uc774\ud130\uc758 \ud615\uc0c1\uc774 \ubb34\uc2dc'\ub41c\ub2e4\ub294 \uc0ac\uc2e4\uc774\ub2e4.\n\n\uc608\ub97c \ub4e4\uc5b4\ubcf4\uba74, \uc774\ubbf8\uc9c0\uc758 \uacbd\uc6b0 (\uac00\ub85c,\uc138\ub85c,\uc0c9\uc0c1)\uc73c\ub85c \uad6c\uc131\ub41c 3\ucc28\uc6d0 \ub370\uc774\ud130\uc774\ub2e4.\n\n\uadf8\ub7ec\ub098 \uc644\uc804\uc5f0\uacb0 \uacc4\uce35\uc5d0 \uc785\ub825\ud560 \ub54c\ub294 3\ucc28\uc6d0 \ub370\uc774\ud130\ub97c 1\ucc28\uc6d0\uc73c\ub85c \ud3c9\ud0c4\ud654(flatten=true)\ub97c \ud574\uc918\uc57c \ud55c\ub2e4.\n\n\uc774\ubbf8\uc9c0\uc758 3\ucc28\uc6d0 \ud615\uc0c1\uc5d0\ub294 \uc911\uc694\ud55c \uacf5\uac04\uc801 \uc815\ubcf4\uac00 \uc788\ub2e4. \n\n\uc608\ub97c\ub4e4\uc5b4 \uacf5\uac04\uc801\uc73c\ub85c \uac00\uae4c\uc6b4 \ud53d\uc140\uc740 \uac12\uc774 \ube44\uc2b7\ud558\uac70\ub098, \uc0c9\uc0c1\uc774 \ubc00\uc811\ud558\uac8c \uad00\ub828\ub418\uc5b4\uc788\ub2e4.\n\n\n\uc774\ub7ec\ud55c 3\ucc28\uc6d0 \uc18d\uc5d0\uc11c\uc758 \ud328\ud134\uc774 \uc644\uc804\uc5f0\uacb0 \uacc4\uce35\uc5d0\uc11c\ub294 \ubaa8\ub450 \ubb34\uc2dc\ud558\uace0 \ub3d9\ub4f1\ud55c \ub274\ub828\uc73c\ub85c \ucde8\uae09\ud558\uac8c \ub41c\ub2e4.\n\ud55c\ud3b8 \ud569\uc131\uacf1 \uacc4\uce35\uc740 \uc774 \ud615\uc0c1\uc744 \uc720\uc9c0\ud558\ubbc0\ub85c, \uc774\ubbf8\uc9c0\ub97c \uc81c\ub300\ub85c \uc774\ud574\ud560 \uc218 \uc788\ub2e4.\n\nCNN\uc5d0\uc11c\ub294 \ud569\uc131\uacf1 \uacc4\uce35\uc758 \uc785\ucd9c\ub825 \ub370\uc774\ud130\ub97c \ud2b9\uc9d5 \ub9f5(feature map)\uc774\ub77c\uace0\ub3c4 \ud55c\ub2e4.\n\n\ud569\uc131\uacf1 \uc5f0\uc0b0\uc740 \uc774\ubbf8\uc9c0 \ucc98\ub9ac\uc5d0\uc11c \ub9d0\ud558\ub294 \ud544\ud130\uc5f0\uc0b0\uc5d0 \ud574\ub2f9\ud55c\ub2e4.\n\n\ud544\ud130\ub294 \ucee4\ub110\uc774\ub77c\uace0\ub3c4 \ud55c\ub2e4.\n\n\n\n\n\uacb0\uacfc = \uac00\uc911\uce58\n\n\uacb0\uacfc\uc758 \ud06c\uae30 = \uc785\ub825-\ucee4\ub110+1 \n\n\n\n\n\ud569\uc131\uacf1 \uc5f0\uc0b0\uc740 \ud544\ud130\uc758 \uc708\ub3c4\uc6b0(window)\ub97c \uc77c\uc815 \uac04\uaca9\uc73c\ub85c \uc774\ub3d9\ud574\uac00\uba70 \uc785\ub825 \ub370\uc774\ud130\uc5d0 \uc801\uc6a9\ud55c\ub2e4.\n\n\ub300\uc751\ud558\ub294 \uc6d0\uc18c\ub07c\ub9ac \uacf1\ud55c \ud6c4 \uadf8 \ucd1d\ud569\uc744 \uad6c\ud55c\ub2e4.(\ub2e8\uc77c \uacf1\uc13c-\ub204\uc0b0 FMA)\n\n\uadf8 \uacb0\uacfc\ub97c \ucd9c\ub825\uc758 \ud574\ub2f9 \uc7a5\uc18c\uc5d0 \uc800\uc7a5\ud55c\ub2e4.\n\nCNN\uc5d0\uc11c\ub294 \ud544\ud130\uc758 \ub9e4\uac1c\ubcc0\uc218\uac00 \uadf8\ub3d9\uc548\uc758 '\uac00\uc911\uce58'\uc5d0 \ud574\ub2f9\ud55c\ub2e4.\n\n\ubb3c\ub860 CNN\uc5d0\ub3c4 \ud3b8\ud5a5\uc774 \uc874\uc7ac\ud55c\ub2e4.\n\n\ud3b8\ud5a5\uc744 \ud544\ud130\ub97c \uc801\uc6a9\ud55c \ud6c4\uc758 \ub370\uc774\ud130\uc5d0 \ub354\ud574\uc9c4\ub2e4.\n\n\ud3b8\ud5a5\uc740 \ud56d\uc0c1 \ud558\ub098(1*1)\ub9cc \uc874\uc7ac\ud55c\ub2e4.\n\n\ud328\ub529\uc774\ub780? \ud569\uc131\uacf1 \uc5f0\uc0b0\uc744 \uc218\ud589\ud558\uae30 \uc804\uc5d0 \uc785\ub825 \ub370\uc774\ud130 \uc8fc\ubcc0\uc744 \ud2b9\uc815\uac12(\uc608\ub97c \ub4e4\uc5b4 0)\uc73c\ub85c \ucc44\uc6b4\ub2e4. \uc774\ub97c \ud328\ub529\uc774\ub77c\uace0 \ud55c\ub2e4.\n\n\ud328\ub529\uc740 \uc8fc\ub85c \ucd9c\ub825 \ud06c\uae30\ub97c \uc870\uc815\ud560 \ubaa9\uc801\uc73c\ub85c \uc0ac\uc6a9\ud55c\ub2e4.\n\n\n\uc608\ub97c \ub4e4\uc5b4 (4,4)\uc785\ub825\ub370\uc774\ud130\uc5d0 (3,3)\ud544\ud130\ub97c \uc801\uc6a9\ud558\uba74 (2,2)\uac00 \ub41c\ub2e4.\n\n\uc774\ub807\uac8c \ud544\ud130\ub97c \uc801\uc6a9\ud558\ub2e4 \ubcf4\uba74, \uc5b4\ub290 \uc2dc\uc810\uc5d0\uc11c\ub294 \ucd9c\ub825 \ud06c\uae30\uac00 1\uc774\ub418\uc5b4\ubc84\ub9ac\uace0, \ud569\uc131\uacf1 \uc5f0\uc0b0\uc744 \uc801\uc6a9\ud560 \uc218 \uc5c6\ub2e4.\n\n\n\uc608\ub97c \ub4e4\uc5b4 (4,4)\uc785\ub825\ub370\uc774\ud130\uc5d0 \ud328\ub529 1\uc744 \uc801\uc6a9\ud558\uc5ec (3,3)\ud544\ud130\ub97c \uc801\uc6a9\ud558\uba74 (4,4)\uac00 \ub41c\ub2e4.\n\n\ud55c \ub9c8\ub514\ub85c \uc785\ub825 \ub370\uc774\ud130\uc758 \uacf5\uac04\uc801 \ud06c\uae30\ub97c \uace0\uc815\ud55c \ucc44\ub85c \ub2e4\uc74c \uacc4\uce35\uc5d0 \uc804\ub2ec \ud560 \uc218 \uc788\ub2e4.\n\n\n\n\n\ud544\ud130\ub97c \uc801\uc6a9\ud558\ub294 \uc704\uce58\uc758 \uac04\uaca9\uc744 \uc2a4\ud2b8\ub77c\uc774\ub4dc(stride)\ub77c\uace0 \ud55c\ub2e4.\n\n\uc9c0\uae08\uae4c\uc9c0\ub294 \ubaa8\ub450 \ud55c \uce78\uc529 \uc774\ub3d9\ud558\uc600\uc9c0\ub9cc, \uc2a4\ud2b8\ub77c\uc774\ub4dc\ub97c 2\ub85c\ud558\uba74 \uc544\ub798\uc640 \uac19\uc774 2\uce78\uc529 \uc774\ub3d9\ud55c\ub2e4.\n\n\uadf8\ub7f0\ub370 \uc704\uc5d0\uc11c \ubcf4\uba74 (7,7)\uc778 \uc785\ub825 \ub370\uc774\ud130\uc5d0 \uc2a4\ud2b8\ub77c\uc774\ub4dc 2\ub85c \uc124\uc815\ud55c \ud544\ud130\ub97c \uc801\uc6a9\ud558\ub2c8 \ucd9c\ub825\uc774 (3,3)\uc774 \ub418\uc5c8\ub2e4.\n\n\uc774\ucc98\ub7fc \uc2a4\ud2b8\ub77c\uc774\ub4dc\ub97c \ud0a4\uc6b0\uba74 \ucd9c\ub825 \ud06c\uae30\ub294 \uc791\uc544\uc9c4\ub2e4.\n\n[\ucd9c\ucc98] [\ud30c\uc774\uc36c][\ub525\ub7ec\ub2dd] CNN \ud569\uc131\uacf1 \uacc4\uce35|\uc791\uc131\uc790 \ud558\ucfe0\ub098\ub9c8\ud0c0\ud0c0\nhttps:\/\/blog.naver.com\/ssdyka\/221364894122\n","f299fa60":"PIL(Python Imaging Library)\uc740 \ud30c\uc774\uc36c\uc744 \uc774\uc6a9\ud574\uc11c \uc27d\uac8c \uc774\ubbf8\uc9c0 \ud504\ub85c\uc138\uc2f1\uc744 \ud560 \uc218 \uc788\uac8c \uc8fc\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc774\ub2e4. PIL\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \ubb38\uc11c\ub294 PIL\uc758 \uacf5\uc2dd Documentation \uc0ac\uc774\ud2b8(http:\/\/www.pythonware.com\/library\/pil\/handbook\/)\ub97c \ud655\uc778\ud560 \uc218\uc788\ub2e4.\n\nImage.new(mode, size) -> image Image.new(mode, size, color) -> image\n\n\uc774 \ud568\uc218\ub294 \uc8fc\uc5b4\uc9c4 \ud615\uc2dd\uc758 \uc0c8\ub85c\uc6b4 \uc774\ubbf8\uc9c0\ub97c \uc0dd\uc131\ud55c\ub2e4. mode\uc5d0\ub294 \"P\",\"RGB\", \"CMYK\", \"L\"(\ud751\ubc31 \ubaa8\ub4dc) \ub4f1\uc774 \uc0ac\uc6a9\ub420 \uc218 \uc788\ub2e4. size\uc5d0\ub294 \uac00\ub85c, \uc138\ub85c \ud06c\uae30\uac00 \uc815\uc218\ub85c \uc8fc\uc5b4\uc9c4 \ud29c\ud50c\uc774 \uc8fc\uc5b4\uc9c0\uba70, color\ub294 RGB \ubaa8\ub4dc\uc758 \uacbd\uc6b0 0~255\uc758 \uac12\uc744 \uac00\uc9c0\ub294 R, G, B \uc131\ubd84\uc73c\ub85c \uc774\ub8e8\uc5b4\uc9c4 \ud29c\ud50c\uc774 \uc804\ub2ec\ub41c\ub2e4. color \uc778\uc218\uac00 \uc8fc\uc5b4\uc9c0\uc9c0 \uc54a\uc73c\uba74 \uac80\uc815 \ubc14\ud0d5\uc758 \uc774\ubbf8\uc9c0\uac00 \uc0dd\uc131\ub418\uace0, color \uc778\uc218\uac00 \uc8fc\uc5b4\uc9c0\uba74 \uc8fc\uc5b4\uc9c4 \uc0c9\uc744 \ubc14\ud0d5\uc0c9\uc73c\ub85c \ud558\ub294 \uc774\ubbf8\uc9c0\uac00 \uc0dd\uc131\ub41c\ub2e4. \ub9ac\ud134\uac12\uc73c\ub85c\ub294 image \uac1d\uccb4\uc758 \uc778\uc2a4\ud134\uc2a4\uac00 \uc8fc\uc5b4\uc9c4\ub2e4.\n\n(\uc608) 256x256\uc0ac\uc774\uc988\uc758 \ud770\uc0c9 \ubc14\ud0d5\uc758 \uc774\ubbf8\uc9c0\ub97c \uc0dd\uc131\ud558\ub294 \ucf54\ub4dc image = Image.new(\"P\", (256,256), color=255)","3986749d":"########################################################################################\n# \uc22b\uc790\ub85c \ud45c\ud604\ub41c \uc88c\ud45c\ub4e4\uc740 \uadf8\ub9bc\uc73c\ub85c \ud45c\ud604 \ud574\ubcf4\uc558\ub2e4\n########################################################################################","3df70780":"# 2. \ucf00\ub77c\uc2a4 CNN \uc0ac\uc6a9","27f86a11":"# 1. \ub370\uc774\ud130 \uc0b4\ud3b4\ubcf4\uae30\n","4de4b2a7":"# TEST \uc801\uc6a9\ud558\uae30\n\n\ud558\ub098\uc758 \uadf8\ub9bc\uc744 \uac00\uc7a5 \ube44\uc2b7\ud55c \uadf8\ub9bc\uc73c\ub85c \uc608\uce21 \ub418\ub294 3\uac1c\ub85c label \uc608\uce21\ud574\ubcf4\uae30","9de6b5d0":"**\ubaa8\ub4e0 \ud559\uc2b5\ub370\uc774\ud130 merge**","de694951":"########################################################################################\n# \ud558\ub098\uc758 \ub370\uc774\ud130 sleeping bag\uc758 \uadf8\ub9bc\uc744 \uadf8\ub824\ubd04\n########################################################################################","6cce25c2":"epochs\ub294 \uc804\uccb4 \uc0d8\ud50c \ub370\uc774\ud130\ub97c \uc774\uc6a9\ud558\uc5ec \ud55c\ubc14\ud034 \ub3cc\uba70 \ud559\uc2b5\ud558\ub294 \uac83\uc744 1\ud68c epoch\ub77c\uace0\ud55c\ub2e4. \ubc18\ubcf5 \ud69f\uc218\ub97c 100, 150, 200, 300\ud68c\ub85c \uac01\uac01 \uc801\ud569 \ud574\ubcf4\uba70 \uc801\uc808\ud55c epoch\ub97c \ucc3e\uc73c\ub824\uace0 \ub178\ub825 \ud574\uc57c\ud558\uc9c0\ub9cc \uc774 \ub370\uc774\ud130\ub294 \ub108\ubb34\ub098\ub3c4 \ub9ce\uae30 \ub54c\ubb38\uc5d0 1\ud68c epoch\ub85c \uc124\uc815\ud558\uc600\ub2e4.\n\nbatch_size(1\ud68c step\uc5d0 \uc0ac\uc6a9\ud55c \ub370\uc774\ud130\uc758 \uc218)\ub294 1000\uc73c\ub85c \uc124\uc815\ud558\uc600\ub2e4.\n\nkeras\ub97c \ud65c\uc6a9\ud558\uc5ec \uc2e0\uacbd\ub9dd\uc744 \uad6c\ucd95\ud574\uc900\ub2e4. \uc774 \ub54c, \uc740\ub2c9\uce35\uc740 16\uac1c\uc774\uba70 \ud65c\uc131\ud654\ud568\uc218\ub294 \u2018relu\u2019 \ud568\uc218\ub97c \uc0ac\uc6a9\ud55c\ub2e4.\n\ub9c8\uc9c0\ub9c9 \ucd9c\ub825\uce35\uc5d0\uc11c\uc758 \ud65c\uc131\ud654 \ud568\uc218\ub294 softmax\ub97c \uc0ac\uc6a9\ud558\uc600\ub2e4.\n\nmodel.compile()\uc5d0\uc11c\ub294 optimizer\ub97c rmsprop, adagrad, adadelta, adam, adamax, nadam(\ucc38\uace0: https:\/\/keras.io\/optimizers\/)\uc744 \uc120\ud0dd \ud560 \uc218 \uc788\uc73c\uba70 \uc5ec\uae30\uc11c\ub294 'adagrad'\ub97c \ud65c\uc6a9\ud558\uc5ec \uc2e0\uacbd\ub9dd\uc744 \uad6c\ucd95\ud558\uc600\ub2e4.\nmetrics\ub294 \uc815\ud655\ub3c4\ub97c \uae30\uc900\uc73c\ub85c \ud558\uc600\uc73c\uba70, \uc190\uc2e4\ud568\uc218\ub85c\ub294 categorical_crossentropy\ub97c \uc0ac\uc6a9\ud55c\ub2e4.\n\nmodel.compile(loss='categorical_crossentropy',\n                  optimizer=adagrad,\n                  metrics=['accuracy'])\n                  \n\ub530\ub77c\uc11c categorical_crossentropy\ubc29\uc2dd\uc73c\ub85c \uc190\uc2e4 \ud568\uc218\uc5d0 \ub123\uc5b4 loss score\ub97c \uad6c\ud55c \ub4a4, optimizer adagrad\ub97c \uc0ac\uc6a9\ud558\uc5ec \uac00\uc911\uce58 update\ub97c \ud574\uc11c \uac12\uc744 \ub3c4\ucd9c \ud55c \ub4a4, \ud6c8\ub828\ud558\ub294 \ub3d9\uc548 \ubaa8\ub2c8\ud130\ub9c1\uc73c\ub85c metrics\ud568\uc218 \ub97c \uc0ac\uc6a9\ud558\ub294\ub370 accuracy\ub85c \uc608\uce21 \uac12\uc744 \uce21\uc815\ud55c\ub2e4.****","1c20c7f0":"epochs\ub294 \uc804\uccb4 \uc0d8\ud50c \ub370\uc774\ud130\ub97c \uc774\uc6a9\ud558\uc5ec \ud55c\ubc14\ud034 \ub3cc\uba70 \ud559\uc2b5\ud558\ub294 \uac83\uc744 1\ud68c epoch\ub77c\uace0\ud55c\ub2e4. \ubc18\ubcf5 \ud69f\uc218\ub97c 100, 150, 200, 300,500\ud68c\ub85c \uac01\uac01 \uc801\ud569 \ud574\ubcf4\uba70 \uc801\uc808\ud55c epoch\ub97c \ucc3e\uc73c\ub824\uace0 \ub178\ub825 \ud574\uc57c\ud558\uc9c0\ub9cc \uc774 \ub370\uc774\ud130\ub294 \ub108\ubb34\ub098\ub3c4 \ub9ce\uae30 \ub54c\ubb38\uc5d0 500\ud68c epoch\ub85c \uc2dc\ub3c4\ud574\ubcf4\ub824\uace0\ud55c\ub2e4.\n\nbatch_size(1\ud68c step\uc5d0 \uc0ac\uc6a9\ud55c \ub370\uc774\ud130\uc758 \uc218)\ub294 150\uc73c\ub85c \uc124\uc815\ud558\uc600\ub2e4.\n\nkeras\ub97c \ud65c\uc6a9\ud558\uc5ec \uc2e0\uacbd\ub9dd\uc744 \uad6c\ucd95\ud574\uc900\ub2e4. \uc774 \ub54c, \ud65c\uc131\ud654\ud568\uc218\ub294 \u2018relu\u2019 \ud568\uc218\ub97c \uc0ac\uc6a9\ud55c\ub2e4. \ub9c8\uc9c0\ub9c9 \ucd9c\ub825\uce35\uc5d0\uc11c\uc758 \ud65c\uc131\ud654 \ud568\uc218\ub294 softmax\ub97c \uc0ac\uc6a9\ud558\uc600\ub2e4.\n\nmodel.compile()\uc5d0\uc11c\ub294 optimizer\ub97c rmsprop, adagrad, adadelta, adam, adamax, nadam(\ucc38\uace0: https:\/\/keras.io\/optimizers\/)\uc744 \uc120\ud0dd \ud560 \uc218 \uc788\uc73c\uba70 \uc5ec\uae30\uc11c\ub294 'adam'\ub97c \ud65c\uc6a9\ud558\uc5ec \uc2e0\uacbd\ub9dd\uc744 \uad6c\ucd95\ud558\uc600\ub2e4. metrics\ub294 \uc815\ud655\ub3c4\ub97c \uae30\uc900\uc73c\ub85c \ud558\uc600\uc73c\uba70, \uc190\uc2e4\ud568\uc218\ub85c\ub294 sparse_categorical_crossentropy\ub97c \uc0ac\uc6a9\ud55c\ub2e4.\n\nmodel.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['accuracy',top_3_accuracy])\n\n\ub530\ub77c\uc11c sparse_categorical_crossentropy\ubc29\uc2dd\uc73c\ub85c \uc190\uc2e4 \ud568\uc218\uc5d0 \ub123\uc5b4 loss score\ub97c \uad6c\ud55c \ub4a4, optimizer adam\ub97c \uc0ac\uc6a9\ud558\uc5ec \uac00\uc911\uce58 update\ub97c \ud574\uc11c \uac12\uc744 \ub3c4\ucd9c \ud55c \ub4a4, \ud6c8\ub828\ud558\ub294 \ub3d9\uc548 \ubaa8\ub2c8\ud130\ub9c1\uc73c\ub85c metrics\ud568\uc218 \ub97c \uc0ac\uc6a9\ud558\ub294\ub370 accuracy,top_3_accuracy\ub85c \uc608\uce21 \uac12\uc744 \uce21\uc815\ud55c\ub2e4.","aa82eb35":"\ub2e4\uc74c\uc5d0\ub294 \uc774\ubbf8\uc9c0 \ubd84\ub958\uae30\ub97c \ub9cc\ub4e4 \uac83\uc774\ub2e4. \uc55e\uc11c \uc5b8\uae09\ud55c \uc800\uc7a5\uc18c\uc5d0 \uc0ac\ub78c\ub4e4\uc774 \ub370\uc774\ud130\ub97c \uc5b4\ub5bb\uac8c \uc0ac\uc6a9\ud574 \uc654\ub294\uc9c0\ub97c \ubcf4\uc5ec\uc8fc\ub294 \uba87 \uac00\uc9c0 \ub9ac\uc18c\uc2a4\uac00 \uc788\ub2e4.\n\n\uadf8 \uc790\uc6d0\ub4e4 \uc911 \ud558\ub098\ub294 \uc5ec\uae30 \ubcf4\uc774\ub294 \uac83\uacfc \uac19\uc740 CNN\uc774\ub2e4.\n\n\uc790\uc6d0\uc758 \uac00\uc7a5 \ud070 \uc6a9\ub3c4\ub294 \ub3c4\uba74\uc744 \uc774\ubbf8\uc9c0\ub85c \ubcc0\ud658\ud558\ub294 \uac83 \uac19\ub2e4. \uc2a4\ud2b8\ub85c\ud06c \uae30\ubc18 \ubaa8\ub378\uc744 \uace0\uc218\ud558\uac70\ub098 \ubcc0\ud658 \uacbd\ub85c\ub97c \ub530\ub77c \uc774\ub3d9\ud560 \uc218 \uc788\ub2e4. \n\n\uadf8\ub807\uac8c \ud558\ub824\uba74 \ub370\uc774\ud130 \uc0ac\uc6a9\ub7c9 \uac10\uc2dc\uc640 \uacf5\uac04 \uc81c\ud55c \uad00\ub9ac \ud544\uc694 - \uce74\uae00\uc5d0 \ub300\ud55c \uae4a\uc740 \ud559\uc2b5\uc740 \ubcd1 \uc548\uc5d0 \ubc30\ub97c \ub9cc\ub4dc\ub294 \uac83\uacfc \uac19\uc744 \uc218 \uc788\ub2e4:)\n","5697bf4d":"\ubd84\uc11d \uc21c\uc11c\n1. \ub370\uc774\ud130 \uc0b4\ud3b4\ubcf4\uae30\n2. CNN \uc801\uc6a9\n"}}