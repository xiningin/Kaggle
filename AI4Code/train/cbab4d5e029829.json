{"cell_type":{"5ac8ed27":"code","2de5b8c4":"code","f9331d51":"code","4c812962":"code","661c8344":"code","ba4f54e0":"markdown","0d091ae4":"markdown","6b28bd43":"markdown","ef2be36a":"markdown","2e6c1de1":"markdown","ad9dace0":"markdown","bf3c4ee6":"markdown","cbd2d607":"markdown"},"source":{"5ac8ed27":"!pip install -U symspellpy","2de5b8c4":"import pkg_resources\nfrom symspellpy.symspellpy import SymSpell\nimport time\n\n# Set max_dictionary_edit_distance to avoid spelling correction\nsym_spell = SymSpell(max_dictionary_edit_distance=0, prefix_length=7)\ndictionary_path = pkg_resources.resource_filename(\n    \"symspellpy\", \"frequency_dictionary_en_82_765.txt\")\n# term_index is the column of the term and count_index is the\n# column of the term frequency\nsym_spell.load_dictionary(dictionary_path, term_index=0, count_index=1)\n\n# a sentence without any spaces\ninput_term_one = \"thequickbrownfoxjumpsoverthelazydog\"\ninput_term_two = \"I hated youu.\"\nresult = sym_spell.word_segmentation(input_term_one)\nstart = time.time()\nprint(\"{}, {}, {}\".format(result.corrected_string, result.distance_sum,\n                          result.log_prob_sum))\nend = time.time()\nprint(\"Spell Checking s\u00fcresi:\",(end - start))\nstart = time.time()\nresult = sym_spell.word_segmentation(input_term_two)\nprint(\"{}, {}, {}\".format(result.corrected_string, result.distance_sum,\n                          result.log_prob_sum))\nend = time.time()\nprint(\"Spell Checking s\u00fcresi:\",(end - start))","f9331d51":"import pkg_resources\nfrom symspellpy import SymSpell, Verbosity\nimport time\n\nsym_spell = SymSpell(max_dictionary_edit_distance=2, prefix_length=7)\ndictionary_path = pkg_resources.resource_filename(\n    \"symspellpy\", \"frequency_dictionary_en_82_765.txt\")\nbigram_path = pkg_resources.resource_filename(\n    \"symspellpy\", \"frequency_bigramdictionary_en_243_342.txt\")\n# term_index is the column of the term and count_index is the\n# column of the term frequency\nsym_spell.load_dictionary(dictionary_path, term_index=0, count_index=1)\nsym_spell.load_bigram_dictionary(bigram_path, term_index=0, count_index=2)\n\n# lookup suggestions for multi-word input strings (supports compound\n# splitting & merging)\ninput_term = (\"whereis th elove hehad dated forImuch of thepast who \"\n              \"couqdn'tread in sixtgrade and ins pired him\")\n# max edit distance per lookup (per single word, not per whole input string)\nstart = time.time()\nsuggestions = sym_spell.lookup_compound(input_term, max_edit_distance=2)\n# display suggestion term, edit distance, and term frequency\nfor suggestion in suggestions:\n    print(suggestion)\n\nend = time.time()\nprint(\"Spell Checking s\u00fcresi:\",(end - start))\ninput_term_two = (\"I hate thi boook but I like it this girll\")\nstart = time.time()\nsuggestions_two = sym_spell.lookup_compound(input_term_two,max_edit_distance=2)\nfor suggestion in suggestions_two:\n    print(suggestion)\nend = time.time()\nprint(\"Spell Checking s\u00fcresi:\",(end - start))","4c812962":"import pkg_resources\nfrom symspellpy import SymSpell, Verbosity\nimport time\n\nsym_spell = SymSpell(max_dictionary_edit_distance=2, prefix_length=7)\ndictionary_path = pkg_resources.resource_filename(\n    \"symspellpy\", \"frequency_dictionary_en_82_765.txt\")\nbigram_path = pkg_resources.resource_filename(\n    \"symspellpy\", \"frequency_bigramdictionary_en_243_342.txt\")\n# term_index is the column of the term and count_index is the\n# column of the term frequency\nsym_spell.load_dictionary(dictionary_path, term_index=0, count_index=1)\nsym_spell.load_bigram_dictionary(bigram_path, term_index=0, count_index=2)\n\n# lookup suggestions for multi-word input strings (supports compound\n# splitting & merging)\ninput_term = (\"whereis th elove heHAd dated forImuch of thEPast who \"\n              \"couqdn'tread in sixtgrade and ins pired him\")\n# max edit distance per lookup (per single word, not per whole input string)\nstart = time.time()\nsuggestions = sym_spell.lookup_compound(input_term, max_edit_distance=2,\n                                        transfer_casing=True)\n# display suggestion term, edit distance, and term frequency\n\nfor suggestion in suggestions:\n    print(suggestion)\nend = time.time()\nprint(\"Spell Checking zaman\u0131:\",(end - start))\ninput_term_two = (\"I hate thi boook but I like it this girll\")\nstart = time.time()\n# max edit distance per lookup (per single word, not per whole input string)\nsuggestions_two = sym_spell.lookup_compound(input_term_two, max_edit_distance=2,\n                                        transfer_casing=True)\nfor suggestion in suggestions_two:\n    print(suggestion)\nend = time.time()\nprint(\"Spell Checking zaman\u0131:\",(end - start))\n","661c8344":"\"\"\"\nThe spell checker has been entirely ripped off of this script by Serg Lavrikov(rumbok):\nhttps:\/\/www.kaggle.com\/rumbok\/ridge-lb-0-41944\n\ndo check it out, its a work of art.\n\ncaveat: script consumes a lot of memory but is much faster than Norvig's spell checker (1 million times)\nhttp:\/\/blog.faroo.com\/2015\/03\/24\/fast-approximate-string-matching-with-large-edit-distances\/\n\"\"\"\n\nimport time \nimport re, random\nimport spacy\nnlp = spacy.load('en')\n\nto_sample = False # if you're impatient switch this flag\n\ndef spacy_tokenize(text):\n    return [token.text for token in nlp.tokenizer(text)]\n    \ndef dameraulevenshtein(seq1, seq2):\n    \"\"\"Calculate the Damerau-Levenshtein distance between sequences.\n    This method has not been modified from the original.\n    Source: http:\/\/mwh.geek.nz\/2009\/04\/26\/python-damerau-levenshtein-distance\/\n    This distance is the number of additions, deletions, substitutions,\n    and transpositions needed to transform the first sequence into the\n    second. Although generally used with strings, any sequences of\n    comparable objects will work.\n    Transpositions are exchanges of *consecutive* characters; all other\n    operations are self-explanatory.\n    This implementation is O(N*M) time and O(M) space, for N and M the\n    lengths of the two sequences.\n    >>> dameraulevenshtein('ba', 'abc')\n    2\n    >>> dameraulevenshtein('fee', 'deed')\n    2\n    It works with arbitrary sequences too:\n    >>> dameraulevenshtein('abcd', ['b', 'a', 'c', 'd', 'e'])\n    2\n    \"\"\"\n    # codesnippet:D0DE4716-B6E6-4161-9219-2903BF8F547F\n    # Conceptually, this is based on a len(seq1) + 1 * len(seq2) + 1 matrix.\n    # However, only the current and two previous rows are needed at once,\n    # so we only store those.\n    oneago = None\n    thisrow = list(range(1, len(seq2) + 1)) + [0]\n    for x in range(len(seq1)):\n        # Python lists wrap around for negative indices, so put the\n        # leftmost column at the *end* of the list. This matches with\n        # the zero-indexed strings and saves extra calculation.\n        twoago, oneago, thisrow = (oneago, thisrow, [0] * len(seq2) + [x + 1])\n        for y in range(len(seq2)):\n            delcost = oneago[y] + 1\n            addcost = thisrow[y - 1] + 1\n            subcost = oneago[y - 1] + (seq1[x] != seq2[y])\n            thisrow[y] = min(delcost, addcost, subcost)\n            # This block deals with transpositions\n            if (x > 0 and y > 0 and seq1[x] == seq2[y - 1]\n                    and seq1[x - 1] == seq2[y] and seq1[x] != seq2[y]):\n                thisrow[y] = min(thisrow[y], twoago[y - 2] + 1)\n    return thisrow[len(seq2) - 1]\n\n\nclass SymSpell:\n    def __init__(self, max_edit_distance=3, verbose=0):\n        self.max_edit_distance = max_edit_distance\n        self.verbose = verbose\n        # 0: top suggestion\n        # 1: all suggestions of smallest edit distance\n        # 2: all suggestions <= max_edit_distance (slower, no early termination)\n\n        self.dictionary = {}\n        self.longest_word_length = 0\n\n    def get_deletes_list(self, w):\n        \"\"\"given a word, derive strings with up to max_edit_distance characters\n           deleted\"\"\"\n\n        deletes = []\n        queue = [w]\n        for d in range(self.max_edit_distance):\n            temp_queue = []\n            for word in queue:\n                if len(word) > 1:\n                    for c in range(len(word)):  # character index\n                        word_minus_c = word[:c] + word[c + 1:]\n                        if word_minus_c not in deletes:\n                            deletes.append(word_minus_c)\n                        if word_minus_c not in temp_queue:\n                            temp_queue.append(word_minus_c)\n            queue = temp_queue\n\n        return deletes\n\n    def create_dictionary_entry(self, w):\n        '''add word and its derived deletions to dictionary'''\n        # check if word is already in dictionary\n        # dictionary entries are in the form: (list of suggested corrections,\n        # frequency of word in corpus)\n        new_real_word_added = False\n        if w in self.dictionary:\n            # increment count of word in corpus\n            self.dictionary[w] = (self.dictionary[w][0], self.dictionary[w][1] + 1)\n        else:\n            self.dictionary[w] = ([], 1)\n            self.longest_word_length = max(self.longest_word_length, len(w))\n\n        if self.dictionary[w][1] == 1:\n            # first appearance of word in corpus\n            # n.b. word may already be in dictionary as a derived word\n            # (deleting character from a real word)\n            # but counter of frequency of word in corpus is not incremented\n            # in those cases)\n            new_real_word_added = True\n            deletes = self.get_deletes_list(w)\n            for item in deletes:\n                if item in self.dictionary:\n                    # add (correct) word to delete's suggested correction list\n                    self.dictionary[item][0].append(w)\n                else:\n                    # note frequency of word in corpus is not incremented\n                    self.dictionary[item] = ([w], 0)\n\n        return new_real_word_added\n\n    def create_dictionary_from_arr(self, arr, token_pattern=r'[a-z]+'):\n        total_word_count = 0\n        unique_word_count = 0\n\n        for line in arr:\n            # separate by words by non-alphabetical characters\n            words = re.findall(token_pattern, line.lower())\n            for word in words:\n                total_word_count += 1\n                if self.create_dictionary_entry(word):\n                    unique_word_count += 1\n\n        print(\"total words processed: %i\" % total_word_count)\n        print(\"total unique words in corpus: %i\" % unique_word_count)\n        print(\"total items in dictionary (corpus words and deletions): %i\" % len(self.dictionary))\n        print(\"  edit distance for deletions: %i\" % self.max_edit_distance)\n        print(\"  length of longest word in corpus: %i\" % self.longest_word_length)\n        return self.dictionary\n\n    def create_dictionary(self, fname):\n        total_word_count = 0\n        unique_word_count = 0\n\n        with open(fname) as file:\n            for line in file:\n                # separate by words by non-alphabetical characters\n                words = re.findall('[a-z]+', line.lower())\n                for word in words:\n                    total_word_count += 1\n                    if self.create_dictionary_entry(word):\n                        unique_word_count += 1\n\n        print(\"total words processed: %i\" % total_word_count)\n        print(\"total unique words in corpus: %i\" % unique_word_count)\n        print(\"total items in dictionary (corpus words and deletions): %i\" % len(self.dictionary))\n        print(\"  edit distance for deletions: %i\" % self.max_edit_distance)\n        print(\"  length of longest word in corpus: %i\" % self.longest_word_length)\n        return self.dictionary\n\n    def get_suggestions(self, string, silent=False):\n        \"\"\"return list of suggested corrections for potentially incorrectly\n           spelled word\"\"\"\n        if (len(string) - self.longest_word_length) > self.max_edit_distance:\n            if not silent:\n                print(\"no items in dictionary within maximum edit distance\")\n            return []\n\n        suggest_dict = {}\n        min_suggest_len = float('inf')\n\n        queue = [string]\n        q_dictionary = {}  # items other than string that we've checked\n\n        while len(queue) > 0:\n            q_item = queue[0]  # pop\n            queue = queue[1:]\n\n            # early exit\n            if ((self.verbose < 2) and (len(suggest_dict) > 0) and\n                    ((len(string) - len(q_item)) > min_suggest_len)):\n                break\n\n            # process queue item\n            if (q_item in self.dictionary) and (q_item not in suggest_dict):\n                if self.dictionary[q_item][1] > 0:\n                    # word is in dictionary, and is a word from the corpus, and\n                    # not already in suggestion list so add to suggestion\n                    # dictionary, indexed by the word with value (frequency in\n                    # corpus, edit distance)\n                    # note q_items that are not the input string are shorter\n                    # than input string since only deletes are added (unless\n                    # manual dictionary corrections are added)\n                    assert len(string) >= len(q_item)\n                    suggest_dict[q_item] = (self.dictionary[q_item][1],\n                                            len(string) - len(q_item))\n                    # early exit\n                    if (self.verbose < 2) and (len(string) == len(q_item)):\n                        break\n                    elif (len(string) - len(q_item)) < min_suggest_len:\n                        min_suggest_len = len(string) - len(q_item)\n\n                # the suggested corrections for q_item as stored in\n                # dictionary (whether or not q_item itself is a valid word\n                # or merely a delete) can be valid corrections\n                for sc_item in self.dictionary[q_item][0]:\n                    if sc_item not in suggest_dict:\n\n                        # compute edit distance\n                        # suggested items should always be longer\n                        # (unless manual corrections are added)\n                        assert len(sc_item) > len(q_item)\n\n                        # q_items that are not input should be shorter\n                        # than original string\n                        # (unless manual corrections added)\n                        assert len(q_item) <= len(string)\n\n                        if len(q_item) == len(string):\n                            assert q_item == string\n                            item_dist = len(sc_item) - len(q_item)\n\n                        # item in suggestions list should not be the same as\n                        # the string itself\n                        assert sc_item != string\n\n                        # calculate edit distance using, for example,\n                        # Damerau-Levenshtein distance\n                        item_dist = dameraulevenshtein(sc_item, string)\n\n                        # do not add words with greater edit distance if\n                        # verbose setting not on\n                        if (self.verbose < 2) and (item_dist > min_suggest_len):\n                            pass\n                        elif item_dist <= self.max_edit_distance:\n                            assert sc_item in self.dictionary  # should already be in dictionary if in suggestion list\n                            suggest_dict[sc_item] = (self.dictionary[sc_item][1], item_dist)\n                            if item_dist < min_suggest_len:\n                                min_suggest_len = item_dist\n\n                        # depending on order words are processed, some words\n                        # with different edit distances may be entered into\n                        # suggestions; trim suggestion dictionary if verbose\n                        # setting not on\n                        if self.verbose < 2:\n                            suggest_dict = {k: v for k, v in suggest_dict.items() if v[1] <= min_suggest_len}\n\n            # now generate deletes (e.g. a substring of string or of a delete)\n            # from the queue item\n            # as additional items to check -- add to end of queue\n            assert len(string) >= len(q_item)\n\n            # do not add words with greater edit distance if verbose setting\n            # is not on\n            if (self.verbose < 2) and ((len(string) - len(q_item)) > min_suggest_len):\n                pass\n            elif (len(string) - len(q_item)) < self.max_edit_distance and len(q_item) > 1:\n                for c in range(len(q_item)):  # character index\n                    word_minus_c = q_item[:c] + q_item[c + 1:]\n                    if word_minus_c not in q_dictionary:\n                        queue.append(word_minus_c)\n                        q_dictionary[word_minus_c] = None  # arbitrary value, just to identify we checked this\n\n        # queue is now empty: convert suggestions in dictionary to\n        # list for output\n        if not silent and self.verbose != 0:\n            print(\"number of possible corrections: %i\" % len(suggest_dict))\n            print(\"  edit distance for deletions: %i\" % self.max_edit_distance)\n\n        # output option 1\n        # sort results by ascending order of edit distance and descending\n        # order of frequency\n        #     and return list of suggested word corrections only:\n        # return sorted(suggest_dict, key = lambda x:\n        #               (suggest_dict[x][1], -suggest_dict[x][0]))\n\n        # output option 2\n        # return list of suggestions with (correction,\n        #                                  (frequency in corpus, edit distance)):\n        as_list = suggest_dict.items()\n        # outlist = sorted(as_list, key=lambda (term, (freq, dist)): (dist, -freq))\n        outlist = sorted(as_list, key=lambda x: (x[1][1], -x[1][0]))\n\n        if self.verbose == 0:\n            return outlist[0]\n        else:\n            return outlist\n\n        '''\n        Option 1:\n        ['file', 'five', 'fire', 'fine', ...]\n        Option 2:\n        [('file', (5, 0)),\n         ('five', (67, 1)),\n         ('fire', (54, 1)),\n         ('fine', (17, 1))...]  \n        '''\n\n    def best_word(self, s, silent=False):\n        try:\n            return self.get_suggestions(s, silent)[0]\n        except:\n            return None\n\ndef spell_corrector(word_list, words_d) -> str:\n    result_list = []\n    for word in word_list:\n        if word not in words_d:\n            suggestion = ss.best_word(word, silent=True)\n            if suggestion is not None:\n                result_list.append(suggestion)\n        else:\n            result_list.append(word)\n            \n    return \" \".join(result_list)\n\nif __name__ == '__main__':\n    # build symspell tree \n    ss = SymSpell(max_edit_distance=2)\n    \n    # fetch list of bad words\n    with open('..\/input\/bad-bad-words\/bad-words.csv') as bf:\n        bad_words = bf.readlines()\n    bad_words = [word.strip() for word in bad_words]    \n    \n    # fetch english words dictionary\n    with open('..\/input\/479k-english-words\/english_words_479k.txt') as f:\n        words = f.readlines()\n    eng_words = [word.strip() for word in words]\n    \n    # Print some examples\n    print(eng_words[:5])\n    print(bad_words[:5])\n\n    print('Total english words: {}'.format(len(eng_words)))\n    print('Total bad words: {}'.format(len(bad_words)))\n    \n    print('create symspell dict...')\n \n    if to_sample:\n        # sampling from list for kernel runtime\n        sample_idxs = random.sample(range(len(eng_words)), 100)\n        eng_words = [eng_words[i] for i in sorted(sample_idxs)] + \\\n        'to infinity and beyond'.split() # make sure our sample misspell is in there\n    \n    all_words_list = list(set(bad_words + eng_words))\n    silence = ss.create_dictionary_from_arr(all_words_list, token_pattern=r'.+')\n    \n    # create a dictionary of rightly spelled words for lookup\n    words_dict = {k: 0 for k in all_words_list}\n    \n    sample_text = 'to infifity and byond'\n    tokens = spacy_tokenize(sample_text)\n        \n    \n    print('run spell checker...')\n    print()\n    print('original text: ' + sample_text)\n    print()\n    start = time.time()\n    correct_text = spell_corrector(tokens, words_dict)\n    print('corrected text: ' + correct_text)\n    end = time.time()\n    print('Spell Checker s\u00fcresi:',(end - start))\n        \n    sample_text_two = 'I likeee planetes anddd I  like somebody.'\n    tokens = spacy_tokenize(sample_text_two)\n    print('Two run spell checker...')\n    print()\n    print('original text: ' + sample_text)\n    print()\n    start = time.time()\n    correct_text = spell_corrector(tokens, words_dict)\n    print('corrected text: ' + correct_text)\n    end = time.time()\n    print('Spell Checker s\u00fcresi:',(end - start))","ba4f54e0":"Orfinal k\u00fct\u00fcphane:https:\/\/www.kaggle.com\/yk1598\/symspell-spell-corrector","0d091ae4":"T\u00fcm k\u00fct\u00fcphaneler GPU \u00fczerinden test edilmi\u015ftir.","6b28bd43":"SymSpell Testi","ef2be36a":"Keep Original casing","2e6c1de1":"Kaynak Kodu:https:\/\/github.com\/mammothb\/symspellpy","ad9dace0":"Word Segmentation: Buz \u00f6zellik sadece yanl\u0131\u015f birle\u015ftirilmi\u015f kelimeleri ay\u0131rt ediyor.","bf3c4ee6":"**Kaggledan Yeni Buldu\u011fum bir Spell Checker K\u00fct\u00fcphanesi Testi.Spell Checking \u00e7ok sa\u011fl\u0131kl\u0131 \u00e7al\u0131\u015fm\u0131yor fakat s\u00fcre baz\u0131nda \u00e7ok iyi  \u00e7al\u0131\u015f\u0131yor tabiki Spell Checking  konusunda geli\u015ftirilebilir bir algoritma.","cbd2d607":"Lookup Command Testi:"}}