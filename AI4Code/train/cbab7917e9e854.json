{"cell_type":{"ad428c8f":"code","21a743d9":"code","ba12cdde":"code","7c1c0916":"code","8ae8e4df":"code","80aef503":"code","1bea791b":"code","750ddb4d":"code","6e52c965":"code","e80b911d":"code","0b766298":"code","57576446":"code","dcbc7a6f":"code","f4337d84":"code","2dee46e1":"code","a5db77cc":"code","1e9ac60c":"code","dee0222d":"code","43bcf59c":"code","7717fbb8":"markdown","be1b1b05":"markdown","a9867afb":"markdown","7ede996e":"markdown"},"source":{"ad428c8f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","21a743d9":"train_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ngender_data = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')","ba12cdde":"train_data.head()","7c1c0916":"train_data.describe()","8ae8e4df":"# importing the visualization libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#copying data to manipulate\ndf = train_data.copy()","80aef503":"plt.style.use('seaborn')\nfig, axs = plt.subplots(ncols=3,figsize=(15,5))\n\nsns.countplot(x='Survived',data=df, ax=axs[0])\nsns.countplot(x='Sex',hue='Survived',data=df, ax=axs[1])\nsns.countplot(x='Sex',data=df,ax=axs[2])\n\nplt.show()","1bea791b":"fig = plt.figure()\nax1 = fig.add_subplot(121)\nax2 = fig.add_subplot(122)\n\n\nslices_1 = [df['Survived'].sum(),(len(df)-df['Survived'].sum())]\nlabels_1 = ['Survived','Not Survived']\nax1.pie(slices_1, autopct='%1.1f%%',wedgeprops={'edgecolor':'black'}, textprops={'fontsize':14}, labels=labels_1)\n\nslices_2 = [len(df[df['Pclass']==1]), len(df[df['Pclass']==2]), len(df[df['Pclass']==3])]\nlabels_2 = ['Pclass 1', 'Pclass 2', 'Pclass 3']\nax2.pie(slices_2, labels=labels_2, autopct='%1.1f%%', wedgeprops={'edgecolor':'black'}, textprops={'fontsize':14})\n\nplt.show()","750ddb4d":"sns.catplot(y='Age',x='Survived',data=df,kind='violin')\nplt.show()","6e52c965":"fig = plt.figure(figsize=(15,5))\nax1 = fig.add_subplot(121)\nax2 = fig.add_subplot(122)\n\nax1.hist(df['Age'],edgecolor='black',bins=30)\nax1.set_title('AGE')\n\nax2.hist(df['Fare'],edgecolor='black',bins=30)\nax2.set_title('FARE')\n\nplt.show()","e80b911d":"df.isnull().sum()","0b766298":"print('avg age of pclass 1: {}'.format(df.Age.loc[df.Pclass==1].mean()))\nprint('avg age of pclass 2: {}'.format(df.Age.loc[df.Pclass==2].mean()))\nprint('avg age of pclass 3: {}'.format(df.Age.loc[df.Pclass==3].mean()))\nsns.boxplot(x='Pclass', y='Age', data=df)","57576446":"def impute_age(cols):\n    age = cols[0]\n    pclass = cols[1]\n    \n    if pd.isnull(age):\n        if pclass == 1:\n            return 38.23\n        elif pclass == 2:\n            return 29.87\n        elif pclass == 3:\n            return 25.14\n    else:\n        return age","dcbc7a6f":"def preprocess(df):\n    df.Age = df[['Age','Pclass']].apply(impute_age,axis=1)\n    sex = pd.get_dummies(df['Sex'], drop_first=True)\n    embarked = pd.get_dummies(df['Embarked'], drop_first=True)\n    df.drop(['PassengerId', 'Name', 'Sex', 'Ticket', 'Cabin', 'Embarked'], axis=1, inplace=True)\n    df = pd.concat([df,sex,embarked],axis=1)\n    return df","f4337d84":"df = preprocess(df)\ndf.head()","2dee46e1":"X = df.drop('Survived',axis=1)\ny = df.Survived","a5db77cc":"from sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X,y)","1e9ac60c":"df_test = test_data.copy()\ndf_test = preprocess(df_test)\ndf_test.head()","dee0222d":"predictions = model.predict(df_test.fillna(method='pad'))","43bcf59c":"output = pd.DataFrame({'PassengerId':test_data.PassengerId,'Survived':predictions})\noutput.to_csv('My_Submission',index=False)\nprint('Your Submission is finally saved.')","7717fbb8":"# Model Building","be1b1b05":"# Exploratry Data Analysis","a9867afb":"# Data Cleaning and Preprocessing","7ede996e":"# Loading the Data"}}