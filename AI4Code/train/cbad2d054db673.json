{"cell_type":{"be323d94":"code","9abc6fc5":"code","8ae7e15e":"code","e1479c52":"code","c62df893":"code","bcbcc104":"code","f7cb56dd":"code","0b5f44fa":"code","16136959":"code","1fface12":"code","0dd6327f":"code","4f05bf1f":"code","6dc73a1f":"code","10f38a71":"code","d5d8d213":"code","29d055a9":"code","e436e95f":"code","d43a76c7":"code","891d29cc":"code","ba62b60d":"code","b238c412":"code","3f033635":"code","2de1d243":"code","312d6f9c":"code","abfe57c3":"code","e1a1d138":"code","f94839a1":"code","2125e8a1":"code","5f4a11b9":"code","80260778":"markdown","b28f7642":"markdown","1c6fe238":"markdown","4db52668":"markdown","34b22920":"markdown","8717e84a":"markdown","53fa8263":"markdown"},"source":{"be323d94":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9abc6fc5":"train = pd.read_csv('\/kaggle\/input\/leaf-classification\/train.csv.zip')\ntest = pd.read_csv('\/kaggle\/input\/leaf-classification\/test.csv.zip')\nsample_sub=pd.read_csv(\"\/kaggle\/input\/leaf-classification\/sample_submission.csv.zip\")","8ae7e15e":"train","e1479c52":"plt.figure(figsize=(10,6))\nsns.countplot(train[\"species\"],palette=\"muted\")\ntrain[\"species\"].value_counts()","c62df893":"train.isnull().sum()","bcbcc104":"train.corr()","f7cb56dd":"Y=train.pop('species')","0b5f44fa":"train.pop('id')","16136959":"X=train.values","1fface12":"Y1=Y","0dd6327f":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X)\n\nX = scaler.transform(X)","4f05bf1f":"from sklearn.preprocessing import LabelEncoder\nlabelencoder_y =LabelEncoder()\nY= labelencoder_y.fit_transform(Y)","6dc73a1f":"Y1=Y1.values.reshape(-1,1)","10f38a71":"from sklearn.preprocessing import OneHotEncoder\nohe = OneHotEncoder()\nY1 = ohe.fit_transform(Y1).toarray()\nY1.shape","d5d8d213":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.2,random_state=0)","29d055a9":"from sklearn.svm import SVC\nsvc = SVC()\nsvc.fit(X_train,y_train)\npred_svc =svc.predict(X_test)","e436e95f":"from sklearn.metrics import classification_report,accuracy_score\nprint(classification_report(y_test,pred_svc))","d43a76c7":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators=250)\nrfc.fit(X_train, y_train)\npred_rfc = rfc.predict(X_test)\nprint(classification_report(y_test, pred_rfc))","891d29cc":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier()\nknn.fit(X_train,y_train)\npred_knn=knn.predict(X_test)\nprint(classification_report(y_test, pred_knn))","ba62b60d":"from sklearn.model_selection import train_test_split                 #importing train_test_split from sklearn to split data\nx_train,x_test,y_train,y_test=train_test_split(X,Y1,shuffle=True,test_size=0.10,random_state=90) #split the data in 80:20 ratio ","b238c412":"x_train, x_val, y_train, y_val = train_test_split(x_train, y_train, test_size=0.10, random_state=90)","3f033635":"#Neural Network Dependencies\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.activations import relu,softmax","2de1d243":"y_train.shape","312d6f9c":"model = Sequential()\nmodel.add(Dense(256, input_dim=192, activation='relu'))\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dense(600, activation='relu'))\nmodel.add(Dense(1024, activation='relu'))\nmodel.add(Dense(1600, activation='relu'))\nmodel.add(Dense(99, activation='softmax'))","abfe57c3":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","e1a1d138":"from keras.callbacks import ModelCheckpoint\ncheckpointer=ModelCheckpoint(filepath='Convolutional.hdf5',verbose=1,save_best_only=True)\nhistory = model.fit(x_train, y_train, epochs=60, batch_size=64,validation_data=(x_val,y_val))","f94839a1":"score=model.evaluate(x_test,y_test,verbose=1)               #evaluates the model\naccuracy=100*score[1]                                       \nprint('Test accuracy is %.4f%%' % accuracy)","2125e8a1":"score=model.evaluate(x_train,y_train,verbose=1)               #evaluates the model\naccuracy=100*score[1]                                       \nprint('Test accuracy is %.4f%%' % accuracy)","5f4a11b9":"import matplotlib.pyplot as plt\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","80260778":"# ONE HOT ENCODING FOR NEURAL NETWORKS","b28f7642":"# SUPPORT VECTOR MACHINES","1c6fe238":"# FEATURE SCALING USING STANDARD SCALAR","4db52668":"# RANDOM FOREST","34b22920":"# KNN","8717e84a":"# TRAIN TEST SPLIT ","53fa8263":"# LABEL ENCODING FOR MACHINE LEARNING ALGORITHMS"}}