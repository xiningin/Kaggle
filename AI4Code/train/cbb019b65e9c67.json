{"cell_type":{"cbec2805":"code","49565c4b":"code","85abbdb5":"code","8c6f1a36":"code","33b630c5":"code","0cdd60fa":"code","320e25cb":"code","918e8f3c":"code","bbe8c472":"code","d89b41e4":"code","83ec53ac":"code","ef413957":"code","c877680a":"code","7a6f1b5f":"code","788ac554":"code","15add271":"code","ede4f795":"code","42f12518":"code","9673a53b":"code","328a06b1":"code","2d217ab9":"code","f2023f06":"code","c77b1df4":"code","f01daaf3":"code","c08d9ea6":"code","dc0a75e8":"code","16eb573b":"code","4f355ed3":"code","38ab4665":"code","5b0b4a02":"code","d692034f":"code","9eab4348":"code","4571f2de":"code","722a0c64":"code","fd4bced3":"code","7a2d340b":"code","f5ab6cb7":"code","319ebd51":"code","3e35bee1":"code","2827f006":"code","054c5025":"code","fa1e7e39":"code","c1e8dc6c":"code","d115d4bc":"code","a02ec30d":"code","5854f038":"code","28f67d59":"code","aa87c624":"code","6fabd630":"code","b603cee8":"code","51ce0745":"code","203306c8":"code","77683305":"code","e8fdbe2e":"code","2aaae768":"code","fc64ebf7":"code","2978ced9":"code","336fd612":"code","03382b38":"code","4e6b1cbf":"code","6fcda0b7":"code","6641ce50":"code","2afb32e7":"code","d52d8c2b":"code","69b1a749":"code","1fe5c6d6":"code","9a152b4b":"code","bd0306a2":"code","640b9335":"code","7f7b7521":"code","89449bc7":"code","2a5ee60b":"code","7145cf17":"code","64d906ff":"code","92193b17":"code","1aaabd0e":"code","4d451812":"code","4e04a71c":"code","e75e4c38":"code","f79a984d":"code","7dfa2fe6":"code","f15e2d8f":"code","3652c206":"code","9e04d667":"markdown","4c97fa21":"markdown","2783668a":"markdown","1e77f15d":"markdown","206676c2":"markdown","2cb1f95b":"markdown","35bff6ad":"markdown","86525cfa":"markdown","3648feec":"markdown","0e8ca6b8":"markdown","aac4db94":"markdown","3777d51a":"markdown"},"source":{"cbec2805":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px","49565c4b":"df = pd.read_csv('..\/input\/breast-cancer-wisconsin-data\/data.csv')","85abbdb5":"df.head()","8c6f1a36":"df.info()","33b630c5":"df.describe()","0cdd60fa":"df.columns","320e25cb":"df = df.drop('Unnamed: 32',axis=1)","918e8f3c":"df.isnull().sum().sum()","bbe8c472":"df['diagnosis'].unique()","d89b41e4":"px.histogram(df, x=\"diagnosis\") ","83ec53ac":"plt.figure(figsize=(22,18))\nmatrix = np.triu(df.corr())\nsns.heatmap(df.corr(),annot=True,mask=matrix,cmap='viridis')","ef413957":"df.columns","c877680a":"df_mean = df[['radius_mean', 'texture_mean', 'perimeter_mean',\n       'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean',\n       'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean','diagnosis']]","7a6f1b5f":"plt.figure(figsize=(15,15))\nsns.heatmap(df_mean.corr(),annot=True,cmap='viridis')","788ac554":"sns.pairplot(df_mean, hue='diagnosis')","15add271":"df_worst = df[['radius_worst', 'texture_worst',\n       'perimeter_worst', 'area_worst', 'smoothness_worst',\n       'compactness_worst', 'concavity_worst', 'concave points_worst',\n       'symmetry_worst', 'fractal_dimension_worst','diagnosis']]","ede4f795":"plt.figure(figsize=(15,15))\nsns.heatmap(df_worst.corr(),annot=True,cmap='viridis')","42f12518":"sns.pairplot(df_worst,hue=\"diagnosis\")","9673a53b":"df_se = df[['radius_se', 'texture_se', 'perimeter_se', 'area_se', 'smoothness_se',\n       'compactness_se', 'concavity_se', 'concave points_se', 'symmetry_se',\n       'fractal_dimension_se','diagnosis']]","328a06b1":"plt.figure(figsize=(15,15))\nsns.heatmap(df_se.corr(),annot=True,cmap='viridis')","2d217ab9":"sns.pairplot(df_se,hue=\"diagnosis\")","f2023f06":"x = df.drop('diagnosis',axis=1)\ny = df['diagnosis']","c77b1df4":"from sklearn.model_selection import train_test_split","f01daaf3":"x_train, x_test, y_train ,y_test = train_test_split(x,y,random_state=42,test_size=0.1)","c08d9ea6":"from sklearn.preprocessing import StandardScaler","dc0a75e8":"scaler = StandardScaler()\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)","16eb573b":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV","4f355ed3":"log_model = LogisticRegression()\nlog_model.fit(x_train,y_train)","38ab4665":"from sklearn.metrics import classification_report,plot_confusion_matrix,accuracy_score","5b0b4a02":"def report(model):\n    y_pred = model.predict(x_test)\n    print(classification_report(y_test,y_pred))\n    plot_confusion_matrix(model,x_test,y_test)","d692034f":"report(log_model)","9eab4348":"log_model = LogisticRegression(solver='saga',max_iter=10000)","4571f2de":"penalty = ['elasticnet']\nl1_ratio = np.linspace(0,1,20)\nC = np.logspace(0, 4, 10)","722a0c64":"param_grid = {'penalty':penalty,'C':C,'l1_ratio':l1_ratio}","fd4bced3":"log_grid = GridSearchCV(log_model,param_grid)","7a2d340b":"log_grid.fit(x_train,y_train)","f5ab6cb7":"log_grid.best_params_","319ebd51":"report(log_grid)","3e35bee1":"from sklearn.neighbors import KNeighborsClassifier","2827f006":"knn = KNeighborsClassifier()","054c5025":"k_values = list(range(1,20))","fa1e7e39":"param_grid = {'n_neighbors':k_values}","c1e8dc6c":"knn_grid = GridSearchCV(knn,param_grid,scoring='accuracy')","d115d4bc":"knn_grid.fit(x_train,y_train)","a02ec30d":"knn_grid.best_estimator_","5854f038":"report(knn_grid)","28f67d59":"from sklearn.svm import SVC","aa87c624":"svm = SVC()\nparam_grid = {'C':[0.05,0.01,0.1,1],'kernel':['linear','rbf','sigmoid'],'gamma':['scale','auto']}\nsvm_grid = GridSearchCV(svm,param_grid)","6fabd630":"svm_grid.fit(x_train,y_train)","b603cee8":"svm_grid.best_params_","51ce0745":"report(svm_grid)","203306c8":"from sklearn.tree import DecisionTreeClassifier","77683305":"dt = DecisionTreeClassifier()","e8fdbe2e":"param_grid = {'criterion':['gini','entropy'],\"max_depth\":[2,3,4,5,6]}","2aaae768":"dt_grid = GridSearchCV(dt,param_grid)","fc64ebf7":"dt_grid.fit(x_train,y_train)","2978ced9":"dt_grid.best_params_","336fd612":"report(dt_grid)","03382b38":"from sklearn.tree import plot_tree","4e6b1cbf":"plt.figure(figsize=(12,8),dpi=150)\nplot_tree(dt_grid.best_estimator_,filled=True,feature_names=x.columns);","6fcda0b7":"from sklearn.ensemble import RandomForestClassifier","6641ce50":"n_estimators=[256,512,1024]\nmax_features= [4,6,10,15,20,24]\nbootstrap = [True]\noob_score = [True,False]","2afb32e7":"param_grid = {'n_estimators':n_estimators,\n             'max_features':max_features,\n             'bootstrap':bootstrap,\n             'oob_score':oob_score}","d52d8c2b":"rfc = RandomForestClassifier()\nrf_grid = GridSearchCV(rfc,param_grid)","69b1a749":"rf_grid.fit(x_train,y_train)","1fe5c6d6":"rf_grid.best_params_","9a152b4b":"report(rf_grid)","bd0306a2":"from sklearn.ensemble import AdaBoostClassifier","640b9335":"x.columns","7f7b7521":"ada_model = AdaBoostClassifier()","89449bc7":"n_values = list(range(1,len(x.columns)))","2a5ee60b":"param_grid = {'n_estimators':n_values}","7145cf17":"ada_grid = GridSearchCV(ada_model,param_grid)","64d906ff":"ada_grid.fit(x_train,y_train)","92193b17":"ada_grid.best_params_","1aaabd0e":"report(ada_grid)","4d451812":"from sklearn.ensemble import GradientBoostingClassifier","4e04a71c":"param_grid = {\"n_estimators\":[1000],'max_depth':[3,4,5]}","e75e4c38":"gb_model = GradientBoostingClassifier()","f79a984d":"grid = GridSearchCV(gb_model,param_grid)\n","7dfa2fe6":"grid.fit(x_train,y_train)","f15e2d8f":"grid.best_params_","3652c206":"report(grid)","9e04d667":"# KNN","4c97fa21":"# Logistic Regression","2783668a":"# Gradient Boosting","1e77f15d":"## Performance metrics","206676c2":"# SVM","2cb1f95b":"# Train Test split","35bff6ad":"# Random Forests","86525cfa":"# ADA Boost","3648feec":"# Descision Trees","0e8ca6b8":"# IMPORTS","aac4db94":"![ ](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAOEAAADhCAMAAAAJbSJIAAAAllBMVEX\/\/\/\/pPXfd3tnpOXXoNXPoLW\/oJmzpMXLqK2\/d4dvc5d7d49zs7er5+fjo6eXqR33sW4n++ProToDsYY3ta5T509786e\/74un3wtH4ydbxkq71t8n62uP98PTe1tT0qr\/ymbPfy83whaXfucDiqbbgwcbzorrwi6njmqznbJDje5fklKjjobHhsrzvep7lh6DmAGDu4OLD4DhxAAANoUlEQVR4nO1daZuquBIGQsIuq\/vatq3ddmuf+f9\/7iYBlS0EbJR4H94PM885I07KqtSWyosk9ejRo0ePHj169OjRo0ePHj169OjR47XgLybrzWy73c7268nC73o5LWM037oIQaipBBqECAXb+ajrZbWF0d5FUAVyFkCFyN3\/Pwg5jZCWl+4qpYaiYdcL\/COGHlIZ4sVQkffKMi7PiKW+lCLR+WXdzhRW6++qR23a9VLvwwbVko+qcd\/1Yu\/BtraAGOjQ9XKbY95EQCzipOsFN8WomYCyDJddL7khPL4TzUKNul5yM6xhQwFlWd91vegm+E9vLCDW4qDrZdeH\/VUvEOYkPDpdL7w23u9RIfanb10vvC6soNzNAAxcPJF\/lf\/30O566fVg7woqxKWSrgHXC78IwkAGpFYsyKm\/v4SdOoabWbqq6fLX9+ljpZg3KKv33W+o69nCCnhm16uvA2uXihSqLh93K9O0LEPJwDAM0zQ+vsOMkPr7C9ipbV53IdDU47tiGjnh0rDM1Y+nXz0vCMVXomNcHCmA7g8Wjy3dRZvm2\/Eqo\/4mfFAcmFGsQuDuTOsqxsB2nLQXcRx7MLjJuDomelePpuDOxlHeEhVqOzMRwGauGYuZfMb8SkSEK8GVqFi\/icGp31a1eAkcKuQ1hGo\/ltBKdJRrqABfpjKot1hHUVYX\/4sDhtDudHD1MzIIGqzU+bgmCfqb8bj1\/RmOYh6vnh826aDNrzFU+7YEVuJAMW7hGy0aPLm9hcTAVB62wD9DMVJVBVw3eDKV6OlvirC+xrl5UuJMz\/WfTHd1sDcV1kwHiplqzwC5\/pPzdCr7Ja6ZYqefrpvQuPaT53RPAFiimikOhqd0A6rBRsy0HsXdiLZifWd0EdZ9cpiRUNsZgmZueBtGmYIW1Y2Is0zjSv21BN2IOL3MVvewbqdezlb6oaCuxsk5mvrxImukuO5SxNyIWMKPXAuqppluc91VfaUIGRGxoznlevlwXudBX5NzEn4oQrqagWJ95tYKvDoPzvNnHPBkCFlfDDI5W2KmdYJ+oX+s7cR0pkq6dLr4mhn\/uUXhpFH7FFbCr0IXG\/KfOxdOcUQNiFjCsCgh19csi4fFREIRw4WSqSwSAJf32Kx4EKf+mq8jIXcCwS85LH4tCXkBY5MPhmJbaXEfYiVWzjuVqZC2WgWVsOhLSWep6qFZiQpptBBUwkI8pEqs2IkljlSmBaKQ0aIsp6FKrOjX5HPuGPBdVAmNnzKbq+hmjMsHp\/Q3MSW0c22alIisgS7G4JS2UoSU0FGMt\/IpE3Vb\/gRjuA8EhpjVE66AFcYwGyoddPYZ89\/k1ErIChg7U4thduW5W7mbETccssMFBtwUPz5kzWfiAlhQCbEz3ZU603I7dVnzmbqgjqbK1WAJC1XUgfVjgMAS09FQV2OxVu1JubYb00ZpZSGmo6naiNpeCjMhw2cM78kib8N4IzJi\/kSSYZBqS0UIIsZtGijsNizrel9XPfQ1GaDt5SLXYraejMdR2VYEkbhGyiqCiYRTify9isLxVZF+edam\/YhrpKVN4UTCedIVVT0EgjAMvUBDXmnmLbKRVsQL9XDJYABWZLDGihxH\/+YlaQ05eBLXSJmdDBmAS+NXRecFttDhlNzc84v3TuBOZCOlFVRZjQiQO5IOiN7Ew+qbhNiRulOyFQvX9zRF1HCfIDWhltKLSxsZeywWTt7msg6o1B6Rce1lbtCqRzEbiTcMikFfJTX+0JNxpMDyTWR4HSFGMrmUt6S3oJO\/1D\/ELO9vKB6TwmiJvQoCQJ\/hDTjLWCUI1uGcNAD8RTwBQEa+xFYhVWLmtAweiFhq7GRwmeiltyk4bzWIgsN8kUxFQUG7bGk42cwNBNLIvf6Z3E+LYi0mvwI5tSD31n0p1MhfCnqCn8EgM5GBA+E5pTWIRZwD7FpASMUGbrwhyRhjpJJWsNiOlMLJ5DXqOXsyoZL0e36WtXB93ZFQXkjzQFpqAIicztyAlZgqjWAuNQPokKTfCxcRCgmINpK0RvifkS708GwKGSXijDSXX6vI20ymExwMp7MoOkySa\/tLydUED\/ZX2Gklwm0x+cSuBUIUJq2b0QzvS20kbdGn1e3C60Oxfi7uU8OupTRTJfaq+\/7hHJBQgoYkXLyAH03gXK9PkPPRc3nLCRvrXNogmrGhuYTz1t3LCIjt1DjFiQ2cZEN8SoGkxFieQWLJi3++\/0ICYjtN5jBxbV\/auNGCBSkx4gtdqif5oNHcuwhIKmFtUzIugwU\/X0sMksj4kqfWH7cVBI75S7IwHOUKU2tY7q3ke5eAT90o\/izqeslNYRsuAMFI8oueFLiSL8eaVTVSG1MSFPRqrBGS\/a7rQ2lfQlGjT6VQlVUAEYz2w4TlRX05HWIRj2hZ1kwDsjREwN16MdfXIoLEnKP6VxfEgQ394twhTcZnGmVO8qebUCUBH5KmzfrlzJQ0LYZlM10z6UzGiOYhgvQUWIN7nKO6r8kztC5rvIXScCxNASQMC4SbbuZLI9LmqDVQLBhKIoWcTGR62NeEwWw+XPiSP0PE72y6Xm5zuAySGtJdBAB6caE43hCWQe8Vt6HEPATFWnTRFm++bYCtFCJ3jYX196+2ESfsg2zsTsdTcuuQ8JxQYsHlnJwodr3kZtginzUwEw+Cjck2BRFpg08jHQIZ\/HspnkjsPLYVh\/UQYte50QDCok5IwwYnOMGm60U3wQzRuraCtA1np3MExqSBGiDtPH+xnOZAJUPDKhH1sbQmAxogpNItp+tNx6tugEMiF069J0z2SxLh\/UM8oTHceAhC6L0KCebsojiAs7OFxuL9UuVI0+B2vo9gQuKquq8RFNOcl3gvLj0mOx2dXoCpnwCor+BO95mth2YkcNSmGASq+B4n71tg6EuTmlStL6HFScF5qnAq+VFtNYou4rSsqCf0qxPASuEKHwciu5uymh5Dw6mZX3s3AlfcoDFiJaIAbX1pHNaUUa28ZtMlfJktgarhunca1JNRFbXcDyo9JgxwwTSpJ6PWgPnliYg4IQHQI8NpiIqUkMWfg3FFo1Ns+cS6pMGNC8MZgFwZBezabLisrKr2efnwxNN5MhZn3zsGn74bRqvU508uLz6WX7TpDGWRPgv9M0Nr6Ri\/HDUCKFKKuuCaqP6T4+20zXf2vH4soixOcrPkrJUKmD\/EHlir6vAiUuRnXvCpEJCwuylh9WYUJiyGvNoI78GyMQRFsb6qRYQ1eDWeAG4g1L\/L+SwdRTFK71zcIETM2PPcqP5rMqa5bEVROAbQiH3xMSiWvDnAI5vYirAMM+jNE4DO3wrBqAhv0L6qBpuxna4qKhKZx1jweIx4WbTqVd6fIFvxo3ofd\/viC58XJwgzWeVI5UBRzCJLfQadOlRenABgxRtNJ0TQv9Va7PAdNNw4AT+417LJJXdTVIfKjxO7GtcnbOJtqtM+MvrWBfhx4tesM9dMWNk57\/zopnHDoO1ILQvHiTqz99ROfznpWwdvvOLWEyBQat4PsdOk7Ax0kL5xKh8c6t+MuncliZ0yr\/JfRHy2t2FMb9+gn6za90OonX5WO2YAnuttZtw4gb1M\/dl7aqec13ypT50i5vadgIc12OACDHk\/As9On5nbsKdILgKSXKbJHSZqp98cy39ebsM8gLmCbsJGtwsGNfypDJ91tMhty2hkEza8pEX8aZ6lNw8+C2M74J1PUP6VxvfsqJ2yGHyuP91TWlNcNypDHAmb32EidsrJT58T+Gu07z\/Ney7VEyVaP7zWcgOy\/jvBdaOU9+Guu6AkKDKYQ1Lf\/uitOOKfi0ESKO66C1rH2ZALN48Et2uBBfy5U4U1nc2joyK3vR3b6J0X7aiz4SW8Td4McgeWPCOiNnr3dd5amc2DzxXXnL7Y9902SkCcjVLdP9WOLUpTikpnF8f6P1w5J86GwaaV\/B\/Aw6+a\/lcVLgg1yZ9YA6izqUpP9ffWJGGiolIl7DJ\/ZLYYVLel1IfbKIbD\/onBSvkrRVDcPmVOTstP4SRYMUkrf6y\/qjBunzLDPjq1IwIPDH9O6HNaYHmi73ssD7vq8Um8GXa5nf7ZzSTfThpvpWYC5KdRn5RaEW0At8G1xlSifnoa9YlT1qHWV62oMD5TLOtKYU\/dwrfXxKBop4R2tBUVxmeKxQQcPJUZxCnaqUoiRTv7pFyJ+ump5C523k6179ZUGCsxvxPxNn8uNUju9eIyUFpToUQHGHJKxDb6ZAKinJ2SFza0yERmF5Son4xns7uYRy3zC7epQhoxMj8httGnc0g5RqqOayVfS8POZqdA7YKqbnArAVpXId2JqRID22gXPGe3mBXvwlbXYKc7i129fNW+9hvadaQxsBITsimZcPF1Q1VnJXbUaiy8gDC8JxGJnGS1++W1F5HYKWwvnUlBuXD3qZWzf4\/FgJLrtZiRpkGqfdowUTvkv3boVqFHTQ9YA5myUWMb7Y7KzcZ2CtqqC\/Mg7OCQ2miXhJHGCujvRrvR\/gqauhEb7ZKNz7FOrtVGd6YMNo76\/05dv89DsR6mQhoTj\/Vm4x4IvFkeESpikKZUV8H+BnIi9rCN8oBc6c5VPOq77cd46eareNwiRFAhWcXjvnsgBPOu88BXTDsiqBAv40W\/u0ePHj169OjRo0ePHj169OjRo0ePHk3wP5\/\/tvf2Q0JTAAAAAElFTkSuQmCC)\n","3777d51a":"# Load Dataset"}}