{"cell_type":{"05fc8e40":"code","b7b549ec":"code","ed1f78f3":"code","a47dc8b2":"code","06db019a":"code","555f3d62":"code","f45b68bf":"code","a80f8b12":"code","099b51a5":"code","6494c470":"code","74f88068":"code","869a6c7d":"code","b261651c":"code","104ae8ea":"code","b162e2ef":"code","30328f1b":"code","1f7ccba2":"code","233f6e22":"code","59e2a769":"code","506cd966":"code","3e4e2e62":"code","5d4205d1":"code","045090c0":"code","9aab4c40":"code","118b7791":"code","a6ce3ecb":"code","376b40b5":"markdown","9703c51b":"markdown","2d197a78":"markdown","a557cbeb":"markdown","6cc1fc40":"markdown","a85e24c0":"markdown","34566547":"markdown","c097ed51":"markdown","dc5f607b":"markdown","16c0838c":"markdown","96f3d08a":"markdown","2f05420b":"markdown","830517a4":"markdown","8d6b8136":"markdown","2c5d4e80":"markdown","30f3ae01":"markdown","350ae970":"markdown","0c57ecb3":"markdown","7eb660a7":"markdown","e7f13e3c":"markdown"},"source":{"05fc8e40":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split,GridSearchCV\nfrom sklearn.preprocessing import StandardScaler,MinMaxScaler\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier\nimport tensorflow as tf\n\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import precision_recall_curve\n\nsns.set(rc={'figure.figsize':(9.7,7.27)})\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b7b549ec":"df = pd.read_csv('\/kaggle\/input\/league-of-legends-diamond-ranked-games-10-min\/high_diamond_ranked_10min.csv')\n#check for null values\nprint(\"Null values summary:\\n{}\\n\".format(df.isna().sum()))\nprint(\"No null values found, data clean!\" if (not df.isna().sum().all()) else \"Data needs cleaning...\" )","ed1f78f3":"#categorical variable for winning team name\ndf['team_won'] = np.where(df['blueWins']==1,'blue','red')","a47dc8b2":"#quick look at dtypes\ndf.dtypes","06db019a":"class_sym = df['blueWins'].value_counts()\ncount_plot = sns.countplot(data=df,  x='blueWins')\nfor ind, count in class_sym.items():\n    count_plot.text(ind,count,count,ha='center',fontsize=17)","555f3d62":"ind_list = []\nunique_count = []\nfor col in df.columns:\n    ind_list.append(col)\n    unique_count.append(len(df[col].unique()))\nfinal_series = pd.DataFrame({'Feature':ind_list,'Unique values':unique_count}).sort_values(by='Unique values',ascending=False).reset_index(drop=True).style.bar()\nfinal_series","f45b68bf":"vars=['blueAvgLevel','redAvgLevel','blueExperienceDiff','redExperienceDiff','blueDeaths','redDeaths']\nplt.figure(figsize=(15,15))\nsns.pairplot(df,vars=vars)\nplt.show()","a80f8b12":"plt.figure(figsize=(20,20))\nsns.heatmap(df.drop('gameId',axis=1).corr(),annot=False,square=True)\nplt.show()","099b51a5":"def findTeam(x,blue):\n    if x.team.iloc[0]==blue:\n        if x['count'].iloc[0]>x['count'].iloc[1]:\n            return 'blue'\n        else:\n            return 'red'\n    else:\n        if x['count'].iloc[0]>x['count'].iloc[1]:\n            return 'red'\n        else:\n            return 'blue'\ndef feature_report(win_team,red,blue):\n    temp_df = pd.melt(df[df.team_won==win_team],id_vars='gameId', value_vars=[red,blue],var_name='team',value_name='count').sort_values(by='gameId')\n    return temp_df.groupby('gameId').apply(findTeam,blue).value_counts()","6494c470":"res = feature_report('red','redWardsPlaced','blueWardsPlaced')\nprint(res,\"\\n\")\nprint(\"When red team wins, {} team has most wards placed in game, almost {:.3f} times more\".\n      format(res[res==res.max()].index[0], res[0]\/res[1]))","74f88068":"res = feature_report('blue','redWardsPlaced','blueWardsPlaced')\nprint(res,\"\\n\")\nprint(\"When blue team wins, {} team has most wards placed in game, almost {:.3f} times more\".\n      format(res[res==res.max()].index[0], res[0]\/res[1]))","869a6c7d":"res = feature_report('red','redKills','blueKills')\nprint(res,\"\\n\")\nprint(\"When red team wins, {} team has most kills in game, almost {:.3f} times more\".\n      format(res[res==res.max()].index[0], res[0]\/res[1]))","b261651c":"res = feature_report('blue','redKills','blueKills')\nprint(res,\"\\n\")\nprint(\"When blue team wins, {} team has most kills in game, almost {:.3f} times more\".\n      format(res[res==res.max()].index[0], res[0]\/res[1]))","104ae8ea":"res = feature_report('red','redTowersDestroyed','blueTowersDestroyed')\nprint(res,\"\\n\")\nprint(\"When red team wins, {} team has most towers destroyed in game, almost {:.3f} times more\".\n      format(res[res==res.max()].index[0], res[0]\/res[1]))","b162e2ef":"res = feature_report('blue','redTowersDestroyed','blueTowersDestroyed')\nprint(res,\"\\n\")\nprint(\"When blue team wins, {} team has most towers destroyed in game, almost {:.3f} times more\".\n      format(res[res==res.max()].index[0], res[0]\/res[1]))","30328f1b":"res = feature_report('red','redDragons','blueDragons')\nprint(res,\"\\n\")\nprint(\"When red team wins, {} team has most dragons killed in game, almost {:.3f} times more\".\n      format(res[res==res.max()].index[0], res[0]\/res[1]))","1f7ccba2":"res = feature_report('blue','redDragons','blueDragons')\nprint(res,\"\\n\")\nprint(\"When blue team wins, {} team has most towers destroyed in game, almost {:.3f} times more\".\n      format(res[res==res.max()].index[0], res[0]\/res[1]))","233f6e22":"def getData():\n    df2 = pd.DataFrame()\n    df2['kill'] = df['blueKills'] - df['redKills']\n    df2['totalGold'] = df['blueTotalGold'] - df['redTotalGold']\n    df2['avgLevel'] = df['blueAvgLevel'] - df['redAvgLevel']\n    df2['goldDiff'] = df['blueGoldDiff'] - df['redGoldDiff']\n    df2['expDiff'] = df['blueExperienceDiff'] - df['redExperienceDiff']\n    df2['goldPerMin'] = df['blueGoldPerMin'] - df['redGoldPerMin']\n    df2['totalExp'] = df['blueTotalExperience'] - df['redTotalExperience']\n    \n    df2['target'] = df['blueWins']\n    return df2\n\ndef scale_data(dfs):\n    scaler = StandardScaler()\n    scaler.fit(df2.drop('target',axis=1))\n    out = []\n    out.append(scaler)\n    for df in dfs:\n        out.append(scaler.transform(df))\n    return out\n    \ndef splitData(df2):\n    X = df2.iloc[:,:-1]\n    y = df2.iloc[:,-1]\n    X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2, random_state=111)\n    return X_train, X_test, y_train, y_test\n\ndef get_score(clf,X_train,y_train,X_test,y_test):\n    clf.fit(X_train,y_train)\n    y_pred_proba = clf.predict_proba(X_test)\n    y_pred= clf.predict(X_test)\n    return y_pred_proba, f1_score(y_test, y_pred)\n\ndef plotPRCurve(y_test, y_pred_proba):\n    lr_precision, lr_recall, _ = precision_recall_curve(y_test,y_pred_proba[:, 1])\n    plt.plot(lr_recall, lr_precision, marker='.', label='Logistic')\n    plt.xlabel('Recall')\n    plt.ylabel('Precision')\n    return None","59e2a769":"sns.set(rc={'figure.figsize':(7,5)})","506cd966":"df2 = getData()\nX_train, X_test, y_train, y_test = splitData(df2)\nscaler, X_train, X_test = scale_data([X_train, X_test])","3e4e2e62":"#Logistic Regression\ny_pred_proba, f1_sc = get_score(LogisticRegression(), X_train,y_train, X_test,y_test)\nprint('f1 score for Logistic Regression:{:.3f}'.format(f1_sc))\nplotPRCurve(y_test,y_pred_proba)","5d4205d1":"#Random Forest\ny_pred_proba, f1_sc = get_score(RandomForestClassifier(random_state=111), X_train,y_train, X_test,y_test)\nprint('f1 score for Random Forest Classifier:{:.3f}'.format(f1_sc))\nplotPRCurve(y_test,y_pred_proba)","045090c0":"#Adaboost\nabc = AdaBoostClassifier(DecisionTreeClassifier(random_state=111))\ny_pred_proba, f1_sc = get_score(abc, X_train,y_train, X_test,y_test)\nprint('f1 score for AdaBoost Classifier:{:.3f}'.format(f1_sc))\nplotPRCurve(y_test,y_pred_proba)","9aab4c40":"#SVM classifier\ny_pred_proba, f1_sc=get_score(SVC(probability=True),X_train,y_train, X_test,y_test)\nprint('f1 score for SVM Classifier:{:.3f}'.format(f1_sc))\nplotPRCurve(y_test,y_pred_proba)","118b7791":"params={'C':[0.001,0.01,1,10,100],\n       'fit_intercept':[True,False],\n       'multi_class':['ovr'],\n       'solver':['newton-cg','sag','saga','lbfgs']}\ngcv = GridSearchCV(LogisticRegression(random_state=111),param_grid=params,cv=10,scoring='f1')\ngcv.fit(X_train,y_train)\nprint(\"Best parameters found: \\n{}\\nbest score: \\n{:.3f}\".format(gcv.best_params_,gcv.best_score_))","a6ce3ecb":"y_pred_proba, f1_sc = get_score(LogisticRegression(C=0.001,fit_intercept=False,multi_class='ovr',solver='newton-cg',random_state=111), X_train,y_train, X_test,y_test)\nprint('f1 score for Logistic Regression:{:.3f}'.format(f1_sc))\nplotPRCurve(y_test,y_pred_proba)","376b40b5":"## Check for class asymmentry in data","9703c51b":"### Since major points are gathered from killing the members of opponent team, the winning team has the most kills","2d197a78":"### ![League of Legends poster](https:\/\/esports-betting-tips.com\/wp-content\/uploads\/2018\/10\/League-of-Legends-Image.jpg)\n#### *League of Legends (LoL) is a multiplayer online battle arena video game developed and published by Riot Games for Microsoft Windows and macOS. Inspired by the Warcraft III: The Frozen Throne mod Defense of the Ancients. In League of Legends, players assume the role of a \"champion\" with unique abilities and battle against a team of other player- or computer-controlled champions. The goal is usually to destroy the opposing team's \"Nexus\", a structure that lies at the heart of a base protected by defensive structures, although other distinct game modes exist as well with varying objectives, rules, and maps. *","a557cbeb":"# Training models","6cc1fc40":"## Unique Value count","a85e24c0":"## Optimizing LR model ","34566547":"## Distribution of subset of features","c097ed51":"## when red wins the game","dc5f607b":"### Class distribution is symmetric","16c0838c":"### Correlation heatmap","96f3d08a":"## Effect of Dragons killed on winning the game","2f05420b":"## Effect of *TowersDestroyed* on winning the game","830517a4":"### The difference seen is not much but still it contributes towards winning the game","8d6b8136":"### Based upon the dataset description some features indicate that they might influence the outcome of match:\n- Warding totem: An item that a player can put on the map to reveal the nearby area. Very useful for map\/objectives control.\n- Elite monsters: Monsters with high hp\/damage that give a massive bonus (gold\/XP\/stats) when killed by a team.\n- Dragons: Elite monster which gives team bonus when killed. The 4th dragon killed by a team gives a massive stats bonus. The 5th dragon (Elder Dragon) offers a huge advantage to the team.\n- Herald: Elite monster which gives stats bonus when killed by the player. It helps to push a lane and destroys structures.\n- Towers: Structures you have to destroy to reach the enemy Nexus. They give gold.","2c5d4e80":"## when blue wins the game","30f3ae01":"# EDA","350ae970":"## Effect of kills on winning the game","0c57ecb3":"## Effect of *WardsPlaced* on winning the game(target variable)","7eb660a7":"## Quick check for null values","e7f13e3c":"# Feature Engineering"}}