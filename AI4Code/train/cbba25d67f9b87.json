{"cell_type":{"b41717f0":"code","9bf9cd32":"code","ef910507":"code","a571e291":"code","dbcae812":"code","af20e3a5":"code","f44a37a7":"code","57039725":"code","2ea4a9a8":"code","b0925246":"code","4f1da2b2":"code","f4d253a3":"code","b78088c9":"code","e1531565":"code","ce8fde7d":"code","9f8c3899":"code","f5516d28":"code","671e5796":"code","020f73ff":"code","6d99b063":"code","19351c69":"code","bbe21e05":"code","0ddcae65":"code","4e33716b":"code","713e31e5":"code","7d99c953":"code","330b261f":"code","e9640f01":"code","646245d8":"code","f8da87cb":"code","43eac9f0":"code","0636e517":"code","282d5e22":"code","c947b8ed":"code","816e5b4a":"code","fd17ceee":"code","1ee633b5":"code","bb5499d7":"code","3ca6a747":"code","011752b2":"code","46e833e4":"code","aac59867":"code","91dff546":"code","89856511":"code","2ee9ec6e":"code","6127e981":"code","f34552d6":"code","dca91f75":"code","ba6c1c48":"code","65785a18":"code","15c70f71":"code","36511b99":"code","60dde681":"code","eefddcc7":"code","2ef361f2":"code","f5eed272":"code","ac648afb":"code","f5a0e7c1":"code","0f1be5a8":"code","e8ae0bf1":"markdown","25e7198c":"markdown","c6bf62d2":"markdown","64bb78d6":"markdown","6ac4679d":"markdown","088eabc3":"markdown","2229f143":"markdown","c792977d":"markdown","0c8b2d3f":"markdown","9150ff95":"markdown","6b44266d":"markdown","6e044636":"markdown","2174df64":"markdown","f3399b62":"markdown","b879e5bc":"markdown","8c4a87b9":"markdown","9038c515":"markdown","ae704ec9":"markdown","5e3a2337":"markdown","940512b5":"markdown","dab7c2c7":"markdown","3a5493b5":"markdown"},"source":{"b41717f0":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","9bf9cd32":"test = pd.read_csv('..\/input\/titanic\/test.csv')\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')\ngender = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","ef910507":"train.head(10)","a571e291":"test.head(10)","dbcae812":"gender.head(10)","af20e3a5":"train.describe()","f44a37a7":"train.dtypes","57039725":"train.info()","2ea4a9a8":"test.describe()","b0925246":"test.dtypes","4f1da2b2":"test.info()","f4d253a3":"train.isna().sum()","b78088c9":"test.isna().sum()","e1531565":"gender.isna().sum()","ce8fde7d":"sns.heatmap(train.isnull(),yticklabels=False)","9f8c3899":"sns.barplot(x = 'Sex', y = 'Survived', data = train)","f5516d28":"train_Sex_Survived = train[['Sex','Survived']].groupby(['Sex'])\ntrain_Sex_Survived.mean().sort_values(by = 'Sex', ascending = False)","671e5796":"sns.barplot(x = 'Pclass', y = 'Survived', data = train)","020f73ff":"train_Pclass_Survived = train[['Pclass','Survived']].groupby(['Pclass'])\ntrain_Pclass_Survived.mean().sort_values(by='Survived', ascending = False)","6d99b063":"sns.barplot(x=\"Pclass\", y=\"Survived\", hue = \"Sex\", data=train)","19351c69":"columns = ['Name', 'Ticket', 'Cabin']\ntrain.drop(columns, axis =1, inplace = True)\ntest.drop(columns, axis =1, inplace = True)","bbe21e05":"train.dropna(subset = ['Embarked'], how = 'all', inplace = True)","0ddcae65":"train['Age'] = train['Age'].fillna((train['Age'].mean()))\ntest['Age'] = test['Age'].fillna((train['Age'].mean()))\ntest['Fare'] = test['Fare'].fillna((train['Fare'].mean()))","4e33716b":"sns.heatmap(train.isnull(),yticklabels=False)","713e31e5":"train.info()","7d99c953":"test.info()","330b261f":"PassengerId_train = train['PassengerId']\nPassengerId_test = test['PassengerId']","e9640f01":"train.drop('PassengerId', axis =1, inplace = True)\ntest.drop('PassengerId', axis =1, inplace = True)","646245d8":"train","f8da87cb":"test","43eac9f0":"test.info()","0636e517":"train.info()","282d5e22":"test = test.assign(Survived = gender['Survived'])","c947b8ed":"train_onehot = pd.get_dummies(train)\ntest_onehot = pd.get_dummies(test)","816e5b4a":"train_onehot","fd17ceee":"test_onehot","1ee633b5":"x_train = train_onehot.drop('Survived', axis =1)\ny_train = train_onehot['Survived']","bb5499d7":"x_test = test_onehot.drop('Survived', axis =1)\ny_test = test_onehot['Survived']","3ca6a747":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier","011752b2":"logreg = LogisticRegression()\nlogreg.fit(x_train, y_train)\ny_pred = logreg.predict(x_test)\nscore_log = logreg.score(x_test,y_test)\nscore_log","46e833e4":"y_pred","aac59867":"y_pred == y_test","91dff546":"np.sum((y_pred==y_test))","89856511":"y_pred.shape[0]","2ee9ec6e":"accuracy = np.sum((y_pred == y_test))\/y_pred.shape[0]\naccuracy","6127e981":"svc = SVC()\nsvc.fit(x_train,y_train)\ny_pred = svc.predict(x_test)\nscore_svc = svc.score(x_test,y_test)\nscore_svc","f34552d6":"knn = KNeighborsClassifier(n_neighbors = 5)\nknn.fit(x_train, y_train)\ny_pred = knn.predict(x_test)\nscore_knn = knn.score(x_test,y_test)\nscore_knn","dca91f75":"gNB = GaussianNB()\ngNB.fit(x_train,y_train)\ny_pred = gNB.predict(x_test)\nscore_gNB = gNB.score(x_test,y_test)\nscore_gNB","ba6c1c48":"perceptron = Perceptron()\nperceptron.fit(x_train, y_train)\ny_pred = perceptron.predict(x_test)\nscore_perceptron = perceptron.score(x_test,y_test)\nscore_perceptron","65785a18":"linear_svc = LinearSVC()\nlinear_svc.fit(x_train, y_train)\ny_pred = linear_svc.predict(x_test)\nscore_linear_svc = linear_svc.score(x_test,y_test)\nscore_linear_svc","15c70f71":"sgd = SGDClassifier()\nsgd.fit(x_train,y_train)\ny_pred = sgd.predict(x_test)\nscore_sgd = sgd.score(x_test,y_test)\nscore_sgd","36511b99":"decision_tree = DecisionTreeClassifier()\ndecision_tree.fit(x_train,y_train)\ny_pred = decision_tree.predict(x_test)\nscore_decision_tree = decision_tree.score(x_test,y_test)\nscore_decision_tree","60dde681":"random_forest = RandomForestClassifier(n_estimators = 100)\nrandom_forest.fit(x_train, y_train)\ny_pred = random_forest.predict(x_test)\nscore_random_forest = random_forest.score(x_test,y_test)\nscore_random_forest","eefddcc7":"models = pd.DataFrame({\n    'Model' : ['Support Vector Machines', 'KNN', 'Logistic Regression', 'Random Forest', 'Naive Bayes', 'Perceptron', \n              'Stochastic Gradient Descent', 'Linear SVC', 'Decision Tree'], \n    'Score' : [score_svc, score_knn, score_log, score_random_forest, score_gNB, score_perceptron,\n               score_sgd, score_linear_svc, score_decision_tree]})\nmodels.sort_values(by = 'Score', ascending = False)","2ef361f2":"logreg = LogisticRegression()\nlogreg.fit(x_train,y_train)\ny_pred = logreg.predict(x_test)\nscore_log = logreg.score(x_test,y_test)\nscore_log","f5eed272":"train = train.assign(PassengerId = PassengerId_train)\ntest = test.assign(PassengerId = PassengerId_test)","ac648afb":"submission = pd.DataFrame({\"PassengerId\": test[\"PassengerId\"],\n                          \"Survived\": y_pred})","f5a0e7c1":"submission.info()","0f1be5a8":"submission.to_csv('submission.csv',index = False)","e8ae0bf1":"## Support Vector Machines","25e7198c":"# Summary","c6bf62d2":"# Conclusion\n\nLogistic Regression model provides the best accuracy among all. Now inserting PassengerId column back.","64bb78d6":"## Dealing with missing values\n\n#### Drop \n\nPassengerID\n\nName\n\nTicket\n\nCabin","6ac4679d":"## Setting the data ","088eabc3":"## Percpetron","2229f143":"## Linear SVC","c792977d":"## Assigning the dummies ","0c8b2d3f":"## Separate the features and targets","9150ff95":"## Import the relevant libraries","6b44266d":"## Decision Tree","6e044636":"## Gaussian Naive Bayes","2174df64":"## Logistic Regression","f3399b62":"## Verify missing values","b879e5bc":"## Exploratory analysis","8c4a87b9":"## Manually checking the method","9038c515":"## KNN","ae704ec9":"## Stochastic Gradient Descent","5e3a2337":"## Analyzing the data","940512b5":"## Import different mathematical modules","dab7c2c7":"## Prediction Model\n\n=> Logistic Regression\n\n=> KNN or k-Nearest Neighbors\n\n=> Support Vector Machines\n\n=> Naive Bayes Classifier\n\n=> Decision Tree\n\n=> Random Forest\n\n=> Perceptron\n\n=> Artificial Neural Network\n\n=> RVM or Relevance Vector Machine","3a5493b5":"## Random Forest"}}