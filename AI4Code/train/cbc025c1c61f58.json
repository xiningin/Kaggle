{"cell_type":{"b3d58992":"code","1f2972e2":"code","248b5615":"code","71450a79":"code","ba387c27":"code","3c1d82d1":"code","561a13a8":"code","85696d80":"code","8a2752c3":"markdown"},"source":{"b3d58992":"from IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = 'all'\nfrom datetime import datetime\ndatetime.now().strftime(\"%Y\/%m\/%d %H:%M:%S\")","1f2972e2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom matplotlib import rcParams \nimport seaborn as sns\n\nfrom sklearn.model_selection import cross_val_score, cross_validate\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.svm import LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\n\ndef matplotlib_config():\n    rcParams['font.family'] = 'sans-serif'\n    rcParams['font.sans-serif'] = \\\n            ['Hiragino Maru Gothic Pro', 'Yu Gothic', 'Meirio', 'Takao', 'IPAexGothic', 'IPAPGothic', 'VL PGothic', 'Noto Sans CJK JP']\n    rcParams['figure.figsize'] = 12, 8\n    rcParams[\"font.size\"] = 12\n\nmatplotlib_config()","248b5615":"df_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')\n\ndf_train.head()","71450a79":"fillnas = {\n    'Age': df_train['Age'].median(),\n    'Fare': df_train['Fare'].median(),\n    'Cabin': 'Unknown',\n    'Embarked': df_train['Embarked'].mode(),\n}\n\ndef preprocess(df, is_test=False):\n    x = df.copy()\n    \n    for k, v in fillnas.items():\n        x[k].fillna(v, inplace=True)\n\n    x['is male'] = x['Sex']=='male'\n    \n    x['family size'] = x['SibSp'] + x['Parch'] + 1\n    x['is alone'] = x['family size']==1\n    \n    x['is Unkown'] = x['Cabin']=='Unknown'\n    \n    df_embarked = pd.get_dummies(x['Embarked'])\n    for col in df_embarked:\n        x[f'Embarked_{col}'] = df_embarked[col]\n    \n    x.drop(columns=['PassengerId', 'Name', 'Sex', 'SibSp', 'Parch', 'Ticket', 'Cabin', 'Embarked'], inplace=True)\n    \n    if is_test:\n        return x\n    else:\n        y = x['Survived']\n        x.drop(columns='Survived', inplace=True)\n        return x, y\n\ntrain_x, train_y = preprocess(df_train)\ntest_x = preprocess(df_test, is_test=True)\ntrain_x.head()\ntest_x.head()","ba387c27":"\nclf = RandomForestClassifier()\n# clf = LinearSVC()","3c1d82d1":"results = cross_validate(clf, train_x, train_y, cv=5, return_train_score=True, return_estimator=True)\n\nbest_clf = results['estimator'][np.argmax(results['test_score'])]\nscore = (results['test_score'].mean(), results['test_score'].std())\nprint(f'Accuracy: {score[0]:0.2f} \u00b1 {score[1]:0.2f}')","561a13a8":"pred = best_clf.predict(test_x)","85696d80":"sub = pd.DataFrame(df_test['PassengerId'])\nsub['Survived'] = list(map(int, pred))\nsub.to_csv('submission.csv', index=False)","8a2752c3":"## Setting config and Loading data"}}