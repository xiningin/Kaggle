{"cell_type":{"908d0e91":"code","af6d0a91":"code","34e311d1":"code","81429e45":"code","9068d029":"markdown","be028aad":"markdown","f79dd056":"markdown","7bdba593":"markdown"},"source":{"908d0e91":"%matplotlib inline\nimport json\nimport numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt","af6d0a91":"# Read dataset\ntrain = pd.read_json('..\/input\/train.json')\ntest = pd.read_json('..\/input\/test.json') \n# Create feature number of ingredients\ntrain['num_ingredients'] = train['ingredients'].apply(lambda x: len(x))\n# create list of cooking styles\nstyles = train.cuisine.unique()\n# create list of unique ingredients\ndef removeDuplicates(aList):\n    newList = []\n    for i in aList:\n        if i not in newList:\n            newList.append(i)\n    return newList\n# Extract all ingredients\ningredients = []\nfor i in range(0, len(train)):\n    line = train.iloc[i,2]\n    for j in range(0, len(line)):\n        ingredients.append(line[j])      \n# Extract unique ingredients list\nclean = removeDuplicates(ingredients)","34e311d1":"# Create a Graph \ng = nx.Graph()\n\nfor i in range(0,len(styles)):\n    g.add_node(styles[i],type = 'style')\n\nfor i in range(0,len(clean)):\n    g.add_node(clean[i],type = 'ingredient')\n    \nfor i in range(0,len(train)):\n    line = train.iloc[i,2]\n    for j in range(0, len(line)):\n        if train.iloc[i,0] == 'greek':\n                g.add_edge(train.iloc[i,0],line[j],color='blue', weight=1)\n        if train.iloc[i,0] == 'southern_us':\n                g.add_edge(train.iloc[i,0],line[j],color='lime', weight=1)\n        if train.iloc[i,0] == 'filipino':\n                g.add_edge(train.iloc[i,0],line[j],color='cyan', weight=1)\n        if train.iloc[i,0] == 'indian':\n                g.add_edge(train.iloc[i,0],line[j],color='pink', weight=1)\n        if train.iloc[i,0] == 'jamaican':\n                g.add_edge(train.iloc[i,0],line[j],color='yellow', weight=1)\n        if train.iloc[i,0] == 'spanish':\n                g.add_edge(train.iloc[i,0],line[j],color='red', weight=1)\n        if train.iloc[i,0] == 'italian':\n                g.add_edge(train.iloc[i,0],line[j],color='green', weight=1)                \n        if train.iloc[i,0] == 'mexican':\n                g.add_edge(train.iloc[i,0],line[j],color='coral', weight=1)\n        if train.iloc[i,0] == 'chinese':\n                g.add_edge(train.iloc[i,0],line[j],color='orange', weight=1)\n        if train.iloc[i,0] == 'british':\n                g.add_edge(train.iloc[i,0],line[j],color='grey', weight=1)\n        if train.iloc[i,0] == 'thai':\n                g.add_edge(train.iloc[i,0],line[j],color='orchid', weight=1)\n        if train.iloc[i,0] == 'vietnamese':\n                g.add_edge(train.iloc[i,0],line[j],color='olive', weight=1)\n        if train.iloc[i,0] == 'cajun_creole':\n                g.add_edge(train.iloc[i,0],line[j],color='gold', weight=1)                \n        if train.iloc[i,0] == 'brazilian':\n                g.add_edge(train.iloc[i,0],line[j],color='blue', weight=1)        \n        if train.iloc[i,0] == 'french':\n                g.add_edge(train.iloc[i,0],line[j],color='black', weight=1)        \n        if train.iloc[i,0] == 'japanese':\n                g.add_edge(train.iloc[i,0],line[j],color='peru', weight=1)        \n        if train.iloc[i,0] == 'irish':\n                g.add_edge(train.iloc[i,0],line[j],color='maroon', weight=1)\n        if train.iloc[i,0] == 'korean':\n                g.add_edge(train.iloc[i,0],line[j],color='salmon', weight=1)\n        if train.iloc[i,0] == 'moroccan':\n                g.add_edge(train.iloc[i,0],line[j],color='violet', weight=1)\n        if train.iloc[i,0] == 'russian':\n                g.add_edge(train.iloc[i,0],line[j],color='purple', weight=1)\n","81429e45":"# Plot the graph\nplt.figure(3,figsize=(90,90))  \nedges = g.edges()\ncolors = [g[u][v]['color'] for u,v in edges]\nnx.draw(g,node_color = 'lime', edge_color = colors, with_labels = True)\nplt.show()\nplt.savefig('graph_cooking.png')","9068d029":"# Let's explore our dataset in an hyperrealistic way...\n\n## This dataset can be explored using the Graph Theory method.\n\nLet's import needed libraries\n","be028aad":"We fill a Graph with nodes corresponding to cooking styles and ingredients.\n\n\nThen, we add relations between ingredients and cooking styles using colors with respect of train dataset.","f79dd056":"Now, we read datasets,\n\nWe extract all cooking styles and ingredients,\n\nAnd remove all duplicates","7bdba593":"##  \u201cThe holy grail is to spend less time making the picture than it takes people to look at it.\u201d \n## Banksy \n"}}