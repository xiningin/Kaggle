{"cell_type":{"479ce5e3":"code","fa4ec376":"code","39fb3e44":"code","d9a2e5b5":"code","0756a4b5":"code","a18ea8c2":"code","5ae965f5":"code","57d18692":"code","bb00006c":"code","6b9cb7e0":"code","2c488e06":"code","c1ec328f":"code","ec5f999c":"code","3ad426d1":"code","456ca9cf":"code","a733bd6e":"code","47f8d1a4":"code","0f6e2d11":"code","bad1692c":"code","d381f257":"code","ce5388ec":"code","54ed5d3a":"markdown","6c2b9de9":"markdown","dc5badf4":"markdown","7acae296":"markdown","7f2a4644":"markdown","cd78cc40":"markdown","62695316":"markdown","0b83ec56":"markdown","a61e1ae2":"markdown","481112d3":"markdown"},"source":{"479ce5e3":"import os\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm\nfrom collections import Counter\n\nimport torch\nimport torchvision\nfrom torch import nn, optim\nfrom torchvision import datasets\nimport torchvision.transforms as T\nfrom torch.utils.data import DataLoader\n\nfrom torchvision.utils import make_grid\nimport matplotlib.pyplot as plt\npd.options.plotting.backend = \"plotly\"\n\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')","fa4ec376":"data_dir = '..\/input\/chest-xray-pneumonia\/chest_xray'\n\nTRAIN = 'train'\nTEST = 'test'\nVAL = 'val'","39fb3e44":"# define augmentation\n\ndef apply_transform(mode=None):\n\n    if mode == 'train':\n        transform = T.Compose([T.Resize((256,256)),\n                               T.RandomHorizontalFlip(),\n                               T.RandomRotation((-20,+20)),\n                               T.CenterCrop(224),\n                               T.ToTensor(),\n                               T.Normalize([0.485, 0.456, 0.406],\n                                           [0.229, 0.224, 0.225])\n                              ])\n\n    elif mode == 'test' or mode == 'val':\n        transform = T.Compose([T.Resize((256,256)),\n                               T.CenterCrop(224),\n                               T.ToTensor(),\n                               T.Normalize([0.485, 0.456, 0.406],\n                                           [0.229, 0.224, 0.225])\n                              ])\n        \n    return transform","d9a2e5b5":"# Initialize dataset\n\ntrainset = datasets.ImageFolder(os.path.join(data_dir, TRAIN),\n                                transform = apply_transform(TRAIN))\n\nvalset = datasets.ImageFolder(os.path.join(data_dir,VAL),\n                              transform = apply_transform(VAL))\n\ntestset = datasets.ImageFolder(os.path.join(data_dir, TEST),\n                               transform = apply_transform(TEST))","0756a4b5":"print('Name of Labels:', trainset.classes)\nprint('Index of Labels:', trainset.class_to_idx)","a18ea8c2":"# define methods for class-count visualization\n\ndef class_count(dataset):\n    count = dict(Counter(dataset.targets))\n    count = dict(zip(dataset.classes[::-1], list(count.values())))      # changing keys of dictionary \n    return count\n\ndef plot_class_count(dataset, name='Dataset Labels Count'):\n    count = class_count(dataset)\n    pd.DataFrame(count, index=['Labels']).plot(kind='bar', title=name).show()","5ae965f5":"plot_class_count(trainset, name='Training-set Labels Count')","57d18692":"plot_class_count(valset, name='Validation-set Labels Count')","bb00006c":"plot_class_count(testset, name='Testing-set Labels Count')","6b9cb7e0":"# define dataloaders\n\ntrain_loader = DataLoader(trainset,\n                          batch_size=16,\n                          shuffle=True)\n\nval_loader = DataLoader(valset,\n                        batch_size=8)\n\ntest_loader = DataLoader(testset,\n                         batch_size=8)","2c488e06":"# Display information about dataloaders\n\nprint('Training Images:')\ndataiter = iter(train_loader)\nimages,labels = dataiter.next()\nprint(\"shape of images : {}\".format(images.shape))\nprint(\"shape of labels : {}\".format(labels.shape))\n\nprint('\\nValidation Images:')\ndataiter = iter(val_loader)\nimages,labels = dataiter.next()\nprint(\"shape of images : {}\".format(images.shape))\nprint(\"shape of labels : {}\".format(labels.shape))\n\nprint('\\nTest Images:')\ndataiter = iter(test_loader)\nimages,labels = dataiter.next()\nprint(\"shape of images : {}\".format(images.shape))\nprint(\"shape of labels : {}\".format(labels.shape))","c1ec328f":"def denoramlize(img):\n    img = img.permute(1,2,0)\n    mean = torch.FloatTensor([0.485, 0.456, 0.406])\n    std = torch.FloatTensor([0.229, 0.224, 0.225])\n    img = img*std + mean\n    img = np.clip(img,0,1)\n    return img\n\ndef imshow(img, title=None):\n    img = denoramlize(img)\n    plt.figure(figsize=[15, 15])\n    plt.axis('off')\n    plt.imshow(img)\n    plt.title(title)\n    plt.show()\n\ndef show_batch_images(dataloader):\n    images, labels = next(iter(dataloader))\n    images = make_grid(images, nrow=4, padding=15)\n    imshow(images, title=[\"NORMAL\" if x==0  else \"PNEUMONIA\" for x in labels])\n\nshow_batch_images(train_loader)","ec5f999c":"# define method to create model and set running device('cuda' or 'cpu')\n\ndef get_model(num_class=2, pretrained=True):\n\n    model = torchvision.models.vgg19(pretrained=pretrained)\n\n    # freeze the model layer\n    for param in model.parameters():\n        param.requires_grad = False\n\n    # add Linear classifier layer\n    in_features = model.classifier[0].in_features\n    classifier = nn.Sequential(\n        nn.Linear(in_features, 4096),\n        nn.ReLU(inplace=True),\n        nn.Dropout(0.5),\n        nn.Linear(4096, 4096),\n        nn.ReLU(inplace=True),\n        nn.Dropout(0.5),\n        nn.Linear(4096, 2),\n        nn.LogSoftmax(dim=1)\n    )\n    model.classifier = classifier\n    return model\n\nmodel = get_model(num_class=2, pretrained=True)\nmodel.to(device)","3ad426d1":"criterion = nn.CrossEntropyLoss()                   \n\noptimizer = optim.Adam(model.parameters(), lr=0.001)\n\nschedular = optim.lr_scheduler.ReduceLROnPlateau(optimizer, factor=0.1, patience=3)\n\ndef accuracy(preds, labels):\n    preds = torch.exp(preds)\n    top_p,top_class = preds.topk(1, dim=1)\n    equals = top_class == labels.view(*top_class.shape)\n    return torch.mean(equals.type(torch.FloatTensor))","456ca9cf":"epochs = 15\nval_loss_min = np.Inf\n\nfor epoch in range(epochs):\n\n    train_loss = 0.0\n    val_loss = 0.0\n    train_acc = 0.0\n    val_acc = 0.0\n    \n    model.train()\n    for images,labels in tqdm(train_loader):\n        optimizer.zero_grad()\n        images = images.to(device)\n        labels = labels.to(device)\n\n        preds = model(images)\n        loss = criterion(preds, labels)\n        loss.backward()\n        optimizer.step()\n\n        train_loss += loss.item()\n        train_acc += accuracy(preds, labels)\n\n    avg_train_loss = train_loss \/ len(train_loader)\n    avg_train_acc = train_acc \/ len(train_loader)\n\n    model.eval()\n    with torch.no_grad():\n        for images,labels in tqdm(val_loader):\n            images = images.to(device)\n            labels = labels.to(device)\n\n            preds = model(images)\n            loss = criterion(preds, labels)\n            val_loss += loss.item()\n            val_acc += accuracy(preds, labels)\n\n        avg_val_loss = val_loss \/ len(val_loader)\n        avg_val_acc = val_acc \/ len(val_loader)\n\n    schedular.step(avg_val_loss)\n\n    print(\"Epoch : {} \\ntrain_loss : {:.6f}, \\tTrain_acc : {:.6f}, \\nVal_loss : {:.6f}, \\tVal_acc : {:.6f}\".format(epoch + 1,\n                                                                                                                   avg_train_loss, avg_train_acc,\n                                                                                                                   avg_val_loss, avg_val_acc))\n    if avg_val_loss <= val_loss_min:\n        print('Validation loss decreased from ({:.6f} --> {:.6f}).\\nSaving model ...'.format(val_loss_min, avg_val_loss))\n        torch.save(model.state_dict(), 'Pneumonia_model.pt')\n        val_loss_min = avg_val_loss","a733bd6e":"# Evaluate the model performance\n\nmodel.eval()\n\ntest_loss = 0\ntest_acc = 0\nfor images,labels in tqdm(test_loader):\n\n    images = images.to(device)\n    labels = labels.to(device)\n\n    preds = model(images)\n    loss = criterion(preds,labels)\n    test_loss += loss.item()\n    test_acc += accuracy(preds,labels)\n\navg_test_loss = test_loss\/len(test_loader)\navg_test_acc = test_acc\/len(test_loader)\n\nprint(\"Test Loss : {:.6f} Test Acc : {:.6f}\".format(avg_test_loss,avg_test_acc))","47f8d1a4":"# plot actual vs. prediction labels\n\ndef plot_pred_label(img, pred, label):\n\n    class_name = ['NORMAL', 'PNEUMONIA']\n    classes = np.array(class_name)\n    pred = pred.cpu().data.numpy().squeeze()\n\n    fig, (ax1,ax2) = plt.subplots(figsize=(8,12), ncols=2)\n    img = denoramlize(img)\n    ax1.imshow(img)\n    ax1.set_title('Ground Truth : {}'.format(class_name[label]))\n    ax1.axis('off')\n    ax2.barh(classes, pred)\n    ax2.set_aspect(0.1)\n    ax2.set_yticks(classes)\n    ax2.set_yticklabels(classes)\n    ax2.set_title('Predicted Class')\n    ax2.set_xlim(0, 1.1)\n    plt.tight_layout()\n\n    return None","0f6e2d11":"image,label = testset[0]\n\npred = torch.exp(model(image.to(device).unsqueeze(0)))\nplot_pred_label(image, pred, label)","bad1692c":"image,label = testset[13]\n\npred = torch.exp(model(image.to(device).unsqueeze(0)))\nplot_pred_label(image, pred, label)","d381f257":"image,label = testset[81]\n\npred = torch.exp(model(image.to(device).unsqueeze(0)))\nplot_pred_label(image, pred, label)","ce5388ec":"image,label = testset[333]\n\npred = torch.exp(model(image.to(device).unsqueeze(0)))\nplot_pred_label(image, pred, label)","54ed5d3a":"After going through this notebook, you will be able to classify chest X-ray as **Normal** or **Pneumonia**. You are going to explore how to,\n* Load dataset and apply augmentation(using torchvision.transforms)\n* Plot Label-Count\n* Create DataLoader\n* Visualize Images\n* Load Pre-trained model\n* Train Model\n* Evaluate model and Actual vs Prediction plotting","6c2b9de9":"# **Evaluate model and Actual vs Prediction plotting**","dc5badf4":"# **Plot Label\/Class Count**","7acae296":"# **Create DataLoader**","7f2a4644":"# **Visualize Images**","cd78cc40":"# **Load Dataset and apply Augmentation**","62695316":"# **Model Training**","0b83ec56":"# **Load Pre-trained model and Fine-tuning model**","a61e1ae2":"# **Hello, Welcome to my kernel**","481112d3":"# Chest X-ray(Pneumonia) Classification"}}