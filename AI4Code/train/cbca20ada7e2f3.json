{"cell_type":{"0d620c8b":"code","dcdc05c3":"code","8ac395cd":"code","ed4de4aa":"code","52418c8c":"code","51ee2477":"code","4ba538b5":"code","57d7d6e1":"code","7ce8555e":"code","d203b146":"code","ffa9bb52":"code","89f11728":"code","20420efd":"code","a3fbfad6":"code","616710bb":"code","06536714":"code","d994ee89":"code","1c991dc0":"code","01848c48":"code","c80ef53f":"code","33602b82":"code","f91689a0":"code","d421143c":"code","97ea93fc":"code","92143e56":"code","d79edb72":"code","132fac9a":"code","dd4d844e":"code","cc53945f":"code","0778438e":"code","5cbcf9df":"code","e6435ca0":"code","59b98b31":"code","027bb98c":"code","2c65aba0":"code","20b9b1d0":"code","a49a58bb":"code","c0cd8522":"code","d31b513c":"code","34e6ac2e":"code","0d9c985a":"code","23c1e122":"code","6239aa23":"code","d955d975":"code","20bad9a1":"code","f33b72fb":"code","dbbbf1db":"code","ea99ef35":"code","4d741e5f":"code","5c470ea3":"code","a6296b02":"code","0ba006d1":"code","2d45eb55":"code","35d33acc":"code","cf753975":"code","02a541d7":"markdown","2457d9be":"markdown","db604ea3":"markdown","76ead042":"markdown"},"source":{"0d620c8b":"#pip install mplcursors\n","dcdc05c3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n%matplotlib inline\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport pandas_profiling\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\nimport bq_helper\nstackoverflow = bq_helper.BigQueryHelper(\"bigquery-public-data\",\"stackoverflow\")\n\n# Any results you write to the current directory are saved as output.","8ac395cd":"stackoverflow.list_tables()","ed4de4aa":"stackoverflow.head(\"posts_questions\",num_rows=20)","52418c8c":"#query=\"\"\"SELECT * FROM `bigquery-public-data.stackoverflow.posts_questions` WHERE EXTRACT (YEAR FROM creation_date)=2019\"\"\"\n#data = stackoverflow.query_to_pandas(query)\n\n#data['favorite_count'].fillna(0,inplace=True)\n#data['accepted_answer_id'].fillna(0,inplace=True)\n#data['last_editor_user_id'].fillna(0,inplace=True)\n#data.head()","51ee2477":"#data=pd.DataFrame(data)\n#pandas_profiling.ProfileReport(data)","4ba538b5":"stackoverflow.table_schema(\"posts_questions\")","57d7d6e1":"query1 = \"\"\"select favorite_count,creation_date,tags\n    from `bigquery-public-data.stackoverflow.posts_questions`\n    where extract(year from creation_date) = 2019 \n            \n    \"\"\"\nanswered_questions = stackoverflow.query_to_pandas(query1)\nanswered_questions.head(15)","7ce8555e":"answered_questions['favorite_count'].fillna(0,inplace=True)","d203b146":"query2 = \"\"\"select favorite_count,creation_date\n    from `bigquery-public-data.stackoverflow.posts_questions`\n    where extract(year from creation_date) = 2019 and extract(month from creation_date)=01 and tags like '%javascript%' and tags like '%python%'\n            \n    \"\"\"\nanswered_questions2 = stackoverflow.query_to_pandas(query2)\nanswered_questions2['favorite_count'].fillna(0,inplace=True)\nanswered_questions2.head(15)\n\n","ffa9bb52":"query1 = \"\"\"select EXTRACT(month FROM creation_date) AS month, sum(favorite_count) as favourite_count\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) = 2019 and extract(month from creation_date) < 6 and tags like '%javascript%'\n        group by month\n        order by month\n        \"\"\"\n\nJavaScriptFav = stackoverflow.query_to_pandas(query1)\nJavaScriptFav.head(10)","89f11728":"x_pos = np.arange(len(JavaScriptFav['month']))\nplt.bar(x_pos,JavaScriptFav['favourite_count'])\nplt.xticks(x_pos, JavaScriptFav['month'],fontsize=10)\nplt.yticks(fontsize=10)\nplt.xlabel('Month',fontsize=10)\nplt.ylabel('Favourite Count',fontsize=10)\nplt.title('JavaScript 2019',fontsize=20)\nplt.show()","20420efd":"query2 = \"\"\"select EXTRACT(month FROM creation_date) AS month, sum(view_count) as view_count\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) = 2019 and extract(month from creation_date) < 6 and tags like '%javascript%'\n        group by month\n        order by month\n        \"\"\"\n\nJavaScriptView = stackoverflow.query_to_pandas(query2)\nJavaScriptView.head(10)\n\n","a3fbfad6":"x_pos = np.arange(len(JavaScriptView['month']))\nplt.bar(x_pos,JavaScriptView['view_count'])\nplt.xticks(x_pos, JavaScriptView['month'],fontsize=10)\nplt.yticks(fontsize=10)\nplt.xlabel('Month',fontsize=10)\nplt.ylabel('View Count',fontsize=10)\nplt.title('JavaScript 2019',fontsize=20)\nplt.show()","616710bb":"query2 = \"\"\"select EXTRACT(month FROM creation_date) AS month, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) = 2019 and extract(month from creation_date) < 6 and tags like '%javascript%'\n        group by month\n        order by month\n        \"\"\"\n\nJavaScriptPosts = stackoverflow.query_to_pandas(query2)\nJavaScriptPosts.head(10)","06536714":"x_pos = np.arange(len(JavaScriptPosts['month']))\nplt.bar(x_pos,JavaScriptPosts['posts'])\nplt.xticks(x_pos, JavaScriptPosts['month'],fontsize=10)\nplt.yticks(fontsize=10)\nplt.xlabel('Month',fontsize=10)\nplt.ylabel('Posts Count',fontsize=10)\nplt.title('JavaScript 2019',fontsize=20)\nplt.show()","d994ee89":"query2 = \"\"\"select EXTRACT(month FROM creation_date) AS month, sum(answer_count) as answer_count\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) = 2019 and extract(month from creation_date) < 6 and tags like '%javascript%'\n        group by month\n        order by month\n        \"\"\"\n\nJavaScriptAnswers = stackoverflow.query_to_pandas(query2)\nJavaScriptAnswers.head(10)","1c991dc0":"x_pos = np.arange(len(JavaScriptAnswers['month']))\nplt.bar(x_pos,JavaScriptAnswers['answer_count'])\nplt.xticks(x_pos, JavaScriptAnswers['month'],fontsize=10)\nplt.yticks(fontsize=10)\nplt.xlabel('Month',fontsize=10)\nplt.ylabel('Answer Count',fontsize=10)\nplt.title('JavaScript 2019',fontsize=20)\nplt.show()","01848c48":"query2 = \"\"\"select EXTRACT(month FROM creation_date) AS month, sum(comment_count) as comment_count\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) = 2019 and extract(month from creation_date) < 6 and tags like '%javascript%'\n        group by month\n        order by month\n        \"\"\"\n\nJavaScriptComments = stackoverflow.query_to_pandas(query2)\nJavaScriptComments.head(10)","c80ef53f":"x_pos = np.arange(len(JavaScriptComments['month']))\nplt.bar(x_pos,JavaScriptComments['comment_count'])\nplt.xticks(x_pos, JavaScriptComments['month'],fontsize=10)\nplt.yticks(fontsize=10)\nplt.xlabel('Month',fontsize=10)\nplt.ylabel('Comments Count',fontsize=10)\nplt.title('JavaScript 2019',fontsize=20)\nplt.show()","33602b82":"query = \"\"\"select EXTRACT(month FROM creation_date) AS month, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) = 2019 and extract(month from creation_date) < 6 and tags like '%python%'\n        group by month\n        order by month\n        \"\"\"\n\nPythonPosts = stackoverflow.query_to_pandas(query)\n\n\nquery2 = \"\"\"select EXTRACT(month FROM creation_date) AS month, sum(view_count) as view_count\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) = 2019 and extract(month from creation_date) < 6 and tags like '%python%'\n        group by month\n        order by month\n        \"\"\"\n\nPythonView = stackoverflow.query_to_pandas(query2)\n\nquery1 = \"\"\"select EXTRACT(month FROM creation_date) AS month, sum(favorite_count) as favourite_count\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) = 2019 and extract(month from creation_date) < 6 and tags like '%python%'\n        group by month\n        order by month\n        \"\"\"\n\nPythonFav = stackoverflow.query_to_pandas(query1)","f91689a0":"query2 = \"\"\"select EXTRACT(month FROM creation_date) AS month, sum(answer_count) as answer_count\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) = 2019 and extract(month from creation_date) < 6 and tags like '%python%'\n        group by month\n        order by month\n        \"\"\"\n\nPythonAnswers = stackoverflow.query_to_pandas(query2)\n\nquery2 = \"\"\"select EXTRACT(month FROM creation_date) AS month, sum(comment_count) as comment_count\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) = 2019 and extract(month from creation_date) < 6 and tags like '%python%'\n        group by month\n        order by month\n        \"\"\"\n\nPythonComments = stackoverflow.query_to_pandas(query2)","d421143c":"Python= pd.merge(PythonComments, PythonAnswers, how='inner', on = 'month')\nPython = Python.set_index('month')\nPython=pd.merge(Python,PythonFav,how='inner',on='month')\nPython = Python.set_index('month')\n#z=Python.groupby('month')\n\nPython.plot(kind=\"bar\", stacked=True)\n#plt.xticks(y_pos, Python['month'],fontsize=10)\nplt.title(\"Python Stats\")\nplt.xlabel('Month',fontsize=10)","97ea93fc":"JavaScript= pd.merge(JavaScriptComments, JavaScriptAnswers, how='inner', on = 'month')\nJavaScript = JavaScript.set_index('month')\nJavaScript= pd.merge(JavaScript, JavaScriptFav, how='inner', on = 'month')\nJavaScript = JavaScript.set_index('month')\n\nJavaScript.plot(kind=\"bar\", stacked=True)\nplt.title(\"JavaScript Stats\")\nplt.xlabel('Month',fontsize=10)","92143e56":"#axe.subplot(0.5,0.5,0.5)","d79edb72":"def plot_clustered_stacked(dfall, labels=None, title=\"Trends in Programming Languages in 2019\",  H=\"x\", **kwargs):\n\n    n_df = len(dfall)\n    n_col = len(dfall[0].columns) \n    n_ind = len(dfall[0].index)\n    plt.figure(figsize=(20,10))\n    axe = plt.subplot(111)\n    \n    #fig_size = plt.rcParams[\"figure.figsize\"]\n    #print(fig_size)\n    #fig_size[0] = 20\n    #fig_size[1] = 8\n    #plt.rcParams[\"figure.figsize\"] = fig_size\n    #print(fig_size)\n    \n    for df in dfall : # for each data frame\n        \n        axe = df.plot(kind=\"bar\",\n                      linewidth=1,\n                      stacked=True,\n                      ax=axe,\n                      legend=False,\n                      grid=False,\n                      **kwargs)  # make bar plots\n    #df = {'index': [1,2,3,4,5],'comment_count':[0,0,0,0,0],'answer_count':[0,0,0,0,0],'favourite_count':[0,0,0,0,0]}\n    #df = pd.DataFrame(df)\n    #axe = df.plot(kind=\"bar\",linewidth=1,stacked=True, ax=axe,legend=False,grid=False,**kwargs)  # make bar plots\n\n\n    h,l = axe.get_legend_handles_labels() # get the handles we want to modify\n    for i in range(0, n_df * n_col, n_col): # len(h) = n_col * n_df\n        for j, pa in enumerate(h[i:i+n_col]):\n            for rect in pa.patches: # for each index\n                rect.set_x(rect.get_x() + 1 \/ float(n_df + 1) * i \/ float(n_col))\n                rect.set_hatch(H * int(i \/ n_col)) #edited part     \n                rect.set_width(1 \/ float(n_df + 1))\n\n    #axe.set_xticks((np.arange(0, 2 * n_ind, 2) + 1 \/ float(n_df + 1)) \/ 1.5)\n    #axe.set_xticklabels(df.index, rotation = 0, fontsize = 20)\n    plt.title(title,fontsize=30)\n    plt.xlabel('Month', rotation = 0, fontsize=20)\n    #plt.ylabel(fontsize=20)\n    plt.xticks(rotation = 0,fontsize=20)\n    plt.yticks(fontsize=20)\n    #axe.set_index('month')\n\n    # Add invisible data to add another legend\n    n=[]        \n    for i in range(n_df):\n        n.append(axe.bar(0, 0, color=\"gray\", hatch=H * i))\n\n    l1 = axe.legend(h[:n_col], l[:n_col], loc=[0.01, -0.2])\n    if labels is not None:\n        l2 = plt.legend(n, labels, loc=[0.3, -0.2]) \n    axe.add_artist(l1)\n    return axe\n\n# Then, just call :\nplot_clustered_stacked([Python, JavaScript],[\"Python\",\"JavaScript\"])","132fac9a":"plot_clustered_stacked([PythonView, JavaScriptView],[\"Python\",\"JavaScript\"])","dd4d844e":"plot_clustered_stacked([PythonPosts, JavaScriptPosts],[\"Python\",\"JavaScript\"])","cc53945f":"query = \"\"\"select EXTRACT(month FROM creation_date) AS month, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) = 2019 and extract(month from creation_date) < 6 and tags like '%c++%'\n        group by month\n        order by month\n        \"\"\"\n\nCplusPosts = stackoverflow.query_to_pandas(query)\n\n\nquery2 = \"\"\"select EXTRACT(month FROM creation_date) AS month, sum(view_count) as view_count\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) = 2019 and extract(month from creation_date) < 6 and tags like '%c++%'\n        group by month\n        order by month\n        \"\"\"\n\nCplusView = stackoverflow.query_to_pandas(query2)\n\nquery1 = \"\"\"select EXTRACT(month FROM creation_date) AS month, sum(favorite_count) as favourite_count\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) = 2019 and extract(month from creation_date) < 6 and tags like '%c++%'\n        group by month\n        order by month\n        \"\"\"\n\nCplusFav = stackoverflow.query_to_pandas(query1)\n\nquery3 = \"\"\"select EXTRACT(month FROM creation_date) AS month, sum(answer_count) as answer_count\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) = 2019 and extract(month from creation_date) < 6 and tags like '%c++%'\n        group by month\n        order by month\n        \"\"\"\n\nCplusAnswers = stackoverflow.query_to_pandas(query3)\n\nquery4 = \"\"\"select EXTRACT(month FROM creation_date) AS month, sum(comment_count) as comment_count\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) = 2019 and extract(month from creation_date) < 6 and tags like '%c++%'\n        group by month\n        order by month\n        \"\"\"\n\nCplusComments = stackoverflow.query_to_pandas(query4)\nprint(CplusPosts)\n","0778438e":"print(CplusPosts)\n","5cbcf9df":"list(CplusPosts)","e6435ca0":"queryx = \"\"\"select EXTRACT(month FROM creation_date) AS month, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) = 2019 and extract(month from creation_date) < 6 \n        group by month\n        order by month\n        \"\"\"\n\nPostsCount= stackoverflow.query_to_pandas(queryx)\nprint(PostsCount)","59b98b31":"PostsCount.posts","027bb98c":"244539922967\/9636060052421","2c65aba0":"CplusPosts['posts']= CplusPosts['posts']*100\/PostsCount.posts","20b9b1d0":"CplusPosts['posts']","a49a58bb":"#CplusPosts = CplusPosts.set_index('month')\n\ny_pos = np.arange(5)\nplt.plot(y_pos, CplusPosts['posts'])\nplt.xticks(y_pos, CplusPosts['month'],fontsize=10)\nplt.yticks(fontsize=10)\nplt.xlabel('Month', fontsize=15)\nplt.ylabel('Posts', fontsize=15)\nplt.title('Trends in C+')\n\n\n#fig = plt.figure()\n\n#def on_plot_hover(event):\n #   for curve in plot.get_lines():\n  #      if curve.contains(event)[0]:\n   #         print(\"over %s\", curve.get_gid())\n\n#fig.canvas.mpl_connect('motion_notify_event', on_plot_hover)\n\nplt.show()","c0cd8522":"Cplus= pd.merge(CplusComments, CplusAnswers, how='inner', on = 'month')\nCplus = Cplus.set_index('month')\nCplus=pd.merge(Cplus,CplusFav,how='inner',on='month')\nCplus = Cplus.set_index('month')\n#z=Python.groupby('month')\n\nCplus.plot(kind=\"bar\", stacked=True)\n#plt.xticks(y_pos, Python['month'],fontsize=10)\nplt.title(\"C++ Stats\")\nplt.xlabel('Month',fontsize=10)\n\n","d31b513c":"plot_clustered_stacked([Python, JavaScript,Cplus],[\"Python\",\"JavaScript\",\"Cplus\"])","34e6ac2e":"query = \"\"\"select EXTRACT(month FROM creation_date) AS month, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) = 2019 and extract(month from creation_date) < 6 and tags like '%html%'\n        group by month\n        order by month\n        \"\"\"\n\nhtmlPosts = stackoverflow.query_to_pandas(query)\n\n\nquery2 = \"\"\"select EXTRACT(month FROM creation_date) AS month, sum(view_count) as view_count\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) = 2019 and extract(month from creation_date) < 6 and tags like '%html%'\n        group by month\n        order by month\n        \"\"\"\n\nhtmlView = stackoverflow.query_to_pandas(query2)\n\nquery1 = \"\"\"select EXTRACT(month FROM creation_date) AS month, sum(favorite_count) as favourite_count\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) = 2019 and extract(month from creation_date) < 6 and tags like '%html%'\n        group by month\n        order by month\n        \"\"\"\n\nhtmlFav = stackoverflow.query_to_pandas(query1)\n\nquery3 = \"\"\"select EXTRACT(month FROM creation_date) AS month, sum(answer_count) as answer_count\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) = 2019 and extract(month from creation_date) < 6 and tags like '%html%'\n        group by month\n        order by month\n        \"\"\"\n\nhtmlAnswers = stackoverflow.query_to_pandas(query3)\n\nquery4 = \"\"\"select EXTRACT(month FROM creation_date) AS month, sum(comment_count) as comment_count\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) = 2019 and extract(month from creation_date) < 6 and tags like '%html%'\n        group by month\n        order by month\n        \"\"\"\n\nhtmlComments = stackoverflow.query_to_pandas(query4)\nhtmlPosts.head()","0d9c985a":"HTML= pd.merge(htmlComments, htmlAnswers, how='inner', on = 'month')\nHTML = HTML.set_index('month')\nHTML=pd.merge(HTML,htmlFav,how='inner',on='month')\nHTML = HTML.set_index('month')\n\nHTML.plot(kind=\"bar\", stacked=True)\n\nplt.title(\"HTML Stats\")\nplt.xlabel('Month',fontsize=10)","23c1e122":"plot_clustered_stacked([Python, JavaScript,Cplus,HTML],[\"Python\",\"JavaScript\",\"C++\",\"HTML\"])","6239aa23":"plot_clustered_stacked([PythonPosts, JavaScriptPosts,CplusPosts,htmlPosts],[\"Python\",\"JavaScript\",\"C++\",\"html\"])","d955d975":"query = \"\"\"select EXTRACT(month FROM creation_date) AS month, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) = 2019 and extract(month from creation_date) < 6 and tags like '%ruby%'\n        group by month\n        order by month\n        \"\"\"\n\nRubyPosts = stackoverflow.query_to_pandas(query)\n\n\nquery2 = \"\"\"select EXTRACT(month FROM creation_date) AS month, sum(view_count) as view_count\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) = 2019 and extract(month from creation_date) < 6 and tags like '%ruby%'\n        group by month\n        order by month\n        \"\"\"\n\nRubyView = stackoverflow.query_to_pandas(query2)\n\nquery1 = \"\"\"select EXTRACT(month FROM creation_date) AS month, sum(favorite_count) as favourite_count\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) = 2019 and extract(month from creation_date) < 6 and tags like '%ruby%'\n        group by month\n        order by month\n        \"\"\"\n\nRubyFav = stackoverflow.query_to_pandas(query1)\n\nquery3 = \"\"\"select EXTRACT(month FROM creation_date) AS month, sum(answer_count) as answer_count\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) = 2019 and extract(month from creation_date) < 6 and tags like '%ruby%'\n        group by month\n        order by month\n        \"\"\"\n\nRubyAnswers = stackoverflow.query_to_pandas(query3)\n\nquery4 = \"\"\"select EXTRACT(month FROM creation_date) AS month, sum(comment_count) as comment_count\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) = 2019 and extract(month from creation_date) < 6 and tags like '%ruby%'\n        group by month\n        order by month\n        \"\"\"\n\nRubyComments = stackoverflow.query_to_pandas(query4)\nRubyFav.head()\n\n","20bad9a1":"Ruby= pd.merge(RubyComments, RubyAnswers, how='inner', on = 'month')\nRuby =Ruby.set_index('month')\nRuby=pd.merge(Ruby,RubyFav,how='inner',on='month')\nRuby = Ruby.set_index('month')\n\nRuby.plot(kind=\"bar\", stacked=True)\n\nplt.title(\"Ruby Stats\")\nplt.xlabel('Month',fontsize=10)","f33b72fb":"plot_clustered_stacked([Python, JavaScript,Cplus,HTML,Ruby],[\"Python\",\"JavaScript\",\"C++\",\"HTML\",\"Ruby\"])","dbbbf1db":"plot_clustered_stacked([PythonPosts, JavaScriptPosts,CplusPosts,htmlPosts,RubyPosts],[\"Python\",\"JavaScript\",\"C++\",\"HTML\",\"Ruby\"])","ea99ef35":"query = \"\"\"select EXTRACT(month FROM creation_date) AS month, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) = 2019 and extract(month from creation_date) < 6 and tags like '%mysql%'\n        group by month\n        order by month\n        \"\"\"\n\nMySQLPosts = stackoverflow.query_to_pandas(query)\n\n\nquery2 = \"\"\"select EXTRACT(month FROM creation_date) AS month, sum(view_count) as view_count\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) = 2019 and extract(month from creation_date) < 6 and tags like '%mysql%'\n        group by month\n        order by month\n        \"\"\"\n\nMySQLView = stackoverflow.query_to_pandas(query2)\n\nquery1 = \"\"\"select EXTRACT(month FROM creation_date) AS month, sum(favorite_count) as favourite_count\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) = 2019 and extract(month from creation_date) < 6 and tags like '%mysql%'\n        group by month\n        order by month\n        \"\"\"\n\nMySQLFav = stackoverflow.query_to_pandas(query1)\n\nquery3 = \"\"\"select EXTRACT(month FROM creation_date) AS month, sum(answer_count) as answer_count\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) = 2019 and extract(month from creation_date) < 6 and tags like '%mysql%'\n        group by month\n        order by month\n        \"\"\"\n\nMySQLAnswers = stackoverflow.query_to_pandas(query3)\n\nquery4 = \"\"\"select EXTRACT(month FROM creation_date) AS month, sum(comment_count) as comment_count\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) = 2019 and extract(month from creation_date) < 6 and tags like '%mysql%'\n        group by month\n        order by month\n        \"\"\"\n\nMySQLComments = stackoverflow.query_to_pandas(query4)\n\n\nMySQLFav.head()","4d741e5f":"MySQL= pd.merge(MySQLComments, MySQLAnswers, how='inner', on = 'month')\nMySQL =MySQL.set_index('month')\nMySQL=pd.merge(MySQL,MySQLFav,how='inner',on='month')\nMySQL = MySQL.set_index('month')\n\nMySQL.plot(kind=\"bar\", stacked=True)\n\nplt.title(\"MySQL Stats\")\nplt.xlabel('Month',fontsize=10)","5c470ea3":"plot_clustered_stacked([Python, JavaScript,Cplus,HTML,Ruby,MySQL],[\"Python\",\"JavaScript\",\"C++\",\"HTML\",\"Ruby\",\"MySQL\"])","a6296b02":"query = \"\"\"select EXTRACT(month FROM creation_date) AS month, sum(id) as posts\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) = 2019 and extract(month from creation_date) < 6 and tags like '%c#%'\n        group by month\n        order by month\n        \"\"\"\n\nCHashPosts = stackoverflow.query_to_pandas(query)\n\n\nquery2 = \"\"\"select EXTRACT(month FROM creation_date) AS month, sum(view_count) as view_count\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) = 2019 and extract(month from creation_date) < 6 and tags like '%c#%'\n        group by month\n        order by month\n        \"\"\"\n\nCHashView = stackoverflow.query_to_pandas(query2)\n\nquery1 = \"\"\"select EXTRACT(month FROM creation_date) AS month, sum(favorite_count) as favourite_count\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) = 2019 and extract(month from creation_date) < 6 and tags like '%c#%'\n        group by month\n        order by month\n        \"\"\"\n\nCHashFav = stackoverflow.query_to_pandas(query1)\n\nquery3 = \"\"\"select EXTRACT(month FROM creation_date) AS month, sum(answer_count) as answer_count\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) = 2019 and extract(month from creation_date) < 6 and tags like '%c#%'\n        group by month\n        order by month\n        \"\"\"\n\nCHashAnswers = stackoverflow.query_to_pandas(query3)\n\nquery4 = \"\"\"select EXTRACT(month FROM creation_date) AS month, sum(comment_count) as comment_count\n        from `bigquery-public-data.stackoverflow.posts_questions`\n        where extract(year from creation_date) = 2019 and extract(month from creation_date) < 6 and tags like '%c#%'\n        group by month\n        order by month\n        \"\"\"\n\nCHashComments = stackoverflow.query_to_pandas(query4)\n\n\nCHashFav.head()","0ba006d1":"CHash=pd.merge(CHashComments, CHashAnswers, how='inner', on = 'month')\nCHash =CHash.set_index('month')\nCHash=pd.merge(CHash,CHashFav,how='inner',on='month')\nCHash = CHash.set_index('month')\n\nCHash.plot(kind=\"bar\", stacked=True)\n\nplt.title(\"CHash Stats\")\nplt.xlabel('Month',fontsize=10)","2d45eb55":"plot_clustered_stacked([Python, JavaScript,Cplus,HTML,Ruby,MySQL],[\"Python\",\"JavaScript\",\"C++\",\"HTML\",\"Ruby\",\"MySQL\"])","35d33acc":"Ruby= pd.merge(RubyPosts, htmlPosts, how='inner', on = 'month')\nRuby =Ruby.set_index('month')\nRuby= pd.merge(Ruby, JavaScriptPosts, how='inner', on = 'month')\nRuby =Ruby.set_index('month')\nRuby=pd.merge(Ruby,PythonPosts,how='inner',on='month')\nRuby = Ruby.set_index('month')\nRuby=pd.merge(Ruby,MySQLPosts,how='inner',on='month')\nRuby = Ruby.set_index('month')\nRuby=pd.merge(Ruby,CHashPosts,how='inner',on='month')\nRuby = Ruby.set_index('month')\n#Ruby['posts']= Ruby['posts']*100\/PostsCount.posts","cf753975":"Ruby.plot(kind='line')\nplt.xlabel('Month', fontsize=15)\nplt.ylabel('Posts', fontsize=15)\ny_pos=[1,2,3,4,5]\nplt.xticks(y_pos,fontsize=10)\nplt.yticks(fontsize=10)\nplt.title('Trends in Technology')\nplt.legend(['Ruby','HTML','JavaScript','Python','MySQL','C#'],loc=[1.0,0.7])\nplt.show()","02a541d7":"# **TABLE SCHEMA**","2457d9be":"# **IMPORTING THE PACKAGES**","db604ea3":"# **QUESTIONS POSTED**","76ead042":"# **DATASET COLUMNS**"}}