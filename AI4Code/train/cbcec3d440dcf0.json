{"cell_type":{"30a6032e":"code","29b31b74":"code","1917d598":"code","9086f819":"code","8cdf93fc":"code","b38af897":"code","7c51ad3e":"code","e2a0f3f6":"code","afe6cdda":"code","01c9b6da":"code","3910d250":"code","e2b83d14":"code","5df9bb96":"code","83878673":"code","33e2a9a1":"code","bef3789e":"code","6ff86ebf":"markdown","d575b1f1":"markdown","4b578509":"markdown","77030a27":"markdown","1dfcb226":"markdown"},"source":{"30a6032e":"# ==================\n# \u30e9\u30a4\u30d6\u30e9\u30ea\n# ==================\nimport pandas as pd\nimport numpy as np\nimport torch\nimport transformers\nfrom transformers import BertTokenizer\nfrom tqdm import tqdm\nfrom sklearn.decomposition import TruncatedSVD\ntqdm.pandas()","29b31b74":"train = pd.read_csv(\"..\/input\/data-science-winter-osaka2\/train.csv\")\ntest = pd.read_csv(\"..\/input\/data-science-winter-osaka2\/test.csv\")","1917d598":"train['description'] ","9086f819":"class BertSequenceVectorizer:\n    def __init__(self):\n        self.device = 'cuda' if torch.cuda.is_available() else 'cpu'\n        self.model_name = 'bert-base-uncased'\n        self.tokenizer = BertTokenizer.from_pretrained(self.model_name)\n        self.bert_model = transformers.BertModel.from_pretrained(self.model_name)\n        self.bert_model = self.bert_model.to(self.device)\n        self.max_len = 128\n\n\n    def vectorize(self, sentence : str) -> np.array:\n        inp = self.tokenizer.encode(sentence)\n        len_inp = len(inp)\n\n        if len_inp >= self.max_len:\n            inputs = inp[:self.max_len]\n            masks = [1] * self.max_len\n        else:\n            inputs = inp + [0] * (self.max_len - len_inp)\n            masks = [1] * len_inp + [0] * (self.max_len - len_inp)\n\n        inputs_tensor = torch.tensor([inputs], dtype=torch.long).to(self.device)\n        masks_tensor = torch.tensor([masks], dtype=torch.long).to(self.device)\n\n        bert_out = self.bert_model(inputs_tensor, masks_tensor)\n        seq_out, pooled_out = bert_out['last_hidden_state'], bert_out['pooler_output']\n\n        if torch.cuda.is_available():    \n            return seq_out[0][0].cpu().detach().numpy() # 0\u756a\u76ee\u306f [CLS] token, 768 dim \u306e\u6587\u7ae0\u7279\u5fb4\u91cf\n        else:\n            return seq_out[0][0].detach().numpy()","8cdf93fc":"BSV = BertSequenceVectorizer() # \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u307e\u3059\ntrain['description'] = train['description'].fillna(\"NaN\") # null \u306f\u4ee3\u308f\u308a\u306e\u3082\u306e\u3067\u57cb\u3081\u307e\u3059\ntrain['description_bert'] =train['description'].progress_apply(lambda x: BSV.vectorize(x))","b38af897":"train['description_bert']","7c51ad3e":"train['description']","e2a0f3f6":"bert_array = np.zeros([len(train),768])\nfor n,i in enumerate(train['description_bert']):\n    bert_array[n,:] = i","afe6cdda":"svd = TruncatedSVD(n_components=50)\nX = svd.fit_transform(bert_array)\ndf1 = pd.DataFrame(X, columns=[f\"description_bert_svd_{i}\" for i in range(50)])","01c9b6da":"#\u307e\u305abert\u3067\u51fa\u6765\u305f\u30c7\u30fc\u30bf\u306b\u304f\u3063\u4ed8\u3051\u308b\u305f\u3081\u306e\u30e9\u30d9\u30eb\u3092\u6e96\u5099\u3057\u307e\u3059\nX_train=pd.merge(train['name'], df1, left_index=True, right_index=True)\nX_train","3910d250":"BSV = BertSequenceVectorizer() # \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u307e\u3059\ntest['description'] = test['description'].fillna(\"NaN\") # null \u306f\u4ee3\u308f\u308a\u306e\u3082\u306e\u3067\u57cb\u3081\u307e\u3059\ntest['description_bert'] =test['description'].progress_apply(lambda x: BSV.vectorize(x))","e2b83d14":"bert_array = np.zeros([len(test),768])\nfor n,i in enumerate(test['description_bert']):\n    bert_array[n,:] = i","5df9bb96":"svd = TruncatedSVD(n_components=50)\nX = svd.fit_transform(bert_array)\ndf2 = pd.DataFrame(X, columns=[f\"description_bert_svd_{i}\" for i in range(50)])","83878673":"X_test=pd.merge(test['name'], df2, left_index=True, right_index=True)\nX_test","33e2a9a1":"df_description_bert=pd.concat([X_train, X_test])\ndf_description_bert","bef3789e":"df_description_bert.to_csv(\"game_description_bert.csv\",index=False)","6ff86ebf":"# Google\u691c\u7d22\u30a8\u30f3\u30b8\u30f3\u306b\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u300cBERT\u300d\n\u3092\u3064\u304b\u3063\u3066\u6587\u7ae0\u306e\u9805\u76ee(\u30ab\u30e9\u30e0)\u306edescription\u3092\u6570\u5024\u5316(\u30d9\u30af\u30c8\u30eb\u5316)\u3057\u307e\u3059\n\nhttps:\/\/ledge.ai\/bert\/","d575b1f1":"### BERT\u3092\u4f7f\u3063\u3066\u3001text\u30c7\u30fc\u30bf\u3092\u30d9\u30af\u30c8\u30eb\u5316\u3057\u307e\u3059\nhttps:\/\/huggingface.co\/transformers\/model_doc\/bert.html <br>\n\n\u30c7\u30fc\u30bf\u5206\u6790\u306e\u30b3\u30f3\u30da\u3067\u306f\u30c6\u30ad\u30b9\u30c8\u51e6\u7406\u306b\u3088\u304fBERT\u306f\u4f7f\u308f\u308c\u307e\u3059 <br>\n\u4e0b\u8a18URL\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059<br>\nhttps:\/\/www.guruguru.science\/competitions\/16\/discussions\/fb792c87-6bad-445d-aa34-b4118fc378c1\/\n\nSettings\u3067\u4e0b\u8a18\u8a2d\u5b9a\u306b\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3044\n- Accelerator\u3092GPU\n- Internet\u3092ON","4b578509":"[\u30e1\u30e2] -\n\u8a08\u7b97\u6642\u9593\u306e\u9577\u3044\u90e8\u5206\u306f\u4eca\u56de\u306e\u3088\u3046\u306b\u5225\u30b3\u30fc\u30c9\u3067\u8a08\u7b97\u3055\u305b\u3066\u3001\u30e1\u30a4\u30f3\u306e\u30b3\u30fc\u30c9\u3067\u306f\u7d50\u679c\u3060\u3051\u8aad\u307f\u8fbc\u307e\u3059\u3068\u6642\u9593\u77ed\u7e2e\u306b\u3064\u306a\u304c\u308b\u305d\u3046\u3067\u3059\uff01\u3000\uff42\uff59 Grandmaster\u306etakoi\u3055\u3093\u30a2\u30c9\u30d0\u30a4\u30b9","77030a27":"\u904e\u53bb\u30b3\u30f3\u30da\u3067\u7d39\u4ecb\u3057\u3066\u9802\u3044\u305f\u5185\u5bb9\u306e\u30b3\u30d4\u30fc\u306b\u306a\u308a\u307e\u3059**\n\n\u8a73\u7d30\u306f\u4e0b\u8a18URL\u3078\n\nhttps:\/\/www.kaggle.com\/takoihiraokazu\/bert-text","1dfcb226":"test\u30c7\u30fc\u30bf\u3082\u540c\u3058\u51e6\u7406\u3092\u884c\u3044\u307e\u3059"}}