{"cell_type":{"1bd02ff2":"code","b1c4e0d9":"code","059a41a4":"code","2c050c76":"code","0bb3caa4":"code","5d4d4b21":"code","57aebf78":"code","17ea0eac":"code","a97c489e":"code","024fef1c":"code","42acf33d":"code","274b41ef":"code","4c9facc9":"code","0f0a86cb":"code","5faef963":"code","a402c1db":"code","bb45b7c8":"code","2b313146":"code","94804faf":"code","2aaadf74":"code","b434e368":"code","edcc49da":"code","68962147":"code","9a897d71":"code","b1e6c27c":"code","c043d871":"code","906e1993":"markdown","83002a80":"markdown","af431c59":"markdown","2966b110":"markdown","f897d4de":"markdown","100f8d82":"markdown","9a047679":"markdown"},"source":{"1bd02ff2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b1c4e0d9":"train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","059a41a4":"import tensorflow as tf\nfrom tensorflow import keras\nfrom keras.layers import Conv2D,Flatten,MaxPool2D,Dense\nfrom keras.models import Sequential\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt","2c050c76":"train.head()","0bb3caa4":"test.head()","5d4d4b21":"train.describe()","57aebf78":"y_train = train['label']\ny_train.value_counts()","17ea0eac":"y_train = to_categorical(y_train,num_classes=10)","a97c489e":"X_train = train.drop(columns=['label'])","024fef1c":"X_train.head()\nX_train = X_train\/255.0\ntest = test\/255.0","42acf33d":"X_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","274b41ef":"model = Sequential()\nmodel.add(Conv2D(32,(3,3),input_shape=(28,28,1),activation='relu'))\nmodel.add(Conv2D(32,(3,3),activation='relu'))\nmodel.add(Conv2D(32,(3,3),activation='relu'))\nmodel.add(MaxPool2D(2,2))\nmodel.add(Conv2D(32,(3,3),activation='relu'))\nmodel.add(Conv2D(32,(3,3),activation='relu'))\nmodel.add(Conv2D(32,(3,3),activation='relu'))\nmodel.add(MaxPool2D(2,2))\n\nmodel.add(Flatten())\nmodel.add(Dense(10,activation='softmax'))\nmodel.summary()","4c9facc9":"model.compile(optimizer=keras.optimizers.SGD(lr=0.01,decay=10e-6),metrics=['accuracy'],loss='categorical_crossentropy')","0f0a86cb":"history = model.fit(x=X_train,y=y_train,epochs=10,validation_split=0.2)","5faef963":"hist = history.history\nhist.keys()","a402c1db":"acc = hist['accuracy']\nval_loss = hist['val_loss']\nloss = hist['loss']\nval_acc = hist['val_accuracy']","bb45b7c8":"epochs = range(1,len(acc)+1)\nplt.plot(epochs,acc,'r',label='Training Accuracy')\nplt.plot(epochs,val_acc,'b',label='Validation Accuracy')\nplt.title('Training vs Validation Accuracy')\nplt.legend()\nplt.figure()\nplt.show()","2b313146":"plt.plot(epochs,loss,'r',label='Training Loss')\nplt.plot(epochs,val_loss,'bo',label='Validation Loss')\nplt.title('Training vs Validation loss')\nplt.legend()\nplt.figure()\nplt.show()","94804faf":"result = model.predict(test)","2aaadf74":"result = np.argmax(result,axis=1)","b434e368":"result","edcc49da":"result = pd.Series(result,name=\"Label\")","68962147":"result","9a897d71":"final = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),result],axis = 1)\n","b1e6c27c":"final.head()","c043d871":"final.to_csv('MNIST_attempt-1.csv')","906e1993":"First attempt on MNIST dataset using Kaggle Notebook\n","83002a80":"**RESHAPING THE X_Train to have dimension (28,28,1) where 1 is denotes the channel**","af431c59":"# Importing Libraries and Data","2966b110":"Converting y_train to categorical data","f897d4de":"**Plotting Training Acc vs Validation Acc\n  Plotting Training Loss vs Validation Loss**","100f8d82":"Scaling the X_train and test to be in range [0,1],grayscale\n","9a047679":"# Model "}}