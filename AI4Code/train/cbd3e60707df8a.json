{"cell_type":{"2474f05f":"code","007c4349":"code","f19dbbd5":"code","e72b5c91":"code","3afd5953":"code","136a2d55":"code","43609fdd":"code","ce9fd116":"code","0959658b":"code","0a2291ea":"code","6b0147c6":"code","e6be8139":"code","65633b5b":"code","13120758":"code","8aeb380c":"code","2a8e8082":"markdown","986b5985":"markdown","1ef581a4":"markdown","81d1214a":"markdown","69be4ccf":"markdown","b6f18b3a":"markdown","226e301a":"markdown","1e65532b":"markdown","f212f2f8":"markdown","fd903100":"markdown"},"source":{"2474f05f":"!pip install mglearn","007c4349":"\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n\n\nfrom sklearn.preprocessing import OneHotEncoder,PolynomialFeatures\n\nfrom sklearn.linear_model import Ridge,LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\n\nimport mglearn","f19dbbd5":"citibike = mglearn.datasets.load_citibike()\nprint(\"Citi Bike data:\\n{}\".format(citibike.head()))\nprint(\"shape = \",citibike.shape)","e72b5c91":"plt.figure(figsize=(10, 3))\nxticks = pd.date_range(start=citibike.index.min(), end=citibike.index.max(),\n                       freq='D')\nplt.xticks(xticks, xticks.strftime(\"%a %m-%d\"), rotation=90, ha=\"left\")\nplt.plot(citibike, linewidth=1)\nplt.xlabel(\"Date\")\nplt.ylabel(\"Rentals\")","3afd5953":"# extract the target values (number of rentals)\ny = citibike.values\n# convert to POSIX time by dividing by 10**9\nX = citibike.index.astype(\"int64\").values.reshape(-1, 1) \/\/ 10**9","136a2d55":"# use the first 184 data points for training, the rest for testing\nn_train = 184\n\n# function to evaluate and plot a regressor on a given feature set\ndef eval_on_features(features, target, regressor):\n    # split the given features into a training and a test set\n    X_train, X_test = features[:n_train], features[n_train:]\n    # also split the target array\n    y_train, y_test = target[:n_train], target[n_train:]\n    regressor.fit(X_train, y_train)\n    print(\"Test-set R^2: {:.2f}\".format(regressor.score(X_test, y_test)))\n    y_pred = regressor.predict(X_test)\n    y_pred_train = regressor.predict(X_train)\n    plt.figure(figsize=(10, 3))\n\n    plt.xticks(range(0, len(X), 8), xticks.strftime(\"%a %m-%d\"), rotation=90,\n               ha=\"left\")\n\n    plt.plot(range(n_train), y_train, label=\"train\")\n    plt.plot(range(n_train, len(y_test) + n_train), y_test, '-', label=\"test\")\n    plt.plot(range(n_train), y_pred_train, '--', label=\"prediction train\")\n\n    plt.plot(range(n_train, len(y_test) + n_train), y_pred, '--',\n             label=\"prediction test\")\n    plt.legend(loc=(1.01, 0))\n    plt.xlabel(\"Date\")\n    plt.ylabel(\"Rentals\")","43609fdd":"from sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators=100, random_state=0)\neval_on_features(X, y, regressor)","ce9fd116":"X_hour = citibike.index.hour.values.reshape(-1, 1)\neval_on_features(X_hour, y, regressor)","0959658b":"X_hour_week = np.hstack([citibike.index.dayofweek.values.reshape(-1, 1),\n                         citibike.index.hour.values.reshape(-1, 1)])\neval_on_features(X_hour_week, y, regressor)","0a2291ea":"eval_on_features(X_hour_week, y, LinearRegression())","6b0147c6":"enc = OneHotEncoder()\nX_hour_week_onehot = enc.fit_transform(X_hour_week).toarray()\neval_on_features(X_hour_week_onehot, y, Ridge())","e6be8139":"poly_transformer = PolynomialFeatures(degree=2, interaction_only=True,\n                                      include_bias=False)\nX_hour_week_onehot_poly = poly_transformer.fit_transform(X_hour_week_onehot)\nlr = Ridge()\neval_on_features(X_hour_week_onehot_poly, y, lr)","65633b5b":"hour = [\"%02d:00\" % i for i in range(0, 24, 3)]\nday = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\nfeatures =  day + hour","13120758":"features_poly = poly_transformer.get_feature_names(features)\nfeatures_nonzero = np.array(features_poly)[lr.coef_ != 0]\ncoef_nonzero = lr.coef_[lr.coef_ != 0]","8aeb380c":"plt.figure(figsize=(15, 2))\nplt.plot(coef_nonzero, 'o')\nplt.xticks(np.arange(len(coef_nonzero)), features_nonzero, rotation=90)\nplt.xlabel(\"Feature name\")\nplt.ylabel(\"Feature magnitude\")","2a8e8082":"## plot by hour_week (randomforest)","986b5985":"## plot by hour (randomforest)","1ef581a4":"## 1.split train and test data \n## 2.make model \n## 3.predict train data and test data \n## 4.plot data (train \/ test \/ train result \/ test result)","81d1214a":"# plot hour_week after PolynomialFeatures","69be4ccf":"## plot nonezero coef by hour ","b6f18b3a":"# load data","226e301a":"## plot by hour_week (LinearRegression)","1e65532b":"# plot hour_week after onehot encoding","f212f2f8":"# plot by date (randomforest)","fd903100":"# plot timeseries "}}