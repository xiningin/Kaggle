{"cell_type":{"7e444512":"code","d28ee51d":"code","76b04c8c":"code","adcb66fa":"code","da619143":"code","dca5a5fd":"code","eba01d08":"code","d2bcf528":"code","f43ec46d":"code","d434f679":"code","1a917c7b":"code","8c62a74e":"code","1838f186":"code","f0e0e493":"code","a5180119":"code","d0bffd8a":"code","e9855939":"code","aa56e927":"code","46054928":"code","9b2f1edf":"code","e86f8ee9":"code","f2302d44":"code","f18fc78b":"code","e0601af8":"code","1a856b4f":"code","638436ce":"code","700c13f4":"code","9f5f184a":"code","3d200535":"code","6c1f5bc8":"code","91f83610":"code","479ca667":"code","57d77d10":"code","6a643f9d":"code","97f0fb1a":"code","b4344c48":"markdown","50181ed4":"markdown","c7fed6e5":"markdown","b62fc6f9":"markdown","a676430f":"markdown","5c5cffcd":"markdown","64aa0c69":"markdown","318f067c":"markdown","acc606ea":"markdown"},"source":{"7e444512":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\nfrom decimal import Decimal\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","d28ee51d":"#reading csv files\ndata = pd.read_csv('..\/input\/mushrooms.csv')\ndata.head()","76b04c8c":"data.info()","adcb66fa":"data.columns = [c.replace(' ', '') for c in data.columns]\ndata.columns = [c.replace('-', '') for c in data.columns]\ndata.columns","da619143":"descr=data.describe()\ndescr","dca5a5fd":"a=data['class']\nfor i in range(0,len(a)):\n    if a[i]==\"p\":\n        a[i]=\"poisonous\"\n    elif a[i]==\"e\":\n        a[i]=\"edible\"\n\na=data['capshape']\nfor i in range(0,len(a)):\n    if a[i]==\"b\":\n        a[i]=\"bell\"\n    elif a[i]==\"c\":\n        a[i]=\"conical\"\n    elif a[i]==\"x\":\n        a[i]=\"convex\"\n    elif a[i]==\"f\":\n        a[i]=\"flat\"\n    elif a[i]==\"k\":\n        a[i]=\"knobbed\"\n    elif a[i]==\"s\":\n        a[i]=\"sunken\"\n\na=data['capsurface']\nfor i in range(0,len(a)):\n    if a[i]==\"f\":\n        a[i]=\"fibrous\"\n    elif a[i]==\"g\":\n        a[i]=\"grooves\"\n    elif a[i]==\"y\":\n        a[i]=\"scaly\"\n    elif a[i]==\"s\":\n        a[i]=\"smooth\"\n\na=data['capcolor']\nfor i in range(0,len(a)):\n    if a[i]==\"n\":\n        a[i]=\"brown\"\n    elif a[i]==\"b\":\n        a[i]=\"buff\"\n    elif a[i]==\"c\":\n        a[i]=\"cinnamon\"\n    elif a[i]==\"g\":\n        a[i]=\"gray\"\n    elif a[i]==\"r\":\n        a[i]=\"green\"\n    elif a[i]==\"p\":\n        a[i]=\"pink\"\n    elif a[i]==\"u\":\n        a[i]=\"purple\"\n    elif a[i]==\"e\":\n        a[i]=\"red\"\n    elif a[i]==\"w\":\n        a[i]=\"white\"\n    elif a[i]==\"y\":\n        a[i]=\"yellow\"\n\na=data['bruises']\nfor i in range(0,len(a)):\n    if a[i]==\"t\":\n        a[i]=\"yes\"\n    elif a[i]==\"f\":\n        a[i]=\"no\"\n\na=data['odor']\nfor i in range(0,len(a)):\n    if a[i]==\"a\":\n        a[i]=\"almond\"\n    elif a[i]==\"l\":\n        a[i]=\"anise\"\n    elif a[i]==\"c\":\n        a[i]=\"creosote\"\n    elif a[i]==\"y\":\n        a[i]=\"fishy\"\n    elif a[i]==\"f\":\n        a[i]=\"foul\"\n    elif a[i]==\"m\":\n        a[i]=\"musty\"\n    elif a[i]==\"n\":\n        a[i]=\"none\"\n    elif a[i]==\"p\":\n        a[i]=\"pungent\"\n    elif a[i]==\"s\":\n        a[i]=\"spicy\"\n\na=data['gillattachment']\nfor i in range(0,len(a)):\n    if a[i]==\"a\":\n        a[i]=\"attachment\"\n    elif a[i]==\"d\":\n        a[i]=\"descending\"\n    elif a[i]==\"f\":\n        a[i]=\"free\"\n    elif a[i]==\"n\":\n        a[i]=\"notched\"\n\na=data['gillspacing']\nfor i in range(0,len(a)):\n    if a[i]==\"c\":\n        a[i]=\"close\"\n    elif a[i]==\"w\":\n        a[i]=\"crowded\"\n    elif a[i]==\"d\":\n        a[i]=\"distant\"\n\na=data['gillsize']\nfor i in range(0,len(a)):\n    if a[i]==\"b\":\n        a[i]=\"broad\"\n    elif a[i]==\"n\":\n        a[i]=\"narrow\"\n\na=data['gillcolor']\nfor i in range(0,len(a)):\n    if a[i]==\"k\":\n        a[i]=\"black\"\n    elif a[i]==\"n\":\n        a[i]=\"brown\"\n    elif a[i]==\"b\":\n        a[i]=\"buff\"\n    elif a[i]==\"h\":\n        a[i]=\"chocolate\"\n    elif a[i]==\"g\":\n        a[i]=\"gray\"\n    elif a[i]==\"r\":\n        a[i]=\"green\"\n    elif a[i]==\"o\":\n        a[i]=\"orange\"    \n    elif a[i]==\"p\":\n        a[i]=\"pink\"\n    elif a[i]==\"u\":\n        a[i]=\"purple\"\n    elif a[i]==\"e\":\n        a[i]=\"red\"\n    elif a[i]==\"w\":\n        a[i]=\"white\"\n    elif a[i]==\"y\":\n        a[i]=\"yellow\"\n    \na=data['gillsize']\nfor i in range(0,len(a)):\n    if a[i]==\"b\":\n        a[i]=\"broad\"\n    elif a[i]==\"n\":\n        a[i]=\"narrow\"\n\na=data['stalkshape']\nfor i in range(0,len(a)):\n    if a[i]==\"e\":\n        a[i]=\"enlarging\"\n    elif a[i]==\"t\":\n        a[i]=\"taping\"\n\na=data['stalkroot']\nfor i in range(0,len(a)):\n    if a[i]==\"b\":\n        a[i]=\"bulbous\"\n    elif a[i]==\"c\":\n        a[i]=\"club\"\n    elif a[i]==\"u\":\n        a[i]=\"cup\"\n    elif a[i]==\"e\":\n        a[i]=\"equal\"\n    elif a[i]==\"z\":\n        a[i]=\"rhizomorphs\"\n    elif a[i]==\"r\":\n        a[i]=\"rooted\"\n    elif a[i]==\"?\":\n        a[i]=\"missing\"    \n    \na=data['stalksurfaceabovering']\nfor i in range(0,len(a)):\n    if a[i]==\"f\":\n        a[i]=\"fibrous\"\n    elif a[i]==\"y\":\n        a[i]=\"scaly\"\n    elif a[i]==\"k\":\n        a[i]=\"silky\"\n    elif a[i]==\"s\":\n        a[i]=\"smooth\"\n    \na=data['stalksurfacebelowring']\nfor i in range(0,len(a)):\n    if a[i]==\"f\":\n        a[i]=\"fibrous\"\n    elif a[i]==\"y\":\n        a[i]=\"scaly\"\n    elif a[i]==\"k\":\n        a[i]=\"silky\"\n    elif a[i]==\"s\":\n        a[i]=\"smooth\"\n\na=data['stalkcolorabovering']\nfor i in range(0,len(a)):\n    if a[i]==\"n\":\n        a[i]=\"brown\"\n    elif a[i]==\"b\":\n        a[i]=\"buff\"\n    elif a[i]==\"c\":\n        a[i]=\"cinnamon\"\n    elif a[i]==\"g\":\n        a[i]=\"gray\"\n    elif a[i]==\"o\":\n        a[i]=\"orange\"    \n    elif a[i]==\"p\":\n        a[i]=\"pink\"\n    elif a[i]==\"e\":\n        a[i]=\"red\"\n    elif a[i]==\"w\":\n        a[i]=\"white\"\n    elif a[i]==\"y\":\n        a[i]=\"yellow\"\n\na=data['stalkcolorbelowring']\nfor i in range(0,len(a)):\n    if a[i]==\"n\":\n        a[i]=\"brown\"\n    elif a[i]==\"b\":\n        a[i]=\"buff\"\n    elif a[i]==\"c\":\n        a[i]=\"cinnamon\"\n    elif a[i]==\"g\":\n        a[i]=\"gray\"\n    elif a[i]==\"o\":\n        a[i]=\"orange\"    \n    elif a[i]==\"p\":\n        a[i]=\"pink\"\n    elif a[i]==\"e\":\n        a[i]=\"red\"\n    elif a[i]==\"w\":\n        a[i]=\"white\"\n    elif a[i]==\"y\":\n        a[i]=\"yellow\"\n\na=data['veiltype']\nfor i in range(0,len(a)):\n    if a[i]==\"p\":\n        a[i]=\"partial\"\n    elif a[i]==\"u\":\n        a[i]=\"genel\"\n\na=data['veilcolor']\nfor i in range(0,len(a)):\n    if a[i]==\"n\":\n        a[i]=\"brown\"\n    elif a[i]==\"o\":\n        a[i]=\"orange\"    \n    elif a[i]==\"w\":\n        a[i]=\"white\"\n    elif a[i]==\"y\":\n        a[i]=\"yellow\"\n\na=data['ringnumber']\nfor i in range(0,len(a)):\n    if a[i]==\"n\":\n        a[i]=\"none\"\n    elif a[i]==\"o\":\n        a[i]=\"one\"\n    elif a[i]==\"t\":\n        a[i]=\"two\"\n\na=data['ringtype']\nfor i in range(0,len(a)):\n    if a[i]==\"c\":\n        a[i]=\"cobwebby\"\n    elif a[i]==\"e\":\n        a[i]=\"evanescent\"\n    elif a[i]==\"f\":\n        a[i]=\"flaring\"\n    elif a[i]==\"l\":\n        a[i]=\"large\"\n    elif a[i]==\"n\":\n        a[i]=\"none\"    \n    elif a[i]==\"p\":\n        a[i]=\"pendant\"\n    elif a[i]==\"s\":\n        a[i]=\"sheathing\"\n    elif a[i]==\"z\":\n        a[i]=\"zone\"\n\na=data['sporeprintcolor']\nfor i in range(0,len(a)):\n    if a[i]==\"k\":\n        a[i]=\"black\"\n    elif a[i]==\"n\":\n        a[i]=\"brown\"\n    elif a[i]==\"b\":\n        a[i]=\"buff\"\n    elif a[i]==\"h\":\n        a[i]=\"chocolate\"\n    elif a[i]==\"r\":\n        a[i]=\"green\"\n    elif a[i]==\"o\":\n        a[i]=\"orange\"    \n    elif a[i]==\"u\":\n        a[i]=\"purple\"\n    elif a[i]==\"w\":\n        a[i]=\"white\"\n    elif a[i]==\"y\":\n        a[i]=\"yellow\"\n\na=data['population']\nfor i in range(0,len(a)):\n    if a[i]==\"a\":\n        a[i]=\"abundant\"\n    elif a[i]==\"c\":\n        a[i]=\"clustered\"\n    elif a[i]==\"n\":\n        a[i]=\"numerous\"\n    elif a[i]==\"s\":\n        a[i]=\"scattered\"\n    elif a[i]==\"v\":\n        a[i]=\"several\"    \n    elif a[i]==\"y\":\n        a[i]=\"solitary\"\n\na=data['habitat']\nfor i in range(0,len(a)):\n    if a[i]==\"g\":\n        a[i]=\"grasses\"\n    elif a[i]==\"l\":\n        a[i]=\"leaves\"\n    elif a[i]==\"m\":\n        a[i]=\"meadows\"\n    elif a[i]==\"p\":\n        a[i]=\"paths\"\n    elif a[i]==\"u\":\n        a[i]=\"urban\"    \n    elif a[i]==\"w\":\n        a[i]=\"waste\"\n    elif a[i]==\"d\":\n        a[i]=\"woods\"\n        \n#ahh... finally we have done it... \ndata.head(10)","eba01d08":"#seperating classes\nedata=data.loc[data['class']=='edible']\npdata=data.loc[data['class']=='poisonous']\nedata.head()\n#we will use them later\n#edata['capsurface'].value_counts(normalize=True)*100","d2bcf528":"columns=data.columns\nedatas={}\npdatas={}\nfor i in columns:\n    a=edata[i].value_counts().T\n    b=pdata[i].value_counts().T\n    edatas[i]=a\n    pdatas[i]=b","f43ec46d":"types=data['capsurface'].unique()\nedible=edatas[\"capsurface\"]\nedible['grooves']=0.0\nedible=edible.astype(int)\npoisonous=pdatas[\"capsurface\"]\npoisonous=poisonous.astype(int)\ndf=pd.DataFrame({'Edible':edible,'Poisonous':poisonous},index=types)\ndf.fillna(0)","d434f679":"edible2=pd.Series.to_frame(edible)\nedible2['class']='edible'\nedible2=edible2.T\n\npoisonous2=pd.Series.to_frame(poisonous)\npoisonous2['class']='poisonous'\npoisonous2=poisonous2.T\n\ndf2=pd.concat([edible2, poisonous2], axis=1 , sort=True)\ndf2=df2.T\ndf2=df2.reset_index(inplace=False)\ndf2_ren2={'index':'capsurface','capsurface':'count'}\ndf2=df2.rename(columns=df2_ren2)\ndf2","1a917c7b":"with sns.axes_style(\"whitegrid\", {'axes.grid' : True}):\n    fig, ax = plt.subplots(1,1, figsize=(14,6))\ng=sns.barplot(x = 'capsurface', y = 'count', hue = 'class', data=df2,palette=\"winter\")\nax.legend()\nfor p in ax.patches:\n    ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+1))\nplt.show()","8c62a74e":"def listele(dframe,list1,list2):\n    columns=dframe.columns\n    for i in columns:\n        a=dframe[i]\n        nc = Counter(a)         \n        ecr = nc.most_common(1)\n        count=len(a)\n        attrname=ecr[0][0]\n        rate=(ecr[0][1])\/count*100\n        list1.append(attrname)\n        list2.append(round(rate,2))","1838f186":"prates=[]\npnames=[]\nerates=[]\nenames=[]\n#eratesall=pd.Series.to_frame(edata['capsurface'].value_counts(normalize=True)*100)\n#pratesall=pdata['capsurface'].value_counts(normalize=True)*100\n#type(eratesall)\nlistele(pdata,pnames, prates)\nlistele(edata,enames, erates)","f0e0e493":"columns=data.columns\nnames=enames+pnames\nf,ax = plt.subplots(figsize = (12,16))\nsns.barplot(x=erates,y=columns,color='lime',alpha = 0.8,label='Edible')\nsns.barplot(x=prates,y=columns,color='green',alpha = 0.4,label='Poisonous')\n#for p in ax.patches:\n    #ax.annotate('{}'.format(p.get_width()), (p.get_y()+0.1, p.get_height()+1))\nsayac=0\nitere=0\nfor p in ax.patches:\n    width=p.get_width()\n    #print(p.get_width())\n    if sayac%2==0:\n        a=5\n        clr = 'black'\n    else:\n        a=25\n        clr = 'blue'\n    k=names[itere].capitalize()\n    plt.text(a, p.get_y()+0.55*p.get_height(),'{}:{:1.2f}'.format(k,width),color='black', va='center')\n    itere=itere+1\n    sayac=sayac+1\nax.legend(loc='lower right',frameon = True)     # legendlarin gorunurlugu\nax.set(xlabel='Rates', ylabel='Columns',title = \"Most frequently encountered attributes\")\nplt.show()","a5180119":"def convert_df(ep):\n    result= pd.DataFrame()\n    for i in data.columns:\n        dafr=pd.Series.to_frame(ep[i].value_counts(normalize=True)*100)\n        dafr.reset_index(inplace=True)\n        dafr.rename(index=str,columns={\"index\": i + \" name\",i:i+\" value\"},inplace=True)\n        result=pd.concat([result,dafr],axis=1, sort=False)\n    result.reset_index(inplace=True)\n    result.rename(index=str,columns={\"index\": \"name\"},inplace=True)\n    result.index = np.arange(1, len(result)+1)\n    result=result.drop(['name','class name','class value'], axis=1)\n    return result\ndatae=convert_df(edata).head(1)\ndatap=convert_df(pdata).head(1)","d0bffd8a":"datae","e9855939":"datap","aa56e927":"datae=convert_df(edata).head(1)\ndatae=datae.drop(['capshape name','capshape value','capcolor name','capcolor value', 'gillattachment name', 'gillattachment value','gillspacing name','gillspacing value','stalkshape name','stalkshape value','stalkroot name','stalkroot value','stalkcolorabovering name','stalkcolorabovering value','stalkcolorabovering name','stalkcolorabovering value','stalkcolorbelowring name','stalkcolorbelowring value','veiltype name','veiltype value','veilcolor name','veilcolor value','ringnumber name','ringnumber value','habitat name','habitat value'], axis=1)\ndatap=convert_df(pdata).head(1)\ndatap=datap.drop(['capshape name','capshape value','capcolor name','capcolor value', 'gillattachment name', 'gillattachment value','gillspacing name','gillspacing value','stalkshape name','stalkshape value','stalkroot name','stalkroot value','stalkcolorabovering name','stalkcolorabovering value','stalkcolorabovering name','stalkcolorabovering value','stalkcolorbelowring name','stalkcolorbelowring value','veiltype name','veiltype value','veilcolor name','veilcolor value','ringnumber name','ringnumber value','habitat name','habitat value'], axis=1)\n\nliste=[]\neliste=[]\npliste=[]\nfor i in datae.columns:\n    if i.endswith('name'):\n        gec=i.replace(\" name\",\"\")\n        liste.append(gec)\n        eliste.append(np.ndarray.tolist(datae[i].values)[0])\n        pliste.append(np.ndarray.tolist(datap[i].values)[0])\n        datae=datae.drop(i,axis=1)\n        datap=datap.drop(i,axis=1)\nepliste=list(np.ndarray.tolist(datae.values)[0])+list(np.ndarray.tolist(datap.values)[0])\ndatae2=np.ndarray.tolist(datae.values[0])\ndatap2=np.ndarray.tolist(datap.values[0])\nep2liste=eliste+pliste\ndataep=list(datae2)+list(datap2)","46054928":"f,ax = plt.subplots(figsize =(16,8))\nsns.pointplot(x=liste, y=datae2, color='cyan', alpha=0.8)\nsns.pointplot(x=liste, y=datap2, color='orange', alpha=0.8)\nsayac=0\nofs=0\nfor c in ax.collections:\n    for of in c.get_offsets():\n        if of[0]==0:\n            ofs=ofs+1\n        if ofs==2 and of[0]>=0:\n            renk='blue'\n        else:\n            renk='black'\n        yazi=str(ep2liste[sayac])+\": \\n %\"+str(round(dataep[sayac],2))\n        ax.annotate(yazi,of,of,color=renk,fontsize = 13)\n        sayac=sayac+1\nplt.xlabel('Attribute Names',fontsize = 15,color='blue')\nplt.xticks(rotation=45)\nplt.ylabel('Values',fontsize = 15,color='blue')\nplt.title('Comparison',fontsize = 20,color='blue')\nplt.grid()\nplt.show()","9b2f1edf":"labels = data.gillcolor.value_counts().index\ncolors = ['orange','lime','blue','yellow','brown','green','gray','cyan','red','magenta','purple','pink']\nexplode = [0,0,0,0,0,0,0,0,0,0,0,0]\nsizes=data.gillcolor.value_counts().values\n\nplt.figure(figsize = (10,10))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%',textprops={'fontsize': 12})\nplt.title('Mushrooms Chart by Gill Color',color = 'blue',fontsize = 15)","e86f8ee9":"dataf=convert_df(data)\ndataf=dataf.drop(\"veiltype name\",axis=1)\ndataf=dataf.drop(\"veiltype value\", axis=1)\ndataf\n\nedataf=convert_df(edata)\nedataf=edataf.drop(\"veiltype name\",axis=1)\nedataf=edataf.drop(\"veiltype value\", axis=1)\nedataf\n\npdataf=convert_df(pdata)\npdataf=pdataf.drop(\"veiltype name\",axis=1)\npdataf=pdataf.drop(\"veiltype value\", axis=1)\npdataf","f2302d44":"g = (sns.jointplot(\"sporeprintcolor value\", \"habitat value\", height=6, data=edataf, ratio=6, kind=\"kde\",space=0, color=\"g\")).set_axis_labels(\"Spore Color\", \"Population\")\nplt.show()","f18fc78b":"sns.lmplot(x=\"gillcolor value\", y=\"capcolor value\", data=dataf)\nplt.show()","e0601af8":"datach=pd.concat([dataf['gillcolor value'], dataf['capcolor value'],dataf['habitat value'],dataf['odor value']], axis=1).head(10)\ndatach","1a856b4f":"sns.kdeplot(datach['gillcolor value'], datach['capcolor value'], shade=True, cut=3)\nplt.show()","638436ce":"flatui = [\"#9b59b6\", \"#3498db\", \"#95a5a6\", \"#e74c3c\", \"#34495e\", \"#2ecc71\"]\nsns.violinplot(data=datach, palette=flatui, inner=\"points\")\nplt.show()","700c13f4":"#dataf.corr()\nif 'bruises name' in dataf.columns:\n    dataf=dataf.drop(['bruises name', 'bruises value','gillattachment name', 'gillattachment value','gillsize name', 'gillsize value', 'gillspacing name', 'gillspacing value','stalkshape name', 'stalkshape value'], axis=1)\ndataf.fillna(0)\nf,ax = plt.subplots(figsize=(15, 15))\nsns.heatmap(dataf.corr(), annot=True, linewidths=1,linecolor=\"cyan\", fmt= '.2f',ax=ax)\nplt.show()","9f5f184a":"data.head()","3d200535":"a=data['capcolor']\nfor i in range(0,len(a)):\n    if a[i]==\"brown\":\n        a[i]=\"21\"\n    elif a[i]==\"buff\":\n        a[i]=\"22\"\n    elif a[i]==\"cinnamon\":\n        a[i]=\"23\"\n    elif a[i]==\"gray\":\n        a[i]=\"24\"\n    elif a[i]==\"green\":\n        a[i]=\"25\"\n    elif a[i]==\"pink\":\n        a[i]=\"26\"\n    elif a[i]==\"purple\":\n        a[i]=\"27\"\n    elif a[i]==\"red\":\n        a[i]=\"28\"\n    elif a[i]==\"white\":\n        a[i]=\"29\"\n    elif a[i]==\"yellow\":\n        a[i]=\"30\"\na=a.astype(int)","6c1f5bc8":"dfbox=pd.concat([data['bruises'],a,data['stalkshape'],data['ringnumber']],axis=1)\ndfbox.head()","91f83610":"sns.boxplot(x=\"ringnumber\", y=\"capcolor\", hue=\"bruises\", data=dfbox, palette=\"BuGn\")\nplt.show()","479ca667":"dfbox2=pd.concat([dfbox.tail(800),dfbox.head(800)],axis=0)\nsns.swarmplot(x=\"ringnumber\", y=\"capcolor\", hue=\"bruises\", data=dfbox2)\nplt.show()","57d77d10":"datapair=pd.concat([dataf['population value'], dataf['habitat value']], axis=1).head(7).fillna(0)\ndatapair","6a643f9d":"sns.pairplot(datapair)\nplt.show()","97f0fb1a":"sns.countplot(data.stalkcolorabovering,palette=\"Paired\")\n#sns.countplot(kill.manner_of_death)\nplt.title(\"stalkcolorabovering\",color = 'blue',fontsize=15)","b4344c48":"**Making dataset more readable**","50181ed4":"## Cleaning some punctuations and white spaces","c7fed6e5":"I wrote a function for make new dataframe from percentages of the **most common attributes** for both edible and poisonous.","b62fc6f9":"In this graph, we can see the most distinguishing attributes which .","a676430f":"***Value counts***","5c5cffcd":"*I dont have numeric data in my dataset. Bu i wanted to see following two graphic types on my kernel.*\n\nSo i turned colors into numbers and made a \"fake\" numeric data...","64aa0c69":"I wrote a function for listing percentage of most frequent mushroom attributes edata and pdata","318f067c":"We can see some of columns are unavailable to seperate with exact borders when we take a look to these data tables. \n\n(i.e. capshape convex(e:46.2%, p:43.6%), capcolor brown(e:30.0%,p:26.0%) gill attachment free(e:95.4%,p:99.5%) etc)","acc606ea":"This table shows us which attributes correlated."}}