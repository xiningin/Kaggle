{"cell_type":{"dfc3c259":"code","ab6855d2":"code","4a5edac7":"code","0a2c3d5e":"code","4f526052":"code","f12b349f":"markdown","66409005":"markdown","8b68e5a4":"markdown","88fbb684":"markdown","b29b44df":"markdown","72ec6575":"markdown"},"source":{"dfc3c259":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pylab as pl\n\nfrom scipy.optimize import curve_fit","ab6855d2":"# csv read\ndf1 = pd.read_csv(\"\/kaggle\/input\/west-african-ebola-virus-epidemic-timeline\/cases_and_deaths.csv\", delimiter=',')\ndf1.dataframeName = 'cases_and_deaths.csv'\n\n# df -> list\nx_values = df1['Days'].values.tolist() \ny_values = df1['Case'].values.tolist()","4a5edac7":"# fitting functions\ndef f(t, K, P0, r):\n    return  (K \/ (1 + ((K-P0)\/P0)*np.exp(-r*t)))\n\n# fitting\npopt, pcov = curve_fit(f, x_values, y_values, p0=[1, 1, 0.5], maxfev=300000)\nprint(f\"Fitting parameters\")\nprint(f\"K: {popt[0]}, P0: {popt[1]}, r: {popt[2]}\")","0a2c3d5e":"# init main graph\nfig = pl.figure(figsize=(16, 9))\nax = pl.axes()\n\n# main graph captions\npl.suptitle(\"2014 Ebola epidemic in West Africa \", fontweight=\"bold\")\npl.ylabel('Cases')\npl.xlabel('Days')\n\n# main fitting plot\nxx = np.linspace(0, x_values[-1], 100)\nyy = f(xx, popt[0], popt[1], popt[2])\npl.xlim(x_values[0], x_values[-1])\npl.ylim(y_values[0], y_values[-1])\n\npl.plot(x_values, y_values,'o', label='Cases')\npl.plot(xx, yy, label=\"Logistic Function\")\npl.legend(loc='lower right')\n\n# Any results you write to the current directory are saved as output.\npl.savefig(\"graph.png\")","4f526052":"# init main graph\nfig = pl.figure(figsize=(16, 9))\nax = pl.axes()\n\n# main graph captions\npl.suptitle(\"2014 Ebola epidemic in West Africa (log scale)\", fontweight=\"bold\")\npl.ylabel('Cases')\npl.xlabel('Days')\n\npl.yscale('Log')\npl.locator_params(axis='x',tight=True, nbins=5)\npl.plot(x_values, y_values,'o', label='Cases')\npl.plot(xx, yy, label=\"Logistic Function\")\npl.legend(loc='lower right')\n\n# Any results you write to the current directory are saved as output.\npl.savefig(\"graph_log.png\")","f12b349f":"# Fitting","66409005":"# Introduction\n\nThis notebook uses scipy's optimize.curve_fit function to perform curve fitting.\n\nLogistic function (Population function):\n$$ P(t) = \\frac{K}{1 + \\left(\\frac{K-P_0}{P_0}\\right) \\exp{(-rt)}} $$\nis the solution of the Verhulst equation:\n$$ \\frac{\\mathrm{d} P(t)}{\\mathrm{d} t} = r P(t) \\cdot \\left( 1 - \\frac{P(t)}{K} \\right), $$\nwhere \\\\( P_0 \\\\) is the initial population, the constant \\\\( r \\\\) defines the growth rate and \\\\( K \\\\) is the carrying capacity.\nYou can see that there are some differences.","8b68e5a4":"# Plot(log scale)","88fbb684":"# import package","b29b44df":"# Plot","72ec6575":"# Prepare data"}}