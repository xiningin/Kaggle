{"cell_type":{"cc80f0fc":"code","01517d5e":"code","2eacbd5e":"code","b5be9290":"code","610f066f":"code","292e0a50":"code","236b7d00":"code","e22ecd69":"code","ebd01c4d":"code","743db71f":"code","855e906e":"code","01842338":"code","de5f9b71":"code","afa5bc71":"code","76508bc0":"code","06ea10bf":"code","0d5aaeb1":"code","97a0089a":"code","493c2931":"code","70ff7f5e":"code","b2764b18":"code","48d081ad":"code","c5e0f20a":"markdown","4918c886":"markdown","d5331915":"markdown","1a3a63db":"markdown","88e633b3":"markdown","da735dd7":"markdown","e8adc07e":"markdown","14b05c5a":"markdown","33b130ec":"markdown","1eeade5f":"markdown","620affc9":"markdown"},"source":{"cc80f0fc":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os","01517d5e":"from keras import layers\nfrom keras import models\nfrom keras.utils import to_categorical","2eacbd5e":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b5be9290":"train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","610f066f":"train.shape, train.columns","292e0a50":"train_labels = train['label'].to_numpy()\ntrain_images = train.iloc[:, train.columns!='label'].to_numpy()","236b7d00":"test_images = test.to_numpy()","e22ecd69":"train_images.shape, test_images.shape","ebd01c4d":"# first dimension -> number of samples, in this case, 42000 in the training set, and 28000 in the test set\n# second dimension -> number of pixels in the x-axis of the image, in this case, 28 pixel\n# third dimension -> number of pixels in the y-axis of the image, in this case, 28 pixel\n# fourth dimention -> number of channels in the image, in this case, 1 channel\ntrain_images = train_images.reshape((42000, 28, 28, 1))\ntest_images = test_images.reshape((28000, 28, 28, 1))","743db71f":"plt.imshow(train_images[69])\nplt.show(), train_labels[69]","855e906e":"train_images = train_images.astype('float32')\/255\ntest_images = test_images.astype('float32')\/255","01842338":"train_labels = to_categorical(train_labels)","de5f9b71":"train_labels[0]","afa5bc71":"model = models.Sequential()\n\nmodel.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(64, activation='relu'))\nmodel.add(layers.Dense(10, activation='softmax'))\n\nmodel.summary()","76508bc0":"model.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\nmodel.fit(train_images, train_labels,\n          epochs=5,\n          batch_size=64,\n          validation_split=0.2)","06ea10bf":"predictions = model.predict(test_images)","0d5aaeb1":"np.argmax(predictions[0])","97a0089a":"predictions[0]","493c2931":"predictions = np.argmax(predictions, axis=1)","70ff7f5e":"predictions.shape","b2764b18":"image_id = [i for i in range(1, 28001)]\nimage_id = pd.DataFrame(image_id, columns=['ImageId'])","48d081ad":"submission = pd.DataFrame(predictions, columns=['Label'])\nsubmission['ImageId'] = image_id['ImageId']\nsubmission.set_index('ImageId', inplace=True)\n\nsubmission.to_csv('submission.csv')\nsubmission.head()","c5e0f20a":"## Splitting the labels and features","4918c886":"## Reading the data","d5331915":"From the 785 columns, the first column *('label')* is the class *(i.e. digit the corresponding row represents)*, and the rest 784 columns represent pixel value for the 28x28 pixels *(we know this from the MNIST digit dataset)*.","1a3a63db":"# Imports","88e633b3":"The images are flattened into 1D array. But we need to convert them into 2D array, since we will use **2D Convolution** and **2D Max Pooling**.","da735dd7":"## Prediction","e8adc07e":"## Reshape the data","14b05c5a":"# Model","33b130ec":"## Normalizing the data","1eeade5f":"# Submission","620affc9":"# Data"}}