{"cell_type":{"cc9339c5":"code","e5862a16":"code","8822663c":"code","5a917361":"code","a1c32470":"code","db6d58aa":"code","004ba78a":"code","a44bbea4":"code","baff0486":"code","590531db":"code","f49751b1":"code","a3bf17fa":"code","07e2b839":"code","34b677d8":"code","f10add07":"markdown","de16ee28":"markdown","4c9f8fe1":"markdown","c84b9a76":"markdown"},"source":{"cc9339c5":"import pandas as pd\n\ndf = pd.read_json('..\/input\/contact-shopee-league\/contacts.json')","e5862a16":"df.head()","8822663c":"df_main = df.copy()","5a917361":"df = df[['Email', 'Phone', 'OrderId']]","a1c32470":"import numpy as np\n\ndf.replace('', np.nan, inplace=True)\ndf = df.where(pd.notnull(df), None)\ndf = df.to_numpy()","db6d58aa":"submission = pd.DataFrame(columns=['ticket_id', 'ticket_trace\/contact'])","004ba78a":"submission","a44bbea4":"def retrieve_everything(indx):\n    if df[indx][0]:\n        email = df[indx][0]\n    else:\n        email = None\n\n    if df[indx][1]: \n        phone = df[indx][1]\n    else:\n        phone = None\n\n    if df[indx][2]: \n        orderid = df[indx][2]\n    else:\n        orderid = None\n\n    return email,phone,orderid","baff0486":"index = 0\n\nwhile index < len(df):\n    \n    ## if the index exist in our submission.csv, we skip\n    if index in submission['ticket_id'].values:\n        print(f'Skipped {index}')\n        index += 1\n\n        continue\n\n    print(f'Processing {index}')\n\n    dic = {}\n    \n    # retrieving the info for our current index\n    email, phone, orderid  = retrieve_everything(index)\n    \n    # adding the info as key into our dictionary\n    if email: dic[email] = 1\n    if phone: dic[phone] = 1\n    if orderid: dic[orderid] = 1\n\n    dictionary_length = len(dic)\n    prev_length = 0\n\n    while dictionary_length > prev_length:\n        prev_length = dictionary_length\n        \n        # here we grab those df which contain values == to our dictionary.keys\n        ls = df_main[df_main.isin(list(dic.keys()))].dropna(how='all').index.tolist()\n        \n        # and for each of those info, we stuff it into our dictionary\n        # duplicates should solve themselve up \n        for i in ls:\n            email, phone, orderid = retrieve_everything(i)\n\n            if email: dic[email] = 1\n            if phone: dic[phone] = 1\n            if orderid: dic[orderid] = 1\n        \n        dictionary_length = len(dic)\n    \n    ## once the dictionary length == previous length, we know there's no new df info, thus we proceed\n    \n    total_contacts = 0\n    \n    ## add up total contacts and generate ticket-trace code \n    for i in ls:\n        total_contacts += df_main['Contacts'][i]\n\n    final_str = '-'.join(str(i) for i in ls)\n\n    for i in ls:\n        submission.at[i, 'ticket_id'] = i\n        submission.at[i, 'ticket_trace\/contact'] = f'{final_str}, {total_contacts}'\n    \n    ## proceed to next lead\n    index += 1  ","590531db":"submission.sort_index(inplace=True)","f49751b1":"final_submission = submission.copy()","a3bf17fa":"final_submission.set_index('ticket_id', inplace=True)","07e2b839":"final_submission","34b677d8":"## for submission\nfinal_submission.to_csv('submission.csv')","f10add07":"Making our Submission.csv with two columns","de16ee28":"Replacing all empty value with NaN","4c9f8fe1":"We will be cutting the DF down to 3 columns as we only need this details to find the overall user","c84b9a76":"However, with 500K leads in the JSON file, this method is still slower than expected. Improvement appreciated."}}