{"cell_type":{"755d9287":"code","86ad0481":"code","17e45f21":"code","ca748e58":"code","c7c37cdf":"code","4624a80a":"code","c3f545e4":"code","8191ef9c":"code","6431217d":"code","be5333db":"code","67027ea4":"code","7c73a32d":"code","d0c4687c":"code","b9b91f3a":"code","3cb0f261":"code","e78ebfbb":"code","5ed72d89":"code","c5e208be":"code","1ee257f4":"code","d74a68f0":"code","9d5baaff":"markdown","cd8dabe6":"markdown","c1711e5c":"markdown","e84d534f":"markdown","bdde8bc6":"markdown","a1cf3e6b":"markdown","cb56b3b6":"markdown","ed2ba1a1":"markdown","5d107581":"markdown"},"source":{"755d9287":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Import Semua Data\ndf_food = pd.read_csv('..\/input\/covid19-healthy-diet-dataset\/Food_Supply_Quantity_kg_Data.csv')\ndf_protein = pd.read_csv('..\/input\/covid19-healthy-diet-dataset\/Protein_Supply_Quantity_Data.csv')\ndf_fat = pd.read_csv('..\/input\/covid19-healthy-diet-dataset\/Fat_Supply_Quantity_Data.csv')\ndf_category = pd.read_csv('..\/input\/covid19-healthy-diet-dataset\/Supply_Food_Data_Descriptions.csv')","86ad0481":"df_food.head()","17e45f21":"df_protein.head()","ca748e58":"df_fat.head()","c7c37cdf":"df_category.head()","4624a80a":"# menempatkan semua data kedalam all_columns\nall_columns = df_food.columns.tolist()\nprint(f'All Columns : {all_columns} \\n\\n')\n\n# menempatkan data yang merupakan kategori food dalam supply_columns\nsupply_columns = df_category['Categories'].tolist()\nprint(f'Supply Columns : {supply_columns} \\n\\n')\n\n# menempatkan data yang merupakan kategori non food dalam non_supply_columns\nnon_supply_columns = [i for i in all_columns if i not in supply_columns]\nprint(f'Non-Supply Columns : {non_supply_columns}')","c3f545e4":"# menyimpan data yang merupakan non supply\ndf_non_supply_new = df_food[non_supply_columns]\n# menyimpan data food yang merupakan supply dan ditambahkan kolom country \ndf_food_new = df_food[['Country']+supply_columns]\n# menyimpan data protein yang merupakan supply dan ditambahkan kolom country\ndf_protein_new = df_protein[['Country']+supply_columns]\n# menyimpan data fat yang merupakan supply dan ditambahkan kolom country\ndf_fat_new = df_fat[['Country']+supply_columns]","8191ef9c":"# Menggabungkan dataset yang sudah disimpan dengan variabel di atas dan menambahkan suffix berbeda untuk setiap supply dataset menggunakan pd.merge\ndf1=pd.merge(df_food_new, df_protein_new, on=\"Country\", suffixes=('_food', '_protein'), how = 'outer')\n# Menambahkan _fat \ndf_fat_new_cols = [i + '_fat' if i != 'Country' else i for i in df_fat_new.columns]\ndf_fat_new.columns = df_fat_new_cols\n\ndf2=pd.merge(df_fat_new, df_non_supply_new, how='outer', on='Country')\ndf3=pd.merge(df1, df2, how='left', on='Country')\ndf3.columns.tolist()","6431217d":"df3","be5333db":"# Urutkan (sorting) dan print hasil sorting\ndf_sort = df3.sort_values(by=['Obesity'], ascending=False, ignore_index=True)\ndf_sort","67027ea4":"# code untuk mendapatkan nilai proporsi obesitas di Indonesia\nobesitas_persen = list(df_sort['Obesity'][df_sort['Country']=='Indonesia'])[0]\nobesitas = list(df_sort['Obesity'][df_sort['Country']=='Indonesia']*df_sort['Population'][df_sort['Country']=='Indonesia']*0.01)[0]\n\nprint(f'Jumlah yang mengidap obesitas di Indonesia ada {round(obesitas_persen, 10)}% dari jumlah populasi.') # 10 digit\nprint(f'Jumlah yang mengidap obesitas di Indonesia ada {round(obesitas)} orang.')","7c73a32d":"# code untuk mendapatkan urutan indoensia mengenai proposi obesitas dari terbesar\nindo = list(df_sort[df_sort['Country']== 'Indonesia'].index+1)[0]\n\nprint('Indonesia urutan : {}'.format(indo))","d0c4687c":"# Melakukan binning pada kolom terkonfirmasi untuk DataFrame df_fat\nlabels = ['Sangat Tidak Banyak', 'Tidak Banyak', 'Sedang', 'Cukup Banyak', 'Sangat Banyak']\n\ndf_fat['Confirmed Category'] = pd.qcut((df_fat['Confirmed']), 5, labels=labels)","b9b91f3a":"# Melakukan grouping pada kolom hasil binning ('Confirmed Category'), kemudian aggregate menggunakan fungsi mean\ncols = ['Obesity', 'Meat', 'Fruits - Excluding Wine', 'Fish, Seafood', 'Animal Products', 'Vegetal Products']\n\ngroupby_confirmed = df_fat.groupby('Confirmed Category')[cols].mean()\ngroupby_confirmed","3cb0f261":"# Menyimpan DataFrame hasil binning, grouping, dan aggregating dalam bentuk csv\ngroupby_confirmed.to_csv('groupby_confirmed.csv')","e78ebfbb":"# Gunakan DataFrame hasil grouping \ndf = groupby_confirmed\n\n# Lihat df \ndisplay(df)","5ed72d89":"# Normalisasi pada DataFrame df\ndf_norm = (df - df.min()) \/ (df.max() - df.min())\n\n# Lihat df_norm dan pastikan data telah ternormalisasi\ndisplay(df_norm)","c5e208be":"# Buat bar plot dari df_norm \nx = np.arange(len(df_norm.columns))\ny = df_norm.loc['Sangat Tidak Banyak']\ny1 = df_norm.loc['Tidak Banyak']\ny2 = df_norm.loc['Sedang']\ny3 = df_norm.loc['Cukup Banyak']\ny4 = df_norm.loc['Sangat Banyak']","1ee257f4":"fig, ax = plt.subplots(figsize=(14,10))\nwidth = 0.1\na1= ax.bar(x, y, width, label='Sangat Tidak Banyak')\na2= ax.bar(x+0.1, y1, width, label='Tidak Banyak')\na3= ax.bar(x+0.2, y2, width, label='Sedang')\na4= ax.bar(x+0.3, y3, width, label='Cukup Banyak')\na5= ax.bar(x+0.4, y4, width, label='Sangat Banyak')\n\n#menambahkan label\ndef autolabel(rects):\n    \"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"\n    for rect in rects:\n        height = rect.get_height()\n        plt.text(rect.get_x() + rect.get_width() \/ 2, height, str(round(height,2)),\n                    ha='center', va='bottom')\n        \nautolabel(a1)\nautolabel(a2)\nautolabel(a3)\nautolabel(a4)\nautolabel(a5)\n\nplt.xticks(x + 0.2, ('Obesity', 'Meat', 'Fruits - Excluding Wine', 'Fish, Seafood', 'Animal Products','Vegetal Products'))\nax.set_title('Perbandingan Konsumsi Makanan Berdasarkan Tingkat Kasus COVID 19')\nax.legend(bbox_to_anchor=(0.95,1.1))\nplt.show()","d74a68f0":"\nfig, ax = plt.subplots(figsize=(18, 12))\n\nV = df_food['Vegetal Products']\nC = df_food['Confirmed']\nA = df_food['Animal Products']\n# mengalikan kolom death agar dapat terlihat dalam visualisasi\nD = 200000*df_food['Deaths']\n\n# menggunakan kolom persentase kematian ('Death') sebagai ukuran pointnya, produk hewani ('Animal Products') sebagai warna point dengan cmap 'plasma'.\nmap = plt.scatter(V,C, c=A, cmap='plasma', sizes=D)\nsns.regplot(x=\"Vegetal Products\", y=\"Confirmed\", data=df_food, scatter=False, color='black');\n\n# axis labeling\nax.set_xlabel('Vegetal Products')\nax.set_ylabel('Confirmed')\nax.set_title('Healthy Food and Covid-19')\n\nfig.colorbar(map)\nplt.show()","9d5baaff":"**Memisahkan antara column tentang makanan yang di supply dan bukan makanan**\n\ndi akhir kita mempunyai data list berisi semua column tentang supply makanan dan non supply makanan atau column tentang covid-19 beserta populasi, cara kalian mendapatkannya bebas yang penting sesuai output.\nHasil Akhir Yang di harapkan :\n\n1. supply columns => columns berisi column tentang semua jenis supply makanan\n2. all columns => Semua columns\n3. non supply columns => column column tentang data covid-19 + obesitas + Undernourished + populasi\n\n","cd8dabe6":"Dataset-dataset berikut ini menunjukkan persentase lemak, protein, dan food yang dikonsumsi dari setiap jenis makanan yang terdaftar. Akhir dataset juga mencakup persentase obesitas dan kurang gizi, dan persentase kasus COVID-19 Terkonfirmasi\/Kematian\/Sembuh\/Aktif (Catatan: Semua data memiliki unit% kecuali Populasi, Unit % tersebut berdasarkan jumlah populasi).\nDataset yang saya gunakan dari https:\/\/www.kaggle.com\/mariaren\/covid19-healthy-diet-dataset\/notebooks","c1711e5c":"**Matplotlib Visualization: Bar plot**\n\nGunakan data grouping pada soal sebelumnya untuk melakukan visualisasi.\n\nNormalisasi data hasil grouping tersebut dengan rumus min-max normalisasi. Kemudian buatlah grouping Visualization dengan berplot, visualisasikan data column 'Obesity', 'Fruits - Excluding Wine', 'Fish, Seafood', 'Animal Products' dan 'Vegetal Products'.","e84d534f":"**Memeriksa 5 data teratas dari tiap dataset**","bdde8bc6":"**Binning Data, Grouping, dan Aggregating**\n\nBinning data Terkonfirmasi COVID-19 (column Confirmed) dari data food supply menjadi 5 bagian berdasarkan quartile. kalian dapat menggunakan fungsi qcut untuk melakukan bininng ini. Masukan data hasil binning tersebut menjadi column baru untuk data food supply. misalkan beri nama column tersebut dengan 'Confirmed Category'. Berikan label 'Sangat Tidak Banyak', 'Tidak Banyak', 'Sedang', 'Cukup Banyak', 'Sangat Banyak'. untuk masing-masing binning dari interval yang memiliki nilai terkecil sampai yang terbesar\n\nBaca dokumentasi berikut untuk fungsi qcut : https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.qcut.html\n\n1. Buat data baru yang berupa data grouping semua data berdasarkan column Hasil Bininng atau column 'Confirmed Category'.\n2. Grouping hanya column 'Obesity', 'Meat', 'Fruits - Excluding Wine', 'Fish, Seafood', 'Animal Products', 'Vegetal Products' saja.\n3. Kemudian Aggregate dengan fungsi mean.","a1cf3e6b":"**Import Library dan Dataset yang dibutuhkan menggunakan pandas dan menyimpannya kedalam variabel yang mudah diingat**","cb56b3b6":"**Menggabungkan DataFrame**\n\nDengan menggabungkan data yang merupakan kategori non food\/non supply dengan kategori supply dan data yang merupakan supply dari tiap df dibedakan dengan nama daf nya misalkan 'Meat_food', 'Meat_fat, dan 'Meat_protein'","ed2ba1a1":"**Sorting and Filtering**\n\nBuatlah sebuah data atau gunakan data gabungan dari data diatas, dimana data ini di sort dari yang terbesar ke yang terkecil berdasarkan column Obesitas.\n\nKemudian Lakukan Perintah Berikut :\n\n1. print data hasil sorting\n2. Berapa persen jumlah obesitas di Indonesia berdasarkan populasinya? kemudian tunjukan cara mendapatkannya!\n3. Urutan ke berapakah Indonesia mengenai proposi penduduk yang obesitas berdasarkan total populasinya dari yang terbesar? kemudian tunjukan cara mendapatkannya!","5d107581":"**Matplotlib Visualization: Scatter Plot**\n\nBuatlah visualisasi perbandingan scatter plot dimana kita akan membandingkan respon Jumlah Kasus Covid-19 yang terkonfirmasi berdasarkan Supply Sayuran. dimana:\n\nTandai proporsi kematian jumlah kematian (column Death) dengan ukuran dari data poin.\nTandai proporsi produk hewani (column Animal Product) dengan warna, berikan colormap 'gist_yarg'."}}