{"cell_type":{"8809606d":"code","2413202e":"code","37a3d05d":"code","737adde0":"code","223cebb0":"code","d9501817":"code","d7406ed5":"code","3aac8f82":"code","bd074048":"code","b8d72416":"code","c6297a7a":"code","634a0939":"code","851c7fd5":"code","08ba3087":"code","d6a93482":"code","344e1b7d":"code","64f95241":"code","ba198e38":"code","07721c3b":"code","69c916db":"code","3d72574f":"code","69010c6a":"code","ccb00127":"code","8e10c439":"code","0d534633":"code","50951892":"code","939a024d":"code","e4f45284":"code","50d5e820":"code","6b8fe7de":"code","a1149d03":"code","facfb71e":"code","63685b64":"markdown","cf523ad2":"markdown","9ebcccef":"markdown","17406d56":"markdown","b53530f7":"markdown","ef53012d":"markdown","f36a9f64":"markdown","65070d8e":"markdown","e793f8d4":"markdown","64edc5f2":"markdown","28198b77":"markdown","683d61a9":"markdown","c1e1682a":"markdown"},"source":{"8809606d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","2413202e":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","37a3d05d":"import warnings\nwarnings.filterwarnings(\"ignore\")","737adde0":"df = pd.read_csv(\"\/kaggle\/input\/fifa-20-complete-player-dataset\/fifa20_data.csv\",index_col=\"ID\")\ndf.head()","223cebb0":"df.describe(include='all')","d9501817":"from IPython.core.display import HTML\n\n# convert your links to html tags \ndef path_to_image_html(path):\n    return '<img src=\"'+ path + '\" width=\"60\" >'","d7406ed5":"pd.set_option('display.max_colwidth', -1)\ndf_1=df.head()\nHTML(df_1.to_html(escape=False ,formatters=dict(Image=path_to_image_html)))","3aac8f82":"df_strongest=df[[\"Name\",\"Image\",\"Age\",\"Overall\",\"Value\",\"Club\",\"Country\"]][df[\"Overall\"]==df[\"Overall\"].max()]\n\nHTML(df_strongest.to_html(escape=False ,formatters=dict(Image=path_to_image_html)))","bd074048":"df_weakest=df[[\"Name\",\"Image\",\"Age\",\"Overall\",\"Value\",\"Club\",\"Country\"]][df[\"Overall\"]==df[\"Overall\"].min()]\n\nHTML(df_weakest.to_html(escape=False ,formatters=dict(Image=path_to_image_html)))","b8d72416":"keys=[\"Wage\",\"Value\",\"Release Clause\"]\ndf_num = df.copy(deep=True)\n\nfor key in keys:\n    df_num[key + \"_Currency\"] = df_num[key].str[:1]\n    df_num[key + \"_Multiplier\"] = df_num[key].str[-1:]\n    df_num[key] = df_num[key].replace('[\\\u20ac,]', '', regex=True)\n    df_num[key] = df_num[key].replace('[K,]', '', regex=True)\n    df_num[key] = df_num[key].replace('[M,]', '', regex=True)","c6297a7a":"  \nprint(df_num[\"Wage_Currency\"].unique(),\n     df_num[\"Value_Currency\"].unique(),\n     df_num[\"Release Clause_Currency\"].unique())","634a0939":"print(df_num[\"Wage_Multiplier\"].unique(),\n     df_num[\"Value_Multiplier\"].unique(),\n     df_num[\"Release Clause_Multiplier\"].unique())","851c7fd5":"df_num[[\"Wage_Currency\",\"Wage_Multiplier\",\"Wage\",\"Value\",\"Value_Currency\",\"Value_Multiplier\",\"Release Clause\",\n       \"Release Clause_Currency\",\"Release Clause_Multiplier\"]].head()","08ba3087":"for key in keys:\n    df_num[key]=df_num[key].astype(float)\n\nfor key in keys:\n    df_num[key + \"_Multiplier\"] = df_num[key + \"_Multiplier\"].replace('[K,]', '1000', regex=True)\n    df_num[key + \"_Multiplier\"] = df_num[key + \"_Multiplier\"].replace('[M,]', '1000000', regex=True)\n    df_num[key + \"_Multiplier\"] = df_num[key + \"_Multiplier\"].astype(float)","d6a93482":"keys=[\"Wage\",\"Value\",\"Release Clause\"]\n\nfor key in keys:\n    df[key + \"_Numeric\"] = df_num[key]*df_num[key + \"_Multiplier\"]","344e1b7d":"from tabulate import tabulate\n\nprint(tabulate(df[[\"Name\",\"Wage\",\"Wage_Numeric\",\"Value\",\"Value_Numeric\"]].head(3) \\\n               .append(df[[\"Name\",\"Wage\",\"Wage_Numeric\",\"Value\",\"Value_Numeric\"]].tail(3)), \n               headers='keys', tablefmt='grid',numalign=\"right\",floatfmt=\".0f\"))","64f95241":"f, ax = plt.subplots(figsize=(16, 6))\nax.set(xscale=\"log\")\nplt.xlim(100, 1000000)\nsns.scatterplot(x=df[\"Wage_Numeric\"],y=df[\"Overall\"],ax=ax)\nplt.show()","ba198e38":"f, ax = plt.subplots(figsize=(16, 6))\nax.set(xscale=\"log\",)\nsns.scatterplot(x=df[\"Value_Numeric\"],y=df[\"Overall\"],ax=ax)\nplt.xlim(9000, 200000000)\nplt.show()","07721c3b":"f, ax = plt.subplots(figsize=(16, 6))\nsns.distplot(a=df[\"Age\"],bins=10,kde=False,hist_kws=dict(edgecolor=\"k\", linewidth=2),ax=ax)\nplt.show()","69c916db":"new_df = df.groupby('Country', as_index=False)['Overall'].max()","3d72574f":"new_df.sort_values(by=[\"Overall\"],ascending=False).head()","69010c6a":"idx = df.groupby(['Country'])['Overall'].transform(max) == df['Overall']\nHTML(df[idx].head().to_html(escape=False ,formatters=dict(Image=path_to_image_html)))","ccb00127":"new_df_2 = df.groupby('Club', as_index=False)['Overall'].mean()\nnew_df_2 = new_df_2.sort_values(by=[\"Overall\"],ascending=False)\nnew_df_2.head()\n#new_df_2.shape","8e10c439":"new_df_3 = new_df_2.sample(n=20)\nnew_df_3 = new_df_3.sort_values(by=[\"Overall\"],ascending=False)","0d534633":"f, ax = plt.subplots(figsize=(16, 6))\nsns.scatterplot(x=new_df_3[\"Club\"],y=new_df_3[\"Overall\"],ax=ax)\nplt.xticks(rotation='vertical')\n#plt.xlim(9000, 200000000)\nplt.show()","50951892":"plt.figure(figsize=(16,6))\nsns.swarmplot(x=df.loc[(df['Country'] == 'Spain') | (df[\"Country\"] == 'Argentina') | \\\n                  (df[\"Country\"] == 'Portugal') | (df[\"Country\"] == 'Turkey') ][\"Country\"],\n              y=df.loc[(df['Country'] == 'Spain') | (df[\"Country\"] == 'Argentina') | \\\n                  (df[\"Country\"] == 'Portugal') | (df[\"Country\"] == 'Turkey') ][\"Overall\"])\nplt.show()","939a024d":"sns.distplot(a=df[\"Age\"],bins=10,kde=False,hist_kws=dict(edgecolor=\"k\", linewidth=2))\nplt.show()","e4f45284":"bins = pd.IntervalIndex.from_tuples([(10, 15), (15, 20), (20, 25), (25,30),(30,35),(35,40),(40,45)],closed=\"left\")\ndf['Age_Bins']=pd.cut(df[\"Age\"],bins=bins,retbins=False)\ndf['Age_Bins'].dtypes","50d5e820":"import plotly.offline as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected = True)\nimport plotly.graph_objs as go","6b8fe7de":"idx = df.groupby(['Country'])['Overall'].transform(max) == df['Overall']\n\nMax_Player = df[idx]\n\ntrace = [go.Choropleth(\n            colorscale = 'Blues',\n            locationmode = 'country names',\n            locations = Max_Player['Country'],\n            text = Max_Player['Name'],\n            z = Max_Player['Overall'])]\n\nlayout = go.Layout(title = 'Country vs Their Top Players')\n\n\nfig = go.Figure(data = trace, layout = layout)\npy.iplot(fig)","a1149d03":"sns.set(style=\"darkgrid\")\nax = sns.countplot(x=\"foot\", data=df)","facfb71e":"plt.figure(figsize=(16,6))\nsns.set(style=\"darkgrid\")\nax = sns.countplot(x=\"BP\", data=df)","63685b64":"## Scatter Plot for the randomly selected Clubs","cf523ad2":"## Sorting Clubs according to their mean Overall Score","9ebcccef":"## Most of the players are right-fooded\n","17406d56":"### Countries Sorted for their most powerful Players","b53530f7":"## Plotting World Map vs Top Players for each Country","ef53012d":"**Visualizing Players from URLs**","f36a9f64":"# Different Kinds of Plots to Explore the Data","65070d8e":"### Best Players for each country","e793f8d4":"### Strongest & Weakest Players in Overall Score","64edc5f2":"## Age Distribution of the Players","28198b77":"Some players cannot be visualized since URLs are broken for them","683d61a9":"### Plotting a Swarm Plot for Spain, Argentina, Portugal and Turkey","c1e1682a":"## Converting Wage, Value and Release Clauses into Numerical Values"}}