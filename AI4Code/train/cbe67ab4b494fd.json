{"cell_type":{"d862cbf0":"code","90962201":"code","9085e2b9":"code","1ad6acaf":"code","ee6a1228":"code","46bb796b":"code","89fb9777":"code","cc344d39":"code","bba04607":"code","d61c760a":"code","da1d3499":"code","17c2de85":"code","1971459b":"code","9f9f650b":"code","fa7b3167":"code","e10ef934":"code","7cbc77e0":"code","ae014a1d":"code","77b34cce":"code","ee74bad8":"code","7636d247":"code","fc7b29dc":"code","a4041048":"code","3b03fe73":"code","61332244":"markdown","31cc6d2b":"markdown","690650be":"markdown","7aecad65":"markdown","801d49d6":"markdown","df881cba":"markdown","05b896c8":"markdown","c36efd40":"markdown","c0eae791":"markdown","c815719c":"markdown","8de08df6":"markdown","013b6b2f":"markdown"},"source":{"d862cbf0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","90962201":"\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\nimport matplotlib.image as implt\nfrom PIL import Image \nimport seaborn as sns\nimport cv2 as cs2\nimport os\n\nimport warnings\nwarnings.filterwarnings('ignore')","9085e2b9":"train_data = \"\/kaggle\/input\/messy-vs-clean-room\/images\/train\"\ntest_data = \"\/kaggle\/input\/messy-vs-clean-room\/images\/val\"\n\ntrain_messy_path = \"\/kaggle\/input\/messy-vs-clean-room\/images\/train\/messy\"\ntrain_clean_path = \"\/kaggle\/input\/messy-vs-clean-room\/images\/train\/clean\"\n\ntest_messy_path = \"\/kaggle\/input\/messy-vs-clean-room\/images\/val\/messy\"\ntest_clean_path = \"\/kaggle\/input\/messy-vs-clean-room\/images\/val\/clean\"","1ad6acaf":"#Visualization\ncategory_names = os.listdir(train_data) # output: ['messy', 'clean'] -> listing into folder\nnb_categories = len(category_names) # output: 2\ntrain_images = []\n\nfor category in category_names:\n    folder = train_data + \"\/\" + category\n    train_images.append(len(os.listdir(folder))) #sort of datas in folder\n    \nsns.barplot(y=category_names, x=train_images).set_title(\"Number Of Training Images Per Category\");","ee6a1228":"test_images = []\nfor caregory in category_names:\n    folder = test_data + \"\/\" + folder\n    test_images.append(len(os.listdir(test_data)))\n    \nsns.barplot(y=category_names, x=test_images).set_title(\"Number Of Test Images Per Category\");","46bb796b":"img1 = implt.imread(\"..\/input\/messy-vs-clean-room\/images\/train\/messy\/0.png\") #messy\nimg2 = implt.imread(\"..\/input\/messy-vs-clean-room\/images\/train\/clean\/0.png\") #clean\n\nplt.subplot(1, 2, 1)\nplt.title('messy')\nplt.imshow(img1)       \nplt.subplot(1, 2, 2)\nplt.title('clan')\nplt.imshow(img2)\nplt.show()","89fb9777":"img_size = 50\nmessy_train = []\nclean_train = []\nlabel = []\n\nfor i in os.listdir(train_messy_path): # all train messy images\n    if os.path.isfile(train_data + \"\/messy\/\" + i): # check image in file\n        messy = Image.open(train_data + \"\/messy\/\" + i).convert(\"L\") # converting grey scale \n        messy = messy.resize((img_size,img_size), Image.ANTIALIAS) # resizing to 50,50\n        messy = np.asarray(messy)\/255 # bit format (RGB)\n        messy_train.append(messy)\n        label.append(1)\n        \nfor i in os.listdir(train_clean_path): # all train clean images\n    if os.path.isfile(train_data + \"\/clean\/\" + i): # check image in file\n        clean = Image.open(train_data + \"\/clean\/\" + i).convert(\"L\") # converting grey scale \n        clean = clean.resize((img_size,img_size), Image.ANTIALIAS) # resizing to 50,50\n        clean = np.asarray(clean)\/255 # bit format\n        clean_train.append(clean)\n        label.append(0)","cc344d39":"x_train = np.concatenate((messy_train,clean_train),axis=0)\nx_train_label = np.asarray(label)\nx_train_label = x_train_label.reshape(x_train_label.shape[0],1)\n\nprint(\"messy:\",np.shape(messy_train) , \"clean:\",np.shape(clean_train))\nprint(\"train_dataset:\",np.shape(x_train), \"train_values:\",np.shape(x_train_label))","bba04607":"img_size = 50\nmessy_test = []\nclean_test = []\nlabel = []\n\nfor i in os.listdir(test_messy_path): # all train messy images\n    if os.path.isfile(test_data + \"\/messy\/\" + i): # check image in file\n        messy = Image.open(test_data + \"\/messy\/\" + i).convert(\"L\") # converting grey scale \n        messy = messy.resize((img_size,img_size), Image.ANTIALIAS) # resizing to 50,50\n        messy = np.asarray(messy)\/255 # bit format\n        messy_test.append(messy)\n        label.append(1)\n        \nfor i in os.listdir(test_clean_path): # all train clean images\n    if os.path.isfile(test_data + \"\/clean\/\" + i): # check image in file\n        clean = Image.open(test_data + \"\/clean\/\" + i).convert(\"L\") # converting grey scale \n        clean = clean.resize((img_size,img_size), Image.ANTIALIAS) # resizing to 50,50\n        clean = np.asarray(clean)\/255 # bit format\n        clean_test.append(clean)\n        label.append(0)","d61c760a":"x_test = np.concatenate((messy_test,clean_test),axis=0)\nx_test_label = np.asarray(label)\nx_test_label = x_test_label.reshape(x_test_label.shape[0],1)\n\nprint(\"messy:\",np.shape(messy_test) , \"clean:\",np.shape(clean_test))\nprint(\"train_dataset:\",np.shape(x_test), \"train_values:\",np.shape(x_test_label))","da1d3499":"x = np.concatenate((x_train,x_test),axis=0) #train data\n# x.shape: \ny = np.concatenate((x_train_label,x_test_label),axis=0)\nx = x.reshape(x.shape[0],x.shape[1]*x.shape[2]) # flatten 3D image array to 2D, count\nprint(\"images:\",np.shape(x), \"labels:\",np.shape(y))","17c2de85":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.15, random_state=42)\nnumber_of_train = X_train.shape[0]\nnumber_of_test = X_test.shape[0]\n\nprint(\"Train Number: \", number_of_train)\nprint(\"Test Number: \", number_of_test)","1971459b":"x_train = X_train.T\nx_test = X_test.T\ny_train = y_train.T\ny_test = y_test.T\nprint(\"x train: \",x_train.shape)\nprint(\"x test: \",x_test.shape)\nprint(\"y train: \",y_train.shape)\nprint(\"y test: \",y_test.shape)","9f9f650b":"def initialize_weights_and_bias(dimension):\n    w = np.full((dimension,1),0.01) # np.full((row,column),value)\n    b = 0.0\n    return w,b\n\ndef sigmoid(z):\n    y_head = 1\/(1+np.exp(-z))\n    return y_head\n\ndef forward_backward_propagation(w,b,x_train,y_train):\n    # forward propagation\n    z = np.dot(w.T, x_train) + b\n    y_head = sigmoid(z)\n    loss = -(1-y_train)*np.log(1-y_head)-y_train*np.log(y_head)\n    cost = (np.sum(loss))\/x_train.shape[1]  # x_train.shape[1]  is for scaling, x_train.shape[1] = 1090\n    \n    # backward propagation\n    derivative_weight = (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1]\n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1]\n    gradients = {\n        \"derivative_weight\": derivative_weight,\n        \"derivative_bias\": derivative_bias\n    }\n    return cost,gradients\n\ndef update(w, b, x_train, y_train, learning_rate,number_of_iteration):\n    cost_list = []\n    cost_list2 = []\n    index = []\n    # updating(learning) parameters is number_of_iteration times\n    for i in range(number_of_iteration):\n        \n        # make forward and backward propagation and find cost and gradients\n        cost,gradients = forward_backward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        \n        # lets update\n        w = w - learning_rate * gradients[\"derivative_weight\"]\n        b = b - learning_rate * gradients[\"derivative_bias\"]\n        if i % 50 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n            \n        # we update(learn) parameters weights and bias\n    parameters = {\"weight\": w,\"bias\": b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation=\"vertical\")\n    plt.xlabel(\"Number of Iterarion\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, gradients, cost_list\n\ndef predict(w,b,x_test):\n    # x_test is a input for forward propagation\n    z = sigmoid(np.dot(w.T,x_test)+b)\n    y_prediction = np.zeros((1,x_test.shape[1]))\n    \n    # if z is bigger than 0.5, our prediction is human (y_head=1)\n    # if z is smaller than 0.5, our prediction is horse (y_head=0)\n    for i in range(z.shape[1]):\n        if z[0,i] <= 0.5:\n            y_prediction[0,i] = 0\n        else:\n            y_prediction[0,i] = 1\n    return y_prediction\n\n\ndef logistic_regression(x_train, y_train, x_test, y_test, learning_rate, num_iterations):\n    # initialize\n    dimension = x_train.shape[0] # 2500\n    w,b = initialize_weights_and_bias(dimension)\n    parameters, gradients, cost_list = update(w,b,x_train,y_train,learning_rate,num_iterations)\n    \n    y_prediction_test = predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n    y_prediction_train = predict(parameters[\"weight\"],parameters[\"bias\"],x_train)\n    \n    test_acc_lr = round((100 - np.mean(np.abs(y_prediction_test - y_test)) * 100),2)\n    train_acc_lr = round((100 - np.mean(np.abs(y_prediction_train - y_train))*100),2)\n    \n    # Print train\/test Errors\n    print(\"train accuracy: %\", train_acc_lr)\n    print(\"test accuracy: %\", test_acc_lr)\n    return train_acc_lr, test_acc_lr","fa7b3167":"#you can adjust learning_rate and num_iteration to check how the result is affected\n#(for learning rate, try exponentially lower values:0.001 etc.) \ntrain_acc_lr, test_acc_lr = logistic_regression(x_train, y_train, x_test, y_test,learning_rate = 0.11, num_iterations = 2000)","e10ef934":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\nlogreg = LogisticRegression()\ntest_acc_logregsk = round(logreg.fit(x_train.T, y_train.T).score(x_test.T, y_test.T)* 100, 2)\ntrain_acc_logregsk = round(logreg.fit(x_train.T, y_train.T).score(x_train.T, y_train.T)* 100, 2)","7cbc77e0":"# with GridSearchCV\nfrom sklearn.model_selection import GridSearchCV\n\ngrid = {\n    \"C\": np.logspace(-4, 4, 20),\n    \"penalty\": [\"l1\",\"l2\"]\n}\nlg=LogisticRegression(random_state=42)\nlog_reg_cv=GridSearchCV(lg,grid,cv=10,n_jobs=-1,verbose=2)\nlog_reg_cv.fit(x_train.T,y_train.T)\nprint(\"accuracy: \", log_reg_cv.best_score_)","ae014a1d":"models = pd.DataFrame({\n    'Model': ['LR without sklearn','LR with sklearn','LR with GridSearchCV' ],\n    'Train Score': [train_acc_lr, train_acc_logregsk, \"-\"],\n    'Test Score': [test_acc_lr, test_acc_logregsk, log_reg_cv.best_score_*100]\n})\nmodels.sort_values(by='Test Score', ascending=False)","77b34cce":"# Reshaping\nx_train, x_test, y_train, y_test = x_train.T, x_test.T, y_train.T, y_test.T","ee74bad8":"from sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\n","7636d247":"from keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom keras.models import Sequential # initialize neural network library\nfrom keras.layers import Dense # build our layers library\n\ndef build_classifier():\n    classifier = Sequential() # initialize neural network\n    # units: number of nodes \n    classifier.add(Dense(units= 8, kernel_initializer=\"uniform\", activation=\"relu\", input_dim=x_train.shape[1]))\n    classifier.add(Dense(units= 4, kernel_initializer=\"uniform\", activation=\"relu\", input_dim=x_train.shape[1]))\n    classifier.add(Dense(units= 1, kernel_initializer=\"uniform\", activation=\"sigmoid\")) # end node\n    classifier.compile(optimizer=\"adam\", loss=\"binary_crossentropy\", metrics=[\"accuracy\"])\n    \n    \n    \n    \n    return classifier","fc7b29dc":"classifier = KerasClassifier(build_fn=build_classifier, epochs=100)\naccuracies = cross_val_score(estimator=classifier, X=x_train, y=y_train, cv=5)\nmean = accuracies.mean()","a4041048":"print(\"Accuracies: \", accuracies)","3b03fe73":"print(\"Accuracy mean: \",mean)","61332244":"* Doing Gray Scale\n* 1.convert images to gray scale -> 2.resize all images","31cc6d2b":"* Paths of Data","690650be":"# Processing Dataset","7aecad65":"* We combine image strings and tags and flatten 'x'","801d49d6":"* 1,0 are instead of messy and clean","df881cba":"# Logistic Regression","05b896c8":"* the reason of less test accuracy than train is inadequate number of test data.","c36efd40":"# Loading Data","c0eae791":"### CNN With Keras Library","c815719c":"* data size must be equal above one ","8de08df6":"* \u0130mport Libaries","013b6b2f":"* train test split"}}