{"cell_type":{"8cd3efc5":"code","d0246a19":"code","c6cc647f":"code","524bdac0":"code","eaf47b43":"code","10f92fe7":"code","1e1574ba":"code","aba33ae0":"markdown"},"source":{"8cd3efc5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d0246a19":"# To import cifar-100 data\nimport pickle\nimport numpy as np\n\nwith open('..\/input\/train_data\/train_data', 'rb') as f:\n    train_data = pickle.load(f)\n    train_label= pickle.load(f)\n\n# Print training data caracteristics\nprint('Training images data type: ' + str(type(train_data)))\nprint('Training images array dimension: ' + str(train_data.shape))\nprint('Training labels data type: ' + str(type(train_label)))\nprint('Training labels length: ' + str(len(train_label)))","c6cc647f":"# Function to extract images in the right format\ndef getTrainData():\n    labels_training = []\n    dataImgSet_training = []\n    \n    # Extract only the first 100 images in the training dataset\n    for i in range(100):\n            # Get flattened image and label\n            img_flat = train_data[i]\n            labels_training.append(train_label[i])\n\n            # Extract each color channel of 32x32 image \n            img_R = img_flat[0:1024].reshape((32, 32))\n            img_G = img_flat[1024:2048].reshape((32, 32))\n            img_B = img_flat[2048:3072].reshape((32, 32))\n            \n            # Set channels last format\n            imgFormat = np.array([img_R, img_G, img_B])\n            imgFormat = np.transpose(imgFormat, (1, 2, 0))  #Change the shape 3,32,32 to 32,32,3 \n            dataImgSet_training.append(imgFormat)\n            \n    # Convert to numpy array\n    dataImgSet_training = np.array(dataImgSet_training)\n    labels_training = np.array(labels_training)\n\n    return dataImgSet_training, labels_training","524bdac0":"# Call getTrainData() function\nX_train, y_train = getTrainData()","eaf47b43":"# Plot some images\nfrom matplotlib import pyplot\nfrom PIL import Image\n\n# Create a grid of 3x3 images\nprint(\"Some images\")\nfor i in range(0, 9):\n    pyplot.subplot(330 + 1 + i)\n    pyplot.imshow(Image.fromarray(X_train[i]))\n    \npyplot.show()","10f92fe7":"# Here you create and train your model, then you use it to predict in the test dataset\n# and most likely you will output a .csv table with the predicted labels\n\n# To save and download the .csv you have to run the entire notebook by pressing 'Commit'\n# at the top of this Kernel, it will save the .csv so you can download it later on\n# and use it as your submission","1e1574ba":"# As an example I will create a random submission file and store it as .csv \n\n# Vector of labels probability (random)\nresults = np.random.rand(10000, 100)\n\n# Select the index with the maximum probability\nresults = np.argmax(results,axis = 1)\nresults = pd.Series(results,name=\"labels\")\n\n# Add image id column\nsubmission = pd.concat([pd.Series(range(10000),name = \"ids\"),results],axis = 1)\n\n# Export to .csv\nsubmission.to_csv(\"my_predictions.csv\",index=False)","aba33ae0":"### A starting point for the STAT946 Data Challenge <br>\n\nThere are several frameworks out there for tackling the data challenge, Keras is just one of them.\n\nSource\n[[1](https:\/\/www.kaggle.com\/lucasborges\/cifar-10-inf-791)] CIFAR-10 excercise, by Lucas Borges\n"}}