{"cell_type":{"565a8240":"code","bc5dac86":"code","dd9509de":"code","12b71b32":"code","48a829cb":"code","9fc63026":"code","156bda89":"code","202894a2":"code","6cdceb80":"code","375a45c4":"code","7825c678":"code","b95e726b":"code","2a2eb1fd":"code","ef8b6f2c":"code","ad7cd205":"code","a94c1163":"code","a8aa740d":"code","97b138a9":"code","28ea1015":"code","69c4daaa":"code","70199d3a":"code","0edf61ab":"code","fd8d1b7b":"markdown","c12c1a89":"markdown","2e992a1a":"markdown","2fd5a37a":"markdown","7780e677":"markdown","048df64a":"markdown","a8d0be7c":"markdown","2d427bf7":"markdown","6edad981":"markdown","2947b89c":"markdown","fa7b0b36":"markdown","2f32ba7e":"markdown","1dfa67ae":"markdown","2ca52ae4":"markdown","4ac235ef":"markdown","6b6c4932":"markdown","306657b8":"markdown","cbbd8fc8":"markdown","8b0caf06":"markdown","c9f086fd":"markdown","b9c688c0":"markdown","5c515052":"markdown","1f6438f9":"markdown","30a90981":"markdown","7ff33d83":"markdown","57ee37bd":"markdown","01925303":"markdown"},"source":{"565a8240":"#Import library yang dibutuhkan \nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.metrics import confusion_matrix, classification_report\nimport pickle\npd.options.display.max_columns = 50\n\n\n#import dataset\ndf_load = pd.read_csv('..\/input\/telco_company.csv')\n\n#Tampilkan jumlah baris dan kolom\nprint(df_load.shape)\n\n#Tampilkan 5 data teratas\nprint(df_load.head(5))\n\n#Jumlah ID yang unik\nprint(df_load.customerID.nunique())","bc5dac86":"#Membuat kolom bantuan 'valid_id',mencari customerID diawali dengan angka 45 2 digit pertama dengan str.match\ndf_load['valid_id'] = df_load['customerID'].astype(str).str.match(r'(45\\d{9,10})')\n#Mengambil valid_id bernilai True kemudian drop kolom valid_id\ndf_load = (df_load[df_load['valid_id'] == True]).drop('valid_id', axis = 1)\n#Menghitung jumlah baris 'customerID' setelah difilter\nprint('Hasil jumlah ID Customer yang terfilter adalah',df_load['customerID'].count())\n","dd9509de":"# Drop Duplicate Rows\ndf_load.drop_duplicates()\n# Drop duplicate ID sorted by Periode\ndf_load = df_load.sort_values('UpdatedAt', ascending=False).drop_duplicates(['customerID'])\nprint('Hasil jumlah ID Customer yang sudah dihilangkan duplikasinya (distinct) adalah',df_load['customerID'].count())","12b71b32":"print('Total missing values data dari kolom Churn',df_load['Churn'].isnull().sum())\n# Dropping all Rows with spesific column (churn)\ndf_load.dropna(subset=['Churn'],inplace=True)\nprint('Total Rows dan kolom Data setelah dihapus data Missing Values adalah',df_load.shape)","48a829cb":"print('Status Missing Values :',df_load.isnull().values.any())\nprint('\\nJumlah Missing Values masing-masing kolom, adalah:')\nprint(df_load.isnull().sum().sort_values(ascending=False))\n\n# handling missing values Tenure fill with 11\ndf_load['tenure'].fillna(11, inplace=True)\n\n# Handling missing values num vars (except Tenure)\nfor col_name in list(['MonthlyCharges','TotalCharges']):\n  median = df_load[col_name].median()\n  df_load[col_name].fillna(median, inplace=True)\n\nprint('\\nJumlah Missing Values setelah di imputer datanya, adalah:')\nprint(df_load.isnull().sum().sort_values(ascending=False))","9fc63026":"print('\\nPersebaran data sebelum ditangani Outlier: ')\nprint(df_load[['tenure','MonthlyCharges','TotalCharges']].describe())\n\n# Creating Box Plot\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.figure() # untuk membuat figure baru\nsns.boxplot(x=df_load['tenure'])\nplt.show()\nplt.figure() # untuk membuat figure baru\nsns.boxplot(x=df_load['MonthlyCharges'])\nplt.show()\nplt.figure() # untuk membuat figure baru\nsns.boxplot(x=df_load['TotalCharges'])\nplt.show()","156bda89":"# Handling with IQR\nQ1 = (df_load[['tenure','MonthlyCharges','TotalCharges']]).quantile(0.25)\nQ3 = (df_load[['tenure','MonthlyCharges','TotalCharges']]).quantile(0.75)\n\nIQR = Q3 - Q1\nmaximum = Q3 + (1.5*IQR)\nprint('Nilai Maximum dari masing-masing Variable adalah: ')\nprint(maximum)\nminimum = Q1 - (1.5*IQR)\nprint('\\nNilai Minimum dari masing-masing Variable adalah: ')\nprint(minimum)\n\nmore_than = (df_load > maximum)\nlower_than = (df_load < minimum)\ndf_load = df_load.mask(more_than, maximum, axis=1)\ndf_load = df_load.mask(lower_than, minimum, axis=1)\n\nprint('\\nPersebaran data setelah ditangani Outlier: ')\nprint(df_load[['tenure','MonthlyCharges','TotalCharges']].describe())","202894a2":"#Loop\nfor col_name in list(['gender','SeniorCitizen','Partner','Dependents','PhoneService','MultipleLines','InternetService','OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies','Contract','PaperlessBilling','PaymentMethod','Churn']):\n  print('\\nUnique Values Count \\033[1m' + 'Before Standardized \\033[0m Variable',col_name)\n\n  print(df_load[col_name].value_counts())","6cdceb80":"#Replace unique values dari masing-masing variable\ndf_load = df_load.replace(['Wanita','Laki-Laki','Churn','Iya'],['Female','Male','Yes','Yes'])\n\n#Memihat unique values setelah dilakukan standarisasi\nfor col_name in list(['gender','Dependents','Churn']):\n  print('\\nUnique Values Count \\033[1m' + 'After Standardized \\033[0mVariable',col_name)\n  print(df_load[col_name].value_counts())","375a45c4":"#Mengambil kolom yang diperlukan yang disimpan pada variabel df_telco\ndf_telco = df_load[['UpdatedAt','customerID', 'gender','SeniorCitizen','Partner','tenure','PhoneService','StreamingTV','InternetService','PaperlessBilling','MonthlyCharges','TotalCharges','Churn']]\n\n#Tampilkan bentuk dari dataset\nprint(df_telco.shape)\n\n#Tampilkan 5 data teratas\nprint(df_telco.head())\n\n#Tampilkan jumlah ID yang unik\nprint(df_telco.customerID.nunique())","7825c678":"#Membuat figur plot\nfig = plt.figure()\n#Membuat sumbu plot\nax = fig.add_axes([0,0,1,1])\n#Mengubah batas sumbu x atau y sehingga memiliki panjang yang sama\nax.axis('equal')\n#Membuat Label pie chart\nlabels = ['Yes','No']\n#Menghitung banyaknya unik dari kolom Churn dengan value_counts()\nchurn = df_telco.Churn.value_counts()\n#Membuat bentuk pie chart\nax.pie(churn, labels=labels, autopct='%.0f%%')\nplt.show()","b95e726b":"#Membuat bin dalam chart\nnumerical_features =  ['MonthlyCharges','TotalCharges','tenure']\n#Membuat subplot\nfig, ax = plt.subplots(1, 3, figsize=(15, 6))\n#Untuk memplot dua overlay histogram per numerical_features masing-masing\ndf_load[df_telco.Churn == 'No'][numerical_features].hist(bins=20, color='blue', alpha=0.5, ax=ax)\ndf_load[df_telco.Churn == 'Yes'][numerical_features].hist(bins=20, color='orange', alpha=0.5, ax=ax)\nplt.show()","2a2eb1fd":"#Membuat subplot\nfig, ax = plt.subplots(3, 3, figsize=(14, 12))\n#membuat plot dengan jumlah pengamatan di setiap bin kategorik variable dengan countplot()\nsns.countplot(data=df_telco, x='gender', hue='Churn', ax=ax[0][0])\nsns.countplot(data=df_telco, x='Partner', hue='Churn', ax=ax[0][1])\nsns.countplot(data=df_telco, x='SeniorCitizen', hue='Churn', ax=ax[0][2])\nsns.countplot(data=df_telco, x='PhoneService', hue='Churn', ax=ax[1][0])\nsns.countplot(data=df_telco, x='StreamingTV', hue='Churn', ax=ax[1][1])\nsns.countplot(data=df_telco, x='InternetService', hue='Churn', ax=ax[1][2])\nsns.countplot(data=df_telco, x='PaperlessBilling', hue='Churn', ax=ax[2][1])\nplt.tight_layout()\nplt.show()\n","ef8b6f2c":"#Menghapus kolom customerID & UpdatedAt\ncleaned_df = df_telco.drop(['customerID','UpdatedAt'], axis=1)\nprint(cleaned_df.head())","ad7cd205":"#Mengubah semua tipe data non-numeric columns ke numerical\nfor column in cleaned_df.columns:\n    if cleaned_df[column].dtype == np.number: continue\n    #Melakukan encoding  untuk setiap kolom non-numeric dengan LabelEncoder()\n    cleaned_df[column] = LabelEncoder().fit_transform(cleaned_df[column])\nprint(cleaned_df.describe())","a94c1163":"# Predictor dan target\nX = cleaned_df.drop('Churn', axis = 1)\ny = cleaned_df['Churn']\n# Splitting train and test\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\nprint('Jumlah baris dan kolom dari x_train adalah:', x_train.shape,', sedangkan Jumlah baris dan kolom dari y_train adalah:', y_train.shape)\nprint('Prosentase Churn di data Training adalah:')\n#Mengecek apakah pembagian sudah sama proporsinya\nprint(y_train.value_counts(normalize=True))","a8aa740d":"#Membuat model dengan menggunakan Algoritma Logistic Regression\nlog_model = LogisticRegression().fit(x_train, y_train)\nprint('Model Logistic Regression yang terbentuk adalah: \\n',log_model)","97b138a9":"# Predict\ny_train_pred =  log_model.predict(x_train)\n# Print classification report \nprint('Classification Report Training Model (Logistic Regression) :')\nprint(classification_report(y_train, y_train_pred))","28ea1015":"# Form confusion matrix as a DataFrame\nconfusion_matrix_df = pd.DataFrame((confusion_matrix(y_train, y_train_pred)), ('No churn', 'Churn'), ('No churn', 'Churn'))\n\n# Plot confusion matrix\nplt.figure()\nheatmap = sns.heatmap(confusion_matrix_df, annot=True, annot_kws={'size': 14}, fmt='d', cmap='YlGnBu')\nheatmap.yaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation=0, ha='right', fontsize=14)\nheatmap.xaxis.set_ticklabels(heatmap.xaxis.get_ticklabels(), rotation=0, ha='right', fontsize=14)\n\nplt.title('Confusion Matrix for Training Model\\n(Logistic Regression)', fontsize=18, color='darkblue')\nplt.ylabel('True label', fontsize=14)\nplt.xlabel('Predicted label', fontsize=14)\nplt.show()","69c4daaa":"# Predict\ny_test_pred = log_model.predict(x_test)\n# Print classification report\nprint('Classification Report Testing Model (Logistic Regression):')\nprint(classification_report(y_test, y_test_pred))","70199d3a":"# Form confusion matrix as a DataFrame\nconfusion_matrix_df = pd.DataFrame((confusion_matrix(y_test, y_test_pred)), ('No churn', 'Churn'), ('No churn', 'Churn'))\n\n# Plot confusion matrix\nplt.figure()\nheatmap = sns.heatmap(confusion_matrix_df, annot=True, annot_kws={'size': 14}, fmt='d', cmap='YlGnBu')\nheatmap.yaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation=0, ha='right', fontsize=14)\nheatmap.xaxis.set_ticklabels(heatmap.xaxis.get_ticklabels(), rotation=0, ha='right', fontsize=14)\n\nplt.title('Confusion Matrix for Testing Model\\n(Logistic Regression)\\n', fontsize=18, color='darkblue')\nplt.ylabel('True label', fontsize=14)\nplt.xlabel('Predicted label', fontsize=14)\nplt.show()","0edf61ab":"#Save Model\npickle.dump(log_model, open('best_model_churn.pkl', 'wb'))","fd8d1b7b":"**Performansi Model Training - Menampilkan Metrics**","c12c1a89":"**Exploratory Data Analysis (EDA) Variabel Numerik**","2e992a1a":"# Mengatasi Outlier","2fd5a37a":"**Menstandarisasi Variable Kategorik**","7780e677":"**Exploratory Data Analysis (EDA) Variabel Kategorik**","048df64a":"**Mengatasi Outlier**","a8d0be7c":"**Memfilter ID Number Pelanggan Format Tertentu**","2d427bf7":"**Menghapus Unnecessary Columns dari data**","6edad981":"# Mengatasi Missing Values","2947b89c":"**Pembuatan Model**","fa7b0b36":"**Mengatasi Missing Values dengan Penghapusan Rows**","2f32ba7e":"**Memfilter Duplikasi ID Number Pelanggan**","1dfa67ae":"**Performansi Data Testing - Menampilkan Metrics**","2ca52ae4":"# Melakukan Data PreProcessing","4ac235ef":"**Mengatasi Missing Values dengan Pengisian Nilai tertentu**","6b6c4932":"# Menstandarisasi Nilai","306657b8":"**Memvisualisasikan Prosentase Churn**","cbbd8fc8":"**Encoding Data**","8b0caf06":"**Splitting Dataset**","c9f086fd":"**Mendeteksi Nilai yang tidak Standar**","b9c688c0":"**Performansi Model Training - Menampilkan Plots**","5c515052":"**Performansi Data Testing - Menampilkan Plots**","1f6438f9":"# Import Library dan Dataset","30a90981":"**Mendeteksi adanya Outlier (Boxplot)**","7ff33d83":"# Modelling: Logistic Regression","57ee37bd":"# Melakukan Exploratory Data Analysis (EDA)","01925303":"# Mencari Validitas ID Number Pelanggan"}}