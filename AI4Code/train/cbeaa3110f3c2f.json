{"cell_type":{"fb8a6fad":"code","001824b5":"code","9b2124b4":"code","2e2c8ed8":"code","7ae08d5a":"code","a8a61e72":"code","753a116a":"code","500b2cfd":"code","0a88824e":"code","26d5e679":"code","b706cbd9":"code","c317cbf9":"code","3eb8617c":"code","9989f3c8":"code","eac04b5a":"code","13cad41c":"code","11a9374b":"code","76ebf667":"code","ee991d37":"markdown","c40612b8":"markdown","af37d5c9":"markdown","3b516b04":"markdown","9bcb5776":"markdown","a77be448":"markdown"},"source":{"fb8a6fad":"!pip install plotly\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nimport matplotlib.pyplot as plt\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected = True)\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","001824b5":"df = pd.read_csv('\/kaggle\/input\/lb-classification\/data.csv')\ndf.head()","9b2124b4":"def check_df(dataframe, head=5):\n    print(\"##################### Shape #####################\")\n    print('Rows: {}'.format(dataframe.shape[0]))\n    print('Columns: {}'.format(dataframe.shape[1]))\n    print(\"##################### Types #####################\")\n    print(dataframe.dtypes)\n    print(\"##################### Head #####################\")\n    print(dataframe.head(head))\n    print(\"##################### Tail #####################\")\n    print(dataframe.tail(head))\n    print(\"##################### NA #####################\")\n    print(dataframe.isnull().sum())\n    print(\"##################### Quantiles #####################\")\n    print(dataframe.quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T)\n    \ndef cat_summary(dataframe, col_name, plot=False):\n    print(pd.DataFrame({col_name: dataframe[col_name].value_counts(),\n                        \"Ratio\": 100 * dataframe[col_name].value_counts() \/ len(dataframe)}))\n    print(\"##########################################\")\n    if plot:\n        sns.countplot(x=dataframe[col_name], data=dataframe)\n        plt.show()\n\ncheck_df(df)","2e2c8ed8":"cat_cols = [col for col in df.columns if df[col].dtypes == \"O\"]\nfor col in cat_cols:\n    cat_summary(df, col)","7ae08d5a":"desc = df.describe().T\ndf1 = pd.DataFrame(index= [col for col in df.columns if df[col].dtype != 'O'], \n                   columns= [\"count\",\"mean\",\"std\",\"min\",\"25%\",\"50%\",\"75%\",\"max\"], data= desc )\n\nf,ax = plt.subplots(figsize=(12,4))\n\nsns.heatmap(df1, annot=True,cmap = \"Reds\", fmt= '.0f',\n            ax=ax,linewidths = 5, cbar = False,\n            annot_kws={\"size\": 16})\n\nplt.xticks(size = 18)\nplt.yticks(size = 12, rotation = 0)\nplt.title(\"Descriptive Statistics\", size = 16)\nplt.show()","a8a61e72":"data = go.Bar(x = df.groupby('COUNTRY').agg({'PRICE':'mean'}).reset_index()['COUNTRY'],\n              y = df.groupby('COUNTRY').agg({'PRICE':'mean'}).reset_index()['PRICE'],\n              text = round(df.groupby('COUNTRY').agg({'PRICE':'mean'}).reset_index()['PRICE'],2),\n              textposition= 'auto',marker = dict(color = '#2AEF45',line_color = 'black',line_width=3))\n\nlayout = go.Layout(title={'text': \"Avg Price by Countries\",'y':0.9,'x':0.5,\n                          'xanchor': 'center','yanchor': 'top'},\n                   xaxis = dict(title='Country'),\n                   yaxis =dict(title='Price'),\n                   width=620,height=470,template='plotly')\n\nfig=go.Figure(data=data, layout=layout)\nfig.update_yaxes(range=[0,50])\niplot(fig)","753a116a":"colors = ['#E61919', '#5AE619', '#E6E619', '#19E6DD','#8919E6','#E619D6']\n\nfig = go.Figure(data=[go.Pie(labels=df['COUNTRY'].value_counts().keys(),\n                             values=df['COUNTRY'].value_counts().values)])\nfig.update_traces(hoverinfo='value', textinfo='label', textfont_size=16,textposition ='auto',showlegend=False,\n                  marker=dict(colors=colors))\n\nfig.update_layout(title={'text': \"Country\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'},\n                 template='simple_white')\niplot(fig)","500b2cfd":"fig = make_subplots(rows=1,cols=2,shared_yaxes=True,subplot_titles=(\"Avg Price by Gender\", \"Avg Price by Source\"))\n\nfig.add_trace(go.Bar(x = df.groupby('SEX').agg({'PRICE':'mean'}).reset_index()['SEX'],\n              y = df.groupby('SEX').agg({'PRICE':'mean'}).reset_index()['PRICE'],showlegend=False,\n              text = round(df.groupby('SEX').agg({'PRICE':'mean'}).reset_index()['PRICE'],2),\n              textposition= 'auto',marker = dict(color = '#2AD7EF',line_color = 'black',line_width=3)),row=1,col=1)\n\nfig.add_trace(go.Bar(x = df.groupby('SOURCE').agg({'PRICE':'mean'}).reset_index()['SOURCE'],\n              y = df.groupby('SOURCE').agg({'PRICE':'mean'}).reset_index()['PRICE'],showlegend=False,\n              text = round(df.groupby('SOURCE').agg({'PRICE':'mean'}).reset_index()['PRICE'],2),\n              textposition= 'auto',marker = dict(color = '#2AD7EF',line_color = 'black',line_width=3)),row=1,col=2)\n\nfig.update_yaxes(range=[0,50],row=1,col=1)\nfig.update_yaxes(range=[0,50],row=1,col=2)\nfig.update_layout(yaxis =dict(title='Price'),width=700,height=450,template='plotly')\n\niplot(fig)","0a88824e":"data = [go.Heatmap(x=df['SEX'],y= df['COUNTRY'],\n                   z = df['PRICE'].values.tolist(),\n                   colorscale = 'Viridis')]\n\nlayout = go.Layout(title={'text': \"Sex & Country\",'y':0.9,'x':0.5,\n                          'xanchor': 'center','yanchor': 'top'},\n                           xaxis = dict(title='Sex'),\n                           yaxis =dict(title='Country'),\n                           width=500,height=450,template='plotly_white')\n\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","26d5e679":"fig = make_subplots(rows=1,cols=2,shared_yaxes=True,subplot_titles=(\"Male\", \"Female\"))\n\nfor i in df['COUNTRY'].unique():\n    fig.add_trace(go.Box(y =df.loc[(df['SEX']=='male') & (df['COUNTRY'] == i)]['PRICE'],showlegend=False,\n                         name = str(i),marker_color='#910BEE'),row=1,col=1)\n\nfor i in df['COUNTRY'].unique():\n    fig.add_trace(go.Box(y =df.loc[(df['SEX']=='female') & (df['COUNTRY'] == i)]['PRICE'],showlegend=False,\n                         name = str(i),marker_color='#910BEE'),row=1,col=2)\n\nfig.update_layout(yaxis =dict(title='Price'),template='plotly')      \niplot(fig)","b706cbd9":"data = [go.Histogram(x= df['AGE'],\n                     xbins = dict(start = 0,end =100,size =5),\n                    marker=dict(color='#E61919',line=dict(color='black', width=2)))]\n\nlayout = go.Layout(title={'text': \"Age Distribution\",'y':0.9,'x':0.5,\n                          'xanchor': 'center','yanchor': 'top'},\n                           xaxis = dict(title='Age'),\n                           yaxis =dict(title='Frequency'),\n                          width=700,height=450, template = 'plotly_white')\n\nfig = go.Figure(data = data, layout = layout)\n\niplot(fig)","c317cbf9":"data = [go.Histogram(x= df['PRICE'],xbins = dict(start = 0,end =100,size =10),\n                    marker=dict(color='#E61919',line=dict(color='black', width=2)))]\n\nlayout = go.Layout(title={'text': \"Price Distribution\",'y':0.9,'x':0.5,\n                          'xanchor': 'center','yanchor': 'top'},\n                           xaxis = dict(title='Price'),\n                           yaxis =dict(title='Frequency'),\n                          width=700,height=450, template = 'plotly_white')\n\nfig = go.Figure(data = data, layout = layout)\n\niplot(fig)","3eb8617c":"df = pd.read_csv('\/kaggle\/input\/lb-classification\/data.csv')\ntarget_cols = ['COUNTRY','SOURCE','SEX','AGE_CAT']\nage_labels = ['0_18','19_23','24_30','31_40','41_70']\nage_bins = [0,18,23,30,40,70]\nsegment_labels = ['D','C','B','A']\n\nagg_df = df.groupby(['COUNTRY','SOURCE','SEX','AGE']).agg({'PRICE':'sum'}).sort_values('PRICE',ascending=False)\n\nfor i in range(len(agg_df.index.names)):\n    agg_df[str(agg_df.index.names[i])] = [agg_df.index[a][i] for a in range(agg_df.shape[0])]\n    \nagg_df = agg_df.reset_index(drop=True)\nagg_df['AGE_CAT'] = pd.cut(agg_df['AGE'], bins=age_bins, labels=age_labels)\nagg_df['customer_level_based'] = ['_'.join(agg_df[target_cols].iloc[i,].values).upper() for i in range(agg_df[target_cols].shape[0])]\n\nagg_df = agg_df.groupby('customer_level_based').agg({'PRICE':'mean'}).sort_values('PRICE',ascending=False).reset_index()\n\nagg_df['SEGMENT'] = pd.qcut(agg_df['PRICE'], 4, labels= segment_labels)\nagg_df.head()","9989f3c8":"def check_segment(country,source,gender,age):\n        \n    if source == 'ios':\n        source = 'IOS'\n    elif source == 'android':\n        source = 'ANDROID'\n        \n    country = str(country).upper()\n    source = str(source).upper()\n    gender = str(gender).upper()\n    \n    if 0 <= age < 19:\n        age_cat = '0_18'         \n    elif 19 <= age < 23:\n        age_cat = '19_23'\n    elif 24 <= age < 30:\n        age_cat = '24_30'\n    elif 31 <= age < 40:\n        age_cat = '31_40'\n    elif 41 <= age < 70:\n        age_cat = '41_70'\n    \n    cust = country + '_' + source + '_' + gender + '_' + age_cat\n    segment_results = pd.DataFrame([{'Country': country, 'Source': source, 'Sex': gender, 'Age Category': age_cat,\n                                     'Segment':agg_df[agg_df['customer_level_based'] ==  cust]['SEGMENT'].values[0],\n                                     'Price Prediction': round(agg_df[agg_df['customer_level_based'] ==  cust]['PRICE'].values[0],2)}])\n    \n    fig, ax = plt.subplots()    \n    segment_table = plt.table(cellText=segment_results.values, colLabels=segment_results.columns, \n                        colWidths=[0.4]*6, loc='center')\n    segment_table.set_fontsize(26)\n    segment_table.scale(1, 3)\n    plt.axis('off')\n    plt.show()\n\ncheck_segment('tur','android','female',33)","eac04b5a":"check_segment('fra','ios','female',35)","13cad41c":"check_segment('usa','android','male',24)","11a9374b":"check_segment('bra','ios','male',20)","76ebf667":"check_segment('fra','android','female',36)","ee991d37":"<a id = \"1\"><\/a><h1 id=\"Libraries and Utilities\"><span class=\"label label-default\" style=\"background-color:#EAE4DE; border-radius:12px; font-weight: bold; font-family:Calibri; font-size:28px; color:#F97C06; \">Libraries and Utilities<\/span>","c40612b8":"<a id = \"2\"><\/a><h1 id=\"Load and Check Data\"><span class=\"label label-default\" style=\"background-color:#EAE4DE; border-radius:12px; font-weight: bold; font-family:Calibri; font-size:28px; color:#F97C06; \">Load and Check Data<\/span>","af37d5c9":"<a id = \"3\"><\/a><h1 id=\"Data Analysis\"><span class=\"label label-default\" style=\"background-color:#EAE4DE; border-radius:12px; font-weight: bold; font-family:Calibri; font-size:28px; color:#F97C06; \">Data Analysis<\/span>","3b516b04":"<span class=\"label label-default\" style=\"background-color:#EAE4DE; border-radius:12px; font-weight: bold; font-family:Calibri; font-size:28px; color:#F97C06; \">Level Based Classification<\/span>\n\n1. [<span style=\"font-weight: bold; font-family:Calibri; font-size:22px; color:#F97C06; \">Libraries and Utilities<\/span>](#1)\n2. [<span style=\"font-weight: bold; font-family:Calibri; font-size:22px; color:#F97C06; \">Load and Check Data<\/span>](#2)\n3. [<span style=\"font-weight: bold; font-family:Calibri; font-size:22px; color:#F97C06; \">Data Analysis<\/span>](#3)\n4. [<span style=\"font-weight: bold; font-family:Calibri; font-size:22px; color:#F97C06; \">Creating Segments<\/span>](#4)\n5. [<span style=\"font-weight: bold; font-family:Calibri; font-size:22px; color:#F97C06; \">Predictions<\/span>](#5)","9bcb5776":"<a id = \"5\"><\/a><h1 id=\"Predictions\"><span class=\"label label-default\" style=\"background-color:#EAE4DE; border-radius:12px; font-weight: bold; font-family:Calibri; font-size:28px; color:#F97C06; \">Predictions<\/span>","a77be448":"<a id = \"4\"><\/a><h1 id=\"Creating Segments\"><span class=\"label label-default\" style=\"background-color:#EAE4DE; border-radius:12px; font-weight: bold; font-family:Calibri; font-size:28px; color:#F97C06; \">Creating Segments<\/span>"}}