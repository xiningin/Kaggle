{"cell_type":{"9a16c7d5":"code","3f671af4":"code","a584910b":"code","0e715a24":"code","5b6dfb0c":"code","2c64d9bd":"code","7a611fd4":"code","a8d25391":"code","b49eb27a":"code","2becfbce":"code","4c303599":"code","5aa60731":"code","d8d905c3":"code","e76ae0de":"code","c1eaaadc":"code","9affb2e7":"code","649f1dc5":"code","61020298":"code","26dd9e9f":"code","a5a4c5d6":"code","4bf1758c":"code","c27213c8":"code","5baa1a27":"markdown","4d157620":"markdown","55e04509":"markdown","c56869e8":"markdown","ebfeed7a":"markdown","f355a498":"markdown","a5912a41":"markdown","a2d2026d":"markdown","8e6d4513":"markdown","9961ceb7":"markdown","ebfcd6ad":"markdown","9617f36d":"markdown","e87a2c44":"markdown","7a5df574":"markdown","c8899503":"markdown"},"source":{"9a16c7d5":"# linear algebra\nimport numpy as np \n\n# data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandas as pd ","3f671af4":"a = np.array([1, 2, 3])\nb = np.array([(1,2,3), (4,5,6)])\n\nprint(a)\nprint(b)","a584910b":"print('a=')\nprint(a)\nprint(\"a's ndim :\",a.ndim)\nprint(\"a's shape :\",a.shape)\nprint(\"a's size :\",a.size)\nprint(\"a's dtype :\",a.dtype)\nprint(\"a's itemsize :\",a.itemsize)\n\nprint('')\n\nprint('b=')\nprint(b)\nprint(\"b's ndim :\",b.ndim)\nprint(\"b's shape :\",b.shape)\nprint(\"b's size :\",b.size)\nprint(\"b's dtype :\",b.dtype)\nprint(\"b's itemsize :\",b.itemsize)","0e715a24":"a = np.zeros((2,3))\nprint('np.zeros((2,3) :\\n',a)\nprint('\\n')\nb = np.ones((2,3))\nprint('np.ones((2,3)) :\\n',b)\nprint('\\n')\nc = np.empty((2,3))\nprint('np.empty((2,3)) :\\n',c)\nprint('\\n')\nd = np.arange(1, 2, 0.3)    # 0.3 means gap\nprint('np.arange(1, 2, 0.3):\\n',d)\nprint('\\n')\ne = np.linspace(1, 2, 7)    # 7 means how many\nprint('np.linspace(1, 2, 7) :\\n',e)\nprint('\\n')\nf = np.random.random((2,3))\nprint('np.random.random((2,3)) :\\n',f)","5b6dfb0c":"a = np.arange(11, 20)\nprint(a)\nprint('\\n')\n\n\n# -1 means automatically\na = a.reshape(3, -1)\nprint(a)","2c64d9bd":"a = np.array([(1,2,3), (4,5,6)])\nprint('a :\\n',a)\nprint('\\n')\n\nb = np.arange(11, 20)\nb = b.reshape((3,-1))\nprint('b :\\n',b)\n","7a611fd4":"c = np.vstack((a, b))\nprint(\"c :\\n\",c)","a8d25391":"a = a.reshape(3,2)\nprint('a :\\n',a)\nprint('\\n')\nprint('b :\\n',b)","b49eb27a":"d = np.hstack((a,b))\nprint(\"d :\\n\",d)","2becfbce":"e = np.hsplit(d, 5) # Split a into 5\nprint(\"e :\\n\",e)","4c303599":"g = np.vsplit(d, 3)\nprint(\"g :\\n\",g)\n","5aa60731":"print(g[0])\nprint(g[1])\nprint(g[2])","d8d905c3":"# This is usual index in single dimension\n\nbase_data = np.arange(100, 200)\nprint(\"base_data :\\n\",base_data)\n\nprint(\"base_data[10] :\\n\",base_data[10]) ","e76ae0de":"base_data2 = base_data.reshape(10, -1)\nprint(\"base_data2 :\\n\",base_data2)","c1eaaadc":"# This is usual index in multiple dimention\n\nprint(\"base_data2[2] :\\n\",base_data2[2])\nprint(\"base_data2[2, 3] :\\n\",base_data2[2, 3])\nprint(\"base_data2[-1, -1] :\\n\",base_data2[-1, -1])","9affb2e7":"# This is numpy index\n\nevery_five = np.arange(0, 100, 5)\nprint(\"base_data[every_five] :\\n\",base_data[every_five]) # we can put nparray as index\n","649f1dc5":"# This is numpy index\n\na = np.array([(1,2), (10,20)])\nprint(\"a :\\n\",a)\nprint(\"base_data[a] :\\n\",base_data[a])","61020298":"base_data = (np.random.random((5, 5)) - 0.5) * 100 # random values in (0~1), So -0.5 makes negative, *100 makes (-50~50)\nprint(\"base_data :\\n\",base_data)\nprint('\\n')\nprint('\\n')\nprint('\\n')\nprint(\"np.amin(base_data) :\",np.amin(base_data)) # minimum\nprint('\\n')\nprint(\"np.amax(base_data) :\",np.amax(base_data)) # maximum\nprint('\\n')\nprint(\"np.average(base_data) :\",np.average(base_data)) # average\nprint('\\n')\nprint(\"np.sum(base_data) :\",np.sum(base_data)) # sum\nprint('\\n')\nprint(\"np.sin(base_data) :\\n\",np.sin(base_data)) # trigonometric","26dd9e9f":"arr = np.arange(1,20)\nprint('arr :',arr)\narr = arr * arr              #Multiplies each element by itself \nprint(\"Multpiles : \",arr)\narr = arr - arr              #Subtracts each element from itself\nprint(\"Substracts : \",arr)\narr = np.arange(1,20)\narr = arr + arr              #Adds each element to itself\nprint(\"Add : \",arr)\narr = arr \/ arr              #Divides each element by itself\nprint(\"Divide : \",arr)\narr = np.arange(1,20)\narr = arr + 50\nprint(\"Add +50 : \",arr)","a5a4c5d6":"print(\"Sqrt: \",np.sqrt(arr))   #Returns the square root of each element \nprint(\"Exp: \",np.exp(arr))     #Returns the exponentials of each element\nprint(\"Sin: \",np.sin(arr))     #Returns the sin of each element\nprint(\"Cos: \",np.cos(arr))     #Returns the cosine of each element\nprint(\"Log: \",np.log(arr))     #Returns the logarithm of each element\nprint(\"Sum: \",np.sum(arr))     #Returns the sum total of elements in the array\nprint(\"Std: \",np.std(arr))     #Returns the standard deviation of in the array","4bf1758c":"base_data = np.floor((np.random.random((5, 5)) - 0.5) * 100) # floor function is descending\nprint(\"base_data :\\n\",base_data)\nprint(\"\\n\")\nprint(\"base_data.T :\\n\",base_data.T)       # T means Transpose\nprint(\"base_data.transpose() :\\n\",base_data.transpose())\nprint(\"\\n\")\nmatrix_one = np.ones((5, 5))\nprint(\"matrix_one :\\n\",matrix_one)\nprint(\"\\n\")\nminus_one = np.dot(matrix_one, -1) # dot function is multipy\nprint(\"minus_one :\\n\",minus_one)\nprint(\"np.dot(base_data, minus_one) :\\n\",np.dot(base_data, minus_one))","c27213c8":"print(\"random :\\n\",np.random.random(20)); # random numbers are between 0.0 ~ 1.0\n\nprint(\"rand :\\n\",np.random.rand(3, 4)); # rand function makes specified shape\n\nprint(\"randint :\\n\",np.random.randint(0, 100, 20)); # we can make specified range\n\nprint(\"permutation :\\n\",np.random.permutation(np.arange(20))); # disorder","5baa1a27":"<a id=\"four\"><\/a>\n# 4. Index\n<HR>","4d157620":"<a id=\"five\"><\/a>\n\n# 5. Mathematics\n\n<HR>","55e04509":"<a id=\"seven\"><\/a>\n\n# 7. Random Number\n\n<hr>","c56869e8":"<a id=\"one\"><\/a>\n# 1. Ndarray function\n<HR>\n\n* **ndarray.ndim :** the dimension number of the array\n* **ndarray.shape :** the dimension of the array, n rows and m columns is n,m\n* **ndarray.size :** the number of all elements in the array\n* **ndarray.dtype :** the type of the element in the array, such as int32, float64\n* **ndarray.itemsize :** the size of each element in the array, in bytes\n* **ndarray.data :** the buffering for storing the array elements","ebfeed7a":"<hr>\n\n## hsplit","f355a498":"# Numpy\n\n\n* **Numpy** : very useful library for multi-dimensional arrays and matrices\n\n<hr>\n\nHow to use this notebook :\n\nThere is only minimum explanation\n\nThis notebook could be helpful for who want to see how code works right away\n\nPlease upvote if it was helpful. !\n\n<HR>\n","a5912a41":"<hr>\n\n## reshape","a2d2026d":"<a id=\"six\"><\/a>\n\n# 6. Matrix\n<HR>","8e6d4513":"<hr>\n\n## hstack","9961ceb7":"## Reference\n<HR>\n    \n* https:\/\/www.kaggle.com\/abdullahsahin\/numpy-tutorial-for-beginner - NumPy Tutorial For Beginner\n    ","ebfcd6ad":"<a id=\"two\"><\/a>\n# 2. Create a specific array\n<HR>\n    \n* **zeros :** create an array whose elements are all 0\n* **ones :** create an array whose elements are all 1\n* **empty :** create uninitialized data. so the content is undefined.\n* **arange :** create an array by specifying the scope and step-length\n* **linespace :** create an array by specifying the range and the number of elements\n* **random :** generate random numbers","9617f36d":"<hr>\n\n## vsplit","e87a2c44":"<hr>\n\n## vstack","7a5df574":"## Content\n\n1. [Ndarray function](#one)\n2. [Create a specific array](#two)\n3. [Shape and operation](#three)\n4. [Index](#four)\n5. [Mathematics](#five)\n6. [Matrix](#six)\n7. [Random Number](#seven)\n\n<hr>","c8899503":"<a id=\"three\"><\/a>\n# 3. Shape and operation\n<HR>\n\n* **reshape :** generate a new array based on the existing array \n* **vstack :** stack multiple arrays in vertical direction\n* **hstack :** stack multiple arrays in horizontal direction\n* **hsplit :** split the array horizontally\n* **vsplit :** split the array vertically"}}