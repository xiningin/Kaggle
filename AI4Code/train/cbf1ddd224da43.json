{"cell_type":{"ec5de476":"code","1fbda495":"code","199a1006":"code","510c4a1c":"code","03abc314":"code","693e4b68":"code","8eda29cb":"code","43a8798e":"code","28b101c9":"code","96e4f9f6":"code","ac64422a":"code","8ed49773":"code","9b58ceb1":"code","41283422":"code","32747d99":"code","118fe76a":"code","f8547d77":"code","de463c1f":"code","0a876039":"code","bb37b35c":"code","f133cead":"code","38143cec":"code","62e3383c":"code","c41ae0ba":"code","c0d1d68b":"code","3c108cd2":"code","6160e1d6":"code","f57eca69":"code","1b89f17f":"code","fdeb52f7":"code","e5d887f5":"code","e5db4aec":"code","6f6d5380":"code","d9aba863":"code","55108590":"code","f942b5f8":"code","53492f63":"code","96e15057":"code","80b45b74":"code","adc17fe0":"code","18d1c7be":"code","1ef9c320":"code","586eb5d4":"code","cda1e5f0":"code","db6681c7":"code","8e16b7e3":"code","f993968a":"code","17380899":"code","5e466afe":"code","e7c41d43":"code","c6e3c18d":"code","f0e9547c":"code","a37e6e25":"code","23f9748a":"code","0c491efd":"code","072d4480":"code","3261a95f":"code","610f26d5":"code","80754eac":"code","7b1bc5e5":"code","df188ea6":"code","14a40690":"code","ff1fbb94":"code","be768dc8":"markdown","8f25dab1":"markdown","2a8aea54":"markdown","7f6bb725":"markdown","16704541":"markdown","1bf8d55b":"markdown","b727c179":"markdown","bf306bf7":"markdown","c3c31347":"markdown","e1244712":"markdown"},"source":{"ec5de476":"from kaggle.competitions import nflrush\nimport pandas as pd\nimport numpy as np\n#from sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier as RFC\nfrom tqdm import tqdm\n\nenv = nflrush.make_env()","1fbda495":"from sklearn.model_selection import GridSearchCV,train_test_split","199a1006":"df = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2020\/train.csv', low_memory=False)","510c4a1c":"iter_test = env.iter_test()","03abc314":"#new_df=df.groupby(['PlayId','Position']).count()","693e4b68":"#position_count=new_df['GameId'].unstack().fillna(0).astype(int)","8eda29cb":"rusher_df=df[df['NflId']==df['NflIdRusher']]","43a8798e":"#def count_position(rusher_df):\n    #usher_df=rusher_df.merge(position_count, on='PlayId')\n    #rusher_df=rusher_df.rename(columns={'S_x':'S','S_y':'S_position'})\n    #return rusher_df","28b101c9":"def preprocess(df):\n    #StadiumType\u304b\u3089\u304a\u304b\u3057\u306a\u30c7\u30fc\u30bf\u3092\u524a\u9664\n    #df=df[(df['StadiumType']!='Cloudy') & (df['StadiumType']!='Bowl')]\n    #StadiumType\u306e\u6587\u5b57\u5217\u3092\u5c4b\u5916\u5185\u3067\u5206\u3051\u3066\u30ea\u30b9\u30c8\u5316\n    #outdoor=['Outdoor', 'Outdoors','Open','Indoor, Open Roof','Outdoor Retr Roof-Open', 'Oudoor', 'Ourdoor','Retr. Roof-Open','Outdor','Retr. Roof - Open', 'Domed, Open', 'Domed, open', 'Outside','Heinz Field']\n    #indoor=['Indoors', 'RetractableRoof', 'Indoor','Retr. Roof-Closed','Dome', 'Domed, closed','Indoor, Roof Closed', 'Retr. Roof Closed','Closed Dome','Dome, closed','Domed']\n    #StadiumType\u304coutdoor\u306e\u6642\u306b\uff11\u306b\u306a\u308b\u3088\u3046\u306b\u30c0\u30df\u30fc\u5909\u6570\u5316\n    #df['stadiumtype']=(df['StadiumType'].isin(outdoor)*1)\n    #\u5929\u5019\u306e\u60aa\u3044\u6642\u3060\u3051\u30ea\u30b9\u30c8\u5316\n    #rain=['Light Rain', 'Showers','Cloudy with periods of rain, thunder possible. Winds shifting to WNW, 10-20 mph.','Rain', 'Heavy lake effect snow','Snow', 'Cloudy, Rain','Rain shower','Rainy']\n    #\u5929\u6c17\u304c\u60aa\u304f\u306a\u3044\u6642\u306b\uff11\u306b\u306a\u308b\u3088\u3046\u306b\u30c0\u30df\u30fc\u5909\u6570\u5316\n    #df['weather']=(~df['GameWeather'].isin(rain)*1)\n    #\u8eab\u9577\u3092\u30d5\u30a3\u30fc\u30c8\u304b\u3089\u30bb\u30f3\u30c1\u306b\u5909\u63db\n    df['PlayerHeight']= df['PlayerHeight'].apply(lambda x: 12*int(x.split('-')[0])+int(x.split('-')[1]))\n    #\u30b2\u30fc\u30e0\u306e\u7d4c\u904e\u6642\u9593\u3092\u7b97\u51fa\n    df['gameclock']=[ pd.Timedelta(val).total_seconds() for val in df['GameClock']]\n    return df","96e4f9f6":"def add_team_yard(rusher_df):\n    #\u30c1\u30fc\u30e0\u6bce(home\/away\u5225)\u306e\u7372\u5f97\u30e4\u30fc\u30c9\u6570\u306e\u5e73\u5747\u3092\u898b\u308b\n    team_yards_df = rusher_df.groupby(['Team','PossessionTeam']).mean()[['Yards']]\n    team_yards_df = team_yards_df.rename(columns={'Yards':'team_yards'})\n    #rusher\u306e\u307f\u306e\u30c7\u30fc\u30bf\u306b\u30c1\u30fc\u30e0\u6bce\u306e\u5e73\u5747\u7372\u5f97\u30e4\u30fc\u30c9\u6570\u3092\u52a0\u3048\u308b\n    rusher_df = rusher_df.merge(team_yards_df,on='PossessionTeam',how=\"left\")\n    return rusher_df,team_yards_df","ac64422a":"def add_team_score(rusher_df):\n    # \u653b\u6483\u30c1\u30fc\u30e0\u306e\u5f97\u70b9\n    rusher_df.loc[rusher_df[\"Team\"]==\"home\", \"rusherTeamScore\"] = rusher_df[\"HomeScoreBeforePlay\"]\n    rusher_df.loc[rusher_df[\"Team\"]==\"away\", \"rusherTeamScore\"] = rusher_df[\"VisitorScoreBeforePlay\"]\n\n    # \u5b88\u5099\u30c1\u30fc\u30e0\u306e\u5f97\u70b9\n    rusher_df.loc[rusher_df[\"Team\"]==\"home\", \"defenceTeamScore\"] = rusher_df[\"VisitorScoreBeforePlay\"]\n    rusher_df.loc[rusher_df[\"Team\"]==\"away\", \"defenceTeamScore\"] = rusher_df[\"HomeScoreBeforePlay\"]\n\n    # \u5f97\u70b9\u5dee\n    rusher_df.loc[:, \"diffScore\"] = rusher_df[\"rusherTeamScore\"] - rusher_df[\"defenceTeamScore\"]\n    return rusher_df","8ed49773":"def count_yard_to_touchdown(rusher_df):\n    #\u30bf\u30c3\u30c1\u30c0\u30a6\u30f3\u307e\u3067\u4f55\u30e4\u30fc\u30c9\u3042\u308b\u304b\n    rusher_df[\"yardsToTouchdown\"] = rusher_df[\"YardLine\"]\n    rusher_df.loc[rusher_df[\"PossessionTeam\"] == rusher_df[\"FieldPosition\"], \"yardsToTouchdown\"] = 100-rusher_df[\"YardLine\"]\n    return rusher_df","9b58ceb1":"def add_personal_yard(rusher_df):\n    # \u9078\u624b\u6bce\u306e\u5e73\u5747\u7372\u5f97\u30e4\u30fc\u30c9\n    rusher_yards = rusher_df[[\"NflId\", \"Yards\"]].groupby(\"NflId\").mean()[[\"Yards\"]]\n    rusher_yards.dropna(inplace=True)\n    rusher_yards=rusher_yards.rename(columns={'Yards':'PersonalYard'})\n    rusher_df = rusher_df.merge(rusher_yards, on=\"NflId\", how=\"left\")\n    return rusher_df,rusher_yards\n    ","41283422":"def add_average_data(df,rusher_df):\n    offence_position = ['WR', 'TE', 'T', 'QB', 'RB', 'G', 'C', 'FB', 'HB',  'OT', 'OG']\n    df[\"offence\"] = 0\n    df.loc[df[\"Position\"].isin(offence_position), \"offence\"] = 1\n    # \u653b\u6483,\u5b88\u5099\u30c1\u30fc\u30e0\u5e73\u5747 \u4f53\u91cd, \u8eab\u9577, S, A\uff08PlayId\u304c\u30ad\u30fc\uff09\n    offence_av = df.loc[df[\"offence\"]==1, [\"PlayerHeight\", \"PlayerWeight\", \"S\", \"A\", \"PlayId\"]].groupby(\"PlayId\").mean()\n    defence_av = df.loc[df[\"offence\"]==0, [\"PlayerHeight\", \"PlayerWeight\", \"S\", \"A\", \"PlayId\"]].groupby(\"PlayId\").mean()\n    offence_av.columns = ['PlayerHeight_offence', 'PlayerWeight_offence', 'S_offence', 'A_offence']\n    defence_av.columns = ['PlayerHeight_defence', 'PlayerWeight_defence', 'S_defence', 'A_defence']\n    rusher_df = rusher_df.merge(offence_av, on=\"PlayId\", how=\"left\").merge(defence_av, on=\"PlayId\", how=\"left\")\n    return rusher_df\n    ","32747d99":"def feature(df):\n    features=pd.DataFrame(df,columns=['X', 'Y', 'S', 'A', 'Dis','Dir','YardLine', 'Quarter',\n       'gameclock', 'Down', 'Distance','HomeScoreBeforePlay', 'VisitorScoreBeforePlay', 'DefendersInTheBox','PlayerHeight',\n       'PlayerWeight','Temperature', 'Humidity',\n        #'stadiumtype', 'weather', \n        #'C', 'CB', 'DB','DE', 'DL', 'DT', 'FB', 'FS', 'G', 'HB', 'ILB', 'LB', 'MLB', 'NT', 'OG','OLB', 'OT', 'QB', 'RB', 'S_position', 'SAF', 'SS', 'T', 'TE', 'WR',\n        \"yardsToTouchdown\",\n       'PersonalYard','team_yards',\n       \"rusherTeamScore\",\"defenceTeamScore\",\"diffScore\",\n        'PlayerHeight_offence', 'PlayerWeight_offence', 'S_offence', 'A_offence',\n        'PlayerHeight_defence', 'PlayerWeight_defence', 'S_defence', 'A_defence'])\n    return features   ","118fe76a":"#rusher_df=count_position(rusher_df)","f8547d77":"df=preprocess(df)","de463c1f":"rusher_df=preprocess(rusher_df)","0a876039":"rusher_df,team_yards_df=add_team_yard(rusher_df)","bb37b35c":"rusher_df=add_team_score(rusher_df)","f133cead":"rusher_df=count_yard_to_touchdown(rusher_df)","38143cec":"rusher_df,rusher_yards=add_personal_yard(rusher_df)","62e3383c":"rusher_df=add_average_data(df,rusher_df)","c41ae0ba":"rusher_df=rusher_df.dropna()","c0d1d68b":"features=feature(rusher_df)","3c108cd2":"train_mean=features.mean(axis=0)","6160e1d6":"train_std=features.std(axis=0)","f57eca69":"def normalize(features):\n    X=(features-train_mean)\/train_std\n    return X","1b89f17f":"X=normalize(features)","fdeb52f7":"target=pd.Series(rusher_df['Yards'])","e5d887f5":"train_X,test_X,train_y,test_y=train_test_split(X,target,test_size=0.2)","e5db4aec":"features.shape","6f6d5380":"#import warnings\n#warnings.simplefilter('ignore')","d9aba863":"'''\nimport datetime\nprint(datetime.datetime.now())\n\nsearch_params = {\n    'n_estimators'      : [280,300,350,400],\n    'max_features'      : [10,20,'auto'],\n    #'random_state'      : [1],\n    #'n_jobs'            : [4],\n    #'min_samples_split' : [10, 20, 30],\n    'max_depth'         : [20,30,40]}\ngsr = GridSearchCV(RFC(),search_params,cv = 3,n_jobs=-1,verbose=True)\ngsr.fit(train_X, train_y)\n\nprint(datetime.datetime.now())\n'''","55108590":"'''\n#\u6700\u9069\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306e\u6c7a\u5b9a\u4fc2\u6570\nprint(gsr.best_score_)\n#\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306e\u6700\u9069\u6761\u4ef6\u306e\u78ba\u8a8d\nprint(gsr.best_estimator_)\nprint(gsr.best_params_)\n'''","f942b5f8":"#best_estimator\u3067\u51fa\u529b\u3055\u308c\u305f\u6700\u9069\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f7f\u7528\n#\u6c7a\u5b9a\u4fc2\u6570=0.5976363835937214\ndef train_predict(X,target):\n    clf = RFC(bootstrap=True, class_weight=None, criterion='gini',\n                       max_depth=30, max_features=10, max_leaf_nodes=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, n_estimators=400,\n                       n_jobs=None, oob_score=False, random_state=None,\n                       verbose=0, warm_start=False)\n    clf.fit(X, target)\n    return clf\n    ","53492f63":"#from sklearn.model_selection import cross_val_score\n#from bayes_opt import BayesianOptimization","96e15057":"#def randomforest_cv(n_estimators, max_features, max_depth):\n    #val = cross_val_score(\n        #RFC(\n            #n_estimators=int(n_estimators),\n            #max_features=int(max_features),\n            #max_depth=int(max_depth),\n            #criterion = 'entropy'),\n        #train_X, train_y,\n        #scoring = 'r2',\n        #cv = 3,\n        #n_jobs = -1)\n    #return val.mean()\n    ","80b45b74":"#bo = BayesianOptimization(\n#    randomforest_cv,\n#    {'n_estimators': (200, 400),\n#    'max_features': (5, 32),\n#    'max_depth' : (30,50)})","adc17fe0":"#import warnings\n#warnings.simplefilter('ignore')","18d1c7be":"#bo.maximize(init_points=8,n_iter=20)","1ef9c320":"#from matplotlib.pyplot as plt\n#%matplotlib inline","586eb5d4":"#\u30d9\u30a4\u30ba\u6700\u9069\u5316\u306e\u7d50\u679c\u3092\u30d7\u30ed\u30c3\u30c8\n#plot_bo(bo)\n#plt.legend()\n#plt.grid()\n#plt.show()","cda1e5f0":"#bo.max['params']","db6681c7":"#bo.max['target']","8e16b7e3":"#\u30d9\u30a4\u30ba\u6700\u9069\u5316\u3067\u51fa\u529b\u3055\u308c\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u56db\u6368\u4e94\u5165\u3067\u4e38\u3081\u308b\n#'max_depth': 48.704309793515755,\n#'max_features': 5.671956856631306,\n#'min_samples_split': 6.739604788678628,\n#'n_estimators': 248.58715626809243\n#\u6c7a\u5b9a\u4fc2\u6570\u306f0.673114259554454\n\n#def train_predict(X,target):\n#    clf = RFC(n_estimators=249,\n#              max_features=6,\n#              max_depth=49,\n#              min_samples_split=7)\n#    clf.fit(X,target)\n#    return clf","f993968a":"#RandomForestClassier\u3067\u306f\u306a\u304fCatBoostClassifier\u306b\u6311\u6226\u3057\u305f\u3044\n#from catboost import CatBoostClassifier as CBC","17380899":"#def train_predict(X,target):\n    #clf=CBC()\n    #clf.fit(X,target)\n    #return clf","5e466afe":"clf=train_predict(train_X,train_y)","e7c41d43":"#\u8aac\u660e\u5909\u6570\u306e\u5f71\u97ff\u306e\u78ba\u8a8d\nfeat_imp=pd.DataFrame(clf.feature_importances_,index=X.columns)\nfeat_imp.sort_values(0,ascending=False)","c6e3c18d":"score_test=np.array([(i >= test_y)*1 for i in range(-99,100)])","f0e9547c":"pred_y=clf.predict(test_X)","a37e6e25":"from scipy.stats import norm ","23f9748a":"yard = np.arange(-99, 100) \npred_prob = [norm.cdf(yard, loc=i, scale=target.std()) for i in pred_y] ","0c491efd":"import matplotlib.pyplot as plt\n\n#pred_prob\u3092dataframe\u306b\u3059\u308b\npred_prob2=pd.DataFrame(pred_prob)\n\n#\u7d2f\u7a4d\u78ba\u7387\u66f2\u7dda\u306e\u8868\u793a\nplt.plot(yard,pred_prob2.mean())\nplt.show()","072d4480":"#score=np.array([(i >= pred_y)*1 for i in range(-99,100)])","3261a95f":"c=((pred_prob - score_test.T)**2).sum().sum()\/(199*len(pred_prob))\nc","610f26d5":"train_df=rusher_df.iloc[:0,:]","80754eac":"#yard=['Yards' + str(i) for i in range(-99,100)]","7b1bc5e5":"for (test_df, sample_prediction_df) in tqdm(iter_test):\n    #new_df=test_df.groupby(['PlayId','Position']).count()\n    #position_count=new_df['GameId'].unstack().fillna(0).astype(int)\n    rusher_df=test_df[test_df['NflId']==test_df['NflIdRusher']]\n    rusher_df=preprocess(rusher_df)\n    test_df=preprocess(test_df)\n    #test_df=count_position(test_df)\n    rusher_df=rusher_df.merge(rusher_yards,  on=\"NflId\", how=\"left\")\n    rusher_df = rusher_df.merge(team_yards_df,on='PossessionTeam',how=\"left\")\n    rusher_df=add_team_score(rusher_df)\n    rusher_df=count_yard_to_touchdown(rusher_df)\n    rusher_df=add_average_data(test_df,rusher_df)\n    rusher_df=pd.concat([train_df,test_df],sort=False)\n    test_feature=feature(rusher_df)\n    test_feature=test_feature.fillna(0)\n    test_X=normalize(test_feature)\n    pred_y=clf.predict(test_X)\n    pred_y=np.round(pred_y)\n    pred_prob =norm.cdf(yard, loc=pred_y[0], scale=target.std()) \n    sample_prediction_df.iloc[0,:]=pred_prob\n    env.predict(sample_prediction_df)","df188ea6":"sample_prediction_df","14a40690":"env.write_submission_file()","ff1fbb94":"import os\nprint([filename for filename in os.listdir('\/kaggle\/working') if '.csv' in filename])","be768dc8":"### GridSeach\u3067\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0(\u65ad\u5ff5\uff09","8f25dab1":"# \u30e2\u30b8\u30e5\u30fc\u30eb\u5c0e\u5165","2a8aea54":"# \u30e2\u30c7\u30eb\u306e\u7cbe\u5ea6\u306e\u78ba\u8a8d","7f6bb725":"## \u6b63\u898f\u5316","16704541":" # \u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f","1bf8d55b":"## \u3079\u30a4\u30ba\u6700\u9069\u5316\u3067\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\uff08\u6642\u9593\u304c\u304b\u304b\u308a\u3059\u304e\u308b\u306e\u3067\u65ad\u5ff5\uff09","b727c179":"## Yards\u306e\u7d2f\u7a4d\u78ba\u7387\u5206\u5e03\u3092\u898b\u308b","bf306bf7":"# \u4e88\u6e2c","c3c31347":"## RandomForest\u3067\u8a13\u7df4","e1244712":"# \u524d\u51e6\u7406"}}