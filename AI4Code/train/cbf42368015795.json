{"cell_type":{"835c4d27":"code","a95ad945":"code","eea6d900":"code","458d5651":"code","90092594":"code","d4999e7e":"code","737358d2":"code","fe1c4f6a":"code","7c3a04e3":"code","c1cdc846":"code","e23a43e0":"code","ff109521":"code","712f274c":"code","b13bceb9":"code","2b131324":"code","70cf5468":"code","2b94314b":"code","958b0bb7":"code","d53cd752":"code","47cc26a9":"code","962d2002":"code","3136d9ac":"code","dff8b8bb":"code","7cc0084a":"code","23485575":"code","96632bd5":"code","fe206614":"code","4f7e7dfd":"code","f4cce3d6":"code","d67dc9a4":"code","36982eef":"code","f074df98":"code","da5d3c51":"code","dd63a946":"code","88fb23b5":"code","40aea3fb":"code","c6ac5327":"code","772c4583":"code","13cfb888":"code","48de416f":"code","91f7598e":"code","1b46e991":"code","42c34756":"code","5337bf49":"code","54d56e3f":"code","a8553a53":"code","829cbf2b":"code","0d14ceb8":"code","fa23865c":"code","3b91a95f":"code","5d72864f":"code","44963fa1":"code","31d3bab9":"code","ae57b7bd":"code","b0545270":"code","95d549df":"code","7600de2e":"code","8250c160":"markdown","b3995e9d":"markdown","a52f2d69":"markdown","a4a2ce5d":"markdown","872f5828":"markdown","a1a4348f":"markdown","cf07727b":"markdown","7a1445ff":"markdown","5e3d8bf9":"markdown","606b6039":"markdown","b910a972":"markdown","0eb0bee2":"markdown","768926fd":"markdown","84d71dcf":"markdown","79faa59a":"markdown","25c91f73":"markdown","3bb99fdd":"markdown","ae3ed96a":"markdown","c92a9d79":"markdown"},"source":{"835c4d27":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a95ad945":"%matplotlib inline","eea6d900":"train = pd.read_csv('\/kaggle\/input\/predict-demand\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/predict-demand\/test.csv')","458d5651":"train.head()","90092594":"train.tail()","d4999e7e":"# All values after row 6479 are NaN.\ntrain  = train.drop(train.index[6480:])\ntrain.tail()","737358d2":"train.describe()","fe1c4f6a":"train.info()","7c3a04e3":"pd.DataFrame(train.groupby(['brand', 'container'], axis =0, as_index=True).count()['id'])","c1cdc846":"gazoza = train[train['brand'] == 'gazoza'].reset_index(drop=True)","e23a43e0":"gazoza.info()","ff109521":"gazoza[gazoza['container'].isna()]\n# These are the values where the container column had null vlaues\n# We will find out which container value amoung \"glass, plastic, can\" is missing and fill accordingly","712f274c":"# Print all the values for the said dates and cities to see which container types are missing\ngazoza[((gazoza['date'] == '31\/07\/13') & (gazoza['city'] == 'Larisa')) |\n       ((gazoza['date'] == '30\/09\/15') & (gazoza['city'] == 'Patra')) |\n       ((gazoza['date'] == '31\/07\/16') & (gazoza['city'] == 'Larisa')) |\n       ((gazoza['date'] == '31\/08\/17') & (gazoza['city'] == 'Thessaloniki')) |\n       ((gazoza['date'] == '30\/09\/17') & (gazoza['city'] == 'Patra'))]","b13bceb9":"# Fill in the missing contiainer types\ngazoza.at[340, 'container'] = 'can'\ngazoza.at[798, 'container'] = 'glass'\ngazoza.at[984, 'container'] = 'glass'\ngazoza.at[1214, 'container'] = 'plastic'\ngazoza.at[1229, 'container'] = 'glass'","2b131324":"# No missing container types anymore\ngazoza[gazoza['container'].isna()]","70cf5468":"# Check the missing capacity values\ngazoza[gazoza['capacity'].isna()]","2b94314b":"# Fill in the missing capacity types\ngazoza.at[368, 'capacity'] = '1.5lt'\ngazoza.at[648, 'capacity'] = '500ml'\ngazoza.at[962, 'capacity'] = '500ml'","958b0bb7":"# No more missing capacity values\ngazoza[gazoza['capacity'].isna()]","d53cd752":"gazoza_test = test[test['brand'] == 'gazoza'].reset_index(drop=True)\ngazoza_test.drop(['id','lat','long','brand'], axis=1, inplace=True)\ngazoza_test['date'] = pd.to_datetime(gazoza_test['date'])\ngazoza_test.head()","47cc26a9":"gazoza_test.info()","962d2002":"# Check the missing capacity values\ngazoza_test[gazoza_test['capacity'].isna()]","3136d9ac":"gazoza_test.at[208, 'capacity'] = '330ml'\ngazoza_test.at[209, 'capacity'] = '500ml'","dff8b8bb":"pd.DataFrame(gazoza.groupby(['city', 'lat', 'long', 'shop'], axis =0, as_index=True).count()['id'])","7cc0084a":"# Drop some columns\ngazoza.drop(['id','lat','long','brand'], axis=1, inplace=True)","23485575":"# Change date column to date type\ngazoza['date'] = pd.to_datetime(gazoza['date'])","96632bd5":"gazoza.head()","fe206614":"sns.lineplot(x=gazoza['date'], y=gazoza['quantity']).set_title('Quantity Sold Over Time')","4f7e7dfd":"sns.scatterplot(x=gazoza['pop'], y=gazoza['quantity']).set_title('Quantity Sold vs. Population')","f4cce3d6":"sns.barplot(x=gazoza['city'], y=gazoza['pop']).set_title('Population by City')","d67dc9a4":"athens_gazoza = gazoza[gazoza['city'] == 'Athens']\nsns.lineplot(x=athens_gazoza['date'], y=athens_gazoza['pop']).set_title('Athens Population Over Time')","36982eef":"sns.scatterplot(x=athens_gazoza['pop'], y=athens_gazoza['quantity']).set_title('Quantity Sold vs. Athens Population')","f074df98":"sns.lineplot(x=athens_gazoza['date'], y=athens_gazoza['quantity']).set_title('Athens Quantity Over Time')","da5d3c51":"sns.barplot(x=gazoza['shop'], y=gazoza['quantity']).set_title('Comparing the Sales in Different Shops')\n\n# Athens - shop_3\n#        - shop_1\n# Irakleion - shop_2\n# Larisa - shop_5\n# Patra - shop_6\n# Thessaloniki - shop_4","dd63a946":"plt.figure(figsize=(8, 6), dpi=80)\nsns.barplot(x=gazoza['city'], y=gazoza['quantity'], hue = gazoza['container']).set_title('Quantity Sold in Each City by Container Type')","88fb23b5":"plt.figure(figsize=(8, 6), dpi=80)\nsns.scatterplot(x=gazoza['price'], y=gazoza['quantity'], hue=gazoza['container']).set_title('Quantity Sold vs Price')","40aea3fb":"plt.figure(figsize=(8, 6), dpi=80)\nsns.lineplot(data=gazoza, x='date', y='price', hue='container').set_title('Gazoza Price over Time by Container Type')","c6ac5327":"# Assign Train and Test split.\nX_train = gazoza.loc[:,gazoza.columns != 'quantity']\nX_test = gazoza_test.loc[:,gazoza_test.columns != 'quantity']\ny_train = gazoza.loc[:,gazoza.columns == 'quantity']\ny_test = gazoza_test.loc[:,gazoza_test.columns == 'quantity']","772c4583":"# Split the date feature into year, month and date\n\nX_train['year'] = X_train['date'].apply(lambda d : d.year)\nX_train['month'] = X_train['date'].apply(lambda d : d.month)\nX_train['day'] = X_train['date'].apply(lambda d : d.day)\n\n\nX_test['year'] = X_test['date'].apply(lambda d : d.year)\nX_test['month'] = X_test['date'].apply(lambda d : d.month)\nX_test['day'] = X_test['date'].apply(lambda d : d.day)\n\n\n# X_train.groupby('year').mean()['price'].plot().set_title(\"Price over Time\")","13cfb888":"X_train.head()","48de416f":"# Drop the date feature\nX_train.drop('date', axis=1, inplace=True)\nX_test.drop('date', axis=1, inplace=True)","91f7598e":"# Remove the sufix of the values of the capacity column\nX_train['capacity'] = X_train['capacity'].map(lambda x: str(x)[:-2])\nX_test['capacity'] = X_test['capacity'].map(lambda x: str(x)[:-2])\n\n# Change the capacity values into numeric\nX_train['capacity'] = pd.to_numeric(X_train['capacity'])\nX_test['capacity'] = pd.to_numeric(X_test['capacity'])","1b46e991":"# Convert the leters to ml\n\nto_scale_index = X_train[X_train['capacity'] == 1.5]['capacity'].index\nfor x in to_scale_index:\n    X_train.at[x, 'capacity'] = X_train.at[x, 'capacity'] * 1000\n    \nto_scale_index = X_test[X_test['capacity'] == 1.5]['capacity'].index\nfor x in to_scale_index:\n    X_test.at[x, 'capacity'] = X_test.at[x, 'capacity'] * 1000","42c34756":"X_train.head()","5337bf49":"X_test.head()","54d56e3f":"X_train = pd.get_dummies(X_train, columns = ['city', 'shop', 'container'], drop_first=True)\nX_test = pd.get_dummies(X_test, columns = ['city', 'shop', 'container'], drop_first=True)","a8553a53":"X_train.shape","829cbf2b":"# Scale all the variables variables\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nscaler.fit(X_train)","0d14ceb8":"X_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","fa23865c":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Activation, Dense","3b91a95f":"demand_model = Sequential()","5d72864f":"demand_model.add(Dense(17, activation = 'relu'))\ndemand_model.add(Dense(10, activation = 'relu'))\ndemand_model.add(Dense(10, activation = 'relu'))\ndemand_model.add(Dense(10, activation = 'relu'))\n\ndemand_model.add(Dense(1))","44963fa1":"demand_model.compile(optimizer='adam', loss='mse')","31d3bab9":"demand_model.fit(x=X_train, y=y_train, epochs=200, verbose = 1)","ae57b7bd":"pd.DataFrame(demand_model.history.history).plot().set_title('Loss over Epochs')","b0545270":"training_score = demand_model.evaluate(X_train, y_train, verbose=0)\ntest_score = demand_model.evaluate(X_test, y_test, verbose=0)","95d549df":"training_score","7600de2e":"test_score","8250c160":"As we can see below, the factors *'lat', 'long',* and *'shop'* are practically replecating the same information. So we can reduce the dimentionality of the data by keeping only one them.","b3995e9d":"### Clean up the data","a52f2d69":"### Choose features to keep","a4a2ce5d":"The quantity sold looks very seasonal. Although the sales are gradually decreasing over time, there are persistent peaks and troughs that appear year after year.","872f5828":"Clean the test data.","a1a4348f":"The quantities sold seem to have a higher variance with high population numbers.","cf07727b":"## Exploratory Data Analysis","7a1445ff":"We see that the population between the different cities is very different. So separating the poplations by city may help us see some patterns.\n\nLet's see examine the data from Athens.","5e3d8bf9":"There are some null values. The container null values might be easy to fill since there are only three possible values.","606b6039":"## Create NN Model","b910a972":"There are multiple brands, but for this task, we will only forcus on the Gazoza brand.","0eb0bee2":"In all cities, we see that the can is the highest selling container type and the plastic is the lowest selling container type.","768926fd":"The quantity sold in Athens also looks seasonal. The sales have been decreasing over time, but the the peaks are still consistent. The decrease in quantities sold could be related to population decrease.","84d71dcf":"Let's examine the sales between the three different types containers.","79faa59a":"Since the feature *'shop'* has no missing values, we'll drop *'lat'*, *'long'*.\n\nWe will also drop the brand column since all of them are just *'gazoza'*.\n\nThe *'id'* does not add any value too.","25c91f73":"## Train-Test Preparation","3bb99fdd":"The scatter plot of the quantity sold vs population does not seen to yield much information.","ae3ed96a":"We can see that the population of Athens has been decreasing over the years.\n\nLet's see how to population related to the sales.","c92a9d79":"We can notice a generally negative relationship between the price and quantity."}}