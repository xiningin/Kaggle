{"cell_type":{"69244be5":"code","0d9e41e0":"code","c3ca95ed":"code","f388a70e":"code","b5530738":"code","590716ee":"code","5eb7adae":"code","c57206d8":"code","95bbc672":"code","8dd6ad0e":"code","576fbcf7":"code","1d9ec10c":"code","487a4c41":"code","38d2a79c":"code","a8e5a0fa":"code","99968094":"code","fdf3efcb":"code","2422542d":"code","500727c7":"code","92676dc5":"code","cb9c5354":"code","257f68aa":"code","92b3896a":"code","2a634059":"code","e52a743b":"code","c1d27397":"code","c17858da":"code","a6db9a52":"code","7cb44db5":"code","9109679a":"code","fba7725a":"code","3c824017":"code","bc947916":"code","e1c2de06":"code","b187f170":"code","4cba3d2f":"code","20c9c9d8":"code","1c645966":"code","1c9be711":"markdown","df7ce574":"markdown","b00275ad":"markdown","4e4d198b":"markdown","2d5c53a5":"markdown"},"source":{"69244be5":"# import libraries\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.impute import KNNImputer\nfrom pandas_profiling import ProfileReport \nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import f_classif # use this for classification tasks\nfrom sklearn.ensemble import RandomForestClassifier\n\n%matplotlib inline\n","0d9e41e0":"# load the data\ndf = pd.read_csv('..\/input\/ckdisease\/kidney_disease.csv')\ndf.head(10)","c3ca95ed":"#exploration data shape \ndf.shape","f388a70e":"df.columns.values","b5530738":"df.drop('id', axis=1, inplace=True)","590716ee":"df.info()","5eb7adae":"df.head().T\n","c57206d8":"df[['htn','dm','cad','pe','ane']] = df[['htn','dm','cad','pe','ane']].replace(to_replace={'yes':1,'no':0})","95bbc672":"df[['rbc','pc']] = df[['rbc','pc']].replace(to_replace={'normal':0,'abnormal':1})","8dd6ad0e":"df[['ba','pcc']] = df[['ba','pcc']].replace(to_replace={'notpresent':0,'present':1})","576fbcf7":"df[['appet']] = df[['appet']].replace(to_replace={'good':1,'poor':0,'no':np.nan})","1d9ec10c":"df[\"classification\"] = [1 if i == \"ckd\" else 0 for i in df[\"classification\"]]","487a4c41":"df.head().T\n","38d2a79c":"df.dtypes","a8e5a0fa":"df.pcv = pd.to_numeric(df.pcv, errors='coerce')\ndf.pc = pd.to_numeric(df.pc, errors='coerce')\ndf.dm = pd.to_numeric(df.dm, errors='coerce')\ndf.cad = pd.to_numeric(df.cad, errors='coerce')\ndf.wc = pd.to_numeric(df.wc, errors='coerce')\ndf.rc = pd.to_numeric(df.rc, errors='coerce')\n","99968094":"#describe data \ndf.describe().T","fdf3efcb":"sum(df.duplicated())","2422542d":"df.isna().sum().sort_values()","500727c7":"((df.isnull().sum()\/df.shape[0])*100).sort_values(ascending=False).plot(kind='bar', figsize=(10,10))","92676dc5":"#show missing data\nimport missingno as msno\n\nmsno.matrix(df)\nplt.show()","cb9c5354":"plt.style.use(\"seaborn-dark-palette\")\n","257f68aa":"sns.countplot(df.classification)\nplt.xlabel('Chronic Kidney Disease')\nplt.title(\"patients Classification\",fontsize=15)\nplt.show()\n","92b3896a":"# blood pressure graph\nsns.factorplot(data=df, x='bp', kind= 'count',size=6,aspect=2)\nplt.xlabel('Chronic Kidney Disease')\nplt.title(\"blood pressure graph\",fontsize=15)\nplt.show()\n","2a634059":"#density-frequency graph\n\nsns.factorplot(data=df, x='sg', kind= 'count',size=6,aspect=2)\nplt.xlabel('Chronic Kidney Disease')\nplt.title(\"density-frequency graph\",fontsize=15)\nplt.show()","e52a743b":"#sugar-frequency graph\nsns.factorplot(data=df, x='su', kind= 'count',size=6,aspect=2)\nplt.xlabel('Chronic Kidney Disease')\nplt.title(\"sugar-frequency graph\",fontsize=15)\nplt.show()","c1d27397":"# packed cell volume grahp\nsns.factorplot(data=df, x='age', kind= 'count',aspect=5)\nplt.xlabel('Chronic Kidney Disease')\nplt.title(\"packed cell volume grahp\",fontsize=15)\nplt.show()","c17858da":"sns.pairplot(df )\n","a6db9a52":"#correlation map\nf,ax = plt.subplots(figsize=(15, 15))\nsns.heatmap(df.corr(),annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.title('Correlations between different predictors')\nplt.show()","7cb44db5":"df2 = df.dropna(axis = 0)\nprint(f\"Before dropping all NaN values: {df.shape}\")\nprint(f\"After dropping all NaN values: {df2.shape}\")","9109679a":"df2.head().T","fba7725a":"X = df2.drop(['classification', 'sg', 'appet', 'rc', 'pcv', 'hemo', 'sod'], axis = 1)\ny = df2['classification']","3c824017":"X.columns\n","bc947916":"from sklearn.model_selection import train_test_split\n","e1c2de06":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)\n","b187f170":"# Import Libraries\nfrom sklearn.ensemble import RandomForestClassifier\n#----------------------------------------------------\n\n#----------------------------------------------------\n#Applying RandomForestClassifier Model \n\n'''\nensemble.RandomForestClassifier(n_estimators='warn\u2019, criterion=\u2019gini\u2019, max_depth=None,\n                                min_samples_split=2, min_samples_leaf=1,min_weight_fraction_leaf=0.0,\n                                max_features='auto\u2019,max_leaf_nodes=None,min_impurity_decrease=0.0,\n                                min_impurity_split=None, bootstrap=True,oob_score=False, n_jobs=None,\n                                random_state=None, verbose=0,warm_start=False, class_weight=None)\n'''\n\nRandomForestClassifierModel = RandomForestClassifier(criterion = 'gini',n_estimators=20,max_depth=2,random_state=33) #criterion can be also : entropy \nRandomForestClassifierModel.fit(X_train, y_train)\n\n#Calculating Details\nprint('RandomForestClassifierModel Train Score is : ' , RandomForestClassifierModel.score(X_train, y_train))\nprint('RandomForestClassifierModel Test Score is : ' , RandomForestClassifierModel.score(X_test, y_test))\n","4cba3d2f":"\n#Calculating Prediction\ny_pred = RandomForestClassifierModel.predict(X_test)\ny_pred_prob = RandomForestClassifierModel.predict_proba(X_test)\nprint('Predicted Value for RandomForestClassifierModel is : ' , y_pred[:10])\nprint('Prediction Probabilities Value for RandomForestClassifierModel is : ' , y_pred_prob[:10])","20c9c9d8":"#Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ny_pred=RandomForestClassifierModel.predict(X_test)\ny_true=y_test\ncm=confusion_matrix(y_true,y_pred)\n\n#Confusion Matrix on Heatmap\nf,ax=plt.subplots(figsize=(5,5))\nsns.heatmap(cm,annot=True,linewidths=0.5,linecolor=\"red\",fmt=\".0f\",ax=ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.title(\"GBCModel Matrix\")\nplt.show()","1c645966":"\n# Saving the model\nimport pickle\npickle.dump(RandomForestClassifierModel, open('kidney.pkl', 'wb'))","1c9be711":"# EDA","df7ce574":"# Data contains","b00275ad":"df.age.value_counts().sort_values()\n","4e4d198b":"1. age - age\n2. bp - blood pressure\n3. sg - specific gravity\n4. al - albumin\n5. su - sugar\n6. rbc - red blood cells\n7. pc - pus cell\n8. pcc - pus cell clumps\n9. ba - bacteria\n10. bgr - blood glucose random\n11. bu - blood urea\n12. sc - serum creatinine\n13. sod - sodium\n14. pot - potassium\n15. hemo - haemoglobin\n16. pcv - packed cell volume\n17. wc - white blood cell count\n18. rc - red blood cell count\n19. htn - hypertension\n20. dm - diabetes mellitus\n21. cad - coronary artery disease\n22. appet - appetite\n23. pe - pedal edema\n24. ane - anemia\n25. lassification - class\n\n# Feature description\n\n1. Age(numerical) --> age in years\n2. Blood Pressure(numerical) bp in mm\/Hg\n3. Specific Gravity(nominal) sg - (1.005,1.010,1.015,1.020,1.025)\n4. Albumin(nominal)al - (0,1,2,3,4,5)\n5. Sugar(nominal) su - (0,1,2,3,4,5)\n6. Red Blood Cells(nominal) rbc - (normal,abnormal)\n7. Pus Cell (nominal)pc - (normal,abnormal)\n8. Pus Cell clumps(nominal)pcc - (present,notpresent)\n9. Bacteria(nominal) ba - (present,notpresent)\n10. Blood Glucose Random(numerical) bgr in mgs\/dl\n11. Blood Urea(numerical) bu in mgs\/dl\n12. Serum Creatinine(numerical) sc in mgs\/dl\n13. Sodium(numerical) sod in mEq\/L\n14. Potassium(numerical) pot in mEq\/L\n15. Haemoglobin(numerical) hemo in gms\n16. Packed Cell Volume(numerical)\n17. White Blood Cell Count(numerical) wc in cells\/cumm\n18. Red Blood Cell Count(numerical) rc in millions\/cmm\n19. Hypertension(nominal) htn - (yes,no)\n20. Diabetes Mellitus(nominal) dm - (yes,no)\n21. Coronary Artery Disease(nominal) cad - (yes,no)\n22. Appetite(nominal) ppet - (good,poor)\n23. Pedal Edema(nominal) pe - (yes,no)\n24. Anemia(nominal)ane - (yes,no)\n25. Class (nominal) class - (ckd,notckd)","2d5c53a5":"# DATA VISUALIZATION"}}