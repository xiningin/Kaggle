{"cell_type":{"65563007":"code","df2c9ed3":"code","026a6d99":"code","0691eb37":"code","7e3556df":"code","4ba80ebb":"code","0ff59828":"code","f4ecbdef":"code","7f8b3a32":"code","0c19df4b":"code","9307b2f3":"code","c584fe8d":"code","cad55ce8":"code","e63b1c75":"code","eaa98710":"code","1971f08a":"code","b8c23609":"code","23dc545c":"code","3266de00":"code","50accae9":"code","f68cad14":"code","1dee8816":"code","e01279bc":"code","15c4b439":"code","2c6e663b":"code","622dd8c3":"code","61e53bae":"code","926d0bed":"code","a752f7d2":"code","716b1bcf":"code","943a9fd0":"code","28075b79":"code","26b2cd6a":"code","a7bdcc5e":"code","9c13e037":"code","7a87e2e6":"code","a6ff7a4f":"code","efaf2476":"code","20745625":"code","8ee89a2c":"code","58d1bc3e":"code","4c16a439":"code","acc23af0":"code","6fb1cd51":"code","e9e997fe":"code","07092c55":"code","2260e90d":"code","4e4f1f73":"code","a311d63e":"code","0bedd8c1":"code","54776718":"code","51f6922f":"code","f0353b47":"code","9d607b94":"code","8d46bdba":"code","0e058fae":"code","2cbd5ef6":"code","91989de5":"markdown","56ca9e6b":"markdown","df7b4527":"markdown","ffc84646":"markdown","aab11976":"markdown","ca831caf":"markdown","867c50ae":"markdown","e2c0696e":"markdown","6709347c":"markdown","a9108eaf":"markdown","65c346c4":"markdown","93fe91fb":"markdown","07d69ae4":"markdown","07cec1de":"markdown","c96a199c":"markdown","5f6e70d3":"markdown","832ee716":"markdown","5299457f":"markdown","a8f84228":"markdown","94c558bb":"markdown","d68e72d4":"markdown","e0af1fd5":"markdown","5b213ae1":"markdown","fb52e962":"markdown","c0bb893c":"markdown","42919b5a":"markdown","d4de4c71":"markdown","d4ca1c69":"markdown","1e3fbeb0":"markdown","dea1f331":"markdown","5f0d1559":"markdown"},"source":{"65563007":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","df2c9ed3":"sns.set(rc = {\"figure.figsize\": (10, 8)})","026a6d99":"data_price = pd.read_csv(\"..\/input\/pre-owned-cars\/cars_sampled.csv\")\ncars = data_price.copy()\ncars.info()\ncars.head()","0691eb37":"cars.describe()","7e3556df":"# To set float values upto 3 decimal places\npd.set_option(\"display.float_format\", lambda x: \"%.3f\" % x)\ncars.describe()","4ba80ebb":"cols = [\"name\", \"dateCrawled\", \"dateCreated\", \"postalCode\", \"lastSeen\"]\ncars = cars.drop(columns = cols, axis =1)","0ff59828":"cars.drop_duplicates(keep=\"first\", inplace=True)","f4ecbdef":"cars.isnull().sum()","7f8b3a32":"yearwise = cars[\"yearOfRegistration\"].value_counts().sort_index()\nprint(cars[\"yearOfRegistration\"].describe())\nprint(\"yearOfRegistration Greater than 2018:\", sum(cars[\"yearOfRegistration\"] > 2018))\nprint(\"yearOfRegistration Lesser than 2018:\",  sum(cars[\"yearOfRegistration\"] < 1950))","0c19df4b":"sns.regplot(x=\"yearOfRegistration\", y=\"price\", scatter=True, fit_reg=False, data=cars)","9307b2f3":"cars = cars.dropna(axis = 0)\ncars.isnull().sum()","c584fe8d":"price_count = cars[\"price\"].value_counts().sort_index()\ncars[\"price\"].describe()\nprint(\"Price Greater than 150000:\",sum(cars[\"price\"] > 150000))\nprint(\"Price Lesser than 100:\",sum(cars[\"price\"] < 100))\nsns.distplot(cars[\"price\"])","cad55ce8":"power_count = cars[\"powerPS\"].value_counts().sort_index()\ncars[\"powerPS\"].describe()\nprint(\"powerPS greater than: \",sum(cars[\"powerPS\"] > 500))\nprint(\"powerPS smaller than: \",sum(cars[\"powerPS\"] < 10))","e63b1c75":"fig, (axis1, axis2) = plt.subplots(1,2,figsize=(14,8))\n\nsns.boxplot(cars[\"powerPS\"], ax=axis1)\nsns.regplot(x=\"powerPS\", y=\"price\", scatter=True, fit_reg=False, data=cars, ax=axis2)","eaa98710":"cars = cars[\n    (cars.yearOfRegistration >= 1950)\n    & (cars.yearOfRegistration <= 2018)\n    & (cars.price <= 150000)\n    & (cars.price >= 100)\n    & (cars.powerPS <= 500)\n    & (cars.powerPS >= 10)\n]","1971f08a":"cars[\"monthOfRegistration\"] \/= 12","b8c23609":"cars[\"Age\"] = (2018-cars[\"yearOfRegistration\"])+cars[\"monthOfRegistration\"]\ncars[\"Age\"] = round(cars[\"Age\"], 2)\ncars[\"Age\"].describe()","23dc545c":"#Since age is deployed therefor removing\ncols1 = [\"yearOfRegistration\", \"monthOfRegistration\"]\ncars = cars.drop(columns = cols1, axis = 1)\ncars1 = cars.copy()\ncars1.head()","3266de00":"# Age\nsns.distplot(cars[\"Age\"])","50accae9":"# Price\nfig, (axis1, axis2) = plt.subplots(1,2,figsize=(14,8))\n\nsns.distplot(cars[\"price\"], ax=axis1)\nsns.boxplot(y=cars[\"price\"], ax=axis2, palette=\"Set2\")","f68cad14":"fig, (axis1, axis2) = plt.subplots(1,2,figsize=(14,8))\n\nsns.boxplot(y=cars[\"Age\"], ax=axis1)\naxis1.set_title(\"BoxPlot: Price vs Age\")\n\nsns.regplot(x=\"Age\", y=\"price\", scatter=True, fit_reg=False, data=cars1, ax=axis2)\naxis2.set_title(\"ScatterPlot: Price vs Age\")","1dee8816":"# PowerPS\nfig, (axis1, axis2) = plt.subplots(1,2,figsize=(15,9))\n\nsns.distplot(cars[\"powerPS\"], ax=axis1)\nsns.boxplot(y=cars[\"powerPS\"], ax=axis2, palette=\"Set1\")","e01279bc":"sns.regplot(x=\"powerPS\", y=\"price\", scatter=True, fit_reg=False, data=cars1, scatter_kws={\"color\": \"purple\"})","15c4b439":"#Seller\nprint(cars[\"seller\"].value_counts())\nprint(pd.crosstab(cars[\"seller\"], columns=\"count\", normalize=True))\n\nfig, (axis1, axis2) = plt.subplots(1,2,figsize=(14,8))\n\nsns.countplot(x=\"seller\", data=cars1, ax=axis1, palette=\"Set2\")\nsns.boxplot(x=\"seller\", y=\"price\", data=cars1, ax=axis2)\n#Fewer cars have commercial which is innsignificant\n#does not affect price as seen in boxplot\ncars1 = cars1.drop(columns=[\"seller\"], axis=1)","2c6e663b":"# Offertype\nprint(cars[\"offerType\"].value_counts())\nprint(pd.crosstab(cars[\"offerType\"], columns=\"count\", normalize=True))\n\nfig, (axis1, axis2) = plt.subplots(1,2,figsize=(14,8))\n\nsns.countplot(x=\"offerType\", data=cars1, ax=axis1, palette=\"Set2\")\nsns.boxplot(x=\"offerType\", y=\"price\", data=cars1, ax=axis2, palette=\"Set1\")\n#does not affect price as seen in boxplot\ncars1 = cars1.drop(columns=[\"offerType\"], axis=1)","622dd8c3":"# ABtest\nprint(cars[\"abtest\"].value_counts())\nprint(pd.crosstab(cars[\"abtest\"], columns=\"count\", normalize=True))\n\nfig, (axis1, axis2) = plt.subplots(1,2,figsize=(14,8))\n\nsns.countplot(x=\"abtest\", data=cars1, ax=axis1)\nsns.boxplot(x=\"abtest\", y=\"price\", data=cars1, ax=axis2)\naxis2.set_title(\"Preice vs ABtest\")\n\n#does not affect price as seen in boxplot\ncars1 = cars1.drop(columns=[\"abtest\"], axis=1)","61e53bae":"# VehicleType\nprint(cars[\"vehicleType\"].value_counts())\nprint(pd.crosstab(cars[\"vehicleType\"], columns=\"count\", normalize=True))\n\nfig, (axis1, axis2) = plt.subplots(2,1,figsize=(12,16))\n\nsns.countplot(x=\"vehicleType\", data=cars1, ax=axis1)\nsns.boxplot(x=\"vehicleType\", y=\"price\", data=cars1, ax=axis2)\n#affecting the price","926d0bed":"#gearbox\nprint(cars[\"gearbox\"].value_counts())\nprint(pd.crosstab(cars[\"gearbox\"], columns=\"count\", normalize=True))\n\nfig, (axis1, axis2) = plt.subplots(1,2,figsize=(14,8))\n\nsns.countplot(x=\"gearbox\", data=cars1, ax=axis1)\nsns.boxplot(x=\"gearbox\", y=\"price\", data=cars1, ax=axis2)\naxis2.set_title(\"Price vs gearbox\")#affecting the price","a752f7d2":"#Model of car\nprint(cars[\"model\"].value_counts())\nprint(pd.crosstab(cars[\"model\"], columns=\"count\", normalize=True))\n#affecting the price","716b1bcf":"# kilometer\nprint(cars[\"kilometer\"].value_counts())\nprint(pd.crosstab(cars[\"kilometer\"], columns=\"count\", normalize=True))\n\nfig, (axis1, axis2) = plt.subplots(2,1,figsize=(12,16))\n\nsns.countplot(x=\"kilometer\", data=cars1, ax=axis1)\nsns.boxplot(x=\"kilometer\", y=\"price\", data=cars1, ax=axis2)\n#affecting the price","943a9fd0":"#fuelType\nprint(cars[\"fuelType\"].value_counts())\nprint(pd.crosstab(cars[\"fuelType\"], columns=\"count\", normalize=True))\n\nfig, (axis1, axis2) = plt.subplots(1,2,figsize=(14,8))\n\nsns.countplot(x=\"fuelType\", data=cars1, ax=axis1)\nsns.boxplot(x=\"fuelType\", y=\"price\", data=cars1, ax=axis2)\naxis2.set_title(\"Price vs fuelType\")\n#affecting the price","28075b79":"# Brand\nfig, (axis1, axis2) = plt.subplots(2,1,figsize=(12,18))\n\nsns.countplot(y=\"brand\", data=cars1, ax=axis1)\nsns.boxplot(x=\"price\", y=\"brand\", data=cars1, ax=axis2)\naxis2.set_title(\"Brand vs Price\")\n#affecting the price","26b2cd6a":"cars_select = cars.select_dtypes(exclude=[object])\ncorelation = cars_select.corr()\nround(corelation, 3)\ncars_select.corr().loc[:, \"price\"].abs().sort_values(ascending=False)[1:]\n# powerPS have some decent affect on the price i.e 58%","a7bdcc5e":"sns.heatmap(corelation, vmin = -1, vmax = 1, annot = True, cmap=\"Blues\")\nplt.show()","9c13e037":"cars1.describe()","7a87e2e6":"cars2 = cars1.copy()\n#converting categorical variable in 0\/1 format or dummy format\ncars2 = pd.get_dummies(cars1, drop_first=True)\ncars2.head()","a6ff7a4f":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error","efaf2476":"x1 = cars2.drop([\"price\"], axis = \"columns\", inplace = False )\ny1 = cars2[\"price\"]","20745625":"prices = pd.DataFrame({\"1. Before\": y1, \"2. After\":np.log(y1)})\nprices.hist()","8ee89a2c":"y1 = np.log(y1)\ny1","58d1bc3e":"#Splitting the data\nx_train, x_test, y_train, y_test = train_test_split(x1, y1, test_size = 0.3, random_state=0)","4c16a439":"#Findin mean value on test data\ntest_mean = np.mean(y_test)\nprint(test_mean)\ntest_mean = np.repeat(test_mean, len(y_test))\nprint(test_mean)","acc23af0":"rmse = np.sqrt(mean_squared_error(y_test, test_mean))\nprint(rmse)","6fb1cd51":"linear_reg = LinearRegression(fit_intercept = True)","e9e997fe":"model_fit = linear_reg.fit(x_train, y_train)","07092c55":"cars_prediction = linear_reg.predict(x_test)\ncars_prediction","2260e90d":"len(x_test) == len(y_test)","4e4f1f73":"mse1 = mean_squared_error(y_test, cars_prediction)\nrmse1 = np.sqrt(mse1)\nprint(mse1)\nprint(rmse1)","a311d63e":"r2_test = model_fit.score(x_test, y_test)\nr2_train = model_fit.score(x_train, y_train)","0bedd8c1":"print(r2_test, r2_train)","54776718":"reiduals = y_test - cars_prediction\nsns.regplot(x=cars_prediction, y=reiduals, fit_reg=False, scatter=True)\nreiduals.describe()","51f6922f":"rf = RandomForestRegressor(n_estimators=100, max_features=\"auto\",\n                           max_depth=100, min_samples_split=10,\n                           min_samples_leaf=4, random_state=1)","f0353b47":"model_rf = rf.fit(x_train, y_train)","9d607b94":"rf_prediction = rf.predict(x_test)","8d46bdba":"mse1 = mean_squared_error(y_test, rf_prediction)\nrmse1 = np.sqrt(mse1)\nprint(mse1)\nprint(rmse1)","0e058fae":"r2_test = model_rf.score(x_test, y_test)\nr2_train = model_rf.score(x_train, y_train)","2cbd5ef6":"print(r2_test, r2_train)","91989de5":"#### Transforming file as a loarithmic value","56ca9e6b":"Here also we can see that the data is compact at one point i.e. not clearly scattered due many off range values.","df7b4527":" # REGRESSION MODEL - PREDICTING PRICE OF PRE OWNED CARS\n ### @author: Samyak","ffc84646":"### Seprating the values for Linear Regression Model","aab11976":" R SQUARED VALUE","ca831caf":"### Reading Data and getting info about data","867c50ae":"### Removing duplicates from the data","e2c0696e":"### 2. Varialbe price","6709347c":"Regression Diaagnostic - Residual plot analysis","a9108eaf":"### Initialinzing the Model","65c346c4":"#### Removing Null values","93fe91fb":"### Vissualizing Parameters after narrowing the range form dataframe\n### 4. Variable Age\n","07d69ae4":"### 5. Variable Price (Output variable)","07cec1de":" R SQUARED VALUE","c96a199c":" ## CORRELATION","5f6e70d3":"### 3.Varialbe PowerPS","832ee716":"## Varialbe Analysis\n### 1.Year Of Registration","5299457f":"Root mean squared value error (RMSE)","a8f84228":"END","94c558bb":"As we can see that the data is compact at one point i.e. not clearly scattered due many off range values.","d68e72d4":"### Setting graph size","e0af1fd5":"Same case with this also,\nwe can see that the data is compact at one point i.e. not clearly scattered due many or large number of off range values.","5b213ae1":"## Building ML Model","fb52e962":"SE and RMSE for predictive values","c0bb893c":"## RANDOM FOREST MODEL","42919b5a":"SE and RMSE for predictive values","d4de4c71":"### Dropping unwanted columns","d4ca1c69":"## Comparing and Analyzing each and every varaible with price\n### And removing Insignificant columns","1e3fbeb0":"#### Adding Age","dea1f331":"### Plotting  the variable price","5f0d1559":"## Ranging the data to make it more usefull"}}