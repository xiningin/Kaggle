{"cell_type":{"8d9156cf":"code","7089b0c9":"code","9a6f7097":"code","6558bf4f":"code","25ed821c":"code","5118a36c":"code","d230d7a0":"code","cc1fc7f0":"code","03e4d104":"code","11f26bd3":"code","40acf87b":"code","9dc72e46":"code","2a43a1bc":"code","c603e203":"code","c66bd803":"code","ba87bef9":"code","d056075d":"code","3fc2e6c5":"code","af7b90e7":"code","28bca30f":"code","72849f28":"code","91034602":"code","7c90a47e":"code","5ae0b228":"code","705feaae":"code","14c12d57":"code","c8ad69fa":"code","737ba916":"code","cb1a985d":"code","dfa25c71":"code","3086e7b3":"code","9671215a":"code","51033df4":"code","787283ec":"code","0de9a9c2":"code","9fef4f21":"code","706945c6":"code","a25fcf6e":"code","17a6329b":"code","22918a2c":"code","8a7a7d5e":"code","552b112c":"code","7eea4da1":"code","96dcb473":"code","80b05b0b":"code","8bef96f0":"code","c6aea49d":"code","84dd017d":"code","d1dcf6e9":"code","c17d5c36":"code","c61122ee":"code","8f4f32d7":"code","681c5373":"code","b85c712a":"code","2ee11afb":"code","90cef9de":"code","3b6cd4fe":"code","84147fce":"code","98abb8b0":"code","518713a1":"code","a67fdf27":"code","844feb3b":"code","6d47c345":"code","0b7765fc":"code","b91f6cc4":"code","5e7380f9":"code","c66b75c4":"code","40bcd3ea":"code","462d1259":"code","712d71b8":"code","e9e81267":"code","d9dc19ff":"code","dddb58d4":"code","bf1cd07e":"code","9f08ea82":"code","4ee3334c":"code","61c1f5d7":"code","9cfcfa7a":"code","7865e68a":"code","f9306fb9":"code","b7936ba0":"code","e5ecd5e6":"code","89eb9b8a":"code","f136efe6":"code","36fc8c41":"code","a1b8d959":"code","edc80b43":"code","7bfcf9cb":"code","19876b91":"code","0c88b39f":"code","dc1254ef":"code","a802da53":"code","1494b66c":"code","284942fc":"code","44bce0b8":"code","6e465505":"code","f1a855f9":"code","12dbd8ac":"markdown","f3ce9eb3":"markdown","5a6b4a26":"markdown","ef4dd8e1":"markdown","cdf0687a":"markdown","8bf11a05":"markdown","cda90878":"markdown","b8d2e795":"markdown","83c1f68b":"markdown","70621d4d":"markdown","a9bc1bce":"markdown","f978d385":"markdown","9a49fcde":"markdown","122a5b85":"markdown","41a0e9db":"markdown","999f48d3":"markdown","9d1810bc":"markdown","e8b1f849":"markdown","7ca1981b":"markdown"},"source":{"8d9156cf":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\nimport seaborn as sns\nimport matplotlib\nmatplotlib.rcParams['axes.unicode_minus']=False\nmatplotlib.rcParams['font.family']=\"Hancom Gothic\"\nplt.style.use('ggplot')\nfrom sklearn.preprocessing import scale,minmax_scale\nimport os\nimport lightgbm as lgb\nimport xgboost as xgb","7089b0c9":"os.listdir('..\/input\/')","9a6f7097":"def resumetable(df):\n    print(f\"Dataset Shape: {df.shape}\")\n    summary=pd.DataFrame(df.dtypes,columns=['dtypes'])\n    summary=summary.reset_index()\n    summary['Name']=summary['index']\n    summary=summary[['Name','dtypes']]\n    summary['Min']=df.min().values\n    summary['Max']=df.max().values\n    summary['Missing']=df.isnull().sum().values    \n    summary['Uniques']=df.nunique().values\n    return summary","6558bf4f":"train_lab=pd.read_csv('..\/input\/bigcontest2019\/train_label.csv')\nprint('train_lab.shape :',train_lab.shape)\ntrain_lab.head()","25ed821c":"resumetable(train_lab)","5118a36c":"train_act=pd.read_csv('..\/input\/bigcontest2019\/train_activity.csv')\ntest1_act=pd.read_csv('..\/input\/bigcontest2019\/test1_activity.csv')\ntest2_act=pd.read_csv('..\/input\/bigcontest2019\/test2_activity.csv')\nprint('train_act.shape :',train_act.shape)\nprint('test1_act.shape :',test1_act.shape)\nprint('test2_act.shape :',test2_act.shape)\ntrain_act.head()","d230d7a0":"resumetable(train_act)","cc1fc7f0":"# train_act['Train_or_Test']=\"Train\"\n# test1_act['Train_or_Test']=\"Test1\"\n# test2_act['Train_or_Test']=\"Test2\"\n# all_act=pd.concat([train_act,test1_act,test2_act],axis=0)\n# train_act.drop('Train_or_Test',axis=1,inplace=True)\n# test1_act.drop('Train_or_Test',axis=1,inplace=True)\n# test2_act.drop('Train_or_Test',axis=1,inplace=True)\n# all_act.head()","03e4d104":"# all_act.tail()","11f26bd3":"train_com=pd.read_csv('..\/input\/bigcontest2019\/train_combat.csv')\ntest1_com=pd.read_csv('..\/input\/bigcontest2019\/test1_combat.csv')\ntest2_com=pd.read_csv('..\/input\/bigcontest2019\/test2_combat.csv')\nprint('train_com.shape :',train_com.shape)\nprint('test1_com.shape :',test1_com.shape)\nprint('test2_com.shape :',test2_com.shape)\ntrain_com.head()","40acf87b":"resumetable(train_com)","9dc72e46":"# train_com['Train_or_Test']=\"Train\"\n# test1_com['Train_or_Test']=\"Test1\"\n# test2_com['Train_or_Test']=\"Test2\"\n# all_com=pd.concat([train_com,test1_com,test2_com],axis=0)\n# train_com.drop('Train_or_Test',axis=1,inplace=True)\n# test1_com.drop('Train_or_Test',axis=1,inplace=True)\n# test2_com.drop('Train_or_Test',axis=1,inplace=True)\n# all_com.head()","2a43a1bc":"# all_com.tail()","c603e203":"train_ple=pd.read_csv('..\/input\/bigcontest2019\/train_pledge.csv')\ntest1_ple=pd.read_csv('..\/input\/bigcontest2019\/test1_pledge.csv')\ntest2_ple=pd.read_csv('..\/input\/bigcontest2019\/test2_pledge.csv')\nprint('train_ple.shape :',train_ple.shape)\nprint('test1_ple.shape :',test1_ple.shape)\nprint('test2_ple.shape :',test2_ple.shape)\ntrain_ple.head()","c66bd803":"resumetable(train_ple)","ba87bef9":"# train_ple['Train_or_Test']=\"Train\"\n# test1_ple['Train_or_Test']=\"Test1\"\n# test2_ple['Train_or_Test']=\"Test2\"\n# all_ple=pd.concat([train_ple,test1_ple,test2_ple],axis=0)\n# train_ple.drop('Train_or_Test',axis=1,inplace=True)\n# test1_ple.drop('Train_or_Test',axis=1,inplace=True)\n# test2_ple.drop('Train_or_Test',axis=1,inplace=True)\n# all_ple.head()","d056075d":"# all_ple.tail()","3fc2e6c5":"train_tra=pd.read_csv('..\/input\/bigcontest2019\/train_trade.csv')\ntest1_tra=pd.read_csv('..\/input\/bigcontest2019\/test1_trade.csv')\ntest2_tra=pd.read_csv('..\/input\/bigcontest2019\/test2_trade.csv')\nprint('train_tra.shape :',train_tra.shape)\nprint('test1_tra.shape :',test1_tra.shape)\nprint('test2_tra.shape :',test2_tra.shape)\ntrain_tra.head()","af7b90e7":"resumetable(train_tra)","28bca30f":"# train_tra['Train_or_Test']=\"Train\"\n# test1_tra['Train_or_Test']=\"Test1\"\n# test2_tra['Train_or_Test']=\"Test2\"\n# all_tra=pd.concat([train_tra,test1_tra,test2_tra],axis=0)\n# train_tra.drop('Train_or_Test',axis=1,inplace=True)\n# test1_tra.drop('Train_or_Test',axis=1,inplace=True)\n# test2_tra.drop('Train_or_Test',axis=1,inplace=True)\n# all_tra.head()","72849f28":"# all_tra.tail()","91034602":"train_pay=pd.read_csv('..\/input\/bigcontest2019\/train_payment.csv')\ntest1_pay=pd.read_csv('..\/input\/bigcontest2019\/test1_payment.csv')\ntest2_pay=pd.read_csv('..\/input\/bigcontest2019\/test2_payment.csv')\nprint('train_pay.shape :',train_pay.shape)\nprint('test1_pay.shape :',test1_pay.shape)\nprint('test2_pay.shape :',test2_pay.shape)\ntrain_pay.head()","7c90a47e":"resumetable(train_pay)","5ae0b228":"# train_pay['Train_or_Test']=\"Train\"\n# test1_pay['Train_or_Test']=\"Test1\"\n# test2_pay['Train_or_Test']=\"Test2\"\n# all_pay=pd.concat([train_pay,test1_pay,test2_pay],axis=0)\n# train_pay.drop('Train_or_Test',axis=1,inplace=True)\n# test1_pay.drop('Train_or_Test',axis=1,inplace=True)\n# test2_pay.drop('Train_or_Test',axis=1,inplace=True)\n# all_pay.head()","705feaae":"# all_pay.tail()","14c12d57":"train_valid=pd.read_csv('..\/input\/bigcontest2019\/train_valid_user_id.csv')\ntrain_valid.head()","c8ad69fa":"train_act.head()","737ba916":"train_act.groupby(['day','acc_id','char_id','server']).count().shape","cb1a985d":"train_act.shape","dfa25c71":"train_act[['acc_id','char_id','server']].groupby(['acc_id','char_id']).nunique()[train_act[['acc_id','char_id','server']].groupby(['acc_id','char_id']).nunique()['server']>1].shape","3086e7b3":"train_act[['acc_id','char_id','server']].groupby(['acc_id','char_id']).nunique()['server'].max()","9671215a":"print('\ub3d9\uc77c \uce90\ub9ad\ud130\ub85c \ub2e4\ub978 \uc11c\ubc84\uac00 7\uac1c \uae30\ub85d\ub41c \uacbd\uc6b0\uc758 \uc218 :',train_act[['acc_id','char_id','server']].groupby(['acc_id','char_id']).nunique()[train_act[['acc_id','char_id','server']].groupby(['acc_id','char_id']).nunique()['server']==7].shape[0])","51033df4":"train_act[['acc_id','char_id','server']].groupby(['acc_id','char_id']).nunique()[train_act[['acc_id','char_id','server']].groupby(['acc_id','char_id']).nunique()['server']==7].head()","787283ec":"train_act[(train_act['acc_id']==38)&(train_act['char_id']==67497)]","0de9a9c2":"plt.figure(figsize=(15,7))\ns1=sns.countplot(train_act['server'])\ns1.set(title='Server count')","9fef4f21":"print('bi \uc11c\ubc84 \uae30\ub85d\ub41c \uac1c\uc218 :',train_act[train_act['server']=='bi'].shape[0])\ntrain_act[train_act['server']=='bi']","706945c6":"train_act[(train_act['playtime']==0)].shape","a25fcf6e":"train_act[(train_act['playtime']==0)&(train_act['fishing']>0)].shape\n# playtime\uc774 0\uc77c \ub54c fishing\uc774 0\uc774 \uc544\ub2cc \uacbd\uc6b0\ub294 7145","17a6329b":"train_act[(train_act['playtime']==0)&(train_act['fishing']>0)].head()","22918a2c":"train_act[(train_act['playtime']==0)&(train_act['fishing']==0)]","8a7a7d5e":"train_act[(train_act['acc_id']==94800) & (train_act['char_id']==42512)]","552b112c":"train_act['fishing'].max()","7eea4da1":"train_lab[train_lab['acc_id']==94800]","96dcb473":"train_act[(train_act['acc_id']==88486) & (train_act['char_id']==350129)]","80b05b0b":"train_act['private_shop'].max()","8bef96f0":"train_act[train_act['fishing']==train_act['fishing'].max()].shape","c6aea49d":"train_act[(train_act['fishing']==train_act['fishing'].max()) & (train_act['playtime']==0)].shape","84dd017d":"train_act[(train_act['fishing']==train_act['fishing'].max()) & (train_act['playtime']>0)]","d1dcf6e9":"print('fishing==0 :',train_act[train_act['fishing']==0].shape[0])\nprint('train_activity \ub370\uc774\ud130 \uac1c\uc218 :',train_act.shape[0])\nprint('activity\ub370\uc774\ud130\uc5d0\uc11c fishing\uc774 0\uc774 \uc544\ub2cc \ube44\uc728 :',train_act[train_act['fishing']!=0].shape[0]\/train_act.shape[0])","c17d5c36":"train_act[train_act['death']>0].head()","c61122ee":"print('death\uac00 0\uc774 \uc544\ub2c8\uace0, npc_kill, solo_exp, party_exp, quest_exp, rich_monster\uac00 0\uc778 \uac1c\uc218 : ',train_act[(train_act['death']>0)&(train_act['npc_kill']==0)&(train_act['solo_exp']==0)&(train_act['party_exp']==0)&(train_act['quest_exp']==0)&(train_act['rich_monster']==0)].shape[0])","8f4f32d7":"train_act[(train_act['death']>0)&(train_act['npc_kill']==0)&(train_act['solo_exp']==0)&(train_act['party_exp']==0)&(train_act['quest_exp']==0)&(train_act['rich_monster']==0)].head(10)","681c5373":"train_act.head()","b85c712a":"label=train_lab.copy()\nlabel['is_survival']=label['survival_time'].map(lambda x: 1 if x==64 else 0)\nlabel.head()","2ee11afb":"act_lab=pd.merge(train_act,label,how='left',on='acc_id')\nact_lab.head()","90cef9de":"act_lab.isna().sum()","3b6cd4fe":"fig, ax = plt.subplots(4,4,figsize=(20,20))\nl1=['playtime','npc_kill','solo_exp','party_exp','quest_exp','rich_monster','death','revive','exp_recovery',\n    'fishing','private_shop','game_money_change','enchant_count']\nfor i in range(13):\n    sns.boxplot(x='is_survival',y=l1[i],data=act_lab,ax=ax[i\/\/4,i%4])\n    ax[i\/\/4,i%4].set(title = str(l1[i]) + 'by is_survival')","84147fce":"fig, ax = plt.subplots(4,3,figsize=(20,20))\nl1=['playtime','npc_kill','solo_exp','party_exp','quest_exp','death','revive','exp_recovery',\n    'fishing','private_shop','game_money_change','enchant_count']\nfor i in range(12):\n    sns.kdeplot(act_lab.loc[act_lab['is_survival']==1,l1[i]],label='survive',ax=ax[i\/\/3,i%3])\n    sns.kdeplot(act_lab.loc[act_lab['is_survival']==0,l1[i]],label='leave',ax=ax[i\/\/3,i%3])\n    ax[i\/\/3,i%3].set(title = str(l1[i]) + ' by is_survival')","98abb8b0":"t1=len(act_lab[act_lab['is_survival']==0])\nt2=len(act_lab[act_lab['is_survival']==1])\nfig, ax = plt.subplots(1,2,figsize=(15,7))\nsns.countplot(act_lab.loc[act_lab['is_survival']==0,'rich_monster'],ax=ax[0])\nsns.countplot(act_lab.loc[act_lab['is_survival']==1,'rich_monster'],ax=ax[1])\nax[0].set(title='rich_monster attacked by leave',ylim=(0,900000))\nax[1].set(title='rich_monster attacked by survive',ylim=(0,900000))\nfor p in ax[0].patches:\n    height = p.get_height()\n    ax[0].text(p.get_x() + p.get_width()\/2.,\n           height + 3,\n           '{:1.2f}%'.format(height\/t1*100),\n           ha = 'center')\nfor p in ax[1].patches:\n    height = p.get_height()\n    ax[1].text(p.get_x() + p.get_width()\/2.,\n               height + 3,\n               '{:2.2f}%'.format(height\/t2*100),\n               ha = 'center')","518713a1":"train_act.columns","a67fdf27":"print('\uce90\ub9ad\ud130 \uac1c\uc218.max() :',train_act[['acc_id','char_id']].groupby(['acc_id'])['char_id'].nunique().max())\nchar_count = train_act[['acc_id','char_id']].groupby('acc_id')['char_id'].nunique().reset_index(name='char_count')","844feb3b":"day_count = train_act[['acc_id','day']].groupby('acc_id')['day'].nunique().reset_index(name='day_count')","6d47c345":"print('\uc11c\ubc84 \uac1c\uc218.max() :',train_act[['acc_id','server']].groupby(['acc_id'])['server'].nunique().max())\nserver_count = train_act[['acc_id','server']].groupby('acc_id')['server'].nunique().reset_index(name='server_count')","0b7765fc":"playtime_sum = train_act[['acc_id','playtime']].groupby('acc_id')['playtime'].sum().reset_index(name='playtime_sum')\nplaytime_mean = train_act[['acc_id','playtime']].groupby('acc_id')['playtime'].mean().reset_index(name='playtime_mean')\nplaytime_max = train_act[['acc_id','playtime']].groupby('acc_id')['playtime'].max().reset_index(name='playtime_max')\nplaytime_smm = pd.merge(playtime_sum, playtime_mean, on='acc_id', how='left')\nplaytime_smm = pd.merge(playtime_smm, playtime_max, on='acc_id', how='left')\nplaytime_smm.head()","b91f6cc4":"npc_kill_sum = train_act[['acc_id','npc_kill']].groupby('acc_id')['npc_kill'].sum().reset_index(name='npc_kill_sum')\nnpc_kill_mean = train_act[['acc_id','npc_kill']].groupby('acc_id')['npc_kill'].mean().reset_index(name='npc_kill_mean')\nnpc_kill_max = train_act[['acc_id','npc_kill']].groupby('acc_id')['npc_kill'].max().reset_index(name='npc_kill_max')\nnpc_kill_smm = pd.merge(npc_kill_sum, npc_kill_mean, on='acc_id', how='left')\nnpc_kill_smm = pd.merge(npc_kill_smm, npc_kill_max, on='acc_id', how='left')\nnpc_kill_smm.head()","5e7380f9":"solo_sum = train_act[['acc_id','solo_exp']].groupby('acc_id')['solo_exp'].sum().reset_index(name='solo_exp_sum')\nsolo_mean = train_act[['acc_id','solo_exp']].groupby('acc_id')['solo_exp'].mean().reset_index(name='solo_exp_mean')\nsolo_max = train_act[['acc_id','solo_exp']].groupby('acc_id')['solo_exp'].max().reset_index(name='solo_exp_max')\nsolo_smm = pd.merge(solo_sum, solo_mean, on='acc_id', how='left')\nsolo_smm = pd.merge(solo_smm, solo_max, on='acc_id', how='left')\nsolo_smm.head()","c66b75c4":"party_sum = train_act[['acc_id','party_exp']].groupby('acc_id')['party_exp'].sum().reset_index(name='party_exp_sum')\nparty_mean = train_act[['acc_id','party_exp']].groupby('acc_id')['party_exp'].mean().reset_index(name='party_exp_mean')\nparty_max = train_act[['acc_id','party_exp']].groupby('acc_id')['party_exp'].max().reset_index(name='party_exp_max')\nparty_smm = pd.merge(party_sum, party_mean, on='acc_id', how='left')\nparty_smm = pd.merge(party_smm, party_max, on='acc_id', how='left')\nparty_smm.head()","40bcd3ea":"quest_sum = train_act[['acc_id','quest_exp']].groupby('acc_id')['quest_exp'].sum().reset_index(name='quest_exp_sum')\nquest_mean = train_act[['acc_id','quest_exp']].groupby('acc_id')['quest_exp'].mean().reset_index(name='quest_exp_mean')\nquest_max = train_act[['acc_id','quest_exp']].groupby('acc_id')['quest_exp'].max().reset_index(name='quest_exp_max')\nquest_smm = pd.merge(quest_sum, quest_mean, on='acc_id', how='left')\nquest_smm = pd.merge(quest_smm, quest_max, on='acc_id', how='left')\nquest_smm.head()","462d1259":"rich_sum = train_act[['acc_id','rich_monster']].groupby('acc_id')['rich_monster'].sum().reset_index(name='rich_sum')\nrich_mean = train_act[['acc_id','rich_monster']].groupby('acc_id')['rich_monster'].mean().reset_index(name='rich_mean')\nrich_att = train_act[['acc_id','rich_monster']].groupby('acc_id')['rich_monster'].max().reset_index(name='rich_attacked')\nrich_smm = pd.merge(rich_sum, rich_mean, on='acc_id', how='left')\nrich_smm = pd.merge(rich_smm, rich_att, on='acc_id', how='left')\nrich_smm.head()","712d71b8":"death_sum = train_act[['acc_id','death']].groupby('acc_id')['death'].sum().reset_index(name='death_sum')\ndeath_mean = train_act[['acc_id','death']].groupby('acc_id')['death'].mean().reset_index(name='death_mean')\ndeath_max = train_act[['acc_id','death']].groupby('acc_id')['death'].max().reset_index(name='death_max')\ndeath_smm = pd.merge(death_sum, death_mean, on='acc_id', how='left')\ndeath_smm = pd.merge(death_smm, death_max, on='acc_id', how='left')\ndeath_smm.head()","e9e81267":"revive_sum = train_act[['acc_id','revive']].groupby('acc_id')['revive'].sum().reset_index(name='revive_sum')\nrevive_mean = train_act[['acc_id','revive']].groupby('acc_id')['revive'].mean().reset_index(name='revive_mean')\nrevive_max = train_act[['acc_id','revive']].groupby('acc_id')['revive'].max().reset_index(name='revive_max')\nrevive_smm = pd.merge(revive_sum, revive_mean, on='acc_id', how='left')\nrevive_smm = pd.merge(revive_smm, revive_max, on='acc_id', how='left')\nrevive_smm.head()","d9dc19ff":"exp_recovery_sum = train_act[['acc_id','exp_recovery']].groupby('acc_id')['exp_recovery'].sum().reset_index(name='exp_recovery_sum')\nexp_recovery_mean = train_act[['acc_id','exp_recovery']].groupby('acc_id')['exp_recovery'].mean().reset_index(name='exp_recovery_mean')\nexp_recovery_max = train_act[['acc_id','exp_recovery']].groupby('acc_id')['exp_recovery'].max().reset_index(name='exp_recovery_max')\nexp_recovery_smm = pd.merge(exp_recovery_sum, exp_recovery_mean, on='acc_id', how='left')\nexp_recovery_smm = pd.merge(exp_recovery_smm, exp_recovery_max, on='acc_id', how='left')\nexp_recovery_smm.head()","dddb58d4":"fishing_sum = train_act[['acc_id','fishing']].groupby('acc_id')['fishing'].sum().reset_index(name='fishing_sum')\nfishing_mean = train_act[['acc_id','fishing']].groupby('acc_id')['fishing'].mean().reset_index(name='fishing_mean')\nfishing_max = train_act[['acc_id','fishing']].groupby('acc_id')['fishing'].max().reset_index(name='fishing_max')\nfishing_smm = pd.merge(fishing_sum, fishing_mean, on='acc_id', how='left')\nfishing_smm = pd.merge(fishing_smm, fishing_max, on='acc_id', how='left')\nfishing_smm.head()","bf1cd07e":"private_sum = train_act[['acc_id','private_shop']].groupby('acc_id')['private_shop'].sum().reset_index(name='private_shop_sum')\nprivate_mean = train_act[['acc_id','private_shop']].groupby('acc_id')['private_shop'].mean().reset_index(name='private_shop_mean')\nprivate_max = train_act[['acc_id','private_shop']].groupby('acc_id')['private_shop'].max().reset_index(name='private_shop_max')\nprivate_smm = pd.merge(private_sum, private_mean, on='acc_id', how='left')\nprivate_smm = pd.merge(private_smm, private_max, on='acc_id', how='left')\nprivate_smm.head()","9f08ea82":"game_money_sum = train_act[['acc_id','game_money_change']].groupby('acc_id')['game_money_change'].sum().reset_index(name='game_money_sum')\ngame_money_mean = train_act[['acc_id','game_money_change']].groupby('acc_id')['game_money_change'].mean().reset_index(name='game_money_mean')\ngame_money_max = train_act[['acc_id','game_money_change']].groupby('acc_id')['game_money_change'].max().reset_index(name='game_money_max')\ngame_money_min = train_act[['acc_id','game_money_change']].groupby('acc_id')['game_money_change'].min().reset_index(name='game_money_min')\ngame_money_smm = pd.merge(game_money_sum, game_money_mean, on='acc_id', how='left')\ngame_money_smm = pd.merge(game_money_smm, game_money_max, on='acc_id', how='left')\ngame_money_smm = pd.merge(game_money_smm, game_money_min, on='acc_id', how='left')\ngame_money_smm.head()","4ee3334c":"enchant_sum = train_act[['acc_id','enchant_count']].groupby('acc_id')['enchant_count'].sum().reset_index(name='enchant_count_sum')\nenchant_sum['enchant_count_sum'] = enchant_sum['enchant_count_sum'].map(lambda x: 1 if x>0 else 0)\nenchant_sum.head()","61c1f5d7":"train_act.columns","9cfcfa7a":"holy_label = pd.merge(train_lab, train_valid, on='acc_id', how='left')\nholy_label = pd.merge(holy_label, char_count, on='acc_id', how='left')\nholy_label = pd.merge(holy_label, day_count, on='acc_id', how='left')\nholy_label = pd.merge(holy_label, server_count, on='acc_id', how='left')\nholy_label = pd.merge(holy_label, playtime_smm, on='acc_id', how='left')\nholy_label = pd.merge(holy_label, npc_kill_smm, on='acc_id', how='left')\nholy_label = pd.merge(holy_label, solo_smm, on='acc_id', how='left')\nholy_label = pd.merge(holy_label, party_smm, on='acc_id', how='left')\nholy_label = pd.merge(holy_label, quest_smm, on='acc_id', how='left')\nholy_label = pd.merge(holy_label, rich_smm, on='acc_id', how='left')\nholy_label = pd.merge(holy_label, death_smm, on='acc_id', how='left')\nholy_label = pd.merge(holy_label, revive_smm, on='acc_id', how='left')\nholy_label = pd.merge(holy_label, exp_recovery_smm, on='acc_id', how='left')\nholy_label = pd.merge(holy_label, fishing_smm, on='acc_id', how='left')\nholy_label = pd.merge(holy_label, private_smm, on='acc_id', how='left')\nholy_label = pd.merge(holy_label, game_money_smm, on='acc_id', how='left')\nholy_label = pd.merge(holy_label, enchant_sum, on='acc_id', how='left')\nholy_label.head()","7865e68a":"print(holy_label.shape)\nholy_label.isna().sum()","f9306fb9":"train = holy_label[holy_label['set']=='Train']\ntest = holy_label[holy_label['set']=='Validation']\ntrain.head()","b7936ba0":"test.head()","e5ecd5e6":"x_train = train.drop(['acc_id','survival_time','amount_spent','set'],axis=1)\ny1_train = train['survival_time']\ny2_train = train['amount_spent']\nx_test = test.drop(['acc_id','survival_time','amount_spent','set'],axis=1)","89eb9b8a":"lgb_params = {'learning_rate':0.1,\n              'max_depth':6,\n              'boosting':'gbdt',\n              'objective':'regression',\n              'metric':'rmse',\n              'num_leaves':31,\n              'min_child_samples':1,}","f136efe6":"trainset = lgb.Dataset(x_train, y1_train)\n\ncv_output = lgb.cv(lgb_params,\n                   trainset,\n                   num_boost_round = 10000,\n                   nfold = 5,\n                   early_stopping_rounds = 200,\n                   verbose_eval = 100,\n                   show_stdv = False)\n\nbest_rounds1 = np.array(list(cv_output.values())).shape[1]\nprint('best_rounds :', best_rounds1)","36fc8c41":"lgb_model = lgb.train(lgb_params,\n                      trainset,\n                      num_boost_round = best_rounds1)\ny1_pred = lgb_model.predict(x_test)\ny1_pred[:20]","a1b8d959":"fig, ax = plt.subplots(figsize=(10,10))\nlgb.plot_importance(lgb_model,ax=ax)\nplt.show()","edc80b43":"xgb_params={'eta':0.01,\n            'max_depth':6,\n            'objective':'reg:squarederror',\n            'metric':'rmse',\n            'min_child_samples':100}","7bfcf9cb":"dtrain = xgb.DMatrix(x_train,y2_train)\ndtest = xgb.DMatrix(x_test)\n\ncv_output = xgb.cv(xgb_params,\n                   dtrain,\n                   num_boost_round = 10000,\n                   nfold = 5,\n                   early_stopping_rounds = 200,\n                   verbose_eval = 100,\n                   show_stdv = False)\n\nbest_rounds2 = cv_output.index.size\n\nprint('Best rounds :',best_rounds2)","19876b91":"xgb_model = xgb.train(xgb_params,\n                      dtrain,\n                      num_boost_round = best_rounds2)\ny2_pred = xgb_model.predict(dtest)\ny2_pred[:20]","0c88b39f":"fig, ax = plt.subplots(figsize=(10,10))\nxgb.plot_importance(xgb_model,ax=ax)\nplt.show()","dc1254ef":"pred = pd.DataFrame({'acc_id':test['acc_id'],'survival_time':y1_pred,'amount_spent':y2_pred})\npred.head()","a802da53":"def ss(x):\n    if x>64:\n        return 64\n    elif x<1:\n        return 1\n    else:\n        return x","1494b66c":"pred['survival_time'] = pred['survival_time'].map(ss)\npred['survival_time'] = np.round(pred['survival_time'])\npred.head()","284942fc":"# ------------------------------------------------------------------------ #\n# INPUT\n#    predicted_label : \uc608\uce21 \ub2f5\uc548\uc9c0 \ud30c\uc77c \uacbd\ub85c \n#    actual_label    : \uc2e4\uc81c \ub2f5\uc548\uc9c0 \ud30c\uc77c \uacbd\ub85c\n#\n# OUTPUT             : \uc720\uc800 \uae30\ub300\uc774\uc775 \ucd1d\ud569 \n#\n#\n# - \uc608\uce21 \ub2f5\uc548\uc9c0\ub97c \uc2e4\uc81c \ub2f5\uc548\uacfc \ube44\uad50\ud558\uc5ec \uc720\uc800 \uae30\ub300\uc774\uc775 \ucd1d\ud569\uc744 \uacc4\uc0b0\ud558\ub294 \ud568\uc218\n# - \ud568\uc218\uc758 \uacc4\uc0b0\ubc29\uc2dd\uc740 \ubb38\uc81c \uc124\uba85\uc11c\uc5d0 \uae30\uc220\ub41c \uae30\ub300\uc774\uc775 \uc0b0\ucd9c\uc2dd\uacfc \ub3d9\uc77c\n# ------------------------------------------------------------------------ #\n\n#\ud544\uc694\ud55c \ubaa8\ub4c8 import\nimport pandas as pd\nimport numpy as np\nimport sys\n\ndef score_function(predict_label, actual_label):\n    \n    predict = predict_label # \uc608\uce21 \ub2f5\uc548 \ud30c\uc77c \ubd88\ub7ec\uc624\uae30\n    actual = actual_label # \uc2e4\uc81c \ub2f5\uc548 \ud30c\uc77c \ubd88\ub7ec\uc624\uae30 \n\n    predict.acc_id = predict.acc_id.astype('int')\n    predict = predict.sort_values(by =['acc_id'], axis = 0) # \uc608\uce21 \ub2f5\uc548\uc744 acc_id \uae30\uc900\uc73c\ub85c \uc815\ub82c \n    predict = predict.reset_index(drop = True)\n    actual.acc_id = actual.acc_id.astype('int')\n    actual = actual.sort_values(by =['acc_id'], axis = 0) # \uc2e4\uc81c \ub2f5\uc548\uc744 acc_id \uae30\uc900\uc73c\ub85c \uc815\ub82c\n    actual =actual.reset_index(drop=True)\n    \n    if predict.acc_id.equals(actual.acc_id) == False:\n        print('acc_id of predicted and actual label does not match')\n        sys.exit() # \uc608\uce21 \ub2f5\uc548\uc758 acc_id\uc640 \uc2e4\uc81c \ub2f5\uc548\uc758 acc_id\uac00 \ub2e4\ub978 \uacbd\uc6b0 \uc5d0\ub7ec\ucc98\ub9ac \n    else:\n            \n        S, alpha, L, sigma = 30, 0.01, 0.1, 15  \n        cost, gamma, add_rev = 0,0,0 \n        profit_result = []\n        survival_time_pred = list(predict.survival_time)\n        amount_spent_pred = list(predict.amount_spent)\n        survival_time_actual = list(actual.survival_time)\n        amount_spent_actual = list(actual.amount_spent)    \n        for i in range(len(survival_time_pred)):\n            if survival_time_pred[i] == 64 :                 \n                cost = 0\n                optimal_cost = 0\n            else:\n                cost = alpha * S * amount_spent_pred[i]                    #\ube44\uc6a9 \uacc4\uc0b0\n                optimal_cost = alpha * S * amount_spent_actual[i]          #\uc801\uc815\ube44\uc6a9 \uacc4\uc0b0 \n            \n            if optimal_cost == 0:\n                gamma = 0\n            elif cost \/ optimal_cost < L:\n                gamma = 0\n            elif cost \/ optimal_cost >= 1:\n                gamma = 1\n            else:\n                gamma = (cost)\/((1-L)*optimal_cost) - L\/(1-L)              #\ubc18\uc751\ub960 \uacc4\uc0b0\n            \n            if survival_time_pred[i] == 64 or survival_time_actual[i] == 64:\n                T_k = 0\n            else:\n                T_k = S * np.exp(-((survival_time_pred[i] - survival_time_actual[i])**2)\/(2*(sigma)**2))    #\ucd94\uac00 \uc0dd\uc874\uae30\uac04 \uacc4\uc0b0\n                \n            add_rev = T_k * amount_spent_actual[i]                         #\uc794\uc874\uac00\uce58 \uacc4\uc0b0\n    \n           \n            profit = gamma * add_rev - cost                                #\uc720\uc800\ubcc4 \uae30\ub300\uc774\uc775 \uacc4\uc0b0\n            profit_result.append(profit)\n            \n        score = sum(profit_result)                                         #\uae30\ub300\uc774\uc775 \ucd1d\ud569 \uacc4\uc0b0\n        print(score)\n    return score","44bce0b8":"actual_label = test[['acc_id','survival_time','amount_spent']]","6e465505":"score = score_function(pred, actual_label)","f1a855f9":"pred.to_csv('pred.csv',index=False)","12dbd8ac":"\ub300\ubd80\ubd84\uc758 \ubcc0\uc218\uac00 0\uc5d0 \ubab0\ub824\uc788\uc5b4 ylim\uc744 \uc124\uc815\ud574\uc8fc\uc9c0 \uc54a\ub294 \uc774\uc0c1 boxplot\uc73c\ub85c \ud655\uc778\ud558\uae30 \ud798\ub4e4\ub2e4.","f3ce9eb3":"\ud558\uc9c0\ub9cc acc_id\uc640 char_id \ub450 \ubcc0\uc218\ub85c groupby\ud588\uc744 \ub54c \uc720\ub2c8\ud06c\ud55c \uc11c\ubc84\uc758 \uc218\uac00 1\uc774 \ub118\ub294 \uacbd\uc6b0\uac00 \uc788\ub2e4.  \n(\uac19\uc740 \uce90\ub9ad\ud130\uc778\ub370 \uae30\ub85d\ub41c \uc11c\ubc84\uac00 2\uac1c \uc774\uc0c1\uc774\ub2e4.)\n\n\uc774 \uacbd\uc6b0\ub294 \ud1b5\ud569 \uc11c\ubc84 \ucf58\ud150\uce20\ub97c \ucc38\uc5ec\ud55c \uacbd\uc6b0\uc5d0 \uae30\uc874\uc5d0 \uc18d\ud55c \uc11c\ubc84\uac00 \uc544\ub2cc \ud2b9\uc218 \uc11c\ubc84\uc5d0 \uae30\ub85d\uc774 \ub418\uc5b4\uc11c \uadf8\ub7f0 \uac83 \uac19\ub2e4.  \n\uc11c\ubc84\uc758 \uac1c\uc218\uac00 \uc81c\uc77c \ub9ce\uc774 \uae30\ub85d\ub41c \uacbd\uc6b0\ub294 7\uac1c\uae4c\uc9c0 \uae30\ub85d\ub418\uc5c8\ub2e4.  \n\uadf8 \uc911\uc5d0 \ud55c \uce90\ub9ad\ud130\ub97c \uc0b4\ud3b4\ubcf4\ub2c8 \uac19\uc740 \ub0a0\uc774\uc5b4\ub3c4 \uc11c\ubc84\uac00 \uc5ec\ub7ec\uac1c \uae30\ub85d\ub418\ub294 \uac83\uc744 \ubcfc \uc218 \uc788\ub2e4.\n\n\uac19\uc740\ub0a0 \uc811\uc18d\ud55c \ub3d9\uc77c \uce90\ub9ad\ud130\uc5ec\ub3c4 \uc11c\ubc84\uac00 \ub2ec\ub77c\uc9c0\uba74 \ub2e4\ub978 \ubcc0\uc218\ub4e4\uae4c\uc9c0 \ub2e4\uc2dc \uadf8 \uc11c\ubc84\uc5d0\uc11c \ud65c\ub3d9\ud55c \ub370\uc774\ud130\ub85c \uae30\ub85d\ub41c\ub2e4.\n\n\uc774\ub7f0 \uacbd\uc6b0 \uc11c\ubc84\ub97c \uc5b4\ub5bb\uac8c \uc804\ucc98\ub9ac \ud574\uc57c\ud560 \uac83\uc778\uc9c0 \uace0\ubbfc\ub41c\ub2e4..","5a6b4a26":"- \uc794\uc874\uc720\uc800\ub4e4\uc774 \uc774\ud0c8\uc720\uc800\ub4e4 \ubcf4\ub2e4 \ubcf4\uc2a4\ud0c0\uaca9\uc744 \ub9ce\uc774 \ud588\ub2e4. \ube44\uc728\ub3c4 \uc880 \ub354 \ub192\ub2e4.","ef4dd8e1":"\uc554\uac83\ub3c4 \uc548\ud588\ub294\ub370 \uc8fd\uc740\uc560\ub4e4\uc774\ub2e4.  \n\uc774 \uacbd\uc6b0\ub294 \ub2e4\ub978 \ub370\uc774\ud130\uc640 \ubcd1\ud569 \ud6c4 \uc0b4\ud3b4\ubd10\uc57c \uc65c \uc8fd\uc5c8\ub294\uc9c0 \uc54c \uc218 \uc788\uc744 \uac83 \uac19\ub2e4.(\ub9c9\ud53c \ub4f1\uc758 \uc774\uc720)","cdf0687a":"1\uc624\uc6b0 \uc774 \uc0ac\ub78c\uc744 \uc0b4\ud3b4\ubcf4\ub2c8 day==1\uc5d0 \ub4e4\uc5b4\uc640\uc11c \ub09a\uc2dc\ub97c \ud0a4\uace0 \uacc4\uc18d \ucef4\ud4e8\ud130\ub97c \ucf1c\ub454 \uac83 \uac19\ub2e4.  \n\uc774 \uc774\uc720\uac00 \uc544\ub2c8\ub77c\uba74 \uadf8\ub0e5 \uc624\ub958\uc778 \uac83 \uac19\ub2e4.  \n\uc624\uc624\uc6b0 \uadfc\ub370 \uc774 \uc0ac\ub78c \ubcf4\ub2c8\uae4c \uc794\uc874\uc720\uc800\uc774\ub2e4.\n\n\uadf8\ub7f0\ub370 \uccab\ub0a0\uc5d0\ub3c4 playtime\uc740 \uc801\uc740\ub370 fishing\uc740 \uac70\uc758 \ucd5c\uace0\uac12\uc774\ub2e4.  \n\uc624\ub958\ub77c\uace0 \ubd10\uc57c\ud560 \uac83 \uac19\ub2e4.","8bf11a05":"# train_activity","cda90878":"\ud655\uc2e4\ud788 day, acc_id, char_id, server 4\uac1c\ub97c \ubb36\uc73c\uba74 \uace0\uc720\ud0a4\uac00 \ub41c\ub2e4.","b8d2e795":"playtime\uc774 0\uc778 \uacbd\uc6b0\uac00 7161\uac1c \uc788\ub2e4.","83c1f68b":"# Data Field\n## activity\n- day : \ub0a0\uc9dc\n- acc_id : \uc720\uc800 \uc544\uc774\ub514\n- char_id : \uce90\ub9ad\ud130 \uc544\uc774\ub514\n- server : \uce90\ub9ad\ud130 \uc11c\ubc84\n- playtime : \uc77c\uc77c \ud50c\ub808\uc774\uc2dc\uac04\n- npc_kill : NPC\ub97c \uc8fd\uc778 \ud69f\uc218\n- solo_exp : \uc194\ub85c\uc0ac\ub0e5 \ud68d\ub4dd \uacbd\ud5d8\uce58\n- party_exp : \ud30c\ud2f0\uc0ac\ub0e5 \ud68d\ub4dd \uacbd\ud5d8\uce58\n- quest_exp : \ud018\uc2a4\ud2b8 \ud68d\ub4dd \uacbd\ud5d8\uce58\n- rich_monster : \ubcf4\uc2a4 \ubaac\uc2a4\ud130 \ud0c0\uaca9 \uc5ec\ubd80 (0 = \ubbf8\ud0c0\uaca9, 1 = \ud0c0\uaca9)\n- death : \uce90\ub9ad\ud130 \uc0ac\ub9dd \ud69f\uc218\n- revive : \ubd80\ud65c \ud69f\uc218\n- exp_recovery : \uacbd\ud5d8\uce58 \ubcf5\uad6c \ud69f\uc218(\uc131\ub2f9)\n- fishing : \uc77c\uc77c \ub09a\uc2dc \uc2dc\uac04\n- private_shop : \uc77c\uc77c \uac1c\uc778\uc0c1\uc810 \uc6b4\uc601 \uc2dc\uac04\n- game_money_change : \uc77c\uc77c \uc544\ub370\ub098 \ubcc0\ub3d9\ub7c9\n- enchant_count : 7\ub808\ubca8 \uc774\uc0c1 \uc544\uc774\ud15c \uc778\uccb8\ud2b8 \uc2dc\ub3c4 \ud69f\uc218\n\n## combat\n- day : \ub0a0\uc9dc\n- acc_id : \uc720\uc800 \uc544\uc774\ub514\n- char_id : \uce90\ub9ad\ud130 \uc544\uc774\ub514\n- server : \uce90\ub9ad\ud130 \uc11c\ubc84\n- class : \uc9c1\uc5c5 (\ubc11\uc5d0 \ucc38\uc870)\n- level :\ub808\ubca8 (\ubc11\uc5d0 \ucc38\uc870)\n- pledge_cnt : \ud608\ub9f9\uac04 \uc804\ud22c\uc5d0 \ucc38\uc5ec\ud55c \ud69f\uc218\n- random_attacker_cnt : \ubcf8\uc778\uc774 \ubb34\uc791\uc704\uacf5\uaca9(\ub9c9\ud53c) \uacf5\uaca9\uc744 \ud589\ud55c \ud69f\uc218\n- random_defender_cnt : \ubb34\uc791\uc704\uacf5\uaca9(\ub9c9\ud53c) \uacf5\uaca9\uc790\ub85c\ubd80\ud130 \uacf5\uaca9\uc744 \ubc1b\uc740 \ud69f\uc218\n- temp_cnt : \ub2e8\ubc1c\uc131 \uc804\ud22c \ud69f\uc218\n- same_pledge_cnt : \ub3d9\uc77c \ud608\ub9f9\uc6d0 \uac04\uc758 \uc804\ud22c \ud69f\uc218\n- etc_cnt : \uae30\ud0c0 \uc804\ud22c \ud69f\uc218\n- num_opponent : \uc804\ud22c \uc0c1\ub300 \uce90\ub9ad\ud130 \uc218\n\nclass -> 0: \uad70\uc8fc, 1: \uae30\uc0ac, 2: \uc694\uc815, 3: \ub9c8\ubc95\uc0ac, 4: \ub2e4\ud06c\uc5d8\ud504, 5: \uc6a9\uae30\uc0ac, 6: \ud658\uc220\uc0ac, 7: \uc804\uc0ac\n\nlevel -> 0: 1~4, 1: 5~9, 2: 10~14, 3: 15~19, 4: 20~24, 5: 25~29, 6: 30~34, 7: 35~39, 8: 40~44, 9: 45~49, 10: 50~54, 11: 55~59, 12: 60~64, 13: 65~69, 14: 70~74, 15: 75~79, 16: 80~84, 17: 85\uc774\uc0c1\n\n## pledge\n- day : \ub0a0\uc9dc\n- acc_id : \uc720\uc800 \uc544\uc774\ub514\n- char_id : \uce90\ub9ad\ud130 \uc544\uc774\ub514\n- server : \uce90\ub9ad\ud130 \uc11c\ubc84\n- pledge_id : \ud608\ub9f9 \uc544\uc774\ub514\n- play_char_cnt : \uac8c\uc784\uc5d0 \uc811\uc18d\ud55c \ud608\ub9f9 \uc6d0 \uc218\n- combat_char_cnt : \uc804\ud22c\uc5d0 \ucc38\uc5ec \ud55c \ud608\ub9f9 \uc6d0 \uc218\n- pledge_combat_cnt : \ud608\ub9f9\uac04 \uc804\ud22c \ud69f\uc218\uc758 \ud569\n- random_attacker_cnt : \ud608\ub9f9\uc6d0 \uc911 \ubb34\uc791\uc704\uacf5\uaca9(\ub9c9\ud53c) \uc804\ud22c\ub97c \ud589\ud55c \ud69f\uc218\uc758 \ud569\n- random_defender_cnt : \ud608\ub9f9\uc6d0 \uc911 \ubb34\uc791\uc704\uacf5\uaca9(\ub9c9\ud53c)\ub85c\ubd80\ud130 \ud53c\ud574 \ub97c \ubc1b\uc740 \ud69f\uc218\uc758 \ud569\n- same_pledge_cnt : \ub3d9\uc77c \ud608\ub9f9 \uc6d0 \uac04 \uc804\ud22c \ud69f\uc218\uc758 \ud569\n- temp_cnt : \ud608\ub9f9\uc6d0\ub4e4\uc758 \ub2e8\ubc1c\uc131 \uc804\ud22c \ud69f\uc218\uc758 \ud569\n- etc_cnt : \ud608\ub9f9\uc6d0\ub4e4\uc758 \uae30\ud0c0 \uc804\ud22c \ud69f\uc218\uc758 \ud569\n- combat_play_time : \ud608\ub9f9\uc758 \uc804\ud22c \uce90\ub9ad\ud130\ub4e4\uc758 \ud50c\ub808\uc774 \uc2dc\uac04\uc758 \ud569\n- non_combat_play_time : \ud608\ub9f9\uc758 \u975e\uc804\ud22c \uce90\ub9ad\ud130 \ud50c\ub808\uc774 \uc2dc\uac04\uc758 \ud569\n\n## trade\n- day : \uac70\ub798 \ubc1c\uc0dd \uc77c\n- time : \uac70\ub798 \ubc1c\uc0dd \uc2dc\uac04 (00:00:00 ~ 23:59:59)\n- type : \uac70\ub798 \uad6c\ubd84 (\uad50\ud658\ucc3d = 1, \uac1c\uc778\uc0c1\uc810 = 0)\n- server : \uac70\ub798 \ubc1c\uc0dd \uc11c\ubc84\n- source_acc_id : \uc8fc\ub294\/\ud310\ub9e4 \uc720\uc800 \uc544\uc774\ub514\n- source_char_id : \uc8fc\ub294\/\ud310\ub9e4 \uce90\ub9ad\ud130 \uc544\uc774\ub514\n- target_acc_id : \ubc1b\ub294\/\uad6c\ub9e4 \uc720\uc800 \uc544\uc774\ub514\n- target_char_id : \ubc1b\ub294\/\uad6c\ub9e4 \uce90\ub9ad\ud130 \uc544\uc774\ub514\n- item_type : \uc544\uc774\ud15c \uc885\ub958 weapon(\ubb34\uae30), armor(\ubc29\uc5b4\uad6c), accessory(\uc561\uc138\uc11c\ub9ac), adena(\uc544\ub370\ub098), spell(\uc2a4\ud0ac\ubd81), enchant_scroll(\uac15\ud654\uc8fc\ubb38\uc11c), etc(\uae30\ud0c0)\n- item_amount : \uac70\ub798 \uc544\uc774\ud15c \uc218\ub7c9\n- item_price : \uac70\ub798 \uac00\uaca9 - \uad50\ud658\ucc3d \uac70\ub798 (Type=1)\uc77c \uacbd\uc6b0 NA\n\n## payment\n- day : \ub0a0\uc9dc\n- acc_id : \uc720\uc800 \uc544\uc774\ub514\n- amount_spent : \uacb0\uc81c \uae08\uc561\n\n## label (target)\n- acc_id : \uc720\uc800 \uc544\uc774\ub514\n- survival_time : \uc0dd\uc874 \uae30\uac04(\uc77c)\n- amount_spent : \uc77c\ubcc4 \ud3c9\uade0 \uacb0\uc81c \uae08\uc561","70621d4d":"bi \uc11c\ubc84\uc5d0\uc11c \ud65c\ub3d9\ud55c \uae30\ub85d\uc774 \uc788\ub294 \uce90\ub9ad\ud130\ub294 \ub531 3\uac1c \ubfd0\uc774\ub2e4.  \n(\ubb50\ud558\ub294 \uc11c\ubc84\uc9c0?)","a9bc1bce":"playtime\uc774 0\uc77c \ub54c fishing\uc774 0\ubcf4\ub2e4 \ud070 \uacbd\uc6b0\uac00 \ub300\ubd80\ubd84\uc774\ub2e4.  \nplaytime\uacfc fishing\uc774 \ub458 \ub2e4 0\uc778 \uacbd\uc6b0\ub294 16\uac1c\ubfd0.","f978d385":"\uc2e0\uae30\ud574\uc11c \ud574\ubd04 ->\n$$\\lim_{n\\to\\infty} \\frac{1}{e^n-1}$$","9a49fcde":"- EDA\ub294 Sangman\ub2d8\uc758 \ucee4\ub110 https:\/\/www.kaggle.com\/parksangmmin19930217\/sangman-s \ub97c \ucc38\uace0\ud588\uc2b5\ub2c8\ub2e4.","122a5b85":"# train_activity\uc640 train_label \ubcd1\ud569","41a0e9db":"\ub09a\uc2dc\ub97c \ud0a4\ub7ec \ucc98\uc74c \uc811\uc18d\ud55c \ub0a0\uc744 \uc81c\uc678\ud558\uace0,  \n\uadf8 \ub4a4\uc5d0 \uacc4\uc18d \ub09a\uc2dc\ub97c \ucf1c\ub454\uc0ac\ub78c\ub4e4\uc774\ub77c\ub3c4 playtime \uc678\uc5d0 \ub2e4\ub978\ubcc0\uc218\uac00 \ucd5c\uc18c 1\uac1c\ub77c\ub3c4 \uae30\ub85d\ub418\uc5c8\ub2e4\uba74 playtime\ub3c4 \uae30\ub85d\uc774 \ub41c\ub2e4?  \n-> \uc798 \ubaa8\ub974\uaca0\ub2e4  \n\uc624\ub958\ub77c\uace0 \uc0dd\uac01\ud558\ub294\uac8c \ud3b8\ud560 \uac83 \uac19\ub2e4.","999f48d3":"# activity\ub791 label\ub9cc \ud569\uccd0\uc11c score \ub0b4\ubd04","9d1810bc":"\uadf8\ub9ac\uace0 \uc774 \uc0ac\ub78c\uc740 playtime\uc774 0\uc778\ub370 private_shopp\uc774 0\uc774 \uc544\ub2cc \uc0ac\ub78c\uc774\ub2e4.  \n\uadf8\ub7f0\ub370 \ub610 playtime\uc774 0\uc77c \ub54c  private_shop\uc758 \uac12\ub4e4\uc774 \ucd5c\uace0\uac12\uc774\ub2e4.  \n\uadf8\ub0e5 \uacc4\uc18d \ucf1c\ub480\ub2e4\uace0 \ud558\ub294\uac8c \ub9de\ub294\uac78\uae4c.  \n\uadfc\ub370 playtime\uc774 0\uc774 \ub418\uae30 \ubc14\ub85c \uc804\ub0a0\uc744 \ubcf4\uba74 playtime\uc740 \ub418\uac8c \uc801\uc740\ub370 private_shop\uc740 \uaf64 \ud070\uac12\uc774\ub2e4.  \n\uc704\uc5d0\uc11c \ubd24\ub358 \ub09a\uc2dc\uc758 \uacbd\uc6b0\ub3c4 \uadf8\ub807\ub2e4.  \n\n\uac1c\uc778\uc0c1\uc810 or \ub09a\uc2dc\ub97c \uacc4\uc18d \ucf1c\ub450\uace0 \uc7a0\uc218\ud0c4 \uac83 \uac19\ub2e4.  \n\uadf8\ub7f0\ub370 \uc5b4\ub5a0\ud55c \uc624\ub958\ub85c \uc778\ud574 playtime\uc774 \uc9d1\uacc4\uac00 \uc548\ub41c \uac83 \uac19\ub2e4.","e8b1f849":"\ub09a\uc2dc\ub97c \ud55c \uacbd\uc6b0\ub294 \uc804\uccb4 \ub370\uc774\ud130\uc5d0\uc11c \uc57d 23.8%\uc774\ub2e4.","7ca1981b":"\uadf8\ub798\ud504 \uadf8\ub9ac\ub2e4\ubcf4\ub2c8 \uc0c1\ubbfc\uc774\ud615\uc774\ub791 \uac19\uc740 \uadf8\ub798\ud504\uac00 \ub098\uc640\ubc84\ub838\ub2e4;;\n\n- \ud018\uc2a4\ud2b8 \uac19\uc740\uac70 \ud558\ub2e4\uac00 \uc9c8\ub824\uc11c \uac8c\uc784 \uc811\ub294\uac00\ubcf4\ub2e4;  \n- \uac1c\uc778 \uc0c1\uc810\uc740 \uc794\uc874\uc720\uc800\ub4e4\uc774 \ud655\uc2e4\ud788 \ub9ce\uc774 \uc5f0\ub2e4.(\ub9ac\ub2c8\uc9c0\ub85c \ub3c8\ubc84\ub294 \uc0ac\ub78c\ub4e4)  \n- \uc7a5\ube44 \uac15\ud654\ub294 \"\uc5d0\ub77c\ubaa8\ub974\uaca0\ub2e4 \uc811\uc744\uac74\ub370 \uac4d \uc9c8\ub7ec\ubcf4\uc790.\" \uc544\ub2c8\uba74, \"\ud130\uc84c\ub124 \uc811\ub294\ub2e4 \u3145\u3131.\" \uc544\ub2c8\uba74, \"\ubd99\uc5c8\ub2e4 \u3131\u3147\u3137 \uc5ed\uc2dc \ub09c \ub9ac\ub2c8\uc9c0 \ud558\ub824\uace0 \ud0dc\uc5b4\ub0ac\ub098\ubd10.\" \uc778 \ub4ef \ud558\ub2e4.\n- \uc794\uc874\uc720\uc800\ub4e4\uc740 \uc798 \uc8fd\uc9c0\ub3c4 \uc54a\ub294\ub2e4. \uc8fd\uc9c0\ub3c4 \uc54a\uc73c\ub2c8 \ubd80\ud65c\ub3c4 \uc548\ud55c\ub2e4.\n- \ub09a\uc2dc\ub294 \uc5b4\ub290\uc815\ub3c4\ub294 \ub204\uad6c\ub098 \ud558\ub294 \uac83 \uac19\uc9c0\ub9cc \uc77c\uc815\uc2dc\uac04 \uc774\uc0c1\uc740 \uc794\uc874\uc720\uc800\ub4e4\uc758 \ubc00\ub3c4\uac00 \uc0c1\ub300\uc801\uc73c\ub85c \ub354 \ub192\ub2e4.\n- \uc0ac\ub0e5\ub3c4 \uc880 \ud558\ub2e4\uac00 \uc9c8\ub824\uc11c \uc811\ub294\ub4ef\ud558\ub2e4; \ud558\uc9c0\ub9cc \uc5c4\uccad\ub098\uac8c \uc0ac\ub0e5\ud558\ub294 \uc0ac\ub78c\uc740 \uc794\uc874\uc720\uc800\ub2e4..\n- \uac8c\uc784\uc2dc\uac04\ub3c4 \uc77c\uc815\uc218\uc900 \uc774\ud558\ub294 \uc774\ud0c8\uc720\uc800\uac00, \uc774\uc0c1\uc740 \uc794\uc874\uc720\uc800\uac00 \ub354 \ub9ce\ub2e4.\n- npc\ub294 \ub204\uad6c\ub098 \uc8fd\uc774\ub294\ub370 \uc5b4.. \uc801\uc796\uac8c \uc8fd\uc774\ub294 \ucabd\uc5d0\uc11c\ub294 \uc774\ud0c8\uc720\uc800\uac00 \ub9ce\uc558\uace0, \uac81\ub098 \ub9ce\uc774 \uc8fd\uc774\ub294 \ucabd\uc740 \uc794\uc874\uc720\uc800\uc778 \ub4ef \ud558\ub2e4."}}