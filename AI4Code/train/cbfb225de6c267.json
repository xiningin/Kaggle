{"cell_type":{"54c3ea05":"code","d0364567":"code","63658582":"code","6bb0a883":"code","f2460c09":"code","9eec8bb5":"code","1f96bf60":"code","76fd8fab":"code","2bf26b5e":"code","f44f04f1":"code","b1fb4968":"code","7248e5dd":"code","ba232e84":"code","d0b40738":"code","a4f3f0b5":"code","0f82d3bd":"code","f58caa0f":"code","b4803498":"code","1e8a83f3":"code","6034c7a1":"code","3d31eb28":"code","ee0bbfa7":"code","6437f74f":"code","c2842a31":"code","7c989bfc":"code","919b08bf":"code","5f876993":"code","4616dc68":"code","9539aca4":"code","586255d2":"code","5f3a79f1":"code","3ffa8794":"code","5abe46f7":"code","b0bc70cb":"code","c06550ce":"code","dcb0a9ae":"code","62faa01c":"code","a67b6e3b":"code","5de1b187":"code","83f32fb9":"code","22ec236e":"code","c083eb9a":"code","fe3e3105":"code","574d64ec":"code","a788c8ca":"code","f7d234a5":"code","255e4430":"code","a77cb289":"code","fe339bcd":"code","d587544f":"code","190cc8f8":"code","a98855fd":"code","d3fdc0a6":"code","acc7ddda":"code","76af971e":"code","1eaf69ad":"code","0fae7fc4":"code","5fec022f":"code","91757c5b":"code","f1227f08":"code","80c726cf":"code","9f905680":"code","d43025c5":"code","eba7ccc3":"code","3d11b975":"code","b34f0b35":"code","a3c9f412":"code","f8ca3ca6":"code","e7897915":"markdown","7e4e8e45":"markdown","72ade2d5":"markdown","7c33e29a":"markdown","c2d4c744":"markdown","5091d45d":"markdown","d4b808bf":"markdown","694ffdbf":"markdown","d57af51b":"markdown","cc14079f":"markdown"},"source":{"54c3ea05":"# importing the data analysis libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","d0364567":"# importing the csv\nshows_data = pd.read_csv(\"..\/input\/netflix-shows\/netflix_titles.csv\")\nshows_data","63658582":"shows_data.columns","6bb0a883":"# dataypes\nshows_data.dtypes","f2460c09":"# index range\nshows_data.index","9eec8bb5":"shows_data.info()","1f96bf60":"shows_data.head()","76fd8fab":"shows_data[\"type\"].unique()","2bf26b5e":"shows_data[\"country\"].str.contains(\"India\")","f44f04f1":"shows_data[\"release_year\"].unique()","b1fb4968":"np.arange(1940, 1980 + 1, 1)","7248e5dd":"# Splitting release year data in half for better vizualization\nry_40_80 = shows_data[shows_data[\"release_year\"].isin(np.arange(1940, 1980 + 1 , 1))]\nry_81_20 = shows_data[shows_data[\"release_year\"].isin(np.arange(1981, 2020 + 1 , 1))]\nry48 = ry_40_80[\"release_year\"]\nry82 = ry_81_20[\"release_year\"]","ba232e84":"# Content analysis based on release date\nry_40_80 = shows_data[\"release_year\"]\nbins=np.arange(min(ry48), max(ry48) + 1, 1)\nfig,ax = plt.subplots(figsize=(30,10))\nax.hist(ry_40_80, bins=bins, edgecolor='black', color='yellow') # bins to spread the data year wise\nax.set_xticks(bins) # This will set the year exact with each bar\nplt.xticks(rotation=90) # rotating the year vertically in y axis\nax.set(xlabel=\"Year of Release\",\n      ylabel=\"Number of Shows\/Movies\")\nax.set_title(\"1940 to 1980\", fontsize=20)\nplt.show()","d0b40738":"# Content analysis based on release date\nry_81_20 = shows_data[\"release_year\"]\nbins=np.arange(min(ry82), max(ry82) + 1, 1)\nfig,ax = plt.subplots(figsize=(30,10))\nax.hist(ry_40_80, bins=bins, edgecolor='black', color='yellow')\nax.set_xticks(bins)\nax.set(xlabel=\"Year of Release\",\n      ylabel=\"Number of Shows\/Movies\")\nax.set_title(\"1981 to 2020\", fontsize=20)\nplt.xticks(rotation=90)\nplt.show()","a4f3f0b5":"ry = pd.Series(shows_data[\"release_year\"])\ncu = pd.Series(shows_data[\"country\"])\nyear_country_data = pd.DataFrame({\"release_year\":ry, \"country\":cu})\nyear_country_data.head()","0f82d3bd":"year_country_data[\"country\"].fillna(\"notavailable\", inplace=True)","f58caa0f":"year_country_data.tail()","b4803498":"# Converting object to byte string\nyear_country_data[\"country\"] = year_country_data[\"country\"].astype('|S')\nyear_country_data.dtypes","1e8a83f3":"year_country_data.head() # byte strings","6034c7a1":"# Using decode to remove the b'' from converted byte string\nyear_country_data[\"country\"] = year_country_data[\"country\"].str.decode('utf-8')","3d31eb28":"year_country_data.tail()","ee0bbfa7":"year_country_data[year_country_data[\"country\"] == \"notavailable\"]","6437f74f":"# Removing Content associated with no countries\nyear_country_data = year_country_data[year_country_data[\"country\"] != \"notavailable\"]\nyear_country_data.info()\nyear_country_data.to_csv('ry-country-removed-missing.csv')","c2842a31":"# Adding country count as additional column using lamba function\nyear_country_data[\"No of Countries\"] = year_country_data[\"country\"].apply(lambda x: len(x.split(\",\")))\nyear_country_data.head()","7c989bfc":"# Splitting the data by midpoint of release year\nycd_40_80 = year_country_data[year_country_data[\"release_year\"].isin(np.arange(1940, 1980, 1))]\nycd_81_20 = year_country_data[year_country_data[\"release_year\"].isin(np.arange(1981, 2020, 1))]","919b08bf":"# Confirming splitted data\nycd_40_80.info()\nycd_81_20.info()","5f876993":"# Plotting 1940 to 1980 split data with country count\nfig,(ax0, ax1) = plt.subplots(nrows=2, ncols=1 ,figsize=(30,20), sharey=True)\nax0.bar(ycd_40_80[\"release_year\"], ycd_40_80[\"No of Countries\"])\nax1.bar(ycd_81_20[\"release_year\"], ycd_81_20[\"No of Countries\"])\nplt.xlabel(\"Year of Release\", fontsize=20)\nax0.set_ylabel(\"No of Countries\", fontsize=20)\nax1.set_ylabel(\"No of Countries\", fontsize=20)\nax0.set_title(\"Year of Release v No of Countries\", fontsize=30)\nplt.show()","4616dc68":"shows_data = pd.read_csv(\"..\/input\/netflix-shows\/netflix_titles.csv\")\nshows_data.info()","9539aca4":"shows_data[\"date_added\"].isna().sum()","586255d2":"# Removing null columns\nshows_data = shows_data[pd.notnull(shows_data[\"date_added\"])]\nshows_data[\"date_added\"].isna().sum()","5f3a79f1":"# Saving the nan removed csv\nshows_data[\"date_added\"].to_csv(\"date-added-removed-nan.csv\")","3ffa8794":"shows_data.head()","5abe46f7":"shows_data[\"date_added\"] = shows_data[\"date_added\"].astype(\"|S\")\nshows_data.info()","b0bc70cb":"shows_data[\"date_added\"] = shows_data[\"date_added\"].str.decode('utf-8')\nshows_data.info()","c06550ce":"# Converting months from text to numbers, write a function to save the number of lines\nshows_data[\"date_added\"] = shows_data[\"date_added\"].str.replace(\"December\", \"12,\")\nshows_data[\"date_added\"] = shows_data[\"date_added\"].str.replace(\"November\", \"11,\")\nshows_data[\"date_added\"] = shows_data[\"date_added\"].str.replace(\"October\", \"10,\")\nshows_data[\"date_added\"] = shows_data[\"date_added\"].str.replace(\"September\", \"09,\")\nshows_data[\"date_added\"] = shows_data[\"date_added\"].str.replace(\"August\", \"08,\")\nshows_data[\"date_added\"] = shows_data[\"date_added\"].str.replace(\"July\", \"07,\")\nshows_data[\"date_added\"] = shows_data[\"date_added\"].str.replace(\"June\", \"06,\")\nshows_data[\"date_added\"] = shows_data[\"date_added\"].str.replace(\"May\", \"05,\")\nshows_data[\"date_added\"] = shows_data[\"date_added\"].str.replace(\"April\", \"04,\")\nshows_data[\"date_added\"] = shows_data[\"date_added\"].str.replace(\"March\", \"03,\")\nshows_data[\"date_added\"] = shows_data[\"date_added\"].str.replace(\"February\", \"02,\")\nshows_data[\"date_added\"] = shows_data[\"date_added\"].str.replace(\"January\", \"01,\")\nshows_data[\"date_added\"].head()","dcb0a9ae":"shows_data[\"date_added\"]","62faa01c":"shows_data[\"date_added\"] = shows_data[\"date_added\"].str.replace(\", \", \"\/\")\nshows_data.head()","a67b6e3b":"# converted date added string to datetime\nshows_data[\"date_added\"] = pd.to_datetime(shows_data[\"date_added\"], format=\"%m\/%d\/%Y\", errors='coerce')","5de1b187":"shows_data[\"day_added\"]= shows_data[\"date_added\"].dt.day\nshows_data[\"month_added\"]= shows_data[\"date_added\"].dt.month\nshows_data[\"year_added\"]= shows_data[\"date_added\"].dt.year\nshows_data.head()","83f32fb9":"shows_data = shows_data[pd.notnull(shows_data[\"day_added\"])]\nshows_data[\"day_added\"].isna().sum()","22ec236e":"shows_data[\"day_added\"] = shows_data[\"day_added\"].astype('int64')\nshows_data[\"month_added\"] = shows_data[\"month_added\"].astype('int64')\nshows_data[\"year_added\"] = shows_data[\"year_added\"].astype('int64')","c083eb9a":"shows_data[\"year_added\"].hist()","fe3e3105":"shows_data[\"year_added\"].describe()","574d64ec":"# Plotting the year added hist with a midpoint similar to year released feature\nyd = shows_data[\"year_added\"]\nbins = np.arange(np.min(yd), np.max(yd) + 1, 1)\nfig, ax = plt.subplots(figsize=(30,10), edgecolor='black')\nax.hist(shows_data[\"year_added\"], bins=bins)\nax.set_xticks(bins)\nax.set_xlabel(\"Year added\", fontsize=20)\nax.set_ylabel(\"No of movies and shows\", fontsize=20)\nax.set_title(\"No of movies\/shows with respect to year added\", fontsize=30)\nplt.style.use(\"seaborn-whitegrid\")\nplt.show()","a788c8ca":"shows_data[\"year_added\"].unique(), shows_data[\"month_added\"].unique()","f7d234a5":"bins = np.arange(np.min(shows_data[\"month_added\"]), np.max(shows_data[\"month_added\"]) + 1, 1)\nfig, ax = plt .subplots(figsize=(30,20))\nax.hist(shows_data[\"month_added\"], bins=bins)\nax.set_xticks(bins)\nax.set_xlabel(\"Month\", fontsize=20)\nax.set_ylabel(\"Number of Movies\/Shows added\", fontsize=20)\nax.set_title(\"Monthwise distrubtion of content addition across years\", fontsize=30)\nplt.show();","255e4430":"shows_data[\"month_added\"].describe()","a77cb289":"shows_data.info()","fe339bcd":"shows_data[\"type\"].unique()","d587544f":"# Converting type feature to numerical feature 0 - TV show, 1 - movie\nshows_data[\"type\"] = shows_data[\"type\"].astype('|S')\nshows_data[\"type\"] = shows_data[\"type\"].str.decode('utf-8')\nshows_data[\"type\"] = shows_data[\"type\"].str.replace(\"TV Show\", \"0\")\nshows_data[\"type\"] = shows_data[\"type\"].str.replace(\"Movie\", \"1\")","190cc8f8":"shows_data.head()\nshows_data.to_csv(\"type-numerical-feature.csv\")","a98855fd":"shows_data[\"year_added\"].unique()","d3fdc0a6":"shows_data_type = pd.Series(shows_data[\"type\"])\nshows_data_yd = pd.Series(shows_data[\"year_added\"])\nshows_data_type_year = pd.DataFrame({\"year_added\": shows_data_yd, \"type\": shows_data_type})","acc7ddda":"shows_data_type_year.groupby(['year_added', 'type']).size().plot(kind=\"bar\", \n          figsize=(30,20), \n          xlabel = \"Year Added\", \n          ylabel = \"Tv\/Show(0)-Movie(1)\",\n          title=\"Content classified distribution\",\n          fontsize=20);","76af971e":"year_country_data.info()","1eaf69ad":"yd_noc = pd.DataFrame({\"year_added\": shows_data[\"year_added\"], \n                       \"No Of countries\": year_country_data[\"No of Countries\"],\n                       \"type\": shows_data_type_year[\"type\"],\n                       \"title\": shows_data[\"title\"]\n                      })\nyd_noc.head()","0fae7fc4":"yd_noc.isna().sum()","5fec022f":"# Removing nan values\nyd_noc = yd_noc[pd.notnull(yd_noc[\"year_added\"])]","91757c5b":"# Filling no of countries nan values\nyd_noc[\"No Of countries\"] = yd_noc[\"No Of countries\"].fillna(0)","f1227f08":"yd_noc[\"year_added\"] = yd_noc[\"year_added\"].astype('int64')\nyd_noc[\"No Of countries\"] = yd_noc[\"No Of countries\"].astype('int64')","80c726cf":"yd_noc.info()","9f905680":"yd_noc.head()","d43025c5":"yd_noc.groupby(['year_added', 'No Of countries']).count().plot(kind=\"bar\",\n                                                              figsize=(30,20))","eba7ccc3":"yd_noc_count = yd_noc.groupby(['year_added', 'No Of countries'])[\"type\"].count().reset_index(name=\"count\")","3d11b975":"yd_noc_count.head()","b34f0b35":"fig, ax = plt.subplots(figsize=(30,20))\nscatter = ax.scatter(\n        x = yd_noc_count[\"No Of countries\"],\n        y = yd_noc_count[\"count\"],\n        c = yd_noc_count[\"year_added\"],\n        cmap='summer',\n        s=20**2)\n\n# Setup a mean line\nax.axhline(y=yd_noc_count[\"count\"].mean(), \n            color='b', \n            linestyle='--', \n            label=\"Average\")\n\n# Setting xticks\nnoc = yd_noc_count[\"No Of countries\"]\nplt.xticks(np.arange(np.min(noc), np.max(noc) + 1, 1))\n\n# Setting yticks\ncount = yd_noc_count[\"count\"]\ninc = np.std(yd_noc_count[\"count\"])\nplt.yticks(np.arange(np.min(count), np.max(count) + inc, inc))\n\n# zip joins x and y coordinates in pairs\nfor x,y in zip(noc,count):\n\n    #label = f\"({x},{y})\"\n    label_unf = yd_noc_count[(yd_noc_count[\"No Of countries\"] == x) & (yd_noc_count[\"count\"] == y)]\n    label_year = label_unf[\"year_added\"].values\n    label = f\"({label_year})\"\n    #label = f\"({label})\"\n\n    #arrowprops=dict(arrowstyle='<-', color='blue', linewidth=1, mutation_scale=150)\n    plt.annotate(label, # this is the text\n                 (x,y), # this is the point to label\n                 textcoords=\"offset points\", # how to position the text\n                 xytext=(0,10), # distance from text to points (x,y)\n                 ha='center') \n\n# Setting legend\nax.legend(*scatter.legend_elements(), title=\"Year\", loc=0, fontsize=\"xx-large\")\n\n# Setting labels and title\nax.set_xlabel(\"No of Countries\", fontsize=20)\nax.set_xlabel(\"No of Movies\/TV shows\", fontsize=20)\nax.set_title(\"No of Countries v No of Movies\/TV shows\", fontsize=25)\n\nplt.show()","a3c9f412":"# Splitting the data for better plotting\nyd_noc_count_1 = yd_noc_count[yd_noc_count[\"count\"] < 677]\nyd_noc_count_2 = yd_noc_count[yd_noc_count[\"count\"] > 677]\n\n# Setting up the fig\nfig, ax = plt.subplots(figsize=(30,20))\nscatter = ax.scatter(\n        x = yd_noc_count_1[\"No Of countries\"],\n        y = yd_noc_count_1[\"count\"],\n        c = yd_noc_count_1[\"year_added\"],\n        cmap='summer',\n        s=20**2)\n\n# Setup a mean line\nax.axhline(y=yd_noc_count_1[\"count\"].mean(), \n            color='b', \n            linestyle='--', \n            label=\"Average\")\n\n# Setting legend\nax.legend(*scatter.legend_elements(), title=\"Year\", loc=0, fontsize=\"xx-large\")\n\n# Setting xticks\nnoc = yd_noc_count_1[\"No Of countries\"]\nplt.xticks(np.arange(np.min(noc), np.max(noc) + 1, 1))\n\n# Setting yticks\ncount = yd_noc_count_1[\"count\"]\n#inc = np.std(yd_noc_count[\"count\"]).astype('int64')\nplt.yticks(np.arange(np.min(count), np.max(count) + 25, 25))\n\n# zip joins x and y coordinates in pairs\nfor x,y in zip(noc,count):\n\n    #label = f\"({x},{y})\"\n    label_unf = yd_noc_count_1[(yd_noc_count_1[\"No Of countries\"] == x) & (yd_noc_count_1[\"count\"] == y)]\n    label_year = label_unf[\"year_added\"].values\n    label = f\"({label_year}, {y})\"\n    #label = f\"({label})\"\n\n    #arrowprops=dict(arrowstyle='<-', color='blue', linewidth=1, mutation_scale=150)\n    plt.annotate(label, # this is the text\n                 (x,y), # this is the point to label\n                 textcoords=\"offset points\", # how to position the text\n                 xytext=(0,10), # distance from text to points (x,y)\n                 ha='right')\n\nax.set_xlabel(\"No of Countries\", fontsize=20)\nax.set_xlabel(\"No of Movies\/TV shows\", fontsize=20)\nax.set_title(\"No of Countries v No of Movies\/TV shows\", fontsize=25)\n    \nplt.show()","f8ca3ca6":"# Splitting the data for better plotting\nyd_noc_count_2 = yd_noc_count[yd_noc_count[\"count\"] > 677]\n\n# Setting up the fig\nfig, ax = plt.subplots(figsize=(20,10))\nscatter = ax.scatter(\n        x = yd_noc_count_2[\"No Of countries\"],\n        y = yd_noc_count_2[\"count\"],\n        c = yd_noc_count_2[\"year_added\"],\n        cmap='summer',\n        s=20**2)\n\n# Setup a mean line\nax.axhline(y=yd_noc_count_2[\"count\"].mean(), \n            color='b', \n            linestyle='--', \n            label=\"Average\")\n\n# Setting legend\nax.legend(*scatter.legend_elements(), title=\"Year\", loc=0, fontsize=\"xx-large\")\n\n# Setting xticks\nnoc = yd_noc_count_2[\"No Of countries\"]\nplt.xticks(np.arange(np.min(noc), np.max(noc) + 1, 1))\n\n# Setting yticks\ncount = yd_noc_count_2[\"count\"]\n#inc = np.std(yd_noc_count[\"count\"]).astype('int64')\nplt.yticks(np.arange(np.min(count), np.max(count) + 250, 250))\n\n# zip joins x and y coordinates in pairs\nfor x,y in zip(noc,count):\n\n    #label = f\"({x},{y})\"\n    label_unf = yd_noc_count_2[(yd_noc_count_2[\"No Of countries\"] == x) & (yd_noc_count_2[\"count\"] == y)]\n    label_year = label_unf[\"year_added\"].values\n    label = f\"({label_year})\"\n    #label = f\"({label})\"\n\n    #arrowprops=dict(arrowstyle='<-', color='blue', linewidth=1, mutation_scale=150)\n    plt.annotate(label, # this is the text\n                 (x,y), # this is the point to label\n                 textcoords=\"offset points\", # how to position the text\n                 xytext=(0,10), # distance from text to points (x,y)\n                 ha='right') \nplt.show()","e7897915":"My blog on the same is available at - https:\/\/jpchii.github.io\/2021\/03\/16\/netflixdataanalysis.html","7e4e8e45":"## Detailed description on the dataset columns\n\n* show_id - A unique id assigned to every available tv show or movie\n* type - What type of content is it - `TV Show or Movie`\n* title - Title of the content\n* director - director of the content\n* cast - cast(actors) of the content\n* country - Country where the movie \/ show was produced\n* date_added - Date on content added to netflix\n* rating\n* duration - Duration in minutes or seasons\n* listed_in - Genre\n* description - short description about the movie\/show","72ade2d5":"## Analysis of number of `country`  and `No of Movies\/Tv shows` feature with `year_added`","7c33e29a":"## Analaysing the columns of the dataset","c2d4c744":"### Analysis based on release year","5091d45d":"## Analysis of number of `country` feature with `year_released`","d4b808bf":"**Note:** *On seeing the graph the no of countries increased from a peak of 5 in midpoint to peak of 12 in second half*\n\nThere's no effect on no of countries with movies release per year, this might be purely due to technology advancement in further years","694ffdbf":"**Note:** *Out of 7784 shows\/movies 507 is not associated with any country*","d57af51b":"## Type of content added analysis with respect to year added","cc14079f":"## Analysis based on the date added to netflix"}}