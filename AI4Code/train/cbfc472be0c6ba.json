{"cell_type":{"a5813568":"code","50bfcb2b":"code","9fe02f69":"code","c958cc51":"code","455d407c":"code","56da4f4d":"code","33b9864d":"code","eef0e943":"code","ba3dc6a0":"code","de40d8ce":"markdown","98cc788c":"markdown","c2fb0d01":"markdown","6ce1e1bf":"markdown","923c5922":"markdown","fc7f93e8":"markdown","493c245f":"markdown","b71c9c07":"markdown","248b8776":"markdown","7fd95144":"markdown","f512f0b2":"markdown","28796e43":"markdown","e04b143d":"markdown","f4abbfd7":"markdown"},"source":{"a5813568":"import torch\nimport torch.nn as nn\nimport transformers\nfrom transformers import (\n    BertPreTrainedModel,\n    BertConfig,\n    RobertaConfig,\n    BertModel,\n    RobertaModel\n)","50bfcb2b":"BERT_PATH = '..\/input\/bert-base-uncased'\nROBERTA_PATH = '..\/input\/roberta-base'","9fe02f69":"bert_config = BertConfig.from_pretrained(\n    f'{BERT_PATH}\/config.json'\n)\nbert_config.output_hidden_states = True\nroberta_config = RobertaConfig.from_pretrained(\n    f'{ROBERTA_PATH}\/config.json',\n)\nroberta_config.output_hidden_states = True","c958cc51":"class BERTEmbedder(BertPreTrainedModel):\n    def __init__(self, config=bert_config, freeze_weights=False):\n        super().__init__(config=bert_config)\n        self.bert = BertModel.from_pretrained(\n            BERT_PATH,\n            config=bert_config\n        )\n        if freeze_weights is True:\n            for param in self.bert.parameters():\n                param.requires_grad = False\n\n    def forward(self, ids, mask, token_type_ids):\n        _, _, hidden_states = self.bert(\n            ids,\n            mask,\n            token_type_ids\n        )\n        return hidden_states\n\n\nclass RoBERTaEmbedder(BertPreTrainedModel):\n    def __init__(self, config=roberta_config, freeze_weights=False):\n        super().__init__(config=roberta_config)\n        self.roberta = RobertaModel.from_pretrained(\n            ROBERTA_PATH,\n            config=roberta_config\n        )\n        if freeze_weights is True:\n            for param in self.roberta.parameters():\n                param.requires_grad = False\n\n    def forward(self, ids, mask, token_type_ids):\n        _, _, hidden_states = self.roberta(\n            ids,\n            mask,\n            token_type_ids\n        )\n        return hidden_states\n    ","455d407c":"class ClassifierConcatLastTwo(nn.Module):\n    \"\"\" concatenate output of last two hidden layers \"\"\"\n    def __init__(self, hidden_size=768):\n        super().__init__()\n        self.drop_out = nn.Dropout(0.1)\n        self.linear = nn.Linear(hidden_size * 2, 2)\n        torch.nn.init.normal_(self.linear.weight, std=0.02)\n        nn.init.normal_(self.linear.bias, 0)\n\n    def forward(self, hidden_states):\n        out = torch.cat((hidden_states[-1], hidden_states[-2]), dim=-1)\n        out = self.drop_out(out)\n        logits = self.linear(out)\n        start_logits, end_logits = logits.split(1, dim=-1)\n        start_logits = start_logits.squeeze(-1)\n        end_logits = end_logits.squeeze(-1)\n        return start_logits, end_logits\n\n\nclass ClassifierConcatLastThree(nn.Module):\n    \"\"\" concatenate output of last three hidden layers \"\"\"\n    def __init__(self, hidden_size=768):\n        super().__init__()\n        self.drop_out = nn.Dropout(0.1)\n        self.linear = nn.Linear(hidden_size * 3, 2)\n        torch.nn.init.normal_(self.linear.weight, std=0.02)\n        nn.init.normal_(self.linear.bias, 0)\n\n    def forward(self, hidden_states):\n        out = torch.cat(\n            (hidden_states[-1], hidden_states[-2], hidden_states[-3]),\n            dim=-1\n        )\n        out = self.drop_out(out)\n        logits = self.linear(out)\n        start_logits, end_logits = logits.split(1, dim=-1)\n        start_logits = start_logits.squeeze(-1)\n        end_logits = end_logits.squeeze(-1)\n        return start_logits, end_logits\n\n\nclass ClassifierAverageLastThree(nn.Module):\n    \"\"\" average output of last three hidden layers \"\"\"\n    def __init__(self, hidden_size=768):\n        super().__init__()\n        self.drop_out = nn.Dropout(0.1)\n        self.linear = nn.Linear(hidden_size, 2)\n        torch.nn.init.normal_(self.linear.weight, std=0.02)\n        nn.init.normal_(self.linear.bias, 0)\n\n    def forward(self, hidden_states):\n        out = torch.stack(\n            (hidden_states[-1], hidden_states[-2], hidden_states[-3])\n        )\n        out = self.drop_out(out)\n        logits = self.linear(out)\n        start_logits, end_logits = logits.split(1, dim=-1)\n        start_logits = start_logits.squeeze(-1)\n        end_logits = end_logits.squeeze(-1)\n        return start_logits, end_logits","56da4f4d":"class CombinedModel(nn.Module):\n    def __init__(self, embedder, classifier):\n        super().__init__()\n        self.embedder = embedder\n        self.classifier = classifier\n\n    def forward(self, ids, mask, token_type_ids):\n        hidden_states = self.embedder(ids, mask, token_type_ids)\n        logits = self.classifier(hidden_states)\n        start_logits = logits[0]\n        end_logits = logits[1]\n        return start_logits, end_logit","33b9864d":"EMBEDDER_DISPATCHER = {\n    'bert': BERTEmbedder(),\n    'roberta': RoBERTaEmbedder()\n}\n\nCLASSIFIER_DISPATCHER = {\n    'concat_last_two': ClassifierConcatLastTwo(),\n    'concat_last_three': ClassifierConcatLastThree(),\n    'average_last_three': ClassifierAverageLastThree()\n}","eef0e943":"embedder = EMBEDDER_DISPATCHER['bert']\nclassifier = CLASSIFIER_DISPATCHER['concat_last_two']\nmodel = CombinedModel(embedder, classifier)\nprint(model)","ba3dc6a0":"embedder = EMBEDDER_DISPATCHER['roberta']\nclassifier = CLASSIFIER_DISPATCHER['concat_last_two']\nmodel = CombinedModel(embedder, classifier)\nprint(model)","de40d8ce":"### RoBERTa embedder with classifier that concatenates last two hidden layer ouputs","98cc788c":"## Models as two distinct parts\n\nIn this competiton NLP transformer-based models like BERT consist of two parts:\n\n1. an embedding layer that embeds a batch of integer vectors into a batch of dense vectors\n2. a classification head that classifies a batch of dense vectors into a batch of logits\n\nEmbedding layers such as BERT, RoBERTa, XLNet, etc. are essentially static: there are no hyperparameters to tune. \nInstead, a model can be improved by tweaking the classification head by:\n\n* selecting which of the 12 transformer hidden layer outputs to use and in which way (sum, average, concatenate, etc.)\n* choosing the hyperparameters of the classification layer (How many layers? Which dropout?)\n\nI was wondering if there's a way to define many combination of embedders and transformers without making copies of the entire model's code.\n\n\n### Why bother?\n\nThe advantages of this [separation of concerns](https:\/\/en.wikipedia.org\/wiki\/Separation_of_concerns) are obvious:\n\n* bugs become less likely and the code more readable\n* we can use the same classifier across multiple embedders\n\n### Combining models in PyTorch\n\nI found a [post on the PyTorch forums](https:\/\/discuss.pytorch.org\/t\/combining-trained-models-in-pytorch\/28383) that gave me inspiration on how to accomplish this.\nIn the code below I show how a PyTorch model can be constructed as a combination of an embedder and a classifier. This works because BertModel is a PyTorch torch.nn.Module sub-class.","c2fb0d01":"Below I defined three classifiers that accept either 2 or 3 of the transformer hidden layer outputs.\nThey calculate the logits for the sequences start and end token index.","6ce1e1bf":"### BERT embedder with classifier that concatenates last two hidden layer ouputs","923c5922":"## 5. Examples","fc7f93e8":"I hope you enjoyed this little PyTorch trick!","493c245f":"To make experimentation easy, I put the various classes into Python dicts which is an idea I took from Abhishek.","b71c9c07":"## 4. Class to combine an embedder with a classifier","248b8776":"The class below combines an embedder with a classifier by combining their forward methods into one forward method.","7fd95144":"Here we define two embedders that return all 12 transformer hidden layer outputs. \nTherefore it's important to set the `output_hidden_states` to True in the model's config.\nI also defined a parameter `freeze_weights` to freeze the weights of the embedder during training.\nThis way, we can quickly experiment with different classifiers without retraining the embedder's parameters. ","f512f0b2":"## 2. Two embedders","28796e43":"## 3. Three classes of classifiers","e04b143d":"## 1. Models and their config\n\nI use a BERT and RoBERTa model and config from public datasets on Kaggle.","f4abbfd7":"Below I show some examples of how to use the dicts to create various model combinations."}}