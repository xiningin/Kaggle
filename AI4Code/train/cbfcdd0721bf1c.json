{"cell_type":{"264263fb":"code","d227666e":"code","a064be60":"code","4d6e5d40":"code","3d621e4d":"code","0849e03e":"code","9a8d5781":"code","b23aa9c6":"code","470e24d1":"code","91cb8f5a":"code","fd04a60d":"markdown","92c3daed":"markdown","8859185f":"markdown","59d76866":"markdown","770e912a":"markdown","31de9564":"markdown","039b1acc":"markdown"},"source":{"264263fb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d227666e":"import numpy as np \nimport pandas as pd \nimport os\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.optimizers import RMSprop\nfrom keras import regularizers\nfrom keras.layers.core import Dropout","a064be60":"train_dir = '..\/input\/covid19-xray-dataset-train-test-sets\/xray_dataset_covid19\/train'\nvalidation_dir ='..\/input\/covid19-xray-dataset-train-test-sets\/xray_dataset_covid19\/test'","4d6e5d40":"train_normal_dir = os.path.join(train_dir,'NORMAL')\ntrain_pneumonia_dir = os.path.join(train_dir,'PNEUMONIA')\nvalidation_normal_dir = os.path.join(validation_dir,'NORMAL')\nvalidation_pneumonia_dir = os.path.join(validation_dir,'PNEUMONIA')","3d621e4d":"train_normal_names = os.listdir(train_normal_dir)\nprint(train_normal_names[:10])\n\ntrain_pneumonia_names = os.listdir(train_pneumonia_dir)\nprint(train_pneumonia_names[:10])","0849e03e":"print('total training normal-rays :', len(os.listdir(train_normal_dir)))\nprint('total training Pneumonia x-rays:', len(os.listdir(train_pneumonia_dir)))\nprint('total validation normal-rays :', len(os.listdir(validation_normal_dir)))\nprint('total validation Pneumonia x-rays:', len(os.listdir(validation_pneumonia_dir)))","9a8d5781":"train_data_generator = ImageDataGenerator(rescale = 1\/255)\nvalidation_data_generator = ImageDataGenerator(rescale = 1\/255)\n\ntrain_generator = train_data_generator.flow_from_directory(\n        train_dir,\n        target_size = (150,150),\n        batch_size = 16,\n        class_mode = 'binary')\n\nvalidation_generator = validation_data_generator.flow_from_directory(\n        validation_dir,\n        target_size = (150,150),\n        batch_size = 16,\n        class_mode = 'binary')\n","b23aa9c6":"model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu', input_shape=(150, 150, 3)),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Dropout(0.25),\n    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Dropout(0.25),\n    tf.keras.layers.Conv2D(16, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Dropout(0.25),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(512, activation='relu'),\n    tf.keras.layers.Dropout(0.25),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.compile(loss='binary_crossentropy',\n              optimizer=RMSprop(lr=0.001),\n              metrics=['accuracy'])\n\n","470e24d1":"history=model.fit_generator(generator=train_generator,    \n                            epochs = 15,\n                            validation_data = validation_generator,\n                           )","91cb8f5a":"accuracy = history.history['accuracy']\nval_accuracy  = history.history['val_accuracy']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nplt.figure(figsize=(15,10))\n\nplt.subplot(2, 2, 1)\nplt.plot(accuracy, label = \"Training accuracy\")\nplt.plot(val_accuracy, label=\"Validation accuracy\")\nplt.legend()\nplt.title(\"Training vs validation accuracy\")\n\n\nplt.subplot(2,2,2)\nplt.plot(loss, label = \"Training loss\")\nplt.plot(val_loss, label=\"Validation loss\")\nplt.legend()\nplt.title(\"Training vs validation loss\")\n\nplt.show()\n","fd04a60d":"<font size=\"5\" color='red'>Results<\/font> ","92c3daed":"<font size=\"5\" color='red'>Import Libraries<\/font> ","8859185f":"<font size=\"5\" color='red'>Data Loading<\/font> ","59d76866":"<font size=\"5\" color='red'>Data Path<\/font> ","770e912a":"<font size=\"5\" color='red'>Data Generate<\/font>  ","31de9564":"> <font size=\"6\" color='red'>STEPS<\/font> \n> * Import Libraries\n> * Data Path\n> * Data Loading\n> * Data Generate\n> * Model Create\n> * Results","039b1acc":"<font size=\"5\" color='red'>Model Create<\/font> "}}