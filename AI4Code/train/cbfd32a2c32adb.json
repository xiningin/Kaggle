{"cell_type":{"fde51fe2":"code","4e0ecc95":"code","aa1ee743":"code","26349f02":"code","d3a5d61c":"code","1127dea3":"code","d6e863a7":"code","c3189512":"code","9139fa29":"code","534ca6c9":"code","d7e5cbc1":"code","a9cf0b59":"code","41c3d1f9":"code","13b2fb1c":"code","1a6053a4":"code","237f9ee6":"code","71dc5211":"code","f66313c3":"code","338121a7":"code","872fc3a1":"code","ab1ed769":"code","310556a3":"code","d092b139":"code","58656e26":"code","0695cd11":"code","60f7a92e":"code","54ad7fca":"code","ebe55a82":"code","b655f999":"code","7dc4cd05":"code","f70e32ff":"code","4bceac1e":"markdown","b4e63532":"markdown","30be20a2":"markdown","1977a42b":"markdown","70db5edb":"markdown","9cfeff77":"markdown","49fbb70e":"markdown"},"source":{"fde51fe2":"import sys\npackage_dir = \"..\/input\/pystacknet\/repository\/h2oai-pystacknet-af571e0\"\nsys.path.append(package_dir)","4e0ecc95":"!rm -r \/opt\/conda\/lib\/python3.6\/site-packages\/lightgbm\n!git clone --recursive https:\/\/github.com\/Microsoft\/LightGBM\n!apt-get install -y -qq libboost-all-dev","aa1ee743":"%%bash\ncd LightGBM\nrm -r build\nmkdir build\ncd build\ncmake -DUSE_GPU=1 -DOpenCL_LIBRARY=\/usr\/local\/cuda\/lib64\/libOpenCL.so -DOpenCL_INCLUDE_DIR=\/usr\/local\/cuda\/include\/ ..\nmake -j$(nproc)","26349f02":"!cd LightGBM\/python-package\/;python3 setup.py install --precompile","d3a5d61c":"!mkdir -p \/etc\/OpenCL\/vendors && echo \"libnvidia-opencl.so.1\" > \/etc\/OpenCL\/vendors\/nvidia.icd\n!rm -r LightGBM","1127dea3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nprint(os.listdir(\"..\/input\"))","d6e863a7":"import warnings\nwarnings.filterwarnings(\"ignore\")","c3189512":"import gc\ngc.enable()","9139fa29":"from pathlib import Path","534ca6c9":"from lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\nfrom xgboost import XGBClassifier\nfrom pystacknet.pystacknet import StackNetClassifier","d7e5cbc1":"input_path = Path('..\/input\/ieee-fraud-detection')","a9cf0b59":"from sklearn.preprocessing import LabelEncoder","41c3d1f9":"train_transaction = pd.read_csv(input_path\/'train_transaction.csv', index_col='TransactionID')\ntest_transaction = pd.read_csv(input_path\/'test_transaction.csv', index_col='TransactionID')\n\ntrain_identity = pd.read_csv(input_path\/'train_identity.csv', index_col='TransactionID')\ntest_identity = pd.read_csv(input_path\/'test_identity.csv', index_col='TransactionID')\n\nsample_submission = pd.read_csv(input_path\/'sample_submission.csv', index_col='TransactionID')","13b2fb1c":"train = train_transaction.merge(train_identity, how='left', left_index=True, right_index=True)\ntest = test_transaction.merge(test_identity, how='left', left_index=True, right_index=True)\n\nprint(train.shape)\nprint(test.shape)","1a6053a4":"y_train = train['isFraud'].copy()\ny_train = y_train.astype('category')\ndel train_transaction, train_identity, test_transaction, test_identity\ngc.collect()","237f9ee6":"# Drop target, fill in NaNs\nX_train = train.drop('isFraud', axis=1)\nX_test = test.copy()\ndel train, test\ngc.collect()","71dc5211":"X_train = X_train.fillna(-999)\nX_test = X_test.fillna(-999)","f66313c3":"# Label Encoding\nfor f in X_train.columns:\n    if X_train[f].dtype=='object' or X_test[f].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(X_train[f].values) + list(X_test[f].values))\n        X_train[f] = lbl.transform(list(X_train[f].values))\n        X_test[f] = lbl.transform(list(X_test[f].values))","338121a7":"# From kernel https:\/\/www.kaggle.com\/gemartin\/load-data-reduce-memory-usage\n# WARNING! THIS CAN DAMAGE THE DATA \ndef reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df","872fc3a1":"%%time\nX_train = reduce_mem_usage(X_train)\nX_test = reduce_mem_usage(X_test)","ab1ed769":"gc.collect()","310556a3":"# LGBMClassifier with GPU\n# Params from https:\/\/www.kaggle.com\/kirankunapuli\/ieee-fraud-lightgbm-with-gpu\n\nclf_lgb = LGBMClassifier(\n    max_bin=63,\n    num_leaves=255,\n    num_iterations=1000,\n    learning_rate=0.01,\n    tree_learner=\"serial\",\n    task=\"train\",\n    is_training_metric=False,\n    min_data_in_leaf=1,\n    min_sum_hessian_in_leaf=100,\n    sparse_threshold=1.0,\n    device=\"gpu\",\n    num_thread=-1,\n    save_binary=True,\n    seed=42,\n    feature_fraction_seed=42,\n    bagging_seed=42,\n    drop_seed=42,\n    data_random_seed=42,\n    objective=\"binary\",\n    boosting_type=\"gbdt\",\n    verbose=1,\n    metric=\"auc\",\n    is_unbalance=True,\n    boost_from_average=False,\n)","d092b139":"# XGBClassifier with GPU\n# Params from https:\/\/www.kaggle.com\/xhlulu\/ieee-fraud-xgboost-with-gpu-fit-in-40s\n\nclf_xgb = XGBClassifier(\n    n_estimators=1000,\n    max_depth=9,\n    learning_rate=0.05,\n    subsample=0.9,\n    colsample_bytree=0.9,\n    missing=-999,\n    n_jobs=-1,\n    random_state=42,\n    tree_method=\"gpu_hist\",\n)","58656e26":"# CatBoostClassifier with GPU\n# Params from https:\/\/www.kaggle.com\/vincentlugat\/ieee-catboost-gpu-baseline-5-kfold\n\nparam_cb = {\n        'learning_rate': 0.2,\n        'bagging_temperature': 0.1, \n        'l2_leaf_reg': 30,\n        'depth': 12, \n        'max_leaves': 48,\n        'max_bin':255,\n        'iterations' : 1000,\n        'task_type':'GPU',\n        'loss_function' : \"Logloss\",\n        'objective':'CrossEntropy',\n        'eval_metric' : \"AUC\",\n        'bootstrap_type' : 'Bayesian',\n        'random_seed':42,\n        'early_stopping_rounds' : 100,\n}\nclf_ctb = CatBoostClassifier(silent=True, **param_cb)","0695cd11":"gc.collect()","60f7a92e":"models = [  ######## First level ########\n            [clf_lgb, clf_xgb, clf_ctb],\n            ######## Second level ########\n            [clf_lgb],\n]","54ad7fca":"# StackNetClassifier with GPU\n\nmodel = StackNetClassifier(\n    models,\n    metric=\"auc\",\n    folds=2,\n    restacking=False,\n    use_retraining=False,\n    use_proba=True,\n    random_state=42,\n    verbose=1,\n)","ebe55a82":"model.fit(X_train, y_train)","b655f999":"gc.collect()","7dc4cd05":"features = [c for c in X_train.columns]","f70e32ff":"sample_submission['isFraud'] = model.predict_proba(X_test[features].values)[:,1]\nsample_submission.to_csv('submission_stacknet.csv')","4bceac1e":"## StackNet Installation","b4e63532":"## Preprocessing","30be20a2":"### LightGBM GPU Installation\nFull implementation and tutorial at https:\/\/www.kaggle.com\/kirankunapuli\/ieee-fraud-lightgbm-with-gpu","1977a42b":"## StackNet Model","70db5edb":"This kernel demonstrates a way of using [StackNet](https:\/\/github.com\/h2oai\/pystacknet) with LightGBM, XGBoost & Catboost with GPU support in Kaggle kernels.","9cfeff77":"## Submission","49fbb70e":"## Imports"}}