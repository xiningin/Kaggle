{"cell_type":{"b72f17ab":"code","c3084db7":"code","5addd4a3":"code","e807940e":"code","7fb23e89":"code","814f913c":"code","f454baa7":"code","04954bbf":"code","60cf7e75":"code","d34033ea":"code","4429f036":"markdown","2d2c8e8c":"markdown"},"source":{"b72f17ab":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c3084db7":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport matplotlib.animation as animation\nfrom IPython.display import HTML\nfrom datetime import datetime,timedelta\nimport datetime as dt","5addd4a3":"df=pd.read_csv('..\/input\/comulative-confirmed-case-in-indonesia\/Comulative Confirmed Case in Indonesia.csv')\nFMT = '%m\/%d\/%Y'\ndate = df['Date']\ndf['Date'] = date.map(lambda x : (datetime.strptime(x, FMT) - datetime.strptime(\"3\/02\/2020\", FMT)).days)\ndf.info()","e807940e":"def data(prov,pulau):\n    dateprov=pd.DataFrame(df[['Date',prov]],)\n    data=dateprov.rename(columns={prov:'Kasus'})\n    prov=[prov]*len(data)\n    data['Prov']=prov\n    data['Pulau']=pulau\n    return data","7fb23e89":"Aceh=data('Aceh','Sumatera')\nBali=data('Bali','Bali')\nJakarta=data('DKI Jakarta','Jawa')\njateng=data('jateng','Jawa')\njatim=data('jatim','Jawa')\nSulut=data('Sulut','Sulawesi')\nSulsel=data('Sulsel','Sulawesi')\nPapua=data('Papua','Papua')\nJabar=data('Jabar','Jawa')","814f913c":"df=pd.concat([Aceh,Bali,Jakarta,Jabar,jateng,jatim,Sulut,Sulsel,Papua])","f454baa7":"current_date = 128\ndff = (df[df['Date'].eq(current_date)]\n       .sort_values(by='Kasus', ascending=True)\n       .head(10))\ndff","04954bbf":"colors = dict(zip(\n    ['Jawa', 'Sumatera', 'Bali', 'Sulawesi',\n     'Papua'],\n    ['#adb0ff', '#ffb3ff', '#90d595', '#e48381',\n     '#aafbff']\n))\ngroup_lk = df.set_index('Prov')['Pulau'].to_dict()","60cf7e75":"fig, ax = plt.subplots(figsize=(15, 12))\ndef draw_barchart(Date):\n    dff = df[df['Date'].eq(Date)].sort_values(by='Kasus', ascending=True).tail(10)\n    ax.clear()\n    ax.barh(dff['Prov'], dff['Kasus'], color=[colors[group_lk[x]] for x in dff['Prov']])\n    dx = dff['Kasus'].max() \/ 200\n    for i, (Kasus, Prov) in enumerate(zip(dff['Kasus'], dff['Prov'])):\n        ax.text(Kasus-dx, i,     Prov,           size=14, weight=600, ha='right', va='bottom')\n        ax.text(Kasus-dx, i-.25, group_lk[Prov], size=10, color='#444444', ha='right', va='baseline')\n        ax.text(Kasus+dx, i,     f'{Kasus:,.0f}',  size=14, ha='left',  va='center')\n    # ... polished styles\n    ax.text(1, 0.4, Date, transform=ax.transAxes, color='#777777', size=46, ha='right', weight=800)\n    ax.text(0, 1.06, 'Jumlah Kasus Positif', transform=ax.transAxes, size=12, color='#777777')\n    ax.xaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.0f}'))\n    ax.xaxis.set_ticks_position('top')\n    ax.tick_params(axis='x', colors='#777777', labelsize=12)\n    ax.set_yticks([])\n    ax.margins(0, 0.01)\n    ax.grid(which='major', axis='x', linestyle='-')\n    ax.set_axisbelow(True)\n    ax.text(0, 1.12, 'BarChart Race untuk beberapa provinsi',\n            transform=ax.transAxes, size=24, weight=600, ha='left')\n    ax.text(1, 0, 'by @ade.kur; credit @adekurniawanputrahadi@gmail.com', transform=ax.transAxes, ha='right',\n            color='#777777', bbox=dict(facecolor='white', alpha=0.8, edgecolor='white'))\n    plt.box(False)\n    \ndraw_barchart(128)","d34033ea":"import matplotlib.animation as animation\nfrom IPython.display import HTML\nfig, ax = plt.subplots(figsize=(10, 8))\nanimator = animation.FuncAnimation(fig, draw_barchart, frames=range(0,128))\nHTML(animator.to_html5_video()) \n# bisa menggunakan animator.to_html5_video() ataupun animator.save()","4429f036":"# Input Data","2d2c8e8c":"# Barchart Race"}}