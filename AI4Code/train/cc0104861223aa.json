{"cell_type":{"f7e43115":"code","d0bef00f":"code","27e5e680":"code","7f16759c":"code","d43c784e":"code","094cec5c":"code","5309423b":"code","ffe3e3b4":"code","a02bd933":"code","8f732d9b":"code","c0c749a2":"code","225418c9":"code","35c29a74":"code","3a666d7c":"code","225a1b36":"code","8d1b51d1":"code","0a9541d6":"code","99720054":"code","07c10961":"code","6bdded05":"code","814d009d":"code","d4b65027":"code","a4459983":"code","afe699e2":"code","7eae9d91":"code","95855d2f":"code","d4bf6214":"code","377c3740":"code","236119ba":"code","f2627f13":"markdown","de6578d6":"markdown","0f2e4ecd":"markdown","040a64be":"markdown","c5fceeb9":"markdown","e5cc354e":"markdown","fe735bc2":"markdown","e5328d77":"markdown","a7b9215b":"markdown","1fd11db3":"markdown","cc177d88":"markdown","0dc22c4d":"markdown"},"source":{"f7e43115":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid')\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d0bef00f":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","27e5e680":"train_df.columns","7f16759c":"train_df.head()","d43c784e":"train_df.describe()","094cec5c":"train_df.info()","5309423b":"def bar_plot(variable):\n    \"\"\"\n        input: veriable ex: \"Sex\"\n        output: bar plot & value count \n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    # count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    # visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n{}\".format(variable,varValue))\n    ","ffe3e3b4":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)","a02bd933":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","8f732d9b":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","c0c749a2":"numericVar = [\"Fare\",\"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","225418c9":"# Pclass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\", ascending=False)","35c29a74":"# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\", ascending=False)","3a666d7c":"# SibSp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\", ascending=False)","225a1b36":"# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\", ascending=False)","8d1b51d1":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1        \n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c]<Q1 - outlier_step) | (df[c]>Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n                               \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n                               \n    return multiple_outliers","0a9541d6":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","99720054":"# drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis=0).reset_index(drop=True)","07c10961":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis=0).reset_index(drop=True)","6bdded05":"train_df.head()","814d009d":"train_df.columns[train_df.isnull().any()]","d4b65027":"train_df.isnull().sum()","a4459983":"train_df[train_df[\"Embarked\"].isnull()]","afe699e2":"train_df.boxplot(column=\"Fare\",by=\"Embarked\")\nplt.show()","7eae9d91":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")","95855d2f":"train_df[train_df[\"Embarked\"].isnull()]","d4bf6214":"train_df[train_df[\"Fare\"].isnull()]","377c3740":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(train_df[train_df[\"Pclass\"]==3][\"Fare\"].mean())","236119ba":"train_df[train_df[\"Fare\"].isnull()]","f2627f13":"<a id=\"3\"><\/a>\n# Univariate Veriable Analysis\n* Categorical Veriable: Survived, Sex, PClass, Embarked, Cabin, Name, Ticket, SibSp and Parch\n* Numerical Veriable: Fare, Age and PassengerId","de6578d6":"<a id=\"2\"><\/a>\n# Veriable Description\n1. PassengerId: unique id numberto each passenger\n1. Survived: passenger survive(1) or died(0)\n1. Pclass: passenger class\n1. Name: name\n1. Sex: gender of passenger\n1. Age: age of passenger\n1. SibSp: number of sblings\/spouses\n1. Parch: number of parent\/children\n1. Ticket: ticket number\n1. Fare: amount of money spent on ticket\n1. Cabin: cabin category\n1. Embarked: port where passenger embarked (C = Cherbourg, Q = Queenstown, S = Southampton)","0f2e4ecd":"<a id=\"6\"><\/a>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","040a64be":"<a id=\"8\"><\/a>\n# Missing Value\n* Find Missing Value\n* Fill Missing Value","c5fceeb9":"<a id=\"5\"><\/a>\n## Numerical Veriable","e5cc354e":"<a id=\"1\"><\/a>\n# Load and Check Data","fe735bc2":"<a id=\"7\"><\/a>\n# Outlier Detection","e5328d77":"# Introduction\nThe sinking of Titanic is one of the most notorious shipwrecks in the history. In 1912, during her voyage, the Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew.\n\n<font color = \"blue\">\nContent:\n\n1. [Load and Check Data](#1)\n1. [Veriable Description](#2)\n    * [Univariate Veriable Analysis](#3)\n        * [Categorical Veriable](#4)\n        * [Numerical Veriable](#5)\n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)","a7b9215b":"<a id=\"9\"><\/a>\n## Find Missing Value","1fd11db3":"<a id=\"10\"><\/a>\n## Fill Missing Value\n* Embarked has 2 missing value\n* Fare has only 1","cc177d88":"<a id=\"4\"><\/a>\n## Categorical Veriable","0dc22c4d":"* float64(2): Fare and Age\n* int64(5): Pclass, SibSp, Parch, PassengerId and Survived\n* object(5): Cabin, Embarked, Ticket, Name and Sex"}}