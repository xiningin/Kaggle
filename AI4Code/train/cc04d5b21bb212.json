{"cell_type":{"2ea8755d":"code","f20cb31c":"code","1b00cb4c":"code","9d4f124d":"code","cbdf21d6":"code","5b380a9c":"code","fb2dcd66":"code","bb4cd774":"code","3aaaa837":"code","e32fa0cb":"code","79a902a5":"code","7fcb8d76":"code","5fa2d130":"code","e9318e8e":"code","e2d1d7ec":"code","57f8f1dc":"code","15c43e1d":"code","232d90cd":"markdown","e989b86a":"markdown","02206033":"markdown","4e6c2017":"markdown","2f4bd418":"markdown","0844d4ce":"markdown","0a3541b7":"markdown","7f5137b7":"markdown"},"source":{"2ea8755d":"from tensorflow.python.client import device_lib\nprint(device_lib.list_local_devices())","f20cb31c":"import os\nimport numpy\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom keras.models import Sequential, load_model\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom keras.optimizers import Adam\nfrom keras.layers.embeddings import Embedding","1b00cb4c":"files = os.listdir('..\/input\/handbonedata')\nfiles = list(map(lambda x: '..\/input\/handbonedata\/'+x, files))\nfiles[0:5]","9d4f124d":"def getAllData(files):\n    allData = [] # \u5168\u90e8\u5e8f\u5217\u5e27\u6570\u636e\uff08\u6240\u6709\u5e27\u7684\u9aa8\u9abc\u70b9\uff09\n    for f in files:\n        actionMean = int(f.split('\/')[-1].split('.')[0])\n        tmpKeyFrame = [] # \u5f53\u524d\u624b\u7684\u5e27\u6570\u636e\uff08\u5355\u4e2a\u5e27\u7684\u9aa8\u9abc\u70b9\uff09\n        k = 0\n        \n        file = open(f, mode='r', encoding='utf-8')\n        file.seek(0) #\u56de\u5230\u6587\u4ef6\u8d77\u9996\n        \n        # \u8bb0\u5f55\u8be5\u624b\u8bed\u52a8\u4f5c\u7684\u6240\u6709\u5173\u952e\u5e27\n        for line in file:\n            k += 1\n            tmp = line.split(',')\n            tmp[-1] = tmp[-1].split('\\n')[0]\n\n            # \u5de6\u53f3\u624b\u6570\u5b57\u5316\n            if tmp[0] == '\u5de6\u624b':\n                tmp[0] = 0\n            else:\n                tmp[0] = 1\n            \n            # \u63d2\u5165\u624b\u8bed\u8bed\u4e49\u8868\u793a\n            tmp.insert(0, actionMean) \n\n            # string -> float\n            for i in range(len(tmp)):\n                tmp[i] = float(tmp[i])\n            tmpKeyFrame.append(tmp)\n\n            # next keyFrame\n            if k % 20 == 0:\n                #print(tmpKeyFrame)\n                allData.append(tmpKeyFrame)\n                k = 0\n                tmpKeyFrame = [] # \u5f53\u524d\u624b\u7684\u5e27\u6570\u636e\uff08\u5355\u4e2a\u5e27\u7684\u9aa8\u9abc\u70b9\uff09\n        file.close()\n    return allData","cbdf21d6":"allData_list = getAllData(files)\nallData_list[233]","5b380a9c":"# \u5408\u5e76\u6570\u636e\nfor i in range(len(allData_list)):\n    tmp = []\n    tmp.append(allData_list[i][0][0]) # \u52a8\u4f5c\n    tmp.append(allData_list[i][0][1]) # \u5de6\u53f3\u624b\n    tmp.append(allData_list[i][0][2]) # keyFrameID\n    for j in range(len(allData_list[i])):\n        for k in range(3, len(allData_list[i][j])):\n            tmp.append(allData_list[i][j][k])\n    allData_list[i] = tmp","fb2dcd66":"# \u521b\u5efa\u6807\u7b7e\na = ['index', 'middle', 'ring', 'little']\ntag = []\nfor i in a:\n    for j in range(1, 5):\n        tmp = i + '_' + str(j)\n        for k in ['x', 'y', 'z']:\n            tag.append(tmp + '_' + k)    \n\ntmp = ['\u8bed\u4e49', '\u624b', 'keyFrameID', \n         'palm_x', 'palm_y', 'palm_z',   \n         'thumb_1_x', 'thumb_1_y', 'thumb_1_z', \n         'thumb_2_x', 'thumb_2_y', 'thumb_2_z',\n         'thumb_3_x', 'thumb_3_y', 'thumb_3_z']          \ntmp.extend(tag)\nprint(tmp)","bb4cd774":"# \u5f62\u6210\u8868\u683c\nallData = pd.DataFrame(data=allData_list, columns=tmp)\nallData","3aaaa837":"firstKeyFrame = list(allData.loc[0][3:])\nframeMean = int(allData.loc[0][0])\n\nfor i in range(len(allData)):\n    if int(allData.loc[i][0]) == frameMean:\n        allData.loc[i][3:] = allData.loc[i][3:] - firstKeyFrame\n    else:\n        firstKeyFrame = list(allData.loc[i][3:])\n        allData.loc[i][3:] = 0\n        frameMean = int(allData.loc[i][0])","e32fa0cb":"# \u6211\u4eec\u81ea\u5df1\u7684\u9aa8\u9abc\u6570\u636e\ndel(allData['keyFrameID'])\ntrainData = allData\ntrainY = trainData['\u8bed\u4e49']\ndel(trainData['\u8bed\u4e49'])\n\n# trainData = np.log1p(trainData+10)\n# trainData += 0.000001\n\ntrain_size = int(len(trainData) * 1) # \u65f6\u5e8f\u6570\u636e\u7684\u524d65%\u4e3a\u8bad\u7ec3\u6570\u636e \u540e35%\u4e3a\u6d4b\u8bd5\u6570\u636e\ntrainlist = trainData[:train_size]\ntestlist = trainData[train_size:]\ntestY = np.array([1]*(len(trainData) - train_size))","79a902a5":"trainData.head()","7fcb8d76":"trainY.head()","5fa2d130":"'''\nLSTM\u6a21\u578b\nLSTM\u7684\u8f93\u5165\u4e3a [samples, timesteps, features]\n\u8fd9\u91cc\u7684timesteps\u4e3a\u6b65\u6570\uff0cfeatures\u4e3a\u7ef4\u5ea6 \u8fd9\u91cc\u6211\u4eec\u7684\u6570\u636e\u662f1\u7ef4\u7684\n'''\ntrainData = np.array(trainData)\ntrainX = trainData.reshape(trainData.shape[0], 1, trainData.shape[1])\ntestX = trainData.reshape(trainData.shape[0], 1, trainData.shape[1])\n\n# create and fit the LSTM network\nmodel = Sequential()\n# model.add(Embedding(61,250,mask_zero=True))\nmodel.add(LSTM(128, input_shape= (1, 61), dropout=0.3, recurrent_dropout=0.3, activation='tanh', return_sequences=True))\nmodel.add(LSTM(64, dropout=0.5, recurrent_dropout=0.5, activation='tanh', return_sequences=True))\nmodel.add(LSTM(32, dropout=0.1, activation='tanh', return_sequences=False))\nmodel.add(Dense(16))\nmodel.add(Dense(1)) #activation='softmax'))\nmodel.compile(loss='mean_squared_error', optimizer='adam') #'adam' Adam(lr=0.01)\n# model.compile(loss='categorical_crossentropy',optimizer=Adam(lr=1),metrics=['accuracy'])","e9318e8e":"model.fit(trainX, trainY, epochs=600, batch_size=1, verbose=2)\nmodel.save(os.path.join(\"DATA\",\"Test\" + \".h5\"))","e2d1d7ec":"# \u8fdb\u884c\u9884\u6d4b\n#model = load_model(os.path.join(\"DATA\",\"Test\" + \".h5\"))\ntrainPredict = model.predict(trainX)\ntestPredict = model.predict(testX)\n\n# # \u53cd\u5f52\u4e00\u5316\n# trainPredict = np.expm1(trainPredict)\n# testPredict = np.expm1(testPredict)  - 10","57f8f1dc":"def siSheWuRu(num):\n    tmp = num - int(num)\n    if tmp > 0.5:\n        num = int(num) + 1\n    else:\n        num = int(num)\n    return num\ntrainPredict = list(map(siSheWuRu, trainPredict))","15c43e1d":"# \u67e5\u770b\u7ed3\u679c\nplt.figure(1)\nplt.plot(trainY)\nplt.plot(trainPredict[1:])\nplt.legend(['trainY', 'prediction'])\n\nplt.figure(2)\nplt.plot(testY)\nplt.plot(testPredict[1:])\nplt.show()","232d90cd":"## \u56db\u3001\u6a21\u578b\u9884\u6d4b & \u7ed3\u679c\u67e5\u770b","e989b86a":"```\ntf.keras.layers.LSTM(\nunits, activation=\u2018tanh\u2019, recurrent_activation=\u2018sigmoid\u2019, use_bias=True,\nkernel_initializer=\u2018glorot_uniform\u2019, recurrent_initializer=\u2018orthogonal\u2019,\nbias_initializer=\u2018zeros\u2019, unit_forget_bias=True, kernel_regularizer=None,\nrecurrent_regularizer=None, bias_regularizer=None, activity_regularizer=None,\nkernel_constraint=None, recurrent_constraint=None, bias_constraint=None,\ndropout=0.0, recurrent_dropout=0.0, implementation=2, return_sequences=False,\nreturn_state=False, go_backwards=False, stateful=False, time_major=False,\nunroll=False, **kwargs\n)\n\nunits\uff1a\u6b63\u6574\u6570\uff0c\u8f93\u51fa\u7a7a\u95f4\u7684\u7ef4\u6570\u3002\nactivation\uff1a\u8981\u4f7f\u7528\u7684\u6fc0\u6d3b\u529f\u80fd\u3002\u9ed8\u8ba4\u503c\uff1a\u53cc\u66f2\u6b63\u5207\uff08tanh\uff09\u3002\u5982\u679c\u901a\u8fc7None\uff0c\u5219\u4e0d\u4f1a\u5e94\u7528\u4efb\u4f55\u6fc0\u6d3b\uff08\u5373\u201c\u7ebf\u6027\u201d\u6fc0\u6d3b\uff1a\uff09a(x) = x\u3002\nrecurrent_activation\uff1a\u7528\u4e8e\u5faa\u73af\u6b65\u9aa4\u7684\u6fc0\u6d3b\u529f\u80fd\u3002\u9ed8\u8ba4\u503c\uff1aS\u5f62\uff08sigmoid\uff09\u3002\u5982\u679c\u901a\u8fc7None\uff0c\u5219\u4e0d\u4f1a\u5e94\u7528\u4efb\u4f55\u6fc0\u6d3b\uff08\u5373\u201c\u7ebf\u6027\u201d\u6fc0\u6d3b\uff1a\uff09a(x) = x\u3002\nuse_bias\uff1a\u5e03\u5c14\u503c\uff08\u9ed8\u8ba4True\uff09\uff0c\u5c42\u662f\u5426\u4f7f\u7528\u504f\u7f6e\u5411\u91cf\u3002\nkernel_initializer\uff1akernel\u6743\u91cd\u77e9\u9635\u7684\u521d\u59cb\u5316\u7a0b\u5e8f\uff0c\u7528\u4e8e\u8f93\u5165\u7684\u7ebf\u6027\u8f6c\u6362\u3002\u9ed8\u8ba4\u503c\uff1aglorot_uniform\u3002\nrecurrent_initializer\uff1arecurrent_kernel\u6743\u91cd\u77e9\u9635\u7684\u521d\u59cb\u5316\u7a0b\u5e8f\uff0c\u7528\u4e8e\u5faa\u73af\u72b6\u6001\u7684\u7ebf\u6027\u8f6c\u6362\u3002\u9ed8\u8ba4\u503c\uff1aorthogonal\u3002\nbias_initializer\uff1a\u504f\u7f6e\u77e2\u91cf\u7684\u521d\u59cb\u5316\u5668\u3002\u9ed8\u8ba4\u503c\uff1azeros\u3002\nunit_forget_bias\uff1a\u5e03\u5c14\u503c\uff08\u9ed8\u8ba4True\uff09\u3002\u5982\u679c\u4e3aTrue\uff0c\u5219\u5728\u521d\u59cb\u5316\u65f6\u5c061\u52a0\u5230\u5fd8\u8bb0\u95e8\u7684\u504f\u7f6e\u4e0a\u3002\u5c06\u5176\u8bbe\u7f6e\u4e3atrue\u4e5f\u5c06\u5f3a\u5236\u6267\u884c bias_initializer=\u201czeros\u201d\u3002Jozefowicz\u7b49\u4eba\u5efa\u8bae\u4f7f\u7528\u6b64\u65b9\u6cd5\u3002\nkernel_regularizer\uff1a\u6b63\u5219\u5316\u51fd\u6570\u5e94\u7528\u4e8ekernel\u6743\u91cd\u77e9\u9635\u3002\u9ed8\u8ba4\u503c\uff1aNone\u3002\nrecurrent_regularizer\uff1a\u6b63\u5219\u5316\u51fd\u6570\u5e94\u7528\u4e8erecurrent_kernel\u6743\u91cd\u77e9\u9635\u3002\u9ed8\u8ba4\u503c\uff1aNone\u3002\nbias_regularizer\uff1a\u6b63\u5219\u5316\u51fd\u6570\u5e94\u7528\u4e8e\u504f\u5dee\u5411\u91cf\u3002\u9ed8\u8ba4\u503c\uff1a None\u3002\nkernel_constraint\uff1a\u7ea6\u675f\u51fd\u6570\u5e94\u7528\u4e8ekernel\u6743\u91cd\u77e9\u9635\u3002\u9ed8\u8ba4\u503c\uff1aNone\u3002\nrecurrent_constraint\uff1a\u7ea6\u675f\u51fd\u6570\u5e94\u7528\u4e8erecurrent_kernel \u6743\u91cd\u77e9\u9635\u3002\u9ed8\u8ba4\u503c\uff1aNone\u3002\nbias_constraint\uff1a\u7ea6\u675f\u51fd\u6570\u5e94\u7528\u4e8e\u504f\u5dee\u5411\u91cf\u3002\u9ed8\u8ba4\u503c\uff1a None\u3002\ndropout\uff1a\u57280\u52301\u4e4b\u95f4\u6d6e\u52a8\u3002\u4e3a\u8f93\u5165\u7684\u7ebf\u6027\u8f6c\u6362\u800c\u4e0b\u964d\u7684\u5355\u4f4d\u7684\u5206\u6570\u3002\u9ed8\u8ba4\u503c\uff1a0\nrecurrent_dropout\uff1a\u57280\u52301\u4e4b\u95f4\u6d6e\u52a8\u3002\u7528\u4e8e\u9012\u5f52\u72b6\u6001\u7ebf\u6027\u8f6c\u6362\u7684\u5355\u4f4d\u5c0f\u6570\u3002\u9ed8\u8ba4\u503c\uff1a0\nimplementation\uff1a\u5b9e\u65bd\u6a21\u5f0f1\u62162\u3002\u6a21\u5f0f1\u5c06\u5176\u64cd\u4f5c\u6784\u9020\u4e3a\u5927\u91cf\u8f83\u5c0f\u7684\u70b9\u4e58\u79ef\u548c\u52a0\u6cd5\u8fd0\u7b97\uff0c\u800c\u6a21\u5f0f2\uff08\u9ed8\u8ba4\uff09\u5c06\u5b83\u4eec\u5206\u4e3a\u8f83\u5c11\u7684\u8f83\u5927\u64cd\u4f5c\u3002\u8fd9\u4e9b\u6a21\u5f0f\u5728\u4e0d\u540c\u7684\u786c\u4ef6\u548c\u4e0d\u540c\u7684\u5e94\u7528\u7a0b\u5e8f\u4e0a\u5c06\u5177\u6709\u4e0d\u540c\u7684\u6027\u80fd\u914d\u7f6e\u6587\u4ef6\u3002\u9ed8\u8ba4\u503c\uff1a2\n\u8c03\u7528\u53c2\u6570\uff1a\ninputs\uff1a\u4e00\u4e2a2D\u5f20\u91cf\uff0c\u5f62\u72b6\u4e3a[batch, feature]\u3002\nstates\uff1a\u5bf9\u5e94\u4e8e\u5355\u5143\u5355\u4f4d\u76842\u5f20\u91cf\u7684\u5217\u8868\u3002\u5b83\u4eec\u90fd\u5177\u6709\u5f62\u72b6[batch, units]\uff0c\u7b2c\u4e00\u4e2a\u5f20\u91cf\u662f\u524d\u4e00\u4e2a\u65f6\u95f4\u6b65\u957f\u7684\u8bb0\u5fc6\u72b6\u6001\uff0c\u7b2c\u4e8c\u4e2atesnor\u662f\u524d\u4e00\u4e2a\u65f6\u95f4\u6b65\u957f\u7684\u8fdb\u4f4d\u72b6\u6001\u3002\u5bf9\u4e8e\u65f6\u95f4\u6b650\uff0c\u7528\u6237\u63d0\u4f9b\u7684\u521d\u59cb\u72b6\u6001\u5c06\u88ab\u9988\u9001\u5230\u5355\u5143\u3002\ntraining\uff1aPython\u5e03\u5c14\u503c\uff0c\u6307\u793a\u8be5\u5c42\u662f\u5e94\u5728\u8bad\u7ec3\u6a21\u5f0f\u4e0b\u8fd8\u662f\u5728\u63a8\u7406\u6a21\u5f0f\u4e0b\u8fd0\u884c\u3002\u4ec5\u5728\u4f7f\u7528dropout\u6216 \u65f6\u76f8\u5173recurrent_dropout\u3002\n\n```","02206033":"## \u4e00\u3001\u8bfb\u53d6\u6570\u636e","4e6c2017":"### 1.1 \u6211\u4eec\u81ea\u5df1\u7684\u9aa8\u9abc\u6570\u636e","2f4bd418":"## \u4e8c\u3001\u6570\u636e\u5904\u7406","0844d4ce":"### 1.3 \u8868\u683c\u5316","0a3541b7":"## \u4e09\u3001\u6a21\u578b\u8bad\u7ec3","7f5137b7":"### 1.2 \u5408\u5e76\u6570\u636e"}}