{"cell_type":{"8f94cc85":"code","a75fe7c4":"code","e6faf03b":"code","59290e47":"code","3b45f445":"code","11449d2b":"code","716fdc7b":"code","3ef120e0":"code","e156149f":"code","83aadf6e":"code","d66d4449":"code","c5792007":"code","5fa19dcd":"code","d3bfc590":"code","e92d215c":"code","9c00c93a":"code","0d49924a":"code","74f09fa0":"code","8e570aa2":"code","466d79b0":"code","7d6de110":"code","91da6aae":"code","36715ec0":"code","5635fe40":"code","86d75c07":"code","5dd97c54":"code","abc82ef1":"code","d4fc3ebe":"code","747d031b":"code","6afefc5e":"code","9d2a7377":"code","c214d9e3":"code","eedb2c7d":"code","7e3da414":"code","181cc2e7":"code","20ec5e6d":"code","131e2998":"code","a244d5da":"code","ff3570de":"code","42c623a9":"markdown"},"source":{"8f94cc85":"## This is the FastAi Baseline for the Flower Recognition Competition on HackerEarth.You can tweak this Notebook or can used the Ideas for your own work.","a75fe7c4":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nprint(os.listdir(\"..\/input\/he_challenge_data\/data\"))","e6faf03b":"!pip install pretrainedmodels","59290e47":"from torchvision.models import *\n# import pretrainedmodels\n\nfrom fastai import *\nfrom fastai.vision import *\nfrom fastai.vision.models import *\nfrom fastai.vision.learner import model_meta\nimport fastai\n\nfrom utils import *\nimport sys\nimport torch\nfastai.__version__","3b45f445":"torch.__version__","11449d2b":"lis = os.listdir('..\/input\/he_challenge_data\/data\/train')","716fdc7b":"sub = pd.read_csv('..\/input\/he_challenge_data\/data\/sample_submission.csv')","3ef120e0":"sub.shape","e156149f":"bs=8","83aadf6e":"path = \"..\/input\/he_challenge_data\/data\/train\"","d66d4449":"## test filenames to be used to create final submission.\nfilenames = os.listdir('..\/input\/he_challenge_data\/data\/test')","c5792007":"df = pd.read_csv('..\/input\/he_challenge_data\/data\/train.csv')","5fa19dcd":"df.head()","d3bfc590":"# CenterCrop(32)\n## These Transformation applied based upon my previous competition Experience.\n## if you want to try other transformation check this link\n## https:\/\/docs.fast.ai\/vision.transform.html\ntfms = get_transforms(flip_vert=False,max_zoom=1.0,max_warp=0,do_flip=False,xtra_tfms=[cutout()])\ntfms1 = get_transforms(flip_vert=False,max_zoom=1.0,max_warp=0,do_flip=False,xtra_tfms=[cutout()])\ndata = (ImageList.from_csv(path, csv_name = '..\/train.csv', suffix='.jpg')\n        .split_by_rand_pct()              \n        .label_from_df()            \n        .add_test_folder(test_folder = '..\/test')              \n        .transform(tfms, size=400)\n        .databunch(num_workers=0,bs=8))\n\ndata1 = (ImageList.from_csv(path, csv_name = '..\/train.csv', suffix='.jpg')\n        .split_by_rand_pct()              \n        .label_from_df()            \n        .add_test_folder(test_folder = '..\/test')              \n        .transform(tfms1, size=400)\n        .databunch(num_workers=0,bs=8))","e92d215c":"## to see the images in train with there labels\ndata.show_batch(rows=3, figsize=(8,10))","9c00c93a":"## print the target classes\nprint(data.classes)","0d49924a":"## load the pretrained imagenet model\n## you can try other models from this link\n## https:\/\/docs.fast.ai\/vision.models.html\nlearn = cnn_learner(data, models.densenet169, metrics=[error_rate, accuracy], model_dir=\"\/tmp\/model\/\")","74f09fa0":"## training with one cycle which used cyclic learning rate and learning rate annhelling\nlearn.fit_one_cycle(1)","8e570aa2":"learn.unfreeze()\nlearn.lr_find()","466d79b0":"# learn.recorder.plot(suggestion=True)\n# best_clf_lr = learn.recorder.min_grad_lr\n# best_clf_lr","7d6de110":"# learn.fit_one_cycle(2, max_lr=best_clf_lr)\nlearn.fit_one_cycle(2, max_lr=slice(1e-6,1e-3))","91da6aae":"## 2nd model","36715ec0":"learn1 = cnn_learner(data1, models.densenet201, metrics=[error_rate, accuracy], model_dir=\"\/tmp\/model\/\")","5635fe40":"## training with one cycle which used cyclic learning rate and learning rate annhelling\nlearn1.fit_one_cycle(1)","86d75c07":"learn1.unfreeze()\nlearn1.lr_find()\nlearn1.fit_one_cycle(2, max_lr=slice(1e-6,1e-3))","5dd97c54":"learn2 = cnn_learner(data1, models.resnet152, metrics=[error_rate, accuracy], model_dir=\"\/tmp\/model\/\")\n## training with one cycle which used cyclic learning rate and learning rate annhelling\nlearn2.fit_one_cycle(1)\nlearn2.unfreeze()\nlearn2.lr_find()\nlearn2.fit_one_cycle(2, max_lr=slice(1e-6,1e-3))","abc82ef1":"learn3 = cnn_learner(data, models.densenet121, metrics=[error_rate, accuracy], model_dir=\"\/tmp\/model\/\")\n## training with one cycle which used cyclic learning rate and learning rate annhelling\nlearn3.fit_one_cycle(1)\nlearn3.unfreeze()\nlearn3.lr_find()\nlearn3.fit_one_cycle(2, max_lr=slice(1e-6,1e-3))","d4fc3ebe":"## Applied Test Time Augmentation","747d031b":"preds,_ = learn.TTA(ds_type=DatasetType.Test)","6afefc5e":"preds1,_ = learn1.TTA(ds_type=DatasetType.Test)","9d2a7377":"preds2,_ = learn2.TTA(ds_type=DatasetType.Test)\npreds3,_ = learn3.TTA(ds_type=DatasetType.Test)","c214d9e3":"## create the submission file ","eedb2c7d":"labelled_preds = []\npred11 = preds + preds1 + preds2 + preds3\nfor pred in pred11:\n    labelled_preds.append(int(np.argmax(pred))+1)\n\nsubmission = pd.DataFrame(\n    {'image_id': filenames,\n     'category': labelled_preds,\n    })\nsubmission.to_csv('submission.csv',index=False)","7e3da414":"submission.head()","181cc2e7":"submission['image_id'] = submission['image_id'].apply(lambda x:x.split('.')[0])","20ec5e6d":"submission = submission.sort_values(by = ['image_id'], ascending = [True])","131e2998":"## To download the submission file without Commiting the kernel.","a244d5da":"from IPython.display import HTML\nimport pandas as pd\nimport numpy as np\nimport base64\n\n# download it (will only work for files < 2MB or so)\ndef create_download_link(df, title = \"Download CSV file\", filename = \"subm.csv\"):  \n    csv = df.to_csv(index=False)\n    b64 = base64.b64encode(csv.encode())\n    payload = b64.decode()\n    html = '<a download=\"{filename}\" href=\"data:text\/csv;base64,{payload}\" target=\"_blank\">{title}<\/a>'\n    html = html.format(payload=payload,title=title,filename=filename)\n    return HTML(html)\n\ncreate_download_link(submission)","ff3570de":"## This is the Fastai Baseline for the Flower Recognition Competition.If you like the work then plz Upvote the Kernel.\n## https:\/\/www.hackerearth.com\/challenges\/competitive\/garden-nerd","42c623a9":"### Need pretrainedmodels to load the pretrained Cedene models into fastai.\n### https:\/\/github.com\/Cadene\/pretrained-models.pytorch"}}