{"cell_type":{"5875ecee":"code","1d1859c5":"code","2d2d67b4":"code","fcda147a":"code","ba0a4cfb":"code","93b002ba":"code","44d77faa":"code","9da73999":"code","96332deb":"code","163a1e05":"code","7e5111bd":"code","77d1e2cc":"code","7c0e0031":"code","39da4624":"code","ad07c014":"code","1f723dc2":"code","66e02d10":"code","9db4f88a":"code","acc6fc72":"code","f61e6374":"code","e72eef5d":"code","9c6dc3ab":"code","9b95896b":"code","be716d0d":"code","8bf144df":"code","8faa716a":"code","09fea0ec":"code","0c208719":"code","ec2f81c4":"code","cb8d3fc9":"code","a52fbc87":"code","4328c361":"code","9c14c4dd":"code","531049e1":"code","10fd1702":"code","87032bac":"code","5e261c17":"code","2bd65897":"code","fbd3d750":"markdown"},"source":{"5875ecee":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1d1859c5":"import os\nos.chdir('..\/input\/adience-benchmark-gender-and-age-classification')","2d2d67b4":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport cv2\n\nfrom PIL import Image\nimport tensorflow as tf\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Activation, Dropout, Flatten, Dense, Dropout, LayerNormalization\nfrom keras.preprocessing.image import ImageDataGenerator, img_to_array, load_img\nfrom tensorflow import keras","fcda147a":"fold_0=pd.read_table('\/kaggle\/input\/adience-benchmark-gender-and-age-classification\/AdienceBenchmarkGenderAndAgeClassification\/fold_0_data.txt')\nfold_0","ba0a4cfb":"fold_1=pd.read_table('\/kaggle\/input\/adience-benchmark-gender-and-age-classification\/AdienceBenchmarkGenderAndAgeClassification\/fold_1_data.txt')\nfold_1","93b002ba":"fold_2=pd.read_table('\/kaggle\/input\/adience-benchmark-gender-and-age-classification\/AdienceBenchmarkGenderAndAgeClassification\/fold_2_data.txt')\nfold_2","44d77faa":"fold_3=pd.read_table('\/kaggle\/input\/adience-benchmark-gender-and-age-classification\/AdienceBenchmarkGenderAndAgeClassification\/fold_3_data.txt')\nfold_3","9da73999":"\nfold_4=pd.read_table('\/kaggle\/input\/adience-benchmark-gender-and-age-classification\/AdienceBenchmarkGenderAndAgeClassification\/fold_4_data.txt')\nfold_4","96332deb":"total_data = pd.concat([fold_0, fold_1, fold_2, fold_3, fold_4], ignore_index=True)\nprint(fold_0.shape)\nprint(total_data.shape)","163a1e05":"total_data.info()","7e5111bd":"total_data.head()","77d1e2cc":"plt.figure(1, figsize=(8,8))\ntotal_data.age.value_counts().plot.pie(autopct=\"%1.1f%%\")\nplt.show()","7c0e0031":"#bar chart\ngender = ['f','m','u']\nplt.bar(gender, total_data.gender.value_counts(), align='center', alpha=0.5)\nplt.show()","39da4624":"path = \"\/kaggle\/input\/adience-benchmark-gender-and-age-classification\/AdienceBenchmarkGenderAndAgeClassification\/faces\/\"+total_data.user_id.loc[12]+\"\/coarse_tilt_aligned_face.\"+str(total_data.face_id.loc[12])+\".\"+total_data.original_image.loc[12]\nimg = load_img(path)\nplt.imshow(img)\nplt.show()","ad07c014":"total_data.gender.value_counts()","1f723dc2":"df = total_data[['age', 'gender', 'x', 'y', 'dx', 'dy']].copy()\ndf.info()","66e02d10":"# Adding Path of each Image\nimg_path = []\nfor row in total_data.iterrows():\n    path = \"\/kaggle\/input\/adience-benchmark-gender-and-age-classification\/AdienceBenchmarkGenderAndAgeClassification\/faces\/\"+row[1].user_id+\"\/coarse_tilt_aligned_face.\"+str(row[1].face_id)+\".\"+row[1].original_image\n    img_path.append(path)\ndf['img_path'] = img_path","9db4f88a":"df.head()","acc6fc72":"# How many unique Age are there\ndf.age.unique()","f61e6374":"# Mapping Ages to bring All the Ages into there respective Range\nage_mapping = [('(0, 2)', '0-2'), ('2', '0-2'), ('3', '0-2'), ('(4, 6)', '4-6'), ('(8, 12)', '8-13'), ('13', '8-13'), ('22', '15-20'), ('(8, 23)','15-20'), ('23', '25-32'), ('(15, 20)', '15-20'), ('(25, 32)', '25-32'), ('(27, 32)', '25-32'), ('32', '25-32'), ('34', '25-32'), ('29', '25-32'), ('(38, 42)', '38-43'), ('35', '38-43'), ('36', '38-43'), ('42', '48-53'), ('45', '38-43'), ('(38, 43)', '38-43'), ('(38, 42)', '38-43'), ('(38, 48)', '48-53'), ('46', '48-53'), ('(48, 53)', '48-53'), ('55', '48-53'), ('56', '48-53'), ('(60, 100)', '60+'), ('57', '60+'), ('58', '60+')]\nage_mapping_dict = {each[0]: each[1] for each in age_mapping}\ndrop_labels = []\nfor idx, each in enumerate(df.age):\n    if each == 'None':\n        drop_labels.append(idx)\n    else:\n        df.age.loc[idx] = age_mapping_dict[each]\ndf = df.drop(labels=drop_labels, axis=0) #droped None values\ndf.age.value_counts(dropna=False)","e72eef5d":"# Dropping Null Values\ndf = df.dropna()\nunbiased_data = df[df.gender != 'u'].copy()\nunbiased_data.info()","9c6dc3ab":"gender_to_label_map = {\n    'f' : 0,\n    'm' : 1\n}\n\nage_to_label_map = {\n    '0-2'  :0,\n    '4-6'  :1,\n    '8-13' :2,\n    '15-20':3,\n    '25-32':4,\n    '38-43':5,\n    '48-53':6,\n    '60+'  :7\n}\n\n# label_to_age_map = {value: key for key, value in age_to_label_map.items()}\n# label_to_gender_map = {value: key for key, value in gender_to_label_map.items()}\n\nunbiased_data['age'] = unbiased_data['age'].apply(lambda age: age_to_label_map[age])\nunbiased_data['gender'] = unbiased_data['gender'].apply(lambda g: gender_to_label_map[g])\nunbiased_data.head()","9b95896b":"# Unique Ages\nunbiased_data.age.unique()","be716d0d":"# Splitting the Data into Train and Test set\nX = unbiased_data[['img_path']]\ny = unbiased_data[['gender']]\nyy=keras.utils.to_categorical(y)\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\nprint('Train data shape {}'.format(X_train.shape))\nprint('Test data shape {}'.format(X_test.shape))","8bf144df":"# Remove the Index from X_train\nX_train=X_train.reset_index()\nX_train=X_train.drop('index',axis=1)\nX_train","8faa716a":"# Remove the index from y_train\ny_train=y_train.reset_index()\ny_train=y_train.drop('index',axis=1)\ny_train","09fea0ec":"# Creating The Data Frame for train images and \ntrain=pd.DataFrame({'Image_path':X_train.iloc[:,0],'Gender':y_train.iloc[:,0]},index=X_train.index)\ntrain","0c208719":"# Doing the Same for Test Data \nX_test=X_test.reset_index()\nX_test=X_test.drop('index',axis=1)\ny_test=y_test.reset_index()\ny_test=y_test.drop('index',axis=1)\nX_test,y_test","ec2f81c4":"# Create the Data Frame for Test Data or Validation Data \nValid=pd.DataFrame({'Image_path':X_test.iloc[:,0],'Label':y_test.iloc[:,0]},index=X_test.index)\nValid","cb8d3fc9":"x = unbiased_data[['img_path']]\ny = unbiased_data[['age']]\n#y=keras.utils.to_categorical(y)\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42)\nprint('Train data shape {}'.format(X_train.shape))\nprint('Test data shape {}'.format(X_test.shape))","a52fbc87":"y_train=y_train.reset_index()\ny_train=y_train.drop('index',axis=1)\ny_train","4328c361":"y_test=y_test.reset_index()\ny_test=y_test.drop('index',axis=1)\ny_test","9c14c4dd":"Valid.columns=['Image_path','Gender_label']\ntrain.columns=['Image_path','Gender_label']","531049e1":"train.head()","10fd1702":"train['Age_label']=y_train.iloc[:,0]\nValid['Age_label']=y_test.iloc[:,0]","87032bac":"train.head()","5e261c17":"os.chdir('\/kaggle\/working')","2bd65897":"train.to_csv('Train.csv')\nValid.to_csv('Valid.csv')","fbd3d750":"# To Add the Age labels with respect to every image in the DataFrame"}}