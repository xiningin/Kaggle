{"cell_type":{"8f5a648c":"code","2903b03d":"code","de0a9c55":"code","3b07e92e":"code","26d6c3c4":"markdown","cb16287e":"markdown","2ce176bb":"markdown"},"source":{"8f5a648c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2903b03d":"import pandas as pd\nimport numpy as np\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport matplotlib.pyplot as plt\nimport datetime","de0a9c55":"### Load csv data\nprice_history = pd.read_csv('..\/input\/bitcoin-history\/bitcoin_usd_history.csv')\nsearch_volume = pd.read_csv('..\/input\/bitcoin-history\/bitcoin_search_volume.csv')\n\n# ======= Price data ======== # \n\n# Rename column names\nprice_history = price_history.rename(columns={\"Date\": \"date\", \n                                              \"Closing Price (USD)\": \"close\",\n                                              \"24h Open (USD)\":\"open\",\n                                              \"24h High (USD)\":\"high\",\n                                              \"24h Low (USD)\":\"low\"})\n\n## Check data length & dates\nprint('\\n[ Price History ]')\np_len = len(price_history)\nprint('index range 0 to %d' % p_len)\n\ni = 2639   # last year : 2273 \/ this year : 2639\nprint('index %d matched date : ' % i,price_history['date'][i])\n\n\n# ======= Search Volume data ======== # \nprint('\\n[ Search Volume ]')\ns_len = len(search_volume)\nprint('index range 0 to %d' % s_len)\nj = 251   # last year : 199 \/ this year : 251\nprint('index %d matched date : ' % j,search_volume['date'][j])","3b07e92e":"### define graph subplot shape & ratio\nfig = make_subplots(\n    rows=2, cols=2, shared_xaxes=True, vertical_spacing=0.02,\n    row_heights = [0.7, 0.3],\n)\n\n### add the total data graph\nfig.add_trace(go.Scatter(x=price_history[\"date\"], y=price_history['close'],name=\"Close Price\",line=dict(dash='solid',shape='spline',color='black')), row=1, col=1)\n# fig.add_trace(go.Scatter(x=price_history[\"date\"], y=price_history['open'], name=\"Open Price\",line=dict(dash='solid',shape='spline',color='black')), row=1, col=1))\nfig.add_trace(go.Scatter(x=price_history[\"date\"], y=price_history['high'], name=\"High Price\",line=dict(dash='longdash',color='blue')), row=1, col=1)\nfig.add_trace(go.Scatter(x=price_history[\"date\"], y=price_history['low'],name=\"Low Price\",line=dict(dash='longdash',color='red')), row=1, col=1)\nfig.add_trace(go.Bar(x=search_volume[\"date\"], y=search_volume['search_volume'], name=\"Search Volume\"), row=2, col=1)\n\n### add latest specific data graph\nfig.add_trace(go.Scatter(x=price_history[\"date\"][2639:], y=price_history['close'],name=\"Close Price\",line=dict(dash='solid',shape='spline',color='black')), row=1, col=2)\n# fig.add_trace(go.Scatter(x=price_history[\"date\"][2639:], y=price_history['open'], name=\"Open Price\",line=dict(dash='solid',shape='spline',color='black')), row=1, col=2))\nfig.add_trace(go.Scatter(x=price_history[\"date\"][2639:], y=price_history['high'], name=\"High Price\",line=dict(dash='longdash',color='blue')), row=1, col=2)\nfig.add_trace(go.Scatter(x=price_history[\"date\"][2639:], y=price_history['low'],name=\"Low Price\",line=dict(dash='longdash',color='red')), row=1, col=2)\nfig.add_trace(go.Bar(x=search_volume[\"date\"][251:], y=search_volume['search_volume'], name=\"Search Volume\"), row=2, col=2)\n\n\n### setup layout\nfig.update_layout(autosize=True, title_text=\"Bitcoin Price & Search Volume\") #,height=326*2, width=280*3\n \nfig.show()\n","26d6c3c4":"# 1. Dataset - Check the index Range","cb16287e":"# 2. Visualization\n\n* See the \"Bitcoin\" trend of \"Price\" & \"Search Volume\"\n* Use plotly function\n    - Show Open,High,Low,Closed Prices in One graph\n    - See Price & Search volume in Shared \"Date\" axis\n    - See \"Long Term_from 2020\" & \"Short Term_from 2021\" in One layout by Subplot","2ce176bb":"# contents\n\n1. Dataset\n    - bitcoin(BTC) historical price in USD : bitcoin_usd_history.csv (from coindesk)\n    - bitcoin(BTC) searching volume in global : bitcoin_search_volume.csv (from google trend)\n        \n        \n2. Visualization\n    - Easily Visualizate the data with plotly fuction"}}