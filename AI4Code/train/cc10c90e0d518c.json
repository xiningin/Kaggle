{"cell_type":{"72038b9c":"code","07941f75":"code","a46239b2":"code","fd1525a1":"code","eff2c619":"code","f76202ca":"code","c183988f":"code","1a22c83b":"code","95c27023":"code","73377c51":"code","2d59ba0f":"code","0a8b1455":"code","4854a235":"code","8062c1e6":"code","0cc3eeb2":"code","e95a6489":"code","d7a20592":"code","4786d161":"code","ad550272":"code","3a33c957":"code","75ccae8f":"code","6bf46466":"code","3b69ee7a":"code","aec928a6":"code","2fc91591":"code","95572b53":"code","09caa004":"code","28e23e51":"code","e6396cb1":"code","3986580f":"code","dbd09490":"code","f90ce53a":"code","ce4b8ad2":"code","4155fc6b":"code","042873b9":"code","629cb9b7":"code","547a8b3a":"code","6d178a9e":"code","9827c98e":"markdown","a395a3e3":"markdown","d87dbc43":"markdown","8303dd25":"markdown","4171832f":"markdown","e2ff566b":"markdown"},"source":{"72038b9c":"# LGBM\n# sklearn environment\n# uses pandas, numpy, sklearn, and lightgbm","07941f75":"import pandas as pd\nimport numpy as np","a46239b2":"train_df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","fd1525a1":"train_df.head()","eff2c619":"test_df.head()","f76202ca":"y_train = train_df['SalePrice']\ntrain_df.drop(['SalePrice'], inplace=True, axis=1)","c183988f":"train_df.info()","1a22c83b":"drop = ['Id', 'Alley', 'PoolQC', 'MiscFeature', 'Fence', 'FireplaceQu']\ntrain_df.drop(drop, axis=1, inplace=True)\ntest_df.drop(drop, axis=1, inplace=True)","95c27023":"# Can just run SimpleImputer over all of the columns;\n#   with a separate one for numeric columns and one for categorical columns\n\n# Import\nfrom sklearn.impute import SimpleImputer","73377c51":"# Imputer for numeric columns\nmean_imputer = SimpleImputer(missing_values=np.nan, strategy='mean')\n\n# Imputer for categorical columns\ncommon_imputer = SimpleImputer(missing_values=np.nan, strategy='most_frequent')","2d59ba0f":"# found this function; really like it\nnumerical = train_df.select_dtypes(exclude=['object']).columns\ncategorical = train_df.select_dtypes(exclude=['float64', 'int64']).columns","0a8b1455":"# fit the imputers\nmean_imputer.fit(train_df[numerical])\ncommon_imputer.fit(train_df[categorical])","4854a235":"# transform the data - numeric\ntrain_df[numerical] = mean_imputer.transform(train_df[numerical]);\ntest_df[numerical] = mean_imputer.transform(test_df[numerical]);\n\n# transform the data - categorical\ntrain_df[categorical] = common_imputer.transform(train_df[categorical]);\ntest_df[categorical] = common_imputer.transform(test_df[categorical]);","8062c1e6":"train_df.columns[train_df.isnull().any()]","0cc3eeb2":"test_df.columns[test_df.isnull().any()]","e95a6489":"# Quick correlation with SalePrice\npd.concat([train_df, y_train], axis=1).corr()['SalePrice'].sort_values(ascending=False)","d7a20592":"# These need encoding\ncategorical.to_numpy()","4786d161":"from sklearn.preprocessing import OneHotEncoder\n\nohe = OneHotEncoder(sparse=False, categories='auto')","ad550272":"# Get the categorical columns\ntrain_cat = train_df[categorical]\ntest_cat = test_df[categorical]","3a33c957":"# Apply the OHE\ntrain_ohe = ohe.fit_transform(train_cat)\ntest_ohe = ohe.transform(test_cat)","75ccae8f":"test_ohe","6bf46466":"# Drop the old columns\ntrain_df.drop(categorical, axis=1, inplace=True)\ntest_df.drop(categorical, axis=1, inplace=True)","3b69ee7a":"# Concatenate what is left with the ohe columns\ntrain_ready = pd.concat([train_df, pd.DataFrame(train_ohe)], axis=1)\ntest_ready = pd.concat([test_df, pd.DataFrame(test_ohe)], axis=1)","aec928a6":"# Quick correlation with SalePrice\npd.concat([train_ready, y_train], axis=1).corr()['SalePrice'].sort_values(ascending=False)\n\n# some ohe categories are fairly strongly negatively correlated","2fc91591":"# Grid search actually didn't help, so it's commented out and almost the default parameters are used","95572b53":"from lightgbm import LGBMRegressor","09caa004":"# Grid Search\n\"\"\"from sklearn.model_selection import GridSearchCV\nparam_grid = [{'min_data_in_leaf': [100, 200, 400], \n               'num_leaves': [5, 10, 20],\n               'boosting_type': ['gbdt', 'dart'],\n               'n_estimators': [250, 500, 1000],\n               'learning_rate': [0.1, 0.05, 0.01]\n              }]\nparam_grid2 = [{'n_estimators': [250, 500, 1000, 2000],\n               'learning_rate': [0.1, 0.05, 0.01, 0.001]\n              }]\n\n# Get it ready\ngrid_search = GridSearchCV(forest, param_grid2, cv=7, verbose=1, n_jobs=-1)\"\"\"","28e23e51":"#grid_search.fit(train_ready, y_train)","e6396cb1":"#grid_search.best_params_","3986580f":"#forest = grid_search.best_estimator_","dbd09490":"forest = LGBMRegressor(n_estimators=500, learning_rate = 0.01)","f90ce53a":"forest.fit(train_ready, y_train)","ce4b8ad2":"y_pred = forest.predict(test_ready)","4155fc6b":"# Read in sample csv\nsample_df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')","042873b9":"sample_df['SalePrice'] = y_pred","629cb9b7":"# Write to a new csv\nsample_df.to_csv('predictions.csv', index=False) # Be sure to not include the index","547a8b3a":"# LightGBM (no grid search) - 0.13334\n# LightGBM (grid search) - nothing better","6d178a9e":"# Ensemble learning to get better results\n# Mess with the imputer\n# Feature engineering with the slew of columns","9827c98e":"# Submit","a395a3e3":"# The Data","d87dbc43":"# Impute","8303dd25":"# Model","4171832f":"# Possible Ways to Improve","e2ff566b":"# Encode"}}