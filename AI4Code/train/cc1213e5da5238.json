{"cell_type":{"75a5750c":"code","b05be696":"code","bc5dd7f5":"code","5c2c3988":"code","67a897b5":"code","0fc5e918":"code","3e3d8e01":"code","7ae401ea":"code","9a5d4536":"code","252463af":"code","19a93d69":"code","8b544d48":"code","3658785c":"code","16b335e7":"code","d964141a":"code","66311333":"code","1ffb9765":"code","3fff0bf4":"code","24500a4a":"code","dd488146":"code","c46f4789":"code","997dedaa":"code","ac128db0":"code","11a7e1ed":"code","282146a1":"code","b72132dd":"code","8eef339e":"code","95cb2d31":"code","40aeb27f":"code","e8253e2a":"code","9c84cb70":"code","c03eb098":"code","0fc68a4f":"code","336f3efb":"markdown","deef8f2e":"markdown","145262ae":"markdown","21143ead":"markdown","c0f42ce8":"markdown","e1cba900":"markdown","407adbe8":"markdown","90c47c63":"markdown","77890d88":"markdown","8aff3f6f":"markdown","2ff2e89b":"markdown","fc576869":"markdown","6bbd6cd4":"markdown","a1ee466c":"markdown","8ea0af4c":"markdown","b9864732":"markdown","cef61942":"markdown","2746ca56":"markdown","e523f6f7":"markdown","0c02add6":"markdown","6d59e5f1":"markdown"},"source":{"75a5750c":"# Important Libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n# Model Selection & Preprocessing\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\n\n# Algorithm\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom xgboost import XGBClassifier\n\n\n# Dimenssionality Redcution\nfrom sklearn.decomposition import PCA\n\n# Evaluation\nfrom sklearn.metrics import classification_report, f1_score\n\n# Prevent warnings\nimport warnings\nwarnings.filterwarnings('ignore')","b05be696":"df = pd.read_csv('..\/input\/titanic\/train.csv')\ndf.head()","bc5dd7f5":"titles = df.Name.str.extract('([A-Za-z]+)\\.')","5c2c3988":"print('\\n'.join(titles.iloc[:, 0].unique()))","67a897b5":"df['Title'] = titles\ndf.loc[df['Title'] == 'Sir', 'Title'] = 'Mr' # Sir uses for men\ndf.loc[df['Title'] == 'Mme', 'Title'] = 'Lady' # Mme means Madam we change it to Lady\ndf.loc[df['Title'] == 'Ms', 'Title'] = 'Miss' # Ms means Miss","0fc5e918":"df['FamilySize'] = df.Parch + df.SibSp # Sum of Paraents and Siblings","3e3d8e01":"df['Cabin'] = df['Cabin'].str[0] # The fist character of Cabin","7ae401ea":"# We create FamilySize from Parch & SibSp so remove them\n# Ticket is also not important\ndf_clean = df.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket'], axis = 1)","9a5d4536":"plt.figure(dpi = 90)\nsns.heatmap(df_clean.isnull(), cmap = 'mako', yticklabels = False, cbar = False)\nplt.show()","252463af":"df_clean.isnull().sum()","19a93d69":"df_clean['Age'] = df_clean['Age'].fillna(df_clean['Age'].mean())\ndf_clean['Cabin'] =  df_clean['Cabin'].fillna(df_clean['Cabin'].mode()[0])\ndf_clean['Embarked'] =  df_clean['Embarked'].fillna(df_clean['Embarked'].mode()[0])","8b544d48":"# Sex, Cabin, Embarked & Title are categorical\nsexLbl = LabelEncoder()\ncabinLbl = LabelEncoder()\nembarkedLbl = LabelEncoder()\ntitleLbl = LabelEncoder()\n\ndf_clean['Sex'] = sexLbl.fit_transform(df_clean['Sex'])\ndf_clean['Cabin'] = cabinLbl.fit_transform(df_clean['Cabin'])\ndf_clean['Embarked'] = embarkedLbl.fit_transform(df_clean['Embarked'])\ndf_clean['Title'] = titleLbl.fit_transform(df_clean['Title'])","3658785c":"X = df_clean.drop('Survived', axis = 1)\nY = df_clean['Survived']","16b335e7":"z_norm = StandardScaler()\ndf_clean = z_norm.fit_transform(df_clean)","d964141a":"x_train, x_test, y_train, y_test = train_test_split(X, Y, random_state = 10)","66311333":"pca = PCA(n_components = 3)\ncomps = pca.fit_transform(x_train)","1ffb9765":"xgb = XGBClassifier()\nxgb.fit(comps, y_train)","3fff0bf4":"y_pred = xgb.predict(pca.transform(x_train))\nprint(classification_report(y_pred, y_train))\n\ny_pred = xgb.predict(pca.transform(x_test))\nprint(classification_report(y_pred, y_test))","24500a4a":"xgb = XGBClassifier()\nxgb.fit(x_train, y_train)","dd488146":"y_pred = xgb.predict(x_train)\nprint(classification_report(y_pred, y_train))\n\ny_pred = xgb.predict(x_test)\nprint(classification_report(y_pred, y_test))","c46f4789":"adaboost = AdaBoostClassifier()\nadaboost.fit(x_train, y_train)","997dedaa":"y_pred = adaboost.predict(x_train)\nprint(classification_report(y_pred, y_train))\n\ny_pred = adaboost.predict(x_test)\nprint(classification_report(y_pred, y_test))","ac128db0":"randFrs = RandomForestClassifier()\nrandFrs.fit(x_train, y_train)","11a7e1ed":"y_pred = randFrs.predict(x_train)\nprint(classification_report(y_pred, y_train))\n\ny_pred = randFrs.predict(x_test)\nprint(classification_report(y_pred, y_test))","282146a1":"test_df = pd.read_csv('..\/input\/titanic\/test.csv')","b72132dd":"passengerId = test_df['PassengerId']","8eef339e":"titles = test_df.Name.str.extract('([A-Za-z]+)\\.')\ntest_df['Title'] = titles\ntest_df.loc[test_df['Title'] == 'Sir', 'Title'] = 'Mr' \ntest_df.loc[test_df['Title'] == 'Mme', 'Title'] = 'Lady' \ntest_df.loc[test_df['Title'] == 'Ms', 'Title'] = 'Miss' ","95cb2d31":"test_df['FamilySize'] = test_df.Parch + test_df.SibSp # Sum of Paraents and Siblings","40aeb27f":"test_df['Cabin'] = test_df['Cabin'].str[0] # The fist character of Cabin","e8253e2a":"test_df = test_df.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket'], axis = 1)","9c84cb70":"test_df['Age'] = test_df['Age'].fillna(test_df['Age'].mean())\ntest_df['Fare'] =  test_df['Fare'].fillna(test_df['Fare'].mean())\ntest_df['Cabin'] =  test_df['Cabin'].fillna(test_df['Cabin'].mode()[0])","c03eb098":"test_df['Sex'] = sexLbl.fit_transform(test_df['Sex'])\ntest_df['Cabin'] = cabinLbl.fit_transform(test_df['Cabin'])\ntest_df['Embarked'] = embarkedLbl.fit_transform(test_df['Embarked'])\ntest_df['Title'] = titleLbl.fit_transform(test_df['Title'])","0fc68a4f":"output = pd.DataFrame({'PassengerId': passengerId, 'Survived': xgb.predict(test_df)})\noutput.to_csv('submission.csv', index = False)","336f3efb":"### 1. Feature Engineering","deef8f2e":"### 3. Drop Columns","145262ae":"### 3. Categorical Features","21143ead":"**1.4. Change Cabin values**","c0f42ce8":"### 4. Data Spliting and Normalization","e1cba900":"**4.1. Z-Normalization**","407adbe8":"**4.4. Adaboost**","90c47c63":"**4.3. XGBOOST (without PCA)**","77890d88":"**2.2. Fill NAs**","8aff3f6f":"**4.1. Use PCA**","2ff2e89b":"**4.5. Random Forest**","fc576869":"**2.1. Find NAs**","6bbd6cd4":"**4.2. XGBOOST (with PCA)**","a1ee466c":"**4.2. Split Data**","8ea0af4c":"When I submit this approach I get 0.7 score. Please share your experience to improve my approach","b9864732":"**1.2. Add title to dataset and change some values to new values**","cef61942":"**1.3. Create family size feature**","2746ca56":"**1.1. Extract titles**","e523f6f7":"### 5. Submit Result","0c02add6":"### 2. Missing Values","6d59e5f1":"### 4. Train Model"}}