{"cell_type":{"6cdccbba":"code","e5d346b4":"code","f1373cc9":"code","81ab721d":"code","821e6b95":"code","037c3a92":"code","21d78b0f":"code","63031a07":"code","f84b823f":"code","3b3869a6":"code","084bcfcb":"code","98ce0794":"code","30440ccc":"code","8ff99e16":"code","d16b286e":"code","97a7c9df":"code","8e6d3711":"code","89e73c74":"code","bf9cc2d0":"code","eb2a01a0":"code","df970a0f":"code","2601bc33":"markdown","7ec9db35":"markdown","68db8c2b":"markdown"},"source":{"6cdccbba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e5d346b4":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Input\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nimport tensorflow_hub as hub","f1373cc9":"# tokenization file \n!wget --quiet https:\/\/raw.githubusercontent.com\/tensorflow\/models\/master\/official\/nlp\/bert\/tokenization.py","81ab721d":"import tokenization","821e6b95":"%%time\n## loading bert from tensorhub\nmodule_url = \"https:\/\/tfhub.dev\/tensorflow\/bert_en_uncased_L-24_H-1024_A-16\/1\"\nbert_layer = hub.KerasLayer(module_url, trainable=True)","037c3a92":"vocab_file = bert_layer.resolved_object.vocab_file.asset_path.numpy()\ndo_lower_case = bert_layer.resolved_object.do_lower_case.numpy()\ntokenizer = tokenization.FullTokenizer(vocab_file, do_lower_case)","21d78b0f":"sample = tokenizer.tokenize('THis new technique is State of the art models')\n# so this is how our bert based tokenizer works \ninput_seq = [\"[CLS]\"] + sample + [\"[SEP]\"]\ninput_seq\ntoken = tokenizer.convert_tokens_to_ids(input_seq) # this convert all the list of tokens into a ids \npad_len = 512 - len(token)\ntoken = token + [0] * pad_len \n# on this step we are padding and making  every sequence equal to 512 length \nlen(token) \n# so far token becomes our first input for bert \n","63031a07":"# its time for the second input for the bert \npad_masks = [1] * len(input_seq) + [0] * pad_len\npad_masks  # this will be 1, and 0 and it will show which are padded and which are not \n# it improves the accuracy of distinguishing padded and not padded \n# same as we used mask_zero = True in embedding layer or same as masked layer ","f84b823f":"# now we neeed to create  a function to encode data in the form of bert input \ndef bert_encode(texts, tokenizer, max_len=512):\n    # bert can support max length of 512 only \n    # here we need 3 data inputs for bert training and fine tuning \n    all_tokens = []\n    all_masks = []\n    all_segments = []\n    \n    for text in texts:\n        text = tokenizer.tokenize(text)\n            \n        text = text[:max_len-2] # here we are trimming 2 words if they getting bigger than 512\n        input_sequence = [\"[CLS]\"] + text + [\"[SEP]\"]\n        pad_len = max_len - len(input_sequence)\n        \n        tokens = tokenizer.convert_tokens_to_ids(input_sequence)\n        tokens += [0] * pad_len\n        pad_masks = [1] * len(input_sequence) + [0] * pad_len\n        segment_ids = [0] * max_len\n        \n        all_tokens.append(tokens)\n        all_masks.append(pad_masks)\n        all_segments.append(segment_ids)\n    \n    return np.array(all_tokens), np.array(all_masks), np.array(all_segments)","3b3869a6":"def build_model(bert_layer, max_len=512):\n    input_word_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n    input_mask = Input(shape=(max_len,), dtype=tf.int32, name=\"input_mask\")\n    segment_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"segment_ids\")\n\n    _, sequence_output = bert_layer([input_word_ids, input_mask, segment_ids])\n    clf_output = sequence_output[:, 0, :]\n    out = Dense(1, activation='sigmoid')(clf_output)\n    \n    model = Model(inputs=[input_word_ids, input_mask, segment_ids], outputs=out)\n    model.compile(Adam(lr=2e-6), loss='binary_crossentropy', metrics=['accuracy'])\n    \n    return model","084bcfcb":"train = pd.read_csv(\"..\/input\/nlp-with-disaster-tweets-cleaning-data\/train_data_cleaning.csv\", usecols=['text','target'])\ntest = pd.read_csv(\"..\/input\/nlp-with-disaster-tweets-cleaning-data\/test_data_cleaning.csv\", usecols = ['text'])\n","98ce0794":"train.head()","30440ccc":"test.head()","8ff99e16":"train_input = bert_encode(train.text.values, tokenizer, max_len=160)\ntest_input = bert_encode(test.text.values, tokenizer, max_len=160)\ntrain_labels = train.target.values","d16b286e":"train_input[1][1]","97a7c9df":"model = build_model(bert_layer, max_len=160)\nmodel.summary()","8e6d3711":"train_history = model.fit(\n    train_input, train_labels,\n    validation_split=0.2,\n    epochs=3,\n    batch_size=16\n)\n\nmodel.save('model.h5')","89e73c74":"test_pred = model.predict(test_input)\n","bf9cc2d0":"prediction = np.where(test_pred>.5, 1,0)","eb2a01a0":"test['prediction'] = prediction\n","df970a0f":"test[test.prediction == 1]","2601bc33":"A [CLS] token is inserted at the beginning of the first sentence and a [SEP] token is inserted at the end of each sentence.\n\nA sentence embedding indicating Sentence A or Sentence B is added to each token. Sentence embeddings are similar in concept to token embeddings with a vocabulary of 2.\n\nA positional embedding is added to each token to indicate its position in the sequence. The concept and implementation of positional embedding are presented in the Transformer paper.\n","7ec9db35":"For bert,every input embedding is a combination of 3 embeddings:\n\n**Position Embeddings**: BERT learns and uses positional embeddings to express the position of words in a sentence. These are added to overcome the limitation of Transformer which, unlike an RNN, is not able to capture \u201csequence\u201d or \u201corder\u201d information\n\nS**egment Embeddings**: BERT can also take sentence pairs as inputs for tasks (Question-Answering). That\u2019s why it learns a unique embedding for the first and the second sentences to help the model distinguish between them. In the above example, all the tokens marked as EA belong to sentence A (and similarly for EB)\n\n\n**Token Embeddings**: These are the embeddings learned for the specific token from the WordPiece token vocabulary","68db8c2b":"#### loading the tokenizer file "}}