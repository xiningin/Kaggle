{"cell_type":{"a62b4ebf":"code","30ba9664":"code","25ce2a12":"code","0a05c978":"code","7251ce99":"code","e2c39522":"code","bc1deb40":"code","6ce28401":"code","da94eb31":"code","6d773c6a":"code","3e6d3784":"code","545c8c24":"code","aaf7b23b":"code","6035616f":"code","c24dfaa7":"code","f7d37b0b":"code","24759d27":"code","848b78f1":"code","1085ae19":"code","3c9a569a":"code","765c5de8":"code","d049d52c":"code","3ca22cb6":"code","8e7aea4a":"code","a8d9ccf6":"code","12196a84":"code","9fc72949":"code","681ec99e":"code","133640f6":"markdown","0606f54f":"markdown","cc987c2c":"markdown","2d09c823":"markdown","19971c49":"markdown","4ed95261":"markdown","d5b0c354":"markdown","c5d6f77d":"markdown","2188ebd7":"markdown","04af717a":"markdown","73fbb514":"markdown","e9d1151f":"markdown","340878dd":"markdown","d8b26ba2":"markdown","84c3c09f":"markdown","8ef6efeb":"markdown","9c5687b2":"markdown","5f79683e":"markdown","3f67c612":"markdown","52d43013":"markdown","31757831":"markdown","21931075":"markdown","b8b9647c":"markdown","aca225b1":"markdown","92adca5a":"markdown","c79a207b":"markdown","d1374d24":"markdown"},"source":{"a62b4ebf":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport json\nfrom sqlite3 import dbapi2 as sq3\nfrom pathlib import Path\nfrom collections import OrderedDict\n\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom tensorflow import keras\n\n\nfrom time import time\nfrom IPython.display import clear_output\nfrom collections import OrderedDict\n\nplt.style.use('ggplot')","30ba9664":"# Functions to work with SQLite db\ndef make_query(sel):\n    \"\"\"Query database\"\"\"\n    c = db.cursor().execute(sel)\n    return c.fetchall()\n\ndef make_frame(list_of_tuples=None, legend=[], query=None):\n    \"\"\"\n    Returns DataFrame from a query or result of query\n    \"\"\"\n    framelist=[]\n    if list_of_tuples is None:\n        if query is None:\n            print(\"Error: No query made\")\n            return\n        list_of_tuples = make_query(query)\n        \n    for i, cname in enumerate(legend):\n        framelist.append((cname,[e[i] for e in list_of_tuples]))\n    return pd.DataFrame.from_dict(OrderedDict(framelist))\n\n# Connect to database\ndb = sq3.connect('..\/input\/yelp-project\/yelp_database.db')","25ce2a12":"# Looking at columns of 'reviews' table\nmake_query(\"PRAGMA table_info(reviews)\")","0a05c978":"%%time\n# Getting pandas DataFrame from db\ndate_df = make_frame(query=\"SELECT stars, date FROM reviews\", legend=['rating', 'date'])\ndate_df.date = pd.to_datetime(date_df.date)\ndate_df.info()","7251ce99":"# Creating new columns in reviews df\ndate_df['day'] = date_df.date.dt.day\ndate_df['month'] = date_df.date.dt.month\ndate_df['year'] = date_df.date.dt.year\ndate_df['hour'] = date_df.date.dt.hour\ndate_df['minute'] = date_df.date.dt.minute\ndate_df['second'] = date_df.date.dt.second\n\ndate_df.head()","e2c39522":"sns.catplot(data=date_df, x='rating', kind='count', aspect=2)\nax = plt.gca()\nax.set(xticks=[0,1,2,3,4,5], title='Rating Distribution')\nax.tick_params('x', labelsize=15)\nax.tick_params('y', labelsize=15)","bc1deb40":"g = sns.catplot(data=date_df, x='year', kind='count', aspect=2)\nax = plt.gca()\nax.set_title('Number of reviews by Year')","6ce28401":"g = sns.relplot(data=date_df, x='month', y='rating', aspect=2, kind='line')\nax = plt.gca()\nax.set_title('Ratings by Month')","da94eb31":"g = sns.relplot(data=date_df, x='day', y='rating', aspect=2, kind='line')\nax = plt.gca()\nax.set_title('Ratings by Day')","6d773c6a":"sns.catplot(data=date_df, x='hour', aspect=2, kind='count')\nax = plt.gca()\nax.set_title('Review Time')","3e6d3784":"#Release memory\ndel date_df","545c8c24":"#Looking at columns and making a DataFrame from users table\ncols = list(zip(*make_query(\"PRAGMA table_info(users)\")))[1]\nusers_df = make_frame(query='SELECT * FROM users;', legend=cols)\nusers_df.info()","aaf7b23b":"plt.figure(figsize=(10,5))\nax = plt.gca()\nsns.boxplot(data=users_df, x='review_count', ax=ax)\nplt.xscale('log')","6035616f":"#Type Cast to datetime format\nusers_df.yelping_since = pd.to_datetime(users_df.yelping_since)\nsns.displot(data=users_df, x='yelping_since', aspect=2)","c24dfaa7":"sns.displot(data=users_df, x='fans', aspect=2)\nplt.xscale('log')\nplt.yscale('log')","f7d37b0b":"sns.relplot(data=users_df, x='yelping_since', y='average_stars',alpha=.1, aspect=2)","24759d27":"#Release Memory\ndel users_df","848b78f1":"# Looking at business table's columns and theirdtypes\nmake_query(\"PRAGMA table_info(businesses)\")","1085ae19":"#Getting dataframe from table\nbusiness_df_cols = list(zip(*make_query(\"PRAGMA table_info(businesses)\")))[1]\nbusiness_df = make_frame(query='SELECT * FROM businesses', legend=business_df_cols)\nbusiness_df.head()","3c9a569a":"sns.jointplot(data=business_df, x='latitude', y='longitude')","765c5de8":"BBox = (business_df.longitude.min(),   business_df.longitude.max(), business_df.latitude.min(), business_df.latitude.max())\n\nimg = plt.imread('..\/input\/map-img-for-yelp-business-df\/map(1).png')[:,:,:-1]\nfig, ax = plt.subplots(figsize = (18,14))\nax.scatter(business_df.longitude, business_df.latitude, zorder=1, alpha= 0.1, s=5)\nax.set_title('Plotting Restaurant Locations on Map')\nax.set_xlim(-130,BBox[1])\nax.set_ylim(BBox[2],BBox[3])\nax.imshow(img, zorder=0, extent = BBox, aspect='equal')","d049d52c":"def plot(feature):\n    plt.figure(figsize=(8, 8))\n    sns.relplot(data=business_df, y='stars', x='review_count', col=feature, alpha=.4)\n\nbool_features = []\nfor tup in make_query(\"PRAGMA table_info(businesses)\"):\n    if tup[2]=='BOOLEAN':\n        bool_features.append(tup[1])\n\nfor feature in bool_features:\n    plot(feature)","3ca22cb6":"plt.figure(figsize=(8,8))\ntop_10_zip = business_df.postal_code.value_counts()[:10]\nsns.barplot(x=top_10_zip.index, y=top_10_zip.values)\nax = plt.gca()\nax.set_title('Most Popular Zip codes')\nax.set_xlabel('Zip Code')\nax.set_ylabel('Count')\n","8e7aea4a":"toprating_df = business_df[business_df[\"stars\"]==5]\ntoprating_df = toprating_df.sort_values('review_count', ascending=False).head(20)\n\nplt.figure(figsize=(15,7))\np = sns.barplot(x='name', y=\"review_count\", data=toprating_df,color=\"b\")\np.set_xticklabels(p.get_xticklabels(), rotation = 90, fontsize = 8)\np.set_title(\"Top 5 star-rated Restuarants sorted by review count\")\np.set(xlabel=\"Restaurant\", ylabel=\"Review Count\")","a8d9ccf6":"df_restaurants = business_df.name.value_counts().index[:20].tolist()\ndf_top = business_df.loc[business_df['name'].isin(df_restaurants)]\nmean_df = df_top.groupby('name')['stars'].mean()\nmeanrating_df = mean_df.reset_index()\ntopmean_rating_df = meanrating_df.sort_values('stars', ascending=False).head(20)\n\nplt.figure(figsize=(15,7))\np = sns.barplot(x='name', y=\"stars\",data=topmean_rating_df, color=\"b\")\np.set_xticklabels(p.get_xticklabels(), rotation = 90, fontsize = 8)\np.set_title(\"Top 5 star-rated Restaurants sorted by mean of ratings\")\np.set(xlabel=\"Restaurant\", ylabel=\"Rating\")","12196a84":"plt.figure(figsize=(15,7))\nsns.lineplot(x=business_df[\"stars\"],y=business_df[\"review_count\"],hue=business_df[\"DriveThru\"],ci=80)\nplt.legend(bbox_to_anchor=(1.00, 1), title =\"DriveThru\")\nplt.show()\n","9fc72949":"plt.figure(figsize=(15,7))\nsns.lineplot(x=business_df[\"stars\"],y=business_df[\"review_count\"],hue=business_df[\"GoodForDancing\"],ci=80)\nplt.legend(bbox_to_anchor=(1.00, 1), title =\"GoodForDancing\")\nplt.show()","681ec99e":"plt.figure(figsize=(20,10))\nsns.heatmap(business_df.corr(),annot=False)\nplt.show()","133640f6":"We see that reviewers who have been yelping for long have higher avg rating. We can conclude that overtime users become less harsh reviewers.","0606f54f":"## Aim\nAfter getting our data ready, we still want to make sense of it. In EDA we look at various plots and actually let the data tell us its story. This step will give us a deeper understanding of data. We'll also try to make data more amenable to modelling. We'll look at various table in database.\n\nWe'll be using matplolib and seaborn to make various plots.","cc987c2c":"Restaurants GoodForDancing also appear more popular.","2d09c823":"This is interesting as we see minimum number of reviews were given during morning and count keeps rising throughout the day which seems intuitive. But maximum number of reviews were given at 2am which is counter intuitive. Why are more people reviewing this late? Is it possible that these are bars where people stay for long but why would drunks care about reviewing? Or are people reviewing after dinner during their commute home? We would have to look at further evidence to draw conclusions.","19971c49":"We see number of reviews increased exponentially over the years. This could also be an evidence for yelp's popularity over the years.","4ed95261":"We see many most ratings are on the higher scale. Most ratings are either 5 star or 4 star.","d5b0c354":"Restaurants with Drive Through have higher ratings and higher review count. Hence are more popular.","c5d6f77d":"### Importing Libraries","2188ebd7":"## Conclusion\n- We studied various plots. \n- Restaurants with TakeOut, AcceptCreditCard, GoodForKids, Reservation, GoodForGroups, BusinessParking, HasTV, Alcohol, BikeParking, Delivery, OutdoorSeating, WiFi, Ambience, DogsAllowed, GoodForDancing, CoatCheck, CounterService, Attire are more popular in general.\n","04af717a":"We see that average rating after faceting on day is max from 5th to 10th day. But if we look at the y-scale, change is not so significant to draw a trend.","73fbb514":"Our data has most number of businesses from zip code 89109 (Las Vegas). This can be verified on map.","e9d1151f":"We see that average rating after faceting on month is minimum for 12th month ~ December. But if we look at the y-scale, change is not so significant to draw a trend.","340878dd":"We see that locations of businesses are concentrated in clusters. These clusters must be big cities. Lets plot these on a map.","d8b26ba2":"### Users Table","84c3c09f":"- Restaurants with Attire have higher ratings and more higher review count hence more popular than those without Attire.\n- Restaurants with TakeOut, AcceptCreditCard, GoodForKids, Reservation, GoodForGroups, BusinessParking, HasTV, Alcohol, BikeParking, Delivery, OutdoorSeating, WiFi, Ambience, DogsAllowed, GoodForDancing, CoatCheck, CounterService show similar trend.\n- Restaurnts with NoiseLevel also have higher avg ratings, this could be because they are located in prime locations.\n- ByAppointmentOnly restaurants show roughly similar trend to Not ByAppointmentOnly restaurants.\n- Restaurants with Outdoor Seating have better ratings and higher review count than those without OutdoorSeating. Hence restaurants with OutdoorSeating are more popular.\n- Restaurants which are WheelChairAccessible do not perform better than those who aren't.\n- Restaurants with WiFi are also more popular than those without.\n- Some restaurants without TableService have higher reviewCount than those with.\n- Restaurants with Dogs allowed also appear more popular.\n- A\/c to plot, Ambience plays a big role in a restaurants rating and review count. Those with ambience are more popular.\n- Plots for restaurants with HappyHour, DriveThrough, Music, BestNights or AcceptsBitcoin do not differ significantly than those without.\n- Restaurants without DietaryRestrictions are more highly rated than those with. \n- Restaurants with Open24Hours=0 are underrepresented.","8ef6efeb":"### Reviews Table","9c5687b2":"## 2. Exploratory Data Analysis (EDA)","5f79683e":"Restaurant businesses with highest mean scores of ratings, with 20 occurences","3f67c612":"Restaurant businesses with ratings=5 and highest review counts","52d43013":"### Businesses table","31757831":"# Restaurant Recommendation System","21931075":"The boxplot for review count reveals a lot of outliers. There are some users who have written over 10k reviews.","b8b9647c":"#### Links\n[1. Getting Data Ready](https:\/\/www.kaggle.com\/yashrajwani\/yelp-getting-data-ready)\n\n[3. Restaurant Recommendation](https:\/\/www.kaggle.com\/yashrajwani\/yelp-restaurant-recommendation-system)","aca225b1":"Most people are yelping_since mid 2010s.","92adca5a":"We see some correlations roughly at the centre of heatmap. They could be due to redundant features like a Restaurant with CarParking will most likely have BikeParking, or because high end restaurants have most of the listed features.","c79a207b":"Some users are wildly popular reviewers on yelp. Most people have few or no fans","d1374d24":"We see our data has businesses from certain cities of U.S. and not all over U.S."}}