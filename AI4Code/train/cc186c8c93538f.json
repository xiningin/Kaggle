{"cell_type":{"ac28c935":"code","8ad0de66":"code","378564e5":"code","0061ae78":"code","5b212134":"code","409fce26":"code","c719ca76":"code","fa60c06c":"code","ba675934":"code","568328da":"code","2f470890":"code","9abf78bf":"code","e9c33dcb":"code","a4e50d10":"code","fecb76cf":"code","66c1923b":"code","914e9dd8":"code","ad852018":"code","d175b2e3":"code","5a27679e":"code","98582dc5":"code","260cb12c":"code","dd422297":"code","fed9e9d5":"code","4d2d27ce":"code","10d59cc9":"code","4385916f":"code","50cbed45":"code","0bbbe43e":"code","da2af48a":"code","6770162d":"code","3b5aab93":"code","f3bdc81e":"code","c071efd9":"code","97849d92":"code","40c200dc":"code","a7ed5449":"code","d9010ebf":"code","ae1b485c":"code","5f796d17":"code","f451a8f0":"code","a9b475b2":"code","4331ff7d":"code","2e9be610":"code","9d6358b0":"code","b69af8c4":"code","6eb97e9d":"code","b3d4fa06":"code","e66f5a88":"code","633587a5":"code","07e91867":"code","fcf6cabf":"code","0a327c8e":"code","abe008b3":"code","aac35da8":"code","8db46e99":"code","55ed33c6":"code","7df404df":"markdown","a319f93d":"markdown","36601995":"markdown","c2e3b9c3":"markdown","e7f4cb60":"markdown","846831de":"markdown","e6e0a0ca":"markdown","6485b86b":"markdown","e0def933":"markdown","02f32a34":"markdown","0bb892a2":"markdown"},"source":{"ac28c935":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\n# NLTK modules\nimport nltk\nnltk.download('punkt')\nnltk.download('stopwords')\nnltk.download('wordnet')\nfrom nltk.stem import PorterStemmer, WordNetLemmatizer\n\nimport re\n\nfrom gensim.models import Word2Vec # Word2Vec module\nfrom gensim.parsing.preprocessing import preprocess_string, strip_tags, strip_punctuation, remove_stopwords, strip_numeric, stem_text\nfrom sklearn.model_selection import GridSearchCV, train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler, RobustScaler\nfrom sklearn.pipeline import Pipeline\n\nfrom sklearn.svm import LinearSVC\nfrom sklearn.metrics import precision_score, recall_score, f1_score, accuracy_score\nfrom imblearn.over_sampling import RandomOverSampler\n\nfrom lightgbm import LGBMClassifier\nfrom sklearn.multiclass import OneVsRestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8ad0de66":"train_data = pd.read_csv('\/kaggle\/input\/janatahack-independence-day-2020-ml-hackathon\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/janatahack-independence-day-2020-ml-hackathon\/test.csv')\nsubmission_data = pd.read_csv('\/kaggle\/input\/janatahack-independence-day-2020-ml-hackathon\/sample_submission_UVKGLZE.csv')","378564e5":"print(train_data.isnull().sum())\nprint(train_data.columns)","0061ae78":"# Converting binary column to category\nto_convert = ['Computer Science', 'Physics', 'Mathematics','Statistics', 'Quantitative Biology', 'Quantitative Finance']\n\n# Make a copy of train data\ntopic_data = train_data.copy()","5b212134":"topic_data = topic_data[to_convert]","409fce26":"topic_data","c719ca76":"a = topic_data.idxmax(axis=1)","fa60c06c":"a= pd.DataFrame(a)\na.head(7)","ba675934":"a","568328da":"topic_data","2f470890":"# Changing the binary fields to categorical fields\ntopic_data = topic_data[topic_data[to_convert]==1].stack().reset_index().drop(0,1)\n\ntopic_data['ID'] = topic_data['level_0'].apply(lambda x: x+1)\ntopic_data = topic_data.drop('level_0', axis=1)\n\n# Merge the data based on ID\nmerge_data = train_data.merge(topic_data, how='left', on='ID' )\n# Drop all the binary fields\nmerge_data = merge_data.drop(to_convert, axis=1)\n","9abf78bf":"# Rename the column to Category\nmerge_data = merge_data.rename({'level_1':'CATEGORY'}, axis=1)\nmerge_data.head(7)","e9c33dcb":"articles = merge_data\n\n# list unique classes\nprint(np.unique(articles.CATEGORY))","a4e50d10":"# Plot category data\nplt.figure(figsize=(10,6))\nsns.countplot(articles.CATEGORY)\nplt.show()","fecb76cf":"import string\nimport nltk\nfrom nltk.corpus import stopwords\nfrom sklearn.feature_extraction.text import CountVectorizer,TfidfTransformer\nfrom nltk.stem import WordNetLemmatizer\n\nfrom nltk.stem.porter import PorterStemmer\n\nlement = WordNetLemmatizer()\nstemr = PorterStemmer()\nstopword = stopwords.words('english')","66c1923b":"stopword","914e9dd8":"def text_preprocessing(texts):\n    tex=texts.strip()\n    \n    texts_word=[word for word in tex.split() if \"@\" not in word]\n    tex=\" \".join(texts_word)\n#     texts_word=[word for word in tex.split() if \"@\" not in word]\n#     tex=\" \".join(texts_word)\n    \n    texts_word=[word for word in tex.split() if \"$\" not in word]\n    tex=\" \".join(texts_word)\n    texts_word=[word for word in tex.split() if \"^\" not in word]\n    tex=\" \".join(texts_word)\n    texts_word=[word for word in tex.split() if \"_\" not in word]\n    tex=\" \".join(texts_word)\n    texts_word=[word for word in tex.split() if \"=\" not in word]\n    tex=\" \".join(texts_word)\n    \n    \n    texts_word=[word for word in tex.split() if \"www.\" not in word]\n    tex=\" \".join(texts_word)\n    \n    texts_word=[word for word in tex.split() if \"http\" not in word]\n    tex=\" \".join(texts_word)\n    \n    \n    texts_word=[word for word in tex if word not in string.punctuation]\n    tex=\"\".join(texts_word)\n    \n    \n    texts_word=[word for word in tex.split() if word not in stopword]\n    tex=\" \".join(texts_word)\n    \n    texts_word = [lement.lemmatize(word) for word in tex.split()]\n    tex = \" \".join(texts_word)\n    \n    texts_word = [stemr.stem(word) for word in tex.split()]\n    tex = \" \".join(texts_word)\n        \n    \n#     texts_word=[word for word in tex.split() if word.isalpha()]\n#     tex=\" \".join(texts_word)\n    \n    \n    texts_word=[word.lower() for word in tex.split()]\n    tex=\" \".join(texts_word)\n    tex=tex.strip()\n    return tex.split()","ad852018":"a = 'hello ddEEEE !@ hellllksdsd this  is my @ # nt this is end going doing helping'","d175b2e3":"b = text_preprocessing(a)","5a27679e":"b","98582dc5":"articles['TEXT'] = articles['TITLE'].map(str) + articles['ABSTRACT'].map(str)","260cb12c":"articles['TEXT']","dd422297":"text_preprocessing(a)","fed9e9d5":"articles.drop(columns='ID',inplace=True)","4d2d27ce":"article = articles.drop(columns='CATEGORY')","10d59cc9":"articles.TEXT","4385916f":"cv=CountVectorizer(analyzer=text_preprocessing).fit(articles['TEXT'])","50cbed45":"cv_trans=cv.transform(article['TEXT'])\ncv_trans","0bbbe43e":"tfidf=TfidfTransformer().fit(cv_trans)\ntfidf_trans=tfidf.transform(cv_trans)","da2af48a":"from sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import classification_report,confusion_matrix,accuracy_score\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler, RobustScaler","6770162d":"lb = LabelEncoder()\narticles.CATEGORY = lb.fit_transform(articles.CATEGORY)","3b5aab93":"articles","f3bdc81e":"X_train,X_test,y_train,y_test=train_test_split(tfidf_trans,articles.CATEGORY,test_size=0.15,random_state=42)","c071efd9":"ggghfrom sklearn.model_selection import GridSearchCV\nC=[0.05,0.1,0.2,0.3,0.25,0.4,0.5,0.6,0.7,0.8,0.9,1]\ngamma=[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0]\nkernel=['rbf','linear']\nhyper={'kernel':kernel,'C':C,'gamma':gamma}\n\njbj\ngd=GridSearchCV(estimator=SVC(),param_grid=hyper,verbose=1000)\ngd.fit(X_train,y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","97849d92":"lgbm_params = {\n    'n_estimators': 500,\n    'num_leaves': 60,\n     'min_data_in_leaf': 60, \n     'objective':'multiclass',\n     'max_depth': 6,\n     'learning_rate': 0.2,\n     \"boosting\": \"gbdt\",\n     \"feature_fraction\": 0.8,\n     \"bagging_freq\": 1,\n     \"bagging_fraction\": 0.8 ,\n     \"bagging_seed\": 11,\n     \"eval_metric\": 'logloss',\n     \"lambda_l1\": 0.5,\n     \"random_state\": 42,\n    'verbose':1\n    \n}\n\nlgbm_clf = LGBMClassifier(**lgbm_params)\nlgbm_clf.fit(X_train, y_train)","40c200dc":"# sv_model = SVC(C=0.9, break_ties=False, cache_size=200, class_weight=None, coef0=0.0,\n#     decision_function_shape='ovr', degree=3, gamma=0.1, kernel='linear',\n#     max_iter=-1, probability=False, random_state=None, shrinking=True,\n#     tol=0.001, verbose=False)\n \n\n\n\n\n# sv_model.fit(X_train, y_train)\na = lgbm_clf.predict(X_test)\nconfusion_matrix(y_test,a)","a7ed5449":"from sklearn.metrics import f1_score,average_precision_score,roc_auc_score\n\n\nprint(f1_score(y_test, a, average='micro'))\n","d9010ebf":"dataset['text'] = dataset['text'].astype('str')","ae1b485c":"articles['Processed'] = articles['TEXT'].apply(text_preprocessing())","5f796d17":"articles","f451a8f0":"# Stemmer object\nporter = PorterStemmer()\nwnl = WordNetLemmatizer()\n\nclass DataPreprocess:\n    \n    def __init__(self):\n        self.filters = [strip_tags,\n                       strip_numeric,\n                       strip_punctuation,\n                       lambda x: x.lower(),\n                       lambda x: re.sub(r'\\s+\\w{1}\\s+', '', x),\n                       remove_stopwords]\n    def __call__(self, doc):\n        clean_words = self.__apply_filter(doc)\n        return clean_words\n    \n    def __apply_filter(self, doc):\n        try:\n            cleanse_words = set(preprocess_string(doc, self.filters))\n#             filtered_words = set(wnl.lemmatize(w) if w.endswith('e') or w.endswith('y') else porter.stem(w) for w in cleanse_words)\n            return ' '.join(cleanse_words)\n        except TypeError as te:\n            raise(TypeError(\"Not a valid data {}\".format(te)))","a9b475b2":"# Combine the Title and Abstract data\narticles['TEXT'] = articles['TITLE'].map(str) + articles['ABSTRACT'].map(str)\n\n# articles['Processed'] = articles['TEXT'].apply(text_preprocessing())\n","4331ff7d":"articles","2e9be610":"articles['Processed']","9d6358b0":"X = np.reshape(articles['Processed'].values, (-1,1))\ny = np.reshape(articles['CATEGORY'].values, (-1,1))\n\nros = RandomOverSampler(sampling_strategy='minority', random_state=27)\n\nX_res, y_res = ros.fit_resample(X, y)\n\nprint(X_res.shape, y_res.shape)","b69af8c4":"def vectorize(vector, X_train, X_test):\n    vector_fit = vector.fit(X_train)\n    \n    X_train_vec = vector_fit.transform(X_train)\n    X_test_vec = vector_fit.transform(X_test)\n    \n    print(\"Vectorization is completed.\")\n    return X_train_vec, X_test_vec\n\ndef label_encoding(y_train):\n    \"\"\"\n        Encode the given list of class labels\n        :y_train_enc: returns list of encoded classes\n        :labels: actual class labels\n    \"\"\"\n    lbl_enc = LabelEncoder()\n    \n    y_train_enc = lbl_enc.fit_transform(y_train)\n    labels = lbl_enc.classes_\n    \n    return y_train_enc, labels\n\n\n# Encode the class labels","6eb97e9d":"X = X_res\ny = y_res\n\ny_enc_train, labels = label_encoding(y)\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y_enc_train, test_size=0.3, shuffle=True)","b3d4fa06":"print(X_train.shape, X_valid.shape)","e66f5a88":"tfidf_vector = TfidfVectorizer(min_df=3, analyzer='word', \n                               strip_accents='unicode', \n                               token_pattern=r'\\w{1}',\n                               ngram_range=(1,3), \n                               max_features=5000,\n                               use_idf=1, \n                               smooth_idf=1,\n                                sublinear_tf=1,\n                              stop_words='english')\n# TFIDFVectorizer \nX_train_vec, X_valid_vec = vectorize(tfidf_vector, X_train.flatten(), X_valid.flatten())","633587a5":"lgbm_params = {\n    'n_estimators': 500,\n    'num_leaves': 60,\n     'min_data_in_leaf': 60, \n     'objective':'multiclass',\n     'max_depth': 6,\n     'learning_rate': 0.2,\n     \"boosting\": \"gbdt\",\n     \"feature_fraction\": 0.8,\n     \"bagging_freq\": 1,\n     \"bagging_fraction\": 0.8 ,\n     \"bagging_seed\": 11,\n     \"eval_metric\": 'logloss',\n     \"lambda_l1\": 0.5,\n     \"random_state\": 42,\n    'verbose':1\n    \n}\n\nlgbm_clf = LGBMClassifier(**lgbm_params)\nlgbm_clf.fit(X_train_vec, y_train)","07e91867":"\n# model = LinearSVC()\nmodel = LogisticRegression(C=1.0, \n                           class_weight='balanced')\n\n# Initialize OVR classifier with ML Algorithm\novr = OneVsRestClassifier(estimator=model)\n\novr.fit(X_train_vec, y_train)","fcf6cabf":"# y_pred = lgbm_clf.predict(X_valid_vec)\ny_pred = ovr.predict(X_valid_vec)\n\nprint(\"Accuracy: %1.3f \\tPrecision: %1.3f \\tRecall: %1.3f \\tF1-Score: %1.3f\\n\" % (accuracy_score(y_valid, y_pred),\n                                                                                     precision_score(y_valid, y_pred, average='micro'),\n                                                                                     recall_score(y_valid, y_pred, average='micro'),\n                                                                                     f1_score(y_valid, y_pred, average='micro')))","0a327c8e":"test_data['Text'] = test_data['TITLE'] + test_data['ABSTRACT']\n\ntest_data['Processed'] = test_data['Text'].apply(DataPreprocess())","abe008b3":"# Feature extraction\nX_train_vec, X_test_vec = vectorize(tfidf_vector, X_train.flatten(), test_data['Processed'])","aac35da8":"# y_preds = lgbm_clf.predict(X_test_vec)\ny_preds = ovr.predict(X_test_vec)\ntest_df = test_data.copy()\n\ntest_df['category'] = pd.Series(y_preds, index=test_data.index)","8db46e99":"test_df['category'].unique()","55ed33c6":"\ntest_df[labels] = pd.get_dummies(test_df['category'], columns=labels)\n\nfinal_df = test_df.drop(['TITLE', 'ABSTRACT', 'Text', 'Processed', 'category'], axis=1)\n\nsubmission_data = final_df[submission_data.columns]\n\nsubmission_data\n\nsubmission_data.to_csv('multiclass_lr_03.csv', index=False)","7df404df":"## Build A Model\n\n1. Light GBM - Score is 74.40\n2. OneVsRestClassifier(SVC) - Score: 74.08\n3. OneVsRestClassifier(LR) - Score: 75.39","a319f93d":"## Prepare Test Data","36601995":"## Data Preparation","c2e3b9c3":"## Resampling Data","e7f4cb60":"## Import Libraries","846831de":"## Explore Data","e6e0a0ca":"## Feature Engineering\n### Convert one-hot encoded fields to categories","6485b86b":"# AnalyticVidhya - JanataHack on Topic Modeling\n\n## Problem statement\n\nResearchers have access to large online archives of scientific articles. As a consequence, finding relevant articles has become more difficult. Tagging or topic modelling provides a way to give token of identification to research articles which facilitates recommendation and search process.\n\nGiven the abstract and title for a set of research articles, predict the topics for each article included in the test set. \n\nNote that a research article can possibly have more than 1 topic. The research article abstracts and titles are sourced from the following 6 topics: \n\n1. Computer Science\n\n2. Physics\n\n3. Mathematics\n\n4. Statistics\n\n5. Quantitative Biology\n\n6. Quantitative Finance\n\n## Dataset\n\nThe dataset consists of three files `train.csv`, `test.csv` and `sample_submission.csv`.\n\n|Fields| Description|\n|-------|-----------|\n|ID |Unique ID for each article|\n|TITLE|Title of the research article|\n|ABSTRACT|Abstract of the research article|\n|Computer Science|Whether article belongs to topic computer science (1\/0)|\n|Physics\t|Whether article belongs to topic physics (1\/0)|\n|Mathematics\t|Whether article belongs to topic Mathematics (1\/0)|\n|Statistics\t|Whether article belongs to topic Statistics (1\/0)|\n|Quantitative Biology\t|Whether article belongs to topic Quantitative Biology (1\/0)|\n|Quantitative Finance|Whether article belongs to topic Quantitative Finance (1\/0)|\n\n\n","e0def933":"## Some of the pre-processing steps on text data are:\n1. Removing unnecessary white spaces\n2. Tokenization\n3. Lowering the words\n4. Removing hashtags, mentions, URLs\n5. Stopwords handling\n6. Spelling correction\n7. Stemming\/lemmatization\n8. Emoji handling\n9. Cleaning HTML","02f32a34":"## Loading Dataset","0bb892a2":"## Feature Extraction"}}