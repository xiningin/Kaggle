{"cell_type":{"786ccedd":"code","eac35b03":"code","82a22631":"code","ce21396c":"code","53a74006":"code","d6f2aafd":"code","aa234d0e":"code","2f21df07":"code","68b8bbfb":"code","4d180531":"code","378c189c":"code","01bea902":"code","5c9f937a":"code","345d185b":"code","fa0a54e3":"code","99ad5aac":"code","1bf6f043":"code","d1e00368":"code","b12bca74":"code","64b51c7b":"code","a4d2590d":"code","4fd0b0fc":"code","2d92e4b9":"code","2adb698d":"code","a6f3f3cd":"code","8c4adcbc":"code","8a8a9134":"code","3e15a7f2":"code","71c78421":"code","9c5beaa4":"code","a43c44b1":"code","da0ab18e":"code","fa8708b2":"code","6f4dd888":"code","b11b5af6":"code","51752e5d":"code","70c02e9d":"code","b3b59471":"code","4782677b":"code","b0f82c8a":"code","6baeea75":"code","423e4350":"code","636903a7":"code","f6abd414":"code","ba5e1423":"code","b800b10a":"code","76e00f76":"code","ade735eb":"code","cf273c4d":"code","ef1a15d2":"code","1d47b632":"code","0e66b4a9":"code","29c0fdb9":"code","1a52814d":"code","23272f23":"code","40ce8559":"code","b4ccba0a":"code","6c8c41a6":"code","94250024":"code","1df303c9":"code","968c2880":"code","7d1c252e":"code","e3969995":"code","e774f8a9":"code","fc7051ad":"code","6eccf659":"code","8dbde02e":"code","528b123b":"code","52a8881f":"markdown","0b0510a3":"markdown","62112ff5":"markdown","96572cc9":"markdown","c8913357":"markdown","c0766873":"markdown","205da717":"markdown","73ec2422":"markdown","25078059":"markdown","7abd2a79":"markdown","f9490ebf":"markdown","23aec6e3":"markdown","4ae30e43":"markdown","94547221":"markdown","7e71db58":"markdown","74a50efb":"markdown","3660b80e":"markdown","94e8ebad":"markdown","e4a9a6b2":"markdown","d7c7531f":"markdown","91497e2a":"markdown","73b531ff":"markdown","8ac3221c":"markdown","41ff55ab":"markdown","e93ffcee":"markdown","ab0d8f2b":"markdown","c75cfb83":"markdown","153ba64f":"markdown","fa780581":"markdown","8c98f9c2":"markdown","baa2a305":"markdown","74357d46":"markdown","38a7f63d":"markdown","470dd6d5":"markdown","05701690":"markdown","d029d104":"markdown","e9cea54e":"markdown","8c5b2b78":"markdown","34907f0c":"markdown","54ff0f45":"markdown","f573e135":"markdown","651d7dd2":"markdown","2e74d7ff":"markdown","98b357c5":"markdown","53b2de87":"markdown","42fd402a":"markdown","ffd8768b":"markdown","fdafc972":"markdown","a74c4a87":"markdown","fdbe82ac":"markdown","e7b9d01d":"markdown","89661129":"markdown","05fba987":"markdown","a74a158e":"markdown","a9bc6895":"markdown","0d50fa48":"markdown","3eecde00":"markdown","4de2f15c":"markdown","f3b5abef":"markdown","e04482bc":"markdown"},"source":{"786ccedd":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport json\nimport gc\nimport sys\nimport math\n\nfrom pandas.io.json import json_normalize\nfrom datetime import datetime\nfrom sklearn import preprocessing\n\nimport os\nprint(os.listdir(\"..\/input\"))","eac35b03":"def load_df(csv_path, nrows=None):\n    JSON_COLUMNS = ['device', 'geoNetwork', 'totals', 'trafficSource']\n    \n    df = pd.read_csv(csv_path, \n                     converters={column: json.loads for column in JSON_COLUMNS}, \n                     dtype={'fullVisitorId': 'str'}, # Important!!\n                     nrows=nrows)\n    \n    for column in JSON_COLUMNS:\n        column_as_df = json_normalize(df[column])\n        column_as_df.columns = [f\"{column}.{subcolumn}\" for subcolumn in column_as_df.columns]\n        df = df.drop(column, axis=1).merge(column_as_df, right_index=True, left_index=True)\n    print(f\"Loaded {os.path.basename(csv_path)}. Shape: {df.shape}\")\n    return df","82a22631":"%%time\ntrain = load_df('..\/input\/train.csv')\ntest = load_df('..\/input\/test.csv')\n\nprint('train date:', min(train['date']), 'to', max(train['date']))\nprint('test date:', min(test['date']), 'to', max(test['date']))","ce21396c":"# only train feature\nfor c in train.columns.values:\n    if c not in test.columns.values: print(c)","53a74006":"train['totals.transactionRevenue'].fillna(0, inplace=True)\ntrain['totals.transactionRevenue'] = np.log1p(train['totals.transactionRevenue'].astype(float))\nprint(train['totals.transactionRevenue'].describe())","d6f2aafd":"all_data = train.append(test, sort=False).reset_index(drop=True)","aa234d0e":"print(all_data.info())","2f21df07":"all_data.count()","68b8bbfb":"all_data.isnull().sum()   #null\uac1c\uc218 \ud655\uc778","4d180531":"x='channelGrouping'\nall_data[x].value_counts()","378c189c":"x='date'\nall_data[x].value_counts()","01bea902":"x='fullVisitorId'\nall_data[x].value_counts()","5c9f937a":"x='sessionId'\nall_data[x].value_counts()","345d185b":"x='socialEngagementType'\nall_data[x].value_counts()","fa0a54e3":"x='visitId'\nall_data[x].value_counts()","99ad5aac":"x='visitNumber'\nall_data[x].value_counts()","1bf6f043":"x='visitStartTime'\nall_data[x].value_counts()","d1e00368":"x='device.browser'\nall_data[x].value_counts()","b12bca74":"x='device.browserSize'\nall_data[x].value_counts()","64b51c7b":"x='device.browserVersion'\nall_data[x].value_counts()","a4d2590d":"x='device.deviceCategory'\nall_data[x].value_counts()","4fd0b0fc":"x='device.flashVersion'\nall_data[x].value_counts()","2d92e4b9":"x='device.isMobile'\nall_data[x].value_counts()","2adb698d":"x='device.language'\nall_data[x].value_counts()","a6f3f3cd":"x='device.mobileDeviceBranding'\nall_data[x].value_counts()","8c4adcbc":"x='device.mobileDeviceInfo'\nall_data[x].value_counts()","8a8a9134":"x='device.mobileDeviceMarketingName'\nall_data[x].value_counts()","3e15a7f2":"x='device.mobileDeviceModel'\nall_data[x].value_counts()","71c78421":"x='device.mobileInputSelector'\nall_data[x].value_counts()","9c5beaa4":"x='device.operatingSystem'\nall_data[x].value_counts()","a43c44b1":"x='device.operatingSystemVersion'\nall_data[x].value_counts()","da0ab18e":"x='device.screenColors'\nall_data[x].value_counts()","fa8708b2":"x='device.screenResolution'\nall_data[x].value_counts()","6f4dd888":"x='geoNetwork.city'\nall_data[x].value_counts()","b11b5af6":"x='geoNetwork.cityId'\nall_data[x].value_counts()","51752e5d":"x='geoNetwork.continent'\nall_data[x].value_counts()","70c02e9d":"x='geoNetwork.country'\nall_data[x].value_counts()","b3b59471":"x='geoNetwork.latitude'\nall_data[x].value_counts()","4782677b":"x='geoNetwork.longitude'\nall_data[x].value_counts()","b0f82c8a":"x='geoNetwork.metro'\nall_data[x].value_counts()","6baeea75":"x='geoNetwork.networkDomain'\nall_data[x].value_counts()","423e4350":"x='geoNetwork.networkLocation'\nall_data[x].value_counts()","636903a7":"x='geoNetwork.region'\nall_data[x].value_counts()","f6abd414":"x='geoNetwork.subContinent'\nall_data[x].value_counts()","ba5e1423":"x='totals.bounces'\nall_data[x].value_counts()","b800b10a":"x='totals.hits'\nall_data[x].value_counts()","76e00f76":"x='totals.newVisits'\nall_data[x].value_counts()","ade735eb":"x='totals.pageviews'\nall_data[x].value_counts()","cf273c4d":"x='totals.transactionRevenue'\nall_data[x].value_counts()","ef1a15d2":"x='totals.visits'\nall_data[x].value_counts()","1d47b632":"x='trafficSource.adContent'\nall_data[x].value_counts()","0e66b4a9":"x='trafficSource.adwordsClickInfo.adNetworkType'\nall_data[x].value_counts()","29c0fdb9":"x='trafficSource.adwordsClickInfo.criteriaParameters'\nall_data[x].value_counts()","1a52814d":"x='trafficSource.adwordsClickInfo.gclId'\nall_data[x].value_counts()","23272f23":"x='trafficSource.adwordsClickInfo.isVideoAd'\nall_data[x].value_counts()","40ce8559":"x='trafficSource.adwordsClickInfo.page'\nall_data[x].value_counts()","b4ccba0a":"x='trafficSource.adwordsClickInfo.slot'\nall_data[x].value_counts()","6c8c41a6":"x='trafficSource.campaign'\nall_data[x].value_counts()","94250024":"x='trafficSource.campaignCode'\nall_data[x].value_counts()","1df303c9":"x='trafficSource.isTrueDirect'\nall_data[x].value_counts()","968c2880":"x='trafficSource.keyword'\nall_data[x].value_counts()","7d1c252e":"x='trafficSource.medium'\nall_data[x].value_counts()","e3969995":"x='trafficSource.referralPath'\nall_data[x].value_counts()","e774f8a9":"x='trafficSource.source'\nall_data[x].value_counts()","fc7051ad":"#maxVisitNumber = max(all_data['visitNumber'])\n#fvid = all_data[all_data['visitNumber'] == maxVisitNumber]['fullVisitorId']\n#all_data[all_data['fullVisitorId'] == fvid.values[0]].sort_values(by='visitNumber')","6eccf659":"#all_data['socialEngagementType'].value_counts()","8dbde02e":"#print(all_data['totals.visits'].value_counts())","528b123b":"#print(all_data['campaignCode'].value_counts())","52a8881f":"## socialEngagementType\n* Engagement type, either \"Socially Engaged\" or \"Not Socially Engaged\".","0b0510a3":"print('unique trafficSource.medium count:', train['trafficSource.medium'].nunique())\nplotCategoryRateBar(all_data, train_rev, 'trafficSource.medium')","62112ff5":"print('unique operatingSystem count:', train['device.operatingSystem'].nunique())\nplotCategoryRateBar(all_data, train_rev, 'device.operatingSystem', 10)","96572cc9":"## geoNetwork","c8913357":"## fullVisitorId\n* A unique identifier for each user of the Google Merchandise Store.\n\n## visitId\n* An identifier for this session. This is part of the value usually stored as the _utmb cookie. This is only unique to the user.   \nFor a completely unique ID, you should use a combination of fullVisitorId and visitId.\n\n## newVisits\n","c0766873":"print(all_data['trafficSource.isTrueDirect'].value_counts())\nplotCategoryRateBar(all_data, train_rev, 'trafficSource.isTrueDirect')","205da717":"all_data.info()","73ec2422":"print(all_data['totals.pageviews'].value_counts()[:10])\n\nall_data['totals.pageviews'] = all_data['totals.pageviews'].astype(int)","25078059":"pd.crosstab(all_data['device.deviceCategory'], all_data['device.isMobile'], margins=False)","7abd2a79":"## totals","f9490ebf":"## date","23aec6e3":"## Aggregate","4ae30e43":"submission_sum['PredictedLogRevenue'].describe()","94547221":"## sessionId\n*  A unique identifier for this visit to the store.","7e71db58":"all_data['_visitStartHour'] = all_data['visitStartTime'].apply(\n    lambda x: str(datetime.fromtimestamp(x).hour))","74a50efb":"## Select feature","3660b80e":"train_id = train['fullVisitorId']\ntest_id = test['fullVisitorId']\n\nY_train_reg = train.pop('totals.transactionRevenue')\nY_train_cls = (Y_train_reg.fillna(0) > 0).astype(np.uint8)\nX_train = train.drop(['fullVisitorId'], axis=1)\nX_test  = test.drop(['fullVisitorId'], axis=1)\n\nprint(X_train.shape, X_test.shape)","94e8ebad":"format_str = '%Y%m%d'\nall_data['formated_date'] = all_data['date'].apply(lambda x: datetime.strptime(str(x), format_str))\nall_data['_year'] = all_data['formated_date'].apply(lambda x:x.year)\nall_data['_month'] = all_data['formated_date'].apply(lambda x:x.month)\nall_data['_quarterMonth'] = all_data['formated_date'].apply(lambda x:x.day\/\/8)\nall_data['_day'] = all_data['formated_date'].apply(lambda x:x.day)\nall_data['_weekday'] = all_data['formated_date'].apply(lambda x:x.weekday())\n\nall_data.drop(['date','formated_date'], axis=1, inplace=True)","e4a9a6b2":"print('unique geoNetwork.subContinent count:', train['geoNetwork.subContinent'].nunique())\nplotCategoryRateBar(all_data, train_rev, 'geoNetwork.subContinent', 10)","d7c7531f":"# fillna object feature\nfor col in ['trafficSource.keyword',\n            'trafficSource.referralPath',\n            'trafficSource.adwordsClickInfo.gclId',\n            'trafficSource.adwordsClickInfo.adNetworkType',\n            'trafficSource.adwordsClickInfo.isVideoAd',\n            'trafficSource.adwordsClickInfo.page',\n            'trafficSource.adwordsClickInfo.slot',\n            'trafficSource.adContent']:\n    all_data[col].fillna('unknown', inplace=True)\n\n# fillna numeric feature\nall_data['totals.pageviews'].fillna(1, inplace=True)\nall_data['totals.newVisits'].fillna(0, inplace=True)\nall_data['totals.bounces'].fillna(0, inplace=True)\nall_data['totals.pageviews'] = all_data['totals.pageviews'].astype(int)\nall_data['totals.newVisits'] = all_data['totals.newVisits'].astype(int)\nall_data['totals.bounces'] = all_data['totals.bounces'].astype(int)\n\n# fillna boolean feature\nall_data['trafficSource.isTrueDirect'].fillna(False, inplace=True)","91497e2a":"print('unique trafficSource.referralPath count:', train['trafficSource.referralPath'].nunique())\nplotCategoryRateBar(all_data, train_rev, 'trafficSource.referralPath', 10)\n\nall_data['_referralRoot'] = (all_data['trafficSource.referralPath'] == '\/').astype(np.uint8)","73b531ff":"from sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\nimport lightgbm as lgb","8ac3221c":"# pickup any visitor\nall_data[all_data['fullVisitorId'] == '7813149961404844386'].sort_values(by='visitNumber')[\n    ['date','visitId','visitNumber','totals.hits','totals.pageviews']].head(20)","41ff55ab":"print('train all:', len(train))\nprint('train unique fullVisitorId:', train['fullVisitorId'].nunique())\nprint('train unique visitId:', train['visitId'].nunique())\nprint('-' * 30)\nprint('test all:', len(test))\nprint('test unique fullVisitorId:', test['fullVisitorId'].nunique())\nprint('test unique visitId:', test['visitId'].nunique())\n\n#print('common fullVisitorId:', len(pd.merge(train, test, how='inner', on='fullVisitorId'))) # 183434","e93ffcee":"%%time\n\nparams={'learning_rate': 0.01,\n        'objective':'regression',\n        'metric':'rmse',\n        'num_leaves': 64,\n        'bagging_freq': 3,\n        'bagging_fraction': 1,\n        'feature_fraction': 1,\n        'max_depth':-1,\n        'subsample_for_bin':50000,\n        'random_state':42\n       }\n'''\nreg = lgb.LGBMRegressor(**params, n_estimators=3000)\nreg.fit(X_train, Y_train_cls, verbose=100)\npred_reg = reg.predict(X_test, num_iteration=reg.best_iteration_)\n'''\nfolds = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n\noof_preds = np.zeros(X_train.shape[0])\nsub_preds = np.zeros(X_test.shape[0])\nfor fold_, (trn_, val_) in enumerate(folds.split(X_train, Y_train_cls)):\n    trn_x, trn_y = X_train.iloc[trn_], Y_train_cls.iloc[trn_]\n    val_x, val_y = X_train.iloc[val_], Y_train_cls.iloc[val_]\n    \n    reg = lgb.LGBMRegressor(**params, n_estimators=3000)\n    reg.fit(trn_x, trn_y, eval_set=[(val_x, val_y)], early_stopping_rounds=50, verbose=500)\n    \n    oof_preds[val_] = reg.predict(val_x, num_iteration=reg.best_iteration_)\n    print(roc_auc_score(val_y, oof_preds[val_]))\n    sub_preds += reg.predict(X_test, num_iteration=reg.best_iteration_) \/ folds.n_splits\n\npred_reg = sub_preds\nprint(len(pred_reg), len(pred_reg[pred_reg > 0.1]))","ab0d8f2b":"#pd.crosstab(train_rev['device.deviceCategory'], train_rev['device.isMobile'], margins=False)\n\nall_data['isMobile'] = True\nall_data.loc[all_data['device.deviceCategory'] == 'desktop', 'isMobile'] = False","c75cfb83":"print('unique geoNetwork.city count:', train['geoNetwork.city'].nunique())\nplotCategoryRateBar(all_data, train_rev, 'geoNetwork.city', 10)","153ba64f":"plotCategoryRateBar(all_data, train_rev, 'channelGrouping')","fa780581":"print('unique trafficSource.campaign count:', train['trafficSource.campaign'].nunique())\nplotCategoryRateBar(all_data, train_rev, 'trafficSource.campaign', 10)\n\nall_data['_withCampaign'] = (all_data['trafficSource.campaign'] != '(not set)').astype(np.uint8)","8c98f9c2":"print('unique geoNetwork.region count:', train['geoNetwork.region'].nunique())\nplotCategoryRateBar(all_data, train_rev, 'geoNetwork.region', 10)","baa2a305":"print('unique geoNetwork.networkDomain count:', train['geoNetwork.networkDomain'].nunique())\nplotCategoryRateBar(all_data, train_rev, 'geoNetwork.networkDomain', 10)","74357d46":"print('unique trafficSource.source count:', train['trafficSource.source'].nunique())\nplotCategoryRateBar(all_data, train_rev, 'trafficSource.source', 10)\n\nall_data['_sourceGpmall'] = (all_data['trafficSource.source'] == 'mall.googleplex.com').astype(np.uint8)","38a7f63d":"# drop constant column\nconstant_column = [col for col in all_data.columns if all_data[col].nunique() == 1]\n#for c in constant_column:\n#    print(c + ':', train[c].unique())\n\nprint('drop columns:', constant_column)\nall_data.drop(constant_column, axis=1, inplace=True)","470dd6d5":"train = all_data[all_data['totals.transactionRevenue'].notnull()]\ntest = all_data[all_data['totals.transactionRevenue'].isnull()].drop(['totals.transactionRevenue'], axis=1)","05701690":"print(all_data['totals.hits'].value_counts()[:10])\n\nall_data['totals.hits'] = all_data['totals.hits'].astype(int)","d029d104":"plotCategoryRateBar(all_data, train_rev, 'geoNetwork.continent')","e9cea54e":"# Prediction","8c5b2b78":"print(all_data['visitNumber'].value_counts()[:5])\nprint('-' * 30)\nprint(all_data['totals.newVisits'].value_counts())\nprint('-' * 30)\nprint(all_data['totals.bounces'].value_counts())","34907f0c":"null_cnt = train.isnull().sum().sort_values()\nprint(null_cnt[null_cnt > 0])","54ff0f45":"all_data.drop([\n    'sessionId','visitId','visitStartTime',\n    'trafficSource.adwordsClickInfo.adNetworkType',\n    'trafficSource.adwordsClickInfo.gclId',\n    'trafficSource.adwordsClickInfo.page',\n    'trafficSource.adwordsClickInfo.slot'],axis=1,inplace=True)\n\nfor i, t in all_data.loc[:, all_data.columns != 'fullVisitorId'].dtypes.iteritems():\n    if t == object:\n        all_data[i].fillna('unknown', inplace=True)\n        all_data[i] = pd.factorize(all_data[i])[0]\n        #all_data[i] = all_data[i].astype('category')","f573e135":"train_rev = all_data[all_data['totals.transactionRevenue'] > 0].copy()\nprint(len(train_rev))\ntrain_rev.head()","651d7dd2":"null_cnt = all_data.isnull().sum().sort_values()\nprint(null_cnt[null_cnt > 0])","2e74d7ff":"**DROP","98b357c5":"all_data.columns\n","53b2de87":"%%time\n\nparams={'learning_rate': 0.03,\n        'objective':'regression',\n        'metric':'rmse',\n        'num_leaves': 64,\n        #'bagging_freq': 3,\n        #'bagging_fraction': 0.6,\n        'feature_fraction': 1,\n        'max_depth':-1,\n        'random_state':42\n       }\nreg = lgb.LGBMRegressor(**params, n_estimators=1000)\nreg.fit(X_train[Y_train_reg > 0], Y_train_reg[Y_train_reg > 0])\n\npred = np.zeros(len(pred_reg))\nfor i in np.arange(len(pred_reg)):\n    pred[i] = reg.predict([X_test.iloc[i]])[0] * pred_reg[i]","42fd402a":"print('unique browser count:', train['device.browser'].nunique())\nplotCategoryRateBar(all_data, train_rev, 'device.browser', 10)","ffd8768b":"import sys\nimport gc\n\ndel all_data, train, test, train_rev\ngc.collect()\n\nprint(pd.DataFrame([[val for val in dir()], [sys.getsizeof(eval(val)) for val in dir()]],\n                   index=['name','size']).T.sort_values('size', ascending=False).reset_index(drop=True)[:10])","fdafc972":"## trafficSource","a74c4a87":"_='''\ntrain_rev = train_rev.sort_values(['visitStartTime']).reset_index()\ntrain_rev['_buyCount'] = train_rev.groupby('fullVisitorId').cumcount() + 1\nall_data = pd.merge(all_data, train_rev[['_buyCount','fullVisitorId','visitId']], \n                    on=['fullVisitorId','visitId'], how='left')\nfor fvId in train_rev['fullVisitorId'].unique():\n    visitor_data = all_data[all_data['fullVisitorId'] == fvId].sort_values(['visitStartTime'])['_buyCount'].reset_index()\n    all_data.loc[all_data['fullVisitorId'] == fvId, '_buyCount'] = visitor_data['_buyCount'].fillna(method='ffill').values\nall_data['_buyCount'].fillna(0, inplace=True)\nall_data['_buyRate'] = all_data['_buyCount'] \/ all_data['visitNumber']\n'''","fdbe82ac":"## device","e7b9d01d":"# Plot feature importance\nfeature_importance = reg.feature_importances_[:20]\nfeature_importance = 100.0 * (feature_importance \/ feature_importance.max())\nsorted_idx = np.argsort(feature_importance)\npos = np.arange(sorted_idx.shape[0]) + .5\n\nplt.figure(figsize=(12,6))\nplt.barh(pos, feature_importance[sorted_idx], align='center')\nplt.yticks(pos, X_train.columns[sorted_idx])\nplt.xlabel('Relative Importance')\nplt.title('Variable Importance')\nplt.show()","89661129":"## channelGrouping\n* The channel via which the user came to the Store.","05fba987":"print('unique trafficSource.adContent count:', train['trafficSource.adContent'].nunique())\n\nplotCategoryRateBar(all_data, train_rev, 'trafficSource.adContent', 10)\n\nall_data['_adContentGMC'] = (all_data['trafficSource.adContent'] == 'Google Merchandise Collection').astype(np.uint8)","a74a158e":"print('train all sessionId:', len(train['sessionId']))\nprint('train unique sessionId:', train['sessionId'].nunique())","a9bc6895":"def plotCategoryRateBar(a, b, colName, topN=np.nan):\n    if topN == topN: # isNotNan\n        vals = b[colName].value_counts()[:topN]\n        subA = a.loc[a[colName].isin(vals.index.values), colName]\n        df = pd.DataFrame({'All':subA.value_counts() \/ len(a), 'Revenue':vals \/ len(b)})\n    else:\n        df = pd.DataFrame({'All':a[colName].value_counts() \/ len(a), 'Revenue':b[colName].value_counts() \/ len(b)})\n    df.sort_values('Revenue').plot.barh()","0d50fa48":"print('unique geoNetwork.metro count:', train['geoNetwork.metro'].nunique())\nplotCategoryRateBar(all_data, train_rev, 'geoNetwork.metro', 10)","3eecde00":"submission = pd.DataFrame({'fullVisitorId':test_id, 'PredictedLogRevenue':pred})\nsubmission[\"PredictedLogRevenue\"] = submission[\"PredictedLogRevenue\"].apply(lambda x : 0.0 if x < 0 else x)\nsubmission[\"PredictedLogRevenue\"] = submission[\"PredictedLogRevenue\"].fillna(0.0)\nsubmission_sum = submission[['fullVisitorId', 'PredictedLogRevenue']].groupby('fullVisitorId').sum().reset_index()\nsubmission_sum.to_csv(\"submission.csv\", index=False)\nsubmission_sum.head(20)","4de2f15c":"_='''\n'''\nall_data['_meanHitsPerDay'] = all_data.groupby(['_day'])['totals.hits'].transform('mean')\nall_data['_meanHitsPerWeekday'] = all_data.groupby(['_weekday'])['totals.hits'].transform('mean')\nall_data['_meanHitsPerMonth'] = all_data.groupby(['_month'])['totals.hits'].transform('mean')\nall_data['_sumHitsPerDay'] = all_data.groupby(['_day'])['totals.hits'].transform('sum')\nall_data['_sumHitsPerWeekday'] = all_data.groupby(['_weekday'])['totals.hits'].transform('sum')\nall_data['_sumHitsPerMonth'] = all_data.groupby(['_month'])['totals.hits'].transform('sum')\n\nfor feature in ['totals.hits', 'totals.pageviews']:\n    info = all_data.groupby('fullVisitorId')[feature].mean()\n    all_data['_usermean_' + feature] = all_data.fullVisitorId.map(info)\n    \nfor feature in [\"visitNumber\"]:\n    info = all_data.groupby('fullVisitorId')[feature].max()\n    all_data['_usermax_' + feature] = all_data.fullVisitorId.map(info)","f3b5abef":"# ","e04482bc":"print('unique trafficSource.keyword count:', train['trafficSource.keyword'].nunique())\nplotCategoryRateBar(all_data, train_rev, 'trafficSource.keyword', 10)"}}