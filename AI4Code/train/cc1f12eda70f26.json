{"cell_type":{"f826ab9a":"code","5e8b0f58":"code","036128e4":"code","8c2d1924":"code","056f56eb":"code","4195345b":"code","381c1b4f":"code","0dedee58":"code","a3be1785":"code","a8e066c0":"code","3fbdb154":"code","58c91023":"code","2c9c68b9":"code","a0e8b0b4":"code","e698e1a0":"code","37e6d6f9":"code","cb813277":"code","31d2522b":"code","9d7995b5":"code","d2c7ee6f":"code","a332b206":"code","fae578e1":"code","9ee23c27":"code","e9e04314":"code","981c7bda":"code","a7b066d8":"code","0bb23518":"code","5a76045a":"code","f6075a88":"code","cde7a4ef":"markdown","07fdcf98":"markdown","3af1c3d9":"markdown","d81d0854":"markdown","aaae44e0":"markdown","58a757a0":"markdown","c5857e1d":"markdown","5606e012":"markdown","0084ae3b":"markdown","f7b184d9":"markdown","9f9b0f4c":"markdown","8368a16a":"markdown","dd1ef84e":"markdown","e5c4518e":"markdown","b3afe916":"markdown","4df66b4f":"markdown"},"source":{"f826ab9a":"# Usual imports\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm\nimport string\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import NMF, LatentDirichletAllocation, TruncatedSVD\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.manifold import TSNE\nimport concurrent.futures\nimport time\nimport pyLDAvis.sklearn\nfrom pylab import bone, pcolor, colorbar, plot, show, rcParams, savefig\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Plotly based imports for visualization\nfrom plotly import tools\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\n\n# spaCy based imports\nimport spacy\nfrom spacy.lang.en.stop_words import STOP_WORDS\nfrom spacy.lang.en import English\n!python -m spacy download en_core_web_lg","5e8b0f58":"# Loading data\nwines = pd.read_csv('..\/input\/winemag-data_first150k.csv')\nwines.head()","036128e4":"# Creating a spaCy object\nnlp = spacy.load('en_core_web_lg')","8c2d1924":"doc = nlp(wines[\"description\"][3])\nspacy.displacy.render(doc, style='ent',jupyter=True)","056f56eb":"punctuations = string.punctuation\nstopwords = list(STOP_WORDS)","4195345b":"review = str(\" \".join([i.lemma_ for i in doc]))","381c1b4f":"doc = nlp(review)\nspacy.displacy.render(doc, style='ent',jupyter=True)","0dedee58":"# POS tagging\nfor i in nlp(review):\n    print(i,\"=>\",i.pos_)","a3be1785":"# Parser for reviews\nparser = English()\ndef spacy_tokenizer(sentence):\n    mytokens = parser(sentence)\n    mytokens = [ word.lemma_.lower().strip() if word.lemma_ != \"-PRON-\" else word.lower_ for word in mytokens ]\n    mytokens = [ word for word in mytokens if word not in stopwords and word not in punctuations ]\n    mytokens = \" \".join([i for i in mytokens])\n    return mytokens","a8e066c0":"tqdm.pandas()\nwines[\"processed_description\"] = wines[\"description\"].progress_apply(spacy_tokenizer)","3fbdb154":"# Creating a vectorizer\nvectorizer = CountVectorizer(min_df=5, max_df=0.9, stop_words='english', lowercase=True, token_pattern='[a-zA-Z\\-][a-zA-Z\\-]{2,}')\ndata_vectorized = vectorizer.fit_transform(wines[\"processed_description\"])","58c91023":"NUM_TOPICS = 10","2c9c68b9":"# Latent Dirichlet Allocation Model\nlda = LatentDirichletAllocation(n_components=NUM_TOPICS, max_iter=10, learning_method='online',verbose=True)\ndata_lda = lda.fit_transform(data_vectorized)","a0e8b0b4":"# Non-Negative Matrix Factorization Model\nnmf = NMF(n_components=NUM_TOPICS)\ndata_nmf = nmf.fit_transform(data_vectorized) ","e698e1a0":"# Latent Semantic Indexing Model using Truncated SVD\nlsi = TruncatedSVD(n_components=NUM_TOPICS)\ndata_lsi = lsi.fit_transform(data_vectorized)","37e6d6f9":"# Functions for printing keywords for each topic\ndef selected_topics(model, vectorizer, top_n=10):\n    for idx, topic in enumerate(model.components_):\n        print(\"Topic %d:\" % (idx))\n        print([(vectorizer.get_feature_names()[i], topic[i])\n                        for i in topic.argsort()[:-top_n - 1:-1]]) ","cb813277":"# Keywords for topics clustered by Latent Dirichlet Allocation\nprint(\"LDA Model:\")\nselected_topics(lda, vectorizer)","31d2522b":"# Keywords for topics clustered by Latent Semantic Indexing\nprint(\"NMF Model:\")\nselected_topics(nmf, vectorizer)","9d7995b5":"# Keywords for topics clustered by Non-Negative Matrix Factorization\nprint(\"LSI Model:\")\nselected_topics(lsi, vectorizer)","d2c7ee6f":"# Transforming an individual sentence\ntext = spacy_tokenizer(\"Aromas include tropical fruit, broom, brimstone and dried herb. The palate isn't overly expressive, offering unripened apple, citrus and dried sage alongside brisk acidity.\")\nx = lda.transform(vectorizer.transform([text]))[0]\nprint(x)","a332b206":"pyLDAvis.enable_notebook()\ndash = pyLDAvis.sklearn.prepare(lda, data_vectorized, vectorizer, mds='tsne')\ndash","fae578e1":"svd_2d = TruncatedSVD(n_components=2)\ndata_2d = svd_2d.fit_transform(data_vectorized)","9ee23c27":"trace = go.Scattergl(\n    x = data_2d[:,0],\n    y = data_2d[:,1],\n    mode = 'markers',\n    marker = dict(\n        color = '#FFBAD2',\n        line = dict(width = 1)\n    ),\n    text = vectorizer.get_feature_names(),\n    hovertext = vectorizer.get_feature_names(),\n    hoverinfo = 'text' \n)\ndata = [trace]\niplot(data, filename='scatter-mode')","e9e04314":"trace = go.Scattergl(\n    x = data_2d[:,0],\n    y = data_2d[:,1],\n    mode = 'text',\n    marker = dict(\n        color = '#FFBAD2',\n        line = dict(width = 1)\n    ),\n    text = vectorizer.get_feature_names()\n)\ndata = [trace]\niplot(data, filename='text-scatter-mode')","981c7bda":"def spacy_bigram_tokenizer(phrase):\n    doc = parser(phrase) # create spacy object\n    token_not_noun = []\n    notnoun_noun_list = []\n    noun = \"\"\n\n    for item in doc:\n        if item.pos_ != \"NOUN\": # separate nouns and not nouns\n            token_not_noun.append(item.text)\n        if item.pos_ == \"NOUN\":\n            noun = item.text\n        \n        for notnoun in token_not_noun:\n            notnoun_noun_list.append(notnoun + \" \" + noun)\n\n    return \" \".join([i for i in notnoun_noun_list])","a7b066d8":"bivectorizer = CountVectorizer(min_df=5, max_df=0.9, stop_words='english', lowercase=True, ngram_range=(1,2))\nbigram_vectorized = bivectorizer.fit_transform(wines[\"processed_description\"])","0bb23518":"bi_lda = LatentDirichletAllocation(n_components=NUM_TOPICS, max_iter=10, learning_method='online',verbose=True)\ndata_bi_lda = bi_lda.fit_transform(bigram_vectorized)","5a76045a":"print(\"Bi-LDA Model:\")\nselected_topics(bi_lda, bivectorizer)","f6075a88":"bi_dash = pyLDAvis.sklearn.prepare(bi_lda, bigram_vectorized, bivectorizer, mds='tsne')\nbi_dash","cde7a4ef":"# What is topic-modelling?\nIn machine learning and natural language processing, a topic model is a type of statistical model for discovering the abstract \"topics\" that occur in a collection of documents. Topic modeling is a frequently used text-mining tool for discovery of hidden semantic structures in a text body. Intuitively, given that a document is about a particular topic, one would expect particular words to appear in the document more or less frequently: \"dog\" and \"bone\" will appear more often in documents about dogs, \"cat\" and \"meow\" will appear in documents about cats, and \"the\" and \"is\" will appear equally in both. A document typically concerns multiple topics in different proportions; thus, in a document that is 10% about cats and 90% about dogs, there would probably be about 9 times more dog words than cat words. \n\nThe \"topics\" produced by topic modeling techniques are clusters of similar words. A topic model captures this intuition in a mathematical framework, which allows examining a set of documents and discovering, based on the statistics of the words in each, what the topics might be and what each document's balance of topics is. It involves various techniques of dimensionality reduction(mostly non-linear) and unsupervised learning like LDA, SVD, autoencoders etc.\n\nSource: [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Topic_model)","07fdcf98":"**Very few keywords with 2 words have been found like \"spin dry\" , \"black cherry\", etc.**","3af1c3d9":"Let's see what happens when we use a spaCy based bigram tokenizer for topic modelling","d81d0854":"The sentence looks much different now that it is lemmatized.","aaae44e0":"spaCy also comes with a built-in named entity visualizer that lets you check your model's predictions in your browser. You can pass in one or more <code>Doc<\/code> objects and start a web server, export HTML files or view the visualization directly from a Jupyter Notebook.","58a757a0":"# Aim and Motivation \n[Nirant](https:\/\/www.kaggle.com\/nirant)'s latest kernel on spaCy: [Hitchhiker's Guide to NLP in spaCy](https:\/\/www.kaggle.com\/nirant\/hitchhiker-s-guide-to-nlp-in-spacy) has made me realize that spaCy maybe as good or even better than NLTK for Natural Language Processing. My recent kernels deal with deep learning and I want to extend that by using text data for deep learning and intend to use spaCy for processing and modelling this data. ","c5857e1d":"The index in the above list with the largest value represents the most dominant topic for the given review.\n\n\n# Visualizing LDA results with pyLDAvis","5606e012":"### Named Entity Recognition\n Named Entity Recognition is an information extraction task where named entities in unstructured sentences are located and classified  in some pre-defined categories such as the person names, organizations, locations, medical codes, time expressions, quantities, monetary values, percentages, etc.","0084ae3b":"## The text version of scatter plot looks messy but you can zoom it for great results","f7b184d9":"### Parts of Speech tagging\nThis is the process of marking up a word in a text (corpus) as corresponding to a particular part of speech,[1] based on both its definition and its context\u2014i.e., its relationship with adjacent and related words in a phrase, sentence, or paragraph. A simplified form of this is commonly taught to school-age children, in the identification of words as nouns, verbs, adjectives, adverbs, etc.","9f9b0f4c":"## How to interpret this graph?\n1. Topics on the left while their respective keywords are on the right.\n2. Larger topics are more frequent and closer the topics, mor the similarity\n3. Selection of keywords is based on their frequency and discriminancy.\n\n**Hover over the topics on the left to get information about their keywords on the right.**","8368a16a":"# Visualizing LSI(SVD) scatterplot\nWe will be visualizing our data for 2  topics to see similarity between keywords which is measured by distance with the markers using LSI model","dd1ef84e":"Kindly upvote and comment if you like this.","e5c4518e":"## LDA for bigram data","b3afe916":"### Topics for bigram model","4df66b4f":"### Lemmatization\nIt is the  process of grouping together the inflected forms of a word so they can be analysed as a single item, identified by the word's lemma, or dictionary form. Words like \"ran\" and \"running\" are converted to \"run\" to avoid having words with similar meanings in our data."}}