{"cell_type":{"7ce46185":"code","2a66e6cb":"code","582a2dff":"code","afd43eeb":"code","1ad22866":"code","0138255d":"code","5edb93bc":"code","eaadf55f":"code","8005cb35":"code","3a6ea045":"code","c14c15a8":"code","4c89c072":"code","62d0232b":"code","5c21f114":"code","dfdeb9de":"code","93a747d8":"code","e852ea6e":"code","e45bff81":"code","1ba2ce04":"code","5c0c5877":"code","80858e8f":"code","da9fda86":"code","dfa90ef1":"code","0fb779a9":"code","308cc4be":"code","b37b71a8":"code","ff40729c":"code","c1f32be7":"code","bf333bc7":"code","dc875750":"code","07711cf1":"code","7723f14d":"code","bb5ab5fa":"code","bf7d2d6e":"code","83099466":"code","38d7f97c":"markdown","544708a1":"markdown","66c1f767":"markdown","d0fadcd2":"markdown","2ae258d5":"markdown"},"source":{"7ce46185":"import numpy as np\nimport pandas as pd\nfrom pandas import DataFrame, Series\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.datasets import load_iris","2a66e6cb":"iris = load_iris()","582a2dff":"print(iris.DESCR)","afd43eeb":"X = iris.data","1ad22866":"Y = iris.target","0138255d":"name = ['sepal length', 'sepal width', 'petal length', 'petal width']","5edb93bc":"iris_df = DataFrame(X, columns=name)","eaadf55f":"iris_df['species'] = Y","8005cb35":"iris_df.head()","3a6ea045":"sns.pairplot(iris_df, hue='species')","c14c15a8":"from sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier","4c89c072":"X = iris_df.drop(['species'], axis=1)","62d0232b":"Y = iris_df['species']","5c21f114":"clf = KNeighborsClassifier(n_neighbors=5)","dfdeb9de":"X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.4, random_state = 1)","93a747d8":"clf.fit(X_train, Y_train)","e852ea6e":"pre = clf.predict(X_test)","e45bff81":"pre","1ba2ce04":"from sklearn import metrics","5c0c5877":"metrics.accuracy_score(Y_test, pre)","80858e8f":"n = np.arange(1,51)","da9fda86":"lists = []\n\nfor n_neighbor in n:\n    clf = KNeighborsClassifier(n_neighbors=n_neighbor)\n    clf.fit(X_train, Y_train)\n    pre = clf.predict(X_test)\n    a = metrics.accuracy_score(Y_test, pre)\n    lists.append(a)\n    \n    print('\u8a66\u884c:{} \u30b9\u30b3\u30a2:{}'.format(n_neighbor, a))","dfa90ef1":"np.max(lists)","0fb779a9":"from sklearn.svm import SVC","308cc4be":"clf2 = SVC()","b37b71a8":"clf2.fit(X_train, Y_train)\npre2 = clf2.predict(X_test)\nans = metrics.accuracy_score(Y_test, pre2)\nans","ff40729c":"models = ['linear', 'poly', 'rbf', 'sigmoid']\n\nanswer_lists = []\n\nfor i in models:\n    clf3 = SVC(kernel=i)\n    clf3.fit(X_train, Y_train)\n    ans = clf3.predict(X_test)\n    anss = metrics.accuracy_score(Y_test, ans)\n    answer_lists.append(anss)\n    \n    \n    print('kernel_model\uff1a{}\u3000\u4e88\u6e2c\u7cbe\u5ea6\uff1a{}'.format(i, anss))","c1f32be7":"from sklearn.ensemble import BaggingClassifier","bf333bc7":"bagging = BaggingClassifier(KNeighborsClassifier(),\n                            max_samples=0.5, max_features=0.5)\nbagging.fit(X_train, Y_train)\npre4 = bagging.predict(X_test)\nmetrics.accuracy_score(Y_test, pre4)","dc875750":"from sklearn.ensemble import RandomForestClassifier","07711cf1":"clf4 = RandomForestClassifier()\nclf4.fit(X_train, Y_train)\npre5 = clf4.predict(X_test)\nmetrics.accuracy_score(Y_test, pre5)","7723f14d":"from sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.tree import DecisionTreeClassifier","bb5ab5fa":"clf6 = ExtraTreesClassifier(n_estimators=10, max_depth=None,\n                            min_samples_split=2, random_state=5)\nclf7 = DecisionTreeClassifier(random_state=0,max_depth=None, min_samples_split=2)\n\nclf6.fit(X_train, Y_train)\nclf7.fit(X_train, Y_train)\n\npre6 = clf6.predict(X_test)\npre7 = clf7.predict(X_test)","bf7d2d6e":"metrics.accuracy_score(Y_test, pre6)","83099466":"metrics.accuracy_score(Y_test, pre7)","38d7f97c":"kernel\u3092\u8907\u6570\u8a66\u3057\u3066\u307f\u3066\u6700\u9069\u306a\u3082\u306e\u3092\u63a2\u3059\u3002","544708a1":"SVC\u3067\u3082linear\u3001poly\u3001rbf\u3067\u6700\u9ad8\u306f98.33%\n ensemble methods\u3092\u6700\u5f8c\u306b\u8a66\u3057\u3066\u307f\u308b\u3002","66c1f767":"2\u756a\u76ee\u306b\u9ad8\u3044\u7cbe\u5ea696.66%","d0fadcd2":"\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3067\u3082\u540c\u3058\u7d50\u679c","2ae258d5":"KNeighborsClassifier\u3067\u306f98.3%\u306e\u7cbe\u5ea6\u307e\u3067\u4e0a\u3052\u3089\u308c\u305f\u3002\nSVC\u306e\u5206\u985e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3082\u8a66\u3057\u3066\u307f\u308b\u3002"}}