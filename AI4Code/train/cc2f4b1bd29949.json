{"cell_type":{"227aa00d":"code","e8150487":"code","f6f53fdf":"code","e570efb1":"code","fab49e11":"code","3a53e54d":"code","156c1070":"code","83492ebb":"code","370d961a":"code","9e5ab9f8":"code","cf6ed264":"code","c8c576db":"code","8a346948":"code","c328d485":"code","c0a764ad":"code","cd17b10a":"code","3982e49b":"code","25004820":"code","28fcda7d":"code","6ad3a3dd":"code","63b5bd9b":"code","9aa2b4c5":"code","82ae4194":"code","ceb86f69":"code","f01844d0":"code","5bfa8b80":"code","22409e84":"code","4c0a1f2d":"markdown","51a3f5d7":"markdown","52d57e4b":"markdown","90fd1be9":"markdown","5ff45d22":"markdown","9b2fdbd7":"markdown","7f3cefa1":"markdown","42c0dc08":"markdown","4f80f7b0":"markdown","9e87d403":"markdown","c5906106":"markdown","acc65fea":"markdown","f250d54c":"markdown","3c2bc5f8":"markdown","043e6dbf":"markdown","8725e157":"markdown"},"source":{"227aa00d":"# packages\n\n# standard\nimport numpy as np\nimport pandas as pd\nimport random\n\n# plots\nfrom matplotlib import pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D \nimport seaborn as sns\nimport plotly.express as px\n\n# image specific\nfrom PIL import Image\nimport imagehash\n\n# file search\nimport glob","e8150487":"# get pathes of all training files into a list\ntrain_images_path = '..\/input\/shopee-product-matching\/train_images\/'\ntrain_files = glob.glob(train_images_path + '*')\nprint('Number of training images:', len(train_files))","f6f53fdf":"# function for displaying an image via filename (incl. path)\n# in addition we also calculate a hash value\ndef show_image(filename):\n    img = Image.open(filename)\n    # show image\n    plt.imshow(img)\n    plt.show()\n    \n    # calc custom hash value (perceptual hash is already in the data)\n    im_hash_bits = imagehash.dhash(img) # bitstring version\n    \n    # there are quite a few other options, e. g.:\n    # im_hash_bits = imagehash.phash(img) # bitstring version\n    # im_hash_bits = imagehash.colorhash(img) # bitstring version\n\n    im_hash_hex = str(im_hash_bits) # convert bitstring => hex \n    im_hash_dec = int(im_hash_hex,16) # decimal version\n    # return different versions of the hash\n    return im_hash_bits, im_hash_hex, im_hash_dec ","e570efb1":"# demo of function call\nshow_image(train_files[42])","fab49e11":"# now show a few example images\nmy_hash_vals_bit = []\nmy_hash_vals_hex = []\nfor i in range(10):\n    print('Image '+str(i)+':')\n    im_hash_bit,im_hash_hex,_ = show_image(train_files[i]) # use only the hex version of return values\n    my_hash_vals_bit.append(im_hash_bit)\n    my_hash_vals_hex.append(im_hash_hex)","3a53e54d":"# show corresponding custom hash values\nprint(my_hash_vals_hex)","156c1070":"# measure a few distances - based on bit string representation (different bits \/ number of bits)\nprint('Diff 0\/1:', (my_hash_vals_bit[0] - my_hash_vals_bit[1]) \/ 64)\nprint('Diff 3\/4:', (my_hash_vals_bit[3] - my_hash_vals_bit[4]) \/ 64)\nprint('Diff 3\/6:', (my_hash_vals_bit[3] - my_hash_vals_bit[6]) \/ 64)\nprint('Diff 4\/6:', (my_hash_vals_bit[4] - my_hash_vals_bit[6]) \/ 64)\nprint('Diff 7\/8:', (my_hash_vals_bit[7] - my_hash_vals_bit[8]) \/ 64)\nprint('Diff 8\/9:', (my_hash_vals_bit[8] - my_hash_vals_bit[9]) \/ 64)","83492ebb":"# training data table\ndf = pd.read_csv('..\/input\/shopee-product-matching\/train.csv')","370d961a":"df.head()","9e5ab9f8":"# structure of data frame\ndf.info()","cf6ed264":"# frequencies of image filenames\ndf.image.value_counts()","c8c576db":"# frequencies of perceptual hashes\ndf.image_phash.value_counts()","8a346948":"df_multi_hash = df[df.image_phash=='e992966d4ba49761']\ndf_multi_hash.sort_values(by='image')","c328d485":"print('Number of rows :', df_multi_hash.shape[0])\nprint('Unique images  :', df_multi_hash.image.nunique())","c0a764ad":"# let's check those images having same phash\nmy_images = df_multi_hash.image.unique().tolist() # image array w\/o duplicates\nfor i in my_images:\n    print('Image '+ i +':')\n    _ = show_image(train_images_path+i)","cd17b10a":"# label frequencies\ndf.label_group.value_counts()","3982e49b":"df_demo_1 = df[df.label_group==3915137548].sort_values(by='image_phash').reset_index(drop=True)\ndisplay(df_demo_1)\n\nmy_hash_vals_bit = []\nmy_hash_vals_hex = []\n# show images \/ calc hashes\nfor f in df_demo_1.image:\n    current_file = train_images_path + f\n    im_hash_bit,im_hash_hex,_ = show_image(current_file)\n    print('Hash Value:',im_hash_hex)\n    my_hash_vals_bit.append(im_hash_bit)\n    my_hash_vals_hex.append(im_hash_hex)","25004820":"# custom hash values\nmy_hash_vals_hex","28fcda7d":"# measure distances - based on bit string representation (different bits \/ number of bits)\nprint('Diff 0\/1:', (my_hash_vals_bit[0] - my_hash_vals_bit[1]) \/ 64)\nprint('Diff 0\/2:', (my_hash_vals_bit[0] - my_hash_vals_bit[2]) \/ 64)\nprint('Diff 1\/2:', (my_hash_vals_bit[1] - my_hash_vals_bit[2]) \/ 64)","6ad3a3dd":"df_demo_2 = df[df.label_group==3661848281].sort_values(by='image_phash').reset_index(drop=True)\ndisplay(df_demo_2)\n\nmy_hash_vals_bit = []\nmy_hash_vals_hex = []\n# show images \/ calc hashes\nfor f in df_demo_2.image:\n    current_file = train_images_path + f\n    im_hash_bit,im_hash_hex,_ = show_image(current_file)\n    print('Hash Value:',im_hash_hex)\n    my_hash_vals_bit.append(im_hash_bit)\n    my_hash_vals_hex.append(im_hash_hex)","63b5bd9b":"# custom hash values\nmy_hash_vals_hex","9aa2b4c5":"# measure distances - based on bit string representation (different bits \/ number of bits)\nprint('Diff 0\/1:', (my_hash_vals_bit[0] - my_hash_vals_bit[1]) \/ 64)\nprint('Diff 0\/2:', (my_hash_vals_bit[0] - my_hash_vals_bit[2]) \/ 64)\nprint('Diff 1\/2:', (my_hash_vals_bit[1] - my_hash_vals_bit[2]) \/ 64)","82ae4194":"# here is an example with lots of rather different images\ndf_demo_3 = df[df.label_group==645628].sort_values(by='image_phash').reset_index(drop=True)\ndisplay(df_demo_3)\n\nmy_hash_vals_bit = []\nmy_hash_vals_hex = []\n# show images \/ calc hashes\nfor f in df_demo_3.image:\n    current_file = train_images_path + f\n    im_hash_bit,im_hash_hex,_ = show_image(current_file)\n    print('Hash Value:',im_hash_hex)\n    my_hash_vals_bit.append(im_hash_bit)\n    my_hash_vals_hex.append(im_hash_hex)","ceb86f69":"# custom hash values\nmy_hash_vals_hex","f01844d0":"for f in df_demo_1.image:\n    img = Image.open(train_images_path + f)\n\n    # convert image to numeric array (3D)\n    img = np.asarray(img)\n    # extract RGB components\n    img_R = img[:,:,0]\n    img_G = img[:,:,1]\n    img_B = img[:,:,2]\n\n    f, (ax1, ax2, ax3, ax4) = plt.subplots(1, 4, figsize=(16,3))\n    \n    ax1.imshow(img)\n    \n    ax2.hist(img_R.flatten(), bins=16, density=True, color='red')\n    ax2.set_title('Histogram - Red')\n\n    ax3.hist(img_G.flatten(), bins=16, density=True, color='green')\n    ax3.set_title('Histogram - Green')\n\n    ax4.hist(img_B.flatten(), bins=16, density=True, color='blue')\n    ax4.set_title('Hist - Blue')\n    plt.show()","5bfa8b80":"for f in df_demo_2.image:\n    img = Image.open(train_images_path + f)\n\n    # convert image to numeric array (3D)\n    img = np.asarray(img)\n    # extract RGB components\n    img_R = img[:,:,0]\n    img_G = img[:,:,1]\n    img_B = img[:,:,2]\n\n    f, (ax1, ax2, ax3, ax4) = plt.subplots(1, 4, figsize=(16,3))\n    \n    ax1.imshow(img)\n    \n    ax2.hist(img_R.flatten(), bins=16, density=True, color='red')\n    ax2.set_title('Histogram - Red')\n\n    ax3.hist(img_G.flatten(), bins=16, density=True, color='green')\n    ax3.set_title('Histogram - Green')\n\n    ax4.hist(img_B.flatten(), bins=16, density=True, color='blue')\n    ax4.set_title('Hist - Blue')\n    plt.show()","22409e84":"for f in df_demo_3.image:\n    img = Image.open(train_images_path + f)\n\n    # convert image to numeric array (3D)\n    img = np.asarray(img)\n    # extract RGB components\n    img_R = img[:,:,0]\n    img_G = img[:,:,1]\n    img_B = img[:,:,2]\n\n    f, (ax1, ax2, ax3, ax4) = plt.subplots(1, 4, figsize=(16,3))\n    \n    ax1.imshow(img)\n    \n    ax2.hist(img_R.flatten(), bins=16, density=True, color='red')\n    ax2.set_title('Histogram - Red')\n\n    ax3.hist(img_G.flatten(), bins=16, density=True, color='green')\n    ax3.set_title('Histogram - Green')\n\n    ax4.hist(img_B.flatten(), bins=16, density=True, color='blue')\n    ax4.set_title('Hist - Blue')\n    plt.show()","4c0a1f2d":"### Let's have a look at the structured training data","51a3f5d7":"<a id='3'><\/a>\n# Images with same label group - Examples","52d57e4b":"# Table of Contents\n* [Preparations and first glance](#1)\n* [Explore training data table](#2)\n* [Images with same label group - Examples](#3)\n* [Compare color distributions](#4)","90fd1be9":"### Example 3","5ff45d22":"### Example 1","9b2fdbd7":"#### Check one exemplary group with a high frequency of the phash:","7f3cefa1":"### Example 2","42c0dc08":"<a id='4'><\/a>\n# Compare color distributions","4f80f7b0":"#### Hashes can occur multiple times in the table:","9e87d403":"#### We can see the different return values: The bitstring of the hash, the corresponding hexadecimal number and the corresponding decimal representation.","c5906106":"<a id='2'><\/a>\n# Explore training data table","acc65fea":"#### => We have 13 images here having the same hash value (and the same label).","f250d54c":"#### Each label group occurs at least twice.","3c2bc5f8":"#### Label groups:","043e6dbf":"<a id='1'><\/a>\n# Preparations and first glance","8725e157":"#### Images can occur multiple times in the table:"}}