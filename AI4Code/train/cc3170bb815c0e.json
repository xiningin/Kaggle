{"cell_type":{"a7701a1f":"code","91f995a7":"code","caa6f51c":"code","e3907290":"code","cc9fd3c8":"code","56b6f007":"code","d1659423":"code","040f51b4":"code","c3ffecaa":"code","cb66b261":"code","82e6200e":"code","62ca8d3c":"code","c0253b4d":"code","e8e9dc44":"code","669a94cc":"code","ddca17d7":"code","9abae272":"code","5205cde5":"code","87e64703":"code","32f30cfc":"code","f3666d0e":"code","2c167c7a":"code","1e04430f":"code","0a91b81c":"markdown","bc17af48":"markdown","8e278689":"markdown","a97b7403":"markdown","ec5e4036":"markdown","81a499bc":"markdown","a4051efa":"markdown","453d775a":"markdown","f0528999":"markdown","5a667c19":"markdown","86fadbea":"markdown","4d79aa13":"markdown","b2f94595":"markdown"},"source":{"a7701a1f":"import csv\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pylab as pylab\n%matplotlib inline\n\nfrom mpl_toolkits.basemap import Basemap\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport datetime","91f995a7":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","caa6f51c":"tab = pd.read_csv(\"..\/input\/country-pop-data\/country_pop_data.csv\")\ncon = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv\")\n\ncon_US = pd.read_csv(\"..\/input\/latest-us\/latest_US.csv\")\nfont = {'family': 'serif',\n        'color':  'darkred',\n        'weight': 'normal',\n        'size': 16,\n        }","e3907290":"country_df = pd.read_csv(\"..\/input\/country-data\/country_pop_data1.csv\")\nitaly = country_df[country_df[\"Country\/Region\"]==\"Italy\"]\nspain = country_df[country_df[\"Country\/Region\"]==\"Spain\"]\nhubei = country_df[country_df[\"Province\/State\"]==\"Hubei\"]\nchina = country_df[country_df[\"Country\/Region\"]==\"China\"]\nnot_hubei= china[china[\"Province\/State\"]!=\"Hubei\"]\njapan = country_df[country_df[\"Country\/Region\"]==\"Japan\"]\ns_korea = country_df[country_df[\"Country\/Region\"]==\"Korea, South\"]\nsing = country_df[country_df[\"Country\/Region\"]==\"Singapore\"]\niran = country_df[country_df[\"Country\/Region\"]==\"Iran\"]\nus = country_df[country_df[\"Country\/Region\"]==\"US\"]\nuk = country_df[country_df[\"Country\/Region\"]==\"United Kingdom\"]\nger = country_df[country_df[\"Country\/Region\"]==\"Germany\"]\n","cc9fd3c8":"# makes cumulative totals for each country\nchina = con.loc[con['Country\/Region'] == 'China']\naus = con.loc[con['Country\/Region'] == 'Australia']\ncan = con.loc[con['Country\/Region'] == 'Canada']\ntotal_china = 0\ntotal_aus = 0\ntotal_can = 0\nfor c in range(len(china)):\n    last_china = china.iloc[c,-1]\n    total_china = total_china + last_china\nfor b in range(len(aus)):\n    last_aus = aus.iloc[b,-1]\n    total_aus = total_aus + last_aus\nfor d in range(len(can)):\n    last_can = can.iloc[d,-1]\n    total_can = total_can + last_can    ","56b6f007":"#combines cases and country information with a row for each country \ntable=con\ntable[\"Province\/State\"].fillna(\"*\", inplace = True)\ntab_latest = pd.DataFrame(columns=['SNo','Province\/State','Country\/Region','Confirmed','Confirmed per mill population','Date','% of Population'])\ncount = 3\nfor a in range(len(table)):\n    state = table.iloc[a,0]\n    country = table.iloc[a,1]\n  \n    last_conf = table.iloc[a,-1]\n    last_date = table.columns.values[-1] \n    rows1 = tab.loc[tab['Country\/Region'] == country]\n    rows2 = rows1.loc[rows1['Province\/State'] == state]\n    if len(rows2.index.values) >0:\n        count+=1\n        pop = rows2.iloc[0,5]\n        conf_m = last_conf\/pop\n        conf_mill = round(conf_m,2)\n        conf_perc = conf_mill\/10000\n        tab_latest.loc[count] = [count,state,country,last_conf,conf_mill,last_date,conf_perc]\n","d1659423":"#combines cases and country information for Australia China and Canada and adds it to the dataframe above\ntab_extra = pd.DataFrame(columns=['SNo','Province\/State','Country\/Region','Confirmed','Confirmed per mill population','Date','% of Population'])\ncountries = [ \"Australia\", \"Canada\",\"China\"]\ntotals = [total_aus,total_can,total_china ]\ncount = 0\nfor each_country in countries:\n    state = \"*\"    \n    rows1 = tab.loc[tab['Country\/Region'] == each_country]\n    rows2 = rows1.loc[rows1['Province\/State'] == state]   \n    last_conf =totals[count]\n    if len(rows2.index.values) >0:\n        count +=1       \n        pop = rows2.iloc[0,5]\n        conf_m = last_conf\/pop\n        conf_mill = round(conf_m,2)\n        conf_perc = conf_mill\/10000\n        \n        tab_extra.loc[count] = [count,state,each_country,last_conf,conf_mill,last_date,round(conf_perc,2)]\nframes = [tab_latest,tab_extra]\ntab_comb = pd.concat(frames)","040f51b4":"tab1 = tab_comb.loc[tab_comb[\"Confirmed\"]>5000]\ntab2 = tab1.sort_values(by ='Confirmed',ascending=False )\ntab3 = tab2.loc[tab2['Province\/State'] == '*']","c3ffecaa":"date1 = str(last_date)\nfig = plt.figure(figsize=(15,7))\nplt.ylabel('Cases')\nplt.xlabel('Countries with > 5000 cases')\nplt.title('Reported Cases per Country (as of '+date1+')',fontdict=font)\n \nplt.bar(tab3['Country\/Region'],tab3['Confirmed'] )\nfig.autofmt_xdate(rotation=75)\nplt.legend()\nprint(\"Reported Cases >5000 per Country\")","cb66b261":"fig = plt.figure(figsize=(15,7))\nplt.ylabel('Cases (per million)')\nplt.xlabel('Countries with > 1000 cases')\nplt.title('Reported Cases per million of Population (as of '+date1+')',fontdict=font)\n \nplt.bar(tab3['Country\/Region'],tab3['Confirmed per mill population'] )\nfig.autofmt_xdate(rotation=75)\nplt.legend()\nprint(\"Reported Cases per million of Population\")","82e6200e":"con_US2 = con_US.loc[con_US[\"Confirmed\"]>1000]\ncon_US2_NY = con_US2.loc[con_US2[\"Province\/State\"]==\"New York\"]\ncon_US2_Cal = con_US2.loc[con_US2[\"Province\/State\"]==\"California\"]\ncon_US2_Mich = con_US2.loc[con_US2[\"Province\/State\"]==\"Michigan\"]\ncon_US2_NJ = con_US2.loc[con_US2[\"Province\/State\"]==\"New Jersey\"]\ncon_US2_ill = con_US2.loc[con_US2[\"Province\/State\"]==\"Illinois\"]\ncon_US2_flo = con_US2.loc[con_US2[\"Province\/State\"]==\"Florida\"]\ncon_US2_lou = con_US2.loc[con_US2[\"Province\/State\"]==\"Louisiana\"]\ncon_US2_pen = con_US2.loc[con_US2[\"Province\/State\"]==\"Pennsylvania\"]\ncon_US2_con = con_US2.loc[con_US2[\"Province\/State\"]==\"Connecticut\"]\ncon_US2_was = con_US2.loc[con_US2[\"Province\/State\"]==\"Washington\"]\ncon_US2_mas = con_US2.loc[con_US2[\"Province\/State\"]==\"Massachusetts\"]\ncon_US2_tex = con_US2.loc[con_US2[\"Province\/State\"]==\"Texas\"]\ncon_US2_ind = con_US2.loc[con_US2[\"Province\/State\"]==\"Indiana\"]\ncon_US2_nev = con_US2.loc[con_US2[\"Province\/State\"]==\"Nevada\"]\ncon_US2_ari = con_US2.loc[con_US2[\"Province\/State\"]==\"Arizona\"]\ncon_US2_wasDC = con_US2.loc[con_US2[\"Province\/State\"]==\"District of Columbia\"]\ncon_US2_mar = con_US2.loc[con_US2[\"Province\/State\"]==\"Maryland\"]\ncon_US2_geo = con_US2.loc[con_US2[\"Province\/State\"]==\"Georgia\"]\ncon_US2_mis = con_US2.loc[con_US2[\"Province\/State\"]==\"Missouri\"]\ncon_US2_wis = con_US2.loc[con_US2[\"Province\/State\"]==\"Wisconsin\"]\n#added 18\/4\ncon_US2_utah = con_US2.loc[con_US2[\"Province\/State\"]==\"Utah\"]\ncon_US2_vir = con_US2.loc[con_US2[\"Province\/State\"]==\"Virginia\"]\ncon_US2_col = con_US2.loc[con_US2[\"Province\/State\"]==\"Colorado\"]\ncon_US2_ohio = con_US2.loc[con_US2[\"Province\/State\"]==\"Ohio\"]\ncon_US2_sda = con_US2.loc[con_US2[\"Province\/State\"]==\"South Dakota\"]\ncon_US2_del = con_US2.loc[con_US2[\"Province\/State\"]==\"Delaware\"]\ncon_US2_rho = con_US2.loc[con_US2[\"Province\/State\"]==\"Rhode Island\"]\ncon_US2_nca = con_US2.loc[con_US2[\"Province\/State\"]==\"North Carolina\"]\ncon_US2_ken = con_US2.loc[con_US2[\"Province\/State\"]==\"Kentucky\"]\n#con_US2.tail(9)","62ca8d3c":"date_US = con_US.iloc[0,8]\nmy_colors = 'rgbkymc' \nfigNY = plt.figure(figsize=(15,7))\nplt.barh(con_US2_NY['Admin Area'],con_US2_NY['Confirmed'],color=my_colors)\nplt.title(\"New York State\")\n#fig.suptitle('US Areas with reported cases > 1000 (as of '+date_US+')',fontdict=font)\nprint('Areas with more than 1000 cases (as of '+date_US+')')","c0253b4d":"#date_US = con_US.iloc[0,7]\nmy_colors = 'rgbkymc' \n#fig = plt.figure(figsize=(15,7))\n#fig, axs = plt.subplots(1, 5, figsize=(25, 5))\n#fig,((ax1,ax2),(ax3,ax4))= plt.subplots(2,2,figsize=(9,9))\nfig, ax = plt.subplots(nrows=14, ncols=2,figsize=(25,45))\n\nax[9,0].barh(con_US2_wis['Admin Area'],con_US2_wis['Confirmed'],color='tab:orange' )\nax[9,0].set_title(\"Wisconsin\")\nax[9,1].barh(con_US2_utah['Admin Area'],con_US2_utah['Confirmed'],color='tab:cyan' )\nax[9,1].set_title(\"Utah\")\n\nax[10,0].barh(con_US2_vir['Admin Area'],con_US2_vir['Confirmed'],color=my_colors )\nax[10,0].set_title(\"Virginia\")\nax[10,1].barh(con_US2_col['Admin Area'],con_US2_col['Confirmed'],color=my_colors )\nax[10,1].set_title(\"Colorado\")\n\nax[11,0].barh(con_US2_ohio['Admin Area'],con_US2_ohio['Confirmed'],color=my_colors )\nax[11,0].set_title(\"Ohio\")\nax[11,1].barh(con_US2_sda['Admin Area'],con_US2_sda['Confirmed'],color='tab:orange' )\nax[11,1].set_title(\"South Dakota\")\n\nax[12,0].barh(con_US2_del['Admin Area'],con_US2_del['Confirmed'],color=my_colors )\nax[12,0].set_title(\"Delaware\")\nax[12,1].barh(con_US2_rho['Admin Area'],con_US2_rho['Confirmed'],color=my_colors )\nax[12,1].set_title(\"Rhode Island\")\n\nax[13,0].barh(con_US2_nca['Admin Area'],con_US2_nca['Confirmed'],color='tab:cyan' )\nax[13,0].set_title(\"North Carolina\")\nax[13,1].barh(con_US2_ken['Admin Area'],con_US2_ken['Confirmed'],color='tab:pink' )\nax[13,1].set_title(\"Kentucky\")\n\n\n#before 18\/4\nax[0,0].barh(con_US2_Cal['Admin Area'],con_US2_Cal['Confirmed'], color=my_colors)\nax[0,0].set_title(\"California\")\n\n#ax[0,1].barh(con_US2_NY['Admin Area'],con_US2_NY['Confirmed'],color=my_colors)\n#ax[0,1].set_title(\"New York\")\n\nax[0,1].barh(con_US2_mas['Admin Area'],con_US2_mas['Confirmed'],color=my_colors )\nax[0,1].set_title(\"Massachusetts\")\n\nax[3,1].barh(con_US2_Mich['Admin Area'],con_US2_Mich['Confirmed'],color=my_colors )\nax[3,1].set_title(\"Michigan\")\nax[2,0].barh(con_US2_ill['Admin Area'],con_US2_ill['Confirmed'],color=my_colors )\nax[2,0].set_title(\"Illinois\")\nax[1,1].barh(con_US2_NJ['Admin Area'],con_US2_NJ['Confirmed'],color=my_colors )\nax[1,1].set_title(\"New Jersey\")\nax[2,1].barh(con_US2_flo['Admin Area'],con_US2_flo['Confirmed'],color=my_colors )\nax[2,1].set_title(\"Florida\")\nax[3,0].barh(con_US2_lou['Admin Area'],con_US2_lou['Confirmed'],color=my_colors )\nax[3,0].set_title(\"Louisiana\")\nax[1,0].barh(con_US2_pen['Admin Area'],con_US2_pen['Confirmed'],color=my_colors )\nax[1,0].set_title(\"Pennsylvania\")\n\nax[4,0].barh(con_US2_con['Admin Area'],con_US2_con['Confirmed'],color=my_colors )\nax[4,0].set_title(\"Connecticut\")\nax[4,1].barh(con_US2_was['Admin Area'],con_US2_was['Confirmed'],color=my_colors )\nax[4,1].set_title(\"Washington State\")\n\n#ax[5,0].barh(con_US2_mas['Admin Area'],con_US2_mas['Confirmed'],color=my_colors )\n#ax[5,0].set_title(\"Massachusetts\")\nax[8,0].barh(con_US2_mis['Admin Area'],con_US2_mis['Confirmed'],color=my_colors )\nax[8,0].set_title(\"Missouri\")\nax[5,1].barh(con_US2_tex['Admin Area'],con_US2_tex['Confirmed'],color=my_colors )\nax[5,1].set_title(\"Texas\")\n\nax[6,0].barh(con_US2_ind['Admin Area'],con_US2_ind['Confirmed'],color=my_colors )\nax[6,0].set_title(\"Indiana\")\nax[6,1].barh(con_US2_nev['Admin Area'],con_US2_nev['Confirmed'],color='tab:pink' )\nax[6,1].set_title(\"Nevada\")\n\nax[7,0].barh(con_US2_ari['Admin Area'],con_US2_ari['Confirmed'],color=my_colors )\nax[7,0].set_title(\"Arizona\")\nax[7,1].barh(con_US2_wasDC['Admin Area'],con_US2_wasDC['Confirmed'],color='tab:blue' )\nax[7,1].set_title(\"Washington D.C.\")\n\nax[5,0].barh(con_US2_mar['Admin Area'],con_US2_mar['Confirmed'],color=my_colors )\nax[5,0].set_title(\"Maryland\")\nax[8,1].barh(con_US2_geo['Admin Area'],con_US2_geo['Confirmed'],color=my_colors )\nax[8,1].set_title(\"Georgia\")\n\n#ax[9,0].barh(con_US2_wis['Admin Area'],con_US2_wis['Confirmed'],color='tab:green' )\n#ax[9,0].set_title(\"Wisconsin\")\n#ax[9,1].barh(con_US2_geo['Admin Area'],con_US2_geo['Confirmed'],color=my_colors )\n#ax[9,1].set_title(\"Georgia\")\n\nplt.ylabel('Cases')\n\nfig.suptitle('US Areas with reported cases > 1000 (as of '+date_US+')',fontdict=font)\nfig.tight_layout(pad=6.0)\n\n\n#axs[0].plt.bar(con_US2['Admin Area'],con_US2['Confirmed'] )\n#fig.autofmt_xdate(rotation=75)\nplt.legend()\nprint(\"Other US States\")","e8e9dc44":"#calulates days until get > 50% population have COVID-19 for counties with >500 cases as at 26 March 2020\nfifty = pd.DataFrame(columns=['Province\/State','Country\/Region','No. of Cases by','Date'])\ntable = tab.loc[tab[\"Confirmed\"]>10]\n#table = tab\nfifty_rows = pd.DataFrame(columns=['SNo','Province\/State','Country\/Region','% Population','Days from 26Mar2020'])\ncount=0\ncount2=0\nfor a in range(len(table)):\n   \n    state = table.iloc[a,1]\n    country = table.iloc[a,2]\n    y=table.iloc[a,6]\n    original = y\n    d=table.iloc[a,14]\n    p=table.iloc[a,5]\n    count+=1\n    for x in range(30):\n        x+=1\n        count2+=1\n        cases = 2 * y        \n        days_no = d * x\n        pop = p *1000000\n        y_perc = cases\/pop*100\n        fifty_rows.loc[count2] = [count2,state,country ,y_perc,days_no]\n        if y_perc > 50:\n            break\n        y= cases\n    start_date = datetime.date(2020, 3, 26)\n    #no_days = date.timedelta(days_no)\n    no_days = int(days_no)\n    new_date = start_date + datetime.timedelta(no_days)  \n    fifty.loc[count] = [state,country,int(cases),new_date]","669a94cc":"from tabulate import tabulate\n\nprint(\"PREDICTED DATES FOR WHEN CONFIRMED CASES WILL PASS 50% OF THE POPULATION\")\nheaders = ['Province\/State','Country\/Region','No. of Cases by','Date']\nprint(tabulate(fifty, headers=headers, showindex=\"never\"))","ddca17d7":"aus = fifty_rows.loc[fifty_rows[\"Country\/Region\"]==\"Australia\"]\naus_all = aus.loc[aus[\"Province\/State\"]==\"*\"]\nchina = fifty_rows.loc[fifty_rows[\"Country\/Region\"]==\"China\"]\nchina_all = china.loc[china[\"Province\/State\"]==\"*\"]\nitaly = fifty_rows.loc[fifty_rows[\"Country\/Region\"]==\"Italy\"]\nspain = fifty_rows.loc[fifty_rows[\"Country\/Region\"]==\"Spain\"]\n#france = fifty_rows.loc[fifty_rows[\"Country\/Region\"]==\"France\"]\nKorea_South = fifty_rows.loc[fifty_rows[\"Country\/Region\"]==\"Korea, South\"]\nUS_only= fifty_rows.loc[fifty_rows[\"Country\/Region\"]==\"US\"]\nUS_all = US_only.loc[US_only[\"Province\/State\"]==\"*\"]\nsingapore = fifty_rows.loc[fifty_rows[\"Country\/Region\"]==\"Singapore\"]\n","9abae272":"fig = plt.figure(figsize=(25,7))\nplt.xlabel('Days after 26 March 2020')\nplt.ylabel('Cases (% Population)')\nplt.title(\"Predicted Exponential Growth in Confirmed Cases after 26 March 2020\",fontdict=font)\nplt.plot(aus_all['Days from 26Mar2020'],aus_all['% Population'],'tab:green',label=\"Australia\")\nplt.plot(china_all['Days from 26Mar2020'],china_all['% Population'],'tab:blue',label=\"China\")\n\nplt.plot(italy['Days from 26Mar2020'],italy['% Population'],'tab:red',label=\"Italy\")\n#plt.plot(france['Days from 26Mar2020'],france['% Population'],'tab:pink',label=\"France\")\n\nplt.plot(spain['Days from 26Mar2020'],spain['% Population'],'tab:purple',label=\"Spain\")\nplt.plot(US_all['Days from 26Mar2020'],US_all['% Population'],'tab:orange',label=\"US\")\nplt.plot(singapore['Days from 26Mar2020'],singapore['% Population'],'tab:cyan',label=\"Singapore\")\nplt.plot(Korea_South['Days from 26Mar2020'],Korea_South['% Population'],'tab:pink',label=\"South Korea\")\nplt.legend()\n#plt.xlim((0,400))\n#plt.ylim((0,100))\n\n#fig.autofmt_xdate(rotation=75)\nprint(\"Italy, Spain, US, Singapore, South Korea, Australia and China\")","5205cde5":"country_df = pd.read_csv(\"..\/input\/country-data\/country_pop_data1.csv\")\nitaly = country_df[country_df[\"Country\/Region\"]==\"Italy\"]\nspain = country_df[country_df[\"Country\/Region\"]==\"Spain\"]\nhubei = country_df[country_df[\"Province\/State\"]==\"Hubei\"]\nchina = country_df[country_df[\"Country\/Region\"]==\"China\"]\nnot_hubei= china[china[\"Province\/State\"]!=\"Hubei\"]\njapan = country_df[country_df[\"Country\/Region\"]==\"Japan\"]\ns_korea = country_df[country_df[\"Country\/Region\"]==\"Korea, South\"]\nsing = country_df[country_df[\"Country\/Region\"]==\"Singapore\"]\niran = country_df[country_df[\"Country\/Region\"]==\"Iran\"]\nus = country_df[country_df[\"Country\/Region\"]==\"US\"]\nuk = country_df[country_df[\"Country\/Region\"]==\"United Kingdom\"]\nger = country_df[country_df[\"Country\/Region\"]==\"Germany\"]","87e64703":"name = hubei\nfig = plt.figure(figsize=(20,7))\nplt.ylabel('Case Numbers')\nplt.xlabel('Date')\nplt.scatter(name[\"date\"],name[\"Confirmed\"],s=100,marker =8, c='tab:orange',label = 'Confirmed cases')\nplt.scatter(name[\"date\"],name[\"Active cases\"],s=100,marker =8, c='tab:blue',label = 'Active cases')\nplt.scatter(name[\"date\"],name[\"New confirmed cases\"],s=100,marker =8, c='tab:red',label = 'New cases(daily)')\nplt.title(\"Case numbers for Hubei\",fontdict=font)\nfig.autofmt_xdate(rotation=75)\nplt.legend()\nprint(\"Hubei, China\")","32f30cfc":"name = s_korea\nfig = plt.figure(figsize=(20,7))\nplt.ylabel('Case Numbers')\nplt.xlabel('Date')\nplt.scatter(name[\"date\"],name[\"Confirmed\"],s=100,marker =8, c='tab:orange',label = 'Confirmed cases')\nplt.scatter(name[\"date\"],name[\"Active cases\"],s=100,marker =8, c='tab:blue',label = 'Active cases')\nplt.scatter(name[\"date\"],name[\"New confirmed cases\"],s=100,marker =8, c='tab:red',label = 'New cases(daily)')\nplt.title(\"Case numbers for South Korea\",fontdict=font)\nfig.autofmt_xdate(rotation=75)\nplt.legend()\nplt.xlim((20,120))\nprint(\" South Korea\")","f3666d0e":"name = italy\nfig = plt.figure(figsize=(20,7))\nplt.ylabel('Case Numbers')\nplt.xlabel('Date')\nplt.scatter(name[\"date\"],name[\"Confirmed\"],s=100,marker =8, c='tab:orange',label = 'Confirmed cases')\nplt.scatter(name[\"date\"],name[\"Active cases\"],s=100,marker =8, c='tab:blue',label = 'Active cases')\nplt.scatter(name[\"date\"],name[\"New confirmed cases\"],s=100,marker =8, c='tab:red',label = 'New cases (daily)')\nplt.title(\"Case numbers for Italy\",fontdict=font)\nfig.autofmt_xdate(rotation=75)\nplt.legend()\nplt.xlim((30,120))\nprint(\"Italy\")","2c167c7a":"fig = plt.figure(figsize=(20,7))\nplt.ylabel('New Cases Reported Daily')\nplt.xlabel('Date')\nplt.scatter(hubei[\"date\"],hubei[\"New confirmed cases\"],s=100,marker =8, c='tab:orange',label = 'Hubei')\nplt.scatter(s_korea[\"date\"],s_korea[\"New confirmed cases\"],s=100,marker =8, c='tab:blue',label = 'South Korea')\nplt.title(\"Changes in New Cases reported daily for South Korea and Hubei\",fontdict=font)\nfig.autofmt_xdate(rotation=75)\nplt.legend()\nplt.ylim((-500,7000))\nprint(\"South Korea and Hubei China\")","1e04430f":"\nfig = plt.figure(figsize=(20,7))\nplt.ylabel('New Cases Reported Daily')\nplt.xlabel('Date')\nplt.scatter(italy[\"date\"],italy[\"New confirmed cases\"],s=100,marker =8, c='tab:red',label = 'Italy')\nplt.scatter(us[\"date\"],us[\"New confirmed cases\"],s=100,marker =8, c='tab:green',label = 'US')\nplt.scatter(ger[\"date\"],ger[\"New confirmed cases\"],s=100,marker =8, c='tab:orange',label = 'Germany')\nplt.scatter(spain[\"date\"],spain[\"New confirmed cases\"],s=100,marker =8, c='tab:blue',label = 'Spain')\nplt.title(\"Changes in New Cases reported daily for Italy, Germany, Spain and the US\",fontdict=font)\nfig.autofmt_xdate(rotation=75)\nplt.legend()\nplt.xlim((30,120))\nprint(\"Italy, Germany, US, Singapore, Spain\")","0a91b81c":"**ASSUMPTIONS:**\n* That the confirmed case values reported to WHO reflect the level of COVID-19 within each community. It is highly likely that unsymptomatic cases are not being included within the numbers. In addition many countries have stopped testing mild cases and are only reporting cases that present to hospital.\n","bc17af48":"**DATA CLEANING**\n* Removed duplicate rows in COVID_19_data.csv\n* Cleaned up some Country\/Region and Province\/State values","8e278689":"# FLATTEN THE CURVE#\nMany countries have put in restrictions to flatten the curve and so reduce the impact on health infrastructure and the hospital systems. As of 26 March 2020 the restrictions have demonstrated a reduced growth in cases for both South Korea and Hubei.  Other countries such as Iran, Spain, Italy and the US continue to have rising new cases up until 26 March 2020.","a97b7403":"# UNITED STATES","ec5e4036":"**Exponential Growth**\nThe normal lifespan of a pandemic moves from early localized spreading, to amplification to the final stage - reduced transmission. At this stage the worst of the pandemic will be over. Currently we are in the amplification stage with the concern being the exponential spread of the virus and an increasing number of confirmed cases. COVID-19 if left unchecked will reach 50% or more of the population within the next few months for many countries (see the table below). This is especially concerning for small countries and countries with poor resources given the reports from Italy and Wuhan of overwhelmed hospital systems.\n\nOnce the coronavirus (SARS COV-2) has infected enough people 'herd immunity' will have occurred. It is not exactly certain at what percentage of a population that this will occur as it depends on the Rt value. This was estimated to be 2.35 (i.e. each person infects more than 2 people) in Wuhan prior to the implementation of restrictions. It would be expected that the spread of virus will then start to slow. ","81a499bc":"The graph below shows that China with a larger population and having slowed the growth of the virus by a variety of measures, to the current doubling rate (doubling every 46 days) will not reach the 50% mark until 2022. South Korea (doubling every 24 days) has also slowed the rate of COVID-19 spread. The steep curves for Italy, Spain, Australia and the United States demonstrate that if the spread continues unchecked over 50% of the population will be infected by COVID-19 in the next few months. ","a4051efa":"**US AREAS WITH MORE THAN 1000 CASES**","453d775a":"# Comparing Country Case Numbers\nThe esculating case numbers per country give one view of the pandemic spread. However to compare the impact between countries a confirmed case number per million people is also helpful.","f0528999":"New York state has the most cases with the New York area being the most affected.","5a667c19":"**REFERENCES**\n\n> * https:\/\/www.who.int\/emergencies\/diseases\/managing-epidemics-interactive.pdf\n* https:\/\/www.technologyreview.com\/s\/615375\/what-is-herd-immunity-and-can-it-stop-the-coronavirus\/\n* https:\/\/www.thelancet.com\/journals\/laninf\/article\/PIIS1473-3099(20)30144-4\/fulltext#seccestitle10","86fadbea":"# Spread of COVID-19","4d79aa13":"The table below (based upon data up to 26 March 2020) shows an estimated date for when the COVID-19 confirmed cases will pass the 50% mark for Provinces\/States and Countries\/Regions supplied with the novel-corona-virus-2019-dataset.","b2f94595":"# ANALYSIS OF COVID-19 BASED ON POPULATION\nThis notebook analyses the data provided by the Novel Corona virus 2019 dataset. It aims to predict how the pandemic will end by estimating when 50% of the population of the given areas will have been infected by COVID-19.\n"}}