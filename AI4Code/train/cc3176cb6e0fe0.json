{"cell_type":{"de2dcc5d":"code","60b32d0d":"code","6da282d0":"code","74fc0a13":"code","70be50b5":"code","11c68a0c":"code","d49ae2c3":"code","7d045816":"code","456af8ac":"code","ad6b3d0d":"code","21e211b5":"code","3c252229":"code","9b34cf5d":"code","85f71d2c":"code","f76a9d38":"code","20925120":"code","822670d5":"code","7e97e36c":"code","587002a9":"code","bdcca8c4":"code","be453b88":"code","6c4714c4":"code","b6ea2541":"code","754c597b":"code","46deb91c":"code","35de5f2d":"code","b9192f82":"code","41db5aa3":"code","333da58c":"code","61b2d5ad":"code","0ddd01af":"code","22f7e51e":"code","22890535":"code","ccb32de7":"code","95bbb45a":"code","b2c494b6":"code","48411ea9":"code","721ea19b":"code","f839bb11":"code","f0462ca2":"code","4d94f157":"code","68497a92":"code","418e36cc":"code","ddb3b319":"code","37183f2c":"code","f91c1eef":"code","9b7d3baf":"code","4111e7a1":"code","9a428ebd":"code","0d823985":"code","b9074172":"code","b7a152a5":"code","333f8c6d":"code","bf872671":"code","18a361b5":"code","f3da4873":"code","e7099607":"markdown"},"source":{"de2dcc5d":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nimport matplotlib.pyplot as plt\n\nwarnings.filterwarnings('ignore')\n%matplotlib inline","60b32d0d":"train_csv = pd.read_csv('..\/input\/train.csv')","6da282d0":"final_csv = pd.read_csv('..\/input\/test.csv')","74fc0a13":"train_csv.columns","70be50b5":"def show_null_count(csv):\n    idx = csv.isnull().sum()\n    idx = idx[idx>0]\n    idx.sort_values(inplace=True)\n    idx.plot.bar()","11c68a0c":"def get_corr(col, csv):\n    corr = csv.corr()[col]\n    idx_gt0 = corr[corr>0].sort_values(ascending=False).index.tolist()\n    return corr[idx_gt0]\n","d49ae2c3":"show_null_count(train_csv)","7d045816":"show_null_count(final_csv)","456af8ac":"sns.heatmap(train_csv.corr(), vmax=.8, square=True)","ad6b3d0d":"print(get_corr('Survived', train_csv))","21e211b5":"import re\n# Define function to extract titles from passenger names\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+)\\.', name)\n    # If the title exists, extract and return it.\n    if title_search:\n        return title_search.group(1)\n    return \"\"","3c252229":"import re\ndef get_simplified_title(csv):\n    def get_title(name):\n        title_search = re.search(' ([A-Za-z]+)\\.', name)\n        if title_search:\n            return title_search.group(1)\n        return \"\"\n    title = csv['Name'].apply(get_title)\n    sim_title = title.replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n    sim_title = sim_title.replace('Mlle', 'Miss')\n    sim_title = sim_title.replace('Ms', 'Miss')\n    sim_title = sim_title.replace('Mme', 'Mrs')\n    return sim_title","9b34cf5d":"train_csv['FamilyCount'] = train_csv['SibSp'] + train_csv['Parch'] + 1","85f71d2c":"train_csv['SimplifiedTitle'] = get_simplified_title(train_csv)","f76a9d38":"train_csv['SimplifiedTitle'].unique()","20925120":"train_csv['Age'].fillna(train_csv['Age'].median(), inplace=True)\ntrain_csv['AgeBin'] = pd.cut(train_csv['Age'], bins=[0,12,20,40,120], labels=['Children','Teenage','Adult','Elder'])","822670d5":"train_csv['Embarked'].fillna(train_csv['Embarked'].mode()[0], inplace = True)","7e97e36c":"train_csv['Fare'].fillna(train_csv['Fare'].median(), inplace = True)","587002a9":"train_csv['FareBin'] = pd.cut(train_csv['Fare'], bins=[-1, \n                                                  train_csv['Fare'].quantile(.25),\n                                                  train_csv['Fare'].quantile(.5), \n                                                  train_csv['Fare'].quantile(.75),\n                                                  train_csv['Fare'].max()],\n                                                labels=['LowFare', \n                                                        'MediumFare',\n                                                        'HighFare', \n                                                        'TopFare'])","bdcca8c4":"train_csv.columns","be453b88":"train_df = train_csv.copy()\ntrain_df.drop(['PassengerId', 'Name', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'FamilyCount'], axis=1, inplace=True)","6c4714c4":"train_df.head(n=5)","b6ea2541":"train_df = pd.get_dummies(train_df, columns = [\"Pclass\", \"Sex\",\"Embarked\",\"SimplifiedTitle\",\"AgeBin\",\"FareBin\"],\n                            prefix=[\"PC\", \"Sex\",\"Em\",\"ST\",\"Age\",\"Fare\"])","754c597b":"train_df.head(n=5)","46deb91c":"sns.heatmap(train_df.corr(),annot=True,cmap='RdYlGn',linewidths=0.2)\nfig=plt.gcf()\nfig.set_size_inches(20,12)\nplt.show()","35de5f2d":"def throttling(arr, thres):\n    #res = arr.copy()\n    res = np.zeros(len(arr))\n    res[arr >= thres] = int(1)\n    res[arr < thres] = int(0)\n    return res","b9192f82":"from sklearn.model_selection import train_test_split","41db5aa3":"x_train,x_test,y_train,y_test = train_test_split(train_df.drop('Survived', axis=1),\n                                                 train_df['Survived'],\n                                                 test_size=0.2,\n                                                 random_state=123)","333da58c":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score","61b2d5ad":"lr = LogisticRegression()\nlr.fit(x_train,y_train)\ny_pred_lr = lr.predict(x_test)","0ddd01af":"print('The accuracy of the Logistic Regression is',round(accuracy_score(y_pred_lr,y_test)*100,2))","22f7e51e":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation\nfrom keras.optimizers import SGD","22890535":"def baselineNN(dims):\n    model = Sequential()\n    model.add(Dense(10, input_dim=dims, activation='relu'))\n    model.add(Dropout(0.5))\n    model.add(Dense(1, activation='sigmoid'))\n    sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)\n    #model.compile(loss='binary_crossentropy', optimizer=sgd, metrics=['accuracy'])\n    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n    return model","ccb32de7":"def use_keras_nn_model(x, y, xx, yy, epochs):\n    model = baselineNN(x.shape[1])\n    model.fit(x.as_matrix(), y.as_matrix(), epochs=epochs)\n    y_pred = model.predict(xx.as_matrix()).reshape(xx.shape[0],)\n    return y_pred, model","95bbb45a":"y_pred_nn, model_nn = use_keras_nn_model(x_train, y_train, x_test, y_test, 100)","b2c494b6":"#print('The accuracy of the Neural Network is',round(accuracy_score(y_pred_nn_thres,y_test)*100,2))\nprint('The accuracy of the Neural Network is',round(accuracy_score(throttling(y_pred_nn, 0.6), y_test)*100,2))","48411ea9":"import xgboost as xgb\nfrom xgboost import plot_importance","721ea19b":"params = {\n    'objective': 'binary:logistic',\n    'gamma': 0.1,\n    'max_depth': 5,\n    'lambda': 3,\n    'subsample': 0.7,\n    'colsample_bytree': 0.7,\n    'min_child_weight': 3,\n    'silent': 1,\n    'eta': 0.1,\n    'seed': 1000,\n    'nthread': 4,\n}\n\nnum_round = 10","f839bb11":"dtrain = xgb.DMatrix(x_train, label=y_train)\ndtest = xgb.DMatrix(x_test, label=y_test)\nwatchlist = [(dtrain, 'train'), (dtest, 'test')]\nbst = xgb.train(params, dtrain, num_round, watchlist)\ny_pred_xgb = bst.predict(dtest)","f0462ca2":"print('The accuracy of the Neural Network is',round(accuracy_score(throttling(y_pred_xgb, 0.6),y_test)*100,2))","4d94f157":"plot_importance(bst)\n","68497a92":"final_csv.columns","418e36cc":"final_csv['Fare'].fillna(final_csv['Fare'].median(), inplace = True)","ddb3b319":"final_csv['Age'].fillna(final_csv['Age'].median(), inplace=True)","37183f2c":"final_csv['AgeBin'] = pd.cut(final_csv['Age'], bins=[0,12,20,40,120], labels=['Children','Teenage','Adult','Elder'])","f91c1eef":"final_csv['FamilyCount'] = final_csv['SibSp'] + final_csv['Parch'] + 1","9b7d3baf":"final_csv['SimplifiedTitle'] = get_simplified_title(final_csv)","4111e7a1":"final_csv['FareBin'] = pd.cut(final_csv['Fare'], bins=[-1, \n                                                  final_csv['Fare'].quantile(.25),\n                                                  final_csv['Fare'].quantile(.5), \n                                                  final_csv['Fare'].quantile(.75),\n                                                  final_csv['Fare'].max()],\n                                                labels=['LowFare', \n                                                        'MediumFare',\n                                                        'HighFare', \n                                                        'TopFare'])","9a428ebd":"final_df = final_csv.copy()\nfinal_df.drop(['PassengerId', 'Name', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'FamilyCount'], axis=1, inplace=True)","0d823985":"final_df.head(n=5)","b9074172":"final_df = pd.get_dummies(final_df, columns = [\"Pclass\", \"Sex\",\"Embarked\",\"SimplifiedTitle\",\"AgeBin\",\"FareBin\"],\n                            prefix=[\"PC\", \"Sex\",\"Em\",\"ST\",\"Age\",\"Fare\"])","b7a152a5":"final_df.head(n=5)","333f8c6d":"y_final_prob = model_nn.predict(final_df.as_matrix()).reshape(final_df.shape[0],)","bf872671":"y_final = throttling(y_final_prob, .6)","18a361b5":"summission = pd.concat([final_csv['PassengerId'], pd.DataFrame(y_final)], axis=1)\nsummission.columns = ['PassengerId', 'Survived']","f3da4873":"summission.to_csv('summission.csv', encoding='utf-8', index = False)","e7099607":"# A Complete Guide for Binary Classification Problem\n- please see also [A Complete Guide for Regression Problem](https:\/\/www.kaggle.com\/yiidtw\/a-complete-guide-for-regression-problem)"}}