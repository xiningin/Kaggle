{"cell_type":{"07e4bcac":"code","41754626":"code","687b7381":"code","b7427078":"code","a2830861":"code","9af6b733":"code","d8b9b512":"code","3af31649":"code","ba021669":"code","c4e41da7":"markdown","e414a249":"markdown","bb526692":"markdown","3f6c8edf":"markdown","ed41f840":"markdown","781c790e":"markdown","9bcc632f":"markdown","13c0ee4a":"markdown"},"source":{"07e4bcac":"from keras.applications.resnet50 import ResNet50\nfrom keras.preprocessing import image\nfrom keras.preprocessing.image import load_img\nfrom keras.applications.resnet50 import preprocess_input, decode_predictions\nfrom keras.models import Model\nimport numpy as np\nfrom os import listdir, walk\nfrom os.path import isfile, join\nimport itertools\nimport sys,requests\nfrom matplotlib import pyplot as plt","41754626":"def getAllFilesInDirectory(directoryPath: str):\n    return [(directoryPath + \"\/\" + f) for f in listdir(directoryPath) if isfile(join(directoryPath, f))]","687b7381":"def predict(img_path : str, model: Model):\n    img = image.load_img(img_path, target_size=(224, 224))\n    x = image.img_to_array(img)\n    x = np.expand_dims(x, axis=0)\n    x = preprocess_input(x)\n    return model.predict(x)","b7427078":"def calcSimilarity(self_vect, feature_vectors):\n    similar: dict = {}\n    keys = [k for k,v in feature_vectors.items()]\n    min_dist = 10000000\n    for k,v in feature_vectors.items():\n       dist=np.linalg.norm(self_vect-v)\n       if(dist < min_dist):\n           min_dist = dist\n           similar = k\n    return similar ","a2830861":"def load_image(img_path, show=False):\n    img = image.load_img(img_path, target_size=(224, 224))\n    img_tensor = image.img_to_array(img)\n    img_tensor = np.expand_dims(img_tensor, axis=0)\n    if show:\n        plt.imshow(img_tensor[0]\/255)                           \n        plt.axis('off')\n        plt.show()","9af6b733":"def driver(self_img):\n    feature_vectors: dict = {}\n    model = ResNet50(weights='imagenet')\n    print (\"Reading images\")\n    for img_path in getAllFilesInDirectory(\"..\/input\/pokemon-images-and-types\/images\/images\"):\n        feature_vectors[img_path] = predict(img_path,model)[0]\n    self_vect = predict(self_img,model)[0]\n    print (\"Computing image similarity\")\n    result=calcSimilarity(self_vect, feature_vectors)\n    print (\"Your picture is most similar to : \",result)\n#     print(self_vect)\n    return result","d8b9b512":"f = open('Self.jpg','wb')\nr = requests.get(\"https:\/\/scontent.fblr1-3.fna.fbcdn.net\/v\/t1.0-9\/67348703_10219758215926660_18338638475558912_n.jpg?_nc_cat=107&_nc_oc=AQmBneQL7Bgrr19jONnTfV8y9Er05NR1PdUQ7xb9723SOS1xZeQcJ7OBKYPSVp3_gZs&_nc_ht=scontent.fblr1-3.fna&oh=8d06ca925e759113191c0d05d81469e8&oe=5DA7A134\")\nf.write(r.content)\nf.close()","3af31649":"self_img_path = \"..\/working\/Self.jpg\"\nresult = driver(self_img_path)","ba021669":"load_image(self_img_path, show = True)\nload_image(result, show = True)","c4e41da7":"# Introduction","e414a249":"Creating some functions for processing images and computing Eucleadian distances","bb526692":"# Solution","3f6c8edf":"We'll be using Keras library to detect similarity between images. For this purpose, the pokemon images dataset of kaggle is used.","ed41f840":"Turns out I'm a Bellsprout ;)","781c790e":"# Output","9bcc632f":"Downloading a picture from my Facebook","13c0ee4a":"A pretrained Keras model <code>Resnet50<\/code> is used to process images of pokemon and convert them into their vector form. These vectors are compared to the vector form of a picture downloaded from facebook and euclidean distances are computed between them. "}}