{"cell_type":{"ba29ece1":"code","69a1e5e7":"code","42b54867":"code","3a11c3a3":"code","9ef2daee":"code","b342ae85":"code","493d5b9c":"code","d2928475":"code","3b649648":"code","4c7fbcb5":"code","3e02ce70":"code","64435b17":"code","3ef1dfe5":"code","f97a10de":"code","9001190f":"code","e571074d":"code","081525e3":"code","19cea0b5":"code","a0da3fb8":"code","29776cfe":"code","0f1b720e":"code","2264ed50":"code","7634611b":"code","7158e2e2":"code","2bf7add9":"code","d30eb05a":"code","e61597b0":"code","752f3efb":"code","e26c3cef":"code","f9f62ff7":"code","6c5af0c5":"code","b3e0ce0b":"code","7a64ddb9":"code","7121db4b":"markdown","65e2a60c":"markdown","e52f85c9":"markdown","2d5c6fa2":"markdown"},"source":{"ba29ece1":"\nimport numpy as np \nimport pandas as pd \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","69a1e5e7":"import numpy as np\nimport pandas as pd\nimport datetime as datetime\nfrom sklearn import preprocessing\nimport plotly.express as px\nimport plotly.offline as py","42b54867":"from sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures","3a11c3a3":"from pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()\nimport matplotlib.pyplot as plt","9ef2daee":"from random import random\nfrom datetime import date\nfrom datetime import datetime","b342ae85":"pd.set_option('display.max_columns', 10)\npd.set_option('display.max_rows', 10)\nnp.set_printoptions(precision=3)","493d5b9c":"import os\nos.listdir(\"..\/input\/\")","d2928475":"path = \"..\/input\/covid19-in-italy\/\"","3b649648":"df_regions = pd.read_csv(path+'covid19_italy_region.csv',decimal=\",\")\ndf_regions.head()","4c7fbcb5":"df_regions.describe()","3e02ce70":"df_regions.tail(10)","64435b17":"df_regions.head(10)","3ef1dfe5":"cols = ['HospitalizedPatients','IntensiveCarePatients','TotalHospitalizedPatients','HomeConfinement',\n'CurrentPositiveCases','NewPositiveCases','Recovered','Deaths','TotalPositiveCases','TestsPerformed']\ndf_italy=df_regions.groupby(by=['Date'], as_index=False)[cols].sum()\ndf_italy.head()","f97a10de":"bolge_isim = 'RegionName'\nkod_isim = 'RegionCode'\nalan_veri = 'Date'\nvariables = 'TotalPositiveCases'","9001190f":"df_regions[bolge_isim].unique()","e571074d":"df_trentino = df_regions[df_regions[kod_isim]==4].copy()\ndf_trentino.columns","081525e3":"df_trentino = df_trentino.groupby(by=[kod_isim,alan_veri],as_index=False).sum()\ndf_trentino[kod_isim]='Trentino Alto-Adige'","19cea0b5":"df_trentino = df_trentino.groupby(by=[kod_isim,alan_veri],as_index=False).sum()\ndf_trentino[bolge_isim]='Trentino Alto-Adige'","a0da3fb8":"df_regions = df_regions[df_regions[kod_isim]!=4]\ndf_regions = pd.concat([df_regions,df_trentino],axis=0)\ndf_regions.reset_index()","29776cfe":"def stringToDatetime(col, fmt):\n    return pd.to_datetime(col, format=fmt)","0f1b720e":"def dfNorm(df):\n    df['timestp']=stringToDatetime(df[alan_veri ],'%Y-%m-%d %H:%M:%S')\n    df['timestp']=df['timestp'].dt.normalize()\n    print('min date = ',min(df['timestp']),'max date = ',max(df['timestp']))\n    return df","2264ed50":"df_italy = dfNorm(df_italy)","7634611b":"df_regions = dfNorm(df_regions)","7158e2e2":"y_true  = df_italy[variables]\n#y_true = df_regions[df_regions[kod_isim]=='Lombardia'][variables]\ny_true = y_true.values\ny_true","2bf7add9":"N_train = len(y_true)\nN_train","d30eb05a":"N_test = 15","e61597b0":"X_train = np.arange(0,N_train).reshape(-1, 1)\nX_train","752f3efb":"X_test = np.arange(N_train,N_train+N_test+1).reshape(-1, 1)\nX_test","e26c3cef":"lrm = LinearRegression()\nlrm.fit(X_train,y_true)\ny_lrm_val = lrm.predict(X_train)\ny_lrm_pre = lrm.predict(X_test)","f9f62ff7":"def plotGraph(X_train, y_true, y_valid, X_test, y_pred):\n    plt.rcParams[\"figure.figsize\"] = (12,6)\n    plt.plot(X_train, y_true, color='blue')\n    plt.plot(X_train, y_valid, color='red',linestyle='dashed')\n    plt.plot(X_test, y_pred, color='red')\n    x_conn = [X_train[len(X_train)-1],X_test[0]]\n    y_conn = [y_true[len(X_train)-1],y_pred[0]]\n    plt.plot(x_conn, y_conn, color='gray')\n    y_conv = [y_valid[len(X_train)-1],y_pred[0]]\n    plt.plot(x_conn, y_conv, color='gray',linestyle='dashed')","6c5af0c5":"plotGraph(X_train, y_true, y_lrm_val, X_test, y_lrm_pre)","b3e0ce0b":"regs = df_regions[kod_isim].unique()\nnc = 3\nnr = int(len(regs)\/nc)+1\nfig, ax = plt.subplots(nrows=nr,ncols=nc,figsize=(18,30))\ni = 0\nj = 0\nwhile i<nr:\n    for j in range(nc):\n        k = nc*i+j\n        if (k<len(regs)):\n            reg = regs[k]\n            y_true_reg = df_regions[df_regions[kod_isim]==reg][variables].values\n            lrr = LinearRegression()\n            lrr.fit(X_train,y_true_reg)\n            y_lrr_val = lrr.predict(X_train)\n            y_lrr_pre = lrr.predict(X_test)\n            ax[i,j].plot(X_train, y_true_reg, color='blue')\n            ax[i,j].plot(X_train, y_lrr_val, color='red', linestyle='dashed')\n            ax[i,j].plot(X_test, y_lrr_pre, color='red')\n            ax[i,j].set_title(reg)            \n    i = i + 1","7a64ddb9":"fig = px.sunburst(df_regions.sort_values(by='NewPositiveCases', ascending=False).reset_index(drop=True), path=[\"Country\", \"RegionName\"], values=\"NewPositiveCases\", title='Confirmed Cases', color_discrete_sequence = px.colors.qualitative.Prism)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()","7121db4b":"# Veri Setinin Tan\u0131t\u0131ld\u0131\u011f\u0131 bolum","65e2a60c":"# Linear Regresyon algoritmas\u0131 kullan\u0131ld\u0131.","e52f85c9":"# Data G\u00f6rselle\u015ftirmesi \u015fekildeki gibidir","2d5c6fa2":"# Verinin ilk 10 s\u00fctunu ve son 10 s\u00fct\u00fcnun bilgileri \u015fekildeki gibidir."}}