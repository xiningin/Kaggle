{"cell_type":{"6c56a4c4":"code","756d56fe":"code","82370911":"code","6cd86d6f":"code","eed9a0b3":"code","39beba36":"code","c1085aff":"code","54c9ad70":"code","a2305db3":"code","79a75e82":"code","3a1c5ec1":"code","903cd073":"code","0e12bcce":"code","59c02123":"code","677f2747":"code","8c34fae0":"code","99f81098":"markdown","c7ace381":"markdown","d2bf018e":"markdown"},"source":{"6c56a4c4":"# setup\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras.layers import Convolution2D, MaxPooling2D, Flatten, Dense, Dropout\nfrom keras.callbacks import EarlyStopping","756d56fe":"# data path\ntrain_path = '..\/input\/intel-image-classification\/seg_train\/seg_train\/'\ntest_path = '..\/input\/intel-image-classification\/seg_test\/seg_test\/'","82370911":"# data augmentation\ntrain_augment = ImageDataGenerator(rescale=1.\/255, rotation_range=35, \n                                  width_shift_range=0.2, height_shift_range=0.2,\n                                  shear_range=0.25, zoom_range=0.2,vertical_flip=True)\ntest_augment = ImageDataGenerator(rescale=1.\/255)","6cd86d6f":"# data\ntrain_data = train_augment.flow_from_directory(directory=train_path, target_size=(150, 150),\n                                              color_mode='rgb', class_mode='categorical', batch_size=32)\ntest_data = test_augment.flow_from_directory(directory=test_path, target_size=(150, 150),\n                                              color_mode='rgb', class_mode='categorical', batch_size=32)","eed9a0b3":"# model\nmodel_1 = Sequential()\n\n# layers\nmodel_1.add(Convolution2D(filters=32, kernel_size=(3, 3), strides=(1, 1), padding='same', activation='relu', input_shape=(150, 150, 3)))\nmodel_1.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n\nmodel_1.add(Convolution2D(filters=64, kernel_size=(3, 3), strides=(1, 1), padding='same', activation='relu'))\nmodel_1.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n\nmodel_1.add(Convolution2D(filters=128, kernel_size=(3, 3), strides=(1, 1), padding='same', activation='relu'))\nmodel_1.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n\nmodel_1.add(Convolution2D(filters=256, kernel_size=(3, 3), strides=(1, 1), padding='same', activation='relu'))\nmodel_1.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n\nmodel_1.add(Convolution2D(filters=528, kernel_size=(3, 3), strides=(1, 1), padding='same', activation='relu'))\nmodel_1.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n\nmodel_1.add(Flatten())\nmodel_1.add(Dropout(rate=0.25))\n\nmodel_1.add(Dense(units=350, activation='relu'))\nmodel_1.add(Dropout(rate=0.2))\n\nmodel_1.add(Dense(units=6, activation='softmax'))\n\n# compile\nmodel_1.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\n# summary\nmodel_1.summary()","39beba36":"# Early Stopping\nearlystop = EarlyStopping(monitor='val_loss', patience=15, verbose=1, mode='min')","c1085aff":"# Training\nmodel_1.fit(x=train_data, validation_data=(test_data),\n           epochs=60, verbose=1, callbacks=[earlystop])","54c9ad70":"# Report\nreport_1 = pd.DataFrame(model_1.history.history)\nreport_1.head()","a2305db3":"# Report Visulation\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(15, 5))\nreport_1[['loss', 'val_loss']].plot(ax=axes[0])\nreport_1[['accuracy', 'val_accuracy']].plot(ax=axes[1])","79a75e82":"# Evaluation on Test Data\nval_loss, val_accuracy = model_1.evaluate(test_data)\nprint('Validation loss : {}'.format(val_loss))\nprint('Validation accuracy : {}'.format(val_accuracy))","3a1c5ec1":"# model\nmodel_2 = Sequential()\n\n# layers\nmodel_2.add(Convolution2D(filters=32, kernel_size=(3, 3), strides=(1, 1), activation='relu', padding='same', input_shape=(150, 150, 3)))\nmodel_2.add(Convolution2D(filters=32, kernel_size=(3, 3), strides=(1, 1), activation='relu', padding='same'))\nmodel_2.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n\nmodel_2.add(Convolution2D(filters=64, kernel_size=(3, 3), strides=(1, 1), activation='relu', padding='valid'))\nmodel_2.add(Convolution2D(filters=64, kernel_size=(3, 3), strides=(1, 1), activation='relu', padding='valid'))\nmodel_2.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='valid'))\n\nmodel_2.add(Convolution2D(filters=128, kernel_size=(3, 3), strides=(1, 1), activation='relu', padding='valid'))\nmodel_2.add(Convolution2D(filters=128, kernel_size=(3, 3), strides=(1, 1), activation='relu', padding='valid'))\nmodel_2.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='valid'))\n\nmodel_2.add(Convolution2D(filters=256, kernel_size=(3, 3), strides=(1, 1), activation='relu', padding='valid'))\nmodel_2.add(Convolution2D(filters=256, kernel_size=(3, 3), strides=(1, 1), activation='relu', padding='valid'))\nmodel_2.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='valid'))\n\nmodel_2.add(Flatten())\nmodel_2.add(Dropout(rate=0.2))\n\nmodel_2.add(Dense(units=550, activation='relu'))\nmodel_2.add(Dropout(rate=0.15))\n\nmodel_2.add(Dense(units=150, activation='relu'))\nmodel_2.add(Dropout(0.1))\n\nmodel_2.add(Dense(units=6, activation='softmax'))\n\n# compile\nmodel_2.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\n# summary\nmodel_2.summary()","903cd073":"# Early Stopping\nearlystop = EarlyStopping(monitor='val_loss', patience=16, verbose=1, mode='min')","0e12bcce":"# Training\nmodel_2.fit(x=train_data, validation_data=(test_data),\n           epochs=60, verbose=1, callbacks=[earlystop])","59c02123":"# Report\nreport_2 = pd.DataFrame(model_2.history.history)\nreport_2.head()","677f2747":"# Report Visulation\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(15, 5))\nreport_2[['loss', 'val_loss']].plot(ax=axes[0])\nreport_2[['accuracy', 'val_accuracy']].plot(ax=axes[1])","8c34fae0":"# Evaluation on Test Data\nval_loss, val_accuracy = model_2.evaluate(test_data)\nprint('Validation loss : {}'.format(val_loss))\nprint('Validation accuracy : {}'.format(val_accuracy))","99f81098":"# **Model No. 01**","c7ace381":"# **Model No. 02**","d2bf018e":"# **Imports and Image Preprocessing**"}}