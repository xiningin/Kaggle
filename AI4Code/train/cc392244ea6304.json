{"cell_type":{"757bb4be":"code","578cb465":"code","44e13f92":"code","f627fa27":"code","f06daf48":"code","eceda0eb":"code","da6543ed":"code","3db17fa1":"code","2176492c":"code","74244ffa":"code","747e892a":"code","b257ddfd":"code","f7290b5a":"code","39eff192":"code","4af73b90":"code","d1f3038b":"code","a6f1f61c":"code","79d870ba":"code","64c33850":"code","113818fb":"code","28efbcf3":"code","39affd15":"code","8131bfdb":"code","d79947f2":"code","e8256dc1":"code","ee32bd2f":"code","753268c3":"code","4576aa97":"code","6d321053":"code","87feb602":"code","4c2e7d87":"code","2cd50dcb":"code","f230194a":"code","4fdc9fba":"code","f02a6140":"code","a5d2218a":"code","18b493a1":"code","48bf381b":"code","8a54c7ff":"code","fde5a58e":"code","3ba60a3c":"code","12acc2a4":"code","86da18f5":"code","69a874e9":"markdown","e7fc6c0c":"markdown","d2ba23ff":"markdown","6201aba6":"markdown","4515af85":"markdown","3542f92b":"markdown"},"source":{"757bb4be":"import pandas as pd\nimport numpy as np\n\nfrom datetime import datetime\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nplt.style.use( 'seaborn-whitegrid')\n\nfrom scipy import stats","578cb465":"# load car datasets.\n\nfiles = ['audi.csv', 'bmw.csv', 'cclass.csv','focus.csv','hyundi.csv','merc.csv','skoda.csv','toyota.csv','vauxhall.csv','vw.csv']\ndata = {}\nfor file in files:\n    df = pd.read_csv(f\"..\/input\/used-car-dataset-ford-and-mercedes\/{file}\")\n    data[file.replace(\".csv\",\"\")] = df\n    \n# Add column brand to our datasets.\nfor k, v in data.items():\n    v['brand'] = k\n    \n\n# Printing first five rows.\nfor k, v in data.items():\n    print(k)\n    print(v.head())\n    break","44e13f92":"# Creating single DataFrame\ncar_data = pd.DataFrame()\n\nfor k, v in data.items():\n    car_data = pd.concat([car_data,v], axis=0)\n    \ncar_data.head()","f627fa27":"# Shape\ncar_data.shape","f06daf48":"# drop the extra tax columns\ncar_data = car_data.drop(['tax(\u00a3)'], axis = 1)\ncar_data.head()","eceda0eb":"# Prints summary of Car data\ncar_data.describe()","da6543ed":"car_data.info()","3db17fa1":"# we can see that there are some outliers, so let's clean our data.\n\ndef Quartile(data):\n    \n    \"\"\"\n    This function calculate first,third quantile, Inter quantile range.\n    returns upper range and lower range which helps in to remove Outliers.\n    \n    \"\"\"\n    \n    # first quantile Q1\n    Q1 = np.percentile(data, 25, interpolation='midpoint')\n    \n    # third quantile Q3\n    Q3 = np.percentile(data, 75, interpolation='midpoint')\n    \n    IQR = stats.iqr(data)\n    \n    upper_range = Q3 + (1.5 * IQR)   \n    lower_range = Q1 - (1.5 * IQR)\n    \n    return int(upper_range), int(lower_range)","2176492c":"# Let's find Outliers in tax.\n\nplt.figure(figsize=(12, 8))\n\nplt.boxplot(car_data['mileage'])\n\nplt.title(\"Detecting Outliers\")\nplt.show()","74244ffa":"# remove outliers.\nupperRange, lowerRange = Quartile(car_data.mileage)\ncar_data = car_data.loc[(car_data.mileage<upperRange) & (car_data.mileage>lowerRange)]","747e892a":"# Let's find Outliers in engineSize.\n\nplt.figure(figsize=(12, 8))\n\nplt.boxplot(car_data['engineSize'])\n\nplt.title(\"Detecting Outliers\")\nplt.show()","b257ddfd":"# remove outliers.\nupperRange, lowerRange = Quartile(car_data.engineSize)\ncar_data = car_data.loc[(car_data.engineSize<upperRange) & (car_data.engineSize>lowerRange)]","f7290b5a":"# Let's find Outliers.\n\nplt.figure(figsize=(12, 8))\n\nplt.boxplot(car_data['price'])\n\nplt.title(\"Detecting Outliers\")\nplt.show()","39eff192":"# remove outliers.\nupperRange, lowerRange = Quartile(car_data.price)\ncar_data = car_data.loc[(car_data.price<upperRange) & (car_data.price>lowerRange)]","4af73b90":"# Missing data.\ncar_data.isnull().sum()","d1f3038b":"car_data.reset_index(drop=True, inplace=True)\ncar_data.head()","a6f1f61c":"# Let's see the average tax values of car by transmission type.\n\nGrpData = pd.DataFrame(car_data.groupby(['transmission']).mean().tax)\n\n# visualization of the same.\n\nGrpData.plot(kind='bar', figsize=(12, 8))\n\nplt.xlabel(\"Transmission type\")\nplt.ylabel(\"Tax\")\nplt.title(\"Average Tax by Transmission type\")\n\nplt.show()","79d870ba":"# Let's see the average tax values of car by fuel type.\n\nfuelGrp = pd.DataFrame(car_data.groupby(['fuelType']).mean().tax)\n\n# visualization of the same.\n\nfuelGrp.plot(kind='bar', figsize=(12, 8))\n\nplt.xlabel(\"fule type\")\nplt.ylabel(\"Tax\")\nplt.title(\"Average Tax by fule type\")\n\nplt.show()","64c33850":"# Let's see the average tax values of car by engineSize.\n\nGrpData = pd.DataFrame(car_data.groupby(['engineSize']).mean().tax)\nGrpData = GrpData.sort_index(ascending=False)\n\n# visualization of the same.\n\nGrpData.plot(kind='bar', figsize=(12, 8))\n\nplt.ylim(0, 220)\n\nplt.xlabel(\"Engine Size\")\nplt.ylabel(\"Tax\")\nplt.title(\"Average Tax by Size of Engine\")\n\nplt.show()","113818fb":"\nGrpData = pd.DataFrame(car_data.groupby(['fuelType', 'transmission']).mean().tax)\nGrpData = GrpData.sort_index(ascending=False)\n\n# visualization of the same.\n\nGrpData.unstack().plot(kind='bar', figsize=(12, 8))\n\nplt.ylim(0, 200)\n\nplt.ylabel(\"Tax\")\nplt.title(\"Average Tax\")\n\nplt.show()","28efbcf3":"# distribution plot.\nsns.displot(data = car_data, x ='tax', kde=True, height=8, aspect=1.5)\n\nplt.xlabel('Tax')\nplt.title(\"Univariate Distribution of Tax.\")\nplt.show()","39affd15":"# Tax for electronic car is 0.\n# Let's see if there is any missing data for tax for electronic car.\n\na = car_data.loc[car_data.fuelType == 'Electric', 'tax'].isnull().sum()\nprint(f\"Missing Values for electric cars is {a}\")\n\n# Let's replace missing data of by average value of tax.\ncar_data['tax'] = car_data.tax.replace(np.nan, car_data.tax.mean())\n\n# check for missing data.\ncar_data.tax.isnull().sum()","8131bfdb":"# distribution plot.\nsns.displot(data = car_data, x ='mpg', kde=True, height=8, aspect=2)\n\nplt.xlabel('Miles per gallon')\nplt.title(\"Univariate Distribution of miles per gallon.\")\nplt.show()","d79947f2":"# Let's replace missing data of by median value of mpg.\ncar_data['mpg'] = car_data['mpg'].replace(np.nan, car_data.mpg.median())\n\n# check for missing data.\ncar_data.mpg.isnull().sum()","e8256dc1":"car_data.isnull().sum()","ee32bd2f":"plt.figure(figsize=(12, 8))\n\nplt.boxplot(car_data.tax)\n\nplt.ylabel('Tax')\nplt.title(\"Boxplot for Outliers\")\nplt.show()","753268c3":"upperRange, lowerRange = Quartile(car_data.tax)\ncar_data = car_data.loc[(car_data.tax<upperRange) & (car_data.tax>lowerRange)]","4576aa97":"plt.figure(figsize=(12, 8))\n\nplt.boxplot(car_data.mpg)\n\nplt.ylabel('Tax')\nplt.title(\"Boxplot for Outliers\")\nplt.show()","6d321053":"upperRange, lowerRange = Quartile(car_data.mpg)\ncar_data = car_data.loc[(car_data.mpg<upperRange) & (car_data.mpg>lowerRange)]","87feb602":"car_data.dtypes","4c2e7d87":"# Let's examine Price of cars by Brands.\nPrice = pd.DataFrame(car_data.groupby(['brand']).mean().price)\nPrice.sort_values(by='price', ascending=False, inplace=True)","2cd50dcb":"# visualization for the same.\nPrice.plot(kind='bar', figsize=(12, 8))\n\nplt.ylim(0, 30000)\n\nplt.xlabel(\"Brands\")\nplt.ylabel(\"Price\")\nplt.title(\"Average Price by Brand\")\n\nplt.show()","f230194a":"# Let's find out if price depends on engine size, transimission they used and fuel type.\nPrice = pd.DataFrame(car_data.groupby(['fuelType', 'transmission']).mean().price)\nPrice.sort_values(by='price', ascending=False, inplace=True)\nPrice","4fdc9fba":"# visualization for the same.\nPrice.unstack().plot(kind='bar', figsize=(12, 8))\n\nplt.ylim(0, 30000)\n\nplt.xlabel(\"Fuel\")\nplt.ylabel(\"Price\")\nplt.title(\"Average Price\")\n\nplt.show()","f02a6140":"avg_mileage = pd.DataFrame(car_data.groupby(['year'])['price'].mean())\navg_mileage.sort_values(by='price',ascending=False, inplace=True)\navg_mileage","a5d2218a":"\navg_mileage.unstack().plot(kind='line',stacked=True,figsize=(14, 8))\n\nplt.ylabel('Price')\nplt.title(\"Average Price and Mileage by Car Brand\")\n\nplt.show()","18b493a1":"car_data.head()","48bf381b":"b = pd.get_dummies(car_data.transmission)\nc = pd.get_dummies(car_data.brand)\n\ncar_data = pd.concat([car_data,b, c], axis=1)\ncar_data.head()","8a54c7ff":"data = car_data.drop('price', axis=1)\n\n# select only numeric columns\nX = data.select_dtypes(exclude='object')\ny = car_data.price","fde5a58e":"X.head()","3ba60a3c":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1, test_size=0.2)","12acc2a4":"from sklearn.tree import DecisionTreeRegressor\n\nmodel = DecisionTreeRegressor()\nmodel.fit(X_train, y_train)\npredictions = model.predict(X_test)\n\n# find how accurate model performance is.\nMAE = mean_absolute_error(predictions, y_test)\nprint(f\"Mean absolute error for Decision Tree Regressor: {MAE}\")","86da18f5":"from sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\npredictions = model.predict(X_test)\n\n# find how accurate model performance is.\nMAE = mean_absolute_error(predictions, y_test)\nprint(f\"Mean absolute error for Linear Regression: {MAE}\")","69a874e9":"## Let's examine the tax price","e7fc6c0c":"The data is skewed towards right.","d2ba23ff":"We can see that there is no tax for Electronics car.","6201aba6":"<h2 style=\"color:#548CA8\">The top 3 most expensive cars are from Mercedes, Audi, and BMW Brands <\/h2>","4515af85":"<h1 style=\"color:#262A53\">Loading data files.<\/h1>\n<p style=\"font-size:24px\">The following code read data from multiple files.The below code will<\/p>\n \n - <p style=\"font-size:22px\">Loop through each data file.<\/p>\n - <p style=\"font-size:22px\">Read the file into a Pandas DataFrame.<\/p>\n - <p style=\"font-size:22px\">Put each DataFrame into a Python dictionary.<\/p>","3542f92b":"<h3>There is no tax for electronic cars. So, Let's try to fill the missing values of tax.<\/h3>"}}