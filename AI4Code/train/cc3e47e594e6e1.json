{"cell_type":{"3ece7af6":"code","30a3bb8b":"code","1c554514":"code","7302b220":"code","7195fe38":"code","19a5129c":"code","ac160123":"code","bfefba89":"code","bbeedd9f":"code","06d5b840":"code","f5f6ff9f":"code","c0d4ebcf":"code","baef4d16":"code","1186ed3c":"code","c03ff93f":"code","9762d898":"code","f529764f":"code","30422c8f":"code","bd5f9428":"code","e7def32d":"code","6b5fe74f":"code","86852919":"markdown"},"source":{"3ece7af6":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom keras import models, layers\nimport tqdm\nfrom PIL import Image\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import datasets\nfrom sklearn import svm\nfrom sklearn.model_selection import KFold\nimport os\nimport os, shutil \nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix\n\npath = '\/kaggle\/input\/challenges-in-representation-learning-facial-expression-recognition-challenge\/'\ndata = pd.read_csv(path+'icml_face_data.csv')\nemotions = {0: 'Angry', 1: 'Disgust', 2: 'Fear', 3: 'Happy', 4: 'Sad', 5: 'Surprise', 6: 'Neutral'}\nclasses = dict(zip(range(0, 7), (((data[data[' Usage']=='Training']['emotion'].value_counts()).sort_index())\/len(data[data[' Usage']=='Training']['emotion'])).tolist()))\nX = data.emotion\nkf = KFold(n_splits=6)\nfor train, test in kf.split(X):\n    print(\"%s %s\" % (train, test))","30a3bb8b":"print(data)","1c554514":"def parse_data(data):\n    image_array = np.zeros(shape=(len(data), 48, 48)) # 1\n    image_label = np.array(list(map(int, data['emotion'])))\n    \n    for i, row in enumerate(data.index):\n        image = np.fromstring(data.loc[row, ' pixels'], dtype=int, sep=' ')\n        image = np.reshape(image, (48, 48)) # 1\n        image_array[i] = image\n        \n    return image_array, image_label\n\n# Splitting the data into train, validation and testing set thanks to Usage column\ntrain_imgs, train_lbls = parse_data(data[data[\" Usage\"] == \"Training\"])\nval_imgs, val_lbls = parse_data(data[data[\" Usage\"] == \"PrivateTest\"])\ntest_imgs, test_lbls = parse_data(data[data[\" Usage\"] == \"PublicTest\"])\ntrain_images = train_imgs.reshape((train_imgs.shape[0], 48, 48, 1))\ntrain_images = train_images.astype('float32')\/255\nval_images = val_imgs.reshape((val_imgs.shape[0], 48, 48, 1))\nval_images = val_images.astype('float32')\/255\ntest_images = test_imgs.reshape((test_imgs.shape[0], 48, 48, 1))\ntest_images = test_images.astype('float32')\/255\nprint(\"train shape\", np.shape(train_imgs))\nprint(\"validation shape\", np.shape(val_imgs))\nprint(\"validatio shape\", np.shape(val_imgs))","7302b220":"print(train_imgs)","7195fe38":"model_mlp = keras.Sequential()\nmodel_mlp.add(layers.Flatten(input_shape=(48, 48, 1)))\nmodel_mlp.add(layers.Dense(units=120, activation='relu'))\nmodel_mlp.add(layers.Dense(units=84, activation='relu'))\nmodel_mlp.add(layers.Dense(units=7, activation = 'softmax'))\nmodel_mlp.compile(loss=keras.losses.SparseCategoricalCrossentropy(), optimizer=keras.optimizers.Adam(lr=1e-3), metrics=['accuracy'])\nmodel_mlp.summary()","19a5129c":"model_mlp.fit(train_imgs, train_lbls, \n          epochs=10, batch_size=32, \n          validation_data=(val_imgs, val_lbls), verbose=1)","ac160123":"from tensorflow.keras.utils import to_categorical\ntrain_labels = to_categorical(train_lbls)\nval_labels = to_categorical(val_lbls)\ntest_labels = to_categorical(test_lbls)\nmodel_cnn = models.Sequential()\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='selu', input_shape=(48, 48, 1)))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='selu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='elu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='elu'))\nmodel_cnn.add(layers.Flatten())\nmodel_cnn.add(layers.Dense(64, activation='relu'))\nmodel_cnn.add(layers.Dense(7, activation='sigmoid'))\nmodel_cnn.compile(optimizer=keras.optimizers.Adam(lr=1e-3), loss='categorical_crossentropy', metrics=['accuracy'])\nmodel_cnn.summary()","bfefba89":"history = model_cnn.fit(train_images, train_labels,\n                    validation_data=(val_images, val_labels),\n                    class_weight = classes,\n                    epochs=12,\n                    batch_size=512)","bbeedd9f":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(acc) + 1)\nplt.plot(epochs, acc, label='Training acc')\nplt.plot(epochs, val_acc, label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.legend()\nplt.figure()\nplt.plot(epochs, loss, label='Training loss')\nplt.plot(epochs, val_loss, label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\nplt.show()","06d5b840":"test_prob = model_cnn.predict(test_images)\ntest_pred = np.argmax(test_prob, axis=1)\ntest_accuracy = np.mean(test_pred == test_lbls)\n\nprint(test_accuracy)","f5f6ff9f":"conf_mat = confusion_matrix(test_lbls, test_pred)\npd.DataFrame(conf_mat, columns=emotions.values(), index=emotions.values())","c0d4ebcf":"model_cnn = models.Sequential()\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='selu', input_shape=(48, 48, 1)))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='selu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='selu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='selu'))\nmodel_cnn.add(layers.Flatten())\nmodel_cnn.add(layers.Dense(64, activation='selu'))\nmodel_cnn.add(layers.Dense(7, activation='softmax'))","baef4d16":"model_cnn = models.Sequential()\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='selu', input_shape=(48, 48, 1)))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='selu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='selu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='selu'))\nmodel_cnn.add(layers.Flatten())\nmodel_cnn.add(layers.Dense(64, activation='selu'))\nmodel_cnn.add(layers.Dense(7, activation='sigmoid'))","1186ed3c":"model_cnn = models.Sequential()\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='elu', input_shape=(48, 48, 1)))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='elu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='elu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='elu'))\nmodel_cnn.add(layers.Flatten())\nmodel_cnn.add(layers.Dense(64, activation='elu'))\nmodel_cnn.add(layers.Dense(7, activation='softmax'))","c03ff93f":"model_cnn = models.Sequential()\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='elu', input_shape=(48, 48, 1)))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='elu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='elu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='elu'))\nmodel_cnn.add(layers.Flatten())\nmodel_cnn.add(layers.Dense(64, activation='elu'))\nmodel_cnn.add(layers.Dense(7, activation='sigmoid'))","9762d898":"model_cnn = models.Sequential()\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='relu', input_shape=(48, 48, 1)))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='relu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel_cnn.add(layers.Flatten())\nmodel_cnn.add(layers.Dense(64, activation='relu'))\nmodel_cnn.add(layers.Dense(7, activation='sigmoid'))","f529764f":"model_cnn = models.Sequential()\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='relu', input_shape=(48, 48, 1)))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='relu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel_cnn.add(layers.Flatten())\nmodel_cnn.add(layers.Dense(64, activation='relu'))\nmodel_cnn.add(layers.Dense(7, activation='sigmoid'))","30422c8f":"model_cnn = models.Sequential()\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='relu', input_shape=(48, 48, 1)))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='relu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel_cnn.add(layers.Flatten())\nmodel_cnn.add(layers.Dense(64, activation='relu'))\nmodel_cnn.add(layers.Dense(7, activation='softmax'))","bd5f9428":"model_cnn = models.Sequential()\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='elu', input_shape=(48, 48, 1)))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='relu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='selu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='elu'))\nmodel_cnn.add(layers.Flatten())\nmodel_cnn.add(layers.Dense(64, activation='relu'))\nmodel_cnn.add(layers.Dense(7, activation='softmax'))","e7def32d":"model_cnn = models.Sequential()\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='elu', input_shape=(48, 48, 1)))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='elu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='elu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='selu'))\nmodel_cnn.add(layers.Flatten())\nmodel_cnn.add(layers.Dense(64, activation='selu'))\nmodel_cnn.add(layers.Dense(7, activation='sigmoid'))","6b5fe74f":"model_cnn = models.Sequential()\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='selu', input_shape=(48, 48, 1)))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='selu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='elu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='elu'))\nmodel_cnn.add(layers.Flatten())\nmodel_cnn.add(layers.Dense(64, activation='relu'))\nmodel_cnn.add(layers.Dense(7, activation='sigmoid'))","86852919":"\u041a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f: <\/b> \u043a\u043e\u0433\u0434\u0430 \u043c\u044b \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0435\u043c n_splits - \u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u043c\u0430\u0442\u0440\u0438\u0446\u044b. \u0421\u0435\u0439\u0447\u0430\u0441 n_splits = 6, \u0442\u043e \u0435\u0441\u0442\u044c \u0438\u043c\u0435\u0435\u043c 6 \u0432\u044b\u0431\u043e\u0440\u043e\u043a, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430\u0448 \u0434\u0430\u0442\u0430\u0441\u0435\u0442. \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c 6 \u044d\u043c\u043e\u0446\u0438\u0439, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0438\u043c\u0435\u043d\u043d\u043e \u0442\u0430\u043a \u0432\u044b\u0431\u043e\u0440\u043a\u0430 \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0431\u0443\u0434\u0435\u0442 \u0435\u043a\u0432\u0430\u0432\u0438\u043b\u0435\u043d\u0442\u043d\u0430.\n\n\u0421\u0432\u0435\u0440\u0442\u043e\u0447\u043d\u0430\u044f \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u0430\u044f \u0441\u0435\u0442\u044c: <\/b> \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u043b\u043e\u0435\u0432 \u043f\u043e\u0447\u0442\u0438 \u043d\u0435 \u043f\u043e\u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u043d\u043e \u0435\u0441\u043b\u0438 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0435\u0439\u0440\u043e\u043d\u043e\u0432 \u0432 \u0441\u043b\u043e\u044f\u0445 \u0434\u043e 128, \u0432 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u0445 \u0421\u041d\u0421 \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442. \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432\u0438\u0434\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f sigmoid, \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u0438\u043b\u044c\u043d\u043e \u0441\u0431\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0438 \u0438\u0442\u043e\u0433\u043e\u0432\u044b\u0435 \u043f\u043e\u0442\u0435\u0440\u0438 \u043e\u0447\u0435\u043d\u044c \u0432\u0435\u043b\u0438\u043a\u0438, \u0447\u0442\u043e \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a overfitting, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0443 \u043d\u0430\u0441 \u043d\u0435 \u0431\u0438\u043d\u0430\u0440\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0430\u043d\u043d\u044b\u0445.\n\n\u0412 \u0447\u0435\u043c \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u0441\u043b\u043e\u0435\u0432 \u0437\u0433\u043e\u0440\u0442\u043a\u043e\u0432\u0438\u0445 \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u0435\u0439. \u0421\u0432\u0435\u0440\u0442\u043e\u0447\u043d\u044b\u0439 \u0441\u043b\u043e\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u0441\u0442\u0440\u043e\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u0431\u043b\u043e\u043a\u043e\u043c \u0421\u041d\u0421. \u0410\u0433\u0440\u0435\u0433\u0438\u0440\u0443\u044e\u0449\u0438\u0439 \u0441\u043b\u043e\u0439 \u0441\u043b\u0443\u0436\u0438\u0442 \u043f\u043e\u0441\u0442\u0435\u043f\u0435\u043d\u043d\u043e\u043c\u0443 \u0441\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u044e \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0438 \u043e\u0431\u044a\u0435\u043c\u0430 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u0432 \u0441\u0435\u0442\u0438, \u0430 \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0435\u0449\u0451 \u0438 \u0434\u043b\u044f \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f. \u0421\u043b\u043e\u0439 \u0441\u0440\u0435\u0437\u0430\u043d\u043d\u044b\u0445 \u043b\u0438\u043d\u0435\u0439\u043d\u044b\u0445 \u0443\u0437\u043b\u043e\u0432 \u0443\u0441\u0438\u043b\u0438\u0432\u0430\u0435\u0442 \u043d\u0435\u043b\u0438\u043d\u0435\u0439\u043d\u044b\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u0440\u0438\u043d\u044f\u0442\u0438\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0438 \u0441\u0435\u0442\u0438 \u0432 \u0446\u0435\u043b\u043e\u043c, \u0437\u0430\u0442\u0440\u0430\u0433\u0438\u0432\u0430\u044f \u0440\u0435\u0446\u0435\u043f\u0442\u0438\u0432\u043d\u044b\u0435 \u043f\u043e\u043b\u044f \u0441\u0432\u0435\u0440\u0442\u043e\u0447\u043d\u043e\u0433\u043e \u0441\u043b\u043e\u044f. \u041d\u0435\u0439\u0440\u043e\u043d\u044b \u0432 \u043f\u043e\u043b\u043d\u043e\u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u043e\u043c \u0441\u043b\u043e\u0435 \u0438\u043c\u0435\u044e\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u0432\u043e\u0437\u0431\u0443\u0436\u0434\u0435\u043d\u0438\u044f\u043c\u0438 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u0441\u043b\u043e\u044f, \u043a\u0430\u043a \u044d\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0432\u0438\u0434\u0435\u0442\u044c \u0432 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u044b\u0445 \u0441\u0435\u0442\u044f\u0445. \u0418\u0445 \u0432\u043e\u0437\u0431\u0443\u0436\u0434\u0435\u043d\u0438\u0435 \u0437\u0430\u0442\u0435\u043c \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u043e \u043c\u0430\u0442\u0440\u0438\u0447\u043d\u044b\u043c \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0435\u043c, \u0437\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0432\u0437\u044f\u0442\u043e\u0441\u0442\u0438. \u0421\u043b\u043e\u0439 \u043f\u043e\u0442\u0435\u0440\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442, \u043a\u0430\u043a \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043a\u0430 \u0448\u0442\u0440\u0430\u0444\u0443\u0435\u0442 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0443\u0435\u043c\u044b\u043c\u0438 \u0438 \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u043c\u0438 \u043c\u0435\u0442\u043a\u0430\u043c\u0438, \u0438 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f, \u043a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e, \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u044e\u0449\u0438\u043c \u0441\u043b\u043e\u0435\u043c. \u0414\u043b\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0432 \u043d\u0435\u043c \u043c\u043e\u0433\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u043e\u0442\u0435\u0440\u044c (\u0447\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e \u044d\u0442\u043e softmax \u0438 sigmoid).\n\u041a\u0430\u043a\u043e\u0432\u044b \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u044d\u0442\u0430\u043f\u044b \u0442\u0438\u043f\u0438\u0447\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0443 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f? \u0411\u0438\u0437\u043d\u0435\u0441-\u0430\u043d\u0430\u043b\u0438\u0437, \u0430\u043d\u0430\u043b\u0438\u0437 \u0438 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445, \u043c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u043e\u0446\u0435\u043d\u043a\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u044f, \u0432\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u0435."}}