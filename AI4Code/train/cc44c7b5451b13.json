{"cell_type":{"012bb0ea":"code","d92bd74a":"code","78d8f105":"code","d723d9b4":"code","006bd976":"code","977589c4":"code","80140bcd":"code","fbccc7fb":"code","3c963797":"code","a5a5eb23":"markdown","f378872e":"markdown","b7c9da9c":"markdown","84ef3ba0":"markdown","c52e234b":"markdown","d159d47d":"markdown","6a643e30":"markdown","5590a9d6":"markdown"},"source":{"012bb0ea":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport folium\nfrom folium import plugins\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\ndata= pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/2019_nCoV_data.csv\")","d92bd74a":"from urllib import request\nimport json\nwith request.urlopen('https:\/\/raw.githubusercontent.com\/longwosion\/geojson-map-china\/master\/china.json') as response:\n    china_geojson = json.loads(response.read())\nchina_geojson['features'][31]","78d8f105":"m = folium.Map(\n    location=[35, 110],\n    tiles='Stamen Terrain',\n    zoom_start=4\n)\nfolium.GeoJson(\n    china_geojson,\n    name='china geo',\n    style_function=lambda x: {'fillColor': '#0000ff', 'fillOpacity': .2, 'weight': 2}\n).add_to(m)\n\nfolium.LayerControl().add_to(m)\n\nplugins.Fullscreen(\n    position='topright',\n    title='Full Screen',\n    title_cancel='Exit me',\n    force_separate_button=True\n).add_to(m)\n\nm","d723d9b4":"_prov_zh_en = \"\"\"\u5317\u4eac\u5e02 Beijing\n\u5929\u6d25\u5e02 Tianjin\n\u6cb3\u5317\u7701 Hebei\n\u5c71\u897f\u7701 Shanxi\n\u5185\u8499\u53e4\u81ea\u6cbb\u533a Inner Mongolia\n\u8fbd\u5b81\u7701 Liaoning\n\u5409\u6797\u7701 Jilin\n\u9ed1\u9f99\u6c5f\u7701 Heilongjiang\n\u4e0a\u6d77\u5e02 Shanghai\n\u6c5f\u82cf\u7701 Jiangsu\n\u6d59\u6c5f\u7701 Zhejiang\n\u5b89\u5fbd\u7701 Anhui\n\u798f\u5efa\u7701 Fujian\n\u6c5f\u897f\u7701 Jiangxi\n\u5c71\u4e1c\u7701 Shandong\n\u6cb3\u5357\u7701 Henan\n\u6e56\u5317\u7701 Hubei\n\u6e56\u5357\u7701 Hunan\n\u5e7f\u4e1c\u7701 Guangdong\n\u5e7f\u897f\u58ee\u65cf\u81ea\u6cbb\u533a Guangxi\n\u6d77\u5357\u7701 Hainan\n\u56db\u5ddd\u7701 Sichuan\n\u8d35\u5dde\u7701 Guizhou\n\u4e91\u5357\u7701 Yunnan\n\u897f\u85cf\u81ea\u6cbb\u533a Tibet\n\u91cd\u5e86\u5e02 Chongqing\n\u9655\u897f\u7701 Shaanxi\n\u7518\u8083\u7701 Gansu\n\u9752\u6d77\u7701 Qinghai\n\u5b81\u590f\u56de\u65cf\u81ea\u6cbb\u533a Ningxia\n\u65b0\u7586\u7ef4\u543e\u5c14\u81ea\u6cbb\u533a Xinjiang\n\u53f0\u6e7e\u7701 Taiwan\n\u9999\u6e2f\u7279\u522b\u884c\u653f\u533a Hong Kong\n\u6fb3\u95e8\u7279\u522b\u884c\u653f\u533a Macau\"\"\"\n\nprov_zh2en = {}\nprov_en2zh = {}\nfor line in _prov_zh_en.split(\"\\n\"):\n    zh, en = line.split(\" \", 1)\n    prov_zh2en[zh] = en\n    prov_en2zh[en] = zh\n    \n\n_prov_zh_code = \"\"\"\u5317\u4eac\u5e02\uff08110000 BJ\uff09\n\u5929\u6d25\u5e02\uff08120000 TJ\uff09\n\u6cb3\u5317\u7701\uff08130000 HE\uff09\n\u5c71\u897f\u7701\uff08140000 SX\uff09\n\u5185\u8499\u53e4\u81ea\u6cbb\u533a\uff08150000 NM\uff09\n\u8fbd\u5b81\u7701\uff08210000 LN\uff09\n\u5409\u6797\u7701\uff08220000 JL\uff09\n\u9ed1\u9f99\u6c5f\u7701\uff08230000 HL\uff09\n\u4e0a\u6d77\u5e02\uff08310000 SH\uff09\n\u6c5f\u82cf\u7701\uff08320000 JS\uff09\n\u6d59\u6c5f\u7701\uff08330000 ZJ\uff09\n\u5b89\u5fbd\u7701\uff08340000 AH\uff09\n\u798f\u5efa\u7701\uff08350000 FJ\uff09\n\u6c5f\u897f\u7701\uff08360000 JX\uff09\n\u5c71\u4e1c\u7701\uff08370000 SD\uff09\n\u6cb3\u5357\u7701\uff08410000 HA\uff09\n\u6e56\u5317\u7701\uff08420000 HB\uff09\n\u6e56\u5357\u7701\uff08430000 HN\uff09\n\u5e7f\u4e1c\u7701\uff08440000 GD\uff09\n\u5e7f\u897f\u58ee\u65cf\u81ea\u6cbb\u533a\uff08450000 GX\uff09\n\u6d77\u5357\u7701\uff08460000 HI\uff09\n\u56db\u5ddd\u7701\uff08510000 SC\uff09\n\u8d35\u5dde\u7701\uff08520000 GZ\uff09\n\u4e91\u5357\u7701\uff08530000 YN\uff09\n\u897f\u85cf\u81ea\u6cbb\u533a\uff08540000 XZ\uff09\n\u91cd\u5e86\u5e02\uff08500000 CQ\uff09\n\u9655\u897f\u7701\uff08610000 SN\uff09\n\u7518\u8083\u7701\uff08620000 GS\uff09\n\u9752\u6d77\u7701\uff08630000 QH\uff09\n\u5b81\u590f\u56de\u65cf\u81ea\u6cbb\u533a\uff08640000 NX\uff09\n\u65b0\u7586\u7ef4\u543e\u5c14\u81ea\u6cbb\u533a\uff08650000 XJ\uff09\n\u53f0\u6e7e\u7701\uff08710000 TW\uff09\n\u9999\u6e2f\u7279\u522b\u884c\u653f\u533a\uff08810000 HK\uff09\n\u6fb3\u95e8\u7279\u522b\u884c\u653f\u533a\uff08820000 MO\uff09\"\"\"\n\nprov_zh2code = {}\nprov_code2zh = {}\nprov_code2en = {}\nprov_en2code = {}\nfor line in _prov_zh_code.split(\"\\n\"):\n    prov, raw_code = line.split(\"\uff08\", 1)\n    code = raw_code[:2]\n    prov_zh2code[prov] = code\n    prov_code2zh[code] = prov\n    prov_en2code[prov_zh2en[prov]] = code\n    prov_code2en[code] = prov_zh2en[prov]\nprov_en2code","006bd976":"chinese_data = data[data.Country.map(\n    lambda x: \"China\" in x or \"Hong Kong\" in x or \"Maccu\" in x\n              or \"Taiwan\" in x)].drop(\"Country\", axis=1)\nchinese_data['ProvinceCode'] = chinese_data['Province\/State'].map(\n    lambda x: prov_zh2code[prov_en2zh[x]])\nchinese_data.head()","977589c4":"chinese_agg_data = (chinese_data[[\"Province\/State\", \"ProvinceCode\", \"Confirmed\"]]\n                    .groupby([\"Province\/State\", \"ProvinceCode\"]).agg(\"sum\")\n                    .reset_index().sort_values(by=[\"Confirmed\"], ascending=False))\nchinese_agg_data['ConfirmedLevel'] = (chinese_agg_data['Confirmed']\n                                     .map(lambda x: int(np.log2(x))))\nchinese_agg_data","80140bcd":"m = folium.Map(\n    location=[35, 110],\n    tiles='Stamen Terrain',\n    zoom_start=4\n)\n\nfolium.Choropleth(\n    geo_data=china_geojson,\n    name='choropleth',\n    data=chinese_agg_data,\n    columns=['ProvinceCode', 'ConfirmedLevel'],\n    key_on='feature.properties.id',\n    fill_color='Reds',\n    fill_opacity=0.7,\n    line_opacity=0.2,\n    legend_name='Confirmed Level'\n).add_to(m)\n\nfolium.LayerControl().add_to(m)\n\nm","fbccc7fb":"prov_city_geojson = {}\nfor prov_name, code in prov_zh2code.items():\n    prov_en = prov_zh2en[prov_name]\n    with request.urlopen(f'https:\/\/raw.githubusercontent.com\/longwosion\/geojson-map-china\/master\/geometryProvince\/{code}.json') as response:\n        prov_city_geojson[prov_en] = json.loads(response.read())","3c963797":"m = folium.Map(\n    location=[33, 113],\n    tiles='Stamen Terrain',\n    zoom_start=6\n)\nfolium.GeoJson(\n    china_geojson,\n    name='china geo',\n    style_function=lambda x: {'fillColor': '#0000ff', 'fillOpacity': .2, 'weight': 2}\n).add_to(m)\nfolium.GeoJson(\n    prov_city_geojson['Hubei'],\n    name='Hubei geo',\n    style_function=lambda x: {'fillColor': '#ff5511', 'fillOpacity': 0.8, 'weight': 1}\n).add_to(m)\n\nfolium.LayerControl().add_to(m)\n\nplugins.Fullscreen(\n    position='topright',\n    title='Full Screen',\n    title_cancel='Exit me',\n    force_separate_button=True\n).add_to(m)\n\nm","a5a5eb23":"# Chinese Province Name English To Chinese To Subdivision Code Dictionary\n\nTo save you time, I provide two dictionaries (also their inverse dictionaries) here.\n\nOne dictionary `prov_en2zh` (the inverse dictionary `prov_zh2en`) maps the Chines Province name to the corresponding Enligsh(PinYin) name:\n```\n'Beijing' => '\u5317\u4eac\u5e02'\n```\nAnother dictionary `prov_zh2code` (the inverse dictionary `prov_code2en`) maps the Chinese Province name to its (old) subdivision code:\n```\n'\u5317\u4eac\u5e02' => '11'\n```\nYou can find more information about chinese province subdivision code in the Wikipedia [ISO 3166-2:CN](https:\/\/en.wikipedia.org\/wiki\/ISO_3166-2:CN).\nThis subdivision code will be useful to join the `properties.id` in the GeoJSON information","f378872e":"## GeoJSON\nIn order to plot the Choropleth map, the GeoJSON data is necessary.\n[GeoJSON](https:\/\/en.wikipedia.org\/wiki\/GeoJSON) is an open standard format designed for representing simple geographical features, along with their non-spatial attributes. \n\nQuote from wikipedia, the GeoJSON looks like the following:\n```\n{\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [\n          [\n            [100.0, 0.0], [101.0, 0.0], [101.0, 1.0],\n            [100.0, 1.0], [100.0, 0.0]\n          ]\n        ]\n      },\n      \"properties\": {\n        \"prop0\": \"value0\"\n      }\n    }\n  ]\n}\n```\nFor polygon, the `coordinates` field defines the geometric shape, i.e. the location of the vertices of the polygon, to plot on the map and `properties` typically stores the extra information about the this (In our case, it will contain the province information.)\n\n\nFortunately, there is GeoJSON information of Chinese Province, Chinese Cities and Chinese Counties on Github: https:\/\/github.com\/longwosion\/geojson-map-china.\nLet's download the `china.json` (Province level data) through the `urllib` first:\n\n**NOTE: In order to run the following cells, you have to turn the internet of notebook in Kaggle. You can find it under the `Settings` at the right control panel.**","b7c9da9c":"Finally, we are ready to plot a beautiful Choropleth:","84ef3ba0":"Great, we can use this GeoJSON information to plot province-level Choropleth map now.","c52e234b":"# Motivation and Purpose\n\n[Parul's notebook](https:\/\/kaggle.com\/parulpandey\/wuhan-coronavirus-a-geographical-analysis\/) did a good geographical view of 2019-nCoV in world-wide.\nHowever, I felt the Chinese province-level geographical figures there is not very accurate, especially the latitude and longitude of some Chinese provinces. \nEven though Chinese patients are the definite majority of 2019-nCoV victims, I haven't found a very detailed analysis in Chinese province-level geograph maps so far. I guess the main diffulty here is that many Chinese resources are not friendly to the people who cannot read the Chinese. Moreover, the `country` column in the 2019-nCoV dataset is not correct, either.\n\nBesides that, I feel folium is very elegant and powerful to plot the Choropleth map. \n![Chinese 2019-nCoV Choropleth Map](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/9\/9a\/2019-nCoV_cases_in_Greater_China.svg\/300px-2019-nCoV_cases_in_Greater_China.svg.png) \n\nSo I want this notebook to serve two purposes here:\n\n* Provide an introduction to show how to plot a beautiful Choropleth graph through [folium](https:\/\/python-visualization.github.io\/folium\/) and inspired others to have finer geo-analysis.\n* Provide a simple geo information about Chinese province so that others can utilize this to gain further insights.","d159d47d":"Because the confirmed number in Hubei province is too large, using the raw number will not generate a meaningful and colorful map well. Taking the logirthm is a common approach. For simplicity, I just plot the summation of confirmed number over all the time only. ","6a643e30":"# Extra City-Level GeoJSON Example\n\nFollowing is the example to show how to draw the city level.\nI used the Hubei province (Division Code 42), which has the largest confirmed number as example.","5590a9d6":"# Extract the Chinese-Related Data Out and Preprocessing\nSince we want to focus on the chinese data here, we remove the other countries' data.\nNote that the `Country` column in the dataset is not correct. It is better to be `Country\/Regions` because `Maccu` or `Hong Kong` is not country for sure.\nWe can use the `prov_zh2code` and `prov_en2zh` to generate a new column `ProvinceCode`, which is the key to join the GeoJSON data and the 2019-nCoV data provided here."}}