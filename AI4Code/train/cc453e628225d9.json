{"cell_type":{"0d8a1496":"code","f880c6b7":"code","8cce7ffd":"code","34b9bc6f":"code","717dfad7":"code","5ef724af":"code","bce2490b":"code","ce26ded0":"code","76207035":"code","5dfa8594":"code","410633c2":"code","2fd82dcc":"markdown"},"source":{"0d8a1496":"!pip install chart_studio","f880c6b7":"#Get reviews\nimport os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport chart_studio.plotly as py\nfrom tqdm.notebook import tqdm_notebook\nfrom IPython.display import display, HTML\nimport plotly.graph_objects as go\n\ntqdm_notebook.pandas()","8cce7ffd":"import requests\nimport json\nfrom wordcloud import WordCloud\nfrom collections import Counter","34b9bc6f":"ACCOUNTID = 'ipXCGa0ogLaEQ0FD5S534lvzObz1'\nTOKEN = 'eyJhbGciOiJSUzI1NiIsImtpZCI6ImI5ODI2ZDA5Mzc3N2NlMDA1ZTQzYTMyN2ZmMjAyNjUyMTQ1ZTk2MDQiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL3NlY3VyZXRva2VuLmdvb2dsZS5jb20vcmFweWRhaSIsImF1ZCI6InJhcHlkYWkiLCJhdXRoX3RpbWUiOjE2MDY4MTY0OTEsInVzZXJfaWQiOiJpcFhDR2Ewb2dMYUVRMEZENVM1MzRsdnpPYnoxIiwic3ViIjoiaXBYQ0dhMG9nTGFFUTBGRDVTNTM0bHZ6T2J6MSIsImlhdCI6MTYwNjk5MDk5OCwiZXhwIjoxNjA2OTk0NTk4LCJlbWFpbCI6InN1ZGhlbmRyYWthbWJoYW1ldHR1QGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJmaXJlYmFzZSI6eyJpZGVudGl0aWVzIjp7ImVtYWlsIjpbInN1ZGhlbmRyYWthbWJoYW1ldHR1QGdtYWlsLmNvbSJdfSwic2lnbl9pbl9wcm92aWRlciI6InBhc3N3b3JkIn19.PX7MHhRaCNfG9PUCjElxlD8Er5c9lA87z8hCr4Pngo4gTPG11AivraNtffTPdy8w_-QSnUw_DfNC4YPma5huouK6Qa0cF8UQj9TDaT5Xp3HmgUPiZYeQ_BLPjjqWPQjDNkIThIEy_E6H5AzwfqOiClzpdveEyW-YRxOIS9W5OmolRhHrXOQlE-9C-sYOBd7IDtJhcmbTc1FHQnOkj7e6FxFZ1EjfGkoWHW5ofpYhpt3dUKlF6e1zc-7BJHStIjkZak37Byg-HCS9nLaFFKRcleW_N2rFLkXKeHFiMhBMHJbqPnIN-i1xS4wGQZT_tVbumJEw3IZgWNCF87d1DqoxGA'\nPROVIDER = 'aws'","717dfad7":"ROOT = '..\/input\/hotel-reviews'","5ef724af":"# 1. Functions\n\ndef get_keyphrases(text, provider = \"auto\", language = \"auto\", accountid = '', token = ''):\n    # Text Pre-Processing\n    text = text.strip()\n    text = text.replace(\"'\",\"\")\n    text = text.replace('\"','')\n    text = text.replace('\u2019','')\n\n    # RAPYD.AI API Call as per https:\/\/www.rapyd.ai\/docs\n    url = \"https:\/\/api.rapyd.ai\/v1\/nlp\/keyphrase\"\n  \n    payload = {\n      \"text\": text, \n      \"provider\": provider,\n      \"language\": language\n    }  \n  \n    headers = {\n        'ACCOUNT-ID': accountid,\n        'Content-Type': 'application\/json',\n        'Authorization': 'Bearer ' + token\n    }\n    response = requests.request(\"POST\", url, headers=headers, json = payload)\n    \n    try:\n        result = json.loads(response.text.encode('utf8'))['result']\n    except:\n        print(json.loads(response.text.encode('utf8')))\n    \n    # Response handling\n    if provider == \"aws\" or provider == \"auto\":\n        try:\n            keyphrases = []\n            result = result['keyPhrases']\n            \n            for d in result:\n                keyphrases.append({'keyphrase': d['text'], 'score': d['score']})\n        except:\n            keyphrases: None\n            print(keyphrases, response.text)\n    \n    if provider == \"gcp\":\n        try:\n            keyphrases = []\n            result = result['keyPhrases']\n            \n            for d in result:\n                keyphrases.append({'keyphrase': d['text'], 'score': d['score']})\n        except:\n            keyphrases: None\n            print(keyphrases, response.text)\n    \n    if provider == \"azure\":\n        try:\n            keyphrases = []\n            result = result['keyPhrases']\n            \n            for d in result:\n                keyphrases.append({'keyphrase': d['text'], 'score': d['score']})\n        except:\n            keyphrases: None\n            print(keyphrases, response.text)\n    \n    return keyphrases\n\n# Generatinng wordtable\ndef generate_wordtable(data, rating, positive = True):\n    \n    # Filter Dataframe\n    if positive == False:\n        wordcloud_input = data[data['reviews.rating'] <= rating]['keyphrases'].to_list()\n        color = 'lightcoral'\n\n    if positive == True:\n        wordcloud_input = data[data['reviews.rating'] > rating]['keyphrases'].to_list()\n        color = 'lightgreen'\n    \n    # Prepare data for wordcloud\n    wordcloud_ls = []\n    for l in wordcloud_input:\n        for i in l:\n            wordcloud_ls.append(i['keyphrase'])\n            \n    # Keyphrases dataframe\n    ratings_df = pd.DataFrame({\"Ratings\": [rating] * len(wordcloud_ls)})\n    keywords_df = pd.DataFrame({\"Keywords\": wordcloud_ls})\n    keywords_df = pd.concat([ratings_df.reset_index(drop = True), keywords_df.reset_index(drop = True)], axis=1)\n    \n    # Generating Table\n    wordtable = go.Figure(data=[go.Table(\n    header=dict(values=list(keywords_df.columns),\n                fill_color='paleturquoise',\n                align='left'),\n    cells=dict(values=[keywords_df.Ratings, keywords_df.Keywords],\n               fill_color= color,\n               align='left'))\n                     ]) \n    \n    return wordtable            ","bce2490b":"# 2. Loading review data\nreviews_df = pd.read_csv(os.path.join(ROOT, \"Datafiniti_Hotel_Reviews.csv\"))\n\n# Considering only 30 rows of data \ndata = reviews_df.head(30)\n# display(data)","ce26ded0":"# 3. Analyse Keywords\n\nreviews_text = data['reviews.text']\nkeyphrases = reviews_text.progress_apply(lambda x: get_keyphrases(x, PROVIDER, \"auto\", ACCOUNTID, TOKEN))\nkeyphrases_df = pd.DataFrame({\"keyphrases\": keyphrases})\ndata = pd.concat([data.reset_index(drop = True), keyphrases_df.reset_index(drop = True)], axis = 1)","76207035":"# 4. Plot interactive word tables\nfrom ipywidgets import interact, interactive, fixed, interact_manual\nimport ipywidgets as widgets\nimport matplotlib.pyplot as plt, random\n\ndisplay(HTML(\"<h2>Keywords<\/h2>\"))\ndef update(Rating=0, WordType=False):\n    table = generate_wordtable(data, Rating, WordType)  \n    table.show()\n\ninteract(update, Rating= widgets.IntSlider(value=1, min=0, max=5, step=1), WordType=[True, False]);","5dfa8594":"# Exporting a small chunk of the data\n# Shuffling the data for better distribution\nreviews_df = reviews_df.sample(frac = 1) \nreviews_df = reviews_df.reset_index(drop=True)\nfinal_df = reviews_df.head(250)","410633c2":"final_df.to_csv(\"HotelReviews.csv\", index=False)","2fd82dcc":"## Interactive ratings and keywordtype inputs"}}