{"cell_type":{"ea8537cc":"code","6d51ed5c":"code","058ec486":"code","ca5c0cfc":"code","b10a1382":"code","6ba864d8":"code","64723cce":"code","da896c54":"code","7d688958":"code","82eeb358":"code","67740032":"code","7c2860e3":"code","3e0781fd":"code","6b2ddb3e":"code","eb2f4b6d":"code","ac996a77":"code","6a4f0b97":"code","88d39149":"code","2af2318f":"code","d0a049b3":"code","00ba33c7":"code","67b57b2c":"code","c1d9db00":"code","232078c4":"code","031b54d6":"code","0f901341":"code","a93e8ad9":"code","ca83f64c":"code","b393b23c":"code","aa7602cb":"code","d72e237d":"code","eb2077d0":"code","1b6cfa11":"code","eeb92a11":"code","62d9d334":"code","07962e15":"code","b791f880":"markdown","257bd196":"markdown","87d02ea8":"markdown"},"source":{"ea8537cc":"import numpy as np\nimport pandas as pd\n\nfrom category_encoders import CountEncoder\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold\n\nfrom tqdm.notebook import tqdm\nimport lightgbm as lgb","6d51ed5c":"# \u30e1\u30a4\u30f3\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u898b\u307e\u3059\ndf_train = pd.read_csv('\/kaggle\/input\/data-science-summer2-osaka\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/data-science-summer2-osaka\/test.csv')","058ec486":"df_user = pd.read_csv(\"..\/input\/data-science-summer2-osaka\/user_x_anime.csv\")\ndf_user_not_zero = df_user[df_user.rating != 0]\ndf_user_not_zero = df_user_not_zero.dropna()","ca5c0cfc":"temp = df_user_not_zero.groupby('user_id')[\"rating\"].mean().reset_index()\ntemp.columns = [\"user_id\",\"rating_mean\"]\ndf_user_ = pd.merge(df_user_not_zero.groupby('user_id').mean().drop(columns = [\"rating\"]), temp, left_on='user_id', right_on='user_id',how='left')\ndf_user__ = pd.merge(df_user, df_user_.drop(columns = [\"anime_id\",\"watching_status\",\"watched_episodes\"]), left_on='user_id', right_on='user_id',how='left')","b10a1382":"df_user_mean = df_user__.groupby('anime_id').mean().reset_index()\ndf_user_mean.drop(['rating','user_id'], axis=1, inplace=True)","6ba864d8":"df_train = pd.merge(df_train, df_user_mean, left_on='MAL_ID', right_on='anime_id',how='left').drop(columns='anime_id')\ndf_test = pd.merge(df_test, df_user_mean, left_on='MAL_ID', right_on='anime_id',how='left').drop(columns='anime_id')","64723cce":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u305d\u308c\u305e\u308c\u306e\u884c\u6570\u3068\u5217\u6570\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\ndf_train.shape, df_test.shape","da896c54":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u5148\u982d\uff15\u884c\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\ndf_train.head()","7d688958":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5148\u982d\uff15\u884c\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\ndf_test.head()","82eeb358":"# \u8aac\u660e\u5909\u6570\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u5909\u6570\u306b\u5206\u5272\u3057\u3066\u304a\u304d\u307e\u3059\ny_train = df_train.Score\nX_train = df_train.drop(['Score'], axis=1)\nX_test = df_test.copy()","67740032":"# dtype\u304cobject\uff08\u6570\u5024\u3067\u306a\u3044\u3082\u306e\uff09\u306e\u30ab\u30e9\u30e0\u540d\u3068\u30e6\u30cb\u30fc\u30af\u6570\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306f5000\u884c\u306a\u306e\u3067\u3001Name\u306f\u5b8c\u5168\u30e6\u30cb\u30fc\u30af\n# \u610f\u5916\u3068English\/Japanese name\u306f\u30e6\u30cb\u30fc\u30af\u3067\u306f\u306a\u304f\u540c\u3058\u3082\u306e\u304c\u7e70\u308a\u8fd4\u3057\u767b\u5834\u3057\u3066\u3044\u308b\u4f8b\u304c\u3042\u308b\u3002\u30b7\u30ea\u30fc\u30ba\u3082\u306e\uff1f\n# Genres\u3068Aired\u306f\u305d\u308c\u305e\u308c\u4e2d\u8eab\u304c\u8907\u5408\u5316\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u305f\u3081\u306bhigh cardinality\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u3088\u3046\u3060\u3002\n# Genres\u306f\u30ab\u30f3\u30de\u533a\u5207\u308a\u3067\u9805\u76ee\u304c\u5217\u6319\u3055\u308c\u3066\u304a\u308a\u3001\u5206\u89e3\u3057\u305f\u304f\u306a\u308b\u3002\n# Aired\u306f\u30b9\u30bf\u30fc\u30c8\u3068\u30a8\u30f3\u30c9\u306e\u7d44\u307f\u5408\u308f\u305b\u306b\u306a\u3063\u3066\u304a\u308a\u3001\u3053\u308c\u3082\u5206\u5272\u3059\u3079\u304d\u3067\u3057\u3087\u3046\u3002\n\ncats = []\nfor col in X_train.columns:\n    if X_train[col].dtype == 'object':\n        cats.append(col)\n        \n        print(col, X_train[col].nunique())","7c2860e3":"# Genres\u306e\u5206\u5272\u3067\u3059\u304c\u3001TFIDF\u3092\u7528\u3044\u3066\u30ab\u30a6\u30f3\u30c8\u3057\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\ntfidf = TfidfVectorizer(max_features=1000, use_idf=False, )\n\nTXT_train_enc = tfidf.fit_transform(X_train.Genres)\nTXT_test_enc = tfidf.transform(X_test.Genres)\n\nX_train.drop(['Genres'], axis=1, inplace=True)\nX_test.drop(['Genres'], axis=1, inplace=True)","3e0781fd":"tfidf.vocabulary_","6b2ddb3e":"# sparse matrix\u3067\u8fd4\u3063\u3066\u304d\u307e\u3059\n# \u4eca\u56de\u306f\u30ab\u30e9\u30e0\u6570\u304c\u5c11\u306a\u3044\u3067\u3059\u304c\u3001\u4e00\u822c\u306b\u306f\u304b\u306a\u308a\u30ef\u30a4\u30c9\u306b\u306a\u308b\u306e\u3067\u30e1\u30e2\u30ea\u52b9\u7387\u4e0a\u5927\u4e8b\u3067\u3059\u306d\u3002\nTXT_train_enc","eb2f4b6d":"# \u5bc6\u884c\u5217\u306b\u5909\u63db\u3059\u308b\u3068\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u306d\u3002\nTXT_train_enc.todense()","ac996a77":"# \u4eca\u56de\u306f\u5217\u6570\u5c11\u306a\u3044\u306e\u3067\u5bc6\u884c\u5217\u306b\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n# \u758e\u884c\u5217\u306e\u307e\u307e\u5b66\u7fd2\u5668\u306b\u5165\u308c\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\n# TXT_train_enc = TXT_train_enc.todense()\n# TXT_test_enc = TXT_test_enc.todense()\nTXT_train_enc = TXT_train_enc.toarray()\nTXT_test_enc = TXT_test_enc.toarray()","6a4f0b97":"# \ndef aired_datetime_span(air):\n    try:\n        d = pd.to_datetime(air.split(' to ')[1]) - pd.to_datetime(air.split(' to ')[0])\n        d \/= pd.Timedelta('1d')\n    except:\n        d = -9999\n    return d","88d39149":"# Aired\u306b\u3064\u3044\u3066\u306f\u3001\u3053\u3053\u3067\u306f\u671f\u9593\u306e\u59cb\u307e\u308a\uff1f\u3060\u3051\u53d6\u308a\u51fa\u3057\u3066\u305d\u308c\u304c\u3069\u308c\u3060\u3051\u4ee5\u524d\u304b\u3092\u53d6\u308a\u51fa\u3057\u3066\u307f\u307e\u3059\u3002\n# \u3082\u3063\u3068\u8272\u3005\u826f\u3044\u5de5\u592b\u304c\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u306e\u3067\u8a66\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\ndef aired_datetime(air):\n    try:\n        d = pd.to_datetime('2021-08-01') - pd.to_datetime(air.split(' to ')[0])\n        d \/= pd.Timedelta('1d')\n    except:\n        d = -9999\n    try:\n        d = pd.to_datetime('2021-08-01') - pd.to_datetime(air)\n        d \/= pd.Timedelta('1d')\n    except:\n        d = -9999\n    return d","2af2318f":"# \u5909\u63db\u3057\u307e\u3059\nX_train['Aired_start'] = X_train['Aired'].apply(aired_datetime)\nX_test['Aired_start'] = X_test['Aired'].apply(aired_datetime)\n\nX_train['Aired_span'] = X_train['Aired'].apply(aired_datetime_span)\nX_test['Aired_span'] = X_test['Aired'].apply(aired_datetime_span)","d0a049b3":"# \u305d\u306e\u4ed6\u306b\u3082\u8272\u3005\u3084\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u306f\u3082\u3046\u4e00\u62ec\u3057\u3066\u30a8\u30a4\u30e4\u3067Count Encoding\u3057\u3066\u3057\u307e\u3044\u307e\u3059\ncats = []\n\nfor col in X_train.columns:\n    if X_train[col].dtype == 'object':\n        cats.append(col)\n        \nce = CountEncoder(cols=cats)\n\n# \u30ab\u30a6\u30f3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u4fee\u6b63\ntrain_len = len(X_train)\ntest_len = len(X_test)\nX_all = pd.concat([X_train,X_test])\nX_all = ce.fit_transform(X_all)\nX_train = X_all[:train_len]\nX_test = X_all[train_len:]","00ba33c7":"#\u3000\u3071\u3063\u3068\u308f\u304b\u308b\u4e0d\u8981\u30ab\u30e9\u30e0\u306f\u9664\u3044\u3066\u304a\u304d\u307e\u3059\nX_train.drop(['MAL_ID', 'Name'], axis=1, inplace=True)\nX_test.drop(['MAL_ID', 'Name'], axis=1, inplace=True)","67b57b2c":"type(X_train)","c1d9db00":"df_temp = X_train.copy()","232078c4":"col = X_train.columns\ncol","031b54d6":"# \u5148\u307b\u3069\u51e6\u7406\u3057\u305f\u30c6\u30ad\u30b9\u30c8\u30ab\u30e9\u30e0\u3068\u7d50\u5408\u3057\u307e\u3059\nX_train = np.concatenate([X_train.values, TXT_train_enc], axis=1)\nX_test = np.concatenate([X_test.values, TXT_test_enc], axis=1)\n# X_train = X_train.values\n# X_test = X_test.values","0f901341":"type(X_train)","a93e8ad9":"# \u30bf\u30fc\u30b2\u30c3\u30c8\u3082numpy\u306earray\u306b\u3057\u3066\u304a\u304d\u307e\u3059\ny_train = y_train.values","ca83f64c":"# \u5404fold\u306e\u30b9\u30b3\u30a2\u3092\u4fdd\u5b58\u3059\u308b\u30ea\u30b9\u30c8\nscores = []\n\n# # \u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3046\n# \u5b66\u7fd2\u30c7\u30fc\u30bf\u30924\u3064\u306b\u5206\u5272\u3057\u3001\u3046\u30611\u3064\u3092\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u3068\u3059\u308b\u3053\u3068\u3092\u3001\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u3092\u5909\u3048\u3066\u7e70\u308a\u8fd4\u3059\nkf = KFold(n_splits=3, shuffle=True, random_state=71)\nfor tr_idx, va_idx in kf.split(X_train):\n    # \u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u306b\u5206\u3051\u308b\n    X_train_, X_val = X_train[tr_idx], X_train[va_idx]\n    y_train_, y_val = y_train[tr_idx], y_train[va_idx]\n    \n    # \u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\u3092\u884c\u3046\n    model_lgb = lgb.LGBMRegressor(learning_rate=0.03, n_estimators=1000)\n    model_lgb.fit(X_train_, y_train_, eval_set=[(X_val, y_val)], eval_metric='rmse',verbose=0)\n    # \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\u5024\u3092\u78ba\u7387\u3067\u51fa\u529b\u3059\u308b\n    y_pred = model_lgb.predict(X_val)\n    score = mean_squared_error(y_val, y_pred)**0.5\n    scores.append(score)\n    \n# \u3067\u306f\u3001\u5168\u30c7\u30fc\u30bf\u3067\u518d\u5b66\u7fd2\u3057\u3066\u307f\u307e\u3057\u3087\u3046\n# \u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u6570\u306f\u5148\u307b\u3069\u306e\u6700\u9069\u5024\u3092\u7528\u3044\u3066\u307f\u307e\u3059\n# best_iter = model_lgb.best_iteration_\nmodel_lgb = lgb.LGBMRegressor(learning_rate=0.02, n_estimators=10000, random_state=71)\nmodel_lgb.fit(X_train, y_train, eval_metric='rmse',verbose=False)\n\n# \u3044\u3088\u3044\u3088\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u4e88\u6e2c\u3057\u307e\u3059\ny_pred_test = model_lgb.predict(X_test)\ny_pred_test","b393b23c":"# \u5e73\u5747\u30b9\u30b3\u30a2\u3092\u7b97\u51fa\nnp.array(scores).mean()","aa7602cb":"# \u3067\u306f\u3001\u5168\u30c7\u30fc\u30bf\u3067\u518d\u5b66\u7fd2\u3057\u3066\u307f\u307e\u3057\u3087\u3046\n# \u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u6570\u306f\u5148\u307b\u3069\u306e\u6700\u9069\u5024\u3092\u7528\u3044\u3066\u307f\u307e\u3059\nbest_iter = model_lgb.best_iteration_\nmodel_lgb = lgb.LGBMRegressor(learning_rate=0.02, n_estimators=10000, random_state=71)\nmodel_lgb.fit(X_train, y_train, eval_metric='rmse',verbose=False)","d72e237d":"# \u3044\u3088\u3044\u3088\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u4e88\u6e2c\u3057\u307e\u3059\ny_pred_test = model_lgb.predict(X_test)\ny_pred_test","eb2077d0":"# \u63d0\u51fa\u7528\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u3093\u3067\u4e88\u6e2c\u5024\u3092\u4ee3\u5165\u3057\u307e\u3059\u3002\nsubmission = pd.read_csv('\/kaggle\/input\/data-science-summer2-osaka\/sample_submission.csv', index_col=0)\nsubmission.Score = y_pred_test","1b6cfa11":"submission","eeb92a11":"# csv\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u4fdd\u5b58\u3057\u307e\u3059\nsubmission.to_csv('submission.csv')","62d9d334":"#txt\u7528\u306e\u5217\u540d\u3092\u8003\u3048\u307e\u3059\uff0e\nlen(TXT_train_enc[0])\ncol_txt = [\"txt\" + f\"{i}\" for i in range(len(TXT_train_enc[0]))]","07962e15":"import matplotlib.pyplot as plt\nimportances = pd.Series(model_lgb.feature_importances_,index = col.tolist() + col_txt)\nimportances = importances.sort_values()\nimportances.plot(kind = \"barh\",figsize = (10,15))\nplt.title(\"imporance in the lgb Model\")\nplt.show()","b791f880":"# \u3053\u3053\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f\uff01\uff01\uff01\n\u3067\u304d\u308b\u3060\u3051\u3082\u3068\u306e\u30b3\u30fc\u30c9\u3092\u5909\u3048\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3057\u305f\uff0e","257bd196":"importance\u306e\u8981\u7d20\u540d\u3092\u898b\u308b\u306b\u306f\u3053\u3053\u3067numpy.ndarray\u3068\u3044\u3046\u7a2e\u985e\u306e\u578b\u306b\u5909\u308f\u3063\u3066\u3044\u308b\u306e\u3067\uff0c\u5909\u308f\u3063\u3066\u3057\u307e\u3046\u524d\u306b\u5217\u540d\u3092\u62bd\u51fa\u3059\u308bor\u5909\u6570\u540d\u3092\u5909\u3048\u308b\uff08X_train\u306a\u64cd\u4f5c\u3092\u3057\u306a\u3044\uff09or\u5909\u66f4\u3059\u308b\u524d\u306b\u30b3\u30d4\u30fc\u3059\u308b\u306a\u3069\u306a\u3069\u304c\u3042\u308a\u307e\u3059\uff0e","87d02ea8":"\u3053\u3053\u307e\u3067\u306fpandas.core.frame.DataFrame\u3068\u3044\u3046\u7a2e\u985e\u306e\u578b"}}