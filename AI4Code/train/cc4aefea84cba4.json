{"cell_type":{"941fa1ae":"code","09bf31c4":"code","af8ebddc":"code","473a2b7e":"code","ea739f60":"code","1cdb4547":"code","7dc4ea34":"code","1e00089c":"code","0f5da574":"code","e1f65272":"code","90502fb8":"code","b5e0b35e":"code","800f1b88":"code","db6fb85e":"code","b4b0631e":"code","ac7fb7e0":"markdown","ba1a87af":"markdown","c794e86e":"markdown","1c074ac8":"markdown","a276b738":"markdown"},"source":{"941fa1ae":"import json, os, sys, time\nimport pandas as pd, numpy as np\nimport matplotlib.pyplot as plt\nfrom IPython.display import HTML, display, Image\nfrom leaderboard_to_csv import *","09bf31c4":"plt.rc('figure', figsize=(10, 10))\nplt.rc('font', size=12)","af8ebddc":"base_dir = '..\/input\/santa-2020-leaderboards'\nfiles = sorted(os.listdir(base_dir))\nlen(files)","473a2b7e":"with open(f'{base_dir}\/{files[-1]}') as f:\n    final = json_to_dataframe(json.load(f)).set_index('teamId').add_prefix('final ')","ea739f60":"medals = { 'gold':3, 'silver':2, 'bronze':1, None:0 }\nmedal_colors = np.asarray(['deepskyblue', 'chocolate', 'silver', 'gold'])\nrank_to_color = lambda r: f'#00{int((1-r)*255):02x}{int(r*255):02x}'","1cdb4547":"names = []\nfor i, json_file in enumerate(files):\n    with open(f'{base_dir}\/{json_file}') as f:\n        df = json_to_dataframe(json.load(f)).set_index('teamId')\n        df = df.join(final)\n        # using final rankings to color points\n        # either color scheme results in bands over x or y coordinates\n        # using one consistent color per team makes it easier to see movements\n        ranks = df['final rank'].rank(pct=True, ascending=False)\n        medal_ser = df['final medal'].map(medals)\n        color = ranks.apply(rank_to_color)\n        color = np.where(medal_ser, medal_colors[medal_ser], color)\n        size = np.log(df['entries']) * 5\n        df.plot.scatter('final rank', 'rank', c=color, s=size)\n        s = json_file.replace('_', ' ').replace('.json', '')\n        date = pd.to_datetime(s)\n        plt.title('Santa Shake - ' + str(date))\n        plt.tight_layout()\n        png = f'{i}.png'\n        names.append(png)\n        plt.savefig(png, bbox_inches='tight')\n        plt.close()","7dc4ea34":"# https:\/\/github.com\/ipython\/ipython\/issues\/10045\ndef show_gif(fname):\n    import base64\n    with open(fname, 'rb') as fd:\n        b64 = base64.b64encode(fd.read()).decode('ascii')\n    return HTML(f'<img src=\"data:image\/gif;base64,{b64}\" \/>')","1e00089c":"name_list = ' '.join(names)\nrepeat_final = ' '.join([names[-1]] * 15)\noutput = f'santa-2020-shakeup.gif'","0f5da574":"!convert -delay 20 -loop 0 -dispose previous {name_list} {repeat_final} {output}","e1f65272":"show_gif(output)","90502fb8":"names = []\nTOP_N = 400\nPAD = 10\nfor i, json_file in enumerate(files):\n    with open(f'{base_dir}\/{json_file}') as f:\n        df = json_to_dataframe(json.load(f)).set_index('teamId')\n        df = df.join(final)\n        df = df[df['final rank'] <= TOP_N]\n        ranks = df['final rank'].rank(pct=True, ascending=False)\n        medal_ser = df['final medal'].map(medals)\n        color = ranks.apply(rank_to_color)\n        color = np.where(medal_ser, medal_colors[medal_ser], color)\n        size = np.log(df['entries']) * 7\n        df.plot.scatter('final rank', 'rank', c=color, s=size)\n        s = json_file.replace('_', ' ').replace('.json', '')\n        date = pd.to_datetime(s)\n        plt.title(f'Santa Shake - Top {TOP_N} - ' + str(date))\n        plt.xlim(-PAD, TOP_N+PAD)\n        plt.ylim(-PAD, TOP_N+PAD)\n        plt.tight_layout()\n        png = f'top{TOP_N}_{i}.png'\n        names.append(png)\n        plt.savefig(png, bbox_inches='tight')\n        plt.close()","b5e0b35e":"name_list = ' '.join(names)\nrepeat_final = ' '.join([names[-1]] * 15)\noutput = f'santa-2020-shakeup-top{TOP_N}.gif'","800f1b88":"!convert -delay 20 -loop 0 -dispose previous {name_list} {repeat_final} {output}","db6fb85e":"show_gif(output)","b4b0631e":"!rm *.png ","ac7fb7e0":"# Animated Shake-up","ba1a87af":"# Santa 2020 Animated Shake-up Plot\n\nThe shake-up was a live, dynamic process in this competition! To avoid habitually checking the LB I set up a cron job to do it for me: making regular snapshots of the leaderboard, every two hours.\n\nThanks to the [command line API](https:\/\/github.com\/Kaggle\/kaggle-api) it only takes a minute to upload them as a dataset :)\n\nThen, with a a quick copy\/paste job (code from\nhttps:\/\/www.kaggle.com\/jtrotman\/meta-kaggle-scatter-plot-competition-shake-up\nwhich makes a plot for *every* competition!) I've turned them into animations.\n\n(I cannot, in the time available, make the `matplotlib.animation` code work without glitches or flaws of some kind so I use *ImageMagick* `convert` command line. If anyone can fix this to use that API with play\/pause\/advance buttons etc please do fork and make it public & I'll upvote you.)\n\nIn fact, with some more work, the leaderboard could be reconstructed at any point in time from the [Meta Kaggle](https:\/\/www.kaggle.com\/kaggle\/meta-kaggle) data, grouping by team ID and taking the max submission score, after any given episode. If anyone wants to do that then hopefully these leaderboard snapshots can help verify it works and\/or spot any intriguing discrepancies.\n\nIMO, the best leaderboard UI in this competition was Nagiss' Notebook\nhttps:\/\/www.kaggle.com\/nagiss\/santa2020-leaderboard-analysis\nwhich gave a much better indication of which positions were shakey (depending on a single lucky outlier) and which were solid :D","c794e86e":"Fork & remove this line if you want all the individual frames :)","1c074ac8":"# Animated Top 400 Shake-up","a276b738":"# Top 400 teams\n\nSame again but top 400 teams only"}}