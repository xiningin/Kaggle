{"cell_type":{"cd5519f0":"code","763665a1":"code","37892e56":"code","d156e772":"code","4456935a":"code","74c6d84b":"code","9e80c517":"code","e1947ca4":"code","ef84d1e3":"code","2f165ae7":"code","fc882272":"code","0917fa93":"code","a84278fd":"code","24d3c4b2":"code","d4cc4575":"code","dd19f1fa":"code","81f11d09":"code","a70f819c":"code","6a2a53e3":"code","dfdc9a8d":"code","36995f5f":"code","0142ec96":"code","400a825f":"code","3eeaae71":"code","3ad42266":"code","ba3d64a4":"code","b1a567cc":"code","c177a904":"code","03e52d0a":"code","42a58d77":"code","70aebfff":"code","ed25afb1":"code","c916a3b9":"code","8f5572b2":"code","9660fe52":"code","17a5104a":"code","b5bb9d08":"code","f28710ef":"code","30b65933":"code","b4bfaad5":"code","1d1d86f0":"code","0a8c42b6":"code","253db16f":"code","6618d62a":"code","269e3e89":"code","6a33ae08":"code","a5fbef89":"code","2b50603c":"code","6276ec15":"code","b7e82d52":"code","18d4c937":"markdown","5e3fced2":"markdown","a0044f4f":"markdown","ab4d015b":"markdown","873aa4b1":"markdown","ad2e7805":"markdown","ae401749":"markdown","c5251854":"markdown","9e7a322c":"markdown","7d159498":"markdown","793756c9":"markdown","6d3c7aaa":"markdown"},"source":{"cd5519f0":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom fbprophet import Prophet","763665a1":"df = pd.read_json('..\/input\/prices_2017.json')","37892e56":"df=df.set_index('date')","d156e772":"df.head()","4456935a":"df=df.drop('trading_code',axis=1)  ","74c6d84b":"df.head()","9e80c517":"%matplotlib inline","e1947ca4":"data2=df.reset_index()\ndata2.head()","ef84d1e3":"data3 = data2.rename(columns={'date': 'ds'})\ndata3 = data3.rename(columns={'closing_price': 'y'})","2f165ae7":"data3.head()","fc882272":"data_for_pr1=data3[['ds','y']]","0917fa93":"data_for_pr2=data3","a84278fd":"import matplotlib.pyplot as plt\nplt.rcParams[\"figure.figsize\"] = (20,20)","24d3c4b2":"data_for_pr1['y'].plot()","d4cc4575":"data2['opening_price'].plot()","dd19f1fa":"m=Prophet()","81f11d09":"m.fit(data_for_pr1)","a70f819c":"future = m.make_future_dataframe(periods=365)","6a2a53e3":"forecast = m.predict(future)","dfdc9a8d":"forecast.head()","36995f5f":"forcast1=forecast[['ds', 'yhat']]","0142ec96":"fig2 = m.plot_components(forecast)","400a825f":"!pip install tensorflow-gpu","3eeaae71":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport tensorflow as tf","3ad42266":"df = pd.read_json('..\/input\/prices_2017.json')","ba3d64a4":"df=df.set_index('date')","b1a567cc":"df.head()","c177a904":"df=df.drop('trading_code',axis=1)  ","03e52d0a":"corr = df.corr()","42a58d77":"import seaborn as sns","70aebfff":"sns.heatmap(corr)","ed25afb1":"df.isnull().sum()","c916a3b9":"df.corr()[['closing_price']]\n","8f5572b2":"df.corr()[['closing_price']].plot(kind='bar')","9660fe52":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler","17a5104a":"X = df.drop('closing_price',axis=True)\ny = df[['closing_price']]","b5bb9d08":"\nx_train,x_test,y_train,y_test = train_test_split(X,y,test_size=.2)\nresult = y_test\nscaler = MinMaxScaler()\nscaler.fit(y_train)\ny_train =scaler.transform(y_train) # we transform the y so after predict we have to inverse transeform it\nscaler.fit(y_test)\ny_test =scaler.transform(y_test) # we transform the y so after predict we have to inverse transeform it\n\n","f28710ef":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom keras.layers import Dropout\nfrom keras.layers import Flatten","30b65933":"##have to convert to 3 dim for feeding RNN\nx_train = np.array(x_train)\nx_test = np.array(x_test)\n\nx_train = np.reshape(x_train, (x_train.shape[0],x_train.shape[1],1))\nx_test = np.reshape(x_test, (x_test.shape[0],x_test.shape[1],1))\n\nprint (x_train.shape)\nprint (x_test.shape)\nprint (y_train.shape)\nprint (y_test.shape)","b4bfaad5":"def RNNMODEL():\n    regressor = Sequential()\n    regressor.add(LSTM(units = 50,return_sequences = True))\n    regressor.add(Dropout(.2))\n    regressor.add(LSTM(units = 50))\n    regressor.add(Dropout(0.2))\n    regressor.add(Dense(units = 1)) #we want single feature output which is df['Close']\n    regressor.compile(optimizer = 'adam',loss = 'mean_squared_error')\n    return regressor\n","1d1d86f0":"model = RNNMODEL()","0a8c42b6":"model.fit(x_train,y_train,epochs = 10)","253db16f":"y_pred = model.predict(x_test)","6618d62a":"y_pred","269e3e89":"## we have to inverse transform it cause we transform the x_test before\noutput = scaler.inverse_transform(y_pred)","6a33ae08":"output","a5fbef89":"real_output = []\nfor item in output:\n    real_output.append((item[0]))","2b50603c":"result['predited value'] = np.array(real_output)","6276ec15":"result.head()\n","b7e82d52":"import matplotlib.pyplot as plt\nplt.rcParams[\"figure.figsize\"] = (20,20)\nresult.plot()","18d4c937":"## using RNN","5e3fced2":"## resetting index","a0044f4f":"## extracting feature fro  the total dataset","ab4d015b":"## setting index","873aa4b1":"## training model","ad2e7805":"## 2007 Dhaka stock market data","ae401749":"## removing unnecessary column","c5251854":"## make the prediction","9e7a322c":"## this part is important ..you must rename your index and target column with 'ds' and 'y' to use the prophet algorithm","7d159498":"## import basic tools with FBPROPHET tools from facebook machine learning model","793756c9":"## make prediction from 1 year","6d3c7aaa":"## initilize the prophet object"}}